id,title,username,language,date,content
vpLNGHHY,ModelDBT_BlockParameters,tabr,PHP,Thursday 21st of March 2024 01:03:30 PM CDT,"<?php
require_once(__DIR__ . '/../CRUD.php');
require_once(__DIR__ . '/../../include/Util.php');

class ModelDBT_BlockParameters extends CRUD {
    const P1_BALANCE_BLOCK_MAX_VALUE = 0;
    public function create(array $array, array $params = array()) {
        //var_dump($array);die;
        //if (Util::isParameterIsEmpty($array,'organization_id')) {
        //    if (Util::isParameterTrue($params,'debug')) {
        //        echo 'organization_id is empty',PHP_EOL;
        //    }
        //    return false;
        //}
        if (false === isset($array['p1_balanceBlock'])) {
            if (Util::isParameterTrue($params,'debug')) {
                echo 'p2_time_sec_block1 is empty',PHP_EOL;
            }
            return false;
        }
        $array['p1_balanceBlock'] = (int) $array['p1_balanceBlock'];
        if ($array['p1_balanceBlock'] > self::P1_BALANCE_BLOCK_MAX_VALUE ) {
            if (Util::isParameterTrue($params,'debug')) {
                echo 'p1_balanceBlock should be less than ',self::P1_BALANCE_BLOCK_MAX_VALUE,PHP_EOL;
            }
            return false;
        }
        if (Util::isParameterIsEmpty($array,'p2_time_sec_block1')) {
            if (Util::isParameterTrue($params,'debug')) {
                echo 'p2_time_sec_block1 is empty',PHP_EOL;
            }
            return false;
        }
        if (Util::isParameterIsEmpty($array,'p3_time_sec_block2')) {
            if (Util::isParameterTrue($params,'debug')) {
                echo 'p3_time_sec_block2 is empty',PHP_EOL;
            }
            return false;
        }
        if (Util::isParameterIsEmpty($array,'p6_time_sec_denial_of_service')) {
            if (Util::isParameterTrue($params,'debug')) {
                echo 'p6_time_sec_denial_of_service is empty',PHP_EOL;
            }
            return false;
        }
        $array['p2_time_sec_block1'] = (int)$array['p2_time_sec_block1'];
        $array['p3_time_sec_block2'] = (int)$array['p3_time_sec_block2'];
        $array['p6_time_sec_denial_of_service'] = (int)$array['p6_time_sec_denial_of_service'];
        if (Util::isParameterIsEmpty($array,'p4_action_block_list_b1')) {
            if (Util::isParameterTrue($params,'debug')) {
                echo 'p4_action_block_list_b1 is empty',PHP_EOL;
            }
            return false;
        }
        if (Util::isParameterIsEmpty($array,'p5_action_block_list_b2')) {
            if (Util::isParameterTrue($params,'debug')) {
                echo 'p5_action_block_list_b2 is empty',PHP_EOL;
            }
            return false;
        }
        $p4_action_block_list_b1 = $array['p4_action_block_list_b1'];
        $p5_action_block_list_b2 = $array['p5_action_block_list_b2'];
        if (false === is_array($p4_action_block_list_b1)) {
            if (Util::isParameterTrue($params,'debug')) {
                echo 'p4_action_block_list_b1 is not array',PHP_EOL;
                //var_dump($p4_action_block_list_b1);
                //var_dump($array);die;
            }
            return false;
        }
        if (false === is_array($p5_action_block_list_b2)) {
            if (Util::isParameterTrue($params,'debug')) {
                echo 'p5_action_block_list_b2 is not array',PHP_EOL;
            }
            return false;
        }
        $p4_action_block_list_b1_json = json_encode($p4_action_block_list_b1);
        if (empty($p4_action_block_list_b1_json)) {
            if (Util::isParameterTrue($params,'debug')) {
                echo 'p4_action_block_list_b1_json is empty',PHP_EOL;
            }
            return false;
        }
        $p5_action_block_list_b2_json = json_encode($p5_action_block_list_b2);
        if (empty($p5_action_block_list_b2_json)) {
            if (Util::isParameterTrue($params,'debug')) {
                echo 'p5_action_block_list_b2_json is empty',PHP_EOL;
            }
            return false;
        }
        $array['p4_action_block_list_b1'] = $p4_action_block_list_b1_json;
        $array['p5_action_block_list_b2'] = $p5_action_block_list_b2_json;


        $params['REPLACE'] = true;
        $array['id'] = 1;
        return parent::create($array, $params);
    }
    public function read(array $where = array(), array $params = array()) {
        //var_dump($where);die;
        $data = parent::read($where, $params);
        if (empty($data)) {
            return false;
        }
        $data = $data[0];
        //var_dump($data);die;
        $data['p4_action_block_list_b1'] = json_decode($data['p4_action_block_list_b1'], true);
        $data['p5_action_block_list_b2'] = json_decode($data['p5_action_block_list_b2'], true);
        return $data;
    }
    public function update(array $data, array $where = array()) {
        //return parent::update($data, $where);
        return false;
    }
    public function delete(array $where) {
        //return parent::delete($where);
        return false;
    }

    public function db_connection() : mysqli {
        return QCGA::getCore()->getDbMasterConnection();
    }
    function __construct($domain_name = '') {
        parent::__construct($domain_name);
        //$this->fields = array();
        //$this->appendField('organization_id', 'INT(6) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY');
        $this->appendField('p1_balanceBlock', 'NUMERIC(8,3) NOT NULL DEFAULT 0');
        $this->appendField('p2_time_sec_block1', 'INT UNSIGNED');
        $this->appendField('p3_time_sec_block2', 'INT UNSIGNED');
        $this->appendField('p4_action_block_list_b1', 'TEXT');
        $this->appendField('p5_action_block_list_b2', 'TEXT');
        $this->appendField('p6_time_sec_denial_of_service', 'INT UNSIGNED');
        //$this->addKey('organization_id', array('organization_id'));
    }


}"
wseXugFp,G2A.com Free Gift Card Guide Mar 2024 FIX,HastyBasher0,GetText,Thursday 21st of March 2024 01:01:43 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

IMPORTANT: If you use this make sure to use the English version of G2A.com otherwise this will not work!

You can buy gift cards directly with it or you can buy popular games then put them on fresh steam accounts and then sell those accounts.
 
PDF guide here:
https://smallpdf.com/file#s=cea149fd-ead1-4939-94cf-d10a8ce7936a
 
Working as of:
21 March 2024















































"
jsA4hiHA,🤑 G2A.com Free Gift Card Guide Mar 2024 FIX 🤑,luckysw,GetText,Thursday 21st of March 2024 12:59:46 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
If you use this make sure to use the English version of G2A.com otherwise this will not work!
  
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view
 
Working as of:
21 March 2024
 
 
 
 
 
 
 
 
 
 
 
 
 "
afJ0kFbW,CurrentOrganizationState,tabr,PHP,Thursday 21st of March 2024 12:59:12 PM CDT,"<?php

require_once(__DIR__ . '/OrganizationState.php');
require_once(__DIR__ . '/../../include/Util.php');
require_once(__DIR__ . '/../../include/qCanGlobalAccessor.php');
require_once(__DIR__ . '/../../include/iValueObject.php');

class CurrentOrganizationState extends OrganizationState implements iValueObject {
    private $cachedData = array();
    public function getRawArray() : array {
        $this->fillCacheIfEmpty();
        return $this->cachedData;
    }
    public function reRead() : void {
        $this->cachedData = array();
        $this->fillCacheIfEmpty();
    }
    public function getStateID() : int {
        $this->fillCacheIfEmpty();
        if (false === empty($this->cachedData)) {
            return $this->cachedData['state_id'];
        }
        return 0;
    }
    public function getOrganizationID() : int {
        $this->fillCacheIfEmpty();
        if (false === empty($this->cachedData)) {
            return $this->cachedData['organization_id'];
        }
        return 0;
    }
    public function getDateStateSwitch() : string {
        $this->fillCacheIfEmpty();
        if (false === empty($this->cachedData)) {
            return $this->cachedData['date_state_switch'];
        }
        return 0;
    }
    public function getDateStateUntil() : string {
        $this->fillCacheIfEmpty();
        if (false === empty($this->cachedData)) {
            return $this->cachedData['date_state_until'];
        }
        return '';
    }
    public function fillCacheIfEmpty() : void {
        if (empty($this->cachedData)) {
            $this->read();
        }
    }
    public function tableName(): string {
        return get_parent_class($this);
    }

    public function create(array $array, array $params = array()) {
        if (Util::isParameterIsEmpty($array, 'state_id')) {
            if (Util::isParameterTrue($params,'debug')) {
                echo 'state_id key is empty',PHP_EOL;
            }
            return false;
        }
        $stateID = $array['state_id'];
        if (false === $this->validateState($stateID)) {
            if (Util::isParameterTrue($params,'debug')) {
                echo 'stateID is invalid',PHP_EOL;
            }
            return false;
        }
        $array['organization_id'] =  QCGA::API3()->objectFabric('CurrentCustomer')->read()['ID'];
        $array['date_state_switch'] = Util::currentCustomerNow();
        //var_dump($array);
        return parent::create($array, $params);
    }

    public function read(array $where = array(), array $params = array()) {
        $where['organization_id'] =  QCGA::API3()->objectFabric('CurrentCustomer')->read()['ID'];
        //var_dump($where);
        //$params['SQL_ONLY'] = true;
        $params['LIMIT'] = 1;
        $params['ORDER_BY'] = array(
            'fields' => array('date_state_switch'),
            'sorting_order' => 'DESC'
        );
        $this->cachedData = parent::read($where, $params);
        if (!empty($this->cachedData)) {
            $this->cachedData = $this->cachedData[0];
        }
        //var_dump($this->cachedData);die;
        return $this->cachedData;
        //return self::state;
    }

    public function update(array $data, array $where = array()) {
        //$data['organization_id'] =  QCGA::API3()->objectFabric('CurrentCustomer')->read()['ID'];
        //var_dump($array);
        //return parent::update($data, $where);
        return false;
    }

    public function delete(array $where) {
        //$where['organization_id'] =  QCGA::API3()->objectFabric('CurrentCustomer')->read()['ID'];
        //var_dump($array);
        //return parent::delete($where);
        return false;
    }
    public function __construct($domain_name = '') {
        parent::__construct($domain_name);
    }

    public function isEmpty(): bool {
        //$this->fillCacheIfEmpty(); //should it be here??!
        return empty($this->cachedData);
    }
}"
hLWeDQHx,OrganizationState,tabr,PHP,Thursday 21st of March 2024 12:58:44 PM CDT,"<?php
require_once(__DIR__ . '/../CRUD.php');
require_once(__DIR__ . '/../../include/Util.php');
require_once(__DIR__ . '/../../include/iValueObject.php');

class OrganizationState extends CRUD {
    private const state = array(
        array(
            'id' => 0 ,
            'name' => 'STATE_UNKNOWN'),
        array(
            'id' => 1 ,
            'name' => 'STATE_NORMAL'),
        array(
            'id' => 2 ,
            'name' => 'STATE_INSUFFICIENT_FUNDS'),
        array(
            'id' => 3 ,
            'name' => 'STATE_BLOCK_1'),
        array(
            'id' => 4 ,
            'name' => 'STATE_BLOCK_2'),
        array(
            'id' => 5 ,
            'name' => 'STATE_TEMPORARY_UNBLOCK'),
        array(
            'id' => 6 ,
            'name' => 'STATE_DENIAL_OF_SERVICE'),
    );
    private $stateIDNameCache = array();
    private $stateNameIDCache = array();
    //public static methods
    public static function defaultStateUnknownRecord() : array {
        return array('id'=>0);
    }
    //public methods
    public function stateIDNameCache() : array {
        if (empty($this->stateIDNameCache)) {
            foreach (self::state as $valueArray) {
                $this->stateIDNameCache[$valueArray['id']] = $valueArray['name'];
            }
        }
        return $this->stateIDNameCache;
    }
    public function stateNameIDCache() : array {
        if (empty($this->stateNameIDCache)) {
            foreach (self::state as $valueArray) {
                $this->stateNameIDCache[$valueArray['name']] = $valueArray['id'];
            }
        }
        return $this->stateNameIDCache;
    }
    public function getStateIDFromName(string $name) {
        if (isset($this->stateNameIDCache()[$name])) {
            return $this->stateNameIDCache()[$name];
        }
        return 0;
    }
    public function getNameFromStateID(int $stateID) : string {
        if (isset($this->stateIDNameCache()[$stateID])) {
            return $this->stateIDNameCache()[$stateID];
        }
        return '';
    }
    public function validateState($stateID) : bool {
        if (isset($this->stateIDNameCache()[$stateID])) {
            return true;
        }
        return false;
    }
    public function getLastState() {

    }
    public function create(array $array, array $params = array()) {
        if (Util::isParameterIsEmpty($array, 'organization_id')) {
            if (Util::isParameterIsEmpty($params, 'debug')) {
                echo 'organization_id is empty',PHP_EOL;
            }
            return false;
        }
        if (Util::isParameterIsEmpty($array, 'state_id')) {
            if (Util::isParameterIsEmpty($params, 'debug')) {
                echo 'state_id is empty',PHP_EOL;
            }
            return false;
        }
        if (Util::isParameterIsEmpty($array, 'date_state_switch')) {
            if (Util::isParameterIsEmpty($params, 'debug')) {
                echo 'state_id is empty, filling with current datetime',PHP_EOL;
            }
            $array['date_state_switch'] = Util::currentCustomerNow();
        }
        return parent::create($array, $params);
    }

    public function read(array $where = array(), array $params = array()) {
        //var_dump($params);die;
        return parent::read($where, $params);
        /*
        $data = parent::read($where, $params);
        if (empty($data)) {
            return array(self::defaultStateUnknownRecord());
        }
        return $data;
        */
    }

    public function update(array $data, array $where = array()) {
        return parent::update($data, $where);
    }

    public function delete(array $where) {
        return parent::delete($where);
    }

    public function db_connection() : mysqli {
        return QCGA::getCore()->getDbMasterConnection();
    }
    function __construct($domain_name = '') {
        parent::__construct($domain_name);
        $this->appendField('organization_id', 'INT(6) UNSIGNED NOT NULL');
        $this->appendField('state_id', 'TINYINT UNSIGNED NOT NULL');
        $this->appendField('date_state_switch', 'DATETIME NOT NULL');//as we use mysql 5.5.68
        $this->appendField('date_state_until', 'DATETIME NOT NULL DEFAULT ""2222-11-11""');
        $this->addKey('organization_id', array('organization_id'));
        $this->addKey('state_id', array('state_id'));
        $this->addKey('organization_id_state_id', array('organization_id','state_id'));
    }

}"
8VFCnVqC,Billing,tabr,PHP,Thursday 21st of March 2024 12:58:13 PM CDT,"<?php
//require_once (__DIR__ . '/../models/Action.php');
//require_once (__DIR__ . '/../models/Menu.php');
require_once (__DIR__ . '/LikeSingleton.php');
require_once (__DIR__ . '/qCanGlobalAccessor.php');
require_once (__DIR__ . '/../api3/objects/CurrentCustomer.php');
require_once (__DIR__ . '/../api3/objects/OrganizationState.php');
require_once (__DIR__ . '/../api3/objects/CurrentOrganizationState.php');
require_once (__DIR__ . '/../include/LogClass.php');

//TODO ""НЕ собирать статистику при статусе ОТКАЗ_В_ОБСЛУЖИВАНИИ""!!!!!!!
class Billing extends LikeSingleton {
    /*
     *
     * tabr, [3/20/2024 3:50 PM]
     * точно переход в нормальное состояние, если баланс больше нуля, а не больше параметра ""Параметр 1 - баланс при котором осуществляется блокировка"" ?
     * tabr, [3/20/2024 3:51 PM]
     * тут возможно закралась логическая ошибка
     * Вася (Кукан), [3/20/2024 3:51 PM]
     * Точно
     */
    const BALANCE_VAL_SWITCH_TO_NORMAL = 0;
    const DATE_BLOCK_FOREVER = '2222-11-11 00:00:00';
    public function updateStateTask() {
        $this->isActionAllowedForDomain(0);//any action would update state
    }
    public function isBillingOn() : bool {
        /** @var CurrentCustomer $CC */
        $CC = QCGA::API3()->objectFactory('CurrentCustomer');
        $data = $CC->read();
        return $data['billing_on'];
        //return true;
    }
    public function isActionAllowedForDomain($actionID, $recursion_call = false) : bool {
        $Log = new LogClass('Billing_isActionAllowedForDomain');
        $Log->debug('Domen: ['.Util::getActiveDomainName().'] action is ['.$actionID.'] started at:'.Util::serverNow());
        /** @var OrganizationState $OS */
        $OS = QCGA::API3()->objectFactory('OrganizationState');
        ///** @var CurrentCustomer $CC */
        //$CC = QCGA::API3()->objectFactory('CurrentCustomer');
        //var_dump($CC->read());
        //var_dump($this->isBillingOn());
        if ($this->isBillingOn()) {
            $Log->debug('billing is on for this domen');
        } else {
            $Log->debug('billing is off for this domen, allow all');
            return true;
        }
        //die;
        //$CC_Balance = $CC->read();
        //$CC_Balance = $CC_Balance['bonus'] + $CC_Balance['paid'];
        $CC_Balance = $this->getDomainBalanceFull();

        /** @var ModelDBT_BlockParameters $BP */
        $BP = QCGA::API3()->objectFactory('ModelDBT_BlockParameters');
        if (empty($BP)) {
            $Log->debug('Error! $BP is empty, deny all');
            return false;//deny if error with class
        }
        $BlockParameters = $BP->read();
        if (empty($BlockParameters)) {
            $Log->debug('allow if no record in BlockParameters');
            return true;//allow if no record
        }
        $DomainCurrentState = $this->getDomainCurrentState();
        $Log->debug('Balance is: '.$CC_Balance.' stateID:'.$DomainCurrentState->getStateID(). ', state: '.$OS->getNameFromStateID($DomainCurrentState->getStateID()));
        //var_dump($BlockParameters);
        //echo '$CC_Balance:', $CC_Balance,PHP_EOL;

        if ($DomainCurrentState->getStateID() === $OS->getStateIDFromName('STATE_UNKNOWN')) {
            $Log->debug('current state is STATE_UNKNOWN, setting state to STATE_NORMAL');
            $this->setDomainState($OS->getStateIDFromName('STATE_NORMAL')); //set new state
            $DomainCurrentState->reRead();
        }
        //var_dump($DomainCurrentState->getRawArray());
        if ($CC_Balance > self::BALANCE_VAL_SWITCH_TO_NORMAL) {
            $Log->debug('$CC_Balance > self::BALANCE_VAL_SWITCH_TO_NORMAL');
            if ($DomainCurrentState->getStateID() === $OS->getStateIDFromName('STATE_NORMAL')) {
                //it's ok
                $Log->debug('ok, state is STATE_NORMAL');
            } else if ($DomainCurrentState->getStateID() === $OS->getStateIDFromName('STATE_INSUFFICIENT_FUNDS')) {
                //it's ok
                $Log->debug('ok, state is STATE_INSUFFICIENT_FUNDS');
            } else  {
                $Log->debug('setting state to STATE_NORMAL');
                $this->setDomainState($OS->getStateIDFromName('STATE_NORMAL')); //set new state
                $DomainCurrentState->reRead();
            }
        }
        switch ($DomainCurrentState->getStateID()) {
            case $OS->getStateIDFromName('STATE_NORMAL'):
                //echo 'STATE_NORMAL',PHP_EOL;
                $Log->debug('STATE_NORMAL');
                if ($CC_Balance > $BlockParameters['p1_balanceBlock'] ) {
                    //echo '$CC_Balance(', $CC_Balance,') > ',$BlockParameters['p1_balanceBlock'],PHP_EOL;
                    $Log->debug('$CC_Balance('. $CC_Balance.') > '.$BlockParameters['p1_balanceBlock'].' returning true');
                    return true;
                } //else {
                    //block & disallow
                //echo 'Setting state to STATE_INSUFFICIENT_FUNDS',PHP_EOL;
                $Log->debug('Setting state to STATE_INSUFFICIENT_FUNDS');
                $set_state_id = $OS->getStateIDFromName('STATE_INSUFFICIENT_FUNDS');
                //$set_state_date = Util::now();
                //echo $set_state_id, '; ', $set_state_date;
                $block_until_unixtime = Util::serverNow(array('AS_UNIXTIME'=>true));
                //var_dump($block_untill_unixtime);
                $block_until_unixtime += $BlockParameters['p2_time_sec_block1'];
                //var_dump($block_untill_unixtime);
                $block_until_datetime = Util::serverNow(['timestamp'=>$block_until_unixtime]);
                $Log->debug('until: '.$block_until_datetime);
                //var_dump($block_untill);
                //var_dump(new DateTime('Y-m-d'));
                //die;
                $this->setDomainState($set_state_id, $block_until_datetime); //new state
                $DomainCurrentState->reRead();
                //var_dump($DomainCurrentState->getRawArray());
                //    return false;
                //}
                //die;
                //break;
            case $OS->getStateIDFromName('STATE_INSUFFICIENT_FUNDS'):
                //echo 'STATE_INSUFFICIENT_FUNDS',PHP_EOL;
                $Log->debug('STATE_INSUFFICIENT_FUNDS');
                //var_dump($DomainCurrentState->getDateStateUntil());
                $current_state_until_unixtime = Util::serverUnixtimeFromDateTime($DomainCurrentState->getDateStateUntil());
                $now_unixtime = (int)(Util::serverNow(array('AS_UNIXTIME'=>true)));
                //var_dump($now_unixtime);
                //var_dump($current_state_until_unixtime);
                if ($now_unixtime > $current_state_until_unixtime) {
                    //echo 'Setting state to STATE_BLOCK_1...',PHP_EOL;
                    $Log->debug('Setting state to STATE_BLOCK_1');
                    $set_state_id = $OS->getStateIDFromName('STATE_BLOCK_1');
                    $block_until_unixtime = $now_unixtime + $BlockParameters['p3_time_sec_block2'];
                    $block_until_datetime = Util::serverNow(['timestamp'=>$block_until_unixtime]);
                    //echo 'blocking until:', $block_until_unixtime,PHP_EOL;
                    $Log->debug('blocking until:'. $block_until_unixtime);
                    $this->setDomainState($set_state_id, $block_until_datetime); //new state
                    $DomainCurrentState->reRead();
                    //and continue at ... case ... STATE_BLOCK_1
                } else {
                    //echo 'asdsfdasd';
                    //var_dump();
                    //if (in_array($actionID, $BlockParameters['p4_action_block_list_b1'])) {
                    //    return false;
                    //}
                    $Log->debug('allowing');
                    return true;
                }

                //if ($CC_Balance > 0) {
                //    $this->setDomainState($OS->getStateIDFromName('STATE_NORMAL'));
                //    return true;
                //}

                //break;
            case $OS->getStateIDFromName('STATE_BLOCK_1'):
                //echo 'STATE_BLOCK_1',PHP_EOL;
                $Log->debug('STATE_BLOCK_1');
                $current_state_until_unixtime = Util::serverUnixtimeFromDateTime($DomainCurrentState->getDateStateUntil());
                $now_unixtime = (int)(Util::serverNow(array('AS_UNIXTIME'=>true)));
                if ($now_unixtime > $current_state_until_unixtime) {
                    //echo 'Setting state to STATE_BLOCK_2...',PHP_EOL;
                    $Log->debug('Setting state to STATE_BLOCK_2');
                    $set_state_id = $OS->getStateIDFromName('STATE_BLOCK_2');
                    $block_until_unixtime = $now_unixtime + $BlockParameters['p6_time_sec_denial_of_service'];
                    $block_until_datetime = Util::serverNow(['timestamp'=>$block_until_unixtime]);
                    //echo 'blocking until:', $block_until_unixtime,PHP_EOL;
                    $Log->debug('blocking until:'. $block_until_unixtime);
                    $this->setDomainState($set_state_id, $block_until_datetime); //new state
                    //$this->setDomainState($set_state_id); //new state
                    $DomainCurrentState->reRead();
                    //and continue at ... case ... STATE_BLOCK_2
                } else {
                    //echo 'asdsfdasd';
                    //var_dump();
                    if (in_array($actionID, $BlockParameters['p4_action_block_list_b1'])) {
                        $Log->debug('inside p4_action_block_list_b1, denying');
                        return false;
                    }
                    //if (in_array($actionID, $BlockParameters['p5_action_block_list_b2'])) {
                    //    return false;
                    //}
                    $Log->debug('allowing');
                    return true;
                }
                //if ($CC_Balance > 0) {
                //    $this->setDomainState($OS->getStateIDFromName('STATE_NORMAL'));
                //    return true;
                //}

                //break;
            case $OS->getStateIDFromName('STATE_BLOCK_2'):
                //echo 'STATE_BLOCK_2',PHP_EOL;
                $Log->debug('STATE_BLOCK_2');
                $current_state_until_unixtime = Util::serverUnixtimeFromDateTime($DomainCurrentState->getDateStateUntil());
                $now_unixtime = (int)(Util::serverNow(array('AS_UNIXTIME'=>true)));
                if ($now_unixtime > $current_state_until_unixtime) {
                    //echo 'Setting state to STATE_BLOCK_2...',PHP_EOL;
                    $Log->debug('Setting state to STATE_DENIAL_OF_SERVICE');
                    $set_state_id = $OS->getStateIDFromName('STATE_DENIAL_OF_SERVICE');
                    $this->setDomainState($set_state_id); //new state
                    $DomainCurrentState->reRead();
                    //and continue at ... case ... STATE_DENIAL_OF_SERVICE
                } else {
                    if (in_array($actionID, $BlockParameters['p4_action_block_list_b1'])) {
                        $Log->debug('inside p4_action_block_list_b1, denying');
                        return false;
                    }
                    if (in_array($actionID, $BlockParameters['p5_action_block_list_b2'])) {
                        $Log->debug('inside p5_action_block_list_b2, denying');
                        return false;
                    }
                    $Log->debug('allowing');
                    return true;
                }
                break;
            case $OS->getStateIDFromName('STATE_DENIAL_OF_SERVICE'):
                $Log->debug('STATE_DENIAL_OF_SERVICE');
                //domain would be at this state until balance <= 0
                //and everything would be disabled
                return false;
                break;
            case $OS->getStateIDFromName('STATE_TEMPORARY_UNBLOCK'):
                //echo 'STATE_TEMPORARY_UNBLOCK',PHP_EOL;
                $Log->debug('STATE_TEMPORARY_UNBLOCK');
                $current_state_until_unixtime = Util::serverUnixtimeFromDateTime($DomainCurrentState->getDateStateUntil());
                $now_unixtime = (int)(Util::serverNow(array('AS_UNIXTIME'=>true)));
                if ($now_unixtime > $current_state_until_unixtime) {
                    echo 'Setting state to STATE_BLOCK_2...',PHP_EOL;
                    $set_state_id = $OS->getStateIDFromName('STATE_BLOCK_2');
                    //$block_until_unixtime = $now_unixtime + $BlockParameters['p3_time_sec_block2'];
                    //$block_until_datetime = Util::serverNow(['timestamp'=>$block_until_unixtime]);
                    //echo 'blocking until:', $block_until_unixtime,PHP_EOL;
                    //$this->setDomainState($set_state_id, $block_until_datetime); //new state
                    $this->setDomainState($set_state_id); //new state
                    $DomainCurrentState->reRead();
                    //return false;
                    //and continue at ... case ... STATE_BLOCK_2
                    if ($recursion_call) {//prevent infinity recursion. Should never have happened.
                        $Log->debug('prevent infinity recursion. Should never have happened. Denying!');
                        return false;
                    } else {
                        $Log->debug('switched state, recursion call...');
                        return $this->isActionAllowedForDomain($actionID, true);
                    }
                } else {
                    $Log->debug('allowing');
                    return true;
                }
                break;
            default:
                $Log->debug('Error! Unknown state!type:['.gettype($DomainCurrentState->getStateID()).'] value:'.$DomainCurrentState->getStateID());
                //echo 'Error! Unknown state',PHP_EOL;
        }
        $Log->debug('last line, denying');
        return false;
    }
    public function setDomainState(int $state, $date_state_until = self::DATE_BLOCK_FOREVER) {
        /** @var CurrentOrganizationState $COS */
        $COS = QCGA::API3()->objectFactory('CurrentOrganizationState');
        $COS->create(array(
            'organization_id' => $this->getCurrentOrganizationID(),
            'state_id' => $state,
            'date_state_until' => $date_state_until
        ));
    }
    public function getDomainCurrentState() : CurrentOrganizationState {
        /** @var CurrentOrganizationState $COS */
        $COS = QCGA::API3()->objectFactory('CurrentOrganizationState');
        //if (empty($COS)) {
        //    return NULL;
        //}

        //return $COS->getStateID();
        return $COS;
    }
    public function  getCurrentOrganizationID() : int {
        /** @var CurrentCustomer $CC */
        $CC = QCGA::API3()->objectFactory('CurrentCustomer');
        $ID = $CC->read();
        $ID = $ID['ID'];
        return $ID;
    }
    public function  getDomainBalanceFull() : string {
        /** @var CurrentCustomer $CC */
        $CC = QCGA::API3()->objectFactory('CurrentCustomer');
        $CC_Balance = $CC->read();
        $CC_Balance = $CC_Balance['bonus'] + $CC_Balance['paid'];
        return $CC_Balance;
    }
    /*
    public function getTranslatedActionList() : array {
        $localed_actions = array();
        $action_list = Action::list();
        foreach ($action_list as $action_id => $some_value) {
            $localed_actions[$action_id] = $some_value['slug'];
        }
        $items = Menu::getItems();
        foreach ($items as $submenu) {
            if (isset($submenu['items'])) {
                //var_dump($submenu['items']);die;
                //if (false === isset())
                foreach ($submenu['items'] as $actionID => $item) {
                    if (false === isset($item['title'])) {
                        echo 'title in item is unset',PHP_EOL;
                        var_dump($item);
                        die;
                    }
                    $localed_actions[$actionID] = $item['title'];
                }
            }
            else if (isset($submenu['title']) && isset($submenu['action'])){
                $actionID = $submenu['action'];
                $localed_actions[$actionID] = $submenu['title'];
            } else {
                echo 'title & action in submenu is unset',PHP_EOL;
                var_dump($submenu);
                die;
            }
        }
        ksort($localed_actions);//should be here, because Action::list() can return array with shifted keys
        return $localed_actions;
    }
    */

}"
Z9mYykMk,inspect.lua - Main Turtle Inspect ProgramV2,HeyItzGeo,Lua,Thursday 21st of March 2024 12:51:10 PM CDT,"local Item = peripheral.wrap(""top"")



local turtleID = tostring(os.getComputerID())



local chatBox = peripheral.find(""chatBox"")







--local monitorPeripheral = ""monitor_35""



-- Read monitor peripheral name from mon.txt file



local monitorFile = fs.open(""mon.txt"", ""r"")



if monitorFile then



    monitorPeripheral = monitorFile.readLine() or monitorPeripheral



    monitorFile.close()



else



    print(""Error: Unable to open mon.txt. Using default monitor peripheral name."")



end



























-- Redstone Integrator initialization



local Integrator = peripheral.find(""redstoneIntegrator"")







-- Function to toggle the lights



function toggleLights(color)



    if color == ""green"" then



        Integrator.setAnalogueOutput(""top"", 15)  -- Turn on green light



        sleep(0.3)  -- Wait for 0.5 seconds



        Integrator.setAnalogueOutput(""top"", 0)   -- Turn off green light



    elseif color == ""red"" then



        Integrator.setAnalogueOutput(""left"", 15)  -- Turn on red light



        sleep(0.3)  -- Wait for 0.5 seconds



        Integrator.setAnalogueOutput(""left"", 0)   -- Turn off red light



    end



end











-- Function to get item details



local function getItemDetails()



    local itemDetails = Item.getItemDetail(1)



    if itemDetails then



        return itemDetails.displayName, itemDetails.name



    end



    return nil, nil



end



-- Function to check if a file exists



local function fileExists(path)



    return fs.exists(path) and not fs.isDir(path)



end



-- Function to check if ""cost.txt"" is formatted correctly



local function checkCostFile()



    local costPath = ""cost.txt""



    if not fileExists(costPath) then



        print(""Error: Missing 'cost.txt'. Please create and format the file."")



        return false



    end



    local costFile = fs.open(costPath, ""r"")



    local countLine = costFile.readLine()



    local priceLine = costFile.readLine()



    costFile.close()



    if not countLine or not priceLine or not countLine:match(""Count = (%d+)"") or not priceLine:match(""Price = (%d+)"") then



        print(""Error: Incorrect format in 'cost.txt'. Please ensure it contains 'Count = <number>' and 'Price = <number>'."")



        return false



    end



    return true



end



-- Function to check if an item is in front



local function checkItemInFront()



    local DisplayName, ItemName = getItemDetails()



    if not DisplayName or not ItemName then



        print(""Error: No item detected in front. Please place an item in front of the turtle."")



        return false



    end



    return true



end



-- Main initialization



if not checkCostFile() or not checkItemInFront() then

	print(""rebooting in 3..."")

	os.sleep(3)

	os.reboot()



    -- Handle initialization errors and exit the program if necessary



    return



end



-- Function to load the balance data from ShopBal.txt



local function loadBalances()



    local path = ""disk/ShopBal.txt""



    local file = fs.open(path, ""r"")



    if file then



        local content = file.readAll()



        file.close()



        local success, balances = pcall(textutils.unserialize, content)



        if success and type(balances) == ""table"" then



            return balances



        else



            print(""Error: Unable to unserialize balance data from "" .. path)



            print(""Error Message: "" .. tostring(balances))



        end



    else



        print(""Error: Unable to open file "" .. path)



    end



    return {}



end



-- Function to save the updated balances to ShopBal.txt



local function saveBalances(balances)



    local path = ""disk/ShopBal.txt""



    local file = fs.open(path, ""w"")



    if file then



        file.write(textutils.serialize(balances))



        file.close()



    else



        print(""Error: Unable to open file "" .. path)



    end



end



-- Function to save player items to a file with counts



local function savePlayerItems(username, displayName, itemName, count)



    local folderPath = ""disk/Players/""



    local filePath = folderPath .. username



    local file



    -- Create the folder if it doesn't exist



    if not fs.isDir(folderPath) then



        fs.makeDir(folderPath)



    end



    -- Open the file in append mode



    if fs.exists(filePath) then



        file = fs.open(filePath, ""r"")



        local content = file.readAll()



        file.close()



        -- Parse existing content to update item counts



        local playerItems = {}



        for line in content:gmatch(""[^\r\n]+"") do



            local itemDisplayName, itemNameExisting, existingCount = line:match(""([^,]+),([^,]+),(%d+)"")



            if itemDisplayName and itemNameExisting and existingCount then



                existingCount = tonumber(existingCount)



                playerItems[itemDisplayName .. "","" .. itemNameExisting] = existingCount



            end



        end



        -- If the item doesn't exist in the file, add a new line



        if not playerItems[displayName .. "","" .. itemName] then



            playerItems[displayName .. "","" .. itemName] = 0



        end



        -- Update the count based on the specified count



        playerItems[displayName .. "","" .. itemName] = playerItems[displayName .. "","" .. itemName] + count



        file = fs.open(filePath, ""w"")



        for key, value in pairs(playerItems) do



            file.writeLine(key .. "","" .. value)



        end



        file.close()



    else



        -- Open the file in write mode with count for the first occurrence



        file = fs.open(filePath, ""w"")



        if file then



            file.writeLine(displayName .. "","" .. itemName .. "","" .. count)



            file.close()



        else



            print(""Error: Unable to open file "" .. filePath)



        end



    end



end



















-- Function to handle successful money transaction



local function Money_Success(username, cost, balances)



    print(""Transaction successful for "" .. username .. "". Cost: "" .. cost)



    balances[username] = balances[username] - cost



    saveBalances(balances)



    local DisplayName, ItemName = getItemDetails()



    -- Assuming 'cost.txt' contains individual count and price lines



    local costPath = ""cost.txt""



    local costFile = fs.open(costPath, ""r"")



    if costFile then



        local countLine = costFile.readLine()



        local priceLine = costFile.readLine()



        local count = tonumber(countLine:match(""Count = (%d+)""))



        local price = tonumber(priceLine:match(""Price = (%d+)""))



        if count and price then



            local cost = price  -- Cost per item, not total cost



            savePlayerItems(username, DisplayName, ItemName, count)  -- Pass the count as the fourth parameter







            -- Send toast notification to the player who clicked



            local title = {



                { text = ""SHOP"", color = ""dark_purple""}



            }







            local message = {



                { text = DisplayName .. "" x "" .. count .. "" bought successfully!"", color = ""white""}



            }







            local titleJson = textutils.serializeJSON(title)



            local messageJson = textutils.serializeJSON(message)







            chatBox.sendFormattedToastToPlayer(messageJson, titleJson, username,""&2&l+"", ""()"", ""&2&l"")



        else



            print(""Error: Unable to read count and price from "" .. costPath)



        end



        costFile.close()



    else



        print(""Error: Unable to open file "" .. costPath)



    end



    -- Toggle green light upon successful transaction



    toggleLights(""green"")



end























-- Function to handle failed money transaction



local function Money_Fail(username, cost, currentBalance)



    print(""Transaction failed for "" .. username .. "". Insufficient funds. Cost: "" .. cost)



    print(""Current Balance for "" .. username .. "": "" .. currentBalance)



    toggleLights(""red"")



    



    -- Sending toast notification to the player



    local title = {



        { text = ""SHOP"", color = ""dark_purple""}



    }



    



    local message = {



        { text = ""Insufficient Balance! Cannot complete transaction."", color = ""white""}



    }



    



    local titleJson = textutils.serializeJSON(title)



    local messageJson = textutils.serializeJSON(message)



    



    chatBox.sendFormattedToastToPlayer(messageJson, titleJson, username,""&c&l!"", ""()"", ""&c&l"")



end











-- Function to compare the balance and perform actions accordingly



local function checkBalance(username, cost)



    local balances = loadBalances()



    if balances[username] then



        local playerBalance = balances[username]



        if playerBalance >= cost then



            Money_Success(username, cost, balances)



        else



            Money_Fail(username, cost, playerBalance)



        end



    else



        Money_Fail(username, cost, 0)  -- Assuming initial balance is 0



    end



end



	



-- Function to update the global database



local function updateGlobalDatabase(DisplayName, Price, Count, TurtleID)



    local path = ""disk/GlobalDatabase.txt""



    local file



    -- Extract the item name without the ""minecraft:"" prefix



    local itemName = DisplayName --:gsub(""minecraft:"", """")



    if fs.exists(path) then



        file = fs.open(path, ""r"")



        local content = file.readAll()



        file.close()



        -- Parse existing content to find and update the line for the current TurtleID



        local lines = {}



        local foundTurtleID = false



        for line in content:gmatch(""[^\r\n]+"") do



            local itemNameExisting, priceExisting, countExisting, turtleIDExisting = line:match(""([^|]+)|([^|]+)|([^|]+)|([^|]+)"")



            if itemNameExisting and priceExisting and countExisting and turtleIDExisting then



                if tonumber(turtleIDExisting) == TurtleID then



                    foundTurtleID = true



                    line = itemName .. ""|"" .. Price .. ""|"" .. Count .. ""|"" .. TurtleID



                end



                table.insert(lines, line)



            end



        end



        -- If the TurtleID was not found, append a new line



        if not foundTurtleID then



            table.insert(lines, itemName .. ""|"" .. Price .. ""|"" .. Count .. ""|"" .. TurtleID)



        end



        file = fs.open(path, ""w"")



        for _, line in ipairs(lines) do



            file.writeLine(line)



        end



        file.close()



    else



        -- Create the file and add a new line for the current TurtleID



        file = fs.open(path, ""w"")



        if file then



            file.writeLine(itemName .. ""|"" .. Price .. ""|"" .. Count .. ""|"" .. TurtleID)



            file.close()



        else



            print(""Error: Unable to open file "" .. path)



        end



    end



end



-- Function to update cost.txt with values associated with TurtleID



local function updateCostFile(TurtleID)



    local turtleCostsPath = ""cost.txt""



    local globalDatabasePath = ""disk/GlobalDatabase.txt""



    local file



    local foundTurtleID = false



    local count, price



    -- Check if TurtleID is in globaldatabase.txt



    if fs.exists(globalDatabasePath) then



        file = fs.open(globalDatabasePath, ""r"")



        local content = file.readAll()



        file.close()



        -- Check if TurtleID entry exists in globaldatabase.txt



        if content:match(TurtleID) then



            -- Extract values for the TurtleID from globaldatabase.txt



            local itemName, priceExisting, countExisting = content:match(""([^|]+)|([^|]+)|([^|]+)|"" .. TurtleID)



            if itemName and priceExisting and countExisting then



                foundTurtleID = true



                price = tonumber(priceExisting)



                count = tonumber(countExisting)



            end



        end



    else



        print(""Error: Unable to open file "" .. globalDatabasePath)



        return



    end



    -- Set values in cost.txt based on globaldatabase.txt



    if foundTurtleID then



        file = fs.open(turtleCostsPath, ""w"")



        file.writeLine(""Count = "" .. count)



        file.writeLine(""Price = "" .. price)



        file.close()



       --#IGNORE print(""Updated cost.txt with values from GlobalDatabase.txt for TurtleID "" .. TurtleID)



    else



        -- Add a new entry for the TurtleID with values from cost.txt to globaldatabase.txt



        if fs.exists(turtleCostsPath) then



            file = fs.open(turtleCostsPath, ""r"")



            local countLine = file.readLine()



            local priceLine = file.readLine()



            file.close()



            local itemName = DisplayName  -- Use the actual item display name



			if itemName then



				print(""Item Name Found"")



			else



				print(""Error: itemName is nil. Unable to update globalDatabase.txt."")



				-- Add any additional handling or error reporting as needed



			end



            file = fs.open(globalDatabasePath, ""a"")



			local formattedItemName = getItemDetails() or ItemName--:gsub(""minecraft:"", """")



			file.writeLine(formattedItemName .. ""|"" .. priceLine:gsub(""Price = "", """") .. ""|"" .. countLine:gsub(""Count = "", """") .. ""|"" .. TurtleID)



            --file.writeLine(itemName .. ""|"" .. priceLine:gsub(""Price = "", """") .. ""|"" .. countLine:gsub(""Count = "", """") .. ""|"" .. TurtleID)



            file.close()



            print(""Added new entry for TurtleID "" .. TurtleID .. "" in GlobalDatabase.txt with values from cost.txt"")



        else



            print(""Error: Unable to open file "" .. turtleCostsPath)



        end



    end



end







---IGNORE



















local TurtleDataModule = {}







-- Function to center text vertically and horizontally



function TurtleDataModule.printCentered(monitor, text, yPos, color)



    local width, _ = monitor.getSize()



    local xPos = math.floor((width - #text) / 2) + 1 -- Center horizontally







    monitor.setCursorPos(xPos, yPos)



    monitor.setTextColor(color)



    monitor.write(text)



end







-- Function to read the database file and find the corresponding turtle data



function TurtleDataModule.findTurtleData(turtleID)



    local file = fs.open(""disk/GlobalDatabase.txt"", ""r"")



    if not file then



        return nil -- File not found



    end







    local turtleData = nil



    local line = file.readLine()



    while line do



        local displayName, price, count, id = line:match(""([^|]+)|([^|]+)|([^|]+)|([^|]+)"")



        if id == turtleID then



            turtleData = {displayName = displayName, price = tonumber(price), count = tonumber(count)}



            break



        end







        line = file.readLine()



    end







    file.close()



    return turtleData



end







-- Function to display turtle data



function TurtleDataModule.displayTurtleData(monitorPeripheral, turtleID)



    local monitor = peripheral.wrap(monitorPeripheral)



    monitor.clear()







    local turtleData = TurtleDataModule.findTurtleData(turtleID)







    if turtleData then



        local displayName = turtleData.displayName



        print(""Display Name:"", displayName) -- Print the display name for debugging







        local firstWord, secondWord



        -- Extracting first and second words from the display name



        local itemName = displayName:match("":[^:]+$"") -- Extracts the part after the last colon



        if itemName then



            itemName = itemName:gsub(""^:"", """") -- Remove leading colon



            local words = {}



            for word in itemName:gmatch(""[^_]+"") do -- Split the itemName by underscores



                table.insert(words, word)



            end



            firstWord = words[1] or ""N/A"" -- First word



            secondWord = words[2] or """" -- Second word



            -- Capitalize the first letter of each word



            firstWord = firstWord:gsub(""(%a)([%w_']*)"", function(first, rest) return first:upper() .. rest:lower() end)



            secondWord = secondWord:gsub(""(%a)([%w_']*)"", function(first, rest) return first:upper() .. rest:lower() end)



        else



            firstWord, secondWord = ""N/A"", ""N/A""



        end







        local lines = {



            {""========:"", colors.yellow},



            {firstWord or ""N/A"", colors.orange}, -- Display the first word



            {secondWord or ""N/A"", colors.orange}, -- Display the second word



            {""========:"", colors.yellow},



            {"""", colors.black},



            {"" Price:"", colors.white},



            {tostring(turtleData.price or ""N/A""), colors.orange},



            {"" Count:"", colors.white},



            {tostring(turtleData.count or ""N/A""), colors.orange},



            {"""", colors.black},



            {""<<===="", colors.blue},



            {"""", colors.black},



        }







        local yPos = 1 -- Initial vertical position



        for _, line in ipairs(lines) do



            TurtleDataModule.printCentered(monitor, line[1], yPos, line[2]) -- Print each line centered vertically



            yPos = yPos + 1 -- Move to the next line



        end



    else



        TurtleDataModule.printCentered(monitor, ""Turtle data not found!"", 1, colors.red)



    end



end



































---IGNORE























-- Main loop to constantly check for player clicks



local prevItemName = nil  -- Variable to store the previous item name



while true do



	-- Check for inactivity and restart if needed



    event, username, device = os.pullEvent(""playerClick"")



	



    -- Get item details when a player clicks



    local DisplayName, ItemName = getItemDetails()



	TurtleDataModule.displayTurtleData(monitorPeripheral, turtleID)



    -- Check if item details are available



    if DisplayName and ItemName then



		print(""DisplayName: "" .. DisplayName)



		print(""ItemName: "" .. ItemName)



        local TurtleID = os.getComputerID()



        -- Update cost.txt with values associated with the TurtleID



        updateCostFile(TurtleID)



        -- Check if the item in front has changed



        if prevItemName ~= ItemName then



            prevItemName = ItemName



            -- Assuming 'cost.txt' contains individual count and price lines



            local costPath = ""cost.txt""



            local costFile = fs.open(costPath, ""r"")



            if costFile then



                local countLine = costFile.readLine()



                local priceLine = costFile.readLine()



                if countLine and priceLine then



                    local count = tonumber(countLine:match(""Count = (%d+)""))



                    local price = tonumber(priceLine:match(""Price = (%d+)""))



                    if count and price then



                        local cost = price  -- Cost per item, not total cost



                        checkBalance(username, cost)



                        -- Remove ""minecraft:"" from ItemName



                        local formattedItemName = ItemName--:gsub(""minecraft:"", """")



                        -- Update the item name in globalDatabase.txt



                        local globalDatabasePath = ""disk/GlobalDatabase.txt""



                        local globalFile = fs.open(globalDatabasePath, ""r"")



                        local globalContent = globalFile.readAll()



                        globalFile.close()



                        local lines = {}



                        for line in globalContent:gmatch(""[^\r\n]+"") do



                            local itemNameExisting, priceExisting, countExisting, turtleIDExisting = line:match(""([^|]+)|([^|]+)|([^|]+)|([^|]+)"")



                            if itemNameExisting and priceExisting and countExisting and turtleIDExisting then



                                if tonumber(turtleIDExisting) == TurtleID then



                                    -- Update the item name



                                    line = formattedItemName .. ""|"" .. priceExisting .. ""|"" .. countExisting .. ""|"" .. turtleIDExisting



                                end



                            end



                            table.insert(lines, line)



                        end



                        globalFile = fs.open(globalDatabasePath, ""w"")



                        for _, line in ipairs(lines) do



                            globalFile.writeLine(line)



                        end



                        globalFile.close()



                        -- Add any additional code specific to your application



                    else



                        print(""Error: Unable to read count and price from "" .. costPath)



                    end



                else



                    print(""Error: Missing lines in "" .. costPath)



                end



                costFile.close()



                -- Reset prevItemName to nil after a successful transaction



                prevItemName = nil



            else



                print(""Error: Unable to open file "" .. costPath)



            end



        else



            print(""Item in front has not changed. Skipping update."")



        end



    end



end



"
ATYkx0ha,hk1whs,lai1tony,JSON,Thursday 21st of March 2024 12:40:13 PM CDT,"{
""storeHouse"":
[

{""sourceName"":""?HK1_BOX"",""sourceUrl"":""https://pastebin.com/raw/yUtzPCLV""}

]
}"
yUtzPCLV,hk1whs_url,lai1tony,JSON,Thursday 21st of March 2024 12:36:20 PM CDT,"{
    ""urls"": [
       

   		{
      		""url"": ""http://fygg.xyz/hk1box"",
      		""name"": ""🚀HK1_影盒版""
   		},
    
        {
			""url"": ""https://ghproxy.net/https://raw.githubusercontent.com/yueer521/Tvbox/main/yueer.json"",
			""name"": ""🚀月儿飘飘""
		},

		{
			""url"": ""https://gh.con.sh/https://raw.githubusercontent.com/xmbjm/xmbjmjk/main/xmbjm.json"",
			""name"": ""🚀拾光线路""
		},
		{
			""url"": ""https://raw.gitcode.com/Xymz/ymz/blobs/daf2a0b4b029cb681d788e30924c0a417e2d1e9a/夜猫子"",
			""name"": ""🚀新夜猫子""
		},
		{
			""url"": ""http://52pan.top:81/api/v3/file/get/174963/%E6%96%B0%E5%90%BE%E7%88%B1%E7%94%B5%E8%A7%86.m3u?sign=YNZLF47Iiy-W2feoThhKUmd4FcuNFHwEaR4JM7YaLf8%3D%3A0"",
			""name"": ""🚀吾爱线路""
		},
		{
			""url"": ""http://饭太硬.top/tv"",
			""name"": ""🚀饭有点硬""
		},
	
		{
			""url"": ""https://pastebin.com/raw/5NHaxyGR"",
			""name"": ""🚀道长在线""
		},
		{
			""url"": ""http://home.jundie.top:81/top98.json"",
			""name"": ""🚀俊佬线路""
		}
        
         ]
}"
6FMErNPr,DSEFVSGNG,gadungw71,PHP,Thursday 21st of March 2024 12:23:00 PM CDT,"•	https://github.com/2-2024-Godzilla-vs-Kong-2-TW-HK
•	https://github.com/2-Godzilla-x-Kong-The-New-Empire-2024TW
•	https://github.com/2024-HD-1080i
•	https://github.com/2-Godzilla-vs-Kong-2-4k
•	https://github.com/Exhuma-Korean-HD-2024
•	https://github.com/Exhuma-2024-HD-KO
•	https://duquky9595.expandcart.com/index.php?route=product/product&product_id=373
•	https://akujrb9602.expandcart.com/index.php?route=product/product&product_id=373
•	https://kyjvvf0744.expandcart.com/index.php?route=product/product&product_id=373
•	https://rekkdx7087.expandcart.com/index.php?route=product/product&product_id=373
•	https://groups.google.com/u/1/g/godzilla-x-kong2-2024-hd1080--/c/omdyy52-g4Y
•	https://groups.google.com/g/godzilla-vs-kong2-2024-hd/c/k8V3Z8YlD7A
•	https://lookerstudio.google.com/reporting/7e4ac75d-fc72-4085-867d-664e7a413eb5
•	https://lookerstudio.google.com/reporting/b5e2ee1a-0adf-4106-bc1e-6e61f7399afc
•	https://vk.com/@movp95boxoffice-2-20241080p
•	https://vk.com/@blurayhd1080p-2hd1080p4k
•	https://vk.com/@698924868-2-godzilla-vs-kong-2-20241080p
•	https://vk.com/@698926887-22024godzilla-vs-kong-2-1080ptwzh-hd
•	https://www.artstation.com/zexixuqutab64/profile
•	https://www.artstation.com/luvumuxujun81/profile
•	https://mgxdod5179.expandcart.com/index.php?route=product/product&product_id=373
•	https://rekkdx7087.expandcart.com/index.php?route=product/product&product_id=374
•	https://vk.com/@687058904-exhumako-2024
•	https://vk.com/@simonamarkova-exhuma-2024-hd-korea-1080p
•	https://wandering.flarum.cloud/d/50629-waringhas
•	https://click4r.com/posts/g/15520627/koplokeun
•	https://hiuderyy.hashnode.dev/ssuuuttt
•	https://www.onfeetnation.com/profiles/blogs/exhuma-2024-hd-720
•	https://medium.com/@terasudiro549/%E5%93%A5%E6%96%AF%E6%8B%89%E5%A4%A7%E6%88%98%E9%87%91%E5%88%9A2-%E5%AE%8C%E6%95%B4%E7%89%88%E9%AB%98%E6%B8%85%E7%94%B5%E5%BD%B1-1080p-%E5%AE%8C%E6%95%B4%E7%9A%84%E7%94%B5%E5%BD%B1-095eb4aad4fc
•	https://open.firstory.me/user/clu1h6wch10pn01w166hqetio
•	https://open.firstory.me/story/clu1h8snn0uqs01vn8vt7gi8x
•	https://telegra.ph/SERINGKUJUMPA-03-21
•	https://paste.ee/p/UUCv1
•	https://start.me/w/nBmbyq
•	https://hackmd.io/@rerewilli6/BkF8dJ90a
•	https://rentry.co/a5yufi9b
•	https://muckrack.com/rosea-lunamawa/bio
•	https://www.bitsdujour.com/profiles/UUhNxe
•	http://aldenfamilydentistry.com/UserProfile/tabid/57/userId/715122/Default.aspx
•	https://profile.hatena.ne.jp/faguronunuf/
•	https://www.fitlynk.com/0fe5848e9
•	https://www.artstation.com/terasudiro5497/profile
•	https://www.artstation.com/artwork/yDLNvR
"
UFczj7Ye,🤑 G2A.com Free Gift Card Guide Mar 2024 FIX 🤑,ounnuo,GetText,Thursday 21st of March 2024 12:22:55 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_830678.pdf

Working as of:
21 March 2024


















"
0mB7fkWE,Untitled,Aectan,JSON,Thursday 21st of March 2024 12:19:09 PM CDT,"{
  ""predictions"": {
    ""MLP"": {
      ""2024-03-20"": {
        ""hi-90"": ""value"",
        ""hi-80"": ""value"",
        ""median"": ""value"",
        ""lo-80"": ""value"",
        ""lo-90"": ""value""
      },
      ""2024-03-21"": {
        ""hi-90"": ""value"",
        ""hi-80"": ""value"",
        ""median"": ""value"",
        ""lo-80"": ""value"",
        ""lo-90"": ""value""
      },
      ""2024-03-22"": {
        ""hi-90"": ""value"",
        ""hi-80"": ""value"",
        ""median"": ""value"",
        ""lo-80"": ""value"",
        ""lo-90"": ""value""
      },
      ""2024-03-23"": {
        ""hi-90"": ""value"",
        ""hi-80"": ""value"",
        ""median"": ""value"",
        ""lo-80"": ""value"",
        ""lo-90"": ""value""
      },
      ""2024-03-24"": {
        ""hi-90"": ""value"",
        ""hi-80"": ""value"",
        ""median"": ""value"",
        ""lo-80"": ""value"",
        ""lo-90"": ""value""
      }
    },
    ""LSTM"": {
      ""2024-03-20"": {
        ""hi-90"": ""value"",
        ""hi-80"": ""value"",
        ""median"": ""value"",
        ""lo-80"": ""value"",
        ""lo-90"": ""value""
      },
      ""2024-03-21"": {
        ""hi-90"": ""value"",
        ""hi-80"": ""value"",
        ""median"": ""value"",
        ""lo-80"": ""value"",
        ""lo-90"": ""value""
      },
      ""2024-03-22"": {
        ""hi-90"": ""value"",
        ""hi-80"": ""value"",
        ""median"": ""value"",
        ""lo-80"": ""value"",
        ""lo-90"": ""value""
      },
      ""2024-03-23"": {
        ""hi-90"": ""value"",
        ""hi-80"": ""value"",
        ""median"": ""value"",
        ""lo-80"": ""value"",
        ""lo-90"": ""value""
      },
      ""2024-03-24"": {
        ""hi-90"": ""value"",
        ""hi-80"": ""value"",
        ""median"": ""value"",
        ""lo-80"": ""value"",
        ""lo-90"": ""value""
      }
    }
  }
}"
kZ7LWbKL,Playstation Games on Rertroarch,metalx1000,Bash,Thursday 21st of March 2024 12:04:57 PM CDT,"mkdir -p $HOME/.config/retroarch/system
cd $HOME/.config/retroarch/system

# get bios
wget -c 'https://archive.org/download/rr-sony-playstation-u/bios/dtlh3000.7z'
wget -c 'https://archive.org/download/rr-sony-playstation-u/bios/dtlh3002.7z'
wget -c 'https://archive.org/download/rr-sony-playstation-u/bios/scph1001.7z'
wget -c 'https://archive.org/download/rr-sony-playstation-u/bios/scph101.7z'
wget -c 'https://archive.org/download/rr-sony-playstation-u/bios/scph5000.7z'
wget -c 'https://archive.org/download/rr-sony-playstation-u/bios/scph5500.7z'
wget -c 'https://archive.org/download/rr-sony-playstation-u/bios/scph5501.7z'
wget -c 'https://archive.org/download/rr-sony-playstation-u/bios/scph5502.7z'
wget -c 'https://archive.org/download/rr-sony-playstation-u/bios/scph7000.7z'
wget -c 'https://archive.org/download/rr-sony-playstation-u/bios/scph7001.7z'
wget -c 'https://archive.org/download/rr-sony-playstation-u/bios/scph7003.7z'
wget -c 'https://archive.org/download/rr-sony-playstation-u/bios/scph7502.7z'

# extract 
for i in *.7z;do 7z e $i && rm $i;done

"
qBnAH3fK,Blurimg,raggerrag,Python,Thursday 21st of March 2024 11:46:20 AM CDT,"def split_document_into_tasks():
###

def all_docs_to_png():
###

# Функция для получения координат прямоугольной области из изображения
def get_roi(image):
    height, width = image.shape[:2]
    aspect_ratio = width / height

    window_width = 880
    window_height = int(window_width / aspect_ratio)
    cv2.namedWindow('Select ROI', cv2.WINDOW_NORMAL)
    cv2.resizeWindow('Select ROI', window_width, window_height)

    roi = cv2.selectROI('Select ROI', image)
    cv2.destroyWindow('Select ROI')

    return roi

# Функция для размытия выбранной области с помощью GaussianBlur
def blur_roi(image, roi):
    x, y, w, h = roi
    if w > 0 and h > 0:
        roi_region = image[y:y + h, x:x + w]
        blurred = cv2.GaussianBlur(roi_region, (51, 51), 0)
        image[y:y + h, x:x + w] = blurred
    return image

# Обработка всех PNG файлов в текущей директории
for filename in os.listdir('3. doc_to_png_output'):
    if filename.endswith('.png'):
        # Открытие изображения
        image = cv2.imread(os.path.join('3. doc_to_png_output', filename))

        # Отображение изображения и выбор области для размытия
        clone = image.copy()
        roi = get_roi(clone)

        # Применение размытия к выбранной области
        blurred = blur_roi(image, roi)

        # Сохранение обработанного изображения
        output_filename = os.path.splitext(filename)[0] + '.png'
        cv2.imwrite(os.path.join('4. blurred_images_output', output_filename), blurred)

        # Закрытие окна с изображением
        cv2.destroyAllWindows()"
B0UFKFvc,"""Ранжирование по релевантности""",m3m3mm,C++,Thursday 21st of March 2024 11:32:57 AM CDT,"#include <iostream>
#include <set>
#include <string>
#include <utility>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX_RESULT_DOCUMENT_COUNT = 5;

string ReadLine() {
    string s;
    getline(cin, s);
    return s;
}

int ReadLineWithNumber() {
    int result = 0;
    cin >> result;
    ReadLine();
    return result;
}

vector<string> SplitIntoWords(const string& text) {
    vector<string> words;
    string word;
    for (const char c : text) {
        if (c == ' ') {
            if (!word.empty()) {
                words.push_back(word);
                word.clear();
            }
        } else {
            word += c;
        }
    }
    if (!word.empty()) {
        words.push_back(word);
    }

    return words;
}

set<string> ParseStopWords(const string& text) {
    set<string> stop_words;
    for (const string& word : SplitIntoWords(text)) {
        stop_words.insert(word);
    }
    return stop_words;
}

vector<string> SplitIntoWordsNoStop(const string& text, const set<string>& stop_words) {
    vector<string> words;
    for (const string& word : SplitIntoWords(text)) {
        if (stop_words.count(word) == 0) {
            words.push_back(word);
        }
    }
    return words;
}

void AddDocument(vector<pair<int, vector<string>>>& documents, const set<string>& stop_words,
                 int document_id, const string& document) {
    const vector<string> words = SplitIntoWordsNoStop(document, stop_words);
    documents.push_back(pair<int, vector<string>>{document_id, words});
}

set<string> ParseQuery(const string& text, const set<string>& stop_words) {
    set<string> query_words;
    for (const string& word : SplitIntoWordsNoStop(text, stop_words)) {
        query_words.insert(word);
    }
    return query_words;
}

int MatchDocument(const pair<int, vector<string>>& content, const set<string>& query_words) {
    if (query_words.empty()) {
        return 0;
    }
    set<string> matched_words;
    for (const string& word : content.second) {
        if (matched_words.count(word) != 0) {
            continue;
        }
        if (query_words.count(word) != 0) {
            matched_words.insert(word);
        }
    }

    // Преобразовываем беззнаковое число типа size_t в int используя
    // static_cast<int>
    return static_cast<int>(matched_words.size());
}

// Для каждого документа возвращает его id и релевантность
vector<pair<int, int>> FindDocuments(const vector<pair<int, vector<string>>>& documents,
                                     const set<string>& stop_words, const string& query) {
    const set<string> query_words = ParseQuery(query, stop_words);
    vector<pair<int, int>> matched_documents;
    for (const auto& document : documents) {
        const int relevance = MatchDocument(document, query_words);
        if (relevance > 0) {
            matched_documents.push_back({document.first, relevance});
        }
    }
    return matched_documents;
}


// Для каждого документа возвращает его релевантность и id
vector<pair<int, int>> FindAllDocuments(const vector<pair<int, vector<string>>>& documents,
                                         const set<string>& query_words) {
    vector<pair<int, int>> matched_documents;
    for (const auto& document : documents) {
        const int relevance = MatchDocument(document, query_words);
        if (relevance > 0) {
            matched_documents.push_back({relevance, document.first});
        }
    }
    sort(matched_documents.rbegin(), matched_documents.rend());
    return matched_documents;
}



// Возвращает топ-5 самых релевантных документов в виде пар: {id, релевантность}
// Возвращает самые релевантные документы в виде вектора пар {id, релевантность}
vector<pair<int, int>> FindTopDocuments(
    const vector<pair<int, vector<string>>>& documents,
    const set<string>& stop_words, 
    const string& raw_query) 
{
    const set<string> query_words = ParseQuery(raw_query, stop_words);
    const vector<pair<int, int>> all_documents = FindAllDocuments(documents, query_words);
    const int num_top_documents = min<int>(MAX_RESULT_DOCUMENT_COUNT, all_documents.size());
    vector<pair<int, int>> top_documents(num_top_documents);
    for (int i = 0; i < num_top_documents; ++i) {
        top_documents[i] = all_documents[i];
    }
    return top_documents;
}


int main() {
    const string stop_words_joined = ReadLine();
    const set<string> stop_words = ParseStopWords(stop_words_joined);

    // Чтение документов
    vector<pair<int, vector<string>>> documents;
    const int document_count = ReadLineWithNumber();
    for (int document_id = 0; document_id < document_count; ++document_id) {
        AddDocument(documents, stop_words, document_id, ReadLine());
    }

    const string query = ReadLine();
    // Вместо FindDocuments используйте FindTopDocuments
    for (auto [document_id, relevance] : FindTopDocuments(documents, stop_words, query)) {
        cout << ""{ document_id = ""s << document_id << "", relevance = ""s << relevance << "" }""s
             << endl;
    }
}"
ieK32CGk,Untitled,Josif_tepe,C++,Thursday 21st of March 2024 11:24:50 AM CDT,"#include <iostream>
     
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    int n;
    cin >> n;
    int niza[n];
     
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    int max_cnt =0 ;
    int broj = 0;
    for(int i = 0; i < n; i++) {
        int cnt =0 ;
        for(int a = 1; a <= niza[i]; a++) {
            for(int k = 0; k <= niza[i]; k++) {
                int d = (k + 1) * a + ((k * (k + 1)) / 2);
                
                if(d == niza[i]) {
                    cnt++;
                }
            }
        }
        if(max_cnt < cnt) {
            max_cnt = cnt;
            broj = niza[i];
        }
        else if(max_cnt == cnt) {
            if(broj > niza[i]) {
                broj = niza[i];
            }
        }
    }
    cout << broj << "" "" << max_cnt << endl;
    return 0;
}
"
5SqscQ0X,hot tub amps and watts yaml,tiwing,YAML,Thursday 21st of March 2024 11:24:21 AM CDT," - sensor:
    - name: ""Hot Tub Watts""
      unique_id: hot_tub_watts
      unit_of_measurement: ""W""
      state: >
          {% set AmpA = states('sensor.hot_tub_current_a')|float(0) %}
          {% set AmpB = states('sensor.hot_tub_current_b')|float(0) %}
          {% set W = (AmpA + AmpB) * 120 %}
          {{W|round(2)}}

  - sensor:
    - name: ""Hot Tub Amps""
      unique_id: hot_tub_amps
      unit_of_measurement: ""A""
      state: >
          {% set AmpA = states('sensor.hot_tub_current_a')|float(0) %}
          {% set AmpB = states('sensor.hot_tub_current_b')|float(0) %}
          {{ max(AmpA,AmpB) }}"
EwatHkmP,大质数判断,Dmaxiya,C++,Thursday 21st of March 2024 11:21:00 AM CDT,"#include <bits/stdc++.h>
using namespace std;

typedef __int128 LL;

class Prime {
private:
	static LL multLL(LL a, LL b, LL mod) {
	    return a * b % mod;
	}

	static LL fastPowLL(LL res, LL n, LL mod) {
		LL ans = 1;
        while (n != 0) {
            if ((n & 1) == 1) {
				ans = multLL(ans, res, mod);
            }
			res = multLL(res, res, mod);
			n /= 2;
        }
		return ans % mod;
	}

public:
    static bool isPrimeLL(LL n) {
        if (n % 2 == 0) {
            return false;
        }
        LL d = n - 1;
        while (d % 2 == 0) {
            d /= 2;
        }
        static LL base[] = {2, 325, 9375, 28178, 450775, 9780504, 1795265022};
        for (int i = 0; i < 7; ++i) {
            if (n == base[i]) {
                return true;
            }
            LL t = d;
            LL y = fastPowLL(base[i], t, n);
            while (t != n - 1 && y != 1 && y != n - 1) {
                y = multLL(y, y, n);
                t <<= 1;
            }
            if (y != n - 1 && t % 2 == 0) {
                return false;
            }
        }
        return true;
    }
};


int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc
    ios::sync_with_stdio(false);

    LL e18 = 1000000000000000000;
    e18 *= 53;
    e18 += 225659260379296181;
    cout << Prime::isPrimeLL(e18) << endl;

    return 0;
}
"
seUyf4ww,Untitled,Farz0l1x,Python,Thursday 21st of March 2024 11:03:27 AM CDT,"s = 'AAAAAAAACCAACCgujhfgjhAAFF'
f = [1] * len(s)
for i in range(1, len(s)):
    if s[i-1:i+1] == ""AA"" or s[i-1:i+1] == ""CC"":
        f[i] = f[i-1] + 1
    else:
        f[i] = 1
print(max(f))"
vDYi2gxe,Untitled,Farz0l1x,Python,Thursday 21st of March 2024 10:57:13 AM CDT,"s = 'ZXZXZXXZXZXZXZXXZXZAAAAAAAAAAAAA'
f = [0] * len(s)
for i in range(2, len(s)):
    if s[i-1] + s[i] == 'ZX' or s[i-1] + s[i] == 'ZY':
        f[i] = f[i-2] + 1
    else:
        f[i] = 0
print(max(f))"
ZLxQsiA0,Untitled,Farz0l1x,Python,Thursday 21st of March 2024 10:49:52 AM CDT,"s = 'PPPjgPPPPPPfogjjgkf'
f = [1] * len(s)
for i in range(2, len(s)):
    if s[i-2:i+1] != 'PPP':
        f[i-1] = f[i-2] + 1
        f[i] = f[i-1] + 1
    else:
        f[i] = 1
print(max(f))"
5Bv6zSkn,Untitled,Farz0l1x,Python,Thursday 21st of March 2024 10:44:24 AM CDT,"s = 'STjdfhdSTjhf'
if s[0:2] == 'ST':
    s = s[1:]
f = [1] * len(s)
for i in range(1, len(s)):
    if s[i-1:i+1] != 'ST':
        f[i] = f[i-1] + 1
    else: 
        f[i] = 1
print(max(f))"
fGVLcFhB,Untitled,Farz0l1x,Python,Thursday 21st of March 2024 10:39:13 AM CDT,"s = 'ABCDGZHFDJPZGFEDCBA'
f = [1] * len(s)
for i in range(1, len(s)):
    if s[i] <= s[i-1]:
        f[i] = f[i-1] + 1
    else:
        f[i] = 1
print(max(f))"
deBcMH9H,Untitled,Farz0l1x,Python,Thursday 21st of March 2024 10:38:47 AM CDT,"s = 'ABCDGZHFDJPZGFEDCBA'
f = [1] * len(s)
for i in range(1, len(s)):
    if s[i] < s[i-1]:
        f[i] = f[i-1] + 1
    else:
        f[i] = 1
print(max(f))"
dWvLjJpt,Untitled,Farz0l1x,Python,Thursday 21st of March 2024 10:34:36 AM CDT,"s = '11234491234567890'
f = [1] * len(s)
for i in range(1, len(s)):
    if int(s[i]) > int(s[i-1]):
        f[i] = f[i-1] + 1
    else:
        f[i] = 1
print(max(f))
"
zNSzzQ7G,Untitled,Farz0l1x,Python,Thursday 21st of March 2024 10:31:03 AM CDT,"s = 'AAAAAAAAAAAAAAAAFHFHFHFHFHF' + 'B' * 16 + 'A' * 16
f = [1] * len(s)
Pov = []
for i in range(1, len(s)):
    if s[i] == s[i-1]:
        f[i] = f[i-1] + 1
    else:
        f[i] = 1
    if f[i] == 16:
        Pov.append(s[i])
print(Pov[0])
print(max(f))"
33Cn5adm,SKU WooCommerce Permalinks,mbis,PHP,Thursday 21st of March 2024 10:30:10 AM CDT,"<?php

/**
 * Change permalink for WooCommerce product based on SKU and product name.
 *
 * @param string $url The generated permalink URL.
 * @param WP_Post $post The post object.
 * @return string The modified permalink URL.
 */
function pm_sku_permalinks( $url, $post ) {
	if ( $post->post_type !== 'product' || $post->post_status !== 'publish' ) {
		return $url;
	}

	$product_sku  = get_post_meta( $post->ID, SKU_FIELD, true );
	$product_name = $post->post_name;

	if ( empty( $product_sku ) || empty( $product_name ) ) {
		return $url;
	}

	$url = sprintf( ""%s/%s/%s"", get_home_url(), sanitize_title( $product_sku ), sanitize_title( $product_name ) );

	return user_trailingslashit( $url );
}
add_filter( 'post_type_link', 'pm_sku_permalinks', 999, 2 );

/**
 * Detect WooCommerce product based on SKU and product name in the permalink.
 *
 * @param array $query The current query variables.
 *
 * @return array The modified query variables.
 */
function pm_detect_sku_product_permalinks( $query ) {
	global $wpdb, $wp;

	// Do not run when Elementor is active
	if ( defined( 'ELEMENTOR_PATH' ) || isset( $_REQUEST['elementor-preview'] ) ) {
		return $query;
	}

	$request_path = trim( $wp->request, '/' );

	// Check if the request path matches the expected pattern
	if ( preg_match( '/^([^\/]+)\/([^\/]+)$/', $request_path, $matches ) ) {
		$sku_number   = $matches[1];
		$product_name = $matches[2];

		// Check if the SKU is assigned to any product
		$sql_query = $wpdb->prepare( ""SELECT p.ID FROM {$wpdb->posts} AS p
            INNER JOIN {$wpdb->postmeta} AS pm ON p.ID = pm.post_id AND pm.meta_key = %s
            WHERE p.post_type = 'product' AND p.post_status = 'publish' AND pm.meta_value = %s"", SKU_FIELD, $sku_number );

		$product_id = $wpdb->get_var( $sql_query );

		// If product found, set query variables accordingly
		if ( $product_id && get_post_field( 'post_name', $product_id ) === $product_name ) {
			$query['post_type']       = 'product';
			$query['name']            = $product_name;
			$query['do_not_redirect'] = 1;

			// Disable canonical redirect
			remove_action( 'template_redirect', 'wp_old_slug_redirect' );
			remove_action( 'template_redirect', 'redirect_canonical' );
		}
	}

	return $query;
}
add_filter( 'request', 'pm_detect_sku_product_permalinks', 9999 );
"
6XF90BKp,Untitled,Farz0l1x,Python,Thursday 21st of March 2024 10:22:23 AM CDT,"s = 'AAAAAAAAAAAAAAABSDFGHJKKLLLLLLL'
f = [1] * len(s)
for i in range(1, len(s)):
    if s[i] != s[i-1]:
        f[i] = f[i-1] + 1
    else:
        f[i] = 1
print(max(f))"
h3XqWQW3,Untitled,Farz0l1x,Python,Thursday 21st of March 2024 10:18:17 AM CDT,"s = 'ACDFACDFACDFACDFEEEEAAAAAAAAA'
f = [0] * len(s)
if s[0] in 'ACDF':
    f[0] = 1
else: 
    f[0] = 0
for i in range(1, len(s)):
    if s[i] in 'ACDF':
        f[i] = f[i-1] + 1
    else:
        f[i] = 0
print(max(f))"
6LE9qCzy,Untitled,Farz0l1x,Python,Thursday 21st of March 2024 10:09:01 AM CDT,"from turtle import *
tracer(0)
r = 25
rt(30)
for i in range(25):
    fd(15 * r)
    rt(120)
up()
for x in range(-20, 20):
    for y in range(-20, 20):
        goto(x * r, y * r)
        dot(3, 'blue')
goto(0, 0)
update()
exitonclick()"
hHxWgePb,Lab 3 smp,varli_ketanpl,6502 ACME Cross Assembler,Thursday 21st of March 2024 10:08:06 AM CDT,"
; You may customize this and other start-up templates; 
; The location of this template is c:\emu8086\inc\0_com_template.txt

org 100h

include 'emu8086.inc'
start:
    CALL PTHIS
    DB 13, 10, 'Enter the number: ', 0
    CALL scan_num
    MOV AX, CX 
    PUSH AX
    MOV BL, 2
    DIV BX   
    MOV BL, AL
    POP AX   
    MOV DL, 2
check_numbers:
    PUSH AX
    PUSH BX
    MOV BL, DL
    DIV BL
    CMP AH, 0
    JE print_is_not_prime
    POP BX
    POP AX
    INC DX
    CMP DX, BX  
    JL check_numbers 
print_is_prime:
    CALL PTHIS
    DB 13, 10, 'The number is prime.', 0
    JMP exit
print_is_not_prime:
    CALL PTHIS
    DB 13, 10, 'The number is not prime.', 0
exit:
HLT
DEFINE_SCAN_NUM
DEFINE_PRINT_NUM
DEFINE_PRINT_NUM_UNS
DEFINE_PTHIS
ret




"
m9TuxTAU,Untitled,Farz0l1x,Python,Thursday 21st of March 2024 10:01:30 AM CDT,"from turtle import *
tracer(0)
r = 1.5
for i in range(10):
    goto(xcor() + 150 * r, ycor() + 300 * r)
    goto(xcor() + 100 * r, ycor() - 300 * r)
    goto(xcor() - 250 * r, ycor())
up()
for x in range(-20, 20):
    for y in range(-20, 20):
        goto(x * r, y * r)
        dot(3, 'blue')
goto(0, 0)
update()
exitonclick()"
gJEJnAg1,Auto Ping & Airplane Mod,tanmyid,Bash,Thursday 21st of March 2024 09:58:06 AM CDT,"#!/bin/bash
# script alternatif buat xl vidio yang gampang dc (butuh ip baru), ini hanya untuk user BFR/CFM
timeout_count=0
while true
do
    response=$(curl -s -o /dev/null -w ""%{http_code}"" -m 5 https://www.google.com)
    if [ $? -eq 0 ]; then
        timeout_count=0
        echo -e ""\e[32mKoneksi Aktif : [$response]\e[0m""
    else
        ((timeout_count++))
        echo -e ""\e[33mKoneksi Timeout : [$response]\e[0m""
    fi
    if [ $timeout_count -eq 3 ]; then
        su -c 'settings put global airplane_mode_on 1; am broadcast -a android.intent.action.AIRPLANE_MODE --ez state true'
        sleep 7
        su -c 'settings put global airplane_mode_on 0; am broadcast -a android.intent.action.AIRPLANE_MODE --ez state false'
        sleep 5
        timeout_count=0
    fi
    sleep 3
done"
CjPj3a2A,Untitled,Farz0l1x,Python,Thursday 21st of March 2024 09:52:11 AM CDT,"from turtle import *
tracer(0)
r = 10
for i in range(10):
    goto(xcor() + 6 * r, ycor() + 4 * r)
    goto(xcor() - 2 * r, ycor() - 4 * r)
    goto(xcor() + 18 * r, ycor() - 6 * r)
    goto(xcor() - 22 * r, ycor() + 11 * r)
up()
for x in range(-5, 25):
     for y in range(-10, 60):
          goto(x * r, y * r)
          dot(3, 'blue')
goto(0, 0)
update()
exitonclick()"
ri3CJ92x,Pseudo code example,Past3binUs3r,C,Thursday 21st of March 2024 09:48:46 AM CDT,"uint16_t i = 0; // uint8_t wouldn't fit the value 360
enum { INCR, DECR, STOP, STOPPED } task;
task = INCR;

some_loop {
    if (task == INCR) {
        i = i + 45;
        printf(""i = %d\n"", i);
        if (i == 360)
            task = DECR;
    }
    else if (task == DECR) {
        i = i - 45;
        printf(""i = %d\n"", i);
        if (i == 0)
            task = STOP;
    }
    else if (task == STOP) {
        printf(""STOP!\n"");
        task = STOPPED;
    }
    else {
        // stopped
    }
}"
97Gk1U5j,https://otvet.mail.ru/question/237547482,NickAndNick,C++,Thursday 21st of March 2024 09:28:48 AM CDT,"#include <algorithm>
#include <chrono>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>

using namespace std;
using namespace std::chrono;

struct Date {
    int dd;
    int mm;
    int yyyy;
    Date() : dd(1), mm(1), yyyy(1992) {
        set_current();
    }
    int difference() const {
        const auto today = sys_days{ floor<days>(system_clock::now()) };
        const auto target = sys_days{ year_month_day{year(yyyy), month(mm), day(dd)} };
        return (today - target).count();
    }
private:
    void set_current() {
        auto now = system_clock::now();
        auto date = floor<days>(current_zone()->to_local(now));
        dd = static_cast<unsigned>(year_month_day{ date }.day());
        mm = static_cast<unsigned>(year_month_day{ date }.month());
        yyyy = static_cast<int>(year_month_day{ date }.year());
    }
    friend istream& operator>>(istream& inp, Date& date) {
        cout << ""Введите дату через пробел в формате ДД ММ ГГГГ: "";
        inp >> date.dd >> date.mm >> date.yyyy;
        inp.ignore(0x1000, '\n');
        return inp;
    }
    friend ostream& operator<<(ostream& out, const Date& date) {
        string date_string;
        if (date.dd < 10) date_string = ""0"";
        date_string += to_string(date.dd) + ""."";
        if (date.mm < 10) date_string += ""0"";
        date_string += to_string(date.mm) + ""."" + to_string(date.yyyy);
        return out << date_string;
    } 
};

struct Goods {
    string name;
    unsigned quantity;
    float price;
    Date date;
    Goods() : name(""-""), quantity(0), price(0.0F) {}
private:
    friend istream& operator>>(istream& inp, Goods& goods) {
        cout << ""Введите наименование товара: "";
        getline(inp, goods.name);
        cout << ""Введите количество товара: "";
        inp >> goods.quantity;
        inp.ignore(0x1000, '\n');
        cout << ""Введите цену товара: "";
        inp >> goods.price;
        inp.ignore(0x1000, '\n');
        return inp >> goods.date;
    }
    friend ostream& operator<<(ostream& out, const Goods& goods) {
        out << goods.name << ' ' << goods.quantity << ' '
            << goods.price << ' ' << goods.date;
        return out;
    }
    friend bool operator<(const Goods& a, const Goods& b) {
        return a.name < b.name;
    }
};

class Warehouse {
public:
    void add(const Goods& goods) {
        this->goods.push_back(goods);
    }
    vector<Goods> select(const float price) const {
        vector<Goods> selection;
        Date current;
        for (const auto& record : goods) {
            if (record.date.difference() > limit && record.price > price) {
                selection.push_back(record);
            }
        }
        sort(begin(selection), end(selection));
        return selection;
    }
private:
    static constexpr auto limit = 30;
    vector<Goods> goods;
};

static Warehouse create() {
    Warehouse warehouse;
    cout << ""Введите размер списка: "";
    size_t limit;
    cin >> limit;
    cin.ignore(0x1000, '\n');
    Goods goods;
    for (size_t i = 0; i < limit; ++i) {
        cin >> goods;
        warehouse.add(goods);
    }
    return warehouse;
}

static void show(const vector<Goods>& goods) {
    puts(""Вывод результатов:"");
    size_t n = 0;
    for (const auto& record : goods) {
        cout << ++n << "". "" << record << '\n';
    }
}

int main() {
    cout.setf(ios::fixed);
    cout.precision(2);
    system(""chcp 1251 > nul"");
    auto warehouse = create();
    auto result = warehouse.select(100000);
    show(result);
    system(""pause > nul"");
}

"
5veQLzUt,Untitled,RenSafaray,Java,Thursday 21st of March 2024 09:20:58 AM CDT,"import java.util.Enumeration;
import java.util.Hashtable;

// Определяем класс Main, в котором будет выполняться основной код программы
public class Main
{
    // определяем статическую переменную REQUESTS типа Hashtable, которая будет хранить информацию о запросах
    private static Hashtable<String, Integer> REQUESTS = new Hashtable<>();

    // определяем главный метод main, который будет запускать программу
    public static void main(String[] args) { 

        // добавляем в Hashtable информацию о запросах с помощью метода addRequest
        addRequest(""192.168.1.1"", ""GET"", ""/index.html"", 200);
        addRequest(""192.168.1.1"", ""GET"", ""/style.css"", 200);
        addRequest(""192.168.1.2"", ""POST"", ""/login"", 401);
        addRequest(""192.168.1.1"", ""GET"", ""/image.jpg"", 200);
        addRequest(""192.168.1.3"", ""GET"", ""/index.html"", 200);
        addRequest(""192.168.1.2"", ""POST"", ""/login"", 200);

        /* выводим на экран информацию о IP-адресах, 
        методах запросов и кодах состояний с помощью методов printStringHashtable и printIntegerHashtable */
        System.out.println(""IP-адреса:"");
        printStringHashtable(analyzeIpAddresses());
        System.out.println(""\nМетоды запросов:"");
        printStringHashtable(analyzeMethods());
        System.out.println(""\nКоды состояний:"");
        printIntegerHashtable(analyzeStatusCodes());
    }

    // определяем метод addRequest, который добавляет информацию о запросе в Hashtable
    private static void addRequest(String ipAddress, String method, String url, int statusCode) {

        // формируем ключ для Hashtable на основе IP-адреса, метода запроса и кода состояния
        String key = ipAddress + "":"" + method + "":"" + statusCode;

        // если ключ уже существует в Hashtable, увеличиваем значение на 1
        if (REQUESTS.containsKey(key)) {
            REQUESTS.put(key, REQUESTS.get(key) + 1);

        // иначе добавляем новый ключ в Hashtable со значением 1
        } else {
            REQUESTS.put(key, 1);
        }
    }

    // определяем метод analyzeIpAddresses, который анализирует IP-адреса запросов и возвращает Hashtable с результатами
    private static Hashtable<String, Integer> analyzeIpAddresses() {
        // создаем новый Hashtable для хранения результатов
        Hashtable<String, Integer> ipAddressCount = new Hashtable<>();
        // получаем список ключей из Hashtable REQUESTS
        Enumeration<String> keys = REQUESTS.keys();
        // перебираем все ключи и добавляем информацию о IP-адресах в новый Hashtable
        while (keys.hasMoreElements()) {
            String key = keys.nextElement();
            String ipAddress = key.split("":"")[0];

            // если IP-адрес уже существует в новом Hashtable, увеличиваем значение на количество запросов с этим IP-адресом
            if (ipAddressCount.containsKey(ipAddress)) {
                ipAddressCount.put(ipAddress, ipAddressCount.get(ipAddress) + REQUESTS.get(key));
            } 
            // иначе добавляем новый IP-адрес в Hashtable со значением, равным количеству запросов с этим IP-адресом
            else {
                ipAddressCount.put(ipAddress, REQUESTS.get(key));
            }
        }
        // возвращаем новый Hashtable с результатами
        return ipAddressCount;
    }

    // определяем метод analyzeMethods, который анализирует методы запросов и возвращает Hashtable с результатами
    private static Hashtable<String, Integer> analyzeMethods() {
        // создаем новый Hashtable для хранения результатов
        Hashtable<String, Integer> methodCount = new Hashtable<>();
        // получаем список ключей из Hashtable REQUESTS
        Enumeration<String> keys = REQUESTS.keys();
        // перебираем все ключи и добавляем информацию о методах запросов в новый Hashtable
        while (keys.hasMoreElements()) {
            String key = keys.nextElement();
            String method = key.split("":"")[1];

            // если метод запроса уже существует в новом Hashtable, увеличиваем значение на количество запросов с этим методом
            if (methodCount.containsKey(method)) {
                methodCount.put(method, methodCount.get(method) + REQUESTS.get(key));
            // иначе добавляем новый метод запроса в Hashtable со значением, равным количеству запросов с этим методом
            } else {
                methodCount.put(method, REQUESTS.get(key));
            }
        }
        // возвращаем новый Hashtable с результатами
        return methodCount;
    }

    // определяем метод analyzeStatusCodes, который анализирует коды состояний запросов и возвращает Hashtable с результатами
    private static Hashtable<Integer, Integer> analyzeStatusCodes() {
        // создаем новый Hashtable для хранения результатов
        Hashtable<Integer, Integer> statusCodeCount = new Hashtable<>();
        // получаем список ключей из Hashtable REQUESTS
        Enumeration<String> keys = REQUESTS.keys();
        // перебираем все ключи и добавляем информацию о кодах состояний в новый Hashtable
        while (keys.hasMoreElements()) {
            String key = keys.nextElement();
            int statusCode = Integer.parseInt(key.split("":"")[2]);
            // если код состояния уже существует в новом Hashtable, увеличиваем значение на количество запросов с этим кодом состояния
            if (statusCodeCount.containsKey(statusCode)) {
                statusCodeCount.put(statusCode, statusCodeCount.get(statusCode) + REQUESTS.get(key));
            }
            // иначе добавляем новый код состояния в Hashtable со значением, равным количеству запросов с этим кодом состояния 
            else {
                statusCodeCount.put(statusCode, REQUESTS.get(key));
            }
        }
        // возвращаем новый Hashtable с результатами
        return statusCodeCount;
    }

    // определяем метод printStringHashtable, который выводит на экран информацию из Hashtable с ключами типа String
    private static void printStringHashtable(Hashtable<String, Integer> hashtable) {
        // получаем список ключей из Hashtable
        Enumeration<String> keys = hashtable.keys();
        // перебираем все ключи и выводим на экран информацию о значениях
        while (keys.hasMoreElements()) {
            String key = keys.nextElement();
            System.out.println(key + "": "" + hashtable.get(key));
        }
    }

    // определяем метод printIntegerHashtable, который выводит на экран информацию из Hashtable с ключами типа Integer
    private static void printIntegerHashtable(Hashtable<Integer, Integer> hashtable) {
        // получаем список ключей из Hashtable
        Enumeration<Integer> keys = hashtable.keys();
        // перебираем все ключи и выводим на экран информацию о значениях
        while (keys.hasMoreElements()) {
            Integer key = keys.nextElement();
            System.out.println(key + "": "" + hashtable.get(key));
        }
    }
}"
Np3BavAL,9.Dictionary,Silviya7,JavaScript,Thursday 21st of March 2024 09:13:54 AM CDT,"function solve(input){
    
    let ObjectProduct=''; 

    let ArrProducts={};
    for (const product of input) {
        
         ObjectProduct= JSON.parse(product);// in Object
         let entries= Object.entries(ObjectProduct);

         let NewObject={Term:'', Definition:'' };
         for (let[key,value] of entries) {           
            ArrProducts[key]=value;   
          
         }
         
    }


    let FinalArr=Object.entries(ArrProducts).sort((a, b) => a[0].localeCompare(b[0]));   
    for (const [key,value] of FinalArr) {
    console.log(`Term: ${key} => Definition: ${value}` );
            
        }
    }
  "
GkUdSFxr,Untitled,kirkarr,Lua,Thursday 21st of March 2024 09:11:51 AM CDT,"{
  label = ""pink"",
  shapes = {
    { 3,0,5,6,5,11,texture = ""iron_block"", tint = 0xff66ff },
    { 10,0,5,13,5,11,texture = ""iron_block"", tint = 0xff66ff },
    { 6,3,5,13,5,11,texture = ""iron_block"", tint = 0xff66ff },
    { 4,4,11,12,9,12,texture = ""iron_block"", tint = 0xff66ff },
    { 3,5,5,4,10,11,texture = ""iron_block"", tint = 0xff66ff },
    { 4,5,5,12,7,6,texture = ""iron_block"", tint = 0x0000ee },
    { 4,5,6,13,10,11,texture = ""iron_block"", tint = 0xff66ff },
    { 12,5,5,13,10,11,texture = ""iron_block"", tint = 0xff66ff },
    { 4,7,5,5,8,6,texture = ""iron_block"", tint = 0xeeeeee },
    { 5,7,5,12,8,6,texture = ""iron_block"", tint = 0x0000ee },
    { 4,8,5,5,9,6,texture = ""iron_block"", tint = 0x0000ee },
    { 5,8,5,6,9,6,texture = ""iron_block"", tint = 0xeeeeee },
    { 6,8,5,12,9,6,texture = ""iron_block"", tint = 0x0000ee },
    { 4,9,5,13,10,11,texture = ""iron_block"", tint = 0xff66ff },
  }
}"
nhvXEQrE,identifiers,zaifmahi,C,Thursday 21st of March 2024 09:03:36 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_KEYWORDS 32
#define MAX_KEYWORD_LENGTH 20
#define MAX_VARIABLES 100
#define MAX_VARIABLE_LENGTH 30

const char *keywords[] = {
    ""auto"", ""break"", ""case"", ""char"", ""const"", ""continue"", ""default"", ""do"",
    ""double"", ""else"", ""enum"", ""extern"", ""float"", ""for"", ""goto"", ""if"",
    ""int"", ""long"", ""main"", ""printf"", ""register"", ""return"", ""scanf"" ""short"", ""signed"", ""sizeof"",
    ""static"", ""struct"", ""switch"", ""typedef"", ""union"", ""unsigned"", ""void"",
    ""volatile"", ""while"",
};

int is_keyword(const char *word) {
    for (int i = 0; i < MAX_KEYWORDS; i++) {
        if (strcmp(word, keywords[i]) == 0) {
            return 1;
        }
    }
    return 0;
}

int is_valid_variable(const char *word) {
    if (!isalpha(word[0]) && word[0] != '_') {
        return 0;
    }

    for (int i = 1; i < strlen(word); i++) {
        if (!isalnum(word[i]) && word[i] != '_') {
            return 0;
        }
    }

    return 1;
}

int main() {
    char filename[1000];
    printf(""Enter a file name: "");
    scanf(""%s"", filename);
    FILE *file = fopen(filename, ""r"");

    if (file == NULL) {
        printf(""Could not open file: %s\n"", filename);
        return 1;
    }

    char word[MAX_VARIABLE_LENGTH];
    char variables[MAX_VARIABLES][MAX_VARIABLE_LENGTH];
    int keyword_count = 0, variable_count = 0, duplicate_count = 0;

    while (fscanf(file, ""%s"", word) == 1) {
        // Remove non-alphanumeric characters from the word
        int len = strlen(word);
        for (int i = 0; i < len; i++) {
            if (!isalnum(word[i]) && word[i] != '_') {
                word[i] = '\0';
                break;
            }
        }

        if (is_keyword(word)) {
            printf(""Keyword: %s\n"", word);
            keyword_count++;
        } else if (is_valid_variable(word)) {
            int found = 0;
            for (int i = 0; i < variable_count; i++) {
                if (strcmp(word, variables[i]) == 0) {
                    found = 1;
                    duplicate_count++;
                    break;
                }
            }
            if (!found) {
                printf(""Variable: %s\n"", word);
                strcpy(variables[variable_count], word);
                variable_count++;
            }
        }
    }

    printf(""\nTotal number of keywords found: %d\n"", keyword_count);
    printf(""Total number of variables found: %d\n"", variable_count);
    printf(""Total number of duplicate variables found: %d\n"", duplicate_count);

    fclose(file);
    return 0;
}
"
nixc2kQX,Untitled,um1up,C++,Thursday 21st of March 2024 08:46:41 AM CDT,"hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[1]/android.widget.FrameLayout/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[1]/android.widget.FrameLayout/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[1]/android.widget.FrameLayout/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]/android.widget.ScrollView/android.view.ViewGroup/android.view.ViewGroup[1]/android.widget.TextView[1]
"
L2mYkbd0,VintageStory-backup.ps1,kerbo_,PowerShell,Thursday 21st of March 2024 08:40:07 AM CDT,"# A simple PowerShell script to backup Vintage Story saves
# Twitter: @Kerbo_
#
$ErrorActionPreference = 'SilentlyContinue'
$vintagestoryDir = $env:APPDATA + ""\VintagestoryData\Saves""
$dateString = $(get-date -f yyy-MM-dd_HH-mm)
Push-Location $vintagestoryDir

If(!(test-path -PathType container ""backups""))
{
      New-Item -ItemType Directory -Path ""backups"" | Out-Null
}

$saves = Get-ChildItem -Filter *.vcdbs

foreach($save in $saves) {
    $savename = $save.Name
    $basename = $save.BaseName
    
    $save_hash = Get-FileHash -Algorithm SHA1 $save
    $backup = Get-ChildItem ""backups\$basename-*"" | select -last 1
    $backup_hash = Get-FileHash -Algorithm SHA1 $backup -EV Err -EA SilentlyContinue
    if ( $backup_hash.Hash -eq $save_hash.Hash ) {
        Write-Host ""$savename matches latest backup, no backup needed"" -ForegroundColor green
    } else {
        cp $savename ""backups\$basename-$dateString.vcdbs""
        $RET=$?
        if ($RET) {
            Write-Host ""Copied $basename.vcdbs to backups\$basename-$dateString.vcdbs"" -ForegroundColor yellow
        } else {
            Write-Host ""Error! cp returned $RET for $basename.vcdbs"" -ForegroundColor red
        }
    }
    # Keep only latest 10 backups
    $c = Get-ChildItem ""backups\$basename-*"" -Recurse | sort CreationTime -desc | select -Skip 10 | measure
    If($c -gt 0) {
        Write-Host ""Cleaning up $c.Count old backups""
        Get-ChildItem ""backups\$basename-*"" -Recurse | sort CreationTime -desc | select -Skip 10 | Remove-Item -Force
    }
}
Pop-Location
# Sleep to show screen output before exiting
Start-Sleep -Seconds 5"
ZPQAB5Ah,🤑 G2A.com Free Gift Card Guide Mar 2024 🤑,PASUSW,GetText,Thursday 21st of March 2024 07:30:14 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
If you use this make sure to use the English version of G2A.com otherwise this will not work!
  
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view
 
Working as of:
21 March 2024

















































"
2QJcekRS,🤑 G2A.com Free Gift Card Guide Mar 2024 FIX 🤑,ounnuo,GetText,Thursday 21st of March 2024 07:26:45 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_170558.pdf

Working as of:
21 March 2024"
V8usuJJT,Untitled,Ilya_Bykonya,C++,Thursday 21st of March 2024 07:26:17 AM CDT,"protected: 
	virtual void terminate(std::chrono:milliseconds) = 0;

public:
    template <typename Rep, typename Period>
    virtual bool terminate(chrono::duration<Rep, Period> timeout) {
        terminate(std::chrono_duration_cast<std::chrono:milliseconds>(timeout));
    } "
U0d38nSS,data875,TestGuy1,JSON,Thursday 21st of March 2024 07:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '24a256364aef3a950e25175d777435e53060fedfe4d6ea0ce3d366c981463f311b05f9b768d42d9ecab8d85f93f6b1df14b99307a2c5444287896694d676bad78d8b02c4ecd1b41fd4809cee45465ecd1696ab6837b9515ec55decbe1cf4b6fa6f454c1a8704f8da134b769983ce6dfb840f2bb0ef615e11743611e092a957c4',
  otherdata: [
    '28d7d6704157587fb402855772627d11',
    'b8f2449d5cc535abb9281f6fba339d89',
    '1a20f17608fec1282275c6665553e857',
    'f930ec163319851a306bb83f563eff64',
    '1dfafd199ca35c45915f660bac319f4b',
    '4f6e30bd932c133645f409d63db39b6f',
    'c9653d60ab7fe1ca491fafd80a6164dc',
    '61be76846ea3162c6321d6bc7a6e563a'
  ]
}"
j8iP34Qa,Custom pod spec,inject0r1945,YAML,Thursday 21st of March 2024 06:43:31 AM CDT,"apiVersion: v1
kind: Pod
metadata:
  namespace: awx
spec:
  serviceAccountName: default
  automountServiceAccountToken: false
  containers:
    - image: quay.io/d_vasilev_sis/sis-awx-ee:0.2
      name: worker
      imagePullPolicy: Always
      args:
        - ansible-runner
        - worker
        - '--private-data-dir=/runner'
      resources:
        requests:
          cpu: 250m
          memory: 100Mi
          
  extra_volumes: |
    - name: server-awx-logs
      persistentVolumeClaim:
        claimName: server-awx-logs-pvc

    - name: server-awx-data
      persistentVolumeClaim:
        claimName: server-awx-data-pvc

  ee_extra_volume_mounts: |
    - name: server-awx-logs
      mountPath: /var/log

    - name: server-awx-data
      mountPath: /awx_data"
bD7aG2rx,WHAT_IS_O(N),tarmogoyf,Java,Thursday 21st of March 2024 06:26:37 AM CDT,"//given : generate N unique integers, return array
// N - any positive int 32 

public int [] randomize(int n){
 	Set<Integer> memo  = new HashSet<>();
	int [] result = new int[n];
	for(int i = 0; i < n; i++){
	int candidate = ThreadLocalRandom.current().nextInt(Integer.MIN_VALUE, Integer.MAX_VALUE); // random int 32 from java library
	while(memo.contains(candidate)){
		candidate = ThreadLocalRandom.current().nextInt(Integer.MIN_VALUE, Integer.MAX_VALUE); // 
	}
	memo.add(candidate);
	reuslt[i] = candidate;
}

return result;

}"
T80rSYqT,Скрыть обертку floorAd,Luxup,JavaScript,Thursday 21st of March 2024 06:15:29 AM CDT,"<script>
setInterval(function() {
  if (document.getElementById('%DIV_ID%')) {
    document.querySelectorAll('div[style*=""max-width: 100vmin; border-width: 2px 2px 0px;""] > div:first-child > div').forEach(function(div) {
      div.style.setProperty('display', 'none', 'important');
    });

    document.querySelectorAll('div[style*=""max-width: 100vmin; border-width: 2px 2px 0px;""]').forEach(function(div) {
      div.style.setProperty('border', '0', 'important');
    });
  }
}, 2000);
</script>"
KiwPnvQW,Draggable attributes example,S11as,TypeScript,Thursday 21st of March 2024 05:56:25 AM CDT,"    public render(): JSX.Element {
        const { label, onSkeletonSubmit } = this.props;
        const isSkeleton = !!onSkeletonSubmit;

        return (
            <Form
                initialValues={{
                    name: label?.name || '',
                    type: label?.type || (isSkeleton ? LabelType.SKELETON : LabelType.ANY),
                    color: label?.color || undefined,
                    attributes: (label?.attributes || []).map((attr) => ({
                        id: attr.id,
                        name: attr.name,
                        type: attr.input_type,
                        values: attr.values,
                        mutable: attr.mutable,
                        default_value: attr.default_value,
                    })),
                }}
                onFinish={this.handleSubmit}
                layout='vertical'
                ref={this.formRef}
            >
                <Row justify='start' align='top'>
                    <Col span={8}>{this.renderLabelNameInput()}</Col>
                    <Col span={3} offset={1}>{this.renderLabelTypeInput()}</Col>
                    <Col span={3} offset={1}>
                        {this.renderChangeColorButton()}
                    </Col>
                    <Col offset={1}>
                        {this.renderNewAttributeButton()}
                    </Col>
                </Row>
                <Row justify='start' align='top'>
                    <Col span={24}>
                        <Form.List name='attributes'>
                            {(fieldInstances) => {
                                const layout = fieldInstances.map((field, index) => ({
                                    i: field.key.toString(),
                                    x: 0,
                                    y: index,
                                    h: 1,
                                    w: 1,
                                }));
                                return (
                                    <ReactGridLayout
                                        layout={layout}
                                        rowHeight={30}
                                        cols={1}
                                        width={600}
                                    >
                                        {fieldInstances.map(this.renderAttribute)}
                                    </ReactGridLayout>
                                );
                            }}
                        </Form.List>
                    </Col>
                </Row>
                <Row justify='start' align='middle'>
                    <Col>{this.renderSaveButton()}</Col>
                    <Col offset={1}>{this.renderCancelButton()}</Col>
                </Row>
            </Form>
        );
    }"
