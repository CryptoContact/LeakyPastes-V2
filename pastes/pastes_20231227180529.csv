id,title,username,language,date,content
tigqPe2T,TPS card edit,JustBenji,Lua,Wednesday 27th of December 2023 11:48:57 AM CDT,"--[[
    Author: boubou
    Fixed by: Quetz4l 
	
	Desc: Show tps,ms, chunk loaded, entities loaded, Tile entities loaded in all dims	
	Image: https://ibb.co/GCkWQcW
	
	Install: you only need a computer ant the tps card. Download or copy the code and run it!
]]
-- pastebin get tigqPe2T tps.lua
-- /home/.shrc     >> edit .shrc >> tps.lua > save

computer = require(""computer"")
event = require(""event"")
os = require(""os"")
term = require(""term"")
component = require(""component"")
tps_card = component.tps_card
gpu = component.gpu


chunksON = true
tileEntityON = true
entityON = true


-- set all dims or special
local dims = tps_card.getAllDims()




-- allows the computer to reboot via redstone if it crashes.
-- Put the tps meter as autorun so players can reboot themselves the computer if it crashes.
if (#component.list(""redstone"") > 0) then
  rs = component.redstone
  rs.setWakeThreshold(10)
end


delay = 5 -- delay between two refresh
max_x = 100
max_y = 50
gpu.setResolution(max_x, max_y)
n = 44 -- number of rows
digital_rounding = 2 -- numbers of decimals
offset_y = 3
offset_dim = 6
offset_ticktime = offset_dim + 32
offset_chunks = offset_ticktime + 16
offset_entities = offset_chunks + 16
offset_te = offset_entities + 18

-- function to format string properly
function format_str(str, size)
    s = tostring(str)
    j = 0
    
    while #s < size do
        if j % 2 == 0 then
            s = "" "" .. s
        else
            s = s .. "" ""
        end
        j = j+1
    end
    return s
end

-- function to draw the background
function draw_background()
      big_line_top = ""╔════╦═══════════════════════════════╦═══════════════╦═══════════════╦═════════════════╦═══════════╗""
       title_line =  ""║ #  ║           Dimension           ║ tick time(ms) ║ chunks loaded ║ entities loaded ║ TE loaded ║""  
       normal_line = ""║ff║                               ║               ║               ║                 ║           ║""
       
    big_line_middle= ""╠════╬═══════════════════════════════╬═══════════════╬═══════════════╬═════════════════╬═══════════╣""
     normal_line_2 = ""║    ║                               ║               ║               ║                 ║           ║""
       
      big_line_bot = ""╚════╩═══════════════════════════════╩═══════════════╩═══════════════╩═════════════════╩═══════════╝""

  
    i = 1
    gpu.set(1, i, big_line_top)
    i = i+1
    gpu.set(1, i, title_line)
    i = i+1
    gpu.set(1, i, big_line_middle)
    i = i+1
    for y=1, n do
        s = normal_line:gsub(""ff"", format_str(tostring(y), offset_dim - 2))
        gpu.set(1, i, s)
        i = i+1
    end

    gpu.set(1, i, big_line_middle)
    i = i+1
    gpu.set(1, i, normal_line_2)
    i = i+1
    gpu.set(1, i, big_line_bot)
end

-- sorting criteria
function cust_sort(a, b)
    return a[""tick time""] > b[""tick time""]
end

-- rounding method to reduce size used on screen
function round(num, numDecimalPlaces)
    local mult = 10^(numDecimalPlaces or 0)
    return math.floor(num * mult + 0.5) / mult
  end

-- preprocessing the data
function get_data_sorted()
    dim_list = {}
    ms_counter = 0
    dim_counter = 0
    chunk_counter = 0
    entity_counter = 0 
    tile_entity_counter = 0
    for dim_id, dim_name  in pairs(dims) do
		if tps ~= nil then 	
            dim = getDimInfo(dim_id, dim_name, dim_counter)     
            if dim ~= nil then 
                dim_list[#dim_list+1] = dim 
                ms_counter=ms_counter+tps
                dim_counter=dim_counter+1

                if chunksON then chunk_counter= chunk_counter+dim['loaded chunks'] end
                if entityON then entity_counter= entity_counter+dim['loaded entities'] end
                if entityON then tile_entity_counter= tile_entity_counter+dim['loaded tile entities'] end
            end
            
		end
    end
    table.sort(dim_list, cust_sort)
    
    dim_list[""overall""] = {
        [""tick time""]=round(ms_counter, digital_rounding), 
        [""loaded dims""]=dim_counter,
        [""loaded chunks""] = chunk_counter,
        [""loaded entities""] = entity_counter,
        [""loaded tile entities""] = tile_entity_counter,
    
    }
    return dim_list
end

function getCountOfEntity(EntityInDim)
    local count = 0
    if entityON then
        if EntityInDim ~= nil then
            for _entity, _count in pairs(EntityInDim) do
                count = count+_count
            end
        end
    end
    return count
end

function getDimInfo(dim_id, dim_name, dim_counter)
    tps = tps_card.getTickTimeInDim(dim_id)
    if tps ~= nil then

        dim = {
            [""name""]=dim_name.."" (""..dim_id.."")"", 
            [""tick time""]=round(tps, digital_rounding), 
            [""dim id""]=dim_id
        }

        if chunksON then dim[""loaded chunks""] = tps_card.getChunksLoadedForDim(dim_id)
        else dim[""loaded chunks""] = ""-"" end

        if entityON then dim[""loaded entities""] = getCountOfEntity(tps_card.getEntitiesListForDim(dim_id))
        else dim[""loaded entities""] = ""-"" end

        if tileEntityON then dim[""loaded tile entities""] = getCountOfEntity(tps_card.getTileEntitiesListForDim(dim_id))
        else dim[""loaded tile entities""] = ""-"" end
    
        return dim
    end

end

-- function refreshing the screen
function update(offset_y, offset_dim, offset_ticktime, offset_chunks, offset_entities, offset_te)
    tps = get_data_sorted()
    term.clear()
    draw_background()

    for y = 1, n do    
        if tps[y] ~= nil then --checking for nil in case the amount of rows is bigger than the amount of dim loaded.
        
            gpu.set(offset_dim+1, offset_y + y, format_str(tps[y][""name""], offset_ticktime - offset_dim - 1))
            gpu.set(offset_ticktime+1, offset_y + y, format_str(tps[y][""tick time""], offset_chunks - offset_ticktime - 1))
            gpu.set(offset_chunks+1, offset_y + y, format_str(tps[y][""loaded chunks""], offset_entities - offset_chunks - 1))
            gpu.set(offset_entities+1, offset_y + y, format_str(tps[y][""loaded entities""], offset_te - offset_entities - 1))
            gpu.set(offset_te+1, offset_y + y, format_str(tps[y][""loaded tile entities""], max_x - offset_te - 1))
        else
            gpu.set(offset_dim+1, offset_y + y, format_str("""", offset_ticktime - offset_dim - 1))
            gpu.set(offset_ticktime+1, offset_y + y, format_str("""", offset_chunks - offset_ticktime - 1))
            gpu.set(offset_chunks+1, offset_y + y, format_str("""", offset_entities - offset_chunks - 1))
            gpu.set(offset_entities+1, offset_y + y, format_str("""", offset_te - offset_entities - 1))
            gpu.set(offset_te+1, offset_y + y, format_str("""", max_x - offset_te - 1))   
        end
    end
    
    -- overall
    ticktime = tps[""overall""][""tick time""]
    str_tps = format_str(tostring(ticktime).."" (""..tostring(math.ceil(tps_card.convertTickTimeIntoTps(ticktime), 0)).."" tps)"", offset_chunks - offset_ticktime - 1)
    gpu.set(2, offset_y + n + 2, format_str(tostring(tps[""overall""][""loaded dims""]), 4))
    gpu.set(offset_dim+1, offset_y + n + 2, format_str(""overall: ""..tostring(tps[""overall""][""loaded dims""]).."" dims loaded"", offset_ticktime - offset_dim - 1))
    gpu.set(offset_ticktime+1, offset_y + n + 2, str_tps)
    gpu.set(offset_chunks+1, offset_y + n + 2, format_str(tps[""overall""][""loaded chunks""], offset_entities - offset_chunks - 1))
    gpu.set(offset_entities+1, offset_y + n + 2, format_str(tps[""overall""][""loaded entities""], offset_te - offset_entities - 1))
    gpu.set(offset_te+1, offset_y + n + 2, format_str(tps[""overall""][""loaded tile entities""], max_x - offset_te - 1))


end

-- wrapper function to be used in pcall
function run()
    update(offset_y, offset_dim, offset_ticktime, offset_chunks, offset_entities, offset_te)
    os.sleep(delay)
end

-- Start of the program
function main()
        term.clear()
    draw_background()

    while true do   
        run()
event = term.pull()
if event == ""touch"" or event == ""drag"" then computer.shutdown(true) end

    end
end

--pcall(main) -- to avoid any user from terminating it, as it catch the keyboard interrupt and does nothing with it
main()"
tiGU9Ksh,Sigmoid C,RicardasSim,C,Wednesday 27th of December 2023 11:38:05 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>

double sigmoid(double x)
{
     return 1 / (1 + exp(-x));
}

int main()
{
    double result;

    result = sigmoid(-10.0);

    printf(""Sigmoid of -10.0: %f\n"", result);

    result = sigmoid(0.0);

    printf(""Sigmoid of 0.0: %f\n"", result);

    result = sigmoid(10.0);

    printf(""Sigmoid of 10.0: %f\n"", result);

    return 0;
}

/*

Sigmoid of -10.0: 0.000045
Sigmoid of 0.0: 0.500000
Sigmoid of 10.0: 0.999955

*/"
6EcG3SN0,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Wednesday 27th of December 2023 11:37:39 AM CDT,"Dear Moe,
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-811137"
Dqpu4fPC,Untitled,Mika_14,Arduino,Wednesday 27th of December 2023 11:34:10 AM CDT,"#include ""DFRobot_RainfallSensor.h""
DFRobot_RainfallSensor_I2C Sensor(&Wire);

#include ""RTClib.h""
RTC_DS3231 rtc;

#include <Wire.h>
#include ""SparkFun_AS3935.h""
SparkFun_AS3935 lightning(0x03);
const byte lightningInt = D0;

#define LIGHTNING_INT 0x08

#define HOUR        3600
#define HALF_HOUR     1800
#define QUARTER_HOUR 900

#define SEND_INTERVAL HALF_HOUR

unsigned long interval;

unsigned long last;

const byte dataPin = D8;
float rainOld;

TaskHandle_t lightningTask;
bool hasLightning = false;
String lightningString;

void setup(){
  Serial.begin(115200);

  // HC-12 module is connected as Serial2
  Serial2.begin(2400, SERIAL_8N1, D9, D10);

  Sensor.begin();
  rtc.begin();

  //  rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));

  DateTime now = rtc.now();
  Serial.println(String(now.hour()) + "":"" + String(now.minute()));

  pinMode(dataPin, OUTPUT);
  digitalWrite(dataPin, HIGH);

  Serial2.println("""");

  //  set up second core to check lightning
  xTaskCreatePinnedToCore(
    handleLightning,   /* Task function. */
    ""Task1"",        /* name of task. */
    10000,          /* Stack size of task */
    NULL,           /* parameter of the task */
    1,              /* priority of the task */
    &lightningTask,     /* Task handle to keep track of created task */
    0);             /* pin task to core 0 */

}

void loop(){
  //  check lightning flag, send data if there is lightning
  if(hasLightning){
    hasLightning = false;

    Serial.println(""LIGHTNING!"");
    Serial.println(lightningString);

    Serial2.print(lightningString);
    //  for debugging, set string to ""NONE"" after having handled the strike.
    lightningString = ""NONE"";
  }

  //  handle serial messages
  while(Serial.available()){
    String data = Serial.readStringUntil('\n');

    //  handle command
    if(data.indexOf(""AT"") == 0){
      Serial.println(""> "" + data);

      digitalWrite(dataPin, LOW);
      delay(100);
      Serial2.println(data);
      delay(100);
      digitalWrite(dataPin, HIGH);
    }
    else if(data.indexOf(""checkR"") == 0){
      Serial.println(""> "" + data);
      Serial.println(""< "" + String(Sensor.getRainfall(1)));
    }
    else{
      Serial.println(""> "" + data);
      Serial2.println(data);
    }
  }

  //  handle HC-12 messages
  while(Serial2.available()){
    String data = Serial2.readStringUntil('\n');
    Serial.println(""< "" + data);
  }

  //  handle collecting and sending rain data every 30 min.
  if(millis() - last > interval){
    Serial.println(""Checking rainfall.."");

    DateTime now = rtc.now();

    float rainNew = Sensor.getRainfall();
    String rainString = ""r"" + String(rainNew - rainOld) + ""|"";
    rainOld = rainNew;

    //  append time
    rainString += getTime();

    Serial.println(rainString);
    Serial2.println(rainString);

    //  wake up on the next hour
    // interval = HOUR - ((now.minute() * 60) + now.second());
    // interval *= 1000;
    // 
    
    //  wake up on the next half hour
    interval = 1800 - ((( now.minute() * 60 ) + now.second() ) % 1800);
    interval *= 1000;

    Serial.println(""Sleeping for "" + String(interval) + "" milliseconds."");

    last = millis();
  }
}

void handleLightning(void* pvParameters){

  pinMode(lightningInt, INPUT);
  Wire.begin();
  (lightning.begin()) ? Serial.println(""Lightning sensor started!"") : Serial.println(""Lightning sensor error!""); 

  for (;;) {
    //  if we do detect lightning, prepare a string with all the data, and set the flag so the main core can take over.
    if(digitalRead(lightningInt == HIGH)){
      int intVal = lightning.readInterruptReg();

      if(intVal == LIGHTNING_INT){
        byte distance = lightning.distanceToStorm();

        lightningString = ""rl"" + String(distance, 0) + ""|"" + getTime();
        hasLightning = true;
      }
      else{
        Serial.println(""Noise."");
      }
    }
    delay(1);  //  everyone needs time for themselves, even MCU's
  }
}

//  returns time as a string in format HH:MM
String getTime(){
  DateTime now = rtc.now();
  String timeString;

  timeString = String(now.hour());
  timeString += "":"";
  if(now.minute() < 9){
    timeString += ""0"";
  }

  timeString += String(now.minute());

  return timeString;
}"
bVZ5R0cX,Untitled,REALshocK,Python,Wednesday 27th of December 2023 11:23:25 AM CDT,"import keyboard
import pymem
import pymem.process
import time
import ctypes
import ctypes.wintypes

user32 = ctypes.windll.user32

# dwForceJump = (0x16C2380)
# dwLocalPlayer = (0x16C8F38)
# m_fFlags = (0x3C8)


def get_foreground_window_title():
    hwnd = user32.GetForegroundWindow()
    length = user32.GetWindowTextLengthW(hwnd) + 1
    buffer = ctypes.create_unicode_buffer(length)
    user32.GetWindowTextW(hwnd, buffer, length)
    return buffer.value


def main():
    print(""Balqu only Bhop by shocK"")
    pm = pymem.Pymem(""cs2.exe"")
    client = pymem.process.module_from_name(pm.process_handle, ""client.dll"").lpBaseOfDll
    # engine = pymem.process.module_from_name(pm.process_handle, ""engine.dll"").lpBaseOfDll

    while True:
        window_name = ""Counter-Strike 2""
        foreground_window_title = get_foreground_window_title()
        if foreground_window_title != window_name:
            continue

        # Bhop
        dwLocalPlayerPawn = pm.read_longlong(client + 0x16C8F38)  # client_dll.dwLocalPlayerPawn // offsets
        m_fFlags = pm.read_int(dwLocalPlayerPawn + 0x3C8)  # C_BaseEntity.m_fFlags // client.dll
        # client_dll.dwForceJump // offsets
        try:
            if (keyboard.is_pressed(""space"") & m_fFlags & (1 << 0)):
                time.sleep(0.016)
                pm.write_int(client + 0x16C2380, 256)
                # time.sleep(0.015)
                pm.write_int(client + 0x16C2380, 65537)
                time.sleep(0.016)
                pm.write_int(client + 0x16C2380, 256)
            else:
                pm.write_int(client + 0x16C2380, 256)
                time.sleep(0.001)
        except Exception as ex:
            print(ex)
            pass




if __name__ == '__main__':
    main()
"
4u8g9DhV,ทดลอง,pookpookpook,GetText,Wednesday 27th of December 2023 11:21:38 AM CDT,"{
         ""name"": ""ทีวีช่องหนัง"",
         ""image"": ""https://i.postimg.cc/mrrbsRCf/movie.png"",
         ""stations"": [ 

{
""name"": ""ROCK ENTERTAINMENT"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LQLAE.png"", 
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/rockactionhd.m3u8"",
""referer"": ""https://wacth.tv"",
""userAgent"" : ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0; .NET4.0C; .NET4.0E; InfoPath.3)"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"":""TRUE MOVIEHITE"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LEbsz.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/sd-moviehits.stream/playlist.m3u8"",
""referer"": ""https://freetvdd.com/"",
""info"": ""ทรูวิชั่นส์"",
""online"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33""},

{
""name"": ""TRUE SERIES"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LE2QI.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/sd-series.stream/playlist.m3u8"",
""info"": ""ช่องหนังทรูวิชั่นส์"",
""referer"": ""https://freetvdd.com"",
""online"": ""true""},

{
""name"": ""TRUE FILMASIA"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LOoCg.png"", 
""url"": ""https://streaming.livescorethai.net/iptv/sd-filmasia.stream/playlist.m3u8"",
""info"": ""ช่องหนังทรูวิชั่นส์"",
""referer"": ""https://freetvdd.com/"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"",
""online"": ""true""},

{
""name"":""TRUE THAI FILM"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LOLh0.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/sd-thaifilm.stream/chunks.m3u8"",
""referer"": ""https://streaming.livescorethai.net"",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 13_1_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 OPT/3.2.17"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
      ""online"": ""true""},

{
""name"":""3BB ASIAN"",
""info"":""ทีวีช่องหนัง"",
""image"":""https://sv1.picz.in.th/images/2023/12/27/d0Jjwif.png"",
""url"":""https://tv.realmetx.repl.co/Ch/movie/3bbasian.html"",
        ""online"":""true"",
        ""info"":"""",
""embed"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"":""MONO PLUS"",
""image"":""https://sv1.picz.in.th/images/2023/12/27/d0Jjcwz.png"",
""url"":""https://tv.realmetx.repl.co/Ch/movie/monoplus.html"",
        ""online"":""true"",
              ""info"":"""",
""embed"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""CCM"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0Jjgo8.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/sd-celestial.stream/playlist.m3u8"",
""referer"": ""https://streaming.livescorethai.net"",
       ""online"":""true"",
          ""info"":"""",
""userAgent"": ""ExoPlayerDemo/4.0.02019 (Linux;Android 12) ExoPlayerLib/1.5.13"", ""playInNatPlayer"": ""true"",
""epgId"": """"
},

{
""name"": ""3BB SPORT"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0JjQ5u.png"",
""imageScale"": ""fitStart"",
""url"": ""https://unculled-stability.000webhostapp.com/play_video.php?id=7"",
""referer"": """",
       ""online"":"""",
          ""info"":"""",
""userAgent"": ""ExoPlayerDemo/4.0.02019 (Linux;Android 12) ExoPlayerLib/1.5.13"", ""embed"": ""true"",
""epgId"": """"
},

{
""name"": ""TVN"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LtDyn.png"",
""url"": ""https://streaming.livescorethai.net/iptv/hd-tvn.stream/playlist.m3u8"",
        ""online"":""true"",
        ""info"":"""",
""userAgent"": ""ExoPlayerDemo/4.0.02019 (Linux;Android 12) ExoPlayerLib/1.5.13"", ""embed"": """",
""referer"": ""https://streaming.livescorethai.net/""
},

{
""name"": ""FW Movie"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LtLB8.png"",
""imageScale"": ""fitStart"",
""url"": ""https://www.inwiptv.com/player_demo.php?channel=95262"",
""isHost"": ""true"",
        ""online"":""true"",
""referer"": ""https://www.inwiptv.com"",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""FW Series"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0JogB0.png"",
""imageScale"": ""fitStart"",
""url"": ""https://www.inwiptv.com/player_demo.php?channel=94898"",
""isHost"": ""true"",
""online"":""true"",
        ""info"":"""",
""referer"": ""https://www.inwiptv.com"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""FW cartoon"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0JoiUu.png"",
""imageScale"": ""fitStart"",
""url"": ""https://www.inwiptv.com/player_demo.php?channel=89782"",
""online"": ""true"",
""referer"": ""https://www.inwiptv.com"",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""FW Comedy"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0JoR8Z.png"",
""imageScale"": ""fitStart"",
""url"": ""https://www.inwiptv.com/player_demo.php?channel=89781"",
""online"": ""true"",
""referer"": ""https://www.inwiptv.com"",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""FW Sports"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LcRaq.png"",
""imageScale"": ""fitStart"",
""url"": ""https://www.inwiptv.com/player_demo.php?channel=92941"",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""online"": ""true""},

{
""name"": ""NKTV"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LwaRN.png"",
""imageScale"": ""fitStart"",
""url"": ""http://sv1.afdc.live:9898/live/nktv.stream/playlist.m3u8"",
""online"":""true"",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36""
},

{
""name"": ""BOX FILM"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0Li45g.png"",
""imageScale"": ""fitStart"",
""url"": ""https://cdn6.goprimetime.info/feed/eI5rczhSQpWBcgOtqRLNWw/LC52/index.m3u8"",
""online"":""true"",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36""
},

{
""name"": ""7FLIX"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0L1o3g.png"",
""imageScale"": ""fitStart"",
""url"": ""https://cdn6.goprimetime.info/feed/eI5rczhSQpWBcgOtqRLNWw/LC5/index.m3u8"",
""online"":""true"",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36""
},

{
""name"": ""MOVIE WORLD1"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LKiyb.png"",
""imageScale"": ""fitStart"",
""url"": ""https://cdn6.goprimetime.info/feed/eI5rczhSQpWBcgOtqRLNWw/LC1/index.m3u8"",
""online"":""true"",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36""
},

{
""name"": ""MOVIE WORLD2"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LK6qk.png"",
""imageScale"": ""fitStart"",
""url"": ""https://cdn6.goprimetime.info/feed/eI5rczhSQpWBcgOtqRLNWw/LC53/index.m3u8"",
""online"":""true"",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36""
},

{
""name"": ""MOVIE WORLD3"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LZaRR.png"",
""imageScale"": ""fitStart"",
""url"": ""https://cdn6.goprimetime.info/feed/eI5rczhSQpWBcgOtqRLNWw/LC2/index.m3u8"",
""online"":""true"",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36""
},

{
""name"": ""CTB"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LZLDI.png"",
""imageScale"": ""fitStart"",
""url"": ""http://vip.login.in.th:1935/CTB/CTB/chunklist_w672486153.m3u8"",
""online"":"""",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36""
},
]
}"
DLJwNBN8,Untitled,sissou123,JavaScript,Wednesday 27th of December 2023 11:16:44 AM CDT,"Download The Complete JavaScript Course 2024: From Zero to Expert! Course For Free
The modern JavaScript course for everyone! Master JavaScript with projects, challenges and theory. Many courses in one!
for more:https://cuty.io/8LGEuFEgo7V"
e1w0Yz1E,scanner,Tbonetomtom,Lua,Wednesday 27th of December 2023 11:07:05 AM CDT,"local geoScan = peripheral.find(""geoScanner"")
num = 0
function scanForDiamondOre()
  local blocks = geoScan.scan(10)
  sleep(1)
    if type(blocks) ~= ""table"" then
       print(""Error: geoScanner.scan() did not return a table."".. type(blocks))
    
    else
      for _, block in pairs(blocks) do
        if block.name == ""minecraft:diamond_ore"" or block.name == ""minecraft:deepslate_diamond_ore"" then
          num = num + 1
          print(""Found diamond "".. num .."" ore at ("" .. block.x .. "", "" .. block.y .. "", "" .. block.z .. "")"")
        sleep(1)
          while true do
            local event, key = os.pullEvent('key"")
            if event == 'key' then
              break
            end
          end
        end
    end
   end
end
scanForDiamondOre()"
4muMBUxJ,"AoC 2023 day 10, Smalltalk",musifter,Smalltalk,Wednesday 27th of December 2023 10:53:40 AM CDT,"#!/usr/local/bin/gst -q

Symbol extend [
    value: arg              [^arg perform: self]
    value: arg1 value: arg2 [^arg1 perform: self with: arg2]
]

Object subclass: PipeGrid [
    | grid loop loopSize start dimX dimY |

    dirs := { (0 @ -1). (1 @ 0). (0 @ 1). (-1 @ 0) }.       "" NESW  1234 ""
    back := #(3 4 1 2).

    piece := Dictionary from: {
                 $| -> #(1 3).
                 $- -> #(2 4).

                 $L -> #(1 2).
                 $J -> #(1 4).
                 $F -> #(2 3).
                 $7 -> #(3 4).
                 $. -> #(0 0).
             }.

    PipeGrid class >> back: d [^back at: d]
    PipeGrid class >> dirs    [^dirs]

    PipeGrid class >> new: mapArray [
        ^(super new) init: mapArray
    ]

    init: mapArray [
        | sent startIdx startOuts startPiece |

        dimY := mapArray size + 2.
        dimX := mapArray first size + 2.

        "" Add sentinels to all sides ""
        sent := (1 to: dimX) inject: '' into: [:a :b | a, '.'].
        grid := sent, (mapArray collect: [:row | '.', row, '.']) join, sent.

        "" Find start ""
        startIdx := grid findFirst: [:chr | chr = $S].
        start := (startIdx \\ dimX - 1) @ (startIdx // dimX).

        "" Figure out starting piece ""
        startOuts := OrderedCollection new.
        dirs keysAndValuesDo: [:i :dir |
            | neigh |
            neigh := start + dir.
            ((piece at: (self at: neigh)) contains: [:out | out = (back at: i)]) ifTrue: [
                startOuts add: i
            ]
        ].

        startPiece := (piece select: [:outs |
            ((outs with: startOuts) conform: [:pair | pair first = pair second])
        ]) keys asArray first.

        grid at: startIdx put: startPiece.

        loop := Array new: grid size withAll: false.
        loopSize := 0.
        ^self
    ]

    "" Access to grid via Points ""
    at: pt           [^grid at: (pt y * dimX) + pt x + 1]
    at: pt put: chr  [^grid at: (pt y * dimX) + pt x + 1 put: chr]

    dimX         [^dimX]
    dimY         [^dimY]
    start        [^start]

    outs: pt     [^piece at: (grid at: (pt y * dimX) + pt x + 1)]
    loopSize     [^loopSize]

    mark: pt     [loopSize := loopSize + 1. ^loop at: (pt y * dimX) + pt x + 1 put: true]
    marked: pt   [^loop at: (pt y * dimX) + pt x + 1]

    "" Print grid on stream ""
    printOn: aStream [
        (1 to: grid size) do: [:y |
            aStream nextPut: (grid at: y).
            (y \\ dimX = 0) ifTrue: [aStream nl].
        ]
    ]
]

""
| Mainline
""
grid := PipeGrid new: stdin lines contents.
dir  := (grid outs: grid start) first.
pos  := grid start + (PipeGrid dirs at: dir).
grid mark: grid start.

part1 := 1.
[ pos ~= grid start ] whileTrue: [
    grid mark: pos.
    dir := ((grid outs: pos) reject: [:d | d = (PipeGrid back: dir)]) first.
    pos := pos + (PipeGrid dirs at: dir).
].

part2 := 0.
(1 to: grid dimY - 2) do: [:y |
    inside := false.
    (0 to: grid dimX - 1) do: [:x |
        pos := x @ y.
        (grid marked: pos) ifTrue: [
            chr := grid at: pos.
            (chr = $|) | (chr = $L) | (chr = $J) ifTrue: [inside := inside not].
        ] ifFalse: [
            inside ifTrue: [part2 := part2 + 1]
        ]
    ].
].

('Part 1: %1' % {grid loopSize / 2}) displayNl.
('Part 2: %1' % {part2}) displayNl."
AAvv4N2b,Django Unit Test,didogrigorov,Python,Wednesday 27th of December 2023 10:49:24 AM CDT,"from django.test import TestCase
from django.contrib.auth.models import User
from .models import Code  # Import your Code model from the appropriate location

class CodeModelTest(TestCase):

    def setUp(self):
        # Create a user for testing
        self.user = User.objects.create_user(username='testuser', password='testpassword')

    def test_question_max_length(self):
        # Create a Code instance with a question exceeding the maximum length
        code = Code.objects.create(
            user=self.user,
            question='a' * 10001,  # Exceeds the maximum length of 10000
            code_response='Some code response',
            language='Python'
        )

        # Attempt to save the Code instance
        with self.assertRaises(Exception) as context:
            code.save()

        # Check if the expected validation error message is in the error message
        self.assertIn('question', str(context.exception))
        self.assertIn('Ensure this value has at most 10000 characters', str(context.exception))

    def test_question_valid_length(self):
        # Create a Code instance with a valid question length
        code = Code.objects.create(
            user=self.user,
            question='a' * 5000,  # Valid length
            code_response='Some code response',
            language='Python'
        )

        # Save the Code instance
        code.save()

        # Retrieve the saved instance from the database
        saved_code = Code.objects.get(pk=code.pk)

        # Check if the question field matches the original value
        self.assertEqual(saved_code.question, 'a' * 5000)
"
PGVzkDpS,ทดลอง,pookpookpook,GetText,Wednesday 27th of December 2023 10:47:59 AM CDT,"{
         ""name"": ""ทีวีช่องหนัง"",
         ""image"": ""https://i.postimg.cc/mrrbsRCf/movie.png"",
         ""stations"": [ 
{
""name"": ""ROCK ENTERTAINMENT"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LQLAE.png"", 
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/rockactionhd.m3u8"",
""referer"": ""https://wacth.tv"",
""userAgent"" : ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0; .NET4.0C; .NET4.0E; InfoPath.3)"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"":""TRUE MOVIEHITE"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LEbsz.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/sd-moviehits.stream/playlist.m3u8"",
""referer"": ""https://freetvdd.com/"",
""info"": ""ทรูวิชั่นส์"",
""online"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33""},

{
""name"": ""TRUE SERIES"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LE2QI.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/sd-series.stream/playlist.m3u8"",
""info"": ""ช่องหนังทรูวิชั่นส์"",
""referer"": ""https://freetvdd.com"",
""online"": ""true""},

{
""name"": ""TRUE FILMASIA"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LOoCg.png"", 
""url"": ""https://streaming.livescorethai.net/iptv/sd-filmasia.stream/playlist.m3u8"",
""info"": ""ช่องหนังทรูวิชั่นส์"",
""referer"": ""https://freetvdd.com/"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"",
""online"": ""true""},

{
""name"":""TRUE THAI FILM"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LOLh0.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/sd-thaifilm.stream/chunks.m3u8"",
""referer"": ""https://streaming.livescorethai.net"",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 13_1_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 OPT/3.2.17"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
      ""online"": ""true""},

{
""name"":""3BB ASIAN"",
""info"":""ทีวีช่องหนัง"",
""image"":""https://sv1.picz.in.th/images/2023/12/27/d0Jjwif.png"",
""url"":""https://tv.realmetx.repl.co/Ch/movie/3bbasian.html"",
        ""online"":""true"",
        ""info"":"""",
""embed"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"":""MONO PLUS"",
""image"":""https://sv1.picz.in.th/images/2023/12/27/d0Jjcwz.png"",
""url"":""https://tv.realmetx.repl.co/Ch/movie/monoplus.html"",
        ""online"":""true"",
              ""info"":"""",
""embed"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""CCM"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0Jjgo8.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/sd-celestial.stream/playlist.m3u8"",
""referer"": ""https://streaming.livescorethai.net"",
       ""online"":""true"",
          ""info"":"""",
""userAgent"": ""ExoPlayerDemo/4.0.02019 (Linux;Android 12) ExoPlayerLib/1.5.13"", ""playInNatPlayer"": ""true"",
""epgId"": """"
},

{
""name"": ""3BB SPORT"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0JjQ5u.png"",
""imageScale"": ""fitStart"",
""url"": ""https://unculled-stability.000webhostapp.com/play_video.php?id=7"",
""referer"": """",
       ""online"":"""",
          ""info"":"""",
""userAgent"": ""ExoPlayerDemo/4.0.02019 (Linux;Android 12) ExoPlayerLib/1.5.13"", ""embed"": ""true"",
""epgId"": """"
},

{
""name"": ""TVN"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LtDyn.png"",
""url"": ""https://streaming.livescorethai.net/iptv/hd-tvn.stream/playlist.m3u8"",
        ""online"":""true"",
        ""info"":"""",
""userAgent"": ""ExoPlayerDemo/4.0.02019 (Linux;Android 12) ExoPlayerLib/1.5.13"", ""embed"": """",
""referer"": ""https://streaming.livescorethai.net/"",
},

{
""name"": ""FW Movie"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LtLB8.png"",
""imageScale"": ""fitStart"",
""url"": ""https://www.inwiptv.com/player_demo.php?channel=95262"",
""isHost"": ""true"",
        ""online"":""true"",
""referer"": ""https://www.inwiptv.com"",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""FW Series"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0JogB0.png"",
""imageScale"": ""fitStart"",
""url"": ""https://www.inwiptv.com/player_demo.php?channel=94898"",
""isHost"": ""true"",
""online"":""true"",
        ""info"":"""",
""referer"": ""https://www.inwiptv.com"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""FW cartoon"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0JoiUu.png"",
""imageScale"": ""fitStart"",
""url"": ""https://www.inwiptv.com/player_demo.php?channel=89782"",
""online"": ""true"",
""referer"": ""https://www.inwiptv.com"",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""FW Comedy"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0JoR8Z.png"",
""imageScale"": ""fitStart"",
""url"": ""https://www.inwiptv.com/player_demo.php?channel=89781"",
""online"": ""true"",
""referer"": ""https://www.inwiptv.com"",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""FW Sports"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LcRaq.png"",
""imageScale"": ""fitStart"",
""url"": ""https://www.inwiptv.com/player_demo.php?channel=92941"",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""online"": ""true""},

{
""name"": ""NKTV"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LwaRN.png"",
""imageScale"": ""fitStart"",
""url"": ""http://sv1.afdc.live:9898/live/nktv.stream/playlist.m3u8"",
""online"":""true"",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36""
},

{
""name"": ""BOX FILM"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0Li45g.png"",
""imageScale"": ""fitStart"",
""url"": ""https://cdn6.goprimetime.info/feed/eI5rczhSQpWBcgOtqRLNWw/LC52/index.m3u8"",
""online"":""true"",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36""
},

{
""name"": ""7FLIX"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0L1o3g.png"",
""imageScale"": ""fitStart"",
""url"": ""https://cdn6.goprimetime.info/feed/eI5rczhSQpWBcgOtqRLNWw/LC5/index.m3u8"",
""online"":""true"",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36""
},

{
""name"": ""MOVIE WORLD1"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LKiyb.png"",
""imageScale"": ""fitStart"",
""url"": ""https://cdn6.goprimetime.info/feed/eI5rczhSQpWBcgOtqRLNWw/LC1/index.m3u8"",
""online"":""true"",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36""
},

{
""name"": ""MOVIE WORLD2"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LK6qk.png"",
""imageScale"": ""fitStart"",
""url"": ""https://cdn6.goprimetime.info/feed/eI5rczhSQpWBcgOtqRLNWw/LC53/index.m3u8"",
""online"":""true"",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36""
},

{
""name"": ""MOVIE WORLD3"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LZaRR.png"",
""imageScale"": ""fitStart"",
""url"": ""https://cdn6.goprimetime.info/feed/eI5rczhSQpWBcgOtqRLNWw/LC2/index.m3u8"",
""online"":""true"",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36""
},

{
""name"": ""CTB"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LZLDI.png"",
""imageScale"": ""fitStart"",
""url"": ""http://vip.login.in.th:1935/CTB/CTB/chunklist_w672486153.m3u8"",
""online"":"""",
        ""info"":"""",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36""
},
]
}"
PvJnH8Dy,G2A.com Refund Exploit Dec 2023,G2ARefundExploit,GetText,Wednesday 27th of December 2023 10:24:31 AM CDT,"G2A.com refund exploit updated guide 
Any item for free on G2A.com such as Amazon, Steam, and any other gift cards.

PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit.pdf

Working as of 
27 December 2023

832343"
8JYm0FEz,Untitled,RJNewbyte,MySQL,Wednesday 27th of December 2023 10:04:07 AM CDT,"#EJERCICIO 1

/*Antes de nada,crea la base de datos en la que se incluirán las diversas 
tablas que se piden con el comando:sql CREATE DATABASE tienda;*/

CREATE DATABASE tienda;

/*Tras la creación de la base de datos, utiliza el menú superior de DBeaver
o el comando sql USE tienda;*/

USE tienda;

/*TABLA FAMILIA => Contiene las familias a las que pertenecen los productos, 
como por ejemplo ordenadores, impresoras,etc.

Nombre Columna	Descripción									Tipo dato						Restricciones
Codfamilia		Código que distingue una familia de otra	Numérico de 3 dígitos			Clave primaria
Denofamilia		Denominación de la familia					Alfanumérico de 50 caracteres	No puede haber dos familias con la misma 
																							denominación.
																							Debe tener contenido
*/

CREATE TABLE FAMILIA(
	Codfamilia SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY, -- Con TINYINT UNSIGNED solo llegamos al valor 255, al solicitar 3 dígitos entiendo que necesitamos poder introducir hasta el 999.
	Denofamilia VARCHAR(50) NOT NULL UNIQUE
);

/*TABLA PRODUCTO => contendrá información general sobre los productos que distribuye 
la empresa a las tiendas.

Nombre Columna	Descripción									Tipo dato						Restricciones
Codproducto		Código que distingue un producto de otro	Numérico de 5 dígitos			Clave primaria
Denoproducto	Denominación del producto					Alfanumérico de 20 caracteres	Debe tener contenido.
Descripcion		Descripción del producto					Alfanumérico de 100 caracteres
PrecioBase		Precio base del producto					Numérico de 8 dígitos dos de 	Mayor que 0. Debe tener contenido.
															ellos decimales
PorcReposición	Porcentaje de reposición aplicado a ese 	Numérico de 3 dígitos			Mayor que 0.
				producto. Se utilizará para aplicar a las 
				unidades mínimas y obtener el número 
				total de unidades a reponer cuando el stock 
				esté bajo mínimo
UnidadesMinimas	Unidades mínimas recomendables en almacen	Numérico de 4 dígitos			Mayor que 0. Debe tener contenido.
Codfamilia		Código de la familia a la que pertenece 	Numérico de 3 dígitos			Clave ajena, referencia a Codfamilia 
				el producto																	de la tabla FAMILIA. Debe tener contenido.
*/

CREATE TABLE PRODUCTO(
	Codproducto MEDIUMINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	Denoproducto VARCHAR(20) NOT NULL,
	Descripcion VARCHAR(100),
	PrecioBase DECIMAL(8,2) NOT NULL CHECK (PrecioBase > 0),
	PorcReposicion SMALLINT UNSIGNED CHECK (PorcReposicion > 0),
	UnidadesMinimas SMALLINT UNSIGNED NOT NULL  CHECK (UnidadesMinimas > 0),
	Codfamilia SMALLINT UNSIGNED NOT NULL,
	FOREIGN KEY (CodFamilia) REFERENCES FAMILIA(CodFamilia)
);

/*TABLA TIENDA => contendrá información básica sobre las tiendas que distribuyen los productos. 

Nombre Columna	Descripción									Tipo dato						Restricciones
Codtienda		Código que distingue una tienda de otra.	Numérico de 3 dígitos			Clave primaria
Denotienda		Denominación o nombre de la tienda.			Alfanumérico de 20 caracteres	Debe tener contenido.
Telefono		Teléfono de la tienda						Alfanumérico de 11 caracteres
CodigoPostal	Codigo Postal donde se ubica la tienda		Alfanumérico de 5 caracteres 	Debe tener contenido.
Provincia		Provincia donde se ubica la tienda			Alfanumérico de 5 caracteres 	Debe tener contenido.
*/

CREATE TABLE TIENDA(
	Codtienda SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	Denotienda VARCHAR(20) NOT NULL,
	Telefono VARCHAR(11),
	CodigoPostal VARCHAR(5) NOT NULL,
	Provincia VARCHAR(5) NOT NULL
);

/*TABLA STOCK => Contendrá para cada tienda el número de unidades disponibles de cada producto. La clave primaria está formada por la
concatenación de los campos Codtienda y Codproducto.

Nombre Columna	Descripción									Tipo dato						Restricciones
Codtienda		Código de la tienda.						Numérico de 3 dígitos			Clave primaria:(Codtienda,Codproducto)Permite 
																							que un producto pueda aparecer en varias tiendas, 
																							y que en una tienda puedan haber varios productos.
																							Clave ajena, referencia a Codtienda de la tabla 
																							tienda. Debe tener contenido.
Codproducto		Códigodelproducto							Numérico de 5 dígitos			Clave ajena, referencia a Codproducto de la tabla
																							PRODUCTO. Debe tener contenido.
Unidades		Unidades de ese producto en esa tienda		Numérico de 6 dígitos			Mayor o igual a 0. Debe tener contenido
*/

CREATE TABLE STOCK(
	Codtienda SMALLINT UNSIGNED NOT NULL,
	Codproducto MEDIUMINT UNSIGNED NOT NULL,
	Unidades MEDIUMINT UNSIGNED NOT NULL CHECK(Unidades >= 0),
	PRIMARY KEY (Codtienda, Codproducto),
	FOREIGN KEY (Codtienda) REFERENCES TIENDA(Codtienda),
	FOREIGN KEY (Codproducto) REFERENCES PRODUCTO(Codproducto)
);"
xBJTxtYp,ทดลอง,pookpookpook,GetText,Wednesday 27th of December 2023 09:42:11 AM CDT,"{
         ""name"": ""ทีวีช่องหนัง"",
         ""image"": ""https://i.postimg.cc/mrrbsRCf/movie.png"",
         ""stations"": [ 



{
""name"": ""HBO HD"",
""image"": ""https://i.ibb.co/6v0dDhD/vbs.png"",
""imageScale"": ""fitStart"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbo.html"",
""userAgent"" : ""android"",
        ""info"":"""",
        ""embed"":""true"",
        ""online"":""true""},

{
""name"": ""HBO HITS"",
""image"": ""https://i.ibb.co/vP3hkjH/hhit.png"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbohits.html"",
        ""info"":"""",
                ""embed"":""true"",
        ""online"":""true""},
        
{
""name"": ""HBO FAMILY"",
""image"": ""https://i.ibb.co/F8P2mxK/cccc.png"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbofamily.html"",
""referer"": """",
""userAgent"" : ""android"",           
        ""embed"":""true"",
        ""isHost"":"""",
        ""info"":"""",
        ""online"":""true""},

{
""name"":""HBOSIGNATURE"",
""image"":""https://i.ibb.co/gM7NfQ4/SS.png"",
""url"":""https://tv.realmetx.repl.co/Ch/movie/hbosignature.html"",
""embed"" : ""true"",
        ""info"":"""",
                ""online"":""true""},
                
{
""name"":""CINEMAX HD"",
""image"":""https://i.ibb.co/tz61VMJ/CINE.png"",
""url"":""https://tv.realmetx.repl.co/Ch/movie/cinemax.html"",
        ""info"":"""",
                ""online"":""true"",
""epgId"": ""Cinemax.th"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""embed"": ""true""},

{
""name"":""WANER TV"",
""image"":""https://sv1.picz.in.th/images/2023/12/27/d0LirkS.png"",
""url"":""https://unculled-stability.000webhostapp.com/play_video.php?id=15"",
        ""online"":""true"",
              ""info"":"""",
""embed"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""AXN HD"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0Lx3jJ.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/hd-axn.stream/playlist.m3u8"",
""referer"": ""https://freetvdd.com/"",
""userAgent"" : ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0; .NET4.0C; .NET4.0E; InfoPath.3)"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"": ""PARAMOUNT"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0L5Khu.png"",
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/paramountnetwork.m3u8"",
""referer"": ""https://wacth.tv/"",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 13_1_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 OPT/3.2.17"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"": ""TRUE FILMHD1"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LRQ4g.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/hd-tfilm.stream/playlist.m3u8"",
""referer"": ""https://freetvdd.com"",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 13_1_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 OPT/3.2.17"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"": "" TRUE FILMHD2"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LRqn2.png"",
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/truefilm2.m3u8"",
""referer"": ""https://wacth.tv"",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 9_3_2 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13F69 Safari/601.1"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},


{
""name"": ""HITS MOVIES"",
""image"":""https://sv1.picz.in.th/images/2023/12/27/d0LRysE.png"",
""url"":""https://unculled-stability.000webhostapp.com/play_video.php?id=16"",
        ""online"":""true"",
              ""info"":"""",
""embed"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""ROCK ACTION HD"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LxufS.png"", 
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/rockactionhd.m3u8"",
""referer"": ""https://wacth.tv"",
""userAgent"" : ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0; .NET4.0C; .NET4.0E; InfoPath.3)"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

]
}"
Uvh87bYb,cyber alliance css draft 9,Anonx0,CSS,Wednesday 27th of December 2023 09:38:14 AM CDT,":root {
  --blood: #ef5956;
  --crimson: #d33131;
  --light: #ffffff;
}

html {
  font: 16px/1 system-ui;
  height: 100%;
}

body {
  margin: 0;
  padding: 5rem;
}

header {}

main {}

footer {}

@media (min-width: 1000px) {
  html {
    background: var(--blood);
    display: grid;
    justify-content: center;
  }

  body {
    background: var(--light);
    border-left: .2rem solid var(--crimson);
    border-right: .2rem solid var(--crimson);
    box-sizing: border-box;
    width: 1000px;
  }

  header {}

  main {}

  footer {}
}"
U4C0hN5m,ทดลอง,pookpookpook,GetText,Wednesday 27th of December 2023 09:37:48 AM CDT,"{
         ""name"": ""ทีวีช่องหนัง"",
         ""image"": ""https://i.postimg.cc/mrrbsRCf/movie.png"",
         ""stations"": [ 



{
""name"": ""HBO HD"",
""image"": ""https://i.ibb.co/6v0dDhD/vbs.png"",
""imageScale"": ""fitStart"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbo.html"",
""userAgent"" : ""android"",
        ""info"":"""",
        ""embed"":""true"",
        ""online"":""true""},

{
""name"": ""HBO HITS"",
""image"": ""https://i.ibb.co/vP3hkjH/hhit.png"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbohits.html"",
        ""info"":"""",
                ""embed"":""true"",
        ""online"":""true""},
        
{
""name"": ""HBO FAMILY"",
""image"": ""https://i.ibb.co/F8P2mxK/cccc.png"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbofamily.html"",
""referer"": """",
""userAgent"" : ""android"",           
        ""embed"":""true"",
        ""isHost"":"""",
        ""info"":"""",
        ""online"":""true""},

{
""name"":""HBOSIGNATURE"",
""image"":""https://i.ibb.co/gM7NfQ4/SS.png"",
""url"":""https://tv.realmetx.repl.co/Ch/movie/hbosignature.html"",
""embed"" : ""true"",
        ""info"":"""",
                ""online"":""true""},
                
{
""name"":""CINEMAX HD"",
""image"":""https://i.ibb.co/tz61VMJ/CINE.png"",
""url"":""https://tv.realmetx.repl.co/Ch/movie/cinemax.html"",
        ""info"":"""",
                ""online"":""true"",
""epgId"": ""Cinemax.th"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""embed"": ""true""},

{
""name"":""WANER TV"",
""image"":""https://sv1.picz.in.th/images/2023/12/27/d0LirkS.png"",
""url"":""https://unculled-stability.000webhostapp.com/play_video.php?id=15"",
        ""online"":""true"",
              ""info"":"""",
""embed"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""AXN HD"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0Lx3jJ.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/hd-axn.stream/playlist.m3u8"",
""referer"": ""https://freetvdd.com/"",
""userAgent"" : ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0; .NET4.0C; .NET4.0E; InfoPath.3)"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"": ""PARAMOUNT"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0L5Khu.png"",
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/paramountnetwork.m3u8"",
""referer"": ""https://wacth.tv/"",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 13_1_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 OPT/3.2.17"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"": ""TRUE FILMHD1"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LRQ4g.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/hd-tfilm.stream/playlist.m3u8"",
""referer"": ""https://freetvdd.com"",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 13_1_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 OPT/3.2.17"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"": "" TRUE FILMHD2"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LRqn2.png"",
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/truefilm2.m3u8"",
""referer"": """",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 9_3_2 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13F69 Safari/601.1"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},


{
""name"": ""HITS MOVIES"",
""image"":""https://sv1.picz.in.th/images/2023/12/27/d0LRysE.png"",
""url"":""https://unculled-stability.000webhostapp.com/play_video.php?id=16"",
        ""online"":""true"",
              ""info"":"""",
""embed"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""ROCK ACTION HD"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LxufS.png"", 
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/rockactionhd.m3u8"",
""referer"": ""https://wacth.tv"",
""userAgent"" : ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0; .NET4.0C; .NET4.0E; InfoPath.3)"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

]
}"
3vmHT0Hq,ทดลอง,pookpookpook,GetText,Wednesday 27th of December 2023 09:35:52 AM CDT,"{
         ""name"": ""ทีวีช่องหนัง"",
         ""image"": ""https://i.postimg.cc/mrrbsRCf/movie.png"",
         ""stations"": [ 



{
""name"": ""HBO HD"",
""image"": ""https://i.ibb.co/6v0dDhD/vbs.png"",
""imageScale"": ""fitStart"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbo.html"",
""userAgent"" : ""android"",
        ""info"":"""",
        ""embed"":""true"",
        ""online"":""true""},

{
""name"": ""HBO HITS"",
""image"": ""https://i.ibb.co/vP3hkjH/hhit.png"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbohits.html"",
        ""info"":"""",
                ""embed"":""true"",
        ""online"":""true""},
        
{
""name"": ""HBO FAMILY"",
""image"": ""https://i.ibb.co/F8P2mxK/cccc.png"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbofamily.html"",
""referer"": """",
""userAgent"" : ""android"",           
        ""embed"":""true"",
        ""isHost"":"""",
        ""info"":"""",
        ""online"":""true""},

{
""name"":""HBOSIGNATURE"",
""image"":""https://i.ibb.co/gM7NfQ4/SS.png"",
""url"":""https://tv.realmetx.repl.co/Ch/movie/hbosignature.html"",
""embed"" : ""true"",
        ""info"":"""",
                ""online"":""true""},
                
{
""name"":""CINEMAX HD"",
""image"":""https://i.ibb.co/tz61VMJ/CINE.png"",
""url"":""https://tv.realmetx.repl.co/Ch/movie/cinemax.html"",
        ""info"":"""",
                ""online"":""true"",
""epgId"": ""Cinemax.th"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""embed"": ""true""},

{
""name"":""WANER TV"",
""image"":""https://sv1.picz.in.th/images/2023/12/27/d0LirkS.png"",
""url"":""https://unculled-stability.000webhostapp.com/play_video.php?id=15"",
        ""online"":""true"",
              ""info"":"""",
""embed"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""AXN HD"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0Lx3jJ.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/hd-axn.stream/playlist.m3u8"",
""referer"": ""https://freetvdd.com/"",
""userAgent"" : ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0; .NET4.0C; .NET4.0E; InfoPath.3)"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"": ""PARAMOUNT"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0L5Khu.png"",
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/paramountnetwork.m3u8"",
""referer"": ""https://wacth.tv/"",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 13_1_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 OPT/3.2.17"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""}

{
""name"": ""TRUE FILMHD1"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LRQ4g.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/hd-tfilm.stream/playlist.m3u8"",
""referer"": ""https://freetvdd.com"",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 13_1_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 OPT/3.2.17"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"": "" TRUE FILMHD2"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LRqn2.png"",
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/truefilm2.m3u8"",
""referer"": """",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 9_3_2 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13F69 Safari/601.1"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},


{
""name"": ""HITS MOVIES"",
""image"":""https://sv1.picz.in.th/images/2023/12/27/d0LRysE.png"",
""url"":""https://unculled-stability.000webhostapp.com/play_video.php?id=16"",
        ""online"":""true"",
              ""info"":"""",
""embed"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""ROCK ACTION HD"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LxufS.png"", 
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/rockactionhd.m3u8"",
""referer"": ""https://wacth.tv"",
""userAgent"" : ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0; .NET4.0C; .NET4.0E; InfoPath.3)"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

]
}"
Z0wF6NFy,ทดลอง,pookpookpook,GetText,Wednesday 27th of December 2023 09:33:30 AM CDT,"{
         ""name"": ""ทีวีช่องหนัง"",
         ""image"": ""https://i.postimg.cc/mrrbsRCf/movie.png"",
         ""stations"": [ 



{
""name"": ""HBO HD"",
""image"": ""https://i.ibb.co/6v0dDhD/vbs.png"",
""imageScale"": ""fitStart"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbo.html"",
""userAgent"" : ""android"",
        ""info"":"""",
        ""embed"":""true"",
        ""online"":""true""},

{
""name"": ""HBO HITS"",
""image"": ""https://i.ibb.co/vP3hkjH/hhit.png"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbohits.html"",
        ""info"":"""",
                ""embed"":""true"",
        ""online"":""true""},
        
{
""name"": ""HBO FAMILY"",
""image"": ""https://i.ibb.co/F8P2mxK/cccc.png"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbofamily.html"",
""referer"": """",
""userAgent"" : ""android"",           
        ""embed"":""true"",
        ""isHost"":"""",
        ""info"":"""",
        ""online"":""true""},

{
""name"":""HBOSIGNATURE"",
""image"":""https://i.ibb.co/gM7NfQ4/SS.png"",
""url"":""https://tv.realmetx.repl.co/Ch/movie/hbosignature.html"",
""embed"" : ""true"",
        ""info"":"""",
                ""online"":""true""},
                
{
""name"":""CINEMAX HD"",
""image"":""https://i.ibb.co/tz61VMJ/CINE.png"",
""url"":""https://tv.realmetx.repl.co/Ch/movie/cinemax.html"",
        ""info"":"""",
                ""online"":""true"",
""epgId"": ""Cinemax.th"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""embed"": ""true""},

{
""name"":""WANER TV"",
""image"":""https://sv1.picz.in.th/images/2023/12/27/d0LirkS.png"",
""url"":""https://unculled-stability.000webhostapp.com/play_video.php?id=15"",
        ""online"":""true"",
              ""info"":"""",
""embed"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

}
""name"": ""AXN HD"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0Lx3jJ.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/hd-axn.stream/playlist.m3u8"",
""referer"": ""https://freetvdd.com/"",
""userAgent"" : ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0; .NET4.0C; .NET4.0E; InfoPath.3)"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"": ""PARAMOUNT"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0L5Khu.png"",
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/paramountnetwork.m3u8"",
""referer"": ""https://wacth.tv/"",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 13_1_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 OPT/3.2.17"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""}

{
""name"": ""TRUE FILMHD1"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LRQ4g.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/hd-tfilm.stream/playlist.m3u8"",
""referer"": ""https://freetvdd.com"",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 13_1_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 OPT/3.2.17"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"": "" TRUE FILMHD2"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LRqn2.png"",
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/truefilm2.m3u8"",
""referer"": """",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 9_3_2 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13F69 Safari/601.1"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},


{
""name"": ""HITS MOVIES"",
""image"":""https://sv1.picz.in.th/images/2023/12/27/d0LRysE.png"",
""url"":""https://unculled-stability.000webhostapp.com/play_video.php?id=16"",
        ""online"":""true"",
              ""info"":"""",
""embed"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""ROCK ACTION HD"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LxufS.png"", 
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/rockactionhd.m3u8"",
""referer"": ""https://wacth.tv"",
""userAgent"" : ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0; .NET4.0C; .NET4.0E; InfoPath.3)"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

]
}"
jsRxuwWN,ทดลอง,pookpookpook,GetText,Wednesday 27th of December 2023 09:26:54 AM CDT,"{
         ""name"": ""ทีวีช่องหนัง"",
         ""image"": ""https://i.postimg.cc/mrrbsRCf/movie.png"",
         ""stations"": [ 



{
""name"": ""HBO HD"",
""image"": ""https://i.ibb.co/6v0dDhD/vbs.png"",
""imageScale"": ""fitStart"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbo.html"",
""userAgent"" : ""android"",
        ""info"":"""",
        ""embed"":""true"",
        ""online"":""true""},

{
""name"": ""HBO HITS"",
""image"": ""https://i.ibb.co/vP3hkjH/hhit.png"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbohits.html"",
        ""info"":"""",
                ""embed"":""true"",
        ""online"":""true""},
        
{
""name"": ""HBO FAMILY"",
""image"": ""https://i.ibb.co/F8P2mxK/cccc.png"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbofamily.html"",
""referer"": """",
""userAgent"" : ""android"",           
        ""embed"":""true"",
        ""isHost"":"""",
        ""info"":"""",
        ""online"":""true""},

{
""name"":""HBOSIGNATURE"",
""image"":""https://i.ibb.co/gM7NfQ4/SS.png"",
""url"":""https://tv.realmetx.repl.co/Ch/movie/hbosignature.html"",
""embed"" : ""true"",
        ""info"":"""",
                ""online"":""true""},
                
{
""name"":""CINEMAX HD"",
""image"":""https://i.ibb.co/tz61VMJ/CINE.png"",
""url"":""https://tv.realmetx.repl.co/Ch/movie/cinemax.html"",
        ""info"":"""",
                ""online"":""true"",
""epgId"": ""Cinemax.th"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""embed"": ""true""},

{
""name"":""WANER TV"",
""image"":""https://sv1.picz.in.th/images/2023/12/27/d0LirkS.png"",
""url"":""https://unculled-stability.000webhostapp.com/play_video.php?id=15"",
        ""online"":""true"",
              ""info"":"""",
""embed"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""TRUE FILMHD1"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LRQ4g.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/hd-tfilm.stream/playlist.m3u8"",
""referer"": ""https://freetvdd.com"",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 13_1_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 OPT/3.2.17"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"": "" TRUE FILMHD2"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LRqn2.png"",
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/truefilm2.m3u8"",
""referer"": """",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 9_3_2 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13F69 Safari/601.1"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},


{
""name"": ""HITS MOVIES"",
""image"":""https://sv1.picz.in.th/images/2023/12/27/d0LRysE.png"",
""url"":""https://unculled-stability.000webhostapp.com/play_video.php?id=16"",
        ""online"":""true"",
              ""info"":"""",
""embed"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""ROCK ACTION HD"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LxufS.png"", 
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/rockactionhd.m3u8"",
""referer"": ""https://wacth.tv"",
""userAgent"" : ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0; .NET4.0C; .NET4.0E; InfoPath.3)"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

]
}"
EgGZ4gsh,ทดลอง,pookpookpook,GetText,Wednesday 27th of December 2023 09:19:50 AM CDT,"{
         ""name"": ""ทีวีช่องหนัง"",
         ""image"": ""https://i.postimg.cc/mrrbsRCf/movie.png"",
         ""stations"": [ 



{
""name"": ""HBO HD"",
""image"": ""https://i.ibb.co/6v0dDhD/vbs.png"",
""imageScale"": ""fitStart"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbo.html"",
""userAgent"" : ""android"",
        ""info"":"""",
        ""embed"":""true"",
        ""online"":""true""},

{
""name"": ""HBO HITS"",
""image"": ""https://i.ibb.co/vP3hkjH/hhit.png"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbohits.html"",
        ""info"":"""",
                ""embed"":""true"",
        ""online"":""true""},
        
{
""name"": ""HBO FAMILY"",
""image"": ""https://i.ibb.co/F8P2mxK/cccc.png"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbofamily.html"",
""referer"": """",
""userAgent"" : ""android"",           
        ""embed"":""true"",
        ""isHost"":"""",
        ""info"":"""",
        ""online"":""true""},

{
""name"":""HBOSIGNATURE"",
""image"":""https://i.ibb.co/gM7NfQ4/SS.png"",
""url"":""https://tv.realmetx.repl.co/Ch/movie/hbosignature.html"",
""embed"" : ""true"",
        ""info"":"""",
                ""online"":""true""},
                
{
""name"":""CINEMAX HD"",
""image"":""https://i.ibb.co/tz61VMJ/CINE.png"",
""url"":""https://tv.realmetx.repl.co/Ch/movie/cinemax.html"",
        ""info"":"""",
                ""online"":""true"",
""epgId"": ""Cinemax.th"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""embed"": ""true""},

{
""name"":""WANER TV"",
""image"":""https://sv1.picz.in.th/images/2023/12/27/d0LirkS.png"",
""url"":""https://unculled-stability.000webhostapp.com/play_video.php?id=15"",
        ""online"":""true"",
              ""info"":"""",
""embed"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},


{
""name"": ""HITS MOVIES"",
""image"":""https://sv1.picz.in.th/images/2023/12/27/d0LRysE.png"",
""url"":""https://unculled-stability.000webhostapp.com/play_video.php?id=16"",
        ""online"":""true"",
              ""info"":"""",
""embed"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""ROCK ACTION HD"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LxufS.png"", 
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/rockactionhd.m3u8"",
""referer"": ""https://wacth.tv"",
""userAgent"" : ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0; .NET4.0C; .NET4.0E; InfoPath.3)"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

]
}"
YLuGttEn,ทดลอง,pookpookpook,GetText,Wednesday 27th of December 2023 09:18:29 AM CDT,"{
         ""name"": ""ทีวีช่องหนัง"",
         ""image"": ""https://i.postimg.cc/mrrbsRCf/movie.png"",
         ""stations"": [ 



{
""name"": ""HBO HD"",
""image"": ""https://i.ibb.co/6v0dDhD/vbs.png"",
""imageScale"": ""fitStart"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbo.html"",
""userAgent"" : ""android"",
        ""info"":"""",
        ""embed"":""true"",
        ""online"":""true""},

{
""name"": ""HBO HITS"",
""image"": ""https://i.ibb.co/vP3hkjH/hhit.png"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbohits.html"",
        ""info"":"""",
                ""embed"":""true"",
        ""online"":""true""},
        
{
""name"": ""HBO FAMILY"",
""image"": ""https://i.ibb.co/F8P2mxK/cccc.png"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbofamily.html"",
""referer"": """",
""userAgent"" : ""android"",           
        ""embed"":""true"",
        ""isHost"":"""",
        ""info"":"""",
        ""online"":""true""},

{
""name"":""HBOSIGNATURE"",
""image"":""https://i.ibb.co/gM7NfQ4/SS.png"",
""url"":""https://tv.realmetx.repl.co/Ch/movie/hbosignature.html"",
""embed"" : ""true"",
        ""info"":"""",
                ""online"":""true""},
                
{
""name"":""CINEMAX HD"",
""image"":""https://i.ibb.co/tz61VMJ/CINE.png"",
""url"":""https://tv.realmetx.repl.co/Ch/movie/cinemax.html"",
        ""info"":"""",
                ""online"":""true"",
""epgId"": ""Cinemax.th"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""embed"": ""true""},

{
""name"":""WANER TV"",
""image"":""https://sv1.picz.in.th/images/2023/12/27/d0LirkS.png"",
""url"":""https://unculled-stability.000webhostapp.com/play_video.php?id=15"",
        ""online"":""true"",
              ""info"":"""",
""embed"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

}
""name"": ""AXN HD"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0Lx3jJ.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/hd-axn.stream/playlist.m3u8?wmsAuthSign=c2VydmVyX3RpbWU9My8xMC8yMDIwIDY6Mjg6MDEgQU0maGFzaF92YWx1ZT0xY0RZT3RydjNwdk9JRjROcGhJbU1RPT0mdmFsaWRtaW51dGVzPTIwJnN0cm1fbGVuPTIw"",
""referer"": ""https://streaming.livescorethai.net"",
""userAgent"" : ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0; .NET4.0C; .NET4.0E; InfoPath.3)"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"": ""PARAMOUNT"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0L5Khu.png"",
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/paramountnetwork.m3u8"",
""referer"": ""https://wacth.tv/"",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 13_1_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 OPT/3.2.17"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},
{
""name"": ""TRUE FILMHD1"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LRQ4g.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/hd-tfilm.stream/playlist.m3u8"",
""referer"": ""https://freetvdd.com"",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 13_1_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 OPT/3.2.17"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"": "" TRUE FILMHD2"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LRqn2.png"",
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/truefilm2.m3u8"",
""referer"": """",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 9_3_2 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13F69 Safari/601.1"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"": ""HITS MOVIES"",
""image"":""https://sv1.picz.in.th/images/2023/12/27/d0LRysE.png"",
""url"":""https://unculled-stability.000webhostapp.com/play_video.php?id=16"",
        ""online"":""true"",
              ""info"":"""",
""embed"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""ROCK ACTION HD"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LxufS.png"", 
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/rockactionhd.m3u8"",
""referer"": ""https://wacth.tv"",
""userAgent"" : ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0; .NET4.0C; .NET4.0E; InfoPath.3)"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

]
}"
rwRCeQE6,pciard failed to start,iconoclasthero,Bash,Wednesday 27th of December 2023 09:12:49 AM CDT,"Traceback (most recent call last):
  File ""/usr/bin/picard"", line 4, in <module>
    from picard.tagger import main
  File ""/usr/lib/picard/picard/tagger.py"", line 63, in <module>
    from PyQt5 import (
ImportError: /usr/local/lib/python3.10/dist-packages/PyQt5-5.15.10-py3.10-linux-x86_64.egg/PyQt5/QtCore.abi3.so: undefined symbol: _ZdaPvm, version Qt_5

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""/usr/bin/picard"", line 10, in <module>
    crash_handler()
  File ""/usr/lib/picard/picard/__init__.py"", line 108, in crash_handler
    from PyQt5.QtCore import (
ImportError: /usr/local/lib/python3.10/dist-packages/PyQt5-5.15.10-py3.10-linux-x86_64.egg/PyQt5/QtCore.abi3.so: undefined symbol: _ZdaPvm, version Qt_5

"
jMr98GvC,ทดลอง,pookpookpook,GetText,Wednesday 27th of December 2023 09:09:43 AM CDT,"{
         ""name"": ""ทีวีช่องหนัง"",
         ""image"": ""https://i.postimg.cc/mrrbsRCf/movie.png"",
         ""stations"": [ 



{
""name"": ""HBO HD"",
""image"": ""https://i.ibb.co/6v0dDhD/vbs.png"",
""imageScale"": ""fitStart"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbo.html"",
""userAgent"" : ""android"",
        ""info"":"""",
        ""embed"":""true"",
        ""online"":""true""},

{
""name"": ""HBO HITS"",
""image"": ""https://i.ibb.co/vP3hkjH/hhit.png"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbohits.html"",
        ""info"":"""",
                ""embed"":""true"",
        ""online"":""true""},
        
{
""name"": ""HBO FAMILY"",
""image"": ""https://i.ibb.co/F8P2mxK/cccc.png"",
""url"": ""https://tv.realmetx.repl.co/Ch/movie/hbofamily.html"",
""referer"": """",
""userAgent"" : ""android"",           
        ""embed"":""true"",
        ""isHost"":"""",
        ""info"":"""",
        ""online"":""true""},
{
""name"":""HBOSIGNATURE"",
""image"":""https://i.ibb.co/gM7NfQ4/SS.png"",
""url"":""https://tv.realmetx.repl.co/Ch/movie/hbosignature.html"",
""embed"" : ""true"",
        ""info"":"""",
                ""online"":""true""},
                
{
""name"":""CINEMAX HD"",
""image"":""https://i.ibb.co/tz61VMJ/CINE.png"",
""url"":""https://tv.realmetx.repl.co/Ch/movie/cinemax.html"",
        ""info"":"""",
                ""online"":""true"",
""epgId"": ""Cinemax.th"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""embed"": ""true""},

{
""name"":""WANER TV"",
""image"":""https://sv1.picz.in.th/images/2023/12/27/d0LirkS.png"",
""url"":""https://unculled-stability.000webhostapp.com/play_video.php?id=15"",
        ""online"":""true"",
              ""info"":"""",
""embed"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

}
""name"": ""AXN HD"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0Lx3jJ.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/hd-axn.stream/playlist.m3u8?wmsAuthSign=c2VydmVyX3RpbWU9My8xMC8yMDIwIDY6Mjg6MDEgQU0maGFzaF92YWx1ZT0xY0RZT3RydjNwdk9JRjROcGhJbU1RPT0mdmFsaWRtaW51dGVzPTIwJnN0cm1fbGVuPTIw"",
""referer"": ""https://streaming.livescorethai.net"",
""userAgent"" : ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0; .NET4.0C; .NET4.0E; InfoPath.3)"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"": ""PARAMOUNT"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0L5Khu.png"",
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/paramountnetwork.m3u8"",""referer"": ""https://wacth.tv/"",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 13_1_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 OPT/3.2.17"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},
{
""name"": ""TRUE FILMHD1"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LRQ4g.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/hd-tfilm.stream/playlist.m3u8"",
""referer"": ""https://freetvdd.com"",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 13_1_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 OPT/3.2.17"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"": "" TRUE FILMHD2"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LRqn2.png"",
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/truefilm2.m3u8"",
""referer"": """",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 9_3_2 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13F69 Safari/601.1"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"": ""HITS MOVIES"",
""image"":""https://sv1.picz.in.th/images/2023/12/27/d0LRysE.png"",
""url"":""https://unculled-stability.000webhostapp.com/play_video.php?id=16"",
        ""online"":""true"",
              ""info"":"""",
""embed"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""ROCK ACTION HD"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LxufS.png"", 
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/rockactionhd.m3u8"",
""referer"": ""https://wacth.tv"",
""userAgent"" : ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0; .NET4.0C; .NET4.0E; InfoPath.3)"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},
]
}"
hGqupchd,ESP32 LED PWM,cxtinac,C++,Wednesday 27th of December 2023 09:06:59 AM CDT,"#include ""MultiLED.h""

void MultiLED::begin(){
	this->initLEDPWM();
}

void MultiLED::initLEDPWM() {
	//one time set up
	ledcSetup(RED_PWM_CHANNEL, LED_PWM_FREQUENCY, PWM_RESOUTION);
	ledcAttachPin(RED_PIN, RED_PWM_CHANNEL);
	ledcSetup(GREEN_PWM_CHANNEL, LED_PWM_FREQUENCY, PWM_RESOUTION);
	ledcAttachPin(GREEN_PIN, GREEN_PWM_CHANNEL);
	ledcSetup(BLUE_PWM_CHANNEL, LED_PWM_FREQUENCY, PWM_RESOUTION);
	ledcAttachPin(BLUE_PIN, BLUE_PWM_CHANNEL);

	this->led_display = RED;
	this->updateLEDPWM ( led_display );
}

void MultiLED::updateLEDPWM( LED_colour colour ) {
	ledcWrite(RED_PWM_CHANNEL, colour.red);
	ledcWrite(GREEN_PWM_CHANNEL, colour.green);
	ledcWrite(BLUE_PWM_CHANNEL, colour.blue);
}
"
j2izaMPX,ทดลอง,pookpookpook,GetText,Wednesday 27th of December 2023 09:05:09 AM CDT,"}
""name"": ""AXN HD"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0Lx3jJ.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/hd-axn.stream/playlist.m3u8?wmsAuthSign=c2VydmVyX3RpbWU9My8xMC8yMDIwIDY6Mjg6MDEgQU0maGFzaF92YWx1ZT0xY0RZT3RydjNwdk9JRjROcGhJbU1RPT0mdmFsaWRtaW51dGVzPTIwJnN0cm1fbGVuPTIw"",
""referer"": ""https://streaming.livescorethai.net"",
""userAgent"" : ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0; .NET4.0C; .NET4.0E; InfoPath.3)"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"": ""PARAMOUNT"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0L5Khu.png"",
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/paramountnetwork.m3u8"",""referer"": ""https://wacth.tv/"",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 13_1_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 OPT/3.2.17"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},
{
""name"": ""TRUE FILMHD1"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LRQ4g.png"",
""imageScale"": ""fitStart"",
""url"": ""https://streaming.livescorethai.net/iptv/hd-tfilm.stream/playlist.m3u8"",
""referer"": ""https://freetvdd.com"",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 13_1_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 OPT/3.2.17"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"": "" TRUE FILMHD2"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LRqn2.png"",
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/truefilm2.m3u8"",
""referer"": """",
""userAgent"" : ""Mozilla/5.0 (iPad; CPU OS 9_3_2 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13F69 Safari/601.1"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},

{
""name"": ""HITS MOVIES"",
""image"":""https://sv1.picz.in.th/images/2023/12/27/d0LRysE.png"",
""url"":""https://unculled-stability.000webhostapp.com/play_video.php?id=16"",
        ""online"":""true"",
              ""info"":"""",
""embed"": ""true"",
""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.33"", ""desktop"": ""true""},

{
""name"": ""ROCK ACTION HD"",
""image"": ""https://sv1.picz.in.th/images/2023/12/27/d0LxufS.png"", 
""imageScale"": ""fitStart"",
""url"": ""http://playtv.my.id/play/rockactionhd.m3u8"",
""referer"": ""https://wacth.tv"",
""userAgent"" : ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0; .NET4.0C; .NET4.0E; InfoPath.3)"",
        ""info"":"""",
        ""embed"":"""",
        ""isHost"":"""",
        ""online"":""true""},
]
}"
PuemDbfD,win 7 smart tool,coinwalk,JavaScript,Wednesday 27th of December 2023 09:03:30 AM CDT,https://www.youtube.com/watch?v=BzTwM6h1NN0&t=22s
DQLnpwu8,Untitled,kwest87,C#,Wednesday 27th of December 2023 08:41:51 AM CDT,"using System;

namespace ConsoleApp14
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.Write(""Введите имя : "");
            string name = Console.ReadLine();
            Console.WriteLine();
            Console.Write(""Введите символ : "");
            char sumbol = Convert.ToChar(Console.Read());
            Console.WriteLine();
            string lengthName = """";

            for (int i = 0; i < name.Length; i++)
            {
                lengthName += sumbol;
            }

            string edgeRow = sumbol + lengthName + sumbol;
            string middleRow = sumbol + name + sumbol;

            Console.WriteLine(edgeRow);
            Console.WriteLine(middleRow);
            Console.WriteLine(edgeRow);
        }
    }
}"
BRktPSEa,snowybot best,coinwalk,JavaScript,Wednesday 27th of December 2023 08:32:10 AM CDT,"var oldestbal = parseFloat(document.getElementById('pct_balance').value);
var base = (oldestbal/144000); //dont change;
var bellance = oldestbal;
var botplus = base;
var trget = parseFloat(oldestbal);
var tens = (base*10);
var sevens = (base*6.9);
var eights  = (base*7.1)
var floatingbal = 0;
var james = oldestbal;
var fran = oldestbal;
var betnext = ((botplus*1).toFixed(8));
 
 
function get(){
bellance = document.getElementById('pct_balance').value;
if ((bellance>(((Math.floor(bellance/tens))*tens)+sevens))&&(bellance<(((Math.floor(bellance/tens))*tens)+eights))&&(bellance!=floatingbal)) {
     botplus = botplus*2;  
     floatingbal  = parseFloat(bellance);
}
if ((botplus>=(base*3))&&(bellance>=fran)&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))){
    botplus = base;
    floatingbal = 0;
    james  = parseFloat(bellance); 
    fran  = parseFloat(bellance); 
}
if (bellance>(trget*24)){
console.log(""buy ebike"");
return;
}
betnext = ((botplus*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(betnext);
$('#a_hi').click();
setTimeout(() => get(), 100);
}
get();"
eU192DAe,邀您一起看：帅√`人才(2),xiaomianao666,JavaScript,Wednesday 27th of December 2023 08:18:36 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥帅√`人才(2)@@
vAqfQEmH,lab 7 #2,SillyWolfy,C++,Wednesday 27th of December 2023 08:01:06 AM CDT,"#include <iostream>
#include <cstring>
#include <fstream>
#include <Windows.h>
struct str
{
public:
	str() {
		arr = nullptr;
		size_str = 0;
	}
	str& operator=(const str& other) {
		if (this == &other) {
			return *this;
		}
		delete[] arr;
		size_str = other.size_str;
		if (other.arr != nullptr) {
			arr = new char[size_str + 1];
			strcpy_s(arr, size_str + 1, other.arr);
		}
		else {
			arr = nullptr;
		}
		return *this;
	}
	str(const str& other) {
		this->size_str = other.size_str;
		if (other.arr != nullptr) {
			this->arr = new char[size_str + 1];
			strcpy_s(arr, size_str + 1, other.arr);
		}
		else {
			this->arr = nullptr;
			this->size_str = 0;
		}
	}
	str(const char* data) {
		if (data != nullptr) {
			size_str = strlen(data);
			arr = new char[size_str + 1];
			strcpy_s(arr, size_str + 1, data);
		}
		else {
			arr = nullptr;
			size_str = 0;
		}
	}
	void push_back_str(char add) {
		char* tmp_size = new char[size_str + 2];
		for (int i = 0; i < size_str; i++) {
			tmp_size[i] = arr[i];
		}
		tmp_size[size_str] = add;
		tmp_size[size_str + 1] = '\0';
		delete[] arr;
		arr = tmp_size;
		size_str++;
	}
	void input_string() {
		char tmp_char = getchar();
		while (tmp_char != '\n' and tmp_char != EOF) {
			this->push_back_str(tmp_char);
			tmp_char = getchar();
		}
	}
	int ConvertToNum() {
		int res = 0;
		for (int i = 0; i < size_str; ++i) {
			res = res * 10 + (arr[i] - 48);
		}
		return res;
	}
	void Print() {
		std::cout << arr;
	}
	int& GetSizeOfStr() {
		return size_str;
	}
	const char* GetArr() {
		return arr;
	}
	void clear() {
		if (arr != nullptr)
		{
			delete[] arr;
			arr = nullptr;
			size_str = 0;
		}
	}
	int countWords() const {
		if (arr == nullptr) return 0;
		int word_count = 0;
		bool in_word = false;

		for (int i = 0; i < size_str; ++i) {
			if (arr[i] != ' ' && !in_word) {
				in_word = true;
				++word_count;
			}
			else if (arr[i] == ' ' && in_word) {
				in_word = false;
			}
		}
		return word_count;
	}
	~str()
	{
		if (arr != nullptr)
		{
			delete[] arr;
		}
	}
private:
	char* arr;
	int size_str;
};
void AddProduct(str line, str*& arr, int& size_of_database) {
	str* buffer = new str[size_of_database + 1];
	for (size_t i = 0; i < size_of_database; i++)
	{
		buffer[i] = arr[i];
	}
	delete[] arr;
	arr = buffer;
	arr[size_of_database] = line;
	size_of_database++;
}
void RemoveProduct(int number, str*& arr, int& size_of_database) {
	number--;
	str* buffer = new str[size_of_database - 1];
	for (size_t i = 0; i < number; i++)
	{
		buffer[i] = arr[i];
	}
	for (size_t i = number + 1; i < size_of_database; i++)
	{
		buffer[i - 1] = arr[i];
	}
	delete[] arr;
	arr = buffer;
	size_of_database--;
}
void SortByWordCountUP(str*& arr, int& size_of_database) {
	for (size_t i = 0; i < size_of_database - 1; ++i) {
		for (size_t j = 0; j < size_of_database - i - 1; ++j) {
			if (arr[j].countWords() < arr[j + 1].countWords()) {
				str temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
	}
}
void SortByWordCountDown(str*& arr, int& size_of_database) {
	for (size_t i = 0; i < size_of_database - 1; ++i) {
		for (size_t j = 0; j < size_of_database - i - 1; ++j) {
			if (arr[j].countWords() > arr[j + 1].countWords()) {
				str temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
	}
}
void SortAlphabetically(str*& arr, int& size_of_database) {
	for (size_t i = 0; i < size_of_database - 1; ++i) {
		for (size_t j = 0; j < size_of_database - i - 1; ++j) {
			if (strcmp(arr[j].GetArr(), arr[j + 1].GetArr()) > 0) {
				str temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
	}
}
void Print(str*& arr, int& size_of_database) {
	for (size_t i = 0; i < size_of_database; i++)
	{
		arr[i].Print(); std::cout << '\n';
	}
}
void WriteToFile(const char* filename, str*& arr, int& size_of_database) {
	std::ofstream file(filename);
	if (!file) {
		std::cerr << ""Не удалось открыть файл для записи."" << std::endl;
		return;
	}
	for (size_t i = 0; i < size_of_database; i++) {
		file << arr[i].GetArr() << '\n';
	}
}
void PrintOnlyNum(str*& arr, int& size_of_database) {
	for (size_t i = 0; i < size_of_database; i++)
	{
		std::cout << i + 1 << "") ""; arr[i].Print(); std::cout << '\n';
	}
}

void ReadFromFile(str*& arr, int& size_of_database, const char* filename) {
	std::ifstream file(filename);
	if (!file) {
		std::cerr << ""Не удалось открыть файл для чтения."" << std::endl;
		return;
	}
	char ch;
	str temp_str;
	while (file.get(ch)) {
		while (ch != '\n') {
			if (ch != '\n')
			{
				temp_str.push_back_str(ch);
				file.get(ch);
			}
		}
		AddProduct(temp_str, arr, size_of_database);
		temp_str.clear();
	}
	file.close();
}
using namespace std;
int main()
{
	str* MyDateBase = nullptr;
	int size_of_datebase = 0;
	ReadFromFile(MyDateBase,size_of_datebase, ""file.txt"");
	while (true)
	{
		cout << ""|------------------------------------------|\n"";
		cout << ""| 1) Показать содержимое базы данных       |\n"";
		cout << ""| 2) Внести новый элемент в базу данных    |\n"";
		cout << ""| 3) Удалить элемент из базы данных        |\n"";
		cout << ""| 4) Отсортировать данные по пункту А      |\n"";
		cout << ""| 5) Отсортировать данные по пункту Б      |\n"";
		cout << ""| 6) Отсортировать данные по пункту В      |\n"";
		cout << ""| 7) Сохранить и выйти                     |\n"";
		cout << ""|------------------------------------------|\n"";
		cout << ""Выберите опцию: "";
		int switch_on; cin >> switch_on;
		cin.ignore();
		switch (switch_on)
		{
		case 1: {
			Print(MyDateBase,size_of_datebase);
			system(""pause"");
			system(""cls"");
			break;
		}
		case 2: {
			str temp;
			std::cout << ""Введите название фильма: "";
			temp.input_string();
			AddProduct(temp,MyDateBase,size_of_datebase);
			system(""cls"");
			break;
		}
		case 3: {
			PrintOnlyNum(MyDateBase, size_of_datebase);
			cout << ""Выберете номер элемента на удаление: "";
			int number; cin >> number;
			RemoveProduct(number,MyDateBase,size_of_datebase);
			system(""cls"");
			break;
		}
		case 4: {
			SortByWordCountUP(MyDateBase, size_of_datebase);
			cout << ""Данные успешно отсортированны!\n"";
			system(""pause"");
			system(""cls"");
			break;
		}
		case 5: {
			SortByWordCountDown(MyDateBase,size_of_datebase);
			cout << ""Данные успешно отсортированны!\n"";
			system(""pause"");
			system(""cls"");
			break;
		}
		case 6: {
			SortAlphabetically(MyDateBase,size_of_datebase);
			cout << ""Данные успешно отсортированны!\n"";
			system(""pause"");
			system(""cls"");
			break;
		}
		case 7: {
			WriteToFile(""file.txt"",MyDateBase,size_of_datebase);
			delete[] MyDateBase;
			return 0;
		}
		default:
			cout << ""Неверное значение!!!\n"";
			system(""pause"");
			system(""cls"");
			break;
		}
	}
}
"
TtY7SHBa,kue,Syaifuddin_JW,Perl,Wednesday 27th of December 2023 07:51:39 AM CDT,"/queue simple
add max-limit=10M/10M name=00-ICMP packet-marks=icmp target=10.0.0.0/8
/queue type
add kind=pcq name=PCQ-GGC-FB2 pcq-burst-rate=4M pcq-burst-threshold=1920k pcq-burst-time=16s pcq-classifier=dst-address,dst-port pcq-rate=2M
add kind=pcq name=PCQ-5M-Down pcq-burst-rate=5632k pcq-burst-threshold=1706k pcq-burst-time=16s pcq-classifier=dst-address pcq-rate=5M
add kind=pcq name=PCQ-5M-UP pcq-burst-rate=5632k pcq-burst-threshold=1706k pcq-burst-time=16s pcq-classifier=src-address pcq-rate=5M
add kind=pcq name=PCQ-10M-Down pcq-burst-rate=11M pcq-burst-threshold=3413k pcq-burst-time=16s pcq-classifier=dst-address pcq-rate=10M
add kind=pcq name=PCQ-10M-UP pcq-burst-rate=11M pcq-burst-threshold=3413k pcq-burst-time=16s pcq-classifier=src-address pcq-rate=10M
add kind=pcq name=PCQ-15M-Down pcq-burst-rate=17095k pcq-burst-threshold=5120k pcq-burst-time=16s pcq-classifier=dst-address pcq-rate=15M
add kind=pcq name=PCQ-15M-UP pcq-burst-rate=17095k pcq-burst-threshold=5120k pcq-burst-time=16s pcq-classifier=src-address pcq-rate=15M
add kind=pcq name=PCQ-20M-Down pcq-burst-rate=22528k pcq-burst-threshold=6827k pcq-burst-time=16s pcq-classifier=dst-address pcq-rate=20M
add kind=pcq name=PCQ-20M-UP pcq-burst-rate=22528k pcq-burst-threshold=6827k pcq-burst-time=16s pcq-classifier=src-address pcq-rate=20M
add kind=pcq name=PCQ-30M-Down pcq-burst-rate=34528k pcq-burst-threshold=8827k pcq-burst-time=16s pcq-classifier=dst-address pcq-rate=30M
add kind=pcq name=PCQ-30M-UP pcq-burst-rate=34528k pcq-burst-threshold=8827k pcq-burst-time=16s pcq-classifier=src-address pcq-rate=30M
add kind=pcq name=PCQ-50M-Down pcq-burst-rate=53792k pcq-burst-threshold=10M pcq-burst-time=16s pcq-classifier=dst-address pcq-rate=50M
add kind=pcq name=PCQ-50M-UP pcq-burst-rate=53792k pcq-burst-threshold=10M pcq-burst-time=16s pcq-classifier=src-address pcq-rate=50M
add kind=pcq name=PCQ-100M-Down pcq-burst-rate=106264k pcq-burst-threshold=12M pcq-burst-time=16s pcq-classifier=dst-address pcq-rate=100M
add kind=pcq name=PCQ-100M-UP pcq-burst-rate=106264k pcq-burst-threshold=12M pcq-burst-time=16s pcq-classifier=src-address pcq-rate=100M
add kind=pcq name=PCQ-GGC-FB4 pcq-burst-rate=5M pcq-burst-threshold=3200k pcq-burst-time=16s pcq-classifier=dst-address,dst-port pcq-rate=4M
add kind=pcq name=PCQ-GGC-FB pcq-burst-time=16s pcq-classifier=dst-address,dst-port pcq-rate=10M
/queue simple
add dst=10.0.0.0/8 max-limit=4290M/4290M name=01-FB-WA-IG queue=PCQ-GGC-FB2/ethernet-default target=""31.13.24.0/21,31.13.64.0/18,31.13.95.0/24,31.13.96.0/19,45.64.40.0/22,66.111.48.0/22,66.111.50.0/24,66.220.144.0/20,66.220.144.0/21,66.220.152.0/21,69.63.176.0/20,69.63.176.0/21,69.63.184.0/21,69.171.224.0/19,69.171.224.0/20,69.171.240.0/20,69.171.250.0/24,74.119.76.0/22,102.132.96.0/20,103.4.96.0/22,129.134.0.0/17,129.134.25.0/24,129.134.27.0/24,129.134.30.0/23,1\
    57.240.0.0/17,157.240.192.0/18,157.240.208.0/24,163.70.128.0/17,163.114.128.0/20,163.114.133.0/24,173.252.64.0/19,173.252.88.0/21,173.252.96.0/19,179.60.192.0/22,185.60.216.0/22,185.89.218.0/23,185.89.218.0/24,199.201.64.0/22,199.201.67.0/24,204.15.20.0/22""
add dst=10.0.0.0/8 max-limit=4290M/4290M name=02-GGC queue=PCQ-GGC-FB2/ethernet-default target=103.80.80.128/27,103.153.148.128/27
add max-limit=4290M/4290M name=Router1-TJE-5Mbps queue=PCQ-5M-UP/PCQ-5M-Down target=10.5.0.0/16
add max-limit=4290M/4290M name=Router1-TJE-10Mbps queue=PCQ-10M-UP/PCQ-10M-Down target=10.10.0.0/16
add max-limit=4290M/4290M name=Router1-TJE-15Mbps queue=PCQ-15M-UP/PCQ-15M-Down target=10.15.0.0/16
add max-limit=4290M/4290M name=Router1-TJE-20Mbps queue=PCQ-20M-UP/PCQ-20M-Down target=10.20.0.0/16
add max-limit=4290M/4290M name=Router1-TJE-30Mbps queue=PCQ-30M-UP/PCQ-30M-Down target=10.30.0.0/16
add max-limit=4290M/4290M name=Router1-TJE-50Mbps queue=PCQ-50M-UP/PCQ-50M-Down target=10.50.0.0/16
add max-limit=4290M/4290M name=Router1-TJE-100Mbps queue=PCQ-100M-UP/PCQ-100M-Down target=10.100.0.0/16
"
UNTcifG1,els,Riremito,C++,Wednesday 27th of December 2023 07:49:33 AM CDT,"#include""../Share/Simple/Simple.h""
#include""../Share/Hook/SimpleHook.h""

char* (WINAPI *_PurpleGetUserID)() = NULL;
char* WINAPI PurpleGetUserID_Hook() {
	char *ret = _PurpleGetUserID();

	strcpy_s(ret, 256, ""sirisiri_TW"");
	return ret;
}

bool ElswordHook() {
	HMODULE hDll = GetModuleHandleW(L""purpleforclient.dll"");
	if (!hDll) {
		hDll = LoadLibraryW(L""purpleforclient.dll"");
	}

	if (!hDll) {
		DEBUG(L""failed to load purpleforclient.dll"");
		return false;
	}

	SHookNT(purpleforclient.dll, PurpleGetUserID);
	return true;
}

BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved) {
	switch (fdwReason) {
	case DLL_PROCESS_ATTACH:
	{
		DisableThreadLibraryCalls(hinstDLL);
		ElswordHook();
		break;
	}
	case DLL_PROCESS_DETACH:
	{
		break;
	}
	default:
	{
		break;
	}
	}
	return TRUE;
}"
a221f02E,RPS command,fearmoabs,JavaScript,Wednesday 27th of December 2023 07:32:53 AM CDT,"  if (interaction.commandName === ""rps"") {
    const choices = [
      { name: ""Rock"", emoji: ""🪨"", beats: ""Scissors"" },
      { name: ""Paper"", emoji: ""📄"", beats: ""Rock"" },
      { name: ""Scissors"", emoji: ""✂️"", beats: ""Paper"" },
    ];
    try {
      const targetUser = interaction.options.getUser(""user"");

      if (interaction.user === targetUser) {
        interaction.reply({
          content: ""you cannot play rock paper scissors alone you loser"",
        });

        return;
      }

      if (targetUser.bot) {
        interaction.reply({
          content: ""you cannot play rock paper scissors with a bot you loser"",
        });

        return;
      }

      const embed = new EmbedBuilder()
        .setTitle(""Rock Paper Scissors"")
        .setDescription(`its currently ${targetUser}'s turn`)
        .setColor(""Random"")
        .setFooter({
          text: ""SakioliBot V1"",
          iconURL:
            ""https://cdn.discordapp.com/app-icons/563691622005735425/08d4e3f0971be80c473dda3433abf5e9.png"",
        })
        .setTimestamp(new Date());

      const buttons = choices.map((choice) => {
        return new ButtonBuilder()
          .setCustomId(choice.name)
          .setLabel(choice.name)
          .setStyle(ButtonStyle.Primary)
          .setEmoji(choice.emoji);
      });

      const row = new ActionRowBuilder().addComponents(buttons);

      const reply = await interaction.reply({
        content: `${targetUser}, you have been challenged to a game of rock paper scissors by ${interaction.user}, to start playing select your choice below`,
        embeds: [embed],
        components: [row],
      });

      const targetUserInteraction = await reply
        .awaitMessageComponent({
          filter: (i) => i.user.id === targetUser.id,
          time: 15_000,
        })
        .catch(async (error) => {
          embed.setDescription(
            `game over ${targetUser} did not respond in time`
          );
          await reply.edit({ embeds: [embed], components: [] });
        });

      if (!targetUserInteraction) return;

      const targetUserChoice = choices.find(
        (choice) => choice.name === targetUserInteraction.customId
      );

      await targetUserInteraction.reply({
        content: `you picked ${targetUserChoice.name + targetUserChoice.emoji}`,
        ephemeral: true,
      });

      embed.setDescription(`its currently ${interaction.user}'s turn`);
      await reply.edit({
        content: `${interaction.user}, its your turn now`,
        embeds: [embed],
      });

      const initalUserInteraction = await reply
        .awaitMessageComponent({
          filter: (i) => i.user.id === interaction.user.id,
          time: 15_000,
        })
        .catch(async (error) => {
          embed.setDescription(
            `game over ${interaction.user} did not respond in time`
          );
          await reply.edit({ embeds: [embed], components: [] });
        });

      if (!initalUserInteraction) return;

      const initialUserChoice = choices.find(
        (choice) => choice.name === initalUserInteraction.customId
      );

      let result;

      if (targetUserChoice.beats === initialUserChoice.name) {
        result = `${targetUser.username} wins`;
      } else if (initialUserChoice.beats === targetUserChoice.name) {
        result = `${interaction.user.username} wins`;
      } else if (initialUserChoice === targetUserChoice) {
        result = `it was a tie`;
      }

      embed.setDescription(
        `${targetUser} picked ${targetUserChoice.name + targetUserChoice.emoji}
        ${interaction.user} picked ${
          initialUserChoice.name + initialUserChoice.emoji
        }
        \n\n${result}`
      );

      reply.edit({ embeds: [embed], components: [] });
    } catch (error) {
      return;
    }
  }"
RyJfhmdv,snowybot,coinwalk,JavaScript,Wednesday 27th of December 2023 06:41:50 AM CDT,"var oldestbal = parseFloat(document.getElementById('pct_balance').value);
var base = (oldestbal/1000); //dont change;
var bellance = oldestbal;
var botplus = base;
var trget = parseFloat(oldestbal);
var tens = (base*10);
var sevens = (base*6.9);
var eights  = (base*7.1)
var floatingbal = 0;
var james = oldestbal;
var fran = oldestbal;
var betnext = ((botplus*1).toFixed(8));
 
 
function get(){
bellance = document.getElementById('pct_balance').value;
if ((bellance>(((Math.floor(bellance/tens))*tens)+sevens))&&(bellance<(((Math.floor(bellance/tens))*tens)+eights))&&(bellance!=floatingbal)) {
     botplus = botplus*2;  
     floatingbal  = parseFloat(bellance);
}
if (((bellance-botplus)<=(james-(base*24)))&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))){
    botplus = base; 
    floatingbal = 0;
}
if (((bellance-(botplus*2))<=(james-(base*24)))&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))){
    botplus = base; 
    floatingbal = 0;
}
if ((bellance<=(james-(base*24)))&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))){
    botplus = base; 
    floatingbal = 0;
    james  = parseFloat(bellance);
}
if ((botplus>=(base*3))&&(bellance>=fran)&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))){
    botplus = base;
    floatingbal = 0;
    james  = parseFloat(bellance); 
    fran  = parseFloat(bellance); 
}
if (bellance>(trget*24)){
console.log(""buy ebike"");
return;
}
betnext = ((botplus*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(betnext);
$('#a_hi').click();
setTimeout(() => get(), 100);
}
get();"
EZGUDsRL,toDfa TS,honey_the_codewitch,TypeScript,Wednesday 27th of December 2023 06:22:06 AM CDT,"toDfa(): FA {
    const closure: FA[] = this.fillClosure();
    const p: Set<number> = new Set<number>();
    for (const ffa of closure) {
        p.add(0);
        for (const t of ffa.transitions) {
            p.add(t.min);
            if (t.max < 0x10ffff) {
                p.add(t.max + 1);
            }
        }
    }
    const points: number[] = [...p];
    points.sort((x, y) => x - y);
    const sets: Map<Set<FA>, Set<FA>> = new Map<Set<FA>, Set<FA>>();
    const working: Set<FA>[] = [];
    const dfaMap: Map<Set<FA>, FA> = new Map<Set<FA>, FA>();
    const initial: Set<FA> = new Set<FA>();
    initial.add(this);
    sets.set(initial, initial);
    working.push(initial);
    const result: FA = new FA();
    for (const ffa of initial) {
        if (ffa.isAccepting()) {
            result.acceptSymbol = ffa.acceptSymbol;
            break;
        }
    }
    dfaMap.set(initial, result);
    while (working.length > 0) {
        const s: Set<FA> = working[0];
        working.shift();
        const dfa: FA = dfaMap.get(s)!;
        for (const q of s) {
            if (q.isAccepting()) {
                dfa.acceptSymbol = q.acceptSymbol;
                break;
            }
        }
        let i: number = 0;
        for (const pnt of points) {
            let set: Set<FA> = new Set<FA>();
            for (const c of s) {
                for (let trns of c.transitions) {
                    if (trns.min <= pnt && pnt <= trns.max) {
                        set.add(trns.to);
                    }
                }
            }
            if (!sets.has(set)) {
                sets.set(set, set);
                working.push(set);
                let newFa: FA = new FA();
                dfaMap.set(set, newFa);
            }
            const dst: FA = dfaMap.get(set)!;
            const first: number = pnt;
            let last: number;
            if (i + 1 < points.length) {
                last = points[i + 1] - 1;
            } else {
                last = 0x10ffff;
            }
            dfa.transitions.push(new FATransition(first, last, dst));
            ++i;
        }
    }
    for (const ffa of result.fillClosure()) {
        const itrns: FATransition[] = [...ffa.transitions];
        for (const trns of itrns) {
            const acc: FA[] = trns.to.fillClosure().filter((value: FA, index: number, array: FA[]) => value.isAccepting());
            if (acc.length == 0) {
                ffa.transitions.splice(ffa.transitions.indexOf(trns), 1);
            }
        }
    }
    return result;
}"
wWPpN9h1,cyber alliance css draft 8,Anonx0,CSS,Wednesday 27th of December 2023 06:02:59 AM CDT,":root {
  --blood: #ef5956;
  --crimson: #d33131;
  --light: #ffffff;
}

html {
  font: 16px/1 system-ui;
  height: 100%;
}

body {
  margin: 0;
  padding: 1rem;
}

header {}

main {}

footer {}

@media (min-width: 1000px) {
  html {
    background: var(--blood);
    display: grid;
    justify-content: center;
  }

  body {
    background: var(--light);
    border-left: .2rem solid var(--crimson);
    border-right: .2rem solid var(--crimson);
    box-sizing: border-box;
    width: 1000px;
  }

  header {}

  main {}

  footer {}
}"
9bssccxk,data795,TestGuy1,JSON,Wednesday 27th of December 2023 06:00:09 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'd20ebf1e4e278e86d73dc83b14c0f7337bcacbf0bec5f8fbbe663011b64fdca208a1d494916dddef1b37b80bb11756d9bbf55fa8a704c69b7e1359b91e98c897b7024fb14a8a9258f46bdc75aed8a41292d212fbeacf272654b65df7b3ad89af6049a3c26a3142116a58780fb5822d6626b5fea543936723111833b7ad68e7a2',
  otherdata: [
    '91a7e3c8a2b02b138c01aed3a664b0f0',
    '82af04a8ff85ad90830508cfe61ea6c0',
    'af1c08fc660179a8c22ac45fdcc0dc9b',
    '9ca502fa35d000ab25a4402159a86879',
    'be93089dcf90fe5dea9387b9e077f5cb',
    '75324c6903fbc78635aeec38f3019cdf',
    '6d4b1ef3b63be3fdc975d48ca4b79a9e',
    'efde8a22b013c40ed98d6994f784056a'
  ]
}"
eDdc2M8b,unattended-upgrades.log,IgorLytkin,Bash,Wednesday 27th of December 2023 05:47:51 AM CDT,"Using username ""liv"".
Authenticating with public key ""igorl@igor2023""
Passphrase for key ""igorl@igor2023"":
Welcome to Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-73-fips x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Wed Dec 27 06:45:09 PM +07 2023

  System load:  0.8623046875       Processes:             338
  Usage of /:   90.2% of 28.89GB   Users logged in:       0
  Memory usage: 47%                IPv4 address for eth0: 62.113.107.38
  Swap usage:   78%                IPv4 address for eth1: 10.16.0.1

  => / is using 90.2% of 28.89GB


 * Introducing Expanded Security Maintenance for Applications.
   Receive updates to over 25,000 software packages with your
   Ubuntu Pro subscription. Free for personal use.

     https://ubuntu.com/pro

Expanded Security Maintenance for Applications is enabled.

0 updates can be applied immediately.

New release '23.04' available.
Run 'do-release-upgrade' to upgrade to it.


3 updates could not be installed automatically. For more details,
see /var/log/unattended-upgrades/unattended-upgrades.log

Last login: Mon Dec 25 21:43:08 2023 from 127.0.0.1
liv@singularity:~$ ^C
liv@singularity:~$ cat /var/log/unattended-upgrades/unattended-upgrades.log
cat: /var/log/unattended-upgrades/unattended-upgrades.log: Permission denied
liv@singularity:~$ sudo cat /var/log/unattended-upgrades/unattended-upgrades.log
[sudo] password for liv:
2023-12-01 06:16:21,220 INFO Starting unattended upgrades script
2023-12-01 06:16:21,220 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-01 06:16:21,220 INFO Initial blacklist:
2023-12-01 06:16:21,220 INFO Initial whitelist (not strict):
2023-12-01 06:16:22,366 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-01 14:50:37,133 INFO Starting unattended upgrades script
2023-12-01 14:50:37,134 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-01 14:50:37,134 INFO Initial blacklist:
2023-12-01 14:50:37,134 INFO Initial whitelist (not strict):
2023-12-02 04:03:16,801 INFO Starting unattended upgrades script
2023-12-02 04:03:16,801 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-02 04:03:16,802 INFO Initial blacklist:
2023-12-02 04:03:16,802 INFO Initial whitelist (not strict):
2023-12-02 06:46:42,018 INFO Starting unattended upgrades script
2023-12-02 06:46:42,019 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-02 06:46:42,019 INFO Initial blacklist:
2023-12-02 06:46:42,019 INFO Initial whitelist (not strict):
2023-12-02 06:46:43,197 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-03 04:44:16,606 INFO Starting unattended upgrades script
2023-12-03 04:44:16,606 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-03 04:44:16,607 INFO Initial blacklist:
2023-12-03 04:44:16,607 INFO Initial whitelist (not strict):
2023-12-03 06:02:40,736 INFO Starting unattended upgrades script
2023-12-03 06:02:40,736 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-03 06:02:40,736 INFO Initial blacklist:
2023-12-03 06:02:40,737 INFO Initial whitelist (not strict):
2023-12-03 06:02:41,836 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-04 06:22:24,249 INFO Starting unattended upgrades script
2023-12-04 06:22:24,250 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-04 06:22:24,250 INFO Initial blacklist:
2023-12-04 06:22:24,250 INFO Initial whitelist (not strict):
2023-12-04 06:22:25,374 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-04 13:28:16,294 INFO Starting unattended upgrades script
2023-12-04 13:28:16,295 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-04 13:28:16,295 INFO Initial blacklist:
2023-12-04 13:28:16,295 INFO Initial whitelist (not strict):
2023-12-05 00:33:18,482 INFO Starting unattended upgrades script
2023-12-05 00:33:18,488 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-05 00:33:18,488 INFO Initial blacklist:
2023-12-05 00:33:18,488 INFO Initial whitelist (not strict):
2023-12-05 06:26:30,750 INFO Starting unattended upgrades script
2023-12-05 06:26:30,750 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-05 06:26:30,751 INFO Initial blacklist:
2023-12-05 06:26:30,751 INFO Initial whitelist (not strict):
2023-12-05 06:26:31,916 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-06 06:14:09,482 INFO Starting unattended upgrades script
2023-12-06 06:14:09,483 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-06 06:14:09,483 INFO Initial blacklist:
2023-12-06 06:14:09,483 INFO Initial whitelist (not strict):
2023-12-06 06:14:10,563 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-06 09:46:59,862 INFO Starting unattended upgrades script
2023-12-06 09:46:59,863 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-06 09:46:59,863 INFO Initial blacklist:
2023-12-06 09:46:59,863 INFO Initial whitelist (not strict):
2023-12-07 06:54:27,267 INFO Starting unattended upgrades script
2023-12-07 06:54:27,268 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-07 06:54:27,268 INFO Initial blacklist:
2023-12-07 06:54:27,268 INFO Initial whitelist (not strict):
2023-12-07 06:54:31,489 INFO Packages that will be upgraded: curl libcurl3-gnutls libcurl4 python3-cryptography
2023-12-07 06:54:31,489 INFO Writing dpkg log to /var/log/unattended-upgrades/unattended-upgrades-dpkg.log
2023-12-07 06:54:46,355 INFO All upgrades installed
2023-12-07 17:09:54,497 INFO Starting unattended upgrades script
2023-12-07 17:09:54,498 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-07 17:09:54,498 INFO Initial blacklist:
2023-12-07 17:09:54,498 INFO Initial whitelist (not strict):
2023-12-08 06:34:46,673 INFO Starting unattended upgrades script
2023-12-08 06:34:46,674 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-08 06:34:46,674 INFO Initial blacklist:
2023-12-08 06:34:46,674 INFO Initial whitelist (not strict):
2023-12-08 06:34:53,787 INFO Packages that will be upgraded: bluez bluez-cups bluez-obexd libbluetooth3 libc-bin libc-dev-bin libc6 libc6-dbg libc6-dev libc6-i386 locales
2023-12-08 06:34:53,788 INFO Writing dpkg log to /var/log/unattended-upgrades/unattended-upgrades-dpkg.log
2023-12-08 06:35:42,035 INFO All upgrades installed
2023-12-08 12:07:18,109 INFO Starting unattended upgrades script
2023-12-08 12:07:18,110 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-08 12:07:18,111 INFO Initial blacklist:
2023-12-08 12:07:18,111 INFO Initial whitelist (not strict):
2023-12-09 05:10:25,455 INFO Starting unattended upgrades script
2023-12-09 05:10:25,456 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-09 05:10:25,456 INFO Initial blacklist:
2023-12-09 05:10:25,456 INFO Initial whitelist (not strict):
2023-12-09 07:00:04,204 INFO Starting unattended upgrades script
2023-12-09 07:00:04,204 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-09 07:00:04,205 INFO Initial blacklist:
2023-12-09 07:00:04,205 INFO Initial whitelist (not strict):
2023-12-09 07:00:05,604 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-10 06:18:30,694 INFO Starting unattended upgrades script
2023-12-10 06:18:30,695 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-10 06:18:30,695 INFO Initial blacklist:
2023-12-10 06:18:30,695 INFO Initial whitelist (not strict):
2023-12-10 06:18:31,977 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-10 15:13:17,167 INFO Starting unattended upgrades script
2023-12-10 15:13:17,168 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-10 15:13:17,168 INFO Initial blacklist:
2023-12-10 15:13:17,169 INFO Initial whitelist (not strict):
2023-12-11 06:37:30,724 INFO Starting unattended upgrades script
2023-12-11 06:37:30,725 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-11 06:37:30,725 INFO Initial blacklist:
2023-12-11 06:37:30,725 INFO Initial whitelist (not strict):
2023-12-11 06:37:32,022 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-11 08:36:15,996 INFO Starting unattended upgrades script
2023-12-11 08:36:15,997 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-11 08:36:15,998 INFO Initial blacklist:
2023-12-11 08:36:15,998 INFO Initial whitelist (not strict):
2023-12-12 02:10:38,642 INFO Starting unattended upgrades script
2023-12-12 02:10:38,643 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-12 02:10:38,643 INFO Initial blacklist:
2023-12-12 02:10:38,643 INFO Initial whitelist (not strict):
2023-12-12 06:59:09,660 INFO Starting unattended upgrades script
2023-12-12 06:59:09,661 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-12 06:59:09,661 INFO Initial blacklist:
2023-12-12 06:59:09,661 INFO Initial whitelist (not strict):
2023-12-12 06:59:16,334 INFO Packages that will be upgraded: binutils binutils-common binutils-x86-64-linux-gnu gir1.2-javascriptcoregtk-4.0 gir1.2-webkit2-4.0 libbinutils libctf-nobfd0 libctf0 libjavascriptcoregtk-4.0-18 libwebkit2gtk-4.0-37 linux-generic linux-headers-generic linux-headers-virtual linux-image-generic linux-image-virtual linux-libc-dev linux-virtual tar
2023-12-12 06:59:16,335 INFO Writing dpkg log to /var/log/unattended-upgrades/unattended-upgrades-dpkg.log
2023-12-12 07:00:23,794 INFO All upgrades installed
2023-12-12 07:00:36,598 INFO Packages that were successfully auto-removed: linux-headers-5.15.0-88 linux-headers-5.15.0-88-generic linux-image-5.15.0-88-generic linux-modules-5.15.0-88-generic linux-modules-extra-5.15.0-88-generic
2023-12-12 07:00:36,600 INFO Packages that are kept back:
2023-12-13 06:47:08,248 INFO Starting unattended upgrades script
2023-12-13 06:47:08,249 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-13 06:47:08,249 INFO Initial blacklist:
2023-12-13 06:47:08,249 INFO Initial whitelist (not strict):
2023-12-13 06:47:09,345 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-13 08:32:55,325 INFO Starting unattended upgrades script
2023-12-13 08:32:55,326 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-13 08:32:55,326 INFO Initial blacklist:
2023-12-13 08:32:55,326 INFO Initial whitelist (not strict):
2023-12-14 04:43:42,789 INFO Starting unattended upgrades script
2023-12-14 04:43:42,790 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-14 04:43:42,790 INFO Initial blacklist:
2023-12-14 04:43:42,790 INFO Initial whitelist (not strict):
2023-12-14 06:12:11,473 INFO Starting unattended upgrades script
2023-12-14 06:12:11,474 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-14 06:12:11,474 INFO Initial blacklist:
2023-12-14 06:12:11,474 INFO Initial whitelist (not strict):
2023-12-14 06:12:15,464 INFO Packages that will be upgraded: gnome-control-center gnome-control-center-data gnome-control-center-faces xserver-common xserver-xephyr xserver-xorg-core xserver-xorg-legacy xwayland
2023-12-14 06:12:15,464 INFO Writing dpkg log to /var/log/unattended-upgrades/unattended-upgrades-dpkg.log
2023-12-14 06:12:44,223 INFO All upgrades installed
2023-12-15 06:15:10,476 INFO Starting unattended upgrades script
2023-12-15 06:15:10,477 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-15 06:15:10,477 INFO Initial blacklist:
2023-12-15 06:15:10,477 INFO Initial whitelist (not strict):
2023-12-15 06:15:39,127 INFO Packages that will be upgraded: fonts-opensymbol libjuh-java libjurt-java liblibreoffice-java libreoffice libreoffice-base libreoffice-base-core libreoffice-base-drivers libreoffice-calc libreoffice-common libreoffice-core libreoffice-draw libreoffice-gnome libreoffice-gtk3 libreoffice-help-common libreoffice-help-ru libreoffice-impress libreoffice-java-common libreoffice-l10n-ru libreoffice-math libreoffice-nlpsolver libreoffice-ogltrans libreoffice-pdfimport libreoffice-report-builder libreoffice-report-builder-bin libreoffice-script-provider-bsh libreoffice-script-provider-js libreoffice-script-provider-python libreoffice-sdbc-firebird libreoffice-sdbc-hsqldb libreoffice-sdbc-mysql libreoffice-sdbc-postgresql libreoffice-style-breeze libreoffice-style-colibre libreoffice-style-elementary libreoffice-style-tango libreoffice-style-yaru libreoffice-wiki-publisher libreoffice-writer libridl-java libuno-cppu3 libuno-cppuhelpergcc3-3 libuno-purpenvhelpergcc3-3 libuno-sal3 libuno-salhelpergcc3-3 libunoloader-java libyajl2 python3-uno uno-libs-private ure ure-java vim vim-common vim-runtime vim-tiny xxd
2023-12-15 06:15:39,128 INFO Writing dpkg log to /var/log/unattended-upgrades/unattended-upgrades-dpkg.log
2023-12-15 06:18:38,225 INFO All upgrades installed
2023-12-15 07:22:41,850 INFO Starting unattended upgrades script
2023-12-15 07:22:41,851 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-15 07:22:41,851 INFO Initial blacklist:
2023-12-15 07:22:41,851 INFO Initial whitelist (not strict):
2023-12-16 06:38:28,417 INFO Starting unattended upgrades script
2023-12-16 06:38:28,418 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-16 06:38:28,418 INFO Initial blacklist:
2023-12-16 06:38:28,418 INFO Initial whitelist (not strict):
2023-12-16 06:58:11,480 INFO Starting unattended upgrades script
2023-12-16 06:58:11,481 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-16 06:58:11,481 INFO Initial blacklist:
2023-12-16 06:58:11,481 INFO Initial whitelist (not strict):
2023-12-16 06:58:12,771 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-17 01:51:56,253 INFO Starting unattended upgrades script
2023-12-17 01:51:56,254 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-17 01:51:56,254 INFO Initial blacklist:
2023-12-17 01:51:56,255 INFO Initial whitelist (not strict):
2023-12-17 06:33:55,985 INFO Starting unattended upgrades script
2023-12-17 06:33:55,986 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-17 06:33:55,986 INFO Initial blacklist:
2023-12-17 06:33:55,986 INFO Initial whitelist (not strict):
2023-12-17 06:33:57,297 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-18 06:45:59,526 INFO Starting unattended upgrades script
2023-12-18 06:45:59,527 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-18 06:45:59,527 INFO Initial blacklist:
2023-12-18 06:45:59,527 INFO Initial whitelist (not strict):
2023-12-18 06:46:00,893 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-18 07:13:30,260 INFO Starting unattended upgrades script
2023-12-18 07:13:30,261 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-18 07:13:30,261 INFO Initial blacklist:
2023-12-18 07:13:30,261 INFO Initial whitelist (not strict):
2023-12-19 06:22:49,086 INFO Starting unattended upgrades script
2023-12-19 06:22:49,087 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-19 06:22:49,087 INFO Initial blacklist:
2023-12-19 06:22:49,087 INFO Initial whitelist (not strict):
2023-12-19 06:22:50,462 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-19 13:09:37,936 INFO Starting unattended upgrades script
2023-12-19 13:09:37,937 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-19 13:09:37,938 INFO Initial blacklist:
2023-12-19 13:09:37,938 INFO Initial whitelist (not strict):
2023-12-20 06:27:05,161 INFO Starting unattended upgrades script
2023-12-20 06:27:05,162 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-20 06:27:05,162 INFO Initial blacklist:
2023-12-20 06:27:05,162 INFO Initial whitelist (not strict):
2023-12-20 06:27:06,312 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-20 17:04:26,596 INFO Starting unattended upgrades script
2023-12-20 17:04:26,597 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-20 17:04:26,597 INFO Initial blacklist:
2023-12-20 17:04:26,597 INFO Initial whitelist (not strict):
2023-12-21 04:21:45,782 INFO Starting unattended upgrades script
2023-12-21 04:21:45,783 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-21 04:21:45,783 INFO Initial blacklist:
2023-12-21 04:21:45,783 INFO Initial whitelist (not strict):
2023-12-21 06:16:32,609 INFO Starting unattended upgrades script
2023-12-21 06:16:32,609 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-21 06:16:32,610 INFO Initial blacklist:
2023-12-21 06:16:32,610 INFO Initial whitelist (not strict):
2023-12-21 06:16:33,786 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-22 04:17:53,178 INFO Starting unattended upgrades script
2023-12-22 04:17:53,179 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-22 04:17:53,179 INFO Initial blacklist:
2023-12-22 04:17:53,179 INFO Initial whitelist (not strict):
2023-12-22 06:20:27,808 INFO Starting unattended upgrades script
2023-12-22 06:20:27,809 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-22 06:20:27,809 INFO Initial blacklist:
2023-12-22 06:20:27,810 INFO Initial whitelist (not strict):
2023-12-22 06:20:28,894 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-23 06:25:32,940 INFO Starting unattended upgrades script
2023-12-23 06:25:32,941 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-23 06:25:32,941 INFO Initial blacklist:
2023-12-23 06:25:32,941 INFO Initial whitelist (not strict):
2023-12-23 06:50:25,748 INFO Starting unattended upgrades script
2023-12-23 06:50:25,749 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-23 06:50:25,749 INFO Initial blacklist:
2023-12-23 06:50:25,749 INFO Initial whitelist (not strict):
2023-12-23 06:50:26,836 INFO Removing unused kernel packages: linux-headers-5.15.0-89 linux-headers-5.15.0-89-generic linux-modules-extra-5.15.0-89-generic linux-image-5.15.0-89-generic linux-modules-5.15.0-89-generic
2023-12-23 06:50:44,624 INFO Packages that were successfully auto-removed: linux-headers-5.15.0-89 linux-headers-5.15.0-89-generic linux-image-5.15.0-89-generic linux-modules-5.15.0-89-generic linux-modules-extra-5.15.0-89-generic
2023-12-23 06:50:44,631 INFO Packages that are kept back:
2023-12-23 06:50:45,013 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-23 06:50:45,167 INFO Package openssh-client is kept back because a related package is kept back or due to local apt_preferences(5).
2023-12-23 06:50:45,169 INFO Package openssh-server is kept back because a related package is kept back or due to local apt_preferences(5).
2023-12-23 06:50:45,171 INFO Package openssh-sftp-server is kept back because a related package is kept back or due to local apt_preferences(5).
2023-12-24 03:59:36,928 INFO Starting unattended upgrades script
2023-12-24 03:59:36,929 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-24 03:59:36,929 INFO Initial blacklist:
2023-12-24 03:59:36,929 INFO Initial whitelist (not strict):
2023-12-24 06:14:12,292 INFO Starting unattended upgrades script
2023-12-24 06:14:12,293 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-24 06:14:12,293 INFO Initial blacklist:
2023-12-24 06:14:12,293 INFO Initial whitelist (not strict):
2023-12-24 06:14:13,475 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-24 06:14:13,621 INFO Package openssh-client is kept back because a related package is kept back or due to local apt_preferences(5).
2023-12-24 06:14:13,623 INFO Package openssh-server is kept back because a related package is kept back or due to local apt_preferences(5).
2023-12-24 06:14:13,624 INFO Package openssh-sftp-server is kept back because a related package is kept back or due to local apt_preferences(5).
2023-12-25 06:52:15,498 INFO Starting unattended upgrades script
2023-12-25 06:52:15,500 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-25 06:52:15,500 INFO Initial blacklist:
2023-12-25 06:52:15,500 INFO Initial whitelist (not strict):
2023-12-25 06:52:16,684 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-25 06:52:16,865 INFO Package openssh-client is kept back because a related package is kept back or due to local apt_preferences(5).
2023-12-25 06:52:16,867 INFO Package openssh-server is kept back because a related package is kept back or due to local apt_preferences(5).
2023-12-25 06:52:16,868 INFO Package openssh-sftp-server is kept back because a related package is kept back or due to local apt_preferences(5).
2023-12-25 11:33:39,484 INFO Starting unattended upgrades script
2023-12-25 11:33:39,485 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-25 11:33:39,485 INFO Initial blacklist:
2023-12-25 11:33:39,485 INFO Initial whitelist (not strict):
2023-12-26 04:23:40,862 INFO Starting unattended upgrades script
2023-12-26 04:23:40,864 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-26 04:23:40,864 INFO Initial blacklist:
2023-12-26 04:23:40,864 INFO Initial whitelist (not strict):
2023-12-26 06:50:15,935 INFO Starting unattended upgrades script
2023-12-26 06:50:15,936 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-26 06:50:15,936 INFO Initial blacklist:
2023-12-26 06:50:15,937 INFO Initial whitelist (not strict):
2023-12-26 06:50:17,350 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-26 06:50:17,561 INFO Package openssh-client is kept back because a related package is kept back or due to local apt_preferences(5).
2023-12-26 06:50:17,563 INFO Package openssh-server is kept back because a related package is kept back or due to local apt_preferences(5).
2023-12-26 06:50:17,564 INFO Package openssh-sftp-server is kept back because a related package is kept back or due to local apt_preferences(5).
2023-12-27 06:37:59,393 INFO Starting unattended upgrades script
2023-12-27 06:37:59,394 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-27 06:37:59,394 INFO Initial blacklist:
2023-12-27 06:37:59,394 INFO Initial whitelist (not strict):
2023-12-27 06:38:00,530 INFO No packages found that can be upgraded unattended and no pending auto-removals
2023-12-27 06:38:00,686 INFO Package openssh-client is kept back because a related package is kept back or due to local apt_preferences(5).
2023-12-27 06:38:00,688 INFO Package openssh-server is kept back because a related package is kept back or due to local apt_preferences(5).
2023-12-27 06:38:00,690 INFO Package openssh-sftp-server is kept back because a related package is kept back or due to local apt_preferences(5).
2023-12-27 11:48:38,832 INFO Starting unattended upgrades script
2023-12-27 11:48:38,833 INFO Allowed origins are: o=Ubuntu,a=jammy, o=Ubuntu,a=jammy-security, o=UbuntuESMApps,a=jammy-apps-security, o=UbuntuESM,a=jammy-infra-security
2023-12-27 11:48:38,834 INFO Initial blacklist:
2023-12-27 11:48:38,834 INFO Initial whitelist (not strict):
liv@singularity:~$
"
2BF2gMgF,cyber alliance css draft 7,Anonx0,CSS,Wednesday 27th of December 2023 05:26:52 AM CDT,":root {
  --blood: #f94877;
  --light: #ffffff;
  --smith: #d0e6da;
}

html {
  font: 16px/1 system-ui;
  height: 100%;
}

body {
  margin: 0;
  padding: 1rem;
}

header {}

main {}

footer {}

@media (min-width: 1000px) {
  html {
    background: var(--smith);
    display: grid;
    justify-content: center;
  }

  body {
    background: var(--light);
    border-left: .5rem solid var(--blood);
    border-right: .5rem solid var(--blood);
    box-sizing: border-box;
    width: 1000px;
  }

  header {}

  main {}

  footer {}
}"
MyLTm4pJ,UserDetailsServiceImpl.java,xXGoziXx,Java,Wednesday 27th of December 2023 05:09:03 AM CDT,"package com.SmartHealthcare.helpers;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Component;

import com.SmartHealthcare.daos.UserDao;
import com.SmartHealthcare.entities.User;

@Component
public class UserDetailsServiceImpl implements UserDetailsService {

    @Autowired
    private UserDao userRepository;

    private static final Logger logger = LoggerFactory.getLogger(UserDetailsServiceImpl.class);

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {

        logger.debug(""Entering in loadUserByUsername Method..."");
        User user = userRepository.findByEmail(email);
        if (user == null) {
            logger.error(""Email not found: "" + email);
            throw new UsernameNotFoundException(""could not found user..!!"");
        }
        logger.info(""User Authenticated Successfully..!!!"");
        return new CustomUserDetails(user);
    }
}"
LJzdt8yA,CustomUserDetails.java,xXGoziXx,Java,Wednesday 27th of December 2023 05:07:12 AM CDT,"package com.SmartHealthcare.helpers;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import com.SmartHealthcare.entities.User;

public class CustomUserDetails extends User implements UserDetails {

    private String email;
    private String password;
    Collection<? extends GrantedAuthority> authorities;

    public CustomUserDetails(User byEmail) {
        this.email = byEmail.getEmail();
        this.password = byEmail.getPassword();
        List<GrantedAuthority> auths = new ArrayList<>();
        auths.add(new SimpleGrantedAuthority(byEmail.getRole().toUpperCase()));
        this.authorities = auths;
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return authorities;
    }

    @Override
    public String getPassword() {
        return password;
    }

    @Override
    public String getUsername() {
        return email;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }
}"
sg8YUkv3,12,nq1s788,Python,Wednesday 27th of December 2023 04:45:30 AM CDT,"s = ""8""*1000
while '999' in s or '888' in s:
    if '888' in s:
        s = s.replace('888' , '9' , 1)
    else:
        s = s.replace('999','8',1)
print(s)"
uLqpvKFv,Untitled,kwest87,C#,Wednesday 27th of December 2023 04:37:43 AM CDT,"using System;

namespace ConsoleApp13
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const int CommandSetName = 1;
            const int CommandSetPassword = 2;
            const int CommandChangePassword = 3;
            const int CommandExit = 4;

            int userCommandInput;
            string userName;
            string userPassword = """";
            string userOldPassword;
            bool isWork = true;

            while (isWork)
            {
                Console.WriteLine($""Введите команду : \n {CommandSetName}) Установить имя\n {CommandSetPassword}) Установить пароль"" +
                    $""\n {CommandChangePassword}) Изменить пароль\n {CommandExit}) Выход"");
                userCommandInput = Convert.ToInt32(Console.ReadLine());

                switch (userCommandInput)
                {
                    case CommandSetName:
                        Console.WriteLine(""Установите имя"");
                        userName = Console.ReadLine();
                        break;

                    case CommandSetPassword:
                        Console.WriteLine(""Установите пароль"");
                        userPassword = Console.ReadLine();
                        break;

                    case CommandChangePassword:
                        Console.WriteLine(""Для замены пароля введите старый пароль : "");
                        userOldPassword = Console.ReadLine();

                        if (userOldPassword == userPassword)
                        {
                            Console.WriteLine(""Введите новый пароль : "");
                            userPassword = Console.ReadLine();
                        }
                        else
                        {
                            Console.WriteLine(""Пароль не подходит."");
                        }
                        break;

                    case CommandExit:
                        isWork = false;
                        break;
                }
            }
        }
    }
}"
3Unbs3bS,Paperzoom,nailacrooc12,C#,Wednesday 27th of December 2023 04:28:15 AM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ZoomPaper : MonoBehaviour
{
    public Camera perspectiveCamera; // Assign your perspective camera in the inspector
	private Vector3 paperNewPosition;
	public float zoomAmount;
	private bool oneTimeOpen = false;
    private Vector3 originalPosition;
    private Quaternion originalRotation;
    private bool isInteracting = false;
	OpenBox boxOpened;

    void Start()
    {
		boxOpened = FindObjectOfType<OpenBox>();
        originalPosition = transform.position;
        originalRotation = transform.rotation;
    }

    void OnMouseDown()
    {
        if (perspectiveCamera != null && !perspectiveCamera.orthographic)
        {
            if (!isInteracting)
            {
                // Move the object closer to the camera
                transform.position = perspectiveCamera.transform.position + perspectiveCamera.transform.forward * zoomAmount;
                // Allow the object to be rotated
                isInteracting = true;
            }
			
        }
    }

    void Update()
    {	
		if(boxOpened.boxOpened && !oneTimeOpen){
			paperNewPosition = transform.position;
			oneTimeOpen = true;
		}
		
		//Change to: If anything is clicked, then revert to orig position
        if (isInteracting && Input.GetKeyDown(KeyCode.Space))
        {
            // Reset the position and rotation of the object
            transform.position = paperNewPosition;
            transform.rotation = originalRotation;
            isInteracting = false;
        }
    }
}
"
WiJ0n84N,user.java,xXGoziXx,Java,Wednesday 27th of December 2023 04:01:22 AM CDT,"package com.SmartHealthcare.entities;

import org.springframework.beans.BeanUtils;

import com.SmartHealthcare.dtos.DoctorRegisterDto;
import com.SmartHealthcare.dtos.UserLoginResponse;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;

@Entity
@Data
@ToString
@NoArgsConstructor
@AllArgsConstructor
@Table(name = ""user"")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private int id;

    private String firstName;

    private String lastName;

    private String gender;

    private String bloodGroup;

    private String email;

    private String role;

    private String mobile;

    private String city;

    private int status;

    private String specialist;

    private String password;

    private String dob;

    private String registerDate;

    private String doctorImage;

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public int getStatus() {
        return status;
    }

    public void setStatus(int status) {
        this.status = status;
    }

    public String getSpecialist() {
        return specialist;
    }

    public void setSpecialist(String specialist) {
        this.specialist = specialist;
    }

    public String getBloodGroup() {
        return bloodGroup;
    }

    public void setBloodGroup(String bloodGroup) {
        this.bloodGroup = bloodGroup;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getMobile() {
        return mobile;
    }

    public void setMobile(String mobile) {
        this.mobile = mobile;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getDOB() {
        return dob;
    }

    public void setDOB(String DOB) {
        this.dob = dob;
    }

    public String getRegisterDate() {
        return registerDate;
    }

    public void setRegisterDate(String registerDate) {
        this.registerDate = registerDate;
    }

    public String getDoctorImage() {
        return doctorImage;
    }

    public void setDoctorImage(String doctorImage) {
        this.doctorImage = doctorImage;
    }

    public static UserLoginResponse toUserLoginResponse(User user) {
        UserLoginResponse userLoginResponse = new UserLoginResponse();
        BeanUtils.copyProperties(user, userLoginResponse, ""password"");
        return userLoginResponse;
    }

    public static DoctorRegisterDto toUserDto(User user) {
        DoctorRegisterDto userDto = new DoctorRegisterDto();
        BeanUtils.copyProperties(user, userDto, ""password"");
        return userDto;
    }

}
"
uEnR26br,Wa C++,Zuhairy_Harry,C++,Wednesday 27th of December 2023 03:59:06 AM CDT,"// Display the result for each row
cout << setw(6) << ""ID"" << setw(20) << ""Name"" << ""\t"" << setw(12) << ""Number Phone"" << ""\t"" << setw(30) << ""Email"" << setw(5) << ""Gender"" << ""\t"" << setw(20) << ""Appointment"" << endl;
cout << setw(6) << left << row[0] << ""\t"" << setw(20) << left << row[1] << ""\t"" << setw(12) << left << row[2] << ""\t"" << setw(30) << left << row[3] << ""\t"" << setw(5) << left << row[4] << ""\t"" << setw(20) << left << row[5] << endl;"
Qe2ERZ50,2023-200_most_used_passwords.txt,FlyFar,Email,Wednesday 27th of December 2023 03:31:03 AM CDT,"123456
admin
12345678
123456789
1234
12345
password
123
Aa123456
1234567890
UNKNOWN
1234567
123123
111111
Password
12345678910
000000
admin123
********
user
1111
P@ssw0rd
root
654321
qwerty
Pass@123
******
112233
102030
ubnt
abc123
Aa@123456
abcd1234
1q2w3e4r
123321
err
qwertyuiop
87654321
987654321
Eliska81
123123123
11223344
987654321
demo
12341234
qwerty123
Admin@123
1q2w3e4r5t
11111111
pass
Demo@123
**********
azerty
admintelecom
Admin
123meklozed
666666
123456789
121212
1234qwer
admin@123
1qaz2wsx
*************
123456789a
Aa112233
asdfghjkl
Password1
888888
admin1
test
Aa123456@
asd123
qwer1234
123qwe
202020
asdf1234
Abcd@1234
banned
12344321
aa123456
1122334455
Abcd1234
guest
88888888
Admin123
secret
1122
admin1234
administrator
Password@123
q1w2e3r4
10203040
a123456
12345678a
555555
zxcvbnm
welcome
Abcd@123
Welcome@123
minecraft
101010
Pass@1234
123654
123456a
India@123
Ar123455
159357
qwe123
54321
password1
1029384756
1234567891
vodafone
jimjim30
Cindylee1
1111111111
azertyuiop
999999
adminHW
10203
gvt12345
12121212
12345678901
222222
7777777
12345678900
Kumar@123
147258
qwerty12345
asdasd
abc12345
bismillah
Heslo1234
1111111
a123456789
iloveyou
Passw0rd
aaaaaa
Flores123
12qwaszx
Welcome1
password123
123mudar
123456aA@
123qweasd
868689849
1234554321
motorola
q1w2e3r4t5
1234512345
undefined
1q2w3e
a1b2c3d4
admin123456
2402301978
Qwerty123
1qazxsw2
test123
Adam2312
Password123
1234567899
Aa195043
Test@123
111111111
admin12345
zaq12wsx
adminadmin
ADMIN
1234abcd
Menara
qwerty1234
123abc
theworldinyourhand
123456a@
Aa102030
987654
Mm123456
p@ssw0rd
Abc@1234
131313
1a2b3c4d
123654789
changeme
12345679
student
senha123
1234567a
user1234
abc123456
master
12345qwert
1234561
adminisp
azerty123
pakistan
aaaaaaaa
a1234567
P@55w0rd
P@$$w0rd
qwerty123456"
pzfmbZsk,FWD MAX,mamk1222,JavaScript,Wednesday 27th of December 2023 02:52:37 AM CDT,"var obj = JSON.parse($response.body);

obj.totalQueueingCount = 2;

// Finish
$done({
    body: JSON.stringify(obj)
})
"
R37ghcPw,UpdatePurchaseInvoice,BlackBoY_,JSON,Wednesday 27th of December 2023 02:27:51 AM CDT,"{
    ""docname"": ""ACC-PINV-2023-00062"",
    ""updates"":{
        ""supplier"": ""PT. Jasa STNK Indonesia"",
        ""supplier_name"": ""PT. Jasa STNK Indonesia"",
        ""company"": ""Kopkar Toyota"",
        ""posting_date"": ""2023-12-19"",
        ""due_date"": ""2023-12-25"",
        ""bill_no"": ""JSI-2023-13-00001"",
        ""bill_date"": ""2023-12-19"",
        ""credit_to"": ""210-10"",
        ""items"":[
            {
            ""item_code"": ""Jasa STNK"",
            ""item_name"": ""Jasa STNK"",
            ""description"": ""Jasa STNK"",
            ""qty"":1,
            ""rate"":3000000,
            ""parentfield"": ""items"",
            ""expense_account"": ""510-12"",
            ""cost_center"": ""Main - Kopkar Toyota"",
            ""parenttype"": ""Purchase Invoice"",
            ""doctype"": ""Purchase Invoice Item""
            }
            ]
        }
}
            "
2L1L5ntL,UpdateSalesInvoice,BlackBoY_,JSON,Wednesday 27th of December 2023 02:13:56 AM CDT,"{
    ""docname"": ""ACC-SINV-2023-00147"",
    ""updates"":{
        ""customer"": ""Anggota"",
        ""company"": ""Kopkar Toyota"",
        ""posting_date"": ""2023-12-19"",
        ""due_date"": ""2023-12-19"",
        ""items"":[
            {
            ""item_name"": ""Perpanjangan STNK"",
            ""description"": ""Perpanjangan STNK"",
            ""qty"":1,
            ""rate"":3000000,
            ""income_account"": ""410-12"",
            ""debit_to"": ""130-10"",
            ""parentfield"": ""items"",
            ""parenttype"": ""Sales Invoice"",
            ""doctype"": ""Sales Invoice Item""
            }
        ]
    }
}
            "
