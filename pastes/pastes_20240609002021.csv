id,title,username,language,date,content
S7aS6BX0,üéÅG2A.com Free Gift Card Guide June 2024 FIXüéÅ,kaka440ka,GetText,Saturday 8th of June 2024 07:18:51 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
June 09 2024."
2Vbn6Rvi,2024-06-08_stats.json,rdp_snitch,JSON,Saturday 8th of June 2024 07:18:22 PM CDT,"{
  ""ip"": {
    ""43.134.86.3"": 138,
    ""213.109.202.238"": 6,
    ""116.182.20.8"": 6,
    ""64.124.50.139"": 9,
    ""103.47.194.156"": 3,
    ""178.236.247.219"": 18,
    ""147.185.132.102"": 9,
    ""212.70.149.142"": 9,
    ""194.169.175.41"": 3,
    ""185.170.144.3"": 6,
    ""45.227.254.54"": 12,
    ""194.180.49.249"": 3,
    ""147.185.132.150"": 9,
    ""116.140.196.215"": 3,
    ""91.238.181.71"": 12,
    ""47.121.30.26"": 3,
    ""189.15.3.169"": 3,
    ""134.122.10.231"": 12,
    ""165.154.129.130"": 3,
    ""190.85.232.116"": 3,
    ""147.185.132.31"": 9,
    ""187.157.89.218"": 3,
    ""157.97.121.250"": 3,
    ""87.251.75.64"": 3,
    ""64.91.254.24"": 9,
    ""167.94.138.32"": 3,
    ""194.165.16.72"": 6,
    ""198.235.24.114"": 9,
    ""94.232.247.117"": 3
  },
  ""asn"": {
    ""AS132203"": 138,
    ""AS208312"": 6,
    ""AS137539"": 6,
    ""AS6461"": 9,
    ""AS140832"": 3,
    ""AS210644"": 18,
    ""AS396982"": 36,
    ""AS204428"": 9,
    ""AS209605"": 3,
    ""AS197414"": 6,
    ""AS267784"": 12,
    ""AS201814"": 3,
    ""AS4837"": 3,
    ""AS49434"": 12,
    ""AS37963"": 3,
    ""AS53006"": 3,
    ""AS14061"": 12,
    ""AS135377"": 3,
    ""AS14080"": 3,
    ""AS8151"": 3,
    ""AS396356"": 3,
    ""AS208091"": 3,
    ""AS32244"": 9,
    ""AS398324"": 3,
    ""AS48721"": 6,
    ""AS44477"": 3
  },
  ""isp"": {
    ""Shenzhen Tencent Computer Systems Company Limited"": 138,
    ""Red Byte LLC"": 6,
    ""China Unicom CHINA169 Network"": 9,
    ""Zayo Bandwidth"": 9,
    ""FTECH"": 3,
    ""FAST"": 18,
    ""Google LLC"": 36,
    ""SS-Net"": 9,
    ""UAB Host Baltic"": 3,
    ""Xhost Internet Solutions LP"": 9,
    ""Flyservers S.A."": 18,
    ""MEVSPACE sp. z o.o."": 3,
    ""Datacenter location PAR1 France"": 12,
    ""Hangzhou Alibaba Advertising Co., Ltd."": 3,
    ""ALGAR TELECOM S/A"": 3,
    ""DigitalOcean, LLC"": 12,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Telmex Colombia S.A."": 3,
    ""Uninet S.A. de C.V."": 3,
    ""Consumer-Network"": 3,
    ""Liquid Web, L.L.C"": 9,
    ""Censys, Inc."": 3,
    ""Stark Industries Solutions LTD"": 3
  },
  ""org"": {
    ""Tencent Cloud Computing"": 138,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Unknown"": 30,
    ""Microsoft Corporation"": 9,
    ""Palo Alto Networks, Inc"": 36,
    ""Global Communication Net Plc"": 9,
    ""EmanuelHosting LTD"": 3,
    ""Xhostis"": 6,
    ""UAB Host Baltic"": 12,
    ""HostSlick"": 3,
    ""China United Network Communications Corporation Limited"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 12,
    ""Aliyun Computing Co., LTD"": 3,
    ""ALGAR TELECOM S/A"": 3,
    ""DigitalOcean, LLC"": 12,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Telmex Colombia S.A"": 3,
    ""Uninet S.A. de C.V."": 3,
    ""Xhost Internet Solutions"": 3,
    ""SourceDNS"": 9,
    ""Censys, Inc"": 3,
    ""Flyservers S.A"": 6,
    ""Stark Industries Solutions LTD"": 3
  },
  ""regionName"": {
    ""North West"": 138,
    ""Moscow"": 6,
    ""Beijing"": 9,
    ""Washington"": 9,
    ""Hanoi"": 3,
    ""Mazovia"": 18,
    ""California"": 36,
    ""Sofia-Capital"": 9,
    ""Kaunas"": 9,
    ""North Holland"": 9,
    ""Vilnius"": 12,
    ""Virginia"": 3,
    ""\u00cele-de-France"": 15,
    ""Guangdong"": 3,
    ""S\u00e3o Paulo"": 3,
    ""New Jersey"": 15,
    ""England"": 3,
    ""Bogota D.C."": 3,
    ""Mexico City"": 3,
    ""Michigan"": 12
  },
  ""country"": {
    ""Singapore"": 138,
    ""Russia"": 6,
    ""China"": 12,
    ""United States"": 75,
    ""Vietnam"": 3,
    ""Poland"": 18,
    ""Bulgaria"": 9,
    ""Lithuania"": 21,
    ""The Netherlands"": 9,
    ""France"": 15,
    ""Brazil"": 3,
    ""United Kingdom"": 3,
    ""Colombia"": 3,
    ""Mexico"": 3
  },
  ""account"": {
    ""hello"": 174,
    ""Test"": 45,
    ""(empty)"": 21,
    ""Domain"": 18,
    ""oFTkuPCBH"": 3,
    ""uyxdov"": 3,
    ""ssWAST"": 3,
    ""Administr"": 21,
    ""CecLBilSN"": 3,
    ""dZPlta"": 3,
    ""uhiqwD"": 3,
    ""Administrator"": 3,
    ""AozaByvrL"": 3,
    ""jHoIYx"": 3,
    ""xgnkMO"": 3,
    ""GKRqISLEb"": 3,
    ""kOqMhV"": 3,
    ""FHtpuQ"": 3
  },
  ""keyboard"": {
    ""Unknown"": 318
  },
  ""client_build"": {
    ""Unknown"": 318
  },
  ""client_name"": {
    ""Unknown"": 318
  },
  ""ip_type"": {
    ""hosting"": 213,
    ""proxy"": 12,
    ""Unknown"": 93
  }
}"
CpQHhjg9,üí≤ G2A.com Free Gift Card Guide 09 June 2024 üí≤,portalxwe,GetText,Saturday 8th of June 2024 07:17:19 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here;
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of;
09 June 2024"
8EHnczQa,2024-06-08_stats.json,rdp_snitch,JSON,Saturday 8th of June 2024 07:16:05 PM CDT,"{
  ""ip"": {
    ""43.134.86.3"": 92,
    ""213.109.202.238"": 4,
    ""116.182.20.8"": 4,
    ""64.124.50.139"": 6,
    ""103.47.194.156"": 2,
    ""178.236.247.219"": 12,
    ""147.185.132.102"": 6,
    ""212.70.149.142"": 6,
    ""194.169.175.41"": 2,
    ""185.170.144.3"": 4,
    ""45.227.254.54"": 8,
    ""194.180.49.249"": 2,
    ""147.185.132.150"": 6,
    ""116.140.196.215"": 2,
    ""91.238.181.71"": 8,
    ""47.121.30.26"": 2,
    ""189.15.3.169"": 2,
    ""134.122.10.231"": 8,
    ""165.154.129.130"": 2,
    ""190.85.232.116"": 2,
    ""147.185.132.31"": 6,
    ""187.157.89.218"": 2,
    ""157.97.121.250"": 2,
    ""87.251.75.64"": 2,
    ""64.91.254.24"": 6,
    ""167.94.138.32"": 2,
    ""194.165.16.72"": 4,
    ""198.235.24.114"": 6,
    ""94.232.247.117"": 2
  },
  ""asn"": {
    ""AS132203"": 92,
    ""AS208312"": 4,
    ""AS137539"": 4,
    ""AS6461"": 6,
    ""AS140832"": 2,
    ""AS210644"": 12,
    ""AS396982"": 24,
    ""AS204428"": 6,
    ""AS209605"": 2,
    ""AS197414"": 4,
    ""AS267784"": 8,
    ""AS201814"": 2,
    ""AS4837"": 2,
    ""AS49434"": 8,
    ""AS37963"": 2,
    ""AS53006"": 2,
    ""AS14061"": 8,
    ""AS135377"": 2,
    ""AS14080"": 2,
    ""AS8151"": 2,
    ""AS396356"": 2,
    ""AS208091"": 2,
    ""AS32244"": 6,
    ""AS398324"": 2,
    ""AS48721"": 4,
    ""AS44477"": 2
  },
  ""isp"": {
    ""Shenzhen Tencent Computer Systems Company Limited"": 92,
    ""Red Byte LLC"": 4,
    ""China Unicom CHINA169 Network"": 6,
    ""Zayo Bandwidth"": 6,
    ""FTECH"": 2,
    ""FAST"": 12,
    ""Google LLC"": 24,
    ""SS-Net"": 6,
    ""UAB Host Baltic"": 2,
    ""Xhost Internet Solutions LP"": 6,
    ""Flyservers S.A."": 12,
    ""MEVSPACE sp. z o.o."": 2,
    ""Datacenter location PAR1 France"": 8,
    ""Hangzhou Alibaba Advertising Co., Ltd."": 2,
    ""ALGAR TELECOM S/A"": 2,
    ""DigitalOcean, LLC"": 8,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Telmex Colombia S.A."": 2,
    ""Uninet S.A. de C.V."": 2,
    ""Consumer-Network"": 2,
    ""Liquid Web, L.L.C"": 6,
    ""Censys, Inc."": 2,
    ""Stark Industries Solutions LTD"": 2
  },
  ""org"": {
    ""Tencent Cloud Computing"": 92,
    ""Chang Way Technologies Co. Limited"": 4,
    ""Unknown"": 20,
    ""Microsoft Corporation"": 6,
    ""Palo Alto Networks, Inc"": 24,
    ""Global Communication Net Plc"": 6,
    ""EmanuelHosting LTD"": 2,
    ""Xhostis"": 4,
    ""UAB Host Baltic"": 8,
    ""HostSlick"": 2,
    ""China United Network Communications Corporation Limited"": 2,
    ""ThinkTech Technology Industrial CO. Limited"": 8,
    ""Aliyun Computing Co., LTD"": 2,
    ""ALGAR TELECOM S/A"": 2,
    ""DigitalOcean, LLC"": 8,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Telmex Colombia S.A"": 2,
    ""Uninet S.A. de C.V."": 2,
    ""Xhost Internet Solutions"": 2,
    ""SourceDNS"": 6,
    ""Censys, Inc"": 2,
    ""Flyservers S.A"": 4,
    ""Stark Industries Solutions LTD"": 2
  },
  ""regionName"": {
    ""North West"": 92,
    ""Moscow"": 4,
    ""Beijing"": 6,
    ""Washington"": 6,
    ""Hanoi"": 2,
    ""Mazovia"": 12,
    ""California"": 24,
    ""Sofia-Capital"": 6,
    ""Kaunas"": 6,
    ""North Holland"": 6,
    ""Vilnius"": 8,
    ""Virginia"": 2,
    ""\u00cele-de-France"": 10,
    ""Guangdong"": 2,
    ""S\u00e3o Paulo"": 2,
    ""New Jersey"": 10,
    ""England"": 2,
    ""Bogota D.C."": 2,
    ""Mexico City"": 2,
    ""Michigan"": 8
  },
  ""country"": {
    ""Singapore"": 92,
    ""Russia"": 4,
    ""China"": 8,
    ""United States"": 50,
    ""Vietnam"": 2,
    ""Poland"": 12,
    ""Bulgaria"": 6,
    ""Lithuania"": 14,
    ""The Netherlands"": 6,
    ""France"": 10,
    ""Brazil"": 2,
    ""United Kingdom"": 2,
    ""Colombia"": 2,
    ""Mexico"": 2
  },
  ""account"": {
    ""hello"": 116,
    ""Test"": 30,
    ""(empty)"": 14,
    ""Domain"": 12,
    ""oFTkuPCBH"": 2,
    ""uyxdov"": 2,
    ""ssWAST"": 2,
    ""Administr"": 14,
    ""CecLBilSN"": 2,
    ""dZPlta"": 2,
    ""uhiqwD"": 2,
    ""Administrator"": 2,
    ""AozaByvrL"": 2,
    ""jHoIYx"": 2,
    ""xgnkMO"": 2,
    ""GKRqISLEb"": 2,
    ""kOqMhV"": 2,
    ""FHtpuQ"": 2
  },
  ""keyboard"": {
    ""Unknown"": 212
  },
  ""client_build"": {
    ""Unknown"": 212
  },
  ""client_name"": {
    ""Unknown"": 212
  },
  ""ip_type"": {
    ""hosting"": 142,
    ""proxy"": 8,
    ""Unknown"": 62
  }
}"
rU6jpDtF,ü§ëG2A.com Free Gift Card Guide June 2024 FIXü§ë,x2w,GetText,Saturday 8th of June 2024 07:16:00 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here;
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of;
June 09 2024"
97bnSzJR,2024-06-08_stats.json,rdp_snitch,JSON,Saturday 8th of June 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""43.134.86.3"": 46,
    ""213.109.202.238"": 2,
    ""116.182.20.8"": 2,
    ""64.124.50.139"": 3,
    ""103.47.194.156"": 1,
    ""178.236.247.219"": 6,
    ""147.185.132.102"": 3,
    ""212.70.149.142"": 3,
    ""194.169.175.41"": 1,
    ""185.170.144.3"": 2,
    ""45.227.254.54"": 4,
    ""194.180.49.249"": 1,
    ""147.185.132.150"": 3,
    ""116.140.196.215"": 1,
    ""91.238.181.71"": 4,
    ""47.121.30.26"": 1,
    ""189.15.3.169"": 1,
    ""134.122.10.231"": 4,
    ""165.154.129.130"": 1,
    ""190.85.232.116"": 1,
    ""147.185.132.31"": 3,
    ""187.157.89.218"": 1,
    ""157.97.121.250"": 1,
    ""87.251.75.64"": 1,
    ""64.91.254.24"": 3,
    ""167.94.138.32"": 1,
    ""194.165.16.72"": 2,
    ""198.235.24.114"": 3,
    ""94.232.247.117"": 1
  },
  ""asn"": {
    ""AS132203"": 46,
    ""AS208312"": 2,
    ""AS137539"": 2,
    ""AS6461"": 3,
    ""AS140832"": 1,
    ""AS210644"": 6,
    ""AS396982"": 12,
    ""AS204428"": 3,
    ""AS209605"": 1,
    ""AS197414"": 2,
    ""AS267784"": 4,
    ""AS201814"": 1,
    ""AS4837"": 1,
    ""AS49434"": 4,
    ""AS37963"": 1,
    ""AS53006"": 1,
    ""AS14061"": 4,
    ""AS135377"": 1,
    ""AS14080"": 1,
    ""AS8151"": 1,
    ""AS396356"": 1,
    ""AS208091"": 1,
    ""AS32244"": 3,
    ""AS398324"": 1,
    ""AS48721"": 2,
    ""AS44477"": 1
  },
  ""isp"": {
    ""Shenzhen Tencent Computer Systems Company Limited"": 46,
    ""Red Byte LLC"": 2,
    ""China Unicom CHINA169 Network"": 3,
    ""Zayo Bandwidth"": 3,
    ""FTECH"": 1,
    ""FAST"": 6,
    ""Google LLC"": 12,
    ""SS-Net"": 3,
    ""UAB Host Baltic"": 1,
    ""Xhost Internet Solutions LP"": 3,
    ""Flyservers S.A."": 6,
    ""MEVSPACE sp. z o.o."": 1,
    ""Datacenter location PAR1 France"": 4,
    ""Hangzhou Alibaba Advertising Co., Ltd."": 1,
    ""ALGAR TELECOM S/A"": 1,
    ""DigitalOcean, LLC"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Telmex Colombia S.A."": 1,
    ""Uninet S.A. de C.V."": 1,
    ""Consumer-Network"": 1,
    ""Liquid Web, L.L.C"": 3,
    ""Censys, Inc."": 1,
    ""Stark Industries Solutions LTD"": 1
  },
  ""org"": {
    ""Tencent Cloud Computing"": 46,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Unknown"": 10,
    ""Microsoft Corporation"": 3,
    ""Palo Alto Networks, Inc"": 12,
    ""Global Communication Net Plc"": 3,
    ""EmanuelHosting LTD"": 1,
    ""Xhostis"": 2,
    ""UAB Host Baltic"": 4,
    ""HostSlick"": 1,
    ""China United Network Communications Corporation Limited"": 1,
    ""ThinkTech Technology Industrial CO. Limited"": 4,
    ""Aliyun Computing Co., LTD"": 1,
    ""ALGAR TELECOM S/A"": 1,
    ""DigitalOcean, LLC"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Telmex Colombia S.A"": 1,
    ""Uninet S.A. de C.V."": 1,
    ""Xhost Internet Solutions"": 1,
    ""SourceDNS"": 3,
    ""Censys, Inc"": 1,
    ""Flyservers S.A"": 2,
    ""Stark Industries Solutions LTD"": 1
  },
  ""regionName"": {
    ""North West"": 46,
    ""Moscow"": 2,
    ""Beijing"": 3,
    ""Washington"": 3,
    ""Hanoi"": 1,
    ""Mazovia"": 6,
    ""California"": 12,
    ""Sofia-Capital"": 3,
    ""Kaunas"": 3,
    ""North Holland"": 3,
    ""Vilnius"": 4,
    ""Virginia"": 1,
    ""\u00cele-de-France"": 5,
    ""Guangdong"": 1,
    ""S\u00e3o Paulo"": 1,
    ""New Jersey"": 5,
    ""England"": 1,
    ""Bogota D.C."": 1,
    ""Mexico City"": 1,
    ""Michigan"": 4
  },
  ""country"": {
    ""Singapore"": 46,
    ""Russia"": 2,
    ""China"": 4,
    ""United States"": 25,
    ""Vietnam"": 1,
    ""Poland"": 6,
    ""Bulgaria"": 3,
    ""Lithuania"": 7,
    ""The Netherlands"": 3,
    ""France"": 5,
    ""Brazil"": 1,
    ""United Kingdom"": 1,
    ""Colombia"": 1,
    ""Mexico"": 1
  },
  ""account"": {
    ""hello"": 58,
    ""Test"": 15,
    ""(empty)"": 7,
    ""Domain"": 6,
    ""oFTkuPCBH"": 1,
    ""uyxdov"": 1,
    ""ssWAST"": 1,
    ""Administr"": 7,
    ""CecLBilSN"": 1,
    ""dZPlta"": 1,
    ""uhiqwD"": 1,
    ""Administrator"": 1,
    ""AozaByvrL"": 1,
    ""jHoIYx"": 1,
    ""xgnkMO"": 1,
    ""GKRqISLEb"": 1,
    ""kOqMhV"": 1,
    ""FHtpuQ"": 1
  },
  ""keyboard"": {
    ""Unknown"": 106
  },
  ""client_build"": {
    ""Unknown"": 106
  },
  ""client_name"": {
    ""Unknown"": 106
  },
  ""ip_type"": {
    ""hosting"": 71,
    ""proxy"": 4,
    ""Unknown"": 31
  }
}"
L22J2ZfD,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,guywithabigheart,JavaScript,Saturday 8th of June 2024 07:14:39 PM CDT,"G2A.com complimentary gift card & games guide.
Any gift card for free on G2A.com including Xbox gift cards & all else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
June 7nd 2024

"
GrLYf1ej,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,PetrikDev,JavaScript,Saturday 8th of June 2024 07:08:40 PM CDT,"G2A.com complimentary voucher & gaming guide.
Any item for free on G2A.com including Playstation gift cards & anything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
7nd of June 2024

"
UCewbchW,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,x3kiN,JavaScript,Saturday 8th of June 2024 07:02:41 PM CDT,"G2A.com free gift card & games guide.
Any gift card for free on G2A.com including Playstation gift cards & all else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
7nd of June 2024

"
8fvRCPmC,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,FeasModz514,JavaScript,Saturday 8th of June 2024 06:56:42 PM CDT,"G2A.com free voucher & games guide.
Any voucher for free on G2A.com including Steam gift cards & everything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
June 7 2024

"
QB2Ac1S8,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,kiraezwhethe,JavaScript,Saturday 8th of June 2024 06:50:43 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any gift card for free on G2A.com including Steam gift cards & all else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
7nd of June 2024

"
dNEhk5Qv,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,ColtM4A2,JavaScript,Saturday 8th of June 2024 06:44:40 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
June 7 2024

"
xRKGiJwy,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,Skarface-MKL,JavaScript,Saturday 8th of June 2024 06:38:41 PM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Steam gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
7nd of June 2024

"
NT43Tmn5,snowybot 2024 again,coinwalk,JavaScript,Saturday 8th of June 2024 06:37:17 PM CDT,"var elderly = parseFloat(document.getElementById('pct_balance').value);
var belance = elderly;
var prefit = Number((elderly/240).toFixed(7));
var beast = prefit;
var winnerdinner = elderly;
var tens = (prefit*8);
var fives = (prefit*3.9);
var snowie = elderly;
var great = elderly;
var fart = 7;
var greedy = Number(document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText);
var elven = 0;
var downer = 2.9;
var upper = 4.9;

 
 
function go(){
if (greedy!=elven){
great = document.getElementById('pct_balance').value;
elven = Number(document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText);
if (great>(snowie+(beast*2.9))){
    beast = beast*2;
    snowie = parseFloat(great);
}
if (great<(snowie-(beast*1.9))){
    beast = beast*2;
    snowie = parseFloat(great);
}
if ((beast>=(great/20))&&(great<elderly)){
    beast = prefit; 
    snowie = parseFloat(great);
}
if ((beast>=(great/40))&&(great>elderly)){
    beast = prefit; 
    snowie = parseFloat(great);
}
if ((beast>=(elderly/10))&&(great>elderly)){
    beast = prefit; 
    snowie = parseFloat(great);
}
var cat = ((great-elderly).toFixed(8));
console.log(""profit"");
console.log(cat);
if (great>=(winnerdinner*24))  {
    console.log(""winner winner chicken dinner"");
    return;
} 
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
}
greedy =  Number(document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText);
setTimeout(() => go(), 1);
}
 
go();"
cBPJY65k,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,thepplayz,JavaScript,Saturday 8th of June 2024 06:32:36 PM CDT,"G2A.com complimentary gift card & games guide.
Any gift card for free on G2A.com including Steam gift cards & everything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
June 7 2024

"
qjb4PUMR,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,sirmikey,JavaScript,Saturday 8th of June 2024 06:26:35 PM CDT,"G2A.com free voucher & games guide.
Any voucher for free on G2A.com including Xbox gift cards & all else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
June 7nd 2024

"
39vGnggu,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,sayid83,JavaScript,Saturday 8th of June 2024 06:20:22 PM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
June 7nd 2024

"
NmhUnA73,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,PetrikDev,JavaScript,Saturday 8th of June 2024 06:14:22 PM CDT,"G2A.com complimentary voucher & gaming guide.
Any item for free on G2A.com including Playstation gift cards & all else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
June 7 2024

"
dht8XDJh,ü§ë G2A.com Free Gift Card Guide Jun 2024 FIX ü§ë,jusst2k4,GetText,Saturday 8th of June 2024 06:11:07 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_796849.pdf

Working as of:
09 June 2024"
N2mdk2kt,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,FeasModz514,JavaScript,Saturday 8th of June 2024 06:02:21 PM CDT,"G2A.com free voucher & games guide.
Any gift card for free on G2A.com including Playstation gift cards & everything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
June 7 2024

"
Cs9PvTEm,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,kjihu25,JavaScript,Saturday 8th of June 2024 05:56:13 PM CDT,"G2A.com free voucher & gaming guide.
Any gift card for free on G2A.com including Xbox gift cards & everything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
June 7 2024

"
6f4La3cw,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,Bufayez,JavaScript,Saturday 8th of June 2024 05:50:13 PM CDT,"G2A.com complimentary gift card & games guide.
Any voucher for free on G2A.com including Amazon gift cards & everything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
June 7nd 2024

"
LfnaX8dm,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,buch,JavaScript,Saturday 8th of June 2024 05:44:13 PM CDT,"G2A.com complimentary voucher & games guide.
Any voucher for free on G2A.com including Playstation gift cards & all else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
7nd of June 2024

"
K8GeSdJG,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,Alfonso1119,JavaScript,Saturday 8th of June 2024 05:38:13 PM CDT,"G2A.com free gift card & gaming guide.
Any voucher for free on G2A.com including Playstation gift cards & anything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
June 7 2024

"
yyCdm9n1,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,Garoam,JavaScript,Saturday 8th of June 2024 05:32:11 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any voucher for free on G2A.com including Steam gift cards & everything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
7nd of June 2024

"
m4xma2MH,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,atakan1983,JavaScript,Saturday 8th of June 2024 05:26:11 PM CDT,"G2A.com free voucher & gaming guide.
Any gift card for free on G2A.com including Xbox gift cards & all else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
June 7 2024

"
CeRixYCU,tobe one good snowybot,coinwalk,JavaScript,Saturday 8th of June 2024 05:22:12 PM CDT,"var elderly = parseFloat(document.getElementById('pct_balance').value);
var belance = elderly;
var prefit = Number((elderly/24).toFixed(7));
var beast = prefit;
var winnerdinner = elderly;
var tens = (prefit*8);
var fives = (prefit*3.9);
var snowie = elderly;
var great = elderly;
var fart = 7;
var greedy = Number(document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText);
var elven = 0;
var downer = 2.9;
var upper = 4.9;

 
 
function go(){
if (greedy!=elven){
great = document.getElementById('pct_balance').value;
elven = Number(document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText);
if (great>(snowie+(beast*2.9))){
    beast = beast*2;
    snowie = parseFloat(great);
}
if (great<(snowie-(beast*1.9))){
    beast = beast*2;
    snowie = parseFloat(great);
}
if ((beast>=(great/2))&&(great<elderly)){
    beast = prefit; 
    snowie = parseFloat(great);
}
if ((beast>=(great/4))&&(great>elderly)){
    beast = prefit; 
    snowie = parseFloat(great);
}
if ((beast>=elderly)&&(great>elderly)){
    beast = prefit; 
    snowie = parseFloat(great);
}
var cat = ((great-elderly).toFixed(8));
console.log(""profit"");
console.log(cat);
if (great>=(winnerdinner*24))  {
    console.log(""winner winner chicken dinner"");
    return;
} 
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
}
greedy =  Number(document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText);
setTimeout(() => go(), 1);
}
 
go();"
26fBDHUa,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,bgill55,JavaScript,Saturday 8th of June 2024 05:19:08 PM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Xbox gift cards & anything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
7nd of June 2024

"
BeXd12Zz,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,FreeRobux12345,JavaScript,Saturday 8th of June 2024 05:13:09 PM CDT,"G2A.com complimentary voucher & games guide.
Any voucher for free on G2A.com including Xbox gift cards & all else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
June 7nd 2024

"
DmZbctvV,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,coderpradip,JavaScript,Saturday 8th of June 2024 05:07:10 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any item for free on G2A.com including Amazon gift cards & anything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
June 7nd 2024

"
eqN7FWj2,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,mikyser,JavaScript,Saturday 8th of June 2024 05:01:12 PM CDT,"G2A.com free voucher & gaming guide.
Any gift card for free on G2A.com including Steam gift cards & all else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
June 7nd 2024

"
W5E94rfZ,snowybot 2024 again good,coinwalk,JavaScript,Saturday 8th of June 2024 05:01:10 PM CDT,"var elderly = parseFloat(document.getElementById('pct_balance').value);
var belance = elderly;
var prefit = Number((elderly/240).toFixed(8));
var beast = prefit;
var winnerdinner = elderly;
var tens = (prefit*8);
var fives = (prefit*3.9);
var snowie = elderly;
var great = elderly;
var fart = 7;
var greedy = Number(document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText);
var elven = 0;
var downer = 2.9;
var upper = 4.9;

 
 
function go(){
if (greedy!=elven){
great = document.getElementById('pct_balance').value;
elven = Number(document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText);
if (great>(snowie+(beast*2.9))){
    beast = beast*2;
    snowie = parseFloat(great);
}
if (great<(snowie-(beast*1.9))){
    beast = beast*2;
    snowie = parseFloat(great);
}
if (beast>=(great/40)){
    beast = prefit; 
    snowie = parseFloat(great);
}
var cat = ((great-elderly).toFixed(8));
console.log(""profit"");
console.log(cat);
if (great>=(winnerdinner*24))  {
    console.log(""winner winner chicken dinner"");
    return;
} 
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
}
greedy =  Number(document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText);
setTimeout(() => go(), 1);
}
 
go();"
A19ARfNZ,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,Ohtaku,JavaScript,Saturday 8th of June 2024 04:55:13 PM CDT,"G2A.com complimentary gift card & games guide.
Any voucher for free on G2A.com including Xbox gift cards & anything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
June 7 2024

"
W7tquhU7,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,Elii,JavaScript,Saturday 8th of June 2024 04:49:15 PM CDT,"G2A.com complimentary gift card & games guide.
Any item for free on G2A.com including Steam gift cards & anything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
7nd of June 2024

"
exfk8byf,Knapsack - Recursive,nathanwailes,Python,Saturday 8th of June 2024 04:48:50 PM CDT,"""""""
This recursive version of the 0/1 Knapsack problem works by considering two possibilities for each item:

1. Including the item in the knapsack.
2. Excluding the item from the knapsack.

It recursively evaluates these possibilities and returns the maximum value that can be obtained.

Explanation:

- weights: A list of weights of the items.
- values: A list of values of the items.
- capacity: The maximum weight capacity of the knapsack.
- n: The number of items considered.
- The function knapsack_recursive calculates the maximum value that can be obtained by either including or excluding the current item, and then moves on to the next item accordingly. This approach ensures that all combinations of included and excluded items are considered, and the optimal solution is found.
""""""

def knapsack_recursive(weights, values, capacity, n):
    # Base case: no items left or capacity is 0
    if n == 0 or capacity == 0:
        return 0

    # If the weight of the nth item is more than the capacity, it cannot be included
    if weights[n-1] > capacity:
        return knapsack_recursive(weights, values, capacity, n-1)

    # Return the maximum value of two cases:
    # 1. nth item included
    # 2. nth item not included
    else:
        return max(
            values[n-1] + knapsack_recursive(weights, values, capacity - weights[n-1], n-1),
            knapsack_recursive(weights, values, capacity, n-1)
        )

# Example usage:
weights = [1, 2, 3, 4]
values = [1, 2, 5, 6]
capacity = 7
n = len(weights)
max_value = knapsack_recursive(weights, values, capacity, n)
print(f""Maximum value in knapsack: {max_value}"")
"
ZFefudLx,crazybot snowybot,coinwalk,JavaScript,Saturday 8th of June 2024 04:44:21 PM CDT,"var elderly = parseFloat(document.getElementById('pct_balance').value);
var belance = elderly;
var prefit = Number((elderly/240).toFixed(8));
var beast = prefit;
var winnerdinner = elderly;
var tens = (prefit*8);
var fives = (prefit*3.9);
var winnerdinner = 144000;
var snowy = elderly;
var james = elderly;
var snowie = 0;
var great = elderly;
var fart = 7;
var greedy = Number(document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText);
var elven = 0;
var downer = 2.9;
var upper = 4.9;

 
 
function go(){
if (greedy!=elven){
great = document.getElementById('pct_balance').value;
elven = Number(document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText);
if (great>(snowie+(beast*2.9))){
    beast = beast*2;
    snowie = parseFloat(great);
}
if (great<(snowie-(beast*1.9))){
    beast = beast*2;
    snowie = parseFloat(great);
}
if ((beast>=(great/40))&&(great!=snowie)&&(great>(snowie-(beast*downer)))&&(great<(snowie+(beast*2.9)))){
    beast = prefit; 

    snowie = parseFloat(great);
}
var cat = ((great-elderly).toFixed(8));
console.log(""profit"");
console.log(cat);
if (great>=(winnerdinner*2.4))  {
    console.log(""winner winner chicken dinner"");
    return;
} 
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
}
greedy =  Number(document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText);
setTimeout(() => go(), 1);
}
 
go();"
HHW3DRx2,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,guywithabigheart,JavaScript,Saturday 8th of June 2024 04:43:16 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any gift card for free on G2A.com including Playstation gift cards & all else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
7nd of June 2024

"
2S8KVhrd,Knapsack - DP,nathanwailes,Python,Saturday 8th of June 2024 04:43:08 PM CDT,"""""""
This function knapsack takes the weights and values of the items, as well as the capacity of the knapsack, and returns the maximum value that can be obtained.

Explanation:

- weights: A list of weights of the items.
- values: A list of values of the items.
- capacity: The maximum weight capacity of the knapsack.
- dp[i][w]: Represents the maximum value that can be obtained using the first i items with a knapsack capacity of w.
- The algorithm uses a 2D list dp where dp[i][w] represents the maximum value that can be obtained with the first i items and a knapsack capacity of w. The solution builds up this table iteratively, using the property that the optimal solution to a problem can be constructed from the optimal solutions to its subproblems.
""""""

def knapsack(weights, values, capacity):
    n = len(weights)
    dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]

    for i in range(1, n + 1):
        for w in range(1, capacity + 1):
            if weights[i-1] <= w:
                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])
            else:
                dp[i][w] = dp[i-1][w]

    return dp[n][capacity]

# Example usage:
weights = [1, 2, 3, 4]
values = [1, 2, 5, 6]
capacity = 7
max_value = knapsack(weights, values, capacity)
print(f""Maximum value in knapsack: {max_value}"")"
CRiMV7WW,Sound,Gooble,Lua,Saturday 8th of June 2024 04:42:01 PM CDT,"local speaker = peripheral.find(""speaker"")

listOfInstruments = {""harp"", ""basedrum"", ""snare"", ""hat"", ""bass"", ""flute"", ""bell"", ""guitar"", ""chime"", ""xylophone"", ""iron_xylophone"", ""cow_bell"", ""didgeridoo"", ""bit"", ""banjo"", ""pling""}

for I,V in pairs(listOfInstruments) do
    speaker.playNote(V)
os.sleep(1)
end"
7d7vNhXm,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,PetrikDev,JavaScript,Saturday 8th of June 2024 04:37:17 PM CDT,"G2A.com complimentary voucher & games guide.
Any voucher for free on G2A.com including Amazon gift cards & all else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
7nd of June 2024

"
aXKTd9C8,Untitled,LynXS_,Lua,Saturday 8th of June 2024 04:35:46 PM CDT,"local v0=tonumber;local v1=string.byte;local v2=string.char;local v3=string.sub;local v4=string.gsub;local v5=string.rep;local v6=table.concat;local v7=table.insert;local v8=math.ldexp;local v9=getfenv or function() return _ENV;end ;local v10=setmetatable;local v11=pcall;local v12=select;local v13=unpack or table.unpack ;local v14=tonumber;local function v15(v16,v17,...) local v18=0;local v19;local v20;local v21;local v22;local v23;local v24;local v25;local v26;local v27;local v28;local v29;local v30;while true do if (v18==5) then v27=v24;v28=nil;function v28(...) return {...},v12(""#"",...);end v18=6;end if (v18==1) then v21=nil;function v21(v31,v32,v33) if v33 then local v70=0 -(957 -(892 + 65)) ;local v71;while true do if (v70==((0 + 0) -0)) then v71=(v31/(2^(v32-((2 -1) -0))))%(((195 + 684) -(282 + 595))^(((v33-(2 -1)) -(v32-1)) + (620 -(555 + 64)))) ;return v71-(v71%(932 -(857 + 74))) ;end end else local v72=(1067 -(68 + 997))^(v32-((2349 -1078) -(226 + 1044))) ;return (((v31%(v72 + v72))>=v72) and (569 -(367 + 201))) or (927 -(214 + 713)) ;end end v22=nil;v18=2;end if (v18==3) then v24=nil;function v24() local v34,v35,v36,v37=v1(v16,v19,v19 + (4 -(1 + 0)) );v19=v19 + 4 ;return (v37 * (16777566 -(87 + (645 -382)))) + (v36 * (65716 -(67 + 113))) + (v35 * 256) + v34 ;end v25=nil;v18=4;end if (v18==6) then v29=nil;function v29() local v38=0;local v39;local v40;local v41;local v42;local v43;local v44;local v45;local v46;local v47;while true do if (v38==(1 -0)) then v41=nil;v42=nil;v38=1 + 1 ;end if (v38==(2 + 2)) then v47=nil;while true do if (v39==(1149 -(466 + 679))) then while true do if (3~=v40) then else v47=nil;while true do local v108=0 -0 ;local v109;while true do if (v108~=0) then else v109=0;while true do if (v109==1) then if (v41~=2) then else local v152=0 -0 ;local v153;while true do if (0~=v152) then else v153=1900 -(106 + 1794) ;while true do local v159=0 + 0 ;while true do if (v159~=(0 + 0)) then else if (v153==(0 -0)) then local v164=0 -0 ;while true do if (v164~=0) then else local v168=0;while true do if (1~=v168) then else v164=1;break;end if (v168==(114 -(4 + 110))) then for v178=1,v24() do local v179=0;local v180;local v181;local v182;while true do if (v179~=0) then else v180=584 -(57 + 527) ;v181=nil;v179=1428 -(41 + 1386) ;end if (v179==(104 -(17 + 86))) then v182=nil;while true do if (v180==0) then local v188=0 + 0 ;while true do if (1==v188) then v180=1;break;end if ((0 -0)~=v188) then else v181=0 -0 ;v182=nil;v188=1;end end end if (v180==(167 -(122 + 44))) then while true do if (v181~=0) then else v182=v22();if (v21(v182,1 -0 ,1)==0) then local v192=0 -0 ;local v193;local v194;local v195;local v196;local v197;while true do if (v192==1) then v195=nil;v196=nil;v192=2;end if (v192==2) then v197=nil;while true do if (v193==1) then local v198=0 + 0 ;local v199;while true do if (v198==(0 + 0)) then v199=0;while true do if (v199==(0 -0)) then local v211=65 -(30 + 35) ;while true do if (1==v211) then v199=1 + 0 ;break;end if (v211~=0) then else v196=nil;v197=nil;v211=1258 -(1043 + 214) ;end end end if (1~=v199) then else v193=7 -5 ;break;end end break;end end end if (v193==2) then while true do if (v194~=3) then else if (v21(v196,1215 -(323 + 889) ,7 -4 )==(581 -(361 + 219))) then v197[4]=v47[v197[324 -(53 + 267) ]];end v42[v178]=v197;break;end if (v194~=0) then else local v203=0;local v204;local v205;while true do if (v203~=(1 + 0)) then else while true do if (v204==(413 -(15 + 398))) then v205=982 -(18 + 964) ;while true do if (v205==0) then v195=v21(v182,2,11 -8 );v196=v21(v182,3 + 1 ,6);v205=1;end if (v205~=1) then else v194=1 + 0 ;break;end end break;end end break;end if (0==v203) then v204=850 -(20 + 830) ;v205=nil;v203=1 + 0 ;end end end if (v194==(128 -(116 + 10))) then local v206=0;local v207;while true do if (v206==(0 + 0)) then v207=0;while true do if (v207==0) then if (v21(v196,1,1)~=1) then else v197[2]=v47[v197[2]];end if (v21(v196,2,740 -(542 + 196) )==1) then v197[3]=v47[v197[6 -3 ]];end v207=1;end if (v207~=(1 + 0)) then else v194=2 + 1 ;break;end end break;end end end if (v194~=(1 + 0)) then else local v208=0;while true do if (v208==1) then v194=2;break;end if (v208==0) then v197={v23(),v23(),nil,nil};if (v195==(405 -(118 + 287))) then local v213=0;local v214;local v215;while true do if (v213==(0 -0)) then v214=0;v215=nil;v213=1122 -(118 + 1003) ;end if (v213==(2 -1)) then while true do if (0==v214) then v215=377 -(142 + 235) ;while true do if (v215==(0 -0)) then v197[1 + 2 ]=v23();v197[981 -(553 + 424) ]=v23();break;end end break;end end break;end end elseif (v195==1) then v197[3]=v24();elseif (v195==(3 -1)) then v197[3]=v24() -((2 + 0)^16) ;elseif (v195~=3) then else local v222=0;local v223;local v224;while true do if (v222~=1) then else while true do if (v223==0) then v224=0 + 0 ;while true do if (v224==(0 + 0)) then v197[2 + 1 ]=v24() -((2 + 0)^16) ;v197[8 -4 ]=v23();break;end end break;end end break;end if (v222~=(0 -0)) then else v223=0 -0 ;v224=nil;v222=1 + 0 ;end end end v208=1;end end end end break;end if (v193==(0 -0)) then local v200=0;local v201;while true do if (v200==0) then v201=0;while true do if (v201==(754 -(239 + 514))) then v193=1;break;end if (v201==(0 + 0)) then local v212=1329 -(797 + 532) ;while true do if ((0 + 0)~=v212) then else v194=0;v195=nil;v212=1;end if (v212~=(1 + 0)) then else v201=1;break;end end end end break;end end end end break;end if (v192~=0) then else v193=0 -0 ;v194=nil;v192=1;end end end break;end end break;end end break;end end end for v183=1203 -(373 + 829) ,v24() do v43[v183-(732 -(476 + 255)) ]=v29();end v168=1131 -(369 + 761) ;end end end if ((1 + 0)==v164) then v153=1 -0 ;break;end end end if (v153==(1 -0)) then return v45;end break;end end end break;end end end break;end if (v109==0) then if (v41==(239 -(64 + 174))) then local v154=0;local v155;local v156;while true do if (v154==1) then while true do if (v155~=0) then else v156=0 + 0 ;while true do if (v156~=(0 -0)) then else local v165=336 -(144 + 192) ;local v166;while true do if (v165~=0) then else v166=216 -(42 + 174) ;while true do if (v166==(0 + 0)) then local v177=0;while true do if (v177==0) then v46=v24();v47={};v177=1;end if (v177~=(1 + 0)) then else v166=1 + 0 ;break;end end end if ((1505 -(363 + 1141))==v166) then v156=1581 -(1183 + 397) ;break;end end break;end end end if (v156~=2) then else v41=5 -3 ;break;end if (v156==1) then local v167=0 + 0 ;while true do if (1~=v167) then else v156=2;break;end if (v167~=(0 + 0)) then else for v171=1976 -(1913 + 62) ,v46 do local v172=0;local v173;local v174;local v175;local v176;while true do if ((2 + 0)==v172) then while true do if (0==v173) then local v187=0;while true do if (v187~=0) then else v174=0;v175=nil;v187=1;end if (v187==1) then v173=2 -1 ;break;end end end if (1==v173) then v176=nil;while true do if (v174==1) then if (v175==1) then v176=v22()~=(1933 -(565 + 1368)) ;elseif (v175==2) then v176=v25();elseif (v175~=3) then else v176=v26();end v47[v171]=v176;break;end if (v174==0) then local v190=0 -0 ;while true do if (0==v190) then local v191=0;while true do if (v191~=(1662 -(1477 + 184))) then else v190=1;break;end if (v191==0) then v175=v22();v176=nil;v191=1 -0 ;end end end if (v190~=(1 + 0)) then else v174=1;break;end end end end break;end end break;end if (v172==(857 -(564 + 292))) then local v185=0 -0 ;while true do if (v185==0) then v175=nil;v176=nil;v185=2 -1 ;end if (v185~=1) then else v172=2;break;end end end if (v172~=(304 -(244 + 60))) then else local v186=0 + 0 ;while true do if (v186~=(477 -(41 + 435))) then else v172=1002 -(938 + 63) ;break;end if (v186==0) then v173=0 + 0 ;v174=nil;v186=1126 -(936 + 189) ;end end end end end v45[1 + 2 ]=v22();v167=1;end end end end break;end end break;end if (v154~=(1613 -(1565 + 48))) then else v155=0;v156=nil;v154=1 + 0 ;end end end if (v41~=0) then else local v157=0;local v158;while true do if (v157==0) then v158=1138 -(782 + 356) ;while true do if (v158~=(267 -(176 + 91))) then else local v160=0;local v161;while true do if (v160==0) then v161=0 -0 ;while true do if (v161~=(0 -0)) then else local v170=1092 -(975 + 117) ;while true do if (v170==0) then v42={};v43={};v170=1;end if ((1876 -(157 + 1718))==v170) then v161=1;break;end end end if (v161~=1) then else v158=1 + 0 ;break;end end break;end end end if (v158~=2) then else v41=3 -2 ;break;end if ((3 -2)==v158) then local v162=1018 -(697 + 321) ;local v163;while true do if (v162==(0 -0)) then v163=0;while true do if (v163~=0) then else v44={};v45={v42,v43,nil,v44};v163=1;end if (v163==(2 -1)) then v158=1 + 1 ;break;end end break;end end end end break;end end end v109=1 -0 ;end end break;end end end break;end if (v40==0) then local v106=0 -0 ;while true do if (v106~=(1227 -(322 + 905))) then else local v118=0;while true do if (v118~=1) then else v106=1;break;end if (v118==0) then v41=611 -(602 + 9) ;v42=nil;v118=1;end end end if (1==v106) then v40=1;break;end end end if (1~=v40) then else v43=nil;v44=nil;v40=1191 -(449 + 740) ;end if (v40==2) then local v107=872 -(826 + 46) ;while true do if (v107~=(948 -(245 + 702))) then else v40=3;break;end if (v107==(0 -0)) then v45=nil;v46=nil;v107=1;end end end end break;end if (v39==(1 + 1)) then local v99=1898 -(260 + 1638) ;while true do if (v99==(441 -(382 + 58))) then v39=3;break;end if ((0 -0)~=v99) then else v44=nil;v45=nil;v99=1 + 0 ;end end end if (v39==(0 -0)) then local v100=0;while true do if (v100==(0 -0)) then v40=1205 -(902 + 303) ;v41=nil;v100=1;end if ((1 -0)==v100) then v39=2 -1 ;break;end end end if (v39~=3) then else v46=nil;v47=nil;v39=4;end if (v39==1) then local v101=0;while true do if (v101==(1 + 0)) then v39=2;break;end if (v101==0) then v42=nil;v43=nil;v101=1;end end end end break;end if (v38==3) then v45=nil;v46=nil;v38=4;end if (v38==(1692 -(1121 + 569))) then v43=nil;v44=nil;v38=217 -(22 + 192) ;end if (0==v38) then v39=683 -(483 + 200) ;v40=nil;v38=1464 -(1404 + 59) ;end end end v30=nil;v18=7;end if (v18==4) then function v25() local v48=v24();local v49=v24();local v50=(2 -0) -1 ;local v51=(v21(v49,1 -0 ,785 -((1233 -(574 + 191)) + 297) ) * (2^(594 -(334 + 228)))) + v48 ;local v52=v21(v49,21,104 -73 );local v53=((v21(v49,73 -41 )==(1 -0)) and  -(1 + 0)) or 1 ;if (v52==(0 + 0)) then if (v51==(236 -(141 + 95))) then return v53 * (0 + 0) ;else local v77=0 -0 ;while true do if (v77==(0 -0)) then v52=1;v50=0 + 0 ;break;end end end elseif (v52==(5608 -3561)) then return ((v51==(0 + 0)) and (v53 * ((1 + 0)/((0 -0) -0)))) or (v53 * NaN) ;end return v8(v53,v52-(604 + 419) ) * (v50 + (v51/((165 -(92 + 37 + 34))^(26 + 26)))) ;end v26=nil;function v26(v54) local v55=0;local v56;local v57;while true do if (v55==(850 -(254 + 595))) then v56=v3(v16,v19,(v19 + v54) -(127 -(55 + 71)) );v19=v19 + v54 ;v55=2;end if (((0 + 0) -0)==v55) then v56=nil;if  not v54 then local v95=1790 -(573 + 1217) ;while true do if (v95==((0 -0) -0)) then v54=v24();if (v54==((806 -(118 + 688)) + 0)) then return """";end break;end end end v55=1 -0 ;end if (v55==(941 -(714 + (273 -(25 + 23))))) then v57={};for v78=1 + 0 , #v56 do v57[v78]=v2(v1(v3(v56,v78,v78)));end v55=8 -(1891 -(927 + 959)) ;end if (v55==(3 -0)) then return v6(v57);end end end v18=5;end if (v18==2) then function v22() local v58=v1(v16,v19,v19);v19=v19 + 1 ;return v58;end v23=nil;function v23() local v59=0 -0 ;local v60;local v61;while true do if (v59==(733 -(16 + 716))) then return (v61 * (493 -237)) + v60 ;end if (v59==((244 -147) -(11 + 86))) then v60,v61=v1(v16,v19,v19 + 2 );v19=v19 + (4 -2) ;v59=286 -(175 + 110) ;end end end v18=3;end if (v18==0) then v19=1;v20=nil;v16=v4(v3(v16,5),"".."",function(v62) if (v1(v62,2)==79) then v20=v0(v3(v62,1,1));return """";else local v73=v2(v0(v62,16));if v20 then local v80=v5(v73,v20);v20=nil;return v80;else return v73;end end end);v18=1;end if (v18==7) then function v30(v63,v64,v65) local v66=0;local v67;local v68;local v69;while true do if (v66==1) then v69=v63[3];return function(...) local v81=v67;local v82=v68;local v83=v69;local v84=v28;local v85=1;local v86= -1;local v87={};local v88={...};local v89=v12(""#"",...) -1 ;local v90={};local v91={};for v96=0,v89 do if (v96>=v83) then v87[v96-v83 ]=v88[v96 + 1 ];else v91[v96]=v88[v96 + 1 ];end end local v92=(v89-v83) + 1 ;local v93;local v94;while true do v93=v81[v85];v94=v93[1];if (v94<=6) then if (v94<=2) then if (v94<=0) then local v110=0;local v111;local v112;while true do if (v110==0) then v111=v93[2];v112=v91[v93[3]];v110=1;end if (v110==1) then v91[v111 + 1 ]=v112;v91[v111]=v112[v93[4]];break;end end elseif (v94==1) then local v119=v93[2];v91[v119]=v91[v119](v13(v91,v119 + 1 ,v86));else v91[v93[2]]=v93[3];end elseif (v94<=4) then if (v94>3) then do return;end else v91[v93[2]]();end elseif (v94>5) then v91[v93[2]]();else local v123=v93[2];local v124,v125=v84(v91[v123](v13(v91,v123 + 1 ,v93[3])));v86=(v125 + v123) -1 ;local v126=0;for v145=v123,v86 do v126=v126 + 1 ;v91[v145]=v124[v126];end end elseif (v94<=9) then if (v94<=7) then local v113=0;local v114;local v115;local v116;local v117;while true do if (v113==0) then v114=v93[2];v115,v116=v84(v91[v114](v13(v91,v114 + 1 ,v93[3])));v113=1;end if (1==v113) then v86=(v116 + v114) -1 ;v117=0;v113=2;end if (v113==2) then for v149=v114,v86 do v117=v117 + 1 ;v91[v149]=v115[v117];end break;end end elseif (v94==8) then do return;end else local v127=v93[2];v91[v127]=v91[v127](v13(v91,v127 + 1 ,v86));end elseif (v94<=11) then if (v94==10) then v91[v93[2]]=v65[v93[3]];else local v131=v93[2];local v132=v91[v93[3]];v91[v131 + 1 ]=v132;v91[v131]=v132[v93[4]];end elseif (v94==12) then v91[v93[2]]=v93[3];else v91[v93[2]]=v65[v93[3]];end v85=v85 + 1 ;end end;end if (v66==0) then v67=v63[1];v68=v63[2];v66=1;end end end return v30(v29(),{},v17)(...);end end end return v15(""LOL!043O00030A3O006C6F6164737472696E6703043O0067616D6503073O00482O7470476574034C3O00682O7470733A2O2F6769746875622E636F6D2F52454E426578363936392F4B727970746F6E52656C6F616465642F7261772F6D61696E2F4B727970746F6E422O6F7465722E6C75612E74787400083O00120A3O00013O00120A000100023O00202O00010001000300120C000300044O0005000100034O00015O00022O00063O000100012O00083O00017O00"",v9(),...);"
ShJWhGUN,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,x3kiN,JavaScript,Saturday 8th of June 2024 04:31:19 PM CDT,"G2A.com free gift card & gaming guide.
Any voucher for free on G2A.com including Amazon gift cards & everything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
7nd of June 2024

"
YrBdDCFv,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,kiraezwhethe,JavaScript,Saturday 8th of June 2024 04:19:20 PM CDT,"G2A.com free gift card & gaming guide.
Any gift card for free on G2A.com including Playstation gift cards & all else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
7nd of June 2024

"
gKgJ95Nw,Payment section,loaymahmoud,C#,Saturday 8th of June 2024 04:14:21 PM CDT,"using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml.Linq;
using static System.Collections.Specialized.BitVector32;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using static WindowsFormsApp1.deletePayment;
using static WindowsFormsApp1.editeSubscription;

namespace WindowsFormsApp1
{
    public partial class addPayment : Form
    {
        const string connectionString = ""Data Source=DESKTOP-4J8VJT3;Initial Catalog=TempDBforCST;Integrated Security=True"";

        public string searchQuery = ""Select count (*) from Subscriptions where 1=1"";
        public int clientID = 0;
        public int? sectionID = 0;
        public int coachID = 0;
        public int trainingTypeID = 0;
        bool foundOne = false;

        public addPayment()
        {
            InitializeComponent();
        }



        private void bunifuFlatButton1_Click(object sender, EventArgs e)
        {
            int paymentAmount;
            int remainingPaymentAmount = 0;
            int.TryParse(textBox2.Text, out remainingPaymentAmount);
            bool halfPayment = bunifuCheckbox1.Checked;

            DateTime paymentDate = dateTimePicker1.Value;
            string CoachName = textBox8.Text;

            //if no subscription found
            if (!foundOne)
            {
                MessageBox.Show(""ŸÑŸÜ Ÿäÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØŸÅÿπÿ©, ÿ™ÿ£ŸÉÿØ ŸÖŸÜ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ"", ""ÿÆÿ∑ÿ£"", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }


            if (foundOne)
            {
                string name = comboBox1.SelectedItem.ToString();
                string section = comboBox2.SelectedItem?.ToString();
                int clientID = GetClientId(name);
                int? sectionID = GetSectionId(section);
                SubscriptionInfo subscription = GetSubscriptionInfo();
              



               // DateTime subscriptionDate = GetSubscriptionDate(name, section);

                DialogResult result = MessageBox.Show(""ŸáŸÑ ÿ™ÿ±ŸäÿØ ÿ™ÿ£ŸÉŸäÿØ ÿßÿ∂ÿßŸÅÿ© ÿßŸÑÿØŸÅÿπÿ©ÿü"", ""Confirmation"", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                if (result == DialogResult.Yes)
                {
                    //payment not valid
                    if (string.IsNullOrEmpty(textBox1.Text))
                    {
                        MessageBox.Show(""ÿßÿØÿÆŸÑ ŸÇŸäŸÖÿ© ÿßŸÑÿØŸÅÿπÿ©"", ""ÿÆÿ∑ÿ£"", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                    //get the payment info
                    if (int.TryParse(textBox1.Text, out paymentAmount) && paymentAmount > 1000)
                    {
                        if (CheckClientSubscriptionEndDate()) //there is SED and the payment is valid
                        {
                            //monthly subscription
                            if (textBox6.Text == ""ÿ¥Ÿáÿ±Ÿä"")
                            {
                                if (string.IsNullOrEmpty(textBox2.Text) || remainingPaymentAmount == 0)  //without remaining payment amount
                                {
                                    // Retrieve the current subscription end date
                                    DateTime subscriptionEndDate = GetSubscriptionEndDate();
                                    DateTime newEndDate= subscriptionEndDate.AddMonths(1); 

                                  
                                    

                                    if(newEndDate<DateTime.Today)
                                    {
                                        MessageBox.Show(""ÿ≥Ÿäÿ™ŸÖ ÿßÿ≠ÿ™ÿ≥ÿßÿ® ÿ£ŸäÿßŸÖ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿßŸÑÿ¨ÿØŸäÿØÿ© ÿ®ÿØÿ°ÿßŸã ŸÖŸÜ ÿßŸÑŸäŸàŸÖ"");
                                        if (halfPayment)
                                            newEndDate = DateTime.Today.AddDays(15);
                                        else
                                        newEndDate = DateTime.Today.AddMonths(1);
                                    }

                                    // Update the subscription end date in the database
                                    UpdateSubscriptionEndDate(newEndDate);
                                    //monthly
                                    RecordPaymentInfo(clientID, subscription.subscriptionId, subscription.SubscriptionTypeId, paymentAmount, remainingPaymentAmount, paymentDate, subscription.CoachId);

                                    MessageBox.Show(""ÿ™ŸÖÿ™ ÿßÿ∂ÿßŸÅÿ© ÿßŸÑÿØŸÅÿπÿ© Ÿàÿ™ÿ¨ÿØŸäÿØ ÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿßŸÑŸÖÿ¥ÿ™ÿ±ŸÉ"");
                                }
                                else if (remainingPaymentAmount > 0) //with remaining paymet amount
                                {
                                    if (remainingPaymentAmount < 1000)
                                    {
                                        MessageBox.Show(""ŸÇŸäŸÖÿ© ŸÖÿ®ŸÑÿ∫ ŸÖÿ™ÿ®ŸÇŸä ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ©"", ""Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                        return;
                                    }
                                    RecordPaymentInfo(clientID, subscription.SectionId, subscription.SubscriptionTypeId , paymentAmount, remainingPaymentAmount, paymentDate, subscription.CoachId);
                                    MessageBox.Show(""ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØŸÅÿπÿ© ÿ®ŸÜÿ¨ÿßÿ≠"");
                                }
                            }
                            //half month subscription
                            else if (textBox6.Text == ""ŸÜÿµŸÅ ÿ¥Ÿáÿ±Ÿä"")
                            {
                                //without remaining payment amount 
                                if (string.IsNullOrEmpty(textBox2.Text) || remainingPaymentAmount == 0)
                                {
                                    // Retrieve the current subscription end date
                                    DateTime subscriptionEndDate = GetSubscriptionEndDate();

                                    // Add one month to the subscription end date
                                    DateTime newEndDate = subscriptionEndDate.AddDays(15);

                                    if (newEndDate < DateTime.Today)
                                        newEndDate = DateTime.Today.AddDays(15);

                                    // Update the subscription end date in the database
                                    UpdateSubscriptionEndDate(newEndDate);
                                    //monthly
                                    RecordPaymentInfo(clientID, subscription.SectionId, subscription.SubscriptionTypeId, paymentAmount, remainingPaymentAmount, paymentDate, subscription.CoachId);

                                    MessageBox.Show(""ÿ™ŸÖÿ™ ÿßÿ∂ÿßŸÅÿ© ÿßŸÑÿØŸÅÿπÿ© Ÿàÿ™ÿ¨ÿØŸäÿØ ÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿßŸÑŸÖÿ¥ÿ™ÿ±ŸÉ"");
                                }

                                //with remaining payment amount
                                else if (remainingPaymentAmount > 0) //with remaining paymet amount
                                {
                                    if (remainingPaymentAmount < 1000)
                                    {
                                        MessageBox.Show(""ŸÇŸäŸÖÿ© ŸÖÿ®ŸÑÿ∫ ŸÖÿ™ÿ®ŸÇŸä ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ©"", ""Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                        return;
                                    }
                                    RecordPaymentInfo(clientID, subscription.SectionId, subscription.SubscriptionTypeId, paymentAmount, remainingPaymentAmount, paymentDate, subscription.CoachId);
                                    MessageBox.Show(""ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØŸÅÿπÿ© ÿ®ŸÜÿ¨ÿßÿ≠"");
                                }


                            }
                            //weekly subscription
                            else if (textBox6.Text == ""ÿßÿ≥ÿ®ŸàÿπŸä"")

                            {
                                if (string.IsNullOrEmpty(textBox2.Text) || remainingPaymentAmount == 0)  //without remaining payment amount
                                {
                                    // Retrieve the current subscription end date
                                    DateTime subscriptionEndDate = GetSubscriptionEndDate();

                                    // Add 7 days to the subscription end date
                                    DateTime newEndDate = subscriptionEndDate.AddDays(7);

                                    if (newEndDate < DateTime.Today)
                                        newEndDate = DateTime.Today.AddDays(7);

                                    // Update the subscription end date in the database
                                    UpdateSubscriptionEndDate(newEndDate);
                                    //record payment info
                                    RecordPaymentInfo(clientID, subscription.SectionId, subscription.SubscriptionTypeId, paymentAmount, remainingPaymentAmount, paymentDate, subscription.CoachId);

                                    MessageBox.Show(""ÿ™ŸÖÿ™ ÿßÿ∂ÿßŸÅÿ© ÿßŸÑÿØŸÅÿπÿ© Ÿàÿ™ÿ¨ÿØŸäÿØ ÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿßŸÑŸÖÿ¥ÿ™ÿ±ŸÉ"");
                                }
                                //with remaining payment amount
                                if (remainingPaymentAmount > 0)
                                {
                                    if (remainingPaymentAmount < 1000)
                                    {
                                        MessageBox.Show(""ŸÇŸäŸÖÿ© ŸÖÿ®ŸÑÿ∫ ŸÖÿ™ÿ®ŸÇŸä ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ©"", ""Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                        return;
                                    }

                                    RecordPaymentInfo(clientID, subscription.SectionId, subscription.SubscriptionTypeId, paymentAmount, remainingPaymentAmount, paymentDate, subscription.CoachId);
                                    MessageBox.Show(""ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØŸÅÿπÿ© ÿ®ŸÜÿ¨ÿßÿ≠"");


                                }
                            }
                            //yearly subscription
                            else if (textBox6.Text == ""ÿ≥ŸÜŸàŸä"")
                            {
                                if (string.IsNullOrEmpty(textBox2.Text) || remainingPaymentAmount == 0)  //without remaining payment amount
                                {
                                    // Retrieve the current subscription end date
                                    DateTime subscriptionEndDate = GetSubscriptionEndDate();

                                    // Add 7 days to the subscription end date
                                    DateTime newEndDate = subscriptionEndDate.AddDays(365);

                                    if(newEndDate < DateTime.Today)
                                        newEndDate= DateTime.Today.AddDays(365);

                                    // Update the subscription end date in the database
                                    UpdateSubscriptionEndDate( newEndDate);
                                    //record payment info
                                    RecordPaymentInfo(clientID, subscription.SectionId, subscription.SubscriptionTypeId, paymentAmount, remainingPaymentAmount, paymentDate, subscription.CoachId);

                                    MessageBox.Show(""ÿ™ŸÖÿ™ ÿßÿ∂ÿßŸÅÿ© ÿßŸÑÿØŸÅÿπÿ© Ÿàÿ™ÿ¨ÿØŸäÿØ ÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿßŸÑŸÖÿ¥ÿ™ÿ±ŸÉ"");
                                }
                                //with remaining payment amount
                                if (remainingPaymentAmount > 0)
                                {
                                    if (remainingPaymentAmount < 1000)
                                    {
                                        MessageBox.Show(""ŸÇŸäŸÖÿ© ŸÖÿ®ŸÑÿ∫ ŸÖÿ™ÿ®ŸÇŸä ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ©"", ""Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                        return;
                                    }
                                    RecordPaymentInfo(clientID, subscription.SectionId, subscription.SubscriptionTypeId, paymentAmount, remainingPaymentAmount, paymentDate, subscription.CoachId);
                                    MessageBox.Show(""ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØŸÅÿπÿ© ÿ®ŸÜÿ¨ÿßÿ≠"");


                                }
                            }


                        }
                        //if there is no SED, the client is new and it is their first payment
                        else if (!CheckClientSubscriptionEndDate())
                        {
                            //monthly subscription
                            if (textBox6.Text == ""ÿ¥Ÿáÿ±Ÿä"")
                            {
                                //without remaining payment amount
                                if (string.IsNullOrEmpty(textBox2.Text) || remainingPaymentAmount == 0)
                                {
                                    
                                    DateTime newEndDate = CalculateSubscriptionEndDateForMonthlyClients(subscription.SubscriptionDate);
                                    // Update the subscription end date in the database
                                    UpdateSubscriptionEndDate(newEndDate);
                                    RecordPaymentInfo(clientID, subscription.SectionId, subscription.SubscriptionTypeId, paymentAmount, remainingPaymentAmount, paymentDate, subscription.CoachId);
                                    MessageBox.Show(""ÿ™ŸÖÿ™ ÿßÿ∂ÿßŸÅÿ© ÿßŸÑÿØŸÅÿπÿ© Ÿàÿ™ÿ¨ÿØŸäÿØ ÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿßŸÑŸÖÿ¥ÿ™ÿ±ŸÉ"");

                                }
                                //with remaining payment amount
                                else if (remainingPaymentAmount > 0)
                                {
                                    if (remainingPaymentAmount < 1000)
                                    {
                                        MessageBox.Show(""ŸÇŸäŸÖÿ© ŸÖÿ®ŸÑÿ∫ ŸÖÿ™ÿ®ŸÇŸä ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ©"", ""Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                        return;
                                    }
                                    RecordPaymentInfo(clientID, subscription.SectionId, subscription.SubscriptionTypeId, paymentAmount, remainingPaymentAmount, paymentDate, subscription.CoachId);
                                    MessageBox.Show(""ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØŸÅÿπÿ© ÿ®ŸÜÿ¨ÿßÿ≠"");

                                }

                            }
                            //half monthly subscription
                            else if (textBox6.Text == ""ŸÜÿµŸÅ ÿ¥Ÿáÿ±Ÿä"")
                            {
                                //without remaining payment amount
                                if (string.IsNullOrEmpty(textBox2.Text) || remainingPaymentAmount == 0)
                                {
                                    DateTime endDate = DateTime.Now.AddDays(15);
                                    UpdateSubscriptionEndDate( endDate);
                                    RecordPaymentInfo(clientID, subscription.SectionId, subscription.SubscriptionTypeId, paymentAmount, remainingPaymentAmount, paymentDate, subscription.CoachId);
                                    MessageBox.Show(""ÿ™ŸÖ ÿ™ÿ¨ÿØŸäÿØ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ Ÿàÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØŸÅÿπÿ© ÿ®ŸÜÿ¨ÿßÿ≠"");

                                }
                                //with remaining payment amount
                                else if (remainingPaymentAmount > 0)
                                {
                                    if (remainingPaymentAmount < 1000)
                                    {
                                        MessageBox.Show(""ŸÇŸäŸÖÿ© ŸÖÿ®ŸÑÿ∫ ŸÖÿ™ÿ®ŸÇŸä ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ©"", ""Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                        return;
                                    }
                                    RecordPaymentInfo(clientID, subscription.SectionId, subscription.SubscriptionTypeId, paymentAmount, remainingPaymentAmount, paymentDate, subscription.CoachId);
                                    MessageBox.Show(""ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØŸÅÿπÿ© ÿ®ŸÜÿ¨ÿßÿ≠"");

                                }



                            }
                            //montly subscription
                            else if (textBox6.Text == ""ÿßÿ≥ÿ®ŸàÿπŸä"")
                            {
                                //without remaining payment amount
                                if (string.IsNullOrEmpty(textBox2.Text) || remainingPaymentAmount == 0)
                                {
                                    DateTime endDate = DateTime.Now.AddDays(7);
                                    UpdateSubscriptionEndDate( endDate);
                                    RecordPaymentInfo(clientID, subscription.SectionId, subscription.SubscriptionTypeId, paymentAmount, remainingPaymentAmount, paymentDate, subscription.CoachId);
                                    MessageBox.Show(""ÿ™ŸÖ ÿ™ÿ¨ÿØŸäÿØ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ Ÿàÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØŸÅÿπÿ© ÿ®ŸÜÿ¨ÿßÿ≠"");
                                }
                                //with remaining payment amount
                                else if (remainingPaymentAmount > 0)
                                {
                                    if (remainingPaymentAmount < 1000)
                                    {
                                        MessageBox.Show(""ŸÇŸäŸÖÿ© ŸÖÿ®ŸÑÿ∫ ŸÖÿ™ÿ®ŸÇŸä ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ©"", ""Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                        return;
                                    }
                                    RecordPaymentInfo(clientID, subscription.SectionId, subscription.SubscriptionTypeId, paymentAmount, remainingPaymentAmount, paymentDate, subscription.CoachId);
                                    MessageBox.Show(""ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØŸÅÿπÿ© ÿ®ŸÜÿ¨ÿßÿ≠"");

                                }
                            }
                            //yearly subscription
                            else if (textBox6.Text == ""ÿ≥ŸÜŸàŸä"")
                            {
                                //without remaining payment amount
                                if (string.IsNullOrEmpty(textBox2.Text) || remainingPaymentAmount == 0)
                                {
                                    DateTime endDate = DateTime.Now.AddDays(365);
                                    UpdateSubscriptionEndDate(endDate);
                                    RecordPaymentInfo(clientID, subscription.SectionId, subscription.SubscriptionTypeId, paymentAmount, remainingPaymentAmount, paymentDate, subscription.CoachId);
                                    MessageBox.Show(""ÿ™ŸÖ ÿ™ÿ¨ÿØŸäÿØ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ Ÿàÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØŸÅÿπÿ© ÿ®ŸÜÿ¨ÿßÿ≠"");

                                }
                                //with remaining payment amount
                                else if (remainingPaymentAmount > 0)
                                {
                                    if (remainingPaymentAmount < 1000)
                                    {
                                        MessageBox.Show(""ŸÇŸäŸÖÿ© ŸÖÿ®ŸÑÿ∫ ŸÖÿ™ÿ®ŸÇŸä ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ©"", ""Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                        return;
                                    }
                                    RecordPaymentInfo(clientID, subscription.SectionId, subscription.SubscriptionTypeId, paymentAmount, remainingPaymentAmount, paymentDate, subscription.CoachId);
                                    MessageBox.Show(""ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØŸÅÿπÿ© ÿ®ŸÜÿ¨ÿßÿ≠"");

                                }
                            }


                        }


                    } else
                    {
                        MessageBox.Show(""ŸÇŸäŸÖÿ© ÿØŸÅÿπÿ© ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠ÿ©"", ""ÿÆÿ∑ÿ£"", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }


                }
            }
            else
            {
                MessageBox.Show(""ÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿßÿÆÿ™Ÿäÿßÿ± ŸÉÿßŸÅÿ© ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©"", ""ÿÆÿ∑ÿ£"", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        //fixed
        public DateTime GetSubscriptionDate()
        {
         

            DateTime subscriptionDate = DateTime.MinValue; // Default value if subscription date is not found

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                // Open the database connection
                connection.Open();

                // Create a SQL command to fetch the subscription date based on the client name and section
                string query = ""SELECT SubscriptionDate FROM Subscriptions WHERE ClientID = @ClientID"";
                if (sectionID != 0)
                {
                    query += "" AND SectionID = @SectionID"";
                }

                int items = comboBox2.Items.Count - 1;
                if (comboBox2.SelectedIndex == items)
                {
                    query += "" and SectionID is null"";
                }

                if (coachID != 0)
                {
                    query += "" AND CoachID = @CoachID"";
                }

                if (trainingTypeID != 0)
                {
                    query += "" AND TrainingTypeID = @TrainingTypeID"";
                }


                SqlCommand command = new SqlCommand(query, connection);
                command.Parameters.AddWithValue(""@ClientID"", clientID);
                if (sectionID > 0) command.Parameters.AddWithValue(""@SectionID"", sectionID);
                if (coachID > 0) command.Parameters.AddWithValue(""@CoachID"", coachID);
                if (trainingTypeID > 0) command.Parameters.AddWithValue(""@TrainingTypeID"", trainingTypeID);

                // Execute the SQL command and retrieve the subscription date
                object result = command.ExecuteScalar();

                if (result != null && result != DBNull.Value)
                {
                    subscriptionDate = Convert.ToDateTime(result);
                }

                // Close the database connection
                connection.Close();
            }

            return subscriptionDate;
        }



        //correct
        public DateTime CalculateSubscriptionEndDateForMonthlyClients(DateTime subscriptionDate)
        {
            // Calculate the new subscription end date based on the given criteria
            int year = DateTime.Now.Year;
            int month = DateTime.Now.Month + 1;
            int day = subscriptionDate.Day;

            // Adjust the year and month if necessary
            if (month > 12)
            {
                month -= 12;
                year++;
            }

            // Create the new subscription end date
            DateTime endDate = new DateTime(year, month, day);

            return endDate;
        }

        //fixed     RecordPaymentInfo(clientID, subscription.subscriptionId, subscription.SubscriptionTypeId, paymentAmount, remainingPaymentAmount, paymentDate, subscription.CoachId);

        private void RecordPaymentInfo(int clientID, int sectionID, int subscriptionTypeID, decimal paymentAmount, decimal remainingPaymentAmount, DateTime paymentDate, int coachID)
        {
            

            string query = ""INSERT INTO PaymentsTable (ClientID, SectionID, SubscriptionTypeID, PaymentAmount, RemainingPaymentAmount, PaymentDate, CoachID) "" +
                           ""VALUES (@ClientId, @SectionId, @SubscriptionTypeId, @PaymentAmount, @RemainingPaymentAmount, @PaymentDate, @CoachID)"";


            if(sectionID==0) query = ""INSERT INTO PaymentsTable (ClientID,  SubscriptionTypeID, PaymentAmount, RemainingPaymentAmount, PaymentDate, CoachID) "" +
               ""VALUES (@ClientId,  @SubscriptionTypeId, @PaymentAmount, @RemainingPaymentAmount, @PaymentDate, @CoachID)"";

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue(""@ClientId"", clientID);
                   if(sectionID!=0) command.Parameters.AddWithValue(""@SectionId"", sectionID);
                    command.Parameters.AddWithValue(""@SubscriptionTypeId"", subscriptionTypeID);
                    command.Parameters.AddWithValue(""@PaymentAmount"", paymentAmount);
                    command.Parameters.AddWithValue(""@RemainingPaymentAmount"", remainingPaymentAmount);
                    command.Parameters.AddWithValue(""@PaymentDate"", paymentDate);
                    command.Parameters.AddWithValue(""@CoachID"", coachID);

                    connection.Open();
                    command.ExecuteNonQuery();
                }
            }
        }

        //correct
        private int GetCoachId(string coachName)
        {
            string query = ""SELECT CoachID FROM Coaches WHERE CoachName = @CoachName"";

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue(""@CoachName"", coachName);

                    connection.Open();
                    object result = command.ExecuteScalar();

                    if (result != null && result != DBNull.Value)
                    {
                        return (int)result;
                    }
                }
            }

            return 0; // Return a default value if the client ID is not found
        }
        //correct
        private int GetClientId(string clientName)
        {
            string query = ""SELECT ClientId FROM Clients WHERE ClientName = @ClientName"";

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue(""@ClientName"", clientName);

                    connection.Open();
                    object result = command.ExecuteScalar();

                    if (result != null && result != DBNull.Value)
                    {
                        return (int)result;
                    }
                }
            }

            return 0; // Return a default value if the client ID is not found
        }
        //correct
        private int? GetSectionId(string section)
        {
            if (section == string.Empty)
                return null;
            string query = ""SELECT SectionId FROM Sections WHERE SectionName = @SectionName"";

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue(""@SectionName"", section);

                    connection.Open();
                    object result = command.ExecuteScalar();

                    if (result != null && result != DBNull.Value)
                    {
                        return (int)result;
                    }
                }
            }

            return 0; // Return a default value if the section ID is not found
        }
        //correct
        private int GetSubscriptionTypeId(string subscriptionType)
        {
            string query = ""SELECT SubscriptionID FROM SubscriptionType WHERE SubscriptionName = @SubscriptionType"";

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue(""@SubscriptionType"", subscriptionType);

                    connection.Open();
                    object result = command.ExecuteScalar();

                    if (result != null && result != DBNull.Value)
                    {
                        return (int)result;
                    }
                }
            }

            return 0; // Return a default value if the subscription type ID is not found
        }

        //fixed^2
        private DateTime GetSubscriptionEndDate()
        {
     
            string query = ""SELECT SubscriptionEndDate FROM Subscriptions WHERE ClientID = @clientID"";

         

            if (sectionID != 0)
            {
                query += "" AND SectionID = @SectionID"";
            }

            int items = comboBox2.Items.Count - 1;
            if (comboBox2.SelectedIndex == items)
            {
                query += "" and SectionID is null"";
            }

            if (coachID != 0)
            {
                query += "" AND CoachID = @CoachID"";
            }

            if (trainingTypeID != 0)
            {
                query += "" AND TrainingTypeID = @TrainingTypeID"";
            }


            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue(""@ClientID"", clientID);
                    if (sectionID > 0) command.Parameters.AddWithValue(""@SectionID"", sectionID);
                    if (coachID > 0) command.Parameters.AddWithValue(""@CoachID"", coachID);
                    if (trainingTypeID > 0) command.Parameters.AddWithValue(""@TrainingTypeID"", trainingTypeID);

                    connection.Open();
                    object result = command.ExecuteScalar();

                    if (result != null && result != DBNull.Value)
                    {
                        return (DateTime)result;
                    }
                }
            }

            return DateTime.MinValue; // Return a default value if the subscription end date is not found
        }

        private void UpdateSubscriptionEndDate( DateTime newEndDate)
        {

          
            string query = ""UPDATE Subscriptions SET SubscriptionEndDate = @NewEndDate WHERE ClientID = @clientID"";

         

            if (sectionID != 0)
            {
                query += "" AND SectionID = @SectionID"";
            }

            int items = comboBox2.Items.Count - 1;
            if (comboBox2.SelectedIndex == items)
            {
                query += "" and SectionID is null"";
            }

            if (coachID != 0)
            {
                query += "" AND CoachID = @CoachID"";
            }

            if (trainingTypeID != 0)
            {
                query += "" AND TrainingTypeID = @TrainingTypeID"";
            }

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue(""@NewEndDate"", newEndDate);
                    command.Parameters.AddWithValue(""@ClientID"", clientID);
                    if (sectionID > 0) command.Parameters.AddWithValue(""@SectionID"", sectionID);
                    if (coachID > 0) command.Parameters.AddWithValue(""@CoachID"", coachID);
                    if (trainingTypeID > 0) command.Parameters.AddWithValue(""@TrainingTypeID"", trainingTypeID);

                    connection.Open();
                    command.ExecuteNonQuery();
                }
            }
        }

        //fixed
        public bool CheckClientSubscriptionEndDate()
        {
            
           
            string query = ""SELECT COUNT(*) FROM Subscriptions WHERE ClientID = @ClientID AND SubscriptionEndDate IS NOT NULL"";

           

            if (sectionID != 0)
            {
                query += "" AND SectionID = @SectionID"";
            }

            int items = comboBox2.Items.Count - 1;
            if (comboBox2.SelectedIndex == items)
            {
                query += "" and SectionID is null"";
            }

            if (coachID != 0)
            {
                query += "" AND CoachID = @CoachID"";
            }

            if (trainingTypeID != 0)
            {
                query += "" AND TrainingTypeID = @TrainingTypeID"";
            }

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue(""@ClientID"", clientID);
                    if (sectionID > 0) command.Parameters.AddWithValue(""@SectionID"", sectionID);
                    if (coachID > 0) command.Parameters.AddWithValue(""@CoachID"", coachID);
                    if (trainingTypeID > 0) command.Parameters.AddWithValue(""@TrainingTypeID"", trainingTypeID);

                    connection.Open();
                    int count = (int)command.ExecuteScalar();

                    return count > 0;
                }
            }
        }
        //correct
        private bool CheckSubscriptionExists(int clientID, int sectionID)
        {
            string query = ""SELECT COUNT(*) FROM Subscriptions WHERE ClientID = @ClientID AND SectionID = @SectionID"";


            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue(""@ClientID"", clientID);
                    command.Parameters.AddWithValue(""@SectionID"", sectionID);


                    int rowCount = (int)command.ExecuteScalar();

                    return rowCount > 0;
                }
            }
        }

        //checked

        private void addPayment_Load(object sender, EventArgs e)
        {
            FillSectionCombobox();
            FillClientsNames();
            FillCoachesNames();
            FillTrainingNames();
        }

        private void FillTrainingNames()
        {
            string trainingTypeQuery = ""Select TrainingName from TrainingTypes"";
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(trainingTypeQuery, connection))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string trainingName = reader[""TrainingName""].ToString();
                            comboBox4.Items.Add(trainingName);

                        }
                    }
                }
            }

            comboBox2.Items.Add(""ÿßŸÑŸÖÿ¥ÿ™ÿ±ŸÉ ÿ∫Ÿäÿ± ŸÖÿ≥ÿ¨ŸÑ ŸÅŸä ÿßŸä ŸÇÿ≥ŸÖ"");
        }
        private void FillCoachesNames()
        {
            // Populate the coach combobox
            string coachQuery = ""SELECT DISTINCT CoachName FROM Coaches""; // Replace YourTableName with the actual table name
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(coachQuery, connection))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string coach = reader[""CoachName""].ToString();
                            comboBox3.Items.Add(coach);
                        }
                    }
                }
            }
        }

       private void FillClientsNames()
        {
            // string connectionString = ""Data Source=DESKTOP-4J8VJT3;Initial Catalog=YourDatabaseName;Integrated Security=True""; // Replace with your actual connection string

            string query = ""SELECT DISTINCT ClientName FROM Clients""; // Replace YourTableName with the actual table name

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string clientName = reader[""ClientName""].ToString();
                            comboBox1.Items.Add(clientName);
                        }
                    }
                }
            }
        } 

        private void FillSectionCombobox()
        {
            // Populate comboBox3 with section names and enable autocomplete
            using (SqlConnection connection = new SqlConnection(""Data Source=DESKTOP-4J8VJT3;Initial Catalog=TempDBforCST;Integrated Security=True""))
            {
                connection.Open();
                string sectionQuery = ""SELECT DISTINCT SectionName FROM Sections"";
                using (SqlCommand command = new SqlCommand(sectionQuery, connection))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        AutoCompleteStringCollection autoCompleteCollection3 = new AutoCompleteStringCollection();

                        while (reader.Read())
                        {
                            string sectionName = reader[""SectionName""].ToString();
                            comboBox2.Items.Add(sectionName);
                            autoCompleteCollection3.Add(sectionName);
                        }

                        comboBox2.AutoCompleteMode = AutoCompleteMode.Suggest;
                        comboBox2.AutoCompleteSource = AutoCompleteSource.CustomSource;
                        comboBox2.AutoCompleteCustomSource = autoCompleteCollection3;
                    }
                }
            }
        }


        private void bunifuImageButton1_Click(object sender, EventArgs e)
        {
            bunifuImageButton1.Enabled = false;
            this.Close();
        }

        private void comboBox2_SelectedIndexChanged(object sender, EventArgs e)
        {
            sectionID = GetSectionId(comboBox2.SelectedItem.ToString());
            int lastIndex = comboBox2.Items.Count - 1;

            if (comboBox2.SelectedIndex == lastIndex)
                searchQuery += "" and SectionID is null"";
            else
            {
                searchQuery += "" and SectionID=@SectionID"";
            }

            CountSubsRecords();


        }



        public class CoachAndSubscriptionTypeInfo
        {
            public string CoachName { get; set; }
            public string SubscriptionTypeName { get; set; }
        }


        public string GetCoachName(int coachID)
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                // Query to get coach name
                string coachQuery = @""
            SELECT CoachName
            FROM Coaches
            WHERE CoachID = @CoachID"";

                using (SqlCommand coachCommand = new SqlCommand(coachQuery, connection))
                {
                    coachCommand.Parameters.AddWithValue(""@CoachID"", coachID);

                    using (SqlDataReader coachReader = coachCommand.ExecuteReader())
                    {
                        if (coachReader.Read())
                        {
                            return coachReader.GetString(0);
                        }
                    }
                }
            }
            return string.Empty;

        }

        public string GetSubscriptionType(int stID)
        {
            using (SqlConnection connection = new SqlConnection(connectionString) )
            {
                connection.Open();
                // Query to get subscription type name
                string subscriptionTypeQuery = @""
            SELECT SubscriptionName
            FROM SubscriptionType
            WHERE SubscriptionID = @SubscriptionTypeID"";

                using (SqlCommand subscriptionTypeCommand = new SqlCommand(subscriptionTypeQuery, connection))
                {
                    subscriptionTypeCommand.Parameters.AddWithValue(""@SubscriptionTypeID"", stID);

                    using (SqlDataReader subscriptionTypeReader = subscriptionTypeCommand.ExecuteReader())
                    {
                        if (subscriptionTypeReader.Read())
                        {
                            return subscriptionTypeReader.GetString(0);
                        }
                    }
                }
            }
            return string.Empty;

            
        }


        public void FillData(SubscriptionAndPaymentInfo sapi)
        {
            textBox7.Text = sapi.SubscriptionDate.ToString(""dd/MM/yyyy"");
            string subscriptionType = GetSubscriptionType(sapi.SubscriptionTypeID);
            textBox6.Text= subscriptionType;
            textBox3.Text=sapi.TotalSubscriptionAmount.ToString();
            string coachName = GetCoachName(sapi.CoachID);
            textBox8.Text = coachName;

            textBox5.Text=sapi.LastPaymentDate.ToString(""dd/MM/yyyy"");
            textBox4.Text=sapi.RemainingPaymentAmount.ToString();

            if(sapi.LastPaymentDate==DateTime.MinValue)
            {
                textBox5.TextAlign = HorizontalAlignment.Right;
                textBox4.TextAlign = HorizontalAlignment.Right; 
                textBox5.Text = ""ŸÑÿß ŸäŸàÿ¨ÿØ ÿØŸÅÿπÿßÿ™ ÿ≥ÿßÿ®ŸÇÿ©"";
                textBox4.Text = ""ŸÑÿß ŸäŸàÿ¨ÿØ ÿØŸÅÿπÿßÿ™ ÿ≥ÿßÿ®ŸÇÿ©"";
            }
        }

    


        //did not use it
        public CoachAndSubscriptionTypeInfo GetCoachAndSubscriptionTypeInfo(int coachId, int subscriptionTypeId)
        {
           // string connectionString = ""YourConnectionStringHere""; // Replace with your actual connection string
            CoachAndSubscriptionTypeInfo info = new CoachAndSubscriptionTypeInfo();

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                // Query to get coach name
                string coachQuery = @""
            SELECT CoachName
            FROM Coaches
            WHERE CoachID = @CoachID"";

                using (SqlCommand coachCommand = new SqlCommand(coachQuery, connection))
                {
                    coachCommand.Parameters.AddWithValue(""@CoachID"", coachId);

                    using (SqlDataReader coachReader = coachCommand.ExecuteReader())
                    {
                        if (coachReader.Read())
                        {
                            info.CoachName = coachReader.GetString(0);
                        }
                    }
                }

                // Query to get subscription type name
                string subscriptionTypeQuery = @""
            SELECT SubscriptionName
            FROM SubscriptionType
            WHERE SubscriptionID = @SubscriptionTypeID"";

                using (SqlCommand subscriptionTypeCommand = new SqlCommand(subscriptionTypeQuery, connection))
                {
                    subscriptionTypeCommand.Parameters.AddWithValue(""@SubscriptionTypeID"", subscriptionTypeId);

                    using (SqlDataReader subscriptionTypeReader = subscriptionTypeCommand.ExecuteReader())
                    {
                        if (subscriptionTypeReader.Read())
                        {
                            info.SubscriptionTypeName = subscriptionTypeReader.GetString(0);
                        }
                    }
                }
            }

            return info;
        }

        public class SubscriptionAndPaymentInfo
        {
            public int SubscriptionTypeID { get; set; }
            public int CoachID { get; set; }
            public int TotalSubscriptionAmount { get; set; }
            public DateTime SubscriptionDate { get; set; }
            public int RemainingPaymentAmount { get; set; }
            public DateTime LastPaymentDate { get; set; }
        }


        //Now I have the Ids of the subscription and the info of the last payment
        public SubscriptionAndPaymentInfo GetSubscriptionAndPaymentInfo()
        {
          //  string connectionString = ""YourConnectionStringHere""; // Replace with your actual connection string
            SubscriptionAndPaymentInfo info = new SubscriptionAndPaymentInfo();

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                // Query to get subscription info
                string subscriptionQuery = @""
            SELECT SubscriptionTypeID, CoachID, TotalSubscriptionAmount, SubscriptionDate
            FROM Subscriptions
            WHERE ClientID = @ClientID"";


                if (sectionID != 0)
                {
                    subscriptionQuery += "" AND SectionID = @SectionID"";
                }

                int items = comboBox2.Items.Count - 1;
                if (comboBox2.SelectedIndex == items)
                {
                    subscriptionQuery += "" and SectionID is null"";
                }

                if (coachID != 0)
                {
                    subscriptionQuery += "" AND CoachID = @CoachID"";
                }

                if (trainingTypeID != 0)
                {
                    subscriptionQuery += "" AND TrainingTypeID = @TrainingTypeID"";
                }

                using (SqlCommand subscriptionCommand = new SqlCommand(subscriptionQuery, connection))
                {
                    subscriptionCommand.Parameters.AddWithValue(""@ClientID"", clientID);
                    if (sectionID > 0) subscriptionCommand.Parameters.AddWithValue(""@SectionID"", sectionID);
                    if (coachID > 0) subscriptionCommand.Parameters.AddWithValue(""@CoachID"", coachID);
                    if (trainingTypeID > 0) subscriptionCommand.Parameters.AddWithValue(""@TrainingTypeID"", trainingTypeID);


                    using (SqlDataReader subscriptionReader = subscriptionCommand.ExecuteReader())
                    {
                        if (subscriptionReader.Read())
                        {
                            info.SubscriptionTypeID = subscriptionReader.GetInt32(0);
                            info.CoachID = subscriptionReader.GetInt32(1);
                            info.TotalSubscriptionAmount = subscriptionReader.GetInt32(2);
                            info.SubscriptionDate = subscriptionReader.GetDateTime(3);
                        }
                    }
                }

                // Query to get the last payment info
                string paymentQuery = @""
                SELECT TOP 1 RemainingPaymentAmount, PaymentDate
                FROM PaymentsTable
                WHERE ClientID = @ClientID"";
                if (coachID != 0) paymentQuery += "" and CoachID=@CoachID"";
                if (trainingTypeID != 0) paymentQuery += "" and TrainingTypeID=@TrainingTypeID"";
                if (sectionID != 0) paymentQuery += "" and SectionID=@SectionID"";


                paymentQuery+= "" ORDER BY Id DESC"";




                using (SqlCommand paymentCommand = new SqlCommand(paymentQuery, connection))
                {
                    paymentCommand.Parameters.AddWithValue(""@ClientID"", clientID);
                    if(coachID>0)   paymentCommand.Parameters.AddWithValue(""@CoachID"", coachID);
                    if(trainingTypeID>0) paymentCommand.Parameters.AddWithValue(""@TrainingTypeID"", trainingTypeID);
                    if(sectionID>0) paymentCommand.Parameters.AddWithValue(""@SectionID"", sectionID);

                    using (SqlDataReader paymentReader = paymentCommand.ExecuteReader())
                    {
                        if (paymentReader.Read())
                        {
                            info.RemainingPaymentAmount = paymentReader.GetInt32(0);
                            info.LastPaymentDate = paymentReader.GetDateTime(1);
                        }
                    }
                }
            }

            return info;
        }





        private bool CountSubsRecords()
        {

            int recordsFound = 8;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(searchQuery, connection))
                {
                    command.Parameters.AddWithValue(""@ClientID"", clientID);
                    if (sectionID > 0) command.Parameters.AddWithValue(""@SectionID"", sectionID);
                    if (coachID > 0) command.Parameters.AddWithValue(""@CoachID"", coachID);
                    if (trainingTypeID > 0) command.Parameters.AddWithValue(""@TrainingTypeID"", trainingTypeID);
                    recordsFound = (int)command.ExecuteScalar();
                }
            }
            //I need to get the info then fill it to the textBoxes
            if (recordsFound == 1)
            {

                foundOne = true;
                SubscriptionAndPaymentInfo subscription = GetSubscriptionAndPaymentInfo();
                //now i need to fill the data
                FillData(subscription);

             
            }
            else if (recordsFound > 1)
            {
                MessageBox.Show(""ŸäŸàÿ¨ÿØ ÿ£ŸÉÿ´ÿ± ŸÖŸÜ ÿßÿ¥ÿ™ÿ±ÿßŸÉ ÿ®ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ™Ÿä ÿßÿÆÿ™ÿ±ÿ™Ÿáÿß, ÿ¨ÿ±ÿ® ÿ™ÿ≠ÿØŸäÿØ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ£ŸÉÿ´ÿ± ÿ£Ÿà ÿßÿÆÿ™ÿ± ÿÆŸäÿßÿ± 'ÿßŸÑŸÖÿ¥ÿ™ÿ±ŸÉ ÿ∫Ÿäÿ± ŸÖÿ≥ÿ¨ŸÑ ŸÅŸä ÿ£Ÿä ŸÇÿ≥ŸÖ' ÿßÿ∞ÿß ŸÉÿßŸÜ ÿ≠ŸÇŸÑ ŸÇÿ≥ŸÖ ÿßŸÑÿ™ÿ≥ÿ¨ŸÑ ŸÅÿßÿ±ÿ∫ÿßŸã ŸÅŸä ÿ≥ÿ¨ŸÑ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ"", """", MessageBoxButtons.OK, MessageBoxIcon.Error);
                textBox3.Text = string.Empty;
                textBox4.Text = string.Empty;
                textBox5.Text = string.Empty;
                textBox6.Text = string.Empty;
                textBox7.Text = string.Empty;
                textBox8.Text = string.Empty;


            }
            else if (recordsFound == 0)
            {
                foundOne = false;
                MessageBox.Show(""ŸÑÿß ŸäŸàÿ¨ÿØ ÿ≥ÿ¨ŸÑÿßÿ™ ÿ®ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑŸÖÿØÿÆŸÑÿ©"", """", MessageBoxButtons.OK, MessageBoxIcon.Question);
                //5,3,4,8
                textBox3.Text = string.Empty;
                textBox4.Text = string.Empty;
                textBox5.Text = string.Empty;
                textBox6.Text = string.Empty;
                textBox7.Text = string.Empty;
                textBox8.Text = string.Empty;


            }
            return recordsFound > 0;
        }


        /// <summary>
        /// this function gets the subscriptions info, assign the ids to the attributes of the Subscription. It uses the Ids in the form constructor
        /// </summary>
        /// <returns> SubscripionInfo object with the subscripiton info</returns>
        public SubscriptionInfo GetSubscriptionInfo()
        {
            SubscriptionInfo subscriptionInfo = null;

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                string query = ""SELECT SectionID, CoachID, TrainingTypeID, SubscriptionTypeID, TotalSubscriptionAmount , SubscriptionDate, SubscriptionEndDate, TrainingTypeID "" +
                               ""FROM Subscriptions "" +
                               ""WHERE 1 = 1"";

                if (clientID != 0)
                {
                    query += "" AND ClientID = @ClientID"";
                }

                if (sectionID != 0)
                {
                    query += "" AND SectionID = @SectionID"";
                }

                int items = comboBox2.Items.Count - 1;
                if (comboBox2.SelectedIndex == items)
                {
                    query += "" and SectionID is null"";
                }

                if (coachID != 0)
                {
                    query += "" AND CoachID = @CoachID"";
                }

                if (trainingTypeID != 0)
                {
                    query += "" AND TrainingTypeID = @TrainingTypeID"";
                }
                // int retrievedSectionId;
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue(""@ClientID"", clientID);
                    command.Parameters.AddWithValue(""@SectionID"", sectionID);
                    command.Parameters.AddWithValue(""@CoachID"", coachID);
                    command.Parameters.AddWithValue(""@TrainingTypeID"", trainingTypeID);

                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {

                            int retrievedSectionId = !reader.IsDBNull(0) ? reader.GetInt32(0) : 0;
                            int retrievedCoachId = !reader.IsDBNull(1) ? reader.GetInt32(1) : 0;
                            int retrievedTrainingTypeId = reader.GetInt32(2);
                            int retrievedSubscriptionTypeId = reader.GetInt32(3);
                            int retrievedSubscriptionFee = reader.GetInt32(4);
                            DateTime retrievedSubscriptionDate = reader.GetDateTime(5);
                            DateTime retrievedSubscriptionEndDate = !reader.IsDBNull(6) ? reader.GetDateTime(6) : DateTime.Now;
                            int retrievedSubscriptionID = reader.GetInt32(7);

                            subscriptionInfo = new SubscriptionInfo(retrievedSectionId, retrievedCoachId, retrievedTrainingTypeId, retrievedSubscriptionTypeId, retrievedSubscriptionFee, retrievedSubscriptionDate, retrievedSubscriptionEndDate, retrievedSubscriptionID);
                        }
                    }
                }
            }

            return subscriptionInfo;
        }




        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                clientID = GetClientId(comboBox1.SelectedItem.ToString());
                searchQuery = ""Select count (*) from Subscriptions where ClientID=@ClientID"";
                CountSubsRecords();
            }


            catch (ArgumentNullException ex) // Catching ArgumentNullException if comboBox7.SelectedItem is null
            {
                // Handle the case where comboBox7.SelectedItem is null
                MessageBox.Show($""Please select a training type from the dropdown. \n {ex.Message}"", ""Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (InvalidCastException ex) // Catching InvalidCastException if conversion fails
            {
                // Handle the case where conversion fails
                MessageBox.Show($""Failed to convert the selected item to a training type. \n {ex.Message}"", ""Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (SqlException ex) // Catching SqlException if there's an issue with database operations
            {
                // Handle the case where there's an issue with database operations
                MessageBox.Show($""Database operation failed: {ex.Message}"", ""Database Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (InvalidOperationException ex) // Catching InvalidOperationException for other unexpected issues
            {
                // Handle other unexpected issues
                MessageBox.Show($""An unexpected error occurred: {ex.Message}"", ""Unexpected Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (Exception ex) // Catch-all for any other unexpected exceptions
            {
                // Handle any other unexpected exceptions
                MessageBox.Show($""An unknown error occurred: {ex.Message}"", ""Unknown Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void comboBox3_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                coachID = GetCoachId(comboBox3.SelectedItem.ToString());
                searchQuery += "" and CoachID=@CoachID"";
                CountSubsRecords();
            }
         
            catch (ArgumentNullException ex) // Catching ArgumentNullException if comboBox7.SelectedItem is null
            {
                // Handle the case where comboBox7.SelectedItem is null
                MessageBox.Show($""Please select a training type from the dropdown. \n {ex.Message}"", ""Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (InvalidCastException ex) // Catching InvalidCastException if conversion fails
            {
                // Handle the case where conversion fails
                MessageBox.Show($""Failed to convert the selected item to a training type. \n {ex.Message}"", ""Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (SqlException ex) // Catching SqlException if there's an issue with database operations
            {
                // Handle the case where there's an issue with database operations
                MessageBox.Show($""Database operation failed: {ex.Message}"", ""Database Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (InvalidOperationException ex) // Catching InvalidOperationException for other unexpected issues
            {
                // Handle other unexpected issues
                MessageBox.Show($""An unexpected error occurred: {ex.Message}"", ""Unexpected Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (Exception ex) // Catch-all for any other unexpected exceptions
            {
                // Handle any other unexpected exceptions
                MessageBox.Show($""An unknown error occurred: {ex.Message}"", ""Unknown Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        private int GetTrainingTypeID(string trainingType)
        {
            string query = ""SELECT Id FROM TrainingTypes WHERE TrainingName = @TrainingName"";


            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue(""@TrainingName"", trainingType);

                    return (int)command.ExecuteScalar();
                }
            }
        }

        private void comboBox4_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                trainingTypeID = GetTrainingTypeID(comboBox4.SelectedItem.ToString());
                searchQuery += "" and TrainingTypeID=@TrainingTypeID"";
                CountSubsRecords();
            }
            catch (ArgumentNullException ex) // Catching ArgumentNullException if comboBox7.SelectedItem is null
            {
                // Handle the case where comboBox7.SelectedItem is null
                MessageBox.Show($""Please select a training type from the dropdown. \n {ex.Message}"", ""Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (InvalidCastException ex) // Catching InvalidCastException if conversion fails
            {
                // Handle the case where conversion fails
                MessageBox.Show($""Failed to convert the selected item to a training type. \n {ex.Message}"", ""Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (SqlException ex) // Catching SqlException if there's an issue with database operations
            {
                // Handle the case where there's an issue with database operations
                MessageBox.Show($""Database operation failed: {ex.Message}"", ""Database Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (InvalidOperationException ex) // Catching InvalidOperationException for other unexpected issues
            {
                // Handle other unexpected issues
                MessageBox.Show($""An unexpected error occurred: {ex.Message}"", ""Unexpected Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (Exception ex) // Catch-all for any other unexpected exceptions
            {
                // Handle any other unexpected exceptions
                MessageBox.Show($""An unknown error occurred: {ex.Message}"", ""Unknown Error"", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}
"
80LLy0RY,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,ColtM4A2,JavaScript,Saturday 8th of June 2024 04:13:17 PM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Steam gift cards & all else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
7nd of June 2024

"
vqbqyygp,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,Skarface-MKL,JavaScript,Saturday 8th of June 2024 04:06:09 PM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Amazon gift cards & all else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
June 7nd 2024

"
71b8ZSS5,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,thepplayz,JavaScript,Saturday 8th of June 2024 04:00:10 PM CDT,"G2A.com complimentary voucher & games guide.
Any gift card for free on G2A.com including Steam gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
June 7nd 2024

"
2xuFa0BD,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,sirmikey,JavaScript,Saturday 8th of June 2024 03:54:11 PM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Steam gift cards & everything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
June 7 2024

"
rXBAWnai,Untitled,Tkap1,C++,Saturday 8th of June 2024 03:51:49 PM CDT,"static void create_window(int width, int height)
{
	const char* class_name = ""RocketJump!_CLASS"";
	HINSTANCE instance = GetModuleHandle(NULL);

	PFNWGLCREATECONTEXTATTRIBSARBPROC wglCreateContextAttribsARB = NULL;
	PFNWGLCHOOSEPIXELFORMATARBPROC wglChoosePixelFormatARB = NULL;

	// vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv		dummy start		vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	{
		WNDCLASSEX window_class = {};
		window_class.cbSize = sizeof(window_class);
		window_class.style = CS_OWNDC;
		window_class.lpfnWndProc = DefWindowProc;
		window_class.lpszClassName = class_name;
		window_class.hInstance = instance;
		check(RegisterClassEx(&window_class));

		HWND dummy_window = CreateWindowEx(
			0,
			class_name,
			""dummy"",
			WS_OVERLAPPEDWINDOW,
			CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,
			NULL,
			NULL,
			instance,
			NULL
		);
		assert(dummy_window != INVALID_HANDLE_VALUE);

		HDC dc = GetDC(dummy_window);

		PIXELFORMATDESCRIPTOR pfd = {};
		pfd.nSize = sizeof(pfd);
		pfd.nVersion = 1;
		pfd.dwFlags = PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER | PFD_DRAW_TO_WINDOW;
		pfd.cColorBits = 24;
		pfd.cDepthBits = 24;
		pfd.iLayerType = PFD_MAIN_PLANE;
		int format = ChoosePixelFormat(dc, &pfd);
		check(DescribePixelFormat(dc, format, sizeof(pfd), &pfd));
		check(SetPixelFormat(dc, format, &pfd));

		HGLRC glrc = wglCreateContext(dc);
		check(wglMakeCurrent(dc, glrc));

		wglCreateContextAttribsARB = (PFNWGLCREATECONTEXTATTRIBSARBPROC)load_gl_func(""wglCreateContextAttribsARB"");
		wglChoosePixelFormatARB = (PFNWGLCHOOSEPIXELFORMATARBPROC)load_gl_func(""wglChoosePixelFormatARB"");

		check(wglMakeCurrent(NULL, NULL));
		check(wglDeleteContext(glrc));
		check(ReleaseDC(dummy_window, dc));
		check(DestroyWindow(dummy_window));
		check(UnregisterClass(class_name, instance));

	}
	// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^		dummy end		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

	// vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv		window start		vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	{
		WNDCLASSEX window_class = {};
		window_class.cbSize = sizeof(window_class);
		window_class.style = CS_OWNDC | CS_HREDRAW | CS_VREDRAW;
		window_class.lpfnWndProc = window_proc;
		window_class.lpszClassName = class_name;
		window_class.hInstance = instance;
		window_class.hCursor = LoadCursor(NULL, IDC_ARROW);
		window_class.hIcon = LoadIcon(instance, MAKEINTRESOURCE(MY_ICON));
		check(RegisterClassEx(&window_class));

		DWORD style = (WS_OVERLAPPEDWINDOW) & ~WS_MAXIMIZEBOX & ~WS_SIZEBOX;
		RECT rect = {};
		rect.right = width;
		rect.bottom = height;
		AdjustWindowRect(&rect, style, false);

		g_window.handle = CreateWindowEx(
			0,
			class_name,
			""Rocket Jump!"",
			style,
			CW_USEDEFAULT, CW_USEDEFAULT, rect.right - rect.left, rect.bottom - rect.top,
			NULL,
			NULL,
			instance,
			NULL
		);
		assert(g_window.handle != INVALID_HANDLE_VALUE);

		center_window();

		g_window.dc = GetDC(g_window.handle);

		int pixel_attribs[] = {
			WGL_DRAW_TO_WINDOW_ARB, GL_TRUE,
			WGL_SUPPORT_OPENGL_ARB, GL_TRUE,
			WGL_DOUBLE_BUFFER_ARB, GL_TRUE,
			WGL_SWAP_METHOD_ARB, WGL_SWAP_COPY_ARB,
			WGL_PIXEL_TYPE_ARB, WGL_TYPE_RGBA_ARB,
			WGL_ACCELERATION_ARB, WGL_FULL_ACCELERATION_ARB,
			WGL_COLOR_BITS_ARB, 32,
			WGL_DEPTH_BITS_ARB, 24,
			WGL_STENCIL_BITS_ARB, 8,

			#if m_multisample
			WGL_SAMPLE_BUFFERS_ARB, GL_TRUE,
			WGL_SAMPLES_ARB, 4,
			#endif

			0
		};

		PIXELFORMATDESCRIPTOR pfd = {};
		pfd.nSize = sizeof(pfd);
		int format;
		u32 num_formats;
		check(wglChoosePixelFormatARB(g_window.dc, pixel_attribs, NULL, 1, &format, &num_formats));
		check(DescribePixelFormat(g_window.dc, format, sizeof(pfd), &pfd));
		SetPixelFormat(g_window.dc, format, &pfd);

		int gl_attribs[] = {
			WGL_CONTEXT_MAJOR_VERSION_ARB, 3,
			WGL_CONTEXT_MINOR_VERSION_ARB, 3,
			WGL_CONTEXT_PROFILE_MASK_ARB, WGL_CONTEXT_CORE_PROFILE_BIT_ARB,
			// WGL_CONTEXT_FLAGS_ARB, WGL_CONTEXT_DEBUG_BIT_ARB,
			0
		};
		HGLRC glrc = wglCreateContextAttribsARB(g_window.dc, NULL, gl_attribs);
		assert(glrc);
		check(wglMakeCurrent(g_window.dc, glrc));
	}
	// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^		window end		^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
}"
Z2mmAUVz,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,sayid83,JavaScript,Saturday 8th of June 2024 03:48:09 PM CDT,"G2A.com free voucher & gaming guide.
Any gift card for free on G2A.com including Playstation gift cards & anything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1fhhFoxFyasZffiEC6aAwTSsLXtvB0Ci2/view?972

Working as of:
June 7 2024

"
