id,title,username,language,date,content
NfgsSaqp,lpc core,Igor150195,JavaScript,Thursday 2nd of November 2023 12:57:47 AM CDT,"var s3LP = {
	init: function(options) {
		var self = this;
		if (options){
			this.is_cms = options.is_cms ? true : false;
		}
		console.log(document.location)
		this.initForms();

		try {
			lp_init($('body'));
		} catch(e) {
			console.log(e);
		}
		this.pageBlocking();
		
		self.popupForm();
		
		document.dispatchEvent(new Event('lpcPopupFormInitDone', {bubbles: true}));
		
		if ($('body').find('._lp-image-container').length) {
			if (!window.hasOwnProperty('img_convert_cache')) {
                window.img_convert_cache = {};
            }
			var debounce = (function () {
				return function (fn, time) {
					var timer, func;
					func = function() {
						var args = [].slice.call(arguments, 0);
						window.clearTimeout(timer);
						timer = window.setTimeout(function () {
							window.requestAnimationFrame && window.requestAnimationFrame(function() {
								fn.apply(null, args);
							}) || fn.apply(null, args);
						}, time)
					};
					return func;
				}
			}());
			self.convertImages($('body'));
			$(window).on('resize', debounce(function() {
				self.convertImages($('body'));
			}, 200));
		}	
	},
	pageBlocking: function() {
		if (s3LP.page_blocking) {
			$('html, body').css({
				'overflow': 'hidden',
				'height': '100%'
			});
			$('<div />', {
				'class' : 'page-blocked'
			}).appendTo($('body'));
			
			$('.page-blocked').css({
				'background': 'rgba(0,0,0,.8)',
				'position': 'absolute',
				'left': 0,
				'right': 0,
				'bottom': 0,
				'top': 0,
				'z-index': 100000,
				'color': '#fff',
				'font-size': '28px',
				'display': 'flex',
				'align-items': 'center',
				'flex-direction': 'column',
				'padding': '10px',
				'text-align': 'center',
				'line-height':'1.5',
				'align-items': 'center',
				'justify-content': 'center'
			}).append('<b>Страница заблокирована</b><div style=""font-size: 18px;"">обратитесь в техническую поддержку</div>');
		}
	},
	initForms: function(parent) {
		//console.log(this.is_cms)
		
		var self = this;
		if (!parent) parent = document;
		if (!$(parent).is('[data-api-url][data-api-type=form]')) {
			parent = $(parent).find('[data-api-url][data-api-type=form]');
		}

		$(parent).each(function() {
			var obj = $(this);
			var form = obj.is(""form"") ? obj : obj.find(""form"");
			
			if (obj.data('s3form_inited')) {
				return;
			}

			if (self.is_cms) {
				form.attr('title', JS_LP_FORM_NOTE).tooltip();
				form.submit(function() {
					return false;
				});
			} else {
				form.submit(function() {
					$.post(obj.data('api-url'), form.serialize(), function(response) {
						if (response.result.success && response.result.redirect_url) {
							document.location = response.result.redirect_url;
						} else {
							if (response.result.html) {
								var replacement = $(response.result.html.replace(/[\r\n]/g, '').replace(/<script[^>]*>.*?<\/script>/g, ''));
								if (!$(replacement).is('[data-api-url][data-api-type=form]')) {
									replacement = $(replacement).find('[data-api-url][data-api-type=form]');
								}
								obj.replaceWith(replacement);
								
	
								// Init form calendars
								obj.find('.init-calendar').each(function(i){
									new tcal({
										'controlname':this.id,
										'place':this.parentNode,
										'lang':'ru'
									});
	
								});
	
								// Init form calendar intervals
								obj.find('.init-calendar-interval').each(function(i){
									for(var j=0; j<2; ++j){
										var e = f_getElement(this.id + '['+j+']');
										new tcal({
											'controlname':e.id,
											'place':e.parentNode,
											'lang':'ru',
											'intervalpair':[
												this.id + '[0]',
												this.id + '[1]'
											],
											'intervalupdatecont' : this.id
										});
									}
								});
								
								if (response.result && response.result.success && lpc_template){
        							 replacement.closest(`.lpc-wrap`).find(`[class$=__title-wrap]`).remove();
          						}
								
								var $captcha = replacement.find('input[name=_cn]');
								if ($captcha.length) {
									$.getScript('http://captcha.oml.ru/static/captcha.js?2', function() {
										var $d = replacement.find(""[id^=s3_captcha_cn]"");
										mgCaptcha.draw(""/my/s3/captcha/get.php"", ($d.length ? $d.get(0) : null));
									});
								}
								self.initForms(replacement);
							}
						}
					});
					return false;
				});
			}
			obj.data('s3form_inited', true);
		})
	},

	convertImages: function ($container) {
        var self = this;

        $container.find('._lp-image-container').each(function() {
            var $img = $(this).find('img');

            if ($img.length) {
                var img_src = $img.attr('src');
                if (!window.img_convert_cache.hasOwnProperty(img_src)) window.img_convert_cache[img_src] = {};
                self.convertImg(window.img_convert_cache[img_src], $img);
            }
        });
    },
    

    popupForm: function() {
		var $body = $('body'),
			$html = $('html'),
			self = this;

		$('<div class=""lp-popup-wrapper js-popup-wrapper""><div class=""lp-popup-overlay""></div><div class=""lp-popup-inner js-popup-inner""></div></div>').appendTo($body);

		var $wrapper = $('.js-popup-wrapper'),
			$newBlock,
			$container = $wrapper.find('.js-popup-inner'),
			$readyPopup = $body.find('[data-popup-type=""ready""]'),
			$finishPopup = $body.find('[data-popup-type=""finish""]'),
			$inactionPopup = $body.find('[data-popup-type=""inaction""]'),
			openedClass = '_opened',
			$popupCookieTime = $body.find('[data-hide-time]').data('hide-time');
			
			var isFramed = false;
			try {
			  isFramed = window != window.top || document != top.document || self.location != top.location;
			} catch (e) {
			  isFramed = true;
			}
			
		/*if($finishPopup.length) {
			$finishPopup.each(function(){
				var $this = $(this);
				
				if($this.parent('.lpc-popup-decor').length = 1){
					var $this = $this.closest('.lpc-popup-decor');
					
					$('html').one('mouseleave', function() {
					    if(!self.is_cms){
					    	$newBlock = self.appendPopupForm($this, $container, $wrapper);
					    	if($this.parent('.lpc-popup-decor').length = 1){
						    	document.dispatchEvent(new Event('lpcTriggerPopupInitDone', {bubbles: true}));
					    	}
					    }
					});
				}
			});
		} */

		if ($readyPopup.length && document.location.search != ""?no_panel=1"") {

			$readyPopup.each(function() {
				
				var $this = $(this);
				
				console.log($this);
				
				if($this.parent('.lpc-popup-decor').length = 1){
					var $this = $this.closest('.lpc-popup-decor');
				}
				
				document.addEventListener(""DOMContentLoaded"", function() {
					console.log('js dom load');
				});

				
					setTimeout(function(){
				    	$newBlock = self.appendPopupForm($this, $container, $wrapper);
				    	
				    	if($this.parent('.lpc-popup-decor').length = 1){
							document.dispatchEvent(new Event('lpcTriggerPopupInitDone', {bubbles: true}));
				    	}
				    	
					}, +$this.data('popup-time'))
				

				
				
				
				
				/*setTimeout(function(){
			    	$newBlock = self.appendPopupForm($this, $container, $wrapper);
			    	
			    	if($this.parent('.lpc-popup-decor').length = 1){
						document.dispatchEvent(new Event('lpcTriggerPopupInitDone', {bubbles: true}));
			    	}
				}, +$this.data('popup-time'))*/
			});
		}
		
		
		if ($inactionPopup.length) {
			$inactionPopup.each(function() {
				var $this = $(this),
					thisTime = +$this.data('popup-time'),
					idleTimer = null,
					idleState = false;
				
				if($this.parent('.lpc-popup-decor').length = 1){
					var $this = $this.closest('.lpc-popup-decor');
				}
				
				$(document).on('keydown scroll', function(){
					
					clearTimeout(idleTimer); // РѕС‚РјРµРЅСЏРµРј РїСЂРµР¶РЅРёР№ РІСЂРµРјРµРЅРЅРѕР№ РѕС‚СЂРµР·РѕРє
				
					if(idleState == true) return;
				
					idleState = false;
					
					idleTimer = setTimeout(function(){ 
						$newBlock = self.appendPopupForm($this, $container, $wrapper);
						idleState = true; 
						if($this.parent('.lpc-popup-decor').length = 1){
							document.dispatchEvent(new Event('lpcTriggerPopupInitDone', {bubbles: true}));
						}
					}, thisTime);
				});
				
				$(document).trigger('mousemove');
			});
		}

		$body.on('click', 'a[href^=""popup:""]', function(e){
			e.preventDefault();
			
			if($(this).closest('.lp-popup-wrapper').length != 0) {
				$newBlock.appendTo($('body'));
				$container.html('');
			}
			
			var $thisBlock = $('#' + this.href.replace(':', ''));
			
			if($thisBlock.length == 1) {
				$newBlock = self.appendPopupForm($thisBlock, $container, $wrapper);
			}

			
			
		});
		
		$container.on('click', '.js-close-popup', function(e) {
			e.preventDefault();
			
			if($newBlock.find('[data-popup-trigger-type]').length) {
				if($popupCookieTime == 30 || $popupCookieTime == 60) {
					var $new_minut = $popupCookieTime / 1440;
					createCookie(""lpctrigger"", ""1"", $new_minut);
				} else {
					createCookie(""lpctrigger"", ""1"", $popupCookieTime);
				}
				$newBlock.hide();
			}
			
			$newBlock.appendTo($('body'));
			
			$container.html('');
			$wrapper.removeClass(openedClass);
			
			$html.css({
				overflow: 'auto'
			});
			
		});
		
		$(document).on('keyup', function(e){
			if (e.keyCode != 27) return;
			if($newBlock){
			
				if($newBlock.find('[data-popup-trigger-type]').length) {
					if($popupCookieTime == 30 || $popupCookieTime == 60) {
						var $new_minut = $popupCookieTime / 1440;
						createCookie(""lpctrigger"", ""1"", $new_minut);
					} else {
						createCookie(""lpctrigger"", ""1"", $popupCookieTime);
					}
					$newBlock.hide();
				}
				
				$newBlock.appendTo($('body'));
			}
			$container.html('');
			$wrapper.removeClass(openedClass);
			
			$html.css({
				overflow: 'auto'
			});
		});
	},


	appendPopupForm: function($block, $container, $wrap) {
		var $newBlock = $block.prependTo($container),
			$html = $('html'),
			openedClass = '_opened';
			
		if (!$wrap.find('.lp-form-step-popup-inner').length) {
			var $uploads = $container.find('input[type=""hidden""][id^=""hidUploadField""]');

			if ($uploads.length) {
				$uploads.each(function(){
					var thisAttr = $(this).data('init-upload');
					newSWFU(void 0, thisAttr);
				});
			}
			
		} else {
			var $block = $wrap.find('.js-lp-steps-form');
			$block.html('');
			$block.formsteps();
		}
		
		$html.css({
			overflow: 'hidden'
		});

		$wrap.addClass(openedClass);
		
		return $newBlock;
	},

    convertImg : function (cache_img, $img) {
        var self = this;
        $img.css({""max-width"": ""100%"", ""max-height"": ""100%""});

        if (!$img.parent().hasClass('lp-img-contain')) {
            var img_width,
                img_height;

            if (!cache_img.hasOwnProperty('width') || !cache_img.hasOwnProperty('height')) {
                if ($img.is('svg') || ($img.attr('src') && $img.attr('src').slice(-3) == 'svg')) {
                    img_width = $img.parent().width();
                    img_height = $img.parent().height();
                } else {
                    img_width = $img[0].naturalWidth;
                    img_height = $img[0].naturalHeight;
                }
            } else {
                img_width = cache_img.width;
                img_height = cache_img.height;
            }

            self.setImgStyles($img, img_width, img_height, null);
        }
    },

    setImgStyles: function ($img, img_width, img_height, svg) {
        var $wrap = $img.parent();
        var wrap_width = parseInt($wrap.width()),
            wrap_height = parseInt($wrap.height()),
            wrap_prop = wrap_width/wrap_height;

        var min_width = wrap_height/img_height * img_width;

        if(img_width && img_height) {
            var img_prop = img_width/img_height;

            if (wrap_prop > img_prop) {
                $img.css({""max-width"": ""100%"", ""width"": img_width > wrap_width ? wrap_width : img_width, ""min-width"": ""0"", ""max-height"": ""none"", ""height"": ""auto""});
            } else {
                $img.css({""max-width"": ""none"", ""width"": ""auto"", ""min-width"": min_width > img_width ? img_width : min_width, /*""min-height"": ""100%"",*/  ""max-height"": ""100%"", ""height"": img_height > wrap_height ? wrap_height : img_height});

                if (svg) {
                    $img.css('min-height', '100%');
                }
            }
        }
    }
}"
8uctWkxU,Nigerian scammers [2-11-1/2023],bombaires,AIMMS,Thursday 2nd of November 2023 12:35:49 AM CDT,"<a href=""mailto:willypevergreenpharm@gmail.com"">willypevergreenpharm@gmail.com</a>
<a href=""mailto:willypevergreenpharm+2217@gmail.com"">willypevergreenpharm+2217@gmail.com</a>
<a href=""mailto:willypevergreenpharm+4328@gmail.com"">willypevergreenpharm+4328@gmail.com</a>
<a href=""mailto:willypevergreenpharm+12599@gmail.com"">willypevergreenpharm+12599@gmail.com</a>
<a href=""mailto:willypevergreenpharm+5908@gmail.com"">willypevergreenpharm+5908@gmail.com</a>
<a href=""mailto:willypevergreenpharm+11298@gmail.com"">willypevergreenpharm+11298@gmail.com</a>
<a href=""mailto:willypevergreenpharm+10775@gmail.com"">willypevergreenpharm+10775@gmail.com</a>
<a href=""mailto:willypevergreenpharm+27297@gmail.com"">willypevergreenpharm+27297@gmail.com</a>
<a href=""mailto:willypevergreenpharm+22329@gmail.com"">willypevergreenpharm+22329@gmail.com</a>
<a href=""mailto:willypevergreenpharm+32009@gmail.com"">willypevergreenpharm+32009@gmail.com</a>
<a href=""mailto:willypevergreenpharm+7227@gmail.com"">willypevergreenpharm+7227@gmail.com</a>
<a href=""mailto:willypevergreenpharm+26315@gmail.com"">willypevergreenpharm+26315@gmail.com</a>
<a href=""mailto:willypevergreenpharm+23367@gmail.com"">willypevergreenpharm+23367@gmail.com</a>
<a href=""mailto:willypevergreenpharm+31225@gmail.com"">willypevergreenpharm+31225@gmail.com</a>
<a href=""mailto:willypevergreenpharm+4624@gmail.com"">willypevergreenpharm+4624@gmail.com</a>
<a href=""mailto:willypevergreenpharm+13818@gmail.com"">willypevergreenpharm+13818@gmail.com</a>
<a href=""mailto:willypevergreenpharm+7877@gmail.com"">willypevergreenpharm+7877@gmail.com</a>
<a href=""mailto:willypevergreenpharm+18541@gmail.com"">willypevergreenpharm+18541@gmail.com</a>
<a href=""mailto:willypevergreenpharm+23829@gmail.com"">willypevergreenpharm+23829@gmail.com</a>
<a href=""mailto:willypevergreenpharm+13576@gmail.com"">willypevergreenpharm+13576@gmail.com</a>
<a href=""mailto:willypevergreenpharm+6899@gmail.com"">willypevergreenpharm+6899@gmail.com</a>
<a href=""mailto:willypevergreenpharm+13435@gmail.com"">willypevergreenpharm+13435@gmail.com</a>
<a href=""mailto:willypevergreenpharm+9814@gmail.com"">willypevergreenpharm+9814@gmail.com</a>
<a href=""mailto:willypevergreenpharm+2773@gmail.com"">willypevergreenpharm+2773@gmail.com</a>
<a href=""mailto:willypevergreenpharm+2740@gmail.com"">willypevergreenpharm+2740@gmail.com</a>
<a href=""mailto:willypevergreenpharm+31020@gmail.com"">willypevergreenpharm+31020@gmail.com</a>
<a href=""mailto:willypevergreenpharm+8612@gmail.com"">willypevergreenpharm+8612@gmail.com</a>
<a href=""mailto:willypevergreenpharm+19048@gmail.com"">willypevergreenpharm+19048@gmail.com</a>
<a href=""mailto:willypevergreenpharm+6158@gmail.com"">willypevergreenpharm+6158@gmail.com</a>
<a href=""mailto:willypevergreenpharm+20056@gmail.com"">willypevergreenpharm+20056@gmail.com</a>
<a href=""mailto:willypevergreenpharm+19145@gmail.com"">willypevergreenpharm+19145@gmail.com</a>
<a href=""mailto:willypevergreenpharm+29405@gmail.com"">willypevergreenpharm+29405@gmail.com</a>
<a href=""mailto:willypevergreenpharm+1391@gmail.com"">willypevergreenpharm+1391@gmail.com</a>
<a href=""mailto:willypevergreenpharm+3663@gmail.com"">willypevergreenpharm+3663@gmail.com</a>
<a href=""mailto:willypevergreenpharm+12660@gmail.com"">willypevergreenpharm+12660@gmail.com</a>
<a href=""mailto:willypevergreenpharm+20920@gmail.com"">willypevergreenpharm+20920@gmail.com</a>
<a href=""mailto:willypevergreenpharm+19794@gmail.com"">willypevergreenpharm+19794@gmail.com</a>
<a href=""mailto:willypevergreenpharm+29630@gmail.com"">willypevergreenpharm+29630@gmail.com</a>
<a href=""mailto:willypevergreenpharm+10808@gmail.com"">willypevergreenpharm+10808@gmail.com</a>
<a href=""mailto:willypevergreenpharm+24569@gmail.com"">willypevergreenpharm+24569@gmail.com</a>
<a href=""mailto:willypevergreenpharm+3687@gmail.com"">willypevergreenpharm+3687@gmail.com</a>
<a href=""mailto:willypevergreenpharm+18302@gmail.com"">willypevergreenpharm+18302@gmail.com</a>
<a href=""mailto:willypevergreenpharm+18159@gmail.com"">willypevergreenpharm+18159@gmail.com</a>
<a href=""mailto:willypevergreenpharm+26639@gmail.com"">willypevergreenpharm+26639@gmail.com</a>
<a href=""mailto:willypevergreenpharm+30667@gmail.com"">willypevergreenpharm+30667@gmail.com</a>
<a href=""mailto:willypevergreenpharm+25414@gmail.com"">willypevergreenpharm+25414@gmail.com</a>
<a href=""mailto:willypevergreenpharm+14288@gmail.com"">willypevergreenpharm+14288@gmail.com</a>
<a href=""mailto:willypevergreenpharm+23418@gmail.com"">willypevergreenpharm+23418@gmail.com</a>
<a href=""mailto:willypevergreenpharm+11516@gmail.com"">willypevergreenpharm+11516@gmail.com</a>
<a href=""mailto:willypevergreenpharm+4091@gmail.com"">willypevergreenpharm+4091@gmail.com</a>
<a href=""mailto:willypevergreenpharm+11920@gmail.com"">willypevergreenpharm+11920@gmail.com</a>
<a href=""mailto:willypevergreenpharm+10597@gmail.com"">willypevergreenpharm+10597@gmail.com</a>
<a href=""mailto:willypevergreenpharm+24220@gmail.com"">willypevergreenpharm+24220@gmail.com</a>
<a href=""mailto:willypevergreenpharm+9589@gmail.com"">willypevergreenpharm+9589@gmail.com</a>
<a href=""mailto:willypevergreenpharm+23616@gmail.com"">willypevergreenpharm+23616@gmail.com</a>
<a href=""mailto:willypevergreenpharm+11950@gmail.com"">willypevergreenpharm+11950@gmail.com</a>
<a href=""mailto:willypevergreenpharm+29934@gmail.com"">willypevergreenpharm+29934@gmail.com</a>
<a href=""mailto:willypevergreenpharm+3228@gmail.com"">willypevergreenpharm+3228@gmail.com</a>
<a href=""mailto:willypevergreenpharm+221@gmail.com"">willypevergreenpharm+221@gmail.com</a>
<a href=""mailto:willypevergreenpharm+25012@gmail.com"">willypevergreenpharm+25012@gmail.com</a>
<a href=""mailto:willypevergreenpharm+9085@gmail.com"">willypevergreenpharm+9085@gmail.com</a>
<a href=""mailto:willypevergreenpharm+4477@gmail.com"">willypevergreenpharm+4477@gmail.com</a>
<a href=""mailto:willypevergreenpharm+16477@gmail.com"">willypevergreenpharm+16477@gmail.com</a>
<a href=""mailto:willypevergreenpharm+5364@gmail.com"">willypevergreenpharm+5364@gmail.com</a>
<a href=""mailto:willypevergreenpharm+7888@gmail.com"">willypevergreenpharm+7888@gmail.com</a>
<a href=""mailto:willypevergreenpharm+20788@gmail.com"">willypevergreenpharm+20788@gmail.com</a>
<a href=""mailto:willypevergreenpharm+31242@gmail.com"">willypevergreenpharm+31242@gmail.com</a>
<a href=""mailto:willypevergreenpharm+20977@gmail.com"">willypevergreenpharm+20977@gmail.com</a>
<a href=""mailto:willypevergreenpharm+12462@gmail.com"">willypevergreenpharm+12462@gmail.com</a>
<a href=""mailto:willypevergreenpharm+12866@gmail.com"">willypevergreenpharm+12866@gmail.com</a>
<a href=""mailto:willypevergreenpharm+16337@gmail.com"">willypevergreenpharm+16337@gmail.com</a>
<a href=""mailto:willypevergreenpharm+27890@gmail.com"">willypevergreenpharm+27890@gmail.com</a>
<a href=""mailto:willypevergreenpharm+8154@gmail.com"">willypevergreenpharm+8154@gmail.com</a>
<a href=""mailto:willypevergreenpharm+20799@gmail.com"">willypevergreenpharm+20799@gmail.com</a>
<a href=""mailto:willypevergreenpharm+2852@gmail.com"">willypevergreenpharm+2852@gmail.com</a>
<a href=""mailto:willypevergreenpharm+26391@gmail.com"">willypevergreenpharm+26391@gmail.com</a>
<a href=""mailto:willypevergreenpharm+23204@gmail.com"">willypevergreenpharm+23204@gmail.com</a>
<a href=""mailto:willypevergreenpharm+22864@gmail.com"">willypevergreenpharm+22864@gmail.com</a>
<a href=""mailto:willypevergreenpharm+30416@gmail.com"">willypevergreenpharm+30416@gmail.com</a>
<a href=""mailto:willypevergreenpharm+30509@gmail.com"">willypevergreenpharm+30509@gmail.com</a>
<a href=""mailto:willypevergreenpharm+19595@gmail.com"">willypevergreenpharm+19595@gmail.com</a>
<a href=""mailto:willypevergreenpharm+26773@gmail.com"">willypevergreenpharm+26773@gmail.com</a>
<a href=""mailto:willypevergreenpharm+1656@gmail.com"">willypevergreenpharm+1656@gmail.com</a>
<a href=""mailto:willypevergreenpharm+25328@gmail.com"">willypevergreenpharm+25328@gmail.com</a>
<a href=""mailto:willypevergreenpharm+27498@gmail.com"">willypevergreenpharm+27498@gmail.com</a>
<a href=""mailto:willypevergreenpharm+27488@gmail.com"">willypevergreenpharm+27488@gmail.com</a>
<a href=""mailto:willypevergreenpharm+7962@gmail.com"">willypevergreenpharm+7962@gmail.com</a>
<a href=""mailto:willypevergreenpharm+19292@gmail.com"">willypevergreenpharm+19292@gmail.com</a>
<a href=""mailto:willypevergreenpharm+14125@gmail.com"">willypevergreenpharm+14125@gmail.com</a>
<a href=""mailto:willypevergreenpharm+6318@gmail.com"">willypevergreenpharm+6318@gmail.com</a>
<a href=""mailto:willypevergreenpharm+29331@gmail.com"">willypevergreenpharm+29331@gmail.com</a>
<a href=""mailto:willypevergreenpharm+3873@gmail.com"">willypevergreenpharm+3873@gmail.com</a>
<a href=""mailto:willypevergreenpharm+28265@gmail.com"">willypevergreenpharm+28265@gmail.com</a>
<a href=""mailto:willypevergreenpharm+1869@gmail.com"">willypevergreenpharm+1869@gmail.com</a>
<a href=""mailto:willypevergreenpharm+13723@gmail.com"">willypevergreenpharm+13723@gmail.com</a>
<a href=""mailto:willypevergreenpharm+27663@gmail.com"">willypevergreenpharm+27663@gmail.com</a>
<a href=""mailto:willypevergreenpharm+11591@gmail.com"">willypevergreenpharm+11591@gmail.com</a>
<a href=""mailto:willypevergreenpharm+14757@gmail.com"">willypevergreenpharm+14757@gmail.com</a>
<a href=""mailto:willypevergreenpharm+23665@gmail.com"">willypevergreenpharm+23665@gmail.com</a>
<a href=""mailto:willypevergreenpharm+22792@gmail.com"">willypevergreenpharm+22792@gmail.com</a>
<a href=""mailto:willypevergreenpharm+1352@gmail.com"">willypevergreenpharm+1352@gmail.com</a>
<a href=""mailto:un.dpt9811@gmail.com"">un.dpt9811@gmail.com</a>
<a href=""mailto:un.dpt9811+12592@gmail.com"">un.dpt9811+12592@gmail.com</a>
<a href=""mailto:un.dpt9811+2439@gmail.com"">un.dpt9811+2439@gmail.com</a>
<a href=""mailto:un.dpt9811+31239@gmail.com"">un.dpt9811+31239@gmail.com</a>
<a href=""mailto:un.dpt9811+5519@gmail.com"">un.dpt9811+5519@gmail.com</a>
<a href=""mailto:un.dpt9811+16972@gmail.com"">un.dpt9811+16972@gmail.com</a>
<a href=""mailto:un.dpt9811+1483@gmail.com"">un.dpt9811+1483@gmail.com</a>
<a href=""mailto:un.dpt9811+8861@gmail.com"">un.dpt9811+8861@gmail.com</a>
<a href=""mailto:un.dpt9811+1117@gmail.com"">un.dpt9811+1117@gmail.com</a>
<a href=""mailto:un.dpt9811+31@gmail.com"">un.dpt9811+31@gmail.com</a>
<a href=""mailto:un.dpt9811+28427@gmail.com"">un.dpt9811+28427@gmail.com</a>
<a href=""mailto:un.dpt9811+20848@gmail.com"">un.dpt9811+20848@gmail.com</a>
<a href=""mailto:un.dpt9811+1564@gmail.com"">un.dpt9811+1564@gmail.com</a>
<a href=""mailto:un.dpt9811+23070@gmail.com"">un.dpt9811+23070@gmail.com</a>
<a href=""mailto:un.dpt9811+1337@gmail.com"">un.dpt9811+1337@gmail.com</a>
<a href=""mailto:un.dpt9811+5428@gmail.com"">un.dpt9811+5428@gmail.com</a>
<a href=""mailto:un.dpt9811+18962@gmail.com"">un.dpt9811+18962@gmail.com</a>
<a href=""mailto:un.dpt9811+6930@gmail.com"">un.dpt9811+6930@gmail.com</a>
<a href=""mailto:un.dpt9811+15670@gmail.com"">un.dpt9811+15670@gmail.com</a>
<a href=""mailto:un.dpt9811+18825@gmail.com"">un.dpt9811+18825@gmail.com</a>
<a href=""mailto:un.dpt9811+12559@gmail.com"">un.dpt9811+12559@gmail.com</a>
<a href=""mailto:un.dpt9811+27228@gmail.com"">un.dpt9811+27228@gmail.com</a>
<a href=""mailto:un.dpt9811+12766@gmail.com"">un.dpt9811+12766@gmail.com</a>
<a href=""mailto:un.dpt9811+3710@gmail.com"">un.dpt9811+3710@gmail.com</a>
<a href=""mailto:un.dpt9811+29994@gmail.com"">un.dpt9811+29994@gmail.com</a>
<a href=""mailto:un.dpt9811+23957@gmail.com"">un.dpt9811+23957@gmail.com</a>
<a href=""mailto:un.dpt9811+25738@gmail.com"">un.dpt9811+25738@gmail.com</a>
<a href=""mailto:un.dpt9811+5273@gmail.com"">un.dpt9811+5273@gmail.com</a>
<a href=""mailto:un.dpt9811+32579@gmail.com"">un.dpt9811+32579@gmail.com</a>
<a href=""mailto:un.dpt9811+7875@gmail.com"">un.dpt9811+7875@gmail.com</a>
<a href=""mailto:un.dpt9811+28819@gmail.com"">un.dpt9811+28819@gmail.com</a>
<a href=""mailto:un.dpt9811+22527@gmail.com"">un.dpt9811+22527@gmail.com</a>
<a href=""mailto:un.dpt9811+10323@gmail.com"">un.dpt9811+10323@gmail.com</a>
<a href=""mailto:un.dpt9811+21515@gmail.com"">un.dpt9811+21515@gmail.com</a>
<a href=""mailto:un.dpt9811+12300@gmail.com"">un.dpt9811+12300@gmail.com</a>
<a href=""mailto:un.dpt9811+20172@gmail.com"">un.dpt9811+20172@gmail.com</a>
<a href=""mailto:un.dpt9811+2518@gmail.com"">un.dpt9811+2518@gmail.com</a>
<a href=""mailto:un.dpt9811+32462@gmail.com"">un.dpt9811+32462@gmail.com</a>
<a href=""mailto:un.dpt9811+9304@gmail.com"">un.dpt9811+9304@gmail.com</a>
<a href=""mailto:un.dpt9811+12136@gmail.com"">un.dpt9811+12136@gmail.com</a>
<a href=""mailto:un.dpt9811+27418@gmail.com"">un.dpt9811+27418@gmail.com</a>
<a href=""mailto:un.dpt9811+15245@gmail.com"">un.dpt9811+15245@gmail.com</a>
<a href=""mailto:un.dpt9811+21174@gmail.com"">un.dpt9811+21174@gmail.com</a>
<a href=""mailto:un.dpt9811+24688@gmail.com"">un.dpt9811+24688@gmail.com</a>
<a href=""mailto:un.dpt9811+3965@gmail.com"">un.dpt9811+3965@gmail.com</a>
<a href=""mailto:un.dpt9811+24961@gmail.com"">un.dpt9811+24961@gmail.com</a>
<a href=""mailto:un.dpt9811+4024@gmail.com"">un.dpt9811+4024@gmail.com</a>
<a href=""mailto:un.dpt9811+29493@gmail.com"">un.dpt9811+29493@gmail.com</a>
<a href=""mailto:un.dpt9811+23711@gmail.com"">un.dpt9811+23711@gmail.com</a>
<a href=""mailto:un.dpt9811+10948@gmail.com"">un.dpt9811+10948@gmail.com</a>
<a href=""mailto:un.dpt9811+28929@gmail.com"">un.dpt9811+28929@gmail.com</a>
<a href=""mailto:un.dpt9811+1712@gmail.com"">un.dpt9811+1712@gmail.com</a>
<a href=""mailto:un.dpt9811+759@gmail.com"">un.dpt9811+759@gmail.com</a>
<a href=""mailto:un.dpt9811+11195@gmail.com"">un.dpt9811+11195@gmail.com</a>
<a href=""mailto:un.dpt9811+11635@gmail.com"">un.dpt9811+11635@gmail.com</a>
<a href=""mailto:un.dpt9811+21374@gmail.com"">un.dpt9811+21374@gmail.com</a>
<a href=""mailto:un.dpt9811+12138@gmail.com"">un.dpt9811+12138@gmail.com</a>
<a href=""mailto:un.dpt9811+18786@gmail.com"">un.dpt9811+18786@gmail.com</a>
<a href=""mailto:un.dpt9811+22709@gmail.com"">un.dpt9811+22709@gmail.com</a>
<a href=""mailto:un.dpt9811+18992@gmail.com"">un.dpt9811+18992@gmail.com</a>
<a href=""mailto:un.dpt9811+23340@gmail.com"">un.dpt9811+23340@gmail.com</a>
<a href=""mailto:un.dpt9811+32478@gmail.com"">un.dpt9811+32478@gmail.com</a>
<a href=""mailto:un.dpt9811+24948@gmail.com"">un.dpt9811+24948@gmail.com</a>
<a href=""mailto:un.dpt9811+5310@gmail.com"">un.dpt9811+5310@gmail.com</a>
<a href=""mailto:un.dpt9811+24368@gmail.com"">un.dpt9811+24368@gmail.com</a>
<a href=""mailto:un.dpt9811+31628@gmail.com"">un.dpt9811+31628@gmail.com</a>
<a href=""mailto:un.dpt9811+13416@gmail.com"">un.dpt9811+13416@gmail.com</a>
<a href=""mailto:un.dpt9811+6710@gmail.com"">un.dpt9811+6710@gmail.com</a>
<a href=""mailto:un.dpt9811+9272@gmail.com"">un.dpt9811+9272@gmail.com</a>
<a href=""mailto:un.dpt9811+21844@gmail.com"">un.dpt9811+21844@gmail.com</a>
<a href=""mailto:un.dpt9811+24223@gmail.com"">un.dpt9811+24223@gmail.com</a>
<a href=""mailto:un.dpt9811+534@gmail.com"">un.dpt9811+534@gmail.com</a>
<a href=""mailto:un.dpt9811+8882@gmail.com"">un.dpt9811+8882@gmail.com</a>
<a href=""mailto:un.dpt9811+27645@gmail.com"">un.dpt9811+27645@gmail.com</a>
<a href=""mailto:un.dpt9811+16257@gmail.com"">un.dpt9811+16257@gmail.com</a>
<a href=""mailto:un.dpt9811+18649@gmail.com"">un.dpt9811+18649@gmail.com</a>
<a href=""mailto:un.dpt9811+18987@gmail.com"">un.dpt9811+18987@gmail.com</a>
<a href=""mailto:un.dpt9811+20219@gmail.com"">un.dpt9811+20219@gmail.com</a>
<a href=""mailto:un.dpt9811+21788@gmail.com"">un.dpt9811+21788@gmail.com</a>
<a href=""mailto:un.dpt9811+8122@gmail.com"">un.dpt9811+8122@gmail.com</a>
<a href=""mailto:un.dpt9811+6862@gmail.com"">un.dpt9811+6862@gmail.com</a>
<a href=""mailto:un.dpt9811+17931@gmail.com"">un.dpt9811+17931@gmail.com</a>
<a href=""mailto:un.dpt9811+13744@gmail.com"">un.dpt9811+13744@gmail.com</a>
<a href=""mailto:un.dpt9811+9374@gmail.com"">un.dpt9811+9374@gmail.com</a>
<a href=""mailto:un.dpt9811+11053@gmail.com"">un.dpt9811+11053@gmail.com</a>
<a href=""mailto:un.dpt9811+16582@gmail.com"">un.dpt9811+16582@gmail.com</a>
<a href=""mailto:un.dpt9811+31619@gmail.com"">un.dpt9811+31619@gmail.com</a>
<a href=""mailto:un.dpt9811+2479@gmail.com"">un.dpt9811+2479@gmail.com</a>
<a href=""mailto:un.dpt9811+21404@gmail.com"">un.dpt9811+21404@gmail.com</a>
<a href=""mailto:un.dpt9811+11144@gmail.com"">un.dpt9811+11144@gmail.com</a>
<a href=""mailto:un.dpt9811+30888@gmail.com"">un.dpt9811+30888@gmail.com</a>
<a href=""mailto:un.dpt9811+15618@gmail.com"">un.dpt9811+15618@gmail.com</a>
<a href=""mailto:un.dpt9811+24521@gmail.com"">un.dpt9811+24521@gmail.com</a>
<a href=""mailto:un.dpt9811+8526@gmail.com"">un.dpt9811+8526@gmail.com</a>
<a href=""mailto:un.dpt9811+8427@gmail.com"">un.dpt9811+8427@gmail.com</a>
<a href=""mailto:un.dpt9811+18202@gmail.com"">un.dpt9811+18202@gmail.com</a>
<a href=""mailto:un.dpt9811+1617@gmail.com"">un.dpt9811+1617@gmail.com</a>
<a href=""mailto:un.dpt9811+29609@gmail.com"">un.dpt9811+29609@gmail.com</a>
<a href=""mailto:un.dpt9811+27204@gmail.com"">un.dpt9811+27204@gmail.com</a>
<a href=""mailto:un.dpt9811+27601@gmail.com"">un.dpt9811+27601@gmail.com</a>
<a href=""mailto:un.dpt9811+16292@gmail.com"">un.dpt9811+16292@gmail.com</a>
<a href=""mailto:qountic.info@protonmail.com"">qountic.info@protonmail.com</a>
<a href=""mailto:info6@qualityservice.com"">info6@qualityservice.com</a>
<a href=""mailto:quontic.info@privyinternet.com"">quontic.info@privyinternet.com</a>
<a href=""mailto:un001@secretary.net"">un001@secretary.net</a>
<a href=""mailto:yusifsunusimusa@gmail.com"">yusifsunusimusa@gmail.com</a>
<a href=""mailto:yusifsunusimusa+10888@gmail.com"">yusifsunusimusa+10888@gmail.com</a>
<a href=""mailto:yusifsunusimusa+31192@gmail.com"">yusifsunusimusa+31192@gmail.com</a>
<a href=""mailto:yusifsunusimusa+15827@gmail.com"">yusifsunusimusa+15827@gmail.com</a>
<a href=""mailto:yusifsunusimusa+3282@gmail.com"">yusifsunusimusa+3282@gmail.com</a>
<a href=""mailto:yusifsunusimusa+31874@gmail.com"">yusifsunusimusa+31874@gmail.com</a>
<a href=""mailto:yusifsunusimusa+29633@gmail.com"">yusifsunusimusa+29633@gmail.com</a>
<a href=""mailto:yusifsunusimusa+24371@gmail.com"">yusifsunusimusa+24371@gmail.com</a>
<a href=""mailto:yusifsunusimusa+27760@gmail.com"">yusifsunusimusa+27760@gmail.com</a>
<a href=""mailto:yusifsunusimusa+31012@gmail.com"">yusifsunusimusa+31012@gmail.com</a>
<a href=""mailto:yusifsunusimusa+10221@gmail.com"">yusifsunusimusa+10221@gmail.com</a>
<a href=""mailto:yusifsunusimusa+31294@gmail.com"">yusifsunusimusa+31294@gmail.com</a>
<a href=""mailto:yusifsunusimusa+8920@gmail.com"">yusifsunusimusa+8920@gmail.com</a>
<a href=""mailto:yusifsunusimusa+13020@gmail.com"">yusifsunusimusa+13020@gmail.com</a>
<a href=""mailto:yusifsunusimusa+651@gmail.com"">yusifsunusimusa+651@gmail.com</a>
<a href=""mailto:yusifsunusimusa+28564@gmail.com"">yusifsunusimusa+28564@gmail.com</a>
<a href=""mailto:yusifsunusimusa+1404@gmail.com"">yusifsunusimusa+1404@gmail.com</a>
<a href=""mailto:yusifsunusimusa+27606@gmail.com"">yusifsunusimusa+27606@gmail.com</a>
<a href=""mailto:yusifsunusimusa+7465@gmail.com"">yusifsunusimusa+7465@gmail.com</a>
<a href=""mailto:yusifsunusimusa+17000@gmail.com"">yusifsunusimusa+17000@gmail.com</a>
<a href=""mailto:yusifsunusimusa+30818@gmail.com"">yusifsunusimusa+30818@gmail.com</a>
<a href=""mailto:yusifsunusimusa+23971@gmail.com"">yusifsunusimusa+23971@gmail.com</a>
<a href=""mailto:yusifsunusimusa+4441@gmail.com"">yusifsunusimusa+4441@gmail.com</a>
<a href=""mailto:yusifsunusimusa+18332@gmail.com"">yusifsunusimusa+18332@gmail.com</a>
<a href=""mailto:yusifsunusimusa+15855@gmail.com"">yusifsunusimusa+15855@gmail.com</a>
<a href=""mailto:yusifsunusimusa+8089@gmail.com"">yusifsunusimusa+8089@gmail.com</a>
<a href=""mailto:yusifsunusimusa+20727@gmail.com"">yusifsunusimusa+20727@gmail.com</a>
<a href=""mailto:yusifsunusimusa+12704@gmail.com"">yusifsunusimusa+12704@gmail.com</a>
<a href=""mailto:yusifsunusimusa+28938@gmail.com"">yusifsunusimusa+28938@gmail.com</a>
<a href=""mailto:yusifsunusimusa+25842@gmail.com"">yusifsunusimusa+25842@gmail.com</a>
<a href=""mailto:yusifsunusimusa+28230@gmail.com"">yusifsunusimusa+28230@gmail.com</a>
<a href=""mailto:yusifsunusimusa+9793@gmail.com"">yusifsunusimusa+9793@gmail.com</a>
<a href=""mailto:yusifsunusimusa+2034@gmail.com"">yusifsunusimusa+2034@gmail.com</a>
<a href=""mailto:yusifsunusimusa+29867@gmail.com"">yusifsunusimusa+29867@gmail.com</a>
<a href=""mailto:yusifsunusimusa+7339@gmail.com"">yusifsunusimusa+7339@gmail.com</a>
<a href=""mailto:yusifsunusimusa+770@gmail.com"">yusifsunusimusa+770@gmail.com</a>
<a href=""mailto:yusifsunusimusa+23661@gmail.com"">yusifsunusimusa+23661@gmail.com</a>
<a href=""mailto:yusifsunusimusa+15517@gmail.com"">yusifsunusimusa+15517@gmail.com</a>
<a href=""mailto:yusifsunusimusa+9773@gmail.com"">yusifsunusimusa+9773@gmail.com</a>
<a href=""mailto:yusifsunusimusa+17313@gmail.com"">yusifsunusimusa+17313@gmail.com</a>
<a href=""mailto:yusifsunusimusa+18199@gmail.com"">yusifsunusimusa+18199@gmail.com</a>
<a href=""mailto:yusifsunusimusa+23957@gmail.com"">yusifsunusimusa+23957@gmail.com</a>
<a href=""mailto:yusifsunusimusa+29036@gmail.com"">yusifsunusimusa+29036@gmail.com</a>
<a href=""mailto:yusifsunusimusa+3562@gmail.com"">yusifsunusimusa+3562@gmail.com</a>
<a href=""mailto:yusifsunusimusa+29460@gmail.com"">yusifsunusimusa+29460@gmail.com</a>
<a href=""mailto:yusifsunusimusa+12199@gmail.com"">yusifsunusimusa+12199@gmail.com</a>
<a href=""mailto:yusifsunusimusa+16819@gmail.com"">yusifsunusimusa+16819@gmail.com</a>
<a href=""mailto:yusifsunusimusa+18749@gmail.com"">yusifsunusimusa+18749@gmail.com</a>
<a href=""mailto:yusifsunusimusa+16758@gmail.com"">yusifsunusimusa+16758@gmail.com</a>
<a href=""mailto:yusifsunusimusa+7281@gmail.com"">yusifsunusimusa+7281@gmail.com</a>
<a href=""mailto:yusifsunusimusa+30581@gmail.com"">yusifsunusimusa+30581@gmail.com</a>
<a href=""mailto:yusifsunusimusa+12359@gmail.com"">yusifsunusimusa+12359@gmail.com</a>
<a href=""mailto:yusifsunusimusa+19447@gmail.com"">yusifsunusimusa+19447@gmail.com</a>
<a href=""mailto:yusifsunusimusa+897@gmail.com"">yusifsunusimusa+897@gmail.com</a>
<a href=""mailto:yusifsunusimusa+15412@gmail.com"">yusifsunusimusa+15412@gmail.com</a>
<a href=""mailto:yusifsunusimusa+4216@gmail.com"">yusifsunusimusa+4216@gmail.com</a>
<a href=""mailto:yusifsunusimusa+7695@gmail.com"">yusifsunusimusa+7695@gmail.com</a>
<a href=""mailto:yusifsunusimusa+28073@gmail.com"">yusifsunusimusa+28073@gmail.com</a>
<a href=""mailto:yusifsunusimusa+24930@gmail.com"">yusifsunusimusa+24930@gmail.com</a>
<a href=""mailto:yusifsunusimusa+10458@gmail.com"">yusifsunusimusa+10458@gmail.com</a>
<a href=""mailto:yusifsunusimusa+9425@gmail.com"">yusifsunusimusa+9425@gmail.com</a>
<a href=""mailto:yusifsunusimusa+20559@gmail.com"">yusifsunusimusa+20559@gmail.com</a>
<a href=""mailto:yusifsunusimusa+25256@gmail.com"">yusifsunusimusa+25256@gmail.com</a>
<a href=""mailto:yusifsunusimusa+6503@gmail.com"">yusifsunusimusa+6503@gmail.com</a>
<a href=""mailto:yusifsunusimusa+5205@gmail.com"">yusifsunusimusa+5205@gmail.com</a>
<a href=""mailto:yusifsunusimusa+7720@gmail.com"">yusifsunusimusa+7720@gmail.com</a>
<a href=""mailto:yusifsunusimusa+15035@gmail.com"">yusifsunusimusa+15035@gmail.com</a>
<a href=""mailto:yusifsunusimusa+15097@gmail.com"">yusifsunusimusa+15097@gmail.com</a>
<a href=""mailto:yusifsunusimusa+27194@gmail.com"">yusifsunusimusa+27194@gmail.com</a>
<a href=""mailto:yusifsunusimusa+21787@gmail.com"">yusifsunusimusa+21787@gmail.com</a>
<a href=""mailto:yusifsunusimusa+22735@gmail.com"">yusifsunusimusa+22735@gmail.com</a>
<a href=""mailto:yusifsunusimusa+4556@gmail.com"">yusifsunusimusa+4556@gmail.com</a>
<a href=""mailto:yusifsunusimusa+12801@gmail.com"">yusifsunusimusa+12801@gmail.com</a>
<a href=""mailto:yusifsunusimusa+3774@gmail.com"">yusifsunusimusa+3774@gmail.com</a>
<a href=""mailto:yusifsunusimusa+23142@gmail.com"">yusifsunusimusa+23142@gmail.com</a>
<a href=""mailto:yusifsunusimusa+21612@gmail.com"">yusifsunusimusa+21612@gmail.com</a>
<a href=""mailto:yusifsunusimusa+5871@gmail.com"">yusifsunusimusa+5871@gmail.com</a>
<a href=""mailto:yusifsunusimusa+15102@gmail.com"">yusifsunusimusa+15102@gmail.com</a>
<a href=""mailto:yusifsunusimusa+18865@gmail.com"">yusifsunusimusa+18865@gmail.com</a>
<a href=""mailto:yusifsunusimusa+8032@gmail.com"">yusifsunusimusa+8032@gmail.com</a>
<a href=""mailto:yusifsunusimusa+20848@gmail.com"">yusifsunusimusa+20848@gmail.com</a>
<a href=""mailto:yusifsunusimusa+22781@gmail.com"">yusifsunusimusa+22781@gmail.com</a>
<a href=""mailto:yusifsunusimusa+16124@gmail.com"">yusifsunusimusa+16124@gmail.com</a>
<a href=""mailto:yusifsunusimusa+32312@gmail.com"">yusifsunusimusa+32312@gmail.com</a>
<a href=""mailto:yusifsunusimusa+13064@gmail.com"">yusifsunusimusa+13064@gmail.com</a>
<a href=""mailto:yusifsunusimusa+2586@gmail.com"">yusifsunusimusa+2586@gmail.com</a>
<a href=""mailto:yusifsunusimusa+17424@gmail.com"">yusifsunusimusa+17424@gmail.com</a>
<a href=""mailto:yusifsunusimusa+703@gmail.com"">yusifsunusimusa+703@gmail.com</a>
<a href=""mailto:yusifsunusimusa+20949@gmail.com"">yusifsunusimusa+20949@gmail.com</a>
<a href=""mailto:yusifsunusimusa+12720@gmail.com"">yusifsunusimusa+12720@gmail.com</a>
<a href=""mailto:yusifsunusimusa+29877@gmail.com"">yusifsunusimusa+29877@gmail.com</a>
<a href=""mailto:yusifsunusimusa+11004@gmail.com"">yusifsunusimusa+11004@gmail.com</a>
<a href=""mailto:yusifsunusimusa+9151@gmail.com"">yusifsunusimusa+9151@gmail.com</a>
<a href=""mailto:yusifsunusimusa+5117@gmail.com"">yusifsunusimusa+5117@gmail.com</a>
<a href=""mailto:yusifsunusimusa+18927@gmail.com"">yusifsunusimusa+18927@gmail.com</a>
<a href=""mailto:yusifsunusimusa+11048@gmail.com"">yusifsunusimusa+11048@gmail.com</a>
<a href=""mailto:yusifsunusimusa+24376@gmail.com"">yusifsunusimusa+24376@gmail.com</a>
<a href=""mailto:yusifsunusimusa+16265@gmail.com"">yusifsunusimusa+16265@gmail.com</a>
<a href=""mailto:yusifsunusimusa+8343@gmail.com"">yusifsunusimusa+8343@gmail.com</a>
<a href=""mailto:yusifsunusimusa+29133@gmail.com"">yusifsunusimusa+29133@gmail.com</a>
<a href=""mailto:yusifsunusimusa+6933@gmail.com"">yusifsunusimusa+6933@gmail.com</a>
<a href=""mailto:jeromepowell493@gmail.com"">jeromepowell493@gmail.com</a>
<a href=""mailto:jeromepowell493+30236@gmail.com"">jeromepowell493+30236@gmail.com</a>
<a href=""mailto:jeromepowell493+16960@gmail.com"">jeromepowell493+16960@gmail.com</a>
<a href=""mailto:jeromepowell493+20535@gmail.com"">jeromepowell493+20535@gmail.com</a>
<a href=""mailto:jeromepowell493+19550@gmail.com"">jeromepowell493+19550@gmail.com</a>
<a href=""mailto:jeromepowell493+27815@gmail.com"">jeromepowell493+27815@gmail.com</a>
<a href=""mailto:jeromepowell493+68@gmail.com"">jeromepowell493+68@gmail.com</a>
<a href=""mailto:jeromepowell493+2839@gmail.com"">jeromepowell493+2839@gmail.com</a>
<a href=""mailto:jeromepowell493+20367@gmail.com"">jeromepowell493+20367@gmail.com</a>
<a href=""mailto:jeromepowell493+11304@gmail.com"">jeromepowell493+11304@gmail.com</a>
<a href=""mailto:jeromepowell493+1038@gmail.com"">jeromepowell493+1038@gmail.com</a>
<a href=""mailto:jeromepowell493+12532@gmail.com"">jeromepowell493+12532@gmail.com</a>
<a href=""mailto:jeromepowell493+9789@gmail.com"">jeromepowell493+9789@gmail.com</a>
<a href=""mailto:jeromepowell493+30036@gmail.com"">jeromepowell493+30036@gmail.com</a>
<a href=""mailto:jeromepowell493+11096@gmail.com"">jeromepowell493+11096@gmail.com</a>
<a href=""mailto:jeromepowell493+31608@gmail.com"">jeromepowell493+31608@gmail.com</a>
<a href=""mailto:jeromepowell493+29354@gmail.com"">jeromepowell493+29354@gmail.com</a>
<a href=""mailto:jeromepowell493+12492@gmail.com"">jeromepowell493+12492@gmail.com</a>
<a href=""mailto:jeromepowell493+11096@gmail.com"">jeromepowell493+11096@gmail.com</a>
<a href=""mailto:jeromepowell493+19198@gmail.com"">jeromepowell493+19198@gmail.com</a>
<a href=""mailto:jeromepowell493+999@gmail.com"">jeromepowell493+999@gmail.com</a>
<a href=""mailto:jeromepowell493+27062@gmail.com"">jeromepowell493+27062@gmail.com</a>
<a href=""mailto:jeromepowell493+10371@gmail.com"">jeromepowell493+10371@gmail.com</a>
<a href=""mailto:jeromepowell493+2777@gmail.com"">jeromepowell493+2777@gmail.com</a>
<a href=""mailto:jeromepowell493+18067@gmail.com"">jeromepowell493+18067@gmail.com</a>
<a href=""mailto:jeromepowell493+27860@gmail.com"">jeromepowell493+27860@gmail.com</a>
<a href=""mailto:jeromepowell493+20110@gmail.com"">jeromepowell493+20110@gmail.com</a>
<a href=""mailto:jeromepowell493+24807@gmail.com"">jeromepowell493+24807@gmail.com</a>
<a href=""mailto:jeromepowell493+2221@gmail.com"">jeromepowell493+2221@gmail.com</a>
<a href=""mailto:jeromepowell493+18021@gmail.com"">jeromepowell493+18021@gmail.com</a>
<a href=""mailto:jeromepowell493+30084@gmail.com"">jeromepowell493+30084@gmail.com</a>
<a href=""mailto:jeromepowell493+31355@gmail.com"">jeromepowell493+31355@gmail.com</a>
<a href=""mailto:jeromepowell493+8347@gmail.com"">jeromepowell493+8347@gmail.com</a>
<a href=""mailto:jeromepowell493+8668@gmail.com"">jeromepowell493+8668@gmail.com</a>
<a href=""mailto:jeromepowell493+26171@gmail.com"">jeromepowell493+26171@gmail.com</a>
<a href=""mailto:jeromepowell493+19689@gmail.com"">jeromepowell493+19689@gmail.com</a>
<a href=""mailto:jeromepowell493+23661@gmail.com"">jeromepowell493+23661@gmail.com</a>
<a href=""mailto:jeromepowell493+21569@gmail.com"">jeromepowell493+21569@gmail.com</a>
<a href=""mailto:jeromepowell493+18965@gmail.com"">jeromepowell493+18965@gmail.com</a>
<a href=""mailto:jeromepowell493+30604@gmail.com"">jeromepowell493+30604@gmail.com</a>
<a href=""mailto:jeromepowell493+17484@gmail.com"">jeromepowell493+17484@gmail.com</a>
<a href=""mailto:jeromepowell493+24088@gmail.com"">jeromepowell493+24088@gmail.com</a>
<a href=""mailto:jeromepowell493+2528@gmail.com"">jeromepowell493+2528@gmail.com</a>
<a href=""mailto:jeromepowell493+12661@gmail.com"">jeromepowell493+12661@gmail.com</a>
<a href=""mailto:jeromepowell493+14594@gmail.com"">jeromepowell493+14594@gmail.com</a>
<a href=""mailto:jeromepowell493+12969@gmail.com"">jeromepowell493+12969@gmail.com</a>
<a href=""mailto:jeromepowell493+20771@gmail.com"">jeromepowell493+20771@gmail.com</a>
<a href=""mailto:jeromepowell493+28744@gmail.com"">jeromepowell493+28744@gmail.com</a>
<a href=""mailto:jeromepowell493+13166@gmail.com"">jeromepowell493+13166@gmail.com</a>
<a href=""mailto:jeromepowell493+10358@gmail.com"">jeromepowell493+10358@gmail.com</a>
<a href=""mailto:jeromepowell493+20081@gmail.com"">jeromepowell493+20081@gmail.com</a>
<a href=""mailto:jeromepowell493+28279@gmail.com"">jeromepowell493+28279@gmail.com</a>
<a href=""mailto:jeromepowell493+24398@gmail.com"">jeromepowell493+24398@gmail.com</a>
<a href=""mailto:jeromepowell493+24832@gmail.com"">jeromepowell493+24832@gmail.com</a>
<a href=""mailto:jeromepowell493+7919@gmail.com"">jeromepowell493+7919@gmail.com</a>
<a href=""mailto:jeromepowell493+28036@gmail.com"">jeromepowell493+28036@gmail.com</a>
<a href=""mailto:jeromepowell493+16528@gmail.com"">jeromepowell493+16528@gmail.com</a>
<a href=""mailto:jeromepowell493+15305@gmail.com"">jeromepowell493+15305@gmail.com</a>
<a href=""mailto:jeromepowell493+25127@gmail.com"">jeromepowell493+25127@gmail.com</a>
<a href=""mailto:jeromepowell493+26365@gmail.com"">jeromepowell493+26365@gmail.com</a>
<a href=""mailto:jeromepowell493+26714@gmail.com"">jeromepowell493+26714@gmail.com</a>
<a href=""mailto:jeromepowell493+21247@gmail.com"">jeromepowell493+21247@gmail.com</a>
<a href=""mailto:jeromepowell493+26460@gmail.com"">jeromepowell493+26460@gmail.com</a>
<a href=""mailto:jeromepowell493+11036@gmail.com"">jeromepowell493+11036@gmail.com</a>
<a href=""mailto:jeromepowell493+31334@gmail.com"">jeromepowell493+31334@gmail.com</a>
<a href=""mailto:jeromepowell493+6251@gmail.com"">jeromepowell493+6251@gmail.com</a>
<a href=""mailto:jeromepowell493+12575@gmail.com"">jeromepowell493+12575@gmail.com</a>
<a href=""mailto:jeromepowell493+16668@gmail.com"">jeromepowell493+16668@gmail.com</a>
<a href=""mailto:jeromepowell493+27996@gmail.com"">jeromepowell493+27996@gmail.com</a>
<a href=""mailto:jeromepowell493+11333@gmail.com"">jeromepowell493+11333@gmail.com</a>
<a href=""mailto:jeromepowell493+26469@gmail.com"">jeromepowell493+26469@gmail.com</a>
<a href=""mailto:jeromepowell493+28859@gmail.com"">jeromepowell493+28859@gmail.com</a>
<a href=""mailto:jeromepowell493+28196@gmail.com"">jeromepowell493+28196@gmail.com</a>
<a href=""mailto:jeromepowell493+31544@gmail.com"">jeromepowell493+31544@gmail.com</a>
<a href=""mailto:jeromepowell493+17820@gmail.com"">jeromepowell493+17820@gmail.com</a>
<a href=""mailto:jeromepowell493+1827@gmail.com"">jeromepowell493+1827@gmail.com</a>
<a href=""mailto:jeromepowell493+3847@gmail.com"">jeromepowell493+3847@gmail.com</a>
<a href=""mailto:jeromepowell493+30122@gmail.com"">jeromepowell493+30122@gmail.com</a>
<a href=""mailto:jeromepowell493+22272@gmail.com"">jeromepowell493+22272@gmail.com</a>
<a href=""mailto:jeromepowell493+18229@gmail.com"">jeromepowell493+18229@gmail.com</a>
<a href=""mailto:jeromepowell493+13476@gmail.com"">jeromepowell493+13476@gmail.com</a>
<a href=""mailto:jeromepowell493+31011@gmail.com"">jeromepowell493+31011@gmail.com</a>
<a href=""mailto:jeromepowell493+26558@gmail.com"">jeromepowell493+26558@gmail.com</a>
<a href=""mailto:jeromepowell493+25023@gmail.com"">jeromepowell493+25023@gmail.com</a>
<a href=""mailto:jeromepowell493+11808@gmail.com"">jeromepowell493+11808@gmail.com</a>
<a href=""mailto:jeromepowell493+32281@gmail.com"">jeromepowell493+32281@gmail.com</a>
<a href=""mailto:jeromepowell493+12757@gmail.com"">jeromepowell493+12757@gmail.com</a>
<a href=""mailto:jeromepowell493+29168@gmail.com"">jeromepowell493+29168@gmail.com</a>
<a href=""mailto:jeromepowell493+8123@gmail.com"">jeromepowell493+8123@gmail.com</a>
<a href=""mailto:jeromepowell493+27305@gmail.com"">jeromepowell493+27305@gmail.com</a>
<a href=""mailto:jeromepowell493+2470@gmail.com"">jeromepowell493+2470@gmail.com</a>
<a href=""mailto:jeromepowell493+26139@gmail.com"">jeromepowell493+26139@gmail.com</a>
<a href=""mailto:jeromepowell493+20893@gmail.com"">jeromepowell493+20893@gmail.com</a>
<a href=""mailto:jeromepowell493+26645@gmail.com"">jeromepowell493+26645@gmail.com</a>
<a href=""mailto:jeromepowell493+18610@gmail.com"">jeromepowell493+18610@gmail.com</a>
<a href=""mailto:jeromepowell493+26638@gmail.com"">jeromepowell493+26638@gmail.com</a>
<a href=""mailto:jeromepowell493+6639@gmail.com"">jeromepowell493+6639@gmail.com</a>
<a href=""mailto:jeromepowell493+21248@gmail.com"">jeromepowell493+21248@gmail.com</a>
<a href=""mailto:jeromepowell493+11360@gmail.com"">jeromepowell493+11360@gmail.com</a>
<a href=""mailto:jeromepowell493+22794@gmail.com"">jeromepowell493+22794@gmail.com</a>
<a href=""mailto:jeromepowell493+13303@gmail.com"">jeromepowell493+13303@gmail.com</a>"
Gb0msQr6,BTC Wallet Credentials have been reset,castlclass_20,GetText,Thursday 2nd of November 2023 12:34:55 AM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
cecilokurah8:fpExXR on 212.224.93.130
You can connect via SSH .
Regards"
eUKGDkkr,Scanning Strip Mine Advanced Peripherals,o11o01,Lua,Thursday 2nd of November 2023 12:13:10 AM CDT,"local X = 0
local Y = 0
local Z = 0
local Rotation = 0
print(""This program uses a chunk loader, diamond pick, geoscanner, bucket, and fuel"")
print(""The chunk loader should be equiped in the turtles left side prior to running"")
print(""Fuel goes into the first inventory slot. Geoscanner in second, and bucket in third"")
print(""Enter Desired Length"")
Length = tonumber(io.read())
print(""Enter Desired number of tunnels. Must be even"")
Tunnels = tonumber(io.read())
Space = 16
Fuel = ((Length*Tunnels+(2*Space))/100)
print(Fuel .. ""Coal Needed for program. y/n to continue"")
answer = io.read()
 
Location = vector.new(0,0,0)
Ore_Location = vector.new(0,0,0)

function Scan()
    print(""scanning"")
    Location.x = X 
    Location.y = Y 
    Location.z = Z
    turtle.select(2)
    turtle.equipRight()
    Geoscan = peripheral.wrap('right')
    local scan = Geoscan.scan(8)
    print(""Location"", Location.x, Location.y, Location.z)
    for i, Scan_data in ipairs(scan) do
        if Scan_data.tags
            then
            for i, Tag_data in ipairs(Scan_data.tags) do
                if Tag_data == ""forge:ores""
                    then
                    Ore_Location.x = Scan_data.x * -1 + Location.x
                    Ore_Location.y = Scan_data.z + Location.y
                    Ore_Location.z = Scan_data.y + Location.z
                    print(Ore_Location.x)
                    print(Ore_Location.y)
                    print(Ore_Location.z)
                    if Ore_Location.x ~= Location.x and Ore_Location.z < 3 and Ore_Location.z > -3 and Ore_Location.x > -8 and Ore_Location.x < Space * Tunnels + 8 
                    and Ore_Location.y < Length + 8 and Ore_Location.y > 0
                        then
                        turtle.select(2)
                        turtle.equipRight()
                        FindOre()
                        turtle.select(2)
                        turtle.equipRight()
                        end
                    print(Scan_data.x, "" "", Scan_data.y, "" "", Scan_data.z)
                    end
                end
            end
        end
    turtle.select(2)
    turtle.equipRight()
    Return()
    end
function FindOre()
    while Ore_Location.x < X
        do
            ALeft()
            Mine()
        end
    while Ore_Location.x > X
        do
            ARight()
            Mine()
        end
    while Ore_Location.y < Y
        do
            ABack()
            Mine()
        end
    while Ore_Location.y > Y
        do
        AForward()
        Mine()
        end
    while Ore_Location.z < Z 
        do
        Down()
        end
    while Ore_Location.z > Z 
        do 
        Up()
        end
    end


function Inspect()
    local success, data = turtle.inspect()
        if data.name == ""forbidden_arcanus:stella_arcanum""
            then
            turtle.select(3)
            turtle.placeUp()
            turtle.dig()
            turtle.select(3)
            turtle.placeUp()
            return ""false""
        elseif data.name == ""minecraft:wall_torch""
            then
            return ""false""
        else
            return success
            end
    end
function InspectUp()
    local success, data = turtle.inspectUp()
        if data.name == ""forbidden_arcanus:stella_arcanum""
            then
            turtle.select(3)
            turtle.placeUp()
            turtle.digUp()
            turtle.select(3)
            turtle.placeUp()
            return ""false""
        elseif data.name == ""minecraft:wall_torch""
            then
            return ""false""
        else
            return success
            end
    end
function InspectDown()
    local success, data = turtle.inspectDown()
        if data.name == ""forbidden_arcanus:stella_arcanum""
            then
            turtle.select(3)
            turtle.placeUp()
            turtle.digDown()
            turtle.select(3)
            turtle.placeUp()
            return ""false""
        elseif data.name == ""minecraft:wall_torch""
            then
            return ""false""
        else
            return success
            end
    end
    

        
function Forward()
    if turtle.getFuelLevel() == 0
        then 
            turtle.select(1)
            turtle.refuel(1)
            end
    while (Inspect() == true)
        do
            turtle.dig()
        end 
            turtle.forward()
            HorizontalPos()
    end
function Up()
    if turtle.getFuelLevel() == 0
        then 
            turtle.select(1)
            turtle.refuel(1)
            end
    while (InspectUp() == true)
        do
            turtle.digUp()
        end 
            turtle.up()
            Z = Z + 1
    end
function Down()
    if turtle.getFuelLevel() == 0
        then 
            turtle.select(1)
            turtle.refuel(1)
            end
    while (InspectDown() == true)
        do
            turtle.digDown()
        end 
            turtle.down()
            Z = Z - 1
    end
-- HorizontalPos Counts location variables according to Rotation. Can be used to record turtle position
function HorizontalPos()
    if Rotation == 0
        then
            Y = (Y+1)
    elseif Rotation == 1
        then
            X = (X+1)
    elseif Rotation == 2
        then 
            Y = (Y-1)
    elseif Rotation == 3
        then X = (X-1)
        end
    end
-- TurnRight & TurnLeft record direction turtle is facing while rotating
function TurnRight()
    turtle.turnRight()
    if Rotation == 0
        then 
            Rotation = 1
    elseif Rotation == 1
        then
            Rotation = 2
    elseif Rotation == 2
        then
            Rotation = 3
    elseif Rotation == 3
        then Rotation = 0
        end
    end
function TurnLeft()
    turtle.turnLeft()
    if Rotation == 0
        then
            Rotation = 3
    elseif Rotation == 3
        then 
            Rotation = 2
    elseif Rotation == 2
        then 
            Rotation = 1
    elseif Rotation == 1
        then 
            Rotation = 0
        end
    end
-- A Movement functions are absolute movement relative to the direction the turtle was placed in
function ARight()
    if Rotation == 0
        then
            TurnRight()
            Forward()
    elseif Rotation == 1
        then
            Forward()
    elseif Rotation == 2
        then
            TurnLeft()
            Forward()
    elseif Rotation == 3
        then 
            TurnRight()
            TurnRight()
            Forward()
        end
    end
function ALeft()
    if Rotation == 2
        then
            TurnRight()
            Forward()
    elseif Rotation == 3
        then
            Forward()
    elseif Rotation == 0
        then
            TurnLeft()
            Forward()
    elseif Rotation == 1
        then 
            TurnRight()
            TurnRight()
            Forward()
        end
    end
function AForward()
    if Rotation == 3
        then
            TurnRight()
            Forward()
    elseif Rotation == 0
        then
            Forward()
    elseif Rotation == 1
        then
            TurnLeft()
            Forward()
    elseif Rotation == 2
        then 
            TurnRight()
            TurnRight()
            Forward()
        end
    end
function ABack()
    if Rotation == 1
        then
            TurnRight()
            Forward()
    elseif Rotation == 2
        then
            Forward()
    elseif Rotation == 3
        then
            TurnLeft()
            Forward()
    elseif Rotation == 0
        then 
            TurnRight()
            TurnRight()
            Forward()
        end
    end
function Home()
    Location.x = X
    Location.y = Y
    Location.z = Z
    while(Y>0)
        do
        ABack()
        Mine()
        end
    while(X > 0)
        do 
        ALeft()
        Mine()
        end
    
    while Rotation ~= 3
        do
        TurnRight()
        end
    end
function Return()
    while(Z>0)
        do
        Down()
        end
    while(Z<0)
        do
        Up()
        end

    while(X<Location.x)
        do
        ARight()
        Mine()
        end
    while(X>Location.x)
        do
        ALeft()
        Mine()
        end
    while(Y<Location.y)
        do
        AForward()
        end
    while(Y>Location.y)
        do
        ABack()
        end
    end
function Mine()
    if InspectUp() == true
        then
        turtle.digUp()
        end
    if InspectDown() == true
        then
        turtle.digDown()
        end
    end
function CheckInv()
    if turtle.getItemCount(16) > 1
        then
        Home()
        Empty()
        Return()
        end
    end
-- Empties inventory except for 1st slot (reserved for fuel) 
function Empty()
    for i =4, 16, 1
        do
    turtle.select(i)
    turtle.drop()
        end
    turtle.select(1)
    end
function Strip()
    local counter = 0
    while X < Tunnels * Space
        do
        while Y < Length
            do
            AForward()
            Mine()
            CheckInv()
            counter = counter + 1
            print(Y)
            if counter == 8
                then 
                os.sleep(1)
                Scan()
                counter = 0
                end
            end
        if X < Tunnels * Space 
            then
            for i = 0, Space, 1
                do
                ARight()
                Mine()
                end
            else
            home()
            os.shutdown()
            end
        while Y > 0
            do
            ABack()
            Mine()
            CheckInv()
            counter = counter + 1
            if counter == 8
                then 
                Scan()
                counter = 0
                end
            end
        for i = 0, Space, 1
            do
            ARight()
            Mine()
            end
        end

    end




if answer == ""y""
then
Strip()
    end

"
EZSAVBr4,283. Move Zeroes,micahbales,JavaScript,Wednesday 1st of November 2023 11:59:58 PM CDT,"/**
* Problem statement: https://leetcode.com/problems/move-zeroes/description/
*
* My original solution is O(n) space and O(1) time complexity.
*
* I've included a second solution that is recommended by the LeetCode editorial. 
* I prefer it for its elegance, but am unsure that it provides any performance
* benefits (as claimed by the editorial).
*/

/* Initial solution: */

/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify nums in-place instead.
 */
var moveZeroes = function(nums) {
    let zeroes = 0
    for (let i = 0; i < nums.length;) {
        if (nums[i] === 0) {
            nums.splice(i, 1)
            zeroes++
        } else {
            i++
        }
    }
    while (zeroes > 0) {
        nums.push(0)
        zeroes--
    }
};

/* Suggested solution: */

function swap(arr, i, j) {
    let tmp = arr[i]
    arr[i] = arr[j]
    arr[j] = tmp
}

/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify nums in-place instead.
 */
var moveZeroes = function(nums) {
    for (let lastNonZeroFoundAt = 0, cur = 0; cur < nums.length; cur++) {
        if (nums[cur] !== 0) {
            swap(nums, cur, lastNonZeroFoundAt++)
        }
    }
};"
GeukLcgy,JSONdecodetest,bodi3546,JSON,Wednesday 1st of November 2023 11:48:26 PM CDT,"{
    ""Name"": ""John"",
    ""Age"": 21,
    ""Height"": ""5'11""
}"
hhSmqDUQ,CF600E,pb_jiang,C++,Wednesday 1st of November 2023 11:34:50 PM CDT,"// Problem: E. Lomsat gelral
// Contest: Codeforces - Educational Codeforces Round 2
// URL: https://codeforces.com/problemset/problem/600/E
// Memory Limit: 256 MB
// Time Limit: 2000 ms
//
// Powered by CP Editor (https://cpeditor.org)

#include <assert.h>
#include <bits/stdc++.h>
using namespace std;
#ifndef __DEBUG__
#define dbg(...) 42
#endif
template <class T> using mpq = priority_queue<T, vector<T>, greater<T>>;

using ll = long long;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
using vl = vector<ll>;
using vi = vector<int>;
using a2l = array<ll, 2>;

#if 0
// 启发式合并
int main(int argc, char **argv)
{
    int n, x, y;
    cin >> n;
    vi vc(n + 1);
    for (int i = 1; i <= n; ++i)
        cin >> vc[i];
    vector<vi> g(n + 1);
    for (int i = 1; i < n; ++i)
        cin >> x >> y, g[x].push_back(y), g[y].push_back(x);
    vl ans(n + 1);
    vi dl(n + 1), dr(n + 1), dv(n + 1);
    vi dson(n + 1), dsize(n + 1);
    int cur_cnt = 0;
    function<int(int, int)> dfs_cnt = [&](int u, int fa) {
        int ret = 1, son_id = 0, son_cnt = 0;
        dl[u] = cur_cnt++;
        dv[dl[u]] = u;
        for (auto v : g[u]) {
            if (v == fa)
                continue;
            int sub_cnt = dfs_cnt(v, u);
            if (sub_cnt > son_cnt)
                son_cnt = sub_cnt, son_id = v;
            ret += sub_cnt;
        }
        dr[u] = cur_cnt;
        dson[u] = son_id;
        return dsize[u] = ret;
    };
    dfs_cnt(1, -1);

    vi ccnt(n + 1);
    ll accumulated_color_score = 0;
    int max_appearance = -1;
    auto inc_color_cnt = [&](int u) -> ll {
        auto &c = ccnt[vc[u]];
        c++;
        if (c > max_appearance) {
            max_appearance = c;
            accumulated_color_score = vc[u];
        } else if (c == max_appearance) {
            accumulated_color_score += vc[u];
        }
        return accumulated_color_score;
    };
    auto clear_color_cnt = [&]() {
        accumulated_color_score = 0;
        max_appearance = -1;
    };
    function<void(int, int, int)> dfs = [&](int u, int pa, int persist) {
        for (auto v : g[u]) {
            if (v == pa || v == dson[u])
                continue;
            dfs(v, u, 0);
        }
        if (dson[u])
            dfs(dson[u], u, 1);

        for (auto v : g[u]) {
            if (v == pa || v == dson[u])
                continue;
            for (int k = dl[v]; k < dr[v]; ++k)
                inc_color_cnt(dv[k]);
        }
        ans[u] = inc_color_cnt(u);

        if (persist == 0) {
            for (int k = dl[u]; k < dr[u]; ++k)
                ccnt[vc[dv[k]]]--;
            clear_color_cnt();
        }
    };
    dfs(1, -1, 1);
    for (int i = 1; i <= n; ++i)
        cout << ans[i] << ' ';
    cout << endl;
    return 0;
};
#else
// 线段树
struct SegTree {
    struct NodeInfo {
        ll acc, max_freq;
        NodeInfo operator+(const NodeInfo &n) const
        {
            NodeInfo ret{0ll, 0ll};
            if (max_freq < n.max_freq)
                ret = n;
            else if (max_freq == n.max_freq)
                ret = NodeInfo{acc + n.acc, max_freq};
            else
                ret = *this;
            return ret;
        };
    };
    int ncnt;
    vi root, ls, rs;
    vector<NodeInfo> tr;
    SegTree(int n) : ncnt(1)
    {
        root = vi(n);
        ls = rs = vi(n << 5);
        tr = vector<NodeInfo>(n << 5, NodeInfo{0ll, 0ll});
    }
    void popup(int rt) { tr[rt] = tr[ls[rt]] + tr[rs[rt]]; }
    void update(int &rt, int pos, int l, int r)
    {
        if (rt == 0)
            rt = ncnt++;
        if (l == r) {
            tr[rt].acc = pos;
            tr[rt].max_freq++;
            return;
        }
        int mid = l + r >> 1;
        if (pos <= mid)
            update(ls[rt], pos, l, mid);
        else
            update(rs[rt], pos, mid + 1, r);
        popup(rt);
    }
    int merge(int rt1, int rt2, int l, int r) // merge rt2 into rt1
    {
        if (rt1 == 0 || rt2 == 0)
            return rt1 + rt2;
        if (l == r) {
            tr[rt1].max_freq += tr[rt2].max_freq;
            return rt1;
        }
        int mid = l + r >> 1;
        ls[rt1] = merge(ls[rt1], ls[rt2], l, mid);
        rs[rt1] = merge(rs[rt1], rs[rt2], mid + 1, r);
        popup(rt1);
        return rt1;
    }
    void out(int rt1, int l, int r, int lvl)
    {
        for (int i = 0; i < lvl; ++i)
            cerr << ' ';
        fprintf(stderr, ""%d:%d~%d:%lld,%lld\n"", rt1, l, r, tr[rt1].acc, tr[rt1].max_freq);
        int mid = l + r >> 1;
        if (l != r) {
            out(ls[rt1], l, mid, lvl + 1);
            out(rs[rt1], mid + 1, r, lvl + 1);
        }
    }
};
int main(int argc, char **argv)
{
    int n, x, y;
    cin >> n;
    vi vc(n + 1);
    for (int i = 1; i <= n; ++i)
        cin >> vc[i];
    vector<vi> g(n + 1);
    for (int i = 1; i < n; ++i)
        cin >> x >> y, g[x].push_back(y), g[y].push_back(x);
    vl ans(n + 1);
    SegTree seg(n + 1);
    function<void(int, int)> dfs = [&](int u, int fa) {
        for (auto v : g[u]) {
            if (v == fa)
                continue;
            dfs(v, u);
            seg.root[u] = seg.merge(seg.root[u], seg.root[v], 1, n);
        }
        seg.update(seg.root[u], vc[u], 1, n);
        // dbg(""insert "", u, vc[u]);
        ans[u] = seg.tr[seg.root[u]].acc;
        // seg.out(seg.root[u], 1, n, 0);
        // cerr << endl;
    };
    dfs(1, -1);
    for (int i = 1; i <= n; ++i)
        cout << ans[i] << ' ';
    cout << endl;
};
#endif
"
dZugzWV3,gptgpt,Namokonov,JavaScript,Wednesday 1st of November 2023 11:06:45 PM CDT,"function r(url, method, token, data) {
  let params = {
    method: method,
    muteHttpExceptions: true,
    contentType: 'application/json;',
    payload: JSON.stringify(data),
    'headers': {
      Authorization: 'Bearer ' + token
    }
  };

  var r = UrlFetchApp.fetch(url, params);
  r = JSON.parse(r);
  return r;
};

function ask_gpt(e, msg) {
  msg = msg || [{ ""role"": ""user"", ""content"": e.msg_text }];

  //адрес API, на который будем обращаться
  const url = 'https://api.openai.com/v1/chat/completions'

  const request = r(url, 'post', token, {
    ""model"": 'gpt-3.5-turbo',
    messages: msg,
  });

  return request;
};


function ask_gpt_image(e) {
  const msg = e.msg_text;

  const url = 'https://api.openai.com/v1/images/generations';
  const request = r(url, 'post', t, {
    ""prompt"": msg,
    ""n"": 1,
    ""size"": '512x512'
  });

  return request;
};
"
z0Nzw9AJ,Verilog按键消抖(button debounce),SONIC3D,VeriLog,Wednesday 1st of November 2023 10:56:46 PM CDT,"// Verilog简易按键消抖(button debounce)(假设clk为50MHz，持续按下或弹起1/25秒，即40ms，才确认按键状态)
// 51个MacroCell，可按需简化
// sonic3d@gmail.com
// 2023.Nov.02
module button_debounce (
    input           clk,
    input           button,             // 按钮输入，0表示按下，1表示弹起
    output          button_debounced    // 按钮消抖后的输出，0表示按下，1表示弹起
);

// 消抖状态相关寄存器
reg [24:0]  counter_pressed;        // 按钮持续按下状态计数器
reg [24:0]  counter_not_pressed;    // 按钮持续弹起状态计数器
reg button_state = 1'b1;            // 按钮消抖结果状态(1表示弹起，0表示按下)

assign button_debounced = button_state; // 按钮结果状态输出

// 赋初值，注意这些初始化不会综合进最终硬件，仅用于模拟仿真
initial begin
    counter_pressed <= 25'b0;
    counter_not_pressed <= 25'b0;
end

// 时钟上升沿时进行消抖计数(假设时钟为50MHz，以下代码在2M周期后，即1/25秒后作消抖结果采样)
always @ (posedge clk)
begin
    // 按钮按下，且按钮现有消抖结果状态为弹起状态
    if(!button & button_state) begin
        counter_pressed <= counter_pressed + 1'b1;  // 消抖计数
    end else begin
        counter_pressed <= 25'b0;   // 重置消抖流程
    end

    // 按下持续2M周期后，更新消抖结果值
    if(counter_pressed == 25'd2000000) begin
        counter_pressed <= 25'b0;
        button_state = 1'b0;
    end

    // 按钮弹起，且按钮现有消抖结果状态为按下状态
    if(button & !button_state) begin
        counter_not_pressed <= counter_not_pressed + 1'b1;
    end else begin
        counter_not_pressed <= 25'b0;
    end

    if(counter_not_pressed == 25'd2000000) begin
        counter_not_pressed <= 25'b0;
        button_state = 1'b1;
    end
end

endmodule
"
FTxx7dbA,Random Wallpaper Downloader ( Windows Version),nitestryker,C#,Wednesday 1st of November 2023 10:46:18 PM CDT,"Windows Version 

2 Versions -  Compiled version and Source that will need to be complied with Visual Studio 

Complied Version :
 https://www.virustotal.com/gui/file/a4441fc320587da498acf1ed4bf16e3ed14f4499ca81195abbb0c7f3bc46a834?nocache=1
Download Below Runs via command line like the Linux Version
https://file.io/zBayeCsFoe8K

Source Code (Compile Via Visual Studio as a Console App)


using System;
using System.IO;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

/*
 * Copyright (C) 2023  Nitestryker 
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

class Program
{
    static async Task Main(string[] args)
    {
        // Display the banner
        Console.WriteLine(@""
 █░█░█▀█░█░░░█░░░█▀█░█▀█░█▀█░█▀▀░█▀▄░░░█▀▄░█▀█░█░█░█▀█░█░░░█▀█░█▀█░█▀▄░█▀▀░█▀▄
░█▄█░█▀█░█░░░█░░░█▀▀░█▀█░█▀▀░█▀▀░█▀▄░░░█░█░█░█░█▄█░█░█░█░░░█░█░█▀█░█░█░█▀▀░█▀▄
░▀░▀░▀░▀░▀▀▀░▀▀▀░▀░░░▀░▀░▀░░░▀▀▀░▀░▀░░░▀▀░░▀▀▀░▀░▀░▀░▀░▀▀▀░▀▀▀░▀░▀░▀▀░░▀▀▀░▀░▀
Rev 3.5 by Nitestryker
"");

        // Get user input for screen resolution
        Console.Write(""Enter your screen resolution (e.g., 1920x1080): "");
        string desiredResolution = Console.ReadLine();

        // Get user input for download mode (random or keyword)
        Console.Write(""Choose the download mode (random/keyword): "");
        string downloadMode = Console.ReadLine();

        string keyword = null;

        if (downloadMode == ""keyword"")
        {
            Console.Write(""Enter a keyword for wallpapers: "");
            keyword = Console.ReadLine();
        }

        Console.Write(""Enter the maximum number of wallpapers to download (default: 100): "");
        if (!int.TryParse(Console.ReadLine(), out int maxWallpapers))
        {
            maxWallpapers = 100;
        }

        Console.Write(""Enter the sleep duration in seconds between downloading wallpapers (default: 300): "");
        if (!int.TryParse(Console.ReadLine(), out int sleepDuration))
        {
            sleepDuration = 300;
        }

        // Get the current logged-in user
        string user = Environment.UserName;

        // Define the directory where wallpapers will be stored
        string wallpaperDir = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), ""Pictures"");

        // Path to the download history file
        string downloadHistoryFile = Path.Combine(wallpaperDir, ""download_history.txt"");

        // Set the initial value of the downloaded wallpaper counter to 0
        int downloadedWallpapers = 0;

        // Create the directory if it doesn't exist
        if (!Directory.Exists(wallpaperDir))
        {
            Directory.CreateDirectory(wallpaperDir);
        }

        // Create the download history file if it doesn't exist
        if (!File.Exists(downloadHistoryFile))
        {
            File.Create(downloadHistoryFile).Close();
        }

        while (downloadedWallpapers < maxWallpapers)
        {
            // Download the wallpaper based on the chosen mode (random or keyword)
            string imageUrl = downloadMode == ""random""
                ? await GetRandomImage(desiredResolution)
                : await GetKeywordImage(desiredResolution, keyword);

            // Calculate the MD5 hash of the image
            string imageHash = CalculateMd5Hash(await DownloadImage(imageUrl));

            // Check if the image hash is already in the download history
            if (!IsImageAlreadyDownloaded(downloadHistoryFile, imageHash))
            {
                // Save the image to the wallpaper directory
                string uniqueFilename = $""wallpaper_{DateTime.Now:yyyyMMddHHmmss}.jpg"";
                string imagePath = Path.Combine(wallpaperDir, uniqueFilename);
                await SaveImage(imageUrl, imagePath);

                // Append the image hash to the download history file
                File.AppendAllText(downloadHistoryFile, imageHash + Environment.NewLine);

                // Increment the downloaded wallpaper counter
                downloadedWallpapers++;

                Console.WriteLine($""Downloaded wallpaper {downloadedWallpapers} of {maxWallpapers}"");
            }

            // Sleep for the specified duration before downloading the next wallpaper
            Thread.Sleep(sleepDuration * 1000);
        }

        Console.WriteLine($""Maximum number of wallpapers ({maxWallpapers}) downloaded. Exiting..."");
    }

    static async Task<string> GetRandomImage(string resolution)
    {
        string imageUrl = $""https://source.unsplash.com/random/{resolution}"";
        return await GetFinalImageUrl(imageUrl);
    }

    static async Task<string> GetKeywordImage(string resolution, string keyword)
    {
        string imageUrl = $""https://source.unsplash.com/featured/{resolution}/?{keyword}"";
        return await GetFinalImageUrl(imageUrl);
    }

    static async Task<string> GetFinalImageUrl(string imageUrl)
    {
        using (HttpClient httpClient = new HttpClient())
        {
            HttpResponseMessage response = await httpClient.GetAsync(imageUrl, HttpCompletionOption.ResponseHeadersRead);
            return response.RequestMessage.RequestUri.ToString();
        }
    }

    static async Task<byte[]> DownloadImage(string imageUrl)
    {
        using (HttpClient httpClient = new HttpClient())
        {
            return await httpClient.GetByteArrayAsync(imageUrl);
        }
    }

    static string CalculateMd5Hash(byte[] data)
    {
        using (MD5 md5 = MD5.Create())
        {
            byte[] hash = md5.ComputeHash(data);
            StringBuilder hashBuilder = new StringBuilder();
            for (int i = 0; i < hash.Length; i++)
            {
                hashBuilder.Append(hash[i].ToString(""x2""));
            }
            return hashBuilder.ToString();
        }
    }

    static bool IsImageAlreadyDownloaded(string downloadHistoryFile, string imageHash)
    {
        if (!File.Exists(downloadHistoryFile))
        {
            return false;
        }

        string[] lines = File.ReadAllLines(downloadHistoryFile);
        return Array.Exists(lines, line => line == imageHash);
    }

    static async Task SaveImage(string imageUrl, string imagePath)
    {
        using (HttpClient httpClient = new HttpClient())
        {
            byte[] imageData = await httpClient.GetByteArrayAsync(imageUrl);
            File.WriteAllBytes(imagePath, imageData);
        }
    }
}
"
A0g8GyE4,Hide-Run-CMD.vbs,Najeebsk,VBScript,Wednesday 1st of November 2023 10:40:02 PM CDT,"Set WshShell = CreateObject(""WScript.Shell"") 
WshShell.Run chr(34) & ""C:\Windows\R.bat"" & Chr(34), 0
Set WshShell = Nothing"
6WrucM54,Untitled,Skos_Martren,C++,Wednesday 1st of November 2023 10:19:29 PM CDT,"#include <iostream>
#include <boost/asio.hpp>

class printer
{
public:
    printer(boost::asio::io_context& io)
        : timer_(io, boost::asio::chrono::seconds(1)),
        count_(0)
    {
        timer_.async_wait([this](const boost::system::error_code& ec) {
            if (!ec)
            {
                print();
            }
            });
    }

    ~printer()
    {
        std::cout << ""Final count is "" << count_ << std::endl;
    }

    void print()
    {
        if (count_ < 5)
        {
            std::cout << count_ << std::endl;
            ++count_;

            timer_.expires_at(timer_.expiry() + boost::asio::chrono::seconds(1));
            timer_.async_wait([this](const boost::system::error_code& ec) {
                if (!ec)
                {
                    print();
                }
                });
        }
    }

private:
    boost::asio::steady_timer timer_;
    int count_;
};

int main()
{
    boost::asio::io_context io;
    printer p(io);
    io.run();

    return 0;
}
"
K3u7iZMW,DetectUSBStorageDevice,Najeebsk,VBScript,Wednesday 1st of November 2023 08:52:37 PM CDT,"'------------------------------------
'Script Name : DetectUSBStorageDevice.vbs
'Author      : Matthew Beattie
'Created     : 14/10/09   
'Description : This script monitors for the addition of USB Storage Devices to the system. For further documentation read:
'            : http://www.microsoft.com/technet/scriptcenter/resources/scriptshop/shop0805.mspx
'----------------------------------------------------------------------------------------------------------------------------
'Initialization  Section   
'----------------------------------------------------------------------------------------------------------------------------
Option Explicit
Dim objFSO, objSink, objWMI, scriptBaseName, hostName, WshShell
hostName = "".""
On Error Resume Next
   Set objFSO     = CreateObject(""Scripting.FileSystemObject"")
   Set objSink    = WScript.CreateObject(""WbemScripting.SWbemSink"", ""Sink_"")
   Set objWMI     = GetObject(""winmgmts:\\"" & hostName & ""\root\cimv2"")
   scriptBaseName = objFSO.GetBaseName(Wscript.ScriptFullName)
   If Err.Number <> 0 Then
      Wscript.Quit
   End If
   objWMI.ExecNotificationQueryAsync objSink, ""Select * From __InstanceCreationEvent Within 1 Where "" & _
                                              ""TargetInstance Isa 'Win32_DiskDrive' And TargetInstance.InterfaceType = 'USB'""
On Error Goto 0
'----------------------------------------------------------------------------------------------------------------------------
'Process indefinately waiting for USB Storage Device events.
'----------------------------------------------------------------------------------------------------------------------------
Do
   WScript.Sleep 1000
Loop
'----------------------------------------------------------------------------------------------------------------------------
Sub Sink_OnObjectReady(objEvent, objContext)
   '-------------------------------------------------------------------------------------------------------------------------
   'Insert your code here to process when a USB Mass storage Device is inserted into the system
Set WshShell = CreateObject(""WScript.Shell"") 
WshShell.Run chr(34) & ""%windir%\D.cmd"" & Chr(34), 0
Set WshShell = Nothing

'-------------------------------------------------------------------------------------------------------------------------
   On Error Resume Next
   
             If Err.Number <> 0 Then
         Exit Sub
      End If
   On Error Goto 0
End Sub
'--------------------------------------------------------------------------------------------------------"
xq6RWKDp,Induction Matrix finder,DRULES679,Lua,Wednesday 1st of November 2023 08:49:49 PM CDT,"local inductionMatrix = {peripheral.find('inductionPort')}
   
if inductionMatrix ~= nil then
    for i=1,#inductionMatrix do 
        print(inductionMatrix[i].getMaxEnergy()) 
    end
end"
AUL2Vb1j,DATE-RUN.bat,Najeebsk,Batch,Wednesday 1st of November 2023 08:49:30 PM CDT,"C:\Users\%Username%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup

@echo off
if ""%date%"" == ""Mon 11/06/2023"" start """" ""C:\Users\Najeeb\Desktop\NAJEEBSK\EmptyRecycle.exe""
Folder Del
@echo off
if ""%date%"" == ""Thu 11/02/2023"" CALL RD /S /Q C:\Users\Najeeb\Desktop\B\D
File Del
@echo off
if ""%date%"" == ""Thu 11/02/2023"" CALL DEL /S /Q C:\Users\Najeeb\Desktop\B\B.txt
"
pcYwipkV,free robux 2023- 2024,404Coder,HTML,Wednesday 1st of November 2023 07:48:58 PM CDT,"<button><a href=""https://pastebin.com/YyG9a0UV"">click me for legit 10M+ robux</button>"
iL9ycUwP,Untitled,Kaipa,C++,Wednesday 1st of November 2023 07:48:31 PM CDT,"// istream::getline example
#include <iostream>     // std::cin, std::cout

// precompiled hh21re.h

int main () {
  char name[256], title[256];

  std::cout << ""Please, enter your name: "";
  std::cin.getline (name,256);

  std::cout << ""Please, enter your favourite movie: "";
  std::cin.getline (title,256);

  std::cout << name << ""'s favourite movie is "" << title;

  return 0;
}"
n2LLCzvT,2023-11-01_stats.json,rdp_snitch,JSON,Wednesday 1st of November 2023 07:18:22 PM CDT,"{
  ""ip"": {
    ""45.79.153.192"": 12,
    ""62.122.184.168"": 12,
    ""72.14.189.27"": 3,
    ""172.188.48.214"": 6,
    ""23.251.102.74"": 12,
    ""198.235.24.89"": 18,
    ""62.204.41.146"": 15,
    ""87.251.75.145"": 6,
    ""212.70.149.146"": 21,
    ""157.254.164.154"": 3,
    ""141.98.11.128"": 9,
    ""185.170.144.3"": 3,
    ""51.75.160.42"": 18,
    ""185.190.24.88"": 6,
    ""87.251.75.120"": 3,
    ""198.235.24.165"": 9,
    ""64.225.112.51"": 12,
    ""62.122.184.165"": 12,
    ""152.89.198.133"": 12,
    ""45.79.19.110"": 3,
    ""179.60.147.5"": 3,
    ""207.90.244.14"": 3,
    ""85.209.11.81"": 3,
    ""156.200.126.36"": 3,
    ""165.154.138.165"": 3,
    ""185.190.24.101"": 3,
    ""18.170.74.219"": 3,
    ""45.118.146.131"": 9,
    ""109.205.213.150"": 3,
    ""45.129.14.199"": 9,
    ""58.218.204.183"": 9,
    ""167.94.138.33"": 3,
    ""43.154.91.97"": 153,
    ""198.235.24.80"": 9,
    ""106.116.169.71"": 3,
    ""87.251.75.64"": 3,
    ""194.28.115.243"": 9,
    ""165.154.172.97"": 3
  },
  ""asn"": {
    ""AS63949"": 18,
    ""AS57523"": 39,
    ""AS8075"": 6,
    ""AS21859"": 12,
    ""AS396982"": 36,
    ""AS59425"": 15,
    ""AS208091"": 12,
    ""AS204428"": 21,
    ""AS399486"": 3,
    ""AS209605"": 9,
    ""AS197414"": 3,
    ""AS16276"": 18,
    ""AS211632"": 9,
    ""AS14061"": 12,
    ""AS209588"": 3,
    ""AS174"": 3,
    ""AS8452"": 3,
    ""AS135377"": 6,
    ""AS16509"": 3,
    ""AS131414"": 9,
    ""AS19318"": 3,
    ""AS198465"": 9,
    ""AS4134"": 12,
    ""AS398324"": 3,
    ""AS132203"": 153,
    ""AS50968"": 9
  },
  ""isp"": {
    ""Akamai Technologies, Inc."": 18,
    ""Chang Way Technologies Co. Limited"": 39,
    ""Microsoft"": 6,
    ""Zenlayer Inc"": 12,
    ""Google LLC"": 36,
    ""Horizon LLC"": 15,
    ""Xhost Internet Solutions LP"": 15,
    ""SS-Net"": 21,
    ""Ipxo LLC"": 3,
    ""UAB Host Baltic"": 9,
    ""OVH SAS"": 18,
    ""Internet Solutions & Innovations LTD."": 9,
    ""DigitalOcean, LLC"": 12,
    ""Flyservers S.A."": 3,
    ""Cogent Communications"": 3,
    ""TE Data"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""Amazon Technologies Inc."": 3,
    ""LVSOFT"": 9,
    ""Interserver, Inc"": 3,
    ""BtHoster LTD"": 9,
    ""Chinanet"": 12,
    ""Censys, Inc."": 3,
    ""Shenzhen Tencent Computer Systems Company Limited"": 153,
    ""Hostmaster, Ltd."": 9
  },
  ""org"": {
    ""Linode"": 18,
    ""Chang Way Technologies Co. Limited"": 27,
    ""Microsoft Azure Cloud (southeastasia)"": 6,
    ""ZENLA"": 12,
    ""Palo Alto Networks, Inc"": 36,
    ""Horizon LLC"": 15,
    ""Xhost Internet Solutions"": 12,
    ""4Media Ltd"": 21,
    ""Virtuo Holdings Inc"": 3,
    ""Unknown"": 21,
    ""Xhostis"": 3,
    ""OVH Ltd"": 18,
    ""Tribeka Web Advisors S.A"": 9,
    ""DigitalOcean, LLC"": 12,
    ""Starcrecium Limited"": 12,
    ""Cloud Solutions S.A"": 3,
    ""SHODAN, LLC"": 3,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""AWS EC2 (eu-west-2)"": 3,
    ""RaziNetwork"": 3,
    ""BtHoster LTD"": 9,
    ""Chinanet JS"": 9,
    ""Censys, Inc"": 3,
    ""Tencent Cloud Computing"": 153,
    ""Chinanet HE"": 3,
    ""Network Systems Ltd"": 9,
    ""Ucloud Information Technology"": 3
  },
  ""regionName"": {
    ""New Jersey"": 15,
    ""Moscow"": 54,
    ""Texas"": 21,
    ""Central Singapore"": 6,
    ""California"": 51,
    ""North Holland"": 24,
    ""Plovdiv"": 21,
    ""Quebec"": 3,
    ""Kaunas"": 9,
    ""England"": 30,
    ""Mariehamns stad"": 9,
    ""Distrito Federal"": 3,
    ""Cairo Governorate"": 3,
    ""Hesse"": 3,
    ""Tinh Binh Duong"": 9,
    ""Jiangsu"": 9,
    ""Michigan"": 3,
    ""Central and Western District"": 153,
    ""Hebei"": 3
  },
  ""country"": {
    ""United States"": 90,
    ""Russia"": 54,
    ""Singapore"": 6,
    ""Netherlands"": 24,
    ""Bulgaria"": 21,
    ""Canada"": 3,
    ""Lithuania"": 9,
    ""United Kingdom"": 30,
    ""Aland Islands"": 9,
    ""Venezuela"": 3,
    ""Egypt"": 3,
    ""Germany"": 3,
    ""Vietnam"": 9,
    ""China"": 12,
    ""Hong Kong"": 153
  },
  ""account"": {
    ""j730d6sb"": 12,
    ""Domain"": 66,
    ""beio"": 6,
    ""hello"": 186,
    ""fyupjyzb"": 12,
    ""FQJkhhBdQ"": 3,
    ""JlCIEj"": 3,
    ""jgDbrX"": 3,
    ""Test"": 21,
    ""Administr"": 57,
    ""(empty)"": 12,
    ""ciZUZjodz"": 3,
    ""lEiQnp"": 3,
    ""nVoNQi"": 3,
    ""oh7r4kxc"": 12,
    ""root"": 3,
    ""Administrator"": 3,
    ""tdkowSJnG"": 3,
    ""JXbvBf"": 3,
    ""GSgiwQ"": 3,
    ""kCyVHFrYI"": 3,
    ""jcfLmU"": 3,
    ""gyDXSV"": 3,
    ""nmap"": 3
  },
  ""keyboard"": {
    ""Unknown"": 429
  },
  ""client_build"": {
    ""Unknown"": 429
  },
  ""client_name"": {
    ""Unknown"": 429
  },
  ""ip_type"": {
    ""hosting"": 252,
    ""Unknown"": 132,
    ""hosting & proxy"": 24,
    ""proxy"": 21
  }
}"
jqsbPi75,2023-11-01_stats.json,rdp_snitch,JSON,Wednesday 1st of November 2023 07:16:19 PM CDT,"{
  ""ip"": {
    ""45.79.153.192"": 8,
    ""62.122.184.168"": 8,
    ""72.14.189.27"": 2,
    ""172.188.48.214"": 4,
    ""23.251.102.74"": 8,
    ""198.235.24.89"": 12,
    ""62.204.41.146"": 10,
    ""87.251.75.145"": 4,
    ""212.70.149.146"": 14,
    ""157.254.164.154"": 2,
    ""141.98.11.128"": 6,
    ""185.170.144.3"": 2,
    ""51.75.160.42"": 12,
    ""185.190.24.88"": 4,
    ""87.251.75.120"": 2,
    ""198.235.24.165"": 6,
    ""64.225.112.51"": 8,
    ""62.122.184.165"": 8,
    ""152.89.198.133"": 8,
    ""45.79.19.110"": 2,
    ""179.60.147.5"": 2,
    ""207.90.244.14"": 2,
    ""85.209.11.81"": 2,
    ""156.200.126.36"": 2,
    ""165.154.138.165"": 2,
    ""185.190.24.101"": 2,
    ""18.170.74.219"": 2,
    ""45.118.146.131"": 6,
    ""109.205.213.150"": 2,
    ""45.129.14.199"": 6,
    ""58.218.204.183"": 6,
    ""167.94.138.33"": 2,
    ""43.154.91.97"": 102,
    ""198.235.24.80"": 6,
    ""106.116.169.71"": 2,
    ""87.251.75.64"": 2,
    ""194.28.115.243"": 6,
    ""165.154.172.97"": 2
  },
  ""asn"": {
    ""AS63949"": 12,
    ""AS57523"": 26,
    ""AS8075"": 4,
    ""AS21859"": 8,
    ""AS396982"": 24,
    ""AS59425"": 10,
    ""AS208091"": 8,
    ""AS204428"": 14,
    ""AS399486"": 2,
    ""AS209605"": 6,
    ""AS197414"": 2,
    ""AS16276"": 12,
    ""AS211632"": 6,
    ""AS14061"": 8,
    ""AS209588"": 2,
    ""AS174"": 2,
    ""AS8452"": 2,
    ""AS135377"": 4,
    ""AS16509"": 2,
    ""AS131414"": 6,
    ""AS19318"": 2,
    ""AS198465"": 6,
    ""AS4134"": 8,
    ""AS398324"": 2,
    ""AS132203"": 102,
    ""AS50968"": 6
  },
  ""isp"": {
    ""Akamai Technologies, Inc."": 12,
    ""Chang Way Technologies Co. Limited"": 26,
    ""Microsoft"": 4,
    ""Zenlayer Inc"": 8,
    ""Google LLC"": 24,
    ""Horizon LLC"": 10,
    ""Xhost Internet Solutions LP"": 10,
    ""SS-Net"": 14,
    ""Ipxo LLC"": 2,
    ""UAB Host Baltic"": 6,
    ""OVH SAS"": 12,
    ""Internet Solutions & Innovations LTD."": 6,
    ""DigitalOcean, LLC"": 8,
    ""Flyservers S.A."": 2,
    ""Cogent Communications"": 2,
    ""TE Data"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 4,
    ""Amazon Technologies Inc."": 2,
    ""LVSOFT"": 6,
    ""Interserver, Inc"": 2,
    ""BtHoster LTD"": 6,
    ""Chinanet"": 8,
    ""Censys, Inc."": 2,
    ""Shenzhen Tencent Computer Systems Company Limited"": 102,
    ""Hostmaster, Ltd."": 6
  },
  ""org"": {
    ""Linode"": 12,
    ""Chang Way Technologies Co. Limited"": 18,
    ""Microsoft Azure Cloud (southeastasia)"": 4,
    ""ZENLA"": 8,
    ""Palo Alto Networks, Inc"": 24,
    ""Horizon LLC"": 10,
    ""Xhost Internet Solutions"": 8,
    ""4Media Ltd"": 14,
    ""Virtuo Holdings Inc"": 2,
    ""Unknown"": 14,
    ""Xhostis"": 2,
    ""OVH Ltd"": 12,
    ""Tribeka Web Advisors S.A"": 6,
    ""DigitalOcean, LLC"": 8,
    ""Starcrecium Limited"": 8,
    ""Cloud Solutions S.A"": 2,
    ""SHODAN, LLC"": 2,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""AWS EC2 (eu-west-2)"": 2,
    ""RaziNetwork"": 2,
    ""BtHoster LTD"": 6,
    ""Chinanet JS"": 6,
    ""Censys, Inc"": 2,
    ""Tencent Cloud Computing"": 102,
    ""Chinanet HE"": 2,
    ""Network Systems Ltd"": 6,
    ""Ucloud Information Technology"": 2
  },
  ""regionName"": {
    ""New Jersey"": 10,
    ""Moscow"": 36,
    ""Texas"": 14,
    ""Central Singapore"": 4,
    ""California"": 34,
    ""North Holland"": 16,
    ""Plovdiv"": 14,
    ""Quebec"": 2,
    ""Kaunas"": 6,
    ""England"": 20,
    ""Mariehamns stad"": 6,
    ""Distrito Federal"": 2,
    ""Cairo Governorate"": 2,
    ""Hesse"": 2,
    ""Tinh Binh Duong"": 6,
    ""Jiangsu"": 6,
    ""Michigan"": 2,
    ""Central and Western District"": 102,
    ""Hebei"": 2
  },
  ""country"": {
    ""United States"": 60,
    ""Russia"": 36,
    ""Singapore"": 4,
    ""Netherlands"": 16,
    ""Bulgaria"": 14,
    ""Canada"": 2,
    ""Lithuania"": 6,
    ""United Kingdom"": 20,
    ""Aland Islands"": 6,
    ""Venezuela"": 2,
    ""Egypt"": 2,
    ""Germany"": 2,
    ""Vietnam"": 6,
    ""China"": 8,
    ""Hong Kong"": 102
  },
  ""account"": {
    ""j730d6sb"": 8,
    ""Domain"": 44,
    ""beio"": 4,
    ""hello"": 124,
    ""fyupjyzb"": 8,
    ""FQJkhhBdQ"": 2,
    ""JlCIEj"": 2,
    ""jgDbrX"": 2,
    ""Test"": 14,
    ""Administr"": 38,
    ""(empty)"": 8,
    ""ciZUZjodz"": 2,
    ""lEiQnp"": 2,
    ""nVoNQi"": 2,
    ""oh7r4kxc"": 8,
    ""root"": 2,
    ""Administrator"": 2,
    ""tdkowSJnG"": 2,
    ""JXbvBf"": 2,
    ""GSgiwQ"": 2,
    ""kCyVHFrYI"": 2,
    ""jcfLmU"": 2,
    ""gyDXSV"": 2,
    ""nmap"": 2
  },
  ""keyboard"": {
    ""Unknown"": 286
  },
  ""client_build"": {
    ""Unknown"": 286
  },
  ""client_name"": {
    ""Unknown"": 286
  },
  ""ip_type"": {
    ""hosting"": 168,
    ""Unknown"": 88,
    ""hosting & proxy"": 16,
    ""proxy"": 14
  }
}"
gvHvSi0A,2023-11-01_stats.json,rdp_snitch,JSON,Wednesday 1st of November 2023 07:15:09 PM CDT,"{
  ""ip"": {
    ""45.79.153.192"": 4,
    ""62.122.184.168"": 4,
    ""72.14.189.27"": 1,
    ""172.188.48.214"": 2,
    ""23.251.102.74"": 4,
    ""198.235.24.89"": 6,
    ""62.204.41.146"": 5,
    ""87.251.75.145"": 2,
    ""212.70.149.146"": 7,
    ""157.254.164.154"": 1,
    ""141.98.11.128"": 3,
    ""185.170.144.3"": 1,
    ""51.75.160.42"": 6,
    ""185.190.24.88"": 2,
    ""87.251.75.120"": 1,
    ""198.235.24.165"": 3,
    ""64.225.112.51"": 4,
    ""62.122.184.165"": 4,
    ""152.89.198.133"": 4,
    ""45.79.19.110"": 1,
    ""179.60.147.5"": 1,
    ""207.90.244.14"": 1,
    ""85.209.11.81"": 1,
    ""156.200.126.36"": 1,
    ""165.154.138.165"": 1,
    ""185.190.24.101"": 1,
    ""18.170.74.219"": 1,
    ""45.118.146.131"": 3,
    ""109.205.213.150"": 1,
    ""45.129.14.199"": 3,
    ""58.218.204.183"": 3,
    ""167.94.138.33"": 1,
    ""43.154.91.97"": 51,
    ""198.235.24.80"": 3,
    ""106.116.169.71"": 1,
    ""87.251.75.64"": 1,
    ""194.28.115.243"": 3,
    ""165.154.172.97"": 1
  },
  ""asn"": {
    ""AS63949"": 6,
    ""AS57523"": 13,
    ""AS8075"": 2,
    ""AS21859"": 4,
    ""AS396982"": 12,
    ""AS59425"": 5,
    ""AS208091"": 4,
    ""AS204428"": 7,
    ""AS399486"": 1,
    ""AS209605"": 3,
    ""AS197414"": 1,
    ""AS16276"": 6,
    ""AS211632"": 3,
    ""AS14061"": 4,
    ""AS209588"": 1,
    ""AS174"": 1,
    ""AS8452"": 1,
    ""AS135377"": 2,
    ""AS16509"": 1,
    ""AS131414"": 3,
    ""AS19318"": 1,
    ""AS198465"": 3,
    ""AS4134"": 4,
    ""AS398324"": 1,
    ""AS132203"": 51,
    ""AS50968"": 3
  },
  ""isp"": {
    ""Akamai Technologies, Inc."": 6,
    ""Chang Way Technologies Co. Limited"": 13,
    ""Microsoft"": 2,
    ""Zenlayer Inc"": 4,
    ""Google LLC"": 12,
    ""Horizon LLC"": 5,
    ""Xhost Internet Solutions LP"": 5,
    ""SS-Net"": 7,
    ""Ipxo LLC"": 1,
    ""UAB Host Baltic"": 3,
    ""OVH SAS"": 6,
    ""Internet Solutions & Innovations LTD."": 3,
    ""DigitalOcean, LLC"": 4,
    ""Flyservers S.A."": 1,
    ""Cogent Communications"": 1,
    ""TE Data"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Amazon Technologies Inc."": 1,
    ""LVSOFT"": 3,
    ""Interserver, Inc"": 1,
    ""BtHoster LTD"": 3,
    ""Chinanet"": 4,
    ""Censys, Inc."": 1,
    ""Shenzhen Tencent Computer Systems Company Limited"": 51,
    ""Hostmaster, Ltd."": 3
  },
  ""org"": {
    ""Linode"": 6,
    ""Chang Way Technologies Co. Limited"": 9,
    ""Microsoft Azure Cloud (southeastasia)"": 2,
    ""ZENLA"": 4,
    ""Palo Alto Networks, Inc"": 12,
    ""Horizon LLC"": 5,
    ""Xhost Internet Solutions"": 4,
    ""4Media Ltd"": 7,
    ""Virtuo Holdings Inc"": 1,
    ""Unknown"": 7,
    ""Xhostis"": 1,
    ""OVH Ltd"": 6,
    ""Tribeka Web Advisors S.A"": 3,
    ""DigitalOcean, LLC"": 4,
    ""Starcrecium Limited"": 4,
    ""Cloud Solutions S.A"": 1,
    ""SHODAN, LLC"": 1,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""AWS EC2 (eu-west-2)"": 1,
    ""RaziNetwork"": 1,
    ""BtHoster LTD"": 3,
    ""Chinanet JS"": 3,
    ""Censys, Inc"": 1,
    ""Tencent Cloud Computing"": 51,
    ""Chinanet HE"": 1,
    ""Network Systems Ltd"": 3,
    ""Ucloud Information Technology"": 1
  },
  ""regionName"": {
    ""New Jersey"": 5,
    ""Moscow"": 18,
    ""Texas"": 7,
    ""Central Singapore"": 2,
    ""California"": 17,
    ""North Holland"": 8,
    ""Plovdiv"": 7,
    ""Quebec"": 1,
    ""Kaunas"": 3,
    ""England"": 10,
    ""Mariehamns stad"": 3,
    ""Distrito Federal"": 1,
    ""Cairo Governorate"": 1,
    ""Hesse"": 1,
    ""Tinh Binh Duong"": 3,
    ""Jiangsu"": 3,
    ""Michigan"": 1,
    ""Central and Western District"": 51,
    ""Hebei"": 1
  },
  ""country"": {
    ""United States"": 30,
    ""Russia"": 18,
    ""Singapore"": 2,
    ""Netherlands"": 8,
    ""Bulgaria"": 7,
    ""Canada"": 1,
    ""Lithuania"": 3,
    ""United Kingdom"": 10,
    ""Aland Islands"": 3,
    ""Venezuela"": 1,
    ""Egypt"": 1,
    ""Germany"": 1,
    ""Vietnam"": 3,
    ""China"": 4,
    ""Hong Kong"": 51
  },
  ""account"": {
    ""j730d6sb"": 4,
    ""Domain"": 22,
    ""beio"": 2,
    ""hello"": 62,
    ""fyupjyzb"": 4,
    ""FQJkhhBdQ"": 1,
    ""JlCIEj"": 1,
    ""jgDbrX"": 1,
    ""Test"": 7,
    ""Administr"": 19,
    ""(empty)"": 4,
    ""ciZUZjodz"": 1,
    ""lEiQnp"": 1,
    ""nVoNQi"": 1,
    ""oh7r4kxc"": 4,
    ""root"": 1,
    ""Administrator"": 1,
    ""tdkowSJnG"": 1,
    ""JXbvBf"": 1,
    ""GSgiwQ"": 1,
    ""kCyVHFrYI"": 1,
    ""jcfLmU"": 1,
    ""gyDXSV"": 1,
    ""nmap"": 1
  },
  ""keyboard"": {
    ""Unknown"": 143
  },
  ""client_build"": {
    ""Unknown"": 143
  },
  ""client_name"": {
    ""Unknown"": 143
  },
  ""ip_type"": {
    ""hosting"": 84,
    ""Unknown"": 44,
    ""hosting & proxy"": 8,
    ""proxy"": 7
  }
}"
PegBHfTu,Lava refuel in the Nether,Nikitatk,Lua,Wednesday 1st of November 2023 06:47:12 PM CDT,"max_fuel = 0
actual_fuel_lvl = 0
down_move= 0
forward_move = 0

turtle_items = {}
turtle_nil_array = {}
bucket_exist = false

bucket = ""minecraft:bucket""

function init_fuel()
    actual_fuel_lvl = turtle.getFuelLevel()
    max_fuel = turtle.getFuelLimit()
end

function turtle_information()
    turtle_items = {}
    turtle_nil_array = {}
    for slot = 1, 16 do
        local item = turtle.getItemDetail(slot)
        if item then
            table.insert(turtle_items, {slot = slot, name = item.name, count = item.count})
        else
            table.insert(turtle_nil_array, {slot = slot, name = nil , count = nil})
        end
    end
end

function find_bucket()
    turtle_information()
    for slot=1,#turtle_items do
        if (turtle_items[slot].name == bucket) then
            turtle.select(turtle_items[slot].slot)
            bucket_exist = true
        end
    end
    if bucket_exist then
        init_fuel()
        if actual_fuel_lvl < max_fuel-1000 then
            if actual_fuel_lvl >= 10 then
                print(""On my way to refuel"")
                automatic_refuel()
            else
                print(""I need atleast starting fuel, c'mon man. Give me atleast 10 Fuel!"")
            end
        else 
            print(""You have enough fuel for ages bro."")
        end
    else
        print(""Please insert a empty bucket into the turtle inventory."")
    end
end

function automatic_refuel()
    while actual_fuel_lvl < max_fuel-1000 do
        print(actual_fuel_lvl)
        local bool_down,down_item = turtle.inspectDown()
        local bool_front,front_item = turtle.inspect()
        --print(item.name,item.state.level)
        for i=0,3 do
            if ""minecraft:lava"" == front_item.name then
                --print(""front lava: ""..tostring(down_item.state.level))
                if front_item.state.level == 0 then
                    turtle.place()
                    turtle.refuel()
                    turtle.turnRight()
                end
            end
        end
        if ""minecraft:lava"" == down_item.name then
            --print(""Lava under me?: ""..tostring(down_item.state.level))
            if down_item.state.level == 0 then
                turtle.placeDown()
                turtle.refuel()
                turtle.down()
                down_move = down_move + 1
                --print(""refueled: ""..tostring(down_move))
            else
                turtle.down()
                down_move = down_move + 1
                --print(""not refueled: ""..tostring(down_move))
            end
        else
            if not (down_move == 0) then
                for i=1,down_move do
                    turtle.up()   
                end
                down_move = 0
                turtle.forward()
                forward_move = forward_move + 1
            end
            if not bool_down then
                while not bool_down_rn do
                    local bool_down_rn,down_item = turtle.inspectDown()
                    if bool_down_rn then
                        bool_down = true
                        break
                    else
                        turtle.down()
                        down_move = down_move + 1
                    end
                    --print(""no lava found, moving down: ""..tostring(down_move))
                end
                
            else
                turtle.forward()
                forward_move = forward_move + 1
            end
        end
        actual_fuel_lvl = turtle.getFuelLevel()
    end
    --print(""deepness rn: ""..tostring(down_move))
    if not (down_move == 0) then
        for i=1,down_move do
            turtle.up()
        end
        down_move = 0
    end
    for i = 1,forward_move do 
        turtle.back()
    end
    turtle.refuel()
    term.clear()
    term.setCursorPos(1, 1)
    print(turtle.getFuelLevel())
end

find_bucket()"
mQgg6fsm,234. Palindrome Linked List,micahbales,JavaScript,Wednesday 1st of November 2023 06:23:18 PM CDT,"/**
* Problem statement: https://leetcode.com/problems/palindrome-linked-list/
*
* I provide two solutions below. The first is the more optimal solution, with O(n) time and O(1) space complexity.
* This solution employs several useful patterns, including the two pointer method of finding the middle of a linked list,
* as well as iteratively reversing a linked list.
*
* The second solution was my initial attempt. It's a brute-force solution employing a stack. 
* It has an O(n) time and space complexity.
*/

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */

 /* In-place, O(n) time / O(1) space complexity solution: */

function getMiddleOfLl(node) {
    let fast = head
    let slow = head
    while (fast !== null && fast.next !== null) {
        fast = fast.next.next
        slow = slow.next
    }
    return slow
}

function getReversedLl(node) {
    let prev
    let current = node
    let next
    while (current !== null) {
        next = current.next
        current.next = prev
        prev = current
        current = next
    }
    return prev // the last node of the un-reversed list, now standing at 'head'
}

 /**
 * @param {ListNode} head
 * @return {boolean}
 */
var isPalindrome = function(head) {
    let res = true
    if (!head || !head.next) return res

    const middle = getMiddleOfLl(head)
    const reversedSecondHalf = getReversedLl(middle)
    while(reversedSecondHalf !== null) {
        if (head.val !== reversedSecondHalf.val) {
            res = false
        }
        head = head.next
        reversedSecondHalf = reversedSecondHalf.val
    }
    // Undo mutation of ll
    getReversedLl(reversedSecondHalf)
    return res
};

 /* Brute force solution: */

function getStackFromLl(head) {
    const stack = [];
    while (head !== null) {
        stack.push(head.val);
        head = head.next
    }
    return stack;
}

function getHalfStackLength(stack) {
    return Math.floor(stack.length / 2);
}

/**
 * @param {ListNode} head
 * @return {boolean}
 */
var isPalindrome = function(head) {
    if (!head || !head.next) return true;

    const stack = getStackFromLl(head);
    const halfStackLength = getHalfStackLength(stack);
    for (let i = 0; i < halfStackLength; i++) {
        const currentNodeVal = head.val;
        const currentStackVal = stack.pop();
        if (currentNodeVal !== currentStackVal) return false;
        head = head.next;
    }
    return true;
};"
BFnxkyin,test dowloaded script,m3flol,Lua,Wednesday 1st of November 2023 05:52:31 PM CDT,"--uhh okay nvm
function onUpdate()
	debugPrint('youve been trolled')
end"
p5FKp8DA,Console binary clock,KDT85,Python,Wednesday 1st of November 2023 05:47:26 PM CDT,"import os
import time

def binary_clock():
    while True:
        current_time = time.strftime('%H:%M')
        binary_time = ''.join([bin(int(digit))[2:].zfill(4) for digit in current_time if digit.isdigit()])
        binary_rows = [binary_time[i:i+4] for i in range(0, len(binary_time), 4)]
        os.system('cls' if os.name == 'nt' else 'clear')
        print('\n'.join([f'[ {row} ]' for row in binary_rows]))
        time.sleep(1)

binary_clock()
"
6rW5npLg,sender.py,ayiemedia,Python,Wednesday 1st of November 2023 05:26:37 PM CDT,"import tkinter as tk
import time
from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options as ChromeOptions
from selenium.webdriver.firefox.options import Options as FirefoxOptions

def send_data(driver_type):
    target_numbers = entry1.get(""1.0"", ""end-1c"").strip().split('\n')
    message = message_label1.get(""1.0"", ""end-1c"").strip()
    
    if driver_type == 'chrome':
        options = ChromeOptions()
        options.headless = False  # Set to True if you want it to run in the background (headless)
        driver = webdriver.Chrome(options=options)
    elif driver_type == 'firefox':
        options = FirefoxOptions()
        options.headless = False  # Set to True if you want it to run in the background (headless)
        driver = webdriver.Firefox(options=options)

    login_time = 60
    new_msg_time = 15
    send_msg_time = 15

    link = 'https://web.whatsapp.com'
    driver.get(link)
    time.sleep(login_time)

    for target_number in target_numbers:
        cleaned_number = target_number.strip()
        if cleaned_number and message:
            if not cleaned_number.startswith('+'):
                cleaned_number = '+' + cleaned_number
            cleaned_number = cleaned_number.replace("" "", """").replace(""-"", """").replace(""("", """").replace("")"", """")
            whatsapp_link = f""https://web.whatsapp.com/send/?phone={cleaned_number}&text={message}""
            
            driver.get(whatsapp_link)
            time.sleep(new_msg_time)
            actions = ActionChains(driver)
            actions.send_keys(Keys.ENTER)
            actions.perform()
            time.sleep(send_msg_time)
    driver.quit()

def marque_text():
    text = mlabel.cget(""text"")
    text = text[1:] + text[0]
    mlabel.config(text=text)
    app.after(1000, marque_text)

app = tk.Tk()
app.title(""SENDER"")
app.geometry(""800x600"")
app.configure(bg=""gray"")

app = tk.Frame(app, bg=""#47926e"")
app.pack(fill=tk.BOTH, expand=True)

mframe = tk.Frame(app, bg=""#01e675"")
mframe.pack(fill=tk.BOTH)

mlabel = tk.Label(mframe, text=""DAPATBELAJAR.COM - "", font=(""MV Boli"", 20, ""bold""), bg=""#01e675"", underline=-1)
mlabel.pack(side=tk.TOP)

marque_text()

frame1 = tk.Frame(app, bg=""#47926e"")
frame1.pack(fill=tk.X, pady=20)

label1 = tk.Label(frame1, width=10, text=""Target\nNumbers"", font=(""Copperplate"", 15, ""bold""), bg=""#25d366"", fg=""black"")
label1.pack(side=tk.LEFT, padx=5)

entry1 = tk.Text(frame1, height=4, width=40, font=(""Helvetica"", 15, ""bold""))
entry1.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=20)

frame1 = tk.Frame(app, bg=""#47926e"")
frame1.pack(fill=tk.X, pady=20)

message_label = tk.Label(frame1, width=10, text=""Your\nMessage"", font=(""Copperplate"", 15, ""bold""), bg=""#25d366"", fg=""black"")
message_label.pack(side=tk.LEFT, padx=5)

message_label1 = tk.Text(frame1, height=4, width=40, font=(""Helvetica"", 15, ""bold""))
message_label1.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=20)

button_frame = tk.Frame(app, bg=""#47926e"")
button_frame.pack(fill=tk.X, pady=20)

# Send Button
chrome_button = tk.Button(app, text=""SEND using Chrome"", font=(""Copperplate"", 25, ""bold""), bg=""#01e675"", fg=""black"", command=lambda: send_data('chrome'))
chrome_button.pack(side=tk.BOTTOM, fill=tk.BOTH)

firefox_button = tk.Button(app, text=""SEND using Firefox"", font=(""Copperplate"", 25, ""bold""), bg=""orange"", fg=""black"", command=lambda: send_data('firefox'))
firefox_button.pack(side=tk.BOTTOM, fill=tk.BOTH)

app.mainloop()"
jA82Pz1h,digMatrix,LazyDFU,Lua,Wednesday 1st of November 2023 05:20:58 PM CDT,"local filePath = ""utils.lua""

if not fs.exists(filePath) then
    shell.run(""pastebin get fMrrKpyL utils.lua"")
end

require(""utils"")

local args = {...}

local x = tonumber(args[1])
local y = tonumber(args[2])
local z = tonumber(args[3])
z = z - 1

function Dig_xz(x, z, direction)
    for i = 1, x do
        Dig_Forward(z)
        Able_To_Work()
        if i < x then
            if direction == 'left' then              
                if (i % 2 == 0) then
                    U_Shape_Rigt()
                else
                    U_Shape_Left()
                end
            else
                if (i % 2 == 0) then
                    U_Shape_Left()
                else
                    U_Shape_Rigt()
                end
            end 
        end
    end
end

if x == 1 and y == 1 and z == 1 then
    turtle.dig()
    return
end

turtle.dig()
turtle.forward()

for j = 1, y do
    if j % 2 == 0 and x % 2 == 0 then
        Dig_xz(x, z, 'right')
    else
        Dig_xz(x, z, 'left')
    end

    if j < y then
        Turn_around()
        turtle.digDown()
        turtle.down()
    else
        Turn_around()
        Move_up(y - 1)
    end
end

print('Terminei !!')
"
4QkJ9N0n,Untitled,GigaOrts,C#,Wednesday 1st of November 2023 05:00:16 PM CDT,"using System;
using System.Collections.Generic;

namespace ЦветочныйМагазин
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Session session = new Session();
            session.Make();
        }
    }

    class Session
    {
        private Seller _seller;
        private Player _player;

        public Session()
        {
            _seller = new Seller();
            _player = new Player();
        }

        public void Make()
        {
            string showWalletMenu = ""1"";
            string shoppingMenu = ""2"";
            string showPurchasesMenu = ""3"";
            string finishGameMenu = ""4"";

            bool isOpen = true;

            string userInput;

            while (isOpen)
            {
                Console.WriteLine(""Игра \""Цветочный магазин\""\n\nМеню:"");
                Console.WriteLine($""{showWalletMenu} - посмотреть баланс кошелька"");
                Console.WriteLine($""{shoppingMenu} - пойти за покупками"");
                Console.WriteLine($""{showPurchasesMenu} - посмотреть свои покупки"");
                Console.WriteLine($""{finishGameMenu} - закончить игру"");
                Console.Write(""\nНаберите нужную цифру меню: "");
                userInput = Console.ReadLine();

                if (userInput == showWalletMenu)
                    _player.ShowBalance();
                else if (userInput == shoppingMenu)
                    GoBuying();
                else if (userInput == showPurchasesMenu)
                    _player.ShowFlowers();
                else if (userInput == finishGameMenu)
                    isOpen = false;
                else
                    ShowErrorMessage();

                if (userInput != shoppingMenu && userInput != finishGameMenu)
                    ShowOfferToContinue();

                Console.Clear();
            }
        }

        private void GoBuying()
        {
            string showProductsMenu = ""1"";
            string tradingMenu = ""2"";
            string goOutMenu = ""3"";

            bool isBuying = true;

            string userInput;

            Console.Clear();

            while (isBuying)
            {
                Console.WriteLine(""Мы рады видеть вас в нашем цветочном магазине! Уверены, вы останетесь довольны!\n"");
                Console.WriteLine($""{showProductsMenu} - покажите товары!"");
                Console.WriteLine($""{tradingMenu} - хочу купить!"");
                Console.WriteLine($""{goOutMenu} - выйти из магазина!"");
                Console.Write(""\nНаберите нужную цифру меню: "");
                userInput = Console.ReadLine();

                if (userInput == showProductsMenu)
                    _seller.ShowFlowers();
                else if (userInput == tradingMenu)
                    Trade();
                else if (userInput == goOutMenu)
                    isBuying = false;
                else
                    ShowErrorMessage();

                if (userInput != goOutMenu)
                    ShowOfferToContinue();

                Console.Clear();
            }
        }

        private void Trade()
        {
            Product chosenFlower = _seller.GetProduct();

            if (_seller.IsFlowerExist(chosenFlower))
            {
                if (_player.IsEnoughMoneyToBuy(chosenFlower))
                {
                    Console.WriteLine($""\nВы выбрали замечательный цветок - {chosenFlower.Name}\nС вас {chosenFlower.Price} руб."");
                    _seller.SellFlower(chosenFlower);
                    _player.BuyFlower(chosenFlower);
                }
                else
                {
                    Console.WriteLine(""\nУ вас недостаточно денег!"");
                }
            }
            else
            {
                Console.WriteLine(""\nИзвините, эти цветы закончились! Приходите завтра!"");
            }
        }

        private void ShowOfferToContinue()
        {
            Console.WriteLine(""\nДля продолжения нажмите любую клавишу."");
            Console.ReadKey();
        }

        private void ShowErrorMessage()
        {
            Console.WriteLine(""\nКажется, вы ввели что-то не то."");
        }
    }

    class Seller
    {
        private List<Product> _flowers;
        private Random _random = new Random();

        public Seller()
        {
            _flowers = new List<Product>();
            FillShop();
        }

        private void FillShop()
        {
            _flowers.Add(new Product(FlowerType.Роза, GetRandomPrice(FlowerType.Роза)));
            _flowers.Add(new Product(FlowerType.Хризантема, GetRandomPrice(FlowerType.Хризантема)));
            _flowers.Add(new Product(FlowerType.Пион, GetRandomPrice(FlowerType.Пион)));
            _flowers.Add(new Product(FlowerType.Лилия, GetRandomPrice(FlowerType.Лилия)));
            _flowers.Add(new Product(FlowerType.Тюльпан, GetRandomPrice(FlowerType.Тюльпан)));
            _flowers.Add(new Product(FlowerType.Колокольчик, GetRandomPrice(FlowerType.Колокольчик)));
            _flowers.Add(new Product(FlowerType.Ромашка, GetRandomPrice(FlowerType.Ромашка)));
        }

        public void ShowFlowers()
        {
            int orderNumber = 1;
            Console.ForegroundColor = ConsoleColor.DarkGreen;
            Console.WriteLine(""\nО, у нас чудные цветы! Выбирайте любые!"");
            Console.ResetColor();

            foreach (Product flower in _flowers)
            {
                Console.WriteLine($""{orderNumber}. {flower.Name} - цена за штуку: {flower.Price} руб. Всего: {flower.Amount} шт."");
                orderNumber++;
            }
        }

        public void SellFlower(Product chosenFlower)
        {
            ChangeAmount(chosenFlower);
        }

        public bool IsFlowerExist(Product flower)
        {
            return flower.Amount != 0;
        }

        public Product GetProduct()
        {
            int index;
            ShowFlowers();
            Console.Write(""\nКакой цветок хотите? Напишите цифру: "");

            while (int.TryParse(Console.ReadLine(), out index) == false || index < 1 || index > _flowers.Count)
            {
                Console.WriteLine(""Вы ввели что-то не то, попробуйте еще раз!"");
            }

            return _flowers[index - 1];
        }

        private void ChangeAmount(Product flower)
        {
            //item.DecreaseCount();
        }

        private int GetRandomAmount()
        {
            int minAmount = 0;
            int maxAmount = 6;

            return _random.Next(minAmount, maxAmount);
        }

        private int GetRandomPrice(FlowerType flowerName)
        {
            Dictionary<FlowerType, RandomTuple> pricesByType = new();

            pricesByType.Add(FlowerType.Роза, new RandomTuple(500, 1000));

            if (pricesByType.ContainsKey(flowerName))
            {
                int minPrice = pricesByType[flowerName].Min;
                int maxPrice = pricesByType[flowerName].Max;
                return _random.Next(minPrice, maxPrice);
            }

            return 0;
        }
    }

    class RandomTuple
    {
        public RandomTuple(int min, int max)
        {
            Min = min;
            Max = max;
        }

        public int Min { get; }
        public int Max { get; }
    }

    class Randomizer
    {
        public static Random rand = new Random();

        public static int GenerateInt(int min, int max)
        {
            return rand.Next();
        }
    }


    class Player
    {
        private List<Product> _bag;
        private Random _random = new Random();
        private int _money;

        public Player()
        {
            _money = SetMoneyAmount();
            _bag = new List<Product>();
        }

        public void ShowBalance()
        {
            Console.WriteLine($""\nУ вас на счету: {_money} руб."");
        }

        public void ShowFlowers()
        {
            int orderNumber = 1;

            Console.WriteLine(""В сумке:"");

            foreach (Product flower in _bag)
            {
                Console.WriteLine($""{orderNumber}. {flower.Name}. Всего: {flower.Amount} шт."");
                orderNumber++;
            }
        }

        public void BuyFlower(Product chosenFlower)
        {
            _money -= chosenFlower.Price;

            if (_bag.Count == 0)
            {
                AddNewFlower(chosenFlower);
            }
            else
            {
                int flowersCount = _bag.Count;
                int foundFlowers = 0;

                for (int i = 0; i < flowersCount; i++)
                {
                    if (_bag[i].Name == chosenFlower.Name)
                    {
                        _bag[i].Amount++;
                        foundFlowers = 1;
                    }
                }

                if (foundFlowers == 0)
                {
                    AddNewFlower(chosenFlower);
                }
            }
        }

        public bool IsEnoughMoneyToBuy(Product flower)
        {
            return _money - flower.Price > 0;

        }

        private void AddNewFlower(Product chosenFlower)
        {
            _bag.Add(chosenFlower);
        }

        private int SetMoneyAmount()
        {
            int minMoneyAmount = 1000;
            int maxMoneyAmount = 7001;

            return _random.Next(minMoneyAmount, maxMoneyAmount);
        }
    }

    class Product
    {
        public Product(FlowerType name, int price)
        {
            Name = name;
            Price = price;
        }

        public Product()
        {

        }

        public FlowerType Name { get; private set; }
        public int Price { get; private set; }
    }

    class Cell
    {
        public Cell(Product product, int count)
        {
            Product = product;
            Count = count;
        }

        public Product Product { get; private set; }
        public int Count { get; private set; }

        public void Decrease(int amount)
        {
            Count -= amount;
        }
        //public int Count => _products.Count;

        //public void Add(int amount)
        //{
        //    for (int i = 0; i < amount; i++)
        //    {
        //        //_products.Add(new Product());
        //    }
        //}

        //public void Remove(int amount)
        //{
        //    for (int i = 0; i < amount; i++)
        //    {
        //        _products.RemoveAt(_products.Count - i);
        //    }
        //}
    }

    enum FlowerType
    {
        Роза,
        Хризантема,
        Пион,
        Ромашка,
        Тюльпан,
        Лилия,
        Колокольчик
    }
}"
6fNa5Y83,MOK layout Sami Extended,dksetiavan,JSON,Wednesday 1st of November 2023 04:55:16 PM CDT,"OK_Layout_Begin
Name:Sami Extended
1234567890
ášertŧuiopåŋ
asdfghjklđ
zčcvbnm
!@#$%^&*()
ÁŠERTŦUIOPÅŊ
ASDFGHJKLĐ
ZČCVBNM
£¥€$₹^&*()№√÷
~`{}%_-=|+§∷‡
@[]#/\'""«»—‐–
…<>!;:?‹›±.,
ˉˋˇ´¨˙˚¸﹐˛˘˜ˆ
qwéə®yäœøπ•·¡
æß∂ðƒ©ªºö≠℥∞¿
ʒx≈çþ∫ŋµ≤≥°
OK_Layout_End
"
1qvMP0uu,OoT GID noncrashing pointer corruption,MrCheeze,C,Wednesday 1st of November 2023 04:54:54 PM CDT,"object_gi_bombpouch_0AC0.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 17, 0xFFFD0000),

object_gi_bow_0910.txt
gsDPSetColorImage(7, G_IM_SIZ_4b, 4085, 0x00190000),

object_gi_bow_0940.txt
gsDPSetColorImage(7, G_IM_SIZ_4b, 4085, 0x00190000),

object_gi_bow_0960.txt
gsDPSetColorImage(7, G_IM_SIZ_4b, 4085, 0x00190000),

object_gi_dekupouch_03C0.txt
gsDPSetColorImage(7, G_IM_SIZ_8b, 4079, 0x00070000),
gsDPSetDepthImage(0xA9D746FF),

object_gi_egg_04B0.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4075, 0x00160000),

object_gi_fire_03C0.txt
gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0x00000000),
gsDPSetDepthImage(0xDC7015FF),

object_gi_gerudomask_03C0.txt
gsDPSetColorImage(7, G_IM_SIZ_16b, 25, 0xFFF90000),
gsDPSetDepthImage(0x002870FF),

object_gi_gerudomask_1060.txt
gsDPSetColorImage(7, G_IM_SIZ_16b, 25, 0xFFF90000),
gsDPSetDepthImage(0x002870FF),

object_gi_ghost_03C0.txt
gsDPSetColorImage(7, G_IM_SIZ_8b, 4059, 0x00000000),
gsDPSetDepthImage(0x1993D5FF),

object_gi_golonmask_09A0.txt
gsDPSetColorImage(7, G_IM_SIZ_8b, 4083, 0x00180000),
gsDPSetDepthImage(0x50284FFF),

object_gi_hammer_09A0.txt
gsDPSetColorImage(7, G_IM_SIZ_4b, 4070, 0x001A0000),

object_gi_hammer_09C0.txt
gsDPSetColorImage(7, G_IM_SIZ_4b, 4070, 0x001A0000),

object_gi_hearts_1240.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 23, 0x00000000),
gsDPSetDepthImage(0xD7FA70FF),

object_gi_m_arrow_0A30.txt
gsDPSetColorImage(5, G_IM_SIZ_16b, 1264, 0x275FC2FF),
gsDPSetDepthImage(0x5F32CBFF),

object_gi_m_arrow_0A50.txt
gsDPSetColorImage(5, G_IM_SIZ_16b, 1264, 0x275FC2FF),
gsDPSetDepthImage(0x5F32CBFF),

object_gi_m_arrow_0AC0.txt
gsDPSetDepthImage(0x5F32CBFF),

object_gi_m_arrow_0AD0.txt
gsDPSetDepthImage(0x5F32CBFF),

object_gi_milk_0FB0.txt
gsDPSetColorImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1444, 0xC40099FF),

object_gi_milk_0FD0.txt
gsDPSetColorImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1444, 0xC40099FF),

object_gi_milk_1008.txt
gsDPSetColorImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1444, 0xC40099FF),

object_gi_niwatori_0340.txt
gsDPSetColorImage(7, G_IM_SIZ_16b, 1259, 0x5A164BFF),
gsDPSetDepthImage(0x005158FF),

object_gi_niwatori_03C0.txt
gsDPSetColorImage(7, G_IM_SIZ_16b, 1259, 0x5A164BFF),
gsDPSetDepthImage(0x005158FF),

object_gi_rabit_mask_00E0.txt
gsDPSetColorImage(7, G_IM_SIZ_16b, 4081, 0x000D0000),
gsDPSetDepthImage(0x005158FF),

object_gi_redead_mask_00E0.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_0330.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_0340.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_03C0.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_0438.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_04A0.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_04B0.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_04C0.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_04D0.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_04E0.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_0500.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_0520.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_0540.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_0560.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_0580.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_05A0.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_05C0.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_05E0.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_0600.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_0670.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_0680.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_06E0.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_06F0.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_0750.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_redead_mask_0768.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),

object_gi_seed_0800.txt
gsDPSetColorImage(G_IM_FMT_RGBA, G_IM_SIZ_4b, 1726, 0x17584EFF),

object_gi_shield_1_03C0.txt
gsDPSetColorImage(7, G_IM_SIZ_32b, 4084, 0x00020000),
gsDPSetDepthImage(0xEB0D8BFF),

object_gi_sword_1_0910.txt
gsDPSetColorImage(6, G_IM_SIZ_16b, 1537, 0xD62A67FF),

object_gi_sword_1_0920.txt
gsDPSetColorImage(6, G_IM_SIZ_16b, 1537, 0xD62A67FF),

object_gi_sword_1_0940.txt
gsDPSetColorImage(6, G_IM_SIZ_16b, 1537, 0xD62A67FF),

object_gi_sword_1_0950.txt
gsDPSetColorImage(6, G_IM_SIZ_16b, 1537, 0xD62A67FF),

object_gi_ticketstone_0EE0.txt
gsDPSetColorImage(7, G_IM_SIZ_16b, 23, 0x00040000),

object_gi_zoramask_0750.txt
gsDPSetColorImage(7, G_IM_SIZ_16b, 4078, 0x000B0000),
gsDPSetDepthImage(0x009636FF),

"
aBnRfDXW,MOK layout CSA keyboard,dksetiavan,YAML,Wednesday 1st of November 2023 04:54:15 PM CDT,"{
""title"":""CSA keyboard"",
""onScreen"":{
""main"":[
""/1234567890-=[DEL]"",
""[TAB]qwertyuiop ç[ENTER]"",
""[CAPS]asdfghjkl;èà"",
""[SHIFT]ùzxcvbnm,.é"",
""[CTRL][ALT][SPACE][][][ALTGR][TOOL]""
],

""altGr"":[
""-¹²³¼½¾{}[]¬¸[DEL]"",
""[TAB]Ωłœ¶ŧ[LEFT][DOWN][RIGHT]øþˆ˜[ENTER]"",
""[CAPS]æßðªŋħĳĸŀ´"",
""[SHIFT]«»¢“”ŉµ<>"",
""[CTRL][ALT][SPACE][][][ALTGR][TOOL]""
],

""altGrShifted"":[
""-¡ £€⅜⅝⅞™± ¿˛[DEL]"",
""[TAB]ΩŁŒ®Ŧ¥[UP]|Ø¨ˉ[ENTER]"",
""[CAPS]Æ§ÐªŊĦĲKĿ̋̌̆"",
""[SHIFT]¦  ©‘’♪º×+˙"",
""[Lock][ALTGR:,]᭜[SPACE][][SYM:.][Enter]""
],

""shifted"":[
""\!@#$%^&*()_+DEL]"",
""[TAB]QWERTYUIOP Ç[ENTER]"",
""[CAPS]ASDFGHJKL;ÈÀ"",
""[SHIFT]ÙZXCVBNM,.É"",
""[CTRL][ALT][SPACE][][][ALTGR][TOOL]""
]
}
}
    
    "
V6uw9RTP,OoT nontrivial noncrashing Get Item Delays,MrCheeze,C,Wednesday 1st of November 2023 04:38:21 PM CDT,"0x00AA OBJECT_GI_KEY 0x31 GID_MASK_SPOOKY [0x07E0]
0x00AA OBJECT_GI_KEY 0x3F GID_POACHERS_SAW [0x07E0]
0x00B9 OBJECT_GI_BOSSKEY 0x2B GID_SHIELD_HYLIAN [0x0C70]
0x00B9 OBJECT_GI_BOSSKEY 0x66 GID_BLUE_FIRE [0x0C60]
0x00BD OBJECT_GI_HEARTS 0x2D GID_LONGSHOT [0x1240]
0x00BF OBJECT_GI_BOMBPOUCH 0x30 GID_MASK_KEATON [0x0AC0]
0x00CB OBJECT_GI_SHIELD_1 0x1B GID_DUNGEON_MAP [0x03C0]
0x00D7 OBJECT_GI_GERUDO 0x54 GID_CLAIM_CHECK [0x0F00]
0x00DA OBJECT_GI_EGG 0x27 GID_BOMBCHU [0x04B0]
0x00DE OBJECT_GI_OCARINA 0x52 GID_ODD_POTION [0x08B0]
0x00DF OBJECT_GI_MILK 0x28 GID_EGG [0x0FD0,0x1008]
0x00DF OBJECT_GI_MILK 0x39 GID_SHIELD_MIRROR [0x0FB0]
0x00E8 OBJECT_GI_BOOMERANG 0x29 GID_SCALE_SILVER [0x0A20]
0x00E8 OBJECT_GI_BOOMERANG 0x40 GID_HAMMER [0x09D0]
0x00E8 OBJECT_GI_BOOMERANG 0x4E GID_MASK_SKULL [0x09D0]
0x00E8 OBJECT_GI_BOOMERANG 0x53 GID_ODD_MUSHROOM [0x09D0]
0x00E9 OBJECT_GI_BOW 0x0A GID_COMPASS [0x0960]
0x00E9 OBJECT_GI_BOW 0x16 GID_QUIVER_50 [0x0910,0x0970]
0x00E9 OBJECT_GI_BOW 0x32 GID_SLINGSHOT [0x0940]
0x00E9 OBJECT_GI_BOW 0x57 GID_GORONS_BRACELET [0x0960]
0x00E9 OBJECT_GI_BOW 0x6F GID_BIG_POE [0x0970]
0x00E9 OBJECT_GI_BOW 0x73 GID_SWORD_KOKIRI [0x0960]
0x00EA OBJECT_GI_GLASSES 0x59 GID_EYEBALL_FROG [0x0D60]
0x00F6 OBJECT_GI_HAMMER 0x1F GID_BOMB [0x09A0]
0x00F6 OBJECT_GI_HAMMER 0x56 GID_PRESCRIPTION [0x09C0]
0x0109 OBJECT_GI_NIWATORI 0x1B GID_DUNGEON_MAP [0x03C0]
0x0109 OBJECT_GI_NIWATORI 0x24 GID_ARROWS_5 [0x0340]
0x0119 OBJECT_GI_SEED 0x01 GID_SMALL_KEY [0x0800]
0x012D OBJECT_GI_GLOVES 0x55 GID_BROKEN_GORONS_SWORD [0x06E0]
0x0135 OBJECT_GI_REDEAD_MASK 0x00 GID_BOTTLE_EMPTY [0x0670,0x0750]
0x0135 OBJECT_GI_REDEAD_MASK 0x08 GID_RECOVERY_HEART [0x00E0]
0x0135 OBJECT_GI_REDEAD_MASK 0x1A GID_DEKU_STICK [0x04D0]
0x0135 OBJECT_GI_REDEAD_MASK 0x1B GID_DUNGEON_MAP [0x03C0]
0x0135 OBJECT_GI_REDEAD_MASK 0x1D GID_MAGIC_JAR_SMALL [0x0580]
0x0135 OBJECT_GI_REDEAD_MASK 0x24 GID_ARROWS_5 [0x0340]
0x0135 OBJECT_GI_REDEAD_MASK 0x27 GID_BOMBCHU [0x04B0]
0x0135 OBJECT_GI_REDEAD_MASK 0x2C GID_HOOKSHOT [0x0750]
0x0135 OBJECT_GI_REDEAD_MASK 0x3D GID_MAGIC_BEAN [0x0580]
0x0135 OBJECT_GI_REDEAD_MASK 0x3E GID_FISH [0x0600]
0x0135 OBJECT_GI_REDEAD_MASK 0x42 GID_SWORD_BIGGORON [0x0600]
0x0135 OBJECT_GI_REDEAD_MASK 0x51 GID_EYE_DROPS [0x0680,0x0768]
0x0135 OBJECT_GI_REDEAD_MASK 0x55 GID_BROKEN_GORONS_SWORD [0x06E0]
0x0135 OBJECT_GI_REDEAD_MASK 0x62 GID_SKULL_TOKEN [0x0330,0x0438]
0x0135 OBJECT_GI_REDEAD_MASK 0x6C GID_RUPEE_GREEN [0x05E0,0x04A0,0x06F0,0x0540]
0x0135 OBJECT_GI_REDEAD_MASK 0x6D GID_RUPEE_BLUE [0x05E0,0x04C0,0x06F0,0x0560]
0x0135 OBJECT_GI_REDEAD_MASK 0x6E GID_RUPEE_RED [0x05E0,0x04E0,0x06F0,0x0580]
0x0135 OBJECT_GI_REDEAD_MASK 0x70 GID_RUPEE_PURPLE [0x05E0,0x0500,0x06F0,0x05A0]
0x0135 OBJECT_GI_REDEAD_MASK 0x71 GID_RUPEE_GOLD [0x05E0,0x0520,0x06F0,0x05C0]
0x0137 OBJECT_GI_RABIT_MASK 0x08 GID_RECOVERY_HEART [0x00E0]
0x0140 OBJECT_GI_POWDER 0x47 GID_DEKU_SEEDS [0x0810]
0x0140 OBJECT_GI_POWDER 0x67 GID_BUG [0x0830]
0x0142 OBJECT_GI_TICKETSTONE 0x1E GID_MAGIC_JAR_LARGE [0x0EE0]
0x0143 OBJECT_GI_BROKENSWORD 0x00 GID_BOTTLE_EMPTY [0x0670]
0x0143 OBJECT_GI_BROKENSWORD 0x51 GID_EYE_DROPS [0x0680]
0x0146 OBJECT_GI_PRESCRIPTION 0x1F GID_BOMB [0x09A0]
0x0146 OBJECT_GI_PRESCRIPTION 0x34 GID_BOW [0x0990]
0x0150 OBJECT_GI_GOLONMASK 0x1F GID_BOMB [0x09A0]
0x0151 OBJECT_GI_ZORAMASK 0x2C GID_HOOKSHOT [0x0750]
0x0152 OBJECT_GI_GERUDOMASK 0x1B GID_DUNGEON_MAP [0x03C0]
0x0152 OBJECT_GI_GERUDOMASK 0x2F GID_BOTTLE_MILK_FULL [0x1060]
0x0157 OBJECT_GI_HOVERBOOTS 0x08 GID_RECOVERY_HEART [0x00E0]
0x0157 OBJECT_GI_HOVERBOOTS 0x26 GID_ARROWS_30 [0x1830]
0x0158 OBJECT_GI_M_ARROW 0x17 GID_BOMB_BAG_20 [0x0AD0]
0x0158 OBJECT_GI_M_ARROW 0x1C GID_SHIELD_DEKU [0x0A50]
0x0158 OBJECT_GI_M_ARROW 0x30 GID_MASK_KEATON [0x0AC0]
0x0158 OBJECT_GI_M_ARROW 0x33 GID_BOOMERANG [0x0A30]
0x0173 OBJECT_GI_FIRE 0x1B GID_DUNGEON_MAP [0x03C0]
0x0176 OBJECT_GI_GHOST 0x1B GID_DUNGEON_MAP [0x03C0]
0x017B OBJECT_GI_DEKUPOUCH 0x1B GID_DUNGEON_MAP [0x03C0]
0x018D OBJECT_GI_SWORD_1 0x16 GID_QUIVER_50 [0x0910]
0x018D OBJECT_GI_SWORD_1 0x32 GID_SLINGSHOT [0x0940]
0x018D OBJECT_GI_SWORD_1 0x63 GID_DINS_FIRE [0x0920]
0x018D OBJECT_GI_SWORD_1 0x64 GID_FARORES_WIND [0x0920]
0x018D OBJECT_GI_SWORD_1 0x65 GID_NAYRUS_LOVE [0x0920]
0x018D OBJECT_GI_SWORD_1 0x69 GID_POE [0x0950]

object_gi_bombpouch_0AC0.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_32b, 17, 0xFFFD0000),
	gsSPCullDisplayList(819, 29055 /* INVALID */),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x78, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x3C, 0x28, 0x00, 0xFF),
	gsSPEndDisplayList(),
}

object_gi_boomerang_09D0.txt
{
	gsDPNoOpTag(0xFFF20000),
	gsSPModifyVertex(796 /* INVALID */, 0x0000, 0x33D463FF),
	gsDPNoOpTag(0xFFF00000),
	gsSPModifyVertex(811, 0x0000, 0x9DD4CDFF),
	gsDPNoOpTag(0xFFF10000),
	gsSPModifyVertex(805, 0x0000, 0x9DD4CDFF),
	gsDPNoOpTag(0xFFEC0000),
	gsSPModifyVertex(754, 0x0000, 0x5E49F6FF),
	gsDPNoOpTag(0xFFF10000),
	gsSPModifyVertex(805, 0x0000, 0x33D463FF),
	gsDPNoOpTag(0xFFF20000),
	gsSPModifyVertex(796 /* INVALID */, 0x0000, 0x9DD4CDFF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0xA0, 0x64, 0x00, 0xFF),
	gsDPSetEnvColor(0x3C, 0x1E, 0x00, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING),
	gsSPVertex(0x06000000, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 0, 0, 8, 9, 1, 0),
	gsSP2Triangles(10, 11, 12, 0, 13, 14, 11, 0),
	gsSP2Triangles(15, 13, 16, 0, 17, 5, 18, 0),
	gsSP2Triangles(19, 16, 20, 0, 21, 5, 4, 0),
	gsSP2Triangles(22, 18, 5, 0, 8, 0, 23, 0),
	gsSP2Triangles(2, 6, 0, 0, 1, 0, 8, 0),
	gsSP2Triangles(12, 24, 10, 0, 11, 10, 13, 0),
	gsSP2Triangles(16, 19, 15, 0, 20, 25, 19, 0),
	gsSP2Triangles(4, 26, 21, 0, 5, 21, 22, 0),
	gsSP1Triangle(27, 28, 29, 0),
	gsSPVertex(0x060001E0, 28, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
	gsSP2Triangles(12, 13, 14, 0, 15, 14, 13, 0),
	gsSP2Triangles(8, 0, 16, 0, 17, 15, 18, 0),
	gsSP2Triangles(1, 0, 19, 0, 0, 20, 7, 0),
	gsSP2Triangles(21, 22, 8, 0, 3, 5, 23, 0),
	gsSP2Triangles(8, 22, 6, 0, 11, 24, 9, 0),
	gsSP2Triangles(14, 25, 12, 0, 13, 18, 15, 0),
	gsSP2Triangles(18, 26, 17, 0, 19, 27, 1, 0),
	gsSP1Triangle(7, 19, 0, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0x96, 0xFF),
	gsDPSetEnvColor(0x64, 0x32, 0x00, 0xFF),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_CULL_BACK),
	gsSPSetGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x060003A0, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x060003D0, 20, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(2, 6, 0, 0, 7, 8, 5, 0),
	gsSP2Triangles(2, 9, 10, 0, 5, 11, 7, 0),
	gsSP2Triangles(10, 12, 2, 0, 13, 0, 14, 0),
	gsSP2Triangles(14, 0, 6, 0, 10, 15, 14, 0),
	gsSP2Triangles(10, 14, 12, 0, 16, 3, 17, 0),
	gsSP2Triangles(17, 3, 18, 0, 7, 19, 17, 0),
	gsSP1Triangle(7, 17, 8, 0),
	gsDPPipeSync(),
	gsSPSetGeometryMode(G_CULL_BACK),
	gsSPVertex(0x06000510, 20, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 2, 7, 0, 1, 0, 4, 0),
	gsSP2Triangles(2, 6, 0, 0, 5, 8, 3, 0),
	gsSP2Triangles(7, 9, 6, 0, 4, 3, 1, 0),
	gsSP2Triangles(10, 11, 12, 0, 13, 14, 15, 0),
	gsSP2Triangles(16, 10, 17, 0, 14, 12, 11, 0),
	gsSP2Triangles(12, 17, 10, 0, 15, 18, 13, 0),
	gsSP2Triangles(17, 19, 16, 0, 11, 15, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0x32, 0x96, 0xFF),
	gsDPSetEnvColor(0x50, 0x00, 0x00, 0xFF),
	gsSPTexture(qu016(0.0915527), qu016(0.0915527), 0, G_TX_RENDERTILE, G_ON),
	gsSPClearGeometryMode(G_CULL_BACK),
	gsSPVertex(0x06000650, 10, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(1, 0, 6, 0, 7, 5, 4, 0),
	gsSP2Triangles(2, 1, 8, 0, 5, 9, 3, 0),
	gsSP2Triangles(6, 8, 1, 0, 9, 5, 7, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x32, 0xC8, 0x00, 0xFF),
	gsDPSetEnvColor(0x00, 0x50, 0x00, 0xFF),
	gsSPTexture(qu016(0.0457764), qu016(0.0457764), 0, G_TX_RENDERTILE, G_ON),
	gsSPSetGeometryMode(G_CULL_BACK),
	gsSPVertex(0x060006F0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 2, 7, 0, 1, 0, 8, 0),
	gsSP2Triangles(9, 10, 11, 0, 12, 8, 13, 0),
	gsSP2Triangles(10, 9, 4, 0, 14, 11, 15, 0),
	gsSP2Triangles(2, 6, 0, 0, 5, 16, 3, 0),
	gsSP2Triangles(7, 17, 6, 0, 8, 12, 1, 0),
	gsSP2Triangles(11, 14, 9, 0, 13, 18, 12, 0),
	gsSP2Triangles(4, 3, 10, 0, 15, 19, 14, 0),
	gsSP2Triangles(20, 21, 22, 0, 23, 24, 25, 0),
	gsSP2Triangles(26, 20, 27, 0, 28, 22, 21, 0),
	gsSP1Triangle(29, 30, 31, 0),
	gsSPVertex(0x060008F0, 20, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
	gsSP2Triangles(12, 13, 14, 0, 10, 15, 16, 0),
	gsSP2Triangles(17, 2, 1, 0, 4, 8, 7, 0),
	gsSP2Triangles(2, 18, 0, 0, 5, 12, 3, 0),
	gsSP1Triangle(8, 19, 6, 0),
	gsSPEndDisplayList(),
}

object_gi_boomerang_0A20.txt
{
	gsDPNoOpTag(0xFFF20000),
	gsSPModifyVertex(796 /* INVALID */, 0x0000, 0x9DD4CDFF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0xA0, 0x64, 0x00, 0xFF),
	gsDPSetEnvColor(0x3C, 0x1E, 0x00, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING),
	gsSPVertex(0x06000000, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 0, 0, 8, 9, 1, 0),
	gsSP2Triangles(10, 11, 12, 0, 13, 14, 11, 0),
	gsSP2Triangles(15, 13, 16, 0, 17, 5, 18, 0),
	gsSP2Triangles(19, 16, 20, 0, 21, 5, 4, 0),
	gsSP2Triangles(22, 18, 5, 0, 8, 0, 23, 0),
	gsSP2Triangles(2, 6, 0, 0, 1, 0, 8, 0),
	gsSP2Triangles(12, 24, 10, 0, 11, 10, 13, 0),
	gsSP2Triangles(16, 19, 15, 0, 20, 25, 19, 0),
	gsSP2Triangles(4, 26, 21, 0, 5, 21, 22, 0),
	gsSP1Triangle(27, 28, 29, 0),
	gsSPVertex(0x060001E0, 28, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
	gsSP2Triangles(12, 13, 14, 0, 15, 14, 13, 0),
	gsSP2Triangles(8, 0, 16, 0, 17, 15, 18, 0),
	gsSP2Triangles(1, 0, 19, 0, 0, 20, 7, 0),
	gsSP2Triangles(21, 22, 8, 0, 3, 5, 23, 0),
	gsSP2Triangles(8, 22, 6, 0, 11, 24, 9, 0),
	gsSP2Triangles(14, 25, 12, 0, 13, 18, 15, 0),
	gsSP2Triangles(18, 26, 17, 0, 19, 27, 1, 0),
	gsSP1Triangle(7, 19, 0, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0x96, 0xFF),
	gsDPSetEnvColor(0x64, 0x32, 0x00, 0xFF),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_CULL_BACK),
	gsSPSetGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x060003A0, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x060003D0, 20, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(2, 6, 0, 0, 7, 8, 5, 0),
	gsSP2Triangles(2, 9, 10, 0, 5, 11, 7, 0),
	gsSP2Triangles(10, 12, 2, 0, 13, 0, 14, 0),
	gsSP2Triangles(14, 0, 6, 0, 10, 15, 14, 0),
	gsSP2Triangles(10, 14, 12, 0, 16, 3, 17, 0),
	gsSP2Triangles(17, 3, 18, 0, 7, 19, 17, 0),
	gsSP1Triangle(7, 17, 8, 0),
	gsDPPipeSync(),
	gsSPSetGeometryMode(G_CULL_BACK),
	gsSPVertex(0x06000510, 20, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 2, 7, 0, 1, 0, 4, 0),
	gsSP2Triangles(2, 6, 0, 0, 5, 8, 3, 0),
	gsSP2Triangles(7, 9, 6, 0, 4, 3, 1, 0),
	gsSP2Triangles(10, 11, 12, 0, 13, 14, 15, 0),
	gsSP2Triangles(16, 10, 17, 0, 14, 12, 11, 0),
	gsSP2Triangles(12, 17, 10, 0, 15, 18, 13, 0),
	gsSP2Triangles(17, 19, 16, 0, 11, 15, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0x32, 0x96, 0xFF),
	gsDPSetEnvColor(0x50, 0x00, 0x00, 0xFF),
	gsSPTexture(qu016(0.0915527), qu016(0.0915527), 0, G_TX_RENDERTILE, G_ON),
	gsSPClearGeometryMode(G_CULL_BACK),
	gsSPVertex(0x06000650, 10, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(1, 0, 6, 0, 7, 5, 4, 0),
	gsSP2Triangles(2, 1, 8, 0, 5, 9, 3, 0),
	gsSP2Triangles(6, 8, 1, 0, 9, 5, 7, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x32, 0xC8, 0x00, 0xFF),
	gsDPSetEnvColor(0x00, 0x50, 0x00, 0xFF),
	gsSPTexture(qu016(0.0457764), qu016(0.0457764), 0, G_TX_RENDERTILE, G_ON),
	gsSPSetGeometryMode(G_CULL_BACK),
	gsSPVertex(0x060006F0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 2, 7, 0, 1, 0, 8, 0),
	gsSP2Triangles(9, 10, 11, 0, 12, 8, 13, 0),
	gsSP2Triangles(10, 9, 4, 0, 14, 11, 15, 0),
	gsSP2Triangles(2, 6, 0, 0, 5, 16, 3, 0),
	gsSP2Triangles(7, 17, 6, 0, 8, 12, 1, 0),
	gsSP2Triangles(11, 14, 9, 0, 13, 18, 12, 0),
	gsSP2Triangles(4, 3, 10, 0, 15, 19, 14, 0),
	gsSP2Triangles(20, 21, 22, 0, 23, 24, 25, 0),
	gsSP2Triangles(26, 20, 27, 0, 28, 22, 21, 0),
	gsSP1Triangle(29, 30, 31, 0),
	gsSPVertex(0x060008F0, 20, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
	gsSP2Triangles(12, 13, 14, 0, 10, 15, 16, 0),
	gsSP2Triangles(17, 2, 1, 0, 4, 8, 7, 0),
	gsSP2Triangles(2, 18, 0, 0, 5, 12, 3, 0),
	gsSP1Triangle(8, 19, 6, 0),
	gsSPEndDisplayList(),
}

object_gi_bosskey_0C60.txt
{
	gsDPNoOpTag(0xFFFD0000),
	gsSPModifyVertex(945 /* INVALID */, 0x00A5, 0x13C59AFF),
	gsDPNoOpTag(0xFFFF0000),
	gsSPModifyVertex(870, 0x0036, 0x0DA9AFFF),
	gsDPNoOpTag(0xFFFF0000),
	gsSPModifyVertex(807 /* INVALID */, 0x001D, 0x0AB8A1FF),
	gsDPNoOpTag(0xFFFF0000),
	gsSPModifyVertex(660, 0x0023, 0x45F79FFF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(TEXEL0, PRIMITIVE, PRIM_LOD_FRAC, TEXEL0, 1, 1, PRIM_LOD_FRAC, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, qu08(0.5), 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x8C, 0x78, 0x00, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0457764), qu016(0.0457764), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032090, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 4, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
	gsSPVertex(0x06000040, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
	gsSP2Triangles(1, 4, 5, 0, 1, 5, 2, 0),
	gsSP2Triangles(4, 6, 7, 0, 4, 7, 5, 0),
	gsSP2Triangles(6, 0, 3, 0, 6, 3, 7, 0),
	gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
	gsSP2Triangles(11, 12, 13, 0, 11, 13, 14, 0),
	gsSP2Triangles(12, 9, 15, 0, 12, 15, 13, 0),
	gsSP2Triangles(9, 8, 16, 0, 9, 16, 15, 0),
	gsSP2Triangles(8, 11, 14, 0, 8, 14, 16, 0),
	gsSP2Triangles(17, 18, 19, 0, 17, 19, 20, 0),
	gsSP2Triangles(20, 19, 21, 0, 20, 21, 22, 0),
	gsSP2Triangles(19, 18, 23, 0, 19, 23, 21, 0),
	gsSP2Triangles(18, 17, 24, 0, 18, 24, 23, 0),
	gsSP2Triangles(17, 25, 26, 0, 17, 26, 24, 0),
	gsSP2Triangles(27, 28, 29, 0, 27, 29, 30, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
	gsSP2Triangles(4, 5, 6, 0, 5, 7, 6, 0),
	gsSP2Triangles(8, 5, 9, 0, 7, 5, 8, 0),
	gsSP2Triangles(10, 11, 12, 0, 13, 11, 10, 0),
	gsSP2Triangles(14, 11, 13, 0, 15, 16, 11, 0),
	gsSP2Triangles(17, 18, 3, 0, 13, 19, 20, 0),
	gsSP2Triangles(2, 6, 7, 0, 21, 22, 9, 0),
	gsSP2Triangles(23, 1, 24, 0, 19, 25, 26, 0),
	gsSP2Triangles(27, 28, 29, 0, 20, 19, 26, 0),
	gsSP1Triangle(30, 13, 25, 0),
	gsSPVertex(0x06000420, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
	gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
	gsSP2Triangles(18, 19, 3, 0, 3, 20, 18, 0),
	gsSP2Triangles(21, 5, 20, 0, 22, 23, 18, 0),
	gsSP2Triangles(18, 15, 22, 0, 24, 25, 16, 0),
	gsSP2Triangles(26, 27, 28, 0, 29, 30, 31, 0),
	gsSPVertex(0x06000620, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 4, 7, 0, 8, 9, 0, 0),
	gsSP2Triangles(10, 11, 12, 0, 13, 14, 15, 0),
	gsSP2Triangles(16, 17, 18, 0, 19, 20, 18, 0),
	gsSP2Triangles(0, 21, 8, 0, 7, 22, 6, 0),
	gsSP2Triangles(23, 24, 25, 0, 26, 27, 24, 0),
	gsSP1Triangle(28, 29, 30, 0),
	gsSPVertex(0x06000810, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
	gsSP2Triangles(4, 5, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(10, 11, 4, 0, 12, 10, 4, 0),
	gsSP2Triangles(5, 13, 14, 0, 15, 16, 6, 0),
	gsSP2Triangles(17, 18, 19, 0, 20, 21, 22, 0),
	gsSP2Triangles(23, 17, 24, 0, 25, 23, 20, 0),
	gsSP2Triangles(0, 26, 27, 0, 28, 29, 15, 0),
	gsSP2Triangles(27, 1, 0, 0, 5, 4, 11, 0),
	gsSP2Triangles(13, 5, 30, 0, 13, 26, 14, 0),
	gsSPVertex(0x06000A00, 19, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 2, 10, 0),
	gsSP2Triangles(11, 12, 13, 0, 14, 15, 16, 0),
	gsSP2Triangles(14, 16, 17, 0, 14, 17, 18, 0),
	gsSPEndDisplayList(),
}

object_gi_bosskey_0C70.txt
{
	gsDPNoOpTag(0xFFFF0000),
	gsSPModifyVertex(870, 0x0036, 0x0DA9AFFF),
	gsDPNoOpTag(0xFFFF0000),
	gsSPModifyVertex(807 /* INVALID */, 0x001D, 0x0AB8A1FF),
	gsDPNoOpTag(0xFFFF0000),
	gsSPModifyVertex(660, 0x0023, 0x45F79FFF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(TEXEL0, PRIMITIVE, PRIM_LOD_FRAC, TEXEL0, 1, 1, PRIM_LOD_FRAC, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, qu08(0.5), 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x8C, 0x78, 0x00, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0457764), qu016(0.0457764), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032090, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 4, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
	gsSPVertex(0x06000040, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
	gsSP2Triangles(1, 4, 5, 0, 1, 5, 2, 0),
	gsSP2Triangles(4, 6, 7, 0, 4, 7, 5, 0),
	gsSP2Triangles(6, 0, 3, 0, 6, 3, 7, 0),
	gsSP2Triangles(8, 9, 10, 0, 8, 10, 11, 0),
	gsSP2Triangles(11, 12, 13, 0, 11, 13, 14, 0),
	gsSP2Triangles(12, 9, 15, 0, 12, 15, 13, 0),
	gsSP2Triangles(9, 8, 16, 0, 9, 16, 15, 0),
	gsSP2Triangles(8, 11, 14, 0, 8, 14, 16, 0),
	gsSP2Triangles(17, 18, 19, 0, 17, 19, 20, 0),
	gsSP2Triangles(20, 19, 21, 0, 20, 21, 22, 0),
	gsSP2Triangles(19, 18, 23, 0, 19, 23, 21, 0),
	gsSP2Triangles(18, 17, 24, 0, 18, 24, 23, 0),
	gsSP2Triangles(17, 25, 26, 0, 17, 26, 24, 0),
	gsSP2Triangles(27, 28, 29, 0, 27, 29, 30, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
	gsSP2Triangles(4, 5, 6, 0, 5, 7, 6, 0),
	gsSP2Triangles(8, 5, 9, 0, 7, 5, 8, 0),
	gsSP2Triangles(10, 11, 12, 0, 13, 11, 10, 0),
	gsSP2Triangles(14, 11, 13, 0, 15, 16, 11, 0),
	gsSP2Triangles(17, 18, 3, 0, 13, 19, 20, 0),
	gsSP2Triangles(2, 6, 7, 0, 21, 22, 9, 0),
	gsSP2Triangles(23, 1, 24, 0, 19, 25, 26, 0),
	gsSP2Triangles(27, 28, 29, 0, 20, 19, 26, 0),
	gsSP1Triangle(30, 13, 25, 0),
	gsSPVertex(0x06000420, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
	gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
	gsSP2Triangles(18, 19, 3, 0, 3, 20, 18, 0),
	gsSP2Triangles(21, 5, 20, 0, 22, 23, 18, 0),
	gsSP2Triangles(18, 15, 22, 0, 24, 25, 16, 0),
	gsSP2Triangles(26, 27, 28, 0, 29, 30, 31, 0),
	gsSPVertex(0x06000620, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 4, 7, 0, 8, 9, 0, 0),
	gsSP2Triangles(10, 11, 12, 0, 13, 14, 15, 0),
	gsSP2Triangles(16, 17, 18, 0, 19, 20, 18, 0),
	gsSP2Triangles(0, 21, 8, 0, 7, 22, 6, 0),
	gsSP2Triangles(23, 24, 25, 0, 26, 27, 24, 0),
	gsSP1Triangle(28, 29, 30, 0),
	gsSPVertex(0x06000810, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
	gsSP2Triangles(4, 5, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(10, 11, 4, 0, 12, 10, 4, 0),
	gsSP2Triangles(5, 13, 14, 0, 15, 16, 6, 0),
	gsSP2Triangles(17, 18, 19, 0, 20, 21, 22, 0),
	gsSP2Triangles(23, 17, 24, 0, 25, 23, 20, 0),
	gsSP2Triangles(0, 26, 27, 0, 28, 29, 15, 0),
	gsSP2Triangles(27, 1, 0, 0, 5, 4, 11, 0),
	gsSP2Triangles(13, 5, 30, 0, 13, 26, 14, 0),
	gsSPVertex(0x06000A00, 19, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 2, 10, 0),
	gsSP2Triangles(11, 12, 13, 0, 14, 15, 16, 0),
	gsSP2Triangles(14, 16, 17, 0, 14, 17, 18, 0),
	gsSPEndDisplayList(),
}

object_gi_bow_0910.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4087, 0x00180000),
	gsSPModifyVertex(478, 0x00E1, 0x007800FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4087, 0x00160000),
	gsSPLineW3D(100 /* INVALID */, 1 /* INVALID */, 188, 0),
	gsDPNoOpTag(0xFFE80000),
	gsSPLineW3D(100 /* INVALID */, 0, 68, 0),
	gsDPNoOpTag(0xFFE60000),
	gsSP2Triangles(74, 0, 13 /* INVALID */, 0, 68, 0, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4087, 0x00180000),
	gsSPModifyVertex(478, 0x00E1, 0x5BB618FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4085, 0x00190000),
	gsSP2Triangles(74, 1 /* INVALID */, 114 /* INVALID */, 0, 68, 0, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE90000),
	gsSPModifyVertex(34, 0x00E1, 0x007800FF),
	gsDPNoOpTag(0xFFE90000),
	gsSPModifyVertex(34, 0x00E1, 0x08B75EFF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x0A, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x0A, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING),
	gsSPVertex(0x06000000, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 1, 0),
	gsSP2Triangles(5, 6, 4, 0, 7, 8, 9, 0),
	gsSP2Triangles(10, 11, 12, 0, 9, 13, 7, 0),
	gsSP2Triangles(8, 7, 14, 0, 12, 14, 10, 0),
	gsSP2Triangles(15, 5, 3, 0, 16, 0, 17, 0),
	gsSP2Triangles(2, 17, 0, 0, 1, 0, 3, 0),
	gsSP2Triangles(4, 3, 5, 0, 14, 12, 8, 0),
	gsSP2Triangles(18, 3, 0, 0, 17, 19, 16, 0),
	gsSP2Triangles(0, 16, 18, 0, 3, 18, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 25, 0),
	gsSP2Triangles(24, 26, 27, 0, 28, 29, 22, 0),
	gsSP2Triangles(30, 31, 26, 0, 22, 21, 28, 0),
	gsSP2Triangles(24, 22, 29, 0, 26, 24, 30, 0),
	gsSPVertex(0x06000200, 14, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(4, 3, 6, 0, 0, 4, 7, 0),
	gsSP2Triangles(1, 0, 8, 0, 9, 10, 8, 0),
	gsSP2Triangles(4, 0, 11, 0, 5, 12, 3, 0),
	gsSP2Triangles(11, 5, 4, 0, 2, 13, 0, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xF0, 0xBE, 0x28, 0xFF),
	gsDPSetEnvColor(0x82, 0x50, 0x00, 0xFF),
	gsSPVertex(0x060002E0, 10, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(4, 6, 7, 0, 3, 8, 2, 0),
	gsSP2Triangles(2, 9, 0, 0, 5, 8, 3, 0),
	gsSP2Triangles(7, 5, 4, 0, 2, 1, 3, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x32, 0x96, 0xFF, 0xFF),
	gsDPSetEnvColor(0x00, 0x00, 0x64, 0xFF),
	gsSPTexture(qu016(0.0457764), qu016(0.0457764), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPSetGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000380, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x060003B0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
	gsSP2Triangles(0, 3, 4, 0, 1, 5, 2, 0),
	gsSP2Triangles(6, 2, 5, 0, 7, 5, 1, 0),
	gsSP2Triangles(8, 9, 10, 0, 9, 8, 11, 0),
	gsSP2Triangles(8, 12, 13, 0, 14, 9, 11, 0),
	gsSP2Triangles(12, 14, 11, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 4, 3, 0, 3, 17, 18, 0),
	gsSP2Triangles(19, 20, 21, 0, 22, 21, 20, 0),
	gsSP2Triangles(23, 22, 20, 0, 19, 23, 20, 0),
	gsSP2Triangles(22, 24, 21, 0, 24, 22, 25, 0),
	gsSP2Triangles(21, 26, 27, 0, 24, 25, 27, 0),
	gsSP2Triangles(28, 27, 25, 0, 29, 19, 27, 0),
	gsSP2Triangles(28, 25, 30, 0, 28, 30, 31, 0),
	gsSPVertex(0x060005B0, 6, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP1Triangle(2, 1, 3, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xC8, 0x00, 0x00, 0xFF),
	gsDPSetEnvColor(0x32, 0x00, 0x00, 0xFF),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsSPVertex(0x06000610, 27, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 1, 0),
	gsSP2Triangles(4, 2, 1, 0, 1, 0, 3, 0),
	gsSP2Triangles(5, 6, 7, 0, 2, 7, 6, 0),
	gsSP2Triangles(6, 5, 8, 0, 3, 8, 9, 0),
	gsSP2Triangles(8, 3, 0, 0, 7, 10, 5, 0),
	gsSP2Triangles(8, 0, 6, 0, 2, 6, 0, 0),
	gsSP2Triangles(7, 2, 4, 0, 11, 12, 13, 0),
	gsSP2Triangles(14, 15, 16, 0, 17, 11, 18, 0),
	gsSP2Triangles(19, 20, 14, 0, 18, 21, 22, 0),
	gsSP2Triangles(21, 18, 11, 0, 23, 22, 21, 0),
	gsSP2Triangles(24, 25, 19, 0, 20, 19, 25, 0),
	gsSP2Triangles(22, 26, 18, 0, 21, 13, 23, 0),
	gsSP2Triangles(13, 21, 11, 0, 17, 12, 11, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x82, 0x82, 0x96, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x060007C0, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 7, 0, 8, 2, 1, 0),
	gsSP2Triangles(5, 2, 3, 0, 7, 9, 3, 0),
	gsSP2Triangles(10, 11, 12, 0, 13, 14, 15, 0),
	gsSP2Triangles(16, 17, 15, 0, 11, 10, 18, 0),
	gsSP2Triangles(15, 10, 13, 0, 15, 14, 16, 0),
	gsSP2Triangles(19, 20, 21, 0, 22, 23, 24, 0),
	gsSP2Triangles(25, 26, 24, 0, 21, 27, 19, 0),
	gsSP2Triangles(24, 26, 22, 0, 24, 28, 25, 0),
	gsSPEndDisplayList(),
}

object_gi_bow_0940.txt
{
	gsDPNoOpTag(0xFFE60000),
	gsSP2Triangles(74, 0, 13 /* INVALID */, 0, 68, 0, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4087, 0x00180000),
	gsSPModifyVertex(478, 0x00E1, 0x5BB618FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4085, 0x00190000),
	gsSP2Triangles(74, 1 /* INVALID */, 114 /* INVALID */, 0, 68, 0, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE90000),
	gsSPModifyVertex(34, 0x00E1, 0x007800FF),
	gsDPNoOpTag(0xFFE90000),
	gsSPModifyVertex(34, 0x00E1, 0x08B75EFF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x0A, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x0A, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING),
	gsSPVertex(0x06000000, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 1, 0),
	gsSP2Triangles(5, 6, 4, 0, 7, 8, 9, 0),
	gsSP2Triangles(10, 11, 12, 0, 9, 13, 7, 0),
	gsSP2Triangles(8, 7, 14, 0, 12, 14, 10, 0),
	gsSP2Triangles(15, 5, 3, 0, 16, 0, 17, 0),
	gsSP2Triangles(2, 17, 0, 0, 1, 0, 3, 0),
	gsSP2Triangles(4, 3, 5, 0, 14, 12, 8, 0),
	gsSP2Triangles(18, 3, 0, 0, 17, 19, 16, 0),
	gsSP2Triangles(0, 16, 18, 0, 3, 18, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 25, 0),
	gsSP2Triangles(24, 26, 27, 0, 28, 29, 22, 0),
	gsSP2Triangles(30, 31, 26, 0, 22, 21, 28, 0),
	gsSP2Triangles(24, 22, 29, 0, 26, 24, 30, 0),
	gsSPVertex(0x06000200, 14, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(4, 3, 6, 0, 0, 4, 7, 0),
	gsSP2Triangles(1, 0, 8, 0, 9, 10, 8, 0),
	gsSP2Triangles(4, 0, 11, 0, 5, 12, 3, 0),
	gsSP2Triangles(11, 5, 4, 0, 2, 13, 0, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xF0, 0xBE, 0x28, 0xFF),
	gsDPSetEnvColor(0x82, 0x50, 0x00, 0xFF),
	gsSPVertex(0x060002E0, 10, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(4, 6, 7, 0, 3, 8, 2, 0),
	gsSP2Triangles(2, 9, 0, 0, 5, 8, 3, 0),
	gsSP2Triangles(7, 5, 4, 0, 2, 1, 3, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x32, 0x96, 0xFF, 0xFF),
	gsDPSetEnvColor(0x00, 0x00, 0x64, 0xFF),
	gsSPTexture(qu016(0.0457764), qu016(0.0457764), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPSetGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000380, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x060003B0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
	gsSP2Triangles(0, 3, 4, 0, 1, 5, 2, 0),
	gsSP2Triangles(6, 2, 5, 0, 7, 5, 1, 0),
	gsSP2Triangles(8, 9, 10, 0, 9, 8, 11, 0),
	gsSP2Triangles(8, 12, 13, 0, 14, 9, 11, 0),
	gsSP2Triangles(12, 14, 11, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 4, 3, 0, 3, 17, 18, 0),
	gsSP2Triangles(19, 20, 21, 0, 22, 21, 20, 0),
	gsSP2Triangles(23, 22, 20, 0, 19, 23, 20, 0),
	gsSP2Triangles(22, 24, 21, 0, 24, 22, 25, 0),
	gsSP2Triangles(21, 26, 27, 0, 24, 25, 27, 0),
	gsSP2Triangles(28, 27, 25, 0, 29, 19, 27, 0),
	gsSP2Triangles(28, 25, 30, 0, 28, 30, 31, 0),
	gsSPVertex(0x060005B0, 6, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP1Triangle(2, 1, 3, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xC8, 0x00, 0x00, 0xFF),
	gsDPSetEnvColor(0x32, 0x00, 0x00, 0xFF),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsSPVertex(0x06000610, 27, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 1, 0),
	gsSP2Triangles(4, 2, 1, 0, 1, 0, 3, 0),
	gsSP2Triangles(5, 6, 7, 0, 2, 7, 6, 0),
	gsSP2Triangles(6, 5, 8, 0, 3, 8, 9, 0),
	gsSP2Triangles(8, 3, 0, 0, 7, 10, 5, 0),
	gsSP2Triangles(8, 0, 6, 0, 2, 6, 0, 0),
	gsSP2Triangles(7, 2, 4, 0, 11, 12, 13, 0),
	gsSP2Triangles(14, 15, 16, 0, 17, 11, 18, 0),
	gsSP2Triangles(19, 20, 14, 0, 18, 21, 22, 0),
	gsSP2Triangles(21, 18, 11, 0, 23, 22, 21, 0),
	gsSP2Triangles(24, 25, 19, 0, 20, 19, 25, 0),
	gsSP2Triangles(22, 26, 18, 0, 21, 13, 23, 0),
	gsSP2Triangles(13, 21, 11, 0, 17, 12, 11, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x82, 0x82, 0x96, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x060007C0, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 7, 0, 8, 2, 1, 0),
	gsSP2Triangles(5, 2, 3, 0, 7, 9, 3, 0),
	gsSP2Triangles(10, 11, 12, 0, 13, 14, 15, 0),
	gsSP2Triangles(16, 17, 15, 0, 11, 10, 18, 0),
	gsSP2Triangles(15, 10, 13, 0, 15, 14, 16, 0),
	gsSP2Triangles(19, 20, 21, 0, 22, 23, 24, 0),
	gsSP2Triangles(25, 26, 24, 0, 21, 27, 19, 0),
	gsSP2Triangles(24, 26, 22, 0, 24, 28, 25, 0),
	gsSPEndDisplayList(),
}

object_gi_bow_0960.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4085, 0x00190000),
	gsSP2Triangles(74, 1 /* INVALID */, 114 /* INVALID */, 0, 68, 0, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE90000),
	gsSPModifyVertex(34, 0x00E1, 0x007800FF),
	gsDPNoOpTag(0xFFE90000),
	gsSPModifyVertex(34, 0x00E1, 0x08B75EFF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x0A, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x0A, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING),
	gsSPVertex(0x06000000, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 1, 0),
	gsSP2Triangles(5, 6, 4, 0, 7, 8, 9, 0),
	gsSP2Triangles(10, 11, 12, 0, 9, 13, 7, 0),
	gsSP2Triangles(8, 7, 14, 0, 12, 14, 10, 0),
	gsSP2Triangles(15, 5, 3, 0, 16, 0, 17, 0),
	gsSP2Triangles(2, 17, 0, 0, 1, 0, 3, 0),
	gsSP2Triangles(4, 3, 5, 0, 14, 12, 8, 0),
	gsSP2Triangles(18, 3, 0, 0, 17, 19, 16, 0),
	gsSP2Triangles(0, 16, 18, 0, 3, 18, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 25, 0),
	gsSP2Triangles(24, 26, 27, 0, 28, 29, 22, 0),
	gsSP2Triangles(30, 31, 26, 0, 22, 21, 28, 0),
	gsSP2Triangles(24, 22, 29, 0, 26, 24, 30, 0),
	gsSPVertex(0x06000200, 14, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(4, 3, 6, 0, 0, 4, 7, 0),
	gsSP2Triangles(1, 0, 8, 0, 9, 10, 8, 0),
	gsSP2Triangles(4, 0, 11, 0, 5, 12, 3, 0),
	gsSP2Triangles(11, 5, 4, 0, 2, 13, 0, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xF0, 0xBE, 0x28, 0xFF),
	gsDPSetEnvColor(0x82, 0x50, 0x00, 0xFF),
	gsSPVertex(0x060002E0, 10, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(4, 6, 7, 0, 3, 8, 2, 0),
	gsSP2Triangles(2, 9, 0, 0, 5, 8, 3, 0),
	gsSP2Triangles(7, 5, 4, 0, 2, 1, 3, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x32, 0x96, 0xFF, 0xFF),
	gsDPSetEnvColor(0x00, 0x00, 0x64, 0xFF),
	gsSPTexture(qu016(0.0457764), qu016(0.0457764), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPSetGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000380, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x060003B0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
	gsSP2Triangles(0, 3, 4, 0, 1, 5, 2, 0),
	gsSP2Triangles(6, 2, 5, 0, 7, 5, 1, 0),
	gsSP2Triangles(8, 9, 10, 0, 9, 8, 11, 0),
	gsSP2Triangles(8, 12, 13, 0, 14, 9, 11, 0),
	gsSP2Triangles(12, 14, 11, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 4, 3, 0, 3, 17, 18, 0),
	gsSP2Triangles(19, 20, 21, 0, 22, 21, 20, 0),
	gsSP2Triangles(23, 22, 20, 0, 19, 23, 20, 0),
	gsSP2Triangles(22, 24, 21, 0, 24, 22, 25, 0),
	gsSP2Triangles(21, 26, 27, 0, 24, 25, 27, 0),
	gsSP2Triangles(28, 27, 25, 0, 29, 19, 27, 0),
	gsSP2Triangles(28, 25, 30, 0, 28, 30, 31, 0),
	gsSPVertex(0x060005B0, 6, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP1Triangle(2, 1, 3, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xC8, 0x00, 0x00, 0xFF),
	gsDPSetEnvColor(0x32, 0x00, 0x00, 0xFF),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsSPVertex(0x06000610, 27, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 1, 0),
	gsSP2Triangles(4, 2, 1, 0, 1, 0, 3, 0),
	gsSP2Triangles(5, 6, 7, 0, 2, 7, 6, 0),
	gsSP2Triangles(6, 5, 8, 0, 3, 8, 9, 0),
	gsSP2Triangles(8, 3, 0, 0, 7, 10, 5, 0),
	gsSP2Triangles(8, 0, 6, 0, 2, 6, 0, 0),
	gsSP2Triangles(7, 2, 4, 0, 11, 12, 13, 0),
	gsSP2Triangles(14, 15, 16, 0, 17, 11, 18, 0),
	gsSP2Triangles(19, 20, 14, 0, 18, 21, 22, 0),
	gsSP2Triangles(21, 18, 11, 0, 23, 22, 21, 0),
	gsSP2Triangles(24, 25, 19, 0, 20, 19, 25, 0),
	gsSP2Triangles(22, 26, 18, 0, 21, 13, 23, 0),
	gsSP2Triangles(13, 21, 11, 0, 17, 12, 11, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x82, 0x82, 0x96, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x060007C0, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 7, 0, 8, 2, 1, 0),
	gsSP2Triangles(5, 2, 3, 0, 7, 9, 3, 0),
	gsSP2Triangles(10, 11, 12, 0, 13, 14, 15, 0),
	gsSP2Triangles(16, 17, 15, 0, 11, 10, 18, 0),
	gsSP2Triangles(15, 10, 13, 0, 15, 14, 16, 0),
	gsSP2Triangles(19, 20, 21, 0, 22, 23, 24, 0),
	gsSP2Triangles(25, 26, 24, 0, 21, 27, 19, 0),
	gsSP2Triangles(24, 26, 22, 0, 24, 28, 25, 0),
	gsSPEndDisplayList(),
}

object_gi_bow_0970.txt
{
	gsDPNoOpTag(0xFFE90000),
	gsSPModifyVertex(34, 0x00E1, 0x007800FF),
	gsDPNoOpTag(0xFFE90000),
	gsSPModifyVertex(34, 0x00E1, 0x08B75EFF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x0A, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x0A, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING),
	gsSPVertex(0x06000000, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 1, 0),
	gsSP2Triangles(5, 6, 4, 0, 7, 8, 9, 0),
	gsSP2Triangles(10, 11, 12, 0, 9, 13, 7, 0),
	gsSP2Triangles(8, 7, 14, 0, 12, 14, 10, 0),
	gsSP2Triangles(15, 5, 3, 0, 16, 0, 17, 0),
	gsSP2Triangles(2, 17, 0, 0, 1, 0, 3, 0),
	gsSP2Triangles(4, 3, 5, 0, 14, 12, 8, 0),
	gsSP2Triangles(18, 3, 0, 0, 17, 19, 16, 0),
	gsSP2Triangles(0, 16, 18, 0, 3, 18, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 25, 0),
	gsSP2Triangles(24, 26, 27, 0, 28, 29, 22, 0),
	gsSP2Triangles(30, 31, 26, 0, 22, 21, 28, 0),
	gsSP2Triangles(24, 22, 29, 0, 26, 24, 30, 0),
	gsSPVertex(0x06000200, 14, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(4, 3, 6, 0, 0, 4, 7, 0),
	gsSP2Triangles(1, 0, 8, 0, 9, 10, 8, 0),
	gsSP2Triangles(4, 0, 11, 0, 5, 12, 3, 0),
	gsSP2Triangles(11, 5, 4, 0, 2, 13, 0, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xF0, 0xBE, 0x28, 0xFF),
	gsDPSetEnvColor(0x82, 0x50, 0x00, 0xFF),
	gsSPVertex(0x060002E0, 10, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(4, 6, 7, 0, 3, 8, 2, 0),
	gsSP2Triangles(2, 9, 0, 0, 5, 8, 3, 0),
	gsSP2Triangles(7, 5, 4, 0, 2, 1, 3, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x32, 0x96, 0xFF, 0xFF),
	gsDPSetEnvColor(0x00, 0x00, 0x64, 0xFF),
	gsSPTexture(qu016(0.0457764), qu016(0.0457764), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPSetGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000380, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x060003B0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
	gsSP2Triangles(0, 3, 4, 0, 1, 5, 2, 0),
	gsSP2Triangles(6, 2, 5, 0, 7, 5, 1, 0),
	gsSP2Triangles(8, 9, 10, 0, 9, 8, 11, 0),
	gsSP2Triangles(8, 12, 13, 0, 14, 9, 11, 0),
	gsSP2Triangles(12, 14, 11, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 4, 3, 0, 3, 17, 18, 0),
	gsSP2Triangles(19, 20, 21, 0, 22, 21, 20, 0),
	gsSP2Triangles(23, 22, 20, 0, 19, 23, 20, 0),
	gsSP2Triangles(22, 24, 21, 0, 24, 22, 25, 0),
	gsSP2Triangles(21, 26, 27, 0, 24, 25, 27, 0),
	gsSP2Triangles(28, 27, 25, 0, 29, 19, 27, 0),
	gsSP2Triangles(28, 25, 30, 0, 28, 30, 31, 0),
	gsSPVertex(0x060005B0, 6, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP1Triangle(2, 1, 3, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xC8, 0x00, 0x00, 0xFF),
	gsDPSetEnvColor(0x32, 0x00, 0x00, 0xFF),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsSPVertex(0x06000610, 27, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 1, 0),
	gsSP2Triangles(4, 2, 1, 0, 1, 0, 3, 0),
	gsSP2Triangles(5, 6, 7, 0, 2, 7, 6, 0),
	gsSP2Triangles(6, 5, 8, 0, 3, 8, 9, 0),
	gsSP2Triangles(8, 3, 0, 0, 7, 10, 5, 0),
	gsSP2Triangles(8, 0, 6, 0, 2, 6, 0, 0),
	gsSP2Triangles(7, 2, 4, 0, 11, 12, 13, 0),
	gsSP2Triangles(14, 15, 16, 0, 17, 11, 18, 0),
	gsSP2Triangles(19, 20, 14, 0, 18, 21, 22, 0),
	gsSP2Triangles(21, 18, 11, 0, 23, 22, 21, 0),
	gsSP2Triangles(24, 25, 19, 0, 20, 19, 25, 0),
	gsSP2Triangles(22, 26, 18, 0, 21, 13, 23, 0),
	gsSP2Triangles(13, 21, 11, 0, 17, 12, 11, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x82, 0x82, 0x96, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x060007C0, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 7, 0, 8, 2, 1, 0),
	gsSP2Triangles(5, 2, 3, 0, 7, 9, 3, 0),
	gsSP2Triangles(10, 11, 12, 0, 13, 14, 15, 0),
	gsSP2Triangles(16, 17, 15, 0, 11, 10, 18, 0),
	gsSP2Triangles(15, 10, 13, 0, 15, 14, 16, 0),
	gsSP2Triangles(19, 20, 21, 0, 22, 23, 24, 0),
	gsSP2Triangles(25, 26, 24, 0, 21, 27, 19, 0),
	gsSP2Triangles(24, 26, 22, 0, 24, 28, 25, 0),
	gsSPEndDisplayList(),
}

object_gi_brokensword_0670.txt
{
	gsDPNoOpTag(0x00030000),
	gsDPNoOpTag(0x000077FF),
	gsDPNoOpTag(0x00030000),
	gsDPNoOpTag(0x01FF77FF),
	gsDPNoOp(),
	gsSPVertex(0x2D2B66FF, 14, 8),
	gsDPNoOp(),
	gsSPCullDisplayList(512, 12543 /* INVALID */),
	gsDPNoOp(),
	gsSPVertex(0x342F61FF, 0, 0),
	gsDPNoOp(),
	gsSPCullDisplayList(512, 20479 /* INVALID */),
	gsDPNoOp(),
	gsSPVertex(0x342F9FFF, 0, 0),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(TEXEL0, PRIMITIVE, PRIM_LOD_FRAC, TEXEL0, 1, 1, PRIM_LOD_FRAC, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, qu08(0.5), 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x5A, 0x64, 0x64, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0457764), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 1, G_TX_NOLOD),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 27, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(14, 16, 15, 0, 17, 18, 19, 0),
	gsSP2Triangles(17, 20, 21, 0, 22, 4, 3, 0),
	gsSP2Triangles(22, 13, 4, 0, 20, 23, 24, 0),
	gsSP1Triangle(23, 25, 26, 0),
	gsDPPipeSync(),
	gsDPSetCycleType(G_CYC_1CYCLE),
	gsDPSetRenderMode(G_RM_AA_ZB_TEX_EDGE, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0x50, 0x3C, 0xBE, 0xFF),
	gsDPSetEnvColor(0x0A, 0x0A, 0x28, 0xFF),
	gsSPTexture(qu016(0.0915527), qu016(0.0915527), 0, G_TX_RENDERTILE, G_ON),
	gsSPVertex(0x060001E0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 4, 3, 0),
	gsSP2Triangles(4, 0, 5, 0, 10, 11, 12, 0),
	gsSP2Triangles(13, 14, 15, 0, 16, 9, 17, 0),
	gsSP2Triangles(16, 13, 15, 0, 18, 1, 0, 0),
	gsSP2Triangles(19, 13, 16, 0, 20, 5, 0, 0),
	gsSP2Triangles(2, 20, 0, 0, 16, 17, 19, 0),
	gsSP2Triangles(15, 14, 21, 0, 4, 9, 16, 0),
	gsSP2Triangles(8, 22, 23, 0, 22, 8, 7, 0),
	gsSP2Triangles(24, 25, 26, 0, 27, 28, 6, 0),
	gsSP2Triangles(11, 27, 12, 0, 12, 29, 26, 0),
	gsSP2Triangles(27, 8, 23, 0, 30, 27, 6, 0),
	gsSP2Triangles(29, 12, 27, 0, 11, 31, 27, 0),
	gsSPVertex(0x060003E0, 4, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 2, 0),
	gsDPPipeSync(),
	gsDPSetCycleType(G_CYC_2CYCLE),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(TEXEL0, PRIMITIVE, PRIM_LOD_FRAC, TEXEL0, 1, 1, PRIM_LOD_FRAC, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, qu08(0.5), 0xFF, 0xFF, 0xAA, 0xFF),
	gsDPSetEnvColor(0x96, 0x78, 0x00, 0xFF),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsSPVertex(0x06000420, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(4, 3, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(6, 10, 4, 0, 11, 9, 8, 0),
	gsSP2Triangles(2, 12, 0, 0, 13, 5, 4, 0),
	gsSP2Triangles(14, 15, 16, 0, 17, 18, 15, 0),
	gsSP2Triangles(14, 19, 18, 0, 14, 20, 19, 0),
	gsSP2Triangles(21, 22, 18, 0, 23, 24, 25, 0),
	gsSP2Triangles(26, 27, 16, 0, 22, 28, 15, 0),
	gsSP2Triangles(18, 19, 21, 0, 25, 20, 23, 0),
	gsSP2Triangles(16, 29, 26, 0, 15, 18, 22, 0),
	gsDPPipeSync(),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0xB4, 0xC8, 0xFF, 0xFF),
	gsDPSetEnvColor(0x00, 0x14, 0x32, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000600, 14, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(4, 3, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(2, 10, 0, 0, 11, 9, 8, 0),
	gsSP2Triangles(12, 5, 4, 0, 6, 13, 4, 0),
	gsSPEndDisplayList(),
}

object_gi_brokensword_0680.txt
{
	gsDPNoOpTag(0x00030000),
	gsDPNoOpTag(0x01FF77FF),
	gsDPNoOp(),
	gsSPVertex(0x2D2B66FF, 14, 8),
	gsDPNoOp(),
	gsSPCullDisplayList(512, 12543 /* INVALID */),
	gsDPNoOp(),
	gsSPVertex(0x342F61FF, 0, 0),
	gsDPNoOp(),
	gsSPCullDisplayList(512, 20479 /* INVALID */),
	gsDPNoOp(),
	gsSPVertex(0x342F9FFF, 0, 0),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(TEXEL0, PRIMITIVE, PRIM_LOD_FRAC, TEXEL0, 1, 1, PRIM_LOD_FRAC, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, qu08(0.5), 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x5A, 0x64, 0x64, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0457764), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 1, G_TX_NOLOD),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 27, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(14, 16, 15, 0, 17, 18, 19, 0),
	gsSP2Triangles(17, 20, 21, 0, 22, 4, 3, 0),
	gsSP2Triangles(22, 13, 4, 0, 20, 23, 24, 0),
	gsSP1Triangle(23, 25, 26, 0),
	gsDPPipeSync(),
	gsDPSetCycleType(G_CYC_1CYCLE),
	gsDPSetRenderMode(G_RM_AA_ZB_TEX_EDGE, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0x50, 0x3C, 0xBE, 0xFF),
	gsDPSetEnvColor(0x0A, 0x0A, 0x28, 0xFF),
	gsSPTexture(qu016(0.0915527), qu016(0.0915527), 0, G_TX_RENDERTILE, G_ON),
	gsSPVertex(0x060001E0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 4, 3, 0),
	gsSP2Triangles(4, 0, 5, 0, 10, 11, 12, 0),
	gsSP2Triangles(13, 14, 15, 0, 16, 9, 17, 0),
	gsSP2Triangles(16, 13, 15, 0, 18, 1, 0, 0),
	gsSP2Triangles(19, 13, 16, 0, 20, 5, 0, 0),
	gsSP2Triangles(2, 20, 0, 0, 16, 17, 19, 0),
	gsSP2Triangles(15, 14, 21, 0, 4, 9, 16, 0),
	gsSP2Triangles(8, 22, 23, 0, 22, 8, 7, 0),
	gsSP2Triangles(24, 25, 26, 0, 27, 28, 6, 0),
	gsSP2Triangles(11, 27, 12, 0, 12, 29, 26, 0),
	gsSP2Triangles(27, 8, 23, 0, 30, 27, 6, 0),
	gsSP2Triangles(29, 12, 27, 0, 11, 31, 27, 0),
	gsSPVertex(0x060003E0, 4, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 2, 0),
	gsDPPipeSync(),
	gsDPSetCycleType(G_CYC_2CYCLE),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(TEXEL0, PRIMITIVE, PRIM_LOD_FRAC, TEXEL0, 1, 1, PRIM_LOD_FRAC, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, qu08(0.5), 0xFF, 0xFF, 0xAA, 0xFF),
	gsDPSetEnvColor(0x96, 0x78, 0x00, 0xFF),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsSPVertex(0x06000420, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(4, 3, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(6, 10, 4, 0, 11, 9, 8, 0),
	gsSP2Triangles(2, 12, 0, 0, 13, 5, 4, 0),
	gsSP2Triangles(14, 15, 16, 0, 17, 18, 15, 0),
	gsSP2Triangles(14, 19, 18, 0, 14, 20, 19, 0),
	gsSP2Triangles(21, 22, 18, 0, 23, 24, 25, 0),
	gsSP2Triangles(26, 27, 16, 0, 22, 28, 15, 0),
	gsSP2Triangles(18, 19, 21, 0, 25, 20, 23, 0),
	gsSP2Triangles(16, 29, 26, 0, 15, 18, 22, 0),
	gsDPPipeSync(),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0xB4, 0xC8, 0xFF, 0xFF),
	gsDPSetEnvColor(0x00, 0x14, 0x32, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000600, 14, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(4, 3, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(2, 10, 0, 0, 11, 9, 8, 0),
	gsSP2Triangles(12, 5, 4, 0, 6, 13, 4, 0),
	gsSPEndDisplayList(),
}

object_gi_dekupouch_03C0.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_16b, 30, 0xFFF30000),
	gsSPCullDisplayList(599 /* INVALID */, 21631 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 20, 0xFFFF0000),
	gsSPCullDisplayList(623, 23679 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 9, 0xFFF60000),
	gsSPCullDisplayList(683, 19199 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 10, 0x00000000),
	gsBranchZ(702 /* INVALID */, 0.0341992, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 10, 0x00000000),
	gsDPNoOpTag(0x8F2600FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 9, 0x000A0000),
	gsDPNoOpTag(0xD9246BFF),
	gsDPNoOpTag(0x000A0000),
	gsSPVertex(0x27226CFF, 160, -106),
	gsDPNoOp(),
	gsSPModifyVertex(723 /* INVALID */, 0x0000, 0x732200FF),
	gsDPNoOpTag(0xFFF60000),
	gsSPModifyVertex(694, 0x0076, 0x272294FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFF10000),
	gsSPCullDisplayList(921 /* INVALID */, 18303 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4079, 0xFFF90000),
	gsSPCullDisplayList(873, 23551 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4079, 0xFFF90000),
	gsDPSetColorImage(6, G_IM_SIZ_8b, 1747, 0xA4EAB7FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4079, 0x00070000),
	gsDPNoOpTag(0xA9D746FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0x000F0000),
	gsDPNoOpTag(0xFEE474FF),
	gsDPNoOpTag(0x00070000),
	gsSPVertex(0x52D048FF, 208, -91),
	gsDPNoOpTag(0xFFF90000),
	gsSPModifyVertex(885, 0x0033, 0x59E4B6FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 30, 0x00000000),
	gsDPNoOpTag(0x93D002FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 20, 0xFFFF0000),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1247, 0xA1FAB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 30, 0xFFF30000),
	gsDPSetColorImage(G_IM_FMT_IA, G_IM_SIZ_16b, 1200, 0xDBB8A8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4068, 0xFFFC0000),
	gsDPSetColorImage(6, G_IM_SIZ_16b, 1891, 0xD297DEFF),
	gsDPNoOpTag(0xFFFC0000),
	gsSPModifyVertex(948 /* INVALID */, 0x0029, 0x2393DEFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4065, 0x00050000),
	gsDPNoOpTag(0xF9983AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4068, 0xFFFC0000),
	gsSPCullDisplayList(945, 28543 /* INVALID */),
	gsDPNoOpTag(0xFFF60000),
	gsDPSetDepthImage(0x272294FF),
	gsDPNoOpTag(0xFFFB0000),
	gsSPVertex(0x03F589FF, 223, -118),
	gsDPNoOpTag(0xFFFF0000),
	gsDPSetTextureImage(G_IM_FMT_YUV, G_IM_SIZ_16b, 3882, 0x5F01B7FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 9, 0xFFF60000),
	gsSP1Triangle(25 /* INVALID */, 1 /* INVALID */, 51 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 20, 0xFFFF0000),
	gsSP2Triangles(95 /* INVALID */, 127 /* INVALID */, 35, 0, 125, 92, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFFB0000),
	gsSPVertex(0x03F589FF, 223, -118),
	gsDPNoOpTag(0xFFF60000),
	gsDPSetDepthImage(0x272294FF),
	gsDPNoOpTag(0x00080000),
	gsSPVertex(0x0E4163FF, 208, -191),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0xDE0172FF, 224, -178),
	gsDPNoOpTag(0x00040000),
	gsSPVertex(0x510AA9FF, 80, -34),
	gsDPNoOpTag(0xFFFB0000),
	gsSPModifyVertex(729, 0x0021, 0x520BAAFF),
	gsDPNoOpTag(0x00040000),
	gsSPVertex(0x720BDDFF, 128, -112),
	gsDPNoOpTag(0x00050000),
	gsSPVertex(0xADBACDFF, 208, -176),
	gsDPNoOpTag(0xFFFE0000),
	gsSPModifyVertex(706, G_MWO_POINT_RGBA, 0x4AA205FF),
	gsDPNoOpTag(0xFFF90000),
	gsSPModifyVertex(710, 0x0042, 0xC49906FF),
	gsDPNoOpTag(0xFFFB0000),
	gsSPModifyVertex(682, 0x002E, 0x3C5D2DFF),
	gsDPNoOpTag(0xFFFC0000),
	gsSPModifyVertex(738 /* INVALID */, 0x001D, 0xA7B9DBFF),
	gsDPNoOpTag(0xFFFF0000),
	gsSPModifyVertex(722 /* INVALID */, 0x0007, 0x073A68FF),
	gsDPNoOpTag(0xFFF70000),
	gsSPModifyVertex(682, 0x0059, 0xF9168BFF),
	gsDPNoOpTag(0x00060000),
	gsSPVertex(0x99C7EEFF, 144, -85),
	gsDPNoOpTag(0xFFFD0000),
	gsSPModifyVertex(661 /* INVALID */, 0x0024, 0x9B35DDFF),
	gsDPNoOp(),
	gsSPVertex(0x5D4126FF, 240, -200),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 7, 0x00050000),
	gsDPNoOpTag(0xC45B32FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 10, 0xFFFC0000),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 1542, 0x901EE4FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4, 0x00020000),
	gsDPNoOpTag(0xC5ADC2FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 7, 0xFFFC0000),
	gsSPCullDisplayList(791 /* INVALID */, 25343 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 10, 0xFFFC0000),
	gsSPCullDisplayList(770 /* INVALID */, 29311 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 14, 0xFFF70000),
	gsSPCullDisplayList(743, 21759 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 20, 0xFFFC0000),
	gsSPCullDisplayList(689 /* INVALID */, 8831 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 17, 0xFFFA0000),
	gsSPCullDisplayList(715 /* INVALID */, 3455 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 16, 0xFFFE0000),
	gsSPCullDisplayList(706, 4095 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 7, 0xFFFC0000),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 1584, 0x33A6C5FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 10, 0x00000000),
	gsBranchZ(771 /* INVALID */, -0.0794852, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 12, 0xFFF90000),
	gsSPCullDisplayList(756, 255 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 15, 0xFFFC0000),
	gsSPCullDisplayList(737, 14079 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 20, 0xFFF80000),
	gsSPCullDisplayList(688, 20095 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4, 0x00040000),
	gsDPNoOpTag(0x6EF52EFF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 10, 0x00000000),
	gsDPNoOpTag(0x364551FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 20, 0xFFFD0000),
	gsSPCullDisplayList(661 /* INVALID */, 24319 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 20, 0xFFFC0000),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 1380, 0xB84244FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 20, 0x00000000),
	gsDPNoOpTag(0xB93A4DFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 20, 0xFFFD0000),
	gsDPSetColorImage(6, G_IM_SIZ_32b, 1324, 0x5237BDFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 16, 0xFFFE0000),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1413, 0xC89B1FFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 20, 0xFFFD0000),
	gsSPCullDisplayList(661 /* INVALID */, 24319 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 16, 0xFFFE0000),
	gsSPCullDisplayList(706, 4095 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 17, 0xFFFA0000),
	gsSPCullDisplayList(715 /* INVALID */, 3455 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 20, 0xFFF80000),
	gsSPCullDisplayList(688, 20095 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 20, 0xFFFC0000),
	gsSPCullDisplayList(689 /* INVALID */, 8831 /* INVALID */),
	gsDPNoOpTag(0x00040000),
	gsSPModifyVertex(757, 0x0008, 0xFF6BCAFF),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0xF46244FF, 0, 117),
	gsDPNoOpTag(0x00070000),
	gsSPVertex(0x663C10FF, 176, -57),
	gsDPNoOpTag(0x000B0000),
	gsSPVertex(0xB3FA5CFF, 0, 17),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0xF46244FF, 0, 117),
	gsDPNoOpTag(0x00060000),
	gsSPVertex(0x9C40F3FF, 240, -114),
	gsDPNoOpTag(0x00010000),
	gsSPModifyVertex(777 /* INVALID */, 0x001E, 0xD11694FF),
	gsDPNoOpTag(0x00040000),
	gsSPModifyVertex(757, 0x0008, 0xFF6BCAFF),
	gsDPNoOpTag(0x00070000),
	gsSPVertex(0x663C10FF, 176, -57),
	gsDPNoOpTag(0x00060000),
	gsSPModifyVertex(803, 0x0000, 0x429DF9FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 6, 0x00050000),
	gsSPCullDisplayList(738, 28799 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 7, 0x00050000),
	gsSPCullDisplayList(730, 27647 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4, 0x00020000),
	gsSPCullDisplayList(747 /* INVALID */, 17919 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4, 0x00040000),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1490, 0x641BC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 7, 0x00050000),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 1461, 0x0E6FD7FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 6, 0x000B0000),
	gsDPNoOpTag(0x534730FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4, 0x00040000),
	gsSPCullDisplayList(744 /* INVALID */, 25215 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4096, 0x00030000),
	gsSPCullDisplayList(772, 23295 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 6, 0x00050000),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 1477, 0x972FE0FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4096, 0x00030000),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1545, 0x26ABB5FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4095, 0x00090000),
	gsDPNoOpTag(0xBCB53FFF),
	gsDPNoOp(),
	gsSPCullDisplayList(96 /* INVALID */, 32767 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 30, 0x00000000),
	gsSPCullDisplayList(25 /* INVALID */, 31487 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 33, 0x000D0000),
	gsSPCullDisplayList(0, 24575 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 30, 0xFFF30000),
	gsSPModifyVertex(24, 0x0077, 0x116838FF),
	gsDPNoOpTag(0xFFF30000),
	gsSPVertex(0xDC623AFF, 0, 0),
	gsDPNoOp(),
	gsSP1Triangle(0, 0, 0, 0),
	gsDPNoOpTag(0x000D0000),
	gsBranchZ(19 /* INVALID */, 0.130648, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 9, 0xFFF60000),
	gsBranchZ(507 /* INVALID */, 0.0715265, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 20, 0xFFFF0000),
	gsSP2Triangles(53 /* INVALID */, 127 /* INVALID */, 25, 0, 124, 93, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFFB0000),
	gsSPModifyVertex(32719, G_MWO_POINT_XYSCREEN, 0x03F389FF),
	gsDPNoOpTag(0xFFF60000),
	gsDPSetDepthImage(0x341D98FF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPSetTextureImage(6, G_IM_SIZ_8b, 3833, 0x6000B9FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 9, 0x000A0000),
	gsSPVertex(0xCC2067FF, 32, 34),
	gsDPNoOpTag(0x00050000),
	gsSP2Triangles(17 /* INVALID */, 127 /* INVALID */, 91, 0, 122, 59 /* INVALID */, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 20, 0x00020000),
	gsDPSetDepthImage(0xA1FC49FF),
	gsDPNoOpTag(0x000A0000),
	gsSPModifyVertex(671 /* INVALID */, 0x00C9, 0x341C68FF),
	gsDPNoOpTag(0x00020000),
	gsSP1Triangle(86 /* INVALID */, 127 /* INVALID */, 89, 0),
	gsDPNoOpTag(0x00050000),
	gsDPSetDepthImage(0xFFF477FF),
	gsDPNoOpTag(0x000A0000),
	gsSPCullDisplayList(32739, 13951 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0x000F0000),
	gsSPVertex(0xFEE474FF, 144, -121),
	gsDPNoOpTag(0x00070000),
	gsSP1Triangle(19 /* INVALID */, 2, 23, 0),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 9, 0x000A0000),
	gsDPNoOpTag(0xD9246BFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4079, 0x00070000),
	gsDPSetDepthImage(0xA9D746FF),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xA0, 0x00, 0xFF),
	gsDPSetEnvColor(0x14, 0x14, 0x00, 0xFF),
	gsSPEndDisplayList(),
}

object_gi_egg_04B0.txt
{
	gsDPNoOpTag(0x001E0000),
	gsSPModifyVertex(512, 0x0059, 0x3EC9AAFF),
	gsDPNoOpTag(0x00220000),
	gsSPCullDisplayList(510 /* INVALID */, 9599 /* INVALID */),
	gsDPSetColorImage(6, G_IM_SIZ_16b, 4079, 0xFFFB0000),
	gsSPModifyVertex(0, 0x00AE, 0xBAC14AFF),
	gsDPNoOpTag(0x00200000),
	gsSPModifyVertex(509 /* INVALID */, 0x0059, 0xBAC14AFF),
	gsDPNoOpTag(0x001E0000),
	gsSPCullDisplayList(512, 1023 /* INVALID */),
	gsDPSetColorImage(6, G_IM_SIZ_16b, 4079, 0xFFFB0000),
	gsSPCullDisplayList(0, 1023 /* INVALID */),
	gsDPNoOpTag(0x00220000),
	gsSPCullDisplayList(510 /* INVALID */, 1023 /* INVALID */),
	gsDPNoOpTag(0x00200000),
	gsSPModifyVertex(509 /* INVALID */, 0x0059, 0x5CF44BFF),
	gsDPNoOpTag(0x001E0000),
	gsSPModifyVertex(512, 0x00AE, 0x5CF44BFF),
	gsDPNoOpTag(0x00220000),
	gsSPCullDisplayList(510 /* INVALID */, 9727 /* INVALID */),
	gsDPNoOpTag(0x00060000),
	gsSPModifyVertex(512, 0x0032, 0xC2C9ABFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4079, 0x00250000),
	gsSPModifyVertex(0, 0x0032, 0xC2C9ABFF),
	gsDPNoOpTag(0x00040000),
	gsSPModifyVertex(511 /* INVALID */, 0x0032, 0xC2C9ABFF),
	gsDPNoOpTag(0x00080000),
	gsSPVertex(0x30C159FF, 128, -1),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4079, 0x00250000),
	gsSPVertex(0x30C159FF, 128, -128),
	gsDPNoOpTag(0x00060000),
	gsSPVertex(0x30C159FF, 128, -128),
	gsDPNoOpTag(0x00040000),
	gsSPModifyVertex(511 /* INVALID */, 0x0032, 0x077701FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4079, 0x00250000),
	gsSPVertex(0x077701FF, 208, -208),
	gsDPNoOpTag(0x00080000),
	gsSPVertex(0x077701FF, 128, -1),
	gsDPNoOpTag(0x00060000),
	gsSPVertex(0x64F4C0FF, 208, -208),
	gsDPNoOpTag(0x00040000),
	gsSPModifyVertex(511 /* INVALID */, 0x0032, 0x64F4C0FF),
	gsDPNoOpTag(0x00080000),
	gsSPVertex(0x64F4C0FF, 128, -1),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4072, 0x000E0000),
	gsSPModifyVertex(509 /* INVALID */, 0x004C, 0x65C920FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4079, 0xFFD80000),
	gsSPModifyVertex(0, 0x004C, 0x65C920FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4076, 0x000F0000),
	gsSPModifyVertex(512, 0x004C, 0x65C920FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4076, 0x000D0000),
	gsSPModifyVertex(510 /* INVALID */, 0x00F7, 0xA4C1D4FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4079, 0xFFD80000),
	gsSPModifyVertex(0, 0x00A1, 0xA4C1D4FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4072, 0x000E0000),
	gsSPModifyVertex(509 /* INVALID */, 0x004C, 0xA4C1D4FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4076, 0x000F0000),
	gsSPModifyVertex(512, 0x00F7, 0xFA7704FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4079, 0xFFD80000),
	gsSPModifyVertex(0, 0x00F7, 0xFA7704FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4076, 0x000D0000),
	gsSPModifyVertex(510 /* INVALID */, 0x00F7, 0xFA7704FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4072, 0x000E0000),
	gsSPModifyVertex(509 /* INVALID */, 0x004C, 0xD5F46FFF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4076, 0x000F0000),
	gsSPModifyVertex(512, 0x00A1, 0xD5F46FFF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4076, 0x000D0000),
	gsSPModifyVertex(510 /* INVALID */, 0x00F7, 0xD5F46FFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4072, 0xFFE90000),
	gsSPCullDisplayList(512, 13695 /* INVALID */),
	gsDPNoOpTag(0xFFEC0000),
	gsSPCullDisplayList(0, 13695 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFEB0000),
	gsSPCullDisplayList(511 /* INVALID */, 13695 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFE70000),
	gsSPModifyVertex(511 /* INVALID */, 0x0059, 0x0DC19BFF),
	gsDPNoOpTag(0xFFEC0000),
	gsSPModifyVertex(0, 0x0059, 0x0DC19BFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4072, 0xFFE90000),
	gsSPModifyVertex(512, 0x0059, 0x0DC19BFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFEB0000),
	gsSPCullDisplayList(511 /* INVALID */, 32255 /* INVALID */),
	gsDPNoOpTag(0xFFEC0000),
	gsSPModifyVertex(0, 0x00AE, 0xFB77FBFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFE70000),
	gsSPModifyVertex(511 /* INVALID */, 0x0059, 0xFB77FBFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4072, 0xFFE90000),
	gsSPModifyVertex(512, 0x00AE, 0x89F4F9FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFEB0000),
	gsSPCullDisplayList(511 /* INVALID */, 31999 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFE70000),
	gsSPModifyVertex(511 /* INVALID */, 0x0059, 0x89F4F9FF),
	gsDPNoOpTag(0xFFE40000),
	gsSPModifyVertex(512, 0x0054, 0x9BC921FF),
	gsDPNoOpTag(0x001C0000),
	gsSPModifyVertex(0, 0x0054, 0x9BC921FF),
	gsDPNoOpTag(0xFFE40000),
	gsSPModifyVertex(511 /* INVALID */, 0x0054, 0x9BC921FF),
	gsDPNoOpTag(0xFFE30000),
	gsSPVertex(0x64C1EDFF, 144, -17),
	gsDPNoOpTag(0x001C0000),
	gsSPVertex(0x64C1EDFF, 144, -144),
	gsDPNoOpTag(0xFFE40000),
	gsSPVertex(0x64C1EDFF, 144, -144),
	gsDPNoOpTag(0xFFE40000),
	gsSPModifyVertex(511 /* INVALID */, 0x0054, 0x0377F9FF),
	gsDPNoOpTag(0x001C0000),
	gsSPVertex(0x0377F9FF, 240, -240),
	gsDPNoOpTag(0xFFE30000),
	gsSPVertex(0x0377F9FF, 144, -17),
	gsDPNoOpTag(0xFFE40000),
	gsSPVertex(0xE2F48DFF, 240, -240),
	gsDPNoOpTag(0xFFE40000),
	gsSPModifyVertex(511 /* INVALID */, 0x0054, 0xE2F48DFF),
	gsDPNoOpTag(0xFFE30000),
	gsSPVertex(0xE2F48DFF, 144, -17),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4074, 0x001B0000),
	gsSPModifyVertex(509 /* INVALID */, 0x0016, 0x1BC061FF),
	gsDPNoOpTag(0x00110000),
	gsSPModifyVertex(0, 0x0016, 0x1BC061FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4078, 0x001D0000),
	gsSPModifyVertex(512, 0x0016, 0x1BC061FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4078, 0x00190000),
	gsSPModifyVertex(510 /* INVALID */, 0x00C1, 0xF7CB95FF),
	gsDPNoOpTag(0x00110000),
	gsSPModifyVertex(0, 0x006B, 0xF7CB95FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4074, 0x001B0000),
	gsSPModifyVertex(509 /* INVALID */, 0x0016, 0xF7CB95FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4078, 0x001D0000),
	gsSPModifyVertex(512, 0x00C1, 0xF67708FF),
	gsDPNoOpTag(0x00110000),
	gsSPModifyVertex(0, 0x00C1, 0xF67708FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4078, 0x00190000),
	gsSPModifyVertex(510 /* INVALID */, 0x00C1, 0xF67708FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4074, 0x001B0000),
	gsSPModifyVertex(509 /* INVALID */, 0x0016, 0x8BEE13FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4078, 0x001D0000),
	gsSPModifyVertex(512, 0x006B, 0x8BEE13FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4078, 0x00190000),
	gsSPModifyVertex(510 /* INVALID */, 0x00C1, 0x8BEE13FF),
	gsDPNoOpTag(0xFFDA0000),
	gsSPModifyVertex(512, 0x003D, 0xAFC9BBFF),
	gsDPSetColorImage(6, G_IM_SIZ_32b, 4082, 0x00040000),
	gsSPModifyVertex(0, 0x003D, 0xAFC9BBFF),
	gsDPNoOpTag(0xFFD80000),
	gsSPModifyVertex(511 /* INVALID */, 0x003D, 0xAFC9BBFF),
	gsDPNoOpTag(0xFFDB0000),
	gsSPVertex(0x44C14BFF, 48, 79),
	gsDPSetColorImage(6, G_IM_SIZ_32b, 4082, 0x00040000),
	gsSPVertex(0x44C14BFF, 48, -48),
	gsDPNoOpTag(0xFFDA0000),
	gsSPVertex(0x44C14BFF, 48, -48),
	gsDPNoOpTag(0xFFD80000),
	gsSPModifyVertex(511 /* INVALID */, 0x003D, 0x0777FFFF),
	gsDPSetColorImage(6, G_IM_SIZ_32b, 4082, 0x00040000),
	gsSPVertex(0x0777FFFF, 128, -128),
	gsDPNoOpTag(0xFFDB0000),
	gsSPVertex(0x0777FFFF, 48, 79),
	gsDPNoOpTag(0xFFDA0000),
	gsSPVertex(0x52F4AAFF, 128, -128),
	gsDPNoOpTag(0xFFD80000),
	gsSPModifyVertex(511 /* INVALID */, 0x003D, 0x52F4AAFF),
	gsDPNoOpTag(0xFFDB0000),
	gsSPVertex(0x52F4AAFF, 48, 79),
	gsDPNoOpTag(0x00220000),
	gsSPModifyVertex(509 /* INVALID */, 0x0053, 0x68C502FF),
	gsDPNoOpTag(0xFFE90000),
	gsSPModifyVertex(0, 0x0053, 0x68C502FF),
	gsDPNoOpTag(0x00230000),
	gsSPModifyVertex(512, 0x0053, 0x68C502FF),
	gsDPNoOpTag(0x00220000),
	gsSPModifyVertex(510 /* INVALID */, 0x00FE, 0x9BC6E5FF),
	gsDPNoOpTag(0xFFE90000),
	gsSPModifyVertex(0, 0x00A9, 0x9BC6E5FF),
	gsDPNoOpTag(0x00220000),
	gsSPModifyVertex(509 /* INVALID */, 0x0053, 0x9BC6E5FF),
	gsDPNoOpTag(0x00230000),
	gsSPModifyVertex(512, 0x00FE, 0xFF7611FF),
	gsDPNoOpTag(0xFFE90000),
	gsSPModifyVertex(0, 0x00FE, 0xFF7611FF),
	gsDPNoOpTag(0x00220000),
	gsSPModifyVertex(510 /* INVALID */, 0x00FE, 0xFF7611FF),
	gsDPNoOpTag(0x00220000),
	gsSPModifyVertex(509 /* INVALID */, 0x0053, 0xEFE974FF),
	gsDPNoOpTag(0x00230000),
	gsSPModifyVertex(512, 0x00A9, 0xEFE974FF),
	gsDPNoOpTag(0x00220000),
	gsSPModifyVertex(510 /* INVALID */, 0x00FE, 0xEFE974FF),
	gsDPNoOpTag(0xFFFA0000),
	gsSPCullDisplayList(509 /* INVALID */, 20351 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4085, 0xFFE10000),
	gsSPCullDisplayList(0, 20351 /* INVALID */),
	gsDPNoOpTag(0xFFF80000),
	gsSPModifyVertex(510 /* INVALID */, 0x0057, 0x22C59EFF),
	gsDPNoOpTag(0xFFFC0000),
	gsSPCullDisplayList(512, 11391 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4085, 0xFFE10000),
	gsSPCullDisplayList(0, 11391 /* INVALID */),
	gsDPNoOpTag(0xFFFA0000),
	gsSPCullDisplayList(509 /* INVALID */, 11391 /* INVALID */),
	gsDPNoOpTag(0xFFF80000),
	gsSPModifyVertex(510 /* INVALID */, 0x0057, 0x0F7607FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4085, 0xFFE10000),
	gsSPModifyVertex(0, 0x0057, 0x0F7607FF),
	gsDPNoOpTag(0xFFFC0000),
	gsSPModifyVertex(512, 0x0057, 0x0F7607FF),
	gsDPNoOpTag(0xFFFA0000),
	gsSPCullDisplayList(509 /* INVALID */, 6783 /* INVALID */),
	gsDPNoOpTag(0xFFF80000),
	gsSPModifyVertex(510 /* INVALID */, 0x0057, 0x69E934FF),
	gsDPNoOpTag(0xFFFC0000),
	gsSPCullDisplayList(512, 6783 /* INVALID */),
	gsDPSetColorImage(6, G_IM_SIZ_32b, 4075, 0xFFEE0000),
	gsSPModifyVertex(512, 0x0063, 0xA9C235FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4082, 0x00220000),
	gsSPModifyVertex(0, 0x0063, 0xA9C235FF),
	gsDPSetColorImage(6, G_IM_SIZ_32b, 4079, 0xFFEF0000),
	gsSPModifyVertex(511 /* INVALID */, 0x0063, 0xA9C235FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4079, 0xFFED0000),
	gsSPVertex(0x60C7D5FF, 128, -1),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4082, 0x00220000),
	gsSPVertex(0x60C7D5FF, 128, -128),
	gsDPSetColorImage(6, G_IM_SIZ_32b, 4075, 0xFFEE0000),
	gsSPVertex(0x60C7D5FF, 128, -128),
	gsDPSetColorImage(6, G_IM_SIZ_32b, 4079, 0xFFEF0000),
	gsSPModifyVertex(511 /* INVALID */, 0x0063, 0xFB77FDFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4082, 0x00220000),
	gsSPModifyVertex(0, 0x000D, 0xFB77FDFF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4079, 0xFFED0000),
	gsSPVertex(0xFB77FDFF, 128, -1),
	gsDPSetColorImage(6, G_IM_SIZ_32b, 4075, 0xFFEE0000),
	gsSPModifyVertex(512, 0x000D, 0xC9F597FF),
	gsDPSetColorImage(6, G_IM_SIZ_32b, 4079, 0xFFEF0000),
	gsSPModifyVertex(511 /* INVALID */, 0x0063, 0xC9F597FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4079, 0xFFED0000),
	gsSPVertex(0xC9F597FF, 128, -1),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4072, 0xFFEB0000),
	gsSPModifyVertex(512, 0x004A, 0x98C9EDFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4077, 0x00110000),
	gsSPModifyVertex(0, 0x004A, 0x98C9EDFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4075, 0xFFEB0000),
	gsSPModifyVertex(511 /* INVALID */, 0x004A, 0x98C9EDFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4075, 0xFFEC0000),
	gsSPVertex(0x60C120FF, 0, 127),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4077, 0x00110000),
	gsSPVertex(0x60C120FF, 0, 0),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4072, 0xFFEB0000),
	gsSPVertex(0x60C120FF, 0, 0),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4075, 0xFFEB0000),
	gsSPModifyVertex(511 /* INVALID */, 0x004A, 0x0677FCFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4077, 0x00110000),
	gsSPVertex(0x0677FCFF, 80, -80),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4075, 0xFFEC0000),
	gsSPVertex(0x0677FCFF, 0, 127),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4072, 0xFFEB0000),
	gsSPVertex(0x1DF48DFF, 80, -80),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4075, 0xFFEB0000),
	gsSPModifyVertex(511 /* INVALID */, 0x004A, 0x1DF48DFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4075, 0xFFEC0000),
	gsSPVertex(0x1DF48DFF, 0, 127),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4072, 0x00040000),
	gsSPModifyVertex(512, 0x006D, 0xCDC95DFF),
	gsDPNoOpTag(0x00190000),
	gsSPModifyVertex(0, 0x006D, 0xCDC95DFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4075, 0x00060000),
	gsSPModifyVertex(511 /* INVALID */, 0x006D, 0xCDC95DFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4075, 0x00030000),
	gsSPVertex(0x3CC1AEFF, 32, 95),
	gsDPNoOpTag(0x00190000),
	gsSPVertex(0x3CC1AEFF, 32, -32),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4072, 0x00040000),
	gsSPVertex(0x3CC1AEFF, 32, -32),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4075, 0x00060000),
	gsSPModifyVertex(511 /* INVALID */, 0x006D, 0xFE77F9FF),
	gsDPNoOpTag(0x00190000),
	gsSPModifyVertex(0, G_MWO_POINT_XYSCREEN, 0xFE77F9FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4075, 0x00030000),
	gsSPVertex(0xFE77F9FF, 32, 95),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4072, 0x00040000),
	gsSPModifyVertex(512, G_MWO_POINT_XYSCREEN, 0x9BF4C1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4075, 0x00060000),
	gsSPModifyVertex(511 /* INVALID */, 0x006D, 0x9BF4C1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4075, 0x00030000),
	gsSPVertex(0x9BF4C1FF, 32, 95),
	gsDPNoOpTag(0x000A0000),
	gsSPModifyVertex(509 /* INVALID */, 0x0052, 0x60C9D2FF),
	gsDPNoOpTag(0xFFE60000),
	gsSPModifyVertex(0, 0x0052, 0x60C9D2FF),
	gsDPNoOpTag(0x00090000),
	gsSPModifyVertex(512, 0x0052, 0x60C9D2FF),
	gsDPNoOpTag(0x000A0000),
	gsSPModifyVertex(510 /* INVALID */, 0x00FD, 0x9FC11FFF),
	gsDPNoOpTag(0xFFE60000),
	gsSPModifyVertex(0, 0x00A8, 0x9FC11FFF),
	gsDPNoOpTag(0x000A0000),
	gsSPModifyVertex(509 /* INVALID */, 0x0052, 0x9FC11FFF),
	gsDPNoOpTag(0x00090000),
	gsSPModifyVertex(512, 0x00FD, 0xFE7707FF),
	gsDPNoOpTag(0xFFE60000),
	gsSPModifyVertex(0, 0x00FD, 0xFE7707FF),
	gsDPNoOpTag(0x000A0000),
	gsSPModifyVertex(510 /* INVALID */, 0x00FD, 0xFE7707FF),
	gsDPNoOpTag(0x000A0000),
	gsSPModifyVertex(509 /* INVALID */, 0x0052, 0x2CF46EFF),
	gsDPNoOpTag(0x00090000),
	gsSPModifyVertex(512, 0x00A8, 0x2CF46EFF),
	gsDPNoOpTag(0x000A0000),
	gsSPModifyVertex(510 /* INVALID */, 0x00FD, 0x2CF46EFF),
	gsDPNoOpTag(0xFFEF0000),
	gsSPModifyVertex(509 /* INVALID */, 0x00FA, 0xF2C997FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4077, 0xFFF20000),
	gsSPModifyVertex(0, 0x00A4, 0xF2C997FF),
	gsDPNoOpTag(0xFFED0000),
	gsSPModifyVertex(510 /* INVALID */, 0x004F, 0xF2C997FF),
	gsDPNoOpTag(0xFFF00000),
	gsSPModifyVertex(512, 0x00FA, 0x00C165FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4077, 0xFFF20000),
	gsSPModifyVertex(0, 0x00FA, 0x00C165FF),
	gsDPNoOpTag(0xFFEF0000),
	gsSPModifyVertex(509 /* INVALID */, 0x00FA, 0x00C165FF),
	gsDPNoOpTag(0xFFED0000),
	gsSPModifyVertex(510 /* INVALID */, 0x004F, 0x067704FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4077, 0xFFF20000),
	gsSPModifyVertex(0, 0x004F, 0x067704FF),
	gsDPNoOpTag(0xFFF00000),
	gsSPModifyVertex(512, 0x004F, 0x067704FF),
	gsDPNoOpTag(0xFFEF0000),
	gsSPModifyVertex(509 /* INVALID */, 0x00FA, 0x77F4F8FF),
	gsDPNoOpTag(0xFFED0000),
	gsSPModifyVertex(510 /* INVALID */, 0x004F, 0x77F4F8FF),
	gsDPNoOpTag(0xFFF00000),
	gsSPModifyVertex(512, 0x00A4, 0x77F4F8FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4072, 0x00170000),
	gsSPModifyVertex(509 /* INVALID */, 0x0046, 0x49C94DFF),
	gsDPNoOpTag(0xFFFE0000),
	gsSPModifyVertex(0, 0x0046, 0x49C94DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4075, 0x00180000),
	gsSPModifyVertex(512, 0x0046, 0x49C94DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4075, 0x00160000),
	gsSPModifyVertex(510 /* INVALID */, 0x00F1, 0xC5C1AEFF),
	gsDPNoOpTag(0xFFFE0000),
	gsSPModifyVertex(0, 0x009C, 0xC5C1AEFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4072, 0x00170000),
	gsSPModifyVertex(509 /* INVALID */, 0x0046, 0xC5C1AEFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4075, 0x00180000),
	gsSPModifyVertex(512, 0x00F1, 0xF97700FF),
	gsDPNoOpTag(0xFFFE0000),
	gsSPModifyVertex(0, 0x00F1, 0xF97700FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4075, 0x00160000),
	gsSPModifyVertex(510 /* INVALID */, 0x00F1, 0xF97700FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4072, 0x00170000),
	gsSPModifyVertex(509 /* INVALID */, 0x0046, 0xA5F44CFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4075, 0x00180000),
	gsSPModifyVertex(512, 0x009C, 0xA5F44CFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4075, 0x00160000),
	gsSPModifyVertex(510 /* INVALID */, 0x00F1, 0xA5F44CFF),
	gsDPPipeSync(),
	gsDPSetCycleType(G_CYC_1CYCLE),
	gsDPSetRenderMode(G_RM_AA_ZB_TEX_EDGE, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x50, 0x50, 0x28, 0xFF),
	gsSPEndDisplayList(),
}

object_gi_fire_03C0.txt
{
	(Gfx){0x6F6C6C6C, 0x7393C1D7},
	(Gfx){0xC6A9917F, 0x7A889281},
	(Gfx){0x6C6C6D70, 0x7A98C1D1},
	(Gfx){0xC0A59281, 0x7A808376},
	(Gfx){0x6C6E767F, 0x8BA5C4CE},
	(Gfx){0xBDA69788, 0x7E797670},
	(Gfx){0x6D76889A, 0xA7B6C8CC},
	(Gfx){0xBDAA9F94, 0x8477706C},
	gsDPNoOpTag(0xFFFE0000),
	gsSPModifyVertex(814 /* INVALID */, 0x0013, 0xE9DC91FF),
	gsDPNoOp(),
	gsSPModifyVertex(820 /* INVALID */, 0x0000, 0x91DA18FF),
	gsDPNoOp(),
	gsSPModifyVertex(670, 0x0000, 0x94CE02FF),
	gsDPNoOpTag(0xFFFE0000),
	gsSPModifyVertex(674 /* INVALID */, 0x0013, 0x07F389FF),
	gsDPNoOp(),
	gsSPModifyVertex(670, 0x0000, 0x94CE02FF),
	gsDPNoOp(),
	gsSPModifyVertex(613, 0x0000, 0x449E00FF),
	gsDPNoOpTag(0xFFFE0000),
	gsSPModifyVertex(594, 0x0027, 0x08148AFF),
	gsDPNoOpTag(0xFFFE0000),
	gsSPModifyVertex(603 /* INVALID */, 0x001F, 0x10138BFF),
	gsDPNoOp(),
	gsSPModifyVertex(860 /* INVALID */, 0x0000, 0x6ED200FF),
	gsDPNoOpTag(0xFFFE0000),
	gsSPModifyVertex(861 /* INVALID */, 0x001E, 0xF8ED8AFF),
	gsDPNoOp(),
	gsSPModifyVertex(960, 0x0000, 0xEF8A00FF),
	gsDPNoOpTag(0xFFFE0000),
	gsSPModifyVertex(936, 0x0034, 0xE2038CFF),
	gsDPNoOp(),
	gsSPModifyVertex(1017, 0x0000, 0xF58DE0FF),
	gsDPNoOp(),
	gsSPModifyVertex(820 /* INVALID */, 0x0000, 0x91DA18FF),
	gsDPNoOpTag(0x00020000),
	gsSPVertex(0x18DE70FF, 208, -162),
	gsDPNoOpTag(0x00020000),
	gsSPVertex(0xFA0D77FF, 208, -174),
	gsDPNoOpTag(0x00020000),
	gsSPVertex(0xE90375FF, 16, 75),
	gsDPNoOp(),
	gsSPModifyVertex(911, 0x0000, 0x216FE4FF),
	gsDPNoOp(),
	gsSPModifyVertex(865 /* INVALID */, 0x0000, 0x902902FF),
	gsDPNoOpTag(0x00020000),
	gsSPVertex(0xE8FD75FF, 144, -62),
	gsDPNoOpTag(0x00020000),
	gsSPVertex(0x061176FF, 32, 61),
	gsDPNoOpTag(0x00020000),
	gsSPVertex(0x1CFD74FF, 192, -152),
	gsDPNoOpTag(0x00020000),
	gsSPVertex(0x38B045FF, 240, -199),
	gsDPNoOp(),
	gsSPModifyVertex(810 /* INVALID */, 0x0000, 0x70E0E8FF),
	gsDPNoOp(),
	gsSPModifyVertex(676 /* INVALID */, 0x0000, 0x6D3100FF),
	gsDPNoOp(),
	gsSPModifyVertex(594, 0x0000, 0x077701FF),
	gsDPNoOp(),
	gsSPModifyVertex(571, 0x0000, 0x923000FF),
	gsDPNoOp(),
	gsSPModifyVertex(911, 0x0000, 0xC83A58FF),
	gsDPNoOp(),
	gsSPModifyVertex(898 /* INVALID */, 0x0000, 0x74EB15FF),
	gsDPNoOpTag(0xFFFE0000),
	gsSPModifyVertex(814 /* INVALID */, 0x0013, 0xE9DC91FF),
	gsDPNoOpTag(0xFFFE0000),
	gsSPModifyVertex(937, 0x0091, 0x58CFBFFF),
	gsDPNoOp(),
	gsSPModifyVertex(834, 0x0000, 0x008900FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4085, 0x00000000),
	gsDPNoOpTag(0x277100FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4089, 0xFFF70000),
	gsDPSetColorImage(6, G_IM_SIZ_4b, 1526, 0x247015FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4089, 0x00090000),
	gsDPNoOpTag(0x2470EBFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4085, 0x00030000),
	gsDPNoOpTag(0x1471DEFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4089, 0x00090000),
	gsDPNoOpTag(0x2470EBFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4089, 0x00110000),
	gsDPNoOpTag(0x0070D7FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4085, 0x00030000),
	gsDPNoOpTag(0xEC71DEFF),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0xDC70EBFF, 32, 84),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4085, 0x00000000),
	gsDPNoOpTag(0xD97100FF),
	gsDPNoOpTag(0xFFF70000),
	gsDPSetDepthImage(0xDC7015FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4085, 0xFFFD0000),
	gsSPCullDisplayList(856 /* INVALID */, 4479 /* INVALID */),
	gsDPNoOpTag(0xFFF70000),
	gsSPModifyVertex(756, 0x008E, 0xDC7015FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4089, 0xFFEF0000),
	gsSPCullDisplayList(761, 5375 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4085, 0xFFFD0000),
	gsSPCullDisplayList(829, 4479 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4089, 0xFFF70000),
	gsSPCullDisplayList(762 /* INVALID */, 2815 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4078, 0xFFFC0000),
	gsDPSetColorImage(5, G_IM_SIZ_32b, 1836, 0x00B8A0FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4070, 0xFFFC0000),
	gsDPSetColorImage(5, G_IM_SIZ_16b, 1906, 0x00459FFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4078, 0x00000000),
	gsDPNoOpTag(0x95CB00FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4070, 0x00040000),
	gsDPNoOpTag(0x004561FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4078, 0x00040000),
	gsDPNoOpTag(0x00B860FF),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0x4CA81CFF, 32, 84),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4089, 0x00110000),
	gsDPNoOpTag(0x00A64EFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4078, 0x00000000),
	gsDPNoOpTag(0x65C000FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4078, 0x00000000),
	gsBranchZ(973 /* INVALID */, -0.0408791, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4070, 0xFFFC0000),
	gsSPCullDisplayList(952 /* INVALID */, 20479 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4078, 0xFFFC0000),
	gsSPCullDisplayList(917 /* INVALID */, 20607 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4089, 0x00090000),
	gsDPNoOpTag(0xC0A72FFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4089, 0xFFF70000),
	gsDPSetColorImage(6, G_IM_SIZ_4b, 1526, 0xC0A7D1FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4089, 0xFFEF0000),
	gsSPCullDisplayList(761, 22911 /* INVALID */),
	gsDPNoOpTag(0xFFF70000),
	gsSPModifyVertex(756, 0x008E, 0x4CA8E4FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4089, 0xFFF70000),
	gsSPCullDisplayList(762 /* INVALID */, 26879 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4070, 0x00000000),
	gsDPNoOpTag(0xB55D00FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4066, 0xFFF50000),
	gsSPCullDisplayList(913 /* INVALID */, 127 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4066, 0xFFF50000),
	gsSPCullDisplayList(948, 127 /* INVALID */),
	gsDPNoOp(),
	gsSPModifyVertex(985 /* INVALID */, 0x0000, 0x008800FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4070, 0x00000000),
	gsDPNoOpTag(0x4B5D00FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4078, 0x00000000),
	gsDPNoOpTag(0x65C000FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4070, 0x00040000),
	gsDPNoOpTag(0x004561FF),
	gsDPNoOp(),
	gsSPModifyVertex(985 /* INVALID */, 0x0000, 0x008800FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4066, 0x000B0000),
	gsDPNoOpTag(0x008800FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4066, 0xFFF50000),
	gsDPSetColorImage(G_IM_FMT_I, G_IM_SIZ_16b, 1828, 0x008800FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4070, 0xFFFC0000),
	gsDPSetColorImage(5, G_IM_SIZ_16b, 1906, 0x00459FFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4070, 0xFFFC0000),
	gsSPCullDisplayList(952 /* INVALID */, 20479 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4066, 0xFFF50000),
	gsSPCullDisplayList(948, 27903 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4066, 0xFFF50000),
	gsSPCullDisplayList(913 /* INVALID */, 27903 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4070, 0x00000000),
	gsDPNoOpTag(0xB55D00FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4066, 0xFFF50000),
	gsDPSetColorImage(G_IM_FMT_I, G_IM_SIZ_16b, 1828, 0xE46DD9FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4066, 0x00000000),
	gsDPNoOpTag(0xD16E00FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4066, 0x000B0000),
	gsDPNoOpTag(0xE46D27FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4066, 0x000B0000),
	gsDPNoOpTag(0x1C6D27FF),
	gsDPNoOp(),
	gsSPModifyVertex(985 /* INVALID */, 0x0000, 0x2F6E00FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4066, 0xFFF50000),
	gsDPSetColorImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1897, 0x1C6DD9FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4089, 0x00090000),
	gsDPNoOpTag(0x2470EBFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4085, 0x00030000),
	gsDPNoOpTag(0x1471DEFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4085, 0x00000000),
	gsDPNoOpTag(0x277100FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4089, 0x00110000),
	gsDPNoOpTag(0x0070D7FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4085, 0x00030000),
	gsDPNoOpTag(0xEC71DEFF),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0xDC70EBFF, 32, 84),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4085, 0x00000000),
	gsDPNoOpTag(0xD97100FF),
	gsDPNoOpTag(0xFFF70000),
	gsDPSetDepthImage(0xDC7015FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4085, 0xFFFD0000),
	gsDPSetColorImage(5, G_IM_SIZ_8b, 1714, 0xEC7122FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4089, 0xFFEF0000),
	gsSPCullDisplayList(761, 5375 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4085, 0xFFFD0000),
	gsSPCullDisplayList(829, 4479 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4085, 0xFFFD0000),
	gsSPCullDisplayList(856 /* INVALID */, 4479 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4089, 0xFFF70000),
	gsSPCullDisplayList(762 /* INVALID */, 2815 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4085, 0x00000000),
	gsBranchZ(822 /* INVALID */, -0.11274, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4066, 0x00000000),
	gsDPNoOpTag(0x008800FF),
	gsDPNoOp(),
	gsSPModifyVertex(985 /* INVALID */, 0x0000, 0x008800FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4066, 0x000B0000),
	gsDPNoOpTag(0x008800FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4066, 0x000B0000),
	gsDPNoOpTag(0x008800FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4066, 0xFFF50000),
	gsDPSetColorImage(G_IM_FMT_RGBA, G_IM_SIZ_16b, 1897, 0x1C6DD9FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4070, 0xFFFC0000),
	gsDPSetColorImage(5, G_IM_SIZ_16b, 1906, 0x00459FFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4070, 0x00000000),
	gsDPNoOpTag(0x4B5D00FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4078, 0x00000000),
	gsDPNoOpTag(0x95CB00FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4089, 0x00090000),
	gsDPNoOpTag(0xC0A72FFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4089, 0xFFF70000),
	gsDPSetColorImage(6, G_IM_SIZ_4b, 1526, 0xC0A7D1FF),
	gsDPNoOpTag(0x00020000),
	gsSPVertex(0x38B045FF, 240, -199),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0x4CA81CFF, 32, 84),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4078, 0x00000000),
	gsDPNoOpTag(0x65C000FF),
	gsDPNoOp(),
	gsSPModifyVertex(1017, 0x0000, 0xF58DE0FF),
	gsDPNoOpTag(0xFFFE0000),
	gsSPModifyVertex(937, 0x0091, 0x58CFBFFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4078, 0x00000000),
	gsBranchZ(973 /* INVALID */, -0.0408791, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0xFFF70000),
	gsSPModifyVertex(756, 0x008E, 0x4CA8E4FF),
	gsDPNoOp(),
	gsSPModifyVertex(898 /* INVALID */, 0x0000, 0x74EB15FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 7, 0x00040000),
	gsSPVertex(0x005950FF, 0, 66),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 7, 0x00020000),
	gsSPVertex(0x612A38FF, 160, -94),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 7, 0xFFFE0000),
	gsSPModifyVertex(578, 0x0055, 0x4559D8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4085, 0x00030000),
	gsDPNoOpTag(0xC4FF67FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 7, 0x00020000),
	gsDPNoOpTag(0x9F2A38FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4085, 0x00000000),
	gsDPNoOpTag(0x89FF00FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 7, 0xFFFE0000),
	gsDPSetColorImage(5, G_IM_SIZ_8b, 1157, 0xBB59D8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4085, 0xFFFD0000),
	gsSPCullDisplayList(958, 19583 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 7, 0xFFFE0000),
	gsSPCullDisplayList(578, 27775 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 7, 0xFFFC0000),
	gsSPCullDisplayList(578, 18559 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4085, 0xFFFD0000),
	gsSPModifyVertex(958, 0x00AA, 0x3CFF99FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4085, 0x00000000),
	gsSPModifyVertex(958, 0x0000, 0x77FF00FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4085, 0x00030000),
	gsSPVertex(0x3CFF68FF, 80, -18),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4085, 0x00000000),
	gsBranchZ(958 /* INVALID */, 0.0327549, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 43, 0x00000000),
	gsDPNoOpTag(0x000078FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0x00000000),
	gsDPNoOpTag(0x000078FF),
	gsDPNoOp(),
	gsSPModifyVertex(512, 0x0000, 0x000078FF),
	gsDPNoOp(),
	gsSPModifyVertex(0, 0x0000, 0x000078FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0xFF, 0x96, 0x00, 0xFF),
	gsDPSetEnvColor(0x3C, 0x28, 0x00, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0457764), qu016(0.0457764), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 1, 1),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000400, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000430, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 2, 0),
	gsSP2Triangles(3, 2, 5, 0, 6, 5, 7, 0),
	gsSP2Triangles(8, 7, 9, 0, 10, 11, 12, 0),
	gsSP2Triangles(1, 12, 13, 0, 8, 14, 15, 0),
	gsSP2Triangles(2, 16, 17, 0, 5, 17, 18, 0),
	gsSP2Triangles(7, 18, 19, 0, 11, 20, 21, 0),
	gsSP2Triangles(12, 21, 22, 0, 13, 22, 23, 0),
	gsSP2Triangles(16, 23, 15, 0, 17, 15, 24, 0),
	gsSP2Triangles(18, 14, 25, 0, 20, 26, 0, 0),
	gsSP2Triangles(21, 0, 4, 0, 22, 4, 3, 0),
	gsSP2Triangles(23, 3, 6, 0, 15, 6, 8, 0),
	gsSP2Triangles(14, 8, 27, 0, 1, 0, 26, 0),
	gsSP2Triangles(2, 4, 0, 0, 27, 25, 14, 0),
	gsSP2Triangles(5, 6, 3, 0, 7, 8, 6, 0),
	gsSP2Triangles(9, 27, 8, 0, 12, 1, 10, 0),
	gsSP2Triangles(13, 2, 1, 0, 13, 16, 2, 0),
	gsSP2Triangles(17, 5, 2, 0, 18, 7, 5, 0),
	gsSP2Triangles(19, 9, 7, 0, 21, 12, 11, 0),
	gsSP2Triangles(22, 13, 12, 0, 23, 16, 13, 0),
	gsSP2Triangles(15, 17, 16, 0, 14, 18, 17, 0),
	gsSP2Triangles(25, 19, 18, 0, 0, 21, 20, 0),
	gsSP2Triangles(4, 22, 21, 0, 3, 23, 22, 0),
	gsSP2Triangles(6, 15, 23, 0, 20, 11, 28, 0),
	gsSP2Triangles(28, 26, 20, 0, 10, 26, 28, 0),
	gsSP2Triangles(11, 10, 28, 0, 29, 30, 31, 0),
	gsSPVertex(0x06000630, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(5, 4, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(10, 9, 11, 0, 12, 13, 14, 0),
	gsSP2Triangles(14, 15, 16, 0, 16, 17, 18, 0),
	gsSP2Triangles(16, 15, 19, 0, 20, 21, 22, 0),
	gsSP2Triangles(16, 18, 23, 0, 24, 12, 14, 0),
	gsSP2Triangles(23, 14, 16, 0, 22, 25, 26, 0),
	gsSP2Triangles(17, 16, 19, 0, 26, 20, 22, 0),
	gsSP2Triangles(22, 27, 25, 0, 28, 14, 13, 0),
	gsSP2Triangles(29, 30, 31, 0, 15, 14, 28, 0),
	gsSPVertex(0x06000830, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 1, 0, 0, 7, 8, 9, 0),
	gsSP2Triangles(10, 11, 12, 0, 10, 12, 13, 0),
	gsSP2Triangles(2, 13, 14, 0, 0, 14, 15, 0),
	gsSP2Triangles(0, 15, 16, 0, 17, 18, 19, 0),
	gsSP2Triangles(20, 21, 18, 0, 22, 23, 21, 0),
	gsSP2Triangles(24, 25, 23, 0, 26, 27, 28, 0),
	gsSP2Triangles(29, 30, 27, 0, 11, 10, 6, 0),
	gsSP2Triangles(4, 31, 5, 0, 13, 2, 10, 0),
	gsSP1Triangle(14, 0, 2, 0),
	gsSPVertex(0x06000A30, 17, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
	gsSP2Triangles(12, 9, 11, 0, 13, 12, 14, 0),
	gsSP2Triangles(13, 14, 15, 0, 13, 15, 16, 0),
	gsSP2Triangles(10, 9, 16, 0, 10, 16, 15, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x82, 0x96, 0xC8, 0xFF),
	gsSPVertex(0x06000B40, 14, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(5, 4, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(10, 9, 2, 0, 11, 2, 1, 0),
	gsSP2Triangles(12, 1, 0, 0, 2, 6, 0, 0),
	gsSP2Triangles(6, 4, 0, 0, 2, 9, 8, 0),
	gsSP2Triangles(4, 5, 3, 0, 8, 7, 13, 0),
	gsSP2Triangles(9, 10, 7, 0, 2, 11, 10, 0),
	gsSP2Triangles(1, 12, 11, 0, 0, 3, 12, 0),
	gsSPEndDisplayList(),
}

object_gi_gerudo_0F00.txt
{
	gsDPNoOp(),
	gsSPModifyVertex(9 /* INVALID */, 0x009B, 0xB6E85BFF),
	gsDPNoOpTag(0xFFFF0000),
	gsBranchZ(0, 0.0487058, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0xFFFD0000),
	gsBranchZ(512 /* INVALID */, 0.0457989, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0x00040000),
	gsSPModifyVertex(3, 0x00FC, 0xB4FB5CFF),
	gsDPNoOpTag(0x00040000),
	gsBranchZ(0, 0.0505719, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0xFFFF0000),
	gsBranchZ(512 /* INVALID */, 0.0487058, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0xBE, 0x6E, 0x28, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x00, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x06000000, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING),
	gsSPVertex(0x06000400, 31, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 1, 0),
	gsSP2Triangles(4, 3, 1, 0, 1, 5, 4, 0),
	gsSP2Triangles(6, 7, 8, 0, 7, 9, 8, 0),
	gsSP2Triangles(10, 5, 11, 0, 11, 12, 10, 0),
	gsSP2Triangles(11, 2, 12, 0, 2, 11, 0, 0),
	gsSP2Triangles(13, 14, 3, 0, 4, 13, 3, 0),
	gsSP2Triangles(12, 15, 16, 0, 16, 10, 12, 0),
	gsSP2Triangles(16, 7, 6, 0, 10, 16, 6, 0),
	gsSP2Triangles(6, 5, 10, 0, 17, 5, 6, 0),
	gsSP2Triangles(18, 4, 5, 0, 17, 18, 5, 0),
	gsSP2Triangles(18, 13, 4, 0, 18, 19, 13, 0),
	gsSP2Triangles(20, 21, 19, 0, 18, 20, 19, 0),
	gsSP2Triangles(18, 22, 20, 0, 22, 23, 20, 0),
	gsSP2Triangles(18, 24, 22, 0, 24, 25, 22, 0),
	gsSP2Triangles(17, 24, 18, 0, 26, 24, 17, 0),
	gsSP2Triangles(27, 24, 26, 0, 17, 6, 26, 0),
	gsSP2Triangles(6, 28, 26, 0, 28, 29, 26, 0),
	gsSP2Triangles(8, 30, 28, 0, 28, 6, 8, 0),
	gsDPPipeSync(),
	gsDPSetCycleType(G_CYC_1CYCLE),
	gsDPSetRenderMode(G_RM_AA_ZB_TEX_EDGE, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0x6E, 0x46, 0x00, 0xFF),
	gsDPSetEnvColor(0x14, 0x00, 0x00, 0xFF),
	gsDPLoadTextureBlock(0x04033090, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPVertex(0x060005F0, 31, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 0, 3, 0),
	gsSP2Triangles(1, 3, 4, 0, 4, 5, 1, 0),
	gsSP2Triangles(6, 7, 8, 0, 6, 9, 7, 0),
	gsSP2Triangles(10, 5, 11, 0, 11, 12, 10, 0),
	gsSP2Triangles(12, 0, 10, 0, 2, 10, 0, 0),
	gsSP2Triangles(3, 13, 14, 0, 3, 14, 4, 0),
	gsSP2Triangles(15, 16, 12, 0, 12, 11, 15, 0),
	gsSP2Triangles(8, 7, 15, 0, 8, 15, 11, 0),
	gsSP2Triangles(11, 5, 8, 0, 8, 5, 17, 0),
	gsSP2Triangles(5, 4, 18, 0, 5, 18, 17, 0),
	gsSP2Triangles(4, 14, 18, 0, 14, 19, 18, 0),
	gsSP2Triangles(19, 20, 21, 0, 19, 21, 18, 0),
	gsSP2Triangles(21, 22, 18, 0, 21, 23, 22, 0),
	gsSP2Triangles(22, 24, 18, 0, 22, 25, 24, 0),
	gsSP2Triangles(18, 24, 17, 0, 17, 24, 26, 0),
	gsSP2Triangles(26, 24, 27, 0, 26, 8, 17, 0),
	gsSP2Triangles(26, 28, 8, 0, 26, 29, 28, 0),
	gsSP2Triangles(28, 30, 6, 0, 6, 8, 28, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x28, 0x28, 0x28, 0xFF),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPSetGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x060007E0, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000810, 25, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 1, 0, 9, 0),
	gsSP2Triangles(10, 9, 11, 0, 12, 13, 14, 0),
	gsSP2Triangles(15, 16, 0, 0, 5, 17, 18, 0),
	gsSP2Triangles(4, 19, 20, 0, 8, 20, 21, 0),
	gsSP2Triangles(7, 22, 17, 0, 9, 23, 1, 0),
	gsSP2Triangles(14, 24, 12, 0, 20, 8, 4, 0),
	gsSP1Triangle(17, 5, 7, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x3C, 0x1E, 0x00, 0xFF),
	gsDPSetEnvColor(0x1E, 0x00, 0x00, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x060009A0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
	gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
	gsSP2Triangles(18, 19, 20, 0, 21, 22, 23, 0),
	gsSP2Triangles(24, 25, 26, 0, 27, 28, 29, 0),
	gsSP1Triangle(16, 30, 31, 0),
	gsSPVertex(0x06000BA0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
	gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
	gsSP2Triangles(18, 19, 20, 0, 21, 22, 23, 0),
	gsSP2Triangles(24, 25, 26, 0, 27, 28, 29, 0),
	gsSP1Triangle(16, 15, 30, 0),
	gsSPVertex(0x06000D90, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
	gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
	gsSP2Triangles(18, 19, 20, 0, 21, 6, 22, 0),
	gsSP2Triangles(23, 24, 25, 0, 26, 27, 28, 0),
	gsSPEndDisplayList(),
}

object_gi_gerudomask_03C0.txt
{
	gsSPCullDisplayList(1335, 1410),
	gsSPCullDisplayList(1667, 3469 /* INVALID */),
	gsSP2Triangles(67 /* INVALID */, 97 /* INVALID */, 55, 0, 5 /* INVALID */, 1 /* INVALID */, 1 /* INVALID */, 0),
	(Gfx){0x0C0D0206, 0x1B1B1B06},
	(Gfx){0x0C0B4F5C, 0x0B0B0606},
	(Gfx){0x0C02021D, 0x1B1B0202},
	(Gfx){0x0C875C0C, 0x06030C06},
	gsSPCullDisplayList(257, 257),
	gsSPCullDisplayList(782 /* INVALID */, 259),
	gsBranchZ(262 /* INVALID */, -0.441327, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsSP2Triangles(1 /* INVALID */, 1, 1, 0, 1, 1, 3, 0),
	gsBranchZ(1670 /* INVALID */, -0.441307, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsSP2Triangles(6, 1, 6 /* INVALID */, 0, 1, 1, 1 /* INVALID */, 0),
	gsBranchZ(769 /* INVALID */, -0.441307, 1, 1023, G_BZ_PERSP, 0, 1023),
	(Gfx){0x0C1D0202, 0x1D0C0604},
	gsBranchZ(385 /* INVALID */, 4.21184, 1, 1023, G_BZ_PERSP, 0, 1023),
	(Gfx){0x0C060303, 0x03030304},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x004C8A8A),
	(Gfx){0x8A010000, 0x00000000},
	gsDPNoOp(),
	gsDPNoOpTag(0x000000AC),
	(Gfx){0x461C98B8, 0x7D336A6A},
	(Gfx){0x33336901, 0x01000000},
	gsDPNoOp(),
	gsDPNoOpTag(0xB31CB66A),
	(Gfx){0x606051B5, 0x5D473143},
	(Gfx){0x5D5968C8, 0x98BA0000},
	gsDPNoOpTag(0x0000004C),
	(Gfx){0x53CA357D, 0x6A60515D},
	(Gfx){0x43192020, 0x20202020},
	(Gfx){0x20201943, 0x594D0000},
	gsDPNoOpTag(0x00004C13),
	(Gfx){0x7D7DB859, 0x5D3119A5},
	(Gfx){0xADAE1616, 0x16169C9C},
	(Gfx){0x161616AD, 0xAD4D0000},
	gsDPNoOpTag(0x00697D33),
	(Gfx){0x6A512142, 0xAEAEF8B4},
	(Gfx){0x74CFEBEB, 0xEBCF742F},
	(Gfx){0x2F2F2F2F, 0x6D070000},
	gsDPNoOpTag(0x7D3360B5),
	(Gfx){0x47A5A549, 0x8F4571C2},
	(Gfx){0x3C1E1E1E, 0x1E84EB37},
	gsSP1Quadrangle(23 /* INVALID */, 23 /* INVALID */, 0 /* INVALID */, 0, 0),
	gsDPNoOpTag(0x7D514319),
	(Gfx){0x2049A02C, 0xAA651E15},
	(Gfx){0x10101010, 0x1515F4F1},
	gsMoveWd(180, 0xDF6D, 0x00000000),
	gsDPNoOpTag(0x513108AD),
	(Gfx){0xADF22C71, 0x3C15102B},
	(Gfx){0xD0D05858, 0x1515903C},
	gsDPSetConvert(59, 219, -192, 0, 0, 0),
	gsDPNoOpTag(0x2020AB16),
	(Gfx){0x162CAA1E, 0x15582B3F},
	(Gfx){0x3F3F2B10, 0x1010101E},
	(Gfx){0x84370705, 0x05000000},
	gsDPNoOpTag(0xFDAB2A2A),
	(Gfx){0x8FFB651E, 0x1058D03F},
	(Gfx){0x3F3FD058, 0x10159015},
	(Gfx){0x84370707, 0x07BD0500},
	gsDPNoOpTag(0x162A2A18),
	(Gfx){0xA2FC3D15, 0x102BD0D0},
	(Gfx){0x2B2B151E, 0x3C653CC2},
	(Gfx){0x44C6BD70, 0x70070000},
	gsDPNoOpTag(0x2A187318),
	(Gfx){0x443C151E, 0x101089F6},
	gsDPSetFillColor(0x32BF9B9B),
	(Gfx){0x9B14BEBE, 0x07000000},
	gsDPNoOpTag(0x28181811),
	(Gfx){0xC23D3D7E, 0xC291F997},
	(Gfx){0x8D381F1F, 0x2D2D2D2D},
	(Gfx){0x2D2D2DA3, 0x05000000},
	gsDPNoOpTag(0x282818A2),
	(Gfx){0x7E3D3D54, 0x75323838},
	(Gfx){0xB98D9494, 0x8DAF9772},
	(Gfx){0x72722DCC, 0x00000000},
	gsDPNoOpTag(0x112818EB),
	(Gfx){0x7E3DF36B, 0x1F388199},
	(Gfx){0x6B6BDDDD, 0xBFED320A},
	(Gfx){0xC07FB928, 0x00000000},
	gsDPNoOpTag(0x11641171),
	(Gfx){0x65C29938, 0x8140C5CB},
	(Gfx){0xC1B78E61, 0xE77932E4},
	(Gfx){0xC786A705, 0x00000000},
	gsDPNoOpTag(0x1111C9F0),
	gsDPSetColorImage(G_IM_FMT_IA, G_IM_SIZ_8b, 2434, 0x40245BE2),
	(Gfx){0xA6618E8E, 0xB7407904},
	(Gfx){0x83C7D705, 0x00000000},
	gsDPNoOpTag(0x1111C9F5),
	(Gfx){0x7532AF40, 0x5724CD1F},
	(Gfx){0xCDDC61D3, 0xDE3B3B06},
	(Gfx){0x4A837A6C, 0x00000000},
	gsDPNoOpTag(0x1111E091),
	(Gfx){0x9B3279BC, 0x48391F1F},
	(Gfx){0x1FA0D9C1, 0xC55B6B02},
	(Gfx){0x09831105, 0x00000000},
	gsDPNoOpTag(0x11114495),
	(Gfx){0x1A40EA78, 0x30C59F1F},
	(Gfx){0x9F306F30, 0x245B394A},
	(Gfx){0x09C70705, 0x00000000},
	gsDPNoOpTag(0x11EF751A),
	gsSPSetOtherModeHi(-147, 88, G_AD_NOISE | G_CD_MAGICSQ | G_CK_NONE | 0x00000800 | G_TF_POINT | 0x00004000 | G_TL_TILE | G_TD_CLAMP | G_TP_NONE | G_CYC_FILL | G_PM_NPRIMITIVE | 0x30000004),
	(Gfx){0x488B9A6F, 0x245BB077},
	(Gfx){0x4A631100, 0x00000000},
	gsDPNoOpTag(0x112A99D2),
	gsTexRectFlip(qu102(557.25), qu102(341.25), qu102(139.25), qu102(521), G_TX_RENDERTILE),
	(Gfx){0x55556F30, 0x5B390609},
	(Gfx){0x83DA0700, 0x00000000},
	gsDPNoOpTag(0x07FA99E6),
	(Gfx){0x63922644, 0xC5309A8B},
	(Gfx){0x6F30C539, 0xA6D17709},
	(Gfx){0x867F0500, 0x00000000},
	gsDPNoOpTag(0x0570A7B2),
	(Gfx){0x0B0909E1, 0x44242457},
	(Gfx){0x2439BC2C, 0xCE4A7709},
	(Gfx){0x63B10000, 0x00000000},
	gsDPNoOpTag(0x07A3FDD7),
	gsDPSetPrimDepth(-11856, -14682),
	(Gfx){0xA6D5C406, 0x4A4A0986},
	(Gfx){0xC0070000, 0x00000000},
	gsDPNoOpTag(0x00077328),
	(Gfx){0x2AB22203, 0x09090909},
	(Gfx){0x09090909, 0x090988C4},
	(Gfx){0x6C050000, 0x00000000},
	gsDPNoOpTag(0x00050500),
	gsDPNoOpTag(0xE9E4CE92),
	(Gfx){0x09090902, 0x87D4076C},
	gsSP1Triangle(0, 0, 0, 0),
	gsDPNoOp(),
	gsDPNoOpTag(0x0507282A),
	(Gfx){0x28281107, 0x6C050505},
	gsSP1Triangle(0, 0, 0, 0),
	gsDPNoOp(),
	gsDPNoOpTag(0x05050505),
	gsSP1Triangle(2 /* INVALID */, 2 /* INVALID */, 2 /* INVALID */, 0),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x00030000),
	gsSPVertex(0x00FB89FF, 0, 59),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 34, 0xFFEB0000),
	gsDPNoOpTag(0x11C699FF),
	gsDPNoOpTag(0xFFEB0000),
	gsDPNoOpTag(0xEFC699FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 19, 0xFFEF0000),
	gsDPNoOpTag(0x3DED9BFF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 3, 0xFFEA0000),
	gsDPNoOpTag(0x500AA8FF),
	gsDPNoOpTag(0x00030000),
	gsDPNoOpTag(0x00FB89FF),
	gsDPNoOpTag(0xFFEF0000),
	gsDPNoOpTag(0xC3ED9BFF),
	gsDPNoOpTag(0xFFEA0000),
	gsDPNoOpTag(0xAF09A8FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4087, 0xFFEB0000),
	gsDPNoOpTag(0x4F08A7FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4070, 0xFFF10000),
	gsDPNoOpTag(0x4816A3FF),
	gsDPNoOpTag(0xFFFA0000),
	gsSPVertex(0x00238EFF, 0, 69),
	gsDPNoOpTag(0xFFF10000),
	gsDPNoOpTag(0xB816A3FF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x00238EFF),
	gsDPNoOpTag(0xFFEB0000),
	gsDPNoOpTag(0xB108A7FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0x000A0000),
	gsDPNoOpTag(0xE0DE6EFF),
	gsDPNoOpTag(0x000A0000),
	gsDPNoOpTag(0x1FB95BFF),
	gsDPNoOpTag(0x00080000),
	gsDPNoOpTag(0x3DF266FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0x00080000),
	gsDPNoOpTag(0xBAE65DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0x00080000),
	gsDPSetColorImage(6, G_IM_SIZ_8b, 183, 0xBAE65DFF),
	gsDPNoOpTag(0x00080000),
	gsSPVertex(0x3DF266FF, 176, -85),
	gsDPNoOpTag(0x00160000),
	gsDPNoOpTag(0x9AD22AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 26, 0x00070000),
	(Gfx){0x1C6B013B, 0x10663CFF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 7, 0x000D0000),
	(Gfx){0x1B9601D1, 0x50D2B3FF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 25, 0xFFF90000),
	(Gfx){0x1A7500C1, 0x42ABCCFF},
	gsDPSetColorImage(7, G_IM_SIZ_8b, 14, 0x00000000),
	(Gfx){0x18CD0139, 0x3DB1BEFF},
	gsDPNoOpTag(0x00070000),
	(Gfx){0x1E000139, 0xD73F5DFF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 34, 0xFFF90000),
	(Gfx){0x1D2A0094, 0xE86D2AFF},
	gsDPNoOp(),
	(Gfx){0x1E0000FD, 0xD79214FF},
	gsDPNoOpTag(0xFFF90000),
	(Gfx){0x218300C1, 0xDC92E4FF},
	gsDPNoOpTag(0x00070000),
	(Gfx){0x1E000139, 0xDC92E4FF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 26, 0x00070000),
	(Gfx){0x1C6B013B, 0xF78A0DFF},
	gsDPNoOp(),
	(Gfx){0x1E0000FD, 0x454A3FFF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 34, 0xFFEB0000),
	(Gfx){0x1AED0017, 0xC76812FF},
	gsDPSetColorImage(7, G_IM_SIZ_8b, 28, 0xFFFE0000),
	(Gfx){0x1A7900E0, 0xA53836FF},
	gsDPNoOpTag(0xFFEB0000),
	(Gfx){0x210B0017, 0x396812FF},
	gsDPNoOpTag(0xFFFE0000),
	(Gfx){0x1FE800C3, 0x3E5637FF},
	gsDPNoOpTag(0xFFEB0000),
	gsSPCullDisplayList(11 /* INVALID */, 2431 /* INVALID */),
	gsDPNoOpTag(0xFFFE0000),
	gsSPVertex(0x3E5637FF, 128, -31),
	gsDPNoOpTag(0xFFF90000),
	gsSPCullDisplayList(96 /* INVALID */, 4479 /* INVALID */),
	gsDPNoOpTag(0xFFEF0000),
	gsSP2Triangles(33, 0, 66, 0, 47 /* INVALID */, 0, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFEA0000),
	(Gfx){0x090700A9, 0xA408B4FF},
	gsDPNoOpTag(0xFFEB0000),
	gsSP1Quadrangle(60 /* INVALID */, 0, 73 /* INVALID */, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 19, 0xFFEF0000),
	(Gfx){0x17BC0084, 0xAB54FCFF},
	gsDPSetColorImage(7, G_IM_SIZ_4b, 3, 0xFFEA0000),
	(Gfx){0x14FC00A9, 0xCDDD9AFF},
	gsDPSetColorImage(6, G_IM_SIZ_32b, 10, 0xFFEB0000),
	(Gfx){0x161F0087, 0x211D91FF},
	gsDPSetColorImage(7, G_IM_SIZ_8b, 21, 0xFFF40000),
	(Gfx){0x18AC00A4, 0x943207FF},
	gsDPSetColorImage(7, G_IM_SIZ_8b, 14, 0x00000000),
	(Gfx){0x18CD0139, 0x99113AFF},
	gsDPSetColorImage(7, G_IM_SIZ_8b, 21, 0xFFF40000),
	(Gfx){0x18AC00A4, 0x51B5D4FF},
	gsDPNoOpTag(0xFFEB0000),
	gsSP1Quadrangle(60 /* INVALID */, 0, 27 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFFC0000),
	gsSP1Quadrangle(52 /* INVALID */, 0 /* INVALID */, 27 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFEA0000),
	(Gfx){0x090700A9, 0x66C616FF},
	gsDPNoOpTag(0xFFFC0000),
	gsSP1Quadrangle(52 /* INVALID */, 0 /* INVALID */, 118 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFF00000),
	gsSPLineW3D(1 /* INVALID */, 0, 203, 0),
	gsDPNoOpTag(0xFFEF0000),
	gsSP2Triangles(33, 0, 66, 0, 125 /* INVALID */, 119, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFF00000),
	gsSPLineW3D(1 /* INVALID */, 0, 203, 0),
	gsDPNoOpTag(0xFFFC0000),
	gsSP1Quadrangle(52 /* INVALID */, 0 /* INVALID */, 118 /* INVALID */, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFFB0000),
	(Gfx){0x14EE016E, 0x92E828FF},
	gsDPSetColorImage(7, G_IM_SIZ_4b, 19, 0xFFEF0000),
	(Gfx){0x17BC0084, 0xAB54FCFF},
	gsDPSetColorImage(6, G_IM_SIZ_32b, 10, 0xFFEB0000),
	(Gfx){0x161F0087, 0x92E828FF},
	gsDPSetColorImage(7, G_IM_SIZ_4b, 3, 0xFFEA0000),
	(Gfx){0x14FC00A9, 0xCDDD9AFF},
	gsDPSetColorImage(7, G_IM_SIZ_4b, 3, 0xFFEA0000),
	(Gfx){0x14FC00A9, 0x71EDDDFF},
	gsDPSetColorImage(7, G_IM_SIZ_4b, 7, 0xFFF00000),
	(Gfx){0x15F900CB, 0x75F9E9FF},
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFFB0000),
	(Gfx){0x14EE016E, 0x75F9E9FF},
	gsDPSetColorImage(7, G_IM_SIZ_4b, 19, 0xFFEF0000),
	(Gfx){0x17BC0084, 0x7705F7FF},
	gsDPNoOpTag(0x00070000),
	(Gfx){0x1E000139, 0xD73F5DFF},
	gsDPNoOpTag(0x000C0000),
	(Gfx){0x224101CA, 0x522C4BFF},
	gsDPNoOpTag(0xFFFE0000),
	(Gfx){0x1FE800C3, 0x3E5637FF},
	gsDPSetColorImage(7, G_IM_SIZ_8b, 14, 0x00000000),
	(Gfx){0x18CD0139, 0x99113AFF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 7, 0x000D0000),
	(Gfx){0x1B9601D1, 0xBB155FFF},
	gsDPSetColorImage(7, G_IM_SIZ_8b, 28, 0xFFFE0000),
	(Gfx){0x1A7900E0, 0xA53836FF},
	gsDPNoOpTag(0xFFFE0000),
	gsSPVertex(0x3E5637FF, 128, -31),
	gsDPNoOpTag(0x000C0000),
	gsBranchZ(229 /* INVALID */, -0.051116, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0xFFF90000),
	gsSPCullDisplayList(96 /* INVALID */, 4479 /* INVALID */),
	gsDPNoOpTag(0x000C0000),
	(Gfx){0x224101CA, 0xB8C2B7FF},
	gsDPNoOpTag(0x00070000),
	(Gfx){0x1E000139, 0xDC92E4FF},
	gsDPNoOpTag(0xFFF90000),
	(Gfx){0x218300C1, 0xDC92E4FF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 26, 0x00070000),
	(Gfx){0x1C6B013B, 0x10663CFF},
	gsDPNoOpTag(0x000A0000),
	gsSPVertex(0x1FB95BFF, 64, -37),
	gsDPNoOpTag(0x00040000),
	gsSPVertex(0x17C465FF, 0, 40),
	gsDPNoOpTag(0xFFFF0000),
	gsSPVertex(0x51C441FF, 208, -171),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0x000A0000),
	gsSPVertex(0xE0DE6EFF, 64, -37),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4073, 0x00040000),
	gsSPVertex(0xE9B056FF, 0, 40),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4078, 0xFFFF0000),
	gsSPVertex(0xAFC441FF, 208, -171),
	gsDPNoOpTag(0x00040000),
	gsSPModifyVertex(113 /* INVALID */, 0x0015, 0x17C465FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4073, 0x00040000),
	gsSPModifyVertex(113 /* INVALID */, 0x0015, 0xE9B056FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4069, 0x00040000),
	gsSPVertex(0xE4C161FF, 192, -130),
	gsDPNoOpTag(0x00040000),
	gsSPVertex(0x23B657FF, 192, -130),
	gsDPNoOpTag(0xFFFF0000),
	gsSPVertex(0x51C441FF, 240, -125),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4078, 0xFFFF0000),
	gsSPVertex(0xAFC441FF, 240, -125),
	gsDPNoOpTag(0xFFFE0000),
	gsBranchZ(194 /* INVALID */, -0.0458965, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0xFFF90000),
	gsSPCullDisplayList(32560 /* INVALID */, 10879 /* INVALID */),
	gsDPNoOpTag(0x000E0000),
	gsDPSetDepthImage(0x002870FF),
	gsDPNoOpTag(0x00080000),
	gsSPModifyVertex(31658, 0x00AD, 0x3DF266FF),
	gsDPNoOp(),
	gsSPLineW3D(14 /* INVALID */, 123, 88, 0),
	gsDPNoOpTag(0x00070000),
	gsSPModifyVertex(31135, 0x00DD, 0x540354FF),
	gsDPNoOpTag(0x00070000),
	gsDPNoOpTag(0x540354FF),
	gsDPNoOp(),
	gsSPCullDisplayList(660, 9343 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 19, 0xFFEF0000),
	gsDPLoadTile(1, qu102(611.5), qu102(522.5), qu102(80.5), qu102(575.75)),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 10, 0xFFFE0000),
	gsDPFillRectangle(77, 575, 359, 763),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 21, 0xFFF40000),
	gsDPFillRectangle(196, 639, 55, 462),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4090, 0x00070000),
	gsDPSetTextureImage(G_IM_FMT_RGBA, G_IM_SIZ_8b, 831, 0xAC0355FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4083, 0x00000000),
	gsDPSetFillColor(0xA1F347FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0x00080000),
	gsDPSetTextureImage(G_IM_FMT_YUV, G_IM_SIZ_32b, 1877, 0xBAE65DFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4078, 0xFFFF0000),
	gsDPSetFogColor(0xAF, 0xC4, 0x41, 0xFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0x000A0000),
	gsDPSetDepthImage(0xE0DE6EFF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x118C18FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4069, 0x00040000),
	gsDPSetDepthImage(0xE4C161FF),
	gsDPNoOpTag(0x000E0000),
	gsDPNoOpTag(0x002870FF),
	gsDPNoOp(),
	gsDPNoOpTag(0x004363FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 25, 0xFFF90000),
	gsDPSetBlendColor(0xC5, 0x3B, 0x56, 0xFF),
	gsDPNoOpTag(0x00160000),
	gsDPNoOpTag(0x9AD22AFF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 7, 0xFFF00000),
	gsDPLoadTile(G_TX_LOADTILE, qu102(903.5), qu102(854.5), qu102(992.5), qu102(447.75)),
	gsDPNoOpTag(0xFFF90000),
	gsSP2Triangles(112 /* INVALID */, 114 /* INVALID */, 56 /* INVALID */, 0, 29 /* INVALID */, 42, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFFE0000),
	(Gfx){0x0990EBEC, 0x5B104BFF},
	gsDPNoOpTag(0xFFEF0000),
	(Gfx){0x0B51E82A, 0x69202EFF},
	gsDPNoOpTag(0xFFF00000),
	(Gfx){0x0B79ED5A, 0x71F925FF},
	gsDPNoOpTag(0x00160000),
	gsDPNoOpTag(0x680B39FF),
	gsDPNoOpTag(0xFFFF0000),
	gsSP1Quadrangle(104 /* INVALID */, 124, 32 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x00040000),
	gsSPVertex(0x23B657FF, 159, -75),
	gsDPNoOpTag(0x000A0000),
	gsSPVertex(0x1FB95BFF, 191, -149),
	gsDPNoOpTag(0xFFEA0000),
	(Gfx){0x0C24EF13, 0x72F624FF},
	gsDPNoOpTag(0xFFF00000),
	(Gfx){0x0B79ED5A, 0x71F925FF},
	gsDPNoOpTag(0xFFEB0000),
	(Gfx){0x0B7DF48F, 0x70E822FF},
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x118C18FF),
	gsDPNoOpTag(0xFFF10000),
	gsSP1Quadrangle(74 /* INVALID */, 125 /* INVALID */, 18 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFFF0000),
	gsSP1Quadrangle(104 /* INVALID */, 124, 32 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOp(),
	gsSPLineW3D(14 /* INVALID */, 123, 88, 0),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4087, 0xFFEB0000),
	gsDPLoadTile(1, qu102(527.75), qu102(291.75), qu102(932.5), qu102(383.75)),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 7, 0xFFF00000),
	gsDPLoadTile(G_TX_LOADTILE, qu102(903.5), qu102(854.5), qu102(992.5), qu102(447.75)),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 3, 0xFFEA0000),
	gsDPLoadBlock(5, 3166, 3859, 3939, 1279),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4078, 0xFFFF0000),
	gsDPSetFogColor(0xAF, 0xC4, 0x41, 0xFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4070, 0xFFF10000),
	gsDPSetFogColor(0xAA, 0xB5, 0x23, 0xFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4083, 0x00000000),
	gsDPSetFillColor(0xA1F347FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4083, 0x00000000),
	gsSPCullDisplayList(660, 9215 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4090, 0x00070000),
	gsDPNoOpTag(0xAC0355FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 10, 0xFFFE0000),
	gsBranchZ(194 /* INVALID */, 0.0408095, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0x000E0000),
	gsDPSetDepthImage(0x002870FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 25, 0xFFF90000),
	gsSPCullDisplayList(32560 /* INVALID */, 11135 /* INVALID */),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_AA_ZB_OPA_SURF2),
	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, TEXEL0, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetTextureLUT(G_TT_RGBA16),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x06000208, G_IM_FMT_CI, G_IM_SIZ_8b, 8, 8, 0, G_TX_NOMIRROR | G_TX_CLAMP, G_TX_NOMIRROR | G_TX_CLAMP, 3, 3, G_TX_NOLOD, G_TX_NOLOD),
	gsDPLoadTLUT_pal256(0x06000000),
	gsSPClearGeometryMode(G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING),
	gsSPVertex(0x06000848, 21, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
	gsSP2Triangles(4, 3, 0, 0, 5, 2, 6, 0),
	gsSP2Triangles(6, 7, 5, 0, 0, 8, 4, 0),
	gsSP2Triangles(0, 9, 8, 0, 0, 10, 9, 0),
	gsSP2Triangles(11, 12, 5, 0, 13, 11, 5, 0),
	gsSP2Triangles(7, 13, 5, 0, 14, 15, 16, 0),
	gsSP2Triangles(16, 17, 14, 0, 18, 19, 20, 0),
	gsDPPipeSync(),
	gsDPLoadTextureBlock(0x06000248, G_IM_FMT_CI, G_IM_SIZ_8b, 16, 16, 0, G_TX_MIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_CLAMP, 4, 4, G_TX_NOLOD, G_TX_NOLOD),
	gsSPVertex(0x06000998, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 2, 0),
	gsSP2Triangles(4, 5, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(9, 2, 6, 0, 10, 5, 0, 0),
	gsSP2Triangles(0, 5, 11, 0, 11, 12, 0, 0),
	gsSP2Triangles(13, 11, 5, 0, 14, 13, 5, 0),
	gsSP2Triangles(5, 4, 14, 0, 15, 16, 17, 0),
	gsSP2Triangles(17, 18, 15, 0, 19, 18, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 11, 24, 12, 0),
	gsSP2Triangles(12, 24, 25, 0, 11, 21, 24, 0),
	gsSP2Triangles(26, 2, 3, 0, 27, 18, 28, 0),
	gsSP2Triangles(27, 28, 29, 0, 30, 31, 19, 0),
	gsSPVertex(0x06000B98, 24, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(5, 6, 3, 0, 7, 8, 9, 0),
	gsSP2Triangles(9, 8, 10, 0, 11, 12, 13, 0),
	gsSP2Triangles(14, 15, 16, 0, 17, 18, 19, 0),
	gsSP2Triangles(20, 21, 22, 0, 15, 23, 16, 0),
	gsDPPipeSync(),
	gsDPLoadTextureBlock(0x06000348, G_IM_FMT_CI, G_IM_SIZ_8b, 16, 16, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_CLAMP, 4, 4, G_TX_NOLOD, G_TX_NOLOD),
	gsSPVertex(0x06000D18, 12, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 3, 4, 0),
	gsSP2Triangles(5, 4, 3, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 9, 6, 0, 6, 9, 10, 0),
	gsSP2Triangles(11, 8, 7, 0, 0, 4, 1, 0),
	gsDPPipeSync(),
	gsDPLoadTextureBlock(0x06000448, G_IM_FMT_CI, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_CLAMP, G_TX_NOMIRROR | G_TX_CLAMP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPVertex(0x06000DD8, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(0, 6, 7, 0, 0, 2, 6, 0),
	gsSP2Triangles(8, 9, 10, 0, 11, 12, 13, 0),
	gsSP2Triangles(13, 14, 15, 0, 12, 14, 13, 0),
	gsSP2Triangles(16, 17, 14, 0, 18, 19, 20, 0),
	gsSP2Triangles(18, 11, 21, 0, 11, 13, 21, 0),
	gsSP2Triangles(12, 9, 22, 0, 22, 9, 8, 0),
	gsSP2Triangles(23, 24, 25, 0, 25, 24, 26, 0),
	gsSP2Triangles(26, 24, 4, 0, 27, 3, 5, 0),
	gsSP2Triangles(27, 5, 18, 0, 10, 9, 20, 0),
	gsSP2Triangles(23, 19, 18, 0, 28, 29, 16, 0),
	gsSP2Triangles(3, 28, 4, 0, 30, 28, 3, 0),
	gsSP1Triangle(29, 17, 16, 0),
	gsSPVertex(0x06000FC8, 18, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(5, 4, 2, 0, 2, 6, 5, 0),
	gsSP2Triangles(2, 1, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(10, 11, 3, 0, 7, 11, 10, 0),
	gsSP2Triangles(10, 12, 7, 0, 12, 8, 7, 0),
	gsSP2Triangles(13, 14, 15, 0, 14, 16, 15, 0),
	gsSP1Triangle(16, 17, 15, 0),
	gsSPEndDisplayList(),
}

object_gi_gerudomask_1060.txt
{
	gsDPLoadBlock(5, 3166, 3859, 3939, 1279),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4078, 0xFFFF0000),
	gsDPSetFogColor(0xAF, 0xC4, 0x41, 0xFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4070, 0xFFF10000),
	gsDPSetFogColor(0xAA, 0xB5, 0x23, 0xFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4083, 0x00000000),
	gsDPSetFillColor(0xA1F347FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4083, 0x00000000),
	gsSPCullDisplayList(660, 9215 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4090, 0x00070000),
	gsDPNoOpTag(0xAC0355FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 10, 0xFFFE0000),
	gsBranchZ(194 /* INVALID */, 0.0408095, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0x000E0000),
	gsDPSetDepthImage(0x002870FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 25, 0xFFF90000),
	gsSPCullDisplayList(32560 /* INVALID */, 11135 /* INVALID */),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_AA_ZB_OPA_SURF2),
	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, TEXEL0, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetTextureLUT(G_TT_RGBA16),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x06000208, G_IM_FMT_CI, G_IM_SIZ_8b, 8, 8, 0, G_TX_NOMIRROR | G_TX_CLAMP, G_TX_NOMIRROR | G_TX_CLAMP, 3, 3, G_TX_NOLOD, G_TX_NOLOD),
	gsDPLoadTLUT_pal256(0x06000000),
	gsSPClearGeometryMode(G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING),
	gsSPVertex(0x06000848, 21, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
	gsSP2Triangles(4, 3, 0, 0, 5, 2, 6, 0),
	gsSP2Triangles(6, 7, 5, 0, 0, 8, 4, 0),
	gsSP2Triangles(0, 9, 8, 0, 0, 10, 9, 0),
	gsSP2Triangles(11, 12, 5, 0, 13, 11, 5, 0),
	gsSP2Triangles(7, 13, 5, 0, 14, 15, 16, 0),
	gsSP2Triangles(16, 17, 14, 0, 18, 19, 20, 0),
	gsDPPipeSync(),
	gsDPLoadTextureBlock(0x06000248, G_IM_FMT_CI, G_IM_SIZ_8b, 16, 16, 0, G_TX_MIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_CLAMP, 4, 4, G_TX_NOLOD, G_TX_NOLOD),
	gsSPVertex(0x06000998, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 2, 0),
	gsSP2Triangles(4, 5, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(9, 2, 6, 0, 10, 5, 0, 0),
	gsSP2Triangles(0, 5, 11, 0, 11, 12, 0, 0),
	gsSP2Triangles(13, 11, 5, 0, 14, 13, 5, 0),
	gsSP2Triangles(5, 4, 14, 0, 15, 16, 17, 0),
	gsSP2Triangles(17, 18, 15, 0, 19, 18, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 11, 24, 12, 0),
	gsSP2Triangles(12, 24, 25, 0, 11, 21, 24, 0),
	gsSP2Triangles(26, 2, 3, 0, 27, 18, 28, 0),
	gsSP2Triangles(27, 28, 29, 0, 30, 31, 19, 0),
	gsSPVertex(0x06000B98, 24, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(5, 6, 3, 0, 7, 8, 9, 0),
	gsSP2Triangles(9, 8, 10, 0, 11, 12, 13, 0),
	gsSP2Triangles(14, 15, 16, 0, 17, 18, 19, 0),
	gsSP2Triangles(20, 21, 22, 0, 15, 23, 16, 0),
	gsDPPipeSync(),
	gsDPLoadTextureBlock(0x06000348, G_IM_FMT_CI, G_IM_SIZ_8b, 16, 16, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_CLAMP, 4, 4, G_TX_NOLOD, G_TX_NOLOD),
	gsSPVertex(0x06000D18, 12, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 3, 4, 0),
	gsSP2Triangles(5, 4, 3, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 9, 6, 0, 6, 9, 10, 0),
	gsSP2Triangles(11, 8, 7, 0, 0, 4, 1, 0),
	gsDPPipeSync(),
	gsDPLoadTextureBlock(0x06000448, G_IM_FMT_CI, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_CLAMP, G_TX_NOMIRROR | G_TX_CLAMP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPVertex(0x06000DD8, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(0, 6, 7, 0, 0, 2, 6, 0),
	gsSP2Triangles(8, 9, 10, 0, 11, 12, 13, 0),
	gsSP2Triangles(13, 14, 15, 0, 12, 14, 13, 0),
	gsSP2Triangles(16, 17, 14, 0, 18, 19, 20, 0),
	gsSP2Triangles(18, 11, 21, 0, 11, 13, 21, 0),
	gsSP2Triangles(12, 9, 22, 0, 22, 9, 8, 0),
	gsSP2Triangles(23, 24, 25, 0, 25, 24, 26, 0),
	gsSP2Triangles(26, 24, 4, 0, 27, 3, 5, 0),
	gsSP2Triangles(27, 5, 18, 0, 10, 9, 20, 0),
	gsSP2Triangles(23, 19, 18, 0, 28, 29, 16, 0),
	gsSP2Triangles(3, 28, 4, 0, 30, 28, 3, 0),
	gsSP1Triangle(29, 17, 16, 0),
	gsSPVertex(0x06000FC8, 18, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(5, 4, 2, 0, 2, 6, 5, 0),
	gsSP2Triangles(2, 1, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(10, 11, 3, 0, 7, 11, 10, 0),
	gsSP2Triangles(10, 12, 7, 0, 12, 8, 7, 0),
	gsSP2Triangles(13, 14, 15, 0, 14, 16, 15, 0),
	gsSP1Triangle(16, 17, 15, 0),
	gsSPEndDisplayList(),
}

object_gi_ghost_03C0.txt
{
	(Gfx){0x6F6C6C6C, 0x7393C1D7},
	(Gfx){0xC6A9917F, 0x7A889281},
	(Gfx){0x6C6C6D70, 0x7A98C1D1},
	(Gfx){0xC0A59281, 0x7A808376},
	(Gfx){0x6C6E767F, 0x8BA5C4CE},
	(Gfx){0xBDA69788, 0x7E797670},
	(Gfx){0x6D76889A, 0xA7B6C8CC},
	(Gfx){0xBDAA9F94, 0x8477706C},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 14, 0xFFFB0000),
	gsDPSetColorImage(5, G_IM_SIZ_8b, 1801, 0xE68CF3FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 18, 0x00000000),
	gsDPNoOpTag(0x9FBA08FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 17, 0xFFF60000),
	gsDPSetColorImage(G_IM_FMT_I, G_IM_SIZ_4b, 1679, 0xC6BEAFFF),
	gsDPNoOpTag(0xFFF50000),
	gsSPModifyVertex(887 /* INVALID */, 0x00F7, 0xFD9EBCFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 17, 0xFFF60000),
	gsSPCullDisplayList(839, 22527 /* INVALID */),
	gsDPNoOpTag(0xFFF10000),
	gsSPModifyVertex(785 /* INVALID */, 0x00B3, 0x20D595FF),
	gsDPNoOpTag(0xFFFA0000),
	gsSPModifyVertex(787 /* INVALID */, 0x003E, 0x6B04CBFF),
	gsDPNoOpTag(0xFFF00000),
	gsSPModifyVertex(720, 0x00D4, 0x2244A4FF),
	gsDPNoOpTag(0xFFF80000),
	gsSPModifyVertex(699, 0x006E, 0x4F57E8FF),
	gsDPNoOpTag(0x000F0000),
	gsSPVertex(0x1FCD68FF, 80, -25),
	gsDPNoOpTag(0x00060000),
	gsSPVertex(0x6EF52DFF, 32, -13),
	gsDPNoOpTag(0x00100000),
	gsSPVertex(0x203F60FF, 192, -98),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 26, 0xFFFA0000),
	gsSPCullDisplayList(748 /* INVALID */, 26367 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 25, 0xFFF10000),
	gsSPCullDisplayList(752 /* INVALID */, 18687 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 34, 0x00000000),
	gsBranchZ(626 /* INVALID */, 0.0858222, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0xFFFA0000),
	gsSPModifyVertex(607, 0x00DC, 0x1174EAFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 30, 0xFFF40000),
	gsSPCullDisplayList(696, 24575 /* INVALID */),
	gsDPNoOpTag(0x00070000),
	gsSPVertex(0x1A9124FF, 144, -140),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 17, 0xFFF60000),
	gsDPSetColorImage(G_IM_FMT_I, G_IM_SIZ_4b, 1679, 0xC6BEAFFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 18, 0x00000000),
	gsDPNoOpTag(0x9FBA08FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 26, 0xFFFA0000),
	gsDPSetColorImage(6, G_IM_SIZ_4b, 1498, 0x9A22CDFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 14, 0xFFFB0000),
	gsDPSetColorImage(5, G_IM_SIZ_8b, 1801, 0xE68CF3FF),
	gsDPNoOpTag(0xFFFB0000),
	gsSPModifyVertex(879 /* INVALID */, 0x0043, 0x3999E9FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 14, 0x00080000),
	gsDPNoOpTag(0xDC9322FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 18, 0x000E0000),
	gsDPNoOpTag(0xCDBE56FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 26, 0x00060000),
	gsDPNoOpTag(0x9D2736FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 34, 0x00000000),
	gsDPNoOpTag(0xD56F02FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 25, 0x000F0000),
	gsDPNoOpTag(0xD91C6DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 30, 0x000B0000),
	gsDPNoOpTag(0xE1613FFF),
	gsDPNoOpTag(0x00080000),
	gsSPVertex(0x41601CFF, 32, 27),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 14, 0xFFFB0000),
	gsSPCullDisplayList(900, 31231 /* INVALID */),
	gsDPNoOpTag(0x00050000),
	gsSPVertex(0x0C731FFF, 208, -129),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 14, 0x00070000),
	gsBranchZ(512 /* INVALID */, 0.0549476, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 8, 0xFFF90000),
	gsSPModifyVertex(505, 0x000D, 0x9ECFCFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 8, 0x00070000),
	gsBranchZ(505 /* INVALID */, 0.0762932, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0x00070000),
	gsBranchZ(0, -0.0872243, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0x00070000),
	gsBranchZ(7 /* INVALID */, -0.0424231, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0xFFF90000),
	gsSPModifyVertex(0, 0x000D, 0x45BBBBFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 14, 0xFFF90000),
	gsSPModifyVertex(512, 0x000D, 0xCF319EFF),
	gsDPNoOpTag(0xFFF90000),
	gsSPModifyVertex(7, 0x000D, 0x3162CFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 8, 0x00160000),
	gsSP2Triangles(6 /* INVALID */, 1 /* INVALID */, 121, 0, 79, 24 /* INVALID */, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 14, 0x00160000),
	gsSP2Triangles(6 /* INVALID */, 2, 0, 0, 34 /* INVALID */, 34 /* INVALID */, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 8, 0x00080000),
	gsBranchZ(505 /* INVALID */, 0.0394932, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 14, 0x00080000),
	gsBranchZ(512 /* INVALID */, 0.0756804, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0x00080000),
	gsBranchZ(7 /* INVALID */, -0.0880393, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0x00080000),
	gsBranchZ(0 /* INVALID */, -0.0607889, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0x00160000),
	gsSP2Triangles(6 /* INVALID */, 0, 7, 0, 24 /* INVALID */, 24 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x00160000),
	gsSP2Triangles(6 /* INVALID */, 0, 0, 0, 103 /* INVALID */, 49, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 14, 0xFFF80000),
	gsSPVertex(0xBB4545FF, 48, -48),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 8, 0xFFEA0000),
	gsDPNoOpTag(0x9ECFCFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 8, 0xFFF80000),
	gsSPVertex(0xCF9E31FF, 48, 73),
	gsDPNoOpTag(0xFFF80000),
	gsSPVertex(0x31CF62FF, 48, -48),
	gsDPNoOpTag(0xFFF80000),
	gsSPVertex(0x623131FF, 48, -41),
	gsDPNoOpTag(0xFFEA0000),
	gsDPNoOpTag(0x45BBBBFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 14, 0xFFEA0000),
	gsDPNoOpTag(0xCF319EFF),
	gsDPNoOpTag(0xFFEA0000),
	gsDPNoOpTag(0x3162CFFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4064, 0x000D0000),
	gsDPNoOpTag(0xF08D1CFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4064, 0x00000000),
	gsDPNoOpTag(0xB1A600FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4064, 0xFFF30000),
	gsDPSetColorImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1840, 0xEC99C7FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4064, 0x000D0000),
	gsDPNoOpTag(0xF08D1CFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4064, 0xFFF30000),
	gsDPSetColorImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1840, 0xEC99C7FF),
	gsDPNoOpTag(0xFFF30000),
	gsDPSetDepthImage(0x1993D5FF),
	gsDPNoOp(),
	gsSPModifyVertex(919 /* INVALID */, 0x0000, 0x429D00FF),
	gsDPNoOpTag(0x000D0000),
	gsSPVertex(0x19A347FF, 80, -57),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4064, 0x00000000),
	gsDPNoOpTag(0xB1A600FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4070, 0x00000000),
	gsDPNoOpTag(0x8EE0F2FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4070, 0xFFF00000),
	gsDPSetColorImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1748, 0xCAD89EFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4064, 0xFFF30000),
	gsSPCullDisplayList(919 /* INVALID */, 25599 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4070, 0xFFF00000),
	gsSPCullDisplayList(873 /* INVALID */, 20351 /* INVALID */),
	gsDPNoOpTag(0xFFF00000),
	gsSPModifyVertex(873 /* INVALID */, 0x00AB, 0x40D2A6FF),
	gsDPNoOpTag(0xFFF30000),
	gsSPModifyVertex(919 /* INVALID */, 0x00AB, 0x1993D5FF),
	gsDPNoOp(),
	gsSPModifyVertex(873 /* INVALID */, 0x0000, 0x72E00EFF),
	gsDPNoOpTag(0x00100000),
	gsSPVertex(0x36D862FF, 80, 25),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4070, 0x00100000),
	gsDPNoOpTag(0xC0D25AFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 8, 0x00000000),
	gsDPNoOpTag(0x8B0017FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 8, 0xFFF00000),
	gsDPSetColorImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1275, 0xB200A6FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 8, 0xFFF00000),
	gsSPCullDisplayList(637, 21375 /* INVALID */),
	gsDPNoOpTag(0xFFF00000),
	gsSPModifyVertex(637, 0x00AB, 0x27008FFF),
	gsDPNoOp(),
	gsSPModifyVertex(637, 0x0000, 0x7500E9FF),
	gsDPNoOpTag(0x00100000),
	gsSPVertex(0x4E005AFF, 80, 45),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 8, 0x00100000),
	gsDPNoOpTag(0xD90071FF),
	gsDPNoOp(),
	gsDPNoOpTag(0x000078FF),
	gsDPNoOp(),
	gsDPNoOpTag(0x000078FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0x00000000),
	gsSPModifyVertex(0, 0x0000, 0x000078FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4059, 0x00000000),
	gsSPModifyVertex(512, 0x0000, 0x000078FF),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, qu08(0.5), 0x00, 0x00, 0x32, 0xFF),
	gsDPSetEnvColor(0x64, 0x00, 0xC8, 0xFF),
	gsSPEndDisplayList(),
}

object_gi_glasses_0D60.txt
{
	gsDPNoOp(),
	gsSPModifyVertex(768, 0x0000, 0xFD0089FF),
	gsDPNoOp(),
	gsSPVertex(0x00FB89FF, 0, 0),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0x96, 0x00, 0x32, 0xFF),
	gsDPSetEnvColor(0x32, 0x00, 0x00, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0457764), qu016(0.0457764), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 2, 0, 8, 7, 9, 0),
	gsSP2Triangles(6, 3, 10, 0, 6, 10, 9, 0),
	gsSP2Triangles(9, 10, 3, 0, 9, 11, 6, 0),
	gsSP2Triangles(3, 8, 9, 0, 12, 13, 14, 0),
	gsSP2Triangles(15, 16, 14, 0, 17, 18, 14, 0),
	gsSP2Triangles(19, 12, 20, 0, 15, 21, 22, 0),
	gsSP2Triangles(18, 17, 23, 0, 24, 23, 22, 0),
	gsSP2Triangles(22, 23, 17, 0, 22, 12, 24, 0),
	gsSP2Triangles(17, 15, 22, 0, 25, 26, 27, 0),
	gsSP1Triangle(25, 28, 29, 0),
	gsSPVertex(0x06000210, 12, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 4, 7, 0, 8, 9, 10, 0),
	gsSP2Triangles(6, 11, 5, 0, 2, 11, 6, 0),
	gsSP2Triangles(5, 4, 6, 0, 6, 7, 2, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x64, 0x00, 0x78, 0xFF),
	gsDPSetEnvColor(0x28, 0x00, 0x3C, 0xFF),
	gsSPVertex(0x060002D0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 0, 0),
	gsSP2Triangles(3, 0, 2, 0, 5, 6, 7, 0),
	gsSP2Triangles(8, 9, 10, 0, 11, 12, 13, 0),
	gsSP2Triangles(14, 15, 16, 0, 16, 17, 14, 0),
	gsSP2Triangles(18, 19, 20, 0, 21, 22, 23, 0),
	gsSP2Triangles(24, 25, 26, 0, 27, 28, 29, 0),
	gsSP2Triangles(30, 10, 28, 0, 11, 31, 12, 0),
	gsSPVertex(0x060004D0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 2, 1, 3, 0),
	gsSP2Triangles(2, 4, 5, 0, 6, 7, 8, 0),
	gsSP2Triangles(9, 10, 11, 0, 12, 13, 14, 0),
	gsSP2Triangles(15, 16, 17, 0, 18, 19, 20, 0),
	gsSP2Triangles(21, 20, 22, 0, 23, 22, 24, 0),
	gsSP2Triangles(5, 4, 25, 0, 14, 26, 12, 0),
	gsSP2Triangles(17, 27, 15, 0, 16, 15, 28, 0),
	gsSP2Triangles(29, 28, 19, 0, 10, 9, 30, 0),
	gsSPVertex(0x060006C0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(5, 6, 7, 0, 8, 9, 10, 0),
	gsSP2Triangles(11, 12, 13, 0, 14, 13, 15, 0),
	gsSP2Triangles(16, 15, 17, 0, 18, 19, 20, 0),
	gsSP2Triangles(21, 20, 9, 0, 22, 10, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 20, 21, 18, 0),
	gsSP2Triangles(15, 16, 14, 0, 6, 5, 24, 0),
	gsSP2Triangles(26, 27, 28, 0, 29, 30, 31, 0),
	gsSPVertex(0x060008C0, 27, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 1, 0),
	gsSP2Triangles(5, 6, 7, 0, 8, 9, 5, 0),
	gsSP2Triangles(8, 5, 7, 0, 3, 5, 4, 0),
	gsSP2Triangles(3, 6, 5, 0, 10, 11, 12, 0),
	gsSP2Triangles(10, 12, 13, 0, 14, 15, 16, 0),
	gsSP2Triangles(14, 16, 17, 0, 18, 11, 19, 0),
	gsSP2Triangles(17, 7, 20, 0, 17, 21, 22, 0),
	gsSP2Triangles(23, 24, 19, 0, 25, 22, 26, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0x96, 0xFF),
	gsDPSetEnvColor(0x64, 0x32, 0x00, 0xFF),
	gsSPVertex(0x06000A70, 14, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 3, 7, 0, 8, 9, 10, 0),
	gsSP2Triangles(2, 11, 0, 0, 5, 7, 3, 0),
	gsSP2Triangles(7, 12, 6, 0, 10, 13, 8, 0),
	gsSPEndDisplayList(),
}

object_gi_gloves_06E0.txt
{
	(Gfx){0xC4C3C4C6, 0xCCD4DBDE},
	gsSPEndDisplayList(),
}

object_gi_golonmask_09A0.txt
{
	gsSP1Triangle(2 /* INVALID */, 2 /* INVALID */, 2 /* INVALID */, 0),
	gsSPModifyVertex(257, 0x0002, 0x02020503),
	gsSPCullDisplayList(388 /* INVALID */, 388 /* INVALID */),
	(Gfx){0x09632315, 0x1D1D1D1D},
	(Gfx){0x1D1D1D1D, 0x1D1D1D1D},
	gsDPNoOpTag(0x104B1414),
	(Gfx){0x4848DD75, 0x63292966},
	(Gfx){0x09300941, 0x03110505},
	gsSP1Triangle(2 /* INVALID */, 2 /* INVALID */, 2 /* INVALID */, 0),
	(Gfx){0x5D037309, 0x09880E0E},
	(Gfx){0x0E0E0E0E, 0x09094103},
	(Gfx){0x8F434343, 0x3B3B3B3B},
	(Gfx){0x4E4E4E4E, 0x4E4E2424},
	gsDPNoOpTag(0x104B1497),
	(Gfx){0x3E3E3E9A, 0x5B232329},
	(Gfx){0x0E300903, 0x11110311},
	(Gfx){0x11110909, 0x09880E0E},
	gsDPSetOtherMode(G_AD_PATTERN | G_CD_MAGICSQ | G_CK_NONE | 0x00000E00 | G_TF_POINT | G_TT_NONE | G_TL_TILE | 0x00060000 | G_TP_PERSP | G_CYC_1CYCLE | G_PM_NPRIMITIVE | 0x0000000E, G_AC_NONE | G_ZS_PIXEL | Z_UPD | IM_RD | CVG_DST_SAVE | ZMODE_OPA | GBL_c1(G_BL_CLR_IN, G_BL_A_SHADE, G_BL_CLR_IN, G_BL_1) | GBL_c2(G_BL_CLR_IN, G_BL_A_FOG, G_BL_CLR_IN, G_BL_A_MEM)),
	(Gfx){0x340D3636, 0x36361F78},
	(Gfx){0xC0711717, 0x17171717},
	(Gfx){0x17171717, 0x17171717},
	gsDPNoOpTag(0x574B1448),
	(Gfx){0x973E9845, 0x5B151523},
	(Gfx){0x63630E23, 0x23236363},
	(Gfx){0x0E0E3009, 0x0909036E},
	(Gfx){0x60340404, 0x8B8B8B8B},
	gsDPSetDepthImage(0x04040404),
	gsBranchZ(1026 /* INVALID */, -8.45345, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsBranchZ(514 /* INVALID */, -203.963, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0x46464B14),
	(Gfx){0x48984845, 0x5B151D2A},
	(Gfx){0x15151568, 0x29292930},
	(Gfx){0x30090344, 0x34080808},
	gsSPModifyVertex(257, 0x0002, 0x341B1B08),
	gsSPLineW3D(4, 4, 31, 0),
	gsBranchZ(514 /* INVALID */, -203.963, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsBranchZ(514 /* INVALID */, -203.963, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0x46284B14),
	gsTexRect(qu102(84.25), qu102(837.25), qu102(288.25), qu102(273.25), 2),
	(Gfx){0x23292930, 0x41031144},
	gsSP1Triangle(38, 1, 1, 0),
	gsSPModifyVertex(257, 0x0002, 0x02020202),
	gsSPModifyVertex(269 /* INVALID */, 0x0002, 0x08080808),
	gsSPLineW3D(4, 4, 8, 0),
	(Gfx){0x1F360808, 0x08080808},
	gsDPNoOpTag(0x46464B14),
	(Gfx){0x14141428, 0x5A152A15},
	(Gfx){0x8F050505, 0x05050505},
	gsSP1Triangle(2 /* INVALID */, 38, 1, 0),
	gsSP1Triangle(2 /* INVALID */, 2 /* INVALID */, 2 /* INVALID */, 0),
	gsSPModifyVertex(257, 0x0002, 0x02020202),
	gsSPModifyVertex(257, 0x0002, 0x02020202),
	gsSPModifyVertex(257, 0x0002, 0x02020202),
	gsDPNoOpTag(0x10574628),
	(Gfx){0x28282828, 0x3D2A2A29},
	(Gfx){0x304D034D, 0x4D4D1111},
	(Gfx){0x11111111, 0x11111105},
	(Gfx){0x11111144, 0x44050505},
	gsSP1Triangle(2 /* INVALID */, 2 /* INVALID */, 2 /* INVALID */, 0),
	gsSP1Triangle(2 /* INVALID */, 34, 34, 0),
	(Gfx){0x11111111, 0x11111111},
	gsDPNoOpTag(0x00001046),
	(Gfx){0x46462810, 0x3D151D15},
	(Gfx){0x29414141, 0x03030303},
	gsSPCullDisplayList(385 /* INVALID */, 422 /* INVALID */),
	(Gfx){0x4D4D4D03, 0x03030303},
	gsSPCullDisplayList(385 /* INVALID */, 385 /* INVALID */),
	gsSPCullDisplayList(385 /* INVALID */, 1156 /* INVALID */),
	(Gfx){0x09090909, 0x09090909},
	gsDPNoOpTag(0x00000010),
	(Gfx){0x10101006, 0x5A15153A},
	(Gfx){0x15152323, 0x68292930},
	(Gfx){0x308F4141, 0x41030303},
	gsSPCullDisplayList(385 /* INVALID */, 385 /* INVALID */),
	gsSPCullDisplayList(385 /* INVALID */, 385 /* INVALID */),
	gsSPCullDisplayList(1156 /* INVALID */, 1799),
	(Gfx){0x0E0E0E0E, 0x0E0E0E0E},
	gsDPNoOp(),
	gsDPNoOpTag(0x5B153AAB),
	(Gfx){0x557B263A, 0x68231515},
	(Gfx){0x15151523, 0x23232930},
	(Gfx){0x30304103, 0x03030303},
	gsSPCullDisplayList(385 /* INVALID */, 11950 /* INVALID */),
	(Gfx){0x1103880E, 0x09090909},
	(Gfx){0x09090909, 0x09736E60},
	gsDPNoOp(),
	gsDPNoOpTag(0x3838261A),
	(Gfx){0x1A695555, 0x8D3D745A},
	(Gfx){0x7B7B2626, 0x26262626},
	(Gfx){0x26919196, 0x969626A0},
	(Gfx){0x5B263838, 0x38682329},
	(Gfx){0x26AD725B, 0x3A382626},
	(Gfx){0x3838383A, 0x3A3A3A38},
	gsDPNoOp(),
	gsDPNoOpTag(0xAD5B3D1A),
	gsSP1Quadrangle(3 /* INVALID */, 68 /* INVALID */, 6 /* INVALID */, 6, 0),
	(Gfx){0x0C0C0C0C, 0x0C0C0C0C},
	(Gfx){0x0C0C0C0C, 0x0C0C55E7},
	(Gfx){0x3D747BD3, 0xB3263A23},
	(Gfx){0x5A8D068E, 0xB38ED1B6},
	(Gfx){0x8DCFCD37, 0x37373786},
	gsDPNoOp(),
	gsDPNoOpTag(0x72726906),
	gsSPVertex(0x07070707, 16, -13),
	gsSP1Quadrangle(3 /* INVALID */, 3 /* INVALID */, 3 /* INVALID */, 3 /* INVALID */, 0),
	gsSP1Quadrangle(3 /* INVALID */, 3 /* INVALID */, 3 /* INVALID */, 3 /* INVALID */, 0),
	gsSP1Quadrangle(3 /* INVALID */, 3 /* INVALID */, 42 /* INVALID */, 28, 0),
	(Gfx){0x4B3761CC, 0x373E3E1E},
	(Gfx){0x37481E5F, 0xD61E3721},
	gsDPNoOp(),
	gsSP2Triangles(11, 6 /* INVALID */, 30 /* INVALID */, 0, 6, 3 /* INVALID */, 0 /* INVALID */, 0),
	gsSPVertex(0x01010101, 16, -16),
	gsSPVertex(0x01010101, 16, -16),
	gsSPVertex(0x01010101, 16, -16),
	gsSPVertex(0x01075526, 16, -16),
	(Gfx){0x567A1E53, 0x3756E81E},
	(Gfx){0x37211E5F, 0xC61E37FA},
	gsDPNoOpTag(0x00000006),
	(Gfx){0x16701A0C, 0x1A070601},
	gsSPVertex(0x00000000, 0, 0),
	gsDPNoOp(),
	gsDPNoOpTag(0x00000001),
	gsSPVertex(0x07075574, 16, -16),
	(Gfx){0x217A5364, 0x5F56641E},
	(Gfx){0x21641E5F, 0xE11E5353},
	gsDPNoOpTag(0x00000006),
	(Gfx){0x16160707, 0x07070100},
	gsDPNoOp(),
	gsDPNoOpTag(0x00010101),
	gsSPVertex(0x01010101, 16, -16),
	gsSPVertex(0x07893DAB, 16, -16),
	(Gfx){0x21640C56, 0x56214556},
	(Gfx){0x143E1E5F, 0x531E3E3E},
	gsDPNoOpTag(0x00000006),
	gsSPVertex(0x01010000, 16, -16),
	gsDPNoOp(),
	gsDPNoOpTag(0x01010100),
	gsSPVertex(0x01010100, 16, -16),
	gsSPVertex(0x071A6910, 16, 81),
	(Gfx){0x64860C42, 0x21970C64},
	(Gfx){0x45141E0C, 0xBA7A0C1E},
	gsDPNoOpTag(0x00000001),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsSPVertex(0x89070761, 96, -93),
	(Gfx){0xBA9A0CE5, 0x7C100C52},
	(Gfx){0x10451E0C, 0x3E7A0C1E},
	gsDPNoOpTag(0x00000101),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsSPVertex(0x06862814, 16, -13),
	(Gfx){0xA9451AA1, 0xD2000C61},
	(Gfx){0x10101E0C, 0x48560C1E},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsSPVertex(0x00000000, 0, 0),
	gsSPVertex(0x10100006, 16, -16),
	(Gfx){0x1010079A, 0xA5000C21},
	(Gfx){0x10061EB6, 0x145F0C0C},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	(Gfx){0x1000000C, 0xA500071A},
	(Gfx){0x1006D986, 0x45420C0C},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0xFFF10000),
	gsDPLoadBlock(G_TX_RENDERTILE, 3681, 2118, 2319, 3583),
	gsDPNoOpTag(0xFFEB0000),
	gsDPSetColorImage(6, G_IM_SIZ_4b, 3059, 0x018A15FF),
	gsDPNoOpTag(0xFFE50000),
	gsDPSetColorImage(6, G_IM_SIZ_8b, 3879, 0x01FF89FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4079, 0xFFF10000),
	(Gfx){0x0C551846, 0xDB8FFBFF},
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4087, 0xFFEB0000),
	(Gfx){0x0B521BCB, 0xD91D93FF},
	gsDPNoOpTag(0xFFEB0000),
	gsDPLoadTile(2, qu102(956.25), qu102(754.75), qu102(126.25), qu102(319.75)),
	gsDPSetColorImage(6, G_IM_SIZ_32b, 4086, 0xFFF90000),
	(Gfx){0x146413E1, 0x9CC2EBFF},
	gsDPSetColorImage(6, G_IM_SIZ_32b, 3, 0xFFF60000),
	(Gfx){0x12B8156B, 0xA63ECFFF},
	gsDPNoOpTag(0xFFF90000),
	gsDPSetConvert(224, -194, 43, 236, -128, -1),
	gsDPNoOpTag(0xFFF60000),
	gsDPSetPrimDepth(19527, -14593),
	gsDPNoOpTag(0xFFF90000),
	gsDPSetOtherMode(G_AD_NOISE | G_CD_DISABLE | G_CK_KEY | 0x00000200 | 0x00001000 | G_TT_NONE | G_TL_TILE | G_TD_SHARPEN | G_TP_NONE | G_CYC_2CYCLE | G_PM_NPRIMITIVE | 0x00400001, G_AC_DITHER | G_ZS_PRIM | AA_EN | Z_CMP | Z_UPD | IM_RD | CLR_ON_CVG | CVG_DST_FULL | ZMODE_XLU | GBL_c1(G_BL_CLR_BL, G_BL_0, G_BL_CLR_BL, G_BL_1) | GBL_c2(G_BL_CLR_BL, G_BL_A_SHADE, G_BL_CLR_BL, G_BL_1)),
	gsDPNoOpTag(0xFFF60000),
	gsDPLoadTLUTCmd(5, 2),
	gsDPNoOpTag(0xFFEE0000),
	gsDPLoadTile(3, qu102(956.25), qu102(656.5), qu102(415.75), qu102(1023.75)),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4086, 0xFFF90000),
	(Gfx){0x11AE13E1, 0x45A420FF},
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4082, 0xFFF40000),
	(Gfx){0x0C5516BD, 0x25F071FF},
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4089, 0xFFEE0000),
	(Gfx){0x0B521A42, 0x396903FF},
	gsDPSetColorImage(7, G_IM_SIZ_4b, 3, 0xFFF60000),
	(Gfx){0x101E156B, 0x550054FF},
	gsDPNoOpTag(0xFFF40000),
	gsDPLoadBlock(1, 3681, 1725, 3782, 4095),
	gsDPNoOpTag(0xFFE70000),
	gsDPSetColorImage(6, G_IM_SIZ_8b, 3487, 0xFF7518FF),
	gsDPNoOpTag(0xFFED0000),
	gsDPSetColorImage(6, G_IM_SIZ_4b, 2666, 0xFFDD72FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 3, 0xFFF60000),
	(Gfx){0x101E156B, 0x1C128DFF},
	gsDPSetColorImage(7, G_IM_SIZ_8b, 11, 0x00090000),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 3600, 0xBF513BFF),
	gsDPSetColorImage(6, G_IM_SIZ_32b, 3, 0xFFF60000),
	gsSPVertex(0xA63ECFFF, 64, 47),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4088, 0x000F0000),
	gsDPSetDepthImage(0xB0284FFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 11, 0x00090000),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 3855, 0xBF513BFF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4088, 0x000F0000),
	gsDPSetColorImage(G_IM_FMT_I, G_IM_SIZ_32b, 368, 0xB0284FFF),
	gsDPNoOpTag(0x000E0000),
	gsSPVertex(0x004363FF, 239, -137),
	gsDPNoOpTag(0x001B0000),
	gsSPVertex(0x000977FF, 0, 0),
	gsDPNoOpTag(0x00160000),
	gsDPNoOpTag(0x003E66FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4083, 0x00180000),
	gsDPSetDepthImage(0xD4006FFF),
	gsDPNoOpTag(0x000F0000),
	gsDPLoadTLUTCmd(G_TX_RENDERTILE, 161),
	gsDPNoOpTag(0x000E0000),
	gsDPLoadTLUTCmd(G_TX_RENDERTILE, 588),
	gsDPNoOpTag(0xFFF40000),
	gsDPFillRectangle(343, 127, 504, 412),
	gsDPNoOpTag(0x00090000),
	gsDPFillRectangle(324, 767, 416, 699),
	gsDPNoOpTag(0xFFF60000),
	gsDPSetPrimDepth(19527, -14593),
	gsDPNoOpTag(0x000F0000),
	gsDPLoadTLUTCmd(G_TX_RENDERTILE, 161),
	gsDPNoOpTag(0xFFF90000),
	gsDPSetConvert(224, -194, 43, 236, -128, -1),
	gsDPSetColorImage(6, G_IM_SIZ_32b, 4086, 0xFFF90000),
	(Gfx){0x146413E1, 0x9CC2EBFF},
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4088, 0x000F0000),
	(Gfx){0x10A207A4, 0xB0284FFF},
	gsDPSetColorImage(6, G_IM_SIZ_32b, 3, 0xFFF60000),
	(Gfx){0x12B8156B, 0xA63ECFFF},
	gsDPSetColorImage(7, G_IM_SIZ_8b, 11, 0x00090000),
	(Gfx){0x0A980AEE, 0xBF513BFF},
	gsDPSetColorImage(7, G_IM_SIZ_8b, 18, 0xFFF40000),
	(Gfx){0x0A821672, 0xB5581EFF},
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4077, 0x000E0000),
	(Gfx){0x1058087B, 0xD09309FF},
	gsDPNoOpTag(0x00100000),
	gsDPNoOpTag(0x0095CAFF),
	gsDPNoOpTag(0x00060000),
	gsDPNoOpTag(0x00C797FF),
	gsDPNoOpTag(0x000E0000),
	gsDPLoadTLUTCmd(G_TX_RENDERTILE, 588),
	gsDPNoOpTag(0xFFF40000),
	gsDPFillRectangle(878, 1023, 504, 412),
	gsDPNoOpTag(0xFFF60000),
	gsDPLoadTLUTCmd(5, 2),
	gsDPNoOpTag(0xFFF60000),
	gsDPLoadTLUTCmd(G_TX_RENDERTILE, 970),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 18, 0xFFF40000),
	(Gfx){0x0A821672, 0x29E294FF},
	gsDPSetColorImage(7, G_IM_SIZ_4b, 3, 0xFFF60000),
	(Gfx){0x101E156B, 0x1C128DFF},
	gsDPNoOpTag(0xFFF90000),
	gsDPSetOtherMode(G_AD_NOISE | G_CD_DISABLE | G_CK_KEY | 0x00000200 | 0x00001000 | G_TT_NONE | G_TL_TILE | G_TD_SHARPEN | G_TP_NONE | G_CYC_2CYCLE | G_PM_NPRIMITIVE | 0x00400001, G_AC_DITHER | G_ZS_PRIM | AA_EN | Z_CMP | Z_UPD | IM_RD | CLR_ON_CVG | CVG_DST_FULL | ZMODE_XLU | GBL_c1(G_BL_CLR_BL, G_BL_0, G_BL_CLR_BL, G_BL_1) | GBL_c2(G_BL_CLR_BL, G_BL_A_SHADE, G_BL_CLR_BL, G_BL_1)),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4086, 0xFFF90000),
	(Gfx){0x11AE13E1, 0x45A420FF},
	gsDPNoOpTag(0x00180000),
	gsDPSetDepthImage(0x2C006FFF),
	gsDPNoOpTag(0x00160000),
	gsDPNoOpTag(0x003E66FF),
	gsDPNoOpTag(0x001B0000),
	gsSPVertex(0x000977FF, 0, 0),
	gsDPNoOpTag(0x000F0000),
	gsDPSetDepthImage(0x50284FFF),
	gsDPNoOpTag(0xFFF60000),
	gsSPVertex(0x4C47C6FF, 64, 47),
	gsDPNoOpTag(0x00090000),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 3600, 0x41513BFF),
	gsDPNoOpTag(0x000E0000),
	gsSPVertex(0x004363FF, 239, -137),
	gsDPNoOpTag(0x000F0000),
	gsDPSetColorImage(G_IM_FMT_I, G_IM_SIZ_32b, 368, 0x50284FFF),
	gsDPNoOpTag(0x00090000),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 3855, 0x41513BFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 11, 0x00090000),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 617, 0xBF513BFF),
	gsDPNoOpTag(0x000E0000),
	gsSPModifyVertex(277 /* INVALID */, 0x008B, 0x004363FF),
	gsDPNoOpTag(0xFFFE0000),
	gsSPVertex(0x166E29FF, 223, -101),
	gsDPNoOpTag(0xFFF40000),
	gsSPCullDisplayList(251, 20479 /* INVALID */),
	gsDPNoOpTag(0x00060000),
	gsDPSetColorImage(G_IM_FMT_RGBA, G_IM_SIZ_32b, 899, 0x00C797FF),
	gsDPNoOpTag(0xFFFE0000),
	gsSPModifyVertex(32743 /* INVALID */, 0x000F, 0xBEE4A1FF),
	gsDPNoOpTag(0xFFFE0000),
	gsSPVertex(0x166E29FF, 191, -164),
	gsDPNoOpTag(0x00090000),
	gsDPSetColorImage(G_IM_FMT_YUV, G_IM_SIZ_8b, 617, 0x41513BFF),
	gsDPNoOpTag(0xFFF40000),
	gsSPModifyVertex(305, 0x00BF, 0x4F55E1FF),
	gsDPNoOpTag(0x00090000),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 617, 0x41513BFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 18, 0xFFF40000),
	gsSPModifyVertex(305, 0x00BF, 0xB5581EFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 11, 0x00090000),
	gsDPSetColorImage(G_IM_FMT_YUV, G_IM_SIZ_8b, 617, 0xBF513BFF),
	gsDPNoOpTag(0xFFFE0000),
	gsSPModifyVertex(32743 /* INVALID */, 0x000F, 0x166E29FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 18, 0xFFF40000),
	gsSPCullDisplayList(251, 19071 /* INVALID */),
	gsDPNoOpTag(0x000E0000),
	gsSP1Quadrangle(10 /* INVALID */, 125 /* INVALID */, 49 /* INVALID */, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4088, 0x000F0000),
	gsDPSetCombineLERP(0, 0, 0, COMBINED, COMBINED, SHADE, TEXEL0, 0, PRIMITIVE, COMBINED, TEXEL1_ALPHA, 0, TEXEL0, 0, TEXEL1, 0),
	gsDPNoOpTag(0x00160000),
	gsSP1Quadrangle(10 /* INVALID */, 0 /* INVALID */, 51 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x00180000),
	gsSPVertex(0x2C006FFF, 176, -120),
	gsDPNoOpTag(0x000F0000),
	gsDPSetCombineLERP(0, ENVIRONMENT, 0, COMBINED, COMBINED, SHADE, TEXEL0, 0, PRIMITIVE, COMBINED, TEXEL1_ALPHA, 0, TEXEL0, 0, TEXEL1, 0),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4083, 0x00180000),
	gsSPVertex(0xD4006FFF, 176, -120),
	gsDPNoOpTag(0x00100000),
	gsSP1Quadrangle(37 /* INVALID */, 2 /* INVALID */, 101 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x00170000),
	gsSPLine3D(0, 2, 0),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4077, 0x000E0000),
	gsDPSetDepthImage(0xD09309FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4088, 0x000F0000),
	gsDPSetDepthImage(0xB0284FFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4083, 0x00180000),
	gsSPModifyVertex(12 /* INVALID */, 0x00D1, 0xD4006FFF),
	gsDPNoOpTag(0x001B0000),
	gsSPLineW3D(0, 127, 242, 0),
	gsDPNoOpTag(0x00180000),
	gsSPModifyVertex(12 /* INVALID */, 0x00D1, 0x2C006FFF),
	gsDPNoOpTag(0x000E0000),
	gsDPSetDepthImage(0x309309FF),
	gsDPNoOpTag(0x000F0000),
	gsDPSetDepthImage(0x50284FFF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_AA_ZB_OPA_SURF2),
	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, TEXEL0, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetTextureLUT(G_TT_RGBA16),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x06000208, G_IM_FMT_CI, G_IM_SIZ_8b, 8, 8, 0, G_TX_NOMIRROR | G_TX_CLAMP, G_TX_NOMIRROR | G_TX_CLAMP, 3, 3, G_TX_NOLOD, G_TX_NOLOD),
	gsDPLoadTLUT_pal256(0x06000000),
	gsSPClearGeometryMode(G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING),
	gsSPVertex(0x06000F48, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 2, 0),
	gsSP2Triangles(2, 5, 0, 0, 2, 1, 3, 0),
	gsSP2Triangles(4, 3, 6, 0, 4, 6, 7, 0),
	gsSP2Triangles(8, 0, 5, 0, 8, 5, 9, 0),
	gsSP2Triangles(10, 11, 12, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 15, 16, 0, 17, 10, 12, 0),
	gsSP2Triangles(17, 12, 18, 0, 18, 19, 17, 0),
	gsSP2Triangles(18, 15, 14, 0, 14, 19, 18, 0),
	gsSP2Triangles(20, 15, 4, 0, 15, 18, 2, 0),
	gsSP2Triangles(18, 12, 5, 0, 12, 11, 9, 0),
	gsSP2Triangles(3, 14, 13, 0, 1, 19, 14, 0),
	gsSP2Triangles(0, 17, 19, 0, 8, 10, 17, 0),
	gsSP2Triangles(4, 7, 20, 0, 2, 4, 15, 0),
	gsSP2Triangles(5, 2, 18, 0, 9, 5, 12, 0),
	gsSP2Triangles(13, 6, 3, 0, 14, 3, 1, 0),
	gsSP2Triangles(19, 1, 0, 0, 17, 0, 8, 0),
	gsSP2Triangles(21, 22, 23, 0, 24, 25, 26, 0),
	gsSP2Triangles(27, 28, 29, 0, 8, 30, 31, 0),
	gsSPVertex(0x06001148, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 2, 3, 4, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 8, 9, 0),
	gsSP2Triangles(10, 6, 5, 0, 11, 12, 13, 0),
	gsSP2Triangles(12, 11, 10, 0, 12, 14, 15, 0),
	gsSP2Triangles(0, 2, 16, 0, 17, 12, 18, 0),
	gsSP2Triangles(17, 18, 7, 0, 19, 13, 12, 0),
	gsSP2Triangles(4, 13, 19, 0, 15, 19, 12, 0),
	gsSP2Triangles(12, 10, 20, 0, 10, 5, 20, 0),
	gsSP2Triangles(12, 20, 18, 0, 21, 22, 23, 0),
	gsSP2Triangles(24, 25, 26, 0, 27, 28, 29, 0),
	gsDPPipeSync(),
	gsDPLoadTextureBlock(0x06000248, G_IM_FMT_CI, G_IM_SIZ_8b, 16, 16, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_CLAMP, 4, 4, G_TX_NOLOD, G_TX_NOLOD),
	gsSPVertex(0x06001328, 14, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 2, 1, 9, 0),
	gsSP2Triangles(10, 11, 6, 0, 12, 4, 13, 0),
	gsDPPipeSync(),
	gsDPLoadTextureBlock(0x06000348, G_IM_FMT_CI, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_CLAMP, G_TX_NOMIRROR | G_TX_CLAMP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPVertex(0x06001408, 6, 0),
	gsSP2Triangles(0, 1, 2, 0, 2, 3, 4, 0),
	gsSP2Triangles(2, 4, 0, 0, 1, 5, 2, 0),
	gsDPPipeSync(),
	gsDPLoadTextureBlock(0x06000748, G_IM_FMT_CI, G_IM_SIZ_8b, 64, 32, 0, G_TX_NOMIRROR | G_TX_CLAMP, G_TX_NOMIRROR | G_TX_CLAMP, 6, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPVertex(0x06001468, 9, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(4, 2, 1, 0, 1, 5, 4, 0),
	gsSP2Triangles(6, 7, 8, 0, 7, 1, 0, 0),
	gsSP2Triangles(1, 7, 6, 0, 6, 5, 1, 0),
	gsSPEndDisplayList(),
}

object_gi_hammer_09A0.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4083, 0x000C0000),
	gsDPNoOpTag(0x1EB0ACFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4067, 0x00170000),
	gsDPNoOpTag(0x409EE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4070, 0x001A0000),
	gsDPNoOpTag(0xA73E32FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(TEXEL0, PRIMITIVE, PRIM_LOD_FRAC, TEXEL0, 1, 1, PRIM_LOD_FRAC, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, qu08(0.5), 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x14, 0x28, 0x3C, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0305176), qu016(0.0457764), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 10, 7, 0),
	gsSP2Triangles(11, 12, 13, 0, 14, 15, 16, 0),
	gsSP2Triangles(17, 18, 12, 0, 19, 20, 18, 0),
	gsSP2Triangles(21, 22, 10, 0, 5, 20, 23, 0),
	gsSP2Triangles(8, 24, 6, 0, 7, 6, 9, 0),
	gsSP2Triangles(22, 25, 11, 0, 12, 11, 17, 0),
	gsSP2Triangles(18, 17, 19, 0, 26, 27, 28, 0),
	gsSP2Triangles(29, 5, 23, 0, 19, 30, 20, 0),
	gsSP1Triangle(26, 28, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 7, 9, 8, 0),
	gsSP2Triangles(10, 9, 11, 0, 10, 11, 12, 0),
	gsSP2Triangles(13, 12, 14, 0, 0, 15, 1, 0),
	gsSP2Triangles(2, 1, 16, 0, 17, 18, 6, 0),
	gsSP2Triangles(19, 20, 21, 0, 20, 22, 23, 0),
	gsSP2Triangles(20, 24, 25, 0, 23, 22, 26, 0),
	gsSP2Triangles(4, 27, 22, 0, 28, 8, 29, 0),
	gsSP2Triangles(29, 8, 30, 0, 30, 31, 29, 0),
	gsSPVertex(0x06000430, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 0, 3, 0),
	gsSP2Triangles(1, 3, 4, 0, 3, 5, 4, 0),
	gsSP2Triangles(4, 5, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(10, 11, 12, 0, 13, 11, 10, 0),
	gsSP2Triangles(11, 14, 12, 0, 11, 15, 14, 0),
	gsSP2Triangles(14, 15, 16, 0, 16, 15, 17, 0),
	gsSP2Triangles(18, 19, 20, 0, 19, 18, 21, 0),
	gsSP2Triangles(22, 23, 24, 0, 25, 24, 26, 0),
	gsSP2Triangles(27, 28, 29, 0, 30, 29, 31, 0),
	gsSPVertex(0x06000630, 26, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(5, 4, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(9, 10, 7, 0, 11, 12, 10, 0),
	gsSP2Triangles(10, 9, 11, 0, 11, 9, 13, 0),
	gsSP2Triangles(13, 14, 11, 0, 15, 16, 17, 0),
	gsSP2Triangles(18, 19, 20, 0, 21, 22, 19, 0),
	gsSP2Triangles(23, 24, 25, 0, 1, 0, 24, 0),
	gsSP2Triangles(2, 3, 0, 0, 4, 5, 3, 0),
	gsDPPipeSync(),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x14, 0x1E, 0x1E, 0xFF),
	gsSPTexture(qu016(0.038147), qu016(0.038147), 0, G_TX_RENDERTILE, G_ON),
	gsSPVertex(0x060007D0, 20, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(5, 6, 7, 0, 8, 7, 1, 0),
	gsSP2Triangles(9, 10, 11, 0, 12, 9, 13, 0),
	gsSP2Triangles(14, 12, 15, 0, 16, 14, 17, 0),
	gsSP2Triangles(15, 13, 11, 0, 2, 3, 0, 0),
	gsSP2Triangles(4, 18, 3, 0, 7, 8, 5, 0),
	gsSP2Triangles(1, 0, 8, 0, 11, 13, 9, 0),
	gsSP2Triangles(13, 15, 12, 0, 15, 17, 14, 0),
	gsSP2Triangles(17, 19, 16, 0, 19, 17, 15, 0),
	gsDPPipeSync(),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0x6E, 0x3C, 0x00, 0xFF),
	gsDPSetEnvColor(0x32, 0x14, 0x00, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032C90, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000910, 12, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(0, 6, 7, 0, 8, 7, 9, 0),
	gsSP2Triangles(10, 9, 4, 0, 10, 2, 8, 0),
	gsSP2Triangles(5, 11, 3, 0, 7, 8, 0, 0),
	gsSP2Triangles(9, 10, 8, 0, 4, 2, 10, 0),
	gsSPEndDisplayList(),
}

object_gi_hammer_09C0.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_4b, 4070, 0x001A0000),
	gsDPNoOpTag(0xA73E32FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(TEXEL0, PRIMITIVE, PRIM_LOD_FRAC, TEXEL0, 1, 1, PRIM_LOD_FRAC, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, qu08(0.5), 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x14, 0x28, 0x3C, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0305176), qu016(0.0457764), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 10, 7, 0),
	gsSP2Triangles(11, 12, 13, 0, 14, 15, 16, 0),
	gsSP2Triangles(17, 18, 12, 0, 19, 20, 18, 0),
	gsSP2Triangles(21, 22, 10, 0, 5, 20, 23, 0),
	gsSP2Triangles(8, 24, 6, 0, 7, 6, 9, 0),
	gsSP2Triangles(22, 25, 11, 0, 12, 11, 17, 0),
	gsSP2Triangles(18, 17, 19, 0, 26, 27, 28, 0),
	gsSP2Triangles(29, 5, 23, 0, 19, 30, 20, 0),
	gsSP1Triangle(26, 28, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 7, 9, 8, 0),
	gsSP2Triangles(10, 9, 11, 0, 10, 11, 12, 0),
	gsSP2Triangles(13, 12, 14, 0, 0, 15, 1, 0),
	gsSP2Triangles(2, 1, 16, 0, 17, 18, 6, 0),
	gsSP2Triangles(19, 20, 21, 0, 20, 22, 23, 0),
	gsSP2Triangles(20, 24, 25, 0, 23, 22, 26, 0),
	gsSP2Triangles(4, 27, 22, 0, 28, 8, 29, 0),
	gsSP2Triangles(29, 8, 30, 0, 30, 31, 29, 0),
	gsSPVertex(0x06000430, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 0, 3, 0),
	gsSP2Triangles(1, 3, 4, 0, 3, 5, 4, 0),
	gsSP2Triangles(4, 5, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(10, 11, 12, 0, 13, 11, 10, 0),
	gsSP2Triangles(11, 14, 12, 0, 11, 15, 14, 0),
	gsSP2Triangles(14, 15, 16, 0, 16, 15, 17, 0),
	gsSP2Triangles(18, 19, 20, 0, 19, 18, 21, 0),
	gsSP2Triangles(22, 23, 24, 0, 25, 24, 26, 0),
	gsSP2Triangles(27, 28, 29, 0, 30, 29, 31, 0),
	gsSPVertex(0x06000630, 26, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(5, 4, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(9, 10, 7, 0, 11, 12, 10, 0),
	gsSP2Triangles(10, 9, 11, 0, 11, 9, 13, 0),
	gsSP2Triangles(13, 14, 11, 0, 15, 16, 17, 0),
	gsSP2Triangles(18, 19, 20, 0, 21, 22, 19, 0),
	gsSP2Triangles(23, 24, 25, 0, 1, 0, 24, 0),
	gsSP2Triangles(2, 3, 0, 0, 4, 5, 3, 0),
	gsDPPipeSync(),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x14, 0x1E, 0x1E, 0xFF),
	gsSPTexture(qu016(0.038147), qu016(0.038147), 0, G_TX_RENDERTILE, G_ON),
	gsSPVertex(0x060007D0, 20, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(5, 6, 7, 0, 8, 7, 1, 0),
	gsSP2Triangles(9, 10, 11, 0, 12, 9, 13, 0),
	gsSP2Triangles(14, 12, 15, 0, 16, 14, 17, 0),
	gsSP2Triangles(15, 13, 11, 0, 2, 3, 0, 0),
	gsSP2Triangles(4, 18, 3, 0, 7, 8, 5, 0),
	gsSP2Triangles(1, 0, 8, 0, 11, 13, 9, 0),
	gsSP2Triangles(13, 15, 12, 0, 15, 17, 14, 0),
	gsSP2Triangles(17, 19, 16, 0, 19, 17, 15, 0),
	gsDPPipeSync(),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0x6E, 0x3C, 0x00, 0xFF),
	gsDPSetEnvColor(0x32, 0x14, 0x00, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032C90, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000910, 12, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(0, 6, 7, 0, 8, 7, 9, 0),
	gsSP2Triangles(10, 9, 4, 0, 10, 2, 8, 0),
	gsSP2Triangles(5, 11, 3, 0, 7, 8, 0, 0),
	gsSP2Triangles(9, 10, 8, 0, 4, 2, 10, 0),
	gsSPEndDisplayList(),
}

object_gi_hearts_1240.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_32b, 10, 0x00000000),
	gsSPModifyVertex(145 /* INVALID */, 0x0057, 0x000078FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 23, 0x00000000),
	gsSPModifyVertex(32726, 0x00AD, 0xE6E772FF),
	gsDPNoOp(),
	gsSPModifyVertex(223 /* INVALID */, 0x0000, 0x000078FF),
	gsDPNoOp(),
	gsSPModifyVertex(112 /* INVALID */, 0x0000, 0x0AEE76FF),
	gsDPNoOp(),
	gsDPSetDepthImage(0xD7FA70FF),
	gsDPSetPrimColor(0, qu08(0.5), 0xA0, 0xFF, 0xFF, 0xFF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_XLU_SURF2),
	gsDPSetCombineLERP(TEXEL0, PRIMITIVE, PRIM_LOD_FRAC, TEXEL0, 0, 0, 0, TEXEL0, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, COMBINED, 0, PRIMITIVE, 0),
	gsDPSetEnvColor(0x00, 0x64, 0xFF, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0305176), qu016(0.0305176), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032890, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 15),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 4, 0),
	gsSP2Triangles(3, 5, 6, 0, 5, 7, 8, 0),
	gsSP2Triangles(9, 8, 7, 0, 10, 9, 11, 0),
	gsSP2Triangles(12, 10, 13, 0, 14, 12, 15, 0),
	gsSP2Triangles(16, 17, 18, 0, 17, 19, 20, 0),
	gsSP2Triangles(20, 19, 21, 0, 22, 23, 24, 0),
	gsSP2Triangles(25, 22, 26, 0, 27, 25, 28, 0),
	gsSP1Triangle(29, 30, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(4, 6, 7, 0, 6, 8, 9, 0),
	gsSP2Triangles(10, 9, 8, 0, 11, 10, 12, 0),
	gsSP2Triangles(13, 11, 14, 0, 15, 16, 17, 0),
	gsSP2Triangles(18, 19, 20, 0, 19, 21, 22, 0),
	gsSP2Triangles(21, 23, 24, 0, 25, 24, 23, 0),
	gsSP2Triangles(26, 27, 28, 0, 29, 30, 27, 0),
	gsSPVertex(0x06000420, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(5, 6, 7, 0, 6, 8, 9, 0),
	gsSP2Triangles(8, 10, 11, 0, 12, 13, 14, 0),
	gsSP2Triangles(15, 16, 17, 0, 18, 17, 16, 0),
	gsSP2Triangles(19, 18, 20, 0, 21, 19, 22, 0),
	gsSP2Triangles(23, 21, 24, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 29, 0, 28, 30, 31, 0),
	gsSPVertex(0x06000620, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 1, 0),
	gsSP2Triangles(4, 3, 5, 0, 6, 7, 4, 0),
	gsSP2Triangles(8, 9, 10, 0, 9, 11, 12, 0),
	gsSP2Triangles(11, 13, 14, 0, 15, 14, 13, 0),
	gsSP2Triangles(16, 17, 18, 0, 19, 20, 21, 0),
	gsSP2Triangles(22, 19, 23, 0, 24, 22, 25, 0),
	gsSP2Triangles(26, 27, 28, 0, 27, 29, 30, 0),
	gsSPVertex(0x06000810, 31, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 6, 10, 0),
	gsSP2Triangles(11, 9, 12, 0, 13, 14, 15, 0),
	gsSP2Triangles(16, 15, 14, 0, 17, 18, 19, 0),
	gsSP2Triangles(18, 20, 21, 0, 20, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 24, 26, 0),
	gsSP2Triangles(27, 25, 28, 0, 7, 29, 30, 0),
	gsSPEndDisplayList(),
}

object_gi_hoverboots_00E0.txt
{
	gsDPNoOpTag(0x57BBBB9B),
	gsSPEndDisplayList(),
}

object_gi_hoverboots_1830.txt
{
	gsDPNoOpTag(0xFFFF0000),
	gsSP2Triangles(0, 0, 0, 0, 2, 68 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFFF0000),
	gsSP2Triangles(0, 2, 0, 0, 2, 68 /* INVALID */, 127 /* INVALID */, 0),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x96, 0x64, 0x00, 0xFF),
	gsDPSetEnvColor(0x5A, 0x32, 0x00, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING),
	gsSPVertex(0x06000400, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 4, 0),
	gsSP2Triangles(3, 5, 4, 0, 5, 6, 4, 0),
	gsSP2Triangles(0, 4, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(10, 11, 12, 0, 13, 14, 11, 0),
	gsSP2Triangles(15, 16, 14, 0, 17, 9, 16, 0),
	gsSP2Triangles(9, 17, 7, 0, 12, 18, 10, 0),
	gsSP2Triangles(11, 10, 13, 0, 14, 13, 15, 0),
	gsSP2Triangles(16, 15, 17, 0, 19, 20, 21, 0),
	gsSP2Triangles(22, 23, 20, 0, 22, 24, 23, 0),
	gsSP2Triangles(22, 25, 24, 0, 25, 22, 21, 0),
	gsSP2Triangles(26, 27, 28, 0, 29, 30, 31, 0),
	gsSPVertex(0x06000600, 11, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 4, 0),
	gsSP2Triangles(3, 5, 6, 0, 7, 6, 5, 0),
	gsSP2Triangles(8, 9, 10, 0, 2, 8, 0, 0),
	gsSP2Triangles(4, 2, 1, 0, 6, 4, 3, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x28, 0x00, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x00, 0xFF),
	gsSPVertex(0x060006B0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 2, 0),
	gsSP2Triangles(0, 2, 4, 0, 5, 6, 4, 0),
	gsSP2Triangles(3, 7, 2, 0, 8, 2, 7, 0),
	gsSP2Triangles(6, 0, 4, 0, 3, 1, 9, 0),
	gsSP2Triangles(8, 10, 2, 0, 4, 2, 10, 0),
	gsSP2Triangles(11, 12, 13, 0, 9, 14, 3, 0),
	gsSP2Triangles(15, 12, 16, 0, 15, 13, 12, 0),
	gsSP2Triangles(6, 5, 11, 0, 13, 6, 11, 0),
	gsSP2Triangles(17, 18, 19, 0, 17, 20, 18, 0),
	gsSP2Triangles(21, 17, 19, 0, 21, 22, 23, 0),
	gsSP2Triangles(17, 24, 20, 0, 24, 17, 25, 0),
	gsSP2Triangles(21, 19, 22, 0, 26, 18, 20, 0),
	gsSP2Triangles(17, 27, 25, 0, 27, 17, 21, 0),
	gsSP2Triangles(28, 29, 30, 0, 20, 31, 26, 0),
	gsSPVertex(0x060008B0, 7, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 2, 0),
	gsSP2Triangles(4, 5, 6, 0, 4, 6, 3, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xC8, 0xFF),
	gsDPSetEnvColor(0x78, 0x64, 0x46, 0xFF),
	gsSPTexture(qu016(0.0457764), qu016(0.0457764), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPSetGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000920, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000950, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 1, 0),
	gsSP2Triangles(4, 3, 1, 0, 5, 6, 4, 0),
	gsSP2Triangles(6, 3, 4, 0, 0, 7, 8, 0),
	gsSP2Triangles(9, 10, 11, 0, 12, 13, 14, 0),
	gsSP2Triangles(15, 12, 14, 0, 6, 5, 16, 0),
	gsSP2Triangles(9, 11, 17, 0, 18, 9, 17, 0),
	gsSP2Triangles(13, 19, 20, 0, 21, 12, 15, 0),
	gsSP2Triangles(22, 1, 0, 0, 23, 20, 24, 0),
	gsSP2Triangles(5, 25, 26, 0, 25, 23, 26, 0),
	gsSP2Triangles(5, 26, 16, 0, 23, 25, 20, 0),
	gsSP2Triangles(20, 14, 13, 0, 11, 27, 21, 0),
	gsSP2Triangles(20, 19, 24, 0, 12, 21, 27, 0),
	gsSP2Triangles(11, 10, 27, 0, 17, 11, 21, 0),
	gsSP1Triangle(28, 29, 30, 0),
	gsSPVertex(0x06000B40, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 7, 9, 10, 0),
	gsSP2Triangles(11, 12, 5, 0, 2, 13, 0, 0),
	gsSP2Triangles(14, 15, 16, 0, 17, 1, 0, 0),
	gsSP2Triangles(0, 18, 17, 0, 10, 8, 7, 0),
	gsSP2Triangles(19, 15, 14, 0, 20, 15, 19, 0),
	gsSP2Triangles(14, 21, 22, 0, 5, 23, 11, 0),
	gsSP2Triangles(20, 24, 15, 0, 25, 4, 3, 0),
	gsSP2Triangles(3, 6, 25, 0, 23, 26, 27, 0),
	gsSP2Triangles(27, 11, 23, 0, 9, 17, 18, 0),
	gsSP2Triangles(18, 10, 9, 0, 22, 28, 29, 0),
	gsSP2Triangles(8, 25, 6, 0, 30, 22, 21, 0),
	gsSP1Triangle(28, 22, 30, 0),
	gsSPVertex(0x06000D30, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 2, 0),
	gsSP2Triangles(3, 1, 4, 0, 3, 4, 5, 0),
	gsSP2Triangles(5, 6, 7, 0, 5, 4, 6, 0),
	gsSP2Triangles(8, 0, 2, 0, 9, 10, 11, 0),
	gsSP2Triangles(12, 13, 14, 0, 12, 14, 15, 0),
	gsSP2Triangles(16, 7, 6, 0, 17, 9, 11, 0),
	gsSP2Triangles(17, 11, 18, 0, 19, 20, 13, 0),
	gsSP2Triangles(15, 14, 21, 0, 2, 3, 22, 0),
	gsSP2Triangles(23, 19, 24, 0, 25, 26, 7, 0),
	gsSP2Triangles(25, 24, 26, 0, 16, 25, 7, 0),
	gsSP2Triangles(19, 26, 24, 0, 13, 12, 19, 0),
	gsSP2Triangles(21, 27, 9, 0, 23, 20, 19, 0),
	gsSP2Triangles(27, 21, 14, 0, 27, 10, 9, 0),
	gsSP2Triangles(21, 9, 17, 0, 28, 29, 30, 0),
	gsSPVertex(0x06000F20, 31, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 10, 7, 0),
	gsSP2Triangles(3, 11, 12, 0, 2, 13, 0, 0),
	gsSP2Triangles(14, 15, 16, 0, 2, 1, 17, 0),
	gsSP2Triangles(17, 18, 2, 0, 7, 6, 9, 0),
	gsSP2Triangles(16, 15, 19, 0, 19, 15, 20, 0),
	gsSP2Triangles(21, 22, 16, 0, 12, 23, 3, 0),
	gsSP2Triangles(15, 24, 20, 0, 5, 4, 25, 0),
	gsSP2Triangles(25, 8, 5, 0, 26, 27, 23, 0),
	gsSP2Triangles(23, 12, 26, 0, 18, 17, 10, 0),
	gsSP2Triangles(10, 9, 18, 0, 28, 29, 21, 0),
	gsSP2Triangles(8, 25, 6, 0, 22, 21, 30, 0),
	gsSP1Triangle(30, 21, 29, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xD2, 0xD2, 0x82, 0xFF),
	gsDPSetEnvColor(0x64, 0x50, 0x1E, 0xFF),
	gsSPVertex(0x06001110, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(4, 3, 2, 0, 2, 1, 4, 0),
	gsSP2Triangles(6, 7, 8, 0, 8, 7, 9, 0),
	gsSP2Triangles(10, 6, 11, 0, 8, 11, 6, 0),
	gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
	gsSP2Triangles(15, 14, 13, 0, 13, 16, 15, 0),
	gsSP2Triangles(18, 19, 20, 0, 21, 22, 18, 0),
	gsSP2Triangles(20, 19, 23, 0, 19, 18, 22, 0),
	gsSP2Triangles(24, 25, 26, 0, 27, 28, 29, 0),
	gsSP1Triangle(30, 29, 28, 0),
	gsSPVertex(0x06001300, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
	gsSP2Triangles(4, 5, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(6, 8, 7, 0, 10, 11, 12, 0),
	gsSP2Triangles(13, 14, 15, 0, 10, 15, 14, 0),
	gsSP2Triangles(14, 11, 10, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 17, 16, 0, 20, 18, 21, 0),
	gsSP2Triangles(18, 20, 16, 0, 22, 23, 24, 0),
	gsSP2Triangles(25, 26, 27, 0, 23, 22, 27, 0),
	gsSP2Triangles(27, 26, 23, 0, 28, 29, 30, 0),
	gsSPVertex(0x060014F0, 18, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(1, 0, 4, 0, 6, 7, 8, 0),
	gsSP2Triangles(9, 10, 11, 0, 10, 9, 12, 0),
	gsSP2Triangles(13, 14, 12, 0, 12, 14, 10, 0),
	gsSP2Triangles(7, 6, 15, 0, 16, 8, 17, 0),
	gsSP1Triangle(17, 8, 7, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x00, 0x00, 0x00, 0xFF),
	gsDPSetEnvColor(0x8C, 0x82, 0x5A, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock_4b(0x06000300, G_IM_FMT_I, 16, 32, 0, G_TX_MIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_CLAMP, 4, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06001610, 24, 0),
	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
	gsSP2Triangles(4, 5, 6, 0, 6, 7, 4, 0),
	gsSP2Triangles(8, 9, 10, 0, 10, 11, 8, 0),
	gsSP2Triangles(12, 13, 14, 0, 14, 15, 12, 0),
	gsSP2Triangles(16, 17, 18, 0, 18, 19, 16, 0),
	gsSP2Triangles(20, 21, 22, 0, 22, 23, 20, 0),
	gsDPPipeSync(),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, TEXEL0, COMBINED, 0, SHADE, 0, 0, 0, 0, COMBINED),
	gsDPSetPrimColor(0, 0, 0xE6, 0xE6, 0xA0, 0xFF),
	gsDPSetEnvColor(0x5A, 0x3C, 0x50, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock_4b(0x06000000, G_IM_FMT_IA, 48, 32, 0, G_TX_NOMIRROR | G_TX_CLAMP, G_TX_NOMIRROR | G_TX_CLAMP, 6, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_CULL_BACK | G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPSetGeometryMode(G_LIGHTING),
	gsSPVertex(0x06001790, 12, 0),
	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
	gsSP2Triangles(4, 5, 6, 0, 6, 7, 4, 0),
	gsSP2Triangles(8, 9, 10, 0, 10, 11, 8, 0),
	gsSPEndDisplayList(),
}

object_gi_key_07E0.txt
{
	gsDPNoOp(),
	gsSPModifyVertex(560, 0x0000, 0x2D6F00FF),
	gsDPNoOp(),
	gsSPModifyVertex(677, 0x0000, 0x6F2D00FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(TEXEL0, PRIMITIVE, PRIM_LOD_FRAC, TEXEL0, 1, 1, PRIM_LOD_FRAC, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, qu08(0.5), 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x3C, 0x50, 0x5A, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.038147), qu016(0.038147), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032090, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 5, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(10, 11, 12, 0, 13, 14, 15, 0),
	gsSP2Triangles(16, 17, 18, 0, 9, 19, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 24, 25, 19, 0),
	gsSP2Triangles(4, 26, 27, 0, 4, 27, 5, 0),
	gsSP2Triangles(25, 28, 19, 0, 18, 9, 20, 0),
	gsSP2Triangles(26, 29, 30, 0, 26, 30, 27, 0),
	gsSP2Triangles(24, 19, 9, 0, 25, 24, 11, 0),
	gsSP2Triangles(31, 17, 16, 0, 17, 8, 7, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 2, 7, 0, 5, 8, 9, 0),
	gsSP2Triangles(10, 11, 12, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 15, 16, 0, 17, 18, 19, 0),
	gsSP2Triangles(17, 19, 20, 0, 21, 4, 22, 0),
	gsSP2Triangles(20, 19, 23, 0, 20, 23, 24, 0),
	gsSP2Triangles(19, 18, 25, 0, 19, 25, 23, 0),
	gsSP2Triangles(18, 17, 26, 0, 18, 26, 25, 0),
	gsSP2Triangles(17, 20, 24, 0, 17, 24, 26, 0),
	gsSP2Triangles(27, 28, 29, 0, 29, 28, 21, 0),
	gsSP2Triangles(2, 30, 0, 0, 30, 12, 11, 0),
	gsSP2Triangles(28, 5, 4, 0, 31, 9, 8, 0),
	gsSP2Triangles(9, 31, 2, 0, 31, 8, 12, 0),
	gsSP2Triangles(2, 31, 30, 0, 5, 9, 3, 0),
	gsSP1Triangle(3, 9, 29, 0),
	gsSPVertex(0x06000430, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
	gsSP2Triangles(4, 5, 6, 0, 7, 6, 8, 0),
	gsSP2Triangles(9, 8, 10, 0, 11, 12, 13, 0),
	gsSP2Triangles(14, 15, 16, 0, 17, 13, 15, 0),
	gsSP2Triangles(13, 12, 16, 0, 18, 12, 19, 0),
	gsSP2Triangles(20, 21, 22, 0, 21, 20, 23, 0),
	gsSP2Triangles(20, 24, 25, 0, 26, 6, 23, 0),
	gsSP2Triangles(3, 2, 27, 0, 3, 27, 28, 0),
	gsSP2Triangles(2, 1, 29, 0, 2, 29, 27, 0),
	gsSP2Triangles(1, 0, 30, 0, 1, 30, 29, 0),
	gsSP1Triangle(9, 31, 7, 0),
	gsSPVertex(0x06000630, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
	gsSP2Triangles(9, 11, 12, 0, 13, 1, 14, 0),
	gsSP2Triangles(15, 13, 14, 0, 16, 17, 13, 0),
	gsSP2Triangles(18, 17, 16, 0, 19, 1, 20, 0),
	gsSP2Triangles(7, 6, 21, 0, 6, 22, 15, 0),
	gsSP2Triangles(23, 24, 25, 0, 23, 25, 26, 0),
	gsSP1Triangle(27, 28, 8, 0),
	gsSPEndDisplayList(),
}

object_gi_m_arrow_0A30.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_16b, 9, 0xFFF20000),
	gsSPCullDisplayList(700, 23551 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 2, 0xFFEC0000),
	gsSPCullDisplayList(689 /* INVALID */, 20479 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 9, 0xFFF20000),
	gsSPCullDisplayList(700, 20479 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 2, 0xFFEC0000),
	gsSPCullDisplayList(689 /* INVALID */, 23423 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 15, 0xFFF90000),
	gsSPCullDisplayList(631 /* INVALID */, 24959 /* INVALID */),
	gsDPNoOpTag(0xFFF60000),
	gsSPModifyVertex(591 /* INVALID */, 0x00EC, 0x275FC2FF),
	gsDPNoOpTag(0xFFF60000),
	gsDPSetDepthImage(0x275FC2FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 15, 0xFFF90000),
	gsDPSetColorImage(5, G_IM_SIZ_16b, 1264, 0x275FC2FF),
	gsDPNoOp(),
	gsDPNoOpTag(0x475FEFFF),
	gsDPNoOp(),
	gsSPModifyVertex(546 /* INVALID */, 0x0000, 0x5D49F1FF),
	gsDPNoOpTag(0xFFF60000),
	gsDPSetDepthImage(0x5F32CBFF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x3C, 0x50, 0x78, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 1, 1),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 20, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
	gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
	gsSP2Triangles(2, 18, 0, 0, 5, 19, 3, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x3C, 0x3C, 0x5A, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000170, 8, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 4, 0),
	gsSP2Triangles(5, 0, 6, 0, 2, 6, 0, 0),
	gsSP2Triangles(4, 2, 1, 0, 7, 4, 3, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xE6, 0xBE, 0x46, 0xFF),
	gsDPSetEnvColor(0xA0, 0x6E, 0x3C, 0xFF),
	gsSPVertex(0x060001F0, 8, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(5, 3, 6, 0, 4, 2, 7, 0),
	gsSP2Triangles(2, 4, 0, 0, 4, 6, 3, 0),
	gsSP1Triangle(7, 2, 1, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0xA0, 0x96, 0xAA, 0xFF),
	gsSPClearGeometryMode(G_CULL_BACK),
	gsSPVertex(0x06000270, 12, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 2, 9, 0, 0),
	gsSP2Triangles(5, 10, 3, 0, 8, 11, 6, 0),
	gsSPEndDisplayList(),
}

object_gi_m_arrow_0A50.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_16b, 9, 0xFFF20000),
	gsSPCullDisplayList(700, 20479 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 2, 0xFFEC0000),
	gsSPCullDisplayList(689 /* INVALID */, 23423 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 15, 0xFFF90000),
	gsSPCullDisplayList(631 /* INVALID */, 24959 /* INVALID */),
	gsDPNoOpTag(0xFFF60000),
	gsSPModifyVertex(591 /* INVALID */, 0x00EC, 0x275FC2FF),
	gsDPNoOpTag(0xFFF60000),
	gsDPSetDepthImage(0x275FC2FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 15, 0xFFF90000),
	gsDPSetColorImage(5, G_IM_SIZ_16b, 1264, 0x275FC2FF),
	gsDPNoOp(),
	gsDPNoOpTag(0x475FEFFF),
	gsDPNoOp(),
	gsSPModifyVertex(546 /* INVALID */, 0x0000, 0x5D49F1FF),
	gsDPNoOpTag(0xFFF60000),
	gsDPSetDepthImage(0x5F32CBFF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x3C, 0x50, 0x78, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 1, 1),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 20, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
	gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
	gsSP2Triangles(2, 18, 0, 0, 5, 19, 3, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x3C, 0x3C, 0x5A, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000170, 8, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 4, 0),
	gsSP2Triangles(5, 0, 6, 0, 2, 6, 0, 0),
	gsSP2Triangles(4, 2, 1, 0, 7, 4, 3, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xE6, 0xBE, 0x46, 0xFF),
	gsDPSetEnvColor(0xA0, 0x6E, 0x3C, 0xFF),
	gsSPVertex(0x060001F0, 8, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(5, 3, 6, 0, 4, 2, 7, 0),
	gsSP2Triangles(2, 4, 0, 0, 4, 6, 3, 0),
	gsSP1Triangle(7, 2, 1, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0xA0, 0x96, 0xAA, 0xFF),
	gsSPClearGeometryMode(G_CULL_BACK),
	gsSPVertex(0x06000270, 12, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 2, 9, 0, 0),
	gsSP2Triangles(5, 10, 3, 0, 8, 11, 6, 0),
	gsSPEndDisplayList(),
}

object_gi_m_arrow_0AC0.txt
{
	gsDPNoOp(),
	gsSPModifyVertex(546 /* INVALID */, 0x0000, 0x5D49F1FF),
	gsDPNoOpTag(0xFFF60000),
	gsDPSetDepthImage(0x5F32CBFF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x3C, 0x50, 0x78, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 1, 1),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 20, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
	gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
	gsSP2Triangles(2, 18, 0, 0, 5, 19, 3, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x3C, 0x3C, 0x5A, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000170, 8, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 4, 0),
	gsSP2Triangles(5, 0, 6, 0, 2, 6, 0, 0),
	gsSP2Triangles(4, 2, 1, 0, 7, 4, 3, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xE6, 0xBE, 0x46, 0xFF),
	gsDPSetEnvColor(0xA0, 0x6E, 0x3C, 0xFF),
	gsSPVertex(0x060001F0, 8, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(5, 3, 6, 0, 4, 2, 7, 0),
	gsSP2Triangles(2, 4, 0, 0, 4, 6, 3, 0),
	gsSP1Triangle(7, 2, 1, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0xA0, 0x96, 0xAA, 0xFF),
	gsSPClearGeometryMode(G_CULL_BACK),
	gsSPVertex(0x06000270, 12, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 2, 9, 0, 0),
	gsSP2Triangles(5, 10, 3, 0, 8, 11, 6, 0),
	gsSPEndDisplayList(),
}

object_gi_m_arrow_0AD0.txt
{
	gsDPNoOpTag(0xFFF60000),
	gsDPSetDepthImage(0x5F32CBFF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x3C, 0x50, 0x78, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 1, 1),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 20, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
	gsSP2Triangles(12, 13, 14, 0, 15, 16, 17, 0),
	gsSP2Triangles(2, 18, 0, 0, 5, 19, 3, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x3C, 0x3C, 0x5A, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000170, 8, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 4, 0),
	gsSP2Triangles(5, 0, 6, 0, 2, 6, 0, 0),
	gsSP2Triangles(4, 2, 1, 0, 7, 4, 3, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xE6, 0xBE, 0x46, 0xFF),
	gsDPSetEnvColor(0xA0, 0x6E, 0x3C, 0xFF),
	gsSPVertex(0x060001F0, 8, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(5, 3, 6, 0, 4, 2, 7, 0),
	gsSP2Triangles(2, 4, 0, 0, 4, 6, 3, 0),
	gsSP1Triangle(7, 2, 1, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0xA0, 0x96, 0xAA, 0xFF),
	gsSPClearGeometryMode(G_CULL_BACK),
	gsSPVertex(0x06000270, 12, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 2, 9, 0, 0),
	gsSP2Triangles(5, 10, 3, 0, 8, 11, 6, 0),
	gsSPEndDisplayList(),
}

object_gi_milk_0FB0.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4075, 0x00130000),
	gsDPNoOpTag(0xD90071FF),
	gsDPNoOp(),
	gsSPModifyVertex(885, 0x0000, 0x7300DFFF),
	gsDPNoOpTag(0xFFED0000),
	gsSPModifyVertex(885, 0x00AB, 0x3C0099FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4075, 0xFFED0000),
	gsSPCullDisplayList(885, 19711 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4075, 0x00000000),
	gsDPNoOpTag(0x8900F2FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4075, 0xFFED0000),
	gsDPSetColorImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1771, 0xC40099FF),
	gsDPNoOpTag(0xFFED0000),
	gsSPModifyVertex(721 /* INVALID */, 0x00AB, 0x3C0099FF),
	gsDPNoOp(),
	gsSPModifyVertex(721 /* INVALID */, 0x0000, 0x7700F2FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4, 0xFFED0000),
	gsSPCullDisplayList(721 /* INVALID */, 19711 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4, 0x00000000),
	gsDPNoOpTag(0x8D00DFFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4, 0xFFED0000),
	gsDPSetColorImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1444, 0xC40099FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0x96, 0x5A, 0x00, 0xFF),
	gsDPSetEnvColor(0x5A, 0x32, 0x00, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032C90, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING),
	gsSPVertex(0x060006C0, 26, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 4, 0, 8, 9, 7, 0),
	gsSP2Triangles(10, 5, 11, 0, 12, 13, 14, 0),
	gsSP2Triangles(15, 11, 16, 0, 17, 16, 18, 0),
	gsSP2Triangles(2, 19, 0, 0, 19, 20, 0, 0),
	gsSP2Triangles(2, 21, 19, 0, 5, 10, 3, 0),
	gsSP2Triangles(4, 3, 6, 0, 7, 6, 8, 0),
	gsSP2Triangles(11, 15, 10, 0, 14, 22, 12, 0),
	gsSP2Triangles(22, 23, 12, 0, 14, 24, 22, 0),
	gsSP2Triangles(16, 17, 15, 0, 18, 25, 17, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0xFF, 0xFF, 0xC8, 0xFF),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032C90, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 1, 1),
	gsSPSetGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000860, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000890, 26, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 4, 0, 8, 9, 7, 0),
	gsSP2Triangles(10, 11, 9, 0, 11, 10, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(4, 3, 6, 0, 7, 6, 8, 0),
	gsSP2Triangles(9, 8, 10, 0, 14, 15, 16, 0),
	gsSP2Triangles(17, 15, 14, 0, 18, 14, 16, 0),
	gsSP2Triangles(15, 19, 16, 0, 20, 21, 22, 0),
	gsSP2Triangles(20, 23, 21, 0, 21, 24, 22, 0),
	gsSP1Triangle(22, 25, 20, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x00, 0x64, 0xAA, 0xFF),
	gsDPSetEnvColor(0xFF, 0xFF, 0xFF, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x06000000, G_IM_FMT_I, G_IM_SIZ_8b, 72, 24, 0, G_TX_NOMIRROR | G_TX_CLAMP, G_TX_NOMIRROR | G_TX_CLAMP, 7, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000A30, 8, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
	gsSP2Triangles(4, 5, 1, 0, 4, 1, 0, 0),
	gsSP2Triangles(6, 7, 5, 0, 6, 5, 4, 0),
	gsSPEndDisplayList(),
}

object_gi_milk_0FD0.txt
{
	gsDPNoOpTag(0xFFED0000),
	gsSPModifyVertex(885, 0x00AB, 0x3C0099FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4075, 0xFFED0000),
	gsSPCullDisplayList(885, 19711 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4075, 0x00000000),
	gsDPNoOpTag(0x8900F2FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4075, 0xFFED0000),
	gsDPSetColorImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1771, 0xC40099FF),
	gsDPNoOpTag(0xFFED0000),
	gsSPModifyVertex(721 /* INVALID */, 0x00AB, 0x3C0099FF),
	gsDPNoOp(),
	gsSPModifyVertex(721 /* INVALID */, 0x0000, 0x7700F2FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4, 0xFFED0000),
	gsSPCullDisplayList(721 /* INVALID */, 19711 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4, 0x00000000),
	gsDPNoOpTag(0x8D00DFFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4, 0xFFED0000),
	gsDPSetColorImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1444, 0xC40099FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0x96, 0x5A, 0x00, 0xFF),
	gsDPSetEnvColor(0x5A, 0x32, 0x00, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032C90, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING),
	gsSPVertex(0x060006C0, 26, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 4, 0, 8, 9, 7, 0),
	gsSP2Triangles(10, 5, 11, 0, 12, 13, 14, 0),
	gsSP2Triangles(15, 11, 16, 0, 17, 16, 18, 0),
	gsSP2Triangles(2, 19, 0, 0, 19, 20, 0, 0),
	gsSP2Triangles(2, 21, 19, 0, 5, 10, 3, 0),
	gsSP2Triangles(4, 3, 6, 0, 7, 6, 8, 0),
	gsSP2Triangles(11, 15, 10, 0, 14, 22, 12, 0),
	gsSP2Triangles(22, 23, 12, 0, 14, 24, 22, 0),
	gsSP2Triangles(16, 17, 15, 0, 18, 25, 17, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0xFF, 0xFF, 0xC8, 0xFF),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032C90, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 1, 1),
	gsSPSetGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000860, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000890, 26, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 4, 0, 8, 9, 7, 0),
	gsSP2Triangles(10, 11, 9, 0, 11, 10, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(4, 3, 6, 0, 7, 6, 8, 0),
	gsSP2Triangles(9, 8, 10, 0, 14, 15, 16, 0),
	gsSP2Triangles(17, 15, 14, 0, 18, 14, 16, 0),
	gsSP2Triangles(15, 19, 16, 0, 20, 21, 22, 0),
	gsSP2Triangles(20, 23, 21, 0, 21, 24, 22, 0),
	gsSP1Triangle(22, 25, 20, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x00, 0x64, 0xAA, 0xFF),
	gsDPSetEnvColor(0xFF, 0xFF, 0xFF, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x06000000, G_IM_FMT_I, G_IM_SIZ_8b, 72, 24, 0, G_TX_NOMIRROR | G_TX_CLAMP, G_TX_NOMIRROR | G_TX_CLAMP, 7, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000A30, 8, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
	gsSP2Triangles(4, 5, 1, 0, 4, 1, 0, 0),
	gsSP2Triangles(6, 7, 5, 0, 6, 5, 4, 0),
	gsSPEndDisplayList(),
}

object_gi_milk_1008.txt
{
	gsDPSetColorImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1771, 0xC40099FF),
	gsDPNoOpTag(0xFFED0000),
	gsSPModifyVertex(721 /* INVALID */, 0x00AB, 0x3C0099FF),
	gsDPNoOp(),
	gsSPModifyVertex(721 /* INVALID */, 0x0000, 0x7700F2FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4, 0xFFED0000),
	gsSPCullDisplayList(721 /* INVALID */, 19711 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4, 0x00000000),
	gsDPNoOpTag(0x8D00DFFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4, 0xFFED0000),
	gsDPSetColorImage(G_IM_FMT_CI, G_IM_SIZ_16b, 1444, 0xC40099FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0x96, 0x5A, 0x00, 0xFF),
	gsDPSetEnvColor(0x5A, 0x32, 0x00, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032C90, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING),
	gsSPVertex(0x060006C0, 26, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 4, 0, 8, 9, 7, 0),
	gsSP2Triangles(10, 5, 11, 0, 12, 13, 14, 0),
	gsSP2Triangles(15, 11, 16, 0, 17, 16, 18, 0),
	gsSP2Triangles(2, 19, 0, 0, 19, 20, 0, 0),
	gsSP2Triangles(2, 21, 19, 0, 5, 10, 3, 0),
	gsSP2Triangles(4, 3, 6, 0, 7, 6, 8, 0),
	gsSP2Triangles(11, 15, 10, 0, 14, 22, 12, 0),
	gsSP2Triangles(22, 23, 12, 0, 14, 24, 22, 0),
	gsSP2Triangles(16, 17, 15, 0, 18, 25, 17, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0xFF, 0xFF, 0xC8, 0xFF),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032C90, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 1, 1),
	gsSPSetGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000860, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000890, 26, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 4, 0, 8, 9, 7, 0),
	gsSP2Triangles(10, 11, 9, 0, 11, 10, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(4, 3, 6, 0, 7, 6, 8, 0),
	gsSP2Triangles(9, 8, 10, 0, 14, 15, 16, 0),
	gsSP2Triangles(17, 15, 14, 0, 18, 14, 16, 0),
	gsSP2Triangles(15, 19, 16, 0, 20, 21, 22, 0),
	gsSP2Triangles(20, 23, 21, 0, 21, 24, 22, 0),
	gsSP1Triangle(22, 25, 20, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x00, 0x64, 0xAA, 0xFF),
	gsDPSetEnvColor(0xFF, 0xFF, 0xFF, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x06000000, G_IM_FMT_I, G_IM_SIZ_8b, 72, 24, 0, G_TX_NOMIRROR | G_TX_CLAMP, G_TX_NOMIRROR | G_TX_CLAMP, 7, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000A30, 8, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
	gsSP2Triangles(4, 5, 1, 0, 4, 1, 0, 0),
	gsSP2Triangles(6, 7, 5, 0, 6, 5, 4, 0),
	gsSPEndDisplayList(),
}

object_gi_niwatori_0340.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_8b, 1788, 0xE5EDEEEB),
	gsSpecial1(0xD5CBE4F2, 0xE6D2D7C9),
	gsDPSetTile(7, G_IM_SIZ_32b, 506, 0x00D4, 3, 15, G_TX_MIRROR | G_TX_WRAP, 7, 11, G_TX_NOMIRROR | G_TX_CLAMP, 13, 15),
	gsSPDmaWrite(0x1B78, 0xE7DFCBCE, 0x0B7D),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 3321, 0xEAEEEBE6),
	(Gfx){0xCCC6E6F2, 0xE2CBCDC1},
	gsDPHalf2(0xDEF5EBD7),
	gsSpecial2(0xD4F3EDDD, 0xE6E0C7CF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 1526, 0xF1EFE9DE),
	(Gfx){0xC6C4E7ED, 0xDCC4C4BB},
	gsDPSetKeyGB(0xE4, 0xF3, qs48(-0.00390625), 0xE7, 0xCF, qs48(-1.09766)),
	(Gfx){0xD2F7EBD8, 0xE1DFC3D1},
	gsDPSetColorImage(7, G_IM_SIZ_4b, 753, 0xF4EEE8DA),
	(Gfx){0xC4C5E6E7, 0xD4BFBDB8},
	gsSPSetOtherModeLo(-465, 242, G_AC_THRESHOLD | G_ZS_PIXEL | AA_EN | IM_RD | CLR_ON_CVG | CVG_DST_SAVE | ZMODE_OPA | ALPHA_CVG_SEL | FORCE_BL | GBL_c1(G_BL_CLR_FOG, G_BL_A_SHADE, G_BL_CLR_FOG, G_BL_1MA) | GBL_c2(G_BL_CLR_BL, G_BL_A_SHADE, G_BL_CLR_FOG, G_BL_A_MEM)),
	(Gfx){0xCFF7E8D4, 0xDCDBBFD3},
	gsDPSetColorImage(6, G_IM_SIZ_32b, 747, 0xF7EBE5D3),
	(Gfx){0xC4C9E4DE, 0xCBB9B8B8},
	gsSPGeometryMode(G_SHADE | 0x00000002, G_ZBUFFER | G_CULL_BACK | G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR | G_SHADING_SMOOTH | G_CLIPPING | 0xF140D9C2),
	(Gfx){0xC8F5E5D0, 0xD3D3BBD3},
	gsDPSetEnvColor(0xF8, 0xE7, 0xE1, 0xCA),
	(Gfx){0xC6CEE0D4, 0xC3B4B3B8},
	(Gfx){0xCFFFFDFD, 0xF7E8D7BD},
	(Gfx){0xC0F0E2CF, 0xC8CAB7D0},
	gsDPSetTileSize(6, qu102(779.25), qu102(633.5), qu102(911.25), qu102(881.25)),
	(Gfx){0xC9D3DECD, 0xBEAFB1B9},
	(Gfx){0xCAFFF8FC, 0xFAE4D3BA},
	(Gfx){0xBBEAE1CF, 0xBFC2B6CC},
	gsSPSetOtherModeLo(-416, 232, 0x00000002 | G_ZS_PRIM | AA_EN | Z_CMP | Z_UPD | CLR_ON_CVG | CVG_DST_FULL | ZMODE_INTER | CVG_X_ALPHA | FORCE_BL | GBL_c1(G_BL_CLR_FOG, G_BL_A_FOG, G_BL_CLR_FOG, G_BL_0) | GBL_c2(G_BL_CLR_FOG, G_BL_A_FOG, G_BL_CLR_MEM, G_BL_1)),
	(Gfx){0xC8D4D9C6, 0xB9AFAFB8},
	(Gfx){0xC1FFF2F5, 0xF9DECCB4},
	(Gfx){0xB2E0DCCF, 0xB8BDB9C3},
	(Gfx){0xD1ABD3EA, 0xF3DACCB6},
	(Gfx){0xC2D0D6C3, 0xB3B2ADB3},
	(Gfx){0xB9FFEEE8, 0xF5D8C4AF},
	(Gfx){0xA9D5D6CF, 0xB7BCC1BB},
	(Gfx){0xC3A6CBEE, 0xF1D9C6B0},
	(Gfx){0xB9C7D2C4, 0xAFB7AEAC},
	(Gfx){0xB4FFEDD9, 0xEDD4BDAA},
	(Gfx){0xA4C9CECE, 0xBCC1CCB5},
	(Gfx){0xB4A0C1F1, 0xF0D9C3AE},
	(Gfx){0xAFBBCAC7, 0xAEC3B6A5},
	(Gfx){0xAFFCEEC9, 0xE3CFB7A3},
	(Gfx){0x9DBDC7CC, 0xC6C7D8B5},
	(Gfx){0xAB9DB4F2, 0xF0DCC4AE},
	(Gfx){0xA6AEC1CA, 0xACD1BF9F},
	(Gfx){0xAAFBF2BE, 0xD9CBAF9E},
	(Gfx){0x98B4C2C7, 0xD2CFE5B9},
	(Gfx){0xA59AA8F1, 0xF0E0C9B2},
	(Gfx){0x9EA2B6CD, 0xB0E2CE9B},
	(Gfx){0xA6F7F8B3, 0xCEC9AC9A},
	(Gfx){0x94ACBFC4, 0xDCD2EBBE},
	(Gfx){0xA2979FEE, 0xEEE1D2B8},
	(Gfx){0x989BADCF, 0xBAF3DC97},
	(Gfx){0xA1F1FEA8, 0xC4CAAE99},
	(Gfx){0x90A6BFC6, 0xDFCDE5C0},
	(Gfx){0xA2959CEB, 0xEBE1D9BD},
	(Gfx){0x969AA9D0, 0xC6FDE396},
	(Gfx){0x9EEEFFA3, 0xBECDB399},
	(Gfx){0x8DA3C2C9, 0xDDC4D9BD},
	(Gfx){0xA49498E7, 0xE5DDDEC3},
	(Gfx){0x959FA7D2, 0xD7FFEC96},
	(Gfx){0x99E4FF9E, 0xB9D2BEA0},
	(Gfx){0x8AA2C7D0, 0xD3B3C4B5},
	(Gfx){0xA79295E4, 0xDFD7E1C7},
	(Gfx){0x93A8AAD3, 0xE6FFF195},
	(Gfx){0x95D8FD98, 0xB7D6CBAA},
	(Gfx){0x88A1CCD9, 0xC39FABA8},
	(Gfx){0xA88E93E2, 0xD8D0DFC7},
	(Gfx){0x91B1AFD3, 0xEFFFF191},
	(Gfx){0x90CBF293, 0xB7D8D4B1},
	(Gfx){0x87A0CEDE, 0xB28E969A},
	(Gfx){0xA68B8FDC, 0xD0C8DAC7},
	(Gfx){0x91BAB6D2, 0xF4FBEF90},
	(Gfx){0x8AB9DD91, 0xB8D8D8B6},
	(Gfx){0x889ECDE2, 0xA480868C},
	(Gfx){0xA0868AD6, 0xC9C3D5C6},
	(Gfx){0x90BFBDD0, 0xF5F7EC8D},
	(Gfx){0x83A8C78F, 0xB9D5D7B5},
	(Gfx){0x889BC9E1, 0x99797E84},
	(Gfx){0x968286CE, 0xC3C1D0C7},
	(Gfx){0x91C2C6D1, 0xF2F3E989},
	(Gfx){0x7B97B092, 0xB9D2CFB0},
	(Gfx){0x8E9AC3DF, 0x9578817F},
	(Gfx){0x8B7E82C8, 0xBFC0CCCA},
	(Gfx){0x93C3D0D5, 0xEEEEE586},
	(Gfx){0x76889E98, 0xB7CFC5A9},
	(Gfx){0x989BBEDE, 0x957A8A7B},
	(Gfx){0x807B7EC2, 0xBFC0CBCC},
	(Gfx){0x93BFD4D9, 0xEBEBE184},
	(Gfx){0x737F969D, 0xB4CCBB9F},
	(Gfx){0x9D9CB9DC, 0x987E9577},
	(Gfx){0x75767CB5, 0xB8B9C4C7},
	(Gfx){0x91B4D0D6, 0xDEDED27E},
	(Gfx){0x6E748A9D, 0xACC1A998},
	(Gfx){0xA69AB0CF, 0x9A88A173},
	(Gfx){0x6F727AA8, 0xB0B0BCBF},
	(Gfx){0x90A8C7D0, 0xD2D2C375},
	(Gfx){0x6A6E829C, 0xA3B79A95},
	(Gfx){0xAB98A9C1, 0x9A93AA6F},
	(Gfx){0x6D6D789D, 0xA7A6B4B6},
	(Gfx){0x8C9CBBC7, 0xC6C6B56C},
	(Gfx){0x686B7E95, 0x9CAC9095},
	(Gfx){0xAB96A2B3, 0x989CAC6E},
	(Gfx){0x6D6A7993, 0x9F9FACAC},
	(Gfx){0x8993B0BB, 0xBBBBA967},
	(Gfx){0x6869798E, 0x96A38897},
	(Gfx){0xAC949CA6, 0x99A3AE73},
	(Gfx){0x6F68788A, 0x9696A4A1},
	(Gfx){0x858BA4B0, 0xB0B09D64},
	(Gfx){0x68687387, 0x909B8398},
	(Gfx){0xA9909498, 0x96A5A97A},
	(Gfx){0x72667783, 0x8D8F9D96},
	(Gfx){0x81859AA3, 0xA6A69366},
	(Gfx){0x6B686E81, 0x8B937F95},
	(Gfx){0xA28C8D8E, 0x96A3A383},
	(Gfx){0x7567747D, 0x868A978E},
	(Gfx){0x7C819395, 0x9C9C8E6D},
	(Gfx){0x6F686A7D, 0x868C798F},
	(Gfx){0x9A888687, 0x959C9C89},
	(Gfx){0x74666F78, 0x7F869087},
	(Gfx){0x767D8C8A, 0x93938A72},
	(Gfx){0x70656879, 0x7F867486},
	(Gfx){0x91838082, 0x91939389},
	(Gfx){0x756A6D74, 0x7B828A81},
	(Gfx){0x737B867E, 0x8A8A8679},
	(Gfx){0x72646776, 0x7B82707C},
	(Gfx){0x887E7C80, 0x8A8A8A88},
	(Gfx){0x746C6A71, 0x767D827B},
	(Gfx){0x6F787F74, 0x8282817A},
	(Gfx){0x71626673, 0x767D6D74},
	(Gfx){0x7E79787E, 0x82828282},
	(Gfx){0x716C686D, 0x72777A75},
	(Gfx){0x6B73776C, 0x797A7A76},
	(Gfx){0x6D60656F, 0x71776A6D},
	(Gfx){0x76737279, 0x7A7A7A79},
	(Gfx){0x6D6A6668, 0x6D72736F},
	(Gfx){0x696D6E65, 0x71737371},
	(Gfx){0x695F646B, 0x6D726768},
	(Gfx){0x6F6E6D73, 0x72727372},
	(Gfx){0x68666365, 0x686C6C6A},
	(Gfx){0x65676760, 0x696C6C6A},
	(Gfx){0x645F6266, 0x686C6564},
	(Gfx){0x6868666C, 0x6A6A6C6B},
	(Gfx){0x5D5C5C5C, 0x5D5D5D5D},
	(Gfx){0x5C5C5C5A, 0x5C5D5D5D},
	(Gfx){0x5C5B5C5C, 0x5D5D5C5C},
	(Gfx){0x5D5D5C5D, 0x5D5D5D5D},
	(Gfx){0x4D4D4D4D, 0x4D4D4D4D},
	(Gfx){0x4D4D4D4D, 0x4D4D4D4D},
	(Gfx){0x4D4D4D4D, 0x4D4D4D4D},
	(Gfx){0x4D4D4D4D, 0x4D4D4D4D},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x00000001),
	gsBranchZ(642 /* INVALID */, -341, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x00000408),
	(Gfx){0x0B0D0D0D, 0x0C090401},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x01050B0E),
	(Gfx){0x0F0F0F0F, 0x0F0E0B05},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x050B0F0F),
	(Gfx){0x0F0F0F0F, 0x0F0F0F0C},
	gsSP1Quadrangle(1 /* INVALID */, 0 /* INVALID */, 0, 0, 0),
	gsDPNoOp(),
	gsDPNoOpTag(0x0B0F0F0F),
	(Gfx){0x0F0F0F0F, 0x0F0F0F0F},
	(Gfx){0x0E0C0A07, 0x02000000},
	gsDPNoOp(),
	gsDPNoOpTag(0x0E0F2F5F),
	(Gfx){0x6F4F1F0F, 0x0F0F0F0F},
	(Gfx){0x0F0F0E0A, 0x03000000},
	gsDPNoOp(),
	gsDPNoOpTag(0x0F2F8FDF),
	gsDPSetColorImage(6, G_IM_SIZ_8b, 3872, 0x0F0F0F0F),
	(Gfx){0x0F0F0B05, 0x01000000},
	gsDPNoOp(),
	gsDPNoOpTag(0x0F3FBFFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3872, 0x0F0F0F0F),
	(Gfx){0x0F0F0D0B, 0x08030000},
	gsDPNoOp(),
	gsDPNoOpTag(0x0F2FAFFF),
	gsDPSetColorImage(6, G_IM_SIZ_32b, 3872, 0x0F0F0F0F),
	(Gfx){0x0F0F0F0E, 0x0A040000},
	gsDPNoOp(),
	gsDPNoOpTag(0x0F1F5F9F),
	(Gfx){0xBF7F3F0F, 0x0F0F0F0F},
	(Gfx){0x0F0E0904, 0x02000000},
	gsDPNoOp(),
	gsDPNoOpTag(0x0D0F1F2F),
	(Gfx){0x2F1F0F0F, 0x0F0F0F0F},
	(Gfx){0x0E080200, 0x00000000},
	gsDPNoOp(),
	gsDPNoOpTag(0x090E0F0F),
	(Gfx){0x0F0F0F0F, 0x0F0F0F0F},
	(Gfx){0x0A030000, 0x00000000},
	gsDPNoOp(),
	gsDPNoOpTag(0x040A0E0F),
	(Gfx){0x0F0F0F0F, 0x0F0F0F0A},
	gsBranchZ(0, 1, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOp(),
	gsDPNoOpTag(0x0004090D),
	(Gfx){0x0F0F0F0F, 0x0F0E0A04},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x00000306),
	(Gfx){0x0A0B0B0B, 0x0A070300},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x00000001),
	gsSPModifyVertex(385 /* INVALID */, 0x0003, 0x02010000),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0xFFF80000),
	gsSP2Triangles(0, 2, 49 /* INVALID */, 0, 27 /* INVALID */, 6, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 2, 0xFFEE0000),
	gsSP2Triangles(36, 2 /* INVALID */, 118 /* INVALID */, 0, 13, 120, 127 /* INVALID */, 0),
	gsDPNoOp(),
	gsSP2Triangles(0, 1 /* INVALID */, 42 /* INVALID */, 0, 59, 118, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4086, 0xFFF20000),
	gsSP1Quadrangle(117 /* INVALID */, 3, 100 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x00190000),
	(Gfx){0x0C0000E6, 0x00F477FF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4078, 0x00060000),
	(Gfx){0x0A3504D9, 0x98D92DFF},
	gsDPNoOpTag(0x00190000),
	(Gfx){0x0C000232, 0x00D06EFF},
	gsDPNoOpTag(0x001A0000),
	(Gfx){0x0C00FFF8, 0x00FD77FF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 10, 0x00190000),
	(Gfx){0x0929FF89, 0xA60E4EFF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 15, 0x000F0000),
	gsSP1Quadrangle(37 /* INVALID */, 0, 12 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x001A0000),
	gsSP2Triangles(0, 127, 105, 0, 40 /* INVALID */, 44, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x00140000),
	gsSP2Triangles(0, 127, 114, 0, 54, 26, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFEF0000),
	(Gfx){0x0C00085F, 0x009DBEFF},
	gsDPNoOpTag(0xFFE70000),
	gsSP2Triangles(0, 4, 0, 0, 121, 72 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x00120000),
	(Gfx){0x0C000400, 0x00922EFF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4069, 0x00000000),
	(Gfx){0x0B2B065D, 0xC29BEFFF},
	gsDPNoOp(),
	(Gfx){0x0C000674, 0x0089FCFF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4094, 0x00090000),
	(Gfx){0x093202CD, 0x9332FDFF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 22, 0x000B0000),
	gsSP2Triangles(23, 0, 23 /* INVALID */, 0, 30 /* INVALID */, 107, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x00040000),
	gsSP2Triangles(0, 0 /* INVALID */, 95 /* INVALID */, 0, 29 /* INVALID */, 76, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4096, 0xFFFE0000),
	gsSPLineW3D(103, 2, 9, 0),
	gsDPNoOp(),
	gsSP2Triangles(0, 1 /* INVALID */, 101, 0, 59, 118, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3, 0xFFEE0000),
	gsSP1Quadrangle(61 /* INVALID */, 3, 116 /* INVALID */, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4085, 0xFFE80000),
	(Gfx){0x0A7506E8, 0x961FD3FF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4073, 0xFFF50000),
	(Gfx){0x0AE70529, 0x8FE5E6FF},
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4086, 0x00000000),
	(Gfx){0x09CF03D0, 0x8A0EFAFF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4094, 0x00090000),
	(Gfx){0x091E0282, 0x9332FDFF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4078, 0x00060000),
	(Gfx){0x0A870303, 0x98D92DFF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4086, 0xFFF20000),
	(Gfx){0x0A5C0586, 0x71DA04FF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4078, 0x00060000),
	(Gfx){0x0A870303, 0x71E31AFF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4073, 0xFFF50000),
	(Gfx){0x0AE70529, 0x72E011FF},
	gsDPNoOp(),
	gsSP2Triangles(0, 1 /* INVALID */, 101, 0, 58, 116, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4086, 0xFFF20000),
	(Gfx){0x0A5C0586, 0x71DA04FF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3, 0xFFEE0000),
	gsSP1Quadrangle(61 /* INVALID */, 3, 124 /* INVALID */, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4073, 0xFFF50000),
	(Gfx){0x0AE70529, 0x72E011FF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4085, 0xFFE80000),
	(Gfx){0x0A7506E8, 0x72DC07FF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 2, 0xFFEE0000),
	gsSP2Triangles(36, 2 /* INVALID */, 118 /* INVALID */, 0, 13, 120, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFF80000),
	gsSP2Triangles(0, 2, 49 /* INVALID */, 0, 27 /* INVALID */, 6, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFF40000),
	gsSP2Triangles(0, 1 /* INVALID */, 17, 0, 7, 1, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFEF0000),
	gsSP2Triangles(0, 2, 34 /* INVALID */, 0, 10, 124 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE90000),
	gsSP2Triangles(0, 2, 83, 0, 5, 118 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE90000),
	gsSP2Triangles(0, 2 /* INVALID */, 53, 0, 7, 116 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE10000),
	gsSP2Triangles(0, 3, 37 /* INVALID */, 0, 4, 120 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE30000),
	gsSP2Triangles(0, 3, 93 /* INVALID */, 0, 6 /* INVALID */, 117 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFDC0000),
	gsSP2Triangles(0, 3 /* INVALID */, 111, 0, 5 /* INVALID */, 121, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE70000),
	gsSP2Triangles(0, 4, 0, 0, 121, 72 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOp(),
	gsSP2Triangles(0, 1 /* INVALID */, 42 /* INVALID */, 0, 59, 118, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFEE0000),
	gsSP2Triangles(36, 2 /* INVALID */, 118 /* INVALID */, 0, 13, 120, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFF80000),
	gsSP2Triangles(0, 2, 49 /* INVALID */, 0, 27 /* INVALID */, 6, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFF20000),
	gsSP1Quadrangle(117 /* INVALID */, 3, 100 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x00190000),
	(Gfx){0x0C000232, 0x00D06EFF},
	gsDPNoOpTag(0x00060000),
	(Gfx){0x0A3504D9, 0x68D92DFF},
	gsDPNoOpTag(0x00190000),
	(Gfx){0x0C0000E6, 0x00F477FF},
	gsDPNoOpTag(0x00190000),
	(Gfx){0x0929FF89, 0x590D4EFF},
	gsDPNoOpTag(0x001A0000),
	(Gfx){0x0C00FFF8, 0x00FD77FF},
	gsDPNoOpTag(0x00140000),
	gsSP2Triangles(0, 127, 114, 0, 54, 26, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x001A0000),
	gsSP2Triangles(0, 127, 105, 0, 40 /* INVALID */, 44, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x000F0000),
	gsSP1Quadrangle(37 /* INVALID */, 0, 12 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFEF0000),
	(Gfx){0x0C00085F, 0x009DBEFF},
	gsDPNoOp(),
	(Gfx){0x0C000674, 0x0089FCFF},
	gsDPNoOp(),
	(Gfx){0x0B2B065D, 0x3E9BEFFF},
	gsDPNoOpTag(0x00120000),
	(Gfx){0x0C000400, 0x00922EFF},
	gsDPNoOpTag(0x00090000),
	(Gfx){0x093202CD, 0x6D32FDFF},
	gsDPNoOpTag(0x00040000),
	gsSP2Triangles(0, 0 /* INVALID */, 95 /* INVALID */, 0, 29 /* INVALID */, 76, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x000B0000),
	gsSP2Triangles(23, 0, 23 /* INVALID */, 0, 30 /* INVALID */, 107, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x00090000),
	(Gfx){0x093202CD, 0x6D32FDFF},
	gsDPNoOpTag(0x00190000),
	(Gfx){0x0929FF89, 0x590D4EFF},
	gsDPNoOpTag(0x00060000),
	(Gfx){0x0A3504D9, 0x68D92DFF},
	gsDPNoOpTag(0x00120000),
	(Gfx){0x0C000400, 0x00922EFF},
	gsDPNoOp(),
	(Gfx){0x0B2B065D, 0x3E9BEFFF},
	gsDPNoOpTag(0xFFF20000),
	gsSP1Quadrangle(117 /* INVALID */, 3, 100 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x000F0000),
	gsSP1Quadrangle(37 /* INVALID */, 0, 12 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOp(),
	gsSP2Triangles(0, 1 /* INVALID */, 42 /* INVALID */, 0, 59, 118, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x001A0000),
	gsSP2Triangles(0, 127, 105, 0, 40 /* INVALID */, 44, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x00190000),
	(Gfx){0x0C000232, 0x00D06EFF},
	gsDPNoOpTag(0x00140000),
	gsSP2Triangles(0, 127, 114, 0, 54, 26, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFEE0000),
	gsSP2Triangles(36, 2 /* INVALID */, 118 /* INVALID */, 0, 13, 120, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE70000),
	gsSP2Triangles(0, 4, 0, 0, 121, 72 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFEF0000),
	(Gfx){0x0C00085F, 0x009DBEFF},
	gsDPNoOp(),
	(Gfx){0x0C000674, 0x0089FCFF},
	gsDPNoOpTag(0xFFEE0000),
	gsSP1Quadrangle(61 /* INVALID */, 3, 116 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOp(),
	gsSP2Triangles(0, 1 /* INVALID */, 101, 0, 59, 118, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFFE0000),
	gsSPLineW3D(103, 2, 9, 0),
	gsDPNoOp(),
	(Gfx){0x09CF03D0, 0x760EFAFF},
	gsDPNoOpTag(0xFFF50000),
	(Gfx){0x0AE70529, 0x71E5E6FF},
	gsDPNoOpTag(0xFFE80000),
	(Gfx){0x0A7506E8, 0x6A1FD3FF},
	gsDPNoOpTag(0x00090000),
	(Gfx){0x091E0282, 0x6D32FDFF},
	gsDPNoOpTag(0x00060000),
	(Gfx){0x0A870303, 0x68D92DFF},
	gsDPNoOpTag(0xFFF50000),
	(Gfx){0x0AE70529, 0x8EE011FF},
	gsDPNoOpTag(0x00060000),
	(Gfx){0x0A870303, 0xD89A30FF},
	gsDPNoOpTag(0xFFF20000),
	(Gfx){0x0A5C0586, 0x8FDA04FF},
	gsDPNoOpTag(0xFFEE0000),
	gsSP1Quadrangle(61 /* INVALID */, 3, 124 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOp(),
	gsSP2Triangles(0, 1 /* INVALID */, 101, 0, 104 /* INVALID */, 116, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE80000),
	(Gfx){0x0A7506E8, 0x8EDC07FF},
	gsDPNoOpTag(0xFFF40000),
	gsSP2Triangles(0, 1 /* INVALID */, 17, 0, 7, 1, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFF80000),
	gsSP2Triangles(0, 2, 49 /* INVALID */, 0, 27 /* INVALID */, 6, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFEE0000),
	gsSP2Triangles(36, 2 /* INVALID */, 118 /* INVALID */, 0, 13, 120, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFEF0000),
	gsSP2Triangles(0, 2, 34 /* INVALID */, 0, 10, 124 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE90000),
	gsSP2Triangles(0, 2, 83, 0, 5, 118 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE90000),
	gsSP2Triangles(0, 2 /* INVALID */, 53, 0, 7, 116 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE10000),
	gsSP2Triangles(0, 3, 37 /* INVALID */, 0, 4, 120 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE30000),
	gsSP2Triangles(0, 3, 93 /* INVALID */, 0, 6 /* INVALID */, 117 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFDC0000),
	gsSP2Triangles(0, 3 /* INVALID */, 111, 0, 5 /* INVALID */, 121, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE70000),
	gsSP2Triangles(0, 4, 0, 0, 121, 117 /* INVALID */, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4066, 0x000D0000),
	gsSPCullDisplayList(994 /* INVALID */, 3071 /* INVALID */),
	gsDPNoOp(),
	gsSPCullDisplayList(910 /* INVALID */, 3967 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4066, 0x00080000),
	gsSPCullDisplayList(928, 3967 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4066, 0xFFFF0000),
	gsSPCullDisplayList(912, 21375 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4066, 0x00080000),
	gsSPCullDisplayList(928, 26111 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4069, 0x00000000),
	gsSPCullDisplayList(906 /* INVALID */, 23167 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4066, 0x00080000),
	gsSPCullDisplayList(928, 3967 /* INVALID */),
	gsDPNoOp(),
	gsSPCullDisplayList(910 /* INVALID */, 3967 /* INVALID */),
	gsDPNoOp(),
	gsSPCullDisplayList(910 /* INVALID */, 18047 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4066, 0x000D0000),
	gsSPCullDisplayList(994 /* INVALID */, 32127 /* INVALID */),
	gsDPNoOp(),
	gsSPModifyVertex(906 /* INVALID */, 0x00CD, 0x2D50B4FF),
	gsDPNoOpTag(0x00080000),
	gsSPModifyVertex(928, 0x0065, 0x05741EFF),
	gsDPNoOpTag(0x00080000),
	gsSPModifyVertex(928, 0x0065, 0x38A4CBFF),
	gsDPNoOpTag(0xFFFF0000),
	gsSPModifyVertex(912, 0x00E3, 0x04B2A6FF),
	gsDPNoOpTag(0x000D0000),
	gsSPModifyVertex(994 /* INVALID */, 0x00CF, 0x0A7517FF),
	gsDPNoOpTag(0x000D0000),
	gsSPModifyVertex(994 /* INVALID */, 0x00CF, 0xD790FAFF),
	gsDPNoOpTag(0x001A0000),
	gsSPVertex(0x026047FF, 0, 57),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 10, 0x00190000),
	gsDPNoOpTag(0xA6402FFF),
	gsDPNoOpTag(0x00240000),
	gsSPVertex(0x026047FF, 0, 14),
	gsDPNoOpTag(0x00240000),
	gsSPVertex(0x029029FF, 0, 14),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 10, 0x00190000),
	gsDPNoOpTag(0xA6B61BFF),
	gsDPNoOpTag(0x001A0000),
	gsSPVertex(0x029029FF, 0, 99),
	gsDPNoOpTag(0x00190000),
	gsSPVertex(0x5DB91AFF, 128, -53),
	gsDPNoOpTag(0x00190000),
	gsSPVertex(0x5C3D2DFF, 128, -53),
	gsDPNoOpTag(0x00110000),
	gsSPVertex(0x751010FF, 0, 8),
	gsDPNoOpTag(0x00140000),
	gsSPVertex(0x750C14FF, 0, 51),
	gsDPNoOpTag(0x000B0000),
	gsSPModifyVertex(596 /* INVALID */, 0x00CF, 0x760CF4FF),
	gsDPNoOpTag(0x000B0000),
	gsSPCullDisplayList(558, 31103 /* INVALID */),
	gsDPNoOpTag(0x00090000),
	gsSPCullDisplayList(585 /* INVALID */, 30335 /* INVALID */),
	gsDPNoOpTag(0x00030000),
	gsSPCullDisplayList(627 /* INVALID */, 30847 /* INVALID */),
	gsDPNoOpTag(0x00050000),
	gsSPCullDisplayList(648, 29183 /* INVALID */),
	gsDPNoOpTag(0x00010000),
	gsSPCullDisplayList(703, 30335 /* INVALID */),
	gsDPNoOpTag(0x00040000),
	gsSPCullDisplayList(733 /* INVALID */, 30975 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 22, 0x000B0000),
	gsDPSetColorImage(G_IM_FMT_YUV, G_IM_SIZ_16b, 1194, 0x8A0CF4FF),
	gsDPNoOpTag(0x00140000),
	gsSPVertex(0x8B0C14FF, 0, 51),
	gsDPNoOpTag(0x00110000),
	gsSPVertex(0x8B1010FF, 0, 8),
	gsDPNoOpTag(0x000B0000),
	gsSPCullDisplayList(558, 31103 /* INVALID */),
	gsDPNoOpTag(0x00090000),
	gsSPCullDisplayList(585 /* INVALID */, 30335 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 22, 0x000B0000),
	gsSPCullDisplayList(596 /* INVALID */, 31359 /* INVALID */),
	gsDPNoOpTag(0x00030000),
	gsSPCullDisplayList(627 /* INVALID */, 30847 /* INVALID */),
	gsDPNoOpTag(0x00050000),
	gsSPCullDisplayList(648, 29183 /* INVALID */),
	gsDPNoOpTag(0x00010000),
	gsSPCullDisplayList(703, 30335 /* INVALID */),
	gsDPNoOpTag(0x00040000),
	gsSPCullDisplayList(733 /* INVALID */, 30975 /* INVALID */),
	gsDPNoOpTag(0x001A0000),
	gsSPVertex(0x007128FF, 0, 111),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4095, 0x00200000),
	gsDPNoOpTag(0x9E0D43FF),
	gsDPNoOpTag(0x00200000),
	gsSPVertex(0x620D43FF, 240, -123),
	gsDPNoOpTag(0x001E0000),
	gsSPVertex(0x00AF58FF, 0, 26),
	gsDPNoOpTag(0x00190000),
	gsSPVertex(0x8BF4EBFF, 0, 46),
	gsDPNoOpTag(0x00190000),
	gsSPVertex(0x75F4EBFF, 0, 46),
	gsDPNoOpTag(0x00140000),
	gsSPVertex(0x1C584CFF, 159, -137),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 15, 0x000F0000),
	gsBranchZ(334 /* INVALID */, 0.0388828, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0x001A0000),
	gsDPSetDepthImage(0x005158FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 10, 0x00190000),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1259, 0xA6164BFF),
	gsDPNoOpTag(0x000F0000),
	gsBranchZ(334 /* INVALID */, -0.0415294, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0x00190000),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1259, 0x5A164BFF),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xDC, 0xFF),
	gsDPSetEnvColor(0x32, 0x32, 0x14, 0xFF),
	gsSPEndDisplayList(),
}

object_gi_niwatori_03C0.txt
{
	gsDPSetColorImage(6, G_IM_SIZ_32b, 747, 0xF7EBE5D3),
	(Gfx){0xC4C9E4DE, 0xCBB9B8B8},
	gsSPGeometryMode(G_SHADE | 0x00000002, G_ZBUFFER | G_CULL_BACK | G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR | G_SHADING_SMOOTH | G_CLIPPING | 0xF140D9C2),
	(Gfx){0xC8F5E5D0, 0xD3D3BBD3},
	gsDPSetEnvColor(0xF8, 0xE7, 0xE1, 0xCA),
	(Gfx){0xC6CEE0D4, 0xC3B4B3B8},
	(Gfx){0xCFFFFDFD, 0xF7E8D7BD},
	(Gfx){0xC0F0E2CF, 0xC8CAB7D0},
	gsDPSetTileSize(6, qu102(779.25), qu102(633.5), qu102(911.25), qu102(881.25)),
	(Gfx){0xC9D3DECD, 0xBEAFB1B9},
	(Gfx){0xCAFFF8FC, 0xFAE4D3BA},
	(Gfx){0xBBEAE1CF, 0xBFC2B6CC},
	gsSPSetOtherModeLo(-416, 232, 0x00000002 | G_ZS_PRIM | AA_EN | Z_CMP | Z_UPD | CLR_ON_CVG | CVG_DST_FULL | ZMODE_INTER | CVG_X_ALPHA | FORCE_BL | GBL_c1(G_BL_CLR_FOG, G_BL_A_FOG, G_BL_CLR_FOG, G_BL_0) | GBL_c2(G_BL_CLR_FOG, G_BL_A_FOG, G_BL_CLR_MEM, G_BL_1)),
	(Gfx){0xC8D4D9C6, 0xB9AFAFB8},
	(Gfx){0xC1FFF2F5, 0xF9DECCB4},
	(Gfx){0xB2E0DCCF, 0xB8BDB9C3},
	(Gfx){0xD1ABD3EA, 0xF3DACCB6},
	(Gfx){0xC2D0D6C3, 0xB3B2ADB3},
	(Gfx){0xB9FFEEE8, 0xF5D8C4AF},
	(Gfx){0xA9D5D6CF, 0xB7BCC1BB},
	(Gfx){0xC3A6CBEE, 0xF1D9C6B0},
	(Gfx){0xB9C7D2C4, 0xAFB7AEAC},
	(Gfx){0xB4FFEDD9, 0xEDD4BDAA},
	(Gfx){0xA4C9CECE, 0xBCC1CCB5},
	(Gfx){0xB4A0C1F1, 0xF0D9C3AE},
	(Gfx){0xAFBBCAC7, 0xAEC3B6A5},
	(Gfx){0xAFFCEEC9, 0xE3CFB7A3},
	(Gfx){0x9DBDC7CC, 0xC6C7D8B5},
	(Gfx){0xAB9DB4F2, 0xF0DCC4AE},
	(Gfx){0xA6AEC1CA, 0xACD1BF9F},
	(Gfx){0xAAFBF2BE, 0xD9CBAF9E},
	(Gfx){0x98B4C2C7, 0xD2CFE5B9},
	(Gfx){0xA59AA8F1, 0xF0E0C9B2},
	(Gfx){0x9EA2B6CD, 0xB0E2CE9B},
	(Gfx){0xA6F7F8B3, 0xCEC9AC9A},
	(Gfx){0x94ACBFC4, 0xDCD2EBBE},
	(Gfx){0xA2979FEE, 0xEEE1D2B8},
	(Gfx){0x989BADCF, 0xBAF3DC97},
	(Gfx){0xA1F1FEA8, 0xC4CAAE99},
	(Gfx){0x90A6BFC6, 0xDFCDE5C0},
	(Gfx){0xA2959CEB, 0xEBE1D9BD},
	(Gfx){0x969AA9D0, 0xC6FDE396},
	(Gfx){0x9EEEFFA3, 0xBECDB399},
	(Gfx){0x8DA3C2C9, 0xDDC4D9BD},
	(Gfx){0xA49498E7, 0xE5DDDEC3},
	(Gfx){0x959FA7D2, 0xD7FFEC96},
	(Gfx){0x99E4FF9E, 0xB9D2BEA0},
	(Gfx){0x8AA2C7D0, 0xD3B3C4B5},
	(Gfx){0xA79295E4, 0xDFD7E1C7},
	(Gfx){0x93A8AAD3, 0xE6FFF195},
	(Gfx){0x95D8FD98, 0xB7D6CBAA},
	(Gfx){0x88A1CCD9, 0xC39FABA8},
	(Gfx){0xA88E93E2, 0xD8D0DFC7},
	(Gfx){0x91B1AFD3, 0xEFFFF191},
	(Gfx){0x90CBF293, 0xB7D8D4B1},
	(Gfx){0x87A0CEDE, 0xB28E969A},
	(Gfx){0xA68B8FDC, 0xD0C8DAC7},
	(Gfx){0x91BAB6D2, 0xF4FBEF90},
	(Gfx){0x8AB9DD91, 0xB8D8D8B6},
	(Gfx){0x889ECDE2, 0xA480868C},
	(Gfx){0xA0868AD6, 0xC9C3D5C6},
	(Gfx){0x90BFBDD0, 0xF5F7EC8D},
	(Gfx){0x83A8C78F, 0xB9D5D7B5},
	(Gfx){0x889BC9E1, 0x99797E84},
	(Gfx){0x968286CE, 0xC3C1D0C7},
	(Gfx){0x91C2C6D1, 0xF2F3E989},
	(Gfx){0x7B97B092, 0xB9D2CFB0},
	(Gfx){0x8E9AC3DF, 0x9578817F},
	(Gfx){0x8B7E82C8, 0xBFC0CCCA},
	(Gfx){0x93C3D0D5, 0xEEEEE586},
	(Gfx){0x76889E98, 0xB7CFC5A9},
	(Gfx){0x989BBEDE, 0x957A8A7B},
	(Gfx){0x807B7EC2, 0xBFC0CBCC},
	(Gfx){0x93BFD4D9, 0xEBEBE184},
	(Gfx){0x737F969D, 0xB4CCBB9F},
	(Gfx){0x9D9CB9DC, 0x987E9577},
	(Gfx){0x75767CB5, 0xB8B9C4C7},
	(Gfx){0x91B4D0D6, 0xDEDED27E},
	(Gfx){0x6E748A9D, 0xACC1A998},
	(Gfx){0xA69AB0CF, 0x9A88A173},
	(Gfx){0x6F727AA8, 0xB0B0BCBF},
	(Gfx){0x90A8C7D0, 0xD2D2C375},
	(Gfx){0x6A6E829C, 0xA3B79A95},
	(Gfx){0xAB98A9C1, 0x9A93AA6F},
	(Gfx){0x6D6D789D, 0xA7A6B4B6},
	(Gfx){0x8C9CBBC7, 0xC6C6B56C},
	(Gfx){0x686B7E95, 0x9CAC9095},
	(Gfx){0xAB96A2B3, 0x989CAC6E},
	(Gfx){0x6D6A7993, 0x9F9FACAC},
	(Gfx){0x8993B0BB, 0xBBBBA967},
	(Gfx){0x6869798E, 0x96A38897},
	(Gfx){0xAC949CA6, 0x99A3AE73},
	(Gfx){0x6F68788A, 0x9696A4A1},
	(Gfx){0x858BA4B0, 0xB0B09D64},
	(Gfx){0x68687387, 0x909B8398},
	(Gfx){0xA9909498, 0x96A5A97A},
	(Gfx){0x72667783, 0x8D8F9D96},
	(Gfx){0x81859AA3, 0xA6A69366},
	(Gfx){0x6B686E81, 0x8B937F95},
	(Gfx){0xA28C8D8E, 0x96A3A383},
	(Gfx){0x7567747D, 0x868A978E},
	(Gfx){0x7C819395, 0x9C9C8E6D},
	(Gfx){0x6F686A7D, 0x868C798F},
	(Gfx){0x9A888687, 0x959C9C89},
	(Gfx){0x74666F78, 0x7F869087},
	(Gfx){0x767D8C8A, 0x93938A72},
	(Gfx){0x70656879, 0x7F867486},
	(Gfx){0x91838082, 0x91939389},
	(Gfx){0x756A6D74, 0x7B828A81},
	(Gfx){0x737B867E, 0x8A8A8679},
	(Gfx){0x72646776, 0x7B82707C},
	(Gfx){0x887E7C80, 0x8A8A8A88},
	(Gfx){0x746C6A71, 0x767D827B},
	(Gfx){0x6F787F74, 0x8282817A},
	(Gfx){0x71626673, 0x767D6D74},
	(Gfx){0x7E79787E, 0x82828282},
	(Gfx){0x716C686D, 0x72777A75},
	(Gfx){0x6B73776C, 0x797A7A76},
	(Gfx){0x6D60656F, 0x71776A6D},
	(Gfx){0x76737279, 0x7A7A7A79},
	(Gfx){0x6D6A6668, 0x6D72736F},
	(Gfx){0x696D6E65, 0x71737371},
	(Gfx){0x695F646B, 0x6D726768},
	(Gfx){0x6F6E6D73, 0x72727372},
	(Gfx){0x68666365, 0x686C6C6A},
	(Gfx){0x65676760, 0x696C6C6A},
	(Gfx){0x645F6266, 0x686C6564},
	(Gfx){0x6868666C, 0x6A6A6C6B},
	(Gfx){0x5D5C5C5C, 0x5D5D5D5D},
	(Gfx){0x5C5C5C5A, 0x5C5D5D5D},
	(Gfx){0x5C5B5C5C, 0x5D5D5C5C},
	(Gfx){0x5D5D5C5D, 0x5D5D5D5D},
	(Gfx){0x4D4D4D4D, 0x4D4D4D4D},
	(Gfx){0x4D4D4D4D, 0x4D4D4D4D},
	(Gfx){0x4D4D4D4D, 0x4D4D4D4D},
	(Gfx){0x4D4D4D4D, 0x4D4D4D4D},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x00000001),
	gsBranchZ(642 /* INVALID */, -341, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x00000408),
	(Gfx){0x0B0D0D0D, 0x0C090401},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x01050B0E),
	(Gfx){0x0F0F0F0F, 0x0F0E0B05},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x050B0F0F),
	(Gfx){0x0F0F0F0F, 0x0F0F0F0C},
	gsSP1Quadrangle(1 /* INVALID */, 0 /* INVALID */, 0, 0, 0),
	gsDPNoOp(),
	gsDPNoOpTag(0x0B0F0F0F),
	(Gfx){0x0F0F0F0F, 0x0F0F0F0F},
	(Gfx){0x0E0C0A07, 0x02000000},
	gsDPNoOp(),
	gsDPNoOpTag(0x0E0F2F5F),
	(Gfx){0x6F4F1F0F, 0x0F0F0F0F},
	(Gfx){0x0F0F0E0A, 0x03000000},
	gsDPNoOp(),
	gsDPNoOpTag(0x0F2F8FDF),
	gsDPSetColorImage(6, G_IM_SIZ_8b, 3872, 0x0F0F0F0F),
	(Gfx){0x0F0F0B05, 0x01000000},
	gsDPNoOp(),
	gsDPNoOpTag(0x0F3FBFFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3872, 0x0F0F0F0F),
	(Gfx){0x0F0F0D0B, 0x08030000},
	gsDPNoOp(),
	gsDPNoOpTag(0x0F2FAFFF),
	gsDPSetColorImage(6, G_IM_SIZ_32b, 3872, 0x0F0F0F0F),
	(Gfx){0x0F0F0F0E, 0x0A040000},
	gsDPNoOp(),
	gsDPNoOpTag(0x0F1F5F9F),
	(Gfx){0xBF7F3F0F, 0x0F0F0F0F},
	(Gfx){0x0F0E0904, 0x02000000},
	gsDPNoOp(),
	gsDPNoOpTag(0x0D0F1F2F),
	(Gfx){0x2F1F0F0F, 0x0F0F0F0F},
	(Gfx){0x0E080200, 0x00000000},
	gsDPNoOp(),
	gsDPNoOpTag(0x090E0F0F),
	(Gfx){0x0F0F0F0F, 0x0F0F0F0F},
	(Gfx){0x0A030000, 0x00000000},
	gsDPNoOp(),
	gsDPNoOpTag(0x040A0E0F),
	(Gfx){0x0F0F0F0F, 0x0F0F0F0A},
	gsBranchZ(0, 1, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOp(),
	gsDPNoOpTag(0x0004090D),
	(Gfx){0x0F0F0F0F, 0x0F0E0A04},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x00000306),
	(Gfx){0x0A0B0B0B, 0x0A070300},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x00000001),
	gsSPModifyVertex(385 /* INVALID */, 0x0003, 0x02010000),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0xFFF80000),
	gsSP2Triangles(0, 2, 49 /* INVALID */, 0, 27 /* INVALID */, 6, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 2, 0xFFEE0000),
	gsSP2Triangles(36, 2 /* INVALID */, 118 /* INVALID */, 0, 13, 120, 127 /* INVALID */, 0),
	gsDPNoOp(),
	gsSP2Triangles(0, 1 /* INVALID */, 42 /* INVALID */, 0, 59, 118, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4086, 0xFFF20000),
	gsSP1Quadrangle(117 /* INVALID */, 3, 100 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x00190000),
	(Gfx){0x0C0000E6, 0x00F477FF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4078, 0x00060000),
	(Gfx){0x0A3504D9, 0x98D92DFF},
	gsDPNoOpTag(0x00190000),
	(Gfx){0x0C000232, 0x00D06EFF},
	gsDPNoOpTag(0x001A0000),
	(Gfx){0x0C00FFF8, 0x00FD77FF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 10, 0x00190000),
	(Gfx){0x0929FF89, 0xA60E4EFF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 15, 0x000F0000),
	gsSP1Quadrangle(37 /* INVALID */, 0, 12 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x001A0000),
	gsSP2Triangles(0, 127, 105, 0, 40 /* INVALID */, 44, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x00140000),
	gsSP2Triangles(0, 127, 114, 0, 54, 26, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFEF0000),
	(Gfx){0x0C00085F, 0x009DBEFF},
	gsDPNoOpTag(0xFFE70000),
	gsSP2Triangles(0, 4, 0, 0, 121, 72 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x00120000),
	(Gfx){0x0C000400, 0x00922EFF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4069, 0x00000000),
	(Gfx){0x0B2B065D, 0xC29BEFFF},
	gsDPNoOp(),
	(Gfx){0x0C000674, 0x0089FCFF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4094, 0x00090000),
	(Gfx){0x093202CD, 0x9332FDFF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 22, 0x000B0000),
	gsSP2Triangles(23, 0, 23 /* INVALID */, 0, 30 /* INVALID */, 107, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x00040000),
	gsSP2Triangles(0, 0 /* INVALID */, 95 /* INVALID */, 0, 29 /* INVALID */, 76, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4096, 0xFFFE0000),
	gsSPLineW3D(103, 2, 9, 0),
	gsDPNoOp(),
	gsSP2Triangles(0, 1 /* INVALID */, 101, 0, 59, 118, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3, 0xFFEE0000),
	gsSP1Quadrangle(61 /* INVALID */, 3, 116 /* INVALID */, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4085, 0xFFE80000),
	(Gfx){0x0A7506E8, 0x961FD3FF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4073, 0xFFF50000),
	(Gfx){0x0AE70529, 0x8FE5E6FF},
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4086, 0x00000000),
	(Gfx){0x09CF03D0, 0x8A0EFAFF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4094, 0x00090000),
	(Gfx){0x091E0282, 0x9332FDFF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4078, 0x00060000),
	(Gfx){0x0A870303, 0x98D92DFF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4086, 0xFFF20000),
	(Gfx){0x0A5C0586, 0x71DA04FF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4078, 0x00060000),
	(Gfx){0x0A870303, 0x71E31AFF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4073, 0xFFF50000),
	(Gfx){0x0AE70529, 0x72E011FF},
	gsDPNoOp(),
	gsSP2Triangles(0, 1 /* INVALID */, 101, 0, 58, 116, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4086, 0xFFF20000),
	(Gfx){0x0A5C0586, 0x71DA04FF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3, 0xFFEE0000),
	gsSP1Quadrangle(61 /* INVALID */, 3, 124 /* INVALID */, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4073, 0xFFF50000),
	(Gfx){0x0AE70529, 0x72E011FF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4085, 0xFFE80000),
	(Gfx){0x0A7506E8, 0x72DC07FF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 2, 0xFFEE0000),
	gsSP2Triangles(36, 2 /* INVALID */, 118 /* INVALID */, 0, 13, 120, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFF80000),
	gsSP2Triangles(0, 2, 49 /* INVALID */, 0, 27 /* INVALID */, 6, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFF40000),
	gsSP2Triangles(0, 1 /* INVALID */, 17, 0, 7, 1, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFEF0000),
	gsSP2Triangles(0, 2, 34 /* INVALID */, 0, 10, 124 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE90000),
	gsSP2Triangles(0, 2, 83, 0, 5, 118 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE90000),
	gsSP2Triangles(0, 2 /* INVALID */, 53, 0, 7, 116 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE10000),
	gsSP2Triangles(0, 3, 37 /* INVALID */, 0, 4, 120 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE30000),
	gsSP2Triangles(0, 3, 93 /* INVALID */, 0, 6 /* INVALID */, 117 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFDC0000),
	gsSP2Triangles(0, 3 /* INVALID */, 111, 0, 5 /* INVALID */, 121, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE70000),
	gsSP2Triangles(0, 4, 0, 0, 121, 72 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOp(),
	gsSP2Triangles(0, 1 /* INVALID */, 42 /* INVALID */, 0, 59, 118, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFEE0000),
	gsSP2Triangles(36, 2 /* INVALID */, 118 /* INVALID */, 0, 13, 120, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFF80000),
	gsSP2Triangles(0, 2, 49 /* INVALID */, 0, 27 /* INVALID */, 6, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFF20000),
	gsSP1Quadrangle(117 /* INVALID */, 3, 100 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x00190000),
	(Gfx){0x0C000232, 0x00D06EFF},
	gsDPNoOpTag(0x00060000),
	(Gfx){0x0A3504D9, 0x68D92DFF},
	gsDPNoOpTag(0x00190000),
	(Gfx){0x0C0000E6, 0x00F477FF},
	gsDPNoOpTag(0x00190000),
	(Gfx){0x0929FF89, 0x590D4EFF},
	gsDPNoOpTag(0x001A0000),
	(Gfx){0x0C00FFF8, 0x00FD77FF},
	gsDPNoOpTag(0x00140000),
	gsSP2Triangles(0, 127, 114, 0, 54, 26, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x001A0000),
	gsSP2Triangles(0, 127, 105, 0, 40 /* INVALID */, 44, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x000F0000),
	gsSP1Quadrangle(37 /* INVALID */, 0, 12 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFEF0000),
	(Gfx){0x0C00085F, 0x009DBEFF},
	gsDPNoOp(),
	(Gfx){0x0C000674, 0x0089FCFF},
	gsDPNoOp(),
	(Gfx){0x0B2B065D, 0x3E9BEFFF},
	gsDPNoOpTag(0x00120000),
	(Gfx){0x0C000400, 0x00922EFF},
	gsDPNoOpTag(0x00090000),
	(Gfx){0x093202CD, 0x6D32FDFF},
	gsDPNoOpTag(0x00040000),
	gsSP2Triangles(0, 0 /* INVALID */, 95 /* INVALID */, 0, 29 /* INVALID */, 76, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x000B0000),
	gsSP2Triangles(23, 0, 23 /* INVALID */, 0, 30 /* INVALID */, 107, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x00090000),
	(Gfx){0x093202CD, 0x6D32FDFF},
	gsDPNoOpTag(0x00190000),
	(Gfx){0x0929FF89, 0x590D4EFF},
	gsDPNoOpTag(0x00060000),
	(Gfx){0x0A3504D9, 0x68D92DFF},
	gsDPNoOpTag(0x00120000),
	(Gfx){0x0C000400, 0x00922EFF},
	gsDPNoOp(),
	(Gfx){0x0B2B065D, 0x3E9BEFFF},
	gsDPNoOpTag(0xFFF20000),
	gsSP1Quadrangle(117 /* INVALID */, 3, 100 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x000F0000),
	gsSP1Quadrangle(37 /* INVALID */, 0, 12 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOp(),
	gsSP2Triangles(0, 1 /* INVALID */, 42 /* INVALID */, 0, 59, 118, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x001A0000),
	gsSP2Triangles(0, 127, 105, 0, 40 /* INVALID */, 44, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x00190000),
	(Gfx){0x0C000232, 0x00D06EFF},
	gsDPNoOpTag(0x00140000),
	gsSP2Triangles(0, 127, 114, 0, 54, 26, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFEE0000),
	gsSP2Triangles(36, 2 /* INVALID */, 118 /* INVALID */, 0, 13, 120, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE70000),
	gsSP2Triangles(0, 4, 0, 0, 121, 72 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFEF0000),
	(Gfx){0x0C00085F, 0x009DBEFF},
	gsDPNoOp(),
	(Gfx){0x0C000674, 0x0089FCFF},
	gsDPNoOpTag(0xFFEE0000),
	gsSP1Quadrangle(61 /* INVALID */, 3, 116 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOp(),
	gsSP2Triangles(0, 1 /* INVALID */, 101, 0, 59, 118, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFFE0000),
	gsSPLineW3D(103, 2, 9, 0),
	gsDPNoOp(),
	(Gfx){0x09CF03D0, 0x760EFAFF},
	gsDPNoOpTag(0xFFF50000),
	(Gfx){0x0AE70529, 0x71E5E6FF},
	gsDPNoOpTag(0xFFE80000),
	(Gfx){0x0A7506E8, 0x6A1FD3FF},
	gsDPNoOpTag(0x00090000),
	(Gfx){0x091E0282, 0x6D32FDFF},
	gsDPNoOpTag(0x00060000),
	(Gfx){0x0A870303, 0x68D92DFF},
	gsDPNoOpTag(0xFFF50000),
	(Gfx){0x0AE70529, 0x8EE011FF},
	gsDPNoOpTag(0x00060000),
	(Gfx){0x0A870303, 0xD89A30FF},
	gsDPNoOpTag(0xFFF20000),
	(Gfx){0x0A5C0586, 0x8FDA04FF},
	gsDPNoOpTag(0xFFEE0000),
	gsSP1Quadrangle(61 /* INVALID */, 3, 124 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOp(),
	gsSP2Triangles(0, 1 /* INVALID */, 101, 0, 104 /* INVALID */, 116, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE80000),
	(Gfx){0x0A7506E8, 0x8EDC07FF},
	gsDPNoOpTag(0xFFF40000),
	gsSP2Triangles(0, 1 /* INVALID */, 17, 0, 7, 1, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFF80000),
	gsSP2Triangles(0, 2, 49 /* INVALID */, 0, 27 /* INVALID */, 6, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFEE0000),
	gsSP2Triangles(36, 2 /* INVALID */, 118 /* INVALID */, 0, 13, 120, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFEF0000),
	gsSP2Triangles(0, 2, 34 /* INVALID */, 0, 10, 124 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE90000),
	gsSP2Triangles(0, 2, 83, 0, 5, 118 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE90000),
	gsSP2Triangles(0, 2 /* INVALID */, 53, 0, 7, 116 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE10000),
	gsSP2Triangles(0, 3, 37 /* INVALID */, 0, 4, 120 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE30000),
	gsSP2Triangles(0, 3, 93 /* INVALID */, 0, 6 /* INVALID */, 117 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFDC0000),
	gsSP2Triangles(0, 3 /* INVALID */, 111, 0, 5 /* INVALID */, 121, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFE70000),
	gsSP2Triangles(0, 4, 0, 0, 121, 117 /* INVALID */, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4066, 0x000D0000),
	gsSPCullDisplayList(994 /* INVALID */, 3071 /* INVALID */),
	gsDPNoOp(),
	gsSPCullDisplayList(910 /* INVALID */, 3967 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4066, 0x00080000),
	gsSPCullDisplayList(928, 3967 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4066, 0xFFFF0000),
	gsSPCullDisplayList(912, 21375 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4066, 0x00080000),
	gsSPCullDisplayList(928, 26111 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4069, 0x00000000),
	gsSPCullDisplayList(906 /* INVALID */, 23167 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4066, 0x00080000),
	gsSPCullDisplayList(928, 3967 /* INVALID */),
	gsDPNoOp(),
	gsSPCullDisplayList(910 /* INVALID */, 3967 /* INVALID */),
	gsDPNoOp(),
	gsSPCullDisplayList(910 /* INVALID */, 18047 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4066, 0x000D0000),
	gsSPCullDisplayList(994 /* INVALID */, 32127 /* INVALID */),
	gsDPNoOp(),
	gsSPModifyVertex(906 /* INVALID */, 0x00CD, 0x2D50B4FF),
	gsDPNoOpTag(0x00080000),
	gsSPModifyVertex(928, 0x0065, 0x05741EFF),
	gsDPNoOpTag(0x00080000),
	gsSPModifyVertex(928, 0x0065, 0x38A4CBFF),
	gsDPNoOpTag(0xFFFF0000),
	gsSPModifyVertex(912, 0x00E3, 0x04B2A6FF),
	gsDPNoOpTag(0x000D0000),
	gsSPModifyVertex(994 /* INVALID */, 0x00CF, 0x0A7517FF),
	gsDPNoOpTag(0x000D0000),
	gsSPModifyVertex(994 /* INVALID */, 0x00CF, 0xD790FAFF),
	gsDPNoOpTag(0x001A0000),
	gsSPVertex(0x026047FF, 0, 57),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 10, 0x00190000),
	gsDPNoOpTag(0xA6402FFF),
	gsDPNoOpTag(0x00240000),
	gsSPVertex(0x026047FF, 0, 14),
	gsDPNoOpTag(0x00240000),
	gsSPVertex(0x029029FF, 0, 14),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 10, 0x00190000),
	gsDPNoOpTag(0xA6B61BFF),
	gsDPNoOpTag(0x001A0000),
	gsSPVertex(0x029029FF, 0, 99),
	gsDPNoOpTag(0x00190000),
	gsSPVertex(0x5DB91AFF, 128, -53),
	gsDPNoOpTag(0x00190000),
	gsSPVertex(0x5C3D2DFF, 128, -53),
	gsDPNoOpTag(0x00110000),
	gsSPVertex(0x751010FF, 0, 8),
	gsDPNoOpTag(0x00140000),
	gsSPVertex(0x750C14FF, 0, 51),
	gsDPNoOpTag(0x000B0000),
	gsSPModifyVertex(596 /* INVALID */, 0x00CF, 0x760CF4FF),
	gsDPNoOpTag(0x000B0000),
	gsSPCullDisplayList(558, 31103 /* INVALID */),
	gsDPNoOpTag(0x00090000),
	gsSPCullDisplayList(585 /* INVALID */, 30335 /* INVALID */),
	gsDPNoOpTag(0x00030000),
	gsSPCullDisplayList(627 /* INVALID */, 30847 /* INVALID */),
	gsDPNoOpTag(0x00050000),
	gsSPCullDisplayList(648, 29183 /* INVALID */),
	gsDPNoOpTag(0x00010000),
	gsSPCullDisplayList(703, 30335 /* INVALID */),
	gsDPNoOpTag(0x00040000),
	gsSPCullDisplayList(733 /* INVALID */, 30975 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 22, 0x000B0000),
	gsDPSetColorImage(G_IM_FMT_YUV, G_IM_SIZ_16b, 1194, 0x8A0CF4FF),
	gsDPNoOpTag(0x00140000),
	gsSPVertex(0x8B0C14FF, 0, 51),
	gsDPNoOpTag(0x00110000),
	gsSPVertex(0x8B1010FF, 0, 8),
	gsDPNoOpTag(0x000B0000),
	gsSPCullDisplayList(558, 31103 /* INVALID */),
	gsDPNoOpTag(0x00090000),
	gsSPCullDisplayList(585 /* INVALID */, 30335 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 22, 0x000B0000),
	gsSPCullDisplayList(596 /* INVALID */, 31359 /* INVALID */),
	gsDPNoOpTag(0x00030000),
	gsSPCullDisplayList(627 /* INVALID */, 30847 /* INVALID */),
	gsDPNoOpTag(0x00050000),
	gsSPCullDisplayList(648, 29183 /* INVALID */),
	gsDPNoOpTag(0x00010000),
	gsSPCullDisplayList(703, 30335 /* INVALID */),
	gsDPNoOpTag(0x00040000),
	gsSPCullDisplayList(733 /* INVALID */, 30975 /* INVALID */),
	gsDPNoOpTag(0x001A0000),
	gsSPVertex(0x007128FF, 0, 111),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4095, 0x00200000),
	gsDPNoOpTag(0x9E0D43FF),
	gsDPNoOpTag(0x00200000),
	gsSPVertex(0x620D43FF, 240, -123),
	gsDPNoOpTag(0x001E0000),
	gsSPVertex(0x00AF58FF, 0, 26),
	gsDPNoOpTag(0x00190000),
	gsSPVertex(0x8BF4EBFF, 0, 46),
	gsDPNoOpTag(0x00190000),
	gsSPVertex(0x75F4EBFF, 0, 46),
	gsDPNoOpTag(0x00140000),
	gsSPVertex(0x1C584CFF, 159, -137),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 15, 0x000F0000),
	gsBranchZ(334 /* INVALID */, 0.0388828, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0x001A0000),
	gsDPSetDepthImage(0x005158FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 10, 0x00190000),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1259, 0xA6164BFF),
	gsDPNoOpTag(0x000F0000),
	gsBranchZ(334 /* INVALID */, -0.0415294, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0x00190000),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1259, 0x5A164BFF),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xDC, 0xFF),
	gsDPSetEnvColor(0x32, 0x32, 0x14, 0xFF),
	gsSPEndDisplayList(),
}

object_gi_ocarina_08B0.txt
{
	gsDPNoOpTag(0x00120000),
	gsDPNoOpTag(0x3AE966FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0x5A, 0x64, 0xFF, 0xFF),
	gsDPSetEnvColor(0x28, 0x00, 0x5A, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0305176), qu016(0.0305176), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032C90, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 1, 1),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000100, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000130, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 3, 7, 0, 8, 9, 4, 0),
	gsSP2Triangles(10, 11, 3, 0, 8, 11, 12, 0),
	gsSP2Triangles(0, 12, 11, 0, 1, 0, 10, 0),
	gsSP2Triangles(11, 10, 0, 0, 13, 14, 12, 0),
	gsSP2Triangles(2, 13, 0, 0, 15, 2, 1, 0),
	gsSP2Triangles(16, 14, 13, 0, 16, 13, 2, 0),
	gsSP2Triangles(16, 2, 15, 0, 17, 18, 19, 0),
	gsSP2Triangles(17, 20, 18, 0, 17, 21, 20, 0),
	gsSP2Triangles(19, 18, 22, 0, 5, 7, 3, 0),
	gsSP2Triangles(7, 23, 6, 0, 4, 3, 11, 0),
	gsSP2Triangles(3, 6, 10, 0, 10, 6, 24, 0),
	gsSP2Triangles(1, 10, 24, 0, 25, 26, 27, 0),
	gsSP1Triangle(28, 29, 30, 0),
	gsSPVertex(0x06000320, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(2, 5, 6, 0, 5, 7, 8, 0),
	gsSP2Triangles(9, 10, 11, 0, 12, 13, 14, 0),
	gsSP2Triangles(15, 3, 16, 0, 17, 18, 19, 0),
	gsSP2Triangles(20, 17, 19, 0, 17, 21, 22, 0),
	gsSP2Triangles(23, 24, 25, 0, 25, 26, 23, 0),
	gsSP2Triangles(14, 25, 24, 0, 12, 1, 13, 0),
	gsSP2Triangles(1, 22, 5, 0, 24, 18, 14, 0),
	gsSP2Triangles(14, 17, 12, 0, 22, 21, 5, 0),
	gsSP2Triangles(17, 20, 21, 0, 0, 2, 3, 0),
	gsSP2Triangles(5, 2, 1, 0, 7, 5, 21, 0),
	gsSP2Triangles(17, 22, 1, 0, 27, 18, 24, 0),
	gsSP2Triangles(18, 17, 14, 0, 4, 16, 3, 0),
	gsSP2Triangles(6, 4, 2, 0, 8, 6, 5, 0),
	gsSP2Triangles(0, 13, 1, 0, 12, 17, 1, 0),
	gsSP2Triangles(25, 14, 13, 0, 28, 16, 4, 0),
	gsSP2Triangles(28, 4, 6, 0, 28, 6, 8, 0),
	gsSP2Triangles(29, 25, 13, 0, 29, 13, 3, 0),
	gsSP2Triangles(30, 9, 11, 0, 27, 19, 18, 0),
	gsSP1Triangle(11, 10, 31, 0),
	gsSPVertex(0x06000520, 24, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 2, 0),
	gsSP2Triangles(4, 5, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(10, 7, 11, 0, 12, 13, 14, 0),
	gsSP2Triangles(8, 15, 16, 0, 9, 11, 7, 0),
	gsSP2Triangles(11, 17, 10, 0, 14, 18, 12, 0),
	gsSP2Triangles(16, 9, 8, 0, 19, 20, 21, 0),
	gsSP1Triangle(22, 20, 23, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x00, 0x00, 0x1E, 0xFF),
	gsSPVertex(0x060006A0, 10, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(5, 3, 6, 0, 7, 5, 8, 0),
	gsSP2Triangles(2, 4, 0, 0, 4, 6, 3, 0),
	gsSP2Triangles(6, 8, 5, 0, 8, 9, 7, 0),
	gsSPEndDisplayList(),
}

object_gi_powder_0810.txt
{
	gsDPNoOpTag(0x00100000),
	gsSPCullDisplayList(682 /* INVALID */, 11519 /* INVALID */),
	gsDPNoOpTag(0xFFFD0000),
	gsSP1Triangle(88, 0 /* INVALID */, 109, 0),
	gsDPNoOpTag(0xFFFD0000),
	gsSP2Triangles(23, 0 /* INVALID */, 97, 0, 40, 44, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFFA0000),
	gsSP1Triangle(66 /* INVALID */, 0 /* INVALID */, 30 /* INVALID */, 0),
	gsDPNoOpTag(0x00030000),
	gsSP1Triangle(111, 1, 57 /* INVALID */, 0),
	gsDPNoOpTag(0x00050000),
	gsSP1Triangle(7, 1 /* INVALID */, 53 /* INVALID */, 0),
	gsDPNoOpTag(0x00040000),
	gsSP1Triangle(108, 1 /* INVALID */, 10, 0),
	gsDPNoOpTag(0x000A0000),
	gsSP1Triangle(25 /* INVALID */, 2, 34 /* INVALID */, 0),
	gsDPNoOpTag(0x00110000),
	gsBranchZ(649 /* INVALID */, 0.0893866, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0x00110000),
	gsBranchZ(707 /* INVALID */, 0.138889, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(TEXEL0, SHADE, PRIM_LOD_FRAC, ENVIRONMENT, 0, 0, 0, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 0, 0, 0, 1),
	gsDPSetPrimColor(0, qu08(0.5), 0xFF, 0xFF, 0x00, 0xFF),
	gsDPSetEnvColor(0x3C, 0x14, 0x28, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0305176), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 15),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 23, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(5, 3, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(10, 7, 11, 0, 12, 10, 13, 0),
	gsSP2Triangles(14, 12, 15, 0, 14, 1, 16, 0),
	gsSP2Triangles(14, 16, 17, 0, 17, 12, 14, 0),
	gsSP2Triangles(17, 10, 12, 0, 10, 17, 18, 0),
	gsSP2Triangles(7, 10, 18, 0, 18, 8, 7, 0),
	gsSP2Triangles(8, 18, 19, 0, 20, 3, 5, 0),
	gsSP2Triangles(20, 0, 3, 0, 0, 20, 16, 0),
	gsSP2Triangles(1, 0, 16, 0, 18, 17, 16, 0),
	gsSP2Triangles(19, 18, 16, 0, 21, 2, 1, 0),
	gsSP2Triangles(2, 4, 0, 0, 4, 6, 3, 0),
	gsSP2Triangles(22, 9, 8, 0, 9, 11, 7, 0),
	gsSP2Triangles(11, 13, 10, 0, 13, 15, 12, 0),
	gsSP1Triangle(15, 21, 14, 0),
	gsDPPipeSync(),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0xA0, 0x78, 0x32, 0xFF),
	gsDPSetEnvColor(0x50, 0x32, 0x1E, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_CULL_BACK | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x060001A0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(5, 3, 6, 0, 5, 7, 8, 0),
	gsSP2Triangles(8, 9, 10, 0, 10, 11, 12, 0),
	gsSP2Triangles(13, 14, 1, 0, 15, 13, 0, 0),
	gsSP2Triangles(16, 15, 3, 0, 16, 8, 17, 0),
	gsSP2Triangles(17, 10, 18, 0, 18, 12, 19, 0),
	gsSP2Triangles(20, 21, 14, 0, 22, 20, 13, 0),
	gsSP2Triangles(23, 22, 15, 0, 23, 17, 24, 0),
	gsSP2Triangles(24, 18, 25, 0, 25, 19, 26, 0),
	gsSP2Triangles(27, 20, 28, 0, 28, 22, 29, 0),
	gsSP2Triangles(29, 23, 30, 0, 31, 30, 23, 0),
	gsSPVertex(0x060003A0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 8, 9, 0),
	gsSP2Triangles(9, 10, 11, 0, 12, 11, 10, 0),
	gsSP2Triangles(13, 12, 1, 0, 14, 13, 0, 0),
	gsSP2Triangles(15, 7, 16, 0, 16, 9, 17, 0),
	gsSP2Triangles(17, 11, 18, 0, 19, 18, 11, 0),
	gsSP2Triangles(20, 19, 12, 0, 21, 20, 13, 0),
	gsSP2Triangles(22, 23, 24, 0, 23, 25, 26, 0),
	gsSP2Triangles(25, 27, 28, 0, 29, 28, 27, 0),
	gsSP1Triangle(30, 31, 29, 0),
	gsSPVertex(0x060005A0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(4, 6, 7, 0, 6, 8, 9, 0),
	gsSP2Triangles(10, 9, 8, 0, 1, 11, 10, 0),
	gsSP2Triangles(12, 13, 1, 0, 14, 5, 15, 0),
	gsSP2Triangles(5, 7, 16, 0, 7, 9, 17, 0),
	gsSP2Triangles(11, 17, 9, 0, 13, 18, 11, 0),
	gsSP2Triangles(19, 20, 13, 0, 15, 21, 22, 0),
	gsSP2Triangles(16, 23, 15, 0, 17, 24, 16, 0),
	gsSP2Triangles(17, 18, 25, 0, 18, 20, 26, 0),
	gsSP2Triangles(20, 27, 28, 0, 23, 29, 21, 0),
	gsSP1Triangle(24, 30, 23, 0),
	gsSPVertex(0x06000790, 18, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 3, 4, 0),
	gsSP2Triangles(3, 5, 6, 0, 5, 7, 8, 0),
	gsSP2Triangles(9, 10, 11, 0, 1, 12, 9, 0),
	gsSP2Triangles(13, 14, 1, 0, 13, 4, 15, 0),
	gsSP2Triangles(4, 6, 16, 0, 6, 8, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_powder_0830.txt
{
	gsDPNoOpTag(0xFFFD0000),
	gsSP2Triangles(23, 0 /* INVALID */, 97, 0, 40, 44, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFFA0000),
	gsSP1Triangle(66 /* INVALID */, 0 /* INVALID */, 30 /* INVALID */, 0),
	gsDPNoOpTag(0x00030000),
	gsSP1Triangle(111, 1, 57 /* INVALID */, 0),
	gsDPNoOpTag(0x00050000),
	gsSP1Triangle(7, 1 /* INVALID */, 53 /* INVALID */, 0),
	gsDPNoOpTag(0x00040000),
	gsSP1Triangle(108, 1 /* INVALID */, 10, 0),
	gsDPNoOpTag(0x000A0000),
	gsSP1Triangle(25 /* INVALID */, 2, 34 /* INVALID */, 0),
	gsDPNoOpTag(0x00110000),
	gsBranchZ(649 /* INVALID */, 0.0893866, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0x00110000),
	gsBranchZ(707 /* INVALID */, 0.138889, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(TEXEL0, SHADE, PRIM_LOD_FRAC, ENVIRONMENT, 0, 0, 0, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 0, 0, 0, 1),
	gsDPSetPrimColor(0, qu08(0.5), 0xFF, 0xFF, 0x00, 0xFF),
	gsDPSetEnvColor(0x3C, 0x14, 0x28, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0305176), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 15),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 23, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(5, 3, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(10, 7, 11, 0, 12, 10, 13, 0),
	gsSP2Triangles(14, 12, 15, 0, 14, 1, 16, 0),
	gsSP2Triangles(14, 16, 17, 0, 17, 12, 14, 0),
	gsSP2Triangles(17, 10, 12, 0, 10, 17, 18, 0),
	gsSP2Triangles(7, 10, 18, 0, 18, 8, 7, 0),
	gsSP2Triangles(8, 18, 19, 0, 20, 3, 5, 0),
	gsSP2Triangles(20, 0, 3, 0, 0, 20, 16, 0),
	gsSP2Triangles(1, 0, 16, 0, 18, 17, 16, 0),
	gsSP2Triangles(19, 18, 16, 0, 21, 2, 1, 0),
	gsSP2Triangles(2, 4, 0, 0, 4, 6, 3, 0),
	gsSP2Triangles(22, 9, 8, 0, 9, 11, 7, 0),
	gsSP2Triangles(11, 13, 10, 0, 13, 15, 12, 0),
	gsSP1Triangle(15, 21, 14, 0),
	gsDPPipeSync(),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0xA0, 0x78, 0x32, 0xFF),
	gsDPSetEnvColor(0x50, 0x32, 0x1E, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_CULL_BACK | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x060001A0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(5, 3, 6, 0, 5, 7, 8, 0),
	gsSP2Triangles(8, 9, 10, 0, 10, 11, 12, 0),
	gsSP2Triangles(13, 14, 1, 0, 15, 13, 0, 0),
	gsSP2Triangles(16, 15, 3, 0, 16, 8, 17, 0),
	gsSP2Triangles(17, 10, 18, 0, 18, 12, 19, 0),
	gsSP2Triangles(20, 21, 14, 0, 22, 20, 13, 0),
	gsSP2Triangles(23, 22, 15, 0, 23, 17, 24, 0),
	gsSP2Triangles(24, 18, 25, 0, 25, 19, 26, 0),
	gsSP2Triangles(27, 20, 28, 0, 28, 22, 29, 0),
	gsSP2Triangles(29, 23, 30, 0, 31, 30, 23, 0),
	gsSPVertex(0x060003A0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 8, 9, 0),
	gsSP2Triangles(9, 10, 11, 0, 12, 11, 10, 0),
	gsSP2Triangles(13, 12, 1, 0, 14, 13, 0, 0),
	gsSP2Triangles(15, 7, 16, 0, 16, 9, 17, 0),
	gsSP2Triangles(17, 11, 18, 0, 19, 18, 11, 0),
	gsSP2Triangles(20, 19, 12, 0, 21, 20, 13, 0),
	gsSP2Triangles(22, 23, 24, 0, 23, 25, 26, 0),
	gsSP2Triangles(25, 27, 28, 0, 29, 28, 27, 0),
	gsSP1Triangle(30, 31, 29, 0),
	gsSPVertex(0x060005A0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(4, 6, 7, 0, 6, 8, 9, 0),
	gsSP2Triangles(10, 9, 8, 0, 1, 11, 10, 0),
	gsSP2Triangles(12, 13, 1, 0, 14, 5, 15, 0),
	gsSP2Triangles(5, 7, 16, 0, 7, 9, 17, 0),
	gsSP2Triangles(11, 17, 9, 0, 13, 18, 11, 0),
	gsSP2Triangles(19, 20, 13, 0, 15, 21, 22, 0),
	gsSP2Triangles(16, 23, 15, 0, 17, 24, 16, 0),
	gsSP2Triangles(17, 18, 25, 0, 18, 20, 26, 0),
	gsSP2Triangles(20, 27, 28, 0, 23, 29, 21, 0),
	gsSP1Triangle(24, 30, 23, 0),
	gsSPVertex(0x06000790, 18, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 3, 4, 0),
	gsSP2Triangles(3, 5, 6, 0, 5, 7, 8, 0),
	gsSP2Triangles(9, 10, 11, 0, 1, 12, 9, 0),
	gsSP2Triangles(13, 14, 1, 0, 13, 4, 15, 0),
	gsSP2Triangles(4, 6, 16, 0, 6, 8, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_prescription_0990.txt
{
	gsDPNoOpTag(0x00010000),
	gsSPCullDisplayList(768, 14847 /* INVALID */),
	gsDPNoOpTag(0x00030000),
	gsBranchZ(768 /* INVALID */, 0.201198, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0x00010000),
	gsBranchZ(0, 0.19955, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0xE6, 0xDC, 0xE6, 0xFF),
	gsDPSetEnvColor(0x6E, 0x64, 0x78, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032890, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_CULL_BACK | G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPSetGeometryMode(G_LIGHTING),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(5, 4, 6, 0, 7, 6, 8, 0),
	gsSP2Triangles(1, 9, 10, 0, 2, 10, 11, 0),
	gsSP2Triangles(4, 11, 12, 0, 6, 12, 13, 0),
	gsSP2Triangles(9, 14, 15, 0, 10, 15, 16, 0),
	gsSP2Triangles(11, 16, 17, 0, 12, 17, 18, 0),
	gsSP2Triangles(14, 19, 20, 0, 15, 20, 21, 0),
	gsSP2Triangles(16, 21, 22, 0, 17, 22, 23, 0),
	gsSP2Triangles(19, 24, 25, 0, 20, 25, 26, 0),
	gsSP2Triangles(21, 26, 27, 0, 22, 27, 28, 0),
	gsSP2Triangles(2, 3, 0, 0, 4, 5, 3, 0),
	gsSP2Triangles(6, 7, 5, 0, 8, 29, 7, 0),
	gsSP2Triangles(10, 2, 1, 0, 11, 4, 2, 0),
	gsSP2Triangles(12, 6, 4, 0, 13, 8, 6, 0),
	gsSP2Triangles(15, 10, 9, 0, 16, 11, 10, 0),
	gsSP2Triangles(17, 12, 11, 0, 18, 13, 12, 0),
	gsSP2Triangles(20, 15, 14, 0, 21, 16, 15, 0),
	gsSP2Triangles(22, 17, 16, 0, 23, 18, 17, 0),
	gsSP2Triangles(25, 20, 19, 0, 26, 21, 20, 0),
	gsSP2Triangles(27, 22, 21, 0, 28, 23, 22, 0),
	gsSPEndDisplayList(),
}

object_gi_prescription_09A0.txt
{
	gsDPNoOpTag(0x00030000),
	gsBranchZ(768 /* INVALID */, 0.201198, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0x00010000),
	gsBranchZ(0, 0.19955, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0xE6, 0xDC, 0xE6, 0xFF),
	gsDPSetEnvColor(0x6E, 0x64, 0x78, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032890, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_CULL_BACK | G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPSetGeometryMode(G_LIGHTING),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(5, 4, 6, 0, 7, 6, 8, 0),
	gsSP2Triangles(1, 9, 10, 0, 2, 10, 11, 0),
	gsSP2Triangles(4, 11, 12, 0, 6, 12, 13, 0),
	gsSP2Triangles(9, 14, 15, 0, 10, 15, 16, 0),
	gsSP2Triangles(11, 16, 17, 0, 12, 17, 18, 0),
	gsSP2Triangles(14, 19, 20, 0, 15, 20, 21, 0),
	gsSP2Triangles(16, 21, 22, 0, 17, 22, 23, 0),
	gsSP2Triangles(19, 24, 25, 0, 20, 25, 26, 0),
	gsSP2Triangles(21, 26, 27, 0, 22, 27, 28, 0),
	gsSP2Triangles(2, 3, 0, 0, 4, 5, 3, 0),
	gsSP2Triangles(6, 7, 5, 0, 8, 29, 7, 0),
	gsSP2Triangles(10, 2, 1, 0, 11, 4, 2, 0),
	gsSP2Triangles(12, 6, 4, 0, 13, 8, 6, 0),
	gsSP2Triangles(15, 10, 9, 0, 16, 11, 10, 0),
	gsSP2Triangles(17, 12, 11, 0, 18, 13, 12, 0),
	gsSP2Triangles(20, 15, 14, 0, 21, 16, 15, 0),
	gsSP2Triangles(22, 17, 16, 0, 23, 18, 17, 0),
	gsSP2Triangles(25, 20, 19, 0, 26, 21, 20, 0),
	gsSP2Triangles(27, 22, 21, 0, 28, 23, 22, 0),
	gsSPEndDisplayList(),
}

object_gi_rabit_mask_00E0.txt
{
	gsDPNoOpTag(0x00010203),
	gsSPCullDisplayList(0, 0),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0xFFFA0000),
	gsSPModifyVertex(589 /* INVALID */, 0x0052, 0xCF4BB1FF),
	gsDPNoOpTag(0x00040000),
	gsSPVertex(0x104A5CFF, 128, -44),
	gsDPNoOpTag(0xFFFA0000),
	gsSPModifyVertex(627, 0x0034, 0x4C2CAFFF),
	gsDPNoOpTag(0x00040000),
	gsSPVertex(0x104A5CFF, 128, -44),
	gsDPNoOpTag(0x00030000),
	gsSPVertex(0x3FF265FF, 176, -59),
	gsDPNoOpTag(0xFFFA0000),
	gsSPModifyVertex(627, 0x0034, 0x4C2CAFFF),
	gsDPNoOpTag(0x00030000),
	gsSPVertex(0xC31165FF, 48, 11),
	gsDPNoOpTag(0xFFFA0000),
	gsSPModifyVertex(589 /* INVALID */, 0x0052, 0xCF4BB1FF),
	gsDPNoOpTag(0xFFFD0000),
	gsSPModifyVertex(581, 0x006F, 0x901A22FF),
	gsDPNoOp(),
	gsSPModifyVertex(889 /* INVALID */, 0x0000, 0x5C4323FF),
	gsDPNoOpTag(0xFFFD0000),
	gsSPModifyVertex(707 /* INVALID */, 0x001A, 0x67C91AFF),
	gsDPNoOpTag(0xFFFD0000),
	gsSPModifyVertex(692, 0x001F, 0x010077FF),
	gsDPNoOp(),
	gsSPVertex(0x165A4CFF, 240, -195),
	gsDPNoOpTag(0xFFFD0000),
	gsSPModifyVertex(617 /* INVALID */, 0x0044, 0xFCEE76FF),
	gsDPNoOpTag(0x00010000),
	gsSPVertex(0xF8DC72FF, 192, -113),
	gsDPNoOpTag(0x00020000),
	gsSPVertex(0xF8DC72FF, 160, -68),
	gsDPNoOpTag(0x00010000),
	gsSPVertex(0xF8DB71FF, 32, 78),
	gsDPNoOpTag(0xFFFC0000),
	gsSPModifyVertex(934, 0x0095, 0xE357B4FF),
	gsDPNoOpTag(0xFFF60000),
	gsSPModifyVertex(690 /* INVALID */, 0x0078, 0xFDF589FF),
	gsDPNoOpTag(0xFFFC0000),
	gsSPModifyVertex(895, 0x0047, 0x4F19AAFF),
	gsDPNoOp(),
	gsSPVertex(0xE86F25FF, 224, -146),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4091, 0x00000000),
	gsDPNoOpTag(0xE45054FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4090, 0x00000000),
	gsDPNoOpTag(0x9F440FFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4090, 0x00070000),
	gsDPNoOpTag(0xCD5F33FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 14, 0xFFFD0000),
	gsDPSetColorImage(G_IM_FMT_I, G_IM_SIZ_16b, 1163, 0x730921FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 31, 0x00030000),
	gsDPNoOpTag(0x3D1165FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 26, 0x00010000),
	gsDPNoOpTag(0x08DB71FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPSetColorImage(6, G_IM_SIZ_8b, 1255, 0xB42CAFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 34, 0x00040000),
	gsDPNoOpTag(0xEF4A5CFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 29, 0xFFFA0000),
	gsDPSetColorImage(5, G_IM_SIZ_8b, 1180, 0x314BB1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 28, 0x00030000),
	gsDPNoOpTag(0xC1F265FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 11, 0xFFFD0000),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 1416, 0x93D91CFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 14, 0xFFFD0000),
	gsDPSetColorImage(5, G_IM_SIZ_32b, 1236, 0xFF0177FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4093, 0x00000000),
	gsDPNoOpTag(0xE76639FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4093, 0x00000000),
	gsDPNoOpTag(0x106D2DFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 31, 0x00030000),
	gsDPNoOpTag(0x3D1165FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 34, 0x00040000),
	gsDPNoOpTag(0xEF4A5CFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 27, 0x00020000),
	gsDPNoOpTag(0x08DC72FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 28, 0x00030000),
	gsDPNoOpTag(0xC1F265FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 25, 0x00010000),
	gsDPNoOpTag(0x08DC72FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 11, 0xFFFD0000),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 1416, 0x93D91CFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 12, 0xFFFD0000),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 1385, 0x04EE76FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4091, 0xFFFC0000),
	gsSPCullDisplayList(895, 21887 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFF60000),
	gsSPCullDisplayList(690 /* INVALID */, 17663 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4092, 0xFFFC0000),
	gsSPCullDisplayList(934, 22271 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 14, 0xFFFD0000),
	gsSPCullDisplayList(581, 4351 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 14, 0xFFFD0000),
	gsDPSetColorImage(G_IM_FMT_I, G_IM_SIZ_16b, 1163, 0x730921FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4093, 0x00000000),
	gsDPNoOpTag(0x106D2DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4092, 0xFFFC0000),
	gsDPSetColorImage(G_IM_FMT_IA, G_IM_SIZ_8b, 1869, 0x2250ADFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 11, 0xFFFD0000),
	gsSPCullDisplayList(707 /* INVALID */, 3711 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4091, 0xFFFC0000),
	gsDPSetColorImage(5, G_IM_SIZ_32b, 1791, 0xB119AAFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4090, 0x00000000),
	gsDPNoOpTag(0x9F440FFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsSPCullDisplayList(627, 22527 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 29, 0xFFFA0000),
	gsSPCullDisplayList(589 /* INVALID */, 22783 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPSetColorImage(6, G_IM_SIZ_8b, 1255, 0xB42CAFFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4093, 0x00000000),
	gsDPNoOpTag(0xE76639FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4090, 0x00070000),
	gsDPNoOpTag(0xCD5F33FF),
	gsDPNoOpTag(0x000A0000),
	gsSPVertex(0x006D31FF, 0, 119),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4091, 0x00000000),
	gsDPNoOpTag(0xE45054FF),
	gsDPNoOp(),
	gsSPModifyVertex(889 /* INVALID */, 0x0000, 0x5C4323FF),
	gsDPNoOpTag(0x00070000),
	gsSPVertex(0x335F33FF, 192, -70),
	gsDPNoOpTag(0x000A0000),
	gsSPVertex(0x5C323AFF, 160, -153),
	gsDPNoOpTag(0x00010000),
	gsSPVertex(0x702901FF, 160, -153),
	gsDPNoOpTag(0x00080000),
	gsSPVertex(0x6D0730FF, 176, -137),
	gsDPNoOpTag(0xFFF40000),
	gsSPModifyVertex(916 /* INVALID */, 0x0075, 0x5231B8FF),
	gsDPNoOpTag(0xFFF70000),
	gsSPModifyVertex(906 /* INVALID */, 0x005B, 0x5739C5FF),
	gsDPNoOpTag(0xFFF90000),
	gsSPModifyVertex(932 /* INVALID */, 0x0040, 0x7315E6FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4076, 0xFFF40000),
	gsSPCullDisplayList(916 /* INVALID */, 23679 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4081, 0xFFF70000),
	gsSPCullDisplayList(906 /* INVALID */, 25343 /* INVALID */),
	gsDPNoOpTag(0xFFF10000),
	gsSPCullDisplayList(911, 19711 /* INVALID */),
	gsDPNoOpTag(0x00080000),
	gsSPVertex(0x6D0730FF, 176, -137),
	gsDPNoOpTag(0xFFF90000),
	gsSPModifyVertex(932 /* INVALID */, 0x0040, 0x7315E6FF),
	gsDPNoOpTag(0x00010000),
	gsSPVertex(0x702901FF, 160, -153),
	gsDPNoOpTag(0xFFF50000),
	gsSPCullDisplayList(900, 23039 /* INVALID */),
	gsDPNoOpTag(0xFFF80000),
	gsSPModifyVertex(894, 0x008C, 0x2954B6FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4070, 0xFFF90000),
	gsSPCullDisplayList(932 /* INVALID */, 29311 /* INVALID */),
	gsDPNoOpTag(0xFFF70000),
	gsSPModifyVertex(906 /* INVALID */, 0x005B, 0x5739C5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 27, 0x00020000),
	gsDPNoOpTag(0x08DC72FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 26, 0x00010000),
	gsDPNoOpTag(0x08DB71FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 31, 0x00030000),
	gsDPNoOpTag(0x3D1165FF),
	gsDPNoOpTag(0x000A0000),
	gsSPVertex(0x5C323AFF, 160, -153),
	gsDPNoOp(),
	gsSPModifyVertex(889 /* INVALID */, 0x0000, 0x5C4323FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4081, 0x000A0000),
	gsDPNoOpTag(0xA3303AFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4081, 0x00010000),
	gsDPNoOpTag(0x902A00FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4070, 0x00060000),
	gsDPNoOpTag(0x92062EFF),
	gsDPNoOpTag(0xFFFC0000),
	gsSPModifyVertex(895, 0x0047, 0x4F19AAFF),
	gsDPNoOpTag(0x000D0000),
	gsSPVertex(0x423256FF, 96, -87),
	gsDPNoOpTag(0x00070000),
	gsSPVertex(0x335F33FF, 192, -70),
	gsDPNoOpTag(0x000F0000),
	gsSPVertex(0x005158FF, 0, 122),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4090, 0x00000000),
	gsDPNoOpTag(0x9F440FFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4091, 0xFFFC0000),
	gsDPSetColorImage(5, G_IM_SIZ_32b, 1791, 0xB119AAFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4081, 0xFFF70000),
	gsDPSetColorImage(5, G_IM_SIZ_4b, 1814, 0xA939C5FF),
	gsDPNoOpTag(0x000A0000),
	gsSPVertex(0x006D31FF, 0, 119),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4090, 0x00070000),
	gsDPNoOpTag(0xCD5F33FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4081, 0x000D0000),
	gsDPNoOpTag(0xBD2F58FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4089, 0xFFF80000),
	gsSPCullDisplayList(894, 23423 /* INVALID */),
	gsDPNoOpTag(0xFFF40000),
	gsSPModifyVertex(916 /* INVALID */, 0x0075, 0x5231B8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4070, 0xFFF90000),
	gsDPSetColorImage(6, G_IM_SIZ_4b, 1866, 0x8E16E4FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 25, 0x00010000),
	gsDPNoOpTag(0x08DC72FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 27, 0x00020000),
	gsDPNoOpTag(0x08DC72FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 34, 0x00040000),
	gsDPNoOpTag(0xEF4A5CFF),
	gsDPNoOpTag(0x000D0000),
	gsSPVertex(0x423256FF, 96, -87),
	gsDPNoOpTag(0x000A0000),
	gsSPVertex(0x5C323AFF, 160, -153),
	gsDPNoOpTag(0x00070000),
	gsSPVertex(0x335F33FF, 192, -70),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4090, 0x00070000),
	gsDPNoOpTag(0xCD5F33FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4090, 0x00000000),
	gsDPNoOpTag(0x9F440FFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4081, 0x000A0000),
	gsDPNoOpTag(0xA3303AFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4089, 0xFFF80000),
	gsSPCullDisplayList(894, 23423 /* INVALID */),
	gsDPNoOpTag(0xFFF50000),
	gsSPCullDisplayList(900, 23039 /* INVALID */),
	gsDPNoOpTag(0xFFF10000),
	gsSPCullDisplayList(911, 19711 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4081, 0x00010000),
	gsDPNoOpTag(0x902A00FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4091, 0xFFFC0000),
	gsSPCullDisplayList(895, 21887 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4081, 0xFFF70000),
	gsSPCullDisplayList(906 /* INVALID */, 25343 /* INVALID */),
	gsDPNoOpTag(0x000F0000),
	gsSPVertex(0x005158FF, 0, 122),
	gsDPNoOpTag(0x000A0000),
	gsSPVertex(0x006D31FF, 0, 119),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4081, 0xFFF70000),
	gsDPSetColorImage(5, G_IM_SIZ_4b, 1814, 0xA939C5FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4070, 0xFFF90000),
	gsDPSetColorImage(6, G_IM_SIZ_4b, 1866, 0x8E16E4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4081, 0x000D0000),
	gsDPNoOpTag(0xBD2F58FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4070, 0x00060000),
	gsDPNoOpTag(0x92062EFF),
	gsDPNoOpTag(0x00020000),
	gsSPVertex(0xF8DC72FF, 160, -68),
	gsDPNoOpTag(0x00010000),
	gsSPVertex(0xF8DB71FF, 32, 78),
	gsDPNoOpTag(0x00030000),
	gsSPVertex(0x3FF265FF, 176, -59),
	gsDPNoOpTag(0xFFFD0000),
	gsSPModifyVertex(692, 0x001F, 0x010077FF),
	gsDPNoOpTag(0xFFFD0000),
	gsSPModifyVertex(707 /* INVALID */, 0x001A, 0x67C91AFF),
	gsDPNoOpTag(0xFFFC0000),
	gsSPModifyVertex(895, 0x0047, 0x4F19AAFF),
	gsDPNoOpTag(0xFFF80000),
	gsSPModifyVertex(894, 0x008C, 0x2954B6FF),
	gsDPNoOpTag(0xFFFC0000),
	gsSPModifyVertex(934, 0x0095, 0xE357B4FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4092, 0xFFFC0000),
	gsSPCullDisplayList(934, 22271 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4091, 0x00000000),
	gsDPNoOpTag(0xE45054FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 12, 0xFFFD0000),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 1385, 0x04EE76FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 11, 0xFFFD0000),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 1416, 0x93D91CFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4093, 0x00000000),
	gsDPNoOpTag(0x106D2DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 14, 0xFFFD0000),
	gsDPSetColorImage(G_IM_FMT_I, G_IM_SIZ_16b, 1163, 0x730921FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 14, 0xFFFD0000),
	gsDPSetColorImage(5, G_IM_SIZ_32b, 1236, 0xFF0177FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPSetDepthImage(0xE357B4FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4092, 0xFFFC0000),
	gsDPSetColorImage(G_IM_FMT_IA, G_IM_SIZ_8b, 1869, 0x2250ADFF),
	gsDPNoOp(),
	gsSPVertex(0xE86F25FF, 224, -146),
	gsDPNoOpTag(0x000A0000),
	gsSPVertex(0x006D31FF, 0, 119),
	gsDPNoOp(),
	gsSPVertex(0x165A4CFF, 240, -195),
	gsDPNoOpTag(0x00070000),
	gsSPVertex(0x335F33FF, 192, -70),
	gsDPNoOp(),
	gsSPVertex(0x23603DFF, 240, -235),
	gsDPNoOp(),
	gsSPModifyVertex(889 /* INVALID */, 0x0000, 0x5C4323FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 25, 0x00010000),
	gsDPNoOpTag(0x08DC72FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 28, 0x00030000),
	gsDPNoOpTag(0xC1F265FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4093, 0x00000000),
	gsDPNoOpTag(0xE76639FF),
	gsDPNoOpTag(0xFFFD0000),
	gsSPModifyVertex(692, 0x001F, 0x010077FF),
	gsDPNoOpTag(0xFFFD0000),
	gsSPModifyVertex(581, 0x006F, 0x901A22FF),
	gsDPNoOpTag(0x00030000),
	gsSPVertex(0xC31165FF, 48, 11),
	gsDPNoOpTag(0xFFFD0000),
	gsSPModifyVertex(617 /* INVALID */, 0x0044, 0xFCEE76FF),
	gsDPNoOpTag(0x00010000),
	gsSPVertex(0xF8DC72FF, 192, -113),
	gsDPNoOpTag(0x00020000),
	gsSPVertex(0xF8DC72FF, 160, -68),
	gsDPNoOpTag(0x00040000),
	gsSPVertex(0x104A5CFF, 128, -44),
	gsDPNoOpTag(0xFFFD0000),
	gsSPModifyVertex(718 /* INVALID */, 0x0039, 0xFFF777FF),
	gsDPNoOp(),
	gsSPVertex(0x051476FF, 80, -27),
	gsDPNoOpTag(0xFFFD0000),
	gsSPModifyVertex(764, 0x001A, 0xFCEE76FF),
	gsDPNoOp(),
	gsSPVertex(0x061476FF, 160, -75),
	gsDPNoOpTag(0x00020000),
	gsSPVertex(0xF8DB71FF, 80, 43),
	gsDPNoOpTag(0x00010000),
	gsSPVertex(0xF8DB71FF, 208, -191),
	gsDPNoOpTag(0x00010000),
	gsSPVertex(0xF8DB71FF, 80, 29),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4091, 0x00000000),
	gsDPNoOpTag(0xFB1476FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4093, 0x00000000),
	gsDPNoOpTag(0xFA1476FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 14, 0xFFFD0000),
	gsDPSetColorImage(6, G_IM_SIZ_4b, 1438, 0x01F777FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 12, 0xFFFD0000),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 1529, 0x04EE76FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 27, 0x00020000),
	gsDPNoOpTag(0x08DB71FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 26, 0x00010000),
	gsDPNoOpTag(0x08DB71FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 25, 0x00010000),
	gsDPNoOpTag(0x08DB71FF),
	gsDPNoOpTag(0x000F0000),
	gsDPSetDepthImage(0x005158FF),
	gsDPNoOpTag(0x000A0000),
	gsDPSetColorImage(G_IM_FMT_RGBA, G_IM_SIZ_32b, 23, 0x006D31FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4090, 0x00070000),
	gsSPModifyVertex(32735 /* INVALID */, 0x0041, 0xCD5F33FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4081, 0x000D0000),
	gsSPModifyVertex(526 /* INVALID */, 0x0048, 0xBD2F58FF),
	gsDPNoOpTag(0x00070000),
	gsSPModifyVertex(32735 /* INVALID */, 0x0041, 0x335F33FF),
	gsDPNoOpTag(0x000D0000),
	gsSPModifyVertex(526 /* INVALID */, 0x0048, 0x423256FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0x5A, 0xFF),
	gsDPSetEnvColor(0xA0, 0x82, 0x28, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_CULL_BACK | G_FOG),
	gsSPSetGeometryMode(G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000100, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000130, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(5, 3, 4, 0, 6, 7, 8, 0),
	gsSP2Triangles(9, 10, 5, 0, 10, 11, 3, 0),
	gsSP2Triangles(0, 3, 11, 0, 1, 0, 12, 0),
	gsSP2Triangles(7, 1, 13, 0, 14, 15, 16, 0),
	gsSP2Triangles(14, 5, 15, 0, 14, 17, 5, 0),
	gsSP2Triangles(15, 7, 16, 0, 7, 6, 16, 0),
	gsSP2Triangles(15, 4, 2, 0, 15, 5, 4, 0),
	gsSP2Triangles(7, 15, 2, 0, 7, 2, 1, 0),
	gsSP2Triangles(18, 19, 20, 0, 21, 22, 23, 0),
	gsSP2Triangles(24, 25, 26, 0, 24, 27, 25, 0),
	gsSP2Triangles(26, 25, 22, 0, 26, 22, 21, 0),
	gsSP2Triangles(28, 19, 18, 0, 29, 30, 31, 0),
	gsSP1Triangle(23, 29, 21, 0),
	gsSPVertex(0x06000330, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 4, 0),
	gsSP2Triangles(3, 5, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(8, 10, 9, 0, 11, 12, 13, 0),
	gsSP2Triangles(7, 14, 8, 0, 15, 16, 5, 0),
	gsSP2Triangles(17, 18, 8, 0, 18, 10, 8, 0),
	gsSP2Triangles(17, 8, 14, 0, 3, 19, 5, 0),
	gsSP2Triangles(20, 21, 22, 0, 21, 20, 23, 0),
	gsSP2Triangles(24, 25, 26, 0, 27, 26, 28, 0),
	gsSP2Triangles(29, 30, 31, 0, 27, 30, 24, 0),
	gsSPVertex(0x06000530, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 2, 0, 8, 1, 0, 0),
	gsSP2Triangles(9, 2, 7, 0, 10, 11, 12, 0),
	gsSP2Triangles(13, 5, 14, 0, 15, 16, 17, 0),
	gsSP2Triangles(18, 14, 9, 0, 19, 20, 21, 0),
	gsSP2Triangles(7, 18, 9, 0, 22, 23, 24, 0),
	gsSP2Triangles(25, 21, 20, 0, 26, 27, 21, 0),
	gsSP2Triangles(2, 1, 28, 0, 9, 5, 4, 0),
	gsSP2Triangles(3, 13, 19, 0, 2, 9, 29, 0),
	gsSP2Triangles(30, 17, 16, 0, 24, 16, 22, 0),
	gsSPVertex(0x06000720, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 10, 11, 0),
	gsSP2Triangles(12, 8, 7, 0, 13, 9, 14, 0),
	gsSP2Triangles(15, 16, 6, 0, 12, 17, 18, 0),
	gsSP2Triangles(19, 8, 20, 0, 8, 19, 6, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 25, 0),
	gsSP2Triangles(26, 27, 28, 0, 27, 10, 28, 0),
	gsSP2Triangles(10, 29, 28, 0, 10, 9, 29, 0),
	gsSP1Triangle(9, 13, 29, 0),
	gsSPVertex(0x06000900, 24, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 7, 0, 6, 3, 8, 0),
	gsSP2Triangles(8, 3, 9, 0, 10, 8, 9, 0),
	gsSP2Triangles(9, 11, 10, 0, 10, 11, 12, 0),
	gsSP2Triangles(11, 13, 12, 0, 1, 14, 15, 0),
	gsSP2Triangles(3, 16, 9, 0, 17, 12, 13, 0),
	gsSP2Triangles(18, 8, 10, 0, 19, 18, 20, 0),
	gsSP1Triangle(21, 22, 23, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0xAA, 0xA0, 0x8C, 0xFF),
	gsSPVertex(0x06000A80, 14, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 0, 3, 0),
	gsSP2Triangles(4, 0, 2, 0, 2, 5, 4, 0),
	gsSP2Triangles(0, 4, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(9, 10, 7, 0, 9, 11, 10, 0),
	gsSP2Triangles(9, 12, 11, 0, 11, 13, 10, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_00E0.txt
{
	gsDPNoOp(),
	gsDPNoOpTag(0x1E206FFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0x00050000),
	gsDPNoOpTag(0x520556FF),
	gsDPNoOpTag(0x00090000),
	gsDPNoOpTag(0x00DB72FF),
	gsDPNoOpTag(0x00040000),
	gsDPNoOpTag(0x620944FF),
	gsDPNoOpTag(0x00020000),
	gsDPNoOpTag(0x334156FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x0CD870FF),
	gsDPNoOpTag(0x00050000),
	gsDPNoOpTag(0xE1A040FF),
	gsDPNoOpTag(0x00050000),
	gsDPNoOpTag(0x008D20FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFF0000),
	gsDPNoOpTag(0x161E72FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 13, 0x00040000),
	gsDPNoOpTag(0xA9DE4BFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 15, 0x00020000),
	gsDPNoOpTag(0xCFD263FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0x00000000),
	gsDPNoOpTag(0xDAE46EFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 8, 0xFFFF0000),
	gsDPNoOpTag(0x09FD77FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0x00000000),
	gsDPNoOpTag(0xE11E6FFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3, 0x00040000),
	gsDPNoOpTag(0x9F0845FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00050000),
	gsDPNoOpTag(0xA6FF4EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1, 0x00020000),
	gsDPNoOpTag(0xCC3E58FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0x00000000),
	gsDPNoOpTag(0xE11E6FFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4080, 0x00010000),
	gsDPNoOpTag(0x13E172FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFF0000),
	gsDPNoOpTag(0x161E72FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3, 0x00040000),
	gsDPNoOpTag(0x9F0845FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4085, 0x00050000),
	gsDPNoOpTag(0x1FA040FF),
	gsDPNoOpTag(0x00050000),
	gsDPNoOpTag(0x008D20FF),
	gsDPNoOpTag(0x00090000),
	gsDPNoOpTag(0x00DB72FF),
	gsDPNoOpTag(0x00050000),
	gsDPNoOpTag(0x002273FF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x54511AFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x000189FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x5504ACFF),
	gsDPNoOpTag(0x00050000),
	gsDPNoOpTag(0x520556FF),
	gsDPNoOpTag(0x00040000),
	gsDPNoOpTag(0x620944FF),
	gsDPNoOp(),
	gsDPNoOpTag(0x44A9D2FF),
	gsDPNoOpTag(0x00040000),
	gsDPNoOpTag(0x5EE945FF),
	gsDPNoOpTag(0x00020000),
	gsDPNoOpTag(0x334156FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOpTag(0x00020000),
	gsDPNoOpTag(0x46D657FF),
	gsDPNoOp(),
	gsDPNoOpTag(0x12CC6AFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0xF3FD77FF),
	gsDPNoOp(),
	gsDPNoOpTag(0x1E206FFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0xCF1F69FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x00326CFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4080, 0x00010000),
	gsDPNoOpTag(0x13E172FF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0xCF1F69FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x0CD870FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0x00050000),
	gsDPNoOpTag(0xE1A040FF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPNoOpTag(0x00050000),
	gsDPNoOpTag(0x008D20FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4085, 0x00050000),
	gsDPNoOpTag(0x1FA040FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x00326CFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFF0000),
	gsDPNoOpTag(0x161E72FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 8, 0xFFFF0000),
	gsDPNoOpTag(0x09FD77FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0x00000000),
	gsDPNoOpTag(0xE11E6FFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0x00000000),
	gsDPNoOpTag(0xDAE46EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1, 0x00020000),
	gsDPNoOpTag(0xCC3E58FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3, 0x00040000),
	gsDPNoOpTag(0x9F0845FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00050000),
	gsDPNoOpTag(0xA6FF4EFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 13, 0x00040000),
	gsDPNoOpTag(0xA9DE4BFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 15, 0x00020000),
	gsDPNoOpTag(0xCFD263FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x54511AFF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x6D122DFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x000189FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x44A9D2FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x5504ACFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_0330.txt
{
	gsDPNoOp(),
	gsDPNoOpTag(0x44A9D2FF),
	gsDPNoOpTag(0x00040000),
	gsDPNoOpTag(0x5EE945FF),
	gsDPNoOpTag(0x00020000),
	gsDPNoOpTag(0x334156FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOpTag(0x00020000),
	gsDPNoOpTag(0x46D657FF),
	gsDPNoOp(),
	gsDPNoOpTag(0x12CC6AFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0xF3FD77FF),
	gsDPNoOp(),
	gsDPNoOpTag(0x1E206FFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0xCF1F69FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x00326CFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4080, 0x00010000),
	gsDPNoOpTag(0x13E172FF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0xCF1F69FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x0CD870FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0x00050000),
	gsDPNoOpTag(0xE1A040FF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPNoOpTag(0x00050000),
	gsDPNoOpTag(0x008D20FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4085, 0x00050000),
	gsDPNoOpTag(0x1FA040FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x00326CFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFF0000),
	gsDPNoOpTag(0x161E72FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 8, 0xFFFF0000),
	gsDPNoOpTag(0x09FD77FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0x00000000),
	gsDPNoOpTag(0xE11E6FFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0x00000000),
	gsDPNoOpTag(0xDAE46EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1, 0x00020000),
	gsDPNoOpTag(0xCC3E58FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3, 0x00040000),
	gsDPNoOpTag(0x9F0845FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00050000),
	gsDPNoOpTag(0xA6FF4EFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 13, 0x00040000),
	gsDPNoOpTag(0xA9DE4BFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 15, 0x00020000),
	gsDPNoOpTag(0xCFD263FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x54511AFF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x6D122DFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x000189FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x44A9D2FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x5504ACFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_0340.txt
{
	gsDPNoOpTag(0x00040000),
	gsDPNoOpTag(0x5EE945FF),
	gsDPNoOpTag(0x00020000),
	gsDPNoOpTag(0x334156FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOpTag(0x00020000),
	gsDPNoOpTag(0x46D657FF),
	gsDPNoOp(),
	gsDPNoOpTag(0x12CC6AFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0xF3FD77FF),
	gsDPNoOp(),
	gsDPNoOpTag(0x1E206FFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0xCF1F69FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x00326CFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4080, 0x00010000),
	gsDPNoOpTag(0x13E172FF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0xCF1F69FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x0CD870FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0x00050000),
	gsDPNoOpTag(0xE1A040FF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPNoOpTag(0x00050000),
	gsDPNoOpTag(0x008D20FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4085, 0x00050000),
	gsDPNoOpTag(0x1FA040FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x00326CFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFF0000),
	gsDPNoOpTag(0x161E72FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 8, 0xFFFF0000),
	gsDPNoOpTag(0x09FD77FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0x00000000),
	gsDPNoOpTag(0xE11E6FFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0x00000000),
	gsDPNoOpTag(0xDAE46EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1, 0x00020000),
	gsDPNoOpTag(0xCC3E58FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3, 0x00040000),
	gsDPNoOpTag(0x9F0845FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00050000),
	gsDPNoOpTag(0xA6FF4EFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 13, 0x00040000),
	gsDPNoOpTag(0xA9DE4BFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 15, 0x00020000),
	gsDPNoOpTag(0xCFD263FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x54511AFF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x6D122DFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x000189FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x44A9D2FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x5504ACFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_03C0.txt
{
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0xF3FD77FF),
	gsDPNoOp(),
	gsDPNoOpTag(0x1E206FFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0xCF1F69FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x00326CFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4080, 0x00010000),
	gsDPNoOpTag(0x13E172FF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0xCF1F69FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x0CD870FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0x00050000),
	gsDPNoOpTag(0xE1A040FF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPNoOpTag(0x00050000),
	gsDPNoOpTag(0x008D20FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4085, 0x00050000),
	gsDPNoOpTag(0x1FA040FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x00326CFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFF0000),
	gsDPNoOpTag(0x161E72FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 8, 0xFFFF0000),
	gsDPNoOpTag(0x09FD77FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0x00000000),
	gsDPNoOpTag(0xE11E6FFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0x00000000),
	gsDPNoOpTag(0xDAE46EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1, 0x00020000),
	gsDPNoOpTag(0xCC3E58FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3, 0x00040000),
	gsDPNoOpTag(0x9F0845FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00050000),
	gsDPNoOpTag(0xA6FF4EFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 13, 0x00040000),
	gsDPNoOpTag(0xA9DE4BFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 15, 0x00020000),
	gsDPNoOpTag(0xCFD263FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x54511AFF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x6D122DFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x000189FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x44A9D2FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x5504ACFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_0438.txt
{
	gsDPNoOpTag(0x5831C0FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4080, 0x00010000),
	gsDPNoOpTag(0x13E172FF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0xCF1F69FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x0CD870FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0x00050000),
	gsDPNoOpTag(0xE1A040FF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPNoOpTag(0x00050000),
	gsDPNoOpTag(0x008D20FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4085, 0x00050000),
	gsDPNoOpTag(0x1FA040FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x00326CFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFF0000),
	gsDPNoOpTag(0x161E72FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 8, 0xFFFF0000),
	gsDPNoOpTag(0x09FD77FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0x00000000),
	gsDPNoOpTag(0xE11E6FFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0x00000000),
	gsDPNoOpTag(0xDAE46EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1, 0x00020000),
	gsDPNoOpTag(0xCC3E58FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3, 0x00040000),
	gsDPNoOpTag(0x9F0845FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00050000),
	gsDPNoOpTag(0xA6FF4EFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 13, 0x00040000),
	gsDPNoOpTag(0xA9DE4BFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 15, 0x00020000),
	gsDPNoOpTag(0xCFD263FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x54511AFF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x6D122DFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x000189FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x44A9D2FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x5504ACFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_04A0.txt
{
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPNoOpTag(0x00050000),
	gsDPNoOpTag(0x008D20FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4085, 0x00050000),
	gsDPNoOpTag(0x1FA040FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x00326CFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFF0000),
	gsDPNoOpTag(0x161E72FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 8, 0xFFFF0000),
	gsDPNoOpTag(0x09FD77FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0x00000000),
	gsDPNoOpTag(0xE11E6FFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0x00000000),
	gsDPNoOpTag(0xDAE46EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1, 0x00020000),
	gsDPNoOpTag(0xCC3E58FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3, 0x00040000),
	gsDPNoOpTag(0x9F0845FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00050000),
	gsDPNoOpTag(0xA6FF4EFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 13, 0x00040000),
	gsDPNoOpTag(0xA9DE4BFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 15, 0x00020000),
	gsDPNoOpTag(0xCFD263FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x54511AFF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x6D122DFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x000189FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x44A9D2FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x5504ACFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_04B0.txt
{
	gsDPNoOpTag(0x00050000),
	gsDPNoOpTag(0x008D20FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4085, 0x00050000),
	gsDPNoOpTag(0x1FA040FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x00326CFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFF0000),
	gsDPNoOpTag(0x161E72FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 8, 0xFFFF0000),
	gsDPNoOpTag(0x09FD77FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0x00000000),
	gsDPNoOpTag(0xE11E6FFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0x00000000),
	gsDPNoOpTag(0xDAE46EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1, 0x00020000),
	gsDPNoOpTag(0xCC3E58FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3, 0x00040000),
	gsDPNoOpTag(0x9F0845FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00050000),
	gsDPNoOpTag(0xA6FF4EFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 13, 0x00040000),
	gsDPNoOpTag(0xA9DE4BFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 15, 0x00020000),
	gsDPNoOpTag(0xCFD263FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x54511AFF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x6D122DFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x000189FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x44A9D2FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x5504ACFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_04C0.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4085, 0x00050000),
	gsDPNoOpTag(0x1FA040FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x00326CFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFF0000),
	gsDPNoOpTag(0x161E72FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 8, 0xFFFF0000),
	gsDPNoOpTag(0x09FD77FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0x00000000),
	gsDPNoOpTag(0xE11E6FFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0x00000000),
	gsDPNoOpTag(0xDAE46EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1, 0x00020000),
	gsDPNoOpTag(0xCC3E58FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3, 0x00040000),
	gsDPNoOpTag(0x9F0845FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00050000),
	gsDPNoOpTag(0xA6FF4EFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 13, 0x00040000),
	gsDPNoOpTag(0xA9DE4BFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 15, 0x00020000),
	gsDPNoOpTag(0xCFD263FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x54511AFF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x6D122DFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x000189FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x44A9D2FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x5504ACFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_04D0.txt
{
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x00326CFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFF0000),
	gsDPNoOpTag(0x161E72FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 8, 0xFFFF0000),
	gsDPNoOpTag(0x09FD77FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0x00000000),
	gsDPNoOpTag(0xE11E6FFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0x00000000),
	gsDPNoOpTag(0xDAE46EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1, 0x00020000),
	gsDPNoOpTag(0xCC3E58FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3, 0x00040000),
	gsDPNoOpTag(0x9F0845FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00050000),
	gsDPNoOpTag(0xA6FF4EFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 13, 0x00040000),
	gsDPNoOpTag(0xA9DE4BFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 15, 0x00020000),
	gsDPNoOpTag(0xCFD263FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x54511AFF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x6D122DFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x000189FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x44A9D2FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x5504ACFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_04E0.txt
{
	gsDPNoOp(),
	gsDPNoOpTag(0x00326CFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFF0000),
	gsDPNoOpTag(0x161E72FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 8, 0xFFFF0000),
	gsDPNoOpTag(0x09FD77FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0x00000000),
	gsDPNoOpTag(0xE11E6FFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0x00000000),
	gsDPNoOpTag(0xDAE46EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1, 0x00020000),
	gsDPNoOpTag(0xCC3E58FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3, 0x00040000),
	gsDPNoOpTag(0x9F0845FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00050000),
	gsDPNoOpTag(0xA6FF4EFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 13, 0x00040000),
	gsDPNoOpTag(0xA9DE4BFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 15, 0x00020000),
	gsDPNoOpTag(0xCFD263FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x54511AFF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x6D122DFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x000189FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x44A9D2FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x5504ACFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_0500.txt
{
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 8, 0xFFFF0000),
	gsDPNoOpTag(0x09FD77FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0x00000000),
	gsDPNoOpTag(0xE11E6FFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0x00000000),
	gsDPNoOpTag(0xDAE46EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1, 0x00020000),
	gsDPNoOpTag(0xCC3E58FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3, 0x00040000),
	gsDPNoOpTag(0x9F0845FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00050000),
	gsDPNoOpTag(0xA6FF4EFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 13, 0x00040000),
	gsDPNoOpTag(0xA9DE4BFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 15, 0x00020000),
	gsDPNoOpTag(0xCFD263FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x54511AFF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x6D122DFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x000189FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x44A9D2FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x5504ACFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_0520.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_16b, 8, 0xFFFF0000),
	gsDPNoOpTag(0x09FD77FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0x00000000),
	gsDPNoOpTag(0xE11E6FFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0x00000000),
	gsDPNoOpTag(0xDAE46EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1, 0x00020000),
	gsDPNoOpTag(0xCC3E58FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3, 0x00040000),
	gsDPNoOpTag(0x9F0845FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00050000),
	gsDPNoOpTag(0xA6FF4EFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 13, 0x00040000),
	gsDPNoOpTag(0xA9DE4BFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 15, 0x00020000),
	gsDPNoOpTag(0xCFD263FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x54511AFF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x6D122DFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x000189FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x44A9D2FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x5504ACFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_0540.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0x00000000),
	gsDPNoOpTag(0xE11E6FFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0x00000000),
	gsDPNoOpTag(0xDAE46EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1, 0x00020000),
	gsDPNoOpTag(0xCC3E58FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3, 0x00040000),
	gsDPNoOpTag(0x9F0845FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00050000),
	gsDPNoOpTag(0xA6FF4EFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 13, 0x00040000),
	gsDPNoOpTag(0xA9DE4BFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 15, 0x00020000),
	gsDPNoOpTag(0xCFD263FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x54511AFF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x6D122DFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x000189FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x44A9D2FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x5504ACFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_0560.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1, 0x00020000),
	gsDPNoOpTag(0xCC3E58FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3, 0x00040000),
	gsDPNoOpTag(0x9F0845FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00050000),
	gsDPNoOpTag(0xA6FF4EFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 13, 0x00040000),
	gsDPNoOpTag(0xA9DE4BFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 15, 0x00020000),
	gsDPNoOpTag(0xCFD263FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x54511AFF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x6D122DFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x000189FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x44A9D2FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x5504ACFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_0580.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 3, 0x00040000),
	gsDPNoOpTag(0x9F0845FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00050000),
	gsDPNoOpTag(0xA6FF4EFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 13, 0x00040000),
	gsDPNoOpTag(0xA9DE4BFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 15, 0x00020000),
	gsDPNoOpTag(0xCFD263FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x54511AFF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x6D122DFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x000189FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x44A9D2FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x5504ACFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_05A0.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00050000),
	gsDPNoOpTag(0xA6FF4EFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 13, 0x00040000),
	gsDPNoOpTag(0xA9DE4BFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 15, 0x00020000),
	gsDPNoOpTag(0xCFD263FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x54511AFF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x6D122DFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x000189FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x44A9D2FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x5504ACFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_05C0.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_32b, 13, 0x00040000),
	gsDPNoOpTag(0xA9DE4BFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 15, 0x00020000),
	gsDPNoOpTag(0xCFD263FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x54511AFF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x6D122DFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x000189FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x44A9D2FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x5504ACFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_05E0.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_16b, 15, 0x00020000),
	gsDPNoOpTag(0xCFD263FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x54511AFF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x6D122DFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x000189FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x44A9D2FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x5504ACFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_0600.txt
{
	gsDPNoOpTag(0xFFFA0000),
	gsDPNoOpTag(0x54511AFF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x6D122DFF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x98E0CEFF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x000189FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0xD49ECBFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x44A9D2FF),
	gsDPNoOpTag(0x00010000),
	gsDPNoOpTag(0x5504ACFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_0670.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00010000),
	gsDPNoOpTag(0xBF0C9DFF),
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_0680.txt
{
	gsDPNoOp(),
	gsDPNoOpTag(0x01BC9EFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0xFFFE0000),
	gsDPNoOpTag(0x0D9AC4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0x00000000),
	gsDPNoOpTag(0xA9BDD1FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 27, 0xFFFA0000),
	gsDPNoOpTag(0xAD521AFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 11, 0xFFFD0000),
	gsDPNoOpTag(0x66CCDFFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 13, 0xFFF50000),
	gsDPNoOpTag(0x93122CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_06E0.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4091, 0xFFF50000),
	gsDPNoOpTag(0xA0FFB8FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_06F0.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFC0000),
	gsDPNoOpTag(0x643DE8FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4076, 0xFFF80000),
	gsDPNoOpTag(0xB5B9C4FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 3, 0xFFFD0000),
	gsDPNoOpTag(0x234CABFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4081, 0xFFFD0000),
	gsDPNoOpTag(0x5CF7B5FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 5, 0xFFFE0000),
	gsDPNoOpTag(0xDF58B6FF),
	gsDPNoOpTag(0xFFFE0000),
	gsDPNoOpTag(0x1F57B4FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_0750.txt
{
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0x9AFDC2FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_redead_mask_0768.txt
{
	gsDPNoOpTag(0xDC4BAAFF),
	gsDPNoOpTag(0xFFF80000),
	gsDPNoOpTag(0x4CBBC4FF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x9C3BE3FF),
	gsDPNoOpTag(0xFFF50000),
	gsDPNoOpTag(0x5FFEB8FF),
	gsDPNoOpTag(0xFFFD0000),
	gsDPNoOpTag(0xBA30ADFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0094CCFF),
	gsDPNoOpTag(0xFFFC0000),
	gsDPNoOpTag(0x0072DCFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4076, 0xFFFD0000),
	gsDPNoOpTag(0x5831C0FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x8C, 0x5A, 0x3C, 0xFF),
	gsDPSetEnvColor(0x46, 0x28, 0x1E, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0152588), qu016(0.0152588), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 15, 14),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 7, 6, 3, 0),
	gsSP2Triangles(7, 8, 6, 0, 9, 8, 7, 0),
	gsSP2Triangles(9, 10, 8, 0, 11, 10, 9, 0),
	gsSP2Triangles(12, 10, 11, 0, 13, 14, 15, 0),
	gsSP2Triangles(4, 13, 5, 0, 13, 4, 14, 0),
	gsSP2Triangles(12, 11, 16, 0, 2, 12, 17, 0),
	gsSP2Triangles(12, 16, 17, 0, 15, 17, 16, 0),
	gsSP2Triangles(18, 17, 15, 0, 14, 19, 18, 0),
	gsSP2Triangles(18, 15, 14, 0, 20, 1, 0, 0),
	gsSP2Triangles(21, 1, 20, 0, 22, 4, 23, 0),
	gsSP2Triangles(4, 24, 23, 0, 23, 24, 25, 0),
	gsSP2Triangles(24, 26, 25, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 28, 27, 0, 27, 28, 29, 0),
	gsSP2Triangles(29, 28, 21, 0, 30, 14, 31, 0),
	gsSP2Triangles(22, 31, 4, 0, 14, 4, 31, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(3, 0, 2, 0, 0, 3, 5, 0),
	gsSP2Triangles(5, 3, 6, 0, 6, 7, 8, 0),
	gsSP2Triangles(8, 5, 6, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 12, 9, 0, 13, 14, 15, 0),
	gsSP2Triangles(13, 16, 17, 0, 15, 18, 19, 0),
	gsSP2Triangles(20, 18, 21, 0, 16, 22, 23, 0),
	gsSP2Triangles(24, 23, 22, 0, 25, 21, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 27, 21, 25, 0),
	gsSP2Triangles(15, 19, 13, 0, 17, 14, 13, 0),
	gsSP2Triangles(20, 19, 18, 0, 26, 21, 18, 0),
	gsSP2Triangles(23, 17, 16, 0, 22, 27, 24, 0),
	gsSP2Triangles(28, 29, 30, 0, 4, 31, 30, 0),
	gsSPVertex(0x06000430, 29, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 6, 8, 0),
	gsSP2Triangles(5, 6, 7, 0, 7, 9, 1, 0),
	gsSP2Triangles(9, 2, 1, 0, 9, 7, 8, 0),
	gsSP2Triangles(10, 11, 3, 0, 10, 0, 12, 0),
	gsSP2Triangles(2, 12, 0, 0, 5, 13, 3, 0),
	gsSP2Triangles(14, 15, 16, 0, 15, 17, 16, 0),
	gsSP2Triangles(14, 18, 15, 0, 19, 20, 16, 0),
	gsSP2Triangles(21, 20, 19, 0, 22, 23, 24, 0),
	gsSP2Triangles(23, 25, 26, 0, 25, 27, 28, 0),
	gsSP2Triangles(14, 28, 27, 0, 16, 17, 19, 0),
	gsSP2Triangles(19, 22, 21, 0, 24, 21, 22, 0),
	gsSP2Triangles(26, 24, 23, 0, 28, 26, 25, 0),
	gsSP1Triangle(27, 18, 14, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x50, 0x14, 0x0A, 0xFF),
	gsDPSetEnvColor(0x28, 0x14, 0x14, 0xFF),
	gsSPVertex(0x06000600, 30, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 4, 0),
	gsSP2Triangles(4, 0, 2, 0, 5, 3, 4, 0),
	gsSP2Triangles(5, 6, 3, 0, 3, 6, 7, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 3, 10, 0),
	gsSP2Triangles(3, 7, 10, 0, 9, 11, 3, 0),
	gsSP2Triangles(12, 11, 9, 0, 12, 13, 11, 0),
	gsSP2Triangles(12, 14, 13, 0, 15, 14, 12, 0),
	gsSP2Triangles(16, 14, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(19, 18, 17, 0, 8, 18, 19, 0),
	gsSP2Triangles(8, 19, 7, 0, 6, 20, 8, 0),
	gsSP2Triangles(20, 21, 8, 0, 22, 21, 20, 0),
	gsSP2Triangles(21, 22, 23, 0, 22, 24, 23, 0),
	gsSP2Triangles(24, 25, 23, 0, 2, 25, 24, 0),
	gsSP2Triangles(1, 25, 2, 0, 21, 23, 26, 0),
	gsSP2Triangles(23, 27, 26, 0, 26, 27, 28, 0),
	gsSP2Triangles(28, 27, 29, 0, 29, 27, 16, 0),
	gsSP2Triangles(29, 16, 18, 0, 16, 15, 17, 0),
	gsSPEndDisplayList(),
}

object_gi_seed_0800.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4085, 0x00020000),
	gsDPSetColorImage(G_IM_FMT_RGBA, G_IM_SIZ_4b, 1726, 0x17584EFF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(TEXEL0, PRIMITIVE, PRIM_LOD_FRAC, TEXEL0, 0, 0, 0, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 0, 0, 0, 1),
	gsDPSetPrimColor(0, qu08(0.5), 0xFF, 0xFF, 0xAA, 0xFF),
	gsDPSetEnvColor(0x78, 0x6E, 0x00, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 1, 1),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(3, 6, 4, 0, 0, 7, 8, 0),
	gsSP2Triangles(9, 10, 11, 0, 12, 7, 2, 0),
	gsSP2Triangles(13, 2, 1, 0, 10, 5, 4, 0),
	gsSP2Triangles(14, 4, 6, 0, 7, 15, 8, 0),
	gsSP2Triangles(11, 14, 16, 0, 17, 18, 12, 0),
	gsSP2Triangles(10, 9, 13, 0, 14, 11, 10, 0),
	gsSP2Triangles(19, 16, 14, 0, 16, 19, 20, 0),
	gsSP2Triangles(21, 15, 12, 0, 21, 18, 22, 0),
	gsSP2Triangles(23, 9, 22, 0, 9, 11, 22, 0),
	gsSP2Triangles(11, 16, 22, 0, 16, 21, 22, 0),
	gsSP2Triangles(15, 21, 16, 0, 2, 17, 12, 0),
	gsSP2Triangles(1, 10, 13, 0, 4, 14, 10, 0),
	gsSP2Triangles(6, 19, 14, 0, 19, 6, 20, 0),
	gsSP2Triangles(7, 12, 15, 0, 21, 12, 18, 0),
	gsSP2Triangles(23, 13, 9, 0, 24, 25, 26, 0),
	gsSP2Triangles(24, 27, 25, 0, 28, 29, 30, 0),
	gsSP1Triangle(28, 31, 29, 0),
	gsSPVertex(0x06000230, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 8, 10, 0),
	gsSP2Triangles(4, 10, 11, 0, 12, 13, 2, 0),
	gsSP2Triangles(1, 14, 2, 0, 5, 12, 15, 0),
	gsSP2Triangles(16, 17, 6, 0, 4, 3, 9, 0),
	gsSP2Triangles(18, 5, 4, 0, 19, 15, 12, 0),
	gsSP2Triangles(15, 19, 14, 0, 20, 14, 6, 0),
	gsSP2Triangles(20, 17, 21, 0, 22, 3, 21, 0),
	gsSP2Triangles(3, 5, 21, 0, 5, 15, 21, 0),
	gsSP2Triangles(15, 20, 21, 0, 14, 20, 15, 0),
	gsSP2Triangles(8, 16, 6, 0, 10, 4, 9, 0),
	gsSP2Triangles(11, 18, 4, 0, 2, 19, 12, 0),
	gsSP2Triangles(19, 2, 14, 0, 7, 6, 14, 0),
	gsSP2Triangles(20, 6, 17, 0, 22, 9, 3, 0),
	gsSP2Triangles(23, 24, 25, 0, 23, 26, 24, 0),
	gsSP2Triangles(23, 27, 26, 0, 23, 28, 27, 0),
	gsSP2Triangles(23, 25, 28, 0, 29, 30, 31, 0),
	gsSPVertex(0x06000430, 24, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 4, 0),
	gsSP2Triangles(5, 4, 6, 0, 7, 8, 9, 0),
	gsSP2Triangles(1, 10, 11, 0, 12, 7, 13, 0),
	gsSP2Triangles(14, 15, 0, 0, 16, 17, 3, 0),
	gsSP2Triangles(7, 12, 16, 0, 18, 13, 7, 0),
	gsSP2Triangles(19, 20, 10, 0, 21, 10, 0, 0),
	gsSP2Triangles(21, 15, 22, 0, 23, 17, 22, 0),
	gsSP2Triangles(17, 12, 22, 0, 12, 13, 22, 0),
	gsSP2Triangles(13, 21, 22, 0, 10, 21, 19, 0),
	gsSP2Triangles(2, 14, 0, 0, 4, 5, 3, 0),
	gsSP2Triangles(8, 7, 16, 0, 9, 18, 7, 0),
	gsSP2Triangles(20, 11, 10, 0, 1, 0, 10, 0),
	gsSP2Triangles(21, 0, 15, 0, 23, 3, 17, 0),
	gsDPPipeSync(),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x78, 0x5A, 0x00, 0xFF),
	gsDPSetEnvColor(0x1E, 0x00, 0x00, 0xFF),
	gsSPVertex(0x060005B0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 3, 1, 0),
	gsSP2Triangles(4, 5, 6, 0, 7, 4, 6, 0),
	gsSP2Triangles(8, 2, 9, 0, 10, 7, 11, 0),
	gsSP2Triangles(12, 13, 14, 0, 15, 16, 13, 0),
	gsSP2Triangles(17, 18, 19, 0, 20, 17, 21, 0),
	gsSP2Triangles(12, 14, 22, 0, 23, 20, 21, 0),
	gsSP2Triangles(24, 25, 26, 0, 24, 27, 25, 0),
	gsSP2Triangles(28, 29, 30, 0, 31, 28, 30, 0),
	gsSPVertex(0x060007B0, 6, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSPEndDisplayList(),
}

object_gi_shield_1_03C0.txt
{
	(Gfx){0xCECFD8F8, 0xFDEDDDD1},
	(Gfx){0xD0D9DDE8, 0xF2E5D9D3},
	gsDPHalf1(0xFAEEDED1),
	(Gfx){0xCCD1DCEA, 0xE8E4E9DA},
	(Gfx){0xD2D3DBF2, 0xF3E3D7CE},
	(Gfx){0xCFD8DFED, 0xEDE1D7D2},
	gsSPGeometryMode(G_SHADE | G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN_LINEAR | G_SHADING_SMOOTH | 0x00001902, G_SHADE | G_CULL_FRONT | G_FOG | G_LIGHTING | G_TEXTURE_GEN | G_SHADING_SMOOTH | G_CLIPPING | 0xF140D8CA),
	(Gfx){0xCDD3E1EB, 0xE3E2E2D3},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 16, 0x00090000),
	gsDPNoOpTag(0x000078FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 14, 0x00090000),
	gsDPNoOpTag(0xE4FE74FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00090000),
	gsDPNoOpTag(0xDAFE71FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 14, 0x00090000),
	gsDPNoOpTag(0xE4FE74FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 8, 0x00070000),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1348, 0xCBFE6BFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00090000),
	gsDPNoOpTag(0xDAFE71FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4096, 0x00090000),
	gsDPNoOpTag(0xD9FF71FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4094, 0x00070000),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 1580, 0xCEFF6DFF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4089, 0x00090000),
	gsDPNoOpTag(0xEFFF76FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4093, 0x00090000),
	gsDPNoOpTag(0x000078FF),
	gsDPNoOpTag(0x00090000),
	gsDPNoOpTag(0x000078FF),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0x000078FF, 240, -189),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0x1B0074FF, 80, -51),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0x1BFF74FF, 64, 57),
	gsDPNoOpTag(0x00080000),
	gsSPVertex(0x35FF6BFF, 112, -35),
	gsDPNoOpTag(0x00080000),
	gsSPVertex(0x36006BFF, 128, -17),
	gsDPNoOpTag(0x00060000),
	gsSPModifyVertex(837, 0x0015, 0x36FF6BFF),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0x24FF72FF, 64, -47),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0x13EC74FF, 48, 1),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4084, 0x00090000),
	gsDPNoOpTag(0x00E374FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4079, 0x00070000),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 1946, 0x00C769FF),
	gsDPNoOpTag(0x00060000),
	gsSPModifyVertex(679 /* INVALID */, G_MWO_POINT_ST, 0x37FF6AFF),
	gsDPNoOpTag(0x00080000),
	gsSPVertex(0x37FE6AFF, 96, -68),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0x130076FF, 112, -32),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0x26FE71FF, 96, 17),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0x000078FF, 96, -66),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0x000078FF, 64, 14),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 7, 0x00090000),
	gsDPNoOpTag(0x000078FF),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0x000078FF, 112, -88),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0x000078FF, 64, -48),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 16, 0x00090000),
	(Gfx){0x1DDDFDF8, 0xED1873FF},
	gsDPNoOpTag(0x00090000),
	(Gfx){0x21BFFD85, 0x140B75FF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 32, 0x00000000),
	(Gfx){0x1C51FBD7, 0xED3B66FF},
	gsDPSetColorImage(7, G_IM_SIZ_4b, 24, 0x00000000),
	(Gfx){0x19CFFCDE, 0xCE0C6CFF},
	gsDPNoOpTag(0x00060000),
	gsSPCullDisplayList(32663, 13567 /* INVALID */),
	gsDPNoOpTag(0x00060000),
	gsSPCullDisplayList(128, 13183 /* INVALID */),
	gsDPNoOp(),
	gsSP1Triangle(103, 1, 70 /* INVALID */, 0),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0x20D36AFF, 16, 86),
	gsDPNoOp(),
	gsDPNoOpTag(0x00C065FF),
	gsDPNoOp(),
	gsSP2Triangles(24 /* INVALID */, 126, 111, 0, 125 /* INVALID */, 54, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0x140B75FF, 255, -189),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0x130076FF, 79, -11),
	gsDPNoOp(),
	(Gfx){0x2000040F, 0x00C065FF},
	gsDPNoOpTag(0x00090000),
	(Gfx){0x219101CC, 0x20D36AFF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4079, 0x00070000),
	(Gfx){0x1E7C0262, 0xEFC265FF},
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4078, 0x00000000),
	(Gfx){0x1A32028D, 0xC9E567FF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4084, 0x00090000),
	(Gfx){0x1E3A01CC, 0xE7DF70FF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4084, 0x00090000),
	(Gfx){0x1F2601CC, 0x00F177FF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4089, 0x00090000),
	(Gfx){0x1E290115, 0xE1FC73FF},
	gsDPNoOpTag(0x00090000),
	(Gfx){0x1FFC014C, 0x000078FF},
	gsDPNoOpTag(0x00090000),
	(Gfx){0x21960143, 0x120076FF},
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0x1BFF74FF, 144, -144),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0x120076FF, 96, -63),
	gsDPNoOpTag(0x00080000),
	gsSPModifyVertex(104, 0x0050, 0x34FF6BFF),
	gsDPNoOpTag(0x00090000),
	(Gfx){0x21990100, 0x1BFF74FF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4094, 0x00070000),
	(Gfx){0x1CC60070, 0xC0F965FF},
	gsDPSetColorImage(7, G_IM_SIZ_16b, 8, 0x00070000),
	(Gfx){0x1CABFF16, 0xC3FC66FF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 14, 0x00090000),
	(Gfx){0x1DE4FE4A, 0xDBFE72FF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 16, 0x00090000),
	(Gfx){0x1F01FE0C, 0x000078FF},
	gsDPNoOpTag(0x00090000),
	(Gfx){0x21B4FE89, 0x130076FF},
	gsDPNoOpTag(0x00090000),
	(Gfx){0x206CFEA1, 0x000078FF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00090000),
	(Gfx){0x1DF6FF09, 0x000078FF},
	gsDPNoOpTag(0x00090000),
	(Gfx){0x206CFEA1, 0x000078FF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 8, 0x00090000),
	(Gfx){0x1DF6FF09, 0x000078FF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 7, 0x00090000),
	(Gfx){0x1FC8FF3B, 0x000078FF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4096, 0x00090000),
	(Gfx){0x1E12002D, 0x000078FF},
	gsDPNoOpTag(0x00090000),
	(Gfx){0x203C0008, 0x000078FF},
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4093, 0x00090000),
	(Gfx){0x1EBA0088, 0x000078FF},
	gsDPNoOpTag(0x00090000),
	(Gfx){0x201100A9, 0x000078FF},
	gsDPNoOpTag(0x00090000),
	gsDPNoOpTag(0x000078FF),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0x0F0576FF, 0, 47),
	gsDPNoOpTag(0x00090000),
	gsDPNoOpTag(0x000078FF),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0x1A0674FF, 223, -134),
	gsDPNoOpTag(0x00080000),
	gsSPModifyVertex(12 /* INVALID */, 0x0054, 0x260771FF),
	gsDPNoOpTag(0x00080000),
	gsSPModifyVertex(32693 /* INVALID */, 0x0046, 0x19F274FF),
	gsDPNoOpTag(0x00090000),
	gsDPNoOpTag(0x15EC74FF),
	gsDPNoOpTag(0x00090000),
	gsSPVertex(0x0DCF6CFF, 239, -220),
	gsDPNoOp(),
	gsSPModifyVertex(497 /* INVALID */, 0x0000, 0x00178BFF),
	gsDPNoOpTag(0x00060000),
	gsSPModifyVertex(219 /* INVALID */, 0x0000, 0x020A89FF),
	gsDPNoOp(),
	gsDPSetDepthImage(0xEB0D8BFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4078, 0x00000000),
	gsSP1Triangle(42 /* INVALID */, 1 /* INVALID */, 18 /* INVALID */, 0),
	gsDPNoOp(),
	gsDPSetTextureImage(6, G_IM_SIZ_32b, 89, 0xD41693FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 24, 0x00000000),
	gsSP2Triangles(17, 0, 44, 0, 123, 69 /* INVALID */, 127 /* INVALID */, 0),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 32, 0x00000000),
	gsSPCullDisplayList(32747, 18303 /* INVALID */),
	gsDPNoOpTag(0x00090000),
	gsDPNoOpTag(0x01138AFF),
	gsDPNoOpTag(0x00040000),
	gsDPNoOpTag(0xF33A98FF),
	gsDPNoOpTag(0x00020000),
	gsDPNoOpTag(0x00258EFF),
	gsDPNoOpTag(0x00020000),
	gsDPNoOpTag(0xF73194FF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0xFFD192FF),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x00F989FF),
	gsDPNoOpTag(0x00020000),
	gsDPNoOpTag(0xFFB1A7FF),
	gsDPNoOpTag(0x00050000),
	gsDPNoOpTag(0xE542A0FF),
	gsDPNoOpTag(0x00020000),
	gsDPNoOpTag(0xFEB1A6FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 6, 0x00050000),
	gsSPCullDisplayList(32765, 19711 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 2, 0x00020000),
	gsSPCullDisplayList(136, 18687 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 2, 0x00020000),
	gsBranchZ(136 /* INVALID */, -0.644376, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4087, 0xFFFF0000),
	gsSPCullDisplayList(423 /* INVALID */, 18815 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4087, 0xFFFF0000),
	gsBranchZ(423 /* INVALID */, 1.32434, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4084, 0x00020000),
	gsBranchZ(512 /* INVALID */, 1.73583, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 6, 0x00040000),
	gsBranchZ(0, -0.158615, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4084, 0x00020000),
	gsSPCullDisplayList(512, 21503 /* INVALID */),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0xFF, 0x78, 0x32, 0xFF),
	gsDPSetEnvColor(0x32, 0x00, 0x00, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 1, 1),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000400, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000430, 27, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 1, 0),
	gsSP2Triangles(1, 4, 3, 0, 3, 4, 5, 0),
	gsSP2Triangles(5, 6, 3, 0, 6, 5, 7, 0),
	gsSP2Triangles(7, 8, 6, 0, 7, 9, 8, 0),
	gsSP2Triangles(10, 9, 7, 0, 10, 11, 9, 0),
	gsSP2Triangles(9, 11, 12, 0, 11, 13, 12, 0),
	gsSP2Triangles(14, 13, 11, 0, 14, 15, 13, 0),
	gsSP2Triangles(14, 16, 15, 0, 16, 17, 15, 0),
	gsSP2Triangles(13, 18, 12, 0, 12, 18, 19, 0),
	gsSP2Triangles(18, 20, 21, 0, 19, 18, 21, 0),
	gsSP2Triangles(20, 22, 23, 0, 23, 21, 20, 0),
	gsSP2Triangles(22, 24, 23, 0, 25, 23, 24, 0),
	gsSP1Triangle(25, 26, 23, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xA0, 0x64, 0x28, 0xFF),
	gsDPSetEnvColor(0x28, 0x0A, 0x00, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x06000000, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_MIRROR | G_TX_WRAP, 5, 5, 15, G_TX_NOLOD),
	gsDPTileSync(),
	gsDPSetTile(G_IM_FMT_I, G_IM_SIZ_8b, 4, 0x0000, 1, 0, G_TX_MIRROR | G_TX_WRAP, 5, G_TX_NOLOD, G_TX_NOMIRROR | G_TX_WRAP, 5, 15),
	gsDPSetTileSize(1, 0, 0, qu102(31), qu102(31)),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x060005E0, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 2, 0),
	gsSP2Triangles(4, 5, 6, 0, 7, 8, 6, 0),
	gsSP2Triangles(9, 4, 6, 0, 4, 9, 10, 0),
	gsSP2Triangles(10, 11, 4, 0, 5, 7, 6, 0),
	gsSP2Triangles(12, 13, 14, 0, 14, 15, 12, 0),
	gsSP2Triangles(15, 14, 16, 0, 14, 17, 16, 0),
	gsSP2Triangles(17, 18, 16, 0, 17, 19, 18, 0),
	gsSP2Triangles(17, 20, 19, 0, 21, 22, 23, 0),
	gsSP2Triangles(24, 19, 20, 0, 18, 15, 16, 0),
	gsSP2Triangles(25, 15, 18, 0, 26, 3, 15, 0),
	gsSP2Triangles(15, 25, 26, 0, 3, 27, 0, 0),
	gsSP2Triangles(3, 26, 27, 0, 0, 27, 28, 0),
	gsSP2Triangles(1, 0, 28, 0, 28, 29, 1, 0),
	gsSP2Triangles(28, 30, 29, 0, 28, 31, 30, 0),
	gsSPVertex(0x060007E0, 15, 0),
	gsSP2Triangles(0, 1, 2, 0, 2, 1, 3, 0),
	gsSP2Triangles(3, 4, 2, 0, 3, 5, 4, 0),
	gsSP2Triangles(5, 6, 4, 0, 7, 8, 9, 0),
	gsSP2Triangles(10, 9, 8, 0, 8, 11, 10, 0),
	gsSP2Triangles(11, 12, 10, 0, 13, 12, 14, 0),
	gsSP1Triangle(10, 12, 13, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xA0, 0x64, 0x28, 0xFF),
	gsDPSetEnvColor(0x5A, 0x32, 0x00, 0xFF),
	gsDPLoadTextureBlock(0x04032C90, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPVertex(0x060008D0, 8, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 0, 3, 0),
	gsSP2Triangles(2, 1, 4, 0, 5, 1, 3, 0),
	gsSP2Triangles(1, 5, 6, 0, 1, 6, 7, 0),
	gsSP1Triangle(1, 7, 4, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x5A, 0x32, 0x00, 0xFF),
	gsDPSetEnvColor(0x28, 0x0A, 0x00, 0xFF),
	gsSPClearGeometryMode(G_CULL_BACK),
	gsSPVertex(0x06000950, 16, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 4, 0),
	gsSP2Triangles(4, 3, 5, 0, 2, 6, 0, 0),
	gsSP2Triangles(4, 2, 1, 0, 7, 5, 3, 0),
	gsSP2Triangles(8, 9, 10, 0, 9, 11, 12, 0),
	gsSP2Triangles(12, 11, 13, 0, 10, 14, 8, 0),
	gsSP2Triangles(12, 10, 9, 0, 15, 13, 11, 0),
	gsSPEndDisplayList(),
}

object_gi_sword_1_0910.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4089, 0x00060000),
	gsSPVertex(0x000078FF, 0, 0),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4088, 0x00050000),
	gsSPModifyVertex(768, 0x002E, 0x2AD667FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4091, 0x00050000),
	gsSPCullDisplayList(558, 13311 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4088, 0x00050000),
	gsSPCullDisplayList(978, 13311 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4091, 0x00050000),
	gsDPSetColorImage(6, G_IM_SIZ_16b, 1537, 0xD62A67FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(TEXEL0, PRIMITIVE, PRIM_LOD_FRAC, TEXEL0, 0, 0, 0, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 0, 0, 0, 1),
	gsDPSetPrimColor(0, qu08(0.25), 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x00, 0x28, 0x50, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 1, 1),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 21, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 8, 9, 0),
	gsSP2Triangles(8, 7, 10, 0, 11, 12, 13, 0),
	gsSP2Triangles(14, 15, 16, 0, 17, 18, 8, 0),
	gsSP2Triangles(9, 8, 18, 0, 19, 5, 6, 0),
	gsSP1Triangle(5, 19, 20, 0),
	gsDPPipeSync(),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x78, 0x28, 0x00, 0xFF),
	gsDPSetEnvColor(0x3C, 0x14, 0x00, 0xFF),
	gsSPVertex(0x06000180, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 4, 0),
	gsSP2Triangles(5, 6, 7, 0, 6, 0, 8, 0),
	gsSP2Triangles(2, 4, 9, 0, 10, 8, 2, 0),
	gsSP2Triangles(11, 7, 8, 0, 12, 13, 7, 0),
	gsSP2Triangles(2, 8, 0, 0, 4, 2, 1, 0),
	gsSP2Triangles(7, 13, 5, 0, 8, 7, 6, 0),
	gsSP2Triangles(14, 15, 16, 0, 17, 16, 15, 0),
	gsSP2Triangles(18, 19, 20, 0, 18, 21, 22, 0),
	gsSP2Triangles(23, 24, 18, 0, 19, 18, 25, 0),
	gsSP2Triangles(25, 26, 27, 0, 27, 28, 25, 0),
	gsSP1Triangle(29, 30, 31, 0),
	gsSPVertex(0x06000380, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
	gsSP2Triangles(4, 5, 6, 0, 4, 7, 8, 0),
	gsSP2Triangles(9, 10, 11, 0, 12, 9, 11, 0),
	gsSP2Triangles(11, 13, 12, 0, 14, 15, 16, 0),
	gsSP2Triangles(17, 16, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(11, 2, 19, 0, 19, 20, 11, 0),
	gsSP2Triangles(21, 11, 20, 0, 21, 20, 22, 0),
	gsSP2Triangles(15, 21, 22, 0, 15, 22, 17, 0),
	gsSP2Triangles(23, 24, 12, 0, 13, 23, 12, 0),
	gsSP2Triangles(13, 25, 23, 0, 26, 27, 28, 0),
	gsSP2Triangles(14, 26, 28, 0, 14, 29, 26, 0),
	gsSP2Triangles(21, 25, 13, 0, 13, 11, 21, 0),
	gsSP2Triangles(16, 29, 14, 0, 30, 12, 24, 0),
	gsSP2Triangles(23, 31, 30, 0, 10, 9, 30, 0),
	gsSP2Triangles(8, 30, 31, 0, 12, 30, 9, 0),
	gsSP2Triangles(30, 24, 23, 0, 30, 7, 10, 0),
	gsSP1Triangle(30, 8, 7, 0),
	gsSPVertex(0x06000580, 28, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 2, 0),
	gsSP2Triangles(5, 0, 2, 0, 6, 2, 7, 0),
	gsSP2Triangles(5, 8, 9, 0, 10, 8, 11, 0),
	gsSP2Triangles(12, 10, 11, 0, 11, 13, 12, 0),
	gsSP2Triangles(14, 12, 13, 0, 15, 16, 14, 0),
	gsSP2Triangles(16, 17, 14, 0, 12, 14, 17, 0),
	gsSP2Triangles(18, 16, 15, 0, 15, 19, 18, 0),
	gsSP2Triangles(0, 19, 15, 0, 19, 0, 5, 0),
	gsSP2Triangles(9, 19, 5, 0, 8, 20, 11, 0),
	gsSP2Triangles(5, 20, 8, 0, 21, 22, 23, 0),
	gsSP2Triangles(21, 23, 24, 0, 22, 25, 23, 0),
	gsSP2Triangles(6, 7, 26, 0, 23, 25, 27, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0x96, 0x00, 0xFF),
	gsDPSetEnvColor(0x64, 0x28, 0x00, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000740, 12, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(4, 6, 7, 0, 8, 0, 7, 0),
	gsSP2Triangles(9, 2, 1, 0, 5, 10, 3, 0),
	gsSP2Triangles(11, 7, 6, 0, 7, 11, 8, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0x00, 0xFF),
	gsDPSetEnvColor(0x64, 0x64, 0x00, 0xFF),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPSetGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000800, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000830, 14, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 2, 0),
	gsSP2Triangles(4, 2, 3, 0, 5, 6, 2, 0),
	gsSP2Triangles(7, 2, 6, 0, 8, 9, 10, 0),
	gsSP2Triangles(9, 11, 10, 0, 9, 12, 11, 0),
	gsSP2Triangles(12, 9, 4, 0, 13, 9, 8, 0),
	gsSP1Triangle(9, 13, 5, 0),
	gsDPPipeSync(),
	gsDPSetCombineLERP(TEXEL0, PRIMITIVE, PRIM_LOD_FRAC, TEXEL0, 0, 0, 0, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 0, 0, 0, 1),
	gsDPSetPrimColor(0, qu08(0.5), 0xFF, 0x00, 0xFF, 0xFF),
	gsDPSetEnvColor(0x64, 0x00, 0x32, 0xFF),
	gsSPTexture(qu016(0.0457764), qu016(0.0457764), 0, G_TX_RENDERTILE, G_ON),
	gsSPVertex(0x06000910, 5, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
	gsSP2Triangles(4, 3, 0, 0, 2, 4, 0, 0),
	gsSPEndDisplayList(),
}

object_gi_sword_1_0920.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4088, 0x00050000),
	gsSPModifyVertex(768, 0x002E, 0x2AD667FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4091, 0x00050000),
	gsSPCullDisplayList(558, 13311 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4088, 0x00050000),
	gsSPCullDisplayList(978, 13311 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4091, 0x00050000),
	gsDPSetColorImage(6, G_IM_SIZ_16b, 1537, 0xD62A67FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(TEXEL0, PRIMITIVE, PRIM_LOD_FRAC, TEXEL0, 0, 0, 0, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 0, 0, 0, 1),
	gsDPSetPrimColor(0, qu08(0.25), 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x00, 0x28, 0x50, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 1, 1),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 21, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 8, 9, 0),
	gsSP2Triangles(8, 7, 10, 0, 11, 12, 13, 0),
	gsSP2Triangles(14, 15, 16, 0, 17, 18, 8, 0),
	gsSP2Triangles(9, 8, 18, 0, 19, 5, 6, 0),
	gsSP1Triangle(5, 19, 20, 0),
	gsDPPipeSync(),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x78, 0x28, 0x00, 0xFF),
	gsDPSetEnvColor(0x3C, 0x14, 0x00, 0xFF),
	gsSPVertex(0x06000180, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 4, 0),
	gsSP2Triangles(5, 6, 7, 0, 6, 0, 8, 0),
	gsSP2Triangles(2, 4, 9, 0, 10, 8, 2, 0),
	gsSP2Triangles(11, 7, 8, 0, 12, 13, 7, 0),
	gsSP2Triangles(2, 8, 0, 0, 4, 2, 1, 0),
	gsSP2Triangles(7, 13, 5, 0, 8, 7, 6, 0),
	gsSP2Triangles(14, 15, 16, 0, 17, 16, 15, 0),
	gsSP2Triangles(18, 19, 20, 0, 18, 21, 22, 0),
	gsSP2Triangles(23, 24, 18, 0, 19, 18, 25, 0),
	gsSP2Triangles(25, 26, 27, 0, 27, 28, 25, 0),
	gsSP1Triangle(29, 30, 31, 0),
	gsSPVertex(0x06000380, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
	gsSP2Triangles(4, 5, 6, 0, 4, 7, 8, 0),
	gsSP2Triangles(9, 10, 11, 0, 12, 9, 11, 0),
	gsSP2Triangles(11, 13, 12, 0, 14, 15, 16, 0),
	gsSP2Triangles(17, 16, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(11, 2, 19, 0, 19, 20, 11, 0),
	gsSP2Triangles(21, 11, 20, 0, 21, 20, 22, 0),
	gsSP2Triangles(15, 21, 22, 0, 15, 22, 17, 0),
	gsSP2Triangles(23, 24, 12, 0, 13, 23, 12, 0),
	gsSP2Triangles(13, 25, 23, 0, 26, 27, 28, 0),
	gsSP2Triangles(14, 26, 28, 0, 14, 29, 26, 0),
	gsSP2Triangles(21, 25, 13, 0, 13, 11, 21, 0),
	gsSP2Triangles(16, 29, 14, 0, 30, 12, 24, 0),
	gsSP2Triangles(23, 31, 30, 0, 10, 9, 30, 0),
	gsSP2Triangles(8, 30, 31, 0, 12, 30, 9, 0),
	gsSP2Triangles(30, 24, 23, 0, 30, 7, 10, 0),
	gsSP1Triangle(30, 8, 7, 0),
	gsSPVertex(0x06000580, 28, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 2, 0),
	gsSP2Triangles(5, 0, 2, 0, 6, 2, 7, 0),
	gsSP2Triangles(5, 8, 9, 0, 10, 8, 11, 0),
	gsSP2Triangles(12, 10, 11, 0, 11, 13, 12, 0),
	gsSP2Triangles(14, 12, 13, 0, 15, 16, 14, 0),
	gsSP2Triangles(16, 17, 14, 0, 12, 14, 17, 0),
	gsSP2Triangles(18, 16, 15, 0, 15, 19, 18, 0),
	gsSP2Triangles(0, 19, 15, 0, 19, 0, 5, 0),
	gsSP2Triangles(9, 19, 5, 0, 8, 20, 11, 0),
	gsSP2Triangles(5, 20, 8, 0, 21, 22, 23, 0),
	gsSP2Triangles(21, 23, 24, 0, 22, 25, 23, 0),
	gsSP2Triangles(6, 7, 26, 0, 23, 25, 27, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0x96, 0x00, 0xFF),
	gsDPSetEnvColor(0x64, 0x28, 0x00, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000740, 12, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(4, 6, 7, 0, 8, 0, 7, 0),
	gsSP2Triangles(9, 2, 1, 0, 5, 10, 3, 0),
	gsSP2Triangles(11, 7, 6, 0, 7, 11, 8, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0x00, 0xFF),
	gsDPSetEnvColor(0x64, 0x64, 0x00, 0xFF),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPSetGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000800, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000830, 14, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 2, 0),
	gsSP2Triangles(4, 2, 3, 0, 5, 6, 2, 0),
	gsSP2Triangles(7, 2, 6, 0, 8, 9, 10, 0),
	gsSP2Triangles(9, 11, 10, 0, 9, 12, 11, 0),
	gsSP2Triangles(12, 9, 4, 0, 13, 9, 8, 0),
	gsSP1Triangle(9, 13, 5, 0),
	gsDPPipeSync(),
	gsDPSetCombineLERP(TEXEL0, PRIMITIVE, PRIM_LOD_FRAC, TEXEL0, 0, 0, 0, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 0, 0, 0, 1),
	gsDPSetPrimColor(0, qu08(0.5), 0xFF, 0x00, 0xFF, 0xFF),
	gsDPSetEnvColor(0x64, 0x00, 0x32, 0xFF),
	gsSPTexture(qu016(0.0457764), qu016(0.0457764), 0, G_TX_RENDERTILE, G_ON),
	gsSPVertex(0x06000910, 5, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
	gsSP2Triangles(4, 3, 0, 0, 2, 4, 0, 0),
	gsSPEndDisplayList(),
}

object_gi_sword_1_0940.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4088, 0x00050000),
	gsSPCullDisplayList(978, 13311 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4091, 0x00050000),
	gsDPSetColorImage(6, G_IM_SIZ_16b, 1537, 0xD62A67FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(TEXEL0, PRIMITIVE, PRIM_LOD_FRAC, TEXEL0, 0, 0, 0, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 0, 0, 0, 1),
	gsDPSetPrimColor(0, qu08(0.25), 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x00, 0x28, 0x50, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 1, 1),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 21, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 8, 9, 0),
	gsSP2Triangles(8, 7, 10, 0, 11, 12, 13, 0),
	gsSP2Triangles(14, 15, 16, 0, 17, 18, 8, 0),
	gsSP2Triangles(9, 8, 18, 0, 19, 5, 6, 0),
	gsSP1Triangle(5, 19, 20, 0),
	gsDPPipeSync(),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x78, 0x28, 0x00, 0xFF),
	gsDPSetEnvColor(0x3C, 0x14, 0x00, 0xFF),
	gsSPVertex(0x06000180, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 4, 0),
	gsSP2Triangles(5, 6, 7, 0, 6, 0, 8, 0),
	gsSP2Triangles(2, 4, 9, 0, 10, 8, 2, 0),
	gsSP2Triangles(11, 7, 8, 0, 12, 13, 7, 0),
	gsSP2Triangles(2, 8, 0, 0, 4, 2, 1, 0),
	gsSP2Triangles(7, 13, 5, 0, 8, 7, 6, 0),
	gsSP2Triangles(14, 15, 16, 0, 17, 16, 15, 0),
	gsSP2Triangles(18, 19, 20, 0, 18, 21, 22, 0),
	gsSP2Triangles(23, 24, 18, 0, 19, 18, 25, 0),
	gsSP2Triangles(25, 26, 27, 0, 27, 28, 25, 0),
	gsSP1Triangle(29, 30, 31, 0),
	gsSPVertex(0x06000380, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
	gsSP2Triangles(4, 5, 6, 0, 4, 7, 8, 0),
	gsSP2Triangles(9, 10, 11, 0, 12, 9, 11, 0),
	gsSP2Triangles(11, 13, 12, 0, 14, 15, 16, 0),
	gsSP2Triangles(17, 16, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(11, 2, 19, 0, 19, 20, 11, 0),
	gsSP2Triangles(21, 11, 20, 0, 21, 20, 22, 0),
	gsSP2Triangles(15, 21, 22, 0, 15, 22, 17, 0),
	gsSP2Triangles(23, 24, 12, 0, 13, 23, 12, 0),
	gsSP2Triangles(13, 25, 23, 0, 26, 27, 28, 0),
	gsSP2Triangles(14, 26, 28, 0, 14, 29, 26, 0),
	gsSP2Triangles(21, 25, 13, 0, 13, 11, 21, 0),
	gsSP2Triangles(16, 29, 14, 0, 30, 12, 24, 0),
	gsSP2Triangles(23, 31, 30, 0, 10, 9, 30, 0),
	gsSP2Triangles(8, 30, 31, 0, 12, 30, 9, 0),
	gsSP2Triangles(30, 24, 23, 0, 30, 7, 10, 0),
	gsSP1Triangle(30, 8, 7, 0),
	gsSPVertex(0x06000580, 28, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 2, 0),
	gsSP2Triangles(5, 0, 2, 0, 6, 2, 7, 0),
	gsSP2Triangles(5, 8, 9, 0, 10, 8, 11, 0),
	gsSP2Triangles(12, 10, 11, 0, 11, 13, 12, 0),
	gsSP2Triangles(14, 12, 13, 0, 15, 16, 14, 0),
	gsSP2Triangles(16, 17, 14, 0, 12, 14, 17, 0),
	gsSP2Triangles(18, 16, 15, 0, 15, 19, 18, 0),
	gsSP2Triangles(0, 19, 15, 0, 19, 0, 5, 0),
	gsSP2Triangles(9, 19, 5, 0, 8, 20, 11, 0),
	gsSP2Triangles(5, 20, 8, 0, 21, 22, 23, 0),
	gsSP2Triangles(21, 23, 24, 0, 22, 25, 23, 0),
	gsSP2Triangles(6, 7, 26, 0, 23, 25, 27, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0x96, 0x00, 0xFF),
	gsDPSetEnvColor(0x64, 0x28, 0x00, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000740, 12, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(4, 6, 7, 0, 8, 0, 7, 0),
	gsSP2Triangles(9, 2, 1, 0, 5, 10, 3, 0),
	gsSP2Triangles(11, 7, 6, 0, 7, 11, 8, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0x00, 0xFF),
	gsDPSetEnvColor(0x64, 0x64, 0x00, 0xFF),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPSetGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000800, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000830, 14, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 2, 0),
	gsSP2Triangles(4, 2, 3, 0, 5, 6, 2, 0),
	gsSP2Triangles(7, 2, 6, 0, 8, 9, 10, 0),
	gsSP2Triangles(9, 11, 10, 0, 9, 12, 11, 0),
	gsSP2Triangles(12, 9, 4, 0, 13, 9, 8, 0),
	gsSP1Triangle(9, 13, 5, 0),
	gsDPPipeSync(),
	gsDPSetCombineLERP(TEXEL0, PRIMITIVE, PRIM_LOD_FRAC, TEXEL0, 0, 0, 0, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 0, 0, 0, 1),
	gsDPSetPrimColor(0, qu08(0.5), 0xFF, 0x00, 0xFF, 0xFF),
	gsDPSetEnvColor(0x64, 0x00, 0x32, 0xFF),
	gsSPTexture(qu016(0.0457764), qu016(0.0457764), 0, G_TX_RENDERTILE, G_ON),
	gsSPVertex(0x06000910, 5, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
	gsSP2Triangles(4, 3, 0, 0, 2, 4, 0, 0),
	gsSPEndDisplayList(),
}

object_gi_sword_1_0950.txt
{
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4091, 0x00050000),
	gsDPSetColorImage(6, G_IM_SIZ_16b, 1537, 0xD62A67FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(TEXEL0, PRIMITIVE, PRIM_LOD_FRAC, TEXEL0, 0, 0, 0, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 0, 0, 0, 1),
	gsDPSetPrimColor(0, qu08(0.25), 0xFF, 0xFF, 0xFF, 0xFF),
	gsDPSetEnvColor(0x00, 0x28, 0x50, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, 1, 1),
	gsSPClearGeometryMode(G_FOG),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000000, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000030, 21, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 5, 4, 0, 7, 8, 9, 0),
	gsSP2Triangles(8, 7, 10, 0, 11, 12, 13, 0),
	gsSP2Triangles(14, 15, 16, 0, 17, 18, 8, 0),
	gsSP2Triangles(9, 8, 18, 0, 19, 5, 6, 0),
	gsSP1Triangle(5, 19, 20, 0),
	gsDPPipeSync(),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 0, 0, 0, 1, COMBINED, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetPrimColor(0, 0, 0x78, 0x28, 0x00, 0xFF),
	gsDPSetEnvColor(0x3C, 0x14, 0x00, 0xFF),
	gsSPVertex(0x06000180, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 4, 0),
	gsSP2Triangles(5, 6, 7, 0, 6, 0, 8, 0),
	gsSP2Triangles(2, 4, 9, 0, 10, 8, 2, 0),
	gsSP2Triangles(11, 7, 8, 0, 12, 13, 7, 0),
	gsSP2Triangles(2, 8, 0, 0, 4, 2, 1, 0),
	gsSP2Triangles(7, 13, 5, 0, 8, 7, 6, 0),
	gsSP2Triangles(14, 15, 16, 0, 17, 16, 15, 0),
	gsSP2Triangles(18, 19, 20, 0, 18, 21, 22, 0),
	gsSP2Triangles(23, 24, 18, 0, 19, 18, 25, 0),
	gsSP2Triangles(25, 26, 27, 0, 27, 28, 25, 0),
	gsSP1Triangle(29, 30, 31, 0),
	gsSPVertex(0x06000380, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 0, 2, 3, 0),
	gsSP2Triangles(4, 5, 6, 0, 4, 7, 8, 0),
	gsSP2Triangles(9, 10, 11, 0, 12, 9, 11, 0),
	gsSP2Triangles(11, 13, 12, 0, 14, 15, 16, 0),
	gsSP2Triangles(17, 16, 15, 0, 16, 17, 18, 0),
	gsSP2Triangles(11, 2, 19, 0, 19, 20, 11, 0),
	gsSP2Triangles(21, 11, 20, 0, 21, 20, 22, 0),
	gsSP2Triangles(15, 21, 22, 0, 15, 22, 17, 0),
	gsSP2Triangles(23, 24, 12, 0, 13, 23, 12, 0),
	gsSP2Triangles(13, 25, 23, 0, 26, 27, 28, 0),
	gsSP2Triangles(14, 26, 28, 0, 14, 29, 26, 0),
	gsSP2Triangles(21, 25, 13, 0, 13, 11, 21, 0),
	gsSP2Triangles(16, 29, 14, 0, 30, 12, 24, 0),
	gsSP2Triangles(23, 31, 30, 0, 10, 9, 30, 0),
	gsSP2Triangles(8, 30, 31, 0, 12, 30, 9, 0),
	gsSP2Triangles(30, 24, 23, 0, 30, 7, 10, 0),
	gsSP1Triangle(30, 8, 7, 0),
	gsSPVertex(0x06000580, 28, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 2, 0),
	gsSP2Triangles(5, 0, 2, 0, 6, 2, 7, 0),
	gsSP2Triangles(5, 8, 9, 0, 10, 8, 11, 0),
	gsSP2Triangles(12, 10, 11, 0, 11, 13, 12, 0),
	gsSP2Triangles(14, 12, 13, 0, 15, 16, 14, 0),
	gsSP2Triangles(16, 17, 14, 0, 12, 14, 17, 0),
	gsSP2Triangles(18, 16, 15, 0, 15, 19, 18, 0),
	gsSP2Triangles(0, 19, 15, 0, 19, 0, 5, 0),
	gsSP2Triangles(9, 19, 5, 0, 8, 20, 11, 0),
	gsSP2Triangles(5, 20, 8, 0, 21, 22, 23, 0),
	gsSP2Triangles(21, 23, 24, 0, 22, 25, 23, 0),
	gsSP2Triangles(6, 7, 26, 0, 23, 25, 27, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0x96, 0x00, 0xFF),
	gsDPSetEnvColor(0x64, 0x28, 0x00, 0xFF),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000740, 12, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(4, 6, 7, 0, 8, 0, 7, 0),
	gsSP2Triangles(9, 2, 1, 0, 5, 10, 3, 0),
	gsSP2Triangles(11, 7, 6, 0, 7, 11, 8, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0xFF, 0xFF, 0x00, 0xFF),
	gsDPSetEnvColor(0x64, 0x64, 0x00, 0xFF),
	gsSPTexture(qu016(0.0610352), qu016(0.0610352), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032490, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPSetGeometryMode(G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPVertex(0x06000800, 3, 0),
	gsSP1Triangle(0, 1, 2, 0),
	gsSPVertex(0x06000830, 14, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 2, 0),
	gsSP2Triangles(4, 2, 3, 0, 5, 6, 2, 0),
	gsSP2Triangles(7, 2, 6, 0, 8, 9, 10, 0),
	gsSP2Triangles(9, 11, 10, 0, 9, 12, 11, 0),
	gsSP2Triangles(12, 9, 4, 0, 13, 9, 8, 0),
	gsSP1Triangle(9, 13, 5, 0),
	gsDPPipeSync(),
	gsDPSetCombineLERP(TEXEL0, PRIMITIVE, PRIM_LOD_FRAC, TEXEL0, 0, 0, 0, 1, PRIMITIVE, ENVIRONMENT, COMBINED, ENVIRONMENT, 0, 0, 0, 1),
	gsDPSetPrimColor(0, qu08(0.5), 0xFF, 0x00, 0xFF, 0xFF),
	gsDPSetEnvColor(0x64, 0x00, 0x32, 0xFF),
	gsSPTexture(qu016(0.0457764), qu016(0.0457764), 0, G_TX_RENDERTILE, G_ON),
	gsSPVertex(0x06000910, 5, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
	gsSP2Triangles(4, 3, 0, 0, 2, 4, 0, 0),
	gsSPEndDisplayList(),
}

object_gi_ticketstone_0EE0.txt
{
	gsDPNoOpTag(0x00040000),
	gsSP1Triangle(76 /* INVALID */, 127 /* INVALID */, 100, 0),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 23, 0x00040000),
	gsSPModifyVertex(32748, 0x00CF, 0x000078FF),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_PASS, G_RM_AA_ZB_TEX_EDGE2),
	gsDPSetCombineLERP(PRIMITIVE, ENVIRONMENT, TEXEL0, ENVIRONMENT, 1, 1, PRIM_LOD_FRAC, 1, COMBINED, 0, SHADE, 0, 1, 1, PRIM_LOD_FRAC, 1),
	gsDPSetPrimColor(0, 0, 0x6E, 0x6E, 0x64, 0xFF),
	gsDPSetEnvColor(0x3C, 0x3C, 0x32, 0xFF),
	gsDPSetTextureLUT(G_TT_NONE),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x04032C90, G_IM_FMT_I, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_WRAP, G_TX_NOMIRROR | G_TX_WRAP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPClearGeometryMode(G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING),
	gsSPVertex(0x06000540, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 5, 0),
	gsSP2Triangles(6, 7, 8, 0, 2, 9, 0, 0),
	gsSP2Triangles(0, 10, 1, 0, 3, 5, 11, 0),
	gsSP2Triangles(2, 12, 9, 0, 9, 13, 0, 0),
	gsSP2Triangles(13, 14, 0, 0, 15, 13, 9, 0),
	gsSP2Triangles(8, 16, 17, 0, 18, 17, 16, 0),
	gsSP2Triangles(18, 19, 17, 0, 19, 18, 20, 0),
	gsSP2Triangles(21, 19, 20, 0, 21, 22, 19, 0),
	gsSP2Triangles(23, 24, 25, 0, 21, 23, 22, 0),
	gsSP2Triangles(24, 23, 21, 0, 25, 26, 27, 0),
	gsSP2Triangles(26, 24, 28, 0, 26, 25, 24, 0),
	gsSP2Triangles(27, 4, 25, 0, 4, 27, 5, 0),
	gsSP2Triangles(3, 29, 30, 0, 29, 31, 30, 0),
	gsSP1Triangle(29, 3, 11, 0),
	gsSPVertex(0x06000740, 18, 0),
	gsSP2Triangles(0, 1, 2, 0, 1, 3, 4, 0),
	gsSP2Triangles(5, 1, 4, 0, 3, 1, 0, 0),
	gsSP2Triangles(6, 4, 3, 0, 7, 8, 3, 0),
	gsSP2Triangles(3, 9, 6, 0, 3, 8, 9, 0),
	gsSP2Triangles(10, 11, 12, 0, 13, 14, 8, 0),
	gsSP1Triangle(15, 16, 17, 0),
	gsDPPipeSync(),
	gsDPSetPrimColor(0, 0, 0x64, 0x64, 0x50, 0xFF),
	gsDPSetEnvColor(0x32, 0x32, 0x28, 0xFF),
	gsSPVertex(0x06000860, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 2, 3, 4, 0),
	gsSP2Triangles(0, 2, 4, 0, 5, 4, 6, 0),
	gsSP2Triangles(0, 4, 5, 0, 7, 8, 9, 0),
	gsSP2Triangles(5, 9, 8, 0, 10, 11, 12, 0),
	gsSP2Triangles(11, 10, 6, 0, 9, 6, 10, 0),
	gsSP2Triangles(5, 6, 9, 0, 13, 9, 10, 0),
	gsSP2Triangles(13, 14, 15, 0, 15, 9, 13, 0),
	gsSP2Triangles(16, 17, 18, 0, 18, 19, 16, 0),
	gsSP2Triangles(20, 21, 17, 0, 17, 16, 20, 0),
	gsSP2Triangles(22, 21, 20, 0, 20, 23, 22, 0),
	gsSP2Triangles(19, 18, 24, 0, 24, 25, 19, 0),
	gsSP2Triangles(26, 27, 25, 0, 25, 24, 26, 0),
	gsSP2Triangles(28, 29, 27, 0, 27, 26, 28, 0),
	gsSP2Triangles(29, 28, 30, 0, 30, 31, 29, 0),
	gsSPVertex(0x06000A60, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
	gsSP2Triangles(4, 5, 3, 0, 3, 2, 4, 0),
	gsSP2Triangles(6, 5, 4, 0, 4, 7, 6, 0),
	gsSP2Triangles(7, 8, 9, 0, 9, 6, 7, 0),
	gsSP2Triangles(8, 10, 11, 0, 11, 9, 8, 0),
	gsSP2Triangles(12, 11, 10, 0, 10, 13, 12, 0),
	gsSP2Triangles(14, 15, 16, 0, 16, 12, 14, 0),
	gsSP2Triangles(17, 18, 19, 0, 19, 20, 17, 0),
	gsSP2Triangles(21, 22, 23, 0, 23, 24, 21, 0),
	gsSP2Triangles(25, 26, 27, 0, 27, 28, 25, 0),
	gsSP2Triangles(29, 28, 27, 0, 28, 29, 30, 0),
	gsSP1Triangle(31, 30, 29, 0),
	gsSPVertex(0x06000C60, 24, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 4, 1, 0),
	gsSP2Triangles(1, 0, 3, 0, 5, 6, 7, 0),
	gsSP2Triangles(8, 5, 7, 0, 8, 7, 9, 0),
	gsSP2Triangles(8, 9, 10, 0, 10, 9, 11, 0),
	gsSP2Triangles(11, 12, 10, 0, 12, 13, 14, 0),
	gsSP2Triangles(12, 11, 13, 0, 15, 16, 13, 0),
	gsSP2Triangles(15, 17, 18, 0, 18, 16, 15, 0),
	gsSP2Triangles(17, 19, 18, 0, 19, 20, 18, 0),
	gsSP2Triangles(19, 21, 20, 0, 22, 20, 21, 0),
	gsSP1Triangle(21, 23, 22, 0),
	gsSPEndDisplayList(),
}

object_gi_zoramask_0750.txt
{
	gsDPNoOp(),
	gsDPNoOpTag(0x000F3A16),
	(Gfx){0x2AB686CE, 0x8A000000},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x0F2E2AB6),
	(Gfx){0x981BA21B, 0x35000000},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x9EC36C43),
	(Gfx){0x9B2C2B15, 0x3A000000},
	gsDPNoOp(),
	gsDPNoOpTag(0x2A655315),
	(Gfx){0xC76E6E1B, 0x561A1A1A},
	(Gfx){0x2C1DD680, 0x0F000000},
	gsDPNoOp(),
	gsDPNoOpTag(0x866E59AB),
	(Gfx){0x672C1010, 0x1010472C},
	(Gfx){0x43CB802A, 0x00000000},
	gsDPNoOp(),
	(Gfx){0x3A9EEF05, 0x1A384710},
	gsBranchZ(514 /* INVALID */, -203.934, 1, 1023, G_BZ_PERSP, 0, 1023),
	(Gfx){0x43C69D08, 0x00000000},
	gsDPNoOpTag(0x00000016),
	(Gfx){0x80E34B10, 0xA7A71004},
	gsBranchZ(724 /* INVALID */, -0.0493225, 1, 1023, G_BZ_PERSP, 0, 1023),
	(Gfx){0x4BC97A21, 0x00000000},
	gsDPNoOpTag(0x00004611),
	gsDPTileSync(),
	(Gfx){0x10554E90, 0x58550A04},
	(Gfx){0x38255E20, 0x3A000000},
	gsDPNoOpTag(0x00211174),
	(Gfx){0x71381004, 0x04040404},
	(Gfx){0x555441D1, 0x0095040A},
	(Gfx){0x101DE611, 0x20080000},
	gsDPNoOpTag(0x082AC071),
	(Gfx){0x47100404, 0x04040410},
	gsDPSetColorImage(G_IM_FMT_CI, G_IM_SIZ_32b, 1425, 0xD94D040A),
	(Gfx){0x101DC115, 0x46000000},
	gsDPNoOpTag(0x2E654375),
	gsBranchZ(677 /* INVALID */, -0.0413116, 1, 1023, G_BZ_PERSP, 0, 1023),
	(Gfx){0x554A4454, 0x3EAB040A},
	(Gfx){0x470CCC15, 0x46000000},
	gsDPNoOpTag(0x2A744B0A),
	(Gfx){0x0AAE4A44, 0x95320404},
	gsBranchZ(1611 /* INVALID */, -0.0684188, 1, 1023, G_BZ_PERSP, 0, 1023),
	(Gfx){0x386CF311, 0x16000000},
	gsDPNoOpTag(0x536C750A),
	(Gfx){0x0A0A3B4A, 0x64BA0410},
	gsDPSetKeyGB(0x97, 0x55, qs48(1.66406), 0x0A, 0x04, qs48(2.30078)),
	gsDPSetPrimDepth(0, 0),
	gsDPNoOpTag(0x790C3804),
	gsBranchZ(1367 /* INVALID */, -203.949, 1, 1023, G_BZ_PERSP, 0, 1023),
	(Gfx){0x61EB4B67, 0x5504041A},
	(Gfx){0x0C227716, 0x00000000},
	gsDPNoOpTag(0x0C1A2CAA),
	(Gfx){0x2C47040A, 0x0A0A0A0A},
	(Gfx){0x0A040A0A, 0x0A041A0C},
	gsDPSetCombineLERP(TEXEL0, COMBINED, TEXEL1, COMBINED, TEXEL1, COMBINED, LOD_FRACTION, COMBINED, COMBINED, COMBINED, TEXEL0_ALPHA, COMBINED, COMBINED, COMBINED, LOD_FRACTION, COMBINED),
	gsDPNoOpTag(0x71DE1153),
	gsSPTexture(qu016(0.062561), qu016(0.0392151), 5, 2, 13),
	(Gfx){0x0A0A0A04, 0x329B06F7},
	(Gfx){0x532A0F00, 0x00000000},
	gsDPNoOp(),
	(Gfx){0x5DCF8D81, 0x740C4B75},
	(Gfx){0x7575A243, 0xD879D453},
	(Gfx){0x2A0F0000, 0x00000000},
	gsDPNoOp(),
	gsDPNoOpTag(0x50878DD4),
	gsLoadUcode(0x8765502E, 0xDBD3),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0xB2B25046),
	(Gfx){0xA42E5D0F, 0x0F000000},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x0F0F0F0F),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x03030303),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x00000021),
	gsSPCullDisplayList(4100 /* INVALID */, 20353 /* INVALID */),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x00000303),
	(Gfx){0x2009AC39, 0xB90B0B0B},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x00032003),
	(Gfx){0xACB98883, 0x27303030},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x03032003),
	gsSPCullDisplayList(0, 0),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x00000090),
	(Gfx){0x344F4F4F, 0x85414141},
	(Gfx){0x34A1A102, 0x00000000},
	gsDPNoOp(),
	gsDPNoOpTag(0xDC934EC5),
	(Gfx){0xC2A54242, 0x42424291},
	(Gfx){0x91D344A8, 0x4A648438},
	gsDPNoOpTag(0x2016009F),
	(Gfx){0x13F5CA78, 0x4E58BF73},
	(Gfx){0x7373A0A0, 0x58BE4EA5},
	(Gfx){0x5444FAF4, 0x84383838},
	gsDPNoOpTag(0x777A83C8),
	(Gfx){0x7893B34F, 0x90000000},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0xE4825154),
	(Gfx){0xB3A10000, 0x00000000},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0xFBFE4D78),
	(Gfx){0xAD000000, 0x00000000},
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0x383851BD),
	(Gfx){0x39000000, 0x00000000},
	gsDPNoOpTag(0x00000003),
	(Gfx){0x09090909, 0x09090939},
	gsDPNoOpTag(0x54956DE5),
	(Gfx){0x0E000000, 0x00000000},
	gsDPNoOp(),
	(Gfx){0x21030309, 0x0939191F},
	gsDPNoOpTag(0x03ADF883),
	(Gfx){0x0E160000, 0x00000000},
	gsDPNoOp(),
	gsDPNoOpTag(0x09393919),
	gsDPNoOp(),
	(Gfx){0x16162100, 0x00000000},
	gsDPNoOp(),
	gsDPNoOpTag(0x03030303),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOp(),
	gsDPNoOpTag(0xFFFF0000),
	gsDPNoOpTag(0x0098C5FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 14, 0xFFE10000),
	gsSPCullDisplayList(69, 29311 /* INVALID */),
	gsDPNoOpTag(0xFFDC0000),
	gsDPNoOpTag(0x008CE5FF),
	gsDPNoOpTag(0xFFE10000),
	gsDPSetTextureImage(6, G_IM_SIZ_32b, 139, 0xD296E4FF),
	gsDPNoOpTag(0xFFF70000),
	gsDPSetTextureImage(6, G_IM_SIZ_32b, 171, 0xBCC9AEFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 7, 0xFFF70000),
	gsSPCullDisplayList(85, 22399 /* INVALID */),
	gsDPNoOpTag(0x000A0000),
	gsDPNoOpTag(0x000989FF),
	gsDPNoOpTag(0xFFFA0000),
	gsDPSetDepthImage(0xC226A1FF),
	gsDPNoOpTag(0xFFFB0000),
	gsDPNoOpTag(0x00429CFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4078, 0xFFFA0000),
	gsSPModifyVertex(144 /* INVALID */, 0x0063, 0x3E26A1FF),
	gsDPSetColorImage(6, G_IM_SIZ_32b, 6, 0x00040000),
	gsDPSetColorImage(G_IM_FMT_IA, G_IM_SIZ_4b, 433, 0xC3F866FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4096, 0x00080000),
	gsDPNoOpTag(0x4C5C07FF),
	gsDPSetColorImage(6, G_IM_SIZ_32b, 10, 0x00000000),
	gsDPSetColorImage(G_IM_FMT_I, G_IM_SIZ_4b, 369, 0x2572FCFF),
	gsDPSetColorImage(6, G_IM_SIZ_8b, 9, 0xFFF20000),
	gsSPModifyVertex(32705, 0x006B, 0xAAFA53FF),
	gsDPSetColorImage(6, G_IM_SIZ_32b, 4095, 0xFFF90000),
	gsSPCullDisplayList(267 /* INVALID */, 24959 /* INVALID */),
	gsDPSetColorImage(6, G_IM_SIZ_8b, 9, 0xFFF20000),
	gsSPModifyVertex(32705, 0x006B, 0x3C3DADFF),
	gsDPSetColorImage(6, G_IM_SIZ_32b, 14, 0xFFE70000),
	gsSPCullDisplayList(651, 32639 /* INVALID */),
	gsDPSetColorImage(6, G_IM_SIZ_32b, 4095, 0xFFF90000),
	gsSPCullDisplayList(92 /* INVALID */, 24959 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4096, 0x00080000),
	gsDPNoOpTag(0x4C5C07FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4096, 0x00080000),
	gsDPNoOpTag(0xD39E34FF),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 10, 0xFFE70000),
	gsSPCullDisplayList(616 /* INVALID */, 24575 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_4b, 10, 0xFFE70000),
	gsSPCullDisplayList(616 /* INVALID */, 32255 /* INVALID */),
	gsDPNoOpTag(0xFFF20000),
	gsSPModifyVertex(32705, 0x006B, 0x3EA52DFF),
	gsDPNoOpTag(0x00040000),
	gsDPSetColorImage(G_IM_FMT_IA, G_IM_SIZ_4b, 433, 0x3DF866FF),
	gsDPNoOpTag(0xFFF90000),
	gsSPCullDisplayList(267 /* INVALID */, 2559 /* INVALID */),
	gsDPNoOpTag(0x00080000),
	gsDPNoOpTag(0x2D9E34FF),
	gsDPNoOpTag(0xFFF90000),
	gsSPCullDisplayList(267 /* INVALID */, 22783 /* INVALID */),
	gsDPNoOpTag(0x00080000),
	gsDPNoOpTag(0xB45C07FF),
	gsDPNoOp(),
	gsDPSetColorImage(G_IM_FMT_I, G_IM_SIZ_4b, 369, 0xDB72FCFF),
	gsDPNoOpTag(0xFFF20000),
	gsSPModifyVertex(32705, 0x006B, 0xFB77F3FF),
	gsDPNoOpTag(0xFFE70000),
	gsSPCullDisplayList(651, 32639 /* INVALID */),
	gsDPNoOpTag(0xFFE70000),
	gsSPCullDisplayList(616 /* INVALID */, 28031 /* INVALID */),
	gsDPNoOpTag(0x00080000),
	gsDPNoOpTag(0xB45C07FF),
	gsDPNoOpTag(0xFFF90000),
	gsSPCullDisplayList(92 /* INVALID */, 2559 /* INVALID */),
	gsDPNoOpTag(0xFFE70000),
	gsSPCullDisplayList(616 /* INVALID */, 25471 /* INVALID */),
	gsDPNoOpTag(0x000B0000),
	gsSP1Quadrangle(79 /* INVALID */, 123 /* INVALID */, 31 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFFA0000),
	(Gfx){0x098BF71F, 0x60BB11FF},
	gsDPNoOpTag(0x00080000),
	(Gfx){0x0A8FEF11, 0x68083BFF},
	gsDPNoOpTag(0xFFF70000),
	(Gfx){0x0C89EBED, 0x701E1FFF},
	gsDPNoOpTag(0x00080000),
	gsBranchZ(162 /* INVALID */, -0.0399465, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0x000A0000),
	gsSPModifyVertex(32532 /* INVALID */, 0x00B2, 0x473252FF),
	gsDPNoOpTag(0x00170000),
	gsDPSetColorImage(5, G_IM_SIZ_8b, 309, 0x001E74FF),
	gsDPNoOpTag(0x000B0000),
	gsSPCullDisplayList(684, 8191 /* INVALID */),
	gsDPNoOpTag(0x00140000),
	gsDPNoOpTag(0x4EC847FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 24, 0xFFFF0000),
	gsDPSetCombineLERP(0, 0, 0, TEXEL1, 1, TEXEL1, TEXEL1, TEXEL1, TEXEL1, 0, PRIMITIVE_ALPHA, 0, TEXEL1, 0, 0, 0),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0x000A0000),
	gsDPSetCombineLERP(0, 0, LOD_FRACTION, SHADE, 1, ENVIRONMENT, SHADE, TEXEL0, 0, 0, 0, PRIMITIVE, TEXEL0, 0, SHADE, 0),
	gsDPNoOpTag(0x00100000),
	gsSPModifyVertex(29748 /* INVALID */, 0x0000, 0x004E5BFF),
	gsDPNoOpTag(0x00170000),
	gsSPModifyVertex(30760, 0x0000, 0x001E74FF),
	gsDPNoOpTag(0x000B0000),
	gsSPModifyVertex(32219, 0x0000, 0x009638FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4078, 0x000B0000),
	gsDPSetCombineLERP(1, 0, PRIMITIVE, COMBINED, 0, PRIMITIVE, PRIMITIVE, 0, 0, SHADE, 0, 0, 1, 0, ENVIRONMENT, 0),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4078, 0xFFFA0000),
	gsDPSetPrimColor(qu08(0.964844), qu08(0.121094), 0xA0, 0xBB, 0x11, 0xFF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 14, 0xFFE10000),
	gsDPSetFillColor(0xB15901FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 7, 0xFFF70000),
	gsDPSetFillColor(0x901E1FFF),
	gsDPNoOpTag(0xFFDC0000),
	gsSPModifyVertex(29221, 0x0000, 0x0077F4FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4096, 0x00080000),
	gsDPSetBlendColor(0x98, 0x08, 0x3B, 0xFF),
	gsDPNoOpTag(0x00140000),
	gsSPModifyVertex(31550, 0x0000, 0x009739FF),
	gsDPNoOpTag(0x00240000),
	gsSPModifyVertex(31465 /* INVALID */, 0x0000, 0x009636FF),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4080, 0x00140000),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 1553, 0xB2C847FF),
	gsDPNoOpTag(0xFFFB0000),
	gsSPModifyVertex(32212, 0x0000, 0x0089FFFF),
	gsDPNoOpTag(0xFFFF0000),
	gsSP1Quadrangle(17 /* INVALID */, 114, 18 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x00240000),
	gsDPSetDepthImage(0x009636FF),
	gsDPNoOpTag(0xFFE10000),
	(Gfx){0x0C96E8F5, 0x4F5901FF},
	gsDPNoOpTag(0x000A0000),
	gsSP1Quadrangle(37 /* INVALID */, 116 /* INVALID */, 41 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x00140000),
	gsBranchZ(776 /* INVALID */, -0.0534335, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4096, 0x00080000),
	gsBranchZ(162 /* INVALID */, 0.0370132, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4078, 0x000B0000),
	gsSPCullDisplayList(684, 8191 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0x000A0000),
	gsSPModifyVertex(32532 /* INVALID */, 0x00B2, 0xB93252FF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4078, 0x000B0000),
	gsSPCullDisplayList(684, 8191 /* INVALID */),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4080, 0x00140000),
	gsDPNoOpTag(0xB2C847FF),
	gsDPNoOpTag(0x00170000),
	gsDPSetColorImage(5, G_IM_SIZ_8b, 309, 0x001E74FF),
	gsDPNoOpTag(0x00240000),
	gsDPSetDepthImage(0x009636FF),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 4096, 0x00080000),
	gsDPSetBlendColor(0x98, 0x08, 0x3B, 0xFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 24, 0xFFFF0000),
	gsDPSetCombineLERP(0, 0, 0, TEXEL1, 1, TEXEL1, TEXEL1, TEXEL1, TEXEL1, 0, PRIMITIVE_ALPHA, 0, TEXEL1, 0, 0, 0),
	gsDPSetColorImage(7, G_IM_SIZ_8b, 7, 0xFFF70000),
	gsDPSetFillColor(0x901E1FFF),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 13, 0x000A0000),
	gsDPSetCombineLERP(0, 0, LOD_FRACTION, SHADE, 1, ENVIRONMENT, SHADE, TEXEL0, 0, 0, 0, PRIMITIVE, TEXEL0, 0, SHADE, 0),
	gsDPNoOpTag(0x00080000),
	(Gfx){0x0A8FEF11, 0x68083BFF},
	gsDPNoOpTag(0xFFFF0000),
	gsSP1Quadrangle(17 /* INVALID */, 114, 18 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0x000A0000),
	gsSP1Quadrangle(37 /* INVALID */, 116 /* INVALID */, 41 /* INVALID */, 127 /* INVALID */, 0),
	gsDPNoOpTag(0xFFF70000),
	(Gfx){0x0C89EBED, 0x701E1FFF},
	gsDPNoOpTag(0x000B0000),
	gsBranchZ(914 /* INVALID */, 1.17212, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPSetColorImage(7, G_IM_SIZ_32b, 4080, 0x00140000),
	gsSPVertex(0xB2C847FF, 208, -198),
	gsDPSetColorImage(7, G_IM_SIZ_16b, 4078, 0x000B0000),
	gsDPSetEnvColor(0xA4, 0xD4, 0x3F, 0xFF),
	gsDPNoOpTag(0x00140000),
	gsBranchZ(77 /* INVALID */, 1.17347, 1, 1023, G_BZ_PERSP, 0, 1023),
	gsDPNoOpTag(0x000B0000),
	gsDPSetEnvColor(0x5C, 0xD4, 0x3F, 0xFF),
	gsDPNoOpTag(0x00140000),
	gsSPVertex(0x4EC847FF, 208, -198),
	gsDPPipeSync(),
	gsDPSetRenderMode(G_RM_AA_ZB_OPA_SURF, G_RM_AA_ZB_OPA_SURF2),
	gsDPSetCombineLERP(TEXEL0, 0, SHADE, 0, 0, 0, 0, 1, TEXEL0, 0, SHADE, 0, 0, 0, 0, 1),
	gsDPSetTextureLUT(G_TT_RGBA16),
	gsSPTexture(qu016(0.999985), qu016(0.999985), 0, G_TX_RENDERTILE, G_ON),
	gsDPLoadTextureBlock(0x06000208, G_IM_FMT_CI, G_IM_SIZ_8b, 8, 8, 0, G_TX_NOMIRROR | G_TX_CLAMP, G_TX_NOMIRROR | G_TX_CLAMP, 3, 3, G_TX_NOLOD, G_TX_NOLOD),
	gsDPLoadTLUT_pal256(0x06000000),
	gsSPClearGeometryMode(G_FOG | G_TEXTURE_GEN | G_TEXTURE_GEN_LINEAR),
	gsSPSetGeometryMode(G_CULL_BACK | G_LIGHTING),
	gsSPVertex(0x06000E48, 10, 0),
	gsSP2Triangles(0, 1, 2, 0, 2, 3, 0, 0),
	gsSP2Triangles(3, 4, 0, 0, 5, 1, 0, 0),
	gsSP2Triangles(6, 5, 0, 0, 4, 6, 0, 0),
	gsSP2Triangles(6, 4, 7, 0, 7, 8, 6, 0),
	gsSP2Triangles(6, 8, 9, 0, 5, 6, 9, 0),
	gsDPPipeSync(),
	gsDPLoadTextureBlock(0x06000248, G_IM_FMT_CI, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_CLAMP, G_TX_NOMIRROR | G_TX_CLAMP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPVertex(0x06000EE8, 25, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 0, 2, 0),
	gsSP2Triangles(2, 4, 5, 0, 2, 1, 4, 0),
	gsSP2Triangles(6, 7, 8, 0, 9, 0, 4, 0),
	gsSP2Triangles(4, 0, 3, 0, 7, 6, 10, 0),
	gsSP2Triangles(8, 7, 10, 0, 8, 11, 6, 0),
	gsSP2Triangles(12, 13, 14, 0, 14, 13, 15, 0),
	gsSP2Triangles(16, 17, 18, 0, 19, 16, 18, 0),
	gsSP2Triangles(18, 13, 19, 0, 18, 17, 13, 0),
	gsSP2Triangles(20, 21, 22, 0, 21, 23, 22, 0),
	gsSP2Triangles(24, 20, 23, 0, 22, 23, 20, 0),
	gsDPPipeSync(),
	gsDPLoadTextureBlock(0x06000648, G_IM_FMT_CI, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_CLAMP, G_TX_NOMIRROR | G_TX_CLAMP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPVertex(0x06001078, 32, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 2, 1, 0),
	gsSP2Triangles(4, 5, 6, 0, 6, 7, 4, 0),
	gsSP2Triangles(6, 8, 7, 0, 9, 10, 11, 0),
	gsSP2Triangles(11, 10, 12, 0, 13, 14, 15, 0),
	gsSP2Triangles(9, 16, 17, 0, 9, 18, 16, 0),
	gsSP2Triangles(15, 19, 17, 0, 19, 15, 14, 0),
	gsSP2Triangles(20, 21, 22, 0, 13, 15, 23, 0),
	gsSP2Triangles(11, 24, 9, 0, 24, 18, 9, 0),
	gsSP2Triangles(23, 1, 13, 0, 25, 8, 6, 0),
	gsSP2Triangles(3, 26, 24, 0, 11, 27, 24, 0),
	gsSP2Triangles(26, 18, 24, 0, 1, 0, 13, 0),
	gsSP2Triangles(12, 27, 11, 0, 28, 21, 20, 0),
	gsSP2Triangles(29, 30, 6, 0, 6, 31, 29, 0),
	gsSPVertex(0x06001278, 12, 0),
	gsSP2Triangles(0, 1, 2, 0, 2, 1, 3, 0),
	gsSP2Triangles(4, 5, 6, 0, 4, 7, 5, 0),
	gsSP2Triangles(8, 9, 10, 0, 8, 11, 9, 0),
	gsDPPipeSync(),
	gsDPLoadTextureBlock(0x06000A48, G_IM_FMT_CI, G_IM_SIZ_8b, 32, 32, 0, G_TX_NOMIRROR | G_TX_CLAMP, G_TX_NOMIRROR | G_TX_CLAMP, 5, 5, G_TX_NOLOD, G_TX_NOLOD),
	gsSPVertex(0x06001338, 6, 0),
	gsSP2Triangles(0, 1, 2, 0, 3, 1, 0, 0),
	gsSP2Triangles(4, 5, 0, 0, 0, 5, 3, 0),
	gsSPEndDisplayList(),
}

"
KSFcEEC7,Gold to Ironblocks NEW,MagmaLP,Lua,Wednesday 1st of November 2023 04:31:59 PM CDT,"os.loadAPI(""ocs/apis/sensor"")
sen = sensor.wrap(""right"")
mon = peripheral.wrap(""back"")
term.setBackgroundColor(32768)
term.setCursorPos(1,1)
term.clear()

function calc_color(color)
    return math.pow(2, color - 1)
end
 
function msg(gap, line, color, groundb, text) 
    mon.setBackgroundColor(calc_color(groundb))
    mon.setCursorPos(gap,line)
    mon.setTextColor(calc_color(color))
    text = mon.write(text)
end 

function clear()
    mon.setBackgroundColor(colors.black)
    mon.clear()
end

function LangSelect()
	clear()
	msg(05,03,05,16,""Trade Goldblocks to Ironblocks"")
	msg(05,04,01,16,""~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"")
    
    for yPos = 7, 11 do 
        for xPos = 3, 15 do 
            msg(xPos,yPos,01,06,"" "")
        end
    end
    for yPos = 7, 11 do 
        for xPos = 24, 36 do
            msg(xPos,yPos,01,06,"" "")
        end
    end
    msg(06,09,01,06,""Deutsch"")
    msg(27,09,01,06,""English"") 
    
    event, side, x, y = os.pullEvent(""monitor_touch"")
    if x >= 03 and x <= 15 and y >= 07 and y <= 11 then
        ShardDetectionGerman()
    elseif x >= 24 and x <= 36 and y >= 07 and y <= 11 then
        ShardDetectionEnglish()
    end
end

function ShardDetectionEnglish()
	clear()
	msg(05,03,05,16,""Trade Goldblocks to Ironblocks"")
	msg(05,04,01,16,""~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"")   
	msg(02,07,06,16,""First insert all your Shard of Minium"")
	msg(02,08,06,16,""in the left (green) ME-System."")  
    msg(02,11,06,16,""Then confirm with the button below!"")
    for yPos = 13, 15 do 
        for xPos = 3, 15 do 
            msg(xPos,yPos,01,06,"" "")
        end
    end 
    msg(06,14,01,06,""confirm"")
    
    event, side, x, y = os.pullEvent(""monitor_touch"")
    if x >= 03 and x <= 15 and y >= 13 and y <= 15 then
        
        s = sen.getTargets()
        function getS()
            for v, k  in pairs(s) do
                if k.Name == ""ME Wireless Access Point"" then   
                    target = v
                end
            end
            sleep(0.5)
            return target
        end
        
        f = getS()
        s1 = sen.getTargetDetails(target)
        for v, k in pairs(s1.Items) do 
            
			Shard_Of_Minium_Amount = 0
            if k.Name == ""Shard of Minium"" then
                Shard_Of_Minium_Amount = k.Size
                print(""Shards Detected: ""..Shard_Of_Minium_Amount)
            end
            if Shard_Of_Minium_Amount > 0 then
                local file = fs.open(""Shards"", ""w"")
        		file.write(Shard_Of_Minium_Amount)
        		file.close()
                Craftings = Shard_Of_Minium_Amount * 40
                local file = fs.open(""Craftings"", ""w"")
        		file.write(Craftings)
        		file.close() 
            end
        end
    end
    MainMenuEnglish()
end
    
function ShardDetectionGerman()
    clear()
    msg(02,02,15,16,""Noch in Arbeit"")
    sleep(2.5)
    os.reboot()
end

function MainMenuEnglish()
    clear()
    local file = fs.open(""Shards"", ""r"")
    Shard_Of_Minium_Amount = file.readLine()
    file.close()
    local file = fs.open(""Craftings"", ""r"")
    Craftings = file.readLine()
    file.close()
	msg(05,03,05,16,""Trade Goldblocks to Ironblocks"")
	msg(05,04,01,16,""~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"")   
	msg(02,07,01,16,""Detected Shards: ""..Shard_Of_Minium_Amount)
    msg(02,09,01,16,""Now insert at least ""..Craftings)
	msg(02,10,01,16,""Gold Blocks in the left ME-System"")  
    msg(02,12,01,16,""-> confirm with green button to start"")
    for yPos = 14, 16 do 
        for xPos = 3, 15 do 
            msg(xPos,yPos,01,06,"" "")
        end
    end 
    msg(06,15,01,06,""confirm"")
    event, side, x, y = os.pullEvent(""monitor_touch"")
    if x >= 03 and x <= 15 and y >= 14 and y <= 16 then
     	msg(06,14,01,06,""confirm test"")   
    end
    
end


function MainMenuGerman()
    
end

--Program Start
LangSelect()"
aCeZRRrD,Nicehash API via MicroPython,zefie,Python,Wednesday 1st of November 2023 04:04:17 PM CDT,"# usage example
# obj = nicehash_request(""/main/api/v2/accounting/accounts2"",""fiat=USD"")

def nicehash_request(url, query=""""):
    start = utime.ticks_ms()
    localtime = str('{0:f}'.format(get_time(False,True) * 1000)).split('.')[0] # epoch in ms
    nonce = str(uuid.uuid4())
    reqid = str(uuid.uuid4())
    message = bytearray(secrets['nicehash_key'],""utf-8"") # api key
    message += b'\x00'
    message += bytearray(localtime,""utf-8"")
    message += b'\x00'
    message += bytearray(nonce,""utf-8"")
    message += b'\x00'
    message += b'\x00'
    message += bytearray(secrets['nicehash_org'],""utf-8"") # api organization
    message += b'\x00'
    message += b'\x00'
    message += bytearray(""GET"",""utf-8"")
    message += b'\x00'
    message += bytearray(url,""utf-8"")
    if query != """":
        message += b'\x00'
        message += bytearray(query,""utf-8"")
    
    hmacs = hmac.HMAC(bytearray(secrets['nicehash_secret'],""utf-8""), message, hashlib.sha256) # api secret
    hashed_string = hmacs.hexdigest()
    auth = secrets['nicehash_key']+"":""+hashed_string; # api key
    headers = {
        ""X-Time"": localtime,
        ""X-Nonce"": nonce,
        ""X-Organization-ID"": secrets['nicehash_org'], # api organization
        ""X-Request-ID"": reqid,
        ""X-Auth"": auth
    }
    response = urequests.get(""https://api2.nicehash.com""+url+""?""+query, headers=headers)
    obj = json.loads(response.text)
    response.close()
    delta = utime.ticks_diff(utime.ticks_ms(), start)
    debug(""Received response from Nicehash API (took ""+str(delta)+""ms)"")
    return obj
"
ncZvmvrw,Guild System,bAngelov,Python,Wednesday 1st of November 2023 03:49:39 PM CDT,"from project.player import Player

class Guild:

    def __init__(self, name: str):
        self.name = name
        self.players: [Player] = []

    def assign_player(self, player: Player):
        if player in self.players:
            return f""Player {player.name} is already in the guild.""
        elif player.guild != ""Unaffiliated"":
            return f""Player {player.name} is in another guild.""
        self.players.append(player)
        player.guild = self.name
        return f""Welcome player {player.name} to the guild {self.name}""

    def kick_player(self, player_name: str):
        player = [player for player in self.players if player.name == player_name]
        if not player:
            return f""Player {player_name} is not in the guild.""
        player = player[0]
        player.guild = ""Unaffiliated""
        self.players.remove(player)
        return f""Player {player_name} has been removed from the guild.""

    def guild_info(self):
        data = [f""Guild: {self.name}""]
        data.extend(player.player_info() for player in self.players)
        return '\n'.join(data)

#PLAYER CLASS SOURCES

class Player:

    def __init__(self, name: str, hp: int, mp: int):
        self.mp = mp
        self.hp = hp
        self.name = name
        self.guild = ""Unaffiliated""
        self.skills = {}

    def add_skill(self, skill_name: str, mana_cost: int):
        if skill_name in self.skills:
            return ""Skill already added""
        self.skills[skill_name] = mana_cost
        return f""Skill {skill_name} added to the collection of the player {self.name}""

    def player_info(self, ):
        data = [f""Name: {self.name}"",
                f""Guild: {self.guild}"",
                f""HP: {self.hp}"",
                f""MP: {self.mp}""]
        data.extend(f""==={skill_name} - {mana_cost}"" for skill_name,mana_cost in self.skills.items())
        return '\n'.join(data)
"
YxaAhkV9,Computer bundle remote,JaMaNi133,Lua,Wednesday 1st of November 2023 03:42:49 PM CDT,"rednet.open(""bottom"")
local outport = 0
print(os.getComputerID())

    
function setVal(mask,val)
	local maskVal = mask * val
    local maskedCurrent = bit.band(bit.bnot(mask),outport)
    outport = maskVal + maskedCurrent
end

while true do
    local event, dist, message = os.pullEvent(""rednet_message"")
	setVal(bit.band(message,65535),bit.band(message,65536)/65536)
	print(string.format(""msg : %d   b16 1: %d   b16 1 + 1: %d"",message,bit.band(message,65535),bit.band(message,65536)/65536))
    redstone.setBundledOutput(""top"",outport)
end"
3Ebdfhqs,Untitled,Nanoic,Java,Wednesday 1st of November 2023 02:15:31 PM CDT,"package chatclient;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;

/**
 *
 * @author arich
 */
public class ChatOverview extends JPanel implements ActionListener {
    
    JTextArea chatField;
    JTextArea typeBox;
    JButton chatBtn;
    JButton chatClearBtn;
    
    Dimension chatFieldDimension;
    Dimension typeBoxDimension;
    
    public ChatOverview(){
        
        Border bl = new LineBorder(Color.red, 6, true);
        chatField = new JTextArea(20,20);
        typeBox = new JTextArea(20,20);
        chatBtn = new JButton(""send"");
        chatClearBtn = new JButton(""clear"");
        
        chatField.setBorder(bl);
        typeBox.setBorder(bl);
        
        //dimensions
        chatFieldDimension = new Dimension(200, 200);
        typeBoxDimension = new Dimension(200, 200);
        
        typeBoxDimension.toString();
        
        //chatField.addActionListener(this);
        //typeBox.addActionListener(this);
        chatBtn.addActionListener(this);
        
        
        this.add(chatField);
        this.add(typeBox);
        this.add(chatBtn);
        this.add(chatClearBtn);
    }
    
    public void actionPeformed(KeyEvent ke){
        
        
        if(ke.equals(chatBtn)){
            
            String cin = typeBox.getText();
            chatField.setText(""Usr01: "" + cin);
        }
    }
}
"
5NHk9UN1,Untitled,korenizla,Python,Wednesday 1st of November 2023 02:02:04 PM CDT,"import pandas as pd
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
import numpy as np
import scipy.integrate as spi
import warnings
warnings.filterwarnings(""ignore"")

# Определение функции
def f(x):
    return np.exp(np.tan(x))

# Метод прямоугольников
def rectangle_rule(f, a, b, n):
    h = (b - a) / n
    integral = 0
    for i in range(n):
        x_i = a + i * h
        integral += f(x_i + h / 2)
    integral *= h
    return integral

# Метод трапеций
def trapezoidal_rule(f, a, b, n):
    h = (b - a) / n
    integral = (f(a) + f(b)) / 2
    for i in range(1, n):
        x_i = a + i * h
        integral += f(x_i)
    integral *= h
    return integral

# Метод парабол
def parabolic_rule(f, a, b, n):
    h = (b - a) / n
    integral = f(a) + f(b)
    for i in range(1, n):
        x_i = a + i * h
        if i % 2 == 0:
            integral += 2 * f(x_i)
        else:
            integral += 4 * f(x_i)
    integral *= h / 3
    return integral

import numpy as np
import scipy.integrate as spi
import pandas as pd

# Определение функции и методов интегрирования - оставим их без изменений

# Определение точного значения интеграла
exact_integral = spi.quad(f, -1, 1)[0]

# Заданный отрезок и значения n
# Задаем начальное значение n и количество итераций
start_n = 4
num_iterations = 8

# Создаем список значений n в геометрической прогрессии
n_values = [start_n * 2**i for i in range(num_iterations)]

# Создание DataFrame для каждого метода
results_rectangle = pd.DataFrame(columns=['n', 'Integral', 'Runge Error'])
results_trapezoidal = pd.DataFrame(columns=['n', 'Integral', 'Runge Error'])
results_parabolic = pd.DataFrame(columns=['n', 'Integral', 'Runge Error'])

# Цикл по каждому значению n
for n in n_values:
    a = -1
    b = 1
    h = (b - a) / n

    # Вычисление интегралов с использованием каждого метода и сохранение в соответствующих DataFrame
    rectangle_integral = rectangle_rule(f, a, b, n)
    trapezoidal_integral = trapezoidal_rule(f, a, b, n)
    parabolic_integral = parabolic_rule(f, a, b, n)

    runge_error_rectangle = abs(rectangle_integral - exact_integral) / 3
    runge_error_trapezoidal = abs(trapezoidal_integral - exact_integral) / 3
    runge_error_parabolic = abs(parabolic_integral - exact_integral) / 15

    results_rectangle = results_rectangle.append({'n': n, 'Integral': rectangle_integral, 'Runge Error': runge_error_rectangle}, ignore_index=True)
    results_trapezoidal = results_trapezoidal.append({'n': n, 'Integral': trapezoidal_integral, 'Runge Error': runge_error_trapezoidal}, ignore_index=True)
    results_parabolic = results_parabolic.append({'n': n, 'Integral': parabolic_integral, 'Runge Error': runge_error_parabolic}, ignore_index=True)

# Установка 'n' в качестве индекса для каждого DataFrame
results_rectangle.set_index('n', inplace=True)
results_trapezoidal.set_index('n', inplace=True)
results_parabolic.set_index('n', inplace=True)

# ... (предыдущий код)

# Рассчет значений ошибок для каждого метода интегрирования
for df, scaling_factor in zip([results_rectangle, results_trapezoidal, results_parabolic], [3, 3, 15]):
    df['Absolute Error'] = abs(df['Integral'] - exact_integral)
    df['Relative Error'] = df['Absolute Error'] / exact_integral
    df['Integral Change'] = df['Integral'].diff()
    df.index = df.index.astype(int)

# Вывод результатов для каждого метода
print(""Результаты метода прямоугольников:"")
print(results_rectangle)

print(""\nРезультаты метода трапеций:"")
print(results_trapezoidal)

print(""\nРезультаты метода парабол:"")
print(results_parabolic)

import matplotlib.pyplot as plt

# Примерный код для создания графика

# Подготовка данных для построения графика
# results_rectangle, results_trapezoidal, results_parabolic - ваши DataFrame

# Для примера возьмем данные из results_rectangle

x = np.log(results_rectangle.index)  # логарифм количества узлов
y = -np.log(results_rectangle['Runge Error'])  # минус логарифм абсолютной ошибки

plt.figure(figsize=(8, 6))
plt.plot(x, y, label='Rectangle Rule')

plt.xlabel('Log(Number of Nodes)')
plt.ylabel('-Log(Absolute Error)')
plt.title('Log-log Plot of Absolute Error')

plt.legend()
plt.grid(True)
plt.show()"
swLtHVyx,"Ternary Operator, num, str",RicardasSim,C,Wednesday 1st of November 2023 02:02:00 PM CDT,"#include <stdio.h>
#include <stdlib.h>

int main()
{

    unsigned int number_of_apples;


    number_of_apples = 10;

    ( number_of_apples > 0 ) ? printf( ""%d\n"", number_of_apples ) : printf( ""None\n"" );


    number_of_apples = 0;

    ( number_of_apples > 0 ) ? printf( ""%d\n"", number_of_apples ) : printf( ""None\n"" );

    return 0;
}

/*

output:

10
None


*/
"
6w7sATyV,apd asig3 fourier,STANAANDREY,MatLab,Wednesday 1st of November 2023 01:42:05 PM CDT,"function plotSignalCharacteristics(signal, fs)
    % Plot amplitude
    t = (0:length(signal)-1) / fs;
    figure;
    subplot(3,1,1);
    plot(t, signal);
    title('Amplitude');
    xlabel('Time (s)');
    ylabel('Amplitude');
    
    % Compute FFT and plot magnitude components
    N = length(signal);
    f = (0:N-1) * fs / N;
    magnitude = abs(fft(signal)/N);
    subplot(3,1,2);
    plot(f, magnitude(1:N/2+1));
    title('Magnitude Components (FFT)');
    xlabel('Frequency (Hz)');
    ylabel('Magnitude');
    
    % Plot spectrogram
    windowSize = 512;
    overlap = 256;
    subplot(3,1,3);
    spectrogram(signal, windowSize, overlap, windowSize, fs, 'yaxis');
    title('Spectrogram');
    xlabel('Time (s)');
    ylabel('Frequency (Hz)');
end
% Example usage
fs = 1000; % Sampling frequency in Hz
t = 0:1/fs:1-1/fs; % Time vector from 0 to 1 second with 1/fs spacing
signal = sin(2*pi*50*t) + 0.5*cos(2*pi*150*t) + randn(size(t)); % Example signal with noise

plotSignalCharacteristics(signal, fs);
"
rHBG5aZM,assig 2 apd fourier,STANAANDREY,MatLab,Wednesday 1st of November 2023 01:40:44 PM CDT,"function plot_spectrum(frequency_components, sampling_rate)
    % Generate time vector
    T = 1 / sampling_rate;
    t = 0:T:(1-T);
    
    % Initialize the signal
    signal = zeros(1, length(t));
    
    % Generate the sinusoid signal with specified frequency components
    for i = 1:length(frequency_components)
        frequency = frequency_components(i).frequency;
        amplitude = frequency_components(i).amplitude;
        phase = frequency_components(i).phase;
        
        % Add the sinusoid component to the signal
        signal = signal + amplitude * sin(2*pi*frequency*t + phase);
    end
    
    % Compute the FFT
    N = length(signal);
    fft_signal = fft(signal);
    
    % Compute the frequency axis
    f = (0:N-1) * (sampling_rate / N);
    
    % Plot magnitude spectrum
    figure;
    subplot(2, 1, 1);
    plot(f, abs(fft_signal));
    xlabel('Frequency (Hz)');
    ylabel('Magnitude');
    title('Magnitude Spectrum');
    
    % Plot phase spectrum
    subplot(2, 1, 2);
    plot(f, angle(fft_signal));
    xlabel('Frequency (Hz)');
    ylabel('Phase (radians)');
    title('Phase Spectrum');
end
"
0zSe2SB8,fourier apd,STANAANDREY,MatLab,Wednesday 1st of November 2023 01:39:34 PM CDT,"function x = inverseDFT(X)
    % Compute the length of the input DFT
    N = length(X);
    
    % Compute the IDFT using the formula
    x = zeros(1, N);
    for n = 1:N
        for k = 1:N
            x(n) = x(n) + X(k) * exp(1i * 2 * pi * (k - 1) * (n - 1) / N);
        end
        x(n) = x(n) / N;
    end
end
% Generate a random input signal
signal = rand(1, 8);

% Compute the DFT of the input signal
X = fft(signal);

% Compute the IDFT of the DFT result
reconstructed_signal = inverseDFT(X);

% Check if the input signal and the reconstructed signal are the same
disp('Original Signal:');
disp(signal);
disp('Reconstructed Signal:');
disp(real(reconstructed_signal));

% Compare the original signal and the reconstructed signal
if isequal(signal, real(reconstructed_signal))
    disp('DFT and IDFT are inverses of each other.');
else
    disp('DFT and IDFT are NOT inverses of each other.');
end
"
BqXGaps5,Untitled,dllbridge,C,Wednesday 1st of November 2023 01:35:25 PM CDT,"
#include   <stdio.h>


void foo();


/////////////////////////////////////////////////////
int main()                                         // 
{
	
	foo();
	foo();
}


///////////////////////////////////////////////////
void foo()                                       //
{
	
   static int n = 1;
   
   printf(""%d\n"", n);
   
   n += 5;                           //n = n + 5;	
	
}
































/*

#include   <stdio.h>


int n = 77;


/////////////////////////////////////////////////////
int main()                                         // 
{
	

		if(n ==   15) printf(  ""15"");
		else
		{ 	
	       if(n ==  104) printf( ""104"");
		   else
		   {				
	          if(n == 1025) printf(""1025"" );
			  else 	        printf(""Error"");		
		   }
	    }	 		
				  
}



*/






















/*
#include   <stdio.h>


int n = 104;


/////////////////////////////////////////////////////
int main()                                         // 
{
	

		if(n ==   15) printf(  ""15""); 	
	    if(n ==  104) printf( ""104"");			
	    if(n == 1025) printf(""1025"");			
			 		
				  
	  //  printf(""Error"");		  	   		

	
}



*/













/*

#include   <stdio.h>


int n = 104;


/////////////////////////////////////////////////////
int main()                                         // 
{
	
	switch(n)
	{
		
	   case   15: printf(  ""15"");			
			      break;	
		
	   case  104: printf( ""104"");			
			    //break;
			   
	   case 1025: printf(""1025"");			
			    //  break;		
				  
	   default:   printf(""Error"");		  	   		
	}
	
}

*/





















/*
#include   <stdio.h>
//#include  <string.h>


void _strcpy(char *, const char *);  


/////////////////////////////////////////////////////
int main()                                         // 
{
	
	char sz[20] = ""fresh"",
		sz1[20] = ""tomato_SONY"";

	printf(""%s\n"", sz);

   _strcpy(&sz[0], ""sz1"");  
	

	printf(""%s\n"", sz);
}



//////////////////////////////////////////////////////
void _strcpy(char *psz1, const char *psz2)                //
{
	
	
	int i = 0;
    
	for(; psz2[i] != 0; i++) 
	{
		psz1[i] = psz2[i];
    }
	psz1[i] = 0;	
}


*/



/*
#include   <stdio.h>
//#include  <string.h>


void _strcpy(char *, char *);  


/////////////////////////////////////////////////////
int main()                                         // 
{
	
	char sz[20] = ""fresh"",
		sz1[20] = ""tomato_SONY"";

	printf(""%s\n"", sz);

   _strcpy(&sz[0], sz1);  
	

	printf(""%s\n"", sz);
}



//////////////////////////////////////////////////////
void _strcpy(char *psz1, char *psz2)                //
{
	
	
	int i = 0;
    
	for(; psz2[i] != 0; i++) 
	{
		psz1[i] = psz2[i];
    }
	psz1[i] = 0;	
}

*/







/*
#include   <stdio.h>
#include  <string.h>



/////////////////////////////////////////////////////
int main()                                         // 
{
	
	char sz[20] = ""fresh"",
		sz1[20] = ""tomato_SONY"";

	printf(""%s\n"", sz);
	
	int i = 0;
    
	for(; sz1[i] != 0; i++) sz[i] = sz1[i];

	sz[i] = 0;
	

	printf(    ""%s\n"", sz);
}



*/



















 //   printf(""i = %d\n"",  i);
















/*

#include   <stdio.h>
#include  <string.h>



/////////////////////////////////////////////////////
int main()                                         // 
{
	
	char sz[20] = ""fresh"",
		sz1[20] = ""tomato_SONY"";

	printf(""%s\n"", sz);
	
    for(int i = 0; i < 996; i++)
	{
		
	   	sz[i] = sz1[i];
	   	
	   	if(sz1[i] == 0) break;
	}	
	

	printf(""%s\n"", sz);
}




*/













/*

#define _CRT_SECURE_NO_WARNINGS 

 
#include   <stdio.h>
#include  <string.h>






/////////////////////////////////////////////////////
int main()                                         // 
{
	
	char sz[20] = ""fresh"",
		sz1[20] = ""tomato"";

	printf(""%s\n"", sz);
	
    for(int i = 0; i <= 6; i++)
	{
		
	   	sz[i] = sz1[i];
	}	
	

	printf(""%s\n"", sz);
}



*/





"
DwmBEGMv,test,MrKey2b,Lua,Wednesday 1st of November 2023 01:16:40 PM CDT,"-- Enveloppez le périphérique Lithium Battery Box
local batteryBox = peripheral.wrap(""electrodynamics:lithiumbatterybox_10"")

-- Fonction pour récupérer les valeurs
function getValues()
    local joulesStored = batteryBox.getJoulesStored()
    local maxJoulesStored = batteryBox.getMaxJoulesStored()
    local voltage = batteryBox.getVoltage()
    
    return joulesStored, maxJoulesStored, voltage
end

-- Fonction pour afficher les valeurs
function displayValues()
    local joulesStored, maxJoulesStored, voltage = getValues()

    print(""Joules Stored: "" .. joulesStored)
    print(""Max Joules Stored: "" .. maxJoulesStored)
    print(""Voltage: "" .. voltage)
end

-- Appel de la fonction d'affichage
displayValues()
"
8SmETpcQ,divisors-v1.c,i8yes,C,Wednesday 1st of November 2023 01:14:52 PM CDT,"#include <stdio.h>
#include <stdbool.h>
#include <math.h>

bool checkprime(int num);

int main(void) {
    int num, i = 0;
    bool prime = 0;

    // Brief summary of the program's function
    printf(""[I2P-Lab] Program which checks if the input number is prime.\n"");
    printf(""[I2P-Lab] If that is not the case, the program will compute the divisors\n"");

    // Read the number from the user
    printf(""Input your number: "");
    scanf(""%d"", &num);

    // Check if the number is prime
    // If not, print its divisors
    if ((prime = checkprime(num)) == true) {
        printf(""The number is prime\n"");
    } else {
        printf(""Divisors: "");
        if (num == 0)
            printf(""Number 0 has undefined divisors, cannot compute.\n"");
        else {
            for (i = 1; i < num; i++)
                if ((num % i) == 0)
                    printf(""%d "", i);
            printf(""%d\n"", num);
        }
    }

}

bool checkprime(int num) {
    bool isprime = true;
    int i = 0;

    if (num == 0 || num == 1) {
        isprime = false;
    }

/* Slower way
    for (i = 2; i <= num / 2; i++) {
        if ((num % i) == 0) {
            isprime = false;
        }
    }
*/

    for (i = 2; i <= sqrt(num); i++) {
        if ((num % i) == 0) {
            isprime = false;
        }
    }

    return isprime;
}
"
47BM4e7F,Info_Youtube_GoogleVideo.html,Thunder-Menu,HTML,Wednesday 1st of November 2023 12:55:07 PM CDT,"<!DOCTYPE html>
<html lang=""fr"">

<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Informations de flux vidéo YouTube et Détection de plateforme</title>
</head>

<body>

<h2 id=""platformLabel"">Enregistrement Vidéo et Audio</h2>

<input type=""text"" id=""youtubeUrl"" placeholder=""Entrez l'URL de la vidéo YouTube"">
<button onclick=""fetchHtmlContent()"">Obtenir le contenu HTML</button>
<button onclick=""saveHtmlContentToFile()"">Sauvegarder le contenu HTML</button>
<button onclick=""loadHtmlContentFromFile()"">Charger le contenu HTML depuis un fichier</button>
<h3>Contenu HTML:</h3>
<textarea id=""htmlOutput"" rows=""10"" cols=""50""></textarea>
<br>
<button onclick=""extractVideoInfo()"">Extraire les informations de flux vidéo</button>
<button onclick=""visitStreamUrl()"">Visiter l'URL</button> <!-- Bouton ajouté ici -->
<br>
<h3>Informations de flux vidéo:</h3>
<textarea id=""videoInfoOutput"" rows=""10"" cols=""50""></textarea>
<div>
    <label id=""cipherWarning"" style=""display: none; color: red;"">Signature Cipher</label>
    <select id=""qualityDropdown""></select>
</div>
<div>
    <label>Informations de flux vidéo:</label>
    <select id=""videoUrlDropdown""></select> <!-- ComboBox pour les URLs -->
    <pre id=""videoInfoOutput""></pre>
</div>

<script>
    let userAgent = navigator.userAgent || navigator.vendor || window.opera;

    if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {
        document.getElementById('platformLabel').innerText = ""Enregistrement Vidéo et Audio pour iPhone/iPad/iPod"";
    } else if (/android/i.test(userAgent)) {
        document.getElementById('platformLabel').innerText = ""Enregistrement Vidéo et Audio pour Android"";
    } else if (/Windows/.test(userAgent) && ('ontouchstart' in window || navigator.maxTouchPoints)) {
        document.getElementById('platformLabel').innerText = ""Enregistrement Vidéo et Audio pour Windows (Tactile)"";
    } else {
        document.getElementById('platformLabel').innerText = ""Enregistrement Vidéo et Audio pour autres plateformes"";
    }

    class StreamInfo {
        constructor() {
            this.Url = """";
            this.MimeType = """";
            this.Quality = """";
            this.Itag = 0;
            this.ContentLength = 0;
            this.Width = 0;
            this.Height = 0;
            this.Fps = 0;
        }
    }

    let downloadedHtmlContent = """";

    async function fetchHtmlContent() {
        const youtubeUrl = document.getElementById(""youtubeUrl"").value;
        downloadedHtmlContent = await downloadHtml(youtubeUrl);
        document.getElementById(""htmlOutput"").textContent = downloadedHtmlContent;
    }

    async function downloadHtml(url) {
        const corsProxy = ""https://cors-anywhere.herokuapp.com/"";
        const response = await fetch(corsProxy + url, {
            headers: {
                ""X-Requested-With"": ""XMLHttpRequest""
            }
        });
        if (!response.ok) {
            throw new Error('Erreur lors de la tentative de récupération du contenu.');
        }
        return await response.text();
    }

function extractVideoInfo() {
    const streamInfos = getVideoStreamInfos(downloadedHtmlContent);
    const videoInfoOutput = document.getElementById(""videoInfoOutput"");
    const qualityDropdown = document.getElementById(""qualityDropdown"");
    const videoUrlDropdown = document.getElementById(""videoUrlDropdown"");
    const cipherWarning = document.getElementById(""cipherWarning"");

    videoInfoOutput.textContent = '';
    qualityDropdown.innerHTML = '';
    videoUrlDropdown.innerHTML = ''; 

    let cipherDetected = false;
    const addedQualities = new Set();
    
    if (streamInfos && streamInfos.length > 0) {
        // Filtrer les formats qui ont à la fois vidéo et audio
        const validStreamInfos = streamInfos.filter(stream => stream.MimeType.startsWith(""video/mp4""));

        validStreamInfos.forEach(streamInfo => {
            const info = `Itag: ${streamInfo.Itag}\nURL: ${streamInfo.Url}\nMimeType: ${streamInfo.MimeType}\nQuality: ${streamInfo.Quality}\nWidth: ${streamInfo.Width}\nHeight: ${streamInfo.Height}\nContentLength: ${streamInfo.ContentLength}\nFps: ${streamInfo.Fps}\n\n`;
            videoInfoOutput.textContent += info;

            if (streamInfo.Signature) {
                cipherDetected = true;
            }

            if (!addedQualities.has(streamInfo.Quality)) {
                const option = document.createElement(""option"");
                option.value = streamInfo.Url;
                option.textContent = streamInfo.Quality;
                qualityDropdown.appendChild(option);
                addedQualities.add(streamInfo.Quality);
            }

            // Add each URL to the URL dropdown
            const urlOption = document.createElement(""option"");
            urlOption.value = streamInfo.Url;
            urlOption.textContent = streamInfo.Url;
            videoUrlDropdown.appendChild(urlOption);
        });
        
        cipherWarning.style.display = cipherDetected ? ""block"" : ""none"";
    } else {
        videoInfoOutput.textContent = ""Aucune information de flux vidéo trouvée ou impossible de récupérer les données."";
        cipherWarning.style.display = ""none"";
    }
}


const resolutionsPriority = [137, 136, 135, 18, 133, 160];

function getVideoStreamInfos(htmlContent) {
    const regex = /ytInitialPlayerResponse\s*=\s*({.*?});/;
    const match = htmlContent.match(regex);
    if (!match) {
        console.error('Impossible de trouver les informations de flux vidéo.');
        return [];
    }
    const json = JSON.parse(match[1]);
    const formats = json.streamingData && json.streamingData.formats;
    const adaptiveFormats = json.streamingData && json.streamingData.adaptiveFormats;
    
    if (!formats && !adaptiveFormats) return [];

    const allFormats = [...(formats || []), ...(adaptiveFormats || [])];

    let sortedFormats = allFormats.sort((a, b) => {
        return getQualityRanking(b) - getQualityRanking(a);
    });

    return sortedFormats.map(format => {
        const streamInfo = new StreamInfo();
        streamInfo.Itag = format.itag;

        if (format.signatureCipher) {
            streamInfo.Url = getVideoUrlFromCipher(format.signatureCipher);
            streamInfo.Signature = extractSignatureFromCipher(format.signatureCipher);
        } else {
            streamInfo.Url = format.url;
        }

        streamInfo.MimeType = format.mimeType;
        streamInfo.Quality = format.qualityLabel || '';
        streamInfo.Width = format.width;
        streamInfo.Height = format.height;
        streamInfo.ContentLength = parseInt(format.contentLength, 10) || 0;
        streamInfo.Fps = format.fps;
        return streamInfo;
    });
}

function getVideoUrlFromCipher(cipher) {
    const urlMatch = cipher.match(/url=(https?[^&]*)/);
    if (urlMatch && urlMatch[1]) {
        return decodeURIComponent(urlMatch[1]);
    }
    return null;
}

function extractSignatureFromCipher(cipher) {
    const signatureMatch = cipher.match(/s=([^&]*)\&sp=sig/);
    if (signatureMatch && signatureMatch[1]) {
        return decodeURIComponent(signatureMatch[1]);
    }
    return null;
}

function getQualityRanking(format) {
    const index = resolutionsPriority.indexOf(format.itag);
    if (index !== -1) {
        return resolutionsPriority.length - index;
    }
    return 0;
}




    async function saveHtmlContentToFile() {
        try {
            const fileHandle = await window.showSaveFilePicker();
            const writable = await fileHandle.createWritable();
            await writable.write(downloadedHtmlContent);
            await writable.close();
            alert('Contenu HTML sauvegardé!');
        } catch (err) {
            console.error('Erreur lors de la sauvegarde du fichier:', err);
        }
    }

    async function loadHtmlContentFromFile() {
        try {
            const [fileHandle] = await window.showOpenFilePicker();
            const file = await fileHandle.getFile();
            const content = await file.text();
            document.getElementById(""htmlOutput"").textContent = content;
            downloadedHtmlContent = content;
        } catch (err) {
            console.error('Erreur lors de la lecture du fichier:', err);
        }
    }
    // Fonction ajoutée pour ouvrir l'URL du flux vidéo sélectionné
function visitStreamUrl() {
    const videoUrlDropdown = document.getElementById(""videoUrlDropdown"");
    const selectedUrl = videoUrlDropdown.value;
    if (selectedUrl) {
        window.open(selectedUrl, '_blank');
    } else {
        alert(""Veuillez sélectionner une URL."");
    }
}

</script>

<footer>
    <a href=""https://cors-anywhere.herokuapp.com/corsdemo"" target=""_blank"">Accédez à CORS Anywhere</a>
</footer>

</body>

</html>

"
V8ZfsuQs,Untitled,jayankaghosh,JSON,Wednesday 1st of November 2023 12:50:52 PM CDT,"{""companyInfo"":{""name"":""Codilar Technologies Private Limited"",""alternateNames"":null,""location"":""Bangalore, Karnataka, India"",""website"":""http://www.codilar.com"",""phone"":""8884900505"",""heroImageUrl"":""https://d38k06t7m3x001.cloudfront.net/partnerdirectory/5662/backgroundImage-1642430438223"",""logoUrl"":""https://d38k06t7m3x001.cloudfront.net/partnerdirectory/5662/logo-1643799949745"",""level"":""Bronze"",""certifiedEmployees"":23,""credentials"":40,""certifications"":27,""specializations"":0,""shortDescription"":""Codilar is a digital commerce agency specializing in Magento and Progressive Web Apps (PWA). We build high-performing and extremely user-friendly shops for merchants that help them to skyrocket their conversions and revenue."",""longDescription"":""<p>Codilar was a dream that was visualized by 4, and has infected over 160+ hearts in the five years since we started! We always knew that there is more to e-commerce than just code, and that is exactly what we set out in search of! Back in 2012, there was hardly any expertise in Magento in the country, and we focused our attention on 100% quality and mastery of the platform. Today, we are still on the journey of disrupting status quo, and making e-commerce accessible. We are a team of 160+, mage-blooded and bold. Meet us https://www.codilar.com/about-us/ Capabilities: Magento PWA Pimcore Native &amp; Hybrid Mobile Apps Conversion Rate Optimization eCommerce SEO</p>"",""listingId"":""ed5ba03a-203b-11ed-b02c-0e9068926235"",""accentColor"":""#FF0000"",""contactUsHeader"":""Send a message"",""primaryContactName"":null,""primaryContactEmail"":null,""primaryContactPhone"":null,""crmId"":null,""status"":null,""type"":null,""globalParentName"":null,""globalParentId"":null},""addresses"":[{""name"":""Bangalore"",""address1"":""#703, 30th Main Road, BTM 2nd Stage"",""address2"":""Karnataka, Bangalore"",""city"":""Bangalore"",""state"":""Karnataka"",""country"":""India"",""countryId"":""in"",""regionId"":""asia-pacific"",""postalCode"":""560076"",""isHeadquarter"":true},{""name"":""Singapore"",""address1"":""Codilar Digital Pte Ltd  68 Circular Road, #02-01, 049422, Singapore"",""address2"":""Singapore"",""city"":""Singapore"",""state"":null,""country"":""Singapore"",""countryId"":""sg"",""regionId"":""asia-pacific"",""postalCode"":""049422"",""isHeadquarter"":false},{""name"":""UAE"",""address1"":""DTECH, Technohub Building, Dubai Silicon Oasis Authority, United Arab Emirates"",""address2"":""Dubai"",""city"":""Dubai"",""state"":null,""country"":""United Arab Emirates"",""countryId"":""ae"",""regionId"":""middle-east-africa"",""postalCode"":""000000"",""isHeadquarter"":false}],""industries"":[""Automotive"",""B2B High Tech"",""Consumer Packaged Goods"",""Education"",""Financial Services / Insurance"",""Government / Public Sector"",""Healthcare & Life Sciences"",""Manufacturing & Distribution"",""Media, Entertainment & Telecom"",""Other (HR / IT / Legal / etc.)"",""Retail"",""Travel & Hospitality""],""services"":[{""id"":""28d9191d-203c-11ed-b02c-0e9068926235"",""name"":""Application Development"",""website"":null,""description"":""Magento-based e-commerce solutions design and development to maintenance and support. We have the best fit service offerings for the existing or new e-commerce needs of your business!""},{""id"":""28d9197a-203c-11ed-b02c-0e9068926235"",""name"":""Application Hosting"",""website"":null,""description"":""Helps in deploying the application on a suitable server and ensures support.""},{""id"":""28d919d5-203c-11ed-b02c-0e9068926235"",""name"":""Creative Design / Media Optimization"",""website"":null,""description"":""Create stunning yet relatable customer experiences which ensure that the end result is coherent with the brand identity and positioning.""},{""id"":""28d91a3e-203c-11ed-b02c-0e9068926235"",""name"":""eCommerce Solutions / Platform"",""website"":null,""description"":""We create robust Magento-based storefronts for businesses, allowing them to take the market by a storm!""},{""id"":""28d91a9c-203c-11ed-b02c-0e9068926235"",""name"":""Mobile Strategy / Platform"",""website"":null,""description"":""Customers seek unique, exceptionally functional and simple to navigate mobile solutions and we help businesses to deliver their customers an engaging mobile experience.""},{""id"":""28d91af8-203c-11ed-b02c-0e9068926235"",""name"":""Personalization"",""website"":null,""description"":""Creating an experience that keeps the customers bound on your e-commerce site.""},{""id"":""28d91b55-203c-11ed-b02c-0e9068926235"",""name"":""Search Marketing & Optimization"",""website"":null,""description"":""Helps the customer in improving the business outcomes through the desired optimization.""},{""id"":""28d91bb2-203c-11ed-b02c-0e9068926235"",""name"":""Web Experience Design & Management"",""website"":null,""description"":""We believe that the web storefront is the soul of a business! This is why we dedicate a major part of our designing strategy to thorough research and data implementation to produce a truly user-centric experience.""}],""resources"":{""Video"":[{""id"":""19e697a0-203c-11ed-b02c-0e9068926235"",""name"":""Zwende and Codilar - Client Success Story"",""link"":""https://www.youtube.com/watch?v=vTW90FvLQq4"",""type"":""Video"",""description"":""Innu Nevatia is a co-founder of Zwende (https://www.zwende.com) which is an online platform that enables real-time customization and personalization of hand-crafted products.\\n\\nWe provided potential Magento solutions to Zwende that perfectly matched their requirements.\\n\\nHere are a few lines from Innu Nevatia:\\n\\n“I would absolutely recommend Codilar to anybody who is looking at a Magento focused solution. I think Codilar is one of the best partners to work with.“\\n\\n\\nWe at Codilar Technologies..."",""crmRecordId"":null,""year"":null,""directoryId"":""ed5ba03a-203b-11ed-b02c-0e9068926235""},{""id"":""19e69816-203c-11ed-b02c-0e9068926235"",""name"":""Campus Sutra and Codilar - Client Success Story"",""link"":""https://www.youtube.com/watch?v=HXzEYJj_Es0"",""type"":""Video"",""description"":""Aditya Agarwal is a co-founder of Campus Sutra which is an online merchandise company. It is a 6-year old company that made 1.6 crore in the first year and is expected to make 160 crores this year.\\n\\nCodilar has been the technology partner for Campus Sutra from the early days of the company.\\n\\nWe have been powering Campus Sutra's Magento platform from their early days, helping them scale from 5 orders to 1000 orders per day.\\n\\nHere are a few lines from Aditya Agarwal:\\n\\n“I remember one incident..."",""crmRecordId"":null,""year"":null,""directoryId"":""ed5ba03a-203b-11ed-b02c-0e9068926235""},{""id"":""19e69882-203c-11ed-b02c-0e9068926235"",""name"":""Kalyan Jewellers (Candere) and Codilar - Client Success Story"",""link"":""https://www.youtube.com/watch?v=45dtD6kKV_U"",""type"":""Video"",""description"":""Rupesh Jain, CEO of Candere by Kalyan Jewellers, explains the challenges they faced in scaling up their technology stack and how Codilar became their trusted partner."",""crmRecordId"":null,""year"":null,""directoryId"":""ed5ba03a-203b-11ed-b02c-0e9068926235""}]},""accreditedSolutions"":[],""expertise"":[{""name"":""Analytics"",""totalCertifications"":1,""globalSpecialization"":false,""regions"":[{""name"":""APAC"",""specialized"":false,""roles"":[{""name"":""Sales - Professional"",""certifiedEmployees"":1}]}]},{""name"":""Audience Manager"",""totalCertifications"":1,""globalSpecialization"":false,""regions"":[{""name"":""APAC"",""specialized"":false,""roles"":[{""name"":""Sales - Professional"",""certifiedEmployees"":1}]}]},{""name"":""Commerce"",""totalCertifications"":26,""globalSpecialization"":false,""regions"":[{""name"":""APAC"",""specialized"":false,""roles"":[{""name"":""Business Practitioner - Expert"",""certifiedEmployees"":1},{""name"":""Business Practitioner - Professional"",""certifiedEmployees"":1},{""name"":""Developer - Expert"",""certifiedEmployees"":4},{""name"":""Developer - Professional"",""certifiedEmployees"":19},{""name"":""Sales - Professional"",""certifiedEmployees"":1}]}]},{""name"":""Customer Journey Analytics"",""totalCertifications"":1,""globalSpecialization"":false,""regions"":[{""name"":""APAC"",""specialized"":false,""roles"":[{""name"":""Sales - Professional"",""certifiedEmployees"":1}]}]},{""name"":""Experience Manager - Assets"",""totalCertifications"":1,""globalSpecialization"":false,""regions"":[{""name"":""APAC"",""specialized"":false,""roles"":[{""name"":""Sales - Professional"",""certifiedEmployees"":1}]}]},{""name"":""Experience Manager - Sites"",""totalCertifications"":4,""globalSpecialization"":false,""regions"":[{""name"":""APAC"",""specialized"":false,""roles"":[{""name"":""Business Practitioner - Professional"",""certifiedEmployees"":1},{""name"":""Developer - Professional"",""certifiedEmployees"":1},{""name"":""Front-End Developer - Professional"",""certifiedEmployees"":1},{""name"":""Sales - Professional"",""certifiedEmployees"":1}]}]},{""name"":""Experience Platform"",""totalCertifications"":1,""globalSpecialization"":false,""regions"":[{""name"":""APAC"",""specialized"":false,""roles"":[{""name"":""Sales - Professional"",""certifiedEmployees"":1}]}]},{""name"":""Journey Optimizer"",""totalCertifications"":1,""globalSpecialization"":false,""regions"":[{""name"":""APAC"",""specialized"":false,""roles"":[{""name"":""Sales - Professional"",""certifiedEmployees"":1}]}]},{""name"":""Real-Time CDP"",""totalCertifications"":2,""globalSpecialization"":false,""regions"":[{""name"":""APAC"",""specialized"":false,""roles"":[{""name"":""Sales - Professional"",""certifiedEmployees"":2}]}]},{""name"":""Target"",""totalCertifications"":1,""globalSpecialization"":false,""regions"":[{""name"":""APAC"",""specialized"":false,""roles"":[{""name"":""Sales - Professional"",""certifiedEmployees"":1}]}]},{""name"":""Workfront"",""totalCertifications"":1,""globalSpecialization"":false,""regions"":[{""name"":""APAC"",""specialized"":false,""roles"":[{""name"":""Developer - Professional"",""certifiedEmployees"":1}]}]}],""deployments"":{},""totalCustomerDeploymentCount"":0}"
y8M0YGz6,Counter,iamareverie,JavaScript,Wednesday 1st of November 2023 12:31:49 PM CDT,"<script>
    import Vue from 'vue';
    import VueToast from 'vue-toast-notification';
    import 'vue-toast-notification/dist/theme-sugar.css';
    
    Vue.use(VueToast);
    let userInput, checkHashTag, result;
    
    export default {
        data() {
            return {
                form_input: '',
                caption_length: 0,
                caption_truncation: 0,
                hash_tag: 0,
            }
        },
        methods: {
            zconvert: function(event) {
                this.checkText();
            },
            checkText: function(event) {
                userInput = this.form_input;
                // console.log(userInput.split(""\u2028""));
                let charLength = userInput.length;
                
                this.caption_length = charLength;
                this.caption_truncation = charLength;

                checkHashTag = checkHashtag(userInput);
                this.hash_tag = checkHashTag;

                result = insertInvisibleSpace(userInput);
                this.form_input = result;
            },
            clear_text: function(event) {
                this.form_input = '';
                this.caption_length = 0;
                this.caption_truncation = 0;
                this.hash_tag = 0;
            },
            copy_text: function(event) {
                if(this.form_input != '') {
                    const element = this.$refs.form_input;
                    element.select();
                    element.setSelectionRange(0, 99999);
                    document.execCommand('copy');
                    Vue.$toast.open({
                        message: 'Text has been copied to clipboard.',
                        type: 'success',
                        position: 'bottom-right',
                        dismissible: true,
                    });
                }
                else {
                    Vue.$toast.open({
                        message: 'No text available.',
                        type: 'warning',
                        position: 'bottom-right',
                        dismissible: true,
                    });
                }
            },
        },
    }
    
    function insertInvisibleSpace(form_input) {
        while(form_input.indexOf(""\n\n"") != -1) {
            // form_input = form_input.replace(""\n\n"", ""\nã…¤\n"");
            // form_input = form_input.replace(""\n\n"", ""\n \n"");
            form_input = form_input.replace(""\n\n"", ""⠀\n"");
            // form_input = form_input.replace(""\n\n"", ""â£"");
            // form_input = form_input.replace(""/\u2800/g"","""").replace(""/\n/g"", ""⠀\n"");
            // form_input = form_input.split(""\u2028"").join(""\n"");
            // form_input = form_input.replace(/\n/g,' ');
        }
        return form_input;
    }

    function checkHashtag(form_input) {
        let string = form_input; 
        let result = string.match(/#/g);
        
        if (result === null){
            return ""0"";
        }
        return result.length;
    }
</script>"
0mkP8PAy,Nigerian scammers [1-11-2/2023],bombaires,AIMMS,Wednesday 1st of November 2023 12:23:11 PM CDT,"<a href=""mailto:marj.1rte.es@gmail.com"">marj.1rte.es@gmail.com</a>
<a href=""mailto:marj..1.rte..e.s@gmail.com"">marj..1.rte..e.s@gmail.com</a>
<a href=""mailto:marj...1.rte.e.s@gmail.com"">marj...1.rte.e.s@gmail.com</a>
<a href=""mailto:m.a.r.j...1rt.e..e.s@gmail.com"">m.a.r.j...1rt.e..e.s@gmail.com</a>
<a href=""mailto:m.a.r.j.1.rt.e..es@gmail.com"">m.a.r.j.1.rt.e..es@gmail.com</a>
<a href=""mailto:m.ar.j.1.rt.e..es@gmail.com"">m.ar.j.1.rt.e..es@gmail.com</a>
<a href=""mailto:m.ar.j.1rte..e.s@gmail.com"">m.ar.j.1rte..e.s@gmail.com</a>
<a href=""mailto:marj..1.rte...es@gmail.com"">marj..1.rte...es@gmail.com</a>
<a href=""mailto:m.ar.j...1.r.te.es@gmail.com"">m.ar.j...1.r.te.es@gmail.com</a>
<a href=""mailto:mar.j...1r.te..e.s@gmail.com"">mar.j...1r.te..e.s@gmail.com</a>
<a href=""mailto:m.arj..1rt.e..e.s@gmail.com"">m.arj..1rt.e..e.s@gmail.com</a>
<a href=""mailto:m.ar.j.1rt.e.es@gmail.com"">m.ar.j.1rt.e.es@gmail.com</a>
<a href=""mailto:mar.j..1.r.te.e.s@gmail.com"">mar.j..1.r.te.e.s@gmail.com</a>
<a href=""mailto:ma.rj..1.r.t.e..e.s@gmail.com"">ma.rj..1.r.t.e..e.s@gmail.com</a>
<a href=""mailto:ma.rj..1.rt.e..e.s@gmail.com"">ma.rj..1.rt.e..e.s@gmail.com</a>
<a href=""mailto:marj...1.r.te.es@gmail.com"">marj...1.r.te.es@gmail.com</a>
<a href=""mailto:m.a.r.j.1r.te...es@gmail.com"">m.a.r.j.1r.te...es@gmail.com</a>
<a href=""mailto:m.arj..1rt.e..es@gmail.com"">m.arj..1rt.e..es@gmail.com</a>
<a href=""mailto:marj..1rt.e...es@gmail.com"">marj..1rt.e...es@gmail.com</a>
<a href=""mailto:mar.j..1r.te.es@gmail.com"">mar.j..1r.te.es@gmail.com</a>
<a href=""mailto:m.ar.j..1.r.te...e.s@gmail.com"">m.ar.j..1.r.te...e.s@gmail.com</a>
<a href=""mailto:marj..1.r.te..e.s@gmail.com"">marj..1.r.te..e.s@gmail.com</a>
<a href=""mailto:m.a.r.j...1.r.te..e.s@gmail.com"">m.a.r.j...1.r.te..e.s@gmail.com</a>
<a href=""mailto:mar.j.1r.t.e..e.s@gmail.com"">mar.j.1r.t.e..e.s@gmail.com</a>
<a href=""mailto:ma.rj..1.r.te...es@gmail.com"">ma.rj..1.r.te...es@gmail.com</a>
<a href=""mailto:ma.r.j.1r.t.e..e.s@gmail.com"">ma.r.j.1r.t.e..e.s@gmail.com</a>
<a href=""mailto:marj..1r.te..es@gmail.com"">marj..1r.te..es@gmail.com</a>
<a href=""mailto:m.ar.j...1rt.e.e.s@gmail.com"">m.ar.j...1rt.e.e.s@gmail.com</a>
<a href=""mailto:m.ar.j.1rte...e.s@gmail.com"">m.ar.j.1rte...e.s@gmail.com</a>
<a href=""mailto:m.a.rj.1.r.te...e.s@gmail.com"">m.a.rj.1.r.te...e.s@gmail.com</a>
<a href=""mailto:ma.rj.1.r.te...es@gmail.com"">ma.rj.1.r.te...es@gmail.com</a>
<a href=""mailto:m.a.rj...1.rt.e...e.s@gmail.com"">m.a.rj...1.rt.e...e.s@gmail.com</a>
<a href=""mailto:mar.j..1rte..e.s@gmail.com"">mar.j..1rte..e.s@gmail.com</a>
<a href=""mailto:m.arj...1.r.t.e.es@gmail.com"">m.arj...1.r.t.e.es@gmail.com</a>
<a href=""mailto:mar.j..1.rte..es@gmail.com"">mar.j..1.rte..es@gmail.com</a>
<a href=""mailto:mar.j.1r.t.e.es@gmail.com"">mar.j.1r.t.e.es@gmail.com</a>
<a href=""mailto:m.ar.j...1.rt.e.e.s@gmail.com"">m.ar.j...1.rt.e.e.s@gmail.com</a>
<a href=""mailto:m.ar.j..1rt.e..es@gmail.com"">m.ar.j..1rt.e..es@gmail.com</a>
<a href=""mailto:ma.r.j.1rte..es@gmail.com"">ma.r.j.1rte..es@gmail.com</a>
<a href=""mailto:m.a.rj.1.rt.e..es@gmail.com"">m.a.rj.1.rt.e..es@gmail.com</a>
<a href=""mailto:m.arj..1rt.e..e.s@gmail.com"">m.arj..1rt.e..e.s@gmail.com</a>
<a href=""mailto:mar.j..1r.te.es@gmail.com"">mar.j..1r.te.es@gmail.com</a>
<a href=""mailto:ma.r.j..1r.te..e.s@gmail.com"">ma.r.j..1r.te..e.s@gmail.com</a>
<a href=""mailto:m.a.r.j.1rt.e.es@gmail.com"">m.a.r.j.1rt.e.es@gmail.com</a>
<a href=""mailto:ma.rj..1r.t.e...es@gmail.com"">ma.rj..1r.t.e...es@gmail.com</a>
<a href=""mailto:m.arj...1r.t.e...e.s@gmail.com"">m.arj...1r.t.e...e.s@gmail.com</a>
<a href=""mailto:mar.j.1.rt.e...es@gmail.com"">mar.j.1.rt.e...es@gmail.com</a>
<a href=""mailto:marj...1.r.te.e.s@gmail.com"">marj...1.r.te.e.s@gmail.com</a>
<a href=""mailto:m.a.r.j...1.rte.es@gmail.com"">m.a.r.j...1.rte.es@gmail.com</a>
<a href=""mailto:marj..1.rt.e.e.s@gmail.com"">marj..1.rt.e.e.s@gmail.com</a>
<a href=""mailto:m.ar.j..1rte.e.s@gmail.com"">m.ar.j..1rte.e.s@gmail.com</a>
<a href=""mailto:m.ar.j..1.r.t.e...e.s@gmail.com"">m.ar.j..1.r.t.e...e.s@gmail.com</a>
<a href=""mailto:m.a.rj..1rte.es@gmail.com"">m.a.rj..1rte.es@gmail.com</a>
<a href=""mailto:m.a.rj.1r.te..es@gmail.com"">m.a.rj.1r.te..es@gmail.com</a>
<a href=""mailto:marj..1r.t.e...e.s@gmail.com"">marj..1r.t.e...e.s@gmail.com</a>
<a href=""mailto:marj..1.rte...es@gmail.com"">marj..1.rte...es@gmail.com</a>
<a href=""mailto:ma.rj.1.r.t.e..e.s@gmail.com"">ma.rj.1.r.t.e..e.s@gmail.com</a>
<a href=""mailto:mar.j..1.r.t.e..es@gmail.com"">mar.j..1.r.t.e..es@gmail.com</a>
<a href=""mailto:m.a.r.j...1.r.te...es@gmail.com"">m.a.r.j...1.r.te...es@gmail.com</a>
<a href=""mailto:ma.rj..1rte..es@gmail.com"">ma.rj..1rte..es@gmail.com</a>
<a href=""mailto:ma.rj...1.r.te..e.s@gmail.com"">ma.rj...1.r.te..e.s@gmail.com</a>
<a href=""mailto:m.arj.1.r.te.e.s@gmail.com"">m.arj.1.r.te.e.s@gmail.com</a>
<a href=""mailto:marj..1.r.t.e...e.s@gmail.com"">marj..1.r.t.e...e.s@gmail.com</a>
<a href=""mailto:m.a.r.j.1rte.e.s@gmail.com"">m.a.r.j.1rte.e.s@gmail.com</a>
<a href=""mailto:mar.j.1.rte..es@gmail.com"">mar.j.1.rte..es@gmail.com</a>
<a href=""mailto:m.ar.j...1rt.e..es@gmail.com"">m.ar.j...1rt.e..es@gmail.com</a>
<a href=""mailto:m.a.rj.1.r.t.e.es@gmail.com"">m.a.rj.1.r.t.e.es@gmail.com</a>
<a href=""mailto:ma.r.j..1rte..e.s@gmail.com"">ma.r.j..1rte..e.s@gmail.com</a>
<a href=""mailto:m.a.rj.1.r.t.e...e.s@gmail.com"">m.a.rj.1.r.t.e...e.s@gmail.com</a>
<a href=""mailto:mar.j...1.rt.e.es@gmail.com"">mar.j...1.rt.e.es@gmail.com</a>
<a href=""mailto:m.ar.j.1.r.te.es@gmail.com"">m.ar.j.1.r.te.es@gmail.com</a>
<a href=""mailto:marj...1r.t.e...e.s@gmail.com"">marj...1r.t.e...e.s@gmail.com</a>
<a href=""mailto:m.a.rj.1rt.e...es@gmail.com"">m.a.rj.1rt.e...es@gmail.com</a>
<a href=""mailto:m.a.rj..1.r.te..es@gmail.com"">m.a.rj..1.r.te..es@gmail.com</a>
<a href=""mailto:m.a.r.j..1.rt.e..e.s@gmail.com"">m.a.r.j..1.rt.e..e.s@gmail.com</a>
<a href=""mailto:m.ar.j.1r.te..es@gmail.com"">m.ar.j.1r.te..es@gmail.com</a>
<a href=""mailto:m.a.rj.1.r.te..es@gmail.com"">m.a.rj.1.r.te..es@gmail.com</a>
<a href=""mailto:ma.r.j.1.r.te...es@gmail.com"">ma.r.j.1.r.te...es@gmail.com</a>
<a href=""mailto:m.ar.j..1r.t.e...es@gmail.com"">m.ar.j..1r.t.e...es@gmail.com</a>
<a href=""mailto:ma.rj...1r.te..es@gmail.com"">ma.rj...1r.te..es@gmail.com</a>
<a href=""mailto:mar.j.1.rte...es@gmail.com"">mar.j.1.rte...es@gmail.com</a>
<a href=""mailto:m.arj...1rt.e..e.s@gmail.com"">m.arj...1rt.e..e.s@gmail.com</a>
<a href=""mailto:m.ar.j..1r.t.e..es@gmail.com"">m.ar.j..1r.t.e..es@gmail.com</a>
<a href=""mailto:marj...1r.te.e.s@gmail.com"">marj...1r.te.e.s@gmail.com</a>
<a href=""mailto:marj.1r.t.e.e.s@gmail.com"">marj.1r.t.e.e.s@gmail.com</a>
<a href=""mailto:marj...1.rt.e..es@gmail.com"">marj...1.rt.e..es@gmail.com</a>
<a href=""mailto:m.ar.j.1.rt.e..e.s@gmail.com"">m.ar.j.1.rt.e..e.s@gmail.com</a>
<a href=""mailto:ma.r.j...1.rte..e.s@gmail.com"">ma.r.j...1.rte..e.s@gmail.com</a>
<a href=""mailto:m.ar.j..1r.te.e.s@gmail.com"">m.ar.j..1r.te.e.s@gmail.com</a>
<a href=""mailto:m.arj..1r.t.e..e.s@gmail.com"">m.arj..1r.t.e..e.s@gmail.com</a>
<a href=""mailto:m.a.r.j..1.r.te...e.s@gmail.com"">m.a.r.j..1.r.te...e.s@gmail.com</a>
<a href=""mailto:mar.j..1.r.te...es@gmail.com"">mar.j..1.r.te...es@gmail.com</a>
<a href=""mailto:m.arj.1r.te..e.s@gmail.com"">m.arj.1r.te..e.s@gmail.com</a>
<a href=""mailto:marj...1rte.es@gmail.com"">marj...1rte.es@gmail.com</a>
<a href=""mailto:ma.rj...1.r.te.es@gmail.com"">ma.rj...1.r.te.es@gmail.com</a>
<a href=""mailto:marj..1.r.t.e..e.s@gmail.com"">marj..1.r.t.e..e.s@gmail.com</a>
<a href=""mailto:m.arj...1r.t.e..es@gmail.com"">m.arj...1r.t.e..es@gmail.com</a>
<a href=""mailto:ma.r.j...1r.te...e.s@gmail.com"">ma.r.j...1r.te...e.s@gmail.com</a>
<a href=""mailto:marj..1r.t.e..e.s@gmail.com"">marj..1r.t.e..e.s@gmail.com</a>
<a href=""mailto:m.arj.1rte.es@gmail.com"">m.arj.1rte.es@gmail.com</a>
<a href=""mailto:mar.j..1.r.te...e.s@gmail.com"">mar.j..1.r.te...e.s@gmail.com</a>
<a href=""mailto:m.a.rj..1.r.t.e..es@gmail.com"">m.a.rj..1.r.t.e..es@gmail.com</a>
<a href=""mailto:m.a.r.j.1.rt.e..e.s@gmail.com"">m.a.r.j.1.rt.e..e.s@gmail.com</a>
<a href=""mailto:ma.r.j.1rt.e...es@gmail.com"">ma.r.j.1rt.e...es@gmail.com</a>
<a href=""mailto:m.ar.j..1r.te.es@gmail.com"">m.ar.j..1r.te.es@gmail.com</a>
<a href=""mailto:marj..1r.t.e..e.s@gmail.com"">marj..1r.t.e..e.s@gmail.com</a>
<a href=""mailto:m.a.r.j...1r.t.e..es@gmail.com"">m.a.r.j...1r.t.e..es@gmail.com</a>
<a href=""mailto:mar.j..1r.t.e..e.s@gmail.com"">mar.j..1r.t.e..e.s@gmail.com</a>
<a href=""mailto:ma.r.j..1.rte..e.s@gmail.com"">ma.r.j..1.rte..e.s@gmail.com</a>
<a href=""mailto:m.arj..1.r.t.e..es@gmail.com"">m.arj..1.r.t.e..es@gmail.com</a>
<a href=""mailto:marj..1.rt.e...es@gmail.com"">marj..1.rt.e...es@gmail.com</a>
<a href=""mailto:ma.r.j..1.rt.e..e.s@gmail.com"">ma.r.j..1.rt.e..e.s@gmail.com</a>
<a href=""mailto:m.a.r.j.1r.t.e...es@gmail.com"">m.a.r.j.1r.t.e...es@gmail.com</a>
<a href=""mailto:marj..1r.te...e.s@gmail.com"">marj..1r.te...e.s@gmail.com</a>
<a href=""mailto:ma.r.j..1rt.e.es@gmail.com"">ma.r.j..1rt.e.es@gmail.com</a>
<a href=""mailto:m.a.r.j...1.r.t.e..e.s@gmail.com"">m.a.r.j...1.r.t.e..e.s@gmail.com</a>
<a href=""mailto:m.arj.1.rte...e.s@gmail.com"">m.arj.1.rte...e.s@gmail.com</a>
<a href=""mailto:m.arj...1.r.t.e...es@gmail.com"">m.arj...1.r.t.e...es@gmail.com</a>
<a href=""mailto:mar.j..1.r.t.e.e.s@gmail.com"">mar.j..1.r.t.e.e.s@gmail.com</a>
<a href=""mailto:m.a.r.j..1rt.e...e.s@gmail.com"">m.a.r.j..1rt.e...e.s@gmail.com</a>
<a href=""mailto:m.a.r.j..1.r.te..e.s@gmail.com"">m.a.r.j..1.r.te..e.s@gmail.com</a>
<a href=""mailto:mar.j..1.r.te..e.s@gmail.com"">mar.j..1.r.te..e.s@gmail.com</a>
<a href=""mailto:ma.rj...1rte.e.s@gmail.com"">ma.rj...1rte.e.s@gmail.com</a>
<a href=""mailto:ma.r.j...1.r.t.e...e.s@gmail.com"">ma.r.j...1.r.t.e...e.s@gmail.com</a>
<a href=""mailto:m.a.rj...1.rte...e.s@gmail.com"">m.a.rj...1.rte...e.s@gmail.com</a>
<a href=""mailto:ma.r.j.1.r.t.e..e.s@gmail.com"">ma.r.j.1.r.t.e..e.s@gmail.com</a>
<a href=""mailto:ma.rj..1rt.e.es@gmail.com"">ma.rj..1rt.e.es@gmail.com</a>
<a href=""mailto:ma.rj..1.r.t.e..es@gmail.com"">ma.rj..1.r.t.e..es@gmail.com</a>
<a href=""mailto:m.a.rj..1.rt.e.e.s@gmail.com"">m.a.rj..1.rt.e.e.s@gmail.com</a>
<a href=""mailto:ma.r.j...1.r.t.e..es@gmail.com"">ma.r.j...1.r.t.e..es@gmail.com</a>
<a href=""mailto:m.a.r.j..1.rte..es@gmail.com"">m.a.r.j..1.rte..es@gmail.com</a>
<a href=""mailto:mar.j..1rte.e.s@gmail.com"">mar.j..1rte.e.s@gmail.com</a>
<a href=""mailto:m.a.rj..1.r.te..e.s@gmail.com"">m.a.rj..1.r.te..e.s@gmail.com</a>
<a href=""mailto:m.a.rj..1.r.t.e..e.s@gmail.com"">m.a.rj..1.r.t.e..e.s@gmail.com</a>
<a href=""mailto:m.ar.j...1.r.t.e..e.s@gmail.com"">m.ar.j...1.r.t.e..e.s@gmail.com</a>
<a href=""mailto:ma.rj...1r.te..es@gmail.com"">ma.rj...1r.te..es@gmail.com</a>
<a href=""mailto:m.arj.1r.t.e...es@gmail.com"">m.arj.1r.t.e...es@gmail.com</a>
<a href=""mailto:m.a.rj.1.rt.e...es@gmail.com"">m.a.rj.1.rt.e...es@gmail.com</a>
<a href=""mailto:m.a.rj...1rt.e..es@gmail.com"">m.a.rj...1rt.e..es@gmail.com</a>
<a href=""mailto:m.a.r.j..1.r.t.e.es@gmail.com"">m.a.r.j..1.r.t.e.es@gmail.com</a>
<a href=""mailto:mar.j.1.r.t.e..es@gmail.com"">mar.j.1.r.t.e..es@gmail.com</a>
<a href=""mailto:m.ar.j...1.r.te...e.s@gmail.com"">m.ar.j...1.r.te...e.s@gmail.com</a>
<a href=""mailto:ma.r.j.1.rt.e.es@gmail.com"">ma.r.j.1.rt.e.es@gmail.com</a>
<a href=""mailto:marj..1r.t.e..es@gmail.com"">marj..1r.t.e..es@gmail.com</a>
<a href=""mailto:m.ar.j..1.rt.e.es@gmail.com"">m.ar.j..1.rt.e.es@gmail.com</a>
<a href=""mailto:ma.r.j..1.r.te..es@gmail.com"">ma.r.j..1.r.te..es@gmail.com</a>
<a href=""mailto:m.ar.j..1rte.es@gmail.com"">m.ar.j..1rte.es@gmail.com</a>
<a href=""mailto:ma.rj..1r.te..es@gmail.com"">ma.rj..1r.te..es@gmail.com</a>
<a href=""mailto:m.arj..1.r.te..es@gmail.com"">m.arj..1.r.te..es@gmail.com</a>
<a href=""mailto:ma.r.j..1.rt.e.es@gmail.com"">ma.r.j..1.rt.e.es@gmail.com</a>
<a href=""mailto:m.ar.j..1r.te..e.s@gmail.com"">m.ar.j..1r.te..e.s@gmail.com</a>
<a href=""mailto:m.a.rj..1.rt.e...e.s@gmail.com"">m.a.rj..1.rt.e...e.s@gmail.com</a>
<a href=""mailto:ma.rj..1rte.e.s@gmail.com"">ma.rj..1rte.e.s@gmail.com</a>
<a href=""mailto:ma.rj...1.rt.e.e.s@gmail.com"">ma.rj...1.rt.e.e.s@gmail.com</a>
<a href=""mailto:ma.r.j..1r.t.e...es@gmail.com"">ma.r.j..1r.t.e...es@gmail.com</a>
<a href=""mailto:m.a.r.j.1rt.e..e.s@gmail.com"">m.a.r.j.1rt.e..e.s@gmail.com</a>
<a href=""mailto:ma.r.j..1.r.t.e.e.s@gmail.com"">ma.r.j..1.r.t.e.e.s@gmail.com</a>
<a href=""mailto:ma.r.j..1.r.t.e..es@gmail.com"">ma.r.j..1.r.t.e..es@gmail.com</a>
<a href=""mailto:ma.r.j...1rt.e...es@gmail.com"">ma.r.j...1rt.e...es@gmail.com</a>
<a href=""mailto:m.a.r.j...1rt.e..es@gmail.com"">m.a.r.j...1rt.e..es@gmail.com</a>
<a href=""mailto:m.ar.j..1.r.te..es@gmail.com"">m.ar.j..1.r.te..es@gmail.com</a>
<a href=""mailto:m.arj..1r.te..es@gmail.com"">m.arj..1r.te..es@gmail.com</a>
<a href=""mailto:ma.rj...1r.t.e.es@gmail.com"">ma.rj...1r.t.e.es@gmail.com</a>
<a href=""mailto:mar.j..1.r.te..e.s@gmail.com"">mar.j..1.r.te..e.s@gmail.com</a>
<a href=""mailto:ma.rj...1r.t.e...e.s@gmail.com"">ma.rj...1r.t.e...e.s@gmail.com</a>
<a href=""mailto:m.arj..1.r.te...es@gmail.com"">m.arj..1.r.te...es@gmail.com</a>
<a href=""mailto:ma.r.j..1.rt.e...e.s@gmail.com"">ma.r.j..1.rt.e...e.s@gmail.com</a>
<a href=""mailto:m.a.r.j.1rte..e.s@gmail.com"">m.a.r.j.1rte..e.s@gmail.com</a>
<a href=""mailto:m.a.r.j..1rt.e..es@gmail.com"">m.a.r.j..1rt.e..es@gmail.com</a>
<a href=""mailto:marj..1.r.t.e..es@gmail.com"">marj..1.r.t.e..es@gmail.com</a>
<a href=""mailto:m.arj..1.rte...es@gmail.com"">m.arj..1.rte...es@gmail.com</a>
<a href=""mailto:m.ar.j..1.rte..es@gmail.com"">m.ar.j..1.rte..es@gmail.com</a>
<a href=""mailto:m.ar.j..1.rt.e.es@gmail.com"">m.ar.j..1.rt.e.es@gmail.com</a>
<a href=""mailto:m.arj..1.r.t.e.e.s@gmail.com"">m.arj..1.r.t.e.e.s@gmail.com</a>
<a href=""mailto:m.a.rj..1.r.te..es@gmail.com"">m.a.rj..1.r.te..es@gmail.com</a>
<a href=""mailto:m.ar.j..1.r.te...es@gmail.com"">m.ar.j..1.r.te...es@gmail.com</a>
<a href=""mailto:m.arj..1rte..es@gmail.com"">m.arj..1rte..es@gmail.com</a>
<a href=""mailto:mar.j..1r.t.e..es@gmail.com"">mar.j..1r.t.e..es@gmail.com</a>
<a href=""mailto:m.ar.j.1r.t.e...es@gmail.com"">m.ar.j.1r.t.e...es@gmail.com</a>
<a href=""mailto:m.arj..1.rt.e..es@gmail.com"">m.arj..1.rt.e..es@gmail.com</a>
<a href=""mailto:m.a.r.j..1.r.te..es@gmail.com"">m.a.r.j..1.r.te..es@gmail.com</a>
<a href=""mailto:m.a.r.j.1rt.e...e.s@gmail.com"">m.a.r.j.1rt.e...e.s@gmail.com</a>
<a href=""mailto:m.a.rj..1.r.t.e..es@gmail.com"">m.a.rj..1.r.t.e..es@gmail.com</a>
<a href=""mailto:m.arj...1r.te.es@gmail.com"">m.arj...1r.te.es@gmail.com</a>
<a href=""mailto:m.arj.1.rt.e..e.s@gmail.com"">m.arj.1.rt.e..e.s@gmail.com</a>
<a href=""mailto:marj..1rte.e.s@gmail.com"">marj..1rte.e.s@gmail.com</a>
<a href=""mailto:ma.r.j...1.r.t.e.es@gmail.com"">ma.r.j...1.r.t.e.es@gmail.com</a>
<a href=""mailto:m.a.rj.1r.t.e..es@gmail.com"">m.a.rj.1r.t.e..es@gmail.com</a>
<a href=""mailto:marj.1r.t.e..es@gmail.com"">marj.1r.t.e..es@gmail.com</a>
<a href=""mailto:m.arj..1rte.es@gmail.com"">m.arj..1rte.es@gmail.com</a>
<a href=""mailto:mar.j..1.r.t.e..e.s@gmail.com"">mar.j..1.r.t.e..e.s@gmail.com</a>
<a href=""mailto:m.ar.j..1.r.t.e..e.s@gmail.com"">m.ar.j..1.r.t.e..e.s@gmail.com</a>
<a href=""mailto:m.arj..1.rt.e..es@gmail.com"">m.arj..1.rt.e..es@gmail.com</a>
<a href=""mailto:m.arj..1r.te...e.s@gmail.com"">m.arj..1r.te...e.s@gmail.com</a>
<a href=""mailto:ma.rj.1rte..es@gmail.com"">ma.rj.1rte..es@gmail.com</a>
<a href=""mailto:m.arj.1rt.e..e.s@gmail.com"">m.arj.1rt.e..e.s@gmail.com</a>
<a href=""mailto:ma.r.j..1.r.t.e..es@gmail.com"">ma.r.j..1.r.t.e..es@gmail.com</a>
<a href=""mailto:mar.j..1.rte...es@gmail.com"">mar.j..1.rte...es@gmail.com</a>
<a href=""mailto:m.ar.j...1.r.te.e.s@gmail.com"">m.ar.j...1.r.te.e.s@gmail.com</a>
<a href=""mailto:ma.rj...1r.te.es@gmail.com"">ma.rj...1r.te.es@gmail.com</a>
<a href=""mailto:m.arj..1r.te.e.s@gmail.com"">m.arj..1r.te.e.s@gmail.com</a>
<a href=""mailto:dhlc283@gmail.com"">dhlc283@gmail.com</a>
<a href=""mailto:dh.lc.2.8.3@gmail.com"">dh.lc.2.8.3@gmail.com</a>
<a href=""mailto:d.hl.c2.83@gmail.com"">d.hl.c2.83@gmail.com</a>
<a href=""mailto:dhl.c.2.83@gmail.com"">dhl.c.2.83@gmail.com</a>
<a href=""mailto:dhlc.283@gmail.com"">dhlc.283@gmail.com</a>
<a href=""mailto:dhl.c.28.3@gmail.com"">dhl.c.28.3@gmail.com</a>
<a href=""mailto:d.h.l.c283@gmail.com"">d.h.l.c283@gmail.com</a>
<a href=""mailto:d.h.l.c28.3@gmail.com"">d.h.l.c28.3@gmail.com</a>
<a href=""mailto:d.h.lc.2.83@gmail.com"">d.h.lc.2.83@gmail.com</a>
<a href=""mailto:dh.lc2.83@gmail.com"">dh.lc2.83@gmail.com</a>
<a href=""mailto:d.h.l.c2.8.3@gmail.com"">d.h.l.c2.8.3@gmail.com</a>
<a href=""mailto:dhl.c.2.8.3@gmail.com"">dhl.c.2.8.3@gmail.com</a>
<a href=""mailto:dhlc.28.3@gmail.com"">dhlc.28.3@gmail.com</a>
<a href=""mailto:d.hl.c283@gmail.com"">d.hl.c283@gmail.com</a>
<a href=""mailto:d.h.l.c.283@gmail.com"">d.h.l.c.283@gmail.com</a>
<a href=""mailto:d.hlc28.3@gmail.com"">d.hlc28.3@gmail.com</a>
<a href=""mailto:d.hl.c.283@gmail.com"">d.hl.c.283@gmail.com</a>
<a href=""mailto:dhlc2.83@gmail.com"">dhlc2.83@gmail.com</a>
<a href=""mailto:dh.l.c.2.83@gmail.com"">dh.l.c.2.83@gmail.com</a>
<a href=""mailto:d.hl.c.2.83@gmail.com"">d.hl.c.2.83@gmail.com</a>
<a href=""mailto:dh.l.c.2.8.3@gmail.com"">dh.l.c.2.8.3@gmail.com</a>
<a href=""mailto:dhl.c2.8.3@gmail.com"">dhl.c2.8.3@gmail.com</a>
<a href=""mailto:dhl.c.283@gmail.com"">dhl.c.283@gmail.com</a>
<a href=""mailto:d.h.lc.283@gmail.com"">d.h.lc.283@gmail.com</a>
<a href=""mailto:d.hlc283@gmail.com"">d.hlc283@gmail.com</a>
<a href=""mailto:dhlc28.3@gmail.com"">dhlc28.3@gmail.com</a>
<a href=""mailto:dhlc.2.8.3@gmail.com"">dhlc.2.8.3@gmail.com</a>
<a href=""mailto:d.h.lc.2.8.3@gmail.com"">d.h.lc.2.8.3@gmail.com</a>
<a href=""mailto:dh.lc.28.3@gmail.com"">dh.lc.28.3@gmail.com</a>
<a href=""mailto:dh.lc.283@gmail.com"">dh.lc.283@gmail.com</a>
<a href=""mailto:d.hlc.2.8.3@gmail.com"">d.hlc.2.8.3@gmail.com</a>
<a href=""mailto:dhl.c283@gmail.com"">dhl.c283@gmail.com</a>
<a href=""mailto:dh.l.c2.8.3@gmail.com"">dh.l.c2.8.3@gmail.com</a>
<a href=""mailto:d.hlc2.83@gmail.com"">d.hlc2.83@gmail.com</a>
<a href=""mailto:dhlc283@gmail.com"">dhlc283@gmail.com</a>
<a href=""mailto:d.hlc.2.83@gmail.com"">d.hlc.2.83@gmail.com</a>
<a href=""mailto:d.h.lc28.3@gmail.com"">d.h.lc28.3@gmail.com</a>
<a href=""mailto:dh.lc.2.83@gmail.com"">dh.lc.2.83@gmail.com</a>
<a href=""mailto:dh.l.c2.83@gmail.com"">dh.l.c2.83@gmail.com</a>
<a href=""mailto:d.h.lc2.83@gmail.com"">d.h.lc2.83@gmail.com</a>
<a href=""mailto:d.hl.c.28.3@gmail.com"">d.hl.c.28.3@gmail.com</a>
<a href=""mailto:dh.lc2.8.3@gmail.com"">dh.lc2.8.3@gmail.com</a>
<a href=""mailto:d.hl.c.2.8.3@gmail.com"">d.hl.c.2.8.3@gmail.com</a>
<a href=""mailto:d.hl.c28.3@gmail.com"">d.hl.c28.3@gmail.com</a>
<a href=""mailto:dh.l.c.28.3@gmail.com"">dh.l.c.28.3@gmail.com</a>
<a href=""mailto:dhl.c28.3@gmail.com"">dhl.c28.3@gmail.com</a>
<a href=""mailto:dh.l.c28.3@gmail.com"">dh.l.c28.3@gmail.com</a>
<a href=""mailto:d.h.lc.28.3@gmail.com"">d.h.lc.28.3@gmail.com</a>
<a href=""mailto:d.h.lc2.8.3@gmail.com"">d.h.lc2.8.3@gmail.com</a>
<a href=""mailto:d.hl.c2.8.3@gmail.com"">d.hl.c2.8.3@gmail.com</a>
<a href=""mailto:dhlc2.8.3@gmail.com"">dhlc2.8.3@gmail.com</a>
<a href=""mailto:dh.l.c.283@gmail.com"">dh.l.c.283@gmail.com</a>
<a href=""mailto:d.h.lc283@gmail.com"">d.h.lc283@gmail.com</a>
<a href=""mailto:dh.lc28.3@gmail.com"">dh.lc28.3@gmail.com</a>
<a href=""mailto:dhlc.2.83@gmail.com"">dhlc.2.83@gmail.com</a>
<a href=""mailto:dh.lc283@gmail.com"">dh.lc283@gmail.com</a>
<a href=""mailto:d.h.l.c2.83@gmail.com"">d.h.l.c2.83@gmail.com</a>
<a href=""mailto:d.h.l.c.2.83@gmail.com"">d.h.l.c.2.83@gmail.com</a>
<a href=""mailto:d.h.l.c.2.8.3@gmail.com"">d.h.l.c.2.8.3@gmail.com</a>
<a href=""mailto:dh.l.c283@gmail.com"">dh.l.c283@gmail.com</a>
<a href=""mailto:d.h.l.c.28.3@gmail.com"">d.h.l.c.28.3@gmail.com</a>
<a href=""mailto:dhl.c2.83@gmail.com"">dhl.c2.83@gmail.com</a>
<a href=""mailto:d.hlc.283@gmail.com"">d.hlc.283@gmail.com</a>
<a href=""mailto:d.hlc2.8.3@gmail.com"">d.hlc2.8.3@gmail.com</a>
<a href=""mailto:d.hlc.28.3@gmail.com"">d.hlc.28.3@gmail.com</a>
<a href=""mailto:missdnbrown@gmail.com"">missdnbrown@gmail.com</a>
<a href=""mailto:m.i.s.sdnb.r.own@gmail.com"">m.i.s.sdnb.r.own@gmail.com</a>
<a href=""mailto:m.is.s.d.nb.rown@gmail.com"">m.is.s.d.nb.rown@gmail.com</a>
<a href=""mailto:m.i.ss.dn.b.r.o.w.n@gmail.com"">m.i.ss.dn.b.r.o.w.n@gmail.com</a>
<a href=""mailto:mis.sdnbrown@gmail.com"">mis.sdnbrown@gmail.com</a>
<a href=""mailto:mis.s.d.nb.r.o.wn@gmail.com"">mis.s.d.nb.r.o.wn@gmail.com</a>
<a href=""mailto:m.i.s.s.dnbrown@gmail.com"">m.i.s.s.dnbrown@gmail.com</a>
<a href=""mailto:missd.n.br.o.w.n@gmail.com"">missd.n.br.o.w.n@gmail.com</a>
<a href=""mailto:mi.s.sd.nbr.ow.n@gmail.com"">mi.s.sd.nbr.ow.n@gmail.com</a>
<a href=""mailto:m.issd.nb.ro.wn@gmail.com"">m.issd.nb.ro.wn@gmail.com</a>
<a href=""mailto:m.i.s.s.dnbro.wn@gmail.com"">m.i.s.s.dnbro.wn@gmail.com</a>
<a href=""mailto:m.is.sdnbr.o.w.n@gmail.com"">m.is.sdnbr.o.w.n@gmail.com</a>
<a href=""mailto:mi.ssd.nbr.own@gmail.com"">mi.ssd.nbr.own@gmail.com</a>
<a href=""mailto:miss.dnb.r.own@gmail.com"">miss.dnb.r.own@gmail.com</a>
<a href=""mailto:mi.s.s.d.nb.rown@gmail.com"">mi.s.s.d.nb.rown@gmail.com</a>
<a href=""mailto:mi.ss.dnbrow.n@gmail.com"">mi.ss.dnbrow.n@gmail.com</a>
<a href=""mailto:m.i.ssdn.b.r.ow.n@gmail.com"">m.i.ssdn.b.r.ow.n@gmail.com</a>
<a href=""mailto:m.i.ss.dn.b.r.own@gmail.com"">m.i.ss.dn.b.r.own@gmail.com</a>
<a href=""mailto:mis.s.d.nb.r.ow.n@gmail.com"">mis.s.d.nb.r.ow.n@gmail.com</a>
<a href=""mailto:mi.s.sdn.b.r.o.wn@gmail.com"">mi.s.sdn.b.r.o.wn@gmail.com</a>
<a href=""mailto:missdn.brow.n@gmail.com"">missdn.brow.n@gmail.com</a>
<a href=""mailto:m.issd.nb.r.o.wn@gmail.com"">m.issd.nb.r.o.wn@gmail.com</a>
<a href=""mailto:missdn.b.rown@gmail.com"">missdn.b.rown@gmail.com</a>
<a href=""mailto:mi.s.s.dn.b.ro.w.n@gmail.com"">mi.s.s.dn.b.ro.w.n@gmail.com</a>
<a href=""mailto:mis.s.dn.br.own@gmail.com"">mis.s.dn.br.own@gmail.com</a>
<a href=""mailto:miss.dn.br.o.wn@gmail.com"">miss.dn.br.o.wn@gmail.com</a>
<a href=""mailto:mi.ss.d.nb.r.o.w.n@gmail.com"">mi.ss.d.nb.r.o.w.n@gmail.com</a>
<a href=""mailto:m.issdnb.r.ow.n@gmail.com"">m.issdnb.r.ow.n@gmail.com</a>
<a href=""mailto:mi.s.sdn.brown@gmail.com"">mi.s.sdn.brown@gmail.com</a>
<a href=""mailto:m.iss.dnb.r.o.w.n@gmail.com"">m.iss.dnb.r.o.w.n@gmail.com</a>
<a href=""mailto:m.i.s.sdn.br.ow.n@gmail.com"">m.i.s.sdn.br.ow.n@gmail.com</a>
<a href=""mailto:m.i.s.s.d.n.b.r.ow.n@gmail.com"">m.i.s.s.d.n.b.r.ow.n@gmail.com</a>
<a href=""mailto:missdn.b.r.ow.n@gmail.com"">missdn.b.r.ow.n@gmail.com</a>
<a href=""mailto:m.issd.nb.ro.w.n@gmail.com"">m.issd.nb.ro.w.n@gmail.com</a>
<a href=""mailto:mis.s.dn.br.ow.n@gmail.com"">mis.s.dn.br.ow.n@gmail.com</a>
<a href=""mailto:m.i.ssd.nbrow.n@gmail.com"">m.i.ssd.nbrow.n@gmail.com</a>
<a href=""mailto:m.issd.n.b.ro.wn@gmail.com"">m.issd.n.b.ro.wn@gmail.com</a>
<a href=""mailto:m.is.sdn.bro.wn@gmail.com"">m.is.sdn.bro.wn@gmail.com</a>
<a href=""mailto:mi.ss.d.nbrow.n@gmail.com"">mi.ss.d.nbrow.n@gmail.com</a>
<a href=""mailto:mi.ssd.n.b.rown@gmail.com"">mi.ssd.n.b.rown@gmail.com</a>
<a href=""mailto:m.is.s.d.nbrow.n@gmail.com"">m.is.s.d.nbrow.n@gmail.com</a>
<a href=""mailto:m.i.ssdnb.r.o.w.n@gmail.com"">m.i.ssdnb.r.o.w.n@gmail.com</a>
<a href=""mailto:m.issdn.br.o.wn@gmail.com"">m.issdn.br.o.wn@gmail.com</a>
<a href=""mailto:mis.s.dnbrow.n@gmail.com"">mis.s.dnbrow.n@gmail.com</a>
<a href=""mailto:miss.dn.b.row.n@gmail.com"">miss.dn.b.row.n@gmail.com</a>
<a href=""mailto:m.is.s.dnbr.ow.n@gmail.com"">m.is.s.dnbr.ow.n@gmail.com</a>
<a href=""mailto:m.issd.n.b.row.n@gmail.com"">m.issd.n.b.row.n@gmail.com</a>
<a href=""mailto:mi.ssdnb.ro.w.n@gmail.com"">mi.ssdnb.ro.w.n@gmail.com</a>
<a href=""mailto:m.i.ssd.n.br.own@gmail.com"">m.i.ssd.n.br.own@gmail.com</a>
<a href=""mailto:mi.s.sd.n.b.ro.w.n@gmail.com"">mi.s.sd.n.b.ro.w.n@gmail.com</a>
<a href=""mailto:mi.s.sd.n.b.r.own@gmail.com"">mi.s.sd.n.b.r.own@gmail.com</a>
<a href=""mailto:m.issdnbro.w.n@gmail.com"">m.issdnbro.w.n@gmail.com</a>
<a href=""mailto:miss.dn.br.ow.n@gmail.com"">miss.dn.br.ow.n@gmail.com</a>
<a href=""mailto:miss.d.n.br.own@gmail.com"">miss.d.n.br.own@gmail.com</a>
<a href=""mailto:m.is.sdn.brown@gmail.com"">m.is.sdn.brown@gmail.com</a>
<a href=""mailto:mis.sdn.bro.w.n@gmail.com"">mis.sdn.bro.w.n@gmail.com</a>
<a href=""mailto:missdnbrow.n@gmail.com"">missdnbrow.n@gmail.com</a>
<a href=""mailto:m.is.sdn.br.own@gmail.com"">m.is.sdn.br.own@gmail.com</a>
<a href=""mailto:m.i.ss.d.n.bro.w.n@gmail.com"">m.i.ss.d.n.bro.w.n@gmail.com</a>
<a href=""mailto:missdnbr.o.wn@gmail.com"">missdnbr.o.wn@gmail.com</a>
<a href=""mailto:miss.dn.b.rown@gmail.com"">miss.dn.b.rown@gmail.com</a>
<a href=""mailto:mis.sd.n.b.r.o.wn@gmail.com"">mis.sd.n.b.r.o.wn@gmail.com</a>
<a href=""mailto:m.i.s.sd.n.b.row.n@gmail.com"">m.i.s.sd.n.b.row.n@gmail.com</a>
<a href=""mailto:mi.ssd.nb.r.o.w.n@gmail.com"">mi.ssd.nb.r.o.w.n@gmail.com</a>
<a href=""mailto:m.iss.dn.b.r.o.w.n@gmail.com"">m.iss.dn.b.r.o.w.n@gmail.com</a>
<a href=""mailto:m.i.s.s.dnb.ro.w.n@gmail.com"">m.i.s.s.dnb.ro.w.n@gmail.com</a>
<a href=""mailto:miss.dnb.ro.wn@gmail.com"">miss.dnb.ro.wn@gmail.com</a>
<a href=""mailto:mi.ss.dnb.r.o.w.n@gmail.com"">mi.ss.dnb.r.o.w.n@gmail.com</a>
<a href=""mailto:mi.s.sdnb.r.own@gmail.com"">mi.s.sdnb.r.own@gmail.com</a>
<a href=""mailto:m.is.s.d.n.br.o.w.n@gmail.com"">m.is.s.d.n.br.o.w.n@gmail.com</a>
<a href=""mailto:m.iss.d.nbr.o.wn@gmail.com"">m.iss.d.nbr.o.wn@gmail.com</a>
<a href=""mailto:mi.ss.d.n.b.ro.wn@gmail.com"">mi.ss.d.n.b.ro.wn@gmail.com</a>
<a href=""mailto:m.i.s.sdn.b.ro.w.n@gmail.com"">m.i.s.sdn.b.ro.w.n@gmail.com</a>
<a href=""mailto:mis.s.d.n.b.r.ow.n@gmail.com"">mis.s.d.n.b.r.ow.n@gmail.com</a>
<a href=""mailto:mis.s.d.nbr.o.wn@gmail.com"">mis.s.d.nbr.o.wn@gmail.com</a>
<a href=""mailto:m.i.ssd.n.br.o.wn@gmail.com"">m.i.ssd.n.br.o.wn@gmail.com</a>
<a href=""mailto:mis.s.d.n.brow.n@gmail.com"">mis.s.d.n.brow.n@gmail.com</a>
<a href=""mailto:miss.d.nb.ro.wn@gmail.com"">miss.d.nb.ro.wn@gmail.com</a>
<a href=""mailto:mis.s.dnbr.ow.n@gmail.com"">mis.s.dnbr.ow.n@gmail.com</a>
<a href=""mailto:mis.sdnbro.wn@gmail.com"">mis.sdnbro.wn@gmail.com</a>
<a href=""mailto:mi.ssdnbro.wn@gmail.com"">mi.ssdnbro.wn@gmail.com</a>
<a href=""mailto:mis.sdnb.r.o.w.n@gmail.com"">mis.sdnb.r.o.w.n@gmail.com</a>
<a href=""mailto:mi.ssd.nbr.o.w.n@gmail.com"">mi.ssd.nbr.o.w.n@gmail.com</a>
<a href=""mailto:m.i.ss.dnb.ro.w.n@gmail.com"">m.i.ss.dnb.ro.w.n@gmail.com</a>
<a href=""mailto:m.issd.n.b.r.o.w.n@gmail.com"">m.issd.n.b.r.o.w.n@gmail.com</a>
<a href=""mailto:mi.s.sd.n.b.r.o.wn@gmail.com"">mi.s.sd.n.b.r.o.wn@gmail.com</a>
<a href=""mailto:m.i.ss.dnb.r.own@gmail.com"">m.i.ss.dnb.r.own@gmail.com</a>
<a href=""mailto:mi.s.s.d.nb.r.ow.n@gmail.com"">mi.s.s.d.nb.r.ow.n@gmail.com</a>
<a href=""mailto:mi.s.sdn.br.own@gmail.com"">mi.s.sdn.br.own@gmail.com</a>
<a href=""mailto:m.is.s.dn.br.o.wn@gmail.com"">m.is.s.dn.br.o.wn@gmail.com</a>
<a href=""mailto:miss.dnb.r.o.w.n@gmail.com"">miss.dnb.r.o.w.n@gmail.com</a>
<a href=""mailto:mi.s.s.d.nb.ro.w.n@gmail.com"">mi.s.s.d.nb.ro.w.n@gmail.com</a>
<a href=""mailto:m.i.ssd.n.brow.n@gmail.com"">m.i.ssd.n.brow.n@gmail.com</a>
<a href=""mailto:mi.ss.dnb.r.ow.n@gmail.com"">mi.ss.dnb.r.ow.n@gmail.com</a>
<a href=""mailto:miss.d.nbro.wn@gmail.com"">miss.d.nbro.wn@gmail.com</a>
<a href=""mailto:m.issd.n.b.ro.w.n@gmail.com"">m.issd.n.b.ro.w.n@gmail.com</a>
<a href=""mailto:miss.dnbrown@gmail.com"">miss.dnbrown@gmail.com</a>
<a href=""mailto:m.iss.dn.bro.w.n@gmail.com"">m.iss.dn.bro.w.n@gmail.com</a>
<a href=""mailto:m.i.s.sdnb.r.o.w.n@gmail.com"">m.i.s.sdnb.r.o.w.n@gmail.com</a>
<a href=""mailto:missd.n.br.o.wn@gmail.com"">missd.n.br.o.wn@gmail.com</a>
<a href=""mailto:mi.ssd.n.b.r.o.w.n@gmail.com"">mi.ssd.n.b.r.o.w.n@gmail.com</a>
<a href=""mailto:m.is.s.d.n.bro.wn@gmail.com"">m.is.s.d.n.bro.wn@gmail.com</a>
<a href=""mailto:m.is.sd.n.b.r.own@gmail.com"">m.is.sd.n.b.r.own@gmail.com</a>
<a href=""mailto:m.i.s.sd.nb.r.ow.n@gmail.com"">m.i.s.sd.nb.r.ow.n@gmail.com</a>
<a href=""mailto:m.i.s.sd.nb.rown@gmail.com"">m.i.s.sd.nb.rown@gmail.com</a>
<a href=""mailto:m.i.ssd.n.bro.w.n@gmail.com"">m.i.ssd.n.bro.w.n@gmail.com</a>
<a href=""mailto:mi.s.sdn.b.ro.wn@gmail.com"">mi.s.sdn.b.ro.wn@gmail.com</a>
<a href=""mailto:m.iss.d.n.b.ro.wn@gmail.com"">m.iss.d.n.b.ro.wn@gmail.com</a>
<a href=""mailto:mis.sdn.b.r.o.w.n@gmail.com"">mis.sdn.b.r.o.w.n@gmail.com</a>
<a href=""mailto:mi.s.s.d.n.b.r.ow.n@gmail.com"">mi.s.s.d.n.b.r.ow.n@gmail.com</a>
<a href=""mailto:m.i.ssd.nb.r.own@gmail.com"">m.i.ssd.nb.r.own@gmail.com</a>
<a href=""mailto:mi.ss.d.n.br.ow.n@gmail.com"">mi.ss.d.n.br.ow.n@gmail.com</a>
<a href=""mailto:m.iss.dn.b.r.own@gmail.com"">m.iss.dn.b.r.own@gmail.com</a>
<a href=""mailto:m.is.sdn.b.r.own@gmail.com"">m.is.sdn.b.r.own@gmail.com</a>
<a href=""mailto:m.is.sd.nbr.own@gmail.com"">m.is.sd.nbr.own@gmail.com</a>
<a href=""mailto:mi.ssdn.b.r.ow.n@gmail.com"">mi.ssdn.b.r.ow.n@gmail.com</a>
<a href=""mailto:mi.ss.dn.br.own@gmail.com"">mi.ss.dn.br.own@gmail.com</a>
<a href=""mailto:mi.ss.dnb.ro.wn@gmail.com"">mi.ss.dnb.ro.wn@gmail.com</a>
<a href=""mailto:m.is.sdnb.r.ow.n@gmail.com"">m.is.sdnb.r.ow.n@gmail.com</a>
<a href=""mailto:m.is.sd.n.br.ow.n@gmail.com"">m.is.sd.n.br.ow.n@gmail.com</a>
<a href=""mailto:mis.s.dn.brown@gmail.com"">mis.s.dn.brown@gmail.com</a>
<a href=""mailto:m.is.s.d.nbr.own@gmail.com"">m.is.s.d.nbr.own@gmail.com</a>
<a href=""mailto:mi.s.s.d.nbrow.n@gmail.com"">mi.s.s.d.nbrow.n@gmail.com</a>
<a href=""mailto:m.i.s.sdnbrown@gmail.com"">m.i.s.sdnbrown@gmail.com</a>
<a href=""mailto:mi.s.s.dnbro.wn@gmail.com"">mi.s.s.dnbro.wn@gmail.com</a>
<a href=""mailto:miss.dnbr.o.w.n@gmail.com"">miss.dnbr.o.w.n@gmail.com</a>
<a href=""mailto:m.i.ssdn.b.r.own@gmail.com"">m.i.ssdn.b.r.own@gmail.com</a>
<a href=""mailto:mi.ss.dn.brow.n@gmail.com"">mi.ss.dn.brow.n@gmail.com</a>
<a href=""mailto:m.iss.dnb.r.ow.n@gmail.com"">m.iss.dnb.r.ow.n@gmail.com</a>
<a href=""mailto:m.i.ss.d.nb.r.own@gmail.com"">m.i.ss.d.nb.r.own@gmail.com</a>
<a href=""mailto:mi.ss.dn.brown@gmail.com"">mi.ss.dn.brown@gmail.com</a>
<a href=""mailto:m.issdnb.r.own@gmail.com"">m.issdnb.r.own@gmail.com</a>
<a href=""mailto:miss.dnb.r.ow.n@gmail.com"">miss.dnb.r.ow.n@gmail.com</a>
<a href=""mailto:m.i.s.s.d.nbr.ow.n@gmail.com"">m.i.s.s.d.nbr.ow.n@gmail.com</a>
<a href=""mailto:mis.sd.n.b.r.ow.n@gmail.com"">mis.sd.n.b.r.ow.n@gmail.com</a>
<a href=""mailto:m.i.ssd.n.b.r.o.wn@gmail.com"">m.i.ssd.n.b.r.o.wn@gmail.com</a>
<a href=""mailto:m.is.sd.nb.r.o.w.n@gmail.com"">m.is.sd.nb.r.o.w.n@gmail.com</a>
<a href=""mailto:m.iss.d.n.brow.n@gmail.com"">m.iss.d.n.brow.n@gmail.com</a>
<a href=""mailto:mi.s.s.dn.bro.w.n@gmail.com"">mi.s.s.dn.bro.w.n@gmail.com</a>
<a href=""mailto:missdn.b.r.own@gmail.com"">missdn.b.r.own@gmail.com</a>
<a href=""mailto:m.i.ssd.n.b.r.o.w.n@gmail.com"">m.i.ssd.n.b.r.o.w.n@gmail.com</a>
<a href=""mailto:mi.ssdn.brow.n@gmail.com"">mi.ssdn.brow.n@gmail.com</a>
<a href=""mailto:mi.ssd.n.br.own@gmail.com"">mi.ssd.n.br.own@gmail.com</a>
<a href=""mailto:mi.ss.dnbro.wn@gmail.com"">mi.ss.dnbro.wn@gmail.com</a>
<a href=""mailto:m.i.s.sdnb.r.ow.n@gmail.com"">m.i.s.sdnb.r.ow.n@gmail.com</a>
<a href=""mailto:mis.s.dnbro.wn@gmail.com"">mis.s.dnbro.wn@gmail.com</a>
<a href=""mailto:m.i.s.s.dn.b.r.ow.n@gmail.com"">m.i.s.s.dn.b.r.ow.n@gmail.com</a>
<a href=""mailto:mis.s.dnb.ro.wn@gmail.com"">mis.s.dnb.ro.wn@gmail.com</a>
<a href=""mailto:mi.s.s.d.nb.ro.wn@gmail.com"">mi.s.s.d.nb.ro.wn@gmail.com</a>
<a href=""mailto:m.i.ss.d.nbr.own@gmail.com"">m.i.ss.d.nbr.own@gmail.com</a>
<a href=""mailto:m.i.s.s.dnb.r.o.wn@gmail.com"">m.i.s.s.dnb.r.o.wn@gmail.com</a>
<a href=""mailto:m.is.s.d.nb.ro.w.n@gmail.com"">m.is.s.d.nb.ro.w.n@gmail.com</a>
<a href=""mailto:mis.sd.n.br.ow.n@gmail.com"">mis.sd.n.br.ow.n@gmail.com</a>
<a href=""mailto:mi.s.sd.nb.rown@gmail.com"">mi.s.sd.nb.rown@gmail.com</a>
<a href=""mailto:m.iss.d.n.br.o.wn@gmail.com"">m.iss.d.n.br.o.wn@gmail.com</a>
<a href=""mailto:m.iss.d.n.b.rown@gmail.com"">m.iss.d.n.b.rown@gmail.com</a>
<a href=""mailto:mis.sd.nb.row.n@gmail.com"">mis.sd.nb.row.n@gmail.com</a>
<a href=""mailto:m.i.ss.d.nbro.wn@gmail.com"">m.i.ss.d.nbro.wn@gmail.com</a>
<a href=""mailto:mi.s.s.d.nbro.wn@gmail.com"">mi.s.s.d.nbro.wn@gmail.com</a>
<a href=""mailto:m.i.s.s.dn.b.row.n@gmail.com"">m.i.s.s.dn.b.row.n@gmail.com</a>
<a href=""mailto:m.i.ss.dnbr.own@gmail.com"">m.i.ss.dnbr.own@gmail.com</a>
<a href=""mailto:mis.sd.n.brown@gmail.com"">mis.sd.n.brown@gmail.com</a>
<a href=""mailto:m.i.s.sd.nbro.w.n@gmail.com"">m.i.s.sd.nbro.w.n@gmail.com</a>
<a href=""mailto:mi.s.s.dnb.r.o.wn@gmail.com"">mi.s.s.dnb.r.o.wn@gmail.com</a>
<a href=""mailto:m.iss.dn.br.own@gmail.com"">m.iss.dn.br.own@gmail.com</a>
<a href=""mailto:m.i.s.sd.n.b.ro.w.n@gmail.com"">m.i.s.sd.n.b.ro.w.n@gmail.com</a>
<a href=""mailto:m.is.sd.nb.row.n@gmail.com"">m.is.sd.nb.row.n@gmail.com</a>
<a href=""mailto:mis.sd.nbrown@gmail.com"">mis.sd.nbrown@gmail.com</a>
<a href=""mailto:mi.ssdn.b.ro.w.n@gmail.com"">mi.ssdn.b.ro.w.n@gmail.com</a>
<a href=""mailto:mi.s.sd.n.bro.wn@gmail.com"">mi.s.sd.n.bro.wn@gmail.com</a>
<a href=""mailto:mi.s.s.dn.bro.wn@gmail.com"">mi.s.s.dn.bro.wn@gmail.com</a>
<a href=""mailto:m.iss.d.nb.row.n@gmail.com"">m.iss.d.nb.row.n@gmail.com</a>
<a href=""mailto:mi.ss.d.n.b.r.ow.n@gmail.com"">mi.ss.d.n.b.r.ow.n@gmail.com</a>
<a href=""mailto:m.i.ssd.n.b.ro.wn@gmail.com"">m.i.ssd.n.b.ro.wn@gmail.com</a>
<a href=""mailto:m.is.sdnbrow.n@gmail.com"">m.is.sdnbrow.n@gmail.com</a>
<a href=""mailto:m.i.ss.dn.b.ro.w.n@gmail.com"">m.i.ss.dn.b.ro.w.n@gmail.com</a>
<a href=""mailto:mi.ssdn.bro.w.n@gmail.com"">mi.ssdn.bro.w.n@gmail.com</a>
<a href=""mailto:m.i.ss.d.n.br.o.wn@gmail.com"">m.i.ss.d.n.br.o.wn@gmail.com</a>
<a href=""mailto:m.i.s.s.d.nb.r.o.wn@gmail.com"">m.i.s.s.d.nb.r.o.wn@gmail.com</a>
<a href=""mailto:mis.sd.nb.ro.w.n@gmail.com"">mis.sd.nb.ro.w.n@gmail.com</a>
<a href=""mailto:mis.sd.n.br.own@gmail.com"">mis.sd.n.br.own@gmail.com</a>
<a href=""mailto:m.issd.n.b.r.ow.n@gmail.com"">m.issd.n.b.r.ow.n@gmail.com</a>
<a href=""mailto:m.i.s.sd.nb.ro.w.n@gmail.com"">m.i.s.sd.nb.ro.w.n@gmail.com</a>
<a href=""mailto:mi.s.s.dnbro.w.n@gmail.com"">mi.s.s.dnbro.w.n@gmail.com</a>
<a href=""mailto:mis.s.d.n.bro.w.n@gmail.com"">mis.s.d.n.bro.w.n@gmail.com</a>
<a href=""mailto:mi.ss.dnbr.ow.n@gmail.com"">mi.ss.dnbr.ow.n@gmail.com</a>
<a href=""mailto:m.iss.d.nbrow.n@gmail.com"">m.iss.d.nbrow.n@gmail.com</a>
<a href=""mailto:m.i.ss.dnb.rown@gmail.com"">m.i.ss.dnb.rown@gmail.com</a>
<a href=""mailto:m.i.s.s.d.nbro.w.n@gmail.com"">m.i.s.s.d.nbro.w.n@gmail.com</a>
<a href=""mailto:m.is.s.dnbr.o.wn@gmail.com"">m.is.s.dnbr.o.wn@gmail.com</a>
<a href=""mailto:m.is.sd.n.b.r.ow.n@gmail.com"">m.is.sd.n.b.r.ow.n@gmail.com</a>
<a href=""mailto:mi.ssdn.br.ow.n@gmail.com"">mi.ssdn.br.ow.n@gmail.com</a>
<a href=""mailto:mis.sd.n.brow.n@gmail.com"">mis.sd.n.brow.n@gmail.com</a>
<a href=""mailto:mi.s.s.d.n.brow.n@gmail.com"">mi.s.s.d.n.brow.n@gmail.com</a>
<a href=""mailto:missdn.bro.w.n@gmail.com"">missdn.bro.w.n@gmail.com</a>
<a href=""mailto:mi.s.sd.nbrown@gmail.com"">mi.s.sd.nbrown@gmail.com</a>
<a href=""mailto:miss.dn.b.ro.wn@gmail.com"">miss.dn.b.ro.wn@gmail.com</a>
<a href=""mailto:m.i.s.sd.nb.ro.wn@gmail.com"">m.i.s.sd.nb.ro.wn@gmail.com</a>
<a href=""mailto:m.is.sdnbrown@gmail.com"">m.is.sdnbrown@gmail.com</a>
<a href=""mailto:miss.dn.b.r.ow.n@gmail.com"">miss.dn.b.r.ow.n@gmail.com</a>
<a href=""mailto:mi.ssd.nbrown@gmail.com"">mi.ssd.nbrown@gmail.com</a>
<a href=""mailto:missdonnab180@gmail.com"">missdonnab180@gmail.com</a>
<a href=""mailto:m.is.s.d.o.nn.a.b.1.8.0@gmail.com"">m.is.s.d.o.nn.a.b.1.8.0@gmail.com</a>
<a href=""mailto:m.i.ss.donn.a.b180@gmail.com"">m.i.ss.donn.a.b180@gmail.com</a>
<a href=""mailto:mi.ssd.onnab1.8.0@gmail.com"">mi.ssd.onnab1.8.0@gmail.com</a>
<a href=""mailto:mi.ss.do.nnab1.80@gmail.com"">mi.ss.do.nnab1.80@gmail.com</a>
<a href=""mailto:mi.s.sd.on.n.a.b.1.80@gmail.com"">mi.s.sd.on.n.a.b.1.80@gmail.com</a>
<a href=""mailto:m.i.s.s.do.n.n.a.b.180@gmail.com"">m.i.s.s.do.n.n.a.b.180@gmail.com</a>
<a href=""mailto:m.is.s.d.onnab.1.80@gmail.com"">m.is.s.d.onnab.1.80@gmail.com</a>
<a href=""mailto:m.is.sdo.n.na.b18.0@gmail.com"">m.is.sdo.n.na.b18.0@gmail.com</a>
<a href=""mailto:missdo.n.n.ab180@gmail.com"">missdo.n.n.ab180@gmail.com</a>
<a href=""mailto:miss.do.n.n.ab.1.8.0@gmail.com"">miss.do.n.n.ab.1.8.0@gmail.com</a>
<a href=""mailto:m.is.sdon.n.a.b1.8.0@gmail.com"">m.is.sdon.n.a.b1.8.0@gmail.com</a>
<a href=""mailto:m.i.ss.donn.ab18.0@gmail.com"">m.i.ss.donn.ab18.0@gmail.com</a>
<a href=""mailto:m.i.s.sd.onnab18.0@gmail.com"">m.i.s.sd.onnab18.0@gmail.com</a>
<a href=""mailto:mi.s.sdonn.a.b.18.0@gmail.com"">mi.s.sdonn.a.b.18.0@gmail.com</a>
<a href=""mailto:mi.s.s.do.n.na.b.18.0@gmail.com"">mi.s.s.do.n.na.b.18.0@gmail.com</a>
<a href=""mailto:m.i.s.s.donnab18.0@gmail.com"">m.i.s.s.donnab18.0@gmail.com</a>
<a href=""mailto:m.is.sdonnab.180@gmail.com"">m.is.sdonnab.180@gmail.com</a>
<a href=""mailto:mi.ss.d.onnab.1.8.0@gmail.com"">mi.ss.d.onnab.1.8.0@gmail.com</a>
<a href=""mailto:miss.d.o.n.n.a.b.180@gmail.com"">miss.d.o.n.n.a.b.180@gmail.com</a>
<a href=""mailto:mi.ssd.o.nn.a.b.18.0@gmail.com"">mi.ssd.o.nn.a.b.18.0@gmail.com</a>
<a href=""mailto:m.i.s.sdon.n.ab.18.0@gmail.com"">m.i.s.sdon.n.ab.18.0@gmail.com</a>
<a href=""mailto:missdo.n.n.a.b1.80@gmail.com"">missdo.n.n.a.b1.80@gmail.com</a>
<a href=""mailto:m.i.s.s.do.n.nab1.80@gmail.com"">m.i.s.s.do.n.nab1.80@gmail.com</a>
<a href=""mailto:mi.ss.do.nn.a.b1.80@gmail.com"">mi.ss.do.nn.a.b1.80@gmail.com</a>
<a href=""mailto:m.issd.onnab18.0@gmail.com"">m.issd.onnab18.0@gmail.com</a>
<a href=""mailto:mi.ss.d.onn.a.b1.80@gmail.com"">mi.ss.d.onn.a.b1.80@gmail.com</a>
<a href=""mailto:mi.s.sd.o.nnab1.8.0@gmail.com"">mi.s.sd.o.nnab1.8.0@gmail.com</a>
<a href=""mailto:m.i.s.s.donna.b1.80@gmail.com"">m.i.s.s.donna.b1.80@gmail.com</a>
<a href=""mailto:m.is.s.d.on.n.ab1.8.0@gmail.com"">m.is.s.d.on.n.ab1.8.0@gmail.com</a>
<a href=""mailto:m.is.s.d.o.n.n.a.b180@gmail.com"">m.is.s.d.o.n.n.a.b180@gmail.com</a>
<a href=""mailto:m.i.ss.d.onna.b.1.80@gmail.com"">m.i.ss.d.onna.b.1.80@gmail.com</a>
<a href=""mailto:m.i.s.s.d.o.nna.b.18.0@gmail.com"">m.i.s.s.d.o.nna.b.18.0@gmail.com</a>
<a href=""mailto:mi.s.sdo.n.na.b180@gmail.com"">mi.s.sdo.n.na.b180@gmail.com</a>
<a href=""mailto:missdo.n.na.b.180@gmail.com"">missdo.n.na.b.180@gmail.com</a>
<a href=""mailto:m.i.s.sdon.n.a.b18.0@gmail.com"">m.i.s.sdon.n.a.b18.0@gmail.com</a>
<a href=""mailto:m.i.ss.do.n.nab.180@gmail.com"">m.i.ss.do.n.nab.180@gmail.com</a>
<a href=""mailto:m.issdo.nn.ab180@gmail.com"">m.issdo.nn.ab180@gmail.com</a>
<a href=""mailto:mis.sdo.nna.b.18.0@gmail.com"">mis.sdo.nna.b.18.0@gmail.com</a>
<a href=""mailto:mi.s.sd.onna.b18.0@gmail.com"">mi.s.sd.onna.b18.0@gmail.com</a>
<a href=""mailto:m.i.s.sd.o.nn.ab.1.8.0@gmail.com"">m.i.s.sd.o.nn.ab.1.8.0@gmail.com</a>
<a href=""mailto:missd.onna.b.180@gmail.com"">missd.onna.b.180@gmail.com</a>
<a href=""mailto:mis.s.d.on.na.b.180@gmail.com"">mis.s.d.on.na.b.180@gmail.com</a>
<a href=""mailto:m.iss.donn.a.b.18.0@gmail.com"">m.iss.donn.a.b.18.0@gmail.com</a>
<a href=""mailto:mis.sd.o.nna.b.1.80@gmail.com"">mis.sd.o.nna.b.1.80@gmail.com</a>
<a href=""mailto:m.i.ssd.onn.ab.1.8.0@gmail.com"">m.i.ssd.onn.ab.1.8.0@gmail.com</a>
<a href=""mailto:mis.sd.onna.b.180@gmail.com"">mis.sd.onna.b.180@gmail.com</a>
<a href=""mailto:mi.s.sd.o.nn.ab.180@gmail.com"">mi.s.sd.o.nn.ab.180@gmail.com</a>
<a href=""mailto:m.i.ss.d.on.n.ab.18.0@gmail.com"">m.i.ss.d.on.n.ab.18.0@gmail.com</a>
<a href=""mailto:m.i.ss.do.n.n.ab18.0@gmail.com"">m.i.ss.do.n.n.ab18.0@gmail.com</a>
<a href=""mailto:mis.sd.onna.b180@gmail.com"">mis.sd.onna.b180@gmail.com</a>
<a href=""mailto:missd.o.nnab1.80@gmail.com"">missd.o.nnab1.80@gmail.com</a>
<a href=""mailto:m.i.ss.d.onn.ab.18.0@gmail.com"">m.i.ss.d.onn.ab.18.0@gmail.com</a>
<a href=""mailto:m.i.s.s.d.on.n.ab.18.0@gmail.com"">m.i.s.s.d.on.n.ab.18.0@gmail.com</a>
<a href=""mailto:mi.s.sd.on.na.b.1.8.0@gmail.com"">mi.s.sd.on.na.b.1.8.0@gmail.com</a>
<a href=""mailto:m.i.ssdo.n.n.a.b1.80@gmail.com"">m.i.ssdo.n.n.a.b1.80@gmail.com</a>
<a href=""mailto:missdo.nn.ab.1.80@gmail.com"">missdo.nn.ab.1.80@gmail.com</a>
<a href=""mailto:m.i.s.sd.o.n.n.ab.1.80@gmail.com"">m.i.s.sd.o.n.n.ab.1.80@gmail.com</a>
<a href=""mailto:m.iss.do.n.na.b1.8.0@gmail.com"">m.iss.do.n.na.b1.8.0@gmail.com</a>
<a href=""mailto:mis.sd.on.n.ab1.80@gmail.com"">mis.sd.on.n.ab1.80@gmail.com</a>
<a href=""mailto:m.i.ss.don.n.a.b1.80@gmail.com"">m.i.ss.don.n.a.b1.80@gmail.com</a>
<a href=""mailto:mi.ss.d.o.nna.b1.80@gmail.com"">mi.ss.d.o.nna.b1.80@gmail.com</a>
<a href=""mailto:miss.don.na.b1.8.0@gmail.com"">miss.don.na.b1.8.0@gmail.com</a>
<a href=""mailto:m.i.s.s.d.onn.a.b.1.8.0@gmail.com"">m.i.s.s.d.onn.a.b.1.8.0@gmail.com</a>
<a href=""mailto:m.is.sd.on.n.ab1.80@gmail.com"">m.is.sd.on.n.ab1.80@gmail.com</a>
<a href=""mailto:mi.ssdon.nab.18.0@gmail.com"">mi.ssdon.nab.18.0@gmail.com</a>
<a href=""mailto:m.is.sdo.n.n.a.b.180@gmail.com"">m.is.sdo.n.n.a.b.180@gmail.com</a>
<a href=""mailto:mi.ss.don.na.b.180@gmail.com"">mi.ss.don.na.b.180@gmail.com</a>
<a href=""mailto:m.i.s.sd.onn.ab1.8.0@gmail.com"">m.i.s.sd.onn.ab1.8.0@gmail.com</a>
<a href=""mailto:mis.sd.onnab.1.80@gmail.com"">mis.sd.onnab.1.80@gmail.com</a>
<a href=""mailto:m.i.ss.don.n.a.b1.8.0@gmail.com"">m.i.ss.don.n.a.b1.8.0@gmail.com</a>
<a href=""mailto:m.iss.d.o.n.n.ab.1.8.0@gmail.com"">m.iss.d.o.n.n.ab.1.8.0@gmail.com</a>
<a href=""mailto:mis.sdonn.a.b.1.8.0@gmail.com"">mis.sdonn.a.b.1.8.0@gmail.com</a>
<a href=""mailto:m.iss.do.n.nab.1.8.0@gmail.com"">m.iss.do.n.nab.1.8.0@gmail.com</a>
<a href=""mailto:mis.s.d.o.n.n.ab.18.0@gmail.com"">mis.s.d.o.n.n.ab.18.0@gmail.com</a>
<a href=""mailto:m.iss.d.onn.ab180@gmail.com"">m.iss.d.onn.ab180@gmail.com</a>
<a href=""mailto:m.is.s.d.on.nab1.80@gmail.com"">m.is.s.d.on.nab1.80@gmail.com</a>
<a href=""mailto:m.issdo.n.n.a.b18.0@gmail.com"">m.issdo.n.n.a.b18.0@gmail.com</a>
<a href=""mailto:mi.s.s.d.on.nab180@gmail.com"">mi.s.s.d.on.nab180@gmail.com</a>
<a href=""mailto:m.i.ssd.o.n.n.a.b.180@gmail.com"">m.i.ssd.o.n.n.a.b.180@gmail.com</a>
<a href=""mailto:m.i.s.s.d.onna.b.18.0@gmail.com"">m.i.s.s.d.onna.b.18.0@gmail.com</a>
<a href=""mailto:m.i.s.s.donnab.1.80@gmail.com"">m.i.s.s.donnab.1.80@gmail.com</a>
<a href=""mailto:miss.do.n.nab180@gmail.com"">miss.do.n.nab180@gmail.com</a>
<a href=""mailto:m.iss.d.o.n.n.a.b.1.8.0@gmail.com"">m.iss.d.o.n.n.a.b.1.8.0@gmail.com</a>
<a href=""mailto:mis.sd.onn.a.b.180@gmail.com"">mis.sd.onn.a.b.180@gmail.com</a>
<a href=""mailto:m.i.s.sd.o.n.n.ab.180@gmail.com"">m.i.s.sd.o.n.n.ab.180@gmail.com</a>
<a href=""mailto:mi.ssd.onn.a.b1.80@gmail.com"">mi.ssd.onn.a.b1.80@gmail.com</a>
<a href=""mailto:mi.s.s.do.nna.b1.8.0@gmail.com"">mi.s.s.do.nna.b1.8.0@gmail.com</a>
<a href=""mailto:m.issdon.n.ab.1.8.0@gmail.com"">m.issdon.n.ab.1.8.0@gmail.com</a>
<a href=""mailto:mis.s.d.o.n.n.a.b1.80@gmail.com"">mis.s.d.o.n.n.a.b1.80@gmail.com</a>
<a href=""mailto:mis.sdon.n.a.b.180@gmail.com"">mis.sdon.n.a.b.180@gmail.com</a>
<a href=""mailto:m.i.s.sd.on.n.ab.1.80@gmail.com"">m.i.s.sd.on.n.ab.1.80@gmail.com</a>
<a href=""mailto:miss.do.nn.ab1.8.0@gmail.com"">miss.do.nn.ab1.8.0@gmail.com</a>
<a href=""mailto:m.is.sdo.nna.b1.8.0@gmail.com"">m.is.sdo.nna.b1.8.0@gmail.com</a>
<a href=""mailto:m.is.s.d.on.nab180@gmail.com"">m.is.s.d.on.nab180@gmail.com</a>
<a href=""mailto:m.i.ssdon.n.ab18.0@gmail.com"">m.i.ssdon.n.ab18.0@gmail.com</a>
<a href=""mailto:mis.sdon.n.ab18.0@gmail.com"">mis.sdon.n.ab18.0@gmail.com</a>
<a href=""mailto:m.is.sd.o.n.nab1.8.0@gmail.com"">m.is.sd.o.n.nab1.8.0@gmail.com</a>
<a href=""mailto:mi.ss.d.o.n.na.b1.8.0@gmail.com"">mi.ss.d.o.n.na.b1.8.0@gmail.com</a>
<a href=""mailto:m.is.sd.o.n.n.a.b18.0@gmail.com"">m.is.sd.o.n.n.a.b18.0@gmail.com</a>
<a href=""mailto:m.i.s.s.donn.ab180@gmail.com"">m.i.s.s.donn.ab180@gmail.com</a>
<a href=""mailto:m.is.s.donna.b.18.0@gmail.com"">m.is.s.donna.b.18.0@gmail.com</a>
<a href=""mailto:m.issd.o.n.n.ab.1.8.0@gmail.com"">m.issd.o.n.n.ab.1.8.0@gmail.com</a>
<a href=""mailto:missd.on.n.a.b18.0@gmail.com"">missd.on.n.a.b18.0@gmail.com</a>
<a href=""mailto:m.i.ssdo.n.n.ab.1.80@gmail.com"">m.i.ssdo.n.n.ab.1.80@gmail.com</a>
<a href=""mailto:mi.s.sdo.nn.ab.180@gmail.com"">mi.s.sdo.nn.ab.180@gmail.com</a>
<a href=""mailto:m.is.sdon.n.ab18.0@gmail.com"">m.is.sdon.n.ab18.0@gmail.com</a>
<a href=""mailto:m.is.sdo.nn.a.b1.80@gmail.com"">m.is.sdo.nn.a.b1.80@gmail.com</a>
<a href=""mailto:mis.sd.on.n.ab1.8.0@gmail.com"">mis.sd.on.n.ab1.8.0@gmail.com</a>
<a href=""mailto:mi.s.sdon.nab.1.8.0@gmail.com"">mi.s.sdon.nab.1.8.0@gmail.com</a>
<a href=""mailto:mi.ssd.o.n.n.ab1.80@gmail.com"">mi.ssd.o.n.n.ab1.80@gmail.com</a>
<a href=""mailto:m.is.s.don.n.ab.180@gmail.com"">m.is.s.don.n.ab.180@gmail.com</a>
<a href=""mailto:missdo.n.nab1.80@gmail.com"">missdo.n.nab1.80@gmail.com</a>
<a href=""mailto:m.i.s.sd.on.n.a.b1.80@gmail.com"">m.i.s.sd.on.n.a.b1.80@gmail.com</a>
<a href=""mailto:m.is.s.d.on.nab.18.0@gmail.com"">m.is.s.d.on.nab.18.0@gmail.com</a>
<a href=""mailto:mi.s.sd.o.nnab18.0@gmail.com"">mi.s.sd.o.nnab18.0@gmail.com</a>
<a href=""mailto:mi.s.sd.onna.b.1.80@gmail.com"">mi.s.sd.onna.b.1.80@gmail.com</a>
<a href=""mailto:mi.ss.d.o.nna.b.180@gmail.com"">mi.ss.d.o.nna.b.180@gmail.com</a>
<a href=""mailto:mi.s.s.don.n.ab.18.0@gmail.com"">mi.s.s.don.n.ab.18.0@gmail.com</a>
<a href=""mailto:m.i.ss.do.n.n.a.b.1.8.0@gmail.com"">m.i.ss.do.n.n.a.b.1.8.0@gmail.com</a>
<a href=""mailto:mi.ss.d.onn.ab.18.0@gmail.com"">mi.ss.d.onn.ab.18.0@gmail.com</a>
<a href=""mailto:mi.s.s.d.onn.a.b.1.8.0@gmail.com"">mi.s.s.d.onn.a.b.1.8.0@gmail.com</a>
<a href=""mailto:m.issd.o.nnab.18.0@gmail.com"">m.issd.o.nnab.18.0@gmail.com</a>
<a href=""mailto:m.i.s.sd.on.nab1.8.0@gmail.com"">m.i.s.sd.on.nab1.8.0@gmail.com</a>
<a href=""mailto:missdo.n.na.b18.0@gmail.com"">missdo.n.na.b18.0@gmail.com</a>
<a href=""mailto:m.i.s.s.d.o.nn.ab18.0@gmail.com"">m.i.s.s.d.o.nn.ab18.0@gmail.com</a>
<a href=""mailto:m.issdo.nnab.1.80@gmail.com"">m.issdo.nnab.1.80@gmail.com</a>
<a href=""mailto:mis.sd.on.n.a.b.1.80@gmail.com"">mis.sd.on.n.a.b.1.80@gmail.com</a>
<a href=""mailto:mis.sd.o.nn.ab.180@gmail.com"">mis.sd.o.nn.ab.180@gmail.com</a>
<a href=""mailto:m.i.ssdonn.ab180@gmail.com"">m.i.ssdonn.ab180@gmail.com</a>
<a href=""mailto:mis.s.d.on.nab.1.8.0@gmail.com"">mis.s.d.on.nab.1.8.0@gmail.com</a>
<a href=""mailto:mi.ssd.o.n.n.ab.180@gmail.com"">mi.ssd.o.n.n.ab.180@gmail.com</a>
<a href=""mailto:m.i.s.s.d.onn.a.b1.8.0@gmail.com"">m.i.s.s.d.onn.a.b1.8.0@gmail.com</a>
<a href=""mailto:m.issd.o.nn.a.b18.0@gmail.com"">m.issd.o.nn.a.b18.0@gmail.com</a>
<a href=""mailto:mis.s.d.o.n.na.b.1.8.0@gmail.com"">mis.s.d.o.n.na.b.1.8.0@gmail.com</a>
<a href=""mailto:m.i.s.s.don.na.b.180@gmail.com"">m.i.s.s.don.na.b.180@gmail.com</a>
<a href=""mailto:m.i.ssd.on.na.b.1.8.0@gmail.com"">m.i.ssd.on.na.b.1.8.0@gmail.com</a>
<a href=""mailto:miss.donna.b18.0@gmail.com"">miss.donna.b18.0@gmail.com</a>
<a href=""mailto:mis.sdon.n.ab.1.8.0@gmail.com"">mis.sdon.n.ab.1.8.0@gmail.com</a>
<a href=""mailto:m.i.s.s.donna.b.180@gmail.com"">m.i.s.s.donna.b.180@gmail.com</a>
<a href=""mailto:m.i.s.s.don.nab1.8.0@gmail.com"">m.i.s.s.don.nab1.8.0@gmail.com</a>
<a href=""mailto:mi.s.sd.o.n.na.b1.8.0@gmail.com"">mi.s.sd.o.n.na.b1.8.0@gmail.com</a>
<a href=""mailto:mi.ss.d.o.nnab.1.8.0@gmail.com"">mi.ss.d.o.nnab.1.8.0@gmail.com</a>
<a href=""mailto:mis.sdonn.ab.1.80@gmail.com"">mis.sdonn.ab.1.80@gmail.com</a>
<a href=""mailto:mi.s.s.d.onnab18.0@gmail.com"">mi.s.s.d.onnab18.0@gmail.com</a>
<a href=""mailto:mis.s.d.o.n.n.ab.1.8.0@gmail.com"">mis.s.d.o.n.n.ab.1.8.0@gmail.com</a>
<a href=""mailto:mi.ssdon.n.ab.18.0@gmail.com"">mi.ssdon.n.ab.18.0@gmail.com</a>
<a href=""mailto:m.is.s.do.n.n.ab.1.80@gmail.com"">m.is.s.do.n.n.ab.1.80@gmail.com</a>
<a href=""mailto:m.is.sdo.n.n.ab1.8.0@gmail.com"">m.is.sdo.n.n.ab1.8.0@gmail.com</a>
<a href=""mailto:m.i.s.sd.on.nab1.80@gmail.com"">m.i.s.sd.on.nab1.80@gmail.com</a>
<a href=""mailto:mi.s.sdo.nna.b180@gmail.com"">mi.s.sdo.nna.b180@gmail.com</a>
<a href=""mailto:m.issd.o.n.na.b18.0@gmail.com"">m.issd.o.n.na.b18.0@gmail.com</a>
<a href=""mailto:mis.s.d.on.n.a.b.1.80@gmail.com"">mis.s.d.on.n.a.b.1.80@gmail.com</a>
<a href=""mailto:mis.s.d.o.nn.ab18.0@gmail.com"">mis.s.d.o.nn.ab18.0@gmail.com</a>
<a href=""mailto:miss.do.nn.a.b.180@gmail.com"">miss.do.nn.a.b.180@gmail.com</a>
<a href=""mailto:m.issd.o.nnab18.0@gmail.com"">m.issd.o.nnab18.0@gmail.com</a>
<a href=""mailto:m.i.s.s.d.onna.b18.0@gmail.com"">m.i.s.s.d.onna.b18.0@gmail.com</a>
<a href=""mailto:m.issd.onnab1.8.0@gmail.com"">m.issd.onnab1.8.0@gmail.com</a>
<a href=""mailto:m.i.s.sdon.nab1.80@gmail.com"">m.i.s.sdon.nab1.80@gmail.com</a>
<a href=""mailto:m.i.ss.don.n.ab180@gmail.com"">m.i.ss.don.n.ab180@gmail.com</a>
<a href=""mailto:m.is.sd.o.nna.b.18.0@gmail.com"">m.is.sd.o.nna.b.18.0@gmail.com</a>
<a href=""mailto:mi.ss.donna.b1.8.0@gmail.com"">mi.ss.donna.b1.8.0@gmail.com</a>
<a href=""mailto:m.i.ssdo.nnab.1.80@gmail.com"">m.i.ssdo.nnab.1.80@gmail.com</a>
<a href=""mailto:mi.s.s.donnab.180@gmail.com"">mi.s.s.donnab.180@gmail.com</a>
<a href=""mailto:m.i.s.sd.o.n.n.a.b1.8.0@gmail.com"">m.i.s.sd.o.n.n.a.b1.8.0@gmail.com</a>
<a href=""mailto:m.is.s.d.o.n.na.b1.8.0@gmail.com"">m.is.s.d.o.n.na.b1.8.0@gmail.com</a>
<a href=""mailto:mi.ss.d.onnab.18.0@gmail.com"">mi.ss.d.onnab.18.0@gmail.com</a>
<a href=""mailto:mi.ssdo.nn.ab.1.8.0@gmail.com"">mi.ssdo.nn.ab.1.8.0@gmail.com</a>
<a href=""mailto:m.i.s.sd.o.nna.b.1.8.0@gmail.com"">m.i.s.sd.o.nna.b.1.8.0@gmail.com</a>
<a href=""mailto:m.iss.do.nna.b.18.0@gmail.com"">m.iss.do.nna.b.18.0@gmail.com</a>
<a href=""mailto:m.i.ssdo.n.na.b1.8.0@gmail.com"">m.i.ssdo.n.na.b1.8.0@gmail.com</a>
<a href=""mailto:mi.s.s.d.o.nna.b.1.80@gmail.com"">mi.s.s.d.o.nna.b.1.80@gmail.com</a>
<a href=""mailto:mi.ssdo.n.na.b1.80@gmail.com"">mi.ssdo.n.na.b1.80@gmail.com</a>
<a href=""mailto:miss.do.n.n.ab.180@gmail.com"">miss.do.n.n.ab.180@gmail.com</a>
<a href=""mailto:mi.ssd.on.na.b1.8.0@gmail.com"">mi.ssd.on.na.b1.8.0@gmail.com</a>
<a href=""mailto:miss.d.on.n.a.b180@gmail.com"">miss.d.on.n.a.b180@gmail.com</a>
<a href=""mailto:m.i.ssdonna.b.180@gmail.com"">m.i.ssdonna.b.180@gmail.com</a>
<a href=""mailto:miss.do.n.n.a.b1.80@gmail.com"">miss.do.n.n.a.b1.80@gmail.com</a>
<a href=""mailto:m.iss.d.o.n.n.a.b1.8.0@gmail.com"">m.iss.d.o.n.n.a.b1.8.0@gmail.com</a>
<a href=""mailto:m.iss.d.on.nab18.0@gmail.com"">m.iss.d.on.nab18.0@gmail.com</a>
<a href=""mailto:m.iss.do.n.na.b.18.0@gmail.com"">m.iss.do.n.na.b.18.0@gmail.com</a>
<a href=""mailto:m.i.ssdo.n.n.a.b.1.80@gmail.com"">m.i.ssdo.n.n.a.b.1.80@gmail.com</a>
<a href=""mailto:m.issd.o.nn.ab.180@gmail.com"">m.issd.o.nn.ab.180@gmail.com</a>
<a href=""mailto:m.is.s.do.n.na.b1.8.0@gmail.com"">m.is.s.do.n.na.b1.8.0@gmail.com</a>
<a href=""mailto:m.is.s.do.nna.b1.80@gmail.com"">m.is.s.do.nna.b1.80@gmail.com</a>
<a href=""mailto:mi.ssdo.n.na.b1.8.0@gmail.com"">mi.ssdo.n.na.b1.8.0@gmail.com</a>
<a href=""mailto:mi.s.sd.on.n.ab180@gmail.com"">mi.s.sd.on.n.ab180@gmail.com</a>
<a href=""mailto:miss.d.o.n.na.b.1.80@gmail.com"">miss.d.o.n.na.b.1.80@gmail.com</a>
<a href=""mailto:m.is.sdo.n.n.a.b18.0@gmail.com"">m.is.sdo.n.n.a.b18.0@gmail.com</a>
<a href=""mailto:miss.d.on.n.ab18.0@gmail.com"">miss.d.on.n.ab18.0@gmail.com</a>
<a href=""mailto:mi.ss.d.o.nna.b18.0@gmail.com"">mi.ss.d.o.nna.b18.0@gmail.com</a>
<a href=""mailto:missd.onnab.1.8.0@gmail.com"">missd.onnab.1.8.0@gmail.com</a>
<a href=""mailto:mi.ss.do.n.na.b180@gmail.com"">mi.ss.do.n.na.b180@gmail.com</a>
<a href=""mailto:missd.o.nn.a.b1.80@gmail.com"">missd.o.nn.a.b1.80@gmail.com</a>
<a href=""mailto:m.is.s.d.on.na.b18.0@gmail.com"">m.is.s.d.on.na.b18.0@gmail.com</a>
<a href=""mailto:miss.d.onnab18.0@gmail.com"">miss.d.onnab18.0@gmail.com</a>
<a href=""mailto:m.is.sdo.n.na.b.180@gmail.com"">m.is.sdo.n.na.b.180@gmail.com</a>
<a href=""mailto:m.i.s.s.donn.a.b180@gmail.com"">m.i.s.s.donn.a.b180@gmail.com</a>
<a href=""mailto:mi.ssd.onn.ab.18.0@gmail.com"">mi.ssd.onn.ab.18.0@gmail.com</a>
<a href=""mailto:m.i.ssd.on.n.ab.1.8.0@gmail.com"">m.i.ssd.on.n.ab.1.8.0@gmail.com</a>
<a href=""mailto:miss.d.on.n.ab.1.8.0@gmail.com"">miss.d.on.n.ab.1.8.0@gmail.com</a>
<a href=""mailto:missdonnabrownlov14@gmail.com"">missdonnabrownlov14@gmail.com</a>
<a href=""mailto:m.i.s.s.do.n.nab.rown.l.o.v1.4@gmail.com"">m.i.s.s.do.n.nab.rown.l.o.v1.4@gmail.com</a>
<a href=""mailto:mi.s.s.do.nn.a.br.own.lo.v1.4@gmail.com"">mi.s.s.do.nn.a.br.own.lo.v1.4@gmail.com</a>
<a href=""mailto:m.issd.on.na.br.ow.nl.o.v14@gmail.com"">m.issd.on.na.br.ow.nl.o.v14@gmail.com</a>
<a href=""mailto:m.is.s.donna.b.row.nl.o.v14@gmail.com"">m.is.s.donna.b.row.nl.o.v14@gmail.com</a>
<a href=""mailto:mi.s.sdon.n.abrown.l.ov.14@gmail.com"">mi.s.sdon.n.abrown.l.ov.14@gmail.com</a>
<a href=""mailto:m.is.sd.on.n.a.bro.w.n.lov14@gmail.com"">m.is.sd.on.n.a.bro.w.n.lov14@gmail.com</a>
<a href=""mailto:mi.s.sd.o.nn.a.bro.wn.l.o.v14@gmail.com"">mi.s.sd.o.nn.a.bro.wn.l.o.v14@gmail.com</a>
<a href=""mailto:mi.s.sdo.n.nabr.o.wn.l.ov14@gmail.com"">mi.s.sdo.n.nabr.o.wn.l.ov14@gmail.com</a>
<a href=""mailto:m.is.sd.o.nna.br.o.w.n.l.o.v1.4@gmail.com"">m.is.sd.o.nna.br.o.w.n.l.o.v1.4@gmail.com</a>
<a href=""mailto:mis.sd.o.n.n.ab.r.ow.n.l.ov.1.4@gmail.com"">mis.sd.o.n.n.ab.r.ow.n.l.ov.1.4@gmail.com</a>
<a href=""mailto:mi.s.s.don.na.brownl.ov14@gmail.com"">mi.s.s.don.na.brownl.ov14@gmail.com</a>
<a href=""mailto:m.i.ssd.on.nab.rownl.o.v.14@gmail.com"">m.i.ssd.on.nab.rownl.o.v.14@gmail.com</a>
<a href=""mailto:m.is.s.d.o.nn.a.br.o.w.n.lov1.4@gmail.com"">m.is.s.d.o.nn.a.br.o.w.n.lov1.4@gmail.com</a>
<a href=""mailto:miss.don.n.abr.o.w.n.lo.v14@gmail.com"">miss.don.n.abr.o.w.n.lo.v14@gmail.com</a>
<a href=""mailto:m.iss.do.nna.br.ow.nl.ov.14@gmail.com"">m.iss.do.nna.br.ow.nl.ov.14@gmail.com</a>
<a href=""mailto:m.i.s.sd.o.nnabr.o.w.n.l.ov1.4@gmail.com"">m.i.s.sd.o.nnabr.o.w.n.l.ov1.4@gmail.com</a>
<a href=""mailto:m.i.ssd.o.n.n.a.b.r.o.w.nl.ov.14@gmail.com"">m.i.ssd.o.n.n.a.b.r.o.w.nl.ov.14@gmail.com</a>
<a href=""mailto:mi.ss.d.o.nn.a.b.r.own.lo.v.1.4@gmail.com"">mi.ss.d.o.nn.a.b.r.own.lo.v.1.4@gmail.com</a>
<a href=""mailto:mis.sdonna.brown.l.o.v1.4@gmail.com"">mis.sdonna.brown.l.o.v1.4@gmail.com</a>
<a href=""mailto:mi.ss.donna.b.r.ownl.o.v14@gmail.com"">mi.ss.donna.b.r.ownl.o.v14@gmail.com</a>
<a href=""mailto:m.i.ssd.o.n.nab.r.own.lov.1.4@gmail.com"">m.i.ssd.o.n.nab.r.own.lov.1.4@gmail.com</a>
<a href=""mailto:m.i.s.s.do.n.na.b.r.ow.n.l.o.v1.4@gmail.com"">m.i.s.s.do.n.na.b.r.ow.n.l.o.v1.4@gmail.com</a>
<a href=""mailto:mi.ss.donna.br.ow.nl.o.v14@gmail.com"">mi.ss.donna.br.ow.nl.o.v14@gmail.com</a>
<a href=""mailto:m.iss.do.n.n.ab.row.n.lo.v1.4@gmail.com"">m.iss.do.n.n.ab.row.n.lo.v1.4@gmail.com</a>
<a href=""mailto:m.iss.do.nnab.r.ow.n.lo.v14@gmail.com"">m.iss.do.nnab.r.ow.n.lo.v14@gmail.com</a>
<a href=""mailto:m.is.sdon.na.b.row.nlov1.4@gmail.com"">m.is.sdon.na.b.row.nlov1.4@gmail.com</a>
<a href=""mailto:m.i.ssd.o.n.nab.row.nl.ov1.4@gmail.com"">m.i.ssd.o.n.nab.row.nl.ov1.4@gmail.com</a>
<a href=""mailto:mi.s.sdo.nnabrownl.o.v14@gmail.com"">mi.s.sdo.nnabrownl.o.v14@gmail.com</a>
<a href=""mailto:mis.s.do.n.n.ab.r.o.w.nlov14@gmail.com"">mis.s.do.n.n.ab.r.o.w.nlov14@gmail.com</a>
<a href=""mailto:m.issdon.n.a.brow.nl.ov.1.4@gmail.com"">m.issdon.n.a.brow.nl.ov.1.4@gmail.com</a>
<a href=""mailto:m.iss.d.o.n.nab.ro.wn.lo.v1.4@gmail.com"">m.iss.d.o.n.nab.ro.wn.lo.v1.4@gmail.com</a>
<a href=""mailto:m.i.ssdo.n.na.b.r.o.w.n.lov.1.4@gmail.com"">m.i.ssdo.n.na.b.r.o.w.n.lov.1.4@gmail.com</a>
<a href=""mailto:m.is.s.don.n.ab.ro.w.n.l.ov14@gmail.com"">m.is.s.don.n.ab.ro.w.n.l.ov14@gmail.com</a>
<a href=""mailto:m.issdo.nn.abro.wnl.ov.14@gmail.com"">m.issdo.nn.abro.wnl.ov.14@gmail.com</a>
<a href=""mailto:m.iss.d.o.nn.abr.ow.n.l.ov14@gmail.com"">m.iss.d.o.nn.abr.ow.n.l.ov14@gmail.com</a>
<a href=""mailto:mi.s.s.donnabrow.nl.o.v14@gmail.com"">mi.s.s.donnabrow.nl.o.v14@gmail.com</a>
<a href=""mailto:mi.s.s.d.o.nn.a.brow.n.lov.14@gmail.com"">mi.s.s.d.o.nn.a.brow.n.lov.14@gmail.com</a>
<a href=""mailto:mi.s.s.don.n.abro.w.n.lov.14@gmail.com"">mi.s.s.don.n.abro.w.n.lov.14@gmail.com</a>
<a href=""mailto:mi.ss.d.o.n.na.b.rownlo.v.1.4@gmail.com"">mi.ss.d.o.n.na.b.rownlo.v.1.4@gmail.com</a>
<a href=""mailto:miss.d.o.nn.abro.w.nlo.v.14@gmail.com"">miss.d.o.nn.abro.w.nlo.v.14@gmail.com</a>
<a href=""mailto:missd.onn.ab.r.ow.n.l.o.v1.4@gmail.com"">missd.onn.ab.r.ow.n.l.o.v1.4@gmail.com</a>
<a href=""mailto:m.i.ssdo.n.n.a.b.ro.w.n.lov14@gmail.com"">m.i.ssdo.n.n.a.b.ro.w.n.lov14@gmail.com</a>
<a href=""mailto:m.is.sd.on.n.a.br.ow.nl.ov.1.4@gmail.com"">m.is.sd.on.n.a.br.ow.nl.ov.1.4@gmail.com</a>
<a href=""mailto:m.i.ss.d.o.n.n.a.b.r.o.wnl.ov.1.4@gmail.com"">m.i.ss.d.o.n.n.a.b.r.o.wnl.ov.1.4@gmail.com</a>
<a href=""mailto:mi.s.sd.onn.abro.wnl.ov14@gmail.com"">mi.s.sd.onn.abro.wnl.ov14@gmail.com</a>
<a href=""mailto:mi.s.sdo.nn.a.b.r.o.wn.l.ov1.4@gmail.com"">mi.s.sdo.nn.a.b.r.o.wn.l.ov1.4@gmail.com</a>
<a href=""mailto:mi.s.s.d.o.n.nabro.wn.l.o.v14@gmail.com"">mi.s.s.d.o.n.nabro.wn.l.o.v14@gmail.com</a>
<a href=""mailto:m.i.s.s.do.n.na.bro.w.nlo.v.1.4@gmail.com"">m.i.s.s.do.n.na.bro.w.nlo.v.1.4@gmail.com</a>
<a href=""mailto:mis.sd.o.n.na.b.ro.w.nl.o.v.1.4@gmail.com"">mis.sd.o.n.na.b.ro.w.nl.o.v.1.4@gmail.com</a>
<a href=""mailto:m.iss.don.n.a.brown.lo.v.1.4@gmail.com"">m.iss.don.n.a.brown.lo.v.1.4@gmail.com</a>
<a href=""mailto:mis.sd.o.nn.ab.ro.wnlo.v.14@gmail.com"">mis.sd.o.nn.ab.ro.wnlo.v.14@gmail.com</a>
<a href=""mailto:m.i.ssd.o.nnab.ro.w.nlo.v.1.4@gmail.com"">m.i.ssd.o.nnab.ro.w.nlo.v.1.4@gmail.com</a>
<a href=""mailto:m.is.sd.o.nn.ab.ro.wn.lov.14@gmail.com"">m.is.sd.o.nn.ab.ro.wn.lov.14@gmail.com</a>
<a href=""mailto:mis.sd.on.n.a.br.o.wnl.ov.1.4@gmail.com"">mis.sd.on.n.a.br.o.wnl.ov.1.4@gmail.com</a>
<a href=""mailto:m.i.s.s.d.o.nn.abr.o.wn.lo.v14@gmail.com"">m.i.s.s.d.o.nn.abr.o.wn.lo.v14@gmail.com</a>
<a href=""mailto:m.is.s.do.n.na.b.r.o.w.nlo.v1.4@gmail.com"">m.is.s.do.n.na.b.r.o.w.nlo.v1.4@gmail.com</a>
<a href=""mailto:mi.ssd.o.n.nabrow.nlo.v.14@gmail.com"">mi.ssd.o.n.nabrow.nlo.v.14@gmail.com</a>
<a href=""mailto:m.i.s.s.d.onnab.r.ownl.ov14@gmail.com"">m.i.s.s.d.onnab.r.ownl.ov14@gmail.com</a>
<a href=""mailto:mis.sdon.na.br.o.w.nlo.v14@gmail.com"">mis.sdon.na.br.o.w.nlo.v14@gmail.com</a>
<a href=""mailto:mi.ss.donn.a.brown.l.o.v.14@gmail.com"">mi.ss.donn.a.brown.l.o.v.14@gmail.com</a>
<a href=""mailto:m.is.s.do.n.nab.r.o.w.nlov.14@gmail.com"">m.is.s.do.n.nab.r.o.w.nlov.14@gmail.com</a>
<a href=""mailto:m.i.ssd.o.nn.abrownlo.v1.4@gmail.com"">m.i.ssd.o.nn.abrownlo.v1.4@gmail.com</a>
<a href=""mailto:missd.o.n.na.b.r.ow.n.l.o.v1.4@gmail.com"">missd.o.n.na.b.r.ow.n.l.o.v1.4@gmail.com</a>
<a href=""mailto:mis.sd.o.nn.ab.r.o.w.nlov.1.4@gmail.com"">mis.sd.o.nn.ab.r.o.w.nlov.1.4@gmail.com</a>
<a href=""mailto:m.i.ss.d.o.n.n.a.b.ro.wn.lo.v.1.4@gmail.com"">m.i.ss.d.o.n.n.a.b.ro.wn.lo.v.1.4@gmail.com</a>
<a href=""mailto:mi.s.sdo.n.nab.r.o.w.n.lo.v1.4@gmail.com"">mi.s.sdo.n.nab.r.o.w.n.lo.v1.4@gmail.com</a>
<a href=""mailto:m.is.s.don.na.b.r.own.l.ov.1.4@gmail.com"">m.is.s.don.na.b.r.own.l.ov.1.4@gmail.com</a>
<a href=""mailto:mi.ssdonn.abrow.n.l.ov14@gmail.com"">mi.ssdonn.abrow.n.l.ov14@gmail.com</a>
<a href=""mailto:m.i.ss.don.na.b.r.ow.n.lov.14@gmail.com"">m.i.ss.don.na.b.r.ow.n.lov.14@gmail.com</a>
<a href=""mailto:m.issd.on.na.b.r.ow.n.l.o.v.1.4@gmail.com"">m.issd.on.na.b.r.ow.n.l.o.v.1.4@gmail.com</a>
<a href=""mailto:mis.s.d.onna.brow.nlov.1.4@gmail.com"">mis.s.d.onna.brow.nlov.1.4@gmail.com</a>
<a href=""mailto:mi.ss.d.on.n.ab.r.own.l.o.v.14@gmail.com"">mi.ss.d.on.n.ab.r.own.l.o.v.14@gmail.com</a>
<a href=""mailto:mi.s.s.don.n.abro.wn.lo.v1.4@gmail.com"">mi.s.s.don.n.abro.wn.lo.v1.4@gmail.com</a>
<a href=""mailto:m.iss.d.onnab.r.ow.nlov.1.4@gmail.com"">m.iss.d.onnab.r.ow.nlov.1.4@gmail.com</a>
<a href=""mailto:mis.sdo.n.n.a.bro.wn.l.ov.1.4@gmail.com"">mis.sdo.n.n.a.bro.wn.l.ov.1.4@gmail.com</a>
<a href=""mailto:m.iss.donn.abr.own.lov14@gmail.com"">m.iss.donn.abr.own.lov14@gmail.com</a>
<a href=""mailto:mi.s.s.d.o.nna.brownl.o.v1.4@gmail.com"">mi.s.s.d.o.nna.brownl.o.v1.4@gmail.com</a>
<a href=""mailto:missd.onn.a.bro.w.n.l.ov.14@gmail.com"">missd.onn.a.bro.w.n.l.ov.14@gmail.com</a>
<a href=""mailto:m.iss.don.na.b.ro.w.n.lov.14@gmail.com"">m.iss.don.na.b.ro.w.n.lov.14@gmail.com</a>
<a href=""mailto:m.i.s.s.do.nna.b.r.ow.n.lo.v.1.4@gmail.com"">m.i.s.s.do.nna.b.r.ow.n.lo.v.1.4@gmail.com</a>
<a href=""mailto:mis.sdonn.a.br.o.wn.l.o.v.14@gmail.com"">mis.sdonn.a.br.o.wn.l.o.v.14@gmail.com</a>
<a href=""mailto:m.issd.o.nn.a.bro.wnlov14@gmail.com"">m.issd.o.nn.a.bro.wnlov14@gmail.com</a>
<a href=""mailto:missd.onn.a.b.r.o.w.n.lo.v1.4@gmail.com"">missd.onn.a.b.r.o.w.n.lo.v1.4@gmail.com</a>
<a href=""mailto:mi.ss.do.n.n.a.b.ro.wn.lov.1.4@gmail.com"">mi.ss.do.n.n.a.b.ro.wn.lov.1.4@gmail.com</a>
<a href=""mailto:m.i.s.s.do.n.nabr.ow.nlov.14@gmail.com"">m.i.s.s.do.n.nabr.ow.nlov.14@gmail.com</a>
<a href=""mailto:mis.s.d.onnab.r.ow.n.lo.v.1.4@gmail.com"">mis.s.d.onnab.r.ow.n.lo.v.1.4@gmail.com</a>
<a href=""mailto:mi.ss.d.o.n.na.br.ownl.o.v.14@gmail.com"">mi.ss.d.o.n.na.br.ownl.o.v.14@gmail.com</a>
<a href=""mailto:mi.ss.don.nab.ro.w.nl.o.v1.4@gmail.com"">mi.ss.don.nab.ro.w.nl.o.v1.4@gmail.com</a>
<a href=""mailto:mi.s.sd.on.n.ab.r.o.wnlov.1.4@gmail.com"">mi.s.sd.on.n.ab.r.o.wnlov.1.4@gmail.com</a>
<a href=""mailto:m.i.s.sdo.nn.a.brownlo.v1.4@gmail.com"">m.i.s.sdo.nn.a.brownlo.v1.4@gmail.com</a>
<a href=""mailto:m.i.ss.d.o.n.na.br.ownl.o.v.1.4@gmail.com"">m.i.ss.d.o.n.na.br.ownl.o.v.1.4@gmail.com</a>
<a href=""mailto:m.iss.don.n.abrow.n.lov.14@gmail.com"">m.iss.don.n.abrow.n.lov.14@gmail.com</a>
<a href=""mailto:m.issd.on.n.abrow.nlov.1.4@gmail.com"">m.issd.on.n.abrow.nlov.1.4@gmail.com</a>
<a href=""mailto:m.is.sd.on.n.a.b.ro.w.nlo.v1.4@gmail.com"">m.is.sd.on.n.a.b.ro.w.nlo.v1.4@gmail.com</a>
<a href=""mailto:mi.s.sd.onna.b.row.n.l.ov1.4@gmail.com"">mi.s.sd.onna.b.row.n.l.ov1.4@gmail.com</a>
<a href=""mailto:m.is.sd.o.n.nabro.w.n.lo.v1.4@gmail.com"">m.is.sd.o.n.nabro.w.n.lo.v1.4@gmail.com</a>
<a href=""mailto:m.i.ssdo.nna.b.row.n.lo.v1.4@gmail.com"">m.i.ssdo.nna.b.row.n.lo.v1.4@gmail.com</a>
<a href=""mailto:m.i.s.sd.o.n.n.a.b.ro.w.nlo.v14@gmail.com"">m.i.s.sd.o.n.n.a.b.ro.w.nlo.v14@gmail.com</a>
<a href=""mailto:m.issdo.nn.abr.ow.n.l.ov.14@gmail.com"">m.issdo.nn.abr.ow.n.l.ov.14@gmail.com</a>
<a href=""mailto:m.i.ss.donnabr.o.w.nl.ov.1.4@gmail.com"">m.i.ss.donnabr.o.w.nl.ov.1.4@gmail.com</a>
<a href=""mailto:m.i.ssd.onna.br.o.wn.l.ov.1.4@gmail.com"">m.i.ssd.onna.br.o.wn.l.ov.1.4@gmail.com</a>
<a href=""mailto:m.i.ssdon.nabr.own.l.o.v1.4@gmail.com"">m.i.ssdon.nabr.own.l.o.v1.4@gmail.com</a>
<a href=""mailto:m.is.s.d.o.nnab.ro.w.n.lo.v.1.4@gmail.com"">m.is.s.d.o.nnab.ro.w.n.lo.v.1.4@gmail.com</a>
<a href=""mailto:mi.ssdon.na.br.ow.n.l.o.v14@gmail.com"">mi.ssdon.na.br.ow.n.l.o.v14@gmail.com</a>
<a href=""mailto:m.is.s.do.n.n.a.b.r.own.l.ov.1.4@gmail.com"">m.is.s.do.n.n.a.b.r.own.l.ov.1.4@gmail.com</a>
<a href=""mailto:m.i.s.s.don.nabr.o.wnl.ov14@gmail.com"">m.i.s.s.don.nabr.o.wnl.ov14@gmail.com</a>
<a href=""mailto:mis.sdo.n.n.abro.w.nlo.v1.4@gmail.com"">mis.sdo.n.n.abro.w.nlo.v1.4@gmail.com</a>
<a href=""mailto:m.is.sdon.na.br.o.w.n.l.o.v14@gmail.com"">m.is.sdon.na.br.o.w.n.l.o.v14@gmail.com</a>
<a href=""mailto:mis.s.d.o.n.na.brow.nlo.v14@gmail.com"">mis.s.d.o.n.na.brow.nlo.v14@gmail.com</a>
<a href=""mailto:m.iss.do.nnabr.o.w.n.l.o.v1.4@gmail.com"">m.iss.do.nnabr.o.w.n.l.o.v1.4@gmail.com</a>
<a href=""mailto:m.i.ssdo.nn.ab.r.ow.n.lov14@gmail.com"">m.i.ssdo.nn.ab.r.ow.n.lov14@gmail.com</a>
<a href=""mailto:missdonnab.ro.wnlov.1.4@gmail.com"">missdonnab.ro.wnlov.1.4@gmail.com</a>
<a href=""mailto:mi.ss.donn.ab.row.nl.o.v.14@gmail.com"">mi.ss.donn.ab.row.nl.o.v.14@gmail.com</a>
<a href=""mailto:mi.s.sd.on.n.ab.r.ow.nlov1.4@gmail.com"">mi.s.sd.on.n.ab.r.ow.nlov1.4@gmail.com</a>
<a href=""mailto:m.i.s.s.d.o.n.n.abr.o.wnlov1.4@gmail.com"">m.i.s.s.d.o.n.n.abr.o.wnlov1.4@gmail.com</a>
<a href=""mailto:mi.s.s.d.o.n.n.abro.w.n.lo.v.1.4@gmail.com"">mi.s.s.d.o.n.n.abro.w.n.lo.v.1.4@gmail.com</a>
<a href=""mailto:missdo.n.nabro.wn.lov.14@gmail.com"">missdo.n.nabro.wn.lov.14@gmail.com</a>
<a href=""mailto:mis.s.donna.b.r.own.l.ov1.4@gmail.com"">mis.s.donna.b.r.own.l.ov1.4@gmail.com</a>
<a href=""mailto:mi.s.sd.on.na.b.r.o.wnlo.v.14@gmail.com"">mi.s.sd.on.na.b.r.o.wnlo.v.14@gmail.com</a>
<a href=""mailto:mi.s.s.donnabr.own.l.ov.1.4@gmail.com"">mi.s.s.donnabr.own.l.ov.1.4@gmail.com</a>
<a href=""mailto:m.i.ss.d.onnab.r.ow.n.l.ov14@gmail.com"">m.i.ss.d.onnab.r.ow.n.l.ov14@gmail.com</a>
<a href=""mailto:m.issd.o.nn.a.b.ro.wnlov.1.4@gmail.com"">m.issd.o.nn.a.b.ro.wnlov.1.4@gmail.com</a>
<a href=""mailto:mi.s.s.d.o.nnabr.ow.nl.o.v14@gmail.com"">mi.s.s.d.o.nnabr.ow.nl.o.v14@gmail.com</a>
<a href=""mailto:missdo.n.n.abro.wnl.ov.14@gmail.com"">missdo.n.n.abro.wnl.ov.14@gmail.com</a>
<a href=""mailto:mi.s.sd.o.nna.b.row.n.lo.v.14@gmail.com"">mi.s.sd.o.nna.b.row.n.lo.v.14@gmail.com</a>
<a href=""mailto:m.issd.o.n.n.a.b.row.n.l.o.v.1.4@gmail.com"">m.issd.o.n.n.a.b.row.n.l.o.v.1.4@gmail.com</a>
<a href=""mailto:m.i.s.sdon.n.ab.rown.l.o.v1.4@gmail.com"">m.i.s.sdon.n.ab.rown.l.o.v1.4@gmail.com</a>
<a href=""mailto:missdonn.abr.o.w.nl.ov1.4@gmail.com"">missdonn.abr.o.w.nl.ov1.4@gmail.com</a>
<a href=""mailto:mi.ss.do.n.na.br.o.wnlo.v14@gmail.com"">mi.ss.do.n.na.br.o.wnlo.v14@gmail.com</a>
<a href=""mailto:m.i.s.sd.on.n.a.bro.wnlov.1.4@gmail.com"">m.i.s.sd.on.n.a.bro.wnlov.1.4@gmail.com</a>
<a href=""mailto:mi.s.sdo.n.n.a.brow.nlo.v14@gmail.com"">mi.s.sdo.n.n.a.brow.nlo.v14@gmail.com</a>
<a href=""mailto:mi.ss.do.n.n.a.bro.w.n.lo.v.14@gmail.com"">mi.ss.do.n.n.a.bro.w.n.lo.v.14@gmail.com</a>
<a href=""mailto:mi.s.s.do.nn.a.b.ro.wnlo.v.14@gmail.com"">mi.s.s.do.nn.a.b.ro.wnlo.v.14@gmail.com</a>
<a href=""mailto:m.is.sdonn.a.b.ro.wnlo.v.14@gmail.com"">m.is.sdonn.a.b.ro.wnlo.v.14@gmail.com</a>
<a href=""mailto:m.issd.onn.ab.r.o.wn.lo.v14@gmail.com"">m.issd.onn.ab.r.o.wn.lo.v14@gmail.com</a>
<a href=""mailto:m.i.s.sdo.n.n.a.b.ro.wn.lo.v.1.4@gmail.com"">m.i.s.sdo.n.n.a.b.ro.wn.lo.v.1.4@gmail.com</a>
<a href=""mailto:mi.s.s.do.n.na.br.o.wn.lov.14@gmail.com"">mi.s.s.do.n.na.br.o.wn.lov.14@gmail.com</a>
<a href=""mailto:mi.s.s.d.onn.a.bro.w.nl.ov.1.4@gmail.com"">mi.s.s.d.onn.a.bro.w.nl.ov.1.4@gmail.com</a>
<a href=""mailto:m.issdon.n.abrow.nlo.v.14@gmail.com"">m.issdon.n.abrow.nlo.v.14@gmail.com</a>
<a href=""mailto:m.is.s.d.o.nna.brownl.ov1.4@gmail.com"">m.is.s.d.o.nna.brownl.ov1.4@gmail.com</a>
<a href=""mailto:mis.s.don.n.a.b.r.o.wn.lov.14@gmail.com"">mis.s.don.n.a.b.r.o.wn.lov.14@gmail.com</a>
<a href=""mailto:mi.s.sd.on.na.b.row.nl.ov.14@gmail.com"">mi.s.sd.on.na.b.row.nl.ov.14@gmail.com</a>
<a href=""mailto:m.issd.o.nn.a.b.r.o.w.n.lov.1.4@gmail.com"">m.issd.o.nn.a.b.r.o.w.n.lov.1.4@gmail.com</a>
<a href=""mailto:m.i.ss.d.o.nnabr.ow.n.lo.v14@gmail.com"">m.i.ss.d.o.nnabr.ow.n.lo.v14@gmail.com</a>
<a href=""mailto:m.is.s.do.nnab.r.o.wnlov.1.4@gmail.com"">m.is.s.do.nnab.r.o.wnlov.1.4@gmail.com</a>
<a href=""mailto:m.i.s.s.do.nn.a.br.o.w.n.lov1.4@gmail.com"">m.i.s.s.do.nn.a.br.o.w.n.lov1.4@gmail.com</a>
<a href=""mailto:m.i.ss.donnabr.ow.n.lo.v.14@gmail.com"">m.i.ss.donnabr.ow.n.lo.v.14@gmail.com</a>
<a href=""mailto:mi.s.sd.on.na.br.ow.nl.ov14@gmail.com"">mi.s.sd.on.na.br.ow.nl.ov14@gmail.com</a>
<a href=""mailto:miss.d.o.n.n.ab.r.own.l.o.v1.4@gmail.com"">miss.d.o.n.n.ab.r.own.l.o.v1.4@gmail.com</a>
<a href=""mailto:mi.ssd.o.n.n.a.b.row.n.l.o.v.14@gmail.com"">mi.ssd.o.n.n.a.b.row.n.l.o.v.14@gmail.com</a>
<a href=""mailto:m.i.ss.do.nnabr.o.w.nlov1.4@gmail.com"">m.i.ss.do.nnabr.o.w.nlov1.4@gmail.com</a>
<a href=""mailto:m.iss.do.nn.ab.rownlov14@gmail.com"">m.iss.do.nn.ab.rownlov14@gmail.com</a>
<a href=""mailto:m.is.s.d.o.nn.ab.row.n.l.ov1.4@gmail.com"">m.is.s.d.o.nn.ab.row.n.l.ov1.4@gmail.com</a>
<a href=""mailto:m.i.s.sd.o.nn.abr.o.w.nl.o.v.14@gmail.com"">m.i.s.sd.o.nn.abr.o.w.nl.o.v.14@gmail.com</a>
<a href=""mailto:m.i.ss.donn.a.br.own.l.o.v.14@gmail.com"">m.i.ss.donn.a.br.own.l.o.v.14@gmail.com</a>
<a href=""mailto:miss.d.o.n.nabr.o.wn.lo.v14@gmail.com"">miss.d.o.n.nabr.o.wn.lo.v14@gmail.com</a>
<a href=""mailto:m.is.sd.o.n.nabr.o.wn.lov.14@gmail.com"">m.is.sd.o.n.nabr.o.wn.lov.14@gmail.com</a>
<a href=""mailto:m.is.sdon.n.ab.ro.wnl.ov1.4@gmail.com"">m.is.sdon.n.ab.ro.wnl.ov1.4@gmail.com</a>
<a href=""mailto:mi.s.sdon.nabr.o.wn.l.ov.1.4@gmail.com"">mi.s.sdon.nabr.o.wn.l.ov.1.4@gmail.com</a>
<a href=""mailto:m.i.s.s.do.n.n.ab.r.o.wnl.o.v14@gmail.com"">m.i.s.s.do.n.n.ab.r.o.wnl.o.v14@gmail.com</a>
<a href=""mailto:m.is.sd.on.n.a.b.rownlov.14@gmail.com"">m.is.sd.on.n.a.b.rownlov.14@gmail.com</a>
<a href=""mailto:m.i.s.sdo.nn.a.b.row.nl.ov1.4@gmail.com"">m.i.s.sdo.nn.a.b.row.nl.ov1.4@gmail.com</a>
<a href=""mailto:m.i.s.s.d.o.n.nab.r.o.wn.l.ov1.4@gmail.com"">m.i.s.s.d.o.n.nab.r.o.wn.l.ov1.4@gmail.com</a>
<a href=""mailto:m.i.s.s.d.on.nabr.o.w.nlo.v.1.4@gmail.com"">m.i.s.s.d.on.nabr.o.w.nlo.v.1.4@gmail.com</a>
<a href=""mailto:mis.s.do.n.na.b.row.nl.o.v1.4@gmail.com"">mis.s.do.n.na.b.row.nl.o.v1.4@gmail.com</a>
<a href=""mailto:m.is.sd.o.nnabr.ow.n.lov14@gmail.com"">m.is.sd.o.nnabr.ow.n.lov14@gmail.com</a>
<a href=""mailto:mis.s.don.n.a.b.r.own.lo.v1.4@gmail.com"">mis.s.don.n.a.b.r.own.lo.v1.4@gmail.com</a>
<a href=""mailto:missdon.n.a.b.r.o.wn.lo.v14@gmail.com"">missdon.n.a.b.r.o.wn.lo.v14@gmail.com</a>
<a href=""mailto:m.is.sd.o.n.n.abr.o.wnlo.v1.4@gmail.com"">m.is.sd.o.n.n.abr.o.wnlo.v1.4@gmail.com</a>
<a href=""mailto:mi.ss.don.n.ab.r.o.w.nl.o.v14@gmail.com"">mi.ss.don.n.ab.r.o.w.nl.o.v14@gmail.com</a>
<a href=""mailto:m.issd.o.nn.a.brow.nl.ov1.4@gmail.com"">m.issd.o.nn.a.brow.nl.ov1.4@gmail.com</a>
<a href=""mailto:m.is.s.do.nn.ab.row.n.lo.v1.4@gmail.com"">m.is.s.do.nn.ab.row.n.lo.v1.4@gmail.com</a>
<a href=""mailto:mis.s.d.o.n.nab.r.o.wnl.ov.1.4@gmail.com"">mis.s.d.o.n.nab.r.o.wnl.ov.1.4@gmail.com</a>
<a href=""mailto:m.iss.don.n.a.brow.nlov1.4@gmail.com"">m.iss.don.n.a.brow.nlov1.4@gmail.com</a>
<a href=""mailto:m.i.ss.d.on.n.abrown.lov14@gmail.com"">m.i.ss.d.on.n.abrown.lov14@gmail.com</a>
<a href=""mailto:m.iss.donna.b.rown.lo.v.14@gmail.com"">m.iss.donna.b.rown.lo.v.14@gmail.com</a>
<a href=""mailto:mi.s.sdon.n.abr.o.wnlov14@gmail.com"">mi.s.sdon.n.abr.o.wnlov14@gmail.com</a>
<a href=""mailto:missd.onn.ab.rownlo.v.14@gmail.com"">missd.onn.ab.rownlo.v.14@gmail.com</a>
<a href=""mailto:m.is.s.d.o.n.na.b.r.own.lo.v1.4@gmail.com"">m.is.s.d.o.n.na.b.r.own.lo.v1.4@gmail.com</a>
<a href=""mailto:m.i.ss.d.o.n.na.b.ro.wnl.o.v.14@gmail.com"">m.i.ss.d.o.n.na.b.ro.wnl.o.v.14@gmail.com</a>
<a href=""mailto:mis.s.d.onn.abr.ow.n.lov.1.4@gmail.com"">mis.s.d.onn.abr.ow.n.lov.1.4@gmail.com</a>
<a href=""mailto:mi.s.s.do.n.nab.r.o.w.nlov1.4@gmail.com"">mi.s.s.do.n.nab.r.o.w.nlov1.4@gmail.com</a>
<a href=""mailto:m.is.sd.on.nabr.own.lov.1.4@gmail.com"">m.is.sd.on.nabr.own.lov.1.4@gmail.com</a>
<a href=""mailto:m.issdonnab.ro.wnl.o.v1.4@gmail.com"">m.issdonnab.ro.wnl.o.v1.4@gmail.com</a>
<a href=""mailto:m.i.s.s.d.o.nnab.rown.lo.v1.4@gmail.com"">m.i.s.s.d.o.nnab.rown.lo.v1.4@gmail.com</a>
<a href=""mailto:m.i.ss.d.on.n.a.brow.nlo.v1.4@gmail.com"">m.i.ss.d.on.n.a.brow.nlo.v1.4@gmail.com</a>
<a href=""mailto:m.i.s.sd.on.nab.r.ow.n.lo.v.1.4@gmail.com"">m.i.s.sd.on.nab.r.ow.n.lo.v.1.4@gmail.com</a>
<a href=""mailto:mi.s.sdonnabro.w.nlo.v.1.4@gmail.com"">mi.s.sdonnabro.w.nlo.v.1.4@gmail.com</a>
<a href=""mailto:missdon.na.br.o.w.n.lo.v.14@gmail.com"">missdon.na.br.o.w.n.lo.v.14@gmail.com</a>
<a href=""mailto:m.i.s.sdonn.a.bro.w.n.lov.14@gmail.com"">m.i.s.sdonn.a.bro.w.n.lov.14@gmail.com</a>
<a href=""mailto:m.i.ss.d.o.n.na.brownl.o.v14@gmail.com"">m.i.ss.d.o.n.na.brownl.o.v14@gmail.com</a>
<a href=""mailto:m.iss.d.onnabr.ownl.ov.14@gmail.com"">m.iss.d.onnabr.ownl.ov.14@gmail.com</a>
<a href=""mailto:mis.s.donn.abrow.nlo.v.14@gmail.com"">mis.s.donn.abrow.nlo.v.14@gmail.com</a>
<a href=""mailto:missd.on.n.ab.ro.w.n.lo.v.14@gmail.com"">missd.on.n.ab.ro.w.n.lo.v.14@gmail.com</a>
<a href=""mailto:m.is.sdo.n.na.b.r.o.w.n.lov.14@gmail.com"">m.is.sdo.n.na.b.r.o.w.n.lov.14@gmail.com</a>
<a href=""mailto:mis.s.don.n.a.b.r.o.w.n.lo.v1.4@gmail.com"">mis.s.don.n.a.b.r.o.w.n.lo.v1.4@gmail.com</a>
<a href=""mailto:m.i.ss.donn.abr.o.wnlov.1.4@gmail.com"">m.i.ss.donn.abr.o.wnlov.1.4@gmail.com</a>
<a href=""mailto:mi.ssdo.n.n.abr.ow.nl.ov.1.4@gmail.com"">mi.ssdo.n.n.abr.ow.nl.ov.1.4@gmail.com</a>
<a href=""mailto:mi.ss.d.on.nab.ro.w.n.l.ov.14@gmail.com"">mi.ss.d.on.nab.ro.w.n.l.ov.14@gmail.com</a>
<a href=""mailto:mi.s.sd.o.n.n.a.brownlov.1.4@gmail.com"">mi.s.sd.o.n.n.a.brownlov.1.4@gmail.com</a>
<a href=""mailto:missdonnahistory@gmail.com"">missdonnahistory@gmail.com</a>
<a href=""mailto:m.i.ss.d.o.nnahis.t.ory@gmail.com"">m.i.ss.d.o.nnahis.t.ory@gmail.com</a>
<a href=""mailto:mi.s.s.do.nn.ah.i.s.t.o.ry@gmail.com"">mi.s.s.do.nn.ah.i.s.t.o.ry@gmail.com</a>
<a href=""mailto:mi.s.s.donna.h.i.stor.y@gmail.com"">mi.s.s.donna.h.i.stor.y@gmail.com</a>
<a href=""mailto:mi.s.sd.onn.a.hist.o.ry@gmail.com"">mi.s.sd.onn.a.hist.o.ry@gmail.com</a>
<a href=""mailto:m.issd.o.nnah.i.s.t.o.r.y@gmail.com"">m.issd.o.nnah.i.s.t.o.r.y@gmail.com</a>
<a href=""mailto:mi.ssd.onnahistor.y@gmail.com"">mi.ssd.onnahistor.y@gmail.com</a>
<a href=""mailto:m.iss.don.nah.ist.ory@gmail.com"">m.iss.don.nah.ist.ory@gmail.com</a>
<a href=""mailto:mis.sd.o.n.n.ahi.s.tory@gmail.com"">mis.sd.o.n.n.ahi.s.tory@gmail.com</a>
<a href=""mailto:mi.ssd.o.n.n.a.histo.r.y@gmail.com"">mi.ssd.o.n.n.a.histo.r.y@gmail.com</a>
<a href=""mailto:m.issd.o.n.nah.i.s.t.ory@gmail.com"">m.issd.o.n.nah.i.s.t.ory@gmail.com</a>
<a href=""mailto:mi.s.sd.o.nn.ah.is.t.o.r.y@gmail.com"">mi.s.sd.o.nn.ah.is.t.o.r.y@gmail.com</a>
<a href=""mailto:mis.s.d.o.nna.h.i.sto.r.y@gmail.com"">mis.s.d.o.nna.h.i.sto.r.y@gmail.com</a>
<a href=""mailto:m.issdo.n.n.a.h.ist.o.ry@gmail.com"">m.issdo.n.n.a.h.ist.o.ry@gmail.com</a>
<a href=""mailto:mis.sd.o.nn.a.h.ist.o.ry@gmail.com"">mis.sd.o.nn.a.h.ist.o.ry@gmail.com</a>
<a href=""mailto:miss.d.o.nn.ahi.story@gmail.com"">miss.d.o.nn.ahi.story@gmail.com</a>
<a href=""mailto:mi.ss.don.n.ahist.o.r.y@gmail.com"">mi.ss.don.n.ahist.o.r.y@gmail.com</a>
<a href=""mailto:m.i.ss.do.nn.a.h.is.t.o.r.y@gmail.com"">m.i.ss.do.nn.a.h.is.t.o.r.y@gmail.com</a>
<a href=""mailto:m.i.s.sdon.n.a.h.i.story@gmail.com"">m.i.s.sdon.n.a.h.i.story@gmail.com</a>
<a href=""mailto:m.i.s.sdon.n.a.hist.or.y@gmail.com"">m.i.s.sdon.n.a.hist.or.y@gmail.com</a>
<a href=""mailto:m.is.sdo.nnahi.sto.ry@gmail.com"">m.is.sdo.nnahi.sto.ry@gmail.com</a>
<a href=""mailto:m.i.s.sdo.nn.a.hi.s.tory@gmail.com"">m.i.s.sdo.nn.a.hi.s.tory@gmail.com</a>
<a href=""mailto:mi.s.sd.onnahi.st.o.r.y@gmail.com"">mi.s.sd.onnahi.st.o.r.y@gmail.com</a>
<a href=""mailto:m.is.sd.o.nnah.i.s.t.ory@gmail.com"">m.is.sd.o.nnah.i.s.t.ory@gmail.com</a>
<a href=""mailto:mi.s.s.donn.ah.isto.r.y@gmail.com"">mi.s.s.donn.ah.isto.r.y@gmail.com</a>
<a href=""mailto:m.i.ssd.onna.hist.o.ry@gmail.com"">m.i.ssd.onna.hist.o.ry@gmail.com</a>
<a href=""mailto:m.iss.d.o.nna.h.isto.r.y@gmail.com"">m.iss.d.o.nna.h.isto.r.y@gmail.com</a>
<a href=""mailto:mis.sd.o.n.n.a.hi.stor.y@gmail.com"">mis.sd.o.n.n.a.hi.stor.y@gmail.com</a>
<a href=""mailto:mi.ssd.o.n.n.a.h.i.s.to.r.y@gmail.com"">mi.ssd.o.n.n.a.h.i.s.to.r.y@gmail.com</a>
<a href=""mailto:missd.on.nahi.story@gmail.com"">missd.on.nahi.story@gmail.com</a>
<a href=""mailto:m.issdonn.a.his.to.ry@gmail.com"">m.issdonn.a.his.to.ry@gmail.com</a>
<a href=""mailto:mi.ss.don.nah.i.story@gmail.com"">mi.ss.don.nah.i.story@gmail.com</a>
<a href=""mailto:m.i.s.s.d.o.nn.a.his.tor.y@gmail.com"">m.i.s.s.d.o.nn.a.his.tor.y@gmail.com</a>
<a href=""mailto:mi.ssdo.nn.ah.ist.or.y@gmail.com"">mi.ssdo.nn.ah.ist.or.y@gmail.com</a>
<a href=""mailto:m.is.sd.o.n.nah.i.story@gmail.com"">m.is.sd.o.n.nah.i.story@gmail.com</a>
<a href=""mailto:mi.ss.donn.a.h.i.st.ory@gmail.com"">mi.ss.donn.a.h.i.st.ory@gmail.com</a>
<a href=""mailto:m.iss.do.nna.h.i.s.to.ry@gmail.com"">m.iss.do.nna.h.i.s.to.ry@gmail.com</a>
<a href=""mailto:m.i.s.s.don.n.ahi.s.t.o.ry@gmail.com"">m.i.s.s.don.n.ahi.s.t.o.ry@gmail.com</a>
<a href=""mailto:m.iss.d.on.n.ah.i.s.tor.y@gmail.com"">m.iss.d.on.n.ah.i.s.tor.y@gmail.com</a>
<a href=""mailto:m.i.s.sd.o.nna.h.i.st.ory@gmail.com"">m.i.s.sd.o.nna.h.i.st.ory@gmail.com</a>
<a href=""mailto:m.i.s.sd.o.nnah.i.s.t.or.y@gmail.com"">m.i.s.sd.o.nnah.i.s.t.or.y@gmail.com</a>
<a href=""mailto:mi.s.sd.o.nnahis.t.or.y@gmail.com"">mi.s.sd.o.nnahis.t.or.y@gmail.com</a>
<a href=""mailto:m.i.ssdonn.a.hist.o.ry@gmail.com"">m.i.ssdonn.a.hist.o.ry@gmail.com</a>
<a href=""mailto:m.i.s.sdon.n.ahis.tory@gmail.com"">m.i.s.sdon.n.ahis.tory@gmail.com</a>
<a href=""mailto:mi.s.s.don.nahis.t.o.ry@gmail.com"">mi.s.s.don.nahis.t.o.ry@gmail.com</a>
<a href=""mailto:mis.s.do.nn.ah.i.st.or.y@gmail.com"">mis.s.do.nn.ah.i.st.or.y@gmail.com</a>
<a href=""mailto:m.i.ssd.on.n.a.h.i.st.o.ry@gmail.com"">m.i.ssd.on.n.a.h.i.st.o.ry@gmail.com</a>
<a href=""mailto:m.issd.on.n.a.h.ist.ory@gmail.com"">m.issd.on.n.a.h.ist.ory@gmail.com</a>
<a href=""mailto:m.i.ssd.onna.h.is.tory@gmail.com"">m.i.ssd.onna.h.is.tory@gmail.com</a>
<a href=""mailto:missd.o.n.n.a.his.t.o.ry@gmail.com"">missd.o.n.n.a.his.t.o.ry@gmail.com</a>
<a href=""mailto:m.issdonnah.ist.or.y@gmail.com"">m.issdonnah.ist.or.y@gmail.com</a>
<a href=""mailto:mis.s.d.o.n.nahist.ory@gmail.com"">mis.s.d.o.n.nahist.ory@gmail.com</a>
<a href=""mailto:mi.s.s.d.onn.ah.is.tor.y@gmail.com"">mi.s.s.d.onn.ah.is.tor.y@gmail.com</a>
<a href=""mailto:m.i.s.sdonna.hi.st.o.ry@gmail.com"">m.i.s.sdonna.hi.st.o.ry@gmail.com</a>
<a href=""mailto:m.is.s.do.n.n.a.hist.o.ry@gmail.com"">m.is.s.do.n.n.a.hist.o.ry@gmail.com</a>
<a href=""mailto:m.is.sdonnah.isto.r.y@gmail.com"">m.is.sdonnah.isto.r.y@gmail.com</a>
<a href=""mailto:m.issdonna.h.i.sto.ry@gmail.com"">m.issdonna.h.i.sto.ry@gmail.com</a>
<a href=""mailto:m.iss.do.n.nahi.s.t.ory@gmail.com"">m.iss.do.n.nahi.s.t.ory@gmail.com</a>
<a href=""mailto:mis.s.donna.his.t.o.ry@gmail.com"">mis.s.donna.his.t.o.ry@gmail.com</a>
<a href=""mailto:m.i.ssd.o.nna.hi.s.t.o.ry@gmail.com"">m.i.ssd.o.nna.hi.s.t.o.ry@gmail.com</a>
<a href=""mailto:mi.ss.donn.a.his.tory@gmail.com"">mi.ss.donn.a.his.tory@gmail.com</a>
<a href=""mailto:mi.ssdo.nn.a.histo.r.y@gmail.com"">mi.ssdo.nn.a.histo.r.y@gmail.com</a>
<a href=""mailto:m.i.s.sdo.n.n.ahi.s.t.or.y@gmail.com"">m.i.s.sdo.n.n.ahi.s.t.or.y@gmail.com</a>
<a href=""mailto:m.issd.onn.a.h.is.to.r.y@gmail.com"">m.issd.onn.a.h.is.to.r.y@gmail.com</a>
<a href=""mailto:mi.s.sdo.nn.a.h.i.st.or.y@gmail.com"">mi.s.sdo.nn.a.h.i.st.or.y@gmail.com</a>
<a href=""mailto:miss.d.o.nnah.ist.ory@gmail.com"">miss.d.o.nnah.ist.ory@gmail.com</a>
<a href=""mailto:mi.s.s.don.na.h.is.t.o.ry@gmail.com"">mi.s.s.don.na.h.is.t.o.ry@gmail.com</a>
<a href=""mailto:m.i.s.sdo.n.n.a.h.isto.ry@gmail.com"">m.i.s.sdo.n.n.a.h.isto.ry@gmail.com</a>
<a href=""mailto:mis.s.d.o.nnahis.t.ory@gmail.com"">mis.s.d.o.nnahis.t.ory@gmail.com</a>
<a href=""mailto:m.issdonn.a.h.i.st.ory@gmail.com"">m.issdonn.a.h.i.st.ory@gmail.com</a>
<a href=""mailto:miss.d.on.n.a.h.is.t.o.ry@gmail.com"">miss.d.on.n.a.h.is.t.o.ry@gmail.com</a>
<a href=""mailto:m.issd.o.nn.ahist.o.r.y@gmail.com"">m.issd.o.nn.ahist.o.r.y@gmail.com</a>
<a href=""mailto:m.i.ssd.o.nna.h.is.to.r.y@gmail.com"">m.i.ssd.o.nna.h.is.to.r.y@gmail.com</a>
<a href=""mailto:miss.d.o.n.nahis.to.ry@gmail.com"">miss.d.o.n.nahis.to.ry@gmail.com</a>
<a href=""mailto:m.is.sd.on.na.hi.st.o.ry@gmail.com"">m.is.sd.on.na.hi.st.o.ry@gmail.com</a>
<a href=""mailto:m.iss.d.on.n.a.h.ist.o.r.y@gmail.com"">m.iss.d.on.n.a.h.ist.o.r.y@gmail.com</a>
<a href=""mailto:m.i.s.sd.o.nn.a.his.tory@gmail.com"">m.i.s.sd.o.nn.a.his.tory@gmail.com</a>
<a href=""mailto:m.issdo.n.n.ah.istory@gmail.com"">m.issdo.n.n.ah.istory@gmail.com</a>
<a href=""mailto:m.i.s.s.donn.ahi.st.or.y@gmail.com"">m.i.s.s.donn.ahi.st.or.y@gmail.com</a>
<a href=""mailto:m.is.s.do.nna.h.is.tor.y@gmail.com"">m.is.s.do.nna.h.is.tor.y@gmail.com</a>
<a href=""mailto:mis.sdo.n.n.a.h.i.s.t.ory@gmail.com"">mis.sdo.n.n.a.h.i.s.t.ory@gmail.com</a>
<a href=""mailto:m.is.s.d.onna.his.to.ry@gmail.com"">m.is.s.d.onna.his.to.ry@gmail.com</a>
<a href=""mailto:mi.s.sd.on.n.a.his.to.r.y@gmail.com"">mi.s.sd.on.n.a.his.to.r.y@gmail.com</a>
<a href=""mailto:mis.s.d.o.n.na.h.i.s.to.ry@gmail.com"">mis.s.d.o.n.na.h.i.s.to.ry@gmail.com</a>
<a href=""mailto:mi.ss.d.on.nahis.t.o.ry@gmail.com"">mi.ss.d.on.nahis.t.o.ry@gmail.com</a>
<a href=""mailto:mi.s.sd.on.n.a.histor.y@gmail.com"">mi.s.sd.on.n.a.histor.y@gmail.com</a>
<a href=""mailto:mi.ss.d.o.n.n.ahis.t.o.r.y@gmail.com"">mi.ss.d.o.n.n.ahis.t.o.r.y@gmail.com</a>
<a href=""mailto:m.i.ss.do.nna.h.i.s.tor.y@gmail.com"">m.i.ss.do.nna.h.i.s.tor.y@gmail.com</a>
<a href=""mailto:mis.s.don.nahi.s.tory@gmail.com"">mis.s.don.nahi.s.tory@gmail.com</a>
<a href=""mailto:m.i.ss.don.na.h.i.s.tory@gmail.com"">m.i.ss.don.na.h.i.s.tory@gmail.com</a>
<a href=""mailto:mi.s.s.d.onna.hist.o.ry@gmail.com"">mi.s.s.d.onna.hist.o.ry@gmail.com</a>
<a href=""mailto:mi.ssd.on.na.h.is.t.ory@gmail.com"">mi.ssd.on.na.h.is.t.ory@gmail.com</a>
<a href=""mailto:m.issd.o.nn.ah.istory@gmail.com"">m.issd.o.nn.ah.istory@gmail.com</a>
<a href=""mailto:mi.s.sd.o.nnah.i.s.to.r.y@gmail.com"">mi.s.sd.o.nnah.i.s.to.r.y@gmail.com</a>
<a href=""mailto:m.i.ss.do.nna.his.tory@gmail.com"">m.i.ss.do.nna.his.tory@gmail.com</a>
<a href=""mailto:mi.ssdo.n.n.ahis.t.or.y@gmail.com"">mi.ssdo.n.n.ahis.t.or.y@gmail.com</a>
<a href=""mailto:m.issd.on.na.h.i.s.t.o.ry@gmail.com"">m.issd.on.na.h.i.s.t.o.ry@gmail.com</a>
<a href=""mailto:m.is.sdonna.h.istor.y@gmail.com"">m.is.sdonna.h.istor.y@gmail.com</a>
<a href=""mailto:mi.s.sdonn.ah.i.stor.y@gmail.com"">mi.s.sdonn.ah.i.stor.y@gmail.com</a>
<a href=""mailto:mi.s.sdonn.a.h.is.tory@gmail.com"">mi.s.sdonn.a.h.is.tory@gmail.com</a>
<a href=""mailto:m.issd.o.nn.a.h.ist.or.y@gmail.com"">m.issd.o.nn.a.h.ist.or.y@gmail.com</a>
<a href=""mailto:mi.s.s.d.o.nnah.i.stor.y@gmail.com"">mi.s.s.d.o.nnah.i.stor.y@gmail.com</a>
<a href=""mailto:m.i.ss.do.n.n.ah.i.st.o.ry@gmail.com"">m.i.ss.do.n.n.ah.i.st.o.ry@gmail.com</a>
<a href=""mailto:m.iss.donn.ahi.s.t.o.r.y@gmail.com"">m.iss.donn.ahi.s.t.o.r.y@gmail.com</a>
<a href=""mailto:m.i.s.sdon.n.ah.i.st.o.r.y@gmail.com"">m.i.s.sdon.n.ah.i.st.o.r.y@gmail.com</a>
<a href=""mailto:m.i.s.s.do.nn.a.hist.or.y@gmail.com"">m.i.s.s.do.nn.a.hist.or.y@gmail.com</a>
<a href=""mailto:m.is.sdonna.h.is.t.o.ry@gmail.com"">m.is.sdonna.h.is.t.o.ry@gmail.com</a>
<a href=""mailto:m.i.ss.do.n.nah.i.s.to.ry@gmail.com"">m.i.ss.do.n.nah.i.s.to.ry@gmail.com</a>
<a href=""mailto:m.is.sdon.na.h.is.tory@gmail.com"">m.is.sdon.na.h.is.tory@gmail.com</a>
<a href=""mailto:mi.s.s.donnah.is.t.o.ry@gmail.com"">mi.s.s.donnah.is.t.o.ry@gmail.com</a>
<a href=""mailto:mi.s.sd.on.na.h.is.t.o.r.y@gmail.com"">mi.s.sd.on.na.h.is.t.o.r.y@gmail.com</a>
<a href=""mailto:mis.sdonn.a.hi.st.o.ry@gmail.com"">mis.sdonn.a.hi.st.o.ry@gmail.com</a>
<a href=""mailto:m.issdo.n.n.a.h.is.tor.y@gmail.com"">m.issdo.n.n.a.h.is.tor.y@gmail.com</a>
<a href=""mailto:miss.don.nahi.st.or.y@gmail.com"">miss.don.nahi.st.or.y@gmail.com</a>
<a href=""mailto:m.is.sd.o.nna.hi.stor.y@gmail.com"">m.is.sd.o.nna.hi.stor.y@gmail.com</a>
<a href=""mailto:mi.s.s.don.n.a.h.i.st.o.r.y@gmail.com"">mi.s.s.don.n.a.h.i.st.o.r.y@gmail.com</a>
<a href=""mailto:mis.sd.o.n.na.h.i.s.tory@gmail.com"">mis.sd.o.n.na.h.i.s.tory@gmail.com</a>
<a href=""mailto:m.i.s.s.d.o.nna.his.to.r.y@gmail.com"">m.i.s.s.d.o.nna.his.to.r.y@gmail.com</a>
<a href=""mailto:mi.s.s.donn.ah.i.story@gmail.com"">mi.s.s.donn.ah.i.story@gmail.com</a>
<a href=""mailto:m.i.ssdo.n.n.ahis.t.o.r.y@gmail.com"">m.i.ssdo.n.n.ahis.t.o.r.y@gmail.com</a>
<a href=""mailto:mi.ss.do.n.n.a.h.istor.y@gmail.com"">mi.ss.do.n.n.a.h.istor.y@gmail.com</a>
<a href=""mailto:m.i.s.sdo.nn.a.h.i.st.ory@gmail.com"">m.i.s.sdo.nn.a.h.i.st.ory@gmail.com</a>
<a href=""mailto:mi.s.s.d.onnahi.s.to.ry@gmail.com"">mi.s.s.d.onnahi.s.to.ry@gmail.com</a>
<a href=""mailto:m.i.ssd.o.n.nahi.s.t.o.r.y@gmail.com"">m.i.ssd.o.n.nahi.s.t.o.r.y@gmail.com</a>
<a href=""mailto:m.iss.do.n.n.a.h.i.s.to.r.y@gmail.com"">m.iss.do.n.n.a.h.i.s.to.r.y@gmail.com</a>
<a href=""mailto:mis.s.donnahi.st.ory@gmail.com"">mis.s.donnahi.st.ory@gmail.com</a>
<a href=""mailto:missd.onn.ah.i.s.t.o.r.y@gmail.com"">missd.onn.ah.i.s.t.o.r.y@gmail.com</a>
<a href=""mailto:m.i.s.sd.onna.hi.st.or.y@gmail.com"">m.i.s.sd.onna.hi.st.or.y@gmail.com</a>
<a href=""mailto:missd.onnah.i.st.o.ry@gmail.com"">missd.onnah.i.st.o.ry@gmail.com</a>
<a href=""mailto:miss.d.o.nnah.i.st.ory@gmail.com"">miss.d.o.nnah.i.st.ory@gmail.com</a>
<a href=""mailto:m.is.sdonna.hi.sto.ry@gmail.com"">m.is.sdonna.hi.sto.ry@gmail.com</a>
<a href=""mailto:mis.s.d.onn.a.hi.st.or.y@gmail.com"">mis.s.d.onn.a.hi.st.or.y@gmail.com</a>
<a href=""mailto:mi.ss.don.na.h.i.s.t.or.y@gmail.com"">mi.ss.don.na.h.i.s.t.or.y@gmail.com</a>
<a href=""mailto:m.iss.d.o.nn.a.hi.s.tor.y@gmail.com"">m.iss.d.o.nn.a.hi.s.tor.y@gmail.com</a>
<a href=""mailto:m.i.ssd.onn.ahis.to.ry@gmail.com"">m.i.ssd.onn.ahis.to.ry@gmail.com</a>
<a href=""mailto:m.i.s.sdonnahist.ory@gmail.com"">m.i.s.sdonnahist.ory@gmail.com</a>
<a href=""mailto:mi.s.s.d.o.n.na.his.t.or.y@gmail.com"">mi.s.s.d.o.n.na.his.t.or.y@gmail.com</a>
<a href=""mailto:mi.s.s.donnah.is.tory@gmail.com"">mi.s.s.donnah.is.tory@gmail.com</a>
<a href=""mailto:mi.s.s.d.o.n.nahis.to.ry@gmail.com"">mi.s.s.d.o.n.nahis.to.ry@gmail.com</a>
<a href=""mailto:mis.sd.onn.a.h.i.st.o.r.y@gmail.com"">mis.sd.onn.a.h.i.st.o.r.y@gmail.com</a>
<a href=""mailto:m.i.s.s.d.o.n.nahi.st.o.r.y@gmail.com"">m.i.s.s.d.o.n.nahi.st.o.r.y@gmail.com</a>
<a href=""mailto:m.iss.do.n.na.hi.s.t.or.y@gmail.com"">m.iss.do.n.na.hi.s.t.or.y@gmail.com</a>
<a href=""mailto:m.iss.do.nn.ah.i.st.o.ry@gmail.com"">m.iss.do.nn.ah.i.st.o.ry@gmail.com</a>
<a href=""mailto:m.is.sd.o.n.na.his.tory@gmail.com"">m.is.sd.o.n.na.his.tory@gmail.com</a>
<a href=""mailto:miss.d.o.n.na.h.is.t.o.ry@gmail.com"">miss.d.o.n.na.h.is.t.o.ry@gmail.com</a>
<a href=""mailto:mi.s.s.do.nna.hist.o.ry@gmail.com"">mi.s.s.do.nna.hist.o.ry@gmail.com</a>
<a href=""mailto:m.i.ssdo.nn.a.hi.s.t.o.ry@gmail.com"">m.i.ssdo.nn.a.hi.s.t.o.ry@gmail.com</a>
<a href=""mailto:m.issdo.nna.h.istory@gmail.com"">m.issdo.nna.h.istory@gmail.com</a>
<a href=""mailto:m.i.s.sd.onn.ahis.tory@gmail.com"">m.i.s.sd.onn.ahis.tory@gmail.com</a>
<a href=""mailto:miss.d.on.n.ah.is.t.o.ry@gmail.com"">miss.d.on.n.ah.is.t.o.ry@gmail.com</a>
<a href=""mailto:mi.ssd.on.nahistory@gmail.com"">mi.ssd.on.nahistory@gmail.com</a>
<a href=""mailto:m.i.ssdo.n.na.hist.o.r.y@gmail.com"">m.i.ssdo.n.na.hist.o.r.y@gmail.com</a>
<a href=""mailto:mis.s.do.n.n.ahisto.r.y@gmail.com"">mis.s.do.n.n.ahisto.r.y@gmail.com</a>
<a href=""mailto:m.i.ssd.onna.h.i.s.to.ry@gmail.com"">m.i.ssd.onna.h.i.s.to.ry@gmail.com</a>
<a href=""mailto:m.issdo.n.n.ah.i.st.ory@gmail.com"">m.issdo.n.n.ah.i.st.ory@gmail.com</a>
<a href=""mailto:m.i.s.sdonnah.i.s.to.r.y@gmail.com"">m.i.s.sdonnah.i.s.to.r.y@gmail.com</a>
<a href=""mailto:mi.s.sdo.n.n.ah.i.s.t.or.y@gmail.com"">mi.s.sdo.n.n.ah.i.s.t.or.y@gmail.com</a>
<a href=""mailto:missdonna.hi.s.tory@gmail.com"">missdonna.hi.s.tory@gmail.com</a>
<a href=""mailto:m.i.s.sdonn.a.hi.s.t.o.r.y@gmail.com"">m.i.s.sdonn.a.hi.s.t.o.r.y@gmail.com</a>
<a href=""mailto:m.i.ssd.o.n.nahi.s.to.ry@gmail.com"">m.i.ssd.o.n.nahi.s.to.ry@gmail.com</a>
<a href=""mailto:mi.ss.d.o.nnahi.st.ory@gmail.com"">mi.ss.d.o.nnahi.st.ory@gmail.com</a>
<a href=""mailto:mis.sd.o.nn.ahis.tory@gmail.com"">mis.sd.o.nn.ahis.tory@gmail.com</a>
<a href=""mailto:m.i.ssd.o.nn.ah.i.s.tor.y@gmail.com"">m.i.ssd.o.nn.ah.i.s.tor.y@gmail.com</a>
<a href=""mailto:m.i.ssdo.n.nah.i.st.ory@gmail.com"">m.i.ssdo.n.nah.i.st.ory@gmail.com</a>
<a href=""mailto:mis.s.d.on.n.ah.i.s.to.ry@gmail.com"">mis.s.d.on.n.ah.i.s.to.ry@gmail.com</a>
<a href=""mailto:m.issdo.n.nahi.s.tor.y@gmail.com"">m.issdo.n.nahi.s.tor.y@gmail.com</a>
<a href=""mailto:m.issdon.n.ah.is.to.ry@gmail.com"">m.issdon.n.ah.is.to.ry@gmail.com</a>
<a href=""mailto:m.issdo.nn.a.h.i.s.tory@gmail.com"">m.issdo.nn.a.h.i.s.tory@gmail.com</a>
<a href=""mailto:m.i.ss.d.o.n.n.a.hi.st.or.y@gmail.com"">m.i.ss.d.o.n.n.a.hi.st.or.y@gmail.com</a>
<a href=""mailto:mi.s.s.d.onn.a.h.is.tory@gmail.com"">mi.s.s.d.onn.a.h.is.tory@gmail.com</a>
<a href=""mailto:mis.sdo.n.n.ah.istor.y@gmail.com"">mis.sdo.n.n.ah.istor.y@gmail.com</a>
<a href=""mailto:m.i.ssd.onna.h.i.st.ory@gmail.com"">m.i.ssd.onna.h.i.st.ory@gmail.com</a>
<a href=""mailto:m.is.s.d.o.nnah.i.s.tory@gmail.com"">m.is.s.d.o.nnah.i.s.tory@gmail.com</a>
<a href=""mailto:miss.do.n.na.h.is.to.r.y@gmail.com"">miss.do.n.na.h.is.to.r.y@gmail.com</a>
<a href=""mailto:miss.don.n.a.h.i.stor.y@gmail.com"">miss.don.n.a.h.i.stor.y@gmail.com</a>
<a href=""mailto:mi.s.sdonn.a.h.i.s.to.r.y@gmail.com"">mi.s.sdonn.a.h.i.s.to.r.y@gmail.com</a>
<a href=""mailto:m.issd.o.nn.ah.i.s.to.ry@gmail.com"">m.issd.o.nn.ah.i.s.to.ry@gmail.com</a>
<a href=""mailto:m.i.s.s.d.onn.ahistor.y@gmail.com"">m.i.s.s.d.onn.ahistor.y@gmail.com</a>
<a href=""mailto:mi.s.sdonna.h.i.st.o.r.y@gmail.com"">mi.s.sdonna.h.i.st.o.r.y@gmail.com</a>
<a href=""mailto:mi.ss.d.onn.ah.istor.y@gmail.com"">mi.ss.d.onn.ah.istor.y@gmail.com</a>
<a href=""mailto:m.iss.don.n.a.h.is.t.or.y@gmail.com"">m.iss.don.n.a.h.is.t.or.y@gmail.com</a>
<a href=""mailto:m.i.s.sd.onnahisto.ry@gmail.com"">m.i.s.sd.onnahisto.ry@gmail.com</a>
<a href=""mailto:m.i.s.sd.onn.a.hi.s.to.r.y@gmail.com"">m.i.s.sd.onn.a.hi.s.to.r.y@gmail.com</a>
<a href=""mailto:m.is.s.do.nnah.is.tory@gmail.com"">m.is.s.do.nnah.is.tory@gmail.com</a>
<a href=""mailto:m.iss.don.na.h.is.t.o.ry@gmail.com"">m.iss.don.na.h.is.t.o.ry@gmail.com</a>
<a href=""mailto:mi.s.sd.o.nn.ahis.tory@gmail.com"">mi.s.sd.o.nn.ahis.tory@gmail.com</a>
<a href=""mailto:m.i.ssd.on.na.h.i.story@gmail.com"">m.i.ssd.on.na.h.i.story@gmail.com</a>
<a href=""mailto:m.is.s.d.o.n.n.ahi.st.o.r.y@gmail.com"">m.is.s.d.o.n.n.ahi.st.o.r.y@gmail.com</a>
<a href=""mailto:mis.sd.o.n.n.a.h.is.tor.y@gmail.com"">mis.sd.o.n.n.a.h.is.tor.y@gmail.com</a>
<a href=""mailto:m.iss.d.onn.ah.isto.r.y@gmail.com"">m.iss.d.onn.ah.isto.r.y@gmail.com</a>
<a href=""mailto:missdo.nn.a.hi.st.o.r.y@gmail.com"">missdo.nn.a.hi.st.o.r.y@gmail.com</a>
<a href=""mailto:mi.ss.do.nn.a.h.i.s.t.o.r.y@gmail.com"">mi.ss.do.nn.a.h.i.s.t.o.r.y@gmail.com</a>
<a href=""mailto:m.i.s.sdo.n.na.his.to.ry@gmail.com"">m.i.s.sdo.n.na.his.to.ry@gmail.com</a>
<a href=""mailto:miss.d.o.n.n.ahi.stor.y@gmail.com"">miss.d.o.n.n.ahi.stor.y@gmail.com</a>
<a href=""mailto:m.is.s.d.o.n.na.h.i.s.t.or.y@gmail.com"">m.is.s.d.o.n.na.h.i.s.t.or.y@gmail.com</a>
<a href=""mailto:miss.d.o.n.na.his.t.ory@gmail.com"">miss.d.o.n.na.his.t.ory@gmail.com</a>
<a href=""mailto:m.i.ss.donnahi.st.ory@gmail.com"">m.i.ss.donnahi.st.ory@gmail.com</a>
<a href=""mailto:m.i.ssdo.n.n.a.hi.sto.r.y@gmail.com"">m.i.ssdo.n.n.a.hi.sto.r.y@gmail.com</a>
<a href=""mailto:m.is.s.donnahisto.r.y@gmail.com"">m.is.s.donnahisto.r.y@gmail.com</a>
<a href=""mailto:miss.don.nahis.to.r.y@gmail.com"">miss.don.nahis.to.r.y@gmail.com</a>
<a href=""mailto:m.i.ssdon.n.a.h.isto.ry@gmail.com"">m.i.ssdon.n.a.h.isto.ry@gmail.com</a>
<a href=""mailto:missdonnahistory@gmail.com"">missdonnahistory@gmail.com</a>
<a href=""mailto:m.i.ss.d.o.nnahis.t.ory@gmail.com"">m.i.ss.d.o.nnahis.t.ory@gmail.com</a>
<a href=""mailto:mi.s.s.do.nn.ah.i.s.t.o.ry@gmail.com"">mi.s.s.do.nn.ah.i.s.t.o.ry@gmail.com</a>
<a href=""mailto:mi.s.s.donna.h.i.stor.y@gmail.com"">mi.s.s.donna.h.i.stor.y@gmail.com</a>
<a href=""mailto:mi.s.sd.onn.a.hist.o.ry@gmail.com"">mi.s.sd.onn.a.hist.o.ry@gmail.com</a>
<a href=""mailto:m.issd.o.nnah.i.s.t.o.r.y@gmail.com"">m.issd.o.nnah.i.s.t.o.r.y@gmail.com</a>
<a href=""mailto:mi.ssd.onnahistor.y@gmail.com"">mi.ssd.onnahistor.y@gmail.com</a>
<a href=""mailto:m.iss.don.nah.ist.ory@gmail.com"">m.iss.don.nah.ist.ory@gmail.com</a>
<a href=""mailto:mis.sd.o.n.n.ahi.s.tory@gmail.com"">mis.sd.o.n.n.ahi.s.tory@gmail.com</a>
<a href=""mailto:mi.ssd.o.n.n.a.histo.r.y@gmail.com"">mi.ssd.o.n.n.a.histo.r.y@gmail.com</a>
<a href=""mailto:m.issd.o.n.nah.i.s.t.ory@gmail.com"">m.issd.o.n.nah.i.s.t.ory@gmail.com</a>
<a href=""mailto:mi.s.sd.o.nn.ah.is.t.o.r.y@gmail.com"">mi.s.sd.o.nn.ah.is.t.o.r.y@gmail.com</a>
<a href=""mailto:mis.s.d.o.nna.h.i.sto.r.y@gmail.com"">mis.s.d.o.nna.h.i.sto.r.y@gmail.com</a>
<a href=""mailto:m.issdo.n.n.a.h.ist.o.ry@gmail.com"">m.issdo.n.n.a.h.ist.o.ry@gmail.com</a>
<a href=""mailto:mis.sd.o.nn.a.h.ist.o.ry@gmail.com"">mis.sd.o.nn.a.h.ist.o.ry@gmail.com</a>
<a href=""mailto:miss.d.o.nn.ahi.story@gmail.com"">miss.d.o.nn.ahi.story@gmail.com</a>
<a href=""mailto:mi.ss.don.n.ahist.o.r.y@gmail.com"">mi.ss.don.n.ahist.o.r.y@gmail.com</a>
<a href=""mailto:m.i.ss.do.nn.a.h.is.t.o.r.y@gmail.com"">m.i.ss.do.nn.a.h.is.t.o.r.y@gmail.com</a>
<a href=""mailto:m.i.s.sdon.n.a.h.i.story@gmail.com"">m.i.s.sdon.n.a.h.i.story@gmail.com</a>
<a href=""mailto:m.i.s.sdon.n.a.hist.or.y@gmail.com"">m.i.s.sdon.n.a.hist.or.y@gmail.com</a>
<a href=""mailto:m.is.sdo.nnahi.sto.ry@gmail.com"">m.is.sdo.nnahi.sto.ry@gmail.com</a>
<a href=""mailto:m.i.s.sdo.nn.a.hi.s.tory@gmail.com"">m.i.s.sdo.nn.a.hi.s.tory@gmail.com</a>
<a href=""mailto:mi.s.sd.onnahi.st.o.r.y@gmail.com"">mi.s.sd.onnahi.st.o.r.y@gmail.com</a>
<a href=""mailto:m.is.sd.o.nnah.i.s.t.ory@gmail.com"">m.is.sd.o.nnah.i.s.t.ory@gmail.com</a>
<a href=""mailto:mi.s.s.donn.ah.isto.r.y@gmail.com"">mi.s.s.donn.ah.isto.r.y@gmail.com</a>
<a href=""mailto:m.i.ssd.onna.hist.o.ry@gmail.com"">m.i.ssd.onna.hist.o.ry@gmail.com</a>
<a href=""mailto:m.iss.d.o.nna.h.isto.r.y@gmail.com"">m.iss.d.o.nna.h.isto.r.y@gmail.com</a>
<a href=""mailto:mis.sd.o.n.n.a.hi.stor.y@gmail.com"">mis.sd.o.n.n.a.hi.stor.y@gmail.com</a>
<a href=""mailto:mi.ssd.o.n.n.a.h.i.s.to.r.y@gmail.com"">mi.ssd.o.n.n.a.h.i.s.to.r.y@gmail.com</a>
<a href=""mailto:missd.on.nahi.story@gmail.com"">missd.on.nahi.story@gmail.com</a>
<a href=""mailto:m.issdonn.a.his.to.ry@gmail.com"">m.issdonn.a.his.to.ry@gmail.com</a>
<a href=""mailto:mi.ss.don.nah.i.story@gmail.com"">mi.ss.don.nah.i.story@gmail.com</a>
<a href=""mailto:m.i.s.s.d.o.nn.a.his.tor.y@gmail.com"">m.i.s.s.d.o.nn.a.his.tor.y@gmail.com</a>
<a href=""mailto:mi.ssdo.nn.ah.ist.or.y@gmail.com"">mi.ssdo.nn.ah.ist.or.y@gmail.com</a>
<a href=""mailto:m.is.sd.o.n.nah.i.story@gmail.com"">m.is.sd.o.n.nah.i.story@gmail.com</a>
<a href=""mailto:mi.ss.donn.a.h.i.st.ory@gmail.com"">mi.ss.donn.a.h.i.st.ory@gmail.com</a>
<a href=""mailto:m.iss.do.nna.h.i.s.to.ry@gmail.com"">m.iss.do.nna.h.i.s.to.ry@gmail.com</a>
<a href=""mailto:m.i.s.s.don.n.ahi.s.t.o.ry@gmail.com"">m.i.s.s.don.n.ahi.s.t.o.ry@gmail.com</a>
<a href=""mailto:m.iss.d.on.n.ah.i.s.tor.y@gmail.com"">m.iss.d.on.n.ah.i.s.tor.y@gmail.com</a>
<a href=""mailto:m.i.s.sd.o.nna.h.i.st.ory@gmail.com"">m.i.s.sd.o.nna.h.i.st.ory@gmail.com</a>
<a href=""mailto:m.i.s.sd.o.nnah.i.s.t.or.y@gmail.com"">m.i.s.sd.o.nnah.i.s.t.or.y@gmail.com</a>
<a href=""mailto:mi.s.sd.o.nnahis.t.or.y@gmail.com"">mi.s.sd.o.nnahis.t.or.y@gmail.com</a>
<a href=""mailto:m.i.ssdonn.a.hist.o.ry@gmail.com"">m.i.ssdonn.a.hist.o.ry@gmail.com</a>
<a href=""mailto:m.i.s.sdon.n.ahis.tory@gmail.com"">m.i.s.sdon.n.ahis.tory@gmail.com</a>
<a href=""mailto:mi.s.s.don.nahis.t.o.ry@gmail.com"">mi.s.s.don.nahis.t.o.ry@gmail.com</a>
<a href=""mailto:mis.s.do.nn.ah.i.st.or.y@gmail.com"">mis.s.do.nn.ah.i.st.or.y@gmail.com</a>
<a href=""mailto:m.i.ssd.on.n.a.h.i.st.o.ry@gmail.com"">m.i.ssd.on.n.a.h.i.st.o.ry@gmail.com</a>
<a href=""mailto:m.issd.on.n.a.h.ist.ory@gmail.com"">m.issd.on.n.a.h.ist.ory@gmail.com</a>
<a href=""mailto:m.i.ssd.onna.h.is.tory@gmail.com"">m.i.ssd.onna.h.is.tory@gmail.com</a>
<a href=""mailto:missd.o.n.n.a.his.t.o.ry@gmail.com"">missd.o.n.n.a.his.t.o.ry@gmail.com</a>
<a href=""mailto:m.issdonnah.ist.or.y@gmail.com"">m.issdonnah.ist.or.y@gmail.com</a>
<a href=""mailto:mis.s.d.o.n.nahist.ory@gmail.com"">mis.s.d.o.n.nahist.ory@gmail.com</a>
<a href=""mailto:mi.s.s.d.onn.ah.is.tor.y@gmail.com"">mi.s.s.d.onn.ah.is.tor.y@gmail.com</a>
<a href=""mailto:m.i.s.sdonna.hi.st.o.ry@gmail.com"">m.i.s.sdonna.hi.st.o.ry@gmail.com</a>
<a href=""mailto:m.is.s.do.n.n.a.hist.o.ry@gmail.com"">m.is.s.do.n.n.a.hist.o.ry@gmail.com</a>
<a href=""mailto:m.is.sdonnah.isto.r.y@gmail.com"">m.is.sdonnah.isto.r.y@gmail.com</a>
<a href=""mailto:m.issdonna.h.i.sto.ry@gmail.com"">m.issdonna.h.i.sto.ry@gmail.com</a>
<a href=""mailto:m.iss.do.n.nahi.s.t.ory@gmail.com"">m.iss.do.n.nahi.s.t.ory@gmail.com</a>
<a href=""mailto:mis.s.donna.his.t.o.ry@gmail.com"">mis.s.donna.his.t.o.ry@gmail.com</a>
<a href=""mailto:m.i.ssd.o.nna.hi.s.t.o.ry@gmail.com"">m.i.ssd.o.nna.hi.s.t.o.ry@gmail.com</a>
<a href=""mailto:mi.ss.donn.a.his.tory@gmail.com"">mi.ss.donn.a.his.tory@gmail.com</a>
<a href=""mailto:mi.ssdo.nn.a.histo.r.y@gmail.com"">mi.ssdo.nn.a.histo.r.y@gmail.com</a>
<a href=""mailto:m.i.s.sdo.n.n.ahi.s.t.or.y@gmail.com"">m.i.s.sdo.n.n.ahi.s.t.or.y@gmail.com</a>
<a href=""mailto:m.issd.onn.a.h.is.to.r.y@gmail.com"">m.issd.onn.a.h.is.to.r.y@gmail.com</a>
<a href=""mailto:mi.s.sdo.nn.a.h.i.st.or.y@gmail.com"">mi.s.sdo.nn.a.h.i.st.or.y@gmail.com</a>
<a href=""mailto:miss.d.o.nnah.ist.ory@gmail.com"">miss.d.o.nnah.ist.ory@gmail.com</a>
<a href=""mailto:mi.s.s.don.na.h.is.t.o.ry@gmail.com"">mi.s.s.don.na.h.is.t.o.ry@gmail.com</a>
<a href=""mailto:m.i.s.sdo.n.n.a.h.isto.ry@gmail.com"">m.i.s.sdo.n.n.a.h.isto.ry@gmail.com</a>
<a href=""mailto:mis.s.d.o.nnahis.t.ory@gmail.com"">mis.s.d.o.nnahis.t.ory@gmail.com</a>
<a href=""mailto:m.issdonn.a.h.i.st.ory@gmail.com"">m.issdonn.a.h.i.st.ory@gmail.com</a>
<a href=""mailto:miss.d.on.n.a.h.is.t.o.ry@gmail.com"">miss.d.on.n.a.h.is.t.o.ry@gmail.com</a>
<a href=""mailto:m.issd.o.nn.ahist.o.r.y@gmail.com"">m.issd.o.nn.ahist.o.r.y@gmail.com</a>
<a href=""mailto:m.i.ssd.o.nna.h.is.to.r.y@gmail.com"">m.i.ssd.o.nna.h.is.to.r.y@gmail.com</a>
<a href=""mailto:miss.d.o.n.nahis.to.ry@gmail.com"">miss.d.o.n.nahis.to.ry@gmail.com</a>
<a href=""mailto:m.is.sd.on.na.hi.st.o.ry@gmail.com"">m.is.sd.on.na.hi.st.o.ry@gmail.com</a>
<a href=""mailto:m.iss.d.on.n.a.h.ist.o.r.y@gmail.com"">m.iss.d.on.n.a.h.ist.o.r.y@gmail.com</a>
<a href=""mailto:m.i.s.sd.o.nn.a.his.tory@gmail.com"">m.i.s.sd.o.nn.a.his.tory@gmail.com</a>
<a href=""mailto:m.issdo.n.n.ah.istory@gmail.com"">m.issdo.n.n.ah.istory@gmail.com</a>
<a href=""mailto:m.i.s.s.donn.ahi.st.or.y@gmail.com"">m.i.s.s.donn.ahi.st.or.y@gmail.com</a>
<a href=""mailto:m.is.s.do.nna.h.is.tor.y@gmail.com"">m.is.s.do.nna.h.is.tor.y@gmail.com</a>
<a href=""mailto:mis.sdo.n.n.a.h.i.s.t.ory@gmail.com"">mis.sdo.n.n.a.h.i.s.t.ory@gmail.com</a>
<a href=""mailto:m.is.s.d.onna.his.to.ry@gmail.com"">m.is.s.d.onna.his.to.ry@gmail.com</a>
<a href=""mailto:mi.s.sd.on.n.a.his.to.r.y@gmail.com"">mi.s.sd.on.n.a.his.to.r.y@gmail.com</a>
<a href=""mailto:mis.s.d.o.n.na.h.i.s.to.ry@gmail.com"">mis.s.d.o.n.na.h.i.s.to.ry@gmail.com</a>
<a href=""mailto:mi.ss.d.on.nahis.t.o.ry@gmail.com"">mi.ss.d.on.nahis.t.o.ry@gmail.com</a>
<a href=""mailto:mi.s.sd.on.n.a.histor.y@gmail.com"">mi.s.sd.on.n.a.histor.y@gmail.com</a>
<a href=""mailto:mi.ss.d.o.n.n.ahis.t.o.r.y@gmail.com"">mi.ss.d.o.n.n.ahis.t.o.r.y@gmail.com</a>
<a href=""mailto:m.i.ss.do.nna.h.i.s.tor.y@gmail.com"">m.i.ss.do.nna.h.i.s.tor.y@gmail.com</a>
<a href=""mailto:mis.s.don.nahi.s.tory@gmail.com"">mis.s.don.nahi.s.tory@gmail.com</a>
<a href=""mailto:m.i.ss.don.na.h.i.s.tory@gmail.com"">m.i.ss.don.na.h.i.s.tory@gmail.com</a>
<a href=""mailto:mi.s.s.d.onna.hist.o.ry@gmail.com"">mi.s.s.d.onna.hist.o.ry@gmail.com</a>
<a href=""mailto:mi.ssd.on.na.h.is.t.ory@gmail.com"">mi.ssd.on.na.h.is.t.ory@gmail.com</a>
<a href=""mailto:m.issd.o.nn.ah.istory@gmail.com"">m.issd.o.nn.ah.istory@gmail.com</a>
<a href=""mailto:mi.s.sd.o.nnah.i.s.to.r.y@gmail.com"">mi.s.sd.o.nnah.i.s.to.r.y@gmail.com</a>
<a href=""mailto:m.i.ss.do.nna.his.tory@gmail.com"">m.i.ss.do.nna.his.tory@gmail.com</a>
<a href=""mailto:mi.ssdo.n.n.ahis.t.or.y@gmail.com"">mi.ssdo.n.n.ahis.t.or.y@gmail.com</a>
<a href=""mailto:m.issd.on.na.h.i.s.t.o.ry@gmail.com"">m.issd.on.na.h.i.s.t.o.ry@gmail.com</a>
<a href=""mailto:m.is.sdonna.h.istor.y@gmail.com"">m.is.sdonna.h.istor.y@gmail.com</a>
<a href=""mailto:mi.s.sdonn.ah.i.stor.y@gmail.com"">mi.s.sdonn.ah.i.stor.y@gmail.com</a>
<a href=""mailto:mi.s.sdonn.a.h.is.tory@gmail.com"">mi.s.sdonn.a.h.is.tory@gmail.com</a>
<a href=""mailto:m.issd.o.nn.a.h.ist.or.y@gmail.com"">m.issd.o.nn.a.h.ist.or.y@gmail.com</a>
<a href=""mailto:mi.s.s.d.o.nnah.i.stor.y@gmail.com"">mi.s.s.d.o.nnah.i.stor.y@gmail.com</a>
<a href=""mailto:m.i.ss.do.n.n.ah.i.st.o.ry@gmail.com"">m.i.ss.do.n.n.ah.i.st.o.ry@gmail.com</a>
<a href=""mailto:m.iss.donn.ahi.s.t.o.r.y@gmail.com"">m.iss.donn.ahi.s.t.o.r.y@gmail.com</a>
<a href=""mailto:m.i.s.sdon.n.ah.i.st.o.r.y@gmail.com"">m.i.s.sdon.n.ah.i.st.o.r.y@gmail.com</a>
<a href=""mailto:m.i.s.s.do.nn.a.hist.or.y@gmail.com"">m.i.s.s.do.nn.a.hist.or.y@gmail.com</a>
<a href=""mailto:m.is.sdonna.h.is.t.o.ry@gmail.com"">m.is.sdonna.h.is.t.o.ry@gmail.com</a>
<a href=""mailto:m.i.ss.do.n.nah.i.s.to.ry@gmail.com"">m.i.ss.do.n.nah.i.s.to.ry@gmail.com</a>
<a href=""mailto:m.is.sdon.na.h.is.tory@gmail.com"">m.is.sdon.na.h.is.tory@gmail.com</a>
<a href=""mailto:mi.s.s.donnah.is.t.o.ry@gmail.com"">mi.s.s.donnah.is.t.o.ry@gmail.com</a>
<a href=""mailto:mi.s.sd.on.na.h.is.t.o.r.y@gmail.com"">mi.s.sd.on.na.h.is.t.o.r.y@gmail.com</a>
<a href=""mailto:mis.sdonn.a.hi.st.o.ry@gmail.com"">mis.sdonn.a.hi.st.o.ry@gmail.com</a>
<a href=""mailto:m.issdo.n.n.a.h.is.tor.y@gmail.com"">m.issdo.n.n.a.h.is.tor.y@gmail.com</a>
<a href=""mailto:miss.don.nahi.st.or.y@gmail.com"">miss.don.nahi.st.or.y@gmail.com</a>
<a href=""mailto:m.is.sd.o.nna.hi.stor.y@gmail.com"">m.is.sd.o.nna.hi.stor.y@gmail.com</a>
<a href=""mailto:mi.s.s.don.n.a.h.i.st.o.r.y@gmail.com"">mi.s.s.don.n.a.h.i.st.o.r.y@gmail.com</a>
<a href=""mailto:mis.sd.o.n.na.h.i.s.tory@gmail.com"">mis.sd.o.n.na.h.i.s.tory@gmail.com</a>
<a href=""mailto:m.i.s.s.d.o.nna.his.to.r.y@gmail.com"">m.i.s.s.d.o.nna.his.to.r.y@gmail.com</a>
<a href=""mailto:mi.s.s.donn.ah.i.story@gmail.com"">mi.s.s.donn.ah.i.story@gmail.com</a>
<a href=""mailto:m.i.ssdo.n.n.ahis.t.o.r.y@gmail.com"">m.i.ssdo.n.n.ahis.t.o.r.y@gmail.com</a>
<a href=""mailto:mi.ss.do.n.n.a.h.istor.y@gmail.com"">mi.ss.do.n.n.a.h.istor.y@gmail.com</a>
<a href=""mailto:m.i.s.sdo.nn.a.h.i.st.ory@gmail.com"">m.i.s.sdo.nn.a.h.i.st.ory@gmail.com</a>
<a href=""mailto:mi.s.s.d.onnahi.s.to.ry@gmail.com"">mi.s.s.d.onnahi.s.to.ry@gmail.com</a>
<a href=""mailto:m.i.ssd.o.n.nahi.s.t.o.r.y@gmail.com"">m.i.ssd.o.n.nahi.s.t.o.r.y@gmail.com</a>
<a href=""mailto:m.iss.do.n.n.a.h.i.s.to.r.y@gmail.com"">m.iss.do.n.n.a.h.i.s.to.r.y@gmail.com</a>
<a href=""mailto:mis.s.donnahi.st.ory@gmail.com"">mis.s.donnahi.st.ory@gmail.com</a>
<a href=""mailto:missd.onn.ah.i.s.t.o.r.y@gmail.com"">missd.onn.ah.i.s.t.o.r.y@gmail.com</a>
<a href=""mailto:m.i.s.sd.onna.hi.st.or.y@gmail.com"">m.i.s.sd.onna.hi.st.or.y@gmail.com</a>
<a href=""mailto:missd.onnah.i.st.o.ry@gmail.com"">missd.onnah.i.st.o.ry@gmail.com</a>
<a href=""mailto:miss.d.o.nnah.i.st.ory@gmail.com"">miss.d.o.nnah.i.st.ory@gmail.com</a>
<a href=""mailto:m.is.sdonna.hi.sto.ry@gmail.com"">m.is.sdonna.hi.sto.ry@gmail.com</a>
<a href=""mailto:mis.s.d.onn.a.hi.st.or.y@gmail.com"">mis.s.d.onn.a.hi.st.or.y@gmail.com</a>
<a href=""mailto:mi.ss.don.na.h.i.s.t.or.y@gmail.com"">mi.ss.don.na.h.i.s.t.or.y@gmail.com</a>
<a href=""mailto:m.iss.d.o.nn.a.hi.s.tor.y@gmail.com"">m.iss.d.o.nn.a.hi.s.tor.y@gmail.com</a>
<a href=""mailto:m.i.ssd.onn.ahis.to.ry@gmail.com"">m.i.ssd.onn.ahis.to.ry@gmail.com</a>
<a href=""mailto:m.i.s.sdonnahist.ory@gmail.com"">m.i.s.sdonnahist.ory@gmail.com</a>
<a href=""mailto:mi.s.s.d.o.n.na.his.t.or.y@gmail.com"">mi.s.s.d.o.n.na.his.t.or.y@gmail.com</a>
<a href=""mailto:mi.s.s.donnah.is.tory@gmail.com"">mi.s.s.donnah.is.tory@gmail.com</a>
<a href=""mailto:mi.s.s.d.o.n.nahis.to.ry@gmail.com"">mi.s.s.d.o.n.nahis.to.ry@gmail.com</a>
<a href=""mailto:mis.sd.onn.a.h.i.st.o.r.y@gmail.com"">mis.sd.onn.a.h.i.st.o.r.y@gmail.com</a>
<a href=""mailto:m.i.s.s.d.o.n.nahi.st.o.r.y@gmail.com"">m.i.s.s.d.o.n.nahi.st.o.r.y@gmail.com</a>
<a href=""mailto:m.iss.do.n.na.hi.s.t.or.y@gmail.com"">m.iss.do.n.na.hi.s.t.or.y@gmail.com</a>
<a href=""mailto:m.iss.do.nn.ah.i.st.o.ry@gmail.com"">m.iss.do.nn.ah.i.st.o.ry@gmail.com</a>
<a href=""mailto:m.is.sd.o.n.na.his.tory@gmail.com"">m.is.sd.o.n.na.his.tory@gmail.com</a>
<a href=""mailto:miss.d.o.n.na.h.is.t.o.ry@gmail.com"">miss.d.o.n.na.h.is.t.o.ry@gmail.com</a>
<a href=""mailto:mi.s.s.do.nna.hist.o.ry@gmail.com"">mi.s.s.do.nna.hist.o.ry@gmail.com</a>
<a href=""mailto:m.i.ssdo.nn.a.hi.s.t.o.ry@gmail.com"">m.i.ssdo.nn.a.hi.s.t.o.ry@gmail.com</a>
<a href=""mailto:m.issdo.nna.h.istory@gmail.com"">m.issdo.nna.h.istory@gmail.com</a>
<a href=""mailto:m.i.s.sd.onn.ahis.tory@gmail.com"">m.i.s.sd.onn.ahis.tory@gmail.com</a>
<a href=""mailto:miss.d.on.n.ah.is.t.o.ry@gmail.com"">miss.d.on.n.ah.is.t.o.ry@gmail.com</a>
<a href=""mailto:mi.ssd.on.nahistory@gmail.com"">mi.ssd.on.nahistory@gmail.com</a>
<a href=""mailto:m.i.ssdo.n.na.hist.o.r.y@gmail.com"">m.i.ssdo.n.na.hist.o.r.y@gmail.com</a>
<a href=""mailto:mis.s.do.n.n.ahisto.r.y@gmail.com"">mis.s.do.n.n.ahisto.r.y@gmail.com</a>
<a href=""mailto:m.i.ssd.onna.h.i.s.to.ry@gmail.com"">m.i.ssd.onna.h.i.s.to.ry@gmail.com</a>
<a href=""mailto:m.issdo.n.n.ah.i.st.ory@gmail.com"">m.issdo.n.n.ah.i.st.ory@gmail.com</a>
<a href=""mailto:m.i.s.sdonnah.i.s.to.r.y@gmail.com"">m.i.s.sdonnah.i.s.to.r.y@gmail.com</a>
<a href=""mailto:mi.s.sdo.n.n.ah.i.s.t.or.y@gmail.com"">mi.s.sdo.n.n.ah.i.s.t.or.y@gmail.com</a>
<a href=""mailto:missdonna.hi.s.tory@gmail.com"">missdonna.hi.s.tory@gmail.com</a>
<a href=""mailto:m.i.s.sdonn.a.hi.s.t.o.r.y@gmail.com"">m.i.s.sdonn.a.hi.s.t.o.r.y@gmail.com</a>
<a href=""mailto:m.i.ssd.o.n.nahi.s.to.ry@gmail.com"">m.i.ssd.o.n.nahi.s.to.ry@gmail.com</a>
<a href=""mailto:mi.ss.d.o.nnahi.st.ory@gmail.com"">mi.ss.d.o.nnahi.st.ory@gmail.com</a>
<a href=""mailto:mis.sd.o.nn.ahis.tory@gmail.com"">mis.sd.o.nn.ahis.tory@gmail.com</a>
<a href=""mailto:m.i.ssd.o.nn.ah.i.s.tor.y@gmail.com"">m.i.ssd.o.nn.ah.i.s.tor.y@gmail.com</a>
<a href=""mailto:m.i.ssdo.n.nah.i.st.ory@gmail.com"">m.i.ssdo.n.nah.i.st.ory@gmail.com</a>
<a href=""mailto:mis.s.d.on.n.ah.i.s.to.ry@gmail.com"">mis.s.d.on.n.ah.i.s.to.ry@gmail.com</a>
<a href=""mailto:m.issdo.n.nahi.s.tor.y@gmail.com"">m.issdo.n.nahi.s.tor.y@gmail.com</a>
<a href=""mailto:m.issdon.n.ah.is.to.ry@gmail.com"">m.issdon.n.ah.is.to.ry@gmail.com</a>
<a href=""mailto:m.issdo.nn.a.h.i.s.tory@gmail.com"">m.issdo.nn.a.h.i.s.tory@gmail.com</a>
<a href=""mailto:m.i.ss.d.o.n.n.a.hi.st.or.y@gmail.com"">m.i.ss.d.o.n.n.a.hi.st.or.y@gmail.com</a>
<a href=""mailto:mi.s.s.d.onn.a.h.is.tory@gmail.com"">mi.s.s.d.onn.a.h.is.tory@gmail.com</a>
<a href=""mailto:mis.sdo.n.n.ah.istor.y@gmail.com"">mis.sdo.n.n.ah.istor.y@gmail.com</a>
<a href=""mailto:m.i.ssd.onna.h.i.st.ory@gmail.com"">m.i.ssd.onna.h.i.st.ory@gmail.com</a>
<a href=""mailto:m.is.s.d.o.nnah.i.s.tory@gmail.com"">m.is.s.d.o.nnah.i.s.tory@gmail.com</a>
<a href=""mailto:miss.do.n.na.h.is.to.r.y@gmail.com"">miss.do.n.na.h.is.to.r.y@gmail.com</a>
<a href=""mailto:miss.don.n.a.h.i.stor.y@gmail.com"">miss.don.n.a.h.i.stor.y@gmail.com</a>
<a href=""mailto:mi.s.sdonn.a.h.i.s.to.r.y@gmail.com"">mi.s.sdonn.a.h.i.s.to.r.y@gmail.com</a>
<a href=""mailto:m.issd.o.nn.ah.i.s.to.ry@gmail.com"">m.issd.o.nn.ah.i.s.to.ry@gmail.com</a>
<a href=""mailto:m.i.s.s.d.onn.ahistor.y@gmail.com"">m.i.s.s.d.onn.ahistor.y@gmail.com</a>
<a href=""mailto:mi.s.sdonna.h.i.st.o.r.y@gmail.com"">mi.s.sdonna.h.i.st.o.r.y@gmail.com</a>
<a href=""mailto:mi.ss.d.onn.ah.istor.y@gmail.com"">mi.ss.d.onn.ah.istor.y@gmail.com</a>
<a href=""mailto:m.iss.don.n.a.h.is.t.or.y@gmail.com"">m.iss.don.n.a.h.is.t.or.y@gmail.com</a>
<a href=""mailto:m.i.s.sd.onnahisto.ry@gmail.com"">m.i.s.sd.onnahisto.ry@gmail.com</a>
<a href=""mailto:m.i.s.sd.onn.a.hi.s.to.r.y@gmail.com"">m.i.s.sd.onn.a.hi.s.to.r.y@gmail.com</a>
<a href=""mailto:m.is.s.do.nnah.is.tory@gmail.com"">m.is.s.do.nnah.is.tory@gmail.com</a>
<a href=""mailto:m.iss.don.na.h.is.t.o.ry@gmail.com"">m.iss.don.na.h.is.t.o.ry@gmail.com</a>
<a href=""mailto:mi.s.sd.o.nn.ahis.tory@gmail.com"">mi.s.sd.o.nn.ahis.tory@gmail.com</a>
<a href=""mailto:m.i.ssd.on.na.h.i.story@gmail.com"">m.i.ssd.on.na.h.i.story@gmail.com</a>
<a href=""mailto:m.is.s.d.o.n.n.ahi.st.o.r.y@gmail.com"">m.is.s.d.o.n.n.ahi.st.o.r.y@gmail.com</a>
<a href=""mailto:mis.sd.o.n.n.a.h.is.tor.y@gmail.com"">mis.sd.o.n.n.a.h.is.tor.y@gmail.com</a>
<a href=""mailto:m.iss.d.onn.ah.isto.r.y@gmail.com"">m.iss.d.onn.ah.isto.r.y@gmail.com</a>
<a href=""mailto:missdo.nn.a.hi.st.o.r.y@gmail.com"">missdo.nn.a.hi.st.o.r.y@gmail.com</a>
<a href=""mailto:mi.ss.do.nn.a.h.i.s.t.o.r.y@gmail.com"">mi.ss.do.nn.a.h.i.s.t.o.r.y@gmail.com</a>
<a href=""mailto:m.i.s.sdo.n.na.his.to.ry@gmail.com"">m.i.s.sdo.n.na.his.to.ry@gmail.com</a>
<a href=""mailto:miss.d.o.n.n.ahi.stor.y@gmail.com"">miss.d.o.n.n.ahi.stor.y@gmail.com</a>
<a href=""mailto:m.is.s.d.o.n.na.h.i.s.t.or.y@gmail.com"">m.is.s.d.o.n.na.h.i.s.t.or.y@gmail.com</a>
<a href=""mailto:miss.d.o.n.na.his.t.ory@gmail.com"">miss.d.o.n.na.his.t.ory@gmail.com</a>
<a href=""mailto:m.i.ss.donnahi.st.ory@gmail.com"">m.i.ss.donnahi.st.ory@gmail.com</a>
<a href=""mailto:m.i.ssdo.n.n.a.hi.sto.r.y@gmail.com"">m.i.ssdo.n.n.a.hi.sto.r.y@gmail.com</a>
<a href=""mailto:m.is.s.donnahisto.r.y@gmail.com"">m.is.s.donnahisto.r.y@gmail.com</a>
<a href=""mailto:miss.don.nahis.to.r.y@gmail.com"">miss.don.nahis.to.r.y@gmail.com</a>
<a href=""mailto:m.i.ssdon.n.a.h.isto.ry@gmail.com"">m.i.ssdon.n.a.h.isto.ry@gmail.com</a>
<a href=""mailto:missdonnabrow001@hotmail.com"">missdonnabrow001@hotmail.com</a>"
epVAYPDe,mostfrequentnumber-v1.c,i8yes,C,Wednesday 1st of November 2023 12:22:53 PM CDT,"#include <stdio.h>

int main(void) {
    int curr_num, prev_num, count = 0;
    int most_freq_num, most_freq_count = 0;
    int len, i = 0;

    // Brief summary of the program's function
    printf(""[I2P-Lab] Program which finds the most frequent consecutive number\n"");

    // Get amount of numbers from the user
    printf(""Input the amount of numbers you want: "");
    scanf(""%d"", &len);
    printf(""Input your numbers:\n"");

    // Main loop
    count = 1;
    for (i = 0; i < len; i++) {
        scanf(""%d"", &curr_num);
        if (curr_num == prev_num) {
            count++;
            if (count > most_freq_count) {
                most_freq_num = curr_num;
                most_freq_count = count;
            }
        } else {
            count = 1;
            prev_num = curr_num;
        }
    }

    printf(""Most frequent consecutive number is: %d\n"", most_freq_num);
    printf(""The number has been typed %d times consecutively"", most_freq_count);
}
"
wrmb7Afy,Retorno Formulário,hercioneto,PHP,Wednesday 1st of November 2023 12:13:07 PM CDT,"<!DOCTYPE html>
<!--
Salvar como calcular.php
    -->
<html lang=""pt-br"">
<head> 
    <meta charset=""utf-8"">
    <title>Cálculo</title>
</head>
<body>
    <h1>Calculando INFORMAÇÕES</h1>
<?php
if ($_SERVER[""REQUEST_METHOD""] == ""POST"") {
    $veiculo = $_POST[""veiculo""];
    $distancia = $_POST[""distancia""];
    $tempo = $_POST[""tempo""];

    $velocidadeMedia = $distancia/$tempo;

}
?>
<h2><?php 
echo ""O $veiculo percorreu $distancia Km em $tempo horas <br>"";
?></h2>
<h3>Velocidade média: <?php echo $velocidadeMedia; ?> Km/h</h3>
</body>
</html>
"
