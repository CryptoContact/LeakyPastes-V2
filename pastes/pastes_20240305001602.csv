id,title,username,language,date,content
TxFqrsNM,G2A.com Free Gift Card Guide Mar 2024,ounnuo,GetText,Monday 4th of March 2024 06:03:11 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_859884.pdf

Working as of:
05 March 2024"
Uf0aywzR,2. félév 3. óra (otthon),Levi0227,C#,Monday 4th of March 2024 05:40:43 PM CDT,"namespace Interface
{
    internal class Program
    {
        static void Main(string[] args)
        {
            //Lodgings lodgings = new Lodgings(60, 2, 1000000);

            //Console.WriteLine(lodgings.TotalValue());
            //Console.WriteLine(lodgings.IsBooked);
            //lodgings.Book(4);
            //Console.WriteLine(lodgings.IsBooked);
            //Console.WriteLine(lodgings.Book(2));
            //Console.WriteLine(lodgings.GetCost(1));
            //Console.WriteLine(lodgings.MoveIn(6));
            //Console.WriteLine(lodgings.InhabitantsCount);
            //Console.WriteLine(lodgings.GetCost(1));
            //Console.WriteLine(lodgings);
            //Console.WriteLine(lodgings.MoveIn(25));
            //Console.WriteLine(lodgings.MoveIn(11));
            //Console.WriteLine(lodgings.MoveIn(10));
        }
    }
}

--------------------------------------------------------
Osztályok
--------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Interface
{
    internal interface IRealEstate
    {
        int TotalValue();
    }
}

--------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Interface
{
    internal interface IRent
    {
        bool IsBooked { get; }
        int GetCost(int months);
        bool Book(int months);
    }
}

--------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Interface
{
    abstract class Flat : IRealEstate
    {
        protected double area;
        protected int roomsCount;
        protected int inhabitantsCount;
        protected int unitPrice;

        public int InhabitantsCount => inhabitantsCount;
        protected Flat(double area, int roomsCount, int inhabitantsCount, int unitPrice)
        {
            this.area = area;
            this.roomsCount = roomsCount;
            this.inhabitantsCount = inhabitantsCount;
            this.unitPrice = unitPrice;
        }

        public abstract bool MoveIn(int newInhabitants);

        public int TotalValue() => (int)(area * unitPrice);

        public override string ToString()
        {
            return $""area: {area}, rooms: {roomsCount}, inhabitants: {inhabitantsCount}, unit price: {unitPrice}"";
        }
    }
}

--------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Interface
{
    internal class Lodgings : Flat, IRent
    {
        int bookedMonths;

        public bool IsBooked => bookedMonths > 0;

        public Lodgings(double area, int roomsCount, int unitPrice)
            : base(area, roomsCount, 0, unitPrice)
        {
            bookedMonths = 0;
        }

        public bool Book(int months)
        {
            if (IsBooked) 
            {
                return false;                
            }

            bookedMonths = months;
            return true;
        }

        public int GetCost(int months)
        {
            return (inhabitantsCount != 0 ? (int)((double)TotalValue() / 240 / inhabitantsCount) : 0) * months;
        }

        public override bool MoveIn(int newInhabitants)
        {
            if (!IsBooked) return false;

            int updatedInhabitantsCount = inhabitantsCount + newInhabitants;
            if (updatedInhabitantsCount > roomsCount * 8 || area < updatedInhabitantsCount * 2)
            {
                return false;                
            }

            inhabitantsCount = updatedInhabitantsCount;
            return true;
        }

        public override string ToString()
        {
            return $""{base.ToString()}, booked months: {bookedMonths}"";
        }
    }
}

--------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Interface
{
    internal class FamilyApartment : Flat
    {
        int childrenCount;
        public FamilyApartment(double area, int roomsCount, int unitPrice)
            : base(area, roomsCount, 0, unitPrice)
        {
            childrenCount = 0;
        }

        public override bool MoveIn(int newInhabitants)
        { 
            int adultsCount = inhabitantsCount - childrenCount;
            int updatedAdultsCount = adultsCount + newInhabitants;

            if (roomsCount * 2 < (updatedAdultsCount + 2 * childrenCount) || (updatedAdultsCount + 2 * childrenCount) * 10 < area)
            {
                return false;
            }

            inhabitantsCount += newInhabitants;
            return true;
        }

        public bool CildIsBorn()
        {
            if (inhabitantsCount - childrenCount < 2)
            {
                return false;
            }
            childrenCount++;
            inhabitantsCount++;
            return true;
        }

        public override string ToString()
        {
            return $""{base.ToString()}, children: {childrenCount}"";
        }
    }
}

--------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Interface
{
    internal class Garage : IRealEstate, IRent
    {
        double area;
        int unitPrice;
        bool isHeated;
        int months;
        bool isOccupied;

        public bool IsBooked => months > 0 || isOccupied;

        public Garage(double area, int unitPrice, bool isHeated)
        {
            this.area = area;
            this.unitPrice = unitPrice;
            this.isHeated = isHeated;
        }

        public bool Book(int months)
        {
            if (IsBooked)
            {
                return false;
            }

            this.months = months;
            return true;
        }

        public int GetCost(int months) => (int)((double)TotalValue() / 120 * (isHeated ? 1.5 : 1.0)) * months;

        public int TotalValue() => (int)(area * unitPrice);

        public void updatedOccupied() => isOccupied = !isOccupied;

        public override string ToString()
        {
            return $""area: {area}, unit price: {unitPrice}, is headted: {isHeated}, months: {months}, is occupied {isOccupied}"";
        }
    }
}

--------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Interface
{
    internal class ApartmentHouse
    {
        int maxFlats;
        int maxGarage;
        int flatsCount;
        int garagesCount;
        
        public IRealEstate[] RealEstates { get; private set; }
        public int InhabitantsCount 
        { 
            get 
            {  
                int total = 0;

                foreach (IRealEstate realEstate in RealEstates) 
                {
                    total += (realEstate as Flat)?.InhabitantsCount ?? 0;

                    //if (realEstate is Flat)
                    //{ 
                    //    count += (realEstate as Flat).InhabitantsCount;
                    //}
                }

                return total;
            } 
        }

        public ApartmentHouse(int maxFlats, int maxGarage)
        {
            this.maxFlats = maxFlats;
            this.maxGarage = maxGarage;
            RealEstates = new IRealEstate[maxFlats + maxGarage];
            flatsCount = 0;
            garagesCount = 0;
        }

        public bool AddFlat(Flat newFlat)
        {
            if (flatsCount == maxFlats)
            {
                return false;
            }

            RealEstates[flatsCount + garagesCount] = newFlat;
            flatsCount++;
            return true;
        }

        public bool AddGarage(Garage newGarage)
        {
            if (garagesCount == maxGarage)
            {
                return false;
            }

            RealEstates[flatsCount + garagesCount] = newGarage;
            garagesCount++;
            return true;
        }

        public int TotalValue()
        {
            int total = 0;

            foreach (IRealEstate realEstate in RealEstates)
            {
                if ((realEstate is Flat flat && flat.InhabitantsCount > 0) || (realEstate is Garage garage && garage.IsBooked))
                {
                    total += realEstate.TotalValue();
                }
            }
            
            return total;
        }

        static public ApartmentHouse LoadFormFile(string fileName)
        {
            ApartmentHouse apartmentHouse = new ApartmentHouse(10, 10);

            using (StreamReader sr = new StreamReader(fileName))
            { 
                while (!sr.EndOfStream)
                { 
                    string line = sr.ReadLine();
                    string[] items = line.Split(' ');
                    switch (items[0]) 
                    {
                        case ""Alberlet"": apartmentHouse.AddFlat(new Lodgings(double.Parse(items[1]), int.Parse(items[2]), int.Parse(items[3]))); break;
                        case ""CsaladiApartman"": apartmentHouse.AddFlat(new FamilyApartment(double.Parse(items[1]), int.Parse(items[2]), int.Parse(items[3]))); break;
                        case ""Garazs"": apartmentHouse.AddGarage(new Garage(double.Parse(items[1]), int.Parse(items[2]), items[3] == ""futott"")); break;
                    }
                }
            }

            return apartmentHouse;
        }
    }
}
"
J6ghw2JH,Headers,Mostafaadelgggg,JSON,Monday 4th of March 2024 05:17:02 PM CDT,"{ ""Host"": ""canada.casino.fanduel.com"", ""X-PX-AUTHORIZATION"": ""3"", ""Accept"": ""*/*"", ""gan-api-device"": ""PHONE"", ""Accept-Language"": ""en-US,en;q=0.9"", ""gan-api-os"": ""IOS"", ""Accept-Encoding"": ""gzip, deflate, br"", ""Content-Type"": ""application/json"", ""Content-Length"": ""33"", 'User-Agent': '', ""Connection"": ""keep-alive"", ""X-PX-ORIGINAL-TOKEN"": 'token', ""gan-api-app-type"": ""NATIVE"" }"
LVHx1Hf3,Review Pastes.io [Pastebin Alternative],xxsa,PHP,Monday 4th of March 2024 05:00:30 PM CDT,"https://pastes.io - Paste Tool - Pastebin Alternative Free

Pastes.io is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Pastes.io VS Pastebin :
More features example share pages QR CODEs - Embed options .. etc
Simple Ads by Google Adsense ( Few rather than Pastebin )
Paste Folders
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Share pastes on social network
Embed, download, print pastes
Clone pastes
Report explicit pastes
Socialite (Facebook/Twitter/Google Social login)
Load files feature
User profile page
Trending pastes page (day, week, month, year)
Simple & responsive interface
Night Mode
150+ different syntax languages
25+ Syntax Highlighting Skins for Ace Syntax Highlighter
Ace Editor / Code Mirror
Paste Folders
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Share pastes on social network
Embed, download, print pastes
Clone pastes
Report explicit pastes
Socialite (Facebook/Twitter/Google Social login)
Facebook/Disqus/Custom comment system
Invisible/Custom captcha protection
Load files feature
Auto generated sitemaps
User management
Admin panel to manage pastes, syntax, users, comments, pages, languages, translations & other settings
User profile page
Trending pastes page (day, week, month, year)
QR Code for share
No Captcha for logged in users feature
and many more."
eMbeexiT,Untitled,TimRiker,YAML,Monday 4th of March 2024 04:36:18 PM CDT,"# All paths in this configuration file are relative to Dynmap's data-folder: minecraft_server/plugins/dynmap/

# All map templates are defined in the templates directory
# To use the HDMap very-low-res (2 ppb) map templates as world defaults, set value to vlowres
#   The definitions of these templates are in normal-vlowres.txt, nether-vlowres.txt, and the_end-vlowres.txt
# To use the HDMap low-res (4 ppb) map templates as world defaults, set value to lowres
#   The definitions of these templates are in normal-lowres.txt, nether-lowres.txt, and the_end-lowres.txt
# To use the HDMap hi-res (16 ppb) map templates (these can take a VERY long time for initial fullrender), set value to hires
#   The definitions of these templates are in normal-hires.txt, nether-hires.txt, and the_end-hires.txt
# To use the HDMap low-res (4 ppb) map templates, with support for boosting resolution selectively to hi-res (16 ppb), set value to low_boost_hi
#   The definitions of these templates are in normal-low_boost_hi.txt, nether-low_boost_hi.txt, and the_end-low_boost_hi.txt
# To use the HDMap hi-res (16 ppb) map templates, with support for boosting resolution selectively to vhi-res (32 ppb), set value to hi_boost_vhi
#   The definitions of these templates are in normal-hi_boost_vhi.txt, nether-hi_boost_vhi.txt, and the_end-hi_boost_vhi.txt
# To use the HDMap hi-res (16 ppb) map templates, with support for boosting resolution selectively to xhi-res (64 ppb), set value to hi_boost_xhi
#   The definitions of these templates are in normal-hi_boost_xhi.txt, nether-hi_boost_xhi.txt, and the_end-hi_boost_xhi.txt
deftemplatesuffix: hires

# Map storage scheme: only uncomment one 'type' value
#  filetree: classic and default scheme: tree of files, with all map data under the directory indicated by 'tilespath' setting
#  sqlite: single SQLite database file (this can get VERY BIG), located at 'dbfile' setting (default is file dynmap.db in data directory)
#  mysql: MySQL database, at hostname:port in database, accessed via userid with password
storage:
  # Filetree storage (standard tree of image files for maps)
  type: filetree
  # SQLite db for map storage (uses dbfile as storage location)
  #type: sqlite
  #dbfile: dynmap.db
  # MySQL DB for map storage (at 'hostname':'port' with flags ""flags"" in database 'database' using user 'userid' password 'password' and table prefix 'prefix')
  #type: mysql
  #hostname: localhost
  #port: 3306
  #database: dynmap
  #userid: dynmap
  #password: dynmap
  #prefix: """"
  #flags: ""?allowReconnect=true""

components:
  - class: org.dynmap.ClientConfigurationComponent

#  - class: org.dynmap.InternalClientUpdateComponent
#    sendhealth: true
#    sendposition: true
#    allowwebchat: true
#    webchat-interval: 5
#    hidewebchatip: false
#    trustclientname: false
#    includehiddenplayers: false
#    # (optional) if true, color codes in player display names are used
#    use-name-colors: true
#    # (optional) if true, player login IDs will be used for web chat when their IPs match
#    use-player-login-ip: true
#    # (optional) if use-player-login-ip is true, setting this to true will cause chat messages not matching a known player IP to be ignored
#    require-player-login-ip: false
#    # (optional) block player login IDs that are banned from chatting
#    block-banned-player-chat: true
#    # Require login for web-to-server chat (requires login-enabled: true)
#    webchat-requires-login: false
#    # If set to true, users must have dynmap.webchat permission in order to chat
#    webchat-permissions: false
#    # Limit length of single chat messages
#    chatlengthlimit: 256
#  #  # Optional - make players hidden when they are inside/underground/in shadows (#=light level: 0=full shadow,15=sky)
#  #  hideifshadow: 4
#  #  # Optional - make player hidden when they are under cover (#=sky light level,0=underground,15=open to sky)
#  #  hideifundercover: 14
#  #  # (Optional) if true, players that are crouching/sneaking will be hidden
#    hideifsneaking: false
#    # If true, player positions/status is protected (login with ID with dynmap.playermarkers.seeall permission required for info other than self)
#    protected-player-info: false
#    # If true, hide players with invisibility potion effects active
#    hide-if-invisiblity-potion: true
#    # If true, player names are not shown on map, chat, list
#    hidenames: false

  - class: org.dynmap.JsonFileClientUpdateComponent
    writeinterval: 1
    sendhealth: true
    sendposition: true
    allowwebchat: true
    webchat-interval: 5
    hidewebchatip: false
    includehiddenplayers: false
    use-name-colors: true
    use-player-login-ip: true
    require-player-login-ip: false
    block-banned-player-chat: true
    hideifshadow: 16
    hideifundercover: 16
    hideifsneaking: false
    # Require login for web-to-server chat (requires login-enabled: true)
    webchat-requires-login: false
    # If set to true, users must have dynmap.webchat permission in order to chat
    webchat-permissions: false
    # Limit length of single chat messages
    chatlengthlimit: 256
    hide-if-invisiblity-potion: true
    hidenames: false

  - class: org.dynmap.SimpleWebChatComponent
    allowchat: true
    # If true, web UI users can supply name for chat using 'playername' URL parameter.  'trustclientname' must also be set true.
    allowurlname: true

  # Note: this component is needed for the dmarker commands, and for the Marker API to be available to other plugins
  - class: org.dynmap.MarkersComponent
    type: markers
    showlabel: false
    enablesigns: true
    # Default marker set for sign markers
    default-sign-set: markers
    # (optional) add spawn point markers to standard marker layer
    showspawn: true
    spawnicon: world
    spawnlabel: ""Spawn""
    # (optional) layer for showing offline player's positions (for 'maxofflinetime' minutes after logoff)
    showofflineplayers: true
    offlinelabel: ""Offline""
    offlineicon: offlineuser
    offlinehidebydefault: false
    offlineminzoom: 0
    maxofflinetime: 0
    # (optional) layer for showing player's spawn beds
    showspawnbeds: true
    spawnbedlabel: ""Spawn Beds""
    spawnbedicon: bed
    spawnbedhidebydefault: true
    spawnbedminzoom: 0
    spawnbedformat: ""%name%'s bed""
    # (optional) show world border (vanilla 1.8+)
    showworldborder: true

  - class: org.dynmap.ClientComponent
    type: chat
    allowurlname: false
  - class: org.dynmap.ClientComponent
    type: chatballoon
    focuschatballoons: false
  - class: org.dynmap.ClientComponent
    type: chatbox
    showplayerfaces: true
    messagettl: 5
    # Optional: set number of lines in scrollable message history: if set, messagettl is not used to age out messages
    scrollback: 100
    # Optional; set maximum number of lines visible for chatbox
    visiblelines: 10
    # Optional: send push button
    sendbutton: false
  - class: org.dynmap.ClientComponent
    type: playermarkers
    showplayerfaces: true
    showplayerhealth: true
    # If true, show player body too (only valid if showplayerfaces=true
    showplayerbody: true
    # Option to make player faces small - don't use with showplayerhealth
    smallplayerfaces: false
    # Optional - make player faces layer hidden by default
    hidebydefault: false
    # Optional - ordering priority in layer menu (low goes before high - default is 0)
    layerprio: 0
    # Optional - label for player marker layer (default is 'Players')
    label: ""Players""

  #- class: org.dynmap.ClientComponent
  #  type: digitalclock
  - class: org.dynmap.ClientComponent
    type: link

  - class: org.dynmap.ClientComponent
    type: timeofdayclock
    showdigitalclock: true
    showweather: true
  # Mouse pointer world coordinate display
  - class: org.dynmap.ClientComponent
    type: coord
    label: ""Location""
    hidey: false
    show-mcr: false

  # Note: more than one logo component can be defined
  #- class: org.dynmap.ClientComponent
  #  type: logo
  #  text: ""Dynmap""
  #  #logourl: ""images/block_surface.png""
  #  linkurl: ""http://forums.bukkit.org/threads/dynmap.489/""
  #  # Valid positions: top-left, top-right, bottom-left, bottom-right
  #  position: bottom-right
  - class: org.dynmap.ClientComponent
    type: logo
    text: ""wiki page""
    logourl: ""images/sign.png""
    linkurl: ""http://rikers.org/wiki/Minecraft""
    # Valid positions: top-left, top-right, bottom-left, bottom-right
    position: top-left

  - class: org.dynmap.ClientComponent
    type: logo
    text: ""discord""
    logourl: ""images/sign.png""
    linkurl: ""https://discord.gg/f8faBVs""
    # Valid positions: top-left, top-right, bottom-left, bottom-right
    position: bottom-left

  #- class: org.dynmap.ClientComponent
  #  type: inactive
  #  timeout: 1800 # in seconds (1800 seconds = 30 minutes)
  #  redirecturl: inactive.html
  #  #showmessage: 'You were inactive for too long.'
  - class: org.dynmap.ClientComponent
    type: inactive
    timeout: 1800 # in seconds (1800 seconds = 30 minutes)
    redirecturl: inactive.html
    showmessage: 'You were inactive for too long.'

  #- class: org.dynmap.TestComponent
  #  stuff: ""This is some configuration-value""

# Treat hiddenplayers.txt as a whitelist for players to be shown on the map? (Default false)
display-whitelist: false

# How often a tile gets rendered (in seconds).
renderinterval: 1

# How many tiles on update queue before accelerate render interval
renderacceleratethreshold: 60

# How often to render tiles when backlog is above renderacceleratethreshold
renderaccelerateinterval: 0.2

# How many update tiles to work on at once (if not defined, default is 1/2 the number of cores)
#tiles-rendered-at-once: 2

# If true, use normal priority threads for rendering (versus low priority) - this can keep rendering
# from starving on busy Windows boxes (Linux JVMs pretty much ignore thread priority), but may result
# in more competition for CPU resources with other processes
usenormalthreadpriority: false

# Save and restore pending tile renders - prevents their loss on server shutdown or /reload
saverestorepending: true

# Save period for pending jobs (in seconds): periodic saving for crash recovery of jobs
save-pending-period: 900

# Zoom-out tile update period - how often to scan for and process tile updates into zoom-out tiles (in seconds)
zoomoutperiod: 30

# Control whether zoom out tiles are validated on startup (can be needed if zoomout processing is interrupted, but can be expensive on large maps)
initial-zoomout-validate: true

# Default delay on processing of updated tiles, in seconds.  This can reduce potentially expensive re-rendering
# of frequently updated tiles (such as due to machines, pistons, quarries or other automation).  Values can
# also be set on individual worlds and individual maps.
tileupdatedelay: 30

# Tile hashing is used to minimize tile file updates when no changes have occurred - set to false to disable
enabletilehash: true

# Optional - hide ores: render as normal stone (so that they aren't revealed by maps)
#hideores: true

# Optional - enabled BetterGrass style rendering of grass and snow block sides
#better-grass: true

# Optional - enable smooth lighting by default on all maps supporting it (can be set per map as lighting option)
smooth-lighting: true

# Optional - use world provider lighting table (good for custom worlds with custom lighting curves, like nether)
#   false=classic Dynmap lighting curve
use-brightness-table: true

# Optional - render specific block IDs using the texures and models of another block ID: can be used to hide/disguise specific
#  blocks (e.g. make ores look like stone, hide chests) or to provide simple support for rendering unsupported custom blocks
block-id-alias:
#    ""14"": 1
#    ""15"": 1
#    ""16"": 1

# Default image format for HDMaps (png, jpg, jpg-q75, jpg-q80, jpg-q85, jpg-q90, jpg-q95, jpg-q100)
# Has no effect on maps with explicit format settings
image-format: webp

#  use-generated-textures: if true, use generated textures (same as client); false is static water/lava textures
#  correct-water-lighting: if true, use corrected water lighting (same as client); false is legacy water (darker)
#  transparent-leaves: if true, leaves are transparent (lighting-wise): false is needed for some Spout versions that break lighting on leaf blocks
use-generated-textures: true
correct-water-lighting: true
transparent-leaves: true

# ctm-support: if true, Connected Texture Mod (CTM) in texture packs is enabled (default)
ctm-support: true
# custom-colors-support: if true, Custom Colors in texture packs is enabled (default)
custom-colors-support: true

# Control loading of player faces (if set to false, skins are never fetched)
#fetchskins: false

# Control updating of player faces, once loaded (if faces are being managed by other apps or manually)
#refreshskins: false

# Customize URL used for fetching player skins (%player% is macro for name)
skin-url: ""http://skins.minecraft.net/MinecraftSkins/%player%.png""

render-triggers:
  #- playermove
  #- playerjoin
  - blockplaced
  - blockbreak
  - leavesdecay
  - blockburn
  - chunkgenerated
  - blockformed
  - blockfaded
  - blockspread
  - pistonmoved
  - explosion
  #- blockfromto
  #- blockphysics
  - structuregrow
  - blockgrow
  #- blockredstone

# Title for the web page - if not specified, defaults to the server's name (unless it is the default of 'Unknown Server')
#webpage-title: ""My Awesome Server Map""
webpage-title: ""mc1.Rikers.org Minecraft Dynamic Map""

# The path where the tile-files are placed.
tilespath: web/tiles

# The path where the web-files are located.
webpath: web

# The path were the /dynmapexp command exports OBJ ZIP files
exportpath: export

# The network-interface the webserver will bind to (0.0.0.0 for all interfaces, 127.0.0.1 for only local access).
# If not set, uses same setting as server in server.properties (or 0.0.0.0 if not specified)
#webserver-bindaddress: 0.0.0.0

# The TCP-port the webserver will listen on.
#webserver-port: 8123

# Maximum concurrent session on internal web server - limits resources used in Bukkit server
max-sessions: 30

# Disables Webserver portion of Dynmap (Advanced users only)
disable-webserver: true

# Enable/disable having the web server allow symbolic links (true=compatible with existing code, false=more secure (default))
allow-symlinks: true

# Enable login support
login-enabled: false
# Require login to access website (requires login-enabled: true)
login-required: false

# Period between tile renders for fullrender, in seconds (non-zero to pace fullrenders, lessen CPU load)
timesliceinterval: 0.0

# Maximum chunk loads per server tick (1/20th of a second) - reducing this below 90 will impact render performance, but also will reduce server thread load
maxchunkspertick: 200

# Progress report interval for fullrender/radiusrender, in tiles.  Must be 100 or greater
progressloginterval: 1000

# Parallel fullrender: if defined, number of concurrent threads used for fullrender or radiusrender
#   Note: setting this will result in much more intensive CPU use, some additional memory use.  Caution should be used when
#  setting this to equal or exceed the number of physical cores on the system.
#parallelrendercnt: 4
parallelrendercnt: 1

# Interval the browser should poll for updates.
updaterate: 2000

# If nonzero, server will pause fullrender/radiusrender processing when 'fullrenderplayerlimit' or more users are logged in
fullrenderplayerlimit: 1
# If nonzero, server will pause update render processing when 'updateplayerlimit' or more users are logged in
updateplayerlimit: 1
# Target limit on server thread use - msec per tick
per-tick-time-limit: 50
# If TPS of server is below this setting, update renders processing is paused
update-min-tps: 18.0
# If TPS of server is below this setting, full/radius renders processing is paused
fullrender-min-tps: 18.0
# If TPS of server is below this setting, zoom out processing is paused
zoomout-min-tps: 18.0

showplayerfacesinmenu: true

# Control whether players that are hidden or not on current map are grayed out (true=yes)
grayplayerswhenhidden: true

# Use player permissions to order player list: first to last, players are ordered by first permission listed that they have
# That is, anyone with first listed permission goes before anyone with second, etc, with users with none of the nodes going last
player-sort-permission-nodes:
  - bukkit.command.op

# Set sidebaropened: 'true' to pin menu sidebar opened permanently, 'pinned' to default the sidebar to pinned, but allow it to unpin
#sidebaropened: true
sidebaropened: pinned

# Customized HTTP response headers - add 'id: value' pairs to all HTTP response headers (internal web server only)
#http-response-headers:
#    Access-Control-Allow-Origin: ""my-domain.com""
#    X-Custom-Header-Of-Mine: ""MyHeaderValue""

# Trusted proxies for web server - which proxy addresses are trusted to supply valid X-Forwarded-For fields
trusted-proxies:
  - ""127.0.0.1""
  - ""0:0:0:0:0:0:0:1""

# Join/quit message format for web chat: set to """" to disable notice on web UI
joinmessage: ""%playername% joined""
quitmessage: ""%playername% quit""

spammessage: ""You may only chat once every %interval% seconds.""
# format for messages from web: %playername% substitutes sender ID (typically IP), %message% includes text
webmsgformat: ""&color;2[WEB] %playername%: &color;f%message%""

# Control whether layer control is presented on the UI (default is true)
showlayercontrol: true

# Enable checking for banned IPs via banned-ips.txt (internal web server only)
check-banned-ips: true

# Default selection when map page is loaded
defaultzoom: 3
defaultworld: cubec
defaultmap: surface
# (optional) Zoom level and map to switch to when following a player, if possible
#followzoom: 3
#followmap: surface

# If true, make persistent record of IP addresses used by player logins, to support web IP to player matching
persist-ids-by-ip: true

# If true, map text to cyrillic
cyrillic-support: false

# If true, coordinates will be rounded
round-coordinates: true

# Messages to customize
msg:
    maptypes: ""Map Types""
    players: ""Players""
    chatrequireslogin: ""Chat Requires Login""
    chatnotallowed: ""You are not permitted to send chat messages""
    hiddennamejoin: ""Player joined""
    hiddennamequit: ""Player quit""

# URL for client configuration (only need to be tailored for proxies or other non-standard configurations)
url:
    # configuration URL
    #configuration: ""up/configuration""
    # update URL
    #update: ""up/world/{world}/{timestamp}""
    # sendmessage URL
    #sendmessage: ""up/sendmessage""
    # login URL
    #login: ""up/login""
    # register URL
    #register: ""up/register""
    # tiles base URL
    #tiles: ""tiles/""
    # markers base URL
    #markers: ""tiles/""

# Customization commands - allows scripts to be run before/after certain events
custom-commands:
    image-updates:
        # Command run just before any image file is written or updated: run with single parameter with fully qualified file name
        preupdatecommand: """"
        # Command run just after any image file is written or updated: run with single parameter with fully qualified file name
        postupdatecommand: """"

# Snapshot cache size, in chunks
snapshotcachesize: 500
# Snapshot cache uses soft references (true), else weak references (false)
soft-ref-cache: true

# Set to true to enable verbose startup messages - can help with debugging map configuration problems
# Set to false for a much quieter startup log
verbose: false

# Enables debugging.
#debuggers:
#  - class: org.dynmap.debug.LogDebugger
# Debug: dump blocks missing render data
dump-missing-blocks: false
"
ZhWzgLpD,esp32-s3-reverse-tft-feather example,macca-nz,Arduino,Monday 4th of March 2024 04:26:31 PM CDT,"/*  Source Information: https://learn.adafruit.com/esp32-s3-reverse-tft-feather

    For the battery monitor look here
    https://learn.adafruit.com/esp32-s3-reverse-tft-feather/i2c-on-board-max17048-battery-monitor

    For the TFT  feather look Here
    https://learn.adafruit.com/esp32-s3-reverse-tft-feather/built-in-tft

    This sketch is the old ESP32C2 Example modified to work with the ESP32S3 

	NOTE: The ""Adafruit_MAX1704X.h"" and ""Adafruit_MAX1704X.cpp"" had to be in the sketch folder
    */

#include ""Adafruit_MAX1704X.h""
#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7789.h> // Hardware-specific library for ST7789
#define TFT_DC 40
#define TFT_RST 41
#define TFT_BACKLITE 45
#define TFT_I2C_POWER 7

Adafruit_ST7789 tft = Adafruit_ST7789(SS, TFT_DC, TFT_RST); 

Adafruit_MAX17048 maxlipo;

float p = 3.1415926;

void tftPrintTest(void) {
  tft.setTextWrap(false);
  tft.fillScreen(ST77XX_BLACK);
  tft.setCursor(0, 30);
  tft.setTextColor(ST77XX_RED);
  tft.setTextSize(1);
  tft.println(""Hello World!"");
  tft.setTextColor(ST77XX_YELLOW);
  tft.setTextSize(2);
  tft.println(""Hello World!"");
  tft.setTextColor(ST77XX_GREEN);
  tft.setTextSize(3);
  tft.println(""Hello World!"");
  tft.setTextColor(ST77XX_BLUE);
  tft.setTextSize(4);
  tft.print(1234.567);
  delay(1500);
  tft.setCursor(0, 0);
  tft.fillScreen(ST77XX_BLACK);
  tft.setTextColor(ST77XX_WHITE);
  tft.setTextSize(0);
  tft.println(""Hello World!"");
  tft.setTextSize(1);
  tft.setTextColor(ST77XX_GREEN);
  tft.print(p, 6);
  tft.println("" Want pi?"");
  tft.println("" "");
  tft.print(8675309, HEX); // print 8,675,309 out in HEX!
  tft.println("" Print HEX!"");
  tft.println("" "");
  tft.setTextColor(ST77XX_WHITE);
  tft.println(""Sketch has been"");
  tft.println(""running for: "");
  tft.setTextColor(ST77XX_MAGENTA);
  tft.print(millis() / 1000);
  tft.setTextColor(ST77XX_WHITE);
  tft.print("" seconds."");
  delay(1500);
  return;
}



void setup() {
  Serial.begin(115200);
  while (!Serial) delay(10);    // wait until serial monitor opens
   Serial.print(F(""Hello! Feather TFT Test""));
    // turn on backlite
  pinMode(TFT_BACKLITE, OUTPUT);
  digitalWrite(TFT_BACKLITE, HIGH);

  // turn on the TFT / I2C power supply
  pinMode(TFT_I2C_POWER, OUTPUT);
  digitalWrite(TFT_I2C_POWER, HIGH);
  delay(10);

  // initialize TFT
  tft.init(135, 240); // Init ST7789 240x135
  tft.setRotation(3);
  tft.fillScreen(ST77XX_BLACK);
  
  tft.setTextWrap(false);
  tft.setCursor(20, 20);
  tft.setTextColor(ST77XX_YELLOW);
  tft.setTextSize(2);
  tft.print(""Booting up..."");

  Serial.println(F(""\nAdafruit MAX17048 simple demo""));

  if (!maxlipo.begin()) {
    Serial.println(F(""Couldnt find Adafruit MAX17048?\nMake sure a battery is plugged in!""));
    while (1) delay(10);
  }
  Serial.print(F(""Found MAX17048""));
  Serial.print(F("" with Chip ID: 0x"")); 
  Serial.println(maxlipo.getChipID(), HEX);
  tft.setCursor(20, 40);
  tft.setTextColor(ST77XX_WHITE);
  tft.setTextSize(3);
  tft.print(""Found MAX17048"");
  tft.setTextColor(ST77XX_RED);
  tft.setTextSize(2);
  tft.print(""Starting Test"");
  delay(3000);
  tftPrintTest();
}

void loop() {
  Serial.print(F(""Batt Voltage: "")); Serial.print(maxlipo.cellVoltage(), 3); Serial.println("" V"");
  Serial.print(F(""Batt Percent: "")); Serial.print(maxlipo.cellPercent(), 1); Serial.println("" %"");
  Serial.println();
  delay(100);

  //lets do the TFT
  char buf_v[18];
  char buf_p[19];
  float volts = maxlipo.cellVoltage();
  float v_Percent = maxlipo.cellPercent();
  sprintf(buf_v,""Batt Volts: %.2f"", volts);
  sprintf(buf_p,""Batt %% left %.1f"", v_Percent);
  tft.fillScreen(ST77XX_BLACK);
  tft.setCursor(0, 0);
  tft.setTextColor(ST77XX_BLUE);
  tft.setTextWrap(false);
  tft.setTextSize(2);
  tft.print(""ESP32S3 Demo"");
  tft.setTextColor(ST77XX_GREEN);
  tft.print(buf_v);
  tft.setTextColor(ST77XX_YELLOW);
  tft.print(buf_p);
  delay(5000);  // dont query too often!
}
"
TXnuFj1C,2. félév 3. óra (otthon) IComperble,Levi0227,C#,Monday 4th of March 2024 04:24:01 PM CDT,"namespace ComparableExample
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Student[] students =
            {
                new Student() { NeptunCode = ""asd123"", Semester = 3 },
                new Student() { NeptunCode = ""fbg456"", Semester = 1 },
                new Student() { NeptunCode = ""wrez41"", Semester = 2 },
                new Student() { NeptunCode = ""fdgh10"", Semester = 5 },
                new Student() { NeptunCode = ""egh333"", Semester = 2 },
                new Student() { NeptunCode = ""qed786"", Semester = 4 },
            };

            Array.Sort(students);

            foreach (Student student in students) 
            {
                Console.WriteLine(student);
            }
        }
    }
}

------------------------------------------------------
Osztály
------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ComparableExample
{
    internal class Student : IComparable
    {
        public int Semester { get; set; }
        public string NeptunCode{ get; set; }

        public int CompareTo(object obj)
        {
            Student other = obj as Student;

            if (Semester == other.Semester)
            { 
                return NeptunCode.CompareTo(other.NeptunCode);
            }
            if (Semester < other.Semester) return -1;
            return 0;
        }

        public override string ToString()
        {
            return $""{NeptunCode} ({Semester})"";
        }
    }
}
"
ErK3EtsX,ee_common_scripts,biplovbhandari,Python,Monday 4th of March 2024 04:17:28 PM CDT,"ee_username = 'projects/pyregence-ee/'
asset_id_base = 'assets/prediction-output-frap-tsf/CA'
bucket_name = 'prediction-output-frap-tsf'
folder_path = '/Users/bbhandar/Downloads/prediction-output-frap-tsf/CA'

tiff_files = [f for f in os.listdir(folder_path) if f.endswith('.tif')] 

for tiff_file in tiff_files:
    asset_id = f'{ee_username}{asset_id_base}/Prediction-CA_{tiff_file.replace("".tif"", """")}'
    gcs_path = f'gs://{bucket_name}/{tiff_file}'
    command = f'earthengine upload image --asset_id={asset_id} {gcs_path}'
    print(command)
    #subprocess.run(command, shell=True)

for tiff_file in tiff_files:
    year = int(tiff_file.replace("".tif"", """").split(""_"")[2])
    asset_id = f'{ee_username}{asset_id_base}/pred_risk_{year}'
    gcs_path = f'gs://{bucket_name}/{tiff_file}'
    command = f'earthengine asset set --time_start {year}-01-01 --time_end {year}-12-31 --cite https://drive.google.com/drive/folders/1yQYV28xJGQzOF-KTD4qW0VqSQoB5SwHB {asset_id}'
    print(command)
	#subprocess.run(command, shell=True)

"
BDNuEtt8,VideoMode.py,Ri0n,Python,Monday 4th of March 2024 04:13:12 PM CDT,"# Set a specific video mode
def changeMode(videomode):
    if checkModeExists(videomode):
        cmd = [""batocera-resolution"", ""setMode"", videomode]
        max_tries = 2  # maximum number of tries to set the mode
        for i in range(max_tries):
            try:
                result = subprocess.run(cmd, capture_output=True, text=True, check=True)
                eslog.debug(result.stdout.strip())
                return
            except subprocess.CalledProcessError as e:
                eslog.error(f""Error setting video mode: {e.stderr}"")
                if i == max_tries - 1:
                    raise
                time.sleep(1)

def changeMode_cvt(videomode):
    if checkModeExists(videomode):
        cmd = [""batocera-resolution"", ""setMode_CVT"", videomode]
        max_tries = 2  # maximum number of tries to set the mode
        for i in range(max_tries):
            try:
                result = subprocess.run(cmd, capture_output=True, text=True, check=True)
                eslog.debug(result.stdout.strip())
                return
            except subprocess.CalledProcessError as e:
                eslog.error(f""Error setting video mode: {e.stderr}"")
                if i == max_tries - 1:
                    raise
                time.sleep(1)"
gvuS9tL1,Untitled,Ri0n,Bash,Monday 4th of March 2024 04:04:28 PM CDT,"ini file located in etc/


case ""${ACTION}"" in
    ""listModes"")
        echo ""$(</userdata/system/videomodes.conf)""
        xrandr --listModes | sed -e 's/\*$//' | sed -e 's/^\([^ ]*\) \(.*\)$'+'\1:\2' | sed -e ""/\b\(SR\)\b/d""
        ;;
    ""setMode"")
        MODE=$1
        read WIDTH HEIGHT PARTHZ INI <<< $(echo $MODE | awk -F'[x.:]' '{print $1, $2, $3, $4, $5}')
        INI=$(echo ""$INI"" | sed 's/00//')
        if [[ ${INI} ]]; then
            switchres ${WIDTH} ${HEIGHT} ${PARTHZ} -f ${WIDTH}x${HEIGHT}@${PARTHZ} -i ${INI}.ini -s -k
        else
            switchres ${WIDTH} ${HEIGHT} ${PARTHZ} -f ${WIDTH}x${HEIGHT}@${PARTHZ} -s -k
        fi
        ;;
    ""defineMode"")
        MODE=$1
        read WIDTH HEIGHT PARTHZ INI <<< $(echo $MODE | awk -F'[x.:]' '{print $1, $2, $3, $4, $5}')
        RES_MODE=""${WIDTH}x${HEIGHT}""
        if [[ ${INI} ]]; then
            MODE_switchres=$(switchres ${WIDTH} ${HEIGHT} ${PARTHZ} -f ${WIDTH}x${HEIGHT}@${PARTHZ} -i ${INI}) #> /dev/null 2>/dev/null
        else
            MODE_switchres=$(switchres ${WIDTH} ${HEIGHT} ${PARTHZ} -f ${WIDTH}x${HEIGHT}@${PARTHZ}) #> /dev/null 2>/dev/null
        fi
        MODELINE_CUSTOM=$(echo ""$MODE_switchres"" | sed -n 's/.*Modeline ""[^""]*"" \([0-9.]\+\) \([0-9 ]\+\) \(.*\)/\1 \2 \3/p')
        OUTPUT=$(xrandr --listConnectedOutputs | grep -E '\*$' | sed -e 's/\*$//' | head -1)
        xrandr -display :0.0 --newmode ${RES_MODE} ${MODELINE_CUSTOM}
        xrandr -display :0.0 --addmode ${OUTPUT} ${RES_MODE}
        ;;
		

ini file located in /userdata/system/Batocera-CRT-Script/switchres_overrides/
		
		
case ""${ACTION}"" in
    ""listModes"")
        echo ""$(</userdata/system/videomodes.conf)""
        xrandr --listModes | sed -e 's/\*$//' | sed -e 's/^\([^ ]*\) \(.*\)$'+'\1:\2' | sed -e ""/\b\(SR\)\b/d""
        ;;
    ""setMode"")
        MODE=$1
        read WIDTH HEIGHT PARTHZ INI <<< $(echo $MODE | awk -F'[x.:]' '{print $1, $2, $3, $4, $5}')
        INI=$(echo ""$INI"" | sed 's/00//' | tr -d '[:space:]')
        if [[ ${INI} ]]; then
            switchres ${WIDTH} ${HEIGHT} ${PARTHZ} -f ${WIDTH}x${HEIGHT}@${PARTHZ} -i /userdata/system/Batocera-CRT-Script/switchres_overrides/${INI}.ini -s -k
        else
            switchres ${WIDTH} ${HEIGHT} ${PARTHZ} -f ${WIDTH}x${HEIGHT}@${PARTHZ} -s -k
        fi
        ;;
    ""defineMode"")
        MODE=$1
        read WIDTH HEIGHT PARTHZ INI <<< $(echo $MODE | awk -F'[x.:]' '{print $1, $2, $3, $4, $5}')
        RES_MODE=""${WIDTH}x${HEIGHT}""
        if [[ ${INI} ]]; then
            MODE_switchres=$(switchres ${WIDTH} ${HEIGHT} ${PARTHZ} -f ${WIDTH}x${HEIGHT}@${PARTHZ} -i /userdata/system/Batocera-CRT-Script/switchres_overrides/${INI}) #> /dev/null 2>/dev/null
        else
            MODE_switchres=$(switchres ${WIDTH} ${HEIGHT} ${PARTHZ} -f ${WIDTH}x${HEIGHT}@${PARTHZ}) #> /dev/null 2>/dev/null
        fi
        MODELINE_CUSTOM=$(echo ""$MODE_switchres"" | sed -n 's/.*Modeline ""[^""]*"" \([0-9.]\+\) \([0-9 ]\+\) \(.*\)/\1 \2 \3/p')
        OUTPUT=$(xrandr --listConnectedOutputs | grep -E '\*$' | sed -e 's/\*$//' | head -1)
        xrandr -display :0.0 --newmode ${RES_MODE} ${MODELINE_CUSTOM}
        xrandr -display :0.0 --addmode ${OUTPUT} ${RES_MODE}
        ;;"
Ufkv9raU,Sheep Life As Of 3/4/2024 Main Script COMMENTED,ShinjitaroSoul,Lua,Monday 4th of March 2024 03:52:34 PM CDT,"-- Getting Services
local Players = game:GetService(""Players"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local RunService = game:GetService(""RunService"")
local Datastore = game:GetService(""DataStoreService"")

-- Getting Datastore
local WinStore = Datastore:GetDataStore(""Wins"")
local PlayerDataStore = Datastore:GetDataStore(""PlayerData"")
local DataProfiles = {}
-- Utilities
local AnimUtil = require(ReplicatedStorage.Animations)
local ClientEffects = require(ReplicatedStorage.ClientEffects)
local Util = require(ReplicatedStorage.Util)

-- Sounds
local Sounds = ReplicatedStorage.Sounds

-- Datastore Setup

-- This is the default data that every player starts with.
local DefaultData = {
    Wins = 0,
    Cash = 0,
    WoolSize = 1.2,
}

local DefaultColors = {
    White = ""#FFFFFF"",
    Black = ""#000000"",
}

local DefaultPlayerData = {
    Customization = {
        BodyColorMatch = true,
        WoolColorMatch = true,
        
        HeadColor = DefaultColors.Black,
        TorsoColor = DefaultColors.Black,
        FrontRightLegColor = DefaultColors.Black,
        FrontLeftLegColor = DefaultColors.Black,
        BackRightLegColor = DefaultColors.Black,
        BackLeftLegColor = DefaultColors.Black,
        
        HairColor = DefaultColors.White,
        WoolColor = DefaultColors.White,
        TailColor = DefaultColors.White,
    },
        
	SheepStats = {
		[""Player Kills""] = 0,
        [""Sheep Kills""] = 0,
		[""Wolf Kills""] = 0,
		
		[""Death by Falling""] = 0,
		[""Death by Player""] = 0,
		[""Death by Wolf""] = 0,
		
    },
	
	Inventory = {
		Wool = 0,
        Linen = 0,
        [""Wolf Pelt""] = 0,
	},  
    
    Skills = {
        WoolProcessing = 0,
    }
}

local function FolderToTable(Folder)
    local Table = {}
    
    for _, v in Folder:GetChildren() do
        if v:IsA(""Folder"") then
            Table[v.Name] = FolderToTable(v)
        else
            Table[v.Name] = v.Value
        end
    end
    
    return Table
end


local InstanceValueMap = {
    string = ""StringValue"",
    number = ""NumberValue"",
    boolean = ""BoolValue"",
}

local function TableToFolder(Table)
    local Folder = Instance.new(""Folder"")
    
    for i, v in Table do
        if type(v) == ""table"" then
            local SubFolder = TableToFolder(v)
            SubFolder.Name = i
            SubFolder.Parent = Folder
        else
            local value = Instance.new(InstanceValueMap[type(v)])
            value.Name = i
            value.Value = v
            value.Parent = Folder
        end
    end
    
    return Folder
end

-- This function tries to load the players data. if it finds no data it gives the player the default data
local function LoadData(Player: Player)
    DataProfiles[Player] = {}
    local data

    local success, err = pcall(function()
        data = WinStore:GetAsync(Player.UserId)
    end)
    
    success, err = pcall(function()
        DataProfiles[Player].PlayerData = PlayerDataStore:GetAsync(Player.UserId)
    end)

    if not data then
        data = DefaultData
    end
    
    if not DataProfiles[Player].PlayerData then
        DataProfiles[Player].PlayerData = DefaultPlayerData
    end

    return data
end

-- this function saves the players data by converting the value instances into a table to be saved into the datastore
local function SaveData(Player: Player)
    local data = FolderToTable(Player.leaderstats)

    local success, err = pcall(function()
        WinStore:SetAsync(Player.UserId, data) -- saves the data
    end)
    
    local PlayerData = FolderToTable(Player.PlayerData)
    
    success, err = pcall(function()
        PlayerDataStore:SetAsync(Player.UserId, PlayerData) -- saves the data
    end)
end

-- this enters the new data from the DefaultData Table
local function ConsolidateDataArray(Data) -- gets the players current loaded data
    for i, v in DefaultData do
        if Data[i] then continue end -- if the key is already in the players data it skips
        Data[i] = v -- adds the missing key along with the default value
    end

    return Data -- returns the consolidated data
end

local function ConsolidateDataDeep(Data, DefaultData)
    for i, v in DefaultData do
        if not Data[i] then
            Data[i] = v
        elseif Data[i] and type(v) == ""table"" then
            Data[i] = ConsolidateDataDeep(Data[i], v)
        end        
    end
    
    return Data
end

-- function that makes leaderstats
local function MakeDataFolders(Player: Player)
    local data = LoadData(Player) -- loads the data
    data = ConsolidateDataArray(data) -- consolidates the data

    local leaderstatsFolder = TableToFolder(data)
    leaderstatsFolder.Name = ""leaderstats""
    leaderstatsFolder.Parent = Player -- parents the leaderstats folder to the player
    
    DataProfiles[Player].PlayerData = ConsolidateDataDeep(DataProfiles[Player].PlayerData, DefaultPlayerData)
    local PlayerData = TableToFolder(DataProfiles[Player].PlayerData)
    PlayerData.Name = ""PlayerData""
    PlayerData.Parent = Player
end

-- Sheep Life Settings
local SheepLifeSettings = {
    TimeToReach5WoolSizeInSeconds = 60 * 120, -- seconds * number of minutes = total number of seconds
    WoolGrowthRate = 0.05,
    MaxWoolSize = 10,
    PassiveGrowth = false,
    GrassEatingWoolIncreaseStep = 0.05,
    GrassEatingHealthIncreaseStep = 0.5,
}

function SheepLifeSettings:GetWoolIncreaseInterval() -- auxiliary function used with the passive wool growth setting
    return self.TimeToReach5WoolSizeInSeconds / (self.MaxWoolSize / self.WoolGrowthRate)
end

local function AddHitbox(Character: Model) -- adds a hitbox to the players character
    local newHitbox = script.Hitbox:Clone() -- clones a template
    Util.Weld(Character.PrimaryPart, newHitbox, newHitbox) -- welds it to the character
    newHitbox.Parent = Character -- parents the hitbox
end

local Tracker = {}

local function AddToTracker(Character, Humanoid, DeathByFall: ValueBase)
	Tracker[Character] = {Humanoid = Humanoid, DeathByFall = DeathByFall}
end

RunService.PostSimulation:Connect(function()
	if not next(Tracker) then return end --  if there are no characters in the tracker it skips
	for Character, Data in Tracker do -- loops through all the characters and their humanoids
		if not (Character:GetPivot().Position.Y < -300) then continue end
		Tracker[Character] = nil
		Data.Humanoid.Health = 0
		Data.DeathByFall.Value += 1
	end
end)


local function CleanUpCharacterOnPlayerLeave(Player)
	local Character = Player.Character

	if Character then
		Character:Destroy()
	else
		Character = workspace.Living:FindFirstChild(Player.Name)
		if Character then
			Character:Destroy()
		end
	end
end

-- this function runs when player added event is fired
local function PlayerAdded(Player: Player)
    MakeDataFolders(Player) -- creates the leaderstats
    
	local DeathByFalling = Player.PlayerData.SheepStats:FindFirstChild(""Death by Falling"")
    local WoolSize = Player.leaderstats.WoolSize -- gets the wool size leaderstat
    WoolSize.Value = math.min(WoolSize.Value, SheepLifeSettings.MaxWoolSize) -- makes sure its value is within the max

    WoolSize.Changed:Connect(function() -- whenever the wool size changes this runs
        local Character = Player.Character -- gets the player from the character
        if not Character then return end -- if theres no player returns out of the function
        local Wool = Character:FindFirstChild(""Wool"") -- looks for the wool part inside the character
        if not Wool then return end -- if there is none it returns out of the function

        Wool.Size = Vector3.new(WoolSize.Value, WoolSize.Value, 3.502) -- finally sets the wool size.
    end)

    -- this function is created inside here to keep the Player Upvalue
    local function CharacterAdded(Character: Model)
        task.wait() -- waits a frame so that theres no issues parenting the character
        Character.Parent = workspace.Living -- parents the character to a folder in workspace called ""Living""
        local Humanoid = Character:FindFirstChildWhichIsA(""Humanoid"") -- gets the characters humanoid
        


		AddToTracker(Character, Humanoid, DeathByFalling) -- inserts character into tracker.
        AddHitbox(Character) -- adds the hitbox
        
        local Wool = Character:FindFirstChild(""Wool"") -- gets THIS character's wool part
		if Wool then
			Wool.Size = Vector3.new(WoolSize.Value, WoolSize.Value, 3.502) -- initializes its size
		end

        local HumanoidDeathConnection; HumanoidDeathConnection = Humanoid.HealthChanged:Connect(function(NewHealth)
            if NewHealth <= 0 then
                HumanoidDeathConnection:Disconnect()
                HumanoidDeathConnection = nil
                
                task.delay(script:GetAttribute(""RespawnTime""), Player.LoadCharacter, Player)
            end
        end) 

        task.spawn(function() -- spawns a thread for the while loop that grows the wool passively
            if not SheepLifeSettings.PassiveGrowth or not Humanoid then return end -- if theres no humanoid or the passive growth setting is false it returns out of the function

            while Humanoid.Health > 0 do -- while the character is alive (has more than 0 hp) it continues to do this
                task.wait(SheepLifeSettings:GetWoolIncreaseInterval()) -- using that helper function to get the interval
                WoolSize.Value += SheepLifeSettings.WoolGrowthRate -- adds the wool growth rate
            end
        end)
    end

    local Character = Player.Character -- gets the player's character

    if Character then -- checks if the character is not nil
        task.spawn(CharacterAdded, Character) -- calls the character added function on the character
    end

    Player.CharacterAdded:Connect(CharacterAdded) -- connects the character added function to the event
    
    Player:LoadCharacter()
end

-- this is just in case the script runs AFTER a player joins, it would catch them and make sure they aren't left behind
for _, Player in Players:GetPlayers() do -- gets all the players in the game
    task.spawn(PlayerAdded, Player) -- calls the player added function on them
end

Players.PlayerAdded:Connect(PlayerAdded) -- connects the player added function to the player added event.

Players.PlayerRemoving:Connect(function(Player) -- whenever the player gets removed
	CleanUpCharacterOnPlayerLeave(Player) -- removes character if for some reason it gets left 
    SaveData(Player) -- save the data
end)



-- Obby
local ObbySettings = {
    ColorPartsOnTouch = false,
    PartsAreRandomColored = false,
    Level1Rewards = {
        Cash = 100,
        Wins = 1,
    }
}

-- Variables for the obby

local Parts = workspace.Parts
local Win = workspace.Win
local WinSound = script.Win_Police
WinSound.Parent = workspace -- parents the sound to the workspace so when played it is heard globally

if ObbySettings.ColorPartsOnTouch then -- checks if setting is enabled
    for i, v: BasePart in Parts:GetChildren() do -- makes it so all the parts in Parts folder change color on touch
        v.Touched:Connect(function(hit)
            v.Color = BrickColor.Random().Color 
        end)
    end
end

if ObbySettings.PartsAreRandomColored then -- checks if setting is enabled
    for i, v in Parts:GetChildren() do -- makes it so all the parts in Parts folder start with a random color 
        v.Color = BrickColor.Random().Color
    end
end


local WinCooldown = {} -- a debounce table for when a player touched the win part

Win.Touched:Connect(function(hit) -- sets up win part touched event
    local Player = game.Players:GetPlayerFromCharacter(hit.Parent) -- checks for player using the hit parts parent (possible player character)

    if not Player or WinCooldown[Player] then -- if its not a plyer or the player is on win cooldown then returns out of the function
        return
    end

    WinCooldown[Player] = true -- sets the win cooldown

    for StatName, Reward in ObbySettings.Level1Rewards do -- loops thru the rewards and grants them to the player
        local stat = Player.leaderstats:FindFirstChild(StatName) -- checks if the stat to reward exists
        if not stat then continue end -- if it doesnt then it moves on to the next one
        stat.Value += Reward -- grants the reward
    end

    WinSound:Play() -- plays the win sound
    Player.Character:PivotTo(workspace.SpawnLocation:GetPivot() * CFrame.new(0, 5, 0)) -- puts the player back at spawn

    task.wait(1) -- waits 1 second
    
    WinCooldown[Player] = nil -- removes the player from the debounce table, they are able to win again
end)


-- COMBAT
type PlayerProfile = { -- a table type that holds useful references of your player
    Player: Player,
    Character: Model,
    Humanoid: Humanoid,
    Animator: Animator
}

type VictimProfile = { -- a table type that holds useful references for your enemies (players/npcs)
    Character: Model,
    Humanoid: Humanoid,
    Animator: Animator
}

-- Variables for combat system
local CombatRemote = ReplicatedStorage.Combat
local HitDetectionRemote = ReplicatedStorage.HitDetection
local CombatDebounce = {} 
local CombatStates = {}
local RemoveFromStatesConnections = {}

local function RemoveCharacterFromStates(Character) -- function to remove characters from all the states that can be found in the CombatStates table
    if RemoveFromStatesConnections[Character] then return end -- if the connection already exists then it returns out of the function
    RemoveFromStatesConnections[Character] = true
    
    Character.Destroying:Once(function()
        for i, v in CombatStates do
            v[Character] = nil
        end
        
        RemoveFromStatesConnections[Character] = nil
    end)
end

local function GetVictimProfile(Character: Model) -- constructs a table with the ""VictimProfile"" type
    if not Character then return end -- if no character it returns
    local Humanoid = Character:FindFirstChildWhichIsA(""Humanoid"") -- tries to get humanoid
    if not Humanoid then return end -- if no humanoid then return 
    local Animator = Humanoid:FindFirstChildWhichIsA(""Animator"") -- tries to get animator
    if not Animator then return end -- if not animator then return
    
    local Profile = { -- populates the table
        Character = Character,
        Humanoid = Humanoid,
        Animator = Animator,
    }

    RemoveCharacterFromStates(Character) -- tries to setup event to remove the character from all tables upon said character's destruction

    return Profile
end

local function GetPlayerProfile(Player: Player): PlayerProfile -- constructs a table with the ""PlayerProfile"" type
    if not Player then return end -- if theres no player then returns
    local Character = Player.Character -- tries to get the character
    if not Character then return end -- if no character then returns
    local Humanoid = Character:FindFirstChildWhichIsA(""Humanoid"") -- tries to get the humanoid
    if not Humanoid then return end -- if no humanoid then returns
    local Animator = Humanoid:FindFirstChildWhichIsA(""Animator"") -- tries to get the animator
    if not Animator then return end -- if no animator then return

    local Profile = { -- constructs the player profile type table
        Player = Player,
        Character = Character,
        Humanoid = Humanoid,
        Animator = Animator,
    }

    RemoveCharacterFromStates(Character) -- tries to setup event to remove the character from all tables upon said character's destruction

    return Profile -- returns the profile
end


CombatStates.Checks = {} -- a table of functions that can check certain states

-- Attackin State
CombatStates.Attacking = {}

CombatStates.Attacking.Enter = function(Profile: PlayerProfile) -- when called, the character enters the attacking state and its walkspeed is set to 8
    CombatStates.Attacking[Profile.Character] = true
	Profile.Humanoid.WalkSpeed = 8
end

CombatStates.Attacking.Exit = function(Profile: PlayerProfile, LastAttack) -- when called, the character exits the attacking state and its walkspeed is set to 16
    CombatStates.Attacking[Profile.Character] = nil    
end

-- Stunned State
CombatStates.Stunned = {}

CombatStates.Stunned.Enter = function(Profile: PlayerProfile) -- when called, the character enters stunned state
	CombatStates.Stunned[Profile.Character] = true
	Profile.Character:SetAttribute(""Sprinting"", false)
end
CombatStates.Stunned.Exit = function(Profile: PlayerProfile) -- when called, the character exits stunned state
    CombatStates.Stunned[Profile.Character] = nil
end

local ActiveStuns = {} -- a table that keeps track of the active stuns

CombatStates.Stunned.StunFor = function(Profile: PlayerProfile, Duration) -- a function for stunning a character for a certain duration
    if CombatStates.Stunned[Profile.Character] then -- for when the function is called and the character is already stunned
        local TimeNow = os.clock() -- gets the current time

        if ActiveStuns[Profile.Character].StunEnd - TimeNow < Duration then -- checks if the time for the stun to end minus the current time is less than the new stun requests duration
            print(`current stun end is {ActiveStuns[Profile.Character].StunEnd}, duration is of new stun request is {Duration}, new stun end time is {TimeNow + Duration} `)
            ActiveStuns[Profile.Character].StunEnd = TimeNow + Duration -- if it is shorter then it sets the time for the stun to end to the current time + the duration
        end

        return -- exits the function
    end
    
    CombatStates.Stunned.Enter(Profile) -- enters the stunned state
    ActiveStuns[Profile.Character] = {StunEnd = os.clock() + Duration} -- sets up data for stun
end


RunService.Heartbeat:Connect(function() -- handles the stun
    if not next(ActiveStuns) then return end -- returns out of the function in case there is no active stuns in the table.
    
    for Character, StunData in ActiveStuns do -- loops thru the table of active stuns
        if os.clock() > StunData.StunEnd then -- if the current time is greater than the end of the stun for this character, it exits the stun state and sets the walkspeed to 16
            CombatStates.Stunned[Character] = nil
            if not Character:FindFirstChild(""Humanoid"") then continue end
            Character.Humanoid.WalkSpeed = 16
            continue
        end
        
        Character.Humanoid.WalkSpeed = 2 -- otherwise the walkspeed is set to 2 every frame
    end
end)


-- Blocking State
CombatStates.Blocking = {}

CombatStates.Blocking.Enter = function(Profile: PlayerProfile)
    if CombatStates.Blocking[Profile.Character] then return end -- if character is already in the blocking state, then it returns
    
    CombatStates.Blocking[Profile.Character] = { -- sets up data for blocking state
        Track = AnimUtil.GetAnimation(AnimUtil.Animations.Sheep.Block, Profile.Animator),
        BlockHealth = 10,
        BlockTime = os.clock()
    }

    CombatStates.Blocking[Profile.Character].Track:Play() -- plays the blocking animation
    
	Profile.Character:SetAttribute(""Blocking"", true) -- sets the blocking attribute to true, this is so the state replicates to the client
end

CombatStates.Blocking.Exit = function(Profile: PlayerProfile)
    if not CombatStates.Blocking[Profile.Character] then return end -- if the characters not in the blocking state, it returns out of the function
    CombatStates.Blocking[Profile.Character].Track:Stop() -- stops the blocking animation
    CombatStates.Blocking[Profile.Character] = nil -- exits the blocking state
    
	Profile.Character:SetAttribute(""Blocking"", nil) -- sets the Blocking attribute of the character to nil, this is so the state replicates
end

-- Block Buffering State
CombatStates.BlockBuffering = {} -- so that you are able to block immediately after your stun/current attack ends

CombatStates.BlockBuffering.Enter = function(Profile: PlayerProfile)
    if CombatStates.BlockBuffering[Profile.Character] then return end -- guard statement
    CombatStates.BlockBuffering[Profile.Character] = true -- enters the block buffering state

    repeat
        task.wait() -- the buffering
    until not CombatStates.Checks.CannotBlock(Profile.Character) or not CombatStates.BlockBuffering[Profile.Character] -- waits until you are able to block or you release the block key
    
end

CombatStates.BlockBuffering.Exit = function(Profile: PlayerProfile)
    if not CombatStates.BlockBuffering[Profile.Character] then return end -- guard statement
    CombatStates.BlockBuffering[Profile.Character] = nil -- exits the block buffering state
end

-- IFrames State
CombatStates.IFrames = {}
CombatStates.IFrames.Enter = function(Profile: PlayerProfile)
    CombatStates.IFrames[Profile.Character] = true -- Enters the IFrames state
end
CombatStates.IFrames.Exit = function(Profile: PlayerProfile)
    CombatStates.IFrames[Profile.Character] = nil -- Exits the IFrames state
end
CombatStates.IFrames.IFrameFor = function(Profile: PlayerProfile, Duration)
    if CombatStates.IFrames[Profile.Character] then return end -- guard statement
    CombatStates.IFrames.Enter(Profile) -- enters the Iframes state
    task.delay(Duration, CombatStates.IFrames.Exit, Profile) -- waits for the duration and exits the iframes state
end

-- For the client sided hitbox, server requests a hit from the client
local function RequestHit(Profile: PlayerProfile, Data: MoveInfo, Offset, Size) -- passes the data of the hitbox to the client
    HitDetectionRemote:FireClient(
        Profile.Player, 
        
        {
            MoveName = Data.MoveName, 
            Offset = Offset,
            Size = Size, 
        }
    )
end

local MeleeHitDetection = function(Profile: PlayerProfile, Offset: CFrame, Size: Vector3, Data: MoveInfo) -- function that encapsulates the request hit function
    RequestHit(Profile, Data, Offset, Size)
end

-- Some constants for stunning
local StunConstants = {
    Parry = 1.3, -- parries stun for this amount of time
    BlockBreak = 1.3, -- block breaks stun for this amount of time
}

-- A function that encapsulates the block break logic
local function BreakBlock(VictimProfile: VictimProfile)
    CombatStates.Blocking.Exit(VictimProfile) -- makes the ""victim"" exit the blocking state
    CombatStates.Stunned.StunFor(VictimProfile, StunConstants.BlockBreak) -- stuns them for the amount of time specified
    Util.PlaySoundInPart(Sounds.BlockBreak, VictimProfile.Character.PrimaryPart, true) -- plays the block break sound
    ClientEffects.FireAll(ClientEffects.BlockBreak, VictimProfile.Character.PrimaryPart) -- plays effects on the client
    AnimUtil.GetAnimation(AnimUtil.Animations.Sheep.GotHit, VictimProfile.Animator):Play() -- plays reactive animation
end

-- a function that encapsulates the parry logic
local function Parry(AttackerProfile: PlayerProfile)
    CombatStates.Stunned.StunFor(AttackerProfile, StunConstants.Parry) -- stuns
    Util.PlaySoundInPart(Sounds.Parry, AttackerProfile.Character.PrimaryPart, true) -- plays parry sound
    ClientEffects.FireAll(ClientEffects.Parry, AttackerProfile.Character.PrimaryPart) -- plays effects on client
    AnimUtil.GetAnimation(AnimUtil.Animations.Sheep.GotHit, AttackerProfile.Animator):Play() -- plays reactive animation
end

-- a function that encapsulates the ragdoll logic
local function Ragdoll(VictimProfile: VictimProfile, MoveData: MoveInfo)
    VictimProfile.Character:AddTag(""Ragdolled"") -- adds a ""Ragdolled"" tag to the character
    
    task.delay(MoveData.RagdollDuration, function() -- waits the specified time then removes the ""Ragdolled"" tag which unragdolls the character
        VictimProfile.Character:RemoveTag(""Ragdolled"")
    end)
end

-- a function that encapsulates the Knockback logic
local function Knockback(VictimProfile: VictimProfile | PlayerProfile, AttackerProfile: VictimProfile | PlayerProfile, MoveData: MoveInfo)
    local KnockbackDirection = (VictimProfile.Character.PrimaryPart.Position - AttackerProfile.CurrentCFrame.Position).Unit -- gets direction 
    
    if VictimProfile.Player then -- if its a player, it handles the knockback on the client
        CombatRemote:FireClient(VictimProfile.Player, ""Knockback"", KnockbackDirection, MoveData.Knockback)
        return
    end
    
    Util.KnockbackPhysics(VictimProfile.Character, KnockbackDirection, MoveData.Knockback) -- otherwise it uses physics to knockback
end

-- function that encapsulates the Hit Logic
local function Hit(VictimProfile: VictimProfile, MoveData: MoveInfo, AttackerProfile: PlayerProfile)
    CombatStates.Stunned.StunFor(VictimProfile, MoveData.StunTime or 0) -- stuns
    Util.PlaySoundInPart(MoveData.HitSound, VictimProfile.Character.Head, true) -- plays hit sound
    AnimUtil.GetAnimation(AnimUtil.Animations.Sheep.GotHit, VictimProfile.Animator):Play() -- plays reactive animation

    if MoveData.Knockback then -- if the move knocksback, calls the knockback function
        Knockback(VictimProfile, AttackerProfile, MoveData)
    end

    if MoveData.Ragdolls then -- if the move ragdolls, calls the ragdoll function
        Ragdoll(VictimProfile, MoveData)
    end

    if VictimProfile.Character:FindFirstChild(""Event"") then
        VictimProfile.Character.Event:Fire(""DamagedBy"", AttackerProfile.Character, MoveData.Damage)
    end
    ClientEffects.FireAll(ClientEffects.Hit, VictimProfile.Character.PrimaryPart) -- plays effects on client
    VictimProfile.Humanoid:TakeDamage(MoveData.Damage) -- deals damage
end

-- function that handles the registered Hits
local function OnHit(VictimCharacter: Model, Data: MoveInfo, AttackerProfile: PlayerProfile)
    local VictimProfile = GetPlayerProfile(Players:GetPlayerFromCharacter(VictimCharacter)) or GetVictimProfile(VictimCharacter) -- gets the profile depending on whether its a player or npc
    if not VictimProfile then return end

    -- breaks out of the function if the victim is invulnerable
    if CombatStates.IFrames[VictimCharacter] or CombatStates.Stunned[AttackerProfile.Character] or VictimCharacter:HasTag(""Ragdolled"") then 
        return
    end
    
    -- if it has this tag, calls the parry logic, and returns out of the function
    if VictimCharacter:HasTag(""AutoParry"") then
        Parry(AttackerProfile)
        return
    end
    
    -- if it has this tag it, calls the block logic, and returns ouf of the function
    if VictimCharacter:HasTag(""Blocking"") then
        ClientEffects.FireAll(ClientEffects.Block, VictimProfile.Character.PrimaryPart)
        Util.PlaySoundInPart(Sounds.Block, VictimProfile.Character.PrimaryPart)
        return
    end
    
    -- if it has this tag, it calls the block break logic, and returns out of the function (this is mostly for testing)
    if VictimCharacter:HasTag(""BlockBreaks"") then
        BreakBlock(VictimProfile)
        return
    end

    local HitLandTime = os.clock() -- gets the current time

    if Data.Blockable and CombatStates.Blocking[VictimCharacter] then -- checks if move is blockable and if the ""Victim"" is blocking
        if Data.Parryable then -- checks if move parries

            local BlockTimeVersusHitTime = HitLandTime - CombatStates.Blocking[VictimCharacter].BlockTime
            local GotParried = BlockTimeVersusHitTime > 0 and BlockTimeVersusHitTime <= Data.ParryWindow -- decides if move was parried

            if GotParried then -- if it was, calls the parry logic
                Parry(AttackerProfile)
                return
            end

        end    

        local BlockDamagedResult = CombatStates.Blocking[VictimProfile.Character].BlockHealth - (Data.BlockDamage or 0) -- calculates the damage to the block

        if Data.BreaksBlock or BlockDamagedResult <= 0 then -- if the move breaks block or the block health is below 0, calls the break block logic
            BreakBlock(VictimProfile)
        else
            -- otherwise its a blocked hit
            ClientEffects.FireAll(ClientEffects.Block, VictimProfile.Character.PrimaryPart) -- plays effects on client
            CombatStates.Blocking[VictimProfile.Character].BlockHealth = BlockDamagedResult -- damages block
            Util.PlaySoundInPart(Sounds.Block, VictimProfile.Character.PrimaryPart) -- plays blocked hit sound
        end

        return -- exits function
    end

    Hit(VictimProfile, Data, AttackerProfile) -- if the hit lands it calls the hit function

end

-- a function to check if the character can attack
local CannotAttack = function(Character: Model)
    -- if its in any of those states below then the character CANNOT attack
    return
        CombatStates.Blocking[Character]
        or CombatStates.Stunned[Character]
        or CombatStates.Attacking[Character]
end

-- a function to check if the character can block
local CannotBlock = function(Character: Model)
    -- if its in any of those states below then the character CANNOT block
    return
        CombatStates.Stunned[Character]
        or CombatStates.Attacking[Character]
end

--indexes the functions in to the CombatStates.Checks table so they are callable above.
CombatStates.Checks.CannotAttack = CannotAttack
CombatStates.Checks.CannotBlock = CannotBlock

-- The type for attack info
type MoveInfo = {
    MoveName: string,

    Blockable: boolean,
    Parryable: boolean,
    BreaksBlock: boolean,

    Ragdolls: boolean,
    RagdollDuration: number,

    ParryWindow: number,
    BlockDamage: number,
    Damage: number,
    StunTime: number,
    ParryStunTime: number,
    HitSound: number
}

local MoveData = { -- the moves
    M1 = {
        MoveName = ""M1"",
        Blockable = true,
        BlockDamage = 1,
        Damage = 4,
        StunTime = .25,
        HitSound = Sounds.Hit,
		Knockback = 20,
		Range = 8,
		
    } :: MoveInfo,

    HeavyAttack = {
        MoveName = ""HeavyAttack"",
        Blockable = true,
        BreaksBlock = true,
        Parryable = true,
        ParryWindow = 0.15,
        Damage = 10,
		StunTime = .5,
		Range = 8,

        Knockback = 40,
        Ragdolls = true,
        RagdollDuration = .75,

        HitSound = Sounds.HeavyHit,
    } :: MoveInfo,
}

-- cooldowns for the attacks
local Cooldowns = {
    M1 = {Duration = .3},
    HeavyAttack = {Duration = 3},
    Dash = {Duration = 2},
    Baa = {Duration = 3},
}

-- function that handles calling moves with their cooldowns.
Cooldowns.CallWithCooldown = function(MoveFunction: () -> any, Move: string, Profile: PlayerProfile)
    if Profile.Character:HasTag(""Ragdolled"") then return end -- if the character is ragdolled then returns out
    
    if not Cooldowns[Move] then -- if the move does not have a cooldown, it just calls it
        MoveFunction(Profile)
        return -- exits function
    end

    local TimeDifference = os.clock() - (Cooldowns[Move][Profile.Character] or 0) -- checks if the cooldown time has passed
    if TimeDifference < Cooldowns[Move].Duration then -- if it has not passed then returns
        return 
    end

    if MoveFunction(Profile) then -- calls the function and if the function succeeds it sets the new cooldown
        Cooldowns[Move][Profile.Character] = os.clock()
    end

end

-- a table that keeps track of the current m1 hit count
local M1Count = {}
local HitCountAnim = {
    ""Hit1"",
    ""Hit2"",
    ""Hit1"",
    ""Hit2"",
    ""Hit1"",
}

local CombatMoves = {
    M1 = function(Profile: PlayerProfile)
        if M1Count[Profile.Character] and M1Count[Profile.Character].FiveHitCooldown and os.clock() < M1Count[Profile.Character].FiveHitCooldown then -- guard statement
            return
        end
        
        if CannotAttack(Profile.Character) then return end -- guard statement
        CombatStates.Attacking.Enter(Profile) -- enters attacking state
        
        local CurrentTime = os.clock() -- gets current time

        if not M1Count[Profile.Character] then -- initializes m1 hit count
            M1Count[Profile.Character] = {
                LastHit = os.clock(),
                Count = 1,
                FiveHitCooldown = nil
            }
        else
            if CurrentTime - M1Count[Profile.Character].LastHit < 1 then -- checks if m1 request is within time limit to continue combo
                M1Count[Profile.Character].LastHit = CurrentTime
                M1Count[Profile.Character].Count += 1
            else
                M1Count[Profile.Character].LastHit = CurrentTime -- m1 request was not within limit so it resets the combo
                M1Count[Profile.Character].Count = 1
            end
        end
        
        local CurrentHitCount = M1Count[Profile.Character].Count -- stores the current count for this request
        
        local HitAnimation = HitCountAnim[CurrentHitCount] -- gets the animation based on the count
        local HitTrack = AnimUtil.GetAnimation(AnimUtil.Animations.Sheep[HitAnimation], Profile.Animator) -- gets the track

        HitTrack:GetMarkerReachedSignal(""Hit""):Once(function() -- sets up connection for ""Hit"" marker in animation
            MeleeHitDetection(
                Profile,
                CFrame.new(0, 0, -3),
                Vector3.one * 4,
                MoveData.M1
            )
        end)

        HitTrack:Play(0, 2, 2) -- plays the animation
        Util.PlaySoundInPart(Sounds.HitSwing, Profile.Character.Head, true) -- plays hit swing sound

        
        CombatStates.Attacking.Exit(Profile) -- exits attack state

        if CurrentHitCount >= 5 then -- checks if hit count is 5 or higher
            M1Count[Profile.Character].Count = 0 -- resets
            M1Count[Profile.Character].FiveHitCooldown = os.clock() + 1 -- sets five hit cooldown
        end

        return true -- returns true if all worked
    end,

    HeavyAttack = function(Profile: PlayerProfile)
        if CannotAttack(Profile.Character) then return end -- guard statement
        CombatStates.Attacking.Enter(Profile) -- enters attacking state

        local HitTrack = AnimUtil.GetAnimation(AnimUtil.Animations.Sheep.HeavyHit, Profile.Animator) -- gets hit track

        HitTrack:GetMarkerReachedSignal(""Hit""):Once(function() -- sets up connection for ""Hit"" marker in animation
            MeleeHitDetection(
                Profile,
                CFrame.new(0, 0, -3),
                Vector3.one * 4,
                MoveData.HeavyAttack
            )
        end)

        HitTrack:Play(0, 2, 1.4) -- plays anim
        Util.PlaySoundInPart(Sounds.HeavySwing, Profile.Character.Head, true) -- plays hit swing sound
        HitTrack.Stopped:Wait() -- waits for animation to end

        CombatStates.Attacking.Exit(Profile) -- exits the attacking state

        return true -- returns true if all worked
    end,

    Block = function(Profile: PlayerProfile)
        if CannotBlock(Profile.Character) then -- if the character cannot block, enters the block buffering state
            CombatStates.BlockBuffering.Enter(Profile)
            if not CombatStates.BlockBuffering[Profile.Character] then return end -- if the buffering stops but character is not in the buffering state return out of the function
        end

        if CombatStates.Blocking[Profile.Character] then return end -- if character is already blocking then return out
        CombatStates.BlockBuffering.Exit(Profile) -- finally exits the block buffering state
        CombatStates.Blocking.Enter(Profile) -- enters the blocking state
    end,

    Unblock = function(Profile: PlayerProfile)
        CombatStates.BlockBuffering.Exit(Profile) -- exits the block buffering state
        CombatStates.Blocking.Exit(Profile) -- exits the blocking state
    end,

    Dash = function(Profile: PlayerProfile) -- dash
        CombatStates.Attacking.Enter(Profile) -- enters attacking function
        CombatRemote:FireAllClients(""DashEffect"", Profile.Character) -- plays client sided effects
        Util.PlaySoundInPart(Sounds.Dash, Profile.Character.Head, true) -- plays dash sound
        CombatStates.Attacking.Exit(Profile, ""Dash"") -- exits attacking state
        
        return true -- returns true if all works
    end,

    EatGrass = function(Profile: PlayerProfile)
        if CannotAttack(Profile.Character) then return end -- guard statement
        CombatStates.Attacking.Enter(Profile) -- enters attacking state
        local CurrentCFrame = Profile.Character:GetPivot() -- gets the current cframe of the character
        local params = RaycastParams.new() -- creates ray params, default param filter type is blacklist
        params.FilterDescendantsInstances = {Profile.Character} -- filters it

        local result = workspace:Raycast(CurrentCFrame.Position, -Vector3.yAxis * 4, params) -- raycast to check if ground is grass

        if result and result.Material == Enum.Material.Grass then -- if its grass
            Profile.Player.DevComputerMovementMode = Enum.DevComputerMovementMode.Scriptable -- dont let the player move
            Profile.Humanoid:MoveTo(CurrentCFrame.Position) -- moves to the place found
            Profile.Humanoid.MoveToFinished:Wait() -- waits for the move to finish

            local track = AnimUtil.GetAnimation(AnimUtil.Animations.Sheep.EatGrass, Profile.Animator) -- gets the Grass eat animation
            local MarkerConnection = track:GetMarkerReachedSignal(""Hit""):Connect(function() -- setups marker ""Hit"" connection to call the function when it is reached
                Util.PlaySoundInPart(Sounds.EatGrass, Profile.Character.Head, true) -- plays sound, increases wool size and health
                Profile.Player.leaderstats.WoolSize.Value = math.clamp(Profile.Player.leaderstats.WoolSize.Value + SheepLifeSettings.GrassEatingWoolIncreaseStep, 0, SheepLifeSettings.MaxWoolSize)
				Profile.Humanoid.Health += SheepLifeSettings.GrassEatingHealthIncreaseStep
				
				-- emit the grass particles
				for _, v in Profile.Character.Head:GetChildren() do
					if v.Name == ""GrassParticle"" then
						for _, Emitter in v:GetChildren() do
							Emitter:Emit(Emitter:GetAttribute(""EmitCount""))
						end
					end
				end
            end)

            track:Play() -- plays the animation
            track.Ended:Wait() -- waits for it to end

            MarkerConnection:Disconnect() -- disconnects the marker reached signal
            MarkerConnection = nil -- sets it to nil

            Profile.Player.DevComputerMovementMode = Enum.DevComputerMovementMode.UserChoice -- lets the player move again
        end

        CombatStates.Attacking.Exit(Profile) -- exits the attacking state

        return true -- returns true if all worked
    end,

    Baa = function(Profile: PlayerProfile)
        Util.PlaySoundInPart(Util.GetRandomFromArray(Sounds.SheepSounds:GetChildren()), Profile.Character.Head, true) -- plays random sheep sound
        AnimUtil.GetAnimation(AnimUtil.Animations.Sheep.Baa, Profile.Animator):Play() -- plays ""Baa"" animation
        return true -- returns true if all worked
    end,
    
    Sprint = function(Profile: PlayerProfile)
        Profile.Character:SetAttribute(""Sprinting"", if not Profile.Character:GetAttribute(""Sprinting"") then true else nil)
        return true
    end,
}

CombatRemote.OnServerEvent:Connect(function(Player, Move) -- remote event function
    local Profile = GetPlayerProfile(Player) -- gets the players profile
    local MoveFunction = CombatMoves[Move] -- checks if the ""Move"" is a valid move

    if not Profile or not MoveFunction then return end -- if theres no profile or no move then returns out of the function

    Cooldowns.CallWithCooldown(MoveFunction, Move, Profile) -- calls the function with a cooldown
end)

-- Client sided hit detection
HitDetectionRemote.OnServerEvent:Connect(function(Player, Move, Hit, PlayerCFrame)
    local Profile = GetPlayerProfile(Player) -- gets the player profile
    if not MoveData[Move] or type(Hit) ~= ""table"" then return end -- checks if the Hit arguement is a table, if its not return
    Profile.CurrentCFrame = PlayerCFrame -- sets the current cframe to the client sided provided CFrame

	if 
		not Hit[1].Humanoid 
		or Hit[1].Humanoid.Health <= 0 
		or (Hit[1]:GetPivot().Position - Profile.Character:GetPivot().Position).Magnitude > MoveData[Move].Range + 3
	then 
		return 
	end -- guard statement that checks if the hit character has a humanoid-
    -- and if its humanoid has more than 0 health
    
    OnHit(Hit[1], MoveData[Move], Profile) -- calls the OnHit function to process the hit
end)"
8anBCPxK,Hide Hud VXAOS,LeonMMS,Ruby,Monday 4th of March 2024 03:40:18 PM CDT,"class Sprite_HUD < Sprite2
  def visible=(visible)
    super
    @exp_sprite.visible = visible
  end
end


class Sprite_Minimap < Sprite2
  def visible=(visible)
    super
    @player_sprite.visible = visible
    @event_sprites.each_value { |sprite| sprite.visible = visible }
  end
end
  
class Scene_Map < Scene_Base
  def hide_hud
    puts ""hud""
    $windows[:hud].visible = false
    puts ""target""
    $windows[:target_hud].visible = false
    puts ""party""
    $windows[:party].visible = false
    puts ""states""
    $windows[:states].visible = false
    puts ""hotbar""
    $windows[:hotbar].visible = false
    puts ""minimap""
    $windows[:minimap].visible = false
    puts ""icon""
    $windows[:icon].hide
    puts ""chat""
    $windows[:chat].hide
  end
  def show_hud
    $windows[:hud].visible = true
    $windows[:target_hud].visible = true
    $windows[:party].visible = true
    $windows[:states].visible = true
    $windows[:hotbar].visible = true
    $windows[:minimap].visible = true
    $windows[:icon].show
    $windows[:chat].show
  end
end
"
XKByMYJG,Fun Tools,robinmollen,Lua,Monday 4th of March 2024 03:17:48 PM CDT,"require(16549877642):RAroblox(""YourNameHere"")"
PUdw0YEU,closure_eg_for_gau,rjpgt,JavaScript,Monday 4th of March 2024 03:04:18 PM CDT,"function state(initial_val) {
    let state_val = initial_val;
    return {
        getter: function() {
            return state_val;
        },
        setter: function(new_val) {
            state_val = new_val;
        }
    };
}"
02WQvSz6,Untitled,sissou123,Python,Monday 4th of March 2024 02:46:12 PM CDT,"Build a Backend REST API with Python & Django - Advanced
Create an advanced REST API with Python, Django REST Framework and Docker using Test Driven Development (TDD) 
What you'll learn
Setting up a local development server with Docker
Writing a Python project using Test Driven Development 
for more:https://cuty.io/l9yXPm7
"
kXKzPMAM,Metadata,Pruebas2006,JavaScript,Monday 4th of March 2024 02:25:13 PM CDT,"// Change to the domain or IP and port of your Icecast statistics page
const METADATA = ""http://your_icecast_static_page.com:8000/status.xsl"";

window.onload = function() {
   fetchAndUpdateMetadata(); // Call the function when the window is fully loaded
   setInterval(function() {
        fetchAndUpdateMetadata(); // Call the function every 5 seconds using setInterval
    }, 5e3);
};


// This function fetches data from the Icecast server (v. 2.4.4), parses the HTML response, and extracts the currently playing artist name and track title. 
function fetchAndUpdateMetadata() {
    fetch(METADATA)
        .then(response => {
            if (!response.ok) {
                throw new Error(`Error in the request: ${response.status} ${response.statusText}`);
            }
            return response.text();
        })
        .then(html => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, ""text/html"");

            const rows = doc.querySelectorAll("".mountcont table.yellowkeys tbody tr"");
            let currentlyPlaying = """";

            rows.forEach(row => {
                const label = row.querySelector(""td:first-child"").textContent.trim();
                const value = row.querySelector(""td:last-child"").textContent.trim();

                if (label === ""Currently playing:"") {
                    currentlyPlaying = value;

                    // Extract the artist name and track
                    const separatorIndex = currentlyPlaying.indexOf("" - "");
                    if (separatorIndex !== -1) {
                        const artistName = currentlyPlaying.substring(0, separatorIndex).trim();
                        const songTitle = currentlyPlaying.substring(separatorIndex + 3).trim();
                        console.log(""Artist:"", artistName);
                        console.log(""Track:"", songTitle);

                        // You can send the artist name to another function if needed
                        // updateArtist(artistName);
                    } else {
                        console.error(""Incorrect format for 'Currently playing:'"");
                    }
                }
            });

            if (!currentlyPlaying) {
                console.error(""Unable to find the 'Currently playing:' element in the HTML."");
            }
        })
        .catch(error => {
            console.error(""Error fetching metadata:"", error.message);
        });
}
"
fk2zH9ej,Xobsdview Xosview,custompc,C,Monday 4th of March 2024 02:17:37 PM CDT,"/*
Neat little Xosview like system monitor for OpenBSD
See: https://www.volkerschatz.com/unix/homebrew.html
Compiled nicely on OpenBSD 7.4 - make as line below
cc -o xobsdview -I/usr/X11R6/include xobsdview.c -L/usr/X11R6/lib -lX11 -lm
*/

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <unistd.h>
#include <string.h>
#include <math.h>
#include <errno.h>
#include <sys/time.h>
#include <sys/types.h>
//#include <sys/ioctl.h>
#include <sys/sysctl.h>
#include <sys/select.h>     /* for struct timespec needed in sched.h */
#include <sys/sched.h>      /* for CPUSTATES and CP_* state constants */
#include <net/if.h>
#include <net/route.h>
#include <sys/disk.h>
#include <sys/sensors.h>

#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/Xos.h>
#include <X11/keysym.h>


#define WINWIDTH    150
#define WINHEIGHT   300
#define PADDING     2
// #define FONTNAME ""6x10""
#define FONTNAME ""-misc-fixed-*-*-*-*-10-*-*-*-*-*-*-*""

#define METERMINWIDTH  40
#define METERMINHEIGHT 4
#define METERSPLIT  1   /* display lowpass-filtered stats in lower half if != 0 */
#define METERDECAY2 1.0 /* decay time to half value in seconds */

#define MAXLOAD     5
#define MAXDISKBW   (300ull << 20)    /* disk bandwidth in bytes/s, in+out */
#define MAXNETBW    (25ull << 20)   /* network bandwidth in bytes/s, in+out */

#define LABELCOL    0
#define VALUECOL    0x808080
#define IDLECOL     0x7FFFD4
#define PSUCOL      0x20B2AA

#ifndef CPUSTATES
#define CPUSTATES   6
#endif
#define MEMSTATES   5

/* confer SC_* constants in /usr/include/sys/sched.h */
static const char *cpustabbr[CPUSTATES]= { ""US"", ""NI"", ""SY"", ""SP"", ""IN"", ""ID"" };
static const uint32_t cpustcol[CPUSTATES]= { 0x2E8B57, 0xD0C000, 0xFFA500, 0xB060D3, 0xFF0000, IDLECOL };
/* see https://en.wikipedia.org/wiki/X11_color_names for standard colours */

static const char *memabbr[MEMSTATES]= { ""AC"", ""IN"", ""WR"", ""CA"", ""FR"" };
static const uint32_t memcol[MEMSTATES]= { 0xFF, 0x90B8D0, 0xB060D3, 0xFF0000, IDLECOL };

static const char *swapabbr[3]= { ""ONLY"", ""USED"", ""FREE"" };
static const uint32_t swapcol[3]= { 0xFF, 0x90B8D0, IDLECOL };

static const char *ioabbr[3]= { ""IN"", ""OUT"", ""IDLE"" };
static const char *diskabbr[3]= { ""READ"", ""WRITE"", ""IDLE"" };
static const uint32_t iocol[3]= { 0x87CEEB, 0x6A5ACD, IDLECOL };

#define NWARNCOL 4
static const uint32_t warncol[NWARNCOL]= { 0x2E8B57, 0xD0C000, 0xFFA500, 0xFF0000 };
static const uint32_t chargingcol[2]= { 0x57EB90, IDLECOL };


/* Update interval in seconds */
#define INTERVAL    0.1


typedef struct {
    int firstcall, ncpus;
    char *tabbuf;
    size_t tabbufsize;
    double loadavg[3];
    double *cpus;
    struct cpustats *cpustates, *oldcpustates;
    double membytes[MEMSTATES], swapbytes[3];
    double memtotal, swaptotal, pagein, pageout;
    int oldpageins, oldpageouts;
    uint64_t netin, netout, oldtotalnetin, oldtotalnetout;
    uint64_t diskin, diskout, oldtotaldiskin, oldtotaldiskout;
    int sensordev_psu, sensordev_bat, psu_on;
    int64_t bat_curr, bat_max;
    double *filtered;
}
obv_stats;

typedef struct {
    Display *disp;
    Window win;
    GC gc;
    XGCValues gcval;
    char *name;
    int windowx, windowy, havepos;
    unsigned windoww, windowh;
    int labelx, label0y, valuex, meterx, metery, meteroff;
    unsigned meterw, meterh;        /* without frame */
    unsigned fontasc, fontdesc, fontw, fontgap;
}
obv_view;

int init(obv_stats *st);
void dealloc(obv_stats *st);
void getstat(obv_stats *st);
void update_filtered(obv_stats *st, int firstcall);
void init_view(obv_view *view);
void resize_view(obv_view *view, unsigned ncpus);
void update_view(obv_view *view, obv_stats *st);
void exit_view(obv_view *view);
void draw_meter(obv_view *view, unsigned metind, int split, const double *fractions, const uint32_t *colours, unsigned n);
void draw_warnmeter(obv_view *view, unsigned metind, int split, double value, int reverse);
void draw_value(obv_view *view, unsigned metind, int type, double value);
void draw_key(obv_view *view, unsigned metind, const char **strs, const uint32_t *colours, int n);
void sprintbytes(char *dest, double bytes);


int main(int argc, char **argv)
{
    XEvent event;
    KeySym key;
    Atom protocol[2], message;
    XRectangle cliprect;
    obv_stats st;
    obv_view v= { .windoww= WINWIDTH, .windowh= WINHEIGHT, .windowx= 0, .windowy= 0, .name= ""xobsdview"", .havepos= 0 };
    int argind, count, quit, updated;

    for( argind= 1; argind < argc; argind += 2 ) {
        if( !strcmp(argv[argind], ""-geometry"") && argind < argc-1 ) {
            count= sscanf(argv[argind+1], ""%ux%u%d%d"", &v.windoww, &v.windowh, &v.windowx, &v.windowy);
            v.havepos= count == 4;
        }
        else if( !strcmp(argv[argind], ""-name"") && argind < argc-1 )
            v.name= argv[argind+1];
        else {
            fprintf(stderr, ""usage: xobsdview [ -geometry <geometry> ] [ -name <string> ]\n"");
            return 1;
        }
    }

    init(&st);
    getstat(&st);
    if( METERSPLIT )
        update_filtered(&st, 1);
    init_view(&v);

    XSelectInput(v.disp, v.win, KeyPressMask|KeyReleaseMask|ExposureMask|StructureNotifyMask );
    protocol[0]= XInternAtom(v.disp, ""WM_PROTOCOLS"", False );
    protocol[1]= XInternAtom(v.disp, ""WM_DELETE_WINDOW"", False );
    XSetWMProtocols( v.disp, v.win, protocol, 2 );
    quit= 0;
    do {
        updated= 0;
        while( XPending(v.disp) > 0 ) {
            XNextEvent( v.disp, &event );
            if( event.type == KeyPress ) {
                key= XLookupKeysym( &event.xkey, 0 );
                if( key == XK_q )
                    quit= 1;
            }
            else if( event.type == ClientMessage ) {
                if( event.xclient.message_type == protocol[0] ) {
                    if( event.xclient.format == 8 )
                        message= event.xclient.data.b[0];
                    else if( event.xclient.format == 16 )
                        message= event.xclient.data.s[0];
                    else if( event.xclient.format == 32 )
                        message= event.xclient.data.l[0];
                    else message= protocol[1] - 1;
                    if( message == protocol[1] )
                        quit= 1;
                }
            }
            else if( event.type == ConfigureNotify ) {
                if( v.windoww != event.xconfigure.width || v.windowh != event.xconfigure.height ) {
                    v.windoww= event.xconfigure.width;
                    v.windowh= event.xconfigure.height;
                    resize_view(&v, st.ncpus);
                    update_view(&v, &st);
                    updated= 1;
                }
            }
            else if( event.type == Expose && event.xexpose.count == 0 ) {
                resize_view(&v, st.ncpus);
                update_view(&v, &st);
                updated= 1;
            }
        }
        if( ! updated )
            update_view(&v, &st);
        usleep(1e6 * INTERVAL);
        getstat(&st);
        if( METERSPLIT )
            update_filtered(&st, 0);
    }
    while( ! quit );
    exit_view(&v);
    dealloc(&st);
    return 0;
}


static int sensordev_mib[]= { CTL_HW, HW_SENSORS, /* sensor device index */ 0 };

int init(obv_stats *st)
{
    struct sensordev sd;
    size_t size;
    int status, ind, typeind;

    st->sensordev_psu= -1;
    st->sensordev_bat= -1;
    for( ind= 0; st->sensordev_psu < 0 || st->sensordev_bat < 0; ++ind ) {
        sensordev_mib[2]= ind;
        size= sizeof(sd);
        status= sysctl(sensordev_mib, 3, &sd, &size, NULL, 0);
        if( status < 0 || size < sizeof(sd) )
            break;
        if( !strcmp(sd.xname, ""acpiac0"") )
            st->sensordev_psu= ind;
        else if( !strcmp(sd.xname, ""acpibat0"") )
            st->sensordev_bat= ind;
    }
    st->ncpus= sysconf(_SC_NPROCESSORS_CONF);
    st->cpustates= malloc(2 * st->ncpus * sizeof(*st->cpustates));
    st->oldcpustates= st->cpustates + st->ncpus;
    st->cpus= malloc(CPUSTATES * st->ncpus * sizeof(double));
    st->memtotal= 1;
    st->swaptotal= 1;
    st->tabbufsize= 2048;
    st->tabbuf= malloc(st->tabbufsize);
    if( METERSPLIT )
        st->filtered= calloc(st->ncpus*CPUSTATES + MEMSTATES + 3 + 3 * 2, sizeof(double));
    else
        st->filtered= NULL;
    st->firstcall= 1;
    return st->cpustates && st->cpus && st->tabbuf && (!METERSPLIT || st->filtered);
}

void dealloc(obv_stats *st)
{
    free(st->cpustates);
    st->cpustates= NULL;
    free(st->cpus);
    st->cpus= NULL;
    free(st->tabbuf);
    st->tabbuf= NULL;
    free(st->filtered);
    st->filtered= NULL;
}


static int cpustats_mib[] = { CTL_KERN, KERN_CPUSTATS, /* CPU index */ 0 };
    /* for struct cpustats, see /usr/include/sys/sched.h */
static const int uvmexp_mib[]= { CTL_VM, VM_UVMEXP };
    /* for struct uvmexp, see /usr/include/uvm/uvmexp.h */
static const int iflist_mib[]= { CTL_NET, PF_ROUTE, 0, 0, NET_RT_IFLIST, 0 };
    /* for structs rt_msghdr and if_msghdr, see /usr/include/net/route.h and if.h */
static const int diskstats_mib[]= { CTL_HW, HW_DISKSTATS };
    /* for struct diskstats, see /usr/include/sys/disk.h */
static int sensor_mib[]= { CTL_HW, HW_SENSORS, /* sensor device index */ 0, /* sensor type */ 0, /* sensor index */ 0 };

void getstat(obv_stats *st)
{
    struct uvmexp ue;
    struct if_msghdr *ifm;
    struct diskstats *ds;
    struct sensor se;
    char *tryalloc;
    double diff, total;
    size_t size, needsize, off;
    int cpuind, stateind;

    getloadavg(st->loadavg, 3);
    for( cpuind= 0; cpuind < st->ncpus; ++cpuind ) {
        cpustats_mib[2]= cpuind;
        size= sizeof(*st->cpustates);
        memcpy(st->oldcpustates + cpuind, st->cpustates + cpuind, size);
        if( sysctl(cpustats_mib, 3, st->cpustates + cpuind, &size, NULL, 0) < 0 ||
            (st->cpustates[cpuind].cs_flags & CPUSTATS_ONLINE) == 0 || st->firstcall ) {
            memset(st->cpus + cpuind * CPUSTATES, 0, CPUSTATES * sizeof(double));
            st->cpus[cpuind*CPUSTATES+CP_IDLE]= 1.0;
            continue;
        }
        /* Now compute fractions of CPU time spent in each state since the
           previous call, using the total change as a normalisation constant */
        total= 0;
        for( stateind= 0; stateind < CPUSTATES; ++stateind ) {
            diff= st->cpustates[cpuind].cs_time[stateind] - st->oldcpustates[cpuind].cs_time[stateind];
            if( diff < 0.0 )  /* wraparound */
                diff += 0x1p64;
            st->cpus[cpuind*CPUSTATES+stateind]= diff;
            total += diff;
        }
        if( total == 0.0 )
            total= 1.0;
        for( stateind= 0; stateind < CPUSTATES; ++stateind )
            st->cpus[cpuind*CPUSTATES+stateind] /= total;
    }
    size= sizeof(ue);
    if( sysctl(uvmexp_mib, 2, &ue, &size, NULL, 0) < 0 ) {
        st->membytes[0]= st->membytes[1]= st->membytes[2]= st->membytes[3]= 0;
        st->membytes[4]= st->memtotal;
        st->pagein= st->pageout= 0;
        st->swapbytes[0]= st->swapbytes[1]= 0;
        st->swapbytes[2]= st->swaptotal;
    }
    else {
        st->memtotal= ue.npages * (double)ue.pagesize;
        st->membytes[0]= ue.active * (double)ue.pagesize;
        st->membytes[1]= ue.inactive * (double)ue.pagesize;
        st->membytes[2]= ue.wired * (double)ue.pagesize;
        st->membytes[4]= ue.free * (double)ue.pagesize;
        st->membytes[3]= st->memtotal - st->membytes[0] - st->membytes[1] - st->membytes[2] - st->membytes[4];
            /* TODO: check this */
        if( st->firstcall ) {
            st->pagein= 0;
            st->pageout= 0;
        }
        else {
            st->pagein= (ue.pageins - st->oldpageins) * (double)ue.pagesize;
            st->pageout= (ue.pdpageouts - st->oldpageouts) * (double)ue.pagesize;
        }
        st->oldpageins= ue.pageins;
        st->oldpageouts= ue.pdpageouts;
        st->swaptotal= ue.swpages * (double)ue.pagesize;
        st->swapbytes[0]= ue.swpgonly * (double)ue.pagesize;
        st->swapbytes[1]= (ue.swpginuse - ue.swpgonly) * (double)ue.pagesize;
        st->swapbytes[2]= (ue.swpages - ue.swpginuse) * (double)ue.pagesize;
    }
    size= st->tabbufsize;
    while( sysctl(iflist_mib, 6, st->tabbuf, &size, NULL, 0) < 0 && errno == ENOMEM ) {
        needsize= 0;
        if( sysctl(iflist_mib, 6, NULL, &needsize, NULL, 0) < 0 )
            break;
        tryalloc= malloc(needsize);
        if( ! tryalloc )
            break;
        free(st->tabbuf);
        st->tabbuf= tryalloc;
        st->tabbufsize= size= needsize;
    }
    st->netin= 0;
    st->netout= 0;
    for( off= 0; off < size - ((char*)&ifm->ifm_msglen - (char*)ifm) - sizeof(ifm->ifm_msglen); off += ifm->ifm_msglen ) {
        ifm= (struct if_msghdr *)(st->tabbuf + off);
        if( off + ifm->ifm_msglen > size )
            break;
        if( ifm->ifm_version != RTM_VERSION || ifm->ifm_type != RTM_IFINFO )
            continue;
        st->netin += ifm->ifm_data.ifi_ibytes;
        st->netout += ifm->ifm_data.ifi_obytes;
    }
    if( st->firstcall ) {
        st->oldtotalnetin= st->netin;
        st->oldtotalnetout= st->netout;
        st->netin= 0;
        st->netout= 0;
    }
    else {
        st->netin -= st->oldtotalnetin;
        st->netout -= st->oldtotalnetout;
        st->oldtotalnetin += st->netin;
        st->oldtotalnetout += st->netout;
    }
    size= st->tabbufsize;
    while( sysctl(diskstats_mib, 2, st->tabbuf, &size, NULL, 0) < 0 && errno == ENOMEM ) {
        needsize= 0;
        if( sysctl(diskstats_mib, 2, NULL, &needsize, NULL, 0) < 0 )
            break;
        tryalloc= malloc(needsize);
        if( ! tryalloc )
            break;
        free(st->tabbuf);
        st->tabbuf= tryalloc;
        st->tabbufsize= size= needsize;
    }
    st->diskin= 0;
    st->diskout= 0;
    for( off= 0; (off+1) * sizeof(struct diskstats) <= size; ++off ) {
        ds= (struct diskstats*)st->tabbuf + off;
        st->diskin += ds->ds_rbytes;
        st->diskout += ds->ds_wbytes;
    }
    if( st->firstcall ) {
        st->oldtotaldiskin= st->diskin;
        st->oldtotaldiskout= st->diskout;
        st->diskin= 0;
        st->diskout= 0;
    }
    else {
        st->diskin -= st->oldtotaldiskin;
        st->diskout -= st->oldtotaldiskout;
        st->oldtotaldiskin += st->diskin;
        st->oldtotaldiskout += st->diskout;
    }
    if( st->sensordev_psu >= 0 ) {
        sensor_mib[2]= st->sensordev_psu;
        sensor_mib[3]= SENSOR_INDICATOR;
        sensor_mib[4]= 0;
        size= sizeof(se);
        if( sysctl(sensor_mib, 5, &se, &size, NULL, 0) >= 0 && size == sizeof(se) )
            st->psu_on= se.value;
        else
            st->psu_on= 0;
    }
    if( st->sensordev_bat >= 0 ) {
        sensor_mib[2]= st->sensordev_bat;
        sensor_mib[3]= SENSOR_AMPHOUR;
        sensor_mib[4]= 0;
        size= sizeof(se);
        if( sysctl(sensor_mib, 5, &se, &size, NULL, 0) >= 0 &&
                size == sizeof(se) && se.flags == 0 )
            st->bat_max= se.value;
        else
            st->bat_max= 0;
        sensor_mib[4]= 3;
        size= sizeof(se);
        if( sysctl(sensor_mib, 5, &se, &size, NULL, 0) >= 0 &&
                size == sizeof(se) && se.flags == 0 )
            st->bat_curr= se.value;
        else
            st->bat_curr= 0;
    }
    st->firstcall= 0;
}


void update_filtered(obv_stats *st, int firstcall)
{
    double ffcoeff, fbcoeff;
    int ind;

    if( firstcall ) {
        fbcoeff= 0.0;
        ffcoeff= 1.0;
    }
    else {
        fbcoeff= exp2(-INTERVAL / METERDECAY2);
        ffcoeff= 1.0 - fbcoeff;
    }
    for( ind= 0; ind< st->ncpus*CPUSTATES; ++ind )
        st->filtered[ind]= fbcoeff * st->filtered[ind] + ffcoeff * st->cpus[ind];
    for( ind= 0; ind< MEMSTATES; ++ind )
        st->filtered[st->ncpus*CPUSTATES+ind]=
            fbcoeff * st->filtered[st->ncpus*CPUSTATES+ind] + ffcoeff * st->membytes[ind];
    for( ind= 0; ind< 3; ++ind )
        st->filtered[st->ncpus*CPUSTATES+MEMSTATES+ind]=
            fbcoeff * st->filtered[st->ncpus*CPUSTATES+MEMSTATES+ind] + ffcoeff * st->swapbytes[ind];
    st->filtered[st->ncpus*CPUSTATES+MEMSTATES+3]=
        fbcoeff * st->filtered[st->ncpus*CPUSTATES+MEMSTATES+3] + ffcoeff * st->pagein;
    st->filtered[st->ncpus*CPUSTATES+MEMSTATES+4]=
        fbcoeff * st->filtered[st->ncpus*CPUSTATES+MEMSTATES+4] + ffcoeff * st->pageout;
    st->filtered[st->ncpus*CPUSTATES+MEMSTATES+5]=
        fbcoeff * st->filtered[st->ncpus*CPUSTATES+MEMSTATES+5] + ffcoeff * st->diskin;
    st->filtered[st->ncpus*CPUSTATES+MEMSTATES+6]=
        fbcoeff * st->filtered[st->ncpus*CPUSTATES+MEMSTATES+6] + ffcoeff * st->diskout;
    st->filtered[st->ncpus*CPUSTATES+MEMSTATES+7]=
        fbcoeff * st->filtered[st->ncpus*CPUSTATES+MEMSTATES+7] + ffcoeff * st->netin;
    st->filtered[st->ncpus*CPUSTATES+MEMSTATES+8]=
        fbcoeff * st->filtered[st->ncpus*CPUSTATES+MEMSTATES+8] + ffcoeff * st->netout;
}


void init_view(obv_view *view)
{
    XTextProperty name;
    XSizeHints *size_hints;
    XWMHints *wm_hints;
    XClassHint *class_hints;
    XCharStruct fontextents;
    char *namestr;
    int screen, dummy;

    view->disp= XOpenDisplay(NULL);
    if( !view->disp ) {
        fprintf(stderr, ""xdrawtest: Error: could not connect to X server!\n"");
        exit(1);
    }
    screen= DefaultScreen( view->disp );
    view->win= XCreateSimpleWindow( view->disp, RootWindow(view->disp, screen),
            view->windowx, view->windowy, view->windoww, view->windowh,
            0, BlackPixel(view->disp, screen), WhitePixel(view->disp, screen) );
    size_hints= XAllocSizeHints();
    size_hints->flags = 0;
    if( view->havepos ) {
        size_hints->flags |= PPosition;
        size_hints->x= view->windowx;   /* ignored in favour of create window arg */
        size_hints->y= view->windowy;
    }
    wm_hints= XAllocWMHints();
    wm_hints->flags = StateHint | InputHint;
    wm_hints->initial_state= NormalState;
    wm_hints->input= True;
    class_hints= XAllocClassHint();
    class_hints->res_name= ""xobsdview"";
    class_hints->res_class= ""xobsdview"";
    namestr= view->name;
    XStringListToTextProperty( &namestr, 1, &name );
    XSetWMProperties(view->disp, view->win, &name, &name, NULL, 0, size_hints, wm_hints, class_hints );
    view->gc= XCreateGC(view->disp, view->win, 0, NULL);
    view->gcval.font= XLoadFont(view->disp, FONTNAME);
    if( view->gcval.font == BadName ) {
        fprintf(stderr, ""Could not load font %s\n"", FONTNAME);
        exit_view(view);
        XFree(size_hints);
        XFree(wm_hints);
        XFree(class_hints);
        exit(1);
    }
    else
        XChangeGC(view->disp, view->gc, GCFont, &view->gcval);
    XMapWindow(view->disp, view->win);
    XSetBackground(view->disp, view->gc, WhitePixel(view->disp, screen));
    XQueryTextExtents(view->disp, XGContextFromGC(view->gc), ""N"", 1, &dummy, &dummy, &dummy, &fontextents);
    view->fontasc= fontextents.ascent;
    view->fontdesc= fontextents.descent;
    view->fontw= fontextents.width;
    view->fontgap= view->fontw / 2;
    XFree(size_hints);
    XFree(wm_hints);
    XFree(class_hints);
}


void resize_view(obv_view *view, unsigned ncpus)
{
    char cpustr[6];
    const char *label;
    int nmeters, ind, y;

    nmeters= ncpus + 7;
    view->meteroff= (view->windowh - PADDING) / nmeters;
    if( view->meteroff < METERMINHEIGHT + 2 + view->fontasc + view->fontdesc + 1 + 4 ) {
        view->meteroff= METERMINHEIGHT + 2 + view->fontasc + view->fontdesc + 1 + 4;
        view->meterh= METERMINHEIGHT;
    }
    else
        view->meterh= view->meteroff - (2 + view->fontasc + view->fontdesc + 1 + 4);
    view->labelx= PADDING;
    view->valuex= view->labelx + 5*view->fontw;
    view->meterx= view->valuex + 4*view->fontw + view->fontgap;
    view->meterw= view->windoww - PADDING - 1 - view->meterx;
    if( view->meterw < METERMINWIDTH )
        view->meterw= METERMINWIDTH;
    view->metery= PADDING + view->fontasc + view->fontdesc + 3;
    view->label0y= view->metery + (view->meterh - view->fontasc - view->fontdesc) / 2 + view->fontasc;

    XSetForeground(view->disp, view->gc, 0xFFFFFF);
    XFillRectangle(view->disp, view->win, view->gc, 0, 0, view->windoww, view->windowh);
    XSetForeground(view->disp, view->gc, 0);
    y= view->metery - 1;
    for( ind= 0; ind< ncpus+7; ++ind, y += view->meteroff )
        XDrawRectangle(view->disp, view->win, view->gc, view->meterx-1, y, view->meterw+1, view->meterh+1);
    y= view->label0y;
    XDrawString(view->disp, view->win, view->gc, view->labelx, y, ""LOAD"", 4);
    y += view->meteroff;
    for( ind= 0; ind< ncpus; ++ind ) {
        snprintf(cpustr, 6, ""CPU%d"", ind);
        XDrawString(view->disp, view->win, view->gc, view->labelx, y, cpustr, 4 + (ind > 9));
        y += view->meteroff;
    }
    XDrawString(view->disp, view->win, view->gc, view->labelx, y, ""MEM"", 3);
    y += view->meteroff;
    XDrawString(view->disp, view->win, view->gc, view->labelx, y, ""SWAP"", 4);
    y += view->meteroff;
    XDrawString(view->disp, view->win, view->gc, view->labelx, y, ""PAGE"", 4);
    y += view->meteroff;
    XDrawString(view->disp, view->win, view->gc, view->labelx, y, ""DISK"", 4);
    y += view->meteroff;
    XDrawString(view->disp, view->win, view->gc, view->labelx, y, ""NET"", 3);
    y += view->meteroff;
    XDrawString(view->disp, view->win, view->gc, view->labelx, y, ""BAT"", 3);
    label= ""PROCS"";
    draw_key(view, 0, &label, warncol, 1);
    for( ind= 0; ind< ncpus; ++ind )
        draw_key(view, ind+1, cpustabbr, cpustcol, CPUSTATES);
    draw_key(view, ncpus+1, memabbr, memcol, MEMSTATES);
    draw_key(view, ncpus+2, swapabbr, swapcol, 3);
    draw_key(view, ncpus+3, ioabbr, iocol, 3);
    draw_key(view, ncpus+4, diskabbr, iocol, 3);
    draw_key(view, ncpus+5, ioabbr, iocol, 3);
    label= ""CHARGE"";
    draw_key(view, ncpus+6, &label, warncol, 1);
}


void update_view(obv_view *view, obv_stats *st)
{
    double values[MEMSTATES+3];
    int ind;

    draw_warnmeter(view, 0, !!METERSPLIT, st->loadavg[0]/MAXLOAD, 0);
    draw_value(view, 0, 0, st->loadavg[0]);
    if( METERSPLIT )
        draw_warnmeter(view, 0, 2, st->loadavg[1]/MAXLOAD, 0);
    for( ind= 0; ind< st->ncpus; ++ind ) {
        draw_meter(view, ind+1, !!METERSPLIT, st->cpus + ind*CPUSTATES, cpustcol, CPUSTATES);
        draw_value(view, ind+1, 1, 1.0 - st->cpus[(ind+1)*CPUSTATES-1]);
        if( METERSPLIT )
            draw_meter(view, ind+1, 2, st->filtered + ind*CPUSTATES, cpustcol, CPUSTATES);
    }
    for( ind= 0; ind< MEMSTATES; ++ind )
        values[ind]= st->membytes[ind] / st->memtotal;
    draw_meter(view, st->ncpus+1, !!METERSPLIT, values, memcol, MEMSTATES);
    draw_value(view, st->ncpus+1, 2, st->memtotal - st->membytes[MEMSTATES-2] - st->membytes[MEMSTATES-1]);
    if( METERSPLIT ) {
        for( ind= 0; ind< MEMSTATES; ++ind )
            values[ind]= st->filtered[st->ncpus*CPUSTATES+ind] / st->memtotal;
        draw_meter(view, st->ncpus+1, 2, values, memcol, MEMSTATES);
    }
    for( ind= 0; ind< 3; ++ind )
        values[ind]= st->swapbytes[ind] / st->swaptotal;
    draw_meter(view, st->ncpus+2, !!METERSPLIT, values, swapcol, 3);
    draw_value(view, st->ncpus+2, 2, st->swapbytes[0] + st->swapbytes[1]);
    if( METERSPLIT ) {
        for( ind= 0; ind< 3; ++ind )
            values[ind]= st->filtered[st->ncpus*CPUSTATES+MEMSTATES+ind] / st->swaptotal;
        draw_meter(view, st->ncpus+2, 2, values, swapcol, 3);
    }
    values[0]= st->pagein / INTERVAL / MAXDISKBW;
    values[1]= st->pageout / INTERVAL / MAXDISKBW;
    draw_meter(view, st->ncpus+3, !!METERSPLIT, values, iocol, 3);
    draw_value(view, st->ncpus+3, 2, (st->pagein + st->pageout) / INTERVAL);
    if( METERSPLIT ) {
        values[0]= st->filtered[st->ncpus*CPUSTATES+MEMSTATES+3] / INTERVAL / MAXDISKBW;
        values[1]= st->filtered[st->ncpus*CPUSTATES+MEMSTATES+4] / INTERVAL / MAXDISKBW;
        draw_meter(view, st->ncpus+3, 2, values, iocol, 3);
    }
    values[0]= (double)st->diskin / INTERVAL / MAXDISKBW;
    values[1]= (double)st->diskout / INTERVAL / MAXDISKBW;
    draw_meter(view, st->ncpus+4, !!METERSPLIT, values, iocol, 3);
    draw_value(view, st->ncpus+4, 2, (double)(st->diskin + st->diskout) / INTERVAL);
    if( METERSPLIT ) {
        values[0]= st->filtered[st->ncpus*CPUSTATES+MEMSTATES+5] / INTERVAL / MAXDISKBW;
        values[1]= st->filtered[st->ncpus*CPUSTATES+MEMSTATES+6] / INTERVAL / MAXDISKBW;
        draw_meter(view, st->ncpus+4, 2, values, iocol, 3);
    }
    values[0]= (double)st->netin / INTERVAL / MAXNETBW;
    values[1]= (double)st->netout / INTERVAL / MAXNETBW;
    draw_meter(view, st->ncpus+5, !!METERSPLIT, values, iocol, 3);
    draw_value(view, st->ncpus+5, 2, (double)(st->netin + st->netout) / INTERVAL);
    if( METERSPLIT ) {
        values[0]= st->filtered[st->ncpus*CPUSTATES+MEMSTATES+7] / INTERVAL / MAXNETBW;
        values[1]= st->filtered[st->ncpus*CPUSTATES+MEMSTATES+8] / INTERVAL / MAXNETBW;
        draw_meter(view, st->ncpus+5, 2, values, iocol, 3);
    }
    if( st->bat_max > 0 ) {
        values[0]= (double)st->bat_curr / st->bat_max;
        if( st->psu_on )
            draw_meter(view, st->ncpus+6, 0, values, chargingcol, 2);
        else
            draw_warnmeter(view, st->ncpus+6, 0, values[0], 1);
        draw_value(view, st->ncpus+6, 1, values[0]);
    }
}


void exit_view(obv_view *view)
{
    XUnmapWindow(view->disp, view->win);
    XUnloadFont(view->disp, view->gcval.font);
    XFreeGC(view->disp, view->gc);
    XCloseDisplay(view->disp);
}


/* Draw horizontally stacked coloured bars of a meter of multiple values that
   add up to 1.0.  The meter index determines the y position.  If split is 1,
   only the upper half of the bar is painted; if it is 2, only the lower half.
   The last 3 arguments give the values and colours.  The last value is
   ignored; its bar is filled in to the right end of the meter.  */
void draw_meter(obv_view *view, unsigned metind, int split, const double *fractions, const uint32_t *colours, unsigned n)
{
    double sum;
    unsigned y, h, xoff, xtop, ind;

    y= view->metery + metind * view->meteroff;
    if( split ) {
        h= (view->meterh + 1) / 2;
        if( split == 2 ) {
            y += h;
            if( view->meterh & 1 )
                --h;
        }
    }
    else
        h= view->meterh;
    xoff= 0;
    sum= 0.0;
    for( ind= 0; ind < n-1; ++ind ) {
        if( fractions[ind] <= 0.0 )
            continue;
        sum += fractions[ind];
        if( sum > 1.0 )
            sum= 1.0;
        xtop= (unsigned)(view->meterw * sum + 0.5);
        if( xtop <= xoff )
            continue;
        XSetForeground(view->disp, view->gc, colours[ind]);
        XFillRectangle(view->disp, view->win, view->gc, view->meterx+xoff, y, xtop-xoff, h);
        xoff= xtop;
        if( xoff >= view->meterw )
            return;
    }
    XSetForeground(view->disp, view->gc, colours[n-1]);
    XFillRectangle(view->disp, view->win, view->gc, view->meterx+xoff, y, view->meterw-xoff, h);
}


/* Draw a horizontal bar indicating a single value, in a colour also indicating
   the value.  The meter index determines the y position.  If split is 1, only
   the upper half of the bar is painted; if it is 2, only the lower half.  The
   colour is interpolated from warncol[] for values between 0.1 and 0.9. */
void draw_warnmeter(obv_view *view, unsigned metind, int split, double value, int reverse)
{
    double colfrac;
    uint32_t colour;
    unsigned y, h;
    int w, ind, colind;

    y= view->metery + metind * view->meteroff;
    if( split ) {
        h= (view->meterh + 1) / 2;
        if( split == 2 ) {
            y += h;
            if( view->meterh & 1 )
                --h;
        }
    }
    else
        h= view->meterh;
    w= value * view->meterw + 0.5;
    if( w < 0 )
        w= 0;
    else if( w > view->meterw )
        w= view->meterw;
    if( reverse )
        value= 1.0 - value;
    colfrac= (value - 0.1) / 0.8 * (NWARNCOL - 1);
    if( colfrac <= 0.0 )
        colour= warncol[0];
    else if( colfrac >= NWARNCOL-1 )
        colour= warncol[NWARNCOL-1];
    else {
        colind= (int)colfrac;
        colfrac -= colind;
        for( ind= 0; ind< 4; ++ind )
            ((uint8_t*)&colour)[ind]= colfrac * ((uint8_t*)(warncol+colind+1))[ind] + (1.0 - colfrac) * ((uint8_t*)(warncol+colind))[ind];
    }
    XSetForeground(view->disp, view->gc, colour);
    XFillRectangle(view->disp, view->win, view->gc, view->meterx, y, w, h);
    if( w < view->meterw ) {
        XSetForeground(view->disp, view->gc, IDLECOL);
        XFillRectangle(view->disp, view->win, view->gc, view->meterx + w, y, view->meterw - w, h);
    }
}


/* Draw value as text to the left of meter.  type is 0 for numeric, 1 for
   percentage, 2 for data volume.  */
void draw_value(obv_view *view, unsigned metind, int type, double value)
{
    char valstr[5];

    if( type == 0 )
        snprintf(valstr, 5, ""%4g"", value);
    else if( type == 1 )
        snprintf(valstr, 5, ""%3d%%"", (int)(100*value+0.5));
    else
        sprintbytes(valstr, value);
    XSetForeground(view->disp, view->gc, VALUECOL);
    XDrawImageString(view->disp, view->win, view->gc, view->valuex, view->label0y + metind*view->meteroff, valstr, 4);
}


/* Draw a concatenated string in multiple colours above the meter with the
   given index. */
void draw_key(obv_view *view, unsigned metind, const char **strs, const uint32_t *colours, int n)
{
    int x, y, w, ind, xoff, nchars, dummy;

    w= 0;
    for( ind= 0; ind < n; ++ind )
        w += strlen(strs[ind]);
    w= w * view->fontw + (n - 1) * view->fontgap;
    x= view->meterx;
    if( w > view->meterw )
        x -= w - view->meterw;
    y= view->metery + metind * view->meteroff - 3 - view->fontdesc;
    for( ind= 0; ind < n; ++ind ) {
        nchars= strlen(strs[ind]);
        XSetForeground(view->disp, view->gc, colours[ind]);
        XDrawString(view->disp, view->win, view->gc, x, y, strs[ind], nchars);
        x += view->fontw * nchars;
        x += view->fontgap;
    }
}


/* Print abbreviated byte count in 5 chars including terminating 0. */
static const char suffix[]= ""kMGTPE"";
void sprintbytes(char *dest, double bytes)
{
    int tenbits;

    tenbits= bytes > 0.0 ? (int)floor(log2(bytes)/10) : 0;
    bytes /= exp2(10.0 * tenbits);
    if( bytes < 10 )
        snprintf(dest, 4, ""%.1f"", bytes);
    else if( bytes < 100 )
        snprintf(dest, 4, "" %d"", (int)floor(bytes));
    else
        snprintf(dest, 4, ""%d"", (int)floor(bytes));
    if( tenbits == 0 )
        dest[3]= ' ';
    else if( tenbits < 7 )
        dest[3]= suffix[tenbits-1];
    else
        dest[3]= '!';
    dest[4]= 0;
}"
jXSFMaJq,log_%i__%y-%mo-%d__%h-%mi-%s___%w2,JN_DEF,ABAP,Monday 4th of March 2024 02:04:23 PM CDT,"--------COM.REACHGOALS.APP--------
Mar  4 20:59:49 iPhone Runner(Flutter)[2406] <Notice>: flutter: Message not found: a2203d86-0ba7-479b-a6a6-e92ad519f86f
Mar  4 20:59:49 iPhone Runner(Flutter)[2406] <Notice>: flutter: Message not found: 041880a0-9ce7-4886-88ca-23ae91db9197
"
jdrzsYZe,Firebird 1.5 to 3.0,drkbl,Batch,Monday 4th of March 2024 01:50:58 PM CDT,"REM Firebird 1.5 to 3.0
REM Transportable backup with 1.5
REM Restore with 3.0
""c:\Program Files\Firebird\Firebird_3_0\gbak.exe""  -c -v -user SYSDBA -password masterke 4001.fbak 127.0.0.1:""p:\dat\4001.FDB"" -FIX_FSS_METADATA WIN1250"
BfYKiycL,Untitled,h1n0t0r1,Python,Monday 4th of March 2024 01:30:02 PM CDT,"# Read user input
n = int(input())

# Logic
max_diff = 0
is_equal = True
previous_sum = 0

for i in range(n):
    first_num = int(input())
    second_num = int(input())
    pair_sum = first_num + second_num
    # On the first iteration we set min_sum, max_sum and pair_sum to first_num + second_num.
    if i == 0:
        previous_sum = pair_sum

    else:
        if pair_sum != previous_sum:
            diff = abs(previous_sum - pair_sum)
            if diff > max_diff:
                max_diff = diff
            is_equal = False
        previous_sum = pair_sum

if is_equal:
    print(f'Yes, value={pair_sum}')
else:
    print(f'No, maxdiff={max_diff}')





"
jpRQcBmm,Untitled,alastair87,JSON,Monday 4th of March 2024 01:28:37 PM CDT,"{
    ""numOutputsTotal"": 1,
    ""seed"": 2011737777,
    ""reqBody"": {
        ""prompt"": ""\""((vibrant palette)) A delicate and intricate illustration of a single red rose with thorny stems, surrounded by a warm, golden light that creates a sense of enchantment, with subtle textures on the petals and leaves, set against a backdrop of soft, pastel colors that emphasize its beauty and fragility"",
        ""negative_prompt"": ""low quality image, blurry, unrealistic, deformed features, missing body parts, extra limbs, dull or monochrome colors, cluttered background, messy, chaotic, too much happening in the image, noisy image, poor facial features"",
        ""active_tags"": [],
        ""inactive_tags"": [],
        ""width"": 1024,
        ""height"": 1024,
        ""seed"": 2011737777,
        ""num_inference_steps"": 25,
        ""guidance_scale"": 7.5,
        ""preserve_init_image_color_profile"": false,
        ""use_upscale"": ""RealESRGAN_x4plus"",
        ""upscale_amount"": ""4"",
        ""latent_upscaler_steps"": ""10"",
        ""sampler_name"": ""euler_a"",
        ""use_stable_diffusion_model"": ""civitai/realvisxlV40_v40LightningBakedvae"",
        ""clip_skip"": false,
        ""tiling"": ""none"",
        ""use_vae_model"": """",
        ""use_controlnet_model"": """",
        ""control_filter_to_apply"": """",
        ""use_lora_model"": [],
        ""lora_alpha"": [],
        ""num_outputs"": 1,
        ""stream_image_progress"": false,
        ""show_only_filtered_image"": true,
        ""output_format"": ""jpeg""
    }
}"
qaB0Khqe,12. *SoftUni Exam Results,Nenogzar,Python,Monday 4th of March 2024 01:21:46 PM CDT,"university = {}
language_counts = {}
collect = input()

while collect != ""exam finished"":
    if ""banned"" in collect.split(""-""):
        username = collect.split(""-"")[0]
        del university[username]
    else:
        username, language, points = collect.split(""-"")
        language_counts[language] = language_counts.get(language, 0) + 1
        points = int(points)
        if username not in university:
            university[username] = {language: points}
        else:
            if language not in university[username]:
                university[username][language] = points
            else:
                if points > university[username][language]:
                    university[username][language] = points

    collect = input()
# print(university)
# print(language_counts)
print(""Results:"")
for user, scores in university.items():
    for language, points in scores.items():
        print(f""{user} | {points}"")

print(""Submissions:"")
for language, count in language_counts.items():
    print(f""{language} - {count}"")

"""""" """"""

university = {}

collect = input()
while collect != ""exam finished"":
    if ""banned"" in collect.split(""-""):
        username = collect.split(""-"")[0]
        del university[language][""users""][username]
    else:
        username, language, points = collect.split(""-"")
        points = int(points)
        if language not in university:
            university[language] = {""count"": 1, ""users"": {username: points}}
        else:
            university[language][""count""] += 1
            if username not in university[language][""users""]:
                university[language][""users""][username] = points
            else:
                if points > university[language][""users""][username]:
                    university[language][""users""][username] = points

    collect = input()

print(""Results:"")
for language, data in university.items():
    for user, points in data[""users""].items():
        print(f""{user} | {points}"")

print(""Submissions:"")
for language, data in university.items():
    print(f""{language} - {data['count']}"")"
Lim2cEza,Untitled,alastair87,JSON,Monday 4th of March 2024 01:08:22 PM CDT,"{
    ""numOutputsTotal"": 1,
    ""seed"": 4206187770,
    ""reqBody"": {
        ""prompt"": ""A beautifully rendered illustration of a man gently holding a small mouse in his hand, surrounded by the ruins of its home, with soft autumn colors and detailed textures, emotional expressions on both characters' faces, atmospheric lighting that emphasizes the contrast between hope and despair, and an overall sense of melancholy "",
        ""negative_prompt"": ""low quality image, blurry, unrealistic, deformed features, missing body parts, extra limbs, dull or monochrome colors, cluttered background, messy, chaotic, too much happening in the image, noisy image, poor facial features"",
        ""active_tags"": [],
        ""inactive_tags"": [],
        ""width"": 1024,
        ""height"": 1024,
        ""seed"": 4206187770,
        ""num_inference_steps"": 25,
        ""guidance_scale"": 7.5,
        ""preserve_init_image_color_profile"": false,
        ""use_upscale"": ""RealESRGAN_x4plus"",
        ""upscale_amount"": ""4"",
        ""latent_upscaler_steps"": ""10"",
        ""sampler_name"": ""euler_a"",
        ""use_stable_diffusion_model"": ""civitai/realvisxlV40_v40LightningBakedvae"",
        ""clip_skip"": false,
        ""tiling"": ""none"",
        ""use_vae_model"": """",
        ""use_controlnet_model"": """",
        ""control_filter_to_apply"": """",
        ""use_lora_model"": [],
        ""lora_alpha"": [],
        ""num_outputs"": 1,
        ""stream_image_progress"": false,
        ""show_only_filtered_image"": true,
        ""output_format"": ""jpeg""
    }
}"
bDSwQDEp,2. félév 2. óra (otthon),Levi0227,C#,Monday 4th of March 2024 01:02:30 PM CDT,"namespace Inheritance
{
    internal class Program
    {
        static void Main(string[] args)
        {
            //Person person01 = new Person(""Primoz"", ""Roglic"");
            //Console.WriteLine(person01); // = person01.ToString()

            //Employee employee01 = new Employee(""Tadej"", ""Pogacar"", 5000);
            //Console.WriteLine(employee01.Name);
            //Console.WriteLine(employee01);

            //Console.WriteLine(employee01.GetEmailAddress());

            //Person person02 = new Employee(""Wout"", ""Van art"", 4000);
            //Console.WriteLine(person02.FirstName);
            //Console.WriteLine(person02.LastName);

            //if (person02 is Employee)
            //{
            //    //Employee employee02 = person02 as Employee;

            //    (person02 as Employee).GetEmailAddress();
            //}

            //Employee employee03 = person01 as Employee; // null
            //if (employee03 != null)
            //{
            //    Console.WriteLine(employee03.GetEmailAddress());
            //}

            //Console.WriteLine((person02 as Employee)?.GetEmailAddress() ?? ""Not an employee"");
            //Console.WriteLine((employee03 as Employee)?.GetEmailAddress() ?? ""Not an employee"");


            //CEO ceo = new CEO(""Gerant"", ""Thomas"");
            //Console.WriteLine(ceo.GetEmailAddress());

            //Employee employee04 = new CEO(""Attila"", ""Valter"");
            //Console.WriteLine(employee04.GetEmailAddress()); // késői kötés => ha nincsen override a CEO metódusnál, akkor korai kötés

            //object obj = new Person(""Tom"", ""Pidcock"");




            //Person person01 = new Person(""Primoz"", ""Roglic"");
            //Person person02 = new Person(""Primoz"", ""Roglic"");

            //if (person01 == person02) 
            //{
            //    Console.WriteLine(""Same"");
            //}
            //else { Console.WriteLine(""Different""); }

            //if (person01.Equals(person02)) 
            //{
            //    Console.WriteLine(""SAME"");
            //}
            //else { Console.WriteLine(""Different""); }




            Person[] persons = { new Employee(""Primoz"", ""Roglic"", 3000), new CEO(""Attila"", ""Valter""), new Student(""Hanna"", ""Hallgato"")};
            foreach (Person currentPerson in persons) 
            {
                Console.WriteLine(currentPerson.GetEmailAddress());
            }
        }
    }
}

---------------------------------------
Osztályok
---------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inheritance
{
    abstract class Person : object
    {
        protected string firstName;
        protected string lastName;

        public string FirstName { get { return firstName; } set { firstName = value; } }
        public string LastName { get { return lastName; } set { lastName = value; } }
        public string Name => $""{firstName} {lastName}"";

        public Person(string firstName, string lastName)
        {
            this.firstName = firstName;
            this.lastName = lastName;
        }

        public abstract string GetEmailAddress(); // virtual

        public override string ToString()
        {
            return Name;
        }

        public override bool Equals(object? obj)
        {
            if (!(obj is Person)) return false;

            Person other = obj as Person;

            return firstName == other.firstName && lastName == other.lastName;
        }
    }
}

---------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inheritance
{
    internal class Employee : Person
    {
        int salary;

        public int Salary { get => salary; set => salary=value;}

        public override string GetEmailAddress() => $""{firstName.ToLowerInvariant()}.{lastName.ToLowerInvariant()}@company.com"";

        public Employee(string firstName, string lastName, int salary) : base(firstName, lastName)
        {
            this.salary = salary;
        }

        public override string ToString()
        {
            return base.ToString() + "" ("" + GetEmailAddress() + "")"";
        }
    }
}

---------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inheritance
{
    sealed class CEO : Employee
    {
        public CEO(string firstName, string lastName) : base(firstName, lastName, 10000)
        {
        }

        public override string GetEmailAddress() => ""ceo@company.com"";
    }
}

---------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inheritance
{
    internal class Student : Person
    {
        public Student(string firstName, string lastName) : base(firstName, lastName)
        {
        }

        public override string GetEmailAddress()
        {
            return $""{firstName}.{lastName}@university.com"";
        }
    }
}
"
kcB4JswS,2. félév 1. óra (otthon),Levi0227,C#,Monday 4th of March 2024 12:58:44 PM CDT,"namespace ZooApp
{
    internal class Program
    {
        static void Main(string[] args)
        {
            //Cage[] cages = new Cage[5];
            
            //cages[0] = new Cage(5);
            //cages[0].Add(new Animal(""Kormos"", true, 20, Species.Dog));
            //cages[0].Add(new Animal(""Mici"", false, 320, Species.Panda));
            //cages[0].Add(new Animal(""Kajás"", true, 40, Species.Dog));
            //cages[0].Add(new Animal(""Killer"", true, 3, Species.Dog));
            //cages[0].Add(new Animal(""Kaller"", true, 5, Species.Dog));
            
            //cages[1] = new Cage(3);
            //cages[1].Add(new Animal(""Nóri"", false, 4, Species.Rabbit));
            //cages[1].Add(new Animal(""Marcsi"", false, 320, Species.Panda));
            //cages[1].Add(new Animal(""Nándi"", true, 4, Species.Rabbit));
            
            //cages[2] = new Cage(5);
            //cages[2].Add(new Animal(""Kolbász"", true, 40, Species.Dog));
            //cages[2].Add(new Animal(""Kati"", false, 13, Species.Dog));
            //cages[2].Add(new Animal(""Karesz"", true, 15, Species.Dog));
            
            //cages[3] = new Cage(5);
            //cages[3].Add(new Animal(""Nindzsa"", true, 2, Species.Rabbit));
            //cages[3].Add(new Animal(""Nyami"", false, 12, Species.Rabbit));
            //cages[3].Add(new Animal(""Kicsi"", false, 10, Species.Dog));
            //cages[3].Add(new Animal(""Norbi"", true, 5, Species.Rabbit));
            //cages[3].Add(new Animal(""Krumpli"", true, 10, Species.Dog));

            //Console.WriteLine(""4.ben nyulak db: "" + cages[3].Count(Species.Rabbit));
            //Console.WriteLine(""2.ban hím panda: "" + (cages[1].DoesExist(Species.Panda, true) ? ""van"" : ""nincs""));

            //Animal[] dogsInFirstCage = cages[0].CollectAll(Species.Dog);
            //foreach (Animal currentAnimal in dogsInFirstCage)
            //{
            //    if (currentAnimal == null)
            //        break;

            //    Console.WriteLine(currentAnimal.Name);
            //}

            //Console.WriteLine(""1.ben kutyák avg tömege: "" + cages[0].AverageWeight(Species.Dog));

            //Console.WriteLine(""4.ben azonos faj, különböző nem: "" + (cages[3].DoesExistSameSpeciesOppositeSex() ? ""van"" : ""nincs""));

            ////Cage mostDogsCage = MaxCageWith(cages, Species.Dog);
            ////Console.WriteLine(mostDogsCage.ToString());

            //Animal newAnimal = Animal.Parse(""Kormos,male,20,Dog"");


            //Cage newCage = Cage.CreateFrom(""./files/cage1.txt"");
            //Console.WriteLine(newCage.ToString());

            Cage[] cages = LoadCages(args[0]);
        }

        static Cage[] LoadCages(string path)
        {
            string[] fileNames = Directory.GetFiles(path, ""*.txt"");

            Cage[] result = new Cage[fileNames.Length];
            for (int i = 0; i < fileNames.Length; i++) 
            {
                result[i] = Cage.CreateFrom(fileNames[i]);
            }

            return result;
        }

        static int Count(Animal[] animals)
        { 
            int count = 0;

            foreach (Animal currentAnimal in animals) 
            {
                if (currentAnimal == null) break;

                count++;
            }

            return count;
        }

        static Cage MaxCageWith(Cage[] cages, Species species)
        {
            if (cages.Length == 0) return null;

            int maxIndex = 0;
            int maxValue = Count(cages[0].CollectAll(species));

            for (int i = 1; i < cages.Length; i++)
            {
                int currentValue = Count(cages[i].CollectAll(species));
                if (currentValue > maxValue)
                { 
                    maxIndex = i;
                    maxValue = currentValue;
                }
            }

            return cages[maxIndex];
        }
    }
}

---------------------------------------
Osztályok
---------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ZooApp
{
    enum Species 
    { 
        Dog,
        Panda,
        Rabbit
    }

    internal class Animal
    {
        string name;
        bool isMale;
        int weight;
        Species species;

        public string Name => name;
        public bool IsMale => isMale;
        
        public int Weight => weight;
        public Species Species => species;

        Animal() {}

        public Animal(string name, bool isMale, int weight, Species species)
        {
            this.name = name;
            this.isMale = isMale;
            this.weight = weight;
            this.species = species;
        }

        private string SpeciesToString() 
        { 
            switch (species) 
            {
                case Species.Dog: return ""kutya"";
                case Species.Panda: return ""panda"";
                case Species.Rabbit: return ""nyúl"";
                default: return string.Empty;
            }
        }
        public override string ToString()
        {
            return $""{name} ({(isMale ? ""hím"" : ""nőstény"")}, {weight} kg, {SpeciesToString()})"";
        }

        public static Animal Parse(string input)
        {
            Animal result = new Animal();

            string[] items = input.Split(',');
            result.name = items[0];
            result.isMale = items[1] == ""male"";
            result.weight = int.Parse(items[2]);
            result.species = (Species)Enum.Parse(typeof(Species), items[3]);
            
            return result;
        }
    }
}

---------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ZooApp
{
    internal class Cage
    {
        static int  maxSize = 10;
        Animal[] animals;
        int count = 0;

        public Cage(int size = 10)
        {
            animals = new Animal[size <= 10 ? size : maxSize]; //ternary operator

            //if (size <= 10)
            //{
            //    animals = new Animal[size];
            //}
            //else
            //{
            //    animals = new Animal[maxSize];
            //}
        }

        public bool Add(Animal newAnimal)
        {
            if (count == animals.Length) return false; //early exit

            animals[count] = newAnimal;
            count++;
            return true;

            //if (count != animals.Length)
            //{
            //    animals[count] = newAnimal;
            //    count++;
            //    return true;
            //}
            //return false;
        }

        private int Search(string name)
        {
            for (int i = 0; i < count; i++)
            {
                if (animals[i].Name == name)
                {
                    return i;
                }
            }

            return animals.Length;
        }

        public bool Remove(Animal animal)
        {
            int index = Search(animal.Name);

            if (index == animals.Length) return false;

            animals[index] = null;

            for (int i = index+1; i < count; i++)
            {
                animals[i - 1] = animals[i];
            }

            animals[count - 1] = null;
            count--;

            return true;
        }

        public int Count(Species species)
        {
            int speciesCount = 0;

            for (int i = 0; i < count; i++)
            {
                if (animals[i].Species == species)
                {
                    speciesCount++;
                }
            }

            return speciesCount;
        }

        public bool DoesExist(Species species, bool isMale) 
        {
            for (int i = 0; i < count; i++)
            {
                if (animals[i].Species == species && animals[i].IsMale == isMale)
                {
                    return true;
                }
            }
            return false;
        }

        public Animal[] CollectAll(Species species) 
        {
            Animal[] result = new Animal[count];
            int speciesCount = 0;

            for (int i = 0; i < count; i++)
            {
                if (animals[i].Species == species)
                {
                    result[speciesCount] = animals[i];
                    speciesCount++;
                }
            }

            return result;
        }

        public double AverageWeight(Species species)
        { 
            double sum = 0;
            int speciesCount = 0;

            Animal[] animalsWithSpecifiedSpecies = CollectAll(species);

            foreach (Animal currentAnimal in animalsWithSpecifiedSpecies) 
            {
                if (currentAnimal == null) break;

                sum += currentAnimal.Weight;
                speciesCount++;
            }

            return speciesCount == 0 ? 0.0 : sum/speciesCount;
        }

        public bool DoesExistSameSpeciesOppositeSex()
        {
            foreach (Species currentSpecies in Enum.GetValues(typeof(Species)))
            {
                Animal[] sameSpeciesAnimals = CollectAll(currentSpecies);

                bool isMale = false;
                bool isFemale = false;

                foreach (Animal currentAnimal in sameSpeciesAnimals)
                {
                    if (currentAnimal == null) break;

                    if (currentAnimal.IsMale) isMale = true;
                    else isFemale = true;

                    if (isMale && isFemale) return true;
                }
            }

            return false;
        }

        public override string ToString()
        {
            StringBuilder stringBuilder = new StringBuilder();

            foreach (Animal currentAnimal in animals)
            {
                if (currentAnimal == null) break;
                
                stringBuilder.AppendLine(currentAnimal.ToString());
            }

            return stringBuilder.ToString();
        }

        public static Cage CreateFrom(string fileName)
        {
            if (!File.Exists(fileName)) return null;

            Cage result = new Cage();

            using (StreamReader sr = new StreamReader(fileName))
            { 
                while (!sr.EndOfStream) 
                {
                    result.Add(Animal.Parse(sr.ReadLine()));
                }
            }

            return result;
        }
    }
}
"
1JZMup6L,SoftUni Exam Results,Nenogzar,Python,Monday 4th of March 2024 12:45:51 PM CDT,"university = {}

collect = input()
while collect != ""exam finished"":
    if ""banned"" in collect.split(""-""):
        username = collect.split(""-"")[0]
        del university[language][""users""][username]
    else:
        username, language, points = collect.split(""-"")
        if language not in university:
            university[language] = {""count"": 1, ""users"": {username: points}}
        else:
            university[language][""count""] += 1
            if username not in university[language][""users""]:
                university[language][""users""][username] = points
            else:
                if points > university[language][""users""][username]:
                    university[language][""users""][username] = points

    collect = input()

print(""Results:"")
for language, data in university.items():
    for user, points in data[""users""].items():
        print(f""{user} | {points}"")

print(""Submissions:"")
for language, data in university.items():
    print(f""{language} - {data['count']}"")"
e2EmChdJ,кубики_массивы,Petro_zzz,C++,Monday 4th of March 2024 12:30:44 PM CDT,"#include <iostream>

using namespace std;

void show_ascii_table() {
	int k = 0;
	while (k <= 255) {
		cout << k << "" - "" << (char)k << endl;
		k++;
	}
}

int dice() {
	return rand() % 6 + 1;
}

void show_dice(int val) {
	switch (val) {
		case 1:
			cout << R""(
+-----+ 
|     |
|  @  |
|     |
+-----+
				)"" << endl;
			break;
		case 2:
			cout << R""(
+-----+ 
|@    |
|     |
|    @|
+-----+
				)"" << endl;
			break;
		case 3:
			cout << R""(
+-----+ 
|@    |
|  @  |
|    @|
+-----+
				)"" << endl;
			break;
		case 4:
			cout << R""(
+-----+ 
|@   @|
|     |
|@   @|
+-----+
				)"" << endl;
			break;
		case 5:
			cout << R""(
+-----+ 
|@   @|
|  @  |
|@   @|
+-----+
				)"" << endl;
			break;
		case 6:
			cout << R""(
+-----+ 
| @ @ |
| @ @ |
| @ @ |
+-----+
				)"" << endl;
			break;
	}
}

void test_dice() {
	do {		
		show_dice(dice());
		show_dice(dice());
		getchar();
	} while (true);
}


void test_array() {

	/*
	int d1 = 2, d2 = 3, d3 = 5, d4=3, d5=4, d6=2;
	cout << d1 + d2 + d3 + d4 + d5 + d6 << endl;
	
	int sum = 0;
	for (int k = 1; k <= 6; k++) {
		sum += dk;
	}
	*/
	int d[6];
	d[0] = 2; d[1] = 3;	d[2] = 4;
	d[3] = 3; d[4] = 2; d[5] = 5;
	int sum = 0;
	for (int k = 1; k < 6; k += 2) {
		cout << d[k];
		if (k < 5)
			cout << "" + "";
		else
			cout << "" = "";
		sum += d[k];
	}
	cout << sum << endl;
}

void show_reversarray() {
	               //0   1    2   3
	double arr[]{1.01, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1};
	
	double arr2[100]{};

	for (int k = 9; k >= 0; k--) {
		cout << arr[k] << "" "";
	}
	cout << endl;


	//arr[0] = 1.0; arr[0] = 2.2;

}

int main(){
	srand(time(NULL));
	//show_ascii_table();
	//show_dice(1);
	//test_dice();
	show_reversarray();
	//test_array();
	system(""pause"");
	return 0;
}
"
9BBC2x6V,contact_form_building,blackimpala,PHP,Monday 4th of March 2024 12:29:33 PM CDT,"<!-- Contact Start -->
        <div class=""container-xxl py-5"" id=""contact"">
            <div class=""container py-5 px-lg-5"">
                <div class=""text-center wow fadeInUp"" data-wow-delay=""0.1s"">
                    <h5 class=""text-primary-gradient fw-medium"">Contact Us</h5>
                    <h1 class=""mb-5"">Get In Touch!</h1>
                </div>
                <div class=""row justify-content-center"">
                    <div class=""col-lg-9"">
                        <div class=""wow fadeInUp"" data-wow-delay=""0.3s"">
                          <?php
                          // Form submission script
                            include_once 'form_submit.php';

                            // Print form errors
                            if(!empty($errors)) {
                            	echo ""<ul class='errors'>"";
                            	foreach($errors as $error) {
                            		echo ""<li>"".$error.""</li>"";
                            	}
                            	echo ""</ul>"";
                            }

                            //Print success message
                            if(!empty($response)) {
                            	echo ""<ul class='success'>"";
                            	foreach($response as $res) {
                            		echo ""<li>"".$res.""</li>"";
                            	}
                            	echo ""</ul>"";
                            }

                          ?>
                            <form action="""" method=""post"">
                                <div class=""row g-3"">
                                    <div class=""col-md-6"">
                                        <div class=""form-floating"">
                                            <input type=""text"" class=""form-control"" id=""fullname"" name=""fullname"" placeholder=""Your Name"">
                                            <label for=""fullname"">Your Full Name</label>
                                        </div>
                                    </div>
                                    <div class=""col-md-6"">
                                        <div class=""form-floating"">
                                            <input type=""email"" class=""form-control"" id=""email"" name=""email"" placeholder=""Your Email"">
                                            <label for=""email"">Your Email</label>
                                        </div>
                                    </div>
                                    <div class=""col-12"">
                                        <div class=""form-floating"">
                                            <input type=""text"" class=""form-control"" id=""subject"" name=""subject"" placeholder=""Subject"">
                                            <label for=""subject"">Subject</label>
                                        </div>
                                    </div>
                                    <div class=""col-12"">
                                        <div class=""form-floating"">
                                            <textarea class=""form-control"" placeholder=""Leave a message here"" id=""message"" name=""message"" style=""height: 150px""></textarea>
                                            <label for=""message"">Message</label>
                                        </div>
                                    </div>
                                    <div class=""col-12 text-center"">
                                        <button class=""btn btn-primary-gradient rounded-pill py-3 px-5"" type=""submit"" id=""button"" name=""submit"">Send</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Contact End -->"
sEkRd37B,database_connection.php,blackimpala,PHP,Monday 4th of March 2024 12:27:34 PM CDT,"<?php
	$host = ""localhost"";
	$username = ""root"";
	$password = ""root"";
	$dbname = ""simco_pro"";

	// Create database connection
	$con = new mysqli($host, $username, $password, $dbname);

	// Check connection
	if ($con->connect_error) {
		die(""Connection failed: "" . $con->connect_error);
	}
?>"
77jDVKN9,contact_form_submit.php,blackimpala,PHP,Monday 4th of March 2024 12:25:52 PM CDT,"<?php

	require_once(""db_connection.php"");

	$errors = [];
	$response = [];

	if(isset($_POST['submit'])) {
		// Get the form data
		$fullname = $con->real_escape_string($_POST['fullname']);
		$email = $con->real_escape_string($_POST['email']);
		$subject = $con->real_escape_string($_POST['subject']);
		$message = $con->real_escape_string($_POST['message']);

		// Validate form fields
		if(empty($fullname)) {
			$errors[] = ""Please enter your name."";
		}

		if(empty($email) || filter_var($email, FILTER_VALIDATE_EMAIL) === false) {
			$errors[] = ""Please enter a valid email."";
		}

		if(empty($subject)) {
			$errors[] = ""Please enter subject."";
		}

		if(empty($message)) {
			$errors[] = ""Please enter your message."";
		}

		// Check errorss
		if(empty($errors)) {

			$sql=""INSERT INTO contact_form_data (fullname, email, subject, message) VALUES ('"".$fullname.""','"".$email.""', '"".$subject.""', '"".$message.""')"";

			if(!$result = $con->query($sql)){
				$errors[] = 'There was an error running the query <br>' . $con->error;
			} else {
				require_once(""send_mail.php"");
				$response[] = ""Thank you! We will contact you soon"";
			}

		}

	}
?>"
FWLBbQxN,Untitled,-Teme-,JavaScript,Monday 4th of March 2024 12:25:04 PM CDT,"//Config
let delay= 60; // check temperature interval
let sensorID1 = 100; // ID of the first temperature sensor
let sensorID2 = 101; // ID of the second temperature sensor
let temp1;
let temp2;
let swi = Shelly.getComponentStatus(""switch:0"").output;

function Main(){
    Timer.set(1000*delay,true,getStates); //Creating endless Loop for CheckTmp
}
// Function to retrieve temperature status and print it to the debug window
function getStates() {
    // Call Shelly API to get temperature status for sensorID1
    Shelly.call(""temperature.getStatus"", { id: sensorID1 },
        function(response1) {
            temp1 = JSON.stringify(Math.round(response1.tC));
        }),
    Shelly.call(""temperature.getStatus"", { id: sensorID2 },
        function(response2) {
            temp2 = JSON.stringify(Math.round(response2.tC));
    }),
    Shelly.call(""switch.getstatus"", { id:0 },
        function(result) {
        swi = result.output;
    });
        let gap = temp1 - temp2;
        // Check if both temperature readings are valid
        if (temp1 !== undefined && temp2 !== undefined) {
            // Compare temperature values
            if (gap <= 2) {
              Shelly.call(
                ""switch.set"",
                { id: 0, on: true },
                function (result, code, msg, ud) {},
                null
              );
          } else {
            Shelly.call(
              ""switch.set"",
              { id: 0, on: false },
              function (result, code, msg, ud) {},
              null
            );
            } 
        } else {
        // Handle case where sensor readings are invalid or unavailable
        null;
    }
}
Main();"
Lr0514MX,sending_email.php,blackimpala,PHP,Monday 4th of March 2024 12:24:12 PM CDT,"<?php
if(isset($_POST['submit'])){
        extract($_POST);
	// Admin email configuration
	$to_email = 'robvimu1130@gmail.com';

	$mail_subject = ""PHP Contact Form Test"";
	$mail_content = ""
		<h3>Contact Details</h3>
		<p><b>Name: </b>"".$fullname.""</p>
		<p><b>Email: </b>"".$email.""</p>
		<p><b>Subject: </b>"".$subject.""</p>
		<p><b>Message: </b>"".$message.""</p>
	"";

	// Always set content-type when sending HTML email
	$headers = ""MIME-Version: 1.0"" . ""\r\n"";
	$headers .= ""Content-type:text/html;charset=UTF-8"" . ""\r\n"";

	// More headers
	$headers .= ""From: "" . $fullname . ""<"". $email ."">\r\n"";

	// Send email
	mail($to_email,$mail_subject,$mail_content,$headers);
	}
?>"
u1NB1Rnc,Draft #2,onexiv,Python,Monday 4th of March 2024 12:20:05 PM CDT,"class Piece:
    def __init__(self, symbol, color):
        self.symbol = symbol
        self.color = color

class ChessGame:
    def __init__(self):
        self.board = self.initialize_board()

    def initialize_board(self):
        # Initialize an empty 8x8 chessboard with pieces in their starting positions
        board = [[None for _ in range(8)] for _ in range(8)]
        
        # Place white pieces
        board[0] = [['♖', 'R'], ['♘', 'N'], ['♗', 'B'], ['♕', 'Q'], ['♔', 'K'], ['♗', 'B'], ['♘', 'N'], ['♖', 'R']]
        board[1] = [['♙', 'P'], ['♙', 'P'], ['♙', 'P'], ['♙', 'P'], ['♙', 'P'], ['♙', 'P'], ['♙', 'P'], ['♙', 'P']]

        # Place black pieces
        board[7] = [['♜', 'r'], ['♞', 'n'], ['♝', 'b'], ['♛', 'q'], ['♚', 'k'], ['♝', 'b'], ['♞', 'n'], ['♜', 'r']]
        board[6] = [['♟', 'p'], ['♟', 'p'], ['♟', 'p'], ['♟', 'p'], ['♟', 'p'], ['♟', 'p'], ['♟', 'p'], ['♟', 'p']]

        return board

    def print_board(self):
        # Print the current state of the chessboard with positions revealed
        print(""  +------------------------ A +"")
        for row in range(8):
            row_display = f""{8 - row} | ""
            for col in range(8):
                if self.board[row][col] != None:
                    piece_symbol = self.board[row][col][0]
                else:
                    piece_symbol = '.'
                if (piece_symbol == None):
                    row_display += ' . '
                else:
                    row_display += f"" {piece_symbol} ""
            row_display += "" |""
            print(row_display)
        print(""  +------------------------ a +"")

        return self.board

    # def print_board(self):
    #     # Print the current state of the chessboard with positions revealed
    #     print(""  +---------------------------------+"")
    #     for row in range(8):
    #         row_display = f""{8 - row} | ""
    #         for col in range(8):
    #             if self.board[row][col] is not None:
    #                 piece_symbol = self.board[row][col].symbol
    #                 row_display += f"" {piece_symbol} ""
    #             else:
    #                 row_display += ""   ""
    #         row_display += ""|""
    #         print(row_display)
    #     print(""  +---------------------------------+"")
    #     print(""    a     b     c     d     e     f     g     h"")

    def capture_piece(self, row, col, moving_piece):
        # Remove the piece at the specified position from the board if it belongs to the opposing player
        captured_piece = self.board[row][col]
        if captured_piece != ' ' and ((moving_piece.isupper() and captured_piece.islower()) or (moving_piece.islower() and captured_piece.isupper())):
            self.board[row][col] = ' '  # Remove from the board
            if captured_piece.isupper():  # Captured piece is white
                self.captured_pieces['black'].append(captured_piece.lower())  # Add to black's captured pieces list
            else:  # Captured piece is black
                self.captured_pieces['white'].append(captured_piece.upper())  # Add to white's captured pieces list


    def move_piece(self, piece, start_row, start_col, end_row, end_col):
        # Check if the move is valid
        if self.is_valid_move(piece, start_row, start_col, end_row, end_col):
            # Perform the move
            # while True:
            piece_symbol = piece
            if self.board[start_row][start_col][1] == piece_symbol:
                piece_symbol = self.board[start_row][start_col][0]
            self.board[end_row][end_col] = piece_symbol
            self.board[start_row][start_col] = '.'
            print(""Move successful!"")
        else:
            print(""Invalid move!"")

    def convert_position(self, position):
        # Convert algebraic notation to array indices
        row = 8 - int(position[1])
        col = ord(position[0]) - ord('a')
        return row, col

    def is_within_board(self, row, col):
        # Check if the given position is within the bounds of the board
        return 0 <= row < 8 and 0 <= col < 8

    def is_valid_move(self, piece, start_row, start_col, end_row, end_col):
        # Check if the move is within the bounds of the board
        if not (0 <= start_row < 8 and 0 <= start_col < 8 and 0 <= end_row < 8 and 0 <= end_col < 8):
            return False
        
        # Check if there is a piece at the starting position
        if self.board[start_row][start_col] is None:
            return False

        # Check if there is a piece at the starting position
        if self.board[start_row][start_col][1] != piece:
            return False

        # Check if the destination cell contains a friendly piece
        if self.board[end_row][end_col] is not None:
            if self.board[start_row][start_col].islower() == self.board[end_row][end_col].islower():
                return False

        # Check for piece-specific move validation
        if piece == 'P':  # Pawn
            # Pawn can move forward two squares from starting position
            # Pawn can move forward one square
            if start_col == end_col and end_row - start_row == 1:
                return True
            if start_row == 1 and start_col == end_col and end_row - start_row == 2:
                return True
            # Pawn can capture diagonally
            if self.board[end_row][end_col] is not None and abs(start_col - end_col) == 1 and end_row - start_row == 1:
                return True
            return False
        elif piece == 'p':  # Pawn (for black)
            if start_row == 7 and start_col == end_col and start_row - end_row == 2:
                return True
            # Similar logic for black pawn
            if start_col == end_col and start_row - end_row == 1:
                return True
            if self.board[end_row][end_col] is not None and abs(start_col - end_col) == 1 and start_row - end_row == 1:
                print(self.board[end_row][end_col][0])
                return True
            return False
        elif piece == 'N' or piece == 'n':  # Knight
            # Knight moves in an L-shape
            delta_row = abs(end_row - start_row)
            delta_col = abs(end_col - start_col)
            return (delta_row == 2 and delta_col == 1) or (delta_row == 1 and delta_col == 2)
        elif piece == 'R' or piece == 'r':  # Rook
            # Rook moves horizontally or vertically
            return start_row == end_row or start_col == end_col
        elif piece == 'B' or piece == 'b':  # Bishop
            # Bishop moves diagonally
            return abs(end_row - start_row) == abs(end_col - start_col)
        elif piece == 'Q' or piece == 'q':  # Queen
            # Queen combines rook and bishop moves
            return (start_row == end_row or start_col == end_col) or (abs(end_row - start_row) == abs(end_col - start_col))
        elif piece == 'K' or piece == 'k':  # King
            # King moves one square in any direction
            return abs(end_row - start_row) <= 1 and abs(end_col - start_col) <= 1
        else:
            return False  # Default: invalid move


if __name__ == ""__main__"":
    game = ChessGame()
    while True:
        game.print_board()
        move = input(""Enter your move (e.g., 'N c3 to e4'): "")
        if move.lower() == 'exit':
            break
        move_parts = move.split()
        piece = move_parts[0]
        start_position = move_parts[1]
        end_position = move_parts[3]
        start_row, start_col = game.convert_position(start_position)
        end_row, end_col = game.convert_position(end_position)
        game.move_piece(piece, start_row, start_col, end_row, end_col)
"
Eig4SRdy,Untitled,dllbridge,C,Monday 4th of March 2024 12:19:30 PM CDT,"
#include <iostream>
using namespace std;


int  n =  8;
int *p = &n;
int &r =  n;

///////////////////////////////////////////////////////
int main()                                      
{

    cout << r;

return 0;
}

























/*
#include <iostream>
using namespace std;


void foo(int*);



///////////////////////////////////////////////////////
int main()                                      
{

    
    int n = 53;
	
	
	foo(&n);
    
    cout << ""n = ""<< n << endl;
     
	
	
return 0;
}



//////////////////////////////////////////////////////////
void foo(int *p)
{
 
     cout << "" p = ""<<  p << endl;
     cout << ""*p = ""<< *p << endl; 
    *p = 8; 
     cout << ""*p = ""<< *p << endl; 
  	
}


*/



/*

#include <iostream>
using namespace std;


int foo();

int n = 74;

///////////////////////////////////////////////////////
int main()                                      
{

    setlocale(LC_ALL, ""rus""); 	
    
    n = foo();
    
    cout << ""global address n = ""<< &n << endl;
     
	
	
return 0;
}



//////////////////////////////////////////////////////////
int foo()
{
 
    int n = 8; 

    cout << "" Local address n = ""<< &   n << endl;  
    cout << ""global address n = ""<< &(::n) << endl;
return n + 10;    	
}



*/


"
bXA8hJE7,tvindo.txt,Hakutaka,GetText,Monday 4th of March 2024 11:54:39 AM CDT,"memek
e192b7eba87fe7bf300bb31c84abcbdb1b7fac250661e6023e948f84a9dcb3eb
c009013c8a97551b52c208dc8cdb7bf307f0c34735608f1a2571584f5eb451ec
ad1a69a3493a06ce4a53efa398c0a85cd6dfb655bc52c6aedcd5e80455221a5c
4d4b482d1ce6134e3592e789e7ac963177d56df91082664385de55ad163e25b8
dcc115484faee5174358e158fb6e8d840e2d4abcc954b7e4019959ba525b8e91
"
fyvq2zre,Struct3,Filage,C++,Monday 4th of March 2024 11:49:20 AM CDT,"#include <iostream>
#include <string>

using namespace std;

struct Student {
	string name;
	string secondname;
	string surname;
	int age;
	int course;
	int grade[3];
};

void inputStudent(Student &student) {
	cout << ""Введите имя студента: "";
	cin >> student.name;
	cout << ""Введите фамилию студента: "";
	cin >> student.secondname;
	cout << ""Введите отчество студента: "";
	cin >> student.surname;
	cout << ""Введите возраст студента: "";
	cin >> student.age;
	cout << ""Введите курс студента: "";
	cin >> student.course;
	cout << ""Введите оценки студента по трем предметам студента: "";
	for (int i = 0; i < 3; i++)
		cin >> student.grade[i];
}

void outputStudent(Student &student){
	cout << ""ФИО: "" << student.name << "" "" << student.secondname << "" "" << student.surname;
	cout << ""Возраст: "" << student.age;
	cout << ""Курс: "" << student.course;
	cout << ""Оценки: "";
	for (int i = 0; i < 3; i++)
		cout << student.grade[i] << "" "";
}

float avarageGrade(Student student[], int course, int subject, int size) {
	float sum = 0, count = 0;
	for (int i = 0; i < size; i++) {
		if (student[i].course == course) {
			sum += student[i].grade[subject - 1];
			count++;
		}
	}
	if (count > 0) {
		return sum / count;
	}
	else {
		return 0;
	}
}

int main() {
	setlocale(LC_ALL, ""Rus"");
	int size, course, subject;
	float average;
	cout << ""Введите количество студентов: "";
	cin >> size;
	Student student[100];
	for (int i = 0; i < size; i++) {
		cout << ""Введите данные о "" << i + 1 << "" студенте: \n"";
		inputStudent(student[i]);
	}
	cout << ""Итоговая информация о всех студентах: \n"";
	for (int i = 0; i < size; i++) {
		cout << i + 1 << "" студент \n"";
		outputStudent(student[i]);
	}
	cout << ""\nВведите курс, на котором надо определить средний балл успеваемости: "";
	cin >> course;
	cout << ""Введите номер предмета от 1 до 3, на котором надо определить средний балл успеваемости: "";
	cin >> subject;
	average = avarageGrade(student, course, subject, size);
	cout << ""Средний балл студентов "" << course << "" курса по предмету "" << subject << "" равен "" << average;
}"
VHi8NBKd,Struct2,Filage,C++,Monday 4th of March 2024 11:48:57 AM CDT,"#include <iostream>

using namespace std;

struct complex {
	float re;
	float im;
};

complex read() {
    complex c;
    cout << ""Введите действительную часть: "";
    cin >> c.re;
    cout << ""Введите мнимую часть: "";
    cin >> c.im;
    return c;
}


void print(complex c) {
    cout << ""Действиетельная часть комплексного числа "" << c.re << "" и мнимамая "" << c.im << ""i"";
}

complex add(complex a, complex b) {
    complex result;
    result.re = a.re + b.re;
    result.im = a.im + b.im;
    return result;
}

int main() {
	setlocale(LC_ALL, ""Rus"");
    complex num1, num2, sum;
    cout << ""Введите первое комплексное число:"" << endl;
    num1 = read();
    cout << ""Введите второе комплексное число:"" << endl;
    num2 = read();
    cout << ""Сумма комплексных чисел:"" << endl;
    sum = add(num1, num2);
    print(sum);
}"
SamAyPW8,Struct1,Filage,C++,Monday 4th of March 2024 11:48:35 AM CDT,"#include <iostream>

using namespace std;

struct Price {
	int rubles;
	int coins;
};

struct Time {
	int hours;
	int minutes;
	int seconds;
};

struct Date {
	int day;
	int month;
	int year;
};

struct Address {
	int index; 
	string town;
	string street;
	int house;
	int apartment;
};

struct Student {
	string lastName;
	int recordBookNumber;
	int examGrade;
};

struct Exam {
	string subject;
	int groupNumber;
	Date examDate;
	Student students[25];
};

int main() {
	setlocale(LC_ALL, ""Rus"");
	Price itemPrice = { 52, 99 };
	struct Price* price_ptr = &itemPrice;
	cout << ""Цена: "" << price_ptr->rubles << "" рублей "" << itemPrice.coins << "" копеек"" << endl;

	Time currentTime = { 10, 30, 45 };
	cout << ""Текущее время: "" << currentTime.hours << "":"" << currentTime.minutes << "":"" << currentTime.seconds << endl;

	Date currentDate = { 7, 2, 2024 };
	cout << ""Текущая дата: "" << currentDate.day << ""."" << currentDate.month << ""."" << currentDate.year << endl;

	Address currentAddress = { 123456, ""Москва"", ""Ленина"", 10, 5 };
	cout << ""Адрес: "" << currentAddress.index << "", "" << currentAddress.town << "", "" << currentAddress.street
		 << "", д."" << currentAddress.house << "", кв."" << currentAddress.apartment << endl;

	Student students[25] = { {""Петров"", 1, 90}, {""Сидоров"", 2, 75}, {""Соколов"", 3, 99 }, {""Михайлов"", 4, 98 }, {""Новиков"", 5, 97 }, {""Федоров"", 6, 94 }, {""Морозов"", 7, 93 },
							 {""Алексеев"", 8, 90 }, {""Козлов"", 9, 99 }, {""Степанов"", 10, 88 }, {""Орлов"", 11, 36 }, {""Андреев"", 12, 81 }, {""Макаров"", 13, 67 }, {""Никитин"", 14, 22 },
							 {""Захаров"", 15, 94 }, {""Романов"", 16, 78 }, {""Чернов"", 17, 55 }, {""Григорьев"", 18, 41 }, {""Поляков"", 19, 63 }, {""Кудрявцев"", 20, 73 }, {""Калинин"", 21, 45 },
							 {""Максимов"", 22, 60 }, {""Лазарев"", 23, 27 }, {""Ефимов"", 24, 52 }, {""Беляев"", 25, 1 } };
	Exam exam1 = { ""Математика"", 1, {15, 2, 2024}};
	for (int i = 0; i < 25; ++i) {
		exam1.students[i] = students[i];
	}
	cout << ""Экзамен по "" << exam1.subject << "" для группы "" << exam1.groupNumber << "" состоится ""
		 << exam1.examDate.day << ""."" << exam1.examDate.month << ""."" << exam1.examDate.year << "". \nСписок студентов и оценок:""
		 << endl;
	for (int i = 0; i < 25; ++i) {
		cout << ""Студент: "" << exam1.students[i].lastName << "", номер зачетной книжки: "" << exam1.students[i].recordBookNumber << "", оценка: "" << exam1.students[i].examGrade << endl;
	}
}"
LyQiiaRu,DynamicArr4,Filage,C++,Monday 4th of March 2024 11:48:02 AM CDT,"#include <iostream>
#include <string>

using namespace std;

void takeText(int sizeArr, string* str_arr) {
	for (int i = 0; i < sizeArr; i++) {
		cin >> str_arr[i];
	}
}

int findTheLetter(int sizeArr, string* str_arr) {
	int count = 0;
	for (int i = 0; i < sizeArr && str_arr[i] != "".""; i++) {
		int sizik = size(str_arr[i]);
		int j = 0;
		while (j < sizik) {
			if (str_arr[i][j] == 'u')
				count++;
			j++;
		}
	}
	return count;
}

int main() {
	setlocale(LC_ALL, ""Russian"");
	int sizeArr;
	cout << ""Введите из сколька слов будет состоять ваш текст, включая знаки препинания: "";
	cin >> sizeArr;
	string* str_arr = new string[sizeArr];
	takeText(sizeArr, str_arr);
	int count = findTheLetter(sizeArr, str_arr);
	if (count != 0)
		cout << ""Количество букв u в первом предложении: "" << count;
	else 
		cout << ""В первом предложении букв u нет"";
	delete[] str_arr;
}
"
EpWem7vx,Untitled,ShavermaYT,JavaScript,Monday 4th of March 2024 11:48:01 AM CDT,"const { Client, Intents } = require('discord.js');
const openai = require('openai');
const { DISCORD_BOT_TOKEN, OPENAI_API_KEY } = require('C:/Users/Rotix/Desktop/Ugadayka2.0/ewv/src/chatbot/REo/config.json');

// Устанавливаем ключ OpenAI
openai.apiKey = OPENAI_API_KEY;
const openaiINSTANCE = new OpenAI();
// Создаем клиента Discord с указанием намерений
const client = new Client({
    intents: [Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_MESSAGES],
});

// Функция для отправки запроса к OpenAI и получения ответа
async function askOpenAI(prompt) {
    try {
        const response = await openaiINSTANCE.chat.completions.create({
          messages: [{ role: ""user"", content: prompt }],
          model: ""text-davinci-003"",
          temperature: 0.7,
          maxTokens: 100
        });
        return response.data.choices[0].text.trim();
    } catch (error) {
        console.error('OpenAI error:', error);
        return 'Извините, произошла ошибка при обработке вашего запроса.';
    }
}
// Событие готовности бота
client.once('ready', async () => {
    console.log('Бот готов!');
    const response = await askOpenAI('ТЕСТ');
    console.log(response);
});
// Событие при получении сообщения
client.on('messageCreate', async message => {
    // Проверяем, что сообщение не отправлено самим ботом и содержит упоминание бота
    if (!message.author.bot) {
        // Получаем текст сообщения без упоминания бота
        const prompt = message.content.replace(`<@!${client.user.id}>`, '').trim();

        // Запрашиваем ответ у OpenAI
        const response = await askOpenAI(prompt);

        // Отправляем ответ обратно на сервер Discord
        message.channel.send(response.choices[0]);
    }
});

// Вход в систему бота
client.login(DISCORD_BOT_TOKEN);"
N9UrxNDZ,DynamicArr3,Filage,C++,Monday 4th of March 2024 11:47:28 AM CDT,"#include <iostream>

using namespace std;

void inputArray(int n, int* car, string what) {
	cout << ""Введите цены за "" << what << "" :\n"";
	for (int i = 0; i < n; i++) {
		cout << i + 1 << what << "" = "";
		cin >> car[i];
	}
}

int averageSmth(int* car, int size, string what) {
	int average = 0;
	for (int i = 0; i < size; i++)
		average += car[i];
	average /= size;
	cout << ""Средняя цена марок "" << what << "": "" << average << endl;
	return average;
}

int main() {
	setlocale(LC_ALL, ""Russian"");
	int average_cars = 0, average_moto = 0, n, m;
	cout << ""Введите количество машин : "";
	cin >> n;
	int* car = new int[n];
	inputArray(n, car, "" машина "");
	cout << ""Введите количество мотоциклов : "";
	cin >> m;
	int* moto = new int[m];
	inputArray(m, moto, "" мотоцикл "");
	average_cars = averageSmth(car, n, ""машин"");
	average_moto = averageSmth(moto, m, ""мотоциклов"");
	if (average_cars / average_moto > 3)
		cout << ""\nВерно"";
	else
		cout << ""\nНеверно"";
	delete[] car;
	delete[] moto;
}
"
C9KTRLz1,DynamicArr2,Filage,C++,Monday 4th of March 2024 11:46:46 AM CDT,"#include <iostream>

using namespace std;

void sizeArray(int& height, int& length) {
	cout << ""Введите количество строк в двумерном массиве: "";
	cin >> height;
	cout << ""Введите количество столбцов в двумерном массиве: "";
	cin >> length;
}

void inputArrayElements(int height, int length, int** arr) {
	cout << ""Введите элементы массива: \n"";
	for (int i = 0; i < height; i++) {
		for (int j = 0; j < length; j++) {
			cout << ""arr["" << i + 1 << ""]["" << j + 1 << ""] = "";
			cin >> arr[i][j];
		}
	}
}

void outputArrayElements(int height, int length, int** arr) {
	for (int i = 0; i < height; i++) {
		for (int j = 0; j < length; j++) {
			cout << arr[i][j] << "" "";
		}
		cout << endl;
	}
}

void findSum(int height, int length, int** arr, int* sum) {
	int count = 0;
	int flag;
	for (int i = 0; i < height; i++) {
		int j = 0;
		flag = 1;
		while ((flag == 1) && (j < length)) {
			if (arr[i][j] < 0) {
				for (int k = 0; k < length; k++)
					sum[count] += arr[i][k];
				cout << ""Сумма элементов в строке "" << i + 1 << "" равна "" << sum[count] << endl;
				count++;
				flag = 0;
			}
			j++;
		}
	}
}

int main() {
	setlocale(LC_ALL, ""Russian"");
	int length = 0 , height = 0, count;
	sizeArray(height, length);
	int* sum = new int[height];
	for (int i = 0; i < height; i++)
		sum[i] = 0;
	int** arr = new int* [height];
	for (int i = 0; i < height; i++) {
		arr[i] = new int[length];
	}
	inputArrayElements(height, length, arr);
	outputArrayElements(height, length, arr);
	findSum(height, length, arr, sum);
	for (int i = 0; i < height; i++)
		delete[] arr[i];
	delete[] arr;
}
"
ATgKWaP2,DynamicArr1,Filage,C++,Monday 4th of March 2024 11:45:45 AM CDT,"#include <iostream>

using namespace std;

int sizeArray() {
	int n;
	cout << ""Введите размер массива: "";
	cin >> n;
	return n;
}

void inputArray(int size, int* arr) {
	cout << ""Введите элементы массива: \n"";
	for (int i = 0; i < size; i++) {
		cout << ""arr["" << i << ""] = "";
		cin >> *(arr + i);
	}
}

void findNegative(int& k, int* arr, int& size, int& count) {
	int i = 0;
	while (k < 0 && i < size) {
		if (arr[i] < 0)
			k = i;
		i++;
	}
	while (count < 0 && i < size) {
		if (arr[i] < 0)
			count = i;
		i++;
	}
}

void outputNegative(int k, int count, int* arr) {
	int sum = 0;
;	if ((k + 1 > count) || (k == count)) {
		cout << ""В данном массиве меньше двух отрицательных элементов"";
	}
	else {
		cout << ""Сумма элементов массива, расположенных между первым и вторым отрицательными элементами: "";
		for (int j = k + 1; j < count; j++) {
			sum += arr[j];
		}
		cout << sum;
	}
}

int main() {
	setlocale(LC_ALL, ""Russian"");
	int n, count = -1, k = -1;
	n = sizeArray();
	int* arr = new int[n];
	inputArray(n, arr);
	findNegative(k, arr, n, count);
	outputNegative(k, count, arr);
	delete[] arr;
}"
NggSuUKb,Untitled,Max_the_Coder,Python,Monday 4th of March 2024 10:59:17 AM CDT,"# google_api_project/training_spreadsheets.py
from googleapiclient import discovery
from google.oauth2.service_account import Credentials


SCOPES = [
         'https://www.googleapis.com/auth/spreadsheets',
         'https://www.googleapis.com/auth/drive',
]


CREDENTIALS_FILE = '... .json'


def auth():
    # Создаём экземпляр класса Credentials.
    credentials = Credentials.from_service_account_file(
                  filename=CREDENTIALS_FILE, scopes=SCOPES)
    # Создаём экземпляр класса Resource.
    service = discovery.build('sheets', 'v4', credentials=credentials)
    return service, credentials


def create_spreadsheet(service):
    # Тело spreadsheet
    spreadsheet_body = {
         # Свойства документа
        'properties': {
            'title': 'Бюджет путешествий',
            'locale': 'ru_RU'
        },
        # Свойства листов документа
        'sheets': [{
            'properties': {
                'sheetType': 'GRID',
                'sheetId': 0,
                'title': 'Отпуск 2077',
                'gridProperties': {
                    'rowCount': 100,
                    'columnCount': 100
                }
             }
         }]
    }
    request = service.spreadsheets().create(body=spreadsheet_body)
    response = request.execute()
    spreadsheet_id = response['spreadsheetId'] 
    print('https://docs.google.com/spreadsheets/d/' + spreadsheet_id)

    return spreadsheet_id 


service, credentials = auth()
spreadsheetId = create_spreadsheet(service) 

def set_user_permissions(spreadsheet_id, credentials):
    permissions_body={'type': 'user', # Тип учётных данных.
                      'role': 'writer', # Права доступа для учётной записи.
                      'emailAddress': '...'} # Ваш личный гугл-аккаунт.
    
    # Создаётся экземпляр класса Resource для Google Drive API.
    drive_service = discovery.build('drive', 'v3', credentials=credentials)
    
    # Формируется и сразу выполняется запрос на выдачу прав вашему аккаунту.
    drive_service.permissions().create(
        fileId=spreadsheet_id,
        body=permissions_body,
        fields='id'
    ).execute()


set_user_permissions(spreadsheetId, credentials)"
GS7qBRZE,isEmpty(),Aldin_SXR,Java,Monday 4th of March 2024 10:44:33 AM CDT,"/* Check if the stack is empty */
public boolean isEmpty() {
    return size == 0;
}"
j4PGHSvu,Untitled,Max_the_Coder,Python,Monday 4th of March 2024 10:43:30 AM CDT,"# google_api_project/training_spreadsheets.py
from googleapiclient import discovery
from google.oauth2.service_account import Credentials

from dotenv import load_dotenv
import os

SCOPES = [
         'https://www.googleapis.com/auth/spreadsheets',
         'https://www.googleapis.com/auth/drive',
] 

load_dotenv()
EMAIL = os.environ['EMAIL']

CREDENTIALS_FILE = 'файл_credential`ов.json'


def auth():
    # Создаём экземпляр класса Credentials.
    credentials = Credentials.from_service_account_file(
                  filename=CREDENTIALS_FILE, scopes=SCOPES)
    # Создаём экземпляр класса Resource.
    service = discovery.build('sheets', 'v4', credentials=credentials)
    return service, credentials


def create_spreadsheet(service):
    # Тело spreadsheet
    spreadsheet_body = {
         # Свойства документа
        'properties': {
            'title': 'Бюджет путешествий',
            'locale': 'ru_RU'
        },
        # Свойства листов документа
        'sheets': [{
            'properties': {
                'sheetType': 'GRID',
                'sheetId': 0,
                'title': 'Отпуск 2077',
                'gridProperties': {
                    'rowCount': 100,
                    'columnCount': 100
                }
             }
         }]
    }
    request = service.spreadsheets().create(body=spreadsheet_body)
    response = request.execute()
    spreadsheet_id = response['spreadsheetId'] 
    print('https://docs.google.com/spreadsheets/d/' + spreadsheet_id)

    return spreadsheet_id 


service, credentials = auth()
spreadsheetId = create_spreadsheet(service) 

def set_user_permissions(spreadsheet_id, credentials):
    permissions_body={'type': 'user', # Тип учётных данных.
                      'role': 'writer', # Права доступа для учётной записи.
                      'emailAddress': EMAIL} # Ваш личный гугл-аккаунт.
    
    # Создаётся экземпляр класса Resource для Google Drive API.
    drive_service = discovery.build('drive', 'v3', credentials=credentials)
    
    # Формируется и сразу выполняется запрос на выдачу прав вашему аккаунту.
    drive_service.permissions().create(
        fileId=spreadsheet_id,
        body=permissions_body,
        fields='id'
    ).execute()


set_user_permissions(spreadsheetId, credentials)"
jpdAM4nV,queue main(),Aldin_SXR,Java,Monday 4th of March 2024 10:42:51 AM CDT,"public static void main(String[] args) {
    /* Queue demo */
    Queue<Integer> queue = new Queue<>();

    queue.enqueue(1);
    queue.enqueue(2);
    queue.enqueue(3);

    System.out.println(""Queue demo: "");
    System.out.println(""peek: "" + queue.peek());
    System.out.println(queue.dequeue());
    System.out.println(queue.dequeue());
    System.out.println(queue.dequeue());
    queue.enqueue(4);

    System.out.println(""queue size: "" + queue.size());
}"
C6hdk41M,Untitled,h1n0t0r1,Python,Monday 4th of March 2024 10:42:36 AM CDT,"# Read user input

students_count = int(input())

# Logic

top_students = 0
between_4_5 = 0
between_3_4 = 0
fail = 0
grade_sum = 0

for i in range(students_count):
    grade = float(input())
    if grade >= 5:
        top_students += 1
    elif grade >= 4:
        between_4_5 += 1
    elif grade >= 3:
        between_3_4 += 1
    else:
        fail += 1
    grade_sum += grade
# Print output
print(f'Top students: {top_students / students_count * 100:.2f}%')
print(f'Between 4.00 and 4.99: {between_4_5 / students_count * 100:.2f}%')
print(f'Between 3.00 and 3.99: {between_3_4 / students_count * 100:.2f}%')
print(f'Fail: {fail / students_count * 100:.2f}%')
print(f'Average: {grade_sum / students_count:.2f}')"
3jiCpxpK,Queue.java,Aldin_SXR,Java,Monday 4th of March 2024 10:42:22 AM CDT,"public class Queue<Data> {
    private Node<Data> head = null;
    private Node<Data> tail = null;
    private int size = 0;

    /* Return the current size of the queue */
    public int size() {
        return size;
    }

    /* Check if the queue is empty */
    public boolean isEmpty() {
        return size == 0;
    }

    /* Add new item to the back of the queue */
    public void enqueue(Data item) {
        Node<Data> newNode = new Node<>();	    // 1
        newNode.data = item;					// 1
        if (isEmpty()) {						// 2
            head = tail = newNode;				// 2
        } else {
            tail.next = newNode;				// 3
            tail = newNode;						// 4
        }
        size++;									// 5
    }

    /* Removes an item from the front of the queue, and returns its data */
    public Data dequeue() {
        if (isEmpty()) {												// 1
            throw new NoSuchElementException(""Queue is empty!"");		// 1
        }

        Data data = head.data;											// 2
        head = head.next;												// 3
        size--;															// 4

        if (isEmpty()) {											    // 5
            tail = null;												// 5
        }

        return data;													// 6
    }

    /* Reads an item at the front of the queue, without removing it */
    public Data peek() {
        if (isEmpty()) {												// 1
            throw new NoSuchElementException(""Queue is empty!"");		// 1
        }

        return head.data;											    // 2
    }
}
"
Mf0UgXW0,queue peek(),Aldin_SXR,Java,Monday 4th of March 2024 10:41:24 AM CDT,"/* Reads an item at the front of the queue, without removing it */
public Data peek() {
    if (isEmpty()) {												// 1
        throw new NoSuchElementException(""Queue is empty!"");		// 1
    }

    return head.data;											    // 2
}"
