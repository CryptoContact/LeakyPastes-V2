id,title,username,language,date,content
wp9EMQBq,Advent of code 2023 day 7,hhoppe,Python,Wednesday 6th of December 2023 11:57:13 PM CDT,"def day7(s, *, part2=False):
  hand_wagers = [line.split() for line in s.splitlines()]
  VAL = {str(i): i for i in range(2, 10)} | dict(T=10, J=11, Q=12, K=13, A=14)

  def hand_value(hand):
    values = [VAL[ch] for ch in hand]
    if part2:
      non_jokers = [v for v in values if v != VAL['J']]
      common = collections.Counter(non_jokers).most_common() or [('A', 0)]
      common[0] = common[0][0], common[0][1] + (len(values) - len(non_jokers))
      values = [(1 if v == VAL['J'] else v) for v in values]
    else:
      common = collections.Counter(values).most_common()
    return common[0][1], (common[1][1] if common[1:] else 0), values

  hand_wagers.sort(key=lambda t: hand_value(t[0]))
  return sum(int(wager) * i for i, (_, wager) in enumerate(hand_wagers, 1))"
WXuHJjwr,Untitled,xidharth,JavaScript,Wednesday 6th of December 2023 11:40:03 PM CDT,"projec: ''PVT_kwHOCRMcM84AZN4j'' mile: ''MI_kwDOK2xm284AnNeB''
repo : 'R_kgDOK2xm2w'"
T0gHGn1Z,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Wednesday 6th of December 2023 11:25:18 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-414488"
NhvZUqMt,BTC Wallet Credentials have been reset,castlclass_20,GetText,Wednesday 6th of December 2023 11:16:27 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
rhoboat894j:9sQWAb on 212.224.93.130
You can connect via SSH.
Regards"
nR0ziQvM,News Dec6 23,Newscaster_Ned,Email,Wednesday 6th of December 2023 10:39:24 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

H‎e‎r‎e‎'‎s‎ ‎t‎h‎e‎ ‎n‎e‎w‎s‎,‎ ‎y‎o‎u‎ ‎m‎a‎n‎d‎i‎n‎g‎o‎s‎.‎

C‎h‎r‎i‎s‎t‎i‎e‎ ‎A‎t‎t‎a‎c‎k‎s‎ ‎'‎D‎i‎c‎t‎a‎t‎o‎r‎'‎ ‎T‎r‎u‎m‎p‎:‎ ‎'‎W‎a‎n‎t‎s‎ ‎t‎o‎ ‎E‎x‎a‎c‎t‎ ‎R‎e‎t‎r‎i‎b‎u‎t‎i‎o‎n‎'‎
C‎h‎r‎i‎s‎t‎i‎e‎ ‎G‎e‎t‎s‎ ‎B‎o‎o‎e‎d‎ ‎f‎o‎r‎ ‎C‎l‎a‎i‎m‎i‎n‎g‎ ‎T‎r‎u‎m‎p‎ ‎W‎i‎l‎l‎ ‎B‎e‎ ‎C‎o‎n‎v‎i‎c‎t‎e‎d‎
F‎a‎c‎t‎ ‎C‎h‎e‎c‎k‎:‎ ‎V‎i‎v‎e‎k‎ ‎R‎a‎m‎a‎s‎w‎a‎m‎y‎ ‎I‎s‎ ‎R‎i‎g‎h‎t‎,‎ ‎W‎u‎h‎a‎n‎ ‎I‎s‎ ‎S‎h‎i‎p‎p‎i‎n‎g‎ ‎F‎e‎n‎t‎a‎n‎y‎l‎ ‎M‎a‎t‎e‎r‎i‎a‎l‎s‎
G‎e‎r‎a‎l‎d‎o‎ ‎R‎i‎v‎e‎r‎a‎:‎ ‎W‎h‎a‎t‎ ‎T‎r‎u‎m‎p‎ ‎D‎i‎d‎ ‎A‎f‎t‎e‎r‎ ‎t‎h‎e‎ ‎2‎0‎2‎0‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎ ‎W‎a‎s‎ ‎'‎O‎b‎s‎c‎e‎n‎e‎'‎
R‎a‎m‎a‎s‎w‎a‎m‎y‎:‎ ‎2‎n‎d‎ ‎A‎m‎e‎n‎d‎m‎e‎n‎t‎ ‎P‎r‎e‎v‎e‎n‎t‎s‎ ‎I‎n‎v‎a‎s‎i‎o‎n‎ ‎f‎r‎o‎m‎ ‎'‎F‎o‎r‎e‎i‎g‎n‎ ‎A‎u‎t‎o‎c‎r‎a‎t‎s‎'‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
*‎ ‎G‎O‎P‎ ‎D‎e‎b‎a‎t‎e‎ ‎L‎i‎v‎e‎w‎i‎r‎e‎ ‎*‎

T‎o‎n‎i‎g‎h‎t‎:‎ ‎J‎a‎y‎v‎e‎e‎ ‎D‎e‎b‎a‎t‎e‎ ‎o‎n‎ ‎J‎a‎y‎v‎e‎e‎ ‎N‎e‎w‎s‎ ‎N‎e‎t‎w‎o‎r‎k‎

F‎u‎n‎ ‎B‎r‎e‎a‎k‎s‎ ‎O‎u‎t‎:‎ ‎I‎n‎s‎u‎l‎t‎s‎ ‎F‎l‎y‎!‎

E‎i‎g‎h‎t‎ ‎Y‎e‎a‎r‎s‎ ‎L‎a‎t‎e‎r‎,‎ ‎M‎e‎g‎y‎n‎ ‎R‎e‎t‎u‎r‎n‎s‎ ‎a‎s‎ ‎G‎O‎P‎ ‎D‎e‎b‎a‎t‎e‎ ‎M‎o‎d‎e‎r‎a‎t‎o‎r‎

C‎h‎r‎i‎s‎t‎i‎e‎ ‎W‎h‎i‎t‎e‎ ‎K‎n‎i‎g‎h‎t‎s‎ ‎f‎o‎r‎ ‎N‎i‎k‎k‎i‎

V‎i‎v‎e‎k‎ ‎t‎o‎ ‎C‎h‎r‎i‎s‎:‎ ‎’‎H‎a‎v‎e‎ ‎a‎ ‎N‎i‎c‎e‎ ‎M‎e‎a‎l‎’‎
T‎U‎S‎C‎A‎L‎O‎O‎S‎A‎,‎ ‎A‎L‎A‎B‎A‎M‎A‎ ‎-‎ ‎D‎E‎C‎E‎M‎B‎E‎R‎ ‎0‎6‎:‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎p‎r‎e‎s‎i‎d‎e‎n‎t‎i‎a‎l‎ ‎c‎a‎n‎d‎i‎d‎a‎t‎e‎s‎ ‎(‎L‎-‎R‎)‎ ‎f‎o‎r‎m‎e‎r‎ ‎N‎e‎w‎ ‎J‎e‎r‎s‎e‎y‎ ‎G‎o‎v‎.‎ ‎C‎h‎r‎i‎s‎ ‎C‎h‎r‎i‎s‎t‎i‎e‎,‎ ‎f‎o‎r‎m‎e‎r‎ ‎U‎.‎N‎.‎ ‎A‎m‎b‎a‎s‎s‎a‎d‎o‎r‎ ‎N‎i‎k‎k‎i‎ ‎H‎a‎l‎e‎y‎,‎ ‎F‎l‎o‎r‎i‎d‎a‎ ‎G‎o‎v‎.‎ ‎R‎o‎n‎ ‎D‎e‎S‎a‎n‎t‎i‎s‎ ‎a‎n‎d‎ ‎V‎i‎v‎e‎k‎ ‎R‎a‎m‎a‎s‎w‎a‎m‎y‎ ‎p‎a‎r‎t‎i‎c‎i‎p‎a‎t‎e‎ ‎i‎n‎ ‎t‎h‎e‎ ‎N‎e‎w‎s‎N‎a‎t‎i‎o‎n‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎i‎a‎l‎ ‎P‎r‎i‎m‎a‎r‎y‎ ‎D‎e‎b‎a‎t‎e‎ ‎a‎t‎ ‎t‎h‎e‎ ‎U‎n‎i‎v‎e‎r‎s‎i‎t‎y‎ ‎o‎f‎ ‎A‎l‎a‎b‎a‎m‎a‎ ‎M‎o‎o‎d‎y‎ ‎M‎u‎s‎i‎c‎ ‎H‎a‎l‎l‎ ‎o‎n‎ ‎D‎e‎c‎e‎m‎b‎e‎r‎ ‎6‎,‎ ‎2‎0‎2‎3‎ ‎i‎n‎ ‎T‎u‎s‎c‎a‎l‎o‎o‎s‎a‎,‎ ‎A‎l‎a‎b‎a‎m‎a‎.‎ ‎…‎
A‎n‎d‎ ‎t‎h‎e‎n‎ ‎t‎h‎e‎r‎e‎ ‎w‎e‎r‎e‎ ‎f‎o‎u‎r‎.‎ ‎W‎e‎d‎n‎e‎s‎d‎a‎y‎ ‎e‎v‎e‎n‎i‎n‎g‎ ‎i‎n‎ ‎T‎u‎s‎c‎a‎l‎o‎o‎s‎a‎,‎ ‎A‎l‎a‎b‎a‎m‎a‎,‎ ‎o‎n‎l‎y‎ ‎f‎o‎u‎r‎ ‎G‎O‎P‎ ‎c‎h‎a‎l‎l‎e‎n‎g‎e‎r‎s‎ ‎t‎o‎ ‎f‎o‎r‎m‎e‎r‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎r‎e‎m‎a‎i‎n‎ ‎o‎n‎ ‎t‎h‎e‎ ‎d‎e‎b‎a‎t‎e‎ ‎s‎t‎a‎g‎e‎,‎ ‎a‎s‎ ‎e‎a‎c‎h‎ ‎o‎f‎ ‎t‎h‎e‎m‎ ‎d‎e‎s‎p‎e‎r‎a‎t‎e‎l‎y‎ ‎s‎e‎e‎k‎s‎ ‎a‎ ‎m‎o‎m‎e‎n‎t‎ ‎t‎o‎ ‎c‎h‎a‎n‎g‎e‎ ‎t‎h‎e‎ ‎t‎r‎a‎j‎e‎c‎t‎o‎r‎y‎ ‎o‎f‎ ‎t‎h‎e‎ ‎r‎a‎c‎e‎,‎ ‎w‎h‎i‎l‎e‎,‎ ‎f‎o‎r‎ ‎n‎o‎w‎,‎ ‎i‎t‎ ‎s‎e‎e‎m‎s‎ ‎a‎l‎l‎ ‎b‎u‎t‎ ‎c‎e‎r‎t‎a‎i‎n‎ ‎t‎h‎a‎t‎ ‎T‎r‎u‎m‎p‎ ‎i‎s‎ ‎m‎e‎r‎e‎ ‎w‎e‎e‎k‎s‎ ‎a‎w‎a‎y‎ ‎f‎r‎o‎m‎ ‎w‎i‎p‎i‎n‎g‎ ‎t‎h‎e‎m‎ ‎a‎l‎l‎ ‎o‎u‎t‎.‎

M‎i‎k‎e‎ ‎J‎o‎h‎n‎s‎o‎n‎ ‎C‎a‎v‎e‎s‎ ‎o‎n‎ ‎S‎l‎i‎p‎p‎i‎n‎g‎ ‎F‎B‎I‎ ‎S‎p‎y‎ ‎P‎o‎w‎e‎r‎ ‎A‎u‎t‎h‎o‎r‎i‎z‎a‎t‎i‎o‎n‎ ‎i‎n‎ ‎D‎e‎f‎e‎n‎s‎e‎ ‎B‎i‎l‎l‎
M‎i‎k‎e‎ ‎J‎o‎h‎n‎s‎o‎n‎ ‎C‎a‎v‎e‎s‎ ‎o‎n‎ ‎S‎l‎i‎p‎p‎i‎n‎g‎ ‎F‎B‎I‎ ‎S‎p‎y‎ ‎P‎o‎w‎e‎r‎ ‎A‎u‎t‎h‎o‎r‎i‎z‎a‎t‎i‎o‎n‎ ‎i‎n‎ ‎D‎e‎f‎e‎n‎s‎e‎ ‎B‎i‎l‎l‎
2‎,‎8‎0‎9‎
T‎r‎u‎m‎p‎:‎ ‎I‎ ‎W‎o‎n‎'‎t‎ ‎B‎e‎ ‎a‎ ‎D‎i‎c‎t‎a‎t‎o‎r‎ ‎i‎f‎ ‎R‎e‎e‎l‎e‎c‎t‎e‎d‎,‎ ‎'‎O‎t‎h‎e‎r‎ ‎t‎h‎a‎n‎ ‎D‎a‎y‎ ‎O‎n‎e‎'‎
T‎r‎u‎m‎p‎:‎ ‎I‎ ‎W‎o‎n‎'‎t‎ ‎B‎e‎ ‎a‎ ‎D‎i‎c‎t‎a‎t‎o‎r‎ ‎i‎f‎ ‎R‎e‎e‎l‎e‎c‎t‎e‎d‎,‎ ‎'‎O‎t‎h‎e‎r‎ ‎t‎h‎a‎n‎ ‎D‎a‎y‎ ‎O‎n‎e‎'‎
5‎,‎5‎8‎7‎
H‎a‎l‎e‎y‎ ‎F‎a‎l‎s‎e‎l‎y‎ ‎C‎l‎a‎i‎m‎s‎ ‎S‎h‎e‎ ‎N‎e‎v‎e‎r‎ ‎S‎a‎i‎d‎ ‎S‎o‎c‎i‎a‎l‎ ‎M‎e‎d‎i‎a‎ ‎U‎s‎e‎r‎s‎ ‎M‎u‎s‎t‎ ‎B‎e‎ ‎I‎d‎e‎n‎t‎i‎f‎i‎e‎d‎
H‎a‎l‎e‎y‎ ‎F‎a‎l‎s‎e‎l‎y‎ ‎C‎l‎a‎i‎m‎s‎ ‎S‎h‎e‎ ‎N‎e‎v‎e‎r‎ ‎S‎a‎i‎d‎ ‎S‎o‎c‎i‎a‎l‎ ‎M‎e‎d‎i‎a‎ ‎U‎s‎e‎r‎s‎ ‎M‎u‎s‎t‎ ‎B‎e‎ ‎I‎d‎e‎n‎t‎i‎f‎i‎e‎d‎
5‎1‎
A‎u‎s‎t‎i‎n‎ ‎W‎a‎r‎n‎e‎d‎ ‎C‎o‎n‎g‎r‎e‎s‎s‎ ‎T‎r‎o‎o‎p‎s‎ ‎C‎o‎u‎l‎d‎ ‎B‎e‎ ‎S‎e‎n‎t‎ ‎I‎f‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎A‎i‎d‎ ‎I‎s‎ ‎N‎o‎t‎ ‎A‎p‎p‎r‎o‎v‎e‎d‎
A‎u‎s‎t‎i‎n‎ ‎W‎a‎r‎n‎e‎d‎ ‎C‎o‎n‎g‎r‎e‎s‎s‎ ‎T‎r‎o‎o‎p‎s‎ ‎C‎o‎u‎l‎d‎ ‎B‎e‎ ‎S‎e‎n‎t‎ ‎I‎f‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎A‎i‎d‎ ‎I‎s‎ ‎N‎o‎t‎ ‎A‎p‎p‎r‎o‎v‎e‎d‎
5‎,‎8‎6‎0‎
R‎e‎p‎o‎r‎t‎:‎ ‎U‎N‎L‎V‎ ‎S‎h‎o‎o‎t‎e‎r‎ ‎W‎a‎s‎ ‎6‎7‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎C‎o‎l‎l‎e‎g‎e‎ ‎P‎r‎o‎f‎e‎s‎s‎o‎r‎
1‎0‎8‎
W‎a‎t‎c‎h‎ ‎–‎ ‎V‎i‎v‎e‎k‎ ‎R‎a‎m‎a‎s‎w‎a‎m‎y‎ ‎T‎e‎l‎l‎s‎ ‎C‎h‎r‎i‎s‎ ‎C‎h‎r‎i‎s‎t‎i‎e‎ ‎t‎o‎ ‎'‎H‎a‎v‎e‎ ‎a‎ ‎N‎i‎c‎e‎ ‎M‎e‎a‎l‎'‎
W‎a‎t‎c‎h‎ ‎–‎ ‎V‎i‎v‎e‎k‎ ‎R‎a‎m‎a‎s‎w‎a‎m‎y‎ ‎T‎e‎l‎l‎s‎ ‎C‎h‎r‎i‎s‎ ‎C‎h‎r‎i‎s‎t‎i‎e‎ ‎t‎o‎ ‎'‎H‎a‎v‎e‎ ‎a‎ ‎N‎i‎c‎e‎ ‎M‎e‎a‎l‎'‎
9‎6‎
M‎i‎c‎h‎a‎e‎l‎ ‎C‎o‎h‎e‎n‎:‎ ‎T‎r‎u‎m‎p‎ ‎W‎i‎l‎l‎ ‎M‎a‎k‎e‎ ‎H‎i‎m‎s‎e‎l‎f‎ ‎K‎i‎n‎g‎ ‎o‎n‎ ‎D‎a‎y‎ ‎T‎w‎o‎
M‎i‎c‎h‎a‎e‎l‎ ‎C‎o‎h‎e‎n‎:‎ ‎T‎r‎u‎m‎p‎ ‎W‎i‎l‎l‎ ‎M‎a‎k‎e‎ ‎H‎i‎m‎s‎e‎l‎f‎ ‎K‎i‎n‎g‎ ‎o‎n‎ ‎D‎a‎y‎ ‎T‎w‎o‎
1‎2‎9‎
C‎h‎e‎n‎e‎y‎:‎ ‎T‎r‎u‎m‎p‎ ‎W‎i‎n‎n‎i‎n‎g‎ ‎2‎0‎2‎4‎ ‎'‎T‎h‎e‎ ‎M‎o‎s‎t‎ ‎S‎i‎g‎n‎i‎f‎i‎c‎a‎n‎t‎ ‎T‎h‎r‎e‎a‎t‎'‎
C‎h‎e‎n‎e‎y‎:‎ ‎T‎r‎u‎m‎p‎ ‎W‎i‎n‎n‎i‎n‎g‎ ‎2‎0‎2‎4‎ ‎'‎T‎h‎e‎ ‎M‎o‎s‎t‎ ‎S‎i‎g‎n‎i‎f‎i‎c‎a‎n‎t‎ ‎T‎h‎r‎e‎a‎t‎'‎
3‎,‎3‎4‎8‎
*‎*‎*‎ ‎G‎O‎P‎ ‎D‎e‎b‎a‎t‎e‎ ‎L‎i‎v‎e‎w‎i‎r‎e‎ ‎*‎*‎*‎ ‎O‎n‎l‎y‎ ‎F‎o‎u‎r‎ ‎T‎r‎u‎m‎p‎ ‎C‎h‎a‎l‎l‎e‎n‎g‎e‎r‎s‎ ‎R‎e‎m‎a‎i‎n‎
*‎*‎*‎ ‎G‎O‎P‎ ‎D‎e‎b‎a‎t‎e‎ ‎L‎i‎v‎e‎w‎i‎r‎e‎ ‎*‎*‎*‎ ‎O‎n‎l‎y‎ ‎F‎o‎u‎r‎ ‎T‎r‎u‎m‎p‎ ‎C‎h‎a‎l‎l‎e‎n‎g‎e‎r‎s‎ ‎R‎e‎m‎a‎i‎n‎
2‎,‎2‎4‎9‎
N‎i‎k‎k‎i‎ ‎H‎a‎l‎e‎y‎:‎ ‎G‎o‎v‎e‎r‎n‎m‎e‎n‎t‎ ‎S‎h‎o‎u‎l‎d‎n‎'‎t‎ ‎B‎a‎n‎ ‎C‎h‎i‎l‎d‎ ‎S‎e‎x‎ ‎C‎h‎a‎n‎g‎e‎s‎
N‎i‎k‎k‎i‎ ‎H‎a‎l‎e‎y‎:‎ ‎G‎o‎v‎e‎r‎n‎m‎e‎n‎t‎ ‎S‎h‎o‎u‎l‎d‎n‎'‎t‎ ‎B‎a‎n‎ ‎C‎h‎i‎l‎d‎ ‎S‎e‎x‎ ‎C‎h‎a‎n‎g‎e‎s‎

R‎o‎c‎k‎f‎o‎r‎d‎ ‎N‎i‎g‎g‎e‎r‎p‎r‎i‎m‎a‎t‎e‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎2‎ ‎W‎h‎i‎t‎e‎ ‎C‎o‎p‎s‎.‎

F‎u‎c‎k‎ ‎d‎a‎ ‎t‎r‎a‎f‎f‎i‎c‎ ‎s‎t‎o‎p‎s‎!‎


E‎l‎d‎e‎r‎l‎y‎ ‎W‎h‎i‎t‎e‎ ‎M‎a‎n‎ ‎K‎i‎l‎l‎e‎d‎ ‎b‎y‎ ‎M‎o‎n‎k‎e‎y‎m‎a‎n‎ ‎i‎n‎s‎i‎d‎e‎ ‎H‎i‎s‎ ‎O‎w‎n‎ ‎B‎e‎d‎r‎o‎o‎m‎.‎


S‎h‎a‎v‎e‎d‎ ‎M‎o‎n‎k‎e‎y‎ ‎G‎e‎t‎s‎ ‎1‎0‎ ‎Y‎e‎a‎r‎s‎ ‎f‎o‎r‎ ‎D‎r‎u‎n‎k‎ ‎D‎r‎i‎v‎i‎n‎g‎ ‎C‎r‎a‎s‎h‎ ‎t‎h‎a‎t‎ ‎K‎i‎l‎l‎e‎d‎ ‎W‎h‎i‎t‎e‎ ‎M‎a‎n‎.‎


M‎u‎l‎a‎t‎t‎o‎ ‎N‎i‎g‎ ‎G‎e‎t‎s‎ ‎4‎0‎ ‎Y‎e‎a‎r‎s‎ ‎f‎o‎r‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎H‎i‎s‎ ‎W‎h‎i‎t‎e‎ ‎H‎a‎l‎f‎-‎S‎i‎s‎t‎e‎r‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎0‎°‎
/‎4‎5‎°‎
0‎%‎
S‎E‎ ‎5‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎6‎ ‎|‎ ‎D‎a‎y‎
7‎0‎°‎
S‎E‎
5‎
 ‎
m‎p‎h‎
S‎u‎n‎ ‎a‎n‎d‎ ‎c‎l‎o‎u‎d‎s‎ ‎m‎i‎x‎e‎d‎.‎ ‎H‎i‎g‎h‎ ‎a‎r‎o‎u‎n‎d‎ ‎7‎0‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎l‎i‎g‎h‎t‎ ‎a‎n‎d‎ ‎v‎a‎r‎i‎a‎b‎l‎e‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
3‎7‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
4‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎1‎2‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
5‎:‎3‎0‎ ‎p‎m‎
W‎e‎d‎ ‎0‎6‎ ‎|‎ ‎N‎i‎g‎h‎t‎
4‎5‎°‎
1‎1‎%‎
S‎S‎E‎
5‎
 ‎
m‎p‎h‎
M‎o‎s‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎.‎ ‎L‎o‎w‎ ‎a‎r‎o‎u‎n‎d‎ ‎4‎5‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎l‎i‎g‎h‎t‎ ‎a‎n‎d‎ ‎v‎a‎r‎i‎a‎b‎l‎e‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
7‎8‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
1‎:‎0‎9‎ ‎a‎m‎
W‎a‎n‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎o‎n‎s‎e‎t‎
1‎:‎3‎9‎ ‎p‎m‎
T‎h‎u‎ ‎0‎7‎
C‎l‎o‎u‎d‎y‎
7‎1‎°‎
/‎6‎2‎°‎
1‎1‎%‎
S‎ ‎1‎3‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎8‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
7‎9‎°‎
/‎6‎4‎°‎
2‎1‎%‎
S‎S‎W‎ ‎1‎6‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎9‎
A‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎0‎°‎
/‎4‎2‎°‎
5‎4‎%‎
W‎N‎W‎ ‎1‎7‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎0‎
S‎u‎n‎n‎y‎
6‎1‎°‎
/‎3‎3‎°‎
0‎%‎
N‎N‎W‎ ‎1‎1‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎1‎
S‎u‎n‎n‎y‎
6‎6‎°‎
/‎4‎3‎°‎
0‎%‎
S‎ ‎9‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎2‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎0‎°‎
/‎5‎2‎°‎
1‎0‎%‎
E‎S‎E‎ ‎1‎0‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎3‎
S‎h‎o‎w‎e‎r‎s‎
6‎3‎°‎
/‎4‎6‎°‎
5‎2‎%‎
E‎N‎E‎ ‎1‎1‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎4‎
P‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
5‎7‎°‎
/‎4‎2‎°‎
4‎3‎%‎
N‎E‎ ‎1‎0‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎5‎
S‎h‎o‎w‎e‎r‎s‎
5‎5‎°‎
/‎3‎9‎°‎
5‎8‎%‎
N‎ ‎9‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
5‎8‎°‎
/‎3‎8‎°‎
1‎6‎%‎
N‎ ‎9‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
5‎9‎°‎
/‎4‎2‎°‎
1‎0‎%‎
N‎E‎ ‎7‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎4‎°‎
/‎4‎5‎°‎
2‎4‎%‎
S‎ ‎9‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎4‎°‎
/‎4‎5‎°‎
2‎4‎%‎
N‎N‎W‎ ‎9‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎0‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎2‎°‎
/‎4‎4‎°‎
2‎4‎%‎
N‎ ‎9‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎K‎i‎k‎e‎ ‎b‎o‎m‎b‎e‎r‎s‎.‎ ‎💣✡︎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

N‎O‎R‎P‎
A‎ ‎N‎o‎r‎m‎a‎l‎ ‎O‎r‎d‎i‎n‎a‎r‎y‎ ‎R‎e‎s‎p‎o‎n‎s‎i‎b‎l‎e‎ ‎P‎e‎r‎s‎o‎n‎ ‎(‎N‎O‎R‎P‎)‎,‎ ‎a‎l‎s‎o‎ ‎k‎n‎o‎w‎n‎ ‎o‎n‎ ‎t‎h‎e‎ ‎i‎n‎t‎e‎r‎n‎e‎t‎ ‎a‎s‎ ‎n‎o‎r‎m‎a‎l‎f‎a‎g‎s‎/‎n‎o‎r‎m‎i‎e‎s‎ ‎(‎o‎r‎ ‎a‎s‎ ‎y‎o‎u‎ ‎c‎a‎l‎l‎ ‎t‎h‎e‎m‎,‎ ‎n‎e‎u‎r‎o‎t‎y‎p‎i‎c‎a‎l‎s‎)‎,‎ ‎a‎r‎e‎ ‎t‎h‎e‎ ‎a‎n‎t‎i‎t‎h‎e‎s‎i‎s‎ ‎o‎f‎ ‎A‎n‎o‎n‎y‎m‎o‎u‎s‎,‎ ‎a‎s‎ ‎t‎h‎e‎y‎ ‎a‎l‎l‎ ‎a‎c‎t‎u‎a‎l‎l‎y‎ ‎b‎e‎l‎i‎e‎v‎e‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎ ‎o‎r‎i‎g‎i‎n‎a‎l‎ ‎a‎n‎d‎ ‎u‎n‎i‎q‎u‎e‎ ‎i‎n‎d‎i‎v‎i‎d‎u‎a‎l‎s‎.‎

S‎e‎e‎ ‎a‎l‎s‎o‎:‎ ‎N‎P‎C‎
T‎h‎e‎s‎e‎ ‎p‎e‎o‎p‎l‎e‎ ‎a‎r‎e‎ ‎f‎a‎i‎r‎l‎y‎ ‎n‎o‎r‎m‎a‎l‎;‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎ ‎y‎o‎u‎r‎ ‎a‎v‎e‎r‎a‎g‎e‎ ‎e‎v‎e‎r‎y‎d‎a‎y‎ ‎j‎o‎e‎ ‎s‎c‎h‎m‎o‎ ‎t‎h‎a‎t‎ ‎l‎i‎v‎e‎s‎ ‎l‎i‎f‎e‎ ‎I‎R‎L‎,‎ ‎w‎i‎t‎h‎ ‎a‎n‎ ‎a‎v‎e‎r‎a‎g‎e‎ ‎h‎o‎m‎e‎,‎ ‎c‎a‎r‎,‎ ‎j‎o‎b‎,‎ ‎i‎n‎c‎o‎m‎e‎,‎ ‎a‎n‎d‎ ‎h‎a‎s‎ ‎a‎ ‎s‎t‎r‎o‎n‎g‎ ‎s‎e‎x‎u‎a‎l‎ ‎r‎e‎l‎a‎t‎i‎o‎n‎s‎h‎i‎p‎.‎ ‎T‎h‎e‎y‎ ‎a‎r‎e‎ ‎t‎h‎e‎ ‎o‎p‎p‎o‎s‎i‎t‎e‎ ‎o‎f‎ ‎v‎i‎r‎g‎i‎n‎s‎,‎ ‎n‎e‎r‎d‎s‎,‎ ‎a‎s‎p‎i‎e‎s‎,‎ ‎n‎e‎c‎k‎b‎e‎a‎r‎d‎s‎,‎ ‎E‎D‎i‎o‎t‎s‎,‎ ‎y‎o‎u‎,‎ ‎f‎u‎r‎r‎i‎e‎s‎,‎ ‎a‎n‎d‎ ‎o‎t‎h‎e‎r‎ ‎i‎n‎t‎e‎r‎n‎e‎t‎ ‎d‎w‎e‎l‎l‎i‎n‎g‎ ‎r‎e‎j‎e‎c‎t‎s‎.‎

N‎o‎r‎m‎i‎e‎s‎ ‎g‎o‎ ‎t‎o‎ ‎w‎o‎r‎k‎,‎ ‎h‎a‎v‎e‎ ‎a‎ ‎c‎i‎r‎c‎l‎e‎ ‎o‎f‎ ‎f‎r‎i‎e‎n‎d‎s‎ ‎i‎n‎ ‎t‎h‎e‎ ‎r‎e‎a‎l‎ ‎w‎o‎r‎l‎d‎,‎ ‎g‎o‎ ‎t‎o‎ ‎e‎v‎e‎n‎t‎s‎ ‎o‎u‎t‎s‎i‎d‎e‎ ‎t‎h‎e‎i‎r‎ ‎h‎o‎m‎e‎s‎,‎ ‎h‎a‎v‎e‎ ‎a‎d‎e‎q‎u‎a‎t‎e‎ ‎c‎o‎n‎v‎e‎r‎s‎a‎t‎i‎o‎n‎a‎l‎ ‎s‎k‎i‎l‎l‎s‎ ‎a‎n‎d‎ ‎h‎a‎v‎e‎ ‎v‎e‎r‎y‎ ‎l‎i‎t‎t‎l‎e‎ ‎t‎o‎ ‎n‎o‎ ‎m‎e‎n‎t‎a‎l‎ ‎d‎i‎s‎a‎b‎i‎l‎i‎t‎i‎e‎s‎ ‎t‎h‎a‎t‎ ‎w‎o‎u‎l‎d‎ ‎o‎t‎h‎e‎r‎w‎i‎s‎e‎ ‎d‎r‎i‎v‎e‎ ‎t‎h‎e‎m‎ ‎t‎o‎ ‎g‎o‎ ‎o‎n‎ ‎t‎h‎e‎ ‎i‎n‎t‎e‎r‎n‎e‎t‎.‎ ‎D‎e‎s‎p‎i‎t‎e‎ ‎a‎p‎p‎e‎a‎r‎i‎n‎g‎ ‎t‎o‎ ‎h‎a‎v‎e‎ ‎a‎n‎ ‎o‎t‎h‎e‎r‎w‎i‎s‎e‎ ‎m‎u‎n‎d‎a‎n‎e‎ ‎l‎i‎f‎e‎ ‎n‎o‎t‎ ‎f‎i‎l‎l‎e‎d‎ ‎w‎i‎t‎h‎ ‎m‎e‎m‎e‎s‎ ‎a‎n‎d‎ ‎i‎n‎t‎e‎r‎n‎e‎t‎ ‎i‎n‎-‎j‎o‎k‎e‎s‎,‎ ‎n‎o‎r‎m‎a‎l‎f‎a‎g‎s‎ ‎a‎r‎e‎ ‎p‎r‎o‎s‎ ‎a‎t‎ ‎g‎e‎t‎t‎i‎n‎g‎ ‎l‎a‎i‎d‎,‎ ‎c‎o‎m‎p‎a‎r‎e‎d‎ ‎t‎o‎ ‎t‎h‎e‎ ‎t‎y‎p‎i‎c‎a‎l‎ ‎n‎e‎t‎i‎z‎e‎n‎.‎


(‎(‎ ‎I‎f‎ ‎Y‎o‎u‎'‎r‎e‎ ‎M‎o‎r‎e‎ ‎C‎o‎n‎c‎e‎r‎n‎e‎d‎ ‎A‎b‎o‎u‎t‎ ‎R‎a‎i‎s‎i‎n‎g‎ ‎Y‎o‎u‎r‎ ‎L‎e‎v‎e‎l‎s‎ ‎I‎n‎ ‎W‎O‎W‎ ‎T‎h‎a‎n‎ ‎P‎a‎y‎i‎n‎g‎ ‎B‎a‎c‎k‎ ‎Y‎o‎u‎r‎ ‎S‎t‎u‎d‎e‎n‎t‎ ‎L‎o‎a‎n‎s‎,‎ ‎Y‎o‎u‎ ‎A‎r‎e‎n‎'‎t‎ ‎O‎n‎e‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

P‎l‎a‎t‎y‎c‎y‎p‎h‎a‎ ‎c‎a‎l‎i‎g‎a‎t‎a‎,‎ ‎c‎o‎m‎m‎o‎n‎l‎y‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎t‎h‎e‎ ‎d‎a‎n‎c‎i‎n‎g‎ ‎j‎e‎w‎e‎l‎,‎ ‎i‎s‎ ‎a‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎o‎f‎ ‎d‎a‎m‎s‎e‎l‎f‎l‎y‎ ‎i‎n‎ ‎t‎h‎e‎ ‎f‎a‎m‎i‎l‎y‎ ‎C‎h‎l‎o‎r‎o‎c‎y‎p‎h‎i‎d‎a‎e‎.‎ ‎I‎t‎ ‎i‎s‎ ‎f‎o‎u‎n‎d‎ ‎i‎n‎ ‎e‎a‎s‎t‎e‎r‎n‎,‎ ‎c‎e‎n‎t‎r‎a‎l‎ ‎a‎n‎d‎ ‎s‎o‎u‎t‎h‎e‎r‎n‎ ‎A‎f‎r‎i‎c‎a‎ ‎f‎r‎o‎m‎ ‎E‎t‎h‎i‎o‎p‎i‎a‎ ‎t‎o‎ ‎A‎n‎g‎o‎l‎a‎ ‎a‎n‎d‎ ‎S‎o‎u‎t‎h‎ ‎A‎f‎r‎i‎c‎a‎.‎ ‎I‎t‎s‎ ‎n‎a‎t‎u‎r‎a‎l‎ ‎h‎a‎b‎i‎t‎a‎t‎s‎ ‎i‎n‎c‎l‎u‎d‎e‎ ‎s‎h‎a‎d‎y‎ ‎p‎a‎r‎t‎s‎ ‎o‎f‎ ‎s‎u‎b‎t‎r‎o‎p‎i‎c‎a‎l‎ ‎o‎r‎ ‎t‎r‎o‎p‎i‎c‎a‎l‎ ‎s‎t‎r‎e‎a‎m‎s‎ ‎a‎n‎d‎ ‎r‎i‎v‎e‎r‎s‎ ‎i‎n‎ ‎f‎o‎r‎e‎s‎t‎,‎ ‎w‎o‎o‎d‎l‎a‎n‎d‎,‎ ‎s‎a‎v‎a‎n‎n‎a‎,‎ ‎s‎h‎r‎u‎b‎l‎a‎n‎d‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎s‎h‎o‎r‎e‎l‎i‎n‎e‎s‎ ‎o‎f‎ ‎l‎a‎k‎e‎s‎.‎ ‎M‎a‎l‎e‎s‎ ‎p‎e‎r‎f‎o‎r‎m‎ ‎r‎e‎m‎a‎r‎k‎a‎b‎l‎e‎ ‎t‎e‎r‎r‎i‎t‎o‎r‎i‎a‎l‎ ‎a‎n‎d‎ ‎c‎o‎u‎r‎t‎s‎h‎i‎p‎ ‎d‎i‎s‎p‎l‎a‎y‎s‎ ‎w‎h‎i‎c‎h‎ ‎i‎n‎c‎l‎u‎d‎e‎ ‎f‎l‎a‎s‎h‎i‎n‎g‎ ‎t‎h‎e‎i‎r‎ ‎b‎r‎i‎g‎h‎t‎l‎y‎ ‎c‎o‎l‎o‎u‎r‎e‎d‎ ‎l‎e‎g‎s‎ ‎w‎i‎t‎h‎ ‎f‎l‎a‎t‎t‎e‎n‎e‎d‎ ‎t‎i‎b‎i‎a‎e‎ ‎a‎n‎d‎ ‎w‎a‎v‎i‎n‎g‎ ‎t‎h‎e‎i‎r‎ ‎a‎b‎d‎o‎m‎e‎n‎s‎.‎ ‎T‎h‎i‎s‎ ‎m‎a‎l‎e‎ ‎d‎a‎n‎c‎i‎n‎g‎ ‎j‎e‎w‎e‎l‎,‎ ‎w‎i‎t‎h‎ ‎a‎ ‎l‎e‎n‎g‎t‎h‎ ‎o‎f‎ ‎a‎r‎o‎u‎n‎d‎ ‎3‎5‎ ‎m‎m‎,‎ ‎w‎a‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎e‎d‎ ‎n‎e‎a‎r‎ ‎V‎i‎c‎t‎o‎r‎i‎a‎ ‎F‎a‎l‎l‎s‎ ‎i‎n‎ ‎Z‎a‎m‎b‎i‎a‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎C‎h‎a‎r‎l‎e‎s‎ ‎J‎.‎ ‎S‎h‎a‎r‎p‎

.‎.‎.‎.‎.‎.‎.‎.‎

W‎e‎l‎l‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎d‎o‎ ‎s‎o‎m‎e‎t‎h‎i‎n‎g‎ ‎t‎h‎a‎t‎ ‎i‎n‎v‎o‎l‎v‎e‎s‎ ‎r‎a‎p‎i‎n‎g‎ ‎t‎e‎e‎n‎a‎g‎e‎ ‎g‎i‎r‎l‎s‎ ‎I‎ ‎g‎u‎e‎s‎s‎.‎ ‎I‎'‎l‎l‎ ‎s‎e‎e‎ ‎y‎o‎u‎ ‎q‎u‎e‎e‎r‎s‎ ‎t‎o‎m‎o‎r‎r‎o‎w‎.‎ ‎N‎i‎g‎g‎e‎r‎!‎"
93P8mYVd,Untitled,BayangBec,MySQL,Wednesday 6th of December 2023 10:27:22 PM CDT,"select id from epustaka_catalogs ec where catalog_id in ('bf4d331a-e570-443f-9a5e-c6108eb9e4fe',
'fa3dac8e-2293-4fef-81e5-b05d2848d469',
'04e31954-fbc1-4363-ba60-49bb3fe662bb',
'a1d68e36-2082-48a5-888e-b3949f11ab11',
'585ecc32-78ab-43fc-a6fc-e4c3d3b868f3',
'5ec63b40-8dc0-4731-8653-5d877d43f3d2',
'c69b9155-0a03-404c-b149-abbc16ee5eff',
'25de9daa-5bdc-4afc-939a-53991e3246c3',
'c9bc7d3f-5dd8-44d5-9fb9-9d9ed577f6f2',
'1ff1a794-26b9-4e80-b455-d7dc94389004',
'a5a1270d-5577-4b32-9d81-ac0628fa5d3a',
'959cd581-d022-4182-b464-e57e784048a4',
'494b8de3-5c07-42dd-930b-e6886f01df27',
'9d1c8a96-c5c9-4d19-a59d-cb447064928a',
'fd6a05a0-4c2c-47ef-9645-3d99e086de29',
'8cf8b77f-d08c-4084-835a-8d4fa3ce20e4',
'422c4774-1c43-4bee-b608-13f98e9b770c',
'e4c7f38c-c811-498d-ac6f-bdc33373714d',
'856b3772-a1e7-4a93-af2f-2076ef42288a',
'eb33e228-acc1-44c8-92b3-6cdc0d823d39',
'97265eed-8900-412f-b974-52baef51c7e3',
'1d39dc83-a3ec-4c10-b967-9ed748cb1c7c',
'31e7393e-dfa9-420e-9e7e-62b9f09cd4be',
'6da123c1-a534-4965-9442-3271942b8b59',
'9409dee1-1233-42a9-82bf-ba81313a04e6',
'59cafb98-308f-45b1-a8f3-19cf0c28a1c9',
'7a122e3b-c501-448a-a1d7-7cc9c8ca126e',
'0930b78b-7ea3-4a0a-9574-5a1659f04c26',
'9e7f8b34-8f7e-4ac8-a4d0-86822c6ccd57',
'14f9f10e-21dd-4cbb-9e88-83df77c432b1',
'539bb41f-0182-4a0e-b43c-eeb212dcb874',
'd8258782-0ac4-4491-ad11-1facb158efb3',
'dffeac5a-178f-4f08-8fb9-c909ea0d42cf',
'd04cdb09-e315-4549-919d-a647842e075e',
'018c7297-b83e-4717-943f-ff9abd7ac4a6',
'0d0cd15e-2851-47c1-a5ff-2146cd7282a7',
'6305c4d4-a65c-4ee8-bf47-9919a6d5ac18',
'635ef6ed-714f-4dfe-b680-d1c8280600af',
'ee131c39-84f8-4b46-b5f8-6ba91d56ea22',
'11fd06f0-aa06-4b0b-8218-e90685604013',
'4866684c-0376-466d-8cdf-99cf20a59d86',
'd343af3a-9d71-4528-ac74-b0dfbb8fffc7',
'090c091f-7f45-4342-ba2a-04f69f7bd050',
'9873d4fe-f66e-4015-ad2c-db7530f933f2',
'3c61be9c-9197-4401-84bf-3c6f41f04395',
'ea5c6f89-894a-46d1-a9fb-cf478e67b729',
'49e35a2b-2a53-4baf-be48-c26309c6e62f',
'adb6475f-a62a-46a1-978f-49313c655490',
'57427a23-b31b-4e09-895d-87a3473b9fb8',
'626fae8c-4e2c-4cf9-8154-d82729057012',
'ea6b1253-36aa-4518-b27c-7860227ea569',
'e9eaad74-deb1-440d-88f1-fb6bfbad70da',
'91bc83d5-be21-438f-8321-13503c1556b1',
'51fbc719-8ec7-49a3-930d-27c26656eff7',
'62d7a605-51a3-4c4f-8d19-b113aa72ff5c',
'502b71fd-527c-4936-8855-2439a0a9f62a',
'084da35b-1fdb-4801-b76d-d74da459cee9',
'5651d8ef-e42d-4178-aecd-ae6e609f210b',
'87c3abb2-7626-4d0c-a1ec-881bc7f1ce78',
'3181492b-00d8-4d75-a57a-b5e2c7378165',
'1a4abc57-72b8-46e0-9104-45d0d497d435',
'31beb849-9778-4149-a716-9832f95ee8b7',
'1a5204d9-8a6a-40c7-b571-76dc6c803e91',
'19955023-5731-434d-b62c-3cabc165e988',
'f398ed9d-56af-4059-9d82-0973f27d7b40',
'a35bc816-9b83-4d76-ab56-62af37d1bf22',
'd0bd022d-58a5-4d1f-aeb5-37c8b832c083',
'8b78c278-b2ef-4d7d-9121-817713918fce',
'17ed7789-2051-4644-9145-37c7600da8e8',
'030fb9e6-9aee-42ec-81d8-4038cc6ce608',
'06bd7c97-1f82-42a6-a472-e70e9344a495',
'8b30996a-3e66-44b6-8588-8d0f68bb984f',
'991fbc6d-fc12-458e-9a75-99297c6b82e4',
'29ec24cb-7da3-405c-bf62-d7d35a33bbd5',
'5e755ca1-1568-4f9b-a401-3897004e69de',
'1e32e956-8b62-4f0c-82f3-a647f0eb69ac',
'10644600-67ce-4110-9700-b3a0a94c2309',
'220dd100-017d-44c1-b0b3-41f7dabbcabb',
'27ea457f-bbcc-4bb0-ab59-fd38b958c5ee',
'66455611-d910-48bd-86fd-67c79d4b5868',
'6bb97dc2-1d37-4e20-b06e-6d652849080b',
'ac558ce3-5e12-4a62-a1f2-65765e194622',
'e0fa4988-57b2-4a76-beff-70acb5895b14',
'a1a1aaf3-d841-4e99-a87a-085aa76639d8',
'7b30e1de-5d5d-4f9d-80b9-7bb37507844b',
'4d84de98-ccc5-4279-89e3-ac8c73a54e4a',
'85be9484-eceb-48f0-ba76-983862a059e3',
'288d5dea-fccb-4971-91b5-8383763c3e2f',
'c7730cf9-113c-433e-8878-2ac0b49c45c8',
'ff5c02b6-90e1-400d-8aea-32ee0210e9d6',
'9ad4776e-636d-419d-9ec9-d458fc9d5d5e',
'8cd45865-69f4-4396-aa73-e63f355dd067',
'a474f0d2-dd4e-4bee-b794-0e45db7cc3fb',
'6772e689-7cd2-4f11-af50-a81b584148ea',
'3a31db66-a775-4722-ae8e-601983e10d68',
'63abbc12-f9e6-497b-b25f-913866ef3a5a',
'6f673c6c-0780-45d0-b781-e6629150a5c2',
'416b46df-8711-47fc-83d7-6d30b1466ff8',
'b36c7fa9-2900-41ca-ad28-e1538be31e00',
'6559a805-e425-440c-9914-d8d251f610a9',
'1409ea2f-f5ad-4bab-9e18-34dfcb80069a',
'91e41a60-d7df-420f-b194-48b870d1d594',
'a5e5ecb5-235b-4255-9a39-9001832e88ee',
'30f13492-545d-4892-af8f-727bc4232b0f',
'eaebfbed-3a49-402f-9793-4202ed456e36',
'6a66e63f-4d38-4f63-a670-ddaf49719359',
'91655bce-618d-4542-9a0e-c5a381d248eb',
'5c3fccb4-b64c-4bf0-b4d7-330c21d175b6',
'6046dd18-e7e9-4ef1-a192-b02e5b862172',
'bc6183d7-0cf9-4e28-8805-4286023b47f0',
'eba6fba4-b196-4dc6-b7a2-273c1348e722',
'd78fa274-5b1a-487b-8718-e4a3412e885b',
'bae6c20a-b602-45c8-98f6-e33777861a00',
'9f9f545a-1c55-4823-9103-ab0b4159315b',
'aeceb1a7-83ce-4edd-9411-e99c135232bc',
'8ea825db-b7a6-420e-bae8-28d3fa69f80d',
'7e61001a-cd9b-449d-b2a8-a0336832904a',
'f824c56c-71d2-4a4e-aa46-6464a78b6024',
'895b0ead-e04e-4549-821a-b75c863642c0',
'484f0e2c-7350-48de-b052-63005a6d080c',
'0281aee6-c0df-4245-99cf-6cec1edce8ec',
'dc66cc2b-bd42-4111-beca-12101f1f619e',
'fa9a717f-2197-4e92-8c5c-cfba737b9c24',
'15dba99c-e1df-49e8-8b8a-ba765b168bc4',
'dae4d3b5-e625-4969-8f46-cf2c8d05104f',
'e25f4a41-3b4a-4eed-9197-9284c1c426c9',
'2cd41865-6451-4bc0-b9e1-fa1aacabeb8f',
'67adbdd1-2599-4e36-a41e-d1c8d0cec561',
'717813a3-6bf9-4c7b-8957-a90cccb91ea9',
'52a398bd-7a00-4f29-9f54-1bbe6d13d560',
'7193bbcb-965b-42c9-9af6-44e89d515f2b',
'e75784f7-0f7e-4430-8fc0-780254c4b965',
'9cd65a40-7605-4cb9-a134-c991a4851c03',
'3c536bed-036d-409d-ba35-f32f59d2db66',
'0ba59bab-98b2-4393-aced-de7f4183208e',
'72e9d809-a9bf-4992-b563-c74774a5e447',
'aef48cf3-4caa-445e-8966-b75e726ed27c',
'd8c6a61b-b490-4155-88a5-2d6aa8546f6d',
'8f7942a4-9a28-4cc9-a042-77bc11ee2a07',
'3871716b-075c-4108-86e7-3726841aa71a',
'069e444a-404b-4166-9bdc-26700a6781fd',
'21ac6e09-2a1b-4d8e-b2ef-2132d46919f7',
'11659c9c-7649-4cb7-a824-6da26f1ec774',
'4c12af4d-0f92-423f-87df-c29d4d7c0903',
'cfafb927-7101-46ee-b1de-5259ae6e700d',
'd345fb7c-da36-4b3f-8dfc-2a5de99a652f',
'dbe1c04b-1e43-44e4-8d6c-a824202a571e',
'6150bdd0-98ce-4003-b0b4-2ca2264f63fe',
'2ac36d3f-7066-4d3c-b1ae-11c65ad71acb',
'b008541a-de39-477d-a137-103d2bd72562',
'9a0e58ec-9c55-4e39-9bb2-b82da3910e0d',
'7481c1c9-06e5-489c-b4ca-db7d94c9dd78',
'0c5421c3-4e34-4f41-a416-e01dbc7d6f49',
'50f551c5-b89e-485d-9391-9f6e2a649fdb',
'09c9e000-09fa-415a-ac4c-6dcd1a3452fd',
'adc6bd53-6983-4b19-aa0a-d2d21cbadc48',
'45fd4fdb-9460-43d1-9311-d75befa4f71a',
'f4ec3f46-5f7d-42ab-aacb-53876d613bdb',
'355b2ea6-a3c4-4500-bacd-eec8b1b3501a',
'4aa8acfe-7a20-48f6-951c-a560fc6f4fec',
'b9e4d1fc-8c22-48ca-bc72-2c59b73ebb33',
'9eeecc8a-331c-4986-8c0e-d1fe7481250d',
'3c9fc84f-4b08-42a3-9492-9fa999356bda',
'09d013b1-6ceb-4c74-b868-b98cb9223b0b',
'4d13f630-0fd3-44c8-8120-9e072ebd4d69',
'4ef06022-fe1c-4e23-916a-d3717c1fc48a',
'0beaca6e-23ea-4943-ac47-ac2ad7770e42',
'7497878e-e998-43ea-84c1-baaee4b25e88',
'a5c1bb41-20f2-4fd6-bf5a-3528be8e6943',
'b7270986-709e-4700-ae01-883a0f834a51',
'9ec3a317-14f4-457a-94f1-51ceaf0f0c19',
'8252e362-434d-4345-80c3-d026c9ff501a',
'309ed4d1-78f9-4b9c-a938-da6f2c7d1aee',
'2a7511c4-cc29-435c-9d04-696b76b7f5a7',
'102022f5-c408-4e47-8b17-a32453c4f8b2',
'dfbf31ed-446c-443f-b7a8-f6638ea74863',
'cd1a5b7c-a486-41d0-bae9-5d920df85c3e',
'3ce47ffb-d84f-4465-b4b4-9edb6ecd2986',
'7a2aac11-02e7-4f9d-83f5-c8daedce4fc9',
'f217aab4-fc83-448c-9f85-ac5a1dc1d132',
'59a63533-c700-4942-bfe1-9e0519260f75',
'de340809-8a6d-417e-b19a-e43412eff0e2',
'c66f2651-1803-4886-8c1f-4c7ab963e006',
'd247a1e6-0358-47b1-ab63-5b1b1b23ba1d',
'b42ffc67-3a29-4bda-892e-45698ec8c0ca',
'd1219771-7051-45d9-9110-ba203063a4bc',
'9d1c0d80-64b6-43b3-834b-d8c7971413b0',
'5113c44c-5295-4824-aa12-a9b72417aff5',
'7ee1e7d5-2bef-44c6-8afb-d7ffd22c8531',
'f7d1b770-6a1c-4c8b-b6a0-01ccf2090cd1',
'743d4158-f64f-430e-96e4-d79a9d14f2ca',
'864e758b-8a3b-4945-9915-eebd364989a5',
'a3ec2174-9a58-45a8-b226-fc6a9bc02fb3',
'086e5521-e833-4537-9cac-2595d271e824',
'c6c375b8-9ce5-45f8-ab7b-b32ef48bbb30',
'8e564037-de0b-466e-b129-697c5d04fdfc',
'5019fcbd-ea3f-44d8-8f58-675bdfc62f7d',
'94c20960-7939-4c33-8cbb-dfc19041da50',
'c47e2c3a-406a-4367-aa3c-4ac4656e5d16',
'90c21d56-db3f-489a-9963-f110e2d5f12d',
'7a80aef7-8f0c-48bf-b47e-2ad4c382959f',
'3c5c0c80-8bad-44d8-a832-8efc5d15147e',
'17c0fbd6-4c80-45b4-bf87-7220ce6105cc',
'80a31140-1611-49e8-9382-eb3f07ea7ea4',
'5fecd8f2-c336-4045-b755-1d3db00a3572',
'24d3890d-b73d-4cd5-a3f1-3a9b02b35ef1',
'a1c4e9a0-28cf-4b7b-bf87-6665fcca6655',
'b6b73ed4-7abb-43d5-97bb-0e9a6ba33adc',
'86f2a5f8-75c4-48ee-9565-7c01984e3202',
'39c2d349-e7dd-4de6-8670-f06b81413bba',
'ba184453-1611-4c71-87e4-dfb499f8a3f4',
'15719362-2d8b-4b92-935e-acf5818ca05c',
'8c817064-2516-45a8-99fd-98489df76bd9',
'4a079dca-43c9-4aed-85d6-a796dfc3b246',
'02b2686e-ca38-4750-a804-e7533e573994',
'6dbd409a-82d8-43ad-9f82-da0f6ae6d35c',
'bfd203fb-c40e-4deb-8b77-d655e6110ca4',
'26789afd-ec0c-446e-bd28-8cfd856dda56',
'427c88d2-c33e-4665-94c5-ea27dc4e8169',
'7bcf7df2-75b0-4334-9e7f-3cd9ccee1da0',
'2e91d9fd-dc4c-489f-8760-abaeb30c212d',
'ef6bf682-a4a2-4135-a690-c0626ad7c25f',
'168b5a68-1841-4255-bc69-2223c22f4183',
'7a1be21a-965f-4238-99c0-d605239f8fe9',
'3276add9-ef9e-4804-bfce-5e5f1e23c83d',
'147674b7-f2a5-422d-a832-afd9b42b6b22',
'a24b958b-cd1e-4dfc-9ec6-be93450b763a',
'12b9d957-163d-4d35-abbe-073bedc88d9d',
'002976bf-8bc4-4454-8da3-8a5bbd33ab11',
'ff71fd36-4aa3-416e-af6e-6e3f17460adb',
'abe91306-c86a-4301-bad1-18fe1edd44de',
'0d78d402-870f-4ab1-a3c9-9c1aed91c60c',
'db05b46f-3f14-4b1f-a661-5cfa7be411f5',
'f63dc7b1-6632-4380-a55d-8bcca2da9015',
'5bf420cc-957f-4e8b-be7a-ccefe21592f3',
'0824e23f-2b7f-4304-bbde-a6588e2c138a',
'5334beee-eea1-452f-9441-b1fed52fe6eb',
'974aa955-00f7-46d7-a4af-4a2957c11039',
'a3ab1295-d3a3-4aff-9508-43017d8f66a6',
'f87f090a-8242-4f66-af05-e327a306b8bf',
'6dd19655-08d8-4806-8d37-cc2efba1e85f',
'b9827ab1-820a-49fc-a1b9-723e1cc36529',
'6af02248-0261-4638-bb9d-67e914736741',
'eb3a967c-72fe-4163-9da9-d94296523d88',
'fadf38f7-3e59-4245-9914-02ef9fbf5672',
'b646ab8b-f7d7-40b7-9e3e-f517bbb45a31',
'56b24264-dae2-4b60-a845-3f7ccf588607',
'7b111dbe-73a9-448f-8050-ef2c1fa352a2',
'29a2b6dc-eacc-4dd7-b163-768f0b6a7a2d',
'2a97ff33-2f04-4f5f-96e7-2dcb527b0ea7',
'83ac58f6-5e1b-49f3-831b-10a3457dfca2',
'2b378031-e370-49d3-83db-c311dd7d2705',
'd09b48d2-8376-4f5b-953b-52631e3fd370',
'b283a019-4a4c-4a57-873d-568f5eaa94d3',
'd5274654-cab1-4d8b-a5fc-3b26ba9f32b1',
'05fb8a8e-50cb-4445-a1d3-de01a15d0e6f',
'fab04c62-3ed5-4911-806b-f9f45af45539',
'd11ace25-0d57-4f05-993b-cf8a52246bea',
'2f4cf40e-a9f6-4a8f-a5f4-28d41a3ab493',
'1acafe8e-9bf2-4cc4-a638-a5265dd4e8fb',
'07aa4eb4-c9f5-40be-9bab-66ad2b549464',
'bfbafc49-03a9-4e93-8c15-b9caeaa4d1e3',
'9c3e55fb-ef84-45b0-99d2-463bc6e24c92',
'0bd5288c-69bd-4cbc-b046-0113524bcb0c',
'c1d53f06-c40c-4545-acb3-8e00ed546a13',
'883edf94-ef68-4e9c-8559-429e9c3cb9e1',
'f5fc4c5c-fc87-4c8e-8f9b-0bbc36bf3440',
'659aa09d-1d53-4ee6-8b93-41ebac4b0874',
'e61959f5-1cfd-48b9-ae20-729ad2aa55d8',
'c9471aac-3fee-44be-9ffe-741fdd541699',
'53007a68-f5ee-49aa-9de7-6a2f066bb194',
'89474bfb-0a87-4603-8c2c-a2f155885416',
'fbca386e-0089-4fc3-8050-eb9278529f18',
'31d45bba-71f4-43f7-bfe4-ac1d29579f9c',
'5bb7b18a-3620-4b91-9f6e-b55b64c55acd',
'acc5ee3e-75c9-43bf-8828-66f98da0afcf',
'd7e874c6-1ee5-40cb-9f84-55cb08140e67',
'706193de-9127-41d2-9ab5-a83d56dae409',
'2172487f-a7f1-4ca1-be71-38e9f10b42bd',
'3bd95bcf-2a85-4c7f-8e0f-9d399272d77b',
'a1ec3e9f-b98b-4d18-9963-3713d5cadb43',
'c8412212-8ac9-47e7-a3ef-7ce6849b2c3e',
'17cbb16a-b190-432c-87fe-04292f3c06ed',
'0ee0be58-ffd5-4871-a147-d2a2afe9ff88',
'58e73fbf-204d-4264-90a2-b391e0cceb9f',
'a4eef487-cd2a-4ce6-9859-624f12ccc528',
'e2c1c38f-f972-4805-a24d-dc00b23561a8',
'b4aa0e77-ded2-402a-ada3-54a6cb28c9a1',
'05a1032e-59db-4a0d-a1c0-5d20d851aaad',
'cb8208a2-88b6-4439-8da5-080f24596836',
'35247211-ab7f-4794-9cde-c9265cd6f897',
'ab61fe0a-d526-43a5-ae15-a60acd64e725',
'752580de-908e-462f-a316-344cb628bd9a',
'2f9b7a85-57a4-4375-82e1-0b3b865b4479',
'bb4dbae2-5079-4c40-a5c4-ab9acb94f2ce',
'338305cc-fafd-42dc-9a8c-ee6d135debba',
'e6b5bdcf-1a33-4986-b2d0-bfdb96d1c65b',
'4caf319b-89ac-40f6-a994-599ad8debbc4',
'5cc59f3e-31ef-4b32-9674-955193986c42',
'c2feb2a9-4c22-4e5b-99bf-b1729f419e8a',
'2bbb6927-e357-4b65-b714-53b349dfa6f7',
'7b1eba4e-59ee-4fdb-823d-e9fd581bc419',
'65281850-77e3-4d34-b05c-8924cb0e0e4b',
'44f9f9b7-90ac-4fe6-906b-d3559dad483b',
'2aea853a-3bbe-452b-a98a-5e854de4e8b3',
'e2130c42-def1-4e07-b3c9-46438b0085cd',
'e9430806-baba-4b20-bc01-ae01047cadfc',
'efaf6d56-649e-4fe1-9208-d50fca203f51',
'2bef2ca9-3007-447d-8004-22e68222227e',
'fbb76831-d410-456e-adb4-5bac8932f478',
'2bdef041-0c3c-426f-9469-793dc31e0e4f',
'39706b57-b615-4788-affa-479b0bde0218',
'bcf9dfaf-c0f7-45d8-a87d-7f35f880104b',
'4b84ac7d-9eb8-464b-a206-72aa4d3964fb',
'39fabd5f-8401-41df-9511-d4dee8f2b02f',
'df811b4a-d7bd-457e-8589-5f0a16920a5f',
'6366c443-f9e8-4923-b38f-2679046bd215',
'f5f3f9b6-5a09-4054-98b7-c412b0bdacbe',
'2935801d-fe70-4f8d-8068-43132b3a4f6c',
'44651c9a-dd34-414d-a671-9376899a4aa3',
'0603dd97-33a9-42f3-b247-893d5c778ca9',
'956f0137-25d7-4d68-b0d8-d3c6f35248c3',
'99485184-887d-42c2-990e-4f71329c33a8',
'1cdc8695-4258-44b2-9ef3-9a31fce1dc8d',
'040614f1-0283-4378-8aea-e8cca1583b9f',
'72087d23-2c42-4c09-a966-316dfa133448',
'd2eacb1d-c853-4404-a88e-12358e0b5ada',
'b8a2a78b-9c96-4d8b-8287-c67a44cc4941',
'5ce643b7-2175-485f-84d5-437b1ec53343',
'7394e65c-056f-43c5-b765-fe4de609c4c1',
'd4d59e81-1888-474d-9099-2f72903b66fc',
'4e361270-88df-4d00-a881-9e9b3d875784',
'bd5cca45-6d86-432c-a94f-7b807ea769f3',
'300a24d0-eb2b-4f03-ad25-99485a2e7855',
'6cdc48fb-1f91-440e-a4ba-224e9619db80',
'674df5a5-b9eb-49a3-ab54-58f990c2fc5a',
'712031f6-7af9-4eae-812f-a28ccc43d5e0',
'1e01fa30-54df-4d7b-82e5-d50297626457',
'3ac50739-c176-4008-a9cd-3fbdf73deaad',
'1ef87bc1-a908-4f72-8840-974c0ab366d3',
'b6473d5b-4d66-435c-8a1d-34bfbb1016f0',
'515d8792-ad86-4481-bd02-4b05bf65dfa5',
'94430a0b-674f-436a-a4e1-3466c24186c0',
'622bb9d7-3de3-4d52-8d61-9dc9ac088590',
'cd829d01-b349-44c6-a5d4-0d4406744a25',
'cbd73055-4f11-4fa3-9644-11e2589d23fd',
'0f63ab81-8afe-4aa3-9880-7bacd8861086',
'b410cf87-97f1-4450-84d9-b5246895bd5e',
'9dd57428-08e2-459f-9652-510d62f31437',
'bfb3f6a5-bb3c-4154-8596-745d459d80b8',
'ec389a47-d17a-4ab6-83bc-190522523cdc',
'59e33200-4f4d-4ec9-8b9c-7ec724289c04',
'7eb9be1e-f0ab-408e-88c0-cb1486f31ff7',
'80f1d134-6ff1-42c8-b150-4b45f81fc173',
'04fa9459-1402-41a9-a448-783640ba4fab',
'69669d82-a320-45da-bf3a-f6fb109b29ae',
'3d5fe829-b2c6-4ad3-ae66-75ef03bf41c6',
'24531812-3039-42f6-97fc-8afab7c96574',
'e1e210d5-6a97-413d-ab69-f4e5ee49ac92',
'8434a0ae-81ea-4ddf-969c-a7c5ef4c1d3b',
'2cf962ca-dc1d-4a1f-ad3e-853e0b57518a',
'fbf328e1-f3b1-45c1-88b6-bba6d42a8c5f',
'8c326891-eb17-4709-a3b2-0a58107f375e',
'b88cea93-e930-4d8f-938e-b54793b6b51d',
'8db23a54-2f59-4388-bffd-c33d95cc16bb',
'47d38609-67a8-4907-a593-f4d2f092259d',
'2d354b6d-8e5c-4c72-917e-f92720a51e94',
'876893fd-e513-4ece-9fae-0e73a2a7882f',
'ebdfdeef-29a1-40db-9522-75a68e0e75df',
'f3a9a288-3058-4eac-8436-6ad60ac08460',
'7b8348de-cc2a-4288-9cba-8345c791106c',
'e5ced4e2-43df-4906-9a83-4d39002b984d',
'c6eda1c9-1874-4100-8ffb-69b0f69dbee4',
'b176dfd1-b906-457a-95f8-f817fc718995',
'517b49b6-b3e5-4eab-8c1c-0bb56a384e59',
'c0d526cb-1827-45b6-9906-f34086c0a796',
'384cb1f0-9457-4e9c-952f-9f863f1c158a',
'6b69b1bd-dc2b-44af-be88-93c1a4af79cd',
'd6387340-a26d-4864-9caf-0661cd17a5a1',
'1e5284ae-4e7c-4ef4-9903-d92ea9757fec',
'2f7edc25-c097-4338-b328-6e9997bfd8a9',
'1be0af4a-8caa-4ca5-a52f-bac1b13bc10f',
'f70f5b32-30fc-4b7e-b396-b1a6ba1a0cb7',
'c3dae834-8d3e-483d-a855-4a0003cb92e4',
'44834786-cb7e-4971-b961-927ef42bf0e8',
'9fb34195-25d6-471f-9c6a-87a50dade268',
'1d90d0f7-355f-47ef-a10f-bb84ca0ab5e4',
'0540f633-644e-4065-ba46-75e1d1e0547c',
'83455ded-a14d-45a8-bb42-dbb17bdbf590',
'8e57a3b3-311c-4d28-aa01-b33812136b1e',
'1525dc9f-1144-47d0-99e6-94f60f777cc2',
'7dffcac8-be93-4a33-8b5a-b1d9e6d38f4f',
'36d157c5-94a7-4409-ae1e-bfeade76422d',
'8436f998-d947-454a-87f4-67c49eda39ac',
'a9756b1c-1cdd-4915-8d88-0da4c7d89beb',
'3d2cdc32-8ce1-4e11-9426-8477c996b4fb',
'8cf3b40e-62ab-42f8-919d-d9587819464e',
'403ace64-264b-4992-8041-b97640e69a30',
'4adac8f7-6b0c-4a93-b779-f3615acc6824',
'7e94fc34-18dd-4e8f-8bdc-b4bd6c4268ac',
'6122c9b7-b404-4fe1-a9e4-1a13435e3a44',
'b7e65ebf-a1c8-4f5a-88cc-d7f29f7de2d4',
'2c88b034-e22a-4bb8-a1e0-a37ca7a590e7',
'6837b9b2-3d50-42a4-90c8-217842e4d297',
'27a9011c-3d4a-414c-aeac-4a5dccaeb0ad',
'874151c3-5fba-46dc-abe3-5ef0e8244702',
'357685c3-f69d-4c2d-8988-2b3b008e1502',
'fd2b9351-56a9-478a-9a61-8ca303818fd5',
'bd6d008a-f5ee-4cfe-8b7a-222e4c1a214a',
'f01f0dd2-e055-420d-9ee5-5d31026bdaeb',
'd8ff399d-42aa-4014-bc5a-ef04ee3c6ea7',
'6d2f2900-72e8-42fd-b79f-fcbed5dfbdba',
'c11511f4-9a86-4cdb-a37b-7fd9a5aaf74d',
'791db6a8-b37a-43ed-b6e1-8fb42205de90',
'484ff792-2093-419c-b199-5ecc051e4c78',
'0bc09144-8417-495b-9b33-c4bfe8b11024',
'99b6a765-fcac-4709-a844-8faf735c9359',
'2e73df13-c719-4dc3-bcce-a2a64f5b2f29',
'a14837a3-3c9e-4bea-9a17-afc167e71928',
'eeca6201-6b98-4f3a-af7b-7d3c355aa8a9',
'0222a0bb-1263-4d19-ab1e-7cc6eabe92b6',
'1e4e065e-eade-458f-8a36-45ab7e71531f',
'cf1d34d8-6bfb-4302-9adc-e333fe9c0e0e',
'd188d668-9c0b-475c-9c52-e7294edc732b',
'be1f1aab-d438-4174-9aba-afb9dc5b5d86',
'11d6fd4c-bd20-4bdd-b3f3-f860e14d544e',
'9c5955e9-ca38-4b9a-b79f-961759ebda7d',
'9cb18e23-1a1b-453a-8545-4876671b6547',
'63d38616-0ac4-492e-8f79-be7e2e74d32f',
'dfc2014e-8d72-42a9-bcba-41008cbff138',
'8c571db0-5a09-41b3-be3b-5a53c5a206fc',
'c57226fd-1285-4581-bca0-b21cf8d877ca',
'869dabf8-8e84-4172-aef9-56d3ae8067b8',
'7132a14b-1ecc-47f0-90fd-c0395826b5bf',
'c91e0c99-6766-4745-b4bd-ccb67f800a17',
'419063d4-af32-46ed-84d2-2bf54a3f4a34',
'b057565a-031d-473f-98e4-f95ece5d17e3',
'457cc963-c0da-4a40-9aa5-99aa12c3a14e',
'5c50d641-7a42-4bc0-9b73-a56c188c1491',
'd0fd6235-04c9-46ea-a573-ba396415c184',
'b63135c1-baaf-42a0-81e2-a9caa3d14851',
'fdbc5460-6511-4036-b64a-e957591f91f7',
'a47de07a-4cb4-4913-9631-e9b0cd7b158d',
'1fc11e7b-12d5-4a53-95b3-71a9cad0b880',
'b80e8457-10c7-45f9-a61d-3c03196197fe',
'a8219561-f30a-4cbb-a521-05522db76680',
'2c21a66a-aa8d-47b2-ac8c-bcc2998925bb',
'd61bdd85-d42c-4b1e-9229-f09153ef91f0',
'90e65667-8e91-4532-9c0a-6e683a9dafbb',
'ae3def78-de94-4678-b9be-3ec218a89e1f',
'672a88bf-580c-44fc-ba26-510f1be17e10',
'57b7de7e-b086-448e-8a82-1bc58912c1c6',
'5efa3978-6e5d-47bc-be1f-ec06ece47d4b',
'b13b52da-280d-4e02-b629-79b9d7364e50',
'1b684b45-2390-4112-986e-ebc329164c3b',
'3af4c23a-d62e-4e6b-8383-be60a729e6cc',
'81614835-09bf-4c8a-bae2-95d489dd36f6',
'c5930f0d-5fa8-4556-b5ce-0d76d424d21a',
'7803bb60-63df-4c43-86dd-17de07452a63',
'dc12c26f-31d9-4033-8edb-9e4c3561b1c2',
'44c8930f-ec11-48e8-b1be-af2472069036',
'6ca50230-675f-4c57-8eb1-90249c722eb2',
'64593e47-0baa-4927-951a-683bc505b0ff',
'642baa3a-e7c0-4e0c-9ba5-581541a29435',
'b2ea242e-5009-4ea6-89a8-a9ebce1fb609',
'943822d5-e0f2-4e88-97ba-20539cf34f31',
'60228731-a84e-400b-a383-211e380d5b0a',
'8acca310-5c37-453e-96aa-46c17154c28b',
'8dd3b2bc-a7b1-42b1-8f5d-a2a5fdcead8b',
'8c585b27-81ea-47c0-9ee3-9b83b1b72486',
'04ec6a0f-1694-4558-84da-c61eb18e24cc',
'16ef2cde-bf52-4ef7-9e6e-eafd571eb8ed',
'79846c03-d084-4633-b842-6211810cdd98',
'39c70145-1c2d-4cce-99c1-3ac31d9a568e',
'17236748-e251-40c3-83bf-09e17df95efb',
'497263f2-f043-49b8-9116-17d4fc2ce463',
'8bb00f04-d9ea-4f37-9fe4-ce51406682aa',
'1e6c8d77-7ef2-416a-bf0b-e7e1d881e8db',
'fe5f3852-f559-45e7-9725-35b2fb533338',
'cfb09b41-7b2e-4049-b10d-88d3ce8e5278',
'341a2d59-3e46-4fd9-ba29-e494cd24d0e8',
'696bb3d5-376c-43d2-98ac-bab9c119247e',
'e292c401-8b14-4667-8a83-690951ac9296',
'321c149b-11bd-4cfb-b8cb-bc740e8fb703',
'42aec44c-ddc8-4480-8db2-d753c9e3f2a8',
'85e36e38-17ba-4bb4-be0e-47a29fcdb44b',
'53bf0378-e6c4-482a-b7c8-9f7f4664e052',
'c5984967-4e1f-4a3a-96fb-a6e98d0548fb',
'4ccaff46-d61d-497f-ac9f-bf0367da14ad',
'7ec8f2a7-e8a9-45b7-b98a-a183dfda3bd5',
'1f558c64-17d1-436c-88bb-c9e6339a4733',
'064e8f1d-c8b4-4617-812c-da8f003b22aa',
'07594bc4-e03e-46ff-94a9-b51b064c158a',
'3c3713ce-0214-4fdb-be2e-a2a95522924a',
'c1f28564-7804-4916-9c16-38bca1370ec6',
'0a715451-7379-4321-aa01-d503399cb264',
'47e2e529-3184-4c8a-9816-bfa3f44960d3',
'93fc2bcc-f4fc-4e8f-91d4-5d074a41b30b',
'b9322946-3100-4e9c-9c66-6174502598c3',
'287aa88b-5898-4299-96ef-2c8459342f7d',
'71f921bf-d784-4c09-b7c4-4e4dfe886d9d',
'8d09bd05-3d53-4920-b0f3-a32cb9f10912',
'5157bd5f-9add-4897-8191-1d89602a5e57',
'811582c7-fb68-4312-a2bf-e1d2aa7182fe',
'e50dae19-c8d1-46cd-ac13-3c3c802491d4',
'fafe1af0-aa4e-40b3-b9fb-a80f1d8a275a',
'11eaf447-a210-46e6-97d6-a1fed15b3133',
'cafcc188-23f4-49e3-bfb5-7135f417ff26',
'c982d645-ccde-4a9a-812f-a19b5d654300',
'92f5452b-068b-472d-a1bf-2e6d23f2aa48',
'e78ea77e-d111-4319-8aaf-c793e1fb6bf9',
'a4ec5739-d7aa-4166-985b-68a6f652a503',
'5613414a-a72a-49a6-bb13-cadd55174b35',
'98b88ac5-56bb-466f-8f64-e35d9f7907b1',
'e665c84e-8d44-4bf8-beb2-2f1f49beebec',
'd944b39c-2476-4ab3-b046-ac341ff8f57d',
'e165f9f1-ba0b-4930-a9b2-1b9e393df3f0',
'9296797d-063a-4578-ba46-b3d5df143ac0',
'70fc93d2-425d-4132-b33c-53808d9e33a6',
'0c7d771b-6dad-4f07-aa2f-157656b8a94e',
'f296439d-7c77-47f0-88f8-d3065cdbc1fb',
'2aaaafe4-c9ac-46b0-9e4a-32fece6f910a',
'61a03221-3833-427a-a30c-4028ec2017cd',
'8ea41acf-4121-4644-82e3-83fc9cfe174d',
'a3451649-d847-49ee-8639-35b88b69fad2',
'457f8331-009a-4c1b-ad82-aebc0950f71d',
'3c3070e1-d466-4ae0-97a9-ac896589017a',
'737f8c9d-4a28-4819-bf9f-a9395d1fa51f',
'ab57c06c-c7ea-4b1a-b6b4-805c79d75082',
'5b87cc72-ead8-4ab3-baa7-3b88ffba3cb5',
'edaed707-32d3-4175-8176-22abd11e418c',
'e04ef605-d992-4b35-bd95-8977bc2b50f1',
'6a028dfd-fdb2-40e9-ab2b-b07e9849db85',
'ec6ed528-1f3b-4dce-a215-1fb1edb60b6e',
'22fb4005-9220-42d5-9fd0-1741dca34066',
'bcd516a3-a8c0-4738-9bf1-1cdd8779eb66',
'650b1b71-7360-401c-b3b0-966e8c800074',
'150684f0-641a-4135-9dec-211f6ea614f8',
'60f1efca-0e1c-4447-99de-7cc38ab7e800',
'516f84ec-c1fe-484f-a789-e5dff245267e',
'd5254702-6192-4206-91bf-8513769c4c01',
'993a5471-a746-43fd-8f69-09958a927916',
'9337c79c-a5b0-4d3f-b19c-c6f9ee916a23') and epustaka_id = '46419e16-adb2-464a-ae26-61595c7173be'"
ST3d03A8,Untitled,EvEnSGRIANch,Rust,Wednesday 6th of December 2023 09:50:12 PM CDT,"use std::io::{self, BufRead};
fn main() {
    let stdin = io::stdin();
    let mut iter = stdin.lock().lines();

    let binding = iter.next().unwrap().unwrap();
    let times = binding
        .split_whitespace()
        .skip(1)
        .map(|x| x.parse::<u32>().unwrap());
    let binding = iter.next().unwrap().unwrap();
    let dists = binding
        .split_whitespace()
        .skip(1)
        .map(|x| x.parse::<u32>().unwrap());
    let mut races = times.zip(dists);
    let mut res = 1;
    for (time, dist) in races {
        let mut ct = 0;
        for i in (1..time) {
            if i * (time - i) > dist {
                ct += 1;
            }
        }
        res *= ct;
    }
    print!(""{}"", res);
}
"
pLCkJCak,bookstore,excellent940707,Python,Wednesday 6th of December 2023 09:38:12 PM CDT,"inventory = []

def add_book():
    title = input('Enter title: ')
    author = input('Enter author: ')
    price = float(input('Enter price: '))
    quan = int(input('Enter quantity: '))
    inventory.append([title, author, price, quan])
    print(f""Book '{title}' added successfully"")

def calculate_price():
    title = input('Enter title: ')
    quan = int(input('Enter quantity sold:'))
    price=0
    for i in inventory:
        if i[0]==title:
            price = i[2]
    if quan>=3:
        price *= quan*0.9
    elif quan>=2:
        price *= quan*0.95
    else:
        price *= quan
    print(f'Total Price: {price}')
        
def update_book():
    title = input('Enter title of the book: ')
    quan = int(input('Enter quantity sold: '))
    now_quan = 0
    for i in inventory:
        if i[0]==title:
            i[3] -= quan
            now_quan = i[3]
            
    print(f""Stock updated. New quantity: {now_quan}"")
    
def search_book():
    title = input('Enter title of the book: ')
    print('Book Found: ')
    for i in inventory:
        if i[0]==title:
            print(i)
            return
    print('Not found')
        
def display_book():
    budget = float(input('Enter your maximum budget: '))
    print('Books within budget: ',end="""")
    for i in inventory:
        if i[2]<=budget:
            print(i,end=' ')
    print()
    
def remove_book():
    title = input('Enter title of the book to remove: ')
    for i in inventory:
        if i[0]==title:
            inventory.remove(i)
    print(f""Book '{title}' removed successfully"")

def estimate_profit():
    count = 0.0
    for i in inventory:
        count += i[2]*i[3]*0.7
    print(f""Estimated Profit: {count}"")
    
def menu():
    print('Bookstore Management System')
    print('1. Add Book')
    print('2. Calculate Total Price')
    print('3. Update Stock')
    print('4. Search Book')
    print('5. Display Affordable Books')
    print('6. Remove Book')
    print('7. Estimate Profit')
    print('0. Exit')
    
    while True:
        
        choice = int(input('Enter your choice: '))
        if choice==1:
            add_book()
        elif choice==2:
            calculate_price()
        elif choice==3:
            update_book()
        elif choice==4:
            search_book()
        elif choice==5:
            display_book()
        elif choice==6:
            remove_book()
        elif choice==7:
            estimate_profit()
        else:
            break
        print()
menu()"
PBmhpfsK,konveksi jas almamater terdekat,tokoabi,HTML,Wednesday 6th of December 2023 08:09:41 PM CDT,"https://tokoabi.biz.id/2/ARTICLES/2104/konveksi-toga-wisuda-palangkaraya

https://optimasimilyaran.com/2/ARTICLES/1425/konveksi-toga-wisuda-palangkaraya

https://toko-abi.com/12849/konveksi-toga-wisuda-palangkaraya.html

https://konveksi.toko-abi.com/2023/12/05/konveksi-toga-wisuda-palangkaraya/

https://konveksi-tokoabi.co.id/2023/12/05/konveksi-toga-wisuda-palangkaraya/

https://bikin-seragam.net/konveksi-toga-wisuda-palangkaraya/

https://tokoabi.biz.id/2/ARTICLES/2106/konveksi-toga-wisuda-banjarmasin

https://optimasimilyaran.com/2/ARTICLES/1429/konveksi-toga-wisuda-banjarmasin

https://gerai-toga-wisuda.com/konveksi-toga-wisuda-palangkaraya.html

https://toko-abi.com/12852/konveksi-toga-wisuda-banjarmasin.html

https://konveksi.toko-abi.com/2023/12/05/konveksi-toga-wisuda-banjarmasin/

https://konveksi-tokoabi.co.id/2023/12/05/konveksi-toga-wisuda-banjarmasin/

https://bikin-seragam.net/konveksi-toga-wisuda-banjarmasin/

https://gerai-toga-wisuda.com/konveksi-toga-wisuda-banjarmasin.html

https://tokoabi.biz.id/2/ARTICLES/2110/konveksi-jas-almamater-banjarmasin

https://optimasimilyaran.com/2/ARTICLES/1432/konveksi-jas-almamater-banjarmasin

https://toko-abi.com/12856/konveksi-jas-almamater-banjarmasin.html

https://konveksi.toko-abi.com/2023/12/05/konveksi-jas-almamater-banjarmasin/

https://konveksi-tokoabi.co.id/2023/12/05/konveksi-jas-almamater-banjarmasin/

https://bikin-seragam.net/konveksi-jas-almamater-banjarmasin/

https://gerai-jas-almamater.com/konveksi-jas-almamater-banjarmasin.html

https://tokoabi.biz.id/2/ARTICLES/2111/konveksi-jas-almamater-samarinda

https://optimasimilyaran.com/2/ARTICLES/1433/konveksi-jas-almamater-samarinda

https://toko-abi.com/12881/konveksi-jas-almamater-samarinda.html

https://konveksi.toko-abi.com/2023/12/06/konveksi-jas-almamater-samarinda/

https://konveksi-tokoabi.co.id/2023/12/06/konveksi-jas-almamater-samarinda/

https://bikin-seragam.net/konveksi-jas-almamater-samarinda/

https://tokoabi.biz.id/2/ARTICLES/2113/konveksi-toga-wisuda-samarinda

https://optimasimilyaran.com/2/ARTICLES/1435/konveksi-toga-wisuda-samarinda

https://toko-abi.com/12947/konveksi-toga-wisuda-samarinda.html

https://gerai-jas-almamater.com/konveksi-jas-almamater-samarinda.html

https://konveksi.toko-abi.com/2023/12/06/konveksi-toga-wisuda-samarinda/

https://konveksi-tokoabi.co.id/2023/12/06/konveksi-toga-wisuda-samarinda/

https://bikin-seragam.net/konveksi-toga-wisuda-samarinda/

https://gerai-toga-wisuda.com/konveksi-toga-wisuda-samarinda.html"
Kzw8QJXD,Untitled,mzh_pb,C++,Wednesday 6th of December 2023 07:50:43 PM CDT,"#include <bits/stdc++.h>

#define int int64_t

#define rng(i, a, b) for (int i = a; i < b; i++)
#define rep(i, b) rng(i, 0, b)
#define gnr(i, a, b) for (int i = b - 1; i >= a; i--)
#define per(i, b) gnr(i, 0, b)

#define all(x) begin(x), end(x)
#define sz(x) int(size(x))

#define pb push_back
#define eb emplace_back
#define lb lower_bound
#define ub upper_bound

#define f first
#define s second

using namespace std;

const int INF = 1e18;

struct Segtree {
    int sz;
    vector<int> t, lz;

    Segtree(int n) {
        sz = 1;
        while (sz < n) {
            sz *= 2;
        }
        t.resize(2 * sz);
        lz.resize(2 * sz);
    };

    void push(int x, int tl, int tr) {
        if (lz[x] != 0) {
            t[x] += lz[x];
            if (tl + 1 != tr) {
                lz[2 * x + 1] += lz[x];
                lz[2 * x + 2] += lz[x];
            }
            lz[x] = 0;
        }
    }

    void update(int l, int r, int v, int x, int tl, int tr) {
        push(x, tl, tr);
        if (tl >= r || tr <= l) {
            return;
        }
        if (tl >= l && tr <= r) {
            t[x] += v;
            if (tl + 1 != tr) {
                lz[2 * x + 1] += v;
                lz[2 * x + 2] += v;
            }
            return;
        }
        int mid = (tl + tr) >> 1;
        update(l, r, v, 2 * x + 1, tl, mid);
        update(l, r, v, 2 * x + 2, mid, tr);
        t[x] = min(t[2 * x + 1], t[2 * x + 2]);
    }

    void update(int l, int r, int v) {
        update(l, r, v, 0, 0, sz);
    }

    int query(int l, int r, int x, int tl, int tr) {
        push(x, tl, tr);
        if (tl >= r || tr <= l) {
            return INF;
        }
        if (tl >= l && tr <= r) {
            return t[x];
        }
        int mid = (tl + tr) >> 1;
        return min(query(l, r, 2 * x + 1, tl, mid), query(l, r, 2 * x + 2, mid, tr));
    }

    int query(int l, int r) {
        return query(l, r, 0, 0, sz);
    }
};

void solve() {
    int n, m, k;
    cin >> n >> m >> k;

    string s;
    cin >> s;

    vector<vector<int>> cost(m, vector<int>(m));
    rep(i, m) {
        rep(j, m) {
            cin >> cost[i][j];
        }
    }

    rep(k, m) {
        rep(i, m) {
            rep(j, m) {
                cost[i][j] = min(cost[i][j], cost[i][k] + cost[k][j]);
            }
        }
    }

    vector<Segtree> st(m, Segtree(n + 1)); // st[c][i] = dp[i] + cost to turn (i, end] to c
    rng(i, 1, n + 1) {
        rep(j, m) {
            st[j].update(0, i, cost[s[i - 1] - 'a'][j]);
        }

        int cur = INF;
        rep(j, m) {
            if (i - k >= 0) {
                cur = min(cur, st[j].query(0, i - k + 1));
            }
        }
        rep(j, m) {
            st[j].update(i, i + 1, cur);
        }
    }

    cout << st[0].query(n, n + 1) << '\n';
}

int32_t main() {
#ifndef LOCAL
    freopen(""cowmbat.in"", ""r"", stdin);
    freopen(""cowmbat.out"", ""w"", stdout);
#endif
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int tc = 1;
    // cin >> tc;
    while (tc--) {
        solve();
    }

    return 0;
}"
pubE4ZRd,AoC 2023 day 6 (Smalltalk),musifter,Smalltalk,Wednesday 6th of December 2023 07:29:06 PM CDT,"#!/usr/local/bin/gst -q

Symbol extend     [ value: arg  [^arg perform: self]                    ]
Collection extend [ product     [^self inject: 1 into: [:a :b | a * b]] ]

Array extend [
    countWins [
        | time dist discrim upper lower |
        "" ASSUME: size of array is at least 2 ""
        time := self first.
        dist := self second + 1.    "" Need at least one more for the win ""

        discrim := (time * time - (4 * dist)) sqrt.
        upper := ((time + discrim) / 2) floor.
        lower := ((time - discrim) / 2) ceiling.

        ^upper - lower + 1
    ]
]

""
| Mainline
""
input := stdin lines contents collect: [:line | line subStrings allButFirst].

"" Parse input into pairs of values for part one ""
table := input collect: [:line | line collect: #asNumber].
cols  := (table first) with: (table second).

"" Join for part 2 ""
concat := input collect: [:line | line join asNumber].

('Part 1: %1' % {(cols collect: #countWins) product}) displayNl.
('Part 2: %1' % {concat countWins}) displayNl.
"
qWKZvCTn,AoC 2023 day 6 (Perl),musifter,Perl,Wednesday 6th of December 2023 07:27:42 PM CDT,"#!/usr/bin/perl

use v5.32;
use warnings;

use List::AllUtils  qw(product pairwise);
use POSIX           qw(ceil floor);

sub count_wins {
    my ($t, $d) = @_;

    $d++;
    my $upper = floor(($t + sqrt( $t*$t - 4*$d )) / 2);
    my $lower = ceil (($t - sqrt( $t*$t - 4*$d )) / 2);

    return ($upper - $lower + 1);
}

my @in  = map { [m#(\d+)#g] } <>;
say ""Part 1: "", product pairwise { &count_wins($a,$b) } $in[0]->@*, $in[1]->@*;
say ""Part 2: "", &count_wins( map { join('', @$_) } @in );
"
AK82nY0G,AOC 2023 Day 6,nairby,Rust,Wednesday 6th of December 2023 07:11:41 PM CDT,"use std::env;
use std::io::{self, prelude::*};
use std::fs::File;

fn solve(input: &str) -> io::Result<()> {
    // File handling
    let input_str = std::fs::read_to_string(input).unwrap();
    let input_str = input_str.trim();
    let input: Vec<_> = input_str.lines().collect();

    // Part 1 Inputs
    let times: Vec<_> = input[0]
        .split_whitespace()
        .skip(1)
        .map(|x| x.parse::<usize>().unwrap())
        .collect();
    let distances: Vec<_> = input[1]
        .split_whitespace()
        .skip(1)
        .map(|x| x.parse::<usize>().unwrap())
        .collect();

    // Part 1
    let mut part1 = 1;
    for (time,dist) in times.iter().zip(distances.iter()) {
        let ways = (1..*time)
            .into_iter()
            .filter(|hold| hold * (time - hold) > *dist)
            .count();
        if ways > 0 { part1 *= ways; }
    }
    println!(""Part 1: {part1}""); // 800280

    // Part 2 Inputs
    let time_p2 = times
        .iter()
        .map(|x| format!(""{x}""))
        .collect::<Vec<_>>()
        .concat()
        .parse::<usize>()
        .unwrap();
    let dist_p2 = distances
        .iter()
        .map(|x| format!(""{x}""))
        .collect::<Vec<_>>()
        .concat()
        .parse::<usize>()
        .unwrap();

    // Part 2 Solve
    let part2 = (1..time_p2)
        .into_iter()
        .filter(|hold| hold * (time_p2 - hold) > dist_p2)
        .count();
    println!(""Part 2: {part2}""); // 45128024

    Ok(())
}

fn main() {
    let args: Vec<String> = env::args().collect();
    let filename = &args[1];
    solve(&filename).unwrap();
}
"
XhYNLmcv,Untitled,yungKKKK,Kotlin,Wednesday 6th of December 2023 06:59:44 PM CDT,"data class TelephonyProvider(
    val name: String,
    val id: String,
)

fun Context.getTelephonyProvider(): TelephonyProvider {
    val telephonyManager = getSystemService(TelephonyManager::class.java)
    val operatorName = telephonyManager.networkOperatorName
    val operatorId = telephonyManager.networkOperator
    return TelephonyProvider(operatorName, operatorId)
}

suspend fun Context.getDeviceIpAddress(): String? = withContext(Dispatchers.IO) {
    val connectivityManager = getSystemService(ConnectivityManager::class.java)
    val props = connectivityManager.getLinkProperties(connectivityManager.activeNetwork) as LinkProperties
    props.linkAddresses.firstOrNull { linkAddress ->
        linkAddress.address.hostAddress?.contains('.') ?: false
    }?.address?.hostAddress
}

suspend fun getPublicIpAddress(): Deferred<String> =
    coroutineScope {
        async(Dispatchers.IO) {
            var result = """"
            result = try {
                val url = URL(""https://api.ipify.org"")
                val httpsURLConnection = url.openConnection()
                val iStream = httpsURLConnection.getInputStream()
                val buff = ByteArray(1024)
                val read = iStream.read(buff)
                String(buff, 0, read)
            } catch (e: Exception) {
                ""error : $e""
            }
            return@async result
        }
    }

data class Wifi(
    val name: String,
    val id: String,
)

fun Context.getWifiInfo(): Wifi {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
        val connectivityManager = getSystemService(ConnectivityManager::class.java)

        val wifiInfo = connectivityManager
            .getNetworkCapabilities(connectivityManager.activeNetwork)
            ?.transportInfo as WifiInfo
        return Wifi(
            name = wifiInfo.ssid,
            id = wifiInfo.networkId.toString(),
        )
    } else {
        val wifiManager =
            getSystemService(WifiManager::class.java)
        val wifiInfo = wifiManager!!.connectionInfo
        return Wifi(
            name = wifiInfo.ssid,
            id = wifiInfo.networkId.toString(),
        )
    }
}"
nLMrtWjk,[tds2023] Código em C para Função,hercioneto,C,Wednesday 6th of December 2023 06:46:49 PM CDT,"// Online C compiler to run C program online
#include <stdio.h>
void oi() {
    char texto[] = ""Sou uma function \n"";
    printf (""%s"",texto);
}
int soma(int a, int b) {
    int resultado;
    resultado = a + b;
    return resultado;
}
int diminuir(int a, int b) {
    int resultado;
    resultado = a - b;
    return resultado;
}
int multiplicar(int a, int b) {
    int resultado;
    resultado = a * b;
    return resultado;
}
int dividir(int a, int b) {
    int resultado;
    if (b==0) { 
        return 0; 
    } else {
        resultado = a / b;
        return resultado;
    }
}

int main() {
    //oi();
    int total = soma(5,7);
    printf(""%i \n"",total);
    int v1, v2;
    printf(""Digite valor: "");
    scanf(""%i"",&v1);
    printf(""Digite valor: "");
    scanf(""%i"",&v2);
    total = soma(v1,v2);
    printf(""Somar %i \n"",total);
    
    total = diminuir(v1,v2);
    printf(""Diminuir %i \n"",total);
    
    total = multiplicar(v1,v2);
    printf(""Multiplicar %i \n"",total);
    
    total = dividir(v1,v2);
    printf(""Divisao %i \n"",total);
return 0;
}"
GgD4fBef,Coctail,Levi0227,C#,Wednesday 6th of December 2023 06:44:43 PM CDT,"namespace KohariLevente_P99J7Y_A
{
    internal class Program
    {
        static void Main(string[] args)
        {
            //Osszetevo o = new Osszetevo(""fehér rum"", 40, ""2"");
            //Console.WriteLine(o.Szovegkent());

            Koktel k = new Koktel(""Pina-colada"", ""osszetevok.txt"");
            k.ReceptNyomtatas(""Pina-colada"");
        }
    }
}



--------------------------------------------------------------------



namespace KohariLevente_P99J7Y_A
{
    enum OsszetevoFajta
    {
        Folyadek = 1, Alkohol = 2, Egyeb = 3
    }
    internal class Osszetevo
    {
        string osszetevok;
        int mennyiseg;
        OsszetevoFajta osszetevoFajta;

        public string Osszetevok
        {
            get => osszetevok;
            set
            {
                if (value != """")
                {
                    osszetevok = value;
                }
            }
        }

        public int Mennyiseg { get => mennyiseg; }

        public OsszetevoFajta PropertyOsszetevoFajta { get => osszetevoFajta; }

        public Osszetevo(string osszetevok, int mennyiseg, string fajta)
        {
            this.osszetevok = osszetevok;
            this.mennyiseg = mennyiseg;
            this.osszetevoFajta = (OsszetevoFajta)Enum.Parse(typeof(OsszetevoFajta),fajta);
        }

        public string Szovegkent() 
        {
            string visszaad = $""{mennyiseg} ml {osszetevok} ({osszetevoFajta})"";
            return visszaad;
        }
    }
}



--------------------------------------------------------------------



namespace KohariLevente_P99J7Y_A
{
    internal class Koktel
    {
        string nev;
        List<Osszetevo> szuksegesOsszetevok = new List<Osszetevo>();

        public string Nev { get => nev; }

        private void Hozzaad(string s)
        {
            string[] sor = s.Split(',');
            
            szuksegesOsszetevok.Add(new Osszetevo(sor[1], int.Parse(sor[2]), sor[0]));
        }

        public Koktel(string nev, string file)
        {
            this.nev = nev;

            string[] sor = File.ReadAllLines(""osszetevok.txt"");
            //for (int i = 0; i < sor.Length; i++)
            //{
            //    Hozzaad(sor[i]);
            //}
            foreach (var e in sor) 
            {
                Hozzaad(e);
            }
        }

        private int OsszAlkoholtartalom()
        {
            int osszes = 0;
            for (int i = 0; i < szuksegesOsszetevok.Count; i++)
            {
                if (szuksegesOsszetevok[i].PropertyOsszetevoFajta.ToString() == ""Alkohol"")
                {
                    osszes += szuksegesOsszetevok[i].Mennyiseg;
                }
            }

            return osszes;
        }

        public string MaximalisMennyiseg()
        { 
            int maxMennyiseg = szuksegesOsszetevok[0].Mennyiseg;
            int index = 0;
            for (int i = 0; i < szuksegesOsszetevok.Count; i++)
            {
                if (maxMennyiseg < szuksegesOsszetevok[i].Mennyiseg)
                {
                    maxMennyiseg = szuksegesOsszetevok[i].Mennyiseg;
                    index = i;
                }
            }

            return szuksegesOsszetevok[index].PropertyOsszetevoFajta.ToString();
        }

        private void Csoportosit()
        { 
            List<Osszetevo> temp = new List<Osszetevo>();
            for (int i = 0; i < szuksegesOsszetevok.Count; i++)
            {
                if (szuksegesOsszetevok[i].PropertyOsszetevoFajta.ToString() == ""Alkohol"")
                {
                    temp.Add(szuksegesOsszetevok[i]);
                }
            }

            for (int i = 0; i < szuksegesOsszetevok.Count; i++)
            {
                if (szuksegesOsszetevok[i].PropertyOsszetevoFajta.ToString() != ""Alkohol"")
                {
                    temp.Add(szuksegesOsszetevok[i]);
                }
            }

            for (int i = 0; i < szuksegesOsszetevok.Count; i++)
            {
                szuksegesOsszetevok[i] = temp[i];
            }
        }

        public void ReceptNyomtatas(string kimenet) 
        {
            string szoveg = """";
            Csoportosit();
            for (int i = 0; i < szuksegesOsszetevok.Count; i++)
            {
                szoveg += $""{szuksegesOsszetevok[i].Szovegkent()}\n"";
            }

            szoveg += $""-- Teljes alkoholtartalom: {OsszAlkoholtartalom()} ml --"";

            File.WriteAllText(kimenet, szoveg);
        }
    }
}
"
P3hHLmTA,2023-12-06_stats.json,rdp_snitch,JSON,Wednesday 6th of December 2023 06:18:34 PM CDT,"{
  ""ip"": {
    ""100.11.205.126"": 132,
    ""212.70.149.146"": 21,
    ""180.93.172.92"": 9,
    ""194.165.17.21"": 45,
    ""179.60.147.5"": 6,
    ""179.60.147.148"": 6,
    ""87.251.75.145"": 9,
    ""92.119.177.20"": 3,
    ""205.210.31.71"": 9,
    ""62.204.61.207"": 6,
    ""62.204.41.132"": 18,
    ""194.165.16.73"": 6,
    ""185.170.144.3"": 6,
    ""212.70.149.142"": 24,
    ""198.235.24.66"": 9,
    ""181.30.39.44"": 3,
    ""69.164.217.245"": 3,
    ""45.227.254.55"": 6,
    ""152.32.235.78"": 3,
    ""196.190.117.7"": 3,
    ""58.218.204.183"": 9,
    ""85.209.11.111"": 30,
    ""198.235.24.8"": 9,
    ""67.217.59.233"": 3,
    ""123.56.20.194"": 3,
    ""87.251.75.64"": 3,
    ""46.219.77.107"": 3,
    ""62.204.41.210"": 6,
    ""193.233.233.53"": 3,
    ""110.86.3.66"": 3,
    ""45.227.254.49"": 6,
    ""185.222.243.232"": 3,
    ""72.190.193.76"": 3,
    ""205.210.31.221"": 9,
    ""103.209.61.132"": 42,
    ""188.166.243.203"": 45,
    ""159.223.67.134"": 39,
    ""188.166.245.200"": 27,
    ""128.199.210.62"": 30,
    ""159.65.11.21"": 15,
    ""159.65.11.77"": 9,
    ""159.65.10.163"": 15,
    ""159.223.75.11"": 21,
    ""128.199.205.11"": 24,
    ""146.190.93.93"": 21,
    ""159.223.65.78"": 15,
    ""159.65.11.50"": 15,
    ""188.166.251.47"": 12,
    ""146.190.93.95"": 33,
    ""188.166.247.55"": 12,
    ""188.166.243.227"": 39,
    ""188.166.247.7"": 45,
    ""159.223.67.35"": 15,
    ""206.189.158.99"": 15,
    ""206.189.158.131"": 12,
    ""188.166.238.198"": 42,
    ""206.189.92.14"": 12,
    ""206.189.144.213"": 12,
    ""206.189.148.118"": 21,
    ""188.166.230.160"": 30,
    ""188.166.219.103"": 21,
    ""188.166.247.131"": 6,
    ""206.189.157.63"": 21,
    ""206.189.94.90"": 9,
    ""188.166.247.234"": 12,
    ""188.166.221.28"": 6
  },
  ""asn"": {
    ""AS701"": 132,
    ""AS204428"": 45,
    ""AS135944"": 9,
    ""AS48721"": 51,
    ""AS209588"": 12,
    ""AS208091"": 12,
    ""AS9009"": 3,
    ""AS396982"": 36,
    ""AS34412"": 6,
    ""AS59425"": 24,
    ""AS197414"": 6,
    ""AS7303"": 3,
    ""AS63949"": 3,
    ""AS267784"": 12,
    ""AS135377"": 3,
    ""AS24757"": 3,
    ""AS4134"": 12,
    ""AS57523"": 30,
    ""AS19318"": 3,
    ""AS37963"": 3,
    ""AS31148"": 3,
    ""AS210644"": 3,
    ""AS136787"": 3,
    ""AS11427"": 3,
    ""AS63737"": 42,
    ""AS14061"": 651
  },
  ""isp"": {
    ""Verizon Communications"": 132,
    ""SS-Net"": 45,
    ""SPT"": 9,
    ""Flyservers S.A."": 75,
    ""Xhost Internet Solutions LP"": 18,
    ""M247 Europe SRL"": 3,
    ""Google LLC"": 36,
    ""Saba Hour Yeganeh Co. ( Private Joint Stock)"": 6,
    ""Horizon LLC"": 24,
    ""Telecom Argentina S.A"": 3,
    ""Akamai Technologies, Inc."": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Ethiotelecom"": 3,
    ""Chinanet"": 12,
    ""Chang Way Technologies Co. Limited"": 30,
    ""Interserver, Inc"": 3,
    ""Hangzhou Alibaba Advertising Co"": 3,
    ""o3 core"": 3,
    ""Aeza International LTD"": 3,
    ""Tefincom S.A."": 3,
    ""Charter Communications"": 3,
    ""Vietserver Services Technology Company Limited"": 42,
    ""DigitalOcean, LLC"": 651
  },
  ""org"": {
    ""MCI Communications Services, Inc. d/b/a Verizon Business"": 132,
    ""4Media Ltd"": 45,
    ""Saigon Postel Corporation"": 9,
    ""Flyservers S.A"": 51,
    ""Cloud Solutions S.A"": 12,
    ""Xhost Internet Solutions"": 12,
    ""M247 LTD"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Saba Abr Mizban LLC"": 6,
    ""Horizon LLC"": 24,
    ""Xhostis"": 6,
    ""Fibertel"": 3,
    ""Linode"": 3,
    ""UAB Host Baltic"": 12,
    ""Ucloud Information Technology"": 3,
    ""Unknown"": 6,
    ""Chinanet JS"": 9,
    ""Chang Way Technologies Co. Limited"": 30,
    ""Host Department NJ, LLC"": 3,
    ""Aliyun Computing Co., LTD"": 3,
    ""Aeza International LTD"": 3,
    ""Chinanet FJ"": 3,
    ""Packethub S.A"": 3,
    ""Spectrum"": 3,
    ""T-media Digital Technology Company Limited"": 42,
    ""Digitalocean"": 297,
    ""DigitalOcean, LLC"": 354
  },
  ""regionName"": {
    ""Pennsylvania"": 132,
    ""Plovdiv"": 45,
    ""Hanoi"": 51,
    ""Kaunas"": 51,
    ""Distrito Federal"": 12,
    ""North Holland"": 18,
    ""New York"": 3,
    ""California"": 39,
    ""Tehran"": 6,
    ""Moscow"": 54,
    ""Buenos Aires"": 3,
    ""New Jersey"": 6,
    ""Vilnius"": 12,
    ""Addis Ababa"": 3,
    ""Jiangsu"": 9,
    ""Beijing"": 3,
    ""Zhytomyr"": 3,
    ""Vienna"": 3,
    ""Fujian"": 3,
    ""Texas"": 6,
    ""South West"": 549,
    ""Central Singapore"": 102
  },
  ""country"": {
    ""United States"": 186,
    ""Bulgaria"": 45,
    ""Vietnam"": 51,
    ""Lithuania"": 63,
    ""Venezuela"": 12,
    ""The Netherlands"": 18,
    ""Iran"": 6,
    ""Russia"": 54,
    ""Argentina"": 3,
    ""Ethiopia"": 3,
    ""China"": 15,
    ""Ukraine"": 3,
    ""Austria"": 3,
    ""Singapore"": 651
  },
  ""account"": {
    ""hello"": 207,
    ""Domain"": 30,
    ""Administr"": 90,
    ""pid"": 3,
    ""MlJfKxrVH"": 3,
    ""pBqpEd"": 3,
    ""yDPYUe"": 3,
    ""(empty)"": 18,
    ""Test"": 33,
    ""qRJCKtVsR"": 3,
    ""vYQuUB"": 3,
    ""EiyUTT"": 3,
    ""Administrator"": 3,
    ""AaXZzDOik"": 3,
    ""IpLiCK"": 3,
    ""LsrPdf"": 3,
    ""DQSmhKCVK"": 3,
    ""afeiUO"": 3,
    ""wUDuyG"": 3,
    ""142.93.8.59"": 693
  },
  ""keyboard"": {
    ""Unknown"": 1113
  },
  ""client_build"": {
    ""Unknown"": 1113
  },
  ""client_name"": {
    ""Unknown"": 1113
  },
  ""ip_type"": {
    ""Unknown"": 366,
    ""proxy"": 39,
    ""hosting & proxy"": 108,
    ""hosting"": 594,
    ""mobile"": 6
  }
}"
4ymTPuxw,2023-12-06_stats.json,rdp_snitch,JSON,Wednesday 6th of December 2023 06:16:17 PM CDT,"{
  ""ip"": {
    ""100.11.205.126"": 88,
    ""212.70.149.146"": 14,
    ""180.93.172.92"": 6,
    ""194.165.17.21"": 30,
    ""179.60.147.5"": 4,
    ""179.60.147.148"": 4,
    ""87.251.75.145"": 6,
    ""92.119.177.20"": 2,
    ""205.210.31.71"": 6,
    ""62.204.61.207"": 4,
    ""62.204.41.132"": 12,
    ""194.165.16.73"": 4,
    ""185.170.144.3"": 4,
    ""212.70.149.142"": 16,
    ""198.235.24.66"": 6,
    ""181.30.39.44"": 2,
    ""69.164.217.245"": 2,
    ""45.227.254.55"": 4,
    ""152.32.235.78"": 2,
    ""196.190.117.7"": 2,
    ""58.218.204.183"": 6,
    ""85.209.11.111"": 20,
    ""198.235.24.8"": 6,
    ""67.217.59.233"": 2,
    ""123.56.20.194"": 2,
    ""87.251.75.64"": 2,
    ""46.219.77.107"": 2,
    ""62.204.41.210"": 4,
    ""193.233.233.53"": 2,
    ""110.86.3.66"": 2,
    ""45.227.254.49"": 4,
    ""185.222.243.232"": 2,
    ""72.190.193.76"": 2,
    ""205.210.31.221"": 6,
    ""103.209.61.132"": 28,
    ""188.166.243.203"": 30,
    ""159.223.67.134"": 26,
    ""188.166.245.200"": 18,
    ""128.199.210.62"": 20,
    ""159.65.11.21"": 10,
    ""159.65.11.77"": 6,
    ""159.65.10.163"": 10,
    ""159.223.75.11"": 14,
    ""128.199.205.11"": 16,
    ""146.190.93.93"": 14,
    ""159.223.65.78"": 10,
    ""159.65.11.50"": 10,
    ""188.166.251.47"": 8,
    ""146.190.93.95"": 22,
    ""188.166.247.55"": 8,
    ""188.166.243.227"": 26,
    ""188.166.247.7"": 30,
    ""159.223.67.35"": 10,
    ""206.189.158.99"": 10,
    ""206.189.158.131"": 8,
    ""188.166.238.198"": 28,
    ""206.189.92.14"": 8,
    ""206.189.144.213"": 8,
    ""206.189.148.118"": 14,
    ""188.166.230.160"": 20,
    ""188.166.219.103"": 14,
    ""188.166.247.131"": 4,
    ""206.189.157.63"": 14,
    ""206.189.94.90"": 6,
    ""188.166.247.234"": 8,
    ""188.166.221.28"": 4
  },
  ""asn"": {
    ""AS701"": 88,
    ""AS204428"": 30,
    ""AS135944"": 6,
    ""AS48721"": 34,
    ""AS209588"": 8,
    ""AS208091"": 8,
    ""AS9009"": 2,
    ""AS396982"": 24,
    ""AS34412"": 4,
    ""AS59425"": 16,
    ""AS197414"": 4,
    ""AS7303"": 2,
    ""AS63949"": 2,
    ""AS267784"": 8,
    ""AS135377"": 2,
    ""AS24757"": 2,
    ""AS4134"": 8,
    ""AS57523"": 20,
    ""AS19318"": 2,
    ""AS37963"": 2,
    ""AS31148"": 2,
    ""AS210644"": 2,
    ""AS136787"": 2,
    ""AS11427"": 2,
    ""AS63737"": 28,
    ""AS14061"": 434
  },
  ""isp"": {
    ""Verizon Communications"": 88,
    ""SS-Net"": 30,
    ""SPT"": 6,
    ""Flyservers S.A."": 50,
    ""Xhost Internet Solutions LP"": 12,
    ""M247 Europe SRL"": 2,
    ""Google LLC"": 24,
    ""Saba Hour Yeganeh Co. ( Private Joint Stock)"": 4,
    ""Horizon LLC"": 16,
    ""Telecom Argentina S.A"": 2,
    ""Akamai Technologies, Inc."": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Ethiotelecom"": 2,
    ""Chinanet"": 8,
    ""Chang Way Technologies Co. Limited"": 20,
    ""Interserver, Inc"": 2,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""o3 core"": 2,
    ""Aeza International LTD"": 2,
    ""Tefincom S.A."": 2,
    ""Charter Communications"": 2,
    ""Vietserver Services Technology Company Limited"": 28,
    ""DigitalOcean, LLC"": 434
  },
  ""org"": {
    ""MCI Communications Services, Inc. d/b/a Verizon Business"": 88,
    ""4Media Ltd"": 30,
    ""Saigon Postel Corporation"": 6,
    ""Flyservers S.A"": 34,
    ""Cloud Solutions S.A"": 8,
    ""Xhost Internet Solutions"": 8,
    ""M247 LTD"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Saba Abr Mizban LLC"": 4,
    ""Horizon LLC"": 16,
    ""Xhostis"": 4,
    ""Fibertel"": 2,
    ""Linode"": 2,
    ""UAB Host Baltic"": 8,
    ""Ucloud Information Technology"": 2,
    ""Unknown"": 4,
    ""Chinanet JS"": 6,
    ""Chang Way Technologies Co. Limited"": 20,
    ""Host Department NJ, LLC"": 2,
    ""Aliyun Computing Co., LTD"": 2,
    ""Aeza International LTD"": 2,
    ""Chinanet FJ"": 2,
    ""Packethub S.A"": 2,
    ""Spectrum"": 2,
    ""T-media Digital Technology Company Limited"": 28,
    ""Digitalocean"": 198,
    ""DigitalOcean, LLC"": 236
  },
  ""regionName"": {
    ""Pennsylvania"": 88,
    ""Plovdiv"": 30,
    ""Hanoi"": 34,
    ""Kaunas"": 34,
    ""Distrito Federal"": 8,
    ""North Holland"": 12,
    ""New York"": 2,
    ""California"": 26,
    ""Tehran"": 4,
    ""Moscow"": 36,
    ""Buenos Aires"": 2,
    ""New Jersey"": 4,
    ""Vilnius"": 8,
    ""Addis Ababa"": 2,
    ""Jiangsu"": 6,
    ""Beijing"": 2,
    ""Zhytomyr"": 2,
    ""Vienna"": 2,
    ""Fujian"": 2,
    ""Texas"": 4,
    ""South West"": 366,
    ""Central Singapore"": 68
  },
  ""country"": {
    ""United States"": 124,
    ""Bulgaria"": 30,
    ""Vietnam"": 34,
    ""Lithuania"": 42,
    ""Venezuela"": 8,
    ""The Netherlands"": 12,
    ""Iran"": 4,
    ""Russia"": 36,
    ""Argentina"": 2,
    ""Ethiopia"": 2,
    ""China"": 10,
    ""Ukraine"": 2,
    ""Austria"": 2,
    ""Singapore"": 434
  },
  ""account"": {
    ""hello"": 138,
    ""Domain"": 20,
    ""Administr"": 60,
    ""pid"": 2,
    ""MlJfKxrVH"": 2,
    ""pBqpEd"": 2,
    ""yDPYUe"": 2,
    ""(empty)"": 12,
    ""Test"": 22,
    ""qRJCKtVsR"": 2,
    ""vYQuUB"": 2,
    ""EiyUTT"": 2,
    ""Administrator"": 2,
    ""AaXZzDOik"": 2,
    ""IpLiCK"": 2,
    ""LsrPdf"": 2,
    ""DQSmhKCVK"": 2,
    ""afeiUO"": 2,
    ""wUDuyG"": 2,
    ""142.93.8.59"": 462
  },
  ""keyboard"": {
    ""Unknown"": 742
  },
  ""client_build"": {
    ""Unknown"": 742
  },
  ""client_name"": {
    ""Unknown"": 742
  },
  ""ip_type"": {
    ""Unknown"": 244,
    ""proxy"": 26,
    ""hosting & proxy"": 72,
    ""hosting"": 396,
    ""mobile"": 4
  }
}"
bvU7XgHU,2023-12-06_stats.json,rdp_snitch,JSON,Wednesday 6th of December 2023 06:15:08 PM CDT,"{
  ""ip"": {
    ""100.11.205.126"": 44,
    ""212.70.149.146"": 7,
    ""180.93.172.92"": 3,
    ""194.165.17.21"": 15,
    ""179.60.147.5"": 2,
    ""179.60.147.148"": 2,
    ""87.251.75.145"": 3,
    ""92.119.177.20"": 1,
    ""205.210.31.71"": 3,
    ""62.204.61.207"": 2,
    ""62.204.41.132"": 6,
    ""194.165.16.73"": 2,
    ""185.170.144.3"": 2,
    ""212.70.149.142"": 8,
    ""198.235.24.66"": 3,
    ""181.30.39.44"": 1,
    ""69.164.217.245"": 1,
    ""45.227.254.55"": 2,
    ""152.32.235.78"": 1,
    ""196.190.117.7"": 1,
    ""58.218.204.183"": 3,
    ""85.209.11.111"": 10,
    ""198.235.24.8"": 3,
    ""67.217.59.233"": 1,
    ""123.56.20.194"": 1,
    ""87.251.75.64"": 1,
    ""46.219.77.107"": 1,
    ""62.204.41.210"": 2,
    ""193.233.233.53"": 1,
    ""110.86.3.66"": 1,
    ""45.227.254.49"": 2,
    ""185.222.243.232"": 1,
    ""72.190.193.76"": 1,
    ""205.210.31.221"": 3,
    ""103.209.61.132"": 14,
    ""188.166.243.203"": 15,
    ""159.223.67.134"": 13,
    ""188.166.245.200"": 9,
    ""128.199.210.62"": 10,
    ""159.65.11.21"": 5,
    ""159.65.11.77"": 3,
    ""159.65.10.163"": 5,
    ""159.223.75.11"": 7,
    ""128.199.205.11"": 8,
    ""146.190.93.93"": 7,
    ""159.223.65.78"": 5,
    ""159.65.11.50"": 5,
    ""188.166.251.47"": 4,
    ""146.190.93.95"": 11,
    ""188.166.247.55"": 4,
    ""188.166.243.227"": 13,
    ""188.166.247.7"": 15,
    ""159.223.67.35"": 5,
    ""206.189.158.99"": 5,
    ""206.189.158.131"": 4,
    ""188.166.238.198"": 14,
    ""206.189.92.14"": 4,
    ""206.189.144.213"": 4,
    ""206.189.148.118"": 7,
    ""188.166.230.160"": 10,
    ""188.166.219.103"": 7,
    ""188.166.247.131"": 2,
    ""206.189.157.63"": 7,
    ""206.189.94.90"": 3,
    ""188.166.247.234"": 4,
    ""188.166.221.28"": 2
  },
  ""asn"": {
    ""AS701"": 44,
    ""AS204428"": 15,
    ""AS135944"": 3,
    ""AS48721"": 17,
    ""AS209588"": 4,
    ""AS208091"": 4,
    ""AS9009"": 1,
    ""AS396982"": 12,
    ""AS34412"": 2,
    ""AS59425"": 8,
    ""AS197414"": 2,
    ""AS7303"": 1,
    ""AS63949"": 1,
    ""AS267784"": 4,
    ""AS135377"": 1,
    ""AS24757"": 1,
    ""AS4134"": 4,
    ""AS57523"": 10,
    ""AS19318"": 1,
    ""AS37963"": 1,
    ""AS31148"": 1,
    ""AS210644"": 1,
    ""AS136787"": 1,
    ""AS11427"": 1,
    ""AS63737"": 14,
    ""AS14061"": 217
  },
  ""isp"": {
    ""Verizon Communications"": 44,
    ""SS-Net"": 15,
    ""SPT"": 3,
    ""Flyservers S.A."": 25,
    ""Xhost Internet Solutions LP"": 6,
    ""M247 Europe SRL"": 1,
    ""Google LLC"": 12,
    ""Saba Hour Yeganeh Co. ( Private Joint Stock)"": 2,
    ""Horizon LLC"": 8,
    ""Telecom Argentina S.A"": 1,
    ""Akamai Technologies, Inc."": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Ethiotelecom"": 1,
    ""Chinanet"": 4,
    ""Chang Way Technologies Co. Limited"": 10,
    ""Interserver, Inc"": 1,
    ""Hangzhou Alibaba Advertising Co"": 1,
    ""o3 core"": 1,
    ""Aeza International LTD"": 1,
    ""Tefincom S.A."": 1,
    ""Charter Communications"": 1,
    ""Vietserver Services Technology Company Limited"": 14,
    ""DigitalOcean, LLC"": 217
  },
  ""org"": {
    ""MCI Communications Services, Inc. d/b/a Verizon Business"": 44,
    ""4Media Ltd"": 15,
    ""Saigon Postel Corporation"": 3,
    ""Flyservers S.A"": 17,
    ""Cloud Solutions S.A"": 4,
    ""Xhost Internet Solutions"": 4,
    ""M247 LTD"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Saba Abr Mizban LLC"": 2,
    ""Horizon LLC"": 8,
    ""Xhostis"": 2,
    ""Fibertel"": 1,
    ""Linode"": 1,
    ""UAB Host Baltic"": 4,
    ""Ucloud Information Technology"": 1,
    ""Unknown"": 2,
    ""Chinanet JS"": 3,
    ""Chang Way Technologies Co. Limited"": 10,
    ""Host Department NJ, LLC"": 1,
    ""Aliyun Computing Co., LTD"": 1,
    ""Aeza International LTD"": 1,
    ""Chinanet FJ"": 1,
    ""Packethub S.A"": 1,
    ""Spectrum"": 1,
    ""T-media Digital Technology Company Limited"": 14,
    ""Digitalocean"": 99,
    ""DigitalOcean, LLC"": 118
  },
  ""regionName"": {
    ""Pennsylvania"": 44,
    ""Plovdiv"": 15,
    ""Hanoi"": 17,
    ""Kaunas"": 17,
    ""Distrito Federal"": 4,
    ""North Holland"": 6,
    ""New York"": 1,
    ""California"": 13,
    ""Tehran"": 2,
    ""Moscow"": 18,
    ""Buenos Aires"": 1,
    ""New Jersey"": 2,
    ""Vilnius"": 4,
    ""Addis Ababa"": 1,
    ""Jiangsu"": 3,
    ""Beijing"": 1,
    ""Zhytomyr"": 1,
    ""Vienna"": 1,
    ""Fujian"": 1,
    ""Texas"": 2,
    ""South West"": 183,
    ""Central Singapore"": 34
  },
  ""country"": {
    ""United States"": 62,
    ""Bulgaria"": 15,
    ""Vietnam"": 17,
    ""Lithuania"": 21,
    ""Venezuela"": 4,
    ""The Netherlands"": 6,
    ""Iran"": 2,
    ""Russia"": 18,
    ""Argentina"": 1,
    ""Ethiopia"": 1,
    ""China"": 5,
    ""Ukraine"": 1,
    ""Austria"": 1,
    ""Singapore"": 217
  },
  ""account"": {
    ""hello"": 69,
    ""Domain"": 10,
    ""Administr"": 30,
    ""pid"": 1,
    ""MlJfKxrVH"": 1,
    ""pBqpEd"": 1,
    ""yDPYUe"": 1,
    ""(empty)"": 6,
    ""Test"": 11,
    ""qRJCKtVsR"": 1,
    ""vYQuUB"": 1,
    ""EiyUTT"": 1,
    ""Administrator"": 1,
    ""AaXZzDOik"": 1,
    ""IpLiCK"": 1,
    ""LsrPdf"": 1,
    ""DQSmhKCVK"": 1,
    ""afeiUO"": 1,
    ""wUDuyG"": 1,
    ""142.93.8.59"": 231
  },
  ""keyboard"": {
    ""Unknown"": 371
  },
  ""client_build"": {
    ""Unknown"": 371
  },
  ""client_name"": {
    ""Unknown"": 371
  },
  ""ip_type"": {
    ""Unknown"": 122,
    ""proxy"": 13,
    ""hosting & proxy"": 36,
    ""hosting"": 198,
    ""mobile"": 2
  }
}"
9K02t1uJ,Element,jdfls,Java,Wednesday 6th of December 2023 06:03:11 PM CDT,"import java.awt.*;

abstract public class Element{
    protected Point cord;
    protected final int size;
    private final int locationInList;

    public Element(Point cord, int size, int locationInList) {
        this.cord = cord;
        this.size = size;
        this.locationInList = locationInList;
    }
    public void setCord(Point cord) {
        this.cord = cord;
    }
    public Point getCord() {
        return cord;
    }
    public int getSize() {
        return size;
    }

    public int getLocationInList() {
        return locationInList;
    }

    abstract void draw(Graphics g);
}
    "
709csV2p,ImageElement,jdfls,Java,Wednesday 6th of December 2023 06:02:29 PM CDT,"import java.awt.*;

public class ImageElement extends Element{
    Image resizedImage;
    public ImageElement(Point cord, int size, Image image, int locationInList) {
        super(cord, size, locationInList);
        int circleSize = EmergencyClinicPlanner.circleSize;
        this.resizedImage = image.getScaledInstance(circleSize,circleSize,Image.SCALE_SMOOTH);
    }
    public Image getResizedImage() {
        return resizedImage;
    }

    @Override
    void draw(Graphics g) {
        g.drawImage(resizedImage,cord.x,cord.y,null);
    }
}"
3847z6jC,Community,jdfls,Java,Wednesday 6th of December 2023 05:59:56 PM CDT,"import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class Community extends Element {
    private boolean clinic; //this will determine whether the community is a clinic or not
    private final ArrayList<Community> neighbors;
    boolean coveredByClinic;

    public Community(boolean clinic, Point cord, int size, int locationInList) {
        super(cord,size, locationInList);
        this.clinic = clinic;
        if(clinic){
            coveredByClinic = true;
        }
        this.neighbors = new ArrayList<>();
    }

    @Override
    public void draw(Graphics g){
        if(clinic){
            g.setColor(Color.blue);
        }else{
            g.setColor(Color.gray);
        }
        g.fillOval(cord.x, cord.y, size,size);
        if(neighbors != null && !neighbors.isEmpty()){
            for(Community neighbour : neighbors){
                g.setColor(Color.black);
                Point centerPoint = (Point) cord.clone();
                centerPoint.x += size/2;
                centerPoint.y += size/2;
                Point endCenterPoint = (Point)neighbour.getCord().clone();
                endCenterPoint.x += neighbour.getSize()/2;
                endCenterPoint.y += neighbour.getSize()/2;
                g.drawLine(centerPoint.x,centerPoint.y,endCenterPoint.x,endCenterPoint.y);
            }
        }
    }
    public void addNeighbor(Community neighbor) {
        neighbors.add(neighbor);
        neighbor.neighbors.add(this);
    }
    public void removeNeighbor(Community neighbor){
        neighbors.remove(neighbor);
        neighbor.neighbors.remove(this);
    }
    public void removeAllNeighbor(){
        for(Community neighbor : neighbors){
            neighbor.neighbors.remove(this);
        }
    }
    public boolean isClinic() {
        return clinic;
    }
    public boolean isCoveredByClinic() {
        return coveredByClinic;
    }

    public void setCoveredByClinic(boolean coveredByClinic) {
        this.coveredByClinic = coveredByClinic;
    }
    public List<Community> getNeighbors() {
        return neighbors;
    }

    public void setClinic(boolean clinic) {
        this.clinic = clinic;
    }
}"
7v4vuUf3,Main,jdfls,Java,Wednesday 6th of December 2023 05:59:00 PM CDT,"import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

public class EmergencyClinicPlanner{
    JFrame frame;
    GraphicsPanel canvas;
    Toolkit t = Toolkit.getDefaultToolkit();
    JButton start;
    public static ArrayList<Element> communities = new ArrayList<>(); //index: 0 = grey circle selection button 1 = clinic circle selection button
    private static int selected = -1; // the index of currently selected element on the screen.
    int CanvasWidth = 1000;
    int CanvasLength = 700;
    public static int circleSize = 75;
    private static boolean drawingLine;
    private static int lineOrigin = -1; //when drawing line, this will be where the line comes from
    EmergencyClinicPlanner(){
        MouseListener mouseListener = new mouseListener();
        frame = new JFrame(""This is a frame with canvas for drawing."");
        frame.setSize(CanvasWidth, CanvasLength);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        canvas = new GraphicsPanel();  //this is a custom panel to draw graphics
        canvas.addMouseListener(mouseListener);
        frame.add(canvas);
        frame.setVisible(true);
    }
    public class GraphicsPanel extends JPanel {
        GraphicsPanel(){
            Point grayCircleCords = new Point(CanvasWidth / 4 -circleSize/2, CanvasLength - CanvasLength /4 + circleSize/2);
            communities.add(new Community(false,grayCircleCords,circleSize,communities.size()));
            Point blueCircleCords = new Point(0, CanvasLength - CanvasLength /4+ circleSize/2);
            communities.add(new Community(true,blueCircleCords,circleSize,communities.size()));
            Point deleteBoxCords = new Point(CanvasWidth -circleSize*2,0);
            communities.add(new ImageElement(deleteBoxCords,circleSize,t.getImage(""trash.png""),communities.size()));
            Point lineButtonCords = new Point(CanvasWidth /4*2-circleSize/2, CanvasLength - CanvasLength /4 + circleSize/2);
            communities.add(new ImageElement(lineButtonCords,circleSize,t.getImage(""Lines.png""),communities.size()));
            Point startButtonCords = new Point(CanvasWidth -circleSize*2, CanvasLength - CanvasLength /4 + circleSize/2);
            communities.add(new ImageElement(startButtonCords,circleSize,t.getImage(""StartButton.jpg""),communities.size()));
        }
        public void paintComponent(Graphics g) {
            super.paintComponent(g); // Call superclass method
            // Draw bottom bar
            g.setColor(Color.DARK_GRAY);
            g.fillRect(0, CanvasLength - CanvasLength / 4, CanvasWidth, CanvasLength / 5);
            // Draw selected button
            if (selected != -1) {
                Point p = communities.get(selected).getCord();
                // Draw cyan or green based on conditions
                Color selectedColor = (selected <= 3 && selected != 2) ? Color.CYAN : Color.GREEN;
                g.setColor(selectedColor);
                g.fillRect(p.x, p.y, circleSize, circleSize);
                // Draw magenta if drawing line
                if (drawingLine) {
                    g.setColor(Color.MAGENTA);
                    for (int i = 5; i < communities.size(); i++) {
                        Point p2 = communities.get(i).getCord();
                        g.fillRect(p2.x, p2.y, circleSize, circleSize);
                    }
                }
            }
            // Draw elements
            for (Element c : communities) {
                c.draw(g);
            }
        }
    }
    public static void placeOptimalClinics() {
        System.out.println(""Started"");
        Set<Community> communitiesWithClinics = new HashSet<>();
        Set<Community> uncoveredCommunities = new HashSet<>();
        for (Element element : communities.subList(5, communities.size())) {
            Community c = (Community) element;
            if(c.isClinic()){
                communitiesWithClinics.add(c);
            }else{
                uncoveredCommunities.add(c);
            }
        }

        while (!uncoveredCommunities.isEmpty()) {
            int maxUncoveredNeighbors = -1;
            Community communityWithMaxUncovered = null;
            for (Community community : uncoveredCommunities) {
                if (!community.isCoveredByClinic()) {
                    int uncoveredNeighbors = 0;
                    for (Community neighbor : community.getNeighbors()) {
                        if (!neighbor.isCoveredByClinic() && !communitiesWithClinics.contains(neighbor)) {
                            uncoveredNeighbors++;
                        }
                    }
                    if (uncoveredNeighbors > maxUncoveredNeighbors) {
                        maxUncoveredNeighbors = uncoveredNeighbors;
                        communityWithMaxUncovered = community;
                    }
                }
            }
            if (communityWithMaxUncovered != null) {
                Community community = (Community) communities.get(communityWithMaxUncovered.getLocationInList());
                community.setClinic(true);
                communityWithMaxUncovered.setCoveredByClinic(true);
                uncoveredCommunities.remove(communityWithMaxUncovered);
                communitiesWithClinics.add(communityWithMaxUncovered);

                for (Community neighbor : communityWithMaxUncovered.getNeighbors()) {
                    if (!neighbor.isCoveredByClinic() && !communitiesWithClinics.contains(neighbor)) {
                        neighbor.setCoveredByClinic(true);
                        uncoveredCommunities.remove(neighbor);
                    }
                }
            }
        }
        System.out.println(""finished"");
    }
    public class mouseListener implements MouseListener{
        @Override
        public void mouseClicked(MouseEvent e) {
            if(e.getPoint().y > CanvasLength *0.75){ //selection is out of bounds
                selected = -1;
            }
            int currentIndex = findIndexFromPoint(e.getPoint());
            mouseClickLogic(currentIndex,e);
            canvas.repaint();
        }
        public void mousePressed(MouseEvent e) {}
        public void mouseReleased(MouseEvent e) {}
        public void mouseEntered(MouseEvent e) {}
        public void mouseExited(MouseEvent e) {}
    }
    private static int findIndexFromPoint(Point point){
        for(int i = 0; i < communities.size(); i++){
            Point element = communities.get(i).getCord();
            if((element.x + circleSize - point.x >=0 && point.x > element.x)&&(element.y + circleSize - point.y >=0 && point.y > element.y)){
                return i;
            }
        }
        return -1;
    }
    private static Point getCenteredPointForCircleFromMousePoint(Point p, int circleSize){
        int x = p.x - circleSize/2;
        int y = p.y - circleSize/2;
        return new Point(x,y);
    }
    private static void mouseClickLogic(int currentIndex, MouseEvent e){
        if(drawingLine && currentIndex == -1){
            drawingLine = false;
            lineOrigin = -1;
            selected = -1;
        }
        if(selected == 0 || selected == 1){ //if selected the generate circle buttons
            boolean blue = selected == 1;
            communities.add(new Community(blue, getCenteredPointForCircleFromMousePoint(e.getPoint(),circleSize),circleSize,communities.size()));
            selected = -1;
        }else if(selected > 2){ //if selected elements that is not one of the draw circle buttons
            if(currentIndex == 2 && selected != 3){ //removing element if clicked on trash can
                ((Community) communities.get(selected)).removeAllNeighbor();
                communities.remove(selected);
                selected = -1;
            }else if(currentIndex == -1 && selected != 3){ // if blank space then move the element
                communities.get(selected).setCord(getCenteredPointForCircleFromMousePoint(e.getPoint(),circleSize));
                selected = -1;
            }else if(drawingLine){
                if(lineOrigin == -1){
                    lineOrigin = currentIndex;
                }else{
                    drawingLine = false;
                    Community og =(Community) communities.get(lineOrigin);
                    Community cur = (Community) communities.get(currentIndex);
                    lineOrigin = -1;
                    og.addNeighbor(cur);
                    if(og.isClinic()){
                        cur.setCoveredByClinic(true);
                    }
                    if(cur.isClinic()){
                        og.setCoveredByClinic(true);
                    }
                    selected = -1;
                }
            }
        }else if(currentIndex == 4){ // starting the algorithm
//            for(int i = 5; i < communities.size(); i++){
//                Community c = (Community) communities.get(i);
//                if(!c.coveredByClinic){
//                    c.setClinic(true);
//                }
//            }
            placeOptimalClinics();
        }else { //select an element
            selected = currentIndex;
            if(selected == 3){
                drawingLine = true;
            }
        }
    }
    //------------------------------------------------------------------------------
    public static void main(String[] args) throws IOException {
        EmergencyClinicPlanner demo = new EmergencyClinicPlanner();
    }
}"
DSWBTS6v,Untitled,ccbackups,Lua,Wednesday 6th of December 2023 04:46:06 PM CDT,"local modules = peripheral.find(""manipulator"") or peripheral.find(""neuralInterface"")
if not modules then
	error(""Must have neural interface or manipulator"", 0)
end
if not modules.hasModule(""plethora:sensor"") then
	error(""The entity sensor is missing"", 0)
end
if not modules.hasModule(""plethora:introspection"") then
	error(""The introspection module is missing"", 0)
end
local inv = modules.getInventory()
local cachedSlot = false
while true do
local data = modules.getMetaOwner()
	while data.food.hungry do
local item
		if cachedSlot then
			local slotItem = inv.getItem(cachedSlot)
			if slotItem and slotItem.consume then
				item = slotItem
			else
				cachedSlot = nil
			end
		end
if not item then
			for slot, meta in pairs(inv.list()) do
				local slotItem = inv.getItem(slot)
				if slotItem and slotItem.consume then
					print(""Using food from slot "" .. slot)
					item = slotItem
					cachedSlot = slot
					break
				end
			end
		end
if item then
			item.consume()
		else
			print(""Cannot find food"")
			break
		end
	data = modules.getMetaOwner()
	end
	sleep(5)
end"
BWj0FbGB,flexa grid,kerlser,CSS,Wednesday 6th of December 2023 04:27:52 PM CDT,"
:root:not([customizing]) #navigator-toolbox {
    display: grid !important;
    grid-template-areas: 
             "" b a ""
             "" c c "";
    /*grid-template-columns:  60vw 40vw;*/
}

#nav-bar {
    background-color: hsla(120, 50%, 80%, 1) !important;
    grid-area: a;
}

#TabsToolbar {
    background-color: hsla(35, 80%, 80%, 1) !important;
    grid-area: b;
    min-width: 60vw !important;
}

#PersonalToolbar {
    background-color: hsla(200, 50%, 85%, 1) !important;
    grid-area: c;
}

#tabbrowser-tabs:not([overflow]) {
    --ug_tabs_position: safe flex-start;
}

scrollbox[orient=""horizontal""] {
    justify-content: var(--ug_tabs_position, initial) !important;
}

#urlbar-container {
    flex-shrink: 1 !important;
}

.titlebar-spacer { 
    width: 8px !important;
}
.titlebar-buttonbox-container {
    display: none !important;
}"
69G4Fdqv,gafkd,MagmaLP,Lua,Wednesday 6th of December 2023 04:25:55 PM CDT,"os.loadAPI(""ocs/apis/sensor"")
sen = sensor.wrap(""right"")

s = sen.getTargets()
function getS()
    for v, k  in pairs(s) do
        if k.Name == ""ME Wireless Access Point"" then   
            target = v
        end
    end
    return target
end

f = getS()
s1 = sen.getTargetDetails(target)

for _, item in pairs(s1.Items) do
    if item.Name == ""Wool"" then
        print(item.Name)
    end
    sleep(1)
end"
A5KjzJ8i,list number of files and total size by extension,sebbu,Bash,Wednesday 6th of December 2023 03:25:10 PM CDT,"#!/bin/bash
LC_ALL=C find . -name '?*.*' -type f -printf '%s.%f\0' |
LC_ALL=C gawk -F . -v RS='\0' '
	{
		if(NF==2) $(NF+1)="" "";	
		s[$NF] += $1;
		n[$NF]++
	}
	END {
		PROCINFO[""sorted_in""] = ""@val_num_asc""
		for (e in s) printf ""%15d %4d %s\n"", s[e], n[e], e
	}' |
numfmt --to=iec-i --suffix=B
"
AjaTFfA0,Untitled,vijayviji,Go,Wednesday 6th of December 2023 03:05:45 PM CDT,"package main

import (
	""fmt""
	""math/rand""
	""strconv""
	""time""
)

type Client struct {
	id string
}

type Params struct {
	client *Client
}

var globalClient *Client

func main() {
	params := Params{client: globalClient}
	globalClient = get(params)
	fmt.Println(globalClient)

	params = Params{client: globalClient}
	globalClient = get(params)
	fmt.Println(globalClient)

	params = Params{client: globalClient}
	globalClient = get(params)
	fmt.Println(globalClient)
}

func get(params Params) *Client {
	if params.client == nil {
		return &Client{id: getRandomStrId()}
	}

	return params.client
}

func getRandomStrId() string {
	rand.Seed(time.Now().UnixNano())
	return strconv.FormatInt(int64(rand.Intn(100)), 10)
}
"
Yz7Ewwyq,Untitled,KallazZ,MySQL,Wednesday 6th of December 2023 02:30:46 PM CDT,"CREATE PROCEDURE IF NOT EXISTS insert_zawody()
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE pesel_var CHAR(11);
    DECLARE imie_var VARCHAR(30);
    DECLARE nazwisko_var VARCHAR(30);
    DECLARE data_urodzenia_var DATE;
    DECLARE plec_var CHAR;
    DECLARE zawod_id_var INT;
    DECLARE pensja_var FLOAT;
    DECLARE pensja_min_var FLOAT;

    DECLARE pelnoletni_cursor CURSOR FOR
            SELECT PESEL, imie, nazwisko, data_urodzenia, plec
            FROM Ludzie
            WHERE YEAR(CURDATE()) - YEAR(data_urodzenia) >= 18;
    DECLARE CONTINUE HANDLER FOR NOT FOUND
        SET done = TRUE;

    OPEN pelnoletni_cursor;

    r: LOOP
        FETCH pelnoletni_cursor INTO pesel_var, imie_var, nazwisko_var, data_urodzenia_var, plec_var;
        IF done THEN
            LEAVE r;
        END IF;

        IF plec_var = 'M' AND YEAR(CURDATE()) - YEAR(data_urodzenia_var) <= 65 OR
           plec_var = 'K' AND YEAR(CURDATE()) - YEAR(data_urodzenia_var) <= 60 THEN
            SET zawod_id_var = FLOOR(RAND() * 4) + 1; -- Z lekarzami
            SET pensja_var = ROUND(RAND() * (SELECT (pensja_max + 1) FROM Zawody WHERE zawod_id = zawod_id_var), 2);
            SET pensja_min_var = (SELECT pensja_min FROM Zawody WHERE zawod_id = zawod_id_var);
            IF pensja_var < pensja_min_var THEN
                SET pensja_var = pensja_min_var;
            END IF;
        ELSE
            SET zawod_id_var = FLOOR(RAND() * 3) + 1; -- Bez lekarzy
            SET pensja_var = ROUND(RAND() * (SELECT (pensja_max + 1) FROM Zawody WHERE zawod_id = zawod_id_var), 2);
            SET pensja_min_var = (SELECT pensja_min FROM Zawody WHERE zawod_id = zawod_id_var);
            IF pensja_var < pensja_min_var THEN
                SET pensja_var = pensja_min_var;
            END IF;
        END IF;

        INSERT INTO Pracownicy (PESEL, zawod_id, pensja)
        VALUES (pesel_var, zawod_id_var, pensja_var);
    END LOOP;

    CLOSE pelnoletni_cursor;
END;"
RpXiBN0s,main server,--Kivi--,Lua,Wednesday 6th of December 2023 02:14:09 PM CDT,"local bridge = peripheral.find(""rsBridge"")


function create(name,m,n)
    name = {}
    for i = 1,n do
      map[i] = {}
      for j = 1,m do
        map[i][j] = 0
      end
    end 
end
    function save(table,name)
    local file = fs.open(name,""w"")
    file.write(textutils.serialize(table))
    file.close()
    end
     
    function load(name)
    local file = fs.open(name,""r"")
    local data = file.readAll()
    file.close()
    return textutils.unserialize(data)
    end

function dump(o)
    if type(o) == 'table' then
       local s = '{ '
       for k,v in pairs(o) do
          if type(k) ~= 'number' then k = '""'..k..'""' end
          s = s .. '['..k..'] = ' .. dump(v) .. ','
       end
       return s .. '} '
    else
       return tostring(o)
    end
 end
 

while true do
    local rawdata = bridge.listItems()
    
    for k, v in pairs(rawdata) do
        local amountData
        local nameData
        local idData

        for dk, dv in pairs(v) do
            if dk == ""displayName"" then
                nameData = string.sub(dv, 2, string.len(dv) - 1)
                nameData = string.gsub(nameData, "" "", ""_"")
            end

            if dk == ""amount"" then
                amountData = dv
            end

            if dk == ""name"" then
                idData = dv
            end
        end

        local rqstring = ""http://factory.henta.hu/inv_data?name="" .. nameData .. ""&amount="" .. amountData .. ""&id="" .. idData;
        print(rqstring)

        local response = http.get(rqstring)
        if response == nil then
            print(""Request failed"")
        end
    end    

    
    print(""Done."");

    sleep(45)
end"
QHKFTdaA,D1MINI+LD2410,jacekw7,YAML,Wednesday 6th of December 2023 02:05:34 PM CDT,"esphome:
  name: esphome-web-55c8f6
  friendly_name: ESP_D1MINI_1

esp8266:
  board: esp01_1m

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: ""6VQdtAN17gnvHp3tb05fPdgeC/3iqXbAytJKRXNBv1M=""

ota:


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ""Esphome-Web-55C8F6""
    password: ""kx8i6GdzGzxQ""

captive_portal:

# ESPHome Example configuration entry
uart:
  id: uart_modbus
  tx_pin: 1
  rx_pin: 3
  baud_rate: 256000
  parity: NONE
  stop_bits: 1

binary_sensor:
  - platform: ld2410
    has_target:
      name: Presence
    has_moving_target:
      name: Moving Target
    has_still_target:
      name: Still Target
    out_pin_presence_status:
      name: out pin presence status

ld2410:

sensor:
  - platform: ld2410
    light:
      name: light
    moving_distance:
      name : Moving Distance
    still_distance:
      name: Still Distance
    moving_energy:
      name: Move Energy
    still_energy:
      name: Still Energy
    detection_distance:
      name: Detection Distance
    g0:
      move_energy:
        name: g0 move energy
      still_energy:
        name: g0 still energy
    g1:
      move_energy:
        name: g1 move energy
      still_energy:
        name: g1 still energy
    g2:
      move_energy:
        name: g2 move energy
      still_energy:
        name: g2 still energy
    g3:
      move_energy:
        name: g3 move energy
      still_energy:
        name: g3 still energy
    g4:
      move_energy:
        name: g4 move energy
      still_energy:
        name: g4 still energy
    g5:
      move_energy:
        name: g5 move energy
      still_energy:
        name: g5 still energy
    g6:
      move_energy:
        name: g6 move energy
      still_energy:
        name: g6 still energy
    g7:
      move_energy:
        name: g7 move energy
      still_energy:
        name: g7 still energy
    g8:
      move_energy:
        name: g8 move energy
      still_energy:
        name: g8 still energy

switch:
  - platform: ld2410
    engineering_mode:
      name: ""engineering mode""
    bluetooth:
      name: ""control bluetooth""

number:
  - platform: ld2410
    timeout:
      name: timeout
    light_threshold:
      name: light threshold
    max_move_distance_gate:
      name: max move distance gate
    max_still_distance_gate:
      name: max still distance gate
    g0:
      move_threshold:
        name: g0 move threshold
      still_threshold:
        name: g0 still threshold
    g1:
      move_threshold:
        name: g1 move threshold
      still_threshold:
        name: g1 still threshold
    g2:
      move_threshold:
        name: g2 move threshold
      still_threshold:
        name: g2 still threshold
    g3:
      move_threshold:
        name: g3 move threshold
      still_threshold:
        name: g3 still threshold
    g4:
      move_threshold:
        name: g4 move threshold
      still_threshold:
        name: g4 still threshold
    g5:
      move_threshold:
        name: g5 move threshold
      still_threshold:
        name: g5 still threshold
    g6:
      move_threshold:
        name: g6 move threshold
      still_threshold:
        name: g6 still threshold
    g7:
      move_threshold:
        name: g7 move threshold
      still_threshold:
        name: g7 still threshold
    g8:
      move_threshold:
        name: g8 move threshold
      still_threshold:
        name: g8 still threshold

button:
  - platform: ld2410
    factory_reset:
      name: ""factory reset""
    restart:
      name: ""restart""
    query_params:
      name: query params

text_sensor:
  - platform: ld2410
    version:
      name: ""firmware version""
    mac_address:
      name: ""mac address""

select:
  - platform: ld2410
    distance_resolution:
      name: ""distance resolution""
    baud_rate:
      name: ""baud rate""
    light_function:
      name: light function
    out_pin_level:
      name: out pin level
"
WVeRgdgd,Clover Retribution Auto Flower,Malachoni,Lua,Wednesday 6th of December 2023 01:30:14 PM CDT,"_G.Condition = 1
while _G.Condition == 1 do
local UwU = game.Players.LocalPlayer.Character.HumanoidRootPart
for i,v in pairs(game.workspace.Entities.Interactions.Collectibles.Flowers.GrasslandFlowers:GetChildren()) do
UwU.CFrame = v.CFrame
task.wait(0.2)
fireproximityprompt(workspace.Entities.Interactions.Collectibles.Flowers.GrasslandFlowers.Flower.ProximityPrompt, 1, true)
task.wait(0.5)
end
end
"
1ArD4RaU,Example Code,CantFindGeorge,JavaScript,Wednesday 6th of December 2023 01:29:30 PM CDT,"// Random Name Table -- Created By CantFindGeorge


// CHANGE THIS CODE //
race = ""TEST"";

maleNameTable = await fromUuid('Compendium.world.roll-tables.RollTable.HQXKQYuKtiXQNA9k');
femaleNameTable = await fromUuid('Compendium.world.roll-tables.RollTable.4RQoSBfBuWpj8L9O');
otherNameTable = await fromUuid('Compendium.world.roll-tables.RollTable.VE6wmERYaMaktEIo');

surnameTable = await fromUuid('Compendium.world.roll-tables.RollTable.VE6wmERYaMaktEIo');

const options = [""Male"",""Female""];
// CHANGE THIS CODE


//Find value from array
const randomElement = Math.floor(Math.random() * options.length);


// Determine Fist Name table based on gender
let firstNameTable

    if (randomElement = ""Male""){
        firstNameTable = maleNameTable;    
    }

    if (randomElement = ""Female""){
        firstNameTable = femaleNameTable;
    }

    else {
        firstNameTable = otherNameTable
    }


// Creates Name 1
const firstNameDraw1 = await firstNameTable.draw({displayChat: false});
const firstName1 = firstNameDraw1.results[0].getChatText();

const lastNameDraw1 = await surnameTable.draw({displayChat: false});
const lastName1 = lastNameDraw1.results[0].getChatText();


// Creates Name 2
const firstNameDraw2 = await firstNameTable.draw({displayChat: false});
const firstName2 = firstNameDraw2.results[0].getChatText();

const lastNameDraw2 = await surnameTable.draw({displayChat: false});
const lastName2 = lastNameDraw2.results[0].getChatText();


// Creates Name 3
const firstNameDraw3 = await firstNameTable.draw({displayChat: false});
const firstName3 = firstNameDraw3.results[0].getChatText();

const lastNameDraw3 = await surnameTable.draw({displayChat: false});
const lastName3 = lastNameDraw3.results[0].getChatText();


// Creates Name 4
const firstNameDraw4 = await firstNameTable.draw({displayChat: false});
const firstName4 = firstNameDraw4.results[0].getChatText();

const lastNameDraw4 = await surnameTable.draw({displayChat: false});
const lastName4 = lastNameDraw4.results[0].getChatText();


// Creates Name 5
const firstNameDraw5 = await firstNameTable.draw({displayChat: false});
const firstName5 = firstNameDraw5.results[0].getChatText();

const lastNameDraw5 = await surnameTable.draw({displayChat: false});
const lastName5 = lastNameDraw5.results[0].getChatText();


// Create Chat Msg
await ChatMessage.create({
    content: `<br><h2>Random ${randomElement} ${race} Names</h2><br>• ${firstName1} ${lastName1}<br>• ${firstName2} ${lastName2}<br>• ${firstName3} ${lastName3}<br>• ${firstName4} ${lastName4}<br>• ${firstName5} ${lastName5}<br><br>`,

    whisper : ChatMessage.getWhisperRecipients(""GM"")
});"
Gk4iJbxC,Woodchopping,Ttijs,Lua,Wednesday 6th of December 2023 01:20:23 PM CDT,"--Turtle go get some wood

-- Idee
-- A turtle gets a specific area where he needs to chop a specific wood sort. (only for single trees)

--Variables

WoodSort = ""minecraft:spruce_log""

Area = {0, 0}

position = {x, y, z}
x = 0
y = 0
z = 0

Direction = ""N""

--Functions

--GIU

function StartUp()
    local x, y = term.getSize()
    term.clear()
    term.setTextColor(colors.white)
    term.setCursorPos(1,1)
    term.write(""Starting system..."")
    sleep(1)
    term.setCursorPos(1,2)
    term.write(""Loading..."")
    sleep(2)
    term.setCursorPos(1,3)
    term.write(""Getting data"")
    sleep(1)
    term.setCursorPos(1,4)
    term.write(""Done"")
end

function SettingArea()
    while true do
        local w, h = term.getSize()
        
        
        term.clear()
        term.setTextColor(colors.white)
        term.setCursorPos(w/2-2, 1)
        term.write(""Area"")
        term.setCursorPos(1,2)
        term.write(""x = ""..Area[1])
        term.setCursorPos(1,3)
        term.write(""y = ""..Area[2])
        term.setCursorPos(w/2-15, h-3)
        term.write(""Specify your x"")
        term.setCursorPos(w/2+1, h-3)
        term.write(""Specify your y"")
        term.setCursorPos(w/2-8, h-1)
        term.write(""Continue Program."")
        
        local event, button, x, y = os.pullEvent(""mouse_click"")
        if x >= w/2-16 and x <= w/2-1 and y == h-3 and button == 1 then
            term.clear()
            term.setCursorPos(w/2-7 ,h/2-1)
            term.write(""Specify your x"")
            term.setCursorPos(w/2-8, h)
            term.write(""Enter to continue"")
            term.setCursorPos(w/2-1,h/2)
            input = read()
            Area[1] = input
        end
        if x>= w/2+1 and x <= w and y == h-3 and button == 1 then
            term.clear()
            term.setCursorPos(w/2-7 ,h/2-1)
            term.write(""Specify your y"")
            term.setCursorPos(w/2-8, h)
            term.write(""Enter to continue"")
            term.setCursorPos(w/2-1,h/2)
            input = read()
            Area[2] = input
        end
        if x>= w/2-9 and x <= w/2+9 and y == h-1 and button == 1 then
            break
        end
    end      
end

function ChekkingIfGood()
    local w, h = term.getSize()
    if Area[1] ~= 0 and Area[2] ~= 0 then
        term.clear()
        term.setCursorPos(w/2-8, h/2)
        term.write(""Everything is Ok!"")
    else
        term.clear()
        term.setCursorPos(w/2-8, h/2)
        term.write(""Check everything!"")
        SettingArea()
    end
    sleep(3)
    term.clear()
    term.setCursorPos(1,1)
end

--Real Stuff

function Refuel()
    local FuelL = turtle.getFuelLevel()
    if (FuelL < 50) then
        for i= 1, 16 do
            local DetailI = turtle.getItemDetail(i)
            if not (DetailI==nil) then
                if  DetailI.name==""minecraft:coal"" or DetailI == ""minecraft:coal_block"" or DetailI == ""minecraft:charcoal"" or DetailI == ""minecraft:lava_bucket"" or DetailI == ""minecraft:dried_kelp_block"" then
                    turtle.select(i)
                    turtle.refuel(5)
                end
            end
        end
    end
end

function North()
    if Direction == ""E"" then
        turtle.turnleft()
    elseif Direction == ""S"" then 
        turtle.turnleft()
        turtle.turnleft()
    elseif Direction == ""W"" then
        turtle.turnright()
    end
    Direction = ""N""
end

function East()
    if Direction == ""S"" then
        turtle.turnleft()
    elseif Direction == ""W"" then
        turtle.turnleft()
        turtle.turnleft()
    elseif Direction == ""N"" then
        turtle.turnright()
    end
    Direction = ""E""
end

function South()
    if Direction == ""W"" then
        turtle.turnleft()
    elseif Direction == ""N"" then
        turtle.turnleft()
        turtle.turnleft()
    elseif Direction == ""E"" then
        turtle.turnright()
    end
    Direction = ""S""
end

function West()
    if Direction == ""N"" then
        turtle.turnleft()
    elseif Direction == ""E"" then
        turtle.turnleft()
        turtle.turnleft()
    elseif Direction == ""S"" then
        turtle.turnright()
    end
    Direction = ""W""
end

function Forward()
    turtle.forward()
    if Direction == ""N"" then
        x = x + 1
    elseif Direction == ""E"" then
        y = y + 1
    elseif Direction == ""S"" then
        x = x - 1
    elseif Direction == ""W"" then
        y = y - 1
    end
end

function Up()
    turlte.up()
    z = z + 1
end

function Down()
    turtle.down()
    z = z -1
end

function TreePlanting()
    if y == 1 then  
        for i = 1, 16 do
            local DetailI = turtle.getItemDetail()
            if not (DetailI == nil) then
                if DetailI.name == ""minecraft:spruce_sapling"" then
                    turtle.select(i)
                    turtle.placeDown()
                end
            end
        end
    end
end

function TreeChopping()
    local Block, data = turtle.inspect()
    if Block then
        if data.name == WoodSort then
            turtle.dig()
            Forward()
        end
    end
    
    local Block, data = turtle.inspectUp()
    if Block then
        if data.name == WoodSort then
            turtle.digUp()
            Up()
        end
    end
end

function Ground()
    local Block, data = turtle.inspectUp()
    if Block then
        while data.name ~= WoodSort and y ~= 0 do
            Down()
        end
    end
end

function Turning()
    if Direction == ""N"" and x == Area[1] then
        West()
        Forward()
        South()
    elseif Direction == ""S"" and x == 0 then
        East()
        Forward()
        North()
    end
end

function ReturningToBegin()
    if y == Area[2] then
        West()
        forward()
        while x ~= -1 do
            South()
            forward()
        end
        while y ~= 0 do
            East()
            forward()
        end
        North()
        forward()
    end
end

--Main Code

--GUI
StartUp()
SettingArea()
ChekkingIfGood()

--What the turtle does
Refuel()
TreePlanting()
TreeChopping()
Ground()
Forward()
Turning()
ReturningToBegin()
"
qdVrRgeh,Dall-E 3.0 Desktop Ui Python Script,getivan,Python,Wednesday 6th of December 2023 01:18:36 PM CDT,"# Tutorial: https://www.youtube.com/watch?v=OatbzMJIfJM
# pip install requests Pillow openai
import tkinter as tk
from tkinter import filedialog, ttk, messagebox, Canvas, Scrollbar
from openai import OpenAI
import threading
import requests
from PIL import Image, ImageTk
import io
import os
import uuid

# Save the API key securely
def save_api_key():
    with open('api_key.txt', 'w') as file:
        file.write(api_key_entry.get())

# Load the API key securely
def load_api_key():
    try:
        with open('api_key.txt', 'r') as file:
            api_key_entry.insert(0, file.read())
    except FileNotFoundError:
        messagebox.showerror(""Error"", ""API Key file not found."")

# Function to generate and display image(s)
def generate_image_thread():
    threading.Thread(target=generate_image).start()

def generate_image():
    clear_image_grid()  # Added line to clear the image grid
    status_label.config(text=""Running"")
    client = OpenAI(api_key=api_key_entry.get())
    prompt = prompt_entry.get(""1.0"", tk.END).strip()
    size = size_var.get()
    quality = quality_var.get()
    num_images = int(num_images_var.get())

    progress_bar['maximum'] = num_images
    progress_bar['value'] = 0

    try:
        image_counter = 0
        for _ in range(num_images):
            response = client.images.generate(
                model=""dall-e-3"",
                prompt=prompt,
                size=size,
                quality=quality,
                n=1,
            )
            img_url = response.data[0].url
            img_response = requests.get(img_url)
            img = Image.open(io.BytesIO(img_response.content))

            display_img = img.copy()
            display_img.thumbnail((400, 400))  # Resize for display
            tk_img = ImageTk.PhotoImage(display_img)

            image_label = tk.Label(image_frame, image=tk_img)
            image_label.image = tk_img
            image_label.grid(row=0, column=image_counter, padx=5, pady=5)
            image_counter += 1

            filename = f'{uuid.uuid4()}.png'
            img.save(os.path.join(save_folder.get(), filename))

            progress_bar['value'] += 1
            root.update_idletasks()

    except Exception as e:
        messagebox.showerror(""Error"", f""An error occurred: {e}"")

    status_label.config(text=""Idle"")

# Function to select save folder
def select_save_folder():
    folder_selected = filedialog.askdirectory()
    save_folder.set(folder_selected if folder_selected else save_folder.get())

# Function to clear image grid
def clear_image_grid():
    for widget in image_frame.winfo_children():
        widget.destroy()

# Custom style improvements
def apply_custom_style(root):
    style = ttk.Style(root)
    style.theme_use('clam')

    # Customizing general widget styles 
    style.configure('TLabel', background='#333333', foreground='#DDDDDD', font=('Arial', 14, 'bold'))
    style.configure('TEntry', fieldbackground='#555555', foreground='#EEEEEE', font=('Arial', 14, 'bold'))
    style.configure('TButton', background='#444444', foreground='#FFFFFF', font=('Arial', 14, 'bold'), borderwidth=1)
    style.configure('TCheckbutton', background='#333333', foreground='#FFFFFF', font=('Arial', 14, 'bold'))
    style.configure('TFrame', background='#333333')
    style.configure('Horizontal.TProgressbar', background='#5AA33F', troughcolor='#333333')
    style.configure('TCombobox', font=('Arial', 12))  # Adjusting font size for dropdown menus

    # Customizing specific widget styles
    style.map('TButton', background=[('active', '#555555')], foreground=[('active', '#FFFFFF')])
    return style

# Horizontal Scrollable Image Frame
def create_scrollable_image_frame(root):
    canvas = Canvas(root, bg=""#333333"")
    scrollbar = Scrollbar(root, orient=""horizontal"", command=canvas.xview)
    scrollable_frame = ttk.Frame(canvas)

    scrollable_frame.bind(
        ""<Configure>"",
        lambda e: canvas.configure(
            scrollregion=canvas.bbox(""all"")
        )
    )

    canvas.create_window((0, 0), window=scrollable_frame, anchor=""nw"")
    canvas.configure(xscrollcommand=scrollbar.set)

    canvas.pack(side=""top"", fill=""both"", expand=True)
    scrollbar.pack(side=""bottom"", fill=""x"")

    return scrollable_frame

# Create the main window
root = tk.Tk()
root.title(""dall-e-desktop-ui"")
root.geometry('800x800')  # Set initial size
root.config(bg=""#333333"")

apply_custom_style(root)  # Apply custom styles

# Variables for UI elements
size_var = tk.StringVar(value=""1024x1024"")
quality_var = tk.StringVar(value=""standard"")
num_images_var = tk.StringVar(value=""1"")
save_folder = tk.StringVar(value=os.path.expanduser(""~""))

# API Key UI
api_key_label = ttk.Label(root, text=""API Key:"")
api_key_label.pack(pady=(10, 0))
api_key_entry = ttk.Entry(root)
api_key_entry.pack(padx=10, pady=5)
save_api_button = ttk.Button(root, text=""Save API Key"", command=save_api_key)
save_api_button.pack(pady=5)

# Dropdowns for Size, Quality, and Number of Images
settings_frame = ttk.Frame(root)
settings_frame.pack(padx=10, pady=10, fill='x')
ttk.Label(settings_frame, text=""Image Size:"").pack(side='left')
ttk.Combobox(settings_frame, textvariable=size_var, values=[""1024x1024"", ""1024x1792"", ""1792x1024""]).pack(side='left')
ttk.Label(settings_frame, text=""Image Quality:"").pack(side='left')
ttk.Combobox(settings_frame, textvariable=quality_var, values=[""standard"", ""hd""]).pack(side='left')
ttk.Label(settings_frame, text=""Number of Images:"").pack(side='left')
ttk.Combobox(settings_frame, textvariable=num_images_var, values=[str(x) for x in range(1, 11)]).pack(side='left')

# Prompt Text Area
prompt_label = ttk.Label(root, text=""Prompt:"")
prompt_label.pack(pady=(10, 0))
prompt_entry = tk.Text(root, height=4)
prompt_entry.pack(fill='both', expand=True, padx=10, pady=5)

# Save Folder UI
save_folder_frame = ttk.Frame(root)
save_folder_frame.pack(padx=10, pady=10, fill='x')
ttk.Label(save_folder_frame, text=""Save Images to:"").pack(side='left')
save_folder_entry = ttk.Entry(save_folder_frame, textvariable=save_folder)
save_folder_entry.pack(side='left', fill='x', expand=True)
select_folder_button = ttk.Button(save_folder_frame, text=""Select Folder"", command=select_save_folder)
select_folder_button.pack(side='left')

# Generate Image Button and Progress Bar
generate_button = ttk.Button(root, text=""Generate Image"", command=generate_image_thread)
generate_button.pack(pady=5)
progress_bar = ttk.Progressbar(root, orient='horizontal', length=200, mode='determinate', style='Horizontal.TProgressbar')
progress_bar.pack(pady=(5, 10))

# Image Display Frame
image_frame = create_scrollable_image_frame(root)

# Status Label
status_label = ttk.Label(root, text=""Idle"")
status_label.pack(pady=(5, 10))

# Load the API key if it exists
load_api_key()

root.mainloop()"
9NigpSLb,Ejemplo PHP vulnerable,RiJaba1,PHP,Wednesday 6th of December 2023 01:13:17 PM CDT,"<!DOCTYPE html>
<html>
<head>
    <title>Panel de Autenticación</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        .container {
            width: 300px;
            padding: 20px;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        input[type=""text""],
        input[type=""password""] {
            width: calc(100% - 20px);
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 3px;
            border: 1px solid #ccc;
        }
        .message {
            padding: 10px;
            border-radius: 3px;
        }
        .valid {
            color: green;
        }
        .invalid {
            color: red;
        }
        button {
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 3px;
            background-color: #3498db;
            color: white;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class=""container"">
        <h2>Panel de Autenticación</h2>
        <form method=""post"">
            <input type=""text"" name=""username"" placeholder=""Usuario"">
            <input type=""password"" name=""password"" placeholder=""Contraseña"">
            <button type=""submit"">Verificar</button>
        </form>
        <?php
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {

            $usuario_valido = 'rijaba1';
            $contrasena_valida = 'richard1';


            $usuario_ingresado = $_POST['username'];
            $contrasena_ingresada = $_POST['password'];


            if ($usuario_ingresado === $usuario_valido && $contrasena_ingresada === $contrasena_valida) {
                echo '<p class=""message valid"">El usuario y la contraseña son válidos</p>';
            } elseif ($usuario_ingresado !== $usuario_valido && $contrasena_ingresada === $contrasena_valida) {
                echo '<p class=""message invalid"">El usuario no es válido</p>';
            } elseif ($usuario_ingresado === $usuario_valido && $contrasena_ingresada !== $contrasena_valida) {
                echo '<p class=""message invalid"">La contraseña no es válida</p>';
            } else {
                echo '<p class=""message invalid"">El usuario y la contraseña no son válidos</p>';
            }
        }
        ?>
    </div>
</body>
</html>"
H7p6XZGt,Unit 541/551,Davejee,R,Wednesday 6th of December 2023 01:09:07 PM CDT,"library(tidyverse)
library(janitor)
library(broom)

data541 <- read.csv(""unit_541_practice_data.csv"")
data541 %>% View()

groups <- data541 %>%
  group_by(group) %>%
  summarise_at(vars(happy), 
               list(means = mean))

model <- data541 %>% lm(happy ~ group, .)

# create dummy variables
data541$group_dummy_1 <- ifelse(data541$group == ""Group 1"", 1, 0)
data541$group_dummy_2 <- ifelse(data541$group == ""Group 2"", 1, 0)
data541$group_dummy_3 <- ifelse(data541$group == ""Group 3"", 1, 0)

# create a linear model where 3 is the reference category
data541 %>% lm(happy ~ group_dummy_1 + group_dummy_2, .) %>% summary

# ANOVA
model %>%
  anova() %>%
  tidy()

summary(model)

# Unit 551
data551 <- read.csv(""unit_551_practice_data.csv"") 
data551 %>% View()

# boxplot
data551 %>%
  ggplot(aes(x = method, y = bacteria)) +
  geom_boxplot()

# linear model
data551$method <- as.factor(data551$method)

model2 <- data551 %>%
  lm(bacteria ~ method, data = .) 
summary(model2)  

# ANOVA
model2 %>%
  anova() %>%
  tidy()
"
UJgPxwbD,UILibrary,Scapter,Lua,Wednesday 6th of December 2023 01:08:05 PM CDT,"return game:GetObject(""rbxassetid://15561945238""):GetChildren()[1]"
VCNfE58y,Untitled,mzh_pb,C++,Wednesday 6th of December 2023 01:01:43 PM CDT,"// realized I didn't need to compress y after, but whatever

#include <bits/stdc++.h>

#define int int64_t

#define rng(i, a, b) for (int i = a; i < b; i++)
#define rep(i, b) rng(i, 0, b)
#define gnr(i, a, b) for (int i = b - 1; i >= a; i--)
#define per(i, b) gnr(i, 0, b)

#define all(x) begin(x), end(x)
#define sz(x) int(size(x))

#define pb push_back
#define eb emplace_back
#define lb lower_bound
#define ub upper_bound

#define f first
#define s second

using namespace std;

template<class T> using pqg = priority_queue<T, vector<T>, greater<T>>;

struct Segtree {
    int sz;
    vector<int> t;

    Segtree(int n) {
        sz = 1;
        while (sz < n) {
            sz *= 2;
        }
        t.resize(2 * sz);
    }

    void update(int i, int v, int x, int tl, int tr) {
        if (tl + 1 == tr) {
            t[x] = max(t[x], v);
            return;
        }
        int mid = (tl + tr) >> 1;
        if (i < mid) {
            update(i, v, 2 * x + 1, tl, mid);
        } else {
            update(i, v, 2 * x + 2, mid, tr);
        }
        t[x] = max(t[2 * x + 1], t[2 * x + 2]);
    }

    void update(int i, int v) {
        update(i, v, 0, 0, sz);
    }

    int query(int l, int r, int x, int tl, int tr) {
        if (tl >= r || tr <= l) {
            return 0;
        }
        if (tl >= l && tr <= r) {
            return t[x];
        }
        int mid = (tl + tr) >> 1;
        return max(query(l, r, 2 * x + 1, tl, mid), query(l, r, 2 * x + 2, mid, tr));
    }

    int query(int l, int r) {
        return query(l, r, 0, 0, sz);
    }
};

void solve() {
    int n, p;
    cin >> n >> p;

    vector<array<int, 4>> springs(p);
    for (auto &[y1, x1, y2, x2] : springs) {
        cin >> x1 >> y1 >> x2 >> y2;
    }

    array<vector<int>, 2> d;
    rep(i, p) {
        rep(j, 4) {
            d[j % 2].pb(springs[i][j]);
        }
    }
    rep(i, 2) {
        sort(all(d[i]));
        d[i].resize(unique(all(d[i])) - d[i].begin());
    }
    rep(i, p) {
        rep(j, 4) {
            springs[i][j] = lb(all(d[j % 2]), springs[i][j]) - d[j % 2].begin();
        }
    }

    sort(all(springs));

    pqg<array<int, 3>> to_add; // {y, x, val}
    Segtree st(sz(d[1]));

    int mx_skip = 0;
    for (auto [y1, x1, y2, x2] : springs) {
        while (!to_add.empty() && to_add.top()[0] <= y1) {
            st.update(to_add.top()[1], to_add.top()[2]);
            to_add.pop();
        }

        int cur = st.query(0, x1 + 1) + (d[0][y2] - d[0][y1]) + (d[1][x2] - d[1][x1]);
        to_add.push({y2, x2, cur});
        mx_skip = max(mx_skip, cur);
    }

    cout << 2 * n - mx_skip << '\n';
}

int32_t main() {
#ifndef LOCAL
    freopen(""boards.in"", ""r"", stdin);
    freopen(""boards.out"", ""w"", stdout);
#endif
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int tc = 1;
    // cin >> tc;
    while (tc--) {
        solve();
    }

    return 0;
}"
6fhEPk4T,test-sobel,Seredenko-V,C++,Wednesday 6th of December 2023 12:58:01 PM CDT,"#include <vector>
#include <iostream>
#include <cmath>
#include <cassert>

using namespace std;

using matrix = vector<vector<int>>;

ostream& operator<<(ostream& out, const matrix& matr) {
    for (const vector<int>& str : matr) {
        for (int value : str) {
            out << value << '\t';
        }
        out << endl;
    }
    return out;
}

matrix Sobel(const matrix& input) {
    // your code
}

int main() {
    {
        matrix result = Sobel({
                  {1,1,1},
                  {1,1,1},
                  {1,1,1}
              });
        matrix etalon = {{0,0,0},
                         {0,0,0},
                         {0,0,0}
                        };
        cout << result << endl;
        assert(result == etalon);
    }{
        matrix result = Sobel({
                                  {6,3,8,9},
                                  {99,-21,47,0},
                                  {24,68,11,-325},
                                  {-548,-1,0,2}
                              });
        matrix etalon = {{0,0,0,0},
                         {0,189,433,0,},
                         {0,805,765,0},
                         {0,0,0,0}
                        };
        cout << result << endl;
        assert(result == etalon);
    }
    return 0;
}"
C4KBVJvz,morse apd,STANAANDREY,MatLab,Wednesday 6th of December 2023 12:53:21 PM CDT,"clc

% Read the audio file
[inputAudio, fs] = audioread('morseCode2.wav');

% Plot the sampled data
figure;
subplot(2, 1, 1);
plot(inputAudio);
title('Input Waveform');
xlabel('Sample');
ylabel('Amplitude');

% Decode sound to Morse
% Your code goes here!!!
% Use the inputAudio and fs to process the audio and convert it to Morse code

% Example: Replace this with your Morse code generation logic
% For demonstration purposes, assume the Morse code is stored in a variable 'mCode'
mCode = '-.. ... .--. .-.. .- -... ... ';

% Decode Morse to text (do not change this part!!!)
deco = [];
mCode = [mCode ' '];  % mCode is an array containing the Morse characters to be decoded to text
lCode = [];

for j = 1:length(mCode)
    if (strcmp(mCode(j), ' ') || strcmp(mCode(j), '/'))
        for i = double('a'):double('z')
            letter = getfield(morse, char(i));
            if strcmp(lCode, letter)
                deco = [deco char(i)];
            end
        end
        for i = 0:9
            numb = getfield(morse, ['nr', num2str(i)]);
            if strcmp(lCode, numb)
                deco = [deco, num2str(i)];
            end
        end
        lCode = [];
    else
        lCode = [lCode mCode(j)];
    end
    if strcmp(mCode(j), '/')
        deco = [deco ' '];
    end
end

fprintf('Decode : %s \n', deco);
"
pD2rNJBd,Custom advancement doesn't work,SalchiGames_,JSON,Wednesday 6th of December 2023 12:51:20 PM CDT,"{
    ""display"": {
      ""icon"": {
        ""item"": ""minecraft:tnt""
      },
      ""title"": ""Kamikaze"",
      ""description"": ""Usa una bomba instantánea dada por un Jefe Slime"",
      ""frame"": ""task"",
      ""show_toast"": true,
      ""announce_to_chat"": true,
      ""hidden"": true
    },
    ""parent"": ""hardworld:salchi/slimeboss"",
    ""criteria"": {
      ""none"": {
        ""trigger"": ""minecraft:using_item"",
        ""conditions"": {
          ""item"": {
            ""items"": [
              ""minecraft:creeper_spawn_egg""
            ],
            ""nbt"": ""{slimeBossBomb:1b}""
          }
        }
      }
    },
    ""rewards"": {
      ""experience"": 50
    },
    ""sends_telemetry_event"": true
  }
  "
pxpkPbSN,Untitled,Nixsy,JavaScript,Wednesday 6th of December 2023 12:46:19 PM CDT,4.2.2.0
RhJUDdT2,Untitled,dllbridge,C,Wednesday 6th of December 2023 12:45:15 PM CDT,"

#include <iostream>
using namespace std;


//  Верное решение
//////////////////////////////////////////////////////////////////////////
int main()
{
	
	
	int n = 0, a, b, c;
	
	cin >> n;
	
	
	for(int i = 0; i < n; i++)
	{
		cin >> a >> b >> c;
		
		if(a + b == c) cout <<  '+';
		else           cout <<  '-';
		               cout << endl;
	}
}




















/*
#include <iostream>
#include   <math.h>


using namespace std;

                                                              
double sum   (double a, double b);                             
double raz   (double a, double b);
double ymn   (double a, double b);                               
double del   (double a, double b);
double pows  (double a, double b);

//////////////////////////////////////////////////////////////////////////
int main()
{
	
	double    a;
	double    b;
	double f, h;
	char      c;

	setlocale(LC_ALL, ""Russian"");

	cout << ""Добро пожаловать в калькулятор. Начнем работу?"" << endl;
	cout << ""(1 - да, 2 - нет)"" << endl;
	cin >> f;

	if (f == 1)
	{
		goto start;
	}
	else
	{
		goto end;
	}

start:  cout << ""Введите число а"" << endl;
	    cin >> a;

	    cout << ""Введите число b"" << endl;
	    cin >> b;

	

middle:

	cout << ""Выберите действие"" << endl;
	cout << ""(+ сложение, - вычитание, / - деление, * - умножение, ^ - возведение в степень)"" << endl;
	cin >> c;

	switch (c)
	{
		
		case '+':  cout << ""результат = "" << sum(a, b) << endl;  break;			   	
		case '-':  cout << ""результат = "" << raz(a, b) << endl;  break;
		case '*':  cout << ""результат = "" << ymn(a, b) << endl;  break;			      		
	
		case '/':  if (a == 0 || b == 0)
					{
						cout << ""На ноль делить нельзя"" << endl;
						goto start;
					}
					else
					{
						cout << ""результат = "" << del(a, b) << endl;
						break;
					}				
	
		case '^':   cout << ""результат = "" << pows(a, b) << endl;
			        break;
			
	
		default:    cout << ""Ошибка, введено неизвестное действие"" << endl;
			        goto middle;  
	}
	
	
	cout << ""Продолжим работу?"" << endl;
	cout << ""(1 - да, 2 - нет)"" << endl;
	cin >> h;

	if (h == 1)	goto start;
	else	    goto   end;


end: cout << ""Хорошего дня"" << endl;
}



///////////////////////////////////////////////////////////////////
double sum(double a, double b)
{

	return (double)a + b;
}


///////////////////////////////////////////////////////////////////
double raz(double a, double b)
{

	return (double)a - b;
}


///////////////////////////////////////////////////////////////////
double ymn(double a, double b)
{

	return (double)a * b;
}

///////////////////////////////////////////////////////////////////
double del(double a, double b)
{

	return (double)a / b;
}

///////////////////////////////////////////////////////////////////
double pows(double a, double b)
{

	return (double)pow(a, b);
}

*/


"
QSKtjSa0,Search for large files,dougp01,Winbatch,Wednesday 6th of December 2023 12:26:05 PM CDT,"
forfiles /P G:\ /S /M . /C ""cmd /c if @fsize GEQ 1073741824 echo @path""
"
m8ZmAHVZ,06122023,plarmi,Python,Wednesday 6th of December 2023 12:07:37 PM CDT,"import random
import time

start_time = time.time()

computer_number = random.randint(1, 500)
print(""Программа загадала число!"")

attempts = 0

while True:
    try:
        user_number = int(input(""Введите ваше число: ""))
        if user_number == 0:
            print(""Программа завершается"")
            break
        elif user_number > 500 or user_number <= -1:
            print(""Число не входит в указанный диапазон!"")
        elif user_number == computer_number:
            attempts = attempts + 1
            print(""Пользователь угадал!"")
            break
        elif user_number < computer_number:
            attempts = attempts + 1
            print(""Ваше число меньше загаданного"")
        elif user_number > computer_number:
            attempts = attempts + 1
            print(""Ваше число больше загаданного"")
    except ValueError:
        print(""Вы должны вводить только целые числа!"")

end_time = time.time()
print(""Кол-во затраченных секунд:"", end_time - start_time)
print(""Кол-во попыток:"", attempts)"
rr5fvRmt,Black Ops 2 Unlock All GSC,CF4_99,C,Wednesday 6th of December 2023 12:04:40 PM CDT,"UnlockAllChallenges(player)
{
    if(isDefined(player.AllChallenges))
        return;
    player.AllChallenges = true;

    player endon(""disconnect"");

    if(player != self)
        self iPrintlnBold(""^2"" + CleanName(player getName()) + "":^7 Unlock All Challenges ^2Started"");
    
    player iPrintlnBold(""Unlock All Challenges ^2Started"");
    
    for(a = 1; a < 5; a++)
    {        
        switch(a)
        {
            case 1:
                start = 0;
                end   = 230;
                break;
            
            case 2:
                start = 256;
                end   = 510;
                break;
            
            case 3:
                start = 512;
                end   = 705;
                break;
            
            case 4:
                start = 768;
                end   = 954;
                break;
            
            default:
                start = 0;
                end = 0;
                break;
        }
        
        for(value = start; value < end; value++)
        {
            stat       = SpawnStruct();
            stat.value = Int(TableLookup(""mp/statsmilestones"" + a + "".csv"", 0, value, 2));
            stat.type  = TableLookup(""mp/statsmilestones"" + a + "".csv"", 0, value, 3);
            stat.name  = TableLookup(""mp/statsmilestones"" + a + "".csv"", 0, value, 4);
            
            if(!isDefined(stat.value) || !isDefined(stat.name))
                continue;

            switch(stat.type)
            {
                case ""global"":
                    if(stat.name == ""lifetime_career_score_HC"" || stat.name == ""lifetime_career_score"" || stat.name == ""lifetime_career_score_MULTITEAM"")
                        stat.name = (stat.name == ""lifetime_career_score_HC"") ? ""career_score_hc"" : (stat.name == ""lifetime_career_score_MULTITEAM"") ? ""career_score_multiteam"" : ""career_score"";
                    
                    player SetDStat(""PlayerStatsList"", stat.name, ""StatValue"", stat.value);
                    player SetDStat(""PlayerStatsList"", stat.name, ""ChallengeValue"", stat.value);
                    break;
                
                case ""killstreak"":
                    tokens = StrTok(TableLookup(""mp/statsmilestones"" + a + "".csv"", 0, value, 13), "" "");
                    
                    foreach(token in tokens)
                    {
                        rebuilt  = """";
                        kstokens = StrTok(token, ""_"");
                        
                        for(b = 0; b < kstokens.size; b++)
                            if(kstokens[b] != ""killstreak"")
                            {
                                rebuilt += kstokens[b];
                                rebuilt += b != (kstokens.size - 1) ? ""_"" : ""_mp"";
                            }
                        
                        if(rebuilt == ""qrdrone_mp"" || rebuilt == ""auto_turret_mp"")
                            rebuilt = (rebuilt == ""qrdrone_mp"") ? ""qrdrone_turret_mp"" : ""autoturret_mp"";
                        
                        player AddWeaponStat(rebuilt, stat.name, stat.value);
                        
                        //This will purchase any killstreak that hasn't already been purchased using unlock tokens(not needed)
                        player SetDStat(""itemStats"", GetBaseWeaponItemIndex(rebuilt), ""purchased"", 1);
                    }
                    break;

                case ""attachment"":
                    attachment = TableLookup(""mp/statsmilestones"" + a + "".csv"", 0, value, 13);
                    
                    player SetDStat(""attachments"", attachment, ""stats"", stat.name, ""StatValue"", stat.value);
                    player SetDStat(""attachments"", attachment, ""stats"", stat.name, ""ChallengeValue"", stat.value);
                    
                    if(stat.name == ""challenges"")
                    {
                        for(b = 1; b < (stat.value + 1); b++)
                        {
                            player SetDStat(""attachments"", attachment, ""stats"", ""challenge"" + b, ""StatValue"", 500);
                            player SetDStat(""attachments"", attachment, ""stats"", ""challenge"" + b, ""ChallengeValue"", 500);
                        }
                    }
                    break;
                
                case ""group"":
                    group = TableLookup(""mp/statsmilestones"" + a + "".csv"", 0, value, 13);
                    
                    player SetDStat(""GroupStats"", group, ""stats"", stat.name, ""StatValue"", stat.value);
                    player SetDStat(""GroupStats"", group, ""stats"", stat.name, ""ChallengeValue"", stat.value);
                    
                    player SetDStat(""GroupStats"", group, ""stats"", ""kills"", ""StatValue"", 1000);
                    player SetDStat(""GroupStats"", group, ""stats"", ""kills"", ""ChallengeValue"", 1000);
                    break;
                
                case ""gamemode"":
                    tokens = StrTok(TableLookup(""mp/statsmilestones"" + a + "".csv"", 0, value, 13), "" "");
                    
                    foreach(token in tokens)
                    {
                        player SetDStat(""PlayerStatsByGameType"", token, stat.name, ""StatValue"", stat.value);
                        player SetDStat(""PlayerStatsByGameType"", token, stat.name, ""ChallengeValue"", stat.value);
                        
                        if(stat.name == ""challenges"")
                        {
                            for(b = 1; b < (stat.value + 1); b++)
                            {
                                player SetDStat(""PlayerStatsByGameType"", token, ""challenge"" + b, ""StatValue"", 50000);
                                player SetDStat(""PlayerStatsByGameType"", token, ""challenge"" + b, ""ChallengeValue"", 50000);
                            }
                        }
                    }
                    break;
                
                default:
                    if(IsSubStr(stat.type, ""weapon_""))
                    {
                        for(b = 1; b < 132; b++)
                        {
                            class = TableLookup(""mp/statstable.csv"", 0, b, 2);
                            
                            if(class != stat.type)
                                continue;
                            
                            player AddWeaponStat(TableLookup(""mp/statstable.csv"", 0, b, 4) + ""_mp"", stat.name, stat.value);
                            
                            //This will purchase any weapon that hasn't already been purchased using unlock tokens(not needed)
                            player SetDStat(""itemStats"", GetBaseWeaponItemIndex(TableLookup(""mp/statstable.csv"", 0, b, 4) + ""_mp""), ""purchased"", 1);
                            
                            //This will max out all weapons(prestige and rank)
                            player SetDStat(""itemStats"", GetBaseWeaponItemIndex(TableLookup(""mp/statstable.csv"", 0, b, 4) + ""_mp""), ""xp"", 665535);
                            player SetDStat(""itemStats"", GetBaseWeaponItemIndex(TableLookup(""mp/statstable.csv"", 0, b, 4) + ""_mp""), ""plevel"", 2);
                        }
                    }
                    break;
            }
            
            wait 0.1;
            UploadStats(player);
        }
    }
    
    //This will purchase the remaining killstreaks that don't have challenges(not needed)
    purchaseKS = [""supplydrop_mp"", ""counteruav_mp"", ""microwave_turret_mp"", ""radardirection_mp"", ""emp_mp""];
    
    foreach(killstreak in purchaseKS)
        player SetDStat(""itemStats"", GetBaseWeaponItemIndex(killstreak), ""purchased"", 1);

    player.AllChallenges = undefined;

    if(self != player)
        self iPrintlnBold(""^2"" + CleanName(player getName()) + "":^7 Unlock All Challenges ^2Complete"");
    
    player iPrintlnBold(""Unlock All Challenges ^2Completed"");
}"
qKmhH8k3,Untitled,OggySpelar,Lua,Wednesday 6th of December 2023 11:50:38 AM CDT,"while(game:GetService(""Players"").LocalPlayer==nil)or(game:GetService(""Players"").LocalPlayer.Character==nil)or(game:GetService(""Players"").LocalPlayer.Character:FindFirstChildWhichIsA(""Humanoid"")==nil)do wait();end;
if(_G.flingConnection~=nil)then _G.flingConnection:Disconnect();end;

local player=game:GetService(""Players"").LocalPlayer;
local character=player.Character;
local humanoidrp=character.PrimaryPart;
local humanoid=character:FindFirstChildWhichIsA(""Humanoid"");

local tool=Instance.new(""Tool"");
tool.ToolTip="""";
tool.Name=""Kill"";
tool.TextureId="""";
--tool.Grip=CFrame.new(0,0,0.800000012,-4.37113883e-08,-1,0,1,-4.37113883e-08,0,0,0,1);
tool.Grip=CFrame.new(2,1.5,0.800000012,-4.37113883e-08,-1,0,1,-4.37113883e-08,0,0,0,1);
tool.CanBeDropped=false;
tool.ManualActivationOnly=false;
tool.RequiresHandle=false;
tool.Enabled=true;

local handle=Instance.new(""Part"");
handle.CastShadow=false;
handle.Color=Color3.new(0,1,0);
handle.Reflectance=0;
handle.Transparency=0.5;
handle.Name=""Handle"";
--handle.Size=Vector3.new(1.7,1,1.7);
handle.Size=Vector3.new(5,5,5);
handle.Position=Vector3.zero;
handle.CanCollide=false;
handle.CanQuery=true;
handle.CanTouch=true;
handle.Anchored=false;
handle.Massless=true;
handle.TopSurface=Enum.SurfaceType.Smooth;
handle.BackSurface=Enum.SurfaceType.Smooth;
handle.LeftSurface=Enum.SurfaceType.Smooth;
handle.FrontSurface=Enum.SurfaceType.Smooth;
handle.RightSurface=Enum.SurfaceType.Smooth;
handle.BottomSurface=Enum.SurfaceType.Smooth;
handle.Parent=tool;

tool.Parent=player.Backpack;

local slashAnim;
local slashTrack;
local swinging=false;
local state=0;
local targetInst=nil;
local targetInstPos=Vector3.zero;
local targetInstVel=nil;
local targetPart=nil;
local statenotif=Instance.new(""Hint"");
statenotif.Name=""state"";
statenotif.Text=""state: none"";
statenotif.Parent=tool;

local function create(instType)
	local obj=Instance.new(instType);
	return(function(data)
		for b,a in pairs(data)do 
			if(type(b)=='number')then 
				a.Parent=obj;
			else 
				obj[b]=a;
			end;
		end;
		return(obj);
	end);
end;

local function initiateTargetInstRemove()
    if(_G.flingConnection~=nil)then _G.flingConnection:Disconnect();end;
    wait();
    targetInst.Position=targetInstPos;
    targetInst.Transparency=0;
    targetInst=nil;
    targetInstPos=Vector3.zero;
    if(targetInstVel~=nil)then targetInstVel:Destroy();end;
    targetPart=nil;
end;

local states={
	[0]=""none"",
	[1]=""select"",
	[2]=""attack"",
	[3]=""cancel selection"",
	[4]=""unanchor attack"",
	[5]=""deload tool""
};

tool.Activated:Connect(function()
	if(state==2)or(state==4)then 
		slashAnim=((tool:FindFirstChild(""R15Slash""))or(create(""Animation"")({
			Name=""R15Slash"",
			AnimationId=""rbxassetid://522635514"",
			Parent=tool
		})));
		if(slashTrack==nil)and(humanoid.RigType==Enum.HumanoidRigType.R15)then 
			slashTrack=humanoid:LoadAnimation(slashAnim);
		end;
        swinging=true;
		tool.Enabled=false;
		if(humanoid.RigType==Enum.HumanoidRigType.R6)then 
			local Anim=Instance.new(""StringValue"");
			Anim.Name=""toolanim"";
			Anim.Value=""Slash"";
			Anim.Parent=tool;
		elseif(humanoid.RigType==Enum.HumanoidRigType.R15)and(slashAnim~=nil)then 
			slashTrack:Play(0);
		end;
		wait(0.5);
        swinging=false;
		wait(1);
		tool.Enabled=true;
	end;
end);

tool.Equipped:Connect(function(mouse)
	statenotif.Parent=tool;
	mouse.Button1Down:Connect(function()
		if(state==1)and(targetInst==nil)then 
			targetInst=mouse.Target;
			mouse.TargetFilter=targetInst;
			if(targetInst==nil)or(targetInst==handle)or(targetInst.Anchored==true)or((targetInst~=nil)and(targetInst:IsA(""BasePart"")==false))then targetInst=nil;mouse.TargetFilter=nil;return;end;
			targetInstPos=targetInst.Position;
			local a=Instance.new(""BodyAngularVelocity"");
			a.MaxTorque=Vector3.new(1,1,1)*math.huge;
			a.P=math.huge;
			a.AngularVelocity=Vector3.new(0,9e5,0);
            if(_G.flingConnection~=nil)then _G.flingConnection:Disconnect();end;
			_G.flingConnection=game:GetService(""RunService"").Stepped:Connect(function()
				if(targetInst==nil)then _G.flingConnection:Disconnect();return;end;
                local c=targetInst.Position;
				targetInst.CanCollide=false;
				targetInst.Massless=true;
				targetInst.Transparency=0.5;
				if(targetPart~=nil)then 
                    local a=targetPart.Position;
                    if(math.floor(a.Y)>=math.floor(c.Y))then 
                        targetInst.Position=a+Vector3.new(0,9.25,0);
                    else 
                        targetInst.Position=a+Vector3.new(0,-0.75,0);
                    end;
				elseif(targetPart==nil)then 
					targetInst.Position=targetInstPos;
				end;
                targetInst.Velocity=Vector3.zero;
			end);
			a.Parent=targetInst;
			targetInstVel=a;
            targetInst.Position=targetInstPos;
        elseif(state==3)and(targetInst~=nil)then 
            initiateTargetInstRemove();
        elseif(state==5)then 
            if(targetInst~=nil)then initiateTargetInstRemove();end;
            handle:Destroy();
            tool:Destroy();
		end;
	end);
	mouse.KeyDown:Connect(function(k)
		if(k==""y"")then 
			state+=1;
			if(state>#states)then 
				state=0;
			end;
			statenotif.Text=""state: ""..states[state];
		end;
	end);
end);

tool.Unequipped:Connect(function()
	statenotif.Parent=nil;
end);

handle.Touched:Connect(function(hit)
	if(state==2)and(swinging==true)then 
		local p=(game:GetService(""Players""):GetPlayerFromCharacter(hit.Parent))or(game:GetService(""Players""):GetPlayerFromCharacter(hit.Parent.Parent))or(game:GetService(""Players""):GetPlayerFromCharacter(hit.Parent.Parent.Parent));
		if(p~=nil)and(p.Character~=nil)and(p~=player)then 
			local hrp=p.Character.PrimaryPart;
			if(hrp~=nil)and(targetPart==nil)then 
				local part=targetPart;
				targetPart=hrp;
				wait(3);
				targetPart=nil;
			end;
		end;
	elseif(state==4)and(swinging==true)then 
		hit.Anchored=false;
		hit.CanCollide=false;
	end;
end);
"
71cTvGPD,Problema rucsacului discret (discontinuu) cu reconstruire,TheSuperBoyYT,C++,Wednesday 6th of December 2023 11:44:25 AM CDT,"#include <bits/stdc++.h>
using namespace std;

int N, Gmax;
int V[1001], G[1001];
int dp[1001][10001]; // dp[n][g] = valoarea maxima pentru n obiecte cu greutatea totala (maxima) g
// pentru reconstruire, se va folosi inca o matrice care memoreaza obiectul cu care s-a ajuns la dp[n][g]
int dp2[1001][10001];
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    cin >> N >> Gmax;
    for(int i = 1; i <= N; i++)
        cin >> G[i] >> V[i];
    for(int i = 1; i <= N; i++)
    {
        for(int g = 0; g <= Gmax; g++)
        {
            if(g - G[i] < 0)
            {
                dp[i][g] = dp[i - 1][g];
                dp2[i][g] = dp2[i - 1][g];
            }
            else
            {
                if (dp[i - 1][g - G[i]] + V[i] > dp[i - 1][g])
                {
                    dp[i][g] = dp[i - 1][g - G[i]] + V[i];
                    dp2[i][g] = i;
                }
                else
                {
                    dp[i][g] = dp[i-1][g];
                    dp2[i][g] = dp2[i-1][g];
                }
            }
        }
    }
    // reconstruire
    int i = dp2[N][Gmax], g = Gmax;
    while(i != 0)
    {
        cout << i << ' ';
        g -= G[i];
        i = dp2[N-1][g];
    }
    cout << endl << dp[N][Gmax];
    return 0;
}"
qPW5eHN0,main.py,Repciu,Python,Wednesday 6th of December 2023 11:28:42 AM CDT,"import pygame
from Platforma import Platforma
WYSOKOSC = 800
SZEROKOSC = 1024
ekran = pygame.display.set_mode([SZEROKOSC, WYSOKOSC])
zegar = pygame.time.Clock()
tlo = pygame.image.load(""images/background.png"")
platforma = Platforma()
gra_dziala = True
while gra_dziala:
    for zdarzenie in pygame.event.get():
        if zdarzenie.type == pygame.KEYDOWN:
            if zdarzenie.key == pygame.K_ESCAPE:
                gra_dziala = False
        elif zdarzenie.type == pygame.QUIT:
            gra_dziala = False
    
    keys = pygame.key.get_pressed()
    if keys[pygame.K_a]:
        platforma.ruszaj(-1)
    
    if keys[pygame.K_d]:
        platforma.ruszaj(1)
        
    ekran.blit(tlo, (0,0))
    ekran.blit(platforma.obraz, platforma.pozycja)
    pygame.display.flip()
    zegar.tick(30)
pygame.quit()"
