id,title,username,language,date,content
SgHBxSvh,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,FreeRobux12345,JavaScript,Saturday 29th of June 2024 01:02:55 PM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Playstation gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
July 1 2024

"
g7Gm6rCS,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,mikyser,JavaScript,Saturday 29th of June 2024 12:56:49 PM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
1st of July 2024

"
jdr42Xqh,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,Ohtaku,JavaScript,Saturday 29th of June 2024 12:50:46 PM CDT,"G2A.com complimentary voucher & games guide.
Any gift card for free on G2A.com including Steam gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
1st of July 2024

"
AYyYGxfs,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,Elii,JavaScript,Saturday 29th of June 2024 12:44:42 PM CDT,"G2A.com complimentary gift card & games guide.
Any voucher for free on G2A.com including Xbox gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
July 1 2024

"
rP8aAWvf,"""Blynk Relay"" rev_01",pleasedontcode,Arduino,Saturday 29th of June 2024 12:43:01 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Blynk Relay""
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-06-29 17:42:07

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* The system should control a relay module connected */
	/* to digital pin D2 using the Relay library. The */
	/* relay on off same as switch on off at blynk */
/****** SYSTEM REQUIREMENT 2 *****/
	/* Create a system to manage a relay module on */
	/* digital pin D2 with the Relay library. The relay */
	/* should respond to a Blynk app switch, ensuring */
	/* synchronized on/off states for efficient remote */
	/* control. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Relay.h>  //https://github.com/rafaelnsantos/Relay
#include <BlynkSimpleStream.h>  // Blynk library for serial communication

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);
BLYNK_WRITE(V1); // Blynk function to handle virtual pin V1 writes

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t relay_RelayModule_Signal_PIN_D2 = 2;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool relay_RelayModule_Signal_PIN_D2_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float relay_RelayModule_Signal_PIN_D2_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Relay light(relay_RelayModule_Signal_PIN_D2, true); // Initialize relay on pin 2, Normally Open

/****** BLYNK AUTH TOKEN *****/
char auth[] = ""YourAuthToken""; // Replace with your Blynk Auth Token

void setup(void)
{
    // put your setup code here, to run once:
    Serial.begin(9600); // Initialize serial communication
    Blynk.begin(Serial, auth); // Initialize Blynk with serial communication
    light.begin(); // Initialize the pin
}

void loop(void)
{
    // put your main code here, to run repeatedly:
    Blynk.run(); // Run Blynk
    updateOutputs(); // Refresh output data
}

void updateOutputs()
{
    // Example of using the Relay library functions
    relay_RelayModule_Signal_PIN_D2_rawData = light.getState(); // Get relay state
}

// Blynk function to handle virtual pin V1 writes
BLYNK_WRITE(V1)
{
    int pinValue = param.asInt(); // Get the value from the Blynk app
    if (pinValue == 1) {
        light.turnOn(); // Turn relay on
    } else {
        light.turnOff(); // Turn relay off
    }
}
"
QYSUdUPf,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V4 üéÅ,jusst2k4,GetText,Saturday 29th of June 2024 12:42:11 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_599859.pdf
 
Working as of:
29 June 2024"
Pm0KHRFc,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,guywithabigheart,JavaScript,Saturday 29th of June 2024 12:38:37 PM CDT,"G2A.com complimentary gift card & games guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
July 1 2024

"
U1sQ39y6,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,PetrikDev,JavaScript,Saturday 29th of June 2024 12:32:33 PM CDT,"G2A.com complimentary gift card & games guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
1st of July 2024

"
ntmYuVbv,"Roe2Js :: ""/test dictionary/scripts/json/includes/js includes.csv""",jargon,JavaScript,Saturday 29th of June 2024 12:32:20 PM CDT,"
/* {{ #/test dictionary/scripts/js/host.js }} */
/* {{ #/test dictionary/scripts/js/legacy/mnemonics.js }} */

/* {{ #layers=/test dictionary/scripts/json/gamevars/layers.json }} */

/* {{ #special=/test dictionary/scripts/json/gamevars/special tiles.json }} */

/* {{ #/test dictionary/scripts/js/legacy/files.js }} */

/* {{ #/test dictionary/scripts/json/includes/js header includes.csv }} */

/* {{ #/test dictionary/scripts/js/legacy/debug.js }} */
/* {{ #/test dictionary/scripts/js/legacy/array blocks lohi.js }} */
/* {{ #/test dictionary/scripts/js/legacy/legacy basic.js }} */
/* {{ #/test dictionary/scripts/js/legacy/dice.js }} */

/* {{ #/test dictionary/scripts/js/constraints.js }} */
/* {{ #/test dictionary/scripts/js/load game data.js }} */

/* {{ #/test dictionary/scripts/js/canvas/canvasGuiCommands.js }} */
/* {{ #/test dictionary/scripts/js/canvas/canvasRenderView.js }} */
/* {{ #/test dictionary/scripts/js/canvas/canvasRenderPurse.js }} */
/* {{ #/test dictionary/scripts/js/canvas/canvasRenderCommands.js }} */

/* {{ #/test dictionary/scripts/js/create gui.js }} */
/* {{ #/test dictionary/scripts/js/render gui.js }} */
/* {{ #/test dictionary/scripts/js/event manager.js }} */
"
P5ZRMWJk,Untitled,enkiduuu,JavaScript,Saturday 29th of June 2024 12:27:07 PM CDT,"Server is running at http://localhost:3000
/Users/Desktop/postgre/World+Capital+Quiz/node_modules/pg-protocol/dist/parser.js:287
        const message = name === 'notice' ? new messages_1.NoticeMessage(length, messageValue) : new messages_1.DatabaseError(messageValue, length, name);
                                                                                                 ^
error: database ""world"" does not exist
    at Parser.parseErrorMessage (/Users/daryllvillanueva/Desktop/postgre/World+Capital+Quiz/node_modules/pg-protocol/dist/parser.js:287:98)
    at Parser.handlePacket (/Users/daryllvillanueva/Desktop/postgre/World+Capital+Quiz/node_modules/pg-protocol/dist/parser.js:126:29)
    at Parser.parse (/Users/daryllvillanueva/Desktop/postgre/World+Capital+Quiz/node_modules/pg-protocol/dist/parser.js:39:38)
    at Socket.<anonymous> (/Users/daryllvillanueva/Desktop/postgre/World+Capital+Quiz/node_modules/pg-protocol/dist/index.js:11:42)
    at Socket.emit (node:events:519:28)
    at addChunk (node:internal/streams/readable:559:12)
    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)
    at Readable.push (node:internal/streams/readable:390:5)
    at TCP.onStreamRead (node:internal/stream_base_commons:191:23) {
  length: 90,
  severity: 'FATAL',
  code: '3D000',
  detail: undefined,
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: 'postinit.c',
  line: '947',
  routine: 'InitPostgres'
}"
8jxT5QS8,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,x3kiN,JavaScript,Saturday 29th of June 2024 12:26:28 PM CDT,"G2A.com free gift card & gaming guide.
Any gift card for free on G2A.com including Playstation gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
July 1 2024

"
mKgAXF4V,still doesn't work A in ASCII,max2201111,Python,Saturday 29th of June 2024 12:23:06 PM CDT,"import chess
import time
from functools import lru_cache

class CustomPiece(chess.Piece):
    def __init__(self, piece_type, color):
        super().__init__(piece_type, color)

class Amazon(CustomPiece):
    def __init__(self, color):
        super().__init__(chess.BISHOP, color)  # Placeholder for custom piece type

    def symbol(self):
        return 'A' if self.color == chess.WHITE else 'a'

class Bob(CustomPiece):
    def __init__(self, color):
        super().__init__(chess.ROOK, color)

    def symbol(self):
        return 'B' if self.color == chess.WHITE else 'b'

class Cyryl(CustomPiece):
    def __init__(self, color):
        super().__init__(chess.QUEEN, color)

    def symbol(self):
        return 'C' if self.color == chess.WHITE else 'c'

class CustomBoard(chess.Board):
    def __init__(self, fen=None):
        self.custom_pieces = {
            'A': Amazon(chess.WHITE), 'a': Amazon(chess.BLACK),
            'B': Bob(chess.WHITE), 'b': Bob(chess.BLACK),
            'C': Cyryl(chess.WHITE), 'c': Cyryl(chess.BLACK)
        }
        super().__init__(fen)

    def set_fen(self, fen):
        parts = fen.split(' ')
        while len(parts) < 6:
            parts.append(""0"")
        board_part = parts[0]
        turn_part = parts[1]
        castling_part = parts[2]
        en_passant_part = parts[3]
        halfmove_clock = parts[4]
        fullmove_number = parts[5]

        self.set_board_fen(board_part)
        self.turn = chess.WHITE if turn_part == 'w' else chess.BLACK
        self.castling_rights = chess.BB_EMPTY if castling_part == '-' else chess.SquareSet.from_square(chess.parse_square(castling_part))
        self.ep_square = None if en_passant_part == '-' else chess.parse_square(en_passant_part)
        self.halfmove_clock = int(halfmove_clock)
        self.fullmove_number = int(fullmove_number)

    def set_board_fen(self, fen):
        self.clear()
        rows = fen.split('/')
        for rank, row in enumerate(rows):
            file = 0
            for char in row:
                if char.isdigit():
                    file += int(char)
                else:
                    square = chess.square(file, 7 - rank)
                    if char in self.custom_pieces:
                        self.set_piece_at(square, self.custom_pieces[char])
                    else:
                        self.set_piece_at(square, chess.Piece.from_symbol(char))
                    file += 1

    def piece_symbol(self, piece):
        if piece is None:
            return '.'
        if isinstance(piece, Amazon):
            return 'A'
        if isinstance(piece, Bob):
            return 'B'
        if isinstance(piece, Cyryl):
            return 'C'
        return piece.symbol()

    def generate_legal_moves(self, from_mask=chess.BB_ALL, to_mask=chess.BB_ALL):
        for move in super().generate_legal_moves(from_mask, to_mask):
            yield move
        
        for square in self.piece_map():
            piece = self.piece_at(square)
            if piece.symbol().lower() in ['a', 'b', 'c']:
                yield from self.generate_custom_piece_moves(square, piece)

    def generate_custom_piece_moves(self, square, piece):
        knight_moves = [
            (2, 1), (2, -1), (-2, 1), (-2, -1),
            (1, 2), (1, -2), (-1, 2), (-1, -2)
        ]
        
        directions = []
        if piece.symbol().lower() == 'a':  # Amazon: Bishop + Knight moves
            directions = [(1, 1), (1, -1), (-1, 1), (-1, -1)]
            moves = self.generate_sliding_moves(square, directions) + self.generate_knight_moves(square, knight_moves)
        elif piece.symbol().lower() == 'b':  # Bob: Rook + Knight moves
            directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]
            moves = self.generate_sliding_moves(square, directions) + self.generate_knight_moves(square, knight_moves)
        elif piece.symbol().lower() == 'c':  # Cyryl: Queen + Knight moves
            directions = [(1, 1), (1, -1), (-1, 1), (-1, -1), (1, 0), (0, 1), (-1, 0), (0, -1)]
            moves = self.generate_sliding_moves(square, directions) + self.generate_knight_moves(square, knight_moves)
        
        for move in moves:
            if self.is_pseudo_legal(move):
                yield move

    def generate_sliding_moves(self, square, directions):
        moves = []
        for dx, dy in directions:
            x, y = chess.square_file(square), chess.square_rank(square)
            while True:
                x, y = x + dx, y + dy
                if 0 <= x < 8 and 0 <= y < 8:
                    dest_square = chess.square(x, y)
                    move = chess.Move(square, dest_square)
                    moves.append(move)
                    if self.piece_at(dest_square):
                        break
                else:
                    break
        return moves

    def generate_knight_moves(self, square, knight_moves):
        moves = []
        for dx, dy in knight_moves:
            file = chess.square_file(square) + dx
            rank = chess.square_rank(square) + dy
            if 0 <= file < 8 and 0 <= rank < 8:
                dest_square = chess.square(file, rank)
                move = chess.Move(square, dest_square)
                moves.append(move)
        return moves

@lru_cache(maxsize=None)
def simplify_fen_string(fen):
    parts = fen.split(' ')
    simplified_fen = ' '.join(parts[:4])  # Zachov√°v√°me pouze informace o pozici
    if len(parts) < 6:
        simplified_fen += "" 0 1""
    return simplified_fen

def print_custom_board(fen):
    board = CustomBoard(fen)
    for rank in range(7, -1, -1):
        line = []
        for file in range(8):
            piece = board.piece_at(chess.square(file, rank))
            symbol = board.piece_symbol(piece)
            line.append(symbol)
        print(' '.join(line))

# Startovn√≠ pozice
start_fen = ""8/6A1/8/8/8/k1K5/8/8 w - - 0 1""
print_custom_board(start_fen)  # Tisk ASCII ≈°achovnice pro startovn√≠ pozici
simplified_POZ2 = simplify_fen_string(start_fen)
POZ = {1: simplified_POZ2}

AR = {simplified_POZ2: {'used': 0, 'to_end': 0}}
N = 1
M = 0

start_time = time.time()

def format_elapsed_time(elapsed_time):
    hours, remainder = divmod(elapsed_time, 3600)
    minutes, seconds = divmod(remainder, 60)
    return f""{int(hours)}h {int(minutes)}m {int(seconds)}s""

def print_elapsed_time(total_time, level_time):
    print(f""{format_elapsed_time(total_time)} / {format_elapsed_time(level_time)}"")

while M < N:
    M += 1
    current_fen = POZ[M]
    board = CustomBoard(current_fen)
    simplified_current_fen = simplify_fen_string(current_fen)

    if simplified_current_fen not in AR:
        AR[simplified_current_fen] = {'used': 0, 'to_end': 0}

    if AR[simplified_current_fen]['used'] == 0:
        AR[simplified_current_fen]['used'] = 1
        for move in board.generate_legal_moves():
            # Check if the move is a promotion
            if move.promotion:
                move.promotion = chess.QUEEN  # Set promotion to queen only

            board.push(move)
            POZ2 = board.fen()
            simplified_POZ2 = simplify_fen_string(POZ2)

            if simplified_POZ2 not in AR:
                AR[simplified_POZ2] = {'used': None, 'to_end': 0}

            if AR[simplified_POZ2]['used'] is None:
                N += 1
                POZ[N] = simplified_POZ2
                AR[simplified_POZ2] = {'used': 0, 'to_end': 0}

            board.pop()  # Vr√°t√≠me tah zpƒõt

print(f""Poƒçet pozic je {N}"")

# P≈ôid√°n√≠ kontroly pro mat, rem√≠zu a v√Ωchoz√≠ hodnotu
F = 0
for i in range(1, N + 1):
    current_fen = POZ[i]
    board = CustomBoard(current_fen)
    simplified_current_fen = simplify_fen_string(current_fen)

    if simplified_current_fen not in AR:
        AR[simplified_current_fen] = {'used': 0, 'to_end': 0}

    if board.is_checkmate():
        AR[simplified_current_fen]['to_end'] = -1000
        F += 1
    elif board.is_stalemate() or board.is_insufficient_material() or board.is_seventyfive_moves() or board.is_fivefold_repetition():
        AR[simplified_current_fen]['to_end'] = 0
    else:
        AR[simplified_current_fen]['to_end'] = 0

print(f""Poƒçet pozic v matu je {F}"")

uroven = 0
while F > 0:
    uroven += 1
    level_start_time = time.time()
    print(f""V√Ωpoƒçet v √∫rovni {uroven}"")
    
    F = 0
    current_level_positions = 0
    for i in range(1, N + 1):
        current_fen = POZ[i]
        board = CustomBoard(current_fen)
        simplified_current_fen = simplify_fen_string(current_fen)
        if AR[simplified_current_fen]['to_end'] == 0:
            hod = -2000
            for move in board.generate_legal_moves():
                # Check if the move is a promotion
                if move.promotion:
                    move.promotion = chess.QUEEN  # Set promotion to queen only

                board.push(move)
                POZ2 = board.fen()
                simplified_POZ2 = simplify_fen_string(POZ2)
                if simplified_POZ2 not in AR or AR[simplified_POZ2]['to_end'] is None:
                    hod2 = 0
                else:
                    hod2 = -AR[simplified_POZ2]['to_end']
                if hod2 > hod:
                    hod = hod2
                board.pop()  # Vr√°t√≠me tah zpƒõt
            if hod == 1001 - uroven:
                AR[simplified_current_fen]['to_end'] = 1000 - uroven
                F += 1
                current_level_positions += 1
            if hod == -1001 + uroven:
                AR[simplified_current_fen]['to_end'] = -1000 + uroven
                F += 1
                current_level_positions += 1
    level_end_time = time.time()
    total_elapsed_time = level_end_time - start_time
    level_elapsed_time = level_end_time - level_start_time
    print(f""Nalezeno {current_level_positions} pozic v √∫rovni {uroven}"")
    print_elapsed_time(total_elapsed_time, level_elapsed_time)

print(f""Nalezeno {F} pozic celkem"")

# V√Ωpis v≈°ech pozic s to_end == 17
print(""Pozice s to_end == 17:"")
for fen, data in AR.items():
    if data['to_end'] is not None and data['to_end'] < 983 and data['to_end'] > 0:
        print(f""{fen} -> to_end: {data['to_end']}"")

print(""*****"")

print(""Pozice s to_end == -20:"")
for fen, data in AR.items():
    if data['to_end'] is not None and data['to_end'] > -981 and data['to_end'] < 0:
        print(f""{fen} -> to_end: {data['to_end']}"")

current_fen = POZ[1]
board = CustomBoard(current_fen)
simplified_current_fen = simplify_fen_string(current_fen)
hod = AR[simplified_current_fen]['to_end']
print(f""Hodnocen√≠ poƒç√°teƒçn√≠ pozice je {hod}"")

# Z√°vƒõreƒçn√Ω k√≥d pro proch√°zen√≠ nejlep≈°√≠ch tah≈Ø
current_fen = start_fen
simplified_current_fen = simplify_fen_string(current_fen)

optimal_moves = []
while AR[simplified_current_fen]['to_end'] is not None and AR[simplified_current_fen]['to_end'] > -1000:
    board = CustomBoard(current_fen)
    simplified_current_fen = simplify_fen_string(current_fen)
    hod = -2000
    for move in board.generate_legal_moves():
        # Check if the move is a promotion
        if move.promotion:
            move.promotion = chess.QUEEN  # Set promotion to queen only

        board.push(move)
        POZ2 = board.fen()
        simplified_POZ2 = simplify_fen_string(POZ2)
        if simplified_POZ2 not in AR or AR[simplified_POZ2]['to_end'] is None:
            hod2 = 0
        else:
            hod2 = -AR[simplified_POZ2]['to_end']
        if hod2 > hod:
            hod = hod2
            best_fen = simplified_POZ2
        board.pop()  # Vr√°t√≠me tah zpƒõt

    optimal_moves.append(best_fen)
    current_fen = best_fen
    simplified_current_fen = simplify_fen_string(current_fen)

# Tisk ≈°achovnic v opaƒçn√©m po≈ôad√≠
for fen in reversed(optimal_moves):
    print_custom_board(fen)
    print(""\n"")
"
gFFJ7rMp,2024_ponteiros_lista_ex2_WIP,gpsgiraldi,C,Saturday 29th of June 2024 12:21:33 PM CDT,"/************************************************************
2 ‚Äì Fa√ßa um programa em C que receba uma frase, calcule e mostre 
a quantidade de vogais da frase digitada. O programa dever√° 
considerar e contar as vogais mai√∫sculas e min√∫sculas.
*************************************************************/
#include <stdio.h>
#include <string.h>

int main()
{
    
//declara√ß√£o
    int i,soma=0,tamanho;
    char frase[200];

//c√≥digo de entrada
    fgets(frase,199,stdin);

//la√ßo de leitura e condicional para calcular as vogais
    tamanho=strlen(frase);
    for(i=0;i<tamanho;i++){
        if(frase[i]=='a'||frase[i]=='e'||frase[i]=='i'||frase[i]=='o'||frase[i]=='u'//min√∫sculas sem acento
         ||frase[i]=='A'||frase[i]=='E'||frase[i]=='I'||frase[i]=='O'||frase[i]=='U'//mai√∫sculas sem acento
         ||frase[i]=='√£'||frase[i]=='√¢'||frase[i]=='√É'||frase[i]=='√Ç'//'a's acentuados exceto agudos
         ||frase[i]=='√™'||frase[i]=='√ä'//'e's acentuados exceto agudos
         ||frase[i]=='√≠'//'i' acentuado exceto mai√∫sculo
         ||frase[i]=='√µ'||frase[i]=='√ï'||frase[i]=='√¥'||frase[i]=='√î'//'o's acentuados
         ||frase[i]=='√Å'||frase[i]=='√â'||frase[i]=='√ç'||frase[i]=='√ì'||frase[i]=='√ö'){//Mai√∫sculas agudas
        soma=soma+1;
        }    
    }
    
//c√≥digo de sa√≠da
    printf(""S√£o %d vogais em %d letras."",soma,tamanho-1);
    
    return 0;
}
"
aFRxA9nY,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,FeasModz514,JavaScript,Saturday 29th of June 2024 12:20:26 PM CDT,"G2A.com free gift card & games guide.
Any voucher for free on G2A.com including Playstation gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
July 1 2024

"
JKg85HaB,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,kiraezwhethe,JavaScript,Saturday 29th of June 2024 12:14:18 PM CDT,"G2A.com complimentary gift card & games guide.
Any voucher for free on G2A.com including Xbox gift cards & anything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
July 1 2024

"
cNgD1xy1,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,7AcxeMC,JavaScript,Saturday 29th of June 2024 12:08:15 PM CDT,"G2A.com free voucher & games guide.
Any gift card for free on G2A.com including Xbox gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
July 1 2024

"
gti7AhKb,yay got bot to work finally snowybot rocks in head,coinwalk,JavaScript,Saturday 29th of June 2024 11:57:14 AM CDT,"var nion = parseFloat(document.getElementById('pct_balance').value);
var smartz = nion;
var prefit = Number((nion/1000).toFixed(8));
var smow = Number((nion/1000).toFixed(8));
var winnerdinner = nion;
var bolance = nion;
var tens = (prefit*10);
var sevens = (prefit*6.9);
var eights = (prefit*7.9);
var fives = (prefit*4.9);
var hundreds = (prefit*100);
var james = ((Math.floor(bolance/hundreds))*hundreds);
var belance = 0;
var snowy = 0;
var snow = bolance;
var beast = prefit;
var bill = true;
var joe = true;
var fran = ((Math.floor(bolance/tens))*tens);
var greedy =  nion;
 
 
 
function go(){
if (greedy!=belance){
belance = parseFloat(document.getElementById('pct_balance').value);
if ((belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))&&(belance!=snowy)){
        beast = beast*2;
        snowy = parseFloat(belance);
}
if ((belance>(((Math.floor(snow/hundreds))*hundreds)+(smow*35)))&&(joe)&&(bill)){
prefit = (smow*10);
snowy = 0;
tens = (prefit*10);
sevens = (prefit*6.9);
eights = (prefit*7.9);
beast = prefit;
joe = false;
bill = false;
hundreds = (prefit*100);
snow = ((Math.floor(belance/hundreds))*hundreds);
}
if ((belance<(fran-fives))&&(belance<(((Math.floor(belance/tens))*tens)+fives))){
snowy = 0;
beast = prefit;
fran = ((Math.floor(belance/tens))*tens);
}
if ((beast>=nion)&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
prefit = smow;
snowy = 0;
tens = (prefit*10);
sevens = (prefit*6.9);
eights = (prefit*7.9);
beast = prefit;
bill = true;
joe = true;
hundreds = (prefit*100);
fran = ((Math.floor(belance/tens))*tens);
snow = ((Math.floor(belance/hundreds))*hundreds);
james = ((Math.floor(belance/hundreds))*hundreds);
}
if ((belance>=(james+(smow*100)))&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
prefit = smow;
snowy = 0;
tens = (prefit*10);
sevens = (prefit*6.9)
eights = (prefit*7.9)
beast = prefit;
bill = true;
joe = true;
hundreds = (prefit*100);
fran = ((Math.floor(belance/tens))*tens);
snow = ((Math.floor(belance/hundreds))*hundreds);
james = ((Math.floor(belance/hundreds))*hundreds);
}
if (belance>=(winnerdinner*24000)) {
console.log(""winner winner chicken dinner"");
    return;
}
var cat = ((belance-smartz).toFixed(8));
console.log(""profit"");
console.log(cat);
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
}
greedy =  parseFloat(document.getElementById('pct_balance').value);
setTimeout(() => go(), 1);
}
 
go();"
z1DgVnkv,2024_ponteiros_lista_ex1,gpsgiraldi,C,Saturday 29th of June 2024 11:38:02 AM CDT,"/************************************************************
1 ‚Äì Fa√ßa um programa em C que pe√ßa para o usu√°rio digitar um 
texto e imprima as quatro primeiras letras.
*************************************************************/
#include <stdio.h>
#include <string.h>

int main()
{
    
//declara√ß√£o
    int i;
    char texto[99];

//c√≥digo de entrada
    fgets(texto,98,stdin);
//c√≥digo de sa√≠da
    for(i=0;i<5;i++){
        printf(""%c"",texto[i]);
    }
    
    return 0;
}
"
M6n4cjX4,Yahoo Finance,elena1234,Python,Saturday 29th of June 2024 11:30:25 AM CDT,"#1.Importing the Library and Setting the Stock of Interest 
import yfinance as yahooFinance
import pandas as pd
pd.set_option('display.max_rows', None)

total_energies = yahooFinance.Ticker(""TTE.PA"")


#2.Retrieving Stock Information
total_energies.info


#3.Holders
total_energies.major_holders
total_energies.institutional_holders


#4.Actions
total_energies.actions
total_energies.dividends
total_energies.splits


#5.Financial Statements
total_energies.income_stmt
total_energies.quarterly_income_stmt

total_energies.balance_sheet
total_energies.quarterly_balance_sheet

total_energies.cash_flow
total_energies.quarterly_cashflow

_____________________________________________________________________________________________________

#QuantStats: Portfolio analytics for quants
%matplotlib inline
import quantstats as qs


# extend pandas functionality with metrics, etc.
qs.extend_pandas()

# fetch the daily returns for a stock
stock = qs.utils.download_returns('TTE.PA')
stock


# show sharpe ratio
qs.stats.sharpe(stock)


# or using extend_pandas() :)
stock.sharpe()


#Visualize stock performance
qs.plots.snapshot(stock, title='TotalEnergies Performance', show=True)
"
9cRTSCHZ,Restaurant Customers,matheus_monteiro,C++,Saturday 29th of June 2024 09:33:26 AM CDT,"#include ""bits/stdc++.h""
using namespace std;

int main() {
    int n;
    cin >> n;

    vector<pair<int, int>> v;
    for(int i = 0; i < n; ++i) {
        int a, b;
        cin >> a >> b;
        v.push_back({a, b});
    }

    set<int> S;
    for(auto [a, b] : v) {
        S.insert(a);
        S.insert(b);
    }

    map<int, int> mapTo;
    int nextNum = 1;

    for(int num : S) 
        mapTo[num] = nextNum++;
    
    for(int i = 0; i < n; ++i) {
        v[i].first = mapTo[ v[i].first ];
        v[i].second = mapTo[ v[i].second ];
    }

    // ------- solu√ß√£o em baixo

    vector<int> cnt(500000);

    for(int i = 0; i < n; ++i) {
        cnt[ v[i].first ]++;
        cnt[ v[i].second + 1 ]--;
    }

    int ans = 0;
    for(int i = 1; i < cnt.size(); ++i) {
        cnt[i] += cnt[i - 1];
        ans = max(ans, cnt[i]);
    }

    cout << ans << '\n';

    return 0;
}"
1kEEcEu0,Coffee,mechanicker,Swift,Saturday 29th of June 2024 09:17:20 AM CDT,"import Foundation
import IOKit.pwr_mgt

var assertionID : IOPMAssertionID = IOPMAssertionID(0)
var description : CFString = ""Cup of coffee"" as CFString

let success = IOPMAssertionDeclareUserActivity(description, kIOPMUserActiveLocal, &assertionID)
if success == kIOReturnSuccess {
    // IOPMAssertionRelease(assertionID)
}
"
LeAs64Ue,Untitled,artemsemkin,HTML,Saturday 29th of June 2024 09:12:42 AM CDT,"<a href=""mailto:user@example.com"">Contact me</a>"
1d9UtMzT,Untitled,mohammadqatanani,YAML,Saturday 29th of June 2024 09:03:27 AM CDT,"type: custom:mod-card
card:
  type: custom:fluid-level-background-card
  card:
    show_name: true
    show_icon: true
    show_state: false
    type: glance
    entities:
      - entity: valve.khzn_1_switch_1
        tap_action:
          action: toggle
        double_tap_action:
          action: more-info
    state_color: false
  full_value: 100
  severity:
    - color:
        - 3
        - 169
        - 244
      value: 60
  entity: sensor.accent_battery_level
  show-bubbles: true
  bubbles-color: white
style: |
  ha-card {
    position: relative;
    overflow: hidden;
  }
  .bubble {
    position: absolute;
    bottom: 0;
    width: 20px;
    height: 20px;
    background: rgba(255, 255, 255, 0.7);
    border-radius: 50%;
    opacity: 0.5;
    animation: rise 5s infinite;
  }
  @keyframes rise {
    0% {
      transform: translateY(0);
      opacity: 0.5;
    }
    50% {
      transform: translateY(-200px);
      opacity: 0.7;
    }
    100% {
      transform: translateY(-400px);
      opacity: 0;
    }
  }
  .bubble:nth-child(1) {
    left: 10%;
    animation-delay: 0s;
  }
  .bubble:nth-child(2) {
    left: 30%;
    animation-delay: 2s;
  }
  .bubble:nth-child(3) {
    left: 50%;
    animation-delay: 4s;
  }
  .bubble:nth-child(4) {
    left: 70%;
    animation-delay: 1s;
  }
  .bubble:nth-child(5) {
    left: 90%;
    animation-delay: 3s;
  }
extra_styles: |
  <style>
    .bubble {
      position: absolute;
      bottom: 0;
      width: 20px;
      height: 20px;
      background: rgba(255, 255, 255, 0.7);
      border-radius: 50%;
      opacity: 0.5;
      animation: rise 5s infinite;
    }
    @keyframes rise {
      0% {
        transform: translateY(0);
        opacity: 0.5;
      }
      50% {
        transform: translateY(-200px);
        opacity: 0.7;
      }
      100% {
        transform: translateY(-400px);
        opacity: 0;
      }
    }
    .bubble:nth-child(1) {
      left: 10%;
      animation-delay: 0s;
    }
    .bubble:nth-child(2) {
      left: 30%;
      animation-delay: 2s;
    }
    .bubble:nth-child(3) {
      left: 50%;
      animation-delay: 4s;
    }
    .bubble:nth-child(4) {
      left: 70%;
      animation-delay: 1s;
    }
    .bubble:nth-child(5) {
      left: 90%;
      animation-delay: 3s;
    }
  </style>
  <div class=""bubbles-container"">
    <div class=""bubble""></div>
    <div class=""bubble""></div>
    <div class=""bubble""></div>
    <div class=""bubble""></div>
    <div class=""bubble""></div>
  </div>"
HxydZF9V,Untitled,manssizz,Bash,Saturday 29th of June 2024 08:48:11 AM CDT,"#!/bin/sh /etc/rc.common

START=99
STOP=10

USE_PROCD=1
PROG=""/usr/sbin/wwan_monitor""

start_service() {
    procd_open_instance
    procd_set_param command $PROG
    procd_set_param stdout 1
    procd_set_param stderr 1
    procd_set_param respawn
    procd_close_instance
}

stop_service() {
    killall $(basename $PROG)
}

restart_service() {
    stop
    start
}

service_status() {
    pgrep -f $PROG > /dev/null
    if [ $? -eq 0 ]; then
        echo ""$PROG is running""
    else
        echo ""$PROG is not running""
    fi
}
"
EtZbCfKf,wwan_monitor,manssizz,Bash,Saturday 29th of June 2024 08:44:53 AM CDT,"#!/bin/bash

# Kode warna ANSI
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Fungsi untuk mendapatkan timestamp saat ini
timestamp() {
    date ""+%Y-%m-%d %H:%M:%S""
}

# Fungsi untuk merestart antarmuka modem pada OpenWRT
restart_modem_interface() {
    echo ""$(timestamp) Restarting modem interface..."" >> /root/wwan_monitor.log
    logger -t modem -p daemon.notice ""Restarting modem interface""
    ifdown modem
    sleep 1
    ifup modem
    echo ""$(timestamp) Interface restarted.""
    logger -t modem -p daemon.notice ""Modem interface restarted""
}

# Fungsi untuk mereset modem USB
reset_usb_modem() {
    local modem_usb_path=$1
    logger -t modem -p daemon.warning ""Resetting USB modem at $modem_usb_path""
    usbreset $modem_usb_path
    sleep 10
}

# Fungsi untuk melakukan ping ke target dan mengembalikan 0 jika berhasil, 1 jika timeout
ping_target() {
    local target=$1
    ping -c 4 -w 10 -4 -I wwan0 $target > /dev/null
    return $?
}

# Memastikan antarmuka aktif dan memiliki alamat IP
check_interface() {
    ifconfig wwan0 | grep ""inet "" > /dev/null
    return $?
}

# Memastikan modem USB terdeteksi
check_usb_modem() {
    lsusb | grep ""413c:81d7"" > /dev/null
    return $?
}

# Skrip utama
main() {
    local primary_target=""fb.me""
    local primary_target=""google.com""
    # local secondary_target=""104.22.5.240""
    local modem_usb_path=""413c:81d7""  # Gantilah path ini sesuai dengan perangkat Anda
    local restart_threshold=5           # Jumlah restart dalam rentang waktu tertentu sebelum diberlakukan penangguhan
    local restart_window=1200          # Jendela waktu (dalam detik) untuk melacak jumlah restart

    # Variabel untuk melacak jumlah restart
    local restart_count=0
    local restart_time=$(date +%s)

    # Variabel untuk menangani penangguhan pemantauan
    local suspended=false
    local suspend_start_time=0
    local suspend_duration=1800         # Durasi penangguhan pemantauan (dalam detik)

    logger -t modem -p daemon.notice ""Checking USB modem detection at boot...""

    # Memastikan modem USB terdeteksi saat boot
    if ! check_usb_modem; then
        logger -t modem -p daemon.err ""USB modem not detected at boot. Restarting device""
        reboot
    fi

    logger -t modem -p daemon.notice ""USB modem detected. Waiting for modem interface to get an IP address...""

    # Menunggu hingga antarmuka memiliki alamat IP
    until check_interface; do
        ifup modem
        logger -t modem -p daemon.notice ""Interface not yet up. Checking again in 5 seconds...""
        sleep 5
    done

    logger -t modem -p daemon.notice ""Modem interface has an IP address. Starting monitoring.""

    # Menunggu hingga target utama dapat dijangkau, dengan batas waktu 5 menit
    local wait_start_time=$(date +%s)
    until ping_target $primary_target; do
        if ! check_interface; then
            logger -t modem -p daemon.notice ""Interface down. Waiting for it to come back up...""
        else
            logger -t modem -p daemon.notice ""Interface up but $primary_target is not reachable. Checking again in 5 seconds...""
        fi

        # Periksa jika telah lebih dari 5 menit
        local current_time=$(date +%s)
        if [ $(($current_time - $wait_start_time)) -ge 300 ]; then
            logger -t modem -p daemon.warning ""$primary_target not reachable for 5 minutes. Restarting interface...""
            restart_modem_interface
            ifup modem
            wait_start_time=$(date +%s)  # Reset waktu mulai
        fi

        sleep 5
    done
    logger -t modem -p daemon.notice ""$primary_target is reachable. Starting monitoring.""

    # Loop pemantauan
    while true; do
        # Memastikan pemantauan ditangguhkan
        if $suspended; then
            current_time=$(date +%s)
            if [ $(($current_time - $suspend_start_time)) -ge $suspend_duration ]; then
                suspended=false
                restart_count=0
                total_ping_failed=0  # Reset total ping gagal setelah penangguhan selesai
 #               restart_modem_interface
                ifup modem
                logger -t modem -p daemon.notice ""Monitoring resumed after suspension period""
            else
                logger -t modem -p daemon.notice ""Monitoring suspended. Waiting for suspension period to end...""
                ifup modem
                sleep 60
                continue
            fi
        fi

        # Memastikan batas restart tercapai
        if [ $restart_count -ge $restart_threshold ]; then
            logger -t modem -p daemon.warning ""Restart threshold reached. Suspending monitoring for $suspend_duration seconds...""
            suspended=true
            suspend_start_time=$(date +%s)
            continue
        fi

        # Jika tidak ditangguhkan, lanjutkan pemantauan normal
        if ! ping_target $primary_target; then
            total_ping_failed=$((total_ping_failed+1))  # Menambah total ping gagal
            logger -t modem -p daemon.err ""Cannot reach $primary_target, trying $secondary_target""
            if ! ping_target $secondary_target; then
                logger -t modem -p daemon.err ""Cannot reach $secondary_target either. Restarting modem interface""
                restart_modem_interface
                ifup modem
                logger -t modem -p daemon.notice ""Retrying $primary_target...""
                # Beri sedikit penundaan setelah merestart antarmuka modem
                sleep 30

                # Memastikan antarmuka terdeteksi, jika tidak, reset modem USB
                if ! check_interface; then
                    logger -t modem -p daemon.err ""Interface not detected after restart, resetting USB modem""
                    reset_usb_modem $modem_usb_path
                    logger -t modem -p daemon.notice ""Waiting for interface to be detected...""
                    sleep 30

                    # Menunggu hingga antarmuka memiliki alamat IP setelah reset modem USB
                    until check_interface; do
                        logger -t modem -p daemon.notice ""Interface still not up. Checking again in 5 seconds...""
                        ifup modem
                        sleep 5
                    done
                fi

                # Update jumlah restart dan waktu
                current_time=$(date +%s)
                if [ $(($current_time - $restart_time)) -le $restart_window ]; then
                    restart_count=$((restart_count+1))
                else
                    restart_count=1
                fi
                restart_time=$current_time

                # Menunggu hingga target utama dapat dijangkau lagi setelah restart
                until ping_target $primary_target; do
                    logger -t modem -p daemon.notice ""Waiting for $primary_target to be reachable after restart...""
                    ifup modem
                    sleep 5
                done
                logger -t modem -p daemon.notice ""$primary_target is reachable. Continuing monitoring""
            else
                logger -t modem -p daemon.notice ""$secondary_target is reachable. Continuing monitoring""
            fi
        else
            if ! check_interface; then
                logger -t modem -p daemon.err ""Interface is up but $primary_target is not reachable. Restarting modem interface""
                restart_modem_interface
                ifup modem
            fi
        fi
        sleep 10
    done
}

main"
hr6cCmH7,Grid Paths,matheus_monteiro,C++,Saturday 29th of June 2024 08:22:15 AM CDT,"#include ""bits/stdc++.h""
using namespace std;

string s;
int dr[] = {-1, 0, 1, 0}; 
int dc[] = {0, 1, 0, -1};
int visitado[10][10];

int getDir(char c) {
    if(c == 'R')
        return 1;
    if(c == 'L')
        return 3;
    if(c == 'D')
        return 2;
    if(c == 'U')
        return 0;
    return -1;
}

int solve(int i, int r, int c) {
    if(i == s.size()) {
        if(r == 7 && c == 1)
            return 1;
        return 0;
    }

    // caso 1
    if(visitado[r][c - 1] == 1 && visitado[r][c + 1] == 1 && 
        visitado[r - 1][c] == 0 && visitado[r + 1][c] == 0)
        return 0;

    // caso 2
    if(visitado[r - 1][c] == 1 && visitado[r + 1][c] == 1 && 
        visitado[r][c - 1] == 0 && visitado[r][c + 1] == 0)
        return 0;

    //caso 3
    if(r == 7 && c == 1)
        return 0;

    int cnt = 0;
    int d = getDir(s[i]);

    visitado[r][c] = 1;

    if(d == -1) {
        for(int j = 0; j < 4; ++j) {
            if(visitado[ r + dr[j] ][ c + dc[j] ] == 0)
                cnt += solve(i + 1, r + dr[j], c + dc[j]);
        }
    } else if(visitado[ r + dr[d] ][ c + dc[d] ]  == 0) {
            cnt += solve(i + 1, r + dr[d], c + dc[d]);
    }

    visitado[r][c] = 0;

    return cnt;
}

int main() {
    cin >> s;

    for(int i = 0; i <= 8; ++i) {
        visitado[0][i] = 1;
        visitado[i][0] = 1;
        visitado[8][i] = 1;
        visitado[i][8] = 1;
    }

    cout << solve(0, 1, 1) << '\n';

    return 0;
}"
a1tKCpWL,Locked profile,drak138,JavaScript,Saturday 29th of June 2024 08:10:25 AM CDT,"async function lockedProfile() {
    const mainRef=document.getElementById(""main"")
    const profileRef=document.querySelector("".profile"")
    const url=`http://localhost:3030/jsonstore/advanced/profiles`
    //get the needed data
    const data=await getData(url)
    //make i so i have user1,user2...
    let i=1
    //go trought all users and make a page for each of them
    Object.entries(data).forEach(el=>{
        profileRef.remove()
        //make a template 
        const clone=profileRef.cloneNode(true)
        //get radio buttons
        const unlock=clone.querySelector('input[value=""unlock""]')
        const lock=clone.querySelector('input[value=""lock""]')
        unlock.setAttribute(""name"",`user${i}Locked`)
        lock.setAttribute(""name"",`user${i}Locked`)
        //get dropdownMenu
        const moreInfo=clone.querySelector("".user1Username"")
        moreInfo.setAttribute(""id"",`user${i}HiddenFields`)
        moreInfo.removeAttribute(""class"")
        //get needed inputs
        const username=clone.querySelector('input[name=""user1Username""]')
        username.setAttribute(""name"",`user${i}Username`)
        username.setAttribute(""value"",`${el[1].username}`)
        const email=clone.querySelector('input[name=""user1Email""]')
        email.setAttribute(""name"",`user${i}Email`)
        email.setAttribute(""value"",`${el[1].email}`)
        const age=clone.querySelector('input[name=""user1Age""]')
        age.setAttribute(""value"",`${el[1].age}`)
        age.setAttribute(""name"",`user${i}Age`)
        //get button
        const showBtn=clone.querySelector(""button"")
        showBtn.disabled=true
        showBtn.addEventListener(""click"",onClick)
        //make radioFunction
    lock.addEventListener('change', checkRadioButtons);
    unlock.addEventListener('change', checkRadioButtons);
    //set info from data
        username.value=el[1].username
        email.value=el[1].email
        age.value=el[1].age
        moreInfo.style.display=""none""

        //append it all
        mainRef.appendChild(clone)

        //radio function
        function checkRadioButtons(){
            if(lock.checked){
                showBtn.disabled=true
            }
            else if(unlock.checked){
                showBtn.disabled=false
            }
        }
        i++
    })
    //show button function
    function onClick(e){
        const profile=e.currentTarget
        const info=profile.previousElementSibling
        if(e.currentTarget.textContent===""Show more""){
            info.style.display=""block""
            e.currentTarget.textContent=""Hide it""
        }
        else{
            info.style.display=""none""
            e.currentTarget.textContent=""Show more""
        }
    }
    //get Data
    async function getData(url){
        const response=await fetch(url)
        return response.json()
    }
}"
0vfz4ev6,Bank_spliter,jaVer404,Python,Saturday 29th of June 2024 08:00:52 AM CDT,"def has_matching_fourth_line(pages):
    # –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    pattern = re.compile(r'^.*"".*"".*$')

    for page in pages:
        lines = page.splitlines()
        if len(lines) >= 4 and pattern.match(lines[3]):
            print (lines[3])
            #return True
        #else:
            #return False"
HH6WFLcU,snowybot grandmaster,coinwalk,JavaScript,Saturday 29th of June 2024 07:59:46 AM CDT,"var nion = parseFloat(document.getElementById('pct_balance').value);
var smartz = nion;
var prefit = Number((nion/1440000).toFixed(8));
var winnerdinner = nion;
var tens = (prefit*10);
var sevens = (prefit*6.9);
var eights = (prefit*7.9);
var james = ((Math.floor(nion/tens))*tens);
var belance = 0;
var snowy = 0;
var greedy =  nion;
 
 
 
function go(){
if (greedy!=belance){
belance = parseFloat(document.getElementById('pct_balance').value);
if ((belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))&&(belance!=snowy)){
     beast = beast*2;
     snowy = parseFloat(belance);
}
if ((belance>=(james+tens))&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
     beast = prefit;
     snowy = 0;
     james = ((Math.floor(belance/tens))*tens);
}
if (belance>=(winnerdinner*24000)) {
console.log(""winner winner chicken dinner"");
    return;
}
var cat = ((belance-smartz).toFixed(8));
console.log(""profit"");
console.log(cat);
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
}
greedy =  parseFloat(document.getElementById('pct_balance').value);
setTimeout(() => go(), 1);
}
 
go();"
AgmpVGF8,Untitled,phpface,PHP,Saturday 29th of June 2024 07:07:34 AM CDT,"function streamtube_child_enqueue_modified_videojs(){
    wp_deregister_script( 'videojs' );

    wp_enqueue_script( 
        'videojs',
        get_theme_file_uri( 'assets/video.min.js' ),
        array(),
        filemtime( get_theme_file_path( 'assets/video.min.js' ) ),
        true
    );
}

add_action( 'wp_enqueue_scripts', 'streamtube_child_enqueue_modified_videojs' );
add_action( 'enqueue_embed_scripts', 'streamtube_child_enqueue_modified_videojs' );"
tbrD8Dy4,JS-QA_Automation-tests,SimeonMihaylov,JavaScript,Saturday 29th of June 2024 07:06:32 AM CDT,"const { test, describe, beforeEach, afterEach, beforeAll, afterAll, expect } = require('@playwright/test');
const { chromium } = require('playwright');

const host = 'http://localhost:3000';

let browser;
let context;
let page;

let user = {
    email : """",
    password : ""123456"",
    confirmPass : ""123456"",
};

let albumName = """";

describe(""e2e tests"", () => {
    beforeAll(async () => {
        browser = await chromium.launch();
    });

    afterAll(async () => {
        await browser.close();
    });

    beforeEach(async () => {
        context = await browser.newContext();
        page = await context.newPage();
    });

    afterEach(async () => {
        await page.close();
        await context.close();
    });

    describe(""authentication"", () => {
        test(""register makes correct api call"", async () => {
            await page.goto(host);
            await page.click(""text=Register"");
            await page.waitForSelector('form');
            let random = Math.floor(Math.random() * 10000);
            user.email = `abv${random}@abv.bg`;

            await page.locator('#email').fill(user.email);
            await page.locator('#password').fill(user.password);
            await page.locator('#conf-pass').fill(user.confirmPass);
            let [response] = await Promise.all([
                page.waitForResponse(response => response.url().includes(""/users/register"") && response.status() == 200),
                page.click('[type=""submit""]')
            ])
            let userData = await response.json();

            //assert
            await expect(response.ok()).toBeTruthy();
            expect(userData.email).toBe(user.email);
            expect(userData.password).toBe(user.password);
        });

        test(""login makes correct API call"", async()=>{
            //arrange
            await page.goto(host);
            await page.click('text=Login');
            await page.waitForSelector('form');

            //act
            await page.locator('#email').fill(user.email);
            await page.locator('#password').fill(user.password);
            let [response] = await Promise.all([
                page.waitForResponse(response => response.url().includes(""/users/login"") && response.status() == 200),
                page.click('[type=""submit""]')
            ])
            let userData = await response.json();

            //assert
            await expect(response.ok()).toBeTruthy();
            expect(userData.email).toBe(user.email);
            expect(userData.password).toBe(user.password);
        });

        test('logout makes correct api call', async () => {
            //arrange
            await page.goto(host);
            await page.click('text=Login');
            await page.waitForSelector('form');
            await page.locator('#email').fill(user.email);
            await page.locator('#password').fill(user.password);
            await page.click('[type=""submit""]');

            //act 
            let [response] = await Promise.all([
                page.waitForResponse(response => response.url().includes(""/users/logout"") && response.status() == 204 ),
                page.click('nav >> text=Logout')
            ]);

            expect(response.ok()).toBeTruthy();
            await page.waitForSelector('nav >> text=Login');
            expect(page.url()).toBe(host + '/');
        });
    });

    describe(""navbar"", () => {
        test(""logged user should see correct navigation buttons"", async()=>{
            //arrange
            await page.goto(host);

            //act
            await page.click('text=Login');
            await page.waitForSelector('form');
            await page.locator('#email').fill(user.email);
            await page.locator('#password').fill(user.password);
            await page.click('[type=""submit""]');

            //assert
            await expect(page.locator('nav >> text=Home')).toBeVisible();
            await expect(page.locator('nav >> text=Catalog')).toBeVisible();
            await expect(page.locator('nav >> text=Search')).toBeVisible();
            await expect(page.locator('nav >> text=Create Album')).toBeVisible();
            await expect(page.locator('nav >> text=Logout')).toBeVisible();
            await expect(page.locator('nav >> text=Register')).toBeHidden();
            await expect(page.locator('nav >> text=Login')).toBeHidden();
        });

        test(""guest user should see correct navigation buttons"", async ()=>{
            //act
            await page.goto(host);

            //assert
            await expect(page.locator('nav >> text=Home')).toBeVisible();
            await expect(page.locator('nav >> text=Catalog')).toBeVisible();
            await expect(page.locator('nav >> text=Search')).toBeVisible();
            await expect(page.locator('nav >> text=Create Album')).toBeHidden();
            await expect(page.locator('nav >> text=Logout')).toBeHidden();
            await expect(page.locator('nav >> text=Register')).toBeVisible();
            await expect(page.locator('nav >> text=Login')).toBeVisible();
        });
    });

    describe(""CRUD"", () => {
        beforeEach(async () =>{
            await page.goto(host);
            await page.click('text=Login');
            await page.waitForSelector('form');
            await page.locator('#email').fill(user.email);
            await page.locator('#password').fill(user.password);
            await page.click('[type=""submit""]');
        });

        test('Create makes correct API call', async()=>{
            //arrange
            albumName = `Random name ${Math.floor(Math.random() * 10000)}`;
            await page.click('nav >> text=Create Album');
            await page.waitForSelector(""form"");

            //act
            await page.fill(""#name"", albumName);
            await page.fill(""#imgUrl"", ""/images/pinkFloyed.jpg"");
            await page.fill(""#price"", ""Random price"");
            await page.fill(""#releaseDate"", ""Random date"");
            await page.fill(""#artist"", ""Random artist"");
            await page.fill(""#genre"", ""Random genre"");
            await page.fill("".description"", ""Random description"");

            let [response] = await Promise.all([
                page.waitForResponse(response => response.url().includes(""/data/albums"") && response.status() == 200 ),
                page.click('[type=""submit""]')
            ]);
            let eventData = await response.json();

            //assert
            expect(response.ok()).toBeTruthy();
            expect(eventData.name).toEqual(albumName);
            expect(eventData.imgUrl).toEqual(""/images/pinkFloyed.jpg"");
            expect(eventData.price).toEqual(""Random price"");
            expect(eventData.releaseDate).toEqual(""Random date"");
            expect(eventData.artist).toEqual(""Random artist"");
            expect(eventData.genre).toEqual(""Random genre"");
            expect(eventData.description).toEqual(""Random description"");
        });

        test('edit makes correct API call', async () => {
            await page.click(""nav >> text=Search"");
            await page.waitForSelector("".button-list"");
        
            await page.fill(""#search-input"", albumName);
            await page.click('.button-list >> text=Search');
        
            await page.click(""text=Detail"");
            await page.click(""text=Edit"");
            await page.waitForSelector('form');
        
            await page.fill(""#name"", ""Updated edited_Name"");
        
            let [response] = await Promise.all([
                page.waitForResponse(response => response.url().includes(""/data/albums"") && response.status() == 200),
                page.click('[type=""submit""]')
            ]);
            let eventData = await response.json();
        
            expect(response.ok()).toBeTruthy();
            expect(eventData.name).toEqual(""Updated edited_Name"");
            expect(eventData.imgUrl).toEqual(""/images/pinkFloyed.jpg"");
            expect(eventData.artist).toEqual(""Random artist"");
            expect(eventData.price).toEqual(""Random price"");
            expect(eventData.releaseDate).toEqual(""Random date"");
            expect(eventData.genre).toEqual(""Random genre"");
            expect(eventData.description).toEqual(""Random description"");
        });

        test(""delete makes correct API call"", async () => {
            await page.click(""nav >> text=Search"");
            await page.waitForSelector("".button-list"");
        
            await page.fill(""#search-input"", albumName);
            await page.click('.button-list >> text=Search');
        
            await page.locator('text=Details').first();
            await page.locator('text=Delete');

            let [response] = await Promise.all([
                page.waitForResponse(response => response.url().includes(""/data/albums"") && response.status() == 200),
                page.on('dialog', dialog => dialog.accept()),
                page.locator('text=Delete').first()
            ]);

            expect(response.ok()).toBeTruthy();
        });
    });
});
"
zrG4JHKW,CreateElement update,drak138,JavaScript,Saturday 29th of June 2024 07:03:24 AM CDT,"function ce(type, attributes, ...content) {
    const result = document.createElement(type);

    Object.entries(attributes || {})
        .forEach(([attribute, value]) => {
            if (isEventListener(attribute)) {
                result.addEventListener(attribute.substring(2).toLocaleLowerCase(), value);
            } else {
                result[attribute] = value;
            }
        });

    content = content.reduce((a, c) => a.concat(Array.isArray(c) ? c : [c]), []);

    content.forEach(e => {
        if (isElement(e)) {
            result.appendChild(e);
        } else {
            const node = document.createTextNode(e);
            result.appendChild(node);
        }
    });

    return result;

    function isEventListener(attr) {
        return attr.substring(0, 2).localeCompare('on') === 0;
    }

    function isElement(element) {
        return typeof element != 'string' && typeof element != 'number';
    }
}"
Vpyqhx4G,Button Monitoring rev_02,pleasedontcode,Arduino,Saturday 29th of June 2024 06:52:29 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Button Monitoring
	- Source Code compiled for: Arduino Mega
	- Source Code created on: 2024-06-29 11:52:18

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* read button periodically */
/****** END SYSTEM REQUIREMENTS *****/


/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h> //https://github.com/evert-arias/EasyButton

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void onPressed(); // Prototype for the callback function

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t button_PushButton_PIN_D2 = 2;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton button(button_PushButton_PIN_D2); // Initialize EasyButton object

/****** CALLBACK FUNCTION *****/
void onPressed() {
  Serial.println(""Button pressed"");
}

void setup(void) {
  // Initialize Serial for debugging purposes
  Serial.begin(115200);
  Serial.println();
  Serial.println("">>> EasyButton pressed example <<<"");

  // Initialize the button
  button.begin();
  // Add the callback function to be called when the button is pressed
  button.onPressed(onPressed);
}

void loop(void) {
  // Continuously read the status of the button
  button.read(); // SYSTEM REQUIREMENT 1: read button periodically
}

/* END CODE */"
1zX6BQwx,"""Button Detection"" rev_01",pleasedontcode,Arduino,Saturday 29th of June 2024 06:52:08 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Button Detection""
	- Source Code NOT compiled for: Arduino Mega
	- Source Code created on: 2024-06-29 11:51:43

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* read button periodically */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h> //https://github.com/evert-arias/EasyButton

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void onPressed(); // Prototype for the callback function

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t button_PushButton_PIN_D2 = 2;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton button(button_PushButton_PIN_D2); // Initialize EasyButton object

/****** CALLBACK FUNCTION *****/
void onPressed() {
  Serial.println(""Button pressed"");
}

void setup(void) {
  // Initialize Serial for debugging purposes
  Serial.begin(115200);
  Serial.println();
  Serial.println("">>> EasyButton pressed example <<<"");

  // Initialize the button
  button.begin();
  // Add the callback function to be called when the button is pressed
  button.onPressed(onPressed);
}

void loop(void) {
  // Continuously read the status of the button
  button.read(); // SYSTEM REQUIREMENT 1: read button periodically
}

/* END CODE */"
5hqdds1W,Passowrd visibility icon on vendor registration page,palsushobhan,PHP,Saturday 29th of June 2024 06:22:55 AM CDT,"add_action('wcfm_membership_registration_form_after_dynamic_custom_fields', function () {
    ?>
    <style>
        div#wcfm_membership_registration_form_expander {
            position: relative;
        }
        div#wcfm_membership_registration_form_expander span.password-visibility {
            position: absolute;
            right: 20px;
            margin-top: 8px;
        }
    </style>
    <?php
});

add_action('end_wcfm_membership_registration_form', function () {
    ?>
    <script>
    jQuery(function($) {
        $html = '<span class=""wcfmfa fa-eye text_tip password-visibility""></span>';
        $('#wcfm_membership_registration_form input[type=""password""').after($html);
        $('#wcfm_membership_registration_form').on('click', 'span.password-visibility', function(e) {
            $pass_input = $(this).prev('input');
            if($(this).hasClass('fa-eye-slash')) {
                $pass_input[0].type = 'password';
                $(this).removeClass('fa-eye-slash');
                $(this).addClass('fa-eye');
            } else {
                $pass_input[0].type = 'text';
                $(this).removeClass('fa-eye');
                $(this).addClass('fa-eye-slash');
            }
        });
    });
    </script>
    <?php
});"
NTPR00AG,pedaliii,BbJLeB,JavaScript,Saturday 29th of June 2024 06:12:51 AM CDT,"const { test, describe, beforeEach, afterEach, beforeAll, afterAll, expect } = require('@playwright/test');
const { chromium } = require('playwright');

const host = 'http://127.0.0.1:5500';

let browser;
let context;
let page;

let user = {
    email: """",
    password: ""123456"",
    confirmPass: ""123456"",
};

let albumName = """";

describe(""e2e tests"", () => {
    beforeAll(async () => {
        browser = await chromium.launch();
    });

    afterAll(async () => {
        await browser.close();
    });

    beforeEach(async () => {
        context = await browser.newContext();
        page = await context.newPage();
    });

    afterEach(async () => {
        await page.close();
        await context.close();
    });

    describe(""authentication"", () => {

        test(""Registration with Valid Data"", async () => {
            await page.goto(host);
            await page.click('text=Register');

            await page.waitForSelector('form');

            let random = Math.floor(Math.random() * 1000);
            user.email = `abv_${random}@abv.bg`;

            await page.locator(""#email"").fill(user.email);
            await page.locator(""#password"").fill(user.password);
            await page.locator(""#conf-pass"").fill(user.confirmPass);
            let [response] = await Promise.all([
                page.waitForResponse(response => response.url().includes('/users/register') && response.status() === 200),
                page.click('[type=""submit""]')
            ]);
            
            await expect(response.ok()).toBeTruthy();
            let userData = await response.json();

            expect(userData.email).toBe(user.email);
            expect(userData.password).toEqual(user.password);

        });

        test(""Login with Valid Data"", async () => {
            await page.goto(host);
            await page.click('text=Login');

            await page.waitForSelector('form');
            
            
            await page.locator(""#email"").fill(user.email);
            await page.locator(""#password"").fill(user.password);
            let [response] = await Promise.all([
                page.waitForResponse(response => response.url().includes(""/users/login"") && response.status() === 200),
                page.click('[type=""submit""]')
            ]);
            
            expect(response.ok()).toBeTruthy();
            let userData = await response.json();
            //console.log(userData);
            expect(userData.email).toBe(user.email);
            expect(userData.password).toEqual(user.password);
        });

        test(""Logout from the Application"", async () => {
            await page.goto(host);
            await page.click('text=Login');

            await page.waitForSelector('form');
            
            await page.locator(""#email"").fill(user.email);
            await page.locator(""#password"").fill(user.password);
            await page.click('[type=""submit""]');

            let [response] = await Promise.all([
                page.waitForResponse(response => response.url().includes(""/users/logout"") && response.status() === 204),
                page.locator('nav >> text=logout').click()
            ]);

            expect(response.ok).toBeTruthy();
            await page.waitForSelector('nav >> text=Login');

            expect(page.url()).toBe(host + ""/"");

        });

    });

    describe(""navbar"", () => {

        test('logged user should see correct navigation', async () => {
            await page.goto(host);

            await page.click('text=Login');
            await page.waitForSelector('form');
            await page.locator(""#email"").fill(user.email);
            await page.locator(""#password"").fill(user.password);
            await page.click('[type=""submit""]')

            await expect(page.locator('nav >> text=Home')).toBeVisible();
            await expect(page.locator('nav >> text=Catalog')).toBeVisible();
            await expect(page.locator('nav >> text=Search')).toBeVisible();
            await expect(page.locator('nav >> text=Create Album')).toBeVisible();
            await expect(page.locator('nav >> text=Login')).toBeHidden();
            await expect(page.locator('nav >> text=Register')).toBeHidden();
        });

        test('guest user should see correct navigation', async () => {
            await page.goto(host);

            await expect(page.locator('nav >> text=Home')).toBeVisible();
            await expect(page.locator('nav >> text=Logout')).toBeHidden();
            await expect(page.locator('nav >> text=Create Album')).toBeHidden();
            await expect(page.locator('nav >> text=Search')).toBeVisible();
            await expect(page.locator('nav >> text=Login')).toBeVisible();
            await expect(page.locator('nav >> text=Register')).toBeVisible();
        });


    });

    describe(""CRUD"", () => {

        test('Create an Album Testing', async () => {
            await page.goto(host);

            await page.click('text=Login');
            await page.waitForSelector('form');
            await page.locator(""#email"").fill(user.email);
            await page.locator(""#password"").fill(user.password);
            await page.click('[type=""submit""]')
            
            await page.click('text=Create Album');
            await page.waitForSelector('form');

            albumName = `Test Album ${Math.floor(Math.random() * 10000)}`;

            await page.fill('input[name=""name""]', albumName);
            await page.fill('input[name=""imgUrl""]', '/images/test.jpg');
            await page.fill('input[name=""price""]', '19.99');
            await page.fill('input[name=""releaseDate""]', '2024-06-29');
            await page.fill('input[name=""artist""]', 'Test Artist');
            await page.fill('input[name=""genre""]', 'Test Genre');
            await page.fill('textarea[name=""description""]', 'Test Description');

            const [response] = await Promise.all([
                page.waitForResponse(response => response.status() === 200 && response.url().includes('/data/albums')),
                page.click('[type=""submit""]')
            ]);

            expect(response.ok()).toBeTruthy();

            const responseBody = await response.json();
            expect(responseBody.name).toBe(albumName);
            expect(responseBody.imgUrl).toBe('/images/test.jpg');
            expect(responseBody.price).toBe('19.99');
            expect(responseBody.releaseDate).toBe('2024-06-29');
            expect(responseBody.artist).toBe('Test Artist');
            expect(responseBody.genre).toBe('Test Genre');
            expect(responseBody.description).toBe('Test Description');
        });

        test(""User is able to edit an album"", async ()=>{
            //arrange
            await page.goto(host);
            await page.click(""text=Login"");
            await page.waitForSelector('form');
            await page.locator('#email').fill(user.email);
            await page.locator('#password').fill(user.password);
            await page.click('[type=""submit""]');
            //act
            await page.click(""text = Search"")
            await page.locator('#search-input').fill(albumName);
            await page.locator('.button-list').click();
            await page.locator('#details').first().click();
            await page.click('text = Edit');
            await page.waitForSelector('form');
            await page.locator('#price').fill(""15"");
 
            let [response] = await Promise.all([page.waitForResponse(response => response.url().includes(""/data/albums"")
            && response.status() == 200), page.click('[type=""Submit""]')
           ]);
           let eventData = await response.json();
           //assert
           await expect(response.ok()).toBeTruthy();
           expect(eventData.name).toEqual(albumName); 
            expect(eventData.imgUrl).toEqual('/images/test.jpg');
            expect(eventData.price).toEqual('15');
            expect(eventData.releaseDate).toEqual('2024-06-29');
            expect(eventData.artist).toEqual('Test Artist');
            expect(eventData.genre).toEqual('Test Genre');
            expect(eventData.description).toEqual('Test Description');
        })
 
        test(""User is able to delete an album"", async ()=>{
            //arrange
            await page.goto(host);
            await page.click(""text=Login"");
            await page.waitForSelector('form');
            await page.locator('#email').fill(user.email);
            await page.locator('#password').fill(user.password);
            await page.click('[type=""submit""]');
            //act
            await page.click(""text = Search"")
            await page.locator('#search-input').fill(albumName);
            await page.locator('.button-list').click();
            await page.locator('#details').first().click();
          //  await page.locator(""text = Delete"").click();
            let [response] = await Promise.all([page.waitForResponse(response => response.url().includes(""/data/albums"")
            && response.status() == 200),
            page.on('dialog', dialog => dialog.accept()),
            page.click('text = Delete')
           ]);
 
           //assert
           await expect(response.ok()).toBeTruthy();
        });
 
    });
});
"
YEDS8jMk,Untitled,jaVer404,Python,Saturday 29th of June 2024 06:10:49 AM CDT,"def split_pages(file_path):
    # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ñ–∞–π–ª –∑ –∫–æ–¥—É–≤–∞–Ω–Ω—è–º cp1251
    with open(file_path, 'r', encoding='cp1251') as file:
        text = file.read()

    # –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑–∞ —Å–∏–º–≤–æ–ª–æ–º —Ä–æ–∑—Ä–∏–≤—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏ '\f'
    pages = text.split('\x0c')

    # –û–±—Ä—ñ–∑–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ –∑ –ø–æ—á–∞—Ç–∫—É —Ç–∞ –∫—ñ–Ω—Ü—è –∫–æ–∂–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    pages = [page.strip() for page in pages]

    return pages"
ezhWepZC,data972,TestGuy1,JSON,Saturday 29th of June 2024 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'ab9cab1856b66ba0ede208e38af1d0bb328cf8baa57543466e2d4278a8232f061665161e0085f645f510a512d5b838991367eca89c73c68511e4d43f3c4e17138d2b8cb3156381921ede3cbbe20064848c80bdc29923a6868fbfacd59d9f33a8e4d88c69c1a431be6b0457d1466a954efe43df93cb04e347db2294fb04ac814e',
  otherdata: [
    'df74303aa01cf4e8cb9c9e356ff825e8',
    '1ce20219d96235daf516878b84275913',
    '866e4ae06a871f15709a46f3533d9643',
    '62f41249085fa8bee7d052e1629e68b9',
    'afd4dcf5e5683568f8baa1b72f9cd3ca',
    'af3622ddee5934b17ba3e75a8208645d',
    '425ced06dd8671d8b69675a3dcaa2f88',
    'a81a0f831895273693b18822777918a9'
  ]
}"
wCfNqHhb,"""Button Handling"" rev_01",pleasedontcode,Arduino,Saturday 29th of June 2024 05:10:30 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Button Handling""
	- Source Code NOT compiled for: Arduino Mega
	- Source Code created on: 2024-06-29 10:09:06

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Create an Arduino project utilizing the PCA9685 */
	/* and EasyButton libraries to manage push buttons on */
	/* pins D2, D3, D4, D5, and D6. Configure pins with */
	/* INPUT_PULLUP and implement a loop function to */
	/* detect and respond to button presses. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>  // https://github.com/evert-arias/EasyButton

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t PushButton_PIN_D2 = 2;
const uint8_t PushButton_PIN_D3 = 3;
const uint8_t PushButton_PIN_D4 = 4;
const uint8_t Home_PushButton_PIN_D5 = 5;
const uint8_t Home_PushButton_PIN_D6 = 6;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton button1(PushButton_PIN_D2);
EasyButton button2(PushButton_PIN_D3);
EasyButton button3(PushButton_PIN_D4);
EasyButton button4(Home_PushButton_PIN_D5);
EasyButton button5(Home_PushButton_PIN_D6);

/****** CALLBACK FUNCTIONS *****/
void onButton1Pressed() {
  Serial.println(""Button 1 pressed"");
}

void onButton2Pressed() {
  Serial.println(""Button 2 pressed"");
}

void onButton3Pressed() {
  Serial.println(""Button 3 pressed"");
}

void onButton4Pressed() {
  Serial.println(""Button 4 pressed"");
}

void onButton5Pressed() {
  Serial.println(""Button 5 pressed"");
}

void setup(void) {
  // Initialize Serial for debugging purposes
  Serial.begin(115200);

  Serial.println();
  Serial.println("">>> EasyButton multiple buttons example <<<"");

  // Initialize buttons
  button1.begin();
  button2.begin();
  button3.begin();
  button4.begin();
  button5.begin();

  // Attach callback functions
  button1.onPressed(onButton1Pressed);
  button2.onPressed(onButton2Pressed);
  button3.onPressed(onButton3Pressed);
  button4.onPressed(onButton4Pressed);
  button5.onPressed(onButton5Pressed);
}

void loop(void) {
  // Continuously read the status of the buttons
  button1.read();
  button2.read();
  button3.read();
  button4.read();
  button5.read();
}

/* END CODE */"
rjrEFAmt,rdp-gcshell,maruf17,Bash,Saturday 29th of June 2024 04:49:36 AM CDT,"git clone https://github.com/epic-miner/RDP.git
cd RDP
sh aman.sh

"
NYxxdNLi,API-Hooking-Process,alien_fx_fiend,C++,Saturday 29th of June 2024 04:34:05 AM CDT,"#include <Windows.h>
#include <string>
#include <TlHelp32.h>
#include <tchar.h>
#include <Psapi.h>
#include <iostream>

#pragma comment(lib, ""Psapi.lib"")

BOOL notepadHooked = FALSE;
BOOL notepadPlusPlusHooked = FALSE;

BOOL SetPrivilege(HANDLE hToken, LPCTSTR lpszPrivilege, BOOL bEnablePrivilege) {
    TOKEN_PRIVILEGES tp;
    LUID luid;

    if (!LookupPrivilegeValue(NULL, lpszPrivilege, &luid)) {
        std::wcout << L""LookupPrivilegeValue error: "" << GetLastError() << std::endl;
        return FALSE;
    }

    tp.PrivilegeCount = 1;
    tp.Privileges[0].Luid = luid;
    tp.Privileges[0].Attributes = (bEnablePrivilege) ? SE_PRIVILEGE_ENABLED : 0;

    if (!AdjustTokenPrivileges(hToken, FALSE, &tp, sizeof(TOKEN_PRIVILEGES), (PTOKEN_PRIVILEGES)NULL, (PDWORD)NULL)) {
        std::wcout << L""AdjustTokenPrivileges error: "" << GetLastError() << std::endl;
        return FALSE;
    }

    if (GetLastError() == ERROR_NOT_ALL_ASSIGNED) {
        std::wcout << L""The token does not have the specified privilege. \n"" << std::endl;
        return FALSE;
    }

    return TRUE;
}

BOOL CALLBACK EnumWindowsProc(HWND hwnd, LPARAM lParam) {
    DWORD processId;
    GetWindowThreadProcessId(hwnd, &processId);

    HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, processId);
    if (hProcess != NULL) {
        TCHAR szProcessName[MAX_PATH] = TEXT(""<unknown>"");
        if (GetModuleFileNameEx(hProcess, NULL, szProcessName, MAX_PATH)) {
            std::wstring processName(szProcessName);
            size_t pos = processName.find_last_of(L""\\"");
            if (pos != std::wstring::npos) {
                processName = processName.substr(pos + 1);
            }
            CloseHandle(hProcess);

            TCHAR windowTitle[MAX_PATH];
            GetWindowText(hwnd, windowTitle, MAX_PATH);

            std::wcout << L""Process: "" << processName << L"", Window Title: "" << windowTitle << std::endl;

            if (processName == L""notepad.exe"") {
                std::wstring newTitle = L""Wormhole Vortex"";
                if (SetWindowText(hwnd, newTitle.c_str())) {
                    std::wcout << L""Modified window title of "" << processName << std::endl;
                    notepadHooked = TRUE;
                }
                else {
                    std::wcout << L""Failed to modify window title of "" << processName << std::endl;
                }
            }
            if (processName == L""notepad++.exe"") {
                std::wstring newTitle = L""Wormhole Vortex"";
                if (SetWindowText(hwnd, newTitle.c_str())) {
                    std::wcout << L""Modified window title of "" << processName << std::endl;
                    notepadPlusPlusHooked = TRUE;
                }
                else {
                    std::wcout << L""Failed to modify window title of "" << processName << std::endl;
                }
            }
        }
        else {
            std::wcout << L""GetModuleFileNameEx error: "" << GetLastError() << std::endl;
        }
    }
    return TRUE;
}

int main() {
    HANDLE hToken;
    if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken)) {
        std::wcout << L""OpenProcessToken error: "" << GetLastError() << std::endl;
        return 1;
    }

    if (!SetPrivilege(hToken, SE_DEBUG_NAME, TRUE)) {
        std::wcout << L""Failed to enable debug privilege."" << std::endl;
        CloseHandle(hToken);
        return 1;
    }

    EnumWindows(EnumWindowsProc, 0);

    if (notepadHooked) {
        std::cout << ""Notepad.exe window titles modified successfully."" << std::endl;
    }
    else {
        std::cout << ""Unable to modify Notepad.exe window titles."" << std::endl;
    }

    if (notepadPlusPlusHooked) {
        std::cout << ""Notepad++.exe window titles modified successfully."" << std::endl;
    }
    else {
        std::cout << ""Unable to modify Notepad++.exe window titles."" << std::endl;
    }

    std::cout << ""Press enter to exit..."";
    std::cin.get();

    SetPrivilege(hToken, SE_DEBUG_NAME, FALSE);
    CloseHandle(hToken);
    return 0;
}
"
N8T9fM2m,ScriptHookV_Patch.html,Thunder-Menu,HTML,Saturday 29th of June 2024 04:33:09 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Hex Pattern Replacer</title>
</head>
<body>
    <h1>Replace Hex Pattern in ScriptHookV.dll</h1>
    <input type=""file"" id=""fileInput"" />
    <p id=""status""></p>

    <script>
        document.getElementById('fileInput').addEventListener('change', replaceHexPattern);

        function replaceHexPattern(event) {
            const file = event.target.files[0];

            if (!file) {
                document.getElementById('status').textContent = 'Please select a file.';
                return;
            }

            const reader = new FileReader();
            reader.onload = function(event) {
                const arrayBuffer = event.target.result;
                const uint8Array = new Uint8Array(arrayBuffer);
                const hexPattern = [0x74, 0x3A, 0x48, 0x8D, 0x0D];
                const replacementPattern = [0xEB, 0x3A, 0x48, 0x8D, 0x0D];

                for (let i = 0; i < uint8Array.length - hexPattern.length; i++) {
                    let match = true;
                    for (let j = 0; j < hexPattern.length; j++) {
                        if (uint8Array[i + j] !== hexPattern[j]) {
                            match = false;
                            break;
                        }
                    }
                    if (match) {
                        for (let j = 0; j < replacementPattern.length; j++) {
                            uint8Array[i + j] = replacementPattern[j];
                        }
                        break;
                    }
                }

                const blob = new Blob([uint8Array], { type: 'application/octet-stream' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = 'ScriptHookV_modified.dll';
                link.click();

                document.getElementById('status').textContent = 'Pattern replaced and file downloaded.';
            };
            reader.readAsArrayBuffer(file);
        }
    </script>
</body>
</html>
"
6KHPQ7MX,API-Hooking-Example,alien_fx_fiend,C++,Saturday 29th of June 2024 04:32:22 AM CDT,"#include <windows.h>
#include <iostream>

int main() {
    HWND hwnd = FindWindow(NULL, L""*Untitled - Notepad""); // search for ""*Untitled - Notepad""
    if (hwnd != NULL) {
        SetWindowText(hwnd, L""Wormhole Vortex""); // change the title of the window
        std::cout << ""Code Injected Successfully into Notepad Process!"" << std::endl; // print the message to the console
    }
    else {
        hwnd = FindWindow(NULL, L""Untitled - Notepad""); // search for ""Untitled - Notepad""
        if (hwnd != NULL) {
            SetWindowText(hwnd, L""Wormhole Vortex""); // change the title of the window
            std::cout << ""Code Injected Successfully into Notepad Process!"" << std::endl; // print the message to the console
        }
        else {
            std::cout << ""No window with the specified title was found."" << std::endl;
        }
    }

    // Keep the console window open
    std::cout << ""Press any key to exit..."" << std::endl;
    std::cin.get();

    return 0;
}"
ErNcLMM4,[PAC3] Bite Animation,Cleffy,Lua,Saturday 29th of June 2024 04:27:59 AM CDT,"[1] = {
	[""children""] = {
		[1] = {
			[""children""] = {
				[1] = {
					[""children""] = {
					},
					[""self""] = {
						[""DrawOrder""] = 0,
						[""UniqueID""] = ""19cec5a9be06f3333bc3affc17e63cf346a2229a2d5d4f7b2d4ead40a0d848b3"",
						[""URL""] = """",
						[""TargetEntityUID""] = """",
						[""Offset""] = 0,
						[""BonePower""] = 1,
						[""Hide""] = false,
						[""Name""] = ""Chomp"",
						[""StopOnHide""] = true,
						[""ClassName""] = ""custom_animation"",
						[""EditorExpand""] = true,
						[""AnimationType""] = ""gesture"",
						[""Interpolation""] = ""linear"",
						[""IsDisturbing""] = false,
						[""Rate""] = 1,
						[""Data""] = ""{\""Type\"":\""gesture\"",\""FrameData\"":[{\""FrameRate\"":5.0,\""BoneInfo\"":{\""LrigPelvis\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-0.0,\""MF\"":-2.0,\""RF\"":0.0},\""Lrig_LEG_BR_Femur\"":{\""RU\"":4.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""LrigNeck3\"":{\""RU\"":14.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Metacarpus\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FR_FrontHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""LrigNeck2\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BL_RearHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_FrontHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Jaw\"":{\""RU\"":6.0,\""MU\"":0.0,\""MF\"":-0.30000001192092898,\""MR\"":-0.5,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Radius\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FR_Humerus\"":{\""RU\"":5.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""LrigNeck1\"":{\""RU\"":-12.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BR_RearHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Tail01\"":{\""RU\"":5.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BL_Femur\"":{\""RU\"":4.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-0.0,\""MF\"":0.0,\""RF\"":0.0},\""LrigScull\"":{\""RU\"":9.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Humerus\"":{\""RU\"":5.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_PhalangesManus\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0}}},{\""FrameRate\"":5.0,\""BoneInfo\"":{\""LrigPelvis\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":4.0,\""MR\"":-0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BR_Femur\"":{\""RU\"":-8.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":-0.0,\""RR\"":0.0,\""RF\"":0.0},\""LrigNeck3\"":{\""RU\"":-4.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Metacarpus\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FR_FrontHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""LrigNeck2\"":{\""RU\"":-1.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-1.0,\""MF\"":1.0,\""RF\"":0.0},\""Lrig_LEG_BL_RearHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_FrontHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Jaw\"":{\""RU\"":11.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-1.5,\""MF\"":-0.800000011920929,\""RF\"":0.0},\""Lrig_LEG_FL_Radius\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FR_Humerus\"":{\""RU\"":-9.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""LrigNeck1\"":{\""RU\"":22.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BR_RearHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Tail01\"":{\""RU\"":-10.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BL_Femur\"":{\""RU\"":-8.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""LrigScull\"":{\""RU\"":-8.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":-0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Humerus\"":{\""RU\"":-9.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":-0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_PhalangesManus\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0}}},{\""FrameRate\"":5.0,\""BoneInfo\"":{\""LrigPelvis\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-0.0,\""MF\"":5.0,\""RF\"":0.0},\""Lrig_LEG_BL_Femur\"":{\""RU\"":-10.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""LrigNeck3\"":{\""RU\"":-1.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Metacarpus\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FR_FrontHoof\"":{\""RU\"":-5.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""LrigScull\"":{\""RU\"":-8.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BL_RearHoof\"":{\""RU\"":-5.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_FrontHoof\"":{\""RU\"":-5.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Jaw\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":-0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Radius\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FR_Humerus\"":{\""RU\"":-11.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""LrigNeck1\"":{\""RU\"":22.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-1.0,\""MF\"":-1.0,\""RF\"":0.0},\""Lrig_LEG_BR_RearHoof\"":{\""RU\"":-5.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Tail01\"":{\""RU\"":-12.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BR_Femur\"":{\""RU\"":-10.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-0.0,\""MF\"":0.0,\""RF\"":0.0},\""LrigNeck2\"":{\""RU\"":-1.0,\""MU\"":0.0,\""MF\"":1.0,\""MR\"":-1.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Humerus\"":{\""RU\"":-11.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_PhalangesManus\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-0.0,\""MF\"":0.0,\""RF\"":0.0}}},{\""FrameRate\"":5.0,\""BoneInfo\"":{\""LrigPelvis\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":-2.0,\""MR\"":-0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BL_Femur\"":{\""RU\"":4.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":-0.0,\""RR\"":0.0,\""RF\"":0.0},\""LrigNeck3\"":{\""RU\"":14.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":-0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Metacarpus\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FR_FrontHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""LrigScull\"":{\""RU\"":9.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BL_RearHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_FrontHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Jaw\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Radius\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FR_Humerus\"":{\""RU\"":5.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""LrigNeck1\"":{\""RU\"":-12.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BR_RearHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Tail01\"":{\""RU\"":5.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BR_Femur\"":{\""RU\"":4.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""LrigNeck2\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Humerus\"":{\""RU\"":5.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_PhalangesManus\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0}}},{\""FrameRate\"":3.3333333333333337,\""BoneInfo\"":{\""LrigPelvis\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BR_Femur\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""LrigNeck3\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Metacarpus\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FR_FrontHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""LrigNeck2\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BL_RearHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_FrontHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Jaw\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Radius\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FR_Humerus\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""LrigNeck1\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BR_RearHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Tail01\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BL_Femur\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""LrigScull\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Humerus\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_PhalangesManus\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0}}}],\""Interpolation\"":\""linear\""}"",
						[""StopOtherAnimations""] = false,
					},
				},
				[2] = {
					[""children""] = {
						[1] = {
							[""children""] = {
								[1] = {
									[""children""] = {
										[1] = {
											[""children""] = {
											},
											[""self""] = {
												[""DrawOrder""] = 0,
												[""UniqueID""] = ""45f8a2b3459082721773a7a41b04e9e41763b9184dce6ca33ee6d8bbcddb09c0"",
												[""Axis""] = """",
												[""Input""] = ""time"",
												[""TargetPartUID""] = """",
												[""InputMultiplier""] = 1,
												[""RootOwner""] = false,
												[""TargetEntityUID""] = """",
												[""ZeroEyePitch""] = false,
												[""ClassName""] = ""proxy"",
												[""ResetVelocitiesOnHide""] = true,
												[""VelocityRoughness""] = 10,
												[""Max""] = 0,
												[""Pow""] = 1,
												[""EditorExpand""] = false,
												[""AffectChildren""] = false,
												[""Min""] = 0,
												[""Hide""] = false,
												[""Name""] = """",
												[""VariableName""] = ""Weight"",
												[""Offset""] = 0,
												[""PlayerAngles""] = false,
												[""Additive""] = false,
												[""InputDivider""] = 1,
												[""IsDisturbing""] = false,
												[""OutputTargetPartUID""] = """",
												[""Function""] = ""sin"",
												[""Expression""] = ""clamp(timeex()*6,0,0.3)"",
											},
										},
									},
									[""self""] = {
										[""DrawOrder""] = 0,
										[""UniqueID""] = ""e7946f16b33657143b570c1cce60845ba1ac5abf17e217f1f5ae1bcf44efd76c"",
										[""Flex""] = ""angry_eyes"",
										[""Hide""] = false,
										[""TargetEntityUID""] = """",
										[""EditorExpand""] = true,
										[""Additive""] = false,
										[""Name""] = """",
										[""IsDisturbing""] = false,
										[""Weight""] = 0.3,
										[""RootOwner""] = false,
										[""ClassName""] = ""flex"",
									},
								},
							},
							[""self""] = {
								[""AffectChildrenOnly""] = true,
								[""DrawOrder""] = 0,
								[""TargetPartUID""] = """",
								[""Name""] = """",
								[""Event""] = ""timerx"",
								[""Hide""] = false,
								[""TargetEntityUID""] = """",
								[""RootOwner""] = true,
								[""EditorExpand""] = true,
								[""ClassName""] = ""event"",
								[""Arguments""] = ""0.6@@1"",
								[""Invert""] = false,
								[""IsDisturbing""] = false,
								[""Operator""] = ""equal or above"",
								[""UniqueID""] = ""857b65b4d87ad6dabd4313125c953072a9c0c9197877752946450caf3b20c041"",
								[""ZeroEyePitch""] = false,
							},
						},
					},
					[""self""] = {
						[""AffectChildrenOnly""] = true,
						[""DrawOrder""] = 0,
						[""TargetPartUID""] = """",
						[""Name""] = ""Flex"",
						[""Event""] = ""timerx"",
						[""Hide""] = false,
						[""TargetEntityUID""] = """",
						[""RootOwner""] = true,
						[""EditorExpand""] = false,
						[""ClassName""] = ""event"",
						[""Arguments""] = ""0.1@@1"",
						[""Invert""] = true,
						[""IsDisturbing""] = false,
						[""Operator""] = ""equal or above"",
						[""UniqueID""] = ""e507b2bb454dcdd87377426f64046580bf6c5ee32bbc6db56c7b7bfba3bd88dd"",
						[""ZeroEyePitch""] = false,
					},
				},
				[3] = {
					[""children""] = {
						[1] = {
							[""children""] = {
							},
							[""self""] = {
								[""Path""] = ""https://www.dropbox.com/scl/fi/plrlff0t5fstbwmgpdpvq/Chomp2.mp3?rlkey=5pslpnob26hg6k0bsst0t5h7r&st=t83byb7m&dl=1"",
								[""UniqueID""] = ""1bcc3e13a3ba4372055b8d6f08c806039d6943514fd4b8333a90740d6c834ebc"",
								[""AimPartName""] = """",
								[""SequentialStep""] = 1,
								[""AimPartUID""] = """",
								[""Name""] = """",
								[""EchoFeedback""] = 0.75,
								[""AngleOffset""] = Angle(0, 0, 0),
								[""PlayOnFootstep""] = false,
								[""Radius""] = 1000,
								[""IsDisturbing""] = false,
								[""EyeAngles""] = false,
								[""VolumeLFOAmount""] = 0,
								[""DrawOrder""] = 0,
								[""VolumeLFOTime""] = 0,
								[""TargetEntityUID""] = """",
								[""Echo""] = false,
								[""Sequential""] = false,
								[""Pitch""] = 1,
								[""PlayCount""] = 1,
								[""PitchLFOTime""] = 0,
								[""FilterType""] = 0,
								[""PitchLFOAmount""] = 0,
								[""FilterFraction""] = 1,
								[""MaxPitch""] = 0,
								[""EchoDelay""] = 0.5,
								[""StopOnHide""] = false,
								[""PauseOnHide""] = false,
								[""Doppler""] = false,
								[""Volume""] = 1,
								[""Hide""] = false,
								[""Overlapping""] = false,
								[""EditorExpand""] = false,
								[""PositionOffset""] = Vector(0, 0, 0),
								[""ClassName""] = ""sound2"",
								[""Angles""] = Angle(0, 0, 0),
								[""Bone""] = ""head"",
								[""Position""] = Vector(0, 0, 0),
								[""MinPitch""] = 0,
							},
						},
					},
					[""self""] = {
						[""AffectChildrenOnly""] = true,
						[""DrawOrder""] = 0,
						[""TargetPartUID""] = """",
						[""Name""] = ""Sound"",
						[""Event""] = ""timerx"",
						[""Hide""] = false,
						[""TargetEntityUID""] = """",
						[""RootOwner""] = true,
						[""EditorExpand""] = false,
						[""ClassName""] = ""event"",
						[""Arguments""] = ""0.4@@1"",
						[""Invert""] = true,
						[""IsDisturbing""] = false,
						[""Operator""] = ""equal or above"",
						[""UniqueID""] = ""4bd4c68fa7601290d5dd10a7f0737b3d73799d47a4e81b45779394855cae1333"",
						[""ZeroEyePitch""] = false,
					},
				},
			},
			[""self""] = {
				[""AffectChildrenOnly""] = true,
				[""DrawOrder""] = 0,
				[""TargetPartUID""] = """",
				[""Name""] = """",
				[""Event""] = ""button"",
				[""Hide""] = false,
				[""TargetEntityUID""] = """",
				[""RootOwner""] = true,
				[""EditorExpand""] = false,
				[""ClassName""] = ""event"",
				[""Arguments""] = ""r"",
				[""Invert""] = true,
				[""IsDisturbing""] = false,
				[""Operator""] = ""find simple"",
				[""UniqueID""] = ""09a16ca913d7c7534974666854a22fc2107962d5b070ff6244603377e421c4df"",
				[""ZeroEyePitch""] = false,
			},
		},
		[2] = {
			[""children""] = {
			},
			[""self""] = {
				[""Outline""] = 0,
				[""UniqueID""] = ""a8a4ef6fba40b82ffffe033056b970ad5c330659dab01a9ea9c98bd2233e98be"",
				[""FontOutline""] = false,
				[""AimPartName""] = """",
				[""FontAdditive""] = false,
				[""IgnoreZ""] = false,
				[""FontBlurSize""] = 0,
				[""AimPartUID""] = """",
				[""FontScanLines""] = 0,
				[""ForceAdditive""] = false,
				[""Name""] = ""Made by Cleffy <3"",
				[""DynamicTextValue""] = 0,
				[""VerticalTextAlign""] = 1,
				[""NoTextureFiltering""] = false,
				[""FontAntialias""] = true,
				[""Font""] = ""default"",
				[""IsDisturbing""] = false,
				[""CustomFont""] = ""DermaDefault"",
				[""EyeAngles""] = false,
				[""FontSize""] = 13,
				[""Bone""] = ""head"",
				[""DrawOrder""] = 0,
				[""BlendMode""] = """",
				[""Angles""] = Angle(0, 0, 0),
				[""Shadow""] = false,
				[""FontItalic""] = false,
				[""TargetEntityUID""] = """",
				[""FontRotary""] = false,
				[""Alpha""] = 1,
				[""TextOverride""] = ""Text"",
				[""FontWeight""] = 500,
				[""PositionOffset""] = Vector(0, 0, 0),
				[""FontUnderline""] = false,
				[""OutlineColor""] = Vector(255, 255, 255),
				[""DrawMode""] = ""DrawTextOutlined"",
				[""Color""] = Vector(255, 255, 255),
				[""HorizontalTextAlign""] = 1,
				[""ConcatenateTextAndOverrideValue""] = false,
				[""Position""] = Vector(0, 0, 0),
				[""Translucent""] = true,
				[""Text""] = """",
				[""Hide""] = false,
				[""TextPosition""] = ""Prefix"",
				[""CreateCustomFont""] = false,
				[""OutlineAlpha""] = 1,
				[""EditorExpand""] = false,
				[""Size""] = 1,
				[""ClassName""] = ""text"",
				[""FontStrikeout""] = false,
				[""RoundingPosition""] = 2,
				[""AngleOffset""] = Angle(0, 0, 0),
				[""FontSymbol""] = false,
			},
		},
	},
	[""self""] = {
		[""DrawOrder""] = 0,
		[""UniqueID""] = ""65dba610e5eb2f2cc06dd2185649bc4cc6227fcd5fcdaa04234e1befdbd4d5ef"",
		[""Hide""] = false,
		[""TargetEntityUID""] = """",
		[""EditorExpand""] = false,
		[""OwnerName""] = ""self"",
		[""IsDisturbing""] = false,
		[""Name""] = ""Chomp (Hold R)"",
		[""Duplicate""] = false,
		[""ClassName""] = ""group"",
	},
},
"
g5GXNfnX,Untitled,nq1s788,Python,Saturday 29th of June 2024 04:22:39 AM CDT,"a = input()
b = input()
x = [0] * 10
y = [0] * 10
for i in range(10):
    x[i] = a.count(str(i))
    y[i] = b.count(str(i))
for i in range(9, -1, -1):
    print(str(i) * min(x[i], y[i]), end='')"
5vN2ERdz,AdvTitleChanger,alien_fx_fiend,C++,Saturday 29th of June 2024 04:22:28 AM CDT,"#include <Windows.h>
#include <string>
#include <TlHelp32.h>
#include <tchar.h>
#include <Psapi.h>
#include <iostream>
#include <vector>

#pragma comment(lib, ""Psapi.lib"")

struct ProcessInfo {
    std::wstring processName;
    HWND hwnd;
};

std::vector<ProcessInfo> targetProcesses;
bool running = true;

// Function to set privileges
BOOL SetPrivilege(HANDLE hToken, LPCTSTR lpszPrivilege, BOOL bEnablePrivilege) {
    TOKEN_PRIVILEGES tp;
    LUID luid;

    if (!LookupPrivilegeValue(NULL, lpszPrivilege, &luid)) {
        std::wcout << L""LookupPrivilegeValue error: "" << GetLastError() << std::endl;
        return FALSE;
    }

    tp.PrivilegeCount = 1;
    tp.Privileges[0].Luid = luid;
    tp.Privileges[0].Attributes = (bEnablePrivilege) ? SE_PRIVILEGE_ENABLED : 0;

    if (!AdjustTokenPrivileges(hToken, FALSE, &tp, sizeof(TOKEN_PRIVILEGES), (PTOKEN_PRIVILEGES)NULL, (PDWORD)NULL)) {
        std::wcout << L""AdjustTokenPrivileges error: "" << GetLastError() << std::endl;
        return FALSE;
    }

    if (GetLastError() == ERROR_NOT_ALL_ASSIGNED) {
        std::wcout << L""The token does not have the specified privilege. \n"" << std::endl;
        return FALSE;
    }

    return TRUE;
}

// Callback function for EnumWindows
BOOL CALLBACK EnumWindowsProc(HWND hwnd, LPARAM lParam) {
    DWORD processId;
    GetWindowThreadProcessId(hwnd, &processId);

    HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, processId);
    if (hProcess != NULL) {
        TCHAR szProcessName[MAX_PATH] = TEXT(""<unknown>"");
        if (GetModuleFileNameEx(hProcess, NULL, szProcessName, MAX_PATH)) {
            std::wstring processName(szProcessName);
            size_t pos = processName.find_last_of(L""\\"");
            if (pos != std::wstring::npos) {
                processName = processName.substr(pos + 1);
            }
            CloseHandle(hProcess);

            TCHAR windowTitle[MAX_PATH];
            GetWindowText(hwnd, windowTitle, MAX_PATH);

            if (processName == *(std::wstring*)lParam) {
                targetProcesses.push_back({ processName, hwnd });
            }
        }
        else {
            std::wcout << L""GetModuleFileNameEx error: "" << GetLastError() << std::endl;
        }
    }
    return TRUE;
}

// Function to modify window titles
bool ModifyWindowTitles(const std::wstring& newTitle) {
    bool anyModified = false;
    for (const auto& process : targetProcesses) {
        if (SetWindowText(process.hwnd, newTitle.c_str())) {
            anyModified = true;
            std::wcout << L""Modified window title of "" << process.processName << std::endl;
        }
        else {
            std::wcout << L""Failed to modify window title of "" << process.processName << std::endl;
        }
    }
    return anyModified;
}

// Thread function to persistently modify window titles
DWORD WINAPI TitleModifierThread(LPVOID lpParam) {
    std::wstring newTitle = *(std::wstring*)lpParam;
    while (running) {
        ModifyWindowTitles(newTitle);
        Sleep(1000);
    }
    return 0;
}

int main() {
    std::wstring processName;
    std::wcout << L""Enter the process name (e.g., notepad.exe): "";
    std::getline(std::wcin, processName);

    std::wstring newTitle;
    std::wcout << L""Enter the new window title text: "";
    std::getline(std::wcin, newTitle);

    HANDLE hToken;
    if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken)) {
        std::wcout << L""OpenProcessToken error: "" << GetLastError() << std::endl;
        return 1;
    }

    if (!SetPrivilege(hToken, SE_DEBUG_NAME, TRUE)) {
        std::wcout << L""Failed to enable debug privilege."" << std::endl;
        CloseHandle(hToken);
        return 1;
    }

    EnumWindows(EnumWindowsProc, (LPARAM)&processName);

    if (targetProcesses.empty()) {
        std::wcout << L""No windows found for process: "" << processName << std::endl;
    }
    else {
        HANDLE hThread = CreateThread(NULL, 0, TitleModifierThread, &newTitle, 0, NULL);
        if (hThread == NULL) {
            std::wcout << L""Failed to create thread."" << std::endl;
            return 1;
        }

        std::wcout << L""Window titles are being modified. Press Enter to stop and exit..."" << std::endl;
        std::cin.get();

        running = false;
        WaitForSingleObject(hThread, INFINITE);
        CloseHandle(hThread);
    }

    SetPrivilege(hToken, SE_DEBUG_NAME, FALSE);
    CloseHandle(hToken);

    return 0;
}
"
iGJgmZne,Message-Based-Hooking,alien_fx_fiend,C++,Saturday 29th of June 2024 04:20:20 AM CDT,"#include <Windows.h>
#include <string>
#include <TlHelp32.h>
#include <tchar.h>
#include <Psapi.h>
#include <iostream>
#include <vector>

#pragma comment(lib, ""Psapi.lib"")

struct ProcessInfo {
    std::wstring processName;
    HWND hwnd;
};

std::vector<ProcessInfo> targetProcesses;
bool running = true;

// ... [Keep the SetPrivilege function as it is] ...
BOOL SetPrivilege(HANDLE hToken, LPCTSTR lpszPrivilege, BOOL bEnablePrivilege) {
    TOKEN_PRIVILEGES tp;
    LUID luid;


    if (!LookupPrivilegeValue(NULL, lpszPrivilege, &luid)) {
        std::wcout << L""LookupPrivilegeValue error: "" << GetLastError() << std::endl;
        return FALSE;
    }

tp.PrivilegeCount = 1;
tp.Privileges[0].Luid = luid;
tp.Privileges[0].Attributes = (bEnablePrivilege) ? SE_PRIVILEGE_ENABLED : 0;

if (!AdjustTokenPrivileges(hToken, FALSE, &tp, sizeof(TOKEN_PRIVILEGES), (PTOKEN_PRIVILEGES)NULL, (PDWORD)NULL)) {
    std::wcout << L""AdjustTokenPrivileges error: "" << GetLastError() << std::endl;
    return FALSE;
}

if (GetLastError() == ERROR_NOT_ALL_ASSIGNED) {
    std::wcout << L""The token does not have the specified privilege. \n"" << std::endl;
    return FALSE;
}

return TRUE;
}

BOOL CALLBACK EnumWindowsProc(HWND hwnd, LPARAM lParam) {
    DWORD processId;
    GetWindowThreadProcessId(hwnd, &processId);

    HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, processId);
    if (hProcess != NULL) {
        TCHAR szProcessName[MAX_PATH] = TEXT(""<unknown>"");
        if (GetModuleFileNameEx(hProcess, NULL, szProcessName, MAX_PATH)) {
            std::wstring processName(szProcessName);
            size_t pos = processName.find_last_of(L""\\"");
            if (pos != std::wstring::npos) {
                processName = processName.substr(pos + 1);
            }
            CloseHandle(hProcess);

            TCHAR windowTitle[MAX_PATH];
            GetWindowText(hwnd, windowTitle, MAX_PATH);

            std::wcout << L""Process: "" << processName << L"", Window Title: "" << windowTitle << std::endl;

            if (processName == L""notepad.exe"" || processName == L""notepad++.exe"") {
                targetProcesses.push_back({ processName, hwnd });
            }
        }
        else {
            std::wcout << L""GetModuleFileNameEx error: "" << GetLastError() << std::endl;
        }
    }
    return TRUE;
}

bool ModifyWindowTitles() {
    bool anyModified = false;
    for (const auto& process : targetProcesses) {
        std::wstring newTitle = L""Wormhole Vortex"";
        if (SetWindowText(process.hwnd, newTitle.c_str())) {
            anyModified = true;
                        std::wcout << L""Modified window title of "" << process.processName << std::endl;

        }

        else {

            std::wcout << L""Failed to modify window title of "" << process.processName << std::endl;
        }
    }
    return anyModified;
}

void RestoreWindowTitles() {
    for (const auto& process : targetProcesses) {
                if (SetWindowText(process.hwnd, process.processName.c_str())) {

            std::wcout << L""Restored window title of "" << process.processName << std::endl;

        }

        else {

            std::wcout << L""Failed to restore window title of "" << process.processName << std::endl;

        }
    }
}

DWORD WINAPI TitleModifierThread(LPVOID lpParam) {
    while (running) {
        ModifyWindowTitles();
        Sleep(1000);
    }
    return 0;
}

int main() {
    // ... [Keep the privilege setting code as it is] ...
    HANDLE hToken;
    if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken)) {
        std::wcout << L""OpenProcessToken error: "" << GetLastError() << std::endl;
        return 1;
    }


    if (!SetPrivilege(hToken, SE_DEBUG_NAME, TRUE)) {
        std::wcout << L""Failed to enable debug privilege."" << std::endl;
        CloseHandle(hToken);
        return 1;
    }


    EnumWindows(EnumWindowsProc, 0);

    if (ModifyWindowTitles()) {
        std::wcout << L""Notepad and Notepad++ have been modified successfully."" << std::endl;
    }
    else {
        std::wcout << L""Unable to modify Notepad or Notepad++ window titles."" << std::endl;
    }

    HANDLE hThread = CreateThread(NULL, 0, TitleModifierThread, NULL, 0, NULL);
    if (hThread == NULL) {
        std::wcout << L""Failed to create thread."" << std::endl;
        return 1;
    }

    std::wcout << L""Window titles are being modified. Press Enter to stop and exit..."" << std::endl;
    std::cin.get();

    running = false;
    WaitForSingleObject(hThread, INFINITE);
    CloseHandle(hThread);

    RestoreWindowTitles();

    // ... [Keep the privilege resetting code as it is] ...
    SetPrivilege(hToken, SE_DEBUG_NAME, FALSE);
    CloseHandle(hToken);

    return 0;
}"
jbmnxYvx,nightbot command,SchumacherW,JavaScript,Saturday 29th of June 2024 04:11:51 AM CDT,"sResponse = ['‰ªÄÈ∫º‰∫ãÈÉΩÊ≤íÊúâÁôºÁîü', 'ÊßçÊ≤íÊúâ‰∏äËÜõ', 'ÊõπÁàΩDERÔºåÈñÉÈÅé‰∏ÄÊßç', 'Âè™Â∑Æ‰∏ÄÈªûÈªû', '‰∏≠ÂΩà‰∫Ü'];
sEmoji = ['BegWan', 'GivePLZ', 'InuyoFace', 'DinoDance', 'PopNemo', 'BangbooBounce', 'GlitchCat']; 
sBang = ['SpiritEel', 'FallCry', 'StinkyGlitch']; 
i = Math.floor(Math.random()*sResponse.length);

`${sResponse[i]} ${sUser} ${i != sResponse.length-1 ? smoji[Math.floor(Math.random()*sEmoji.length)] : sBang[Math.floor(Math.random()*sBang.length)]}`"
w2RTJUAP,Untitled,35657,C++,Saturday 29th of June 2024 04:10:39 AM CDT,"#include <iostream>
#include <initializer_list> // –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ—Å–ª–∏ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏

using namespace std;

class int_array {

public:
    int_array() : length(0), data(nullptr) {}

    int_array(int length) : length(length), data(new int[length]) {}

    int_array(const initializer_list<int>& list) : int_array(list.size()) {
        int i = 0;
        for (const int& element : list) {
            data[i] = element;
            i++;
        }
    }

    ~int_array() {
        delete[] data;
    }

    int& operator[](int index) {
        return data[index];
    }

    int get_lenght() const {
        return length;
    }

private:
    int length;
    int* data;

};

int main() {
    int_array array{ 7, 6, 5, 4, 3, 2, 1 }; // —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –¥–ª—è initializer_list
    for (int i = 0; i < 7; i++) {
        cout << array[i] << ' ';
    }
    cout << endl;
}

"
eLbeXNPA,e2e,BbJLeB,JavaScript,Saturday 29th of June 2024 04:07:52 AM CDT,"const { test, describe, beforeEach, afterEach, beforeAll, afterAll, expect } = require('@playwright/test');
const { chromium } = require('playwright');

const host = 'http://localhost:3000';

let browser;
let context;
let page;

let user = {
    email: """",
    password: ""123456"",
    confirmPass: ""123456"",
};

let albumName = """";

describe(""e2e tests"", () => {
    beforeAll(async () => {
        browser = await chromium.launch();
    });

    afterAll(async () => {
        await browser.close();
    });

    beforeEach(async () => {
        context = await browser.newContext();
        page = await context.newPage();
    });

    afterEach(async () => {
        await page.close();
        await context.close();
    });

    describe(""authentication"", () => {

        test(""Registration with Valid Data"", async () => {
            await page.goto(`${host}`);
            await page.click('text=Register');
            await page.waitForSelector('form[action=""/users/register""]');

            user.email = `testuser${Math.floor(Math.random() * 10000)}@example.com`;

            await page.fill('input[name=""email""]', user.email);
            await page.fill('input[name=""password""]', user.password);
            await page.fill('input[name=""rePass""]', user.confirmPass);

            const [response] = await Promise.all([
                page.waitForResponse(response => response.status() === 200 && response.url().includes('/users/register')),
                page.click('button[type=""submit""]')
            ]);

            expect(response.ok()).toBeTruthy();

            const responseBody = await response.json();
            expect(responseBody.email).toBe(user.email);
            expect(responseBody.password).toBe(user.password);
        });

        test(""Login with Valid Data"", async () => {
            await page.goto(`${host}`);
            await page.click('text=Login');
            await page.waitForSelector('form[action=""/users/login""]');

            await page.fill('input[name=""email""]', user.email);
            await page.fill('input[name=""password""]', user.password);

            const [response] = await Promise.all([
                page.waitForResponse(response => response.status() === 200 && response.url().includes('/users/login')),
                page.click('button[type=""submit""]')
            ]);

            expect(response.ok()).toBeTruthy();

            const responseBody = await response.json();
            expect(responseBody.email).toBe(user.email);
            expect(responseBody.password).toBe(user.password);
        });

        test(""Logout from the Application"", async () => {

            await page.goto(`${host}`);
            await page.click('text=Logout');
            await page.waitForSelector('text=Login');

            const url = page.url();
            expect(url).toBe(`${host}/`);
        });

    });

    describe(""navbar"", () => {

        test(""Navigation for Logged-In User Testing"", async () => {
            await page.goto(`${host}`);

            expect(await page.isVisible('text=Home')).toBeTruthy();
            expect(await page.isVisible('text=Catalog')).toBeTruthy();
            expect(await page.isVisible('text=Search')).toBeTruthy();
            expect(await page.isVisible('text=Create Album')).toBeTruthy();
            expect(await page.isVisible('text=Logout')).toBeTruthy();

            expect(await page.isVisible('text=Login')).toBeFalsy();
            expect(await page.isVisible('text=Register')).toBeFalsy();
        });

        test(""Navigation for Guest User Testing"", async () => {
            await page.goto(`${host}`);

            expect(await page.isVisible('text=Home')).toBeTruthy();
            expect(await page.isVisible('text=Catalog')).toBeTruthy();
            expect(await page.isVisible('text=Search')).toBeTruthy();
            expect(await page.isVisible('text=Login')).toBeTruthy();
            expect(await page.isVisible('text=Register')).toBeTruthy();

            expect(await page.isVisible('text=Create Album')).toBeFalsy();
            expect(await page.isVisible('text=Logout')).toBeFalsy();
        });

    });

    describe(""CRUD"", () => {

        test(""Create an Album Testing"", async () => {
            await page.goto(`${host}`);
            await page.click('text=Create Album');
            await page.waitForSelector('form[action=""/data/albums""]');

            albumName = `Test Album ${Math.floor(Math.random() * 10000)}`;

            await page.fill('input[name=""name""]', albumName);
            await page.fill('input[name=""imgUrl""]', '/images/test.jpg');
            await page.fill('input[name=""price""]', '19.99');
            await page.fill('input[name=""releaseDate""]', '2024-06-29');
            await page.fill('input[name=""artist""]', 'Test Artist');
            await page.fill('input[name=""genre""]', 'Test Genre');
            await page.fill('textarea[name=""description""]', 'Test Description');

            const [response] = await Promise.all([
                page.waitForResponse(response => response.status() === 200 && response.url().includes('/data/albums')),
                page.click('button[type=""submit""]')
            ]);

            expect(response.ok()).toBeTruthy();

            const responseBody = await response.json();
            expect(responseBody.name).toBe(albumName);
            expect(responseBody.imgUrl).toBe('/images/test.jpg');
            expect(responseBody.price).toBe('19.99');
            expect(responseBody.releaseDate).toBe('2024-06-29');
            expect(responseBody.artist).toBe('Test Artist');
            expect(responseBody.genre).toBe('Test Genre');
            expect(responseBody.description).toBe('Test Description');
        });

        test(""Edit an Album Testing"", async () => {
            await page.goto(`${host}`);
            await page.click('text=Search');
            await page.fill('input[name=""search""]', albumName);
            await page.click('.button-list >> text=Search'); 

            await page.click(`text=${albumName}`);
            await page.click('text=Edit');
            await page.waitForSelector('form[action^=""/data/albums""]');

            const updatedAlbumName = `${albumName} Updated`;

            await page.fill('input[name=""name""]', updatedAlbumName);

            const [response] = await Promise.all([
                page.waitForResponse(response => response.status() === 200 && response.url().includes('/data/albums')),
                page.click('button[type=""submit""]')
            ]);

            expect(response.ok()).toBeTruthy();

            const responseBody = await response.json();
            expect(responseBody.name).toBe(updatedAlbumName);
        });

        test(""Delete an Album Testing"", async () => {
            await page.goto(`${host}`);
            await page.click('text=Search');
            await page.fill('input[name=""search""]', albumName);
            await page.click('.button-list >> text=Search'); 

            await page.click(`text=${albumName}`);
            await page.click('text=Delete');
            await page.waitForResponse(response => response.status() === 200);

        });

    });
});

"
