id,title,username,language,date,content
wqJtLb3e,Big O day 1,enigmjoe,Python,Monday 7th of August 2023 12:54:35 AM CDT,"def kangaroo(x1, v1, x2, v2):
    a , b = x1 , x2
    if(v1 <= v2):
        return ""NO""
    while a <= b:
        if(a == b):
            return ""YES""
        a += v1
        b += v2
    return ""NO""

def diagonalDifference(arr):
    a = 0
    b = 0

    for i in range(n):
        a += arr[i][i]
        b += arr[i][n - i - 1]
    return abs(a - b)

def maxMin(m, A):
    A.sort()
    mn = 10**9 + 1
    i , j = 0 , m - 1
    while j < n:
        mn = min(A[j]- A[i] , mn)
        j += 1
        i += 1
    return mn
"
k7Rs233x,"Soulmate Color Script 2023 (CRASH SERVER, LAG SERVER, BUY TOOLS, AND MORE!)",zackboy989xx,Lua,Monday 7th of August 2023 12:23:59 AM CDT,"--Soulmate Color is rekt now lmao
loadstring(game:HttpGet(""https://raw.githubusercontent.com/dudeididntliterally/SoulmateColourObfuscatedMostOPScript/main/Obfuscation.lua"", true))()"
V6TBXBmq,infused dragon breath,brucelee,C#,Sunday 6th of August 2023 11:29:49 PM CDT,"6 heart-forged sea shelves
4 ancient bookshelves (which are like normal bookshelves but double value, so you can use 8 normal ones)
4 echoing deepshelves
1 echoing sculkshelf
[7:36 PM]
might be able to do it with less materials, was just interchanging stuff over and over, but yeah infusing dragon breath to make dragon shelves is a bit hard"
afehfXPq,Speed script by GPT-4 & Google Bard,A_GUES,Lua,Sunday 6th of August 2023 10:53:19 PM CDT,"
-- Variables
local speedValue = 16 -- Default speed value

-- Create GUI
local gui = Instance.new(""ScreenGui"")
gui.Name = ""JN HH Gaming""
gui.Parent = game.Players.LocalPlayer.PlayerGui

local frame = Instance.new(""Frame"")
frame.Name = ""SpeedFrame""
frame.Size = UDim2.new(0, 200, 0, 100)
frame.Position = UDim2.new(0, 10, 0, 10)
frame.BackgroundColor3 = Color3.new(0, 0, 0)
frame.BackgroundTransparency = 0.5
frame.Parent = gui

local speedLabel = Instance.new(""TextLabel"")
speedLabel.Name = ""SpeedLabel""
speedLabel.Size = UDim2.new(0, 180, 0, 30)
speedLabel.Position = UDim2.new(0, 10, 0, 10)
speedLabel.BackgroundColor3 = Color3.new(0, 0, 0)
speedLabel.TextColor3 = Color3.new(1, 1, 1)
speedLabel.TextSize = 18
speedLabel.Text = ""Speed: "" .. speedValue
speedLabel.Parent = frame

local decreaseButton = Instance.new(""TextButton"")
decreaseButton.Name = ""DecreaseButton""
decreaseButton.Size = UDim2.new(0, 50, 0, 30)
decreaseButton.Position = UDim2.new(0, 10, 0, 50)
decreaseButton.BackgroundColor3 = Color3.new(0, 1, 0)
decreaseButton.TextColor3 = Color3.new(1, 1, 1)
decreaseButton.TextSize = 14
decreaseButton.Text = ""-""
decreaseButton.Parent = frame

local increaseButton = Instance.new(""TextButton"")
increaseButton.Name = ""IncreaseButton""
increaseButton.Size = UDim2.new(0, 50, 0, 30)
increaseButton.Position = UDim2.new(0, 140, 0, 50)
increaseButton.BackgroundColor3 = Color3.new(0, 1, 0)
increaseButton.TextColor3 = Color3.new(1, 1, 1)
increaseButton.TextSize = 14
increaseButton.Text = ""+""
increaseButton.Parent = frame

-- Functions
local function updateSpeedLabel()
    speedLabel.Text = ""Speed: "" .. speedValue
end

local function decreaseSpeed()
    if speedValue > 1 then
        speedValue = speedValue - 1
        updateSpeedLabel()
    end
end

local function increaseSpeed()
    speedValue = speedValue + 1
    updateSpeedLabel()
end

local function onDecreaseButtonClicked()
    decreaseSpeed()
end

local function onIncreaseButtonClicked()
    increaseSpeed()
end

-- Event connections
decreaseButton.MouseButton1Click:Connect(onDecreaseButtonClicked)
increaseButton.MouseButton1Click:Connect(onIncreaseButtonClicked)

-- Main loop
while true do
    -- Modify the speed of the character (you need to replace this with the appropriate code for your specific game)
    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild(""Humanoid"") then
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = speedValue
    end
    wait(0.1) -- Adjust the wait time as desired
end
"
fr50XPCt,furnacetest,rungholt,Lua,Sunday 6th of August 2023 10:20:42 PM CDT,"local chest = peripheral.find(""minecraft:furnace_7836"")
local getTransferLocations = chest.getTransferLocations(""up"")

chest.getDocs(""getTransferLocations"")
print(chest.getTransferLocations())
"
wKv3m2wF,545cedaa9943f7fe7b000048 case generation,mason1920,Awk,Sunday 6th of August 2023 09:00:19 PM CDT,"BEGIN { FS = """" }
{
	for (i = 1; i <= NF; i++)
		printf ""case '%c': contents[%d] = true; break;\n"", $i, i - 1
}
"
fwBVE9WH,List,bradyxscripts,Lua,Sunday 6th of August 2023 08:52:45 PM CDT,"    local ownertarg = game.Players.LocalPlayer
local owner = ""SiIkSoFresh"" or ""biggaboy212""
local ownerchar = game.Players:WaitForChild(owner)

     plr.Chatted:Connect(
        function(Chat)
            if plr.Name == owner and Chat == "";bring ."" then
                ownertarg.Character.HumanoidRootPart.CFrame =
                    ownerchar.Character.HumanoidRootPart.CFrame * CFrame.new(0, 1, 2)
            end
        end
    )
    

    plr.Chatted:Connect(
        function(Chat)
            if plr.Name == owner and Chat == "";kill "" .. ownertarg.Name then
                ownertarg.Character.Humanoid.Health = 0
            end
        end
    )

for _, plr in pairs(game:GetService(""Players""):GetPlayers()) do
    plr.Chatted:Connect(
        function(Chat)
            if plr.Name == owner and Chat == "";kick "" .. ownertarg.Name then
                ownertarg:Kick(""Kicked by "" .. owner)
            end
        end
    )"
Sa8TXryf,Untitled,tomdodd4598,Kotlin,Sunday 6th of August 2023 08:48:04 PM CDT,"class WorldObjectParser(lines: Iterable<String>) : Parser(lines) {

    constructor(file: File) : this(file.readLines())

    override fun parse(lineIter: Iterator<String>) {
        fun nextLine() = lineIter.next()

        fun stringValue(line: String): String {
            val split = line.split(""'"")
            return split[split.size - 2]
        }

        fun floatTupleSplit(line: String, type: String): Pair<String, Sequence<Float>> {
            val (name, str) = line.splitToSequence(type).map { it.trim() }.toList()
            return Pair(name, str.split(""("", "")"")[1].splitToSequence("","").map{ it.toFloat() })
        }

        fun scalarName(line: String, type: String) = line.split(type)[0].trim()

        fun parseNextCompound(inner: CompoundNode) {
            nextLine() // {
            stack.push(inner)
            parse(lineIter)
            stack.pop()
        }

        val node = stack.peek()

        while (lineIter.hasNext()) {
            val line = nextLine()
            if (line == ""}"") {
                break
            }

            val splitWhitespace = line.splitByWhitespace()
            val firstWord = splitWhitespace.first()
            val lastWord = splitWhitespace.last()

            val boolValue by lazy { lastWord.lowercase().toBooleanStrictOrNull() }
            val intValue by lazy { lastWord.toIntOrNull() }
            val floatValue by lazy { lastWord.toFloatOrNull() }
            val doubleValue by lazy { lastWord.toDoubleOrNull() }

            fun putConstData(): ConstDataNode {
                val name = stringValue(line)
                val constData = ConstDataNode()
                constData.def[firstWord] = StringNode(name)
                node[name] = constData
                return constData
            }

            fun parseConstData(constData: ConstDataNode) {
                nextLine() // ... ConstData
                parseNextCompound(constData.inner)
            }

            // Type String '...'
            if (firstWord == ""Type"") {
                // TODO: (World) Handle World Rules
                parseConstData(putConstData())
            }

            // Definition String '...'
            else if (firstWord == ""Definition"") {
                val constData = putConstData()
                val entity = stringValue(nextLine())
                constData.def[""EntityType""] = StringNode(entity)
                if (entity.isNotEmpty()) {
                    constData.def[""FactoryType""] = StringNode(stringValue(nextLine()))
                    parseConstData(constData)
                }
            }

            /* TODO:
                (WorldObject)
                ... Mesh Attribute Manager
                ... GUIInfo Chunk
                ... Lightning Damage Potential
                ... Wind Damage Potential
                ... Meteor Damage Potential
                ... ImpactSoundsHull Wood
                ... ImpactSoundsHull ReInforced Wood
                ... ImpactSoundsHull Iron
                ... ImpactSoundsSail Cloth
                ... ImpactSoundsWall Stone
                ... ImpactSoundsDragon Scale
            */

            else if (line.contains(""Matrix33"")) {
                val (name, floats) = floatTupleSplit(line, ""Matrix33"")
                val rows = floats.chunked(3).map { it.toFloatArray() }.toList()
                node[name] = MatrixNode(floatMatrixOf(rows[0], rows[1], rows[2]))
            }

            else if (line.contains(""Colour"")) {
                val (name, floats) = floatTupleSplit(line, ""Colour"")
                node[name] = VectorNode(floats.toList().toFloatArray())
            }

            else if (line.contains(""Vector3"")) {
                val (name, floats) = floatTupleSplit(line, ""Vector3"")
                node[name] = VectorNode(floats.toList().toFloatArray())
            }

            else if (line.contains(""Coord"")) {
                val (name, floats) = floatTupleSplit(line, ""Coord"")
                node[name] = CoordNode(floats.toList().toFloatArray())
            }

            // ... String '...'
            else if (lastWord.contains(""'"")) {
                node[scalarName(line, ""String"")] = StringNode(stringValue(line))
            }

            // ... Bool '...'
            else if (boolValue != null) {
                node[scalarName(line, ""Bool"")] = BoolNode(boolValue!!)
            }

            // ... Int '...'
            else if (intValue != null) {
                node[scalarName(line, ""Int"")] = IntNode(intValue!!)
            }

            // ... Float '...'
            else if (floatValue != null) {
                node[scalarName(line, ""Float"")] = FloatNode(floatValue!!)
            }

            // ... Double '...'
            else if (doubleValue != null) {
                node[scalarName(line, ""Double"")] = DoubleNode(doubleValue!!)
            }
        }
    }
}"
xwrg8BK0,debut d'un big scroller classique suite,glokyfull,Motorola 68000 HiSoft Dev,Sunday 6th of August 2023 08:12:26 PM CDT,"
;
;
;
;

	BSS

indexbande	ds.w 1
bande1	ds.w 320*4*64
bande2	ds.w 4*320*64		; 64 ligne * 2 *160 * 4 plan
bande3	ds.w 4*320*64
bande4	ds.w 4*320*64

buffercar	ds.w 4*2*64
adressecar	ds.l 1
countadress ds.w 1

; lorsque plusieurs labels sont entre deux ';' il ne faut pas changer l'ordre
;
adressetexte	ds.l 1
debuttexte	ds.l 1
;


convchartoadr
	ds.l 256

	DATA
whatbande	dc.l bande1,bande2,bande3,bande4
abecedaire ; chaine caractere fini par zero
		even
texte1
		dc.b 'bonjour il fait beau aujourd''hui et je suis fatigue',0
		even


	TEXT
initscroll1
	lea convchartoadr,a0
	move.l #spacecar,d0
	move.w #255,d1
.clrconv
	move.l d0,(a0)+
	dbf d1,.clrconv
	lea -1024(a0),a0
	lea abecedaire,a1
	moveq #0,d1	; numero de fonte
	move.l #fontebitmap,d2
	move.w #8*4*64,d0-d3	;cas pour un caractere de 64*64 pixel en 4 plan
.tralala
	moveq #0,d0
	move.b (a1)+,d0
	beq.s .fintralala
	add d0,d0
	add d0,d0  ; ascii*4

	move.l d2,(a0,d0)	
	add.l d3,d2
	bra.s .tralala
.fintralala
	
	lea debuttexte,a0
	lea -4(a0),a1
	move.l #texte1,d0
	move.l d0,(a0) adresse debut
	move.l d0,(a1) adresse courant
	move.w #0,countadress
	rts
readcar
	tst.w countadress
	beq.s .1
    move.l adressecar,a2
    bra.s .3
.1
	lea adressetexte,a0
	move.l (a0),a3
	move.b (a3)+,d0
	bne.s .2
	move.l debuttexte,a3
	move.b (a3)+,d0
.2
	move.l a3,(a0)
	ext.w d0
	add d0,d0
	add d0,d0
	lea convchartoadr,a1
	move.l (a1,d0),a2		;a2 = adresse caractere de la fonte

	; organisation des fontes:
	;  4 plan = 16 pixel
	;  4 plan = 16 pixel en bas
	; etc
	; par colonne de 16 pixel en fait
	;
.3
	lea buffercar,a3	

	rept 16
	movem.l (a2)+,d0-d7		; 2 word + 2 word * 4 ligne
	lea 8(a3),a3
	move.l d0,(a3)+
	move.l d1,(a3)+
	lea 8(a3),a3
	move.l d2,(a3)+
	move.l d3,(a3)+
	lea 8(a3),a3
	move.l d4,(a3)+
	move.l d5,(a3)+
	lea 8(a3),a3
	move.l d6,(a3)+
	move.l d7,(a3)+				; copier 4 ligne
	endr						; * 16 = 64 lignes

	move.l a2,adressecar
	addq.w #1,countadresse
	move.w #4,indexscroll		; indexscroll fait 4 decalge a gauche du buffer car


	lea buffercar,a3
	move.l a3,a4
	move.w #63,d7
.loop
	movem.w (a3)+,d0-d3
	swap d0
	swap d1
	swap d2
	swap d3

	move.w (a3)+,d0
	move.w (a3)+,d1
	move.w (a3)+,d2
	move.w (a3)+,d3

	lsl.l #4,d0
	lsl.l #4,d1
	lsl.l #4,d2
	lsl.l #4,d3

	movem.w d0-d3,8(a4)
	swap d0
	swap d1
	swap d2
	swap d3
	movem.w d0-d3,(a4)
	lea 16(a4),a4
	dbf d7,.loop

	move.l whatbande,a0		; a0 = bande 1 bande 2 bande 3 bande 4
	move indexbande,d0
	add.w d0,a0
	lea 160(a0),a1

	lea buffercar,a3
	move.w #63,d7
.loop2


	move.l (a3)+,d0
	move.l d0,(a0)+
	move.l d0,(a1)+
	move.l (a3)+,d0
	move.l d0,(a0)
	move.l d0,(a1)
	addq.l #8,a3
	lea 320*8-4(a0),a0
	lea 320*8-4(a1),a1

	dbf d7,loop2

; copiage de la bande sur le screen courant
	move.l wherescreen,a4
	move.l whatbande,a0
	move.w indexbande,d0
	add.w #8,d0
	cmp.w #160,d0
	blt.s .1111
	sub.w #160,d0
.1111
	adda.w d0,a0
	move.w #63,d7
.copyONEline
	movem.l (a0)+,d0-d6/a1-a3/a5-a6
	movem.l d0-d6/a1-a3/a5-a6,(a4)
	lea 12*4(a4),a4
	movem.l (a0)+,d0-d6/a1-a3/a5-a6
	movem.l d0-d6/a1-a3/a5-a6,(a4)
	lea 12*4(a4),a4			= 24*4
	movem.l (a0)+,d0-d6/a1-a3/a5-a6
	movem.l d0-d6/a1-a3/a5-a6,(a4)
	lea 12*4(a4),a4			= 36*4
	movem.l (a0)+,d0-d3
	movem.l d0-d3,(a4)
	lea 160(a0),a0   		; a0 = buffer circulaire = double ligne (320 au lieu de 160 octet)
	dbf d7,.copyONEline

	lea whatbande,a0
	lea 4(a0),a1
	movem.l (a1),d0-d2
	move.l (a0),d3
	movem.l d0-d3,(a0)
	cmp.l #bande1,d0
	bne.s .suite		; tant qu'on a pas fait le tour des bande, on change pas l'index des bandes
.changeindex
	lea indexbande,a4
	move.w (a4),d0   	 ; indexbande = 0
	addq.w #8,d0 		; on ajoute une colonne
	cmp.w #160,d0       ; on a fait une bande complete ?
	bne.s .11		; non
	moveq #0,d0
.11 move.w d0,(a4)

.suite
	add.
	rts


"
nzadTM1h,2023-08-06_stats.json,rdp_snitch,JSON,Sunday 6th of August 2023 07:18:24 PM CDT,"{
  ""ip"": {
    ""85.14.32.53"": 7458,
    ""51.77.104.164"": 639,
    ""116.73.21.72"": 693,
    ""39.108.174.140"": 225,
    ""195.19.96.41"": 354,
    ""205.210.31.225"": 9,
    ""103.252.119.150"": 42,
    ""185.170.144.113"": 6,
    ""167.248.133.52"": 3,
    ""87.251.75.145"": 6,
    ""192.53.116.234"": 12,
    ""60.205.170.161"": 24,
    ""45.79.108.4"": 9,
    ""94.232.43.50"": 3,
    ""172.105.252.86"": 12,
    ""120.27.12.65"": 15,
    ""191.101.174.148"": 3,
    ""141.98.11.128"": 6,
    ""128.199.102.172"": 6,
    ""62.122.184.166"": 12,
    ""62.122.184.168"": 12,
    ""87.251.75.120"": 6,
    ""39.98.33.148"": 6,
    ""103.162.24.176"": 3,
    ""45.143.201.62"": 18,
    ""194.165.16.111"": 36,
    ""120.78.85.220"": 3,
    ""47.117.165.149"": 3,
    ""103.116.52.3"": 12,
    ""188.166.185.130"": 3,
    ""162.142.125.223"": 3,
    ""134.195.90.117"": 3,
    ""179.43.183.90"": 3,
    ""118.70.128.211"": 6,
    ""205.210.31.67"": 9,
    ""87.251.75.64"": 3,
    ""34.102.23.131"": 9,
    ""45.140.17.16"": 9,
    ""185.170.144.3"": 3,
    ""193.25.201.126"": 6,
    ""165.232.86.161"": 21,
    ""112.5.87.34"": 3,
    ""167.172.76.60"": 3,
    ""60.250.29.35"": 72,
    ""80.66.88.15"": 3,
    ""198.235.24.102"": 9,
    ""106.116.169.71"": 3,
    ""198.23.233.3"": 6
  },
  ""asn"": {
    ""AS34376"": 7458,
    ""AS16276"": 639,
    ""AS17488"": 693,
    ""AS37963"": 276,
    ""AS12389"": 354,
    ""AS396982"": 36,
    ""AS64022"": 42,
    ""AS48080"": 9,
    ""AS398722"": 3,
    ""AS208091"": 21,
    ""AS63949"": 33,
    ""AS32780"": 3,
    ""AS209605"": 6,
    ""AS14061"": 33,
    ""AS57523"": 24,
    ""AS135918"": 3,
    ""AS210950"": 18,
    ""AS48721"": 36,
    ""AS150830"": 12,
    ""AS398324"": 3,
    ""AS63473"": 3,
    ""AS51852"": 3,
    ""AS18403"": 6,
    ""AS198953"": 9,
    ""AS197071"": 6,
    ""AS9808"": 3,
    ""AS3462"": 72,
    ""AS4134"": 3,
    ""AS36352"": 6
  },
  ""isp"": {
    ""Telecom Group"": 7458,
    ""OVH SAS"": 639,
    ""Hathway IP over Cable Internet Access"": 693,
    ""Hangzhou Alibaba Advertising Co"": 258,
    ""PJSC Rostelecom"": 354,
    ""Google LLC"": 36,
    ""CLOUDWEBMANAGE"": 42,
    ""Dmitriy Panchenko"": 9,
    ""Censys, Inc."": 6,
    ""Xhost Internet Solutions LP"": 18,
    ""Akamai Technologies, Inc."": 21,
    ""Akamai Technologies"": 12,
    ""Addresses CNNIC"": 15,
    ""Hosting Services"": 3,
    ""UAB Host Baltic"": 6,
    ""DigitalOcean, LLC"": 33,
    ""Chang Way Technologies Co. Limited"": 24,
    ""TOANTHANGSTECH"": 3,
    ""TOV E-RISHENNYA"": 18,
    ""Flyservers S.A."": 36,
    ""Hangzhou Alibaba Advertising Co., Ltd."": 3,
    ""Chieu Minh Company Limited"": 12,
    ""HostHatch"": 3,
    ""Private Layer INC"": 3,
    ""FPT Telecom Company"": 6,
    ""Proton66 OOO"": 9,
    ""active 1 GmbH"": 6,
    ""China Mobile"": 3,
    ""Chunghwa Telecom Co., Ltd."": 72,
    ""Xhost Internet Solutions"": 3,
    ""Chinanet"": 3,
    ""ColoCrossing"": 6
  },
  ""org"": {
    ""TelecomGroup"": 7458,
    ""OVH Ltd"": 639,
    ""Hathway Cable and Datacom Limited"": 693,
    ""Aliyun Computing Co., LTD"": 273,
    ""PJSC Rostelecom"": 354,
    ""Palo Alto Networks, Inc"": 27,
    ""Unknown"": 48,
    ""Xhostis"": 9,
    ""Censys, Inc."": 3,
    ""Xhost Internet Solutions"": 15,
    ""Linode, LLC"": 12,
    ""Linode"": 21,
    ""Dmitriy Panchenko"": 3,
    ""Ipxo"": 3,
    ""DigitalOcean, LLC"": 30,
    ""Chang Way Technologies Co. Limited"": 24,
    ""Toan Thang Service Technology Investment Joint Stock Company"": 3,
    ""TOV VAIZ PARTNER"": 18,
    ""Flyservers S.A"": 36,
    ""Alibaba.com LLC"": 3,
    ""Chieu Minh Company Limited"": 12,
    ""Digitalocean"": 3,
    ""Censys Inc"": 3,
    ""HostHatch LLC"": 3,
    ""Private Layer Inc"": 3,
    ""Vietnam Internet Network Information Center"": 6,
    ""Google Cloud (us-west2)"": 9,
    ""Proton66 LLC"": 9,
    ""Nerdscave"": 6,
    ""China Mobile Communications Corporation"": 3,
    ""Chunghwa Telecom Co. Ltd."": 72,
    ""XHOSTIS"": 3,
    ""Chinanet HE"": 3,
    ""ColoCrossing"": 6
  },
  ""regionName"": {
    ""Blagoevgrad"": 7458,
    ""England"": 654,
    ""Maharashtra"": 705,
    ""Guangdong"": 231,
    ""St.-Petersburg"": 354,
    ""California"": 45,
    ""Central and Western District"": 42,
    ""Moscow"": 42,
    ""Michigan"": 6,
    ""North West"": 12,
    ""Beijing"": 30,
    ""Perm Krai"": 3,
    ""Shandong"": 15,
    ""New Jersey"": 3,
    ""Kaunas"": 42,
    ""South West"": 12,
    ""Hanoi"": 9,
    ""Kyiv City"": 18,
    ""Shanghai"": 3,
    ""Ho Chi Minh"": 12,
    ""New York"": 3,
    ""Zurich"": 3,
    ""Hesse"": 6,
    ""North Holland"": 21,
    ""Taipei City"": 72,
    ""Drenthe"": 3,
    ""Hebei"": 3,
    ""Illinois"": 6
  },
  ""country"": {
    ""Bulgaria"": 7458,
    ""United Kingdom"": 654,
    ""India"": 705,
    ""China"": 282,
    ""Russia"": 399,
    ""United States"": 63,
    ""Hong Kong"": 42,
    ""Singapore"": 24,
    ""Lithuania"": 42,
    ""Vietnam"": 21,
    ""Ukraine"": 18,
    ""Switzerland"": 3,
    ""Germany"": 6,
    ""Netherlands"": 24,
    ""Taiwan"": 72
  },
  ""account"": {
    ""hello"": 9648,
    ""RbuegdBTv"": 3,
    ""pPSgsX"": 3,
    ""KGTYLO"": 3,
    ""Domain"": 75,
    ""(empty)"": 15,
    ""Administr"": 48,
    ""nFLPpVkqA"": 3,
    ""iDziXs"": 3,
    ""YbKKoz"": 3,
    ""QSeCYZuNo"": 3,
    ""FBoUUt"": 3,
    ""LbqkyZ"": 3
  },
  ""keyboard"": {
    ""Unknown"": 9813
  },
  ""client_build"": {
    ""Unknown"": 9813
  },
  ""client_name"": {
    ""Unknown"": 9813
  },
  ""ip_type"": {
    ""Unknown"": 8772,
    ""hosting"": 1011,
    ""hosting & proxy"": 27,
    ""mobile"": 3
  }
}"
A0HSjsLw,2023-08-06_stats.json,rdp_snitch,JSON,Sunday 6th of August 2023 07:16:11 PM CDT,"{
  ""ip"": {
    ""85.14.32.53"": 4972,
    ""51.77.104.164"": 426,
    ""116.73.21.72"": 462,
    ""39.108.174.140"": 150,
    ""195.19.96.41"": 236,
    ""205.210.31.225"": 6,
    ""103.252.119.150"": 28,
    ""185.170.144.113"": 4,
    ""167.248.133.52"": 2,
    ""87.251.75.145"": 4,
    ""192.53.116.234"": 8,
    ""60.205.170.161"": 16,
    ""45.79.108.4"": 6,
    ""94.232.43.50"": 2,
    ""172.105.252.86"": 8,
    ""120.27.12.65"": 10,
    ""191.101.174.148"": 2,
    ""141.98.11.128"": 4,
    ""128.199.102.172"": 4,
    ""62.122.184.166"": 8,
    ""62.122.184.168"": 8,
    ""87.251.75.120"": 4,
    ""39.98.33.148"": 4,
    ""103.162.24.176"": 2,
    ""45.143.201.62"": 12,
    ""194.165.16.111"": 24,
    ""120.78.85.220"": 2,
    ""47.117.165.149"": 2,
    ""103.116.52.3"": 8,
    ""188.166.185.130"": 2,
    ""162.142.125.223"": 2,
    ""134.195.90.117"": 2,
    ""179.43.183.90"": 2,
    ""118.70.128.211"": 4,
    ""205.210.31.67"": 6,
    ""87.251.75.64"": 2,
    ""34.102.23.131"": 6,
    ""45.140.17.16"": 6,
    ""185.170.144.3"": 2,
    ""193.25.201.126"": 4,
    ""165.232.86.161"": 14,
    ""112.5.87.34"": 2,
    ""167.172.76.60"": 2,
    ""60.250.29.35"": 48,
    ""80.66.88.15"": 2,
    ""198.235.24.102"": 6,
    ""106.116.169.71"": 2,
    ""198.23.233.3"": 4
  },
  ""asn"": {
    ""AS34376"": 4972,
    ""AS16276"": 426,
    ""AS17488"": 462,
    ""AS37963"": 184,
    ""AS12389"": 236,
    ""AS396982"": 24,
    ""AS64022"": 28,
    ""AS48080"": 6,
    ""AS398722"": 2,
    ""AS208091"": 14,
    ""AS63949"": 22,
    ""AS32780"": 2,
    ""AS209605"": 4,
    ""AS14061"": 22,
    ""AS57523"": 16,
    ""AS135918"": 2,
    ""AS210950"": 12,
    ""AS48721"": 24,
    ""AS150830"": 8,
    ""AS398324"": 2,
    ""AS63473"": 2,
    ""AS51852"": 2,
    ""AS18403"": 4,
    ""AS198953"": 6,
    ""AS197071"": 4,
    ""AS9808"": 2,
    ""AS3462"": 48,
    ""AS4134"": 2,
    ""AS36352"": 4
  },
  ""isp"": {
    ""Telecom Group"": 4972,
    ""OVH SAS"": 426,
    ""Hathway IP over Cable Internet Access"": 462,
    ""Hangzhou Alibaba Advertising Co"": 172,
    ""PJSC Rostelecom"": 236,
    ""Google LLC"": 24,
    ""CLOUDWEBMANAGE"": 28,
    ""Dmitriy Panchenko"": 6,
    ""Censys, Inc."": 4,
    ""Xhost Internet Solutions LP"": 12,
    ""Akamai Technologies, Inc."": 14,
    ""Akamai Technologies"": 8,
    ""Addresses CNNIC"": 10,
    ""Hosting Services"": 2,
    ""UAB Host Baltic"": 4,
    ""DigitalOcean, LLC"": 22,
    ""Chang Way Technologies Co. Limited"": 16,
    ""TOANTHANGSTECH"": 2,
    ""TOV E-RISHENNYA"": 12,
    ""Flyservers S.A."": 24,
    ""Hangzhou Alibaba Advertising Co., Ltd."": 2,
    ""Chieu Minh Company Limited"": 8,
    ""HostHatch"": 2,
    ""Private Layer INC"": 2,
    ""FPT Telecom Company"": 4,
    ""Proton66 OOO"": 6,
    ""active 1 GmbH"": 4,
    ""China Mobile"": 2,
    ""Chunghwa Telecom Co., Ltd."": 48,
    ""Xhost Internet Solutions"": 2,
    ""Chinanet"": 2,
    ""ColoCrossing"": 4
  },
  ""org"": {
    ""TelecomGroup"": 4972,
    ""OVH Ltd"": 426,
    ""Hathway Cable and Datacom Limited"": 462,
    ""Aliyun Computing Co., LTD"": 182,
    ""PJSC Rostelecom"": 236,
    ""Palo Alto Networks, Inc"": 18,
    ""Unknown"": 32,
    ""Xhostis"": 6,
    ""Censys, Inc."": 2,
    ""Xhost Internet Solutions"": 10,
    ""Linode, LLC"": 8,
    ""Linode"": 14,
    ""Dmitriy Panchenko"": 2,
    ""Ipxo"": 2,
    ""DigitalOcean, LLC"": 20,
    ""Chang Way Technologies Co. Limited"": 16,
    ""Toan Thang Service Technology Investment Joint Stock Company"": 2,
    ""TOV VAIZ PARTNER"": 12,
    ""Flyservers S.A"": 24,
    ""Alibaba.com LLC"": 2,
    ""Chieu Minh Company Limited"": 8,
    ""Digitalocean"": 2,
    ""Censys Inc"": 2,
    ""HostHatch LLC"": 2,
    ""Private Layer Inc"": 2,
    ""Vietnam Internet Network Information Center"": 4,
    ""Google Cloud (us-west2)"": 6,
    ""Proton66 LLC"": 6,
    ""Nerdscave"": 4,
    ""China Mobile Communications Corporation"": 2,
    ""Chunghwa Telecom Co. Ltd."": 48,
    ""XHOSTIS"": 2,
    ""Chinanet HE"": 2,
    ""ColoCrossing"": 4
  },
  ""regionName"": {
    ""Blagoevgrad"": 4972,
    ""England"": 436,
    ""Maharashtra"": 470,
    ""Guangdong"": 154,
    ""St.-Petersburg"": 236,
    ""California"": 30,
    ""Central and Western District"": 28,
    ""Moscow"": 28,
    ""Michigan"": 4,
    ""North West"": 8,
    ""Beijing"": 20,
    ""Perm Krai"": 2,
    ""Shandong"": 10,
    ""New Jersey"": 2,
    ""Kaunas"": 28,
    ""South West"": 8,
    ""Hanoi"": 6,
    ""Kyiv City"": 12,
    ""Shanghai"": 2,
    ""Ho Chi Minh"": 8,
    ""New York"": 2,
    ""Zurich"": 2,
    ""Hesse"": 4,
    ""North Holland"": 14,
    ""Taipei City"": 48,
    ""Drenthe"": 2,
    ""Hebei"": 2,
    ""Illinois"": 4
  },
  ""country"": {
    ""Bulgaria"": 4972,
    ""United Kingdom"": 436,
    ""India"": 470,
    ""China"": 188,
    ""Russia"": 266,
    ""United States"": 42,
    ""Hong Kong"": 28,
    ""Singapore"": 16,
    ""Lithuania"": 28,
    ""Vietnam"": 14,
    ""Ukraine"": 12,
    ""Switzerland"": 2,
    ""Germany"": 4,
    ""Netherlands"": 16,
    ""Taiwan"": 48
  },
  ""account"": {
    ""hello"": 6432,
    ""RbuegdBTv"": 2,
    ""pPSgsX"": 2,
    ""KGTYLO"": 2,
    ""Domain"": 50,
    ""(empty)"": 10,
    ""Administr"": 32,
    ""nFLPpVkqA"": 2,
    ""iDziXs"": 2,
    ""YbKKoz"": 2,
    ""QSeCYZuNo"": 2,
    ""FBoUUt"": 2,
    ""LbqkyZ"": 2
  },
  ""keyboard"": {
    ""Unknown"": 6542
  },
  ""client_build"": {
    ""Unknown"": 6542
  },
  ""client_name"": {
    ""Unknown"": 6542
  },
  ""ip_type"": {
    ""Unknown"": 5848,
    ""hosting"": 674,
    ""hosting & proxy"": 18,
    ""mobile"": 2
  }
}"
y7yqWxnu,2023-08-06_stats.json,rdp_snitch,JSON,Sunday 6th of August 2023 07:15:09 PM CDT,"{
  ""ip"": {
    ""85.14.32.53"": 2486,
    ""51.77.104.164"": 213,
    ""116.73.21.72"": 231,
    ""39.108.174.140"": 75,
    ""195.19.96.41"": 118,
    ""205.210.31.225"": 3,
    ""103.252.119.150"": 14,
    ""185.170.144.113"": 2,
    ""167.248.133.52"": 1,
    ""87.251.75.145"": 2,
    ""192.53.116.234"": 4,
    ""60.205.170.161"": 8,
    ""45.79.108.4"": 3,
    ""94.232.43.50"": 1,
    ""172.105.252.86"": 4,
    ""120.27.12.65"": 5,
    ""191.101.174.148"": 1,
    ""141.98.11.128"": 2,
    ""128.199.102.172"": 2,
    ""62.122.184.166"": 4,
    ""62.122.184.168"": 4,
    ""87.251.75.120"": 2,
    ""39.98.33.148"": 2,
    ""103.162.24.176"": 1,
    ""45.143.201.62"": 6,
    ""194.165.16.111"": 12,
    ""120.78.85.220"": 1,
    ""47.117.165.149"": 1,
    ""103.116.52.3"": 4,
    ""188.166.185.130"": 1,
    ""162.142.125.223"": 1,
    ""134.195.90.117"": 1,
    ""179.43.183.90"": 1,
    ""118.70.128.211"": 2,
    ""205.210.31.67"": 3,
    ""87.251.75.64"": 1,
    ""34.102.23.131"": 3,
    ""45.140.17.16"": 3,
    ""185.170.144.3"": 1,
    ""193.25.201.126"": 2,
    ""165.232.86.161"": 7,
    ""112.5.87.34"": 1,
    ""167.172.76.60"": 1,
    ""60.250.29.35"": 24,
    ""80.66.88.15"": 1,
    ""198.235.24.102"": 3,
    ""106.116.169.71"": 1,
    ""198.23.233.3"": 2
  },
  ""asn"": {
    ""AS34376"": 2486,
    ""AS16276"": 213,
    ""AS17488"": 231,
    ""AS37963"": 92,
    ""AS12389"": 118,
    ""AS396982"": 12,
    ""AS64022"": 14,
    ""AS48080"": 3,
    ""AS398722"": 1,
    ""AS208091"": 7,
    ""AS63949"": 11,
    ""AS32780"": 1,
    ""AS209605"": 2,
    ""AS14061"": 11,
    ""AS57523"": 8,
    ""AS135918"": 1,
    ""AS210950"": 6,
    ""AS48721"": 12,
    ""AS150830"": 4,
    ""AS398324"": 1,
    ""AS63473"": 1,
    ""AS51852"": 1,
    ""AS18403"": 2,
    ""AS198953"": 3,
    ""AS197071"": 2,
    ""AS9808"": 1,
    ""AS3462"": 24,
    ""AS4134"": 1,
    ""AS36352"": 2
  },
  ""isp"": {
    ""Telecom Group"": 2486,
    ""OVH SAS"": 213,
    ""Hathway IP over Cable Internet Access"": 231,
    ""Hangzhou Alibaba Advertising Co"": 86,
    ""PJSC Rostelecom"": 118,
    ""Google LLC"": 12,
    ""CLOUDWEBMANAGE"": 14,
    ""Dmitriy Panchenko"": 3,
    ""Censys, Inc."": 2,
    ""Xhost Internet Solutions LP"": 6,
    ""Akamai Technologies, Inc."": 7,
    ""Akamai Technologies"": 4,
    ""Addresses CNNIC"": 5,
    ""Hosting Services"": 1,
    ""UAB Host Baltic"": 2,
    ""DigitalOcean, LLC"": 11,
    ""Chang Way Technologies Co. Limited"": 8,
    ""TOANTHANGSTECH"": 1,
    ""TOV E-RISHENNYA"": 6,
    ""Flyservers S.A."": 12,
    ""Hangzhou Alibaba Advertising Co., Ltd."": 1,
    ""Chieu Minh Company Limited"": 4,
    ""HostHatch"": 1,
    ""Private Layer INC"": 1,
    ""FPT Telecom Company"": 2,
    ""Proton66 OOO"": 3,
    ""active 1 GmbH"": 2,
    ""China Mobile"": 1,
    ""Chunghwa Telecom Co., Ltd."": 24,
    ""Xhost Internet Solutions"": 1,
    ""Chinanet"": 1,
    ""ColoCrossing"": 2
  },
  ""org"": {
    ""TelecomGroup"": 2486,
    ""OVH Ltd"": 213,
    ""Hathway Cable and Datacom Limited"": 231,
    ""Aliyun Computing Co., LTD"": 91,
    ""PJSC Rostelecom"": 118,
    ""Palo Alto Networks, Inc"": 9,
    ""Unknown"": 16,
    ""Xhostis"": 3,
    ""Censys, Inc."": 1,
    ""Xhost Internet Solutions"": 5,
    ""Linode, LLC"": 4,
    ""Linode"": 7,
    ""Dmitriy Panchenko"": 1,
    ""Ipxo"": 1,
    ""DigitalOcean, LLC"": 10,
    ""Chang Way Technologies Co. Limited"": 8,
    ""Toan Thang Service Technology Investment Joint Stock Company"": 1,
    ""TOV VAIZ PARTNER"": 6,
    ""Flyservers S.A"": 12,
    ""Alibaba.com LLC"": 1,
    ""Chieu Minh Company Limited"": 4,
    ""Digitalocean"": 1,
    ""Censys Inc"": 1,
    ""HostHatch LLC"": 1,
    ""Private Layer Inc"": 1,
    ""Vietnam Internet Network Information Center"": 2,
    ""Google Cloud (us-west2)"": 3,
    ""Proton66 LLC"": 3,
    ""Nerdscave"": 2,
    ""China Mobile Communications Corporation"": 1,
    ""Chunghwa Telecom Co. Ltd."": 24,
    ""XHOSTIS"": 1,
    ""Chinanet HE"": 1,
    ""ColoCrossing"": 2
  },
  ""regionName"": {
    ""Blagoevgrad"": 2486,
    ""England"": 218,
    ""Maharashtra"": 235,
    ""Guangdong"": 77,
    ""St.-Petersburg"": 118,
    ""California"": 15,
    ""Central and Western District"": 14,
    ""Moscow"": 14,
    ""Michigan"": 2,
    ""North West"": 4,
    ""Beijing"": 10,
    ""Perm Krai"": 1,
    ""Shandong"": 5,
    ""New Jersey"": 1,
    ""Kaunas"": 14,
    ""South West"": 4,
    ""Hanoi"": 3,
    ""Kyiv City"": 6,
    ""Shanghai"": 1,
    ""Ho Chi Minh"": 4,
    ""New York"": 1,
    ""Zurich"": 1,
    ""Hesse"": 2,
    ""North Holland"": 7,
    ""Taipei City"": 24,
    ""Drenthe"": 1,
    ""Hebei"": 1,
    ""Illinois"": 2
  },
  ""country"": {
    ""Bulgaria"": 2486,
    ""United Kingdom"": 218,
    ""India"": 235,
    ""China"": 94,
    ""Russia"": 133,
    ""United States"": 21,
    ""Hong Kong"": 14,
    ""Singapore"": 8,
    ""Lithuania"": 14,
    ""Vietnam"": 7,
    ""Ukraine"": 6,
    ""Switzerland"": 1,
    ""Germany"": 2,
    ""Netherlands"": 8,
    ""Taiwan"": 24
  },
  ""account"": {
    ""hello"": 3216,
    ""RbuegdBTv"": 1,
    ""pPSgsX"": 1,
    ""KGTYLO"": 1,
    ""Domain"": 25,
    ""(empty)"": 5,
    ""Administr"": 16,
    ""nFLPpVkqA"": 1,
    ""iDziXs"": 1,
    ""YbKKoz"": 1,
    ""QSeCYZuNo"": 1,
    ""FBoUUt"": 1,
    ""LbqkyZ"": 1
  },
  ""keyboard"": {
    ""Unknown"": 3271
  },
  ""client_build"": {
    ""Unknown"": 3271
  },
  ""client_name"": {
    ""Unknown"": 3271
  },
  ""ip_type"": {
    ""Unknown"": 2924,
    ""hosting"": 337,
    ""hosting & proxy"": 9,
    ""mobile"": 1
  }
}"
rqntd2u2,debut d'un big scroller classique,glokyfull,Motorola 68000 HiSoft Dev,Sunday 6th of August 2023 06:51:54 PM CDT,"
;
;
;
;

	BSS
indexbande	ds.w 1
bande1	ds.w 320*4*64
bande2	ds.w 4*320*64		; 64 ligne * 2 *160 * 4 plan
bande3	ds.w 4*320*64
bande4	ds.w 4*320*64

buffercar	ds.w 4*2*64
adressecar	ds.l 1
countadress ds.w 1

; lorsque plusieurs labels sont entre deux ';' il ne faut pas changer l'ordre
;
adressetexte	ds.l 1
debuttexte	ds.l 1
;


conchartoadr
	ds.l 256

	DATA
abecedaire ; chaine caractere fini par zero
texte1
		dc.b 'bonjour il fait beau aujourd''hui et je suis fatigue',0
		even


	TEXT
initscroll1
	lea debuttexte,a0
	lea -4(a0),a1
	move.l #texte1,d0
	move.l d0,(a0) adresse debut
	move.l d0,(a1) adresse courant
	move.w #4,countadress
	rts
readcar
	tst.w countadress
	beq.s .1
    move.l adressecar,a2
    bra.s .3
.1
	lea adressetexte,a0
	move.l (a0),a3
	move.b (a3)+,d0
	bne.s .2
	move.l debuttexte,a3
	move.b (a3)+,d0
.2
	move.l a3,(a0)
	add d0,d0
	add d0,d0
	lea convchartoadr,a1
	move.l (a1,d0),d1		; d1 = adresse caractere de la fonte
	move.l d1,a2

	; organisation des fontes:
	;  4 plan = 16 pixel
	;  4 plan = 16 pixel en bas
	; etc
	; par colonne de 16 pixel en fait
	;
.3
	lea buffercar,a3	

	rept 16
	movem.l (a2)+,d0-d7		; 2 word + 2 word * 4 ligne
	lea 8(a3),a3
	move.l d0,(a3)+
	move.l d1,(a3)+
	lea 8(a3),a3
	move.l d2,(a3)+
	move.l d3,(a3)+
	lea 8(a3),a3
	move.l d4,(a3)+
	move.l d5,(a3)+
	lea 8(a3),a3
	move.l d6,(a3)+
	move.l d7,(a3)+				; copier 4 ligne
	endr						; * 16 = 64 lignes

	move.l a2,adressecar
	subq.w #1,countadresse
	move.w #4,indexscroll		; indexscroll fait 4 decalge a gauche du buffer car


	lea buffercar,a3
	move.l a3,a4
	move.w #63,d7
.loop
	movem.w (a3)+,d0-d3
	swap d0
	swap d1
	swap d2
	swap d3

	move.w (a3)+,d0
	move.w (a3)+,d1
	move.w (a3)+,d2
	move.w (a3)+,d3

	lsl.l #4,d0
	lsl.l #4,d1
	lsl.l #4,d2
	lsl.l #4,d3

	movem.w d0-d3,8(a4)
	swap d0
	swap d1
	swap d2
	swap d3
	movem.w d0-d3,(a4)
	lea 16(a4),a4
	dbf d7,.loop

	move.l whatbande,a0		; a0 = bande 1 bande 2 bande 3 bande 4
	move indexbande,d0
	add.w d0,a0
	lea 160(a0),a1

	lea buffercar,a3
	move.w #63,d7
.loop2


	move.l (a3)+,d0
	move.l d0,(a0)+
	move.l d0,(a1)+
	move.l (a3)+,d0
	move.l d0,(a0)+
	move.l d0,(a1)+
	addq.l #8,a3
	lea 320*8-8(a0),a0
	lea 320*8-8(a1),a1

	dbf d7,loop2

	lea indexbande,a4
	move.w (a4),d0   	 ; indexbande = 0
	addq.w #8,d0 		; on ajoute une colonne
	cmp.w #160,d0       ; on a fait une bande complete ?
	bne.s .11		; non
	moveq #0,d0
.11 move.w d0,(a4)

"
sLcesHcd,# tk_list_nearest_images.py,here2share,Python,Sunday 6th of August 2023 06:42:43 PM CDT,"# tk_list_nearest_images2.py

# work in progress, this is not yet a similarity search whereas it is of ordering by just color brightness...

import itertools
import math
import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk, ImageOps, ImageDraw
import os
import threading
import shutil

def select_target_image():
	filename = filedialog.askopenfilename(title=""Select Target Image"", filetypes=((""Image files"", ""*.jpg *.jpeg *.png""),))

	if filename:
		target.filename = filename
		foldername, target.name = filename.rsplit(""/"", 1)
		source.foldername = foldername
		img = get_img(filename)		   
		target.data = get_img_data(img)
		target.img = resize_image(img)
		update_canvas(target)

def update_canvas(active):
	target_img_canvas.delete(""all"")

	if active.img:
		tk_img = ImageTk.PhotoImage(active.img)
		target_img_canvas.create_image(2, 2, anchor=tk.NW, image=tk_img)
		target_img_canvas.image = tk_img
	target_img_canvas.update()

def get_img(file_path):
	img = Image.open(file_path)
	if img.mode == ""RGBA"":
		img = img.convert(""RGB"")
	return img

def get_img_data(img, resize=24):
	old_size = img.size
	ratio = float(resize)/max(old_size)
	new_size = tuple([int(x*ratio) for x in old_size])
	resized_img = img.resize(new_size, Image.ANTIALIAS)
	delta_w = resize - new_size[0]
	delta_h = resize - new_size[1]
	padding = (delta_w//2, delta_h//2, delta_w-(delta_w//2), delta_h-(delta_h//2))
	resized_img = ImageOps.expand(resized_img, padding, fill='white')
	rgb_data = list(resized_img.getdata())
	return rgb_data

def resize_image(img, target_width=640, target_height=640):
	width, height = img.size
	aspect_ratio = width / height

	if aspect_ratio > target_width / target_height:
		new_width = target_width
		new_height = int(target_width / aspect_ratio)
	else:
		new_width = int(target_height * aspect_ratio)
		new_height = target_height

	resized_image = img.resize((new_width, new_height))

	return resized_image

def select_source_folder():
	foldername = filedialog.askdirectory(title=""Select Source Folder"")

	if foldername:
		source.foldername = foldername

def move_selected_files():
	foldername = filedialog.askdirectory(title=""Move To Folder"")
	if foldername:
		for item in selected_items:
			filename = item[""text""]
			shutil.move(filename, foldername)
		# Clear selection after moving files
		selected_items.clear()

def calculate_progress(val, total):
	val = 1 + val*1.05
	if val >= total:
		return f""100%""
	else:
		progress = (val / total) * 100
		return f""{progress:.2f}%""

def on_item_selected(event):
	selected_items = search_results_listbox.curselection()

	if selected_items:
		filename = search_results_listbox.get(selected_items[0]).split(None, 1)[-1]
		img = paths[filename]
		
		update_canvas(img)

def on_item_enter(event):
	try:
		source = paths[event.widget.get(event.widget.curselection()[0]).split(None, 1)[-1]]
		update_canvas(source)
	except:
		0

def on_item_leave(event):
	try:
		update_canvas(target)
	except:
		0

def calculate_distance(img1, img2):
	distance = 0
	for i in range(len(img1)):
		for j in (0, 1, 2):
			distance += abs(img1[i][j] - img2[i][j])
	return distance

def search():
	
	if not (target.filename and source.foldername):
		return

	search_results_listbox.delete(0, tk.END)
	
	search_progress_label = tk.Label(text="""", width=10, bg=""yellow"", font=('Arial', 50))
	search_progress_label.place(x=850, y=50)

	distances = {}

	for root, dirs, files in os.walk(source.foldername):
		break
	L = len(files)
	for idx, file in enumerate(files):
		if file.lower().endswith(('.jpg', '.jpeg', '.png')) and target.name != file:
			filename = os.path.join(root, file)

			paths[file] = CV()
			img = resize_image(get_img(filename))
			paths[file].img = img
			paths[file].path = filename
			data = get_img_data(img)
			
			distance = calculate_distance(target.data, data)
			distances[file] = distance

			progress_text = calculate_progress(idx, L)
			search_progress_label.config(text=progress_text)

	search_progress_label.destroy()

	sorted_distances = sorted(distances.items(), key=lambda x: x[1])
	
	for filename, distance in sorted_distances[:2000]:
	
		percentage = max(0.0, 100 - ((distance / 1000000) * 100))

		line = f'{percentage:.8f}% {filename}'
		search_results_listbox.insert(tk.END, line)

root = tk.Tk()
root.title(""TK List Nearest Images"")
root.geometry(f""{root.winfo_screenwidth()+2}x{root.winfo_screenheight()}+-10+0"")

class CV(): pass

target = CV()
source = CV()
target.filename = None
source.foldername = None
paths = {}
selected_items = set()
show_images = False
halfwidth = root.winfo_screenwidth()//2
images = []

name = ""SIMILARITY IMAGE SEARCH""
yyy = 30
for t in name.split():
	title_label = tk.Label(root, text=t, font=('Arial', 20, 'bold'))
	title_label.place(x=10, y=yyy)
	yyy += 35

select_target_btn = tk.Button(root, text=""Select Target Image"", bg='yellow', width=24, command=lambda: select_target_image())
select_target_btn.place(x=10, y=215)

select_source_btn = tk.Button(root, text=""Select Source Folder"", bg='yellow', width=24, command=lambda: select_source_folder())
select_source_btn.place(x=10, y=260)

search_btn = tk.Button(root, text=""SEARCH"", fg=""white"", bg=""green"", font=('Arial', 14, ""bold""), 
		width=14, command=lambda: threading.Thread(target=search, args=()).start())
search_btn.place(x=10, y=350)

move_to_folder_btn = tk.Button(root, text=""Move To Folder"", bg='yellow', width=24, command=move_selected_files)
move_to_folder_btn.place(x=10, y=540)

target_img_frame = tk.Frame(root)
target_img_frame.place(x=190)

target_img_canvas = tk.Canvas(target_img_frame, width=640, height=640, bg='skyblue')
target_img_canvas.pack(side=tk.LEFT)

search_results_scrollbar = tk.Scrollbar(target_img_frame, orient=tk.VERTICAL)
search_results_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

search_results_scrollbar2 = tk.Scrollbar(target_img_frame, orient=tk.HORIZONTAL)
search_results_scrollbar2.pack(side=tk.BOTTOM, fill=tk.X)

search_results_listbox = tk.Listbox(target_img_frame, width=60, height=30, selectmode=""extended"", 
		yscrollcommand=search_results_scrollbar.set, xscrollcommand=search_results_scrollbar2.set, font=('Arial', 10))
		
search_results_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(5, 0))

search_results_scrollbar.config(command=search_results_listbox.yview)
search_results_scrollbar2.config(command=search_results_listbox.xview)

search_results_listbox.bind(""<<ListboxSelect>>"", on_item_selected)
search_results_listbox.bind(""<Enter>"", on_item_enter)
search_results_listbox.bind(""<Leave>"", on_item_leave)

root.mainloop()"
AATVbqSB,Error,amurlynx,Python,Sunday 6th of August 2023 05:41:42 PM CDT,"C:\Users\Trot\PycharmProjects\edu_bot\venv\Scripts\python.exe C:/Users/Trot/PycharmProjects/edu_bot/bot.py
bot.py:41 #INFO     [2023-08-06 20:50:30,981] - __main__ - Starting bot
Traceback (most recent call last):
  File ""C:/Users/Trot/PycharmProjects/edu_bot/bot.py"", line 66, in <module>
    asyncio.run(main())
  File ""C:\Users\Trot\AppData\Local\Programs\Python\Python38\lib\asyncio\runners.py"", line 44, in run
    return loop.run_until_complete(main)
  File ""C:\Users\Trot\AppData\Local\Programs\Python\Python38\lib\asyncio\base_events.py"", line 616, in run_until_complete
    return future.result()
  File ""C:/Users/Trot/PycharmProjects/edu_bot/bot.py"", line 51, in main
    register_all_middlewares(dp, config)
  File ""C:/Users/Trot/PycharmProjects/edu_bot/bot.py"", line 22, in register_all_middlewares
    dp.setup_middleware(DbMiddleware)
  File ""C:\Users\Trot\PycharmProjects\edu_bot\venv\lib\site-packages\aiogram\dispatcher\dispatcher.py"", line 1507, in setup_middleware
    self.middleware.setup(middleware)
  File ""C:\Users\Trot\PycharmProjects\edu_bot\venv\lib\site-packages\aiogram\dispatcher\middlewares.py"", line 35, in setup
    raise TypeError(f""`middleware` must be an instance of BaseMiddleware, not {type(middleware)}"")
TypeError: `middleware` must be an instance of BaseMiddleware, not <class 'type'>
Exception ignored in: <function _ProactorBasePipeTransport.__del__ at 0x0000015D114D68B0>
Traceback (most recent call last):
  File ""C:\Users\Trot\AppData\Local\Programs\Python\Python38\lib\asyncio\proactor_events.py"", line 116, in __del__
  File ""C:\Users\Trot\AppData\Local\Programs\Python\Python38\lib\asyncio\proactor_events.py"", line 108, in close
  File ""C:\Users\Trot\AppData\Local\Programs\Python\Python38\lib\asyncio\base_events.py"", line 719, in call_soon
  File ""C:\Users\Trot\AppData\Local\Programs\Python\Python38\lib\asyncio\base_events.py"", line 508, in _check_closed
RuntimeError: Event loop is closed

Process finished with exit code 1
"
Mt71Cuhs,Wither Placer,Gamogamer,Lua,Sunday 6th of August 2023 05:31:36 PM CDT,"while true do
  if turtle.getItemCount(1) < 5 or turtle.getItemCount(2) < 4 or turtle.getItemCount(3) < 4 then
    sleep(10)
  else
    turtle.forward()
    turtle.turnRight()	
    turtle.forward()
    turtle.forward()
    turtle.turnRight()	
    turtle.forward()
    turtle.forward()
    turtle.forward()
    turtle.forward()
    turtle.forward()
    turtle.select(1)
    turtle.place()
    turtle.up()	
    turtle.forward()
    turtle.turnRight()	
    turtle.place()
    turtle.turnRight()
    turtle.turnRight()
    turtle.place()
    turtle.up()	
    turtle.placeDown()	
    turtle.select(2)
    turtle.place()
    turtle.turnRight()
    turtle.turnRight()
    turtle.place()
    turtle.turnLeft()
    turtle.back()
    turtle.place()
    turtle.down()	
    turtle.down()	
    turtle.back()
    turtle.back()
    turtle.back()
    turtle.back()
    turtle.back()
    turtle.turnLeft()	
    turtle.back()
    turtle.back()
    turtle.turnLeft()	
    turtle.back()
    turtle.select(3)
    turtle.refuel(1)
  end
  sleep(50)
end"
6VjjbxRq,643ea1adef815316e5389d17,mason1920,C,Sunday 6th of August 2023 05:29:56 PM CDT,"#include <stdbool.h>

typedef struct Cartesian_Coordinates {
  int x, y;
} coord;

bool same_side(int a, int b) {
  return a > 0 && b > 0 || a < 0 && b < 0;
}

bool quadrant_segment(const coord A, const coord B) {
  return !(same_side(A.x, B.x) && same_side(A.y, B.y));
}"
yHK2xxMh,onelayerawaytop,rungholt,Lua,Sunday 6th of August 2023 05:14:26 PM CDT,"local function checkFuel()
    while turtle.getFuelLevel() <= 200 do
        turtle.select(16)
        turtle.refuel(16)
        turtle.select(1)
    end
end

while turtle.detectUp() == false do
    checkFuel()
    turtle.up()
end

while turtle.detectUp() == true do
    checkFuel()
    turtle.digUp()
    turtle.forward()
end

while turtle.detectDown() == false do
    checkFuel()
    turtle.down()
end"
cpAku7TS,[F2U TH CODE] FISH OS,4ngelbugz,HTML,Sunday 6th of August 2023 04:54:54 PM CDT,"<!--
      FISH OS
      free html character profile by juette
      
      RULES:
      1) dont remove the credit or edit the link so people can find this easily
      2) feel free to edit or mix it with other codes as long as the other codes' makers are ok with it and you dont redistribute it
      3) please comment on the forum post if you use! i wanna see the results! https://toyhou.se/~forums/16.htmlcss-graphics/153697
      
      
-->

<div class=""col-12 p-0 py-4 m-0"" style=""background-image: url('https://f2.toyhou.se/file/f2-toyhou-se/images/69071971_pwkjBLy21BmCX9w.jpg'); background-size: cover; background-position: center;"">
  <div class=""container-fluid p-2 p-lg-4 my-4"" style=""max-width: 1200px; min-height: 650px; background-color: rgba(0, 0, 0, 0.85); border-top: 5px solid #38f4eb; color:#fff"">
    <h2 class=""display-3"" style=""color: #38f4eb;""><b>NAME</b></h2>
    <div class=""row"">
      <div class=""col-12 col-lg-3 mt-2"">
        <b class=""text-uppercase mr-2"">E-MAIL</b>
        <hr style=""border-color:#333"">
        
        <p class=""text-uppercase""><i class=""fa-regular fa-cake-candles""></i> ???</p>
        <p class=""text-uppercase""><i class=""fa-solid fa-transgender""></i> Demigirl</p>
        <p class=""text-uppercase""><i class=""fa-solid fa-child-reaching""></i> fish/human</p>
        <p class=""text-uppercase""><i class=""fa-regular fa-ruler-vertical""></i> 6'1""</p>
        
        <img src=""IMG URL HERE"">
        
      </div>
      <div class=""col-12 col-lg-5 mt-2"">
        <b class=""text-uppercase mr-2"">INBOX</b>
        
        <hr style=""border-color:#333"">
        
        <p>A basic character profile based on FishOS, the campaign menu of the game Aquarium Designer. The box will extend the more you write, it will <i>not</i> scroll.</p>
        
        <p>
          Write here.
        </p>
      </div>
      <div class=""col-12 col-lg-4 mt-2"">
        <b class=""text-uppercase mr-2"">PICTURES</b>
        <hr style=""border-color:#333"">
        
        <div class=""row"">
          <div class=""row no-gutters"">
              <div class=""col-6 p-1"">
                <!-- image 1 -->
                <img src=""https://pbs.twimg.com/media/Ew9wEUGXMAMPkAs?format=jpg&name=900x900"" />
                <!-- image 1 -->
              </div>
              <div class=""col-6 p-1"">
                <!-- image 2 -->
                <img src=""https://pbs.twimg.com/media/Ew9wEUGXMAMPkAs?format=jpg&name=900x900"" />
                <!-- image 2 -->
              </div>
              <div class=""col-6 p-1"">
                <!-- image 3 -->
                <img src=""https://pbs.twimg.com/media/Ew9wEUGXMAMPkAs?format=jpg&name=900x900"" />
                <!-- image 3 -->
              </div>
              <div class=""col-6 p-1"">
                <!-- image 4 -->
                <img src=""https://pbs.twimg.com/media/Ew9wEUGXMAMPkAs?format=jpg&name=900x900"" />
                <!-- image 4 -->
              </div>
              <div class=""col-6 p-1"">
                <!-- image 5 -->
                <img src=""https://pbs.twimg.com/media/Ew9wEUGXMAMPkAs?format=jpg&name=900x900"" />
                <!-- image 5 -->
              </div>
              <div class=""col-6 p-1"">
                <!-- image 6 -->
                <img src=""https://pbs.twimg.com/media/Ew9wEUGXMAMPkAs?format=jpg&name=900x900"" />
                <!-- image 6 -->
              </div>
            </div>
        </div>
         
      </div>
    </div>
  </div>
</div>
<p class=""text-right small mr-2 mt-2""><a href=""https://toyhou.se/22837478.f2u-11-fishos"">HTML by juette</a></p>
"
Y0L3q4TB,VCTORfORCE,eea,Lua,Sunday 6th of August 2023 04:07:13 PM CDT,"local char = owner.Character
local hrp = char.HumanoidRootPart
local a = Instance.new(""Attachment"", hrp)
local v = Instance.new(""VectorForce"", hrp)
v.Attachment0 = a
v.ApplyAtCenterOfMass = true
v.RelativeTo = ""World""

while task.wait() do
    v.Force = char.Head.CFrame.LookVector*3500
end"
EqMGyADR,licencja,Maksik23,JSON,Sunday 6th of August 2023 03:58:45 PM CDT,"{
  ""1137845024650969210"": {
      ""licencja"": ""test"",
      ""ownerID"": ""836970677721497600"",
      ""nazwa"": ""[BOT] MaksiK023""
  }
}"
ZLmKXCGF,Untitled,GuHRM,CSS,Sunday 6th of August 2023 03:44:01 PM CDT,".alertbar{
	display:none;
}"
hjBBWLE8,Untitled,Skos_Martren,C++,Sunday 6th of August 2023 03:38:11 PM CDT,"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */


class Solution {
 public:

  ListNode* reverseList(ListNode* head) {

    ListNode* ans = nullptr;

    while (head != nullptr) {

      ListNode* node = head;
      cout << node->val << ' ';
      //head = head->next; // good!

      node->next = ans;

      //head = head->next; // error 1!
      
      ans = node;

      head = head->next; // error 1!
    }

    return ans;
  }
};"
SRwPPcjy,Untitled,Skos_Martren,C++,Sunday 6th of August 2023 03:38:09 PM CDT,"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */


class Solution {
 public:

  ListNode* reverseList(ListNode* head) {

    ListNode* ans = nullptr;

    while (head != nullptr) {

      ListNode* node = head;

      //head = head->next; // good!

      node->next = ans;

      head = head->next; // error 1!
      
      ans = node;

      //head = head->next; // error 1!
    }

    return ans;
  }
};"
4YtbknPC,Untitled,Skos_Martren,C++,Sunday 6th of August 2023 03:38:07 PM CDT,"/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */


class Solution {
 public:

  ListNode* reverseList(ListNode* head) {

    ListNode* ans = nullptr;

    while (head != nullptr) {

      ListNode* node = head;

      head = head->next; // good!

      node->next = ans;

      //head = head->next; // error 1!
      
      ans = node;

      //head = head->next; // error 1!
    }

    return ans;
  }
};"
2ZJ8A6q8,tbuildup,rungholt,Lua,Sunday 6th of August 2023 03:35:10 PM CDT,"local args = { ... }
local x = tonumber(args[1])

local function placeX()
    turtle.place()
    for i = 1, x - 1 do
        turtle.up()
        turtle.select(1)
        turtle.place()
    end
end

local function goDown()
    for j = 1, x - 1 do
        turtle.down()
    end
end

local function start()
    placeX()
    goDown()
end

start()"
3JG437Hu,Simple NCR,nayan_deep,C++,Sunday 6th of August 2023 03:22:46 PM CDT,"const ll M = 1000000007;
const ll N = 400000;
const ll INF = 1000000000000000000;
 
ll factorialNumInverse[N + 1];
ll naturalNumInverse[N + 1];
ll fact[N + 1];
void InverseofNumber(ll p)
{
    naturalNumInverse[0] = naturalNumInverse[1] = 1;
    for (int i = 2; i <= N; i++)
        naturalNumInverse[i] = naturalNumInverse[p % i] * (p - p / i) % p;
}
void InverseofFactorial(ll p)
{
    factorialNumInverse[0] = factorialNumInverse[1] = 1;
    for (int i = 2; i <= N; i++)
        factorialNumInverse[i] = (naturalNumInverse[i] * factorialNumInverse[i - 1]) % p;
}
void factorial(ll p)
{
    fact[0] = 1;
    for (int i = 1; i <= N; i++) {
        fact[i] = (fact[i - 1] * i) % p;
    }
}
ll Binomial(ll N, ll R, ll p)
{
    if(N < R) return 0; 
    ll ans = ((fact[N] * factorialNumInverse[R])
              % p * factorialNumInverse[N - R])
             % p;
    return ans;
}
void start()
{
    InverseofNumber(M);
    InverseofFactorial(M);
    factorial(M);
} "
cMykFrrX,LM-Stardew Valley Trash,parracodea,JSON,Sunday 6th of August 2023 03:14:08 PM CDT,"[
    `Acorn`,
    `Amethyst`,
    `Bread`,
    `Bream`,
    `Broken CD`,
    `Broken Glasses`,
    `Cave Carrot`,
    `Earth Crystal`,
    `Field Snack`,
    `Garbage Hat`,
    `Green Algae`,
    `Joja Cola`,
    `Largemouth Bass`,
    `Maple Seed`,
    `Pine Cone`,
    `Quartz`,
    `Red Mushroom`,
    `Seaweed`,
    `Soggy Newspaper`,
    `Topaz`,
    `Trash`,

    `Geode`,
    `Omni Geode`,

    `Coal`,
    `Copper Ore`,
    `Iron Ore`,

    `Joja Cola`,
    `Corn`,
    `Movie Ticket`,

    `Cookie`,

    `Autumn's Bounty`,
    `Baked Fish`,
    `Bean Hotpot`,
    `Blueberry Tart`,
    `Carp Surprise`,
    `Cheese Cauliflower`,
    `Chocolate Cake`,
    `Complete Breakfast`,
    `Cookie`,
    `Cranberry Sauce`,
    `Crispy Bass`,
    `Eggplant Parmesan`,
    `Fish Taco`,
    `Fried Calamari`,
    `Fried Eel`,
    `Fried Egg`,
    `Fried Mushroom`,
    `Glazed Yam`,
    `Hashbrown`,
    `Ice Cream`,
    `Lucky Lunch`,
    `Maki Roll`,
    `Omelet`,
    `Pancake`,
    `Parsnip Soup`,
    `Pepper Popper`,
    `Pink Cake`,
    `Pumpkin Soup`,
    `Red Plate`,
    `Rhubarb Pie`,
    `Rice Pudding`,
    `Salmon Dinner`,
    `Sashimi`,
    `Spicy Eel`,
    `Strange Bun`,
    `Stuffing`,
    `Super Meal`,
    `Tom Kha Soup`,
    `Tortilla`,
    `Trout Soup`,
    `Vegetable Medley`,

    `Purple Mushroom`,

    `Aquamarine`,
    `Diamond`,
    `Emerald`,
    `Fire Quartz`,
    `Frozen Tear`,
    `Jade`,
    `Ruby`,

    `Copper Bar`,
    `Gold Bar`,
    `Iron Bar`,
    `Refined Quartz`,

    `Cactus Fruit`,
    `Coconut`,
    `Sandfish`,
    `Scorpion Carp`,

    `Anchovy`,
    `Carp`,
    `Catfish`,
    `Daffodil`,
    `Dandelion`,
    `Eel`,
    `Flounder`,
    `Herring`,
    `Leek`,
    `Sardine`,
    `Smallmouth Bass`,
    `Sunfish`,
    `Wild Horseradish`,

    `Carp`,
    `Flounder`,
    `Grape`,
    `Octopus`,
    `Pike`,
    `Pufferfish`,
    `Rainbow Trout`,
    `Red Mullet`,
    `Red Snapper`,
    `Spice Berry`,
    `Sunfish`,
    `Super Cucumber`,
    `Sweet Pea`,
    `Tuna`,

    `Anchovy`,
    `Blackberry`,
    `Carp`,
    `Catfish`,
    `Common Mushroom`,
    `Eel`,
    `Hazelnut`,
    `Midnight Carp`,
    `Red Snapper`,
    `Salmon`,
    `Sardine`,
    `Sea Cucumber`,
    `Smallmouth Bass`,
    `Super Cucumber`,
    `Walleye`,
    `Wild Plum`,

    `Crocus`,
    `Crystal Fruit`,
    `Herring`,
    `Midnight Carp`,
    `Perch`,
    `Pike`,
    `Red Mullet`,
    `Red Snapper`,
    `Sardine`,
    `Sea Cucumber`,
    `Snow Yam`,
    `Squid`,
    `Tuna`,
    `Walleye`,
    `Winter Root`
]"
zN9GDeZh,Untitled,Tkap1,C++,Sunday 6th of August 2023 03:10:43 PM CDT,"
enum e_node
{
	e_node_invalid,
	e_node_func_call,
	e_node_integer,
	e_node_float,
	e_node_identifier,
	e_node_var_decl,
	e_node_for,
	e_node_compound,
	e_node_plus_equals,
	e_node_minus_equals,
	e_node_times_equals,
	e_node_add,
	e_node_subtract,
	e_node_multiply,
	e_node_divide,
	e_node_mod,
	e_node_assign,
	e_node_if,
	e_node_equals,
	e_node_not_equals,
	e_node_greater_than_or_equal,
	e_node_less_than_or_equal,
	e_node_greater_than,
	e_node_less_than,
	e_node_return,
	e_node_func_decl,
	e_node_func_arg,
	e_node_break,
	e_node_continue,
	e_node_type,
	e_node_possible_type,
	e_node_str,
	e_node_unary,
	e_node_struct,
	e_node_struct_member,
	e_node_member_access,
};

enum e_unary
{
	e_unary_dereference,
	e_unary_address_of,
	e_unary_logical_not,
	e_unary_cast,
};

struct s_node;
struct s_type_check_var
{
	int pointer_level;
	int stack_offset; // @Note(tkap, 28/07/2023): This is relative to the function
	s_node* func_node;
	s_node* type_node;
	s64 id;
	s_str<64> name;
};

struct s_type_instance
{
	int pointer_level;
	s_node* type;
};

struct s_node
{
	int line;
	e_node type;
	s_node* next;

	int stack_offset;
	int pointer_level;
	s_node* type_node;
	s_node* func_node;

	union
	{
		struct
		{
			int arg_count;
			s_node* left;
			s_node* args;
		} func_call;

		struct
		{
			int bytes_used_by_local_variables;
			int bytes_used_by_args;
			s64 id;
			b8 external;
			int arg_count;
			s_str<64> dll_str;
			s_str<64> name;
			s_node* return_type;
			s_node* args;
			s_node* body;
		} func_decl;

		struct
		{
			s64 val;
		} integer;

		struct
		{
			float val;
		} nfloat;

		struct
		{
			int bytes_used_by_members;
			int member_count;
			s_node* members;
			s_str<64> name;
		} nstruct;

		struct
		{
			s_node* type;
			s_str<64> name;
		} struct_member;

		struct
		{
			// @TODO(tkap, 26/07/2023): This needs to be dynamic
			s_str<128> val;
		} str;

		struct
		{
			s_str<64> name;
			s_node* type;
			s_node* val;
		} var_decl;

		struct
		{
			s_str<64> name;
		} identifier;

		struct
		{
			b8 reverse;
			s_str<64> name;
			s_node* expr;
			s_node* body;
		} nfor;

		struct
		{
			s_node* expr;
			s_node* body;
		} nif;

		struct
		{
			int statement_count;
			s_node* statements;
		} compound;

		struct
		{
			s_node* left;
			s_node* right;
		} arithmetic;

		struct
		{
			s_node* expr;
		} nreturn;

		struct
		{
			int size_in_bytes;
			int id;
			s_str<64> name;
		} ntype;

		struct
		{
			int pointer_level;
			s_str<64> name;
		} possible_type;

		struct
		{
			s_node* type;
			s_str<64> name;
		} func_arg;

		struct
		{
			e_unary type;
			s_node* cast_type; // @Note(tkap, 04/08/2023): Only for e_unary_cast
			s_node* expr;
		} unary;

		struct
		{
			int val;
		} nbreak;
	};
};


struct s_parse_result
{
	b8 success;
	s_tokenizer tokenizer;
	s_node node;
};

struct s_error_reporter
{
	b8 has_error;
	b8 has_warning;
	char error_str[1024];

	void warning(int line, char* file, char* str, ...);
	void error(int line, char* file, char* str, ...);
	void fatal(int line, char* file, char* str, ...);
};


func s_node* parse(s_tokenizer tokenizer, char* file);
func s_parse_result parse_expr(s_tokenizer tokenizer, int operator_level, s_error_reporter* reporter, char* file);
func s_parse_result parse_statement(s_tokenizer tokenizer, s_error_reporter* reporter, char* file);
func s_node* make_node(s_node node);
func s_node** node_set_and_advance(s_node** target, s_node node);
func int get_operator_level(char* str);
func void print_parser_expr(s_node* node);
func b8 peek_assignment_token(s_tokenizer tokenizer, e_node* out_type);
func s_parse_result parse_type(s_tokenizer tokenizer, s_error_reporter* reporter, char* file);
func s_parse_result parse_func_decl(s_tokenizer tokenizer, s_error_reporter* reporter, char* file);
func int get_unary_operator_level(char* str);
func b8 token_is_keyword(s_token token);
func s_parse_result parse_struct(s_tokenizer tokenizer, s_error_reporter* reporter, char* file);"
EiUBYXMF,LM-SVE Villagers,parracodea,JSON,Sunday 6th of August 2023 03:09:42 PM CDT,"[
    `Alex`,
    `Elliott`,
    `Harvey`,
    `Sam`,
    `Sebastian`,
    `Shane`,

    `Abigail`,
    `Emily`,
    `Haley`,
    `Leah`,
    `Maru`,
    `Penny`,

    `Caroline`,
    `Clint`,
    `Demetrius`,

    `Evelyn`,
    `George`,
    `Gus`,
    `Jas`,
    `Jodi`,
    `Kent`,

    `Leo`,
    `Lewis`,
    `Linus`,
    `Marnie`,
    `Pam`,
    `Pierre`,
    `Robin`,
    `Sandy`,
    `Vincent`,
    `Willy`,
    `Gil`,
    `Gunther`,
    `Marlon`,
    `Morris`,

    `Claire`,
    `Lance`,
    `Magnus`,
    `Olivia`,
    `Sophia`,
    `Victor`,

    `Andy`,
    `Martin`,
    `Morgan`,
    `Scarlett`,
    `Susan`
]"
EBXjVVNX,Mekanism Induction Matrix Manager v2 (Receiver Module),Kman3107,Lua,Sunday 6th of August 2023 02:37:18 PM CDT,"--[[
  Wolfe's Mekanism Induction Matrix Monitor v2 (Receiver Module)
  Usage: Put computer near Modem and Monitor (2x3 array should work fine) and install. Requires another computer transmitting matrix data over rednet to work.
  Installation: pastebin run 3naSaR8X install
  Configuration: Edit the ""config"" file, refer to the comments below for what each field means

  NB! This script has been modified to work in a 1.12.2 modpack! - Kman
]]

-- Default settings, do not change
local options = {
  -- Unique identifier for the destination matrix on rednet
  rednet_identifier = '',

  -- Energy type being displayed (J, FE)
  energy_type = 'FE',

  -- Text scale on the monitor
  text_scale = 1,

  -- Output debug data to the computer's internal display
  debug = true,
}

--------------------------------------------------
--- Internal variables, DO NOT CHANGE
--------------------------------------------------

--- This will be used as the installer source (Pastebin)
local INSTALLER_ID = '3naSaR8X'

--- Supported energy suffixes
local energy_suffixes = { 'k', 'M', 'G', 'T', 'P' }

--- Supported time periods when converting seconds
local time_periods = {
  { 'weeks', 604800 },
  { 'days', 86400 },
  { 'hours', 3600 },
  { 'minutes', 60 },
  { 'seconds', 1 },
}

--- This is our Induction Matrix, we'll auto-detect it later
local induction_matrix = nil

--- This is our Monitor, we'll auto-detect it later
local monitor = nil

--- This is our Modem, we'll auto-detect it later
local modem = nil

--- Prefix used for rednet channels
local rednet_prefix = 'WL_Mek_Matrix'

--------------------------------------------------
--- Helper functions
--------------------------------------------------

--- Reads a file's contents
---@return string
function file_read (file)
  local handle = fs.open(file, 'r')
  local data = handle.readAll()
  handle.close()
  return data
end

--- Writes data to a file (overrides existing data)
function file_write (file, data)
  local handle = fs.open(file, 'w')
  handle.write(data)
  handle.close()
end

--- Holds the current buffer of data being printed
local machine_term = term.current()
local print_buffer = {}

--- Writes data to the output monitor buffer
function print_r (text)
  table.insert(print_buffer, text)
end

--- Writes formatted data to the output monitor buffer
function print_f (format, ...)
  print_r(string.format(format, ...))
end

--- Writes the buffer into the output monitor
function print_flush ()
  -- Redirects writes to monitor (if any)
  term.redirect(monitor)

  -- Clears terminal
  term.clear()
  term.setCursorPos(1, 1)

  -- Writes new data
  print(table.concat(print_buffer or {}, '\n'))

  -- Redirects writes back to computer (if using monitor)
  term.redirect(machine_term)

  -- Clears buffer
  print_buffer = {}
end

--- Writes debug info to the machine
function debug (...)
  if options.debug then
    print(...)
  end
end

--- Rounds a number with N decimals
function round_decimal (number, decimals)
  local multiplier = math.pow(10, decimals or 0)
  return math.floor(number * multiplier) / multiplier
end

--- Rounds a percentage (0..1) to a number of decimals
function round_percentage (number, decimals)
  return ('%s%%'):format(round_decimal(100 * number, decimals or 1))
end

--- The current energy type
local energy_type = 'FE'

--- Converts energy values
local energy_convert = function (energy) return energy end
if mekanismEnergyHelper and mekanismEnergyHelper[('joulesTo%s'):format(options.energy_type)] then
  energy_type = options.energy_type
  energy_convert = mekanismEnergyHelper[('joulesTo%s'):format(options.energy_type)]
end

--- Prints an energy value
local energy_string = function (energy, decimals)
  local prefix = ''
  local suffix = ''

  -- Prepares a prefix for negative numbers
  if energy < 0 then
    prefix = '-'
  end

  -- We need a positive number here for calculating multipliers (k, M, G, T), we'll add the minus later, we also convert it to the right unit
  local amount = energy_convert(math.abs(energy))

  -- Finds the proper suffix/multiplier
  for _, multiplier in pairs(energy_suffixes) do
    -- Stops when amount is less than 1000
    if amount < 1000 then
      break
    end

    -- Updates suffix and amount to new value
    amount = amount / 1000
    suffix = multiplier
  end

  -- Returns the formatted string
  return ('%s%s%s%s'):format(prefix, round_decimal(amount, decimals or 1), suffix, energy_type)
end

--- Generates an ETA string when given a number of seconds
function eta_string (seconds)
  -- Makes sure we're only dealing with integers
  seconds = math.floor(seconds)

  -- Processes time periods
  local time = {}
  for _, period in pairs(time_periods) do
    local count = math.floor(seconds / period[2])
    time[period[1]] = count
    seconds = seconds - (count * period[2])
  end

  -- If we have more than 72h worth of storage, switch to week, day, hour format
  if time.weeks > 0 then
    return ('%dwk %dd %dh'):format(time.weeks, time.days, time.hours)
  elseif time.days >= 3 then
    return ('%dd %dh'):format(time.days, time.hours)
  end

  -- For all other cases, we'll just use H:MM:SS
  return ('%d:%02d:%02d'):format(time.hours, time.minutes, time.seconds)
end

--- Prints the Induction Matrix information
function print_matrix_info (matrix_info)
  print_r('Ind.Matrix Monitor')
  print_r('------------------')
  print_r('')
  print_f('Power : %s', energy_string(matrix_info.energy_stored))
  print_f('Limit : %s', energy_string(matrix_info.energy_capacity))
  print_f('Charge: %s', round_percentage(matrix_info.energy_percentage))
  print_r('')
  print_f('Input : %s/t', energy_string(matrix_info.io_input))
  print_f('Output: %s/t', energy_string(matrix_info.io_output))
  print_f('Max IO: %s/t', energy_string(matrix_info.io_capacity))
  print_r('')

  -- If we have negative value here, we'll save a character by removing the space so it fits same line
  if matrix_info.change_amount < 0 then
    print_f('Change:%s/s', energy_string(matrix_info.change_amount_per_second))
  else
    print_f('Change: %s/s', energy_string(matrix_info.change_amount_per_second))
  end

  -- Charge/discharge status
  print_r('Status:')
  if matrix_info.is_charging then
    print_f('Charg. %s', eta_string((matrix_info.energy_capacity - matrix_info.energy_stored) / matrix_info.change_amount_per_second))
  elseif matrix_info.is_discharging then
    print_f('Disch. %s', eta_string(matrix_info.energy_stored / math.abs(matrix_info.change_amount_per_second)))
  else
    print_r('Idle')
  end
end

--------------------------------------------------
--- Program initialization
--------------------------------------------------

args = {...}

-- Loads custom options from filesystem
if fs.exists('config') then
  debug('Loading settings from ""config"" file...')

  -- Reads custom options
  local custom_options = textutils.unserialize(file_read('config'))

  -- Overrides each of the existing options
  for k, v in pairs(custom_options) do
    options[k] = v
  end
end

-- Writes back config file
print('Updating config file...')
file_write('config', textutils.serialize(options))

-- Handles special case when ""install"" is executed from the pastebin
if 'install' == args[1] then
  print('Installing Matrix Monitor (Receiver Module)...')

  -- Are we on first install? If so, we'll run open the config for editing later
  local has_existing_install = fs.exists('startup.lua')

  -- Removes existing version
  if fs.exists('startup.lua') then
    fs.delete('startup.lua')
  end

  -- Downloads script from Pastebin
  shell.run('pastebin', 'get', INSTALLER_ID, 'startup.lua')

  -- Runs config editor
  if not has_existing_install then
    print('Opening config file for editing...')
    sleep(2.5)
    shell.run('edit', 'config')
  end

  -- Reboots the computer after everything is done
  print('Install complete! Restarting computer...')
  sleep(2.5)
  os.reboot()
end

-- Detects peripherals
monitor = peripheral.find('monitor')
modem = peripheral.find('modem')

--- The rednet channel/protocol we'll be using
local rednet_channel = nil

-- Makes sure we have a connected monitor
if monitor then
  monitor.setTextScale(options.text_scale)
else
  error('No monitor detected!')
end

-- Makes sure we have a connected modem
if modem then
  if not options.rednet_identifier or options.rednet_identifier == '' then
    error('Modem has been found, but no wireless identifier found on configs!')
  end

  peripheral.find('modem', rednet.open)
  debug('Connected to rednet!')
  rednet_channel = ('%s#%s'):format(rednet_prefix, options.rednet_identifier)
else
  error('No modem detected!')
end

--------------------------------------------------
--- Main runtime
--------------------------------------------------

debug('Entering main loop...')

while true do
  -- Receives next update
  local id, message = rednet.receive(rednet_channel)

  -- Parses message
  local matrix_info = textutils.unserialize(message)

  -- Prints the matrix information
  print_matrix_info(matrix_info)

  -- Outputs text to screen
  print_flush()
end"
h1MaK8MV,Untitled,Falexom,Python,Sunday 6th of August 2023 02:31:59 PM CDT,"class TreeObj:
    def __init__(self, indx, value=None):
        self.indx = indx
        self.value = value
        self.__left = None
        self.__right = None

    @property
    def left(self):
        return self.__left

    @left.setter
    def left(self, object):
        self.__left = object

    @property
    def right(self):
        return self.__right

    @right.setter
    def right(self, object):
        self.__right = object


class DecisionTree:
    @classmethod
    def predict(cls, root, x):
        height = root
        while height:
            if x[height.indx] == 1:
                height = height.left
            else:
                height = height.right
            if height.left is None:
                break
        return height.value

    @classmethod
    def add_obj(cls, obj, node=None, left=True):
        if node:
            if left:
                node.left = obj
            else:
                node.right = obj
        return obj
"
yYksuuGT,Untitled,lord_shadow,TypeScript,Sunday 6th of August 2023 01:46:32 PM CDT,"$w.onReady(function () {
  $w(""#button1"").onClick(sendPromoteRequest);
  $w('#button2').hide();
  $w('#button3').hide();
  $w(""#successMessage"").hide();
});

const url = 'myurl:3001';
const key = 'myapikey';

function sendPromoteRequest() {
  const playerId = $w(""#input1"").value;

  const requestOptions = {
    method: 'POST',
    Authorization: key,
    headers: {
      'Content-Type': 'application/json',
      'Authorization': key,
    },
    body: JSON.stringify({
      id: playerId,
    })
  };

  fetch(`${url}/promote`, requestOptions)
    .then(response => response.json())
    .then(data => {
      console.log(""API request successful!"");
      console.log(""Response:"", data);
      $w(""#successMessage"").text = `Successfully promoted robloxId: ${playerId}`;
      $w(""#successMessage"").show();

      setTimeout(() => {
        $w(""#successMessage"").hide();
        $w(""#button2"").label = ""Confirm"";
        cancelRequest();
      }, 2000);
    })
    .catch(error => {
      console.error(""Failed to make API request:"", error);
      setTimeout(() => {
        $w(""#button2"").label = ""Confirm"";
        cancelRequest();
      }, 2000);
    });
}

function cancelRequest() {
  $w(""#button2"").hide();
  $w(""#button3"").hide();
  $w(""#button1"").show();
}"
fSj62bfr,Untitled,dominus,Diff,Sunday 6th of August 2023 01:38:40 PM CDT,"diff --git a/gumps/AudioOptions_gump.cc b/gumps/AudioOptions_gump.cc
index d1ef5b7d2..00a2b9879 100644
--- a/gumps/AudioOptions_gump.cc
+++ b/gumps/AudioOptions_gump.cc
@@ -153,10 +153,9 @@ void AudioOptions_gump::rebuild_buttons() {
 		rebuild_sfx_buttons();
 
 	// speech on/off
-	buttons[id_speech_enabled] = std::make_unique<AudioEnabledToggle>(this, &AudioOptions_gump::toggle_speech_enabled,
-	        speech_enabled, colx[2], rowy[11], 59);
-	if (speech_enabled)
-		rebuild_speech_buttons();
+	std::vector<std::string> speech_options = {""Subtitles only"", ""Voice only"", ""Voice + Subtitles""};
+	buttons[id_speech_enabled] = std::make_unique<AudioTextToggle>(this, &AudioOptions_gump::toggle_speech_enabled,
+	        std::move(speech_options), speech_option, colx[2] - 49, rowy[11], 108);
 }
 
 void AudioOptions_gump::rebuild_midi_buttons() {
@@ -226,17 +225,6 @@ void AudioOptions_gump::rebuild_sfx_buttons() {
 #endif
 }
 
-void AudioOptions_gump::rebuild_speech_buttons() {
-	buttons[id_speech_subtitles].reset();
-
-	if (!speech_enabled)
-		return;
-	else {
-		buttons[id_speech_subtitles] = std::make_unique<AudioEnabledToggle>(this, &AudioOptions_gump::toggle_speech_subtitles,
-		        speech_subtitles, colx[2], rowy[12], 59);
-	}
-}
-
 void AudioOptions_gump::rebuild_mididriveroption_buttons() {
 	std::string s = ""Default"";
 	if (midi_driver != MidiDriver::getDriverCount()) s = MidiDriver::getDriverName(midi_driver);
@@ -282,6 +270,12 @@ void AudioOptions_gump::load_settings() {
 	const bool sfx_on = (Audio::get_ptr()->are_effects_enabled());
 	speech_enabled = (Audio::get_ptr()->is_speech_enabled() ? 1 : 0);
 	speech_subtitles = (Audio::get_ptr()->is_speech_with_subs() ? 1 : 0);
+	if (speech_enabled == 0)
+		speech_option = 0;
+	else if (speech_enabled == 1 && speech_subtitles == 0)
+		speech_option = 1;
+	else if (speech_enabled == 1  && speech_subtitles == 1)
+		speech_option = 2;
 	midi_looping = (Audio::get_ptr()->is_music_looping_allowed() ? 1 : 0);
 	speaker_type = true; // stereo
 	sample_rate = 44100;
@@ -478,16 +472,17 @@ void AudioOptions_gump::save_settings() {
 	Audio::get_ptr()->set_effects_enabled(sfx_enabled != 0);
 	if (!sfx_enabled)       // Stop what's playing.
 		Audio::get_ptr()->stop_sound_effects();
-	Audio::get_ptr()->set_speech_enabled(speech_enabled == 1);
-	Audio::get_ptr()->set_speech_with_subs(speech_subtitles == 1);
+	Audio::get_ptr()->set_speech_enabled(speech_option != 0);
+	Audio::get_ptr()->set_speech_with_subs(speech_option != 1);
 	Audio::get_ptr()->set_allow_music_looping(midi_looping == 1);
 
 	config->set(""config/audio/enabled"", audio_enabled ? ""yes"" : ""no"", false);
 	config->set(""config/audio/midi/enabled"", midi_enabled ? ""yes"" : ""no"", false);
 	config->set(""config/audio/effects/enabled"", sfx_enabled ? ""yes"" : ""no"", false);
-	config->set(""config/audio/speech/enabled"", speech_enabled ? ""yes"" : ""no"", false);
-	config->set(""config/audio/speech/with_subs"", speech_subtitles ? ""yes"" : ""no"", false);
-
+	if (speech_option == 0 || speech_option == 1)
+		config->set(""config/audio/speech/enabled"", speech_option ? ""yes"" : ""no"", false);
+	if (speech_option == 1 || speech_option == 2)
+		config->set(""config/audio/speech/with_subs"", (speech_option & 2) ? ""yes"" : ""no"", false);
 	config->set(""config/audio/midi/chorus/enabled"", (midi_reverb_chorus & 2) ? ""yes"" : ""no"", false);
 	config->set(""config/audio/midi/reverb/enabled"", (midi_reverb_chorus & 1) ? ""yes"" : ""no"", false);
 	config->set(""config/audio/midi/looping"", midi_looping ? ""yes"" : ""no"", false);
@@ -598,8 +593,6 @@ void AudioOptions_gump::paint() {
 		}
 #endif
 		font->paint_text(iwin->get_ib8(), ""Speech:"", x + colx[0], y + rowy[11] + 1);
-		if (speech_enabled == 1)
-			font->paint_text(iwin->get_ib8(), ""subtitles"", x + colx[1], y + rowy[12] + 1);
 	}
 	gwin->set_painted();
 }
diff --git a/gumps/AudioOptions_gump.h b/gumps/AudioOptions_gump.h
index ae43eb146..509c21fbb 100644
--- a/gumps/AudioOptions_gump.h
+++ b/gumps/AudioOptions_gump.h
@@ -70,6 +70,7 @@ class AudioOptions_gump : public Modal_gump {
 #ifdef ENABLE_MIDISFX
 	int sfx_conversion;
 #endif
+	int speech_option;
 	int speech_enabled;
 	int speech_subtitles;
 
@@ -104,7 +105,6 @@ class AudioOptions_gump : public Modal_gump {
 	void rebuild_midi_driver_buttons();
 	void rebuild_mididriveroption_buttons();
 	void rebuild_sfx_buttons();
-	void rebuild_speech_buttons();
 
 	void load_settings();
 	void save_settings();
@@ -151,12 +151,7 @@ class AudioOptions_gump : public Modal_gump {
 	}
 	void toggle_sfx_pack(int state);
 	void toggle_speech_enabled(int state) {
-		speech_enabled = state;
-		rebuild_speech_buttons();
-		paint();
-	}
-	void toggle_speech_subtitles(int state) {
-		speech_subtitles = state;
+		speech_option = state;
 	}
 };
 
"
N6gvUNAU,Simple TicTacToe AI bot,kucina09,Python,Sunday 6th of August 2023 01:37:11 PM CDT,"### Lepsze_AI_TTT.py
### By kucina09
### Polish language


import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
import joblib
import os



### Zapis
def save_model(model, filename):
    joblib.dump(model, filename)

def load_model(filename):
    return joblib.load(filename)

def reset_saved_model():
    # Sprawdź, czy plik ""trained_model.pkl"" istnieje
    if os.path.exists(""trained_model.pkl""):
        # Usuń plik, jeśli istnieje
        os.remove(""trained_model.pkl"")
        print(""Zresetowano zapisany model."")
    else:
        print(""Zapisany model nie istnieje, nie ma potrzeby resetowania."")



### Plansza
def create_empty_board():
    return np.zeros((3, 3), dtype=int)

def print_board(board):
    for row in board:
        print("" | "".join([""X"" if cell == 1 else ""O"" if cell == 2 else "" "" for cell in row]))
        print(""-"" * 5)

def is_move_valid(board, row, col):
    return board[row, col] == 0

def make_move(board, row, col, player):
    board[row, col] = player

def check_winner(board, player):
    for row in range(3):
        if all(board[row, col] == player for col in range(3)):
            return True
    for col in range(3):
        if all(board[row, col] == player for row in range(3)):
            return True
    if all(board[i, i] == player for i in range(3)) or all(board[i, 2 - i] == player for i in range(3)):
        return True
    return False

def is_board_full(board):
    return not any(cell == 0 for cell in board.flatten())

def get_random_move(board):
    empty_cells = np.argwhere(board == 0)
    random_move = np.random.choice(len(empty_cells))
    return tuple(empty_cells[random_move])

def create_model():
    model = Sequential()
    model.add(Flatten(input_shape=(3, 3)))
    model.add(Dense(100, activation='relu'))
    model.add(Dense(100, activation='relu'))
    model.add(Dense(9, activation='linear'))
    model.compile(loss='mean_squared_error', optimizer='adam')
    return model

def get_ai_move(board, q_model, player):
    # Pobranie stanu planszy jako reprezentacji wejściowej dla modelu
    flat_board = board.reshape(3, 3)
    # Obliczenie wartości Q dla wszystkich akcji
    q_values = q_model.predict(np.array([flat_board]))  # Poprawiono przekazywanie danych do modelu
    # Wybieranie akcji na podstawie strategii epsilon-greedy
    epsilon = 0.1  # Współczynnik eksploracji
    if np.random.rand() < epsilon:
        # Wybieranie losowej akcji w celu eksploracji
        valid_moves = np.argwhere(board == 0)
        return tuple(valid_moves[np.random.choice(len(valid_moves))])
    else:
        # Wybieranie najlepszej akcji na podstawie wartości Q
        valid_moves = np.argwhere(board == 0)
        best_move = None
        best_q_value = -np.inf
        for move in valid_moves:
            q_value = q_values[0][move[0] * 3 + move[1]]  # Poprawiono indeksowanie tablicy q_values
            if q_value > best_q_value:  # Poprawiono warunek porównawczy
                best_q_value = q_value
                best_move = move
        return tuple(best_move)


# Funkcja nauki AI za pomocą Q-learningu
def train_ai(q_model, num_episodes, learning_rate=0.1, discount_factor=0.9):
    left_episode = 0
    for episode in range(num_episodes):
        # Resetowanie planszy dla każdej nowej gry
        board = create_empty_board()
        game_history = []  # Historia gry do nauki

        # Rozgrywanie pojedynczej gry
        while True:
            # Ruch AI dla gracza X (gracz X w kodzie ma wartość 1)
            state = board.copy()  # Skopiowanie aktualnego stanu planszy
            row, col = get_ai_move(board, q_model, 1)
            make_move(board, row, col, 1)

            # Sprawdzenie stanu gry
            if check_winner(board, 1):
                # Nagroda dla AI za wygraną
                reward = 1
                next_state = board.copy()  # Skopiowanie kolejnego stanu planszy po ruchu
                done = True
                game_history.append((state, (row, col), reward, next_state, done))
                break
            elif is_board_full(board):
                # Nagroda dla AI za remis
                reward = 0
                next_state = board.copy()  # Skopiowanie kolejnego stanu planszy po ruchu
                done = True
                game_history.append((state, (row, col), reward, next_state, done))
                break

            # Ruch AI dla gracza O (gracz O w kodzie ma wartość -1)
            state = board.copy()  # Skopiowanie aktualnego stanu planszy
            row, col = get_ai_move(board, q_model, -1)
            make_move(board, row, col, -1)

            # Sprawdzenie stanu gry
            if check_winner(board, -1):
                # Nagroda dla AI za przegraną
                reward = -1
                next_state = board.copy()  # Skopiowanie kolejnego stanu planszy po ruchu
                done = True
                game_history.append((state, (row, col), reward, next_state, done))
                break
            elif is_board_full(board):
                # Nagroda dla AI za remis
                reward = 0
                next_state = board.copy()  # Skopiowanie kolejnego stanu planszy po ruchu
                done = True
                game_history.append((state, (row, col), reward, next_state, done))
                break

        # Aktualizacja wartości Q na podstawie nagród z gry
        update_model(q_model, game_history, learning_rate, discount_factor)


        # Wiadomość o zakończonym cyklu
        left_episode = left_episode + 1
        print(""Seria"", left_episode, ""zakończona."")

    # Zapisanie procesu nauczanuia
    save_model(q_model, ""trained_model.pkl"")


# Funkcja aktualizacji modelu na podstawie historii gry i wartości Q
def update_model(q_model, game_history, learning_rate, discount_factor):
    X = []
    y = []
    for state, action, reward, next_state, done in game_history:
        q_values = q_model.predict(np.array([state]))[0]
        next_q_values = q_model.predict(np.array([next_state]))[0]
        if done:
            q_values[action[0] * 3 + action[1]] = reward
        else:
            q_values[action[0] * 3 + action[1]] = reward + discount_factor * np.max(next_q_values)
        X.append(state)
        y.append(q_values)
    X = np.array(X).reshape(-1, 3, 3)
    y = np.array(y)
    q_model.fit(X, y, epochs=1, verbose=0)


    
def create_q_model():
    model = keras.Sequential([
        keras.layers.Dense(128, activation='relu', input_shape=(9,)),
        keras.layers.Dense(128, activation='relu'),
        keras.layers.Dense(9)  # Wartości Q dla 9 akcji
    ])
    model.compile(optimizer='adam', loss='mse')
    return model


def display_board(board):
    for row in range(3):
        for col in range(3):
            if board[row, col] == 0:
                print("" "", end="""")
            elif board[row, col] == 1:
                print(""X"", end="""")
            else:
                print(""O"", end="""")
            if col < 2:
                print(""|"", end="""")
        print()
        if row < 2:
            print(""-"" * 5)

def play_game(model):
    board = create_empty_board()
    print(""Wybiezrz kto ma zacząć (1 - ty / 2 - AI):"")
    player = input().upper()

    if player == '1':
        ai_player = 'O'
    else:
        ai_player = 'X'

    while True:
        display_board(board)
        if player == 'X':
            row, col = map(int, input(""Podaj ruch (wiersz, kolumna): "").split())
            if is_move_valid(board, row, col):
                make_move(board, row, col, 1)
                if check_winner(board, 1):
                    print_board(board)
                    print(""Gratulacje! Wygrałeś!"")
                    break
                elif is_board_full(board):
                    print_board(board)
                    print(""Remis!"")
                    break
                player = 'O'
        else:
            print(""Ruch AI."")
            row, col = get_ai_move(board, model, 2)
            make_move(board, row, col, 2)
            if check_winner(board, 2):
                print_board(board)
                print(""AI wygrywa!"")
                break
            elif is_board_full(board):
                print_board(board)
                print(""Remis!"")
                break
            player = 'X'

    print(""Gra zakończona."")

def main():
    model = create_model()
    if os.path.exists(""trained_model.pkl""):
        loaded_model = load_model(""trained_model.pkl"")
    else:
        loaded_model = create_model()

    while True:
        print(""Menu:"")
        print(""1 - Uruchom AI"")
        print(""2 - Trenuj AI"")
        print(""3 - Reset danych AI"")
        print(""4 - Zapisz dane i zamknij program"")
        option = int(input(""Wybierz opcję: ""))

        if option == 1:
            play_game(model)
        elif option == 2:
            num_episodes = int(input(""Podaj liczbę rund do nauki: ""))
            train_ai(model, num_episodes)
            print(""Nauka zakończona."")
        elif option == 3:
            reset_saved_model()
            print(""Dane AI zostały zresetowane."")
        elif option == 4:
            model.save(""model.h5"")
            print(""Dane zostały zapisane."")
            break
        else:
            print(""Nieprawidłowa opcja. Wybierz ponownie."")

if __name__ == ""__main__"":
    main()
"
Bi8iDxig,Untitled,dominus,Diff,Sunday 6th of August 2023 01:34:36 PM CDT,"diff --git a/gumps/AudioOptions_gump.cc b/gumps/AudioOptions_gump.cc
index d1ef5b7d2..00a2b9879 100644
--- a/gumps/AudioOptions_gump.cc
+++ b/gumps/AudioOptions_gump.cc
@@ -153,10 +153,9 @@ void AudioOptions_gump::rebuild_buttons() {
 		rebuild_sfx_buttons();
 
 	// speech on/off
-	buttons[id_speech_enabled] = std::make_unique<AudioEnabledToggle>(this, &AudioOptions_gump::toggle_speech_enabled,
-	        speech_enabled, colx[2], rowy[11], 59);
-	if (speech_enabled)
-		rebuild_speech_buttons();
+	std::vector<std::string> speech_options = {""Subtitles only"", ""Voice only"", ""Voice + Subtitles""};
+	buttons[id_speech_enabled] = std::make_unique<AudioTextToggle>(this, &AudioOptions_gump::toggle_speech_enabled,
+	        std::move(speech_options), speech_option, colx[2] - 49, rowy[11], 108);
 }
 
 void AudioOptions_gump::rebuild_midi_buttons() {
@@ -226,17 +225,6 @@ void AudioOptions_gump::rebuild_sfx_buttons() {
 #endif
 }
 
-void AudioOptions_gump::rebuild_speech_buttons() {
-	buttons[id_speech_subtitles].reset();
-
-	if (!speech_enabled)
-		return;
-	else {
-		buttons[id_speech_subtitles] = std::make_unique<AudioEnabledToggle>(this, &AudioOptions_gump::toggle_speech_subtitles,
-		        speech_subtitles, colx[2], rowy[12], 59);
-	}
-}
-
 void AudioOptions_gump::rebuild_mididriveroption_buttons() {
 	std::string s = ""Default"";
 	if (midi_driver != MidiDriver::getDriverCount()) s = MidiDriver::getDriverName(midi_driver);
@@ -282,6 +270,12 @@ void AudioOptions_gump::load_settings() {
 	const bool sfx_on = (Audio::get_ptr()->are_effects_enabled());
 	speech_enabled = (Audio::get_ptr()->is_speech_enabled() ? 1 : 0);
 	speech_subtitles = (Audio::get_ptr()->is_speech_with_subs() ? 1 : 0);
+	if (speech_enabled == 0)
+		speech_option = 0;
+	else if (speech_enabled == 1 && speech_subtitles == 0)
+		speech_option = 1;
+	else if (speech_enabled == 1  && speech_subtitles == 1)
+		speech_option = 2;
 	midi_looping = (Audio::get_ptr()->is_music_looping_allowed() ? 1 : 0);
 	speaker_type = true; // stereo
 	sample_rate = 44100;
@@ -478,16 +472,17 @@ void AudioOptions_gump::save_settings() {
 	Audio::get_ptr()->set_effects_enabled(sfx_enabled != 0);
 	if (!sfx_enabled)       // Stop what's playing.
 		Audio::get_ptr()->stop_sound_effects();
-	Audio::get_ptr()->set_speech_enabled(speech_enabled == 1);
-	Audio::get_ptr()->set_speech_with_subs(speech_subtitles == 1);
+	Audio::get_ptr()->set_speech_enabled(speech_option != 0);
+	Audio::get_ptr()->set_speech_with_subs(speech_option != 1);
 	Audio::get_ptr()->set_allow_music_looping(midi_looping == 1);
 
 	config->set(""config/audio/enabled"", audio_enabled ? ""yes"" : ""no"", false);
 	config->set(""config/audio/midi/enabled"", midi_enabled ? ""yes"" : ""no"", false);
 	config->set(""config/audio/effects/enabled"", sfx_enabled ? ""yes"" : ""no"", false);
-	config->set(""config/audio/speech/enabled"", speech_enabled ? ""yes"" : ""no"", false);
-	config->set(""config/audio/speech/with_subs"", speech_subtitles ? ""yes"" : ""no"", false);
-
+	if (speech_option == 0 || speech_option == 1)
+		config->set(""config/audio/speech/enabled"", speech_option ? ""yes"" : ""no"", false);
+	if (speech_option == 1 || speech_option == 2)
+		config->set(""config/audio/speech/with_subs"", (speech_option & 2) ? ""yes"" : ""no"", false);
 	config->set(""config/audio/midi/chorus/enabled"", (midi_reverb_chorus & 2) ? ""yes"" : ""no"", false);
 	config->set(""config/audio/midi/reverb/enabled"", (midi_reverb_chorus & 1) ? ""yes"" : ""no"", false);
 	config->set(""config/audio/midi/looping"", midi_looping ? ""yes"" : ""no"", false);
@@ -598,8 +593,6 @@ void AudioOptions_gump::paint() {
 		}
 #endif
 		font->paint_text(iwin->get_ib8(), ""Speech:"", x + colx[0], y + rowy[11] + 1);
-		if (speech_enabled == 1)
-			font->paint_text(iwin->get_ib8(), ""subtitles"", x + colx[1], y + rowy[12] + 1);
 	}
 	gwin->set_painted();
 }
diff --git a/gumps/AudioOptions_gump.h b/gumps/AudioOptions_gump.h
index ae43eb146..31d6ec6f4 100644
--- a/gumps/AudioOptions_gump.h
+++ b/gumps/AudioOptions_gump.h
@@ -70,6 +70,7 @@ class AudioOptions_gump : public Modal_gump {
 #ifdef ENABLE_MIDISFX
 	int sfx_conversion;
 #endif
+	int speech_option;
 	int speech_enabled;
 	int speech_subtitles;
 
@@ -104,7 +105,6 @@ class AudioOptions_gump : public Modal_gump {
 	void rebuild_midi_driver_buttons();
 	void rebuild_mididriveroption_buttons();
 	void rebuild_sfx_buttons();
-	void rebuild_speech_buttons();
 
 	void load_settings();
 	void save_settings();
@@ -151,9 +151,7 @@ class AudioOptions_gump : public Modal_gump {
 	}
 	void toggle_sfx_pack(int state);
 	void toggle_speech_enabled(int state) {
-		speech_enabled = state;
-		rebuild_speech_buttons();
-		paint();
+		speech_option = state;
 	}
 	void toggle_speech_subtitles(int state) {
 		speech_subtitles = state;
"
6CNCBwaH,Untitled,allendev,HTML,Sunday 6th of August 2023 12:53:27 PM CDT,"<!DOCTYPE html>
<html>
<head>
  <title>Opções de Botão</title>
  <style>
    body {
      background-color: black;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }

    button {
      background-color: white;
      color: black;
      padding: 10px 20px;
      border: none;
      margin: 10px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <button id=""button1"" onclick=""embedVideo('https://sinalpublico.com/player3/ch.php?canal=premiere2')"">Opção 1</button>
  

  <div id=""videoContainer""></div>

  <script>
    function embedVideo(url) {
      var embedCode = '<iframe src=""' + url + '"" data_src=""' + url + '"" class=""wpos-iframe-video wpos-iframe-video-opened"" frameborder=""0"" allowfullscreen=""true"" allow=""autoplay; fullscreen"" style=""position: absolute; top: 0; left: 0; width: 100%; height: 100%;""></iframe>';
      document.getElementById('videoContainer').innerHTML = embedCode;
    }
  </script>
</body>
</html>
"
yPyAYuy0,tfillxy,rungholt,Lua,Sunday 6th of August 2023 12:31:27 PM CDT,"local args = { ... }
local x = tonumber(args[1])
local y = tonumber(args[2])
--local z = tonumber(args[3])

local function placeX()
    for i = 1, x - 1 do
        turtle.back()
        turtle.select(i)
        turtle.place()
    end
end

local function change()
    turtle.up()
    turtle.select(1)
    turtle.placeDown()
    turtle.turnLeft()
    turtle.turnLeft()
end

local function goDown()
    turtle.turnLeft()
    turtle.back()
    turtle.select(1)
    turtle.place()
    for j = 1, y - 1 do
        turtle.down()
    end
end

local function placeXY()
    for k = 1, y - 1 do
        placeX()
        change()
    end
    placeX()
    goDown()
end

local function start()
    placeXY()
end

start()

--[[local function digXYZ()
    for l = 1, z do
        startMine()
        digXY()
        goBack()
    end
end

digXYZ()]]--
"
vdPJx0G3,launch_sequence,KingKevin23,Lua,Sunday 6th of August 2023 12:30:32 PM CDT,"local monitor = peripheral.wrap(""left"")
monitor.clear()

function writeMiddle(message)
    monitor.clear()
    local x, y = monitor.getSize()
	y = math.ceil(y/2)
	x = math.ceil((x - string.len(message))/2)
	monitor.setCursorPos(x, y)
	monitor.write(message)
end

function launchSequence()
    rednet.open(""top"")
    writeMiddle(""Starting..."")
    sleep(30)
   	for i=10,1,-1 do
        writeMiddle(tostring(i))
        if i == 5 then
            local id = rednet.lookup(""door_control"", ""rocket"")
            rednet.send(id, ""open"", ""door_control"")
        end
        sleep(1)
    end
    
    writeMiddle(""GO GO GO!"")
    sleep(30)
    for i=10,1,-1 do
        writeMiddle(tostring(i))
        sleep(1)
    end
    
    writeMiddle(""Hangar closed!"")
    local id = rednet.lookup(""door_control"", ""rocket"")
    rednet.send(id, ""close"", ""door_control"")
    rednet.close(""top"")
end

print(""Initiating launch sequence"")
launchSequence()"
UxkAUBUj,Untitled,DamianBar,JavaScript,Sunday 6th of August 2023 12:18:09 PM CDT,"let {
    ApplicationCommandOptionType,
    Interaction,
    Client,
    EmbedBuilder,
    PermissionFlagsBits,
} = require('discord.js'); 
const mongoose = require('mongoose');
const HistoryLog = require('../../models/history');
const dateParser = require('../../utils/dateParser');

function sliceIntoChunks(arr, chunkSize) {
  const res = [];
  for (let i = 0; i < arr.length; i += chunkSize) {
      const chunk = arr.slice(i, i + chunkSize);
      res.push(chunk);
  }
  return res;
}

module.exports = {
  data: {
    name: 'historyuser',
    description: 'Odczytaj historię kar użytkownika.',
    // devOnly: Boolean,
    // testOnly: Boolean,
    options: [
      {
        name: 'target-user',
        description: 'Uzytkownik',
        required: true,
        type: ApplicationCommandOptionType.Mentionable,
      },
      {
        name: 'action',
        description: 'Rodzaj kary',
        required: true,
        type: ApplicationCommandOptionType.String,
        choices: [
            {
                name: 'warn',
                value: 'warn',
            },
            {
                name: 'ban',
                value: 'ban',
            },
            {
                name: 'kick',
                value: 'kick',
            },
            {
                name: 'mute',
                value: 'mute',
            },
        ]
      },
      {
        name: 'page',
        description: 'Strona',
        required: false,
        type: ApplicationCommandOptionType.Number,
      },
    ],
    permissionsRequired: [PermissionFlagsBits.KickMembers],
    botPermissions: [PermissionFlagsBits.KickMembers],
  },

  run: async ({ interaction, client }) => {
    const targetUserId = interaction.options.get('target-user').value;
    const action = interaction.options.get('action').value;
    const page = interaction.options.get('page')?.value || 1;

    await interaction.deferReply();

    const targetUser = await interaction.guild.members.fetch(targetUserId);

    if (!targetUser) {
        await interaction.editReply(""Taki użytkownik nie istnieje na serwerze!"");
        return;
    }

    if (page < 1) {
        await interaction.editReply(""Strona nie może być mniejsza niż 1"");
    }

    if (page > 100) {
        await interaction.editReply(""Strona nie może być większa niż 100, z powodów ograniczeń Discorda"");
    }

    function setDefaultValue(variable, defaultValue) {
      if (!variable) {
        if ( variable != 0) {
          return defaultValue;
        } else {
          return variable;
        }
      }
      return variable;
    }

    let result = await HistoryLog.find({
       'client.id': targetUser.id,
       guildId: interaction.guildId,
     });

    let historyRead = [];

    try {
      for (let i = 0; i < result.length; i++) {
        if (result[i].deleted == true) {
          return;
        }
  
        if (!result[i].action == action) {
          return;
        }
  
        result[i].indexNum = i;
        historyRead.push(result[i]);
      }
    } catch (error) {
      console.log(error);
    }
    
    let historyReadLength = historyRead.length;
    let multiply = (page-1)*5;

    function empty(variable, defaultValue) {
      if (!variable) {
        return defaultValue;
      }
      return variable;
    }

    let visibleCases = Math.sign(historyReadLength - multiply);
    if (visibleCases == -1) {
      visibleCases = 0;
    } else if (visibleCases == 0) {
      visibleCases = 0;
    } else {
      visibleCases = historyReadLength - multiply;
      if (visibleCases > 5) {
        visibleCases = 5;
      }
    }

    console.log(page);
    console.log(multiply);
    console.log(visibleCases);

    const defaultValue = '||Brak danych||';
    
    function formatHistory(readCase) {
      let read = historyRead[readCase+multiply];

      if (!read) {
        read = 'Brak danych';
      }
      
      let {
        reason: reason,
        expires: expires,
        createdAt: date,
        expired: expired,
        createdAt: createdAt,
        indexNum: indexNum
      } = read;

      let readFormatted = {
        reason: reason,
        expires: expires,
        createdAt: date,
        expired: expired,
        createdAt: createdAt,
        indexNum: indexNum
      };

      readFormatted.createdAt = setDefaultValue(readFormatted.createdAt, defaultValue);
      readFormatted.reason = setDefaultValue(readFormatted.reason, defaultValue);
      readFormatted.expired = setDefaultValue(readFormatted.expired, defaultValue);
      readFormatted.expires = setDefaultValue(readFormatted.expires, defaultValue);
      readFormatted.createdAt = setDefaultValue(readFormatted.createdAt, defaultValue);
      readFormatted.indexNum = setDefaultValue(readFormatted.indexNum, defaultValue);

      return(readFormatted);
    };
    
    form1 = formatHistory(0);
    form2 = formatHistory(1);
    form3 = formatHistory(2);
    form4 = formatHistory(3);
    form5 = formatHistory(4);

    function formatDisplay(historyCase) {
      const reason = historyCase.reason;
      let expires = historyCase.expires;
      let expiresRelative;
      const indexNum = historyCase.indexNum;
      let createdAt = historyCase.createdAt;

      if ( createdAt == '||Brak danych||' ) {
        return('|| Brak danych ||');
      }

      createdAt = createdAt.toISOString();
      let expired = historyCase.expired;
      let finalResponse = [];
      const createdAtMs = dateParser(createdAt);

      expires = parseInt(expires) + (parseInt(createdAtMs));
      expiresRelative = `<t:${(expires / 1000) + (3600 * 2)}:R>`

      const [ year, month, rest1 ] = createdAt.split('-');
      const [ days, rest2 ] = rest1.split('T');
      const [ hour, minute, rest3 ] = rest2.split(':');
      const [ second, rest4 ] = rest3.split('.');

      createdAt = `${year}.${month}.${days} ${hour}:${minute}:${second}`;

      const expiresResponse = `__**Wygasa**__ ${expiresRelative}\n`;
      const createdAtResponse = `__**Utworzono:**__ ${createdAt}\n`;
      const expiredResponse = `** Wygasło / Nie podano czasu**\n`;
      const indexNumResponse = `__**Numer referencyjny:**__ ${indexNum}\n`

      finalResponse.push(createdAtResponse);
      finalResponse.push(indexNumResponse);

      if (expires > 0) {
        finalResponse.push(expiresResponse);
      } else if (expired = true) {
        finalResponse.push(expiredResponse);
      } else {
        finalResponse.push(expiredResponse);
      }

      return(finalResponse.join(''));
    }

    let response = [];

    const field1 = {
      name: form1.reason,
      value: formatDisplay(form1),
      inline: true
    };

    const field2 = {
      name: form2.reason,
      value: formatDisplay(form2),
      inline: true
    };

    const field3 = {
      name: form3.reason,
      value: formatDisplay(form3),
      inline: false
    };

    const field4 = {
      name: form4.reason,
      value: formatDisplay(form4),
      inline: true
    };

    const field5 = {
      name: form5.reason,
      value: formatDisplay(form5),
      inline: true
    };

    switch (visibleCases) {
      case 1:
        response.push(field1);
        break;
      case 2:
        response.push(field1);
        response.push(field2);
        break;
      case 3:
        response.push(field1);
        response.push(field2);
        response.push(field3);
        break;
      case 4:
        response.push(field1);
        response.push(field2);
        response.push(field3);
        response.push(field4);
        break;
      case 5:
        response.push(field1);
        response.push(field2);
        response.push(field3);
        response.push(field4);
        response.push(field5);
        break;
      default:
        break;
    }

    const historyEmbed = new EmbedBuilder()
    .setAuthor({
      name: ""Historia kar dla użytkownika:"",
    })
    .setTitle(`${targetUser.user.username}`)
    .setDescription(`**ID użytkownika:** ${targetUser.id}\n**Rodzaj kary:** ${action}\n**Strona:** ${page}`)
    .addFields(
      response,
    )
    .setImage(""https://steamuserimages-a.akamaihd.net/ugc/1752432026470158318/C8C1D1B026DA9BDF2B368F898E2EC8CA9B5B3653/?imw=637&imh=358&ima=fit&impolicy=Letterbox&imcolor=%23000000&letterbox=true"")
    .setColor(""#fc0303"")
    .setFooter({
      text: ""Historia użytkownika. Do użycia profesjonalnego."",
    })
    .setTimestamp();

    await interaction.editReply({ embeds: [historyEmbed] });
    /*
    let user = client.users.cache.get(targetUserId);
    console.log(user);
    user.send('content');
    */
  }
}"
BaqcAhrJ,Hydra Prank,BenTibnam,Java,Sunday 6th of August 2023 12:15:45 PM CDT,"import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class Hydra{
    private JFrame mainFrame;
    private JLabel warning;

    public void makeWindow(){
        this.mainFrame = new JFrame(""Hydra Virus 1.0.0"");
        this.warning = new JLabel("""", JLabel.CENTER);

        this.warning.setText(""This is the Hydra Virus, cut one head off, two more grow."");
        this.mainFrame.add(warning);

        this.mainFrame.setSize(500, 100);

        this.mainFrame.addWindowListener(new WindowAdapter(){
            public void windowClosing(WindowEvent we){
                makeWindow();
                makeWindow();
            }
        });

        this.mainFrame.setVisible(true);
        mainFrame.setLocation((int)(Math.random() * 1920), (int)(Math.random() * 1080));
    }

    public Hydra() {
        this.makeWindow();
    }

    public static void main(String args[]){
        Hydra first = new Hydra();

    }
}"
avmcMskt,Untitled,KeiranHalkyon,C,Sunday 6th of August 2023 12:12:58 PM CDT,"#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#define MAX 20  //Buffer Size

void main(){
    FILE* fptr = fopen(""codeTrim.c"",""r""); //Open file
    if(fptr == NULL){
        printf(""File cannot be opened."");
        exit(0);
    }
    
    int lnum = 0, cnum = 0, cnet = 0;//linenumber, current character number, net no. of characters
    char buff[2][MAX];//array of buffers
    char lch = ' ';//last non-space character
    int str = 0, chr=0, sp = 0, comm = 0, end = 0;//str: ongoing string, chr: ongoing character, sp: space encountered, comm: ongoing comment, end: buffers left till end
    int bnum = 0, bnumo = 1;//buffer number
    if(fgets(buff[0], MAX, fptr)!=NULL)//load first buffer
        end++;//increase end to signify no. of available buffers
    if(fgets(buff[1], MAX, fptr)!=NULL)//load second buffer
        end++;
    while(end--){
        for(int i=0;i<MAX-1;i++){// NOTE : fgets loads till 2nd last element in array
            char nch = buff[bnum][i];//current character
            if(nch=='\n'){//if newline, set strings and chars to 0
                comm = 0;
                str = chr = 0;
                lnum++;
                if(lch!=' ')//print newline only if some other token was encountered
                    printf(""\n"");
                lch = ' ';
                break;
            }
            if(nch =='/' && ((i+1 < MAX-1 && buff[bnum][i+1]=='/')||(i+1>=MAX-1 && buff[bnumo][0] == '/')) && str!=1)//comment check across buffer
                comm = 1;
            if(comm == 1 && nch!='\n')//ongoing comment check
                continue;

            cnum++;//Valid char for compiler
            if(nch == '\""' && chr == 0)//string commence
                str = (str == 0)? 1 : 0;
            if(nch == '\'' && str == 0)//character commence
                chr = (chr == 0)? 1 : 0;
            if(nch == ' ' && str!=1 && chr!=1){//space encountered but string is not ongoing
                sp = 1;
            }
            else{//if not space or string is ongoing
                if(sp==1 && !(ispunct(nch) || ispunct(lch)) && lch!=' '){//if space was encountered in between and (both are non alphanumeric)
                    printf("" "");
                }
                printf(""%c"",nch);//print current char
                sp=0;//set space to 0 upon printing char
            }
            if(nch!=' ') lch=nch;//set non-space character as last character
        }
        cnet+=cnum;
        cnum=0;
        int t = bnum;//swap active buffers
        bnum = bnumo;
        bnumo = t;
        if(fgets(buff[bnumo], MAX, fptr)!=NULL)
            end++;//reload secondary buffer
    }
    printf(""\nTotal lines : %d\nTotal Compilable chars : %d\n"",lnum, cnet);
}
"
HPyXjTKZ,Untitled,dllbridge,C,Sunday 6th of August 2023 12:07:16 PM CDT,"

#include   <stdio.h>





char sz[12] = {56, 51, 32, 'Y'};



////////////////////////////////////////////////////
int main()                                        // 
{
	
	//sz[2] = 69;
	
	printf(""sz = %s"", sz);
	
}





















/*

#include   <stdio.h>









////////////////////////////////////////////////////
int main()                                        // 
{
	
    char sz[12] = ""SONY\n"";
    
    int n = 8;
    
    n = n + 11; 

    sz[5] = 'W';
   
    printf(""sz = %s"", sz);

}



*/

"
zSmhZxqw,topmoviespopular2023,terjatuhspiteng,PHP,Sunday 6th of August 2023 12:00:55 PM CDT,"https://www.jamaterrace.com/group/mysite-200-group/discussion/a8b55b5f-65f6-48ef-b46e-4de3a936c38b
https://www.jamaterrace.com/group/mysite-200-group/discussion/9c3473dc-b7e8-414c-9ac2-fcd2fc064240
https://www.jamaterrace.com/group/mysite-200-group/discussion/b5050843-6658-42cf-8803-859693a6ead9
https://www.jamaterrace.com/group/mysite-200-group/discussion/122c313a-56ac-4efc-9730-25fe34691cb2
https://www.jamaterrace.com/group/mysite-200-group/discussion/668e3f1e-2745-4df9-8045-4902aa2ce407
https://www.guernseycountydogshelter.com/group/mysite-200-group/discussion/cc10ed7a-5f04-4f7a-b8c1-bb8ecea45fbc
https://www.guernseycountydogshelter.com/group/mysite-200-group/discussion/cf848e21-c90e-4f2e-9d32-98acb4c3aa50
https://www.guernseycountydogshelter.com/group/mysite-200-group/discussion/dc1a5067-84c5-4799-b523-7e6ad6929633
https://www.guernseycountydogshelter.com/group/mysite-200-group/discussion/532ba6ce-3efe-4c19-98c2-5411b18b60e9
https://www.guernseycountydogshelter.com/group/mysite-200-group/discussion/3f05b370-6cec-487c-b8b3-7597ee8c15e3
https://www.8acre.com/group/mysite-200-group/discussion/f7e1e413-f908-4358-be21-40a592704241
https://www.8acre.com/group/mysite-200-group/discussion/3c9bd03d-51fb-4b3c-b22f-8b2986af4d68
https://www.8acre.com/group/mysite-200-group/discussion/27dfb223-9c38-4880-b8dd-7ae8116a8f74
https://www.8acre.com/group/mysite-200-group/discussion/51c4f8a5-6b5d-4a88-9181-b287aed51022
https://www.8acre.com/group/mysite-200-group/discussion/8da0d61d-67c4-41a3-84f5-7d9a55df0bac
https://www.jamaterrace.com/group/mysite-200-group/discussion/b2af643e-60f8-455c-8121-5ff66f26c6d8
https://www.guernseycountydogshelter.com/group/mysite-200-group/discussion/0e4f6599-9942-4477-8c72-229cf37a0efd
https://www.8acre.com/group/mysite-200-group/discussion/a6590864-399d-4bdc-a2f2-9dc9e48c1ab5
https://www.jamaterrace.com/group/mysite-200-group/discussion/5f8eb1ba-9248-4291-9fbe-464b045f5c9c
https://www.guernseycountydogshelter.com/group/mysite-200-group/discussion/514ba3f7-864e-4a10-bc0a-5fc92403d7cd
https://www.8acre.com/group/mysite-200-group/discussion/2c689616-5037-4a3d-a632-d0f118099b55
https://www.jamaterrace.com/group/mysite-200-group/discussion/7e416a40-9da6-4856-b6f2-54f1c5fc155a
https://www.guernseycountydogshelter.com/group/mysite-200-group/discussion/191617cd-aeb0-4169-9407-02dceac4241b
https://www.8acre.com/group/mysite-200-group/discussion/dbedb700-91d0-453e-9591-c323a60b374e
https://www.jamaterrace.com/group/mysite-200-group/discussion/064c38f4-9a70-4b79-aaf2-c415a90c65ff
https://www.guernseycountydogshelter.com/group/mysite-200-group/discussion/b0dfe760-cd59-4a26-863d-76a0e6502205
https://www.8acre.com/group/mysite-200-group/discussion/c657f258-6dc7-4521-b825-c818b2424593
https://www.guernseycountydogshelter.com/group/mysite-200-group/discussion/6f64cc55-876c-4253-b13d-1d39a0053c6c
https://www.8acre.com/group/mysite-200-group/discussion/653c96ec-3c15-4af3-99d5-9dcd4e1434e7
https://es.surveymonkey.com/r/MZWMR8V
https://es.surveymonkey.com/r/MZXT7V2
https://es.surveymonkey.com/r/MZ3686T
https://es.surveymonkey.com/r/MZHVFV8
https://es.surveymonkey.com/r/MZZCVN6
https://es.surveymonkey.com/r/X8BCH83
https://es.surveymonkey.com/r/X86TYXM
https://es.surveymonkey.com/r/5R97DZF
https://es.surveymonkey.com/r/5RC78NR
https://es.surveymonkey.com/r/XLYGRD3
https://es.surveymonkey.com/r/XLWPXT2"
uriv3dKQ,VitaRenderTexturePlayback.cs,noradninja,C#,Sunday 6th of August 2023 11:33:46 AM CDT,"using UnityEngine;
using UnityEngine.UI;
using UnityEngine.PSVita;

public class VitaRenderTexturePlayback : MonoBehaviour
{
    public string m_MoviePath;
    public RenderTexture m_RenderTexture;
    public GameObject m_Skin;
    public bool isPlaying;

    void Start()
    {
        PSVitaVideoPlayer.Init(m_RenderTexture);
        PSVitaVideoPlayer.Play(m_MoviePath, PSVitaVideoPlayer.Looping.Continuous, PSVitaVideoPlayer.Mode.RenderToTexture);
        OnMovieEvent(1);
        m_Skin.GetComponent<RawImage>().texture = m_RenderTexture;
    
    }
    void OnMovieEvent(int eventID)
{
    PSVitaVideoPlayer.MovieEvent movieEvent = (PSVitaVideoPlayer.MovieEvent)eventID;
    switch (movieEvent)
    {
        case PSVitaVideoPlayer.MovieEvent.PLAY:
            isPlaying = true;
            break;

        case PSVitaVideoPlayer.MovieEvent.STOP:
            isPlaying = false;
            break;
    }
}
    void Update()
    {
        PSVitaVideoPlayer.Update();       
    }
}"
tfyB3K8Y,Untitled,Yahya_CR,Python,Sunday 6th of August 2023 11:14:12 AM CDT,"import gspread
# THIS IS JUST ME TRYING OUT NEW MODULES NOTHING SERIOUS
gc = gspread.service_account(filename='/Users/user1/Desktop/Python/FirstBot/heroic-bliss-384601-e987b65e386e.json')

sh = gc.open_by_url(""https://docs.google.com/spreadsheets/d/1u3F4d0cTYZ78YKjSy5u7ikDf79oleLAoGrQ6RFNSLXA/edit#gid=3350765"")
worksheet = sh.worksheet(""[PT] Agents"")
cell = worksheet.find(""Riven_uxm"")
row = cell.row
print(cell.value)
print(row)
worksheet.update(f""F{row}"", [['5']])"
TpGSviZT,view basic,kura2yamato,PHP,Sunday 6th of August 2023 11:11:47 AM CDT,"<h1>Welcome</h1>
<!--url: {{url('myExcel/ex1')}}
<br/>Res: {{resource_path('excel')}}
-->
<hr/><ol><li>
<?php echo implode(""</li>\n<li>"", $files);?>
</li>
	<li>
		<a href=""{{url('myExcel/ex1')}}"">contoh 1</a>
	</li>
</ol>"
X9z4ZPVU,controller basic,kura2yamato,PHP,Sunday 6th of August 2023 11:10:59 AM CDT,"<?php 
namespace App\Http\Controllers;
 
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;

//excel only 
use PhpOffice\PhpSpreadsheet\IOFactory;

class ExcelController extends Controller
{
	function index(Request $request){
		//dd($request->all());
		$data = [];
		$aFile=[ ];
		foreach(glob(resource_path('excel'). DIRECTORY_SEPARATOR . ""*.*"") as $file){ 
			$aFile[]=$file;
		}
		$data['files'] = $aFile;
 
		return view('demo.index', $data);
	}
	
	function ex1(){
		$reader = IOFactory::createReader('Xlsx');
		//template 
/*
buat folder excel di resources
masukkan file demo.xlsx kedalamnya
*/
        $template=resource_path('excel'). DIRECTORY_SEPARATOR .'demo.xlsx';

		$spreadsheet = $reader->load( $template);
header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
header('Content-Disposition: attachment;filename=""001template.xlsx""');
header('Cache-Control: max-age=0');
// If you're serving to IE 9, then the following may be needed
header('Cache-Control: max-age=1');

// If you're serving to IE over SSL, then the following may be needed
header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
header('Pragma: public'); // HTTP/1.0

		$writer = IOFactory::createWriter($spreadsheet, 'Xlsx');
		$writer->save('php://output');

	}

}"
QGfCFgPC,routes,kura2yamato,PHP,Sunday 6th of August 2023 11:09:45 AM CDT,"<?php
Route::get('/myExcel', 'App\Http\Controllers\ExcelController@index');

Route::prefix('myExcel')->group(function () {
	Route::get('/ex1', 'App\Http\Controllers\ExcelController@ex1');
});"
HccKFXJZ,Untitled,redpro0701,Lua,Sunday 6th of August 2023 11:09:07 AM CDT,"local locations = gps.locate()
if #locations > 0 then
    print(""Available GPS locations:"")
    for i, location in ipairs(locations) do
        print(i .. "". "" .. location.label .. "" - X:"" .. location.x .. "" Y:"" .. location.y .. "" Z:"" .. location.z)
    end
else
    print(""No GPS locations found."")
end"
