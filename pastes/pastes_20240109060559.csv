id,title,username,language,date,content
JNwFXkXi,üéÅ List of all FREE Crypto Airdrops! üéÅ,VQ-Moe,GetText,Tuesday 9th of January 2024 12:03:33 AM CDT,"Looking for a list of all the current, free airdrops from all blockchains?
Check out NetDrop - https://netdrop.netlify.app/

NetDrop provides a list of all active airdrops, which is updated every minute so you can claim the newest airdrops as soon as they are available.
No more finding airdrops; the airdrops find you.

Visit NetDrop completely free now, no sign-up required.
https://netdrop.netlify.app/

816832"
PLifkQ5G,–ù–∞–ø–∏–ª—å–Ω–∏–∫ 27. –í —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –µ—ë —É—Ä–æ–≤–Ω—è –∏ –Ω–∞ –æ–¥–∏–Ω –Ω–∏–∂–µ,inject0r1945,C#,Tuesday 9th of January 2024 12:01:36 AM CDT,"private void ClickOnCheckButton(object sender, EventArgs eventArguments)
{
    if (IsEmptyPassportField())
    {
        int passportNumber = GetPassportNumberFromUserInput();
        return;
    }

    string passportFieldText = GetPassportFieldText();
    ProcessPassportFieldData(passportFieldText);
}

private bool IsEmptyPassportField()
{
    string passportFieldText = GetPassportFieldText();

    return string.IsNullOrEmpty(passportFieldText);
}

private string GetPassportFieldText()
{
    return _passportTextbox.Text.Trim();
}

private int GetPassportNumberFromUserInput()
{
    return (int)_messageBox.Show(""–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞"")
}

private void ProcessPassportFieldData(string passportText)
{
    passportText = GetTextWithoutSpaceCharacters(passportText);
    int minPassportTextLength = 10;

    if (passportText.Length < minPassportTextLength)
    {
        SetResultTextForUncorrectPassportInput();
        return;
    }

    bool hasGrantedAccessToRemoteVoting = HasGrantedAccessToRemoteVoting(passportText, out bool isExistsPassportInDatabase);

    if (!isExistsPassportInDatabase)
    {
        SetResultText(""–ü–∞—Å–ø–æ—Ä—Ç ¬´"" + passportText + ""¬ª –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –ù–ï –ù–ê–ô–î–ï–ù"";
        return;
    }

    if (hasGrantedAccessToRemoteVoting)
        SetResultText(""–ü–æ –ø–∞—Å–ø–æ—Ä—Ç—É ¬´"" + passportText + ""¬ª –¥–æ—Å—Ç—É–ø –∫ –±—é–ª–ª–µ—Ç–µ–Ω—é –Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –ü–†–ï–î–û–°–¢–ê–í–õ–ï–ù"");
    else
        SetResultText(""–ü–æ –ø–∞—Å–ø–æ—Ä—Ç—É ¬´"" + passportText + ""¬ª –¥–æ—Å—Ç—É–ø –∫ –±—é–ª–ª–µ—Ç–µ–Ω—é –Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –ù–ï –ü–†–ï–î–û–°–¢–ê–í–õ–Ø–õ–°–Ø"");
}

private string GetTextWithoutSpaceCharacters(string text)
{
    string spaceCharacter = "" "";
    return text.Replace(spaceCharacter, string.Empty);
}

private void SetResultTextForUncorrectPassportInput()
{
    SetResultText(""–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ—Ä–∏–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞"");
}

private void SetResultText(string resultText)
{
    _textResult.Text = resultText;
}

private bool HasGrantedAccessToRemoteVoting(string passportText, out bool isExistsPassportInDatabase)
{
    isExistsPassportInDatabase = false;
    bool hasGrantedAccessToRemoteVoting = false;

    object passportSha256HashObject = GetSha256HashObject(passportText);
    string commandText = string.Format(""select * from passports where num='{0}' limit 1;"", passportSha256HashObject);
    string databaseName = ""db.sqlite"";
    DataTable passportDataTable = GetDataTableFromDatabase(databaseName, commandText);

    if (passportDataTable.Rows.Count > 0)
    {
        isExistsPassportInDatabase = true;
        hasGrantedAccessToRemoteVoting = HasGrantedAccessToRemoteVoting(passportDataTable);
    }

    return hasGrantedAccessToRemoteVoting;
}

private object GetSha256HashObject(string text)
{
    return (object)_form1.ComputeSha256Hash(text);
}

private DataTable GetDataTableFromDatabase(string databaseName, string commandText)
{
    string connectionString = GetConnectionString(databaseName);
    int missingDatabaseErrorCode = 1;
    DataTable dataTable = new DataTable();

    try
    {
        SQLiteConnection connection = new SQLiteConnection(connectionString);
        connection.Open();
        SQLiteDataAdapter sqLiteDataAdapter = new SQLiteDataAdapter(new SQLiteCommand(commandText, connection));
        sqLiteDataAdapter.Fill(dataTable);
        connection.Close();
    }
    catch (SQLiteException exception)
    {
        if (exception.ErrorCode == missingDatabaseErrorCode)
            ShowMessage(""–§–∞–π–ª db.sqlite –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É –≤–º–µ—Å—Ç–µ —Å exe."");
    }

    return dataTable;
}

private string GetConnectionString(string databaseName)
{
    string executingAssembly = GetExecutingAssembly();
    return Path.GetDirectoryName(executingAssembly.Location) + ""\\"" + databaseName;
}

private object GetExecutingAssembly()
{
    return Assembly.GetExecutingAssembly();
}

private void ShowMessage(string message)
{
    _messageBox.Show(""–§–∞–π–ª db.sqlite –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É –≤–º–µ—Å—Ç–µ —Å exe."");
}

private bool HasGrantedAccessToRemoteVoting(DataTable passportDataTable)
{
    int votingGrantRow = 0;
    int votingGrantColumn = 1;

    return Convert.ToBoolean(dataTable.Rows[votingGrantRow].ItemArray[votingGrantColumn]);
}"
3Q94Pb1A,IMAGES-DOWNLOAD.py,Najeebsk,Python,Monday 8th of January 2024 11:59:49 PM CDT,"import os
import tkinter as tk
from tkinter import ttk
from tkinter import filedialog
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

class IndexOfScraperApp:
    def __init__(self, root):
        self.root = root
        self.root.title(""Najeeb Shah Khan Index Of Scraper Images and Download"")

        self.url_label = ttk.Label(root, text=""Enter Index Of URL:"")
        self.url_entry = ttk.Entry(root, width=100)
        self.scrape_button = ttk.Button(root, text=""Scrape Images"", command=self.scrape_images)
        self.save_button = ttk.Button(root, text=""Save Images"", command=self.save_images, state=tk.DISABLED)

        self.image_urls = []

        self.url_label.grid(row=0, column=0, pady=5)
        self.url_entry.grid(row=0, column=1, pady=5)
        self.scrape_button.grid(row=0, column=2, pady=5)
        self.save_button.grid(row=0, column=3, pady=5)

    def scrape_images(self):
        url = self.url_entry.get()
        if not url:
            return

        try:
            response = requests.get(url)
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            self.display_result(f""Error: {e}"")
            return

        soup = BeautifulSoup(response.content, 'html.parser')
        links = [a['href'] for a in soup.find_all('a', href=True) if a['href'].endswith(('.jpg', '.png'))]

        self.image_urls = [urljoin(url, link) for link in links]

        if self.image_urls:
            self.display_result(f""Found {len(self.image_urls)} images."")
            self.save_button.config(state=tk.NORMAL)
        else:
            self.display_result(""No images found in the directory."")
            self.save_button.config(state=tk.DISABLED)

    def save_images(self):
        if not self.image_urls:
            return

        directory = filedialog.askdirectory(title=""Select Directory to Save Images"")

        if directory:
            for i, img_url in enumerate(self.image_urls):
                try:
                    response = requests.get(img_url)
                    response.raise_for_status()
                except requests.exceptions.RequestException as e:
                    self.display_result(f""Error downloading image {i + 1}: {e}"")
                    continue

                _, ext = os.path.splitext(img_url)
                filename = f""image_{i + 1}{ext}""
                filepath = os.path.join(directory, filename)

                with open(filepath, 'wb') as f:
                    f.write(response.content)

            self.display_result(f""Images saved to {directory}."")

    def display_result(self, text):
        result_label = ttk.Label(self.root, text=text)
        result_label.grid(row=1, column=0, columnspan=4, pady=10)

if __name__ == ""__main__"":
    root = tk.Tk()
    app = IndexOfScraperApp(root)
    root.mainloop()
"
RUXjEUXU,turtle_fractal.py,Mangus875,Python,Monday 8th of January 2024 11:55:24 PM CDT,"def rewrite(axiom, rules, times=1):
    result = """";
    for i in range(times):
        for c in axiom:
            if c in rules:
                result += rules[c]
            else:
                result += c
        axiom = result
    return result

import turtle
t = turtle.Turtle()
t.speed(5)
t.width(3)
t.ht()
t.tracer(50)

def hilbertSize(i):
	return 2**i - 1

hilbIters = 5
lineSeg = (t.window_width()-50) / hilbertSize(hilbIters)
offset = hilbertSize(hilbIters)*lineSeg/2
t.pu()
t.goto(-offset, offset)
t.pd()

def hilbert(iteration):
	path = ""A""
	newPath = """"
	while iteration > 0:
		for c in path:
			if c == 'A':
				newPath += ""+BF-AFA-FB+""
			elif c == 'B':
				newPath += ""-AF+BFB+FA-""
			else:
				newPath += c
		path = newPath
		newPath = """"
		iteration -= 1
	return path

def cleanPath(path):
	print(f""\tInput:\n{path}\n"")
	newPath = """"
	for c in path:
		if c == 'F' or c == '+' or c == '-':
			newPath += c
	
	path = newPath
	newPath = """"
	print(f""\tRemoved variables:\n{path}\n"")
	for i in range(0, len(path)):
		c = path[i]
		print(f""{i} : {c}"")
		if c == 'F':
			newPath += c
		elif c == '+':
			if i+1 < len(path) and path[i+1] == '-':
				continue
			else:
				newPath += c
		elif c == '-':
			if i+1 < len(path) and path[i+1] == '+':
				continue
			else:
				newPath += c
				
	path = newPath
	
	if path[len(path)-1] == '-' or path[len(path)-1] == '+':
		path = path[0:len(path)-1]
	
	print(f""\tRemoved negated rotations:\n{path}\n"")
	return path
	newPath = """"
	for c in path:
		if c == 'F' or c == '+' or c == '-':
			newPath += c
	
	path = newPath
	newPath = """"
	for i in range(0, len(path)):
		c = path[i]
		if c == 'F':
			newPath += c
		elif c == '+':
			if i+1 < len(path) and path[i+1] == '-':
				i += 1
			else:
				newPath += c
		elif c == '-':
			if i+1 < len(path) and path[i+1] == '+':
				i += 1
			else:
				newPath += c
				
	path = newPath
	if path[len(path)-1] == '-' or path[len(path)-1] == '+':
		path = path[0,len(path)-2]
	
	return path

def turn(ang):
	t.seth(t.heading()+ang)

def drawPath(path):
	for c in path:
		if c == 'F':
			t.fd(lineSeg)
		elif c == '+':
			turn(-90)
		elif c == '-':
			turn(90)
	t.tracer(1)


path = cleanPath(hilbert(hilbIters))
drawPath(path)"
PvUaiaYE,WEB-SCRAPING-LINKS.py,Najeebsk,Python,Monday 8th of January 2024 11:53:22 PM CDT,"import tkinter as tk
from tkinter import messagebox, filedialog
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

class LinkScraperGUI:
    def __init__(self, master):
        self.master = master
        self.master.title(""Najeeb Shah Khan Web Links Scraper and save Text"")

        self.url_label = tk.Label(master, text=""Enter URL:"")
        self.url_label.pack()

        self.url_entry = tk.Entry(master, width=100)
        self.url_entry.pack()

        self.scrape_button = tk.Button(master, text=""Scrape Links"", command=self.scrape_links)
        self.scrape_button.pack()

    def scrape_links(self):
        url = self.url_entry.get()

        if not url:
            messagebox.showerror(""Error"", ""Please enter a valid URL."")
            return

        try:
            response = requests.get(url)
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            messagebox.showerror(""Error"", f""Error fetching URL: {e}"")
            return

        soup = BeautifulSoup(response.text, 'html.parser')

        # Extract all links from the webpage
        links = soup.find_all('a', href=True)

        if not links:
            messagebox.showinfo(""Info"", ""No links found on the given URL."")
            return

        # Ensure the links are complete URLs
        complete_links = [urljoin(url, link['href']) for link in links]

        # Prompt user to choose a file to save the links
        file_path = filedialog.asksaveasfilename(defaultextension="".txt"", filetypes=[(""Text files"", ""*.txt"")])

        if not file_path:
            return  # User canceled the save operation

        with open(file_path, 'w', encoding='utf-8') as file:
            # Write the complete links to the file
            for link in complete_links:
                file.write(link + '\n')

        messagebox.showinfo(""Success"", f""Complete URLs saved to {file_path}"")

if __name__ == ""__main__"":
    root = tk.Tk()
    app = LinkScraperGUI(root)
    root.mainloop()
"
hWrzQbMN,WEB-SCRAP-ALL-HTML-CODE.py,Najeebsk,Python,Monday 8th of January 2024 11:52:34 PM CDT,"import tkinter as tk
from tkinter import messagebox, filedialog
import requests
from bs4 import BeautifulSoup

class WebScraperGUI:
    def __init__(self, master):
        self.master = master
        self.master.title(""Najeeb Shah Khan HTML Code Web Scraper"")

        self.url_label = tk.Label(master, text=""Enter URL:"")
        self.url_label.pack()

        self.url_entry = tk.Entry(master, width=120)
        self.url_entry.pack()

        self.scrape_button = tk.Button(master, text=""Scrape Web Page"", command=self.scrape_web_page)
        self.scrape_button.pack()

    def scrape_web_page(self):
        url = self.url_entry.get()

        if not url:
            messagebox.showerror(""Error"", ""Please enter a valid URL."")
            return

        try:
            response = requests.get(url)
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            messagebox.showerror(""Error"", f""Error fetching URL: {e}"")
            return

        content = response.text

        # Prompt user to choose a file to save the content
        file_path = filedialog.asksaveasfilename(defaultextension="".txt"", filetypes=[(""Text files"", ""*.txt"")])

        if not file_path:
            return  # User canceled the save operation

        with open(file_path, 'w', encoding='utf-8') as file:
            # Write the complete content to the file
            file.write(content)

        messagebox.showinfo(""Success"", f""Web page content saved to {file_path}"")

if __name__ == ""__main__"":
    root = tk.Tk()
    app = WebScraperGUI(root)
    root.mainloop()
"
DDdD3KFi,INDEX-EXT-SCRAP.py,Najeebsk,Python,Monday 8th of January 2024 11:51:21 PM CDT,"import tkinter as tk
from tkinter import ttk
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

class IndexOfScraperApp:
    def __init__(self, root):
        self.root = root
        self.root.title(""Najeeb Shah Khan Index Of URL Scraper By Extension"")

        self.url_label = ttk.Label(root, text=""Enter Index Of URL:"")
        self.url_entry = ttk.Entry(root, width=50)
        self.extension_label = ttk.Label(root, text=""Enter File Extension:"")
        self.extension_entry = ttk.Entry(root, width=10)
        self.scrape_button = ttk.Button(root, text=""Scrape URLs"", command=self.scrape_urls)
        self.result_text = tk.Text(root, height=36, width=124, wrap=""none"", state=tk.DISABLED)

        self.url_label.grid(row=0, column=0, pady=5)
        self.url_entry.grid(row=0, column=1, pady=5)
        self.extension_label.grid(row=0, column=2, pady=5)
        self.extension_entry.grid(row=0, column=3, pady=5)
        self.scrape_button.grid(row=0, column=4, pady=5)
        self.result_text.grid(row=1, column=0, columnspan=5, pady=10)

    def scrape_urls(self):
        url = self.url_entry.get()
        extension = self.extension_entry.get()

        if not url or not extension:
            return

        try:
            response = requests.get(url)
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            self.display_result(f""Error: {e}"")
            return

        soup = BeautifulSoup(response.content, 'html.parser')
        links = [a['href'] for a in soup.find_all('a', href=True) if a['href'].endswith(f'.{extension}')]

        if links:
            absolute_links = [urljoin(url, link) for link in links]
            result_text = ""\n"".join(absolute_links)
            self.display_result(result_text)
        else:
            self.display_result(f""No {extension} links found in the directory."")

    def display_result(self, text):
        self.result_text.config(state=tk.NORMAL)
        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, text)
        self.result_text.config(state=tk.DISABLED)

if __name__ == ""__main__"":
    root = tk.Tk()
    app = IndexOfScraperApp(root)
    root.mainloop()
"
5y1BmusF,ALL-EXT-INDEX-SCRAPER.py,Najeebsk,Python,Monday 8th of January 2024 11:50:01 PM CDT,"import tkinter as tk
from tkinter import ttk
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

class IndexOfScraperApp:
    def __init__(self, root):
        self.root = root
        self.root.title(""Najeeb Shah Khan All Index Of URL Scraper"")

        self.url_label = ttk.Label(root, text=""Enter Index Of URL:"")
        self.url_entry = ttk.Entry(root, width=50)
        self.scrape_button = ttk.Button(root, text=""Scrape URLs"", command=self.scrape_urls)
        self.result_text = tk.Text(root, height=36, width=124, wrap=""none"", state=tk.DISABLED)
        
        self.url_label.grid(row=0, column=0, pady=5)
        self.url_entry.grid(row=0, column=1, pady=5)
        self.scrape_button.grid(row=0, column=2, pady=5)
        self.result_text.grid(row=1, column=0, columnspan=3, pady=10)
        
    def scrape_urls(self):
        url = self.url_entry.get()
        if not url:
            return

        try:
            response = requests.get(url)
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            self.display_result(f""Error: {e}"")
            return

        soup = BeautifulSoup(response.content, 'html.parser')
        links = [a['href'] for a in soup.find_all('a', href=True)]

        if links:
            absolute_links = [urljoin(url, link) for link in links]
            result_text = ""\n"".join(absolute_links)
            self.display_result(result_text)
        else:
            self.display_result(""No links found in the directory."")

    def display_result(self, text):
        self.result_text.config(state=tk.NORMAL)
        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, text)
        self.result_text.config(state=tk.DISABLED)

if __name__ == ""__main__"":
    root = tk.Tk()
    app = IndexOfScraperApp(root)
    root.mainloop()
"
ku0qsxfW,Elevator Call Control to Floor 0,MigasRocha,Lua,Monday 8th of January 2024 11:46:03 PM CDT,"while true do
rednet.open(""right"")
 
local id, message = rednet.receive()
 
if id == 30 then
    redstone.setOutput(""front"", true)
    sleep(1)
    redstone.setOutput(""front"", false)
    print(""chegou"")
else
    sleep(0.1)
end
 
end"
6q1mAVdD,Floor -1,MigasRocha,Lua,Monday 8th of January 2024 11:28:27 PM CDT,"

                    777777
                  770000887
                 7000000887
                 7000000887
                 7000000887
                  777000887
             777    7000887
            70007   7000887
             777    7000887
                  77700088777
                 7000000000887
                 7000000000887
                  77777777777"
RjgJjvEF,Floor 0 (imagem),MigasRocha,Lua,Monday 8th of January 2024 11:27:40 PM CDT,"                  77777777777
                 7700000000077
                770000000000077
               77000000000000077
               77000088777000077
               77000088777000077
               77000088777000077
               77000088777000077
               77000088777000077
               77000088777000077
               77000088777000077
               77000088fff000077
               77000000000000077
                770000000000077
                 7700000000077
                  77777777777"
JZc13yqq,ü§ë G2A.com Refund Exploit Jan 2024 ü§ë,G2ARefundExploit,GetText,Monday 8th of January 2024 11:26:32 PM CDT,"G2A.com refund exploit updated guide 
Any item for free on G2A.com such as Amazon, Steam, and any other gift cards.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_795644.pdf
 
Working as of
09 January 2024"
1gd87fZy,Elevador Floor Screen,MigasRocha,Lua,Monday 8th of January 2024 11:26:30 PM CDT,"while true do

rednet.open(""bottom"")

mon = peripheral.wrap(""front"")

term.redirect(mon)

function elevatormatrix()

mon.setBackgroundColor(colors.black)

mon.clear()

matrixfloor = paintutils.loadImage(""imagem"")

paintutils.drawImage(matrixfloor, -2, 1)

end

function elevatorinscribers()

mon.setBackgroundColor(colors.black)

mon.clear()

inscriber = paintutils.loadImage(""floor"")

paintutils.drawImage(inscriber, -3, 1)

end

id, message = rednet.receive()

if id == 26 then
    elevatormatrix()
elseif
    id == 24 then
    elevatorinscribers()
else
    sleep(1) 
end
 
 end


"
XkXv8jbh,Protracted_Parenthesization,Sigma1084,C++,Monday 8th of January 2024 09:43:08 PM CDT,"#include <bits/stdc++.h>
using namespace std;
using ll = long long;

void solve() {
    int n;
    cin >> n;

    string s;
    cin >> s;

    vector<ll> dpL(n), dpR(n);

    ll cur = 0;
    int c = 0;  // Counter
    for (int i = 0; i < n; ++i) {
        if (s[i] == '(') {
            // Number of closed before
            cur += c;
        } else {
            ++c;
        }
        dpL[i] = cur;
    }

    cur = 0;
    c = 0;
    for (int i = n - 1; i >= 0; --i) {
        if (s[i] == ')') {
            // Number of open after
            cur += c;
        } else {
            ++c;
        }
        dpR[i] = cur;
    }

    ll ans = 0;
    c = 0;
    for (int i = 0; i < n; ++i) {
        c += s[i] == '(' ? 1 : -1;
        if (c < 0) {
            ans = max(ans, 1 + (i ? dpL[i-1] : 0) 
                + (i+1 < n ? dpR[i+1] : 0));
        }
    }

    c = 0;
    for (int i = n - 1; i >= 0; --i) {
        c += s[i] == ')' ? 1 : -1;
        if (c < 0) {
            ans = max(ans, 1 + (i ? dpL[i-1] : 0)
                + (i+1 < n ? dpR[i+1] : 0));
        }
    }

    cout << ans;
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);

    int t = 1;
    std::cin >> t;

    for (int i = 1; i <= t; ++i) {
        solve();
        std::cout << '\n';
    }

    return 0;
}
"
THYdL0xy,GuessingGame.JS,c-mcbride,JavaScript,Monday 8th of January 2024 08:28:46 PM CDT,"//Intialize readline interface
const readline = require(""readline"");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  terminal: false
});

maxNumber = 0; //Holds the largest value to be included in the random number space
minNumber = 0; //Holds the smallest value to be included
secretNumber = 0; //Number to be guessed

//Uses nested readline objects to prompt the user for the number of tries, max, and min value for the game.
function askRange(){
    //Allow the user to enter the number of tries they want
    rl.question(""How many tries?: "", (answer) => {
        let turns = Number(answer);

        //What is the largest number that the answer can be?
        rl.question(""Enter a max number:  "", (answer) => {
                maxNumber = Number(answer);
            //What is the smallest?
            rl.question(""Enter a minimum value: "", (answer) => {
                minNumber = Number(answer);
                secretNumber = getRandomInt(minNumber, maxNumber); //Call the RNG
                askGuess(turns) //Invoke the askGuess game below
            });
        });
    });
}

//Make the secret number random with random number implementation from MDN docs
 function getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min) + min); // The maximum is exclusive and the minimum is inclusive
  };


//Check to see if an a number inputed to the function is to high or too low.
function checkGuess(guess){
    if(guess > secretNumber){
        console.log(""To high"");
        return false;
    }
    else if(guess < secretNumber){
        console.log(""Too low"");
        return false;
    }
    else{
        console.log(""Correct!"");
        return true;
    }
}

//Use readline module to ask the user to enter their guess
//@param - number of turns the user wants to game to go
function askGuess(turns){
    if(turns > 0){
        //Enter the guess, if they are right, they win. If not, the function is called again.
        rl.question(""Please enter your guess "", guess => {
            guess = Number(guess);
            if(checkGuess(guess)){
                console.log(""You win!"");
                rl.close();
            }
            else{
                turns--; //Decrease turns after each wrong
                askGuess(turns);
            }
        });
    }
    else{
        console.log(""Out of turns"")  //Fail state is entered and the program exits
        rl.close();
    }
}

askRange();"
RL73gpZu,Quarry,TrademarkThis,Lua,Monday 8th of January 2024 08:27:50 PM CDT,"--Version 5 (WIP)

local nLimit = 1
local badItems = {}
badItems[1] = ""minecraft:cobblestone""
badItems[2] = ""minecraft:andesite""
badItems[3] = ""minecraft:dirt""
badItems[4] = ""minecraft:diorite""
badItems[5] = ""minecraft:granite""
badItems[6] = ""minecraft:gravel""
badItems[7] = ""extractinator:silt""
badItems[8] = ""minecraft:cobbled_deepslate""
badItems[9] = ""minecraft:sand""
badItems[10] = ""minecraft:sandstone""
badItems[11] = ""minecraft:tuff""
badItems[12] = ""minecraft:calcite""
badItems[13] = ""minecraft:dripstone_block""
badItems[14] = ""minecraft:pointed_dripstone""
badItems[15] = ""minecraft:mossy_cobblestone""
badItems[16] = ""minecraft:flint""

function localRefuel()
	if turtle.getFuelLevel() ~= ""unlimited"" then
		for n=1,16 do
			local nCount = turtle.getItemCount(n)
			if nLimit > 0 and nCount > 0 and turtle.getFuelLevel() < turtle.getFuelLimit() then
				local nBurn = math.min( nLimit, nCount )
				turtle.select( n )
				if turtle.refuel( nBurn ) then
					local nNewCount = turtle.getItemCount(n)
					nLimit = nLimit - (nCount - nNewCount)
				end
			end
		end
	end
	turtle.select(1)
end

function fakeInventory()
	fakeSlots = {}
	for i = 1,16 do
		if turtle.getItemDetail(i) ~= nil then
			fakeSlots[i] = turtle.getItemDetail(i).name
		end
	end
	return fakeSlots
end

function sortInventory()
	for i = 1,16 do
		fakeSlots = fakeInventory()
		if turtle.getItemDetail(i) ~= nil then
			containsItem = 0
			for j = 1,16 do
				if fakeSlots[j] == turtle.getItemDetail(i).name then
					if containsItem == 0 then
						if turtle.getItemCount(j) < 64 then
							containsItem = j
						end
					end
				end
			end
			if containsItem ~= 0 then
				if containsItem ~= i then
					if turtle.getItemCount(i) < 64 then
						turtle.select(i)
						turtle.transferTo(containsItem)
					end
				end
			end
		end
	end
	for i = -16,-1 do
		emptySlot = 0
		for j = 1,16 do
			if turtle.getItemDetail(j) == nil then
				emptySlot = j
				break
			end
		end
		if emptySlot ~= 0 then
			if emptySlot < i*-1 then
				if turtle.getItemDetail(i*-1) ~= nil then
					turtle.select(i*-1)
					turtle.transferTo(emptySlot)
				end
			end
		end
	end
	turtle.select(1)
end	

function checkInventory()
	for i = 1,16 do
		for j = 1,16 do
			if turtle.getItemDetail(i) ~= nil then
				if turtle.getItemDetail(i).name == badItems[j] then
					turtle.select(i)
					turtle.drop(64)
				end
			end
		end
	end
	sortInventory()
end

function clearScreen()
    term.clear()
    term.setCursorPos(1,1)
end
 
function setup()
    posX = 0
    posY = 0
    posZ = 0
    rotation = 0
    layerType = 0
    clearScreen()
    io.write(""Quarry or bore? "")
    mineType = io.read()
    clearScreen()
    io.write(""Rows: "")
    rows = io.read()
    io.write(""Columns: "")
    columns = io.read()
    clearScreen()
    if mineType == ""quarry"" then
        io.write(""Current 'y' level: "")
        iniY = io.read()
        iniY = tonumber (iniY)
        clearScreen()
    end
    start()
end
 
function info()
    clearScreen()
    print(""Creating a "" .. rows .. ""x"" .. columns .. "" "" .. mineType)
    print(""Total distance: "" .. posX + posY + posZ)
    print(""X: "" .. posX)
    print(""Y: "" .. posY)
    print(""Z: "" .. posZ)
    print(""Rotation: "" .. rotation)
    print(""Layer Type: "" .. layerType)
    print(""Fuel level: "" .. turtle.getFuelLevel())
end
 
function orientate()
    if rotation == 0 then
        turtle.turnLeft()
        rotation = 3
        info()
    elseif rotation == 1 then
        turtle.turnLeft()
        rotation = 0
        info()
        turtle.turnLeft()
        rotation = 3
        info()
    elseif rotation == 2 then
        turtle.turnRight()
        rotation = 3
        info()
    end
end
 
function recover()
    orientate()
    stepY = posY
    stepX = posX
    stepZ = posZ
    for posY = stepY - 1, 0, -1 do
        turtle.up()
        info()
    end
    for posX = stepX - 1, 0, -1 do
        turtle.forward()
        info()
    end
    turtle.turnLeft()
    for posZ = stepZ - 1, 0, -1 do
        turtle.forward()
        info()
    end
end
 
function digStraight()
    turtle.digDown()
    turtle.dig()
    turtle.dig()
    turtle.forward() 
    if rotation == 0 then
        posZ = posZ + 1
    elseif rotation == 1 then
        posX = posX + 1
    elseif rotation == 2 then
        posZ = posZ - 1
    elseif rotation == 3 then
        posX = posX - 1
    end
    turtle.digUp()
	sortInventory()
    info()
end
 
function nextRow()
    if layerType == 0 then
        if rotation == 0 then
            turtle.turnRight()
            rotation = 1
            info()
            digStraight()
            turtle.turnRight()
            rotation = 2
            info()
        elseif rotation == 2 then
            turtle.turnLeft()
            rotation = 1
            info()
            digStraight()
            turtle.turnLeft()
            rotation = 0
            info()
        end
    elseif layerType == 1 then
        if rotation == 0 then
            turtle.turnLeft()
            rotation = 3
            info()
            digStraight()
            turtle.turnLeft()
            rotation = 2
            info()
        elseif rotation == 2 then
            turtle.turnRight()
            rotation = 3
            info()
            digStraight()
            turtle.turnRight()
            rotation = 0
            info()
        end
    end
end
 
function nextLayer()
    turtle.turnRight()
    if rotation == 0 then
        rotation = 1
        info()
    elseif rotation == 2 then
        rotation = 3
        info()
    end
    turtle.turnRight()
    if rotation == 1 then
        rotation = 2
        info()
    elseif rotation == 3 then
        rotation = 0
        info()
    end
    turtle.down()
    posY = posY + 1
    info()
    turtle.digDown()
    turtle.down()
    posY = posY + 1
    info()
    turtle.digDown()
    turtle.down()
    posY = posY + 1
    info()
    if layerType == 0 then
        layerType = 1
    elseif layerType == 1 then
        layerType = 0
    end
end
 
function layerMove()
    for c = columns, 1, -1 do
        for r = rows, 2, -1 do
			if turtle.getFuelLevel() < 1 then
				localRefuel()
			end 
			digStraight()
        end
        if c > 1 then 
			checkInventory()
            nextRow()
        else
            turtle.digDown()
        end
    end
end
 
function quarry() 
    turtle.digDown()
    turtle.down()
    posY = posY + 1
    info()
    turtle.digDown()
    turtle.down()
    posY = posY + 1
    info()
    while posY < iniY - 2 do
        layerMove()
        nextLayer()
    end
    recover()
end

function bore()
    turtle.up()
    posY = posY + 1
    info()
    turtle.dig()
    turtle.forward()
    posZ = posZ + 1
    info()
    turtle.digUp()
    layerMove()
    recover()
end
 
function start()
    if mineType == ""quarry"" then
        quarry()
    elseif mineType == ""bore"" then 
        bore()
    else
        setup()
    end
end
 
setup()"
sjmvKfUU,Graph problem,Kealyz,C#,Monday 8th of January 2024 07:45:46 PM CDT,"public class Program
{
    static void Main()
    {
        Console.Write(""Enter the value of N: "");
        int N = int.Parse(Console.ReadLine());

        int steps = 0;
        int allSubsets = 0;
        for (int i = 1; i <= N; i++)
        {
            for (int stepSize = i; stepSize <= N - i; stepSize++)
            {
                if (i == 1 && stepSize == 1) stepSize++;
                if (i > 2 && (IsPrime(i - stepSize) || i - stepSize == 1)) continue;
                if (!IsPrime(stepSize)) continue;
                for (int j = i; j <= N; j += stepSize)
                {
                    Console.Write(j + "" - "");
                    steps++;
                }
                allSubsets++;
                Console.WriteLine();
            }
        }

        Console.WriteLine(""All subsets "" + allSubsets);
        Console.WriteLine(""Steps: "" + steps);
    }

    static bool IsPrime(int num)
    {
        if (num < 2)
        {
            return false;
        }


        int sqrt = (int)Math.Sqrt(num);
        for (int i = 2; i <= sqrt; i++)
        {
            if (num % i == 0)
            {
                return false;
            }
        }

        return true;
    }
}"
ZFQNqcGU,C#_2_name_output,Legiomax,C#,Monday 8th of January 2024 07:44:33 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace C_Ijun
{
    internal class Program
    {
        static void Main(string[] args)
        {
            char userSymbol;

            string userName;
            string stringByUserSymbol;
            string stringByUserName;

            Console.Write(""–í—ã–≤–æ–¥ –∏–º–µ–Ω–∏.\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è: "");
            userName = Console.ReadLine();

            Console.Write(""–í–≤–µ–¥–∏—Ç–µ 1 —Å–∏–º–≤–æ–ª: "");
            userSymbol = Convert.ToChar(Console.ReadLine());

            stringByUserName = $""{userSymbol}{userName}{userSymbol}"";
            stringByUserSymbol = Convert.ToString(userSymbol);

            for (int i = 0; i < stringByUserName.Length - 1; i++)
            {
                stringByUserSymbol += userSymbol;
            }

            Console.Write($""{stringByUserSymbol}\n{stringByUserName}\n{stringByUserSymbol}"");
            Console.ReadLine();
        }
    }
}
"
e75bs9R8,cyber alliance css draft 22,Anonx0,CSS,Monday 8th of January 2024 07:43:56 PM CDT,":root {
  --blood: #ef5956;
  --crimson: #d33131;
  --light: #ffffff;
}

html {
  font: 16px/1 system-ui;
  height: 100%;
}

body {
  margin: 0;
  padding: 5rem;
}

header {}

h1 {
  color: var(--crimson);
  font-size: 5rem;
  font-weight: 1000;
  margin: 0 0 2rem;
}

abbr {
  display: inline-block;
  text-decoration: none;
}

p {
  line-height: 1.5;
  margin: 0 0 1rem;
}

span {
  display: inline-block;
}

time {
  display: inline-block;
}

hr {
  background: var(--crimson);
  border: 0;
  height: .2rem;
  margin: 0 0 1rem;
}

main {}

section {}

h2 {
  color: var(--crimson);
  font-size: 2rem;
  font-weight: 1000;
  margin: 0 0 1rem;
}

details {
  border: .2rem solid var(--crimson);
}

summary {
  background: var(--blood);
  color: var(--light);
  cursor: pointer;
  list-style: none;
  padding: 1rem;
}

details[open] summary {
  background: var(--crimson);
}

.detailsBox {
  padding: 1rem;
}

nav {}

ol {
  margin: 0;
  padding-left: 1rem;
}

li {}

li::marker {
  line-height: 1.5;
}

a {
  color: var(--crimson);
  display: inline-block;
  line-height: 1.5;
  text-decoration-thickness: .2rem;
}

a:hover {
  text-decoration: none;
}

footer {}

@media (min-width: 1000px) {
  html {
    background: var(--blood);
    display: grid;
    justify-content: center;
  }

  body {
    background: var(--light);
    border-left: .2rem solid var(--crimson);
    border-right: .2rem solid var(--crimson);
    box-sizing: border-box;
    width: 1000px;
  }

  header {}

  h1 {}

  abbr {}

  p {}

  span {}

  time {}

  hr {}

  main {}

  section {}

  h2 {}

  details {}

  summary {}

  details[open] summary {}

  .detailsBox {}

  nav {}

  ol {}

  li {}

  a {}

  a:hover {}

  footer {}
}"
6CVt6K1X,cyber alliance css draft 21,Anonx0,CSS,Monday 8th of January 2024 07:43:21 PM CDT,":root {
  --blood: #ef5956;
  --crimson: #d33131;
  --light: #ffffff;
}

html {
  font: 16px/1 system-ui;
  height: 100%;
}

body {
  margin: 0;
  padding: 5rem;
}

header {}

h1 {
  color: var(--crimson);
  font-size: 5rem;
  font-weight: 1000;
  margin: 0 0 2rem;
}

abbr {
  display: inline-block;
  text-decoration: none;
}

p {
  line-height: 1.5;
  margin: 0 0 1rem;
}

span {
  display: inline-block;
}

time {
  display: inline-block;
}

hr {
  background: var(--crimson);
  border: 0;
  height: .2rem;
  margin: 0 0 1rem;
}

main {}

section {}

h2 {
  color: var(--crimson);
  font-size: 2rem;
  font-weight: 1000;
  margin: 0 0 1rem;
}

details {
  border: .2rem solid var(--crimson);
}

summary {
  background: var(--blood);
  color: var(--light);
  cursor: pointer;
  list-style: none;
  padding: 1rem;
}

details[open] summary {
  background: var(--crimson);
}

.detailsBox {
  padding: 1rem;
}

nav {}

ol {
  margin: 0;
  padding-left: 1rem;
}

li {}

a {
  color: var(--crimson);
  line-height: 1.5;
  text-decoration-thickness: .2rem;
}

a:hover {
  text-decoration: none;
}

footer {}

@media (min-width: 1000px) {
  html {
    background: var(--blood);
    display: grid;
    justify-content: center;
  }

  body {
    background: var(--light);
    border-left: .2rem solid var(--crimson);
    border-right: .2rem solid var(--crimson);
    box-sizing: border-box;
    width: 1000px;
  }

  header {}

  h1 {}

  abbr {}

  p {}

  span {}

  time {}

  hr {}

  main {}

  section {}

  h2 {}

  details {}

  summary {}

  details[open] summary {}

  .detailsBox {}

  nav {}

  ol {}

  li {}

  a {}

  a:hover {}

  footer {}
}"
2GGaGYy1,cyber alliance draft 13,Anonx0,HTML 5,Monday 8th of January 2024 07:40:06 PM CDT,"<!doctype html>
<html lang=""es"">
  <head>
    <meta charset=""utf-8"">
    <link href=""main.css"" rel=""stylesheet"">
    <title></title>
  </head>
  <body>
    <header>
      <h1>
        <abbr lang=""en"" title=""HyperText Markup Language"">HTML</abbr>
      </h1>
      <p>Est√°ndar bifurcado por <span lang=""en"">Cyber Alliance</span>. √öltima revisi√≥n: <time datetime=""1704067200"">1 de enero de 2024</time>.</p>
    </header>
    <hr>
    <main>
      <section data-ref=""alpha-0"">
        <h2>Sumario</h2>
        <details>
          <summary>Cap√≠tulos</summary>
          <div class=""detailsBox"">
            <nav>
              <ol start=""2"">
                <li>
                  <a href="""">Puesta en escena</a>
                </li>
              </ol>
            </nav>
          </div>
        </details>
      </section>
    </main>
    <footer></footer>
  </body>
</html>"
4zYePnMh,Sort Inventory,TrademarkThis,Lua,Monday 8th of January 2024 06:38:37 PM CDT,"function fakeInventory()
	fakeSlots = {}
	for i = 1,16 do
		if turtle.getItemDetail(i) ~= nil then
			fakeSlots[i] = turtle.getItemDetail(i).name
		end
	end
	return fakeSlots
end

function sortInventory()
	for i = 1,16 do
		fakeSlots = fakeInventory()
		if turtle.getItemDetail(i) ~= nil then
			containsItem = 0
			for j = 1,16 do
				if fakeSlots[j] == turtle.getItemDetail(i).name then
					if containsItem == 0 then
						if turtle.getItemCount(j) < 64 then
							containsItem = j
						end
					end
				end
			end
			if containsItem ~= 0 then
				if containsItem ~= i then
					if turtle.getItemCount(i) < 64 then
						turtle.select(i)
						turtle.transferTo(containsItem)
					end
				end
			end
		end
	end
	for i = -16,-1 do
		emptySlot = 0
		for j = 1,16 do
			if turtle.getItemDetail(j) == nil then
				emptySlot = j
				break
			end
		end
		if emptySlot ~= 0 then
			if emptySlot < i*-1 then
				if turtle.getItemDetail(i*-1) ~= nil then
					turtle.select(i*-1)
					turtle.transferTo(emptySlot)
				end
			end
		end
	end
	turtle.select(1)
end

sortInventory()
			"
Rj0hpF0G,Shepard Fairey Obama poster look,marcusa3000,Lua,Monday 8th of January 2024 06:38:04 PM CDT,"{
	Tools = ordered() {
		FastNoise1_6 = FastNoise {
			CtrlWZoom = false,
			NameSet = true,
			Inputs = {
				GlobalOut = Input { Value = 118, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 1080, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				Detail = Input { Value = 0, },
				Brightness = Input { Value = 1, },
				Type = Input { Value = 1, },
				Color1Alpha = Input { Value = 1, },
				Gradient = Input {
					Value = Gradient {
						Colors = {
							[0] = { 0.00392156885936856, 0.0392156876623631, 0.294117659330368, 1 },
							[0.3333] = { 0.8549019694328, 0.1254902034998, 0.1294117718935, 1 },
							[0.6666] = { 0.3333333432674, 0.6000000238419, 0.6509804129601, 1 },
							[1] = { 0.996078431606293, 0.980392158031464, 0.694117665290833, 1 }
						}
					},
				},
				Offset = Input { Value = 0.5, },
				NoiseBrightnessMap = Input {
					SourceOp = ""Bitmap1_12"",
					Source = ""Mask"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 605, 2491.5 } },
		},
		Bitmap1_12 = BitmapMask {
			Inputs = {
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				MaskWidth = Input { Value = 1080, },
				MaskHeight = Input { Value = 1080, },
				PixelAspect = Input { Value = { 1, 1 }, },
				UseFrameFormatSettings = Input { Value = 1, },
				ClippingMode = Input { Value = FuID { ""None"" }, },
				Image = Input {
					SourceOp = ""Mrg_Color_1"",
					Source = ""Output"",
				},
				Channel = Input { Value = FuID { ""Luminance"" }, },
			},
			ViewInfo = OperatorInfo { Pos = { 495, 2491.5 } },
		},
		Posterize1_1 = MacroOperator {
			CustomData = {
				Path = {
					Map = {
						[""Setting:""] = ""/Applications/DaVinci Resolve Studio.app/Contents/Resources/Fusion/Templates/Templates.drfx/Fusion/Looks/""
					}
				}
			},
			Inputs = ordered() {
				MainInput1 = InstanceInput {
					SourceOp = ""Blur_Smoothness_5"",
					Source = ""Input"",
				},
				Input1 = InstanceInput {
					SourceOp = ""Blur_Smoothness_5"",
					Source = ""XBlurSize"",
					Name = ""Smoothness"",
					Default = 15,
				},
				Input2 = InstanceInput {
					SourceOp = ""Mrg_Color_1"",
					Source = ""Blend"",
					Name = ""Color Mix"",
					Default = 1,
				},
				Input3 = InstanceInput {
					SourceOp = ""CT_Posterize_5"",
					Source = ""NumberIn1"",
					Default = 5,
				}
			},
			Outputs = {
				MainOutput1 = InstanceOutput {
					SourceOp = ""Mrg_Color_1"",
					Source = ""Output"",
				}
			},
			ViewInfo = GroupInfo { Pos = { 385, 2491.5 } },
			Tools = ordered() {
				Blur_Smoothness_5 = Blur {
					CtrlWZoom = false,
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Filter = Input { Value = FuID { ""Gaussian"" }, },
						XBlurSize = Input { Value = 0, },
						Input = Input {
							SourceOp = ""BrightnessContrast1_24"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -83, 8.75756 } },
				},
				Mrg_Color_1 = Merge {
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						Background = Input {
							SourceOp = ""CT_Posterize_5"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""Blur_Smoothness_5"",
							Source = ""Output"",
						},
						ApplyMode = Input { Value = FuID { ""Color"" }, },
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 82, 74.7576 } },
				},
				CT_Posterize_5 = Custom {
					CtrlWZoom = false,
					CtrlWShown = false,
					NameSet = true,
					Inputs = {
						NumberIn1 = Input { Value = 4, },
						NumberIn2 = Input { Value = 0.125, },
						LUTIn1 = Input {
							SourceOp = ""CT_PosterizeLUTIn1_5"",
							Source = ""Value"",
						},
						LUTIn2 = Input {
							SourceOp = ""CT_PosterizeLUTIn2_5"",
							Source = ""Value"",
						},
						LUTIn3 = Input {
							SourceOp = ""CT_PosterizeLUTIn3_5"",
							Source = ""Value"",
						},
						LUTIn4 = Input {
							SourceOp = ""CT_PosterizeLUTIn4_5"",
							Source = ""Value"",
						},
						Setup1 = Input { Value = ""1/n1"", },
						RedExpression = Input { Value = ""(ceil(r1*n1)*s1 - s1) * (1/ (1-s1))"", },
						GreenExpression = Input { Value = ""(ceil(g1*n1)*s1 - s1) * (1/ (1-s1))"", },
						BlueExpression = Input { Value = ""(ceil(b1*n1)*s1 - s1) * (1/ (1-s1))"", },
						AlphaExpression = Input { Value = ""(ceil(a1*n1)*s1 - s1) * (1/ (1-s1))"", },
						NameforNumber1 = Input { Value = ""Steps"", },
						ShowNumber2 = Input { Value = 0, },
						ShowNumber3 = Input { Value = 0, },
						ShowNumber4 = Input { Value = 0, },
						ShowNumber5 = Input { Value = 0, },
						ShowNumber6 = Input { Value = 0, },
						ShowNumber7 = Input { Value = 0, },
						ShowNumber8 = Input { Value = 0, },
						ShowPoint1 = Input { Value = 0, },
						ShowPoint2 = Input { Value = 0, },
						ShowPoint3 = Input { Value = 0, },
						ShowPoint4 = Input { Value = 0, },
						ShowLUT1 = Input { Value = 0, },
						ShowLUT2 = Input { Value = 0, },
						ShowLUT3 = Input { Value = 0, },
						ShowLUT4 = Input { Value = 0, },
						Image1 = Input {
							SourceOp = ""Blur_Smoothness_5"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 82, 8.75756 } },
				},
				CT_PosterizeLUTIn1_5 = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 204, Green = 0, Blue = 0 },
					CtrlWZoom = false,
				},
				CT_PosterizeLUTIn2_5 = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 0, Green = 204, Blue = 0 },
					CtrlWZoom = false,
				},
				CT_PosterizeLUTIn3_5 = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 0, Green = 0, Blue = 204 },
					CtrlWZoom = false,
				},
				CT_PosterizeLUTIn4_5 = LUTBezier {
					KeyColorSplines = {
						[0] = {
							[0] = { 0, RH = { 0.333333333333333, 0.333333333333333 }, Flags = { Linear = true } },
							[1] = { 1, LH = { 0.666666666666667, 0.666666666666667 }, Flags = { Linear = true } }
						}
					},
					SplineColor = { Red = 204, Green = 204, Blue = 204 },
					CtrlWZoom = false,
				}
			},
		},
		BrightnessContrast1_24 = BrightnessContrast {
			Inputs = {
				ApplyMaskInverted = Input { Value = 1, },
				Saturation = Input { Value = 0, },
				Input = Input {
					SourceOp = ""Merge11_1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 275, 2491.5 } },
		},
		Merge11_1 = Merge {
			Inputs = {
				Blend = Input { Value = 0.125, },
				Background = Input {
					SourceOp = ""Replace_Me"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""Scale2_1"",
					Source = ""Output"",
				},
				Edges = Input { Value = 1, },
				FilterMethod = Input { Value = 0, },
				PerformDepthMerge = Input { Value = 0, },
			},
			ViewInfo = OperatorInfo { Pos = { 165, 2491.5 } },
		},
		Scale2_1 = Scale {
			Inputs = {
				XSize = Input { Value = 2, },
				HiQOnly = Input { Value = 0, },
				PixelAspect = Input { Value = { 1, 1 }, },
				FilterMethod = Input { Value = 0, },
				Input = Input {
					SourceOp = ""Background_17"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 165, 2458.5 } },
		},
		Background_17 = Background {
			NameSet = true,
			Inputs = {
				GlobalOut = Input { Value = 118, },
				Width = Input { Value = 2, },
				Height = Input { Value = 2, },
				Depth = Input { Value = 1, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				Type = Input { Value = FuID { ""Vertical"" }, },
				TopLeftRed = Input { Value = 1, },
				TopLeftGreen = Input { Value = 1, },
				TopLeftBlue = Input { Value = 1, },
				TopRightRed = Input { Value = 1, },
				TopRightGreen = Input { Value = 1, },
				TopRightBlue = Input { Value = 1, },
				BottomRightGreen = Input { Value = 0.5, },
				BottomRightBlue = Input { Value = 1, },
				Start = Input { Value = { 0.5, 0.5 }, },
				Gradient = Input {
					Value = Gradient {
						Colors = {
							[0] = { 1, 1, 1, 1 },
							[1] = { 0, 0, 0, 1 }
						}
					},
				},
			},
			ViewInfo = OperatorInfo { Pos = { 165, 2425.5 } },
		},
		Replace_Me = Background {
			NameSet = true,
			Inputs = {
				GlobalOut = Input { Value = 118, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 1080, },
				Depth = Input { Value = 1, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				Type = Input { Value = FuID { ""Corner"" }, },
				TopRightRed = Input { Value = 1, },
				TopRightGreen = Input { Value = 1, },
				TopRightBlue = Input { Value = 1, },
				BottomLeftRed = Input { Value = 1, },
				BottomLeftGreen = Input { Value = 0.5, },
				BottomRightGreen = Input { Value = 0.5, },
				BottomRightBlue = Input { Value = 1, },
				Start = Input { Value = { 0.5, 0.5 }, },
				Gradient = Input {
					Value = Gradient {
						Colors = {
							[0] = { 1, 1, 1, 1 },
							[1] = { 0, 0, 0, 1 }
						}
					},
				},
			},
			ViewInfo = OperatorInfo {
				Pos = { 55, 2491.5 },
				Flags = {
					ShowPic = true
				}
			},
		}
	}
}"
1VLN2zFu,playAudio.lua,PaxiTheAlchemist,Lua,Monday 8th of January 2024 06:33:37 PM CDT,"-- This computercraft lua script takes a dfpwm audio file and plays it across one or multiple computercraft speakers
-- This program was based off of a script found on https://tweaked.cc/ within the audio related sections of the website
-- Modified by PaxiTheAlchemist (paxi.zip @ Discord)

-- userchangeable variables
local strSongPath = ""/song.dfpwm""   -- string that points to the location and name of the dfpwm audio file. default is ""/song.dfpwm"" which looks for ""song.dfpwm"" in the home directory

-- initating
local modDfpwm     = require(""cc.audio.dfpwm"")      -- dfpwm module
local funDecoder   = modDfpwm.make_decoder()        -- decoder function
local tblSpeaker  = {peripheral.find(""speaker"")}    -- table of speaker peripheral(s) connected to computer

while true do
    -- breaking the song into chunks of 16 each and placing into buffer
    for audChunk in io.lines(strSongPath, 16 * 1024) do

        -- declaring variables
        local rawBuffer     = funDecoder(audChunk)  -- decoded audio chunk
        local intSpeaker    = 0                     -- speaker count for tracking when every speaker has no audio stream to play

        -- feeds the audio buffer into all the speakers. perSpeaker is a table of methods for a speaker peripheral
        for _, perSpeaker in pairs(tblSpeaker) do
            perSpeaker.playAudio(rawBuffer)
        end
        -- tracks when each speaker finishes playing the audio buffer before continuing
        while intSpeaker < #tblSpeaker do
            os.pullEvent(""speaker_audio_empty"")
            intSpeaker = intSpeaker + 1
        end
        
        -- sleeping to prevent timeout
        os.sleep(0.0001)
    end
end
"
64UWXWey,2024-01-08_stats.json,rdp_snitch,JSON,Monday 8th of January 2024 06:18:15 PM CDT,"{
  ""ip"": {
    ""206.189.157.63"": 6,
    ""194.165.17.21"": 33,
    ""147.78.47.51"": 3,
    ""20.229.152.211"": 6,
    ""87.251.75.145"": 12,
    ""112.46.117.178"": 6,
    ""109.69.7.157"": 12,
    ""178.128.47.150"": 12,
    ""198.235.24.92"": 9,
    ""87.251.75.64"": 3,
    ""216.73.161.11"": 3,
    ""194.165.16.78"": 12,
    ""14.232.77.71"": 111,
    ""164.92.91.193"": 12,
    ""74.105.22.131"": 30,
    ""185.170.144.3"": 6,
    ""205.210.31.199"": 9,
    ""191.101.41.35"": 3,
    ""167.248.133.53"": 3,
    ""36.91.222.100"": 3,
    ""216.73.160.116"": 3,
    ""62.204.41.199"": 12,
    ""80.66.76.92"": 6,
    ""103.184.47.83"": 3,
    ""123.58.207.127"": 3,
    ""58.218.204.183"": 9,
    ""112.30.192.66"": 3,
    ""196.190.117.7"": 3,
    ""205.210.31.200"": 9,
    ""167.94.146.52"": 3,
    ""113.160.91.206"": 3,
    ""198.235.24.122"": 9,
    ""185.170.144.113"": 9,
    ""194.165.16.10"": 6
  },
  ""asn"": {
    ""AS14061"": 30,
    ""AS48721"": 51,
    ""AS209588"": 3,
    ""AS8075"": 6,
    ""AS208091"": 21,
    ""AS9808"": 9,
    ""AS21183"": 12,
    ""AS396982"": 36,
    ""AS206092"": 9,
    ""AS45899"": 114,
    ""AS701"": 30,
    ""AS197414"": 15,
    ""AS398324"": 3,
    ""AS7713"": 3,
    ""AS59425"": 12,
    ""AS146817"": 3,
    ""AS135377"": 3,
    ""AS4134"": 9,
    ""AS24757"": 3,
    ""AS398705"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 30,
    ""Flyservers S.A."": 54,
    ""Microsoft Corporation"": 6,
    ""Xhost Internet Solutions LP"": 36,
    ""China Mobile"": 9,
    ""Vodafone Network"": 12,
    ""Google LLC"": 36,
    ""Ipxo Limited"": 9,
    ""VNPT"": 111,
    ""Verizon Business"": 30,
    ""Censys, Inc."": 6,
    ""PT Telekomunikasi Indonesia"": 3,
    ""Horizon LLC"": 12,
    ""Hubei Feixun Network Co., Ltd"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Chinanet"": 9,
    ""Ethiotelecom"": 3,
    ""VietNam Post and Telecom Corporation"": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 18,
    ""Flyservers S.A"": 54,
    ""Microsoft Azure Cloud (westeurope)"": 6,
    ""Xhost Internet Solutions"": 21,
    ""China Mobile Communications Corporation"": 9,
    ""Unknown"": 15,
    ""Digitalocean"": 12,
    ""Palo Alto Networks, Inc"": 36,
    ""Bandito Networks"": 6,
    ""Vietnam Posts and Telecommunications Group"": 114,
    ""Verizon Business"": 30,
    ""Xhostis"": 15,
    ""Ipxo"": 3,
    ""Censys, Inc."": 6,
    ""Telekomunikasi Indonesia"": 3,
    ""Horizon LLC"": 12,
    ""Hubei Feixun Network Co., Ltd"": 3,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Chinanet JS"": 9
  },
  ""regionName"": {
    ""Central Singapore"": 6,
    ""Kaunas"": 51,
    ""North Holland"": 45,
    ""Guangdong"": 9,
    ""Tirana"": 12,
    ""England"": 15,
    ""California"": 48,
    ""New York"": 9,
    ""Haiphong"": 111,
    ""New Jersey"": 30,
    ""Michigan"": 3,
    ""Jakarta"": 3,
    ""Moscow"": 12,
    ""Hubei"": 3,
    ""Jiangsu"": 9,
    ""Addis Ababa"": 3,
    ""Hesse"": 3,
    ""Hanoi"": 3
  },
  ""country"": {
    ""Singapore"": 6,
    ""Lithuania"": 51,
    ""The Netherlands"": 39,
    ""Netherlands"": 6,
    ""China"": 21,
    ""Albania"": 12,
    ""United Kingdom"": 15,
    ""United States"": 90,
    ""Vietnam"": 114,
    ""Indonesia"": 3,
    ""Russia"": 12,
    ""Ethiopia"": 3,
    ""Germany"": 3
  },
  ""account"": {
    ""hello"": 159,
    ""142.93.8.59"": 75,
    ""Administr"": 36,
    ""DPpAFqfOj"": 3,
    ""Fcvpvn"": 3,
    ""UxZscm"": 3,
    ""(empty)"": 21,
    ""Test"": 24,
    ""BavGLhPfe"": 3,
    ""gGZcli"": 3,
    ""dZuBAu"": 3,
    ""Domain"": 21,
    ""Administrator"": 3,
    ""DMlwxMugN"": 3,
    ""SgRURi"": 3,
    ""CaoWrz"": 3,
    ""CusfMCEFk"": 3,
    ""nJLZbz"": 3,
    ""FyTtyY"": 3
  },
  ""keyboard"": {
    ""Unknown"": 375
  },
  ""client_build"": {
    ""Unknown"": 375
  },
  ""client_name"": {
    ""Unknown"": 375
  },
  ""ip_type"": {
    ""hosting"": 63,
    ""Unknown"": 282,
    ""mobile"": 9,
    ""hosting & proxy"": 12,
    ""mobile & proxy"": 6,
    ""proxy"": 3
  }
}"
T9K3tWyK,2024-01-08_stats.json,rdp_snitch,JSON,Monday 8th of January 2024 06:16:16 PM CDT,"{
  ""ip"": {
    ""206.189.157.63"": 4,
    ""194.165.17.21"": 22,
    ""147.78.47.51"": 2,
    ""20.229.152.211"": 4,
    ""87.251.75.145"": 8,
    ""112.46.117.178"": 4,
    ""109.69.7.157"": 8,
    ""178.128.47.150"": 8,
    ""198.235.24.92"": 6,
    ""87.251.75.64"": 2,
    ""216.73.161.11"": 2,
    ""194.165.16.78"": 8,
    ""14.232.77.71"": 74,
    ""164.92.91.193"": 8,
    ""74.105.22.131"": 20,
    ""185.170.144.3"": 4,
    ""205.210.31.199"": 6,
    ""191.101.41.35"": 2,
    ""167.248.133.53"": 2,
    ""36.91.222.100"": 2,
    ""216.73.160.116"": 2,
    ""62.204.41.199"": 8,
    ""80.66.76.92"": 4,
    ""103.184.47.83"": 2,
    ""123.58.207.127"": 2,
    ""58.218.204.183"": 6,
    ""112.30.192.66"": 2,
    ""196.190.117.7"": 2,
    ""205.210.31.200"": 6,
    ""167.94.146.52"": 2,
    ""113.160.91.206"": 2,
    ""198.235.24.122"": 6,
    ""185.170.144.113"": 6,
    ""194.165.16.10"": 4
  },
  ""asn"": {
    ""AS14061"": 20,
    ""AS48721"": 34,
    ""AS209588"": 2,
    ""AS8075"": 4,
    ""AS208091"": 14,
    ""AS9808"": 6,
    ""AS21183"": 8,
    ""AS396982"": 24,
    ""AS206092"": 6,
    ""AS45899"": 76,
    ""AS701"": 20,
    ""AS197414"": 10,
    ""AS398324"": 2,
    ""AS7713"": 2,
    ""AS59425"": 8,
    ""AS146817"": 2,
    ""AS135377"": 2,
    ""AS4134"": 6,
    ""AS24757"": 2,
    ""AS398705"": 2
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 20,
    ""Flyservers S.A."": 36,
    ""Microsoft Corporation"": 4,
    ""Xhost Internet Solutions LP"": 24,
    ""China Mobile"": 6,
    ""Vodafone Network"": 8,
    ""Google LLC"": 24,
    ""Ipxo Limited"": 6,
    ""VNPT"": 74,
    ""Verizon Business"": 20,
    ""Censys, Inc."": 4,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Horizon LLC"": 8,
    ""Hubei Feixun Network Co., Ltd"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Chinanet"": 6,
    ""Ethiotelecom"": 2,
    ""VietNam Post and Telecom Corporation"": 2
  },
  ""org"": {
    ""DigitalOcean, LLC"": 12,
    ""Flyservers S.A"": 36,
    ""Microsoft Azure Cloud (westeurope)"": 4,
    ""Xhost Internet Solutions"": 14,
    ""China Mobile Communications Corporation"": 6,
    ""Unknown"": 10,
    ""Digitalocean"": 8,
    ""Palo Alto Networks, Inc"": 24,
    ""Bandito Networks"": 4,
    ""Vietnam Posts and Telecommunications Group"": 76,
    ""Verizon Business"": 20,
    ""Xhostis"": 10,
    ""Ipxo"": 2,
    ""Censys, Inc."": 4,
    ""Telekomunikasi Indonesia"": 2,
    ""Horizon LLC"": 8,
    ""Hubei Feixun Network Co., Ltd"": 2,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Chinanet JS"": 6
  },
  ""regionName"": {
    ""Central Singapore"": 4,
    ""Kaunas"": 34,
    ""North Holland"": 30,
    ""Guangdong"": 6,
    ""Tirana"": 8,
    ""England"": 10,
    ""California"": 32,
    ""New York"": 6,
    ""Haiphong"": 74,
    ""New Jersey"": 20,
    ""Michigan"": 2,
    ""Jakarta"": 2,
    ""Moscow"": 8,
    ""Hubei"": 2,
    ""Jiangsu"": 6,
    ""Addis Ababa"": 2,
    ""Hesse"": 2,
    ""Hanoi"": 2
  },
  ""country"": {
    ""Singapore"": 4,
    ""Lithuania"": 34,
    ""The Netherlands"": 26,
    ""Netherlands"": 4,
    ""China"": 14,
    ""Albania"": 8,
    ""United Kingdom"": 10,
    ""United States"": 60,
    ""Vietnam"": 76,
    ""Indonesia"": 2,
    ""Russia"": 8,
    ""Ethiopia"": 2,
    ""Germany"": 2
  },
  ""account"": {
    ""hello"": 106,
    ""142.93.8.59"": 50,
    ""Administr"": 24,
    ""DPpAFqfOj"": 2,
    ""Fcvpvn"": 2,
    ""UxZscm"": 2,
    ""(empty)"": 14,
    ""Test"": 16,
    ""BavGLhPfe"": 2,
    ""gGZcli"": 2,
    ""dZuBAu"": 2,
    ""Domain"": 14,
    ""Administrator"": 2,
    ""DMlwxMugN"": 2,
    ""SgRURi"": 2,
    ""CaoWrz"": 2,
    ""CusfMCEFk"": 2,
    ""nJLZbz"": 2,
    ""FyTtyY"": 2
  },
  ""keyboard"": {
    ""Unknown"": 250
  },
  ""client_build"": {
    ""Unknown"": 250
  },
  ""client_name"": {
    ""Unknown"": 250
  },
  ""ip_type"": {
    ""hosting"": 42,
    ""Unknown"": 188,
    ""mobile"": 6,
    ""hosting & proxy"": 8,
    ""mobile & proxy"": 4,
    ""proxy"": 2
  }
}"
gb03AXF4,2024-01-08_stats.json,rdp_snitch,JSON,Monday 8th of January 2024 06:15:09 PM CDT,"{
  ""ip"": {
    ""206.189.157.63"": 2,
    ""194.165.17.21"": 11,
    ""147.78.47.51"": 1,
    ""20.229.152.211"": 2,
    ""87.251.75.145"": 4,
    ""112.46.117.178"": 2,
    ""109.69.7.157"": 4,
    ""178.128.47.150"": 4,
    ""198.235.24.92"": 3,
    ""87.251.75.64"": 1,
    ""216.73.161.11"": 1,
    ""194.165.16.78"": 4,
    ""14.232.77.71"": 37,
    ""164.92.91.193"": 4,
    ""74.105.22.131"": 10,
    ""185.170.144.3"": 2,
    ""205.210.31.199"": 3,
    ""191.101.41.35"": 1,
    ""167.248.133.53"": 1,
    ""36.91.222.100"": 1,
    ""216.73.160.116"": 1,
    ""62.204.41.199"": 4,
    ""80.66.76.92"": 2,
    ""103.184.47.83"": 1,
    ""123.58.207.127"": 1,
    ""58.218.204.183"": 3,
    ""112.30.192.66"": 1,
    ""196.190.117.7"": 1,
    ""205.210.31.200"": 3,
    ""167.94.146.52"": 1,
    ""113.160.91.206"": 1,
    ""198.235.24.122"": 3,
    ""185.170.144.113"": 3,
    ""194.165.16.10"": 2
  },
  ""asn"": {
    ""AS14061"": 10,
    ""AS48721"": 17,
    ""AS209588"": 1,
    ""AS8075"": 2,
    ""AS208091"": 7,
    ""AS9808"": 3,
    ""AS21183"": 4,
    ""AS396982"": 12,
    ""AS206092"": 3,
    ""AS45899"": 38,
    ""AS701"": 10,
    ""AS197414"": 5,
    ""AS398324"": 1,
    ""AS7713"": 1,
    ""AS59425"": 4,
    ""AS146817"": 1,
    ""AS135377"": 1,
    ""AS4134"": 3,
    ""AS24757"": 1,
    ""AS398705"": 1
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 10,
    ""Flyservers S.A."": 18,
    ""Microsoft Corporation"": 2,
    ""Xhost Internet Solutions LP"": 12,
    ""China Mobile"": 3,
    ""Vodafone Network"": 4,
    ""Google LLC"": 12,
    ""Ipxo Limited"": 3,
    ""VNPT"": 37,
    ""Verizon Business"": 10,
    ""Censys, Inc."": 2,
    ""PT Telekomunikasi Indonesia"": 1,
    ""Horizon LLC"": 4,
    ""Hubei Feixun Network Co., Ltd"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Chinanet"": 3,
    ""Ethiotelecom"": 1,
    ""VietNam Post and Telecom Corporation"": 1
  },
  ""org"": {
    ""DigitalOcean, LLC"": 6,
    ""Flyservers S.A"": 18,
    ""Microsoft Azure Cloud (westeurope)"": 2,
    ""Xhost Internet Solutions"": 7,
    ""China Mobile Communications Corporation"": 3,
    ""Unknown"": 5,
    ""Digitalocean"": 4,
    ""Palo Alto Networks, Inc"": 12,
    ""Bandito Networks"": 2,
    ""Vietnam Posts and Telecommunications Group"": 38,
    ""Verizon Business"": 10,
    ""Xhostis"": 5,
    ""Ipxo"": 1,
    ""Censys, Inc."": 2,
    ""Telekomunikasi Indonesia"": 1,
    ""Horizon LLC"": 4,
    ""Hubei Feixun Network Co., Ltd"": 1,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Chinanet JS"": 3
  },
  ""regionName"": {
    ""Central Singapore"": 2,
    ""Kaunas"": 17,
    ""North Holland"": 15,
    ""Guangdong"": 3,
    ""Tirana"": 4,
    ""England"": 5,
    ""California"": 16,
    ""New York"": 3,
    ""Haiphong"": 37,
    ""New Jersey"": 10,
    ""Michigan"": 1,
    ""Jakarta"": 1,
    ""Moscow"": 4,
    ""Hubei"": 1,
    ""Jiangsu"": 3,
    ""Addis Ababa"": 1,
    ""Hesse"": 1,
    ""Hanoi"": 1
  },
  ""country"": {
    ""Singapore"": 2,
    ""Lithuania"": 17,
    ""The Netherlands"": 13,
    ""Netherlands"": 2,
    ""China"": 7,
    ""Albania"": 4,
    ""United Kingdom"": 5,
    ""United States"": 30,
    ""Vietnam"": 38,
    ""Indonesia"": 1,
    ""Russia"": 4,
    ""Ethiopia"": 1,
    ""Germany"": 1
  },
  ""account"": {
    ""hello"": 53,
    ""142.93.8.59"": 25,
    ""Administr"": 12,
    ""DPpAFqfOj"": 1,
    ""Fcvpvn"": 1,
    ""UxZscm"": 1,
    ""(empty)"": 7,
    ""Test"": 8,
    ""BavGLhPfe"": 1,
    ""gGZcli"": 1,
    ""dZuBAu"": 1,
    ""Domain"": 7,
    ""Administrator"": 1,
    ""DMlwxMugN"": 1,
    ""SgRURi"": 1,
    ""CaoWrz"": 1,
    ""CusfMCEFk"": 1,
    ""nJLZbz"": 1,
    ""FyTtyY"": 1
  },
  ""keyboard"": {
    ""Unknown"": 125
  },
  ""client_build"": {
    ""Unknown"": 125
  },
  ""client_name"": {
    ""Unknown"": 125
  },
  ""ip_type"": {
    ""hosting"": 21,
    ""Unknown"": 94,
    ""mobile"": 3,
    ""hosting & proxy"": 4,
    ""mobile & proxy"": 2,
    ""proxy"": 1
  }
}"
RTZreAiu,dfgdrhjdrj,gadungw71,PHP,Monday 8th of January 2024 05:50:00 PM CDT,"https://www.oksoberfest.com/group/oksoberfest-group/discussion/0aa697f1-deb0-4c57-8bd9-baff487a8369
https://www.oksoberfest.com/group/oksoberfest-group/discussion/18e3b097-2271-472f-8d18-f5a740c55a42
https://www.oksoberfest.com/group/oksoberfest-group/discussion/70e861c6-3b1f-4257-8d92-8f34348cfb76
https://www.oksoberfest.com/group/oksoberfest-group/discussion/8a8ec2e3-389c-4b1e-b6d2-92e24d3d9f27
https://www.oksoberfest.com/group/oksoberfest-group/discussion/97f1d703-0b35-439b-91b4-8f6b12dfbdf3
https://www.oksoberfest.com/group/oksoberfest-group/discussion/0c8a5d04-2857-4cc4-9076-aa2797243c38
https://www.hefenightclub.com/group/members-club/discussion/55651b25-0e2f-4d5b-9933-4235067efc55
https://www.hefenightclub.com/group/members-club/discussion/b88567b9-de06-4137-917c-140c647a148b
https://www.hefenightclub.com/group/members-club/discussion/e36b7de3-2e36-47b2-8b0e-2eec798b1ea0
https://www.hefenightclub.com/group/members-club/discussion/7d009eea-1151-413e-8d36-9c2c42bd4670
https://www.hefenightclub.com/group/members-club/discussion/2540d889-cfe0-4ab2-aa15-0388b9c76d37
https://www.hefenightclub.com/group/members-club/discussion/198fede7-cc8b-4737-b6be-fd1225287c3f
https://stackoverflow.com/collectives/php/beta/discussions/77780524/%e0%b8%94%e0%b8%b9%e0%b8%ab%e0%b8%99%e0%b8%b1%e0%b8%87-4-kings-ii-%e0%b8%ad%e0%b8%ad%e0%b8%99%e0%b9%84%e0%b8%a5%e0%b8%99%e0%b9%8c-%e0%b9%80%e0%b8%95%e0%b9%87%e0%b8%a1%e0%b9%80%e0%b8%a3%e0%b8%b7%e0%b9%88%e0%b8%ad%e0%b8%87%e0%b8%9f%e0%b8%a3%e0%b8%b5-2023-hd-%e0%b9%84%e0%b8%97%e0%b8%a2
https://stackoverflow.com/collectives/php/beta/discussions/77780664/%e0%b8%94%e0%b8%b9%e0%b8%ab%e0%b8%99%e0%b8%b1%e0%b8%87%e0%b8%9f%e0%b8%a3%e0%b8%b5-hd-4-kings-ii-%e0%b9%80%e0%b8%95%e0%b9%87%e0%b8%a1%e0%b9%80%e0%b8%a3%e0%b8%b7%e0%b9%88%e0%b8%ad%e0%b8%87-full-hd1080p%e0%b9%84%e0%b8%97%e0%b8%a2
https://stackoverflow.com/collectives/php/beta/discussions/77780867/%e0%b8%9e%e0%b8%b2%e0%b8%81%e0%b8%a2%e0%b9%8c%e0%b9%84%e0%b8%97%e0%b8%a2-4-kings-ii2023-full-hd-%e0%b9%80%e0%b8%a3%e0%b8%b7%e0%b9%88%e0%b8%ad%e0%b8%87%e0%b9%80%e0%b8%95%e0%b9%87%e0%b8%a1
https://stackoverflow.com/collectives/php/beta/discussions/77780995/xem-phim-qu%e1%bb%b7-c%e1%ba%a9u-2023-full-hd-vietsub
https://stackoverflow.com/collectives/php/beta/discussions/77781119/xem-phim-qu%e1%bb%b7-c%e1%ba%a9u-2023-thuy%e1%ba%bft-minh-tr%e1%bb%8dn-b%e1%bb%99-vietsub
https://stackoverflow.com/collectives/php/beta/discussions/77781220/qu%e1%bb%b7-c%e1%ba%a9u-2023-full-hd-vietsub-xem-phim-m%e1%bb%9bi-online-4k
https://groups.google.com/g/ibm.software.network.directory-integrator/c/bDKUTR7eEcc
https://groups.google.com/g/ibm.software.network.directory-integrator/c/0MEN1L3pvaU
https://groups.google.com/g/ibm.software.network.directory-integrator/c/dLnL34uzEh8
https://groups.google.com/g/ibm.software.network.directory-integrator/c/czV6rMbNp_k"
P23LRHkp,FFMPEG. Cut a video without re-encoding with ffmpeg,sytchenko,Bash,Monday 8th of January 2024 05:36:21 PM CDT,"ffmpeg -i input.mp4 -c copy -ss 00:04:25.000 -to 00:09:25.000 output.mp4

# source: https://gist.github.com/joshschmelzle/f7a34fa54a7ba1307cea1fa41577a298"
7wLfP1Rs,Untitled,Madi_Perth,Linden Scripting,Monday 8th of January 2024 05:36:00 PM CDT,"// set debug mode to TRUE or FALSE
#define DEBUG

// commands to send to play engine
#define SONG_PLAY   0x00000001  // flag to start the song playing
#define SONG_STOP   0x00000002  // flag to stop the current song playing
#define SONG_VOL    0x00000004  // flag to indicate a change / or the 
                                // volume level
#define SONG_END    0x00000008  // End of playing song

// debugging command 
DS (string sayd)
{
#ifdef DEBUG
   string scriptName = llGetScriptName();
   llOwnerSay(scriptName + "": "" + sayd);
#endif
}

// golbal variable
list  currentSong_info; // list of current song info and uuid for wav files.
float volume;           // sound volume level

integer  listPlace;     // place in the currentSong_list that is playing.

default
{
   state_entry()
   {
      DS(""Free Memory: "" + (string) llGetFreeMemory()); 
   }

   link_message(integer sender_num, integer num, string str, key id)
   {
      DS(""link_message : "" + str);

      switch (num)
      {
         case (SONG_PLAY):
         {
            currentSong_info = llCSV2List(str);
            DS(llList2String(currentSong_info, 3));

            llPlaySound(llList2String(currentSong_info, 3), volume);
            llSetTimerEvent((llList2Float(currentSong_info, 2) - 1));

            llSoundPreload(llList2String(currentSong_info, (3 + 1)));
            listPlace = 3;
            break;
         }
         case (SONG_VOL):
         {
            volume = (float) str;
            break;
         }
         case (SONG_STOP):
         {
 #ifdef DEBUG
   llSay(888, ""STOP"");
#endif
            llSetTimerEvent(0);
            break;
         }
         default:
         {
            break;
         }
      }

   }

   timer()
   {
      DS(""Timer"");
      if(++listPlace < llGetListLength(currentSong_info))
      {
#ifdef DEBUG
   llSay(888, ""RESET"");
#endif
         DS(""Playing UUID "" + llList2String(currentSong_info, listPlace));

         llPlaySound(llList2String(currentSong_info, listPlace), volume);
         if(!(listPlace <= llGetListLength(currentSong_info)))
            llSoundPreload(llList2String(currentSong_info, (listPlace + 1)));
      }
      else 
      {
#ifdef DEBUG
   llSay(888, ""STOP"");
#endif
         DS(""end of song"");
         llMessageLinked(LINK_SET, SONG_END, """","""");
         llSetTimerEvent(0);
      }
   }
}
"
LMGjr07f,Pidwork,Mr_Professor,Python,Monday 8th of January 2024 05:29:35 PM CDT,"import requests, time
cookies = {
  'PHPSESSID': ""5p77eadh16h20u6kv61jf912gk"",
  'z_lang': '1',
  'lang': 'ar',
  '_ga': 'GA1.1.806149762.1704164907',
  '_fbp': 'fb.1.1704164908091.987978186',
  'z_remember': '1',
  'z_verification': '1704171408',
  'z_registration': '1',
  'z_login': '14091839',
  '_gcl_au': '1.1.1159565111.1704164906.2024368174.1704241980.1704241983',
  '_ga_QY474YHYKK': 'GS1.1.1704244254.11.1.1704244378.59.0.0',
}

headers = {
  'Host': 'www.paidwork.com',
  'sec-ch-ua': 'Not_A',
  'accept': '*/*',
  'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
  'x-requested-with': 'XMLHttpRequest',
  'sec-ch-ua-mobile': '?1',
  'user-agent': 'Mozilla/5.0 (Linux; Android 10; RMX2020 Build/QP1A.190711.020) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/120.0.6099.144 Mobile Safari/537.36',
  'sec-ch-ua-platform': 'Android',
  'origin': 'https://www.paidwork.com',
  'sec-fetch-site': 'same-origin',
  'sec-fetch-mode': 'cors',
  'sec-fetch-dest': 'empty',
  'referer': 'https://www.paidwork.com/earn/watching-videos/p',
  'accept-language': 'ar-EG,ar;q=0.9,en-US;q=0.8,en;q=0.7',
}

data = {
  'platform': 'fyber',
  'amount': '7',
}
def send_message(message):
  url = f'https://api.telegram.org/bot5659636173:AAH4VdeVM2GjgMbd5li0n5vF72xaEwwkfdU/sendMessage'
  params = {
  'chat_id': 1591299818,
  'text': message,
  }
  response = requests.get(url, params=params)
m = 1
while True:	
  coun = 40
  response = requests.post(
  'https://www.paidwork.com/base/user-login/form/reward/form-catch-reward',
  cookies=cookies,
  headers=headers,
  data=data,
	)
  if '3' in response.text:
    print('='*55)
    print('\t',response.text)
    print('='*55)
    time.sleep(1)
    print(f'am in {m}'.center(55))
    m+=1
    for i in range(40):
      print(f'add after {coun}')
      coun -=1
      time.sleep(1)
  elif '4' in response.text:
    send_message('i will sleep now')
    print(f'i will sleep now {response.text}')
    time.sleep(60*60*2)
  else:
    exit(send_message(response.text))"
6XshtHHJ,detect,aregrubb,Lua,Monday 8th of January 2024 05:07:37 PM CDT,"d = peripheral.wrap(""top"")

admin = ""Worblood"" -- player to detect 
range = 32 -- range if d.getPlayersInRange()

-- coordinates if d.getPlayersInCoords() to find area to detect player
p1 = { x = -98, y = 111, z = -528 }
p2 = { x = -105, y = 116, z = -532 } 

override = true -- true means start with auto sensor program
 
 function take_command()
    local timer = os.startTimer(0.5) -- Start en timer med en halvsekunds intervall
    while true do
        local event, id = os.pullEvent()
        if event == ""timer"" and id == timer then
            timer = os.startTimer(0.1) -- Restart timeren
        elseif event == ""key"" then
			if id == keys.one then
				override = false
			elseif id == keys.two then
				override = true
			elseif id == keys.three then
				redstone.setAnalogOutput(""back"",0)
			elseif id == keys.four then
				redstone.setAnalogOutput(""right"",1)
				os.sleep(1.3)
				redstone.setAnalogOutput(""back"",1)
				redstone.setAnalogOutput(""right"",0)
			end
        end
    end
end
 
function sensor_check() 
	while true do
		-- pir = d.getPlayersInCoords(p1,p2) -- players in range
		 if override == true then
			term.setBackgroundColor(colors.red)
			local pir = d.getPlayersInRange(range)
			if pir[1] == admin or pir[2] == admin or pir[3] == admin then
				redstone.setAnalogOutput(""back"",0)
				isnear = true
			else
				if isnear then
					redstone.setAnalogOutput(""right"",1)
					os.sleep(1.3)
				end
				redstone.setAnalogOutput(""back"",1)
				redstone.setAnalogOutput(""right"",0)
				isnear = false
			end
		else
			term.setBackgroundColor(colors.green)
		end
	end
	--os.sleep(0.1)
	take_command()
end

sensor_check()
"
Xgd0pM71,ACF Component,rikhen,PHP,Monday 8th of January 2024 04:45:41 PM CDT,"<?php
/**
 * WP_Rig\WP_Rig\ACF\Component class
 *
 * @package wp_rig
 */

namespace WP_Rig\WP_Rig\ACF;

use WP_Rig\WP_Rig\Component_Interface;
use function add_action;

/**
 * Class for managing ACF support.
 *
 */

 class Component implements Component_Interface {

    /**
     * Gets the unique identifier for the theme component.
     *
     * @return string Component slug.
     */
    public function get_slug(): string
    {
        return 'acf';
    }

    /**
     * Adds the action and filter hooks to integrate with WordPress.
     */
    public function initialize()
    {
        add_action('after_setup_theme', array($this, 'action_add_custom_post_types'));
        add_action('after_setup_theme', array($this, 'filter_prepare_acf_layout'));
    }

    /**
     * Adds custom post types.
     */
    public function action_add_custom_post_types()
    {

        add_action('init', function () {
            $labels = [
                'name' => _x('Global Components', 'Component Post Type', 'flynt'),
                'singular_name' => _x('Global Components', 'Component Post Type', 'flynt'),
                'menu_name' => _x('Global Components', 'Component Post Type', 'flynt'),
                'name_admin_bar' => __('Global Components', 'flynt'),
                'archives' => __('Global Component Archives', 'flynt'),
                'attributes' => __('Global Component Attributes', 'flynt'),
                'parent_item_colon' => __('Parent Global Component:', 'flynt'),
                'all_items' => __('All Global Components', 'flynt'),
                'add_new_item' => __('Add New Global Components', 'flynt'),
                'new_item' => __('New Global Components', 'flynt'),
                'edit_item' => __('Edit Global Components', 'flynt'),
                'update_item' => __('Update Global Components', 'flynt'),
                'view_item' => __('View Global Components', 'flynt'),
                'view_items' => __('View Global Components', 'flynt'),
                'search_items' => __('Search Global Components', 'flynt'),
                'not_found' => __('No reusable components found', 'flynt'),
                'not_found_in_trash' => __('No reusable components found in Trash', 'flynt'),
                'items_list' => __('Global components list', 'flynt'),
                'items_list_navigation' => __('Global components list navigation', 'flynt'),
                'filter_items_list' => __('Filter reusable components list', 'flynt'),
            ];
            $args = [
                'labels' => $labels,
                'supports' => ['title', 'revisions'],
                'hierarchical' => false,
                'public' => false,
                'show_ui' => true,
                'show_in_menu' => true,
                'menu_position' => 20,
                'menu_icon' => 'dashicons-controls-repeat',
                'show_in_admin_bar' => true,
                'show_in_nav_menus' => false,
                'can_export' => true,
                'has_archive' => false,
                'exclude_from_search' => true,
                'capability_type' => 'page',
                'rewrite' => false
            ];
            register_post_type('global-components', $args);
        });
    }

    /**
     * Prepare global component field.
     */
    public function filter_prepare_acf_layout() {
        add_filter('acf/prepare_field/name=global_component', function ($field) {
            $reusableAdminLink = admin_url('edit.php?post_type=global-components');
            $postEditLink = get_edit_post_link($field['value']);
            $postTitle = get_the_title($field['value']);
            $postId = $field['value'] ? $field['value'] : get_the_ID();

            $instructions = sprintf(
                // translators: 1: <a> element 2: </a> element
                __('Add %1$sglobal component%2$s.', 'wp-rig'),
                ""<a href='{$reusableAdminLink}' target='_blank' rel='noopener noreferrer'>"",
                ""</a>""
            );
            $editLink = sprintf(
                // translators: %s: Link and title of selected global-post
                __(' Edit %s.', 'wp-rig'),
                ""<a class='global-postLink' data-postId='{$postId}' href='{$postEditLink}' target='_blank' rel='noopener noreferrer'>{$postTitle}</a>""
            );

            if ($field['value']) {
                $instructions .= $editLink;
            } else {
                $instructions .= ""<span hidden>{$editLink}</span>"";
            }

            $field['instructions'] = $instructions;
            return $field;
        }, 1);
    }

}"
nLrBiFLD,–∞–≤—Ç–æ–∫—Ä–∞—Ñ—Ç —Å–∏–Ω–≥—É–ª—è—Ä–æ–∫,nikita2007558,Lua,Monday 8th of January 2024 04:31:29 PM CDT,"local items = {
    {""–†–µ–¥—Å—Ç–æ—É–Ω —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å"", ""minecraft:redstone_block"", 0, 20900, ""Avaritia:Singularity"", 3},
    {""–ñ–µ–ª–µ–∑–Ω–∞—è —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å"", ""minecraft:iron_block"", 0, 19800, ""Avaritia:Singularity"", 0},
    {""–ö–≤–∞—Ä—Ü–µ–≤–∞—è —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å"", ""minecraft:quartz_block"", 0, 18700, ""Avaritia:Singularity"", 4},
    {""–õ–∞–∑—É—Ä–∏—Ç–æ–≤–∞—è —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å"", ""minecraft:lapis_block"", 0, 19800, ""Avaritia:Singularity"", 2},
    {""–ê–ª–º–∞–∑–Ω–∞—è —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å"", ""minecraft:diamond_block"", 0, 16236, ""universalsingularities:universal.vanilla.singularity"", 2},
    {""–ó–æ–ª–æ—Ç–∞—è —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å"", ""minecraft:gold_block"", 0, 17600, ""Avaritia:Singularity"", 1},
    {""–ú–µ–¥–Ω–∞—è —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å"", ""ThermalFoundation:Storage"", 0, 19800, ""Avaritia:Singularity"", 5},
    {""–û–ª–æ–≤—è–Ω–Ω–∞—è —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å"", ""ThermalFoundation:Storage"", 1, 19800, ""Avaritia:Singularity"", 6},
    {""–°–≤–∏–Ω—Ü–æ–≤–∞—è —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å"", ""ThermalFoundation:Storage"", 3, 18700, ""Avaritia:Singularity"", 7},
    {""–°–µ—Ä–µ–±—Ä—è–Ω–Ω–∞—è —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å"", ""ThermalFoundation:Storage"", 2, 18700, ""Avaritia:Singularity"", 8},
    {""–ù–∏–∫–µ–ª–µ–≤–∞—è —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å"", ""ThermalFoundation:Storage"", 4, 19800, ""Avaritia:Singularity"", 9}
}
 
local requestSize = 1
 
local component = require ""component""
local unicode = require ""unicode""
local event = require ""event""
local computer = require ""computer""
local gpu = component.gpu
local ae = component.me_interface
local function drawTable()
    local w, h = 40, #items + 2
    gpu.setResolution(w, h)
    gpu.fill(1, 1, w, 1, ""‚îÄ"")
    gpu.fill(1, 1, 1, h, ""‚îÇ"")
    gpu.fill(w, 1, 1, h, ""‚îÇ"")
    gpu.fill(1, h, w, 1, ""‚îÄ"")
    gpu.set(1, 1, ""‚îå"")
    gpu.set(w, 1, ""‚îê"")
    gpu.set(1, h, ""‚îî"")
    gpu.set(w, h, ""‚îò"")
    gpu.set(2, 1, ""[–ù–∞–∑–≤–∞–Ω–∏–µ]"")
    gpu.set(29, 1, ""[–ö–æ–ª-–≤–æ]"")
end
local function convert(value)
    if value>= 10^9 then
        return string.format(""%0.1fG"", value/10^9)
    elseif value>= 10^6 then
        return string.format(""%0.1fM"", value/10^6)
    elseif value>= 10^3 then
        return string.format(""%0.1fK"", value/10^3)
    else
        return string.format(""%d"", value)
    end
end
local function getSize(name, dmg)
    for _, item in ipairs(ae.getItemsInNetwork()) do
        if item.name == name and item.damage == dmg then
            return item.size
        end
    end
    return 0
end
local function drawButton(x, y, text, tColor)
    local oldfColor =gpu.getForeground()
    gpu.setForeground(tColor)
    gpu.set(x, y, text)
    gpu.setForeground(oldfColor)
end
local function draw()
    for i = 2, #items do
        gpu.set(2, i, items[i - 1][1])
        drawButton(37, i, ""+"", 0x00FF00)
        gpu.set(29, i, tostring(items[i - 1][4]))
    end
end
local function start(item)
    local id, dmg, blockSize = item[2], item[3], item[4]
    local drop = 0
    gpu.set(2, #items+1, (item[1] .. "" x"" .. drop .. "" / "" .. blockSize))
    while true do
        if drop >= blockSize then
            gpu.fill(2, #items+1, w - 2, 1, "" "")
            return
        else
            local dropcount = ae.exportItem({id = item[2], dmg = item[3]}, ""DOWN"", blockSize - drop).size
            gpu.set(2, #items+1, (item[1] .. "" "" .. drop .. "" / ""  .. (blockSize - drop)))
            drop = drop + dropcount
            if dropcount == 0 then
                os.sleep(0.05)
            end
        end
    end
end
 
local function craft(id)
    local item = items[id]
    local size = getSize(item[2], item[3])
    gpu.set(2, #items + 1, (""–î–æ—Å—Ç—É–ø–Ω–æ: "" .. size .. "" / "" .. item[4]))
    if size < (item[4] * requestSize) then
        if getSize(item[2], item[3]) >= item[4] then
            gpu.set(2, #items + 1, (""–î–æ—Å—Ç—É–ø–Ω–æ: "" .. size .. "" / "" .. item[4]))
            start(item)
        end
        ae.requestCrafting({id = item[2], dmg = item[3]}, ((item[4] * requestSize) - size))
        while true do
            gpu.set(2, #items + 1, (""–î–æ—Å—Ç—É–ø–Ω–æ: "" .. getSize(item[2], item[3]) .. "" / "" .. item[4]))
            if getSize(item[2], item[3]) >= item[4] then
                start(item)
            end
            os.sleep(0.1)
        end
    else
        start(item)
    end
end
function detect(_, _, x, y)
    if x ~= nil then
        for i = 1, #items do
            if x == 37 and i == y then
                computer.beep(1000, 0.1)
                craft(y - 1)
            end
        end
    end
end
drawTable()
draw()
while true do
    gpu.fill(2, #items+1, 40 - 2, 1, "" "")
    event.listen(""touch"", detect)
    os.sleep(0.01)
end"
4ezMssF3,Untitled,sissou123,Python,Monday 8th of January 2024 04:21:17 PM CDT,"Learn Advanced Python Concepts
Learn the intuition, implementation of each Advanced Level Python Concepts and Make Real Applications out of it
In this course, I am going to assume that you have learned the basics of Python and are looking to become a professional professional programmer by learning Advance Level Programming in Python. By Learning just the basics concepts of Python, you can't make Real time applications therefor, I have covered most of the Advance Level Concepts in depth in this course. 
for more:https://cuty.io/mvKsdbFncJaK"
duZjU2it,Schau.mich.nicht.so.an.2015.Deu.1080p.h264.eac3.Subs-bp,bpmircea,BrainFuck,Monday 8th of January 2024 04:04:09 PM CDT,"Schau mich nicht so an (Don't Look at Me That Way) (Uisenma Borchu, 2015)
aka
Schau.mich.nicht.so.an.2015.Deu.1080p.h264.eac3.Subs-bp
https://www.imdb.com/title/tt4319082/

Uploading..."
tHeySJVQ,Untitled,sissou123,PHP,Monday 8th of January 2024 03:50:46 PM CDT,"PHP for Beginners
Build a Content Management System 
Are you wanting to get into Web development, but are not sure where to start? 

So maybe you tried out some PHP and MySQL tutorials on Youtube, but found them too hard or outdated, and feel that you need a more comprehensive introduction. 
for more:https://dz-linkk.com/C6B5MV
"
Ev6t9R2T,# tk_Reaction_Diffusion_RGB_Zoom.py,here2share,Python,Monday 8th of January 2024 03:34:22 PM CDT,"# tk_Reaction_Diffusion_RGB_Zoom.py

import tkinter as tk
from PIL import Image, ImageTk, ImageFilter

ww = 560
hh = 560
ww0, hh0 = ww + 2, hh + 2
center_x = ww // 2
center_y = hh // 2

root = tk.Tk()
root.title(""tk_Reaction_Diffusion_RGB_Zoom"")
root.geometry('+0+0')

canvas = tk.Canvas(root, width=ww, height=hh, bg='white')
	
ref_image = Image.new(""RGB"", (ww0, hh0), ""white"")
pixel_data = []
 
def gen(w,h):
	D = 20
	t = [z for z in range(256)]
	a = {}
	for z in t:
		v = min(z,256-D)
		a[z] = range(v,v+D)
	p = {}
	w2 = w/255.0
	h2 = h/255.0
	rgb = []
	for y in range(h):
		cy = int(y/h2)
		for x in range(w):
			cx = int(x/w2)
			r = 255-cx
			g = 255-cy
			b = int((cx+cy)/2)
			for bbb in a[b]:
				z = (r,g,bbb)
				try:
					p[z]
				except:
					break
			rgb.append(z)
			p[z] = 1
	return rgb
pixel_data = gen(ww,hh)
ref_image.putdata(pixel_data)

def update_params_x(value):
	global x0
	x0 = float(value)

def update_params_y(value):
	global y0
	y0 = float(value)

def update_params_z(value):
	global z0
	z0 = float(value)

x0 = 3
y0 = 0
z0 = 2

x_slider = tk.Scale(root, from_=99, to=0, label='X', resolution=1, orient=tk.VERTICAL, bg=""#FFFF00"")
x_slider.set(x0)

y_slider = tk.Scale(root, from_=99, to=0, label='Y', resolution=1, orient=tk.VERTICAL, bg=""#00FF00"")
y_slider.set(y0)

z_slider = tk.Scale(root, from_=99, to=0, label='Z', resolution=1, orient=tk.VERTICAL, bg=""#00C0FF"")
z_slider.set(z0)

canvas.pack(side=tk.LEFT)
x_slider.pack(side=tk.LEFT, fill='y')
y_slider.pack(side=tk.LEFT, fill='y')
z_slider.pack(side=tk.LEFT, fill='y')

x_slider.config(command=lambda value: update_params_x(x_slider.get()))
y_slider.config(command=lambda value: update_params_y(y_slider.get()))
z_slider.config(command=lambda value: update_params_z(z_slider.get()))

kernel_values = [0.05, 0.2, 0.05, 0.2, -1, 0.2, 0.05, 0.2, 0.05]

def display():
	img = ref_image.crop((4, 4, ww + 4, hh + 4))
	img_tk = ImageTk.PhotoImage(img)
	canvas.create_image(0, 0, anchor=""nw"", image=img_tk)
	canvas.img = img_tk
	root.update()
	ref_image.putpixel((center_x, center_y - 1), (255, 255, 255))
	ref_image.putpixel((center_x, center_y + 1), (0, 0, 0))
	
kernel = ImageFilter.Kernel((3, 3), kernel_values, scale=None, offset=0)
while True:
	x, y, z = x0, y0, z0
	ref_image = ref_image.rotate(-0.5, resample=Image.BICUBIC)  
	ref_image = ref_image.resize((ww + 8, hh + 8), resample=Image.BICUBIC)
	ref_image = ref_image.crop((4, 4, ww + 4, hh + 4))
	ref_image = ref_image.filter(kernel)
	ref_image = ref_image.filter(ImageFilter.GaussianBlur(x))
	ref_image = ref_image.filter(kernel)
	ref_image = ref_image.filter(ImageFilter.GaussianBlur(y))
	ref_image = ref_image.filter(kernel)
	ref_image = ref_image.filter(ImageFilter.GaussianBlur(z))
	ref_image = ref_image.filter(kernel)
	display()"
hAr6atHS,Untitled,ValkyrieJanet,Linden Scripting,Monday 8th of January 2024 03:30:49 PM CDT,"
    def execute(self, context):
        # Put code here
        obj = bpy.context.object

        if obj is None or obj.type != ""MESH"":
            return

        # Output geometry
        obj_eval = obj.evaluated_get(bpy.context.view_layer.depsgraph)
        filepath = ""C:/Users/Terry/PycharmProjects/blenderPython/verticesbanked.lsl""

        verts = obj_eval.data.vertices
        triples = [verts[i:i + 3] for i in range(0, len(verts) - 1, 2)]
        self.write_triples(triples, filepath)

        return {'FINISHED'}

    def write_triples(self, triples, filepath):
        with open(filepath, ""w"") as file:
            file.write(""list vectdata = [\n"")
            back_0 = triples[0][0].co
            comma = """"
            for back_vertex, up_vertex, front_vertex in triples:
                back = back_vertex.co
                up = up_vertex.co
                front = front_vertex.co
                back_zeroed = back - back_0
                roll = Vehicle(back, up, front).roll_degrees()
                output = f""{comma}<{back_zeroed.x:.3f}, {back_zeroed.y:.3f}, {back_zeroed.z:.3f}, {roll:.0f}>\n""
                file.write(output)
                print(output)
                comma = "",""
            print(f""File was written to {os.path.join(os.getcwd(), filepath)}\n"")
            file.write(""];\n"")
            file.write(""\n"")
            file.write(""default\n"")
            file.write(""{\n"")
            file.write(""  state_entry()\n"")
            file.write(""  {\n"")
            file.write(""    integer length = llGetListLength(vectdata);\n"")
            file.write(""    llLinksetDataReset();\n"")
            file.write(""    integer a = 0;\n"")
            file.write(""    integer b = length;\n"")
            file.write(""    for(; a < b; ++a) {\n"")
            file.write('      llLinksetDataWrite(""datakey""+(string)a,  llList2String( vectdata , a) );\n')
            file.write(""    }\n"")
            file.write(""  }\n"")
            file.write(""}\n"")"
VDRbhuBx,Untitled,Josif_tepe,C,Monday 8th of January 2024 03:13:00 PM CDT,"#include <stdio.h>


int main(int argc, const char * argv[]) {
    int n, m;
    scanf(""%d%d"", &n, &m);
    int mat[n][m];
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            scanf(""%d"", &mat[i][j]);
        }
    }
    int maksimum = 0;
    for(int i = 0; i < n; i++) {
        int brojac = 0;
        for(int j = 0; j < m; j++) {
            if(mat[i][j] == 1) {
                brojac++;
            }
            else {
                if(brojac > maksimum) {
                    maksimum = brojac;
                }

                brojac = 0;
            }
            if(brojac > maksimum) {
                    maksimum = brojac;
                }
        }
    }
    for(int j = 0; j < m; j++) {
        int brojac = 0;
        for(int i = 0; i < n; i++) {
            if(mat[i][j] == 1) {
                brojac++;
            }
            else {
                if(brojac > maksimum) {
                    maksimum = brojac;
                }
                brojac = 0;
            }
            if(brojac > maksimum) {
                maksimum = brojac;
            }

        }
    }
    printf(""%d\n"", maksimum);
    return 0;
}
"
maQTLCFs,# tk_540x540_Gradient.py,here2share,Python,Monday 8th of January 2024 03:12:08 PM CDT,"# tk_540x540_Gradient.py

from tkinter import *
from PIL import Image, ImageTk
 
root = Tk()
root.title(""540x540 Gradient"")
ww = 540
hh = 540
root.geometry(""%dx%d+-10+0""%(ww,hh))
canvas = Canvas(root, width=ww, height=hh)
canvas.pack()
 
D = 20
t = [z for z in range(256)]
a = {}
for z in t:
    v = min(z,256-D)
    a[z] = range(v,v+D)
p = {}
def gen(w,h):
    w2 = w/255.0
    h2 = h/255.0
    for y in range(h):
        cy = int(y/h2)
        for x in range(w):
            cx = int(x/w2)
            r = 255-cx
            g = 255-cy
            b = int((cx+cy)/2)
            for bbb in a[b]:
                z = (r,g,bbb)
                try:
                    p[z]
                except:
                    break
            rgb.append(z)
            p[z] = 1

rgb = []
gen(ww,hh)
img = Image.new('RGB', (ww,hh))
img.putdata(rgb)
imgTk = ImageTk.PhotoImage(img)
canvas.create_image(0, 0, anchor=NW, image=imgTk)
root.update()"
w6r5N7UK,Pet simulator 99! üéâ Autofarm Script (NoKey),Project-WD,Lua,Monday 8th of January 2024 03:03:37 PM CDT,"-- Pet Simulator 99! üéâ AutoFarm Script! (Copy and Paste into Executor)(Working: Delta and ArceusX etc.)
-------------------------------------------------------
-- üÜï Updated (09/01/2024) (Insane Script)
-- Auto Farm, Auto Ranks, No Egg Animation
-- Scriptüìù:
loadstring(game:HttpGet(""https://raw.githubusercontent.com/REDzHUBz/PetSimulator99/main/redz9999.lua"" ))()"
tYVhVqV7,Untitled,Josif_tepe,C,Monday 8th of January 2024 03:01:32 PM CDT,"#include <stdio.h>


int main(int argc, const char * argv[]) {
    int n;
    scanf(""%d"", &n);

    int mat[n][n];
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            scanf(""%d"", &mat[i][j]);
        }
    }

    for(int i = 0; i < n; i++) {
        for(int j = n - i; j < n; j++) {
            printf(""%d "", mat[i][j]);
        }
    }
    return 0;
}
"
P8EJDij8,Untitled,Josif_tepe,C,Monday 8th of January 2024 03:00:07 PM CDT,"#include <stdio.h>


int main(int argc, const char * argv[]) {
    int n;
    scanf(""%d"", &n);

    int mat[n][n];
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            scanf(""%d"", &mat[i][j]);
        }
    }

    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            if(j > n - 1 - i) {
                printf(""%d "", mat[i][j]);
            }
        }
    }
    return 0;
}
"
g9gqy9gD,Untitled,Josif_tepe,C++,Monday 8th of January 2024 02:56:02 PM CDT,"#include <stdio.h>


int main(int argc, const char * argv[]) {
    int n;
    scanf(""%d"", &n);

    int mat[n][n];
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            scanf(""%d"", &mat[i][j]);
        }
    }

    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n - 1 - i; j++) {
            printf(""%d "", mat[i][j]);
        }
    }
    return 0;
}
"
mxUk01fx,Untitled,Josif_tepe,C,Monday 8th of January 2024 02:54:16 PM CDT,"#include <stdio.h>


int main(int argc, const char * argv[]) {
    int n;
    scanf(""%d"", &n);

    int mat[n][n];
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            scanf(""%d"", &mat[i][j]);
        }
    }

    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            if(j < n - 1 - i) {
                printf(""%d "" , mat[i][j]);
            }
        }
    }
    return 0;
}
"
Kbi1XCi6,Untitled,Josif_tepe,C,Monday 8th of January 2024 02:48:35 PM CDT,"#include <stdio.h>


int main(int argc, const char * argv[]) {
    int n;
    scanf(""%d"", &n);

    int mat[n][n];
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            scanf(""%d"", &mat[i][j]);
        }
    }

    for(int i = 0; i < n; i++) {
        printf(""%d "", mat[i][n - 1 - i]);
    }
    return 0;
}
"
zRHYqsDX,Untitled,Josif_tepe,C,Monday 8th of January 2024 02:45:38 PM CDT,"#include <stdio.h>


int main(int argc, const char * argv[]) {
    int n;
    scanf(""%d"", &n);

    int mat[n][n];
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            scanf(""%d"", &mat[i][j]);
        }
    }

    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            if(i + j == n - 1) {
                printf(""%d "" , mat[i][j]);
            }
        }
    }
    return 0;
}
"
S2YR35de,Untitled,Josif_tepe,C,Monday 8th of January 2024 02:35:50 PM CDT,"#include <stdio.h>


int main(int argc, const char * argv[]) {
    int n;
    scanf(""%d"", &n);

    int mat[n][n];
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            scanf(""%d"", &mat[i][j]);
        }
    }

    for(int i = 0; i < n; i++) {
        for(int j = 0; j < i; j++) {
            printf(""%d "", mat[i][j]);
        }
    }
    return 0;
}
"
fJ3P4H7A,Untitled,Josif_tepe,C,Monday 8th of January 2024 02:34:27 PM CDT,"#include <stdio.h>


int main(int argc, const char * argv[]) {
    int n;
    scanf(""%d"", &n);

    int mat[n][n];
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            scanf(""%d"", &mat[i][j]);
        }
    }

    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            if(j < i) {
                printf(""%d "", mat[i][j]);
            }
        }
    }
    return 0;
}
"
