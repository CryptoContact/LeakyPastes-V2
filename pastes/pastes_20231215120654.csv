id,title,username,language,date,content
6W8cNhKz,data783,TestGuy1,JSON,Friday 15th of December 2023 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '8e9668e6278c0bf4fddd79c2f7e157faae99062b28b2385abe30bba795e6bcf857184da09e0e8bc40c77bd9ad2e64406f01c478431e2561337b818ac55c2112168cf137aea66adbb73fc1e482be1e90dba1949bff892c9b2657c40c54a4c35164c90783388d49f276633ee05264982aff72379689b0f1abaf7b4b725efb88465',
  otherdata: [
    '8e8d32155bdd3a986c7dc2c2545ba539',
    '8030088e1933905b45590154f9f588a0',
    'a9dd05b53ad090c806d8bd6377abb6ad',
    'b34cf349d3a63704498632c6ef501a0a',
    '1b61044c7227345f7c5ec09fe449052e',
    'c9199e51e079db3f041d8f3ec5befe2f',
    'd7780b330cdefc6fb226c07f4aadc2e8',
    'cf590db844bc48e3cdf0af146303545b'
  ]
}"
qBvkKP9H,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Friday 15th of December 2023 05:57:00 AM CDT,"Dear Moe,
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-809577"
xTn047Rz,Untitled,DeFeRoz,C,Friday 15th of December 2023 05:56:36 AM CDT,"#include <stdio.h>
#include <core/IO/io.h>

#include <stdarg.h>
#include <stdbool.h>

const unsigned SCREEN_WIDTH = 80;
const unsigned SCREEN_HEIGHT = 25;
const uint8_t DEFAULT_COLOR = 0x7;

uint8_t* g_ScreenBuffer = (uint8_t*)0xB8000;
int g_ScreenX = 0, g_ScreenY = 0;

void putchr(int x, int y, char c)
{
    g_ScreenBuffer[2 * (y * SCREEN_WIDTH + x)] = c;
}

void putcolor(int x, int y, uint8_t color)
{
    g_ScreenBuffer[2 * (y * SCREEN_WIDTH + x) + 1] = color;
}

char getchr(int x, int y)
{
    return g_ScreenBuffer[2 * (y * SCREEN_WIDTH + x)];
}

uint8_t getcolor(int x, int y)
{
    return g_ScreenBuffer[2 * (y * SCREEN_WIDTH + x) + 1];
}

void setcursor(int x, int y)
{
    int pos = y * SCREEN_WIDTH + x;

    i686_outb(0x3D4, 0x0F);
    i686_outb(0x3D5, (uint8_t)(pos & 0xFF));
    i686_outb(0x3D4, 0x0E);
    i686_outb(0x3D5, (uint8_t)((pos >> 8) & 0xFF));
}

void clrscr()
{
    for (int y = 0; y < SCREEN_HEIGHT; y++)
        for (int x = 0; x < SCREEN_WIDTH; x++)
        {
            putchr(x, y, '\0');
            putcolor(x, y, DEFAULT_COLOR);
        }

    g_ScreenX = 0;
    g_ScreenY = 0;
    setcursor(g_ScreenX, g_ScreenY);
}

void scrollback(int lines)
{
    for (int y = lines; y < SCREEN_HEIGHT; y++)
        for (int x = 0; x < SCREEN_WIDTH; x++)
        {
            putchr(x, y - lines, getchr(x, y));
            putcolor(x, y - lines, getcolor(x, y));
        }

    for (int y = SCREEN_HEIGHT - lines; y < SCREEN_HEIGHT; y++)
        for (int x = 0; x < SCREEN_WIDTH; x++)
        {
            putchr(x, y, '\0');
            putcolor(x, y, DEFAULT_COLOR);
        }

    g_ScreenY -= lines;
}

void putc(char c)
{
    switch (c)
    {
        case '\n':
            g_ScreenX = 0;
            g_ScreenY++;
            break;
    
        case '\t':
            for (int i = 0; i < 4 - (g_ScreenX % 4); i++)
                putc(' ');
            break;

        case '\r':
            g_ScreenX = 0;
            break;

        default:
            putchr(g_ScreenX, g_ScreenY, c);
            g_ScreenX++;
            break;
    }

    if (g_ScreenX >= SCREEN_WIDTH)
    {
        g_ScreenY++;
        g_ScreenX = 0;
    }
    if (g_ScreenY >= SCREEN_HEIGHT)
        scrollback(1);

    setcursor(g_ScreenX, g_ScreenY);
}

void puts(const char* str)
{
    while(*str)
    {
        putc(*str);
        str++;
    }
}

const char g_HexChars[] = ""0123456789abcdef"";

void printf_unsigned(unsigned long long number, int radix)
{
    char buffer[32];
    int pos = 0;

    // convert number to ASCII
    do 
    {
        unsigned long long rem = number % radix;
        number /= radix;
        buffer[pos++] = g_HexChars[rem];
    } while (number > 0);

    // print number in reverse order
    while (--pos >= 0)
        putc(buffer[pos]);
}

void printf_signed(long long number, int radix)
{
    if (number < 0)
    {
        putc('-');
        printf_unsigned(-number, radix);
    }
    else printf_unsigned(number, radix);
}

#define PRINTF_STATE_NORMAL         0
#define PRINTF_STATE_LENGTH         1
#define PRINTF_STATE_LENGTH_SHORT   2
#define PRINTF_STATE_LENGTH_LONG    3
#define PRINTF_STATE_SPEC           4

#define PRINTF_LENGTH_DEFAULT       0
#define PRINTF_LENGTH_SHORT_SHORT   1
#define PRINTF_LENGTH_SHORT         2
#define PRINTF_LENGTH_LONG          3
#define PRINTF_LENGTH_LONG_LONG     4

void printf(const char* fmt, ...)
{
    va_list args;
    va_start(args, fmt);

    int state = PRINTF_STATE_NORMAL;
    int length = PRINTF_LENGTH_DEFAULT;
    int radix = 10;
    bool sign = false;
    bool number = false;

    while (*fmt)
    {
        switch (state)
        {
            case PRINTF_STATE_NORMAL:
                switch (*fmt)
                {
                    case '%':   state = PRINTF_STATE_LENGTH;
                                break;
                    default:    putc(*fmt);
                                break;
                }
                break;

            case PRINTF_STATE_LENGTH:
                switch (*fmt)
                {
                    case 'h':   length = PRINTF_LENGTH_SHORT;
                                state = PRINTF_STATE_LENGTH_SHORT;
                                break;
                    case 'l':   length = PRINTF_LENGTH_LONG;
                                state = PRINTF_STATE_LENGTH_LONG;
                                break;
                    default:    goto PRINTF_STATE_SPEC_;
                }
                break;

            case PRINTF_STATE_LENGTH_SHORT:
                if (*fmt == 'h')
                {
                    length = PRINTF_LENGTH_SHORT_SHORT;
                    state = PRINTF_STATE_SPEC;
                }
                else goto PRINTF_STATE_SPEC_;
                break;

            case PRINTF_STATE_LENGTH_LONG:
                if (*fmt == 'l')
                {
                    length = PRINTF_LENGTH_LONG_LONG;
                    state = PRINTF_STATE_SPEC;
                }
                else goto PRINTF_STATE_SPEC_;
                break;

            case PRINTF_STATE_SPEC:
            PRINTF_STATE_SPEC_:
                switch (*fmt)
                {
                    case 'c':   putc((char)va_arg(args, int));
                                break;

                    case 's':   
                                puts(va_arg(args, const char*));
                                break;

                    case '%':   putc('%');
                                break;

                    case 'd':
                    case 'i':   radix = 10; sign = true; number = true;
                                break;

                    case 'u':   radix = 10; sign = false; number = true;
                                break;

                    case 'X':
                    case 'x':
                    case 'p':   radix = 16; sign = false; number = true;
                                break;

                    case 'o':   radix = 8; sign = false; number = true;
                                break;

                    // ignore invalid spec
                    default:    break;
                }

                if (number)
                {
                    if (sign)
                    {
                        switch (length)
                        {
                        case PRINTF_LENGTH_SHORT_SHORT:
                        case PRINTF_LENGTH_SHORT:
                        case PRINTF_LENGTH_DEFAULT:     printf_signed(va_arg(args, int), radix);
                                                        break;

                        case PRINTF_LENGTH_LONG:        printf_signed(va_arg(args, long), radix);
                                                        break;

                        case PRINTF_LENGTH_LONG_LONG:   printf_signed(va_arg(args, long long), radix);
                                                        break;
                        }
                    }
                    else
                    {
                        switch (length)
                        {
                        case PRINTF_LENGTH_SHORT_SHORT:
                        case PRINTF_LENGTH_SHORT:
                        case PRINTF_LENGTH_DEFAULT:     printf_unsigned(va_arg(args, unsigned int), radix);
                                                        break;
                                                        
                        case PRINTF_LENGTH_LONG:        printf_unsigned(va_arg(args, unsigned  long), radix);
                                                        break;

                        case PRINTF_LENGTH_LONG_LONG:   printf_unsigned(va_arg(args, unsigned  long long), radix);
                                                        break;
                        }
                    }
                }

                // reset state
                state = PRINTF_STATE_NORMAL;
                length = PRINTF_LENGTH_DEFAULT;
                radix = 10;
                sign = false;
                number = false;
                break;
        }

        fmt++;
    }

    va_end(args);
}

void print_buffer(const char* msg, const void* buffer, uint32_t count)
{
    const uint8_t* u8Buffer = (const uint8_t*)buffer;
    
    puts(msg);
    for (uint16_t i = 0; i < count; i++)
    {
        putc(g_HexChars[u8Buffer[i] >> 4]);
        putc(g_HexChars[u8Buffer[i] & 0xF]);
    }
    puts(""\n"");
}
"
cfLnyYiy,Untitled,qyber1,Python,Friday 15th of December 2023 05:52:55 AM CDT,"from pyzabbix import ZabbixAPI
from datetime import datetime
import httplib2
from calendar import monthrange
from apiclient import discovery
from oauth2client.service_account import ServiceAccountCredentials
from pydantic import BaseModel
from date import _get_date
from learn import validate_month, is_valid

fake_data  = {
  ""Тест"": {
    ""hostid"": [""11236"", ""11239""],
     ""data"": {
    ""{$ERROR.CALC.PERIOD}"": ""h1,5m10"",
    ""{$ERROR.PERIOD}"": ""h1,5"",
    ""{$PROC.PERIOD}"": ""h1,5"",
    ""{$SPEED.PERIOD}"": ""h1,5"",
    }
}
}

class Region(BaseModel):
    hostid: str | list[str]
    data: dict


zapi = ZabbixAPI(server='https://zabbix-med.bars.group/')
zapi.login(user='iv.isaev', password='VMZUp7Al')

def main():
    CREDENTIALS_FILE = 'idyllic-pact-405407-6d7a8f5eb056.json'  # Имя файла с закрытым ключом, вы должны подставить свое
    # spreadsheetID = '1bH7qC8clHeWqkThHlf5DcDUv6g_XkCHkW-WKOxE8r6A'
    spreadsheetID = '1fLs023LCXCESlnFrnEvM0Y1FdkVacI2xqUqbRa8OCs0'
    # Читаем ключи из файла
    credentials = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE,
                                                               ['https://www.googleapis.com/auth/spreadsheets',
                                                                'https://www.googleapis.com/auth/drive'])
    httpAuth = credentials.authorize(httplib2.Http())  # Авторизуемся в системе
    service = discovery.build('sheets', 'v4', http=httpAuth)  # Выбираем работу с таблицами и 4 версию API
    spreadsheet: dict = service.spreadsheets().values().get(spreadsheetId=spreadsheetID, range='Лист1!A:C').execute()
    regions = spreadsheet.get('values')[2:]
    print(regions)
    for region in regions:
        if len(region) in [1, 2]:
            continue
        else:
            name, start_date, end_date = region
            start_, end_ = _get_date(start_date, end_date)
            reg = Region(**fake_data[name])
            print(reg.hostid)
            if isinstance(reg.hostid, list):
                for id in reg.hostid:
                    macros = zapi.usermacro.get(filter={""hostid"": id, 'macro': ['{$END}', '{$START}']})
                    if region[-1] == macros[0][""value""] and region[1] == macros[1][""value""]:
                        break
                    else:
                        full_macros = zapi.usermacro.get(hostids=id, output='extend')
                        if is_valid(start_, end_):
                            result = []
                            for macro in full_macros:
                                if macro['macro'] == '{$END}':
                                    params = {
                                        'hostmacroid': macro['hostmacroid'],
                                        'value': end_date
                                    }
                                    result.append(params)
                                elif macro['macro'] == '{$START}':
                                    params = {
                                        'hostmacroid': macro['hostmacroid'],
                                        'value': start_date
                                    }
                                    result.append(params)
                                elif macro['macro'] in ['{$ERROR.CALC.PERIOD}', '{$ERROR.PERIOD}', '{$PROC.PERIOD}', '{$SPEED.PERIOD}']:
                                    if validate_month(start_.strftime('%m'), end_.strftime('%m')):
                                        current = monthrange(int(start_.strftime('%Y')), int(start_.strftime('%m')))
                                        params = {
                                            'hostmacroid': macro['hostmacroid'],
                                            'value':f'md{int(start_.strftime(""%d""))}-{current[-1]},1-{int(end_.strftime(""%d""))}{reg.data[macro[""macro""]]}'
                                        }
                                        result.append(params)
                                    else:
                                        params = {
                                            'hostmacroid': macro['hostmacroid'],
                                            'value': f'md{int(start_.strftime(""%d""))}-{int(end_.strftime(""%d""))}{reg.data[macro[""macro""]]}'
                                        }
                                        result.append(params)
                            print(result)
                            zapi.usermacro.update(*result)
                        else:
                            print('Неверная дата')
            else:
                macros = zapi.usermacro.get(filter={""hostid"": reg.hostid, 'macro': ['{$END}', '{$START}']})
                if region[-1] == macros[0][""value""] and region[1] == macros[1][""value""]:
                    break
                else:
                    full_macros = zapi.usermacro.get(hostids=reg.hostid, output='extend')
                    if is_valid(start_, end_):
                        result = []
                        for macro in full_macros:
                            if macro['macro'] == '{$END}':
                                params = {
                                    'hostmacroid': macro['hostmacroid'],
                                    'value': end_date
                                }
                                result.append(params)
                            elif macro['macro'] == '{$START}':
                                params = {
                                    'hostmacroid': macro['hostmacroid'],
                                    'value': start_date
                                }
                                result.append(params)
                            elif macro['macro'] in ['{$ERROR.CALC.PERIOD}', '{$ERROR.PERIOD}', '{$PROC.PERIOD}',
                                                    '{$SPEED.PERIOD}']:
                                if validate_month(start_.strftime('%m'), end_.strftime('%m')):
                                    current = monthrange(int(start_.strftime('%Y')), int(start_.strftime('%m')))
                                    params = {
                                        'hostmacroid': macro['hostmacroid'],
                                        'value': f'md{int(start_.strftime(""%d""))}-{current[-1]},1-{int(end_.strftime(""%d""))}{reg.data[macro[""macro""]]}'
                                    }
                                    result.append(params)
                                else:
                                    params = {
                                        'hostmacroid': macro['hostmacroid'],
                                        'value': f'md{int(start_.strftime(""%d""))}-{int(end_.strftime(""%d""))}{reg.data[macro[""macro""]]}'
                                    }
                                    result.append(params)
                        print(result)
                        zapi.usermacro.update(*result)
            print('Out')



if __name__ == '__main__':
    main()"
FNzXTj1N,Untitled,mdigetcake,Lua,Friday 15th of December 2023 05:40:24 AM CDT,"local Item = peripheral.find(""inventory"")
local monitor= peripheral.find(""monitor"")

while(true)do
    Lamp=Item.getItemDetail(1)
    monitor.write(tostring(1600-Lamp.damage))
	os.sleep(10)
	monitor.clear()
end"
qd2tUbrK,dijkstra,mint21,C++,Friday 15th of December 2023 05:18:48 AM CDT,"#include<bits/stdc++.h>
using namespace std;

struct krawedz
{
    int w2;
    int waga;
};
vector<vector<krawedz>> Graf;
vector<bool> Odwiedzone;
vector<int> Koszt;
krawedz kraw;

void Czytaj()
{
    int n, m, w1, w2, waga1;
    ifstream fin(""graf.txt"");
    fin >> n >> m;
    Graf.resize(n);

    for(int i=0; i<m; i++)
    {
        fin >> w1 >> w2 >> waga1;
        kraw.w2 = w2;
        kraw.waga = waga1;
        Graf[w1].push_back(kraw);
    }
    fin.close();
}

void Wypisz()
{
    for(int i=0; i<Graf.size(); i++)
    {
        cout << i << "": "";
        for(int j=0; j<Graf[i].size(); j++)
            cout << ""["" << Graf[i][j].w2 << "","" << Graf[i][j].waga << ""] "";
        cout << endl;
    }
}

void Dijkstra(int pocz)
{
    int k, w1;
    vector<bool> Odwiedzone;
    Odwiedzone.resize(Graf.size(), false);
    Koszt[pocz] =0;
    for(int i=0; i<Graf.size()-1; i++)
    {
        k=0;
        while(Odwiedzone[k])
            k++;
        w1=k;
        for(int j = k+1; j< Graf.size(); j++)
            if(!Odwiedzone[j]&& Koszt[j] < Koszt[w1])
            w1 = j;
        Odwiedzone[w1] =true;
        for(int j=0; j<Graf[w1].size(); j++)
        {
            kraw = Graf[w1][j];
            if(!Odwiedzone[kraw.w2]&& Koszt[w1]+kraw.waga < Koszt[kraw.w2])
                Koszt[kraw.w2] = Koszt[w1] + kraw.waga;
        }
    }
}
int main()
{
    Czytaj();
    Wypisz();
    Koszt.resize(Graf.size(), 1000);
    int pocz;
    cout << ""Numer wiercholka poczatkowego:"";
    cin >> pocz;
    Dijkstra(pocz);
    cout << ""Koszt dojscia z wierzcholka "" << pocz << "" do wierzcholka:"" << endl;
    for(int i=0; i<Graf.size(); i++)
        if(i!=pocz)
        cout << i << "": "" << Koszt[i] << endl;
}
"
WDeW0GvP,G2A Refund Exploit Dec 2023,G2ARefundExploit,GetText,Friday 15th of December 2023 04:44:18 AM CDT,"G2A refund exploit updated guide - any item for free on G2A.com

https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view#g2a_refund_exploit.pdf

Working as of 
13 December 2023

491356"
cBzwh2C4,vlktut main.cpp as of 2023-12-15,Kitomas,C++,Friday 15th of December 2023 04:42:32 AM CDT,"#include <libxmp-lite/xmp.h>
#define SDL_MAIN_HANDLED
#include <SDL2/SDL.h>
#include <SDL2/SDL_vulkan.h> //why isn't this included inside SDL.h?
#include <glm/glm.hpp>
#include <vulkan/vulkan.h>

#include <iostream>
#include <stdexcept>
#include <cstdlib>

#include <vk/vk_all.hpp>
#include <sfx.hpp>
#include <file.hpp>


class HelloTriangleApplication {
public:
  void run(Uint32 winW = 640, Uint32 winH = 480){
    _initWindow(winW, winH);
    _initVulkan();
    _mainLoop();
    _cleanup();
  }


private:
  SDL_Window* _window = nullptr;
  Uint32 _windowID = 0;

  VkInstance _instance = nullptr;


  void _createInstance(){
    VkApplicationInfo appInfo{};
    appInfo.sType              = VK_STRUCTURE_TYPE_APPLICATION_INFO;
    appInfo.pApplicationName   = ""cool triangle"";
    appInfo.applicationVersion = VK_MAKE_VERSION(1,0,0);
    appInfo.pEngineName        = ""No Engine"";
    appInfo.engineVersion      = VK_MAKE_VERSION(1,0,0);
    appInfo.apiVersion         = VK_API_VERSION_1_0;


    bool success;  VkResult result;

    Uint32 extensionsReq_len = 0; //# of required extensions
    success = SDL_Vulkan_GetInstanceExtensions(_window, &extensionsReq_len, nullptr);
    if(!success) throw SDL_GetError();
    std::vector<const char*> extensionsReq(extensionsReq_len);
    success = SDL_Vulkan_GetInstanceExtensions(_window, &extensionsReq_len, extensionsReq.data());
    if(!success) throw SDL_GetError();

    Uint32 extensionsHas_len = 0; //# of available extensions
    result = vkEnumerateInstanceExtensionProperties(nullptr, &extensionsHas_len, nullptr);
    if(result != VK_SUCCESS) throw ""vkEnumerateInstanceExtensionProperties() failed"";
    std::vector<VkExtensionProperties> extensionsHas(extensionsHas_len);
    result = vkEnumerateInstanceExtensionProperties(nullptr, &extensionsHas_len, extensionsHas.data());
    if(result != VK_SUCCESS) throw ""vkEnumerateInstanceExtensionProperties() failed"";
/*
    Uint32 extensionsWant_len = 0; //# of desired extensions
    //extensionsWant cannot be larger than extensionsHas
    std::vector<char[VK_MAX_EXTENSION_NAME_SIZE]> extensionsWant(extensionsHas_len);
    for(Uint32 i=0; i<extensionsReq_len; ++i){
      extensionsWant[extensionsWant_len++] = ""aaaa"";
    }
*/


    SDL_Log(""# of required extensions = %u:"",extensionsReq_len);
    for(Uint32 i=0; i<extensionsReq_len; ++i){
      SDL_Log(""  %u: \""%s\"""",i,extensionsReq[i]);
    }

    SDL_Log(""\n# of available extensions = %u:"",extensionsHas_len);
    for(Uint32 i=0; i<extensionsHas_len; ++i){
      SDL_Log(""  %2u: \""%s\"" (%u)"",i,extensionsHas[i].extensionName,extensionsHas[i].specVersion);
    }


    VkInstanceCreateInfo createInfo{};
    createInfo.sType                   = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
    createInfo.pApplicationInfo        = &appInfo;
    createInfo.enabledLayerCount       = 0; //TBD
    //createInfo.enabledExtensionCount   = extensions_len;
    //createInfo.ppEnabledExtensionNames = extensions.data();

    result = vkCreateInstance(&createInfo, nullptr, &_instance);
    if(result == VK_ERROR_EXTENSION_NOT_PRESENT) throw ""vkCreateInstance() = VK_ERROR_EXTENSION_NOT_PRESENT"";
    if(result != VK_SUCCESS) throw ""vkCreateInstance() failed"";
  }


  void _initWindow(Uint32 winW = 640, Uint32 winH = 480){
    _window = SDL_CreateWindow(""a cool triangle"",
                               SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
                               winW, winH, SDL_WINDOW_VULKAN);
    if(_window == nullptr) throw SDL_GetError();
    _windowID = SDL_GetWindowID(_window);
    if(_windowID == 0) throw SDL_GetError();
  }


  void _initVulkan(){
    _createInstance();
  }


  void _mainLoop(){
    bool running = true;
    SDL_Event event;

    while(running){
      while(SDL_PollEvent(&event) && running){
        switch(event.type){
        case SDL_WINDOWEVENT:
          //the window id isn't checked here, so it could theoretically
           //be another window entirely lol
          if(event.window.event == SDL_WINDOWEVENT_CLOSE) running = false;
        }
      }
      SDL_Delay(16);
    }
  }


  void _cleanup(){
    vkDestroyInstance(_instance, nullptr);
    _instance = nullptr;
    if(_window != nullptr){
      SDL_DestroyWindow(_window);
      _window = nullptr;
    }
  }
};



#define M_2PI (3.1415927f*2)
float get_sin(float hertz = 440, int increment = 1){
  static int index = 0;
  float value = SDL_sinf( ((float)index/44100)*M_2PI*hertz );
  index += increment;
  return value;
}

//(t>>4)*(t>>3)|t>>2
float get_sample(){
  static int _t = 0;
  int t = _t * (8000.0f/44100);

  //Uint8 _value = t*(t&16384?6:5)*(4-(1&t>>8))>>(3&t>>9)|t>>(t&4096?3:4);
  Uint8 _value = t<<2^t>>4^t<<4&t>>8|t<<1&-t>>4;
  float value = _sfx_u8conv(_value);

  ++_t;
  return value;
}


void auxCallback(void* userdata, void* _stream, int size){
  int       len = size/sizeof(float);
  float* stream = (float*)_stream;
  for(int i=0; i<len; ++i){
    //stream[i] = get_sin()*0.25f;
    stream[i] = get_sample()*0.25f;

  }
}




int main(int argc, char** argv){
  if(SDL_Init(SDL_INIT_VIDEO|SDL_INIT_AUDIO)) return -1;
/*
  //wip vulkan stuff; ignore
  HelloTriangleApplication app;
  try {
    app.run();
  } catch(const std::exception& e){
    std::cerr << e.what() << std::endl;
    return EXIT_FAILURE;
  } catch(const char* e){
    std::cout << ""error = "" << e << std::endl;
    return EXIT_FAILURE;
  }
*/

  try {
    sfx_class sfx(64); //a maximum of 64 tracks that can play simultaneously
    sfx.setAux(auxCallback, nullptr, AUDIO_F32, 1);
    sfx_pcm loop1(""dat/UNX - LSDLOOP1.kpm"",&sfx); //load sound effect

    sfx.pauseDeviceAndWait(false); //unpause device, and wait for fade-in

    loop1.loopCount = 2; //play 1 + 2 times for a total of 3
    //loop1.play(); //alias for sfx.play(loop1) basically
    SDL_Delay(8000);
    //sfx.waitForTracks(0); //wait for all tracks to stop, with an indefinite timeout

    sfx.pauseDeviceAndWait(true); //pause device, and wait for fade-out

  } catch(const char* e){
    std::cout << ""error = "" << e << std::endl;
    return EXIT_FAILURE;
  }

  SDL_Quit();
  return EXIT_SUCCESS;
}
"
w1Q2GCkb,sfx_callback.cpp as of 2023-12-15,Kitomas,C++,Friday 15th of December 2023 04:35:03 AM CDT,"#include ""_sfx.hpp""




int _sfx_auxCallbackHandler(void* data){
  sfx_class* sfx = (sfx_class*)data;
  std::vector<char>* _stream = sfx->_getAuxStream();

  sfx_auxCallback callback = sfx->getAuxCallback();
  void*           userdata = sfx->_getAuxUserdata();
  void*       _stream_data = (void*)_stream->data();
  int         _stream_size = (int)_stream->size();

  callback(userdata, _stream_data, _stream_size);

  return 0;
}



//workaround for having _sfx_callback pause the device,
 //without having to call SDL_PauseAudioDevice inside the callback itself
int _sfx_pauseThread(void* data){
  sfx_class* sfx = (sfx_class*)data;
  if(sfx->isClosing()) return 0;
  sfx->lockDevice(true);

  //might cause problems if sfx is dangling for whatever reason
  try {
    sfx->lock(true);
  } catch(...){
    sfx->lockDevice(false);
    sfx->_getFadeInDelay() = 0xffffffff; //this should work, right?
    return -1;
  }

  //make sure current buffer finishes playing
  float bufferLengthSeconds = (float)sfx->getBufferLength() / sfx->getSampleRate();
  SDL_Delay(bufferLengthSeconds*1000 + 10); //+10ms just to be sure

  SDL_PauseAudioDevice(sfx->getDeviceID(),1);
  sfx->_setPlaying(false);

  sfx->lockDevice(false);
  sfx->lock(false);
  return 0;
}



void _sfx_callback(void* userdata, Uint8* _stream, int size){
  sfx_class*   sfx = (sfx_class*)userdata;
  sfx_f32s* stream = (sfx_f32s*)_stream;
  int          len = size/sizeof(sfx_f32s);

  size_t numTracks = sfx->getNumTracks();
  std::vector<sfx_track>& tracks = sfx->_getTracks();
  Uint64 timeStampEnd = sfx->getTimeStampEnd();
  SDL_Thread* auxCallbackThread = nullptr;

  sfx->_setTimeStampStart();
  SDL_memset(stream,0,size); //stream must be filled no matter what
  if(sfx->isClosing()) goto _skip_everything_; //if device is closing, exit early

  //if previous attempt to pause sfx failed, exit early
  try {
    sfx->lock(true);
  } catch(...){
    sfx->_getFadeInDelay() = 0xffffffff;
    goto _skip_everything_;
  }
  if(sfx->_getFadeInDelay() == 0xffffffff) goto _unlock_device_;
  if(sfx->_getTracksPtr() == nullptr) goto _unlock_device_;


  //start auxillary callback handler thread, if aux callback is present
  if(sfx->getAuxCallback() != nullptr){
    auxCallbackThread = SDL_CreateThread(_sfx_auxCallbackHandler, ""auxCH_Th"", sfx);
    //if(auxCallbackThread == nullptr) SDL_LogError()
  }


  //mix sound effect tracks
  for(size_t ti=0; ti<numTracks; ++ti){
    if(tracks[ti].pcm != nullptr){
      _sfx_mixTrack(tracks[ti],
                    timeStampEnd,
                    stream, len);
    }
  }


  //wait for auxCallbackThread to finish
   //(passing auxCallbackThread as nullptr is safe here)
  SDL_WaitThread(auxCallbackThread, nullptr);

  //mix output of auxillary callback, if enabled
  if(auxCallbackThread != nullptr){
    std::vector<char>* auxStream   = sfx->_getAuxStream();
    SDL_AudioFormat    auxFormat   = sfx->getAuxFormat();
    Uint16             auxChannels = sfx->getAuxChannels();

    if(auxStream != nullptr){
      _every_sample_type auxSmp = { .data = auxStream->data() };
      if(( auxStream->size()/((auxFormat&255)/8)/auxChannels ) == (unsigned)len){
        switch(_FORMAT_SWITCH(auxChannels,auxFormat)){ //convert format and data type when mixing
        case fmt_u8  : for(int i=0; i<len; ++i) stream[i] += auxSmp.u8  [i];  break;
        case fmt_i16 : for(int i=0; i<len; ++i) stream[i] += auxSmp.i16 [i];  break;
        case fmt_f32 : for(int i=0; i<len; ++i) stream[i] += auxSmp.f32 [i];  break;
        case fmt_u8s : for(int i=0; i<len; ++i) stream[i] += auxSmp.u8s [i];  break;
        case fmt_i16s: for(int i=0; i<len; ++i) stream[i] += auxSmp.i16s[i];  break;
        case fmt_f32s: for(int i=0; i<len; ++i) stream[i] += auxSmp.f32s[i];  break;
        default: ;//SDL_LogError();
        }

      } //else SDL_LogError();
    } //else SDL_LogError();
  }


  //apply linear fade to reduce popping when pausing and unpausing the device
   //(also apply global volume, hard clipping, and pan)
  _sfx_globalFade(sfx, stream, len);

  _unlock_device_  : try { sfx->lock(false); } catch(...){} //just in case
  _skip_everything_: sfx->_setTimeStampEnd();
}

"
yg4eyvtk,sfx_pcm.cpp as of 2023-12-15,Kitomas,C++,Friday 15th of December 2023 04:33:35 AM CDT,"#include ""_sfx.hpp""
#include <file.hpp>




sfx_pcm::sfx_pcm(const std::string& filePath,
                 const sfx_class* sfx_ptr)
{
  int deviceSampleRate = DEFAULT_SAMPLERATE;
  if(sfx_ptr != nullptr) deviceSampleRate = sfx_ptr->getSampleRate();
  if(deviceSampleRate < 1000) throw ""sfx_ptr->_sampleRate < 1000"";
  if(deviceSampleRate > 384000) throw ""sfx_ptr->_sampleRate > 384000"";

  //load pcm data
  std::vector<char> fileDataIn = file_readBin(filePath);
  if(fileDataIn.size() < sizeof(sfx_pcm)) throw ""fileSize < sizeof(sfx_pcm)"";

  //header validation stuff
  sfx_pcm* hdr = (sfx_pcm*)fileDataIn.data();
  //hdr->print(); //for debug

  if(hdr->magic != SFX_PCM_MAGIC) throw ""magic != SFX_PCM_MAGIC"";
  if(_format_invalid(hdr->format)) throw ""format is invalid"";
  if(hdr->headerSize < sizeof(sfx_pcm)) throw ""headerSize < sizeof(sfx_pcm)"";
  if(hdr->dataSize != (fileDataIn.size()-hdr->headerSize)) throw ""dataSize is invalid"";
  //(numSamples is checked before loopStart/loopEnd, as their checks rely upon numSamples)
  if(hdr->numSamples != (hdr->dataSize/((hdr->format&255)/8))/hdr->channels) throw ""numSamples is invalid"";
  if(hdr->loopStart >= hdr->numSamples) throw ""loopStart >= numSamples"";
  if(hdr->loopEnd > hdr->numSamples) throw ""loopEnd > numSamples"";
  //(channels are checked before numSamples to prevent divide-by-zero exceptions)
  if(hdr->channels!=1 && hdr->channels!=2) throw ""audio is neither mono nor stereo"";
  if(hdr->sampleRate < 1000) throw ""sampleRate < 1000"";
  if(hdr->bitRate != hdr->sampleRate*hdr->channels*(hdr->format&255)) throw ""bitRate is invalid"";
  void* smpData = fileDataIn.data() + hdr->headerSize;


  //convert data type to float stereo
  Uint64 numSamplesIn = hdr->numSamples;
  std::vector<sfx_f32s> samplesF32S(numSamplesIn);
  _every_sample_type smp = { .data = smpData };

  switch(_FORMAT_SWITCH(hdr->channels,hdr->format)){
  case fmt_u8  : for(Uint64 i=0; i<numSamplesIn; ++i) samplesF32S[i] = smp.u8  [i];  break;
  case fmt_i16 : for(Uint64 i=0; i<numSamplesIn; ++i) samplesF32S[i] = smp.i16 [i];  break;
  case fmt_f32 : for(Uint64 i=0; i<numSamplesIn; ++i) samplesF32S[i] = smp.f32 [i];  break;
  case fmt_u8s : for(Uint64 i=0; i<numSamplesIn; ++i) samplesF32S[i] = smp.u8s [i];  break;
  case fmt_i16s: for(Uint64 i=0; i<numSamplesIn; ++i) samplesF32S[i] = smp.i16s[i];  break;
  case fmt_f32s: for(Uint64 i=0; i<numSamplesIn; ++i) samplesF32S[i] = smp.f32s[i];  break;
  default: throw ""channels/format is invalid (this exception should be impossible)"";
  }


  //set relevant header values
  *this    = *hdr;
  magic    = 0;
  format   = AUDIO_F32;
  channels = 2;
  sfx      = (sfx_class*)sfx_ptr;
  //--------------------------------------------------------
  double inRatio = (double)hdr->sampleRate/deviceSampleRate;
  numSamples = ( ((double)hdr->numSamples)/inRatio ) + 0.5;
  loopStart  = ( ((double)hdr->loopStart )/inRatio ) + 0.5;
  loopEnd    = ( ((double)hdr->loopEnd   )/inRatio ) + 0.5;
  dataSize   = numSamples * sizeof(sfx_f32s);
  sampleRate = deviceSampleRate;
  bitRate    = deviceSampleRate * sizeof(sfx_f32s) * 8;
  loopCount  = hdr->loopCount;

  if(numSamples == 0) throw ""output's numSamples was equal to 0"";
  samples = new std::vector<sfx_f32s>(numSamples);
  std::vector<sfx_f32s>& samplesRef = *samples; //reference to output samples


  //do linear sample rate conversion, with a target of deviceSampleRate
  --numSamplesIn; // = highest element index of input samples
  Uint64 numSamplesOut = numSamples - 1; // = highest element index of output samples
  double inPosition = 0,  inSpeed = (double)numSamplesIn/numSamplesOut;
  if(inSpeed <= 0) throw ""sample rate conversion delta <= 0""; //just in case

  for(Uint64 i=0; i<numSamplesOut; ++i){
    samplesRef[i] = sfx_linearSample(samplesF32S, inPosition);
    inPosition += inSpeed;
  }

  //handle last sample separately to (hopefully) account for any previous rounding errors
  samplesRef[numSamplesOut] = samplesF32S.at(numSamplesIn);


  magic = SFX_PCM_MAGIC; //signature is set properly to indicate success
}




void sfx_pcm::print(const size_t samplesToPrint){
  SDL_Log(""magic        = \""%.4s\"" (0x%08X)"", (char*)&magic, magic);
  switch(format){
  case AUDIO_U8 : SDL_Log(""format       = AUDIO_U8 (0x%04X)"",  format); break;
  case AUDIO_S16: SDL_Log(""format       = AUDIO_S16 (0x%04X)"", format); break;
  case AUDIO_F32: SDL_Log(""format       = AUDIO_F32 (0x%04X)"", format); break;
  default:        SDL_Log(""format       = UNKNOWN (0x%04X)"",   format); }
  SDL_Log(""headerSize   = %u"", headerSize);
  SDL_Log(""dataSize     = %u"", (unsigned)dataSize); //overflows if dataSize > 4GB

  SDL_Log(""loopStart    = %u"", (unsigned)loopStart);
  SDL_Log(""loopEnd      = %u"", (unsigned)loopEnd);

  SDL_Log(""numSamples   = %u"", (unsigned)numSamples);
  SDL_Log(""sampleRate   = %u"", sampleRate);
  SDL_Log(""bitrate      = %u"", bitRate);

  SDL_Log(""loopCount    = %u"", loopCount);
  SDL_Log(""channels     = %u"", channels);
  SDL_Log(""bitRemainder = %u"", bitRemainder);
  SDL_Log(""userflags    = 0x%02X"", userflags);
  SDL_Log(""mode         = %u"", mode);

  if(samplesToPrint > 0){
    if(format!=AUDIO_F32 || channels!=2) throw ""data type is not f32s"";
    Uint64 sampleRange = std::min(samplesToPrint, numSamples);
    std::vector<sfx_f32s>& samplesRef = *samples;

    for(Uint32 i=0; i<sampleRange; ++i)
      SDL_Log(""%4u: %7.4f, %7.4f"", i, samplesRef.at(i).l,samplesRef.at(i).r);
  }
}
"
LYpnXGge,sfx.hpp as of 2023-12-15,Kitomas,C++,Friday 15th of December 2023 04:32:42 AM CDT,"#pragma once

#include <SDL2/SDL.h>

#include <algorithm>
#include <string>
#include <vector>


#define DEFAULT_SAMPLERATE (44100)
#define DEFAULT_BITRATE    (DEFAULT_SAMPLERATE*sizeof(sfx_f32s)*8)
#define DEFAULT_BUFFERLEN (2048)




/*******/
/* sfx */
/*******/

extern const float _sfx_i8inv;  // = 1/2^7
extern const float _sfx_i16inv; // = 1/2^15

//for converting i8/i16 to f32
#define _sfx_u8conv(_v)  ( (float)((Sint8)((_v)-128)) * _sfx_i8inv  )
#define _sfx_i16conv(_v) ( (float)(        (_v)     ) * _sfx_i16inv )



struct sfx_u8s  {
  Uint8  l,r;
  sfx_u8s() : l(0), r(0) {}
  sfx_u8s(const Uint8 _l, const Uint8 _r) : l(_l), r(_r) {}
};

struct sfx_i16s {
  Sint16 l,r;
  sfx_i16s() : l(0), r(0) {}
  sfx_i16s(const Sint16 _l, const Sint16 _r) : l(_l), r(_r) {}
};

struct sfx_f32s {
  float l,r;
  sfx_f32s() : l(0), r(0) {}
  sfx_f32s(const float& _l, const float& _r) : l(_l), r(_r) {}
  sfx_f32s(const int&    _v) : l(_v), r(_v) {}
  sfx_f32s(const double& _v) : l(_v), r(_v) {}

  sfx_f32s(const Uint8&  smp){ l = _sfx_u8conv( smp);  r = _sfx_u8conv( smp); }
  sfx_f32s(const Sint16& smp){ l = _sfx_i16conv(smp);  r = _sfx_i16conv(smp); }
  sfx_f32s(const float& smp){ l = smp;  r = smp; }

  sfx_f32s(const sfx_u8s&  smp){ l = _sfx_u8conv( smp.l);  r = _sfx_u8conv( smp.r); }
  sfx_f32s(const sfx_i16s& smp){ l = _sfx_i16conv(smp.l);  r = _sfx_i16conv(smp.r); }
  sfx_f32s(const sfx_f32s& smp){ l = smp.l;  r = smp.r; }


  sfx_f32s& operator+=(const Uint8&  smp){ l += _sfx_u8conv( smp);  r += _sfx_u8conv( smp);  return *this; }
  sfx_f32s& operator+=(const Sint16& smp){ l += _sfx_i16conv(smp);  r += _sfx_i16conv(smp);  return *this; }
  sfx_f32s& operator+=(const float&  smp){ l += smp;                r += smp;                return *this; }

  sfx_f32s& operator+=(const sfx_u8s&  smp){ l += _sfx_u8conv( smp.l);  r += _sfx_u8conv( smp.r);  return *this; }
  sfx_f32s& operator+=(const sfx_i16s& smp){ l += _sfx_i16conv(smp.l);  r += _sfx_i16conv(smp.r);  return *this; }

  sfx_f32s& operator+=(const sfx_f32s& smp){ l += smp.l;  r += smp.r;  return *this; }
  sfx_f32s& operator-=(const sfx_f32s& smp){ l -= smp.l;  r -= smp.r;  return *this; }
  sfx_f32s& operator*=(const sfx_f32s& smp){ l *= smp.l;  r *= smp.r;  return *this; }


  sfx_f32s& clip(){ l = std::clamp(l, -1.0f,1.0f);  r = std::clamp(r, -1.0f,1.0f);  return *this; }
  sfx_f32s& unit(){ l = std::clamp(l,  0.0f,1.0f);  r = std::clamp(r,  0.0f,1.0f);  return *this; }
};




/*************/
/* sfx_class */
/*************/

typedef void (SDLCALL * sfx_auxCallback) (void* userdata, void* _stream, int size);

struct sfx_pcm; //forward declaration

struct sfx_track { //64B
  sfx_pcm*         pcm = nullptr; //audio data; track considered available/inactive if nullptr
  Uint64     timeStamp; //result of SDL_GetTicks64() called at time of queueing an audio clip

  double      position; //sample position, including fraction
  double         speed; //what amount to increase position by every sample
  double    speedDelta; //what number to apply to speed every sample

  sfx_f32s      volume; //left and right channel volumes; 0.0f -> 1.0f
  sfx_f32s volumeDelta; //determines the rate at which volume changes each sample
  float            pan; //the current pan of the track; -1.0f -> 1.0f (should be applied AFTER volume)

  Uint16         loops; //number of times to loop before deactivating clip (-1 for endless loop)
  bool      stopOnMute = true; //'deactivate track when volume or speed reaches 0?'
  bool        stopping = false; //used inside _sfx_mixTrack
};



class sfx_class { //???B
  bool                 _valid = false;
  bool               _closing = false;
  bool               _fadeOut = false;
  bool               _playing = false;
  SDL_AudioDeviceID _deviceID = 0;

  Uint64 _timeStampStart = 0;
  Uint64   _timeStampEnd = 0;

  std::vector<sfx_track>* _tracks = nullptr;
  SDL_mutex*                _lock = nullptr;

  sfx_f32s    _volume = 1.0f;
  float          _pan = 1.0f;

  Uint32 _fadeInDelay = 0;
  float  _fadeDelta   = 0;
  float  _fadeVolume  = 0;

  Uint32      _sampleRate = DEFAULT_SAMPLERATE;
  Uint32    _bufferLength = DEFAULT_BUFFERLEN;
  std::string _deviceName;

  sfx_auxCallback    _auxCallback = nullptr;
  void*              _auxUserdata = nullptr;
  std::vector<char>* _auxStream   = nullptr;
  SDL_AudioFormat    _auxFormat   = AUDIO_F32;
  Uint16             _auxChannels = 2;



public:
  //should be used solely by _sfx_callback related stuff
   //(these are hardly public functions; do not touch these, seriously)
  sfx_f32s& _getVolume(){ return _volume; }
  float& _getPan(){ return _pan; }
  Uint32& _getFadeInDelay(){ return _fadeInDelay; }
  float& _getFadeDelta(){ return _fadeDelta; }
  float& _getFadeVolume(){ return _fadeVolume; }
  std::vector<sfx_track>& _getTracks(){ return *_tracks; }
  std::vector<sfx_track>* _getTracksPtr(){ return _tracks; }
  void* _getAuxUserdata(){ return _auxUserdata; }
  std::vector<char>* _getAuxStream(){ return _auxStream; }

  void _setPlaying(bool playState){ _playing = playState; }
  void _setTimeStampStart(){ _timeStampStart = SDL_GetTicks64(); }
  void _setTimeStampEnd(){ _timeStampEnd = SDL_GetTicks64(); }


  //you can use these ones, though
  bool isValid() const { return _valid; }
  bool isClosing() const { return _closing; }
  bool isFadingOut() const { return _fadeOut; }
  bool isPlaying() const { return _playing; }
  SDL_AudioDeviceID getDeviceID() const { return _deviceID; }
  Uint64 getTimeStampStart() const { return _timeStampStart; }
  Uint64 getTimeStampEnd() const { return _timeStampEnd; }
  size_t getNumTracks() const { return _tracks->size(); }
  sfx_f32s getVolume() const { return _volume; }
  sfx_f32s getPan() const { return _pan; }
  Uint32 getSampleRate() const { return _sampleRate; }
  Uint32 getBufferLength() const { return _bufferLength; }
  std::string& getDeviceName(){ return _deviceName; }
  sfx_auxCallback getAuxCallback(){ return _auxCallback; }
  SDL_AudioFormat getAuxFormat(){ return _auxFormat; }
  Uint16 getAuxChannels(){ return _auxChannels; }


  sfx_class(const Uint32 numTracks,
            const int sampleRate = DEFAULT_SAMPLERATE,
            const std::string& deviceName = """",
            const Uint32 bufferLength = DEFAULT_BUFFERLEN);

  ~sfx_class();

  void setVolume(sfx_f32s volume);
  void setPan(float pan);


  void lock(bool lockState);
  void lockDevice(bool lockState);

  void pauseDevice(bool pauseState);
  void pauseDeviceAndWait(bool pauseState);


  void waitForTracks(Uint64 timeoutMS = 8000);
  void waitForTrack(int track, Uint64 timeoutMS = 8000);

  int play(const sfx_pcm* pcm,
           sfx_f32s volume = 1.0f,
           double speed = 1.0,
           float pan = 0.0f);

  void stop(int track);
  void stopAll();
  void stopAllForced(); //marks tracks as finished, rather than fading out over 10ms


  Uint32 getNumActiveTracks();
  bool isTrackPlaying(int track);
  sfx_track* getTrackPtr(int track);

  void setTrackVolumeDelta(int track, sfx_f32s volumeDeltaSeconds);
  void setTrackSpeedDelta(int track, double speedDeltaSeconds);
  void setAux(sfx_auxCallback callback, void* userdata = nullptr,
              SDL_AudioFormat format = AUDIO_F32, Uint16 channels = 2);
};




/***********/
/* sfx_pcm */
/***********/

#define SFX_PCM_MAGIC (0x4D43506B)
struct sfx_pcm { //an altered (but backwards compatible) version of kit_acodecPCM; 72B
  Uint32                   magic = 0;                  // (0x00) = 0x4D43506B = ""kPCM"" (no terminator)
  SDL_AudioFormat         format = AUDIO_F32;          // (0x04) The data format of the stream
  Uint16              headerSize = sizeof(sfx_pcm);    // (0x06) = sizeof(sfx_pcm)
  Uint64                dataSize = 0;                  // (0x08) The size of the PCM buffer, in bytes

  Uint64               loopStart = 0;                  // (0x10) Which sample to loop back to
  Uint64                 loopEnd = 0;                  // (0x18) Which sample to restart the loop on

  Uint64              numSamples = 0;                  // (0x20) # of sample frames in stream
  Uint32              sampleRate = DEFAULT_SAMPLERATE; // (0x28) The stream's sample rate, in Hz
  Uint32                 bitRate = DEFAULT_BITRATE;    // (0x2C) The audio's bit rate (per second)

  Uint16               loopCount = 0;                  // (0x30) # of times to loop audio (0 = no loop, -1 = inf loop)
  Uint16                channels = 2;                  // (0x32) # of interlaced channels in the stream
  Uint8             bitRemainder = 0;                  // (0x34) = bitsPerSample%8
  Uint8                userflags = 0;                  // (0x35) User-defined (is just padding otherwise)
  Uint16                    mode = 0;                  // (0x36) 0 = normal pcm
  std::vector<sfx_f32s>* samples = nullptr;            // (0x38) Sample data (appears as nullptr in file)
  sfx_class*                 sfx = nullptr;            // (0x40) Bound sfx class (appears as nullptr in file)


  // Samples will be converted to f32s at deviceSampleRate Hz
  sfx_pcm(const std::string& filePath, const sfx_class* sfx_ptr = nullptr);

  ~sfx_pcm(){
    magic = 0; //a magic of 0 indicates an invalid pcm struct
    delete samples;
    samples = nullptr; //just in case
  }


  void print(const size_t samplesToPrint = 0);


  void setSfx(sfx_class* sfx_ptr){ sfx = sfx_ptr; }


  int play(sfx_f32s volume = 1.0f, double speed = 1.0, float pan = 0.0f){
    if(sfx != nullptr) return sfx->play(this, volume, speed, pan);
    else throw ""no sfx_class instance currently bound"";
  }
};
"
aCYKmZXi,_sfx.hpp as of 2023-12-15,Kitomas,C++,Friday 15th of December 2023 04:31:48 AM CDT,"#pragma once

#include <sfx.hpp>


//500ms
#define _totalFadeDelay (0.500f)

//linearly fade over the course of 10ms
#define _fadeDeltaSeconds (0.010f)

//the most common audio clipping ends at 10-11ms after unpausing,
 //but i've seen clipping as far as ~450ms after unpausing
#define _fadeInDelaySeconds (_totalFadeDelay - _fadeDeltaSeconds)


//lower clip's volume to 0 within 10ms if speed reaches 0
#define _speed0DeltaVolMS (10.0f)




union _every_sample_type {
  void*     data;
  Uint8*    u8;
  Sint16*   i16;
  float*    f32;
  sfx_u8s*  u8s;
  sfx_i16s* i16s;
  sfx_f32s* f32s;
};



#define _FORMAT_SWITCH(_channels, _format) ( ((_channels)<<16) | (_format) )
enum _format_switch_enum {
  fmt_u8   = _FORMAT_SWITCH(1,AUDIO_U8 ),
  fmt_i16  = _FORMAT_SWITCH(1,AUDIO_S16),
  fmt_f32  = _FORMAT_SWITCH(1,AUDIO_F32),
  fmt_u8s  = _FORMAT_SWITCH(2,AUDIO_U8 ),
  fmt_i16s = _FORMAT_SWITCH(2,AUDIO_S16),
  fmt_f32s = _FORMAT_SWITCH(2,AUDIO_F32),
};



static inline bool _format_invalid(SDL_AudioFormat format){
  if(format == AUDIO_U8 ) return false;
  if(format == AUDIO_S16) return false;
  if(format == AUDIO_F32) return false;
  return true; //any other format is invalid
}




#ifndef LERP2
#define LERP2(_v0,_v1, _t) ( (_v0) + (_t)*((_v1)-(_v0)) )
#endif

static inline sfx_f32s sfx_linearSample(std::vector<sfx_f32s>& src,
                                        double& position,
                                        Uint64 loopEnd = 0xffffffffffffffff)
{
  Uint64 intPosition = (Uint64)position;
  double modPosition = position-intPosition;

  sfx_f32s smpA = src.at(   intPosition);
  sfx_f32s smpB = src.at((++intPosition)%loopEnd);

  sfx_f32s smpOut(
    LERP2(smpA.l, smpB.l, modPosition),
    LERP2(smpA.r, smpB.r, modPosition)
  );
  return smpOut;
}




/****************/
/* sfx_callback */
/****************/

static inline sfx_f32s& _sfx_applyPan(sfx_f32s& sample, float pan){
  //(i think this is how audacity does it...)
  if(pan < 0){
    sample.l += sample.r*(-pan);
    sample.r *= 1.0f+pan;
  } else if(pan > 0){
    sample.r += sample.l*pan;
    sample.l *= 1.0f-pan;
  }
  return sample;
}


static inline void _sfx_mixTrack(sfx_track& track, Uint64 sfxTimeStampEnd,
                                 sfx_f32s* dst, int dst_len)
{
  sfx_pcm* pcm = track.pcm;
  const sfx_f32s speed0VolumeDelta = -( (1000.0f/_speed0DeltaVolMS) / pcm->sampleRate );

  if(track.timeStamp > 0){
    //calculate position based on difference between device and clip timestamps
     //(timeStampEnd is used instead of Start, so the clip's time stamp
     // can be compared to the last time the device callback exited)
    double difference = (double)(track.timeStamp-sfxTimeStampEnd)/1000;
    difference *= pcm->sampleRate; //convert seconds to samples
    track.position = -(difference*track.speed); //starts playing when position reaches 0

    track.timeStamp = 0; //to ensure that this only occurs once per clip queued
  }


  //make copies of relevant track values
  float  pan       = std::clamp(track.pan, -1.0f,1.0f);
  Uint64 loopStart = pcm->loopStart;
  Uint64 loopEnd   = pcm->loopEnd;
  std::vector<sfx_f32s>& src = *pcm->samples;
   //
  double position = track.position;
  double speed    = track.speed;
  Uint16 loops    = track.loops;
  bool   stopping = track.stopping;

  //make sure volume is clamped before applying it to the first sample,
   //since volume is only clamped after volumeDelta is applied otherwise
  track.volume.unit(); //clamp to 0.0 -> 1.0


  for(int i=0; i<dst_len; ++i){
    //loop handling (or end-of-clip handling i guess)
    if(position >= loopEnd){ //clip finished loop
      if(!loops){ stopping = true; break; } //mark as inactive and break
      if(loops != 0xffff) --loops; //decrement loops (unless infinite)
      position -= (Uint64)position; //basically position %= 1
      position += loopStart; //now new_position = loopStart + old_position%1

    } else if(position < 0){ //clip has yet to start playing
      if(position < -speed){
        position += speed; //step forward by current speed
        continue;
      } else { //if position >= -speed, the clip should start next sample
        position = 0; //make sure clip starts at 0
      }

    }

    //get sample, apply volume, hard clip to -1.0f -> 1.0f
    sfx_f32s sample = sfx_linearSample(src, position, loopEnd);
    sample *= track.volume;
    sample.clip();

    //apply pan and mix, apply volumeDelta, clamp volume to 0.0f -> 1.0f
    dst[i] += _sfx_applyPan(sample,pan);
    track.volume += track.volumeDelta;
    track.volume.unit();

    //update position, apply speedDelta, start fade out if clip's speed <= 0
    position += speed;
    speed += track.speedDelta;
    if(speed <= 0){
      speed = 0;
      track.volumeDelta = speed0VolumeDelta;
    }
  }


  //update relevant values in track
  track.position = position;
  track.speed    = speed;
  track.loops    = loops;
  track.stopping = stopping;

  if(track.volume.l<=0 && track.volume.r<=0  &&  track.stopOnMute)
    track.stopping = true;

  if(track.stopping) track.pcm = nullptr;
}



extern int _sfx_pauseThread(void* data);

static inline void _sfx_globalFade(sfx_class* sfx, sfx_f32s* stream, int len){
  sfx_f32s  fadeDelta      = sfx->_getFadeDelta();
  sfx_f32s  fadeVolume     = sfx->_getFadeVolume();
  sfx_f32s& volume         = sfx->_getVolume();
  float&    pan            = sfx->_getPan();
  Uint32&   fadeInDelayRef = sfx->_getFadeInDelay();
  Uint32    fadeInDelay    = fadeInDelayRef;

  int i = 0; //this index is shared, as the loops can jump to others at will


  //FADING OUT
  if(sfx->isFadingOut()){ _fade_out_:;
    for(; i<len; ++i){
      if(!sfx->isFadingOut()) goto _fade_in_;
      stream[i] *= fadeVolume;
      fadeVolume -= fadeDelta;
      if(fadeVolume.l < 0) fadeVolume = 0.0f;
    }

    //trigger pause thread if fade out is complete
    if(fadeVolume.l <= 0.0f){
      SDL_Thread* pauseThread = SDL_CreateThread(_sfx_pauseThread,""_PauseTh"", sfx);
      //setting _fadeInDelay to -1 will cause further calls to the device callback
       //to simply memset 0 until sfx_class::pause() is called again
      if(pauseThread == NULL) fadeInDelayRef = 0xffffffff;
      else SDL_DetachThread(pauseThread); //make sure thread cleans up when finished
    }


  //FADING IN
  } else if(fadeVolume.l < 1.0f){
    for(; (fadeInDelay)&&(i<len); ++i){ //let device warm up before fading in
      stream[i] = 0.0f;  --fadeInDelay;
    }
    _fade_in_:;
    for(; i<len; ++i){
      if(sfx->isFadingOut()) goto _fade_out_;
      else if(fadeVolume.l >= 1.0f){ fadeVolume = 1.0f; break; }
      stream[i] *= fadeVolume;
      fadeVolume += fadeDelta;
    }

  }


  //even if no fade is being done, output should be hard clipped no matter what
   //(while we're at it, apply global volume and pan too i guess)
  for(i=0; i<len; ++i){
    stream[i] *= volume;
    stream[i].clip();
    stream[i] = _sfx_applyPan(stream[i], std::clamp(pan, -1.0f,1.0f));
  }


  //update any relevant new values for sfx
  sfx->_getFadeVolume() = fadeVolume.l; //.l should equal .r anyway
  if(fadeInDelayRef != 0xffffffff) fadeInDelayRef = fadeInDelay;
}
"
VQJMubJZ,kpm_convert.py,Kitomas,Python,Friday 15th of December 2023 04:30:32 AM CDT,"#converts uncompressed pcm .wav files to mode 0 .kpm
if __name__ != ""__main__"": exit(0) #lol
from time import time
from sys import argv
from os import listdir, system as cmd
from os.path import isfile, join
import wave



#beeg line
def getFilenames(fldr = "".""): return [f for f in listdir(fldr) if isfile(join(fldr,f)) and f != argv[0].split(""\\"")[-1] and f.split(""."")[-1] != ""kpm""]

def getArgPath(indx):
    try:
        return argv[indx]
    except IndexError:
        return ""."" #current directory
        
def tryInt(string):
    try:
        return int(string)
    except ValueError:
        return None
    except TypeError:
        return None
       
def replaceExtension(filename,extension):
    split = filename.split(""."")[:-1]
    if len(split) == 0: return filename + extension
    else:               return (""."").join(split) + extension



folderin  = getArgPath(1)
folderout = getArgPath(2)
filenames = None
try:
    filenames = getFilenames(folderin)
except FileNotFoundError as err:
    print(err)
    exit(1)

if len(filenames) == 0:
    print(""folder \""{}\"" is empty!"".format(folderin))
    cmd(""pause"")
    exit(1)

which = None
while which == None:
    cmd(""cls"")

    print(""input files in \""{}\"":\n"".format(folderin))

    for i in range(len(filenames)):
        print(""{:2}: \""{}\"""".format(i,filenames[i]))

    result = input(""\npick a .wav to convert (0 -> {}): "".format(len(filenames)-1))
    which = tryInt(result)
    if which == None: continue
    if which<0 or which>=len(filenames): which = None



startTime = time()

#supported input SDL_AudioFormat types
AUDIO_U8  = b'\x08\x00' #unsigned 8-bit samples
AUDIO_S16 = b'\x10\x80' #signed 16-bit samples
input_types = (None,AUDIO_U8,AUDIO_S16) #sorted by byte width
input_types_str = (None,""AUDIO_U8"",""AUDIO_S16"")

fileinPath = join(folderin,filenames[which])
filein = None
try:
    filein = wave.open(fileinPath,""rb"") #https://docs.python.org/3/library/wave.html
except Exception as err:
    print(err)
    cmd(""pause"")
    exit(1)
    
sampwidth   = filein.getsampwidth()
nframes     = filein.getnframes()
framerate   = filein.getframerate()
nchannels   = filein.getnchannels()
sample_data = filein.readframes(-1)
filein.close()

if sampwidth < 1 or sampwidth > 2:
    print(""sample data is not of type AUDIO_U8 or AUDIO_S16!"")
    cmd(""pause"")
    exit(1)



magic        = ""kPCM"" #4B
format       = input_types[sampwidth] #2B
headerSize   = 72 #2B
dataSize     = len(sample_data) #8B
loopStart    = 0 #8B
loopEnd      = nframes #8B
numSamples   = nframes #8B
sampleRate   = framerate #4B
bitRate      = framerate * sampwidth * nchannels * 8 #4B
loopCount    = 0 #2B
channels  = nchannels #2B
bitRemainder = 0 #1B
userflags    = 0 #1B
mode         = 0 #2B
userdata_a   = 0 #8B
userdata_b   = 0 #8B

#iirc byte objects are immutable, but the header is only 72 bytes anyway
le = ""little"" #[l]ittle [e]ndian (i wish python had macros)
header_data  = bytes(magic,""ascii"")        # 0x00: magic
header_data += format                      # 0x04: format
header_data += headerSize.to_bytes(  2,le) # 0x06: headerSize
header_data += dataSize.to_bytes(    8,le) # 0x08: dataSize
header_data += loopStart.to_bytes(   8,le) # 0x10: loopStart
header_data += loopEnd.to_bytes(     8,le) # 0x18: loopEnd
header_data += numSamples.to_bytes(  8,le) # 0x20: numSamples
header_data += sampleRate.to_bytes(  4,le) # 0x28: sampleRate
header_data += bitRate.to_bytes(     4,le) # 0x2C: bitRate
header_data += loopCount.to_bytes(   2,le) # 0x30: loopCount
header_data += channels.to_bytes(    2,le) # 0x32: channels
header_data += bitRemainder.to_bytes(1,le) # 0x34: bitRemainder
header_data += userflags.to_bytes(   1,le) # 0x35: userflags
header_data += mode.to_bytes(        2,le) # 0x36: mode
header_data += userdata_a.to_bytes(  8,le) # 0x38: userdata_a
header_data += userdata_b.to_bytes(  8,le) # 0x40: userdata_b



fileoutPath = join(folderout,filenames[which])
fileoutPath = replaceExtension(fileoutPath,"".kpm"")

fileout = open(fileoutPath,""wb"")

fileout.write(header_data)
fileout.write(sample_data)

fileout.close()
timeTakenMS = (time()-startTime)*1000


print(""\noutput file info:"")
print((""  magic        = \""{}\"""").format(magic))
print((""  format       = {}"").format(input_types_str[sampwidth]))
print((""  headerSize   = {}"").format(headerSize))
print((""  dataSize     = {}"").format(dataSize))
print((""  loopStart    = {}"").format(loopStart))
print((""  loopEnd      = {}"").format(loopEnd))
print((""  numSamples   = {}"").format(numSamples))
print((""  sampleRate   = {}"").format(sampleRate))
print((""  bitRate      = {}"").format(bitRate))
print((""  loopCount    = {}"").format(loopCount))
print((""  channels     = {}"").format(channels))
print((""  bitRemainder = {}"").format(bitRemainder))
print((""  userflags    = {}"").format(userflags))
print((""  mode         = {}"").format(mode))
print((""  userdata_a   = {}"").format(userdata_a))
print((""  userdata_b   = {}"").format(userdata_b))

print(""\nsaved to: \""{}\"""".format(fileoutPath))
print(""time taken: {:.4}ms"".format(timeTakenMS))
print(""\npress any key to exit"")
cmd(""pause >nul"")"
rwykNtsc,GameTracker.rs Server IP Grabber,kkDav1337,JavaScript,Friday 15th of December 2023 04:13:21 AM CDT,"for (let i = 2; i <= 78; i += 4) {
	console.log(document.getElementsByClassName(""td-a"")[i].innerText)	
}"
nZDurTxs,GameTracker.com Server IP Grabber,kkDav1337,JavaScript,Friday 15th of December 2023 04:07:30 AM CDT,"function getElementsByXPath(xpath, parent) {
    let results = [];
    let query = document.evaluate(xpath, parent || document,
        null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
    for (let i = 0, length = query.snapshotLength; i < length; ++i) {
        results.push(query.snapshotItem(i));
    }
    return results;
}

// Select 50 results per page from bottom tab [View 15 25 50 items per page]
for (let i = 2; i < 52; i++) {
    const xpath = `html/body/div[2]/div[6]/div/table/tbody/tr[${i}]/td[7]`;
    const innerText = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.innerText;
    console.log(innerText);
}"
s4LDRB0Q,dsmr001,suchiz95,JSON,Friday 15th of December 2023 03:37:00 AM CDT,"{
    ""response"": ""getObjectsFromType"",
    ""status"": 200,
    ""requestId"": ""uuid"",
    ""output"": [
        {
            ""properties"": {
                ""individualName"": ""scenario_instance_1"",
                ""inputName"": ""scenario Instance 1"",
                ""owlVersion"": ""v1.0"",
                ""summary"": ""[\""timeframe\"", \""inputName\"", \""dateCreated\""]"",
                ""templateFrom"": ""template_scenario"",
                ""uuid"": ""afdsg-1457-dfgb-64fg"",
                ""version"": ""v1.1"",
                ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                ""areaOfInterest"": ""area JSON string"",
                ""geographicLayerRules"": """",
                ""timeframe"": 3.0
            },
            ""objectProperties"": [
                {
                    ""name"": ""hasAlternative"",
                    ""properties"": {
                        ""individualName"": ""alternatives_pack_1"",
                        ""inputName"": ""alternatives pack 1"",
                        ""owlVersion"": ""v1.0"",
                        ""summary"": ""[\""inputName\""]"",
                        ""templateFrom"": ""template_alternatives_pack"",
                        ""uuid"": ""fh7g-j564-df2g-5gh9"",
                        ""version"": ""v1.1"",
                        ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                    },
                    ""objectProperties"": [
                        {
                            ""name"": ""hasObjectiveScoreList"",
                            ""properties"": {
                                ""individualName"": ""objective_score_list_1"",
                                ""inputName"": ""objective score list 1"",
                                ""owlVersion"": ""v1.0"",
                                ""summary"": """",
                                ""templateFrom"": ""template_objective_score_list"",
                                ""uuid"": ""3123-1254-132-124-124gvds25-gvdxs325"",
                                ""version"": ""v1.0"",
                                ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                            },
                            ""objectProperties"": [
                                {
                                    ""name"": ""hasObjectiveScore"",
                                    ""properties"": {
                                        ""individualName"": ""objective_score_1"",
                                        ""inputName"": ""objective score 1"",
                                        ""owlVersion"": ""v1.0"",
                                        ""scenarioUuid"": ""afdsg-1457-dfgb-64fg"",
                                        ""summary"": """",
                                        ""templateFrom"": ""template_objective_score"",
                                        ""uuid"": ""vbn7-x56c-81tg-bbsb23234"",
                                        ""version"": ""v1.0"",
                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                        ""objectiveScore"": 65.0
                                    },
                                    ""objectProperties"": [
                                        {
                                            ""name"": ""hasKeyword"",
                                            ""properties"": {
                                                ""hasKeyword"": ""MinCost""
                                            },
                                            ""objectProperties"": []
                                        }
                                    ]
                                },
                                {
                                    ""name"": ""hasObjectiveScore"",
                                    ""properties"": {
                                        ""individualName"": ""objective_score_2"",
                                        ""inputName"": ""objective score 2"",
                                        ""owlVersion"": ""v1.0"",
                                        ""scenarioUuid"": ""afdsg-1457-dfgb-64fg"",
                                        ""summary"": """",
                                        ""templateFrom"": ""template_objective_score"",
                                        ""uuid"": ""tgb9-yh52-oi87-vk45432"",
                                        ""version"": ""v1.0"",
                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                        ""objectiveScore"": 80.0
                                    },
                                    ""objectProperties"": [
                                        {
                                            ""name"": ""hasKeyword"",
                                            ""properties"": {
                                                ""hasKeyword"": ""MinResponseTime""
                                            },
                                            ""objectProperties"": []
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            ""name"": ""hasPoolOfAssets"",
                            ""properties"": {
                                ""individualName"": ""pool_of_assets_2"",
                                ""inputName"": ""pool of assets 2"",
                                ""owlVersion"": ""v1.0"",
                                ""summary"": """",
                                ""templateFrom"": ""template_pool_of_assets"",
                                ""uuid"": ""fdsg-asfv32-ds23v-23rfvfedg"",
                                ""version"": ""v1.0"",
                                ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                            },
                            ""objectProperties"": [
                                {
                                    ""name"": ""hasAsset"",
                                    ""properties"": {
                                        ""assetType"": ""radar"",
                                        ""gis"": ""new location"",
                                        ""individualName"": ""radarInstance"",
                                        ""inputName"": ""radarInstance"",
                                        ""movingAsset"": """",
                                        ""owlVersion"": ""v1.0"",
                                        ""status"": """",
                                        ""summary"": """",
                                        ""templateFrom"": ""template_radar"",
                                        ""uuid"": ""12343585-a0ad-47c6-a69b-94643c06b876"",
                                        ""version"": ""v1.8"",
                                        ""antennaBandwidth"": 0.0,
                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                        ""antennaDiameter"": 2.0,
                                        ""assumeLoss"": 1.0,
                                        ""eta"": 0.0,
                                        ""frequencyRange"": 10.0,
                                        ""maxRange"": 0.0,
                                        ""noiseFactor"": 0.0,
                                        ""noisePower"": 0.0,
                                        ""radarCrossSection"": 1.0,
                                        ""rangeRadarToTraget"": 5.0,
                                        ""receivedPower"": 0.0,
                                        ""signalToNoiseThreshold"": 0.0,
                                        ""transmittedPower"": 100.0,
                                        ""wavelength"": 0.03
                                    },
                                    ""objectProperties"": [
                                        {
                                            ""name"": ""hasAssetCost"",
                                            ""properties"": {
                                                ""comment"": ""radar costs individual"",
                                                ""individualName"": ""radar_asset_cost_1"",
                                                ""inputName"": ""radar asset cost 1"",
                                                ""owlVersion"": ""v1.0"",
                                                ""summary"": """",
                                                ""templateFrom"": ""template_asset_cost"",
                                                ""uuid"": ""3c452b67-391f-4410-8043"",
                                                ""version"": ""v1.0"",
                                                ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDecommissionCost"",
                                                    ""properties"": {
                                                        ""individualName"": ""radar_decommission_cost_1"",
                                                        ""inputName"": ""radar decommission cost 1"",
                                                        ""owlVersion"": ""v1.0"",
                                                        ""summary"": """",
                                                        ""templateFrom"": ""template_decommission_cost"",
                                                        ""uuid"": ""a92a929f-9ba8-404d-ab08"",
                                                        ""version"": ""v1.0"",
                                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                        ""disposalCost"": 550.0,
                                                        ""replacementCost"": 7500.0
                                                    },
                                                    ""objectProperties"": []
                                                },
                                                {
                                                    ""name"": ""hasOperationalCost"",
                                                    ""properties"": {
                                                        ""individualName"": ""radar_operational_costs_1"",
                                                        ""inputName"": ""radar operational costs 1"",
                                                        ""owlVersion"": ""v1.0"",
                                                        ""summary"": """",
                                                        ""templateFrom"": ""template_operational_cost"",
                                                        ""uuid"": ""31ab7214-974e-4ef4-b6f2"",
                                                        ""version"": ""v1.0"",
                                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                        ""energyCost"": 250.0,
                                                        ""fuelCost"": 0.0,
                                                        ""inflationRate"": 6.9,
                                                        ""initialSalaryCost"": 1500.0,
                                                        ""maintenanceCost"": 600.0,
                                                        ""salaryCost"": 2000.0,
                                                        ""trainingCost"": 300.0,
                                                        ""unplannedMaintenance"": 2300.0,
                                                        ""wageRiseRate"": 5.0
                                                    },
                                                    ""objectProperties"": []
                                                },
                                                {
                                                    ""name"": ""hasDevelopmentCost"",
                                                    ""properties"": {
                                                        ""individualName"": ""radar_development_cost_1"",
                                                        ""inputName"": ""radar development cost 1"",
                                                        ""owlVersion"": ""v1.0"",
                                                        ""summary"": """",
                                                        ""templateFrom"": ""template_development_cost"",
                                                        ""uuid"": ""f58688b0-4aea-4a9c-a791"",
                                                        ""version"": ""v1.0"",
                                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                        ""equipmentCost"": 550.0,
                                                        ""inflationRate"": 6.9,
                                                        ""initialSalaryCost"": 1500.0,
                                                        ""salaryCost"": 2000.0,
                                                        ""wageRiseRate"": 5.0
                                                    },
                                                    ""objectProperties"": []
                                                },
                                                {
                                                    ""name"": ""hasProcurementCost"",
                                                    ""properties"": {
                                                        ""individualName"": ""radar_procurement_cost_1"",
                                                        ""inputName"": ""radar procurement cost 1"",
                                                        ""owlVersion"": ""v1.0"",
                                                        ""summary"": """",
                                                        ""templateFrom"": ""template_procurement_cost"",
                                                        ""uuid"": ""c23506f4-aa77-4b68-8a06"",
                                                        ""version"": ""v1.0"",
                                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                        ""buyCost"": 12000.0
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEnvironment"",
                                            ""properties"": {
                                                ""individualName"": ""environment_instance_1"",
                                                ""inputName"": ""environment instance 1"",
                                                ""owlVersion"": ""v1.0"",
                                                ""summary"": """",
                                                ""templateFrom"": ""template_environment"",
                                                ""uuid"": ""93e5017e-2a58-4d45-bcfa"",
                                                ""version"": ""v1.1"",
                                                ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasAreaOfInterest"",
                                                    ""properties"": {
                                                        ""individualName"": ""area_Of_Interest_Instance_1"",
                                                        ""inputName"": ""area Of Interest Instance 1"",
                                                        ""owlVersion"": ""v1.0"",
                                                        ""summary"": """",
                                                        ""templateFrom"": ""template_area_of_interest"",
                                                        ""uuid"": ""9dasgab6a-gdm7sn5s-qbd5szu5z-skdkdsha3a"",
                                                        ""version"": ""v1.0"",
                                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                        ""areaOfInterestName"": ""CY01"",
                                                        ""areaOfInterestValue"": ""area of interest value json""
                                                    },
                                                    ""objectProperties"": [
                                                        {
                                                            ""name"": ""hasCoordinateReferenceSystem"",
                                                            ""properties"": {
                                                                ""hasCoordinateReferenceSystem"": ""UTM""
                                                            },
                                                            ""objectProperties"": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    ""name"": ""hasEnvironmentalConditions"",
                                                    ""properties"": {
                                                        ""individualName"": ""environmental_Conditions_Instance_1"",
                                                        ""inputName"": ""environmental Conditions Instance 1"",
                                                        ""owlVersion"": ""v1.0"",
                                                        ""summary"": """",
                                                        ""templateFrom"": ""template_environmental_conditions"",
                                                        ""uuid"": ""sa9876vs-v6a6aa-rbda7bjh-q6vsuagvwq3"",
                                                        ""version"": ""v1.0"",
                                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                                                    },
                                                    ""objectProperties"": [
                                                        {
                                                            ""name"": ""hasAtmosphere"",
                                                            ""properties"": {
                                                                ""individualName"": ""atmosphere_Instance_1"",
                                                                ""inputName"": ""atmosphere Instance 1"",
                                                                ""owlVersion"": ""v1.0"",
                                                                ""summary"": """",
                                                                ""templateFrom"": ""template_atmosphere"",
                                                                ""uuid"": ""8s7dg-b9ssd-v9sd7s9-ovsvpadb89"",
                                                                ""version"": ""v1.0"",
                                                                ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                                                            },
                                                            ""objectProperties"": [
                                                                {
                                                                    ""name"": ""hasHumidity"",
                                                                    ""properties"": {
                                                                        ""individualName"": ""humidity_Instance_1"",
                                                                        ""inputName"": ""humidity Instance 1"",
                                                                        ""owlVersion"": ""v1.0"",
                                                                        ""summary"": """",
                                                                        ""templateFrom"": ""template_humidity"",
                                                                        ""uuid"": ""8sd8vs8-009sdvsd-aso7665-valala4"",
                                                                        ""version"": ""v1.0"",
                                                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                                        ""humidityCategory"": ""yes"",
                                                                        ""humidityValue"": 58.0
                                                                    },
                                                                    ""objectProperties"": [
                                                                        {
                                                                            ""name"": ""hasMeasurementUnit"",
                                                                            ""properties"": {
                                                                                ""hasMeasurementUnit"": ""Percentage""
                                                                            },
                                                                            ""objectProperties"": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    ""name"": ""hasPressure"",
                                                                    ""properties"": {
                                                                        ""individualName"": ""pressure_Instance_1"",
                                                                        ""inputName"": ""pressure Instance 1"",
                                                                        ""owlVersion"": ""v1.0"",
                                                                        ""summary"": """",
                                                                        ""templateFrom"": ""template_pressure"",
                                                                        ""uuid"": ""dvijsd0-sdva9sv-4asv6v-paoviaia2"",
                                                                        ""version"": ""v1.0"",
                                                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                                        ""pressureCategory"": ""yes"",
                                                                        ""pressureValue"": 1007.0
                                                                    },
                                                                    ""objectProperties"": [
                                                                        {
                                                                            ""name"": ""hasMeasurementUnit"",
                                                                            ""properties"": {
                                                                                ""hasMeasurementUnit"": ""Millibars""
                                                                            },
                                                                            ""objectProperties"": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    ""name"": ""hasTemperature"",
                                                                    ""properties"": {
                                                                        ""individualName"": ""temperature_Instance_1"",
                                                                        ""inputName"": ""temperature Instance 1"",
                                                                        ""owlVersion"": ""v1.0"",
                                                                        ""summary"": """",
                                                                        ""templateFrom"": ""template_temperature"",
                                                                        ""uuid"": ""89bdsd8v-a9avaaa-vjaia-uva9a"",
                                                                        ""version"": ""v1.0"",
                                                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                                        ""temperatureCategory"": ""yes"",
                                                                        ""temperatureValue"": 27.3
                                                                    },
                                                                    ""objectProperties"": [
                                                                        {
                                                                            ""name"": ""hasMeasurementUnit"",
                                                                            ""properties"": {
                                                                                ""hasMeasurementUnit"": ""Celcius""
                                                                            },
                                                                            ""objectProperties"": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            ""name"": ""hasCloud"",
                                                            ""properties"": {
                                                                ""individualName"": ""cloud_Instance_1"",
                                                                ""inputName"": ""cloud Instance 1"",
                                                                ""owlVersion"": ""v1.0"",
                                                                ""summary"": """",
                                                                ""templateFrom"": ""cloud_Instance_1"",
                                                                ""uuid"": ""3rtfwv9-sdvwe9-sdjbwe-dkvojaq2"",
                                                                ""version"": ""v1.0"",
                                                                ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                                ""cloudCategory"": ""yes"",
                                                                ""cloudValue"": 5.0
                                                            },
                                                            ""objectProperties"": [
                                                                {
                                                                    ""name"": ""hasMeasurementUnit"",
                                                                    ""properties"": {
                                                                        ""hasMeasurementUnit"": ""Percentage""
                                                                    },
                                                                    ""objectProperties"": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            ""name"": ""hasPrecipitation"",
                                                            ""properties"": {
                                                                ""individualName"": ""precipitation_Instance_1"",
                                                                ""inputName"": ""precipitation Instance 1"",
                                                                ""owlVersion"": ""v1.0"",
                                                                ""summary"": """",
                                                                ""templateFrom"": ""template_precipitation"",
                                                                ""uuid"": ""123feds-sdf23-fds23fwh-23gvedsae"",
                                                                ""version"": ""v1.0"",
                                                                ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                                ""precipitationCategory"": ""yes"",
                                                                ""precipitationValue"": 30.0
                                                            },
                                                            ""objectProperties"": [
                                                                {
                                                                    ""name"": ""hasMeasurementUnit"",
                                                                    ""properties"": {
                                                                        ""hasMeasurementUnit"": ""Millimeters""
                                                                    },
                                                                    ""objectProperties"": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            ""name"": ""hasSnow"",
                                                            ""properties"": {
                                                                ""individualName"": ""snow_Instance_1"",
                                                                ""inputName"": ""snow Instance 1"",
                                                                ""owlVersion"": ""v1.0"",
                                                                ""summary"": """",
                                                                ""templateFrom"": ""template_snow"",
                                                                ""uuid"": ""fsavdas-dbadsd9b-bds9bs-wvds"",
                                                                ""version"": ""v1.0"",
                                                                ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                                ""snowCategory"": ""no"",
                                                                ""snowValue"": 0.0
                                                            },
                                                            ""objectProperties"": [
                                                                {
                                                                    ""name"": ""hasMeasurementUnit"",
                                                                    ""properties"": {
                                                                        ""hasMeasurementUnit"": ""Centimeters""
                                                                    },
                                                                    ""objectProperties"": []
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            ""name"": ""hasWave"",
                                                            ""properties"": {
                                                                ""individualName"": ""wave_Instance_1"",
                                                                ""inputName"": ""wave Instance 1"",
                                                                ""owlVersion"": ""v1.0"",
                                                                ""summary"": """",
                                                                ""templateFrom"": ""template_wave"",
                                                                ""uuid"": ""vdsjiisd-avavas9v-3va44asv-76adva"",
                                                                ""version"": ""v1.0"",
                                                                ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                                                            },
                                                            ""objectProperties"": [
                                                                {
                                                                    ""name"": ""hasWaveDirection"",
                                                                    ""properties"": {
                                                                        ""individualName"": ""wave_Direction_Instance_1"",
                                                                        ""inputName"": ""wave Direction Instance 1"",
                                                                        ""owlVersion"": ""v1.0"",
                                                                        ""summary"": """",
                                                                        ""templateFrom"": ""template_wave_direction"",
                                                                        ""uuid"": ""89asdv776-v44aa-6davayah-kahuau5"",
                                                                        ""version"": ""v1.0"",
                                                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                                        ""waveDirectionCategory"": ""yes"",
                                                                        ""waveDirectionValue"": 120.0
                                                                    },
                                                                    ""objectProperties"": [
                                                                        {
                                                                            ""name"": ""hasMeasurementUnit"",
                                                                            ""properties"": {
                                                                                ""hasMeasurementUnit"": ""Degrees""
                                                                            },
                                                                            ""objectProperties"": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    ""name"": ""hasWaveHeight"",
                                                                    ""properties"": {
                                                                        ""individualName"": ""wave_Height_Instance_1"",
                                                                        ""inputName"": ""wave Height Instance 1"",
                                                                        ""owlVersion"": ""v1.0"",
                                                                        ""summary"": """",
                                                                        ""templateFrom"": ""template_wave_height"",
                                                                        ""uuid"": ""98avsd8as-v5as6vav-dsb23s-8adb5"",
                                                                        ""version"": ""v1.0"",
                                                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                                        ""waveHeightCategory"": ""yes"",
                                                                        ""waveHeightValue"": 1.5
                                                                    },
                                                                    ""objectProperties"": [
                                                                        {
                                                                            ""name"": ""hasMeasurementUnit"",
                                                                            ""properties"": {
                                                                                ""hasMeasurementUnit"": ""Meters""
                                                                            },
                                                                            ""objectProperties"": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            ""name"": ""hasWind"",
                                                            ""properties"": {
                                                                ""individualName"": ""wind_instance_1"",
                                                                ""inputName"": ""wind instance 1"",
                                                                ""owlVersion"": ""v1.0"",
                                                                ""summary"": """",
                                                                ""templateFrom"": ""template_wind"",
                                                                ""uuid"": ""vsdsdv-evz098s-sd9vjwe-34t766s"",
                                                                ""version"": ""v1.0"",
                                                                ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                                                            },
                                                            ""objectProperties"": [
                                                                {
                                                                    ""name"": ""hasWindDirection"",
                                                                    ""properties"": {
                                                                        ""individualName"": ""wind_Direction_Instance_1"",
                                                                        ""inputName"": ""wind Direction Instance 1"",
                                                                        ""owlVersion"": ""v1.0"",
                                                                        ""summary"": """",
                                                                        ""templateFrom"": ""template_wind_direction"",
                                                                        ""uuid"": ""fdssd-320fds-9vzjq-lsdpvpsp2"",
                                                                        ""version"": ""v1.0"",
                                                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                                        ""windDirectionCategory"": ""yes"",
                                                                        ""windDirectionValue"": 145.0
                                                                    },
                                                                    ""objectProperties"": [
                                                                        {
                                                                            ""name"": ""hasMeasurementUnit"",
                                                                            ""properties"": {
                                                                                ""hasMeasurementUnit"": ""Degrees""
                                                                            },
                                                                            ""objectProperties"": []
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    ""name"": ""hasWindSpeed"",
                                                                    ""properties"": {
                                                                        ""individualName"": ""wind_Speed_Instance_1"",
                                                                        ""inputName"": ""wind Speed Instance 1"",
                                                                        ""owlVersion"": ""v1.0"",
                                                                        ""summary"": """",
                                                                        ""templateFrom"": ""template_wind_speed"",
                                                                        ""uuid"": ""112ff-adsvb-23fvdsj-ssefv-23tygsb"",
                                                                        ""version"": ""v1.0"",
                                                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                                        ""windSpeedCategory"": ""yes"",
                                                                        ""windSpeedValue"": 5.0
                                                                    },
                                                                    ""objectProperties"": [
                                                                        {
                                                                            ""name"": ""hasMeasurementUnit"",
                                                                            ""properties"": {
                                                                                ""hasMeasurementUnit"": ""MetersPerSecond""
                                                                            },
                                                                            ""objectProperties"": []
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                {
                                                    ""name"": ""hasEnvironmentalPeriod"",
                                                    ""properties"": {
                                                        ""individualName"": ""environmental_Period_Instance_1"",
                                                        ""inputName"": ""environmental Period Instance 1"",
                                                        ""owlVersion"": ""v1.0"",
                                                        ""summary"": """",
                                                        ""templateFrom"": ""template_enviromental_period"",
                                                        ""uuid"": ""sdbhsdiu-sd97bsd79b-bohiaq9g-65dabadv"",
                                                        ""version"": ""v1.0"",
                                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                        ""beginDate"": ""2023-06-30T13:30:00+00:00"",
                                                        ""endDate"": ""2023-06-30T13:45:00+00:00"",
                                                        ""time"": ""2023-06-30T13:55:00+00:00""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasFunction"",
                                            ""properties"": {
                                                ""individualName"": ""f1"",
                                                ""inputName"": ""f1"",
                                                ""owlVersion"": ""v1.0"",
                                                ""summary"": """",
                                                ""templateFrom"": ""template_function"",
                                                ""uuid"": ""78453585-a0ad-47c6-a69b-94643c06b294"",
                                                ""version"": ""v1.0"",
                                                ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasEquation"",
                                                    ""properties"": {
                                                        ""comment"": ""D^2"",
                                                        ""hasOrder"": 1,
                                                        ""hasOutput"": ""out1"",
                                                        ""hasParameter1"": ""antennaDiameter"",
                                                        ""hasParameter2"": ""2""
                                                    },
                                                    ""objectProperties"": [
                                                        {
                                                            ""name"": ""hasMathOperation"",
                                                            ""properties"": {
                                                                ""hasMathOperation"": ""Power""
                                                            },
                                                            ""objectProperties"": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    ""name"": ""hasEquation"",
                                                    ""properties"": {
                                                        ""comment"": ""4 * pi"",
                                                        ""hasOrder"": 10,
                                                        ""hasOutput"": ""out10"",
                                                        ""hasParameter1"": ""4"",
                                                        ""hasParameter2"": ""3.14""
                                                    },
                                                    ""objectProperties"": [
                                                        {
                                                            ""name"": ""hasMathOperation"",
                                                            ""properties"": {
                                                                ""hasMathOperation"": ""Multiplication""
                                                            },
                                                            ""objectProperties"": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    ""name"": ""hasEquation"",
                                                    ""properties"": {
                                                        ""comment"": ""R ^ 4"",
                                                        ""hasOrder"": 11,
                                                        ""hasOutput"": ""out11"",
                                                        ""hasParameter1"": ""rangeRadarToTraget"",
                                                        ""hasParameter2"": ""4""
                                                    },
                                                    ""objectProperties"": [
                                                        {
                                                            ""name"": ""hasMathOperation"",
                                                            ""properties"": {
                                                                ""hasMathOperation"": ""Power""
                                                            },
                                                            ""objectProperties"": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    ""name"": ""hasEquation"",
                                                    ""properties"": {
                                                        ""comment"": ""4 * pi * R ^ 4"",
                                                        ""hasOrder"": 12,
                                                        ""hasOutput"": ""out12"",
                                                        ""hasParameter1"": ""out10"",
                                                        ""hasParameter2"": ""out11""
                                                    },
                                                    ""objectProperties"": [
                                                        {
                                                            ""name"": ""hasMathOperation"",
                                                            ""properties"": {
                                                                ""hasMathOperation"": ""Multiplication""
                                                            },
                                                            ""objectProperties"": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    ""name"": ""hasEquation"",
                                                    ""properties"": {
                                                        ""comment"": """"
                                                    },
                                                    ""objectProperties"": [
                                                        {
                                                            ""name"": ""hasMathOperation"",
                                                            ""properties"": {
                                                                ""hasMathOperation"": ""Multiplication""
                                                            },
                                                            ""objectProperties"": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    ""name"": ""hasEquation"",
                                                    ""properties"": {
                                                        ""comment"": ""Pr = (Pt * G^2 * lambda^2 * sigma) / (4 * pi * R^4 * L))"",
                                                        ""hasOrder"": 14,
                                                        ""hasOutput"": ""out14"",
                                                        ""hasParameter1"": ""out9"",
                                                        ""hasParameter2"": ""out13""
                                                    },
                                                    ""objectProperties"": [
                                                        {
                                                            ""name"": ""hasMathOperation"",
                                                            ""properties"": {
                                                                ""hasMathOperation"": ""Division""
                                                            },
                                                            ""objectProperties"": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    ""name"": ""hasEquation"",
                                                    ""properties"": {
                                                        ""comment"": ""4 * pi * Pr"",
                                                        ""hasOrder"": 15,
                                                        ""hasOutput"": ""out15"",
                                                        ""hasParameter1"": ""out10"",
                                                        ""hasParameter2"": ""out14""
                                                    },
                                                    ""objectProperties"": [
                                                        {
                                                            ""name"": ""hasMathOperation"",
                                                            ""properties"": {
                                                                ""hasMathOperation"": ""Multiplication""
                                                            },
                                                            ""objectProperties"": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    ""name"": ""hasEquation"",
                                                    ""properties"": {
                                                        ""comment"": ""4 * pi * Pr * L"",
                                                        ""hasOrder"": 16,
                                                        ""hasOutput"": ""out16"",
                                                        ""hasParameter1"": ""out15"",
                                                        ""hasParameter2"": ""assumeLoss""
                                                    },
                                                    ""objectProperties"": [
                                                        {
                                                            ""name"": ""hasMathOperation"",
                                                            ""properties"": {
                                                                ""hasMathOperation"": ""Multiplication""
                                                            },
                                                            ""objectProperties"": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    ""name"": ""hasEquation"",
                                                    ""properties"": {
                                                        ""hasOrder"": 17,
                                                        ""hasOutput"": ""out17"",
                                                        ""hasParameter1"": ""out9"",
                                                        ""hasParameter2"": ""out16""
                                                    },
                                                    ""objectProperties"": [
                                                        {
                                                            ""name"": ""hasMathOperation"",
                                                            ""properties"": {
                                                                ""hasMathOperation"": ""Division""
                                                            },
                                                            ""objectProperties"": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    ""name"": ""hasEquation"",
                                                    ""properties"": {
                                                        ""comment"": ""D^2 * pi"",
                                                        ""hasOrder"": 2,
                                                        ""hasOutput"": ""out2"",
                                                        ""hasParameter1"": ""3.14"",
                                                        ""hasParameter2"": ""out1""
                                                    },
                                                    ""objectProperties"": [
                                                        {
                                                            ""name"": ""hasMathOperation"",
                                                            ""properties"": {
                                                                ""hasMathOperation"": ""Multiplication""
                                                            },
                                                            ""objectProperties"": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    ""name"": ""hasEquation"",
                                                    ""properties"": {
                                                        ""comment"": ""D^2 *pi * eta"",
                                                        ""hasOrder"": 3,
                                                        ""hasOutput"": ""out3"",
                                                        ""hasParameter1"": ""out2"",
                                                        ""hasParameter2"": ""eta""
                                                    },
                                                    ""objectProperties"": [
                                                        {
                                                            ""name"": ""hasMathOperation"",
                                                            ""properties"": {
                                                                ""hasMathOperation"": ""Multiplication""
                                                            },
                                                            ""objectProperties"": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    ""name"": ""hasEquation"",
                                                    ""properties"": {
                                                        ""comment"": ""wavelength ^2 = lambda ^ 2"",
                                                        ""hasOrder"": 4,
                                                        ""hasOutput"": ""out4"",
                                                        ""hasParameter1"": ""wavelength"",
                                                        ""hasParameter2"": ""wavelength""
                                                    },
                                                    ""objectProperties"": [
                                                        {
                                                            ""name"": ""hasMathOperation"",
                                                            ""properties"": {
                                                                ""hasMathOperation"": ""Multiplication""
                                                            },
                                                            ""objectProperties"": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    ""name"": ""hasEquation"",
                                                    ""properties"": {
                                                        ""comment"": ""G = (pi * D^2 * eta) / lambda^2"",
                                                        ""hasOrder"": 5,
                                                        ""hasOutput"": ""out5"",
                                                        ""hasParameter1"": ""out3"",
                                                        ""hasParameter2"": ""out4""
                                                    },
                                                    ""objectProperties"": [
                                                        {
                                                            ""name"": ""hasMathOperation"",
                                                            ""properties"": {
                                                                ""hasMathOperation"": ""Division""
                                                            },
                                                            ""objectProperties"": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    ""name"": ""hasEquation"",
                                                    ""properties"": {
                                                        ""comment"": ""G^2"",
                                                        ""hasOrder"": 6,
                                                        ""hasOutput"": ""out6"",
                                                        ""hasParameter1"": ""out5"",
                                                        ""hasParameter2"": ""out5""
                                                    },
                                                    ""objectProperties"": [
                                                        {
                                                            ""name"": ""hasMathOperation"",
                                                            ""properties"": {
                                                                ""hasMathOperation"": ""Multiplication""
                                                            },
                                                            ""objectProperties"": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    ""name"": ""hasEquation"",
                                                    ""properties"": {
                                                        ""comment"": ""Pt * G^2"",
                                                        ""hasOrder"": 7,
                                                        ""hasOutput"": ""out7"",
                                                        ""hasParameter1"": ""transmittedPower"",
                                                        ""hasParameter2"": ""out6""
                                                    },
                                                    ""objectProperties"": [
                                                        {
                                                            ""name"": ""hasMathOperation"",
                                                            ""properties"": {
                                                                ""hasMathOperation"": ""Multiplication""
                                                            },
                                                            ""objectProperties"": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    ""name"": ""hasEquation"",
                                                    ""properties"": {
                                                        ""comment"": ""Pt * G^2 * lambda^2"",
                                                        ""hasOrder"": 8,
                                                        ""hasOutput"": ""out8"",
                                                        ""hasParameter1"": ""out7"",
                                                        ""hasParameter2"": ""out4""
                                                    },
                                                    ""objectProperties"": [
                                                        {
                                                            ""name"": ""hasMathOperation"",
                                                            ""properties"": {
                                                                ""hasMathOperation"": ""Multiplication""
                                                            },
                                                            ""objectProperties"": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    ""name"": ""hasEquation"",
                                                    ""properties"": {
                                                        ""comment"": ""Pt * G^2 * lambda^2 * sigma"",
                                                        ""hasOrder"": 9,
                                                        ""hasOutput"": ""out9"",
                                                        ""hasParameter1"": ""out8"",
                                                        ""hasParameter2"": ""radarCrossSection""
                                                    },
                                                    ""objectProperties"": [
                                                        {
                                                            ""name"": ""hasMathOperation"",
                                                            ""properties"": {
                                                                ""hasMathOperation"": ""Multiplication""
                                                            },
                                                            ""objectProperties"": []
                                                        }
                                                    ]
                                                },
                                                {
                                                    ""name"": ""hasType"",
                                                    ""properties"": {
                                                        ""hasType"": ""FunctionTypeCoverage""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasAssetAcquisition"",
                                            ""properties"": {
                                                ""individualName"": ""radar_instance_1_asset_acquisition"",
                                                ""inputName"": ""radar instance 1 asset acquisition"",
                                                ""owlVersion"": ""v1.0"",
                                                ""summary"": """",
                                                ""templateFrom"": ""template_asset_acquisition"",
                                                ""timeToAvailability"": 0.0,
                                                ""uuid"": ""9255b610-e477-4f0d-9b09"",
                                                ""version"": ""v1.0"",
                                                ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMaturity"",
                                                    ""properties"": {
                                                        ""hasMaturity"": ""InUse""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasAssetIdentification"",
                                            ""properties"": {
                                                ""hasInventories"": ""[300,250]"",
                                                ""hasOrigin"": ""300"",
                                                ""hasType"": ""7"",
                                                ""individualName"": ""radar_instance_1_asset_identification"",
                                                ""inputName"": ""radar instance 1 asset identification"",
                                                ""owlVersion"": ""v1.0"",
                                                ""summary"": """",
                                                ""templateFrom"": ""template_asset_identification"",
                                                ""uuid"": ""bfdd69f4-b40c-468d-9359"",
                                                ""version"": ""v1.0"",
                                                ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasCategory"",
                                                    ""properties"": {
                                                        ""hasCategory"": ""Ground""
                                                    },
                                                    ""objectProperties"": []
                                                },
                                                {
                                                    ""name"": ""hasIcon"",
                                                    ""properties"": {
                                                        ""hasIcon"": ""Unknown""
                                                    },
                                                    ""objectProperties"": []
                                                },
                                                {
                                                    ""name"": ""hasLevel"",
                                                    ""properties"": {
                                                        ""hasLevel"": ""System""
                                                    },
                                                    ""objectProperties"": []
                                                },
                                                {
                                                    ""name"": ""hasNature"",
                                                    ""properties"": {
                                                        ""hasNature"": ""Hardware""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasCapabilities"",
                                            ""properties"": {
                                                ""communications"": """",
                                                ""detectability"": 100.0,
                                                ""identification"": 50.0,
                                                ""individualName"": ""radar_capabilities"",
                                                ""inputName"": ""radar capabilities"",
                                                ""interoperability"": 1.0,
                                                ""maintenanceTime"": 604800.0,
                                                ""meanTimeBetweenFailures"": 100.0,
                                                ""meanTimeToRepair"": 900.0,
                                                ""operationalRange"": 200.0,
                                                ""operationalSpeed"": 30.0,
                                                ""operationalTime"": 1628000.0,
                                                ""owlVersion"": ""v1.0"",
                                                ""summary"": """",
                                                ""templateFrom"": ""template_asset_capabilities"",
                                                ""upgradeability"": 0.2,
                                                ""uuid"": ""5262fea3-ce8f-403a-a1dd"",
                                                ""version"": ""v1.0"",
                                                ""vulnerability"": 5.0,
                                                ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                                            },
                                            ""objectProperties"": []
                                        },
                                        {
                                            ""name"": ""hasLocation"",
                                            ""properties"": {
                                                ""individualName"": ""radar_instance_location"",
                                                ""inputName"": ""radar instance location"",
                                                ""locationX"": 37.94927,
                                                ""locationY"": 23.64262,
                                                ""locationZ"": 6.0,
                                                ""owlVersion"": ""v1.0"",
                                                ""summary"": """",
                                                ""templateFrom"": ""template_location"",
                                                ""uuid"": ""dd5c36fc-17a9-4688-8510"",
                                                ""version"": ""v1.0"",
                                                ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                                            },
                                            ""objectProperties"": []
                                        },
                                        {
                                            ""name"": ""hasSizeWeight"",
                                            ""properties"": {
                                                ""height"": 3.0,
                                                ""individualName"": ""radar_instance_1_size_weight"",
                                                ""inputName"": ""radar instance 1 size weight"",
                                                ""length"": 8.0,
                                                ""owlVersion"": ""v1.0"",
                                                ""summary"": """",
                                                ""templateFrom"": ""template_size_weight"",
                                                ""uuid"": ""1be40204-458d-4c7d-ad8b"",
                                                ""version"": ""v1.0"",
                                                ""weight"": 8.0,
                                                ""width"": 5.0,
                                                ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                                            },
                                            ""objectProperties"": []
                                        },
                                        {
                                            ""name"": ""hasInstallationConstraint"",
                                            ""properties"": {
                                                ""individualName"": ""installationConstraint3"",
                                                ""inputName"": ""installationConstraint3"",
                                                ""owlVersion"": ""v1.0"",
                                                ""summary"": """",
                                                ""templateFrom"": ""template_installation_constraint"",
                                                ""uuid"": ""cd77322a-663b-4b14-b532"",
                                                ""version"": ""v1.1"",
                                                ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                ""hasInstallationParameter1"": ""radarInstance"",
                                                ""hasInstallationParameter2"": ""ship_instance_1""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasConstraintDefinition"",
                                                    ""properties"": {
                                                        ""hasConstraintDefinition"": ""canBePlacedOn""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            ""name"": ""hasScenarioEvaluation"",
                            ""properties"": {
                                ""individualName"": ""radar_scenario_evaluation"",
                                ""inputName"": ""radar scenario evaluation"",
                                ""owlVersion"": ""v1.0"",
                                ""scenarioUuid"": ""afdsg-1457-dfgb-64fg"",
                                ""summary"": """",
                                ""templateFrom"": ""template_alternatives_pack_scenario_evaluation"",
                                ""uuid"": ""324574ef-0ac8-4873-982c"",
                                ""version"": ""v1.0"",
                                ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                            },
                            ""objectProperties"": [
                                {
                                    ""name"": ""hasScenarioEvaluationCost"",
                                    ""properties"": {
                                        ""individualName"": ""radar_scenario_evaluation_cost"",
                                        ""inputName"": ""radar scenario evaluation cost"",
                                        ""owlVersion"": ""v1.0"",
                                        ""summary"": """",
                                        ""templateFrom"": ""template_alternatives_pack_scenario_evaluation_cost"",
                                        ""uuid"": ""819f36e9-f80d-49e6-9dad"",
                                        ""version"": ""v1.0"",
                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                        ""scenarioEvaluationAssetsCost"": 5500.0,
                                        ""scenarioEvaluationCostScore"": 86.0,
                                        ""scenarioEvaluationInitialCost"": 2300.0
                                    },
                                    ""objectProperties"": [
                                        {
                                            ""name"": ""hasAssetCost"",
                                            ""properties"": {
                                                ""individualName"": ""radar_asset_cost_alternative_pack_1"",
                                                ""inputName"": ""radar asset cost alternative pack 1"",
                                                ""owlVersion"": ""v1.0"",
                                                ""summary"": """",
                                                ""templateFrom"": ""template_asset_cost_alternative_pack"",
                                                ""uuid"": ""83285925-9eff-4f92-91fe"",
                                                ""version"": ""v1.0"",
                                                ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDecommissionCost"",
                                                    ""properties"": {
                                                        ""individualName"": ""radar_decommission_cost_1"",
                                                        ""inputName"": ""radar decommission cost 1"",
                                                        ""owlVersion"": ""v1.0"",
                                                        ""summary"": """",
                                                        ""templateFrom"": ""template_decommission_cost"",
                                                        ""uuid"": ""a92a929f-9ba8-404d-ab08"",
                                                        ""version"": ""v1.0"",
                                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                        ""disposalCost"": 550.0,
                                                        ""replacementCost"": 7500.0
                                                    },
                                                    ""objectProperties"": []
                                                },
                                                {
                                                    ""name"": ""hasOperationalCost"",
                                                    ""properties"": {
                                                        ""individualName"": ""radar_operational_costs_1"",
                                                        ""inputName"": ""radar operational costs 1"",
                                                        ""owlVersion"": ""v1.0"",
                                                        ""summary"": """",
                                                        ""templateFrom"": ""template_operational_cost"",
                                                        ""uuid"": ""31ab7214-974e-4ef4-b6f2"",
                                                        ""version"": ""v1.0"",
                                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                        ""energyCost"": 250.0,
                                                        ""fuelCost"": 0.0,
                                                        ""inflationRate"": 6.9,
                                                        ""initialSalaryCost"": 1500.0,
                                                        ""maintenanceCost"": 600.0,
                                                        ""salaryCost"": 2000.0,
                                                        ""trainingCost"": 300.0,
                                                        ""unplannedMaintenance"": 2300.0,
                                                        ""wageRiseRate"": 5.0
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    ""name"": ""hasPerformance"",
                                    ""properties"": {
                                        ""individualName"": ""radar_performance"",
                                        ""inputName"": ""radar performance"",
                                        ""owlVersion"": ""v1.0"",
                                        ""summary"": """",
                                        ""templateFrom"": ""template_alternatives_pack_scenario_evaluation_performance"",
                                        ""uuid"": ""6aefb791-f326-4d4a-93fa"",
                                        ""version"": ""v1.0"",
                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                        ""measureOfEffectiveness"": 80.0,
                                        ""performanceScore"": 80.0,
                                        ""spaceCoverage"": 85.0,
                                        ""timeCoverage"": 3.5
                                    },
                                    ""objectProperties"": []
                                },
                                {
                                    ""name"": ""hasRisk"",
                                    ""properties"": {
                                        ""individualName"": ""radar_risk"",
                                        ""inputName"": ""radar risk"",
                                        ""owlVersion"": ""v1.0"",
                                        ""summary"": """",
                                        ""templateFrom"": ""template_alternatives_pack_scenario_evaluation_risk"",
                                        ""uuid"": ""03c48942-4029-45af-9065"",
                                        ""version"": ""v1.1"",
                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                        ""costUncertainty"": 2000.0,
                                        ""performanceUncertainty"": 10.0,
                                        ""riskScore"": 4
                                    },
                                    ""objectProperties"": []
                                }
                            ]
                        }
                    ]
                },
                {
                    ""name"": ""hasObjectives"",
                    ""properties"": {
                        ""individualName"": ""scenario_objective_list_1"",
                        ""inputName"": ""scenario objective list 1"",
                        ""owlVersion"": ""v1.0"",
                        ""summary"": """",
                        ""templateFrom"": ""template_scenario_objective_list"",
                        ""uuid"": ""7694f408-443d-4f8e-9f35-045bbebf93a0"",
                        ""version"": ""v1.0"",
                        ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                    },
                    ""objectProperties"": [
                        {
                            ""name"": ""hasScenarioObjective"",
                            ""properties"": {
                                ""enableKeyword"": ""true"",
                                ""individualName"": ""scenarioObjective_2"",
                                ""inputName"": ""scenarioObjective 2"",
                                ""owlVersion"": ""v1.0"",
                                ""summary"": """",
                                ""templateFrom"": ""template_scenario_objective"",
                                ""uuid"": ""378033b2-607d-4bee-a33a-8f0cafcd22a8"",
                                ""version"": ""v1.0"",
                                ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                            },
                            ""objectProperties"": [
                                {
                                    ""name"": ""hasKeyword"",
                                    ""properties"": {
                                        ""hasKeyword"": ""MinResponseTime""
                                    },
                                    ""objectProperties"": []
                                }
                            ]
                        },
                        {
                            ""name"": ""hasScenarioObjective"",
                            ""properties"": {
                                ""enableKeyword"": ""true"",
                                ""individualName"": ""scenarioobjective_1"",
                                ""inputName"": ""scenarioobjective 1"",
                                ""owlVersion"": ""v1.0"",
                                ""summary"": """",
                                ""templateFrom"": ""template_scenario_objective"",
                                ""uuid"": ""f6e983a0-bddd-49da-b73c-0226174158c2"",
                                ""version"": ""v1.1"",
                                ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                            },
                            ""objectProperties"": [
                                {
                                    ""name"": ""hasKeyword"",
                                    ""properties"": {
                                        ""hasKeyword"": ""MinCost""
                                    },
                                    ""objectProperties"": []
                                }
                            ]
                        }
                    ]
                },
                {
                    ""name"": ""hasPoolOfAssets"",
                    ""properties"": {
                        ""individualName"": ""pool_of_assets_1"",
                        ""inputName"": ""pool of assets 1"",
                        ""owlVersion"": ""v1.0"",
                        ""summary"": """",
                        ""templateFrom"": ""template_pool_of_assets"",
                        ""uuid"": ""g23324vc-dsbgsgsd-23xc-234cxs"",
                        ""version"": ""v1.0"",
                        ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                    },
                    ""objectProperties"": [
                        {
                            ""name"": ""hasAsset"",
                            ""properties"": {
                                ""comment"": ""cocPercentage set to 1%\nviewingDist set to 300mm -> 30cm"",
                                ""assetType"": ""camera"",
                                ""gis"": ""new location"",
                                ""individualName"": ""cameraInstance"",
                                ""inputName"": ""cameraInstance"",
                                ""movingAsset"": """",
                                ""owlVersion"": ""v1.0"",
                                ""status"": """",
                                ""summary"": """",
                                ""templateFrom"": """",
                                ""uuid"": ""76831174-as8s-gh6h-78s564fd4"",
                                ""version"": ""v1.2"",
                                ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                ""aperture"": 0.0,
                                ""circleOfConfusion"": 0.0,
                                ""cocPercentage"": 0.01,
                                ""depthOfField"": 0.0,
                                ""diagonalOfSensor"": 0.0,
                                ""distanceLensToObject"": 100000.0,
                                ""distanceLensToSensor"": 0.0526,
                                ""farFOVHorizontal"": 0.0,
                                ""farFOVVertical"": 0.0,
                                ""focalLength"": 19.0,
                                ""hyperfocalDistance"": 0.0,
                                ""lensDiameter"": 2.8,
                                ""nearFOVHorizontal"": 0.0,
                                ""nearFOVVertical"": 0.0,
                                ""pixelSize"": 0.082,
                                ""resolutionHeight"": 1024.0,
                                ""resolutionWidth"": 1280.0,
                                ""sensorHeight"": 4.6,
                                ""sensorResolution"": 0.0,
                                ""sensorWidth"": 3.7,
                                ""viewingDistance"": 300.0
                            },
                            ""objectProperties"": [
                                {
                                    ""name"": ""hasAssetCost"",
                                    ""properties"": {
                                        ""comment"": ""camera costs individual"",
                                        ""individualName"": ""camera_asset_cost_1"",
                                        ""inputName"": ""camera asset cost 1"",
                                        ""owlVersion"": ""v1.0"",
                                        ""summary"": """",
                                        ""templateFrom"": """",
                                        ""uuid"": ""06beda7c-f3ba-45f0-ba5b"",
                                        ""version"": ""v1.1"",
                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                                    },
                                    ""objectProperties"": [
                                        {
                                            ""name"": ""hasDecommissionCost"",
                                            ""properties"": {
                                                ""individualName"": ""camera_decommission_cost_1"",
                                                ""inputName"": ""camera decommission cost 1"",
                                                ""owlVersion"": ""v1.0"",
                                                ""summary"": """",
                                                ""templateFrom"": """",
                                                ""uuid"": ""e64e9838-0d82-4eec-b7db"",
                                                ""version"": ""v1.1"",
                                                ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                ""disposalCost"": 1800.0,
                                                ""replacementCost"": 5500.0
                                            },
                                            ""objectProperties"": []
                                        },
                                        {
                                            ""name"": ""hasOperationalCost"",
                                            ""properties"": {
                                                ""individualName"": ""camera_operational_cost_1"",
                                                ""inputName"": ""camera operational cost 1"",
                                                ""owlVersion"": ""v1.0"",
                                                ""summary"": """",
                                                ""templateFrom"": """",
                                                ""uuid"": ""3e5a44a5-c9ae-4bd6-9f7c"",
                                                ""version"": ""v1.1"",
                                                ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                ""energyCost"": 280.0,
                                                ""fuelCost"": 0.0,
                                                ""inflationRate"": 6.9,
                                                ""initialSalaryCost"": 1500.0,
                                                ""maintenanceCost"": 600.0,
                                                ""salaryCost"": 2000.0,
                                                ""trainingCost"": 350.0,
                                                ""unplannedMaintenance"": 390.0,
                                                ""wageRiseRate"": 3.0
                                            },
                                            ""objectProperties"": []
                                        },
                                        {
                                            ""name"": ""hasDevelopmentCost"",
                                            ""properties"": {
                                                ""individualName"": ""camera_development_cost_1"",
                                                ""inputName"": ""camera development cost 1"",
                                                ""owlVersion"": ""v1.0"",
                                                ""summary"": """",
                                                ""templateFrom"": """",
                                                ""uuid"": ""29188f9d-e87d-484d-a08c"",
                                                ""version"": ""v1.0"",
                                                ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                ""equipmentCost"": 850.0,
                                                ""inflationRate"": 6.9,
                                                ""initialSalaryCost"": 1500.0,
                                                ""salaryCost"": 2000.0,
                                                ""wageRiseRate"": 3.0
                                            },
                                            ""objectProperties"": []
                                        },
                                        {
                                            ""name"": ""hasProcurementCost"",
                                            ""properties"": {
                                                ""individualName"": ""camera_procurement_cost_1"",
                                                ""inputName"": ""camera procurement cost 1"",
                                                ""owlVersion"": ""v1.0"",
                                                ""summary"": """",
                                                ""templateFrom"": """",
                                                ""uuid"": ""5612acf7-3012-4cec-96bd-2a4a5fc055ec"",
                                                ""version"": ""v1.1"",
                                                ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                                ""buyCost"": 15500.0
                                            },
                                            ""objectProperties"": []
                                        }
                                    ]
                                },
                                {
                                    ""name"": ""hasFunction"",
                                    ""properties"": {
                                        ""individualName"": ""f2"",
                                        ""inputName"": ""f2"",
                                        ""owlVersion"": ""v1.0"",
                                        ""summary"": """",
                                        ""templateFrom"": ""template_function"",
                                        ""uuid"": ""64178968-h8ds-h49a-19364m5g415"",
                                        ""version"": ""v1.0"",
                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                                    },
                                    ""objectProperties"": [
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""1 / distanceLensToObject"",
                                                ""hasOrder"": 1,
                                                ""hasOutput"": ""out1"",
                                                ""hasParameter1"": ""1"",
                                                ""hasParameter2"": ""distanceLensToObject""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Division""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""Diagonal sensor * Viewing distance"",
                                                ""hasOrder"": 10,
                                                ""hasOutput"": ""out10"",
                                                ""hasParameter1"": ""out9"",
                                                ""hasParameter2"": ""viewingDistance""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Multiplication""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""Diagonal sensor * Viewing distance * CoC percentage"",
                                                ""hasOrder"": 11,
                                                ""hasOutput"": ""out11"",
                                                ""hasParameter1"": ""out10"",
                                                ""hasParameter2"": ""cocPercentage""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Multiplication""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""(Diag. sensor * Viewing dist. * CoC percentage) / Sensor Res."",
                                                ""hasOrder"": 12,
                                                ""hasOutput"": ""out12"",
                                                ""hasParameter1"": ""out11"",
                                                ""hasParameter2"": ""out13""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Division""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""Number of pixels horizontally * Number of pixels vertically"",
                                                ""hasOrder"": 13,
                                                ""hasOutput"": ""out13"",
                                                ""hasParameter1"": ""out23"",
                                                ""hasParameter2"": ""out24""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Multiplication""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""Focal length ^ 2"",
                                                ""hasOrder"": 14,
                                                ""hasOutput"": ""out14"",
                                                ""hasParameter1"": ""out4"",
                                                ""hasParameter2"": ""2""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Power""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""(N * C)\nN = aperture"",
                                                ""hasOrder"": 15,
                                                ""hasOutput"": ""out15"",
                                                ""hasParameter1"": ""out5"",
                                                ""hasParameter2"": ""out12""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Multiplication""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""(f ^ 2) / (N * C)"",
                                                ""hasOrder"": 16,
                                                ""hasOutput"": ""out16"",
                                                ""hasParameter1"": ""out14"",
                                                ""hasParameter2"": ""out15""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Division""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""d ^ 2"",
                                                ""hasOrder"": 17,
                                                ""hasOutput"": ""out17"",
                                                ""hasParameter1"": ""distanceLensToObject"",
                                                ""hasParameter2"": ""2""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Power""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""(2 * N)"",
                                                ""hasOrder"": 18,
                                                ""hasOutput"": ""out18"",
                                                ""hasParameter1"": ""2"",
                                                ""hasParameter2"": ""out5""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Multiplication""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""(2 * N * C)"",
                                                ""hasOrder"": 19,
                                                ""hasOutput"": ""out19"",
                                                ""hasParameter1"": ""out18"",
                                                ""hasParameter2"": ""out12""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Multiplication""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""1 / distLensToSensor"",
                                                ""hasOrder"": 2,
                                                ""hasOutput"": ""out2"",
                                                ""hasParameter1"": ""1"",
                                                ""hasParameter2"": ""distanceLensToSensor""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Division""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""(2 * N * C * (d^2))"",
                                                ""hasOrder"": 20,
                                                ""hasOutput"": ""out20"",
                                                ""hasParameter1"": ""out19"",
                                                ""hasParameter2"": ""out17""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Multiplication""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""(f^2) * D"",
                                                ""hasOrder"": 21,
                                                ""hasOutput"": ""out21"",
                                                ""hasParameter1"": ""out14"",
                                                ""hasParameter2"": ""out16""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Multiplication""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""(2 * N * C * (d^2)) / ((f^2) * D)"",
                                                ""hasOrder"": 22,
                                                ""hasOutput"": ""out22"",
                                                ""hasParameter1"": ""out20"",
                                                ""hasParameter2"": ""out21""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Division""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""Resolution width / Pixel Size"",
                                                ""hasOrder"": 23,
                                                ""hasOutput"": ""out23"",
                                                ""hasParameter1"": ""resolutionWidth"",
                                                ""hasParameter2"": ""pixelSize""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Division""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""Resolution height / Pixel Size"",
                                                ""hasOrder"": 24,
                                                ""hasOutput"": ""out24"",
                                                ""hasParameter1"": ""resolutionHeight"",
                                                ""hasParameter2"": ""pixelSize""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Division""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""(1 / distLensToSensor – 1 / distLensToObject)"",
                                                ""hasOrder"": 3,
                                                ""hasOutput"": ""out3"",
                                                ""hasParameter1"": ""out1"",
                                                ""hasParameter2"": ""out2""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Subtraction""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""1 / (1 / distLensToSensor – 1 / distLensToObject)"",
                                                ""hasOrder"": 4,
                                                ""hasOutput"": ""out4"",
                                                ""hasParameter1"": ""1"",
                                                ""hasParameter2"": ""out3""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Division""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""focal length / lens diameter"",
                                                ""hasOrder"": 5,
                                                ""hasOutput"": ""out5"",
                                                ""hasParameter1"": ""out4"",
                                                ""hasParameter2"": ""lensDiameter""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Division""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""sensor width ^ 2"",
                                                ""hasOrder"": 6,
                                                ""hasOutput"": ""out6"",
                                                ""hasParameter1"": ""sensorWidth"",
                                                ""hasParameter2"": ""2""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Power""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""sensor height ^ 2"",
                                                ""hasOrder"": 7,
                                                ""hasOutput"": ""out7"",
                                                ""hasParameter1"": ""sensorHeight"",
                                                ""hasParameter2"": ""2""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Power""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""sensor width ^ 2 + sensor height ^ 2"",
                                                ""hasOrder"": 8,
                                                ""hasOutput"": ""out8"",
                                                ""hasParameter1"": ""out6"",
                                                ""hasParameter2"": ""out7""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""Addition""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasEquation"",
                                            ""properties"": {
                                                ""comment"": ""sqrt (sensor width ^ 2 + sensor height ^ 2)"",
                                                ""hasOrder"": 9,
                                                ""hasOutput"": ""out9"",
                                                ""hasParameter1"": ""2"",
                                                ""hasParameter2"": ""out8""
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasMathOperation"",
                                                    ""properties"": {
                                                        ""hasMathOperation"": ""MathRoot""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasType"",
                                            ""properties"": {
                                                ""hasType"": ""FunctionTypeCoverage""
                                            },
                                            ""objectProperties"": []
                                        }
                                    ]
                                },
                                {
                                    ""name"": ""hasAssetAcquisition"",
                                    ""properties"": {
                                        ""individualName"": ""camera_1_asset_acquisition"",
                                        ""inputName"": ""camera 1 asset acquisition"",
                                        ""owlVersion"": ""v1.0"",
                                        ""summary"": """",
                                        ""templateFrom"": ""template_asset_acquisition"",
                                        ""uuid"": ""b6a249ee-b707-403d-b8dd"",
                                        ""version"": ""v1.0"",
                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                                    },
                                    ""objectProperties"": [
                                        {
                                            ""name"": ""hasMaturity"",
                                            ""properties"": {
                                                ""hasMaturity"": ""InUse""
                                            },
                                            ""objectProperties"": []
                                        }
                                    ]
                                },
                                {
                                    ""name"": ""hasAssetIdentification"",
                                    ""properties"": {
                                        ""hasInventories"": ""[200, 250]"",
                                        ""hasOrigin"": ""200"",
                                        ""hasType"": ""9"",
                                        ""individualName"": ""camera_1_asset_identification"",
                                        ""inputName"": ""camera 1 asset identification"",
                                        ""owlVersion"": ""v1.0"",
                                        ""summary"": """",
                                        ""templateFrom"": """",
                                        ""uuid"": ""53a15a66-79bf-40e5-89fd"",
                                        ""version"": ""v1.0"",
                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                                    },
                                    ""objectProperties"": [
                                        {
                                            ""name"": ""hasCategory"",
                                            ""properties"": {
                                                ""hasCategory"": ""Ground""
                                            },
                                            ""objectProperties"": []
                                        },
                                        {
                                            ""name"": ""hasIcon"",
                                            ""properties"": {
                                                ""hasIcon"": ""Unknown""
                                            },
                                            ""objectProperties"": []
                                        },
                                        {
                                            ""name"": ""hasLevel"",
                                            ""properties"": {
                                                ""hasLevel"": ""System""
                                            },
                                            ""objectProperties"": []
                                        },
                                        {
                                            ""name"": ""hasNature"",
                                            ""properties"": {
                                                ""hasNature"": ""Hardware""
                                            },
                                            ""objectProperties"": []
                                        }
                                    ]
                                },
                                {
                                    ""name"": ""hasCapabilities"",
                                    ""properties"": {
                                        ""communications"": """",
                                        ""detectability"": 50.0,
                                        ""identification"": 20.0,
                                        ""individualName"": ""camera_asset_capabilities"",
                                        ""inputName"": ""camera asset capabilities"",
                                        ""interoperability"": 1.0,
                                        ""maintenanceTime"": 18000.0,
                                        ""meanTimeBetweenFailures"": 70.0,
                                        ""meanTimeToRepair"": 800.0,
                                        ""operationalRange"": 23000.0,
                                        ""operationalSpeed"": 0.0,
                                        ""operationalTime"": 1800000.0,
                                        ""owlVersion"": ""v1.0"",
                                        ""summary"": """",
                                        ""templateFrom"": ""template_asset_capabilities"",
                                        ""upgradeability"": 0.1,
                                        ""uuid"": ""38e8f902-2b9a-46ec-8f76"",
                                        ""version"": ""v1.1"",
                                        ""vulnerability"": 7750.0,
                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                                    },
                                    ""objectProperties"": []
                                },
                                {
                                    ""name"": ""hasSizeWeight"",
                                    ""properties"": {
                                        ""height"": 0.05,
                                        ""individualName"": ""camera_1_size_weight"",
                                        ""inputName"": ""camera 1 size weight"",
                                        ""length"": 0.12,
                                        ""owlVersion"": ""v1.0"",
                                        ""summary"": """",
                                        ""templateFrom"": """",
                                        ""uuid"": ""72f8665c-d041-4b5c-a2a7"",
                                        ""version"": ""v1.0"",
                                        ""weight"": 0.3,
                                        ""width"": 0.08,
                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                                    },
                                    ""objectProperties"": []
                                },
                                {
                                    ""name"": ""hasAssetRules"",
                                    ""properties"": {
                                        ""individualName"": ""cameraAssetRules"",
                                        ""inputName"": ""cameraAssetRules"",
                                        ""owlVersion"": ""v1.0"",
                                        ""summary"": """",
                                        ""templateFrom"": """",
                                        ""uuid"": ""69d84984-93a4-481b-a95b-12e6eafda3e1"",
                                        ""version"": ""v1.1"",
                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00""
                                    },
                                    ""objectProperties"": [
                                        {
                                            ""name"": ""hasRule"",
                                            ""properties"": {
                                                ""datapropertyName"": ""aperture"",
                                                ""mandatory"": ""yes"",
                                                ""minDoubleValue"": 0.0
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDataType"",
                                                    ""properties"": {
                                                        ""hasDataType"": ""double""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasRule"",
                                            ""properties"": {
                                                ""datapropertyName"": ""circleOfConfusion"",
                                                ""mandatory"": ""yes"",
                                                ""minDoubleValue"": 0.0
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDataType"",
                                                    ""properties"": {
                                                        ""hasDataType"": ""double""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasRule"",
                                            ""properties"": {
                                                ""datapropertyName"": ""cocPercentage"",
                                                ""mandatory"": ""no"",
                                                ""minDoubleValue"": 100.0
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDataType"",
                                                    ""properties"": {
                                                        ""hasDataType"": ""double""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasRule"",
                                            ""properties"": {
                                                ""datapropertyName"": ""depthOfField"",
                                                ""mandatory"": ""yes"",
                                                ""minDoubleValue"": 0.0
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDataType"",
                                                    ""properties"": {
                                                        ""hasDataType"": ""double""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasRule"",
                                            ""properties"": {
                                                ""datapropertyName"": ""diagonalOfSensor"",
                                                ""mandatory"": ""no"",
                                                ""minDoubleValue"": 0.0
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDataType"",
                                                    ""properties"": {
                                                        ""hasDataType"": ""double""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasRule"",
                                            ""properties"": {
                                                ""datapropertyName"": ""distanceLensToObject"",
                                                ""mandatory"": ""no"",
                                                ""minDoubleValue"": 0.0
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDataType"",
                                                    ""properties"": {
                                                        ""hasDataType"": ""double""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasRule"",
                                            ""properties"": {
                                                ""datapropertyName"": ""distanceLensToSensor"",
                                                ""mandatory"": ""no"",
                                                ""minDoubleValue"": 0.0
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDataType"",
                                                    ""properties"": {
                                                        ""hasDataType"": ""double""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasRule"",
                                            ""properties"": {
                                                ""datapropertyName"": ""farFOVHorizontal"",
                                                ""mandatory"": ""no"",
                                                ""minDoubleValue"": 0.0
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDataType"",
                                                    ""properties"": {
                                                        ""hasDataType"": ""double""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasRule"",
                                            ""properties"": {
                                                ""datapropertyName"": ""farFOVVertical"",
                                                ""mandatory"": ""no"",
                                                ""minDoubleValue"": 0.0
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDataType"",
                                                    ""properties"": {
                                                        ""hasDataType"": ""double""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasRule"",
                                            ""properties"": {
                                                ""datapropertyName"": ""focalLength"",
                                                ""mandatory"": ""yes"",
                                                ""maxDoubleValue"": 600.0,
                                                ""minDoubleValue"": 1.0
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDataType"",
                                                    ""properties"": {
                                                        ""hasDataType"": ""double""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasRule"",
                                            ""properties"": {
                                                ""datapropertyName"": ""hyperfocalDistance"",
                                                ""mandatory"": ""yes"",
                                                ""minDoubleValue"": 0.0
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDataType"",
                                                    ""properties"": {
                                                        ""hasDataType"": ""double""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasRule"",
                                            ""properties"": {
                                                ""datapropertyName"": ""lensDiameter"",
                                                ""mandatory"": ""no"",
                                                ""maxDoubleValue"": 400.0,
                                                ""minDoubleValue"": 0.0
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDataType"",
                                                    ""properties"": {
                                                        ""hasDataType"": ""double""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasRule"",
                                            ""properties"": {
                                                ""datapropertyName"": ""nearFOVHorizontal"",
                                                ""mandatory"": ""no"",
                                                ""minDoubleValue"": 0.0
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDataType"",
                                                    ""properties"": {
                                                        ""hasDataType"": ""double""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasRule"",
                                            ""properties"": {
                                                ""datapropertyName"": ""nearFOVVertical"",
                                                ""mandatory"": ""no"",
                                                ""minDoubleValue"": 0.0
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDataType"",
                                                    ""properties"": {
                                                        ""hasDataType"": ""double""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasRule"",
                                            ""properties"": {
                                                ""datapropertyName"": ""pixelSize"",
                                                ""mandatory"": ""no"",
                                                ""maxDoubleValue"": 11.0,
                                                ""minDoubleValue"": 0.0
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDataType"",
                                                    ""properties"": {
                                                        ""hasDataType"": ""double""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasRule"",
                                            ""properties"": {
                                                ""datapropertyName"": ""resolutionHeight"",
                                                ""mandatory"": ""no"",
                                                ""minDoubleValue"": 0.0
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDataType"",
                                                    ""properties"": {
                                                        ""hasDataType"": ""double""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasRule"",
                                            ""properties"": {
                                                ""datapropertyName"": ""resolutionWidth"",
                                                ""mandatory"": ""no"",
                                                ""minDoubleValue"": 0.0
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDataType"",
                                                    ""properties"": {
                                                        ""hasDataType"": ""double""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasRule"",
                                            ""properties"": {
                                                ""datapropertyName"": ""sensorHeight"",
                                                ""mandatory"": ""no"",
                                                ""maxDoubleValue"": 100.0,
                                                ""minDoubleValue"": 0.0
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDataType"",
                                                    ""properties"": {
                                                        ""hasDataType"": ""double""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasRule"",
                                            ""properties"": {
                                                ""datapropertyName"": ""sensorResolution"",
                                                ""mandatory"": ""yes"",
                                                ""minDoubleValue"": 0.0
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDataType"",
                                                    ""properties"": {
                                                        ""hasDataType"": ""double""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasRule"",
                                            ""properties"": {
                                                ""datapropertyName"": ""sensorWidth"",
                                                ""mandatory"": ""no"",
                                                ""maxDoubleValue"": 100.0,
                                                ""minDoubleValue"": 0.0
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDataType"",
                                                    ""properties"": {
                                                        ""hasDataType"": ""double""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        },
                                        {
                                            ""name"": ""hasRule"",
                                            ""properties"": {
                                                ""datapropertyName"": ""viewingDistance"",
                                                ""mandatory"": ""no"",
                                                ""minDoubleValue"": 5.0
                                            },
                                            ""objectProperties"": [
                                                {
                                                    ""name"": ""hasDataType"",
                                                    ""properties"": {
                                                        ""hasDataType"": ""double""
                                                    },
                                                    ""objectProperties"": []
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    ""name"": ""hasInstallationConstraint"",
                                    ""properties"": {
                                        ""individualName"": ""installationConstraint2"",
                                        ""inputName"": ""installationConstraint2"",
                                        ""owlVersion"": ""v1.0"",
                                        ""summary"": """",
                                        ""templateFrom"": ""template_installation_constraint"",
                                        ""uuid"": ""75a2db26-6098-43b6-ba54-f2c0ba09c648"",
                                        ""version"": ""v1.1"",
                                        ""dateCreated"": ""2023-10-23T15:30:00+00:00"",
                                        ""hasInstallationParameter1"": ""cameraInstance"",
                                        ""hasInstallationParameter2"": ""ship_instance_1""
                                    },
                                    ""objectProperties"": [
                                        {
                                            ""name"": ""hasConstraintDefinition"",
                                            ""properties"": {
                                                ""hasConstraintDefinition"": ""canBePlacedOn""
                                            },
                                            ""objectProperties"": []
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}"
nMTy8vQm,POS-14,d-shaktiranjan,Bash,Friday 15th of December 2023 03:36:22 AM CDT,"shakti ➜ base 
❯ mka bacon -6

15:03:49 ************************************************************
15:03:49 You are building on a machine with 13.6GB of RAM
15:03:49 
15:03:49 The minimum required amount of free memory is around 16GB,
15:03:49 and even with that, some configurations may not work.
15:03:49 
15:03:49 If you run into segfaults or other errors, try reducing your
15:03:49 -j value.
15:03:49 ************************************************************
vendor/aosp/config/bootanimation.mk:10: warning: ""TARGET_BOOT_ANIMATION_RES is undefined, assuming 1080p""
date: bad date 2023-12-15 09:33 UTC
============================================
PLATFORM_VERSION_CODENAME=REL
PLATFORM_VERSION=14
CUSTOM_VERSION=PixelOS_redwood-14.0-20231215-0933
PRODUCT_INCLUDE_TAGS=com.android.mainline
TARGET_PRODUCT=aosp_redwood
TARGET_BUILD_VARIANT=userdebug
TARGET_ARCH=arm64
TARGET_ARCH_VARIANT=armv8-2a
TARGET_CPU_VARIANT=generic
TARGET_2ND_ARCH=arm
TARGET_2ND_ARCH_VARIANT=armv8-a
TARGET_2ND_CPU_VARIANT=generic
HOST_OS=linux
HOST_OS_EXTRA=Linux-6.6.6-200.fc39.x86_64-x86_64-Fedora-Linux-39-(Workstation-Edition)
HOST_CROSS_OS=windows
BUILD_ID=UQ1A.231205.015
OUT_DIR=out
============================================
[100% 1026/1026] analyzing Android.bp files and generating ninja file at out/soong/build.ninja
FAILED: out/soong/build.ninja
cd ""$(dirname ""out/host/linux-x86/bin/soong_build"")"" && BUILDER=""$PWD/$(basename ""out/host/linux-x86/bin/soong_build"")"" && cd / && env -i  ""$BUILDER""     --top ""$TOP""     --soong_out ""out/so
ong""     --out ""out""     -o out/soong/build.ninja --bazel-mode --globListDir build --globFile out/soong/globs-build.ninja -t -l out/.module_paths/Android.bp.list --available_env out/soong/so
ong.environment.available --used_env out/soong/soong.environment.used.build Android.bp
error: frameworks/base/boot/Android.bp:56:1: ""platform-bootclasspath"" depends on undefined module ""WfdCommon"".
Or did you mean [""NeneCommon"" ""iw_common"" ""tv-common""]?
15:04:46 soong bootstrap failed with: exit status 1

#### failed to build some targets (58 seconds) ####
"
0ZCLrFy9,X-Currency Bulgarian lev with Multiple Symbol,breakoutcoder,PHP,Friday 15th of December 2023 02:42:11 AM CDT,"add_filter(
    'x_currency_selected_currency', function( \stdClass $currency ) {
        if ( $currency->code !== 'BGN' ) {
            return $currency;
        }

        $symbols = [
            'en' => 'BGN', // English language symbol
            'bg' => 'лв',  // Български language symbol
        ];

        $selected_language = weglot_get_current_language();

        if ( isset( $symbols[$selected_language] ) ) {
            $currency->symbol = $symbols[$selected_language];
        }

        return $currency;
    }
);"
akWD1Ni1,Scammers and Spammers [12-2/2023],bombaires,AIMMS,Friday 15th of December 2023 02:37:50 AM CDT,"<a href=""mailto:fredgrenville@aliyun.com"">fredgrenville@aliyun.com</a>
<a href=""mailto:a9c5118e-a7b5-4eab-8a39-6e979a750f03@identity-protect.org"">a9c5118e-a7b5-4eab-8a39-6e979a750f03@identity-protect.org</a>
<a href=""mailto:grenvillefred@gmail.com"">grenvillefred@gmail.com</a>
<a href=""mailto:gr.en.v.ill.e.fred@gmail.com"">gr.en.v.ill.e.fred@gmail.com</a>
<a href=""mailto:gr.en.vil.lefr.e.d@gmail.com"">gr.en.vil.lefr.e.d@gmail.com</a>
<a href=""mailto:gre.n.vi.ll.e.fr.ed@gmail.com"">gre.n.vi.ll.e.fr.ed@gmail.com</a>
<a href=""mailto:gr.e.n.vil.l.e.f.r.ed@gmail.com"">gr.e.n.vil.l.e.f.r.ed@gmail.com</a>
<a href=""mailto:g.r.e.nv.illef.r.e.d@gmail.com"">g.r.e.nv.illef.r.e.d@gmail.com</a>
<a href=""mailto:g.re.nv.il.le.f.r.ed@gmail.com"">g.re.nv.il.le.f.r.ed@gmail.com</a>
<a href=""mailto:gr.en.vi.ll.efred@gmail.com"">gr.en.vi.ll.efred@gmail.com</a>
<a href=""mailto:gr.envi.l.lefre.d@gmail.com"">gr.envi.l.lefre.d@gmail.com</a>
<a href=""mailto:g.r.env.i.llefr.e.d@gmail.com"">g.r.env.i.llefr.e.d@gmail.com</a>
<a href=""mailto:gre.n.vil.l.e.f.red@gmail.com"">gre.n.vil.l.e.f.red@gmail.com</a>
<a href=""mailto:gre.nvi.llef.re.d@gmail.com"">gre.nvi.llef.re.d@gmail.com</a>
<a href=""mailto:gre.nvi.l.l.ef.re.d@gmail.com"">gre.nvi.l.l.ef.re.d@gmail.com</a>
<a href=""mailto:grenv.ill.e.f.re.d@gmail.com"">grenv.ill.e.f.re.d@gmail.com</a>
<a href=""mailto:gre.n.vi.llef.r.e.d@gmail.com"">gre.n.vi.llef.r.e.d@gmail.com</a>
<a href=""mailto:gr.e.nv.il.l.e.fr.e.d@gmail.com"">gr.e.nv.il.l.e.fr.e.d@gmail.com</a>
<a href=""mailto:gre.nvill.ef.r.ed@gmail.com"">gre.nvill.ef.r.ed@gmail.com</a>
<a href=""mailto:g.r.e.n.vi.l.l.efr.ed@gmail.com"">g.r.e.n.vi.l.l.efr.ed@gmail.com</a>
<a href=""mailto:gren.vill.efred@gmail.com"">gren.vill.efred@gmail.com</a>
<a href=""mailto:grenv.i.lle.fre.d@gmail.com"">grenv.i.lle.fre.d@gmail.com</a>
<a href=""mailto:g.r.en.v.i.ll.e.fr.e.d@gmail.com"">g.r.en.v.i.ll.e.fr.e.d@gmail.com</a>
<a href=""mailto:gre.n.vi.ll.e.f.red@gmail.com"">gre.n.vi.ll.e.f.red@gmail.com</a>
<a href=""mailto:g.re.nv.i.llef.r.ed@gmail.com"">g.re.nv.i.llef.r.ed@gmail.com</a>
<a href=""mailto:g.ren.vil.lefr.e.d@gmail.com"">g.ren.vil.lefr.e.d@gmail.com</a>
<a href=""mailto:g.r.en.v.ill.ef.re.d@gmail.com"">g.r.en.v.ill.ef.re.d@gmail.com</a>
<a href=""mailto:grenv.il.l.e.f.r.e.d@gmail.com"">grenv.il.l.e.f.r.e.d@gmail.com</a>
<a href=""mailto:g.ren.vi.l.le.f.r.e.d@gmail.com"">g.ren.vi.l.le.f.r.e.d@gmail.com</a>
<a href=""mailto:g.r.e.nv.il.lef.r.ed@gmail.com"">g.r.e.nv.il.lef.r.ed@gmail.com</a>
<a href=""mailto:gre.nvi.l.l.e.fr.e.d@gmail.com"">gre.nvi.l.l.e.fr.e.d@gmail.com</a>
<a href=""mailto:gren.v.ill.e.f.re.d@gmail.com"">gren.v.ill.e.f.re.d@gmail.com</a>
<a href=""mailto:gre.nv.illefr.ed@gmail.com"">gre.nv.illefr.ed@gmail.com</a>
<a href=""mailto:g.re.nv.il.lefred@gmail.com"">g.re.nv.il.lefred@gmail.com</a>
<a href=""mailto:gre.nv.i.ll.e.f.r.ed@gmail.com"">gre.nv.i.ll.e.f.r.ed@gmail.com</a>
<a href=""mailto:grenv.i.ll.e.fr.e.d@gmail.com"">grenv.i.ll.e.fr.e.d@gmail.com</a>
<a href=""mailto:gr.en.v.ille.fr.e.d@gmail.com"">gr.en.v.ille.fr.e.d@gmail.com</a>
<a href=""mailto:gren.vil.lef.re.d@gmail.com"">gren.vil.lef.re.d@gmail.com</a>
<a href=""mailto:g.re.nv.i.l.l.efred@gmail.com"">g.re.nv.i.l.l.efred@gmail.com</a>
<a href=""mailto:gr.env.i.llef.r.e.d@gmail.com"">gr.env.i.llef.r.e.d@gmail.com</a>
<a href=""mailto:g.ren.v.ill.efred@gmail.com"">g.ren.v.ill.efred@gmail.com</a>
<a href=""mailto:gr.e.nv.i.l.lefr.ed@gmail.com"">gr.e.nv.i.l.lefr.ed@gmail.com</a>
<a href=""mailto:g.r.en.v.ill.e.f.r.ed@gmail.com"">g.r.en.v.ill.e.f.r.ed@gmail.com</a>
<a href=""mailto:g.ren.vil.lefr.ed@gmail.com"">g.ren.vil.lefr.ed@gmail.com</a>
<a href=""mailto:gre.nvil.lefre.d@gmail.com"">gre.nvil.lefre.d@gmail.com</a>
<a href=""mailto:gr.e.n.v.il.lefr.e.d@gmail.com"">gr.e.n.v.il.lefr.e.d@gmail.com</a>
<a href=""mailto:gre.nvil.le.f.re.d@gmail.com"">gre.nvil.le.f.re.d@gmail.com</a>
<a href=""mailto:gren.villef.r.ed@gmail.com"">gren.villef.r.ed@gmail.com</a>
<a href=""mailto:g.renv.i.ll.e.fre.d@gmail.com"">g.renv.i.ll.e.fre.d@gmail.com</a>
<a href=""mailto:gr.e.nvil.l.efr.e.d@gmail.com"">gr.e.nvil.l.efr.e.d@gmail.com</a>
<a href=""mailto:gr.en.vi.lle.fre.d@gmail.com"">gr.en.vi.lle.fre.d@gmail.com</a>
<a href=""mailto:gr.env.i.l.l.efre.d@gmail.com"">gr.env.i.l.l.efre.d@gmail.com</a>
<a href=""mailto:gr.en.vil.l.e.fr.ed@gmail.com"">gr.en.vil.l.e.fr.ed@gmail.com</a>
<a href=""mailto:gren.vi.ll.e.fr.e.d@gmail.com"">gren.vi.ll.e.fr.e.d@gmail.com</a>
<a href=""mailto:grenvil.lefr.e.d@gmail.com"">grenvil.lefr.e.d@gmail.com</a>
<a href=""mailto:g.ren.v.il.l.e.fre.d@gmail.com"">g.ren.v.il.l.e.fre.d@gmail.com</a>
<a href=""mailto:gre.n.vi.llefred@gmail.com"">gre.n.vi.llefred@gmail.com</a>
<a href=""mailto:g.r.en.vi.l.lefre.d@gmail.com"">g.r.en.vi.l.lefre.d@gmail.com</a>
<a href=""mailto:g.re.n.vi.ll.e.fr.ed@gmail.com"">g.re.n.vi.ll.e.fr.ed@gmail.com</a>
<a href=""mailto:g.r.env.il.l.efr.e.d@gmail.com"">g.r.env.il.l.efr.e.d@gmail.com</a>
<a href=""mailto:gr.e.n.v.i.ll.e.fred@gmail.com"">gr.e.n.v.i.ll.e.fred@gmail.com</a>
<a href=""mailto:g.r.env.il.le.f.re.d@gmail.com"">g.r.env.il.le.f.re.d@gmail.com</a>
<a href=""mailto:g.renvi.lle.f.r.e.d@gmail.com"">g.renvi.lle.f.r.e.d@gmail.com</a>
<a href=""mailto:gre.n.v.illef.r.ed@gmail.com"">gre.n.v.illef.r.ed@gmail.com</a>
<a href=""mailto:g.ren.v.i.lle.f.r.e.d@gmail.com"">g.ren.v.i.lle.f.r.e.d@gmail.com</a>
<a href=""mailto:gr.en.vi.l.lefr.ed@gmail.com"">gr.en.vi.l.lefr.ed@gmail.com</a>
<a href=""mailto:g.r.en.v.il.l.efred@gmail.com"">g.r.en.v.il.l.efred@gmail.com</a>
<a href=""mailto:g.r.e.nv.i.l.l.ef.re.d@gmail.com"">g.r.e.nv.i.l.l.ef.re.d@gmail.com</a>
<a href=""mailto:g.ren.vill.ef.red@gmail.com"">g.ren.vill.ef.red@gmail.com</a>
<a href=""mailto:grenvill.ef.re.d@gmail.com"">grenvill.ef.re.d@gmail.com</a>
<a href=""mailto:g.re.nvi.ll.ef.r.ed@gmail.com"">g.re.nvi.ll.ef.r.ed@gmail.com</a>
<a href=""mailto:g.r.env.i.l.le.fre.d@gmail.com"">g.r.env.i.l.le.fre.d@gmail.com</a>
<a href=""mailto:gr.envil.lefred@gmail.com"">gr.envil.lefred@gmail.com</a>
<a href=""mailto:g.ren.ville.f.r.ed@gmail.com"">g.ren.ville.f.r.ed@gmail.com</a>
<a href=""mailto:gr.e.nvi.l.lef.re.d@gmail.com"">gr.e.nvi.l.lef.re.d@gmail.com</a>
<a href=""mailto:g.r.env.i.l.l.efr.e.d@gmail.com"">g.r.env.i.l.l.efr.e.d@gmail.com</a>
<a href=""mailto:g.r.e.n.vi.lle.f.r.e.d@gmail.com"">g.r.e.n.vi.lle.f.r.e.d@gmail.com</a>
<a href=""mailto:g.re.nvi.l.lef.re.d@gmail.com"">g.re.nvi.l.lef.re.d@gmail.com</a>
<a href=""mailto:grenv.ill.e.fre.d@gmail.com"">grenv.ill.e.fre.d@gmail.com</a>
<a href=""mailto:gr.e.nvi.l.le.f.re.d@gmail.com"">gr.e.nvi.l.le.f.re.d@gmail.com</a>
<a href=""mailto:g.re.n.ville.f.red@gmail.com"">g.re.n.ville.f.red@gmail.com</a>
<a href=""mailto:grenv.i.llefre.d@gmail.com"">grenv.i.llefre.d@gmail.com</a>
<a href=""mailto:g.re.n.v.i.l.l.ef.r.e.d@gmail.com"">g.re.n.v.i.l.l.ef.r.e.d@gmail.com</a>
<a href=""mailto:gr.envil.lef.re.d@gmail.com"">gr.envil.lef.re.d@gmail.com</a>
<a href=""mailto:gr.en.v.i.ll.e.fred@gmail.com"">gr.en.v.i.ll.e.fred@gmail.com</a>
<a href=""mailto:gren.v.i.llef.red@gmail.com"">gren.v.i.llef.red@gmail.com</a>
<a href=""mailto:g.r.env.il.l.e.f.r.e.d@gmail.com"">g.r.env.il.l.e.f.r.e.d@gmail.com</a>
<a href=""mailto:g.r.e.nv.i.l.l.ef.r.ed@gmail.com"">g.r.e.nv.i.l.l.ef.r.ed@gmail.com</a>
<a href=""mailto:gren.vi.lle.fred@gmail.com"">gren.vi.lle.fred@gmail.com</a>
<a href=""mailto:gr.env.ill.e.f.re.d@gmail.com"">gr.env.ill.e.f.re.d@gmail.com</a>
<a href=""mailto:g.re.nvil.lef.r.ed@gmail.com"">g.re.nvil.lef.r.ed@gmail.com</a>
<a href=""mailto:gr.en.v.i.ll.e.f.red@gmail.com"">gr.en.v.i.ll.e.f.red@gmail.com</a>
<a href=""mailto:gre.n.ville.f.r.ed@gmail.com"">gre.n.ville.f.r.ed@gmail.com</a>
<a href=""mailto:g.re.nv.ill.efre.d@gmail.com"">g.re.nv.ill.efre.d@gmail.com</a>
<a href=""mailto:gren.v.i.llef.re.d@gmail.com"">gren.v.i.llef.re.d@gmail.com</a>
<a href=""mailto:g.renv.ill.e.fr.ed@gmail.com"">g.renv.ill.e.fr.ed@gmail.com</a>
<a href=""mailto:g.renvi.lle.f.red@gmail.com"">g.renvi.lle.f.red@gmail.com</a>
<a href=""mailto:g.ren.v.i.l.l.efr.ed@gmail.com"">g.ren.v.i.l.l.efr.ed@gmail.com</a>
<a href=""mailto:g.r.e.n.vil.l.e.f.r.ed@gmail.com"">g.r.e.n.vil.l.e.f.r.ed@gmail.com</a>
<a href=""mailto:g.re.n.v.i.lle.fr.e.d@gmail.com"">g.re.n.v.i.lle.fr.e.d@gmail.com</a>
<a href=""mailto:g.renvi.ll.e.f.r.ed@gmail.com"">g.renvi.ll.e.f.r.ed@gmail.com</a>
<a href=""mailto:g.r.env.i.l.le.f.r.ed@gmail.com"">g.r.env.i.l.le.f.r.ed@gmail.com</a>
<a href=""mailto:gr.e.nvil.l.e.fred@gmail.com"">gr.e.nvil.l.e.fred@gmail.com</a>
<a href=""mailto:gr.en.v.il.lef.red@gmail.com"">gr.en.v.il.lef.red@gmail.com</a>
<a href=""mailto:gr.envi.l.le.fre.d@gmail.com"">gr.envi.l.le.fre.d@gmail.com</a>
<a href=""mailto:grenville.f.re.d@gmail.com"">grenville.f.re.d@gmail.com</a>
<a href=""mailto:gren.vill.ef.r.e.d@gmail.com"">gren.vill.ef.r.e.d@gmail.com</a>
<a href=""mailto:gren.vi.ll.ef.re.d@gmail.com"">gren.vi.ll.ef.re.d@gmail.com</a>
<a href=""mailto:g.r.en.vi.l.l.e.f.r.e.d@gmail.com"">g.r.en.vi.l.l.e.f.r.e.d@gmail.com</a>
<a href=""mailto:gre.nv.ill.e.fr.e.d@gmail.com"">gre.nv.ill.e.fr.e.d@gmail.com</a>
<a href=""mailto:gr.env.i.lle.f.re.d@gmail.com"">gr.env.i.lle.f.re.d@gmail.com</a>
<a href=""mailto:gren.vill.efr.e.d@gmail.com"">gren.vill.efr.e.d@gmail.com</a>
<a href=""mailto:g.r.envi.ll.efre.d@gmail.com"">g.r.envi.ll.efre.d@gmail.com</a>
<a href=""mailto:gr.env.i.l.l.efr.e.d@gmail.com"">gr.env.i.l.l.efr.e.d@gmail.com</a>
<a href=""mailto:g.r.e.nvi.llefre.d@gmail.com"">g.r.e.nvi.llefre.d@gmail.com</a>
<a href=""mailto:grenvi.l.lef.r.ed@gmail.com"">grenvi.l.lef.r.ed@gmail.com</a>
<a href=""mailto:g.r.e.n.v.i.lle.f.re.d@gmail.com"">g.r.e.n.v.i.lle.f.re.d@gmail.com</a>
<a href=""mailto:g.re.n.v.ill.efre.d@gmail.com"">g.re.n.v.ill.efre.d@gmail.com</a>
<a href=""mailto:gre.nv.ille.f.r.ed@gmail.com"">gre.nv.ille.f.r.ed@gmail.com</a>
<a href=""mailto:gren.vi.ll.efr.e.d@gmail.com"">gren.vi.ll.efr.e.d@gmail.com</a>
<a href=""mailto:gre.n.v.il.l.e.fr.e.d@gmail.com"">gre.n.v.il.l.e.fr.e.d@gmail.com</a>
<a href=""mailto:g.r.e.n.v.ill.ef.r.e.d@gmail.com"">g.r.e.n.v.ill.ef.r.e.d@gmail.com</a>
<a href=""mailto:gre.nv.i.l.lef.re.d@gmail.com"">gre.nv.i.l.lef.re.d@gmail.com</a>
<a href=""mailto:gr.en.vi.lle.f.red@gmail.com"">gr.en.vi.lle.f.red@gmail.com</a>
<a href=""mailto:g.re.n.v.ill.e.fre.d@gmail.com"">g.re.n.v.ill.e.fre.d@gmail.com</a>
<a href=""mailto:g.re.n.vil.l.efr.e.d@gmail.com"">g.re.n.vil.l.efr.e.d@gmail.com</a>
<a href=""mailto:grenvillefr.e.d@gmail.com"">grenvillefr.e.d@gmail.com</a>
<a href=""mailto:grenvi.ll.efr.ed@gmail.com"">grenvi.ll.efr.ed@gmail.com</a>
<a href=""mailto:grenvil.le.fred@gmail.com"">grenvil.le.fred@gmail.com</a>
<a href=""mailto:gr.e.n.vil.lef.r.ed@gmail.com"">gr.e.n.vil.lef.r.ed@gmail.com</a>
<a href=""mailto:g.r.e.n.vi.l.l.e.f.re.d@gmail.com"">g.r.e.n.vi.l.l.e.f.re.d@gmail.com</a>
<a href=""mailto:gr.enville.f.r.e.d@gmail.com"">gr.enville.f.r.e.d@gmail.com</a>
<a href=""mailto:gr.e.nv.il.l.efr.e.d@gmail.com"">gr.e.nv.il.l.efr.e.d@gmail.com</a>
<a href=""mailto:g.r.en.v.il.lefre.d@gmail.com"">g.r.en.v.il.lefre.d@gmail.com</a>
<a href=""mailto:g.renvil.l.efr.e.d@gmail.com"">g.renvil.l.efr.e.d@gmail.com</a>
<a href=""mailto:g.r.enville.fre.d@gmail.com"">g.r.enville.fre.d@gmail.com</a>
<a href=""mailto:gren.v.i.ll.e.fre.d@gmail.com"">gren.v.i.ll.e.fre.d@gmail.com</a>
<a href=""mailto:gre.nvil.l.ef.r.e.d@gmail.com"">gre.nvil.l.ef.r.e.d@gmail.com</a>
<a href=""mailto:g.ren.vill.e.fr.ed@gmail.com"">g.ren.vill.e.fr.ed@gmail.com</a>
<a href=""mailto:grenv.ille.fre.d@gmail.com"">grenv.ille.fre.d@gmail.com</a>
<a href=""mailto:gr.e.nv.il.lef.re.d@gmail.com"">gr.e.nv.il.lef.re.d@gmail.com</a>
<a href=""mailto:g.ren.vil.lef.red@gmail.com"">g.ren.vil.lef.red@gmail.com</a>
<a href=""mailto:grenv.i.lle.fr.ed@gmail.com"">grenv.i.lle.fr.ed@gmail.com</a>
<a href=""mailto:g.r.e.n.v.il.lefr.e.d@gmail.com"">g.r.e.n.v.il.lefr.e.d@gmail.com</a>
<a href=""mailto:g.r.e.n.vil.le.f.r.ed@gmail.com"">g.r.e.n.vil.le.f.r.ed@gmail.com</a>
<a href=""mailto:gr.en.vi.lle.f.r.ed@gmail.com"">gr.en.vi.lle.f.r.ed@gmail.com</a>
<a href=""mailto:g.r.envil.l.e.f.red@gmail.com"">g.r.envil.l.e.f.red@gmail.com</a>
<a href=""mailto:gre.nv.i.lle.f.r.e.d@gmail.com"">gre.nv.i.lle.f.r.e.d@gmail.com</a>
<a href=""mailto:gr.e.n.vil.l.ef.red@gmail.com"">gr.e.n.vil.l.ef.red@gmail.com</a>
<a href=""mailto:gr.en.vi.l.l.efred@gmail.com"">gr.en.vi.l.l.efred@gmail.com</a>
<a href=""mailto:g.r.e.nv.ille.fr.ed@gmail.com"">g.r.e.nv.ille.fr.ed@gmail.com</a>
<a href=""mailto:g.re.nvil.le.f.r.ed@gmail.com"">g.re.nvil.le.f.r.ed@gmail.com</a>
<a href=""mailto:g.r.en.vi.l.l.e.fr.e.d@gmail.com"">g.r.en.vi.l.l.e.fr.e.d@gmail.com</a>
<a href=""mailto:g.re.nvill.e.fre.d@gmail.com"">g.re.nvill.e.fre.d@gmail.com</a>
<a href=""mailto:g.re.n.vi.l.lefr.e.d@gmail.com"">g.re.n.vi.l.lefr.e.d@gmail.com</a>
<a href=""mailto:gr.e.n.vil.lefr.ed@gmail.com"">gr.e.n.vil.lefr.ed@gmail.com</a>
<a href=""mailto:g.re.nvil.le.fred@gmail.com"">g.re.nvil.le.fred@gmail.com</a>
<a href=""mailto:g.r.e.n.vi.l.l.e.f.r.e.d@gmail.com"">g.r.e.n.vi.l.l.e.f.r.e.d@gmail.com</a>
<a href=""mailto:gr.e.n.vi.l.l.efred@gmail.com"">gr.e.n.vi.l.l.efred@gmail.com</a>
<a href=""mailto:gr.e.nvil.lefr.ed@gmail.com"">gr.e.nvil.lefr.ed@gmail.com</a>
<a href=""mailto:g.re.nv.i.llefre.d@gmail.com"">g.re.nv.i.llefre.d@gmail.com</a>
<a href=""mailto:g.r.en.v.illef.r.ed@gmail.com"">g.r.en.v.illef.r.ed@gmail.com</a>
<a href=""mailto:gr.e.nv.ill.e.fre.d@gmail.com"">gr.e.nv.ill.e.fre.d@gmail.com</a>
<a href=""mailto:g.re.nv.ill.ef.r.e.d@gmail.com"">g.re.nv.ill.ef.r.e.d@gmail.com</a>
<a href=""mailto:g.r.env.il.lefr.e.d@gmail.com"">g.r.env.il.lefr.e.d@gmail.com</a>
<a href=""mailto:g.r.envi.ll.e.f.r.e.d@gmail.com"">g.r.envi.ll.e.f.r.e.d@gmail.com</a>
<a href=""mailto:g.renv.i.llef.r.ed@gmail.com"">g.renv.i.llef.r.ed@gmail.com</a>
<a href=""mailto:gr.env.i.lle.f.r.e.d@gmail.com"">gr.env.i.lle.f.r.e.d@gmail.com</a>
<a href=""mailto:gr.e.n.v.il.le.fr.e.d@gmail.com"">gr.e.n.v.il.le.fr.e.d@gmail.com</a>
<a href=""mailto:g.r.e.n.v.i.l.l.e.fr.ed@gmail.com"">g.r.e.n.v.i.l.l.e.fr.ed@gmail.com</a>
<a href=""mailto:g.ren.v.illef.r.ed@gmail.com"">g.ren.v.illef.r.ed@gmail.com</a>
<a href=""mailto:g.re.nv.i.lle.fred@gmail.com"">g.re.nv.i.lle.fred@gmail.com</a>
<a href=""mailto:gr.e.n.vil.le.f.re.d@gmail.com"">gr.e.n.vil.le.f.re.d@gmail.com</a>
<a href=""mailto:gr.e.n.vi.l.l.e.fre.d@gmail.com"">gr.e.n.vi.l.l.e.fre.d@gmail.com</a>
<a href=""mailto:gren.vi.l.l.e.f.red@gmail.com"">gren.vi.l.l.e.f.red@gmail.com</a>
<a href=""mailto:grenville.fr.ed@gmail.com"">grenville.fr.ed@gmail.com</a>
<a href=""mailto:g.r.en.v.i.l.le.f.r.e.d@gmail.com"">g.r.en.v.i.l.le.f.r.e.d@gmail.com</a>
<a href=""mailto:gre.n.vi.l.le.f.r.e.d@gmail.com"">gre.n.vi.l.le.f.r.e.d@gmail.com</a>
<a href=""mailto:g.re.nvi.l.l.e.f.re.d@gmail.com"">g.re.nvi.l.l.e.f.re.d@gmail.com</a>
<a href=""mailto:gre.nvi.l.lefr.ed@gmail.com"">gre.nvi.l.lefr.ed@gmail.com</a>
<a href=""mailto:gr.en.vil.l.ef.r.e.d@gmail.com"">gr.en.vil.l.ef.r.e.d@gmail.com</a>
<a href=""mailto:g.ren.vi.lle.fr.ed@gmail.com"">g.ren.vi.lle.fr.ed@gmail.com</a>
<a href=""mailto:gr.enville.fred@gmail.com"">gr.enville.fred@gmail.com</a>
<a href=""mailto:g.renv.i.ll.ef.re.d@gmail.com"">g.renv.i.ll.ef.re.d@gmail.com</a>
<a href=""mailto:g.r.e.nville.f.r.ed@gmail.com"">g.r.e.nville.f.r.ed@gmail.com</a>
<a href=""mailto:g.re.n.v.i.l.lef.r.ed@gmail.com"">g.re.n.v.i.l.lef.r.ed@gmail.com</a>
<a href=""mailto:g.re.nvillef.red@gmail.com"">g.re.nvillef.red@gmail.com</a>
<a href=""mailto:gre.n.v.ill.e.fr.ed@gmail.com"">gre.n.v.ill.e.fr.ed@gmail.com</a>
<a href=""mailto:grenvi.ll.efr.e.d@gmail.com"">grenvi.ll.efr.e.d@gmail.com</a>
<a href=""mailto:gr.e.nvi.l.le.f.r.ed@gmail.com"">gr.e.nvi.l.le.f.r.ed@gmail.com</a>
<a href=""mailto:g.r.envill.ef.r.e.d@gmail.com"">g.r.envill.ef.r.e.d@gmail.com</a>
<a href=""mailto:gr.e.n.vi.l.le.fre.d@gmail.com"">gr.e.n.vi.l.le.fre.d@gmail.com</a>
<a href=""mailto:gr.en.v.illefr.ed@gmail.com"">gr.en.v.illefr.ed@gmail.com</a>
<a href=""mailto:g.renv.i.ll.e.fr.e.d@gmail.com"">g.renv.i.ll.e.fr.e.d@gmail.com</a>
<a href=""mailto:g.r.e.n.vil.l.e.fr.ed@gmail.com"">g.r.e.n.vil.l.e.fr.ed@gmail.com</a>
<a href=""mailto:g.r.e.n.v.il.le.f.red@gmail.com"">g.r.e.n.v.il.le.f.red@gmail.com</a>
<a href=""mailto:gr.e.nv.il.l.e.f.r.e.d@gmail.com"">gr.e.nv.il.l.e.f.r.e.d@gmail.com</a>
<a href=""mailto:gr.e.n.vil.l.e.fr.e.d@gmail.com"">gr.e.n.vil.l.e.fr.e.d@gmail.com</a>
<a href=""mailto:g.r.en.vi.ll.e.fr.ed@gmail.com"">g.r.en.vi.ll.e.fr.ed@gmail.com</a>
<a href=""mailto:grenv.i.l.lef.r.e.d@gmail.com"">grenv.i.l.lef.r.e.d@gmail.com</a>
<a href=""mailto:g.r.en.villef.re.d@gmail.com"">g.r.en.villef.re.d@gmail.com</a>
<a href=""mailto:g.r.e.n.vil.lef.r.e.d@gmail.com"">g.r.e.n.vil.lef.r.e.d@gmail.com</a>
<a href=""mailto:g.renv.il.l.e.fr.ed@gmail.com"">g.renv.il.l.e.fr.ed@gmail.com</a>
<a href=""mailto:vince.starlight@gmail.com"">vince.starlight@gmail.com</a>
<a href=""mailto:v.ince.sta.r.ligh.t@gmail.com"">v.ince.sta.r.ligh.t@gmail.com</a>
<a href=""mailto:v.i.nce.st.a.rlig.h.t@gmail.com"">v.i.nce.st.a.rlig.h.t@gmail.com</a>
<a href=""mailto:vi.nc.e..st.ar.l.i.g.h.t@gmail.com"">vi.nc.e..st.ar.l.i.g.h.t@gmail.com</a>
<a href=""mailto:vinc.e..starlig.h.t@gmail.com"">vinc.e..starlig.h.t@gmail.com</a>
<a href=""mailto:vi.nce...s.t.arligh.t@gmail.com"">vi.nce...s.t.arligh.t@gmail.com</a>
<a href=""mailto:v.i.n.c.e...star.l.ig.h.t@gmail.com"">v.i.n.c.e...star.l.ig.h.t@gmail.com</a>
<a href=""mailto:v.ince...s.tar.l.ig.ht@gmail.com"">v.ince...s.tar.l.ig.ht@gmail.com</a>
<a href=""mailto:v.ince..st.ar.l.i.ght@gmail.com"">v.ince..st.ar.l.i.ght@gmail.com</a>
<a href=""mailto:vin.c.e...s.tar.l.i.gh.t@gmail.com"">vin.c.e...s.tar.l.i.gh.t@gmail.com</a>
<a href=""mailto:v.ince..s.ta.r.ligh.t@gmail.com"">v.ince..s.ta.r.ligh.t@gmail.com</a>
<a href=""mailto:v.in.c.e..s.t.a.r.l.ight@gmail.com"">v.in.c.e..s.t.a.r.l.ight@gmail.com</a>
<a href=""mailto:v.i.nce...starl.i.ght@gmail.com"">v.i.nce...starl.i.ght@gmail.com</a>
<a href=""mailto:v.i.nce...sta.rli.gh.t@gmail.com"">v.i.nce...sta.rli.gh.t@gmail.com</a>
<a href=""mailto:vin.c.e..s.t.a.r.l.ight@gmail.com"">vin.c.e..s.t.a.r.l.ight@gmail.com</a>
<a href=""mailto:vi.nce..st.a.r.l.i.g.ht@gmail.com"">vi.nce..st.a.r.l.i.g.ht@gmail.com</a>
<a href=""mailto:vin.ce...s.t.arl.i.g.h.t@gmail.com"">vin.ce...s.t.arl.i.g.h.t@gmail.com</a>
<a href=""mailto:v.in.c.e...st.a.r.li.ght@gmail.com"">v.in.c.e...st.a.r.li.ght@gmail.com</a>
<a href=""mailto:vince..star.l.i.g.h.t@gmail.com"">vince..star.l.i.g.h.t@gmail.com</a>
<a href=""mailto:vin.ce.s.tarli.g.h.t@gmail.com"">vin.ce.s.tarli.g.h.t@gmail.com</a>
<a href=""mailto:v.i.n.c.e..s.t.arligh.t@gmail.com"">v.i.n.c.e..s.t.arligh.t@gmail.com</a>
<a href=""mailto:v.in.ce.st.arl.igh.t@gmail.com"">v.in.ce.st.arl.igh.t@gmail.com</a>
<a href=""mailto:vi.n.c.e...s.ta.r.l.igh.t@gmail.com"">vi.n.c.e...s.ta.r.l.igh.t@gmail.com</a>
<a href=""mailto:vi.nc.e...s.t.a.r.l.i.g.ht@gmail.com"">vi.nc.e...s.t.a.r.l.i.g.ht@gmail.com</a>
<a href=""mailto:v.inc.e..s.t.ar.li.ght@gmail.com"">v.inc.e..s.t.ar.li.ght@gmail.com</a>
<a href=""mailto:vin.ce..s.tarl.i.g.h.t@gmail.com"">vin.ce..s.tarl.i.g.h.t@gmail.com</a>
<a href=""mailto:vinc.e...s.t.a.r.l.ig.ht@gmail.com"">vinc.e...s.t.a.r.l.ig.ht@gmail.com</a>
<a href=""mailto:vinc.e..sta.r.li.ght@gmail.com"">vinc.e..sta.r.li.ght@gmail.com</a>
<a href=""mailto:v.inc.e..s.ta.rl.ig.ht@gmail.com"">v.inc.e..s.ta.rl.ig.ht@gmail.com</a>
<a href=""mailto:v.i.nc.e..s.t.arli.ght@gmail.com"">v.i.nc.e..s.t.arli.ght@gmail.com</a>
<a href=""mailto:v.i.n.c.e.st.a.r.li.gh.t@gmail.com"">v.i.n.c.e.st.a.r.li.gh.t@gmail.com</a>
<a href=""mailto:v.i.n.ce..star.l.ig.ht@gmail.com"">v.i.n.ce..star.l.ig.ht@gmail.com</a>
<a href=""mailto:v.i.n.c.e.s.t.arligh.t@gmail.com"">v.i.n.c.e.s.t.arligh.t@gmail.com</a>
<a href=""mailto:vin.ce..s.ta.rlig.ht@gmail.com"">vin.ce..s.ta.rlig.ht@gmail.com</a>
<a href=""mailto:v.in.c.e..star.l.ig.ht@gmail.com"">v.in.c.e..star.l.ig.ht@gmail.com</a>
<a href=""mailto:vi.nc.e...star.li.ght@gmail.com"">vi.nc.e...star.li.ght@gmail.com</a>
<a href=""mailto:v.in.c.e.st.arli.ght@gmail.com"">v.in.c.e.st.arli.ght@gmail.com</a>
<a href=""mailto:v.inc.e..s.ta.rlig.h.t@gmail.com"">v.inc.e..s.ta.rlig.h.t@gmail.com</a>
<a href=""mailto:vi.nc.e..sta.rl.ight@gmail.com"">vi.nc.e..sta.rl.ight@gmail.com</a>
<a href=""mailto:v.inc.e...st.a.rl.i.ght@gmail.com"">v.inc.e...st.a.rl.i.ght@gmail.com</a>
<a href=""mailto:v.i.n.ce..s.t.a.r.l.ight@gmail.com"">v.i.n.ce..s.t.a.r.l.ight@gmail.com</a>
<a href=""mailto:vinc.e.s.tarl.i.g.ht@gmail.com"">vinc.e.s.tarl.i.g.ht@gmail.com</a>
<a href=""mailto:vi.n.ce..s.ta.rl.i.ght@gmail.com"">vi.n.ce..s.ta.rl.i.ght@gmail.com</a>
<a href=""mailto:v.i.n.c.e..st.ar.li.g.h.t@gmail.com"">v.i.n.c.e..st.ar.li.g.h.t@gmail.com</a>
<a href=""mailto:v.i.n.c.e..st.a.rli.gh.t@gmail.com"">v.i.n.c.e..st.a.rli.gh.t@gmail.com</a>
<a href=""mailto:vinc.e..st.ar.l.i.g.h.t@gmail.com"">vinc.e..st.ar.l.i.g.h.t@gmail.com</a>
<a href=""mailto:vinc.e...sta.r.li.ght@gmail.com"">vinc.e...sta.r.li.ght@gmail.com</a>
<a href=""mailto:vi.nce..st.a.rligh.t@gmail.com"">vi.nce..st.a.rligh.t@gmail.com</a>
<a href=""mailto:v.i.nc.e..s.t.ar.lig.h.t@gmail.com"">v.i.nc.e..s.t.ar.lig.h.t@gmail.com</a>
<a href=""mailto:v.inc.e..st.arli.gh.t@gmail.com"">v.inc.e..st.arli.gh.t@gmail.com</a>
<a href=""mailto:v.i.nce..s.t.arlig.ht@gmail.com"">v.i.nce..s.t.arlig.ht@gmail.com</a>
<a href=""mailto:vi.nc.e..s.t.arl.i.g.ht@gmail.com"">vi.nc.e..s.t.arl.i.g.ht@gmail.com</a>
<a href=""mailto:v.i.nce..star.li.ght@gmail.com"">v.i.nce..star.li.ght@gmail.com</a>
<a href=""mailto:v.i.n.c.e..st.ar.li.g.ht@gmail.com"">v.i.n.c.e..st.ar.li.g.ht@gmail.com</a>
<a href=""mailto:vi.nc.e..s.tar.li.ght@gmail.com"">vi.nc.e..s.tar.li.ght@gmail.com</a>
<a href=""mailto:v.inc.e.s.t.arlig.ht@gmail.com"">v.inc.e.s.t.arlig.ht@gmail.com</a>
<a href=""mailto:vinc.e..starlig.ht@gmail.com"">vinc.e..starlig.ht@gmail.com</a>
<a href=""mailto:v.inc.e..st.ar.li.g.h.t@gmail.com"">v.inc.e..st.ar.li.g.h.t@gmail.com</a>
<a href=""mailto:vi.nc.e..s.tarli.gh.t@gmail.com"">vi.nc.e..s.tarli.gh.t@gmail.com</a>
<a href=""mailto:v.i.n.c.e...st.arl.i.g.ht@gmail.com"">v.i.n.c.e...st.arl.i.g.ht@gmail.com</a>
<a href=""mailto:v.ince..s.ta.r.lig.ht@gmail.com"">v.ince..s.ta.r.lig.ht@gmail.com</a>
<a href=""mailto:vin.ce..starli.ght@gmail.com"">vin.ce..starli.ght@gmail.com</a>
<a href=""mailto:v.i.nc.e..starli.gh.t@gmail.com"">v.i.nc.e..starli.gh.t@gmail.com</a>
<a href=""mailto:v.i.nc.e.s.tarlight@gmail.com"">v.i.nc.e.s.tarlight@gmail.com</a>
<a href=""mailto:v.i.n.ce.st.a.rlig.h.t@gmail.com"">v.i.n.ce.st.a.rlig.h.t@gmail.com</a>
<a href=""mailto:vin.ce..s.ta.rlight@gmail.com"">vin.ce..s.ta.rlight@gmail.com</a>
<a href=""mailto:v.i.nc.e...s.t.arl.i.g.h.t@gmail.com"">v.i.nc.e...s.t.arl.i.g.h.t@gmail.com</a>
<a href=""mailto:v.in.ce..sta.rl.i.g.h.t@gmail.com"">v.in.ce..sta.rl.i.g.h.t@gmail.com</a>
<a href=""mailto:v.inc.e.s.ta.r.l.i.ght@gmail.com"">v.inc.e.s.ta.r.l.i.ght@gmail.com</a>
<a href=""mailto:v.inc.e..s.t.ar.l.i.ght@gmail.com"">v.inc.e..s.t.ar.l.i.ght@gmail.com</a>
<a href=""mailto:vinc.e.s.tar.l.i.g.h.t@gmail.com"">vinc.e.s.tar.l.i.g.h.t@gmail.com</a>
<a href=""mailto:v.i.nce.s.ta.rl.i.gh.t@gmail.com"">v.i.nce.s.ta.rl.i.gh.t@gmail.com</a>
<a href=""mailto:vi.nce..s.t.arli.gh.t@gmail.com"">vi.nce..s.t.arli.gh.t@gmail.com</a>
<a href=""mailto:v.i.n.ce..sta.rl.i.g.h.t@gmail.com"">v.i.n.ce..sta.rl.i.g.h.t@gmail.com</a>
<a href=""mailto:v.in.c.e..s.ta.rl.ight@gmail.com"">v.in.c.e..s.ta.rl.ight@gmail.com</a>
<a href=""mailto:vinc.e...s.t.ar.l.ight@gmail.com"">vinc.e...s.t.ar.l.ight@gmail.com</a>
<a href=""mailto:vi.n.c.e...s.t.a.r.lig.h.t@gmail.com"">vi.n.c.e...s.t.a.r.lig.h.t@gmail.com</a>
<a href=""mailto:v.in.c.e.s.t.a.rl.ig.ht@gmail.com"">v.in.c.e.s.t.a.rl.ig.ht@gmail.com</a>
<a href=""mailto:vin.ce...st.arlig.h.t@gmail.com"">vin.ce...st.arlig.h.t@gmail.com</a>
<a href=""mailto:v.in.c.e.s.t.ar.l.i.gh.t@gmail.com"">v.in.c.e.s.t.ar.l.i.gh.t@gmail.com</a>
<a href=""mailto:v.i.n.ce..s.t.a.r.li.g.ht@gmail.com"">v.i.n.ce..s.t.a.r.li.g.ht@gmail.com</a>
<a href=""mailto:v.i.n.c.e..star.l.i.gh.t@gmail.com"">v.i.n.c.e..star.l.i.gh.t@gmail.com</a>
<a href=""mailto:vince..st.arl.igh.t@gmail.com"">vince..st.arl.igh.t@gmail.com</a>
<a href=""mailto:v.i.n.c.e..s.ta.rl.ig.ht@gmail.com"">v.i.n.c.e..s.ta.rl.ig.ht@gmail.com</a>
<a href=""mailto:v.in.ce...s.ta.rlig.ht@gmail.com"">v.in.ce...s.ta.rlig.ht@gmail.com</a>
<a href=""mailto:vinc.e..s.ta.rl.igh.t@gmail.com"">vinc.e..s.ta.rl.igh.t@gmail.com</a>
<a href=""mailto:v.in.c.e...s.t.arli.g.ht@gmail.com"">v.in.c.e...s.t.arli.g.ht@gmail.com</a>
<a href=""mailto:v.i.nce.s.t.a.rl.i.g.ht@gmail.com"">v.i.nce.s.t.a.rl.i.g.ht@gmail.com</a>
<a href=""mailto:v.i.n.ce.s.t.arl.i.gh.t@gmail.com"">v.i.n.ce.s.t.arl.i.gh.t@gmail.com</a>
<a href=""mailto:v.i.n.ce..s.tar.l.i.ght@gmail.com"">v.i.n.ce..s.tar.l.i.ght@gmail.com</a>
<a href=""mailto:vi.n.c.e..starl.i.g.h.t@gmail.com"">vi.n.c.e..starl.i.g.h.t@gmail.com</a>
<a href=""mailto:v.i.nc.e..st.a.rlight@gmail.com"">v.i.nc.e..st.a.rlight@gmail.com</a>
<a href=""mailto:vin.ce..starlight@gmail.com"">vin.ce..starlight@gmail.com</a>
<a href=""mailto:vi.nce.s.ta.r.lig.ht@gmail.com"">vi.nce.s.ta.r.lig.ht@gmail.com</a>
<a href=""mailto:vi.nce..star.li.g.h.t@gmail.com"">vi.nce..star.li.g.h.t@gmail.com</a>
<a href=""mailto:vinc.e.s.t.ar.l.i.ght@gmail.com"">vinc.e.s.t.ar.l.i.ght@gmail.com</a>
<a href=""mailto:v.i.nce..s.ta.rli.g.ht@gmail.com"">v.i.nce..s.ta.rli.g.ht@gmail.com</a>
<a href=""mailto:v.i.n.ce..star.light@gmail.com"">v.i.n.ce..star.light@gmail.com</a>
<a href=""mailto:v.in.c.e..star.l.ight@gmail.com"">v.in.c.e..star.l.ight@gmail.com</a>
<a href=""mailto:v.i.n.c.e...sta.rli.gh.t@gmail.com"">v.i.n.c.e...sta.rli.gh.t@gmail.com</a>
<a href=""mailto:vin.ce...starl.ight@gmail.com"">vin.ce...starl.ight@gmail.com</a>
<a href=""mailto:vinc.e.s.tarl.igh.t@gmail.com"">vinc.e.s.tarl.igh.t@gmail.com</a>
<a href=""mailto:vi.n.ce..st.ar.light@gmail.com"">vi.n.ce..st.ar.light@gmail.com</a>
<a href=""mailto:v.inc.e...star.l.ight@gmail.com"">v.inc.e...star.l.ight@gmail.com</a>
<a href=""mailto:v.inc.e...star.lig.h.t@gmail.com"">v.inc.e...star.lig.h.t@gmail.com</a>
<a href=""mailto:v.i.n.c.e...st.ar.li.gh.t@gmail.com"">v.i.n.c.e...st.ar.li.gh.t@gmail.com</a>
<a href=""mailto:vince.st.a.rl.i.gh.t@gmail.com"">vince.st.a.rl.i.gh.t@gmail.com</a>
<a href=""mailto:vi.n.ce..s.ta.rl.igh.t@gmail.com"">vi.n.ce..s.ta.rl.igh.t@gmail.com</a>
<a href=""mailto:v.i.n.ce..s.t.arli.g.ht@gmail.com"">v.i.n.ce..s.t.arli.g.ht@gmail.com</a>
<a href=""mailto:vi.n.c.e...s.t.ar.l.ight@gmail.com"">vi.n.c.e...s.t.ar.l.ight@gmail.com</a>
<a href=""mailto:vinc.e...sta.rl.ig.ht@gmail.com"">vinc.e...sta.rl.ig.ht@gmail.com</a>
<a href=""mailto:vinc.e...s.t.arl.ig.h.t@gmail.com"">vinc.e...s.t.arl.ig.h.t@gmail.com</a>
<a href=""mailto:vi.nce...sta.r.l.i.g.ht@gmail.com"">vi.nce...sta.r.l.i.g.ht@gmail.com</a>
<a href=""mailto:v.i.nce..starli.g.ht@gmail.com"">v.i.nce..starli.g.ht@gmail.com</a>
<a href=""mailto:vince..s.t.arl.ig.h.t@gmail.com"">vince..s.t.arl.ig.h.t@gmail.com</a>
<a href=""mailto:v.ince..starl.i.ght@gmail.com"">v.ince..starl.i.ght@gmail.com</a>
<a href=""mailto:vi.nce..s.t.ar.l.i.g.ht@gmail.com"">vi.nce..s.t.ar.l.i.g.ht@gmail.com</a>
<a href=""mailto:vi.nc.e..starl.ig.ht@gmail.com"">vi.nc.e..starl.ig.ht@gmail.com</a>
<a href=""mailto:v.ince..sta.r.ligh.t@gmail.com"">v.ince..sta.r.ligh.t@gmail.com</a>
<a href=""mailto:v.in.c.e..s.t.ar.li.g.h.t@gmail.com"">v.in.c.e..s.t.ar.li.g.h.t@gmail.com</a>
<a href=""mailto:vin.c.e.st.ar.l.ight@gmail.com"">vin.c.e.st.ar.l.ight@gmail.com</a>
<a href=""mailto:vi.nce..s.t.a.r.lig.ht@gmail.com"">vi.nce..s.t.a.r.lig.ht@gmail.com</a>
<a href=""mailto:v.i.n.c.e..s.t.a.rl.i.ght@gmail.com"">v.i.n.c.e..s.t.a.rl.i.ght@gmail.com</a>
<a href=""mailto:v.i.n.ce..s.t.a.r.li.g.h.t@gmail.com"">v.i.n.ce..s.t.a.r.li.g.h.t@gmail.com</a>
<a href=""mailto:v.inc.e..s.tarligh.t@gmail.com"">v.inc.e..s.tarligh.t@gmail.com</a>
<a href=""mailto:v.i.n.c.e.s.t.a.rlig.ht@gmail.com"">v.i.n.c.e.s.t.a.rlig.ht@gmail.com</a>
<a href=""mailto:vi.nc.e.sta.r.ligh.t@gmail.com"">vi.nc.e.sta.r.ligh.t@gmail.com</a>
<a href=""mailto:vi.nce..st.arl.ig.h.t@gmail.com"">vi.nce..st.arl.ig.h.t@gmail.com</a>
<a href=""mailto:v.i.n.ce.sta.rl.i.g.ht@gmail.com"">v.i.n.ce.sta.rl.i.g.ht@gmail.com</a>
<a href=""mailto:v.in.ce.st.a.r.li.gh.t@gmail.com"">v.in.ce.st.a.r.li.gh.t@gmail.com</a>
<a href=""mailto:v.ince..starli.g.h.t@gmail.com"">v.ince..starli.g.h.t@gmail.com</a>
<a href=""mailto:vi.n.ce..starl.ig.ht@gmail.com"">vi.n.ce..starl.ig.ht@gmail.com</a>
<a href=""mailto:vince..s.ta.r.lig.h.t@gmail.com"">vince..s.ta.r.lig.h.t@gmail.com</a>
<a href=""mailto:v.in.ce..s.ta.r.l.i.gh.t@gmail.com"">v.in.ce..s.ta.r.l.i.gh.t@gmail.com</a>
<a href=""mailto:v.i.n.c.e.st.a.r.l.ig.h.t@gmail.com"">v.i.n.c.e.st.a.r.l.ig.h.t@gmail.com</a>
<a href=""mailto:v.i.nce..sta.r.l.ig.ht@gmail.com"">v.i.nce..sta.r.l.ig.ht@gmail.com</a>
<a href=""mailto:v.ince..s.t.arl.i.ght@gmail.com"">v.ince..s.t.arl.i.ght@gmail.com</a>
<a href=""mailto:v.inc.e..s.ta.rl.i.g.ht@gmail.com"">v.inc.e..s.ta.rl.i.g.ht@gmail.com</a>
<a href=""mailto:v.inc.e.st.arl.i.ght@gmail.com"">v.inc.e.st.arl.i.ght@gmail.com</a>
<a href=""mailto:v.in.ce..s.ta.rl.i.ght@gmail.com"">v.in.ce..s.ta.rl.i.ght@gmail.com</a>
<a href=""mailto:vi.nc.e..st.arligh.t@gmail.com"">vi.nc.e..st.arligh.t@gmail.com</a>
<a href=""mailto:v.i.n.c.e..s.t.ar.lig.ht@gmail.com"">v.i.n.c.e..s.t.ar.lig.ht@gmail.com</a>
<a href=""mailto:v.ince...s.tarli.gh.t@gmail.com"">v.ince...s.tarli.gh.t@gmail.com</a>
<a href=""mailto:v.i.nce..starligh.t@gmail.com"">v.i.nce..starligh.t@gmail.com</a>
<a href=""mailto:vi.nce...s.ta.rli.gh.t@gmail.com"">vi.nce...s.ta.rli.gh.t@gmail.com</a>
<a href=""mailto:v.ince...st.ar.li.ght@gmail.com"">v.ince...st.ar.li.ght@gmail.com</a>
<a href=""mailto:v.i.nc.e..st.arl.ight@gmail.com"">v.i.nc.e..st.arl.ight@gmail.com</a>
<a href=""mailto:v.in.c.e..star.light@gmail.com"">v.in.c.e..star.light@gmail.com</a>
<a href=""mailto:vin.c.e..sta.r.l.ig.ht@gmail.com"">vin.c.e..sta.r.l.ig.ht@gmail.com</a>
<a href=""mailto:v.ince.st.arlight@gmail.com"">v.ince.st.arlight@gmail.com</a>
<a href=""mailto:v.inc.e..sta.r.l.ight@gmail.com"">v.inc.e..sta.r.l.ight@gmail.com</a>
<a href=""mailto:vince..s.t.a.rlig.ht@gmail.com"">vince..s.t.a.rlig.ht@gmail.com</a>
<a href=""mailto:v.ince..s.t.a.rli.gh.t@gmail.com"">v.ince..s.t.a.rli.gh.t@gmail.com</a>
<a href=""mailto:vi.n.c.e...s.ta.r.lig.ht@gmail.com"">vi.n.c.e...s.ta.r.lig.ht@gmail.com</a>
<a href=""mailto:vi.n.c.e..st.arlig.ht@gmail.com"">vi.n.c.e..st.arlig.ht@gmail.com</a>
<a href=""mailto:v.i.n.c.e.s.t.a.rl.ig.ht@gmail.com"">v.i.n.c.e.s.t.a.rl.ig.ht@gmail.com</a>
<a href=""mailto:v.in.ce.st.a.r.l.ig.h.t@gmail.com"">v.in.ce.st.a.r.l.ig.h.t@gmail.com</a>
<a href=""mailto:vin.ce...sta.rl.igh.t@gmail.com"">vin.ce...sta.rl.igh.t@gmail.com</a>
<a href=""mailto:v.ince...s.tar.lig.h.t@gmail.com"">v.ince...s.tar.lig.h.t@gmail.com</a>
<a href=""mailto:v.inc.e..s.tar.l.i.gh.t@gmail.com"">v.inc.e..s.tar.l.i.gh.t@gmail.com</a>
<a href=""mailto:v.i.n.c.e.sta.r.l.i.gh.t@gmail.com"">v.i.n.c.e.sta.r.l.i.gh.t@gmail.com</a>
<a href=""mailto:v.i.nc.e.st.arl.i.g.h.t@gmail.com"">v.i.nc.e.st.arl.i.g.h.t@gmail.com</a>
<a href=""mailto:v.i.n.ce..s.t.a.r.lig.h.t@gmail.com"">v.i.n.ce..s.t.a.r.lig.h.t@gmail.com</a>
<a href=""mailto:vin.ce...starlight@gmail.com"">vin.ce...starlight@gmail.com</a>
<a href=""mailto:vinc.e...s.ta.rlight@gmail.com"">vinc.e...s.ta.rlight@gmail.com</a>
<a href=""mailto:v.ince...s.tarligh.t@gmail.com"">v.ince...s.tarligh.t@gmail.com</a>
<a href=""mailto:v.ince..s.ta.rl.i.ght@gmail.com"">v.ince..s.ta.rl.i.ght@gmail.com</a>
<a href=""mailto:vi.n.c.e..s.tarl.ig.h.t@gmail.com"">vi.n.c.e..s.tarl.ig.h.t@gmail.com</a>
<a href=""mailto:vi.n.ce..st.a.r.l.ig.h.t@gmail.com"">vi.n.ce..st.a.r.l.ig.h.t@gmail.com</a>
<a href=""mailto:vin.ce.st.arlig.ht@gmail.com"">vin.ce.st.arlig.ht@gmail.com</a>
<a href=""mailto:vi.n.c.e..s.tarligh.t@gmail.com"">vi.n.c.e..s.tarligh.t@gmail.com</a>
<a href=""mailto:v.in.ce..s.tar.li.gh.t@gmail.com"">v.in.ce..s.tar.li.gh.t@gmail.com</a>
<a href=""mailto:vin.c.e..s.ta.r.li.ght@gmail.com"">vin.c.e..s.ta.r.li.ght@gmail.com</a>
<a href=""mailto:vi.nc.e.star.ligh.t@gmail.com"">vi.nc.e.star.ligh.t@gmail.com</a>
<a href=""mailto:v.i.nc.e.s.tarlig.ht@gmail.com"">v.i.nc.e.s.tarlig.ht@gmail.com</a>
<a href=""mailto:v.in.c.e...s.t.a.rl.i.gh.t@gmail.com"">v.in.c.e...s.t.a.rl.i.gh.t@gmail.com</a>
<a href=""mailto:vi.n.c.e..s.t.a.r.l.ig.ht@gmail.com"">vi.n.c.e..s.t.a.r.l.ig.ht@gmail.com</a>
<a href=""mailto:vi.n.c.e.st.a.r.l.i.ght@gmail.com"">vi.n.c.e.st.a.r.l.i.ght@gmail.com</a>
<a href=""mailto:v.ince..s.tar.li.g.h.t@gmail.com"">v.ince..s.tar.li.g.h.t@gmail.com</a>
<a href=""mailto:v.in.ce..st.ar.li.ght@gmail.com"">v.in.ce..st.ar.li.ght@gmail.com</a>
<a href=""mailto:v.i.n.c.e...starl.i.gh.t@gmail.com"">v.i.n.c.e...starl.i.gh.t@gmail.com</a>
<a href=""mailto:vi.n.c.e.sta.r.li.g.ht@gmail.com"">vi.n.c.e.sta.r.li.g.ht@gmail.com</a>
<a href=""mailto:vi.nce..starl.ig.ht@gmail.com"">vi.nce..starl.ig.ht@gmail.com</a>
<a href=""mailto:vin.ce..s.ta.rl.ight@gmail.com"">vin.ce..s.ta.rl.ight@gmail.com</a>
<a href=""mailto:v.i.nce.s.t.arli.g.h.t@gmail.com"">v.i.nce.s.t.arli.g.h.t@gmail.com</a>
<a href=""mailto:vin.ce..star.ligh.t@gmail.com"">vin.ce..star.ligh.t@gmail.com</a>
<a href=""mailto:v.i.n.c.e.s.tar.l.igh.t@gmail.com"">v.i.n.c.e.s.tar.l.igh.t@gmail.com</a>
<a href=""mailto:v.in.c.e..sta.rl.igh.t@gmail.com"">v.in.c.e..sta.rl.igh.t@gmail.com</a>
<a href=""mailto:v.in.ce..sta.rl.i.g.h.t@gmail.com"">v.in.ce..sta.rl.i.g.h.t@gmail.com</a>
<a href=""mailto:v.in.c.e...s.t.ar.l.ight@gmail.com"">v.in.c.e...s.t.ar.l.ight@gmail.com</a>
<a href=""mailto:v.i.n.ce.st.arli.gh.t@gmail.com"">v.i.n.ce.st.arli.gh.t@gmail.com</a>
<a href=""mailto:vin.c.e..st.ar.l.i.gh.t@gmail.com"">vin.c.e..st.ar.l.i.gh.t@gmail.com</a>
<a href=""mailto:v.i.nce.st.a.rl.ig.h.t@gmail.com"">v.i.nce.st.a.rl.ig.h.t@gmail.com</a>
<a href=""mailto:v.ince.st.a.rli.ght@gmail.com"">v.ince.st.a.rli.ght@gmail.com</a>
<a href=""mailto:vinc.e.s.tar.light@gmail.com"">vinc.e.s.tar.light@gmail.com</a>
<a href=""mailto:vin.c.e..star.l.ig.h.t@gmail.com"">vin.c.e..star.l.ig.h.t@gmail.com</a>
<a href=""mailto:v.inc.e..sta.r.li.gh.t@gmail.com"">v.inc.e..sta.r.li.gh.t@gmail.com</a>
<a href=""mailto:vinc.e...st.a.r.lig.ht@gmail.com"">vinc.e...st.a.r.lig.ht@gmail.com</a>
<a href=""mailto:vi.n.ce..s.t.ar.l.i.ght@gmail.com"">vi.n.ce..s.t.ar.l.i.ght@gmail.com</a>
<a href=""mailto:v.in.ce...s.tar.lig.h.t@gmail.com"">v.in.ce...s.tar.lig.h.t@gmail.com</a>
<a href=""mailto:v.inc.e..s.ta.r.l.ight@gmail.com"">v.inc.e..s.ta.r.l.ight@gmail.com</a>
<a href=""mailto:posteazy62@gmail.com"">posteazy62@gmail.com</a>
<a href=""mailto:po.st.ea.zy6.2@gmail.com"">po.st.ea.zy6.2@gmail.com</a>
<a href=""mailto:p.o.stea.z.y6.2@gmail.com"">p.o.stea.z.y6.2@gmail.com</a>
<a href=""mailto:p.o.steazy.62@gmail.com"">p.o.steazy.62@gmail.com</a>
<a href=""mailto:po.ste.azy62@gmail.com"">po.ste.azy62@gmail.com</a>
<a href=""mailto:po.s.teaz.y62@gmail.com"">po.s.teaz.y62@gmail.com</a>
<a href=""mailto:p.oste.azy62@gmail.com"">p.oste.azy62@gmail.com</a>
<a href=""mailto:po.s.t.ea.z.y62@gmail.com"">po.s.t.ea.z.y62@gmail.com</a>
<a href=""mailto:p.o.st.ea.z.y.62@gmail.com"">p.o.st.ea.z.y.62@gmail.com</a>
<a href=""mailto:pos.t.ea.zy62@gmail.com"">pos.t.ea.zy62@gmail.com</a>
<a href=""mailto:p.o.s.te.a.z.y.6.2@gmail.com"">p.o.s.te.a.z.y.6.2@gmail.com</a>
<a href=""mailto:p.o.ste.az.y.62@gmail.com"">p.o.ste.az.y.62@gmail.com</a>
<a href=""mailto:p.o.s.tea.zy6.2@gmail.com"">p.o.s.tea.zy6.2@gmail.com</a>
<a href=""mailto:po.s.tea.zy6.2@gmail.com"">po.s.tea.zy6.2@gmail.com</a>
<a href=""mailto:p.os.teazy62@gmail.com"">p.os.teazy62@gmail.com</a>
<a href=""mailto:p.o.s.t.e.az.y6.2@gmail.com"">p.o.s.t.e.az.y6.2@gmail.com</a>
<a href=""mailto:p.o.ste.a.zy62@gmail.com"">p.o.ste.a.zy62@gmail.com</a>
<a href=""mailto:p.osteaz.y6.2@gmail.com"">p.osteaz.y6.2@gmail.com</a>
<a href=""mailto:po.ste.a.z.y.6.2@gmail.com"">po.ste.a.z.y.6.2@gmail.com</a>
<a href=""mailto:po.s.te.a.zy.6.2@gmail.com"">po.s.te.a.zy.6.2@gmail.com</a>
<a href=""mailto:pos.t.eaz.y.6.2@gmail.com"">pos.t.eaz.y.6.2@gmail.com</a>
<a href=""mailto:p.os.t.e.a.zy62@gmail.com"">p.os.t.e.a.zy62@gmail.com</a>
<a href=""mailto:po.s.t.ea.z.y.6.2@gmail.com"">po.s.t.ea.z.y.6.2@gmail.com</a>
<a href=""mailto:p.os.te.a.zy.6.2@gmail.com"">p.os.te.a.zy.6.2@gmail.com</a>
<a href=""mailto:p.ost.e.az.y.6.2@gmail.com"">p.ost.e.az.y.6.2@gmail.com</a>
<a href=""mailto:p.os.t.eaz.y.6.2@gmail.com"">p.os.t.eaz.y.6.2@gmail.com</a>
<a href=""mailto:p.o.st.ea.zy62@gmail.com"">p.o.st.ea.zy62@gmail.com</a>
<a href=""mailto:p.os.teazy.6.2@gmail.com"">p.os.teazy.6.2@gmail.com</a>
<a href=""mailto:p.os.t.e.azy.62@gmail.com"">p.os.t.e.azy.62@gmail.com</a>
<a href=""mailto:post.e.a.zy.6.2@gmail.com"">post.e.a.zy.6.2@gmail.com</a>
<a href=""mailto:po.s.t.e.a.zy.6.2@gmail.com"">po.s.t.e.a.zy.6.2@gmail.com</a>
<a href=""mailto:po.s.te.azy.62@gmail.com"">po.s.te.azy.62@gmail.com</a>
<a href=""mailto:p.o.st.e.a.zy62@gmail.com"">p.o.st.e.a.zy62@gmail.com</a>
<a href=""mailto:po.s.te.azy.6.2@gmail.com"">po.s.te.azy.6.2@gmail.com</a>
<a href=""mailto:p.osteazy62@gmail.com"">p.osteazy62@gmail.com</a>
<a href=""mailto:p.os.te.a.z.y6.2@gmail.com"">p.os.te.a.z.y6.2@gmail.com</a>
<a href=""mailto:pos.t.e.a.zy62@gmail.com"">pos.t.e.a.zy62@gmail.com</a>
<a href=""mailto:poste.azy.62@gmail.com"">poste.azy.62@gmail.com</a>
<a href=""mailto:p.oste.a.zy62@gmail.com"">p.oste.a.zy62@gmail.com</a>
<a href=""mailto:poste.azy.6.2@gmail.com"">poste.azy.6.2@gmail.com</a>
<a href=""mailto:p.o.steazy62@gmail.com"">p.o.steazy62@gmail.com</a>
<a href=""mailto:p.o.stea.zy6.2@gmail.com"">p.o.stea.zy6.2@gmail.com</a>
<a href=""mailto:p.ost.eaz.y.62@gmail.com"">p.ost.eaz.y.62@gmail.com</a>
<a href=""mailto:p.os.te.a.zy62@gmail.com"">p.os.te.a.zy62@gmail.com</a>
<a href=""mailto:p.os.t.ea.zy.6.2@gmail.com"">p.os.t.ea.zy.6.2@gmail.com</a>
<a href=""mailto:p.ostea.zy.62@gmail.com"">p.ostea.zy.62@gmail.com</a>
<a href=""mailto:postea.zy62@gmail.com"">postea.zy62@gmail.com</a>
<a href=""mailto:posteazy.62@gmail.com"">posteazy.62@gmail.com</a>
<a href=""mailto:p.o.ste.azy62@gmail.com"">p.o.ste.azy62@gmail.com</a>
<a href=""mailto:po.s.t.ea.zy62@gmail.com"">po.s.t.ea.zy62@gmail.com</a>
<a href=""mailto:p.ostea.z.y.62@gmail.com"">p.ostea.z.y.62@gmail.com</a>
<a href=""mailto:p.o.ste.azy.6.2@gmail.com"">p.o.ste.azy.6.2@gmail.com</a>
<a href=""mailto:po.s.t.e.azy62@gmail.com"">po.s.t.e.azy62@gmail.com</a>
<a href=""mailto:po.st.ea.zy.62@gmail.com"">po.st.ea.zy.62@gmail.com</a>
<a href=""mailto:post.ea.zy.6.2@gmail.com"">post.ea.zy.6.2@gmail.com</a>
<a href=""mailto:p.o.s.t.e.a.zy6.2@gmail.com"">p.o.s.t.e.a.zy6.2@gmail.com</a>
<a href=""mailto:p.o.s.t.eazy.6.2@gmail.com"">p.o.s.t.eazy.6.2@gmail.com</a>
<a href=""mailto:po.st.eazy.62@gmail.com"">po.st.eazy.62@gmail.com</a>
<a href=""mailto:p.oste.az.y6.2@gmail.com"">p.oste.az.y6.2@gmail.com</a>
<a href=""mailto:po.s.t.e.az.y6.2@gmail.com"">po.s.t.e.az.y6.2@gmail.com</a>
<a href=""mailto:p.o.s.t.ea.z.y6.2@gmail.com"">p.o.s.t.ea.z.y6.2@gmail.com</a>
<a href=""mailto:p.ost.ea.z.y62@gmail.com"">p.ost.ea.z.y62@gmail.com</a>
<a href=""mailto:p.ost.e.azy6.2@gmail.com"">p.ost.e.azy6.2@gmail.com</a>
<a href=""mailto:p.ost.e.a.z.y6.2@gmail.com"">p.ost.e.a.z.y6.2@gmail.com</a>
<a href=""mailto:po.ste.azy.62@gmail.com"">po.ste.azy.62@gmail.com</a>
<a href=""mailto:p.o.st.ea.zy.62@gmail.com"">p.o.st.ea.zy.62@gmail.com</a>
<a href=""mailto:post.eaz.y6.2@gmail.com"">post.eaz.y6.2@gmail.com</a>
<a href=""mailto:po.s.t.e.a.zy62@gmail.com"">po.s.t.e.a.zy62@gmail.com</a>
<a href=""mailto:p.ost.ea.zy.6.2@gmail.com"">p.ost.ea.zy.6.2@gmail.com</a>
<a href=""mailto:p.o.s.t.ea.z.y.6.2@gmail.com"">p.o.s.t.ea.z.y.6.2@gmail.com</a>
<a href=""mailto:p.ostea.zy.6.2@gmail.com"">p.ostea.zy.6.2@gmail.com</a>
<a href=""mailto:p.o.s.te.az.y62@gmail.com"">p.o.s.te.az.y62@gmail.com</a>
<a href=""mailto:p.oste.az.y.62@gmail.com"">p.oste.az.y.62@gmail.com</a>
<a href=""mailto:p.osteaz.y62@gmail.com"">p.osteaz.y62@gmail.com</a>
<a href=""mailto:p.os.tea.z.y6.2@gmail.com"">p.os.tea.z.y6.2@gmail.com</a>
<a href=""mailto:p.o.s.t.ea.z.y62@gmail.com"">p.o.s.t.ea.z.y62@gmail.com</a>
<a href=""mailto:post.e.a.zy62@gmail.com"">post.e.a.zy62@gmail.com</a>
<a href=""mailto:posteaz.y62@gmail.com"">posteaz.y62@gmail.com</a>
<a href=""mailto:poste.a.zy.62@gmail.com"">poste.a.zy.62@gmail.com</a>
<a href=""mailto:p.o.s.t.ea.zy.6.2@gmail.com"">p.o.s.t.ea.zy.6.2@gmail.com</a>
<a href=""mailto:p.os.teaz.y.62@gmail.com"">p.os.teaz.y.62@gmail.com</a>
<a href=""mailto:p.o.ste.a.zy6.2@gmail.com"">p.o.ste.a.zy6.2@gmail.com</a>
<a href=""mailto:post.e.azy.62@gmail.com"">post.e.azy.62@gmail.com</a>
<a href=""mailto:po.ste.azy6.2@gmail.com"">po.ste.azy6.2@gmail.com</a>
<a href=""mailto:p.o.st.ea.z.y62@gmail.com"">p.o.st.ea.z.y62@gmail.com</a>
<a href=""mailto:po.s.te.a.z.y.62@gmail.com"">po.s.te.a.z.y.62@gmail.com</a>
<a href=""mailto:post.ea.z.y.6.2@gmail.com"">post.ea.z.y.6.2@gmail.com</a>
<a href=""mailto:p.os.t.e.azy.6.2@gmail.com"">p.os.t.e.azy.6.2@gmail.com</a>
<a href=""mailto:p.o.s.t.e.a.z.y6.2@gmail.com"">p.o.s.t.e.a.z.y6.2@gmail.com</a>
<a href=""mailto:po.steaz.y.62@gmail.com"">po.steaz.y.62@gmail.com</a>
<a href=""mailto:po.s.t.ea.zy6.2@gmail.com"">po.s.t.ea.zy6.2@gmail.com</a>
<a href=""mailto:p.os.teazy6.2@gmail.com"">p.os.teazy6.2@gmail.com</a>
<a href=""mailto:p.ost.e.az.y6.2@gmail.com"">p.ost.e.az.y6.2@gmail.com</a>
<a href=""mailto:p.o.s.teazy.6.2@gmail.com"">p.o.s.teazy.6.2@gmail.com</a>
<a href=""mailto:p.oste.azy.62@gmail.com"">p.oste.azy.62@gmail.com</a>
<a href=""mailto:p.osteazy.6.2@gmail.com"">p.osteazy.6.2@gmail.com</a>
<a href=""mailto:p.o.s.te.a.zy.6.2@gmail.com"">p.o.s.te.a.zy.6.2@gmail.com</a>
<a href=""mailto:p.o.s.teaz.y62@gmail.com"">p.o.s.teaz.y62@gmail.com</a>
<a href=""mailto:pos.teaz.y6.2@gmail.com"">pos.teaz.y6.2@gmail.com</a>
<a href=""mailto:pos.teaz.y.62@gmail.com"">pos.teaz.y.62@gmail.com</a>
<a href=""mailto:po.s.te.az.y6.2@gmail.com"">po.s.te.az.y6.2@gmail.com</a>
<a href=""mailto:p.os.t.ea.zy62@gmail.com"">p.os.t.ea.zy62@gmail.com</a>
<a href=""mailto:post.ea.zy6.2@gmail.com"">post.ea.zy6.2@gmail.com</a>
<a href=""mailto:po.st.e.a.z.y6.2@gmail.com"">po.st.e.a.z.y6.2@gmail.com</a>
<a href=""mailto:po.ste.a.z.y6.2@gmail.com"">po.ste.a.z.y6.2@gmail.com</a>
<a href=""mailto:p.o.ste.a.zy.6.2@gmail.com"">p.o.ste.a.zy.6.2@gmail.com</a>
<a href=""mailto:p.os.t.eaz.y.62@gmail.com"">p.os.t.eaz.y.62@gmail.com</a>
<a href=""mailto:pos.te.az.y.6.2@gmail.com"">pos.te.az.y.6.2@gmail.com</a>
<a href=""mailto:p.os.t.e.azy6.2@gmail.com"">p.os.t.e.azy6.2@gmail.com</a>
<a href=""mailto:po.s.tea.z.y.62@gmail.com"">po.s.tea.z.y.62@gmail.com</a>
<a href=""mailto:po.steazy.6.2@gmail.com"">po.steazy.6.2@gmail.com</a>
<a href=""mailto:po.s.teaz.y.6.2@gmail.com"">po.s.teaz.y.6.2@gmail.com</a>
<a href=""mailto:p.o.s.tea.zy.62@gmail.com"">p.o.s.tea.zy.62@gmail.com</a>
<a href=""mailto:p.o.st.e.a.zy.6.2@gmail.com"">p.o.st.e.a.zy.6.2@gmail.com</a>
<a href=""mailto:p.os.te.azy.6.2@gmail.com"">p.os.te.azy.6.2@gmail.com</a>
<a href=""mailto:pos.t.e.azy62@gmail.com"">pos.t.e.azy62@gmail.com</a>
<a href=""mailto:pos.te.az.y6.2@gmail.com"">pos.te.az.y6.2@gmail.com</a>
<a href=""mailto:pos.t.ea.z.y.62@gmail.com"">pos.t.ea.z.y.62@gmail.com</a>
<a href=""mailto:p.oste.a.zy.6.2@gmail.com"">p.oste.a.zy.6.2@gmail.com</a>
<a href=""mailto:po.ste.azy.6.2@gmail.com"">po.ste.azy.6.2@gmail.com</a>
<a href=""mailto:p.o.s.t.eaz.y6.2@gmail.com"">p.o.s.t.eaz.y6.2@gmail.com</a>
<a href=""mailto:p.o.s.t.e.azy.62@gmail.com"">p.o.s.t.e.azy.62@gmail.com</a>
<a href=""mailto:po.s.t.e.a.z.y6.2@gmail.com"">po.s.t.e.a.z.y6.2@gmail.com</a>
<a href=""mailto:p.ost.e.a.z.y62@gmail.com"">p.ost.e.a.z.y62@gmail.com</a>
<a href=""mailto:poste.az.y.6.2@gmail.com"">poste.az.y.6.2@gmail.com</a>
<a href=""mailto:po.ste.a.zy.62@gmail.com"">po.ste.a.zy.62@gmail.com</a>
<a href=""mailto:p.o.st.eaz.y.62@gmail.com"">p.o.st.eaz.y.62@gmail.com</a>
<a href=""mailto:p.o.s.te.a.z.y6.2@gmail.com"">p.o.s.te.a.z.y6.2@gmail.com</a>
<a href=""mailto:p.o.s.t.ea.zy6.2@gmail.com"">p.o.s.t.ea.zy6.2@gmail.com</a>
<a href=""mailto:p.o.s.te.a.zy6.2@gmail.com"">p.o.s.te.a.zy6.2@gmail.com</a>
<a href=""mailto:p.o.steazy6.2@gmail.com"">p.o.steazy6.2@gmail.com</a>
<a href=""mailto:pos.t.e.az.y6.2@gmail.com"">pos.t.e.az.y6.2@gmail.com</a>
<a href=""mailto:postea.z.y.6.2@gmail.com"">postea.z.y.6.2@gmail.com</a>
<a href=""mailto:po.steaz.y.6.2@gmail.com"">po.steaz.y.6.2@gmail.com</a>
<a href=""mailto:p.o.s.t.e.azy.6.2@gmail.com"">p.o.s.t.e.azy.6.2@gmail.com</a>
<a href=""mailto:poste.a.zy6.2@gmail.com"">poste.a.zy6.2@gmail.com</a>
<a href=""mailto:p.oste.a.z.y.62@gmail.com"">p.oste.a.z.y.62@gmail.com</a>
<a href=""mailto:p.os.te.a.zy.62@gmail.com"">p.os.te.a.zy.62@gmail.com</a>
<a href=""mailto:post.e.azy.6.2@gmail.com"">post.e.azy.6.2@gmail.com</a>
<a href=""mailto:postea.z.y6.2@gmail.com"">postea.z.y6.2@gmail.com</a>
<a href=""mailto:postea.z.y.62@gmail.com"">postea.z.y.62@gmail.com</a>
<a href=""mailto:poste.azy6.2@gmail.com"">poste.azy6.2@gmail.com</a>
<a href=""mailto:p.o.st.e.a.zy6.2@gmail.com"">p.o.st.e.a.zy6.2@gmail.com</a>
<a href=""mailto:po.s.t.e.az.y62@gmail.com"">po.s.t.e.az.y62@gmail.com</a>
<a href=""mailto:po.s.te.a.zy.62@gmail.com"">po.s.te.a.zy.62@gmail.com</a>
<a href=""mailto:pos.te.a.z.y62@gmail.com"">pos.te.a.z.y62@gmail.com</a>
<a href=""mailto:po.stea.z.y62@gmail.com"">po.stea.z.y62@gmail.com</a>
<a href=""mailto:p.o.s.t.e.az.y.62@gmail.com"">p.o.s.t.e.az.y.62@gmail.com</a>
<a href=""mailto:po.s.t.eazy.62@gmail.com"">po.s.t.eazy.62@gmail.com</a>
<a href=""mailto:po.st.ea.z.y62@gmail.com"">po.st.ea.z.y62@gmail.com</a>
<a href=""mailto:p.ostea.zy6.2@gmail.com"">p.ostea.zy6.2@gmail.com</a>
<a href=""mailto:p.os.t.e.a.zy.6.2@gmail.com"">p.os.t.e.a.zy.6.2@gmail.com</a>
<a href=""mailto:post.ea.zy.62@gmail.com"">post.ea.zy.62@gmail.com</a>
<a href=""mailto:pos.tea.zy62@gmail.com"">pos.tea.zy62@gmail.com</a>
<a href=""mailto:pos.te.azy.62@gmail.com"">pos.te.azy.62@gmail.com</a>
<a href=""mailto:p.o.s.te.a.zy62@gmail.com"">p.o.s.te.a.zy62@gmail.com</a>
<a href=""mailto:p.ost.eazy62@gmail.com"">p.ost.eazy62@gmail.com</a>
<a href=""mailto:pos.t.e.az.y62@gmail.com"">pos.t.e.az.y62@gmail.com</a>
<a href=""mailto:p.o.s.te.a.z.y62@gmail.com"">p.o.s.te.a.z.y62@gmail.com</a>
<a href=""mailto:p.o.stea.zy.6.2@gmail.com"">p.o.stea.zy.6.2@gmail.com</a>
<a href=""mailto:pos.t.ea.z.y.6.2@gmail.com"">pos.t.ea.z.y.6.2@gmail.com</a>
<a href=""mailto:po.st.e.a.zy.62@gmail.com"">po.st.e.a.zy.62@gmail.com</a>
<a href=""mailto:p.ost.eazy.62@gmail.com"">p.ost.eazy.62@gmail.com</a>
<a href=""mailto:po.st.e.azy6.2@gmail.com"">po.st.e.azy6.2@gmail.com</a>
<a href=""mailto:p.o.s.t.e.a.zy.62@gmail.com"">p.o.s.t.e.a.zy.62@gmail.com</a>
<a href=""mailto:p.oste.az.y.6.2@gmail.com"">p.oste.az.y.6.2@gmail.com</a>
<a href=""mailto:pos.tea.z.y.62@gmail.com"">pos.tea.z.y.62@gmail.com</a>
<a href=""mailto:poste.a.z.y6.2@gmail.com"">poste.a.z.y6.2@gmail.com</a>
<a href=""mailto:p.o.s.tea.z.y.6.2@gmail.com"">p.o.s.tea.z.y.6.2@gmail.com</a>
<a href=""mailto:post.eaz.y.62@gmail.com"">post.eaz.y.62@gmail.com</a>
<a href=""mailto:p.oste.a.z.y6.2@gmail.com"">p.oste.a.z.y6.2@gmail.com</a>
<a href=""mailto:p.os.te.a.zy6.2@gmail.com"">p.os.te.a.zy6.2@gmail.com</a>
<a href=""mailto:p.o.ste.a.z.y.62@gmail.com"">p.o.ste.a.z.y.62@gmail.com</a>
<a href=""mailto:p.o.s.te.azy.6.2@gmail.com"">p.o.s.te.azy.6.2@gmail.com</a>
<a href=""mailto:p.ost.eazy.6.2@gmail.com"">p.ost.eazy.6.2@gmail.com</a>
<a href=""mailto:p.o.s.t.eaz.y.62@gmail.com"">p.o.s.t.eaz.y.62@gmail.com</a>
<a href=""mailto:p.oste.azy.6.2@gmail.com"">p.oste.azy.6.2@gmail.com</a>
<a href=""mailto:poste.a.z.y.62@gmail.com"">poste.a.z.y.62@gmail.com</a>
<a href=""mailto:pos.tea.zy.6.2@gmail.com"">pos.tea.zy.6.2@gmail.com</a>
<a href=""mailto:po.stea.zy.6.2@gmail.com"">po.stea.zy.6.2@gmail.com</a>
<a href=""mailto:posteazy62@gmail.com"">posteazy62@gmail.com</a>
<a href=""mailto:pos.tea.zy.62@gmail.com"">pos.tea.zy.62@gmail.com</a>
<a href=""mailto:p.ost.e.azy.6.2@gmail.com"">p.ost.e.azy.6.2@gmail.com</a>
<a href=""mailto:p.o.steaz.y.62@gmail.com"">p.o.steaz.y.62@gmail.com</a>
<a href=""mailto:p.o.stea.zy.62@gmail.com"">p.o.stea.zy.62@gmail.com</a>
<a href=""mailto:p.os.t.e.az.y62@gmail.com"">p.os.t.e.az.y62@gmail.com</a>
<a href=""mailto:p.o.ste.a.z.y62@gmail.com"">p.o.ste.a.z.y62@gmail.com</a>
<a href=""mailto:p.osteaz.y.6.2@gmail.com"">p.osteaz.y.6.2@gmail.com</a>
<a href=""mailto:p.os.t.eazy.6.2@gmail.com"">p.os.t.eazy.6.2@gmail.com</a>
<a href=""mailto:p.os.t.ea.z.y.6.2@gmail.com"">p.os.t.ea.z.y.6.2@gmail.com</a>
<a href=""mailto:po.s.tea.zy.6.2@gmail.com"">po.s.tea.zy.6.2@gmail.com</a>
<a href=""mailto:po.s.te.azy6.2@gmail.com"">po.s.te.azy6.2@gmail.com</a>
<a href=""mailto:pos.tea.z.y62@gmail.com"">pos.tea.z.y62@gmail.com</a>
<a href=""mailto:post.ea.z.y62@gmail.com"">post.ea.z.y62@gmail.com</a>
<a href=""mailto:po.st.ea.z.y.62@gmail.com"">po.st.ea.z.y.62@gmail.com</a>
<a href=""mailto:p.o.st.e.a.z.y6.2@gmail.com"">p.o.st.e.a.z.y6.2@gmail.com</a>
<a href=""mailto:p.osteaz.y.62@gmail.com"">p.osteaz.y.62@gmail.com</a>
<a href=""mailto:p.o.s.te.a.z.y.62@gmail.com"">p.o.s.te.a.z.y.62@gmail.com</a>
<a href=""mailto:po.st.e.azy.62@gmail.com"">po.st.e.azy.62@gmail.com</a>
<a href=""mailto:pos.t.e.a.z.y.62@gmail.com"">pos.t.e.a.z.y.62@gmail.com</a>
<a href=""mailto:p.o.ste.a.z.y6.2@gmail.com"">p.o.ste.a.z.y6.2@gmail.com</a>"
60e4Y5XM,Interface in c++,Priyasadik,C++,Friday 15th of December 2023 02:26:58 AM CDT,"#include <iostream>
#include <cmath>
#include <string>

// Abstract class representing the interface
class IShape {
public:
    // Pure virtual method to calculate area
    virtual double CalculateArea() const = 0;

    // Pure virtual property to get the shape's name
    virtual std::string GetName() const = 0;
};

// Class implementing the IShape interface
class Circle : public IShape {
private:
    double Radius;

public:
    // Constructor
    Circle(double radius) : Radius(radius) {}

    // Implement CalculateArea method from the interface
    double CalculateArea() const override {
        return M_PI * pow(Radius, 2);
    }

    // Implement the GetName property from the interface
    std::string GetName() const override {
        return ""Circle"";
    }
};

int main() {
    // Using the implemented interface
    Circle circle(5);
    std::cout << ""Area of the "" << circle.GetName() << "" is: "" << circle.CalculateArea() << std::endl;

    return 0;
}"
K3DSjDSy,Class In c++,Priyasadik,C++,Friday 15th of December 2023 02:24:39 AM CDT,"#include <iostream>
#include <string>
using namespace std;

class Book {
private:
    string title;
    string author;
    int pages;

public:
    // Constructor to initialize the Book object
    Book(string bookTitle, string bookAuthor, int bookPages) {
        title = bookTitle;
        author = bookAuthor;
        pages = bookPages;
    }

    // Method to display book details
    void displayInfo() {
        cout << ""Title: "" << title << endl;
        cout << ""Author: "" << author << endl;
        cout << ""Pages: "" << pages << endl;
    }

    // Method to set the title of the book
    void setTitle(string bookTitle) {
        title = bookTitle;
    }
};

int main() {
    // Creating an object of the Book class
    Book myBook(""The Catcher in the Rye"", ""J.D. Salinger"", 234);

    // Calling the displayInfo method to show book details
    myBook.displayInfo();

    // Changing the title using the setTitle method
    myBook.setTitle(""1984"");

    // Displaying updated book details
    myBook.displayInfo();

    return 0;
}
"
QPpsuX9e,AoC 2023 day 15 (Smalltalk),musifter,Smalltalk,Friday 15th of December 2023 01:52:29 AM CDT,"#!/usr/local/bin/gst -q

Symbol extend [ value: arg  [^arg perform: self] ]

String extend [
    reindeerHash [ ^self inject: 0 into: [:a :b | ((a + b asciiValue) * 17) \\ 256] ]
]

""
| Mainline
""
input := stdin nextLine tokenize: ','.

part1 := 0.
boxes := (1 to: 256) collect: [:c | OrderedCollection new].

input do: [ :str |
    step  := (str =~ '(\w+)([=-])(\d?)').
    label := (step at: 1) asSymbol.
    oper  := (step at: 2) first.

    part1 := part1 + str reindeerHash.
    box   := label reindeerHash + 1.
    found := (boxes at: box) detect: [:l | l first = label] ifNone: [nil].

    (oper = $-) ifTrue: [
        found ifNotNil: [ (boxes at: box) remove: found ].
    ] ifFalse: [    "" oper '=' ""
        focus := (step at: 3) asInteger.
        found ifNil:    [ (boxes at: box) add: {label. focus} ]
              ifNotNil: [ found at: 2 put: focus ].
    ]
].

part2 := 0.
boxes keysAndValuesDo: [:i :box |
    box keysAndValuesDo: [:j :lens |
        part2 := part2 + (i * j * lens second).
    ].
].

('Part 1: %1' % {part1}) displayNl.
('Part 2: %1' % {part2}) displayNl."
EsHtNhiG,Moved,Vinters565,C#,Friday 15th of December 2023 01:51:42 AM CDT,"using System;
using UnityEngine;

public class Moved : MonoBehaviour
{
    [SerializeField] float Speed;
    [SerializeField] float Border;
    public int Value;
    void Update()
    {
        gameObject.transform.Translate(Vector3.forward * Speed * Time.deltaTime);
        if(Math.Abs(gameObject.transform.position.z) > Math.Abs(Border))
            Destroy(gameObject);
    }
}
"
NR0LkBYi,CreateElement,Vinters565,C#,Friday 15th of December 2023 01:51:15 AM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CreateElement : MonoBehaviour
{
    public GameObject PrefabZero;
    public GameObject PrefabOne;
    public Vector3[] spawnPosition;

    public void Run(bool value)
    {
        foreach (var position in spawnPosition)
        {
            if(value)
                Instantiate(PrefabOne, position, Quaternion.Euler(Vector3.zero));
            else
                Instantiate(PrefabZero, position, Quaternion.Euler(Vector3.zero));
        }
    }
}"
JLTMWWfd,PerceptronXOR,Vinters565,C#,Friday 15th of December 2023 01:50:40 AM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEngine;


public class PerceptronXOR : MonoBehaviour
{
	[SerializeField] Perceptron Perceptron1;
	[SerializeField] Perceptron Perceptron2;
	[SerializeField] Perceptron ResultPerceptron;
	public List<double> Set = new List<double>();

	void Update()
	{
		if (Set.Count == 2)
		{
			ResultPerceptron.SpawnResult(
				ResultPerceptron.CalcOutput(
					Perceptron1.CalcOutput(Set[0], Set[1]),
					Perceptron2.CalcOutput(Set[0], Set[1])));
			Set = new List<double>();
        }
	}

	private void OnTriggerEnter(Collider other)
	{
		Set.Add(other.gameObject.GetComponent<Moved>().Value);
		Destroy(other.gameObject);
	}

}"
ckzdUiLu,Perceptron,Vinters565,C#,Friday 15th of December 2023 01:50:18 AM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[System.Serializable]
public class TrainingSet
{
	public double[] input;
	public double output;
}

public class Perceptron : MonoBehaviour
{
	public TrainingSet[] ts;
	double[] weights = { 0, 0 };
	double bias = 0;
	double totalError = 0;
	public List<double> Set = new List<double> ();
	[SerializeField] GameObject PrefabZero;
	[SerializeField] GameObject PrefabOne;

	double DotProductBias(double[] v1, double[] v2)
	{
		if (v1 == null || v2 == null)
			return -1;

		if (v1.Length != v2.Length)
			return -1;

		double d = 0;
		for (int x = 0; x < v1.Length; x++)
		{
			d += v1[x] * v2[x];
		}

		d += bias;

		return d;
	}

	double CalcOutput(int i)
	{
		double dp = DotProductBias(weights, ts[i].input);
		if (dp > 0) return (1);
		return (0);
	}

	void InitialiseWeights()
	{
		for (int i = 0; i < weights.Length; i++)
		{
			weights[i] = Random.Range(-1.0f, 1.0f);
		}
		bias = Random.Range(-1.0f, 1.0f);
	}

	void UpdateWeights(int j)
	{
		double error = ts[j].output - CalcOutput(j);
		totalError += Mathf.Abs((float)error);
		for (int i = 0; i < weights.Length; i++)
		{
			weights[i] = weights[i] + error * ts[j].input[i];
		}
		bias += error;
	}

	public double CalcOutput(double i1, double i2)
	{
		double[] inp = new double[] { i1, i2 };
		double dp = DotProductBias(weights, inp);
		if (dp > 0) return (1);
		return (0);
	}

	void Train(int epochs)
	{
		InitialiseWeights();

		for (int e = 0; e < epochs; e++)
		{
			totalError = 0;
			for (int t = 0; t < ts.Length; t++)
			{
				UpdateWeights(t);
			}
		}
	}

	void Start()
	{
		Train(8);
	}


	void Update()
	{
		if (Set.Count == 2)
		{
			SpawnResult(CalcOutput(Set[0], Set[1]));
			Set = new List<double>();
		}
	}

    private void OnTriggerEnter(Collider other)
    {
		Set.Add(other.gameObject.GetComponent<Moved>().Value);
		Destroy(other.gameObject);
	}

	public void SpawnResult(double value)
	{
		PrefabOne.transform.position = gameObject.transform.position + new Vector3(0, 0, -11);
		PrefabZero.transform.position = gameObject.transform.position + new Vector3(0, 0, -11);

		if (value == 0)
			Instantiate<GameObject>(PrefabZero);
		else
			Instantiate<GameObject>(PrefabOne);
	}
}"
23qhciB5,ulartangga,FARID37,JavaScript,Friday 15th of December 2023 01:37:01 AM CDT,"import Jimp from ""jimp"";
import axios from ""axios"";

class GameSession {
	constructor(id, sMsg) {
		this.id = id;
		this.players = [];
		this.game = new SnakeAndLadderGame(sMsg);
	}
}

class SnakeAndLadderGame {
	constructor(sMsg) {
		this.sendMsg = sMsg;
		this.players = [];
		this.boardSize = 100;
		this.snakesAndLadders = [
			{
				start: 29,
				end: 7,
			},
			{
				start: 24,
				end: 12,
			},
			{
				start: 15,
				end: 37,
			},
			{
				start: 23,
				end: 41,
			},
			{
				start: 72,
				end: 36,
			},
			{
				start: 49,
				end: 86,
			},
			{
				start: 90,
				end: 56,
			},
			{
				start: 75,
				end: 64,
			},
			{
				start: 74,
				end: 95,
			},
			{
				start: 91,
				end: 72,
			},
			{
				start: 97,
				end: 78,
			},
		];
		this.currentPositions = {};
		this.currentPlayerIndex = 0;
		this.bgImageUrl =
			""https://i.pinimg.com/originals/2f/68/a7/2f68a7e1eee18556b055418f7305b3c0.jpg"";
		this.player1ImageUrl =
			""https://i.pinimg.com/originals/75/33/22/7533227c53f6c270a96d364b595d6dd5.jpg"";
		this.player2ImageUrl =
			""https://i.pinimg.com/originals/be/68/13/be6813a6086681070b0f886d33ca4df9.jpg"";
		this.bgImage = null;
		this.player1Image = null;
		this.player2Image = null;
		this.cellWidth = 40;
		this.cellHeight = 40;
		this.keyId = null;
		this.started = false;
	}

	initializeGame() {
		for (const player of this.players) {
			this.currentPositions[player] = 1;
		}
		this.currentPlayerIndex = 0;
		this.started = true;
	}

	rollDice() {
		return Math.floor(Math.random() * 6) + 1;
	}

	async movePlayer(player, steps) {
		if (this.players.length === 0) return;
		const currentPosition = this.currentPositions[player];
		let newPosition = currentPosition + steps;
		for (const otherPlayer of this.players) {
			if (
				otherPlayer !== player &&
				this.currentPositions[otherPlayer] === newPosition
			) {
				const message = `😱 *Oh tidak!* @${
					player.split(""@"")[0]
				} *diinjak oleh* @${
					otherPlayer.split(""@"")[0]
				}.* Kembali ke awal cell.*`;
				await m.reply(message, null, {
					mentions: [player, otherPlayer],
				});
				newPosition = 1;
			}
		}
		const snakeOrLadder = this.snakesAndLadders.find(
			(s) => s.start === newPosition,
		);
		if (snakeOrLadder) newPosition = snakeOrLadder.end;
		newPosition = Math.min(newPosition, this.boardSize);
		this.currentPositions[player] = newPosition;
	}

	async fetchImage(url) {
		try {
			const response = await axios.get(url, {
				responseType: ""arraybuffer"",
			});
			return await Jimp.read(Buffer.from(response.data, ""binary""));
		} catch (error) {
			console.error(`Error fetching image from ${url}:`, error);
			throw error;
		}
	}

	async getBoardBuffer() {
		const board = new Jimp(420, 420);
		this.bgImage.resize(420, 420);
		board.composite(this.bgImage, 0, 0);
		for (const player of this.players) {
			const playerPosition = this.currentPositions[player];
			const playerImage =
				player === this.players[0] ? this.player1Image : this.player2Image;
			const playerX = ((playerPosition - 1) % 10) * this.cellWidth + 10;
			const playerY =
				(9 - Math.floor((playerPosition - 1) / 10)) * this.cellHeight + 10;
			board.composite(
				playerImage.clone().resize(this.cellWidth, this.cellHeight),
				playerX,
				playerY,
			);
		}
		return board.getBufferAsync(Jimp.MIME_PNG);
	}

	async startGame(m, player1Name, player2Name) {
		await m.reply(
			`🐍🎲 *Selamat datang di Permainan Ular Tangga!* 🎲🐍 \n\n@${
				player1Name.split(""@"")[0]
			} vs @${player2Name.split(""@"")[0]}`,
			null,
			{
				mentions: [player1Name, player2Name],
			},
		);
		this.players = [player1Name, player2Name];
		this.initializeGame();
		if (!this.bgImage) this.bgImage = await this.fetchImage(this.bgImageUrl);
		if (!this.player1Image)
			this.player1Image = await this.fetchImage(this.player1ImageUrl);
		if (!this.player2Image)
			this.player2Image = await this.fetchImage(this.player2ImageUrl);
		const boardBuffer = await this.getBoardBuffer();
		const { key } = await m.reply(boardBuffer);
		this.keyId = key;
	}

	async playTurn(m, player) {
		if (!this.players.length) {
			await m.reply(
				'🛑 *Tidak ada permainan aktif.* Gunakan ""!snake start"" untuk memulai permainan baru.',
			);
			return;
		}
		if (player !== this.players[this.currentPlayerIndex]) {
			await m.reply(
				`🕒 *Bukan giliranmu.* \n\nSekarang giliran @${
					this.players[this.currentPlayerIndex].split(""@"")[0]
				}`,
				null,
				{
					mentions: [this.players[this.currentPlayerIndex]],
				},
			);
			return;
		}
		const diceRoll = this.rollDice();
		await m.reply(
			`🎲 @${
				player.split(""@"")[0]
			} *melempar dadu.*\n\n  - Dadu: *${diceRoll}*\n  - Dari kotak: *${
				this.currentPositions[player]
			}*\n  - Ke kotak: *${this.currentPositions[player] + diceRoll}*`,
			null,
			{
				mentions: [player],
			},
		);
		if (diceRoll !== 6) {
			this.movePlayer(player, diceRoll);
			const snakeOrLadder = this.snakesAndLadders.find(
				(s) => s.start === this.currentPositions[player],
			);

			if (snakeOrLadder) {
				const action =
					snakeOrLadder.end < snakeOrLadder.start ? ""Mundur"" : ""Maju"";
				await m.reply(
					`🐍 @${player.split(""@"")[0]} menemukan ${
						action === ""Mundur"" ? ""ular"" : ""tangga""
					}! ${action} *ke kotak ${snakeOrLadder.end}.*`,
					null,
					{
						mentions: [player],
					},
				);
				this.currentPositions[player] = snakeOrLadder.end;
			}
		}

		if (diceRoll !== 6) {
			this.switchPlayer();
		} else {
			await m.reply(""🎲 Anda mendapat 6, jadi giliran Anda masih berlanjut."");
			this.movePlayer(player, diceRoll);
		}
		if (this.currentPositions[player] === this.boardSize) {
			await m.reply(`🎉 @${player.split(""@"")[0]} menang! Selamat!`, null, {
				mentions: [player],
			});
			this.resetSession();
		}
		const boardBuffer = await this.getBoardBuffer();
		const sendMsg = this.sendMsg;
		await sendMsg.sendMessage(m.chat, {
			delete: this.keyId,
		});
		const { key } = await m.reply(boardBuffer);
		this.keyId = key;
		return;
	}

	addPlayer(player) {
		if (
			this.players.length < 2 &&
			!this.players.includes(player) &&
			player !== """"
		) {
			this.players.push(player);

			return true;
		} else {
			return false;
		}
	}

	switchPlayer() {
		this.currentPlayerIndex = 1 - this.currentPlayerIndex;
	}

	resetSession() {
		this.players = [];
		this.currentPositions = {};
		this.currentPlayerIndex = 0;
		this.started = false;
	}

	isGameStarted() {
		return this.started;
	}
}

const handler = async (m, { args, usedPrefix, command }) => {
	conn.ulartangga = conn.ulartangga || {};
	const sessions = (conn.ulartangga_ = conn.ulartangga_ || {});
	const sessionId = m.chat;
	const session =
		sessions[sessionId] ||
		(sessions[sessionId] = new GameSession(sessionId, conn));
	const game = session.game;
	const { state } = conn.ulartangga[m.chat] || {
		state: false,
	};

	switch (args[0]) {
		case ""join"":
			if (state)
				return m.reply(""🛑 *Permainan sudah dimulai.* Tidak dapat bergabung."");
			const playerName = m.sender;
			const joinSuccess = game.addPlayer(playerName);
			joinSuccess
				? m.reply(
						`👋 @${playerName.split(""@"")[0]} *bergabung ke dalam permainan.*`,
						null,
						{
							mentions: [playerName],
						},
				  )
				: m.reply(
						""*Anda sudah bergabung atau permainan sudah penuh.* Tidak dapat bergabung."",
				  );
			break;

		case ""start"":
			if (state)
				return m.reply(
					""🛑 *Permainan sudah dimulai.* Tidak dapat memulai ulang."",
				);
			conn.ulartangga[m.chat] = {
				...conn.ulartangga[m.chat],
				state: true,
			};
			if (game.players.length === 2) {
				await game.startGame(m, game.players[0], game.players[1]);
			} else {
				await m.reply(
					""👥 *Tidak cukup pemain untuk memulai permainan.* Diperlukan minimal 2 pemain."",
				);
			}
			break;

		case ""roll"":
			if (!state)
				return m.reply(
					'🛑 *Permainan belum dimulai.* Ketik ""!snake start"" untuk memulai.',
				);
			if (game.isGameStarted()) {
				const currentPlayer = game.players[game.currentPlayerIndex];
				if (m.sender !== currentPlayer) {
					await m.reply(
						`🕒 *Bukan giliranmu.* \n\nSekarang giliran @${
							currentPlayer.split(""@"")[0]
						}`,
						null,
						{
							mentions: [currentPlayer],
						},
					);
				} else {
					await game.playTurn(m, currentPlayer);
				}
			} else {
				await m.reply(
					'🛑 *Permainan belum dimulai.* Ketik ""!snake start"" untuk memulai.',
				);
			}
			break;

		case ""reset"":
			conn.ulartangga[m.chat] = {
				...conn.ulartangga[m.chat],
				state: false,
			};
			session.game.resetSession();
			delete sessions[sessionId];
			await m.reply(""🔄 *Sesi permainan direset.*"");
			break;

		case ""help"":
			await m.reply(
				`🎲🐍 *Permainan Ular Tangga* 🐍🎲\n\n*Commands:*\n- ${
					usedPrefix + command
				} join : Bergabung ke dalam permainan.\n- ${
					usedPrefix + command
				} start : Memulai permainan.\n- ${
					usedPrefix + command
				} roll : Melempar dadu untuk bergerak.\n- ${
					usedPrefix + command
				} reset : Mereset sesi permainan.`,
			);
			break;

		default:
			m.reply(
				`❓ *Perintah tidak valid.* Gunakan ${
					usedPrefix + command
				} help untuk melihat daftar perintah.`,
			);
	}
};

handler.help = [""ulartangga *𝒈𝒓𝒐𝒖𝒑*""];
handler.tags = [""rpg""];
handler.command = /^(ular(tangga)?|ladders|snak(e)?)$/i;

export default handler;
"
WUsX2Jvc,Odd Queries,Junaid_Hossain,C++,Friday 15th of December 2023 01:19:28 AM CDT,"#include <bits/stdc++.h>
using namespace std;

int main()
{
    int t;
    cin >> t;

    while (t--)
    {
        int length, query;
        cin >> length >> query;
        int arr[length];
        int rangeSum[length];
        int totalSum = 0;

        for (int i = 0; i < length; i++)
        {
            cin >> arr[i];
            totalSum += arr[i];
            rangeSum[i] = totalSum;
        }

        for (int i = 0; i < query; i++)
        {
            int sum = 0;
            int start, end, num;
            cin >> start >> end >> num;

            int tempSum = ((end - start) + 1) * num;

            sum = rangeSum[end - 1] - rangeSum[start - 1];

            int change = tempSum - sum;

            if ((totalSum + change) % 2 == 0)
            {
                cout << ""NO"" << endl;
            }
            else
            {
                cout << ""YES"" << endl;
            }
        }
    }
}"
KQ7aZdGv,Untitled,larrylailai,C,Friday 15th of December 2023 12:52:17 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <ctype.h>
#define new(type) (type*)malloc(sizeof(type))
 
typedef struct {
    int n;
    char name[50];
} variable;
 
int find(char name[], variable *vl[]){
    int index=0;
    while (strcmp(name, vl[index]->name)!=0) index++;
    return vl[index]->n;
}
 
int examine(variable *vl[]){
    char operator = strtok(NULL, "" "")[0], *token;
    int num[2];
    for (int i=0; i<2; i++){
        token = strtok(NULL, "" "");
        if (strcmp(token, ""("")==0) num[i] = examine(vl);
        else if (isdigit(token[0])) sscanf(token, ""%d"", &num[i]);
        else num[i] = find(token, vl);
    }
    strtok(NULL, "" ""); // remove ')'
    int a = num[0], b = num[1];
    if (operator=='+') return a+b;
    else if (operator=='-') return a-b;
    else if (operator=='*') return a*b;
    else return a/b;
}
 
int main(){
    char str[1500];
    fgets(str, 1500, stdin);
    if (isdigit(str[0])){
        int n;
        sscanf(str, ""%d"", &n);
        printf(""%d"", n);
        return 0;
    }
    char temp[1000], *name;
    variable *var_list[51];
    int n, index=0;
    while (fgets(temp, 1000, stdin)!=NULL){
        var_list[index] = new(variable);
        name = strtok(temp, "" "");
        strcpy(var_list[index]->name, name);
        strtok(NULL, "" "");
        sscanf(strtok(NULL, "" ""), ""%d"", &(var_list[index++]->n));
    }
    var_list[index] = NULL;
    strtok(str, "" "");
    printf(""%d"", examine(var_list));
}"
YXVK7aF3,Untitled,kwest87,C#,Friday 15th of December 2023 12:40:14 AM CDT,"[StartCode]
using System;

namespace ConsoleApp13
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Random random = new Random();
            int[] array = new int[30];
            int indent = 1;
            int initialNumber = 0;
            int lastNumber = array.Length - indent;

            for (int i = 0; i < array.Length; i++)
            {
                array[i] = random.Next(20);
            }

            Console.WriteLine(""Дан массив : "");

            for (int i = 0; i < array.Length; i++)
            {
                Console.Write(array[i] + "" "");
            }

            Console.WriteLine();
            Console.WriteLine(""Локальные максимумы : "");

            if (array[initialNumber] > array[initialNumber + indent])
            {
                Console.Write(array[initialNumber] + "" "");
            }

            for (int i = indent; i < array.Length - indent; i++)
            {
                if (array[i] > array[i - indent] && array[i] > array[i+indent])
                {
                    Console.Write(array[i] + "" "");
                }
            }

            if (array[lastNumber] > array[lastNumber - indent])
            {
                Console.WriteLine(array[lastNumber]);
            }
        }
    }
}
[EndCode]"
VSjnagfA,Advent of Code 2023 - Day 15,mgla,C#,Friday 15th of December 2023 12:39:25 AM CDT,"var input = File.ReadAllText(""input.txt"").Split(',');

var hashes = input.Select(Hash).ToList();

Console.WriteLine($""Part 1: {hashes.Sum()}"");

var boxes = new List<List<(string Name, int FocalLength)>>();
Enumerable.Range(0, 256).ToList().ForEach(_ => boxes.Add(new()));
var separator = new[] { '=', '-' };

foreach (var step in input)
{
    var instructions = step.Split(separator, StringSplitOptions.RemoveEmptyEntries);
    var lensName = instructions[0];
    var box = boxes[Hash(lensName)];

    if (instructions.Length == 2)
    {
        var focalLength = int.Parse(instructions[1]);
        var lens = (lensName, focalLength);
        var lensIndex = box.FindIndex(l => l.Name == lensName);

        if (lensIndex > -1)
        {
            box[lensIndex] = lens;
        }
        else
        {
            box.Add(lens);
        }
    }
    else
    {
        var lens = box.FirstOrDefault(l => l.Name == lensName);

        if (lens != default)
        {
            box.Remove(lens);
        }
    }
}

var part2 = 0;
for (var boxIndex = 0; boxIndex < boxes.Count; boxIndex++)
{
    part2 += boxes[boxIndex]
        .Select((lens, lensIndex) => lens.FocalLength * (lensIndex + 1) * (boxIndex + 1))
        .Sum();
}

Console.WriteLine($""Part 2: {part2}"");
return;

static int Hash(string s)
{
    var i = 0;
    foreach (var c in s)
    {
        i += c;
        i *= 17;
        i %= 256;
    }

    return i;
}"
hG1FYK9R,Untitled,eliax1996,Python,Friday 15th of December 2023 12:37:52 AM CDT,"import copy
import time
from enum import Enum
from functools import cache

text = """"""
O#...OO.#.#..##.#..#O.OO...O##OO.......#......O.O...O..........O..#O..O.#.#.O.....##O.#O.##.........
.OOO..OOO.O.#.....#.....#.#.....O..#..OO..#.....O#O##..##O#.OO....O##.OOO..O...#....O....#O..#...O..
OOO#...O#...##.OOOO##.O..#.....O...#.O..#...#.O..OO..##.#....O#O..#O#..##...O.OO..#.#........#O....O
O..#..#...#.O##.......OO#.#....O.##.O..O.O#.O..O#.....#...O..OO.O.#......O.###.........#.......##...
..O.O.O..#O..OOOO..#..#..O..O#O...O....#.O#........OOO#.O...O..O#.#.O........#......#O.O...OO.#.O..O
#..O.#..##....#...O..........#..O.#..##.O.....O.O.O..O..O.O.#.OO#.#..##.........#OO.O....##...#..##.
OO.O#.#.O...O..#..#OO..O.............O.........O.#.......#OO#.O.#OOO.##OOO..OO#.....O#.O.#O.O##OO...
.##...##O.....O..OO..O#.O.O.#....OOO.O.O#..#O#..#.O.OO...####O#......#.#O..O.O....#..O....#.#.#.O#.#
.....#O..O.O.#......#..........#.OO...O.#O.O.....O.#OO.#.#.O#......OO..O.O.....#...O.O..OO...#O.O#..
.O..#....#....OOO.O.#....O#O###....O.O#OO.............#...OOO.....#....O..O.......###............O..
..#O.#....###..O...#.....OO#O.....#....###..O#.......#OO....O.O...#....#.O.O.#..O.##O...O..O#...##..
O...O.#O.#O#....O.O#.......#............OO.....O.#O..O#O....O##O.OO..#..O..#O..O#O...##O.O.O.O#..O.#
O#.O......#.......O....#...O.....#O#.#..O...O.###O.OO#.........O.....O..O...#.#O.....OO#..O.#...#...
.#...O.......O.#.....O.......O.O..#....#..O#O.#..O.#..##.......##....O.#.....O........OO.O...O.....O
..O..#.#O.O#...#.......#O#OO.#O....O...#O..O.O.#O.OO#......OO#....#...O.#...#O.#...O.#.OO#..O.#OO.O#
.O.......O...#.......#....O..O......O.O.O#O.#O...O.#.....O..O...#OOO#..O...O##..OOO#....#..........O
OO#..##O.O.O.O.#....O#.O#O.##..O......#.#.O.O..O.O...OO#.......#..O.#O.O#.OO....#O#O.O.O.#.O#O#.....
#O#.O.......##OOO..OO...O#..#..O.O.##.O#....#OO....#...OO.#..#..O.......O#O.......#.O.O............O
..O.OO.O#..OOO....OO.O...#.#.......#.O.......O..OOO.##.##.#...#.O.....O..O.......O.O.#..............
OO#.....O.O.#.#...#.#.....O....#.#O..O......#..#..O...#.#....O#..OO....O.#.....O...O.#.O..#.........
....O.#.O...O#....#.O.#.......O#.#.O##......#...O.#..O#..#.#O.O...#.....O......#O#.#.#O....O..O.O#.#
.....###.O.O.O#.O.......O..OO#...#.#...#..O......#O....O...OOOO..O...#.#.#.#.O#..O.......OO.....#.#.
...O.O...#O..O..#..O#.O....#O..#..O...#.O.O.OO....#O#O#.OOO##..#O..OOO#.O.O..O....#...O#..O...#O....
.##.O...O..O.#.#OOO..O..O...O........#O.OO#..#OO......O....O.##...#..O#..O#...#..O.....O...##...O...
.O.#.O#OO.#...O....#.O.O..OO.O#O...O#..##...O.O...#...O#OOO.....O.........O......#.O.#...........OO.
O....O#O...#.OO#...#.........####..........O.#...#...O.O.O#.O..............##....O..O..O..#.#...##.#
..O.OO.#.OO#..O.#O....O......O.............#...##...#.O..#..O###.#......O..##.O.........O.#........O
O...#....#.......OO...O#O.......#.....#....OOO.#...OO.#O..O.#......#.##O....OO....O#.#.O..O...O..O..
...#...#....O.#..OOOO#..O#..#.##O.#.#.O..#.O....OOO....#..#..#....OOO...#.O.O...#.#.#O.O..O.#..O....
...O#.#...O.#.##O..O#..O.....OO#O...#.OO#..OO#O..OOO.O...#...O.#.O....O#...OOO..O...O....O....#.#..O
#........#..O.###.#...O#.O#O.........##..O.O.#O.O.###O....##.#.#.#..O.#O....#OO#O.....O.........O.##
O.O....#O.....O#...O#.....O##.OOO.#O.O..O....O..O...O....#...O.........O.#.O..#.#.O.O#O...#.#...O..O
.O..O##.O........O.OOO#O...#....O.OOOO#O..O..............O..O.O.O...#..........#......O..O.O.#......
.O....#OO#OO...#...O.##O.....#O.#.O.O...O.....OO#.O.......O#...#O..O#OOO.........##.....##...#...##O
.O#..OO....OOO..#.......OOO...##....OO..O.O..........##...#.#...#....O..#....O..........#.#.#O#.#.O.
##.......#O...O#.OO.#..O.O.O....#........#.O..........O.O.O..O.....#.OO#...#O#.O.OO..OO.O#..##....O.
....#..#..#O.##O.#....#.#.OO.......##..O#.#.##......O.O.OO..##...O.#....#..O.#....#.O....#...#O..O..
..O....#...OOO.#O..#..#...O..OOO..O#..#O......#..O...#.O..O.....#O...O#......#.......#O.O.........O#
#.OO....O....###....#OOO..O.#..#........#OO.....#O..........#O...#..O.OO..#......##O..O##.........#.
....#..O..........O.#.#..O.O.#....O..O....O..OO#....O.......OOO.....O.O.O..#....#.....O.O#.O#.##..O.
#.O...OO..#....O.O..O...#O..O#.#O.#...O.....##..O...O##...O........#O..#O..O#.O.#.......O#.#...#.OO#
.#.OOO#....#..O........OO....O#..###.O....O...O...O#.#O..#.OO........##..#..#...O..#.......OO...O#..
.....OOO.#.O....O....#....O..O.O.O.O....O...#OO....#.OO#OO...O.OOOO.O...O.O....#OO...#O.#O..O....#..
.#.#..........#O..OOO...#..O...#.............OO....#O...O#..O...#........O..#O#....OO.....OO##.O...#
..OOO.OOO##.##O#...O.O..O......O#O..O##...##....O.#........O....##...O#O..O#.O...O.O...O....O.......
..###.OO#..#.O.#....#..O..OO..O.###....O....#..O.O#.#......OO.....O#....O.OO....OO.O.O.O#........O..
#O###.#......O......O......#...O#.O.O...O#OO.O#....O..#..O#.OO...O..O..#..#.#...#..##OO...OO....O..O
..O...#..#O##O...#..#.#OO........O.#....O....................#...........#.....O..#...O#.#.O.O..#.#.
O...#.O...#O..#..O.O.#.....O.#....O.O...##......#..#..OO...#..O..OOOOO..O..O...#..O.OO...O.O#O.#....
........#...O.#.....O.O..O....#....#O......#..#........#O#.....#O##..OO.O...#......#OO.O#.O........O
.O..##..O#....#....OO.#O.#O#OO#O.#..OOO#.......OO....O.#.....O....#..#..##...#O.....#....O..O....O..
...##O..O.#.O..#.O.....#..O#.##OO#O#...O.##..#..#......O.##O.OO...O.#..#.O....#..O....O.O.........#.
...O..O.#..O.#O#......O.#OO.O.##.##..O###.#.O........O..O..O#...#.O...O.....##....O.OO..#..O..#..O#.
O....O......#..#O#.O....O...O.....#.O##O.O...#O.#O...O...#O...O.O#O...#O.#.#....#.#.#O....O.....OO..
.O.##..###....OO................OOO.....#.#.OO.O...O#.OO.#..O........#...O.O#.O..O.O..O.O...O....O..
...OOOO..O.#..O.#...O.##.O.O##.#..O.##..#.....##....O.O....O.O.##O.OO.#O.........#.##.O#...O.O..O...
...O.O..#O.#..OO.#.#O#OO..#OO.O......O.O.OO....#..OO.......#O..O.##....O.O..##O#.#....OO.....#.O...#
OO.....O....#O...O#.#..O...O#.#.O..#OO....O..#..OOO...O.........O....#.###O.OO....O....O............
..O..O.....#O.#O#OO..##.O.........#..##.##.O..O#O#..O.O..O..O...###.....OO.......#.##..#O##..O#O..O.
#O.#O...OOOO.O.###....#O..#O#O#.OO.....#O..#..#...O.#O.....#O....###.O....#..O...O..O....#......#...
O##...#.....#..O.#.O.#.......#..O#.....#.O.O.#...O..O....OO.....#.O###.#.....OO....#OO..OOO..#......
..O......#...#O..OO#O#OO....O.O.OOO.#O.OO.O......#....O##..O#.OO.##.#...O.##.....#...####.......##..
.......OO#.O.O.#.O.......#O#........#O..##OO#.#O..##..OO.##OO....#..O......#..#.O..#...#.O.....OO...
###.OO.O.O#..O.......#OO#.....#..O.O..O.O.......#..#O.##..#O..#..#...#O#......OO##O#OOO#...O#....O.#
#O#.O.........#..O.#..#..#..............O..O..#..O##....O.##..O..O#..O.....#OO..O.#.......O....OO...
#O#O....O#.#.O..O..#...#..#.#...#O.....O..##..#....O#.#.O.O.O...O.#...#.O....O#....#.....#.#..#...#O
O...O........O.#..OOOO..#...O#O....##.O..#.......#..O..#..#O.#...OO..#.O..##..#...O#O.##.....#..#.O.
O..#.##.......O..O......#..#.#.O...O#.O.......O#.O.O#O..#.O#.OOOOO.#OO.#.OO#....O....#...O####OO...#
#O..O....O..#O..O.OO.#.O.##...#O#.....O...#.....#......##......O#O#.........#..#.O...O.O..........#.
OOO.#.O.....O..OO.O#.#..#.#..#.............O#.......OOO#OO.O.#.#O...O.#..#...#..O...#.O#....O..O..##
OO#........#.O.O....O#O...#O.#..#.#...#......##.......#..#..#.#.#.......O...##...O#...O..O.......O..
O..#O......O....#O.O#..O........#......##..#...#O...OO....#.#...O........O.#O.......O.....O...#..O..
..#O#.......O..O..O..........#...OO.#..OOO....O....#OOO#..O.....#.O#....O...#O.......#..#.O...#..##.
...#O...O.OOO...O#.....#..#....##..#....#OO..O.OO#O.O#..#.O#O#O.....#OO#O...#.#O......O.....OO.....O
..#...O.O.....O...O##O..O.....O..O..#O.O..O....O.#O....#O....O..O.O......O.....#..#....O......#.....
O.#...O..#O.#...O.O.O..#..##...O.O..O#..O...O#....O........O#O.#O.#.O.......#.O.O..O.......OO.#.....
O#...O.O#..#O#...............OO##.#..#...#O....O....#O.OO.O..O#.O.....#O.....O..O...#..#..#...#..O.O
....OO.O#.#.......O..O.O.#..#.O#.O.....#............#....O..O..O..O.O..#..#..O.....#O.#O.#.O...O..#O
.....#...OOO...#.O....O#...#.....O..OO....##O.OOO..#.O...#...O.##.O#O...O.....#.#...O...O.##.#.....O
....##...O#O..O...##O.OOOO...#.#.....OOO..........O.O....O.#O.#..O#..O###...O....#.O#O......OOO..O.O
#..#...OO##OOO.O#....#O#.O.....O#.#...##.#O..OO.#.#.O.O..OO.O#.........##.....O..O#..O......O.....##
..O..OO.##O.##OO...O#.....#O.O..........#.#.......#..#..O....O...#......#..O.#.#...#.....#OO........
O.......#O.....O....OO#.#..O.....OO..#..OOO.O....O##O#O.O....OO#......#.#.O......#.OO.O.#OO....#....
....O...#.O....##.OO.....#O#.O...O....O#.O##.....O.#.O#........OO##...O..#.....O...O.....O...#..O#O.
#.OO.#.O##....#..O....O..#...OO...#....#.##...OO....#O.........O..#......O.OO..#..#..##......#O...#.
O...#.O.##..#.#OO#.O#.O###.O.#...O#..O###.......#....O.#.........O..O..#O#..O.O.O..OO..#.#...O#..O..
......#..##..#..##...O#......#..#.#O#.....#.#.O...#.#O..#O..O.O.#..O.O.O....O....#....OO.#O......#.O
..OO.##.#....O.O...O.#.....##O..#....#..OO#.#...##......#...OO...#.....#...#O..#O...#O......O#...O#.
OOO.O##O...O..O.O#.##O#..OO.#.O..O...O.#O..O..#.#...O.O.......#O##.#..#.#.O.......O..OOO#.O....O#..O
...O...OO.O...OO...O.....O#.#.#O.O.O.O..O..O...OO....O..###...##....#O....O...#.#.##....O....#O.O..#
......#OO.........##.O...#..#.O.#..OO....O..O..O.#OO......OO.O#.......O...#..O.O#..OO.##.##.OOOOO...
........O.....##..O.OO..O#.....O................O........OO#...##.....O#....#...#O.O..O...#.##..#O.O
#OO.O.O.O.O#.OOO....#O#.#....#...#O#O.#.....OOO.....#.O..##.O##..O...........#......#...O.#.#.O.....
.#O.........#.O.##O..#..O.O...OO..#..O.O#OO#..#O.O.O....#......O.....OO#..OO#.O.O..#.#.#OO.#..O.....
...OO.O#O.O#.O.......O#..#OO.O.OO..O#.O.OO.O........O.OO..#..O...#.#.#....#.#.....OO.#.O..OO.....#..
###.....O..#...OO.#OO........O....#O#OO...#.O...#.....#O...#.##..O..#O#..O##.O#.O.....#.O....#O...#.
#O#.##......O....#.O##..#.......#.#..O......O.OOO.#....O##.#.O..OO...O..#...#.###......OO....O#.#.O#
#OOOO#.#...OO..O..O..#..O..O...#OO.O.O.O#.#.##..#....####..O#....#O.OOO..O#O.#...O....#.O......O....
.##OO....#......O..OOO......#..O.....#..O...O..#.#.........OO.O..##.......#.#O#.OO......O#O..O......
........OOO.....OO........O.O.O.#O...#...O...O...O..O..#.....#O..#.#..OO....O...#..##..#O......O.#O#
""""""

game = tuple(tuple(line) for line in text.strip().split(""\n""))


def display(board):
    for i in range(0, len(board)):
        for j in range(0, len(board[i])):
            print(board[i][j], end="""")
        print()

    print(""\n\n"")


@cache
def rotate_north(game_board):
    board = [list(line) for line in game_board]

    print(""computing new board"")

    for i in range(0, len(board)):
        for j in range(0, len(board[0])):
            if board[i][j] != ""O"":
                continue

            destination = i - 1
            while destination > -1 and board[destination][j] == ""."":
                destination -= 1

            board[i][j], board[destination + 1][j] = board[destination + 1][j], board[i][j]

    return tuple(tuple(line) for line in board)


@cache
def rotate_south(game_board):
    board = [list(line) for line in game_board]

    print(""computing new board"")

    for i in range(len(board) - 1, -1, -1):
        for j in range(0, len(board[0])):
            if board[i][j] != ""O"":
                continue

            destination = i + 1
            while destination < len(board) and board[destination][j] == ""."":
                destination += 1

            board[i][j], board[destination - 1][j] = board[destination - 1][j], board[i][j]

    return tuple(tuple(line) for line in board)


@cache
def rotate_east(game_board):
    board = [list(line) for line in game_board]

    print(""computing new board"")

    for i in range(0, len(board)):
        for j in range(len(board[0]) - 1, -1, -1):
            if board[i][j] != ""O"":
                continue

            destination = j + 1
            while destination < len(board) and board[i][destination] == ""."":
                destination += 1

            board[i][j], board[i][destination - 1] = board[i][destination - 1], board[i][j]

    return tuple(tuple(line) for line in board)


@cache
def rotate_west(game_board):
    board = [list(line) for line in game_board]

    print(""computing new board"")

    for i in range(0, len(board)):
        for j in range(0, len(board[i])):
            if board[i][j] != ""O"":
                continue

            destination = j - 1
            while destination > -1 and board[i][destination] == ""."":
                destination -= 1

            board[i][j], board[i][destination + 1] = board[i][destination + 1], board[i][j]

    return tuple(tuple(line) for line in board)


@cache
def cycle(board):
    new_game = rotate_north(board)
    new_game = rotate_west(new_game)
    new_game = rotate_south(new_game)
    new_game = rotate_east(new_game)
    return new_game


@cache
def points(board):
    tot = 0
    points = len(board)
    for i in range(len(board) - 1, -1, -1):
        for j in range(0, len(board[i])):
            if board[i][j] == ""O"":
                tot += points - i
    return tot


combinations_and_transformed = {}
first_in_repetition = None

cycle_start = None
cycle_width = None

for i in range(0, 1000000000):
    new_game = cycle(game)
    if game in combinations_and_transformed and combinations_and_transformed[game][1] == new_game:
        cycle_start = combinations_and_transformed[game][0]
        cycle_width = i - 1 - combinations_and_transformed[game][0]
        break
    else:
        combinations_and_transformed[game] = (i - 1, new_game)  # we are storing the index of the previous result
    game = new_game

print(f""cycle starts at {cycle_start}"")
print(f""cycle width {cycle_width}"")
print(f""missing {(1000000000 - cycle_start) % cycle_width}"")

for i in range(0, (1000000000 - (cycle_start + cycle_width)) % cycle_width - 1):
    print(points(game))
    game = cycle(game)

print(f""points of the final position: {points(game)}"")"
Hr6rC5q6,Untitled,bakhridinova,Java,Friday 15th of December 2023 12:33:15 AM CDT,"import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class PaymentService {
    private final PaymentRepository paymentRepository;
    private final FeeService feeService;
    private final UserService userService;
    private final CbrRestClient cbrRestClient;

    /**
     * detailed documentation
     * @param paymentDetails
     */
    @Transactional
    public void processPayment(PaymentDetails paymentDetails) {
        double someGoodName = cbrRestClient.doRequest().getRates().get(paymentDetails.getCurrency().getCode());
        double amountInUsd = paymentDetails.getAmount() * someGoodName;
        User user = userService.findCurrentUser();
        paymentRepository.save(new Payment(amountInUsd, user, paymentDetails.getRecipientId()));
        feeService.processFee(amountInUsd, user);
    }
}

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class FeeService {
    private final FeeRepository feeRepository;
    private final NotificationRestClient notificationRestClient;

    /**
     * detailed documentation
     * @param amountInUsd
     * @param user
     */
    public void processFee(double amountInUsd, User user) {
        double coefficient = 0.015;
        if (amountInUsd > 1000) {
            coefficient = 0.01;
        }
        if (amountInUsd > 5000) {
            coefficient = 0.005;
        }
        try {
            feeRepository.save(new Fee(amountInUsd * coefficient, user));
            notificationRestClient.notify(payment);
		} catch (DataAccessException e) {
			// log cause
            // throw new SomeCustomRuntimeException();
        } catch (Exception e) {
            // log cause
            // throw new SomeOtherCustomRuntimeException();
        }
    }
}

import lombok.Data;

@Data
public class PaymentDetails {
    private double amount;
    private Currency currency;
    private Long recipientId;
}"
QKbZjwMM,autocorrelation_spectrum_python,Danila_lipatov,Python,Friday 15th of December 2023 12:19:47 AM CDT,"import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import scipy.stats
from statsmodels.graphics.tsaplots import plot_acf
#https://scicoding.com/4-ways-of-calculating-autocorrelation-in-python/

if __name__ == '__main__':
    df = pd.read_csv('CompanyABCProfit.csv').set_index('Year')
    # fig = plt.figure(figsize=(10, 10))
    # plt.xlabel('Year')
    # plt.ylabel('Profit')
    # df.plot()
    # plt.close()
    values_df = []
    for value in df[""Profit(Rs '000)""]:
        values_df.append(value)
    corr_func = (np.correlate(values_df - df.mean()[0], values_df - df.mean()[0], 'full')) / df.var()[0] / len(values_df)
    # fig = plt.figure(figsize=(10, 10))
    corr_function = pd.DataFrame(corr_func).reset_index()
    corr_function['index'] = corr_function['index'] - len(df)
    corr_function = corr_function.set_index('index')
    corr_function.plot()
    # plt.show()
    # plt.close()
    Fs = 1024
    sampling_rate = 30 #signal freq
    Number_of_repeat = 10
    N = int(Number_of_repeat * Fs / sampling_rate) #number of samples
    t_step = 1 / Fs
    t = np.linspace(0, (N - 1) * t_step, N) #time interval
    freq = Fs / N #freq step
    f = np.linspace(0, (N - 1) * freq, N) # freq interval

    data = 2 * np.sin(2 * np.pi * sampling_rate * t) + 4 * np.sin(2 * np.pi * 3 * sampling_rate * t)
    fureir = scipy.fft.fft(data)
    fureier_abs = abs(fureir / N)
    data_spec = f[0 : int(N / 2 + 1)]
    furier_abs_plot = 2 * fureier_abs[0 : int(N / 2 + 1)]
    fureier_abs[0] /= 2
    fig, [ax1, ax2] = plt.subplots(nrows=2, ncols=1)
    ax1.plot(t, data)
    ax2.plot(data_spec, furier_abs_plot)
    plt.show()
    stop = 'here'"
duL4gawX,AoC 2023 day 15 (Perl),musifter,Perl,Friday 15th of December 2023 12:11:57 AM CDT,"#!/usr/bin/perl

use strict;
use warnings;

use feature         qw(say);
use List::AllUtils  qw(firstidx indexes reduce);

sub hash ($) { reduce {(($a+$b)*17) % 256} (0, map {ord} split(//, shift)) };

my @Boxes;
my $part1 = 0;
foreach (map {chomp; split /,/} <>) {
    my ($label, $op, $foc) = m#(\w+)([=-])(\d?)#;

    $part1 += hash $_;
    my $box = hash $label;

    # Look for label in box:
    my $idx = firstidx { $label eq $_->[0] } $Boxes[$box]->@*;

    if ($op eq '-') {
        splice( $Boxes[$box]->@*, $idx, 1 )  if ($idx != -1);   # - remove lens
    } elsif ($idx != -1) {
        $Boxes[$box][$idx] = [$label, $foc];                    # = replace lens
    } else {
        push( $Boxes[$box]->@*, [$label, $foc] );               # = add lens
    }
}

my $part2 = 0;
foreach my $i (indexes {defined} @Boxes) {
    $part2 += ($i+1) * ($_+1) * $Boxes[$i][$_][1] foreach (0 .. $Boxes[$i]->$#*);
}

say ""Part 1: "", $part1;
say ""Part 2: "", $part2;"
H7c7WUEd,Burial Grounds,calvarycemetery,HTML,Thursday 14th of December 2023 11:40:07 PM CDT,"Calvary Cemetery serves as a sanctuary of reverence and respect, committed to preserving the memory of your beloved. Our compassionate team deeply comprehends the importance of extending caring support and ensuring that their final arrangements are executed with the utmost dignity. We provide an array of burial options, including <a href=""https://calvarycemetery.org/ground-burial/""><b>burial grounds</b></a> and mausoleum entombments, all tailored to your individual preferences. Within our tranquil environment, we offer a peaceful space for contemplation and remembrance, allowing loved ones to bid their farewells in a profoundly meaningful manner. Please do not hesitate to reach out to us today to explore our burial services further and to understand how we can assist during this challenging period."
c4ZrjhWH,Syphilis Symptoms,endinghivok,HTML,Thursday 14th of December 2023 11:06:25 PM CDT,"Syphilis can present with symptoms like sores, rashes, and fever. If untreated, it can lead to severe complications. Learn more about <a href=""https://endinghivoklahoma.org/syphilis-symptoms/""><b>syphilis symptoms</b></a> and seek timely medical attention for diagnosis and treatment. Learn more about Syphilis Symptoms."
HTcgvSE6,ServerHandler,ArcaneSunku,Java,Thursday 14th of December 2023 10:57:09 PM CDT,"package git.eclipse.core.network;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.InetSocketAddress;

public class ServerHandler implements Runnable {
    protected DatagramSocket m_Socket;
    protected InetAddress m_IP;
    protected int m_Port;

    protected Thread m_Thread;
    protected volatile boolean m_Running;

    public ServerHandler(String ip, int port) {
        try {
            m_IP = InetAddress.getByName(ip);
            m_Port = port;
            m_Socket = new DatagramSocket(m_Port);
            m_Socket.setBroadcast(true);
            m_Socket.setSoTimeout(29000);
        } catch (IOException e) {
            System.err.println(e.getMessage());
        }
    }

    public synchronized void start() {
        m_Thread = new Thread(this, ""Server_Thread"");
        m_Running = m_Socket.isBound();
        m_Thread.start();
    }

    public synchronized void stop() {
        if(m_Running) m_Running = false;

        try {
            if(m_Socket != null && !m_Socket.isClosed()) m_Socket.close();
            m_Thread.join(1);
        } catch (InterruptedException e) {
            System.err.println(e.getMessage());
        }
    }

    @Override
    public void run() {
        while(m_Running) {
            if(m_Socket == null || m_Socket.isClosed()) {
                stop();
                continue;
            }

            byte[] data = new byte[1024];
            DatagramPacket packet = new DatagramPacket(data, data.length);
            try {
                m_Socket.receive(packet);
            } catch (IOException e) {
                System.err.println(e.getMessage());
            }

            if(m_Socket == null || packet.getAddress() == null) continue;

            String message = new String(packet.getData()).trim();
            System.out.println(""Client > "" + message);

            if(message.equalsIgnoreCase(""ping""))
                sendData(""pong"".getBytes(), packet.getAddress(), packet.getPort());
        }
    }

    public void sendData(byte[] data, InetAddress ipAddress, int port) {
        DatagramPacket packet = new DatagramPacket(data, data.length, ipAddress, port);
        try {
            m_Socket.send(packet);
        } catch (IOException e) {
            System.err.println(e.getMessage());
        }
    }

    public boolean isRunning() {
        return m_Running;
    }
}
"
BsDaXYd4,ClientHandler,ArcaneSunku,Java,Thursday 14th of December 2023 10:55:58 PM CDT,"package git.eclipse.core.network;

import java.io.IOException;
import java.net.*;

public class ClientHandler implements Runnable {

    protected DatagramSocket m_Socket;
    protected InetAddress m_IPAddress;
    protected int m_Port;

    protected Thread m_Thread;
    protected volatile boolean m_Connected;

    public ClientHandler(String ipAddress, int port) {
        try {
            m_IPAddress = InetAddress.getByName(ipAddress);
            m_Port = port;

            m_Socket = new DatagramSocket();
            m_Socket.setBroadcast(true);
            m_Socket.setSoTimeout(29000);

            m_Socket.connect(m_IPAddress, m_Port);
            m_Connected = m_Socket.isConnected();
        } catch (UnknownHostException | SocketException e) {
            m_Connected = false;
            System.err.println(e.getMessage());
        }
    }

    public synchronized void start() {
        m_Thread = new Thread(this, ""Client_Thread"");
        m_Thread.start();
    }

    public synchronized void stop() {
        if(m_Connected) m_Connected = false;

        try {
            if(m_Socket != null && !m_Socket.isClosed()) m_Socket.close();
            m_Thread.join(1);
        } catch (InterruptedException e) {
            System.err.println(e.getMessage());
        }
    }

    @Override
    public void run() {
        while(m_Connected) {
            if(!m_Socket.isConnected() && m_Socket.isClosed()) {
                stop();
                continue;
            }

            byte[] data = new byte[1024];
            DatagramPacket packet = new DatagramPacket(data, data.length);
            try {
                m_Socket.receive(packet);
            } catch (IOException e) {
                System.err.println(e.getMessage());
            }

            if(m_Socket == null || packet.getAddress() == null) return;

            String message = new String(packet.getData()).trim();
            System.out.println(""Server > "" + message);

            if(message.equalsIgnoreCase(""pong""))
                sendData(""ping"".getBytes());
        }
    }

    public void sendData(byte[] data) {
        DatagramPacket packet = new DatagramPacket(data, data.length, m_IPAddress, m_Port);
        try {
            m_Socket.send(packet);
        } catch (IOException e) {
            System.err.println(e.getMessage());
        }
    }

    public boolean isConnected() {
        return m_Connected;
    }
}"
4qJy7rXQ,[mpv] autoshader.lua,alaestor,Lua,Thursday 14th of December 2023 10:45:58 PM CDT,"function autoshader()
    local height = tonumber(mp.get_property(""height""))
	if height >= 720 then -- Anime4K mode A (HQ)
		print(""Vertical resolution of"", height, ""(>= 720): Loading Anime4K mode A."")
		mp.commandv(""set"", ""glsl-shaders"", ""~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_VL.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl"")
	elseif height >= 480 then --Anime4K mode B
		print(""Vertical resolution of"", height, ""(>= 480): Loading Anime4K mode B."")
		mp.commandv(""set"", ""glsl-shaders"", ""~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Restore_CNN_Soft_VL.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl"")
	else --Anime4K mode C
		print(""Vertical resolution of"", height, ""(< 480): Loading Anime4K mode C."")
		mp.commandv(""set"", ""glsl-shaders"", ""~~/shaders/Anime4K_Clamp_Highlights.glsl;~~/shaders/Anime4K_Upscale_Denoise_CNN_x2_VL.glsl;~~/shaders/Anime4K_AutoDownscalePre_x2.glsl;~~/shaders/Anime4K_AutoDownscalePre_x4.glsl;~~/shaders/Anime4K_Upscale_CNN_x2_M.glsl"")
	end
end

mp.add_key_binding(nil, ""autoshader"", autoshader)
mp.register_event(""file-loaded"", autoshader)
"
5dHZfE1k,Untitled,Constantine_M,C++,Thursday 14th of December 2023 10:34:21 PM CDT,"(* Выходное воздействие *)
(*//OLD_BEGIN
IF V_manualNaKnd THEN
	setNaTnd := setNaTndManual;
ELSE
	If fuelRegState = _TR_SM_OFF Then
   		if nialg.loc.typeGtdKpvRvna then /* ГПА с КПВ */
     		if alg.tr.condition = _TR_SM2_WASH_START then /* При промывке не открывать КПВ */
	  			setNaTnd := scale(fuelRegTun.scale[ _SC_KPV_ALT ], 0.0);
     		else /* При работе, по графику */
	   			setNaTnd := scale(fuelRegTun.scale[ _SC_KPV_ALT ], gtuRedData.nTndPr.val);
	 		end_if;
   		else /* ГПА с РВНА */
     		setNaTnd := scale(fuelRegTun.scale[ _SC_RVNA_ALT ],fuelRegTunScale.nTndPrFiltr);
   		end_if;
  	Else /* fuelRegState = _TR_SM_OFF */ 
    	if nialg.loc.typeGtdKpvRvna then /* ГПА с КПВ */
      		setNaTnd := scale(fuelRegTun.scale[ _SC_KPV ], gtuRedData.nTndPr.val);
		else /* ГПА с РВНА */
	  		setNaTnd := scale(fuelRegTun.scale[ _SC_RVNA ], fuelRegTunScale.nTndPrFiltr);
		end_if;
  	End_if;
END_IF;
OLD_END//*)

(*//NEW_BEGIN *)
If V_manualNaKnd Then
	setNaTnd := setNaTndManual;
Else
	IF fuelRegState = _TR_SM_OFF THEN
		(* ГПА с КПВ *)
   		if nialg.loc.typeGtdKpvRvna then
     		if (alg.tr.condition = _TR_SM2_WASH_START or alg.tr.condition = _TR_SM2_COLD_START) then (* При промывке и ХП не открывать КПВ *)
	  			setNaTnd := scale(fuelRegTun.scale[ _SC_KPV_ALT ], 0.0);
     		else(* При работе, по графику *)
	   			setNaTnd := scale(fuelRegTun.scale[ _SC_KPV_ALT ], gtuRedData.nTndPr.val);
	 		end_if;
		(* ГПА с РВНА *)
   		else
			if (alg.tr.condition = _TR_SM2_WASH_START or alg.tr.condition = _TR_SM2_COLD_START) then (* При промывке и ХП не открывать КПВ *)
	  			setNaTnd := scale(fuelRegTun.scale[ _SC_RVNA_ALT ], 0.0);
     		else(* При работе, по графику *)
     			setNaTnd := scale(fuelRegTun.scale[ _SC_RVNA_ALT ],fuelRegTunScale.nTndPrFiltr);
			end_if;
   		end_if;
  	ELSE (* fuelRegState != _TR_SM_OFF *)
		(* ГПА с КПВ *)
    	if nialg.loc.typeGtdKpvRvna then 
			if (alg.tr.condition = _TR_SM2_WASH_START or alg.tr.condition = _TR_SM2_COLD_START) then (* При промывке и ХП не открывать КПВ *)
	  			setNaTnd := scale(fuelRegTun.scale[ _SC_KPV ], 0.0);
     		else(* При работе, по графику *)
				setNaTnd := scale(fuelRegTun.scale[ _SC_KPV ], gtuRedData.nTndPr.val);
			end_if;
		(* ГПА с РВНА *)
		else
			if (alg.tr.condition = _TR_SM2_WASH_START or alg.tr.condition = _TR_SM2_COLD_START) then (* При промывке и ХП не открывать КПВ *)
	  			setNaTnd := scale(fuelRegTun.scale[ _SC_RVNA ], 0.0);
     		else(* При работе, по графику *)
	  			setNaTnd := scale(fuelRegTun.scale[ _SC_RVNA ], fuelRegTunScale.nTndPrFiltr);
			end_if;
		end_if;
  	END_IF;
End_if;
(*NEW_END//*)"
1BDsDdPz,give feedback,mike3d0g,Python,Thursday 14th of December 2023 10:24:40 PM CDT,"def check_guess(user_guess, answer):
    if user_guess == answer:
        print(""You Win!"")
        return True
    if user_guess < answer:
        print(""Your guess was to low."")
    if user_guess > answer:
        print(""Your guess was to high."")
    return False

    # I don't think the code below belongs in this function
    # The first part of this function checks right or wrong
    # The code below checks if we're at max guesses and
    # and launches a new game. You don't expect that INSIDE check_guess
    if guesses_left == 0:
        print(""You lose."")
    else:
        play_again()
"
yVKr0tbt,guess 1-100,mike3d0g,Python,Thursday 14th of December 2023 10:13:40 PM CDT,"def get_level():
    """"""Ask user for level, return guesses_max (5 or 10).""""""
    # Your code
    return guesses_max


def give_clue(user_guess, correct_answer):
    """"""Tell the user if they're low, high or right.""""""
    # Your code


def is_right(user_guess, correct_answer):
    ""See if answer is correct.""""""
    pass

def play_again():
    """"""Ask user if they want to play again, return T/F.""""""
    # Your code


def end_game():
    """"""Thank user or something.""""""
    pass


# Code loop that runs the game
while True:
    correct_answer = random...
    guesses_max = get_level()
    guesses_current = 0
    while guesses_current != guesses_max:
        guess = get_guess()
        give_clue(...)
        if is_right(...):
            break
        guess = guess + 1
    if not play_again():
        break

# Code that ends the game
    end_game()
"
MxPEyCXG,hwidwl,Richyrich457,Lua,Thursday 14th of December 2023 09:22:41 PM CDT,"--[[                            
         ___    ___ ________  ________     
        |\  \  /  /|\   __  \|\   __  \    
        \ \  \/  / | \  \|\  \ \  \|\  \   
         \ \    / / \ \  \\\  \ \   _  _\  
          /     \/   \ \  \\\  \ \  \\  \| 
         /  /\   \    \ \_______\ \__\\ _\ 
        /__/ /\ __\    \|_______|\|__|\|__|
        |__|/ \|__|                        
         -------------------------------     
                   SLIMECITYJS  
                                                                                    
]]--  

--[[
	This is the table we are going to use to list all of our HWID / ClientID's.

	All you need to do is to replace the ""Insert your HWID here."" text with your HWID / Client ID and upload it to pastebin / github.

	Please note that you will have to manually update this table when you want to add another HWID in here.
]]

return {
	"""",
	"""",
	"""",
}"
XKXBd9qQ,Untitled,BayangBec,JavaScript,Thursday 14th of December 2023 09:07:08 PM CDT,"const { has } = require(""lodash"");
const { v4: uuidv4 } = require('uuid');
const moment = require('moment');
const { APPICATION, CONFIG_SETTING } = require('@mocobaas/shared/constanta');
const utilQueue = require('../../utils/queue-util');
const TelegramBot = require('node-telegram-bot-api');

// @ts-check
/**
 * You can also import another NPM package
 * const _ = require(""lodash"");
 * const moment = require(""moment"");
 */

/**
 * @description handler for cron-activation-newspaper-magazine
 * @param {import('@mocobaas/server-sdk').SchedulerContext} ctx
 */

async function handler(ctx) {
  const { knex } = ctx.moco.tables;
  let datas = {};
  const userInfo = { user_name: 'cron-activation-newspaper-magazine' };
  const token = process.env.TOKEN_TELEBOT;

  try {
    const dateNow = moment(new Date()).format('YYYY-MM-DD');
    datas = await knex('content_subscriptions as cs')
      .select('cs.id', 'cs.media_type_id', 'cs.organization_id', 'cs.catalog_id', 'catalog_file')
      .join('catalogs as c', 'c.id', 'cs.catalog_id')
      .whereNull('process_date')
      .where('process_isrun', false)
      .whereRaw(`(to_char(publish_date, 'YYYY-MM-DD') = '${dateNow}')`)
      .orderBy('cs.publish_date', 'desc');

    const [credential, agentManager] = await Promise.all([
      knex('config_setting').select('config_value').where('id', CONFIG_SETTING.AGENT_MANAGER).first(),
      knex('application').select('app_client_api').where('id', APPICATION.AGENT_MANAGER).first()
    ]);

    const configAgent = {
      credential: credential.config_value[0],
      app_client_api: agentManager.app_client_api,
      app_id: APPICATION.CENTRALIZED
    };

    if (datas.length != 0) {
      // const payloadMigration = [];
      const payloadActivation = [];
      // const payloadDrm = [];
      const payloadSubscriptionItems = [];
      const trxId = uuidv4()

      await Promise.all(datas.map(async (item) => {
        const findIncome = await knex('others_income_products as oip')
          .select('oi.income_info', 'oip.product_copy', 'oi.income_end_date', 'oi.id')
          .join('others_incomes as oi', 'oi.id', 'oip.income_id')
          .where('product_category_id', item.media_type_id)
          .whereRaw(`(to_char(income_start_date, 'YYYY-MM-DD') <= '${dateNow}')`)
          .whereRaw(`(to_char(income_end_date, 'YYYY-MM-DD') >= '${dateNow}')`)
          .where('organization_id', item.organization_id);

        if (findIncome.length != 0) {
          await Promise.all(findIncome.map(async (i) => {
            payloadActivation.push({
              catalog_id: item.catalog_id,
              created_at: new Date(),
              epustaka_id: i.income_info.epustaka_id,
              epustaka_catalog_qty: i.product_copy
            });

            let expired = null;
            
            if (i.income_info.archiving_type_code) {
              switch(i.income_info.archiving_type_code) {
                case 'PERMINGGU':
                    userData = {...userData, verified: false}
                break;
                case 2:
                    userData = {...userData, verified: true}
                    break;
                default:
                  expired = new Date(i.income_end_date);
                  expired.setFullYear(expired.getFullYear() + 1000);
              };
            };

            payloadSubscriptionItems.push({
              id: uuidv4(),
              epustaka_id: i.income_info.epustaka_id,
              catalog_id: item.catalog_id,
              epustaka_catalog_qty: i.product_copy,
              epustaka_expired: expired,
              transaction_id: i.id
            });
  
            await knex('content_subscriptions').update({process_date: new Date(), process_isrun: true}).where('id', item.id);

            let findExtSyncLogs = await knex('ext_sync_logs')
            .where('catalog_id', item.catalog_id)
            .andWhere('process_iserror', false)
            .orderBy('created_at', 'desc').first();

            if (findExtSyncLogs) {
              let startProcess = new Date();
              startProcess.setHours(startProcess.getHours() + 7);
              const updatedNow = new Date();
              const createdAt = new Date(findExtSyncLogs.process_sync[0].file_created);

              const hitung = updatedNow.setMilliseconds(0) - createdAt.setMilliseconds(0);

              const menit = Math.floor(hitung / (1000 * 60));
              const detik = Math.floor((hitung / 1000) % 60);
    
              findExtSyncLogs.process_sync.push({
                start_date: startProcess,
                process_name: `Distribusi Konten Ke Spot Baca ${i.income_info.epustaka_name}`,
                end_date: startProcess
              });
          
              await knex('ext_sync_logs').update({process_sync: JSON.stringify(findExtSyncLogs.process_sync), updated_at: updatedNow}).where('id', findExtSyncLogs.id);

              const bot = new TelegramBot(token, { polling: false });

              let pesan = `Berikut adalah data sync koran dan majalah:\n
*Proses Membaca File Dari FTP (${moment(findExtSyncLogs.process_sync[1].start_date).format(""hh:mm:ss"")})*
Judul: *${findExtSyncLogs.catalog_title}*
Upload FTP: *${moment(findExtSyncLogs.process_sync[0].file_created).format(""DD-MM-YYYY hh:mm:ss"")}*
Nama Asli File: *${findExtSyncLogs.process_sync[0].original_file_name}*
Ukuran File: *${findExtSyncLogs.process_sync[0].file_size}*
Proses: *${findExtSyncLogs.process_iserror === true ? 'Gagal' : 'Sukses'} ${menit} Menit ${detik} Detik*
==================================================
*Proses Membaca Metadata Dari File FTP (${moment(findExtSyncLogs.process_sync[2].start_date).format(""hh:mm:ss"")} - ${moment(findExtSyncLogs.process_sync[2].end_date).format(""hh:mm:ss"")})*
==================================================
*Proses Menambahkan Metadata Konten Ke Database MCCP V1 (${moment(findExtSyncLogs.process_sync[3].start_date).format(""hh:mm:ss"")} - ${moment(findExtSyncLogs.process_sync[3].end_date).format(""hh:mm:ss"")})*
==================================================
*Data Masuk Dari MCCP V1 (${moment(findExtSyncLogs.process_sync[4].start_date).add(5, 'h').format(""hh:mm:ss"")})*
==================================================
*Data Masuk Konten Berlangganan (${moment(findExtSyncLogs.process_sync[5].start_date).add(5, 'h').format(""hh:mm:ss"")} - ${moment(findExtSyncLogs.process_sync[5].end_date).add(5, 'h').format(""hh:mm:ss"")})*
==================================================
*Distribusi Konten Ke Spot Baca ${i.income_info.epustaka_name} (${moment(findExtSyncLogs.process_sync[6].start_date).add(5, 'h').format(""hh:mm:ss"")})*`;

              const chatId = process.env.CHAT_ID_TELEBOT;
              bot.sendMessage(chatId, pesan, { parse_mode: 'Markdown' });
            };
          }));
        };
      }));

      let limitManager = 50;
      const pageActivation = Math.ceil(payloadActivation.length / limitManager);

      await Promise.all([
        knex.batchInsert('content_subscription_items', payloadSubscriptionItems, 50),
        utilQueue.booksActivationAgentManager({ ...ctx, userInfo, trxId}, configAgent, payloadActivation, pageActivation, limitManager, null, true)
      ])
    };

    return true;
  } catch (error) {
    const _messages = (error.response && has(error.response, ""data"")) ? (error.response.data.message || error.response.data.error) : error.message;
    const payloadError = {
        id: uuidv4(),
        action: 'cron-activation-newspaper-magazine',
        content: JSON.stringify(datas),
        err_message: _messages
    };

    await knex('error_logs').insert(payloadError);
    return false;
  }
}

module.exports = handler;"
90mURrV8,SVG thing,herodotus_machine,HTML,Thursday 14th of December 2023 08:20:28 PM CDT,"
<svg xmlns=""http://www.w3.org/2000/svg"" xmlns:xlink=""http://www.w3.org/1999/xlink"" width=""350.7"" height=""248"" viewBox=""0 0 1052.4 744.1"">
  <defs>
    <radialGradient id=""a"" gradientUnits=""userSpaceOnUse"" cy=""-15"" cx=""22.7"" gradientTransform=""matrix(1 0 0 2.37143 0 20)"" r=""3.2"">
      <stop stop-color=""#e7e7e7"" offset=""0""/>
      <stop stop-color=""#565656"" offset=""1""/>
    </radialGradient>
    <radialGradient id=""c"" gradientUnits=""userSpaceOnUse"" cy=""30.7"" cx=""25.5"" gradientTransform=""matrix(1.55222 0 0 .6192 -14 5.1)"" r=""15.2"">
      <stop offset=""0""/>
      <stop stop-color=""#5e5e5e"" offset=""1""/>
    </radialGradient>
    <radialGradient xlink:href=""#a"" id=""f"" gradientUnits=""userSpaceOnUse"" gradientTransform=""matrix(1 0 0 2.37143 0 20)"" cx=""22.7"" cy=""-15"" r=""3.2""/>
    <radialGradient xlink:href=""#a"" id=""g"" gradientUnits=""userSpaceOnUse"" gradientTransform=""matrix(1 0 0 2.37143 0 20)"" cx=""22.7"" cy=""-15"" r=""3.2""/>
    <radialGradient xlink:href=""#c"" id=""i"" gradientUnits=""userSpaceOnUse"" gradientTransform=""matrix(29.1164 0 0 11.61495 -339.2 200.3)"" cx=""25.5"" cy=""30.7"" r=""15.2""/>
    <linearGradient id=""b"" y2=""35.9"" gradientUnits=""userSpaceOnUse"" x2=""10.8"" gradientTransform=""matrix(1.04306 0 0 1.04306 -1 -1.3)"" y1=""33.6"" x1=""11.7"">
      <stop stop-color=""#96d2e2"" offset=""0""/>
      <stop stop-color=""#1d5868"" offset=""1""/>
    </linearGradient>
    <linearGradient id=""d"">
      <stop stop-color=""#666"" offset=""0""/>
      <stop stop-color=""#ababab"" stop-opacity=""0"" offset=""1""/>
    </linearGradient>
    <linearGradient xlink:href=""#b"" id=""h"" gradientUnits=""userSpaceOnUse"" gradientTransform=""matrix(19.56562 0 0 19.56562 -95.6 80)"" x1=""11.7"" y1=""33.6"" x2=""10.8"" y2=""35.9""/>
    <linearGradient xlink:href=""#d"" id=""j"" gradientUnits=""userSpaceOnUse"" gradientTransform=""matrix(19.56562 0 0 19.56562 -95.6 80)"" x1=""22.9"" y1=""27.2"" x2=""21.3"" y2=""16.7""/>
    <linearGradient xlink:href=""#d"" id=""k"" gradientUnits=""userSpaceOnUse"" gradientTransform=""matrix(19.56562 0 0 19.56562 -95.6 80)"" x1=""9.6"" y1=""29.3"" x2=""20.7"" y2=""18.3""/>
    <filter id=""e"" color-interpolation-filters=""sRGB"">
    <feGaussianBlur stdDeviation="".6""/>
    </filter>
  </defs>
  <g transform=""translate(151.9 -274.1)"">
    <path 
      d=""M131.4 525.2c-14.5 13.5-54.5 6-45.7-25.8 8.9-31.7 47.6-14.8 52 3.2-3 12.2-5.7 12.7-6.3 22.6z"" 
      style=""fill:red""/>
    <path 
      d=""M131.4 525.2c-15.6 16.7-58 1.2-42.1-24 9.7-15.6 28.1-2.1 39.1 14.6-2.9 12.1 3.6-.5 3 9.4z"" 
      style=""fill:#a00""/>
    <path 
      d=""M4.9 37.4c0 2.8 14 8 18.8 7.3 2.4-.4 19.7-13.5 19.2-15.1-2.9-9.8-37.8.3-38 7.8z"" 
      transform=""matrix(22.69597 0 0 22.69597 -168.7 -28.5)"" 
      style=""opacity:.5;fill:#000;filter:url(#e)""/>
    <g style=""fill-rule:nonzero"">
      <path 
      style=""color:#000;fill:#000;enable-background:accumulate"" 
        d=""M25 27c-1.3 0-2.4 2.4-2.4 5.3 0 2.5.8 4.6 1.7 5.2.9.7 1.8.7 2.8.5 1.3 0 2.2-2.4 2.2-5.3 0-3-1-5.4-2.3-5.4-.9.5-1.2.1-2-.4z"" 
        transform=""translate(202.5 -11.3) scale(19.23714)""/>
      <path 
      style=""color:#000;fill:url(#f);enable-background:accumulate"" 
        d=""M27-14.5a3.2 7.7 0 1 1-6.4 0 3.2 7.7 0 1 1 6.5 0z"" 
        transform=""translate(561.1 715.6) scale(6.78678)""/>
    </g>
    <g style=""fill-rule:nonzero"">
      <path 
      style=""color:#000;fill:#000;enable-background:accumulate"" 
        d=""M25 27c-1.3 0-2.4 2.4-2.4 5.3 0 2.5.8 4.6 1.7 5.2.9.7 1.8.7 2.8.5 1.3 0 2.2-2.4 2.2-5.3 0-3-1-5.4-2.3-5.4-.9.5-1.2.1-2-.4z"" 
        transform=""matrix(22.69597 0 0 22.69597 -184.2 84.6)""/>
      <path 
      style=""color:#000;fill:url(#g);enable-background:accumulate"" 
        d=""M27-14.5a3.2 7.7 0 1 1-6.4 0 3.2 7.7 0 1 1 6.5 0z"" 
        transform=""translate(239 942.2) scale(8.00704)""/>
    </g>
    <path 
      d=""M120 525c-5.4 10.1-26.7 4.9-27.2-3.3-.9-14.8 32.5-6.9 27.1 3.3z"" 
      style=""fill:#6d0000""/>
    <path 
      style=""color:#000;fill:red;fill-rule:nonzero;enable-background:accumulate"" 
      d=""M410 303.7c-9.5.3-18.2 1.4-25.7 3-59.7 13.7-136.3 67.3-158 80.8-24.9 15.6-76.2 92-108.8 132.7C99.2 543-49 594.2-60.8 651.6c-5 24-6.9 44-8 61.2v.6c-4.9 9-7.9 21.2-7.9 34.8 0 23.7 10.4 41.3 21.4 49 103 71.7 222 110.3 343.7 135.7 45.2 7.8 96-23.2 96-23.2s-10-138.8 37.9-174.3c57.2-42.5 50 109 67.2 94.8 26.8-22.2 179.7-138 193.2-146.2 13.6-8.1.3-123.2 33.6-145.5 48.9-32.5 43 95.5 55.7 80.1 11.5-13.9 18.6-14.4 21.4-19.5 11.7-6.2 20.2-25.5 20.2-48.3 0-23.7-9.1-43.5-21.4-49-1.6-15.6-4.7-30.3-11.7-40.3-13.8-20-23-31-81.3-45.9a273.6 273.6 0 0 0-78.9-65.4c-35-18.9-143.6-48.5-210.3-46.5z""/>
    <path 
      d=""M383.1 331.3c-29.2-1-67.8 9.8-118 41-30 18.5 58.5 14.2 177.3 59.8 30 11.6 28.3-97.9-59.3-100.8zM93.3 575.8c-34 .7-71.2 12-109.4 39.2-41.6 29.5 187.1 108.5 295.9 139.4 55.8 15.8-39.3-181.6-186.5-178.6z"" 
      style=""fill:#ff8080""/>
    <path 
      style=""color:#000;fill:#a00;fill-rule:nonzero;enable-background:accumulate"" 
      d=""M620.4 365.5c-44.1-1.9-147.2 58.7-155.7 79.1-9.1 21.8-34.4 166.5-45.3 181-10.9 14.5-99.8 118.7-109.2 143.5-13.8 36.2-10.1 109.2-10.8 127-.7 15.2-13.8 28-44 29.5 11 2.5 21.9 5 33 7.3 45.2 7.8 96-23.2 96-23.2s-10-138.8 37.9-174.3c57.2-42.5 50 109 67.2 94.8 26.8-22.2 179.6-138 193.2-146.1 13.6-8.2.3-123.3 33.6-145.6 48.9-32.5 43 95.6 55.7 80.1 11.5-13.9 18.6-14.4 21.4-19.5 11.7-6.2 20.2-25.5 20.2-48.3 0-23.7-9.1-43.5-21.4-49-1.7-15.6-4.7-30.3-11.7-40.3a89.6 89.6 0 0 0-17.7-20.8 53.4 53.4 0 0 0-37.3-3.6c-37.4-21.4-63-69.8-105.1-71.6z""/>
    <path 
      d=""M335.9 758c-20 5.5.5 14.9-30.8 14.5-33.5-.3-326.4-110.6-359-128.7-5-2.8-16.3 61.7-12.7 70.7 3.6 9 103.4 54.4 163.2 78 59.8 23.6 174 65.2 201.2 63.4C325 854.1 370.4 758 336 758z"" 
      style=""fill:#a00""/>
    <path 
      d=""M45.5 757.2 164 802M44.6 724.2l135.8 54.2"" 
      style=""fill:none;stroke:#000;stroke-width:13.34506607px;stroke-linecap:round;stroke-linejoin:miter""/>
    <path 
      d=""M-60.8 651.6a435 435 0 0 0-8 56.3l89.4 37.9-17.2-62.4-64.2-31.8zM234 765.4l-40.3 48.3c100.6 40.8 116 41.5 151.6 23.8 21.6-10.7 2-63.4-17.1-53.2-19.2 10.3-42.2-4.8-94.2-19z"" 
      style=""fill:url(#h)""/>
    <path 
      d=""M428.4 305c-44 12-160.5 61.3-169.4 93-4.3 15-51.5 118.6-56.2 126.5-4.8 7.8-130.3 77.3-175.5 157.1l56.2 20.2c45.8-69.8 160.5-140.6 173-151.6 12.6-11 44.2-125 57-145 22.4-35.3 143-85.9 173-93.5l1.8-.6a453.6 453.6 0 0 0-60-6.1zm111.9 17.7c-1.7.4-3.4.3-5 .6-62.6 14.8-151.9 61.5-170.5 93-8 13.5-56.4 143.1-61.2 151-4.7 7.8-108.8 74.3-154 161.4l63.5 22c45.8-77 134.8-151 147.4-162 12.6-11 40.9-129.6 52-150.4 20.7-39 120.1-87.8 183.4-98.5a576.5 576.5 0 0 0-55.6-17.1z"" 
      style=""fill:#ccc""/>
    <path 
      d=""M622.2 380.2c-13.6 0-49.5 6.6-38.9 18 15.8 16.7 35.3 64 45.9 92.3 7 18.5 65.2-28 70.6-38.8 8.2-16.3-64-71.5-77.6-71.5zm-381.3 14.3c-2.3 0-3.8.1-4.9.6-16 6.4-98.2 114-100.8 133.3-1.6 11 262.3 96.6 268.4 81.3 10.8-27.2 52.8-148.5 42.2-160.2-10.4-11.3-170.5-55.2-204.9-55zM551.6 409c-13.6 0-66.7 29.1-72.8 43.5-6 14-40.2 143.5-27 147.3 19 5.4 146.3-76.6 151.7-87.4 8.2-16.3-38.4-103.4-52-103.4z"" 
      style=""fill:url(#i)""/>
    <path 
      style=""color:#000;fill:#a00;fill-rule:nonzero;enable-background:accumulate"" 
      d=""M-72.4 772.7a50.6 50.6 0 0 0 17.1 24.5c103 71.7 222 110.3 343.7 135.7 9.3 1.6 18.8 1 28 0-2.6-29.6-14.8-63.5-16.4-43.4-2 24.7-29.9 19.6-52.6 16.5-59.3-8.2-274.7-95.9-319.8-133.3z""/>
    <path 
      d=""m29.5 781.6-1 48.1 135.2 52.7v-50L29.4 781.6z"" 
      style=""fill:#b3b3b3""/>
    <path 
      d=""m39 691.6 162.5 63.7"" 
      style=""fill:none;stroke:#000;stroke-width:13.34506607px;stroke-linecap:round;stroke-linejoin:miter""/>
    <path 
      d=""M764 458.4c-22.3 1.5-53.6 23.4-112.5 78.3-91.3 85.2-185.9 64.9-303.2 226.8-27.3 37.7 2.9 57.8-18.9 90.4-21.7 32.7-20.5 60 14 58.2 5.8-.3 21.3-9 40.3-21.4-.8-38 1-127.4 38.6-155.3 45.8-34 55.6 32.1 65.6 79.3 66-49.4 135.1-102 201-153.3 3.6-36.7 2.3-106 27.5-122.9 35-23.3 47.6 19 53.4 61.4 7.4-5.6 13.1-11.5 19.3-16.1a70.5 70.5 0 0 0 24.5-33v-.7c-.2-23.3-9.2-42.8-21.4-48.3-1.6-15.6-4.7-30.3-11.6-40.3-5-2.3-10.6-3.5-16.5-3z"" 
      style=""fill:#6d0000""/>
    <path 
      d=""M-60.8 651.6a435 435 0 0 0-8 56.3l16.6 7.3c3.2-23.6 7.5-41.8 11-53.8l-19.6-9.8zm392.6 131.5c-1.2.2-2.5.6-3.7 1.2-9.5 5-19.9 3.5-34.2-.6a261.2 261.2 0 0 0-14.7 60.5c30 7.5 44.6 4 66-6.7 20.2-10 4.4-57-13.4-54.4z"" 
      style=""fill:#ff9e00""/>
    <path 
      d=""M622.2 380.2c-13.6 0-49.8 6.3-39.1 17.7 33.1 7 73.4 19.5 105.7 30.6-19.3-21.8-57.1-48.3-66.6-48.3z"" 
      style=""fill:url(#j)""/>
    <path 
      d=""M240.7 394.2c-2.3 0-3.8.2-5 .7-16 6.3-98.2 114-100.8 133.2 111.5-62.3 150.8-91.6 182-119.8-33.4-8.2-63.5-14.1-76.2-14z"" 
      style=""fill:url(#k)""/>
    <path 
      d=""M-64 729.2c5.3-2.9 160.5 68.3 154 68.9-38.8 3.5-175.4-57.4-154-69z"" 
      style=""fill:#f55""/>
    <path 
      d=""M371.5 331.3c-6.6.4-13.3 2-20.8 3.6-33.7 15.4-67.5 33.3-83.1 49.5 9.7 3.6 28.1 6.9 53.2 12.3 18.7-19.1 58.9-40.6 96-57.5a83.1 83.1 0 0 0-33.7-8c-3.6 0-7.6-.2-11.6 0zm71 27.5c-31.5 16-58.7 34.4-72.2 50.1a770.6 770.6 0 0 1 52 16.5c8.8-9.7 21.9-19.8 36.6-29.3a81 81 0 0 0-16.5-37.3zm-316.2 220c-32 24.4-66.9 55.1-89.9 88.1 16.2 7.8 35.2 15.3 55 23.3 24.6-32.3 61.9-63.5 94.8-88.7a187.2 187.2 0 0 0-59.9-22.6zm101 52.7c-25 23.3-50.7 52-69.8 83.7a2270 2270 0 0 0 64.8 22 517.8 517.8 0 0 1 45.9-59.3 273 273 0 0 0-41-46.4z"" 
      style=""fill:#fff""/>
    <path 
      d=""M631.1 532.2c8.6 49 12.9 111 15.8 169.9 10.5-34.4 10.7-123.3-15.8-169.9z"" 
      style=""fill:#a00""/>
    <path 
      d=""M563 396.1c59.9 105.6 72.6 148.1 82.3 302.3C659.9 571.5 617.9 460 563 396z"" 
      style=""fill:#2b0000""/>
    <path 
      d=""M460.2 642.1c22.2 56.2 40 120 38.4 172.6 13.2-48-4.7-142.3-38.4-172.6z"" 
      style=""fill:#a00""/>
    <path 
      d=""M439.2 613a485.8 485.8 0 0 1 59.1 194.3c7-75.1-21.9-151.4-59.1-194.3z"" 
      style=""fill:#2b0000""/>
    <path 
      d=""M449.3 622.8c10.7 17.8 62.6 26.8 66.2-5.4 3.6-32.2-39.4-35.8-59-25-31.3 17-7.2 28.6-7.2 30.4z"" 
      style=""fill:red""/>
    <path 
      d=""M449.3 622.8c9 18.3 66.1 27.7 66-8-.2-32.4-42.2-12.7-61.8-11.4-20.2 1.5-9.4 15.8-4.2 19.4z"" 
      style=""fill:#a00""/>
    <path 
      d=""M449.3 622.8c17.2 22.2 59.2 17.4 53.6-2.5-7-24.9-29.4 2.7-47.2-4.3-23-8.9-13.3 5.4-6.4 6.8z"" 
      style=""fill:#6d0000""/>
    <rect 
      style=""opacity:.5;color:#000;fill:#1a1a1a;fill-rule:nonzero;enable-background:accumulate"" 
      transform=""matrix(.96122 .27577 -.20533 .9787 0 0)"" rx=""5.3"" ry=""3.9"" height=""23.2"" width=""64.8"" y=""322.8"" x=""382.1""/>
    <path 
      d=""M29.6 784.4c-3.7 10.6-8.2 36.8-1.7 45.8 1.5-12.2 2-28.4 1.7-45.8z"" 
      style=""fill:#6d0000""/>
    <path 
      d=""M24.5 826.3c3.4 11.3 130.5 59 141.2 55.7-76.4-26.9-139-56.7-141.2-55.7z"" 
      style=""fill:#6d0000""/>
    <path 
      d=""M332 782.8c-1.1.2-3 .6-4.2 1.3-3.4 1.8-7 2.7-10.8 3a249.7 249.7 0 0 0-6 60.3 86.9 86.9 0 0 0 34.3-9.6c20.3-10 4.6-57.6-13.2-55z"" 
      style=""opacity:.5;color:#000;fill:#963500;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:6;marker:none;visibility:visible;display:inline;overflow:visible;enable-background:accumulate""/>
  </g>
</svg>"
KLBjhEvg,Integer to Roman Numerals v1.0.3.C,lduran,C,Thursday 14th of December 2023 07:44:11 PM CDT,"/**
 * Canonical : https://github.com/lduran2/my-leetcode-sync/blob/master/problems/integer_to_roman/solution.c
 * Given an integer, convert it to a roman numeral
 * represented by seven different symbols: I, V, X, L, C, D and M.
 * Language  : C with Basic inline x86 Assembly/GNU assembly syntax
 * By        : Leomar Durán <https://github.com/lduran2>
 * For       : https://leetcode.com/problems/integer-to-roman/
 *
 * CHANGELOG :
 *  v1.0.3 - 2023-12-14t20:27R
 *      implemented adding each numeral symbol
 *      clean up
 *
 *  v1.0.2 - 2023-12-14t15:31R
 *      correct placement for null terminator
 *      fixed endianness of symbol values
 *
 *  v1.0.1 - 2023-12-14t07:14R
 *      testing conversion table
 *
 *  v1.0.0 - 2023-12-14t06:25R
 *      testing character buffer 
 */

#include <stddef.h> /* for size_t */
#include <stdlib.h> /* for malloc */

/**
 * Conversion table between integers and Roman numerals symbols.
 * Each row represents a conversion by repeated subtraction from
 * highest to lowest.
 * All cells are bytes so each integer equivalents are represented as
 * 2 bytes = 1 word, which is big endian according to the endianness
 * of LeetCode's implementation of gcc (check your own version).
 * (So for this reason, integers > 255 are represented in the
 * hexadecimal base).
 *
 * column 0: the # of rows.
 * column 1: low  byte of integer equivalent of Roman numeral symbol.
 * column 2: high byte of integer equivalent ... .
 * column 3: number of characters in Roman numeral symbol.
 * column 4...: each successive character of the Roman numeral symbol,
 * the number of which is stored in column 3.
 */
char const ROMAN_TABLE[]
  = {13, /* 1000 */ 0xE8, 0x3, 1, 'M',
         /*  900 */ 0x84, 0x3, 2, 'C', 'M',
         /*  500 */ 0xF4, 0x1, 1, 'D',
         /*  400 */ 0x90, 0x1, 2, 'C', 'D',
             100,           0, 1, 'C',
              90,           0, 2, 'X', 'C',
              50,           0, 1, 'L',
              40,           0, 2, 'X', 'L',
              10,           0, 1, 'X',
               9,           0, 2, 'I', 'X',
               5,           0, 1, 'V',
               4,           0, 2, 'I', 'V',
               1,           0, 1, 'I',
    }; /* end ROMAN_TABLE */

/**
 * The size of ""MMMDCCCLXXXVIII"" (3888) the longest number in [1..3999]
 * in Roman numerals symbols plus the null terminator.
 */
size_t const MAX_ROMAN_LEN = 16;

/**
 * Converts the integer $num to a Roman numeral.
 * This function creates the Roman numeral string.
 * @param num: int[1..3999] = to convert to Roman numerals
 * @return: array[2..16]<char> = $num in Roman numerals
 * @see #MAX_ROMAN_LEN
 * @see #addNumerals
 */ 
char* intToRoman(int num) {
    /* for adding Roman numerals */
    char *addNumerals(char *, char const *, int);
    /* buffer for roman numerals */
    char *roman = addNumerals(malloc(MAX_ROMAN_LEN), ROMAN_TABLE, num);
    return roman;
} /* end intToRoman(int) */

/**
 * Adds the numeral representation of the integer $num, translated
 * according to the given conversion @table character, to buffer @cbuf.
 * @param cbuf %rdi: char * = to contain $num as numerals
 * @param table %rsi: char const * = by which to convert $num
 * @param num %rdx: int = to convert and add to @cbuf
 * @return @cbuf
 * @see #intToRoman
 */
__attribute__((naked))
char *addNumerals(char *cbuf, char const *table, int num) {
    __asm__(
        "".extern addSymbol;""    /* for adding each numeral symbol */

        ""push %rdi;""            /* store %rdi for return */
        ""push %rbx;""            /* store %rbx for use as symbol size */

        /* for each symbol row in the conversion table */ 
        ""movzb (%rsi), %rcx;""   /* load the number of symbols */
        ""inc  %rsi;""            /* first symbol row */
    ""numeral_table_loop:""
        ""movzw 0(%rsi), %rax;""  /* %rax := value of symbol */
        ""movzb 2(%rsi), %rbx;""  /* %rbx :=  size of symbol */
        /* if (num < *table) then skip_numeral_symbol */
        ""sub  %rax, %rdx;""
        ""jl   skip_numeral_symbol;""
        ""call addSymbol;""       /* otherwise add the symbol */
        ""add  %rbx, %rdi;""      /* advance cbuf */
        ""jmp  numeral_table_loop;""  /* jump without dec rcx */
    ""skip_numeral_symbol:""
        ""add  %rax, %rdx;""      /* recover %rdx from if-subtract */
        /* next symbol row */
        ""add  %rbx, %rsi;""
        ""add    $3, %rsi;""      /* value word length + size byte */
        ""loop numeral_table_loop;""
    ""end_numeral_table_loop:""

        ""movb $0, (%rdi);""      /* null terminate */

        ""pop  %rbx;""            /* restore %rbx */
        ""pop  %rdi;""            /* restore %rdi for return */
        ""mov  %rdi, %rax;""      /* return original @cbuf */
        ""ret;""
    );
} /* end addNumerals(char *, char const *, int) */

/**
 * Adds the symbol in the given @row to buffer @cbuf.
 * @param cbuf %rdi: char * = to contain $num as numerals
 * @param row %rsi: char const * = whose symbol to add (from address of
 * value)
 */
__attribute__((naked))
void addSymbol(char *cbuf, char const *row) {
    __asm__(
        /* new call frame */
        ""push %rdi;""
        ""push %rsi;""
        ""push %rcx;""
        ""push %rbx;""

        /* for each symbol character */
        ""movzb 2(%rsi), %rcx;""      /* load symbol size into count */
    ""numeral_symbol_loop:""
        ""movb 2(%rsi,%rcx), %bl;""   /* load character from symbol row */
        ""movb %bl, -1(%rdi,%rcx);""  /* store in buffer */
        ""loop numeral_symbol_loop;""
    ""end_numeral_symbol_loop:""

        /* old call frame */
        ""pop  %rbx;""
        ""pop  %rcx;""
        ""pop  %rsi;""
        ""pop  %rdi;""
        ""ret;""
    );
} /* end addSymbol(char *, char const *) */"
eJcQwXJP,gig,idnah,Python,Thursday 14th of December 2023 06:33:00 PM CDT,"if GigCET <= GigCD:
    GigCET = GigCET + 7"
HLi4hbab,"AoC 2023, day 14, part 1 (dc)",musifter,Bash,Thursday 14th of December 2023 06:29:41 PM CDT,"# Command: perl -pe's/(.)/$1 /g;y/.O#/012/' <input | dc -fpart1.dc

?
zdsn                                # n = size; i = n
[
    d 2 r:a                         # a(i) = 2
    1- d0<I
] dsIx
+                                   # clear i (+0)

[
    [
        z d;a 3* 3R+ r:a            # a(z) = 3*a(z) + top
        z0<L
    ] dsLx
    ? z0<M
] dsMx

[ lc1+sc ] sC

# Score: i h a(i) -> i h a(i)
[
    rd lcd                          # a(i) h  h c c
    3R2* r- 1+ *                    # a(i) h  c*(2h-c+1)
    2/
    ls+ss
    0sc
    r
] sS

ln                                  # i=n
[
    d;a 0r                          # i h=0 a(i)
    [
        3~                          # h a(i)=a(i)/3 val=a(i)%3
        d 1=C                       # count if val == 1
          2=S                       # score if val == 0; stack: h a(i)
        r1+r                        # h++
        d 0<H                       # loop if a(i) non-zero
    ] dsHx

    # stack: i h 0
    *+                              # clear 2 (+ 0*h)
    1- d0<I
] dsIx

[Part 1: ]nlsp
"
5j5ZZ9Qf,Home Assistant Core,LightMoon,Bash,Thursday 14th of December 2023 06:18:38 PM CDT,"2023-12-15 10:56:35.346 WARNING (SyncWorker_3) [homeassistant.loader] We found a custom integration airtouch5 which has not been tested by Home Assistant. This component might cause stability problems, be sure to disable it if you experience issues with Home Assistant
2023-12-15 10:56:35.350 WARNING (SyncWorker_3) [homeassistant.loader] We found a custom integration grott which has not been tested by Home Assistant. This component might cause stability problems, be sure to disable it if you experience issues with Home Assistant
2023-12-15 10:56:35.352 WARNING (SyncWorker_3) [homeassistant.loader] We found a custom integration hacs which has not been tested by Home Assistant. This component might cause stability problems, be sure to disable it if you experience issues with Home Assistant
2023-12-15 10:56:55.924 ERROR (MainThread) [homeassistant.components.mqtt.mixins] Error 'invalid template (TemplateSyntaxError: expected token 'end of print statement', got '_voltage') for dictionary value @ data['value_template']' when processing MQTT discovery message topic: 'homeassistant/sensor/grott/XGD6CM31UN_L1-2_voltage/config', message: '{'name': 'Phase1-2 Voltage', 'unique_id': 'grott_XGD6CM31UN_L1-2_voltage', 'state_topic': 'homeassistant/grott/XGD6CM31UN/state', 'device': {'identifiers': ['XGD6CM31UN'], 'name': 'XGD6CM31UN', 'manufacturer': 'GrowWatt'}, 'value_template': '{{ value_json.L1-2_voltage | float / 10 }}', 'state_class': 'measurement', 'device_class': 'voltage', 'unit_of_measurement': 'V', 'platform': 'mqtt'}'
2023-12-15 10:56:55.925 ERROR (MainThread) [homeassistant.components.mqtt.mixins] Error 'invalid template (TemplateSyntaxError: expected token 'end of print statement', got '_voltage') for dictionary value @ data['value_template']' when processing MQTT discovery message topic: 'homeassistant/sensor/grott/XGD6CM31UN_L2-3_voltage/config', message: '{'name': 'Phase2-3 Voltage', 'unique_id': 'grott_XGD6CM31UN_L2-3_voltage', 'state_topic': 'homeassistant/grott/XGD6CM31UN/state', 'device': {'identifiers': ['XGD6CM31UN'], 'name': 'XGD6CM31UN', 'manufacturer': 'GrowWatt'}, 'value_template': '{{ value_json.L2-3_voltage | float / 10 }}', 'state_class': 'measurement', 'device_class': 'voltage', 'unit_of_measurement': 'V', 'platform': 'mqtt'}'
2023-12-15 10:56:55.926 ERROR (MainThread) [homeassistant.components.mqtt.mixins] Error 'invalid template (TemplateSyntaxError: expected token 'end of print statement', got '_voltage') for dictionary value @ data['value_template']' when processing MQTT discovery message topic: 'homeassistant/sensor/grott/XGD6CM31UN_L3-1_voltage/config', message: '{'name': 'Phase3-1 Voltage', 'unique_id': 'grott_XGD6CM31UN_L3-1_voltage', 'state_topic': 'homeassistant/grott/XGD6CM31UN/state', 'device': {'identifiers': ['XGD6CM31UN'], 'name': 'XGD6CM31UN', 'manufacturer': 'GrowWatt'}, 'value_template': '{{ value_json.L3-1_voltage | float / 10 }}', 'state_class': 'measurement', 'device_class': 'voltage', 'unit_of_measurement': 'V', 'platform': 'mqtt'}'
2023-12-15 10:56:56.136 ERROR (MainThread) [homeassistant] Error doing job: Task exception was never retrieved"
