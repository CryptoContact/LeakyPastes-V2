id,title,username,language,date,content
9cwLbNKT,2024-05-24_stats.json,rdp_snitch,JSON,Friday 24th of May 2024 07:15:08 PM CDT,"{
  ""ip"": {
    ""194.165.16.78"": 2,
    ""213.109.202.235"": 6,
    ""198.235.24.204"": 3,
    ""80.66.66.250"": 2,
    ""87.251.75.145"": 3,
    ""152.32.206.181"": 1,
    ""103.75.186.158"": 3,
    ""103.120.19.81"": 1,
    ""103.176.168.138"": 42,
    ""185.170.144.3"": 2,
    ""194.165.16.10"": 1,
    ""172.236.64.164"": 2,
    ""152.32.198.210"": 1,
    ""103.150.221.231"": 2,
    ""198.235.24.107"": 3,
    ""36.91.222.100"": 2,
    ""64.124.50.139"": 2,
    ""194.165.16.73"": 2,
    ""91.238.181.71"": 2,
    ""152.42.249.30"": 1,
    ""117.173.153.116"": 1,
    ""45.227.254.54"": 2,
    ""103.56.5.180"": 6,
    ""167.94.146.61"": 1,
    ""167.71.191.63"": 1,
    ""198.235.24.131"": 3,
    ""141.98.80.137"": 2,
    ""203.104.35.234"": 1,
    ""136.144.35.68"": 1,
    ""1.55.55.178"": 1,
    ""2.57.149.186"": 2,
    ""2.57.149.92"": 1,
    ""185.196.220.41"": 3,
    ""192.155.81.89"": 4,
    ""45.79.216.25"": 1,
    ""112.4.139.162"": 1,
    ""37.221.94.97"": 1,
    ""187.157.89.218"": 1,
    ""162.142.125.217"": 1,
    ""158.51.14.114"": 2,
    ""198.235.24.56"": 3,
    ""116.140.196.215"": 1
  },
  ""asn"": {
    ""AS48721"": 5,
    ""AS208312"": 9,
    ""AS396982"": 12,
    ""AS51765"": 2,
    ""AS208091"": 3,
    ""AS135377"": 2,
    ""AS135905"": 45,
    ""AS131939"": 1,
    ""AS197414"": 2,
    ""AS63949"": 7,
    ""AS140599"": 8,
    ""AS7713"": 2,
    ""AS6461"": 2,
    ""AS49434"": 2,
    ""AS14061"": 2,
    ""AS9808"": 1,
    ""AS267784"": 2,
    ""AS398705"": 1,
    ""AS43350"": 2,
    ""AS133774"": 1,
    ""AS396356"": 1,
    ""AS18403"": 1,
    ""AS208046"": 3,
    ""AS56046"": 1,
    ""AS49581"": 1,
    ""AS8151"": 1,
    ""AS398324"": 1,
    ""AS398465"": 2,
    ""AS4837"": 1
  },
  ""isp"": {
    ""Flyservers S.A."": 7,
    ""Red Byte LLC"": 9,
    ""Google LLC"": 12,
    ""Oy Crea Nova Hosting Solution Ltd"": 2,
    ""Xhost Internet Solutions LP"": 5,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Inet software one member company limited"": 3,
    ""IPS INC"": 1,
    ""VIETCLOUD"": 42,
    ""Akamai International B.V."": 2,
    ""Comfac Corporation"": 8,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Zayo Bandwidth"": 2,
    ""Datacenter location PAR1 France"": 2,
    ""DigitalOcean, LLC"": 2,
    ""China Mobile communications corporation"": 1,
    ""Censys, Inc."": 2,
    ""NForce Entertainment B.V."": 2,
    ""Fuzhou"": 1,
    ""Latitude.sh"": 1,
    ""FPT Telecom Company"": 1,
    ""ColocationX Ltd."": 3,
    ""Akamai Technologies, Inc."": 5,
    ""China Mobile Communications Corporation"": 1,
    ""Ferdinand Zink trading as Tube-Hosting"": 1,
    ""Uninet S.A. de C.V."": 1,
    ""Rackdog, LLC"": 2,
    ""China Unicom CHINA169 Network"": 1
  },
  ""org"": {
    ""Flyservers S.A"": 5,
    ""Chang Way Technologies Co. Limited"": 9,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhost Internet Solutions"": 5,
    ""Ucloud Information Technology"": 1,
    ""Inet software one member company limited"": 3,
    ""IPS Inc"": 1,
    ""VIET CLOUD TECHNOLOGY SERVICES COMPANY LIMITED, Group"": 42,
    ""Xhostis"": 2,
    ""Akamai Technologies, Inc."": 2,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Comfac Corporation"": 8,
    ""Telekomunikasi Indonesia"": 2,
    ""Microsoft Corporation"": 2,
    ""ThinkTech Technology Industrial CO. Limited"": 2,
    ""DigitalOcean, LLC"": 2,
    ""China Mobile"": 1,
    ""UAB Host Baltic"": 2,
    ""Censys, Inc."": 1,
    ""Cloud CDN"": 2,
    ""Chinanet GD"": 1,
    ""Panq B.V"": 1,
    ""Vietnam Internet Network Information Center"": 1,
    ""Makut Investments"": 3,
    ""Linode"": 5,
    ""China Mobile Communications Corporation"": 1,
    ""Tube-Hosting"": 1,
    ""Uninet S.A. de C.V."": 1,
    ""Censys Inc"": 1,
    ""AB E-Commerce, LLC"": 2,
    ""China United Network Communications Corporation Limited"": 1
  },
  ""regionName"": {
    ""Kaunas"": 5,
    ""Moscow"": 6,
    ""California"": 16,
    ""Uusimaa"": 2,
    ""North Holland"": 7,
    ""Virginia"": 6,
    ""Hanoi"": 45,
    ""Tokyo"": 1,
    ""Tamil Nadu"": 2,
    ""England"": 1,
    ""Davao Region"": 2,
    ""Jakarta"": 2,
    ""\u00cele-de-France"": 2,
    ""South West"": 1,
    ""Sichuan"": 1,
    ""Vilnius"": 2,
    ""Metro Manila"": 6,
    ""Hesse"": 2,
    ""New Jersey"": 2,
    ""Guangdong"": 1,
    ""B\u1eafc Ninh Province"": 1,
    ""Lesser Poland"": 3,
    ""Georgia"": 1,
    ""Jiangsu"": 1,
    ""Mexico City"": 1,
    ""Michigan"": 1,
    ""Illinois"": 2,
    ""Beijing"": 1
  },
  ""country"": {
    ""Lithuania"": 7,
    ""Russia"": 6,
    ""United States"": 28,
    ""Finland"": 2,
    ""The Netherlands"": 7,
    ""Vietnam"": 46,
    ""Japan"": 1,
    ""India"": 2,
    ""United Kingdom"": 1,
    ""Philippines"": 8,
    ""Indonesia"": 2,
    ""France"": 2,
    ""Singapore"": 1,
    ""China"": 4,
    ""Germany"": 2,
    ""Poland"": 3,
    ""Mexico"": 1
  },
  ""account"": {
    ""Test"": 20,
    ""HdCbFQisj"": 1,
    ""HSbJvN"": 1,
    ""zFbObX"": 1,
    ""Administr"": 11,
    ""Administrator"": 2,
    ""hello"": 61,
    ""ThshhKnnl"": 1,
    ""pBUTjK"": 1,
    ""xLYRRe"": 1,
    ""Domain"": 5,
    ""(empty)"": 7,
    ""vBYxLuXME"": 1,
    ""OBeCIt"": 1,
    ""CJPKVR"": 1,
    ""2zcok0ci"": 4,
    ""beio"": 1,
    ""JlyyaycuB"": 1,
    ""FoaqJv"": 1,
    ""nbDWoS"": 1
  },
  ""keyboard"": {
    ""Unknown"": 123
  },
  ""client_build"": {
    ""Unknown"": 123
  },
  ""client_name"": {
    ""Unknown"": 123
  },
  ""ip_type"": {
    ""Unknown"": 75,
    ""proxy"": 11,
    ""hosting"": 26,
    ""mobile"": 8,
    ""hosting & proxy"": 3
  }
}"
64qJCc1W,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Friday 24th of May 2024 07:14:14 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_450451.pdf

Working as of:
25 May 2024"
v5b27uT4,AI-GENERATE2.0.pyw,Najeebsk,Python,Friday 24th of May 2024 07:13:35 PM CDT,"import os
import numpy as np
from imageio.v2 import imread
import tkinter as tk
from tkinter import filedialog, ttk
from PIL import Image, ImageTk

header_len = 4 * 8  # uint32 bit length

def read_image(img_path):
    img = np.array(imread(img_path), dtype=np.uint8)
    orig_shape = img.shape
    return img.flatten(), orig_shape

def read_file(file_path):
    file_bytes = open(file_path, ""rb"").read()
    return np.unpackbits(file_bytes)

def decode_data(encoded_data):
    out_mask = np.ones_like(encoded_data)
    output = np.bitwise_and(encoded_data, out_mask)
    return output

def write_file(file_path, file_bit_array):
    bytes_data = np.packbits(file_bit_array)
    with open(file_path, 'wb') as f:
        f.write(bytes_data)

def browse_file():
    filename = filedialog.askopenfilename(initialdir=""/"", title=""Select Picture File"")
    if filename:
        original_entry_unhide.delete(0, tk.END)
        original_entry_unhide.insert(0, filename)
        show_original_image(filename)

def show_original_image(filename):
    original_image = Image.open(filename)
    original_image.thumbnail((400, 400))  # Resize if needed
    original_photo = ImageTk.PhotoImage(original_image)
    lbl.config(image=original_photo)
    lbl.image = original_photo

def browse_save_location():
    save_location = filedialog.asksaveasfilename(initialdir=""/"", title=""Select Save Location"", defaultextension="".jpg"")
    if save_location:
        save_entry_unhide.delete(0, tk.END)
        save_entry_unhide.insert(0, save_location)

def unhide_images():
    original_file = original_entry_unhide.get()
    save_file = save_entry_unhide.get()
    if not os.path.isfile(original_file):
        print(""Image file does not exist"")
        return

    encoded_data, shape_orig = read_image(original_file)
    data = decode_data(encoded_data)
    el_array = np.packbits(data[:header_len])
    extracted_len = el_array.view(np.uint32)[0]
    data = data[header_len:extracted_len + header_len]
    write_file(save_file, data)
    print(""Image decoded and saved"")

    # Simulate a progress bar effect
    progress = 0
    while progress <= 100:
        progress += 1
        unhide_progress_bar['value'] = progress
        root.update_idletasks()
        root.after(50)  # Adjust speed of progress bar

    # Load and display the saved image
    saved_image = Image.open(save_file)
    saved_image.thumbnail((400, 400))  # Resize if needed
    saved_photo = ImageTk.PhotoImage(saved_image)
    lbl2.config(image=saved_photo)
    lbl2.image = saved_photo

    # Display the saved image with a slow vertical effect
    for i in range(1, 101):
        lbl2.place(y=i)  # Update y position gradually
        root.update_idletasks()
        root.after(10)  # Adjust speed of vertical effect

root = tk.Tk()
root.geometry(""1000x660"")
root.title(""Najeeb Generate AI Images"")

# Input for Picture Selection
tk.Label(root, text=""Select Picture File:"").place(x=10, y=10)
original_entry_unhide = tk.Entry(root)
original_entry_unhide.place(x=120, y=10)
browse_button = tk.Button(root, text=""Browse"", command=browse_file)
browse_button.place(x=260, y=8)

# Input for Save Location
tk.Label(root, text=""Select Save Location:"").place(x=340, y=10)
save_entry_unhide = tk.Entry(root)
save_entry_unhide.place(x=470, y=10)
browse_save_button = tk.Button(root, text=""Browse"", command=browse_save_location)
browse_save_button.place(x=620, y=8)

# Button to unhide images
unhide_button = tk.Button(root, text=""Generate AI Image"", command=unhide_images, bg=""#6699FF"", fg=""white"")
unhide_button.place(x=800, y=8)

# Progress Bar
unhide_progress_bar = ttk.Progressbar(root, orient='horizontal', mode='determinate')
unhide_progress_bar.place(x=10, y=40, width=980)

# Frame for Original Image
f = tk.Frame(root, bd=3, bg=""#2c3e50"", width=500, height=640, relief=tk.GROOVE)
f.place(x=5, y=70)

lbl = tk.Label(f, bg=""#2c3e50"")
lbl.place(x=10, y=140)

# Frame for Generated AI Image
frame2 = tk.Frame(root, bd=3, width=500, height=640, relief=tk.GROOVE, bg=""#34495e"")
frame2.place(x=505, y=70)

lbl2 = tk.Label(frame2, bg=""#34495e"")
lbl2.place(x=10, y=100)

root.mainloop()
"
GQXPk15u,AI-GENERATE-RAR.pyw,Najeebsk,Python,Friday 24th of May 2024 07:11:27 PM CDT,"import os
import numpy as np
import imageio.v2 as imageio
import tkinter as tk
from tkinter import filedialog, ttk
from PIL import Image, ImageTk
import rarfile

header_len = 4 * 8  # uint32 bit length

def read_image(img_path):
    img = np.array(imageio.imread(img_path), dtype=np.uint8)
    orig_shape = img.shape
    return img.flatten(), orig_shape

def decode_data(encoded_data):
    out_mask = np.ones_like(encoded_data)
    output = np.bitwise_and(encoded_data, out_mask)
    return output

def write_file(file_path, file_bit_array):
    bytes_data = np.packbits(file_bit_array)
    with open(file_path, 'wb') as f:
        f.write(bytes_data)

def browse_rar_file():
    filename = filedialog.askopenfilename(initialdir=""/"", title=""Select RAR File"", filetypes=[(""RAR files"", ""*.rar"")])
    if filename:
        rar_entry.delete(0, tk.END)
        rar_entry.insert(0, filename)
        load_rar_file_images(filename)

def load_rar_file_images(filename):
    try:
        with rarfile.RarFile(filename) as rf:
            rf.setpassword(password_entry.get())  # Set the password for the RAR file
            file_list = rf.namelist()
            image_files = [file for file in file_list if file.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif'))]
            image_dropdown['values'] = image_files
            if image_files:
                image_dropdown.current(0)
                show_image_from_rar(filename, image_files[0])
    except Exception as e:
        print(f""Failed to read RAR file: {e}"")

def show_image_from_rar(filename, image_name):
    try:
        with rarfile.RarFile(filename) as rf:
            rf.setpassword(password_entry.get())  # Set the password for the RAR file
            rf.extract(image_name, path=""TEMP_DATA"")
            extracted_image_path = os.path.join(""TEMP_DATA"", image_name)
            show_original_image(extracted_image_path)
    except Exception as e:
        print(f""Failed to extract image from RAR file: {e}"")

def show_original_image(filename):
    try:
        original_image = Image.open(filename)
        original_image.thumbnail((400, 400))  # Resize if needed
        original_photo = ImageTk.PhotoImage(original_image)
        lbl.config(image=original_photo)
        lbl.image = original_photo
    except Exception as e:
        print(f""Failed to open image file: {e}"")

def browse_save_location():
    save_location = filedialog.asksaveasfilename(initialdir=""/"", title=""Select Save Location"", defaultextension="".jpg"")
    if save_location:
        save_entry_unhide.delete(0, tk.END)
        save_entry_unhide.insert(0, save_location)

def unhide_images():
    original_file = rar_entry.get()
    selected_image = image_dropdown.get()
    save_file = save_entry_unhide.get()
    password = password_entry.get()
    if not os.path.isfile(original_file):
        print(""RAR file does not exist"")
        return

    try:
        # Extract the selected image from the RAR file
        with rarfile.RarFile(original_file) as rf:
            rf.setpassword(password)  # Set the password for the RAR file
            rf.extract(selected_image, path=""TEMP_DATA"")
        extracted_image_path = os.path.join(""TEMP_DATA"", selected_image)
    except rarfile.BadRarFile:
        print(""Failed to extract RAR file. Possibly wrong password or corrupted file."")
        return

    # Proceed with the image decoding process
    encoded_data, shape_orig = read_image(extracted_image_path)
    data = decode_data(encoded_data)
    el_array = np.packbits(data[:header_len])
    extracted_len = el_array.view(np.uint32)[0]
    data = data[header_len:extracted_len + header_len]
    write_file(save_file, data)
    print(""Image decoded and saved"")

    # Simulate a progress bar effect
    progress = 0
    while progress <= 100:
        progress += 1
        unhide_progress_bar['value'] = progress
        root.update_idletasks()
        root.after(50)  # Adjust speed of progress bar

    # Load and display the saved image
    if os.path.isfile(save_file):
        try:
            saved_image = Image.open(save_file)
            saved_image.thumbnail((400, 400))  # Resize if needed
            saved_photo = ImageTk.PhotoImage(saved_image)
            lbl2.config(image=saved_photo)
            lbl2.image = saved_photo
        except Exception as e:
            print(f""Failed to open saved image: {e}"")

    # Display the saved image with a slow vertical effect
    for i in range(1, 101):
        lbl2.place(y=i)  # Update y position gradually
        root.update_idletasks()
        root.after(10)  # Adjust speed of vertical effect


root = tk.Tk()
root.geometry(""1000x660"")
root.title(""Najeeb Generate AI Images"")

# Password Entry
tk.Label(root, text=""Password:"").place(x=10, y=10)
password_entry = tk.Entry(root, show=""*"")
password_entry.place(x=80, y=10)

# Input for RAR File Selection
tk.Label(root, text=""Select RAR File:"").place(x=260, y=10)
rar_entry = tk.Entry(root)
rar_entry.place(x=360, y=10)
browse_rar_button = tk.Button(root, text=""Browse"", command=browse_rar_file)
browse_rar_button.place(x=520, y=8)

# Dropdown for RAR file images
tk.Label(root, text=""Select Image from RAR:"").place(x=600, y=10)
image_dropdown = ttk.Combobox(root, state=""readonly"")
image_dropdown.place(x=730, y=10)
image_dropdown.bind(""<<ComboboxSelected>>"", lambda e: show_image_from_rar(rar_entry.get(), image_dropdown.get()))

# Input for Save Location
tk.Label(root, text=""Select Save Location:"").place(x=10, y=50)
save_entry_unhide = tk.Entry(root)
save_entry_unhide.place(x=150, y=50)
browse_save_button = tk.Button(root, text=""Browse"", command=browse_save_location)
browse_save_button.place(x=310, y=48)

# Button to unhide images
unhide_button = tk.Button(root, text=""Generate AI Image"", command=unhide_images, bg=""#6699FF"", fg=""white"")
unhide_button.place(x=400, y=48)

# Progress Bar
unhide_progress_bar = ttk.Progressbar(root, orient='horizontal', mode='determinate')
unhide_progress_bar.place(x=10, y=80, width=980)

# Frame for Original Image
f = tk.Frame(root, bd=3, bg=""#2c3e50"", width=500, height=640, relief=tk.GROOVE)
f.place(x=5, y=110)

lbl = tk.Label(f, bg=""#2c3e50"")
lbl.place(x=10, y=140)

# Frame for Generated AI Image
frame2 = tk.Frame(root, bd=3, width=500, height=640, relief=tk.GROOVE, bg=""#34495e"")
frame2.place(x=505, y=110)

lbl2 = tk.Label(frame2, bg=""#34495e"")
lbl2.place(x=10, y=100)


root.mainloop()
"
kxCewum0,whoami,Python253,Python,Friday 24th of May 2024 06:58:39 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: whoami.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    - This script retrieves the username of the current user on the system.
    
Functions:
    - get_user_info(): Retrieves information about the current user on the system.

Requirements:
    - Python 3.x

Usage:
    - Run the script with the Python command:
    
              python whoami.py

Additional Notes:
    - This script uses the getpass module to retrieve the current user's username.
    - It is compatible with Python 3.x.
    - Running the script without any arguments will print the current user's username.
""""""

import getpass

def get_user_info():
    """"""
    Retrieve information about the current user on the system.

    Returns:
        dict: A dictionary containing the following user information:
            - 'Username': The current user's username.
    """"""
    # Get current user's username
    username = getpass.getuser()

    return {
        ""Username"": username
    }

if __name__ == ""__main__"":
    user_info = get_user_info()
    for key, value in user_info.items():
        print(f""{key}: {value}"")
"
7NBuE8qK,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🎁,ssss50w,GetText,Friday 24th of May 2024 06:40:15 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
25 May 2024"
qePwvtiw,Untitled,vonschutter,Bash,Friday 24th of May 2024 06:38:07 PM CDT,"
rtd_oem_release_upgrade() {
# Description: Function to attempt to perform a release upgade on several Linux distributions.
# Supported distributions are: Ubuntu, Pop! OS, Debian, SUSE, and fedora.
# This function does not require any arguments but will respect ""interactive"". The ""interactive""
# parameter will force the function to pause if a supported distribution is not found.
# It will check for a supported distribution and attempt the upgrade if possible.
# If a supported distribution is not detected the function will do nothing.
#
# Globals:
# Arguments: None
# Outputs:
# Returns:
# Usage:  (in a script):
#  rtd_oem_release_upgrade [ string ]
#
# [ string ] : interactive
#
# End of Documentation


	ensure_admin
	local interactive=$1
	local distro=$(hostnamectl | grep -Eo 'Ubuntu|Pop!_OS|Debian|SUSE|fedora|TUXEDO|Zorin')

	case $distro in
		""Ubuntu""|""Pop!_OS""|""TUXEDO|Zorin"")
			# Common update steps for Ubuntu and derivativres
			write_warning ""This may take some time, please be patient!""
			apt clean && apt update -m ; dpkg --configure -a ; apt install -f ; apt dist-upgrade ; apt autoremove --purge
			if [[ ""$interactive"" == ""interactive"" ]]; then
				$RTD_GUI --title ""$distro Distribution Upgrade Confirmation"" --yesno ""Please confirm that you want to upgrade to the next version of $distro. This may take some time, please be patient!"" 8 78
				case $? in
				0 ) do-release-upgrade | tee -a ${_LOGFILE} ;;
				1|255 ) return 1 ;;
				esac
			else
				do-release-upgrade --quiet | tee -a ${_LOGFILE}
			fi
		;;
		""Debian"")
			write_error ""Debian does not provide an upgrade tool between major releases. Please use the manual upgrade method.""
			return 1
		;;
		""SUSE"")
			# SUSE upgrade steps
			if current_version=$(cat /etc/os-release | grep VERSION_ID | cut -d '""' -f2) ; then
				write_status ""Current SUSE version: $current_version""
			else
				write_error ""unable to query /etc/os-release for current version of SUSE! ""
				return 1
			fi

			if latest_version=$(curl -s https://download.opensuse.org/distribution/openSUSE-current/iso/ | grep -Eo '1[5-9]\.[0-9]|20\.[0-9]+' | sort -V | tail -n1) ; then
				write_status ""Latest SUSE version: $latest_version""
			else
				write_error ""unable to query opensuse.org for latest version of SUSE! Check access to internet and try again.""
				return 1
			fi

			if [ ""$(printf '%s\n' ""$current_version"" ""$latest_version"" | sort -V | head -n1)"" != ""$current_version"" ]; then
				write_status ""A newer version of SUSE is available: $latest_version""
				write_warning ""This REALLY may take some time, please be patient!""
				write_information ""These are the current repositories:""
				{
					zypper repos --uri
					zypper modifyrepo --enable repo-update
					zypper repos --uri
					zypper refresh
				} | tee -a ${_LOGFILE}

				write_status ""Checking if it is possible to upgrade to ${SUSE_VER}""
				if zypper --releasever=""${SUSE_VER}"" lr -u ; then
					zypper --releasever=""${SUSE_VER}"" ref
					write_status ""Attempting upgrade of system now...""
					zypper --releasever=""${SUSE_VER}"" dup --force-resolution
					wait
					[[ ""$interactive"" == ""interactive"" ]] && read -p ""$ERRMSG: Press  [ ENTER ] to REBOOT:""
					reboot
				else
					write_error ""It is not possible to upgrade to Open Suse ${SUSE_VER} since there does not appear to be a release server available for ${SUSE_VER}""
					[[ ""$interactive"" == ""interactive"" ]] && read -p ""$ERRMSG: Press  [ ENTER ] to continue:""
				fi
			else
				write_information ""You are using the latest version of SUSE: $current_version""
				[[ ""$interactive"" == ""interactive"" ]] && read -p ""$ERRMSG: Press  [ ENTER ] to continue:""
			fi
		;;
		""fedora"")
			# Fedora upgrade steps
			if [[ ""$interactive"" == ""interactive"" ]]; then
				latest_version=$(curl -s https://dl.fedoraproject.org/pub/fedora/linux/releases/ | cut -d' ' -f5 |grep -Eo '[0-9][5-9]' | sort -V | tail -n1)
				releasever=$($RTD_GUI --title ""Fedora Distribution Upgrade Confirmation"" \
					--inputbox ""Please enter the Fedora version you want to upgrade to. Latest version is . Current version: $latest_version $(hostnamectl | grep -oP '(?<=Operating System: Fedora\s)\d+')\nOnly numbers are valid."" 10 78 3>&1 1>&2 2>&3)
			else
				releasever=$(curl -s https://dl.fedoraproject.org/pub/fedora/linux/releases/ | cut -d' ' -f5 |grep -Eo '[0-9][5-9]' | sort -V | tail -n1)
			fi

			# Validate input
			if [[ ! $releasever =~ ^[0-9]+$ ]]; then
				write_error ""Invalid version number. Upgrade aborted.""
				return 1
			fi

			# Upgrade process
			write_status ""Starting upgrade process for Fedora. This may take some time.""
			{
				dnf clean all
				dnf upgrade --refresh -y
				dnf install dnf-plugin-system-upgrade -y
				if ! dnf system-upgrade download --refresh --releasever=""${releasever}""; then
					write_error ""Failed to download system upgrade packages.""
					return 1
				fi
			} | tee -a ${_LOGFILE}

			# Confirmation for reboot
			if [[ ""$interactive"" == ""interactive"" ]]; then
				read -p ""$ERRMSG: Press [ ENTER ] to REBOOT and install the upgrade:""
			fi

			# Rebooting to apply upgrade
			dnf system-upgrade reboot
			return $?
		;;
		*)
		system::log_item ""This distribution is not supported for release upgrade.""
		[[ ""$interactive"" == ""interactive"" ]] && read -p ""This distribution is not supported. Press [Enter] key to return to menu.""
		return 1
		;;
	esac
	return

}
"
uPtMj8N3,💰G2A.com Free Gift Card Guide MAY 2024 FIX🎉,sayid83,Python,Friday 24th of May 2024 06:37:41 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Steam gift cards & everything else offered. 
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:

https://drive.google.com/file/d/1hT6jDYLXG3Fs_TjIlNYzcppn2Hj0nBzR/view?7394042

Working as of:

25 May 2024"
w3e7vgBY,system_info_collector,Python253,Python,Friday 24th of May 2024 06:26:18 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: system_info_collector.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    - This script collects various system information such as CPU, memory, disk, GPU, and system details.
    - It then formats the collected information as plain text and optionally saves it to a text file.

Requirements:
    - Python 3.x
    - psutil
    - GPUtil

Functions:
    - get_cpu_info():
        Retrieves CPU information.
    - get_memory_info():
        Retrieves memory information.
    - get_disk_info():
        Retrieves disk information.
    - get_gpu_info():
        Retrieves GPU information.
    - get_system_info():
        Retrieves system information.
    - format_data_as_text(data):
        Formats collected system information as plain text.
    - main():
        Main function to collect and save system information.

Usage:
    - Run the script.
    - Follow the on-screen prompts to save the information to a text file if desired.

Additional Notes:
    - Ensure that 'psutil' and 'GPUtil' libraries are installed.
    - The script may take some time to collect system information depending on the system's configuration.
""""""

import psutil
import GPUtil
import os

def get_cpu_info():
    """"""Retrieve CPU information.

    Returns:
        tuple: A tuple containing a dictionary with CPU information and a boolean indicating success.
    """"""
    try:
        cpu_info = {
            ""Physical Cores"": psutil.cpu_count(logical=False),
            ""Total Cores"": psutil.cpu_count(logical=True),
            ""Max Frequency (MHz)"": psutil.cpu_freq().max,
            ""Min Frequency (MHz)"": psutil.cpu_freq().min,
            ""Current Frequency (MHz)"": psutil.cpu_freq().current,
            ""CPU Usage per Core (%)"": psutil.cpu_percent(percpu=True),
            ""Total CPU Usage (%)"": psutil.cpu_percent()
        }
        return cpu_info, True
    except Exception as e:
        return str(e), False

def get_memory_info():
    """"""Retrieve memory information.

    Returns:
        tuple: A tuple containing a dictionary with memory information and a boolean indicating success.
    """"""
    try:
        svmem = psutil.virtual_memory()
        memory_info = {
            ""Total Memory (bytes)"": svmem.total,
            ""Available Memory (bytes)"": svmem.available,
            ""Used Memory (bytes)"": svmem.used,
            ""Memory Usage (%)"": svmem.percent
        }
        return memory_info, True
    except Exception as e:
        return str(e), False

def get_disk_info():
    """"""Retrieve disk information.

    Returns:
        tuple: A tuple containing a list of dictionaries with disk information for each partition and a boolean indicating success.
    """"""
    try:
        partitions = psutil.disk_partitions()
        disk_info = []
        for partition in partitions:
            partition_info = {
                ""Device"": partition.device,
                ""Mountpoint"": partition.mountpoint,
                ""File System Type"": partition.fstype
            }
            try:
                partition_usage = psutil.disk_usage(partition.mountpoint)
                partition_info.update({
                    ""Total Size (bytes)"": partition_usage.total,
                    ""Used Size (bytes)"": partition_usage.used,
                    ""Free Size (bytes)"": partition_usage.free,
                    ""Usage (%)"": partition_usage.percent
                })
            except PermissionError:
                continue
            disk_info.append(partition_info)
        return disk_info, True
    except Exception as e:
        return str(e), False

def get_gpu_info():
    """"""Retrieve GPU information.

    Returns:
        tuple: A tuple containing a list of dictionaries with GPU information for each GPU and a boolean indicating success.
    """"""
    try:
        gpus = GPUtil.getGPUs()
        gpu_info = []
        for gpu in gpus:
            gpu_info.append({
                ""ID"": gpu.id,
                ""Name"": gpu.name,
                ""Driver Version"": gpu.driver,
                ""Total Memory (MB)"": gpu.memoryTotal,
                ""Free Memory (MB)"": gpu.memoryFree,
                ""Used Memory (MB)"": gpu.memoryUsed,
                ""GPU Load (%)"": gpu.load * 100,
                ""Temperature (C)"": gpu.temperature
            })
        return gpu_info, True
    except Exception as e:
        return str(e), False

def get_system_info():
    """"""Retrieve system information using 'systeminfo' command.

    Returns:
        tuple: A tuple containing the system information as a string and a boolean indicating success.
    """"""
    try:
        system_info = os.popen('systeminfo').read()
        return system_info, True
    except Exception as e:
        return str(e), False

def format_data_as_text(data):
    """"""Format system information data as plain text.

    Args:
        data (dict): A dictionary containing various system information.

    Returns:
        str: Formatted system information data as plain text.
    """"""
    formatted_data = []

    def add_section(title, info, success):
        formatted_data.append(f""{title}\n"" + ""=""*len(title) + ""\n"")
        if success:
            if isinstance(info, dict):
                for key, value in info.items():
                    formatted_data.append(f""{key}: {value}"")
            else:
                formatted_data.append(info)
        else:
            formatted_data.append(f""Error: {info}"")
        formatted_data.append(""\n"")

    add_section(""CPU Information"", *data[""cpu_info""])
    add_section(""Memory Information"", *data[""memory_info""])
    
    formatted_data.append(""Disk Information\n"" + ""=""*15 + ""\n"")
    for idx, disk in enumerate(*data[""disk_info""]):
        formatted_data.append(f""Disk {idx + 1}\n"" + ""-""*6)
        for key, value in disk.items():
            formatted_data.append(f""{key}: {value}"")
        formatted_data.append(""\n"")
    
    formatted_data.append(""GPU Information\n"" + ""=""*14 + ""\n"")
    for idx, gpu in enumerate(*data[""gpu_info""]):
        formatted_data.append(f""GPU {idx + 1}\n"" + ""-""*5)
        for key, value in gpu.items():
            formatted_data.append(f""{key}: {value}"")
        formatted_data.append(""\n"")
    
    add_section(""System Information"", *data[""system_info""])

    return ""\n"".join(formatted_data)

def main():
    """"""Main function to collect and save system information.""""""
    print(""\n"" + ""-"" * 60 + ""\n\t    Welcome To The System Info Collector\n\n[This may take some time to collect your system information]\n\n\t        Thank you for your patience\n"" + ""-"" * 60)
    
    data = {
        ""cpu_info"": get_cpu_info(),
        ""memory_info"": get_memory_info(),
        ""disk_info"": get_disk_info(),
        ""gpu_info"": get_gpu_info(),
        ""system_info"": get_system_info()
    }
    
    print(""\n\t       System information collected:\n"")
    for info_name, (_, success) in data.items():
        status = ""Success"" if success else ""Failed""
        print(f""\t       - {info_name.ljust(18)}: {status}"")

    # Check if the user wants to save the data
    save = input(""\nWould you like to save this info to a text file? (y/n): "").strip().lower()
    if save == 'y':
        file_name = ""system_info.txt""
        formatted_text = format_data_as_text(data)
        with open(file_name, ""w"", encoding='utf-8') as file:
            file.write(formatted_text)
        print(f""\nFILE: {{{file_name}}} has been saved in the cwd."")
        print(""\n"" + ""-"" * 60 + ""\n\t       Exiting Program...   Goodbye!\n"" + ""-"" * 60 + ""\n"")
    else:
        print(""\n"" + ""-"" * 60 + ""\n\t       Exiting Program...   Goodbye!\n"" + ""-"" * 60 + ""\n"")

if __name__ == ""__main__"":
    main()
"
zTULMcRA,🔥G2A.com Free Gift Card Guide MAY 2024 FIX🚀,ColtM4A2,GetText,Friday 24th of May 2024 06:25:45 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Steam gift cards & everything else offered. 
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:

https://drive.google.com/file/d/1hT6jDYLXG3Fs_TjIlNYzcppn2Hj0nBzR/view?1322190

Working as of:

25 May 2024"
iCFfaz6L,邀您一起看：云口令,miscln,JavaScript,Friday 24th of May 2024 06:04:59 PM CDT,"海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥云口令@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5LqR5Y+j5LukXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eVwiLFwiY29sX3R5cGVcIjpcIng1X3dlYnZpZXdfc2luZ2xlXCIsXCJmaW5kX3J1bGVcIjpcImpzOnNldFJlc3VsdChbe1xcbiAgICB1cmw6XFxcImh0dHBzOi8veGlhb21pYW5hby5sYW56b3VtLmNvbS9pSW5OMzF5cTlqcGFcXFwiLFxcbmRlc2M6XFxcIjEwMCUmJmZsb2F0XFxcIixcXG5leHRyYTp7Y2FuQmFjazogdHJ1ZX1cXG59XSk7XCIsXCJncm91cFwiOlwiXCJ9IiwidGl0bGUiOiLkupHlj6Pku6QifQ==


https://t.me/israelpolice_bot
https://pastebin.com/cNec6hpN"
PFPNj5zX,uu,mrWhiskasss,Lua,Friday 24th of May 2024 06:02:40 PM CDT,"--[[

Создано командой SOCC company
Nightmare_Night

P.S. Программа написана на скорую руку
Просьба тапками не кидаться

P.S.S. Функция получения времени хост-машины была взята из API ECS

]]--

local component = require(""component"")
local term = require(""term"")
local event = require(""event"")
local fs = require(""filesystem"")

local gpu = component.gpu

local LOG_PATH = ""chat_log.txt""

-- Конвертирует строку в массив
function stringToArray(text)
    t = {}
    text:gsub(""."",function(c) table.insert(t,c) end)
    return t
end

--Получить текущее реальное время компьютера, хостящего сервер майна
function getHostTime(timezone)
    timezone = timezone or 2
    local file = io.open(""/HostTime.tmp"", ""w"")
    file:write("""")
    file:close()
    local timeCorrection = timezone * 3600
    local lastModified = tonumber(string.sub(fs.lastModified(""/HostTime.tmp""), 1, -4)) + timeCorrection
    fs.remove(""/HostTime.tmp"")
    local year, month, day, hour, minute, second = os.date(""%Y"", lastModified), os.date(""%m"", lastModified), os.date(""%d"", lastModified), os.date(""%H"", lastModified), os.date(""%M"", lastModified), os.date(""%S"", lastModified)
    return tonumber(day), tonumber(month), tonumber(year), tonumber(hour), tonumber(minute), tonumber(second)
end

-- Получет настоящее время, стоящее на Хост-машине
function real_time()
    local time = {getHostTime(3)}
    local text = string.format(""%02d:%02d:%02d"", time[4], time[5], time[6])
    return text
end

-- Проверяет является ли текст окрашенным
function isColored(text)
    for pos, i in pairs(stringToArray(text)) do
        if (i ~= ""&"") then
            if (i ~= "" "") then
                return false
            end
        else
            return true
        end
    end

    return true
end

-- Проверяет в глобальном ли чате написано сообщение
function isGlobal(text)
    for pos, i in pairs(stringToArray(text)) do
        if (i ~= ""!"") then
            if (i ~= "" "") then
                return false
            end
        else
            return true, pos
        end
    end
    return false
end

-- Делит строку на части
function split(str, pat)
    local t = {}
    local fpat = ""(.-)"" .. pat
    local last_end = 1
    local s, e, cap = str:find(fpat, 1)
    while s do
        if s ~= 1 or cap ~= """" then
            table.insert(t,cap)
        end
        last_end = e+1
        s, e, cap = str:find(fpat, last_end)
    end
    if last_end <= #str then
        cap = str:sub(last_end)
        table.insert(t, cap)
    end
    return t
end

-- Устанавливает цвет шрифта в зависимости от патерна
function setColor(num)
    if (num == ""0"") then
        gpu.setForeground(0x333333)
    end

    if (num == ""1"") then
        gpu.setForeground(0x000099)
    end

    if (num == ""2"") then
        gpu.setForeground(0x006600)
    end

    if (num == ""3"") then
        gpu.setForeground(0x006666)
    end

    if (num == ""4"") then
        gpu.setForeground(0x660000)
    end

    if (num == ""5"") then
        gpu.setForeground(0x660066)
    end

    if (num == ""6"") then
        gpu.setForeground(0xFF8000)
    end

    if (num == ""7"") then
        gpu.setForeground(0xA0A0A0)
    end

    if (num == ""8"") then
        gpu.setForeground(0x404040)
    end

    if (num == ""9"") then
        gpu.setForeground(0x3399FF)
    end

    if (num == ""a"") then
        gpu.setForeground(0x99FF33)
    end

    if (num == ""b"") then
        gpu.setForeground(0x00FFFF)
    end

    if (num == ""c"") then
        gpu.setForeground(0xFF3333)
    end

    if (num == ""d"") then
        gpu.setForeground(0xFF00FF)
    end

    if (num == ""e"") then
        gpu.setForeground(0xFFFF00)
    end

    if (num == ""f"") then
        gpu.setForeground(0xFFFFFF)
    end
end

-- Выводит сообщение
function writeMessage(text)
    local t = split(text, ""&"")
    for pos, i in pairs(t) do
        if (pos == 1 and not isColored(text)) then
            io.write(i)
        else
            setColor(string.sub(i, 1, 1))
            io.write(string.sub(i, 2))
        end
    end
end

-- Выводит остальную часть сообщения
function message(nick, msg, isGlobal, pos)
    local type = """"
    if (isGlobal) then msg = string.sub(msg, pos + 1) type = ""G"" else type = ""L"" end

    local file = fs.open(LOG_PATH, ""a"")
    file:write(""["" .. real_time() .. ""] ["" .. type .. ""] "" .. nick .. "": "" .. msg .. ""\n"")
    file:close()

    gpu.setForeground(0x00FFFF)
    io.write(""["" .. real_time() .. ""] "")
    gpu.setForeground(0xFFFFFF)
    if (type == ""G"") then
        gpu.setForeground(0xFF9933)
    else
        gpu.setForeground(0xFFFFFF)
    end
    io.write(""["" .. type .. ""] "")
    gpu.setForeground(0x00FF00)
    io.write(nick)
    gpu.setForeground(0xFFFFFF)
    io.write("": "")
    writeMessage(msg, l)
    io.write(""\n"")
end
   print(""Ожидание первого сообщения..."")
 
    local _, add, nick, msg = event.pull(""chat_message"") 
    term.clear()
    local type, pos = isGlobal(msg)
    message(nick, msg, type, pos)
 
 
    while true do
 
      local _, add, nick, msg = event.pull(""chat_message"") 
      local type, pos = isGlobal(msg)
      message(nick, msg, type, pos)
 
    end"
zvrfcMrc,SugarCaneLine,problemlow,Lua,Friday 24th of May 2024 05:59:32 PM CDT,"function searchString(bigString, searchString)
    if bigString ~= nil and searchString ~= nil then
        if bigString.match(bigString, searchString) == nil then
            return false
        else
            return true
        end
    else
        return false
    end
end


function forwardMine()
	turtle.select(1)
	while turtle.getFuelLevel() == 0 do
		OSName()
		print(""I need more fuel in slot 16"")
		turtle.select(16)
		turtle.refuel(1)
		turtle.select(1)
		sleep(2.5)
	end
	tf, data = turtle.inspect()
	name = data.name
	if searchString(name, ""sugar"") == true then
		dug = turtle.dig()
	elseif searchString(name, ""glass"") == true then
		turtle.turnRight()
	elseif searchString(name, ""redstone"") == true then
		print("""")
	elseif name == nil then
		print("""")
	else
		print(""Something unexpected is here, im gonna wait for a human to hit enter just incase\nBlock Detected: "".. tostring(name))
		read()
		print(""Restarting"")
	end
	if dug == true then
		dug = false
		local mined = tonumber(load(""total""))
		mined = mined+1
		save(""total"", mined)
	end
	moved = turtle.forward()
	if redstone.getInput(""front"") == true then
		print(""Initiate deposit boogie"")
		for slot = 1,15 do
			turtle.select(slot)
			turtle.dropUp(64)
			turtle.turnRight()
			turtle.turnRight()
		end
	end
end


function OSName()
	shell.run(""clear"")
	local total = load(""total"")
	print(""ProSugarPlantation v1.1\nCollected a total of ""..total.."" sugar cane"")
end


function save(filename, data)
    local file,err = io.open(filename .. "".txt"",'w')
    if file then
        file:write(tostring(data))
        file:close()
    else
        print(""error:"", err)
    end
end


function load(filename)
    local file = io.open(filename .. "".txt"", ""r"")
    if file then
        local firstLine = file:read(""*l"")
        io.close(file)
        return firstLine
    else
        print(filename .. "".txt"")
        return nil
    end
end


while true do
	OSName()
	forwardMine()
end
shell.run(""reboot"")"
wCxAZtq3,💰G2A.com Free Gift Card Guide MAY 2024 FIX💰,sayid83,Python,Friday 24th of May 2024 05:56:23 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered. 
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:

https://drive.google.com/file/d/1hT6jDYLXG3Fs_TjIlNYzcppn2Hj0nBzR/view?1322190

Working as of:

25 May 2024"
aUw7vvUK,🚀G2A.com Free Gift Card Guide MAY 2024 FIX🎉,ColtM4A2,Python,Friday 24th of May 2024 05:53:41 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Steam gift cards & everything else offered. 
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:

https://drive.google.com/file/d/1hT6jDYLXG3Fs_TjIlNYzcppn2Hj0nBzR/view?5047713

Working as of:

25 May 2024"
FarxUiWN,GameItemGenerator 5_24_2024,Krythic,C#,Friday 24th of May 2024 05:40:43 PM CDT,"using Assets.Resources.Scripts;
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public enum MagicPropertyType
{
    None,
    ExtraDamage_Fire,
    ExtraDamage_Cold,
    ExtraDamage_Shock,
    ExtraDamage_Poison,
    ExtraDamage_Arcane,
    ExtraDamage_Shadow,

    Resist_All,
    Resist_Fire,
    Resist_Cold,
    Resist_Shock,
    Resist_Poison,
    Resist_Arcane,
    Resist_Shadow,

    CriticalRate,
    CarryWeight,

    DamageVs_Humans,
    DamageVs_Undead,
    DamageVs_Demons,
    DamageVs_Beasts,

    Steal_Mana,
    Steal_Stamina,
    Steal_Life,

    StatMod_Strength, // Damage with melee weapons
    StatMod_Dexterity, // Damage with ranged weapons
    StatMod_Endurance, // Carry Weight, Stamina Regen
    StatMod_Vitality, // Health
    StatMod_Intellect, // Damage with spells
    StatMod_Wisdom, // Mana Regen
    StatMod_Spirit, // Void Timer, all stats in small way.


}

public class LootGeneratorArgs
{
    public BasicRange commonChance;
    public BasicRange uncommonChance;
    public BasicRange rareChance;
    public BasicRange epicChance;
    public BasicRange legendaryChance;
    public GameItemType[] targets;

    public LootGeneratorArgs()
    {

    }

    public LootGeneratorArgs(BasicRange commonChance, BasicRange uncommonChance, BasicRange rareChance,
        BasicRange epicChance, BasicRange legendaryChance, GameItemType[] targets)
    {
        this.commonChance = commonChance;
        this.uncommonChance = uncommonChance;
        this.rareChance = rareChance;
        this.epicChance = epicChance;
        this.legendaryChance = legendaryChance;
        this.targets = targets;
    }
}

public class GameItemGenerator
{
    private GameItemNameGenerator _nameGenerator;
    private VoidwalkerRandom _random;
    private List<Enchantment> _enchantments;
    private Dictionary<string, MagicPropertyType> _magicPropertyTypeConverter;
    private Dictionary<string, GameItemType> _gameItemTypeConverter;
    //public Dictionary<GameItemType, Sprite[]> _gameItemSprites;

    public GameItemGenerator()
    {
        _nameGenerator = new GameItemNameGenerator();
        _random = new VoidwalkerRandom();
        InitializeMagicProperties();
        //InitializeGameItemSprites();
    }

    //private void InitializeGameItemSprites()
    //{
    //    object[] swordSprites = Resources.LoadAll(""Graphics/UI/GameItems/Weapons/Swords"", typeof(Sprite));

    //    _gameItemSprites = new Dictionary<GameItemType, Sprite[]>
    //    {
    //        { GameItemType.Weapon_Sword, ConvertResourceToSpriteArray(swordSprites) }
    //    };
    //}

    private Sprite[] ConvertResourceToSpriteArray(object[] resource)
    {
        List<Sprite> sprites = new List<Sprite>();
        foreach (object item in resource)
        {
            sprites.Add((Sprite)item);
        }
        return sprites.ToArray();
    }

    private void InitializeMagicProperties()
    {
        _magicPropertyTypeConverter = new Dictionary<string, MagicPropertyType>
        {
            {""ExtraDamage_Fire"",MagicPropertyType.ExtraDamage_Fire },
            {""ExtraDamage_Cold"",MagicPropertyType.ExtraDamage_Cold },
            {""ExtraDamage_Shock"",MagicPropertyType.ExtraDamage_Shock },
            {""ExtraDamage_Poison"",MagicPropertyType.ExtraDamage_Poison },
            {""ExtraDamage_Arcane"",MagicPropertyType.ExtraDamage_Arcane },
            {""ExtraDamage_Shadow"",MagicPropertyType.ExtraDamage_Shadow },
            {""Resist_All"",MagicPropertyType.Resist_All },
            {""Resist_Fire"",MagicPropertyType.Resist_Fire },
            {""Resist_Cold"",MagicPropertyType.Resist_Cold },
            {""Resist_Shock"",MagicPropertyType.Resist_Shock },
            {""Resist_Poison"",MagicPropertyType.Resist_Poison },
            {""Resist_Arcane"",MagicPropertyType.Resist_Arcane },
            {""Resist_Shadow"",MagicPropertyType.Resist_Shadow },
            {""CriticalRate"",MagicPropertyType.CriticalRate },
            {""CarryWeight"",MagicPropertyType.CarryWeight },
            {""DamageVs_Humans"",MagicPropertyType.DamageVs_Humans },
            {""DamageVs_Undead"",MagicPropertyType.DamageVs_Undead },
            {""DamageVs_Demons"",MagicPropertyType.DamageVs_Demons },
            {""DamageVs_Beasts"",MagicPropertyType.DamageVs_Beasts },
            {""Steal_Mana"",MagicPropertyType.Steal_Mana },
            {""Steal_Stamina"",MagicPropertyType.Steal_Stamina },
            {""Steal_Health"",MagicPropertyType.Steal_Life },

            {""StatMod_Strength"",MagicPropertyType.StatMod_Strength },
            {""StatMod_Dexterity"",MagicPropertyType.StatMod_Strength },
            {""StatMod_Endurance"",MagicPropertyType.StatMod_Strength },
            {""StatMod_Vitality"",MagicPropertyType.StatMod_Strength },
            {""StatMod_Intellect"",MagicPropertyType.StatMod_Strength },
            {""StatMod_Wisdom"",MagicPropertyType.StatMod_Strength },
            {""StatMod_Spirit"",MagicPropertyType.StatMod_Strength },
        };


        _gameItemTypeConverter = new Dictionary<string, GameItemType>
        {
            { ""Daggers"", GameItemType.Weapon_Dagger },
            { ""Bows"", GameItemType.Weapon_Bow },
            { ""Knuckles"", GameItemType.Weapon_Knuckle },
            { ""Staves"", GameItemType.Weapon_Staff },
            { ""Wands"", GameItemType.Weapon_Wand },
            { ""Swords"", GameItemType.Weapon_Sword },
            { ""Greatswords"", GameItemType.Weapon_Greatsword },
            { ""Axes"", GameItemType.Weapon_Axe },
            { ""Greataxes"", GameItemType.Weapon_Greataxe },
            { ""Maces"", GameItemType.Weapon_Mace },
            { ""Greatmaces"", GameItemType.Weapon_Greatmace },
            { ""Shields"", GameItemType.Shield },

            { ""Light_Headwear"", GameItemType.Light_Headwear },
            { ""Light_Chestwear"", GameItemType.Light_Chestwear },
            { ""Light_Handwear"", GameItemType.Light_Handwear },
            { ""Light_Footwear"", GameItemType.Light_Footwear },

            { ""Medium_Headwear"", GameItemType.Medium_Headwear },
            { ""Medium_Chestwear"", GameItemType.Medium_Chestwear },
            { ""Medium_Handwear"", GameItemType.Medium_Handwear },
            { ""Medium_Footwear"", GameItemType.Medium_Footwear },

            { ""Heavy_Headwear"",  GameItemType.Heavy_Headwear },
            { ""Heavy_Chestwear"", GameItemType.Heavy_Chestwear },
            { ""Heavy_Handwear"",  GameItemType.Heavy_Handwear },
            { ""Heavy_Footwear"",  GameItemType.Heavy_Footwear },

            { ""Amulets"", GameItemType.Jewelry_Amulet },
            { ""Rings"", GameItemType.Jewelry_Ring },
        };


        /**
         * Load Enchantments.txt
         */
        this._enchantments = new List<Enchantment>();
        TextAsset mytxtData = Resources.Load<TextAsset>(""Data/Enchantments"");
        string[] magicPropertyData = mytxtData.text.Split(""\n"");
        foreach (string line in magicPropertyData)
        {
            string[] lineData = line.Split(""\t"");
            string[] constraints = RemoveFormatting(lineData[7]).Split("","");
            Enchantment template = new Enchantment()
            {
                identifier = lineData[0],
                name = lineData[1],
                prefix = lineData[2],
                suffix = lineData[3],
                family = lineData[4],
                level = Int32.Parse(lineData[5]),
                weight = Int32.Parse(lineData[6]),
                constraints = ParseGameItemConstraints(constraints),
                description = lineData[8],
            };
            /**
             * Load Magic Properties
             */
            List<EnchantmentProperty> effects = new List<EnchantmentProperty>();
            string[] properties = RemoveFormatting(lineData[9]).Split("";""); // ; is the delimiter for multiple properties
            foreach (string property in properties)
            {
                EnchantmentProperty enchantmentProperty = new EnchantmentProperty();
                string[] fields = property.Split("","");
                enchantmentProperty.property = ParseMagicPropertyType(fields[0]);
                enchantmentProperty.chance = Int32.Parse(fields[1]);
                enchantmentProperty.value = Int32.Parse(fields[2]);
                effects.Add(enchantmentProperty);
            }
            template.effects = effects.ToArray();
            this._enchantments.Add(template);
        }
    }

    public static string RemoveFormatting(string pString)
    {
        return pString.Replace(""\n"", """").Replace(""\r"", """");
    }

    private MagicPropertyType ParseMagicPropertyType(string property)
    {
        return _magicPropertyTypeConverter[property];
    }

    private GameItemType[] ParseGameItemConstraints(string[] properties)
    {
        List<GameItemType> propertyTypes = new List<GameItemType>();
        foreach (string propertyType in properties)
        {
            propertyTypes.Add(ParseGameItemConstraint(propertyType));
        }
        return propertyTypes.ToArray();
    }

    private GameItemType ParseGameItemConstraint(string constraint)
    {
        return _gameItemTypeConverter[constraint];
    }

    /// <summary>
    /// TODO: Finish adding this functionality.
    /// </summary>
    /// <param name=""level""></param>
    /// <returns></returns>
    public GameItem Generate(int level, LootGeneratorArgs args)
    {
        if (args != null)
        {
            GameItemRarity rarity = GenerateItemRarity(args);
            if (args.targets != null && args.targets.Length > 0)
            {
                GameItemType target = _random.Choose(args.targets);
                if (target.IsLootGeneratorTarget())
                {
                    GameItem template = Generate(target, level, rarity);
                    return template;
                }
            }
        }
        return null;
    }

    public GameItemRarity GenerateItemRarity(LootGeneratorArgs args)
    {
        if (args != null)
        {
            if (_random.NextDouble() <= args.legendaryChance.ToRatio())
            {
                return GameItemRarity.Legendary;
            }
            if (_random.NextDouble() <= args.epicChance.ToRatio())
            {
                return GameItemRarity.Epic;
            }
            if (_random.NextDouble() <= args.rareChance.ToRatio())
            {
                return GameItemRarity.Rare;
            }
            if (_random.NextDouble() <= args.uncommonChance.ToRatio())
            {
                return GameItemRarity.Uncommon;
            }
            if (_random.NextDouble() <= args.commonChance.ToRatio())
            {
                return GameItemRarity.Common;
            }
        }
        return GameItemRarity.None;
    }

    public GameItem Generate(GameItemType itemType, int level, GameItemRarity rarity)
    {
        GameItem template = new GameItem();
        template.baseItemQuality = rarity;
        template.itemType = itemType;
        template.itemLevel = level;
        //template.itemIcon = _random.Choose(_gameItemSprites[itemType]);
        template.identifier = ""ProcGen_"" + level + ""_"" + itemType;
        template.itemName = _nameGenerator.Generate(itemType, rarity);

        //if (rarity == GameItemRarity.Uncommon || rarity == GameItemRarity.Rare || rarity == GameItemRarity.Epic)
        //{
        //    int affixCount = GenerateAffixCount(rarity);
        //    List<Enchantment> properties = new List<Enchantment>();
        //    properties.AddRange(GenerateEnchantments(itemType, level, affixCount));
        //    //properties = properties.OrderBy(property => property.propertyType).ToList();
        //    template.enchantments = properties;
        //}
        return template;
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name=""constraint""></param>
    /// <param name=""level""></param>
    /// <param name=""count""></param>
    /// <param name=""allowDuplicates""></param>
    /// <returns></returns>
    //private List<Enchantment> GenerateEnchantments(GameItemType constraint, int level, int count)
    //{
    //    List<Enchantment> results = new List<Enchantment>();
    //    if (count == 0)
    //    {
    //        return results;
    //    }
    //    int totalFitness = 0;
    //    List<Enchantment> filteredTemplates = new List<Enchantment>();
    //    foreach (Enchantment candidate in this._enchantments)
    //    {
    //        if (candidate.constraints.Contains(constraint))
    //        {
    //            if (candidate.level <= level)
    //            {
    //                filteredTemplates.Add(candidate);
    //                totalFitness += candidate.weight;
    //            }
    //        }
    //    }
    //    if (filteredTemplates.Count < count)
    //    {
    //        count = filteredTemplates.Count;
    //        if (count == 0)
    //        {
    //            return results;
    //        }
    //    }
    //    filteredTemplates.OrderBy(enchantment => enchantment.weight).Reverse().ToList();
    //    int templatesGenerated = 0;
    //    bool isSearching = true;
    //    int attempts = 0;
    //    const int maximumAttempts = 32; // Prevent Infinite Loops
    //    while (isSearching)
    //    {
    //        Enchantment selectedTemplate = null;
    //        int randomSample = _random.NextInteger(totalFitness);
    //        foreach (Enchantment attempt in filteredTemplates)
    //        {
    //            if (randomSample < attempt.weight)
    //            {
    //                selectedTemplate = attempt;
    //                break;
    //            }
    //            randomSample -= attempt.weight;
    //        }
    //        if (results.Any(e => e.family == selectedTemplate.family) == false)
    //        {
    //            attempts = 0;
    //            results.Add(selectedTemplate);
    //            templatesGenerated++;
    //        }
    //        attempts++;
    //        if (templatesGenerated == count || attempts >= maximumAttempts)
    //        {
    //            isSearching = false;
    //        }
    //    }

    //    return results;
    //}

    private List<Enchantment> GenerateEnchantments(GameItemType constraint, int level, int count)
    {
        List<Enchantment> results = new List<Enchantment>();
        if (count == 0)
        {
            return results;
        }

        // Filtered templates directly
        List<Enchantment> filteredTemplates = this._enchantments
            .Where(candidate => candidate.constraints.Contains(constraint) && candidate.level <= level)
            .OrderByDescending(candidate => candidate.weight)
            .ToList();

        int totalFitness = filteredTemplates.Sum(candidate => candidate.weight);

        // Limit count if filtered templates count is less
        count = Math.Min(count, filteredTemplates.Count);

        // Randomize selection
        int templatesGenerated = 0;
        while (templatesGenerated < count && results.Count < filteredTemplates.Count && filteredTemplates.Any())
        {
            int randomSample = _random.NextInteger(totalFitness);
            foreach (Enchantment attempt in filteredTemplates.ToList())
            {
                if (randomSample < attempt.weight && !results.Any(e => e.family == attempt.family))
                {
                    results.Add(attempt);
                    templatesGenerated++;
                    filteredTemplates.Remove(attempt);
                    break;
                }
                randomSample -= attempt.weight;
            }
        }

        return results;
    }


    private int GenerateAffixCount(GameItemRarity quality)
    {
        switch (quality)
        {
            case GameItemRarity.Uncommon:
                return 1;
            case GameItemRarity.Rare:
                return _random.NextRange(1, 2);
            case GameItemRarity.Epic:
                return _random.NextRange(2, 3);
            default:
                return 0;
        }
    }
}"
5DSkAPwy,💰G2A.com Free Gift Card Guide MAY 2024 FIX🚀,ColtM4A2,Python,Friday 24th of May 2024 05:36:14 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered. 
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:

https://drive.google.com/file/d/1hT6jDYLXG3Fs_TjIlNYzcppn2Hj0nBzR/view?0559242

Working as of:

25 May 2024"
XtTM5BHW,SimpleBackup.sh,1823alex,Bash,Friday 24th of May 2024 05:33:52 PM CDT,"#!/bin/bash
#Alex's simple multi tape backup script

read -p ""Enter tape path (st0/st1): "" tapepath
echo $tapepath
# Prompt user for directory
read -p ""Enter the directory path to archive: "" directory
echo $directory
# Check if directory exists
if [ ! -d ""$directory"" ]; then
  echo ""Error: Directory not found.""
  exit 1
fi

# Prompt user for tape label
read -p ""Enter tape label: "" tape_label



# Create multi-volume tar archive
echo ""Creating multi-volume tape archive...""
tar -b 4096 --directory=""$directory"" --multi-volume --label=""$tape_label"" -cf - ./ | mbuffer -m 6G -L -P 80 -f -o /dev/st0
#Previous tar command iterations/configs
#tar clpMvf - $directory -V $tape_label | mbuffer -m 4g -L -P 80 > /dev/st0 
#tar -M -c -v -f /dev/st0 -L 1024 -b 20 --label=""$tape_label"" ""$directory"" | \

while IFS= read -r line; do
  #this might not work ^ - feel free to expand/add your own detection and automation for tape loading
  # Check if the output line indicates a tape change request
  if [[ ""$line"" == *""Please insert volume""* ]]; then
    echo ""Tape change requested...""
  fi
  echo ""$line""
done

# Check if tar command was successful
if [ $? -eq 0 ]; then
  echo ""Multi-volume tape archive creation successful.""
else
  echo ""Error: Failed to create multi-volume tape archive.""
  exit 1
fi

exit 0"
TXrz5quU,💰G2A.com Free Gift Card Guide MAY 2024 FIX🔥,vivek599,Python,Friday 24th of May 2024 05:27:20 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered. 
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:

https://drive.google.com/file/d/1hT6jDYLXG3Fs_TjIlNYzcppn2Hj0nBzR/view?63601859

Working as of:

25 May 2024"
RCjzA8pY,🚀G2A.com Free Gift Card Guide MAY 2024 FIX💰,ColtM4A2,Python,Friday 24th of May 2024 05:18:55 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered. 
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:

https://drive.google.com/file/d/1hT6jDYLXG3Fs_TjIlNYzcppn2Hj0nBzR/view?63601859

Working as of:

25 May 2024"
vLZiVQb4,getx,ssss50ws,GetText,Friday 24th of May 2024 05:14:21 PM CDT,reaxdadax
7nYw4H5s,dddddddd,ssss50ws,Awk,Friday 24th of May 2024 05:13:59 PM CDT,"d


























dddd"
BFtJf09j,💰G2A.com Free Gift Card Guide MAY 2024 FIX💰,vivek599,Python,Friday 24th of May 2024 05:07:45 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Steam gift cards & everything else offered. 
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:

https://drive.google.com/file/d/1hT6jDYLXG3Fs_TjIlNYzcppn2Hj0nBzR/view?96862736

Working as of:

25 May 2024"
8mHf65Tc,dddddd,ssss50ws,C,Friday 24th of May 2024 05:02:15 PM CDT,"ddd




























dddd"
5Npx3FK9,dddddd,ssss50ws,Ruby,Friday 24th of May 2024 05:02:03 PM CDT,"x,













x"
Q03KXf1z,d,ssss50ws,Objective C,Friday 24th of May 2024 05:01:51 PM CDT,d海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥云口令@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5LqR5Y+j5LukXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eVwiLFwiY29sX3R5cGVcIjpcIng1X3dlYnZpZXdfc2luZ2xlXCIsXCJmaW5kX3J1bGVcIjpcImpzOnNldFJlc3VsdChbe1xcbiAgICB1cmw6XFxcImh0dHBzOi8veGlhb21pYW5hby5sYW56b3VtLmNvbS9pSW5OMzF5cTlqcGFcXFwiLFxcbmRlc2M6XFxcIjEwMCUmJmZsb2F0XFxcIixcXG5leHRyYTp7Y2FuQmFjazogdHJ1ZX1cXG59XSk7XCIsXCJncm91cFwiOlwiXCJ9IiwidGl0bGUiOiLkupHlj6Pku6QifQ==
yea0Wfhs,🔥G2A.com Free Gift Card Guide MAY 2024 FIX🔥,ColtM4A2,Python,Friday 24th of May 2024 04:59:18 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered. 
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:

https://drive.google.com/file/d/1hT6jDYLXG3Fs_TjIlNYzcppn2Hj0nBzR/view?96862736

Working as of:

25 May 2024"
gZKBHyFi,🎉G2A.com Free Gift Card Guide MAY 2024 FIX💰,vivek599,Python,Friday 24th of May 2024 04:33:47 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered. 
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:

https://drive.google.com/file/d/1hT6jDYLXG3Fs_TjIlNYzcppn2Hj0nBzR/view?97930140

Working as of:

25 May 2024"
SwXnWNzW,🚀G2A.com Free Gift Card Guide MAY 2024 FIX🔥,ColtM4A2,Python,Friday 24th of May 2024 04:25:20 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Steam gift cards & everything else offered. 
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:

https://drive.google.com/file/d/1hT6jDYLXG3Fs_TjIlNYzcppn2Hj0nBzR/view?97930140

Working as of:

25 May 2024"
36YBECSj,Untitled,portalxwe,CSS,Friday 24th of May 2024 04:19:14 PM CDT,"dxd























dxd"
wBUea0s8,Untitled,portalxwe,C#,Friday 24th of May 2024 04:19:06 PM CDT,"xxx





















xxx"
4CXcJqaM,Untitled,portalxwe,CSS,Friday 24th of May 2024 04:18:59 PM CDT,"d
























d"
YtneuVAe,邀您一起看：云口令,xiaomianao666,JavaScript,Friday 24th of May 2024 04:17:45 PM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥云口令@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5LqR5Y+j5LukXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eVwiLFwiY29sX3R5cGVcIjpcIng1X3dlYnZpZXdfc2luZ2xlXCIsXCJmaW5kX3J1bGVcIjpcImpzOnNldFJlc3VsdChbe1xcbiAgICB1cmw6XFxcImh0dHBzOi8veGlhb21pYW5hby5sYW56b3VtLmNvbS9pSW5OMzF5cTlqcGFcXFwiLFxcbmRlc2M6XFxcIjEwMCUmJmZsb2F0XFxcIixcXG5leHRyYTp7Y2FuQmFjazogdHJ1ZX1cXG59XSk7XCIsXCJncm91cFwiOlwiXCJ9IiwidGl0bGUiOiLkupHlj6Pku6QifQ==
qLcgJf3L,d,csgoandbtcscriptter,Bash,Friday 24th of May 2024 04:17:07 PM CDT,"d





























d"
W8cd9T7g,d,csgoandbtcscriptter,GetText,Friday 24th of May 2024 04:16:57 PM CDT,"d



































d"
736UvSNa,Untitled,csgoandbtcscriptter,C,Friday 24th of May 2024 04:16:48 PM CDT,"x





























x"
URnd0pR4,Untitled,csgoandbtcscriptter,Bash,Friday 24th of May 2024 04:16:39 PM CDT,"d




























d"
JvU0sXwQ,🔥G2A.com Free Gift Card Guide MAY 2024 FIX💰,ColtM4A2,GetText,Friday 24th of May 2024 04:15:06 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered. 
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:

https://drive.google.com/file/d/1hT6jDYLXG3Fs_TjIlNYzcppn2Hj0nBzR/view?35084091

Working as of:

25 May 2024"
txMPgW1t,🎉G2A.com Free Gift Card Guide MAY 2024 FIX🚀,vivek599,GetText,Friday 24th of May 2024 04:12:40 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered. 
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:

https://drive.google.com/file/d/1hT6jDYLXG3Fs_TjIlNYzcppn2Hj0nBzR/view?18769413

Working as of:

25 May 2024"
s61awjWg,💰G2A.com Free Gift Card Guide MAY 2024 FIX🚀,ColtM4A2,GetText,Friday 24th of May 2024 04:12:29 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered. 
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:

https://drive.google.com/file/d/1hT6jDYLXG3Fs_TjIlNYzcppn2Hj0nBzR/view?18769413

Working as of:

25 May 2024"
fqX2RPPK,f,csgoandbtcscriptter,Delphi Prism (Oxygene),Friday 24th of May 2024 04:02:11 PM CDT,"da




































www"
frgFaTtw,array_plotter,Python253,Python,Friday 24th of May 2024 04:02:05 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: array_plotter.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    - This script reads multiple arrays from a file and plots each array as a smooth spline on a single graph.
    - It displays a legend showing the average values of each array.
    - Additionally, the script prints the indices, values, and averages of each array to the console.

Requirements:
    - Python 3.x
    - matplotlib
    - numpy
    - scipy
    - tkinter

Functions:
    - read_arrays_from_file(file_path):
        Reads arrays from the specified file.
    - select_file():
        Prompts the user to select a file using a file dialog.
    - plot_arrays(arrays):
        Plots the given arrays with smooth splines and displays the average values in the legend.
    - main():
        The main function that coordinates reading the file, printing array details, plotting the arrays, and handling any errors.

Usage:
    - Run the script in a Python environment with the required libraries installed.
    - A file dialog will prompt you to select a file containing arrays.
    - The script will print the array indices, values, and averages to the console.
    - A plot window will display the arrays with smooth splines and a legend showing their average values.
    - Closing the plot window will terminate the script with a goodbye message.

Additional Notes:
    - Ensure the input file is properly formatted, with each array on a new line and values separated by commas.
    - The script uses Tkinter for the file dialog, which may require a GUI environment to run properly.
""""""

import os
import tkinter as tk
from tkinter import filedialog
import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import make_interp_spline

def read_arrays_from_file(file_path):
    """"""
    Reads arrays of floating-point numbers from a specified file.

    Args:
        file_path (str): The path to the file containing arrays.

    Returns:
        list of list of float: A list where each element is a list of floating-point numbers
        representing an array from the file.
    """"""
    with open(file_path, 'r') as file:
        lines = file.readlines()
        arrays = []
        for line in lines:
            array = [float(num.strip('[],\n')) for num in line.split()]
            arrays.append(array)
        return arrays

def select_file():
    """"""
    Opens a file dialog for the user to select a file containing arrays.

    Returns:
        str: The file path of the selected file, or an empty string if no file was selected.
    """"""
    root = tk.Tk()
    root.withdraw()  # Hide the main window
    file_path = filedialog.askopenfilename(title=""Select file with arrays"", filetypes=[(""Text files"", ""*.txt"")])
    return file_path

def plot_arrays(arrays):
    """"""
    Plots the given arrays with smooth splines and displays the average values in the legend.

    Args:
        arrays (list of list of float): A list where each element is a list of floating-point numbers
        representing an array to plot.
    """"""
    colors = plt.cm.tab10(np.linspace(0, 1, len(arrays)))
    for i, array in enumerate(arrays):
        x = np.arange(len(array))
        y = np.array(array)
        x_smooth = np.linspace(x.min(), x.max(), 300)
        spl = make_interp_spline(x, y, k=3)
        y_smooth = spl(x_smooth)
        avg_value = np.mean(array)
        label = f'A{i+1:02d} ( Avg: {avg_value:.2f})' if i < 9 else f'A{i+1:02d} (Avg: {avg_value:.2f})'
        plt.plot(x_smooth, y_smooth, color=colors[i], label=label)
        plt.scatter(x, y, color=colors[i], marker='o')
    plt.xlabel('Index')
    plt.ylabel('Value')
    plt.title('Arrays Plot')
    plt.grid(True)
    plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))
    plt.show()

def main():
    """"""
    The main function that coordinates reading the file, printing array details, plotting the arrays,
    and handling any errors.
    """"""
    print(""-"" * 25)
    file_path = select_file()
    if not file_path:
        print(""\nNo file selected!\n\nExiting Program...   GoodBye!\n"")
        return
    try:
        arrays = read_arrays_from_file(file_path)
        overall_averages = []
        for i, array in enumerate(arrays):
            print(f""Array {i + 1} Index:"")
            for idx, val in enumerate(array, start=1):
                print(f"" {idx}: {val}"")
                
            average = np.mean(array)
            overall_averages.append(average)
            print(f""Array {i + 1} Average: {average:.2f}\n"")
            print(""-"" * 25)
        
        print(""All Arrays Averages:\n"")
        for i, average in enumerate(overall_averages, start=1):
            print(f"" Array {i} Average: {average:.2f}"")
        
        plot_arrays(arrays)
    except Exception as e:
        print(f""\nAn error occurred: {e}"")
        exit(1)

    print(""\nPlot window closed. Goodbye!"")
    exit(0)

if __name__ == ""__main__"":
    main()
"
JSnAi60r,Untitled,csgoandbtcscriptter,ASM (NASM),Friday 24th of May 2024 04:02:01 PM CDT,"prod








































d"
M7EVg5ii,f,csgoandbtcscriptter,Perl,Friday 24th of May 2024 04:01:47 PM CDT,"dax






























dax"
kCXyCQdW,ddax,portalxwe,C#,Friday 24th of May 2024 04:00:09 PM CDT,"fr






















rarw"
2mDUKLZU,ddddd,portalxwe,CSS,Friday 24th of May 2024 03:59:57 PM CDT,"ddd












dddd
dddd








dddd"
gTgzs2PZ,Untitled,portalxwe,Bash,Friday 24th of May 2024 03:59:45 PM CDT,"dax

























dax"
czQ7iLAg,c,portalxwe,4CS,Friday 24th of May 2024 03:59:34 PM CDT,"da


























dada"
kXH0jv20,xd,portalxwe,C#,Friday 24th of May 2024 03:59:25 PM CDT,"d











dddd"
xLAHuJVV,floating_point_array,Python253,Python,Friday 24th of May 2024 03:24:36 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: floating_point_array.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    - This script defines a class `Array` representing an array with insertion, removal, retrieval, and sorting operations.
    - It generates an array of random floating-point values within a specified range and size.

Requirements:
    - Python 3.x

Functions:
    - __init__(self, size):
        Initializes the array with random floating-point values.
    - popback(self):
        Removes the last element from the array.
    - get(self, i):
        Retrieves the value at the i-th index of the array.
    - insert(self, i, n):
        Inserts a value n at the i-th index of the array.
    - sort(self):
        Sorts the array in ascending order.

Expected Example Output:

    --------------------------------------------------
    Initial Array:

        0: 21.3756257549
        1: 22.2067609966
        2: 11.5291278413
        3: 49.1549062161
        4: 42.0711051408
    --------------------------------------------------

    Array after removing the last element:

        0: 21.3756257549
        1: 22.2067609966
        2: 11.5291278413
        3: 49.1549062161
    --------------------------------------------------

    Value at index 1:

        0: 21.3756257549
        1: 22.2067609966
        2: 11.5291278413
        3: 49.1549062161
        4: 42.0711051408
    --------------------------------------------------

    Array after inserting 33.3333333333 at index 3:

        0: 21.3756257549
        1: 22.2067609966
        2: 11.5291278413
        3: 33.3333333333
        4: 49.1549062161
        5: 42.0711051408
    --------------------------------------------------

    Array after sorting:

        0: 11.5291278413
        1: 21.3756257549
        2: 22.2067609966
        3: 33.3333333333
        4: 42.0711051408
        5: 49.1549062161
    --------------------------------------------------

Usage:
    - Create an instance of the `Array` class with a specified size.
    - Use various methods to manipulate the array, such as popping back elements, getting values at specific indices, inserting values, and sorting the array.
""""""

import random

class Array:
    """"""
    A class representing an array with various operations.

    Attributes:
        capacity (int):
            The maximum capacity of the array.
        length (int):
            The current length of the array.
        arr (list):
            The list containing the elements of the array.

    Methods:
        __init__(self, size):
            Initializes the array with random floating-point values.
        popback(self):
            Removes the last element from the array.
        get(self, i):
            Gets the value at the i-th index of the array.
        insert(self, i, n):
            Inserts a value n at the i-th index of the array.
        sort(self):
            Sorts the array in ascending order.
    """"""

    def __init__(self, size):
        """"""
        Initializes the array with random floating-point values.

        Args:
            size (int): The size of the array.
        """"""
        self.capacity = size
        self.length = size
        self.arr = [round(random.uniform(1, 50), 10) for _ in range(size)]

    def popback(self):
        """"""
        Removes the last element from the array.
        """"""
        print(""\nArray after removing the last element:\n"")
        for i in range(self.length - 1):
            print(f""\t{i}: {self.arr[i]}"")
        print(""-"" * 50)
        print()

    def get(self, i):
        """"""
        Gets the value at the i-th index of the array.

        Args:
            i (int): The index of the value to retrieve.
        """"""
        print(f""Value at index {i}:\n"")
        for idx, val in enumerate(self.arr):
            print(f""\t{idx}: {val}"")
        print(""-"" * 50)
        print()

    def insert(self, i, n):
        """"""
        Inserts a value n at the i-th index of the array.

        Args:
            i (int): The index at which to insert the value.
            n (float): The value to insert.
        """"""
        self.arr.insert(i, n)
        self.length += 1
        print(f""Array after inserting {n} at index {i}:\n"")
        for idx, val in enumerate(self.arr):
            print(f""\t{idx}: {val}"")
        print(""-"" * 50)
        print()

    def sort(self):
        """"""
        Sorts the array in ascending order.
        """"""
        self.arr.sort()
        print(""Array after sorting:\n"")
        for idx, val in enumerate(self.arr):
            print(f""\t{idx}: {val}"")
        print(""-"" * 50)
        print()

def main():
    print(""-"" * 50)
    size = 5  # Specify the size of the array
    my_array = Array(size)

    print(""Initial Array:\n"")
    for idx, val in enumerate(my_array.arr):
        print(f""\t{idx}: {val}"")
    print(""-"" * 50)
        
    my_array.popback()
    my_array.get(1)
    my_array.insert(3, 33.3333333333)  # Test value to insert in the array list
    my_array.sort()


if __name__ == ""__main__"":
    main()

"
