id,title,username,language,date,content
SvbgRtTh,insertSQLQuery.ps1,Combreal,PowerShell,Sunday 24th of March 2024 12:55:58 PM CDT,"#Requieres MySQL Connector NET 8.3.0
[void][system.reflection.Assembly]::LoadFrom(""C:\Program Files (x86)\MySQL\MySQL Connector NET 8.3.0\MySql.Data.dll"")

$Mysqlhost = ""localhost""
$Mysqluser = ""myuser""
$Mysqlpass = ""mypassword""
$Mysqldatabase = ""mydb""
$Connection = [MySql.Data.MySqlClient.MySqlConnection]@{ConnectionString=""server=$Mysqlhost;uid=$Mysqluser;pwd=$Mysqlpass;database=$Mysqldatabase""}
Try {
    $Connection.Open()
}
Catch {
    Write-Host ""ERROR : Unable to connect to DB, aborting.""
    Exit
}

$command = New-Object MySql.Data.MySqlClient.MySqlCommand
$command.Connection = $Connection
$command.CommandText = ""INSERT INTO customers (CustomerName,ContactName,Address,City,PostalCode,Country) VALUES (@CustomerName,@ContactName,@Address,@City,@PostalCode,@Country)""
$command.Parameters.AddWithValue(""@CustomerName"", ""Combreal"")
$command.Parameters.AddWithValue(""@ContactName"", ""Tony Montana"")
$command.Parameters.AddWithValue(""@Address"", ""5, rue des champs Élysées"")
$command.Parameters.AddWithValue(""@City"", ""Paris"")
$command.Parameters.AddWithValue(""@PostalCode"", ""75008"")
$command.Parameters.AddWithValue(""@Country"", ""France"")
$command.ExecuteNonQuery() | Out-Null

$Connection.Close()"
vNbLvBHS,Untitled,yasi04,Python,Sunday 24th of March 2024 12:50:12 PM CDT,"import os
from dotenv import load_dotenv
import disnake
import asyncio
import sqlite3
from disnake.ext import commands

load_dotenv()

bot = commands.Bot(command_prefix=""!"", help_command=None, intents=disnake.Intents.all())

conn = sqlite3.connect('filters.db')
c = conn.cursor()

c.execute('''CREATE TABLE IF NOT EXISTS text_filters 
             (channel_id INTEGER PRIMARY KEY, filters TEXT)''')

c.execute('''CREATE TABLE IF NOT EXISTS link_filters 
             (channel_id INTEGER PRIMARY KEY, filters TEXT)''')

c.execute('''CREATE TABLE IF NOT EXISTS roles 
             (role TEXT)''')

c.execute('''CREATE TABLE IF NOT EXISTS guest_filters 
             (server INTEGER PRIMARY KEY, filters TEXT)''')

conn.commit()


def link_checker(message):
    c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (message.channel.id,))
    row = c.fetchone()
    if row:
        filters = row[0].split(';')
        if message.content.startswith(""http://"") or message.content.startswith(""https://""):
            flag = True
            for word in filters:
                if word == message.content.split('/')[2]:
                    flag = False
            return flag


def text_checker(message):
    c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (message.channel.id,))
    row = c.fetchone()
    if row:
        text_filters = row[0].split(';')
        flag = True
        if message.content.split(' ')[0] in text_filters:
            flag = False
        return flag


def guest_checker(message):
    c.execute(""SELECT filters FROM guest_filters WHERE server = ?"", (1,))
    row = c.fetchone()
    if row:
        guest_filters = row[0].split(';')
        flag = False
        if (message.content.split(' ')[0] in guest_filters) or ('/' in message.content):
            flag = True
        return flag


@bot.event
async def on_ready():
    print(f""Bot {bot.user} is ready to work!"")


@bot.event
async def on_message(message):
    result = False
    for role in message.author.roles:
        c.execute(""SELECT * FROM roles WHERE role=?"", (role.id,))
        result = c.fetchone()
        if result:
            break
    if result:
        if guest_checker(message):
            await message.delete()
            await message.channel.send(f'*Эта команда доступна только для авторизованных участников сервера, пожалуйста авторизуйтесь и получите роль ""Участник""')
        return
    elif message.author == message.guild.owner:
        return
    elif message.author == bot.user:
        await asyncio.sleep(120)
        await message.delete()
        return
    elif message.author.bot:
        return
    else:
        if message.content.startswith(""http://"") or message.content.startswith(""https://""):
            c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (message.channel.id,))
            row = c.fetchone()
            if row:
                filters = row[0].split(';')
                if link_checker(message):
                    await message.delete()
                    await message.channel.send(f""*В этом канале доступны только* `{filters}`, *Другое не разрешено XD*"")
                    return
        else:
            c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (message.channel.id,))
            row = c.fetchone()
            if row:
                text_filters = row[0].split(';')
                if text_checker(message):
                    await message.delete()
                    await message.channel.send(f""*В этом канале доступны только* `{text_filters}`, *Другое не разрешено XD*"")
                    return

    await bot.process_commands(message)


@bot.slash_command(description=""добавить текстовый фильтр"")
async def add_text_filter(ctx, channel_id: str, filter_text: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        old_filters = row[0]
        new_filters = old_filters + "";"" + filter_text
        c.execute(""UPDATE text_filters SET filters = ? WHERE channel_id = ?"", (new_filters, channel_id))
        conn.commit()
        await ctx.send('Готово')
    else:
        c.execute(""INSERT INTO text_filters (channel_id, filters) VALUES (?, ?)"", (channel_id, filter_text))
        conn.commit()
        await ctx.send('Готово')


@bot.slash_command(description=""добавить гостевой фильтр"")
async def add_guest_filter(ctx, filter_text: str):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM guest_filters WHERE server = ?"", (1,))
    row = c.fetchone()
    if row:
        old_filters = row[0]
        new_filters = old_filters + "";"" + filter_text
        c.execute(""UPDATE guest_filters SET filters = ? WHERE server = ?"", (new_filters, 1))
        conn.commit()
        await ctx.send('Готово')
    else:
        c.execute(""INSERT INTO guest_filters (server, filters) VALUES (?, ?)"", (1, filter_text))
        conn.commit()
        await ctx.send('Готово')


@bot.slash_command(description=""добавить гостевые роли"")
async def add_guest_roles(ctx, role: disnake.Role):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""INSERT INTO roles (role) VALUES (?)"", (role.id,))
    conn.commit()
    await ctx.send('Готово')


@bot.slash_command(description=""удалить гостевые роли"")
async def delete_guest_roles(ctx, role: disnake.Role):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT * FROM roles WHERE role=?"", (role.id,))
    result = c.fetchone()

    if result:
        c.execute(""DELETE FROM roles WHERE role=?"", (role.id,))
        conn.commit()
        await ctx.send('Роль удалена из базы данных')
    else:
        await ctx.send('Роль не найдена в базе данных')


@bot.slash_command(description=""добавить ссылку в фильтр"")
async def add_link_filter(ctx, channel_id: str, filter_link: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        old_filters = row[0]
        new_filters = old_filters + "";"" + filter_link
        c.execute(""UPDATE link_filters SET filters = ? WHERE channel_id = ?"", (new_filters, channel_id))
        conn.commit()
        await ctx.send('Готово')
    else:
        c.execute(""INSERT INTO link_filters (channel_id, filters) VALUES (?, ?)"", (channel_id, filter_link))
        conn.commit()
        await ctx.send('Готово')


@bot.slash_command(description=""удалить текстовый фильтр (выбор)"")
async def delete_filter(ctx, channel_id: str, filters: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        text_filters = row[0].split(';')
        new_text_filters = [filter_word for filter_word in text_filters if filter_word not in filters.split(';')]
        new_text_filters_str = ';'.join(new_text_filters)
        c.execute(""UPDATE text_filters SET filters = ? WHERE channel_id = ?"", (new_text_filters_str, channel_id))
        conn.commit()

        await ctx.send('Готово')
    else:
        await ctx.send('Фильтров для этого канала и не было')


@bot.slash_command(description=""удалить гостевой фильтр (выбор)"")
async def delete_guest_filter(ctx, filters: str):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM guest_filters WHERE server = ?"", (1,))
    row = c.fetchone()
    if row:
        text_filters = row[0].split(';')
        new_text_filters = [filter_word for filter_word in text_filters if filter_word not in filters.split(';')]
        new_text_filters_str = ';'.join(new_text_filters)
        c.execute(""UPDATE guest_filters SET filters = ? WHERE server = ?"", (new_text_filters_str, 1))
        conn.commit()

        await ctx.send('Готово')
    else:
        await ctx.send('Фильтров и не было')


@bot.slash_command(description=""удалить фильтр ссылок (выбор)"")
async def delete_link_filter(ctx, channel_id: str, filters: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        link_filters = row[0].split(';')
        new_link_filters = [filter_link for filter_link in link_filters if filter_link not in filters.split(';')]
        new_link_filters_str = ';'.join(new_link_filters)
        c.execute(""UPDATE link_filters SET filters = ? WHERE channel_id = ?"", (new_link_filters_str, channel_id))
        conn.commit()

        await ctx.send('Готово')
    else:
        await ctx.send('Фильтров для этого канала и не было')


@bot.slash_command(description=""удалить все фильтры для канала"")
async def delete_all_filters(ctx, channel_id: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""DELETE FROM text_filters WHERE channel_id = ?"", (channel_id,))
    c.execute(""DELETE FROM link_filters WHERE channel_id = ?"", (channel_id,))
    conn.commit()

    await ctx.send('Готово')


@bot.slash_command(description=""удалить все фильтры гостей"")
async def delete_all_guest_filters(ctx):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""DELETE FROM guest_filters WHERE server= ?"", (1,))
    conn.commit()

    await ctx.send('Готово')


bot.run(os.getenv('TOKEN'))
"
hivsR9Q2,6.0.3 Article Sidebar/Navbar,TheiPhoneFan,HTML,Sunday 24th of March 2024 12:46:24 PM CDT,"    <!-- Top Bar -->
    <div class=""navbar"">
        <!-- Site Title -->
        <a href=""../index.html"" style=""background-color:transparent;cursor:pointer;color:black;""><b>TheiPhoneFan.com</b></a>

        <!-- Home -->
        <a href=""../index.html"">Home <img src=""../theme/glyphs/home.png"" height=""15"" alt=""home""></a>

        <!-- Channel Related Dropdown -->
        <div class=""dropdown"">
            <button class=""dropbtn"" title=""dropdown"">Channel Related <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""../channel-related.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Channel Related</b> <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""channel related""></a>
                <a href=""https://www.youtube.com/@theiphonefan761/about"">Channel Info <img src=""../theme/glyphs/channel-info.png"" height=""15"" alt=""channel info""></a>
                <a href=""../music-i-use.html"">Music I Use <img src=""../theme/glyphs/music-i-use.png"" height=""15"" alt=""music i use""></a>
                <a href=""../my-playlists.html"">My Playlists <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""my playlists""></a>
                <a href=""../my-top-5-vids.html"">My Top 5 Vids <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""top 5 vids""></a>
                <a href=""../my-videos.html"">My Videos <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""my videos""></a>
                <a href=""../thumbnail-design.html"" style=""border-radius: 0px 0px 16px 16px;"">Thumbnail Design <img src=""../theme/glyphs/thumbnail-design.png"" height=""15"" alt=""thumbnail design""></a>
            </div>
        </div>

        <!-- Content Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Content <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""../content.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Content</b></a>
                <a href=""../apple-archive.html"">Apple Archive <img src=""../theme/glyphs/apple.png"" height=""15"" alt=""apple archive""></a>
                <a href=""../apple-concepts.html"">Apple Concepts <img src=""../theme/glyphs/apple.png"" height=""15"" alt=""apple concepts""></a>
                <a href=""../articles.html"">Articles <img src=""../theme/glyphs/articles.png"" height=""15"" alt=""articles""></a>
                <a href=""../blog.html"">Blog <img src=""../theme/glyphs/blog.png"" height=""15"" alt=""blog""></a>
                <a href=""../clipart.html"">Clipart <img src=""../theme/glyphs/clipart.png"" height=""15"" alt=""clipart""></a>
                <a href=""../my-photography.html"">My Photography <img src=""../theme/glyphs/my-photography.png"" height=""15"" alt=""my photography""></a>
                <a href=""../wallpapers.html"" style=""border-radius: 0px 0px 16px 16px;"">Wallpapers <img src=""../theme/glyphs/wallpapers.png"" height=""20"" alt=""wallpapers""></a>
            </div>
        </div>

        <!-- Scam Avoidance Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Scam Avoidance <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""../scam-avoidance.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Scam Avoidance</b></a>
                <a href=""../report-a-scam.html"">Report a Scam <img src=""../theme/glyphs/report.png"" height=""15"" alt=""report a scam""></a>
                <a href=""../scam-avoidance-blog.html"">Scam Avoidance Blog <img src=""../theme/glyphs/blog.png"" height=""15"" alt=""scam avoidance blog""></a>
                <a href=""../scam-info-updates.html"" style=""border-radius: 0px 0px 16px 16px;"">Scam Info Updates <img src=""../theme/glyphs/updates.png"" height=""15"" alt=""scam info updates""></a>
            </div>
        </div>

        <!-- Site Related Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Site Related <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""../site-related.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Site Related</b></a>
                <a href=""../all-pages.html"">All Pages <img src=""../theme/glyphs/all-pages.png"" height=""12"" style=""vertical-align:baseline;"" alt=""all pages""></a>
                <a href=""../changelog.html"">Changelog</a>
                <a href=""../downloads.html"">Downloads <img src=""../theme/glyphs/downloads.png"" height=""15"" alt=""downloads""></a>
                <a href=""../get-help.html"">Get Help <img src=""../theme/glyphs/get-help.png"" height=""15"" alt=""get help""></a>
                <a href=""../previews.html"">Previews</a>
                <a href=""../report-an-issue.html"">Report an Issue <img src=""../theme/glyphs/report.png"" height=""15"" alt=""report an issue""></a>
      			<a href=""../saved-site-revisions.html"" style=""border-radius: 0px 0px 16px 16px;"">Saved Site Revisions <img src=""../theme/glyphs/floppy.png"" height=""15""></a>
            </div>
        </div>

        <!-- Help & Contact Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Help & Contact <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""../help-contact.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Help & Contact</b></a>
                <a href=""../contact-me.html"">Contact Me <img src=""../theme/glyphs/contact-me.png"" height=""15"" alt=""contact me""></a>
                <a href=""../website-survey.html"">Site Survey <img src=""../theme/glyphs/survey.png"" height=""15"" alt=""site survey""></a>
                &nbsp;
                <a href=""https://m.youtube.com/channel/UC_xMgHdzp5AWR7rVZ89-sYg"">YouTube <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""youtube""></a>
                <a href=""https://twitter.com/theiphonefan""> 𝕏</a>
                <a href=""https://www.instagram.com/theiphonefan_/"">Instagram 📷</a>
                <a href=""mailto:jordan.theiphonefan@gmail.com"" style=""border-radius: 0px 0px 16px 16px;"">Mail ✉️</a>
            </div>
        </div>
    </div>
    </div>

    <!-- Sidebar Button -->
    <button class=""openbtn"" onclick=""toggleSidebar()"" title=""sidebar button"">☰</button>

    <div class=""sidebar"" id=""mySidebar"">
        <h3 style=""color:black;margin-top:40px;"">TheiPhoneFan.com</h3>
        <a href=""../index.html"">Home <img src=""../theme/glyphs/home.png"" height=""15"" alt=""home""></a>
        <details>
            <summary>Channel Related</summary>
            <a href=""../channel-related.html""><b>Channel Related</b></a>
            <a href=""https://www.youtube.com/@theiphonefan761/about"">Channel Info <img src=""../theme/glyphs/channel-info.png"" height=""15"" alt=""channel info""></a>
            <a href=""../music-i-use.html"">Music I Use <img src=""../theme/glyphs/music-i-use.png"" height=""15"" alt=""music i use""></a>
            <a href=""../my-playlists.html"">My Playlists <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""my playlists""></a>
            <a href=""../my-top-5-vids.html"">My Top 5 Vids <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""top 5 vids""></a>
            <a href=""../my-videos.html"">My Videos <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""my videos""></a>
            <a href=""../thumbnail-design.html"">Thumbnail Design <img src=""../theme/glyphs/thumbnail-design.png"" height=""15"" alt=""thumbnail design""></a>
            <hr>
        </details>
        <details>
            <summary>Content</summary>
            <a href=""../content.html""><b>Content</b></a>
            <a href=""../apple-archive.html"">Apple Archive <img src=""../theme/glyphs/apple.png"" height=""15"" alt=""apple archive""></a>
            <a href=""../apple-concepts.html"">Apple Concepts <img src=""../theme/glyphs/apple.png"" height=""15"" alt=""apple concepts""></a>
            <a href=""../articles.html"">Articles <img src=""../theme/glyphs/articles.png"" height=""15"" alt=""articles""></a>
            <a href=""../blog.html"">Blog <img src=""../theme/glyphs/blog.png"" height=""15"" alt=""blog""></a>
            <a href=""../clipart.html"">Clipart <img src=""../theme/glyphs/clipart.png"" height=""15"" alt=""clipart""></a>
            <a href=""../my-photography.html"">My Photography <img src=""../theme/glyphs/my-photography.png"" height=""15"" alt=""my photography""></a>
            <a href=""../wallpapers.html"">Wallpapers <img src=""../theme/glyphs/wallpapers.png"" height=""20"" alt=""wallpapers""></a>
            <hr>
        </details>
        <details>
            <summary>Scam Avoidance</summary>
            <a href=""../scam-avoidance.html""><b>Scam Avoidance</b></a>
            <a href=""../report-a-scam.html"">Report a Scam <img src=""../theme/glyphs/report.png"" height=""15"" alt=""report a scam""></a>
            <a href=""../scam-avoidance-blog.html"">Scam Avoidance Blog <img src=""../theme/glyphs/blog.png"" height=""15"" alt=""scam avoidance blog""></a>
            <a href=""../scam-info-updates.html"">Scam Info Updates <img src=""../theme/glyphs/updates.png"" height=""15"" alt=""scam info updates""></a>
            <hr>
        </details>
        <details>
            <summary>Site Related</summary>
            <a href=""../site-related.html""><b>Site Related</b></a>
            <a href=""../all-pages.html"">All Pages <img src=""../theme/glyphs/all-pages.png"" height=""12"" style=""vertical-align:baseline;"" alt=""all pages""></a>
            <a href=""../changelog.html"">Changelog</a>
            <a href=""../downloads.html"">Downloads <img src=""../theme/glyphs/downloads.png"" height=""15"" alt=""downloads""></a>
            <a href=""../get-help.html"">Get Help <img src=""../theme/glyphs/get-help.png"" height=""15"" alt=""get help""></a>
            <a href=""../previews.html"">Previews</a>
            <a href=""../report-an-issue.html"">Report an Issue <img src=""../theme/glyphs/report.png"" height=""15"" alt=""report an issue""></a>
            <a href=""../saved-site-revisions.html"">Saved Site Revisions <img src=""../theme/glyphs/floppy.png"" height=""15"" alt=""saved site revisions""></a>
            <hr>
        </details>
        <details>
            <summary>Help & Contact</summary>
            <a href=""../help-contact.html""><b>Help & Contact</b></a>
            <a href=""../contact-me.html"">Contact Me <img src=""../theme/glyphs/contact-me.png"" height=""15"" alt=""contact me""></a>
            <a href=""../website-survey.html"">Site Survey <img src=""../theme/glyphs/survey.png"" height=""15"" alt=""site survey""></a>
            <hr>
        </details>

        <div style=""margin-bottom:20px;text-align:center;"">
            <a href=""https://www.youtube.com/channel/UC_xMgHdzp5AWR7rVZ89-sYg"" style=""padding:0px;background-color:transparent;display:inline;"">
                <img src=""../theme/social-icons/youtube-social.png"" alt=""My YouTube Channel"" width=""40"">
            </a>
            <a href=""https://twitter.com/theiphonefan"" style=""padding:0px;background-color:transparent;display:inline;"">
                <img src=""../theme/social-icons/x-social.png"" alt=""My X Account"" width=""40"">
            </a>
            <a href=""https://instagram.com/theiphonefan_/"" style=""padding:0px;background-color:transparent;display:inline;"">
                <img src=""../theme/social-icons/instagram-social.png"" alt=""My Instagram Account"" width=""40"">
            </a>
            <a href=""mailto:jordan.theiphonefan@gmail.com"" style=""padding:0px;background-color:transparent;display:inline;"">
                <img src=""../theme/social-icons/mail-social.png"" alt=""Email Me"" width=""40"">
            </a>
        </div>
    </div>"
LyuZvs8s,6.0.3 Store Preview Sidebar/Navbar,TheiPhoneFan,HTML,Sunday 24th of March 2024 12:45:45 PM CDT,"    <!-- Top Bar -->
    <div class=""navbar"">
        <!-- Site Title -->
        <a href=""../index.html"" style=""background-color:transparent;cursor:pointer;color:black;""><b>TheiPhoneFan.com</b></a>

        <!-- Home -->
        <a href=""../index.html"">Home <img src=""../theme/glyphs/home.png"" height=""15"" alt=""home""></a>

        <!-- Channel Related Dropdown -->
        <div class=""dropdown"">
            <button class=""dropbtn"" title=""dropdown"">Channel Related <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""../channel-related.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Channel Related</b> <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""channel related""></a>
                <a href=""https://www.youtube.com/@theiphonefan761/about"">Channel Info <img src=""../theme/glyphs/channel-info.png"" height=""15"" alt=""channel info""></a>
                <a href=""../music-i-use.html"">Music I Use <img src=""../theme/glyphs/music-i-use.png"" height=""15"" alt=""music i use""></a>
                <a href=""../my-playlists.html"">My Playlists <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""my playlists""></a>
                <a href=""../my-top-5-vids.html"">My Top 5 Vids <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""top 5 vids""></a>
                <a href=""../my-videos.html"">My Videos <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""my videos""></a>
                <a href=""../thumbnail-design.html"" style=""border-radius: 0px 0px 16px 16px;"">Thumbnail Design <img src=""../theme/glyphs/thumbnail-design.png"" height=""15"" alt=""thumbnail design""></a>
            </div>
        </div>

        <!-- Content Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Content <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""../content.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Content</b></a>
                <a href=""../apple-archive.html"">Apple Archive <img src=""../theme/glyphs/apple.png"" height=""15"" alt=""apple archive""></a>
                <a href=""../apple-concepts.html"">Apple Concepts <img src=""../theme/glyphs/apple.png"" height=""15"" alt=""apple concepts""></a>
                <a href=""../articles.html"">Articles <img src=""../theme/glyphs/articles.png"" height=""15"" alt=""articles""></a>
                <a href=""../blog.html"">Blog <img src=""../theme/glyphs/blog.png"" height=""15"" alt=""blog""></a>
                <a href=""../clipart.html"">Clipart <img src=""../theme/glyphs/clipart.png"" height=""15"" alt=""clipart""></a>
                <a href=""../my-photography.html"">My Photography <img src=""../theme/glyphs/my-photography.png"" height=""15"" alt=""my photography""></a>
                <a href=""../wallpapers.html"" style=""border-radius: 0px 0px 16px 16px;"">Wallpapers <img src=""../theme/glyphs/wallpapers.png"" height=""20"" alt=""wallpapers""></a>
            </div>
        </div>

        <!-- Scam Avoidance Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Scam Avoidance <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""../scam-avoidance.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Scam Avoidance</b></a>
                <a href=""../report-a-scam.html"">Report a Scam <img src=""../theme/glyphs/report.png"" height=""15"" alt=""report a scam""></a>
                <a href=""../scam-avoidance-blog.html"">Scam Avoidance Blog <img src=""../theme/glyphs/blog.png"" height=""15"" alt=""scam avoidance blog""></a>
                <a href=""../scam-info-updates.html"" style=""border-radius: 0px 0px 16px 16px;"">Scam Info Updates <img src=""../theme/glyphs/updates.png"" height=""15"" alt=""scam info updates""></a>
            </div>
        </div>

        <!-- Site Related Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Site Related <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""../site-related.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Site Related</b></a>
                <a href=""../all-pages.html"">All Pages <img src=""../theme/glyphs/all-pages.png"" height=""12"" style=""vertical-align:baseline;"" alt=""all pages""></a>
                <a href=""../changelog.html"">Changelog</a>
                <a href=""../downloads.html"">Downloads <img src=""../theme/glyphs/downloads.png"" height=""15"" alt=""downloads""></a>
                <a href=""../get-help.html"">Get Help <img src=""../theme/glyphs/get-help.png"" height=""15"" alt=""get help""></a>
                <a href=""../previews.html"">Previews</a>
                <a href=""../report-an-issue.html"">Report an Issue <img src=""../theme/glyphs/report.png"" height=""15"" alt=""report an issue""></a>
      			<a href=""../saved-site-revisions.html"" style=""border-radius: 0px 0px 16px 16px;"">Saved Site Revisions <img src=""../theme/glyphs/floppy.png"" height=""15""></a>
            </div>
        </div>

        <!-- Help & Contact Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Help & Contact <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""../help-contact.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Help & Contact</b></a>
                <a href=""../contact-me.html"">Contact Me <img src=""../theme/glyphs/contact-me.png"" height=""15"" alt=""contact me""></a>
                <a href=""../website-survey.html"">Site Survey <img src=""../theme/glyphs/survey.png"" height=""15"" alt=""site survey""></a>
                &nbsp;
                <a href=""https://m.youtube.com/channel/UC_xMgHdzp5AWR7rVZ89-sYg"">YouTube <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""youtube""></a>
                <a href=""https://twitter.com/theiphonefan""> 𝕏</a>
                <a href=""https://www.instagram.com/theiphonefan_/"">Instagram 📷</a>
                <a href=""mailto:jordan.theiphonefan@gmail.com"" style=""border-radius: 0px 0px 16px 16px;"">Mail ✉️</a>
            </div>
        </div>

        <!-- Store -->
        <a href=""../previews/store.html"">Store <img src=""../theme/glyphs/store.png"" height=""15"" alt=""store""></a>
    </div>
    </div>

    <!-- Sidebar Button -->
    <button class=""openbtn"" onclick=""toggleSidebar()"" title=""sidebar button"">☰</button>

    <div class=""sidebar"" id=""mySidebar"">
        <h3 style=""color:black;margin-top:40px;"">TheiPhoneFan.com</h3>
        <a href=""../index.html"">Home <img src=""../theme/glyphs/home.png"" height=""15"" alt=""apple archive""></a>
        <details>
            <summary>Channel Related</summary>
            <a href=""../channel-related.html""><b>Channel Related</b></a>
            <a href=""https://www.youtube.com/@theiphonefan761/about"">Channel Info <img src=""../theme/glyphs/channel-info.png"" height=""15"" alt=""channel info""></a>
            <a href=""../music-i-use.html"">Music I Use <img src=""../theme/glyphs/music-i-use.png"" height=""15"" alt=""music i use""></a>
            <a href=""../my-playlists.html"">My Playlists <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""my playlists""></a>
            <a href=""../my-top-5-vids.html"">My Top 5 Vids <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""top 5 vids""></a>
            <a href=""../my-videos.html"">My Videos <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""my videos""></a>
            <a href=""../thumbnail-design.html"">Thumbnail Design <img src=""../theme/glyphs/thumbnail-design.png"" height=""15"" alt=""thumbnail design""></a>
            <hr>
        </details>
        <details>
            <summary>Content</summary>
            <a href=""../content.html""><b>Content</b></a>
            <a href=""../apple-archive.html"">Apple Archive <img src=""../theme/glyphs/apple.png"" height=""15"" alt=""apple archive""></a>
            <a href=""../apple-concepts.html"">Apple Concepts <img src=""../theme/glyphs/apple.png"" height=""15"" alt=""apple concepts""></a>
            <a href=""../articles.html"">Articles <img src=""../theme/glyphs/articles.png"" height=""15"" alt=""articles""></a>
            <a href=""../blog.html"">Blog <img src=""../theme/glyphs/blog.png"" height=""15"" alt=""blog""></a>
            <a href=""../clipart.html"">Clipart <img src=""../theme/glyphs/clipart.png"" height=""15"" alt=""clipart""></a>
            <a href=""../my-photography.html"">My Photography <img src=""../theme/glyphs/my-photography.png"" height=""15"" alt=""my photography""></a>
            <a href=""../wallpapers.html"">Wallpapers <img src=""../theme/glyphs/wallpapers.png"" height=""20"" alt=""wallpapers""></a>
            <hr>
        </details>
        <details>
            <summary>Scam Avoidance</summary>
            <a href=""../scam-avoidance.html""><b>Scam Avoidance</b></a>
            <a href=""../report-a-scam.html"">Report a Scam <img src=""../theme/glyphs/report.png"" height=""15"" alt=""report a scam""></a>
            <a href=""../scam-avoidance-blog.html"">Scam Avoidance Blog <img src=""../theme/glyphs/blog.png"" height=""15"" alt=""scam avoidance blog""></a>
            <a href=""../scam-info-updates.html"">Scam Info Updates <img src=""../theme/glyphs/updates.png"" height=""15"" alt=""scam info updates""></a>
            <hr>
        </details>
        <details>
            <summary>Site Related</summary>
            <a href=""../site-related.html""><b>Site Related</b></a>
            <a href=""../all-pages.html"">All Pages <img src=""../theme/glyphs/all-pages.png"" height=""12"" style=""vertical-align:baseline;"" alt=""all pages""></a>
            <a href=""../changelog.html"">Changelog</a>
            <a href=""../downloads.html"">Downloads <img src=""../theme/glyphs/downloads.png"" height=""15"" alt=""downloads""></a>
            <a href=""../get-help.html"">Get Help <img src=""../theme/glyphs/get-help.png"" height=""15"" alt=""get help""></a>
            <a href=""../previews.html"">Previews</a>
            <a href=""../report-an-issue.html"">Report an Issue <img src=""../theme/glyphs/report.png"" height=""15"" alt=""report an issue""></a>
            <a href=""../saved-site-revisions.html"">Saved Site Revisions <img src=""../theme/glyphs/floppy.png"" height=""15"" alt=""saved site revisions""></a>
            <hr>
        </details>
        <details>
            <summary>Help & Contact</summary>
            <a href=""../help-contact.html""><b>Help & Contact</b></a>
            <a href=""../contact-me.html"">Contact Me <img src=""../theme/glyphs/contact-me.png"" height=""15"" alt=""contact me""></a>
            <a href=""../website-survey.html"">Site Survey <img src=""../theme/glyphs/survey.png"" height=""15"" alt=""site survey""></a>
            <hr>
        </details>
        <a href=""../previews/store.html"">Store <img src=""../theme/glyphs/store.png"" height=""20"" alt=""store""></a>

        <div style=""margin-bottom:20px;text-align:center;"">
            <a href=""https://www.youtube.com/channel/UC_xMgHdzp5AWR7rVZ89-sYg"" style=""padding:0px;background-color:transparent;display:inline;"">
                <img src=""../theme/social-icons/youtube-social.png"" alt=""My YouTube Channel"" width=""40"">
            </a>
            <a href=""https://twitter.com/theiphonefan"" style=""padding:0px;background-color:transparent;display:inline;"">
                <img src=""../theme/social-icons/x-social.png"" alt=""My X Account"" width=""40"">
            </a>
            <a href=""https://instagram.com/theiphonefan_/"" style=""padding:0px;background-color:transparent;display:inline;"">
                <img src=""../theme/social-icons/instagram-social.png"" alt=""My Instagram Account"" width=""40"">
            </a>
            <a href=""mailto:jordan.theiphonefan@gmail.com"" style=""padding:0px;background-color:transparent;display:inline;"">
                <img src=""../theme/social-icons/mail-social.png"" alt=""Email Me"" width=""40"">
            </a>
        </div>
    </div>"
8QgnM98P,6.0.3 Sidebar/Navbar For New Home Page Preview,TheiPhoneFan,HTML,Sunday 24th of March 2024 12:44:31 PM CDT,"    <!-- Top Bar -->
    <div class=""navbar"" style=""border-radius: 13px 13px 13px 13px;"">
        <!-- Site Title -->
        <a href=""../index.html"" style=""background-color:transparent;cursor:pointer;color:black;""><b>Jordan's Blog</b></a>

        <!-- Home -->
        <a href=""../index.html"">Home <img src=""../theme/glyphs/home.png"" height=""15"" alt=""home""></a>

        <!-- Channel Related Dropdown -->
        <div class=""dropdown"">
            <button class=""dropbtn"" title=""dropdown"">Channel Related <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""../channel-related.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Channel Related</b> <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""channel related""></a>
                <a href=""https://www.youtube.com/@theiphonefan761/about"">Channel Info <img src=""../theme/glyphs/channel-info.png"" height=""15"" alt=""channel info""></a>
                <a href=""../music-i-use.html"">Music I Use <img src=""../theme/glyphs/music-i-use.png"" height=""15"" alt=""music i use""></a>
                <a href=""../my-playlists.html"">My Playlists <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""my playlists""></a>
                <a href=""../my-top-5-vids.html"">My Top 5 Vids <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""top 5 vids""></a>
                <a href=""../my-videos.html"">My Videos <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""my videos""></a>
                <a href=""../thumbnail-design.html"" style=""border-radius: 0px 0px 16px 16px;"">Thumbnail Design <img src=""../theme/glyphs/thumbnail-design.png"" height=""15"" alt=""thumbnail design""></a>
            </div>
        </div>

        <!-- Content Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Content <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""../content.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Content</b></a>
                <a href=""../apple-archive.html"">Apple Archive <img src=""../theme/glyphs/apple.png"" height=""15"" alt=""apple archive""></a>
                <a href=""../apple-concepts.html"">Apple Concepts <img src=""../theme/glyphs/apple.png"" height=""15"" alt=""apple concepts""></a>
                <a href=""../articles.html"">Articles <img src=""../theme/glyphs/articles.png"" height=""15"" alt=""articles""></a>
                <a href=""../blog.html"">Blog <img src=""../theme/glyphs/blog.png"" height=""15"" alt=""blog""></a>
                <a href=""../clipart.html"">Clipart <img src=""../theme/glyphs/clipart.png"" height=""15"" alt=""clipart""></a>
                <a href=""../my-photography.html"">My Photography <img src=""../theme/glyphs/my-photography.png"" height=""15"" alt=""my photography""></a>
                <a href=""../wallpapers.html"" style=""border-radius: 0px 0px 16px 16px;"">Wallpapers <img src=""../theme/glyphs/wallpapers.png"" height=""20"" alt=""wallpapers""></a>
            </div>
        </div>

        <!-- Scam Avoidance Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Scam Avoidance <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""../scam-avoidance.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Scam Avoidance</b></a>
                <a href=""../report-a-scam.html"">Report a Scam <img src=""../theme/glyphs/report.png"" height=""15"" alt=""report a scam""></a>
                <a href=""../scam-avoidance-blog.html"">Scam Avoidance Blog <img src=""../theme/glyphs/blog.png"" height=""15"" alt=""scam avoidance blog""></a>
                <a href=""../scam-info-updates.html"" style=""border-radius: 0px 0px 16px 16px;"">Scam Info Updates <img src=""../theme/glyphs/updates.png"" height=""15"" alt=""scam info updates""></a>
            </div>
        </div>

        <!-- Site Related Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Site Related <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""../site-related.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Site Related</b></a>
                <a href=""../all-pages.html"">All Pages <img src=""../theme/glyphs/all-pages.png"" height=""12"" style=""vertical-align:baseline;"" alt=""all pages""></a>
                <a href=""../changelog.html"">Changelog</a>
                <a href=""../downloads.html"">Downloads <img src=""../theme/glyphs/downloads.png"" height=""15"" alt=""downloads""></a>
                <a href=""../get-help.html"">Get Help <img src=""../theme/glyphs/get-help.png"" height=""15"" alt=""get help""></a>
                <a href=""../previews.html"">Previews</a>
                <a href=""../report-an-issue.html"">Report an Issue <img src=""../theme/glyphs/report.png"" height=""15"" alt=""report an issue""></a>
      			<a href=""../saved-site-revisions.html"" style=""border-radius: 0px 0px 16px 16px;"">Saved Site Revisions <img src=""../theme/glyphs/floppy.png"" height=""15""></a>
            </div>
        </div>

        <!-- Help & Contact Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Help & Contact <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""../help-contact.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Help & Contact</b></a>
                <a href=""../contact-me.html"">Contact Me <img src=""../theme/glyphs/contact-me.png"" height=""15"" alt=""contact me""></a>
                <a href=""../website-survey.html"">Site Survey <img src=""../theme/glyphs/survey.png"" height=""15"" alt=""site survey""></a>
            </div>
        </div>
    </div>
    </div>

    <!-- Sidebar Button -->
    <button class=""openbtn"" onclick=""toggleSidebar()"" title=""sidebar button"">☰</button>

    <div class=""sidebar"" id=""mySidebar"">
        <h3 style=""color:black;margin-top:40px;"">Jordan's Blog</h3>
        <a href=""../index.html"">Home <img src=""../theme/glyphs/home.png"" height=""15"" alt=""apple archive""></a>
        <details>
            <summary>Channel Related</summary>
            <a href=""../channel-related.html""><b>Channel Related</b></a>
            <a href=""https://www.youtube.com/@theiphonefan761/about"">Channel Info <img src=""../theme/glyphs/channel-info.png"" height=""15"" alt=""channel info""></a>
            <a href=""../music-i-use.html"">Music I Use <img src=""../theme/glyphs/music-i-use.png"" height=""15"" alt=""music i use""></a>
            <a href=""../my-playlists.html"">My Playlists <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""my playlists""></a>
            <a href=""../my-top-5-vids.html"">My Top 5 Vids <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""top 5 vids""></a>
            <a href=""../my-videos.html"">My Videos <img src=""../theme/glyphs/triangle.png"" height=""15"" alt=""my videos""></a>
            <a href=""../thumbnail-design.html"">Thumbnail Design <img src=""../theme/glyphs/thumbnail-design.png"" height=""15"" alt=""thumbnail design""></a>
            <hr>
        </details>
        <details>
            <summary>Content</summary>
            <a href=""../content.html""><b>Content</b></a>
            <a href=""../apple-archive.html"">Apple Archive <img src=""../theme/glyphs/apple.png"" height=""15"" alt=""apple archive""></a>
            <a href=""../apple-concepts.html"">Apple Concepts <img src=""../theme/glyphs/apple.png"" height=""15"" alt=""apple concepts""></a>
            <a href=""../articles.html"">Articles <img src=""../theme/glyphs/articles.png"" height=""15"" alt=""articles""></a>
            <a href=""../blog.html"">Blog <img src=""../theme/glyphs/blog.png"" height=""15"" alt=""blog""></a>
            <a href=""../clipart.html"">Clipart <img src=""../theme/glyphs/clipart.png"" height=""15"" alt=""clipart""></a>
            <a href=""../my-photography.html"">My Photography <img src=""../theme/glyphs/my-photography.png"" height=""15"" alt=""my photography""></a>
            <a href=""../wallpapers.html"">Wallpapers <img src=""../theme/glyphs/wallpapers.png"" height=""20"" alt=""wallpapers""></a>
            <hr>
        </details>
        <details>
            <summary>Scam Avoidance</summary>
            <a href=""../scam-avoidance.html""><b>Scam Avoidance</b></a>
            <a href=""../report-a-scam.html"">Report a Scam <img src=""../theme/glyphs/report.png"" height=""15"" alt=""report a scam""></a>
            <a href=""../scam-avoidance-blog.html"">Scam Avoidance Blog <img src=""../theme/glyphs/blog.png"" height=""15"" alt=""scam avoidance blog""></a>
            <a href=""../scam-info-updates.html"">Scam Info Updates <img src=""../theme/glyphs/updates.png"" height=""15"" alt=""scam info updates""></a>
            <hr>
        </details>
        <details>
            <summary>Site Related</summary>
            <a href=""../site-related.html""><b>Site Related</b></a>
            <a href=""../all-pages.html"">All Pages <img src=""../theme/glyphs/all-pages.png"" height=""12"" style=""vertical-align:baseline;"" alt=""all pages""></a>
            <a href=""../changelog.html"">Changelog</a>
            <a href=""../downloads.html"">Downloads <img src=""../theme/glyphs/downloads.png"" height=""15"" alt=""downloads""></a>
            <a href=""../get-help.html"">Get Help <img src=""../theme/glyphs/get-help.png"" height=""15"" alt=""get help""></a>
            <a href=""../previews.html"">Previews</a>
            <a href=""../report-an-issue.html"">Report an Issue <img src=""../theme/glyphs/report.png"" height=""15"" alt=""report an issue""></a>
            <a href=""../saved-site-revisions.html"">Saved Site Revisions <img src=""../theme/glyphs/floppy.png"" height=""15"" alt=""saved site revisions""></a>
            <hr>
        </details>
        <details>
            <summary>Help & Contact</summary>
            <a href=""../help-contact.html""><b>Help & Contact</b></a>
            <a href=""../contact-me.html"">Contact Me <img src=""../theme/glyphs/contact-me.png"" height=""15"" alt=""contact me""></a>
            <a href=""../website-survey.html"">Site Survey <img src=""../theme/glyphs/survey.png"" height=""15"" alt=""site survey""></a>
            <hr>
        </details>

        <div style=""margin-bottom:20px;text-align:center;"">
            <a href=""https://www.youtube.com/channel/UC_xMgHdzp5AWR7rVZ89-sYg"" style=""padding:0px;background-color:transparent;display:inline;"">
                <img src=""../theme/social-icons/youtube-social.png"" alt=""My YouTube Channel"" width=""40"">
            </a>
            <a href=""https://twitter.com/theiphonefan"" style=""padding:0px;background-color:transparent;display:inline;"">
                <img src=""../theme/social-icons/x-social.png"" alt=""My X Account"" width=""40"">
            </a>
            <a href=""https://instagram.com/theiphonefan_/"" style=""padding:0px;background-color:transparent;display:inline;"">
                <img src=""../theme/social-icons/instagram-social.png"" alt=""My Instagram Account"" width=""40"">
            </a>
            <a href=""mailto:jordan.theiphonefan@gmail.com"" style=""padding:0px;background-color:transparent;display:inline;"">
                <img src=""../theme/social-icons/mail-social.png"" alt=""Email Me"" width=""40"">
            </a>
        </div>
    </div>"
Tg71M189,6.0.3 Home Page Sidebar/Navbar,TheiPhoneFan,HTML,Sunday 24th of March 2024 12:43:57 PM CDT,"    <!-- Top Bar -->
    <div class=""navbar"" style=""border-radius: 13px 13px 13px 13px;"">
        <!-- Site Title -->
        <a href=""./index.html"" style=""background-color:transparent;cursor:pointer;color:black;""><b>TheiPhoneFan.com</b></a>

        <!-- Home -->
        <a href=""./index.html"">Home <img src=""./theme/glyphs/home.png"" height=""15"" alt=""home""></a>

        <!-- Channel Related Dropdown -->
        <div class=""dropdown"">
            <button class=""dropbtn"" title=""dropdown"">Channel Related <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""./channel-related.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Channel Related</b> <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""channel related""></a>
                <a href=""https://www.youtube.com/@theiphonefan761/about"">Channel Info <img src=""./theme/glyphs/channel-info.png"" height=""15"" alt=""channel info""></a>
                <a href=""./music-i-use.html"">Music I Use <img src=""./theme/glyphs/music-i-use.png"" height=""15"" alt=""music i use""></a>
                <a href=""./my-playlists.html"">My Playlists <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""my playlists""></a>
                <a href=""./my-top-5-vids.html"">My Top 5 Vids <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""top 5 vids""></a>
                <a href=""./my-videos.html"">My Videos <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""my videos""></a>
                <a href=""./thumbnail-design.html"" style=""border-radius: 0px 0px 16px 16px;"">Thumbnail Design <img src=""./theme/glyphs/thumbnail-design.png"" height=""15"" alt=""thumbnail design""></a>
            </div>
        </div>

        <!-- Content Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Content <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""./content.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Content</b></a>
                <a href=""./apple-archive.html"">Apple Archive <img src=""./theme/glyphs/apple.png"" height=""15"" alt=""apple archive""></a>
                <a href=""./apple-concepts.html"">Apple Concepts <img src=""./theme/glyphs/apple.png"" height=""15"" alt=""apple concepts""></a>
                <a href=""./articles.html"">Articles <img src=""./theme/glyphs/articles.png"" height=""15"" alt=""articles""></a>
                <a href=""./blog.html"">Blog <img src=""./theme/glyphs/blog.png"" height=""15"" alt=""blog""></a>
                <a href=""./clipart.html"">Clipart <img src=""./theme/glyphs/clipart.png"" height=""15"" alt=""clipart""></a>
                <a href=""./my-photography.html"">My Photography <img src=""./theme/glyphs/my-photography.png"" height=""15"" alt=""my photography""></a>
                <a href=""./wallpapers.html"" style=""border-radius: 0px 0px 16px 16px;"">Wallpapers <img src=""./theme/glyphs/wallpapers.png"" height=""20"" alt=""wallpapers""></a>
            </div>
        </div>

        <!-- Scam Avoidance Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Scam Avoidance <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""./scam-avoidance.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Scam Avoidance</b></a>
                <a href=""./report-a-scam.html"">Report a Scam <img src=""./theme/glyphs/report.png"" height=""15"" alt=""report a scam""></a>
                <a href=""./scam-avoidance-blog.html"">Scam Avoidance Blog <img src=""./theme/glyphs/blog.png"" height=""15"" alt=""scam avoidance blog""></a>
                <a href=""./scam-info-updates.html"" style=""border-radius: 0px 0px 16px 16px;"">Scam Info Updates <img src=""./theme/glyphs/updates.png"" height=""15"" alt=""scam info updates""></a>
            </div>
        </div>

        <!-- Site Related Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Site Related <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""./site-related.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Site Related</b></a>
                <a href=""./all-pages.html"">All Pages <img src=""./theme/glyphs/all-pages.png"" height=""12"" style=""vertical-align:baseline;"" alt=""all pages""></a>
                <a href=""./changelog.html"">Changelog</a>
                <a href=""./downloads.html"">Downloads <img src=""./theme/glyphs/downloads.png"" height=""15"" alt=""downloads""></a>
                <a href=""./get-help.html"">Get Help <img src=""./theme/glyphs/get-help.png"" height=""15"" alt=""get help""></a>
                <a href=""./previews.html"">Previews</a>
                <a href=""./report-an-issue.html"">Report an Issue <img src=""./theme/glyphs/report.png"" height=""15"" alt=""report an issue""></a>
                <a href=""./saved-site-revisions.html"" style=""border-radius: 0px 0px 16px 16px;"">Saved Site Revisions <img src=""./theme/glyphs/floppy.png"" height=""15""></a>            </div>
        </div>

        <!-- Help & Contact Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Help & Contact <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""./help-contact.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Help & Contact</b></a>
                <a href=""./contact-me.html"">Contact Me <img src=""./theme/glyphs/contact-me.png"" height=""15"" alt=""contact me""></a>
                <a href=""./website-survey.html"">Site Survey <img src=""./theme/glyphs/survey.png"" height=""15"" alt=""site survey""></a>
                &nbsp;
                <a href=""https://m.youtube.com/channel/UC_xMgHdzp5AWR7rVZ89-sYg"">YouTube <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""youtube""></a>
                <a href=""https://twitter.com/theiphonefan""> 𝕏</a>
                <a href=""https://www.instagram.com/theiphonefan_/"">Instagram 📷</a>
                <a href=""mailto:jordan.theiphonefan@gmail.com"" style=""border-radius: 0px 0px 16px 16px;"">Mail ✉️</a>
            </div>
        </div>
    </div>
    </div>

    <!-- Sidebar Button -->
    <button class=""openbtn"" onclick=""toggleSidebar()"" title=""sidebar button"">☰</button>

    <div class=""sidebar"" id=""mySidebar"">
        <h3 style=""color:black;margin-top:40px;"">TheiPhoneFan.com</h3>
        <a href=""./index.html"">Home <img src=""./theme/glyphs/home.png"" height=""15"" alt=""home""></a>
        <details>
            <summary>Channel Related</summary>
            <a href=""./channel-related.html""><b>Channel Related</b></a>
            <a href=""https://www.youtube.com/@theiphonefan761/about"">Channel Info <img src=""./theme/glyphs/channel-info.png"" height=""15"" alt=""channel info""></a>
            <a href=""./music-i-use.html"">Music I Use <img src=""./theme/glyphs/music-i-use.png"" height=""15"" alt=""music i use""></a>
            <a href=""./my-playlists.html"">My Playlists <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""my playlists""></a>
            <a href=""./my-top-5-vids.html"">My Top 5 Vids <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""top 5 vids""></a>
            <a href=""./my-videos.html"">My Videos <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""my videos""></a>
            <a href=""./thumbnail-design.html"">Thumbnail Design <img src=""./theme/glyphs/thumbnail-design.png"" height=""15"" alt=""thumbnail design""></a>
            <hr>
        </details>
        <details>
            <summary>Content</summary>
            <a href=""./content.html""><b>Content</b></a>
            <a href=""./apple-archive.html"">Apple Archive <img src=""./theme/glyphs/apple.png"" height=""15"" alt=""apple archive""></a>
            <a href=""./apple-concepts.html"">Apple Concepts <img src=""./theme/glyphs/apple.png"" height=""15"" alt=""apple concepts""></a>
            <a href=""./articles.html"">Articles <img src=""./theme/glyphs/articles.png"" height=""15"" alt=""articles""></a>
            <a href=""./blog.html"">Blog <img src=""./theme/glyphs/blog.png"" height=""15"" alt=""blog""></a>
            <a href=""./clipart.html"">Clipart <img src=""./theme/glyphs/clipart.png"" height=""15"" alt=""clipart""></a>
            <a href=""./my-photography.html"">My Photography <img src=""./theme/glyphs/my-photography.png"" height=""15"" alt=""my photography""></a>
            <a href=""./wallpapers.html"">Wallpapers <img src=""./theme/glyphs/wallpapers.png"" height=""20"" alt=""wallpapers""></a>
            <hr>
        </details>
        <details>
            <summary>Scam Avoidance</summary>
            <a href=""./scam-avoidance.html""><b>Scam Avoidance</b></a>
            <a href=""./report-a-scam.html"">Report a Scam <img src=""./theme/glyphs/report.png"" height=""15"" alt=""report a scam""></a>
            <a href=""./scam-avoidance-blog.html"">Scam Avoidance Blog <img src=""./theme/glyphs/blog.png"" height=""15"" alt=""scam avoidance blog""></a>
            <a href=""./scam-info-updates.html"">Scam Info Updates <img src=""./theme/glyphs/updates.png"" height=""15"" alt=""scam info updates""></a>
            <hr>
        </details>
        <details>
            <summary>Site Related</summary>
            <a href=""./site-related.html""><b>Site Related</b></a>
            <a href=""./all-pages.html"">All Pages <img src=""./theme/glyphs/all-pages.png"" height=""12"" style=""vertical-align:baseline;"" alt=""all pages""></a>
            <a href=""./changelog.html"">Changelog</a>
            <a href=""./downloads.html"">Downloads <img src=""./theme/glyphs/downloads.png"" height=""15"" alt=""downloads""></a>
            <a href=""./get-help.html"">Get Help <img src=""./theme/glyphs/get-help.png"" height=""15"" alt=""get help""></a>
            <a href=""./previews.html"">Previews</a>
            <a href=""./report-an-issue.html"">Report an Issue <img src=""./theme/glyphs/report.png"" height=""15"" alt=""report an issue""></a>
            <a href=""./saved-site-revisions.html"">Saved Site Revisions <img src=""./theme/glyphs/floppy.png"" height=""15"" alt=""saved site revisions""></a>
            <hr>
        </details>
        <details>
            <summary>Help & Contact</summary>
            <a href=""./help-contact.html""><b>Help & Contact</b></a>
            <a href=""./contact-me.html"">Contact Me <img src=""./theme/glyphs/contact-me.png"" height=""15"" alt=""contact me""></a>
            <a href=""./website-survey.html"">Site Survey <img src=""./theme/glyphs/survey.png"" height=""15"" alt=""site survey""></a>
            <hr>
        </details>

        <div style=""margin-bottom:20px;text-align:center;"">
            <a href=""https://www.youtube.com/channel/UC_xMgHdzp5AWR7rVZ89-sYg"" style=""padding:0px;background-color:transparent;display:inline;"">
                <img src=""./theme/social-icons/youtube-social.png"" alt=""My YouTube Channel"" width=""40"">
            </a>
            <a href=""https://twitter.com/theiphonefan"" style=""padding:0px;background-color:transparent;display:inline;"">
                <img src=""./theme/social-icons/x-social.png"" alt=""My X Account"" width=""40"">
            </a>
            <a href=""https://instagram.com/theiphonefan_/"" style=""padding:0px;background-color:transparent;display:inline;"">
                <img src=""./theme/social-icons/instagram-social.png"" alt=""My Instagram Account"" width=""40"">
            </a>
            <a href=""mailto:jordan.theiphonefan@gmail.com"" style=""padding:0px;background-color:transparent;display:inline;"">
                <img src=""./theme/social-icons/mail-social.png"" alt=""Email Me"" width=""40"">
            </a>
        </div>
    </div>"
RnRcU94n,6.0.3 Page Sidebar/Navbar,TheiPhoneFan,HTML,Sunday 24th of March 2024 12:42:49 PM CDT,"    <!-- Top Bar -->
    <div class=""navbar"">
        <!-- Site Title -->
        <a href=""./index.html"" style=""background-color:transparent;cursor:pointer;color:black;""><b>TheiPhoneFan.com</b></a>

        <!-- Home -->
        <a href=""./index.html"">Home <img src=""./theme/glyphs/home.png"" height=""15"" alt=""home""></a>

        <!-- Channel Related Dropdown -->
        <div class=""dropdown"">
            <button class=""dropbtn"" title=""dropdown"">Channel Related <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""./channel-related.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Channel Related</b> <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""channel related""></a>
                <a href=""https://www.youtube.com/@theiphonefan761/about"">Channel Info <img src=""./theme/glyphs/channel-info.png"" height=""15"" alt=""channel info""></a>
                <a href=""./music-i-use.html"">Music I Use <img src=""./theme/glyphs/music-i-use.png"" height=""15"" alt=""music i use""></a>
                <a href=""./my-playlists.html"">My Playlists <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""my playlists""></a>
                <a href=""./my-top-5-vids.html"">My Top 5 Vids <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""top 5 vids""></a>
                <a href=""./my-videos.html"">My Videos <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""my videos""></a>
                <a href=""./thumbnail-design.html"" style=""border-radius: 0px 0px 16px 16px;"">Thumbnail Design <img src=""./theme/glyphs/thumbnail-design.png"" height=""15"" alt=""thumbnail design""></a>
            </div>
        </div>

        <!-- Content Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Content <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""./content.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Content</b></a>
                <a href=""./apple-archive.html"">Apple Archive <img src=""./theme/glyphs/apple.png"" height=""15"" alt=""apple archive""></a>
                <a href=""./apple-concepts.html"">Apple Concepts <img src=""./theme/glyphs/apple.png"" height=""15"" alt=""apple concepts""></a>
                <a href=""./articles.html"">Articles <img src=""./theme/glyphs/articles.png"" height=""15"" alt=""articles""></a>
                <a href=""./blog.html"">Blog <img src=""./theme/glyphs/blog.png"" height=""15"" alt=""blog""></a>
                <a href=""./clipart.html"">Clipart <img src=""./theme/glyphs/clipart.png"" height=""15"" alt=""clipart""></a>
                <a href=""./my-photography.html"">My Photography <img src=""./theme/glyphs/my-photography.png"" height=""15"" alt=""my photography""></a>
                <a href=""./wallpapers.html"" style=""border-radius: 0px 0px 16px 16px;"">Wallpapers <img src=""./theme/glyphs/wallpapers.png"" height=""20"" alt=""wallpapers""></a>
            </div>
        </div>

        <!-- Scam Avoidance Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Scam Avoidance <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""./scam-avoidance.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Scam Avoidance</b></a>
                <a href=""./report-a-scam.html"">Report a Scam <img src=""./theme/glyphs/report.png"" height=""15"" alt=""report a scam""></a>
                <a href=""./scam-avoidance-blog.html"">Scam Avoidance Blog <img src=""./theme/glyphs/blog.png"" height=""15"" alt=""scam avoidance blog""></a>
                <a href=""./scam-info-updates.html"" style=""border-radius: 0px 0px 16px 16px;"">Scam Info Updates <img src=""./theme/glyphs/updates.png"" height=""15"" alt=""scam info updates""></a>
            </div>
        </div>

        <!-- Site Related Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Site Related <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""./site-related.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Site Related</b></a>
                <a href=""./all-pages.html"">All Pages <img src=""./theme/glyphs/all-pages.png"" height=""12"" style=""vertical-align:baseline;"" alt=""all pages""></a>
                <a href=""./changelog.html"">Changelog</a>
                <a href=""./downloads.html"">Downloads <img src=""./theme/glyphs/downloads.png"" height=""15"" alt=""downloads""></a>
                <a href=""./get-help.html"">Get Help <img src=""./theme/glyphs/get-help.png"" height=""15"" alt=""get help""></a>
                <a href=""./previews.html"">Previews</a>
                <a href=""./report-an-issue.html"">Report an Issue <img src=""./theme/glyphs/report.png"" height=""15"" alt=""report an issue""></a>
                <a href=""./saved-site-revisions.html"" style=""border-radius: 0px 0px 16px 16px;"">Saved Site Revisions <img src=""./theme/glyphs/floppy.png"" height=""15""></a>            </div>
        </div>

        <!-- Help & Contact Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Help & Contact <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""./help-contact.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Help & Contact</b></a>
                <a href=""./contact-me.html"">Contact Me <img src=""./theme/glyphs/contact-me.png"" height=""15"" alt=""contact me""></a>
                <a href=""./website-survey.html"">Site Survey <img src=""./theme/glyphs/survey.png"" height=""15"" alt=""site survey""></a>
                &nbsp;
                <a href=""https://m.youtube.com/channel/UC_xMgHdzp5AWR7rVZ89-sYg"">YouTube <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""youtube""></a>
                <a href=""https://twitter.com/theiphonefan""> 𝕏</a>
                <a href=""https://www.instagram.com/theiphonefan_/"">Instagram 📷</a>
                <a href=""mailto:jordan.theiphonefan@gmail.com"" style=""border-radius: 0px 0px 16px 16px;"">Mail ✉️</a>
            </div>
        </div>
    </div>
    </div>

    <!-- Sidebar Button -->
    <button class=""openbtn"" onclick=""toggleSidebar()"" title=""sidebar button"">☰</button>

    <div class=""sidebar"" id=""mySidebar"">
        <h3 style=""color:black;margin-top:40px;"">TheiPhoneFan.com</h3>
        <a href=""./index.html"">Home <img src=""./theme/glyphs/home.png"" height=""15"" alt=""home""></a>
        <details>
            <summary>Channel Related</summary>
            <a href=""./channel-related.html""><b>Channel Related</b></a>
            <a href=""https://www.youtube.com/@theiphonefan761/about"">Channel Info <img src=""./theme/glyphs/channel-info.png"" height=""15"" alt=""channel info""></a>
            <a href=""./music-i-use.html"">Music I Use <img src=""./theme/glyphs/music-i-use.png"" height=""15"" alt=""music i use""></a>
            <a href=""./my-playlists.html"">My Playlists <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""my playlists""></a>
            <a href=""./my-top-5-vids.html"">My Top 5 Vids <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""top 5 vids""></a>
            <a href=""./my-videos.html"">My Videos <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""my videos""></a>
            <a href=""./thumbnail-design.html"">Thumbnail Design <img src=""./theme/glyphs/thumbnail-design.png"" height=""15"" alt=""thumbnail design""></a>
            <hr>
        </details>
        <details>
            <summary>Content</summary>
            <a href=""./content.html""><b>Content</b></a>
            <a href=""./apple-archive.html"">Apple Archive <img src=""./theme/glyphs/apple.png"" height=""15"" alt=""apple archive""></a>
            <a href=""./apple-concepts.html"">Apple Concepts <img src=""./theme/glyphs/apple.png"" height=""15"" alt=""apple concepts""></a>
            <a href=""./articles.html"">Articles <img src=""./theme/glyphs/articles.png"" height=""15"" alt=""articles""></a>
            <a href=""./blog.html"">Blog <img src=""./theme/glyphs/blog.png"" height=""15"" alt=""blog""></a>
            <a href=""./clipart.html"">Clipart <img src=""./theme/glyphs/clipart.png"" height=""15"" alt=""clipart""></a>
            <a href=""./my-photography.html"">My Photography <img src=""./theme/glyphs/my-photography.png"" height=""15"" alt=""my photography""></a>
            <a href=""./wallpapers.html"">Wallpapers <img src=""./theme/glyphs/wallpapers.png"" height=""20"" alt=""wallpapers""></a>
            <hr>
        </details>
        <details>
            <summary>Scam Avoidance</summary>
            <a href=""./scam-avoidance.html""><b>Scam Avoidance</b></a>
            <a href=""./report-a-scam.html"">Report a Scam <img src=""./theme/glyphs/report.png"" height=""15"" alt=""report a scam""></a>
            <a href=""./scam-avoidance-blog.html"">Scam Avoidance Blog <img src=""./theme/glyphs/blog.png"" height=""15"" alt=""scam avoidance blog""></a>
            <a href=""./scam-info-updates.html"">Scam Info Updates <img src=""./theme/glyphs/updates.png"" height=""15"" alt=""scam info updates""></a>
            <hr>
        </details>
        <details>
            <summary>Site Related</summary>
            <a href=""./site-related.html""><b>Site Related</b></a>
            <a href=""./all-pages.html"">All Pages <img src=""./theme/glyphs/all-pages.png"" height=""12"" style=""vertical-align:baseline;"" alt=""all pages""></a>
            <a href=""./changelog.html"">Changelog</a>
            <a href=""./downloads.html"">Downloads <img src=""./theme/glyphs/downloads.png"" height=""15"" alt=""downloads""></a>
            <a href=""./get-help.html"">Get Help <img src=""./theme/glyphs/get-help.png"" height=""15"" alt=""get help""></a>
            <a href=""./previews.html"">Previews</a>
            <a href=""./report-an-issue.html"">Report an Issue <img src=""./theme/glyphs/report.png"" height=""15"" alt=""report an issue""></a>
            <a href=""./saved-site-revisions.html"">Saved Site Revisions <img src=""./theme/glyphs/floppy.png"" height=""15"" alt=""saved site revisions""></a>
            <hr>
        </details>
        <details>
            <summary>Help & Contact</summary>
            <a href=""./help-contact.html""><b>Help & Contact</b></a>
            <a href=""./contact-me.html"">Contact Me <img src=""./theme/glyphs/contact-me.png"" height=""15"" alt=""contact me""></a>
            <a href=""./website-survey.html"">Site Survey <img src=""./theme/glyphs/survey.png"" height=""15"" alt=""site survey""></a>
            <hr>
        </details>

        <div style=""margin-bottom:20px;text-align:center;"">
            <a href=""https://www.youtube.com/channel/UC_xMgHdzp5AWR7rVZ89-sYg"" style=""padding:0px;background-color:transparent;display:inline;"">
                <img src=""./theme/social-icons/youtube-social.png"" alt=""My YouTube Channel"" width=""40"">
            </a>
            <a href=""https://twitter.com/theiphonefan"" style=""padding:0px;background-color:transparent;display:inline;"">
                <img src=""./theme/social-icons/x-social.png"" alt=""My X Account"" width=""40"">
            </a>
            <a href=""https://instagram.com/theiphonefan_/"" style=""padding:0px;background-color:transparent;display:inline;"">
                <img src=""./theme/social-icons/instagram-social.png"" alt=""My Instagram Account"" width=""40"">
            </a>
            <a href=""mailto:jordan.theiphonefan@gmail.com"" style=""padding:0px;background-color:transparent;display:inline;"">
                <img src=""./theme/social-icons/mail-social.png"" alt=""Email Me"" width=""40"">
            </a>
        </div>
    </div>"
adDCBrxe,petr good minimax jen -1000,max2201111,Python,Sunday 24th of March 2024 12:32:08 PM CDT,"import chess

def simplify_fen_string(fen):
    parts = fen.split(' ')
    simplified_fen = ' '.join(parts[:4])  # Zachováváme pouze informace o pozici
    return simplified_fen

def evaluate_position(board):
    if board.is_checkmate():
        return -1000  # Mat protihráči
    elif board.is_stalemate() or board.is_insufficient_material() or board.can_claim_draw():
        return 0  # Remíza
    else:
        return None  # Hra pokračuje

def update_AR_for_mate_in_k(board, AR, max_k=1000):
    k = 0
    while True:
        k += 1
        changed = False
        for _ in range(2):  # Dvakrát pro každou hodnotu k
            for fen in list(AR.keys()):
                board.set_fen(fen)
                if AR[fen] is not None:
                    continue  # Tato pozice již byla ohodnocena

                evaluations = []
                for move in board.legal_moves:
                    board.push(move)
                    next_fen = simplify_fen_string(board.fen())
                    if next_fen not in AR:
                        AR[next_fen] = evaluate_position(board)  # Přidání nových pozic do AR
                    board.pop()

                    if AR[next_fen] is not None:
                        evaluations.append(AR[next_fen])

                # Výpočet nového hodnocení na základě následovníků
                if evaluations:
                    max_eval = -min(evaluations)
                    if max_eval == -1001+k:
                        AR[fen] = 1000 - k
                        changed = True
                    elif 0 in evaluations:
                        AR[fen] = 0
                        changed = True

            if not changed:
                break  # Konec cyklu, pokud nedošlo k žádné změně

        if k >= max_k or not changed:
            break  # Konec hlavního cyklu, pokud dosáhneme max_k nebo nedošlo k žádné změně

            
def print_draw_positions(AR):
    """"""
    Vytiskne všechny remízové pozice (hodnota 0) zaznamenané v slovníku AR.
    """"""
    print(""Remízové pozice:"")
    for fen, value in AR.items():
        if value != None and value < -980 and value > -1010:
            print(f""FEN>: {fen}, Hodnota: {value}"",""\n"",chess.Board(fen),""<\n"")
            
            
def main():
    initial_fen = ""8/8/8/8/3Q4/5K2/8/4k3 w - - 0 1""
    board = chess.Board(initial_fen)
    AR = {simplify_fen_string(initial_fen): None}  # Inicializace AR s počáteční pozicí
    
    update_AR_for_mate_in_k(board, AR, max_k=50)  # Aktualizace AR
    print_draw_positions(AR)
    
    

main()"
xiMSD0xX,SFDESFGSEHG,gadungw71,PHP,Sunday 24th of March 2024 12:29:27 PM CDT,"•	https://github.com/Assistir-Godzilla-e-Kong-2-Dublado
•	https://github.com/Assistir-Filme-Godzilla-x-Kong-2-2024
•	https://github.com/Assistir-Godzilla-e-Kong-2-Online
•	https://www.senscritique.com/liste/Assistir_Godzilla_e_Kong_O_Novo_Imperio_2024_Filme_Completo_Online_Dublado_em_Portugues/3800562
•	https://www.senscritique.com/liste/Assistir_Godzilla_x_Kong_The_New_Empire_2024_Filme_Completo_dublado_em_portugues/3800579
•	https://www.senscritique.com/liste/ASSISTIR_HD_or_Godzilla_e_Kong_O_Novo_Imperio_2023_filme_completo/3800588
•	https://scribehow.com/page/Godzilla_e_Kong_O_Novo_Imperio_2024_Filme_Completo_E_Legendado_Online__lPdk1-OVQLaa_IjU0bzTtw
•	https://scribehow.com/page/Assistir-HD_Godzilla_e_Kong_O_Novo_Imperio_Filme_Completo_em_Portugues__zF289cd5SKqDmKk8i641xw
•	https://scribehow.com/page/_ASSISTIR_HD_or_Godzilla_x_Kong_The_New_Empire_2024_filme_completo_Dublado_Online_E_Legendado__cphtN7V7TgKKhryIYnjDwA
•	https://www.artstation.com/artwork/zPl1L6
•	https://www.artstation.com/user-5952164/profile
•	https://www.artstation.com/artwork/vDoX6d
•	https://www.artstation.com/user-1815177/profile
•	https://wandering.flarum.cloud/d/51143-taktaleni
•	https://click4r.com/posts/g/15714112/ngaririncik
•	https://hiuderyy.hashnode.dev/batingkolebat
•	https://www.onfeetnation.com/profiles/blogs/rasadedeuh
•	https://medium.com/@kusumadefry/dibarengankingkilaban-df92ffb49d66
•	https://open.firstory.me/story/clu5rqts100eo01vlccwk333o
•	https://forum.mush.com.br/topic/207471/hujanletikngaririncik
•	https://telegra.ph/SIRJAYANTI-03-24
•	https://paste.ee/p/uY8no
•	https://start.me/w/jB61jr
•	https://hackmd.io/@rerewilli6/Sy8SyJ0RT
•	https://rentry.co/upybac2d
•	https://muckrack.com/xeyanojonul-bekhetr/bio
•	https://www.bitsdujour.com/profiles/Zv6EJ7
•	http://aldenfamilydentistry.com/UserProfile/tabid/57/userId/716472/Default.aspx
•	https://profile.hatena.ne.jp/xeyanojonul/
•	https://www.fitlynk.com/1711301080F970799
"
EFfi47ce,🤑 G2A.com Free Gift Card Guide Mar 2024 FIX 🤑,PASUSW,GetText,Sunday 24th of March 2024 12:26:28 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
24 March 2024
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
"
zaQU2qN2,🤑 G2A.com Free Gift Card Guide Mar 2024 FIX 🤑,ounnuo,GetText,Sunday 24th of March 2024 12:24:23 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_498895.pdf

Working as of:
24 March 2024


















"
4ynuqZ0p,Frigate Config for Tapo C200,MarkusLund,YAML,Sunday 24th of March 2024 12:20:26 PM CDT,"mqtt:
  host: 192.168.1.135
  # Optional: port (default: shown below)
  port: 1883
  # Optional: topic prefix (default: shown below)
  # WARNING: must be unique if you are running multiple instances
  topic_prefix: frigate
  # Optional: client id (default: shown below)
  # WARNING: must be unique if you are running multiple instances
  client_id: frigate
  # Optional: user
  user: USER_FOR_MQTT
  # Optional: password
  # NOTE: Environment variables that begin with 'FRIGATE_' may be referenced in {}.
  #       eg. password: '{FRIGATE_MQTT_PASSWORD}'
  password: PASSWORD_FOR_MQTT
  # Optional: interval in seconds for publishing stats (default: shown below)
  stats_interval: 60
cameras:
  front:
    ffmpeg:
      inputs:
        - path: rtsp://USER:PASSWORD@192.168.1.123/stream2
          roles:
            - detect
        - path: rtsp://USER:PASSWORD@192.168.1.123/stream1
          roles:
            - record
    detect:
      enabled: True
      max_disappeared: 25

    
    rtmp:
      # Required: Enable the live stream (default: True)
      enabled: False
    snapshots:
      # Optional: Enable writing jpg snapshot to /media/frigate/clips (default: shown below)
      # This value can be set via MQTT and will be updated in startup based on retained value
      enabled: True
      # Optional: print a timestamp on the snapshots (default: shown below)
      timestamp: False
      # Optional: draw bounding box on the snapshots (default: shown below)
      bounding_box: False
      # Optional: crop the snapshot (default: shown below)
      crop: False
      # Optional: height to resize the snapshot to (default: original size)
      height: 500
      # Optional: Restrict snapshots to objects that entered any of the listed zones (default: no required zones)
      required_zones: []
      # Optional: Camera override for retention settings (default: global values)
      retain:
        # Required: Default retention days (default: shown below)
        default: 40
        # Optional: Per object retention days
    objects:
      track:
        - person
        - dog
        - cat
        - bird
      
  back:
    ffmpeg:
      inputs:
        - path: rtsp://USER:PASSWORD@192.168.1.132/stream2
          roles:
            - detect
        - path: rtsp://USER:PASSWORD@192.168.1.132/stream1
          roles:
            - record
    detect:
      enabled: True
      max_disappeared: 25

    rtmp:
      # Required: Enable the live stream (default: True)
      enabled: False
    snapshots:
      # Optional: Enable writing jpg snapshot to /media/frigate/clips (default: shown below)
      # This value can be set via MQTT and will be updated in startup based on retained value
      enabled: True
      # Optional: print a timestamp on the snapshots (default: shown below)
      timestamp: False
      # Optional: draw bounding box on the snapshots (default: shown below)
      bounding_box: False
      # Optional: crop the snapshot (default: shown below)
      crop: False
      # Optional: height to resize the snapshot to (default: original size)
      height: 500
      # Optional: Restrict snapshots to objects that entered any of the listed zones (default: no required zones)
      required_zones: []
      # Optional: Camera override for retention settings (default: global values)
      retain:
        # Required: Default retention days (default: shown below)
        default: 40
        # Optional: Per object retention days
    objects:
      track:
        - person
        - dog
        - cat
        - bird    

record:
  # Optional: Enable recording (default: shown below)
  enabled: true
  # Optional: Number of days to retain recordings regardless of events (default: shown below)
  # NOTE: This should be set to 0 and retention should be defined in events section below
  #       if you only want to retain recordings of events.
  retain:
    days: 7
    mode: motion
  # Optional: Event recording settings
  events:
    # Optional: Number of seconds before the event to include (default: shown below)
    pre_capture: 5
    # Optional: Number of seconds after the event to include (default: shown below)
    post_capture: 5
    # Optional: Objects to save recordings for. (default: all tracked objects)
    objects:
      - person
      - dog
      - cat
      - bird
    # Optional: Restrict recordings to objects that entered any of the listed zones (default: no required zones)
    required_zones: []
    # Optional: Retention settings for recordings of events
    retain:
      # Required: Default retention days (default: shown below)
      default: 20
    
detectors:
  cpu1:
    type: cpu
  cpu2:
    type: cpu"
EWfCC2cu,Untitled,kirkarr,Lua,Sunday 24th of March 2024 12:20:17 PM CDT,"local id = 1
local last = CurTime()
local data = {""THX за луа"", ""Кирилл"", "":)"", ""Яйко"", ""Типо пишу""}
function say(str)
    net.Start(""chatmessage_send"")
    net.WriteString(str)
    net.SendToServer()
end
hook.Add(""Tick"",""sas"",function ()
   	cur = CurTime() 
	if cur - last > 0.5 then
    	say(data[math.random(1,#data)])
        last = CurTime()
    end
end)"
CwQz8Gnr,Untitled,yasi04,Python,Sunday 24th of March 2024 12:14:52 PM CDT,"import os
from dotenv import load_dotenv
import disnake
import asyncio
import sqlite3
from disnake.ext import commands

load_dotenv()

bot = commands.Bot(command_prefix=""!"", help_command=None, intents=disnake.Intents.all())

conn = sqlite3.connect('filters.db')
c = conn.cursor()

c.execute('''CREATE TABLE IF NOT EXISTS text_filters 
             (channel_id INTEGER PRIMARY KEY, filters TEXT)''')

c.execute('''CREATE TABLE IF NOT EXISTS link_filters 
             (channel_id INTEGER PRIMARY KEY, filters TEXT)''')

c.execute('''CREATE TABLE IF NOT EXISTS roles 
             (role TEXT)''')

c.execute('''CREATE TABLE IF NOT EXISTS guest_filters 
             (server INTEGER PRIMARY KEY, filters TEXT)''')

conn.commit()


def link_checker(message):
    c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (message.channel.id,))
    row = c.fetchone()
    if row:
        filters = row[0].split(';')
        if message.content.startswith(""http://"") or message.content.startswith(""https://""):
            flag = True
            for word in filters:
                if word == message.content.split('/')[2]:
                    flag = False
            return flag


def text_checker(message):
    c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (message.channel.id,))
    row = c.fetchone()
    if row:
        text_filters = row[0].split(';')
        flag = True
        if message.content.split(' ')[0] in text_filters:
            flag = False
        return flag


def guest_checker(message):
    c.execute(""SELECT filters FROM guest_filters WHERE server = ?"", (1,))
    row = c.fetchone()
    if row:
        guest_filters = row[0].split(';')
        flag = False
        if (message.content.split(' ')[0] in guest_filters) or ('/' in message.content):
            flag = True
        return flag


@bot.event
async def on_ready():
    print(f""Bot {bot.user} is ready to work!"")


@bot.event
async def on_message(message):
    result = False
    if not message.author.bot:
        for role in message.author.roles:
            print(role, role.id)
            c.execute(""SELECT * FROM roles WHERE role=?"", (role.id,))
            result = c.fetchone()
            if result:
                break
    if result:
        if guest_checker(message):
            await message.delete()
            await message.channel.send(f'*Эта команда доступна только для авторизованных участников сервера, пожалуйста авторизуйтесь и получите роль ""Участник""')
        return
    elif message.author == message.guild.owner:
        return
    elif message.author == bot.user:
        await asyncio.sleep(120)
        await message.delete()
        return
    elif message.author.bot:
        return
    else:
        if message.content.startswith(""http://"") or message.content.startswith(""https://""):
            c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (message.channel.id,))
            row = c.fetchone()
            if row:
                filters = row[0].split(';')
                if link_checker(message):
                    await message.delete()
                    await message.channel.send(f""*В этом канале доступны только* `{filters}`, *Другое не разрешено XD*"")
                    return
        else:
            c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (message.channel.id,))
            row = c.fetchone()
            if row:
                text_filters = row[0].split(';')
                if text_checker(message):
                    await message.delete()
                    await message.channel.send(f""*В этом канале доступны только* `{text_filters}`, *Другое не разрешено XD*"")
                    return

    await bot.process_commands(message)


@bot.slash_command(description=""добавить текстовый фильтр"")
async def add_text_filter(ctx, channel_id: str, filter_text: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        old_filters = row[0]
        new_filters = old_filters + "";"" + filter_text
        c.execute(""UPDATE text_filters SET filters = ? WHERE channel_id = ?"", (new_filters, channel_id))
        conn.commit()
        await ctx.send('Готово')
    else:
        c.execute(""INSERT INTO text_filters (channel_id, filters) VALUES (?, ?)"", (channel_id, filter_text))
        conn.commit()
        await ctx.send('Готово')


@bot.slash_command(description=""добавить гостевой фильтр"")
async def add_guest_filter(ctx, filter_text: str):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM guest_filters WHERE server = ?"", (1,))
    row = c.fetchone()
    if row:
        old_filters = row[0]
        new_filters = old_filters + "";"" + filter_text
        c.execute(""UPDATE guest_filters SET filters = ? WHERE server = ?"", (new_filters, 1))
        conn.commit()
        await ctx.send('Готово')
    else:
        c.execute(""INSERT INTO guest_filters (server, filters) VALUES (?, ?)"", (1, filter_text))
        conn.commit()
        await ctx.send('Готово')


@bot.slash_command(description=""добавить гостевые роли"")
async def add_guest_roles(ctx, role: disnake.Role):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""INSERT INTO roles (role) VALUES (?)"", (role.id,))
    conn.commit()
    await ctx.send('Готово')


@bot.slash_command(description=""удалить гостевые роли"")
async def delete_guest_roles(ctx, role: disnake.Role):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT * FROM roles WHERE role=?"", (role.id,))
    result = c.fetchone()

    if result:
        c.execute(""DELETE FROM roles WHERE role=?"", (role.id,))
        conn.commit()
        await ctx.send('Роль удалена из базы данных')
    else:
        await ctx.send('Роль не найдена в базе данных')


@bot.slash_command(description=""добавить ссылку в фильтр"")
async def add_link_filter(ctx, channel_id: str, filter_link: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        old_filters = row[0]
        new_filters = old_filters + "";"" + filter_link
        c.execute(""UPDATE link_filters SET filters = ? WHERE channel_id = ?"", (new_filters, channel_id))
        conn.commit()
        await ctx.send('Готово')
    else:
        c.execute(""INSERT INTO link_filters (channel_id, filters) VALUES (?, ?)"", (channel_id, filter_link))
        conn.commit()
        await ctx.send('Готово')


@bot.slash_command(description=""удалить текстовый фильтр (выбор)"")
async def delete_filter(ctx, channel_id: str, filters: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        text_filters = row[0].split(';')
        new_text_filters = [filter_word for filter_word in text_filters if filter_word not in filters.split(';')]
        new_text_filters_str = ';'.join(new_text_filters)
        c.execute(""UPDATE text_filters SET filters = ? WHERE channel_id = ?"", (new_text_filters_str, channel_id))
        conn.commit()

        await ctx.send('Готово')
    else:
        await ctx.send('Фильтров для этого канала и не было')


@bot.slash_command(description=""удалить гостевой фильтр (выбор)"")
async def delete_guest_filter(ctx, filters: str):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM guest_filters WHERE server = ?"", (1,))
    row = c.fetchone()
    if row:
        text_filters = row[0].split(';')
        new_text_filters = [filter_word for filter_word in text_filters if filter_word not in filters.split(';')]
        new_text_filters_str = ';'.join(new_text_filters)
        c.execute(""UPDATE guest_filters SET filters = ? WHERE server = ?"", (new_text_filters_str, 1))
        conn.commit()

        await ctx.send('Готово')
    else:
        await ctx.send('Фильтров и не было')


@bot.slash_command(description=""удалить фильтр ссылок (выбор)"")
async def delete_link_filter(ctx, channel_id: str, filters: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        link_filters = row[0].split(';')
        new_link_filters = [filter_link for filter_link in link_filters if filter_link not in filters.split(';')]
        new_link_filters_str = ';'.join(new_link_filters)
        c.execute(""UPDATE link_filters SET filters = ? WHERE channel_id = ?"", (new_link_filters_str, channel_id))
        conn.commit()

        await ctx.send('Готово')
    else:
        await ctx.send('Фильтров для этого канала и не было')


@bot.slash_command(description=""удалить все фильтры для канала"")
async def delete_all_filters(ctx, channel_id: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""DELETE FROM text_filters WHERE channel_id = ?"", (channel_id,))
    c.execute(""DELETE FROM link_filters WHERE channel_id = ?"", (channel_id,))
    conn.commit()

    await ctx.send('Готово')


@bot.slash_command(description=""удалить все фильтры гостей"")
async def delete_all_guest_filters(ctx):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""DELETE FROM guest_filters WHERE server= ?"", (1,))
    conn.commit()

    await ctx.send('Готово')


bot.run(os.getenv('TOKEN'))
"
7HQkaHFc,G2A.com Free Gift Card Guide Mar 2024 FIX,HastyBasher0,GetText,Sunday 24th of March 2024 12:08:58 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

IMPORTANT: If you use this make sure to use the English version of G2A.com otherwise this will not work!

You can buy gift cards directly with it or you can buy popular games then put them on fresh steam accounts and then sell those accounts.
 
PDF guide here:
https://smallpdf.com/file#s=cea149fd-ead1-4939-94cf-d10a8ce7936a
 
Working as of:
24 March 2024















































"
XeLTZKba,Teste,Francisfranteresina,JSON,Sunday 24th of March 2024 11:59:58 AM CDT,"{""Title"":""Spider-Man: No Way Home"",""Year"":""2021"",""Rated"":""PG-13"",""Released"":""17 Dec 2021"",""Runtime"":""148 min"",""Genre"":""Action, Adventure, Fantasy"",""Director"":""Jon Watts"",""Writer"":""Chris McKenna, Erik Sommers, Stan Lee"",""Actors"":""Tom Holland, Zendaya, Benedict Cumberbatch"",""Plot"":""With Spider-Man's identity now revealed, Peter asks Doctor Strange for help. When a spell goes wrong, dangerous foes from other worlds start to appear, forcing Peter to discover what it truly means to be Spider-Man."",""Language"":""English"",""Country"":""United States"",""Awards"":""Nominated for 1 Oscar. 35 wins & 71 nominations total"",""Poster"":""https://m.media-amazon.com/images/M/MV5BZWMyYzFjYTYtNTRjYi00OGExLWE2YzgtOGRmYjAxZTU3NzBiXkEyXkFqcGdeQXVyMzQ0MzA0NTM@._V1_SX300.jpg"",""Ratings"":[{""Source"":""Internet Movie Database"",""Value"":""8.2/10""},{""Source"":""Rotten Tomatoes"",""Value"":""93%""},{""Source"":""Metacritic"",""Value"":""71/100""}],""Metascore"":""71"",""imdbRating"":""8.2"",""imdbVotes"":""870,223"",""imdbID"":""tt10872600"",""Type"":""movie"",""DVD"":""15 Mar 2022"",""BoxOffice"":""$814,115,070"",""Production"":""N/A"",""Website"":""N/A"",""Response"":""True""}"
vSqV6rRR,Untitled,yasi04,Python,Sunday 24th of March 2024 11:53:50 AM CDT,"import os
from dotenv import load_dotenv
import disnake
import asyncio
import sqlite3
from disnake.ext import commands

load_dotenv()

bot = commands.Bot(command_prefix=""!"", help_command=None, intents=disnake.Intents.all())

conn = sqlite3.connect('filters.db')
c = conn.cursor()

c.execute('''CREATE TABLE IF NOT EXISTS text_filters 
             (channel_id INTEGER PRIMARY KEY, filters TEXT)''')

c.execute('''CREATE TABLE IF NOT EXISTS link_filters 
             (channel_id INTEGER PRIMARY KEY, filters TEXT)''')

c.execute('''CREATE TABLE IF NOT EXISTS roles 
             (role TEXT)''')

c.execute('''CREATE TABLE IF NOT EXISTS guest_filters 
             (server INTEGER PRIMARY KEY, filters TEXT)''')

conn.commit()


def link_checker(message):
    c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (message.channel.id,))
    row = c.fetchone()
    if row:
        filters = row[0].split(';')
        if message.content.startswith(""http://"") or message.content.startswith(""https://""):
            flag = True
            for word in filters:
                if word == message.content.split('/')[2]:
                    flag = False
            return flag


def text_checker(message):
    c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (message.channel.id,))
    row = c.fetchone()
    if row:
        text_filters = row[0].split(';')
        flag = True
        if message.content.split(' ')[0] in text_filters:
            flag = False
        return flag


def guest_checker(message):
    c.execute(""SELECT filters FROM guest_filters WHERE server = ?"", (1,))
    row = c.fetchone()
    if row:
        guest_filters = row[0].split(';')
        flag = False
        if (message.content.split(' ')[0] in guest_filters) or ('/' in message.content):
            flag = True
        return flag


@bot.event
async def on_ready():
    print(f""Bot {bot.user} is ready to work!"")


@bot.event
async def on_message(message):
    for role in message.author.roles:
        c.execute(""SELECT * FROM roles WHERE role=?"", (role.id,))
        result = c.fetchone()
        if result:
            break
    if result:
        if guest_checker(message):
            await message.delete()
            await message.channel.send(f'*Эта команда доступна только для авторизованных участников сервера, пожалуйста авторизуйтесь и получите роль ""Участник""')
        return
    elif message.author == message.guild.owner:
        return
    elif message.author == bot.user:
        await asyncio.sleep(120)
        await message.delete()
        return
    elif message.author.bot:
        return
    else:
        if message.content.startswith(""http://"") or message.content.startswith(""https://""):
            c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (message.channel.id,))
            row = c.fetchone()
            if row:
                filters = row[0].split(';')
                if link_checker(message):
                    await message.delete()
                    await message.channel.send(f""*В этом канале доступны только* `{filters}`, *Другое не разрешено XD*"")
                    return
        else:
            c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (message.channel.id,))
            row = c.fetchone()
            if row:
                text_filters = row[0].split(';')
                if text_checker(message):
                    await message.delete()
                    await message.channel.send(f""*В этом канале доступны только* `{text_filters}`, *Другое не разрешено XD*"")
                    return

    await bot.process_commands(message)


@bot.slash_command(description=""добавить текстовый фильтр"")
async def add_text_filter(ctx, channel_id: str, filter_text: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        old_filters = row[0]
        new_filters = old_filters + "";"" + filter_text
        c.execute(""UPDATE text_filters SET filters = ? WHERE channel_id = ?"", (new_filters, channel_id))
        conn.commit()
        await ctx.send('Готово')
    else:
        c.execute(""INSERT INTO text_filters (channel_id, filters) VALUES (?, ?)"", (channel_id, filter_text))
        conn.commit()
        await ctx.send('Готово')


@bot.slash_command(description=""добавить гостевой фильтр"")
async def add_guest_filter(ctx, filter_text: str):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM guest_filters WHERE server = ?"", (1,))
    row = c.fetchone()
    if row:
        old_filters = row[0]
        new_filters = old_filters + "";"" + filter_text
        c.execute(""UPDATE guest_filters SET filters = ? WHERE server = ?"", (new_filters, 1))
        conn.commit()
        await ctx.send('Готово')
    else:
        c.execute(""INSERT INTO guest_filters (server, filters) VALUES (?, ?)"", (1, filter_text))
        conn.commit()
        await ctx.send('Готово')


@bot.slash_command(description=""добавить гостевые роли"")
async def add_guest_roles(ctx, role: disnake.Role):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""INSERT INTO roles (role) VALUES (?)"", (role.id,))
    conn.commit()
    await ctx.send('Готово')


@bot.slash_command(description=""удалить гостевые роли"")
async def delete_guest_roles(ctx, role: disnake.Role):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT * FROM roles WHERE role=?"", (role.id,))
    result = c.fetchone()

    if result:
        c.execute(""DELETE FROM roles WHERE role=?"", (role.id,))
        conn.commit()
        await ctx.send('Роль удалена из базы данных')
    else:
        await ctx.send('Роль не найдена в базе данных')


@bot.slash_command(description=""добавить ссылку в фильтр"")
async def add_link_filter(ctx, channel_id: str, filter_link: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        old_filters = row[0]
        new_filters = old_filters + "";"" + filter_link
        c.execute(""UPDATE link_filters SET filters = ? WHERE channel_id = ?"", (new_filters, channel_id))
        conn.commit()
        await ctx.send('Готово')
    else:
        c.execute(""INSERT INTO link_filters (channel_id, filters) VALUES (?, ?)"", (channel_id, filter_link))
        conn.commit()
        await ctx.send('Готово')


@bot.slash_command(description=""удалить текстовый фильтр (выбор)"")
async def delete_filter(ctx, channel_id: str, filters: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        text_filters = row[0].split(';')
        new_text_filters = [filter_word for filter_word in text_filters if filter_word not in filters.split(';')]
        new_text_filters_str = ';'.join(new_text_filters)
        c.execute(""UPDATE text_filters SET filters = ? WHERE channel_id = ?"", (new_text_filters_str, channel_id))
        conn.commit()

        await ctx.send('Готово')
    else:
        await ctx.send('Фильтров для этого канала и не было')


@bot.slash_command(description=""удалить гостевой фильтр (выбор)"")
async def delete_guest_filter(ctx, filters: str):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM guest_filters WHERE server = ?"", (1,))
    row = c.fetchone()
    if row:
        text_filters = row[0].split(';')
        new_text_filters = [filter_word for filter_word in text_filters if filter_word not in filters.split(';')]
        new_text_filters_str = ';'.join(new_text_filters)
        c.execute(""UPDATE guest_filters SET filters = ? WHERE server = ?"", (new_text_filters_str, 1))
        conn.commit()

        await ctx.send('Готово')
    else:
        await ctx.send('Фильтров и не было')


@bot.slash_command(description=""удалить фильтр ссылок (выбор)"")
async def delete_link_filter(ctx, channel_id: str, filters: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        link_filters = row[0].split(';')
        new_link_filters = [filter_link for filter_link in link_filters if filter_link not in filters.split(';')]
        new_link_filters_str = ';'.join(new_link_filters)
        c.execute(""UPDATE link_filters SET filters = ? WHERE channel_id = ?"", (new_link_filters_str, channel_id))
        conn.commit()

        await ctx.send('Готово')
    else:
        await ctx.send('Фильтров для этого канала и не было')


@bot.slash_command(description=""удалить все фильтры для канала"")
async def delete_all_filters(ctx, channel_id: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""DELETE FROM text_filters WHERE channel_id = ?"", (channel_id,))
    c.execute(""DELETE FROM link_filters WHERE channel_id = ?"", (channel_id,))
    conn.commit()

    await ctx.send('Готово')


@bot.slash_command(description=""удалить все фильтры гостей"")
async def delete_all_guest_filters(ctx):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""DELETE FROM guest_filters WHERE server= ?"", (1,))
    conn.commit()

    await ctx.send('Готово')


bot.run(os.getenv('TOKEN'))
"
DF35uSDQ,Ride A Cart,VeryGoodAdmin,Lua,Sunday 24th of March 2024 11:49:02 AM CDT,"_G.AutoCollectOrbs = false
_G.AutoRebirth = false

local library = loadstring(game:HttpGet(""https://raw.githubusercontent.com/Majora144/Ui-libs-back-ups/main/Turtle%20UI/main.lua""))()

local window = library:Window(""Kotori is Gay"")

 window:Toggle(""Auto Collect Orbs"", false, function(bool)
    _G.AutoCollectOrbs = bool
    AutoOrb()
end)

window:Toggle(""Auto Rebirth"", false, function(bool)
    _G.AutoRebirth = bool
    AutoReb()
end)



--Get All Orbs
pcall(function()
    function AutoOrb()
        while _G.AutoCollectOrbs do
            if not _G.AutoCollectOrbs then break end
            task.wait()
            for i,v in pairs(game:GetService(""Workspace"").Effects:GetChildren()) do
                if v.Name == ""Template"" then
                    v.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                end
            end
        end
    end
end)

pcall(function()
    function AutoReb()
        while _G.AutoRebirth do
            if not _G.AutoRebirth then break end
            task.wait()
            game:GetService(""ReplicatedStorage""):WaitForChild(""Remotes""):WaitForChild(""Data""):WaitForChild(""RequestRebirth""):InvokeServer()
        end
    end
end)
"
ZFGZsADC,"Algoritmi lezione 19 - Quick Sort, parte A",fcamuso,C#,Sunday 24th of March 2024 11:47:41 AM CDT,"#include <iostream>

using namespace std;


int partiziona(int v[], int inizio, int fine)
{
  cout << string(40, '*') << endl;

  cout << ""partiziono da "" << inizio <<"" a "" << fine << endl;
	int pivot = v[inizio];

	int cont = 0;
	for (int i = inizio + 1; i <= fine; i++) {
		if (v[i] <= pivot)
			cont++;
	}

	//mettiamo il pivot nella posizione che gli spetta
	int indice_pivot = inizio + cont;
	swap(v[indice_pivot], v[inizio]);
	cout << ""per pivot scambio "" << v[indice_pivot] << "" con "" << v[inizio] << endl;

	// spostiamo gli elementi più piccoli del pivot alla sua sinistra
	// e quelli più grandi alla sua destra
	int i = inizio, j = fine;

	while (i < indice_pivot && j > indice_pivot) {

		while (v[i] <= pivot) {
			i++;
		}

		while (v[j] > pivot) {
			j--;
		}

		if (i < indice_pivot && j > indice_pivot) {
      cout << ""scambio "" << v[i] << "" con "" << v[j] << endl;
			swap(v[i], v[j]);
			i++; j--;
		}
	}
	cout << string(40, '-') << ""\n\n"";

	return indice_pivot;
}

void quickSort(int v[], int inizio, int fine)
{

	if (inizio >= fine)
		return;


	int p = partiziona(v, inizio, fine);

  // ordina la parte a sinistra
	quickSort(v, inizio, p - 1);

	// ordina la parte a destra
	quickSort(v, p + 1, fine);
}

int main()
{

	int v[] = { 81, 98, 78, 60, 115, -3, 45, 45, 1, 10 };
	int n = 10;

	quickSort(v, 0, n - 1);

	for (int i = 0; i < n; i++) {
		cout << v[i] << "" "";
	}

	return 0;
}
"
jjtHu4rn,edit bonding vyos,niammuddin,JavaScript,Sunday 24th of March 2024 11:44:02 AM CDT,"  // edit Bonding
  function editBonding(data) {
    let modalContent = '<div class=""mt-3 mb-10""><div class=""dataTables_processing"" role=""status""><div><div></div><div></div><div></div><div></div></div></div></div>';
    Swal.fire({
        title: 'Edit Bonding',
        html: modalContent,
        showCancelButton: true,
        showLoaderOnConfirm: true,
        confirmButtonText: 'Save',
        cancelButtonText: 'Cancel',
        didOpen: () => {
            $.ajax({
                url: '/api/interfaces_list',
                type: 'POST',
                dataType: 'json',
                success: function(responseData) {
                    jsonData = responseData;
                    ethernetInterfaces = Object.keys(jsonData.data.interfaces.ethernet);
  
                    modalContent = createEditForm(data, ethernetInterfaces);
                    Swal.update({ html: modalContent });
                },
                error: function(error) {
                    Swal.update({ html: '<div>Error loading data.</div>', icon: 'error' });
                    console.log('Error fetching data:', error);
                }
            });
        },
      //   preConfirm: () => {
      //     function getFormData() {
      //       const bondMode = document.getElementById(""bondMode"").value;
      //       const hashPolicy = document.getElementById(""hashPolicy"").value;
      //       const slaveSelects = document.querySelectorAll("".slaveRow select"");
      //       let memberInterface;
        
      //       if (slaveSelects.length === 0) {
      //           memberInterface = [null]; // Jika tidak ada select option, berikan nilai [null]
      //       } else {
      //           memberInterface = Array.from(slaveSelects).map(select => select.value);
      //       }
        
      //       return {
      //           bondMode: bondMode,
      //           hashPolicy: hashPolicy,
      //           memberInterface: memberInterface
      //       };
      //   }
        
        
      //   const formData = getFormData();
      //   const isBondModeChanged = formData.bondMode !== data.mode;
      //   const isHashPolicyChanged = formData.hashPolicy !== data.hashPolicy;
        
      //   const originalMemberInterfaces = data.memberInterfaces.split(',').map(s => s.trim());
      //   let isMembersChanged = !(originalMemberInterfaces.every((val, index) => val === formData.memberInterface[index]) 
      //                               && originalMemberInterfaces.length === formData.memberInterface.length);
    
      //   const isMembersInitiallyEmpty = originalMemberInterfaces.length === 0 || (originalMemberInterfaces.length === 1 && originalMemberInterfaces[0] === """");
      //   const isFormDataMembersEmpty = formData.memberInterface[0] === null;
    
      //   if (isMembersInitiallyEmpty && isFormDataMembersEmpty) {
      //       isMembersChanged = false;
      //   }
    
      //   if (!isBondModeChanged && !isHashPolicyChanged && !isMembersChanged) {
      //     Swal.fire('No Changes', 'There are no changes to save.', 'info');
      //     return false;
      // }
      
      // // Mengganti nilai null menjadi ""delete all""
      // if (formData.memberInterface[0] === null) {
      //     formData.memberInterface = [""deleteInterface""];
      // }
      
      // // Mendefinisikan postData
      // let postData = {
      //     bondName: data.bondName,
      //     bondMode: isBondModeChanged ? formData.bondMode : """",
      //     hashPolicy: isHashPolicyChanged ? formData.hashPolicy : """",
      //     bondMember: isMembersChanged ? formData.memberInterface : []
      // };
      //   console.log(postData);

      //       return fetch('/api/bonding_edit', {
      //         method: ""POST"",
      //         headers: {
      //             ""Content-Type"": ""application/json"",
      //         },
      //         body: JSON.stringify({
      //           bondName: data.bondName,
      //           bondMode: isBondModeChanged ? formData.bondMode : """",
      //           hashPolicy: isHashPolicyChanged ? formData.hashPolicy : """",
      //           bondMember: isMembersChanged ? formData.memberInterface : []
      //       })
      //     })
      //     .then((response) => {
      //         if (!response.ok) {
      //             throw new Error(""Network response was not ok"");
      //         }
      //         return response.json();
      //     })
      //     .then((data) => {
      //         if (!data.success) {
      //             throw new Error(data.message);
      //         }
      //         Swal.fire(""Success!"", data.message, ""success"");
      //         $('#interfaces-bonding').DataTable().ajax.reload();
      //         console.info(data);
      //     })
      //     .catch((error) => {
      //         Swal.fire(""Error!"", error.message , ""error"");
      //         console.error(error);
      //     });
        
      //   }

      preConfirm: () => {
        function getFormData() {
            const bondMode = document.getElementById(""bondMode"").value;
            const hashPolicy = document.getElementById(""hashPolicy"").value;
            const slaveSelects = document.querySelectorAll("".slaveRow select"");
            let memberInterface;
    
            if (slaveSelects.length === 0) {
                memberInterface = [null]; // Jika tidak ada select option, berikan nilai [null]
            } else {
                memberInterface = Array.from(slaveSelects).map(select => select.value);
            }
    
            return {
                bondMode: bondMode,
                hashPolicy: hashPolicy,
                memberInterface: memberInterface
            };
        }
    
        const formData = getFormData();
        const isBondModeChanged = formData.bondMode !== data.mode;
        const isHashPolicyChanged = formData.hashPolicy !== data.hashPolicy;
    
        const originalMemberInterfaces = data.memberInterfaces.split(',').map(s => s.trim());
        const formDataInterfaces = formData.memberInterface;
    
        let addedInterfaces = formDataInterfaces.filter(interface => !originalMemberInterfaces.includes(interface));
        let removedInterfaces = originalMemberInterfaces.filter(interface => !formDataInterfaces.includes(interface));
    
        const isMembersChanged = addedInterfaces.length > 0 || removedInterfaces.length > 0;
    
        // // Mengganti nilai null menjadi ""delete all""
        // let formDataInterfacesCopy = [...formDataInterfaces]; // Buat salinan dari array formDataInterfaces
        // if (formDataInterfacesCopy[0] === null) {
        //     formDataInterfacesCopy = [""deleteInterface""];
        // }

        // Hapus null dari addedInterfaces jika semua antarmuka dihapus
        addedInterfaces = addedInterfaces.filter(interface => interface !== null);

        // Mendefinisikan postData
        let postData = {
            bondName: data.bondName,
            bondMode: isBondModeChanged ? formData.bondMode : """",
            hashPolicy: isHashPolicyChanged ? formData.hashPolicy : """",
            bondMember: {
                add: addedInterfaces,
                delete: removedInterfaces
            } // Objek dengan turunan add dan delete
        };

        console.log(postData);

    
        // Jika tidak ada perubahan, tampilkan pesan dan kembalikan false
        if (!isMembersChanged) {
            Swal.fire('No Changes', 'There are no changes to save.', 'info');
            return false;
        }
    
        return fetch('/api/bonding_edit', {
                method: ""POST"",
                headers: {
                    ""Content-Type"": ""application/json"",
                },
                body: JSON.stringify(postData) // Kirim postData ke backend
            })
            .then((response) => {
                if (!response.ok) {
                    throw new Error(""Network response was not ok"");
                }
                return response.json();
            })
            .then((data) => {
                if (!data.success) {
                    throw new Error(data.message);
                }
                Swal.fire(""Success!"", data.message, ""success"");
                $('#interfaces-bonding').DataTable().ajax.reload();
                console.info(data);
            })
            .catch((error) => {
                Swal.fire(""Error!"", error.message, ""error"");
                console.error(error);
            });
    
    }
    
    
    
    
    

      })
    }
  

  function createEditForm(data, ethernetInterfaces) {
    let modalContent = `
        <div id=""modalFormContainer"">
            <input type=""text"" id=""bondName"" class=""mt-3 form-control"" placeholder=""${data.bondName}"" disabled>
    `;
  
    modalContent += `
        <select id=""bondMode"" class=""mt-3 form-select"">
    `;
  
    const bondModes = [
        '802.3ad', 'active-backup', 'broadcast', 'round-robin', 'transmit-load-balance', 
        'adaptive-load-balance', 'xor-hash'
    ];
    bondModes.forEach(mode => {
        modalContent += `
            <option value=""${mode}"" ${data.mode === mode ? 'selected' : ''}>${mode}</option>
        `;
    });
  
    modalContent += '</select>';
  
    modalContent += `
        <select id=""hashPolicy"" class=""mt-3 form-select"">
    `;
  
    const hashPolicies = ['layer2', 'layer2+3', 'layer3+4', 'encap2+3', 'encap3+4'];
    hashPolicies.forEach(policy => {
        modalContent += `
            <option value=""${policy}"" ${data.hashPolicy === policy ? 'selected' : ''}>${policy}</option>
        `;
    });
  
    modalContent += '</select>';
    modalContent += `
        <div class=""input-group mt-3"">
            <button class=""mt-3 btn btn-sm btn-outline-primary"" type=""button"" onclick=""tambahSlave(document.getElementById('modalFormContainer'))"">+ Add Member Interface</button>
        </div>
    `;
  
    const slaveInterfaces = data.memberInterfaces.split(',').map(s => s.trim());
    if (slaveInterfaces.length > 0 && slaveInterfaces[0] !== """") {
        slaveInterfaces.forEach(item => {
            modalContent += '<div class=""slaveRow input-group mt-3""><select class=""form-select"">';
            ethernetInterfaces.forEach(interface => {
                modalContent += `
                    <option value=""${interface}"" ${item === interface ? 'selected' : ''}>${interface}</option>
                `;
            });
            modalContent += `
                </select>
                <button class=""btn btn-outline-danger"" onclick=""hapusBaris(this)"">-</button>
                </div>
            `;
        });
    }
    
  
    modalContent += '</div>';
  
    return modalContent;
  }
  
  function tambahSlave(container) {
        const newSelect = document.createElement('select');
        newSelect.className = 'form-select';
        const defaultOption = document.createElement('option');
        defaultOption.value = """";
        defaultOption.textContent = ""-- Choose Interface --"";
        newSelect.appendChild(defaultOption);
  
        ethernetInterfaces.forEach(interface => {
            const option = document.createElement('option');
            option.value = interface;
            option.textContent = interface;
            newSelect.appendChild(option);
        });
  
        const removeBtn = document.createElement('button');
        removeBtn.className = 'btn btn-outline-danger';
        removeBtn.textContent = '-';
        removeBtn.onclick = function () {
            hapusBaris(removeBtn);
        };
  
        const newRow = document.createElement('div');
        newRow.className = 'slaveRow input-group mt-3';
        newRow.appendChild(newSelect);
        newRow.appendChild(removeBtn);
  
        container.appendChild(newRow);
  }
  
  function hapusBaris(button) {
        const row = button.parentNode;
        row.parentNode.removeChild(row);
  }
  "
Adc3fJg1,Untitled,f0f077,HTML,Sunday 24th of March 2024 11:34:32 AM CDT,"Complete Web Developer Course HTML CSS JavaScript PHP, and jQuery
complete web developer's Guide to websites working with HTML, CSS, JavaScript, PHP, Bootstrap, JQuery, MySQL and more
for more:https://cuty.io/vLIXGg6n"
jkuisgRh,Untitled,katerina-bonditka,Python,Sunday 24th of March 2024 11:28:15 AM CDT,"heat_df = df[binary_columns].apply(pd.Series.value_counts).T
sns.heatmap(heat_df)
plt.savefig(os.path.join(ASSETS_DIR, ""cat_features_2_binary_heatmap""))"
ZdXGUSbP,Narsistiluvut,ikizid,Python,Sunday 24th of March 2024 11:24:28 AM CDT,"print('Narsistisia lukuja:')
n=10
while 1:
    n += 1
    sum = 0
    n_digits = len(str(n))
    tmp = n
    while tmp > 0:
        digit = tmp % 10
        sum += digit**n_digits
        tmp //= 10
    if sum == n:
        s = [f""{a}^{n_digits}+"" for a in str(n)]
        ss = ''.join(s)[:-1]
        print(n,'=',ss)"
af6KxWaU,Hotel Room,Denis2312,Python,Sunday 24th of March 2024 11:23:09 AM CDT,"month = input()
nights = int(input())

price = 0

if month == ""May"" or month == ""October"":
    studio_price = nights * 50
    apartment_price = nights * 65
    if nights > 14:
        apartment_price = apartment_price * 0.9
        studio_price = studio_price * 0.7
    elif nights > 7:
        studio_price = studio_price * 0.95

elif month == ""June"" or month == ""September"":
    studio_price = nights * 75.2
    apartment_price = nights * 68.7
    if nights > 14:
        studio_price = studio_price * 0.8
    elif nights > 14:
        apartment_price = apartment_price * 0.9

elif month == ""July"" or month == ""August"":
    studio_price = nights * 76
    apartment_price = nights * 77
    if nights > 14:
       apartment_price = apartment_price * 0.9

print(f""Apartment: {apartment_price:.2f} lv."")
print(f""Studio: {studio_price:.2f} lv."")"
imK0TfjH,Untitled,yasi04,Python,Sunday 24th of March 2024 11:07:04 AM CDT,"import os
from dotenv import load_dotenv
import disnake
import asyncio
import sqlite3
from disnake.ext import commands

load_dotenv()

bot = commands.Bot(command_prefix=""!"", help_command=None, intents=disnake.Intents.all())

conn = sqlite3.connect('filters.db')
c = conn.cursor()

c.execute('''CREATE TABLE IF NOT EXISTS text_filters 
             (channel_id INTEGER PRIMARY KEY, filters TEXT)''')

c.execute('''CREATE TABLE IF NOT EXISTS link_filters 
             (channel_id INTEGER PRIMARY KEY, filters TEXT)''')

c.execute('''CREATE TABLE IF NOT EXISTS roles 
             (role TEXT)''')

c.execute('''CREATE TABLE IF NOT EXISTS guest_filters 
             (server INTEGER PRIMARY KEY, filters TEXT)''')

conn.commit()


def link_checker(message):
    c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (message.channel.id,))
    row = c.fetchone()
    if row:
        filters = row[0].split(';')
        if message.content.startswith(""http://"") or message.content.startswith(""https://""):
            flag = True
            for word in filters:
                if word == message.content.split('/')[2]:
                    flag = False
            return flag


def text_checker(message):
    c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (message.channel.id,))
    row = c.fetchone()
    if row:
        text_filters = row[0].split(';')
        flag = True
        if message.content.split(' ')[0] in text_filters:
            flag = False
        return flag


def guest_checker(message):
    c.execute(""SELECT filters FROM guest_filters WHERE server = ?"", (1,))
    row = c.fetchone()
    if row:
        guest_filters = row[0].split(';')
        flag = False
        if message.content.split(' ')[0] in guest_filters:
            flag = True
        return flag


@bot.event
async def on_ready():
    print(f""Bot {bot.user} is ready to work!"")


@bot.event
async def on_message(message):
    for role in message.author.roles:
        c.execute(""SELECT * FROM roles WHERE role=?"", (role.id,))
        result = c.fetchone()
        if result:
            break
    if result:
        if guest_checker(message):
            await message.delete()
            await message.channel.send(f'*Эта команда доступна только для авторизованных участников сервера, пожалуйста авторизуйтесь и получите роль ""Участник""')
        return
    elif message.author == message.guild.owner:
        return
    elif message.author == bot.user:
        await asyncio.sleep(120)
        await message.delete()
        return
    elif message.author.bot:
        return
    else:
        if message.content.startswith(""http://"") or message.content.startswith(""https://""):
            c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (message.channel.id,))
            row = c.fetchone()
            if row:
                filters = row[0].split(';')
                if link_checker(message):
                    await message.delete()
                    await message.channel.send(f""*В этом канале доступны только* `{filters}`, *Другое не разрешено XD*"")
                    return
        else:
            c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (message.channel.id,))
            row = c.fetchone()
            if row:
                text_filters = row[0].split(';')
                if text_checker(message):
                    await message.delete()
                    await message.channel.send(f""*В этом канале доступны только* `{text_filters}`, *Другое не разрешено XD*"")
                    return

    await bot.process_commands(message)


@bot.slash_command(description=""добавить текстовый фильтр"")
async def add_text_filter(ctx, channel_id: str, filter_text: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        old_filters = row[0]
        new_filters = old_filters + "";"" + filter_text
        c.execute(""UPDATE text_filters SET filters = ? WHERE channel_id = ?"", (new_filters, channel_id))
        conn.commit()
        await ctx.send('Готово')
    else:
        c.execute(""INSERT INTO text_filters (channel_id, filters) VALUES (?, ?)"", (channel_id, filter_text))
        conn.commit()
        await ctx.send('Готово')


@bot.slash_command(description=""добавить гостевой фильтр"")
async def add_guest_filter(ctx, filter_text: str):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM guest_filters WHERE server = ?"", (1,))
    row = c.fetchone()
    if row:
        old_filters = row[0]
        new_filters = old_filters + "";"" + filter_text
        c.execute(""UPDATE guest_filters SET filters = ? WHERE server = ?"", (new_filters, 1))
        conn.commit()
        await ctx.send('Готово')
    else:
        c.execute(""INSERT INTO guest_filters (server, filters) VALUES (?, ?)"", (1, filter_text))
        conn.commit()
        await ctx.send('Готово')


@bot.slash_command(description=""добавить гостевые роли"")
async def add_guest_roles(ctx, role: disnake.Role):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""INSERT INTO roles (role) VALUES (?)"", (role.id,))
    conn.commit()
    await ctx.send('Готово')


@bot.slash_command(description=""удалить гостевые роли"")
async def delete_guest_roles(ctx, role: disnake.Role):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT * FROM roles WHERE role=?"", (role.id,))
    result = c.fetchone()

    if result:
        c.execute(""DELETE FROM roles WHERE role=?"", (role.id,))
        conn.commit()
        await ctx.send('Роль удалена из базы данных')
    else:
        await ctx.send('Роль не найдена в базе данных')


@bot.slash_command(description=""добавить ссылку в фильтр"")
async def add_link_filter(ctx, channel_id: str, filter_link: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        old_filters = row[0]
        new_filters = old_filters + "";"" + filter_link
        c.execute(""UPDATE link_filters SET filters = ? WHERE channel_id = ?"", (new_filters, channel_id))
        conn.commit()
        await ctx.send('Готово')
    else:
        c.execute(""INSERT INTO link_filters (channel_id, filters) VALUES (?, ?)"", (channel_id, filter_link))
        conn.commit()
        await ctx.send('Готово')


@bot.slash_command(description=""удалить текстовый фильтр (выбор)"")
async def delete_filter(ctx, channel_id: str, filters: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        text_filters = row[0].split(';')
        new_text_filters = [filter_word for filter_word in text_filters if filter_word not in filters.split(';')]
        new_text_filters_str = ';'.join(new_text_filters)
        c.execute(""UPDATE text_filters SET filters = ? WHERE channel_id = ?"", (new_text_filters_str, channel_id))
        conn.commit()

        await ctx.send('Готово')
    else:
        await ctx.send('Фильтров для этого канала и не было')


@bot.slash_command(description=""удалить гостевой фильтр (выбор)"")
async def delete_guest_filter(ctx, filters: str):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM guest_filters WHERE server = ?"", (1,))
    row = c.fetchone()
    if row:
        text_filters = row[0].split(';')
        new_text_filters = [filter_word for filter_word in text_filters if filter_word not in filters.split(';')]
        new_text_filters_str = ';'.join(new_text_filters)
        c.execute(""UPDATE guest_filters SET filters = ? WHERE server = ?"", (new_text_filters_str, 1))
        conn.commit()

        await ctx.send('Готово')
    else:
        await ctx.send('Фильтров и не было')


@bot.slash_command(description=""удалить фильтр ссылок (выбор)"")
async def delete_link_filter(ctx, channel_id: str, filters: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        link_filters = row[0].split(';')
        new_link_filters = [filter_link for filter_link in link_filters if filter_link not in filters.split(';')]
        new_link_filters_str = ';'.join(new_link_filters)
        c.execute(""UPDATE link_filters SET filters = ? WHERE channel_id = ?"", (new_link_filters_str, channel_id))
        conn.commit()

        await ctx.send('Готово')
    else:
        await ctx.send('Фильтров для этого канала и не было')


@bot.slash_command(description=""удалить все фильтры для канала"")
async def delete_all_filters(ctx, channel_id: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""DELETE FROM text_filters WHERE channel_id = ?"", (channel_id,))
    c.execute(""DELETE FROM link_filters WHERE channel_id = ?"", (channel_id,))
    conn.commit()

    await ctx.send('Готово')


@bot.slash_command(description=""удалить все фильтры гостей"")
async def delete_all_guest_filters(ctx):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""DELETE FROM guest_filters WHERE server= ?"", (1,))
    conn.commit()

    await ctx.send('Готово')


bot.run(os.getenv('TOKEN'))
"
JGZr4Amy,Miical's code,Miical,C,Sunday 24th of March 2024 10:56:50 AM CDT,"#include <stdio.h>
#include <math.h>
int main ()
{
	int T;
	scanf(""%d"", &T);
	if (T==1){
		printf(""I love Luogu!\n"");
	}
	else if (T==2){
		int a,b;
		a=2+4;
		b=10-a;
		printf(""%d %d"",a,b);
	}
	else if (T==3){
		int a,b,c;
		a=14/4;
		b=a*4;
		c=14-b;
		printf(""%d\n"",a);
		printf(""%d\n"",b);
		printf(""%d\n"",c);
	}
	else if (T==4){
		double a;
		a=(double)500/3;
		printf(""%.3f"",a);
	}
	else if (T==5){
		int a;
		a=(260+220)/(12+20);
		printf(""%d"",a);
	}
	else if (T==6){
		double a;
		a=sqrt(0.06*0.06+0.09*0.09);
		printf(""%.4lf"",a*100);
	}
	else if (T==7){
		int a,b,c;
		a=100+10;
		b=a-20;
		c=0;
		printf(""%d\n%d\n%d"",a,b,c);
	}
	else if (T==8){
		double r,pi;
		r=5;
		pi=3.141593;
		printf(""31.4159\n78.5398\n523.599\n"");
	}
	else if (T==9){
		printf(""%d"",22);
	}
	else if (T==10){
		printf(""%d"",9);
	}
	else if (T==11){
		printf(""%.4lf"",100.0/3.0);
	}
	else if (T==12){
		char a,b,d;
		int c;
		a='A';
		b='M';
		c=b-a+1;
		d=a+17;
		printf(""%d\n"",c);
		printf(""%c\n"",d);
	}
	else if (T==13){
		double pi,a;
		int b;
		pi=3.141593;
		a=4.0*pi*1064.0/3.0;
		b=pow(a,1.0/3.0);
		printf(""%d"",b);
	}
	else if (T==14){
		printf(""50"");
	}
	return 0;
}"
YDKaMqWm,Untitled,yasi04,Python,Sunday 24th of March 2024 10:55:40 AM CDT,"import os
from dotenv import load_dotenv
import disnake
import asyncio
import sqlite3
from disnake.ext import commands

load_dotenv()

bot = commands.Bot(command_prefix=""!"", help_command=None, intents=disnake.Intents.all())

conn = sqlite3.connect('filters.db')
c = conn.cursor()

c.execute('''CREATE TABLE IF NOT EXISTS text_filters 
             (channel_id INTEGER PRIMARY KEY, filters TEXT)''')

c.execute('''CREATE TABLE IF NOT EXISTS link_filters 
             (channel_id INTEGER PRIMARY KEY, filters TEXT)''')

c.execute('''CREATE TABLE IF NOT EXISTS roles 
             (role TEXT)''')

c.execute('''CREATE TABLE IF NOT EXISTS guest_filters 
             (server INTEGER PRIMARY KEY, filters TEXT)''')

conn.commit()


def link_checker(message):
    c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (message.channel.id,))
    row = c.fetchone()
    if row:
        filters = row[0].split(';')
        if message.content.startswith(""http://"") or message.content.startswith(""https://""):
            flag = True
            for word in filters:
                if word == message.content.split('/')[2]:
                    flag = False
            return flag


def text_checker(message):
    c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (message.channel.id,))
    row = c.fetchone()
    if row:
        text_filters = row[0].split(';')
        flag = True
        if message.content.split(' ')[0] in text_filters:
            flag = False
        return flag


def guest_checker(message):
    c.execute(""SELECT filters FROM guest_filters WHERE server = ?"", (1,))
    row = c.fetchone()
    if row:
        guest_filters = row[0].split(';')
        flag = False
        if message.content.split(' ')[0] in guest_filters:
            flag = True
        return flag


@bot.event
async def on_ready():
    print(f""Bot {bot.user} is ready to work!"")


@bot.event
async def on_message(message):
    for role in message.author.roles:
        c.execute(""SELECT * FROM roles WHERE role=?"", (role.id,))
        result = c.fetchone()
    if result:
        if guest_checker(message):
            await message.delete()
            await message.channel.send(f'*Эта команда доступна только для авторизованных участников сервера, пожалуйста авторизуйтесь и получите роль ""Участник""')
        return
    elif message.author == message.guild.owner:
        return
    elif message.author == bot.user:
        await asyncio.sleep(120)
        await message.delete()
        return
    elif message.author.bot:
        return
    else:
        if message.content.startswith(""http://"") or message.content.startswith(""https://""):
            c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (message.channel.id,))
            row = c.fetchone()
            if row:
                filters = row[0].split(';')
                if link_checker(message):
                    await message.delete()
                    await message.channel.send(f""*В этом канале доступны только* `{filters}`, *Другое не разрешено XD*"")
                    return
        else:
            c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (message.channel.id,))
            row = c.fetchone()
            if row:
                text_filters = row[0].split(';')
                if text_checker(message):
                    await message.delete()
                    await message.channel.send(f""*В этом канале доступны только* `{text_filters}`, *Другое не разрешено XD*"")
                    return

    await bot.process_commands(message)


@bot.slash_command(description=""добавить текстовый фильтр"")
async def add_text_filter(ctx, channel_id: str, filter_text: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        old_filters = row[0]
        new_filters = old_filters + "";"" + filter_text
        c.execute(""UPDATE text_filters SET filters = ? WHERE channel_id = ?"", (new_filters, channel_id))
        conn.commit()
        await ctx.send('Готово')
    else:
        c.execute(""INSERT INTO text_filters (channel_id, filters) VALUES (?, ?)"", (channel_id, filter_text))
        conn.commit()
        await ctx.send('Готово')


@bot.slash_command(description=""добавить гостевой фильтр"")
async def add_guest_filter(ctx, filter_text: str):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM guest_filters WHERE server = ?"", (1,))
    row = c.fetchone()
    if row:
        old_filters = row[0]
        new_filters = old_filters + "";"" + filter_text
        c.execute(""UPDATE guest_filters SET filters = ? WHERE server = ?"", (new_filters, 1))
        conn.commit()
        await ctx.send('Готово')
    else:
        c.execute(""INSERT INTO guest_filters (server, filters) VALUES (?, ?)"", (1, filter_text))
        conn.commit()
        await ctx.send('Готово')


@bot.slash_command(description=""добавить гостевые роли"")
async def add_guest_roles(ctx, role: disnake.Role):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""INSERT INTO roles (role) VALUES (?)"", (role.id,))
    conn.commit()
    await ctx.send('Готово')


@bot.slash_command(description=""удалить гостевые роли"")
async def delete_guest_roles(ctx, role: disnake.Role):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT * FROM roles WHERE role=?"", (role.id,))
    result = c.fetchone()

    if result:
        c.execute(""DELETE FROM roles WHERE role=?"", (role.id,))
        conn.commit()
        await ctx.send('Роль удалена из базы данных')
    else:
        await ctx.send('Роль не найдена в базе данных')


@bot.slash_command(description=""добавить ссылку в фильтр"")
async def add_link_filter(ctx, channel_id: str, filter_link: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        old_filters = row[0]
        new_filters = old_filters + "";"" + filter_link
        c.execute(""UPDATE link_filters SET filters = ? WHERE channel_id = ?"", (new_filters, channel_id))
        conn.commit()
        await ctx.send('Готово')
    else:
        c.execute(""INSERT INTO link_filters (channel_id, filters) VALUES (?, ?)"", (channel_id, filter_link))
        conn.commit()
        await ctx.send('Готово')


@bot.slash_command(description=""удалить текстовый фильтр (выбор)"")
async def delete_filter(ctx, channel_id: str, filters: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        text_filters = row[0].split(';')
        new_text_filters = [filter_word for filter_word in text_filters if filter_word not in filters.split(';')]
        new_text_filters_str = ';'.join(new_text_filters)
        c.execute(""UPDATE text_filters SET filters = ? WHERE channel_id = ?"", (new_text_filters_str, channel_id))
        conn.commit()

        await ctx.send('Готово')
    else:
        await ctx.send('Фильтров для этого канала и не было')


@bot.slash_command(description=""удалить гостевой фильтр (выбор)"")
async def delete_guest_filter(ctx, filters: str):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM guest_filters WHERE server = ?"", (1,))
    row = c.fetchone()
    if row:
        text_filters = row[0].split(';')
        new_text_filters = [filter_word for filter_word in text_filters if filter_word not in filters.split(';')]
        new_text_filters_str = ';'.join(new_text_filters)
        c.execute(""UPDATE guest_filters SET filters = ? WHERE server = ?"", (new_text_filters_str, 1))
        conn.commit()

        await ctx.send('Готово')
    else:
        await ctx.send('Фильтров и не было')


@bot.slash_command(description=""удалить фильтр ссылок (выбор)"")
async def delete_link_filter(ctx, channel_id: str, filters: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        link_filters = row[0].split(';')
        new_link_filters = [filter_link for filter_link in link_filters if filter_link not in filters.split(';')]
        new_link_filters_str = ';'.join(new_link_filters)
        c.execute(""UPDATE link_filters SET filters = ? WHERE channel_id = ?"", (new_link_filters_str, channel_id))
        conn.commit()

        await ctx.send('Готово')
    else:
        await ctx.send('Фильтров для этого канала и не было')


@bot.slash_command(description=""удалить все фильтры для канала"")
async def delete_all_filters(ctx, channel_id: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""DELETE FROM text_filters WHERE channel_id = ?"", (channel_id,))
    c.execute(""DELETE FROM link_filters WHERE channel_id = ?"", (channel_id,))
    conn.commit()

    await ctx.send('Готово')


@bot.slash_command(description=""удалить все фильтры гостей"")
async def delete_all_guest_filters(ctx):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""DELETE FROM guest_filters WHERE server= ?"", (1,))
    conn.commit()

    await ctx.send('Готово')


bot.run(os.getenv('TOKEN'))
"
LZv3Hy3r,Untitled,Sreekar_0125,C++,Sunday 24th of March 2024 09:54:21 AM CDT,"#include <bits/stdc++.h>
using namespace std;
#define F first
#define S second
#define pii pair<int, int>

pair<int, int> s, d;
int n, m, b;
vector<pair<int, int>> moves = {{1, 1}, {1, -1}, {-1, 1}, {-1, -1}, {0, 1}, {0, -1}, {-1, 0}, {1, 0}};
vector<vector<bool>> vis(101, vector<bool>(101, false));
map<pair<int, int>, pair<int, int>> par;
vector<vector<char>> v(101, vector<char>(101, '.'));

bool isValid(pii x)
{
    return (0 <= x.F && x.F < n) && (0 <= x.S && x.S < m);
}

bool bfs()
{
    sort(moves.begin(), moves.end());
    vis[s.F][s.S] = 1;
    queue<pair<int, int>> q;
    q.push(s);

    while (!q.empty())
    {
        pii node = q.front();
        for (auto i : moves)
        {
            pii nei;
            nei.F = node.F + i.F;
            nei.S = node.S + i.S;

            if (isValid(nei))
            {
                if (!vis[nei.F][nei.S])
                {
                    if (nei.F == d.F && nei.S == d.S)
                    {
                        // found
                        par[nei] = node;
                        vector<pii> path;
                        path.push_back(d);
                        pii start = d;
                        while (start != s)
                        {
                            start = par[start];
                            path.push_back(start);
                        }
                        // path.push_back(start);
                        cout << path.size() - 1 << endl;
                        reverse(path.begin(), path.end());
                        for (int i = 0; i < path.size() - 1; i++)
                        {
                            cout << path[i].F << ',' << path[i].S << "" -> "";
                        }
                        cout << d.F << ',' << d.S << endl;
                        return true;
                    }
                    if (v[nei.F][nei.S] != 'x')
                    {
                        par[nei] = node;
                        vis[nei.F][nei.S] = 1;
                        q.push(nei);
                    }
                }
            }
        }
        q.pop();
    }
    // cout << -1 << endl;
    return false;
}

void clear(int n, int m)
{
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            vis[i][j] = false;
        }
    }
    par.clear();
}

void solve()
{
    cin >> n >> m >> b;

    // pair<int, int> source, dest;

    cin >> s.first >> s.second;
    cin >> d.first >> d.second;

    // cout << s.F << ' ' << s.S << endl;
    // cout << d.F << ' ' << d.S << endl;

    for (int i = 0; i < b; i++)
    {
        int x, y;
        cin >> x >> y;
        v[x][y] = 'x';
    }

    if (s.F == d.F && s.S == d.S)
    {
        cout << 0 << endl;
        cout << s.F << ' ' << s.S << endl;
        return;
    }

    if (bfs())
        ;
    else
        cout << -1 << endl;
    clear(n, m);
}

int main()
{
    freopen(""input.txt"", ""r"", stdin);
    freopen(""output.txt"", ""w"", stdout);
    freopen(""error.txt"", ""w"", stderr);
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    int t;
    cin >> t;
    int x = 1;
    while (t--)
    {
        // cout << ""tc : "" << x++ << endl;
        solve();
    }
    return 0;
}"
v14qgLbf,Untitled,Alexander_Usov,Python,Sunday 24th of March 2024 09:25:20 AM CDT,"experiment_id = '0'
custom_model = CustomMlflowModel(DecisionTreeClassifier())

with mlflow.start_run(
    run_name=""custom_model"",
    experiment_id=experiment_id,
) as run:
    run_id = run.info.run_id
    model_info = mlflow.pyfunc.log_model(python_model=custom_model, artifact_path=""models_custom_model"") "
rn1EmWmK,Caseoh is gonna ban me for this,scriptingtales,Lua,Sunday 24th of March 2024 08:48:02 AM CDT,"local p = Instance.new(""Part"", workspace)
local decal = Instance.new(""Decal"", p)

local Billboard = Instance.new(""BillboardGui"", p)
local textLabel = Instance.new(""TextLabel"", Billboard)

p.CustomPhysicalProperties = PhysicalProperties.new(9.99 * 10^6, 4, 1)

Billboard.StudsOffset = Vector3.new(0, 5, 0)
Billboard.MaxDistance = math.huge

Billboard.Size = UDim2.new(0, 200, 0, 50)

textLabel.TextStrokeColor3 = Color3.fromRGB(255, 255, 255)
textLabel.TextStrokeTransparency = 0
textLabel.BackgroundTransparency = 1
textLabel.TextScaled = true
textLabel.Text = ""The picture is what made this part heavy""
textLabel.Size = UDim2.new(1, 0, 1, 0)

decal.Texture = ""rbxassetid://15905589038""
p.Size = Vector3.new(4, 4, 4)

"
uResZ2vN,Untitled,f0f077,MySQL,Sunday 24th of March 2024 08:46:00 AM CDT,"JSON AJAX data transfer to MySQL database using PHP
Create a dynamic input form that can add and retrieve data from a MySQL database!​
What you'll learn
learn to send data from the frontend to backend code
create dynamic input forms
update MySQL database content with AJAX
for more:https://cuty.io/BnpnydM"
yjtR0MwM,Untitled,f0f077,PHP,Sunday 24th of March 2024 08:34:48 AM CDT,"Create a PHP Login and Registration System From Scratch 2020
The FULLEST and complete Login and Registration System course using PHP, MySQL and Ajax, from scratch!
What you will learn

Create a full-user login, logout and registration system.
Create a full-user login, logout and registration system.
Code a secure login system from scratch
Code a secure login system from scratch
Create members-only pages on your
https://cuty.io/Hyl4GnOf"
ubiMR2MQ,pwn template,ja20nl1n,C,Sunday 24th of March 2024 08:26:21 AM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './path/to/binary'

# Many built-in settings can be controlled on the command-line and show up
# in ""args"".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)

io.interactive()

"
cW4VKL1b,Untitled,yasi04,Python,Sunday 24th of March 2024 07:55:29 AM CDT,"import os
from dotenv import load_dotenv
import disnake
import asyncio
import sqlite3
from disnake.ext import commands

load_dotenv()

bot = commands.Bot(command_prefix=""!"", help_command=None, intents=disnake.Intents.all())

conn = sqlite3.connect('filters.db')
c = conn.cursor()

c.execute('''CREATE TABLE IF NOT EXISTS text_filters 
             (channel_id INTEGER PRIMARY KEY, filters TEXT)''')

c.execute('''CREATE TABLE IF NOT EXISTS link_filters 
             (channel_id INTEGER PRIMARY KEY, filters TEXT)''')

c.execute('''CREATE TABLE IF NOT EXISTS roles 
             (role TEXT)''')

c.execute('''CREATE TABLE IF NOT EXISTS guest_filters 
             (server INTEGER PRIMARY KEY, filters TEXT)''')

conn.commit()


def link_checker(message):
    c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (message.channel.id,))
    row = c.fetchone()
    if row:
        filters = row[0].split(';')
        if message.content.startswith(""http://"") or message.content.startswith(""https://""):
            flag = True
            for word in filters:
                if word == message.content.split('/')[2]:
                    flag = False
            return flag


def text_checker(message):
    c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (message.channel.id,))
    row = c.fetchone()
    if row:
        text_filters = row[0].split(';')
        flag = True
        if message.content.split(' ')[0] in text_filters:
            flag = False
        return flag


def guest_checker(message):
    c.execute(""SELECT filters FROM guest_filters WHERE server = ?"", (1,))
    row = c.fetchone()
    if row:
        guest_filters = row[0].split(';')
        flag = False
        if message.content.split(' ')[0] in guest_filters:
            flag = True
        return flag


@bot.event
async def on_ready():
    print(f""Bot {bot.user} is ready to work!"")


@bot.event
async def on_message(message):
    for role in message.author.roles:
        c.execute(""SELECT * FROM roles WHERE role=?"", (role.id,))
        result = c.fetchone()
    if result:
        if guest_checker(message):
            await message.delete()
            await message.channel.send(f'*Эта команда доступна только для авторизованных участников сервера, пожалуйста авторизуйтесь и получите роль ""Участник""')
        return
    elif message.author == message.guild.owner:
        return
    elif message.author == bot.user:
        await asyncio.sleep(120)
        await message.delete()
        return
    elif message.author.bot:
        return
    else:
        if message.content.startswith(""http://"") or message.content.startswith(""https://""):
            c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (message.channel.id,))
            row = c.fetchone()
            if row:
                filters = row[0].split(';')
                if link_checker(message):
                    await message.delete()
                    await message.channel.send(f""*В этом канале доступны только* `{filters}`, *Другое не разрешено XD*"")
                    return
        else:
            c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (message.channel.id,))
            row = c.fetchone()
            if row:
                text_filters = row[0].split(';')
                if text_checker(message):
                    await message.delete()
                    await message.channel.send(f""*В этом канале доступны только* `{text_filters}`, *Другое не разрешено XD*"")
                    return

    await bot.process_commands(message)


@bot.slash_command(description=""добавить текстовый фильтр"")
async def add_text_filter(ctx, channel_id: str, filter_text: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        old_filters = row[0]
        new_filters = old_filters + "";"" + filter_text
        c.execute(""UPDATE text_filters SET filters = ? WHERE channel_id = ?"", (new_filters, channel_id))
        conn.commit()
        await ctx.send('Готово')
    else:
        c.execute(""INSERT INTO text_filters (channel_id, filters) VALUES (?, ?)"", (channel_id, filter_text))
        conn.commit()
        await ctx.send('Готово')


@bot.slash_command(description=""добавить гостевой фильтр"")
async def add_guest_filter(ctx, filter_text: str):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM guest_filters WHERE server = ?"", (1,))
    row = c.fetchone()
    if row:
        old_filters = row[0]
        new_filters = old_filters + "";"" + filter_text
        c.execute(""UPDATE guest_filters SET filters = ? WHERE server = ?"", (new_filters, 1))
        conn.commit()
        await ctx.send('Готово')
    else:
        c.execute(""INSERT INTO guest_filters (server, filters) VALUES (?, ?)"", (1, filter_text))
        conn.commit()
        await ctx.send('Готово')


@bot.slash_command(description=""добавить гостевые роли"")
async def add_guest_roles(ctx, role: disnake.Role):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""INSERT INTO roles (role) VALUES (?)"", (role.id,))
    conn.commit()
    await ctx.send('Готово')


@bot.slash_command(description=""удалить гостевые роли"")
async def delete_guest_roles(ctx, role: disnake.Role):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT * FROM roles WHERE role=?"", (role.id,))
    result = c.fetchone()

    if result:
        c.execute(""DELETE FROM roles WHERE role=?"", (role.id,))
        conn.commit()
        await ctx.send('Роль удалена из базы данных')
    else:
        await ctx.send('Роль не найдена в базе данных')


@bot.slash_command(description=""добавить ссылку в фильтр"")
async def add_link_filter(ctx, channel_id: str, filter_link: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        old_filters = row[0]
        new_filters = old_filters + "";"" + filter_link
        c.execute(""UPDATE link_filters SET filters = ? WHERE channel_id = ?"", (new_filters, channel_id))
        conn.commit()
        await ctx.send('Готово')
    else:
        c.execute(""INSERT INTO link_filters (channel_id, filters) VALUES (?, ?)"", (channel_id, filter_link))
        conn.commit()
        await ctx.send('Готово')


@bot.slash_command(description=""удалить текстовый фильтр (выбор)"")
async def delete_filter(ctx, channel_id: str, filters: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM text_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        text_filters = row[0].split(';')
        new_text_filters = [filter_word for filter_word in text_filters if filter_word not in filters.split(';')]
        new_text_filters_str = ';'.join(new_text_filters)
        c.execute(""UPDATE text_filters SET filters = ? WHERE channel_id = ?"", (new_text_filters_str, channel_id))
        conn.commit()

        await ctx.send('Готово')
    else:
        await ctx.send('Фильтров для этого канала и не было')


@bot.slash_command(description=""удалить гостевой фильтр (выбор)"")
async def delete_guest_filter(ctx, filters: str):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM guest_filters WHERE server = ?"", (1,))
    row = c.fetchone()
    if row:
        text_filters = row[0].split(';')
        new_text_filters = [filter_word for filter_word in text_filters if filter_word not in filters.split(';')]
        new_text_filters_str = ';'.join(new_text_filters)
        c.execute(""UPDATE guest_filters SET filters = ? WHERE server = ?"", (new_text_filters_str, 1))
        conn.commit()

        await ctx.send('Готово')
    else:
        await ctx.send('Фильтров и не было')


@bot.slash_command(description=""удалить фильтр ссылок (выбор)"")
async def delete_link_filter(ctx, channel_id: str, filters: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""SELECT filters FROM link_filters WHERE channel_id = ?"", (channel_id,))
    row = c.fetchone()
    if row:
        link_filters = row[0].split(';')
        new_link_filters = [filter_link for filter_link in link_filters if filter_link not in filters.split(';')]
        new_link_filters_str = ';'.join(new_link_filters)
        c.execute(""UPDATE link_filters SET filters = ? WHERE channel_id = ?"", (new_link_filters_str, channel_id))
        conn.commit()

        await ctx.send('Готово')
    else:
        await ctx.send('Фильтров для этого канала и не было')


@bot.slash_command(description=""удалить все фильтры для канала"")
async def delete_all_filters(ctx, channel_id: str):
    channel_id = int(channel_id)

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""DELETE FROM text_filters WHERE channel_id = ?"", (channel_id,))
    c.execute(""DELETE FROM link_filters WHERE channel_id = ?"", (channel_id,))
    conn.commit()

    await ctx.send('Готово')


@bot.slash_command(description=""удалить все фильтры для канала"")
async def delete_all_guest_filters(ctx):

    if ctx.author != ctx.guild.owner:
        await ctx.send('Команда только для создателя')
        return

    c.execute(""DELETE FROM guest_filters WHERE server= ?"", (1,))
    conn.commit()

    await ctx.send('Готово')


bot.run(os.getenv('TOKEN'))
"
AhszeUWL,Untitled,katerina-bonditka,Python,Sunday 24th of March 2024 07:47:04 AM CDT,"import pandas as pd
import numpy as np

# сгенерируем небольшой набор данных для примера
data = {
    'Category': ['Electronics', 'Clothing', 'Electronics', 'Clothing', 'Electronics',
                 'Clothing', 'Electronics', 'Electronics', 'Clothing', 'Electronics',
                 'Clothing', 'Electronics', 'Clothing', 'Electronics', 'Clothing'],
    'Sales': [400, 300, 450, 200, 500, 550, 330, 480, 520, 350, 420, 290, 390, 410, 380]
}

df = pd.DataFrame(data)

# можно так
aggregated_df = df.groupby(['Category'])['Sales'].agg('mean').reset_index() 
sorted_df = aggregated_df.sort_values(by='Sales', ascending=False)

# а можно так
aggregated_df = df.groupby(['Category'])['Sales'].agg({'mean'}).reset_index()
sorted_df = aggregated_df.sort_values(by='mean', ascending=False)

# ... а можно еще пару вариантов накидать"
gWj08NVb,Space cleaner for Ubuntu,sarker306,Bash,Sunday 24th of March 2024 07:24:32 AM CDT,"#!/bin/bash
# Cleans space in ubuntu
# Reference: https://itsfoss.com/free-up-space-ubuntu-linux/

# Check disk usage by apt cache first
sudo du -sh /var/cache/apt

echo 'Cleaning apt cache...'
# Clean apt cache entirely
sudo apt-get clean

# Check disk usage by apt cache afterwards
sudo du -sh /var/cache/apt

# Check disk usage by journaling
journalctl --disk-usage

echo 'Cleaning old journal logs...'
# Clean journals older than a week
sudo journalctl --vacuum-time=7d

# Check disk usage by journaling afterwards
journalctl --disk-usage

# Check disk usage by snap apps first
du -sh /var/lib/snapd/snaps

echo 'Removing disabled snap apps...'
set -eu
# Start cleaning disabled snap revisions
snap list --all | awk '/disabled/{print $1, $3}' |
  while read snapname revision; do
    sudo snap remove $snapname --revision=""$revision""
  done

# Check the disk usage by snap apps afterwards
du -sh /var/lib/snapd/snaps

echo 'Removing Cache thumbnails...'
# Check disk usage by thumbnails first
du -sh ~/.cache/thumbnails

# Clean cache thumbnails
rm -rf ~/.cache/thumbnails/*"
vY2wrpSY,Testing Script,scriptingtales,Lua,Sunday 24th of March 2024 07:24:08 AM CDT,"WorldModel = Instance.new(""WorldModel"")
BillGui = Instance.new(""BillboardGui"", WorldModel)
Part1 = Instance.new(""Part"")
SpecialMesh2 = Instance.new(""SpecialMesh"")
char = owner.Character
HighLight = Instance.new(""Highlight"")
llerp = CFrame.Angles(0,0,0)
rlerp = CFrame.Angles(0,0,0)
Hum = char.Humanoid
orien = CFrame.new(0,0,0)
sin = 5
Part3 = Instance.new(""Part"")
Part4 = Instance.new(""Part"")
Part5 = Instance.new(""Part"")
Part6 = Instance.new(""Part"")
ParticleEmitter7 = Instance.new(""ParticleEmitter"")
SurfaceGui8 = Instance.new(""SurfaceGui"")
TextLabel9 = Instance.new(""TextLabel"")
WorldModel.Parent = script
HighLight.FillTransparency = 1
HighLight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
HighLight.Parent = WorldModel
pos = char.HumanoidRootPart.CFrame
--WorldModel.PrimaryPart = owner.Character.Torso
Part1.Name = ""Handle""
Part1.Parent = WorldModel
Part1.CFrame = CFrame.new(70.1109924, 3.70699978, 43.8660011, 0.763127089, -0.64034456, 0.0871551633, 0.642790556, 0.766042054, 3.15712356e-07, -0.0667647198, 0.0560222715, 0.996194839)
Part1.Orientation = Vector3.new(0, 5, 40)
Part1.Rotation = Vector3.new(0, 5, 40)
Part1.Size = Vector3.new(1, 1, 1)
Part1.Anchored = true
Part1.BottomSurface = Enum.SurfaceType.Smooth
Part1.CanCollide = false
Part1.TopSurface = Enum.SurfaceType.Smooth
SpecialMesh2.Name = ""SpecialMesh""
SpecialMesh2.Parent = Part1
SpecialMesh2.MeshId = ""rbxassetid://5355486008""
SpecialMesh2.TextureId = ""http://www.roblox.com/asset/?id=6815179122""
SpecialMesh2.MeshType = Enum.MeshType.FileMesh
Part3.Parent = WorldModel
Part3.CFrame = CFrame.new(70.1119232, 0.316749007, 43.9393806, 1, 0, 0, 0, 1, 0, 0, 0, 1)
Part3.Color = Color3.new(0.415686, 0.223529, 0.0352941)
Part3.Size = Vector3.new(5.954044342041016, 0.21115493774414062, 5.073566436767578)
Part3.Anchored = true
Part3.BottomSurface = Enum.SurfaceType.Smooth
Part3.BrickColor = BrickColor.new(""Burnt Sienna"")
Part3.Material = Enum.Material.Wood
Part3.TopSurface = Enum.SurfaceType.Smooth
Part3.brickColor = BrickColor.new(""Burnt Sienna"")
Part4.Parent = WorldModel
Part4.CFrame = CFrame.new(70.1126175, 0.527921021, 43.9210892, 1, 0, 0, 0, 1, 0, 0, 0, 1)
Part4.Color = Color3.new(0.415686, 0.223529, 0.0352941)
Part4.Size = Vector3.new(5.6991071701049805, 0.21115493774414062, 4.799654960632324)
Part4.Anchored = true
Part4.BottomSurface = Enum.SurfaceType.Smooth
Part4.BrickColor = BrickColor.new(""Burnt Sienna"")
Part4.Material = Enum.Material.Wood
Part4.TopSurface = Enum.SurfaceType.Smooth
Part4.brickColor = BrickColor.new(""Burnt Sienna"")
Part5.Parent = WorldModel
Part5.CFrame = CFrame.new(70.1395645, 0.105577469, 43.9530144, 1, 0, 0, 0, 1, 0, 0, 0, 1)
Part5.Color = Color3.new(0.415686, 0.223529, 0.0352941)
Part5.Size = Vector3.new(6.2868804931640625, 0.21115493774414062, 5.327659606933594)
Part5.Anchored = true
Part5.BottomSurface = Enum.SurfaceType.Smooth
Part5.BrickColor = BrickColor.new(""Burnt Sienna"")
Part5.Material = Enum.Material.Wood
Part5.TopSurface = Enum.SurfaceType.Smooth
Part5.brickColor = BrickColor.new(""Burnt Sienna"")
Part6.Parent = WorldModel
Part6.CFrame = CFrame.new(70.1126175, 3.94891024, 43.9210892, 1, 0, 0, 0, 1, 0, 0, 0, 1)
Part6.Color = Color3.new(0.415686, 0.415686, 0.415686)
Part6.Transparency = 0.75
Part6.Size = Vector3.new(5.6991071701049805, 6.62999963760376, 4.799654960632324)
Part6.Anchored = true
Part6.BottomSurface = Enum.SurfaceType.Smooth
Part6.BrickColor = BrickColor.new(""Dark grey"")
Part6.Material = Enum.Material.Glass
Part6.TopSurface = Enum.SurfaceType.Smooth
Part6.brickColor = BrickColor.new(""Dark grey"")
ParticleEmitter7.Parent = Part6
ParticleEmitter7.LightInfluence = 1
ParticleEmitter7.Lifetime = NumberRange.new(0.25, 0.25)
SurfaceGui8.Parent = WorldModel
SurfaceGui8.LightInfluence = 1
SurfaceGui8.ClipsDescendants = true
SurfaceGui8.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
SurfaceGui8.Adornee = Part6
TextLabel9.Parent = SurfaceGui8
TextLabel9.Position = UDim2.new(0, 500, 0, 550)
TextLabel9.Size = UDim2.new(0, 200, 0, 50)
TextLabel9.BackgroundColor = BrickColor.new(""Institutional white"")
TextLabel9.BackgroundColor3 = Color3.new(1, 1, 1)
TextLabel9.BackgroundTransparency = 1
TextLabel9.Font = Enum.Font.Gotham
TextLabel9.FontSize = Enum.FontSize.Size28
TextLabel9.Text = ""- just a sword nothing else""
TextLabel9.TextColor = BrickColor.new(""Institutional white"")
TextLabel9.TextColor3 = Color3.new(1, 0, 0)
TextLabel9.TextSize = 14
TextLabel9.TextSize = 28
char.Parent = owner

local remote1 = Instance.new(""RemoteEvent"", owner.Character)
remote1.Name = ""owo""

local function replicate1()
	local part12 = Instance.new(""Part"", workspace)
	part12.Size = Vector3.new(5,5,5)
	part12.Shape = Enum.PartType.Ball
	part12.Anchored = true
	part12.Position = Part3.Position + Vector3.new(0,0,3)
end

remote1.OnServerEvent:Connect(replicate1)

NLS([[
	local inputService = game:GetService(""UserInputService"")
	local mouse = owner:GetMouse()
	local remote = owner.Character:WaitForChild(""owo"")

	inputService.InputBegan:Connect(function(input, gameProcess)
	  if gameProcess then
	    return
	  end
	  if input.UserInputType == Enum.UserInputType.Keyboard then
	    if input.KeyCode.Name == ""Z"" then
	      remote:FireServer()
	    end
	  end
	end)
	]], owner.Character)

spawn(function()
	while wait() do
		Part1.Locked = true
		Part3.Locked = true
		Part4.Locked = true
		Part5.Locked = true
		Part6.Locked = true

		sin = sin + .5

		if Hum.MoveDirection.Magnitude > 0 then
			orien = CFrame.new(Vector3.new(0,0,0), Hum.MoveDirection)
			orien = orien-orien.Position
			llerp = llerp:Lerp(CFrame.Angles(math.rad(math.sin(sin)*35),0,0), .55)
			rlerp = rlerp:Lerp(CFrame.Angles(math.rad(-math.sin(sin)*35),0,0), .55)
		else
			llerp = llerp:Lerp(CFrame.Angles(0,0,0), .25)
			rlerp = rlerp:Lerp(CFrame.Angles(0,0,0), .25)
		end

		Part6.CFrame = CFrame.new(Part6.Position - Vector3.new(0,0,0) + (Hum.MoveDirection/5))*orien
		Part5.CFrame = CFrame.new(Part5.Position + (Hum.MoveDirection/5))*orien
		Part4.CFrame = CFrame.new(Part4.Position + (Hum.MoveDirection/5))*orien
		Part3.CFrame = CFrame.new(Part3.Position + (Hum.MoveDirection/5))*orien
		Part1.CFrame = CFrame.new(Part1.Position + (Hum.MoveDirection/5))*orien
		pos = pos:Lerp(Part6.CFrame, .5)
		char:SetPrimaryPartCFrame(pos)
	end
end)

owner.Chatted:Connect(function(message)

	local TextDial = Instance.new(""TextBox"", BillGui)

	BillGui.Size = UDim2.new(0, 200, 0, 50)
	BillGui.Adornee = Part6
	BillGui.AlwaysOnTop = true
	BillGui.MaxDistance = math.huge
	BillGui.StudsOffset = Vector3.new(0,3,0)

	TextDial.Text = message
	TextDial.TextEditable = false
	TextDial.Font = Enum.Font.Gotham
	TextDial.BackgroundTransparency = 0
	TextDial.BackgroundColor3 = Color3.new(0, 0, 0)
	TextDial.TextColor = BrickColor.Yellow()
	TextDial.BorderColor = BrickColor.White()
	TextDial.Position = UDim2.new(0, 0, 0, 0)
	TextDial.Size = UDim2.new(0, 200, 0, 50)
	TextDial.TextColor3 = Color3.new(255, 255, 255)
	TextDial.TextScaled = true

	local text = message
	for i=1 , #text do
		TextDial.Text = string.sub(text,1,i)
		wait(0.2)   -- detemines how slow text should be typed
	end	
	repeat TextDial:Destroy() wait(15) until message
end)"
KxK122bx,Untitled,coinwalk,JavaScript,Sunday 24th of March 2024 07:13:37 AM CDT,https://www.youtube.com/watch?v=PYOsevW3KdA
TQuwgZ5j,data878,TestGuy1,JSON,Sunday 24th of March 2024 07:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'bf44a35532f3edf6fcca36c43757481b9900c413a954b8bc4f2a501b98efd82c03344cf4b527a5865d8668a8aedbac7956bbee36fe688f424023b8653e4effcb01bfc00a21cba7574f7398f608a46a9e7f1e61e24e0dabb29253c159d701cc3af3dbdc47cb269dcd13f0781724bd047ede1f4e20dda74d7a80de3c84dbad8a5a',
  otherdata: [
    '2835d2f50a8beba20ad931fa7afc5141',
    '333674182309aa80f25617ba518205d5',
    'a19db4cfa1329440a3ddd4648fa4efaa',
    '894f6ff3810142abd4bc70958a069c2c',
    '44f78cd1b393a6e6d3fc2aa673becb44',
    '96e77f0afecd9dfab461f29145c0d233',
    '7d643c634fb826170f0e416470d6c73f',
    'e22ada234f8b28a84517015de4ac820c'
  ]
}"
Db0QG7Jf,Untitled,Josif_tepe,C++,Sunday 24th of March 2024 06:45:40 AM CDT,"#include <iostream>
#include <algorithm>
using namespace std;

int main() {
    int n, c, d, e;
    int tabaci, strana;
    cin >> tabaci >> strana;
    
    int S = 1;
    int E = tabaci * 4;
    
    for(int i = 0; i < tabaci; i++) {
        
        
        if(strana == S) {
            cout << S + 1 << "" "" << E - 1 << "" "" << E << endl;
        }
        else if(strana == S + 1) {
            cout << S << "" "" << E - 1 << "" "" << E << endl;
        }
        else if(strana == E - 1) {
            cout << S << "" "" << S + 1 << "" "" << E << endl;
        }
        else if(strana == E) {
            cout << S << "" "" << S + 1 << "" "" << E - 1 << endl;
        }
        S += 2;
        E -= 2;
    }
    
    
    return 0;
}
"
rhkQzcte,09. Ski Trip,GabrielHr00,Java,Sunday 24th of March 2024 06:30:14 AM CDT,"package _03_ConditionalStatementsAdvanced;

import java.util.Scanner;

public class SkiTrip {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int days = Integer.parseInt(scanner.nextLine());
        String roomType = scanner.nextLine();
        String grade = scanner.nextLine();

        int nights = days - 1;
        double finalSum = 0.0;

        if (roomType.equals(""room for one person"")) {
            finalSum = 18.0 * nights;

        } else if (roomType.equals(""apartment"")) {
            finalSum = 25.0 * nights;

            if (days < 10) {
                finalSum = finalSum * 0.70;
            } else if (days >= 10 && days <= 15) {
                finalSum = finalSum * 0.65;
            } else if (days > 15) {
                finalSum = finalSum * 0.50;
            }

        } else if (roomType.equals(""president apartment"")) {
            finalSum = 35.0 * nights;

            if (days < 10) {
                finalSum = finalSum * 0.90;
            } else if (days >= 10 && days <= 15) {
                finalSum = finalSum * 0.85;
            } else if (days > 15) {
                finalSum = finalSum * 0.80;
            }
        }

        if (grade.equals(""positive"")) {
            finalSum = finalSum * 1.25;
        } else {
            finalSum = finalSum * 0.90;
        }

        System.out.printf(""%.2f"", finalSum);
    }
}
"
02icvAqF,Numbers Convertor Extended,bAngelov,JavaScript,Sunday 24th of March 2024 06:30:08 AM CDT,"function solve() {

    const convertors = {
        ""decimal"": {
            ""binary"": number => Number(number).toString(2),
            ""hexadecimal"": number => Number(number).toString(16).toUpperCase(),
            ""octal"": number => Number(number).toString(8).toUpperCase(),
        },
        ""binary"":{
            ""decimal"": string => parseInt(string,2),
            ""hexadecimal"": string => parseInt(string,2).toString(16).toUpperCase(),
            ""octal"": string => parseInt(string,2).toString(8),
        },
        ""hexadecimal"":{
            ""decimal"": string => parseInt(string,16),
            ""binary"": string => parseInt(string,16).toString(2),
            ""octal"": string => parseInt(string,16).toString(8),
        },
        ""octal"":{
            ""decimal"": string => parseInt(string,8),
            ""binary"": string => parseInt(string,8).toString(2),
            ""hexadecimal"": string => parseInt(string,8).toString(16),
        }
    }

    const createOptions = (nameArray,selectElement)=>{
        selectElement.length = 0
        nameArray.forEach(name=>{
            const el = document.createElement(""option"")
            el.textContent = name[0].toUpperCase() + name.slice(1)
            el.value = name.toLowerCase()
            selectElement.add(el)
        })
    }

    const value = document.querySelector(""#input"")
    value.type = ""text""
    const convertToElement = document.querySelector(""#selectMenuTo"")
    const convertFromElement = document.querySelector(""#selectMenuFrom"")
    const outputElement = document.querySelector(""footer input"")
    convertToElement.remove(0)
    convertFromElement.remove(0)

    const updateFromList = () => createOptions(Object.keys(convertors),convertFromElement)
    const updateToList = () => createOptions(Object.keys(convertors[convertFromElement.value]),convertToElement)
    updateFromList()
    updateToList()

    function convert() {
        outputElement.value = convertors[convertFromElement.value][convertToElement.value](value.value)
    }

    document.querySelector(""#container button"").addEventListener(""click"", convert)
    document.querySelector(""#selectMenuFrom"").addEventListener(""change"", updateToList)

}"
ahLDXq82,08. On Time for the Exam,GabrielHr00,Java,Sunday 24th of March 2024 06:29:28 AM CDT,"package _03_ConditionalStatementsAdvanced;

import java.util.Scanner;

public class OnTimeForTheExam {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int examHour = Integer.parseInt(scanner.nextLine());
        int examMinutes = Integer.parseInt(scanner.nextLine());
        int arrivalHour = Integer.parseInt(scanner.nextLine());
        int arrivalMinutes = Integer.parseInt(scanner.nextLine());

        // calc exam time in minutes => (easier when working only with minutes)
        int timeForExam = (examHour * 60) + examMinutes;
        int timeForArrival = (arrivalHour * 60) + arrivalMinutes;

        // get difference between arrival time and exam time
        int diff = Math.abs(timeForArrival - timeForExam);

        // check if student is late (when timeForArrival > timeForExam)
        if(timeForArrival > timeForExam) {
            System.out.println(""Late"");

            // more than 1 hour late for the exam
            if(diff >= 60) {
                // convert back into hours/minutes
                int hour = diff / 60;
                int minutes = diff % 60;
                // %02d -> check if minutes are < 10, then insert 0 infront, if not - don't do anything
                System.out.printf(""%d:%02d hours after the start"", hour, minutes);
            } else{
                System.out.printf(""%d minutes after the start"", diff);
            }
        }
        // check for arrival on time or earlier, but not more than 30 mins
        else if(timeForExam == timeForArrival || diff <= 30) {
            System.out.println(""On Time"");

            // check for minutes before the start
            if(diff >= 1 && diff <= 30) {
                System.out.printf(""%d minutes before the start"", diff);
            }
        }
        else {
            System.out.println(""Early"");
            // more than 1 hour early for the exam
            if(diff >= 60) {
                // convert back into hours/minutes
                int hour = diff / 60;
                int minutes = diff % 60;
                // %02d -> check if minutes are < 10, then insert 0 infront, if not - don't do anything
                System.out.printf(""%d:%02d hours before the start"", hour, minutes);
            } else{
                System.out.printf(""%d minutes before the start"", diff);
            }
        }

    }
}
"
TjizkYPU,07. Hotel Room,GabrielHr00,Java,Sunday 24th of March 2024 06:28:30 AM CDT,"package _03_ConditionalStatementsAdvanced;

import java.util.Scanner;

public class HotelRoom {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String month = scanner.nextLine();
        int nights = Integer.parseInt(scanner.nextLine());

        double studioPrice = 0.0;
        double apartmentPrice = 0.0;

        if (month.equals(""May"") || month.equals(""October"")) {
            studioPrice = 50.0 * nights;
            apartmentPrice = 65.0 * nights;

            if(nights > 7 && nights <= 14) {
                //studioPrice = studioPrice - (studioPrice * 0.05);
                studioPrice = studioPrice * 0.95;
            } else if (nights > 14) {
                //studioPrice = studioPrice - (studioPrice * 0.30);
                studioPrice = studioPrice * 0.70;
                apartmentPrice = apartmentPrice * 0.90;
            }
        }
        else if (month.equals(""June"") || month.equals(""September"")) {
            studioPrice = 75.20 * nights;
            apartmentPrice = 68.70 * nights;

            if (nights > 14) {
                //studioPrice = studioPrice - (studioPrice * 0.20);
                studioPrice = studioPrice * 0.80;
                apartmentPrice = apartmentPrice * 0.90;
            }
        }
        else if (month.equals(""July"") || month.equals(""August"")) {
            studioPrice = 76.0 * nights;
            apartmentPrice = 77.0 * nights;

            if(nights > 14) {
                apartmentPrice = apartmentPrice * 0.90;
            }
        }

        System.out.printf(""Apartment: %.2f lv.%nStudio: %.2f lv."", apartmentPrice, studioPrice);

    }
}"
JVNEDGWk,06. Operations Between Numbers,GabrielHr00,Java,Sunday 24th of March 2024 06:27:27 AM CDT,"package _03_ConditionalStatementsAdvanced;

import java.util.Scanner;

public class OperationsBetweenNumbers {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n1 = Integer.parseInt(scanner.nextLine());
        int n2 = Integer.parseInt(scanner.nextLine());
        char operator = scanner.nextLine().charAt(0);

        if (operator == '+') {
            int result = n1 + n2;

            if (result % 2 == 0) {
                System.out.printf(""%d %c %d = %d - even"", n1, operator, n2, result);
            } else {
                System.out.printf(""%d %c %d = %d - odd"", n1, operator, n2, result);
            }

        } else if (operator == '-') {
            int result = n1 - n2;

            if (result % 2 == 0) {
                System.out.printf(""%d %c %d = %d - even"", n1, operator, n2, result);
            } else {
                System.out.printf(""%d %c %d = %d - odd"", n1, operator, n2, result);
            }
        }
        else if (operator == '*') {
            int result = n1 * n2;

            if (result % 2 == 0) {
                System.out.printf(""%d %c %d = %d - even"", n1, operator, n2, result);
            } else {
                System.out.printf(""%d %c %d = %d - odd"", n1, operator, n2, result);
            }
        }
        else if (operator == '/') {
            if (n2 == 0) {
                System.out.printf(""Cannot divide %d by zero"", n1);
            } else {
                double result = n1 / (1.0 * n2);
                System.out.printf(""%d %c %d = %.2f"", n1, operator, n2, result);
            }
        }
        else if (operator == '%') {
            if (n2 == 0) {
                System.out.printf(""Cannot divide %d by zero"", n1);
            } else {
                int result = n1 % n2;
                System.out.printf(""%d %c %d = %d"", n1, operator, n2, result);
            }
        }

    }
}
"
RFxCgqbr,05. Journey,GabrielHr00,Java,Sunday 24th of March 2024 06:26:38 AM CDT,"package _03_ConditionalStatementsAdvanced;

import java.util.Scanner;

public class Journey {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double budget = Double.parseDouble(scanner.nextLine());
        String season = scanner.nextLine();

        String destination = """";
        String rest = """";
        double spentMoney = 0.0;

        if(budget <= 100) {
            destination = ""Bulgaria"";
            if(season.equals(""summer"")) {
                rest = ""Camp"";
                spentMoney = budget * 0.30;
            } else if(season.equals(""winter"")) {
                rest = ""Hotel"";
                spentMoney = budget * 0.70;
            }
        }
        else if (budget <= 1000) {
            destination = ""Balkans"";
            if(season.equals(""summer"")) {
                rest = ""Camp"";
                spentMoney = budget * 0.40;
            } else if(season.equals(""winter"")) {
                rest = ""Hotel"";
                spentMoney = budget * 0.80;
            }
        }
        else if (budget > 1000) {
            destination = ""Europe"";
            rest = ""Hotel"";
            spentMoney = budget * 0.90;
        }

        System.out.printf(""Somewhere in %s%n%s - %.2f"", destination, rest, spentMoney);
    }
}"
9J8fSKSa,04. Fishing Boat,GabrielHr00,Java,Sunday 24th of March 2024 06:25:35 AM CDT,"package _03_ConditionalStatementsAdvanced;

import java.util.Scanner;

public class FishingBoat {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int budget = Integer.parseInt(scanner.nextLine());
        String season = scanner.nextLine();
        int fishersCount = Integer.parseInt(scanner.nextLine());

        double boatRent = 0.0;
        switch (season) {
            case ""Spring"":
                boatRent = 3000.0;
                break;
            case ""Summer"":
            case ""Autumn"":
                boatRent = 4200.0;
                break;
            case ""Winter"":
                boatRent = 2600.0;
                break;
        }

        if (fishersCount <= 6) {
            boatRent = boatRent * 0.90;
        } else if (fishersCount >= 7 && fishersCount <= 11) {
            boatRent = boatRent * 0.85;
        } else if (fishersCount >= 12) {
            boatRent = boatRent * 0.75;
        }

        if (fishersCount % 2 == 0 && !(season.equals(""Autumn"")) ) {
            boatRent = boatRent * 0.95;
        }

        double diff = Math.abs(budget - boatRent);
        if (budget >= boatRent) {
            System.out.printf(""Yes! You have %.2f leva left."", diff);
        } else {
            System.out.printf(""Not enough money! You need %.2f leva."", diff);
        }

    }
}
"
uyr9uADg,03. New House,GabrielHr00,Java,Sunday 24th of March 2024 06:24:55 AM CDT,"package _03_ConditionalStatementsAdvanced;

import java.util.Scanner;

public class NewHouse {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String flowerType = scanner.nextLine();
        int flowerCount = Integer.parseInt(scanner.nextLine());
        int budget = Integer.parseInt(scanner.nextLine());

        double finalSum = 0.0;

        switch (flowerType) {
            case ""Roses"":
                finalSum = 5.0 * flowerCount;
                if (flowerCount > 80) {
                    finalSum = finalSum * 0.90;
                    //finalSum = finalSum - (finalSum * 0.10);
                    // finalSum *= 0.90;
                }
                break;
            case ""Dahlias"":
                finalSum = 3.80 * flowerCount;
                if (flowerCount > 90) {
                    finalSum = finalSum * 0.85;
                }
                break;
            case ""Tulips"":
                finalSum = 2.8 * flowerCount;
                if (flowerCount > 80) {
                    finalSum = finalSum * 0.85;
                }
                break;
            case ""Narcissus"":
                finalSum = 3.0 * flowerCount;
                if (flowerCount < 120) {
                    finalSum = finalSum * 1.15;
                }
                break;
            case ""Gladiolus"":
                finalSum = 2.50 * flowerCount;
                if (flowerCount < 80) {
                    finalSum = finalSum * 1.20;
                }
                break;
        }


        double diff = Math.abs(budget - finalSum);
        if (budget >= finalSum) {
            System.out.printf(""Hey, you have a great garden with %d %s and %.2f leva left."",
                    flowerCount, flowerType, diff);
        } else {
            System.out.printf(""Not enough money, you need %.2f leva more."", diff);
        }

    }
}
"
EqA2Acwp,02. Summer Outfit,GabrielHr00,Java,Sunday 24th of March 2024 06:24:14 AM CDT,"package _03_ConditionalStatementsAdvanced;

import java.util.Scanner;

public class SummerOutfit {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int degrees = Integer.parseInt(scanner.nextLine());
        String dayTime = scanner.nextLine();

        String outfit = """";
        String shoes = """";

        if (dayTime.equals(""Morning""))
        {
            if (degrees >= 10 && degrees <= 18) {
                outfit = ""Sweatshirt"";
                shoes = ""Sneakers"";
            } else if (degrees > 18 && degrees <= 24) {
                outfit = ""Shirt"";
                shoes = ""Moccasins"";
            } else if (degrees >= 25) {
                outfit = ""T-Shirt"";
                shoes = ""Sandals"";
            }
        }
        else if (dayTime.equals(""Afternoon""))
        {
            if (degrees >= 10 && degrees <= 18) {
                outfit = ""Shirt"";
                shoes = ""Moccasins"";
            } else if (degrees > 18 && degrees <= 24) {
                outfit = ""T-Shirt"";
                shoes = ""Sandals"";
            } else if (degrees >= 25) {
                outfit = ""Swim Suit"";
                shoes = ""Barefoot"";
            }
        } else if (dayTime.equals(""Evening""))
        {
            if (degrees >= 10 && degrees <= 18) {
                outfit = ""Shirt"";
                shoes = ""Moccasins"";
            } else if (degrees > 18 && degrees <= 24) {
                outfit = ""Shirt"";
                shoes = ""Moccasins"";
            } else if (degrees >= 25) {
                outfit = ""Shirt"";
                shoes = ""Moccasins"";
            }
        }

        System.out.printf(""It's %d degrees, get your %s and %s."", degrees, outfit, shoes);

    }
}"
brUxqM0h,01. Cinema,GabrielHr00,Java,Sunday 24th of March 2024 06:23:33 AM CDT,"package _03_ConditionalStatementsAdvanced;

import java.util.Scanner;

public class Cinema {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String ticketType = scanner.nextLine();
        int rows = Integer.parseInt(scanner.nextLine());
        int columns = Integer.parseInt(scanner.nextLine());

        int seatsAll = rows * columns;
        double totalPrice = 0.0;

//        if (ticketType.equals(""Premiere"")) {
//            totalPrice = 12.0 * seatsAll;
//        } else if (ticketType.equals(""Normal"")) {
//            totalPrice = 7.50 * seatsAll;
//        } else if (ticketType.equals(""Discount"")) {
//            totalPrice = 5.0 * seatsAll;
//        }

        switch (ticketType) {
            case ""Premiere"":
                totalPrice = 12.0 * seatsAll;
                break;
            case ""Normal"":
                totalPrice = 7.50 * seatsAll;
                break;
            case ""Discount"":
                totalPrice = 5.0 * seatsAll;
                break;
        }

        System.out.printf(""%.2f leva"", totalPrice);

    }
}
"
