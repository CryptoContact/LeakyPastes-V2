id,title,username,language,date,content
yLWJU4J2,arabic101layout.ahk,jcunews,Autohotkey,Monday 5th of February 2024 11:44:49 PM CDT,";Arabic (101) keyboard layout for U.S. (QWERTY) keyboards.
;
;Version 1.0.1. For AutoHotkey v1 Unicode version only.
;https://pastebin.com/u/jcunews
;https://www.reddit.com/user/jcunews1
;
;Layout image: https://upload.wikimedia.org/wikipedia/commons/a/af/KB_Arabic.svg
;
;This script is for users whose system not yet have Arabic keyboard layout,
;and the users do not have access to add built in keyboard layouts.
;Use the ScrollLock key activate/deactivate (follows the ScrollLock LED).

#persistent

if (!a_isunicode) {
  msgbox This script requires Unicode version of AutoHotkey v1.
  exitapp
}
map:= {""'"": [""0637"", ""0651""]
  , "","": [""0648"", "",""]
  , ""."": [""0632"", "".""]
  , ""/"": [""0638"", ""061F""]
  , "";"": [""0643"", "":""]
  , ""["": [""062C"", ""<""]
  , ""\"": [""0630"", ""|""]
  , ""]"": [""062F"", "">""]
  , ""``"": [""0630"", ""0651""]
  , ""A"": [""0634"", ""0650""]
  , ""B"": [""06440627"", ""06440622""]
  , ""C"": [""0624"", ""0650""]
  , ""D"": [""064A"", ""]""]
  , ""E"": [""062B"", ""064F""]
  , ""F"": [""0628"", ""[""]
  , ""G"": [""0644"", ""06440623""]
  , ""H"": [""0627"", ""0623""]
  , ""I"": [""0647"", ""00F7""]
  , ""J"": [""062A"", ""0640""]
  , ""K"": [""0646"", ""060C""]
  , ""L"": [""0645"", ""/""]
  , ""M"": [""0629"", ""2019""]
  , ""N"": [""0649"", ""0622""]
  , ""O"": [""062E"", ""00D7""]
  , ""P"": [""062D"", ""061B""]
  , ""Q"": [""0636"", ""064E""]
  , ""R"": [""0642"", ""064C""]
  , ""S"": [""0633"", ""064D""]
  , ""T"": [""0641"", ""06440625""]
  , ""U"": [""0639"", ""2018""]
  , ""V"": [""0631"", ""064D""]
  , ""W"": [""0635"", ""064B""]
  , ""X"": [""0621"", ""0652""]
  , ""Y"": [""063A"", ""0625""]
  , ""Z"": [""0626"", ""~""]}
for k, v in map {
  loop 2 {
    if (strlen(v[a_index]) == 4) {
      v[a_index]:= chr(""0x"" v[a_index])
    } else if (strlen(v[a_index]) == 8) {
      v[a_index]:= chr(""0x"" substr(v[a_index], 1, 4)) chr(""0x"" substr(v[a_index], 5))
    }
  }
}
if (getkeystate(""scrolllock"", ""t""))
  check()
return

check() {
  global map
  if (getkeystate(""scrolllock"", ""t"")) {
    for k, v in map {
      hotkey, %k%, handler
      hotkey, +%k%, handler
    }
  } else {
    for k, v in map {
      hotkey, %k%, off
      hotkey, +%k%, off
    }
  }
}

~scrolllock::
keywait scrolllock
check()
return

handler:
i:= getkeystate(""capslock"", ""t"") ^ (substr(a_thishotkey, 1, 1) == ""+"")
send % map[substr(a_thishotkey, 0)][i + 1]
return
"
NjNwFiV0,G2A.com Free Gift Card Guide Feb 2024,ounnuo,GetText,Monday 5th of February 2024 11:36:55 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_195153.pdf
 
Working as of
06 February 2024"
Rk8ay61y,part b,stormman,Python,Monday 5th of February 2024 11:36:10 PM CDT,"# PART B STEP 1: WRITE YOUR CODE BELOW

#prompting user to input a 10-digit faxnumber 
fax_num = int(input('Enter a 10-digit number: '))

#getting the area code/prefix/line number using // and %
area_code = int(fax_num // 1000000) #Using // to avoid decimal point

#using // to get the first six digits and % to get the last three
prefix = int((fax_num // 10000) % 1000)
line_num = int(fax_num % 10000) #using % to get the last four digits

#output
print (f'Your fax number is: ({area_code})-{prefix}-{line_num}')"
hkYCe4Ha,List of all FREE Crypto Airdrops!,jusst2k4,GetText,Monday 5th of February 2024 11:07:40 PM CDT,"Looking for a list of all the current, free airdrops from all blockchains?
Check out NetDrop - https://claim-netdrop.netlify.app/

NetDrop provides a list of all active airdrops, which is updated every minute so you can claim the newest airdrops as soon as they are available.
No more finding airdrops; the airdrops find you.

Visit NetDrop completely free now, no sign-up required.
https://claim-netdrop.netlify.app/

142245"
vW5fX4y7,Big_Chop,JW4L13,Lua,Monday 5th of February 2024 10:45:34 PM CDT,"function chop()
    k = 0
    turtle.dig()
    turtle.forward()
    while turtle.detectUp() do
        k = k + 1
        turtle.turnRight()
        turtle.dig()
        for i = 1, 2, 1 do
            turtle.turnLeft()
            turtle.dig()
        end
        turtle.forward()
        turtle.turnRight()
        turtle.turnRight()
        turtle.digUp()
        turtle.up()
    end
    turtle.turnRight()
    turtle.dig()
    for i = 1, 2, 1 do
        turtle.turnLeft()
        turtle.dig()
    end
    turtle.forward()
    turtle.turnRight()
    turtle.turnRight()
    for i = 1, k, 1 do
        turtle.down()
    end
end

function setup()
    key = ""minecraft:spruce_log""
end

function main()
    setup()
    while true do
        success, block = turtle.inspect()
        if success and block.name == key then
            chop()
        end
        os.sleep(5)
    end
end

main()"
chX5KH4D,MaxMNEco @pos4you  https://t.me/c/1594165489/1178,jiraff537,Bash,Monday 5th of February 2024 10:22:59 PM CDT,"after https://t.me/c/1594165489/1177

Не поленился и прояснил каждое ваше замечание  
.0 ""вы уже получили то, за чем пришли""
    -Еще не получил я за йогой -  я на пути :)
.1 ""Вам нужно было заявить о себе, и вы это сделали""
     -Ваше предположение о цели ""заявить о себе""  ошибочно я в хорошем настроении дал ответ на несколько реакций на ответы на заданный мной вопрос выше.
.2 ""Вы искали общение, и вы его нашли.""
     -Да было приятно получить на вопрос несколько подробных и теплых ответов.
.3 ""А если вы действительно ищете знаний и не лукавите, то перестаньте мерить всех  относительно собственного эго, одевать разноцветные штаны на мастеров и учеников, ""
     -Про знания и лукавство не ясно - знание что взять с собой на первое занятие я получил и благодарен ответившим; перечитайте сообщения я ни к кому меру не прикладывал да и тешить эго не мой путь 
(Я думаю юмор и самоирония над собой не менее и не более вас задели - я не понят вами - бывает;)

before https://t.me/c/1594165489/1180

"
0UNbQM8W,nautinix 2,nirajs,Python,Monday 5th of February 2024 10:21:04 PM CDT,"'''
nums = [1,2,3,1]
output : 2

[1,2,3,1] ->  2
[1,1,1,1] -> -1

[1,2,3,4,5,[6],3,4,[8],3,1,2,3,4]

-> 4, 8 ... 7



'''



def findPeakElement(nums) -> int:
    
    lo, hi = 0, len(nums) - 1
    
    while (lo <= hi):
        mid = (lo + hi) // 2
        print(""mid"", mid)
        # 2 1 .....
        if (mid == 0 and nums[mid] > nums[mid + 1]):
            return mid
        
        # else:
        #     return -1
         
        # ...... 1 2    
        if (mid == len(nums)- 1) and nums[mid] > nums[mid-1]:
            return mid
            
        # else:
        #     return -1
            
        # .... 3 5  1  ..    
        if (nums[mid-1] < nums[mid] > nums[mid+1]):
            return mid
            
        # go towards left
        if (nums[mid-1] > nums[mid]):
            hi = mid - 1
        
        else:
            lo = mid + 1
            
    return -1
    
nums = [1,2,3,4]  
""""""
4 
lo = 0 -> 1
hi = 3.   3

mid -> 1 -> 2
""""""
print(findPeakElement(nums))
            
            
        
            
             
        "
4jMJ7UTn,nutanix 1,nirajs,Python,Monday 5th of February 2024 10:20:53 PM CDT,"'''
Given a string s, find the length of the longest substring without repeating characters.
Input: s = ""abcabcbb""
Output: 3



left pointer  0
right pointer 0

expand right pointer till we can make substring with non repeating 

abcabcbb

left =  0
right = 0

hashmap -> (a 1,b 1,c 1)
abcabcbb
3

a | bc | a

bacabc
left = 2
right = 4

left
right 

I try to maximize window  by exapnding right pointers toward right

shrink by increamsing left


'''


from collections import defaultdict

def longestSubstring(s) -> int:
    freqCount = defaultdict(int)
        
    left = 0
    maxSubstring = 0
    for right in range(len(s)):
        c = s[right]
        
        # shrink
        while (freqCount[c] > 0):
            freqCount[s[left]] -=1
            left += 1
            
        freqCount[c] += 1
        maxSubstring = max(maxSubstring, right - left + 1)
        
    
    return maxSubstring
    
s = ""aaaaa""
print(longestSubstring(s))
        
        
        
    
    
        










"
MZEFPZmu,TestEnch,LiePyron,Lua,Monday 5th of February 2024 09:50:53 PM CDT,"function turtleService(ench,t) --PORCO DIOOOOOOOOOOOOOOOOOOOOOOOOOO
    for i = 1,#t do
        if t[i][1].displayName == ench then
            chest.pushItems(peripheral.getName(chestOut),t[i][2])
        end
    end
        if chestCheck.getItemDetail(1) ~= nil then 
            print(""OhMygos"")
           -- while chestCheck.getItemDetail(1) ~= nil do 
           --      redstone.setOutput(""right"",true)
           --  end 
           --  redstone.setOutput(""right"",false)
        end
end
function getAvbEnch()
    chest = peripheral.wrap(""minecraft:chest_2"")
    chestOut = peripheral.wrap(""blueprint:chest_2"")
    chestCheck = peripheral.wrap(""minecraft:chest_3"")    
        if not chest then print(""chest not found! :c"") 
        end
    
    local n = chest.list()
    local tabl = {}
    for i,item in pairs(n) do
        local riga = {}
       -- if item.displayName ~= nil then
            table.insert(tabl,riga)
            table.insert(riga,chest.getItemDetail(i))
            table.insert(riga,i)
            --table[i] = chest.getItemDetail(i)
            print(#tabl,"":"", tabl[#tabl][1].displayName)
        --end
    end
    return tabl
end
 
function menu(t,inp)
    x = tonumber(inp)
    for i = 1,#t do
    if x == i then
    print(""Printing:"",t[x][1].displayName)
            local c = t[x][1].displayName
            turtleService(c,t)
    elseif x ~= i then  
    end
end
end
print(""Type your book of choice"")
menu(getAvbEnch(),read())"
aLkjRBJ8,Induction Matrix Modern Monitor - Voxxie,MsVoxxie,Lua,Monday 5th of February 2024 09:27:00 PM CDT,"-- Initiate interfaces
-- Find our peripherals
local monitor = nil
repeat monitor = peripheral.find('monitor') until monitor

local matrix = nil
repeat matrix = peripheral.find('inductionPort') until matrix

-- Define Functions

function clearMonitor()
    monitor.setBackgroundColor(colors.black)
    monitor.clear()
    monitor.setCursorPos(1, 1)
end

function drawText(x, y, text, txtcol, bgcol)
    monitor.setBackgroundColor(bgcol)
    monitor.setTextColor(txtcol)
    monitor.setCursorPos(x, y)
    monitor.write(text)
end

function drawLine(x, y, len, size, color)
    for yPos = (y - len), y - 1 do
        monitor.setBackgroundColor(color)
        monitor.setCursorPos(x, yPos)
        monitor.write(string.rep(' ', size))
    end
end

function drawProgressBar(x, y, len, size, min, max, color, bgcolor)
    drawLine(x, y, len, size, bgcolor)
    local barSize = math.floor((min / max) * len)
    drawLine(x, y, barSize, size, color)
end

-- Draw Backdrop
function drawBackdrop()
    -- Draw PowerStats Box
    paintutils.drawBox(2, 2, monX - 10, monY - 1, colors.white)
    mainText = ' Power Stats '
    drawText(monX / 2 - #mainText / 2 - 2, 2, mainText, colors.white, colors.black)

    -- Draw Battery Box
    paintutils.drawBox(monX - 8, 2, monX - 1, monY - 1, colors.white)
    powerText = ' FE '
    drawText(monX - 11 / 2 - #powerText / 2 + 2, 2, powerText, colors.white, colors.black)
end

-- Generate Static Interface Text
-- @param leftAlign L/R starting position
-- @param startHeight U/D starting position
function drawIfaceText(leftAlign, startHeight)
    term.setBackgroundColor(colors.black)
    term.setCursorPos(leftAlign, startHeight)
    print('Max FE:')
    term.setCursorPos(leftAlign, startHeight + 1)
    print('Max IO:')

    term.setCursorPos(leftAlign, startHeight + 3)
    print('Cur In:')
    term.setCursorPos(leftAlign, startHeight + 4)
    print('Cur Out:')
    term.setCursorPos(leftAlign, startHeight + 5)
    print('Cur Bal:')

    term.setCursorPos(leftAlign, startHeight + 7)
    print('Stored:')
    term.setCursorPos(leftAlign, startHeight + 8)
    print('Filled:')
end

-- Center Align text
-- @param text Text to write
-- @param color Text color
-- @param yValue Where to place the Y Value
local function centerText(text, color, yValue)
    local x,y = term.getSize()
    local x2,y2 = term.getCursorPos()
    term.setTextColor(color)
    term.setCursorPos(math.ceil((x / 2) - (text:len() / 2)), yValue)
    write(text)
end
    
--
-- @param line The line to print on
-- @param text The text to print there
-- @param color The color to print in
-- @return void
function putValue(line, text, color)
    local align = 32 - string.len(text)
    term.setCursorPos(align, line)
    term.setTextColor(color)
    print(text)
end

-- Get a number in a human readable format
-- This is used to display numbers on screen
--
-- @param number The number to format
-- @return The formatted number
function putNumber(number)
    local round = 0
    local texts = """"

    if number >= 1000000000000000000 then
        round = (number / 1000000000000000000)
        texts = string.sub(round, 0, 5) .. "" EFE""
    else
        if number >= 1000000000000000 then
            round = (number / 1000000000000000)
            texts = string.sub(round, 0, 5) .. "" PFE""
        else
            if number >= 1000000000000 then
                round = (number / 1000000000000)
                texts = string.sub(round, 0, 5) .. "" TFE""
            else
                if number >= 1000000000 then
                    round = (number / 1000000000)
                    texts = string.sub(round, 0, 5) .. "" GFE""
                else
                    if number >= 1000000 then
                        round = (number / 1000000)
                        texts = string.sub(round, 0, 5) .. "" MFE""
                    else
                        if number >= 1000 then
                            round = (number / 1000)
                            texts = string.sub(round, 0, 5) .. "" kFE""
                        else
                            texts = string.sub(number, 0, 5) .. ""  FE""
                        end
                    end
                end
            end
        end
    end
    return texts
end

-- matrix Check Loop
-- @param leftAlign L/R starting positon
-- @param startHeight U/D starting position
-- @param height Height of the box
-- @param width Width of the box
function updateBatteryData(leftAlign, startHeight, height, width)
    term.setBackgroundColor(colors.black)
    -- Get our fixed matrix values
    batteryMaxCharge = mekanismEnergyHelper.joulesToFE(matrix.getMaxEnergy())
    batteryMaxInOuts = mekanismEnergyHelper.joulesToFE(matrix.getTransferCap())
    putValue(startHeight, putNumber(batteryMaxCharge), colors.lightBlue)
    putValue(startHeight + 1, putNumber(batteryMaxInOuts), colors.lightBlue)

    -- Get our input/output/balance matrix values
    batteryCurrentIn = mekanismEnergyHelper.joulesToFE(matrix.getLastInput())
    batteryCurrentOut = mekanismEnergyHelper.joulesToFE(matrix.getLastOutput())
    putValue(startHeight + 3, putNumber(batteryCurrentIn), colors.lightBlue)
    putValue(startHeight + 4, putNumber(batteryCurrentOut), colors.lightBlue)

    batteryCurrentBalance = batteryCurrentIn - batteryCurrentOut
    batteryCurrentColor = (batteryCurrentBalance >= 0) and colors.green or colors.red
    batteryCurrentSign = (batteryCurrentBalance >= 0) and ""+"" or """"
    putValue(startHeight + 5, batteryCurrentSign .. putNumber(batteryCurrentBalance), batteryCurrentColor)

    -- Get our statistical values
    batteryCurrentCharge = mekanismEnergyHelper.joulesToFE(matrix.getEnergy())
    putValue(startHeight + 7, putNumber(batteryCurrentCharge), colors.lightBlue)

    batteryCurrentColor = colors.red
    batteryCurrentPercentage = ((batteryCurrentCharge / batteryMaxCharge) * 100)
    if batteryCurrentPercentage > 30 then batteryCurrentColor = colors.orange end
    if batteryCurrentPercentage > 60 then batteryCurrentColor = colors.green end
    putValue(startHeight + 8, string.sub(putNumber(batteryCurrentPercentage), 0, 4) .. ""%"", batteryCurrentColor)

    -- Draw Battery
    drawProgressBar(monX - 7, monY - 1, monY - 4, 6, batteryCurrentPercentage, 100, batteryCurrentColor, colors.gray)
end

-- Check and bind monitor
    monitor.clear()
    monitor.setTextScale(1.0)
    monX, monY = monitor.getSize()
    term.redirect(monitor)
    term.setCursorPos(1, 1)
    term.setBackgroundColor(colors.black)

-- Clear Monitor
clearMonitor()
-- Draw backdrop
drawBackdrop()
-- Draw Static interface text
drawIfaceText(13, 6)

while true do
    updateBatteryData(3, 6, 12, 4)
--    os.sleep(2)
end
"
Aj8FNrg2,fffi,Gruzing,Lua,Monday 5th of February 2024 09:02:16 PM CDT,"-- AUTO REVIDE / FIGHT BACK / ATTACK PLAYER PK (REVIDAR)

setDefaultTab(""Main"")

-- vBot scripting services: F.Almeida#8019
-- if you like it, consider making a donation:
-- https://www.paypal.com/donate/?business=8XSU4KTS2V9PN&no_recurring=0&item_name=OTC+AND+OTS+SCRIPTS&currency_code=USD

-- ATTENTION:
-- Don't edit below this line unless you know what you're doing.
-- ATENÇÃO:
-- Não mexa em nada daqui para baixo, a não ser que saiba o que está fazendo.
-- ATENCIÓN:
-- No cambies nada desde aquí, solamente si sabes lo que estás haciendo.

local ignoreEmblems = {1,4} -- Guild Emblems (Allies)

local ui = setupUI([[
Panel
  height: 19

  BotSwitch
    id: title
    anchors.top: parent.top
    anchors.left: parent.left
    text-align: center
    width: 130
    !text: tr('Fight Back (Revide)')
    font: verdana-11px-rounded

  Button
    id: edit
    anchors.top: prev.top
    anchors.left: prev.right
    anchors.right: parent.right
    margin-left: 3
    height: 17
    text: Setup
    font: verdana-11px-rounded
]])

local edit = setupUI([[
RevideBox < CheckBox
  font: verdana-11px-rounded
  margin-top: 5
  margin-left: 5
  anchors.top: prev.bottom
  anchors.left: parent.left
  anchors.right: parent.right
  color: lightGray

Panel
  height: 123

  RevideBox
    id: pauseTarget
    anchors.top: parent.top
    text: Pause TargetBot 
    !tooltip: tr('Pause TargetBot While fighting back.')

  RevideBox
    id: pauseCave
    text: Pause CaveBot 
    !tooltip: tr('Pause CaveBot While fighting back.')

  RevideBox
    id: followTarget
    text: Follow Target 
    !tooltip: tr('Set Chase Mode to Follow While fighting back.')

  RevideBox
    id: ignoreParty
    text: Ignore Party Members

  RevideBox
    id: ignoreGuild
    text: Ignore Guild Members

  RevideBox
    id: attackAll
    text: Attack All Skulled
    !tooltip: tr(""Attack every skulled player, even if he didn't attacked you."")

  BotTextEdit
    id: esc
    width: 83
    anchors.bottom: parent.bottom
    anchors.right: parent.right
    text: Escape
    color: red
    font: verdana-11px-rounded

  Label
    text: Cancel Attack:
    font: verdana-11px-rounded
    anchors.left: parent.left
    margin-left: 5
    anchors.verticalCenter: esc.verticalCenter
]])
edit:hide()

local showEdit = false
ui.edit.onClick = function(widget)
  showEdit = not showEdit
  if showEdit then
    edit:show()
  else
    edit:hide()
  end
end
-- End Basic UI

-- Storage
local st = ""RevideFight""
storage[st] = storage[st] or {
  enabled = false,
  pauseTarget = true,
  pauseCave = true,
  followTarget = true,
  ignoreParty = false,
  ignoreGuild = false,
  attackAll = false,
  esc = ""Escape"",
}
local config = storage[st]

-- UI Functions
-- Main Button
ui.title:setOn(config.enabled)
ui.title.onClick = function(widget)
  config.enabled = not config.enabled
  widget:setOn(config.enabled)
end

-- Checkboxes
do
  edit.pauseTarget:setChecked(config.pauseTarget)
  edit.pauseTarget.onClick = function(widget)
    config.pauseTarget = not config.pauseTarget
    widget:setChecked(config.pauseTarget)
    widget:setImageColor(config.pauseTarget and ""green"" or ""red"")
  end
  edit.pauseTarget:setImageColor(config.pauseTarget and ""green"" or ""red"")
  
  edit.pauseCave:setChecked(config.pauseCave)
  edit.pauseCave.onClick = function(widget)
    config.pauseCave = not config.pauseCave
    widget:setChecked(config.pauseCave)
    widget:setImageColor(config.pauseCave and ""green"" or ""red"")
  end
  edit.pauseCave:setImageColor(config.pauseCave and ""green"" or ""red"")

  edit.followTarget:setChecked(config.followTarget)
  edit.followTarget.onClick = function(widget)
    config.followTarget = not config.followTarget
    widget:setChecked(config.followTarget)
    widget:setImageColor(config.followTarget and ""green"" or ""red"")
  end
  edit.followTarget:setImageColor(config.followTarget and ""green"" or ""red"")

  edit.ignoreParty:setChecked(config.ignoreParty)
  edit.ignoreParty.onClick = function(widget)
    config.ignoreParty = not config.ignoreParty
    widget:setChecked(config.ignoreParty)
    widget:setImageColor(config.ignoreParty and ""green"" or ""red"")
  end
  edit.ignoreParty:setImageColor(config.ignoreParty and ""green"" or ""red"")

  edit.ignoreGuild:setChecked(config.ignoreGuild)
  edit.ignoreGuild.onClick = function(widget)
    config.ignoreGuild = not config.ignoreGuild
    widget:setChecked(config.ignoreGuild)
    widget:setImageColor(config.ignoreGuild and ""green"" or ""red"")
  end
  edit.ignoreGuild:setImageColor(config.ignoreGuild and ""green"" or ""red"")

  edit.attackAll:setChecked(config.attackAll)
  edit.attackAll.onClick = function(widget)
    config.attackAll = not config.attackAll
    widget:setChecked(config.attackAll)
    widget:setImageColor(config.attackAll and ""green"" or ""red"")
  end
  edit.attackAll:setImageColor(config.attackAll and ""green"" or ""red"")
end

-- TextEdit
edit.esc:setText(config.esc)
edit.esc.onTextChange = function(widget, text)
  config.esc = text
end
edit.esc:setTooltip(""Hotkey to cancel attack."")

-- End of setup.

local target = nil
local c = config

-- Main Loop
macro(250, function()
  if not c.enabled then return end
  if not target then
    if c.pausedTarget then
      c.pausedTarget = false
      TargetBot.setOn()
    end
    if c.pausedCave then
      c.pausedCave = false
      CaveBot.setOn()
    end
    -- Search for attackers
    local creatures = getSpectators(false)
    for s, spec in ipairs(creatures) do
      if spec ~= player and spec:isPlayer() then
        if (c.attackAll and spec:getSkull() > 2) or spec:isTimedSquareVisible() then
          if c.ignoreParty or spec:getShield() < 3 then
            if c.ignoreGuild or not table.find(ignoreEmblems, spec:getEmblem()) then
              target = spec:getName()
              break
            end
          end
        end
      end
    end
    return
  end

  local creature = getPlayerByName(target)
  if not creature then target = nil return end
  if c.pauseTargetBot then
    c.pausedTarget = true
    TargetBot.setOff()
  end
  if c.pauseTarget then
    c.pausedTarget = true
    TargetBot.setOff()
  end
  if c.pauseCave then
    c.pausedCave = true
    CaveBot.setOff()
  end

  if c.followTarget then
    g_game.setChaseMode(2)
  end

  if g_game.isAttacking() then
    if g_game.getAttackingCreature():getName() == target then
      return
    end
  end
  g_game.attack(creature)
end)

onKeyDown(function(keys)
  if not c.enabled then return end
  if keys == config.esc then
    target = nil
  end
end)

UI.Separator()"
f7LPLiax,scgStdArg,j0h,C,Monday 5th of February 2024 08:33:58 PM CDT,"#include <stdarg.h>
#include <stdlib.h>

#include <stdio.h>
#include <string.h>
#include <math.h>

#include <stdbool.h>
//in my confussion, I put all of svg.h into this code, to try and figure out stdarg.h
//I think I got it, so this code is scratch. but I still want a copy. 

// --------------------------------------------------------
// STRUCT svg
// --------------------------------------------------------
typedef struct svg{
    char* svg;
    int height;
    int width;
    bool finalized;
} svg;

// --------------------------------------------------------
// FUNCTION PROTOTYPES
// --------------------------------------------------------
svg* svg_create(int width, int height);
void svg_finalize(svg* psvg);
void svg_print(svg* psvg);
void svg_save(svg* psvg, char* filepath);
void svg_free(svg* psvg);

void svg_circle(svg* psvg, char* stroke, int strokewidth, char* fill, int r, int cx, int cy);
void svg_line(svg* psvg, char* stroke, int strokewidth, int x1, int y1, int x2, int y2);
void svg_rectangle(svg* psvg, int width, int height, int x, int y, char* fill, char* stroke, int strokewidth, int radiusx, int radiusy);
void svg_fill(svg* psvg, char* fill);
void svg_text(svg* psvg, int x, int y, char* fontfamily, int fontsize, char* fill, char* stroke, char* text);
void svg_ellipse(svg* psvg, int cx, int cy, int rx, int ry, char* fill, char* stroke, int strokewidth);
void svg_polygon(svg* psvg, double cx, double cy, float radius, int nsides, char* fill, char* stroke, int strokewidth );
//void svg_animateTransform

void drawpolygons(void);

// Operator function that accepts variable arguments
void operator_function(int num_args, ...) {
    va_list args;
    va_start(args, num_args);

    for (int i = 0; i < num_args; i++) {
        // Get the function pointer from the variable arguments
        void (*func)(svg*, ...);
        func = va_arg(args, void (*)(svg*, ...));

        // Call the function with the remaining arguments
        if (func == svg_ellipse) {
            svg* psvg = va_arg(args, svg*);
            int cx = va_arg(args, int);
            int cy = va_arg(args, int);
            int rx = va_arg(args, int);
            int ry = va_arg(args, int);
            char* fill = va_arg(args, char*);
            char* stroke = va_arg(args, char*);
            int strokewidth = va_arg(args, int);
            svg_ellipse(psvg, cx, cy, rx, ry, fill, stroke, strokewidth);
        } else if (func == svg_polygon) {
            svg* psvg = va_arg(args, svg*);
            double cx = va_arg(args, double);
            double cy = va_arg(args, double);
            float radius = va_arg(args, double); // Note: float is promoted to double in va_arg
            int nsides = va_arg(args, int);
            char* fill = va_arg(args, char*);
            char* stroke = va_arg(args, char*);
            int strokewidth = va_arg(args, int);
            svg_polygon(psvg, cx, cy, radius, nsides, fill, stroke, strokewidth);
        }
        //more conditions go here
    }

    va_end(args);
}

int main() {
    // Example usage of the operator function
drawpolygons();
    return 0;
}

void drawpolygons(void){
	    svg* psvg = svg_create(512, 512);
//svg_polygon(svg* psvg, double cx, double cy, float radius, int nsides, char* fill, char* stroke, int strokewidth );
//0,0 is top left in svg
    if(psvg == NULL)    {
        puts(""psvg is NULL"");
    }    else    {
   // operator_function(2, svg_polygon, &psvg, 100.0, 100.0, 50.0, 5, ""blue"", ""green"", 1);
    //operator_function(8, svg_polygon, psvg, 100.0, 100.0, 50.0, 5, ""blue"", ""green"", 7);
    operator_function(8, svg_ellipse, psvg, 50, 50, 40, 20, ""red"", ""black"", 2, 8, svg_polygon, psvg, 100.0, 100.0, 50.0, 5, ""blue"", ""green"", 7);
   // svg_polygon(psvg, 100.0, 100.0, 50.0, 5, ""red"", ""green"", 1);
                      
    	 svg_finalize(psvg);
        svg_save(psvg, ""StdArgs.svg"");
        svg_free(psvg);
	}
}
// --------------------------------------------------------
// STATIC FUNCTION appendstringtosvg
// --------------------------------------------------------
static void appendstringtosvg(svg* psvg, char* text){
    int l = strlen(psvg->svg) + strlen(text) + 1;

    char* p = realloc(psvg->svg, l);

    if(p){
        psvg->svg = p;
    }

    strcat(psvg->svg, text);
}

// --------------------------------------------------------
// STATIC FUNCTION appendnumbertosvg
// --------------------------------------------------------
static void appendnumbertosvg(svg* psvg, int n){
    char sn[16];
    sprintf(sn, ""%d"", n);
    appendstringtosvg(psvg, sn);
}

// --------------------------------------------------------
// FUNCTION svg_create
// --------------------------------------------------------
svg* svg_create(int width, int height){
    svg* psvg = malloc(sizeof(svg));

    if(psvg != NULL)    {
        *psvg = (svg){.svg = NULL, .width = width, .height = height, .finalized = false};

        psvg->svg = malloc(1);

        sprintf(psvg->svg, ""%s"", ""\0"");

        appendstringtosvg(psvg, ""<svg width='"");
        appendnumbertosvg(psvg, width);
        appendstringtosvg(psvg, ""px' height='"");
        appendnumbertosvg(psvg, height);
        appendstringtosvg(psvg, ""px' xmlns='http://www.w3.org/2000/svg' version='1.1' xmlns:xlink='http://www.w3.org/1999/xlink'>\n"");

        return psvg;
    }    else    {
        return NULL;
    }
}

// --------------------------------------------------------
// FUNCTION svg_finalize
// --------------------------------------------------------
void svg_finalize(svg* psvg){
    appendstringtosvg(psvg, ""</svg>"");
    psvg->finalized = true;
}

// --------------------------------------------------------
// FUNCTION svg_print
// --------------------------------------------------------
void svg_print(svg* psvg){
    printf(""%s\n"", psvg->svg);
}

// --------------------------------------------------------
// FUNCTION svg_save
// --------------------------------------------------------
void svg_save(svg* psvg, char* filepath){
    if(!psvg->finalized){
        svg_finalize(psvg);
    }

    FILE* fp;
	fp = fopen(filepath, ""w"");

	if(fp != NULL){
		fwrite(psvg->svg, 1, strlen(psvg->svg), fp);

		fclose(fp);
	}
}

//----------------------------------------------------------------
// FUNCTION svg_free
//----------------------------------------------------------------
void svg_free(svg* psvg){
    free(psvg->svg);
    free(psvg);
}

//----------------------------------------------------------------
// FUNCTION svg_circle
//----------------------------------------------------------------
void svg_circle(svg* psvg, char* stroke, int strokewidth, char* fill, int r, int cx, int cy){
    appendstringtosvg(psvg, ""    <circle stroke='"");
    appendstringtosvg(psvg, stroke);
    appendstringtosvg(psvg, ""' stroke-width='"");
    appendnumbertosvg(psvg, strokewidth);
    appendstringtosvg(psvg, ""px' fill='"");
    appendstringtosvg(psvg, fill);
    appendstringtosvg(psvg, ""' r='"");
    appendnumbertosvg(psvg, r);
    appendstringtosvg(psvg, ""' cy='"");
    appendnumbertosvg(psvg, cy);
    appendstringtosvg(psvg, ""' cx='"");
    appendnumbertosvg(psvg, cx);
    appendstringtosvg(psvg, ""' />\n"");
}

//----------------------------------------------------------------
// FUNCTION svg_line
//----------------------------------------------------------------
void svg_line(svg* psvg, char* stroke, int strokewidth, int x1, int y1, int x2, int y2){
    appendstringtosvg(psvg, ""    <line stroke='"");
    appendstringtosvg(psvg, stroke);
    appendstringtosvg(psvg, ""' stroke-width='"");
    appendnumbertosvg(psvg, strokewidth);
    appendstringtosvg(psvg, ""px' y2='"");
    appendnumbertosvg(psvg, y2);
    appendstringtosvg(psvg, ""' x2='"");
    appendnumbertosvg(psvg, x2);
    appendstringtosvg(psvg, ""' y1='"");
    appendnumbertosvg(psvg, y1);
    appendstringtosvg(psvg, ""' x1='"");
    appendnumbertosvg(psvg, x1);
    appendstringtosvg(psvg, ""' />\n"");
}

//----------------------------------------------------------------
// FUNCTION svg_rectangle
//----------------------------------------------------------------
void svg_rectangle(svg* psvg, int width, int height, int x, int y, char* fill, char* stroke, int strokewidth, int radiusx, int radiusy){
    appendstringtosvg(psvg, ""    <rect fill='"");
    appendstringtosvg(psvg, fill);
    appendstringtosvg(psvg, ""' stroke='"");
    appendstringtosvg(psvg, stroke);
    appendstringtosvg(psvg, ""' stroke-width='"");
    appendnumbertosvg(psvg, strokewidth);
    appendstringtosvg(psvg, ""px' width='"");
    appendnumbertosvg(psvg, width);
    appendstringtosvg(psvg, ""' height='"");
    appendnumbertosvg(psvg, height);
    appendstringtosvg(psvg, ""' y='"");
    appendnumbertosvg(psvg, y);
    appendstringtosvg(psvg, ""' x='"");
    appendnumbertosvg(psvg, x);
    appendstringtosvg(psvg, ""' ry='"");
    appendnumbertosvg(psvg, radiusy);
    appendstringtosvg(psvg, ""' rx='"");
    appendnumbertosvg(psvg, radiusx);
    appendstringtosvg(psvg, ""' />\n"");
}

// --------------------------------------------------------
// FUNCTION svg_fill
// --------------------------------------------------------
void svg_fill(svg* psvg, char* Fill){
    svg_rectangle(psvg, psvg->width, psvg->height, 0, 0, Fill, Fill, 0, 0, 0);
}

//----------------------------------------------------------------
// FUNCTION svg_text
//----------------------------------------------------------------
void svg_text(svg* psvg, int x, int y, char* fontfamily, int fontsize, char* fill, char* stroke, char* text){
    appendstringtosvg(psvg, ""    <text x='"");
    appendnumbertosvg(psvg, x);
    appendstringtosvg(psvg, ""' y = '"");
    appendnumbertosvg(psvg, y);
    appendstringtosvg(psvg, ""' font-family='"");
    appendstringtosvg(psvg, fontfamily);
    appendstringtosvg(psvg, ""' stroke='"");
    appendstringtosvg(psvg, stroke);
    appendstringtosvg(psvg, ""' fill='"");
    appendstringtosvg(psvg, fill);
    appendstringtosvg(psvg, ""' font-size='"");
    appendnumbertosvg(psvg, fontsize);
    appendstringtosvg(psvg, ""px'>"");
    appendstringtosvg(psvg, text);
    appendstringtosvg(psvg, ""</text>\n"");
}

//----------------------------------------------------------------
// FUNCTION svg_ellipse
//----------------------------------------------------------------
void svg_ellipse(svg* psvg, int cx, int cy, int rx, int ry, char* fill, char* stroke, int strokewidth){
    appendstringtosvg(psvg, ""    <ellipse cx='"");
    appendnumbertosvg(psvg, cx);
    appendstringtosvg(psvg, ""' cy='"");
    appendnumbertosvg(psvg, cy);
    appendstringtosvg(psvg, ""' rx='"");
    appendnumbertosvg(psvg, rx);
    appendstringtosvg(psvg, ""' ry='"");
    appendnumbertosvg(psvg, ry);
    appendstringtosvg(psvg, ""' fill='"");
    appendstringtosvg(psvg, fill);
    appendstringtosvg(psvg, ""' stroke='"");
    appendstringtosvg(psvg, stroke);
    appendstringtosvg(psvg, ""' stroke-width='"");
    appendnumbertosvg(psvg, strokewidth);
    appendstringtosvg(psvg, ""' />\n"");
}


//----------------------------------------------------------------
// FUNCTION svg_polygon
//----------------------------------------------------------------
void svg_polygon(svg* psvg, double cx, double cy, float radius, int nsides, char* fill, char* stroke, int strokewidth ){
//cx,cy ==center point
//put xi ,yi in an array	
printf(""svg_polygon FUNCTION CALLED\n"");
float xi, yi=0.0;
	if (nsides<3){
	printf(""Error: Too Few Sides\n"");
    exit(0);
}

//start building the polygon:
    appendstringtosvg(psvg, ""    <polygon style=\""fill:"");
    appendstringtosvg(psvg, fill);
    appendstringtosvg(psvg, ""; stroke:"");
    appendstringtosvg(psvg, stroke);
    appendstringtosvg(psvg, ""; stroke-width:"");
    appendnumbertosvg(psvg, strokewidth);
    appendstringtosvg(psvg, ""\"" points='"");

	//calc x,y point cordinates. trig funtions take radians
	for (int i =1; i < nsides+1;  i++){
	xi= cx + radius * cos((2*M_PI/nsides) * i);
	    appendnumbertosvg(psvg, xi);
	    appendstringtosvg(psvg, "", "");
	yi= cy + radius * sin((2*M_PI/nsides) *  i);
	    appendnumbertosvg(psvg, yi);	
	    appendstringtosvg(psvg, "" "");	    
		printf(""%f , %f\n "", xi, yi);
		}
		printf(""\n"");
		//close polygon
     appendstringtosvg(psvg, ""' />\n"");
	}"
hwC0zV8B,Induction Matrix Ascii Monitor - Voxxie,MsVoxxie,Lua,Monday 5th of February 2024 08:26:03 PM CDT,"-- Power Monitor for Mekanism Induction Matrix
--
-- Writen by MsVoxxie
-- Inspired by Sven Marc 'cybrox' Gehring
--

-- Center Align text
-- @param text Text to write
-- @param color Text color
-- @param yValue Where to place the Y Value
local function centerText(text, color, yValue)
    local x,y = term.getSize()
    local x2,y2 = term.getCursorPos()
    term.setTextColor(color)
    term.setCursorPos(math.ceil((x / 2) - (text:len() / 2)), yValue)
    write(text)
end
    
-- Printing right aligned text on a line
-- This is used for printing our dynamic
-- values to the screen properly

--
-- @param line The line to print on
-- @param text The text to print there
-- @param color The color to print in
-- @return void
function putValue(line, text, color)
    local align = 32 - string.len(text)
    term.setCursorPos(align, line)
    term.setTextColor(color)
    print(text)
end

-- Get a number in a human readable format
-- This is used to display numbers on screen
--
-- @param number The number to format
-- @return The formatted number
function putNumber(number)
    local round = 0
    local texts = """"

    if number >= 1000000000000000000 then
        round = (number / 1000000000000000000)
        texts = string.sub(round, 0, 5) .. "" EFE""
    else
        if number >= 1000000000000000 then
            round = (number / 1000000000000000)
            texts = string.sub(round, 0, 5) .. "" PFE""
        else
            if number >= 1000000000000 then
                round = (number / 1000000000000)
                texts = string.sub(round, 0, 5) .. "" TFE""
            else
                if number >= 1000000000 then
                    round = (number / 1000000000)
                    texts = string.sub(round, 0, 5) .. "" GFE""
                else
                    if number >= 1000000 then
                        round = (number / 1000000)
                        texts = string.sub(round, 0, 5) .. "" MFE""
                    else
                        if number >= 1000 then
                            round = (number / 1000)
                            texts = string.sub(round, 0, 5) .. "" kFE""
                        else
                            texts = string.sub(number, 0, 5) .. ""  FE""
                        end
                    end
                end
            end
        end
    end
    return texts
end

-- Generate static fill volume box
-- @param leftAlign L/R starting positon
-- @param height Height of the box
-- @param width Width of the box
-- @param lineStr String to repeat for top and bottom lines.
function drawVolBox(leftAlign, height, width, lineStr)
    term.setTextColor(colors.white)
    term.setCursorPos(leftAlign, leftAlign)
    print('+' .. string.rep(lineStr, width) .. '+')
    term.setCursorPos(leftAlign, height)
    print('+' .. string.rep(lineStr, width) .. '+')
    for i = leftAlign + 1, height - 1 do
        term.setCursorPos(leftAlign, i)
        print('|')
        term.setCursorPos(width + 4, i)
        print('|')
    end
end

-- Generate Static Interface Text
-- @param leftAlign L/R starting position
-- @param startHeight U/D starting position
function drawIfaceText(leftAlign, startHeight)
    term.setCursorPos(leftAlign, startHeight)
    print('Max FE:')
    term.setCursorPos(leftAlign, startHeight + 1)
    print('Max Thru:')

    term.setCursorPos(leftAlign, startHeight + 3)
    print('Cur In:')
    term.setCursorPos(leftAlign, startHeight + 4)
    print('Cur Out:')
    term.setCursorPos(leftAlign, startHeight + 5)
    print('Cur Bal:')

    term.setCursorPos(leftAlign, startHeight + 7)
    print('Stored:')
    term.setCursorPos(leftAlign, startHeight + 8)
    print('Filled:')
end

-- matrix Check Loop
-- @param leftAlign L/R starting positon
-- @param startHeight U/D starting position
-- @param height Height of the box
-- @param width Width of the box
function updateBatteryData(leftAlign, startHeight, height, width)
    -- Get our fixed matrix values
    batteryMaxCharge = mekanismEnergyHelper.joulesToFE(matrix.getMaxEnergy())
    batteryMaxInOuts = mekanismEnergyHelper.joulesToFE(matrix.getTransferCap())
    putValue(startHeight, putNumber(batteryMaxCharge), colors.lightBlue)
    putValue(startHeight + 1, putNumber(batteryMaxInOuts), colors.lightBlue)

    -- Get our input/output/balance matrix values
    batteryCurrentIn = mekanismEnergyHelper.joulesToFE(matrix.getLastInput())
    batteryCurrentOut = mekanismEnergyHelper.joulesToFE(matrix.getLastOutput())
    putValue(startHeight + 3, putNumber(batteryCurrentIn), colors.lightBlue)
    putValue(startHeight + 4, putNumber(batteryCurrentOut), colors.lightBlue)

    batteryCurrentBalance = batteryCurrentIn - batteryCurrentOut
    batteryCurrentColor = (batteryCurrentBalance >= 0) and colors.green or colors.red
    batteryCurrentSign = (batteryCurrentBalance >= 0) and ""+"" or """"
    putValue(startHeight + 5, batteryCurrentSign .. putNumber(batteryCurrentBalance), batteryCurrentColor)

    -- Get our statistical values
    batteryCurrentCharge = mekanismEnergyHelper.joulesToFE(matrix.getEnergy())
    putValue(startHeight + 7, putNumber(batteryCurrentCharge), colors.lightBlue)

    batteryCurrentColor = colors.red
    batteryCurrentPercentage = ((batteryCurrentCharge / batteryMaxCharge) * 100)
    if batteryCurrentPercentage > 30 then batteryCurrentColor = colors.orange end
    if batteryCurrentPercentage > 60 then batteryCurrentColor = colors.green end
    putValue(startHeight + 8, string.sub(putNumber(batteryCurrentPercentage), 0, 4) .. ""%"", batteryCurrentColor)

    -- Draw the current charge graph
    batteryCurrentColor = colors.red
    if batteryCurrentPercentage > 30 then term.setTextColor(colors.orange) end
    if batteryCurrentPercentage > 60 then term.setTextColor(colors.green) end
    if batteryCurrentPercentage >= 100 then
        term.setTextColor(colors.lightBlue)
    end

    -- Draw Spacer
    for i = leftAlign + 1, height - 1 do
        term.setCursorPos(leftAlign + 1, i)
        print(string.rep(' ', width + 2))
    end

    iterator = 0
    for i = leftAlign + 1, height - 1 do
        local compare = (12.5 * iterator)
        if (batteryCurrentPercentage >= compare) then
            term.setCursorPos(leftAlign + 1, (height + 3 - i))
            local filler = ''
            for i = 1, width + 2 do
                local inhere = (compare + (i * 2))
                if batteryCurrentPercentage >= inhere then
                    filler = filler .. '#'
                else
                    if batteryCurrentPercentage >= (inhere - 1) then
                        filler = filler .. '='
                    else
                        filler = filler .. '_'
                    end
                end
            end
            print(filler)
        end
        iterator = iterator + 1
    end
end

-- Initiate interfaces
-- Find our peripherals
monitor = peripheral.find('monitor')
matrix = peripheral.find('inductionPort')

-- Check and bind monitor
if monitor == nil then
    error('ERR: No monitor found to display.')
else
    monitor.clear()
    monitor.setTextScale(1.5)
    term.redirect(monitor)
    term.setCursorPos(1, 1)
    term.setBackgroundColor(colors.black)
end

if matrix == nil then error('ERR: No Matrix connected to computer.') end

-- Draw Title
centerText('Matrix Power Levels', colors.blue, 1.5)

-- Draw Volume Box
drawVolBox(3, 12, 6, '-')

-- Draw Static interface text
drawIfaceText(13, 3)

-- Entering infinite loop of checking the matrix
-- Checking every 2 seconds
while true do
    updateBatteryData(3, 3, 12, 4)
    os.sleep(2)
end
"
gNXFfhYZ,Untitled,dani_fadli,JSON,Monday 5th of February 2024 08:04:14 PM CDT,"{
    ""status_code"": 200,
    ""message"": ""Data berhasil didapatkan"",
    ""data"": {
        ""products"": {
            ""current_page"": 1,
            ""data"": [
                {
                    ""id"": ""2b52434d-774f-47d2-8f5c-23798b07960a"",
                    ""name"": ""Baby Carrier Original"",
                    ""slug"": ""baby-carrier-original-yjB2UDNiak"",
                    ""price"": ""725000"",
                    ""discounted_price"": ""725000"",
                    ""discount_values"": [],
                    ""total_discount_value"": 0,
                    ""stock"": 38,
                    ""type"": ""combination"",
                    ""store_type"": ""brand_partner"",
                    ""active"": true,
                    ""product_type"": ""master_product"",
                    ""rating"": 0,
                    ""total_review"": 0,
                    ""total_sold"": 1,
                    ""is_wishlisted"": false,
                    ""is_reviewed"": false,
                    ""new_product"": false,
                    ""is_preorder"": false,
                    ""preorder_period"": 0,
                    ""event_ongoing"": {
                        ""event_sale"": [],
                        ""flash_sale"": [],
                        ""clearance_sale"": [],
                        ""pre_sale"": []
                    },
                    ""brand"": {
                        ""id"": ""e51bafc5-1e80-4e6d-8bfb-00fe3fb9f82a"",
                        ""name"": ""Baby Ktan"",
                        ""slug"": ""baby-ktan"",
                        ""active"": true
                    },
                    ""store"": {
                        ""id"": ""b20ff247-5b70-4c84-a2a4-a19bf3000a78"",
                        ""name"": ""Baby Ktan"",
                        ""slug"": ""baby-ktan-QEWtAz0RRJ"",
                        ""url"": null,
                        ""official"": true,
                        ""type"": ""brand_partner"",
                        ""rating"": 0,
                        ""main_branch_city"": ""Jakarta Timur"",
                        ""files"": [
                            {
                                ""id"": ""668ebbad-7586-45f1-a735-cfe28e22349d"",
                                ""name"": ""logo"",
                                ""filename"": ""xzni0hs7qq_store_1654667078.png"",
                                ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/xzni0hs7qq_store_1654667078.png"",
                                ""type"": ""image"",
                                ""variant"": ""original"",
                                ""sequence"": 1,
                                ""fileable_id"": ""b20ff247-5b70-4c84-a2a4-a19bf3000a78""
                            }
                        ]
                    },
                    ""files"": [
                        {
                            ""id"": ""41b17c45-7c28-499f-8386-4a99c6a78fdc"",
                            ""name"": ""image"",
                            ""filename"": ""g6rivvhvos_product_1667525854_thumbnail.jpg"",
                            ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/g6rivvhvos_product_1667525854_thumbnail.jpg"",
                            ""type"": ""image"",
                            ""variant"": ""thumbnail"",
                            ""sequence"": 1,
                            ""fileable_id"": ""2b52434d-774f-47d2-8f5c-23798b07960a""
                        },
                        {
                            ""id"": ""0204b511-068d-419f-b10c-b19ae67c7ce1"",
                            ""name"": ""image"",
                            ""filename"": ""g6rivvhvos_product_1667525854.jpg"",
                            ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/g6rivvhvos_product_1667525854.jpg"",
                            ""type"": ""image"",
                            ""variant"": ""original"",
                            ""sequence"": 1,
                            ""fileable_id"": ""2b52434d-774f-47d2-8f5c-23798b07960a""
                        }
                    ],
                    ""variant_categories"": [
                        {
                            ""id"": ""31f14313-95ab-4495-9912-5cdf95d2befa"",
                            ""name"": ""Warna"",
                            ""display_name"": ""Warna"",
                            ""slug"": ""warna-aokdsapso"",
                            ""value_type"": ""general"",
                            ""created_by"": null,
                            ""variants"": [
                                {
                                    ""id"": ""6b1c8fd6-6e8a-447a-9a28-c9533c935fcd"",
                                    ""name"": ""Eggplant"",
                                    ""value"": ""Eggplant"",
                                    ""sequence"": 1,
                                    ""created_by"": null
                                },
                                {
                                    ""id"": ""897d349b-31a9-4bd8-98cc-5d372548770d"",
                                    ""name"": ""Denim"",
                                    ""value"": ""Denim"",
                                    ""sequence"": 1,
                                    ""created_by"": null
                                },
                                {
                                    ""id"": ""52d3e5ce-1a94-4cb6-aac7-68cd17dd7c98"",
                                    ""name"": ""Black"",
                                    ""value"": ""Black"",
                                    ""sequence"": 1,
                                    ""created_by"": null
                                },
                                {
                                    ""id"": ""725694c3-4d93-4faf-8813-457a478e2247"",
                                    ""name"": ""Heather Gray"",
                                    ""value"": ""Heather Gray"",
                                    ""sequence"": 1,
                                    ""created_by"": null
                                }
                            ]
                        },
                        {
                            ""id"": ""ad9b0f94-0ce5-4aeb-997f-d05802b24234"",
                            ""name"": ""Ukuran"",
                            ""display_name"": ""Ukuran"",
                            ""slug"": ""ukuran-oaskpds"",
                            ""value_type"": ""general"",
                            ""created_by"": {
                                ""id"": ""8f0593d3-c150-4a26-bdaf-51cb11a79743"",
                                ""name"": ""Paninti Hub Indonesia"",
                                ""type"": ""store_partner"",
                                ""active"": true
                            },
                            ""variants"": [
                                {
                                    ""id"": ""64b17efa-6f5b-432c-b8fc-7a1434ed7577"",
                                    ""name"": ""XS"",
                                    ""value"": ""XS"",
                                    ""sequence"": 2,
                                    ""created_by"": null
                                },
                                {
                                    ""id"": ""e1fe5060-fff7-4c85-9e7f-cacdc3b838c4"",
                                    ""name"": ""S"",
                                    ""value"": ""S"",
                                    ""sequence"": 2,
                                    ""created_by"": null
                                },
                                {
                                    ""id"": ""d8e0ba44-6380-4d74-a4a8-bd9019a48cea"",
                                    ""name"": ""M"",
                                    ""value"": ""M"",
                                    ""sequence"": 2,
                                    ""created_by"": null
                                },
                                {
                                    ""id"": ""b9463e38-7695-44b0-a01b-204e02ea8b8c"",
                                    ""name"": ""L"",
                                    ""value"": ""L"",
                                    ""sequence"": 2,
                                    ""created_by"": null
                                },
                                {
                                    ""id"": ""ac6bcbda-472d-4beb-8436-5d6886c2f8e2"",
                                    ""name"": ""XL"",
                                    ""value"": ""XL"",
                                    ""sequence"": 2,
                                    ""created_by"": null
                                }
                            ]
                        }
                    ],
                    ""details"": [
                        {
                            ""id"": ""6526c7c0-b9a0-4128-abf9-66f188977e03"",
                            ""name"": ""Eggplant,XS"",
                            ""price"": ""725000"",
                            ""discounted_price"": ""725000"",
                            ""stock"": 2,
                            ""main"": true,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""b7c99ce0-24f6-44dd-a336-35aaec58c74a"",
                                    ""name"": ""image"",
                                    ""filename"": ""0v5rsvrfrd_product_detail_1667525860_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/0v5rsvrfrd_product_detail_1667525860_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""6526c7c0-b9a0-4128-abf9-66f188977e03""
                                },
                                {
                                    ""id"": ""4836669d-4a25-4278-973e-06b2c886a668"",
                                    ""name"": ""image"",
                                    ""filename"": ""0v5rsvrfrd_product_detail_1667525860.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/0v5rsvrfrd_product_detail_1667525860.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""6526c7c0-b9a0-4128-abf9-66f188977e03""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""9b39712e-f3b6-4a62-981f-c2416903db23"",
                            ""name"": ""Eggplant,S"",
                            ""price"": ""725000"",
                            ""discounted_price"": ""725000"",
                            ""stock"": 2,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""40007073-293e-4489-aae4-fe91e61ac623"",
                                    ""name"": ""image"",
                                    ""filename"": ""vzu5jfiqnb_product_detail_1667525861.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/vzu5jfiqnb_product_detail_1667525861.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""9b39712e-f3b6-4a62-981f-c2416903db23""
                                },
                                {
                                    ""id"": ""ed8d6160-f7f8-4019-a2dc-3569e38fdf60"",
                                    ""name"": ""image"",
                                    ""filename"": ""vzu5jfiqnb_product_detail_1667525861_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/vzu5jfiqnb_product_detail_1667525861_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""9b39712e-f3b6-4a62-981f-c2416903db23""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""36b5413e-61a2-4751-831c-30fb6aa914a1"",
                            ""name"": ""Eggplant,M"",
                            ""price"": ""725000"",
                            ""discounted_price"": ""725000"",
                            ""stock"": 2,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""7e89c41e-8c4a-4d35-9fd8-c2b4828b56b5"",
                                    ""name"": ""image"",
                                    ""filename"": ""klwlejghxv_product_detail_1667525862.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/klwlejghxv_product_detail_1667525862.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""36b5413e-61a2-4751-831c-30fb6aa914a1""
                                },
                                {
                                    ""id"": ""093a8450-4f5c-46db-931d-06dca912eef4"",
                                    ""name"": ""image"",
                                    ""filename"": ""klwlejghxv_product_detail_1667525862_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/klwlejghxv_product_detail_1667525862_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""36b5413e-61a2-4751-831c-30fb6aa914a1""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""23871754-bdf6-44c3-9651-9194d595356a"",
                            ""name"": ""Eggplant,L"",
                            ""price"": ""725000"",
                            ""discounted_price"": ""725000"",
                            ""stock"": 2,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""66b53f28-f4c7-48a7-9e3f-796067deb7a3"",
                                    ""name"": ""image"",
                                    ""filename"": ""gdlisq1jya_product_detail_1667525862.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/gdlisq1jya_product_detail_1667525862.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""23871754-bdf6-44c3-9651-9194d595356a""
                                },
                                {
                                    ""id"": ""f88b4f92-7932-45ab-aa24-55c112066feb"",
                                    ""name"": ""image"",
                                    ""filename"": ""gdlisq1jya_product_detail_1667525862_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/gdlisq1jya_product_detail_1667525862_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""23871754-bdf6-44c3-9651-9194d595356a""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""ef5a4e63-ecf0-4e5a-8b8b-9785bb2f1039"",
                            ""name"": ""Eggplant,XL"",
                            ""price"": ""725000"",
                            ""discounted_price"": ""725000"",
                            ""stock"": 2,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""ae712837-5fe7-45b9-a281-0395cd41f8b3"",
                                    ""name"": ""image"",
                                    ""filename"": ""o9q4af2apg_product_detail_1667525863_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/o9q4af2apg_product_detail_1667525863_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""ef5a4e63-ecf0-4e5a-8b8b-9785bb2f1039""
                                },
                                {
                                    ""id"": ""a90cf2a6-7d1f-4f77-9044-082f841f19f5"",
                                    ""name"": ""image"",
                                    ""filename"": ""o9q4af2apg_product_detail_1667525863.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/o9q4af2apg_product_detail_1667525863.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""ef5a4e63-ecf0-4e5a-8b8b-9785bb2f1039""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""d20a9c72-8477-489a-9d8a-044521524fb1"",
                            ""name"": ""Denim,XS"",
                            ""price"": ""725000"",
                            ""discounted_price"": ""725000"",
                            ""stock"": 2,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""9856e3ce-59e4-4cc0-aca2-8f0903418360"",
                                    ""name"": ""image"",
                                    ""filename"": ""ognyqvmrt9_product_detail_1667525863_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/ognyqvmrt9_product_detail_1667525863_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""d20a9c72-8477-489a-9d8a-044521524fb1""
                                },
                                {
                                    ""id"": ""33464ad8-3fa0-419b-b1da-2095692c58a2"",
                                    ""name"": ""image"",
                                    ""filename"": ""ognyqvmrt9_product_detail_1667525863.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/ognyqvmrt9_product_detail_1667525863.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""d20a9c72-8477-489a-9d8a-044521524fb1""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""7bc00b0a-3697-4bcb-8d85-f5804fdd933e"",
                            ""name"": ""Denim,S"",
                            ""price"": ""725000"",
                            ""discounted_price"": ""725000"",
                            ""stock"": 2,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""838a3c93-f69c-408b-97cc-8f36c1d45167"",
                                    ""name"": ""image"",
                                    ""filename"": ""hy9782ap6z_product_detail_1667525864.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/hy9782ap6z_product_detail_1667525864.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""7bc00b0a-3697-4bcb-8d85-f5804fdd933e""
                                },
                                {
                                    ""id"": ""e99080cf-6f92-4f61-a70a-54a23b54a89b"",
                                    ""name"": ""image"",
                                    ""filename"": ""hy9782ap6z_product_detail_1667525864_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/hy9782ap6z_product_detail_1667525864_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""7bc00b0a-3697-4bcb-8d85-f5804fdd933e""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""3c2fd769-0208-4ec1-ac36-dceac5ff5bb8"",
                            ""name"": ""Denim,M"",
                            ""price"": ""725000"",
                            ""discounted_price"": ""725000"",
                            ""stock"": 1,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""98490b6e-156e-4bdd-babd-34af5c9badac"",
                                    ""name"": ""image"",
                                    ""filename"": ""kf4l6z5hvo_product_detail_1667525865.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/kf4l6z5hvo_product_detail_1667525865.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""3c2fd769-0208-4ec1-ac36-dceac5ff5bb8""
                                },
                                {
                                    ""id"": ""4de8727b-d4b1-40ed-a186-57252ab88741"",
                                    ""name"": ""image"",
                                    ""filename"": ""kf4l6z5hvo_product_detail_1667525865_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/kf4l6z5hvo_product_detail_1667525865_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""3c2fd769-0208-4ec1-ac36-dceac5ff5bb8""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""1b7f6186-aafc-4dcf-abbb-3574687bc4ea"",
                            ""name"": ""Denim,L"",
                            ""price"": ""725000"",
                            ""discounted_price"": ""725000"",
                            ""stock"": 2,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""0b414e06-0ca9-476d-a850-7662fc9694bd"",
                                    ""name"": ""image"",
                                    ""filename"": ""rtlmdomksr_product_detail_1667525865_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/rtlmdomksr_product_detail_1667525865_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""1b7f6186-aafc-4dcf-abbb-3574687bc4ea""
                                },
                                {
                                    ""id"": ""395f5e72-85a6-4b4b-9837-05a9b87aa7d0"",
                                    ""name"": ""image"",
                                    ""filename"": ""rtlmdomksr_product_detail_1667525865.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/rtlmdomksr_product_detail_1667525865.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""1b7f6186-aafc-4dcf-abbb-3574687bc4ea""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""3a876c20-360a-4ad5-8eda-6f3e0431ef68"",
                            ""name"": ""Denim,XL"",
                            ""price"": ""725000"",
                            ""discounted_price"": ""725000"",
                            ""stock"": 2,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""aefd1f74-8110-4b53-a4b1-f5559d498669"",
                                    ""name"": ""image"",
                                    ""filename"": ""lewitqwru4_product_detail_1667525866.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/lewitqwru4_product_detail_1667525866.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""3a876c20-360a-4ad5-8eda-6f3e0431ef68""
                                },
                                {
                                    ""id"": ""8fa7a39d-24a9-4ac2-9878-aac4d69951a3"",
                                    ""name"": ""image"",
                                    ""filename"": ""lewitqwru4_product_detail_1667525866_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/lewitqwru4_product_detail_1667525866_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""3a876c20-360a-4ad5-8eda-6f3e0431ef68""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""7e3c309b-0960-4e7e-a6cf-6caed24c7d5f"",
                            ""name"": ""Black,XS"",
                            ""price"": ""725000"",
                            ""discounted_price"": ""725000"",
                            ""stock"": 2,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""060811f7-fa84-4d29-9d4e-2edddb2d4467"",
                                    ""name"": ""image"",
                                    ""filename"": ""meavt9poh9_product_detail_1667525866_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/meavt9poh9_product_detail_1667525866_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""7e3c309b-0960-4e7e-a6cf-6caed24c7d5f""
                                },
                                {
                                    ""id"": ""1eca34da-fc3f-4fb3-a744-cf09e8645956"",
                                    ""name"": ""image"",
                                    ""filename"": ""meavt9poh9_product_detail_1667525866.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/meavt9poh9_product_detail_1667525866.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""7e3c309b-0960-4e7e-a6cf-6caed24c7d5f""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""95a08030-356c-406b-91cc-e6c52b42fb74"",
                            ""name"": ""Black,S"",
                            ""price"": ""725000"",
                            ""discounted_price"": ""725000"",
                            ""stock"": 2,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""c5992bd3-ea86-4abb-bf87-dd4502cceb7e"",
                                    ""name"": ""image"",
                                    ""filename"": ""spy8pxhtaz_product_detail_1667525867_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/spy8pxhtaz_product_detail_1667525867_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""95a08030-356c-406b-91cc-e6c52b42fb74""
                                },
                                {
                                    ""id"": ""a6ea84b7-ae73-4020-be63-8596917fc9a7"",
                                    ""name"": ""image"",
                                    ""filename"": ""spy8pxhtaz_product_detail_1667525867.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/spy8pxhtaz_product_detail_1667525867.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""95a08030-356c-406b-91cc-e6c52b42fb74""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""706e8faa-1f88-4c3a-8c18-7e1339d0906c"",
                            ""name"": ""Black,M"",
                            ""price"": ""725000"",
                            ""discounted_price"": ""725000"",
                            ""stock"": 2,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""4c6d16d7-f6e1-4454-a7d5-6041b357d3ae"",
                                    ""name"": ""image"",
                                    ""filename"": ""kt7eh3gm6u_product_detail_1667525867_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/kt7eh3gm6u_product_detail_1667525867_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""706e8faa-1f88-4c3a-8c18-7e1339d0906c""
                                },
                                {
                                    ""id"": ""ee585dbc-95ea-4e33-83d9-b36170f19e16"",
                                    ""name"": ""image"",
                                    ""filename"": ""kt7eh3gm6u_product_detail_1667525867.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/kt7eh3gm6u_product_detail_1667525867.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""706e8faa-1f88-4c3a-8c18-7e1339d0906c""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""3b54366b-c925-4c17-9b71-63155bb4bc87"",
                            ""name"": ""Black,L"",
                            ""price"": ""725000"",
                            ""discounted_price"": ""725000"",
                            ""stock"": 2,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""273fa527-e6c5-47a4-88db-4077391502ae"",
                                    ""name"": ""image"",
                                    ""filename"": ""e7qg833tsn_product_detail_1667525868.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/e7qg833tsn_product_detail_1667525868.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""3b54366b-c925-4c17-9b71-63155bb4bc87""
                                },
                                {
                                    ""id"": ""2dee1a27-e41e-44e2-a3de-1caadd896168"",
                                    ""name"": ""image"",
                                    ""filename"": ""e7qg833tsn_product_detail_1667525868_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/e7qg833tsn_product_detail_1667525868_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""3b54366b-c925-4c17-9b71-63155bb4bc87""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""f2799ffe-0a22-4e73-9192-158304a682ce"",
                            ""name"": ""Black,XL"",
                            ""price"": ""725000"",
                            ""discounted_price"": ""725000"",
                            ""stock"": 2,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""78ff945a-3118-4070-ac36-aca7d5e8e1e7"",
                                    ""name"": ""image"",
                                    ""filename"": ""9qoidztmoa_product_detail_1667525868_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/9qoidztmoa_product_detail_1667525868_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""f2799ffe-0a22-4e73-9192-158304a682ce""
                                },
                                {
                                    ""id"": ""2cda36a4-8bb9-4f30-81c4-2ba0ce37a462"",
                                    ""name"": ""image"",
                                    ""filename"": ""9qoidztmoa_product_detail_1667525868.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/9qoidztmoa_product_detail_1667525868.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""f2799ffe-0a22-4e73-9192-158304a682ce""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""c7ee80e0-33c4-4e62-a145-45206c0eaa5e"",
                            ""name"": ""Heather Gray,XS"",
                            ""price"": ""725000"",
                            ""discounted_price"": ""725000"",
                            ""stock"": 1,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""cb8e6b63-31e8-47dd-b319-89ffe418b5fe"",
                                    ""name"": ""image"",
                                    ""filename"": ""9gd8ltm7x9_product_detail_1667525869.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/9gd8ltm7x9_product_detail_1667525869.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""c7ee80e0-33c4-4e62-a145-45206c0eaa5e""
                                },
                                {
                                    ""id"": ""402f2433-9ec4-4ab4-9dcc-a46e4bd18fcc"",
                                    ""name"": ""image"",
                                    ""filename"": ""9gd8ltm7x9_product_detail_1667525869_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/9gd8ltm7x9_product_detail_1667525869_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""c7ee80e0-33c4-4e62-a145-45206c0eaa5e""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""c9c29fce-3818-4395-b263-168ee12c4b29"",
                            ""name"": ""Heather Gray,S"",
                            ""price"": ""725000"",
                            ""discounted_price"": ""725000"",
                            ""stock"": 2,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""8648c894-2e45-4ef9-9f37-362711ccabd8"",
                                    ""name"": ""image"",
                                    ""filename"": ""bdilhobcvp_product_detail_1667525870.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/bdilhobcvp_product_detail_1667525870.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""c9c29fce-3818-4395-b263-168ee12c4b29""
                                },
                                {
                                    ""id"": ""fd1a0ef4-53c2-4b25-a3d0-fd1cc6ad8870"",
                                    ""name"": ""image"",
                                    ""filename"": ""bdilhobcvp_product_detail_1667525870_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/bdilhobcvp_product_detail_1667525870_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""c9c29fce-3818-4395-b263-168ee12c4b29""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""4d6450db-a9a3-4cb9-bbbc-7631d2f41ed0"",
                            ""name"": ""Heather Gray,M"",
                            ""price"": ""725000"",
                            ""discounted_price"": ""725000"",
                            ""stock"": 2,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""90c2acf2-0cce-434b-9c8c-0292a24c2fb9"",
                                    ""name"": ""image"",
                                    ""filename"": ""0ke0kmrxys_product_detail_1667525870_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/0ke0kmrxys_product_detail_1667525870_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""4d6450db-a9a3-4cb9-bbbc-7631d2f41ed0""
                                },
                                {
                                    ""id"": ""47a46aad-a030-4bdf-bd86-48fa8de00096"",
                                    ""name"": ""image"",
                                    ""filename"": ""0ke0kmrxys_product_detail_1667525870.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/0ke0kmrxys_product_detail_1667525870.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""4d6450db-a9a3-4cb9-bbbc-7631d2f41ed0""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""75f61775-b96a-45ff-85fe-69acb1d2d91b"",
                            ""name"": ""Heather Gray,L"",
                            ""price"": ""725000"",
                            ""discounted_price"": ""725000"",
                            ""stock"": 2,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""01fd1670-cc96-4005-b524-0431a2a1bcc3"",
                                    ""name"": ""image"",
                                    ""filename"": ""lm2vc8vavy_product_detail_1667525871_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/lm2vc8vavy_product_detail_1667525871_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""75f61775-b96a-45ff-85fe-69acb1d2d91b""
                                },
                                {
                                    ""id"": ""fc3d4c20-9ae2-460d-bce5-5d303cce1617"",
                                    ""name"": ""image"",
                                    ""filename"": ""lm2vc8vavy_product_detail_1667525871.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/lm2vc8vavy_product_detail_1667525871.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""75f61775-b96a-45ff-85fe-69acb1d2d91b""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""4dcd80c6-d76c-4e52-9b3a-eb89320962dc"",
                            ""name"": ""Heather Gray,XL"",
                            ""price"": ""725000"",
                            ""discounted_price"": ""725000"",
                            ""stock"": 2,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""bd720fee-2a5e-4bcb-b9a9-d21ae3b6493a"",
                                    ""name"": ""image"",
                                    ""filename"": ""fvkwnp3gnb_product_detail_1667525871.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/fvkwnp3gnb_product_detail_1667525871.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""4dcd80c6-d76c-4e52-9b3a-eb89320962dc""
                                },
                                {
                                    ""id"": ""85d3f73f-a107-41b8-9682-74fa99f9d49d"",
                                    ""name"": ""image"",
                                    ""filename"": ""fvkwnp3gnb_product_detail_1667525871_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/fvkwnp3gnb_product_detail_1667525871_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""4dcd80c6-d76c-4e52-9b3a-eb89320962dc""
                                }
                            ],
                            ""event_sale_session"": null
                        }
                    ]
                },
                {
                    ""id"": ""20fe1b19-8219-4870-85aa-beb5b7f7f25e"",
                    ""name"": ""Baby Puree By OONEW Michelin Series TB-1510S"",
                    ""slug"": ""baby-puree-by-oonew-michelin-series-tb-1510s-cu2evlamdi"",
                    ""price"": ""2499000"",
                    ""discounted_price"": ""2499000"",
                    ""discount_values"": [],
                    ""total_discount_value"": 0,
                    ""stock"": 7,
                    ""type"": ""combination"",
                    ""store_type"": ""brand_partner"",
                    ""active"": true,
                    ""product_type"": ""master_product"",
                    ""rating"": 0,
                    ""total_review"": 0,
                    ""total_sold"": 0,
                    ""is_wishlisted"": false,
                    ""is_reviewed"": false,
                    ""new_product"": false,
                    ""is_preorder"": false,
                    ""preorder_period"": 0,
                    ""event_ongoing"": {
                        ""event_sale"": [],
                        ""flash_sale"": [],
                        ""clearance_sale"": [],
                        ""pre_sale"": []
                    },
                    ""brand"": {
                        ""id"": ""cdf0e003-4ad8-4c30-b0c1-8784629d8e0a"",
                        ""name"": ""Oonew"",
                        ""slug"": ""oonew"",
                        ""active"": true
                    },
                    ""store"": {
                        ""id"": ""e4a912b2-2e64-43c6-9984-8e9502ed54b4"",
                        ""name"": ""Oonew"",
                        ""slug"": ""oonew-xADXde4YEx"",
                        ""url"": null,
                        ""official"": true,
                        ""type"": ""brand_partner"",
                        ""rating"": 4.2,
                        ""main_branch_city"": ""Bandung"",
                        ""files"": [
                            {
                                ""id"": ""d061de1d-48d1-445c-af33-4bcea3d80908"",
                                ""name"": ""logo"",
                                ""filename"": ""gghcgun1si_store_1662481486_thumbnail.png"",
                                ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/gghcgun1si_store_1662481486_thumbnail.png"",
                                ""type"": ""image"",
                                ""variant"": ""thumbnail"",
                                ""sequence"": 1,
                                ""fileable_id"": ""e4a912b2-2e64-43c6-9984-8e9502ed54b4""
                            },
                            {
                                ""id"": ""742e4a53-72af-4aee-9472-f4b2950d3976"",
                                ""name"": ""logo"",
                                ""filename"": ""gghcgun1si_store_1662481486.png"",
                                ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/gghcgun1si_store_1662481486.png"",
                                ""type"": ""image"",
                                ""variant"": ""original"",
                                ""sequence"": 1,
                                ""fileable_id"": ""e4a912b2-2e64-43c6-9984-8e9502ed54b4""
                            }
                        ]
                    },
                    ""files"": [
                        {
                            ""id"": ""03b497bf-dc73-4ee1-a7e8-8011b9f65145"",
                            ""name"": ""image"",
                            ""filename"": ""5divejre1x_product_1685947850.jpg"",
                            ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/5divejre1x_product_1685947850.jpg"",
                            ""type"": ""image"",
                            ""variant"": ""original"",
                            ""sequence"": 1,
                            ""fileable_id"": ""20fe1b19-8219-4870-85aa-beb5b7f7f25e""
                        },
                        {
                            ""id"": ""aa55c113-2597-4e62-9260-76df2d573772"",
                            ""name"": ""image"",
                            ""filename"": ""5divejre1x_product_1685947850_thumbnail.jpg"",
                            ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/5divejre1x_product_1685947850_thumbnail.jpg"",
                            ""type"": ""image"",
                            ""variant"": ""thumbnail"",
                            ""sequence"": 1,
                            ""fileable_id"": ""20fe1b19-8219-4870-85aa-beb5b7f7f25e""
                        }
                    ],
                    ""variant_categories"": [
                        {
                            ""id"": ""31f14313-95ab-4495-9912-5cdf95d2befa"",
                            ""name"": ""Warna"",
                            ""display_name"": ""Warna"",
                            ""slug"": ""warna-aokdsapso"",
                            ""value_type"": ""general"",
                            ""created_by"": null,
                            ""variants"": [
                                {
                                    ""id"": ""d3aafd18-eaf9-44f4-87ce-b483d7f0b189"",
                                    ""name"": ""Green Honeydew"",
                                    ""value"": ""#BEE8E7"",
                                    ""sequence"": 1,
                                    ""created_by"": null
                                },
                                {
                                    ""id"": ""d19e8afe-de6d-4f48-9137-b73c9826c6db"",
                                    ""name"": ""Pink Salmon"",
                                    ""value"": ""#FFD9D4"",
                                    ""sequence"": 1,
                                    ""created_by"": null
                                },
                                {
                                    ""id"": ""2e9ba377-c9db-497e-b174-1e5075d78f8f"",
                                    ""name"": ""Royal Grey"",
                                    ""value"": ""#9B9B9B"",
                                    ""sequence"": 1,
                                    ""created_by"": null
                                },
                                {
                                    ""id"": ""99281791-973d-4fd2-a18f-4ddb86034fe4"",
                                    ""name"": ""Royal Blue"",
                                    ""value"": ""#4F819B"",
                                    ""sequence"": 1,
                                    ""created_by"": null
                                }
                            ]
                        }
                    ],
                    ""details"": [
                        {
                            ""id"": ""fa753ecd-cd14-478c-b25e-c179964ec43e"",
                            ""name"": ""Green Honeydew"",
                            ""price"": ""2499000"",
                            ""discounted_price"": ""2499000"",
                            ""stock"": 2,
                            ""main"": true,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""8ec37068-2dfb-45e2-8e49-07bf692b37cf"",
                                    ""name"": ""image"",
                                    ""filename"": ""4mkjq6jlzm_product_detail_1685947856_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/4mkjq6jlzm_product_detail_1685947856_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""fa753ecd-cd14-478c-b25e-c179964ec43e""
                                },
                                {
                                    ""id"": ""7e1cb7cd-f389-4744-8a3a-1e6797893849"",
                                    ""name"": ""image"",
                                    ""filename"": ""4mkjq6jlzm_product_detail_1685947856.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/4mkjq6jlzm_product_detail_1685947856.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""fa753ecd-cd14-478c-b25e-c179964ec43e""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""0dc2d856-4d21-4fe7-bcdb-91aa8ab0f1b7"",
                            ""name"": ""Pink Salmon"",
                            ""price"": ""2499000"",
                            ""discounted_price"": ""2499000"",
                            ""stock"": 1,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""0f183852-0d4f-4e70-8f2c-33e801423e5e"",
                                    ""name"": ""image"",
                                    ""filename"": ""tfrzbfvhr0_product_detail_1685947857_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/tfrzbfvhr0_product_detail_1685947857_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""0dc2d856-4d21-4fe7-bcdb-91aa8ab0f1b7""
                                },
                                {
                                    ""id"": ""d91f5841-f9d7-4766-8a39-8ee2f1b65998"",
                                    ""name"": ""image"",
                                    ""filename"": ""tfrzbfvhr0_product_detail_1685947857.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/tfrzbfvhr0_product_detail_1685947857.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""0dc2d856-4d21-4fe7-bcdb-91aa8ab0f1b7""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""50be9a7e-90fe-4f18-a0b3-bb69707ecb37"",
                            ""name"": ""Royal Grey"",
                            ""price"": ""2499000"",
                            ""discounted_price"": ""2499000"",
                            ""stock"": 2,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""5ebfaf0c-b807-4fd7-a87b-ba49a5f19c96"",
                                    ""name"": ""image"",
                                    ""filename"": ""wxyugi0ct6_product_detail_1685947857_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/wxyugi0ct6_product_detail_1685947857_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""50be9a7e-90fe-4f18-a0b3-bb69707ecb37""
                                },
                                {
                                    ""id"": ""d037cc50-5d77-43b6-be54-4686bb0a4654"",
                                    ""name"": ""image"",
                                    ""filename"": ""wxyugi0ct6_product_detail_1685947857.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/wxyugi0ct6_product_detail_1685947857.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""50be9a7e-90fe-4f18-a0b3-bb69707ecb37""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""32220759-3ef7-4fb3-8d25-3e44a7eb0ec3"",
                            ""name"": ""Royal Blue"",
                            ""price"": ""2499000"",
                            ""discounted_price"": ""2499000"",
                            ""stock"": 2,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""4e6f538a-c8f1-4b17-98b6-564568c8f6b8"",
                                    ""name"": ""image"",
                                    ""filename"": ""w52jfzr2fk_product_detail_1685947858_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/w52jfzr2fk_product_detail_1685947858_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""32220759-3ef7-4fb3-8d25-3e44a7eb0ec3""
                                },
                                {
                                    ""id"": ""d2fc4fb8-d4f4-4523-b0ef-de82e3687432"",
                                    ""name"": ""image"",
                                    ""filename"": ""w52jfzr2fk_product_detail_1685947858.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/w52jfzr2fk_product_detail_1685947858.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""32220759-3ef7-4fb3-8d25-3e44a7eb0ec3""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""0831cca3-c2c2-4333-986c-f531a8cec3bd"",
                            ""name"": ""Apple"",
                            ""price"": ""2499000"",
                            ""discounted_price"": ""2499000"",
                            ""stock"": 0,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""c69e4bcb-9a01-4eb8-a953-8d846792ed8e"",
                                    ""name"": ""image"",
                                    ""filename"": ""5abfe9qaj3_product_detail_1685947859_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/5abfe9qaj3_product_detail_1685947859_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""0831cca3-c2c2-4333-986c-f531a8cec3bd""
                                },
                                {
                                    ""id"": ""01591b66-60b0-4a80-8c03-5f6a24926d72"",
                                    ""name"": ""image"",
                                    ""filename"": ""5abfe9qaj3_product_detail_1685947859.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/5abfe9qaj3_product_detail_1685947859.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""0831cca3-c2c2-4333-986c-f531a8cec3bd""
                                }
                            ],
                            ""event_sale_session"": null
                        },
                        {
                            ""id"": ""52ec92d0-3877-4078-ad1b-506494a1ac14"",
                            ""name"": ""Apple"",
                            ""price"": ""2499000"",
                            ""discounted_price"": ""2499000"",
                            ""stock"": 0,
                            ""main"": false,
                            ""is_preorder"": false,
                            ""preorder_period"": 0,
                            ""files"": [
                                {
                                    ""id"": ""6a3f475c-df60-45a0-a7ed-1f4fcdfd339a"",
                                    ""name"": ""image"",
                                    ""filename"": ""5abfe9qaj3_product_detail_1685947874.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/5abfe9qaj3_product_detail_1685947874.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""original"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""52ec92d0-3877-4078-ad1b-506494a1ac14""
                                },
                                {
                                    ""id"": ""98158691-e7c3-44c0-858b-0fcf4ad90840"",
                                    ""name"": ""image"",
                                    ""filename"": ""5abfe9qaj3_product_detail_1685947874_thumbnail.jpg"",
                                    ""value"": ""https://s3.ap-southeast-1.amazonaws.com/dev-paninti/5abfe9qaj3_product_detail_1685947874_thumbnail.jpg"",
                                    ""type"": ""image"",
                                    ""variant"": ""thumbnail"",
                                    ""sequence"": 1,
                                    ""fileable_id"": ""52ec92d0-3877-4078-ad1b-506494a1ac14""
                                }
                            ],
                            ""event_sale_session"": null
                        }
                    ]
                }
            ],
            ""first_page_url"": ""http://dev.api.paninti.com/v1/products?page=1"",
            ""from"": 1,
            ""last_page"": 57,
            ""last_page_url"": ""http://dev.api.paninti.com/v1/products?page=57"",
            ""next_page_url"": ""http://dev.api.paninti.com/v1/products?page=2"",
            ""path"": ""http://dev.api.paninti.com/v1/products"",
            ""per_page"": 2,
            ""prev_page_url"": null,
            ""to"": 2,
            ""total"": 113
        }
    }
}"
ts4jPh5a,Disable Spacebar,Mikestriken,JavaScript,Monday 5th of February 2024 07:43:06 PM CDT,"// ==UserScript==
// @name Disable space bar scrolling
// @namespace Disable Space bar scroll
// @version 0.1
// @description disable space bar scroll
// @author Space bar scroll
// @match https://www.youtube.com/*
// @match https://www.codecademy.com/*
// @grant none
// @downloadURL https://update.greasyfork.org/scripts/25035/Disable%20space%20bar%20scrolling.user.js
// @updateURL https://update.greasyfork.org/scripts/25035/Disable%20space%20bar%20scrolling.meta.js
// ==/UserScript==

/*
It's also known that the script doesn't work on Opera.
The reason for that is there are a few functions that I'm afraid might not work on Opera, and that is ""document.body.dispatchEvent()"" at line 19 and ""document.addEventListener()"" at line 40.
I'm not sure if there's an alternative way because I'm not familiar with JavaScript. If you know how to fix this, please let me know!

https://www.youtube.com/watch?v=qJhh3thWOjg
*/

( function() {
    var k = function(action)
    {
		// The Old Code:
        /*var eventObj = document.createEvent(""Events"");

        eventObj.initEvent(""keydown"", true, true);
        eventObj.keyCode = 75;
        eventObj.which = 75;

        document.body.dispatchEvent(eventObj);*/
        const eventObj = new KeyboardEvent('keydown', {
            key: 'k',
            code: 'KeyK',
            bubbles: true,
            cancelable: true
        });

        document.body.dispatchEvent(eventObj);
    };

    var killSpaceBar = function(evt)
    {
		// The old code:
        /*var target = evt.target || {}, isInput = (""INPUT"" == target.tagName || ""TEXTAREA"" == target.tagName || ""SELECT"" == target.tagName || ""EMBED"" == target.tagName);

        // if we're an input or not a real target exit
        if(isInput || !target.tagName) return;

        // if we're a fake input like the comments exit
        if(target && target.getAttribute && target.getAttribute('role') === 'textbox') return;

        // ignore the space and send a 'k' to pause
        if (evt.keyCode === 32)
        {
            evt.preventDefault();
            k();
        }*/
        const target = evt.target;
        const isInput = target instanceof HTMLInputElement ||
              target instanceof HTMLTextAreaElement ||
              target instanceof HTMLSelectElement ||
              target instanceof HTMLEmbedElement ||
              target.id === ""contenteditable-root"";

		// Debugging code
        /*console.log(""Type Input: "" + isInput);
        console.log(""Type not Target: "" + !target);
        console.log(""Type not Target.tagname: "" + !target.tagName);
        console.log(""Target Is: "" + target.tagName);
        console.log(""Target Slot: "" + target.slot);
        console.log(""Target id: "" + target.id);
        console.log(""Target class: "" + target.class);*/

        // If we're an input or not a real target, exit
        if (isInput || !target || !target.tagName) {
            return;
        }

        // If we're a fake input like the comments, exit
        if (target.getAttribute && target.getAttribute('role') === 'textbox') {
            return;
        }

        // Ignore the space and send a 'k' to pause
        if (evt.key === ' ' && evt.code === 'Space') {
            evt.preventDefault();
            k();
        }
    };

    document.addEventListener(""keydown"", killSpaceBar, false);

}
)();
"
iWrzw7Hv,profile 10 (2.2.24 hc) (side),vermilly,HTML,Monday 5th of February 2024 06:34:00 PM CDT,"<!------
    
    【F2U】 53.Live [ Dark. ]
    
      // Code by Leporidebug

      //// COLORS ////
      
      main accent → cf1102
      text color → d4d4d4
      button → d42242
      blacks → 000000
      whites → ffffff
      
      
------>
<br>
<div class=""card mx-auto mt-4 p-1"" style=""max-width:700px;border-radius:0.5rem;background-color:#000000;font-family:'avenir';"">
  
  <!--------------------------------
  
      | MAIN BACKGROUND
  
  ---------------------------------->
  <div class=""row no-gutters rounded modal-open"" style=""background-size:cover;background-position:center;
    
    /*----- main background ; autoscale center, replace IMG_URL with image address -----*/;
    background-image:url(https://64.media.tumblr.com/3efad74cd094cc1e7e5ad96a5eea8aa8/d88ea49db67c54dd-f8/s2048x3072/d11a975ec7d42b47262459c42c2a4327c485aef3.jpg);
  
  "">
    
    <!--------------------------------
  
      | LEFT BOX
      
    
    ---------------------------------->
    <div class=""col-lg col-12 flex-column"">
      <div class=""card border-0 p-1"" style=""height:250px;background-color:transparent;"">
        <!----- name box ----->
        <div class=""card border-0 p-2"" style=""background-color:rgba(0,0,0,0.8);max-width:250px;box-shadow:0 0 8px rgba(0,0,0,0.3)"">
          <div class=""row no-gutters"">
            
            <!----- avatar image ----->
            <div class=""col-auto my-auto"">
              <div class=""card rounded-circle"" style=""width:65px;height:65px;background-color:transparent;border-color:#ffffff;border-width:2px;background-size:cover;background-position:center;
                
                /*----- user avatar ; replace IMG_URL with image address -----*/;
                background-image:url(https://64.media.tumblr.com/ca05bf082fc23a590a7d8834125d87fd/675243af7c2436b4-9b/s1280x1920/bfc7eb4a0ea0ae19c08966b816c05b277c1f3f2a.jpg);
                
              ""></div>
            </div>
            
            <!----- name ----->
            <div class=""col pl-3 my-auto"">
              <h1 class=""text-uppercase font-weight-bold mb-0"" style=""letter-spacing:1px;color:#cf1102;"">
                
                XUXU ✧･ﾟ
                
              </h1>
              <p class=""small"" style=""color:#d4d4d4;"">
                
                @ xuxu |  <!----- carrd ----->
          <a href=""https://xuxu-time.carrd.co/"" title=""carrd"" class=""tooltipster"" data-placement=""bottom"" style=""text-decoration:none;color:#cf1102;"">
            <i class=""fas fa-id-card fa-sm fa-fw""></i> carrd
          </a>  
          
                
              </p>
            </div>
          </div>
        </div>
        <!----- name box ----->
        

        
      </div>
    </div>
    <!----- LEFT BOX END ----->
    
    
    <!----- filler box between two boxes, no need to edit ----->
    <div class=""col-lg-auto col-12 flex-column"">
      <div class=""card border-0 rounded-0 p-1 d-flex flex-fill"" style=""background-color:#000000;""></div>
    </div>
    
    
    <!--------------------------------
  
      | RIGHT BOX
      
        - main profile
  
    ---------------------------------->
    <div class=""col-lg-4 col-12 flex-column"">
      
      <!-----------------------------------
      
        scrollable ""chat""-styled profile
      
      ------------------------------------->
      <div class=""card border-0 d-flex flex-fill rounded-0 p-3"" style=""background-color:rgba(0, 0, 0, 0.5);min-height:100px;max-height:300px;overflow:auto;"">
          
          
        <!----- basics ---->
        <div class=""card border-0 p-3 small mb-2"" style=""background-color:rgba(0,0,0,0.9);max-width:250px;box-shadow:0 0 8px rgba(0,0,0,0.3);color:#d4d4d4;"">
          
          <p>18+ . they/them . pst . 🇦🇫 🇺🇸
          <br>
     
        </div>
        <!----- basics end ---->
        
        
        <!----- intro box ---->
        <div class=""card border-0 p-3 small mb-2"" style=""background-color:#6b0f07;max-width:250px;box-shadow:0 0 8px rgba(0,0,0,0.3);color:#ffffff;"">
          
          <!----- header ---->
          <div class=""row no-gutters"">
            <!----- greeting ---->
            <div class=""col my-auto"">
              <h4 class=""mb-0 font-weight-bold text-uppercase"">
                
                WHAT'S UP,
              
              </h4>
            </div>
            
            <!----- avatar image (again) ---->
            <div class=""col-auto"">
              <div class=""card rounded-circle mb-1"" style=""width:30px;height:30px;background-color:transparent;border-color:#ffffff;border-width:2px;background-size:cover;background-position:center;
              
                /*----- user avatar ; replace IMG_URL with image address -----*/;
                background-image:url(https://64.media.tumblr.com/62b2bc69554b4f562324a270019c9b9b/37f37deabac96f53-3d/s400x600/92f79805f815759f5297412843bea91b28ce94c1.jpg);
                
              ""></div>
            </div>
            
          </div>
          <!----- header end ---->
          
          <!----- intro content ---->
          <p>
            ...babes, bros, and nonbinary crows~!  This is a side account, I'm not using it at the moment! My main account is @xuxu.  
          </p>
        </div>
        <!----- intro box end ---->
        
        
       
        
      </div>
      <!----- chat profile end ----->
      
      
      <!-----------------------------------
      
        message and socials
      
      ------------------------------------->
      <div class=""card pt-2 rounded-0 border-0 d-flex flex-fill"" style=""background-color:#000000;"">
        
        <!----- send message ----->
        <div class=""card border-0 modal-open mb-1"" style=""border-radius:1.5rem;"">
          <div class=""row no-gutters"">
            <!----- message box ----->
            <div class=""col-9 flex-column"">
            <div class=""card px-2 py-1 rounded-0 border-0 flex-fill"" style=""background-color:#d4d4d4;color:#000000;"">
                
                <!----- message content ----->
               
                <p class=""small my-auto faded"">
                  
""dianxia, take my hand""              </p>
              </div>
            </div>
            <!----- message box end ----->
            
            <!----- send button ----->
            <div class=""col-3 flex-column"">
              <!----- replace username with your own ----->
              <a
                href=""https://drawing.garden/""
                title=""join hua cheng!""
                
                class=""w-100 btn rounded-0 border-0 d-flex flex-fill mx-auto my-auto tooltipster"" style=""color:#ffffff;background-color:#d42242;"">
                
                  <!----- fontawesome icon ----->
                  <i class=""fas fa-paper-plane fa-fw"" style=""font-size:0.75rem;""></i>
                  
              </a>
            </div>
            <!----- send button end ----->
          </div>
        </div>
        <!----- send message end ----->
        
        
      
      </div>
      <!----- message and socials end ------>
    </div>
    <!----- RIGHT BOX END ----->
  </div>
</div>
<!----- MAIN CONTENT END ----->
<!----- CREDIT ! please do not remove ----->
<p class=""text-center faded mx-auto mb-4"" style=""max-width:700px;"">
  <a href=""https://toyhou.se/19722685"" class=""small text-muted"" style=""text-decoration:none;"">code by Leporidebug</a>
</p>
<!----- [ CODE END ] ----->"
kkVCX2HS,2024-02-05_stats.json,rdp_snitch,JSON,Monday 5th of February 2024 06:17:58 PM CDT,"{
  ""ip"": {
    ""87.251.75.145"": 12,
    ""117.102.70.35"": 3,
    ""198.235.24.230"": 9,
    ""194.165.16.10"": 6,
    ""87.251.75.64"": 3,
    ""45.227.254.48"": 6,
    ""173.239.214.157"": 3,
    ""185.170.144.3"": 6,
    ""198.235.24.244"": 9,
    ""139.59.185.252"": 6,
    ""87.251.75.179"": 6,
    ""162.142.125.220"": 3,
    ""185.170.144.113"": 9,
    ""179.60.147.118"": 3,
    ""79.124.58.86"": 3,
    ""193.233.132.144"": 3,
    ""43.134.66.207"": 3,
    ""62.204.41.107"": 12,
    ""196.190.117.7"": 6,
    ""128.14.236.128"": 3,
    ""45.227.254.8"": 6,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""198.235.24.32"": 9,
    ""194.165.16.78"": 6,
    ""45.93.20.204"": 9,
    ""167.248.133.52"": 3,
    ""198.235.24.50"": 9,
    ""98.159.37.12"": 3
  },
  ""asn"": {
    ""AS208091"": 21,
    ""AS38482"": 3,
    ""AS396982"": 36,
    ""AS48721"": 12,
    ""AS267784"": 12,
    ""AS62240"": 6,
    ""AS197414"": 15,
    ""AS14061"": 6,
    ""AS398324"": 6,
    ""AS209588"": 3,
    ""AS50360"": 3,
    ""AS216319"": 3,
    ""AS132203"": 3,
    ""AS59425"": 12,
    ""AS24757"": 6,
    ""AS135377"": 3,
    ""AS208046"": 18,
    ""AS57523"": 9
  },
  ""isp"": {
    ""Xhost Internet Solutions LP"": 36,
    ""Biznet Networks"": 3,
    ""Google LLC"": 36,
    ""Flyservers S.A."": 27,
    ""LogicWeb Inc."": 6,
    ""DIGITALOCEAN"": 6,
    ""Censys, Inc."": 6,
    ""Tamatiya EOOD"": 3,
    ""Chromis IT LTD"": 3,
    ""Shenzhen Tencent Computer Systems Company Limited"": 3,
    ""Horizon LLC"": 12,
    ""Ethiotelecom"": 6,
    ""Zenlayer Inc"": 3,
    ""ColocationX Ltd."": 18,
    ""Chang Way Technologies Co. Limited"": 9
  },
  ""org"": {
    ""Xhost Internet Solutions"": 21,
    ""Pengadilan Agama KLS 1A Bandung"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Flyservers S.A"": 12,
    ""UAB Host Baltic"": 12,
    ""NSQ-VENTURE"": 3,
    ""Xhostis"": 15,
    ""DigitalOcean, LLC"": 6,
    ""Censys Inc"": 3,
    ""Cloud Solutions S.A"": 3,
    ""Tamatiya EOOD"": 3,
    ""1337 Hosting LTD"": 3,
    ""Tencent Cloud Computing"": 3,
    ""Horizon LLC"": 12,
    ""Unknown"": 6,
    ""UCLOUD"": 3,
    ""Makut Investments"": 9,
    ""ColocationX Ltd"": 9,
    ""Starcrecium Limited"": 9,
    ""Censys, Inc."": 3,
    ""Dedicated Servers"": 3
  },
  ""regionName"": {
    ""North Holland"": 45,
    ""West Java"": 3,
    ""California"": 39,
    ""Kaunas"": 12,
    ""Vilnius"": 12,
    ""New Jersey"": 3,
    ""England"": 9,
    ""Michigan"": 6,
    ""Distrito Federal"": 3,
    ""Plovdiv"": 3,
    ""North West"": 3,
    ""Moscow"": 21,
    ""Addis Ababa"": 6,
    ""Taiwan"": 3,
    ""Virginia"": 9
  },
  ""country"": {
    ""The Netherlands"": 45,
    ""Indonesia"": 3,
    ""United States"": 57,
    ""Lithuania"": 24,
    ""United Kingdom"": 9,
    ""Venezuela"": 3,
    ""Bulgaria"": 3,
    ""Singapore"": 3,
    ""Russia"": 21,
    ""Ethiopia"": 6,
    ""Taiwan"": 3
  },
  ""account"": {
    ""Administr"": 33,
    ""hello"": 12,
    ""DRJgiGicX"": 3,
    ""NRQWiL"": 3,
    ""mcbFXl"": 3,
    ""Test"": 30,
    ""(empty)"": 12,
    ""dpEUeTBZe"": 3,
    ""aEfCMU"": 3,
    ""sJqMMc"": 3,
    ""Domain"": 48,
    ""jTXyvFI"": 3,
    ""Administrator"": 3,
    ""jEXwytPdj"": 3,
    ""Lelome"": 3,
    ""vrWbKH"": 3,
    ""kdiYWasjQ"": 3,
    ""bjWpeD"": 3,
    ""febrcT"": 3
  },
  ""keyboard"": {
    ""Unknown"": 177
  },
  ""client_build"": {
    ""Unknown"": 177
  },
  ""client_name"": {
    ""Unknown"": 177
  },
  ""ip_type"": {
    ""Unknown"": 102,
    ""hosting"": 45,
    ""hosting & proxy"": 12,
    ""mobile"": 9,
    ""proxy"": 9
  }
}"
sM5YHYyL,2024-02-05_stats.json,rdp_snitch,JSON,Monday 5th of February 2024 06:16:09 PM CDT,"{
  ""ip"": {
    ""87.251.75.145"": 8,
    ""117.102.70.35"": 2,
    ""198.235.24.230"": 6,
    ""194.165.16.10"": 4,
    ""87.251.75.64"": 2,
    ""45.227.254.48"": 4,
    ""173.239.214.157"": 2,
    ""185.170.144.3"": 4,
    ""198.235.24.244"": 6,
    ""139.59.185.252"": 4,
    ""87.251.75.179"": 4,
    ""162.142.125.220"": 2,
    ""185.170.144.113"": 6,
    ""179.60.147.118"": 2,
    ""79.124.58.86"": 2,
    ""193.233.132.144"": 2,
    ""43.134.66.207"": 2,
    ""62.204.41.107"": 8,
    ""196.190.117.7"": 4,
    ""128.14.236.128"": 2,
    ""45.227.254.8"": 4,
    ""185.196.220.41"": 6,
    ""193.142.146.227"": 6,
    ""198.235.24.32"": 6,
    ""194.165.16.78"": 4,
    ""45.93.20.204"": 6,
    ""167.248.133.52"": 2,
    ""198.235.24.50"": 6,
    ""98.159.37.12"": 2
  },
  ""asn"": {
    ""AS208091"": 14,
    ""AS38482"": 2,
    ""AS396982"": 24,
    ""AS48721"": 8,
    ""AS267784"": 8,
    ""AS62240"": 4,
    ""AS197414"": 10,
    ""AS14061"": 4,
    ""AS398324"": 4,
    ""AS209588"": 2,
    ""AS50360"": 2,
    ""AS216319"": 2,
    ""AS132203"": 2,
    ""AS59425"": 8,
    ""AS24757"": 4,
    ""AS135377"": 2,
    ""AS208046"": 12,
    ""AS57523"": 6
  },
  ""isp"": {
    ""Xhost Internet Solutions LP"": 24,
    ""Biznet Networks"": 2,
    ""Google LLC"": 24,
    ""Flyservers S.A."": 18,
    ""LogicWeb Inc."": 4,
    ""DIGITALOCEAN"": 4,
    ""Censys, Inc."": 4,
    ""Tamatiya EOOD"": 2,
    ""Chromis IT LTD"": 2,
    ""Shenzhen Tencent Computer Systems Company Limited"": 2,
    ""Horizon LLC"": 8,
    ""Ethiotelecom"": 4,
    ""Zenlayer Inc"": 2,
    ""ColocationX Ltd."": 12,
    ""Chang Way Technologies Co. Limited"": 6
  },
  ""org"": {
    ""Xhost Internet Solutions"": 14,
    ""Pengadilan Agama KLS 1A Bandung"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Flyservers S.A"": 8,
    ""UAB Host Baltic"": 8,
    ""NSQ-VENTURE"": 2,
    ""Xhostis"": 10,
    ""DigitalOcean, LLC"": 4,
    ""Censys Inc"": 2,
    ""Cloud Solutions S.A"": 2,
    ""Tamatiya EOOD"": 2,
    ""1337 Hosting LTD"": 2,
    ""Tencent Cloud Computing"": 2,
    ""Horizon LLC"": 8,
    ""Unknown"": 4,
    ""UCLOUD"": 2,
    ""Makut Investments"": 6,
    ""ColocationX Ltd"": 6,
    ""Starcrecium Limited"": 6,
    ""Censys, Inc."": 2,
    ""Dedicated Servers"": 2
  },
  ""regionName"": {
    ""North Holland"": 30,
    ""West Java"": 2,
    ""California"": 26,
    ""Kaunas"": 8,
    ""Vilnius"": 8,
    ""New Jersey"": 2,
    ""England"": 6,
    ""Michigan"": 4,
    ""Distrito Federal"": 2,
    ""Plovdiv"": 2,
    ""North West"": 2,
    ""Moscow"": 14,
    ""Addis Ababa"": 4,
    ""Taiwan"": 2,
    ""Virginia"": 6
  },
  ""country"": {
    ""The Netherlands"": 30,
    ""Indonesia"": 2,
    ""United States"": 38,
    ""Lithuania"": 16,
    ""United Kingdom"": 6,
    ""Venezuela"": 2,
    ""Bulgaria"": 2,
    ""Singapore"": 2,
    ""Russia"": 14,
    ""Ethiopia"": 4,
    ""Taiwan"": 2
  },
  ""account"": {
    ""Administr"": 22,
    ""hello"": 8,
    ""DRJgiGicX"": 2,
    ""NRQWiL"": 2,
    ""mcbFXl"": 2,
    ""Test"": 20,
    ""(empty)"": 8,
    ""dpEUeTBZe"": 2,
    ""aEfCMU"": 2,
    ""sJqMMc"": 2,
    ""Domain"": 32,
    ""jTXyvFI"": 2,
    ""Administrator"": 2,
    ""jEXwytPdj"": 2,
    ""Lelome"": 2,
    ""vrWbKH"": 2,
    ""kdiYWasjQ"": 2,
    ""bjWpeD"": 2,
    ""febrcT"": 2
  },
  ""keyboard"": {
    ""Unknown"": 118
  },
  ""client_build"": {
    ""Unknown"": 118
  },
  ""client_name"": {
    ""Unknown"": 118
  },
  ""ip_type"": {
    ""Unknown"": 68,
    ""hosting"": 30,
    ""hosting & proxy"": 8,
    ""mobile"": 6,
    ""proxy"": 6
  }
}"
dXsmTJE0,2024-02-05_stats.json,rdp_snitch,JSON,Monday 5th of February 2024 06:15:08 PM CDT,"{
  ""ip"": {
    ""87.251.75.145"": 4,
    ""117.102.70.35"": 1,
    ""198.235.24.230"": 3,
    ""194.165.16.10"": 2,
    ""87.251.75.64"": 1,
    ""45.227.254.48"": 2,
    ""173.239.214.157"": 1,
    ""185.170.144.3"": 2,
    ""198.235.24.244"": 3,
    ""139.59.185.252"": 2,
    ""87.251.75.179"": 2,
    ""162.142.125.220"": 1,
    ""185.170.144.113"": 3,
    ""179.60.147.118"": 1,
    ""79.124.58.86"": 1,
    ""193.233.132.144"": 1,
    ""43.134.66.207"": 1,
    ""62.204.41.107"": 4,
    ""196.190.117.7"": 2,
    ""128.14.236.128"": 1,
    ""45.227.254.8"": 2,
    ""185.196.220.41"": 3,
    ""193.142.146.227"": 3,
    ""198.235.24.32"": 3,
    ""194.165.16.78"": 2,
    ""45.93.20.204"": 3,
    ""167.248.133.52"": 1,
    ""198.235.24.50"": 3,
    ""98.159.37.12"": 1
  },
  ""asn"": {
    ""AS208091"": 7,
    ""AS38482"": 1,
    ""AS396982"": 12,
    ""AS48721"": 4,
    ""AS267784"": 4,
    ""AS62240"": 2,
    ""AS197414"": 5,
    ""AS14061"": 2,
    ""AS398324"": 2,
    ""AS209588"": 1,
    ""AS50360"": 1,
    ""AS216319"": 1,
    ""AS132203"": 1,
    ""AS59425"": 4,
    ""AS24757"": 2,
    ""AS135377"": 1,
    ""AS208046"": 6,
    ""AS57523"": 3
  },
  ""isp"": {
    ""Xhost Internet Solutions LP"": 12,
    ""Biznet Networks"": 1,
    ""Google LLC"": 12,
    ""Flyservers S.A."": 9,
    ""LogicWeb Inc."": 2,
    ""DIGITALOCEAN"": 2,
    ""Censys, Inc."": 2,
    ""Tamatiya EOOD"": 1,
    ""Chromis IT LTD"": 1,
    ""Shenzhen Tencent Computer Systems Company Limited"": 1,
    ""Horizon LLC"": 4,
    ""Ethiotelecom"": 2,
    ""Zenlayer Inc"": 1,
    ""ColocationX Ltd."": 6,
    ""Chang Way Technologies Co. Limited"": 3
  },
  ""org"": {
    ""Xhost Internet Solutions"": 7,
    ""Pengadilan Agama KLS 1A Bandung"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Flyservers S.A"": 4,
    ""UAB Host Baltic"": 4,
    ""NSQ-VENTURE"": 1,
    ""Xhostis"": 5,
    ""DigitalOcean, LLC"": 2,
    ""Censys Inc"": 1,
    ""Cloud Solutions S.A"": 1,
    ""Tamatiya EOOD"": 1,
    ""1337 Hosting LTD"": 1,
    ""Tencent Cloud Computing"": 1,
    ""Horizon LLC"": 4,
    ""Unknown"": 2,
    ""UCLOUD"": 1,
    ""Makut Investments"": 3,
    ""ColocationX Ltd"": 3,
    ""Starcrecium Limited"": 3,
    ""Censys, Inc."": 1,
    ""Dedicated Servers"": 1
  },
  ""regionName"": {
    ""North Holland"": 15,
    ""West Java"": 1,
    ""California"": 13,
    ""Kaunas"": 4,
    ""Vilnius"": 4,
    ""New Jersey"": 1,
    ""England"": 3,
    ""Michigan"": 2,
    ""Distrito Federal"": 1,
    ""Plovdiv"": 1,
    ""North West"": 1,
    ""Moscow"": 7,
    ""Addis Ababa"": 2,
    ""Taiwan"": 1,
    ""Virginia"": 3
  },
  ""country"": {
    ""The Netherlands"": 15,
    ""Indonesia"": 1,
    ""United States"": 19,
    ""Lithuania"": 8,
    ""United Kingdom"": 3,
    ""Venezuela"": 1,
    ""Bulgaria"": 1,
    ""Singapore"": 1,
    ""Russia"": 7,
    ""Ethiopia"": 2,
    ""Taiwan"": 1
  },
  ""account"": {
    ""Administr"": 11,
    ""hello"": 4,
    ""DRJgiGicX"": 1,
    ""NRQWiL"": 1,
    ""mcbFXl"": 1,
    ""Test"": 10,
    ""(empty)"": 4,
    ""dpEUeTBZe"": 1,
    ""aEfCMU"": 1,
    ""sJqMMc"": 1,
    ""Domain"": 16,
    ""jTXyvFI"": 1,
    ""Administrator"": 1,
    ""jEXwytPdj"": 1,
    ""Lelome"": 1,
    ""vrWbKH"": 1,
    ""kdiYWasjQ"": 1,
    ""bjWpeD"": 1,
    ""febrcT"": 1
  },
  ""keyboard"": {
    ""Unknown"": 59
  },
  ""client_build"": {
    ""Unknown"": 59
  },
  ""client_name"": {
    ""Unknown"": 59
  },
  ""ip_type"": {
    ""Unknown"": 34,
    ""hosting"": 15,
    ""hosting & proxy"": 4,
    ""mobile"": 3,
    ""proxy"": 3
  }
}"
DDeYfrZX,env gnome,bluebyt,INI file,Monday 5th of February 2024 06:03:57 PM CDT,"env
SESSION_MANAGER=local/archlinux:@/tmp/.ICE-unix/938,unix/archlinux:/tmp/.ICE-unix/938
SHLVL=1
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus
PWD=/home/bluebyt
DESKTOP_SESSION=gnome
GDMSESSION=gnome
GNOME_SETUP_DISPLAY=:1
XDG_SESSION_TYPE=wayland
XDG_DATA_DIRS=/home/bluebyt/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share/:/usr/share/
JOURNAL_STREAM=8:8851
PROMPT_VERSION=46.alpha
SSH_AUTH_SOCK=/run/user/1000/keyring/ssh
MAIL=/var/spool/mail/bluebyt
XDG_SESSION_CLASS=user
MANAGERPID=837
DISPLAY=:0
SHELL=/usr/bin/fish
PROMPT_PROFILE=4ce645afe356d130ae39df7465a717a1
COLORTERM=truecolor
INVOCATION_ID=2d292aaf4f344547b3f1260c9a9f6e8c
MOTD_SHOWN=pam
MEMORY_PRESSURE_WATCH=/sys/fs/cgroup/user.slice/user-1000.slice/user@1000.service/app.slice/flatpak-session-helper.service/memory.pressure
LANG=en_US.UTF-8
SYSTEMD_EXEC_PID=1640
LOGNAME=bluebyt
VTE_VERSION=7501
HOME=/home/bluebyt
XDG_RUNTIME_DIR=/run/user/1000
MEMORY_PRESSURE_WRITE=c29tZSAyMDAwMDAgMjAwMDAwMAA=
XDG_MENU_PREFIX=gnome-
PATH=/usr/local/bin:/usr/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl
USER=bluebyt
XAUTHORITY=/run/user/1000/.mutter-Xwaylandauth.9WKVI2
GDM_LANG=en_US.UTF-8
XDG_SESSION_DESKTOP=gnome
XDG_CURRENT_DESKTOP=GNOME
USERNAME=bluebyt
TERM=xterm-256color
WAYLAND_DISPLAY=wayland-0
"
V3sZMwNK,Untitled,Rofyda_Elghadban1,C++,Monday 5th of February 2024 05:51:31 PM CDT," #include <bits/stdc++.h> 
 #define ll long long
 #define ull unsigned long long
 #define pi 3.141592654
 #define NUM 1e18
 #define Mod  1'000'000'007
 #define fixed(n) fixed<<setprecision(n)
 #define cin(v) for(auto &i:v) cin >> i ;
 #define cout(v) for(auto &i:v) cout << i  <<"" "";
 #define vowel(x) (x=='e'||x=='a'||x=='i'||x=='o'||x=='u')
 #define small(x) (x>=97&&x<=122)
 #define capital(x) (x>=65&&x<=90)
 #define Tolower(s) transform(s.begin(),s.end(),s.begin(),::tolower);
 #define Toupper(s) transform(s.begin(),s.end(),s.begin(),::toupper); 
 #define sz(x) (int)(x.size())
 #define all(v) ((v).begin()), ((v).end())
 #define allr(v) ((v).rbegin()), ((v).rend())
 #define updmax(a,b) a=max(a,b)
 #define updmin(a,b) a=min(a,b)
 #define ceil(a,b) ((a/b)+(a%b?1:0))
 /* asc -> 1 2 3 ,des -> 3 2 1 */
 /***********************************************************************************/
 using namespace std;
 void Rofyda_Elghadban(){
  #ifndef ONLINE_JUDGE   
    freopen(""input.txt"", ""r"", stdin), freopen(""output.txt"", ""w"", stdout);
   #endif
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 }

 bool BS(ll n,ll k,ll s){
  ll v=0,counter=0,flag=0;
  while(flag==0){
    if(pow(k,counter)>s){
      flag=1;
      break;
    }else{
      v+=floor(s/pow(k,counter));
    }
    counter++;
  }  
  if(v>=n){
    return true;
  }else{
    return false;
  }
 }

 void solve(){
  ll n,k;
  cin>>n>>k;
  ll l=0,r=n,ans=-1;
  while(l<=r){
    ll mid=l+(r-l)/2;
    if(BS(n,k,mid)){
      ans=mid;
      r=mid-1;
    }else{
      l=mid+1;
    }
  }
  cout<<ans<<""\n"";
 }

 int main(){
  Rofyda_Elghadban(); 
  // int t;
  // cin>>t;
  // while(t--){
  //   solve();
  // }
  solve();
  return 0;
 }"
MxrQUeVv,Untitled,khouli,Python,Monday 5th of February 2024 05:19:50 PM CDT,"from __future__ import annotations

from dataclasses import dataclass

from sqlalchemy import create_engine
from sqlalchemy import select
from sqlalchemy import Table, Column, Integer, ForeignKey
from sqlalchemy import CheckConstraint
from sqlalchemy.orm import sessionmaker, registry
from sqlalchemy.orm import Mapped, mapped_column, relationship
from sqlalchemy.orm import foreign, remote


reg = registry()


edge_table = Table(
    ""edge"",
    reg.metadata,
    Column(""left_node_id"",  Integer, ForeignKey(""node.id""), primary_key=True),
    Column(""right_node_id"", Integer, ForeignKey(""node.id""), primary_key=True, index=True),
    CheckConstraint(""left_node_id < right_node_id""),
)


@reg.mapped_as_dataclass
class Node:
    __tablename__ = ""node""
    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    _right_neighbors: Mapped[list[""Node""]] = relationship(
            default_factory=list,
            repr=False,
            argument=""Node"",
            secondary=edge_table,
            primaryjoin=(id == edge_table.c.left_node_id),
            secondaryjoin=(id == edge_table.c.right_node_id),
            back_populates=""_left_neighbors"",
        )

    _left_neighbors: Mapped[list[""Node""]] = relationship(
            default_factory=list,
            repr=False,
            argument=""Node"",
            secondary=edge_table,
            primaryjoin=(id == edge_table.c.right_node_id),
            secondaryjoin=(id == edge_table.c.left_node_id),
            back_populates=""_right_neighbors"",
        )

    @dataclass
    class NeighborsProxy:
        node: Node

        __emulates__ = list

        def __repr__(self):
            return repr(list(self.__iter__()))

        def append(self, other_node):
            if self.node.id < other_node.id:
                self.node._right_neighbors.append(other_node)
            elif self.node.id > other_node.id:
                self.node._left_neighbors.append(other_node)
            else:
                raise ValueError

        def remove(self, other_node):
            if self.node.id < other_node.id:
                self.node._right_neighbors.remove(other_node)
            elif self.node.id > other_node.id:
                self.node._left_neighbors.remove(other_node)
            else:
                raise ValueError

        def extend(self, other_nodes):
            other_nodes_1 = []
            other_nodes_2 = []
            for other_node in other_nodes:
                if self.node.id < other_node.id:
                    other_nodes_1.append(other_node)
                elif self.node.id > other_node.id:
                    other_nodes_2.append(other_node)
                else:
                    raise ValueError
            self.node._right_neighbors.extend(other_nodes_1)
            self.node._left_neighbors.extend(other_nodes_2)

        def __iter__(self):
            yield from self.node._right_neighbors
            yield from self.node._left_neighbors

    @property
    def neighbors(self):
        return Node.NeighborsProxy(self)

    def __repr__(self):
        neighbors_repr = "", "".join((f""Node(id={n.id})"" for n in self.neighbors))
        return f""{self.__class__.__name__}(id={self.id}, neighbors=[{neighbors_repr}])""


engine = create_engine('sqlite:///:memory:', echo=True)
reg.metadata.create_all(engine)

Session = sessionmaker(bind=engine)
session = Session()

node1 = Node(1)
node2 = Node(2)
node3 = Node(3)

node1.neighbors.append(node2)
node2.neighbors.append(node3)
node3.neighbors.append(node1)

session.add_all([node1, node2, node3])
session.commit()

print(node1)
print(node2)
print(node3)
"
yHqSCxVZ,InputLogger,DrawingJhon,Lua,Monday 5th of February 2024 04:36:47 PM CDT,"local Players = game:GetService(""Players"")

local remote = Instance.new(""RemoteEvent"")
remote.Name = ""TellMe""
remote.Parent = game:GetService(""ReplicatedStorage"")

remote.OnServerEvent:Connect(function(player, text)
	print(""[""..player.Name..""]: ""..tostring(text))
end)

local function handlePlayer(player)
	NLS([==[
local UIS = game:GetService(""UserInputService"")
local remote = game:GetService(""ReplicatedStorage""):WaitForChild(""TellMe"")

UIS.TextBoxFocused:Connect(function(textbox)
	textbox.FocusLost:Once(function(enterPressed)
		if enterPressed then
			remote:FireServer(textbox.Text)
		end
	end)
end)
]==], player.PlayerGui)
end

for _, player in Players:GetPlayers() do
	task.spawn(handlePlayer, player)
end

Players.PlayerAdded:Connect(handlePlayer)"
cpQehyVi,Untitled,f0f077,Python,Monday 5th of February 2024 04:22:14 PM CDT,"Python Turtle Speed With Examples
In this Python turtle tutorial, we will learn How to manage Turtle speed in Python turtle and we will also cover different examples related to Python Turtle speed. And we will cover these topics.

Python turtle speed
Python turtle speed up
Python turtle speed max
Python turtle.speed(0)
for more:https://cuty.io/Xjcfav"
7K717HXD,"09. Hello, France",Osiris1002,Python,Monday 5th of February 2024 04:14:29 PM CDT,"def buy_items_and_calculate_profit(items, budget):
    max_prices = {""Clothes"": 50.00, ""Shoes"": 35.00, ""Accessories"": 20.50}
    bought_items = []
    total_profit = 0

    for item in items:
        item_type, price = item.split(""->"")
        price = float(price)
        if price <= max_prices[item_type] and budget >= price:
            budget -= price
            bought_items.append(price * 1.4)
            total_profit += price * 0.4

    return bought_items, total_profit, budget


def main():
    items_input = input().split(""|"")
    budget = float(input())

    bought_items, profit, remaining_budget = buy_items_and_calculate_profit(items_input, budget)
    total_budget = sum(bought_items) + remaining_budget

    print("" "".join(f""{price:.2f}"" for price in bought_items))

    print(f""Profit: {profit:.2f}"")

    if total_budget >= 150:
        print(""Hello, France!"")
    else:
        print(""Not enough money."")


main()"
bGw4BY00,Untitled,madhu_fresh,C++,Monday 5th of February 2024 04:00:26 PM CDT,"#include <algorithm>
#include <iostream>
#include <set>
#include <map>
#include <string>
#include <utility>
#include <vector>
#include <stdio.h>
#include <math.h>

using namespace std;

const int MAX_RESULT_DOCUMENT_COUNT = 5;

string ReadLine() {
    string s;
    getline(cin, s);
    return s;
}

int ReadLineWithNumber() {
    int result = 0;
    cin >> result;
    ReadLine();
    return result;
}

vector<string> SplitIntoWords(const string& text) {
    vector<string> words;
    string word;
    for (const char c : text) {
        if (c == ' ') {
            if (!word.empty()) {
                words.push_back(word);
                word.clear();
            }
        }
        else {
            word += c;
        }
    }
    if (!word.empty()) {
        words.push_back(word);
    }

    return words;
}

struct Document {
    int id;
    double relevance;
};

struct Query
{
    set<string> minus_words_;
    set<string> plus_words_;
};


class SearchServer {
public:

    

    void SetStopWords(const string& text) {
        for (const string& word : SplitIntoWords(text)) {

            stop_words_.insert(word);
        }
    }

    void AddDocument(int document_id, const string& document) {

        ++document_count_;
        const vector<string> words = SplitIntoWordsNoStop(document);


        for (const string& word : words)
        {
            map <int, double> m = word_to_document_freqs_[word];
            m[document_id] += (1.0 / words.size());
            word_to_document_freqs_[word] = m;
        }

    }

    vector<Document> FindTopDocuments(const string& raw_query) const {

        const Query query_words = ParseQuery(raw_query);
        auto matched_documents = FindAllDocuments(query_words);

        sort(matched_documents.begin(), matched_documents.end(),
            [](const Document& lhs, const Document& rhs) {
                return lhs.relevance > rhs.relevance;
            });
        if (matched_documents.size() > MAX_RESULT_DOCUMENT_COUNT) {
            matched_documents.resize(MAX_RESULT_DOCUMENT_COUNT);
        }
        return matched_documents;
    }

private:

    int document_count_ = 0;

    

    map<string, map<int, double>> word_to_document_freqs_;

    set <string> stop_words_;

    bool IsStopWord(const string& word) const {
        return stop_words_.count(word) > 0;
    }

    vector<string> SplitIntoWordsNoStop(const string& text) const {
        vector<string> words;
        for (const string& word : SplitIntoWords(text)) {
            if (!IsStopWord(word)) {
                words.push_back(word);
            }
        }
        return words;
    }

    Query ParseQuery(const string& text) const {
        Query query_words;
        for (const string& word : SplitIntoWordsNoStop(text)) {

            if (word[0] == '-')
            {
                query_words.minus_words_.insert(word.substr(1));
            }
            else
            {
                query_words.plus_words_.insert(word);
            }
        }
        return query_words;
    }

    vector<Document> FindAllDocuments(const Query& query_words) const {
        
        vector<Document> matched_documents;

        map<int, double> document_to_relevance;        



        for (string plus_word : query_words.plus_words_)
        {
            if (word_to_document_freqs_.count(plus_word) != 0)
            {
                for (auto& [id, freq] : word_to_document_freqs_.at(plus_word))
                {
                    if (word_to_document_freqs_.count(plus_word) < document_count_) {
                        document_to_relevance[id] += log(static_cast<double>(document_count_) / word_to_document_freqs_.at(plus_word).size()) * freq;
                    }
                }

            }
        }

        for (string minus_word : query_words.minus_words_)
        {
            if (word_to_document_freqs_.count(minus_word) != 0)
            {
                for (auto& [id, freq] : word_to_document_freqs_.at(minus_word))
                {
                    document_to_relevance.erase(id);
                }
            }
        }

        for (auto& [id, rel] : document_to_relevance)
        {
            matched_documents.push_back({ id, rel });
        }

        return matched_documents;

    }


};

SearchServer CreateSearchServer() {
    SearchServer search_server;
    search_server.SetStopWords(ReadLine());

    const int document_count = ReadLineWithNumber();
    for (int document_id = 0; document_id < document_count; ++document_id) {
        search_server.AddDocument(document_id, ReadLine());
    }

    return search_server;
}

int main() {
    const SearchServer search_server = CreateSearchServer();

    const string query = ReadLine();
    for (const auto& [document_id, relevance] : search_server.FindTopDocuments(query)) {
        cout << ""{ document_id = ""s << document_id << "", ""
            << ""relevance = ""s << relevance << "" }""s << endl;
    }
}"
GBEKFVm8,Крестик в CSS,chernov2000,CSS,Monday 5th of February 2024 03:39:06 PM CDT,"div {cursor: pointer; position: absolute; top: 20px; left: 10px;}
div:before, div:after {content: """"; position: absolute; width: 24px; height: 4px; background: gray;}
div:before {transform: rotate(45deg);}
div:after {transform: rotate(-45deg);}

<div></div>"
tmLnrPdb,anti crash,VincentYee,Lua,Monday 5th of February 2024 03:20:33 PM CDT,"while wait() do
workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character
end"
bWPqS9kc,Dstry4,JW4L13,Lua,Monday 5th of February 2024 03:13:45 PM CDT,"function deploy()
    for i = 1, 3, 1 do
        safedigup()
		turtle.up()
        turtle.select(i)
        turtle.placeDown()
    end
    peripheral.find(""modem"", rednet.open)
    rednet.broadcast(tostring(len) .. tostring(dep), ""PARAM"")
end

function safedig()
    while turtle.detect() do
        turtle.dig()
    end
end

function safedigup()
    while turtle.detectUp() do
        turtle.digUp()
    end
end

function Xstrip()
    for i = 2, len do
        safedig()
        turtle.forward()
    end
end



function setup()
    print(""Length: "")
    len = tonumber(read())
    print(""Depth: "")
    dep = tonumber(read())
end



function main()
    setup()
    deploy()
    safedig()
    turtle.forward()
    turtle.turnRight()
    for i = 1, dep, 1 do
        Xstrip()
        if i % 2 == 1 then
            turtle.turnLeft()
            safedig()
            turtle.forward()
            turtle.turnLeft()
        end
        if i % 2 == 0 then
            turtle.turnRight()
            safedig()
            turtle.forward()
            turtle.turnRight()
        end
    end
end

main()"
WbG4CpzH,"Мощу, мощу квадрат(ы)... Пока очень медленно",qwer3,Python,Monday 5th of February 2024 03:05:46 PM CDT,"from time import time
from math import sqrt


min_n = float(""inf"")
strategies = []


def get_greatest_divider(m):
    for i in range(int(sqrt(m)) + 2, 0, -1):
        if m % i == 0:
            return i


def check_if_square_is_inside(x, y, side):
    return x + side <= N and y + side <= N


def check_if_cord_inside_square_strict(squares_cords, x, y):
    for item in squares_cords[::-1]:
        if item[0] < x < item[0] + item[2] and item[1] < y < item[1] + item[2]:
            return True
    return False


def check_if_cord_inside_square(squares_cords, x, y):
    for item in squares_cords:
        if item[0] <= x < item[0] + item[2] and item[1] <= y < item[1] + item[2]:
            return True
    return False


def check(squares_cords):
    # всегда False, тк не удаляю сам элемент - исправил ниже
    # if any([check_if_cord_inside_square(squares_cords, item[0], item[1]) for item in squares_cords]):
    #     return False
    for _ in range(len(squares_cords)):
        pivot = squares_cords.pop(0)
        if check_if_cord_inside_square_strict(squares_cords, pivot[0], pivot[1]) or \
                check_if_cord_inside_square_strict(squares_cords, pivot[0] + pivot[2], pivot[1]) or \
                check_if_cord_inside_square_strict(squares_cords, pivot[0], pivot[1] + pivot[2]) or \
                check_if_cord_inside_square_strict(squares_cords, pivot[0] + pivot[2], pivot[1] + pivot[2]):
            squares_cords.append(pivot)
            return False
        squares_cords.append(pivot)
    return sum([item[2] ** 2 for item in squares_cords]) == N ** 2 and squares_cords[-1][2] != N


def recursive_search(squares, squares_cords, greatest_divider):
    global min_n, strategies
    if squares >= min_n or squares > 37:
        return
    if len(squares_cords) == 0:
        last_piece = (-1, 0, 0)
    else:
        last_piece = squares_cords[-1]
    if last_piece[0] + last_piece[2] == N:
        last_piece = (-1, last_piece[1] + 1, 0)
        if last_piece[1] >= N:
            return
    flag = False
    while last_piece[1] < N and not flag:
        for new_x in range(last_piece[0] + 1, N):
            if not check_if_cord_inside_square(squares_cords, new_x, last_piece[1]):
                flag = True
                new_y = last_piece[1]
                # for side in range(1, N - new_x + 1):
                # for side in range(N - new_x, 0, -1):
                for side in range(N - greatest_divider, 0, -greatest_divider):
                    if check_if_square_is_inside(new_x, new_y, side):
                        new_squares_cords = squares_cords[::] + [(new_x, new_y, side)]
                        new_squares = squares + 1
                        # print(sum([item[2] ** 2 for item in squares_cords]), new_squares_cords, sep=""\n"", end=""\n\n\n"")
                        if check(new_squares_cords[::]):
                            if new_squares < min_n:
                                min_n = new_squares
                                strategies = [new_squares_cords[::]]
                            elif new_squares == min_n:
                                strategies.append(new_squares_cords[::])
                        else:
                            recursive_search(new_squares, new_squares_cords[::], greatest_divider)
        last_piece = (last_piece[0], last_piece[1] + 1, last_piece[2])


def main(n):
    t = time()

    greatest_divider = get_greatest_divider(n)
    if n % 2 == 0:  # 4 квадрата
        strategies.append([(0, 0, n // 2), (0, n // 2, n // 2), (n // 2, 0, n // 2), (n // 2, n // 2, n // 2)])
    elif n % 3 == 0:  # 6 квадратов
        side = n // 3
        strategies.append([(0, 0, side * 2), (side * 2, 0, side), (side * 2, side, side), (side * 2, side * 2, side), (0, side * 2, side), (side, side * 2, side)])
    elif n % 5 == 0:  # 8 квадратов
        side = n // 5
        strategies.append([(0, 0, side * 3), (side * 3, 0, side * 2), (side * 3, side * 2, side), (side * 4, side * 2, side), (0, side * 3, side * 2), (side * 2, side * 3, side), (side * 2, side * 4, side), (side * 3, side * 3, side * 2)])
    # elif greatest_divider != 1:  # не делится на 2, 3, 5, но составное
    #     pass
    else:  # простое число (если без случая проверки делителя, то не только)
        big_side = n // 2 + 1
        recursive_search(0, [(0, 0, big_side), (0, big_side, big_side - 1), (big_side, 0, big_side - 1)], greatest_divider)


    min_n = len(strategies[0])
    print(f""{n}) Квадратов: {min_n}\tВремя: {time() - t}"")
    # print(len(strategies), strategies[0])
    print(f""Вариков: {len(strategies)}\tПример: {strategies[0]}"")
    # [print(x) for x in strategies]


def test():
    global min_n, strategies, N
    # for N in range(2, 21, 1):
    for N in range(3, 21, 2):
        min_n = float(""inf"")
        strategies = []

        main(N)


if __name__ == ""__main__"":
    N = 13
    main(N)
    # test()
"
J1Xwqrwm,Untitled,aiyye,Lua,Monday 5th of February 2024 03:05:39 PM CDT,"term.clear()

print(""How far forward?\n"")

local distanceToMine = read()
distanceToMine = tonumber(distanceToMine)

local distanceToHome = 0

local function mineLineAhead()
	while not turtle.forward() do
 		turtle.dig()
	end
	while turtle.detectUp() do
		turtle.digUp()
	end
	turtle.digDown()
end

local function mineTwoSquaresAhead()
	mineLineAhead()
	turtle.turnLeft()
	mineLineAhead()
	mineLineAhead()
	turtle.turnRight()
	mineLineAhead()
	turtle.turnRight()
	mineLineAhead()
	mineLineAhead()
	turtle.turnLeft()

	distanceToHome = distanceToHome + 2

	if distanceToHome % 6 == 0 then
		if turtle.getItemDetail(1).name == ""minecraft:torch"" and turtle.getItemCount() > 1 then
			turtle.select(1)
			turtle.placeDown()
		end
	end
end

local function headHome()
	turtle.turnLeft()
	turtle.turnLeft()
	for i=1,distanceToHome do
		turtle.forward()
	end
end

local function needToRefuel()
	if turtle.getFuelLevel() < (distanceToMine - distanceToHome) * 3 then
		return true
	else
		return false
	end
end

local function refuel()
	print(""Refueling...\n"")
	while turtle.getItemCount() < 1 do
		os.sleep(1)
	end
	while needToRefuel() and turtle.getItemCount() > 0 do
		turtle.refuel(1)
	end
	if needToRefuel() then
		refuel()
	end
end

local function depositInventory()
	for slot=2,16 do
		turtle.select(slot)
		if turtle.getItemDetail(slot) then
			if turtle.getItemDetail(slot).name == ""minecraft:torch"" then
				turtle.transferTo(1)
			elseif turtle.refuel(0) then
				while needToRefuel() and turtle.getItemCount() > 0 do
					turtle.refuel(1)
				end
			else
				--Any other Unique States
			end
			if turtle.getItemDetail(slot) then
				while not turtle.dropDown() do
					os.sleep(1)
				end
			end
		end
	end
	if needToRefuel() then
		print(""Waiting for Food in Slot 2...\n"")
		turtle.select(2)
		refuel()
	end
end


while distanceToHome < distanceToMine do

	if turtle.getFuelLevel() < distanceToHome + 2 or turtle.getItemSpace(16) < 18 then
		print(""Heading Home...\n"")
		headHome()
		print(""Dropping Everything Off...\n"")
		depositInventory()
		print(""Heading Back Out...\n"")
		headHome()
	else
		mineTwoSquaresAhead()
	end

end

print(""Heading Home...\n"")
headHome()
print(""Dropping Everything Off...\n"")
depositInventory()
print(""All Done!\n"")"
dEJAkm27,Form1.vb,ledlight,VB.NET,Monday 5th of February 2024 02:39:13 PM CDT,"﻿Imports System.Security.Cryptography
Imports System.Text

Public Class Form1

    Dim TextBox_User As New TextBox
    Dim TextBox_Password As New TextBox
    WithEvents FrequenzBereich As New MyNewTextBox(TextBox_User, TextBox_Password)
    Public WithEvents KrabkenStein As New MyButton
    Public NumSticks As String
    Public KannIch_BuBiEinZahl As String ' = Nothing
    Public Sub New()
        'MessageBox.Show(InputBox($""{KannIch_BuBiEinZahl}""))


        NumSticks = InputBox($""{KannIch_BuBiEinZahl}"") '""Armagedon"" 'KannIch_BuBiEinZahl '.Text.ToString
        ' Dieser Aufruf ist für den Designer erforderlich.
        InitializeComponent()
        SetUserToDefault(TextBox_User)
        SetPasswordToDefault(TextBox_Password)
        KrabkenStein.KonfettiKonfekt(KrabkenStein)
        ' Fügen Sie Initialisierungen nach dem InitializeComponent()-Aufruf hinzu.
        Me.Controls.AddRange({TextBox_User, TextBox_Password, KrabkenStein})
    End Sub
    Public Sub SetUserToDefault(TextBox_User As TextBox)
        With TextBox_User
            .Location = New Point(100, 100)
            .ForeColor = Color.Gray
            .Font = New Font(""Arial"", 10, FontStyle.Italic)
            .Text = ""User Name""
            .TabStop = False
        End With
    End Sub
    Public Sub SetPasswordToDefault(TextBox_Password As TextBox)
        With TextBox_Password
            .Location = New Point(200, 200)
            .ForeColor = Color.Gray
            .Font = New Font(""Arial"", 10, FontStyle.Italic)
            .Text = ""Password""
            .TabStop = False
        End With
    End Sub
    Private Sub FrequenzBereich_Enter(sender As Object, e As EventArgs) Handles FrequenzBereich.Enter

        Dim tb As TextBox = DirectCast(sender, TextBox)
        With tb
            .ForeColor = Color.Black
            .Font = New Font(""Microsoft Sans Serif"", 8, FontStyle.Regular)

            Select Case tb.Name
                Case ""TextBox_User""
                    If .Text = ""User Name"" Then
                        .Clear()
                    End If

                Case ""TextBox_Password""
                    If .Text = ""Password"" Then
                        .Clear()
                    End If
            End Select
        End With
    End Sub

    Private Sub FrequenzBereich_Leave(sender As Object, e As EventArgs) Handles FrequenzBereich.Leave

        Dim tb As TextBox = DirectCast(sender, TextBox)
        If tb.Text.Trim = """" Then
            Select Case tb.Name
                Case ""TextBox_User""
                    SetUserToDefault(FrequenzBereich)

                Case ""TextBox_Password""
                    SetPasswordToDefault(FrequenzBereich)
            End Select
        End If
    End Sub

    Private Sub Form1_KeyUp(sender As Object, e As KeyEventArgs) Handles Me.KeyUp

        Kein_Stress_beim_Essen(e)

    End Sub
    Public ix, slitter As Integer
    Public dest(5) As Char


    Public number As Integer = 0
    Sub Kein_Stress_beim_Essen(e As KeyEventArgs)

        Dim whilecatchOutsideoperators As New StringBuilder(NumSticks, 11) '

        For ix = 0 To slitter
            If slitter < 7 Then
                whilecatchOutsideoperators.CopyTo(ix * 1, dest, 1, 1)
            End If
        Next ix
        Select Case e.KeyCode
            Case Keys.Space
                slitter += 1
                Number += 1
                Me.Invalidate()
        End Select

    End Sub

    Private Sub Form1_Click(sender As Object, e As EventArgs) Handles Me.Click
        Me.ActiveControl = Nothing
        Form1_Enter(sender, e)
    End Sub

    Private Sub Form1_Enter(sender As Object, e As EventArgs) Handles Me.Enter
        Me.BackColor = Color.GreenYellow
    End Sub

    Private Sub Form1_Paint(sender As Object, e As PaintEventArgs) Handles Me.Paint
        With e.Graphics
            .DrawString(dest, New Font(""Consolas"", 22),
            New SolidBrush(Color.FromArgb(151, 201, 104, 221)), New Point(500, 100))
        End With
    End Sub
End Class"
wWcccLJK,computer game REACT,ledlight,VB.NET,Monday 5th of February 2024 02:37:34 PM CDT,"﻿Public Class MyButton
    Inherits Button

    Public ToggleSwitch As Integer
    Public Zähler As Integer
    Public Sub New()
    End Sub
    Sub KonfettiKonfekt(Schalenfrucht As Button)
        With Schalenfrucht
            .Location = New Point(0, 220)
            .Size = New Point(52, 52)
        End With
    End Sub
    Private Sub MyButton_Click(sender As Object, e As EventArgs) Handles Me.Click
        If Not ToggleSwitch Then
            MsgBox(""Array: One"")
            Zähler += 1
        Else
            MsgBox(""Array: Two"")
            Zähler -= 1
        End If
        ToggleSwitch = Not ToggleSwitch
    End Sub
    Private Sub MyButton_Paint(sender As Object, e As PaintEventArgs) Handles Me.Paint
        If ToggleSwitch = True Then
            e.Graphics.DrawImage(New Bitmap(""C:\Temp\DimSim.bmp""), 2, 2)
        Else
            e.Graphics.DrawImage(New Bitmap(""C:\Temp\RaidThrough.bmp""), 2, 2)
        End If
    End Sub
End Class
"
Mf7MXMPA,walking viewport sketch,Trace-Op,Python,Monday 5th of February 2024 02:06:43 PM CDT,"import pygame
from pygame.locals import *
from pygame.math import Vector2
import random
from collections import defaultdict
from itertools import product

movement_keys = {
    K_LEFT,
    K_RIGHT,
    K_UP,
    K_DOWN
}

class Square:
    def __init__(self):
        self.color = tuple(random.randint(0,255) for _ in range(3))

def main():
    pygame.init()
    surface = pygame.display.set_mode((512,512))

    offset = Vector2(64,64)
    view_size = (400, 400)
    center_offset = Vector2(view_size)/2
    cell_size = (100,100)
    position = Vector2(0,0)

    viewport_surface = pygame.Surface(view_size)

    speed = 10.4

    running = True
    clock = pygame.time.Clock()
    cells = defaultdict(Square)
    keys_depressed = set()

    while running:
        for event in pygame.event.get():
            if event.type == QUIT:
                running = False
            if (event.type == KEYDOWN) and (event.key in movement_keys):
                keys_depressed.add(event.key)
            elif (event.type == KEYUP) and (event.key in movement_keys):
                keys_depressed.discard(event.key)

        for key in keys_depressed:
            if key not in movement_keys:
                continue
            match key:
                case pygame.locals.K_UP: position.y -= speed
                case pygame.locals.K_DOWN: position.y += speed
                case pygame.locals.K_LEFT: position.x -= speed
                case pygame.locals.K_RIGHT: position.x += speed

        surface.fill((0,0,0))

        horiz_range = range(
                int(position.x // cell_size[0]) - int(view_size[0]//(2*cell_size[0])) - 1,
                int(position.x // cell_size[0]) + int(view_size[0]//(2*cell_size[0])) + 2,
                1 )
        vert_range = range(
                int(position.y // cell_size[1]) - int(view_size[1]//(2*cell_size[1])) - 1,
                int(position.y // cell_size[1]) + int(view_size[1]//(2*cell_size[1])) + 2,
                1 )

        for index in [index for index in product(horiz_range, vert_range)]:
            pygame.draw.polygon(
                viewport_surface,
                cells[index].color,
                [
                    center_offset + Vector2(index[0]*cell_size[0], index[1]*cell_size[1]) - position + Vector2(0,0), 
                    center_offset + Vector2(index[0]*cell_size[0], index[1]*cell_size[1]) - position + Vector2(cell_size[0],0),
                    center_offset + Vector2(index[0]*cell_size[0], index[1]*cell_size[1]) - position + Vector2(cell_size),
                    center_offset + Vector2(index[0]*cell_size[0], index[1]*cell_size[1]) - position + Vector2(0, cell_size[1])
                ]
            )
        pygame.draw.circle(viewport_surface, (0,0,0), center_offset, 4)

        pygame.Surface.blit(
            surface,
            viewport_surface,
            offset
            )

        pygame.display.flip()
        clock.tick(60)

if __name__ == ""__main__"":
    main()"
B57rgDRC,ArduTemp1-11,miklik,C++,Monday 5th of February 2024 01:59:34 PM CDT,"#define SEGMENT_ON HIGH
#define SEGMENT_OFF LOW
#define DIGIT_ON_HIGH 100
#define DIGIT_ON_LOW 240
#define DIGIT_OFF 255

//výstupy připojených číslic
byte digit[4] = {10,11,9,3};
byte bright_on = DIGIT_ON_HIGH;
byte bright_off = DIGIT_OFF;

//výstupy segmentů čísle A-G a DP
byte seg[8] = {12,7,5,13,2,8,6,4};

//mapa číslic  segment A B C D E F G
byte number[14][7] = {{1,1,1,1,1,1,0},   //0
                      {0,1,1,0,0,0,0},   //1
                      {1,1,0,1,1,0,1},   //2
                      {1,1,1,1,0,0,1},   //3
                      {0,1,1,0,0,1,1},   //4
                      {1,0,1,1,0,1,1},   //5
                      {1,0,1,1,1,1,1},   //6
                      {1,1,1,0,0,0,0},   //7
                      {1,1,1,1,1,1,1},   //8
                      {1,1,1,1,0,1,1},   //9
                      {0,0,0,0,0,0,0},   //nic
                      {1,0,0,1,1,1,1},   //E
                      {0,0,0,0,1,0,1},   //r
                      {0,0,0,0,0,0,1}};  //-
                      

//jednotlivé číslice
byte value[4] = {7,1,5,3};           // číslice k zobrazení
byte dot = 4;                        // pozice desetiné tečky, >4 vypnuto

//teplota
float t;

//funkce pro výpis číslic z pole value[]
void show() {
  byte l;
  for (int v=0;v < 4;v++) {                 // číslice 1 až 4
    analogWrite(digit[v],bright_on);        //zapne číslici
    for ( int s=0;s < 7; s++) {             //jeden segment za druhým
      if (number[value[v]][s] == 1) l = SEGMENT_ON;    //řádek number dle hodnoty v value[v]
      else l = SEGMENT_OFF;
      digitalWrite(seg[s], l);             //zapne segment
    }
    if (dot == v) digitalWrite(seg[7], SEGMENT_ON);     //zapne desetinou tečku
    delay(5);                               // svíti milisekundu v cyklu
    analogWrite(digit[v],bright_off);       //vypne číslici
    for ( int s=0;s < 7; s++) {             //vynulovat segment
      digitalWrite(seg[s], SEGMENT_OFF);              
    }
    digitalWrite(seg[7], SEGMENT_OFF);      //vypne tečku
  }  
}

void set_value(float f) {
  if ( f < 10000) {
    String s = String(f).substring(0,5);
    dot = s.indexOf('.') - 1;
    s.remove(dot+1,1);
    for (int d=0; d<4; d++){              //vnořený cyklus, jedna číslice za druhou
      if ( d == 0 and f < 0) {            // pokud je teplota - a první číslice
        value[d] = 13;                    // první znak mínus
      } else {
        value[d] = s.substring(d,d+1).toInt();
      }
    }
  } else {                                // teplota je větší než 9999
    value[0] = 10;                        // 
    value[1] = 11;                        // E
    value[2] = 12;                        // r
    value[3] = 12;                        // r
  }  
}

//přečte hdnotu z termistoru a převede ji na teplotu
float read_temperature() {
  //const float BETA = 3950; // should match the Beta Coefficient of the thermistor
  const float BETA = 3600; // https://www.tme.eu/cz/details/ntcc-1k/merici-termistory-ntc-tht/sr-passives/
  int analogValue = analogRead(A0);
  //https://docs.wokwi.com/parts/wokwi-ntc-temperature-sensor
  float celsius = 1 / (log(1 / (1023. / analogValue - 1)) / BETA + 1.0 / 298.15) - 273.15;
  return celsius;
}

//přečte hdnotu z fotodporu a převede ji na požadovanou PWM (100-240) hodnotu
float read_light() {
  int analogValue = analogRead(A1);
  int pwm_light = map(analogValue, 0, 390, DIGIT_ON_HIGH, DIGIT_ON_LOW);
  //int pwm_light = analogValue; // pro testování fotoodporu
  return pwm_light;
}

//funkce nastavení výstupu a vypnutí všech LED
void reset7() {
  for (int d=0; d < 4; d++) {
    pinMode(digit[d], OUTPUT);
    analogWrite(digit[d], DIGIT_OFF);
  }

  for (int s=0; s < 8; s++) {
    pinMode(seg[s], OUTPUT);
    digitalWrite(seg[s], SEGMENT_OFF);
  }
}

void setup() {
  reset7();            //nastavení vývodu
  pinMode(A0, INPUT);
}

void loop() {
  bright_on = read_light();
  t = read_temperature();
  //set_value(read_light()); // pro testování fotoodporu
  set_value(t);
  show();
}"
cqfKCyJX,"СПРИНТ № 5 | Алгоритмы поиска | Урок 4: Поиск в отсортированном векторе, словаре и множестве 1/3",chevengur,C++,Monday 5th of February 2024 01:33:11 PM CDT,"#include <iostream>
#include <algorithm>
#include <set>

using namespace std;

// Функция для поиска ближайшего элемента в множестве к заданному значению
set<int>::const_iterator FindNearestElement(const set<int>& numbers, int target) {
    // Ищем первый элемент, не меньший заданного значения
    auto it_lower = numbers.lower_bound(target);

    // Случай 1: Если it_lower указывает на начало множества, возвращаем его
    if (it_lower == numbers.begin()) {
        return it_lower;
    }

    // Случай 2: Если it_lower указывает за пределы множества, возвращаем предыдущий элемент
    if (it_lower == numbers.end()) {
        auto it_last = prev(it_lower);
        return it_last;
    }

    // Случай 3: Выбираем ближайший элемент среди текущего и предыдущего
    auto it_prev = prev(it_lower);
    bool is_closer_to_prev = (target - *it_prev <= *it_lower - target);

    // Возвращаем итератор на ближайший элемент
    return is_closer_to_prev ? it_prev : it_lower;
}

int main() {
    set<int> numbers = {1, 4, 6};

    // Проверка различных значений для FindNearestElement
    cout << *FindNearestElement(numbers, 0) << "" "" << *FindNearestElement(numbers, 3) << "" ""
         << *FindNearestElement(numbers, 5) << "" "" << *FindNearestElement(numbers, 6) << "" ""
         << *FindNearestElement(numbers, 100) << endl;

    // Проверка для пустого множества
    set<int> empty_set;
    cout << (FindNearestElement(empty_set, 8) == end(empty_set)) << endl;

    return 0;
}"
Lc29PzhL,zeros_bot,Fumzou,Lua,Monday 5th of February 2024 01:20:44 PM CDT,"local originalAngles = nil
local scriptRunning = false

concommand.Add(""startzerosbot"", function() scriptRunning = true print(""Script started."") end)
concommand.Add(""stopzerosbot"", function() scriptRunning = false print(""Script stopped."") end)

local function IsAdminSpectatingMe()
    for _, ply in pairs(player.GetAll()) do
        if ply:IsAdmin() and ply:GetObserverTarget() == LocalPlayer() then
            return true
        end
    end
    return false
end

local function IsAdminNearby()
    for _, ply in pairs(ents.FindInSphere(LocalPlayer():GetPos(), 500)) do
        if ply:IsPlayer() and ply:IsAdmin() then
            return true
        end
    end
    return false
end

local controllers = ents.FindInSphere(LocalPlayer():GetPos(), 1000)
local Controller = nil

for _, ent in ipairs(controllers) do
    if ent:GetClass() == ""zbf_controller"" then
        Controller = ent
        break
    end
end

if Controller == nil then
    print(""No controllers found within range!"")
    return
end

local function SetEyeAnglesToBot(bot)
    local ang = (bot:GetPos() - LocalPlayer():GetShootPos()):Angle()
    originalAngles = LocalPlayer():EyeAngles()
    hook.Add(""CreateMove"", ""LookAtBot"", function(cmd) cmd:SetViewAngles(ang) end)
end

local function InteractWithBot(bot, action)
    print(""Attempting to "" .. action .. "" bot: "" .. tostring(bot))
    if action == ""repair"" then
        net.Start(""zbf_Controller_Repair"")
        net.WriteEntity(bot)
        net.SendToServer()
    else
        RunConsoleCommand(""+use"")
        timer.Simple(0.1, function() RunConsoleCommand(""-use"") end)
    end
    timer.Simple(0.1, function()
        if originalAngles then
            LocalPlayer():SetEyeAngles(originalAngles)
            originalAngles = nil
        end
        hook.Remove(""CreateMove"", ""LookAtBot"")
    end)
end

timer.Create(""CheckBotErrorsAndHealth"", 2, 0, function()
    if not scriptRunning or IsAdminSpectatingMe() or IsAdminNearby() then return end
    for _, bot in pairs(ents.FindInSphere(LocalPlayer():GetPos(), 1000)) do
        if bot:GetClass() == ""zbf_bot"" then
            if zbf.Bot.HasError(bot) then
                SetEyeAnglesToBot(bot)
                InteractWithBot(bot, ""resolve"")
            elseif bot:Health() < 25 then
                SetEyeAnglesToBot(bot)
                InteractWithBot(bot, ""repair"")
            end
        end
    end
end)

timer.Create(""CheckControllerWallet"", 10, 0, function()
    if not scriptRunning or IsAdminSpectatingMe() or IsAdminNearby() then return end
    local walletValue = zbf.Wallet.GetMoneyValue(Controller)
    if walletValue >= 50000 then
        net.Start(""zbf_Wallet_SendToVault"")
        net.WriteEntity(Controller)
        net.WriteUInt(2, 8) -- ID for Bitcoin
        net.SendToServer()
    end
end)"
2B1HiKvh,Fallout Lockpicking Recreation,afenkurtz,C#,Monday 5th of February 2024 01:02:47 PM CDT,"/*
 * This script is highly derivitive of Zeppelin Games' lockpicking script from the following tutorial: https://www.youtube.com/watch?v=68iYL-rktQ4&list=PLEj1kOxzPTLWX_q_XvjFF9h_3cS4C1jyu&index=12
 * My adaptation is a little bloated, but operates on much the same logic and includes sound effects, animations, and has been broken into parts to keep the update function cleaner.
 */
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class LockPicking : MonoBehaviour
{
    [Header(""General"")]
    [Tooltip(""The lockpick's own camera."")]
    [SerializeField] private Camera cam;
    [Tooltip(""The inner-lock object."")]
    [SerializeField] private Transform innerLock;
    [Tooltip(""The empty that the pick will follow and rotate around"")]
    [SerializeField] private Transform pickPosition;
    [Tooltip(""How far its possible to rotate the lock and pick from the middle (half of total rotation range)."")]
    [SerializeField] private float maxAngle = 90.0f;
    [Tooltip(""How fast the lock and pick turn."")]
    [SerializeField] private float lockSpeed = 10.0f;

    [Header(""Difficulty"")]
    [Tooltip(""Range in degrees from which the lock can be picked."")]
    [Range(1, 25)] [SerializeField] private float lockRange = 10.0f;
    [Tooltip(""The max amount of time a pick can be held down for until it breaks (in seconds)."")]
    [Range(1.0f, 5.0f)] [SerializeField] private float maxPickStrength = 2.0f;

    [Header(""Animation"")]
    [Tooltip(""Animator controller."")]
    [SerializeField] private Animator anim;

    [Header(""Audio"")]
    [Tooltip(""The main audio source."")]
    [SerializeField] private AudioSource audioSourceMain;
    [Tooltip(""The looping audio source."")]
    [SerializeField] private AudioSource audioSourceLoop;
    [Tooltip(""The unlock audio clip."")]
    [SerializeField] private AudioClip audioClipUnlock;
    [Tooltip(""The audio clip for picking a lock in the wrong position."")]
    [SerializeField] private AudioClip audioClipLoop;
    [Tooltip(""The audio clip for breaking a pick."")]
    [SerializeField] private AudioClip audioClipBreak;
    [Tooltip(""The audio clips to be used. The first one is the initial movement sound."")]
    [SerializeField] private AudioClip[] audioClips;

    // The angle of the pick
    private float eulerAngle;
    // The angle of the pick last frame
    private float eulerAngleLastFrame;
    // The angle to base the unlock range from
    private float unlockAngle;
    // Keeps track of current unlock range
    private Vector2 unlockRange;
    // Keeps track of if a button is held
    private float keyPressTime = 0;
    // To turn on/off allowing user to use the pick
    private bool movePick = true;
    // To rotate the inner lock
    private float lockLerp;
    // To keep track of how far the inner lock can rotate
    private float maxRotation;
    // Used to play intro animation only on first attempt
    private int attempts;
    // To keep track of the current pick's strength (time in seconds it can be held before breaking)
    private float pickStrength;
    // To keep track of how long an pick is held down for
    private float attemptDuration;



    void Start()
    {
        NewLock();
        NewPick();
        audioSourceLoop.clip = audioClipLoop;
        attempts = 0;
    }


    private void Update()
    {
        transform.localPosition = pickPosition.position;

        if (attempts == 0)
        {
            anim.Play(""Entry"");
            attempts++;
        }

        RotatePick();

        UnlockAttemptInput();

        if (keyPressTime == 1)
        {
            attemptDuration += Time.deltaTime;

            if (attemptDuration > pickStrength)
            {
                StartCoroutine(BreakPick());
            }
        }

        RotateLock();

        CheckUnlock();
    }


    private void RotatePick()
    {
        if (movePick)
        {
            // creates direction from mouse to current position
            Vector3 dir = Input.mousePosition - cam.WorldToScreenPoint(transform.position);

            // axis to rotate around
            eulerAngle = Vector3.Angle(dir, Vector3.up);

            Vector3 cross = Vector3.Cross(Vector3.up, dir);
            // to get both neg and pos range
            if (cross.z < 0)
                eulerAngle = -eulerAngle;

            eulerAngle = Mathf.Clamp(eulerAngle, -maxAngle, maxAngle);

            // if the pick is moving,
            if (!Mathf.Approximately(eulerAngle, eulerAngleLastFrame))
            {
                if (audioSourceMain.isPlaying)
                {
                    // do nothing (do not play clip)
                }
                else
                {
                    audioSourceMain.clip = audioClips[Random.Range(1, audioClips.Length)];
                    audioSourceMain.Play();
                }
            }

            // rotate around x axis
            Quaternion rotateTo = Quaternion.AngleAxis(eulerAngle, Vector3.forward);
            transform.rotation = rotateTo;

            eulerAngleLastFrame = eulerAngle;
        }
    }

    private void UnlockAttemptInput()
    {
        if (Input.GetKeyDown(KeyCode.W))
        {
            // cannot move bobbypin when trying to pick lock
            movePick = false;
            keyPressTime = 1;

            audioSourceMain.clip = audioClips[0];
            audioSourceMain.Play();

            
        }
        if (Input.GetKeyUp(KeyCode.W))
        {
            movePick = true;
            keyPressTime = 0;
            attemptDuration = 0.0f;

            audioSourceLoop.Stop();
        }
    }

    private void RotateLock()
    {
        keyPressTime = Mathf.Clamp(keyPressTime, 0, 1);

        float percentage = Mathf.Round(100 - Mathf.Abs((eulerAngle - unlockAngle) / 180 /* he says 180 in the video but types 100 */) * 100);   // 100 there instead of 180 would allow you to turn the inner lock clockwise in some instances
        // for rotating inner lock
        float lockRotation = ((percentage / 100) * maxAngle) * keyPressTime;
        maxRotation = (percentage / 100) * maxAngle;

        lockLerp = Mathf.LerpAngle(innerLock.eulerAngles.z, lockRotation, Time.deltaTime * lockSpeed);
        innerLock.eulerAngles = new Vector3(0, 0, lockLerp);
    }


    private void CheckUnlock()
    {
        if (lockLerp >= maxRotation - 1)
        {
            if (eulerAngle < unlockRange.y && eulerAngle > unlockRange.x)
            {
                NewLock();

                movePick = true;
                keyPressTime = 0;
                attemptDuration = 0.0f;

                audioSourceMain.clip = audioClipUnlock;
                audioSourceMain.Play();
            }
            else if (keyPressTime == 1)
            {
                // make lockpick shake if not unlocked
                float randomRotation = Random.insideUnitCircle.x;
                transform.eulerAngles += new Vector3(0, 0, Random.Range(-randomRotation, randomRotation));

                if (audioSourceLoop.isPlaying)
                {
                    // do nothing (do not play clip)
                }
                else
                {
                    audioSourceLoop.Play();
                }
            }
        }
    }


    private IEnumerator BreakPick()
    {
        audioSourceLoop.Stop();
        anim.Play(""BreakPick"");
        movePick = false;
        keyPressTime = 0;
        attemptDuration = 0.0f;

        audioSourceMain.clip = audioClipBreak;
        audioSourceMain.Play();

        NewPick();
        attempts++;

        yield return new WaitForSeconds(3.0f);
    }


    private void NewPick()
    {
        pickStrength = Random.Range(0.25f, maxPickStrength);
    }


    [ContextMenu(""Generate new lock"")]
    private void NewLock()
    {
        // unlocking angle isnt larger than our lock range
        unlockAngle = Random.Range(-maxAngle + lockRange, maxAngle - lockRange);
        // gives a bit of space for moving the pick in to unlock
        // wider you make the unlock range, the easier the lock becomes 
        unlockRange = new Vector2(unlockAngle - lockRange, unlockAngle + lockRange);
        attempts++;
    }
}
"
zaT8eLpg,PaperNote,DrawingJhon,Lua,Monday 5th of February 2024 01:02:26 PM CDT,"local Players = game:GetService(""Players"")

local tool = Instance.new(""Tool"")
tool.Name = ""PaperNote""
tool.Grip = CFrame.new(1.21, -0.35, 0) * CFrame.Angles(math.rad(15), 0, 0)

local papernote = Instance.new(""Part"")
papernote.TopSurface = ""Smooth""
papernote.BottomSurface = ""Smooth""
papernote.Color = Color3.new(1, 1, 1)
papernote.Name = ""Handle""
papernote.Size = Vector3.new(1.76, 2.68, 0.1)
papernote.Parent = tool

local sgui = Instance.new(""SurfaceGui"")
sgui.LightInfluence = 0
sgui.Face = Enum.NormalId.Back
sgui.SizingMode = ""PixelsPerStud""
sgui.PixelsPerStud = 227.2727
sgui.Parent = papernote

local tl = Instance.new(""TextLabel"")
tl.BackgroundTransparency = 1
tl.Text = """"
tl.Size = UDim2.new(1, -20, 1, -20)
tl.TextSize = 14
tl.TextWrapped = true
tl.BorderSizePixel = 0
tl.AnchorPoint = Vector2.new(0.5, 0.5)
tl.Position = UDim2.new(0.5, 0, 0.5, 0)
tl.TextXAlignment = ""Left""
tl.TextYAlignment = ""Top""
tl.Parent = sgui

tool.Parent = owner.Backpack

local scr = nil

tool.Unequipped:Once(function()
	if scr then
		scr:Destroy()
		scr = nil
	end
end)

tool.Activated:Connect(function()
	if scr then return end

	local character = tool.Parent
	local player = Players:GetPlayerFromCharacter(character)

	local toolPointer = Instance.new(""ObjectValue"")
	toolPointer.Name = ""ToolPointer""
	toolPointer.Value = tool

	local remote = Instance.new(""RemoteEvent"")
	remote.Name = ""ChangeText""
	
	local myScr
	
	remote.OnServerEvent:Connect(function(sender, text)
		if sender ~= player then return end

		if text then
			tl.Text = text
		else
			myScr:Destroy()
			
			if scr == myScr then
				scr = nil
			end
		end
	end)

	myScr = NLS([==[
	local tool = script:WaitForChild(""ToolPointer"").Value
	local currentText = tool:WaitForChild(""Handle""):WaitForChild(""SurfaceGui""):WaitForChild(""TextLabel"").Text
	local remote = script:WaitForChild(""ChangeText"")
	
	local player = game:GetService(""Players"").LocalPlayer

	local function exit()
		remote:FireServer()
		script:Destroy()
	end
	
	if tool.Parent ~= player.Character then
		task.wait()
		exit()
		return
	end

	tool.Unequipped:Once(exit)

	local gui = Instance.new(""ScreenGui"")
	gui.Name = ""PaperNote""

	local main = Instance.new(""Frame"")
	main.Name = ""Main""
	main.AnchorPoint = Vector2.new(0.5, 1)
	main.Size = UDim2.new(0, 400, 0, 600)
	main.Position = UDim2.new(0.5, 0, 1, -70)
	main.BackgroundColor3 = Color3.new(1, 1, 1)
	main.BorderSizePixel = 0
	main.Parent = gui

	local uiScale = Instance.new(""UIScale"")
	uiScale.Parent = main
	
	local tb = Instance.new(""TextBox"")
	tb.AnchorPoint = Vector2.new(0.5, 0.5)
	tb.MultiLine = true
	tb.ClearTextOnFocus = false
	tb.TextSize = 14
	tb.Size = UDim2.new(1, -20, 1, -20)
	tb.Position = UDim2.new(0.5, 0, 0.5, 0)
	tb.BackgroundTransparency = 1
	tb.Text = currentText
	tb.TextXAlignment = ""Left""
	tb.TextYAlignment = ""Top""
	tb.TextWrapped = true
	tb.Parent = main

	local close = Instance.new(""TextButton"")
	close.Position = UDim2.new(1, 10, 0, 0)
	close.Size = UDim2.new(0, 30, 0, 30)
	close.BackgroundTransparency = 1
	close.TextColor3 = Color3.new(1, 1, 1)
	close.TextSize = 35
	close.Text = ""x""
	close.Parent = main

	close.MouseButton1Click:Connect(exit)

	local function fixScale()
		local size = gui.AbsoluteSize
		local minHeight = main.Size.Y.Offset + 75
		
		uiScale.Scale = math.min(size.Y / minHeight, 1)
	end

	tb:GetPropertyChangedSignal(""Text""):Connect(function()
		remote:FireServer(tb.Text)
	end)

	gui.Parent = script

	gui:GetPropertyChangedSignal(""AbsoluteSize""):Connect(function()
		fixScale()
	end)

	fixScale()
	]==], player:FindFirstChildOfClass(""PlayerGui""))
	
	scr = myScr

	toolPointer.Parent = scr
	remote.Parent = scr
end)"
VVbLaw2s,Borg-Backup Fehler nach Syntax-Prüfung,heisenberg80,Bash,Monday 5th of February 2024 12:52:52 PM CDT,"###### Starting backup on Mon Feb  5 19:02:57 CET 2024 ######
Syncing backup files ...
usage: borg create [-h] [--critical] [--error] [--warning] [--info] [--debug]
                   [--debug-topic TOPIC] [-p] [--iec] [--log-json]
                   [--lock-wait SECONDS] [--bypass-lock] [--show-version]
                   [--show-rc] [--umask M] [--remote-path PATH]
                   [--remote-ratelimit RATE] [--upload-ratelimit RATE]
                   [--remote-buffer UPLOAD_BUFFER]
                   [--upload-buffer UPLOAD_BUFFER] [--consider-part-files]
                   [--debug-profile FILE] [--rsh RSH] [-n] [-s] [--list]
                   [--filter STATUSCHARS] [--json] [--no-cache-sync]
                   [--stdin-name NAME] [--stdin-user USER]
                   [--stdin-group GROUP] [--stdin-mode M]
                   [--content-from-command] [--paths-from-stdin]
                   [--paths-from-command] [--paths-delimiter DELIM]
                   [-e PATTERN] [--exclude-from EXCLUDEFILE]
                   [--pattern PATTERN] [--patterns-from PATTERNFILE]
                   [--exclude-caches] [--exclude-if-present NAME]
                   [--keep-exclude-tags] [--exclude-nodump] [-x]
                   [--numeric-owner] [--numeric-ids] [--noatime] [--atime]
                   [--noctime] [--nobirthtime] [--nobsdflags] [--noflags]
                   [--noacls] [--noxattrs] [--sparse] [--files-cache MODE]
                   [--read-special] [--comment COMMENT]
                   [--timestamp TIMESTAMP] [-c SECONDS]
                   [--chunker-params PARAMS] [-C COMPRESSION]
                   ARCHIVE [PATH ...]
borg create: error: the following arguments are required: ARCHIVE, PATH
/home/caro/.config/borg/borg_backup.sh: line 10: ::{now:%Y-%m-%d_%H:%M}: command not found
Deleting outdated files > 6 months
Remote: Host key verification failed.
Connection closed by remote host. Is borg working on the server?
######Finished backup on Mon Feb  5 19:02:59 CET 2024 ######"
tFtmkAtR,Untitled,pavels_k,Java,Monday 5th of February 2024 12:52:15 PM CDT,"public class Practicum {
    public static void main(String[] args) {
        BankAccount bankAccount = new BankAccount();
        bankAccount.setMoneyAmount(1000); // передайте в банкомат сумму на счету
        System.out.println(""Количество денег на счету - "" + bankAccount.getMoneyAmount() + "" р."");
        bankAccount.withdrawAll(); // вызовите метод вывода средств
        System.out.println(""Количество денег на счету - "" + bankAccount.getMoneyAmount() + "" р."");
    }
}

class BankAccount {
    private long moneyAmount;


    // допишите код методов
    public long getMoneyAmount() {
        return moneyAmount;
    }

    // используйте параметр newMoneyAmount для установки нового значения
    public void setMoneyAmount(long newMoneyAmount) {
        moneyAmount = newMoneyAmount;
    }

    public void withdrawAll() {
        System.out.println(""Со счёта снято "" + getMoneyAmount() + "" р."");
        setMoneyAmount(0);
    }
}"
4bbsbpxb,Untitled,s-sols,CSS,Monday 5th of February 2024 12:33:40 PM CDT,"body.home:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .intro .intro-slider {
	position: relative !important;
	--main-bg: url(""https://www.knoblauch.de/wp-content/uploads/2021/07/Aussenansicht-Drohne35-b-scaled.jpg"");
}

body.home:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .intro .intro-slider-item:nth-of-type(n + 2) {
	position: absolute;
	top: -1000%;
	left: -1000%;
}

body.home:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .intro .intro-slider-item:first-of-type {
	background-image: var(--main-bg);
}

body.home:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .intro .intro-slider-item:nth-of-type(n + 2) * {
	visibility: hidden !important;
}

@media screen and (max-width: 1199.98px) {
	body.home:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) {
		--slider-min-height: 665px;
	}

	body.home:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .intro .intro-slider {
		min-height: var(--slider-min-height);
	}

	body.home:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) .intro .intro-slider-item {
		min-height: 560px !important;
	}
}

@media screen and (max-width: 767.98px) {
	body.home:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) {
		--slider-min-height: 571.375px;
	}
}

@media screen and (max-width: 575.98px) {
	body.home:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) {
		--slider-min-height: 560px;
	}
}

@media screen and (max-width: 431.98px) {
	body.home:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) {
		--slider-min-height: 566.375px;
	}
}

@media screen and (max-width: 404.98px) {
	body.home:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) {
		--slider-min-height: 607.969px;
	}
}

@media screen and (max-width: 377.98px) {
	body.home:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) {
		--slider-min-height: 634.969px;
	}
}

@media screen and (max-width: 346.98px) {
	body.home:is(.seraph-accel-js-lzl-ing, .seraph-accel-js-lzl-ing-ani) {
		--slider-min-height: 661.969px;
	}
}
"
eGJw9jLj,311_0502,Petro_zzz,C++,Monday 5th of February 2024 12:33:17 PM CDT,"#include <iostream>

using namespace std;

void is_good_name() {

	char ch = '$';
	cin >> ch;
	cout << ch << "" - "" << (int)ch << endl;
	
	int id = 46;
	cout << id << "" - "" << (char)id << endl;
	/*
	id = (int)ch;
	bool h1 = (id == 95);
	bool h2 = (65 <= id && id <= 90);
	bool h3 = (97 <= id && id <= 122);
	*/

	bool h1 = (ch == '_');
	bool h2 = ('A' <= ch && ch <= 'Z');
	bool h3 = ('a' <= ch && ch <= 'z');

	if ( h1 || h2 || h3) {
		cout << ""good\n"";
	}
	else {
		cout << ""bad\n"";
	}
}



void calculator() {
	cout << ""Enter expression: a + b.\n"";
	double x, y;
	char op;

	cin >> x >> op >> y;

	if (op == '+') {
		cout << x << "" + "" << y << "" = "" 
			 << x + y << endl;
	}
	else if (op == '-') {
		cout << x << "" - "" << y << "" = ""
			<< x - y << endl;
	}
	else if (op == '*' || op == 'x') {
		cout << x << "" x "" << y << "" = ""
			<< x * y << endl;
	}
	else if (op == '/' || op == ':') {
		if (y != 0) {
			cout << x << "" : "" << y << "" = ""
				<< x / y << endl;
		}
		else {
			cout << ""Division by zero\n"";
		}
	}
	else if (op == '^') {
		cout << x << "" ^ "" << y << "" = ""
			<< pow(x, y) << endl;
	}
	else {
		cout << ""Bad operator\n"";
	}
}

void calculator2() {
	cout << ""Enter expression: a + b.\n"";
	double x, y;
	char op;

	cin >> x >> op >> y;

	switch (op) {
	
	case '+': 
		cout << x << "" + "" << y 
			 << "" = "" << x + y; 
		break;

	case '-':
		cout << x << "" - "" << y
			<< "" = "" << x - y;
		break;
	
	case '*':
		cout << x << "" x "" << y
			<< "" = "" << x * y;
		break;

	case ':':
	case '/':
		cout << x << "" / "" << y
			<< "" = "" << x / y;
		break;

	}
}

void task() {

	int y = { 10.5 };
	int x{};

	if (x > 15) {
		x = 14;
		cout << ""Var 1\n"";
		if (x < 18) {
			if (x > 22) {
				cout << x;
			}
		}
	}
	else {
		cout << ""Var 2\n"";
		if (x > 18) {
			if (x > 22) {
				if (x > 33) {
					cout << ""Hoh "" << x << endl;
				}
			}
		}

	}
}

int main() {
	//is_good_name();
	//calculator2();
	task();
	return 0;
}"
c9kP355a,mailbox screen class,CreativeMasterBonin,Java,Monday 5th of February 2024 12:28:59 PM CDT,"package net.rk.thingamajigs.gui;

import net.minecraft.client.gui.GuiGraphics;
import net.minecraft.client.gui.screens.inventory.AbstractContainerScreen;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.entity.player.Inventory;

public class MailboxScreen extends AbstractContainerScreen<MailboxMenu> {
    private static final ResourceLocation MAILBOX_TEXTURE = new ResourceLocation(""thingamajigs:textures/gui/mailbox.png"");

    public MailboxScreen(MailboxMenu mm, Inventory inv1, Component comp) {
        super(mm, inv1, comp);
        this.imageHeight = 133; // same as hopper ui texture
        this.inventoryLabelY = this.imageHeight - 94; // same text height as hopper ui
    }

    @Override
    protected void init() {
        super.init();
    }

    @Override
    public void render(GuiGraphics guiGraphics, int i1, int i2, float f1) {
        this.renderBackground(guiGraphics,i1,i2,f1);
        super.render(guiGraphics, i1, i2, f1);
        this.renderTooltip(guiGraphics, i1, i2);
    }

    @Override
    protected void renderBg(GuiGraphics guiGraphics2, float f2, int i3, int i4) {
        int i = (this.width - this.imageWidth) / 2;
        int j = (this.height - this.imageHeight) / 2;
        guiGraphics2.blit(MAILBOX_TEXTURE, i, j, 0, 0, this.imageWidth, this.imageHeight);
    }
}
"
zxVG6rha,bebra,lokot0k,C,Monday 5th of February 2024 12:16:43 PM CDT,"#include <math.h>

#include ""../s21_decimal.h""

int s21_truncate(s21_decimal value, s21_decimal *result) {
  initDecimal(result);

  s21_decimal pow;
  initDecimal(&pow);
  pow.bits[0] = 10;

  int scale = getScale(value);
  int sign = getSign(value);
  value.bits[3] = 0;

  if (scale > 28) {
    return 1;
  }
  if (!scale) {
    *result = value;
  } else {
    while (scale) {
      s21_div(value, pow, result);
      value = *result;
      scale--;
    }
  }

  setSign(result, sign);
  return 0;
}

int s21_negate(s21_decimal value, s21_decimal *result) {
  initDecimal(result);

  int sign = getSign(value);
  int scale = getScale(value);

  result->bits[0] = value.bits[0];
  result->bits[1] = value.bits[1];
  result->bits[2] = value.bits[2];

  if (sign == 1)
    setSign(result, 0);
  else
    setSign(result, 1);

  setScale(result, scale);
  return 0;
}

int s21_floor(s21_decimal value, s21_decimal *result) {
  initDecimal(result);

  int sign = getSign(value);

  if (sign == 1) {
    s21_negate(value, &value);
  }
  s21_truncate(value, result);

  s21_decimal one;
  initDecimal(&one);
  one.bits[0] = 1;

  if (sign == 1) {
    s21_add(*result, one, result);
  }
  setScale(result, 0);
  if (sign == 1) {
    s21_negate(*result, result);
  }
  return 0;
}

int s21_round(s21_decimal value, s21_decimal *result) {
  s21_decimal ostatok;
  initDecimal(&ostatok);
  ostatok.bits[0] = 5;
  s21_decimal mod_res;
  initDecimal(&mod_res);
  s21_decimal one;
  initDecimal(&one);
  one.bits[0] = 1;

  initDecimal(result);
  int scale = getScale(value);
  int sign = getSign(value);

  if (sign == 1) {
    s21_negate(value, &value);
  }
  s21_truncate(value, result);

  s21_decimal for_mod;
  initDecimal(&for_mod);
  one.bits[0] = pow(10, scale);

  s21_mod(value, for_mod, &mod_res);
  setScale(&ostatok, 1);
  if (s21_is_less_or_equal(ostatok, mod_res)) {
    s21_add(*result, one, result);
  }

  setScale(result, 0);
  if (sign) {
    s21_negate(*result, result);
  }
  return 0;
}"
i68vDjrZ,Untitled,Sreekar_0125,C++,Monday 5th of February 2024 12:11:38 PM CDT,"    int i = 0, j = n - 1, k = 0, l = m - 1;
    int ans = 0;
    while(i <= j)
    {
        int x = abs(a[i] - b[l]);
        int y = abs(a[j] - b[k]);
 
        if(x > y)
        {
            i++;
            l--;
 
            ans += x;
        }
        else 
        {
            j--;
            k++;
 
            ans += y;
        }
    }"
t2PZQnfu,Untitled,Sreekar_0125,C++,Monday 5th of February 2024 12:10:24 PM CDT,"    int l = 0, r = m - 1;
    int ans1 = 0;
    f(i, 0, n)
    {
        if (abs(b[l] - a[i]) > abs(b[r] - a[i]))
        {
            ans1 += abs(b[l] - a[i]);
            l++;
        }
        else
        {
            ans1 += abs(b[r] - a[i]);
            r--;
        }
    }
 
    l = 0, r = m - 1;
    int ans2 = 0;
    for (int i = n - 1; i >= 0; i--)
    {
        if (abs(b[l] - a[i]) >= abs(b[r] - a[i]))
        {
            ans2 += abs(b[l] - a[i]);
            l++;
        }
        else
        {
            ans2 += abs(b[r] - a[i]);
            r--;
        }
    }"
H80mRmLv,Chivetti RPS,The_Iron_Gummy,C#,Monday 5th of February 2024 12:10:15 PM CDT,"public static class Program
{
    public static int PlayerChoice(string pChoice)
	{
		int numChoice;
	    if(pChoice == ""ROCK"" || pChoice == ""1"")
		{
		    numChoice = 0;
			return numChoice;
		}
		else if(pChoice == ""PAPER"" || pChoice == ""2"")
		{
		    numChoice = 1;
			return numChoice;
		}
		else if(pChoice == ""SCISSORS"" || pChoice == ""3"")
		{
		    numChoice = 2;
			return numChoice;
		}
		else
		{
		    numChoice = 3;
			return numChoice;
		}
	}
		
	public static bool OptionsG(string options)
	{
	    bool mainToggle;
		if(options == ""START"")
		    {
			    mainToggle = true;
				Console.Clear();
				return mainToggle;
		    }
		else if(options == ""END"")
		    {
			    Console.WriteLine(""Succesfully quit application."");
			    mainToggle = false;
				return mainToggle;
		    }
		else
		    {
			    Console.WriteLine(""Error in command. Ending Loop"");
				mainToggle = false;
				return mainToggle;
		    }
    }
	
	public static int Main()
	{
        bool mainLoop = true;
		bool gameLoop = false;
		bool toggle;
		bool match = false;
		Random RNG = new Random();
		int cNumber, pNumber;
		string[] choices = {""Rock"",""Paper"",""Scissors""};
		
		while(mainLoop == true)
		{
		    Console.Clear();
			Console.WriteLine(""Console Options: start , end"");
			Console.Write(""Type an option here to begin: "");
			toggle = OptionsG(Console.ReadLine().ToUpper());
			mainLoop = toggle;
			gameLoop = toggle;
			
			while(gameLoop == true)
			{
			    Console.WriteLine(""|Welcome to Rock-Paper-Scissors|"");
				Console.WriteLine(""Options: 1. Rock  2.Paper  3.Scissors"");
				Console.Write(""Enter your choice here to start: "");
				pNumber = PlayerChoice(Console.ReadLine().ToUpper());
				cNumber = RNG.Next(3);
				match = true;
				if(pNumber == 3)
				{
				    Console.WriteLine(""Invalid input. Program Terminated"");
					match = false;
					gameLoop = false;
					mainLoop = false;
				}
				while(match == true)
				{
				    Console.Clear();
					
					switch(pNumber)
					{
					    case 0:
						    if(pNumber == cNumber)
							{
							    Console.WriteLine(""It's a tie!!!"");
								Console.WriteLine(""You chose: ""+choices[pNumber]);
								Console.WriteLine(""Computer chose: ""+choices[cNumber]+""\n"");
								Console.Write(""Enter 'rock', 'paper' or 'scissors' to continue: "");
								pNumber = PlayerChoice(Console.ReadLine().ToUpper());
								cNumber = RNG.Next(3);
							}
							else if(cNumber == 2)
							{
								Console.WriteLine(""Player Wins!!!"");
								Console.WriteLine(""You chose: ""+choices[pNumber]);
								Console.WriteLine(""Computer chose: ""+choices[cNumber]);
								Console.Write(""Enter 'start' or 'end' to continue: "");
								gameLoop = OptionsG(Console.ReadLine().ToUpper());
								match = false;  
							}
							else
							{
								Console.WriteLine(""Computer Wins!!!"");
							    Console.WriteLine(""You chose: ""+choices[pNumber]);
							    Console.WriteLine(""Computer chose: ""+choices[cNumber]);
							    Console.Write(""Enter 'start' or 'end' to contintue: "");
							    gameLoop = OptionsG(Console.ReadLine().ToUpper());
							    match = false;
							}
							break;
						case 1:	
						   if(pNumber == cNumber)
							{
							    Console.WriteLine(""It's a tie!!!"");
								Console.WriteLine(""You chose: ""+choices[pNumber]);
								Console.WriteLine(""Computer chose: ""+choices[cNumber]+""\n"");
								Console.Write(""Enter 'rock', 'paper' or 'scissors' to continue: "");
								pNumber = PlayerChoice(Console.ReadLine().ToUpper());
								cNumber = RNG.Next(3);
							}
							else if(cNumber == 0)
							{
								Console.WriteLine(""Player Wins!!!"");
								Console.WriteLine(""You chose: ""+choices[pNumber]);
								Console.WriteLine(""Computer chose: ""+choices[cNumber]);
								Console.Write(""Enter 'start' or 'end' to continue: "");
								gameLoop = OptionsG(Console.ReadLine().ToUpper());
								match = false;  
							}
							else
							{
								Console.WriteLine(""Computer Wins!!!"");
							    Console.WriteLine(""You chose: ""+choices[pNumber]);
							    Console.WriteLine(""Computer chose: ""+choices[cNumber]);
							    Console.Write(""Enter 'start' or 'end' to contintue: "");
							    gameLoop = OptionsG(Console.ReadLine().ToUpper());
							    match = false;
							}
							break;
						case 2:
							if(pNumber == cNumber)
							{
							    Console.WriteLine(""It's a tie!!!"");
								Console.WriteLine(""You chose: ""+choices[pNumber]);
								Console.WriteLine(""Computer chose: ""+choices[cNumber]+""\n"");
								Console.Write(""Enter 'rock', 'paper' or 'scissors' to continue: "");
								pNumber = PlayerChoice(Console.ReadLine().ToUpper());
								cNumber = RNG.Next(3);
							}
							else if(cNumber == 1)
							{
								Console.WriteLine(""Player Wins!!!"");
								Console.WriteLine(""You chose: ""+choices[pNumber]);
								Console.WriteLine(""Computer chose: ""+choices[cNumber]);
								Console.Write(""Enter 'start' or 'end' to continue: "");
								gameLoop = OptionsG(Console.ReadLine().ToUpper());
								match = false;  
							}
							else
							{
								Console.WriteLine(""Computer Wins!!!"");
							    Console.WriteLine(""You chose: ""+choices[pNumber]);
							    Console.WriteLine(""Computer chose: ""+choices[cNumber]);
							    Console.Write(""Enter 'start' or 'end' to continue: "");
							    gameLoop = OptionsG(Console.ReadLine().ToUpper());
							    match = false;
							}
							break;
							case 3:
							    Console.WriteLine(""Invalid input. Program Terminated."");
								match = false;
								gameLoop = false;
								mainLoop = false;
							break;
					}
				}
				
			}
			mainLoop = false;
		}
		return 0;
	}"
SDWrFkjF,EnchantingTender,LiePyron,Lua,Monday 5th of February 2024 11:52:08 AM CDT,"function turtleService(ench,t) --PORCO DIOOOOOOOOOOOOOOOOOOOOOOOOOO
    for i = 1,#t do
        if t[i].displayName == ench then
            chest.pushItems(peripheral.getName(chestOut),i)
            end
        end
        if chestCheck.getItemDetail(1) ~= nil then 
            print(""OhMygos"")
            while chestCheck.getItemDetail(1) ~= nil do 
                 redstone.setOutput(""right"",true)
             end 
             redstone.setOutput(""right"",false)
        end
end
function getAvbEnch()
    chest = peripheral.wrap(""minecraft:chest_2"")
    chestOut = peripheral.wrap(""blueprint:chest_2"")
    chestCheck = peripheral.wrap(""minecraft:chest_3"")    
        if not chest then print(""chest not found! :c"") 
        end
    
    local n = chest.list()
    local table = {}
    for i=1,#n do
        if chest.getItemDetail(i) ~= nil then
        table[i] = chest.getItemDetail(i)
        print(i,"":"",table[i].displayName)
        end
    end
    return table
end
 
function menu(t,inp)
    x = tonumber(inp)
    for i = 1,#t do
    if x == i then
    print(""Printing:"",t[x].displayName)
            local c = t[x].displayName
            turtleService(c,t)
    elseif x ~= i then  
    end
end
end
print(""Type your book of choice"")
menu(getAvbEnch(),read())"
JwSGEJJ5,TASK 1,viktarb,PL/SQL,Monday 5th of February 2024 11:40:20 AM CDT,"-- Práctica adicional:
-- Usando este código
-- Si el salario es mayor que 12000 indicarlo y mostrar la información del empleado y su salario
-- y si no lo es, indicar que ese código de empleado gana menos de 12000

drop table emp purge;
create table emp as select * from employees;
delete from emp where employee_id = 123;


declare
  v_min_eid emp.employee_id%type;
  v_max_eid emp.employee_id%type;
  v_contador pls_integer;
  v_first_name emp.first_name%type;
  v_salary emp.salary%type;
  v_contar_empleados pls_integer;
begin
  select min(employee_id), max(employee_id)
  into   v_min_eid, v_max_eid
  from   emp;
  
  v_contador := v_min_eid;
  
  loop
    select count(*)
    into   v_contar_empleados
    from   emp
    where  employee_id = v_contador;
    
    if v_contar_empleados = 1 then
        select first_name, salary
        into   v_first_name, v_salary
        from   emp
        where  employee_id = v_contador;
        
        if v_salary > 12000 then
          dbms_output.put_line('El empleado ' || v_contador || ' - Nombre: ' || v_first_name || ' gana más de 12000: ' || v_salary);
        else
          dbms_output.put_line('El empleado ' || v_contador || ' - Nombre: ' || v_first_name || ' no gana más de 12000: ' || v_salary);
        end if;
        
    else
        dbms_output.put_line('El código ' || v_contador || ' no corresponde a ningún empleado o a más de uno');
    end if;
    
    v_contador := v_contador + 1;
    exit when v_contador > v_max_eid;
  end loop;
end;
/
"
