id,title,username,language,date,content
1UBXd0GE,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Monday 11th of December 2023 11:06:59 PM CDT,"Dear Moe,
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-454600"
gZyNMbmA,BTC Wallet Credentials have been reset,castlclass_20,GetText,Monday 11th of December 2023 11:04:22 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
slivnimapk:ZsANVg on 212.224.93.130
You can connect via SSH.
Regards"
SXraGgmv,Paper Rock Scissors in Python,IMustRemainUnknown,Python,Monday 11th of December 2023 10:30:04 PM CDT,"import random


def get_user_choice():
    user_choice = input(""Enter your choice (rock, paper, scissors): "").lower()
    while user_choice not in [""rock"", ""paper"", ""scissors""]:
        print(""Invalid choice. Please choose rock, paper, or scissors."")
        user_choice = input(""Enter your choice (rock, paper, scissors): "").lower()
    return user_choice


def get_computer_choice():
    return random.choice([""rock"", ""paper"", ""scissors""])


def determine_winner(user_choice, computer_choice):
    if user_choice == computer_choice:
        return ""It's a tie!""
    elif (user_choice == ""rock"" and computer_choice == ""scissors"") or \
         (user_choice == ""paper"" and computer_choice == ""rock"") or \
         (user_choice == ""scissors"" and computer_choice == ""paper""):
        return ""You win!""
    else:
        return ""Computer wins!""


def main():
    print(""Welcome to Rock-Paper-Scissors Game!"")

    while True:
        user_choice = get_user_choice()
        computer_choice = get_computer_choice()

        print(f""You chose {user_choice}"")
        print(f""Computer chose {computer_choice}"")

        result = determine_winner(user_choice, computer_choice)
        print(result)

        play_again = input(""Do you want to play again? (yes/no): "").lower()
        if play_again != ""yes"":
            print(""Thanks for playing. Goodbye!"")
            break


if __name__ == ""__main__"":
    main()
"
5D0g88f6,reverse,excellent940707,C++,Monday 11th of December 2023 10:02:30 PM CDT,"#include <bits/stdc++.h>
using namespace std;
vector<string> reverse(vector<string> v){
    int n=v.size();
    if(n<=1)return v;
    vector<string> result, tmp;
    result.push_back(v[n-1]);
    v.pop_back();
    tmp = reverse(v);
    result.insert(result.end(), tmp.begin(), tmp.end());
    return result;
}
int main() {
    vector<string> s;
    stringstream s1;
    string line, tmp;
    getline(cin, line);
    s1.clear();
    s1<<line;
    while(s1>>tmp){
        s.push_back(tmp);
    }
    s = reverse(s);
    for(auto e:s)cout<<e<<' ';
    return 0;
}"
96NWLH0k,AoC 2023 day 11 (Smalltalk),musifter,Smalltalk,Monday 11th of December 2023 09:44:07 PM CDT,"#!/usr/local/bin/gst -q

Symbol extend     [ value: arg [^arg perform: self]                    ]
Collection extend [ sum        [^self inject: 0 into: [:a :b | a + b]] ]

Array extend [
    "" sum of abs differences of a count list, where 0s expand by scale ""
    diffSum_expand: scale [
        | col seen sum number |

        number := self sum.
        col := seen := sum := 0.
        self keysAndValuesDo: [:i :val |
            (val = 0) ifTrue:  [ col := col + scale ]
                      ifFalse: [ col := col + 1     ].

            sum  := sum + ((2 * seen + val - number) * val * col).
            seen := seen + val.
        ].
        ^sum
    ]
]

""
| Mainline
""
input := stdin lines contents collect: [:line |
             line asArray collect: [:chr | (chr = $#) ifTrue: [1] ifFalse: [0]].
         ].

dim_sums := {
    input collect: #sum.                                "" row sums ""
    (1 to: input size) collect: [:col |                 "" col sums ""
        (input collect: [:row | row at: col]) sum
    ].
}.

('Part 1: %1' % {(dim_sums collect: [:d | d diffSum_expand:         2]) sum}) displayNl.
('Part 2: %1' % {(dim_sums collect: [:d | d diffSum_expand: 1_000_000]) sum}) displayNl."
ErAJgPu7,PMA config.inc.php,tghgamb,PHP,Monday 11th of December 2023 09:13:10 PM CDT,"<?php
/**
 * phpMyAdmin sample configuration, you can use it as base for
 * manual configuration. For easier setup you can use setup/
 *
 * All directives are explained in documentation in the doc/ folder
 * or at <https://docs.phpmyadmin.net/>.
 */

declare(strict_types=1);

/**
 * This is needed for cookie based authentication to encrypt the cookie.
 * Needs to be a 32-bytes long string of random bytes. See FAQ 2.10.
 */
$cfg['blowfish_secret'] = md5('TEST##123$$$$123'); /* YOU MUST FILL IN THIS FOR COOKIE AUTH! */

/**
 * Servers configuration
 */
$i = 0;

/**
 * First server
 */
$i++;
/* Authentication type */
$cfg['Servers'][$i]['auth_type'] = 'cookie';
/* Server parameters */
$cfg['Servers'][$i]['host'] = 'localhost';
$cfg['Servers'][$i]['compress'] = false;
$cfg['Servers'][$i]['AllowNoPassword'] = false;

$i++;
$cfg['Servers'][$i]['host']          = '10.10.10.10';
$cfg['Servers'][$i]['port']          = '3306';
$cfg['Servers'][$i]['socket']        = '';
$cfg['Servers'][$i]['connect_type']  = 'tcp';
$cfg['Servers'][$i]['extension']     = 'mysql';
$cfg['Servers'][$i]['compress']      = FALSE;
$cfg['Servers'][$i]['auth_type']     = 'cookie';
$cfg['Servers'][$i]['user']          = '';
$cfg['Servers'][$i]['password']      = '';
/**
 * phpMyAdmin configuration storage settings.
 */

/* User used to manipulate with storage */
// $cfg['Servers'][$i]['controlhost'] = '';
// $cfg['Servers'][$i]['controlport'] = '';
// $cfg['Servers'][$i]['controluser'] = 'pma';
// $cfg['Servers'][$i]['controlpass'] = 'pmapass';

/* Storage database and tables */
// $cfg['Servers'][$i]['pmadb'] = 'phpmyadmin';
// $cfg['Servers'][$i]['bookmarktable'] = 'pma__bookmark';
// $cfg['Servers'][$i]['relation'] = 'pma__relation';
// $cfg['Servers'][$i]['table_info'] = 'pma__table_info';
// $cfg['Servers'][$i]['table_coords'] = 'pma__table_coords';
// $cfg['Servers'][$i]['pdf_pages'] = 'pma__pdf_pages';
// $cfg['Servers'][$i]['column_info'] = 'pma__column_info';
// $cfg['Servers'][$i]['history'] = 'pma__history';
// $cfg['Servers'][$i]['table_uiprefs'] = 'pma__table_uiprefs';
// $cfg['Servers'][$i]['tracking'] = 'pma__tracking';
// $cfg['Servers'][$i]['userconfig'] = 'pma__userconfig';
// $cfg['Servers'][$i]['recent'] = 'pma__recent';
// $cfg['Servers'][$i]['favorite'] = 'pma__favorite';
// $cfg['Servers'][$i]['users'] = 'pma__users';
// $cfg['Servers'][$i]['usergroups'] = 'pma__usergroups';
// $cfg['Servers'][$i]['navigationhiding'] = 'pma__navigationhiding';
// $cfg['Servers'][$i]['savedsearches'] = 'pma__savedsearches';
// $cfg['Servers'][$i]['central_columns'] = 'pma__central_columns';
// $cfg['Servers'][$i]['designer_settings'] = 'pma__designer_settings';
// $cfg['Servers'][$i]['export_templates'] = 'pma__export_templates';

/**
 * End of servers configuration
 */

/**
 * Directories for saving/loading files from server
 */
$cfg['UploadDir'] = '';
$cfg['SaveDir'] = '';

/**
 * Whether to display icons or text or both icons and text in table row
 * action segment. Value can be either of 'icons', 'text' or 'both'.
 * default = 'both'
 */
//$cfg['RowActionType'] = 'icons';

/**
 * Defines whether a user should be displayed a ""show all (records)""
 * button in browse mode or not.
 * default = false
 */
//$cfg['ShowAll'] = true;

/**
 * Number of rows displayed when browsing a result set. If the result
 * set contains more rows, ""Previous"" and ""Next"".
 * Possible values: 25, 50, 100, 250, 500
 * default = 25
 */
//$cfg['MaxRows'] = 50;

/**
 * Disallow editing of binary fields
 * valid values are:
 *   false    allow editing
 *   'blob'   allow editing except for BLOB fields
 *   'noblob' disallow editing except for BLOB fields
 *   'all'    disallow editing
 * default = 'blob'
 */
//$cfg['ProtectBinary'] = false;

/**
 * Default language to use, if not browser-defined or user-defined
 * (you find all languages in the locale folder)
 * uncomment the desired line:
 * default = 'en'
 */
//$cfg['DefaultLang'] = 'en';
//$cfg['DefaultLang'] = 'de';

/**
 * How many columns should be used for table display of a database?
 * (a value larger than 1 results in some information being hidden)
 * default = 1
 */
//$cfg['PropertiesNumColumns'] = 2;

/**
 * Set to true if you want DB-based query history.If false, this utilizes
 * JS-routines to display query history (lost by window close)
 *
 * This requires configuration storage enabled, see above.
 * default = false
 */
//$cfg['QueryHistoryDB'] = true;

/**
 * When using DB-based query history, how many entries should be kept?
 * default = 25
 */
//$cfg['QueryHistoryMax'] = 100;

/**
 * Whether or not to query the user before sending the error report to
 * the phpMyAdmin team when a JavaScript error occurs
 *
 * Available options
 * ('ask' | 'always' | 'never')
 * default = 'ask'
 */
//$cfg['SendErrorReports'] = 'always';

/**
 * 'URLQueryEncryption' defines whether phpMyAdmin will encrypt sensitive data from the URL query string.
 * 'URLQueryEncryptionSecretKey' is a 32 bytes long secret key used to encrypt/decrypt the URL query string.
 */
//$cfg['URLQueryEncryption'] = true;
//$cfg['URLQueryEncryptionSecretKey'] = '';

/**
 * You can find more configuration options in the documentation
 * in the doc/ folder or at <https://docs.phpmyadmin.net/>.
 */
"
xRga9c3C,FILE-SEARCH.ahk,Najeebsk,Autohotkey,Monday 11th of December 2023 08:18:05 PM CDT,"; <COMPILER: v1.1.34.04>
#NoEnv
#SingleInstance, Force
SetBatchLines, -1
;#NoTrayIcon 
SetWorkingDir %A_ScriptDir%  
;----------------------------------------------------
FileEncoding, UTF-8
vlcx        =%A_programfiles%\VideoLAN\VLC\vlc.exe
vlcx2        =%A_windir%\notepad.exe
vlcx3        =D:\TOOLS\HONEYVIEW-PORTABLE\Honeyview.exe
vlcx4        =%A_windir%\explorer.exe
vlcx5        =%A_programfiles%\WinRAR\WinRAR.exe
vlcx6        =%A_windir%\explorer.exe
HK1=Esc                       ;- ESC toggle sound
  Hotkey,%hk1%,pause1,ON
t:=""""
Filename1=NAJEEB SHAH KHAN SEARCH FILES AND RUN  ( esc= sound ON/OFF )
;---------------------------------------------
;all1     :=""mp3,aac,flac,aif,aiff,m4a,mp4,flv,mpg,vob,mvk,wmv,avi,m3u,m3u8,xml,jpg,jpge,bmp,png,gif,ico,txt,bat,vbs,ahk,au3,sh,ini,ls,doc,cmd,js,pdf,fm,exe,ink,cpl,dll,rar,zip,7z,iso,daa,bin,cue,img""
music1    :=""mp3,aac,flac,aif,aiff,m4a""
video1    :=""mp4,flv,mpg,vob,mvk,wmv,avi""
channel1   :=""m3u,m3u8,xml""
picture1   :=""jpg,jpge,bmp,png,gif,ico""
text1   :=""txt,bat,vbs,ahk,au3,sh,ini,ls,doc,cmd,js,pdf,fm""
exe1   :=""exe,ink""
sys1   :=""cpl""
zip1   :=""rar,zip,7z,iso,daa,bin,cue,img""
;------------------------------------------------
Gui,default
Gui,Color, ControlColor, Black
Gui,Font, CBlack s14, Lucida Console
;-------------------------------------------------
Gui, Add, DropDownList, x10 y5 w160 h25 vDrive gFD1, Select Drive||C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z
Gui, Add, Button,x180 y5 w160 h25 gFolder  , Select-Folder
Gui,Font, CWhite s14, Lucida Console
Gui, Add, Edit,x350 y5 w260 h25 vSEC  , Type Search Ext
Gui,Font, CBlack s14, Lucida Console
Gui, Add, Button,x620 y5 w160 h25 gEXT, SEARCH
Gui,Add, Button,x830	y5	w100 h25 gREF   ,REFRESH
Gui, Add, ListView, x10 y40 h425 w920 gMLV vF1 altsubmit grid backgroundgray, Name|Fullpath
LV_ModifyCol(1,890)
LV_ModifyCol(2,0)

GUI,show, NA W940 H550 X20 Y0,%filename1%
return
;-------------------------------------
MLV:
if A_GuiEvent = Normal
  {
  LV_GetText(C2,A_EventInfo,2)
  SplitPath,C2, name, dir, ext, name_no_ext, drive
  if ext in %music1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      Soundplay, %C2%
	  }
  else
     {
 if ext in %text1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      run, %C2% %vlcx2%
	  }
else
     {
 if ext in %picture1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      run, %C2% %vlcx3%
	  }
else
     {
 if ext in %exe1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      run, %C2% %vlcx4%
	  }
else
     {
 if ext in %zip1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      run, %C2% %vlcx5%
	  }
else
     {
 if ext in %sys1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      run, %C2% %vlcx6%
	  }
  else
    {
	ifexist,%vlcx%
	  {
	  soundplay,NotExisting.avi
      ;run,%vlcx% --one-instance --qt-start-minimized ""%c2%"",,hide,pid1
	  run,%vlcx%  --one-instance ""%c2%""
      ;if ErrorLevel
      ;   MsgBox Could not open ""%C2%"".
	  }	 
	 else
       run,""%c2%"" 	 
    }	
  }
}
}
}
}
}
return
;-----------------------------------------
FD1:
Gui, Submit, NoHide ; Get user input from GUI
FD1:= Drive "":\""                                          ;- folderselect from here
return
Folder:
PRESELECT  =%fd1%         ;- search from here
FileSelectFolder,MF,%PRESELECT%
if MF=
  return
SplitPath,MF, name, dir, ext, name_no_ext, drive
soundplay,NotExisting.avi
Loop, %mf%\*.*, 0, 1
  {
  If A_LoopFileExt in %sec%
  	LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
  }
return
;-------------------------------------
EXT:
Gui, Submit, NoHide ; Get user input from GUI
LV_Delete()
soundplay,NotExisting.avi
Loop,%fd1%\*.*, 0, 1
   {
   SplitPath,A_LoopFileLongPath, name, dir, ext, name_no_ext, drive
   If ext In %sec%
      LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
   }
LV_ModifyCol(1, ""Logical SortAsc"")
return
;-------------------------------------  
;- Hotkey sound ON /OFF
pause1:
t:=!t
if t
  soundset,1,WAVE,mute           ; WAVE ON
else
  soundset,0,WAVE,mute           ; WAVE OFF
return
;---------------------------------------------
;Guiclose:
Process, Exist, vlc.exe
If ErrorLevel
   {
   msgbox, 262435,Close,Want you close also Audio ?
   ifmsgbox,NO
      {
      soundset,0,master,mute
      exitapp
      }
   ifmsgbox,Cancel
      {
      return
      }
   else
     {
     soundset,0,master,mute
     process,close,vlc.exe
     exitapp
     }
   }
else
  {
  soundset,0,master,mute
  exitapp
  }
  Return
;-----------------------------
REF:
    Gui, Submit, NoHide
Reload
return
;============ END SCRIPT BUTTON_MENU ==============
#R::Reload
#S::Suspend
#P::Pause
#ESC::ExitApp"
9xAuFXkv,AoC 2023 day 11 (dc),musifter,Bash,Monday 11th of December 2023 08:18:02 PM CDT,"# Command: perl -pe's/(.)/$1 /g;y/.#/01/' | dc -e2 -fpart1.dc
# Change the -e1 to -e1000000 for part 2

ss                              # scale (extra lines to add)

# Load grid:
? 1                             # line y
[
    0                           # top y ysum
    [
        3Rd 3R+ r               # y (ysum+=top) top

        z2-                     # y ysum top x=z-2
        d_3R                    # y ysum x top x
        ;c + r:c                # col(x)+=top; y ysum

        z 2<X
    ] dsXx

    # stack: y ysum
    d lg+sg                     # galaxy number += ysum
    rd_3R :r                    # row(y) = ysum
    1+                          # y++

    ? zRz 1<Y
] dsYx

# Expand: 1 -> scale
[ ls* ] sE

# absolute differences with expanded 0s (stack: i=last-index)
[
    0 sc                        # column
    0 sa                        # accumulated seen

    0r                          # dist=0 i
    [
        dlAx                    # dist i arr(i)
        d 1 r0=E lc+sc          # inc col (expand by scale if 0); dist i arr(i)

        d dla2*+lg- *lc*        # dist i arr(i) factor=col*arr(i)*(2*seen+arr(i)-#gals)

        r la+sa                 # seen += arr(i); dist i factor
        3R+                     # i dist+=factor

        r1- d 0<L
    ] dsLx
    +                           # clear i (+0)
] sD

# Stack: size (10 or 140)
1-
[;r]sA dlDx                     # size -> size-1 row_dist
[;c]sA rlDx +p
"
FEdVz9s9,ALL-SEARCH.ahk,Najeebsk,Autohotkey,Monday 11th of December 2023 08:14:04 PM CDT,"; <COMPILER: v1.1.34.04>
#NoEnv
#SingleInstance, Force
SetBatchLines, -1
;#NoTrayIcon 
SetWorkingDir %A_ScriptDir%  
;----------------------------------------------------
FileEncoding, UTF-8
vlcx        =%A_programfiles%\VideoLAN\VLC\vlc.exe
vlcx2        =%A_windir%\notepad.exe
vlcx3        =D:\TOOLS\HONEYVIEW-PORTABLE\Honeyview.exe
vlcx4        =%A_windir%\explorer.exe
vlcx5        =%A_programfiles%\WinRAR\WinRAR.exe
vlcx6        =%A_windir%\explorer.exe
HK1=Esc                       ;- ESC toggle sound
  Hotkey,%hk1%,pause1,ON
t:=""""
Filename1=NAJEEB SHAH KHAN SEARCH ALL DATA AND OPEN & PLAY-MEDIA  ( esc= sound ON/OFF )
;FD1=D:\                                                ;- folderselect from here
all1     :=""mp3,aac,flac,aif,aiff,m4a,mp4,flv,mpg,vob,mvk,wmv,avi,m3u,m3u8,xml,jpg,jpge,bmp,png,gif,ico,txt,bat,vbs,ahk,au3,sh,ini,ls,doc,cmd,js,pdf,fm,exe,ink,cpl,dll,rar,zip,7z,iso,daa,bin,cue,img""
music1    :=""mp3,aac,flac,aif,aiff,m4a""
video1    :=""mp4,flv,mpg,vob,mvk,wmv,avi""
channel1   :=""m3u,m3u8,xml""
picture1   :=""jpg,jpge,bmp,png,gif,ico""
text1   :=""txt,bat,vbs,ahk,au3,sh,ini,ls,doc,cmd,js,pdf,fm""
exe1   :=""exe,ink""
sys1   :=""cpl""
zip1   :=""rar,zip,7z,iso,daa,bin,cue,img""
Gui,default
Gui,Color, ControlColor, Black
Gui,Font, CBlack s14, Lucida Console
;Gui, Add, Edit,x10	y5	w120 h25 VFD1, C:\
Gui, Add, DropDownList, x10 y5 w120 h25 vDrive gFD1, Drive||C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z
Gui, Add, Button,x140 	y5 	w160 h25 gFolder  , Select-Folder
Gui, Add, Button,x310 	y5	w120 h25 gMusic   , MUSIC
Gui, Add, Button,x440 	y5	w120 h25 gVideo   , VIDEO
Gui, Add, Button,x570 	y5	w120 h25 gChannel   , CHANNEL
Gui, Add, Button,x700 	y5	w120 h25 gPicture   , PICTURE
Gui, Add, Button,x830 	y5	w100 h25 gText   , TEXT
Gui, Add, Button,x10	y480	w120 h25 gAll     , Get ALL
Gui, Add, Button,x140		y480	w140 h25 gExe   , SOFTWARE
Gui, Add, Button,x290	y480	w120 h25 gSys   , SYSTEM
Gui, Add, Button,x420	y480	w120 h25 gZip   , ARCHIVE
Gui,Add, Button,x830	y480	w100 h25 gREF   ,REFRESH
Gui, Add, ListView, x10 y40 h425 w920 gMLV vF1 altsubmit grid backgroundgray, Name|Fullpath
LV_ModifyCol(1,890)
LV_ModifyCol(2,0)

GUI,show, NA W940 H550 X20 Y0,%filename1%
return
;-------------------------------------

MLV:
if A_GuiEvent = Normal
  {
  LV_GetText(C2,A_EventInfo,2)
  SplitPath,C2, name, dir, ext, name_no_ext, drive
  if ext in %music1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      Soundplay, %C2%
	  }
  else
     {
 if ext in %text1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      run, %C2% %vlcx2%
	  }
else
     {
 if ext in %picture1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      run, %C2% %vlcx3%
	  }
else
     {
 if ext in %exe1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      run, %C2% %vlcx4%
	  }
else
     {
 if ext in %zip1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      run, %C2% %vlcx5%
	  }
else
     {
 if ext in %sys1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      run, %C2% %vlcx6%
	  }
  else
    {
	ifexist,%vlcx%
	  {
	  soundplay,NotExisting.avi
      ;run,%vlcx% --one-instance --qt-start-minimized ""%c2%"",,hide,pid1
	  run,%vlcx%  --one-instance ""%c2%""
      ;if ErrorLevel
      ;   MsgBox Could not open ""%C2%"".
	  }	 
	 else
       run,""%c2%"" 	 
    }	
  }
}
}
}
}
}
return
;-------------------------------------
FD1:
Gui, Submit, NoHide ; Get user input from GUI
FD1:= Drive "":\""                                          ;- folderselect from here
return
Folder:
PRESELECT  =%fd1%         ;- search from here
FileSelectFolder,MF,%PRESELECT%
if MF=
  return
SplitPath,MF, name, dir, ext, name_no_ext, drive
soundplay,NotExisting.avi
Loop, %mf%\*.*, 0, 1
  {
  If A_LoopFileExt in %all1%
  	LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
  }
return
;-------------------------------------
all:
LV_Delete()
soundplay,NotExisting.avi
Loop,%fd1%\*.*, 0, 1
   {
   SplitPath,A_LoopFileLongPath, name, dir, ext, name_no_ext, drive
   If ext In %all1%
      LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
   }
LV_ModifyCol(1, ""Logical SortAsc"")
return
;-------------------------------------  
Music:
LV_Delete()
soundplay,NotExisting.avi
Loop, %fd1%\*.*, 0, 1
  {
  If A_LoopFileExt in %music1%
  	LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
  }
return
;-------------------------------------
Video:
LV_Delete()
soundplay,NotExisting.avi
Loop, %fd1%\*.*, 0, 1
  {
  If A_LoopFileExt in %video1%
  	LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
  }
return
;------------------------------------
Channel:
LV_Delete()
soundplay,NotExisting.avi
Loop, %fd1%\*.*, 0, 1
  {
  If A_LoopFileExt in %channel1%
  	LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
  }
return
;------------------------------------
Picture:
LV_Delete()
soundplay,NotExisting.avi
Loop, %fd1%\*.*, 0, 1
  {
  If A_LoopFileExt in %picture1%
  	LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
  }
return
;------------------------------------
Text:
LV_Delete()
soundplay,NotExisting.avi
Loop, %fd1%\*.*, 0, 1
  {
  If A_LoopFileExt in %text1%
  	LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
  }
return
;------------------------------------
Exe:
LV_Delete()
soundplay,NotExisting.avi
Loop, %fd1%\*.*, 0, 1
  {
  If A_LoopFileExt in %exe1%
  	LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
  }
return
;------------------------------------
Sys:
LV_Delete()
soundplay,NotExisting.avi
Loop, %fd1%\*.*, 0, 1
  {
  If A_LoopFileExt in %sys1%
  	LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
  }
return
;------------------------------------
Zip:
LV_Delete()
soundplay,NotExisting.avi
Loop, %fd1%\*.*, 0, 1
  {
  If A_LoopFileExt in %zip1%
  	LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
  }
return
;------------------------------------
;- Hotkey sound ON /OFF
pause1:
t:=!t
if t
  soundset,1,WAVE,mute           ; WAVE ON
else
  soundset,0,WAVE,mute           ; WAVE OFF
return
;---------------------------------------------
;Guiclose:
Process, Exist, vlc.exe
If ErrorLevel
   {
   msgbox, 262435,Close,Want you close also Audio ?
   ifmsgbox,NO
      {
      soundset,0,master,mute
      exitapp
      }
   ifmsgbox,Cancel
      {
      return
      }
   else
     {
     soundset,0,master,mute
     process,close,vlc.exe
     exitapp
     }
   }
else
  {
  soundset,0,master,mute
  exitapp
  }
  Return
;-----------------------------
REF:
    Gui, Submit, NoHide
Reload
return
;============ END SCRIPT BUTTON_MENU ==============
#R::Reload
#S::Suspend
#P::Pause
#ESC::ExitApp"
NPy4E8ZG,Automatic kubernate,Rnery,Bash,Monday 11th of December 2023 08:11:45 PM CDT,"#!/usr/bin/env bash

# Variáveis de ambiente
# O nome do cluster Kubernetes
export KUBECONFIG=/path/to/kubeconfig
# O namespace do Kubernetes
export NAMESPACE=default

# Funções para criar um Deployment
create_deployment() {
    local deployment_name=""$1""
    local image_name=""$2""

    if [[ -z ""$deployment_name"" ]]; then
        echo ""O nome do deployment não pode ser vazio.""
        exit 1
    fi

    if [[ -z ""$image_name"" ]]; then
        echo ""O nome da imagem não pode ser vazio.""
        exit 1
    fi

    kubectl create deployment ""$deployment_name"" --image=""$image_name"" --namespace=""$NAMESPACE""
}

# Funções para deletar um Deployment
delete_deployment() {
    local deployment_name=""$1""

    if [[ -z ""$deployment_name"" ]]; then
        echo ""O nome do deployment não pode ser vazio.""
        exit 1
    fi

    kubectl delete deployment ""$deployment_name"" --namespace=""$NAMESPACE""
}

# Funções para verificar as entradas do usuário
validate_deployment_name() {
    local deployment_name=""$1""

    if [[ ! ""$deployment_name"" =~ ^[a-z0-9-]+$ ]]; then
        echo ""O nome do deployment deve ser composto apenas por letras minúsculas, números e hífens.""
        exit 1
    fi
}

# Funções para lidar com erros
handle_error() {
    local error_message=""$1""

    echo ""$error_message""
    exit 1
}

# Função principal
main() {
    local operation=""$1""
    local deployment_name=""$2""
    local image_name=""$3""

    # Verifica se o número correto de argumentos foi fornecido
    if [ ""$#"" -lt 2 ] || [ ""$#"" -gt 3 ]; then
        echo ""Uso: $0 <create/delete> <deployment_name> [image_name]""
        exit 1
    fi

    # Valida o nome do deployment
    if [ ""$operation"" == ""create"" ]; then
       validate_deployment_name ""$deployment_name""
    fi

    # Chama a função apropriada
    case ""$operation"" in
        ""create"")
            create_deployment ""$deployment_name"" ""$image_name""
            ;;
        ""delete"")
            delete_deployment ""$deployment_name""
            ;;
        *)
            echo ""Uso: $0 <create/delete> <deployment_name> [image_name]""
            exit 1
            ;;
    esac
}

# Chama a função principal
main ""$@"""
uf3N4FWa,lab_clear_C_beta,VladimirKostovsky,C,Monday 11th of December 2023 08:02:23 PM CDT,"#define _CRT_SECURE_NO_WARNINGS
#include <locale.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {
    setlocale(LC_ALL, ""Russian"");

    int choice;
    char inputFileName[100];
    char outputFileName[100];

    printf(""Выберите задачу (1 для задачи 4.1, 2 для задачи 4.2): "");
    scanf(""%d"", &choice);

    printf(""Введите имя входного файла: "");
    scanf(""%s"", inputFileName);

    char tempOutputFileName[100];
    strcpy(tempOutputFileName, inputFileName); // Копируем имя входного файла во временную переменную
    char* dot = strrchr(tempOutputFileName, '.'); // Находим последнюю точку в имени файла
    if (dot) {
        *dot = '\0'; // Удаляем расширение, установив нулевой символ на место точки
    }

    strcat(tempOutputFileName, "".out""); // Добавляем расширение .out к временному имени файла

    // Проверяем, имеет ли выходное имя файла расширение .out, иначе добавляем его
    strcpy(outputFileName, tempOutputFileName);

    FILE* inputFile;
    FILE* outputFile;

    switch (choice) {
    case 1: {
        char targetSymbol;

        printf(""Введите символ для поиска: "");
        scanf("" %c"", &targetSymbol);

        inputFile = fopen(inputFileName, ""r"");
        if (inputFile == NULL) {
            perror(""Ошибка открытия входного файла"");
            return 1;
        }

        outputFile = fopen(outputFileName, ""w"");
        if (outputFile == NULL) {
            perror(""Ошибка открытия выходного файла"");
            fclose(inputFile);
            return 1;
        }

        char buffer[1000];
        while (fgets(buffer, sizeof(buffer), inputFile) != NULL) {
            if (strchr(buffer, targetSymbol) != NULL || strchr(buffer, targetSymbol - 32) != NULL || strchr(buffer, targetSymbol + 32) != NULL) {
                fputs(buffer, outputFile);
            }
        }

        fclose(inputFile);
        fclose(outputFile);

        printf(""Задача 4.1 завершена. Результат записан в файл %s\n"", outputFileName);
        break;
    }
    case 2: {
        char lastChar = '\0'; // Инициализируем lastChar начальным значением
        inputFile = fopen(inputFileName, ""r"");
        if (inputFile == NULL) {
            perror(""Ошибка открытия входного файла"");
            return 1;
        }

        outputFile = fopen(outputFileName, ""w"");
        if (outputFile == NULL) {
            perror(""Ошибка открытия выходного файла"");
            fclose(inputFile);
            return 1;
        }

        int maxReplacements = 5; // Пример значения по умолчанию
        printf(""Максимальное количество замен по умолчанию: %d\n"", maxReplacements);
        printf(""Предупреждение: Превышение максимального количества замен будет игнорироваться системой.\n"");
        printf(""Введите новое максимальное количество замен: "");
        scanf(""%d"", &maxReplacements);

        int replacementCount = 0; // Счетчик замен
        int ch;
        int nextCh;

        while ((nextCh = fgetc(inputFile)) != EOF) {
            ch = nextCh;

            if (ch == ' ') {
                if (replacementCount < maxReplacements) {
                    fputc(lastChar, outputFile);
                    replacementCount++;
                }
                else {
                    fputc(' ', outputFile);
                }
            }
            else if (ch == '\n') {
                fputc(lastChar, outputFile);
                fputc(ch, outputFile);
                replacementCount = 0;
                lastChar = '\0';
            }
            else {
                lastChar = ch;
                fputc(ch, outputFile);
            }
        }

        if (ch != '\n' && ch != EOF) {
            fputc(lastChar, outputFile);
        }

        fclose(inputFile);
        fclose(outputFile);

        printf(""Задача 4.2 завершена. Результат записан в файл %s\n"", outputFileName);
        break;
    }
    default:
        printf(""Некорректный выбор. Используйте 1 для задачи 4.1 или 2 для задачи 4.2\n"");
        return 1;
    }

    return 0;
}
"
u6Pg3N8G,Untitled,artemsemkin,HTML,Monday 11th of December 2023 07:43:49 PM CDT,"<div id=""qm-fatal"" data-qm-message=""Uncaught Error: Class &quot;Elementor\Scheme_Color&quot; not found"" data-qm-file=""wp-content/plugins/projectify/widgets/projectify-all-widgets.php"" data-qm-line=""315"">
  <div class=""qm-fatal-wrap"">
    <p>
      <b>Fatal error</b>
      : Uncaught Error: Class &quot;Elementor\Scheme_Color &quot;not found<br>
      in <b>/home/m9uxtlwe9lyv/public_html/wp-content/plugins/projectify/widgets/projectify-all-widgets.php</b>
      on line <b>315</b>
    </p>
    <p>Call stack:</p>
    <ol>
      <li>
        <code>Projectify\Widgets\Projectify_All_Widgets::_register_controls()</code>
        <br>
        <span class=""qm-info qm-supplemental"">wp-content/plugins/elementor/includes/base/controls-stack.php:2356</span>
      </li>
      <li>
        <code>Elementor\Controls_Stack::init_controls()</code>
        <br>
        <span class=""qm-info qm-supplemental"">wp-content/plugins/elementor/includes/base/widget-base.php:1044</span>
      </li>
      <li>
        <code>Elementor\Widget_Base::init_controls()</code>
        <br>
        <span class=""qm-info qm-supplemental"">wp-content/plugins/elementor/includes/base/controls-stack.php:541</span>
      </li>
      <li>
        <code>Elementor\Controls_Stack::get_stack()</code>
        <br>
        <span class=""qm-info qm-supplemental"">wp-content/plugins/elementor/includes/base/widget-base.php:181</span>
      </li>
      <li>
        <code>Elementor\Widget_Base::get_stack()</code>
        <br>
        <span class=""qm-info qm-supplemental"">wp-content/plugins/elementor/includes/managers/widgets.php:388</span>
      </li>
      <li>
        <code>Elementor\Widgets_Manager::ajax_get_widget_types_controls_config()</code>
      </li>
      <li>
        <code>call_user_func()</code>
        <br>
        <span class=""qm-info qm-supplemental"">wp-content/plugins/elementor/core/common/modules/ajax/module.php:176</span>
      </li>
      <li>
        <code>Elementor\C\C\M\A\Module::handle_ajax_request()</code>
        <br>
        <span class=""qm-info qm-supplemental"">wp-includes/class-wp-hook.php:324</span>
      </li>
      <li>
        <code>WP_Hook::apply_filters()</code>
        <br>
        <span class=""qm-info qm-supplemental"">wp-includes/class-wp-hook.php:348</span>
      </li>
      <li>
        <code>WP_Hook::do_action()</code>
        <br>
        <span class=""qm-info qm-supplemental"">wp-includes/plugin.php:517</span>
      </li>
      <li>
        <code>do_action()</code>
        <br>
        <span class=""qm-info qm-supplemental"">wp-admin/admin-ajax.php:188</span>
      </li>
    </ol>
  </div>
</div>"
aW5nqcfc,most amazing snowybot ever,coinwalk,JavaScript,Monday 11th of December 2023 07:41:10 PM CDT,"var burgzie = document.getElementById('pct_balance').value;
var kozster = parseFloat(document.getElementById('pct_balance').value);
var beast = ((kozster/144000).toFixed(8));
var zeggar = beast;
var taget = 10000;
var tens = (beast*10);
var sevens = (beast*6.9);
var james = ((Math.floor(kozster/tens))*tens);
var frances = ((Math.floor(kozster/tens))*tens);
var tuba = ((Math.floor(kozster/tens))*tens);
var tubit = ((Math.floor(kozster/tens))*tens);
var burgzie = kozster;
var strutt = 2.9;
var stuit = 6.9;
var hams = 1;
var getld = 0;
var boon = true;
var zimple = kozster;
var blowzy = false;
var razzle = ((zeggar*1).toFixed(8));
var brother = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var fegerk = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
 
function get(){
console.clear();
burgzie = document.getElementById('pct_balance').value;
var good = ((burgzie-kozster).toFixed(8));
console.log(""profit"");
console.log(good);
if (burgzie>(james+(zeggar*stuit))){
    zeggar = zeggar*2;
    stuit = 4.9;
    james = parseFloat(burgzie);
}
if (burgzie<(james-(zeggar*strutt))){
    zeggar = zeggar*2;
    strutt = 4.9;
    hams = 0;
    james = parseFloat(burgzie);
}
if ((burgzie>=(frances+(tens*hams)))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens))){
    zeggar = beast;
    strutt = 2.9;
    stuit = 6.9;
    hams = 1;
    james = ((Math.floor(burgzie/tens))*tens);
    frances = ((Math.floor(burgzie/tens))*tens);
}
if (burgzie>=taget){
    console.log(""winner winner chicken dinner"");
    return;
}
homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var coldbet = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var milk = document.getElementById('me').firstChild.lastChild.firstChild.children[11].innerText;
if ((milk==razzle)&&(getld>=1)&&(homer>brother)&&(!boon)){
fegerk = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
brother = parseFloat(homer);
boon = true;
}
if ((fegerk<49.5000)&&(blowzy)){
zimple = zimple+zeggar
blowzy = false;
}
if ((fegerk>=49.5000)&&(blowzy)){
zimple = zimple-zeggar;
blowzy = false;
}
var ficked = ((zimple*1).toFixed(8));
var migg = parseFloat(burgzie);
if (((milk>razzle)&&(getld>=1)&&(homer>brother))||((ficked>migg)&&(!blowzy)&&(getld>=2))||((ficked<migg)&&(!blowzy)&&(getld>=2))||((milk<razzle)&&(getld>=1)&&(homer>brother))){
console.log(""hacker attacked you with"");
console.log(milk);
console.log(""bet number of attack:"");
console.log(coldbet);
return;
}
if ((homer==brother)&&(boon)){
razzle = ((zeggar*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo').click();
getld = getld+1;
blowzy = true;
boon = false;
homer = 0;
}
setTimeout(() => get(), 1);
}
get();;"
4byskuHh,15763676/1/cblcks/chunk_1,jman116,JSON,Monday 11th of December 2023 06:52:51 PM CDT,"[{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":87,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":90,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":93,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":96,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":96,""uZ"":0,""rZ"":-1,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":96,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":99,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":102,""uZ"":1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":102,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":102,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":102,""uZ"":0,""rZ"":1,""B"":0},{""uY"":0,""uX"":0,""rX"":1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":102,""uZ"":1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":99,""uZ"":1,""rZ"":0,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":96,""uZ"":0,""rZ"":1,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":96,""uZ"":0,""rZ"":1,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":93,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":90,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":87,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":84,""uZ"":0,""rZ"":1,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":84,""uZ"":0,""rZ"":1,""B"":0},{""uY"":0,""uX"":0,""rX"":1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":84,""uZ"":1,""rZ"":0,""B"":0},{""uY"":0,""uX"":1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":84,""uZ"":0,""rZ"":-1,""B"":0},{""uY"":0,""uX"":1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":84,""uZ"":0,""rZ"":-1,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":87,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":90,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":93,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":81,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":78,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":78,""uZ"":0,""rZ"":-1,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":78,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":78,""uZ"":0,""rZ"":1,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":78,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":81,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":75,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":75,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":75,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":72,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":69,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":69,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":69,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":72,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":81,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":105,""uZ"":1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":108,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":108,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":111,""uZ"":1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":99,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":105,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":111,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":1,""rY"":0,""G"":0,""lX"":0,""lY"":-1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":108,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":-1,""lZ"":0,""m"":""DiamondPlate"",""n"":""LevelTenWheel"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":72,""uZ"":0,""rZ"":-1,""B"":0},{""uY"":0,""uX"":1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":-1,""lZ"":0,""m"":""DiamondPlate"",""n"":""LevelTenWheel"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":72,""uZ"":0,""rZ"":1,""B"":0},{""uY"":0,""uX"":1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":-1,""lZ"":0,""m"":""DiamondPlate"",""n"":""LevelTenSteeringWheel"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":108,""uZ"":0,""rZ"":1,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":-1,""lZ"":0,""m"":""DiamondPlate"",""n"":""LevelTenSteeringWheel"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":108,""uZ"":0,""rZ"":-1,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":-1,""lZ"":0,""m"":""DiamondPlate"",""n"":""LevelOneHelium"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":72,""uZ"":0,""rZ"":-1,""B"":0},{""uY"":0,""uX"":0,""rX"":1,""rY"":0,""G"":0,""lX"":0,""lY"":-1,""lZ"":0,""m"":""DiamondPlate"",""n"":""LevelOneHelium"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":105,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":-1,""lZ"":0,""m"":""DiamondPlate"",""n"":""LevelOneHelium"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":90,""uZ"":0,""rZ"":-1,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":-1,""lZ"":0,""m"":""DiamondPlate"",""n"":""LevelOneHelium"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":90,""uZ"":0,""rZ"":-1,""B"":0},{""uY"":1,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":0,""lZ"":1,""m"":""Plastic"",""n"":""Chair"",""R"":0,""t"":0,""Y"":48,""X"":75,""Z"":96,""uZ"":0,""rZ"":0,""B"":0},[],[],[],[],[]]"
Gjngk4tj,AOC 2023 Day 10,nairby,Rust,Monday 11th of December 2023 06:48:34 PM CDT,"use std::env;
use std::io::{self, prelude::*, BufReader};
use std::fs::File;
use std::collections::{HashSet,HashMap};

use point2d::point2d::Point2D;

#[derive(Clone)]
struct Pipe {
    dirs: [Direction; 2]
}
impl Pipe {
    pub fn goes(&self, dir: &Direction) -> bool {
        self.dirs.iter().any(|d| d == dir)
    }
}

#[derive(Debug,PartialEq,Copy,Clone)]
enum Direction {
    North,
    South,
    East,
    West,
    Nowhere,
}

fn opposite_dir(dir: Direction) -> Direction {
    use Direction::*;
    match dir {
        North => South,
        South => North,
        East  => West,
        West  => East,
        _ => panic!(),
    }
}

fn pipe_kind(ch: char) -> Pipe {
    use Direction::*;
    match ch {
        '|' => Pipe { dirs: [North,South] },
        '-' => Pipe { dirs: [East,West] },
        'L' => Pipe { dirs: [North,East] },
        'J' => Pipe { dirs: [North,West] },
        '7' => Pipe { dirs: [South,West] },
        'F' => Pipe { dirs: [South,East] },
        '.' => Pipe { dirs: [Nowhere,Nowhere] },
        'S' => Pipe { dirs: [Nowhere,Nowhere] },
        _ => panic!(""Unexpected pipe map character: {ch}""),
    }
}

fn move_to(from: &Point2D, dir: &Direction) -> Point2D {
    use Direction::*;
    match dir {
        North => Point2D { x: from.x,     y: from.y - 1 },
        South => Point2D { x: from.x,     y: from.y + 1 },
        East  => Point2D { x: from.x + 1, y: from.y     },
        West  => Point2D { x: from.x - 1, y: from.y     },
        _ => panic!(),
    }
}

fn new_dir(dir: Direction, pipe: &Pipe) -> Direction {
    let from = opposite_dir(dir);
    if pipe.dirs[0] == from { pipe.dirs[1] } else { pipe.dirs[0] }
}

fn solve(input: &str) -> io::Result<()> {
    let file = File::open(input).expect(""Input file not found."");
    let reader = BufReader::new(file);

    // The pipe configuration at S is not determined programmatically.
    // Must be specified per input file.
    let start_pipe = match input {
        ""input.txt""   => Pipe { dirs: [Direction::South,Direction::East] },
        ""sample.txt""  => Pipe { dirs: [Direction::South,Direction::East] },
        ""sample2.txt"" => Pipe { dirs: [Direction::South,Direction::East] },
        ""sample3.txt"" => Pipe { dirs: [Direction::South,Direction::East] },
        ""sample4.txt"" => Pipe { dirs: [Direction::South,Direction::West] },
        _ => panic!(""Must specify pipe type at S for each input file.""),
    };

    // Input
    let input: Vec<String> = match reader.lines().collect() {
        Err(err) => panic!(""Unknown error reading input: {err}""),
        Ok(result) => result,
    };

    // Build map
    let mut start: Point2D = Point2D { x: -1, y: -1 };
    let mut pipes: HashMap<Point2D,Pipe> = HashMap::new();
    for (y,line) in input.iter().enumerate() {
        for (x,ch) in line.chars().enumerate() {
            let pt = Point2D { x: x as i64, y: y as i64 };
            if ch == 'S' {
                start = pt;
                pipes.insert(pt,start_pipe.clone());
            } else {
                pipes.insert(pt,pipe_kind(ch));
            }
        }
    }

    // Trace path and calculate part 1
    let mut steps = 0;
    let mut current = start;
    let mut direction = Direction::East;
    let mut path_map: HashMap<Point2D,Pipe> = HashMap::new();
    path_map.insert(start,start_pipe.clone());
    loop {
        let next_pt = move_to(&current,&direction);
        let pipe_next = pipes.get(&next_pt).unwrap();
        path_map.insert(next_pt,pipe_next.clone());
        direction = new_dir(direction, pipe_next);
        current = next_pt;
        steps += 1;
        if current == start { break }
    }
    println!(""Part 1: {}"",steps/2); // 6864

    // Calculate map extents for part 2
    let xmax = pipes.keys().map(|pt| pt.x).max().unwrap();
    let ymax = pipes.keys().map(|pt| pt.y).max().unwrap();
    let yinf = ymax + 1;

    // Part 2
    let mut enclosed_points: HashSet<Point2D> = HashSet::new();
    for x in 0..=xmax {
        'y_lp: for y in 0..=ymax {
            let pt_check = Point2D { x: x, y: y };

            // Skip points that are on the path
            if path_map.contains_key(&pt_check) { continue 'y_lp }

            // Even-Odd Rule (https://en.wikipedia.org/wiki/Even%E2%80%93odd_rule)
            // Draw vector directly South to infinity (ymax+1) from every point not
            // already part of the path. Count the number of times this vector
            // crosses pipes that go east and pipes that go west.
            // If the minimum of these two counts is odd, point is enclosed.
            let mut crosses_east = 0;
            let mut crosses_west = 0;
            for ynew in y..=yinf {
                if let Some(pt) = path_map.get(&Point2D { x: x, y: ynew }) {
                    if pt.goes(&Direction::East) { crosses_east += 1 }
                    if pt.goes(&Direction::West) { crosses_west += 1 }
                }
            }
            // Check for odd number of crosses
            if std::cmp::min(crosses_west,crosses_east) % 2 != 0 {
                enclosed_points.insert(pt_check);
            }
        }
    }
    let part2 = enclosed_points.len();
    println!(""Part 2: {part2}""); // 349

    Ok(())
}

fn main() {
    let args: Vec<String> = env::args().collect();
    let filename = &args[1];
    solve(&filename).unwrap();
}
"
nws3L7j5,AOC 2023 Day 11,nairby,Rust,Monday 11th of December 2023 06:47:37 PM CDT,"use std::env;
use std::io::{self, prelude::*, BufReader};
use std::fs::File;

use point2d::point2d::Point2D;

extern crate itertools;
use itertools::Itertools;

// Expand map, where times parameter is the column multiplier
// eg. expanding the map doubles (times=2) the width of empty space
fn expand_map(map: &Vec<Point2D>, times: i64) -> Vec<Point2D> {
    let xmax = map.iter().map(|pt| pt.x).max().unwrap();
    let ymax = map.iter().map(|pt| pt.y).max().unwrap();

    // Determine which rows and columns to expand
    let expanded_rows: Vec<_> =
        (0..=ymax)
        .into_iter()
        .filter(|y| {
            (0..=xmax).into_iter().all(|x| !map.contains(&Point2D { x: x, y: *y}))
        })
        .collect();
    let expanded_cols: Vec<_> =
        (0..=xmax)
        .into_iter()
        .filter(|x| {
            (0..=ymax).into_iter().all(|y| !map.contains(&Point2D { x: *x, y: y}))
        })
        .collect();

    // Generate expanded map
    let mut new_map = map.clone();
    for y in (0..=ymax).rev() {
        if expanded_rows.contains(&y) {
            for g in &mut new_map {
                if g.y > y { g.y += times-1 }
            }
        }
    }
    for x in (0..=xmax).rev() {
        if expanded_cols.contains(&x) {
            for g in &mut new_map {
                if g.x > x { g.x += times-1 }
            }
        }
    }
    new_map
}

fn distance(one: &Point2D, other: &Point2D) -> i64 {
    (one.x - other.x).abs() + (one.y - other.y).abs()
}

fn distance_sum(galaxies: &Vec<Point2D>) -> i64 {
    galaxies
        .iter()
        .combinations(2)
        .map(|g| distance(g[0],g[1]))
        .sum::<i64>()
}

fn solve(input: &str) -> io::Result<()> {
    let file = File::open(input).expect(""Input file not found."");
    let reader = BufReader::new(file);

    // Input
    let input: Vec<String> = match reader.lines().collect() {
        Err(err) => panic!(""Unknown error reading input: {err}""),
        Ok(result) => result,
    };

    // Build map
    let mut galaxies: Vec<Point2D> = Vec::new();
    for (y,line) in input.iter().enumerate() {
        for (x,ch) in line.chars().enumerate() {
            let pt = Point2D { x: x as i64, y: y as i64 };
            if ch == '#' {
                galaxies.push(pt);
            }
        }
    }

    // Part 1 + Part 2
    let part1 = distance_sum(&expand_map(&galaxies,2));
    let part2 = distance_sum(&expand_map(&galaxies,1_000_000));
    println!(""Part 1: {part1}""); // 9509330
    println!(""Part 2: {part2}""); //635832237682

    Ok(())
}

fn main() {
    let args: Vec<String> = env::args().collect();
    let filename = &args[1];
    solve(&filename).unwrap();
}
"
azKYmA4v,video-dl.lua (Lua + yt-dlp = videos how I want them),TangentFox,Lua,Monday 11th of December 2023 06:47:21 PM CDT,"#!/usr/bin/env luajit

-- yt-dlp + Lua = Save videos in a format I want them in.

local helptext = [[Usage:

  ./video-dl.lua [action] <url>

[action]: What is desired.
            video (default): Highest quality video (maximum 720p).
            backup, clone, copy: English subtitles (including automatic
              subtitles), thumbnail, description, highest quality video
              (maximum 720p).
            music, audio: Highest quality audio only.
            metadata, meta: English subtitles (including automatic
              subtitles), thumbnail, description.
<url>:    Source. YouTube URL expected, but should work with anything
          yt-dlp works with.
]]

local action, url

if #arg < 2 then
  if arg[1]:find(""help"") then
    print(help)
    return false
  end
  action = ""video""
  url = arg[1]
else
  action = arg[1]
  url = arg[2]
end

local execute = {
  backup = function()
    os.execute(""yt-dlp --retries 100 --write-sub --write-auto-sub --sub-lang \""en.*\"" --write-thumbnail --write-description -f \""bestvideo[height<=720]+bestaudio/best[height<=720]\"" \"""" .. url ..""\"""")
  end,
  music = function()
    os.execute(""yt-dlp --retries 100 -x --audio-quality 0 \"""" .. url ..""\"""")
  end,
  metadata = function()
    os.execute(""yt-dlp --retries 100 --write-sub --write-auto-sub --sub-lang \""en.*\"" --write-thumbnail --write-description --skip-download \"""" .. url ..""\"""")
  end,
  video = function()
    os.execute(""yt-dlp --retries 100 -f \""bestvideo[height<=720]+bestaudio/best[height<=720]\"" \"""" .. url .. ""\"""")
  end,
}
execute.clone = execute.backup
execute.copy = execute.backup
execute.audio = execute.music
execute.meta = execute.metadata

if execute[action] then
  execute[action]()
else
  print(""Invalid <action>"")
  print(""Received:"", ""action"", action, ""url"", url)
end
"
KA0hqKcu,tumblr: Theme XXII,Sunie,HTML,Monday 11th of December 2023 06:39:32 PM CDT,"<!DOCTYPE html>
<!--
	THEME XXII
		Code by Sunie (@sunieepo)
		v2023.12.11
	
	1. Edit the code as much as you want so long as you don't break the below rules.
	2. Don't mess with the credit at all.
	3. Don't claim this code as your own, redistribute it, or use it at as a base.
-->

<html>

<head>

<title>{Title}{block:PostSummary} - {PostSummary}{/block:PostSummary}</title>
<meta name=""description"" content=""{MetaDescription}""/>
<meta name=""author"" content=""Sunie""/>

<link rel=""icon"" type=""image/x-icon"" href=""{image:favicon}""/>

<link rel=""stylesheet"" href=""https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css""/>

<meta name=""image:favicon"" content=""{Favicon}""/>
<meta name=""image:sidebar image"" content=""https://file.garden/ZTs192KGxCOelifH/Assets/Yuuka1.gif""/>
<meta name=""image:corner image"" content=""https://file.garden/ZTs192KGxCOelifH/Assets/Yuuka2.png""/>

<meta name=""color:color 1"" content=""#ced97f""/>
<meta name=""color:color 2"" content=""#eeb866""/>
<meta name=""color:color 3"" content=""#ff9370""/>
<meta name=""color:color 4"" content=""#fd7393""/>
<meta name=""color:post background"" content=""#ffffff""/>
<meta name=""color:text"" content=""#212121""/>
<meta name=""color:blockquotes"" content=""#ab85ac""/>

<meta name=""text:font size"" content=""12""/>
<meta name=""text:description align"" content=""left""/>
<meta name=""text:tag symbol"" content=""#""/>
<meta name=""text:page left"" content=""&#60;i class=&quot;fa fa-arrow-left&quot;&#62;&#60;/i&#62;""/>
<meta name=""text:page right"" content=""&#60;i class=&quot;fa fa-arrow-right&quot;&#62;&#60;/i&#62;""/>
<meta name=""text:notes label before"" content=""""/>
<meta name=""text:notes label after"" content=""""/>

<meta name=""text:sidebar position"" content=""17""/>
<meta name=""text:sidebar img x position"" content=""161""/>
<meta name=""text:sidebar img y position"" content=""60""/>
<meta name=""text:link 1 name"" content=""link 1""/>
<meta name=""text:link 1 url"" content=""/""/>
<meta name=""text:link 1 icon"" content=""sun-o""/>
<meta name=""text:link 2 name"" content=""link 2""/>
<meta name=""text:link 2 url"" content=""/""/>
<meta name=""text:link 2 icon"" content=""tree""/>
<meta name=""text:link 3 name"" content=""link 3""/>
<meta name=""text:link 3 url"" content=""/""/>
<meta name=""text:link 3 icon"" content=""leaf""/>

<meta name=""if:default notes label"" content=""1""/>
<meta name=""if:custom notes label"" content=""0""/>

<meta name=""if:light box shadows"" content=""1""/>
<meta name=""if:dark box shadows"" content=""0""/>
<meta name=""if:sidebar text 1"" content=""1""/>
<meta name=""if:sidebar text 2"" content=""0""/>

<style type=""text/css"">

body{
	margin:0;
	background:linear-gradient({color:color 1},{color:color 2},{color:color 3},{color:color 4}) fixed;
	color:{color:text};
	font-family:'Verdana',sans-serif;
	font-size:{text:font size}px;
}
a{
	color:{color:text};
	text-decoration:none;
	transition:all 400ms;
}
a:hover{
	opacity:0.4;
}
::selection{
	background:{color:blockquotes};
	color:{color:post background};
}

hr{
	border:0px;
	height:1px;
	background:{color:text};
}
blockquote{
	margin:5px 0px 5px 10px;
	border-left:1px solid {color:blockquotes};
	padding:0px 0px 0px 10px;
}
iframe{
	max-width:100%;
}

#container{
	width:900px;
	height:100%;
	margin-right:auto;
	margin-left:auto;
}

#corner img{
	position:fixed;
	right:0;
	bottom:0;
	z-index:-1;
}

#sidebar{
	position:fixed;
	width:200px;
	top:{text:sidebar position}vh;
	box-shadow:5px 5px {block:ifLightBoxShadows}rgba(255,255,255,0.4){/block:ifLightBoxShadows}{block:ifDarkBoxShadows}rgba(0,0,0,0.4){/block:ifDarkBoxShadows};
	padding:5px;
	background:{color:post background};
}
#sidebartitle a{
	display:block;
	margin:5px;
	padding-bottom:2px;
	background:linear-gradient(to right,{color:color 1},{color:color 2},{color:color 3},{color:color 4});
	background-repeat:no-repeat;
	background-size:auto 1px;
	background-position:bottom;
	text-align:center;
	font-size:120%;
}
#sidebar img{
	position:absolute;
	top:-{text:sidebar img y position}px;
	left:{text:sidebar img x position}px;
}
#description{
	margin:5px;
	text-align:{text:description align};
}
#description a{
	background:linear-gradient(to right,{color:color 1},{color:color 2},{color:color 3},{color:color 4});
	background-repeat:no-repeat;
	background-size:auto 1px;
	background-position:bottom;
}
#pagination{
	margin-top:5px;
	border:1px solid {color:blockquotes};
	padding:2px;
	text-align:center;
	font-size:110%;
	letter-spacing:10px;
}
#pagination a{
	color:{color:blockquotes};
}

#slinks{
	display:flex;
	flex-wrap:wrap;
	gap:2px;
	width:200px;
}
#slinks a{
	display:block;
	flex:1 0 60px;
	padding:5px;
	color:{block:ifSidebarText1}{color:post background}{/block:ifSidebarText1}{block:ifSidebarText2}{color:text}{/block:ifSidebarText2};
	font-size:90%;
}

#clinks{
	position:absolute;
	left:-30px;
	color:{color:post background};
	z-index:-1;
}
.clink{
	width:200px;
	margin-bottom:10px;
	border-bottom:1px solid {color:post background};
	transition:all 600ms;
}
.clink a{
	display:inline-block;
	width:30px;
	color:{color:post background};
	font-size:120%;
}
.clink:hover{
	width:310px;
}
.clinkn{
	float:right;
}

#posts{
	width:500px;
	margin:5vh 0 5vh 320px;
	box-shadow:5px 5px {block:ifLightBoxShadows}rgba(255,255,255,0.4){/block:ifLightBoxShadows}{block:ifDarkBoxShadows}rgba(0,0,0,0.4){/block:ifDarkBoxShadows};
	padding:5px;
	background:{color:post background};
}
#posts img{
	max-width:100%;
}

.entry{
	margin:0 5px 5px 5px;
}
.entry a{
	background:linear-gradient(to right,{color:color 1},{color:color 2},{color:color 3},{color:color 4});
	background-repeat:no-repeat;
	background-size:auto 1px;
	background-position:bottom;
}

.pinned{
	float:right;
	color:{color:blockquotes};
}

.posttitle{
	margin:5px;
	text-align:center;
	font-size:120%;
}

.ask{
	min-height:64px;
	margin-bottom:5px;
}
.asker img{
	position:absolute;
}
.arrowb{
	position:absolute;
	width:0px;
	height:0px;
	margin:19px 0 0 69px;
	border-top:11px solid rgba(0,0,0,0);
	border-bottom:11px solid rgba(0,0,0,0); 
	border-right:11px solid {color:blockquotes};
}
.arrow{
	position:absolute;
	width:0px;
	height:0px;
	margin:20px 0 0 70px;
	border-top:10px solid rgba(0,0,0,0);
	border-bottom:10px solid rgba(0,0,0,0); 
	border-right:10px solid {color:post background};
	z-index:2;
}
.question{
	position:relative;
	display:block;
	width:406px;
	min-height:52px;
	left:79px;
	border:1px solid {color:blockquotes};
	padding:5px 5px 5px 8px;
}

.linktitle a{
	display:block;
	margin:5px;
	background:linear-gradient(to right,{color:color 1},{color:color 2},{color:color 3},{color:color 4});
	background-repeat:no-repeat;
	background-size:auto 1px;
	background-position:bottom;
	text-align:center;
	font-size:120%;
}

.postinfo{
	display:flex;
	flex-wrap:wrap;
	gap:2px;
	color:{block:ifSidebarText1}{color:post background}{/block:ifSidebarText1}{block:ifSidebarText2}{color:text}{/block:ifSidebarText2};
	font-size:90%;
}
.postinfo a{
	color:{block:ifSidebarText1}{color:post background}{/block:ifSidebarText1}{block:ifSidebarText2}{color:text}{/block:ifSidebarText2};
	text-decoration:underline;
}
.pinfob{
	display:block;
	flex:1 0 200px;
	padding:5px;
}
.tags{
	margin-top:5px;
	border:1px solid {color:blockquotes};
	padding:5px;
	font-size:90%;
}
.tags a{
	background:linear-gradient(to right,{color:color 1},{color:color 2},{color:color 3},{color:color 4});
	background-repeat:no-repeat;
	background-size:auto 1px;
	background-position:bottom;
}

.notes{
	font-size:95%;
}

</style>

</head>

<body>

<div id=""corner""><img src=""{image:corner image}""/></div>

<div id=""container"">

<div id=""sidebar"">
	<img src=""{image:sidebar image}""/>
	
	<div id=""clinks"">
		<div class=""clink""><a href=""{text:link 1 url}""><i class=""fa fa-{text:link 1 icon}""></i></a> <span class=""clinkn"">{text:link 1 name}</span></div>
		<div class=""clink""><a href=""{text:link 2 url}""><i class=""fa fa-{text:link 2 icon}""></i></a> <span class=""clinkn"">{text:link 2 name}</span></div>
		<div class=""clink""><a href=""{text:link 3 url}""><i class=""fa fa-{text:link 3 icon}""></i></a> <span class=""clinkn"">{text:link 3 name}</span></div>
		<div class=""clink""><a href=""https://sunieepo.neocities.org/credit"" target=""_blank""><i class=""fa fa-bug""></i></a> <span class=""clinkn"">credit</span></div>
	</div>
	
	<div id=""sidebartitle""><a href=""{BlogURL}"">{Title}</a></div>
	
	<div id=""description"">{Description}</div>
	
	<div id=""slinks"">
		<a href=""/"" style=""background:{color:color 1};"">home</a>
		<a href=""/ask"" style=""background:{color:color 2};"">ask</a>
		<a href=""/submit"" style=""background:{color:color 3};"">submit</a>
		<a href=""/archive"" style=""background:{color:color 4};"">archive</a>
	</div>
	
	{block:Pagination}<div id=""pagination"">
		{block:PreviousPage}<a href=""{PreviousPage}"">{text:page left}</a>{/block:PreviousPage}
		{block:JumpPagination length=""5""}
			{block:CurrentPage}<span class=""current_page"">{PageNumber}</span>{/block:CurrentPage}
			{block:JumpPage}<a class=""jump_page"" href=""{URL}"">{PageNumber}</a>{/block:JumpPage}
		{/block:JumpPagination}
		{block:NextPage}<a href=""{NextPage}"">{text:page right}</a>{/block:NextPage}
	</div>{/block:Pagination}
</div>

{block:Posts}<div id=""posts"">
	{block:PinnedPostLabel}<div class=""pinned""><i class=""fa fa-thumb-tack""></i></div>{/block:PinnedPostLabel}
	
	{block:Text}
		{block:Title}<div class=""posttitle"">{Title}</div>{/block:Title}
		<div class=""entry"">{Body}</div>
	{/block:Text}
	
	{block:Answer}
		<div class=""ask"">
			<div class=""asker""><img src=""{AskerPortraitURL-64}""></div>
			<div class=""arrowb""></div>
			<div class=""arrow""></div>
			<div class=""question"">
				<b>{Asker} asked:</b>
				<br/>
				{Question}
			</div>
		</div>
		<div class=""entry"">{Answer}</div>
	{/block:Answer}
	
	{block:Photo}
		<center>{LinkOpenTag}<img src=""{PhotoURL-500}"">{LinkCloseTag}</center>
		{block:Caption}<div class=""entry"">{Caption}</div>{/block:Caption}
	{/block:Photo}
	
	{block:Panorama}
		<center>{LinkOpenTag}<img src=""{PhotoURL-500}"">{LinkCloseTag}</center>
		{block:Caption}<div class=""entry"">{Caption}</div>{/block:Caption}
	{/block:Panorama}
	
	{block:Photoset}
		<center>{Photoset-500}</center>
		{block:Caption}<div class=""entry"">{Caption}</div>{/block:Caption}
	{/block:Photoset}
	
	{block:Quote}
		<div>{Quote}</div>
		{block:Source}<div class=""entry"">{Source}</div>{/block:Source}
	{/block:Quote}
	
	{block:Link}
		<div class=""linktitle""><a href=""{URL}"">{Name}</a></div>
		{block:Description}<div class=""entry"">{Description}</div>{/block:Description}
	{/block:Link}
	
	{block:Chat}
		{block:Title}<div class=""posttitle"">{Title}</div>{/block:Title}
		{block:Lines}{block:Label}<b>{Label}</b>{/block:Label} {Line}{/block:Lines}
	{/block:Chat}
	
	{block:Audio}
		<center>{AudioEmbed-500}</center>
		{block:Caption}<div class=""entry"">{Caption}</div>{/block:Caption}
	{/block:Audio}
	
	{block:Video}
		<center>{Video-500}</center>
		{block:Caption}<div class=""entry"">{Caption}</div>{/block:Caption}
	{/block:Video}
	
	{block:Date}<div class=""postinfo"">
		<div class=""pinfob"" style=""background:{color:color 1};""><a href=""{Permalink}"">{MonthNumberWithZero}/{DayOfMonthWithZero}/{Year} @ {24HourWithZero}:{Minutes}</a></div>
		<div class=""pinfob"" style=""background:{color:color 2};"" align=""right""><a href=""{Permalink}"">{block:ifDefaultNotesLabel}{NoteCountWithLabel}{/block:ifDefaultNotesLabel}{block:ifCustomNotesLabel}{text:notes label before}{NoteCount}{text:notes label after}{/block:ifCustomNotesLabel}</a></div>
		<div class=""pinfob"" style=""background:{color:color 3};"">via:{block:RebloggedFrom} <a href=""{ReblogParentURL}"">{ReblogParentName}</a>{/block:RebloggedFrom}</div>
		<div class=""pinfob"" style=""background:{color:color 4};"" align=""right"">source:{block:RebloggedFrom} <a href=""{ReblogRootURL}"">{ReblogRootName}</a>{/block:RebloggedFrom}</div>
	</div>{/block:Date}
	
	{block:HasTags}
		<div class=""tags"">{block:Tags}{text:tag symbol}<a href=""{TagURL}"">{Tag}</a> {/block:Tags}</div>
	{/block:HasTags}
	
	{block:PostNotes}<div class=""notes"">{PostNotes}</div>{/block:PostNotes}
</div>{/block:Posts}

</div>

</body>

</html>"
Rj6iafrk,secret snowybot jd,coinwalk,JavaScript,Monday 11th of December 2023 06:28:45 PM CDT,"var burgzie = document.getElementById('pct_balance').value;
var kozster = parseFloat(document.getElementById('pct_balance').value);
var beast = ((kozster/6400).toFixed(8));
var zeggar = beast;
var taget = (kozster*24);
var tens = (beast*10);
var sevens = (beast*6.9);
var james = ((Math.floor(kozster/tens))*tens);
var frances = ((Math.floor(kozster/tens))*tens);
var tuba = ((Math.floor(kozster/tens))*tens);
var tubit = ((Math.floor(kozster/tens))*tens);
var burgzie = kozster;
var strutt = 2.9;
var stuit = 6.9;
var hams = 1;
var getld = 0;
var boon = true;
var zimple = kozster;
var blowzy = false;
var razzle = ((zeggar*1).toFixed(8));
var brother = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var fegerk = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
 
function get(){
console.clear();
burgzie = document.getElementById('pct_balance').value;
var good = ((burgzie-kozster).toFixed(8));
console.log(""profit"");
console.log(good);
if (burgzie>(james+(zeggar*stuit))){
    zeggar = zeggar*2;
    stuit = 4.9;
    james = parseFloat(burgzie);
}
if (burgzie<(frances-(zeggar*strutt))){
    zeggar = zeggar*2;
    strutt = 4.9;
    hams = 0;
    frances = parseFloat(burgzie);
    james = parseFloat(burgzie);
}
if ((burgzie<(tubit*0.8))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens))){
zeggar = beast;
strutt = 2.9;
stuit = 6.9;
hams = 0;
james = ((Math.floor(burgzie/tens))*tens);
frances = ((Math.floor(burgzie/tens))*tens);
tubit = ((Math.floor(burgzie/tens))*tens);
}
if ((burgzie>=(tuba*1.004))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens))){
zeggar = beast;
strutt = 2.9;
stuit = 6.9;
hams = 1;
james = ((Math.floor(burgzie/tens))*tens);
frances = ((Math.floor(burgzie/tens))*tens);
tubit = ((Math.floor(burgzie/tens))*tens);
tuba = ((Math.floor(burgzie/tens))*tens);
}
if ((burgzie>=(tuba*1.04))&&(burgzie>(((Math.floor(burgzie/tens))*tens)+sevens))){
zeggar = beast*2;
strutt = 4.9;
stuit = 4.9;
hams = 1;
frances = parseFloat(burgzie);
james = parseFloat(burgzie);
tubit = ((Math.floor(burgzie/tens))*tens);
tuba = ((Math.floor(burgzie/tens))*tens);
}
if (burgzie>=taget){
    console.log(""winner winner chicken dinner"");
    return;
}
homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var coldbet = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var milk = document.getElementById('me').firstChild.lastChild.firstChild.children[11].innerText;
if ((milk==razzle)&&(getld>=1)&&(homer>brother)&&(!boon)){
fegerk = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
brother = parseFloat(homer);
boon = true;
}
if ((fegerk<49.5000)&&(blowzy)){
zimple = zimple+zeggar
blowzy = false;
}
if ((fegerk>=49.5000)&&(blowzy)){
zimple = zimple-zeggar;
blowzy = false;
}
var ficked = ((zimple*1).toFixed(8));
var migg = parseFloat(burgzie);
if (((milk>razzle)&&(getld>=1)&&(homer>brother))||((ficked>migg)&&(!blowzy)&&(getld>=2))||((ficked<migg)&&(!blowzy)&&(getld>=2))||((milk<razzle)&&(getld>=1)&&(homer>brother))){
console.log(""hacker attacked you with"");
console.log(milk);
console.log(""bet number of attack:"");
console.log(coldbet);
return;
}
if ((homer==brother)&&(boon)){
razzle = ((zeggar*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo').click();
getld = getld+1;
blowzy = true;
boon = false;
homer = 0;
}
setTimeout(() => get(), 1);
}
get();;

"
7kKEyJcc,2023-12-11_stats.json,rdp_snitch,JSON,Monday 11th of December 2023 06:18:29 PM CDT,"{
  ""ip"": {
    ""194.165.17.21"": 42,
    ""110.86.3.66"": 6,
    ""45.227.254.54"": 6,
    ""185.255.130.34"": 3,
    ""176.113.115.58"": 3,
    ""87.251.75.145"": 12,
    ""198.235.24.175"": 9,
    ""185.170.144.3"": 6,
    ""157.90.131.252"": 6,
    ""205.210.31.176"": 9,
    ""196.190.117.7"": 9,
    ""45.227.254.48"": 6,
    ""62.204.41.240"": 6,
    ""167.248.133.125"": 3,
    ""152.32.235.96"": 3,
    ""176.113.115.13"": 9,
    ""205.210.31.226"": 9,
    ""83.97.73.77"": 3,
    ""45.140.17.46"": 9,
    ""89.248.170.88"": 3,
    ""80.66.76.92"": 6,
    ""212.70.149.146"": 9,
    ""15.204.9.251"": 3,
    ""198.235.24.162"": 9
  },
  ""asn"": {
    ""AS48721"": 42,
    ""AS4134"": 6,
    ""AS267784"": 12,
    ""AS147049"": 3,
    ""AS57678"": 12,
    ""AS208091"": 18,
    ""AS396982"": 36,
    ""AS197414"": 6,
    ""AS24940"": 6,
    ""AS24757"": 9,
    ""AS59425"": 6,
    ""AS398324"": 3,
    ""AS135377"": 3,
    ""AS208312"": 3,
    ""AS198953"": 9,
    ""AS202425"": 3,
    ""AS204428"": 9,
    ""AS16276"": 3
  },
  ""isp"": {
    ""Flyservers S.A."": 54,
    ""Chinanet"": 6,
    ""PacketHub S.A."": 3,
    ""Cat Technologies Co. Limited"": 12,
    ""Xhost Internet Solutions LP"": 24,
    ""Google LLC"": 36,
    ""Hetzner Online GmbH"": 6,
    ""Ethiotelecom"": 9,
    ""Horizon LLC"": 6,
    ""Censys, Inc."": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Red Byte LLC"": 3,
    ""Proton66 OOO"": 9,
    ""IP Volume inc"": 3,
    ""SS-Net"": 9,
    ""OVH SAS"": 3
  },
  ""org"": {
    ""Flyservers S.A"": 42,
    ""Chinanet FJ"": 6,
    ""UAB Host Baltic"": 12,
    ""Packethub S.A"": 3,
    ""Cat Technologies Co. Limited"": 12,
    ""Xhost Internet Solutions"": 18,
    ""Palo Alto Networks, Inc"": 36,
    ""Xhostis"": 6,
    ""Hetzner"": 6,
    ""Unknown"": 9,
    ""Horizon LLC"": 6,
    ""Censys, Inc."": 3,
    ""Ucloud Information Technology"": 3,
    ""Red Byte LLC"": 3,
    ""Proton66 LLC"": 9,
    ""Quasi Networks LTD."": 3,
    ""4Media Ltd"": 9,
    ""OVH US LLC"": 3
  },
  ""regionName"": {
    ""Kaunas"": 42,
    ""Fujian"": 6,
    ""Vilnius"": 12,
    ""Texas"": 3,
    ""Moscow"": 30,
    ""North Holland"": 21,
    ""California"": 39,
    ""Hesse"": 6,
    ""Addis Ababa"": 9,
    ""Michigan"": 3,
    ""England"": 6,
    ""Plovdiv"": 9,
    ""Oregon"": 3
  },
  ""country"": {
    ""Lithuania"": 54,
    ""China"": 6,
    ""United States"": 48,
    ""Russia"": 30,
    ""The Netherlands"": 21,
    ""Germany"": 6,
    ""Ethiopia"": 9,
    ""United Kingdom"": 6,
    ""Bulgaria"": 9
  },
  ""account"": {
    ""hello"": 57,
    ""(empty)"": 12,
    ""Test"": 21,
    ""Administr"": 27,
    ""wIDruYVQf"": 3,
    ""htnVvU"": 3,
    ""wDKPQG"": 3,
    ""oBuxuohqT"": 3,
    ""YrxzLR"": 3,
    ""TFqZkO"": 3,
    ""Domain"": 33,
    ""Administrator"": 3,
    ""trRwAmiGM"": 3,
    ""eAVAzE"": 3,
    ""vyqQNC"": 3,
    ""bQJaZqFOM"": 3,
    ""ILeTfJ"": 3,
    ""sqpkua"": 3
  },
  ""keyboard"": {
    ""Unknown"": 189
  },
  ""client_build"": {
    ""Unknown"": 189
  },
  ""client_name"": {
    ""Unknown"": 189
  },
  ""ip_type"": {
    ""Unknown"": 123,
    ""mobile"": 6,
    ""proxy"": 12,
    ""hosting"": 48
  }
}"
pAjMM4jZ,2023-12-11_stats.json,rdp_snitch,JSON,Monday 11th of December 2023 06:16:12 PM CDT,"{
  ""ip"": {
    ""194.165.17.21"": 28,
    ""110.86.3.66"": 4,
    ""45.227.254.54"": 4,
    ""185.255.130.34"": 2,
    ""176.113.115.58"": 2,
    ""87.251.75.145"": 8,
    ""198.235.24.175"": 6,
    ""185.170.144.3"": 4,
    ""157.90.131.252"": 4,
    ""205.210.31.176"": 6,
    ""196.190.117.7"": 6,
    ""45.227.254.48"": 4,
    ""62.204.41.240"": 4,
    ""167.248.133.125"": 2,
    ""152.32.235.96"": 2,
    ""176.113.115.13"": 6,
    ""205.210.31.226"": 6,
    ""83.97.73.77"": 2,
    ""45.140.17.46"": 6,
    ""89.248.170.88"": 2,
    ""80.66.76.92"": 4,
    ""212.70.149.146"": 6,
    ""15.204.9.251"": 2,
    ""198.235.24.162"": 6
  },
  ""asn"": {
    ""AS48721"": 28,
    ""AS4134"": 4,
    ""AS267784"": 8,
    ""AS147049"": 2,
    ""AS57678"": 8,
    ""AS208091"": 12,
    ""AS396982"": 24,
    ""AS197414"": 4,
    ""AS24940"": 4,
    ""AS24757"": 6,
    ""AS59425"": 4,
    ""AS398324"": 2,
    ""AS135377"": 2,
    ""AS208312"": 2,
    ""AS198953"": 6,
    ""AS202425"": 2,
    ""AS204428"": 6,
    ""AS16276"": 2
  },
  ""isp"": {
    ""Flyservers S.A."": 36,
    ""Chinanet"": 4,
    ""PacketHub S.A."": 2,
    ""Cat Technologies Co. Limited"": 8,
    ""Xhost Internet Solutions LP"": 16,
    ""Google LLC"": 24,
    ""Hetzner Online GmbH"": 4,
    ""Ethiotelecom"": 6,
    ""Horizon LLC"": 4,
    ""Censys, Inc."": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Red Byte LLC"": 2,
    ""Proton66 OOO"": 6,
    ""IP Volume inc"": 2,
    ""SS-Net"": 6,
    ""OVH SAS"": 2
  },
  ""org"": {
    ""Flyservers S.A"": 28,
    ""Chinanet FJ"": 4,
    ""UAB Host Baltic"": 8,
    ""Packethub S.A"": 2,
    ""Cat Technologies Co. Limited"": 8,
    ""Xhost Internet Solutions"": 12,
    ""Palo Alto Networks, Inc"": 24,
    ""Xhostis"": 4,
    ""Hetzner"": 4,
    ""Unknown"": 6,
    ""Horizon LLC"": 4,
    ""Censys, Inc."": 2,
    ""Ucloud Information Technology"": 2,
    ""Red Byte LLC"": 2,
    ""Proton66 LLC"": 6,
    ""Quasi Networks LTD."": 2,
    ""4Media Ltd"": 6,
    ""OVH US LLC"": 2
  },
  ""regionName"": {
    ""Kaunas"": 28,
    ""Fujian"": 4,
    ""Vilnius"": 8,
    ""Texas"": 2,
    ""Moscow"": 20,
    ""North Holland"": 14,
    ""California"": 26,
    ""Hesse"": 4,
    ""Addis Ababa"": 6,
    ""Michigan"": 2,
    ""England"": 4,
    ""Plovdiv"": 6,
    ""Oregon"": 2
  },
  ""country"": {
    ""Lithuania"": 36,
    ""China"": 4,
    ""United States"": 32,
    ""Russia"": 20,
    ""The Netherlands"": 14,
    ""Germany"": 4,
    ""Ethiopia"": 6,
    ""United Kingdom"": 4,
    ""Bulgaria"": 6
  },
  ""account"": {
    ""hello"": 38,
    ""(empty)"": 8,
    ""Test"": 14,
    ""Administr"": 18,
    ""wIDruYVQf"": 2,
    ""htnVvU"": 2,
    ""wDKPQG"": 2,
    ""oBuxuohqT"": 2,
    ""YrxzLR"": 2,
    ""TFqZkO"": 2,
    ""Domain"": 22,
    ""Administrator"": 2,
    ""trRwAmiGM"": 2,
    ""eAVAzE"": 2,
    ""vyqQNC"": 2,
    ""bQJaZqFOM"": 2,
    ""ILeTfJ"": 2,
    ""sqpkua"": 2
  },
  ""keyboard"": {
    ""Unknown"": 126
  },
  ""client_build"": {
    ""Unknown"": 126
  },
  ""client_name"": {
    ""Unknown"": 126
  },
  ""ip_type"": {
    ""Unknown"": 82,
    ""mobile"": 4,
    ""proxy"": 8,
    ""hosting"": 32
  }
}"
DQegRbaV,2023-12-11_stats.json,rdp_snitch,JSON,Monday 11th of December 2023 06:15:09 PM CDT,"{
  ""ip"": {
    ""194.165.17.21"": 14,
    ""110.86.3.66"": 2,
    ""45.227.254.54"": 2,
    ""185.255.130.34"": 1,
    ""176.113.115.58"": 1,
    ""87.251.75.145"": 4,
    ""198.235.24.175"": 3,
    ""185.170.144.3"": 2,
    ""157.90.131.252"": 2,
    ""205.210.31.176"": 3,
    ""196.190.117.7"": 3,
    ""45.227.254.48"": 2,
    ""62.204.41.240"": 2,
    ""167.248.133.125"": 1,
    ""152.32.235.96"": 1,
    ""176.113.115.13"": 3,
    ""205.210.31.226"": 3,
    ""83.97.73.77"": 1,
    ""45.140.17.46"": 3,
    ""89.248.170.88"": 1,
    ""80.66.76.92"": 2,
    ""212.70.149.146"": 3,
    ""15.204.9.251"": 1,
    ""198.235.24.162"": 3
  },
  ""asn"": {
    ""AS48721"": 14,
    ""AS4134"": 2,
    ""AS267784"": 4,
    ""AS147049"": 1,
    ""AS57678"": 4,
    ""AS208091"": 6,
    ""AS396982"": 12,
    ""AS197414"": 2,
    ""AS24940"": 2,
    ""AS24757"": 3,
    ""AS59425"": 2,
    ""AS398324"": 1,
    ""AS135377"": 1,
    ""AS208312"": 1,
    ""AS198953"": 3,
    ""AS202425"": 1,
    ""AS204428"": 3,
    ""AS16276"": 1
  },
  ""isp"": {
    ""Flyservers S.A."": 18,
    ""Chinanet"": 2,
    ""PacketHub S.A."": 1,
    ""Cat Technologies Co. Limited"": 4,
    ""Xhost Internet Solutions LP"": 8,
    ""Google LLC"": 12,
    ""Hetzner Online GmbH"": 2,
    ""Ethiotelecom"": 3,
    ""Horizon LLC"": 2,
    ""Censys, Inc."": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Red Byte LLC"": 1,
    ""Proton66 OOO"": 3,
    ""IP Volume inc"": 1,
    ""SS-Net"": 3,
    ""OVH SAS"": 1
  },
  ""org"": {
    ""Flyservers S.A"": 14,
    ""Chinanet FJ"": 2,
    ""UAB Host Baltic"": 4,
    ""Packethub S.A"": 1,
    ""Cat Technologies Co. Limited"": 4,
    ""Xhost Internet Solutions"": 6,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhostis"": 2,
    ""Hetzner"": 2,
    ""Unknown"": 3,
    ""Horizon LLC"": 2,
    ""Censys, Inc."": 1,
    ""Ucloud Information Technology"": 1,
    ""Red Byte LLC"": 1,
    ""Proton66 LLC"": 3,
    ""Quasi Networks LTD."": 1,
    ""4Media Ltd"": 3,
    ""OVH US LLC"": 1
  },
  ""regionName"": {
    ""Kaunas"": 14,
    ""Fujian"": 2,
    ""Vilnius"": 4,
    ""Texas"": 1,
    ""Moscow"": 10,
    ""North Holland"": 7,
    ""California"": 13,
    ""Hesse"": 2,
    ""Addis Ababa"": 3,
    ""Michigan"": 1,
    ""England"": 2,
    ""Plovdiv"": 3,
    ""Oregon"": 1
  },
  ""country"": {
    ""Lithuania"": 18,
    ""China"": 2,
    ""United States"": 16,
    ""Russia"": 10,
    ""The Netherlands"": 7,
    ""Germany"": 2,
    ""Ethiopia"": 3,
    ""United Kingdom"": 2,
    ""Bulgaria"": 3
  },
  ""account"": {
    ""hello"": 19,
    ""(empty)"": 4,
    ""Test"": 7,
    ""Administr"": 9,
    ""wIDruYVQf"": 1,
    ""htnVvU"": 1,
    ""wDKPQG"": 1,
    ""oBuxuohqT"": 1,
    ""YrxzLR"": 1,
    ""TFqZkO"": 1,
    ""Domain"": 11,
    ""Administrator"": 1,
    ""trRwAmiGM"": 1,
    ""eAVAzE"": 1,
    ""vyqQNC"": 1,
    ""bQJaZqFOM"": 1,
    ""ILeTfJ"": 1,
    ""sqpkua"": 1
  },
  ""keyboard"": {
    ""Unknown"": 63
  },
  ""client_build"": {
    ""Unknown"": 63
  },
  ""client_name"": {
    ""Unknown"": 63
  },
  ""ip_type"": {
    ""Unknown"": 41,
    ""mobile"": 2,
    ""proxy"": 4,
    ""hosting"": 16
  }
}"
zRNisj8L,Untitled,victor128w,JavaScript,Monday 11th of December 2023 06:03:12 PM CDT,"const USER_DATABASE = ""USER_DATABASE"";

let
roomNameString = ""🌌 APOLLO | Flash x3 🔵""
    room = HBInit({
	roomName: roomNameString, // nome da sua hospedagem
	maxPlayers: 30, // quantidade de players que essa sala pode suportar, maximo 30
	public: true, // true para sala publica, false para sala privada.
        playerName: ""[🎮]"",
	geo : { code : ""KP"", lat : -19.81, lon : -43.95}, // localização da hospedagem
	noPlayer: false// false para host com bot, true para host sem bot
})

let
prefixString = ""!"",
bansURL = 'https://discord.com/api/webhooks/1175161196924641280/wRLsVShjBoPdf0Gjzzb4StBPE6ImYFNvJmd4biLbqXaGVDCnZP7yLMcJ2PDu2Z9e4pFX',
JogadoresBanidosObject = {};

let Request = {
	post: (player, content)=>{
		let params = {
			""username"": `${player.name} aplicou um banimento`,
			""avatar_url"": ""https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&="",
			""content"": content,
			""url"": ""https://discord.com/api/webhooks/1175161196924641280/wRLsVShjBoPdf0Gjzzb4StBPE6ImYFNvJmd4biLbqXaGVDCnZP7yLMcJ2PDu2Z9e4pFX"",
		};

		fetch(bansURL, {
			method: ""POST"",
			headers: new Headers({ ""Content-Type"": ""application/json"" }),
			body: JSON.stringify(params)
		})
	}
};

let Comandos = {
	ban: (player, tempo, conn, motivo)=>{
		let aliasTempoArray = [""s"", ""m"", ""h"", ""d""];

		if (!parseInt(tempo[0])) room.sendAnnouncement(`${tempo} não é um número inteiro.`, player.id);
		else {
			if (tempo.toString().length < 2) room.sendAnnouncement(`Você precisa colocar o tempo. ex: 3m`, player.id);
			else {
				if (!aliasTempoArray.includes(tempo[1])) room.sendAnnouncement(""Você não colocou se vai ser minuto ou horas. ex: 5h"", player.id);
				else {
					if (conn == undefined) room.sendAnnouncement(""Você não digitou o conn."", player.id);
					else {
						if (JogadoresBanidosObject[conn]) room.sendAnnouncement(`[${conn}] já foi banido`, player.id);
							else {
								if (motivo == undefined) room.sendAnnouncement(""Motivo não definido"", player.id);
									else {
									let motivoSemBarra = motivo.split(""_"").join("" "");
									conn[player.name] = player.name;
									JogadoresBanidosObject[conn] = { tempo: tempo, motivo: motivoSemBarra, autor: player.name, name: player.conn};
									Request.post(player, `[${conn}]\nsala: ${roomName}\ntempo: ${tempo[0]} ${tempo[1] == ""s"" ? ""segundos"" : tempo[1] == ""m"" ? ""minutos"" : tempo[1] == ""h"" ? ""horas"" : tempo[1] == ""d"" ? ""dias"" : ""Tempo não detectado.""}\nMOTIVO: ${motivoSemBarra}`);

							room.sendAnnouncement(`[${conn}] foi banido por ${tempo[0]} ${aliasTempoArray[0] ? ""segundos"" : aliasTempoArray[1] ? ""minutos"" : aliasTempoArray[2] ? ""horas"" : aliasTempoArray[3] ? ""dias"" : ""aliasTempoArray não tem esse tempo""}`, player.id);

							setTimeout(()=>{
							delete JogadoresBanidosObject[conn];
							}, tempo[1] == ""s"" ? 1000*tempo[0] : tempo[1] == ""m"" ? 1000*60*tempo[0] : tempo[1] == ""h"" ? 1000*60*60*tempo[0] : tempo[1] == ""d"" ? 1000*60*60*24*tempo[0] : null)
						}
					}
				}
			}
			}
		}
	},
	infoban: (player, conn)=>{
		if (conn == undefined) room.sendAnnouncement(""Você não digitou o conn."", player.id);
		else {
			if (!JogadoresBanidosObject[conn]) room.sendAnnouncement(`[${conn}] não foi banido.`, player.id);
			else room.sendAnnouncement(`CONN: ${conn}\nAUTOR: ${JogadoresBanidosObject[conn].autor}\nTEMPO: ${JogadoresBanidosObject[conn].tempo}`, player.id);
		}
	}
};


const playerRadius = 15;
var ballRadius = 6.35;
const triggerDistance = playerRadius + ballRadius + 0.01;

var afkLimit = 16; // cronometro de limite de AFK
var drawTimeLimit = 3; // tempo de empate, escolha um número para definir quanto tempo de limite para o jogo ser empatado, deixe Infinity para não ocorrer empates.
var maxTeamSize = 3;
var slowMode = 0;

const Team = { SPECTATORS: 0, RED: 1, BLUE: 2 };
const team = { SPEC: 0, RED: 1, BLUE: 2 };
var extendedP = [];
const eP = { ID: 0, AUTH: 1, CONN: 2, AFK: 3, ACT: 4, GK: 5, MUTE: 6 };
const Ss = { GA: 0, WI: 1, DR: 2, LS: 3, WR: 4, GL: 5, AS: 6, GK: 7, CS: 8, CP: 9, RL: 10, NK: 11 }

var ModoChatPausado = [];

var players;
var teamR;
var teamB;
var teamS;
var lastTeamTouched;
var lastPlayersTouched; 
var countAFK = false; 
var activePlay = false; 
var goldenGoal = false;
var SMSet = new Set()
var banList = []
var game;
var GKList = ["""", """"];
var Rposs = 0;
var Bposs = 0;
var point = [{ ""x"": 0, ""y"": 0 }, { ""x"": 0, ""y"": 0 }]; 
var ballSpeed;
var lastWinner = Team.SPECTATORS;
var streak = 0;
var allBlues = []; 
var allReds = []; 
var inChooseMode = false; 
var redCaptainChoice = """";
var blueCaptainChoice = """";
var chooseTime = 20;
var timeOutCap;
var checkTimeVariable = false; 
var statNumber = 0;
var endGameVariable = false; 
var resettingTeams = false;
var capLeft = false;
var statInterval = 6;

var bloquear_comando = []
var block_comando = [];
var limit = 30;

let registros = new Map()
var checkregister = []
var checkchat = []
var logins = []

var L1 = [''] 
var L2 = [''] 
var L3 = [''] 
var L4 = ['']
var L5 = ['']
var L6 = [''] 
var L7 = ['']
var L8 = [""""]
var L9 = [""""]
var L10 = [""""]
var L11 = [""""]
var L12 = [""""]
var L13 = [""""]
var L14 = [""""]
var L15 = [""""]

const entradapersonalizadabras = ""O vip premium entrou na sala""
var Bras = [""Astral"", ""isq.cxt""];

const entradapersonalizadafominha = ""O brabo fominha entrou pra arregaçar.""
var fominha = [""Ribagol""];

const entradapersonalizadazum = ""O Trovão faz zuuum e entra na sala ⚡""
var zum = [""""];

const entradapersonalizadazx = ""chegou pra amassar geral""
var zx = [""PnZ"", ""Indio"", ""Fdezinn""];

const entradapersonalizadawaxie = ""Todos se ajoelhem diante dele! o Lord Chegou""
var waxie= [""Indio"", ""PnZ"", ""Fdezinn""];

const puskasoutubro = """"

const cL1 = []
const fL1 = []	
const cL2 = []
const fL2 = []	
const cL3 = []
const fL3 = []	
const cL4 = []
const fL4 = []	
const cL5 = []
const fL5 = []
const cL6 = []
const fL6 = []
const cL7 = []
const fL7 = [] 
const cL8 = []
const fL8 = [] 
const cL9 = []
const fL9 = [] 
const cL10 = []
const fL10 = [] 
const cL11 = []
const fL11 = [] 
const cL12 = []
const fL12 = [] 
const cL13 = []
const fL13 = [] 
const cL14 = []
const fL14 = [] 
const cL15 = []
const fL15 = [] 

const premium = [""Fdezinn"", ""Indio"", ""astral"", ""isq.cxt""]; //MVP+
const supremo = [""Fdezinn"", ""Indio""]; // MVP++
const booster =[""Fdezinn"", ""Indio""];
const vips = [""Indio"",
""Fdezinn"",
""astral"",
""isq.cxt"",
"""",
""""];

const semlimiteafk = ["""",
""Fdezinn"",
""Indio"",
""astral"",
""isq.cxt"",
""Patola|🦆"",
""/Lokis"",
"""",
"""",
"""",
"""",
"""",
"""",
""""];

var jogadoresvips = 
[[""Fdezinn"", ""179.127.249.86""],
[""Indio"", ""189.4.101.28""],
[""astral"", ""189.100.69.21""],
[""isq.cxt"", ""191.191.29.54""],
["""", """"],
["""", """"],
["""", """"],
["""", """"]
];

const verificados = [
'', 
""Fdezinn"",
""Indio"",
""/Lokis"",
""astral"",
""isq.cxt"",
""zero""];

const dono = [
""Fdezinn"",
""Indio"",
""Patola|🦆"",
""lx!"",
""/Lokis"",
"";14 "",
""""];

const staff = [
""Fdezinn"",
""Indio"",
""Patola|🦆"",
""/Lokis"",
""zero"",
""xissㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ"",
""lx!"",
"";14 "",
""""];

const adminF = [""Fdezinn"", ""Indio"", ""Patola|🦆""]
		
const adminG = [
""/Lokis"",
""astral"",
"""",
"""",
""""];

const adminM = [""zero"", ""xissㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ"", ""lx!"", "";14 ""];

const adminE= [""""];

var administradores = 
[[""Fdezinn"", ""179.127.249.86""],
[""Indio"", ""189.4.101.28""],
[""/Lokis"", ""170.233.33.212""],
[""zero"", ""170.82.181.39""],
[""xissㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ"", ""187.13.8.7""],
[""Patola|🦆"", ""170.150.74.253""],
[""lx!"", ""177.54.101.167""],
["";14 "", ""187.15.167.52""],
["""", """"]
];
var WebHookURL = ""https://discord.com/api/webhooks/1175161403804491926/JZ4cQsAlwj77ffPRhPx_MXRT5g-g6-qx4AYieeMKtx5f7rcg3b0UfY4CI0xcGqMR0RXP""
var report = 'https://discord.com/api/webhooks/1175161403804491926/JZ4cQsAlwj77ffPRhPx_MXRT5g-g6-qx4AYieeMKtx5f7rcg3b0UfY4CI0xcGqMR0RXP';
var tempoMensagem = 1000;

var conns = []
var playerConn = []
var tempoDePause = 1000*15; // 5 segundos de pause.
var pausePlayers = []; // Os players que digitarem o comando ""!p"" terão seus Ids puxados para um array ""pausePlayers"".
var pauseGame = true; // Pause = true | unPause = false.
var partida = true; // Partida não iniciada = true | Partida iniciada = false.

var blacklist = [
	{Nick:""Alvaro⁷⁷⁷ #má fase"", ipv4: ""200.97.250.154"", Auth: ""KfXj8OMEmCCfHTErhG026V_hq14yLwbpQXaKHAdlb2I"", Conn: ""3230302E39372E3235302E313534""},
	{Nick:"""", ipv4: ""185.54.230.213"", Auth: ""dA3PhXBNAm3oHi_A9NgHVgreijAlchJnc1GWeVWBaYY"", Conn: ""3138352E35342E3233302E323133""},
	{Nick:""Soukxzy"", ipv4: ""187.183.47.42"", Auth: ""KXx-4JWea09iTJSzN50DLlPvi1Ctah209_JwMd-nDSM"", Conn: ""3138372E3138332E34372E3432""},
	{Nick:""Mao"", ipv4: ""187.16.187.125"", Auth: ""k2tfQ897zpXxTPyx2OnzzZrpB0rHiKLJjXtCRNJ1SPY"", Conn: ""3138372E31362E3138372E313235""}];
	
let votekickTimes = {}; //This holds the amount of votes which the players used.
let votekickCount = {}; //This holds the amount of votes which were done against each of the players.
let linkhaxcolors = 'https://htmlcolorcodes.com/';
let erro = 'Você não tem permissão para executar esse comando.';
let cor_definida = 'você escolheu a cor ';
let fonte_definida = 'você escolheu a fonte ';
let erroapi = 'essa não e uma fonte fornecida pela API, aqui está a lista de todas possiveis \n';
let replaystest = `https://discord.com/api/webhooks/1175162467773591582/-5YisgsHkCK3cKiVHHJpphMpRzt6c1VermnOZw7XSsToc_alVu7Ll3-H-0my-YQiL08Y`;

let
palavras = [
""VADIA"", ""vadia"", ""sua vadia"", ""SUA VADIA"", ""SUA PROSTITUTA"", ""sua prostituta"",
""VAGABUNDA"", ""vagabunda"",""sua vagabunda"", ""SUA VAGABUNDA"",
""filho da puta"",
""FILHO DA PUTA"", 
""pnc"",
""pau no cu"",
""seu lixo"",
""SEU LIXO"",
""PNC"",
""PAU NO CU"",
""desgraça"",
""DESGRAÇA"",
""sua vagabunda"", ""SUA VAGABUNDA"", ""seu vagabundo"", ""SEU VAGABUNDO"",
""Se mata"", ""SE MATA"", ""se mata"", ""seu desgraçado"", ""sua desgraçada"", ""SEU DESGRAÇADO"", ""SUA DESGRAÇADA"",
""se suicida"", ""SE SUICIDA""
],
regex = new RegExp(palavras.join(""|""), 'gi');

let
linkmsg = [
""https://"",
""http://"", 
""http://www""],
link = new RegExp(linkmsg.join(""|""), 'gi');

let
travasmsg = [""ఌ佹砕Ĉ⼈渻䬭॑⬺爂᰾ᜪ䉧ᬯ㍸᜖ᘬ慩㙲Ԑ瀩ञࠣ笋℉⨄㐷紪権ਛൽ㔙怅㬆癕⨴琐ḉ≼崪"", ""ᙻḻ⨂㈿爇䕦ᴵ灾㸏眮ቡᄸ܍礂海學㰌⬦ ѫ⼕ย⌑ḷ㠕ፃ㤕㌋␢眢砬ⵯ煾Ⱘ縂㉰匊㤀ह稫ᝈⴾㄫ㤒"", ""䉊"", ""؈ି"", ""㔞帱ॹࠚⰯἯ浸ἱᔞ፭ਮ娮ف㤮〕"", ""㱳⬗ᅷд甇ᜯ⩿ᤶⱁ戃 椏缁⼐獾⌱മ㈐ᵲ桨ԷᴑĿᑆ㨤ఴ⑸甈⨘Ѳ∯㘴䁔ح฾،ฌ瘪""],
travas = new RegExp(travasmsg.join(""|""), 'gi');

let
travamsg = [""㧫璧�觭䢜潇ကᩨ쀡ఈ泄찉넾﫤㏭�緺"", ""▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓"", ""㧫"", ""璧"", ""懈౩䊀脁潡䣚⾤㸼짠ब"", ""뗲᭾�띀急蔹⹉ꆣせㆉ였鷀Ú錘陈搳窇㉕""],
trava = new RegExp(travamsg.join(""|""), 'gi');

let
sistmsg = [""꧁꧂꧃꧄�꧅ꦸꦹꦺꩵꩶ꩷꩸꩹ꩺ▓▒░▄█▀─█▀██▄█▀█▀█▬쵃쵄쵅쵆쵇쵈쵉쵊쵋쵌쵍쵎쵏�쵐쵑쵒�襤拉"", ""臘"", ""蠟"", ""廊"", ""朗"", ""䱡䱢䱣䱤䱥䱦䱧䱨▉▇█▂▃▄▂▃""];

sist = new RegExp(sistmsg.join(""|""), 'gi');

let
antitrmsg = [""홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수"", ""홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수"", ""홍수홍수홍수홍수홍수홍수홍수홍"", ""수"", ""홍"", ""수"", ""홍"", ""수"", ""홍수홍수홍수홍수홍"", ""수홍수홍수홍수홍수홍수홍수홍수홍수""];
antitr = new RegExp(antitrmsg.join(""|""), 'gi');

let
antitramsg = [""㧫璧�觭䢜潇ကᩨ쀡ఈ泄찉넾saw﫤㏭�緺�堲昸⸐낧懈౩䊀脁潡䣚⾤㸼짠ब꺅�ﹴﯰ﹟ﵿ࿿"", ""빏⿠雴㰯첇브쾞�읨⎘堌�̃㭎掌�䑂吺쏘뗲᭾�띀急蔹♤⹉ꆣせㆉ였鷀ú錘陈搳窇㉕ꙕ鄲欙莚쁃◑첶㘥䅺"", ""ǫ"", ""呡"", ""讬"", ""ꯩ"", ""䌻⨣�馫㷈搊ꌈ恘㠄陌颓̌谆"", ""鞿å 䆔⽪ﭓ櫆陗썆㾑쾛炦͝薐�翺￧祋ۓ""];
antitra = new RegExp(antitramsg.join(""|""), 'gi');

let
antitravamsg = ["" ▁▂▃▄▅▆▇█▉㑈㑉㑊㑋㑌㑍㑎㑏㑐㑑㑒㑓㑔㑕㑖㑗"", ""㑘㑙㑚㑛㑜㑝㑞㑟㑠㑢㑣㑤㑥㑦㑧㑨㑩㑪㑫㑬㑭㑮㑯㑰㑱㑲㑳㑴㑵㑶㑷㑸㑹㑺㑻㑼㑽㑾㒀㒁"", ""꧁꧂꧃꧄�꧅ꦸꦹꦺꦻꩵꩶ꩷꩸꩹ꩺ"", ""▓▒░"", ""▄█▀"", ""─█▀██"", ""▄█▀█▀█▬"", ""쵃쵄쵅쵆쵇쵈쵉쵊쵋쵌쵍쵎쵏�쵐쵑쵒�"", ""襤拉臘蠟廊朗䱡䱢䱣䱤䱥䱦䱧䱨▉▇█▂▃▄▂▃""];
antitrava = new RegExp(antitravamsg.join(""|""), 'gi');

let
racmsg = [
        ""maskeiko"",
        ""MACACA"",
        ""Macaco"",
        ""MACACO"",
        ""macaca"",
        ""macaco"",
	""sua macaca"",
	""sua negra"",
	""sua preta"",
	""SUA PRETA"",
	""SUA NEGRA"",
	""SUA MACACA"",
	""seu macaco"",
	""seu negro"",
	""seu preto"",
	""SEU PRETO"",
	""SEU NEGRO"",
	""SEU MACACO"",
	""voce é macaco"",
	""voce é preto"",
	""voce é negro"",
	""VOCE É MACACO"",
	""VOCE É PRETO"",
	""VOCE É NEGRO"",
	""voce e macaco"",
	""voce e preto"",
	""voce e negro"",
	""VOCE e MACACO"",
	""VOCE e PRETO"",
	""VOCE e NEGRO"",
	""preto macaco"",
	""macaco preto"",
	""seu macaco preto"",
	""seu preto macaco"",
	""seu negro macaco preto"",
	""seu macaco preto negro"",
	""seu preto negro macaco"",
	""SEU NEGRO MACACO PRETO"",
	""SEU MACACO PRETO NEGRO"",
	""SEU PRETO NEGRO MACACO"",
	""seu marrom"",
	""SEU MARROM"",
	""sua marrom"",
	""SUA MARROM"",
	""seu macaquinho"",
	""SEU MACAQUINHO"",
	""sua macaquinha"",
	""SUA MACAQUINHA""];
racismo = new RegExp(racmsg.join(""|""), 'gi');

function autobans(message) {

    var request = new XMLHttpRequest();
    request.open(""POST"",""https://discord.com/api/webhooks/1175161196924641280/wRLsVShjBoPdf0Gjzzb4StBPE6ImYFNvJmd4biLbqXaGVDCnZP7yLMcJ2PDu2Z9e4pFX"");

    request.setRequestHeader('Content-type', 'application/json');

    var params = {
		embeds: [
			{
				fields: [],
				title: ""Banimento auto aplicado"",
				color: 16777215,
				footer: {
					text: ""© APOLLO 2023 all reseverd.""
				},
				author: { ""name"": roomNameString },
				image: {
					url: ""https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&=""
				},
				thumbnail: {
					url: ""https://media.discordapp.net/attachments/1114717413754273813/1174450725993062511/OIG.png?ex=6567a379&is=65552e79&hm=9d35f0c6273adfbd7bc3b20647a134bf1ec52ab03c6206c6b0866e3aeb846397&=&width=425&height=425""
				}
			}
		],
        avatar_url: 'https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&=',
        username: 'APOLLO',
        content: message
    };

    request.send(JSON.stringify(params));
}

let Cor = {
	Vermelho: 0xFA5646,
	Laranja: 0xFFC12F,
	Verde: 0x7DFA89,
	Azul: 0x05C5FF,
	Amrelo: 0xFFFF17,
	Cinza: 0xCCCCCC,
	Branco: 0xFFFFFF,
	Azulclaro: 0x6ECAFF,
	Powderblue: 0xB0E0E6,
	Roxo: 0x800080,
	Platina: 0xE5E4E2,
	Ouro: 0xffd700,
	Prata: 0xd5d5d5,
	Bronze: 0x896728,
	Thistle: 0xD8BFD8,
	Khaki: 0xF0E68C,
	AliceBlue: 0xF0F8FF,
	GhostWhite: 0xF8F8FF,
	Snow: 0xFFFAFA,
	Seashell:0xFFF5EE,
	FloralWhite: 0xFFFAF0,
	WhiteSmoke: 0xF5F5F5,
	Beige: 0xF5F5DC,
	OldLace:	0xFDF5E6,
	Ivory:	0xFFFFF0,
	Linen:	0xFAF0E6,
	Cornsilk: 0xFFF8DC,
	AntiqueWhite: 0xFAEBD7,
	BlanchedAlmond: 0xFFEBCD,
	Bisque: 0xFFE4C4,
	LightYellow: 0xFFFFE0,
	LemonChiffon: 0xFFFACD,
	LightGoldenrodYellow: 0xFAFAD2,
	PapayaWhip: 0xFFEFD5,
	PeachPuff: 0xFFDAB9,
	Moccasin: 0xFFE4B5,
	PaleGoldenrod: 0xEEE8AA,
	Azulescuro: 0x426AD6
	}

	var spamArray = [0, 0, 0, 0, 0, 0]
	var mutado = []
	
	var info = {
		amarelo: 0xFFFF17,
		vermelho: 0xFA5646,
		negrito: 'bold',
		desmutar: 240000,
	}
	
	function detectarspam(player, message) {
		spamArray.push(player.id)
		
		if (mutado.includes(player.name) == false && spamArray[spamArray.length - 1] === player.id && spamArray[spamArray.length - 2] === player.id) {
		setTimeout(_ => {  if (spamArray[spamArray.length - 2] === player.id){ player.id = spamArray[spamArray.length = 0];	}}, info.desmutar - 230000) }
	
		if (mutado.includes(player.name) == false && spamArray[spamArray.length - 1] === player.id && spamArray[spamArray.length - 2] === player.id && spamArray[spamArray.length - 3] === player.id) {
		setTimeout(_ => {  if (spamArray[spamArray.length - 3] === player.id){ player.id = spamArray[spamArray.length = 0];	}}, info.desmutar - 230000) }
	
		if (mutado.includes(player.name) == false && spamArray[spamArray.length - 1] === player.id && spamArray[spamArray.length - 2] === player.id && spamArray[spamArray.length - 3] === player.id && spamArray[spamArray.length - 4] === player.id) {
		setTimeout(_ => {  if (spamArray[spamArray.length - 4] === player.id){ player.id = spamArray[spamArray.length = 0];	}}, info.desmutar - 230000) }
		
		if (mutado.includes(player.name) == false && spamArray[spamArray.length - 1] === player.id && spamArray[spamArray.length - 2] === player.id && spamArray[spamArray.length - 3] === player.id && spamArray[spamArray.length - 4] === player.id && spamArray[spamArray.length - 5] === player.id) {
		room.sendAnnouncement(""[PV] Você pode ser punido por fazer 'SPAM', escreva devagar!"", player.id, info.vermelho, info.negrito)
		setTimeout(_ => {  if (spamArray[spamArray.length - 5] === player.id){ player.id = spamArray[spamArray.length = 0];	}}, info.desmutar - 230000) }
		
		if (mutado.includes(player.name) == false && spamArray[spamArray.length - 1] === player.id && spamArray[spamArray.length - 2] === player.id && spamArray[spamArray.length - 3] === player.id && spamArray[spamArray.length - 4] === player.id && spamArray[spamArray.length - 5] === player.id && spamArray[spamArray.length - 6] === player.id) {
		room.sendAnnouncement(player.name + ""🚫 foi mutado por fazer spam 🚫 "", null, info.amarelo, info.negrito)
		mutado.push(player.name)
		
		setTimeout(() => {
		var remover = mutado.indexOf(player.name) + mutado.splice(remover, 1)
		room.sendAnnouncement('[PV] você foi desmutado, chat liberado.', player.id, info.amarelo, info.negrito)
		}, info.desmutar) // temporizador
		
		}
	}

let RecSistem = {
    getCustomDate: ()=>{
        let
        data = new Date().toLocaleDateString().split(""/"").join(""-""),
        relogio = new Date().toLocaleTimeString().split("":"");

        return `${data}-${relogio[0]}h${relogio[1]}m`;
    },
    getScoresTime: time=>{
        return ~~(Math.trunc(time) / 60) + "":"" + (Math.trunc(time)%60).toString().padStart(2, '0');
    },
    sendDiscordWebhook: scores=>{
        let
        red = room.getPlayerList().filter((player)=>player.team == 1).map((player)=> player.name),
        blue = room.getPlayerList().filter((player)=>player.team == 2).map((player)=> player.name);

        let form = new FormData();
        form.append(null, new File( [room.stopRecording()], `${getDate()}`+`${cod}${cod1}${cod2}${cod3}${cod4}.hbr2`, {""type"": ""text/plain""} ));
        form.append(""payload_json"", JSON.stringify(RecSistem.getParams(scores, red, blue)));

        let xhr = new XMLHttpRequest();
        xhr.open(""POST"", replaystest);
        xhr.send(form);
    },
    getParams: (scores, red, blue)=>{
        let params = {
          ""username"": ""APOLLO REPLAYS"",
          ""avatar_url"": ""https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&="",
          ""content"": ""----------------------------------------------------------------------------------"",
          ""embeds"": [{
            ""title"": ""-------- APOLLO --------"",
			color: 16777215,
            ""description"": ""REPLAY - 2023"",
            ""timestamp"": null,
            ""author"": { ""name"": roomNameString },
			image: {
				url: ""https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&=""
			},
			thumbnail: {
				url: ""https://media.discordapp.net/attachments/1114717413754273813/1174450725993062511/OIG.png?ex=6567a379&is=65552e79&hm=9d35f0c6273adfbd7bc3b20647a134bf1ec52ab03c6206c6b0866e3aeb846397&=&width=425&height=425""
			},
            ""footer"": {
                ""text"": `${getDate()}`+`${cod}${cod1}${cod2}${cod3}${cod4}`,
            },
            ""fields"": [
            { ""name"": ""RED"", ""value"": `${red.join(""\n"")}\n**GOLS**\n${scores.red}`, ""inline"": true },
            { ""name"": ""BLUE"", ""value"": `${blue.join(""\n"")}\n**GOLS**\n${scores.blue}`, ""inline"": true },
            { ""name"": ""Tempo que durou a partida"", ""value"": RecSistem.getScoresTime(scores.time) },
            ]
        }],
        ""components"": []
    };
    return params;
}
};
//FIM LET'S

//CONST'S	

const votedPlayers = new Set() //The set of players which were voted.
const disc = 'https://discord.gg/BfwezkPMEN';
const comandovip = 'Comando exclusivo para VIPS';
const capitães = 'Apenas capitães do time podem escolher uniforme.';
const capitãespausar = 'Apenas capitães do time podem pausar a partida.';
const corsucesso = 'Cor alterada com sucesso.'
const PnZ = [""""];

const resetarAvatarEm = 3;
const fontsdisp = [""normal"", ""bold"", ""italic"", ""small""];
const Negrito = 'bold';
const Italic = 'italic';
const Normal = 'normal';

const frasesGOL = [
"" GOLAÇO DE "",
"" UM BELISSIMO GOL DE "",
"" QUE FINALIZAÇÃO SENHORES, É DE "",
"" UMA BELA FINALIZAÇÃO DE "",
"" A-DI-VI-NHA, GOLLLLLLLLLLLL DE ""

]; // Frases de gol

  const frasesASS = [
"", GRANDE PASSE DE "",
"", PASSE MONSTRUOSO DE "",
"", QUE ASSISTENCIA FENOMENAL DE "",
]; // Frases de assistencias

  const golcontra = [
"" GOL CONTRA, QUE ISSO ""]; // Frases de gol contra
	

  const WINRED = [
"" RED VENCEU O BLUE MAIS UMA VEZ, POR "",
"" RED É PAI DO BLUE, VENCEU POR "",
"" GRANDE VITÓRIA DO RED, PLACAR: "" ];

  const WINBLUE = [
"" BLUE VENCEU O RED MAIS UMA VEZ, POR "",
"" BLUE É PAI DO RED, VENCEU POR "",
"" GRANDE VITÓRIA DO BLUE, PLACAR: "" ];
  
  const sbt = [
	"" UHHHHHHHHHHHHHHHHHHHHHH"",
	"" SERÁ QUE VAI SAIR UM GOL?"",
	"" HOJE VAI TER ZEBRA, PODE TER CERTEZA!!"",
	"" EM PLENO 2023, OS TIMES ESTÃO MUITO RUIM""
];

const oemessagem = [
	' OPA, VAI PARA AONDE?!',
	' CREDO, QUE OEEEE FOI ESSE',
	' NUSSAAAAA, PASSOU LOTADOOOO',
	' EPAAAAA, PASSOU VOANDO AQUI EM MARTE!',
	' RECEBAAAA, E RECEBEU UM OE INCRIVEL',
	' WOWWWW, ESSE BETA LEVOU UM OE',
	' HAHAHAHA, O CARA PASSOU LOTADO',
	' SEM COMENTÁRIOS PARA ESSE OE',
	' F, ESSE PASSOU LOTADO NA VELOCIDADE DA LUZ',
	"" SENHORRRRRR, QUE OEEEEE FOI ESSEEEEEE!""
];

const code = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];
const code1 = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];
const code2 = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];
const code3 = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];
const code4 = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];


var cod = code[(Math.random() * code.length) | 0]
var cod1 = code1[(Math.random() * code.length) | 0]
var cod2 = code2[(Math.random() * code.length) | 0]
var cod3 = code3[(Math.random() * code.length) | 0]
var cod4 = code4[(Math.random() * code.length) | 0]


const URLs = {
	chat: ""https://discord.com/api/webhooks/1175162191377350726/mh7DyyDrviii_VmjBuRT1JO5qx_AbipUD0gl3K-0mknO8Kzl_j1ItmObwXBsZ7bbn-_-""
};

room.setTeamsLock(true)
var Mapa = `{
	""name"": ""APOLLO X3"",
	""width"": 640,
	""height"": 290,
	""spawnDistance"": 350,
	""bg"": {
		""type"": """",
		""width"": 550,
		""height"": 240,
		""kickOffRadius"": 80,
		""cornerRadius"": 0,
		""color"": ""2E2E2E""
	},
	""vertexes"": [
		{
			""x"": 550,
			""y"": 240,
			""trait"": ""ballArea"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": -240,
			""trait"": ""ballArea"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 0,
			""y"": 80,
			""bCoef"": 0.15,
			""trait"": ""kickOffBarrier"",
			""color"": ""7A7A7A"",
			""vis"": true,
			""curve"": 180
		},
		{
			""x"": 0,
			""y"": -80,
			""bCoef"": 0.15,
			""trait"": ""kickOffBarrier"",
			""color"": ""7A7A7A"",
			""vis"": true,
			""curve"": 180
		},
		{
			""x"": -550,
			""y"": -80,
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""curve"": 0,
			""color"": ""000000"",
			""pos"": [
				-700,
				-80
			]
		},
		{
			""x"": -590,
			""y"": -80,
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""curve"": 0,
			""color"": ""000000"",
			""pos"": [
				-700,
				-80
			]
		},
		{
			""x"": -590,
			""y"": 80,
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""curve"": 0,
			""color"": ""000000"",
			""pos"": [
				-700,
				80
			]
		},
		{
			""x"": -550,
			""y"": 80,
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""curve"": 0,
			""color"": ""000000"",
			""pos"": [
				-700,
				80
			]
		},
		{
			""x"": 550,
			""y"": -80,
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""curve"": 0,
			""color"": ""000000"",
			""pos"": [
				700,
				-80
			]
		},
		{
			""x"": 590,
			""y"": -80,
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""curve"": 0,
			""color"": ""000000"",
			""pos"": [
				700,
				-80
			]
		},
		{
			""x"": 590,
			""y"": 80,
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""curve"": 0,
			""color"": ""000000"",
			""pos"": [
				700,
				80
			]
		},
		{
			""x"": 550,
			""y"": 80,
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""curve"": 0,
			""color"": ""000000"",
			""pos"": [
				700,
				80
			]
		},
		{
			""x"": -550,
			""y"": 80,
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A"",
			""pos"": [
				-700,
				80
			]
		},
		{
			""x"": -550,
			""y"": 240,
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -550,
			""y"": -80,
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A"",
			""pos"": [
				-700,
				-80
			]
		},
		{
			""x"": -550,
			""y"": -240,
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -550,
			""y"": 240,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A"",
			""curve"": -0.3535876431154097,
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": 550,
			""y"": 240,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A"",
			""curve"": -0.3535876431154097,
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": 550,
			""y"": 80,
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""pos"": [
				700,
				80
			],
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": 240,
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": -240,
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": -80,
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A"",
			""pos"": [
				700,
				-80
			]
		},
		{
			""x"": 550,
			""y"": -240,
			""bCoef"": 0,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": -240,
			""bCoef"": 0,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -550,
			""y"": -240,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""curve"": 0,
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": -240,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""curve"": 0,
			""color"": ""7A7A7A""
		},
		{
			""x"": 0,
			""y"": -239,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""color"": ""2E2E2E""
		},
		{
			""x"": 0,
			""y"": -80,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 0,
			""y"": 80,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""color"": ""7A7A7A"",
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": 0,
			""y"": 240,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""color"": ""2E2E2E"",
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": 0,
			""y"": -80,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true,
			""color"": ""7A7A7A""
		},
		{
			""x"": 0,
			""y"": 80,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true,
			""color"": ""7A7A7A""
		},
		{
			""x"": 0,
			""y"": 80,
			""trait"": ""kickOffBarrier"",
			""color"": ""7A7A7A"",
			""vis"": true,
			""curve"": -180
		},
		{
			""x"": 0,
			""y"": -80,
			""trait"": ""kickOffBarrier"",
			""color"": ""7A7A7A"",
			""vis"": true,
			""curve"": -180
		},
		{
			""x"": 0,
			""y"": 80,
			""trait"": ""kickOffBarrier"",
			""color"": ""7A7A7A"",
			""vis"": true,
			""curve"": 0
		},
		{
			""x"": 0,
			""y"": -80,
			""trait"": ""kickOffBarrier"",
			""color"": ""7A7A7A"",
			""vis"": true,
			""curve"": 0
		},
		{
			""x"": -557.5,
			""y"": 80,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""curve"": 0,
			""vis"": false,
			""pos"": [
				-700,
				80
			],
			""color"": ""7A7A7A""
		},
		{
			""x"": -557.5,
			""y"": 240,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""curve"": 0,
			""vis"": false,
			""color"": ""7A7A7A""
		},
		{
			""x"": -557.5,
			""y"": -240,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""vis"": false,
			""curve"": 0,
			""color"": ""7A7A7A""
		},
		{
			""x"": -557.5,
			""y"": -80,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""vis"": false,
			""curve"": 0,
			""pos"": [
				-700,
				-80
			],
			""color"": ""7A7A7A""
		},
		{
			""x"": 557.5,
			""y"": -240,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""vis"": false,
			""curve"": 0,
			""color"": ""7A7A7A""
		},
		{
			""x"": 557.5,
			""y"": -80,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""vis"": false,
			""curve"": 0,
			""pos"": [
				700,
				-80
			],
			""color"": ""7A7A7A""
		},
		{
			""x"": 557.5,
			""y"": 80,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""curve"": 0,
			""vis"": false,
			""pos"": [
				700,
				80
			],
			""color"": ""7A7A7A""
		},
		{
			""x"": 557.5,
			""y"": 240,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""curve"": 0,
			""vis"": false,
			""color"": ""7A7A7A""
		},
		{
			""x"": 0,
			""y"": -80,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 0,
			""y"": 80,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -550,
			""y"": -80,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -550,
			""y"": 80,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": -80,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": 80,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -550,
			""y"": 200,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A"",
			""curve"": -90
		},
		{
			""x"": -390,
			""y"": 70,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A"",
			""curve"": 0
		},
		{
			""x"": -550,
			""y"": 226,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""curve"": -90,
			""color"": ""7A7A7A""
		},
		{
			""x"": -536,
			""y"": 240,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""curve"": -90,
			""color"": ""7A7A7A""
		},
		{
			""x"": -550,
			""y"": -200,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A"",
			""curve"": 90
		},
		{
			""x"": -390,
			""y"": -70,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A"",
			""curve"": 0
		},
		{
			""x"": -550,
			""y"": -226,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""curve"": 90,
			""color"": ""7A7A7A""
		},
		{
			""x"": -536,
			""y"": -240,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""curve"": 90,
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": -226,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""curve"": -90,
			""color"": ""7A7A7A""
		},
		{
			""x"": 536,
			""y"": -240,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""curve"": -90,
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": 226,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""curve"": 90,
			""color"": ""7A7A7A""
		},
		{
			""x"": 536,
			""y"": 240,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""curve"": 90,
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": 200,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A"",
			""curve"": 90
		},
		{
			""x"": 390,
			""y"": 70,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A"",
			""curve"": 90
		},
		{
			""x"": 550,
			""y"": -200,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A"",
			""curve"": -90
		},
		{
			""x"": 390,
			""y"": -70,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A"",
			""curve"": -90
		},
		{
			""x"": 390,
			""y"": 70,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A"",
			""curve"": 0
		},
		{
			""x"": 390,
			""y"": -70,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A"",
			""curve"": 0
		},
		{
			""x"": -550.5714302062988,
			""y"": -80.42856979370117,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""FF4040"",
			""curve"": 0
		},
		{
			""x"": 550.5714302062988,
			""y"": -80.42856979370117,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""4D52FF"",
			""curve"": 0
		},
		{
			""x"": -550.5714302062988,
			""y"": 78.42856979370117,
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""x"": 550.5714302062988,
			""y"": 80.42856979370117,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""4D52FF"",
			""curve"": 0
		},
		{
			""x"": -550.5714302062988,
			""y"": -26.428569793701172,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""FF7373"",
			""curve"": 0
		},
		{
			""x"": 550.5714302062988,
			""y"": -26.428569793701172,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""8293FF"",
			""curve"": 0
		},
		{
			""x"": -550.5714302062988,
			""y"": 22.428569793701172,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""FF7373""
		},
		{
			""x"": 550.5714302062988,
			""y"": 26.428569793701172,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""8293FF"",
			""curve"": 0
		},
		{
			""x"": 0.3333320617675781,
			""y"": -291.33333587646484,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier""
		},
		{
			""x"": -0.3333320617675781,
			""y"": -291.33333587646484,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier""
		},
		{
			""x"": 0,
			""y"": -285.6666717529297,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""color"": ""2E2E2E""
		},
		{
			""x"": -42.00960219478736,
			""y"": 43.72427983539095,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -13.717421124828519,
			""y"": -51.44032921810699,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 34.29355281207134,
			""y"": 36.0082304526749,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 55.72702331961591,
			""y"": -46.29629629629628,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 10.288065843621382,
			""y"": -48.868312757201636,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 59.15637860082302,
			""y"": 5.144032921810701,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -37,
			""y"": 31,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 10,
			""y"": -12,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -42,
			""y"": 35,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 9,
			""y"": -7,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -34,
			""y"": 39,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 10,
			""y"": -2,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -590,
			""y"": -80,
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""curve"": -34.30899670281414,
			""color"": ""000000"",
			""pos"": [
				700,
				-80
			]
		},
		{
			""x"": -590,
			""y"": 80,
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""curve"": -34.30899670281414,
			""color"": ""000000"",
			""pos"": [
				700,
				80
			]
		},
		{
			""x"": -99.10743556474034,
			""y"": 285.27206212636275,
			""cMask"": [
				""ball""
			],
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": -79.99665939203257,
			""y"": 246.3154799281507,
			""cMask"": [
				""ball""
			],
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": -62.35594292491769,
			""y"": 285.27206212636275,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": 23.13648964119558,
			""y"": 242.9121670288802,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": 21.66642993560268,
			""y"": 281.8687492270922,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": 40.84696866890255,
			""y"": 281.8687492270922,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": -51.414477177399945,
			""y"": 284.86399517208076,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": -50.02489671314589,
			""y"": 246.88212914913666,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": -50.87572191688402,
			""y"": 263.0564636185021,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": -50.87572191688402,
			""y"": 247.12264066088437,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": -8.557042570304588,
			""y"": 252.01151576840815,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true,
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": -9.020236058389273,
			""y"": 283.9642666102407,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true,
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": -8.557042570304588,
			""y"": 283.9642666102407,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true,
			""_data"": {
				""mirror"": {}
			},
			""_selected"": ""segment""
		},
		{
			""x"": -8.557042570304588,
			""y"": 252.01151576840815,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true,
			""_data"": {
				""mirror"": {}
			},
			""_selected"": ""segment""
		},
		{
			""x"": 54.19363810590804,
			""y"": 242.9121670288802,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": 54.19363810590804,
			""y"": 281.8687492270922,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": 72.72137762929542,
			""y"": 281.8687492270922,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": 102.48773068070405,
			""y"": 252.01151576840815,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true
		},
		{
			""x"": 102.02453719261936,
			""y"": 282.86117283622406,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true
		},
		{
			""x"": 102.02453719261936,
			""y"": 282.86117283622406,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true
		},
		{
			""x"": 102.02453719261936,
			""y"": 252.01151576840815,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true
		},
		{
			""x"": -64.72954265929657,
			""y"": 256.5354880853103,
			""cMask"": [
				""ball""
			],
			""_data"": {
				""mirror"": {}
			}
		}
	],
	""segments"": [
		{
			""v0"": 4,
			""v1"": 5,
			""curve"": 0,
			""color"": ""000000"",
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""pos"": [
				-700,
				-80
			],
			""y"": -80
		},
		{
			""v0"": 6,
			""v1"": 7,
			""curve"": 0,
			""color"": ""000000"",
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""pos"": [
				-700,
				80
			],
			""y"": 80
		},
		{
			""v0"": 8,
			""v1"": 9,
			""curve"": 0,
			""color"": ""000000"",
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""pos"": [
				700,
				-80
			],
			""y"": -80
		},
		{
			""v0"": 9,
			""v1"": 10,
			""curve"": 34.16936245547304,
			""color"": ""000000"",
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""x"": 590
		},
		{
			""v0"": 10,
			""v1"": 11,
			""curve"": 0,
			""color"": ""000000"",
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""pos"": [
				700,
				80
			],
			""y"": 80
		},
		{
			""v0"": 2,
			""v1"": 3,
			""curve"": 180,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.15,
			""cGroup"": [
				""blueKO""
			],
			""trait"": ""kickOffBarrier""
		},
		{
			""v0"": 2,
			""v1"": 3,
			""curve"": -180,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.15,
			""cGroup"": [
				""redKO""
			],
			""trait"": ""kickOffBarrier""
		},
		{
			""v0"": 12,
			""v1"": 13,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""x"": -550
		},
		{
			""v0"": 14,
			""v1"": 15,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""x"": -550
		},
		{
			""v0"": 16,
			""v1"": 17,
			""curve"": -0.3535876431154097,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""y"": 240,
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						-550,
						240
					],
					""b"": [
						550,
						240
					],
					""curve"": -0.3535876431154097,
					""radius"": 178245.64490260708,
					""center"": [
						0,
						-178004.7963525059
					],
					""from"": 1.5677106925115314,
					""to"": 1.573881961078262
				}
			}
		},
		{
			""v0"": 18,
			""v1"": 19,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""x"": 550
		},
		{
			""v0"": 20,
			""v1"": 21,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""x"": 550
		},
		{
			""v0"": 22,
			""v1"": 23,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""x"": 550,
			""y"": -240
		},
		{
			""v0"": 24,
			""v1"": 25,
			""curve"": 0,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""y"": -240
		},
		{
			""v0"": 26,
			""v1"": 27,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier""
		},
		{
			""v0"": 28,
			""v1"": 29,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						0,
						80
					],
					""b"": [
						0,
						240
					],
					""radius"": null,
					""center"": [
						null,
						null
					],
					""from"": null,
					""to"": null
				}
			}
		},
		{
			""v0"": 36,
			""v1"": 37,
			""curve"": 0,
			""vis"": false,
			""color"": ""7A7A7A"",
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""x"": -557.5
		},
		{
			""v0"": 38,
			""v1"": 39,
			""curve"": 0,
			""vis"": false,
			""color"": ""7A7A7A"",
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""x"": -557.5
		},
		{
			""v0"": 40,
			""v1"": 41,
			""curve"": 0,
			""vis"": false,
			""color"": ""7A7A7A"",
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""x"": 557.5
		},
		{
			""v0"": 42,
			""v1"": 43,
			""curve"": 0,
			""vis"": false,
			""color"": ""7A7A7A"",
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""x"": 557.5
		},
		{
			""v0"": 50,
			""v1"": 51,
			""curve"": -90,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 53,
			""v1"": 52,
			""curve"": -90,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 54,
			""v1"": 55,
			""curve"": 90,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 51,
			""v1"": 55,
			""curve"": 0,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 57,
			""v1"": 56,
			""curve"": 90,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 59,
			""v1"": 58,
			""curve"": -90,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 61,
			""v1"": 60,
			""curve"": 90,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 62,
			""v1"": 63,
			""curve"": 90,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 64,
			""v1"": 65,
			""curve"": -90,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 66,
			""v1"": 67,
			""curve"": 0,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""trait"": ""line"",
			""x"": 390
		},
		{
			""v0"": 72,
			""v1"": 74,
			""curve"": 0,
			""vis"": true,
			""color"": ""FF7373"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 73,
			""v1"": 75,
			""curve"": 0,
			""vis"": true,
			""color"": ""8293FF"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 74,
			""v1"": 70,
			""curve"": 0,
			""vis"": true,
			""color"": ""FF4040"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 75,
			""v1"": 71,
			""curve"": 0,
			""vis"": true,
			""color"": ""4D52FF"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 72,
			""v1"": 68,
			""curve"": 0,
			""vis"": true,
			""color"": ""FF4040"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 73,
			""v1"": 69,
			""curve"": 0,
			""vis"": true,
			""color"": ""4D52FF"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 26,
			""v1"": 78,
			""vis"": true,
			""color"": ""2E2E2E"",
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""x"": 0
		},
		{
			""v0"": 79,
			""v1"": 80,
			""color"": ""7A7A7A"",
			""trait"": ""line""
		},
		{
			""v0"": 80,
			""v1"": 81,
			""color"": ""7A7A7A"",
			""trait"": ""line""
		},
		{
			""v0"": 79,
			""v1"": 82,
			""color"": ""7A7A7A"",
			""trait"": ""line""
		},
		{
			""v0"": 83,
			""v1"": 84,
			""curve"": 105.98430261137086,
			""color"": ""7A7A7A"",
			""trait"": ""line""
		},
		{
			""v0"": 91,
			""v1"": 92,
			""curve"": -34.30899670281414,
			""color"": ""000000"",
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""x"": -590
		},
		{
			""v0"": 93,
			""v1"": 94,
			""cMask"": [
				""ball""
			],
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						-99.10743556474034,
						285.27206212636275
					],
					""b"": [
						-79.99665939203257,
						246.3154799281507
					],
					""curve"": -11.580583034901748,
					""radius"": 215.04932021446746,
					""center"": [
						-281.63597664240604,
						171.56391898453032
					],
					""from"": 0.3550123447197935,
					""to"": 0.5571316479794265
				}
			},
			""curve"": -11.580583034901748
		},
		{
			""v0"": 94,
			""v1"": 95,
			""cMask"": [
				""ball""
			]
		},
		{
			""v0"": 96,
			""v1"": 97,
			""cMask"": [
				""ball""
			]
		},
		{
			""v0"": 97,
			""v1"": 98,
			""cMask"": [
				""ball""
			],
			""y"": 281.8687492270922
		},
		{
			""v0"": 99,
			""v1"": 100,
			""cMask"": [
				""ball""
			]
		},
		{
			""v0"": 101,
			""v1"": 102,
			""curve"": -217.55096872885548,
			""cMask"": [
				""ball""
			]
		},
		{
			""v0"": 103,
			""v1"": 104,
			""curve"": 182.72621800529865,
			""vis"": true,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						-8.557042570304588,
						252.01151576840815
					],
					""b"": [
						-9.020236058389273,
						283.9642666102407
					],
					""curve"": 182.72621800529865,
					""radius"": 15.982576819627445,
					""center"": [
						-8.4084777915851,
						267.9934020870445
					],
					""from"": -1.5800918815688385,
					""to"": 1.6090822523405661
				}
			}
		},
		{
			""v0"": 105,
			""v1"": 106,
			""curve"": 182.72621800529865,
			""vis"": true,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						-8.557042570304588,
						283.9642666102407
					],
					""b"": [
						-8.557042570304588,
						252.01151576840815
					],
					""curve"": 182.72621800529865,
					""radius"": 15.980897796226841,
					""center"": [
						-8.937204093066422,
						267.98789118932444
					],
					""from"": 1.547005586635091,
					""to"": -1.547005586635091
				}
			},
			""_selected"": true
		},
		{
			""v0"": 107,
			""v1"": 108,
			""cMask"": [
				""ball""
			]
		},
		{
			""v0"": 108,
			""v1"": 109,
			""cMask"": [
				""ball""
			]
		},
		{
			""v0"": 110,
			""v1"": 111,
			""curve"": 182.72621800529865,
			""vis"": true,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier""
		},
		{
			""v0"": 112,
			""v1"": 113,
			""curve"": 182.72621800529865,
			""vis"": true,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier""
		},
		{
			""v0"": 93,
			""v1"": 114,
			""cMask"": [
				""ball""
			],
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						-99.10743556474034,
						285.27206212636275
					],
					""b"": [
						-64.72954265929657,
						256.5354880853103
					],
					""radius"": null,
					""center"": [
						null,
						null
					],
					""from"": null,
					""to"": null
				}
			}
		}
	],
	""goals"": [
		{
			""p0"": [
				-557.5,
				-80
			],
			""p1"": [
				-557.5,
				80
			],
			""team"": ""red"",
			""color"": ""7A7A7A""
		},
		{
			""p0"": [
				557.5,
				80
			],
			""p1"": [
				557.5,
				-80
			],
			""team"": ""blue"",
			""color"": ""7A7A7A""
		}
	],
	""discs"": [
		{
			""radius"": 5,
			""pos"": [
				-550,
				80
			],
			""color"": ""CFCFCF"",
			""trait"": ""goalPost"",
			""y"": 80
		},
		{
			""radius"": 5,
			""pos"": [
				-550,
				-80
			],
			""color"": ""CFCFCF"",
			""trait"": ""goalPost"",
			""y"": -80,
			""x"": -560
		},
		{
			""radius"": 5,
			""pos"": [
				550,
				80
			],
			""color"": ""CFCFCF"",
			""trait"": ""goalPost"",
			""y"": 80
		},
		{
			""radius"": 5,
			""pos"": [
				550,
				-80
			],
			""color"": ""CFCFCF"",
			""trait"": ""goalPost"",
			""y"": -80
		},
		{
			""radius"": 3,
			""invMass"": 0,
			""pos"": [
				-550,
				240
			],
			""color"": ""FFCC00"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""radius"": 3,
			""invMass"": 0,
			""pos"": [
				-550,
				-240
			],
			""color"": ""FFCC00"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""radius"": 3,
			""invMass"": 0,
			""pos"": [
				550,
				-240
			],
			""color"": ""FFCC00"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""radius"": 3,
			""invMass"": 0,
			""pos"": [
				550,
				240
			],
			""color"": ""FFCC00"",
			""bCoef"": 0.1,
			""trait"": ""line""
		}
	],
	""planes"": [
		{
			""normal"": [
				0,
				1
			],
			""dist"": -240,
			""bCoef"": 1,
			""trait"": ""ballArea"",
			""vis"": false,
			""curve"": 0,
			""_data"": {
				""extremes"": {
					""normal"": [
						0,
						1
					],
					""dist"": -240,
					""canvas_rect"": [
						-940.3699691520002,
						-427.5744703488001,
						940.3699691520002,
						427.5744703488001
					],
					""a"": [
						-940.3699691520002,
						-240
					],
					""b"": [
						940.3699691520002,
						-240
					]
				}
			}
		},
		{
			""normal"": [
				0,
				-1
			],
			""dist"": -240.58349039526215,
			""bCoef"": 1,
			""trait"": ""ballArea"",
			""_data"": {
				""extremes"": {
					""normal"": [
						0,
						-1
					],
					""dist"": -240.58349039526215,
					""canvas_rect"": [
						-940.3699691520002,
						-427.5744703488001,
						940.3699691520002,
						427.5744703488001
					],
					""a"": [
						-940.3699691520002,
						240.58349039526215
					],
					""b"": [
						940.3699691520002,
						240.58349039526215
					]
				}
			}
		},
		{
			""normal"": [
				0,
				1
			],
			""dist"": -291,
			""bCoef"": 0.1,
			""_data"": {
				""extremes"": {
					""normal"": [
						0,
						1
					],
					""dist"": -291,
					""canvas_rect"": [
						-940.3699691520002,
						-427.5744703488001,
						940.3699691520002,
						427.5744703488001
					],
					""a"": [
						-940.3699691520002,
						-291
					],
					""b"": [
						940.3699691520002,
						-291
					]
				}
			}
		},
		{
			""normal"": [
				0,
				-1
			],
			""dist"": -290.61041953574596,
			""bCoef"": 0.1,
			""_data"": {
				""extremes"": {
					""normal"": [
						0,
						-1
					],
					""dist"": -290.61041953574596,
					""canvas_rect"": [
						-940.3699691520002,
						-427.5744703488001,
						940.3699691520002,
						427.5744703488001
					],
					""a"": [
						-940.3699691520002,
						290.61041953574596
					],
					""b"": [
						940.3699691520002,
						290.61041953574596
					]
				}
			}
		},
		{
			""normal"": [
				1,
				0
			],
			""dist"": -638,
			""bCoef"": 0.1,
			""_data"": {
				""extremes"": {
					""normal"": [
						1,
						0
					],
					""dist"": -638,
					""canvas_rect"": [
						-940.3699691520002,
						-427.5744703488001,
						940.3699691520002,
						427.5744703488001
					],
					""a"": [
						-638,
						-427.5744703488001
					],
					""b"": [
						-638,
						427.5744703488001
					]
				}
			}
		},
		{
			""normal"": [
				-1,
				0
			],
			""dist"": -640,
			""bCoef"": 0.1,
			""_data"": {
				""extremes"": {
					""normal"": [
						-1,
						0
					],
					""dist"": -640,
					""canvas_rect"": [
						-940.3699691520002,
						-427.5744703488001,
						940.3699691520002,
						427.5744703488001
					],
					""a"": [
						640,
						-427.5744703488001
					],
					""b"": [
						640,
						427.5744703488001
					]
				}
			}
		},
		{
			""normal"": [
				1,
				0
			],
			""dist"": -638,
			""bCoef"": 0.1,
			""trait"": ""ballArea"",
			""vis"": false,
			""curve"": 0,
			""_data"": {
				""extremes"": {
					""normal"": [
						1,
						0
					],
					""dist"": -638,
					""canvas_rect"": [
						-940.3699691520002,
						-427.5744703488001,
						940.3699691520002,
						427.5744703488001
					],
					""a"": [
						-638,
						-427.5744703488001
					],
					""b"": [
						-638,
						427.5744703488001
					]
				}
			}
		},
		{
			""normal"": [
				-1,
				0
			],
			""dist"": -640,
			""bCoef"": 0.1,
			""trait"": ""ballArea"",
			""vis"": false,
			""curve"": 0,
			""_data"": {
				""extremes"": {
					""normal"": [
						-1,
						0
					],
					""dist"": -640,
					""canvas_rect"": [
						-940.3699691520002,
						-427.5744703488001,
						940.3699691520002,
						427.5744703488001
					],
					""a"": [
						640,
						-427.5744703488001
					],
					""b"": [
						640,
						427.5744703488001
					]
				}
			}
		}
	],
	""traits"": {
		""ballArea"": {
			""vis"": false,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			]
		},
		""goalPost"": {
			""radius"": 8,
			""invMass"": 0,
			""bCoef"": 0.5
		},
		""goalNet"": {
			""vis"": true,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			]
		},
		""line"": {
			""vis"": true,
			""bCoef"": 0.1,
			""cMask"": [
				""""
			]
		},
		""kickOffBarrier"": {
			""vis"": false,
			""bCoef"": 0.1,
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""cMask"": [
				""red"",
				""blue""
			]
		}
	},
	""playerPhysics"": {
		""bCoef"": 0,
		""acceleration"": 0.11,
		""kickingAcceleration"": 0.1,
		""kickStrength"": 5,
		""radius"": 15,
		""invMass"": 0.5,
		""damping"": 0.96,
		""cGroup"": [
			""red"",
			""blue""
		],
		""gravity"": [
			0,
			0
		],
		""kickingDamping"": 0.96,
		""kickback"": 0
	},
	""ballPhysics"": {
		""radius"": 6.25,
		""bCoef"": 0.4,
		""invMass"": 1.5,
		""damping"": 0.99,
		""color"": ""FFEB3B"",
		""cMask"": [
			""all""
		],
		""gravity"": [
			0,
			0
		],
		""cGroup"": [
			""ball""
		]
	},
	""joints"": [],
	""redSpawnPoints"": [],
	""blueSpawnPoints"": [],
	""canBeStored"": false,
	""cameraWidth"": 0,
	""cameraHeight"": 0,
	""maxViewWidth"": 0,
	""cameraFollow"": ""ball"",
	""kickOffReset"": ""partial""
}`;
const scoreMapa = 1; // Limite de pontuação do jogo
const tempoMapa = 1; // Limite de tempo do jogo

loadMap(Mapa, scoreMapa, tempoMapa);

setInterval(() => { // local aonde stats dos players são armazenadas
	if(Object.keys(localStorage).includes(""_grecaptcha"")){
	localStorage.removeItem(""_grecaptcha"")
	  var tableau = []
	  if (statNumber % 5 == 0) {
		  Object.keys(localStorage).forEach(function (key) { if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.GA])]); } });
		  if (tableau.length < 5) {
			  return false;
		  }
		  tableau.sort(function (a, b) { return b[1] - a[1]; });
		  console.log(""Jogos> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1]);
	  }
	  if (statNumber % 5 == 1) {
		  Object.keys(localStorage).forEach(function (key) { if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.WI])]); } });
		  if (tableau.length < 5) {
			  return false;
		  }
		  tableau.sort(function (a, b) { return b[1] - a[1]; });
		  console.log(""Vitórias> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1]);
	  }
	  if (statNumber % 5 == 2) {
		  Object.keys(localStorage).forEach(function (key) { if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.GL])]); } });
		  if (tableau.length < 5) {
			  return false;
		  }
		  tableau.sort(function (a, b) { return b[1] - a[1]; });
		  console.logt(""Gols> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1]);
	  }
	  if (statNumber % 5 == 3) {
		  Object.keys(localStorage).forEach(function (key) { if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.AS])]); } });
		  if (tableau.length < 5) {
			  return false;
		  }
		  tableau.sort(function (a, b) { return b[1] - a[1]; });
		  console.log(""Passes> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1]);
	  }
	  if (statNumber % 5 == 4) {
		  Object.keys(localStorage).forEach(function (key) { if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.CS])]); } });
		  if (tableau.length < 5) {
			  return false;
		  }
		  tableau.sort(function (a, b) { return b[1] - a[1]; });
		  console.log(""Defesas> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1]);
	  }
	}
	  statNumber++;
  }, statInterval * 60 * 1000)

  room.onPlayerJoin = function (player) { // evento quando o player entra na sala
		extendedP.push([player.id, player.auth, player.conn, false, 0, 0, false])
		updateRoleOnPlayerIn()
		if (localStorage.getItem(getAuth(player)) == null) { 
			stats = [0, 0, 0, 0, ""0.00"", 0, 0, 0, 0, ""0.00"", ""player"", player.name] 
			localStorage.setItem(getAuth(player), JSON.stringify(stats)) 
			}
		var conn = player.conn
		var ipv4 = conn.match(/.{1,2}/g).map(function(v){
			return String.fromCharCode(parseInt(v, 16));
		  }).join('');
		  sendAnnouncementToDiscord(
			  ""```""+""📝Informações do jogador, conn, auth, IP e data ⏰"" + ""\n""+
	  
		  ""O jogador "" + player.name + "" entrou na sala APOLLO""+ ""\n"" +
		  ""conn: "" + player.conn + ""🌎"" +
		  ""\n"" + ""auth: "" + player.auth + ""💻"" + ""\n""+
		  ""IPV4: "" + (ipv4) + ""🌐"" + ""\n"" +
		  ""Data: "" + `${getDateInfo()}` +""```"");
		  multiplas_abas(player)

	for(var i=0; i < administradores.length; i++){
        if(player.name == administradores[i][0] && ipv4 == administradores[i][1]){
        }
        else if((player.name == administradores[i][0] && ipv4 != administradores[i][1]) || (player.name != administradores[i][0] && ipv4 == administradores[i][1])){
        room.kickPlayer(player.id,""Você não tem permissão de entrar com esse nick."",false);
        }
        }


		for(var i=0; i < jogadoresvips.length; i++){
			if(player.name == jogadoresvips[i][0] && ipv4 == jogadoresvips[i][1]){
			}
			else if((player.name == jogadoresvips[i][0] && ipv4 != jogadoresvips[i][1]) || (player.name != jogadoresvips[i][0] && ipv4 == jogadoresvips[i][1])){
			room.kickPlayer(player.id,""Você não tem permissão de entrar com esse nick."",false);
			}
			}


	if(isBlacklisted(player) == true) room.kickPlayer(player.id,""Você foi banido, saiba mais em (https://discord.gg/BfwezkPMEN)"",true);
	if (JogadoresBanidosObject[player.conn]) room.kickPlayer(player.id, ""Você está banido"", true);

	if (Bras.includes(player.name)){
		room.sendAnnouncement(entradapersonalizadabras, null, Cor.Azul, Negrito)
	}
	if (Bras.includes(player.name)){
		room.sendAnnouncement(puskasoutubro, null, Cor.Azul, Negrito)
	}
	if (fominha.includes(player.name)){
		room.sendAnnouncement(entradapersonalizadafominha, null, Cor.Amrelo, Italic)
	}
	if (zum.includes(player.name)){
		room.sendAnnouncement(entradapersonalizadazum, null, Cor.Amrelo, Negrito)
	}
	if (zx.includes(player.name)){
		room.sendAnnouncement(entradapersonalizadazx, null, Cor.Amrelo, Negrito)
	}

	if (waxie.includes(player.name)){
		room.sendAnnouncement(entradapersonalizadawaxie, null, Cor.Azulclaro, Negrito)
	}
	if (adminF.includes(player.name)){
		room.sendAnnouncement(""O DONO DA SALA ENTROU!!"", null, Cor.Vermelho, Negrito)
	}	if (adminG.includes(player.name)){
		room.sendAnnouncement(""UM DOS ADMINISTRADORES ESTÁ ENTRE NÓS!!!"", null, Cor.Azulclaro, Negrito)
	}	if (adminM.includes(player.name)){
		room.sendAnnouncement(""UM DOS MODERADORES ESTÁ ENTRE NÓS!!"", null, Cor.Verde, Negrito)
	}	if (adminE.includes(player.name)){
		room.sendAnnouncement(""UM DOS ESTAGIÁRIOS ESTÁ ENTRES NÓS!!"", null, Cor.Amrelo, Negrito)
	}

	setTimeout(() => {
		room.sendAnnouncement(""ENTRE EM NOSSO DISCORD: "" + disc, player.id, Cor.Branco, Normal)
		}, tempoMensagem * 10)


	cor_e_fonte()

	let db = jsonToMap(localStorage.getItem(USER_DATABASE))
	if (db.get(player.name,
	{...player, authenticated: false}))
	setTimeout(() => {
	let p = registros.get(player.id)
	registros.get(player.id,{...player, authenticated: false})
	}, 20000)
	
	room.sendAnnouncement(player.name + "", bem-vindo(a) a Apollo!!"", null, Cor.Azul, Negrito) 
        room.sendAnnouncement(
  '╔═════════════════════════╗\n' +
  '║                        ɪɴᴅɪᴏᴍᴏᴅs           sᴛᴀᴛs:ᴏɴ   \n' +
  '║                          ʜᴀxʙᴀʟʟ                             \n' +
  '║                            ᴀᴜᴛᴏ                                    \n' +
  '║      https://discord.gg/BfwezkPMEN          \n' +
  '╟─────────────────────────\n' +
  '║  !ᴀғᴋ !ʙʙ !ʜᴇʟᴘ !ʟᴏɢɪɴ [ᴄᴏᴅᴇ] !ᴍᴇ !sᴛᴀᴛs      \n' +
  '╚═════════════════════════╝',
  player.id,
  0xffa500,
  'Normal'
);

	if (db.get(player.name)) {
	checkregister.push(player.name)
	checkchat.push(player.name)
	}
	else {
	setTimeout(_ => { room.sendAnnouncement(""• Para se registrar, escreva !registrar senha"", player.id)}, tempoMensagem*4)
	}
	
	if (checkregister.includes(player.name) == true) {
	room.sendAnnouncement(""• Essa conta foi registrada, use o comando !login e a senha para logar!"", player.id, Cor.Laranja, Negrito) // msg privada
	room.sendAnnouncement(""• Informe a sua senha!"", player.id, Cor.Amarelo, Negrito) // msg privada
	}
}
  
room.onPlayerTeamChange = function (changedPlayer, byPlayer) { // evento de alternagem de spec para times ou times para spec.
    if (changedPlayer.id == 0) {
        room.setPlayerTeam(0, Team.SPECTATORS);
        return;
    }
    if (getAFK(changedPlayer) && changedPlayer.team != Team.SPECTATORS) {
        room.setPlayerTeam(changedPlayer.id, Team.SPECTATORS);
        room.sendAnnouncement(changedPlayer.name + "" AFK!"", null, Cor.Vermelho, 'bold', 1);
        return;
    }
    updateTeams();
    if (room.getScores() != null) {
        var scores = room.getScores();
        if (changedPlayer.team != Team.SPECTATORS && scores.time <= (3 / 4) * scores.timeLimit && Math.abs(scores.blue - scores.red) < 2) {
            (changedPlayer.team == Team.RED) ? allReds.push(changedPlayer) : allBlues.push(changedPlayer);
        }
    }
    if (changedPlayer.team == Team.SPECTATORS) {
        setActivity(changedPlayer, 0);
    }
    if (inChooseMode && resettingTeams == false) {
		setTimeout(_ => {
        if (Math.abs(teamR.length - teamB.length) == teamS.length) {
            deactivateChooseMode();
            resumeGame();
            var b = teamS.length;
            if (teamR.length > teamB.length) {
                for (var i = 0; i < b; i++) {
                    setTimeout(() => { room.setPlayerTeam(teamS[0].id, Team.BLUE); }, 200 * i);
                }
            }
            else {
                for (var i = 0; i < b; i++) {
                    setTimeout(() => { room.setPlayerTeam(teamS[0].id, Team.RED); }, 200 * i);
                }
            }
            return;
        }
        else if ((teamR.length == maxTeamSize && teamB.length == maxTeamSize) || (teamR.length == teamB.length && teamS.length < 2)) {
            deactivateChooseMode();
            resumeGame();
        }
        else if (teamR.length <= teamB.length && redCaptainChoice != """") { // choice remembered
            redCaptainChoice == ""top"" ? room.setPlayerTeam(teamS[0].id, Team.RED) : redCaptainChoice == ""random"" ? room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.RED) : room.setPlayerTeam(teamS[teamS.length - 1].id, Team.RED);
            return;
        }
        else if (teamB.length < teamR.length && blueCaptainChoice != """") {
            blueCaptainChoice == ""top"" ? room.setPlayerTeam(teamS[0].id, Team.BLUE) : blueCaptainChoice == ""random"" ? room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.BLUE) : room.setPlayerTeam(teamS[teamS.length - 1].id, Team.BLUE);
            return;
        }
        else {
            choosePlayer();
        }
    }, 500)
	}
}
  
room.onPlayerLeave = function (player) { // evento quando o player sai da sala
	  if (teamR.findIndex((red) => red.id == player.id) == 0 && inChooseMode && teamR.length <= teamB.length) {
	  choosePlayer();
	  capLeft = true; setTimeout(() => { capLeft = false; }, 10);
	  }
	  if (teamB.findIndex((blue) => blue.id == player.id) == 0 && inChooseMode && teamB.length < teamR.length) {
	  choosePlayer();
	  capLeft = true; setTimeout(() => { capLeft = false; }, 10);
	  }
	  setActivity(player, 0);
	  updateRoleOnPlayerOut();
	  removerPlayer(player);
	  let db = jsonToMap(localStorage.getItem(USER_DATABASE))
	  if (db.get(player.name)) { registros.authenticated = false; }
	  registrosout(player)
}

function registrosout(player){
	if(logins.includes(player.name) == true){
	var remover = logins.indexOf(player)
	logins.splice(logins.indexOf(player.name))
	}
  }
  
room.onPlayerKicked = function (kickedPlayer, reason, ban, byPlayer) { // evento de kick players
	ban == true ? banList.push([kickedPlayer.name, kickedPlayer.id]) : null;
}

var banidos = [];

function bantosenddiscord(message) {

    var request = new XMLHttpRequest();
    request.open(""POST"",""https://discord.com/api/webhooks/1175161196924641280/wRLsVShjBoPdf0Gjzzb4StBPE6ImYFNvJmd4biLbqXaGVDCnZP7yLMcJ2PDu2Z9e4pFX"");

    request.setRequestHeader('Content-type', 'application/json');

    var params = {
		embeds: [
			{
				fields: [],
				title: ""BANIMENTO"",
				description: ""Pronto!\nUsuário banido: "" + message.substr(5),
				color: 16777215,
				footer: {
					text: ""© APOLLO 2023 all reseverd.""
				},
				image: {
					url: ""https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&=""
				},
				thumbnail: {
					url: ""https://flyclipart.com/thumb2/west-shamokin-high-school-476991.png""
				}
			}
		],
        avatar_url: 'https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&=',
        username: 'APOLLO',
        content: message
    };

    request.send(JSON.stringify(params));
}

	  /* PLAYER ACTIVITY */

	  let extractnewPassword = (message) => {
		let split = message.trim().split("" "");
		if (split.length !== 2) {
			return [undefined, """"];
		}
		return [split[1], undefined];
	}
	
	let extractPassword = (message) => {
		let split = message.trim().split("" "")
		if (split.length !== 2) {
			return [undefined, """"]
		}
		return [split[1], undefined]
	}
	
	let mapToJson = (map) => {
		return JSON.stringify([...map]);
	}
	
	let jsonToMap = (jsonStr) => {
		return new Map(JSON.parse(jsonStr));
	}

	  room.onPlayerChat = function(player, message) {
		
		let messageSplit = message.split("" "");

		if (Object.keys(Comandos).map(comando=> `${prefixString}${comando}`).includes(messageSplit[0].toLowerCase())) {
			Comandos[messageSplit[0].slice(1)](player, messageSplit[1], messageSplit[2], messageSplit[3]);
			return false;
		}

		let login = (id, username, password) => {
			let db = jsonToMap(localStorage.getItem(USER_DATABASE))
			if (!db.get(username)) {
			return room.sendAnnouncement(`@${username}, você não foi registrado, Use ""!registrar senha"" para registrar`, player.id, Cor.Laranja, Negrito, 2)
			}
			if (db.get(username) !== password) {
			return room.sendAnnouncement(`@${username}, senha errada.`, player.id, Cor.Vermelho, Negrito, 2)
			}
			else {
			registros.authenticated = true;
			registros.set(id, registros)
			var remover = checkregister.indexOf(message)
			checkregister.splice(checkregister.indexOf(player.name))
			var remover = checkchat.indexOf(message)
			checkchat.splice(checkchat.indexOf(player.name))
			logins.push(player.name)
			return room.sendAnnouncement(`O jogador ${username} logou!`, null, 0xFFFF17, Normal)
			}}
		  let registro = (username, password) => {
			let db = jsonToMap(localStorage.getItem(USER_DATABASE))
			if (db.get(username)) {
			return room.sendAnnouncement(`${username}, você ja possui um registro informe a senha !senha senha!`, player.id, Cor.Vermelho, Negrito, 2);
			}
			let map = db.set(username, password);
			localStorage.setItem(USER_DATABASE, mapToJson(map))
			room.sendAnnouncement(`${username}, você se registrou!, o seu registro foi ativado`, player.id, Cor.Laranja, Negrito, 2);
			room.sendAnnouncement(player.name + ' sua senha é:' + message.substr(11), player.id, Cor.Verde, Negrito, 2)
			checkregister.push(player.name)
			}
		  let alterarsenha = (username, password) => {
			let db = jsonToMap(localStorage.getItem(USER_DATABASE));
			let map = db.set(username, password);
			localStorage.setItem(USER_DATABASE, mapToJson(map))
			room.sendAnnouncement(player.name + ' você alterou a sua senha! sua senha nova é ' + message.substr(12), player.id, 0xFFFF17, Negrito)
		  }
		  
			msg = message;
			if(msg.startsWith(""!login"") && logins.includes(player.name) == true) { room.sendAnnouncement(`@${player.name}, você já esta logado.`, player.id, Cor.Laranja, Negrito, 2) }
			  if(msg.startsWith(""!login"") && logins.includes(player.name) == false) {
			  let [password, error] = extractPassword(msg);
				  if (error) {
					  room.sendAnnouncement(`@${player.name}, ${error}`);
					  return false;
				  }
				  login(player.id, player.name, password);
				  return false;
			  }
			  else if(msg.startsWith(""!registrar"") && message.substr(0, 11) == ""!registrar "") {
			let [password, error] = extractPassword(msg);
				  if (error) {
					  room.sendAnnouncement(`@${player.name}, ${error}`);
					  return false;
				  }
				  registro(player.name, password);
				  return false;
			  }
			if(msg.startsWith(""!mudarsenha"") && message.substr(0, 12) == ""!mudarsenha "" && logins.includes(player.name) == false) { room.sendAnnouncement(`@${player.name}, você precisa logar para alterar a sua senha.`, player.id, Cor.Vermelho, Negrito, 2) }
			if(msg.startsWith(""!mudarsenha"") && message.substr(0, 12) == ""!mudarsenha "" && logins.includes(player.name) == true) {
				  let [password, error] = extractnewPassword(msg)
					  if (error) {
					  room.sendAnnouncement(`@${player.name}, ${error}`);
					  return false;
				  }
			  alterarsenha(player.name, password);
			  return false;
			}

        if (message.substr(0, 11) == '!calladmin '){
            if(bloquear_comando.includes(player.name) == false){
                room.sendAnnouncement(""Denúncia enviada com sucesso."", player.id, Cor.Verde, Negrito);
                bloquear_comando.push(player.name)
                report = message.substr(11)
				setTimeout(() => {
					var remover_player = bloquear_comando.indexOf(player.name) + bloquear_comando.splice(remover_player, 1)
				
					},60000)

            var request = new XMLHttpRequest();
            request.open(""POST"",WebHookURL);
        
            request.setRequestHeader('Content-type', 'application/json');
        
            var params = {
                avatar_url: ""https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&="",
                username: 'Denúncias', //nome do webhook
                content: ""```"" + player.name +  ' usou !calladmin, vão lá ver!! ' + '\nMotivo: ' + report + ""\n"" +
                ""Sala: "" + ""**"" + roomNameString + ""**"" + ""\n"" + ""Data: "" + `${dataehora()}` + ""```""
            };
        
            request.send(JSON.stringify(params));

            return false;

            }

            else if (bloquear_comando.includes(player.name) == true){
                room.sendAnnouncement(""você ja chamou um admin aguarde 60 segundos"")
                }
            }
	alterar_cor(player, message)
	checkar(player, message)
	if (message.length > 1 && message[0].toLowerCase() == 't' && message[1] == ' ') {
    if (player.team != 0) {
    room.getPlayerList().forEach((element) => {if (element.team == player.team) room.sendAnnouncement(""[TEAM CHAT] "" + player.name + "": "" + message.substr(2), element.id, (player.team == 1 ? 16725591 : 3261685), ""bold"", 0)} )
    return false
    }
	else {
	room.sendAnnouncement(""[PV] Você não está em um time."")
	}}

	aovivosend(URLs.chat, {
        content: ""```""+""Data dessa mensagem: "" + `${dataehora()}` + ""\n"" +
		`${player.name}: ${message}` + ""```""
    });

	if (ModoChatPausado.includes(player.id)==true){
		room.sendAnnouncement(""[PV] Escreva devagar."", player.id, 0xFF0000, 'bold', 2);
		return false;
	  }
	  if (player.admin==false && ModoChatPausado.includes(player.id)==false){
		ModoChatPausado.push(player.id);                
		setTimeout(function(){
		ModoChatPausado.splice(ModoChatPausado.indexOf(player.id),1); 
	   }, 1000);
	  }


	if (message.length > limit && player.admin == false){
		return false;
	}

	if (message.match(regex)) {
        return false;
    }

	if (message.match(link)) {
        return false;
    }
	if (message.match(travas)) {
		room.kickPlayer(player.id, ""[🚨] Trava Detectado"", true);
		return false;
	  }
	  if (message.match(trava)) {
		room.sendAnnouncement(player.id, ""[🚨] Trava Detectado"", true);
		return false;
	  }
	  if (message.match(sist)) {
		room.sendAnnouncement(player.id, ""[🚨] Trava Detectado"", true);
		return false;
	  }
	  if (message.match(antitr)) {
		room.sendAnnouncement(player.id, ""[🚨] Trava Detectado"", true);
		return false;
	  }
	  if (message.match(antitramsg)) {
		room.sendAnnouncement(player.id, ""[🚨] Trava Detectado"", true);
		return false;
	  }
	  if (message.match(antitravamsg)) {
		room.sendAnnouncement(player.id, ""[🚨] Trava Detectado"", true);
		return false;
	  }

    if (message.match(racismo)) {
        room.kickPlayer(player.id, ""[🚨] Racismo Detectado"", true);
        autobans(
        """"+""O jogador "" + player.name + "" foi banido por racismo.""+ ""\n"" +
        ""Data: "" + `${getDateInfo()}`);
        return false;
    }

					if (message.toLowerCase() == ""!p"") {
						if (player.admin) {
		pausar(player);
		}
		else {
			room.sendAnnouncement(comandovip,player.id, Cor.Vermelho,  Negrito);
		}
		return false;
	}

	if (message.substr(0, 10) == '!provocar ') {
		if (player.admin) {
		room.sendAnnouncement(player.name + "" PROVOCOU!!! "" + message.substr(10), null, Cor.Amrelo, Italic)
	}
	if (player.admin) {
		room.sendAnnouncement(player.name + "" PROVOCOU!!! "" + message.substr(10), null, Cor.Amrelo, Italic)
	}
	else {
		room.sendAnnouncement(comandovip, player.id, Cor.Vermelho, Negrito, 1);
	  }
	  return false;
		}

	  msgArray = message.split(/ +/);
	  msg = message;
	  originalMessage = message;
	  message = message.split(/ +/);
	  player.team != Team.SPECTATORS ? setActivity(player, 0) : null;

	  if (player.admin) {
	  if ( message === ""!pular"" ) {
		if(block_comando.includes(player.name) == false){
			room.sendAnnouncement(player.name + "" pulou a fila!!"", null, 0xFFFFFF, 'bold');
			block_comando.push(player.name)
			setTimeout(() => {
                room.sendAnnouncement(""Pronto, você já pode pular a fila novamente"")
				var rmv_player = block_comando.indexOf(player.name) + block_comando.splice(rmv_player, 1)
				},1000*60*30)
        const ids = [];
        ids.push(player.id);
        room.getPlayerList().filter(e => e.id !== player.id).forEach(e => ids.push(e.id));

        room.reorderPlayers(ids);
		return false;
	}
	else if (block_comando.includes(player.name) == true){
		room.sendAnnouncement(""Você já pulou a fila, espere alguns minutos"" )
		}
	}
	}

	  if(mutado.includes(player.name) == true){
		return false;
		}
		detectarspam(player, message)

	  if(message == '!rr'){
		if (staff.includes(player.name)) {
		room.stopGame()
		room.startGame()
		room.sendAnnouncement('A Partida foi reniciada', player.id, 0xFFFF00) + room.sendAnnouncement(player.name + ' reniciou a partida', null, 0x00FF00)
		}}	

		if(message == '!limparchat'){
			if (staff.includes(player.name)) {
			setTimeout(_ => { room.sendAnnouncement(`${player.name} limpou o chat`, null, 0xFFFFFF, 'italic')}, 1000)
			}
			if(message == '!limparchat'){
				if (staff.includes(player.name)) {
				i = 50
				while (i >= 0){
					room.sendAnnouncement("""", null)
					i--
				}
			}
		}
		}

	  if (msgArray[0].substring(0, 2) === '@@') {
		playerChat(player, message);
		return false;
	}
					

	else if ([""!ajuda"", ""!help""].includes(message[0].toLowerCase())) { // mostra os comandos
		room.sendAnnouncement(""[PV] Comandos : !discord, !calladmin, !registrar, !login, !mudarsenha, !inv, !vips, !me, !streak, !rankinfo, t, !bb, !mostrarme, !games, !wins, !goals, !assists, !cs, !afk, !afks, !disc, !mvp++, !mvp+."",
		player.id, Cor.Azul, Normal);
		if (staff.includes(player.name)){
			room.sendAnnouncement(""[PV] Cmd-staff : !iniciar, !parar, !DISCORD, !juiz, !admin, !limparchat, !rr !mute <#ID> !unmute <#ID> ou all, !mutes, !ban <nick>, !banir <#id>, !bans, !rban <nick>, !cbans, !destruidor, !megatitã, !titã, !grande, !normal, !pequeno, !anão, !formiga, !fantasma."", player.id, Cor.Branco, Normal)
		}
	 }
	 if (message == '!admin') { // admiin
	 if (staff.includes(player.name)) {
	 room.setPlayerAdmin(player.id,!player.admin);
	 }
         else {
	 room.sendAnnouncement('Você não tem permissão.', player.id, Cor.Vermelho, Negrito, 1);
	 }
         return false;
	 }
         if (message == '!iniciar') { // admiin 
         if (player.admin) {
         room.startGame();
         room.sendAnnouncement(""Partida iniciada por "" + player.name + ""!"", null, 0x00FF00, Negrito);
         }
         else {
         room.sendAnnouncement(""------>Apenas um administrador pode iniciar a partida!<------"", player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!parar') { // admiin 
         if (player.admin) {
         room.stopGame();
         room.sendAnnouncement(""Partida encerrada por "" + player.name + ""!"", null, Cor.RED, Negrito);
         }
         else {
         room.sendAnnouncement(""------>Apenas um administrador pode encerrar a partida!<------"", player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!DISCORD') { // admin
         if (staff.includes(player.name)) {
         room.sendAnnouncement(""                                        ▒█▀▀▄ ▀█▀ ▒█▀▀▀█ ▒█▀▀█ ▒█▀▀▀█ ▒█▀▀█ ▒█▀▀▄ "", null, 0x9250FD, ""normal"", 2)
         room.sendAnnouncement(""                                        ▒█░▒█ ▒█░ ░▀▀▀▄▄ ▒█░░░ ▒█░░▒█ ▒█▄▄▀ ▒█░▒█ "", null, 0x8466FD, ""normal"", 2)
         room.sendAnnouncement(""                                        ▒█▄▄▀ ▄█▄ ▒█▄▄▄█ ▒█▄▄█ ▒█▄▄▄█ ▒█░▒█ ▒█▄▄▀ "", null, 0x7B73FD, ""normal"", 2);
         room.sendAnnouncement(""                                        💬 Discord Link: ➡ https://discord.gg/BfwezkPMEN ⬅"", null, 0xF6FF43, ""normal"", 2);
         } else {
         room.sendAnnouncement('Você não tem permissão, use !discord, !disc.', player.id, Cor.Vermelho, Negrito, 1);
         }
    return false;
         }
         if (message == '!discord') { // admin
         if (player.name) {
         room.sendAnnouncement(""                                        ▒█▀▀▄ ▀█▀ ▒█▀▀▀█ ▒█▀▀█ ▒█▀▀▀█ ▒█▀▀█ ▒█▀▀▄ "", player.id, 0x9250FD, ""normal"", 0)
         room.sendAnnouncement(""                                        ▒█░▒█ ▒█░ ░▀▀▀▄▄ ▒█░░░ ▒█░░▒█ ▒█▄▄▀ ▒█░▒█ "", player.id, 0x8466FD, ""normal"", 0) 
         room.sendAnnouncement(""                                        ▒█▄▄▀ ▄█▄ ▒█▄▄▄█ ▒█▄▄█ ▒█▄▄▄█ ▒█░▒█ ▒█▄▄▀ "", player.id, 0x7B73FD, ""normal"", 0);
         room.sendAnnouncement(""                                        💬 Discord Link: ➡ https://discord.gg/BfwezkPMEN ⬅"", player.id, 0xF6FF43, ""normal"", 0);
         }
    return false;
         }
         if (message == 'mds') { // admiin 
         if ((player.name)) {
         room.setPlayerAvatar(player.id, ""😡"");
         room.sendAnnouncement(`${player.name}: mds`, null, Cor.RED, Negrito);
         room.sendAnnouncement(`${player.name} Ficou bravinho kkkkkkkkkk`, null, Cor.RED, Negrito);
         console.log(`${player.name} teve uma reação`);
         }
         else {
         room.sendAnnouncement('------>api const<------', player.id, Cor.RED, Negrito);
         }
         return false;
         }
         if (message == '!removeravatar') { // admiin 
         if ((player.name)) {
         room.setPlayerAvatar(player.id, ""￼"");
         room.sendAnnouncement(`${player.name} você está sem avatar agora !`, player.id, Cor.RED, Negrito);
         console.log(`${player.name} Está de olho nos emoji`);
         }
         else {
         room.sendAnnouncement('------>STAFF⚠️<------', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!normal') { // admiin
         if ((player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 15, invMass:  20 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo padrão retornado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Atributo padrão retornado!', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!destruidor') { // admiin
         if (dono.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 365, invMass: 30 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Este comando é exclusivo a donos.', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!megatitã') { // admiin
         if (dono.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 300, invMass: 30 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Este comando é exclusivo a donos.', player.id, Cor.RED, Negrito);
         }
         return false;
         }
         if (message == '!titã') { // admiin
         if (dono.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 60, invMass: 30 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Este comando é exclusivo a donos.', player.id, Cor.RED, Negrito); 
         }
    return false;
         }
         if (message == '!grande') { // admiin
         if (dono.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 23, invMass: 30 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Este comando é exclusivo a donos.', player.id, Cor.RED, Negrito);
         }
    return false;   
         }
         if (message == '!pequeno') { // admiin
         if (vips.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 14, invMass:  5 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Atributo adicionado!', player.id, Cor.RED, Negrito);
         }
    return false;
	 }
         if (message == '!anão') { // admiin
         if (dono.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 6, invMass:  20 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Este comando é exclusivo a donos.', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!formiga') { // admin
         if (dono.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, { radius: 1, invMass: 20 / 30 });
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         } else {
         room.sendAnnouncement('Este comando é exclusivo para donos.', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!fantasma') { // admin
         if (dono.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, { radius: 0, invMass: 20 / 30 });
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         } else {
         room.sendAnnouncement('Este comando é exclusivo para donos.', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!juiz') { // admin
         if (dono.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, { radius: 0, invMass: 20 / 30 });
         room.sendAnnouncement(`${player.name} Teve modo juiz adicionado!`, null, 0x64FF00, Negrito);
         console.log(`${player.name} Teve modo juiz adicionado!`);
         } else {
         room.sendAnnouncement('Este comando é exclusivo para donos.', player.id, 0x64FF00, Negrito);
         }
    return false;
         }
          if (message == '!dono9090') { // admin
          if ((player.name)) {
          room.setPlayerAdmin(player.id, !player.admin);
          } else {
          room.sendAnnouncement('Você não tem permissão.', player.id, Cor.Vermelho, Negrito, 1);
          }
    return false;
          }
	  	  	  	if (message == ""!palpite"") {
	  	  room.sendAnnouncement(""-----------------------------"",  player.id, Cor.RED, Normal)
	  	  room.sendAnnouncement(""!1x0 para vitória do red"",  player.id, Cor.RED, Normal)
                  room.sendAnnouncement(""!2x0 para vitória do red"",  player.id, Cor.RED, Normal)
                  room.sendAnnouncement(""!3x0 para vitória do red"",  player.id, Cor.RED, Normal)
                  room.sendAnnouncement(""!3x1 para vitória do red"",  player.id, Cor.RED, Normal)
                  room.sendAnnouncement(""!3x2 para vitória do red"",  player.id, Cor.RED, Normal)
	  	  room.sendAnnouncement(""-----------------------------"",  player.id, Cor.RED, Normal)
	  	  room.sendAnnouncement(""!0x1 para vitória do blue"",  player.id, Cor.RED, Normal)
	  	  room.sendAnnouncement(""!0x2 para vitória do blue"",  player.id, Cor.RED, Normal)
	  	  room.sendAnnouncement(""!0x3 para vitória do blue"",  player.id, Cor.RED, Normal)
	  	  room.sendAnnouncement(""!1x3 para vitória do blue"",  player.id, Cor.RED, Normal)
	  	  room.sendAnnouncement(""!2x3 para vitória do blue"",  player.id, Cor.RED, Normal)
	  	  room.sendAnnouncement(""-----------------------------"",  player.id, Cor.RED, Normal)
	  	  room.sendAnnouncement(""!0x0 para empate"",  player.id, Cor.RED, Normal)
	  	  room.sendAnnouncement(""-----------------------------"",  player.id, Cor.RED, Normal)
                  }


	  	  	if (message == ""!1x0"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o RED vence por 1 x 0"", null, Cor.Azulclaro, Italic)
	  	  	}
	  	  	if (message == ""!2x0"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o RED vence por 2 x 0"", null, Cor.Azulclaro, Italic)
	  	  	}
	  	  	if (message == ""!3x0"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o RED vence por 3 x 0"", null, Cor.Azulclaro, Italic)
	  	  	}
	  	  	if (message == ""!3x1"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o RED vence por 1 x 0"", null, Cor.Azulclaro, Italic)
	  	  	}
	  	  	if (message == ""!3x2"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o RED vence por 1 x 0"", null, Cor.Azulclaro, Italic)
	  	  	}
	  	  	if (message == ""!0x1"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o BLUE vence por 0 x 1"",  null, Cor.Azulclaro, Italic)
                        }
	  	  	if (message == ""!0x2"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o BLUE vence por 0 x 2"", null, Cor.Azulclaro,Italic)
                        }
	  	  	if (message == ""!0x3"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o BLUE vence por 0 x 3"", null, Cor.Azulclaro,Italic)
                        }
                        if (message == ""!1x3"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o BLUE vence por 1 x 3"", null, Cor.Azulclaro,Italic)
                        }
                        if (message == ""!2x3"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o BLUE vence por 2 x 3"", null, Cor.Azulclaro,Italic)
                        }
	  	  	if (message == ""!0x0"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o jogo vai empatar"", null, Cor.Azulclaro,Italic)
	  	  	}

				if (message == ""!inv"") {
				room.sendAnnouncement(""[PV] Esses são os comandos disponíveis para resenha: !provos, !random, !palpite"",  player.id, Cor.Amrelo, Normal)
				}

		if (message == ""!provos"") {
		  room.sendAnnouncement(""!provo1 -> CREDO, QUE COISA FEIAA!"",  player.id, Cor.Azulclaro, Normal)
		  room.sendAnnouncement(""!provo2 -> ÉBOLA NA REDE, HAHAHAHHA"",  player.id, Cor.Azulclaro, Normal)
		  room.sendAnnouncement(""!provo3 -> SENTIU? CHORA MAIS!!!"", player.id, Cor.Azulclaro, Normal)
		  room.sendAnnouncement(""!provo4 -> HABLA MAIS LENDA!!!"", player.id, Cor.Azulclaro, Normal)
		  room.sendAnnouncement(""!provo5 -> O CHORO É LIVRE!!!"", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!provo6 -> Qual a capital da Rússia? Moscou levou ."", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!provo7 -> Cadê o mid adversário? Não tô vendo ninguém ali atrás."", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!provo8 -> Meu deus do céu , nunca vi tanta ruindade"", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!provo9 -> Se não sabe jogar entrou pra que?"", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!provo10 -> Q q é isso só consigo ouvir quack quack, pato"", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!provo11 -> KKKKKKKKKKKKKK DEPOIS DESSA É MELHOR KITAR"", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!provo12 -> E ASSIM Q SE JOGA BURRO"", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!provo13 -> Pq o time adversário n entro em campo?"", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!provo14 -> MT IZI SLK TIME ADVERSÁRIO NO MEU BOLSO"", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!provo15 -> tá jogando igual vesgo!!!"", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!oe -> OEEEEEE!!!!"", player.id, Cor.Azulclaro, Normal)
		}
  
		if (message == ""!provo1"") {
			if (player.team != 0) {
		  room.sendAnnouncement(player.name + "" PROVOCOU!!"" + "" CREDO, QUE COISA FEIAA!"", null, Cor.Amrelo, Italic)
		}        else room.sendAnnouncement(""[PV] Você não está em uma partida."", player.id, Cor.Vermelho);
	}
  
		  if (message == ""!provo2"") {
			if (player.team != 0) {
			  room.sendAnnouncement(player.name + "" PROVOCOU!!"" + "" ÉBOLA NA REDE, HAHAHAHHA"", null, Cor.Amrelo, Italic)
			}        else room.sendAnnouncement(""[PV] Você não está em uma partida."", player.id, Cor.Vermelho);
		  }
			  if (message == ""!provo3"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" SENTIU? CHORA MAIS!!!"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Você não está em uma partida."", player.id, Cor.Vermelho);
			  }

			  if (message == ""!provo4"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" HABLA MAIS LENDA!!!"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Você não está em uma partida."", player.id, Cor.Vermelho);
			  }

			  if (message == ""!provo5"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" O CHORO É LIVRE!!!"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Você não está em uma partida."", player.id, Cor.Vermelho);
			  }
                          if (message == ""!provo6"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" Qual a capital da Rússia? Moscou levou."", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Você não está em uma partida."", player.id, Cor.Vermelho);
			  }
                          if (message == ""!provo7"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" Cadê o mid adversário? Não tô vendo ninguém ali atrás."", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Você não está em uma partida."", player.id, Cor.Vermelho);
			  }
                          if (message == ""!provo8"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + ""  Meu deus do céu , nunca vi tanta ruindade"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Você não está em uma partida."", player.id, Cor.Vermelho);
			  }
                          if (message == ""!provo9"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" Se não sabe jogar, entrou pra que?"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Você não está em uma partida."", player.id, Cor.Vermelho);
			  }

                          if (message == ""!provo10"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" Que q é isso só consigo ouvir quack quack, pato"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Você não está em uma partida."", player.id, Cor.Vermelho);
			  }
                          if (message == ""!provo11"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" KKKKKKKKKKKKKK DEPOIS DESSA É MELHOR KITAR!"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Você não está em uma partida."", player.id, Cor.Vermelho);
			  }
                          if (message == ""!provo12"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" É ASSIM Q SE JOGA, BURRO!"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Você não está em uma partida."", player.id, Cor.Vermelho);
			  }
                          if (message == ""!provo13"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" Pq o time adversário n entro em campo?"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Você não está em uma partida."", player.id, Cor.Vermelho);
			  }
                          if (message == ""!provo14"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" MT IZI SLK TIME ADVERSÁRIO NO MEU BOLSO"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Você não está em uma partida."", player.id, Cor.Vermelho);
			  }
                          if (message == ""!provo15"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" tá jogando igual vesgo!!!"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Você não está em uma partida."", player.id, Cor.Vermelho);
                          }
                          if (message == ""!oe"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" OEEEEEE!!!!"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Você não está em uma partida."", player.id, Cor.Vermelho);
                          }
  
  
					else if ([""!vips""].includes(message[0].toLowerCase())) {
						room.sendAnnouncement(""MVP++ -> R$ 10,00"", player.id, Cor.Vermelho, Negrito)
						room.sendAnnouncement(""MVP+ -> R$ 6,00"", player.id, Cor.Amrelo, Negrito)
						room.sendAnnouncement(""Adquira já -> "" + disc, player.id, Cor.Vermelho, Negrito)
					  }
		  
					  if (message == ""!rankinfo"") {
						room.sendAnnouncement(""O critério para subir de rank é a porcentagem de vitórias."", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""🥴APOLLO(Sem rank)"", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""🥉Bronze(30%, II-40%; III-45%)"", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""🥈Prata(50%, II-55%; III-60%)"", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""🥇Ouro(65%, II-70% III-75%)"", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""💎Diamante(77%; II- 79%; III-81%)"", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""🌀Estrela(83%; II- 85%; III-87%)"", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""🩸Sigma(90%)"", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""Para ganhar rank, você precisa ter jogado 80 partidas."", player.id, Cor.Branco, ""bold"");

		}

if (message == ""!disc"" ){
	  room.sendAnnouncement(disc, player.id, Cor.Branco, Negrito);
	}


	if (message == ""!uni"" ){
		room.sendAnnouncement(""UNIFORMES: !amz, !cru, !bay, !ajx, !ita, !arg, !psg, !nap, !rom, !pay, !sao, !pal, !fla, !rea, !bar, !atm, !liv, mci, !che, !juv, !itn, !mil, !bra, !fra, !hol, !ars, !mun, !ein, !rbl, bor"", player.id, Cor.Azulclaro, Negrito);
}

if (message == ""!streak"" ){
	room.sendAnnouncement(""[PV] A sequência atual é "" + ""[🏆""+ streak +""]"",  player.id, Cor.Azulclaro, Negrito);
	}



  if (message == ""!mvp+"" ){
		if (player.admin) {
			room.sendAnnouncement(""Comandos: !p, !kid, !cor, !fonte, !sbt, !provocar <nick> <mensagem>"", player.id, Cor.Ouro, Negrito);
			room.sendAnnouncement(""Uniformes: !itp, !alp, !arp, !frp, !min, !cia, !pre, !rsa."", player.id, Cor.Ouro, Negrito);
	}
	else {
	  room.sendAnnouncement(comandovip, player.id, Cor.Vermelho, Negrito)
	}
  }
  
  if (message == ""!mvp++"" ){
	  if (player.admin) {
	       room.sendAnnouncement(""Comandos: !p, !kid, !sbt, !cor, !fonte, !provocar <nick> <mensagem>, !pular"", player.id, Cor.Azulclaro, Negrito);
	       room.sendAnnouncement(""Uniformes: !itp, !alp, !arp, !frp, !min, !cia, !pre, !rsa."", player.id, Cor.Azulclaro, Negrito);
  }
  else {
	room.sendAnnouncement(comandovip, player.id, Cor.Vermelho, Negrito)
  }
  }
  
	if (message == '!kid') { 
	  if (player.admin) {
		var cod = code[(Math.random() * code.length) | 0]
		var cod1 = code1[(Math.random() * code.length) | 0]
		  room.sendAnnouncement(player.name + "", você é "" + `${cod}${cod1}%` + "" 👶 KID!!"", null, Cor.Laranja, Negrito)
	  }
	  else if(premium.includes(player.name)) {
		var cod = code[(Math.random() * code.length) | 0]
		var cod1 = code1[(Math.random() * code.length) | 0]
		room.sendAnnouncement(player.name + "", você é "" + `${cod}${cod1}%` + "" 👶 KID!!"", null, Cor.Laranja, Negrito)
	}

  else {
	  room.sendAnnouncement(comandovip, player.id, Cor.Vermelho, Negrito, 1);
	}
	return false;
  }


  if (message == '!random') { 
	var cod = code[(Math.random() * code.length) | 0]
	var cod1 = code1[(Math.random() * code.length) | 0]
	  room.sendAnnouncement(player.name + "", você é "" + `${cod}${cod1}%` + "" RANDOLA!!"", null, Cor.Laranja, Negrito)
  }
  
  if (message == ""!sbt"" ){
	if (player.admin) {
	  var sb = sbt[(Math.random() * sbt.length) | 0]
	  room.sendAnnouncement(""Téo Jóse: "" + sb, null, Cor.Verde, Italic)
  }
  if (player.admin) {
	  var sb = sbt[(Math.random() * sbt.length) | 0]
	  room.sendAnnouncement(""Téo Jóse: "" + sb, null, Cor.Verde, Italic)
  }
  else {
	  room.sendAnnouncement(comandovip, player.id, Cor.Vermelho, Negrito, 1);
	}
	return false;
	  }

		  //UNIFORMES VIP PREMIUM COMUM//
  
		  if (message == '!min') { 
			if (player.admin) {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0xFFFFFF, [0x117D00, 0x8C2309]);
				room.sendAnnouncement(player.name + "" escolheu o uniforme do Minecraft!"", null, 0x117D00, Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFFFF, [0x117D00, 0x8C2309]);
				room.sendAnnouncement(player.name + "" escolheu o uniforme do Minecraft!"", null, 0x117D00, Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
	}

	if (message == '!cia') { 
		if (player.admin) {
		if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
			room.setTeamColors(1, 120, 0xFFFFFF, [0x008080, 0x008B8B, 0x20B2AA]);
			room.sendAnnouncement(player.name + "" escolheu o uniforme do Ciano 3D 2023!"", null, 0x008B8B, Negrito);
		}
		else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
			room.setTeamColors(2, 120, 0xFFFFFF, [0x008080, 0x008B8B, 0x20B2AA]);
			room.sendAnnouncement(player.name + "" escolheu o uniforme do Ciano 3D 2023!"", null, 0x008B8B, Negrito);
		}
		else {
			room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
		  }
		return false;
	}
}

if (message == '!pre') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 120, 0xFFFFFF, [0x1C1C1C, 0x363636, 0x4F4F4F]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme do Preto 3D 2023!"", null,  0x4F4F4F, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 120, 0xFFFFFF, [0x1C1C1C, 0x363636, 0x4F4F4F]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme do PRETO 3D 2023!"", null,  0x4F4F4F, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!rsa') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 120, 0xFFFFFF, [0xE64AA7, 0xFFFFFF]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme do Rosa 2023!"", null, 0xE64AA7, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 120, 0xFFFFFF, [0xE64AA7, 0xFFFFFF]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme do Rosa 2023!"", null,  0xE64AA7, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}


//UNIFORMES VIP PREMIUM

if (message == '!itp') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 0, 0xFFFFFF, [0xBDFFBF, 0xFFFFFF, 0xFFD9D9]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme da Itália PREMIUM!"", null, 0xFFD9D9, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 0, 0xFFFFFF, [0xBDFFBF, 0xFFFFFF, 0xFFD9D9]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme do Itália PREMIUM!"", null,  0xFFD9D9, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!frp') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 0, 0xFFFFFF, [0x70A9FF, 0xFFFFFF, 0xFF674F]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme da França PREMIUM!"", null, 0xFF674F, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 0, 0xFFFFFF, [0x70A9FF, 0xFFFFFF, 0xFF674F]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme do França PREMIUM!"", null,  0xFF674F, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!arp') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 90, 0xFFFFFF, [0xBAE8FF, 0xFFFFFF, 0xBAE8FF]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme da Argentina PREMIUM!"", null, 0xBAE8FF, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 90, 0xFFFFFF, [0xBAE8FF, 0xFFFFFF, 0xBAE8FF]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme da Argentina PREMIUM!"", null,  0xBAE8FF, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}


if (message == '!alp') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 90, 0xFFFFFF, [0x363636, 0xE8300C, 0xFFF81F]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme da Alemanha PREMIUM!"", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 90, 0xFFFFFF, [0x363636, 0xE8300C, 0xFFF81F]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme do Alemanha PREMIUM!"", null,  0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

//UNIFORMES EXCLUSIVOS

if (message == '!mud') { 
	if (Bras.includes(player.name)) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 1, 0x0303FF, [0xFFFFFF , 0x770800, 0xE3DFD8]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 1, 0x0303FF, [0xFFFFFF , 0x770800, 0xE3DFD8]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!zum') { 
	if (zum.includes(player.name)) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 56, 0x40DB8D, [0x0C6B4B , 0x1AA34D , 0x3EB812]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 56, 0x40DB8D, [0x0C6B4B , 0x1AA34D , 0x3EB812]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!fom') { 
	if (fominha.includes(player.name)) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 60, 0x40DB8D, [0x001B36]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 60, 0x40DB8D, [0x661E22]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!zx') {
	if (zx.includes(player.name)) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 90, 0xFFFFFF, [0x000000, 0x000077]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 90, 0xFFFFFF, [0x000000, 0x000077]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!wax') {
	if (waxie.includes(player.name)) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 60, 0xFFFFFF, [0x000000, 0x63FF69]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 60, 0xFFFFFF, [0x000000, 0x63FF69]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}
		//UNIFORMES//

		
		if (message == '!ath') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id || player.admin){
				room.setTeamColors(1, 60, 0xFFFFFF, [0xF20000, 0x0F0F0F, 0xF20000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO ATH.PARANAENSE!"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id || player.admin){
				room.setTeamColors(2, 60, 0xFFFFFF, [0xF20000, 0x0F0F0F, 0xF20000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO ATH.PARANAENSE!"", null, 0x00F2FA, ""bold"");
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!cru') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id || player.admin){
				room.setTeamColors(1, 90, 0xFFFFFF, [0x005DBA, 0x005DBA, 0x005DBA]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO CRUZEIRO!"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id || player.admin){
				room.setTeamColors(2, 90, 0xFFFFFF, [0x005DBA, 0x005DBA, 0x005DBA]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO CRUZEIRO!"", null, 0x00F2FA, ""bold"");
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!bay') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0x0C1359   , [0x8A0000 , 0x6E0000  , 0x590606]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BAYER DE MUNIQUE"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0x0C1359   , [0x8A0000 , 0x6E0000  , 0x590606]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BAYER DE MUNIQUE"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!ajx') {  
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0x000000  , [0xFFFFFF , 0xFC0000 , 0xFFFFFF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO AJAX"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0x000000  , [0xFFFFFF , 0xFC0000 , 0xFFFFFF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO AJAX"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!amz') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 60, 0xFFFFFF  , [0x000000 , 0x000000 , 0xFF0505]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA APOLLO RED"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 60, 0xFFFFFF  , [0x000000 , 0x000000 , 0x1C81E6]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA APOLLO BLUE"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!arg') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0xFFC70F  , [0x1382C2 , 0xFFFFFF , 0x1382C2]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA ARGENTINA"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFC70F  , [0x1382C2 , 0xFFFFFF , 0x1382C2]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA ARGENTINA"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!ita') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xB38B1D , [0x007A15 , 0xFFFFFF, 0xFF0A0A]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA ITÁLIA"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xB38B1D , [0x007A15 , 0xFFFFFF, 0xFF0A0A]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA ITÁLIA"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!psg') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xFFFFFF , [0x010A17 , 0xFF0000 , 0x010A17]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PSG"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0xFFFFFF , [0x010A17 , 0xFF0000 , 0x010A17]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PSG"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!rom') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, -149, 0xD19D0D , [0x9C0000 , 0x750000, 0x4A0707]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA ROMA"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, -149, 0xD19D0D , [0x9C0000 , 0x750000, 0x4A0707]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA ROMA"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}


		if (message == '!nap') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 60, 0xFFFFFF, [0x12A0FF , 0x0D8EFF, 0x0088D9]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO NAPOLI"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 60, 0xFFFFFF, [0x12A0FF , 0x0D8EFF, 0x0088D9]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO NAPOLI"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!rea') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 120, 0x00529F, [0xFDFEFE, 0xF7F9F9, 0xECF0F1]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO REAL MADRID"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 120, 0x00529F, [0xFDFEFE, 0xF7F9F9, 0xECF0F1]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO REAL MADRID"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!bar') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xE3B022, [0x00172E, 0x052E6B, 0xC90000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BARCELONA"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xE3B022, [0x00172E, 0x052E6B, 0xC90000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BARCELONA"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		
		if (message == '!atm') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0x1D2440, [0x7CCAD6]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO ATL. MADRID"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0x1D2440, [0x7CCAD6]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO ATL. MADRID"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!liv') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 120, 0xFFFFFF, [0xFF0000, 0xE60000, 0xBD0000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO LIVERPOOL"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 120, 0xFFFFFF, [0xFF0000, 0xE60000, 0xBD0000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO LIVERPOOL"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!mci') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xFFFFFF, [0x249AFD, 0x40A6FC, 0x54B1FF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO MAN. CITY"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xFFFFFF, [0x249AFD, 0x40A6FC, 0x54B1FF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO MAN. CITY"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!che') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xFFFFFF, [0x0600B0]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO CHELSEA"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xFFFFFF, [0x0600B0]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO CHELSEA"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}


		if (message == '!juv') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xC748B6, [0xFFFFFF, 0x000000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA JUVENTUS"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xC748B6, [0xFFFFFF, 0x000000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA JUVENTUS"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!itn') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xDAE810, [0x0006B5, 0x000000, 0x0006B5]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA INTERNAZIONALE"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xDAE810, [0x0006B5, 0x000000, 0x0006B5]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA INTERNAZIONALE"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!mil') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xFF0000, [0xF2F2F2]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO MILAN (BRANCA)"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xFF0000, [0xF2F2F2]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME D0 MILAN (BRANCA)"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}



		if (message == '!sao') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0xFFFFFF, [0xF7F7F7, 0xFB2121, 0xF7F7F7]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO SÃO PAULO"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFFFF, [0xF7F7F7, 0xFB2121, 0xF7F7F7]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO SÃO PAULO"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!pal') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0xFFFAFF, [0x035E19]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PALMEIRAS"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFAFF, [0x035E19]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PALMEIRAS"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!fla') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0xFFFFFF, [0xFF0303, 0x050505, 0xFF0000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO FLAMENGO"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFFFF, [0xFF0303, 0x050505, 0xFF0000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO FLAMENGO"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!pay') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0x70B3FF, [0x70B3FF, 0x2E9DFF, 0x006FFF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PAYSANDU"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0x70B3FF, [0x70B3FF, 0x2E9DFF, 0x006FFF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PAYSANDU"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!bra') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0x00FF11, [0xFFDE05]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BRASIL"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0x00FF11, [0xFFDE05]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BRASIL"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!fra') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xF7FFFC, [0x030019]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA FRANÇA"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xF7FFFC, [0x030019]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA FRANÇA"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!hol') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0X000000, [0xFF3D03]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA HOLANDA"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0X000000, [0xFF3D03]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA HOLANDA"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!bor') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 50,0x000000, [0xFFFF0D, 0xF2F20C, 0xE8E80C]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BORUSSIA DORTMUND"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 50, 0x000000, [0xFFFF0D, 0xF2F20C, 0xE8E80C]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BORUSSIA DORTMUND"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!rbl') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 50,0xBA0000, [0xE8E8E8, 0xEDEDED, 0xE80000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO RB LEIPZIG"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 50, 0xBA0000, [0xE8E8E8, 0xEDEDED, 0xE80000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO RB LEIPZIG"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!ein') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90,0xFFFFFF, [0x0F0F0F]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO EINTRACHT FRANKFURT (PRETO)"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFFFF, [0x0F0F0F]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO EINTRACHT FRANKFURT (PRETO)"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!mun') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90,0xFFFFFF, [0xEB0E0E]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO MANCHESTER UNITED"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFFFF, [0xEB0E0E]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO MANCHESTER UNITED"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!ars') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90,0x030121, [0xF6FF73]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO ARSENAL (2)"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0x030121, [0xF6FF73]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO ARSENAL (2)"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

	
		if (message == ""!afk"" ){
			if (players.length != 1 && player.team != Team.SPECTATORS) {
				if (player.team == Team.RED && streak > 0 && room.getScores() == null) {
					room.setPlayerTeam(player.id, Team.SPECTATORS);
				} else {
					room.sendAnnouncement(""[PV] Não pode ficar AFK enquanto está em uma equipe !"", player.id, 0xFF7B08);
					return false;
				}
			} else if (players.length == 1 && !getAFK(player)) {
				room.setPlayerTeam(player.id, Team.SPECTATORS);
			}
			setAFK(player, !getAFK(player));
			room.sendAnnouncement(player.name + (getAFK(player) ? "" está AFK !"" : "" Voltou do AFK !""), null, (getAFK(player) ? 0xFF7B08 : 0x8FFF8F));
			getAFK(player) ? updateRoleOnPlayerOut() : updateRoleOnPlayerIn();
			localStorage.getItem(getAuth(player)) ? stats = JSON.parse(localStorage.getItem(getAuth(player))) : stats = [0, 0, 0, 0, ""0.00"", 0, 0, 0, 0, ""0.00"", ""player""];
			setTimeout(() => {
				if (getAFK(player) && (player.name != semlimiteafk)) {
					room.kickPlayer(player.id, ""Tempo de afk excedido"", false)
				}
			}, 30 * 60 * 1000)
			
			return false;
		} 
				
		if (message == ""!afks"" ){
				var cstm = ""Lista de AFK : "";
				for (var i = 0; i < extendedP.length; i++) {
				if (room.getPlayer(extendedP[i][eP.ID]) != null && getAFK(room.getPlayer(extendedP[i][eP.ID]))) {
				if (140 - cstm.length < (room.getPlayer(extendedP[i][eP.ID]).name + "", "").length) {
				room.sendAnnouncement(cstm, player.id);
				cstm = ""... "";
				}
				cstm += room.getPlayer(extendedP[i][eP.ID]).name + "", "";
				}
				}
				if (cstm == ""Lista de AFK : "") {
				room.sendAnnouncement(""Não há ninguém na lista de AFK !"", player.id);
				return false;
				}
				cstm = cstm.substring(0, cstm.length - 2);
				cstm += ""."";
				room.sendAnnouncement(cstm, player.id);
				}

	if (message == ""!bb"") {
 room.kickPlayer(player.id, "" Tremi demais!! "", false);
    }

	if (message == ""!me"" ){
        var stats;
        localStorage.getItem(getAuth(player)) ? stats = JSON.parse(localStorage.getItem(getAuth(player))) : stats = [0, 0, 0, 0, ""0.00"", 0, 0, 0, 0, ""0.00""];
        room.sendAnnouncement(""[PV] Seus stats "" + player.name + "": 🎮 Partidas jogadas: "" + stats[Ss.GA] + "", ✅ Vitorias: "" + stats[Ss.WI] + "", ⭕ Empates: "" + stats[Ss.DR] + "", ❌ Derrotas: "" + stats[Ss.LS] + "", WR: "" + stats[Ss.WR] + ""%, ⚽️ Gols: "" + stats[Ss.GL] + "", 👟 Assistências: "" + stats[Ss.AS] + "", 🤚 GK: "" + stats[Ss.GK] + "", 🤚 CS: "" + stats[Ss.CS] + "", 🤚 CS%: "" + stats[Ss.CP] + ""%"", player.id, 0x73EC59, ""bold"");
        room.sendAnnouncement(""[PV] Quer mostrar a todos? Use !mostrarme."", player.id, 0xFF7900, ""bold"");
    } 	else if (message == ""!mostrarme"" ){
        var stats;
        localStorage.getItem(getAuth(player)) ? stats = JSON.parse(localStorage.getItem(getAuth(player))) : stats = [0, 0, 0, 0, ""0.00"", 0, 0, 0, 0, ""0.00""];
        room.sendAnnouncement(""[📄] ""+ player.name + "" mostrou seus stats!"", null, 0xFF7900, ""bold"")
        room.sendAnnouncement(""[📄] Stats de "" + player.name + "": 🎮 Partidas Jogadas: "" + stats[Ss.GA] + "", ✅ Vitorias: "" + stats[Ss.WI] + "", ⭕ Empates: "" + stats[Ss.DR] + "", ❌ Derrotas: "" + stats[Ss.LS] + "", WR: "" + stats[Ss.WR] + ""%, ⚽️ Gols: "" + stats[Ss.GL] + "", 👟 Assistências: "" + stats[Ss.AS] + "", 🤚 GK: "" + stats[Ss.GK] + "", 🤚 CS: "" + stats[Ss.CS] + "", 🤚 CS%: "" + stats[Ss.CP] + ""%"", null, 0x73EC59, ""bold"");
    } else if (message == ""!games"" ){
        var tableau = [];
        try {
            Object.keys(localStorage).forEach(function(key) {
                if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) {
                    tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.GA])]);
                }
            });
        } catch {

        }
        if (tableau.length < 5) {
            room.sendAnnouncement(""[PV] Não jogou partidas suficientes"", player.id, 0xFF0000);
            return false;
        }
        tableau.sort(function(a, b) {
            return b[1] - a[1];
        });
        room.sendAnnouncement(""🎮 Partidas Jogadas> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1], player.id, 0x73EC59);

        return false;
    } else 	if (message == ""!wins"" ){
        var tableau = [];
        try {
            Object.keys(localStorage).forEach(function(key) {
                if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) {
                    tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.WI])]);
                }
            });
        } catch {

        }
        if (tableau.length < 5) {
            room.sendAnnouncement(""[PV] Não jogou partidas suficientes"", player.id, 0x73EC59);
            return false;
        }
        tableau.sort(function(a, b) {
            return b[1] - a[1];
        });
        room.sendAnnouncement(""✅ Vitórias> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1], player.id, 0x73EC59);

        return false;
    } else 	if (message == ""!goals"" ){
        var tableau = [];
        try {
            Object.keys(localStorage).forEach(function(key) {
                if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) {
                    tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.GL])]);
                }
            });
        } catch {

        }
        if (tableau.length < 5) {
            room.sendAnnouncement(""[PV] Não jogou partidas suficientes"", player.id, 0x73EC59);
            return false;
        }
        tableau.sort(function(a, b) {
            return b[1] - a[1];
        });
        room.sendAnnouncement(""⚽️ Gols> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1], player.id, 0x73EC59);

        return false;
    } else 	if (message == ""!assists"" ){
        var tableau = [];
        try {
            Object.keys(localStorage).forEach(function(key) {
                if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) {
                    tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.AS])]);
                }
            });
        } catch {

        }
        if (tableau.length < 5) {
            room.sendAnnouncement(""[PV] Não jogou partidas suficientes"", player.id);
            return false;
        }
        tableau.sort(function(a, b) {
            return b[1] - a[1];
        });
        room.sendAnnouncement(""👟 Assistências> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1], player.id, 0x73EC59);

        return false;
    } else 	if (message == ""!cs"" ){
        var tableau = [];
        try {
            Object.keys(localStorage).forEach(function(key) {
                if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) {
                    tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.CS])]);
                }
            });
        } catch {

        }
        if (tableau.length < 5) {
            room.sendAnnouncement(""[PV] Não jogou partidas suficientes"", player.id, 0x73EC59);
            return false;
        }
        tableau.sort(function(a, b) {
            return b[1] - a[1];
        });
        room.sendAnnouncement(""🤚 CS> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1], player.id, 0x73EC59);

        return false;
    }
	if (message == ""!mutes"" ){
		var cstm = ""[PV] Lista de mutados : "";
		for (var i = 0; i < extendedP.length; i++) {
		if (room.getPlayer(extendedP[i][eP.ID]) != null && getMute(room.getPlayer(extendedP[i][eP.ID]))) {
		if (140 - cstm.length < (room.getPlayer(extendedP[i][eP.ID]).name + ""["" + (extendedP[i][eP.ID]) + ""], "").length) {
		room.sendAnnouncement(cstm, player.id);
		cstm = ""... "";
		}
		cstm += room.getPlayer(extendedP[i][eP.ID]).name + ""["" + (extendedP[i][eP.ID]) + ""], "";
		}
		}
		if (cstm == ""[PV] Lista de Mutados : "") {
		room.sendAnnouncement(""[PV] Não há ninguém na lista de mutados !"", player.id);
		return false;
		}
		cstm = cstm.substring(0, cstm.length - 2);
		cstm += ""."";
		room.sendAnnouncement(cstm, player.id);
		}
		
		else if ([""!mute""].includes(message[0].toLowerCase())) { // comando para mutar um jogador, deve ser admin, use !mute + ID do jogador
			if (player.admin) {			
			updateTeams();
		  
			var timeOut;
			if (!Number.isNaN(Number.parseInt(message[1])) && message.length > 1) {
			if (Number.parseInt(message[1]) > 0) {
			timeOut = Number.parseInt(message[1]) * 60 * 1000;
			}
			else {
			timeOut = 10 * 60 * 1000;
			}
			if (message[2].length > 1 && message[2][0] == ""#"") {
			message[2] = message[2].substring(1, message[2].length);
			if (!Number.isNaN(Number.parseInt(message[2])) && room.getPlayer(Number.parseInt(message[2])) != null) {
			if (room.getPlayer(Number.parseInt(message[2])).admin || getMute(room.getPlayer(Number.parseInt(message[2]))
			)) { return false;
			}
			setTimeout(function (player) { setMute(player, false); }, timeOut, room.getPlayer(Number.parseInt(message[2]
			))); setMute(room.getPlayer(Number.parseInt(message[2])), true);
			room.sendAnnouncement(room.getPlayer(Number.parseInt(message[2])).name + "" foi mutado por "" + (timeOut /
			60000) + "" minutos !""); }
			}
			}
			else if (Number.isNaN(Number.parseInt(message[1]))) {
			if (message[1].length > 1 && message[1][0] == ""#"") {
			message[1] = message[1].substring(1, message[1].length);
			if (!Number.isNaN(Number.parseInt(message[1])) && room.getPlayer(Number.parseInt(message[1])) != null) {
			if (room.getPlayer(Number.parseInt(message[1])).admin || getMute(room.getPlayer(Number.parseInt(message[1]))
			)) { return false;
			}
			setTimeout(function (player) { setMute(player, false); }, 10 * 60 * 1000, room.getPlayer(Number.parseInt
			(message[1])));
			setMute(room.getPlayer(Number.parseInt(message[1])), true);
			room.sendAnnouncement(room.getPlayer(Number.parseInt(message[1])).name + "" Foi mutado por 10 minutos!"");
			}
			}
			}
			}
			}
			
			else if ([""!unmute""].includes(message[0].toLowerCase())) { // comando para desmutar um jogador, deve ser admin, use !mute + ID do jogador
			if (player.admin && message.length >= 2) {
			if (message[1] == ""all"") {
			extendedP.forEach((ePlayer) => { ePlayer[eP.MUTE] = false; });
			room.sendAnnouncement(""Todos foram desmutados."");
			} else if (!Number.isNaN(Number.parseInt(message[1])) && room.getPlayer(Number.parseInt(message[1])) != null && getMute(room.getPlayer(Number.parseInt(message[1])))) {
			setMute(room.getPlayer(Number.parseInt(message[1])), false);
			room.sendAnnouncement(room.getPlayer(Number.parseInt(message[1])).name + "" Foi desmutado !"");
			}
			else if (Number.isNaN(Number.parseInt(message[1]))) {
			if (message[1].length > 1 && message[1][0] == ""#"") {
			message[1] = message[1].substring(1, message[1].length);
			if (!Number.isNaN(Number.parseInt(message[1])) && room.getPlayer(Number.parseInt(message[1])) != null && getMute(room.getPlayer(Number.parseInt(message[1])))) {
			setMute(room.getPlayer(Number.parseInt(message[1])), false);
			room.sendAnnouncement(room.getPlayer(Number.parseInt(message[1])).name + "" Foi desmutado !"");
			}
			}
			}
			}
			}
			
			else if ([""!banidos""].includes(message[0].toLowerCase())) { // comando para ver a lista de banidos
			if (banList.length == 0) {
			room.sendAnnouncement(""[PV] Ninguém foi banido."", player.id);
			return false;
			}
			var cstm = ""[PV] Lista de baneados : "";
			for (var i = 0; i < banList.length; i++) {
			if (140 - cstm.length < (banList[i][0] + ""["" + (banList[i][1]) + ""], "").length) {
			room.sendAnnouncement(cstm, player.id);
			cstm = ""... "";
			}
			cstm += banList[i][0] + ""["" + (banList[i][1]) + ""], "";
			}
			cstm = cstm.substring(0, cstm.length - 2);
			cstm += ""."";
			room.sendAnnouncement(cstm, player.id);
			}
			
			else if ([""!limparbans""].includes(message[0].toLowerCase())) { // comando para limpar os bans da sala, para desbanir um jogador especifico escreva !clearbans + ID do jogador
			if (player.admin) {
			if (message.length == 1) {
			room.clearBans();
			room.sendAnnouncement(""Bans removidos!"")
			banList = [];
			}
			if (message.length == 2) {
			if (!Number.isNaN(Number.parseInt(message[1]))) {
			if (Number.parseInt(message[1]) > 0) {
			ID = Number.parseInt(message[1]);
			room.clearBan(ID);
			if (banList.length != banList.filter((array) => array[1] != ID)) {
			room.sendAnnouncement(banList.filter((array) => array[1] == ID)[0][0] + "" ha sido baneado del host !"");
			}
			setTimeout(() => { banList = banList.filter((array) => array[1] != ID); }, 20);
			}
			}
			}
			}
			}

	  if (message[0][0] == ""!"") { // mensagens com o prefixo [!] não irão aparecer no chat.
	  return false;
	  }
	  
	  if (teamR.length != 0 && teamB.length != 0 && inChooseMode) { //choosing management
	  if (player.id == teamR[0].id || player.id == teamB[0].id) { // we care if it's one of the captains choosing
	  if (teamR.length <= teamB.length && player.id == teamR[0].id) { // we care if it's red turn && red cap talking
	  if ([""top"", ""auto""].includes(message[0].toLowerCase())) {
	  room.setPlayerTeam(teamS[0].id, Team.RED);
	  redCaptainChoice = ""top"";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + "" usou top !"", null);
	  return false;
	  }
	  else if ([""random"", ""rand""].includes(message[0].toLowerCase())) {
	  var r = getRandomInt(teamS.length);
	  room.setPlayerTeam(teamS[r].id, Team.RED);
	  redCaptainChoice = ""random"";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + "" usou random !"",null);
	  return false;
	  }
	  else if ([""bottom"", ""bot""].includes(message[0].toLowerCase())) {
	  room.setPlayerTeam(teamS[teamS.length - 1].id, Team.RED);
	  redCaptainChoice = ""bottom"";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + "" usou bottom !"", null);
	  return false;
	  }
	  else if (!Number.isNaN(Number.parseInt(message[0]))) {
	  if (Number.parseInt(message[0]) > teamS.length || Number.parseInt(message[0]) < 1) {
	  room.sendAnnouncement(""Número invalido !"", player.id);
	  return false;
	  }
	  else {
	  room.setPlayerTeam(teamS[Number.parseInt(message[0]) - 1].id, Team.RED);
	  room.sendAnnouncement(player.name + "" escolhoeu o(a) "" + teamS[Number.parseInt(message[0]) - 1].name + "" !"", null);
	  return false;
	  }
	  }
	  }
	  if (teamR.length > teamB.length && player.id == teamB[0].id) { // we care if it's red turn && red cap talking
	  if ([""top"", ""auto""].includes(message[0].toLowerCase())) {
	  room.setPlayerTeam(teamS[0].id, Team.BLUE);
	  blueCaptainChoice = ""top"";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + "" usou top !"", null);
	  return false;
	  }
	  else if ([""random"", ""rand""].includes(message[0].toLowerCase())) {
	  room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.BLUE);
	  blueCaptainChoice = ""random"";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + "" usou random !"", null);
	  return false;
	  }
	  else if ([""bottom"", ""bot""].includes(message[0].toLowerCase())) {
	  room.setPlayerTeam(teamS[teamS.length - 1].id, Team.BLUE);
	  blueCaptainChoice = ""bottom"";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + "" usou bottom !"", null);
	  return false;
	  }
	  else if (!Number.isNaN(Number.parseInt(message[0]))) {
	  if (Number.parseInt(message[0]) > teamS.length || Number.parseInt(message[0]) < 1) {
	  room.sendAnnouncement(""Número invalido !"", player.id);
	  return false;
	  }
	  else {
	  room.setPlayerTeam(teamS[Number.parseInt(message[0]) - 1].id, Team.BLUE);
	  room.sendAnnouncement(player.name + "" escolheu o(a) "" + teamS[Number.parseInt(message[0]) - 1].name + "" !"", null);
	  return false;
	  }
	  }
	  }
	  }
	  }
    
	  if (getMute(player)) {
        room.sendAnnouncement(""Você está mutado."", player.id);
        return false;
    }


	if (adminF.includes(player.name)) {
		stats = JSON.parse(localStorage.getItem(getAuth(player)));
		room.sendAnnouncement(""[⚽: "" + stats[Ss.GL] +""] [DONO] "" + player.name + "": "" + message.join(' '), null, Cor.Branco, Negrito, 1);
		return false;
	}

	if (adminG.includes(player.name)) {
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

		room.sendAnnouncement(""[⚽: "" + stats[Ss.GL] +""] [ADMIN-G] "" + player.name + "": "" + message.join(' '), null, 0xCCA01F, Negrito, 1);
		return false;
	}

	if (adminM.includes(player.name)) {
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

		room.sendAnnouncement(""[⚽: "" + stats[Ss.GL] +""] [ADMIN-M] "" + player.name + "": "" + message.join(' '), null, 0x74FF00, Negrito, 1);
		return false;
	}

	if (adminE.includes(player.name)) {
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

		room.sendAnnouncement(""[⚽: "" + stats[Ss.GL] +""] [ADMIN-E] "" + player.name + "": "" + message.join(' '), null, 0xF4CA21, Negrito, 1);
		return false;
	}

	if(L1.includes(player.name) === true && verificados.includes(player.name) === true){
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

	room.sendAnnouncement(""[⚽: "" + stats[Ss.GL] +""] [MVP++] ""+ player.name + "": "" + message.join(' '), null, cL1, fL1)		
	return false;
	}
	if(L2.includes(player.name) === true && verificados.includes(player.name) === true){
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

	room.sendAnnouncement(""[⚽: "" + stats[Ss.GL] +""] [] ""+ player.name + "": "" + message.join(' '), null, cL2, fL2)	
	return false;
	}
	if(L3.includes(player.name) === true && verificados.includes(player.name) === true){
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

		room.sendAnnouncement(""[⚽: "" + stats[Ss.GL] +""] [] ""+ player.name + "": "" + message.join(' '), null, cL3, fL3)	
		return false;
		}
		if(L4.includes(player.name) === true && verificados.includes(player.name) === true){
			stats = JSON.parse(localStorage.getItem(getAuth(player)));

			room.sendAnnouncement(""[⚽: "" + stats[Ss.GL] +""] [] ""+ player.name + "": "" + message.join(' '), null, cL4, fL4)	
			return false;
			}
		
			if(L5.includes(player.name) === true && verificados.includes(player.name) === true){
				stats = JSON.parse(localStorage.getItem(getAuth(player)));


				room.sendAnnouncement(""[⚽: "" + stats[Ss.GL] +""] [] ""+ player.name + "": "" + message.join(' '), null, cL5, fL5)	
				return false;
				}
			
				if(L6.includes(player.name) === true && verificados.includes(player.name) === true){
					stats = JSON.parse(localStorage.getItem(getAuth(player)));

					room.sendAnnouncement(""[⚽: "" + stats[Ss.GL] +""] [] ""+ player.name + "": "" + message.join(' '), null, cL6, fL6)	
					return false;
					}
					if(L7.includes(player.name) === true && verificados.includes(player.name) === true){
						stats = JSON.parse(localStorage.getItem(getAuth(player)));

						room.sendAnnouncement(""[⚽: "" + stats[Ss.GL] +""] [] ""+ player.name + "": "" + message.join(' '), null, cL7, fL7)	
						return false;
						}
					if(L10.includes(player.name) === true && verificados.includes(player.name) === true){
						stats = JSON.parse(localStorage.getItem(getAuth(player)));

						room.sendAnnouncement(""[⚽: "" + stats[Ss.GL] +""] [MVP++] ""+ player.name + "": "" + message.join(' '), null, cL10, fL10)	
						return false;
						}	
						if(L11.includes(player.name) === true && verificados.includes(player.name) === true){
							stats = JSON.parse(localStorage.getItem(getAuth(player)));

							room.sendAnnouncement(""[⚽: "" + stats[Ss.GL] +""] [MVP++] ""+ player.name + "": "" + message.join(' '), null, cL11, fL11)	
							return false;
							}	
							if(L12.includes(player.name) === true && verificados.includes(player.name) === true){
								stats = JSON.parse(localStorage.getItem(getAuth(player)));

								room.sendAnnouncement(""[⚽: "" + stats[Ss.GL] +""] [MVP++] ""+ player.name + "": "" + message.join(' '), null, cL12, fL12)	
								return false;
								}	

								if(L13.includes(player.name) === true && verificados.includes(player.name) === true){//MVP+
									stats = JSON.parse(localStorage.getItem(getAuth(player)));

									room.sendAnnouncement(""[⚽: "" + stats[Ss.GL] +""] [MVP+] ""+ player.name + "": "" + message.join(' '), null, cL13, fL13)	
									return false;
									}	

									if(L14.includes(player.name) === true && verificados.includes(player.name) === true){//MVP+
										stats = JSON.parse(localStorage.getItem(getAuth(player)));

										room.sendAnnouncement(""[⚽: "" + stats[Ss.GL] +""] [MVP++] ""+ player.name + "": "" + message.join(' '), null, cL14, fL14)	
										return false;
										}	
										if(L15.includes(player.name) === true && verificados.includes(player.name) === true){//MVP+
											stats = JSON.parse(localStorage.getItem(getAuth(player)));

											room.sendAnnouncement(""[⚽: "" + stats[Ss.GL] +""] [MVP++] ""+ player.name + "": "" + message.join(' '), null, cL15, fL15)	
											return false;
											}	
						
						if (booster.includes(player.name)) {
							
							stats = JSON.parse(localStorage.getItem(getAuth(player)));

							room.sendAnnouncement(""[BOOSTER] "" + player.name + "": "" + message.join(' '), null, 0xF000FF, Normal, 1);
							return false;
						}

						if (localStorage.getItem(getAuth(player))){ // elo definido por vitórias dos registrados
							stats = JSON.parse(localStorage.getItem(getAuth(player)));
							let db = jsonToMap(localStorage.getItem(USER_DATABASE)) 					 
							if (db.get(player.name)) {
								if (stats[Ss.GA] > 80 && stats[Ss.WR] > 90){
									room.sendAnnouncement(""🩸 [SIGMA] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 87){
									room.sendAnnouncement(""🌀🌀🌀 [ESTRELA] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 85 ){
									room.sendAnnouncement(""🌀🌀 [ESTRELA] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 83 ){
									room.sendAnnouncement(""🌀 [ESTRELA] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 81 ){
									room.sendAnnouncement(""💎💎💎 [DIAMANTE] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 79 ){
									room.sendAnnouncement(""💎💎 [DIAMANTE] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 77){
									room.sendAnnouncement(""💎 [DIAMANTE] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 75 ){
									room.sendAnnouncement(""🥇🥇🥇 [OURO] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 70 ){
									room.sendAnnouncement(""🥇🥇 [OURO] ""+ player.name + "": "" + message.join(' '), null)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 65){
									room.sendAnnouncement(""🥇 [OURO] ""+ player.name + "": "" + message.join(' '), null)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 60){
									room.sendAnnouncement(""🥈🥈🥈 [PRATA] ""+ player.name + "": "" + message.join(' '), null)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 55){
									room.sendAnnouncement(""🥈🥈 [PRATA] ""+ player.name + "": "" + message.join(' '), null)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 50 ){
									room.sendAnnouncement(""🥈 [PRATA] ""+ player.name + "": "" + message.join(' '), null)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 45){
									room.sendAnnouncement(""🥉🥉🥉 [BRONZE] ""+ player.name + "": "" + message.join(' '), null)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 40){
									room.sendAnnouncement(""🥉🥉 [BRONZE] ""+ player.name + "": "" + message.join(' '), null)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 30){
									room.sendAnnouncement(""🥉 [BRONZE] ""+ player.name + "": "" + message.join(' '), null)
									} else {
									room.sendAnnouncement(""🥴 [✅|APOLLO] ""+ player.name + "": "" + message.join(' '), null)
									}
									return false;
										}
										else {
											room.sendAnnouncement(""❌ ""+ player.name + "": "" + msg + """", null, Cor.Branco)
										}
									return false;
								}
							}


  room.onPlayerActivity = function (player) {
	  setActivity(player, 0);
  }
  
  room.onPlayerBallKick = function(player) {
    if (lastPlayersTouched[0] == null || player.id != lastPlayersTouched[0].id) {
        !activePlay ? activePlay = true : null;
        lastTeamTouched = player.team;
        lastPlayersTouched[1] = lastPlayersTouched[0];
        lastPlayersTouched[0] = player;
    }
}

  
	  /* GAME MANAGEMENT */
  
room.onGameStart = function (byPlayer) {
	game = new Game(Date.now(), room.getScores(), []);
	countAFK = true;
	activePlay = false;
	goldenGoal = false;
	endGameVariable = false;
	lastPlayersTouched = [null, null]
    Rposs = 0;
	Bposs = 0;
	GKList = []
	allReds = []
	allBlues = []  
	  if (teamR.length == maxTeamSize && teamB.length == maxTeamSize) {
	  for (var i = 0; i < maxTeamSize; i++) {
	  allReds.push(teamR[i]);
	  allBlues.push(teamB[i]);
	  }
	  }
	  for (var i = 0; i < extendedP.length; i++) {
	  extendedP[i][eP.GK] = 0;
	  extendedP[i][eP.ACT] = 0;
	  room.getPlayer(extendedP[i][eP.ID]) == null ? extendedP.splice(i, 1) : null;
	  }
	  room.sendAnnouncement(""     ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••     "", null, 0xFF8C00, Normal);
	  room.sendAnnouncement(""     •.       💬 Use t para falar com seu time--------------------------------------•     "", null, 0xFFD700, Normal);
	  room.sendAnnouncement(""     •.       A partida está sendo gravada-------------------------------------------•     "", null, 0xFFD700, Normal);
	  room.sendAnnouncement(""     •.       Use !uni para ver os uniformes-----------------------------------------•     "", null, 0xFFD700, Normal);
	  room.sendAnnouncement(""     •.       UNIFORMES VIPS: !itp, !alp, !arp, !frp, !min, !cia, !pre, !rsa.----•     "", null, 0xFFD700, Normal);
          room.sendAnnouncement(""     •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••   "", null, 0xFF8C00, Normal);
          room.sendAnnouncement(""𝙈𝙐𝘿𝘼𝙉𝘿𝙊 𝘼 𝘼𝙍𝙀𝙉𝘼..."", null, 0xFFFF00, Negrito);
	  room.startRecording();
	  deactivateChooseMode();
	  resetPause();
}
//var mensagem_programada;
//var mensagemIntervalo = 1000 * 60 * 15;//
//mensagem_programada = setInterval(function(){
//}, mensagemIntervalo)//
room.onGameStop = function (byPlayer) {
	partida = true;
	if (endGameVariable) {
	updateTeams();
	solo()
	if (inChooseMode) {
	if (players.length == 2 * maxTeamSize) {
	inChooseMode = false;
	resetBtn();
	for (var i = 0; i < maxTeamSize; i++) {
	setTimeout(() => { randomBtn(); }, 400 * i);
	}
	setTimeout(() => { room.startGame(); }, 2000);
	}
	else {
	if (lastWinner == Team.RED) {
	blueToSpecBtn();
	}
	else if (lastWinner == Team.BLUE) {
	redToSpecBtn();
	blueToRedBtn();
	}
	else {
	resetBtn();
	}
	setTimeout(() => { topBtn(); }, 500);
	}
	}
	else {
	if (players.length == 2) {
	if (lastWinner == Team.BLUE) {
	room.setPlayerTeam(teamB[0].id, Team.RED);
	room.setPlayerTeam(teamR[0].id, Team.BLUE);
	}
	setTimeout(() => { room.startGame(); }, 2000);
	}
	else if (players.length == 3 || players.length >= 2 * maxTeamSize + 1) {
	if (lastWinner == Team.RED) {
	blueToSpecBtn();
	}
	else {
	redToSpecBtn();
	blueToRedBtn();
	}
	setTimeout(() => { topBtn(); }, 200);
	setTimeout(() => { room.startGame(); }, 2000);
	}
	else if (players.length == 4) {
	resetBtn();
	setTimeout(() => { randomBtn(); setTimeout(() => { randomBtn(); }, 500); }, 500);
	setTimeout(() => { room.startGame(); }, 2000);
	}
	else if (players.length == 5 || players.length >= 2 * maxTeamSize + 1) {
	if (lastWinner == Team.RED) {
	blueToSpecBtn();
	}
	else {
	redToSpecBtn();
	blueToRedBtn();
	}
	setTimeout(() => { topBtn(); }, 200);
	activateChooseMode();
	}
	else if (players.length == 6) {
	resetBtn();
	setTimeout(() => { randomBtn(); setTimeout(() => { randomBtn(); setTimeout(() => { randomBtn(); }, 500); }, 500); }, 500);
	setTimeout(() => { room.startGame(); }, 2000);
	}
	}
	}
} 
  room.onGamePause = function (byPlayer) {
  pauseGame = true;
  }	  
  room.onGameUnpause = function (byPlayer) {
	  if (teamR.length == 4 && teamB.length == 4 && inChooseMode || (teamR.length == teamB.length && teamS.length < 2 && inChooseMode)) {
	  deactivateChooseMode();
	  }
	  pauseGame = false;
  }
  room.onGamePause = () => {
	let scores = room.getScores()
        let redNumero = scores.red
        let blueNumero = scores.blue
        let blueString = blueNumero.toString()
        let redString = redNumero.toString()
        room.sendAnnouncement(`𝙅𝙊𝙂𝙊 𝙁𝙊𝙄 𝙋𝘼𝙐𝙎𝘼𝘿𝙊! 𝙋𝙇𝘼𝘾𝘼𝙍 𝙍𝙀𝘿: ${redString} 𝙀 𝘽𝙇𝙐𝙀 𝘾𝙊𝙈: ${blueString}`, null, 0xFFFF00, Negrito)
  }
	  
  room.onGameUnpause = () => {
	room.sendAnnouncement(""𝙊 𝙅𝙊𝙂𝙊 𝙁𝙊𝙄 𝘿𝙀𝙎𝙋𝘼𝙐𝙎𝘼𝘿𝙊!"", null, 0xFFFF00, Negrito);
  }
  room.onTeamGoal = function (team) {
	activePlay = false;
	countAFK = false;
	const scores = room.getScores();
	let players = room.getPlayerList();

    for (let i = 0; i < players.length; i++) {
        if (players[i].team == team) room.setPlayerAvatar(players[i].id, ""🌟"");
    }
    setTimeout(() => {
        for (let i = 0; i < players.length; i++) {
           room.setPlayerAvatar(players[i].id, null);
        }
    }, resetarAvatarEm * 1000);
	game.scores = scores;
	if (lastPlayersTouched[0] != null && lastPlayersTouched[0].team == team) {
	if (lastPlayersTouched[1] != null && lastPlayersTouched[1].team == team) {
	var frasegol = frasesGOL[(Math.random() * frasesGOL.length) | 0]
	var fraseasis = frasesASS[(Math.random() * frasesASS.length) | 0]
	room.sendAnnouncement(getTime(scores) + frasegol + lastPlayersTouched[0].name + fraseasis + lastPlayersTouched[1].name + "". VELOCIDADE : "" + ballSpeed.toPrecision(4).toString() + ""km/h. "" + (team == Team.RED ? """" : """"),null,(team == Team.RED ? 0xFF0000 : 0x1E47EC), Italic);
	game.goals.push(new Goal(scores.time, team, lastPlayersTouched[0], lastPlayersTouched[1]));
	}
	else {
	var frasegol = frasesGOL[(Math.random() * frasesGOL.length) | 0]
	room.sendAnnouncement(getTime(scores) + frasegol + lastPlayersTouched[0].name + "", VELOCIDADE : "" + ballSpeed.toPrecision(4).toString() + ""km/h. "" + (team == Team.RED ? """" : """"),null,(team == Team.RED ? 0xFF0000 : 0x1E47EC), Italic);
	}
	}
	else {
	var fraseautogol = golcontra[(Math.random() * golcontra.length) | 0]
	room.sendAnnouncement(getTime(scores) + golcontra + lastPlayersTouched[0].name + "", VELOCIDADE : "" + ballSpeed.toPrecision(4).toString() + ""km/h. "" + (team == Team.RED ? """" : """"),null,(team == Team.RED ? 0xFF0000 : 0x1E47EC), Italic);
	game.goals.push(new Goal(scores.time, team, null, null));
	}
	if (scores.scoreLimit != 0 && (scores.red == scores.scoreLimit || scores.blue == scores.scoreLimit && scores.blue > 0 || goldenGoal == true)) {
	endGame(team);
	goldenGoal = false;
	setTimeout(() => { room.stopGame(); }, 1000);
	}
}
  
  room.onPositionsReset = function () {
	  countAFK = true;
	  lastPlayersTouched = [null, null];
  }
  
	  /* MISCELLANEOUS */
  
room.onRoomLink=(link)=>{
}
  
  room.onPlayerAdminChange = function (changedPlayer, byPlayer) {
	  if (getMute(changedPlayer) && changedPlayer.admin) {
	  room.sendAnnouncement(changedPlayer.name + "" foi desmutado."");
	  setMute(changedPlayer, false);
	  }
  }
  
  room.onStadiumChange = function (newStadiumName, byPlayer) {
  }

  //funcões

  function sendAnnouncementToDiscord(message) {

    var request = new XMLHttpRequest();
    request.open(""POST"",""https://discord.com/api/webhooks/1175160490658381854/9nLxzovLIOWWgWQ4S1i7315SbFq2355xqqn67CuFIloC7OrRo2HbE1FRL93l9A-5qpqb"");

    request.setRequestHeader('Content-type', 'application/json');

    var params = {
        avatar_url: 'https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&=',
        username: 'APOLLO',
        content: message
    };

    request.send(JSON.stringify(params));
}

function getDate(){
let data = new Date(),
dia=data.getDate().toString().padStart(2, '0'),
mes=(data.getMonth()+1).toString().padStart(2, '0'),
ano=data.getFullYear(),
horas=data.getHours().toString().padStart(2, '0'),
minutos=data.getMinutes().toString().padStart(2, '0');
segundos=data.getSeconds().toString().padStart(2, '0');

return `${dia}${minutos}${segundos}`;
}

  // Cada jogador que está jogando tem a chance de pausar o jogo apenas uma vez.
  function pausar(player) {
	  if (partida == true) room.sendAnnouncement(""A partida ainda não começou."", player.id, Cor.Vermelho, Negrito);
	  else {
		  if (player.team != 0) {
			  if (pausePlayers.includes(player.id)) room.sendAnnouncement(""Você não pode pausar a partida até que ele termine."", player.id, Cor.Vermelho, Negrito);
			  else {
				  if (pauseGame == true) room.sendAnnouncement(""A partida já está pausada."", player.id, Cor.Azulescuro, Negrito);
				  else {
					  pausePlayers.push(player.id);
					  room.sendAnnouncement(`${player.name} pausou a partida por ${tempoDePause/1000} segundos.`, null, Cor.Branco, Negrito); // tempoDePause dividido por 1000 = 5
					  room.pauseGame(true);
					  setTimeout(_=> {room.pauseGame(false);}, tempoDePause);
				  }
			  }
		  }
		  else room.sendAnnouncement(""Você não está em nenhum time."", player.id, Cor.Vermelho, Negrito);
	  }
  }
  
  function removerPlayer(player) {
	  if (pausePlayers.includes(player.id)) {
		  pausePlayers.splice(pausePlayers.indexOf(player.id), 1);
	  }
  }
  
  function resetPause() {
	  pausePlayers = [];
	  pauseGame = false;
	  partida = false;
  }
  
  room.setTeamsLock(true)


function aovivosend(url, params = {}) {

    const xhr = new XMLHttpRequest();

    xhr.open(""POST"", url);

    xhr.setRequestHeader(""Content-Type"", ""application/json""); // formato json

    /**
     * DISCORD WEBHOOK PARAMS
     * https://birdie0.github.io/discord-webhooks-guide/index.html
     */
    xhr.send(JSON.stringify(params));

}


function cor_e_fonte(){
	if(cL1.length == 0) cL1.push('0xFFFFFF')
	if(cL2.length == 0) cL2.push('0xFFFFFF')
	if(cL3.length == 0) cL3.push('0xFFFFFF')
	if(cL4.length == 0) cL4.push('0xFFFFFF')
	if(cL5.length == 0) cL5.push('0xFFFFFF')
	if(cL6.length == 0) cL6.push('0xFFFFFF')
	if(cL7.length == 0) cL7.push('0x008000')
	if(cL8.length == 0) cL8.push('0x008000')
	if(cL10.length == 0) cL10.push('0x008000')
	if(cL11.length == 0) cL11.push('0x008000')
	if(cL12.length == 0) cL12.push('0x008000')
	if(cL13.length == 0) cL13.push('0x008000')
	if(cL14.length == 0) cL14.push('0x008000')
	if(cL15.length == 0) cL15.push('0x008000')
	
	
	
	if(fL1.length == 0) fL1.push('normal') 
	if(fL2.length == 0) fL2.push('normal')
	if(fL3.length == 0) fL3.push('normal') 
	if(fL4.length == 0) fL4.push('normal')
	if(fL5.length == 0) fL5.push('normal')  
	if(fL6.length == 0) fL6.push('normal')
	if(fL7.length == 0) fL7.push('bold') 
	if(fL8.length == 0) fL8.push('bold') 
	if(fL10.length == 0) fL10.push('bold')
	if(fL11.length == 0) fL11.push('bold')
	if(fL12.length == 0) fL12.push('bold')
	if(fL13.length == 0) fL13.push('bold')
	if(fL14.length == 0) fL14.push('0x008000')
	if(fL15.length == 0) fL15.push('0x008000')

	}

function checkar(player, message){
	if (message.substr(0, 5) == ""!cor "" && message.length > 11) {
	room.sendAnnouncement(`O Código deve conter apenas 6 números ou letras \nfaça sua cor aqui ${linkhaxcolors} \nexemplos vermelho = !cor FF0000`, player.id)
	return false;
	}
	if (message.substr(0, 5) == ""!cor "") { if(verificados.includes(player.name) === false) room.sendAnnouncement(`${erro}`, player.id)}
	if (message.substr(0, 7) == ""!fonte "") { if(verificados.includes(player.name) === false) room.sendAnnouncement(`${erro}`, player.id)}
	alterar_fonte(player, message)	
}
  
  function solo(){
	if (teamR.length == 1 || teamB.length == 0) {
	setTimeout(() => { room.startGame(); }, 2000);
	}
	else {
		if (teamR.length == 0 || teamB.length == 1) {
		setTimeout(() => { room.startGame(); }, 2000);
		}
	}
}
  
  function Goal(time, team, striker, assist) {
	  this.time = time;
	  this.team = team;
	  this.striker = striker;
	  this.assist = assist;
  }
  
  function Game(date, scores, goals) {
	  this.date = date;
	  this.scores = scores;
	  this.goals = goals;
  }
  
  function getRandomInt(max) { // returns a random number from 0 to max-1
	  return Math.floor(Math.random() * Math.floor(max));
  }
  
  function getTime(scores) { // returns the current time of the game
	  return ""["" + Math.floor(Math.floor(scores.time / 60) / 10).toString() + Math.floor(Math.floor(scores.time / 60) % 10).toString() + "":"" + Math.floor(Math.floor(scores.time - (Math.floor(scores.time / 60) * 60)) / 10).toString() + Math.floor(Math.floor(scores.time - (Math.floor(scores.time / 60) * 60)) % 10).toString() + ""]""
  }
  
  function pointDistance(p1, p2) {
	  var d1 = p1.x - p2.x;
	  var d2 = p1.y - p2.y;
	  return Math.sqrt(d1 * d1 + d2 * d2);
  }
  
	  /* BUTTONS */

  function topBtn() {
	  if (teamS.length == 0) {
	  return;
	  }
	  else {
	  if (teamR.length == teamB.length) {
	  if (teamS.length > 1) {
	  room.setPlayerTeam(teamS[0].id, Team.RED);
	  room.setPlayerTeam(teamS[1].id, Team.BLUE);
	  }
	  return;
	  }
	  else if (teamR.length < teamB.length) {
	  room.setPlayerTeam(teamS[0].id, Team.RED);
	  }
	  else {
	  room.setPlayerTeam(teamS[0].id, Team.BLUE);
	  }
	  }
  }
  
  function randomBtn() {
	  if (teamS.length == 0) {
	  return;
	  }
	  else {
	  if (teamR.length == teamB.length) {
	  if (teamS.length > 1) {
	  var r = getRandomInt(teamS.length);
	  room.setPlayerTeam(teamS[r].id, Team.RED);
	  teamS = teamS.filter((spec) => spec.id != teamS[r].id);
	  room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.BLUE);
	  }
	  return;
	  }
	  else if (teamR.length < teamB.length) {
	  room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.RED);
	  }
	  else {
	  room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.BLUE);
	  }
	  }
  }
  
  function blueToSpecBtn() {
	  resettingTeams = true;
	  setTimeout(() => { resettingTeams = false; }, 100);
	  for (var i = 0; i < teamB.length; i++) {
	  room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
	  }
  }
  
  function redToSpecBtn() {
	  resettingTeams = true;
	  setTimeout(() => { resettingTeams = false; }, 100);
	  for (var i = 0; i < teamR.length; i++) {
	  room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
	  }
  }
  
  function resetBtn() {
	  resettingTeams = true;
	  setTimeout(() => { resettingTeams = false; }, 100);
	  if (teamR.length <= teamB.length) {
	  for (var i = 0; i < teamR.length; i++) {
	  room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
	  room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
	  }
	  for (var i = teamR.length; i < teamB.length; i++) {
	  room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
	  }
	  }
	  else {
	  for (var i = 0; i < teamB.length; i++) {
	  room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
	  room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
	  }
	  for (var i = teamB.length; i < teamR.length; i++) {
	  room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
	  }
	  }
  }
  
  function blueToRedBtn() {
	  resettingTeams = true;
	  setTimeout(() => { resettingTeams = false; }, 100);
	  for (var i = 0; i < teamB.length; i++) {
	  room.setPlayerTeam(teamB[i].id, Team.RED);
	  }
  }
  
	  /* GAME FUNCTIONS */
  
function checkTime() {
	  const scores = room.getScores();
	  game.scores = scores;
	  if (Math.abs(scores.time - scores.timeLimit) <= 0.01 && scores.timeLimit != 0) {
	  if (scores.red != scores.blue) {
	  if (checkTimeVariable == false) {
	  checkTimeVariable = true;
	  setTimeout(() => { checkTimeVariable = false; }, 3000);
	  scores.red > scores.blue ? endGame(Team.RED) : endGame(Team.BLUE);
	  setTimeout(() => { room.stopGame(); }, 2000);
	  }
	  return;
	  }
	  goldenGoal = true;
	  room.sendAnnouncement(""[⚽] GOL DE OURO"", null, Cor.Branco, Normal);
	  }
	  if (Math.abs(drawTimeLimit * 60 - scores.time - 60) <= 0.01 && players.length > 2) {
	  if (checkTimeVariable == false) {
	  checkTimeVariable = true;
	  setTimeout(() => { checkTimeVariable = false; }, 10);
	  room.sendAnnouncement(""[➕] 60 SEGUNDOS DE ACRÉSCIMOS!!"", null, Cor.Branco, Normal);
	  }
	  }
	  if (Math.abs(scores.time - drawTimeLimit * 60) <= 0.01 && players.length > 2) {
	  if (checkTimeVariable == false) {
	  checkTimeVariable = true;
	  setTimeout(() => { checkTimeVariable = false; }, 10);
	  endGame(Team.SPECTATORS);
	  room.stopGame();
	  goldenGoal = false;
	  }
	}
}
  
function endGame(winner) { // handles the end of a game : no stopGame function inside
    players.length >= 2 * maxTeamSize - 1 ? activateChooseMode() : null;
    const scores = room.getScores();
    game.scores = scores;
    Rposs = Rposs / (Rposs + Bposs);
    Bposs = 1 - Rposs;
    lastWinner = winner;
    endGameVariable = true;
    if (winner == Team.RED) {
        streak++;
        room.sendAnnouncement(""🔴 O RED VENCEU "" + scores.red + ""-"" + scores.blue + "", STREAK : "" + streak + "" 🏆"", null, Cor.Vermelho, Normal);
    } else if (winner == Team.BLUE) {
        streak = 1;
        room.sendAnnouncement(""🔵 O BLUE VENCEU "" + scores.blue + ""-"" + scores.red + "", STREAK : "" + streak + "" 🏆"", null, Cor.Azul, Normal);
    }
    room.sendAnnouncement(""POSSE DE BOLA: 🔴 "" + (Rposs * 100).toPrecision(3).toString() + ""% : "" + (Bposs * 100).toPrecision(3).toString() + ""% 🔵"", null, Cor.Azulclaro, ""bold"");
    scores.red == 0 ? (scores.blue == 0 ?
            room.sendAnnouncement(GKList[0].name + "" E "" + GKList[1].name + "" SÃO OS MELHORES GK DA SALA !!! "", null, Cor.Amrelo, Normal) :
            room.sendAnnouncement(GKList[1].name + "" UMA VERDADEIRO ET NO GOL!! PASSA NADA!!! "", null, Cor.Amrelo, Normal)) : scores.blue == 0 ?
        room.sendAnnouncement(GKList[0].name + "" UM VERDADEIRO GK !!! "", null, Cor.Amrelo, Normal ) : null
		RecSistem.sendDiscordWebhook(scores);
		room.sendAnnouncement(""Gravação enviada ao discord. ID: "" + `${getDate()}`+`${cod}${cod1}${cod2}${cod3}${cod4}`, null, Cor.Amrelo, Negrito);
		updateStats();
}

  
  function quickRestart() {
	  room.stopGame();
	  setTimeout(() => { room.startGame(); }, 2000);
  }
  
  function resumeGame() {
	  setTimeout(() => { room.startGame(); }, 2000);
	  setTimeout(() => { room.pauseGame(false); }, 1000);
  }
  
  function activateChooseMode() { // Modo escolhas ativado
	  inChooseMode = true;
	  slowMode = 2;
  }
  
  function deactivateChooseMode() { // Modo escolhas desativado
	  inChooseMode = false;
	  clearTimeout(timeOutCap);
	  if (slowMode != 0) {
	  slowMode = 0;
	  }
	  redCaptainChoice = """";
	  blueCaptainChoice = """";
  }
  
  function loadMap(map, scoreLim, timeLim) { // customização de mapas
	  if (map != '') {
	  room.setCustomStadium(map);
	  } else {
	  console.log(""error cargando mapa"")
	  room.setDefaultStadium(""Classic"");
	  }
	  room.setScoreLimit(scoreLim);
	  room.setTimeLimit(timeLim);
  }
  
	  /* PLAYER FUNCTIONS */
  
  function updateTeams() { // update the players' list and all the teams' list
	  players = room.getPlayerList().filter((player) => player.id != 0 && !getAFK(player));
	  teamR = players.filter(p => p.team === Team.RED);
	  teamB = players.filter(p => p.team === Team.BLUE);
	  teamS = players.filter(p => p.team === Team.SPECTATORS);
  }
  
  function handleInactivity() { // handles inactivity : players will be kicked after afkLimit
    if (countAFK && (teamR.length + teamB.length) > 1) {
        for (var i = 0; i < teamR.length; i++) {
            setActivity(teamR[i], getActivity(teamR[i]) + 1);
        }
        for (var i = 0; i < teamB.length; i++) {
            setActivity(teamB[i], getActivity(teamB[i]) + 1);
        }
    }
    for (var i = 0; i < extendedP.length; i++) {
        if (extendedP[i][eP.ACT] == 60 * (2 / 3 * afkLimit)) {
			room.sendAnnouncement(""@"" + room.getPlayer(extendedP[i][eP.ID]).name + "", mova-se em "" + Math.floor(afkLimit / 3) + "" segundos, para não ser kickado pela verificação de 'AFKS'!"", extendedP[i][eP.ID], Cor.Laranja, Negrito);

        }
        if (extendedP[i][eP.ACT] >= 60 * afkLimit) {
            extendedP[i][eP.ACT] = 0;
            if (room.getScores().time <= afkLimit - 0.5) {
                setTimeout(() => { !inChooseMode ? quickRestart() : room.stopGame(); }, 10);
            }
            room.kickPlayer(extendedP[i][eP.ID], ""AFK"", false);
        }
    }
}
  
  function getAuth(player) {
	  return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.AUTH] : null;
  }
  
  function getAFK(player) {
	  return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.AFK] : null;
  }
  
  function setAFK(player, value) {
	  extendedP.filter((a) => a[0] == player.id).forEach((player) => player[eP.AFK] = value);
  }
  
  function getActivity(player) {
	  return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.ACT] : null;
  }
  
  function setActivity(player, value) {
	  extendedP.filter((a) => a[0] == player.id).forEach((player) => player[eP.ACT] = value);
  }
  
  function getGK(player) {
	  return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.GK] : null;
  }
  
  function setGK(player, value) {
	  extendedP.filter((a) => a[0] == player.id).forEach((player) => player[eP.GK] = value);
  }
  
  function getMute(player) {
	  return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.MUTE] : null;
  }
  
  function setMute(player, value) {
	  extendedP.filter((a) => a[0] == player.id).forEach((player) => player[eP.MUTE] = value);
  }
  
  function updateRoleOnPlayerIn() { // Se a lista de specs for = 0, inicia o jogo.
	  updateTeams()
	  if (inChooseMode) {
	  if (players.length == 6) {
	  loadMap(Mapa, scoreMapa, tempoMapa);
	  }
	  getSpecList(teamR.length <= teamB.length ? teamR[0] : teamB[0]);
	  }
	  balanceTeams();	
  }
  
  function updateRoleOnPlayerOut() { // Detectar ragequit e atualizar times.
	  updateTeams();
	  if (room.getScores() != null) {
	  var scores = room.getScores();
	  if (players.length >= 2 * maxTeamSize && scores.time >= (5 / 6) * game.scores.timeLimit && teamR.length != teamB.length) {
	  if (teamR.length < teamB.length) {
	  if (scores.blue - scores.red == 2) {
	  endGame(Team.BLUE);
	  room.sendAnnouncement(""Ragequit, jogo finalizado"");
	  setTimeout(() => { room.stopGame(); }, 100);
	  return;
	  }
	  }
	  else {
	  if (scores.red - scores.blue == 2) {
	  endGame(Team.RED);
	  room.sendAnnouncement(""Ragequit, jogo finalizado"");
	  setTimeout(() => { room.stopGame(); }, 100);
	  return;
	  }
	  }
	  }
	  }
	  if (inChooseMode) {
	  if (players.length < 6) {
	  loadMap(Mapa, scoreMapa, tempoMapa);
	  }
	  if (teamR.length == 0 || teamB.length == 0) {
	  teamR.length == 0 ? room.setPlayerTeam(teamS[0].id, Team.RED) : room.setPlayerTeam(teamS[0].id, Team.BLUE);
	  return;
	  }
	  if (Math.abs(teamR.length - teamB.length) == teamS.length) {
	  room.sendAnnouncement(""Nenhum player restou, completando equipes e iniciando ..."");
	  deactivateChooseMode();
	  resumeGame();
	  var b = teamS.length;
	  if (teamR.length > teamB.length) {
	  for (var i = 0; i < b; i++) {
	  setTimeout(() => { room.setPlayerTeam(teamS[0].id, Team.BLUE); }, 5 * i);
	  }
	  }
	  else {
	  for (var i = 0; i < b; i++) {
	  setTimeout(() => { room.setPlayerTeam(teamS[0].id, Team.RED); }, 5 * i);
	  }
	  }
	  return;
	  }
	  if (streak == 0 && room.getScores() == null) {
	  if (Math.abs(teamR.length - teamB.length) == 2) { // se alguém saiu de um time tem 2 jogadores a mais que o outro.
	  room.sendAnnouncement("" Equilibrando equipes... "");
	  teamR.length > teamB.length ? room.setPlayerTeam(teamR[teamR.length - 1].id, Team.SPECTATORS) : room.setPlayerTeam(teamB[teamB.length - 1].id, Team.SPECTATORS); }
	  }
	  if (teamR.length == teamB.length && teamS.length < 2) {
	  deactivateChooseMode();
	  resumeGame();
	  return;
	  }
	  capLeft ? choosePlayer() : getSpecList(teamR.length <= teamB.length ? teamR[0] : teamB[0]);
	  }
	  balanceTeams();
  }
  
  function balanceTeams() { // Função que balançea os times, corrigi times que estão com player a menos.
	  if (!inChooseMode) {
		  if (players.length == 1 && teamR.length == 0) { // 1 player
			  quickRestart();
			  loadMap(Mapa, scoreMapa, tempoMapa);
			  room.setPlayerTeam(players[0].id, Team.RED);
		  }
		  else if (Math.abs(teamR.length - teamB.length) == teamS.length && teamS.length > 0) { // spec players supply required players
			  const n = Math.abs(teamR.length - teamB.length);
			  if (teamR.length > teamB.length) {
				  for (var i = 0; i < n; i++) {
					  room.setPlayerTeam(teamS[i].id, Team.BLUE);
				  }
			  }
			  else {
				  for (var i = 0; i < n; i++) {
					  room.setPlayerTeam(teamS[i].id, Team.RED);
				  }
			  }
		  }
		  else if (Math.abs(teamR.length - teamB.length) > teamS.length) { //no sufficient players
			  const n = Math.abs(teamR.length - teamB.length);
			  if (players.length == 1) {
				  quickRestart();
				  loadMap(Mapa, scoreMapa, tempoMapa);
				  room.setPlayerTeam(players[0].id, Team.RED);
				  return;
			  }
			  else if (players.length == 6) {
				  quickRestart();
				  
			  }
			  if (players.length == maxTeamSize * 2 - 1) {
				  allReds = [];
				  allBlues = [];
			  }
			  if (teamR.length > teamB.length) {
				  for (var i = 0; i < n; i++) {
					  room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
				  }
			  }
			  else {
				  for (var i = 0; i < n; i++) {
					  room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
				  }
			  }
		  }
		  else if (Math.abs(teamR.length - teamB.length) < teamS.length && teamR.length != teamB.length) { //choose mode
			  room.pauseGame(true)
			  activateChooseMode();
			  choosePlayer();
		  }
		  else if (teamS.length >= 2 && teamR.length == teamB.length && teamR.length < maxTeamSize) { //2 in red 2 in blue and 2 or more spec
			  if (teamR.length == 2) {
				  quickRestart();
				  if (!teamS.length == 2){
					  
				  }
			  }
			  topBtn();
		  }
	  }
  }
  
  function alterar_cor(player, message){
	if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L1.includes(player.name) === true) {
	if(cL1.length == 1 && message.length <= 11){ 
	cL1.splice(cL1.indexOf(message)) + cL1.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL1)}}

	if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L2.includes(player.name) === true) {
	if(cL2.length == 1 && message.length <= 11){ 
	cL2.splice(cL2.indexOf(message)) + cL2.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL2)}}
	
	if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L3.includes(player.name) === true) {
	if(cL3.length == 1 && message.length <= 11){ 
	cL3.splice(cL3.indexOf(message)) + cL3.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL3)}}
	
	if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L4.includes(player.name) === true) {
	if(cL4.length == 1 && message.length <= 11){ 
	cL4.splice(cL4.indexOf(message)) + cL4.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL4)}}
	
	if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L5.includes(player.name) === true) {
	if(cL5.length == 1 && message.length <= 11){ 
	cL5.splice(cL5.indexOf(message)) + cL5.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL5)}}

	if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L6.includes(player.name) === true) {
		if(cL6.length == 1 && message.length <= 11){ 
		cL6.splice(cL6.indexOf(message)) + cL6.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL6)}}

		if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L7.includes(player.name) === true) {
			if(cL7.length == 1 && message.length <= 11){ 
			cL7.splice(cL7.indexOf(message)) + cL7.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL7)}}

			if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L8.includes(player.name) === true) {
				if(cL8.length == 1 && message.length <= 11){ 
				cL8.splice(cL8.indexOf(message)) + cL8.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL8)}}

				if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L10.includes(player.name) === true) {
					if(cL10.length == 1 && message.length <= 11){ 
					cL10.splice(cL10.indexOf(message)) + cL10.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL10)}}

					if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L11.includes(player.name) === true) {
						if(cL11.length == 1 && message.length <= 11){ 
						cL11.splice(cL11.indexOf(message)) + cL11.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL11)}}

						if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L12.includes(player.name) === true) {
							if(cL12.length == 1 && message.length <= 11){ 
							cL12.splice(cL12.indexOf(message)) + cL12.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL12)}}

							if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L13.includes(player.name) === true) {
								if(cL13.length == 1 && message.length <= 11){ 
								cL13.splice(cL13.indexOf(message)) + cL13.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL13)}}

								if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L14.includes(player.name) === true) {
									if(cL14.length == 1 && message.length <= 11){ 
									cL14.splice(cL14.indexOf(message)) + cL14.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL14)}}

									if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L15.includes(player.name) === true) {
										if(cL15.length == 1 && message.length <= 11){ 
										cL15.splice(cL15.indexOf(message)) + cL15.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL15)}}
	
								}

	

function alterar_fonte(player, message){
	if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L1.includes(player.name) === true) { 
	if(fL1.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){
	fL1.splice(fL1.indexOf(message)) + fL1.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
	else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}
	
	if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L2.includes(player.name) === true) { 
	if(fL2.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
	fL2.splice(fL2.indexOf(message)) + fL2.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
	else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}
	
	if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L3.includes(player.name) === true) { 
	if(fL3.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
	fL3.splice(fL3.indexOf(message)) + fL3.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
	else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}
	
	if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L4.includes(player.name) === true) { 
	if(fL4.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
	fL4.splice(fL4.indexOf(message)) + fL4.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
	else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}
	
	if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L5.includes(player.name) === true) { 
	if(fL5.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
	fL5.splice(fL5.indexOf(message)) + fL5.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
	else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

	if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L6.includes(player.name) === true) { 
		if(fL6.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
		fL6.splice(fL6.indexOf(message)) + fL6.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
		else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

		if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L7.includes(player.name) === true) { 
			if(fL7.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
			fL7.splice(fL7.indexOf(message)) + fL7.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
			else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

			if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L8.includes(player.name) === true) { 
				if(fL8.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
				fL8.splice(fL8.indexOf(message)) + fL8.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
				else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

				if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L10.includes(player.name) === true) { 
					if(fL10.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
					fL10.splice(fL10.indexOf(message)) + fL10.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
					else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

					if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L11.includes(player.name) === true) { 
						if(fL11.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
						fL11.splice(fL11.indexOf(message)) + fL11.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
						else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

						if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L12.includes(player.name) === true) { 
							if(fL12.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
							fL12.splice(fL12.indexOf(message)) + fL12.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
							else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

							if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L13.includes(player.name) === true) { 
								if(fL13.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
								fL13.splice(fL13.indexOf(message)) + fL13.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
								else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

								if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L14.includes(player.name) === true) { 
									if(fL14.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
									fL14.splice(fL14.indexOf(message)) + fL14.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
									else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

									if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L15.includes(player.name) === true) { 
										if(fL15.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
										fL15.splice(fL15.indexOf(message)) + fL15.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
										else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}
}

  
  function choosePlayer() { // Função para que os capitães possam escolher.
	  clearTimeout(timeOutCap);
	  if (teamR.length <= teamB.length && teamR.length != 0) {
	  room.sendAnnouncement(""Escolha o número disponivel ou use random, bottom e/ou top"", teamR[0].id);
	  timeOutCap = setTimeout(function (player) { room.sendAnnouncement(""Seja rápido @"" + player.name + "", restam "" + Number.
	  parseInt(chooseTime / 2) + "" segundos para escolher !""); timeOutCap = setTimeout(function (player) { room.
	  kickPlayer(player.id, ""Não escolheu a tempo, ou esteve AFK!"", false); }, chooseTime * 500, teamR[0]); }, chooseTime * 1000, teamR[0]);
	  }
	  else if (teamB.length < teamR.length && teamB.length != 0) {
	  room.sendAnnouncement(""Escolha o número disponivel ou use random, bottom e/ou top"", teamB[0].
	  id); timeOutCap = setTimeout(function (player) { room.sendAnnouncement(""Seja rápido @"" + player.name + "", restam "" + Number.
	  parseInt(chooseTime / 2) + "" segundos para escolher !"", player.id); timeOutCap = setTimeout(function (player) { room.
	  kickPlayer(player.id, ""Não escolheu a tempo, ou esteva AFK!"", false); }, chooseTime * 500, teamB[0]); }, chooseTime * 1000, teamB[0]);
	  }
	  if (teamR.length != 0 && teamB.length != 0) getSpecList(teamR.length <= teamB.length ? teamR[0] : teamB[0]);
  }
  
  function getSpecList(player) {
    var cstm = ""[PV] Jogadores : "";
    for (var i = 0; i < teamS.length; i++) {
        if (140 - cstm.length < (teamS[i].name + ""["" + (i + 1) + ""], "").length) {
            room.sendAnnouncement(cstm, player.id);
            cstm = ""... "";
        }
        cstm += teamS[i].name + ""["" + (i + 1) + ""], "";
    }
    cstm = cstm.substring(0, cstm.length - 2);
    cstm += ""."";
    room.sendAnnouncement(cstm, player.id);
}


function getLastTouchOfTheBall() {
	const ballPosition = room.getBallPosition();
	updateTeams();
	for (var i = 0; i < players.length; i++) {
	if (players[i].position != null) {
	var distanceToBall = pointDistance(players[i].position, ballPosition);
	if (distanceToBall < triggerDistance) {
	!activePlay ? activePlay = true : null;
	if (lastTeamTouched == players[i].team && lastPlayersTouched[0] != null && lastPlayersTouched[0].id != players[i].id) {
	lastPlayersTouched[1] = lastPlayersTouched[0];
	lastPlayersTouched[0] = players[i];
	}
	lastTeamTouched = players[i].team;
	}
	}
	}
	}
	
	function getStats() { // gives possession, ball speed and GK of each team
	if (activePlay) {
	updateTeams();
	lastTeamTouched == Team.RED ? Rposs++ : Bposs++;
	var ballPosition = room.getBallPosition();
	point[1] = point[0];
	point[0] = ballPosition;
	ballSpeed = (pointDistance(point[0], point[1]) * 60 * 60 * 60)/15000;
	var k = [-1, Infinity];
	for (var i = 0; i < teamR.length; i++) {
	if (teamR[i].position.x < k[1]) {
	k[0] = teamR[i];
	k[1] = teamR[i].position.x;
	}
	}
	k[0] != -1 ? setGK(k[0], getGK(k[0]) + 1) : null;
	k = [-1, -Infinity];
	for (var i = 0; i < teamB.length; i++) {
	if (teamB[i].position.x > k[1]) {
	k[0] = teamB[i];
	k[1] = teamB[i].position.x;
	}
	}
	k[0] != -1 ? setGK(k[0], getGK(k[0]) + 1) : null;
	findGK();
	}
	}
	
	function updateStats() {
	if (players.length >= 2 * maxTeamSize && (game.scores.time >= (5 / 6) * game.scores.timeLimit || game.scores.red == game.scores.scoreLimit || game.scores.blue == game.scores.scoreLimit) && allReds.length >= maxTeamSize && allBlues.length >= maxTeamSize) {
	var stats;
	for (var i = 0; i < allReds.length; i++) {
	localStorage.getItem(getAuth(allReds[i])) ? stats = JSON.parse(localStorage.getItem(getAuth(allReds[i]))) : stats = [0, 0, 0, 0, ""0.00"", 0, 0, 0, 0, ""0.00"", ""player"", allReds[i].name];
	stats[Ss.GA]++;
	lastWinner == Team.RED ? stats[Ss.WI]++ : lastWinner == Team.BLUE ? stats[Ss.LS]++ : stats[Ss.DR]++;
	stats[Ss.WR] = (100 * stats[Ss.WI] / stats[Ss.GA]).toPrecision(3);
	localStorage.setItem(getAuth(allReds[i]), JSON.stringify(stats));
	}
	for (var i = 0; i < allBlues.length; i++) {
	localStorage.getItem(getAuth(allBlues[i])) ? stats = JSON.parse(localStorage.getItem(getAuth(allBlues[i]))) : stats = [0, 0, 0, 0, ""0.00"", 0, 0, 0, 0, ""0.00"", ""player"", allBlues[i].name];
	stats[Ss.GA]++;
	lastWinner == Team.BLUE ? stats[Ss.WI]++ : lastWinner == Team.RED ? stats[Ss.LS]++ : stats[Ss.DR]++;
	stats[Ss.WR] = (100 * stats[Ss.WI] / stats[Ss.GA]).toPrecision(3);
	localStorage.setItem(getAuth(allBlues[i]), JSON.stringify(stats));
	}
	for (var i = 0; i < game.goals.length; i++) {
	if (game.goals[i].striker != null) {
	if ((allBlues.concat(allReds)).findIndex((player) => player.id == game.goals[i].striker.id) != -1) {
	stats = JSON.parse(localStorage.getItem(getAuth(game.goals[i].striker)));
	stats[Ss.GL]++;
	localStorage.setItem(getAuth(game.goals[i].striker), JSON.stringify(stats));
	}
	}
	if (game.goals[i].assist != null) {
	if ((allBlues.concat(allReds)).findIndex((player) => player.name == game.goals[i].assist.name) != -1) {
	stats = JSON.parse(localStorage.getItem(getAuth(game.goals[i].assist)));
	stats[Ss.AS]++;
	localStorage.setItem(getAuth(game.goals[i].assist), JSON.stringify(stats));
	}
	}
	}
	if (allReds.findIndex((player) => player.id == GKList[0].id) != -1) {
	stats = JSON.parse(localStorage.getItem(getAuth(GKList[0])));
	stats[Ss.GK]++;
	game.scores.blue == 0 ? stats[Ss.CS]++ : null;
	stats[Ss.CP] = (100 * stats[Ss.CS] / stats[Ss.GK]).toPrecision(3);
	localStorage.setItem(getAuth(GKList[0]), JSON.stringify(stats));
	}
	if (allBlues.findIndex((player) => player.id == GKList[1].id) != -1) {
	stats = JSON.parse(localStorage.getItem(getAuth(GKList[1])));
	stats[Ss.GK]++;
	game.scores.red == 0 ? stats[Ss.CS]++ : null;
	stats[Ss.CP] = (100 * stats[Ss.CS] / stats[Ss.GK]).toPrecision(3);
	localStorage.setItem(getAuth(GKList[1]), JSON.stringify(stats));
	}
	}
	}
	
	function findGK() {
	var tab = [[-1,""""], [-1,""""]];
	for (var i = 0; i < extendedP.length ; i++) {
	if (room.getPlayer(extendedP[i][eP.ID]) != null && room.getPlayer(extendedP[i][eP.ID]).team == Team.RED) {
	if (tab[0][0] < extendedP[i][eP.GK]) {
	tab[0][0] = extendedP[i][eP.GK];
	tab[0][1] = room.getPlayer(extendedP[i][eP.ID]);
	}
	}
	else if (room.getPlayer(extendedP[i][eP.ID]) != null && room.getPlayer(extendedP[i][eP.ID]).team == Team.BLUE) {
	if (tab[1][0] < extendedP[i][eP.GK]) {
	tab[1][0] = extendedP[i][eP.GK];
	tab[1][1] = room.getPlayer(extendedP[i][eP.ID]);
	}
	}
	}
	GKList = [tab[0][1], tab[1][1]];
	}

function isBlacklisted(player){
    return blacklist.filter(b => b.ipv4 == player.ipv4 || b.Auth == player.auth || b.Conn == player.conn).length > 0;
}

  function getDatehoras(){
	let data = new Date(),
	dia=data.getDate().toString().padStart(2, '0'),
	mes=(data.getMonth()+1).toString().padStart(2, '0'),
	horas=data.getHours().toString().padStart(2, '0'),
	minutos=data.getMinutes().toString().padStart(2, '0');
	return `${horas}:${minutos}`;
}

function getDateInfo(){
	let data = new Date(),
	dia=data.getDate().toString().padStart(2, '0'),
	mes=(data.getMonth()+1).toString().padStart(2, '0'),
	ano=data.getFullYear(),
	horas=data.getHours().toString().padStart(2, '0'),
	minutos=data.getMinutes().toString().padStart(2, '0');
	segundos=data.getSeconds().toString().padStart(2, '0');
	return `${dia} do ${mes} de ${ano}, ás ${horas}:${minutos}:${segundos}`;
}

function dataehora(){
	let data = new Date(),
	dia=data.getDate().toString().padStart(2, '0'),
	mes=(data.getMonth()+1).toString().padStart(2, '0'),
	ano=data.getFullYear(),
	horas=data.getHours().toString().padStart(2, '0'),
	minutos=data.getMinutes().toString().padStart(2, '0');
	segundos=data.getSeconds().toString().padStart(2, '0');
	return `${dia}/${mes} de ${ano}, ás ${horas}:${minutos} e ${segundos} segundos`;
}


function multiplas_abas(player){
conns.push([player.id,player.name,player.auth,player.conn])
playerConn[player.id] = player.conn; 
if (room.getPlayerList().filter((p) => playerConn[p.id] == player.conn).length > 1) 
room.kickPlayer(room.getPlayerList().filter((p) => playerConn[p.id] == player.conn)[1].id, ""Você já está nessa sala em outra aba, feche a outra aba."", false)
}

function playerChat(player, message) {
	var playerTargetIndex = players.findIndex(
		(p) => p.name.replaceAll(' ', '_') == msgArray[0].substring(2)
	);
	if (playerTargetIndex == -1) {
		room.sendAnnouncement(
			""Player inválido, verifique se o nome digitado está correto."",
			player.id,
			Cor.Vermelho,
			'bold',
		);
		return false;
	}
	var playerTarget = players[playerTargetIndex];
	if (player.id == playerTarget.id) {
		room.sendAnnouncement(
			""Você não pode enviar um PV para si mesmo!"",
			player.id,
			Cor.Vermelho,
			'bold',
			null
		);
		return false;
	}
	var messageFrom = `[Privado com ${playerTarget.name}] ${player.name}: ${msgArray.slice(1).join(' ')}`

	var messageTo = `[Privado com ${player.name}] ${player.name}: ${msgArray.slice(1).join(' ')}`

	room.sendAnnouncement(
		messageFrom,
		player.id,
		Cor.Azulclaro,
		Normal,
		1
	);
	room.sendAnnouncement(
		messageTo,
		playerTarget.id,
		Cor.Azulclaro,
		Normal,
		1
	);
}

room.onGameTick = function () {
    checkTime()
    getLastTouchOfTheBall()
    getStats()
    handleInactivity()
	lastScores = room.getScores()
}"
fRHMQ7ZD,Untitled,victor128w,JavaScript,Monday 11th of December 2023 06:00:03 PM CDT,"const USER_DATABASE = ""USER_DATABASE"";

let
roomNameString = ""🌌 APOLLO | Basquete x3 🏀 ""
    room = HBInit({
	roomName: roomNameString, // nome da sua hospedagem
	maxPlayers: 30, // quantidade de players que essa sala pode suportar, maximo 30
	public: true, // true para sala publica, false para sala privada.
        playerName: ""[🎮]"",
	geo : { code : ""KP"", lat : -19.82, lon : -43.95}, // localização da hospedagem
	noPlayer: false// false para host com bot, true para host sem bot
})

let
prefixString = ""!"",
bansURL = 'https://discord.com/api/webhooks/1175486097082568755/Zweqkf5W4qSTgIKXO6m-032IrC1-YpYoOO476DKORXkATTIpt8lI-J6kuw7L5YUlkpkB',
JogadoresBanidosObject = {};

let Request = {
	post: (player, content)=>{
		let params = {
			""username"": `${player.name} aplicou um banimento`,
			""avatar_url"": ""https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&="",
			""content"": content,
			""url"": ""https://discord.com/api/webhooks/1175486097082568755/Zweqkf5W4qSTgIKXO6m-032IrC1-YpYoOO476DKORXkATTIpt8lI-J6kuw7L5YUlkpkB"",
		};

		fetch(bansURL, {
			method: ""POST"",
			headers: new Headers({ ""Content-Type"": ""application/json"" }),
			body: JSON.stringify(params)
		})
	}
};

let Comandos = {
	ban: (player, tempo, conn, motivo)=>{
		let aliasTempoArray = [""s"", ""m"", ""h"", ""d""];

		if (!parseInt(tempo[0])) room.sendAnnouncement(`${tempo} não é um número inteiro.`, player.id);
		else {
			if (tempo.toString().length < 2) room.sendAnnouncement(`Você precisa colocar o tempo. ex: 3m`, player.id);
			else {
				if (!aliasTempoArray.includes(tempo[1])) room.sendAnnouncement(""Você não colocou se vai ser minuto ou horas. ex: 5h"", player.id);
				else {
					if (conn == undefined) room.sendAnnouncement(""Você não digitou o conn."", player.id);
					else {
						if (JogadoresBanidosObject[conn]) room.sendAnnouncement(`[${conn}] já foi banido`, player.id);
							else {
								if (motivo == undefined) room.sendAnnouncement(""Motivo não definido"", player.id);
									else {
									let motivoSemBarra = motivo.split(""_"").join("" "");
									conn[player.name] = player.name;
									JogadoresBanidosObject[conn] = { tempo: tempo, motivo: motivoSemBarra, autor: player.name, name: player.conn};
									Request.post(player, `[${conn}]\nsala: ${roomName}\ntempo: ${tempo[0]} ${tempo[1] == ""s"" ? ""segundos"" : tempo[1] == ""m"" ? ""minutos"" : tempo[1] == ""h"" ? ""horas"" : tempo[1] == ""d"" ? ""dias"" : ""Tempo não detectado.""}\nMOTIVO: ${motivoSemBarra}`);

							room.sendAnnouncement(`[${conn}] foi banido por ${tempo[0]} ${aliasTempoArray[0] ? ""segundos"" : aliasTempoArray[1] ? ""minutos"" : aliasTempoArray[2] ? ""horas"" : aliasTempoArray[3] ? ""dias"" : ""aliasTempoArray não tem esse tempo""}`, player.id);

							setTimeout(()=>{
							delete JogadoresBanidosObject[conn];
							}, tempo[1] == ""s"" ? 1000*tempo[0] : tempo[1] == ""m"" ? 1000*60*tempo[0] : tempo[1] == ""h"" ? 1000*60*60*tempo[0] : tempo[1] == ""d"" ? 1000*60*60*24*tempo[0] : null)
						}
					}
				}
			}
			}
		}
	},
	infoban: (player, conn)=>{
		if (conn == undefined) room.sendAnnouncement(""Você não digitou o conn."", player.id);
		else {
			if (!JogadoresBanidosObject[conn]) room.sendAnnouncement(`[${conn}] não foi banido.`, player.id);
			else room.sendAnnouncement(`CONN: ${conn}\nAUTOR: ${JogadoresBanidosObject[conn].autor}\nTEMPO: ${JogadoresBanidosObject[conn].tempo}`, player.id);
		}
	}
};


const playerRadius = 15;
var ballRadius = 6.35;
const triggerDistance = playerRadius + ballRadius + 0.01;

var afkLimit = 16; // cronometro de limite de AFK
var drawTimeLimit = 3; // tempo de empate, escolha um número para definir quanto tempo de limite para o jogo ser empatado, deixe Infinity para não ocorrer empates.
var maxTeamSize = 3;
var slowMode = 0;

const Team = { SPECTATORS: 0, RED: 1, BLUE: 2 };
const team = { SPEC: 0, RED: 1, BLUE: 2 };
var extendedP = [];
const eP = { ID: 0, AUTH: 1, CONN: 2, AFK: 3, ACT: 4, GK: 5, MUTE: 6 };
const Ss = { GA: 0, WI: 1, DR: 2, LS: 3, WR: 4, GL: 5, AS: 6, GK: 7, CS: 8, CP: 9, RL: 10, NK: 11 }

var ModoChatPausado = [];

var players;
var teamR;
var teamB;
var teamS;
var lastTeamTouched;
var lastPlayersTouched; 
var countAFK = false; 
var activePlay = false; 
var goldenGoal = false;
var SMSet = new Set()
var banList = []
var game;
var GKList = ["""", """"];
var Rposs = 0;
var Bposs = 0;
var point = [{ ""x"": 0, ""y"": 0 }, { ""x"": 0, ""y"": 0 }]; 
var ballSpeed;
var lastWinner = Team.SPECTATORS;
var streak = 0;
var allBlues = []; 
var allReds = []; 
var inChooseMode = false; 
var redCaptainChoice = """";
var blueCaptainChoice = """";
var chooseTime = 20;
var timeOutCap;
var checkTimeVariable = false; 
var statNumber = 0;
var endGameVariable = false; 
var resettingTeams = false;
var capLeft = false;
var statInterval = 6;

var bloquear_comando = []
var block_comando = [];
var limit = 30;

let registros = new Map()
var checkregister = []
var checkchat = []
var logins = []

var L1 = [''] 
var L2 = [''] 
var L3 = [''] 
var L4 = ['']
var L5 = ['']
var L6 = [''] 
var L7 = ['']
var L8 = [""""]
var L9 = [""""]
var L10 = [""""]
var L11 = [""""]
var L12 = [""""]
var L13 = [""""]
var L14 = [""""]
var L15 = [""""]

const entradapersonalizadabras = ""O vip premium entrou na sala""
var Bras = [""Astral"", ""isq.cxt""];

const entradapersonalizadafominha = ""O brabo fominha entrou pra arregaçar.""
var fominha = [""Ribagol""];

const entradapersonalizadazum = ""O Trovão faz zuuum e entra na sala ⚡""
var zum = [""""];

const entradapersonalizadazx = ""chegou pra amassar geral""
var zx = [""PnZ"", ""Indio"", ""Fdezinn""];

const entradapersonalizadawaxie = ""Todos se ajoelhem diante dele! o Lord Chegou""
var waxie= [""Indio"", ""PnZ"", ""Fdezinn""];

const puskasoutubro = """"

const cL1 = []
const fL1 = []	
const cL2 = []
const fL2 = []	
const cL3 = []
const fL3 = []	
const cL4 = []
const fL4 = []	
const cL5 = []
const fL5 = []
const cL6 = []
const fL6 = []
const cL7 = []
const fL7 = [] 
const cL8 = []
const fL8 = [] 
const cL9 = []
const fL9 = [] 
const cL10 = []
const fL10 = [] 
const cL11 = []
const fL11 = [] 
const cL12 = []
const fL12 = [] 
const cL13 = []
const fL13 = [] 
const cL14 = []
const fL14 = [] 
const cL15 = []
const fL15 = [] 

const premium = [""Fdezinn"", ""Indio"", ""astral"", ""isq.cxt""]; //MVP+
const supremo = [""Fdezinn"", ""Indio""]; // MVP++
const booster =[""Fdezinn"", ""Indio""];
const vips = [""Indio"",
""Fdezinn"",
""astral"",
""isq.cxt"",
"""",
""""];

const semlimiteafk = ["""",
""Fdezinn"",
""Indio"",
""astral"",
""isq.cxt"",
""Patola|🦆"",
""/Lokiss"",
"""",
"""",
"""",
"""",
"""",
"""",
""""];

var jogadoresvips = 
[[""Fdezinn"", ""179.127.249.86""],
[""Indio"", ""189.4.101.28""],
[""astral"", ""189.100.69.21""],
[""isq.cxt"", ""191.191.29.54""],
["""", """"],
["""", """"],
["""", """"],
["""", """"]
];

const verificados = [
'', 
""Fdezinn"",
""Indio"",
""/Lokiss"",
""astral"",
""isq.cxt"",
""zero""];

const fundador = [
""Fdezinn"",
""Indio"",
""""];

const staff = [
""Fdezinn"",
""Indio"",
""Patola|🦆"",
""/Lokiss"",
""zero"",
""xissㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ"",
""lx!"",
"""",
""""];

const adminF = [""Fdezinn"", ""Indio"", ""Patola|🦆""]
		
const adminG = [
""/Lokiss"",
""astral"",
"""",
"""",
""""];

const adminM = [""zero"", ""xissㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ"", ""lx!""];

const adminE= [""""];

var administradores = 
[[""Fdezinn"", ""179.127.249.86""],
[""Indio"", ""189.4.101.28""],
[""/Lokiss"", ""170.233.33.241""],
[""zero"", ""170.82.181.39""],
[""xissㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤㅤ"", ""187.13.8.7""],
[""Patola|🦆"", ""170.150.74.253""],
[""lx!"", ""179.109.50.76""],
["""", """"]
];
var WebHookURL = ""https://discord.com/api/webhooks/1175486285239025744/g8g67V0iXWSAExkDNKXoT_2vkU2qW1BcUjWCQDFZdmEDF6rIXthpv1YX9X2tY9dkIRJu""
var report = 'https://discord.com/api/webhooks/1175486285239025744/g8g67V0iXWSAExkDNKXoT_2vkU2qW1BcUjWCQDFZdmEDF6rIXthpv1YX9X2tY9dkIRJu';
var tempoMensagem = 1000;

var conns = []
var playerConn = []
var tempoDePause = 1000*15; // 5 segundos de pause.
var pausePlayers = []; // Os players que digitarem o comando ""!p"" terão seus Ids puxados para um array ""pausePlayers"".
var pauseGame = true; // Pause = true | unPause = false.
var partida = true; // Partida não iniciada = true | Partida iniciada = false.

var blacklist = [
	{Nick:""Alvaro⁷⁷⁷ #má fase"", ipv4: ""200.97.250.154"", Auth: ""KfXj8OMEmCCfHTErhG026V_hq14yLwbpQXaKHAdlb2I"", Conn: ""3230302E39372E3235302E313534""},
	{Nick:"""", ipv4: ""185.54.230.213"", Auth: ""dA3PhXBNAm3oHi_A9NgHVgreijAlchJnc1GWeVWBaYY"", Conn: ""3138352E35342E3233302E323133""},
	{Nick:""Soukxzy"", ipv4: ""187.183.47.42"", Auth: ""KXx-4JWea09iTJSzN50DLlPvi1Ctah209_JwMd-nDSM"", Conn: ""3138372E3138332E34372E3432""},
	{Nick:""Mao"", ipv4: ""187.16.187.125"", Auth: ""k2tfQ897zpXxTPyx2OnzzZrpB0rHiKLJjXtCRNJ1SPY"", Conn: ""3138372E31362E3138372E313235""}];
	
let votekickTimes = {}; //This holds the amount of votes which the players used.
let votekickCount = {}; //This holds the amount of votes which were done against each of the players.
let linkhaxcolors = 'https://htmlcolorcodes.com/';
let erro = 'Você não tem permissão para executar esse comando.';
let cor_definida = 'você escolheu a cor ';
let fonte_definida = 'você escolheu a fonte ';
let erroapi = 'essa não e uma fonte fornecida pela API, aqui está a lista de todas possiveis \n';
let replaystest = `https://discord.com/api/webhooks/1175486691205718036/uRm-zlelvoIjjTbMiL3iN9Jifccl5lOwB0SpzGfokAcryz7EvUKPfsGp8hXooY1U4SH0`;

let
palavras = [
""VADIA"", ""vadia"", ""sua vadia"", ""SUA VADIA"", ""SUA PROSTITUTA"", ""sua prostituta"",
""VAGABUNDA"", ""vagabunda"",""sua vagabunda"", ""SUA VAGABUNDA"",
""filho da puta"",
""FILHO DA PUTA"", 
""pnc"",
""pau no cu"",
""seu lixo"",
""SEU LIXO"",
""PNC"",
""PAU NO CU"",
""desgraça"",
""DESGRAÇA"",
""sua vagabunda"", ""SUA VAGABUNDA"", ""seu vagabundo"", ""SEU VAGABUNDO"",
""Se mata"", ""SE MATA"", ""se mata"", ""seu desgraçado"", ""sua desgraçada"", ""SEU DESGRAÇADO"", ""SUA DESGRAÇADA"",
""se suicida"", ""SE SUICIDA""
],
regex = new RegExp(palavras.join(""|""), 'gi');

let
linkmsg = [
""https://"",
""http://"", 
""http://www""],
link = new RegExp(linkmsg.join(""|""), 'gi');

let
travasmsg = [""ఌ佹砕Ĉ⼈渻䬭॑⬺爂᰾ᜪ䉧ᬯ㍸᜖ᘬ慩㙲Ԑ瀩ञࠣ笋℉⨄㐷紪権ਛൽ㔙怅㬆癕⨴琐ḉ≼崪"", ""ᙻḻ⨂㈿爇䕦ᴵ灾㸏眮ቡᄸ܍礂海學㰌⬦ ѫ⼕ย⌑ḷ㠕ፃ㤕㌋␢眢砬ⵯ煾Ⱘ縂㉰匊㤀ह稫ᝈⴾㄫ㤒"", ""䉊"", ""؈ି"", ""㔞帱ॹࠚⰯἯ浸ἱᔞ፭ਮ娮ف㤮〕"", ""㱳⬗ᅷд甇ᜯ⩿ᤶⱁ戃 椏缁⼐獾⌱മ㈐ᵲ桨ԷᴑĿᑆ㨤ఴ⑸甈⨘Ѳ∯㘴䁔ح฾،ฌ瘪""],
travas = new RegExp(travasmsg.join(""|""), 'gi');

let
travamsg = [""㧫璧�觭䢜潇ကᩨ쀡ఈ泄찉넾﫤㏭�緺"", ""▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓"", ""㧫"", ""璧"", ""懈౩䊀脁潡䣚⾤㸼짠ब"", ""뗲᭾�띀急蔹⹉ꆣせㆉ였鷀Ú錘陈搳窇㉕""],
trava = new RegExp(travamsg.join(""|""), 'gi');

let
sistmsg = [""꧁꧂꧃꧄�꧅ꦸꦹꦺꩵꩶ꩷꩸꩹ꩺ▓▒░▄█▀─█▀██▄█▀█▀█▬쵃쵄쵅쵆쵇쵈쵉쵊쵋쵌쵍쵎쵏�쵐쵑쵒�襤拉"", ""臘"", ""蠟"", ""廊"", ""朗"", ""䱡䱢䱣䱤䱥䱦䱧䱨▉▇█▂▃▄▂▃""];

sist = new RegExp(sistmsg.join(""|""), 'gi');

let
antitrmsg = [""홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수"", ""홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수홍수"", ""홍수홍수홍수홍수홍수홍수홍수홍"", ""수"", ""홍"", ""수"", ""홍"", ""수"", ""홍수홍수홍수홍수홍"", ""수홍수홍수홍수홍수홍수홍수홍수홍수""];
antitr = new RegExp(antitrmsg.join(""|""), 'gi');

let
antitramsg = [""㧫璧�觭䢜潇ကᩨ쀡ఈ泄찉넾saw﫤㏭�緺�堲昸⸐낧懈౩䊀脁潡䣚⾤㸼짠ब꺅�ﹴﯰ﹟ﵿ࿿"", ""빏⿠雴㰯첇브쾞�읨⎘堌�̃㭎掌�䑂吺쏘뗲᭾�띀急蔹♤⹉ꆣせㆉ였鷀ú錘陈搳窇㉕ꙕ鄲欙莚쁃◑첶㘥䅺"", ""ǫ"", ""呡"", ""讬"", ""ꯩ"", ""䌻⨣�馫㷈搊ꌈ恘㠄陌颓̌谆"", ""鞿å 䆔⽪ﭓ櫆陗썆㾑쾛炦͝薐�翺￧祋ۓ""];
antitra = new RegExp(antitramsg.join(""|""), 'gi');

let
antitravamsg = ["" ▁▂▃▄▅▆▇█▉㑈㑉㑊㑋㑌㑍㑎㑏㑐㑑㑒㑓㑔㑕㑖㑗"", ""㑘㑙㑚㑛㑜㑝㑞㑟㑠㑢㑣㑤㑥㑦㑧㑨㑩㑪㑫㑬㑭㑮㑯㑰㑱㑲㑳㑴㑵㑶㑷㑸㑹㑺㑻㑼㑽㑾㒀㒁"", ""꧁꧂꧃꧄�꧅ꦸꦹꦺꦻꩵꩶ꩷꩸꩹ꩺ"", ""▓▒░"", ""▄█▀"", ""─█▀██"", ""▄█▀█▀█▬"", ""쵃쵄쵅쵆쵇쵈쵉쵊쵋쵌쵍쵎쵏�쵐쵑쵒�"", ""襤拉臘蠟廊朗䱡䱢䱣䱤䱥䱦䱧䱨▉▇█▂▃▄▂▃""];
antitrava = new RegExp(antitravamsg.join(""|""), 'gi');

let
racmsg = [
        ""maskeiko"",
        ""MACACA"",
        ""Macaco"",
        ""MACACO"",
        ""macaca"",
        ""macaco"",
	""sua macaca"",
	""sua negra"",
	""sua preta"",
	""SUA PRETA"",
	""SUA NEGRA"",
	""SUA MACACA"",
	""seu macaco"",
	""seu negro"",
	""seu preto"",
	""SEU PRETO"",
	""SEU NEGRO"",
	""SEU MACACO"",
	""voce é macaco"",
	""voce é preto"",
	""voce é negro"",
	""VOCE É MACACO"",
	""VOCE É PRETO"",
	""VOCE É NEGRO"",
	""voce e macaco"",
	""voce e preto"",
	""voce e negro"",
	""VOCE e MACACO"",
	""VOCE e PRETO"",
	""VOCE e NEGRO"",
	""preto macaco"",
	""macaco preto"",
	""seu macaco preto"",
	""seu preto macaco"",
	""seu negro macaco preto"",
	""seu macaco preto negro"",
	""seu preto negro macaco"",
	""SEU NEGRO MACACO PRETO"",
	""SEU MACACO PRETO NEGRO"",
	""SEU PRETO NEGRO MACACO"",
	""seu marrom"",
	""SEU MARROM"",
	""sua marrom"",
	""SUA MARROM"",
	""seu macaquinho"",
	""SEU MACAQUINHO"",
	""sua macaquinha"",
	""SUA MACAQUINHA""];
racismo = new RegExp(racmsg.join(""|""), 'gi');

function autobans(message) {

    var request = new XMLHttpRequest();
    request.open(""POST"",""https://discord.com/api/webhooks/1175486097082568755/Zweqkf5W4qSTgIKXO6m-032IrC1-YpYoOO476DKORXkATTIpt8lI-J6kuw7L5YUlkpkB"");

    request.setRequestHeader('Content-type', 'application/json');

    var params = {
		embeds: [
			{
				fields: [],
				title: ""Banimento auto aplicado"",
				color: 16777215,
				footer: {
					text: ""© APOLLO 2023 all reseverd.""
				},
				author: { ""name"": roomNameString },
				image: {
					url: ""https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&=""
				},
				thumbnail: {
					url: ""https://media.discordapp.net/attachments/1114717413754273813/1174450725993062511/OIG.png?ex=6567a379&is=65552e79&hm=9d35f0c6273adfbd7bc3b20647a134bf1ec52ab03c6206c6b0866e3aeb846397&=&width=425&height=425""
				}
			}
		],
        avatar_url: 'https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&=',
        username: 'APOLLO',
        content: message
    };

    request.send(JSON.stringify(params));
}

let Cor = {
	Vermelho: 0xFA5646,
	Laranja: 0xFFC12F,
	Verde: 0x7DFA89,
	Azul: 0x05C5FF,
	Amrelo: 0xFFFF17,
	Cinza: 0xCCCCCC,
	Branco: 0xFFFFFF,
	Azulclaro: 0x6ECAFF,
	Powderblue: 0xB0E0E6,
	Roxo: 0x800080,
	Platina: 0xE5E4E2,
	Ouro: 0xffd700,
	Prata: 0xd5d5d5,
	Bronze: 0x896728,
	Thistle: 0xD8BFD8,
	Khaki: 0xF0E68C,
	AliceBlue: 0xF0F8FF,
	GhostWhite: 0xF8F8FF,
	Snow: 0xFFFAFA,
	Seashell:0xFFF5EE,
	FloralWhite: 0xFFFAF0,
	WhiteSmoke: 0xF5F5F5,
	Beige: 0xF5F5DC,
	OldLace:	0xFDF5E6,
	Ivory:	0xFFFFF0,
	Linen:	0xFAF0E6,
	Cornsilk: 0xFFF8DC,
	AntiqueWhite: 0xFAEBD7,
	BlanchedAlmond: 0xFFEBCD,
	Bisque: 0xFFE4C4,
	LightYellow: 0xFFFFE0,
	LemonChiffon: 0xFFFACD,
	LightGoldenrodYellow: 0xFAFAD2,
	PapayaWhip: 0xFFEFD5,
	PeachPuff: 0xFFDAB9,
	Moccasin: 0xFFE4B5,
	PaleGoldenrod: 0xEEE8AA,
	Azulescuro: 0x426AD6
	}

	var spamArray = [0, 0, 0, 0, 0, 0]
	var mutado = []
	
	var info = {
		amarelo: 0xFFFF17,
		vermelho: 0xFA5646,
		negrito: 'bold',
		desmutar: 240000,
	}
	
	function detectarspam(player, message) {
		spamArray.push(player.id)
		
		if (mutado.includes(player.name) == false && spamArray[spamArray.length - 1] === player.id && spamArray[spamArray.length - 2] === player.id) {
		setTimeout(_ => {  if (spamArray[spamArray.length - 2] === player.id){ player.id = spamArray[spamArray.length = 0];	}}, info.desmutar - 230000) }
	
		if (mutado.includes(player.name) == false && spamArray[spamArray.length - 1] === player.id && spamArray[spamArray.length - 2] === player.id && spamArray[spamArray.length - 3] === player.id) {
		setTimeout(_ => {  if (spamArray[spamArray.length - 3] === player.id){ player.id = spamArray[spamArray.length = 0];	}}, info.desmutar - 230000) }
	
		if (mutado.includes(player.name) == false && spamArray[spamArray.length - 1] === player.id && spamArray[spamArray.length - 2] === player.id && spamArray[spamArray.length - 3] === player.id && spamArray[spamArray.length - 4] === player.id) {
		setTimeout(_ => {  if (spamArray[spamArray.length - 4] === player.id){ player.id = spamArray[spamArray.length = 0];	}}, info.desmutar - 230000) }
		
		if (mutado.includes(player.name) == false && spamArray[spamArray.length - 1] === player.id && spamArray[spamArray.length - 2] === player.id && spamArray[spamArray.length - 3] === player.id && spamArray[spamArray.length - 4] === player.id && spamArray[spamArray.length - 5] === player.id) {
		room.sendAnnouncement(""[PV] Você pode ser punido por fazer 'SPAM', escreva devagar!"", player.id, info.vermelho, info.negrito)
		setTimeout(_ => {  if (spamArray[spamArray.length - 5] === player.id){ player.id = spamArray[spamArray.length = 0];	}}, info.desmutar - 230000) }
		
		if (mutado.includes(player.name) == false && spamArray[spamArray.length - 1] === player.id && spamArray[spamArray.length - 2] === player.id && spamArray[spamArray.length - 3] === player.id && spamArray[spamArray.length - 4] === player.id && spamArray[spamArray.length - 5] === player.id && spamArray[spamArray.length - 6] === player.id) {
		room.sendAnnouncement(player.name + ""🚫 foi mutado por fazer spam 🚫 "", null, info.amarelo, info.negrito)
		mutado.push(player.name)
		
		setTimeout(() => {
		var remover = mutado.indexOf(player.name) + mutado.splice(remover, 1)
		room.sendAnnouncement('[PV] você foi desmutado, chat liberado.', player.id, info.amarelo, info.negrito)
		}, info.desmutar) // temporizador
		
		}
	}

let RecSistem = {
    getCustomDate: ()=>{
        let
        data = new Date().toLocaleDateString().split(""/"").join(""-""),
        relogio = new Date().toLocaleTimeString().split("":"");

        return `${data}-${relogio[0]}h${relogio[1]}m`;
    },
    getScoresTime: time=>{
        return ~~(Math.trunc(time) / 60) + "":"" + (Math.trunc(time)%60).toString().padStart(2, '0');
    },
    sendDiscordWebhook: scores=>{
        let
        red = room.getPlayerList().filter((player)=>player.team == 1).map((player)=> player.name),
        blue = room.getPlayerList().filter((player)=>player.team == 2).map((player)=> player.name);

        let form = new FormData();
        form.append(null, new File( [room.stopRecording()], `${getDate()}`+`${cod}${cod1}${cod2}${cod3}${cod4}.hbr2`, {""type"": ""text/plain""} ));
        form.append(""payload_json"", JSON.stringify(RecSistem.getParams(scores, red, blue)));

        let xhr = new XMLHttpRequest();
        xhr.open(""POST"", replaystest);
        xhr.send(form);
    },
    getParams: (scores, red, blue)=>{
        let params = {
          ""username"": ""APOLLO REPLAYS"",
          ""avatar_url"": ""https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&="",
          ""content"": ""----------------------------------------------------------------------------------"",
          ""embeds"": [{
            ""title"": ""-------- APOLLO --------"",
			color: 16777215,
            ""description"": ""REPLAY - 2023"",
            ""timestamp"": null,
            ""author"": { ""name"": roomNameString },
			image: {
				url: ""https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&=""
			},
			thumbnail: {
				url: ""https://media.discordapp.net/attachments/1114717413754273813/1174450725993062511/OIG.png?ex=6567a379&is=65552e79&hm=9d35f0c6273adfbd7bc3b20647a134bf1ec52ab03c6206c6b0866e3aeb846397&=&width=425&height=425""
			},
            ""footer"": {
                ""text"": `${getDate()}`+`${cod}${cod1}${cod2}${cod3}${cod4}`,
            },
            ""fields"": [
            { ""name"": ""RED"", ""value"": `${red.join(""\n"")}\n**GOLS**\n${scores.red}`, ""inline"": true },
            { ""name"": ""BLUE"", ""value"": `${blue.join(""\n"")}\n**GOLS**\n${scores.blue}`, ""inline"": true },
            { ""name"": ""Tempo que durou a partida"", ""value"": RecSistem.getScoresTime(scores.time) },
            ]
        }],
        ""components"": []
    };
    return params;
}
};
//FIM LET'S

//CONST'S	

const votedPlayers = new Set() //The set of players which were voted.
const disc = 'https://discord.gg/BfwezkPMEN';
const comandovip = 'Comando exclusivo para VIPS';
const capitães = 'Apenas capitães do time podem escolher uniforme.';
const capitãespausar = 'Apenas capitães do time podem pausar a partida.';
const corsucesso = 'Cor alterada com sucesso.'
const PnZ = [""""];

const resetarAvatarEm = 3;
const fontsdisp = [""normal"", ""bold"", ""italic"", ""small""];
const Negrito = 'bold';
const Italic = 'italic';
const Normal = 'normal';

const frasesGOL = [
"" PONTUAÇÃO LINDA DE "",
"" UM BELISSIMO PONTO DE "",
"" QUE FINALIZAÇÃO SENHORES, É DE "",
"" UMA BELA FINALIZAÇÃO DE "",
"" A-DI-VI-NHA, PONTO DE ""

]; // Frases de gol

  const frasesASS = [
"", GRANDE PASSE DE "",
"", PASSE MONSTRUOSO DE "",
"", QUE ASSISTENCIA FENOMENAL DE "",
]; // Frases de assistencias

  const golcontra = [
"" PONTO CONTRA, QUE ISSO ""]; // Frases de gol contra
	

  const WINRED = [
"" RED VENCEU O BLUE MAIS UMA VEZ, POR "",
"" COMO SEMPRE O TIME RED GANHOU, POR "",
"" RED É PAI DO BLUE, VENCEU POR "",
"" RED SEMPRE MASSACRANDO, VENCEU POR "",
"" GRANDE VITÓRIA DO RED, PLACAR: "" ];

  const WINBLUE = [
"" BLUE VENCEU O RED MAIS UMA VEZ, POR "",
"" BLUE É PAI DO RED, VENCEU POR "",
"" COMO SEMPRE O TIME BLUE GANHOU, POR "",
"" BLUE SEMPRE MASSACRANDO, VENCEU POR "",
"" GRANDE VITÓRIA DO BLUE, PLACAR: "" ];
  
  const sbt = [
	"" UHHHHHHHHHHHHHHHHHHHHHH"",
	"" SERÁ QUE VAI SAIR UM PONTO?"",
	"" HOJE VAI TER ZEBRA, PODE TER CERTEZA!!"",
        "" ACHEI QUE SERIA MELHOR JOGAR AQUI!!"",
        "" TUDO SEM NÍVEL!!"",
	"" EM PLENO 2023, OS TIMES ESTÃO MUITO RUIM"",
        "" EM PLENO 2023, ANO DE PIRATARIA E OS CARA JOGANDO HAX"",
        "" AUMENTA O NÍVEL KK"",
        "" Qual é a fórmula da água benta? R.: H Deus O!"",
        "" Acorda aí"",
        "" AMÉM KK"",
        "" DEPOIS O BOT CONSULTA O VAR KK"",
        "" TRAZ O RODO, TA TODO MUNDO DESLIZANDO KK"",
        "" Sempre o Joãozinho"",
        "" Voando demais kkkk"",
        "" INTERNET DE MINEIRO KK"",
        "" AFUNDANDO O TIME ESSE AI KK"",
        "" VOU NEM FALAR O NOME K""

];

const oemessagem = [
	' OPA, VAI PARA AONDE?!',
	' CREDO, QUE OEEEE FOI ESSE',
	' NUSSAAAAA, PASSOU LOTADOOOO',
	' EPAAAAA, PASSOU VOANDO AQUI EM MARTE!',
	' RECEBAAAA, E RECEBEU UM OE INCRIVEL',
	' WOWWWW, ESSE BETA LEVOU UM OE',
	' HAHAHAHA, O CARA PASSOU LOTADO',
	' SEM COMENTÁRIOS PARA ESSE OE',
	' F, ESSE PASSOU LOTADO NA VELOCIDADE DA LUZ',
	"" SENHORRRRRR, QUE OEEEEE FOI ESSEEEEEE!""
];

const code = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];
const code1 = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];
const code2 = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];
const code3 = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];
const code4 = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];


var cod = code[(Math.random() * code.length) | 0]
var cod1 = code1[(Math.random() * code.length) | 0]
var cod2 = code2[(Math.random() * code.length) | 0]
var cod3 = code3[(Math.random() * code.length) | 0]
var cod4 = code4[(Math.random() * code.length) | 0]


const URLs = {
	chat: ""https://discord.com/api/webhooks/1175486409583374458/qh_fdaOOFeDy8xGMka9I_8-VcixFDPOO9sR3zrMl2_mwQJZVrlPzeyZxtacD6DOLt7ii""
};

room.setTeamsLock(true)
var Mapa = `{
	""name"": ""[APOLLO] NBA 1"",
	""width"": 640,
	""height"": 350,
	""bg"": {
		""type"": """",
		""width"": 560,
		""height"": 300,
		""color"": ""d9bc9b""
	},
	""vertexes"": [
		{
			""x"": -560,
			""y"": -300,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""FFFFFF""
		},
		{
			""x"": 560,
			""y"": -300,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": -560,
			""y"": 300,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""FFFFFF""
		},
		{
			""x"": 560,
			""y"": 300,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": -560,
			""y"": 302,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": 560,
			""y"": 302,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": -560,
			""y"": 304,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": 560,
			""y"": 304,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": -560,
			""y"": -302,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": 560,
			""y"": -302,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": -560,
			""y"": -304,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": 560,
			""y"": -304,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": -560,
			""y"": -305.33333111111,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""FFFFFF""
		},
		{
			""x"": -560,
			""y"": 305.44,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""FFFFFF""
		},
		{
			""x"": 560,
			""y"": -305.33333111111,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": 560,
			""y"": 305.44,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": -562,
			""y"": -305.33333111111,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": -562,
			""y"": 305.44,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": -564,
			""y"": -305.33333111111,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": -564,
			""y"": 305.44,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": 562,
			""y"": -305.33333111111,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": 562,
			""y"": 305.44,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": 564,
			""y"": -305.33333111111,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": 564,
			""y"": 305.44,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": -1,
			""y"": -302,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000"",
			""curve"": 0
		},
		{
			""x"": -1,
			""y"": 302,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000"",
			""curve"": 0
		},
		{
			""x"": 1,
			""y"": -302,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000"",
			""curve"": 0
		},
		{
			""x"": 1,
			""y"": 302,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000"",
			""curve"": 0
		},
		{
			""x"": -560,
			""y"": -250,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": -425,
			""y"": -250,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": 560,
			""y"": -250,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": 425,
			""y"": -250,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": -560,
			""y"": 250,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": -425,
			""y"": 250,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": 560,
			""y"": 250,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": 425,
			""y"": 250,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": -560,
			""y"": -120,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""d52623""
		},
		{
			""x"": -320,
			""y"": -120,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": 560,
			""y"": -120,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 320,
			""y"": -120,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": -560,
			""y"": 120,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""d52623""
		},
		{
			""x"": -320,
			""y"": 120,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": 560,
			""y"": 120,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 320,
			""y"": 120,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 0,
			""y"": 302,
			""bCoef"": 0.1,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": 0,
			""y"": -302,
			""bCoef"": 0.1,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": 0,
			""y"": -70,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""color"": ""000000""
		},
		{
			""x"": 0,
			""y"": 70,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""color"": ""000000""
		},
		{
			""x"": 0,
			""y"": 340,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""color"": ""FFFFFF""
		},
		{
			""x"": 0,
			""y"": -340,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""color"": ""FFFFFF""
		},
		{
			""x"": -496,
			""y"": -63,
			""cMask"": [
				""red""
			],
			""cGroup"": [
				""red""
			],
			""color"": ""d52623""
		},
		{
			""x"": -496,
			""y"": 63,
			""cMask"": [
				""red""
			],
			""cGroup"": [
				""red""
			],
			""color"": ""d52623""
		},
		{
			""x"": 496,
			""y"": -63,
			""cMask"": [
				""blue""
			],
			""cGroup"": [
				""blue""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 496,
			""y"": 63,
			""cMask"": [
				""blue""
			],
			""cGroup"": [
				""blue""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 564,
			""y"": -10,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 564,
			""y"": 10,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 515,
			""y"": -10,
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 515,
			""y"": 10,
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 510,
			""y"": -5,
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			],
			""color"": ""000000""
		},
		{
			""x"": 510,
			""y"": 5,
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 493,
			""y"": -12,
			""cMask"": [],
			""color"": ""202dd7""
		},
		{
			""x"": 493,
			""y"": 12,
			""cMask"": [],
			""color"": ""FFFFFF""
		},
		{
			""x"": 512.5,
			""y"": -66,
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 512.5,
			""y"": 66,
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 510,
			""y"": -65,
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 510,
			""y"": 65,
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 515,
			""y"": -70,
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			],
			""color"": ""202dd7"",
			""curve"": 0
		},
		{
			""x"": 515,
			""y"": 70,
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			],
			""color"": ""202dd7"",
			""curve"": 0
		},
		{
			""x"": -564,
			""y"": -10,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""d52623""
		},
		{
			""x"": -564,
			""y"": 10,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""d52623""
		},
		{
			""x"": -515,
			""y"": -10,
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			],
			""color"": ""d52623""
		},
		{
			""x"": -515,
			""y"": 10,
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			],
			""color"": ""d52623""
		},
		{
			""x"": -510,
			""y"": -5,
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			],
			""color"": ""d52623""
		},
		{
			""x"": -510,
			""y"": 5,
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			],
			""color"": ""d52623""
		},
		{
			""x"": -493,
			""y"": -12,
			""cMask"": [],
			""color"": ""d52623""
		},
		{
			""x"": -493,
			""y"": 12,
			""cMask"": [],
			""color"": ""d52623""
		},
		{
			""x"": -512.5,
			""y"": -66,
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			],
			""color"": ""d52623""
		},
		{
			""x"": -512.5,
			""y"": 66,
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			],
			""color"": ""d52623""
		},
		{
			""x"": -510,
			""y"": -65,
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			],
			""color"": ""d52623""
		},
		{
			""x"": -510,
			""y"": 65,
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			],
			""color"": ""000000""
		},
		{
			""x"": -515,
			""y"": -70,
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			],
			""color"": ""d52623"",
			""curve"": 0
		},
		{
			""x"": -515,
			""y"": 70,
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			],
			""color"": ""000000"",
			""curve"": 0
		},
		{
			""x"": -480,
			""y"": -18,
			""bCoef"": -2.3,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": -480,
			""y"": 18,
			""bCoef"": -2.3,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": 480,
			""y"": -18,
			""bCoef"": -2.3,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 480,
			""y"": 18,
			""bCoef"": -2.3,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": -480,
			""y"": -15,
			""bCoef"": 0,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": -480,
			""y"": 15,
			""bCoef"": 0,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": 480,
			""y"": -15,
			""bCoef"": 0,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""FFFFFF""
		},
		{
			""x"": 480,
			""y"": 15,
			""bCoef"": 0,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""FFFFFF""
		},
		{
			""x"": -560,
			""y"": -252,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": -425,
			""y"": -252,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": -560,
			""y"": 252,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": -425,
			""y"": 252,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": -427,
			""y"": -252,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": -427,
			""y"": 252,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": -427,
			""y"": -250,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": -427,
			""y"": 250,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": -560,
			""y"": 118,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""d52623""
		},
		{
			""x"": -320,
			""y"": 118,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": -560,
			""y"": -118,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""d52623""
		},
		{
			""x"": -320,
			""y"": -118,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": -320,
			""y"": -121.444444,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": -320,
			""y"": 121.444444,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": -318,
			""y"": -121.444444,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": -318,
			""y"": 121.444444,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": 560,
			""y"": 252,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": 425,
			""y"": 252,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": 560,
			""y"": -252,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""000000""
		},
		{
			""x"": 425,
			""y"": -252,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": 560,
			""y"": 118,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 320,
			""y"": 118,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 560,
			""y"": -118,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 320,
			""y"": -118,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 320,
			""y"": -121.444444,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 320,
			""y"": 121.444444,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 318,
			""y"": -121.444444,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 318,
			""y"": 121.444444,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 320,
			""y"": -90,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 320,
			""y"": 90,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 427,
			""y"": -252,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": 427,
			""y"": 252,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": 427,
			""y"": -250,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": 427,
			""y"": 250,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": -320,
			""y"": -90,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""curve"": 180,
			""color"": ""d52623""
		},
		{
			""x"": -320,
			""y"": 90,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""curve"": 180,
			""color"": ""d52623""
		},
		{
			""x"": -357,
			""y"": -129,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": -357,
			""y"": -119,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": -409,
			""y"": -129,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": -409,
			""y"": -119,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": -486,
			""y"": -129,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": -486,
			""y"": -119,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": -477,
			""y"": -129,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": -477,
			""y"": -119,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": 357,
			""y"": -129,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": 357,
			""y"": -119,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 409,
			""y"": -129,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": 409,
			""y"": -119,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 477,
			""y"": -129,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": 477,
			""y"": -119,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 486,
			""y"": -129,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": 486,
			""y"": -119,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 486,
			""y"": 129,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 486,
			""y"": 119,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 409,
			""y"": 129,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 409,
			""y"": 119,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 477,
			""y"": 129,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 477,
			""y"": 119,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 357,
			""y"": 129,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": 357,
			""y"": 119,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""202dd7""
		},
		{
			""x"": -486,
			""y"": 129,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": -486,
			""y"": 119,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": -477,
			""y"": 129,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": -477,
			""y"": 119,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": -409,
			""y"": 129,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": -409,
			""y"": 119,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": -357,
			""y"": 129,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": -357,
			""y"": 119,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""color"": ""d52623""
		},
		{
			""x"": -320,
			""y"": -90,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""curve"": -180,
			""color"": ""d52623""
		},
		{
			""x"": -320,
			""y"": 90,
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""curve"": -180,
			""color"": ""d52623""
		},
		{
			""x"": -110.13757329257697,
			""y"": 349.23552302358866,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": -91.02679711986923,
			""y"": 310.2789408253766,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": -73.38608065275434,
			""y"": 349.23552302358866,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": 12.106351913358935,
			""y"": 306.8756279261061,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": 10.636292207766047,
			""y"": 345.8322101243181,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": 29.816830941065916,
			""y"": 345.8322101243181,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": -62.44461490523656,
			""y"": 348.82745606930666,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": -61.055034440982524,
			""y"": 310.8455900463626,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": -61.905859644720636,
			""y"": 327.019924515728,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": -61.905859644720636,
			""y"": 311.0861015581103,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": -19.58718029814122,
			""y"": 315.9749766656341,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true,
			""color"": ""000000""
		},
		{
			""x"": -20.05037378622592,
			""y"": 347.9277275074666,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true,
			""color"": ""000000""
		},
		{
			""x"": -19.58718029814122,
			""y"": 347.9277275074666,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true,
			""color"": ""000000""
		},
		{
			""x"": -19.58718029814122,
			""y"": 315.9749766656341,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true,
			""color"": ""000000""
		},
		{
			""x"": 43.163500378071404,
			""y"": 306.8756279261061,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": 43.163500378071404,
			""y"": 345.8322101243181,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": 61.6912399014588,
			""y"": 345.8322101243181,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": 91.4575929528674,
			""y"": 315.9749766656341,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true,
			""color"": ""000000""
		},
		{
			""x"": 90.99439946478273,
			""y"": 346.82463373344996,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true,
			""color"": ""000000""
		},
		{
			""x"": 90.99439946478273,
			""y"": 346.82463373344996,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true,
			""color"": ""000000""
		},
		{
			""x"": 90.99439946478273,
			""y"": 315.9749766656341,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true,
			""color"": ""000000""
		},
		{
			""x"": -75.75968038713319,
			""y"": 320.4989489825362,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""color"": ""000000""
		},
		{
			""x"": -98,
			""y"": -279,
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""kick"",
				""ball"",
				""score""
			],
			""color"": ""000000"",
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": -97,
			""y"": -207,
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""kick"",
				""ball"",
				""score""
			],
			""color"": ""000000"",
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": -48,
			""y"": -207,
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""kick"",
				""ball"",
				""score""
			],
			""color"": ""000000"",
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": -48,
			""y"": -279,
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""kick"",
				""ball"",
				""score""
			],
			""color"": ""000000"",
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": -86.35657849879581,
			""y"": -219.3923886185623,
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""kick"",
				""ball"",
				""score""
			],
			""_data"": {
				""mirror"": {}
			},
			""color"": ""000000""
		},
		{
			""x"": -78.18771296512594,
			""y"": -260.2367162869117,
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""kick"",
				""ball"",
				""score""
			],
			""_data"": {
				""mirror"": {}
			},
			""color"": ""000000""
		},
		{
			""x"": -65.93441466462113,
			""y"": -220.5593694090866,
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""kick"",
				""ball"",
				""score""
			],
			""_data"": {
				""mirror"": {}
			},
			""color"": ""000000""
		},
		{
			""x"": -63.01696268831046,
			""y"": -250.31737956745542,
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""kick"",
				""ball"",
				""score""
			],
			""_data"": {
				""mirror"": {}
			},
			""color"": ""000000""
		},
		{
			""x"": -97,
			""y"": -207,
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""kick"",
				""ball"",
				""score""
			],
			""color"": ""000000"",
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": 97,
			""y"": -207,
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""color"": ""000000"",
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": 48,
			""y"": -207,
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""color"": ""000000"",
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": 48,
			""y"": -207,
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""color"": ""000000"",
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": 48,
			""y"": -279,
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""color"": ""000000"",
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": 98,
			""y"": -279,
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""color"": ""000000"",
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": 97,
			""y"": -207,
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""color"": ""000000"",
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": 98,
			""y"": -279,
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""color"": ""000000"",
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": 48,
			""y"": -279,
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""color"": ""000000"",
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": 62.757633623749484,
			""y"": -219.3923886185623,
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""color"": ""000000"",
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": 70.92649915741936,
			""y"": -260.2367162869117,
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""color"": ""000000"",
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": 83.17979745792417,
			""y"": -220.5593694090866,
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""color"": ""000000"",
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": 86.09724943423484,
			""y"": -250.31737956745542,
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""color"": ""000000"",
			""_data"": {
				""mirror"": {}
			}
		}
	],
	""segments"": [
		{
			""v0"": 4,
			""v1"": 5,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""y"": 302
		},
		{
			""v0"": 6,
			""v1"": 7,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""y"": 304
		},
		{
			""v0"": 8,
			""v1"": 9,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""y"": -302
		},
		{
			""v0"": 10,
			""v1"": 11,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""y"": -304
		},
		{
			""v0"": 16,
			""v1"": 17,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""x"": -562
		},
		{
			""v0"": 18,
			""v1"": 19,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""x"": -564
		},
		{
			""v0"": 20,
			""v1"": 21,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""x"": 562
		},
		{
			""v0"": 22,
			""v1"": 23,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""wall""
			],
			""x"": 564
		},
		{
			""v0"": 24,
			""v1"": 25,
			""curve"": 0,
			""color"": ""000000"",
			""cMask"": []
		},
		{
			""v0"": 26,
			""v1"": 27,
			""curve"": 0,
			""color"": ""000000"",
			""cMask"": []
		},
		{
			""v0"": 28,
			""v1"": 29,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			]
		},
		{
			""v0"": 30,
			""v1"": 31,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			]
		},
		{
			""v0"": 32,
			""v1"": 33,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			]
		},
		{
			""v0"": 34,
			""v1"": 35,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			]
		},
		{
			""v0"": 36,
			""v1"": 37,
			""color"": ""d52623"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			]
		},
		{
			""v0"": 38,
			""v1"": 39,
			""color"": ""202dd7"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			]
		},
		{
			""v0"": 40,
			""v1"": 41,
			""color"": ""d52623"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			]
		},
		{
			""v0"": 42,
			""v1"": 43,
			""color"": ""202dd7"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			]
		},
		{
			""v0"": 44,
			""v1"": 47,
			""color"": ""000000"",
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			]
		},
		{
			""v0"": 45,
			""v1"": 46,
			""color"": ""000000"",
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			]
		},
		{
			""v0"": 44,
			""v1"": 48,
			""vis"": false,
			""color"": ""FFFFFF"",
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			]
		},
		{
			""v0"": 45,
			""v1"": 49,
			""vis"": false,
			""color"": ""FFFFFF"",
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			]
		},
		{
			""v0"": 46,
			""v1"": 47,
			""curve"": 180,
			""color"": ""000000"",
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO""
			],
			""curveF"": 6.123233995736766e-17
		},
		{
			""v0"": 47,
			""v1"": 46,
			""curve"": 180,
			""color"": ""000000"",
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""blueKO""
			],
			""curveF"": 6.123233995736766e-17
		},
		{
			""v0"": 50,
			""v1"": 51,
			""curve"": 180,
			""color"": ""d52623"",
			""cMask"": [
				""red""
			],
			""cGroup"": [
				""red""
			],
			""curveF"": 6.123233995736766e-17
		},
		{
			""v0"": 53,
			""v1"": 52,
			""curve"": 180,
			""color"": ""202dd7"",
			""cMask"": [
				""blue""
			],
			""cGroup"": [
				""blue""
			],
			""curveF"": 6.123233995736766e-17
		},
		{
			""v0"": 56,
			""v1"": 54,
			""color"": ""000000"",
			""cMask"": []
		},
		{
			""v0"": 57,
			""v1"": 55,
			""color"": ""000000"",
			""cMask"": []
		},
		{
			""v0"": 59,
			""v1"": 61,
			""color"": ""202dd7"",
			""cMask"": []
		},
		{
			""v0"": 58,
			""v1"": 60,
			""color"": ""202dd7"",
			""cMask"": []
		},
		{
			""v0"": 62,
			""v1"": 63,
			""color"": ""202dd7"",
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			]
		},
		{
			""v0"": 64,
			""v1"": 65,
			""color"": ""FFFFFF"",
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			]
		},
		{
			""v0"": 66,
			""v1"": 64,
			""color"": ""202dd7"",
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			]
		},
		{
			""v0"": 67,
			""v1"": 65,
			""color"": ""202dd7"",
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			]
		},
		{
			""v0"": 67,
			""v1"": 66,
			""curve"": 0,
			""color"": ""FFFFFF"",
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			]
		},
		{
			""v0"": 70,
			""v1"": 68,
			""color"": ""000000"",
			""cMask"": []
		},
		{
			""v0"": 71,
			""v1"": 69,
			""color"": ""000000"",
			""cMask"": []
		},
		{
			""v0"": 73,
			""v1"": 75,
			""color"": ""FF1700"",
			""cMask"": []
		},
		{
			""v0"": 72,
			""v1"": 74,
			""color"": ""FF1700"",
			""cMask"": []
		},
		{
			""v0"": 76,
			""v1"": 77,
			""color"": ""d52623"",
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			]
		},
		{
			""v0"": 78,
			""v1"": 79,
			""color"": ""FFFFFF"",
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			]
		},
		{
			""v0"": 80,
			""v1"": 78,
			""color"": ""d52623"",
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			]
		},
		{
			""v0"": 81,
			""v1"": 79,
			""color"": ""d52623"",
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			]
		},
		{
			""v0"": 81,
			""v1"": 80,
			""curve"": 0,
			""color"": ""FFFFFF"",
			""cMask"": [
				""all""
			],
			""cGroup"": [
				""all""
			]
		},
		{
			""v0"": 82,
			""v1"": 83,
			""curve"": 180,
			""color"": ""FF1700"",
			""bCoef"": -2.3,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""curveF"": 6.123233995736766e-17
		},
		{
			""v0"": 85,
			""v1"": 84,
			""curve"": 180,
			""color"": ""202dd7"",
			""bCoef"": -2.3,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""curveF"": 6.123233995736766e-17
		},
		{
			""v0"": 83,
			""v1"": 82,
			""curve"": 180,
			""color"": ""FF1700"",
			""bCoef"": -2.8,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""curveF"": 6.123233995736766e-17
		},
		{
			""v0"": 84,
			""v1"": 85,
			""curve"": 180,
			""color"": ""202dd7"",
			""bCoef"": -2.8,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""curveF"": 6.123233995736766e-17
		},
		{
			""v0"": 87,
			""v1"": 86,
			""curve"": 180,
			""color"": ""FFFFFF"",
			""bCoef"": 0,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""curveF"": 6.123233995736766e-17
		},
		{
			""v0"": 89,
			""v1"": 88,
			""curve"": 180,
			""color"": ""FFFFFF"",
			""bCoef"": 0,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""curveF"": 6.123233995736766e-17
		},
		{
			""v0"": 86,
			""v1"": 87,
			""curve"": 180,
			""color"": ""FFFFFF"",
			""bCoef"": 0,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""curveF"": 6.123233995736766e-17
		},
		{
			""v0"": 88,
			""v1"": 89,
			""curve"": 180,
			""color"": ""FFFFFF"",
			""bCoef"": 0,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""curveF"": 6.123233995736766e-17
		},
		{
			""v0"": 90,
			""v1"": 91,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""y"": -252
		},
		{
			""v0"": 92,
			""v1"": 93,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""y"": 252
		},
		{
			""v0"": 94,
			""v1"": 95,
			""curve"": 180,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""curveF"": 6.123233995736766e-17
		},
		{
			""v0"": 96,
			""v1"": 97,
			""curve"": 180,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""curveF"": 6.123233995736766e-17
		},
		{
			""v0"": 98,
			""v1"": 99,
			""color"": ""d52623"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""y"": 118
		},
		{
			""v0"": 100,
			""v1"": 101,
			""color"": ""d52623"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""y"": -118
		},
		{
			""v0"": 102,
			""v1"": 103,
			""color"": ""d52623"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			]
		},
		{
			""v0"": 104,
			""v1"": 105,
			""color"": ""d52623"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""x"": -318
		},
		{
			""v0"": 106,
			""v1"": 107,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""y"": 252
		},
		{
			""v0"": 108,
			""v1"": 109,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""y"": -252
		},
		{
			""v0"": 110,
			""v1"": 111,
			""color"": ""202dd7"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""y"": 118
		},
		{
			""v0"": 112,
			""v1"": 113,
			""color"": ""202dd7"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""y"": -118
		},
		{
			""v0"": 114,
			""v1"": 115,
			""color"": ""202dd7"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""x"": -318
		},
		{
			""v0"": 116,
			""v1"": 117,
			""color"": ""202dd7"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""x"": 318
		},
		{
			""v0"": 119,
			""v1"": 118,
			""curve"": 180,
			""color"": ""202dd7"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			],
			""curveF"": 6.123233995736766e-17
		},
		{
			""v0"": 120,
			""v1"": 121,
			""curve"": -180,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			]
		},
		{
			""v0"": 122,
			""v1"": 123,
			""curve"": -180,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""blue"",
				""red"",
				""ball""
			]
		},
		{
			""v0"": 124,
			""v1"": 125,
			""curve"": 180,
			""color"": ""d52623"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""x"": -320
		},
		{
			""v0"": 126,
			""v1"": 127,
			""color"": ""d52623"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""x"": -360,
			""y"": 136
		},
		{
			""v0"": 128,
			""v1"": 129,
			""color"": ""d52623"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""x"": -390,
			""y"": 136
		},
		{
			""v0"": 130,
			""v1"": 131,
			""color"": ""d52623"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""x"": -390,
			""y"": 136
		},
		{
			""v0"": 132,
			""v1"": 133,
			""color"": ""d52623"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""x"": -390,
			""y"": 136
		},
		{
			""v0"": 134,
			""v1"": 135,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""x"": 357,
			""y"": 136
		},
		{
			""v0"": 136,
			""v1"": 137,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""x"": 409,
			""y"": 136
		},
		{
			""v0"": 138,
			""v1"": 139,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""x"": 477,
			""y"": 136
		},
		{
			""v0"": 140,
			""v1"": 141,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""x"": 486,
			""y"": 136
		},
		{
			""v0"": 142,
			""v1"": 143,
			""color"": ""202dd7"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""x"": 486,
			""y"": 136
		},
		{
			""v0"": 144,
			""v1"": 145,
			""color"": ""202dd7"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""x"": 409,
			""y"": 136
		},
		{
			""v0"": 146,
			""v1"": 147,
			""color"": ""202dd7"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""x"": 477,
			""y"": 136
		},
		{
			""v0"": 148,
			""v1"": 149,
			""color"": ""202dd7"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""x"": 357,
			""y"": 136
		},
		{
			""v0"": 150,
			""v1"": 151,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""x"": -486,
			""y"": 136
		},
		{
			""v0"": 152,
			""v1"": 153,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""x"": -477,
			""y"": 136
		},
		{
			""v0"": 154,
			""v1"": 155,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""x"": -409,
			""y"": 136
		},
		{
			""v0"": 156,
			""v1"": 157,
			""color"": ""000000"",
			""cMask"": [
				""wall""
			],
			""cGroup"": [
				""red"",
				""blue"",
				""ball""
			],
			""x"": -357,
			""y"": 136
		},
		{
			""v0"": 160,
			""v1"": 161,
			""curve"": -11.580583034901748,
			""color"": ""000000"",
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			]
		},
		{
			""v0"": 161,
			""v1"": 162,
			""color"": ""000000"",
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			]
		},
		{
			""v0"": 163,
			""v1"": 164,
			""color"": ""000000"",
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			]
		},
		{
			""v0"": 164,
			""v1"": 165,
			""color"": ""000000"",
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""y"": 281.8687492270922
		},
		{
			""v0"": 166,
			""v1"": 167,
			""color"": ""000000"",
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			]
		},
		{
			""v0"": 168,
			""v1"": 169,
			""curve"": -217.55096872885548,
			""color"": ""000000"",
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			]
		},
		{
			""v0"": 170,
			""v1"": 171,
			""curve"": 182.72621800529865,
			""vis"": true,
			""color"": ""000000"",
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""trait"": ""kickOffBarrier""
		},
		{
			""v0"": 172,
			""v1"": 173,
			""curve"": 182.72621800529865,
			""vis"": true,
			""color"": ""000000"",
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""trait"": ""kickOffBarrier""
		},
		{
			""v0"": 174,
			""v1"": 175,
			""color"": ""000000"",
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			]
		},
		{
			""v0"": 175,
			""v1"": 176,
			""color"": ""000000"",
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			]
		},
		{
			""v0"": 177,
			""v1"": 178,
			""curve"": 182.72621800529865,
			""vis"": true,
			""color"": ""000000"",
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""trait"": ""kickOffBarrier""
		},
		{
			""v0"": 179,
			""v1"": 180,
			""curve"": 182.72621800529865,
			""vis"": true,
			""color"": ""000000"",
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""trait"": ""kickOffBarrier""
		},
		{
			""v0"": 160,
			""v1"": 181,
			""color"": ""000000"",
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			]
		},
		{
			""v0"": 182,
			""v1"": 183,
			""curve"": 0,
			""color"": ""000000"",
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""kick"",
				""ball"",
				""score""
			],
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						-98,
						-279
					],
					""b"": [
						-97,
						-207
					],
					""curve"": 0
				}
			}
		},
		{
			""v0"": 183,
			""v1"": 184,
			""curve"": 0,
			""color"": ""000000"",
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""kick"",
				""ball"",
				""score""
			],
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						-97,
						-207
					],
					""b"": [
						-48,
						-207
					],
					""curve"": 0
				}
			}
		},
		{
			""v0"": 184,
			""v1"": 185,
			""curve"": 0,
			""color"": ""000000"",
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""kick"",
				""ball"",
				""score""
			],
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						-48,
						-207
					],
					""b"": [
						-48,
						-279
					],
					""curve"": 0
				}
			}
		},
		{
			""v0"": 185,
			""v1"": 182,
			""curve"": 0,
			""color"": ""000000"",
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""kick"",
				""ball"",
				""score""
			],
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						-48,
						-279
					],
					""b"": [
						-98,
						-279
					],
					""curve"": 0
				}
			}
		},
		{
			""v0"": 186,
			""v1"": 187,
			""curve"": 0,
			""color"": ""202dd7"",
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""kick"",
				""ball"",
				""score""
			],
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						-86.35657849879581,
						-219.3923886185623
					],
					""b"": [
						-78.18771296512594,
						-260.2367162869117
					],
					""curve"": 0
				}
			}
		},
		{
			""v0"": 187,
			""v1"": 188,
			""curve"": 0,
			""color"": ""202dd7"",
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""kick"",
				""ball"",
				""score""
			],
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						-78.18771296512594,
						-260.2367162869117
					],
					""b"": [
						-65.93441466462113,
						-220.5593694090866
					],
					""curve"": 0
				}
			}
		},
		{
			""v0"": 186,
			""v1"": 189,
			""curve"": 0,
			""color"": ""202dd7"",
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""kick"",
				""ball"",
				""score""
			],
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						-86.35657849879581,
						-219.3923886185623
					],
					""b"": [
						-63.01696268831046,
						-250.31737956745542
					],
					""curve"": 0
				}
			}
		},
		{
			""v0"": 191,
			""v1"": 192,
			""curve"": 0,
			""color"": ""000000"",
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""y"": -207,
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						97,
						-207
					],
					""b"": [
						48,
						-207
					],
					""curve"": 0
				}
			}
		},
		{
			""v0"": 193,
			""v1"": 194,
			""curve"": 0,
			""color"": ""000000"",
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""x"": 48,
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						48,
						-207
					],
					""b"": [
						48,
						-279
					],
					""curve"": 0
				}
			}
		},
		{
			""v0"": 195,
			""v1"": 196,
			""curve"": 0,
			""color"": ""000000"",
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						98,
						-279
					],
					""b"": [
						97,
						-207
					],
					""curve"": 0
				}
			}
		},
		{
			""v0"": 198,
			""v1"": 197,
			""curve"": 0,
			""color"": ""000000"",
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						48,
						-279
					],
					""b"": [
						98,
						-279
					],
					""curve"": 0
				}
			}
		},
		{
			""v0"": 199,
			""v1"": 200,
			""curve"": 0,
			""color"": ""d52623"",
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						62.757633623749484,
						-219.3923886185623
					],
					""b"": [
						70.92649915741936,
						-260.2367162869117
					],
					""curve"": 0
				}
			}
		},
		{
			""v0"": 200,
			""v1"": 201,
			""curve"": 0,
			""color"": ""d52623"",
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						70.92649915741936,
						-260.2367162869117
					],
					""b"": [
						83.17979745792417,
						-220.5593694090866
					],
					""curve"": 0
				}
			}
		},
		{
			""v0"": 199,
			""v1"": 202,
			""curve"": 0,
			""color"": ""d52623"",
			""cMask"": [
				""redKO"",
				""blueKO""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						62.757633623749484,
						-219.3923886185623
					],
					""b"": [
						86.09724943423484,
						-250.31737956745542
					],
					""curve"": 0
				}
			}
		}
	],
	""planes"": [
		{
			""normal"": [
				0,
				1
			],
			""dist"": -350,
			""bCoef"": 0,
			""color"": ""FFFFFF"",
			""_data"": {
				""extremes"": {
					""normal"": [
						0,
						1
					],
					""dist"": -350,
					""canvas_rect"": [
						-470.41910578972994,
						-257.2604484787586,
						470.41910578972994,
						257.2604484787586
					],
					""a"": [
						-470.41910578972994,
						-350
					],
					""b"": [
						470.41910578972994,
						-350
					]
				}
			}
		},
		{
			""normal"": [
				0,
				-1
			],
			""dist"": -350,
			""bCoef"": 0,
			""color"": ""FFFFFF"",
			""_data"": {
				""extremes"": {
					""normal"": [
						0,
						-1
					],
					""dist"": -350,
					""canvas_rect"": [
						-470.41910578972994,
						-257.2604484787586,
						470.41910578972994,
						257.2604484787586
					],
					""a"": [
						-470.41910578972994,
						350
					],
					""b"": [
						470.41910578972994,
						350
					]
				}
			}
		},
		{
			""normal"": [
				0,
				1
			],
			""dist"": -302,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""vis"": false,
			""curve"": 0,
			""_data"": {
				""extremes"": {
					""normal"": [
						0,
						1
					],
					""dist"": -302,
					""canvas_rect"": [
						-470.41910578972994,
						-257.2604484787586,
						470.41910578972994,
						257.2604484787586
					],
					""a"": [
						-470.41910578972994,
						-302
					],
					""b"": [
						470.41910578972994,
						-302
					]
				}
			}
		},
		{
			""normal"": [
				0,
				-1
			],
			""dist"": -302,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""_data"": {
				""extremes"": {
					""normal"": [
						0,
						-1
					],
					""dist"": -302,
					""canvas_rect"": [
						-470.41910578972994,
						-257.2604484787586,
						470.41910578972994,
						257.2604484787586
					],
					""a"": [
						-470.41910578972994,
						302
					],
					""b"": [
						470.41910578972994,
						302
					]
				}
			}
		},
		{
			""normal"": [
				1,
				0
			],
			""dist"": -640,
			""bCoef"": 0.1,
			""_data"": {
				""extremes"": {
					""normal"": [
						1,
						0
					],
					""dist"": -640,
					""canvas_rect"": [
						-470.41910578972994,
						-257.2604484787586,
						470.41910578972994,
						257.2604484787586
					],
					""a"": [
						-640,
						-257.2604484787586
					],
					""b"": [
						-640,
						257.2604484787586
					]
				}
			}
		},
		{
			""normal"": [
				-1,
				0
			],
			""dist"": -640,
			""bCoef"": 0.1,
			""_data"": {
				""extremes"": {
					""normal"": [
						-1,
						0
					],
					""dist"": -640,
					""canvas_rect"": [
						-470.41910578972994,
						-257.2604484787586,
						470.41910578972994,
						257.2604484787586
					],
					""a"": [
						640,
						-257.2604484787586
					],
					""b"": [
						640,
						257.2604484787586
					]
				}
			}
		},
		{
			""normal"": [
				1,
				0
			],
			""dist"": -562,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""vis"": false,
			""curve"": 0,
			""_data"": {
				""extremes"": {
					""normal"": [
						1,
						0
					],
					""dist"": -562,
					""canvas_rect"": [
						-470.41910578972994,
						-257.2604484787586,
						470.41910578972994,
						257.2604484787586
					],
					""a"": [
						-562,
						-257.2604484787586
					],
					""b"": [
						-562,
						257.2604484787586
					]
				}
			}
		},
		{
			""normal"": [
				-1,
				0
			],
			""dist"": -562,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""vis"": false,
			""curve"": 0,
			""_data"": {
				""extremes"": {
					""normal"": [
						-1,
						0
					],
					""dist"": -562,
					""canvas_rect"": [
						-470.41910578972994,
						-257.2604484787586,
						470.41910578972994,
						257.2604484787586
					],
					""a"": [
						562,
						-257.2604484787586
					],
					""b"": [
						562,
						257.2604484787586
					]
				}
			}
		}
	],
	""goals"": [
		{
			""p0"": [
				470,
				0
			],
			""p1"": [
				490,
				0
			],
			""team"": ""blue"",
			""color"": ""000000""
		},
		{
			""p0"": [
				480,
				-10
			],
			""p1"": [
				480,
				10
			],
			""team"": ""blue"",
			""color"": ""000000""
		},
		{
			""p0"": [
				-480,
				10
			],
			""p1"": [
				-480,
				-10
			],
			""team"": ""red"",
			""color"": ""FFFFFF""
		},
		{
			""p0"": [
				-470,
				0
			],
			""p1"": [
				-490,
				0
			],
			""team"": ""red"",
			""color"": ""FFFFFF""
		}
	],
	""discs"": [
		{
			""radius"": 9,
			""invMass"": 2,
			""pos"": [
				0,
				0
			],
			""color"": ""C43E16"",
			""cMask"": [
				""kick"",
				""ball"",
				""score""
			],
			""cGroup"": [
				""kick"",
				""ball"",
				""score""
			]
		},
		{
			""radius"": 5,
			""pos"": [
				525,
				0
			],
			""color"": ""000000"",
			""cMask"": []
		},
		{
			""radius"": 5,
			""pos"": [
				-525,
				0
			],
			""color"": ""000000"",
			""cMask"": []
		}
	],
	""playerPhysics"": {
		""kickingAcceleration"": 0.12,
		""kickStrength"": -1.3,
		""bCoef"": 0.5,
		""invMass"": 0.5,
		""damping"": 0.96,
		""acceleration"": 0.1,
		""kickingDamping"": 0.96
	},
	""ballPhysics"": ""disc0"",
	""spawnDistance"": 160,
	""traits"": [],
	""joints"": [],
	""redSpawnPoints"": [
		[
			-300,
			0
		],
		[
			-150,
			-190
		],
		[
			-44,
			44
		]
	],
	""blueSpawnPoints"": [
		[
			300,
			0
		],
		[
			150,
			190
		],
		[
			44,
			-44
		]
	],
	""canBeStored"": false
}`;
const Mapa2 = `{""name"":""[APOLLO] NBA 2 ®"",""width"":640,""height"":350,""bg"":{""type"":"""",""width"":560,""height"":300,""color"":""D9810F""},""vertexes"":[{""x"":-560,""y"":-300,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":560,""y"":-300,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-560,""y"":300,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":560,""y"":300,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-560,""y"":302,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":560,""y"":302,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-560,""y"":304,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":560,""y"":304,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-560,""y"":-302,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":560,""y"":-302,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-560,""y"":-304,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":560,""y"":-304,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-560,""y"":-305.33333111111,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-560,""y"":305.44,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":560,""y"":-305.33333111111,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":560,""y"":305.44,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-562,""y"":-305.33333111111,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-562,""y"":305.44,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-564,""y"":-305.33333111111,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-564,""y"":305.44,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":562,""y"":-305.33333111111,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":562,""y"":305.44,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":564,""y"":-305.33333111111,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":564,""y"":305.44,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-1,""y"":-302,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""curve"":0},{""x"":-1,""y"":302,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""curve"":0},{""x"":1,""y"":-302,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""curve"":0},{""x"":1,""y"":302,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""curve"":0},{""x"":-560,""y"":-250,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-425,""y"":-250,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF""},{""x"":560,""y"":-250,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":425,""y"":-250,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF""},{""x"":-560,""y"":250,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-425,""y"":250,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF""},{""x"":560,""y"":250,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":425,""y"":250,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF""},{""x"":-560,""y"":-120,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-320,""y"":-120,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":560,""y"":-120,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":320,""y"":-120,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-560,""y"":120,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-320,""y"":120,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":560,""y"":120,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":320,""y"":120,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":0,""y"":302,""bCoef"":0.1,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":0,""y"":-302,""bCoef"":0.1,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":0,""y"":-70,""bCoef"":0.1,""cMask"":[""red"",""blue""],""cGroup"":[""redKO"",""blueKO""],""color"":""FFFFFF""},{""x"":0,""y"":70,""bCoef"":0.1,""cMask"":[""red"",""blue""],""cGroup"":[""redKO"",""blueKO""],""color"":""FFFFFF""},{""x"":0,""y"":340,""bCoef"":0.1,""cMask"":[""red"",""blue""],""cGroup"":[""redKO"",""blueKO""],""color"":""FFFFFF""},{""x"":0,""y"":-340,""bCoef"":0.1,""cMask"":[""red"",""blue""],""cGroup"":[""redKO"",""blueKO""],""color"":""FFFFFF""},{""x"":-496,""y"":-63,""cMask"":[""red""],""cGroup"":[""red""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-496,""y"":63,""cMask"":[""red""],""cGroup"":[""red""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":496,""y"":-63,""cMask"":[""blue""],""cGroup"":[""blue""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":496,""y"":63,""cMask"":[""blue""],""cGroup"":[""blue""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":564,""y"":-10,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""000000"",""_data"":{""mirror"":{}}},{""x"":564,""y"":10,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""000000"",""_data"":{""mirror"":{}}},{""x"":515,""y"":-10,""cMask"":[""all""],""cGroup"":[""all""],""color"":""000000"",""_data"":{""mirror"":{}}},{""x"":515,""y"":10,""cMask"":[""all""],""cGroup"":[""all""],""color"":""000000"",""_data"":{""mirror"":{}}},{""x"":510,""y"":-5,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FF1700""},{""x"":510,""y"":5,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FF1700""},{""x"":493,""y"":-12,""cMask"":[],""color"":""FF1700""},{""x"":493,""y"":12,""cMask"":[],""color"":""FF1700""},{""x"":512.5,""y"":-66,""cMask"":[""all""],""cGroup"":[""all""],""color"":""000000""},{""x"":512.5,""y"":66,""cMask"":[""all""],""cGroup"":[""all""],""color"":""000000""},{""x"":510,""y"":-65,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FFFFFF""},{""x"":510,""y"":65,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FFFFFF""},{""x"":515,""y"":-70,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FFFFFF"",""curve"":0},{""x"":515,""y"":70,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FFFFFF"",""curve"":0},{""x"":-564,""y"":-10,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""000000"",""_data"":{""mirror"":{}}},{""x"":-564,""y"":10,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""000000"",""_data"":{""mirror"":{}}},{""x"":-515,""y"":-10,""cMask"":[""all""],""cGroup"":[""all""],""color"":""000000"",""_data"":{""mirror"":{}}},{""x"":-515,""y"":10,""cMask"":[""all""],""cGroup"":[""all""],""color"":""000000"",""_data"":{""mirror"":{}}},{""x"":-510,""y"":-5,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FF1700""},{""x"":-510,""y"":5,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FF1700""},{""x"":-493,""y"":-12,""cMask"":[],""color"":""FF1700""},{""x"":-493,""y"":12,""cMask"":[],""color"":""FF1700""},{""x"":-512.5,""y"":-66,""cMask"":[""all""],""cGroup"":[""all""],""color"":""000000""},{""x"":-512.5,""y"":66,""cMask"":[""all""],""cGroup"":[""all""],""color"":""000000""},{""x"":-510,""y"":-65,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FFFFFF""},{""x"":-510,""y"":65,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FFFFFF""},{""x"":-515,""y"":-70,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FFFFFF"",""curve"":0,""_data"":{""mirror"":{}}},{""x"":-515,""y"":70,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FFFFFF"",""curve"":0,""_data"":{""mirror"":{}}},{""x"":-480,""y"":-18,""bCoef"":-2.3,""cMask"":[""ball""],""cGroup"":[""ball""],""color"":""FF1700""},{""x"":-480,""y"":18,""bCoef"":-2.3,""cMask"":[""ball""],""cGroup"":[""ball""],""color"":""FF1700""},{""x"":480,""y"":-18,""bCoef"":-2.3,""cMask"":[""ball""],""cGroup"":[""ball""],""color"":""FF1700""},{""x"":480,""y"":18,""bCoef"":-2.3,""cMask"":[""ball""],""cGroup"":[""ball""],""color"":""FF1700""},{""x"":-480,""y"":-15,""bCoef"":0,""cMask"":[""ball""],""cGroup"":[""ball""],""color"":""FFFFFF""},{""x"":-480,""y"":15,""bCoef"":0,""cMask"":[""ball""],""cGroup"":[""ball""],""color"":""FFFFFF""},{""x"":480,""y"":-15,""bCoef"":0,""cMask"":[""ball""],""cGroup"":[""ball""],""color"":""FFFFFF""},{""x"":480,""y"":15,""bCoef"":0,""cMask"":[""ball""],""cGroup"":[""ball""],""color"":""FFFFFF""},{""x"":-560,""y"":-252,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-425,""y"":-252,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF""},{""x"":-560,""y"":252,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-425,""y"":252,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF""},{""x"":-427,""y"":-252,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF""},{""x"":-427,""y"":252,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF""},{""x"":-427,""y"":-250,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF""},{""x"":-427,""y"":250,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF""},{""x"":-560,""y"":118,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-320,""y"":118,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-560,""y"":-118,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-320,""y"":-118,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-320,""y"":-121.444444,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-320,""y"":121.444444,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-318,""y"":-121.444444,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-318,""y"":121.444444,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":560,""y"":252,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":425,""y"":252,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF""},{""x"":560,""y"":-252,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":425,""y"":-252,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF""},{""x"":560,""y"":118,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":320,""y"":118,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":560,""y"":-118,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":320,""y"":-118,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":320,""y"":-121.444444,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":320,""y"":121.444444,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":318,""y"":-121.444444,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":318,""y"":121.444444,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":320,""y"":-90,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":320,""y"":90,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":427,""y"":-252,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF""},{""x"":427,""y"":252,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF""},{""x"":427,""y"":-250,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF""},{""x"":427,""y"":250,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF""},{""x"":-320,""y"":-90,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""curve"":180,""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-320,""y"":90,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""curve"":180,""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-357,""y"":-129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-357,""y"":-119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-409,""y"":-129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-409,""y"":-119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-486,""y"":-129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-486,""y"":-119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-477,""y"":-129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-477,""y"":-119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":357,""y"":-129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":357,""y"":-119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":409,""y"":-129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":409,""y"":-119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":477,""y"":-129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":477,""y"":-119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":486,""y"":-129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":486,""y"":-119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":486,""y"":129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":486,""y"":119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":409,""y"":129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":409,""y"":119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":477,""y"":129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":477,""y"":119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":357,""y"":129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":357,""y"":119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-486,""y"":129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-486,""y"":119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-477,""y"":129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-477,""y"":119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-409,""y"":129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-409,""y"":119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-357,""y"":129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-357,""y"":119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-320,""y"":-90,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""curve"":-180,""color"":""FFFFFF"",""_data"":{""mirror"":{}}},{""x"":-320,""y"":90,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""curve"":-180,""color"":""FFFFFF"",""_data"":{""mirror"":{}}}],""segments"":[{""v0"":4,""v1"":5,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""wall""],""y"":302},{""v0"":6,""v1"":7,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""wall""],""y"":304},{""v0"":8,""v1"":9,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""wall""],""y"":-302},{""v0"":10,""v1"":11,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""wall""],""y"":-304,""_data"":{""mirror"":{},""arc"":{""a"":[-560,-304],""b"":[560,-304],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":16,""v1"":17,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""wall""],""x"":-562},{""v0"":18,""v1"":19,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""wall""],""x"":-564,""_data"":{""mirror"":{},""arc"":{""a"":[-564,-305.33333111111],""b"":[-564,305.44],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":20,""v1"":21,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""wall""],""x"":562},{""v0"":22,""v1"":23,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""wall""],""x"":564},{""v0"":24,""v1"":25,""curve"":0,""color"":""FFFFFF"",""cMask"":[]},{""v0"":26,""v1"":27,""curve"":0,""color"":""FFFFFF"",""cMask"":[]},{""v0"":28,""v1"":29,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""]},{""v0"":30,""v1"":31,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""]},{""v0"":32,""v1"":33,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""]},{""v0"":34,""v1"":35,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""]},{""v0"":36,""v1"":37,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""_data"":{""mirror"":{},""arc"":{""a"":[-560,-120],""b"":[-320,-120],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":38,""v1"":39,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""_data"":{""mirror"":{},""arc"":{""a"":[560,-120],""b"":[320,-120],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":40,""v1"":41,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""_data"":{""mirror"":{},""arc"":{""a"":[-560,120],""b"":[-320,120],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":42,""v1"":43,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""_data"":{""mirror"":{},""arc"":{""a"":[560,120],""b"":[320,120],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":44,""v1"":47,""color"":""FFFFFF"",""bCoef"":0.1,""cMask"":[""red"",""blue""],""cGroup"":[""redKO"",""blueKO""]},{""v0"":45,""v1"":46,""color"":""FFFFFF"",""bCoef"":0.1,""cMask"":[""red"",""blue""],""cGroup"":[""redKO"",""blueKO""]},{""v0"":44,""v1"":48,""vis"":false,""color"":""FFFFFF"",""bCoef"":0.1,""cMask"":[""red"",""blue""],""cGroup"":[""redKO"",""blueKO""]},{""v0"":45,""v1"":49,""vis"":false,""color"":""FFFFFF"",""bCoef"":0.1,""cMask"":[""red"",""blue""],""cGroup"":[""redKO"",""blueKO""]},{""v0"":46,""v1"":47,""curve"":180,""color"":""FFFFFF"",""bCoef"":0.1,""cMask"":[""red"",""blue""],""cGroup"":[""redKO""],""curveF"":6.123233995736766e-17},{""v0"":47,""v1"":46,""curve"":180,""color"":""FFFFFF"",""bCoef"":0.1,""cMask"":[""red"",""blue""],""cGroup"":[""blueKO""],""curveF"":6.123233995736766e-17},{""v0"":50,""v1"":51,""curve"":180,""color"":""FFFFFF"",""cMask"":[""red""],""cGroup"":[""red""],""curveF"":6.123233995736766e-17,""_data"":{""mirror"":{},""arc"":{""a"":[-496,-63],""b"":[-496,63],""curve"":180,""radius"":63,""center"":[-496,0],""from"":-1.5707963267948966,""to"":1.5707963267948966}}},{""v0"":53,""v1"":52,""curve"":180,""color"":""FFFFFF"",""cMask"":[""blue""],""cGroup"":[""blue""],""curveF"":6.123233995736766e-17,""_data"":{""mirror"":{},""arc"":{""a"":[496,63],""b"":[496,-63],""curve"":180,""radius"":63,""center"":[496,0],""from"":1.5707963267948966,""to"":-1.5707963267948966}}},{""v0"":56,""v1"":54,""color"":""000000"",""cMask"":[],""_data"":{""mirror"":{},""arc"":{""a"":[515,-10],""b"":[564,-10],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":57,""v1"":55,""color"":""000000"",""cMask"":[],""_data"":{""mirror"":{},""arc"":{""a"":[515,10],""b"":[564,10],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":59,""v1"":61,""color"":""FF1700"",""cMask"":[]},{""v0"":58,""v1"":60,""color"":""FF1700"",""cMask"":[]},{""v0"":62,""v1"":63,""color"":""000000"",""cMask"":[""all""],""cGroup"":[""all""]},{""v0"":64,""v1"":65,""color"":""FFFFFF"",""cMask"":[""all""],""cGroup"":[""all""]},{""v0"":66,""v1"":64,""color"":""FFFFFF"",""cMask"":[""all""],""cGroup"":[""all""]},{""v0"":67,""v1"":65,""color"":""FFFFFF"",""cMask"":[""all""],""cGroup"":[""all""]},{""v0"":67,""v1"":66,""curve"":0,""color"":""FFFFFF"",""cMask"":[""all""],""cGroup"":[""all""]},{""v0"":70,""v1"":68,""color"":""000000"",""cMask"":[],""_data"":{""mirror"":{},""arc"":{""a"":[-515,-10],""b"":[-564,-10],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":71,""v1"":69,""color"":""000000"",""cMask"":[],""_data"":{""mirror"":{},""arc"":{""a"":[-515,10],""b"":[-564,10],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":73,""v1"":75,""color"":""FF1700"",""cMask"":[]},{""v0"":72,""v1"":74,""color"":""FF1700"",""cMask"":[]},{""v0"":76,""v1"":77,""color"":""000000"",""cMask"":[""all""],""cGroup"":[""all""]},{""v0"":78,""v1"":79,""color"":""FFFFFF"",""cMask"":[""all""],""cGroup"":[""all""]},{""v0"":80,""v1"":78,""color"":""FFFFFF"",""cMask"":[""all""],""cGroup"":[""all""]},{""v0"":81,""v1"":79,""color"":""FFFFFF"",""cMask"":[""all""],""cGroup"":[""all""]},{""v0"":81,""v1"":80,""curve"":0,""color"":""FFFFFF"",""cMask"":[""all""],""cGroup"":[""all""],""_data"":{""mirror"":{},""arc"":{""a"":[-515,70],""b"":[-515,-70],""curve"":0}}},{""v0"":82,""v1"":83,""curve"":180,""color"":""FF1700"",""bCoef"":-2.3,""cMask"":[""ball""],""cGroup"":[""ball""],""curveF"":6.123233995736766e-17},{""v0"":85,""v1"":84,""curve"":180,""color"":""FF1700"",""bCoef"":-2.3,""cMask"":[""ball""],""cGroup"":[""ball""],""curveF"":6.123233995736766e-17},{""v0"":83,""v1"":82,""curve"":180,""color"":""FF1700"",""bCoef"":-2.8,""cMask"":[""ball""],""cGroup"":[""ball""],""curveF"":6.123233995736766e-17},{""v0"":84,""v1"":85,""curve"":180,""color"":""FF1700"",""bCoef"":-2.8,""cMask"":[""ball""],""cGroup"":[""ball""],""curveF"":6.123233995736766e-17},{""v0"":87,""v1"":86,""curve"":180,""color"":""FFFFFF"",""bCoef"":0,""cMask"":[""ball""],""cGroup"":[""ball""],""curveF"":6.123233995736766e-17},{""v0"":89,""v1"":88,""curve"":180,""color"":""FFFFFF"",""bCoef"":0,""cMask"":[""ball""],""cGroup"":[""ball""],""curveF"":6.123233995736766e-17},{""v0"":86,""v1"":87,""curve"":180,""color"":""FFFFFF"",""bCoef"":0,""cMask"":[""ball""],""cGroup"":[""ball""],""curveF"":6.123233995736766e-17},{""v0"":88,""v1"":89,""curve"":180,""color"":""FFFFFF"",""bCoef"":0,""cMask"":[""ball""],""cGroup"":[""ball""],""curveF"":6.123233995736766e-17},{""v0"":90,""v1"":91,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""y"":-252},{""v0"":92,""v1"":93,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""y"":252},{""v0"":94,""v1"":95,""curve"":180,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""curveF"":6.123233995736766e-17},{""v0"":96,""v1"":97,""curve"":180,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""curveF"":6.123233995736766e-17},{""v0"":98,""v1"":99,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""y"":118,""_data"":{""mirror"":{},""arc"":{""a"":[-560,118],""b"":[-320,118],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":100,""v1"":101,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""y"":-118,""_data"":{""mirror"":{},""arc"":{""a"":[-560,-118],""b"":[-320,-118],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":102,""v1"":103,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""_data"":{""mirror"":{},""arc"":{""a"":[-320,-121.444444],""b"":[-320,121.444444],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":104,""v1"":105,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":-318,""_data"":{""mirror"":{},""arc"":{""a"":[-318,-121.444444],""b"":[-318,121.444444],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":106,""v1"":107,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""y"":252},{""v0"":108,""v1"":109,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""y"":-252},{""v0"":110,""v1"":111,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""y"":118,""_data"":{""mirror"":{},""arc"":{""a"":[560,118],""b"":[320,118],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":112,""v1"":113,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""y"":-118,""_data"":{""mirror"":{},""arc"":{""a"":[560,-118],""b"":[320,-118],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":114,""v1"":115,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""x"":-318,""_data"":{""mirror"":{},""arc"":{""a"":[320,-121.444444],""b"":[320,121.444444],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":116,""v1"":117,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""x"":318,""_data"":{""mirror"":{},""arc"":{""a"":[318,-121.444444],""b"":[318,121.444444],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":119,""v1"":118,""curve"":180,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""curveF"":6.123233995736766e-17,""_data"":{""mirror"":{},""arc"":{""a"":[320,90],""b"":[320,-90],""curve"":180,""radius"":90,""center"":[320,0],""from"":1.5707963267948966,""to"":-1.5707963267948966}}},{""v0"":120,""v1"":121,""curve"":-180,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""]},{""v0"":122,""v1"":123,""curve"":-180,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""]},{""v0"":124,""v1"":125,""curve"":180,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":-320,""_data"":{""mirror"":{},""arc"":{""a"":[-320,-90],""b"":[-320,90],""curve"":180,""radius"":90,""center"":[-320,0],""from"":-1.5707963267948966,""to"":1.5707963267948966}}},{""v0"":126,""v1"":127,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":-360,""y"":136,""_data"":{""mirror"":{},""arc"":{""a"":[-357,-129],""b"":[-357,-119],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":128,""v1"":129,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":-390,""y"":136,""_data"":{""mirror"":{},""arc"":{""a"":[-409,-129],""b"":[-409,-119],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":130,""v1"":131,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":-390,""y"":136,""_data"":{""mirror"":{},""arc"":{""a"":[-486,-129],""b"":[-486,-119],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":132,""v1"":133,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":-390,""y"":136,""_data"":{""mirror"":{},""arc"":{""a"":[-477,-129],""b"":[-477,-119],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":134,""v1"":135,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":357,""y"":136,""_data"":{""mirror"":{},""arc"":{""a"":[357,-129],""b"":[357,-119],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":136,""v1"":137,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":409,""y"":136,""_data"":{""mirror"":{},""arc"":{""a"":[409,-129],""b"":[409,-119],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":138,""v1"":139,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":477,""y"":136,""_data"":{""mirror"":{},""arc"":{""a"":[477,-129],""b"":[477,-119],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":140,""v1"":141,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":486,""y"":136,""_data"":{""mirror"":{},""arc"":{""a"":[486,-129],""b"":[486,-119],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":142,""v1"":143,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":486,""y"":136,""_data"":{""mirror"":{},""arc"":{""a"":[486,129],""b"":[486,119],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":144,""v1"":145,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":409,""y"":136,""_data"":{""mirror"":{},""arc"":{""a"":[409,129],""b"":[409,119],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":146,""v1"":147,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":477,""y"":136,""_data"":{""mirror"":{},""arc"":{""a"":[477,129],""b"":[477,119],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":148,""v1"":149,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":357,""y"":136,""_data"":{""mirror"":{},""arc"":{""a"":[357,129],""b"":[357,119],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":150,""v1"":151,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":-486,""y"":136,""_data"":{""mirror"":{},""arc"":{""a"":[-486,129],""b"":[-486,119],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":152,""v1"":153,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":-477,""y"":136,""_data"":{""mirror"":{},""arc"":{""a"":[-477,129],""b"":[-477,119],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":154,""v1"":155,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":-409,""y"":136,""_data"":{""mirror"":{},""arc"":{""a"":[-409,129],""b"":[-409,119],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}},{""v0"":156,""v1"":157,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":-357,""y"":136,""_data"":{""mirror"":{},""arc"":{""a"":[-357,129],""b"":[-357,119],""radius"":null,""center"":[null,null],""from"":null,""to"":null}}}],""planes"":[{""normal"":[0,1],""dist"":-350,""bCoef"":0,""color"":""FFFFFF"",""_data"":{""extremes"":{""normal"":[0,1],""dist"":-350,""canvas_rect"":[-781,-350,781,350],""a"":[-781,-350],""b"":[781,-350]}}},{""normal"":[0,-1],""dist"":-350,""bCoef"":0,""color"":""FFFFFF"",""_data"":{""extremes"":{""normal"":[0,-1],""dist"":-350,""canvas_rect"":[-781,-350,781,350],""a"":[-781,350],""b"":[781,350]}}},{""normal"":[0,1],""dist"":-302,""bCoef"":1,""cMask"":[""ball""],""cGroup"":[""ball""],""trait"":""ballArea"",""vis"":false,""curve"":0,""_data"":{""extremes"":{""normal"":[0,1],""dist"":-302,""canvas_rect"":[-781,-350,781,350],""a"":[-781,-302],""b"":[781,-302]},""mirror"":{}}},{""normal"":[0,-1],""dist"":-302,""bCoef"":1,""cMask"":[""ball""],""cGroup"":[""ball""],""trait"":""ballArea"",""_data"":{""mirror"":{},""extremes"":{""normal"":[0,-1],""dist"":-302,""canvas_rect"":[-781,-350,781,350],""a"":[-781,302],""b"":[781,302]}}},{""normal"":[1,0],""dist"":-640,""bCoef"":0.1,""_data"":{""extremes"":{""normal"":[1,0],""dist"":-640,""canvas_rect"":[-781,-350,781,350],""a"":[-640,-350],""b"":[-640,350]}}},{""normal"":[-1,0],""dist"":-640,""bCoef"":0.1,""_data"":{""extremes"":{""normal"":[-1,0],""dist"":-640,""canvas_rect"":[-781,-350,781,350],""a"":[640,-350],""b"":[640,350]}}},{""normal"":[1,0],""dist"":-562,""bCoef"":1,""cMask"":[""ball""],""cGroup"":[""ball""],""trait"":""ballArea"",""vis"":false,""curve"":0,""_data"":{""extremes"":{""normal"":[1,0],""dist"":-562,""canvas_rect"":[-781,-350,781,350],""a"":[-562,-350],""b"":[-562,350]}}},{""normal"":[-1,0],""dist"":-562,""bCoef"":1,""cMask"":[""ball""],""cGroup"":[""ball""],""trait"":""ballArea"",""vis"":false,""curve"":0,""_data"":{""extremes"":{""normal"":[-1,0],""dist"":-562,""canvas_rect"":[-781,-350,781,350],""a"":[562,-350],""b"":[562,350]}}}],""goals"":[{""p0"":[470,0],""p1"":[490,0],""team"":""blue"",""color"":""FFFFFF""},{""p0"":[480,-10],""p1"":[480,10],""team"":""blue"",""color"":""FFFFFF""},{""p0"":[-480,10],""p1"":[-480,-10],""team"":""red"",""color"":""FFFFFF""},{""p0"":[-470,0],""p1"":[-490,0],""team"":""red"",""color"":""FFFFFF""}],""discs"":[{""radius"":9,""invMass"":2,""pos"":[0,0],""color"":""C43E16"",""cMask"":[""kick"",""ball"",""score""],""cGroup"":[""kick"",""ball"",""score""],""_data"":{""mirror"":{}}},{""radius"":5,""pos"":[525,0],""color"":""000000"",""cMask"":[],""_data"":{""mirror"":{}}},{""radius"":5,""pos"":[-525,0],""color"":""000000"",""cMask"":[],""_data"":{""mirror"":{}}}],""playerPhysics"":{""kickingAcceleration"":0.12,""kickStrength"":-1.3,""bCoef"":0.5,""invMass"":0.5,""damping"":0.96,""acceleration"":0.1,""kickingDamping"":0.96},""ballPhysics"":""disc0"",""spawnDistance"":160,""traits"":[],""joints"":[],""redSpawnPoints"":[[-300,0],[-150,-190],[-44,44]],""blueSpawnPoints"":[[300,0],[150,190],[44,-44]],""canBeStored"":false}`;

const Mapa3 = `{""name"":""[APOLLO] NBA 3 ®"",""width"":640,""height"":350,""bg"":{""type"":"""",""width"":560,""height"":300,""color"":""919191""},""vertexes"":[{""x"":-560,""y"":-300,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":560,""y"":-300,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-560,""y"":300,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":560,""y"":300,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-560,""y"":302,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":560,""y"":302,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-560,""y"":304,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":560,""y"":304,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-560,""y"":-302,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":560,""y"":-302,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-560,""y"":-304,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":560,""y"":-304,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-560,""y"":-305.33333111111,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-560,""y"":305.44,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":560,""y"":-305.33333111111,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":560,""y"":305.44,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-562,""y"":-305.33333111111,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-562,""y"":305.44,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-564,""y"":-305.33333111111,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-564,""y"":305.44,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":562,""y"":-305.33333111111,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":562,""y"":305.44,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":564,""y"":-305.33333111111,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":564,""y"":305.44,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-1,""y"":-302,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""curve"":0},{""x"":-1,""y"":302,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""curve"":0},{""x"":1,""y"":-302,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""curve"":0},{""x"":1,""y"":302,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""curve"":0},{""x"":-560,""y"":-250,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-425,""y"":-250,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":560,""y"":-250,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":425,""y"":-250,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF""},{""x"":-560,""y"":250,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-425,""y"":250,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF""},{""x"":560,""y"":250,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":425,""y"":250,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""9E9E9E""},{""x"":-560,""y"":-120,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-320,""y"":-120,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":560,""y"":-120,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":320,""y"":-120,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""9E9E9E""},{""x"":-560,""y"":120,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-320,""y"":120,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":560,""y"":120,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":320,""y"":120,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""9E9E9E""},{""x"":0,""y"":302,""bCoef"":0.1,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":0,""y"":-302,""bCoef"":0.1,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":0,""y"":-70,""bCoef"":0.1,""cMask"":[""red"",""blue""],""cGroup"":[""redKO"",""blueKO""],""color"":""FFFFFF""},{""x"":0,""y"":70,""bCoef"":0.1,""cMask"":[""red"",""blue""],""cGroup"":[""redKO"",""blueKO""],""color"":""FFFFFF""},{""x"":0,""y"":340,""bCoef"":0.1,""cMask"":[""red"",""blue""],""cGroup"":[""redKO"",""blueKO""],""color"":""FFFFFF""},{""x"":0,""y"":-340,""bCoef"":0.1,""cMask"":[""red"",""blue""],""cGroup"":[""redKO"",""blueKO""],""color"":""FFFFFF""},{""x"":-496,""y"":-63,""cMask"":[""red""],""cGroup"":[""red""],""color"":""FFFFFF""},{""x"":-496,""y"":63,""cMask"":[""red""],""cGroup"":[""red""],""color"":""FFFFFF""},{""x"":496,""y"":-63,""cMask"":[""blue""],""cGroup"":[""blue""],""color"":""FFFFFF""},{""x"":496,""y"":63,""cMask"":[""blue""],""cGroup"":[""blue""],""color"":""FFFFFF""},{""x"":564,""y"":-10,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FF1700""},{""x"":564,""y"":10,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FF1700""},{""x"":515,""y"":-10,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FF1700""},{""x"":515,""y"":10,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FF1700""},{""x"":510,""y"":-5,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FF1700""},{""x"":510,""y"":5,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FF1700""},{""x"":493,""y"":-12,""cMask"":[],""color"":""FF1700""},{""x"":493,""y"":12,""cMask"":[],""color"":""FF1700""},{""x"":512.5,""y"":-66,""cMask"":[""all""],""cGroup"":[""all""],""color"":""000000""},{""x"":512.5,""y"":66,""cMask"":[""all""],""cGroup"":[""all""],""color"":""000000""},{""x"":510,""y"":-65,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FFFFFF""},{""x"":510,""y"":65,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FFFFFF""},{""x"":515,""y"":-70,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FFFFFF"",""curve"":0},{""x"":515,""y"":70,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FFFFFF"",""curve"":0},{""x"":-564,""y"":-10,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FF1700""},{""x"":-564,""y"":10,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FF1700""},{""x"":-515,""y"":-10,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FF1700""},{""x"":-515,""y"":10,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FF1700""},{""x"":-510,""y"":-5,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FF1700""},{""x"":-510,""y"":5,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FF1700""},{""x"":-493,""y"":-12,""cMask"":[],""color"":""FF1700""},{""x"":-493,""y"":12,""cMask"":[],""color"":""FF1700""},{""x"":-512.5,""y"":-66,""cMask"":[""all""],""cGroup"":[""all""],""color"":""000000""},{""x"":-512.5,""y"":66,""cMask"":[""all""],""cGroup"":[""all""],""color"":""000000""},{""x"":-510,""y"":-65,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FFFFFF""},{""x"":-510,""y"":65,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FFFFFF""},{""x"":-515,""y"":-70,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FFFFFF"",""curve"":0},{""x"":-515,""y"":70,""cMask"":[""all""],""cGroup"":[""all""],""color"":""FFFFFF"",""curve"":0},{""x"":-480,""y"":-18,""bCoef"":-2.3,""cMask"":[""ball""],""cGroup"":[""ball""],""color"":""FF1700""},{""x"":-480,""y"":18,""bCoef"":-2.3,""cMask"":[""ball""],""cGroup"":[""ball""],""color"":""FF1700""},{""x"":480,""y"":-18,""bCoef"":-2.3,""cMask"":[""ball""],""cGroup"":[""ball""],""color"":""FF1700""},{""x"":480,""y"":18,""bCoef"":-2.3,""cMask"":[""ball""],""cGroup"":[""ball""],""color"":""FF1700""},{""x"":-480,""y"":-15,""bCoef"":0,""cMask"":[""ball""],""cGroup"":[""ball""],""color"":""FFFFFF""},{""x"":-480,""y"":15,""bCoef"":0,""cMask"":[""ball""],""cGroup"":[""ball""],""color"":""FFFFFF""},{""x"":480,""y"":-15,""bCoef"":0,""cMask"":[""ball""],""cGroup"":[""ball""],""color"":""FFFFFF""},{""x"":480,""y"":15,""bCoef"":0,""cMask"":[""ball""],""cGroup"":[""ball""],""color"":""FFFFFF""},{""x"":-560,""y"":-252,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-425,""y"":-252,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-560,""y"":252,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":-425,""y"":252,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF""},{""x"":-427,""y"":-252,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-427,""y"":252,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF""},{""x"":-427,""y"":-250,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-427,""y"":250,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""FFFFFF""},{""x"":-560,""y"":118,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-320,""y"":118,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-560,""y"":-118,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-320,""y"":-118,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-320,""y"":-121.444444,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-320,""y"":121.444444,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-318,""y"":-121.444444,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-318,""y"":121.444444,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":560,""y"":252,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":425,""y"":252,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""9E9E9E""},{""x"":560,""y"":-252,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF""},{""x"":425,""y"":-252,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF""},{""x"":560,""y"":118,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":320,""y"":118,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""9E9E9E""},{""x"":560,""y"":-118,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":320,""y"":-118,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""9E9E9E""},{""x"":320,""y"":-121.444444,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""9E9E9E""},{""x"":320,""y"":121.444444,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""9E9E9E""},{""x"":318,""y"":-121.444444,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""9E9E9E""},{""x"":318,""y"":121.444444,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""9E9E9E""},{""x"":320,""y"":-90,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""9E9E9E""},{""x"":320,""y"":90,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""9E9E9E""},{""x"":427,""y"":-252,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF""},{""x"":427,""y"":252,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""9E9E9E""},{""x"":427,""y"":-250,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""FFFFFF""},{""x"":427,""y"":250,""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""color"":""9E9E9E""},{""x"":-320,""y"":-90,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""curve"":180,""color"":""9E9E9E""},{""x"":-320,""y"":90,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""curve"":180,""color"":""9E9E9E""},{""x"":-357,""y"":-129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-357,""y"":-119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-409,""y"":-129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-409,""y"":-119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-486,""y"":-129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-486,""y"":-119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-477,""y"":-129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-477,""y"":-119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":357,""y"":-129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":357,""y"":-119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":409,""y"":-129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":409,""y"":-119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":477,""y"":-129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":477,""y"":-119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":486,""y"":-129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":486,""y"":-119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":486,""y"":129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":486,""y"":119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":409,""y"":129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":409,""y"":119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":477,""y"":129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":477,""y"":119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":357,""y"":129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":357,""y"":119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-486,""y"":129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-486,""y"":119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-477,""y"":129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-477,""y"":119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-409,""y"":129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-409,""y"":119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-357,""y"":129,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-357,""y"":119,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""color"":""9E9E9E""},{""x"":-320,""y"":-90,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""curve"":-180,""color"":""9E9E9E""},{""x"":-320,""y"":90,""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""curve"":-180,""color"":""9E9E9E""},{""x"":-46,""y"":-52,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""curve"":50,""_data"":{""mirror"":{}}},{""x"":-46,""y"":52,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""curve"":50,""_data"":{""mirror"":{}}},{""x"":46,""y"":-52,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""curve"":-50},{""x"":46,""y"":52,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""FFFFFF"",""curve"":-50},{""x"":-70,""y"":0,""cMask"":[""wall""],""cGroup"":[""wall""],""curve"":0},{""x"":69.5,""y"":0,""cMask"":[""wall""],""cGroup"":[""wall""],""curve"":0},{""x"":-292,""y"":298.5,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-292,""y"":217,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-210.5,""y"":216,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-209.5,""y"":156,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-41,""y"":155.5,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-43,""y"":299,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":73,""y"":299,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":75,""y"":66,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":149,""y"":67,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":152,""y"":-163,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":7,""y"":-164,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-6,""y"":-210,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-140,""y"":-210,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-139,""y"":-298,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-295,""y"":-295,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-259,""y"":-229,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-182,""y"":-219,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-154,""y"":-296,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":165,""y"":296,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":201,""y"":227,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":279,""y"":245,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":317,""y"":297,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":312,""y"":-299,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":258,""y"":-224,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":158,""y"":-215,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":83,""y"":-295,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":450,""y"":271,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":443,""y"":286,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":442,""y"":271,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":435,""y"":286,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":433,""y"":271,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":426,""y"":286,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":425,""y"":271,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":418,""y"":286,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":417,""y"":271,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":410,""y"":286,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-409,""y"":-282,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-416,""y"":-267,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-417,""y"":-282,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-424,""y"":-267,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-426,""y"":-282,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-433,""y"":-267,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-434,""y"":-282,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-441,""y"":-267,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-442,""y"":-282,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-449,""y"":-267,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-555,""y"":-90,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-328,""y"":-90,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-555,""y"":90,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-328,""y"":90,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-425,""y"":-30,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-328,""y"":-30,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-425,""y"":30,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-328,""y"":30,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":328,""y"":-90,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":555,""y"":-90,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":328,""y"":-30,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":425,""y"":-30,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":328,""y"":30,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":425,""y"":30,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":328,""y"":90,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":555,""y"":90,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-550,""y"":239,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-466,""y"":130,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":550,""y"":239,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":466,""y"":130,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-550,""y"":-239,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-466,""y"":-130,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":550,""y"":-239,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":466,""y"":-130,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-468,""y"":239,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-393,""y"":136,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":468,""y"":239,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":393,""y"":136,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-468,""y"":-239,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-393,""y"":-136,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":468,""y"":-239,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":393,""y"":-136,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-388,""y"":237,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-322,""y"":136,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":388,""y"":237,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":322,""y"":136,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-388,""y"":-237,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":-322,""y"":-136,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":388,""y"":-237,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""},{""x"":322,""y"":-136,""cMask"":[""wall""],""cGroup"":[""wall""],""color"":""9E9E9E""}],""segments"":[{""v0"":4,""v1"":5,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""wall""],""y"":302},{""v0"":6,""v1"":7,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""wall""],""y"":304},{""v0"":8,""v1"":9,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""wall""],""y"":-302},{""v0"":10,""v1"":11,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""wall""],""y"":-304},{""v0"":16,""v1"":17,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""wall""],""x"":-562},{""v0"":18,""v1"":19,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""wall""],""x"":-564},{""v0"":20,""v1"":21,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""wall""],""x"":562},{""v0"":22,""v1"":23,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""wall""],""x"":564},{""v0"":24,""v1"":25,""curve"":0,""color"":""FFFFFF"",""cMask"":[]},{""v0"":26,""v1"":27,""curve"":0,""color"":""FFFFFF"",""cMask"":[]},{""v0"":28,""v1"":29,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""]},{""v0"":30,""v1"":31,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""]},{""v0"":32,""v1"":33,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""]},{""v0"":34,""v1"":35,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""]},{""v0"":36,""v1"":37,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""]},{""v0"":38,""v1"":39,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""]},{""v0"":40,""v1"":41,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""]},{""v0"":42,""v1"":43,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""]},{""v0"":44,""v1"":47,""color"":""FFFFFF"",""bCoef"":0.1,""cMask"":[""red"",""blue""],""cGroup"":[""redKO"",""blueKO""]},{""v0"":45,""v1"":46,""color"":""FFFFFF"",""bCoef"":0.1,""cMask"":[""red"",""blue""],""cGroup"":[""redKO"",""blueKO""]},{""v0"":44,""v1"":48,""vis"":false,""color"":""FFFFFF"",""bCoef"":0.1,""cMask"":[""red"",""blue""],""cGroup"":[""redKO"",""blueKO""]},{""v0"":45,""v1"":49,""vis"":false,""color"":""FFFFFF"",""bCoef"":0.1,""cMask"":[""red"",""blue""],""cGroup"":[""redKO"",""blueKO""]},{""v0"":46,""v1"":47,""curve"":180,""color"":""FFFFFF"",""bCoef"":0.1,""cMask"":[""red"",""blue""],""cGroup"":[""redKO""],""curveF"":6.123233995736766e-17},{""v0"":47,""v1"":46,""curve"":180,""color"":""FFFFFF"",""bCoef"":0.1,""cMask"":[""red"",""blue""],""cGroup"":[""blueKO""],""curveF"":6.123233995736766e-17},{""v0"":50,""v1"":51,""curve"":180,""color"":""FFFFFF"",""cMask"":[""red""],""cGroup"":[""red""],""curveF"":6.123233995736766e-17},{""v0"":53,""v1"":52,""curve"":180,""color"":""FFFFFF"",""cMask"":[""blue""],""cGroup"":[""blue""],""curveF"":6.123233995736766e-17},{""v0"":56,""v1"":54,""color"":""FF1700"",""cMask"":[]},{""v0"":57,""v1"":55,""color"":""FF1700"",""cMask"":[]},{""v0"":59,""v1"":61,""color"":""FF1700"",""cMask"":[]},{""v0"":58,""v1"":60,""color"":""FF1700"",""cMask"":[]},{""v0"":62,""v1"":63,""color"":""000000"",""cMask"":[""all""],""cGroup"":[""all""]},{""v0"":64,""v1"":65,""color"":""FFFFFF"",""cMask"":[""all""],""cGroup"":[""all""]},{""v0"":66,""v1"":64,""color"":""FFFFFF"",""cMask"":[""all""],""cGroup"":[""all""]},{""v0"":67,""v1"":65,""color"":""FFFFFF"",""cMask"":[""all""],""cGroup"":[""all""]},{""v0"":67,""v1"":66,""curve"":0,""color"":""FFFFFF"",""cMask"":[""all""],""cGroup"":[""all""]},{""v0"":70,""v1"":68,""color"":""FF1700"",""cMask"":[]},{""v0"":71,""v1"":69,""color"":""FF1700"",""cMask"":[]},{""v0"":73,""v1"":75,""color"":""FF1700"",""cMask"":[]},{""v0"":72,""v1"":74,""color"":""FF1700"",""cMask"":[]},{""v0"":76,""v1"":77,""color"":""000000"",""cMask"":[""all""],""cGroup"":[""all""]},{""v0"":78,""v1"":79,""color"":""FFFFFF"",""cMask"":[""all""],""cGroup"":[""all""]},{""v0"":80,""v1"":78,""color"":""FFFFFF"",""cMask"":[""all""],""cGroup"":[""all""]},{""v0"":81,""v1"":79,""color"":""FFFFFF"",""cMask"":[""all""],""cGroup"":[""all""]},{""v0"":81,""v1"":80,""curve"":0,""color"":""FFFFFF"",""cMask"":[""all""],""cGroup"":[""all""]},{""v0"":82,""v1"":83,""curve"":180,""color"":""FF1700"",""bCoef"":-2.3,""cMask"":[""ball""],""cGroup"":[""ball""],""curveF"":6.123233995736766e-17},{""v0"":85,""v1"":84,""curve"":180,""color"":""FF1700"",""bCoef"":-2.3,""cMask"":[""ball""],""cGroup"":[""ball""],""curveF"":6.123233995736766e-17},{""v0"":83,""v1"":82,""curve"":180,""color"":""FF1700"",""bCoef"":-2.8,""cMask"":[""ball""],""cGroup"":[""ball""],""curveF"":6.123233995736766e-17},{""v0"":84,""v1"":85,""curve"":180,""color"":""FF1700"",""bCoef"":-2.8,""cMask"":[""ball""],""cGroup"":[""ball""],""curveF"":6.123233995736766e-17},{""v0"":87,""v1"":86,""curve"":180,""color"":""FFFFFF"",""bCoef"":0,""cMask"":[""ball""],""cGroup"":[""ball""],""curveF"":6.123233995736766e-17},{""v0"":89,""v1"":88,""curve"":180,""color"":""FFFFFF"",""bCoef"":0,""cMask"":[""ball""],""cGroup"":[""ball""],""curveF"":6.123233995736766e-17},{""v0"":86,""v1"":87,""curve"":180,""color"":""FFFFFF"",""bCoef"":0,""cMask"":[""ball""],""cGroup"":[""ball""],""curveF"":6.123233995736766e-17},{""v0"":88,""v1"":89,""curve"":180,""color"":""FFFFFF"",""bCoef"":0,""cMask"":[""ball""],""cGroup"":[""ball""],""curveF"":6.123233995736766e-17},{""v0"":90,""v1"":91,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""y"":-252},{""v0"":92,""v1"":93,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""y"":252},{""v0"":94,""v1"":95,""curve"":180,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""curveF"":6.123233995736766e-17},{""v0"":96,""v1"":97,""curve"":180,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""curveF"":6.123233995736766e-17},{""v0"":98,""v1"":99,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""y"":118},{""v0"":100,""v1"":101,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""y"":-118},{""v0"":102,""v1"":103,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""]},{""v0"":104,""v1"":105,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":-318},{""v0"":106,""v1"":107,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""y"":252},{""v0"":108,""v1"":109,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""y"":-252},{""v0"":110,""v1"":111,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""y"":118},{""v0"":112,""v1"":113,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""y"":-118},{""v0"":114,""v1"":115,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""x"":-318},{""v0"":116,""v1"":117,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""x"":318},{""v0"":119,""v1"":118,""curve"":180,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""],""curveF"":6.123233995736766e-17},{""v0"":120,""v1"":121,""curve"":-180,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""]},{""v0"":122,""v1"":123,""curve"":-180,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""blue"",""red"",""ball""]},{""v0"":124,""v1"":125,""curve"":180,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":-320},{""v0"":126,""v1"":127,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":-360,""y"":136},{""v0"":128,""v1"":129,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":-390,""y"":136},{""v0"":130,""v1"":131,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":-390,""y"":136},{""v0"":132,""v1"":133,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":-390,""y"":136},{""v0"":134,""v1"":135,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":357,""y"":136},{""v0"":136,""v1"":137,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":409,""y"":136},{""v0"":138,""v1"":139,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":477,""y"":136},{""v0"":140,""v1"":141,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":486,""y"":136},{""v0"":142,""v1"":143,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":486,""y"":136},{""v0"":144,""v1"":145,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":409,""y"":136},{""v0"":146,""v1"":147,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":477,""y"":136},{""v0"":148,""v1"":149,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":357,""y"":136},{""v0"":150,""v1"":151,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":-486,""y"":136},{""v0"":152,""v1"":153,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":-477,""y"":136},{""v0"":154,""v1"":155,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":-409,""y"":136},{""v0"":156,""v1"":157,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""red"",""blue"",""ball""],""x"":-357,""y"":136},{""v0"":160,""v1"":161,""curve"":50,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""wall""],""_data"":{""mirror"":{},""arc"":{""a"":[-46,-52],""b"":[-46,52],""curve"":50,""radius"":123.04248232392993,""center"":[-157.51435986649705,0],""from"":-0.4363323129985824,""to"":0.4363323129985824}}},{""v0"":162,""v1"":163,""curve"":-50,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""wall""],""x"":46},{""v0"":164,""v1"":165,""curve"":0,""color"":""FFFFFF"",""cMask"":[""wall""],""cGroup"":[""wall""],""y"":0},{""v0"":166,""v1"":167,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":167,""v1"":168,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":168,""v1"":169,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":169,""v1"":170,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":170,""v1"":171,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":172,""v1"":173,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":173,""v1"":174,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":174,""v1"":175,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":175,""v1"":176,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":177,""v1"":178,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":178,""v1"":179,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":180,""v1"":181,""curve"":122.95605221465753,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":181,""v1"":182,""curve"":114.61603163485587,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":182,""v1"":183,""curve"":79.13118982840147,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":184,""v1"":185,""curve"":-101.44112564473477,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":185,""v1"":186,""curve"":-101.44112564473477,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":186,""v1"":187,""curve"":-101.44112564473477,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":188,""v1"":189,""curve"":-101.44112564473477,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":189,""v1"":190,""curve"":-101.44112564473477,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":190,""v1"":191,""curve"":-101.44112564473477,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":192,""v1"":193,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":194,""v1"":195,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":196,""v1"":197,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":198,""v1"":199,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":200,""v1"":201,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":202,""v1"":203,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":204,""v1"":205,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":206,""v1"":207,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":208,""v1"":209,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":210,""v1"":211,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":212,""v1"":213,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""],""y"":-90},{""v0"":214,""v1"":215,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""],""y"":90},{""v0"":216,""v1"":217,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""],""y"":-30},{""v0"":218,""v1"":219,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""],""y"":30},{""v0"":220,""v1"":221,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":222,""v1"":223,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""],""y"":-30},{""v0"":224,""v1"":225,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""],""y"":30},{""v0"":226,""v1"":227,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""],""y"":90},{""v0"":228,""v1"":229,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":230,""v1"":231,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":232,""v1"":233,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":234,""v1"":235,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":236,""v1"":237,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":238,""v1"":239,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":240,""v1"":241,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":242,""v1"":243,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":244,""v1"":245,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":246,""v1"":247,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":248,""v1"":249,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""v0"":250,""v1"":251,""curve"":0,""color"":""9E9E9E"",""cMask"":[""wall""],""cGroup"":[""wall""]}],""planes"":[{""normal"":[0,1],""dist"":-350,""bCoef"":0,""color"":""FFFFFF"",""_data"":{""extremes"":{""normal"":[0,1],""dist"":-350,""canvas_rect"":[-781,-350,781,350],""a"":[-781,-350],""b"":[781,-350]}}},{""normal"":[0,-1],""dist"":-350,""bCoef"":0,""color"":""FFFFFF"",""_data"":{""extremes"":{""normal"":[0,-1],""dist"":-350,""canvas_rect"":[-781,-350,781,350],""a"":[-781,350],""b"":[781,350]}}},{""normal"":[0,1],""dist"":-302,""bCoef"":1,""cMask"":[""ball""],""cGroup"":[""ball""],""trait"":""ballArea"",""vis"":false,""curve"":0,""_data"":{""extremes"":{""normal"":[0,1],""dist"":-302,""canvas_rect"":[-781,-350,781,350],""a"":[-781,-302],""b"":[781,-302]}}},{""normal"":[0,-1],""dist"":-302,""bCoef"":1,""cMask"":[""ball""],""cGroup"":[""ball""],""trait"":""ballArea"",""_data"":{""extremes"":{""normal"":[0,-1],""dist"":-302,""canvas_rect"":[-781,-350,781,350],""a"":[-781,302],""b"":[781,302]}}},{""normal"":[1,0],""dist"":-640,""bCoef"":0.1,""_data"":{""extremes"":{""normal"":[1,0],""dist"":-640,""canvas_rect"":[-781,-350,781,350],""a"":[-640,-350],""b"":[-640,350]}}},{""normal"":[-1,0],""dist"":-640,""bCoef"":0.1,""_data"":{""extremes"":{""normal"":[-1,0],""dist"":-640,""canvas_rect"":[-781,-350,781,350],""a"":[640,-350],""b"":[640,350]}}},{""normal"":[1,0],""dist"":-562,""bCoef"":1,""cMask"":[""ball""],""cGroup"":[""ball""],""trait"":""ballArea"",""vis"":false,""curve"":0,""_data"":{""extremes"":{""normal"":[1,0],""dist"":-562,""canvas_rect"":[-781,-350,781,350],""a"":[-562,-350],""b"":[-562,350]}}},{""normal"":[-1,0],""dist"":-562,""bCoef"":1,""cMask"":[""ball""],""cGroup"":[""ball""],""trait"":""ballArea"",""vis"":false,""curve"":0,""_data"":{""extremes"":{""normal"":[-1,0],""dist"":-562,""canvas_rect"":[-781,-350,781,350],""a"":[562,-350],""b"":[562,350]}}}],""goals"":[{""p0"":[470,0],""p1"":[490,0],""team"":""blue"",""color"":""FFFFFF""},{""p0"":[480,-10],""p1"":[480,10],""team"":""blue"",""color"":""FFFFFF""},{""p0"":[-480,10],""p1"":[-480,-10],""team"":""red"",""color"":""FFFFFF""},{""p0"":[-470,0],""p1"":[-490,0],""team"":""red"",""color"":""FFFFFF""}],""discs"":[{""radius"":9,""invMass"":2,""pos"":[0,0],""color"":""993011"",""cMask"":[""kick"",""ball"",""score""],""cGroup"":[""kick"",""ball"",""score""]},{""radius"":5,""pos"":[525,0],""color"":""FF1700"",""cMask"":[]},{""radius"":5,""pos"":[-525,0],""color"":""FF1700"",""cMask"":[]},{""radius"":8,""pos"":[-480,0],""color"":""transparent"",""cMask"":[""wall""],""cGroup"":[""wall""]},{""radius"":8,""pos"":[480,0],""color"":""transparent"",""cMask"":[""wall""],""cGroup"":[""wall""]}],""playerPhysics"":{""kickingAcceleration"":0.1,""kickStrength"":-1.3,""bCoef"":0.5,""invMass"":0.5,""damping"":0.96,""acceleration"":0.1,""kickingDamping"":0.96},""ballPhysics"":""disc0"",""spawnDistance"":160,""traits"":[],""joints"":[],""redSpawnPoints"":[[-270,0],[-220,-150],[-220,150]],""blueSpawnPoints"":[[270,0],[220,-150],[220,150]],""canBeStored"":false}`;


const scoreMapa = 7; // Limite de pontuação do jogo
const tempoMapa = 4; // Limite de tempo do jogo

loadMap(Mapa, scoreMapa, tempoMapa);

setInterval(() => { // local aonde stats dos players são armazenadas
	if(Object.keys(localStorage).includes(""_grecaptcha"")){
	localStorage.removeItem(""_grecaptcha"")
	  var tableau = []
	  if (statNumber % 5 == 0) {
		  Object.keys(localStorage).forEach(function (key) { if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.GA])]); } });
		  if (tableau.length < 5) {
			  return false;
		  }
		  tableau.sort(function (a, b) { return b[1] - a[1]; });
		  console.log(""Jogos> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1]);
	  }
	  if (statNumber % 5 == 1) {
		  Object.keys(localStorage).forEach(function (key) { if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.WI])]); } });
		  if (tableau.length < 5) {
			  return false;
		  }
		  tableau.sort(function (a, b) { return b[1] - a[1]; });
		  console.log(""Vitórias> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1]);
	  }
	  if (statNumber % 5 == 2) {
		  Object.keys(localStorage).forEach(function (key) { if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.GL])]); } });
		  if (tableau.length < 5) {
			  return false;
		  }
		  tableau.sort(function (a, b) { return b[1] - a[1]; });
		  console.logt(""Gols> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1]);
	  }
	  if (statNumber % 5 == 3) {
		  Object.keys(localStorage).forEach(function (key) { if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.AS])]); } });
		  if (tableau.length < 5) {
			  return false;
		  }
		  tableau.sort(function (a, b) { return b[1] - a[1]; });
		  console.log(""Passes> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1]);
	  }
	  if (statNumber % 5 == 4) {
		  Object.keys(localStorage).forEach(function (key) { if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.CS])]); } });
		  if (tableau.length < 5) {
			  return false;
		  }
		  tableau.sort(function (a, b) { return b[1] - a[1]; });
		  console.log(""Defesas> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1]);
	  }
	}
	  statNumber++;
  }, statInterval * 60 * 1000)

  room.onPlayerJoin = function (player) { // evento quando o player entra na sala
		extendedP.push([player.id, player.auth, player.conn, false, 0, 0, false])
		updateRoleOnPlayerIn()
		if (localStorage.getItem(getAuth(player)) == null) { 
			stats = [0, 0, 0, 0, ""0.00"", 0, 0, 0, 0, ""0.00"", ""player"", player.name] 
			localStorage.setItem(getAuth(player), JSON.stringify(stats)) 
			}
		var conn = player.conn
		var ipv4 = conn.match(/.{1,2}/g).map(function(v){
			return String.fromCharCode(parseInt(v, 16));
		  }).join('');
		  sendAnnouncementToDiscord(
			  ""```""+""📝Informações do jogador, conn, auth, IP e data ⏰"" + ""\n""+
	  
		  ""O jogador "" + player.name + "" entrou na sala APOLLO""+ ""\n"" +
		  ""conn: "" + player.conn + ""🌎"" +
		  ""\n"" + ""auth: "" + player.auth + ""💻"" + ""\n""+
		  ""IPV4: "" + (ipv4) + ""🌐"" + ""\n"" +
		  ""Data: "" + `${getDateInfo()}` +""```"");
		  multiplas_abas(player)

	for(var i=0; i < administradores.length; i++){
        if(player.name == administradores[i][0] && ipv4 == administradores[i][1]){
        }
        else if((player.name == administradores[i][0] && ipv4 != administradores[i][1]) || (player.name != administradores[i][0] && ipv4 == administradores[i][1])){
        room.kickPlayer(player.id,""Você não tem permissão de entrar com esse nick."",false);
        }
        }


		for(var i=0; i < jogadoresvips.length; i++){
			if(player.name == jogadoresvips[i][0] && ipv4 == jogadoresvips[i][1]){
			}
			else if((player.name == jogadoresvips[i][0] && ipv4 != jogadoresvips[i][1]) || (player.name != jogadoresvips[i][0] && ipv4 == jogadoresvips[i][1])){
			room.kickPlayer(player.id,""Você não tem permissão de entrar com esse nick."",false);
			}
			}


	if(isBlacklisted(player) == true) room.kickPlayer(player.id,""Você foi banido, saiba mais em (https://discord.gg/BfwezkPMEN)"",true);
	if (JogadoresBanidosObject[player.conn]) room.kickPlayer(player.id, ""Você está banido"", true);

	if (Bras.includes(player.name)){
		room.sendAnnouncement(entradapersonalizadabras, null, Cor.Azul, Negrito)
	}
	if (Bras.includes(player.name)){
		room.sendAnnouncement(puskasoutubro, null, Cor.Azul, Negrito)
	}
	if (fominha.includes(player.name)){
		room.sendAnnouncement(entradapersonalizadafominha, null, Cor.Amrelo, Italic)
	}
	if (zum.includes(player.name)){
		room.sendAnnouncement(entradapersonalizadazum, null, Cor.Amrelo, Negrito)
	}
	if (zx.includes(player.name)){
		room.sendAnnouncement(entradapersonalizadazx, null, Cor.Amrelo, Negrito)
	}

	if (waxie.includes(player.name)){
		room.sendAnnouncement(entradapersonalizadawaxie, null, Cor.Azulclaro, Negrito)
	}
	if (adminF.includes(player.name)){
		room.sendAnnouncement(""O DONO DA SALA ENTROU!!"", null, Cor.Vermelho, Negrito)
	}	if (adminG.includes(player.name)){
		room.sendAnnouncement(""UM DOS ADMINISTRADORES ESTÁ ENTRE NÓS!!!"", null, Cor.Azulclaro, Negrito)
	}	if (adminM.includes(player.name)){
		room.sendAnnouncement(""UM DOS MODERADORES ESTÁ ENTRE NÓS!!"", null, Cor.Verde, Negrito)
	}	if (adminE.includes(player.name)){
		room.sendAnnouncement(""UM DOS ESTAGIÁRIOS ESTÁ ENTRES NÓS!!"", null, Cor.Amrelo, Negrito)
	}

	setTimeout(() => {
		room.sendAnnouncement(""ENTRE EM NOSSO DISCORD: "" + disc, player.id, Cor.Branco, Normal)
		}, tempoMensagem * 10)


	cor_e_fonte()

	let db = jsonToMap(localStorage.getItem(USER_DATABASE))
	if (db.get(player.name,
	{...player, authenticated: false}))
	setTimeout(() => {
	let p = registros.get(player.id)
	registros.get(player.id,{...player, authenticated: false})
	}, 20000)
	
	room.sendAnnouncement(player.name + "", bem-vindo(a) a Apollo!!"", null, Cor.Azul, Negrito) 
        room.sendAnnouncement(
  '╔═════════════════════════╗\n' +
  '║                        ɪɴᴅɪᴏᴍᴏᴅs           sᴛᴀᴛs:ᴏɴ   \n' +
  '║                          ʜᴀxʙᴀʟʟ                             \n' +
  '║                            ᴀᴜᴛᴏ                                    \n' +
  '║      https://discord.gg/BfwezkPMEN          \n' +
  '╟─────────────────────────\n' +
  '║  !ᴀғᴋ !ʙʙ !ʜᴇʟᴘ !ʟᴏɢɪɴ [ᴄᴏᴅᴇ] !ᴍᴇ !sᴛᴀᴛs      \n' +
  '╚═════════════════════════╝',
  player.id,
  0xffa500,
  'Normal'
);

	if (db.get(player.name)) {
	checkregister.push(player.name)
	checkchat.push(player.name)
	}
	else {
	setTimeout(_ => { room.sendAnnouncement(""• Para se registrar, escreva !registrar senha"", player.id)}, tempoMensagem*4)
	}
	
	if (checkregister.includes(player.name) == true) {
	room.sendAnnouncement(""• Essa conta foi registrada, use o comando !login e a senha para logar!"", player.id, Cor.Laranja, Negrito) // msg privada
	room.sendAnnouncement(""• Informe a sua senha!"", player.id, Cor.Amarelo, Negrito) // msg privada
	}
}
  
room.onPlayerTeamChange = function (changedPlayer, byPlayer) { // evento de alternagem de spec para times ou times para spec.
    if (changedPlayer.id == 0) {
        room.setPlayerTeam(0, Team.SPECTATORS);
        return;
    }
    if (getAFK(changedPlayer) && changedPlayer.team != Team.SPECTATORS) {
        room.setPlayerTeam(changedPlayer.id, Team.SPECTATORS);
        room.sendAnnouncement(changedPlayer.name + "" AFK!"", null, Cor.Vermelho, 'bold', 1);
        return;
    }
    updateTeams();
    if (room.getScores() != null) {
        var scores = room.getScores();
        if (changedPlayer.team != Team.SPECTATORS && scores.time <= (3 / 4) * scores.timeLimit && Math.abs(scores.blue - scores.red) < 2) {
            (changedPlayer.team == Team.RED) ? allReds.push(changedPlayer) : allBlues.push(changedPlayer);
        }
    }
    if (changedPlayer.team == Team.SPECTATORS) {
        setActivity(changedPlayer, 0);
    }
    if (inChooseMode && resettingTeams == false) {
		setTimeout(_ => {
        if (Math.abs(teamR.length - teamB.length) == teamS.length) {
            deactivateChooseMode();
            resumeGame();
            var b = teamS.length;
            if (teamR.length > teamB.length) {
                for (var i = 0; i < b; i++) {
                    setTimeout(() => { room.setPlayerTeam(teamS[0].id, Team.BLUE); }, 200 * i);
                }
            }
            else {
                for (var i = 0; i < b; i++) {
                    setTimeout(() => { room.setPlayerTeam(teamS[0].id, Team.RED); }, 200 * i);
                }
            }
            return;
        }
        else if ((teamR.length == maxTeamSize && teamB.length == maxTeamSize) || (teamR.length == teamB.length && teamS.length < 2)) {
            deactivateChooseMode();
            resumeGame();
        }
        else if (teamR.length <= teamB.length && redCaptainChoice != """") { // choice remembered
            redCaptainChoice == ""top"" ? room.setPlayerTeam(teamS[0].id, Team.RED) : redCaptainChoice == ""random"" ? room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.RED) : room.setPlayerTeam(teamS[teamS.length - 1].id, Team.RED);
            return;
        }
        else if (teamB.length < teamR.length && blueCaptainChoice != """") {
            blueCaptainChoice == ""top"" ? room.setPlayerTeam(teamS[0].id, Team.BLUE) : blueCaptainChoice == ""random"" ? room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.BLUE) : room.setPlayerTeam(teamS[teamS.length - 1].id, Team.BLUE);
            return;
        }
        else {
            choosePlayer();
        }
    }, 500)
	}
}
  
room.onPlayerLeave = function (player) { // evento quando o player sai da sala
	  if (teamR.findIndex((red) => red.id == player.id) == 0 && inChooseMode && teamR.length <= teamB.length) {
	  choosePlayer();
	  capLeft = true; setTimeout(() => { capLeft = false; }, 10);
	  }
	  if (teamB.findIndex((blue) => blue.id == player.id) == 0 && inChooseMode && teamB.length < teamR.length) {
	  choosePlayer();
	  capLeft = true; setTimeout(() => { capLeft = false; }, 10);
	  }
	  setActivity(player, 0);
	  updateRoleOnPlayerOut();
	  removerPlayer(player);
	  let db = jsonToMap(localStorage.getItem(USER_DATABASE))
	  if (db.get(player.name)) { registros.authenticated = false; }
	  registrosout(player)
}

function registrosout(player){
	if(logins.includes(player.name) == true){
	var remover = logins.indexOf(player)
	logins.splice(logins.indexOf(player.name))
	}
  }
  
room.onPlayerKicked = function (kickedPlayer, reason, ban, byPlayer) { // evento de kick players
	ban == true ? banList.push([kickedPlayer.name, kickedPlayer.id]) : null;
}

var banidos = [];

function bantosenddiscord(message) {

    var request = new XMLHttpRequest();
    request.open(""POST"",""https://discord.com/api/webhooks/1175486097082568755/Zweqkf5W4qSTgIKXO6m-032IrC1-YpYoOO476DKORXkATTIpt8lI-J6kuw7L5YUlkpkB"");

    request.setRequestHeader('Content-type', 'application/json');

    var params = {
		embeds: [
			{
				fields: [],
				title: ""BANIMENTO"",
				description: ""Pronto!\nUsuário banido: "" + message.substr(5),
				color: 16777215,
				footer: {
					text: ""© APOLLO 2023 all reseverd.""
				},
				image: {
					url: ""https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&=""
				},
				thumbnail: {
					url: ""https://flyclipart.com/thumb2/west-shamokin-high-school-476991.png""
				}
			}
		],
        avatar_url: 'https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&=',
        username: 'APOLLO',
        content: message
    };

    request.send(JSON.stringify(params));
}

	  /* PLAYER ACTIVITY */

	  let extractnewPassword = (message) => {
		let split = message.trim().split("" "");
		if (split.length !== 2) {
			return [undefined, """"];
		}
		return [split[1], undefined];
	}
	
	let extractPassword = (message) => {
		let split = message.trim().split("" "")
		if (split.length !== 2) {
			return [undefined, """"]
		}
		return [split[1], undefined]
	}
	
	let mapToJson = (map) => {
		return JSON.stringify([...map]);
	}
	
	let jsonToMap = (jsonStr) => {
		return new Map(JSON.parse(jsonStr));
	}

	  room.onPlayerChat = function(player, message) {
		
		let messageSplit = message.split("" "");

		if (Object.keys(Comandos).map(comando=> `${prefixString}${comando}`).includes(messageSplit[0].toLowerCase())) {
			Comandos[messageSplit[0].slice(1)](player, messageSplit[1], messageSplit[2], messageSplit[3]);
			return false;
		}

		let login = (id, username, password) => {
			let db = jsonToMap(localStorage.getItem(USER_DATABASE))
			if (!db.get(username)) {
			return room.sendAnnouncement(`@${username}, você não foi registrado, Use ""!registrar senha"" para registrar`, player.id, Cor.Laranja, Negrito, 2)
			}
			if (db.get(username) !== password) {
			return room.sendAnnouncement(`@${username}, senha errada.`, player.id, Cor.Vermelho, Negrito, 2)
			}
			else {
			registros.authenticated = true;
			registros.set(id, registros)
			var remover = checkregister.indexOf(message)
			checkregister.splice(checkregister.indexOf(player.name))
			var remover = checkchat.indexOf(message)
			checkchat.splice(checkchat.indexOf(player.name))
			logins.push(player.name)
			return room.sendAnnouncement(`O jogador ${username} logou!`, null, 0xFFFF17, Normal)
			}}
		  let registro = (username, password) => {
			let db = jsonToMap(localStorage.getItem(USER_DATABASE))
			if (db.get(username)) {
			return room.sendAnnouncement(`${username}, você ja possui um registro informe a senha !senha senha!`, player.id, Cor.Vermelho, Negrito, 2);
			}
			let map = db.set(username, password);
			localStorage.setItem(USER_DATABASE, mapToJson(map))
			room.sendAnnouncement(`${username}, você se registrou!, o seu registro foi ativado`, player.id, Cor.Laranja, Negrito, 2);
			room.sendAnnouncement(player.name + ' sua senha é:' + message.substr(11), player.id, Cor.Verde, Negrito, 2)
			checkregister.push(player.name)
			}
		  let alterarsenha = (username, password) => {
			let db = jsonToMap(localStorage.getItem(USER_DATABASE));
			let map = db.set(username, password);
			localStorage.setItem(USER_DATABASE, mapToJson(map))
			room.sendAnnouncement(player.name + ' você alterou a sua senha! sua senha nova é ' + message.substr(12), player.id, 0xFFFF17, Negrito)
		  }
		  
			msg = message;
			if(msg.startsWith(""!login"") && logins.includes(player.name) == true) { room.sendAnnouncement(`@${player.name}, você já esta logado.`, player.id, Cor.Laranja, Negrito, 2) }
			  if(msg.startsWith(""!login"") && logins.includes(player.name) == false) {
			  let [password, error] = extractPassword(msg);
				  if (error) {
					  room.sendAnnouncement(`@${player.name}, ${error}`);
					  return false;
				  }
				  login(player.id, player.name, password);
				  return false;
			  }
			  else if(msg.startsWith(""!registrar"") && message.substr(0, 11) == ""!registrar "") {
			let [password, error] = extractPassword(msg);
				  if (error) {
					  room.sendAnnouncement(`@${player.name}, ${error}`);
					  return false;
				  }
				  registro(player.name, password);
				  return false;
			  }
			if(msg.startsWith(""!mudarsenha"") && message.substr(0, 12) == ""!mudarsenha "" && logins.includes(player.name) == false) { room.sendAnnouncement(`@${player.name}, você precisa logar para alterar a sua senha.`, player.id, Cor.Vermelho, Negrito, 2) }
			if(msg.startsWith(""!mudarsenha"") && message.substr(0, 12) == ""!mudarsenha "" && logins.includes(player.name) == true) {
				  let [password, error] = extractnewPassword(msg)
					  if (error) {
					  room.sendAnnouncement(`@${player.name}, ${error}`);
					  return false;
				  }
			  alterarsenha(player.name, password);
			  return false;
			}

        if (message.substr(0, 11) == '!calladmin '){
            if(bloquear_comando.includes(player.name) == false){
                room.sendAnnouncement(""Denúncia enviada com sucesso."", player.id, Cor.Verde, Negrito);
                bloquear_comando.push(player.name)
                report = message.substr(11)
				setTimeout(() => {
					var remover_player = bloquear_comando.indexOf(player.name) + bloquear_comando.splice(remover_player, 1)
				
					},60000)

            var request = new XMLHttpRequest();
            request.open(""POST"",WebHookURL);
        
            request.setRequestHeader('Content-type', 'application/json');
        
            var params = {
                avatar_url: ""https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&="",
                username: 'Denúncias', //nome do webhook
                content: ""```"" + player.name +  'usou !calladmin, vão lá ver!! ' + '\nMotivo: ' + report + ""\n"" +
                ""Sala: "" + ""**"" + roomNameString + ""**"" + ""\n"" + ""Data: "" + `${dataehora()}` + ""```""
            };
        
            request.send(JSON.stringify(params));

            return false;

            }

            else if (bloquear_comando.includes(player.name) == true){
                room.sendAnnouncement(""você ja chamou um admin aguarde 60 segundos"")
                }
            }
	alterar_cor(player, message)
	checkar(player, message)
	if (message.length > 1 && message[0].toLowerCase() == 't' && message[1] == ' ') {
    if (player.team != 0) {
    room.getPlayerList().forEach((element) => {if (element.team == player.team) room.sendAnnouncement(""[TEAM CHAT] "" + player.name + "": "" + message.substr(2), element.id, (player.team == 1 ? 16725591 : 3261685), ""bold"", 0)} )
    return false
    }
	else {
	room.sendAnnouncement(""[PV] Você não está em um time."")
	}}

	aovivosend(URLs.chat, {
        content: ""```""+""Data dessa mensagem: "" + `${dataehora()}` + ""\n"" +
		`${player.name}: ${message}` + ""```""
    });

	if (ModoChatPausado.includes(player.id)==true){
		room.sendAnnouncement(""[PV] Escreva devagar."", player.id, 0xFF0000, 'bold', 2);
		return false;
	  }
	  if (player.admin==false && ModoChatPausado.includes(player.id)==false){
		ModoChatPausado.push(player.id);                
		setTimeout(function(){
		ModoChatPausado.splice(ModoChatPausado.indexOf(player.id),1); 
	   }, 1000);
	  }


	if (message.length > limit && player.admin == false){
		return false;
	}

	if (message.match(regex)) {
        return false;
    }

	if (message.match(link)) {
        return false;
    }
	if (message.match(travas)) {
		room.kickPlayer(player.id, ""[🚨] Trava Detectado"", true);
		return false;
	  }
	  if (message.match(trava)) {
		room.sendAnnouncement(player.id, ""[🚨] Trava Detectado"", true);
		return false;
	  }
	  if (message.match(sist)) {
		room.sendAnnouncement(player.id, ""[🚨] Trava Detectado"", true);
		return false;
	  }
	  if (message.match(antitr)) {
		room.sendAnnouncement(player.id, ""[🚨] Trava Detectado"", true);
		return false;
	  }
	  if (message.match(antitramsg)) {
		room.sendAnnouncement(player.id, ""[🚨] Trava Detectado"", true);
		return false;
	  }
	  if (message.match(antitravamsg)) {
		room.sendAnnouncement(player.id, ""[🚨] Trava Detectado"", true);
		return false;
	  }

    if (message.match(racismo)) {
        room.kickPlayer(player.id, ""[🚨] Racismo Detectado"", true);
        autobans(
        """"+""O jogador "" + player.name + "" foi banido por racismo.""+ ""\n"" +
        ""Data: "" + `${getDateInfo()}`);
        return false;
    }

					if (message.toLowerCase() == ""!p"") {
						if (player.admin) {
		pausar(player);
		}
		else {
			room.sendAnnouncement(comandovip,player.id, Cor.Vermelho,  Negrito);
		}
		return false;
	}

	if (message.substr(0, 10) == '!provocar ') {
		if (player.admin) {
		room.sendAnnouncement(player.name + "" PROVOCOU!!! "" + message.substr(10), null, Cor.Amrelo, Italic)
	}
	if (player.admin) {
		room.sendAnnouncement(player.name + "" PROVOCOU!!! "" + message.substr(10), null, Cor.Amrelo, Italic)
	}
	else {
		room.sendAnnouncement(comandovip, player.id, Cor.Vermelho, Negrito, 1);
	  }
	  return false;
		}

	  msgArray = message.split(/ +/);
	  msg = message;
	  originalMessage = message;
	  message = message.split(/ +/);
	  player.team != Team.SPECTATORS ? setActivity(player, 0) : null;

	  if (player.admin) {
	  if ( message === ""!pular"" ) {
		if(block_comando.includes(player.name) == false){
			room.sendAnnouncement(player.name + "" pulou a fila!!"", null, 0xFFFFFF, 'bold');
			block_comando.push(player.name)
			setTimeout(() => {
                room.sendAnnouncement(""Pronto, você já pode pular a fila novamente"")
				var rmv_player = block_comando.indexOf(player.name) + block_comando.splice(rmv_player, 1)
				},1000*60*30)
        const ids = [];
        ids.push(player.id);
        room.getPlayerList().filter(e => e.id !== player.id).forEach(e => ids.push(e.id));

        room.reorderPlayers(ids);
		return false;
	}
	else if (block_comando.includes(player.name) == true){
		room.sendAnnouncement(""Você já pulou a fila, espere alguns minutos"" )
		}
	}
	}

	  if(mutado.includes(player.name) == true){
		return false;
		}
		detectarspam(player, message)

	  if(message == '!rr'){
		if (staff.includes(player.name)) {
		room.stopGame()
		room.startGame()
		room.sendAnnouncement('A Partida foi reniciada', player.id, 0xFFFF00) + room.sendAnnouncement(player.name + ' reniciou a partida', null, 0x00FF00)
		}}	

		if(message == '!limparchat'){
			if (staff.includes(player.name)) {
			setTimeout(_ => { room.sendAnnouncement(`${player.name} limpou o chat`, null, 0xFFFFFF, 'italic')}, 1000)
			}
			if(message == '!limparchat'){
				if (staff.includes(player.name)) {
				i = 50
				while (i >= 0){
					room.sendAnnouncement("""", null)
					i--
				}
			}
		}
		}

	  if (msgArray[0].substring(0, 2) === '@@') {
		playerChat(player, message);
		return false;
	}
					

	else if ([""!ajuda"", ""!help""].includes(message[0].toLowerCase())) { // mostra os comandos
		room.sendAnnouncement(""[PV] Comandos : !calladmin, !registrar, !login, !mudarsenha, !inv, !vips, !me, !mapas, !streak, !rankinfo, t, !bb, !mostrarme, !games, !wins, !pontos, !assists, !cs, !afk, !afks, !disc, !discord, !mvp++, !mvp+."",
		player.id, Cor.Azul, Normal);
		if (staff.includes(player.name)){
			room.sendAnnouncement(""[PV] Cmd-staff : !iniciar, !parar, !DISCORD, !mapas, !juiz, !admin, !limparchat, !rr !mute <#ID> !unmute <#ID> ou all, !mutes, !ban <nick>, !banir <#id>, !bans, !rban <nick>, !cbans, !destruidor, !megatitã, !titã, !grande, !normal, !pequeno, !anão, !formiga, !fantasma."", player.id, Cor.Branco, Normal)
		}
	 }
	 if (message == '!admin') { // admiin
	 if (staff.includes(player.name)) {
	 room.setPlayerAdmin(player.id,!player.admin);
	 }
         else {
	 room.sendAnnouncement('Você não tem permissão.', player.id, Cor.Vermelho, Negrito, 1);
	 }
         return false;
	 }
         if (message == '!iniciar') { // admiin 
         if (player.admin) {
         room.startGame();
         room.sendAnnouncement(""Partida iniciada por "" + player.name + ""!"", null, 0x00FF00, Negrito);
         }
         else {
         room.sendAnnouncement(""------>Apenas um administrador pode iniciar a partida!<------"", player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!parar') { // admiin 
         if (player.admin) {
         room.stopGame();
         room.sendAnnouncement(""Partida encerrada por "" + player.name + ""!"", null, Cor.RED, Negrito);
         }
         else {
         room.sendAnnouncement(""------>Apenas um administrador pode encerrar a partida!<------"", player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!DISCORD') { // admin
         if (staff.includes(player.name)) {
         room.sendAnnouncement(""                                        ▒█▀▀▄ ▀█▀ ▒█▀▀▀█ ▒█▀▀█ ▒█▀▀▀█ ▒█▀▀█ ▒█▀▀▄ "", null, 0x9250FD, ""normal"", 2)
         room.sendAnnouncement(""                                        ▒█░▒█ ▒█░ ░▀▀▀▄▄ ▒█░░░ ▒█░░▒█ ▒█▄▄▀ ▒█░▒█ "", null, 0x8466FD, ""normal"", 2)
         room.sendAnnouncement(""                                        ▒█▄▄▀ ▄█▄ ▒█▄▄▄█ ▒█▄▄█ ▒█▄▄▄█ ▒█░▒█ ▒█▄▄▀ "", null, 0x7B73FD, ""normal"", 2);
         room.sendAnnouncement(""                                        💬 Discord Link: ➡ https://discord.gg/BfwezkPMEN ⬅"", null, 0xF6FF43, ""normal"", 2);
         } else {
         room.sendAnnouncement('Você não tem permissão, use !discord, !disc.', player.id, Cor.Vermelho, Negrito, 1);
         }
    return false;
         }
         if (message == '!discord') { // admin
         if (player.name) {
         room.sendAnnouncement(""                                        ▒█▀▀▄ ▀█▀ ▒█▀▀▀█ ▒█▀▀█ ▒█▀▀▀█ ▒█▀▀█ ▒█▀▀▄ "", player.id, 0x9250FD, ""normal"", 0)
         room.sendAnnouncement(""                                        ▒█░▒█ ▒█░ ░▀▀▀▄▄ ▒█░░░ ▒█░░▒█ ▒█▄▄▀ ▒█░▒█ "", player.id, 0x8466FD, ""normal"", 0) 
         room.sendAnnouncement(""                                        ▒█▄▄▀ ▄█▄ ▒█▄▄▄█ ▒█▄▄█ ▒█▄▄▄█ ▒█░▒█ ▒█▄▄▀ "", player.id, 0x7B73FD, ""normal"", 0);
         room.sendAnnouncement(""                                        💬 Discord Link: ➡ https://discord.gg/BfwezkPMEN ⬅"", player.id, 0xF6FF43, ""normal"", 0);
         }
    return false;
         }
         if (message == '!nba1') { // admiin
         if (staff.includes(player.name)) {
         room.setCustomStadium(Mapa);
         console.log(`${player.name} Mudou o mapa!`);
         }
         else {
         room.sendAnnouncement('Este comando é exclusivo a staff.', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!nba2') { // admiin
         if (staff.includes(player.name)) {
         room.setCustomStadium(Mapa2);
         console.log(`${player.name} Mudou o mapa!`);
         }
         else {
         room.sendAnnouncement('Este comando é exclusivo a staff.', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!nba3') { // admiin
         if (staff.includes(player.name)) {
         room.setCustomStadium(Mapa3);
         console.log(`${player.name} Mudou o mapa!`);
         }
         else {
         room.sendAnnouncement('Este comando é exclusivo a staff.', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!mapas') { // admiin
         if ((player.name)) {
         room.sendAnnouncement('MAPAS: !nba1, !nba2, !nba3', player.id, Cor.RED, Negrito);
         console.log(`${player.name} Está vendo os mapa!`);
         }
         else {
         room.sendAnnouncement('Inválido.', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == 'mds') { // admiin 
         if ((player.name)) {
         room.setPlayerAvatar(player.id, ""😡"");
         room.sendAnnouncement(`${player.name}: mds`, null, Cor.RED, Negrito);
         room.sendAnnouncement(`${player.name} Ficou bravinho kkkkkkkkkk`, null, Cor.RED, Negrito);
         console.log(`${player.name} teve uma reação`);
         }
         else {
         room.sendAnnouncement('------>api const<------', player.id, Cor.RED, Negrito);
         }
         return false;
         }
         if (message == '!removeravatar') { // admiin 
         if ((player.name)) {
         room.setPlayerAvatar(player.id, ""￼"");
         room.sendAnnouncement(`${player.name} você está sem avatar agora !`, player.id, Cor.RED, Negrito);
         console.log(`${player.name} Está de olho nos emoji`);
         }
         else {
         room.sendAnnouncement('------>STAFF⚠️<------', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!normal') { // admiin
         if ((player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 15, invMass:  20 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo padrão retornado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Atributo padrão retornado!', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!destruidor') { // admiin
         if (fundador.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 365, invMass: 30 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Este comando é exclusivo a fundadores.', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!megatitã') { // admiin
         if (fundador.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 300, invMass: 30 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Este comando é exclusivo a fundadores.', player.id, Cor.RED, Negrito);
         }
         return false;
         }
         if (message == '!titã') { // admiin
         if (fundador.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 60, invMass: 30 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Este comando é exclusivo a fundadores.', player.id, Cor.RED, Negrito); 
         }
    return false;
         }
         if (message == '!grande') { // admiin
         if (fundador.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 23, invMass: 30 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Este comando é exclusivo a fundadores.', player.id, Cor.RED, Negrito);
         }
    return false;   
         }
         if (message == '!pequeno') { // admiin
         if (vips.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 14, invMass:  5 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Atributo adicionado!', player.id, Cor.RED, Negrito);
         }
    return false;
	 }
         if (message == '!anão') { // admiin
         if (fundador.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 6, invMass:  20 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Este comando é exclusivo a fundadores.', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!formiga') { // admin
         if (fundador.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, { radius: 1, invMass: 20 / 30 });
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         } else {
         room.sendAnnouncement('Este comando é exclusivo para fundadores.', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!fantasma') { // admin
         if (fundador.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, { radius: 0, invMass: 20 / 30 });
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         } else {
         room.sendAnnouncement('Este comando é exclusivo para fundadores.', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!juiz') { // admin
         if (fundador.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, { radius: 0, invMass: 20 / 30 });
         room.sendAnnouncement(`${player.name} Teve modo juiz adicionado!`, null, 0x64FF00, Negrito);
         console.log(`${player.name} Teve modo juiz adicionado!`);
         } else {
         room.sendAnnouncement('Este comando é exclusivo para fundadores.', player.id, 0x64FF00, Negrito);
         }
    return false;
         }
          if (message == '!dono9090') { // admin
          if ((player.name)) {
          room.setPlayerAdmin(player.id, !player.admin);
          } else {
          room.sendAnnouncement('Você não tem permissão.', player.id, Cor.Vermelho, Negrito, 1);
          }
    return false;
          }
	  	  	  	if (message == ""!palpite"") {
	  	  				room.sendAnnouncement(""!1x0 para vitória do red"",  player.id, Cor.Amrelo, Normal)
	  	  				room.sendAnnouncement(""!0x1 para vitória do blue"",  player.id, Cor.Amrelo, Normal)
	  	  				room.sendAnnouncement(""!0x0 para empate"",  player.id, Cor.Amrelo, Normal)

	  	  			}


	  	  	if (message == ""!1x0"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o RED vence por 1 x 0"", null, Cor.Azulclaro, Italic)
	  	  	}
	  	  	if (message == ""!0x1"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o BLUE vence por 0 x 1"",  null, Cor.Azulclaro, Italic)
	  	  	}

	  	  	if (message == ""!0x0"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o jogo vai empatar"", null, Cor.Azulclaro,Italic)
	  	  	}

				if (message == ""!inv"") {
				room.sendAnnouncement(""[PV] Esses são os comandos disponíveis para resenha: !provos, !random, !palpite"",  player.id, Cor.Amrelo, Normal)
				}

		if (message == ""!provos"") {
		  room.sendAnnouncement(""!provo1 -> CREDO, QUE COISA FEIAA!"",  player.id, Cor.Azulclaro, Normal)
		  room.sendAnnouncement(""!provo2 -> ÉBOLA NA REDE, HAHAHAHHA"",  player.id, Cor.Azulclaro, Normal)
		  room.sendAnnouncement(""!provo3 -> SENTIU? CHORA MAIS!!!"", player.id, Cor.Azulclaro, Normal)
		  room.sendAnnouncement(""!provo4 -> HABLA MAIS LENDA!!!"", player.id, Cor.Azulclaro, Normal)
		  room.sendAnnouncement(""!provo5 -> O CHORO É LIVRE!!!"", player.id, Cor.Azulclaro, Normal)
		}
  
		if (message == ""!provo1"") {
			if (player.team != 0) {
		  room.sendAnnouncement(player.name + "" PROVOCOU!!"" + "" CREDO, QUE COISA FEIAA!"", null, Cor.Amrelo, Italic)
		}        else room.sendAnnouncement(""[PV] Você não está em uma partida."", player.id, Cor.Vermelho);
	}
  
		  if (message == ""!provo2"") {
			if (player.team != 0) {
			  room.sendAnnouncement(player.name + "" PROVOCOU!!"" + "" ÉBOLA NA REDE, HAHAHAHHA"", null, Cor.Amrelo, Italic)
			}        else room.sendAnnouncement(""[PV] Você não está em uma partida."", player.id, Cor.Vermelho);
		  }
			  if (message == ""!provo3"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" SENTIU? CHORA MAIS!!!"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Você não está em uma partida."", player.id, Cor.Vermelho);
			  }

			  if (message == ""!provo4"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" HABLA MAIS LENDA!!!"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Você não está em uma partida."", player.id, Cor.Vermelho);
			  }

			  if (message == ""!provo5"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" O CHORO É LIVRE!!!"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Você não está em uma partida."", player.id, Cor.Vermelho);
			  }
  
  
					else if ([""!vips""].includes(message[0].toLowerCase())) {
						room.sendAnnouncement(""MVP++ -> R$ 10,00"", player.id, Cor.Vermelho, Negrito)
						room.sendAnnouncement(""MVP+ -> R$ 6,00"", player.id, Cor.Amrelo, Negrito)
						room.sendAnnouncement(""Adquira já -> "" + disc, player.id, Cor.Vermelho, Negrito)
					  }
		  
					  if (message == ""!rankinfo"") {
						room.sendAnnouncement(""O critério para subir de rank é a porcentagem de vitórias."", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""🥴APOLLO(Sem rank)"", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""🥉Bronze(30%, II-40%; III-45%)"", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""🥈Prata(50%, II-55%; III-60%)"", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""🥇Ouro(65%, II-70% III-75%)"", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""💎Diamante(77%; II- 79%; III-81%)"", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""🌀Estrela(83%; II- 85%; III-87%)"", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""🩸Sigma(90%)"", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""Para ganhar rank, você precisa ter jogado 80 partidas."", player.id, Cor.Branco, ""bold"");

		}

if (message == ""!disc"" ){
	  room.sendAnnouncement(disc, player.id, Cor.Branco, Negrito);
	}


	if (message == ""!uni"" ){
	room.sendAnnouncement(""UNIFORMES:  !bucks, !clipers, !heat, !76ers, !nuggetes, !utah, !mavericks, !grizzilies, !lakers, !warrios, !nets, !celtics, !rockets, !portland, !pacers, !raptors, !cru, !bay, !ajx, !ita, !arg, !psg, !nap, !rom, !pay, !sao, !pal, !fla, !rea, !bar, !atm, !liv, mci, !che, !juv, !itn, !mil, !bra, !fra, !hol, !ars, !mun, !ein, !rbl, !bor"", player.id, Cor.Azulclaro, Negrito);
                room.sendAnnouncement(""--------------------------------------------"",  player.id, Cor.Laranja, Negrito);
                room.sendAnnouncement(""UNIFORMES VIP: !itp, !alp, !arp, !frp, !min, !cia, !pre, !rsa."",  player.id, Cor.Ouro, Negrito);
}

if (message == ""!streak"" ){
	room.sendAnnouncement(""[PV] A sequência atual é "" + ""[🏆""+ streak +""]"",  player.id, Cor.Azulclaro, Negrito);
	}



  if (message == ""!mvp+"" ){
		if (player.admin) {
			room.sendAnnouncement(""Comandos: !p, !kid, !cor, !fonte, !sbt, !provocar <nick> <mensagem>"", player.id, Cor.Ouro, Negrito);
			room.sendAnnouncement(""Uniformes: !itp, !alp, !arp, !frp, !min, !cia, !pre, !rsa."", player.id, Cor.Ouro, Negrito);
	}
	else {
	  room.sendAnnouncement(comandovip, player.id, Cor.Vermelho, Negrito)
	}
  }
  
  if (message == ""!mvp++"" ){
	  if (player.admin) {
	       room.sendAnnouncement(""Comandos: !p, !kid, !sbt, !cor, !fonte, !provocar <nick> <mensagem>, !pular"", player.id, Cor.Azulclaro, Negrito);
	       room.sendAnnouncement(""Uniformes: !itp, !alp, !arp, !frp, !min, !cia, !pre, !rsa."", player.id, Cor.Azulclaro, Negrito);
  }
  else {
	room.sendAnnouncement(comandovip, player.id, Cor.Vermelho, Negrito)
  }
  }
  
	if (message == '!kid') { 
	  if (player.admin) {
		var cod = code[(Math.random() * code.length) | 0]
		var cod1 = code1[(Math.random() * code.length) | 0]
		  room.sendAnnouncement(player.name + "", você é "" + `${cod}${cod1}%` + "" 👶 KID!!"", null, Cor.Laranja, Negrito)
	  }
	  else if(premium.includes(player.name)) {
		var cod = code[(Math.random() * code.length) | 0]
		var cod1 = code1[(Math.random() * code.length) | 0]
		room.sendAnnouncement(player.name + "", você é "" + `${cod}${cod1}%` + "" 👶 KID!!"", null, Cor.Laranja, Negrito)
	}

  else {
	  room.sendAnnouncement(comandovip, player.id, Cor.Vermelho, Negrito, 1);
	}
	return false;
  }


  if (message == '!random') { 
	var cod = code[(Math.random() * code.length) | 0]
	var cod1 = code1[(Math.random() * code.length) | 0]
	  room.sendAnnouncement(player.name + "", você é "" + `${cod}${cod1}%` + "" RANDOLA!!"", null, Cor.Laranja, Negrito)
  }
  
  if (message == ""!sbt"" ){
	if (player.admin) {
	  var sb = sbt[(Math.random() * sbt.length) | 0]
	  room.sendAnnouncement(""Téo Jóse: "" + sb, null, Cor.Verde, Italic)
  }
  if (player.admin) {
	  var sb = sbt[(Math.random() * sbt.length) | 0]
	  room.sendAnnouncement(""Téo Jóse: "" + sb, null, Cor.Verde, Italic)
  }
  else {
	  room.sendAnnouncement(comandovip, player.id, Cor.Vermelho, Negrito, 1);
	}
	return false;
	  }

		  //UNIFORMES VIP PREMIUM COMUM//
  
		  if (message == '!min') { 
			if (player.admin) {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0xFFFFFF, [0x117D00, 0x8C2309]);
				room.sendAnnouncement(player.name + "" escolheu o uniforme do Minecraft!"", null, 0x117D00, Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFFFF, [0x117D00, 0x8C2309]);
				room.sendAnnouncement(player.name + "" escolheu o uniforme do Minecraft!"", null, 0x117D00, Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
	}

	if (message == '!cia') { 
		if (player.admin) {
		if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
			room.setTeamColors(1, 120, 0xFFFFFF, [0x008080, 0x008B8B, 0x20B2AA]);
			room.sendAnnouncement(player.name + "" escolheu o uniforme do Ciano 3D 2023!"", null, 0x008B8B, Negrito);
		}
		else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
			room.setTeamColors(2, 120, 0xFFFFFF, [0x008080, 0x008B8B, 0x20B2AA]);
			room.sendAnnouncement(player.name + "" escolheu o uniforme do Ciano 3D 2023!"", null, 0x008B8B, Negrito);
		}
		else {
			room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
		  }
		return false;
	}
}

if (message == '!pre') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 120, 0xFFFFFF, [0x1C1C1C, 0x363636, 0x4F4F4F]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme do Preto 3D 2023!"", null,  0x4F4F4F, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 120, 0xFFFFFF, [0x1C1C1C, 0x363636, 0x4F4F4F]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme do PRETO 3D 2023!"", null,  0x4F4F4F, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!rsa') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 120, 0xFFFFFF, [0xE64AA7, 0xFFFFFF]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme do Rosa 2023!"", null, 0xE64AA7, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 120, 0xFFFFFF, [0xE64AA7, 0xFFFFFF]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme do Rosa 2023!"", null,  0xE64AA7, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}


//UNIFORMES VIP PREMIUM

if (message == '!itp') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 0, 0xFFFFFF, [0xBDFFBF, 0xFFFFFF, 0xFFD9D9]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme da Itália PREMIUM!"", null, 0xFFD9D9, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 0, 0xFFFFFF, [0xBDFFBF, 0xFFFFFF, 0xFFD9D9]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme do Itália PREMIUM!"", null,  0xFFD9D9, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!frp') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 0, 0xFFFFFF, [0x70A9FF, 0xFFFFFF, 0xFF674F]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme da França PREMIUM!"", null, 0xFF674F, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 0, 0xFFFFFF, [0x70A9FF, 0xFFFFFF, 0xFF674F]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme do França PREMIUM!"", null,  0xFF674F, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!arp') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 90, 0xFFFFFF, [0xBAE8FF, 0xFFFFFF, 0xBAE8FF]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme da Argentina PREMIUM!"", null, 0xBAE8FF, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 90, 0xFFFFFF, [0xBAE8FF, 0xFFFFFF, 0xBAE8FF]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme da Argentina PREMIUM!"", null,  0xBAE8FF, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}


if (message == '!alp') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 90, 0xFFFFFF, [0x363636, 0xE8300C, 0xFFF81F]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme da Alemanha PREMIUM!"", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 90, 0xFFFFFF, [0x363636, 0xE8300C, 0xFFF81F]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme do Alemanha PREMIUM!"", null,  0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

//UNIFORMES EXCLUSIVOS

if (message == '!mud') { 
	if (Bras.includes(player.name)) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 1, 0x0303FF, [0xFFFFFF , 0x770800, 0xE3DFD8]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 1, 0x0303FF, [0xFFFFFF , 0x770800, 0xE3DFD8]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!zum') { 
	if (zum.includes(player.name)) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 56, 0x40DB8D, [0x0C6B4B , 0x1AA34D , 0x3EB812]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 56, 0x40DB8D, [0x0C6B4B , 0x1AA34D , 0x3EB812]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!fom') { 
	if (fominha.includes(player.name)) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 60, 0x40DB8D, [0x001B36]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 60, 0x40DB8D, [0x661E22]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!zx') {
	if (zx.includes(player.name)) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 90, 0xFFFFFF, [0x000000, 0x000077]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 90, 0xFFFFFF, [0x000000, 0x000077]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!wax') {
	if (waxie.includes(player.name)) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 60, 0xFFFFFF, [0x000000, 0x63FF69]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 60, 0xFFFFFF, [0x000000, 0x63FF69]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}
		//UNIFORMES//
                        
                        if (message == '!ath') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id || player.admin){
				room.setTeamColors(1, 60, 0xFFFFFF, [0xF20000, 0x0F0F0F, 0xF20000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO ATH.PARANAENSE!"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id || player.admin){
				room.setTeamColors(2, 60, 0xFFFFFF, [0xF20000, 0x0F0F0F, 0xF20000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO ATH.PARANAENSE!"", null, 0x00F2FA, ""bold"");
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!cru') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id || player.admin){
				room.setTeamColors(1, 90, 0xFFFFFF, [0x005DBA, 0x005DBA, 0x005DBA]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO CRUZEIRO!"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id || player.admin){
				room.setTeamColors(2, 90, 0xFFFFFF, [0x005DBA, 0x005DBA, 0x005DBA]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO CRUZEIRO!"", null, 0x00F2FA, ""bold"");
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!bay') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0x0C1359   , [0x8A0000 , 0x6E0000  , 0x590606]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BAYER DE MUNIQUE"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0x0C1359   , [0x8A0000 , 0x6E0000  , 0x590606]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BAYER DE MUNIQUE"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!ajx') {  
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0x000000  , [0xFFFFFF , 0xFC0000 , 0xFFFFFF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO AJAX"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0x000000  , [0xFFFFFF , 0xFC0000 , 0xFFFFFF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO AJAX"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!amz') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 60, 0xFFFFFF  , [0x000000 , 0x000000 , 0xFF0505]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA AMAZING RED"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 60, 0xFFFFFF  , [0x000000 , 0x000000 , 0x1C81E6]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA AMAZING BLUE"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!arg') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0xFFC70F  , [0x1382C2 , 0xFFFFFF , 0x1382C2]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA ARGENTINA"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFC70F  , [0x1382C2 , 0xFFFFFF , 0x1382C2]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA ARGENTINA"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!ita') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xB38B1D , [0x007A15 , 0xFFFFFF, 0xFF0A0A]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA ITÁLIA"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xB38B1D , [0x007A15 , 0xFFFFFF, 0xFF0A0A]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA ITÁLIA"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!psg') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xFFFFFF , [0x010A17 , 0xFF0000 , 0x010A17]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PSG"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0xFFFFFF , [0x010A17 , 0xFF0000 , 0x010A17]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PSG"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!rom') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, -149, 0xD19D0D , [0x9C0000 , 0x750000, 0x4A0707]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA ROMA"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, -149, 0xD19D0D , [0x9C0000 , 0x750000, 0x4A0707]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA ROMA"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}


		if (message == '!nap') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 60, 0xFFFFFF, [0x12A0FF , 0x0D8EFF, 0x0088D9]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO NAPOLI"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 60, 0xFFFFFF, [0x12A0FF , 0x0D8EFF, 0x0088D9]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO NAPOLI"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!rea') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 120, 0x00529F, [0xFDFEFE, 0xF7F9F9, 0xECF0F1]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO REAL MADRID"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 120, 0x00529F, [0xFDFEFE, 0xF7F9F9, 0xECF0F1]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO REAL MADRID"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!bar') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xE3B022, [0x00172E, 0x052E6B, 0xC90000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BARCELONA"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xE3B022, [0x00172E, 0x052E6B, 0xC90000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BARCELONA"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		
		if (message == '!atm') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0x1D2440, [0x7CCAD6]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO ATL. MADRID"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0x1D2440, [0x7CCAD6]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO ATL. MADRID"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!liv') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 120, 0xFFFFFF, [0xFF0000, 0xE60000, 0xBD0000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO LIVERPOOL"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 120, 0xFFFFFF, [0xFF0000, 0xE60000, 0xBD0000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO LIVERPOOL"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!mci') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xFFFFFF, [0x249AFD, 0x40A6FC, 0x54B1FF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO MAN. CITY"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xFFFFFF, [0x249AFD, 0x40A6FC, 0x54B1FF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO MAN. CITY"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!che') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xFFFFFF, [0x0600B0]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO CHELSEA"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xFFFFFF, [0x0600B0]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO CHELSEA"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}


		if (message == '!juv') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xC748B6, [0xFFFFFF, 0x000000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA JUVENTUS"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xC748B6, [0xFFFFFF, 0x000000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA JUVENTUS"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!itn') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xDAE810, [0x0006B5, 0x000000, 0x0006B5]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA INTERNAZIONALE"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xDAE810, [0x0006B5, 0x000000, 0x0006B5]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA INTERNAZIONALE"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!mil') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xFF0000, [0xF2F2F2]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO MILAN (BRANCA)"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xFF0000, [0xF2F2F2]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME D0 MILAN (BRANCA)"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}



		if (message == '!sao') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0xFFFFFF, [0xF7F7F7, 0xFB2121, 0xF7F7F7]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO SÃO PAULO"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFFFF, [0xF7F7F7, 0xFB2121, 0xF7F7F7]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO SÃO PAULO"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!pal') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0xFFFAFF, [0x035E19]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PALMEIRAS"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFAFF, [0x035E19]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PALMEIRAS"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!fla') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0xFFFFFF, [0xFF0303, 0x050505, 0xFF0000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO FLAMENGO"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFFFF, [0xFF0303, 0x050505, 0xFF0000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO FLAMENGO"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!pay') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0x70B3FF, [0x70B3FF, 0x2E9DFF, 0x006FFF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PAYSANDU"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0x70B3FF, [0x70B3FF, 0x2E9DFF, 0x006FFF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PAYSANDU"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!bra') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0x00FF11, [0xFFDE05]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BRASIL"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0x00FF11, [0xFFDE05]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BRASIL"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!fra') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xF7FFFC, [0x030019]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA FRANÇA"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xF7FFFC, [0x030019]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA FRANÇA"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!hol') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0X000000, [0xFF3D03]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA HOLANDA"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0X000000, [0xFF3D03]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA HOLANDA"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!bor') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 50,0x000000, [0xFFFF0D, 0xF2F20C, 0xE8E80C]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BORUSSIA DORTMUND"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 50, 0x000000, [0xFFFF0D, 0xF2F20C, 0xE8E80C]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BORUSSIA DORTMUND"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!rbl') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 50,0xBA0000, [0xE8E8E8, 0xEDEDED, 0xE80000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO RB LEIPZIG"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 50, 0xBA0000, [0xE8E8E8, 0xEDEDED, 0xE80000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO RB LEIPZIG"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!ein') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90,0xFFFFFF, [0x0F0F0F]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO EINTRACHT FRANKFURT (PRETO)"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFFFF, [0x0F0F0F]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO EINTRACHT FRANKFURT (PRETO)"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!mun') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90,0xFFFFFF, [0xEB0E0E]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO MANCHESTER UNITED"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFFFF, [0xEB0E0E]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO MANCHESTER UNITED"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!ars') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90,0x030121, [0xF6FF73]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO ARSENAL (2)"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0x030121, [0xF6FF73]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO ARSENAL (2)"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!bucks') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id || player.admin){
				room.setTeamColors(1, 0, 0x216603, [0xFFFFFF, 0x087700, 0xFFFFFF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BUCKS!"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id || player.admin){
				room.setTeamColors(2, 0, 0x216603, [0xFFFFFF, 0x087700, 0xFFFFFF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BUCKS!"", null, 0x00F2FA, ""bold"");
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!clipers') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id || player.admin){
				room.setTeamColors(1, 0, 0x212121, [0xFFFFFF, 0x000000, 0xFFFFFF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO CLIPERS!"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id || player.admin){
				room.setTeamColors(2, 0, 0x212121, [0xFFFFFF, 0x000000, 0xFFFFFF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO CLIPERS!"", null, 0x00F2FA, ""bold"");
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!heat') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xFFFFFF, [0x000000, 0x8A0000, 0x000000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO HEAT!"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xFFFFFF, [0x000000, 0x8A0000, 0x000000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO HEAT!"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!76ers') {  
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xFFF2F2, [0x0A0370]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO 76ERS!"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xFFF2F2, [0x0A0370]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME 76ERS!"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!nuggetes') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xF7FF00, [0x1808FF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA NUGGETES!"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xF7FF00, [0x1808FF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME NUGGETES!"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!utah') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0x446B39, [0xFFEE00]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME UTAH!"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0x446B39, [0xFFEE00]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME UTAH!"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!mavericks') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xFFFFFF, [0x03020F]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA MAVERICKS!"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xFFFFFF, [0x03020F]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME MAVERICKS!"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!grizzilies') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 60, 0x061C33, [0xCFE8FF, 0xC9E1FF, 0xBBD8F2]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO GRIZZILIES!"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 60, 0x061C33, [0xCFE8FF, 0xC9E1FF, 0xBBD8F2]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO GRIZZILIES!"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!lakers') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 60, 0x37144F, [0xFFDE08, 0xF5D505, 0xEDCE07]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA LAKERS!"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 60, 0x37144F, [0xFFDE08, 0xF5D505, 0xEDCE07]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA LAKERS!"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}


		if (message == '!warrios') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 60, 0xFFDD00, [0x002045, 0x022B4F, 0x032347]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME WARRIOS!"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 60, 0xFFDD00, [0x002045, 0x022B4F, 0x032347]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME WARRIOS!"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!nets') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 60, 0xFFFFFFF, [0x000000, 0x0A0A0A, 0x121212]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO NETS!"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 60, 0xFFFFFFF, [0x000000, 0x0A0A0A, 0x121212]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO NETS!"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!celtics') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xE3B022, [0x00172E, 0x052E6B, 0xC90000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO CELTICS!"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xE3B022, [0x00172E, 0x052E6B, 0xC90000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO CELTICS!"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		
		if (message == '!rockets') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0x1D2440, [0x7CCAD6]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO ROCKETS!"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0x1D2440, [0x7CCAD6]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO ROCKETS!"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!portland') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0x000000, [0xFFE8E0, 0xC4120C, 0xF5F5F5]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PORTLAND!"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0x000000, [0xFFE8E0, 0xC4120C, 0xF5F5F5]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PORTLAND!"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!pacers') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0x131347, [0xE8E8E8, 0x4741F0, 0xF5F5F5]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PACERS!"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0x131347, [0xE8E8E8, 0x4741F0, 0xF5F5F5]);;
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PACERS!"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!raptors') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xFFFFFF, [0xE80C0C]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO RAPTORS!"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xFFFFFF, [0xE80C0C]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO RAPTORS!"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capitães, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

	
		if (message == ""!afk"" ){
			if (players.length != 1 && player.team != Team.SPECTATORS) {
				if (player.team == Team.RED && streak > 0 && room.getScores() == null) {
					room.setPlayerTeam(player.id, Team.SPECTATORS);
				} else {
					room.sendAnnouncement(""[PV] Não pode ficar AFK enquanto está em uma equipe !"", player.id, 0xFF7B08);
					return false;
				}
			} else if (players.length == 1 && !getAFK(player)) {
				room.setPlayerTeam(player.id, Team.SPECTATORS);
			}
			setAFK(player, !getAFK(player));
			room.sendAnnouncement(player.name + (getAFK(player) ? "" está AFK !"" : "" Voltou do AFK !""), null, (getAFK(player) ? 0xFF7B08 : 0x8FFF8F));
			getAFK(player) ? updateRoleOnPlayerOut() : updateRoleOnPlayerIn();
			localStorage.getItem(getAuth(player)) ? stats = JSON.parse(localStorage.getItem(getAuth(player))) : stats = [0, 0, 0, 0, ""0.00"", 0, 0, 0, 0, ""0.00"", ""player""];
			setTimeout(() => {
				if (getAFK(player) && (player.name != semlimiteafk)) {
					room.kickPlayer(player.id, ""Tempo de afk excedido"", false)
				}
			}, 30 * 60 * 1000)
			
			return false;
		} 
				
		if (message == ""!afks"" ){
				var cstm = ""Lista de AFK : "";
				for (var i = 0; i < extendedP.length; i++) {
				if (room.getPlayer(extendedP[i][eP.ID]) != null && getAFK(room.getPlayer(extendedP[i][eP.ID]))) {
				if (140 - cstm.length < (room.getPlayer(extendedP[i][eP.ID]).name + "", "").length) {
				room.sendAnnouncement(cstm, player.id);
				cstm = ""... "";
				}
				cstm += room.getPlayer(extendedP[i][eP.ID]).name + "", "";
				}
				}
				if (cstm == ""Lista de AFK : "") {
				room.sendAnnouncement(""Não há ninguém na lista de AFK !"", player.id);
				return false;
				}
				cstm = cstm.substring(0, cstm.length - 2);
				cstm += ""."";
				room.sendAnnouncement(cstm, player.id);
				}

	if (message == ""!bb"") {
 room.kickPlayer(player.id, "" Tremi demais!! "", false);
    }

	if (message == ""!me"" ){
        var stats;
        localStorage.getItem(getAuth(player)) ? stats = JSON.parse(localStorage.getItem(getAuth(player))) : stats = [0, 0, 0, 0, ""0.00"", 0, 0, 0, 0, ""0.00""];
        room.sendAnnouncement(""[PV] Seus stats "" + player.name + "": 🎮 Partidas jogadas: "" + stats[Ss.GA] + "", ✅ Vitorias: "" + stats[Ss.WI] + "", ⭕ Empates: "" + stats[Ss.DR] + "", ❌ Derrotas: "" + stats[Ss.LS] + "", WR: "" + stats[Ss.WR] + ""%, 🏀 Gols: "" + stats[Ss.GL] + "", 👟 Assistências: "" + stats[Ss.AS] + "", 🤚 GK: "" + stats[Ss.GK] + "", 🤚 CS: "" + stats[Ss.CS] + "", 🤚 CS%: "" + stats[Ss.CP] + ""%"", player.id, 0x73EC59, ""bold"");
        room.sendAnnouncement(""[PV] Quer mostrar a todos? Use !mostrarme."", player.id, 0xFF7900, ""bold"");
    } 	else if (message == ""!mostrarme"" ){
        var stats;
        localStorage.getItem(getAuth(player)) ? stats = JSON.parse(localStorage.getItem(getAuth(player))) : stats = [0, 0, 0, 0, ""0.00"", 0, 0, 0, 0, ""0.00""];
        room.sendAnnouncement(""[📄] ""+ player.name + "" mostrou seus stats!"", null, 0xFF7900, ""bold"")
        room.sendAnnouncement(""[📄] Stats de "" + player.name + "": 🎮 Partidas Jogadas: "" + stats[Ss.GA] + "", ✅ Vitorias: "" + stats[Ss.WI] + "", ⭕ Empates: "" + stats[Ss.DR] + "", ❌ Derrotas: "" + stats[Ss.LS] + "", WR: "" + stats[Ss.WR] + ""%, 🏀 Gols: "" + stats[Ss.GL] + "", 👟 Assistências: "" + stats[Ss.AS] + "", 🤚 GK: "" + stats[Ss.GK] + "", 🤚 CS: "" + stats[Ss.CS] + "", 🤚 CS%: "" + stats[Ss.CP] + ""%"", null, 0x73EC59, ""bold"");
    } else if (message == ""!games"" ){
        var tableau = [];
        try {
            Object.keys(localStorage).forEach(function(key) {
                if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) {
                    tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.GA])]);
                }
            });
        } catch {

        }
        if (tableau.length < 5) {
            room.sendAnnouncement(""[PV] Não jogou partidas suficientes"", player.id, 0xFF0000);
            return false;
        }
        tableau.sort(function(a, b) {
            return b[1] - a[1];
        });
        room.sendAnnouncement(""🎮 Partidas Jogadas> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1], player.id, 0x73EC59);

        return false;
    } else 	if (message == ""!wins"" ){
        var tableau = [];
        try {
            Object.keys(localStorage).forEach(function(key) {
                if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) {
                    tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.WI])]);
                }
            });
        } catch {

        }
        if (tableau.length < 5) {
            room.sendAnnouncement(""[PV] Não jogou partidas suficientes"", player.id, 0x73EC59);
            return false;
        }
        tableau.sort(function(a, b) {
            return b[1] - a[1];
        });
        room.sendAnnouncement(""✅ Vitórias> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1], player.id, 0x73EC59);

        return false;
    } else 	if (message == ""!pontos"" ){
        var tableau = [];
        try {
            Object.keys(localStorage).forEach(function(key) {
                if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) {
                    tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.GL])]);
                }
            });
        } catch {

        }
        if (tableau.length < 5) {
            room.sendAnnouncement(""[PV] Não jogou partidas suficientes"", player.id, 0x73EC59);
            return false;
        }
        tableau.sort(function(a, b) {
            return b[1] - a[1];
        });
        room.sendAnnouncement(""🏀 Gols> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1], player.id, 0x73EC59);

        return false;
    } else 	if (message == ""!assists"" ){
        var tableau = [];
        try {
            Object.keys(localStorage).forEach(function(key) {
                if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) {
                    tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.AS])]);
                }
            });
        } catch {

        }
        if (tableau.length < 5) {
            room.sendAnnouncement(""[PV] Não jogou partidas suficientes"", player.id);
            return false;
        }
        tableau.sort(function(a, b) {
            return b[1] - a[1];
        });
        room.sendAnnouncement(""👟 Assistências> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1], player.id, 0x73EC59);

        return false;
    } else 	if (message == ""!cs"" ){
        var tableau = [];
        try {
            Object.keys(localStorage).forEach(function(key) {
                if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) {
                    tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.CS])]);
                }
            });
        } catch {

        }
        if (tableau.length < 5) {
            room.sendAnnouncement(""[PV] Não jogou partidas suficientes"", player.id, 0x73EC59);
            return false;
        }
        tableau.sort(function(a, b) {
            return b[1] - a[1];
        });
        room.sendAnnouncement(""🤚 CS> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1], player.id, 0x73EC59);

        return false;
    }
	if (message == ""!mutes"" ){
		var cstm = ""[PV] Lista de mutados : "";
		for (var i = 0; i < extendedP.length; i++) {
		if (room.getPlayer(extendedP[i][eP.ID]) != null && getMute(room.getPlayer(extendedP[i][eP.ID]))) {
		if (140 - cstm.length < (room.getPlayer(extendedP[i][eP.ID]).name + ""["" + (extendedP[i][eP.ID]) + ""], "").length) {
		room.sendAnnouncement(cstm, player.id);
		cstm = ""... "";
		}
		cstm += room.getPlayer(extendedP[i][eP.ID]).name + ""["" + (extendedP[i][eP.ID]) + ""], "";
		}
		}
		if (cstm == ""[PV] Lista de Mutados : "") {
		room.sendAnnouncement(""[PV] Não há ninguém na lista de mutados !"", player.id);
		return false;
		}
		cstm = cstm.substring(0, cstm.length - 2);
		cstm += ""."";
		room.sendAnnouncement(cstm, player.id);
		}
		
		else if ([""!mute""].includes(message[0].toLowerCase())) { // comando para mutar um jogador, deve ser admin, use !mute + ID do jogador
			if (player.admin) {			
			updateTeams();
		  
			var timeOut;
			if (!Number.isNaN(Number.parseInt(message[1])) && message.length > 1) {
			if (Number.parseInt(message[1]) > 0) {
			timeOut = Number.parseInt(message[1]) * 60 * 1000;
			}
			else {
			timeOut = 10 * 60 * 1000;
			}
			if (message[2].length > 1 && message[2][0] == ""#"") {
			message[2] = message[2].substring(1, message[2].length);
			if (!Number.isNaN(Number.parseInt(message[2])) && room.getPlayer(Number.parseInt(message[2])) != null) {
			if (room.getPlayer(Number.parseInt(message[2])).admin || getMute(room.getPlayer(Number.parseInt(message[2]))
			)) { return false;
			}
			setTimeout(function (player) { setMute(player, false); }, timeOut, room.getPlayer(Number.parseInt(message[2]
			))); setMute(room.getPlayer(Number.parseInt(message[2])), true);
			room.sendAnnouncement(room.getPlayer(Number.parseInt(message[2])).name + "" foi mutado por "" + (timeOut /
			60000) + "" minutos !""); }
			}
			}
			else if (Number.isNaN(Number.parseInt(message[1]))) {
			if (message[1].length > 1 && message[1][0] == ""#"") {
			message[1] = message[1].substring(1, message[1].length);
			if (!Number.isNaN(Number.parseInt(message[1])) && room.getPlayer(Number.parseInt(message[1])) != null) {
			if (room.getPlayer(Number.parseInt(message[1])).admin || getMute(room.getPlayer(Number.parseInt(message[1]))
			)) { return false;
			}
			setTimeout(function (player) { setMute(player, false); }, 10 * 60 * 1000, room.getPlayer(Number.parseInt
			(message[1])));
			setMute(room.getPlayer(Number.parseInt(message[1])), true);
			room.sendAnnouncement(room.getPlayer(Number.parseInt(message[1])).name + "" Foi mutado por 10 minutos!"");
			}
			}
			}
			}
			}
			
			else if ([""!unmute""].includes(message[0].toLowerCase())) { // comando para desmutar um jogador, deve ser admin, use !mute + ID do jogador
			if (player.admin && message.length >= 2) {
			if (message[1] == ""all"") {
			extendedP.forEach((ePlayer) => { ePlayer[eP.MUTE] = false; });
			room.sendAnnouncement(""Todos foram desmutados."");
			} else if (!Number.isNaN(Number.parseInt(message[1])) && room.getPlayer(Number.parseInt(message[1])) != null && getMute(room.getPlayer(Number.parseInt(message[1])))) {
			setMute(room.getPlayer(Number.parseInt(message[1])), false);
			room.sendAnnouncement(room.getPlayer(Number.parseInt(message[1])).name + "" Foi desmutado !"");
			}
			else if (Number.isNaN(Number.parseInt(message[1]))) {
			if (message[1].length > 1 && message[1][0] == ""#"") {
			message[1] = message[1].substring(1, message[1].length);
			if (!Number.isNaN(Number.parseInt(message[1])) && room.getPlayer(Number.parseInt(message[1])) != null && getMute(room.getPlayer(Number.parseInt(message[1])))) {
			setMute(room.getPlayer(Number.parseInt(message[1])), false);
			room.sendAnnouncement(room.getPlayer(Number.parseInt(message[1])).name + "" Foi desmutado !"");
			}
			}
			}
			}
			}
			
			else if ([""!banidos""].includes(message[0].toLowerCase())) { // comando para ver a lista de banidos
			if (banList.length == 0) {
			room.sendAnnouncement(""[PV] Ninguém foi banido."", player.id);
			return false;
			}
			var cstm = ""[PV] Lista de baneados : "";
			for (var i = 0; i < banList.length; i++) {
			if (140 - cstm.length < (banList[i][0] + ""["" + (banList[i][1]) + ""], "").length) {
			room.sendAnnouncement(cstm, player.id);
			cstm = ""... "";
			}
			cstm += banList[i][0] + ""["" + (banList[i][1]) + ""], "";
			}
			cstm = cstm.substring(0, cstm.length - 2);
			cstm += ""."";
			room.sendAnnouncement(cstm, player.id);
			}
			
			else if ([""!limparbans""].includes(message[0].toLowerCase())) { // comando para limpar os bans da sala, para desbanir um jogador especifico escreva !clearbans + ID do jogador
			if (player.admin) {
			if (message.length == 1) {
			room.clearBans();
			room.sendAnnouncement(""Bans removidos!"")
			banList = [];
			}
			if (message.length == 2) {
			if (!Number.isNaN(Number.parseInt(message[1]))) {
			if (Number.parseInt(message[1]) > 0) {
			ID = Number.parseInt(message[1]);
			room.clearBan(ID);
			if (banList.length != banList.filter((array) => array[1] != ID)) {
			room.sendAnnouncement(banList.filter((array) => array[1] == ID)[0][0] + "" ha sido baneado del host !"");
			}
			setTimeout(() => { banList = banList.filter((array) => array[1] != ID); }, 20);
			}
			}
			}
			}
			}

	  if (message[0][0] == ""!"") { // mensagens com o prefixo [!] não irão aparecer no chat.
	  return false;
	  }
	  
	  if (teamR.length != 0 && teamB.length != 0 && inChooseMode) { //choosing management
	  if (player.id == teamR[0].id || player.id == teamB[0].id) { // we care if it's one of the captains choosing
	  if (teamR.length <= teamB.length && player.id == teamR[0].id) { // we care if it's red turn && red cap talking
	  if ([""top"", ""auto""].includes(message[0].toLowerCase())) {
	  room.setPlayerTeam(teamS[0].id, Team.RED);
	  redCaptainChoice = ""top"";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + "" usou top !"", null);
	  return false;
	  }
	  else if ([""random"", ""rand""].includes(message[0].toLowerCase())) {
	  var r = getRandomInt(teamS.length);
	  room.setPlayerTeam(teamS[r].id, Team.RED);
	  redCaptainChoice = ""random"";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + "" usou random !"",null);
	  return false;
	  }
	  else if ([""bottom"", ""bot""].includes(message[0].toLowerCase())) {
	  room.setPlayerTeam(teamS[teamS.length - 1].id, Team.RED);
	  redCaptainChoice = ""bottom"";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + "" usou bottom !"", null);
	  return false;
	  }
	  else if (!Number.isNaN(Number.parseInt(message[0]))) {
	  if (Number.parseInt(message[0]) > teamS.length || Number.parseInt(message[0]) < 1) {
	  room.sendAnnouncement(""Número invalido !"", player.id);
	  return false;
	  }
	  else {
	  room.setPlayerTeam(teamS[Number.parseInt(message[0]) - 1].id, Team.RED);
	  room.sendAnnouncement(player.name + "" escolhoeu o(a) "" + teamS[Number.parseInt(message[0]) - 1].name + "" !"", null);
	  return false;
	  }
	  }
	  }
	  if (teamR.length > teamB.length && player.id == teamB[0].id) { // we care if it's red turn && red cap talking
	  if ([""top"", ""auto""].includes(message[0].toLowerCase())) {
	  room.setPlayerTeam(teamS[0].id, Team.BLUE);
	  blueCaptainChoice = ""top"";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + "" usou top !"", null);
	  return false;
	  }
	  else if ([""random"", ""rand""].includes(message[0].toLowerCase())) {
	  room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.BLUE);
	  blueCaptainChoice = ""random"";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + "" usou random !"", null);
	  return false;
	  }
	  else if ([""bottom"", ""bot""].includes(message[0].toLowerCase())) {
	  room.setPlayerTeam(teamS[teamS.length - 1].id, Team.BLUE);
	  blueCaptainChoice = ""bottom"";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + "" usou bottom !"", null);
	  return false;
	  }
	  else if (!Number.isNaN(Number.parseInt(message[0]))) {
	  if (Number.parseInt(message[0]) > teamS.length || Number.parseInt(message[0]) < 1) {
	  room.sendAnnouncement(""Número invalido !"", player.id);
	  return false;
	  }
	  else {
	  room.setPlayerTeam(teamS[Number.parseInt(message[0]) - 1].id, Team.BLUE);
	  room.sendAnnouncement(player.name + "" escolheu o(a) "" + teamS[Number.parseInt(message[0]) - 1].name + "" !"", null);
	  return false;
	  }
	  }
	  }
	  }
	  }
    
	  if (getMute(player)) {
        room.sendAnnouncement(""Você está mutado."", player.id);
        return false;
    }


	if (adminF.includes(player.name)) {
		stats = JSON.parse(localStorage.getItem(getAuth(player)));
		room.sendAnnouncement(""[🏀: "" + stats[Ss.GL] +""] [DONO] "" + player.name + "": "" + message.join(' '), null, 0xFF00FF, Negrito, 1);
		return false;
	}

	if (adminG.includes(player.name)) {
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

		room.sendAnnouncement(""[🏀: "" + stats[Ss.GL] +""] [ADMIN-G] "" + player.name + "": "" + message.join(' '), null, 0xCCA01F, Negrito, 1);
		return false;
	}

	if (adminM.includes(player.name)) {
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

		room.sendAnnouncement(""[🏀: "" + stats[Ss.GL] +""] [ADMIN-M] "" + player.name + "": "" + message.join(' '), null, 0x74FF00, Negrito, 1);
		return false;
	}

	if (adminE.includes(player.name)) {
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

		room.sendAnnouncement(""[🏀: "" + stats[Ss.GL] +""] [ADMIN-E] "" + player.name + "": "" + message.join(' '), null, 0xF4CA21, Negrito, 1);
		return false;
	}

	if(L1.includes(player.name) === true && verificados.includes(player.name) === true){
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

	room.sendAnnouncement(""[🏀: "" + stats[Ss.GL] +""] [MVP++] ""+ player.name + "": "" + message.join(' '), null, cL1, fL1)		
	return false;
	}
	if(L2.includes(player.name) === true && verificados.includes(player.name) === true){
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

	room.sendAnnouncement(""[🏀: "" + stats[Ss.GL] +""] [] ""+ player.name + "": "" + message.join(' '), null, cL2, fL2)	
	return false;
	}
	if(L3.includes(player.name) === true && verificados.includes(player.name) === true){
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

		room.sendAnnouncement(""[🏀: "" + stats[Ss.GL] +""] [] ""+ player.name + "": "" + message.join(' '), null, cL3, fL3)	
		return false;
		}
		if(L4.includes(player.name) === true && verificados.includes(player.name) === true){
			stats = JSON.parse(localStorage.getItem(getAuth(player)));

			room.sendAnnouncement(""[🏀: "" + stats[Ss.GL] +""] [] ""+ player.name + "": "" + message.join(' '), null, cL4, fL4)	
			return false;
			}
		
			if(L5.includes(player.name) === true && verificados.includes(player.name) === true){
				stats = JSON.parse(localStorage.getItem(getAuth(player)));


				room.sendAnnouncement(""[🏀: "" + stats[Ss.GL] +""] [] ""+ player.name + "": "" + message.join(' '), null, cL5, fL5)	
				return false;
				}
			
				if(L6.includes(player.name) === true && verificados.includes(player.name) === true){
					stats = JSON.parse(localStorage.getItem(getAuth(player)));

					room.sendAnnouncement(""[🏀: "" + stats[Ss.GL] +""] [] ""+ player.name + "": "" + message.join(' '), null, cL6, fL6)	
					return false;
					}
					if(L7.includes(player.name) === true && verificados.includes(player.name) === true){
						stats = JSON.parse(localStorage.getItem(getAuth(player)));

						room.sendAnnouncement(""[🏀: "" + stats[Ss.GL] +""] [] ""+ player.name + "": "" + message.join(' '), null, cL7, fL7)	
						return false;
						}
					if(L10.includes(player.name) === true && verificados.includes(player.name) === true){
						stats = JSON.parse(localStorage.getItem(getAuth(player)));

						room.sendAnnouncement(""[🏀: "" + stats[Ss.GL] +""] [MVP++] ""+ player.name + "": "" + message.join(' '), null, cL10, fL10)	
						return false;
						}	
						if(L11.includes(player.name) === true && verificados.includes(player.name) === true){
							stats = JSON.parse(localStorage.getItem(getAuth(player)));

							room.sendAnnouncement(""[🏀: "" + stats[Ss.GL] +""] [MVP++] ""+ player.name + "": "" + message.join(' '), null, cL11, fL11)	
							return false;
							}	
							if(L12.includes(player.name) === true && verificados.includes(player.name) === true){
								stats = JSON.parse(localStorage.getItem(getAuth(player)));

								room.sendAnnouncement(""[🏀: "" + stats[Ss.GL] +""] [MVP++] ""+ player.name + "": "" + message.join(' '), null, cL12, fL12)	
								return false;
								}	

								if(L13.includes(player.name) === true && verificados.includes(player.name) === true){//MVP+
									stats = JSON.parse(localStorage.getItem(getAuth(player)));

									room.sendAnnouncement(""[🏀: "" + stats[Ss.GL] +""] [MVP+] ""+ player.name + "": "" + message.join(' '), null, cL13, fL13)	
									return false;
									}	

									if(L14.includes(player.name) === true && verificados.includes(player.name) === true){//MVP+
										stats = JSON.parse(localStorage.getItem(getAuth(player)));

										room.sendAnnouncement(""[🏀: "" + stats[Ss.GL] +""] [MVP++] ""+ player.name + "": "" + message.join(' '), null, cL14, fL14)	
										return false;
										}	
										if(L15.includes(player.name) === true && verificados.includes(player.name) === true){//MVP+
											stats = JSON.parse(localStorage.getItem(getAuth(player)));

											room.sendAnnouncement(""[🏀: "" + stats[Ss.GL] +""] [MVP++] ""+ player.name + "": "" + message.join(' '), null, cL15, fL15)	
											return false;
											}	
						
						if (booster.includes(player.name)) {
							
							stats = JSON.parse(localStorage.getItem(getAuth(player)));

							room.sendAnnouncement(""[BOOSTER] "" + player.name + "": "" + message.join(' '), null, 0xF000FF, Normal, 1);
							return false;
						}

						if (localStorage.getItem(getAuth(player))){ // elo definido por vitórias dos registrados
							stats = JSON.parse(localStorage.getItem(getAuth(player)));
							let db = jsonToMap(localStorage.getItem(USER_DATABASE)) 					 
							if (db.get(player.name)) {
								if (stats[Ss.GA] > 80 && stats[Ss.WR] > 90){
									room.sendAnnouncement(""🩸 [SIGMA] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 87){
									room.sendAnnouncement(""🌀🌀🌀 [ESTRELA] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 85 ){
									room.sendAnnouncement(""🌀🌀 [ESTRELA] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 83 ){
									room.sendAnnouncement(""🌀 [ESTRELA] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 81 ){
									room.sendAnnouncement(""💎💎💎 [DIAMANTE] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 79 ){
									room.sendAnnouncement(""💎💎 [DIAMANTE] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 77){
									room.sendAnnouncement(""💎 [DIAMANTE] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 75 ){
									room.sendAnnouncement(""🥇🥇🥇 [OURO] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 70 ){
									room.sendAnnouncement(""🥇🥇 [OURO] ""+ player.name + "": "" + message.join(' '), null)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 65){
									room.sendAnnouncement(""🥇 [OURO] ""+ player.name + "": "" + message.join(' '), null)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 60){
									room.sendAnnouncement(""🥈🥈🥈 [PRATA] ""+ player.name + "": "" + message.join(' '), null)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 55){
									room.sendAnnouncement(""🥈🥈 [PRATA] ""+ player.name + "": "" + message.join(' '), null)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 50 ){
									room.sendAnnouncement(""🥈 [PRATA] ""+ player.name + "": "" + message.join(' '), null)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 45){
									room.sendAnnouncement(""🥉🥉🥉 [BRONZE] ""+ player.name + "": "" + message.join(' '), null)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 40){
									room.sendAnnouncement(""🥉🥉 [BRONZE] ""+ player.name + "": "" + message.join(' '), null)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 30){
									room.sendAnnouncement(""🥉 [BRONZE] ""+ player.name + "": "" + message.join(' '), null)
									} else {
									room.sendAnnouncement(""🥴 [✅|APOLLO] ""+ player.name + "": "" + message.join(' '), null)
									}
									return false;
										}
										else {
											room.sendAnnouncement(""❌ ""+ player.name + "": "" + msg + """", null, Cor.Branco)
										}
									return false;
								}
							}


  room.onPlayerActivity = function (player) {
	  setActivity(player, 0);
  }
  
  room.onPlayerBallKick = function(player) {
    if (lastPlayersTouched[0] == null || player.id != lastPlayersTouched[0].id) {
        !activePlay ? activePlay = true : null;
        lastTeamTouched = player.team;
        lastPlayersTouched[1] = lastPlayersTouched[0];
        lastPlayersTouched[0] = player;
    }
}

  
	  /* GAME MANAGEMENT */
  
room.onGameStart = function (byPlayer) {
	game = new Game(Date.now(), room.getScores(), []);
	countAFK = true;
	activePlay = false;
	goldenGoal = false;
	endGameVariable = false;
	lastPlayersTouched = [null, null]
    Rposs = 0;
	Bposs = 0;
	GKList = []
	allReds = []
	allBlues = []  
	  if (teamR.length == maxTeamSize && teamB.length == maxTeamSize) {
	  for (var i = 0; i < maxTeamSize; i++) {
	  allReds.push(teamR[i]);
	  allBlues.push(teamB[i]);
	  }
	  }
	  for (var i = 0; i < extendedP.length; i++) {
	  extendedP[i][eP.GK] = 0;
	  extendedP[i][eP.ACT] = 0;
	  room.getPlayer(extendedP[i][eP.ID]) == null ? extendedP.splice(i, 1) : null;
	  }
	  room.sendAnnouncement(""     ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••     "", null, 0xFF8C00, Normal);
	  room.sendAnnouncement(""     •.       💬 Use t para falar com seu time--------------------------------------•     "", null, 0xFFD700, Normal);
	  room.sendAnnouncement(""     •.       A partida está sendo gravada-------------------------------------------•     "", null, 0xFFD700, Normal);
	  room.sendAnnouncement(""     •.       Use !uni para ver os uniformes-----------------------------------------•     "", null, 0xFFD700, Normal);
	  room.sendAnnouncement(""     •.       UNIFORMES VIPS: !itp, !alp, !arp, !frp, !min, !cia, !pre, !rsa.----•     "", null, 0xFFD700, Normal);
          room.sendAnnouncement(""     •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••   "", null, 0xFF8C00, Normal);
          room.sendAnnouncement(""𝙈𝙐𝘿𝘼𝙉𝘿𝙊 𝘼 𝘼𝙍𝙀𝙉𝘼..."", null, 0xFFFF00, Negrito);
	  room.startRecording();
	  deactivateChooseMode();
	  resetPause();
}
//var mensagem_programada;
//var mensagemIntervalo = 1000 * 60 * 15;//
//mensagem_programada = setInterval(function(){
//}, mensagemIntervalo)//
room.onGameStop = function (byPlayer) {
	partida = true;
	if (endGameVariable) {
	updateTeams();
	solo()
	if (inChooseMode) {
	if (players.length == 2 * maxTeamSize) {
	inChooseMode = false;
	resetBtn();
	for (var i = 0; i < maxTeamSize; i++) {
	setTimeout(() => { randomBtn(); }, 400 * i);
	}
	setTimeout(() => { room.startGame(); }, 2000);
	}
	else {
	if (lastWinner == Team.RED) {
	blueToSpecBtn();
	}
	else if (lastWinner == Team.BLUE) {
	redToSpecBtn();
	blueToRedBtn();
	}
	else {
	resetBtn();
	}
	setTimeout(() => { topBtn(); }, 500);
	}
	}
	else {
	if (players.length == 2) {
	if (lastWinner == Team.BLUE) {
	room.setPlayerTeam(teamB[0].id, Team.RED);
	room.setPlayerTeam(teamR[0].id, Team.BLUE);
	}
	setTimeout(() => { room.startGame(); }, 2000);
	}
	else if (players.length == 3 || players.length >= 2 * maxTeamSize + 1) {
	if (lastWinner == Team.RED) {
	blueToSpecBtn();
	}
	else {
	redToSpecBtn();
	blueToRedBtn();
	}
	setTimeout(() => { topBtn(); }, 200);
	setTimeout(() => { room.startGame(); }, 2000);
	}
	else if (players.length == 4) {
	resetBtn();
	setTimeout(() => { randomBtn(); setTimeout(() => { randomBtn(); }, 500); }, 500);
	setTimeout(() => { room.startGame(); }, 2000);
	}
	else if (players.length == 5 || players.length >= 2 * maxTeamSize + 1) {
	if (lastWinner == Team.RED) {
	blueToSpecBtn();
	}
	else {
	redToSpecBtn();
	blueToRedBtn();
	}
	setTimeout(() => { topBtn(); }, 200);
	activateChooseMode();
	}
	else if (players.length == 6) {
	resetBtn();
	setTimeout(() => { randomBtn(); setTimeout(() => { randomBtn(); setTimeout(() => { randomBtn(); }, 500); }, 500); }, 500);
	setTimeout(() => { room.startGame(); }, 2000);
	}
	}
	}
} 
  room.onGamePause = function (byPlayer) {
  pauseGame = true;
  }	  
  room.onGameUnpause = function (byPlayer) {
	  if (teamR.length == 4 && teamB.length == 4 && inChooseMode || (teamR.length == teamB.length && teamS.length < 2 && inChooseMode)) {
	  deactivateChooseMode();
	  }
	  pauseGame = false;
  }
  room.onGamePause = () => {
	let scores = room.getScores()
        let redNumero = scores.red
        let blueNumero = scores.blue
        let blueString = blueNumero.toString()
        let redString = redNumero.toString()
        room.sendAnnouncement(`𝙅𝙊𝙂𝙊 𝙁𝙊𝙄 𝙋𝘼𝙐𝙎𝘼𝘿𝙊! 𝙋𝙇𝘼𝘾𝘼𝙍 𝙍𝙀𝘿: ${redString} 𝙀 𝘽𝙇𝙐𝙀 𝘾𝙊𝙈: ${blueString}`, null, 0xFFFF00, Negrito)
  }
	  
  room.onGameUnpause = () => {
	room.sendAnnouncement(""𝙊 𝙅𝙊𝙂𝙊 𝙁𝙊𝙄 𝘿𝙀𝙎𝙋𝘼𝙐𝙎𝘼𝘿𝙊!"", null, 0xFFFF00, Negrito);
  }
  room.onTeamGoal = function (team) {
	activePlay = false;
	countAFK = false;
	const scores = room.getScores();
	let players = room.getPlayerList();

    for (let i = 0; i < players.length; i++) {
        if (players[i].team == team) room.setPlayerAvatar(players[i].id, ""🌟"");
    }
    setTimeout(() => {
        for (let i = 0; i < players.length; i++) {
           room.setPlayerAvatar(players[i].id, null);
        }
    }, resetarAvatarEm * 1000);
	game.scores = scores;
	if (lastPlayersTouched[0] != null && lastPlayersTouched[0].team == team) {
	if (lastPlayersTouched[1] != null && lastPlayersTouched[1].team == team) {
	var frasegol = frasesGOL[(Math.random() * frasesGOL.length) | 0]
	var fraseasis = frasesASS[(Math.random() * frasesASS.length) | 0]
	room.sendAnnouncement(getTime(scores) + frasegol + lastPlayersTouched[0].name + fraseasis + lastPlayersTouched[1].name + "". VELOCIDADE : "" + ballSpeed.toPrecision(4).toString() + ""km/h. "" + (team == Team.RED ? """" : """"),null,(team == Team.RED ? 0xFF0000 : 0x1E47EC), Italic);
	game.goals.push(new Goal(scores.time, team, lastPlayersTouched[0], lastPlayersTouched[1]));
	}
	else {
	var frasegol = frasesGOL[(Math.random() * frasesGOL.length) | 0]
	room.sendAnnouncement(getTime(scores) + frasegol + lastPlayersTouched[0].name + "", VELOCIDADE : "" + ballSpeed.toPrecision(4).toString() + ""km/h. "" + (team == Team.RED ? """" : """"),null,(team == Team.RED ? 0xFF0000 : 0x1E47EC), Italic);
	}
	}
	else {
	var fraseautogol = golcontra[(Math.random() * golcontra.length) | 0]
	room.sendAnnouncement(getTime(scores) + golcontra + lastPlayersTouched[0].name + "", VELOCIDADE : "" + ballSpeed.toPrecision(4).toString() + ""km/h. "" + (team == Team.RED ? """" : """"),null,(team == Team.RED ? 0xFF0000 : 0x1E47EC), Italic);
	game.goals.push(new Goal(scores.time, team, null, null));
	}
	if (scores.scoreLimit != 0 && (scores.red == scores.scoreLimit || scores.blue == scores.scoreLimit && scores.blue > 0 || goldenGoal == true)) {
	endGame(team);
	goldenGoal = false;
	setTimeout(() => { room.stopGame(); }, 1000);
	}
}
  
  room.onPositionsReset = function () {
	  countAFK = true;
	  lastPlayersTouched = [null, null];
  }
  
	  /* MISCELLANEOUS */
  
room.onRoomLink=(link)=>{
}
  
  room.onPlayerAdminChange = function (changedPlayer, byPlayer) {
	  if (getMute(changedPlayer) && changedPlayer.admin) {
	  room.sendAnnouncement(changedPlayer.name + "" foi desmutado."");
	  setMute(changedPlayer, false);
	  }
  }
  
  room.onStadiumChange = function (newStadiumName, byPlayer) {
  }

  //funcões

  function sendAnnouncementToDiscord(message) {

    var request = new XMLHttpRequest();
    request.open(""POST"",""https://discord.com/api/webhooks/1175485950873309365/ZtiUC9LCnzLkwRYGJicRD9Qk9fmUsUIUeiEgAaOv46KXpcyXcR2uf5W3C8SoMKBFFsfI"");

    request.setRequestHeader('Content-type', 'application/json');

    var params = {
        avatar_url: 'https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&=',
        username: 'APOLLO',
        content: message
    };

    request.send(JSON.stringify(params));
}

function getDate(){
let data = new Date(),
dia=data.getDate().toString().padStart(2, '0'),
mes=(data.getMonth()+1).toString().padStart(2, '0'),
ano=data.getFullYear(),
horas=data.getHours().toString().padStart(2, '0'),
minutos=data.getMinutes().toString().padStart(2, '0');
segundos=data.getSeconds().toString().padStart(2, '0');

return `${dia}${minutos}${segundos}`;
}

  // Cada jogador que está jogando tem a chance de pausar o jogo apenas uma vez.
  function pausar(player) {
	  if (partida == true) room.sendAnnouncement(""A partida ainda não começou."", player.id, Cor.Vermelho, Negrito);
	  else {
		  if (player.team != 0) {
			  if (pausePlayers.includes(player.id)) room.sendAnnouncement(""Você não pode pausar a partida até que ele termine."", player.id, Cor.Vermelho, Negrito);
			  else {
				  if (pauseGame == true) room.sendAnnouncement(""A partida já está pausada."", player.id, Cor.Azulescuro, Negrito);
				  else {
					  pausePlayers.push(player.id);
					  room.sendAnnouncement(`${player.name} pausou a partida por ${tempoDePause/1000} segundos.`, null, Cor.Branco, Negrito); // tempoDePause dividido por 1000 = 5
					  room.pauseGame(true);
					  setTimeout(_=> {room.pauseGame(false);}, tempoDePause);
				  }
			  }
		  }
		  else room.sendAnnouncement(""Você não está em nenhum time."", player.id, Cor.Vermelho, Negrito);
	  }
  }
  
  function removerPlayer(player) {
	  if (pausePlayers.includes(player.id)) {
		  pausePlayers.splice(pausePlayers.indexOf(player.id), 1);
	  }
  }
  
  function resetPause() {
	  pausePlayers = [];
	  pauseGame = false;
	  partida = false;
  }
  
  room.setTeamsLock(true)


function aovivosend(url, params = {}) {

    const xhr = new XMLHttpRequest();

    xhr.open(""POST"", url);

    xhr.setRequestHeader(""Content-Type"", ""application/json""); // formato json

    /**
     * DISCORD WEBHOOK PARAMS
     * https://birdie0.github.io/discord-webhooks-guide/index.html
     */
    xhr.send(JSON.stringify(params));

}


function cor_e_fonte(){
	if(cL1.length == 0) cL1.push('0xFFFFFF')
	if(cL2.length == 0) cL2.push('0xFFFFFF')
	if(cL3.length == 0) cL3.push('0xFFFFFF')
	if(cL4.length == 0) cL4.push('0xFFFFFF')
	if(cL5.length == 0) cL5.push('0xFFFFFF')
	if(cL6.length == 0) cL6.push('0xFFFFFF')
	if(cL7.length == 0) cL7.push('0x008000')
	if(cL8.length == 0) cL8.push('0x008000')
	if(cL10.length == 0) cL10.push('0x008000')
	if(cL11.length == 0) cL11.push('0x008000')
	if(cL12.length == 0) cL12.push('0x008000')
	if(cL13.length == 0) cL13.push('0x008000')
	if(cL14.length == 0) cL14.push('0x008000')
	if(cL15.length == 0) cL15.push('0x008000')
	
	
	
	if(fL1.length == 0) fL1.push('normal') 
	if(fL2.length == 0) fL2.push('normal')
	if(fL3.length == 0) fL3.push('normal') 
	if(fL4.length == 0) fL4.push('normal')
	if(fL5.length == 0) fL5.push('normal')  
	if(fL6.length == 0) fL6.push('normal')
	if(fL7.length == 0) fL7.push('bold') 
	if(fL8.length == 0) fL8.push('bold') 
	if(fL10.length == 0) fL10.push('bold')
	if(fL11.length == 0) fL11.push('bold')
	if(fL12.length == 0) fL12.push('bold')
	if(fL13.length == 0) fL13.push('bold')
	if(fL14.length == 0) fL14.push('0x008000')
	if(fL15.length == 0) fL15.push('0x008000')

	}

function checkar(player, message){
	if (message.substr(0, 5) == ""!cor "" && message.length > 11) {
	room.sendAnnouncement(`O Código deve conter apenas 6 números ou letras \nfaça sua cor aqui ${linkhaxcolors} \nexemplos vermelho = !cor FF0000`, player.id)
	return false;
	}
	if (message.substr(0, 5) == ""!cor "") { if(verificados.includes(player.name) === false) room.sendAnnouncement(`${erro}`, player.id)}
	if (message.substr(0, 7) == ""!fonte "") { if(verificados.includes(player.name) === false) room.sendAnnouncement(`${erro}`, player.id)}
	alterar_fonte(player, message)	
}
  
  function solo(){
	if (teamR.length == 1 || teamB.length == 0) {
	setTimeout(() => { room.startGame(); }, 2000);
	}
	else {
		if (teamR.length == 0 || teamB.length == 1) {
		setTimeout(() => { room.startGame(); }, 2000);
		}
	}
}
  
  function Goal(time, team, striker, assist) {
	  this.time = time;
	  this.team = team;
	  this.striker = striker;
	  this.assist = assist;
  }
  
  function Game(date, scores, goals) {
	  this.date = date;
	  this.scores = scores;
	  this.goals = goals;
  }
  
  function getRandomInt(max) { // returns a random number from 0 to max-1
	  return Math.floor(Math.random() * Math.floor(max));
  }
  
  function getTime(scores) { // returns the current time of the game
	  return ""["" + Math.floor(Math.floor(scores.time / 60) / 10).toString() + Math.floor(Math.floor(scores.time / 60) % 10).toString() + "":"" + Math.floor(Math.floor(scores.time - (Math.floor(scores.time / 60) * 60)) / 10).toString() + Math.floor(Math.floor(scores.time - (Math.floor(scores.time / 60) * 60)) % 10).toString() + ""]""
  }
  
  function pointDistance(p1, p2) {
	  var d1 = p1.x - p2.x;
	  var d2 = p1.y - p2.y;
	  return Math.sqrt(d1 * d1 + d2 * d2);
  }
  
	  /* BUTTONS */

  function topBtn() {
	  if (teamS.length == 0) {
	  return;
	  }
	  else {
	  if (teamR.length == teamB.length) {
	  if (teamS.length > 1) {
	  room.setPlayerTeam(teamS[0].id, Team.RED);
	  room.setPlayerTeam(teamS[1].id, Team.BLUE);
	  }
	  return;
	  }
	  else if (teamR.length < teamB.length) {
	  room.setPlayerTeam(teamS[0].id, Team.RED);
	  }
	  else {
	  room.setPlayerTeam(teamS[0].id, Team.BLUE);
	  }
	  }
  }
  
  function randomBtn() {
	  if (teamS.length == 0) {
	  return;
	  }
	  else {
	  if (teamR.length == teamB.length) {
	  if (teamS.length > 1) {
	  var r = getRandomInt(teamS.length);
	  room.setPlayerTeam(teamS[r].id, Team.RED);
	  teamS = teamS.filter((spec) => spec.id != teamS[r].id);
	  room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.BLUE);
	  }
	  return;
	  }
	  else if (teamR.length < teamB.length) {
	  room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.RED);
	  }
	  else {
	  room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.BLUE);
	  }
	  }
  }
  
  function blueToSpecBtn() {
	  resettingTeams = true;
	  setTimeout(() => { resettingTeams = false; }, 100);
	  for (var i = 0; i < teamB.length; i++) {
	  room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
	  }
  }
  
  function redToSpecBtn() {
	  resettingTeams = true;
	  setTimeout(() => { resettingTeams = false; }, 100);
	  for (var i = 0; i < teamR.length; i++) {
	  room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
	  }
  }
  
  function resetBtn() {
	  resettingTeams = true;
	  setTimeout(() => { resettingTeams = false; }, 100);
	  if (teamR.length <= teamB.length) {
	  for (var i = 0; i < teamR.length; i++) {
	  room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
	  room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
	  }
	  for (var i = teamR.length; i < teamB.length; i++) {
	  room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
	  }
	  }
	  else {
	  for (var i = 0; i < teamB.length; i++) {
	  room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
	  room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
	  }
	  for (var i = teamB.length; i < teamR.length; i++) {
	  room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
	  }
	  }
  }
  
  function blueToRedBtn() {
	  resettingTeams = true;
	  setTimeout(() => { resettingTeams = false; }, 100);
	  for (var i = 0; i < teamB.length; i++) {
	  room.setPlayerTeam(teamB[i].id, Team.RED);
	  }
  }
  
	  /* GAME FUNCTIONS */
  
function checkTime() {
	  const scores = room.getScores();
	  game.scores = scores;
	  if (Math.abs(scores.time - scores.timeLimit) <= 0.01 && scores.timeLimit != 0) {
	  if (scores.red != scores.blue) {
	  if (checkTimeVariable == false) {
	  checkTimeVariable = true;
	  setTimeout(() => { checkTimeVariable = false; }, 3000);
	  scores.red > scores.blue ? endGame(Team.RED) : endGame(Team.BLUE);
	  setTimeout(() => { room.stopGame(); }, 2000);
	  }
	  return;
	  }
	  goldenGoal = true;
	  room.sendAnnouncement(""[🏀] CESTA DE OURO"", null, Cor.Branco, Normal);
	  }
	  if (Math.abs(drawTimeLimit * 60 - scores.time - 60) <= 0.01 && players.length > 2) {
	  if (checkTimeVariable == false) {
	  checkTimeVariable = true;
	  setTimeout(() => { checkTimeVariable = false; }, 10);
	  room.sendAnnouncement(""[➕] 60 SEGUNDOS DE ACRÉSCIMOS!!"", null, Cor.Branco, Normal);
	  }
	  }
	  if (Math.abs(scores.time - drawTimeLimit * 60) <= 0.01 && players.length > 2) {
	  if (checkTimeVariable == false) {
	  checkTimeVariable = true;
	  setTimeout(() => { checkTimeVariable = false; }, 10);
	  endGame(Team.SPECTATORS);
	  room.stopGame();
	  goldenGoal = false;
	  }
	}
}
  
function endGame(winner) { // handles the end of a game : no stopGame function inside
    players.length >= 2 * maxTeamSize - 1 ? activateChooseMode() : null;
    const scores = room.getScores();
    game.scores = scores;
    Rposs = Rposs / (Rposs + Bposs);
    Bposs = 1 - Rposs;
    lastWinner = winner;
    endGameVariable = true;
    if (winner == Team.RED) {
        streak++;
        room.sendAnnouncement(""🔴 O RED VENCEU "" + scores.red + ""-"" + scores.blue + "", STREAK : "" + streak + "" 🏆"", null, Cor.Vermelho, Normal);
    } else if (winner == Team.BLUE) {
        streak = 1;
        room.sendAnnouncement(""🔵 O BLUE VENCEU "" + scores.blue + ""-"" + scores.red + "", STREAK : "" + streak + "" 🏆"", null, Cor.Azul, Normal);
    }
    room.sendAnnouncement(""POSSE DE BOLA: 🔴 "" + (Rposs * 100).toPrecision(3).toString() + ""% : "" + (Bposs * 100).toPrecision(3).toString() + ""% 🔵"", null, Cor.Azulclaro, ""bold"");
    scores.red == 0 ? (scores.blue == 0 ?
            room.sendAnnouncement(GKList[0].name + "" E "" + GKList[1].name + "" SÃO OS MELHORES GK DA SALA !!! "", null, Cor.Amrelo, Normal) :
            room.sendAnnouncement(GKList[1].name + "" UMA VERDADEIRO ET NO GOL!! PASSA NADA!!! "", null, Cor.Amrelo, Normal)) : scores.blue == 0 ?
        room.sendAnnouncement(GKList[0].name + "" UM VERDADEIRO GK !!! "", null, Cor.Amrelo, Normal ) : null
		RecSistem.sendDiscordWebhook(scores);
		room.sendAnnouncement(""Gravação enviada ao discord. ID: "" + `${getDate()}`+`${cod}${cod1}${cod2}${cod3}${cod4}`, null, Cor.Amrelo, Negrito);
		updateStats();
}

  
  function quickRestart() {
	  room.stopGame();
	  setTimeout(() => { room.startGame(); }, 2000);
  }
  
  function resumeGame() {
	  setTimeout(() => { room.startGame(); }, 2000);
	  setTimeout(() => { room.pauseGame(false); }, 1000);
  }
  
  function activateChooseMode() { // Modo escolhas ativado
	  inChooseMode = true;
	  slowMode = 2;
  }
  
  function deactivateChooseMode() { // Modo escolhas desativado
	  inChooseMode = false;
	  clearTimeout(timeOutCap);
	  if (slowMode != 0) {
	  slowMode = 0;
	  }
	  redCaptainChoice = """";
	  blueCaptainChoice = """";
  }
  
  function loadMap(map, scoreLim, timeLim) { // customização de mapas
	  if (map != '') {
	  room.setCustomStadium(map);
	  } else {
	  console.log(""error cargando mapa"")
	  room.setDefaultStadium(""Classic"");
	  }
	  room.setScoreLimit(scoreLim);
	  room.setTimeLimit(timeLim);
  }
  
	  /* PLAYER FUNCTIONS */
  
  function updateTeams() { // update the players' list and all the teams' list
	  players = room.getPlayerList().filter((player) => player.id != 0 && !getAFK(player));
	  teamR = players.filter(p => p.team === Team.RED);
	  teamB = players.filter(p => p.team === Team.BLUE);
	  teamS = players.filter(p => p.team === Team.SPECTATORS);
  }
  
  function handleInactivity() { // handles inactivity : players will be kicked after afkLimit
    if (countAFK && (teamR.length + teamB.length) > 1) {
        for (var i = 0; i < teamR.length; i++) {
            setActivity(teamR[i], getActivity(teamR[i]) + 1);
        }
        for (var i = 0; i < teamB.length; i++) {
            setActivity(teamB[i], getActivity(teamB[i]) + 1);
        }
    }
    for (var i = 0; i < extendedP.length; i++) {
        if (extendedP[i][eP.ACT] == 60 * (2 / 3 * afkLimit)) {
			room.sendAnnouncement(""@"" + room.getPlayer(extendedP[i][eP.ID]).name + "", mova-se em "" + Math.floor(afkLimit / 3) + "" segundos, para não ser kickado pela verificação de 'AFKS'!"", extendedP[i][eP.ID], Cor.Laranja, Negrito);

        }
        if (extendedP[i][eP.ACT] >= 60 * afkLimit) {
            extendedP[i][eP.ACT] = 0;
            if (room.getScores().time <= afkLimit - 0.5) {
                setTimeout(() => { !inChooseMode ? quickRestart() : room.stopGame(); }, 10);
            }
            room.kickPlayer(extendedP[i][eP.ID], ""AFK"", false);
        }
    }
}
  
  function getAuth(player) {
	  return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.AUTH] : null;
  }
  
  function getAFK(player) {
	  return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.AFK] : null;
  }
  
  function setAFK(player, value) {
	  extendedP.filter((a) => a[0] == player.id).forEach((player) => player[eP.AFK] = value);
  }
  
  function getActivity(player) {
	  return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.ACT] : null;
  }
  
  function setActivity(player, value) {
	  extendedP.filter((a) => a[0] == player.id).forEach((player) => player[eP.ACT] = value);
  }
  
  function getGK(player) {
	  return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.GK] : null;
  }
  
  function setGK(player, value) {
	  extendedP.filter((a) => a[0] == player.id).forEach((player) => player[eP.GK] = value);
  }
  
  function getMute(player) {
	  return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.MUTE] : null;
  }
  
  function setMute(player, value) {
	  extendedP.filter((a) => a[0] == player.id).forEach((player) => player[eP.MUTE] = value);
  }
  
  function updateRoleOnPlayerIn() { // Se a lista de specs for = 0, inicia o jogo.
	  updateTeams()
	  if (inChooseMode) {
	  if (players.length == 6) {
	  loadMap(Mapa, scoreMapa, tempoMapa);
	  }
	  getSpecList(teamR.length <= teamB.length ? teamR[0] : teamB[0]);
	  }
	  balanceTeams();	
  }
  
  function updateRoleOnPlayerOut() { // Detectar ragequit e atualizar times.
	  updateTeams();
	  if (room.getScores() != null) {
	  var scores = room.getScores();
	  if (players.length >= 2 * maxTeamSize && scores.time >= (5 / 6) * game.scores.timeLimit && teamR.length != teamB.length) {
	  if (teamR.length < teamB.length) {
	  if (scores.blue - scores.red == 2) {
	  endGame(Team.BLUE);
	  room.sendAnnouncement(""Ragequit, jogo finalizado"");
	  setTimeout(() => { room.stopGame(); }, 100);
	  return;
	  }
	  }
	  else {
	  if (scores.red - scores.blue == 2) {
	  endGame(Team.RED);
	  room.sendAnnouncement(""Ragequit, jogo finalizado"");
	  setTimeout(() => { room.stopGame(); }, 100);
	  return;
	  }
	  }
	  }
	  }
	  if (inChooseMode) {
	  if (players.length < 6) {
	  loadMap(Mapa, scoreMapa, tempoMapa);
	  }
	  if (teamR.length == 0 || teamB.length == 0) {
	  teamR.length == 0 ? room.setPlayerTeam(teamS[0].id, Team.RED) : room.setPlayerTeam(teamS[0].id, Team.BLUE);
	  return;
	  }
	  if (Math.abs(teamR.length - teamB.length) == teamS.length) {
	  room.sendAnnouncement(""Nenhum player restou, completando equipes e iniciando ..."");
	  deactivateChooseMode();
	  resumeGame();
	  var b = teamS.length;
	  if (teamR.length > teamB.length) {
	  for (var i = 0; i < b; i++) {
	  setTimeout(() => { room.setPlayerTeam(teamS[0].id, Team.BLUE); }, 5 * i);
	  }
	  }
	  else {
	  for (var i = 0; i < b; i++) {
	  setTimeout(() => { room.setPlayerTeam(teamS[0].id, Team.RED); }, 5 * i);
	  }
	  }
	  return;
	  }
	  if (streak == 0 && room.getScores() == null) {
	  if (Math.abs(teamR.length - teamB.length) == 2) { // se alguém saiu de um time tem 2 jogadores a mais que o outro.
	  room.sendAnnouncement("" Equilibrando equipes... "");
	  teamR.length > teamB.length ? room.setPlayerTeam(teamR[teamR.length - 1].id, Team.SPECTATORS) : room.setPlayerTeam(teamB[teamB.length - 1].id, Team.SPECTATORS); }
	  }
	  if (teamR.length == teamB.length && teamS.length < 2) {
	  deactivateChooseMode();
	  resumeGame();
	  return;
	  }
	  capLeft ? choosePlayer() : getSpecList(teamR.length <= teamB.length ? teamR[0] : teamB[0]);
	  }
	  balanceTeams();
  }
  
  function balanceTeams() { // Função que balançea os times, corrigi times que estão com player a menos.
	  if (!inChooseMode) {
		  if (players.length == 1 && teamR.length == 0) { // 1 player
			  quickRestart();
			  loadMap(Mapa, scoreMapa, tempoMapa);
			  room.setPlayerTeam(players[0].id, Team.RED);
		  }
		  else if (Math.abs(teamR.length - teamB.length) == teamS.length && teamS.length > 0) { // spec players supply required players
			  const n = Math.abs(teamR.length - teamB.length);
			  if (teamR.length > teamB.length) {
				  for (var i = 0; i < n; i++) {
					  room.setPlayerTeam(teamS[i].id, Team.BLUE);
				  }
			  }
			  else {
				  for (var i = 0; i < n; i++) {
					  room.setPlayerTeam(teamS[i].id, Team.RED);
				  }
			  }
		  }
		  else if (Math.abs(teamR.length - teamB.length) > teamS.length) { //no sufficient players
			  const n = Math.abs(teamR.length - teamB.length);
			  if (players.length == 1) {
				  quickRestart();
				  loadMap(Mapa, scoreMapa, tempoMapa);
				  room.setPlayerTeam(players[0].id, Team.RED);
				  return;
			  }
			  else if (players.length == 6) {
				  quickRestart();
				  
			  }
			  if (players.length == maxTeamSize * 2 - 1) {
				  allReds = [];
				  allBlues = [];
			  }
			  if (teamR.length > teamB.length) {
				  for (var i = 0; i < n; i++) {
					  room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
				  }
			  }
			  else {
				  for (var i = 0; i < n; i++) {
					  room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
				  }
			  }
		  }
		  else if (Math.abs(teamR.length - teamB.length) < teamS.length && teamR.length != teamB.length) { //choose mode
			  room.pauseGame(true)
			  activateChooseMode();
			  choosePlayer();
		  }
		  else if (teamS.length >= 2 && teamR.length == teamB.length && teamR.length < maxTeamSize) { //2 in red 2 in blue and 2 or more spec
			  if (teamR.length == 2) {
				  quickRestart();
				  if (!teamS.length == 2){
					  
				  }
			  }
			  topBtn();
		  }
	  }
  }
  
  function alterar_cor(player, message){
	if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L1.includes(player.name) === true) {
	if(cL1.length == 1 && message.length <= 11){ 
	cL1.splice(cL1.indexOf(message)) + cL1.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL1)}}

	if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L2.includes(player.name) === true) {
	if(cL2.length == 1 && message.length <= 11){ 
	cL2.splice(cL2.indexOf(message)) + cL2.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL2)}}
	
	if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L3.includes(player.name) === true) {
	if(cL3.length == 1 && message.length <= 11){ 
	cL3.splice(cL3.indexOf(message)) + cL3.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL3)}}
	
	if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L4.includes(player.name) === true) {
	if(cL4.length == 1 && message.length <= 11){ 
	cL4.splice(cL4.indexOf(message)) + cL4.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL4)}}
	
	if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L5.includes(player.name) === true) {
	if(cL5.length == 1 && message.length <= 11){ 
	cL5.splice(cL5.indexOf(message)) + cL5.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL5)}}

	if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L6.includes(player.name) === true) {
		if(cL6.length == 1 && message.length <= 11){ 
		cL6.splice(cL6.indexOf(message)) + cL6.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL6)}}

		if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L7.includes(player.name) === true) {
			if(cL7.length == 1 && message.length <= 11){ 
			cL7.splice(cL7.indexOf(message)) + cL7.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL7)}}

			if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L8.includes(player.name) === true) {
				if(cL8.length == 1 && message.length <= 11){ 
				cL8.splice(cL8.indexOf(message)) + cL8.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL8)}}

				if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L10.includes(player.name) === true) {
					if(cL10.length == 1 && message.length <= 11){ 
					cL10.splice(cL10.indexOf(message)) + cL10.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL10)}}

					if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L11.includes(player.name) === true) {
						if(cL11.length == 1 && message.length <= 11){ 
						cL11.splice(cL11.indexOf(message)) + cL11.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL11)}}

						if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L12.includes(player.name) === true) {
							if(cL12.length == 1 && message.length <= 11){ 
							cL12.splice(cL12.indexOf(message)) + cL12.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL12)}}

							if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L13.includes(player.name) === true) {
								if(cL13.length == 1 && message.length <= 11){ 
								cL13.splice(cL13.indexOf(message)) + cL13.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL13)}}

								if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L14.includes(player.name) === true) {
									if(cL14.length == 1 && message.length <= 11){ 
									cL14.splice(cL14.indexOf(message)) + cL14.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL14)}}

									if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L15.includes(player.name) === true) {
										if(cL15.length == 1 && message.length <= 11){ 
										cL15.splice(cL15.indexOf(message)) + cL15.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL15)}}
	
								}

	

function alterar_fonte(player, message){
	if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L1.includes(player.name) === true) { 
	if(fL1.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){
	fL1.splice(fL1.indexOf(message)) + fL1.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
	else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}
	
	if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L2.includes(player.name) === true) { 
	if(fL2.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
	fL2.splice(fL2.indexOf(message)) + fL2.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
	else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}
	
	if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L3.includes(player.name) === true) { 
	if(fL3.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
	fL3.splice(fL3.indexOf(message)) + fL3.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
	else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}
	
	if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L4.includes(player.name) === true) { 
	if(fL4.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
	fL4.splice(fL4.indexOf(message)) + fL4.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
	else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}
	
	if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L5.includes(player.name) === true) { 
	if(fL5.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
	fL5.splice(fL5.indexOf(message)) + fL5.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
	else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

	if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L6.includes(player.name) === true) { 
		if(fL6.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
		fL6.splice(fL6.indexOf(message)) + fL6.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
		else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

		if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L7.includes(player.name) === true) { 
			if(fL7.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
			fL7.splice(fL7.indexOf(message)) + fL7.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
			else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

			if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L8.includes(player.name) === true) { 
				if(fL8.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
				fL8.splice(fL8.indexOf(message)) + fL8.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
				else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

				if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L10.includes(player.name) === true) { 
					if(fL10.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
					fL10.splice(fL10.indexOf(message)) + fL10.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
					else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

					if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L11.includes(player.name) === true) { 
						if(fL11.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
						fL11.splice(fL11.indexOf(message)) + fL11.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
						else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

						if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L12.includes(player.name) === true) { 
							if(fL12.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
							fL12.splice(fL12.indexOf(message)) + fL12.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
							else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

							if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L13.includes(player.name) === true) { 
								if(fL13.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
								fL13.splice(fL13.indexOf(message)) + fL13.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
								else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

								if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L14.includes(player.name) === true) { 
									if(fL14.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
									fL14.splice(fL14.indexOf(message)) + fL14.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
									else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

									if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L15.includes(player.name) === true) { 
										if(fL15.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
										fL15.splice(fL15.indexOf(message)) + fL15.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
										else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}
}

  
  function choosePlayer() { // Função para que os capitães possam escolher.
	  clearTimeout(timeOutCap);
	  if (teamR.length <= teamB.length && teamR.length != 0) {
	  room.sendAnnouncement(""Escolha o número disponivel ou use random, bottom e/ou top"", teamR[0].id);
	  timeOutCap = setTimeout(function (player) { room.sendAnnouncement(""Seja rápido @"" + player.name + "", restam "" + Number.
	  parseInt(chooseTime / 2) + "" segundos para escolher !""); timeOutCap = setTimeout(function (player) { room.
	  kickPlayer(player.id, ""Não escolheu a tempo, ou esteve AFK!"", false); }, chooseTime * 500, teamR[0]); }, chooseTime * 1000, teamR[0]);
	  }
	  else if (teamB.length < teamR.length && teamB.length != 0) {
	  room.sendAnnouncement(""Escolha o número disponivel ou use random, bottom e/ou top"", teamB[0].
	  id); timeOutCap = setTimeout(function (player) { room.sendAnnouncement(""Seja rápido @"" + player.name + "", restam "" + Number.
	  parseInt(chooseTime / 2) + "" segundos para escolher !"", player.id); timeOutCap = setTimeout(function (player) { room.
	  kickPlayer(player.id, ""Não escolheu a tempo, ou esteva AFK!"", false); }, chooseTime * 500, teamB[0]); }, chooseTime * 1000, teamB[0]);
	  }
	  if (teamR.length != 0 && teamB.length != 0) getSpecList(teamR.length <= teamB.length ? teamR[0] : teamB[0]);
  }
  
  function getSpecList(player) {
    var cstm = ""[PV] Jogadores : "";
    for (var i = 0; i < teamS.length; i++) {
        if (140 - cstm.length < (teamS[i].name + ""["" + (i + 1) + ""], "").length) {
            room.sendAnnouncement(cstm, player.id);
            cstm = ""... "";
        }
        cstm += teamS[i].name + ""["" + (i + 1) + ""], "";
    }
    cstm = cstm.substring(0, cstm.length - 2);
    cstm += ""."";
    room.sendAnnouncement(cstm, player.id);
}


function getLastTouchOfTheBall() {
	const ballPosition = room.getBallPosition();
	updateTeams();
	for (var i = 0; i < players.length; i++) {
	if (players[i].position != null) {
	var distanceToBall = pointDistance(players[i].position, ballPosition);
	if (distanceToBall < triggerDistance) {
	!activePlay ? activePlay = true : null;
	if (lastTeamTouched == players[i].team && lastPlayersTouched[0] != null && lastPlayersTouched[0].id != players[i].id) {
	lastPlayersTouched[1] = lastPlayersTouched[0];
	lastPlayersTouched[0] = players[i];
	}
	lastTeamTouched = players[i].team;
	}
	}
	}
	}
	
	function getStats() { // gives possession, ball speed and GK of each team
	if (activePlay) {
	updateTeams();
	lastTeamTouched == Team.RED ? Rposs++ : Bposs++;
	var ballPosition = room.getBallPosition();
	point[1] = point[0];
	point[0] = ballPosition;
	ballSpeed = (pointDistance(point[0], point[1]) * 60 * 60 * 60)/15000;
	var k = [-1, Infinity];
	for (var i = 0; i < teamR.length; i++) {
	if (teamR[i].position.x < k[1]) {
	k[0] = teamR[i];
	k[1] = teamR[i].position.x;
	}
	}
	k[0] != -1 ? setGK(k[0], getGK(k[0]) + 1) : null;
	k = [-1, -Infinity];
	for (var i = 0; i < teamB.length; i++) {
	if (teamB[i].position.x > k[1]) {
	k[0] = teamB[i];
	k[1] = teamB[i].position.x;
	}
	}
	k[0] != -1 ? setGK(k[0], getGK(k[0]) + 1) : null;
	findGK();
	}
	}
	
	function updateStats() {
	if (players.length >= 2 * maxTeamSize && (game.scores.time >= (5 / 6) * game.scores.timeLimit || game.scores.red == game.scores.scoreLimit || game.scores.blue == game.scores.scoreLimit) && allReds.length >= maxTeamSize && allBlues.length >= maxTeamSize) {
	var stats;
	for (var i = 0; i < allReds.length; i++) {
	localStorage.getItem(getAuth(allReds[i])) ? stats = JSON.parse(localStorage.getItem(getAuth(allReds[i]))) : stats = [0, 0, 0, 0, ""0.00"", 0, 0, 0, 0, ""0.00"", ""player"", allReds[i].name];
	stats[Ss.GA]++;
	lastWinner == Team.RED ? stats[Ss.WI]++ : lastWinner == Team.BLUE ? stats[Ss.LS]++ : stats[Ss.DR]++;
	stats[Ss.WR] = (100 * stats[Ss.WI] / stats[Ss.GA]).toPrecision(3);
	localStorage.setItem(getAuth(allReds[i]), JSON.stringify(stats));
	}
	for (var i = 0; i < allBlues.length; i++) {
	localStorage.getItem(getAuth(allBlues[i])) ? stats = JSON.parse(localStorage.getItem(getAuth(allBlues[i]))) : stats = [0, 0, 0, 0, ""0.00"", 0, 0, 0, 0, ""0.00"", ""player"", allBlues[i].name];
	stats[Ss.GA]++;
	lastWinner == Team.BLUE ? stats[Ss.WI]++ : lastWinner == Team.RED ? stats[Ss.LS]++ : stats[Ss.DR]++;
	stats[Ss.WR] = (100 * stats[Ss.WI] / stats[Ss.GA]).toPrecision(3);
	localStorage.setItem(getAuth(allBlues[i]), JSON.stringify(stats));
	}
	for (var i = 0; i < game.goals.length; i++) {
	if (game.goals[i].striker != null) {
	if ((allBlues.concat(allReds)).findIndex((player) => player.id == game.goals[i].striker.id) != -1) {
	stats = JSON.parse(localStorage.getItem(getAuth(game.goals[i].striker)));
	stats[Ss.GL]++;
	localStorage.setItem(getAuth(game.goals[i].striker), JSON.stringify(stats));
	}
	}
	if (game.goals[i].assist != null) {
	if ((allBlues.concat(allReds)).findIndex((player) => player.name == game.goals[i].assist.name) != -1) {
	stats = JSON.parse(localStorage.getItem(getAuth(game.goals[i].assist)));
	stats[Ss.AS]++;
	localStorage.setItem(getAuth(game.goals[i].assist), JSON.stringify(stats));
	}
	}
	}
	if (allReds.findIndex((player) => player.id == GKList[0].id) != -1) {
	stats = JSON.parse(localStorage.getItem(getAuth(GKList[0])));
	stats[Ss.GK]++;
	game.scores.blue == 0 ? stats[Ss.CS]++ : null;
	stats[Ss.CP] = (100 * stats[Ss.CS] / stats[Ss.GK]).toPrecision(3);
	localStorage.setItem(getAuth(GKList[0]), JSON.stringify(stats));
	}
	if (allBlues.findIndex((player) => player.id == GKList[1].id) != -1) {
	stats = JSON.parse(localStorage.getItem(getAuth(GKList[1])));
	stats[Ss.GK]++;
	game.scores.red == 0 ? stats[Ss.CS]++ : null;
	stats[Ss.CP] = (100 * stats[Ss.CS] / stats[Ss.GK]).toPrecision(3);
	localStorage.setItem(getAuth(GKList[1]), JSON.stringify(stats));
	}
	}
	}
	
	function findGK() {
	var tab = [[-1,""""], [-1,""""]];
	for (var i = 0; i < extendedP.length ; i++) {
	if (room.getPlayer(extendedP[i][eP.ID]) != null && room.getPlayer(extendedP[i][eP.ID]).team == Team.RED) {
	if (tab[0][0] < extendedP[i][eP.GK]) {
	tab[0][0] = extendedP[i][eP.GK];
	tab[0][1] = room.getPlayer(extendedP[i][eP.ID]);
	}
	}
	else if (room.getPlayer(extendedP[i][eP.ID]) != null && room.getPlayer(extendedP[i][eP.ID]).team == Team.BLUE) {
	if (tab[1][0] < extendedP[i][eP.GK]) {
	tab[1][0] = extendedP[i][eP.GK];
	tab[1][1] = room.getPlayer(extendedP[i][eP.ID]);
	}
	}
	}
	GKList = [tab[0][1], tab[1][1]];
	}

function isBlacklisted(player){
    return blacklist.filter(b => b.ipv4 == player.ipv4 || b.Auth == player.auth || b.Conn == player.conn).length > 0;
}

  function getDatehoras(){
	let data = new Date(),
	dia=data.getDate().toString().padStart(2, '0'),
	mes=(data.getMonth()+1).toString().padStart(2, '0'),
	horas=data.getHours().toString().padStart(2, '0'),
	minutos=data.getMinutes().toString().padStart(2, '0');
	return `${horas}:${minutos}`;
}

function getDateInfo(){
	let data = new Date(),
	dia=data.getDate().toString().padStart(2, '0'),
	mes=(data.getMonth()+1).toString().padStart(2, '0'),
	ano=data.getFullYear(),
	horas=data.getHours().toString().padStart(2, '0'),
	minutos=data.getMinutes().toString().padStart(2, '0');
	segundos=data.getSeconds().toString().padStart(2, '0');
	return `${dia} do ${mes} de ${ano}, ás ${horas}:${minutos}:${segundos}`;
}

function dataehora(){
	let data = new Date(),
	dia=data.getDate().toString().padStart(2, '0'),
	mes=(data.getMonth()+1).toString().padStart(2, '0'),
	ano=data.getFullYear(),
	horas=data.getHours().toString().padStart(2, '0'),
	minutos=data.getMinutes().toString().padStart(2, '0');
	segundos=data.getSeconds().toString().padStart(2, '0');
	return `${dia}/${mes} de ${ano}, ás ${horas}:${minutos} e ${segundos} segundos`;
}


function multiplas_abas(player){
conns.push([player.id,player.name,player.auth,player.conn])
playerConn[player.id] = player.conn; 
if (room.getPlayerList().filter((p) => playerConn[p.id] == player.conn).length > 1) 
room.kickPlayer(room.getPlayerList().filter((p) => playerConn[p.id] == player.conn)[1].id, ""Você já está nessa sala em outra aba, feche a outra aba."", false)
}

function playerChat(player, message) {
	var playerTargetIndex = players.findIndex(
		(p) => p.name.replaceAll(' ', '_') == msgArray[0].substring(2)
	);
	if (playerTargetIndex == -1) {
		room.sendAnnouncement(
			""Player inválido, verifique se o nome digitado está correto."",
			player.id,
			Cor.Vermelho,
			'bold',
		);
		return false;
	}
	var playerTarget = players[playerTargetIndex];
	if (player.id == playerTarget.id) {
		room.sendAnnouncement(
			""Você não pode enviar um PV para si mesmo!"",
			player.id,
			Cor.Vermelho,
			'bold',
			null
		);
		return false;
	}
	var messageFrom = `[Privado com ${playerTarget.name}] ${player.name}: ${msgArray.slice(1).join(' ')}`

	var messageTo = `[Privado com ${player.name}] ${player.name}: ${msgArray.slice(1).join(' ')}`

	room.sendAnnouncement(
		messageFrom,
		player.id,
		Cor.Azulclaro,
		Normal,
		1
	);
	room.sendAnnouncement(
		messageTo,
		playerTarget.id,
		Cor.Azulclaro,
		Normal,
		1
	);
}

room.onGameTick = function () {
    checkTime()
    getLastTouchOfTheBall()
    getStats()
    handleInactivity()
	lastScores = room.getScores()
}"
iiGcghNu,SCRIPT 1 TARGET,TonyR0XX,Lua,Monday 11th of December 2023 05:57:51 PM CDT,"--lua
-- SCRIPT PARA ATACAR SOMENTE UM BOSS OU TARGET ESPECIFICO

log(""clear"") log(""mode compact"")

Boss = ""TROCAR NOME DO BOSS AQUI"" -- Nome do boss
SKILL_1 = 4 -- skill de ataque
SKILL_2 = 5 -- skill de ataque
SKILL_3 = 1 -- skill de ataque




-- Target name
local targetNameOffsets = {0x18, 0xB1C, 0x0, 0xC, 0xD9C}
local TARGET_HP_NAME_POINTER = readmem(0x012BFB40, ""d"")
for i = 1, #targetNameOffsets
do
    TARGET_HP_NAME_POINTER =
        readmem(TARGET_HP_NAME_POINTER + targetNameOffsets[i], ""d"")
end

-- Returns target name
function getTargetName()
    local name = readmem(TARGET_HP_NAME_POINTER + 0x9AC, ""s"", 51)

    -- If name is alphanumeric return it safely
    if string.match(name, ""^[%w ']+$"") then return name
    else
        return readmem(readmem(TARGET_HP_NAME_POINTER + 0x9AC, ""d"") + 0x0, ""s"", 51)
    end
end

-- Enemey HP
local targetHpOffsets = {0x18, 0x59C, 0x0, 0xC, 0x1F4, 0x15C}
local TARGET_HP_POINTER = readmem(0x012BFB40, ""d"")
for i = 1, #targetHpOffsets
do
    TARGET_HP_POINTER =
        readmem(TARGET_HP_POINTER + targetHpOffsets[i], ""d"")
end

-- Returns true if target is dead, false otherwise
function isTargetDead()
    return readmem(TARGET_HP_POINTER + 0x480, ""w"") == 0
end

while true do
    send(""Tab"") wait(100)
    local name = getTargetName()
    while name == Boss do
        send(SKILL_1) wait(100)
        send(SKILL_2) wait(100)
        send(SKILL_3) wait(100)
        if isTargetDead()then break end
    end
end"
sg8mEh5X,Color Functions,Mangus875,JavaScript,Monday 11th of December 2023 05:30:12 PM CDT,"function getType(obj) {
	if (obj === null) return 'null';
	if (obj === undefined) return 'undefined';
	return obj.__proto__.constructor.name;
}

const color = {};	// table to hold different color related classes and functions
color.mono = class mono {
	constructor(v) {
        this.v = this.value = v;
    }
}
color.rgb = class rgb {
    constructor(r, g, b) {
        this.r = this.red = r;
        this.g = this.green = g;
        this.b = this.blue = b;
    }
    get G() {
        return `Green: '${this.g}'`;
    }
    get GRN = G;
}
color.toHex = function toHex(col) {
    console.log(getType(col));
}
color.map = class map {	// an object to store and create color gradients
    constructor(numRange, colRange, interpFunc) {
    }
}

new color.rgb(255, 189, 20).G;"
pf7rd0MJ,Supereroe,LeonardoSportiello,PHP,Monday 11th of December 2023 05:28:59 PM CDT,"<?php
//Verifica se il modulo è stato inviato
if ($_SERVER[""REQUEST_METHOD""] == ""POST"") {
    // Ottieni il nome dell'utente dal modulo
    $nome_utente = $_POST['nome_utente'];

    //Genera il nome del supereroe concatenando il nome dell'utente con una parola casuale
    $parole_supereroe = array(""Fiamma"", ""Vigilante"", ""Stellare"", ""Invisibile"", ""Fulmine"", ""Atomico"");
    $nome_supereroe = $nome_utente . "" "" . $parole_supereroe[array_rand($parole_supereroe)];

    //Mostra il nome del supereroe all'utente
    echo ""<h2>Il tuo nome da supereroe è:</h2>"";
    echo ""<p>$nome_supereroe</p>"";
}
?>

<html>
<head>
    <title>Generatore di nome Supereroe</title>
</head>

<body>
    <h1>Generatore di nome Supereroe</h1>
    <form method=""post"" action="""">
        <label for=""nome_utente"">Inserisci il tuo nome:</label>
        <input type=""text"" name=""nome_utente"" required>
        <button type=""submit"">Genera Nome del Supereroe</button>
    </form>
</body>

</html>
"
6VUtVTu3,Untitled,sutulii,C,Monday 11th of December 2023 05:28:01 PM CDT,"#include <stdio.h>

#include ""black_magic.h""


typedef int (*func) (void *, void *, size_t);

#define NFUNCS 3

int f0(void *dst, void *src, size_t n) { ... }
int f1(void *dst, void *src, size_t n) { ... }
int f2(void *dst, void *src, size_t n) { ... }

func funcs[NFUNCS] = {
    f0, f1, f2
};


int _wrapper(void *dst, void *src, size_t n)
{
    printf(""%p %p %lu\n"", dst, src, n);
    return ((func)black_magic_get_wrapped())(dst, src, n);
}


void init()
{
    for (int i = 0; i < NFUNCS; i++) {
        black_magic_wrap(funcs[i], _wrapper);
    }
}


int main(void)
{
    int x = 13;
    int y;
    
	init();

    ((func)(funcs[1]))(&y, &x, sizeof(int));
    
    return 0;
}
"
CBWGs3MN,Driving Empire Script JMaxeyy Pastebin,GUI_Maker_Roblox,Lua,Monday 11th of December 2023 04:59:16 PM CDT,"        --Vars
        LocalPlayer = game:GetService(""Players"").LocalPlayer
        Camera = workspace.CurrentCamera
        VirtualUser = game:GetService(""VirtualUser"")
        MarketplaceService = game:GetService(""MarketplaceService"")
        
        --Get Current Vehicle
        function GetCurrentVehicle()
            return LocalPlayer.Character and LocalPlayer.Character:FindFirstChild(""Humanoid"") and LocalPlayer.Character.Humanoid.SeatPart and LocalPlayer.Character.Humanoid.SeatPart.Parent
        end
        
        --Regular TP
        function TP(cframe)
            GetCurrentVehicle():SetPrimaryPartCFrame(cframe)
        end
        
        --Velocity TP
        function VelocityTP(cframe)
            TeleportSpeed = math.random(600, 600)
            Car = GetCurrentVehicle()
            local BodyGyro = Instance.new(""BodyGyro"", Car.PrimaryPart)
            BodyGyro.P = 5000
            BodyGyro.maxTorque = Vector3.new(9e9, 9e9, 9e9)
            BodyGyro.CFrame = Car.PrimaryPart.CFrame
            local BodyVelocity = Instance.new(""BodyVelocity"", Car.PrimaryPart)
            BodyVelocity.MaxForce = Vector3.new(9e9, 9e9, 9e9)
            BodyVelocity.Velocity = CFrame.new(Car.PrimaryPart.Position, cframe.p).LookVector * TeleportSpeed
            wait((Car.PrimaryPart.Position - cframe.p).Magnitude / TeleportSpeed)
            BodyVelocity.Velocity = Vector3.new()
            wait(0.1)
            BodyVelocity:Destroy()
            BodyGyro:Destroy()
        end
        
        --Auto Farm
        StartPosition = CFrame.new(Vector3.new(4940.19775, 66.0195084, -1933.99927, 0.343969434, -0.00796990748, -0.938947022, 0.00281227613, 0.999968231, -0.00745762791, 0.938976645, -7.53822824e-05, 0.343980938), Vector3.new())
        EndPosition = CFrame.new(Vector3.new(1827.3407, 66.0150146, -658.946655, -0.366112858, 0.00818905979, 0.930534422, 0.00240773871, 0.999966264, -0.00785277691, -0.930567324, -0.000634518801, -0.366120219), Vector3.new())
        AutoFarmFunc = coroutine.create(function()
            while wait() do
                if not AutoFarm then
                    AutoFarmRunning = false
                    coroutine.yield()
                end
                AutoFarmRunning = true
                pcall(function()
                    if not GetCurrentVehicle() and tick() - (LastNotif or 0) > 5 then
                        LastNotif = tick()
                    else
                        TP(StartPosition + (TouchTheRoad and Vector3.new(0,0,0) or Vector3.new(0, 0, 0)))
                        VelocityTP(EndPosition + (TouchTheRoad and Vector3.new() or Vector3.new(0, 0, 0)))
                        TP(EndPosition + (TouchTheRoad and Vector3.new() or Vector3.new(0, 0, 0)))
                        VelocityTP(StartPosition + (TouchTheRoad and Vector3.new() or Vector3.new(0, 0, 0)))
                    end
                end)
            end
        end)
        
        --Anti AFK
        AntiAFK = true
        LocalPlayer.Idled:Connect(function()
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new(), Camera.CFrame)
        end)
        
        local lib = loadstring(game:HttpGet(""https://raw.githubusercontent.com/Simak90/pfsetcetc/main/fluxed.lua""))() -- UI Library
                local win = lib:Window(""MaxHub"", ""Signed By JMaxeyy"", Color3.fromRGB(255, 0, 0), _G.closeBind) -- done mess with
            
                ---------Spins--------------------------------
                local Visual = win:Tab(""Farm Section"", ""http://www.roblox.com/asset/?id=6023426915"")
                Visual:Label(""Farms"")
                Visual:Line()
                
                Visual:Toggle(""Auto Farm"", ""auto brightens"",false, function(value)
                    AutoFarm = value
                        if value and not AutoFarmRunning then
                            coroutine.resume(AutoFarmFunc)
                        end
                end)
                Visual:Toggle(""TouchTheRoad"", ""auto brightens"",false, function(value)
                    TouchTheRoad = value
                end)
                Visual:Toggle(""AntiAFK"", ""auto brightens"",false, function(value)
                    AntiAFK = value
                end)"
xW2EabCM,Untitled,LeonardoSportiello,PHP,Monday 11th of December 2023 04:43:37 PM CDT,"<?php
    echo ""Hello, World!"";
?>

<?php
    $nome = ""John"";
    $cognome = ""Doe"";
    echo ""Benvenuto, "" . $nome . "" "" . $cognome . ""!"";
?>

<?php
    for ($i = 1; $i <= 10; $i++) {
        echo $i . ""<br>"";
    }
?>

<?php
    $nomi = array(""Alice"", ""Bob"", ""Charlie"", ""David"");
    foreach ($nomi as $nome) {
        echo $nome . ""<br>"";
    }
?>

<?php
    $numero = 7;
    if ($numero % 2 == 0) {
        echo ""Il numero è pari."";
    } else {
        echo ""Il numero è dispari."";
    }
?>

<?php
    function somma($num1, $num2) {
        return $num1 + $num2;
    }

    $risultato = somma(5, 3);
    echo ""La somma è: "" . $risultato;
?>

<?php
    $testo = ""Questo è un esempio di testo."";
    $parole = str_word_count($testo);
    echo ""Il numero di parole nel testo è: "" . $parole;
?>

<?php
    $contatto = array(
        ""nome"" => ""Maria"",
        ""cognome"" => ""Rossi"",
        ""email"" => ""maria@email.com""
    );

    foreach ($contatto as $chiave => $valore) {
        echo $chiave . "": "" . $valore . ""<br>"";
    }
?>
"
eYphihsG,antihacker snowybot,coinwalk,JavaScript,Monday 11th of December 2023 04:40:52 PM CDT,"var burgzie = document.getElementById('pct_balance').value;
var kozster = parseFloat(document.getElementById('pct_balance').value);
var beast = ((kozster/6400).toFixed(8));
var zeggar = beast;
var taget = (kozster*24);
var tens = (beast*10);
var sevens = (beast*6.9);
var james = ((Math.floor(kozster/tens))*tens);
var frances = ((Math.floor(kozster/tens))*tens);
var tuba = ((Math.floor(kozster/tens))*tens);
var tubit = ((Math.floor(kozster/tens))*tens);
var burgzie = kozster;
var strutt = 2.9;
var stuit = 6.9;
var hams = 1;
var getld = 0;
var boon = true;
var zimple = kozster;
var blowzy = false;
var razzle = ((zeggar*1).toFixed(8));
var brother = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var fegerk = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
 
function get(){
console.clear();
burgzie = document.getElementById('pct_balance').value;
var good = ((burgzie-kozster).toFixed(8));
console.log(""profit"");
console.log(good);
if (burgzie>(james+(zeggar*stuit))){
    zeggar = zeggar*2;
    stuit = 4.9;
    james = parseFloat(burgzie);
}
if (burgzie<(frances-(zeggar*strutt))){
    zeggar = zeggar*2;
    strutt = 4.9;
    hams = 0;
    frances = parseFloat(burgzie);
    james = parseFloat(burgzie);
}
if ((burgzie<(tubit*0.8))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens))){
zeggar = beast;
strutt = 2.9;
stuit = 6.9;
hams = 0;
james = ((Math.floor(burgzie/tens))*tens);
frances = ((Math.floor(burgzie/tens))*tens);
tubit = ((Math.floor(burgzie/tens))*tens);
}
if ((burgzie>=(tuba*1.004))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens))){
zeggar = beast;
strutt = 2.9;
stuit = 6.9;
hams = 1;
james = ((Math.floor(burgzie/tens))*tens);
frances = ((Math.floor(burgzie/tens))*tens);
tubit = ((Math.floor(burgzie/tens))*tens);
tuba = ((Math.floor(burgzie/tens))*tens);
}
if ((burgzie>=(tuba*1.04))&&(burgzie>(((Math.floor(burgzie/tens))*tens)+sevens))){
zeggar = beast*2;
strutt = 4.9;
stuit = 4.9;
hams = 1;
frances = parseFloat(burgzie);
james = parseFloat(burgzie);
tubit = ((Math.floor(burgzie/tens))*tens);
tuba = ((Math.floor(burgzie/tens))*tens);
}
if (burgzie>=taget){
    console.log(""winner winner chicken dinner"");
    return;
}
homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var coldbet = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var milk = document.getElementById('me').firstChild.lastChild.firstChild.children[11].innerText;
if ((milk==razzle)&&(getld>=1)&&(homer>brother)&&(!boon)){
fegerk = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
brother = parseFloat(homer);
boon = true;
}
if ((fegerk<49.5000)&&(blowzy)){
zimple = zimple+zeggar
blowzy = false;
}
if ((fegerk>=49.5000)&&(blowzy)){
zimple = zimple-zeggar;
blowzy = false;
}
var ficked = ((zimple*1).toFixed(8));
var migg = parseFloat(burgzie);
if (((milk>razzle)&&(getld>=1)&&(homer>brother))||((ficked>migg)&&(!blowzy)&&(getld>=2))||((ficked<migg)&&(!blowzy)&&(getld>=2))||((milk<razzle)&&(getld>=1)&&(homer>brother))){
console.log(""hacker attacked you with"");
console.log(milk);
console.log(""bet number of attack:"");
console.log(coldbet);
return;
}
if ((homer==brother)&&(boon)){
razzle = ((zeggar*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo').click();
getld = getld+1;
blowzy = true;
boon = false;
homer = 0;
}
setTimeout(() => get(), 1);
}
get();;
"
TUZpch0E,AE2 Storage defragmentation,Zeiinsito,Lua,Monday 11th of December 2023 04:34:52 PM CDT,"---------- Config ------------

local maxUsedSlotsPerCell = 55
local paddingPercent = 75

local systemDriveNames = {
  ""ae2:drive_2"",
}
local workspaceNames = {
  ioPort = ""ae2:io_port_0"",
  interface = ""ae2:interface_0"",
  chest = ""ae2:chest_0"",
  drives = {
    ""ae2:drive_0"",
    ""ae2:drive_1"",
  }
}

local capacityByName = {
  [""ae2:item_storage_cell_1k""] = 1024,
  [""ae2:item_storage_cell_4k""] = 4096,
  [""ae2:item_storage_cell_16k""] = 16384,
  [""ae2:item_storage_cell_64k""] = 65536,
  [""ae2:item_storage_cell_256k""] = 262144,
  [""megacells:item_storage_cell_1m""] = 1048576,
  [""megacells:item_storage_cell_4m""] = 4194304,
  [""megacells:item_storage_cell_16m""] = 16777216,
  [""megacells:item_storage_cell_64m""] = 67108864,
  [""megacells:item_storage_cell_64m""] = 268435456,
}

local mon = peripheral.wrap(""top"")

------- End of Config --------

-- Util Functions

local clock = os.clock
local function sleep(n)  -- seconds
  local t0 = clock()
  while clock() - t0 <= n do end
end

local function map(array, func)
  local new_array = {}
  for i,v in pairs(array) do
    new_array[i] = func(v, i)
  end
  return new_array
end

local function values(obj)
  local result = {}
  for _, v in pairs(obj) do
    table.insert(result, v)
  end
  return result
end

local function groupBy(array, prop)
  local result = {}
  for _, element in pairs(array) do
    if element[prop] ~= nil then
      if result[element[prop]] == nil then
        result[element[prop]] = {}
      end
      table.insert(result[element[prop]], element)
    end
  end
  return result
end

-- /Util Functions

-- Peripherals

local systemDrives = map(systemDriveNames, function(driveName)
  return peripheral.wrap(driveName)
end)
local workspace = {
  ioPort = peripheral.wrap(workspaceNames.ioPort),
  interface = peripheral.wrap(workspaceNames.interface),
  chest = peripheral.wrap(workspaceNames.chest),
  drives = map(workspaceNames.drives, function(driveName)
    return peripheral.wrap(driveName)
  end)
}

-- /Peripherals

-- Classes

-- Cell

local cells = {}
local additionallyRequiredCells = {}
local Cell = {}
Cell.__index = Cell

Cell.capacities = (function()
  local capacities = values(capacityByName)
  table.sort(capacities, function(a, b) return a < b end)
  return capacities
end)()

function Cell.sortByUnusedBytesDesc(a, b)
  return b:getNumUnusedBytes() < a:getNumUnusedBytes()
end

function Cell.sortByCapacity(a, b)
  return a.capacity < b.capacity
end

function Cell.sortByCapacityDesc(a, b)
  return b.capacity < a.capacity
end

function Cell.loadAll()
  for driveNum, systemDrive in ipairs(systemDrives) do
    local systemCells = systemDrive.list()
    local toSlotNum = 1
    for _, cell in pairs(systemCells) do
      table.insert(cells, Cell.new(capacityByName[cell.name], driveNum, toSlotNum))
      toSlotNum = toSlotNum + 1
    end
  end
  table.remove(cells, #cells)
end

function Cell.new(capacity, driveNum, slotNum)
  local self = setmetatable({}, Cell)
  self.capacity = capacity
  self.driveNum = driveNum
  self.slotNum = slotNum
  self.inventory = {}
  return self
end

function Cell.getSmallestCellNeededForStack(stack)
  for _, capacity in ipairs(Cell.capacities) do
    local cell = Cell.new(capacity)
    if cell:hasSpaceFor(stack) then
      return cell
    end
  end
end

function Cell:getNumUsedBytes()
  local bytesUsed = 0
  for _, stackData in pairs(self.inventory) do
    bytesUsed = bytesUsed + self:getBytesForStack(stackData)
  end
  return bytesUsed
end

function Cell:add(stack)
  table.insert(self.inventory, stack)
  if self:getNumUsedBytes() > self.capacity then
    error(""Unexpected error: inventory has exceeded capacity"")
  end
end

function Cell:getBytesForStack(stack)
  return (self.capacity / 128) + math.ceil(stack.count / 8)
end

function Cell:hasSpaceFor(stack)
  local bytesUsed = self:getNumUsedBytes()
  local hasEnoughBytes = bytesUsed + self:getBytesForStack(stack) < self.capacity
  local hasEnoughSlots = self:getNumUnusedSlots() > 0
  return hasEnoughBytes and hasEnoughSlots
end

function Cell:getNumUnusedBytes()
  return self.capacity - self:getNumUsedBytes()
end

function Cell:getNumUnusedSlots()
  return maxUsedSlotsPerCell - #self.inventory
end

function Cell:clearAndPutInWorkspaceChest()
  local drive = workspace.drives[self.driveNum]
  drive.pushItems(workspaceNames.ioPort, self.slotNum)
  while workspace.ioPort.list()[7] == nil do
    sleep(0.1)
  end
  workspace.ioPort.pushItems(workspaceNames.chest, 7)
end

function Cell:exportInventoryToWorkspaceChest()
  for _, stack in ipairs(self.inventory) do
    stack:exportToWorkspaceChest()
  end
end

local outputDrives = {}
for _, drive in pairs(systemDrives) do
  table.insert(outputDrives, drive)
end
local currentOutputDrive = table.remove(outputDrives, 1)
function Cell:moveBackToSystem()
  currentOutputDrive.pullItems(workspaceNames.chest, 2)
  if #currentOutputDrive.list() == 10 then
    currentOutputDrive = table.remove(outputDrives, 1)
  end
end

-- Stack

local stacks = {}
local Stack = {}
Stack.__index = Stack

function Stack.sortByCountDesc(a, b)
  return b.count < a.count
end

function Stack.loadAll()
  local handledItemTypes = {}
  local allItemTypes = workspace.interface.list()
  for _, itemType in pairs(allItemTypes) do
    if handledItemTypes[itemType.name] == nil then
      handledItemTypes[itemType.name] = 1
      local ccStacks = workspace.interface.findItems(itemType.name)
      for _, ccStack in pairs(ccStacks) do
        table.insert(stacks, Stack.new(ccStack))
      end
    end
  end
end

function Stack.new(ccStack)
  local self = setmetatable({}, Stack)
  self.ccStack = ccStack
  self.metadata = ccStack.getMetadata()
  self.displayName = self.metadata.displayName
  self.count = (1+paddingPercent/100)*self.metadata.count
  return self
end

function Stack:addToCellWithLargestUnusuedSpace()
  table.sort(cells, Cell.sortByUnusedBytesDesc)
  for _, cell in ipairs(cells) do
    if cell:hasSpaceFor(self) then
      cell:add(self)
      return
    end
  end
  local newCell = Cell.getSmallestCellNeededForStack(self)
  newCell:add(self)
  table.insert(cells, newCell)
  table.insert(additionallyRequiredCells, newCell)
  error(""No cell found to add stack to"")
end

function Stack:exportAllToWorkspaceChest()
  local amountToExport = self.metadata.count
  print(""  Exporting ""..amountToExport.."" ""..self.displayName..""..."")
  local amountExported = 0
  while amountExported < amountToExport do
    amountExported = amountExported + self.ccStack.export(workspaceNames.chest)
  end
end

-- /Classes

-- Monitor

local lineCount = 1

--display text text on monitor, ""mon"" peripheral
function writeLine(x, y, text, text_color, bg_color, scale)
  lineCount = lineCount + 1
  mon.setTextScale(scale)
  mon.setBackgroundColor(bg_color)
  mon.setTextColor(text_color)
  mon.setCursorPos(x,y)
  mon.write(text)
end

--draw line on monitor
function drawLine(x, y, length, color)
  mon.setBackgroundColor(color)
  mon.setCursorPos(x,y)
  mon.write(string.rep("" "", length))
end

--clear lines on monitor
function clearLine(...)
  for _,y in ipairs(arg) do
    mon.setCursorPos(1,y)
    mon.clearLine()
  end
end

-- /Monitor

-- Main

writeLine(1, lineCount, ""Scanning for cells..."", colors.white, colors.black, 0.5)
Cell.loadAll()

writeLine(1, lineCount, ""Moving cells to workspace..."", colors.white, colors.black, 0.5)
local function moveDrivesFromSystemToWorkspace()
  for driveNum, systemDrive in ipairs(systemDrives) do
    local systemCells = systemDrive.list()
    for fromSlotNum, _ in pairs(systemCells) do
      systemDrive.pushItems(workspaceNames.drives[driveNum], fromSlotNum)
    end
  end
end

moveDrivesFromSystemToWorkspace()

writeLine(1, lineCount, ""Scanning for stacks..."", colors.white, colors.black, 0.5)
Stack.loadAll()

writeLine(1, lineCount, ""Planning"", colors.white, colors.black, 0.5)
table.sort(stacks, Stack.sortByCountDesc)
for _, stack in ipairs(stacks) do
  stack:addToCellWithLargestUnusuedSpace()
end

if #additionallyRequiredCells > 0 then
  writeLine(1, lineCount, ""Needed cells"", colors.white, colors.black, 0.5)
  local requiredCellsByCapacity = groupBy(additionallyRequiredCells, 'capacity')
  for _, capacity in ipairs(Cell.capacities) do
    if requiredCellsByCapacity[capacity] ~= nil and #requiredCellsByCapacity[capacity] > 0 then
      writeLine(1, lineCount, ""  ""..#requiredCellsByCapacity[capacity].."" ""..(capacity/1024)..""k cells"", colors.white, colors.black, 0.5)
    end
  end
  error(""Add the above cells to continue"")
end

writeLine(1, lineCount, ""Executing plan..."", colors.white, colors.black, 0.5)

table.sort(cells, Cell.sortByCapacity)

for _, cell in ipairs(cells) do
  -- print(""clearing and putting in workspace..."")
  cell:clearAndPutInWorkspaceChest()
  -- print(""moving stacks to chest..."")
  for _, stack in ipairs(cell.inventory) do
    stack:exportAllToWorkspaceChest()
  end
  -- print(""moving cell back to system..."")
  cell:moveBackToSystem()
end

writeLine(1, lineCount, ""DONE"", colors.black, colors.green, 1)"
a5a6JBYP,Untitled,Angel_Dust_XVII,Java,Monday 11th of December 2023 04:21:08 PM CDT,"Most evil MC trap
I just found out one of the most evil traps in minecraft... all it requires is a wooden floor (of a friends), an wooden pressure plate, a magma block from the nether, skulk sensor, and 4 pieces of wool.

If your friend has a wooden floor, place a magma block right under the floor, then a skulk sensor, then surround the sensor in 4 blocks of wool, , top the sensor with the wooden floor, and crouch away from the sensor, also make sure the magma block has THREE tunnels to make lava flows. When someone activates the skulk sensor, it will activate THREE tunnels of magma, burning their floorboards and further spreading the lava when blocks are being destroyed. THIS. IS. EVIL. by the way"
9nbkiB2i,Untitled,dominus,Diff,Monday 11th of December 2023 04:08:25 PM CDT,"diff --git a/mapedit/exult_studio.cc b/mapedit/exult_studio.cc
index 59817d22b..b8bad04e1 100644
--- a/mapedit/exult_studio.cc
+++ b/mapedit/exult_studio.cc
@@ -22,11 +22,41 @@ Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 #include ""studio.h""
 
-#ifdef _WIN32
+#if defined(MACOSX) || defined(_WIN32)
 #include ""utils.h""
 #endif
 
 int main(int argc, char **argv) {
+
+#ifdef MACOSX
+	// setting up environment for Exult Studio in an app bundle
+	setup_app_bundle_resource();
+	if (is_system_path_defined(""<APP_BUNDLE_RES>"")) {
+		std::string bundle_res = get_system_path(""<APP_BUNDLE_RES>"");
+		if (U7exists(bundle_res)) {
+			std::string bundle_share;
+			std::string bundle_pixbuf;
+			std::string bundle_im;
+			bundle_share = bundle_res;
+			bundle_share += ""/share"";
+			bundle_pixbuf = bundle_res;
+			bundle_pixbuf += ""/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache"";
+			bundle_im = bundle_res;
+			bundle_im += ""/lib/gtk-3.0/3.0.0/immodules.cache"";
+			const gchar *b_res = bundle_res.c_str();
+			const gchar *b_share = bundle_share.c_str();
+			const gchar *b_pixbuf= bundle_pixbuf.c_str();
+			const gchar *b_im = bundle_im.c_str();
+			g_setenv(""XDG_DATA_DIRS"", b_share, 1);
+			g_setenv(""GTK_DATA_PREFIX"", b_res, 1);
+			g_setenv(""GTK_EXE_PREFIX"", b_res, 1);
+			g_setenv(""GTK_PATH"", b_res, 1);
+			g_setenv(""GDK_PIXBUF_MODULE_FILE"", b_pixbuf, 1);
+			g_setenv(""GTK_IM_MODULE_FILE"", b_im, 1);
+		}
+	}
+#endif
+
 	ExultStudio studio(argc, argv);
 	studio.run();
 "
wBx3ee4c,Untitled,sissou123,PHP,Monday 11th of December 2023 04:05:03 PM CDT,"Create RESTful APIs using PHP, POSTMAN and MySQL: Secure API
Build dynamic database-backed Restful web APIs.. Use CSS, PHP, MySQL to build web services JWT and CRUD applications.
for more:https://rb.gy/25lrel"
TuGztYa3,Advent of code 2023 day 10 fast,hhoppe,Python,Monday 11th of December 2023 03:48:39 PM CDT,"def day10(s, *, part2=False):  # Interior test using row intersection counting.
  grid = np.array([list(line) for line in s.splitlines()])
  ((y, x),) = np.argwhere(grid == 'S')
  loop: list[tuple[int, int]] = []
  dy, dx = 1, 0  # The start has a downward loop arm in all the examples I see.
  while (ch := grid[y, x]) != 'S' or not loop:
    loop.append((y, x))
    dy, dx = (dx, dy) if ch in 'L7' else (-dx, -dy) if ch in 'JF' else (dy, dx)
    y, x = y + dy, x + dx

  if not part2:
    return len(loop) // 2

  loop_mask = np.full(grid.shape, False)
  loop_mask[tuple(np.array(loop).T)] = True
  lookup = np.array([chr(i) in '|LJ' for i in range(256)])
  is_wall = lookup[grid.view(np.uint32)]  # ('U1' and uint32 have the same bitwidth.)
  is_wall[~loop_mask] = 0
  count = is_wall.cumsum(1) % 2
  count[loop_mask] = 0
  return count.sum()"
Pve3F4fJ,antihacker snowybot,coinwalk,JavaScript,Monday 11th of December 2023 03:41:09 PM CDT,"var burgzie = document.getElementById('pct_balance').value;
var kozster = parseFloat(document.getElementById('pct_balance').value);
var beast = ((kozster/640).toFixed(8));
var zeggar = beast;
var taget = (kozster*24);
var tens = (beast*10);
var sevens = (beast*6.9);
var james = ((Math.floor(kozster/tens))*tens);
var frances = ((Math.floor(kozster/tens))*tens);
var tuba = ((Math.floor(kozster/tens))*tens);
var tubit = ((Math.floor(kozster/tens))*tens);
var burgzie = kozster;
var strutt = 2.9;
var stuit = 6.9;
var hams = 1;
var getld = 0;
var boon = true;
var zimple = kozster;
var blowzy = false;
var razzle = ((zeggar*1).toFixed(8));
var brother = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var fegerk = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
 
function get(){
console.clear();
burgzie = document.getElementById('pct_balance').value;
var good = ((burgzie-kozster).toFixed(8));
console.log(""profit"");
console.log(good);
if (burgzie>(james+(zeggar*stuit))){
    zeggar = zeggar*2;
    stuit = 4.9;
    james = parseFloat(burgzie);
}
if (burgzie<(frances-(zeggar*strutt))){
    zeggar = zeggar*2;
    strutt = 4.9;
    hams = 0;
    frances = parseFloat(burgzie);
    james = parseFloat(burgzie);
}
if ((burgzie<(tubit-(tens*3)))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens))){
zeggar = beast;
strutt = 2.9;
stuit = 6.9;
hams = 0;
james = ((Math.floor(burgzie/tens))*tens);
frances = ((Math.floor(burgzie/tens))*tens);
tubit = ((Math.floor(burgzie/tens))*tens);
}
if ((burgzie>=(tuba+(tens*hams)))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens))){
zeggar = beast;
strutt = 2.9;
stuit = 6.9;
hams = 1;
james = ((Math.floor(burgzie/tens))*tens);
frances = ((Math.floor(burgzie/tens))*tens);
tubit = ((Math.floor(burgzie/tens))*tens);
tuba = ((Math.floor(burgzie/tens))*tens);
}
if (burgzie>=taget){
    console.log(""winner winner chicken dinner"");
    return;
}
homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var coldbet = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var milk = document.getElementById('me').firstChild.lastChild.firstChild.children[11].innerText;
if ((milk==razzle)&&(getld>=1)&&(homer>brother)&&(!boon)){
fegerk = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
brother = parseFloat(homer);
boon = true;
}
if ((fegerk<49.5000)&&(blowzy)){
zimple = zimple+zeggar
blowzy = false;
}
if ((fegerk>=49.5000)&&(blowzy)){
zimple = zimple-zeggar;
blowzy = false;
}
var ficked = ((zimple*1).toFixed(8));
var migg = parseFloat(burgzie);
if (((milk>razzle)&&(getld>=1)&&(homer>brother))||((ficked>migg)&&(!blowzy)&&(getld>=2))||((ficked<migg)&&(!blowzy)&&(getld>=2))||((milk<razzle)&&(getld>=1)&&(homer>brother))){
console.log(""hacker attacked you with"");
console.log(milk);
console.log(""bet number of attack:"");
console.log(coldbet);
return;
}
if ((homer==brother)&&(boon)){
razzle = ((zeggar*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo').click();
getld = getld+1;
blowzy = true;
boon = false;
homer = 0;
}
setTimeout(() => get(), 1);
}
get();;
"
sTh3mc42,secret snowybot jd,coinwalk,JavaScript,Monday 11th of December 2023 03:31:43 PM CDT,"var burgzie = document.getElementById('pct_balance').value;
var kozster = parseFloat(document.getElementById('pct_balance').value);
var beast = ((kozster/640).toFixed(8));
var zeggar = beast;
var taget = (kozster*24);
var tens = (beast*10);
var sevens = (beast*6.9);
var james = ((Math.floor(kozster/tens))*tens);
var frances = ((Math.floor(kozster/tens))*tens);
var tuba = ((Math.floor(kozster/tens))*tens);
var tubit = ((Math.floor(kozster/tens))*tens);
var burgzie = kozster;
var strutt = 2.9;
var stuit = 6.9;
var hams = 1;
var havetobet = ((zeggar*1).toFixed(8));
 
function get(){
console.clear();
burgzie = document.getElementById('pct_balance').value;
var good = ((burgzie-kozster).toFixed(8));
console.log(""profit"");
console.log(good);
if (burgzie>(james+(zeggar*stuit))){
    zeggar = zeggar*2;
    stuit = 4.9;
    james = parseFloat(burgzie);
}
if (burgzie<(frances-(zeggar*strutt))){
    zeggar = zeggar*2;
    strutt = 4.9;
    hams = 0;
    frances = parseFloat(burgzie);
    james = parseFloat(burgzie);
}
if ((burgzie<(tubit-(tens*3)))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens))){
zeggar = beast;
strutt = 2.9;
stuit = 6.9;
hams = 0;
james = ((Math.floor(burgzie/tens))*tens);
frances = ((Math.floor(burgzie/tens))*tens);
tubit = ((Math.floor(burgzie/tens))*tens);
}
if ((burgzie>=(tuba+(tens*hams)))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens))){
zeggar = beast;
strutt = 2.9;
stuit = 6.9;
hams = 1;
james = ((Math.floor(burgzie/tens))*tens);
frances = ((Math.floor(burgzie/tens))*tens);
tubit = ((Math.floor(burgzie/tens))*tens);
tuba = ((Math.floor(burgzie/tens))*tens);
}
if (burgzie>=taget){
    console.log(""winner winner chicken dinner"");
    return;
}
havetobet = ((zeggar*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(havetobet);
$('#a_lo').click();
setTimeout(() => get(), 1);
}
get();
"
h32Bhrz5,secret snowybot jd,coinwalk,JavaScript,Monday 11th of December 2023 03:26:42 PM CDT,"var burgzie = document.getElementById('pct_balance').value;
var kozster = parseFloat(document.getElementById('pct_balance').value);
var beast = ((kozster/640).toFixed(8));
var zeggar = beast;
var taget = (kozster*24);
var tens = (beast*10);
var sevens = (beast*6.9);
var fathem = (beast*7.9);
var james = ((Math.floor(kozster/tens))*tens);
var frances = ((Math.floor(kozster/tens))*tens);
var havetobet = ((zeggar*1).toFixed(8));
var tuba = ((Math.floor(kozster/tens))*tens);
var tubit = ((Math.floor(kozster/tens))*tens);
var burgzie = kozster;
var bone = kozster;
var razzle = 0;
var lower = 2.9;
var boon = true;
var getld = 0;
var boon = true;
var zimple = kozster;
var blowzy = false;
var nope = 1;
var upper = 6.9;
var rift = 2;
var blerh = 0
var lamb = 0;
var noddy = true;
var strutt = 2.9;
var stuit = 6.9;
var hams = 1;
 
function get(){
console.clear();
burgzie = document.getElementById('pct_balance').value;
var good = ((burgzie-kozster).toFixed(8));
console.log(""profit"");
console.log(good);
if (burgzie>(james+(zeggar*stuit))){
    zeggar = zeggar*2;
    stuit = 4.9;
    james = parseFloat(burgzie);
}
if (burgzie<(frances-(zeggar*strutt))){
    zeggar = zeggar*2;
    strutt = 4.9;
    hams = 0;
    frances = parseFloat(burgzie);
    james = parseFloat(burgzie);
}
if ((burgzie<(tubit-(tens*3)))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens))){
zeggar = beast;
strutt = 2.9;
stuit = 6.9;
hams = 0;
james = ((Math.floor(burgzie/tens))*tens);
frances = ((Math.floor(burgzie/tens))*tens);
tubit = ((Math.floor(burgzie/tens))*tens);
}
if ((burgzie>=(tuba+(tens*hams)))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens))){
zeggar = beast;
strutt = 2.9;
stuit = 6.9;
hams = 1;
james = ((Math.floor(burgzie/tens))*tens);
frances = ((Math.floor(burgzie/tens))*tens);
tubit = ((Math.floor(burgzie/tens))*tens);
tuba = ((Math.floor(burgzie/tens))*tens);
}
if (burgzie>=taget){
    console.log(""winner winner chicken dinner"");
    return;
}
razzle = ((zeggar*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo').click();
setTimeout(() => get(), 1);
}
get();
"
65qUyLTT,Sample GItCICD,andibastian,YAML,Monday 11th of December 2023 03:09:32 PM CDT,"stages:
  - build_docker
  - deploy_staging_docker
  - deploy_to_kalbe

build_docker:
  stage: build_docker
  image: registry.stagingapps.net/build/docker:18.09.7
  services:
    - name: registry.stagingapps.net/build/docker:18.09.7-dind
  before_script:
    - apk add --no-cache curl jq
  script:
    - |
      docker login -u ""${CI_REGISTRY_USER}"" -p ""${CI_REGISTRY_PASSWORD}"" registry.stagingapps.net
      docker build -t ""${CI_REGISTRY_IMAGE}:latest"" .
      docker tag ""${CI_REGISTRY_IMAGE}:latest"" ""${CI_REGISTRY_IMAGE}:$CI_BUILD_REF""
      docker push ""${CI_REGISTRY_IMAGE}:$CI_BUILD_REF""
  only:
    - staging-docker
  tags:
    - new-shared

deploy_staging_docker:
  stage: deploy_staging_docker
  script:
    - sed -i ""s,_IMAGE:VERSION_,${CI_REGISTRY_IMAGE}:$CI_BUILD_REF,"" docker-compose.yml
    - scp docker-compose.yml ubuntu@192.168.0.87:~/app/etesting/etesting-fe/
    - ssh ubuntu@192.168.0.87 docker login -u ""${CI_REGISTRY_USER}"" -p ""${CI_REGISTRY_PASSWORD}"" registry.stagingapps.net
    - ssh ubuntu@192.168.0.87 ""cd ~/app/etesting/etesting-fe && docker compose up -d --build""
  only:
    - staging-docker
  tags:
    - stg-runner

deploy_to_kalbe:
  stage: deploy_to_kalbe
  image: registry.stagingapps.net/build/docker:18.09.7
  services:
    - name: registry.stagingapps.net/build/docker:18.09.7-dind
  before_script:
    - apk add --no-cache curl jq
  script:
    - |
      export FORMATTED_TIMESTAMP=$(date -u +""%Y%m%d%H%M%S"")    
      docker login -u ""${KALBE_IMAGE_USER}"" -p ""${KALBE_IMAGE_PASSWORD}"" repo2.kalbe.site
      docker build -t ""${KALBE_IMAGE_NAME}:latest"" -f DockerfileProd .
      docker tag ""${KALBE_IMAGE_NAME}:latest"" ""${KALBE_IMAGE_NAME}:$FORMATTED_TIMESTAMP""    
      docker push ""${KALBE_IMAGE_NAME}:latest""
      docker push ""${KALBE_IMAGE_NAME}:$FORMATTED_TIMESTAMP""
      curl -X POST -H ""Content-Type: application/json"" -d ""{\""image_url\"":\""$KALBE_IMAGE_NAME\"",\""image_tag\"":\""$FORMATTED_TIMESTAMP\""}"" ""https://kalbe-wgs.stagingapps.net/updateimagetag""
      baris_line=""******************************""
      echo -e ""\n$baris_line""
      echo -e ""Menunggu update dari server kalbe, maksimal nunggu 60 kali. Namanya juga barengan. diem lu!!!!.""
      echo -e ""$baris_line""
      sleep 20
      max_attempts=60
      attempt=1
      while [ $attempt -le $max_attempts ]; do
        echo -e ""Mari kita cek""
        response=$(curl -s ""https://kalbe-wgs.stagingapps.net/gitlabpipelinelog?image_tag=$FORMATTED_TIMESTAMP"")
        status_value=$(echo ""$response"" | jq '.[0].status')
        if [ ""$status_value"" -eq 1 ]; then
          echo -e ""Sukses""
          exit 0
        else
          attempt=$((attempt + 1))
          echo -e ""Belum ada update, kita coba lagi""
          sleep 10
        fi
      done
      exit 1
  only:
    - staging-docker
  tags:
    - new-shared
"
XZ3NGa4W,Конечный Автомат Для Pascal строк,Dimaland,C,Monday 11th of December 2023 02:59:05 PM CDT,"#include <stdio.h>

typedef enum {
    ctUnknown,
    ctChar,
    ctQuote,
} TCharType;

typedef enum {
    ErrorState,
    WaitQuote,
    ReadChar,
    End
} TState;

const TState Transitions[4][3] = {
        {ErrorState, ErrorState, ErrorState},
        {ErrorState, ErrorState, ReadChar},
        {ErrorState, ReadChar, End},
        {ErrorState, ErrorState, ErrorState}
};

const int IsFinalState[4] = {0, 0, 0, 1};

TCharType GetCharType(char c) {
    if (c != '\'' && c != '\0') {
        return ctChar; // Любой символ, кроме одиночной кавычки
    } else if (c == '\'') {
        return ctQuote; // Одиночная кавычка
    } else {
        return ctUnknown; // Неизвестный символ
    }
}

int CheckPascalString(const char *str) {
    TState state = WaitQuote;
    int i = 0;
    while (str[i] != '\0') {
        TCharType charType = GetCharType(str[i]);
        if (charType == ctQuote){
            if (str[i + 1] == '\''){
                i++;
            } else{
                state = Transitions[state][charType];
            }
        } else {
            state = Transitions[state][charType];
        }
        if (state == ErrorState) {
            return 0; // Не валидная строка
        }
        i++;
    }
    return IsFinalState[state];
}

int main() {
    const char *input1 = ""'Hello, world!'"";
    const char *input2 = ""'I don''t know.'"";
    const char *input3 = ""'Mismatched quotes"";
    const char *input4 = ""No starting quote'"";
    const char *input5 = ""'Double '' quote'"";

    printf(""%s\n"", CheckPascalString(input1) ? ""Valid Pascal string"" : ""Invalid Pascal string"");
    printf(""%s\n"", CheckPascalString(input2) ? ""Valid Pascal string"" : ""Invalid Pascal string"");
    printf(""%s\n"", CheckPascalString(input3) ? ""Valid Pascal string"" : ""Invalid Pascal string"");
    printf(""%s\n"", CheckPascalString(input4) ? ""Valid Pascal string"" : ""Invalid Pascal string"");
    printf(""%s\n"", CheckPascalString(input5) ? ""Valid Pascal string"" : ""Invalid Pascal string"");

    return 0;
}
"
VmXPXW8T,Untitled,KallazZ,Bash,Monday 11th of December 2023 02:55:48 PM CDT,"seconds=0

while true; do
    clear
    echo ""--------------------------------------- SYSTEM INFO ---------------------------------------""
    seconds=$(($seconds + 1))

    # Network speed
    bytes_received=$(cat /proc/net/dev | grep eth0 | awk '{ print $2 }')
    bytes_transmitted=$(cat /proc/net/dev | grep eth0 | awk '{ print $10 }')

    received_speed=$(($bytes_received - $last_bytes_received))
    transmitted_speed=$(($bytes_transmitted - $last_bytes_transmitted))

    received_speed_sum=$(($received_speed_sum + $received_speed))
    transmitted_speed_sum=$(($transmitted_speed_sum + $transmitted_speed))
    received_speed_mean=$(convert_bytes $(($received_speed_sum / $seconds)))
    transmitted_speed_mean=$(convert_bytes $(($transmitted_speed_sum / $seconds)))

    echo ""Network speed:""
    printf ""Received speed: %s/s Transmitted speed: %s/s\n"" $(convert_bytes $received_speed) $(convert_bytes $transmitted_speed)
    printf ""Received speed mean: %s/s Transmitted speed mean: %s/s\n"" $received_speed_mean $transmitted_speed_mean

    printf ""Graphical representation:\n""
    printf ""Received:    ""
    for ((i = 0; i < $((received_speed / 10)); i++)); do
        if (( $i == 45 )); then
            # max number of squares
            break
        fi
        printf ""▇""
    done
    printf ""\n""

    printf ""Transmitted: ""
    for ((i = 0; i < $((transmitted_speed / 10)); i++)); do
        if (( $i == 45 )); then
            # max number of squares
            break
        fi
        printf ""▇""
    done
    printf ""\n""

    last_bytes_received=$bytes_received
    last_bytes_transmitted=$bytes_transmitted"
UNeKKKMj,Untitled,edensheiko,Python,Monday 11th of December 2023 02:15:46 PM CDT,"import uhd

# connect to RFNoc 
# might be reasting the fpga blocks need to check
graph = uhd.rfnoc.RfnocGraph(""addr=127.0.0.1"")

#fft block
fft =  uhd.rfnoc.FftBlockContorl(graph.get_block('0/FFT#0'))
#then you cat see the fft. + TAB the options
"
PNZ0jS9Z,OBS crash backtrace,FFS2309,GDB,Monday 11th of December 2023 01:45:36 PM CDT,"#0  0x00007ffff3ea154c in __pthread_kill_implementation () from /lib64/libc.so.6
#1  0x00007ffff3e54d06 in raise () from /lib64/libc.so.6
#2  0x00007ffff3e287f3 in abort () from /lib64/libc.so.6
#3  0x00007ffff42a1a01 in __gnu_cxx::__verbose_terminate_handler() [clone .cold] () from /lib64/libstdc++.so.6
#4  0x00007ffff42ad37c in __cxxabiv1::__terminate(void (*)()) () from /lib64/libstdc++.so.6
#5  0x00007ffff42ad3e7 in std::terminate() () from /lib64/libstdc++.so.6
#6  0x00007ffff42ad649 in __cxa_throw () from /lib64/libstdc++.so.6
#7  0x00007ffff42a42b3 in std::__throw_logic_error(char const*) () from /lib64/libstdc++.so.6
#8  0x00005555557c6dc5 in void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [clone .constprop.0] ()
#9  0x000055555573a9b7 in OBSBasicSettings::SimpleRecordingEncoderChanged() ()
#10 0x00007ffff47cdee4 in void doActivate<false>(QObject*, int, void**) () from /lib64/libQt6Core.so.6
#11 0x00007ffff5dc50a2 in QSpinBox::valueChanged(int) () from /lib64/libQt6Widgets.so.6
#12 0x00007ffff5dc1a79 in QAbstractSpinBoxPrivate::setValue(QVariant const&, EmitPolicy, bool) () from /lib64/libQt6Widgets.so.6
#13 0x00007ffff5dc5a1c in QSpinBox::setValue(int) () from /lib64/libQt6Widgets.so.6
#14 0x000055555572172a in OBSBasicSettings::LoadSimpleOutputSettings() ()
#15 0x000055555572b9c7 in OBSBasicSettings::LoadSettings(bool) ()
#16 0x00005555556a00d2 in OBSBasic::on_action_Settings_triggered() ()
#17 0x000055555560c821 in OBSBasic::qt_metacall(QMetaObject::Call, int, void**) ()
#18 0x00007ffff47ce1d1 in void doActivate<false>(QObject*, int, void**) () from /lib64/libQt6Core.so.6
#19 0x00007ffff5ceb8d6 in QAbstractButton::clicked(bool) () from /lib64/libQt6Widgets.so.6
#20 0x00007ffff5cebb6e in QAbstractButtonPrivate::emitClicked() () from /lib64/libQt6Widgets.so.6
#21 0x00007ffff5ced204 in QAbstractButtonPrivate::click() () from /lib64/libQt6Widgets.so.6
#22 0x00007ffff5ced433 in QAbstractButton::mouseReleaseEvent(QMouseEvent*) () from /lib64/libQt6Widgets.so.6
#23 0x00007ffff5c1ae58 in QWidget::event(QEvent*) () from /lib64/libQt6Widgets.so.6
#24 0x00007ffff5bc17b6 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () from /lib64/libQt6Widgets.so.6
#25 0x00007ffff5bcb260 in QApplication::notify(QObject*, QEvent*) () from /lib64/libQt6Widgets.so.6
#26 0x00007ffff476dbe8 in QCoreApplication::notifyInternal2(QObject*, QEvent*) () from /lib64/libQt6Core.so.6
#27 0x00007ffff5bc9d07 in QApplicationPrivate::sendMouseEvent(QWidget*, QMouseEvent*, QWidget*, QWidget*, QWidget**, QPointer<QWidget>&, bool, bool) () from /lib64/libQt6Widgets.so.6
#28 0x00007ffff5c2d3fb in QWidgetWindow::handleMouseEvent(QMouseEvent*) () from /lib64/libQt6Widgets.so.6
#29 0x00007ffff5c301e8 in QWidgetWindow::event(QEvent*) () from /lib64/libQt6Widgets.so.6
#30 0x00007ffff5bc17b6 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () from /lib64/libQt6Widgets.so.6
#31 0x00007ffff476dbe8 in QCoreApplication::notifyInternal2(QObject*, QEvent*) () from /lib64/libQt6Core.so.6
#32 0x00007ffff50096a0 in QGuiApplicationPrivate::processMouseEvent(QWindowSystemInterfacePrivate::MouseEvent*) () from /lib64/libQt6Gui.so.6
#33 0x00007ffff50629fc in QWindowSystemInterface::sendWindowSystemEvents(QFlags<QEventLoop::ProcessEventsFlag>) () from /lib64/libQt6Gui.so.6
#34 0x00007fffecdf97ae in xcbSourceDispatch(_GSource*, int (*)(void*), void*) () from /lib64/libQt6XcbQpa.so.6
#35 0x00007ffff3d19e2f in g_main_context_dispatch () from /lib64/libglib-2.0.so.0
#36 0x00007ffff3d6f108 in g_main_context_iterate.constprop () from /lib64/libglib-2.0.so.0
#37 0x00007ffff3d175f3 in g_main_context_iteration () from /lib64/libglib-2.0.so.0
#38 0x00007ffff49fcd5e in QEventDispatcherGlib::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () from /lib64/libQt6Core.so.6
#39 0x00007ffff477a193 in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) () from /lib64/libQt6Core.so.6
#40 0x00007ffff4776206 in QCoreApplication::exec() () from /lib64/libQt6Core.so.6
#41 0x00005555555f4da1 in main ()"
zYMubntW,driver.py,Imyme,Python,Monday 11th of December 2023 01:33:34 PM CDT,"from game import GameMode, CurrentPlayer, BoardState, GameState, GameBoard, Validator


logo = """"""\
 /$$$$$$$$ /$$                 /$$$$$$$$                        /$$$$$$$$                 
|__  $$__/|__/                |__  $$__/                       |__  $$__/                 
   | $$    /$$  /$$$$$$$         | $$  /$$$$$$   /$$$$$$$         | $$  /$$$$$$   /$$$$$$ 
   | $$   | $$ /$$_____/         | $$ |____  $$ /$$_____/         | $$ /$$__  $$ /$$__  $$
   | $$   | $$| $$               | $$  /$$$$$$$| $$               | $$| $$  \ $$| $$$$$$$$
   | $$   | $$| $$               | $$ /$$__  $$| $$               | $$| $$  | $$| $$_____/
   | $$   | $$|  $$$$$$$         | $$|  $$$$$$$|  $$$$$$$         | $$|  $$$$$$/|  $$$$$$$
   |__/   |__/ \_______/         |__/ \_______/ \_______/         |__/ \______/  \_______
""""""


def main():
    print(logo)
    print(""Welcome to Tic-Tac-Toe game!"")

    while True:
        while True:
            try:
                mode = int(input(""Select Game Mode (1 for Single Player(vs AI), 2 for Two Players): ""))
                if mode == 1:
                    game_mode = GameMode.SINGLE_PLAYER
                    break
                elif mode == 2:
                    game_mode = GameMode.TWO_PLAYERS
                    break
                else:
                    print(""Invalid input. Please enter 1 or 2."")
            except ValueError:
                print(""Invalid input. Please enter a number."")

        game = GameBoard()
        game.game_mode = game_mode

        game.play_game()

        if game.state == GameState.PLAYER1_WIN:
            print(""Player 1 wins!"")
        elif game.state == GameState.PLAYER2_WIN:
            print(""Player 2 wins!"")
        elif game.state == GameState.AI_WIN:
            print(""AI wins!"")
        elif game.state == GameState.DRAW:
            print(""It's a draw!"")

        while True:
            try:
                play_again = input(""Do you want to play again? (yes/no): "").lower()
            except:
                print(""Invailed input."")
            if play_again != 'yes':
                flag = True
                print(""Goodbye!"")
                break
        if flag == True:
            break

if __name__ == ""__main__"":
    main()
"
B9TeB4Hs,game.py,Imyme,Python,Monday 11th of December 2023 01:28:35 PM CDT,"from enum import Enum, auto
import math


class GameMode(Enum):
    SINGLE_PLAYER = auto()
    TWO_PLAYERS = auto()

class CurrentPlayer(Enum):
    PLAYER1 = auto()
    PLAYER2 = auto()
    AI = auto()

class BoardState(Enum):
    BLANK = auto()
    PLAYER1 = auto()
    PLAYER2 = auto()
    AI = auto()

class GameState(Enum):
    GAME = auto()
    PLAYER1_WIN = 'Player_X_WIN!'
    PLAYER2_WIN = 'PLAYER_O_WIN!'
    AI_WIN = 'AI_WIN!'
    DRAW = 'DRAW'


class GameBoard:
    def __init__(self):
        self.board_state = [BoardState.BLANK for _ in range(9)]
        self.game_mode = None
        self.current_player = CurrentPlayer.PLAYER1
        self.state = GameState.GAME

    def play_game(self):
        while self.state == GameState.GAME:
            self.get_move()
            self.set_state()
            self.display_board()
            self.check_state()
            self.change_turn()


    def get_move(self):
        while True:
            if self.current_player == CurrentPlayer.AI:
                self.get_ai_input()
                break
            else:
                user_input = input(""Enter your move: "")
                validator = Validator(user_input, self)
                validator.add_function(validator.not_filled)
                validator.add_function(validator.is_valid_domain)

                if validator.is_valid_input():
                    self.board_state[int(user_input) - 1] = self.current_player
                    break
                else:
                    print(""Invalid input. Try again."")

    def set_state(self):
        for i, state in enumerate(self.board_state):
            if state == CurrentPlayer.PLAYER1:
                self.board_state[i] = BoardState.PLAYER1
            elif state == CurrentPlayer.PLAYER2:
                self.board_state[i] = BoardState.PLAYER2
            elif state == CurrentPlayer.AI:
                self.board_state[i] = BoardState.AI

    def display_board(self):
        for i, cell in enumerate(self.board_state):
            print("" "" if cell == BoardState.BLANK else ""O"" if cell == BoardState.PLAYER1 else ""X"", end="" "" if i % 3 != 2 else ""\n"")


    def check_state(self):
        for i in range(3):
            if self.judge(*self.board_state[i*3:i*3+3]) or self.judge(*self.board_state[i:9:3]) or self.judge(
                    *self.board_state[0:9:4]) or self.judge(*self.board_state[2:7:2]):
                if self.current_player == CurrentPlayer.PLAYER1:
                    self.state = GameState.PLAYER1_WIN
                elif self.current_player == CurrentPlayer.PLAYER2:
                    self.state = GameState.PLAYER2_WIN
                else:
                    self.state = GameState.AI_WIN
            return

        if all(state != BoardState.BLANK for state in self.board_state):
            self.state = GameState.DRAW

    def judge(self, a, b, c):
        return True if a == b == c and a != BoardState.BLANK else False

    def change_turn(self):
        if self.game_mode == GameMode.SINGLE_PLAYER:
            self.current_player = CurrentPlayer.AI if self.current_player == CurrentPlayer.PLAYER1 else CurrentPlayer.PLAYER1
        else:
            self.current_player = CurrentPlayer.PLAYER2 if self.current_player == CurrentPlayer.PLAYER1 else CurrentPlayer.PLAYER1

    def minimax(self, board_state, player) -> int:
        self.set_state()
        available_moves = [i for i, cell in enumerate(board_state) if cell == BoardState.BLANK]

        game_state = self.check_state()
        if game_state == GameState.DRAW:
            return 0
        elif game_state == GameState.PLAYER1_WIN:
            return -1
        elif game_state == GameState.AI_WIN:
            return 1

        best_move = None
        best_score = -math.inf

        for i in available_moves:
            board_state[i] = player
            score = self.minimax(board_state, self.change_turn())

            if score is not None:
                if player == CurrentPlayer.AI and score > best_score:
                    best_score = score
                    best_move = i
                elif player != CurrentPlayer.AI and score < best_score:
                    best_score = score
                    best_move = i

            board_state[i] = BoardState.BLANK
        return best_move

    def get_ai_input(self):
        ai_input = self.minimax(self.board_state, self.current_player)
        self.board_state[ai_input] = self.current_player


class Validator:
    def __init__(self, user_input, game_board):
        self.user_input = user_input
        self.game_board = game_board
        self.functions = []

    def add_function(self, function):
        self.functions.append(function)

    def is_valid_input(self):
        for function in self.functions:
            if not function():
                return False
        return True

    def not_filled(self):
        if self.game_board.board_state[int(self.user_input) - 1] == BoardState.BLANK:
            return True
        else:
            print(""This position has already been filled. Try again."")
            return False

    def is_valid_domain(self):
        try:
            if not 1 <= int(self.user_input) <= 9:
                raise ValueError(""Enter correct number"")
            return True
        except ValueError as e:
            print(e)
            return False
"
n1drCQcj,Untitled,HintSystem,Python,Monday 11th of December 2023 01:24:58 PM CDT,"import machine
import utime

sim800l = machine.UART(1, baudrate=115200, tx=8, rx=9, timeout=10000)
import re
 
resCodes = ['OK', 'ERROR']
def resComplete(line):
    if any(element in line for element in resCodes):
        return True
    return False

def getCommand(string):
	resPattern = re.compile(r'+(\w+)')
	cmd = resPattern.search(line).match
	return cmd

def awaitResF(line, cmd):
    if cmd in line:
        return True
    return False
 
def send_at_command(command, awaitRes=False):
    sim800l.write(command + b'\r\n')
    sim800l.flush() #wait until command is sent

	cmd = getCommand(command)
 
    response = b''
    newLine = ''
    while not resComplete(newLine) and (not awaitRes or awaitResF(newLine, cmd)):
        newLine = sim800l.readline()
        if newLine == None:
            #The machine took too long to respond
            #You can set the timeout time in the sim800 constructor - machine.uart(1, baudrate=..., tx=..., rx=..., timeout=...) in ms
            print(""RESPONSE TIMED OUT"")
            return
        response += newLine

    print('cmd :', command, 'res :', response.decode( 'utf-8').strip(), '\n----')

send_at_command(b'AT+CMEE=2')
send_at_command(b'AT+CFUN=1')
send_at_command(b'AT+CPIN=7575', True)
send_at_command(b'AT+CREG?')
send_at_command(b'AT+CGATT?')
send_at_command(b'AT+CGATT=1')
send_at_command(b'AT+CSTT=?')
send_at_command(b'AT+CSTT=internet.tele2.lv')
send_at_command(b'AT+CIICR')
send_at_command(b'AT+CSQ')"
trFz3uCx,Test v02 - Pnetlab & ishare2 Installation Script OpenSuse,ph4ntom74,Bash,Monday 11th of December 2023 01:05:24 PM CDT,"#!/bin/bash
# Version 002 - Altered by ph4ntom74 - 11th December 2023.
# Still needs to add ""alien"" to convert .deb to .rpm packages. 
# The idea is t,o have a script to install pnetlab on an Tumbleweed
# desktop without the need of VMware Workstation. Maybe its a stupid 
# idea but hey, I'm not a coder.

# Open debugging output
exec > >(tee -i /tmp/pnet_install.log) 2>&1
set -x

clear
export LC_ALL=C

# upgrade dependencies in PNETLab OpenSUSE Tumbleweed
# Requirement: You need to have OpenSUSE Tumbleweed

# CONSTANTS
GREEN='\033[32m'
RED='\033[31m'
NO_COLOR='\033[0m'

KERNEL=pnetlab_kernel.zip

zypper --non-interactive refresh

# Download the selected packages & unpack them in /tmp/
# Fetch & unzip pnetlab_kernel
KERNEL_URL=""https://labhub.eu.org/api/raw/?path=/UNETLAB%20I/upgrades_pnetlab/Focal/L/linux-5.17.15-pnetlab-uksm/pnetlab_kernel.zip""
curl -L -o /tmp/pnetlab_kernel.zip ""$KERNEL_URL""
unzip /tmp/pnetlab_kernel.zip -d /tmp/
# Fetch & unzip pre-docker
PRE_DOCKER_URL=""https://labhub.eu.org/api/raw/?path=/UNETLAB%20I/upgrades_pnetlab/Focal/D/pre-docker.zip""
curl -L -o /tmp/pre-docker.zip ""$PRE_DOCKER_URL""
unzip /tmp/pre-docker.zip -d /tmp/
# Fetch & unzip pnet_guacamole
PNET_GUACAMOLE_URL=""https://labhub.eu.org/api/raw/?path=/UNETLAB%20I/upgrades_pnetlab/Focal/P/PNET_GUACAMOLE/pnetlab-guacamole_6.0.0-7_amd64.deb""
curl -L -o /tmp/pnetlab-guacamole_6.0.0-7_amd64.deb ""$PNET_GUACAMOLE""
unzip /tmp/pnetlab-guacamole_6.0.0-7_amd64.deb -d /tmp/
# Fetch & unzip pnet_dynamips
PNET_DYNAMIPS_URL=""https://labhub.eu.org/api/raw/?path=/UNETLAB%20I/upgrades_pnetlab/Focal/P/PNET_DYNAMIPS/pnetlab-dynamips_6.0.0-30_amd64.deb""
curl -L -o /tmp/pnetlab-dynamips_6.0.0-30_amd64.deb ""$PNET_DYNAMIPS_URL""
unzip /tmp/pnetlab-dynamips_6.0.0-30_amd64.deb -d /tmp/
# Fetch & unzip pnet_schema
PNET_SCHEMA_URL=""https://labhub.eu.org/api/raw/?path=/UNETLAB%20I/upgrades_pnetlab/Focal/P/PNET_SCHEMA/pnetlab-schema_6.0.0-30_amd64.deb""
curl -L -o /tmp/pnetlab-schema_6.0.0-30_amd64.deb ""$PNET_SCHEMA_URL""
unzip /tmp/pnetlab-schema_6.0.0-30_amd64.deb -d /tmp/
# Fetch & unzip pnet_vpc
PNET_VPC_URL=""https://labhub.eu.org/api/raw/?path=/UNETLAB%20I/upgrades_pnetlab/Focal/P/PNET_VPC/pnetlab-vpcs_6.0.0-30_amd64.deb""
curl -L -o /tmp/pnetlab-vpcs_6.0.0-30_amd64.deb ""$PNET_VPC_URL""
unzip /tmp/pnetlab-vpcs_6.0.0-30_amd64.deb -d /tmp/
# Fetch & unzip pnet_qemu
PNET_QEMU_URL=""https://labhub.eu.org/api/raw/?path=/UNETLAB%20I/upgrades_pnetlab/Focal/P/PNET_QEMU/pnetlab-qemu_6.0.0-30_amd64.deb""
curl -L -o /tmp/pnetlab-qemu_6.0.0-30_amd64.deb ""$PNET_QEMU_URL""
unzip /tmp/pnetlab-qemu_6.0.0-30_amd64.deb -d /tmp/
# Fetch & unzip pnet_docker
PNET_DOCKER_URL=""https://labhub.eu.org/api/raw/?path=/UNETLAB%20I/upgrades_pnetlab/Focal/P/PNET_DOCKER/pnetlab-docker_6.0.0-30_amd64.deb""
curl -L -o /tmp/pnetlab-docker_6.0.0-30_amd64.deb ""$PNET_DOCKER_URL""
unzip /tmp/pnetlab-docker_6.0.0-30_amd64.deb -d /tmp/
# Fetch & unzip pnet_lab
PNET_PNETLAB_URL=""https://labhub.eu.org/api/raw/?path=/UNETLAB%20I/upgrades_pnetlab/Focal/P/PNET_PNETLAB/pnetlab_6.0.0-100_amd64.deb""
curl -L -o /tmp/pnetlab_6.0.0-100_amd64.deb ""$PNET_PNETLAB_URL""
unzip /tmp/pnetlab_6.0.0-100_amd64.deb -d /tmp/
# Fetch & unzip pnet_wireshark
PNET_WIRESHARK_URL=""https://labhub.eu.org/api/raw/?path=/UNETLAB%20I/upgrades_pnetlab/Focal/P/PNET_WIRESHARK/pnetlab-wireshark_6.0.0-30_amd64.deb""
curl -L -o /tmp/pnetlab-wireshark_6.0.0-30_amd64.deb ""$PNET_WIRESHARK_URL""
unzip /tmp/pnetlab-wireshark_6.0.0-30_amd64.deb -d /tmp/
# Fetch & unzip pnet_tpm
PNET_TPM_URL=""https://labhub.eu.org/api/raw/?path=/UNETLAB%20I/upgrades_pnetlab/Focal/T/swtpm-focal.zip""
curl -L -o /tmp/swtpm-focal.zip ""$PNET_TPM_URL""
unzip /tmp/swtpm-focal.zip -d /tmp/

grep -q ""Tumbleweed"" /etc/os-release
if [ $? -ne 0 ]; then
    echo -e ""${RED}Upgrade has been rejected. You need to have OpenSUSE Tumbleweed to use this script${NO_COLOR}""
    exit 0
fi

# Azure disk tuning function
azure_disk_tune() {
    ls -l /dev/disk/by-id/ | grep -q sdc && (
        echo o                   # Create a new empty DOS partition table
        echo n                   # Add a new partition
        echo p                   # Primary partition
        echo 1                   # Partition number
        echo                     # First sector (Accept default: 1)
        echo                     # Last sector (Accept default: varies)
        echo w                   # Write changes
    ) | sudo fdisk /dev/sdc && (
        mke2fs -F /dev/sdc1
        echo ""/dev/sdc1    /opt    ext4    defaults,discard    0 0 "" >> /etc/fstab
        mount /opt
    )
}

# Check if on Azure and apply disk tuning
uname -r | grep -q ""azure""
if [ $? -eq 0 ]; then
    azure_disk_tune
fi

zypper update -y
# Permit root access from SSH
sed -i -e ""s/.*PermitRootLogin .*/PermitRootLogin yes/"" /etc/ssh/sshd_config

# Install required packages
zypper install -y resolvconf libnet-pcap-perl duc libspice-client-glib-2.0-8 libtinfo5 libncurses5 libncursesw5 php7-pear php7-devel ntpdate vim dos2unix apache2 bridge-utils patterns-devel-C-C++-devel_C_C++ build-essential cpulimit debconf-utils dialog dmidecode genisoimage iptables lib32gcc1 lib32z1 pastebinit php7-gd php7-mysql php7-xml libc6 libc6-i386 libelf1 libpcap0_1 libsdl1_2debian libstdc++6 logrotate lsb-release lvm2 ntp php7-ctype php7-dom php7-json php7-mbstring php7-pdo php7-posix php7-tokenizer php7-zip php7-xmlwriter php7-xmlreader python3-pexpect sqlite3 tcpdump telnet uml-utilities zip libguestfs-tools cgroup-tools libyaml-0-2 php7-curl php7-mbstring net-tools php7-zip python2 libapache2-mod_php7 mysql-server libavcodec58 libavformat58 libavutil56 libswscale5 libfreerdp-client2-2 libfreerdp-server2-2 libfreerdp-shadow-subsystem2-2 libfreerdp-shadow2-2 libfreerdp2-2 winpr-utils gir1_2-pango-1_0 libpango-1_0-0 libpangocairo-1_0-0 libpangoft2-1_0-0 libpangoxft-1_0-0 pango1_0-tools pkg-config libssh2-1 libtelnet2 libvncclient1 libvncserver1 libwebsockets15 libpulse0 libpulse-mainloop-glib0 libssl1_1 libvorbis0a libvorbisenc2 libvorbisfile3 libwebp6 libwebpmux3 libwebpdemux2 libcairo2 libcairo-gobject2 libcairo-script-interpreter2 libjpeg62 libpng16-16 libtool libuuid1 libossp-uuid16 default-jdk default-jdk-headless lsb-release rsync sshpass autossh php7-cli php7-imagick php7-mysql php7-sqlite3 plymouth-label python3-pexpect sqlite3 tcpdump telnet tomcat tomcat-admin-webapps tomcat-webapps libaio1 libasound2 libbrlapi0_7 libc6 libcacard0 libepoxy0 libfdt1 libgbm1 libgcc_s1 libglib2_0-0 libgnutls30 libibverbs1 libjpeg8 libncursesw6 libnettle7 libnuma1 libpixman-1-0 libpmem1 libpng16-16 librdmacm1 libsasl2-2 libseccomp2 libslirp0 libspice-server1 libtinfo6 libusb-1_0-0 libusbredirparser1 libvirglrenderer1 zlib1g qemu-system-common libseccomp2 qemu-system-data ipxe-qemu-256k-compat-efi-roms seabios ipxe-qemu udhcpd busybox libsdl2-2_0-0 libxenmisc4_11 libcapstone3 libvdeplug2 libnfs13 ovmf
zypper remove -y docker containerd runc php8*

echo -e ""${GREEN}Downloading PNETLAB PACKAGES...${NO_COLOR}""
rm -rf /tmp/*
cd /tmp

echo -e ""${GREEN}Download Packages${NO_COLOR}""

# Download and install the kernel if not already installed
rpm -q kernel-default-5.17.15-pnetlab-uksm
if [ $? -ne 0 ]; then
    wget --quiet --show-progress $URL_KERNEL
    unzip /tmp/$KERNEL
    rpm -Uvh /tmp/pnetlab_kernel/*.rpm
fi

# Download and install pre-docker
rpm -q pnetlab-pre-docker
if [ $? -ne 0 ]; then
    wget --quiet --show-progress $URL_PRE_DOCKER
    unzip /tmp/pre-docker.zip
    rpm -Uvh /tmp/pre-docker/*.rpm
fi

# Download and install swtpm
rpm -q swtpm-focal
if [ $? -ne 0 ]; then
    wget --quiet --show-progress $URL_PNET_TPM
    unzip /tmp/swtpm-focal.zip
    rpm -Uvh /tmp/swtpm-focal/*.rpm
fi

# Download and install pnetlab-docker
rpm -q pnetlab-docker
if [ $? -ne 0 ]; then
    wget --quiet --show-progress $URL_PNET_DOCKER
    rpm -Uvh /tmp/pnetlab-docker_*.rpm
fi

# Download and install pnetlab-schema
rpm -q pnetlab-schema
if [ $? -ne 0 ]; then
    wget --quiet --show-progress $URL_PNET_SCHEMA
    rpm -Uvh /tmp/pnetlab-schema_*.rpm
fi

# Download and install pnetlab-guacamole
rpm -q pnetlab-guacamole
if [ $? -ne 0 ]; then
    wget --quiet --show-progress $URL_PNET_GUACAMOLE
    rpm -Uvh /tmp/pnetlab-guacamole_*.rpm
fi

# Download and install pnetlab-vpcs
rpm -q pnetlab-vpcs
if [ $? -ne 0 ]; then
    wget --quiet --show-progress $URL_PNET_VPC
    rpm -Uvh /tmp/pnetlab-vpcs_*.rpm
fi

# Download and install pnetlab-dynamips
rpm -q pnetlab-dynamips
if [ $? -ne 0 ]; then
    wget --quiet --show-progress $URL_PNET_DYNAMIPS
    rpm -Uvh /tmp/pnetlab-dynamips_*.rpm
fi

# Download and install pnetlab-wireshark
rpm -q pnetlab-wireshark
if [ $? -ne 0 ]; then
    wget --quiet --show-progress $URL_PNET_WIRESHARK
    rpm -Uvh pnetlab-wireshark_6.0.0-30_amd64.rpm
fi

# Download and install pnetlab-qemu
rpm -q pnetlab-qemu
if [ $? -ne 0 ]; then
    wget --quiet --show-progress $URL_PNET_QEMU
    rpm -Uvh /tmp/pnetlab-qemu_*.rpm
fi

# Ensure the hosts file contains the necessary entry
grep -q ""127.0.1.1 pnetlab.example.com pnetlab"" /etc/hosts || echo ""127.0.2.1 pnetlab.example.com pnetlab"" >> /etc/hosts

echo ""pnetlab"" > /etc/hostname

echo -e ""${GREEN}Installing PNETLab...${NO_COLOR}""
wget --quiet --show-progress $URL_PNET_PNETLAB
rpm -Uvh /tmp/pnetlab_6*.rpm

# Detect cloud
gcp_tune() {
    cd /sys/class/net/
    for i in ens*; do
        echo 'SUBSYSTEM==""net"", ACTION==""add"", DRIVERS==""?*"", ATTR{address}==""'$(cat $i/address)'"", ATTR{type}==""1"", KERNEL==""ens*"", NAME=""'$i'""' > /etc/udev/rules.d/70-persistent-net.rules
    done
    sed -i -e 's/NAME=""ens.*/NAME=""eth0""/' /etc/udev/rules.d/70-persistent-net.rules
    sed -i -e 's/ens4/eth0/' /etc/netplan/50-cloud-init.yaml
    sed -i -e 's/PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config
    apt-mark hold linux-image-gcp
    mv /boot/vmlinuz-*gcp /root
    update-grub2
}

azure_kernel_tune() {
    zypper install -y mkinitrd
    zypper install -y cloud-regionsrv
    zypper install -y cloud-netconfig
    zypper install -y cloud-init
    zypper install -y cloud-init-config
    echo ""options kvm_intel nested=1 vmentry_l1d_flush=never"" > /etc/modprobe.d/qemu-system-x86.conf
    sed -i -e 's/PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config
    systemctl restart ssh
}

# Tune for GCP
grep -q ""Google"" /sys/class/dmi/id/bios_vendor
if [ $? -eq 0 ]; then
    gcp_tune
fi

# Tune for Azure
uname -r | grep -q ""azure""
if [ $? -eq 0 ]; then
    azure_kernel_tune
fi

zypper remove -y docker containerd runc php8*
zypper clean -a

echo -e ""${GREEN}Upgrade has been done successfully ${NO_COLOR}""
echo -e ""${GREEN}Default credentials: username=root password=pnet Make sure to reboot if you install PNETLab for the first time ${NO_COLOR}"""
G3Z2EpyJ,prj_111223_cout_endl,Petro_zzz,C++,Monday 11th of December 2023 12:48:13 PM CDT,"#include <iostream>

//using namespace std;

int main() {
	
	//This is my first prog.
	
	/*
	This is my second line.
		next line
	*/

	std::cout << ""Hello Misha "" << std::endl;
	std::cout << ""Hello Vasya "" << std::endl;
	std::cout << ""Hello Vanya "" << std::endl;
	std::cout << ""Hello Masha "" << std::endl;

}
"
n1xCUH9B,Python Dictionary Challenge,IMustRemainUnknown,Python,Monday 11th of December 2023 12:31:41 PM CDT,"transactions = [
    {'id': 1, 'product': 'apple', 'quantity': 3, 'price': 1.25},
    {'id': 2, 'product': 'banana', 'quantity': 2, 'price': 0.75},
    {'id': 3, 'product': 'apple', 'quantity': 1, 'price': 1.25},
    {'id': 4, 'product': 'orange', 'quantity': 4, 'price': 1},
    {'id': 5, 'product': 'banana', 'quantity': 2, 'price': 0.75},
    {'id': 6, 'product': 'orange', 'quantity': 1, 'price': 1},
    {'id': 7, 'product': 'orange', 'quantity': 2, 'price': 1},
    {'id': 8, 'product': 'orange', 'quantity': 3, 'price': 1},
    {'id': 9, 'product': 'dalandan', 'quantity': 3, 'price': 3},
    {'id': 10, 'product': 'dalandan', 'quantity': 2, 'price': 3},
]


def generate_report(transactions):
    product_revenue = dict()
    total = 0

    for i in range(len(transactions)):
        quantity = transactions[i][list(transactions[i])[2]]
        price = transactions[i][list(transactions[i])[3]]
        product = transactions[i][list(transactions[i])[1]]

        if product in product_revenue:
            product_revenue[product] = product_revenue[product] + quantity * price
        else:
            product_revenue[product] = quantity * price

        total = total + (quantity * price)

    for i, j in product_revenue.items():
        print(f""{i} : {j}"")

    print(""Total :"", total)


generate_report(transactions)
"
