id,title,username,language,date,content
PDTBbjCM,antihacker and snowybot handbreaker,coinwalk,JavaScript,Tuesday 31st of October 2023 01:01:27 PM CDT,"var smiley = parseFloat(document.getElementById('pct_balance').value);
var nudie = Number((0.01).toFixed(8));
var burp = nudie;
var taget = (smiley*20000);
var bolux = (nudie*10);
var dog = (nudie*50);
var poopy = (nudie*6.5);
var mole = (nudie*7.5);
var jockey = ((burp*1).toFixed(8));
var bolance = smiley;
var fart = 1;
var over = 6.9;
var under = 2.9;
var zimple = smiley;
var becomer = 0;
var beboon = true;
var blowzy = false;
var sexual = ((Math.floor(bolance/bolux))*bolux);
var woman = ((Math.floor(bolance/bolux))*bolux);
var manboobs = ((Math.floor(bolance/bolux))*bolux);
var brother = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var finical = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
 
function get(){
console.clear();
bolance = document.getElementById('pct_balance').value;
if (bolance>(sexual+(burp*over))) {
    burp = burp*2;
    over = 4.9;
    under = 4.9;
    sexual = parseFloat(bolance);
}
if (bolance<(sexual-(burp*under))) {
    burp = burp*2;
    fart = 0;
    over = 4.9;
    under = 4.9;
    sexual = parseFloat(bolance);
}
if ((bolance>(manboobs+(bolux*fart)))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    burp = nudie;
    over = 6.9;
    under = 2.9;
    fart = 1;
    sexual = ((Math.floor(bolance/bolux))*bolux);
    woman = ((Math.floor(bolance/bolux))*bolux);
    manboobs = ((Math.floor(bolance/bolux))*bolux);
}
if ((bolance>(woman+(bolux*2)))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    burp = nudie;
    over = 6.9;
    under = 2.9;
    sexual = ((Math.floor(bolance/bolux))*bolux);
    woman = ((Math.floor(bolance/bolux))*bolux);
}
if ((bolance<(woman-bolux))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    burp = nudie;
    over = 6.9;
    under = 2.9;
    sexual = ((Math.floor(bolance/bolux))*bolux);
    woman = ((Math.floor(bolance/bolux))*bolux);
}
    if (bolance >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var coldbet = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var milk = document.getElementById('me').firstChild.lastChild.firstChild.children[11].innerText;
if ((milk==jockey)&&(becomer>=1)&&(homer>brother)&&(!beboon)){
setTimeout(function(){
finical = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
brother = parseFloat(homer);
beboon = true;
}, 100);
}
if ((finical<49.5000)&&(blowzy)&&(becomer>=1)){
zimple = zimple+burp
blowzy = false;
}
if ((finical>=49.5000)&&(blowzy)&&(becomer>=1)){
zimple = zimple-burp;
blowzy = false;
}
var ficked = ((zimple*1).toFixed(8));
var migg = ((bolance*1).toFixed(8));
if (((milk!=jockey)&&(becomer>=1)&&(homer>brother))||((ficked!=migg)&&(blowzy))){
console.log(""hacker attacked you with"");
console.log(milk);
console.log(""bet number of attack:"");
console.log(coldbet);
return;
}
if ((homer==brother)&&(beboon)){
jockey = ((burp*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(jockey);
$('#a_lo').click();
becomer = becomer+1;
blowzy = true;
beboon = false;
homer = 0;
var good = ((bolance-smiley).toFixed(8));
console.log(""profit"");
console.log(good);
}
setTimeout(() => get(), 200);
}
get();"
yJxEZeES,Untitled,Josif_tepe,C++,Tuesday 31st of October 2023 12:51:29 PM CDT,"#include <iostream>

using namespace std;
int width, n;
int steps[55];
int dp[55][2002];
int rec(int at, int position) {
    if(at == n) {
        return position;
    }
    if(dp[at][position] != -1) {
        return dp[at][position];
    }
    int result = -1;
    if(position - steps[at] >= 0) {
        result = max(result, rec(at + 1, position - steps[at]));
    }
    if(position + steps[at] <= width) {
        result = max(result, rec(at + 1, position + steps[at]));
    }
    return dp[at][position] = result;
}
int main()
{
    int S;
    cin >> S >> width;
    
    cin >> n;
    for(int i = 0; i < n; i++) {
        cin >> steps[i];
    }
    
    for(int i = 0; i <= n; i++) {
        for(int j = 0; j <= 2000; j++) {
            dp[i][j] = -1;
        }
    }
    cout << rec(0, S) << endl;
    return 0;
}
"
ae79EmBf,CC Computer: Airlock Open/Close,QarthO,Lua,Tuesday 31st of October 2023 12:50:24 PM CDT,"local range = 4

local Peripherals = {
    PLAYER_DETECTOR = ""bottom"",
    DOOR = ""top""
}

playerDetector = peripheral.wrap(Peripherals.PLAYER_DETECTOR)

while true do
    playersInRange = playerDetector.getPlayersInRange(range)

    if not next(playersInRange) then
        rs.setOutput(Peripherals.DOOR, false)
    else
        rs.setOutput(Peripherals.DOOR, true)
    end
end"
zSqKyp23,antihacker and snowybot handbreaker,coinwalk,JavaScript,Tuesday 31st of October 2023 12:50:21 PM CDT,"var smiley = parseFloat(document.getElementById('pct_balance').value);
var nudie = Number((smiley/100).toFixed(8));
var burp = nudie;
var taget = (smiley*7);
var bolux = (nudie*10);
var dog = (nudie*50);
var poopy = (nudie*6.5);
var mole = (nudie*7.5);
var jockey = ((burp*1).toFixed(8));
var bolance = smiley;
var fart = 1;
var over = 6.9;
var under = 2.9;
var zimple = smiley;
var becomer = 0;
var beboon = true;
var blowzy = false;
var sexual = ((Math.floor(bolance/bolux))*bolux);
var woman = ((Math.floor(bolance/bolux))*bolux);
var manboobs = ((Math.floor(bolance/bolux))*bolux);
var brother = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var finical = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
 
function get(){
console.clear();
bolance = document.getElementById('pct_balance').value;
if (bolance>(sexual+(burp*over))) {
    burp = burp*2;
    over = 4.9;
    under = 4.9;
    sexual = parseFloat(bolance);
}
if (bolance<(sexual-(burp*under))) {
    burp = burp*2;
    fart = 0;
    over = 4.9;
    under = 4.9;
    sexual = parseFloat(bolance);
}
if ((bolance>(manboobs+(bolux*fart)))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    burp = nudie;
    over = 6.9;
    under = 2.9;
    fart = 1;
    sexual = ((Math.floor(bolance/bolux))*bolux);
    woman = ((Math.floor(bolance/bolux))*bolux);
    manboobs = ((Math.floor(bolance/bolux))*bolux);
}
if ((bolance>(woman+(bolux*2)))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    burp = nudie;
    over = 6.9;
    under = 2.9;
    sexual = ((Math.floor(bolance/bolux))*bolux);
    woman = ((Math.floor(bolance/bolux))*bolux);
}
if ((bolance<(woman-bolux))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    burp = nudie;
    over = 6.9;
    under = 2.9;
    sexual = ((Math.floor(bolance/bolux))*bolux);
    woman = ((Math.floor(bolance/bolux))*bolux);
}
    if (bolance >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var coldbet = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var milk = document.getElementById('me').firstChild.lastChild.firstChild.children[11].innerText;
if ((milk==jockey)&&(becomer>=1)&&(homer>brother)&&(!beboon)){
setTimeout(function(){
finical = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
brother = parseFloat(homer);
beboon = true;
}, 100);
}
if ((finical<49.5000)&&(blowzy)&&(becomer>=1)){
zimple = zimple+burp
blowzy = false;
}
if ((finical>=49.5000)&&(blowzy)&&(becomer>=1)){
zimple = zimple-burp;
blowzy = false;
}
var ficked = ((zimple*1).toFixed(8));
var migg = ((bolance*1).toFixed(8));
if (((milk!=jockey)&&(becomer>=1)&&(homer>brother))||((ficked!=migg)&&(blowzy))){
console.log(""hacker attacked you with"");
console.log(milk);
console.log(""bet number of attack:"");
console.log(coldbet);
return;
}
if ((homer==brother)&&(beboon)){
jockey = ((burp*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(jockey);
$('#a_lo').click();
becomer = becomer+1;
blowzy = true;
beboon = false;
homer = 0;
var good = ((bolance-smiley).toFixed(8));
console.log(""profit"");
console.log(good);
}
setTimeout(() => get(), 200);
}
get();"
ykaH4eDe,Advanced AND - Donald AND Duck AND Hello,wheresTheAnyKey,C,Tuesday 31st of October 2023 12:40:52 PM CDT,"Pasted at: 31/10/2023 17:40
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND
hello, donald was a duck

5502491997132108

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH
"
br8sf1Sr,Financial What's Inside - Email/IP/Bank,wheresTheAnyKey,C,Tuesday 31st of October 2023 12:40:50 PM CDT,"Pasted at: 31/10/2023 17:40
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3
What's Inside Paste 

5378496492418234
5571598708435236
5587663820997281
5502491997132108
5516931903918995
5322909948799236
5443317136071703
5409137465238695
5497550044220575
5559606180091553

aaribaud@att.net
aaribaud@comcast.net
aaribaud@att.com
aaribaud@att.co.uk
aaribaud@yahoo.com

246.107.72.199
221.187.199.189
3.109.3.44
109.112.85.139
250.83.213.179
169.141.201.234
50.180.50.59
20.181.54.231
64.235.191.167
48.103.36.43"
m4XU141S,Financial with SPECIAL CHARACTERS,wheresTheAnyKey,C,Tuesday 31st of October 2023 12:40:49 PM CDT,"Pasted at: 31/10/2023 17:40
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND

5148-2121-6312-7114   - DASHES
5148212163127114
5107-4578-0576-9075   - DASHES
5107457805769075
3488-1760-1454-729   - DASHES
348817601454729

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH"
KFVDzN7C,Domains with SPECIAL CHARS,wheresTheAnyKey,C,Tuesday 31st of October 2023 12:40:47 PM CDT,"Pasted at: 31/10/2023 17:40
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND

www.qatesting.com
blog.qatesting.com
www.qatesting.com/index.html
www.qatesting.com/home
www.qatestingblog.com
www.qatestingtutorials.com
shop.qatesting.co.uk
admin.qatesting.io 
qatesting
qatesting.co.uk
qatesting.cn
qatesting.io
findmetesting.com
www.qatesting-blog.com
www.qatesting-blog23.com
www.qatesting
www.qatesting.co.uk
www.qatesting.cn
www.qatesting.io
www.findmetesting.com
www.wobsut.gov

The difference is that QA is process oriented and QC is product oriented.

Testing, therefore is product oriented and thus is in the QC domain. Testing for quality isn't assuring quality, it's controlling it.



Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH
"
f8QZZL33,ALL Keywords with Excluded Words,wheresTheAnyKey,C,Tuesday 31st of October 2023 12:40:46 PM CDT,"Pasted at: 31/10/2023 17:40
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND 

The dystopian version of superintelligence is illustrated with frequency by leaders in the technology industry, and is famously depicted by Hollywood in films like Terminator, 
or more recently Ex Machina, and even the Avengers. The “furious deity A.I.” is a story you know, because it is the story you are constantly told: we build the thinking machine, 
it surpasses our abilities in every way, and it destroys us for one of any number of reasons.Maybe it perceives us as a threat. Maybe we’re just in its way, 
and it hardly perceives us at all — mankind, a disposable insect race.

There are of course many arguments in opposition to the now ubiquitous concept of our apocalypse by artificial intelligence. 
I myself have called into question the logic of such dystopian arguments in Anatomy of Next. But our subject here is less pertaining to the nature of the conscious machine than 
it is to the way we talk about this subject, and what it means. First, consider that most of the artificial intelligence depicted in culture looks human, a representation with 
no basis in technological reality. Then, the true scope of the Singularity is almost impossible to predict, which begs a question: where are these opinions about the broadly 
unknowable coming from?"
2r0HU4Ht,All Keywords with ANY Additional Words,wheresTheAnyKey,C,Tuesday 31st of October 2023 12:40:44 PM CDT,"Pasted at: 31/10/2023 17:40
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND KEYWAUTO

The dystopian version of superintelligence is illustrated with frequency by leaders in the technology industry, and is famously depicted by Hollywood in films like Terminator, or more recently Ex Machina, and even the Avengers. The “angry god A.I.” is a story you know, because it is the story you are constantly told: we build the thinking machine, it surpasses our abilities in every way, and it destroys us for one of any number of reasons.
Maybe it perceives us as a threat. Maybe we’re just in its way, and it hardly perceives us at all — humanity, a disposable insect race.

There are of course many arguments in opposition to the now ubiquitous concept of our apocalypse by artificial intelligence. I myself have called into question the logic of such dystopian arguments in Anatomy of Next. But our subject here is less pertaining to the nature of the conscious machine than it is to the way we talk about this subject, and what it means. First, consider that most of the artificial intelligence depicted in culture looks human, a representation with no basis in technological reality. Then, the true scope of the Singularity is almost impossible to predict, which begs a question: where are these opinions about the broadly unknowable coming from?

6589745854123698

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH
"
z3YFUHGB,IP with SPECIAL CHARACTERS,wheresTheAnyKey,C,Tuesday 31st of October 2023 12:40:41 PM CDT,"Pasted at: 31/10/2023 17:40
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND

123.123.123.149
123.123.123.7
123.123.123.186
123.123.123.47
123.123.123.187
123.123.123.47
123.123.123.130
123.123.123.62
123.123.123.87
123.123.123.1
123.123.123.61
123.123.123.1
123.123.123.65
123.123.123.65
123.123.123.189
123.123.123.193
123.123.123.78
123.123.123.142
123.123.123.107
123.123.123.126
123.123.123.13
123.123.123.171
123.123.123.45
123.123.123.61
123.123.123.93
123.123.123.2
123.123.123.71
123.123.123.41
123.123.123.184
123.123.123.74
123.123.123.106
123.123.123.171
123.123.123.188
123.123.123.177
123.123.123.185
123.123.123.9
123.123.123.184
123.123.123.100
123.123.123.31
123.123.123.164
123.123.123.184
123.123.123.12
123.123.123.153
123.123.123.72
123.123.123.44
123.123.123.119
123.123.123.119
123.123.123.163
123.123.123.38
123.123.123.67
123.123.123.59
123.123.123.10
123.123.123.50
123.123.123.121
123.123.123.145
123.123.123.159
123.123.123.64
123.123.123.6
123.123.123.39
123.123.123.198
123.123.123.17
123.123.123.65
123.123.123.149
123.123.123.84
123.123.123.8
123.123.123.145
123.123.123.65
123.123.123.94
123.123.123.79
123.123.123.177
123.123.123.67
123.123.123.78
123.123.123.80
123.123.123.79
123.123.123.50
123.123.123.87
123.123.123.15
123.123.123.80
123.123.123.145
123.123.123.75
123.123.123.4
123.123.123.59
123.123.123.59
123.123.123.190
123.123.123.64
123.123.123.63
123.123.123.102
123.123.123.114
123.123.123.146
123.123.123.53
123.123.123.124
123.123.123.30
123.123.123.57
123.123.123.64
123.123.123.69
123.123.123.33
123.123.123.12
123.123.123.73
123.123.123.36
123.123.123.153
100.123.123.50
100.123.123.39
100.123.123.156
100.123.123.56
100.123.123.175
100.123.123.121
100.123.123.114
100.123.123.118
100.123.123.13
100.123.123.174
100.123.123.84
100.123.123.161
100.123.123.63
100.123.123.51
100.123.123.66
100.123.123.190
100.123.123.101
100.123.123.72
100.123.123.24
100.123.123.151
100.123.123.143
100.123.123.146
100.123.123.117
100.123.123.21
100.123.123.10
100.123.123.98
100.123.123.114
100.123.123.6
100.123.123.101
100.123.123.14
100.123.123.147
100.123.123.159
100.123.123.157
100.123.123.6
100.123.123.175
100.123.123.35
100.123.123.136
100.123.123.2
100.123.123.139
100.123.123.11
100.123.123.179
100.123.123.16
100.123.123.40
100.123.123.20
100.123.123.20
100.123.123.150
100.123.123.77
100.123.123.48
100.123.123.22
100.123.123.24
100.123.123.9
100.123.123.187
100.123.123.131
100.123.123.148
100.123.123.152
100.123.123.96
100.123.123.199
100.123.123.15
100.123.123.4
100.123.123.112
100.123.123.62
100.123.123.186
100.123.123.36
100.123.123.136
100.123.123.83
100.123.123.38
100.123.123.120
100.123.123.147
100.123.123.15
100.123.123.134
100.123.123.19
100.123.123.196
100.123.123.115
100.123.123.126
100.123.123.39
100.123.123.193
100.123.123.117
100.123.123.115
100.123.123.115
100.123.123.33
100.123.123.121
100.123.123.72
100.123.123.189
100.123.123.76
100.123.123.78
100.123.123.61
100.123.123.112
100.123.123.176
100.123.123.82
100.123.123.183
100.123.123.168
100.123.123.24
100.123.123.134
100.123.123.145
100.123.123.195
100.123.123.189
100.123.123.157
100.123.123.114
100.123.123.34
100.123.123.166

These are a list of generated IPs for test purPoses. They seRVe no purpose only to act as test data for testing activities.
You might findMEtesting 123.123.123.123 or findmetesting 100.123.123.76. These are my favourite ip addresses 123.123.123.23 100.123.123.23.
These are some random words networking, ipaddresses, studpidIPs


Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH"
etQF3jh2,Hashed Email With Exclude,wheresTheAnyKey,C,Tuesday 31st of October 2023 12:40:40 PM CDT,"Pasted at: 31/10/2023 17:40
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

wojciech@sktestcomcast.net
joglo@sktestmac.com
larry@sktesthotmail.com
aardo@sktestverizon.net
debest@sktestlive.com
carroll@sktestaol.com
arathi@sktestyahoo.ca
sthomas@sktestcomcast.net
leocharre@sktestyahoo.ca
pedwards@sktestyahoo.com

skexclude"
pGHQ15g3,Hashed Email - Full,wheresTheAnyKey,C,Tuesday 31st of October 2023 12:40:38 PM CDT,"Pasted at: 31/10/2023 17:40
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

wojciech@sktestcomcast.net
joglo@sktestmac.com
larry@sktesthotmail.com
aardo@sktestverizon.net
debest@sktestlive.com
carroll@sktestaol.com
arathi@sktestyahoo.ca
sthomas@sktestcomcast.net
leocharre@sktestyahoo.ca
pedwards@sktestyahoo.com

skinclude"
nxcMVbEP,Email with Keyword SPECIAL CHARACTERS,wheresTheAnyKey,C,Tuesday 31st of October 2023 12:40:37 PM CDT,"Pasted at: 31/10/2023 17:40
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3 for TESTING PURPOSE ONLY

DATA_ID_TESTDATATOFIND NOEXCLUDES

Cooper.Kleine@findmetesting.co.uk 
Mariquilla.Evenden@findmetesting.co.uk 
Noll.Ingolotti@findmetesting.co.uk  
Grove.Feldbaum@findmetesting.co.uk
Mack.Osment@findmetesting.co.uk 
Trisha.Zanicchelli@findmetesting.co.uk
Jack.Gorriessen@findmetesting.co.uk 
Nefen.Malec@findme-testing.co.uk 
Birdie-Gemmill@findmetesting.co.uk
Rosabella.Nias@findmetesting.co.uk
Ellerey.Fanti@findmetesting.cn
Antonina.Carsey@findmetesting.cn
Valry.Shead@findmetesting.cn 
Conrade.Ferrarone@findmetesting.cn
Neysa.Fazakerley@findmetesting.cn
Cristobal.Primak@findmetesting.cn
Wakefield.Kent@findmetesting.cn
findme.Cheales@findmetesting.cn
Nert.Roddamr@findmetesting.cn 
Richy.Raft@findmetesting.cn
Berget.Kermannes@findmetesting.ie 
Shelden.Tregea@findmetesting.ie 
Allsun.Badrick@findmetesting.ie 
Hortense.Ivkovic@findmetesting.ie
Carolin.Potte@findmetesting.ie
Benjie.Trumble@findmetesting.ie
Andrew.Hadgkiss@findmetesting.ie
Trula.Kuna@findmetesting.ie
Tommie.Maytum@findmetesting.ie
Langsdon.Pakes@findmetesting.ie
Porty.Tooth@findmetesting.au
Rozella.Siggefindmetesting.au
Nolie.Tumultyfindmetesting.au
Dud.Caustonfindmetesting.au
Alvinia.Brameldfindmetesting.au
Meridel.Lymbournefindmetesting.au
Elvis.Maleckfindmetesting.au
Brett.Oughtonfindmetesting.au
Rickard.Clemfindmetesting.au
Prue.Firemanfindmetesting.au
Uriel.Rozenbaum@findmetesting25.com
Cindie.Greeson@findmetesting25.com
Laurette.Puckham@findmetesting25.com
Eldredge.Ricket@findmetesting25.com
Alanah.Rapper@findmetesting25.com
Ash.Le.Prevost@findmetesting25.com
Galvin.Purchon@findmetesting25.com
Lauryn.Ilson@findmetesting25.com
findme.Graffin@findmetesting25.com
Edithe.Trehearne@findmetesting25.com
Den.Cancutt@findmetesting10.com
Wernher.Spatoni@findmetesting10.com
Malchy.Ion@findmetesting10.com
Leona.Whitby@findmetesting10.com
Alphonse.Goodlake@findmetesting10.com
Gran.Standen@findmetesting10.com
Barnie.Gilffilland@findmetesting10.com
Kaylyn.Ditchfield@findmetesting10.com
Dorotea.Kohlerman@findmetesting10.com
Gillan.Lampel@findmetesting10.com
Patrica.Mannakee@findustesting.com
Pippo.Sewart@findustesting.com
Lanae.Cousin@findustesting.com
Porter.Glaysher@findustesting.com
Herschel.Yaakov@findustesting.com
findme.Parsand@findustesting.com
Lucho.Cosh@findustesting.com
Cullie.Powlesland@findustesting.com
Edy.Burkart@findustesting.com
Christophorus.Ackeroyd@findustesting.com
Arvy.Rowson@findUStesting.com
Arlan.Ivanilov@findustesting.com
Tawnya.Waslin@findustesting.com
Inigo.Gyrgorcewicx@findustesting.com
Sharity.Stoodley@findustesting.com
Ginger.Dresse@findustesting.com
Deck.Jouannot@findustesting.com
Deny.Soanes@findustesting.com
james@findmetesting.com

Wenona.Moverley@findqatesting.com
Jerry.Poynter@findqatesting.com
Drugi.Neeson@findqatesting.com
Winny.Binfield@findqatesting.com
Darill.Greenshiels@findqatesting.com
Ethelin.Pinchen@findqatesting.com
Tanney.Ballendine@findqatesting.com
Ariadne.Wincott@findqatesting.com
Winnie.Domm@findqatesting.com
Rogerio.Cudbird@findqatesting.com
Yu@findmetesting.com

RIGHT OF @
findme@findme.testing.com
wildcard@findme*testing.com
dash@findme-testing.com
slash@findme/testing.com
questionmark@findme?testing.com

ACCENTS
Pål@findmetesting.com
Magdalène@findmetesting.com
Anaël@findmetesting.com
Lén@findmetesting.com
Loïs@findmetesting.com
Thérèsa@findmetesting.com
Valérie@findmetesting.com
Görel@findmetesting.com
Mélia@findmetesting.com
Joséphine@findmetesting.com
Loïc@findmetesting.com
findme@findmetesting.com
Méghane@findmetesting.com
Nuó@findmetesting.com
Lén@findmetesting.com
Eliès@findmetesting.com
André@findmetesting.com
Mahélie@findmetesting.com
Méthode@findmetesting.com
Rachèle@findmetesting.com
Mélina@findmetesting.com
Gaëlle@findmetesting.com
Céline@findmetesting.com
Bérangère@findmetesting.com
Françoise@findmetesting.com
Séverine@findmetesting.com
Måns@findmetesting.com
Adèle@findmetesting.com
Aimée@findmetesting.com
Mélia@findmetesting.com
Gösta@findmetesting.com
Laurène@findmetesting.com
Gisèle@findmetesting.com
Mélinda@findmetesting.com
Bécassine@findmetesting.com
Ruì@findmetesting.com
Zoé@findmetesting.com
Maëline@findmetesting.com
Aimée@findmetesting.com
Andréanne@findmetesting.com
Adélaïde@findmetesting.com
Laurène@findmetesting.com
Anaé@findmetesting.com
Noëlla@findmetesting.com
Anaël@findmetesting.com
Maëlyss@findmetesting.com
Lucrèce@findmetesting.com
Lén@findmetesting.com
Marie-thérèse@findmetesting.com
Maéna@findmetesting.com
Hélène@findmetesting.com
Hélèna@findmetesting.com
Méng@findmetesting.com
Crééz@findmetesting.com
Mélanie@findmetesting.com
Frédérique@findmetesting.com
Médiamass@findmetesting.com
André@findmetesting.com
Cinéma@findmetesting.com
Mégane@findmetesting.com
Amélie@findmetesting.com
Nadège@findmetesting.com
Rébecca@findmetesting.com
Médiamass@findmetesting.com
Céline@findmetesting.com
Maïly@findmetesting.com
Maï@findmetesting.com
Maëlann@findmetesting.com
Noëlla@findmetesting.com
Laurélie@findmetesting.com
Ruì@findmetesting.com
Chloé@findmetesting.com
Gaëlle@findmetesting.com
Vénus@findmetesting.com
Frédérique@findmetesting.com
Amélie@findmetesting.com
Loïs@findmetesting.com
Marlène@findmetesting.com
Stévina@findmetesting.com
Clémentine@findmetesting.com
Mégane@findmetesting.com
Méng@findmetesting.com
André@findmetesting.com
Crééz@findmetesting.com
Aí@findmetesting.com
Uò@findmetesting.com
Yú@findmetesting.com
Marie-françoise@findmetesting.com
Uò@findmetesting.com
Inès@findmetesting.com
Océane@findmetesting.com
Marie-ève@findmetesting.com
Rébecca@findmetesting.com
Zoé@findmetesting.com
Lài@findmetesting.com
Rachèle@findmetesting.com
Cécile@findmetesting.com
Maïlys@findmetesting.com
Garçon@findmetesting.com
hereiam@testing.com

It's a game of per%entage percentage.
Findme#testing Findme testing.
Over&over&over Over over over.
[findmeinbrackets], findmeinbrackets
(findmeinbrackets), findmeinbrackets
<findmeinbrackets>, findmeinbrackets
{findmeinbrackets>}, findmeinbrackets
http://findme-testing.here.com
http:\\findme-testing.here.com

Vestibulum ante ipsum primis in faucibus orci luctus et ultrices Garçon@findmetesting.com cubilia Curae; Mauris viverra diam vitae quam. Suspendisse potenti. 
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Ellerey.Fanti@findmetesting.cn risus. Praesent lectus.

Vivamus metus arcu, adipiscing findmetesting@findmetesting.com, hendrerit at, vulputate vitae, nisl.

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH"
6BfhbmYy,Untitled,den4ik2003,Go,Tuesday 31st of October 2023 12:37:58 PM CDT,"//go:build !solution

package rwmutex

import ""sync/atomic""

// A RWMutex is a reader/writer mutual exclusion lock.
// The lock can be held by an arbitrary number of readers or a single writer.
// The zero value for a RWMutex is an unlocked mutex.
//
// If a goroutine holds a RWMutex for reading and another goroutine might
// call Lock, no goroutine should expect to be able to acquire a read lock
// until the initial read lock is released. In particular, this prohibits
// recursive read locking. This is to ensure that the lock eventually becomes
// available; a blocked Lock call excludes new readers from acquiring the
// lock.
type RWMutex struct {
	readerSem   chan struct{}
	writerSem   chan struct{}
	readerCount atomic.Int32
}

// New creates *RWMutex.
func New() *RWMutex {
	rSem := make(chan struct{}, 1)
	wrSem := make(chan struct{}, 1)
	return &RWMutex{rSem, wrSem, atomic.Int32{}}
}

// RLock locks rw for reading.
//
// It should not be used for recursive read locking; a blocked Lock
// call excludes new readers from acquiring the lock. See the
// documentation on the RWMutex type.
func (rw *RWMutex) RLock() { // мы по сути под мьютексом это делаем
	rw.writerSem <- struct{}{} // error
	rw.readerCount.Add(1)

	select { // обозначили, что есть читатели
	case rw.readerSem <- struct{}{}:
	default:
	}

	<-rw.writerSem
}

// RUnlock undoes a single RLock call;
// it does not affect other simultaneous readers.
// It is a run-time error if rw is not locked for reading
// on entry to RUnlock.
func (rw *RWMutex) RUnlock() {
	select {
	case rw.writerSem <- struct{}{}: // Если RLock владеет, то он быстро отдаст; если Lock, то долго стоим
		if readersRemain := rw.readerCount.Add(-1); readersRemain == 0 {
			<-rw.readerSem
		}
		<-rw.writerSem
	default:
		if readersRemain := rw.readerCount.Add(-1); readersRemain == 0 {
			<-rw.readerSem
		}
	}
}

// Lock locks rw for writing.
// If the lock is already locked for reading or writing,
// Lock blocks until the lock is available.
func (rw *RWMutex) Lock() {
	rw.writerSem <- struct{}{}

	rw.readerSem <- struct{}{}
	<-rw.readerSem
}

// Unlock unlocks rw for writing. It is a run-time error if rw is
// not locked for writing on entry to Unlock.
//
// As with Mutexes, a locked RWMutex is not associated with a particular
// goroutine. One goroutine may RLock (Lock) a RWMutex and then
// arrange for another goroutine to RUnlock (Unlock) it.
func (rw *RWMutex) Unlock() {
	<-rw.writerSem
}

// TODO: 2 ридера сделали RLock, далее врайтер сделал Lock, после этого если придёт ридер, то он исполнится после врайтера
// Когда в очереди есть писатель, то читатели блочатся

// В RUnlock мы иногда могли выпихнуть <-rw.writersSem, когда там ждал писатель

// 1) RLock
// 2) Lock
// 3) 100 x RLock
// 4) RUnlock
"
s1SjUu67,Untitled,Josif_tepe,C++,Tuesday 31st of October 2023 12:28:06 PM CDT,"class Solution {
public:
    vector<int> v;
    int n;
    int dp[2505];
    int rec(int at) {
        if(dp[at] != -1) {
            return dp[at];
        }
        
        int result = 1;
        for(int i = at + 1; i < n; i++) {
            if(v[at] < v[i]) {
                result = max(result, rec(i) + 1);
            }
        }
        return dp[at] = result;
    }
    int lengthOfLIS(vector<int> nums) {
        v = nums;
        n = (int) v.size();
        int result = 0;
        for(int i = 0; i < n; i++) {
            dp[i] = -1;
        }
        for(int i = 0; i < n; i++) {
            result = max(result, rec(i));
        }
        return result;
    }
};"
b0LsN1q7,simple_vector-2.h,pavel_777,C++,Tuesday 31st of October 2023 12:26:29 PM CDT,"#pragma once

#include <algorithm>
#include <cassert>
#include <initializer_list>
#include <iostream>

#include ""array_ptr.h""

class ReserveProxyObj {
public:
    explicit ReserveProxyObj(size_t capacity_to_reserve) :capacity_(capacity_to_reserve) {}
    size_t GetCapacity() {return capacity_;}
private:
    size_t capacity_;
};

ReserveProxyObj Reserve(size_t capacity_to_reserve) {
    return ReserveProxyObj(capacity_to_reserve);
}

template <typename Type>
class SimpleVector
{
public:
    using Iterator = Type *;
    using ConstIterator = const Type *;

    SimpleVector() noexcept = default;

    // Создаёт вектор из size элементов, инициализированных значением по умолчанию
    explicit SimpleVector(size_t size) : SimpleVector(size, std::move(Type())) {}

    SimpleVector(size_t size, const Type& value) 
    : items_(size), size_(size), capacity_(size) {
        std::fill(begin(), end(), value);
    }

    SimpleVector(size_t size, Type &&value)
    : items_(size), size_(size), capacity_(size) {
        // Я понял что он неправильный, но без него ошибка (не знаю как его удалить):
        // error: use of deleted function ‘X& X::operator=(const X&)’
        for (size_t i = 0; i < size_; ++i) { 
            items_[i] = std::move(value); 
        }
    }

    // Создаёт вектор из std::initializer_list
    SimpleVector(std::initializer_list<Type> init) 
    : items_(init.size()), size_(init.size()), capacity_(init.size()) {
        std::copy(init.begin(), init.end(), begin());
    }

    SimpleVector(const SimpleVector &other)
    : items_(other.capacity_), size_(other.size_),capacity_(other.capacity_) {
        std::copy(other.begin(), other.end(), begin());
    }

    SimpleVector(SimpleVector &&other) {
        items_ = std::move(other.items_);
        std::swap(size_, other.size_);
        std::swap(capacity_, other.capacity_);
        other.size_ = 0;
        other.capacity_ = 0;
    }

    SimpleVector &operator=(const SimpleVector &rhs) {
        if (this != &rhs) {
            SimpleVector<Type> new_vec(rhs);
            swap(new_vec);
        }
        return *this;
    }

    SimpleVector &operator=(SimpleVector &&rhs) {
        if (this != &rhs) {
            items_ = std::move(rhs.items_);
            std::swap(size_, rhs.size_);
            std::swap(capacity_, rhs.capacity_);
            rhs.size_ = 0;
            rhs.capacity_ = 0;
        }
        return *this;
    }

    SimpleVector(ReserveProxyObj capacity_to_reserve) {
        Reserve(capacity_to_reserve.GetCapacity());
    }

    void Reserve(size_t new_capacity)
    {
        if (new_capacity > capacity_) {
            ArrayPtr<Type> new_items(new_capacity);
            std::copy(std::make_move_iterator(begin()), std::make_move_iterator(end()), new_items.Get());
            items_.swap(new_items);
            capacity_ = new_capacity;
        }
    }    

    // Возвращает количество элементов в массиве
    size_t GetSize() const noexcept {return size_;}

    // Возвращает вместимость массива
    size_t GetCapacity() const noexcept {return capacity_;}

    // Сообщает, пустой ли массив
    bool IsEmpty() const noexcept {return size_ == 0;}

    // Возвращает ссылку на элемент с индексом index
    Type &operator[](size_t index) noexcept {
        assert(index < size_);
        return items_[index];
    }

    // Возвращает константную ссылку на элемент с индексом index
    const Type &operator[](size_t index) const noexcept {
        assert(index < size_);
        return items_[index];
    }

    // Возвращает константную ссылку на элемент с индексом index
    // Выбрасывает исключение std::out_of_range, если index >= size
    Type &At(size_t index) {
        if (index >= size_) {
            throw std::out_of_range(""out of range"");
        }
        return items_[index];
    }

    // Возвращает константную ссылку на элемент с индексом index
    // Выбрасывает исключение std::out_of_range, если index >= size
    const Type &At(size_t index) const {
        if (index >= size_) {
            throw std::out_of_range(""out of range"");
        }
        return items_[index];
    }

    // Обнуляет размер массива, не изменяя его вместимость
    void Clear() noexcept {size_ = 0;}

    // Изменяет размер массива.
    // При увеличении размера новые элементы получают значение по умолчанию для типа Type
    void Resize(size_t new_size) {
        if (new_size <= size_) {
            size_ = new_size;
            return;
        }
        if (new_size <= capacity_) {
            for (size_t i = size_; i < new_size; ++i) {
                items_[i] = Type();
            }
            size_ = new_size;
            return;
        }
        size_t new_capacity = std::max(new_size, capacity_ * 2);
        ArrayPtr<Type> new_items(new_capacity);

        std::copy(std::make_move_iterator(begin()), std::make_move_iterator(end()), new_items.Get());
        for (size_t i = size_; i < new_size; ++i) {
            new_items[i] = Type();
        }

        items_.swap(new_items);
        capacity_ = new_capacity;
        size_ = new_size;
    }

    // Возвращает итератор на начало массива
    // Для пустого массива может быть равен (или не равен) nullptr
    Iterator begin() noexcept {
        return Iterator(items_.Get());
    }

    // Возвращает итератор на элемент, следующий за последним
    // Для пустого массива может быть равен (или не равен) nullptr
    Iterator end() noexcept {
        return Iterator(items_.Get() + size_);
    }

    // Возвращает константный итератор на начало массива
    // Для пустого массива может быть равен (или не равен) nullptr
    ConstIterator begin() const noexcept {
        return ConstIterator(items_.Get());
    }

    // Возвращает итератор на элемент, следующий за последним
    // Для пустого массива может быть равен (или не равен) nullptr
    ConstIterator end() const noexcept {
        return ConstIterator(items_.Get() + size_);
    }

    // Возвращает константный итератор на начало массива
    // Для пустого массива может быть равен (или не равен) nullptr
    ConstIterator cbegin() const noexcept {
        return ConstIterator(items_.Get());
    }

    // Возвращает итератор на элемент, следующий за последним
    // Для пустого массива может быть равен (или не равен) nullptr
    ConstIterator cend() const noexcept {
        return ConstIterator(items_.Get() + size_);
    }

    // Добавляет элемент в конец вектора
    // При нехватке места увеличивает вдвое вместимость вектора
    void PushBack(const Type &item)
    {
        const auto pos = size_;
        if (size_ == capacity_) {
            Resize(capacity_ + 1);
        }
        else {
            ++size_;
        }
        items_[pos] = item;
    }

    void PushBack(Type &&item) {
        const auto pos = size_;
        if (size_ == capacity_) {
            Resize(capacity_ + 1);
        }
        else {
            ++size_;
        }
        items_[pos] = std::move(item);
    }
    
    // Вставляет значение value в позицию pos.
    // Возвращает итератор на вставленное значение
    // Если перед вставкой значения вектор был заполнен полностью,
    // вместимость вектора должна увеличиться вдвое, а для вектора вместимостью 0 стать равной 1
    Iterator Insert(ConstIterator pos, const Type &value)
    {
        assert(begin() <= pos && pos <= end());
        auto n = std::distance(begin(), Iterator(pos));
        if (capacity_ == 0) {
            PushBack(value);
            return begin();
        }
        if (size_ < capacity_) {
            for (int i = size_; i > n; --i) {
                items_[i] = std::move(items_[i - 1]);
            }
            items_[n] = value;
            ++size_;
            return begin() + n;
        }
        else {
            SimpleVector<Type> temp(capacity_ * 2);
            std::copy(begin(), begin() + n, temp.begin());
            std::copy(begin() + n, end(), temp.begin() + n + 1);
            *(temp.begin() + n) = value;
            auto old_size = size_;
            swap(temp);
            size_ = old_size + 1;
            return begin() + n;
        }
    }

    Iterator Insert(ConstIterator pos, Type &&value)
    {
        assert(begin() <= pos && pos <= end());
        auto n = std::distance(begin(), Iterator(pos));
        if (capacity_ == 0) {
            PushBack(std::move(value));
            return begin();
        }
        if (size_ < capacity_) {
            for (int i = size_; i > n; --i) {
                items_[i] = std::move(items_[i - 1]);
            }
            items_[n] = std::move(value);

            ++size_;
            return begin() + n;
        }
        else
        {
            SimpleVector<Type> temp(capacity_ * 2);
            std::copy(std::make_move_iterator(begin()), std::make_move_iterator(begin() + n), temp.begin());
            std::copy(std::make_move_iterator(begin() + n), std::make_move_iterator(end()), temp.begin() + n + 1);
            *(temp.begin() + n) = std::move(value);
            auto old_size = size_;
            swap(temp);
            size_ = old_size + 1;
            return begin() + n;
        }
    }

    // ""Удаляет"" последний элемент вектора. 
    // Вектор не должен быть пустым
    void PopBack() noexcept {
        assert(size_ > 0);
        --size_;
    }

    // Удаляет элемент вектора в указанной позиции
    Iterator Erase(ConstIterator pos) {
        assert(begin() <= pos && pos < end());
        auto n = std::distance(begin(), Iterator(pos));
        std::copy(std::make_move_iterator(begin() + n + 1), std::make_move_iterator(end()), begin() + n);
        --size_;
        return begin() + n;
    }

    // Обменивает значение с другим вектором
    void swap(SimpleVector &other) noexcept {
        items_.swap(other.items_);
        std::swap(this->capacity_, other.capacity_);
        std::swap(this->size_, other.size_);
    }

private:
    ArrayPtr<Type> items_;
    size_t size_ = 0;
    size_t capacity_ = 0;
};

template <typename Type>
inline bool operator==(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    return lhs.GetSize() == rhs.GetSize()
        && std::equal(lhs.begin(), lhs.end(), rhs.begin());
}

template <typename Type>
inline bool operator!=(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    return !(lhs==rhs);
}

template <typename Type>
inline bool operator<(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    return std::lexicographical_compare(lhs.begin(), lhs.end(), rhs.begin(), rhs.end());
}

template <typename Type>
inline bool operator<=(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    return lhs<rhs || lhs==rhs;
}

template <typename Type>
inline bool operator>(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    return !(lhs<=rhs);
}

template <typename Type>
inline bool operator>=(const SimpleVector<Type>& lhs, const SimpleVector<Type>& rhs) {
    return !(lhs<rhs);
} "
91UG18eP,warrior,VssA,Python,Tuesday 31st of October 2023 12:26:25 PM CDT,"class Warrior:
    # инициализируем класс воина у него есть имя, хп и урон, который он наносит
    def __init__(self, name, hp, damage):
        self.name = name  # str
        self.hp = hp  # int
        self.damage = damage  # int

    def hit(self, Unit):
        Unit.hp -= self.damage
        if Unit.hp > 0:
            print(f'""{self.name}"" атаковал ""{Unit.name}"". У ""{Unit.name}"" осталось {Unit.hp} здоровья')
        else:
            print(f'""{self.name}"" атаковал ""{Unit.name}"". ""{Unit.name}"" убит')
            Unit.hp = 0
        return Unit.hp


from random import randint as rnd

Unit1 = Warrior('Плохой парень', 100, 20)
Unit2 = Warrior('Хороший парень', 100, 20)
Units = [Unit1, Unit2]

while True:
    attack_index = rnd(0, 1)  # Кто атакует выбираем рандомно 
    target_index = (attack_index + 1) % 2  # Кого атакует
    target_hp = Units[attack_index].hit(Units[target_index])
    if target_hp == 0:
        print(f'""{Units[attack_index].name}"" Победил!')
        break"
Sb8MJRw6,array_ptr.h,pavel_777,C++,Tuesday 31st of October 2023 12:25:10 PM CDT,"#pragma once

#include <cstdlib>
#include <vector>

template <typename Type>
class ArrayPtr
{
public:
    // Инициализирует ArrayPtr нулевым указателем
    ArrayPtr() = default;

    // Создаёт в куче массив из size элементов типа Type.
    // Если size == 0, поле raw_ptr_ должно быть равно nullptr
    explicit ArrayPtr(size_t size) {
        if (size) {raw_ptr_ = new Type[size];}
    }

    // Конструктор из сырого указателя, хранящего адрес массива в куче либо nullptr
    explicit ArrayPtr(Type* raw_ptr) noexcept 
        : raw_ptr_(raw_ptr){
    }

    // Запрещаем копирование
    ArrayPtr(const ArrayPtr&) = delete;

    ArrayPtr(ArrayPtr &&other)
    {
        raw_ptr_ = other.raw_ptr_;
        other.raw_ptr_ = nullptr;
    }

    ~ArrayPtr() {
        delete[] raw_ptr_;
    }

    // Запрещаем присваивание
    ArrayPtr& operator=(const ArrayPtr&) = delete;

    ArrayPtr &operator=(ArrayPtr &&other)
    {
        if (this == &other)
        {
            return *this;
        }

        delete[] raw_ptr_;
        raw_ptr_ = other.raw_ptr_;
        other.raw_ptr_ = nullptr;
        return *this;
    }

    // Прекращает владением массивом в памяти, возвращает значение адреса массива
    // После вызова метода указатель на массив должен обнулиться
    [[nodiscard]] Type* Release() noexcept {
        auto* temp = raw_ptr_;
        raw_ptr_ = nullptr;
        return temp;
    }

    // Возвращает ссылку на элемент массива с индексом index
    Type& operator[](size_t index) noexcept {
        return *(raw_ptr_ + index);
    }

    // Возвращает константную ссылку на элемент массива с индексом index
    const Type& operator[](size_t index) const noexcept {
        const Type& new_i = *(raw_ptr_ + index);
        return new_i;
    }

    // Возвращает true, если указатель ненулевой, и false в противном случае
    explicit operator bool() const {
        return (raw_ptr_);
    }

    // Возвращает значение сырого указателя, хранящего адрес начала массива
    Type* Get() const noexcept {
        return raw_ptr_;
    }

    // Обменивается значениям указателя на массив с объектом other
    void swap(ArrayPtr& other) noexcept {
        std::swap(this->raw_ptr_, other.raw_ptr_);
    }

private:
    Type *raw_ptr_ = nullptr;
};"
sjA325it,Table Players,yassineyassine2005,Lua,Tuesday 31st of October 2023 12:21:57 PM CDT,"{""1234ANKFJE""}"
EgsKK8zg,"BMP patch: CortexAR.c, MMU/SCTLR dump",ALTracer,Diff,Tuesday 31st of October 2023 12:04:50 PM CDT,"diff --git a/src/target/cortexar.c b/src/target/cortexar.c
index 3abe83c..c8f88cd 100644
--- a/src/target/cortexar.c
+++ b/src/target/cortexar.c
@@ -274,6 +274,8 @@ static const uint16_t cortexar_spsr_encodings[5] = {
 
 /* Coprocessor register definitions */
 
+/* System Control Register */
+#define CORTEXAR_SCTLR 15U, ENCODE_CP_REG(1U, 0U, 0U, 0U)
 /* Co-Processor Access Control Register */
 #define CORTEXAR_CPACR 15U, ENCODE_CP_REG(1U, 0U, 0U, 2U)
 /* Data Fault Status Register */
@@ -799,6 +801,12 @@ static target_s *cortexar_probe(
        } else
                target_check_error(target);
 
+       /* Check MMU/SCTLR settings */
+       const uint32_t sctlr = cortexar_coproc_read(target, CORTEXAR_SCTLR);
+       DEBUG_TARGET(""%s: SCTLR = 0x%08X\n"", __func__, sctlr);
+       const bool core_mmu_enabled = sctlr & 0x1U;
+       DEBUG_TARGET(""%s: MMU enabled? %s\n"", __func__, core_mmu_enabled ? ""yes"" : ""no"");
+
        return target;
 }
"
J8kRE3Si,Formulario,hercioneto,HTML,Tuesday 31st of October 2023 11:59:30 AM CDT,"<!DOCTYPE html>
<!--
Salvar como formulario.html
	-->
<html lang=""pt-br"">
<head> 
	<meta charset=""utf-8"">
	<title>Meu Site!</title>
</head>
<body>
	Preencha o formulário:
	<form action=""processar_formulario.php"" method=""post"">
        <label for=""nome"">Nome:</label>
        <input type=""text"" id=""nome"" name=""nome"" required><br><br>

        <label for=""cidade"">Cidade:</label>
        <select id=""cidade"" name=""cidade"">
            <option value=""São Paulo"">São Paulo</option>
            <option value=""Rio de Janeiro"">Rio de Janeiro</option>
            <option value=""Belo Horizonte"">Belo Horizonte</option>
            <option value=""Brasília"">Brasília</option>
        </select><br><br>

        <input type=""submit"" value=""Enviar"">
	</form>
</body>
</body>
</html>
"
jCHZUb3u,Smeltery Controller V2,JaMaNi133,Lua,Tuesday 31st of October 2023 11:58:45 AM CDT,"require(""SMELTER/SmelteryA.lua"")
require(""SMELTER/SmelteryA.lua"")
require(""SMELTER/TankA.lua"")
require(""SMELTER/TankB.lua"")
require(""SMELTER/MixerA.lua"")
require(""SMELTER/void.lua"")
require(""SMELTER/ValvesA.lua"")
require(""SMELTER/Ingots.lua"")"
2yReV4eQ,Untitled,NadarK,Python,Tuesday 31st of October 2023 11:54:39 AM CDT,"def cooking_time(Х, Т, Z):
    time_per_side = 2 * Т
    total_batches = Х / Z
    total_cooking_time = total_batches * time_per_side
    print(total_cooking_time)
    return total_cooking_time"
cu157Hjd,Untitled,Sininerebane,C#,Tuesday 31st of October 2023 11:48:03 AM CDT,"namespace Othertask
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.OutputEncoding = Encoding.UTF8;
            int userInput;
            int setColor;

            string password;
            string setName;
            string setPassword = ""123456"";
            bool appActive = true;

            while (appActive)
           {
                Console.WriteLine(""Выберите нужную команду"");
                Console.WriteLine(""\n 1- Установить имя. \n2- Изменить цвет консоли. \n3- Установить пароль. \n4- Вывести имя. \n5- Выход из программы"");

                userInput = Convert.ToInt32(Console.ReadLine());

                switch (userInput)
                {

                    case 1:
                        Console.Write(""Установите имя:"");
                        setName = Console.ReadLine();
                        Console.Clear();
                        break;

                    case 2:
                        Console.WriteLine(""Вы собираетесь поменять цвет консоли.\n Выберете цвет"");
                        Console.Write(""1: Красный. \n 2: Зеленный "");
                        setColor = Convert.ToInt32(Console.ReadLine());

                        if (setColor == 1)
                        {
                            Console.ForegroundColor = ConsoleColor.Red;
                            Console.Clear();
                        }
                        else if (setColor == 2)
                        {
                            Console.ForegroundColor = ConsoleColor.Green;
                            Console.Clear();

                        }
                        break;

                    case 3:
                        Console.Write(""Установите пароль:"");
                        setPassword = Console.ReadLine();
                        Console.Clear();
                        break;

                    case 4:
                        Console.WriteLine(""Если вы введете верный пароль вы сможете установить имя"");
                        Console.Write(""Введите пароль: "");
                        password = Console.ReadLine();

                        if (password == setPassword)
                        {

                            Console.WriteLine(""Введите ваше имя:"");
                            setName = Console.ReadLine();
                            Console.WriteLine(""Имя пользователя: "" + setName);
                        }

                        else
                        {
                            Console.WriteLine(""Пароль неверный."");
                        }
                        break;

                    case 5:
                        Console.WriteLine(""Вы вышли из меню!"");
                        appActive = false;
                        break;
                }
            }
        }
    }
}"
w47dtzPY,workshop_2_postgre_vk_deep_python,tmlnv,Python,Tuesday 31st of October 2023 11:43:45 AM CDT,"from asyncio import Semaphore
from typing import List, Tuple
import time
import asyncio

import asyncpg

POSTGRES_PARAMS = {
    ""host"": ""127.0.0.1"",
    ""port"": 5432,
    ""user"": ""admin"",
    ""database"": ""products"",
    ""password"": ""admin"",
}


async def main():
    conn = await asyncpg.connect(**POSTGRES_PARAMS)

    brand_query = ""SELECT brand_id, brand_name FROM brand LIMIT 10""
    results = await conn.fetch(brand_query)

    for brand in results:
        print(f'id: {brand[""brand_id""]}, name: {brand[""brand_name""]}')

    await conn.close()


async def check():
    conn = await asyncpg.connect(**POSTGRES_PARAMS)

    product_query = ""SELECT product_id, product_name FROM product LIMIT 10""
    results = await conn.fetch(product_query)

    for product in results:
        print(f'id: {product[""product_id""]}, name: {product[""product_name""]}')

    print(""\n"")

    sku_query = ""SELECT sku_id, product_id FROM sku LIMIT 10""
    results = await conn.fetch(sku_query)

    for sku in results:
        print(f'id: {sku[""sku_id""]}, name: {sku[""product_id""]}')

    await conn.close()


product_query = \
""""""
SELECT
p.product_id,
p.product_name,
p.brand_id,
s.sku_id,
pc.product_color_name,
ps.product_size_name
FROM product as p
JOIN sku as s on s.product_id = p.product_id
JOIN product_color as pc on pc.product_color_id = s.product_color_id
JOIN product_size as ps on ps.product_size_id = s.product_size_id
WHERE p.product_id = {product_id}""""""


POSTGRES_POOL_PARAMS = {
    ""min_size"": 6,
    ""max_size"": 6,
    **POSTGRES_PARAMS,
}


async def query_product(pool, product_id):
    async with pool.acquire() as connection:
        return await connection.fetchrow(product_query.format(product_id=product_id))


async def long_func():
    async with asyncpg.create_pool(**POSTGRES_POOL_PARAMS) as pool:
        res = await query_product(pool, product_id=20)
        print(res)

product_ids = list(range(100)) * 100


async def bad_task2():
    start = time.perf_counter()

    async with asyncpg.create_pool(**POSTGRES_POOL_PARAMS) as pool:
        for product_id in product_ids:
            _ = await query_product(pool, product_id=product_id)

    print(time.perf_counter() - start)

async def task2():
    start = time.perf_counter()
    sem = Semaphore(50)

    async def bounded_query_product(product_id):
        async with sem:
            return await query_product(pool, product_id=product_id)

    async with asyncpg.create_pool(**POSTGRES_POOL_PARAMS) as pool:
        tasks = [bounded_query_product(product_id) for product_id in product_ids]
        await asyncio.gather(*tasks)

    print(time.perf_counter() - start)


if __name__ == '__main__':
    # asyncio.run(main())
    # asyncio.run(check())
    # asyncio.run(long_func())
    print(f'BAD task2 no async\n{""*"" * 100}')
    asyncio.run(bad_task2())
    print(f'GOOD task2 WITH async\n{""*"" * 100}')
    asyncio.run(task2())
"
Amu63CkV,puzzle 8 py,Roozelfelt,Python,Tuesday 31st of October 2023 11:43:28 AM CDT,"class Node:
    def __init__(self,data,level,fval):
        """""" Initialize the node with the data, level of the node and the calculated fvalue """"""
        self.data = data
        self.level = level
        self.fval = fval

    def generate_child(self):
        """""" Generate child nodes from the given node by moving the blank space
            either in the four directions {up,down,left,right} """"""
        x,y = self.find(self.data,'_')
        """""" val_list contains position values for moving the blank space in either of
            the 4 directions [up,down,left,right] respectively. """"""
        val_list = [[x,y-1],[x,y+1],[x-1,y],[x+1,y]]
        children = []
        for i in val_list:
            child = self.shuffle(self.data,x,y,i[0],i[1])
            if child is not None:
                child_node = Node(child,self.level+1,0)
                children.append(child_node)
        return children
        
    def shuffle(self,puz,x1,y1,x2,y2):
        """""" Move the blank space in the given direction and if the position value are out
            of limits the return None """"""
        if x2 >= 0 and x2 < len(self.data) and y2 >= 0 and y2 < len(self.data):
            temp_puz = []
            temp_puz = self.copy(puz)
            temp = temp_puz[x2][y2]
            temp_puz[x2][y2] = temp_puz[x1][y1]
            temp_puz[x1][y1] = temp
            return temp_puz
        else:
            return None
            

    def copy(self,root):
        """""" Copy function to create a similar matrix of the given node""""""
        temp = []
        for i in root:
            t = []
            for j in i:
                t.append(j)
            temp.append(t)
        return temp    
            
    def find(self,puz,x):
        """""" Specifically used to find the position of the blank space """"""
        for i in range(0,len(self.data)):
            for j in range(0,len(self.data)):
                if puz[i][j] == x:
                    return i,j


class Puzzle:
    def __init__(self,size):
        """""" Initialize the puzzle size by the specified size,open and closed lists to empty """"""
        self.n = size
        self.open = []
        self.closed = []

    def accept(self):
        """""" Accepts the puzzle from the user """"""
        puz = []
        for i in range(0,self.n):
            temp = input().split("" "")
            puz.append(temp)
        return puz

    def f(self,start,goal):
        """""" Heuristic Function to calculate hueristic value f(x) = h(x) + g(x) """"""
        return self.h(start.data,goal)+start.level

    def h(self,start,goal):
        """""" Calculates the different between the given puzzles """"""
        temp = 0
        for i in range(0,self.n):
            for j in range(0,self.n):
                if start[i][j] != goal[i][j] and start[i][j] != '_':
                    temp += 1
        return temp
        

    # def process(self):
    #     """""" Accept Start and Goal Puzzle state""""""
    #     print(""Enter the start state matrix \n"")
    #     start = self.accept()
    #     print(""Enter the goal state matrix \n"")        
    #     goal = self.accept()

    #     start = Node(start,0,0)
    #     start.fval = self.f(start,goal)
    #     """""" Put the start node in the open list""""""
    #     self.open.append(start)
    #     print(""\n\n"")
    #     while True:
    #         cur = self.open[0]
    #         print("""")
    #         print(""  | "")
    #         print(""  | "")
    #         print("" \\\'/ \n"")
    #         for i in cur.data:
    #             for j in i:
    #                 print(j,end="" "")
    #             print("""")
    #         """""" If the difference between current and goal node is 0 we have reached the goal node""""""
    #         if(self.h(cur.data,goal) == 0):
    #             break
    #         for i in cur.generate_child():
    #             i.fval = self.f(i,goal)
    #             self.open.append(i)
    #         self.closed.append(cur)
    #         del self.open[0]

    #         """""" sort the opne list based on f value """"""
    #         self.open.sort(key = lambda x:x.fval,reverse=False)
    # def process(self):
    #     """""" Accept Start and Goal Puzzle state """"""
    #     print(""Enter the start state matrix \n"")
    #     start = self.accept()
    #     print(""Enter the goal state matrix \n"")
    #     goal = self.accept()
    
    #     start = Node(start, 0, 0)
    #     start.fval = self.f(start, goal)
    #     """""" Put the start node in the open list """"""
    #     self.open.append(start)
    #     print(""\n\n"")
    #     while True:
    #         cur = self.open[0]
    #         print(""Current state:"")
    #         for i in cur.data:
    #             for j in i:
    #                 print(j, end="" "")
    #             print("""")
    
    #         """""" If the difference between the current and goal node is 0, we have reached the goal node """"""
    #         if self.h(cur.data, goal) == 0:
    #             print(""Goal state reached!"")
    #             break
    
    #         # Generate child nodes, calculate f-values, and print the move
    #         for i in cur.generate_child():
    #             i.fval = self.f(i, goal)
    #             self.open.append(i)
    #             print(""Move the blank space:"")
    #             if i.find(i.data, '_')[0] < cur.find(cur.data, '_')[0]:
    #                 print(""Move UP"")
    #             elif i.find(i.data, '_')[0] > cur.find(cur.data, '_')[0]:
    #                 print(""Move DOWN"")
    #             elif i.find(i.data, '_')[1] < cur.find(cur.data, '_')[1]:
    #                 print(""Move LEFT"")
    #             else:
    #                 print(""Move RIGHT"")
    #             print("""")
    
    #         self.closed.append(cur)
    #         del self.open[0]
    
    #         """""" Sort the open list based on f value """"""
    #         self.open.sort(key=lambda x: x.fval, reverse=False)

    # def process(self):
    #     """""" Accept Start and Goal Puzzle state """"""
    #     print(""Enter the start state matrix \n"")
    #     start = self.accept()
    #     print(""Enter the goal state matrix \n"")
    #     goal = self.accept()
    
    #     start = Node(start, 0, 0)
    #     start.fval = self.f(start, goal)
    #     """""" Put the start node in the open list """"""
    #     self.open.append(start)
    #     print(""\n\n"")
    #     while True:
    #         cur = self.open[0]
    #         print(""Current state:"")
    #         for i in cur.data:
    #             for j in i:
    #                 print(j, end="" "")
    #             print("""")
    
    #         """""" If the difference between the current and goal node is 0, we have reached the goal node """"""
    #         if self.h(cur.data, goal) == 0:
    #             print(""Goal state reached!"")
    #             break
    
    #         # Generate child nodes, calculate f-values, and print the move
    #         for i in cur.generate_child():
    #             i.fval = self.f(i, goal)
    #             self.open.append(i)
    #             print(""Move the number:"")
    #             for row in range(self.n):
    #                 for col in range(self.n):
    #                     if i.data[row][col] != cur.data[row][col]:
    #                         print(f""Move {i.data[row][col]} from ({row}, {col}) to ({i.find(i.data, i.data[row][col])})"")
    #             print("""")
    
    #         self.closed.append(cur)
    #         del self.open[0]
    
    #         """""" Sort the open list based on f value """"""
    #         self.open.sort(key=lambda x: x.fval, reverse=False)
    
    def move_direction(self, cur, i):
        if i.find(i.data, '_')[0] < cur.find(cur.data, '_')[0]:
            return ""UP""
        elif i.find(i.data, '_')[0] > cur.find(cur.data, '_')[0]:
            return ""DOWN""
        elif i.find(i.data, '_')[1] < cur.find(cur.data, '_')[1]:
            return ""LEFT""
        else:
            return ""RIGHT""

    def process(self):
        print(""Enter the start state matrix \n"")
        start = self.accept()
        print(""Enter the goal state matrix \n"")
        goal = self.accept()

        start = Node(start, 0, 0)
        start.fval = self.f(start, goal)
        self.open.append(start)
        print(""\n\n"")
        while True:
            cur = self.open[0]
            print(""Current state:"")
            for i in cur.data:
                for j in i:
                    print(j, end="" "")
                print("""")

            if self.h(cur.data, goal) == 0:
                print(""Goal state reached!"")
                break

            for i in cur.generate_child():
                i.fval = self.f(i, goal)
                move_direction = self.move_direction(cur, i)
                if move_direction:
                    print(f""Move {i.data[i.find(i.data, '_')[0]][i.find(i.data, '_')[1]]} >> {move_direction}"")
                self.open.append(i)

            self.closed.append(cur)
            del self.open[0]
            self.open.sort(key=lambda x: x.fval, reverse=False)
            
puz = Puzzle(3)
puz.process()"
6Z61f4fU,Untitled,Salvens,C++,Tuesday 31st of October 2023 11:41:21 AM CDT,"#include <bits/stdc++.h>

//#include <ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;

using namespace std;

#define int long long
#define IOS ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);

const long long INF = 1e18 + 7;
const double EPS = 1e-6;
const int MOD = 1e9 + 7;
const int MAXN = 2e5 + 100;

int n = 1046527;

bool is_prime(int a) {
    if (a == 1) {
        return false;
    }
    for (int i = 2; i * i <= a; ++i) {
        if (a % i == 0) {
            return false;
        }
    }
    return true;
}

inline void solve() {
    int ans = 0;
    for (int i = 0; i < n; ++i) {
        if (n - 2 * i > 0 && is_prime(n - 2 * i)) {
            ans = max(ans, n - 2 * i);
        }
    }
    cout << ans << '\n';
}


int32_t main() {
    IOS;

    int tt = 1;
//    cin >> tt;
    while (tt --> 0) {
        solve();
    }
    return 0;
}

"
hxVASP42,Untitled,den4ik2003,Go,Tuesday 31st of October 2023 11:35:52 AM CDT,"//go:build !solution

package rwmutex

import ""sync/atomic""

// A RWMutex is a reader/writer mutual exclusion lock.
// The lock can be held by an arbitrary number of readers or a single writer.
// The zero value for a RWMutex is an unlocked mutex.
//
// If a goroutine holds a RWMutex for reading and another goroutine might
// call Lock, no goroutine should expect to be able to acquire a read lock
// until the initial read lock is released. In particular, this prohibits
// recursive read locking. This is to ensure that the lock eventually becomes
// available; a blocked Lock call excludes new readers from acquiring the
// lock.
type RWMutex struct {
	readerSem   chan struct{}
	writerSem   chan struct{}
	readerCount atomic.Int32
}

// New creates *RWMutex.
func New() *RWMutex {
	rSem := make(chan struct{}, 1)
	wrSem := make(chan struct{}, 1)
	return &RWMutex{rSem, wrSem, atomic.Int32{}}
}

// RLock locks rw for reading.
//
// It should not be used for recursive read locking; a blocked Lock
// call excludes new readers from acquiring the lock. See the
// documentation on the RWMutex type.
func (rw *RWMutex) RLock() { // мы по сути под мьютексом это делаем
	rw.writerSem <- struct{}{} // error
	rw.readerCount.Add(1)

	select { // обозначили, что есть читатели
	case rw.readerSem <- struct{}{}:
	default:
	}

	<-rw.writerSem
}

// RUnlock undoes a single RLock call;
// it does not affect other simultaneous readers.
// It is a run-time error if rw is not locked for reading
// on entry to RUnlock.
func (rw *RWMutex) RUnlock() {
	select {
	case rw.writerSem <- struct{}{}: // Если RLock владеет, то он быстро отдаст; если Lock, то долго стоим
		if readersRemain := rw.readerCount.Add(-1); readersRemain == 0 {
			<-rw.readerSem
			<-rw.writerSem
		}
	default:
		if readersRemain := rw.readerCount.Add(-1); readersRemain == 0 {
			<-rw.readerSem
		}
	}

}

// Lock locks rw for writing.
// If the lock is already locked for reading or writing,
// Lock blocks until the lock is available.
func (rw *RWMutex) Lock() {
	rw.writerSem <- struct{}{} // error
	rw.readerSem <- struct{}{}
	// <-rw.readerSem // in unlock now
}

// Unlock unlocks rw for writing. It is a run-time error if rw is
// not locked for writing on entry to Unlock.
//
// As with Mutexes, a locked RWMutex is not associated with a particular
// goroutine. One goroutine may RLock (Lock) a RWMutex and then
// arrange for another goroutine to RUnlock (Unlock) it.
func (rw *RWMutex) Unlock() {
	<-rw.readerSem
	<-rw.writerSem
}

// TODO: 2 ридера сделали RLock, далее врайтер сделал Lock, после этого если придёт ридер, то он исполнится после врайтера
// Когда в очереди есть писатель, то читатели блочатся

// В RUnlock мы иногда могли выпихнуть <-rw.writersSem, когда там ждал писатель

// 1) RLock
// 2) Lock
// 3) 100 x RLock
// 4) RUnlock
"
U1bjWWvE,Untitled,D3ENNY,C#,Tuesday 31st of October 2023 11:23:47 AM CDT," public List<T> ReadTxt<T>(string separator, string path) where T : new()
    {
        List<T> objList = new List<T>();

        try
        {
            string sline;
            using StreamReader sr = new(path);
            while ((sline = sr.ReadLine()!) != null)
            {
                string[] parts = sline.Split(separator);
                PropertyInfo[] properties = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);

                if (properties.Length == parts.Length)
                {
                    T obj = new();
                    for (int i = 0; i < properties.Length; i++)
                        properties[i].SetValue(obj, Convert.ChangeType(parts[i], properties[i].PropertyType), null);
                    objList.Add(obj);
                }
            }
        }
        catch (FileNotFoundException ex)
        {
            ErrorManager.PrintException(""Errore: Il file specificato non è stato trovato."", ex);
        }
        catch (FormatException ex)
        {
            ErrorManager.PrintException(""Errore: Il formato di alcuni argomenti è errato."", ex);
        }
        catch (Exception ex)
        {
            ErrorManager.PrintException(""Errore generico durante l'operazione di append XML."", ex);
        }
        return objList;
    }"
f2r1AZcP,Untitled,D3ENNY,C#,Tuesday 31st of October 2023 11:20:46 AM CDT,"class Employers : PersonData
{
    public override string RegisterId { get; set; } = """";
    public override string Nominative { get; set; } = """";
    public string Role{get;set;} = """";
    public string Department{get;set;} = """";
    public override int Age { get; set; }
    public override string Address { get; set; } = """";
    public override string City { get; set; } = """";
    public override string Province { get; set; } = """";
    public override string Cap { get; set; } = """";
    public override int PhoneNumber { get; set; }
    internal static List<EmployersActivity> TotalEmployersActivitiesList{get; private set;} = new();
    internal List<EmployersActivity> EmployersActivities{get; private set;} = new();
}"
FGHHzeMW,testing,mr-star,C++,Tuesday 31st of October 2023 11:17:40 AM CDT,"Alice, 1646014800, 123456
Bob, 1646015400, 789012
Carol, 1646016000, 345678
David, 1646016600, 901234
Eve, 1646017200, 567890
Frank, 1646017800, 123890
Grace, 1646018400, 890123
Henry, 1646019000, 456789
Irene, 1646019600, 234567
Jack, 1646020200, 678901"
LRLe5Kpe,Push Nachricht,wofus,PHP,Tuesday 31st of October 2023 11:08:10 AM CDT,"<?php

error_reporting(E_ALL);
ini_set('display_errors', 1);

require_once('token.php');

	$fcmEndpoint = ""https://fcm.googleapis.com/v1/projects/?/messages:send"";

	$headers = [
		'Authorization: Bearer ' . $jwtToken,
		'Content-Type: application/json',
	];

	$data = [
		'message' => [
			'token' => '?',
			'notification' => [
				'title' => 'Titel der Benachrichtigung',
				'body' => 'Inhalt der Benachrichtigung',
			],
		],
	];

	$ch = curl_init($fcmEndpoint);
	curl_setopt($ch, CURLOPT_POST, true);
	curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));

	$response = curl_exec($ch);
	curl_close($ch);

	echo $response;

?>"
CQsURRPn,10 2023,spidersam,JSON,Tuesday 31st of October 2023 11:07:31 AM CDT,"[
  {
    ""name"": ""Zoo-02-10-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/2f5559c2-8df8-6c4d-8415-76a20ff8e418.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  },
  {
    ""name"": ""Zoo-03-10-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/c09f1b3b-556a-8594-05be-6024b51fdee9.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  },
  {
    ""name"": ""Zoo-04-10-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/c502234d-5497-6a43-6fdf-dcde2f5bde4b.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  },
  {
    ""name"": ""Zoo-05-10-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/954700b0-f422-d529-984f-906860fe8afb.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  },
  {
    ""name"": ""Zoo-06-10-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/d8739010-a052-fef2-57be-c7ce4f35cb03.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  },
  {
    ""name"": ""Zoo-09-10-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/482d26ef-5887-1d4a-01b3-b1518fde1a95.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  },
  {
    ""name"": ""Zoo-10-10-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/ffaba2f0-f4b3-24dc-0c46-3ab50d322ed8.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  },
  {
    ""name"": ""Zoo-11-10-2023-Compilation-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/dfcaa473-ebee-7bce-9ad5-5fe0f730b69c.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  },
  {
    ""name"": ""Zoo-12-10-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/fbb4c1a3-0b13-6298-b8e8-c52ebaec177f.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  },
  {
    ""name"": ""Zoo-13-10-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/f3d59b6b-03b3-d3a1-60d7-4ffb8f28da51.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  },
  {
    ""name"": ""Zoo-16-10-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/ab84d987-9177-9eab-d2ff-c4f030e1fe4d.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  },
  {
    ""name"": ""Zoo-17-10-2023-Preregistrata-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/e769a477-d447-ba9a-b98d-74981abc2e88.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  },
  {
    ""name"": ""Zoo-18-10-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/f9161d39-b78a-849d-a754-44a354155c24.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  },
  {
    ""name"": ""Zoo-19-10-2023-The Jackal"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/a68574ad-1ebf-8f51-154f-98d2d236d52a.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  },
  {
    ""name"": ""Zoo-20-10-2023-The Jackal"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/68b90ef2-e7cc-af87-8056-68fca85bde32.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  },
  {
    ""name"": ""Zoo-23-10-2023-Preregistrato-The Jackal"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/98893ffd-3972-e30c-ed01-7b94d460d3e7.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  },
  {
    ""name"": ""Zoo-24-10-2023-The Jackal"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/30ea0056-b972-d8de-87a9-8d583acf6d6e.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  },
  {
    ""name"": ""Zoo-25-10-2023-Compilation-The Jackal"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/ef2af403-8f88-05ff-ea6a-2dbdebf72efa.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  },
  {
    ""name"": ""Zoo-26-10-2023-The Jackal"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/0e6bee7d-bc16-eae0-24e4-c620df90dcb0.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  },
  {
    ""name"": ""Zoo-27-10-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/0c63ddd8-69dc-976b-741e-aff56c52ba83.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  },
  {
    ""name"": ""Zoo-30-10-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/718f7116-ed76-feee-31a7-76bb50b645a7.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  },
  {
    ""name"": ""Zoo-31-10-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-9-31/81822ccd-be56-739c-7357-90072f69992a.mp3"",
    ""imageUrl"": ""PLAACEHOLDER_IMMAGINE""
  }
]"
byAS7KNu,"trying for loop, first, last",RicardasSim,C,Tuesday 31st of October 2023 11:06:11 AM CDT,"#include <stdio.h>
#include <stdlib.h>

void TestFnc1( unsigned int n )
{
    printf(""Test1, n=%d\n"", n );

    unsigned int counter = 0;

    for ( unsigned int i = 0; i < n; ++i )
    {
        if ( i == 0 )
        {
            printf(""First\n"");
        }
        else if ( i == n - 1 )
        {
            printf(""Last\n"");
        }
        else
        {
            printf(""Iteration: %d\n"", i + 1 );
        }

        counter++;
    }

    printf(""Counter: %d\n\n"", counter );

}

void TestFnc2( unsigned int n )
{
    printf(""Test2, n=%d\n"", n );

    unsigned int counter = 0;

    for ( unsigned int i = 0; i < n; ++i )
    {

        if ( i == 0 )
        {
            if ( n == 1 )
            {
                printf(""Only one\n"");
            }
            else
            {
                printf(""First\n"");
            }
        }
        else if ( i == n - 1 )
        {
            printf(""Last\n"");
        }
        else
        {
            printf(""Iteration: %d\n"", i + 1 );
        }

        counter++;
    }

    printf(""Counter: %d\n\n"", counter );
}

int main()
{

    TestFnc1( 5 );
    TestFnc1( 3 );
    TestFnc1( 2 );
    TestFnc1( 1 );
    TestFnc1( 0 );

    TestFnc2( 5 );
    TestFnc2( 3 );
    TestFnc2( 2 );
    TestFnc2( 1 );
    TestFnc2( 0 );

    return 0;
}

/*
output:

Test1, n=5
First
Iteration: 2
Iteration: 3
Iteration: 4
Last
Counter: 5

Test1, n=3
First
Iteration: 2
Last
Counter: 3

Test1, n=2
First
Last
Counter: 2

Test1, n=1
First
Counter: 1

Test1, n=0
Counter: 0

Test2, n=5
First
Iteration: 2
Iteration: 3
Iteration: 4
Last
Counter: 5

Test2, n=3
First
Iteration: 2
Last
Counter: 3

Test2, n=2
First
Last
Counter: 2

Test2, n=1
Only one
Counter: 1

Test2, n=0
Counter: 0

*/
"
2PXBW37P,RectNum,LMSV,C++,Tuesday 31st of October 2023 11:04:58 AM CDT,"/*
  เขียนโปรแกรมรับ input เป็นตัวเลข 2 ตัว ตัวแรก (m) คือตัวเลขสำหรับคำนวณความยาวด้านของรูปสี่เหลี่ยมจตุรัส โดยขนาดของรูปสี่เหลี่ยมจะมีด้านยาว =2m+1 ส่วนตัวที่สอง (n) คือตัวเลขที่อยู่ตรงกลาง โดยถ้า m=3,n=0 จะได้สี่เหลี่ยมที่มีความกว้าง = 7 และมีตัวเลขที่อยู่ตรงกลางคือ 0 ดังนี้

input :
m=3
n=0
output : 
3333333
3222223
3211123
3210123
3211123
3222223
3333333

input :
m = 2
n = 1
output :
33333
32223
32123
32223
33333


*/

#include <stdio.h>

int sq[2000][2000];

int main(void) {
  int m,n;
  scanf(""%d%d"",&m,&n);
  
  // m+1 m+1 = n;
  // khob max = (n+m)/%10;
  
  sq[m+1][m+1] = n;
  int khob = n+m;

  //printf(""%d\n\n"",khob);

  int i=1,j=1;
  while(khob!=n)
  {
    for(int a=j ; a<=2*m+2-j ; a++){
      sq[i][a] = khob;
    }

    int a=i+1;
    for( ; a<=2*m+1-i ; a++){
      sq[a][j] = sq[a][j+2*(m-j+1)] = khob;
    }
    
    for(int b=j ; b<=2*m+2-j ; b++){
      sq[a][b] = khob;
    }
    //printf(""h"");
    khob--;  
    i++;
    j++;
  }
  
  //printf(""\n\n"");
  for(int i=1 ; i<=2*m+1 ; i++){
    for(int j=1 ; j<=2*m+1 ; j++){
      printf(""%d"",sq[i][j]%10);
    }
    printf(""\n"");
  }

  
  return 0;
}"
TuGQBh85,workshop_2_text_parser_vk_deep_python,tmlnv,Python,Tuesday 31st of October 2023 11:03:56 AM CDT,"import re
from collections import Counter
from functools import reduce
from multiprocessing import Pool
from time import time
from typing import List

import nltk
from nltk.corpus import stopwords as nltk_stop
from nltk.tokenize import RegexpTokenizer
from sklearn.datasets import fetch_20newsgroups

stopwords = set(nltk_stop.words(""english""))


def tokenize(text: str) -> List[str]:
    tokenizer = RegexpTokenizer(r""\w+"")
    return tokenizer.tokenize(text)


def clear_tokens(tokens: List[str]) -> List[str]:
    return [re.sub(r""[^a-z]"", """", token) for token in tokens]


def is_token_informative(token: str) -> bool:
    return token and token not in stopwords and len(token) > 2


def mapper(text: str) -> Counter:
    tokens = tokenize(text.lower())
    tokens_clear = clear_tokens(tokens)
    informative_tokens = filter(is_token_informative, tokens_clear)
    return Counter(informative_tokens)


def reducer(cnt1: Counter, cnt2: Counter) -> Counter:
    cnt1.update(cnt2)
    return cnt1


if __name__ == ""__main__"":
    nltk.download(""stopwords"")

    start_time = time()

    news = fetch_20newsgroups().data * 10

    with Pool() as pool:
        map_results = pool.map(mapper, news)

    result = reduce(reducer, map_results)

    print(result.most_common(10))

    execution = time() - start_time
    print(f'Took {execution} seconds')
"
YLSWRFPw,Untitled,scuppasteve,YAML,Tuesday 31st of October 2023 11:02:48 AM CDT,"- platform: template
  sensors:
    garage_west_brightness:
      value_template: {{ states.light.garage_west.attributes.brightness | int }}"
b422iDh7,Two's Complement Negation,BenTibnam,JavaScript,Tuesday 31st of October 2023 10:47:57 AM CDT,"let toNegative = function(n)
{
	// take the binary complement
	n = ~n;

	// add 1
	n += 1;

	// return final result of -n
	return n
}

let a = parseInt(prompt(""Enter an integer""));
let na = toNegative(a);

console.log(`n: ${a}`);
console.log(`n: ${na}`);"
h7Hdj6RJ,UIT Theme - Nades,Lux-Ferre,JSON,Tuesday 31st of October 2023 10:44:31 AM CDT,"{""ui-tweaks"":""{""font"":""Calibri"",""disableBGColorOverrides"":false,""color-enabled-body"":true,""color-body"":""#000000"",""color-enabled-panels"":true,""color-panels"":""#000000"",""color-enabled-top-bar"":true,""color-top-bar"":""#000000"",""color-enabled-menu-bar"":true,""color-menu-bar"":""#000000"",""color-enabled-chat-area"":true,""color-chat-area"":""#1e1e1e"",""color-enabled-game-chat"":true,""color-game-chat"":""#000000"",""color-enabled-chat-area-server_message"":true,""color-chat-area-server_message"":""#000000"",""font-color-enabled-chat-area"":true,""font-color-chat-area"":""#c3bf3c"",""font-color-enabled-chat-area-color-green"":true,""font-color-chat-area-color-green"":""#004cff"",""font-color-enabled-chat-area-chat-username"":true,""font-color-chat-area-chat-username"":""#41ca1c"",""font-color-enabled-chat-area-color-grey"":true,""font-color-chat-area-color-grey"":""#b203e2"",""font-color-enabled-chat-area-server_message"":true,""font-color-chat-area-server_message"":""#ffffff"",""serverMessageTextOverrideEnabled"":true,""serverMessageTextOverrideColor"":""#ffffff"",""chatBorderOverrideColorEnabled"":true,""chatBorderOverrideColor"":""#dbac00"",""font-color-enabled-panels"":true,""font-color-panels"":""#c3bf3c"",""font-color-enabled-panels-color-grey"":true,""font-color-panels-color-grey"":""#ff0000"",""font-color-enabled-panels-font-large"":true,""font-color-panels-font-large"":""#ff0000""}"
VFFjFAJY,Ansible AWS Modules,jrglynn2,YAML,Tuesday 31st of October 2023 10:26:12 AM CDT,"    - name: See if Target Group exists
      delegate_to: localhost
      ignore_errors: true
      environment:
        AWS_PROFILE: ""{{ aws_profile_used }}""
      community.aws.elb_target_group_info:
        collect_targets_health: true
        region: ""{{ region }}""
      register: all_target_groups_info

    - name: If Target Group exists, get name & random string from name
      ignore_errors: true
      no_log: true
      ansible.builtin.set_fact:
        tgp_name: ""{{ item.target_group_name }}""
      loop: ""{{ all_target_groups_info | json_query('target_groups[?targets_health_description[?target.id==`{}`]]'.format(instance_id)) }}"""
yvirXu91,dock ellie,Leveloper,Lua,Tuesday 31st of October 2023 10:13:23 AM CDT,"local mon_top,mon_bottom

while not mon_top or not mon_bottom do
    mon_top = peripheral.wrap(""monitor_11"")
    mon_bottom = peripheral.wrap(""monitor_12"")
    os.sleep(2)
end

local state = ""top""

local function saveState()
    local f = fs.open(""state.txt"", ""w"")
    f.write(state)
    f.close()
end

local function updateState()
    if state == ""top"" then
        redstone.setOutput(""right"",false)
    else
        redstone.setOutput(""right"",true)
    end
end

if not fs.exists(""state.txt"") then
    state = ""top""
    saveState()
end

local f = fs.open(""state.txt"", ""r"")
state = f.readAll()
f.close()

updateState()

redstone.setOutput(""back"", true)

local function btnCollides(btn, x, y)
    if x >= btn.x1 and y >= btn.y1 and x <= btn.x2 and y <= btn.y2 then
        return true
    else
        return false
    end
end

local function btnRender(btn, t)
    t = t or term
    t.setCursorPos(btn.x1,btn.y1)
    
    local obg, otxt, ox, oy = t.getBackgroundColor(), t.getTextColor(), t.getCursorPos()
    
    t.setBackgroundColor(btn.color)
    t.setTextColor(btn.txtcolor)
    for y=btn.y1, btn.y2 do
        t.setCursorPos(btn.x1, y)
        if y == btn.y1+1 then
            t.write("" ""..btn.txt.."" "")
        else
            t.write(string.rep("" "", btn.x2-btn.x1+1))
        end
    end
    
    t.setBackgroundColor(obg)
    t.setTextColor(otxt)
    t.setCursorPos(ox,oy)
end
    
local function makeButton(btn, t)
    t = t or term
    local w,h = t.getSize()
    
    btn.txtcolor = btn.txtcolor or colors.white
    btn.color = btn.color or colors.cyan
    
    btn.x1 = math.ceil(w/2) - math.ceil((#btn.txt+2)/2) + 1
    btn.y1 = math.ceil(h/2) - 1
    btn.x2 = btn.x1 + #btn.txt + 1
    btn.y2 = btn.y1 + 2
    btn.collides = btnCollides
    btn.render = btnRender
    
    return btn
end

local go, call = makeButton({txt=""Go""}, mon_top), makeButton({txt=""Get""}, mon_bottom)

local function render()
    local mon1, mon2 = mon_top, mon_bottom
    if state == ""bottom"" then
        mon1, mon2 = mon2, mon1
    end
    
    mon1.setBackgroundColor(colors.white)
    mon1.clear()
    go:render(mon1)
    
    mon2.setBackgroundColor(colors.white)
    mon2.clear()
    call:render(mon2)
end

render()

while true do
    local e = {os.pullEvent()}
    
    if e[1] == ""monitor_touch"" then
        mon_top.clear()
        mon_bottom.clear()
        redstone.setOutput(""left"", true)
        os.sleep(6)
        if state == ""bottom"" then
            state = ""top""
        else
            state = ""bottom""
        end
        updateState()
        saveState()
        os.sleep(14)
        redstone.setOutput(""left"", false)
        render()
    end
end
        
        "
AU5B9diu,Untitled,burcev,SQL,Tuesday 31st of October 2023 10:02:34 AM CDT,"SELECT 
	`iblock_element`.`XML_ID` AS `XML_ID`,
	`iblock_element`.`ID` AS `ID`
FROM `b_iblock_element` `iblock_element` 
WHERE `iblock_element`.`IBLOCK_ID` = 15
AND UPPER(`iblock_element`.`XML_ID`) like upper('mp%');"
ts0AgNai,Untitled,mikjaer,Python,Tuesday 31st of October 2023 09:56:29 AM CDT,"#!/usr/bin/python3
import re
def modifiers(modifier):
    modifiers = {
    ""K"" : {""M"":""1"",""B"":""1000""},
    ""M"" : {""M"":""2"",""B"":""1000""},
    ""G"" : {""M"":""3"",""B"":""1000""},
    ""T"" : {""M"":""4"",""B"":""1000""},
    ""P"" : {""M"":""5"",""B"":""1000""},

    ""KiB"" : {""M"":""1"",""B"":""1024""},
    ""MiB"" : {""M"":""2"",""B"":""1024""},
    ""GiB"" : {""M"":""3"",""B"":""1024""},
    ""TiB"" : {""M"":""4"",""B"":""1024""},
    ""PiB"" : {""M"":""5"",""B"":""1024""},
    }

    return modifiers[modifier]

def convert(input):
    # Removing /s if exists
    if input[-2:] == ""/s"":  # Removing /s if exists
        input = input[0:-2]

    # Getting numeric value and modifier
    m = re.match(r""(?P<numeric>[0-9\.]+)(?P<modifier>.+)"", input)

    numeric=m.groupdict()[""numeric""]
    modifier=m.groupdict()[""modifier""]

    # Lookup function for modifiers
    m = modifiers(modifier);

    # Calculate byte value
    ret = float(numeric)
    for i in range(int(m[""M""])):
        ret = ret * int(m[""B""])
    ret = int(ret)

    return ret

for test in [""139MiB/s"", ""61.8G"", ""5M"", ""2TiB/s""]:
    print ("" - "",test,"" B:"", convert(test))"
qMaGu5Mq,Untitled,burcev,SQL,Tuesday 31st of October 2023 09:53:26 AM CDT,"SELECT 
	`sale_internals_order`.`ID` AS `ID`,
	`sale_internals_order_recipient`.`ID` AS `RECIPIENT_ID`,
	`sale_internals_order_recipient`.`ORDER_ID` AS `RECIPIENT_ORDER_ID`,
	`sale_internals_order_recipient`.`ORDER_PROPS_ID` AS `RECIPIENT_ORDER_PROPS_ID`,
	`sale_internals_order_recipient`.`NAME` AS `RECIPIENT_NAME`,
	`sale_internals_order_recipient`.`VALUE` AS `RECIPIENT_VALUE`,
	`sale_internals_order_recipient`.`CODE` AS `RECIPIENT_CODE`
FROM `b_sale_order` `sale_internals_order` 
LEFT JOIN `b_sale_order_props_value` `sale_internals_order_recipient` ON `sale_internals_order`.`ID` = `sale_internals_order_recipient`.`ORDER_ID` AND `sale_internals_order_recipient`.`ORDER_PROPS_ID` = 71
WHERE `sale_internals_order`.`USER_ID` = 118073
ORDER BY `ID` DESC;"
UdXWc7Mu,Untitled,burcev,SQL,Tuesday 31st of October 2023 09:45:45 AM CDT,"SELECT 
	`aniart_main_orm_favorites_markdown`.`ID` AS `ID`,
	`aniart_main_orm_favorites_markdown`.`USER_ID` AS `USER_ID`,
	`aniart_main_orm_favorites_markdown`.`PRODUCT_ID` AS `PRODUCT_ID`,
	`aniart_main_orm_favorites_markdown`.`OFFER_ID` AS `OFFER_ID`,
	`aniart_main_orm_favorites_markdown`.`PRICE` AS `PRICE`,
	`aniart_main_orm_favorites_markdown`.`COUNTRY` AS `COUNTRY`
FROM `u_favorites_markdown` `aniart_main_orm_favorites_markdown` 
WHERE `aniart_main_orm_favorites_markdown`.`NOTIFICATION_SEND` <> 1
AND `aniart_main_orm_favorites_markdown`.`DATE_INSERT` >= '2022-10-31 09:33:20'
AND UPPER(`aniart_main_orm_favorites_markdown`.`COUNTRY`) like upper('UA')
ORDER BY `ID` ASC
LIMIT 998000, 1000;"
ibvSerCh,Untitled,CyberN00b,C++,Tuesday 31st of October 2023 09:45:11 AM CDT,"Есть в C++ два типа ссылок: обычная & и rvalue &&. Если объект передаётся по rvalue-ссылке, то это значит, что вызывающий код отказывается от владения объектом, и функция может делать с ним всё, что ей хочется. Ну а с помощью std::move мы сообщаем об этом намерении явно.


vector<int> fun1(vector<int> vc) {
    return vc; // возвращаем rvalue
}

vector<int> fun2(vector<int>& vc) {
    return vc; // возвращаем копию vc в rvalue
}

vector<int> fun3(vector<int>&& vc) {
    return vc; // возвращаем rvalue
}

vector<int>& fun4(vector<int>& vc) {
    return vc; // возвращаем vc по ссылке
}

int main() {
    vector<int> A = {1, 2, 3};
    // 1 При вызове функции мы копируем вектор A и передаем в vc
    auto b1 = fun1(A);
    // 2 При вызове функции мы передаем A по ссылке, но при return копируем A и возвращаем копию
    auto b2 = fun2(A);
    // 3 При вызове функции мы передаем A по rvalue ссылке, после выполнения функции fun3 вектор A будет пуст
    auto b3 = fun3(std::move(A));
    // 4 При вызове функции мы передаем A по ссылке, return возвращает А тоже по ссылке, но при = мы копируем A
    auto b4 = fun4(A);
    // 5 При вызове функции мы передаем A по ссылке, return возвращает А тоже по ссылке и прирывниваем по ссылке. Получается в b4 и А - это один и тот же вектор
    auto& b5 = fun4(A);
    // 6 При вызове функции мы передаем A по ссылке, return возвращает А тоже по ссылке, но мы муваем значение в b6. После приравнивания вектор A будет пуст
    auto b6 = std::move(fun4(A));
}"
afWM1usD,Untitled,burcev,SQL,Tuesday 31st of October 2023 09:37:16 AM CDT,"SELECT 
	`sale_internals_order`.`ID` AS `ID`,
	`sale_internals_order`.`LID` AS `LID`,
	`sale_internals_order`.`ACCOUNT_NUMBER` AS `ACCOUNT_NUMBER`,
	`sale_internals_order`.`TRACKING_NUMBER` AS `TRACKING_NUMBER`,
	`sale_internals_order`.`PAY_SYSTEM_ID` AS `PAY_SYSTEM_ID`,
	`sale_internals_order`.`DELIVERY_ID` AS `DELIVERY_ID`,
	`sale_internals_order`.`DATE_INSERT` AS `DATE_INSERT`,
	`sale_internals_order`.`DATE_UPDATE` AS `DATE_UPDATE`,
	`sale_internals_order`.`PERSON_TYPE_ID` AS `PERSON_TYPE_ID`,
	`sale_internals_order`.`USER_ID` AS `USER_ID`,
	`sale_internals_order`.`PAYED` AS `PAYED`,
	`sale_internals_order`.`DATE_PAYED` AS `DATE_PAYED`,
	`sale_internals_order`.`EMP_PAYED_ID` AS `EMP_PAYED_ID`,
	`sale_internals_order`.`DEDUCTED` AS `DEDUCTED`,
	`sale_internals_order`.`DATE_DEDUCTED` AS `DATE_DEDUCTED`,
	`sale_internals_order`.`EMP_DEDUCTED_ID` AS `EMP_DEDUCTED_ID`,
	`sale_internals_order`.`REASON_UNDO_DEDUCTED` AS `REASON_UNDO_DEDUCTED`,
	`sale_internals_order`.`STATUS_ID` AS `STATUS_ID`,
	`sale_internals_order`.`DATE_STATUS` AS `DATE_STATUS`,
	`sale_internals_order`.`EMP_STATUS_ID` AS `EMP_STATUS_ID`,
	`sale_internals_order`.`MARKED` AS `MARKED`,
	`sale_internals_order`.`DATE_MARKED` AS `DATE_MARKED`,
	`sale_internals_order`.`EMP_MARKED_ID` AS `EMP_MARKED_ID`,
	`sale_internals_order`.`REASON_MARKED` AS `REASON_MARKED`,
	`sale_internals_order`.`PRICE_DELIVERY` AS `PRICE_DELIVERY`,
	`sale_internals_order`.`ALLOW_DELIVERY` AS `ALLOW_DELIVERY`,
	`sale_internals_order`.`DATE_ALLOW_DELIVERY` AS `DATE_ALLOW_DELIVERY`,
	`sale_internals_order`.`EMP_ALLOW_DELIVERY_ID` AS `EMP_ALLOW_DELIVERY_ID`,
	`sale_internals_order`.`RESERVED` AS `RESERVED`,
	`sale_internals_order`.`PRICE` AS `PRICE`,
	`sale_internals_order`.`CURRENCY` AS `CURRENCY`,
	`sale_internals_order`.`DISCOUNT_VALUE` AS `DISCOUNT_VALUE`,
	`sale_internals_order`.`TAX_VALUE` AS `TAX_VALUE`,
	`sale_internals_order`.`SUM_PAID` AS `SUM_PAID`,
	`sale_internals_order`.`USER_DESCRIPTION` AS `USER_DESCRIPTION`,
	`sale_internals_order`.`PAY_VOUCHER_NUM` AS `PAY_VOUCHER_NUM`,
	`sale_internals_order`.`PAY_VOUCHER_DATE` AS `PAY_VOUCHER_DATE`,
	`sale_internals_order`.`ADDITIONAL_INFO` AS `ADDITIONAL_INFO`,
	`sale_internals_order`.`COMMENTS` AS `COMMENTS`,
	`sale_internals_order`.`COMPANY_ID` AS `COMPANY_ID`,
	`sale_internals_order`.`CREATED_BY` AS `CREATED_BY`,
	`sale_internals_order`.`RESPONSIBLE_ID` AS `RESPONSIBLE_ID`,
	`sale_internals_order`.`STAT_GID` AS `STAT_GID`,
	`sale_internals_order`.`DATE_PAY_BEFORE` AS `DATE_PAY_BEFORE`,
	`sale_internals_order`.`DATE_BILL` AS `DATE_BILL`,
	`sale_internals_order`.`IS_RECURRING` AS `IS_RECURRING`,
	`sale_internals_order`.`RECURRING_ID` AS `RECURRING_ID`,
	`sale_internals_order`.`LOCKED_BY` AS `LOCKED_BY`,
	`sale_internals_order`.`DATE_LOCK` AS `DATE_LOCK`,
	`sale_internals_order`.`RECOUNT_FLAG` AS `RECOUNT_FLAG`,
	`sale_internals_order`.`AFFILIATE_ID` AS `AFFILIATE_ID`,
	`sale_internals_order`.`DELIVERY_DOC_NUM` AS `DELIVERY_DOC_NUM`,
	`sale_internals_order`.`DELIVERY_DOC_DATE` AS `DELIVERY_DOC_DATE`,
	`sale_internals_order`.`UPDATED_1C` AS `UPDATED_1C`,
	`sale_internals_order`.`ORDER_TOPIC` AS `ORDER_TOPIC`,
	`sale_internals_order`.`XML_ID` AS `XML_ID`,
	`sale_internals_order`.`ID_1C` AS `ID_1C`,
	`sale_internals_order`.`VERSION_1C` AS `VERSION_1C`,
	`sale_internals_order`.`VERSION` AS `VERSION`,
	`sale_internals_order`.`EXTERNAL_ORDER` AS `EXTERNAL_ORDER`,
	`sale_internals_order`.`STORE_ID` AS `STORE_ID`,
	`sale_internals_order`.`CANCELED` AS `CANCELED`,
	`sale_internals_order`.`EMP_CANCELED_ID` AS `EMP_CANCELED_ID`,
	`sale_internals_order`.`DATE_CANCELED` AS `DATE_CANCELED`,
	`sale_internals_order`.`REASON_CANCELED` AS `REASON_CANCELED`,
	`sale_internals_order`.`BX_USER_ID` AS `BX_USER_ID`,
	`sale_internals_order`.`RUNNING` AS `RUNNING`,
	DATE_FORMAT(`sale_internals_order`.`DATE_INSERT`, '%d.%m.%Y %H:%i:%s') AS `DATE_INSERT_FORMAT`,
	DATE(`sale_internals_order`.`DATE_UPDATE`) AS `DATE_UPDATE_SHORT`,
	DATE(`sale_internals_order`.`DATE_STATUS`) AS `DATE_STATUS_SHORT`,
	DATE(`sale_internals_order`.`DATE_CANCELED`) AS `DATE_CANCELED_SHORT`,
	(SELECT (CASE WHEN MAX(BR.RECOMMENDATION) IS NULL OR MAX(BR.RECOMMENDATION) = '' THEN 'N' ELSE 'Y' END) FROM b_sale_basket BR WHERE BR.ORDER_ID=`sale_internals_order`.`ID` GROUP BY BR.ORDER_ID) AS `BY_RECOMMENDATION`,
	if(DATE_LOCK is null, 'green', if(DATE_ADD(DATE_LOCK, interval 30 MINUTE)<now(), 'green', if(LOCKED_BY=453865, 'yellow', 'red'))) AS `LOCK_STATUS`,
	CONCAT('(', `sale_internals_order_lock_user`.`LOGIN`, ') ', `sale_internals_order_lock_user`.`NAME`, ' ', `sale_internals_order_lock_user`.`LAST_NAME`) AS `LOCK_USER_NAME`,
	`sale_internals_order_responsible`.`LOGIN` AS `RESPONSIBLE_LOGIN`,
	`sale_internals_order_responsible`.`NAME` AS `RESPONSIBLE_NAME`,
	`sale_internals_order_responsible`.`LAST_NAME` AS `RESPONSIBLE_LAST_NAME`,
	`sale_internals_order_responsible`.`SECOND_NAME` AS `RESPONSIBLE_SECOND_NAME`,
	`sale_internals_order_responsible`.`EMAIL` AS `RESPONSIBLE_EMAIL`,
	`sale_internals_order_responsible`.`WORK_POSITION` AS `RESPONSIBLE_WORK_POSITION`,
	`sale_internals_order_responsible`.`PERSONAL_PHOTO` AS `RESPONSIBLE_PERSONAL_PHOTO`,
	`sale_internals_order_user`.`LOGIN` AS `USER_LOGIN`,
	`sale_internals_order_user`.`NAME` AS `USER_NAME`,
	`sale_internals_order_user`.`LAST_NAME` AS `USER_LAST_NAME`,
	`sale_internals_order_user`.`EMAIL` AS `USER_EMAIL`
FROM `b_sale_order` `sale_internals_order` 
INNER JOIN `b_sale_order_props_value` `sale_internals_order_property_1` ON `sale_internals_order_property_1`.`ORDER_ID` = `sale_internals_order`.`ID`
INNER JOIN `b_sale_order_props_value` `sale_internals_order_property_2` ON `sale_internals_order_property_2`.`ORDER_ID` = `sale_internals_order`.`ID`
LEFT JOIN `b_user` `sale_internals_order_lock_user` ON `sale_internals_order`.`LOCKED_BY` = `sale_internals_order_lock_user`.`ID`
LEFT JOIN `b_user` `sale_internals_order_responsible` ON `sale_internals_order`.`RESPONSIBLE_ID` = `sale_internals_order_responsible`.`ID`
INNER JOIN `b_user` `sale_internals_order_user` ON `sale_internals_order`.`USER_ID` = `sale_internals_order_user`.`ID`
WHERE `sale_internals_order_property_1`.`CODE` = 'ORDER_TYPE'
AND `sale_internals_order_property_2`.`CODE` = 'ORDER_CANCEL_REASON'
AND `sale_internals_order`.`LID` in ('s1')
AND `sale_internals_order`.`DATE_INSERT` < '2023-10-27 07:00:25'
AND `sale_internals_order`.`DATE_INSERT` >= '2023-10-17 07:00:25'
AND `sale_internals_order_property_1`.`VALUE` in ('ONLINE', 'PICKUP')
AND `sale_internals_order_property_2`.`VALUE` in ('4', '5', '7', '6')
AND `sale_internals_order`.`STATUS_ID` in ('E', 'W')
AND `sale_internals_order`.`ID` > 33311149
ORDER BY `DATE_UPDATE` DESC;"
6f3qWT0a,Untitled,burcev,SQL,Tuesday 31st of October 2023 09:31:38 AM CDT,"SELECT DISTINCT BE.ID as ID,BE.IBLOCK_ID as IBLOCK_ID,BE.CODE as CODE,BE.XML_ID as XML_ID,BE.NAME as NAME,BE.ACTIVE as ACTIVE,B.DETAIL_PAGE_URL as DETAIL_PAGE_URL,BE.TAGS as TAGS,L.DIR as LANG_DIR, FPS0.PROPERTY_112 as PROPERTY_BEST_DISCOUNT_VALUE, concat(BE.ID , ':' , 112) as PROPERTY_BEST_DISCOUNT_VALUE_ID,BE.XML_ID as EXTERNAL_ID,BE.IBLOCK_SECTION_ID as IBLOCK_SECTION_ID,B.IBLOCK_TYPE_ID as IBLOCK_TYPE_ID,B.CODE as IBLOCK_CODE,B.XML_ID as IBLOCK_EXTERNAL_ID,B.LID as LID
					FROM 
			b_iblock B
			INNER JOIN b_lang L ON B.LID=L.LID
			INNER JOIN b_iblock_element BE ON BE.IBLOCK_ID = B.ID
			INNER JOIN b_iblock_element_prop_s2 FPS0 ON FPS0.IBLOCK_ELEMENT_ID = BE.ID
			INNER JOIN b_iblock_property FP0 ON FP0.IBLOCK_ID = B.ID AND  FP0.CODE='SALE_REGION'
			INNER JOIN b_iblock_element_prop_m2 FPV0 ON FPV0.IBLOCK_PROPERTY_ID = FP0.ID AND FPV0.IBLOCK_ELEMENT_ID = BE.ID
			LEFT JOIN b_iblock_property_enum FPEN0 ON FPEN0.PROPERTY_ID = 111 AND FPS0.PROPERTY_111 = FPEN0.ID
		
					WHERE 1=1 
			AND (
			
				(
				
					(
					
						((((FPEN0.VALUE = 'Да'))))
					)
					OR (
					
						((((FPS0.PROPERTY_112 > '0'))))
					)
				)
				AND ((((BE.IBLOCK_ID = '2'))))
				AND ((((BE.ACTIVE='Y'))))
				AND ((((FPS0.PROPERTY_38 = '6424363'))))
				AND ((((FPV0.VALUE_NUM = '291'))))
				AND ((((FPS0.PROPERTY_213 > '0'))))
			)
			AND (((BE.WF_STATUS_ID=1 AND BE.WF_PARENT_ELEMENT_ID IS NULL)))
			AND ((
				B.ID IN (
			SELECT IBLOCK_ID
			FROM b_iblock_group IBG
			WHERE IBG.GROUP_ID IN (2)
			AND IBG.PERMISSION >= 'R'
		
				AND (IBG.PERMISSION='X' OR B.ACTIVE='Y')
			)
				OR (B.RIGHTS_MODE = 'E' AND EXISTS (
				SELECT ER.ELEMENT_ID
				FROM b_iblock_element_right ER
				INNER JOIN b_iblock_right IBR ON IBR.ID = ER.RIGHT_ID
				INNER JOIN b_user_access UA ON UA.ACCESS_CODE = IBR.GROUP_CODE AND UA.USER_ID = 0
				WHERE ER.ELEMENT_ID = BE.ID
				AND IBR.OP_EREAD = 'Y'
				
			))
			))
					
					 ORDER BY FPS0.PROPERTY_112 desc ,BE.ID desc 
					LIMIT 12;"
A3F8jFBR,01. Merge Trains,Spocoman,C++,Tuesday 31st of October 2023 09:21:02 AM CDT,"#include <iostream>
#include <string>
#include <deque>

using namespace std;

deque<int> vagonFiller(string s) {
    deque<int> d;
    string num = """";
    for (int i = 0; i <= s.length(); i++) {
        if (isdigit(s[i])) {
            num += s[i];
        }
        else {
            d.push_back(stoi(num));
            num = """";
        }
    } 
    return d;
}

int main() {
    string railTrack, wagon, listMergeWagons;
    getline(cin, railTrack);
    deque<int> trackA = vagonFiller(railTrack);

    getline(cin, railTrack);
    deque<int> trackB = vagonFiller(railTrack);

    deque<int> wagonsMerge;

    while (trackA.size() + trackB.size() > 0) {
        if (trackA.empty() || trackB.empty()) {
            wagon = trackA.empty() ? ""B"" : ""A"";
        }
        else {
            wagon = trackA.back() < trackB.back() ? ""A"" : ""B"";
        }
        wagonsMerge.push_front(wagon == ""A"" ? trackA.back() : trackB.back());
        wagon == ""A"" ? trackA.pop_back() : trackB.pop_back();
        listMergeWagons += wagon;
    }

    cout << listMergeWagons << endl;

    for (auto& w : wagonsMerge) {
        cout << w << ' ';
    }

    return 0;
}"
