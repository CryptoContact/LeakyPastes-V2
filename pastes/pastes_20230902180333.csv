id,title,username,language,date,content
7NDxFghV,Untitled,Hurricane12,Go,Saturday 2nd of September 2023 01:00:36 PM CDT,"package main

import (
	""errors""
	""fmt""
	""sync""
	""time""
)

type Task struct {
	ID          int
	CreatedTime time.Time
	FinishedAt  time.Time
	Result      error
}

func generateTasks(taskCh chan<- Task) {
	for i := 0; i < 100; i++ {
		createdAt := time.Now()
		task := Task{ID: i, CreatedTime: createdAt}

		if time.Now().Nanosecond()%2 > 0 {
			task.Result = errors.New(""Some error occurred"")
		}
		taskCh <- task
	}
	close(taskCh)
}

func processTask(task Task) Task {
	if task.Result == nil {
		task.Result = nil
	} else {
		task.Result = errors.New(""Something went wrong"")
	}
	task.FinishedAt = time.Now()
	return task
}

func main() {
	taskCh := make(chan Task, 100)
	doneTasks := make(chan Task, 100)
	undoneTasks := make(chan error, 100)

	go generateTasks(taskCh)

	var wg sync.WaitGroup

	wg.Add(1)
	go func() {
		for task := range taskCh {
			task = processTask(task)
			if task.Result == nil {
				doneTasks <- task
			} else {
				undoneTasks <- task.Result
			}
		}
		wg.Done()
	}()

	go func() {
		wg.Wait()
		close(doneTasks)
		close(undoneTasks)
	}()

	var doneResults []Task
	var undoneResults []error

	for done := range doneTasks {
		doneResults = append(doneResults, done)
	}

	for undone := range undoneTasks {
		undoneResults = append(undoneResults, undone)
	}

	fmt.Println(""Done tasks:"")
	for _, task := range doneResults {
		fmt.Printf(""Task ID: %d, Created at: %s\n"", task.ID, task.CreatedTime)
	}

	fmt.Println(""Undone tasks:"")
	for _, err := range undoneResults {
		fmt.Println(err)
	}
}"
MmzT9XN4,FnSpy,scar17off,JavaScript,Saturday 2nd of September 2023 12:58:54 PM CDT,"// ==UserScript==
// @name         FnSpy
// @namespace    http://tampermonkey.net/
// @version      1.0.0
// @description  Spy all function calls.
// @author       scar17off
// @match        *://*/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=ourworldofpixels.com
// @require      http://code.jquery.com/jquery-1.12.4.min.js
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    window.onload = () => {
        function addFn(fn, args, result) {
            const tab = document.createElement(""button"");
            const id = ""tab-"" + fn.name.replaceAll('.', '-');

            addCall(fn, args, result);

            if(document.getElementById(id)) return;

            tab.classList = ['fnspy-call'];
            tab.title = fn;
            tab.innerText = fn.name;
            tab.id = id;

            tab.onclick = () => {
                const tabs = Object.values(document.querySelectorAll(""[id^=\""section-\""]""));

                for(let i in tabs) {
                    if(!tabs[i].id) continue;
                    tabs[i].hidden = true;
                };

                document.getElementById(""section-"" + fn.name.replaceAll('.', '-')).hidden = false;
            };

            document.getElementById(""fnspy-tabs"").appendChild(tab);
        };
        function addCall(fn, args, result) {
            const tab = document.createElement(""button"");
            const id = ""tab-"" + args.join(""-"");
            const sectionID = ""section-"" + fn.name.replaceAll('.', '-');
            if(document.getElementById(id)) return;

            tab.classList = ['fnspy-call'];
            tab.innerText = args;
            tab.id = id;

            tab.onclick = () => {
                console.log(args);
                document.getElementById(""fnspy-area"").value = `${fn.name}(${args.map(arg => (typeof arg === 'object' ? JSON.stringify(arg) : arg)).join(', ')});

OUTPUT:

${result}`;
            };

            if(document.getElementById(sectionID)) {
                document.getElementById(sectionID).appendChild(tab);
            } else {
                const section = document.createElement(""div"");

                section.id = sectionID;
                section.hidden = true;
                section.appendChild(tab);

                document.getElementById(""fnspy-tabs-calls"").appendChild(section);
            };
        };
        function logAllFunctionCalls() {
            for (const key in window) {
                if (typeof window[key] === 'function') {
                    const originalFunction = window[key];

                    window[key] = function (...args) {
                        const result = originalFunction.apply(this, args);
                        addFn(originalFunction, args, result);
                        return result;
                    };
                };
            };
        };

        let div = document.createElement('div');
        let style = document.createElement('style');

        div.innerHTML = `<div id=""fnspy-btns"">
    <button id=""fnspy-copy"">COPY</button>
    <button class=""fnspy-button2"" id=""fnspy-clear"">CLEAR LOGS</button>
    <button class=""fnspy-button3"" id=""fnspy-enable"">FN SPY</button>
    <button class=""fnspy-button2"" id=""fnspy-enable"">Settings</button>
</div>
<div id=""fnspy-tabs""></div>
<div id=""fnspy-tabs-calls""></div>
<div id=""fnspy-cont"">
    <textarea id=""fnspy-area"" class=""fnspy-ta""></textarea>
</div>`;
        div.id = 'fnspy-window';

        style.innerHTML = `#fnspy-cont {
    display: inline-block;
    width: 62%;
}
.fnspy-ta {
    background-color: rgb(29, 29, 29);
    border: solid 1px rgb(32, 32, 32);
    width: 99.6%;
    height: 95.6%;
    color: white;
    resize: none;
    cursor: default;
    height: 575px;
}
div.fnspy-call {
    margin-top: -577px;
    margin-left: 166px;
}
button.fnspy-call {
    width: 100%;
    height: 20px;
    background-color: rgb(39, 39, 39);
    border: solid 1px rgb(32, 32, 32);
    color: rgb(200, 200, 200);
    text-align: left;
}
#fnspy-tabs, #fnspy-tabs-calls {
    background-color: rgb(41, 41, 41);
    height: 96.7%;
    width: 160px;
    overflow-y: scroll;
    display: inline-block;
}
::-webkit-scrollbar-thumb {
    background-color: rgb(65, 65, 65);
}
::-webkit-scrollbar-button {
    display: none;
}
::-webkit-scrollbar {
    width: 6px;
    height: 1px;
}
#fnspy-btns {
    background-color: rgb(20, 20, 20);
    text-align: center;
    vertical-align: center;
}
#fnspy-window {
    background-color: rgb(36, 36, 36);
    border: solid 1px rgb(62, 62, 62);
    width: 900px;
    height: 600px;
    z-index: 2147483647;
    position: absolute;
    top: 5%;
    left: 18%;
}
#fnspy-copy {
    background-color: rgb(20, 20, 20);
    color: rgb(60, 200, 60);
    width: 100px;
    height: 20px;
    border: solid 1px rgb(30, 100, 30);
}
#fnspy-copy:hover {
    background-color: rgb(36, 36, 36);
}
.fnspy-button {
    background-color: rgb(20, 20, 20);
    border: solid 1px rgb(30, 100, 30);
    width: 100px;
    height: 20px;
    color: rgb(60, 200, 60);
}
.fnspy-button:hover {
    background-color: rgb(36, 36, 36);
}
.fnspy-button2 {
    background-color: rgb(20, 20, 20);
    border: solid 1px rgb(30, 100, 100);
    width: 100px;
    height: 20px;
    color: rgb(60, 200, 200);
}
.fnspy-button2:hover {
    background-color: rgb(36, 36, 36);
}
.fnspy-button3 {
    background-color: rgb(20, 20, 20);
    border: solid 1px rgb(98, 98, 98);
    width: 100px;
    height: 20px;
    color: rgb(200, 200, 200);
}
.fnspy-button3:hover {
    background-color: rgb(36, 36, 36);
}`;

        document.body.appendChild(div);
        document.body.appendChild(style);

        document.addEventListener('keydown', (k) => {
            console.log(k);
            if(k.key == ""Escape"")
                document.getElementById('fnspy-window').hidden = !document.getElementById('fnspy-window').hidden;
        });

        logAllFunctionCalls();
    };
})();"
LiGBeqXE,Every Second You Get +1 Jump Power,LuaXe,Lua,Saturday 2nd of September 2023 12:56:27 PM CDT,"function C()
spawn(function () while getgenv().C do for i, v in pairs(game.workspace.Wins:GetChildren()) do if v then TPCFrame(v.CFrame) end end task.wait() end end)
spawn(function () while getgenv().C do local args = {[1] = ""BuySpin""}game:GetService(""ReplicatedStorage"").SpinnerUpdate:FireServer(unpack(args)) task.wait() end end)
spawn(function () while getgenv().C do game:GetService(""ReplicatedStorage"").SpinRemote:InvokeServer() task.wait() end end)
end
function R()
spawn(function () while getgenv().R do game:GetService(""ReplicatedStorage"").Remotes.Train.RebirthRequest:InvokeServer() task.wait() end end)
end

local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wall%20v3')))()

local w = library:CreateWindow(""Every Sec +1 JP"")

local b = w:CreateFolder(""Main"")

b:Toggle(""FREE UGC"",function(val) getgenv().C = val C() end)

b:Label(""Made by LuaXie"",{TextSize = 23; TextColor = Color3.fromRGB(255,255,255); BgColor = Color3.fromRGB(38, 38, 38);})

local w = library:CreateWindow(""LocalPlayer"")

local b = w:CreateFolder(""LP"")

b:DestroyGui()

b:Button(""Discord"",function() setclipboard(""workink.co/2GQ/LTD"") end)
b:Button(""Full Version"",function() loadstring(game:HttpGet(""https://pastebin.com/raw/GphZf9Xe"", true))() end)
b:Button(""Rejoin"",function() loadstring(game:HttpGet(""https://pastebin.com/raw/mM7JBG5h"", true))() end)
b:Button(""Reset"",function() loadstring(game:HttpGet(""https://pastebin.com/raw/EEY6SATj"", true))() end)

b:Slider(""WalkSpeed"",{min = 0; max = 10000; precise = false;},function(val) game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = val end)
b:Slider(""JumpPower"",{min = 0; max = 10000; precise = false;},function(val) game.Players.LocalPlayer.Character.Humanoid.JumpPower = val end)
b:Slider(""HipHeight"",{min = 0; max = 10000; precise = false;},function(val) game.Players.LocalPlayer.Character.Humanoid.HipHeight = val end)
b:Slider(""Gravity"",{min = 0; max = 360; precise = false;},function(val) game.workspace.Gravity = val end)
b:Slider(""FOV"",{min = 0;max = 120;precise = false;},function(val) game.workspace.CurrentCamera.FieldOfView = val end)

function TPCFrame(Player_CFrame) if game.Players.LocalPlayer.Character:FindFirstChild(""HumanoidRootPart"") then game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Player_CFrame end end
function RTPCFrame(M_CF) if game.Players.LocalPlayer.Character:FindFirstChild(""HumanoidRootPart"") then M_CF.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame end end
function PHP(Player_HP) if game.Players.LocalPlayer.Character:FindFirstChild(""Humanoid"") then game.Players.LocalPlayer.Character.Humanoid.Health = Player_HP end end"
ZUgmPXf7,Lua Cuntdown,Filmos,Lua,Saturday 2nd of September 2023 12:42:41 PM CDT,"network = peripheral.find(""rsBridge"")

function getStorageCount(item)
    storage = network.getItemDetail({
        name = item
    })
    if storage == nil then
        return 0
    else
        return storage.amount
    end
end

function mark(item, amount)
    print(""Marking "" .. item)
    print(""In storage: "" .. getStorageCount(item) .. ""/"" .. amount)
end
mark(""allthecompressed:nether_star_block_2x"")
"
HJTgqwCa,app.js,sapta71,JavaScript,Saturday 2nd of September 2023 12:36:06 PM CDT,"const button = document.querySelector('#changeColor');
const container = document.querySelector('#container');

button.addEventListener('click', function (e) {
	container.style.backgroundColor = generateRandomColor();
	e.stopPropagation();
});

container.addEventListener('click', function () {
	container.classList.toggle('hide');
});

const generateRandomColor = () => {
	const r = Math.floor(Math.random() * 255);
	const g = Math.floor(Math.random() * 255);
	const b = Math.floor(Math.random() * 255);

	return `rgb(${r}, ${g}, ${b})`;
};"
Qe3qGXVT,CF587C TLE,pb_jiang,C++,Saturday 2nd of September 2023 12:35:00 PM CDT,"#include <assert.h>
#include <bits/stdc++.h>
using namespace std;
#ifndef __DEBUG__
#define dbg(...) 42
#endif
template <class T> using mpq = priority_queue<T, vector<T>, greater<T>>;
 
using ll = long long;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
using vl = vector<ll>;
using vi = vector<int>;
 
class LPQ
{
  public:
    LPQ(int n) : n_(n) {}
    void insert(int x)
    {
        data.insert(x);
        while (data.size() > 11) {
            data.erase(data.begin());
        }
    }
    int n_;
    // priority_queue<int> data;
    set<int, greater<int>> data;
};
 
int main(int argc, char **argv)
{
    // cin.tie(nullptr)->sync_with_stdio(false);
    // cout.tie(nullptr)->sync_with_stdio(false);
    // ios::sync_with_stdio(false);
    // cin.tie(0);
    // cout.tie(0);
    ios::sync_with_stdio(false);
    cin.tie(0);
 
    int n, m, q, u, v, a;
    cin >> n >> m >> q;
    vector<vi> g(n + 1);
    for (int i = 1; i < n; ++i)
        cin >> u >> v, g[u].push_back(v), g[v].push_back(u);
 
    map<int, vector<int>> cs;
    for (int i = 0; i < m; ++i) {
        cin >> a;
        cs[a].push_back(i + 1);
    }
    for (auto &[k, v] : cs) {
        sort(v.begin(), v.end());
        if (v.size() > 10)
            v.erase(v.begin() + 10, v.end());
    }
 
    using a10i = array<int, 10>;
    constexpr int log = 18;
    vector<vi> pa(n + 1, vi(log));
    vector<vector<a10i>> ppl(n + 1, vector<a10i>(log));
    vi dep(n + 1);
    function<void(int, int, int)> dfs = [&](int u, int fa, int depth) {
        dep[u] = depth;
        if (fa != -1)
            pa[u][0] = fa;
        size_t pcnt = min(size_t(10), cs[u].size());
        for (int i = 0; i < pcnt; ++i)
            ppl[u][0][i] = cs[u][i];
        for (auto v : g[u]) {
            if (v == fa)
                continue;
            dfs(v, u, depth + 1);
        }
    };
    dfs(1, -1, 0);
 
    for (int i = 1; i < log; ++i) {
        for (int u = 1; u <= n; ++u) {
            pa[u][i] = pa[pa[u][i - 1]][i - 1];
            set<int> ps(ppl[u][i - 1].begin(), ppl[u][i - 1].end());
            for (auto x : ppl[pa[u][i - 1]][i - 1])
                ps.insert(x);
            ps.insert(0);
            auto it = next(ps.begin());
            for (int j = 0; j < 10 && it != ps.end(); ++j, ++it) {
                ppl[u][i][j] = *it;
            }
        }
    }
 
    function<vector<int>(int, int, int)> lca = [&](int u, int v, int a) {
        ll cnt = 0;
        set<int> ans{0};
        // priority_queue<int> pq;
        LPQ pq(10);
        // dbg(u, v);
        if (dep[u] < dep[v])
            swap(u, v);
        for (int step = log - 1; step >= 0; --step) {
            if (dep[pa[u][step]] >= dep[v]) {
                for (auto x : ppl[u][step])
                    pq.insert(x);
                u = pa[u][step];
            }
            ++cnt;
        }
        if (u != v) {
            for (int step = log - 1; step >= 0; --step) {
                if (pa[u][step] != pa[v][step]) {
                    for (auto x : ppl[u][step])
                        pq.insert(x);
                    for (auto x : ppl[v][step])
                        pq.insert(x);
                    u = pa[u][step], v = pa[v][step];
                }
                ++cnt;
            }
            for (auto x : ppl[u][0])
                pq.insert(x);
            for (auto x : ppl[v][0])
                pq.insert(x);
            u = pa[u][0];
        }
 
        for (auto x : cs[u])
            pq.insert(x);
        /*
        while (pq.data.size())
            ans.insert(pq.data.top()), pq.data.pop();
        */
        assert(cnt < 20 * 2);
        for (auto x : pq.data)
            ans.insert(x);
        vector<int> ret;
        auto it = next(ans.begin());
        for (int i = 0; i < a && it != ans.end(); ++it, ++i)
            ret.push_back(*it);
        // dbg(ans, u);
        return ret;
    };
    for (int i = 0; i < q; ++i) {
        cin >> u >> v >> a;
        auto ans = lca(u, v, a);
        cout << ans.size();
        for (auto x : ans)
            cout << ' ' << x;
        cout << '\n';
    }
    return 0;
};
// https://codeforces.com/contest/587/problem/C"
FDFU6wcN,Untitled,Swiftkill,C++,Saturday 2nd of September 2023 12:33:09 PM CDT,"#include <QDebug>

// Can I do better?
namespace google {
	namespace protobuf { 
	class MessageLite;
	class Message; 
	}
}

// Scary syntax because this should compile in TR1 (VS2010)
namespace printFunctions {
	/*!
	 *  @brief short-circuit overload for printData to use with ADL
	 *
	 *      @tparam Msg     message type
	 *
	 *      @param [in]     PacketNum  associated message id
	 *      @param [in]     msg        subj
	 */
	template <typename Msg> 
	typename std::enable_if<std::is_base_of<::google::protobuf::MessageLite, Msg>::value>::type
		printData(PacketID PacketNum, const Msg& msg)
	{
		qDebug() << ""------------ "" << msg.GetTypeName().c_str() << "" with #"" << PacketNum;
	}

	template <typename Msg> 
	typename std::enable_if_t<std::is_base_of<::google::protobuf::Message, Msg>::value, Msg>::type
		printData(PacketID PacketNum, const Msg & msg)
	{
		qDebug() << ""------------ "" << msg.GetTypeName().c_str() << "" with #"" << PacketNum;
		qDebug() << msg.DebugString().c_str();
	}
}"
F67uxsAn,index.html,sapta71,HTML,Saturday 2nd of September 2023 12:32:25 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
  <head>
    <meta charset=""UTF-8"" />
    <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"" />
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"" />
    <title>Latihan Event</title>
    <link rel=""stylesheet"" href=""app.css"" />
  </head>
  <body>
    <h1>Event Bubbling</h1>
    <div id=""container"">
      Click hide
      <button id=""changeColor"">Change color</button>
    </div>
    <script src=""app.js""></script>
  </body>
</html>
"
JnctEJE5,Untitled,pacho_the_python,Python,Saturday 2nd of September 2023 12:28:50 PM CDT,"n = int(input())

empty = n - 1
stars = 1

for i in range(1, n + 1):
    print("" "" * empty + ""* "" * stars)
    empty -= 1
    stars += 1

high_down = n - 1
down_empty = 1
down_stars = n - 1
for j in range(1, high_down + 1):
    print("" "" * down_empty + ""* "" * down_stars)
    down_empty += 1
    down_stars -= 1"
gDGxvL1e,sopadeletras,LEANDRONIEVA,Java,Saturday 2nd of September 2023 12:14:25 PM CDT,"import java.util.Random;

public class Sopa_de_letras {
    private static Random rndm = new Random();

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		String[] palabras = {""CAMELLO"", ""ELEFANTE"", ""AGUILA"", ""CAMALEON"", ""AVESTRUZ"", ""COCODRILO"", ""ANTILOPE"", ""SERPIENTE"", ""BUFALO"", ""COMADREJA""};
		char[][] tablero = generarTablero(12,12);
		
		colocarPalabras(tablero, palabras);
        llenarEspaciosEnBlanco(tablero);
		imprimirTablero(tablero);
	}
	private static char[][] generarTablero(int filas, int columnas) {
        char[][] tablero = new char[filas][columnas];
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < columnas; j++) {
                tablero[i][j] = ' '; // Inicializar todo el tablero con espacios en blanco
            }
        }
        return tablero;
    }
	
	private static void colocarPalabras(char[][] tablero, String[] palabras) {
		
		for (String palabra : palabras) {
            boolean colocada = false;

            while (!colocada) {
                int fila = rndm.nextInt(tablero.length);
                int columna = rndm.nextInt(tablero[0].length);
                boolean horizontal = rndm.nextBoolean();
                boolean diagonal = rndm.nextBoolean();

                if (validarPalabra(tablero, palabra, fila, columna, horizontal, diagonal)) {
                    colocarPalabra(tablero, palabra, fila, columna, horizontal, diagonal);
                    colocada = true;
                }
            }
        }
	}
	
	private static boolean validarPalabra(char[][] tablero, String palabra, int fila, int columna, boolean horizontal, boolean diagonal) {
		
		if (horizontal && columna + palabra.length() <= tablero[0].length) {
			for (int i = 0; i < palabra.length(); i++) {
				if (tablero[fila][columna + i] != ' ' && palabra.charAt(i)!=tablero[fila][columna + i]) {
					return false;
				}
			}
			return true;
		} else if (!horizontal && !diagonal && fila + palabra.length() <= tablero.length) {
			for (int i = 0; i < palabra.length(); i++) {
				if (tablero[fila + i][columna] != ' ' && palabra.charAt(i)!=tablero[fila + i][columna]) {
					return false;
				}
			}
			return true;
		} else if(diagonal && columna + palabra.length() <= tablero[0].length && fila + palabra.length() <= tablero.length) {
			for (int i = 0; i < palabra.length(); i++) {
				if (tablero[fila + i][columna + i] != ' ' && palabra.charAt(i)!=tablero[fila + i][columna + i]) {
					return false;
				}
			}
			return true;
		}
		return false;
	}
	
	private static void colocarPalabra(char[][] tablero, String palabra, int fila, int columna, boolean horizontal, boolean diagonal) {
		
		if (horizontal) {
			for (int i = 0; i < palabra.length(); i++) {
				tablero[fila][columna + i] = palabra.charAt(i);
			}
		} else if (!horizontal && !diagonal){
			for (int i = 0; i < palabra.length(); i++) {
				tablero[fila + i][columna] = palabra.charAt(i);
			}
		} else if (diagonal) {
			for (int i = 0; i < palabra.length(); i++) {
				tablero[fila + i][columna + i] = palabra.charAt(i);
			}
		}
	}
	
	private static void llenarEspaciosEnBlanco(char[][] tablero) {
        Random rand = new Random();
        String letras = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";

        for (int i = 0; i < tablero.length; i++) {
            for (int j = 0; j < tablero[i].length; j++) {
                if (tablero[i][j] == ' ') {
                    int index = rand.nextInt(letras.length());
                    tablero[i][j] = letras.charAt(index);
                }
            }
        }
    }
	
	private static void imprimirTablero(char[][] tablero) {
        for (int i = 0; i < tablero.length; i++) {
            for (int j = 0; j < tablero[i].length; j++) {
                System.out.print(tablero[i][j] + "" "");
            }
            System.out.println();
        }
    }
}
"
iEiaT7Zd,trial handbreak,coinwalk,JavaScript,Saturday 2nd of September 2023 12:13:02 PM CDT,"

var bigusdicus = parseFloat($('#pct_balance').val());
var beatbet = 0.001;
var bolbet = beatbet;
var target = 50000;
var ten = (beatbet*10);
var hun = (beatbet*100);
var serv = (beatbet*6.1);
var eight = (beatbet*7.9);
var buggzie = bigusdicus;
var zimple = bigusdicus;
var blowzy = false;
var smick = ((Math.floor(bigusdicus/ten))*ten);
var dude = ((Math.floor(bigusdicus/ten))*ten);
var bone = ((Math.floor(bigusdicus/hun))*hun);
var brother = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var getld = 0;
var boon = true;
var briney = bone;
var tuber = ((Math.floor(bigusdicus/ten))*ten);
var razzle;
var mate = false;
var final = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
var oldegener = 0;
var yikes = 1;
 
 
function get(){
buggzie = $('#pct_balance').val();
var bog = ((buggzie-bigusdicus).toFixed(8));
console.log(""profit:"");
console.log(bog);
if ((buggzie>(((Math.floor(buggzie/ten))*ten)+serv))&&(buggzie<(((Math.floor(buggzie/ten))*ten)+eight))&&(buggzie != oldegener)&&(buggzie>dude)){
    bolbet = bolbet*2;
    oldegener = parseFloat(buggzie);
}
if ((buggzie>(((Math.floor(buggzie/ten))*ten)+serv))&&(buggzie<(((Math.floor(buggzie/ten))*ten)+eight))&&(buggzie != oldegener)&&(buggzie<dude)){
    bolbet = bolbet*2;
    yikes = 0;
    oldegener = parseFloat(buggzie);
}
if ((buggzie>=(dude+(ten*yikes)))&&(buggzie<(((Math.floor(buggzie/ten))*ten)+serv))){
    bolbet = beatbet;
    oldegener = 0;
    yikes = 1;
    dude = ((Math.floor(buggzie/ten))*ten);
    }
if ((buggzie<=(briney+(ten*2)))&&(buggzie<(((Math.floor(buggzie/ten))*ten)+serv))){
	beatbet = beatbet/10;
	ten = (beatbet*10);
	serv = (beatbet*6.1);
	eight = (beatbet*7.9);
	hun = (beatbet*100);
    bolbet = beatbet;
    oldegener = 0;
    yikes = 1;
    dude = ((Math.floor(buggzie/ten))*ten);
    bone = ((Math.floor(buggzie/hun))*hun);
	briney = bone;
    }
if ((buggzie>=(bone+(ten*4)))&&(buggzie<(((Math.floor(buggzie/ten))*ten)+serv))){
	briney = bone;
	beatbet = beatbet*10;
	ten = (beatbet*10);
	serv = (beatbet*6.1);
	eight = (beatbet*7.9);
	hun = (beatbet*100);
    bolbet = beatbet;
    oldegener = 0;
    yikes = 1;
    dude = ((Math.floor(buggzie/ten))*ten);
    bone = ((Math.floor(buggzie/hun))*hun);
    }
if (buggzie>=target){
console.log(""snowybot rocks"");
return;
}
homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var coldbet = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var milk = document.getElementById('me').firstChild.lastChild.firstChild.children[11].innerText;
if ((milk==razzle)&&(getld>=1)&&(homer>brother)&&(!boon)){
final = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
brother = parseFloat(homer);
boon = true;
}
if ((final<49.5000)&&(blowzy)){
zimple = zimple+zeggar
blowzy = false;
}
if ((final>=49.5000)&&(blowzy)){
zimple = zimple-zeggar;
blowzy = false;
}
var ficked = ((zimple*1).toFixed(8));
var migg = parseFloat(burgzie);
if (((milk>razzle)&&(getld>=1)&&(homer>brother))||((ficked>migg)&&(!blowzy)&&(getld>=2))||((ficked<migg)&&(!blowzy)&&(getld>=2))||((milk<razzle)&&(getld>=1)&&(homer>brother))){
console.log(""hacker attacked you with"");
console.log(milk);
console.log(""bet number of attack:"");
console.log(coldbet);
return;
}
if ((homer==brother)&&(boon)){
razzle = ((zeggar*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo').click();
getld = getld+1;
blowzy = true;
boon = false;
homer = 0;
}
setTimeout(() => get(), 10000);
}
get();
"
AvBvTRRd,Untitled,samipote,HTML,Saturday 2nd of September 2023 11:48:31 AM CDT,"<!DOCTYPE html>
<html lang=""en""> <!-- specify the language of the document -->
<head>
  <meta charset=""UTF-8""> <!-- specify the character encoding of the document -->
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0""> <!-- specify the viewport settings for responsive design -->
  <meta name=""description"" content=""The Sports Watcher is a web app that lets you watch live streams of various sports games.""> <!-- provide a brief summary of the web page for search engines and users -->
  <title>The Sports Watcher</title>
  <link rel=""stylesheet"" href=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"">
  <link href=""https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;700&display=swap"" rel=""stylesheet"">
	<link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/clappr@0.3.13/src/components/core/public/fonts.min.css"">
	<script src=""https://cdn.jsdelivr.net/npm/clappr@0.3.13/dist/clappr.min.js""></script>
  <style>
    :root {
      --bg-color: linear-gradient(to right, #000000, #3c3d5b, #000000); /* define a CSS variable for background color */
      --text-color: #fff; /* define a CSS variable for text color */
      --shadow-color: rgba(0,0,0,0.3); /* define a CSS variable for shadow color */
      --accent-color: #ffcc00; /* define a CSS variable for accent color */
			--rotation-degree: 5deg;
			--scale-value: 1.0;
    }

    body {
      font-family: 'Montserrat', sans-serif;
      background: var(--bg-color); /* use the CSS variable for background color */
      margin: 0;
      color: var(--text-color); /* use the CSS variable for text color */
    }

    .container {
      margin: 0 auto;
      max-width: 1200px;
      padding: 2%;
    }

    header {
      /* use a semantic element for the header */
      text-align: center;
      margin-top: 2%;
    }

    h1 {
      font-weight: 700;
      color: var(--text-color);
      text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
      transition: all 0.3s ease;
    }

    h1:hover {
      transform: scale(1.1);
    }

    nav {
      /* use a semantic element for the navigation */
      display: flex;
      justify-content: center;
      align-items: center;
    }

    #gamesDropdown {
      display: block;
      width: 100%;
      padding: 0.4em 1em;
      font-size: 1em;
      margin-bottom: 2%;
      border: none;
      border-radius: 20px;
      background-color: var(--text-color);
      color: #333;
      box-shadow: 0 10px 10px var(--shadow-color); /* use the CSS variable for shadow color */
      transition: all 0.3s ease;
    }

    #gamesDropdown:hover {
      box-shadow: 0 15px 15px var(--shadow-color);
    }

    #gamesDropdown:focus {
      outline: none;
      border-color: var(--accent-color); /* use the CSS variable for accent color */
      box-shadow: 0 0 0 0.2rem rgba(255,204,0,.25);
    }

    main {
      /* use a semantic element for the main content */
      margin-top: 5%;
    }

    .video-container {
      position: relative;
      width: 100%;
      padding-top: 56.25%;
      border-radius: 20px;
      overflow: hidden;
      box-shadow: 0 10px 10px var(--shadow-color);
			transition: transform 1s; /* Add smooth transition for the transform property */
    }
		.video-container:hover{
		/* Scale the video on hover to create a 3D depth effect */
		transform: scale(var(--scale-value));
		}
    .video-container__player {
       /* use BEM methodology to name CSS classes and avoid specificity issues and conflicts */
       position:absolute;
       top :0;
       left :0;
       width :100%;
       height :100%;
			 transform-style: preserve-3d; /* Make sure the 3D transformations are applied to child elements too */
     }

  </style>
</head>
<body>
  <div class=""container"">
    <header>
      <!-- use a semantic element for the header -->
      <h1>The Sports Watcher</h1>
    </header>
    <nav>
      <!-- use a semantic element for the navigation -->
      <select id=""gamesDropdown"" onchange=""loadGame()"" class=""form-control""></select>
    </nav>
    <main>
      <!-- use a semantic element for the main content -->
      <div class=""video-container mt-5"">
        <!-- use Clappr JS to create a media player -->
        <div id=""player""></div>
      </div>
    </main>
  </div>
  <script>
    // Create a Clappr player instance
    let player = new Clappr.Player({
      parentId: '#player',
      autoPlay: true,
      mute: true,
    });

    // Listen for fullscreen changes and adjust control bar visibility
    player.on(Clappr.Events.PLAYER_FULLSCREEN, function() {
      if (player.isFullscreen()) {
        player.getPlugin('click_to_pause').disable(); // disables click to pause plugin
        player.getPlugin('media_control').disable(); // hides the control bar
      } else {
        player.getPlugin('click_to_pause').enable(); // enables click to pause plugin
        player.getPlugin('media_control').enable(); // shows the control bar
      }
    });

    let gamesDropdown = document.getElementById('gamesDropdown');
    let games = {};
    const apiUrl = '/games';
    fetch(apiUrl)
      .then(response => response.json())
      .then(gamesData => {
        gamesData.forEach(game => {
          if (!games[game.sport]) {
            games[game.sport] = [];
          }
          games[game.sport].push(game);
        });
        for (let sport in games) {
          let optgroup = document.createElement('optgroup');
          optgroup.label = sport;
          games[sport].forEach(game => {
            let option = document.createElement('option');
            option.text = game.title;
            option.value = game.streamLink;
            optgroup.appendChild(option);
          });
          gamesDropdown.appendChild(optgroup);
        }
        loadGame();
      })
      .catch(error => {
        console.error('Error fetching games:', error);
      });

    function loadGame() {
      let streamLink = gamesDropdown.value;
      if (streamLink) {
        streamLink = streamLink.replace('https://', ''); // remove 'https://'
        streamLink = streamLink.replace('http://', ''); // remove 'http://'
        // Fetch headers from the proxy URL
        fetch('/proxy/' + streamLink, { method: 'GET' })
          .then(response => {
            if (response.ok) {
              let type = response.headers.get('content-type');
              // Load the source into the player with the obtained type
              player.load('/proxy/' + streamLink, type);
            } else {
              console.error(""Error fetching video type:"", response.statusText);
            }
          })
          .catch(error => {
            console.error(""Failed to fetch video type:"", error);
          });
      }
    }
  </script>
</body>
</html>"
wLULFmaE,Python one line if,alaex777,Python,Saturday 2nd of September 2023 11:36:21 AM CDT,"# 02.09.2023

'''
One line if id the same as usual if
and can be used for creating 
more beatiful code.
'''

condition = True
a = 'value_1' if condition else 'value_2'

print(a)  # value_1
"
4HvmS20j,Untitled,samipote,HTML,Saturday 2nd of September 2023 11:26:47 AM CDT,"<body>
  <div class=""container"">
    <header>
      <!-- use a semantic element for the header -->
      <h1>The Sports Watcher</h1>
    </header>
    <nav>
      <!-- use a semantic element for the navigation -->
      <select id=""gamesDropdown"" onchange=""loadGame()"" class=""form-control""></select>
    </nav>
    <main>
      <!-- use a semantic element for the main content -->
      <div class=""video-container mt-5"">
        <video-js id=""player"" class=""video-js vjs-default-skin video-container__player"" controls preload=""auto"" data-setup='{}'>
          <!-- use BEM methodology to name CSS classes and avoid specificity issues and conflicts -->
          <p class=""vjs-no-js"">
            To view this video please enable JavaScript, and consider upgrading to a web browser that
            <a href=""http://videojs.com/html5-video-support/"" target=""_blank"" style=""color:var(--accent-color);"">supports HTML5 video</a> <!-- use the CSS variable for accent color -->
          </p>
        </video-js>
      </div>
    </main>
  </div>
  <script>
    let player = videojs('player');
		
    // Listen for fullscreen changes and adjust control bar visibility
    player.on('fullscreenchange', function() {
      if (player.isFullscreen()) {
        player.controls(false); // hides the control bar
      } else {
        player.controls(true); // shows the control bar
      }
    });
    let gamesDropdown = document.getElementById('gamesDropdown');
    let games = {};
    const apiUrl = '/games';
    fetch(apiUrl)
      .then(response => response.json())
      .then(gamesData => {
        gamesData.forEach(game => {
          if (!games[game.sport]) {
            games[game.sport] = [];
          }
          games[game.sport].push(game);
        });
        for (let sport in games) {
          let optgroup = document.createElement('optgroup');
          optgroup.label = sport;
          games[sport].forEach(game => {
            let option = document.createElement('option');
            option.text = game.title;
            option.value = game.streamLink;
            optgroup.appendChild(option);
          });
          gamesDropdown.appendChild(optgroup);
        }
        loadGame();
      })
      .catch(error => {
        console.error('Error fetching games:', error);
      });
    function loadGame() {
      let streamLink = gamesDropdown.value;
      if (streamLink) {
        streamLink = streamLink.replace('https://', ''); // remove 'https://'
        streamLink = streamLink.replace('http://', ''); // remove 'http://'
        // Fetch headers from the proxy URL
        fetch('/proxy/' + streamLink, { method: 'GET' })
          .then(response => {
            if (response.ok) {
              let type = response.headers.get('content-type');
              // Setup the player with the obtained type
              player.src({ src: '/proxy/' + streamLink, type: type });
            } else {
              console.error(""Error fetching video type:"", response.statusText);
            }
          })
          .catch(error => {
            console.error(""Failed to fetch video type:"", error);
          });
      }
    }
  </script>
</body>"
40HP6sZL,Not bot sword.,A_GUES,Lua,Saturday 2nd of September 2023 09:54:25 AM CDT,"getgenv().i_said_right_foot_creep = false -- initialize the global variable

game:GetService(""RunService"").RenderStepped:Connect(function()
    if i_said_right_foot_creep == true then -- check if the variable is true
        spawn(function()
            local tool = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass(""Tool"")
            if tool and tool:FindFirstChild(""Handle"") then
                tool:Activate() -- activate the tool
                local p = game.Players:GetPlayers()
                for i = 2, #p do -- loop through all players except the first one (local player)
                    local v = p[i].Character
                    if v and v:FindFirstChild(""Humanoid"") and v.Humanoid.Health > 0 and v:FindFirstChild(""HumanoidRootPart"") and game.Players.LocalPlayer:DistanceFromCharacter(v.HumanoidRootPart.Position) <= 15 then -- check if the player is alive, has a humanoid root part, and is within 15 units of distance
                        for i,v in next, v:GetChildren() do -- loop through all the parts of the player's character
                            if v:IsA(""BasePart"") then -- check if the part is a base part
                                firetouchinterest(tool.Handle,v,0) -- fire touch interest with the tool's handle and the part
                                firetouchinterest(tool.Handle,v,1)
                            end
                        end
                    end
                end
            end
        end)
    end
end)

local localPlayer = game:GetService(""Players"").LocalPlayer
local currentCamera = game:GetService(""Workspace"").CurrentCamera
local mouse = localPlayer:GetMouse()

local function getClosestPlayer()
    local closestPlayer = nil
    local shortestDistance = math.huge

    for i, v in pairs(game:GetService(""Players""):GetPlayers()) do
        if v.Name ~= localPlayer.Name then -- check if the player is not the local player
            if v.Character and v.Character:FindFirstChild(""Humanoid"") and v.Character.Humanoid.Health ~= 0 and v.Character:FindFirstChild(""HumanoidRootPart"") and v.Character:FindFirstChild(""Head"") then -- check if the player has a character, a humanoid, a humanoid root part, and a head
                if not v.Character:FindFirstChildOfClass(""ForceField"") then -- check if the player does not have a force field
                    local ray = Ray.new(v.Character:FindFirstChild(""HumanoidRootPart"").Position, Vector3.new(0,-100000,0)) -- create a ray from the player's humanoid root part to downwards
                    local Hit = game:GetService(""Workspace""):FindPartOnRay(ray, v.Character) -- find the part that the ray hits

                    if Hit then -- check if the ray hit something
                        local magnitude = (v.Character.HumanoidRootPart.Position - localPlayer.Character.HumanoidRootPart.Position).magnitude -- calculate the distance between the player and the local player

                        if magnitude < shortestDistance then -- check if the distance is shorter than the previous shortest distance
                            closestPlayer = v -- update the closest player
                            shortestDistance = magnitude -- update the shortest distance
                        end
                    end         
                end
            end
        end
    end

    return closestPlayer -- return the closest player or nil if none found
end

local stateType = Enum.HumanoidStateType

local character = game.Players.LocalPlayer.Character
local humanoid = character:WaitForChild(""Humanoid"")

humanoid:SetStateEnabled(stateType.FallingDown, false) -- disable the falling down state
humanoid:SetStateEnabled(stateType.Ragdoll, false) -- disable the ragdoll state

while true do
    wait()
    spawn(function()
        local target = getClosestPlayer() -- get the closest player
        if game:GetService(""Players"").LocalPlayer.Character.PrimaryPart and target and i_said_right_foot_creep == true then -- check if the local player has a primary part, a target, and the variable is true
            local TargetPart = target.Character.HumanoidRootPart -- get the target's humanoid root part
            local Part = game.Players.LocalPlayer.Character.HumanoidRootPart -- get the local player's humanoid root part
            local RotateX, RotateY, RotateZ = 0, 0, 0

            Part.CFrame = CFrame.new(Part.Position, TargetPart.Position) * CFrame.Angles(math.rad(0), math.rad(25), math.rad(0)) -- set the part's CFrame to face the target's position with a 25 degree offset

            game:GetService(""Players"").LocalPlayer.Character.Humanoid:MoveTo(TargetPart.CFrame * Vector3.new(-3, 0, 0)) -- move to the target's position with a 3 unit offset
            if target.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall then -- check if the target is in freefall state
                game.Players.LocalPlayer.Character.Humanoid.Jump = true -- make the local player jump
            end
        end
    end)
end

getgenv().executed = false -- initialize the global variable

getgenv().ssss = game.Players.LocalPlayer:GetMouse() -- get the local player's mouse

ssss.KeyDown:connect(function(key) -- connect a function to the key down event of the mouse
    if key == ""x"" then -- check if the key is x
        if i_said_right_foot_creep == false then -- check if the variable is false
            getgenv().i_said_right_foot_creep = true -- set the variable to true
            game:GetService(""Players"").LocalPlayer.Character:FindFirstChildOfClass('Humanoid').AutoRotate  = false -- disable the auto rotate of the humanoid
        else       
            getgenv().i_said_right_foot_creep = false -- set the variable to false
            game:GetService(""Players"").LocalPlayer.Character:FindFirstChildOfClass('Humanoid').AutoRotate  = true -- enable the auto rotate of the humanoid   
        end
    end
end)
"
FJn2Ch3X,psudo,j0h,Python,Saturday 2nd of September 2023 09:40:44 AM CDT,"#!/usr/bin/env python3

import sys

def psudopython(input_file):
    with open(input_file, 'r') as file:
        lines = file.readlines()

    modified_lines = []
    for line in lines:
        modified_line = line.replace('#', '    ')  # Replace ""#"" with four spaces
        modified_lines.append(modified_line)

    interpreted_code = ''.join(modified_lines)

    # Execute the interpreted code
    try:
        exec(interpreted_code)
    except Exception as e:
        print(f""Error: {e}"")

if __name__ == ""__main__"":
    if len(sys.argv) != 2:
        print(""Usage: "",  sys.argv[0] ,"" <input_filename>"")
        sys.exit(1)

    input_file = sys.argv[1]
    print(""#!/usr/bin/env python3\n"")
    psudopython(input_file)"
FS2VmHSy,CodinGame_2023_09_02__16_23_50__replace_chars.java,MonsterScripter,Java,Saturday 2nd of September 2023 09:24:24 AM CDT,"import java.util.*;

/**
 * 01 Test 1
 * Entrée
 * Sortie attendue
 * 1
 * 0
 * 001
 * 110
 * 
 * 02 Test 2
 * Entrée
 * Sortie attendue
 * r
 * *
 * r*r*r****rr**rr***
 * r*r*rrrr**rr**rrr
 * 
 * 03 Test 3
 * Entrée
 * Sortie attendue
 * $
 * %
 * $%%%%$$$%%
 * %$$$$%%%$$
 * 
 * 04 Test 4
 * Entrée
 * Sortie attendue
 * '
 * 
 * '
 * 
 * 05 Test 5
 * Entrée
 * Sortie attendue
 * x
 * =
 * x=x=xxxxxx======xxxxxxxxxxxx======xx=x==x====xxxx===x===x==x=x=xxxx===x===x=xxxxxxxx=========
 * xxxxxxxxxx==x=x=x====x=x==x=xx=====xxxxxxxxx=x=xxxxxx======xxxxxxxxxxxx======xx=x==x====xxxx===
 * x===x==x=x=xxxxxxxx======xx=x==x====xxxx===x===x==x=x=xxxx===x===x=xxxxxxxx=========
 * xxxxxxxxxx==x=x=x====x=x==x=xx=====xxxxxxxxx=x=xxxxxx======xxxxxxxxxxxx======xx=x==x====xxxx===
 * x===x==x=x=xxxxxxxx======xx=x==x====xxxx===x===x==x=x=xxxx===x===x=xxxxxxxx=========
 * xxxxxxxxxx==x=x=x====x=x==x=xx=====xxxxxxxxx=x=xxxxxx======xxxxxxxxxxxx======xx=x==x====xxxx===
 * x===x==x=x=xxxxxxxx======xx=x==x====xxxx===x===x==x=x=xxxx===x===x=xxxxxxxx=========
 * xxxxxxxxxx==x=x=x====x=x==x=xx=====xxxxxxxxx=x=xxxxxx======xxxxxxxxxxxx======xx=x==x====xxxx===
 * x===x==x=x=xxxxxxxx======xx=x==x====xxxx===x===x==x=x=xxxx===x===x=xxxxxxxx=========
 * xxxxxxxxxx==x=x=x====x=x==x=xx=====xxxxxxxxx=x=xxxxxx======xxxxxxxxxxxx======xx=x==x====xxxx===
 * x===x==x=x=xxxxxxxx=========xxxxxxxxxx==x=x=x====x=x==x=xx=====xxxxxxxxx=x=xxxxxx======
 * xxxxxxxxxxxx=x==x====xxxx===x===x==x=x=xxxx===x===x=xxxxxxxx=========xxxxxxxxxx==x=x=x====
 * x=x==x=xx=====xxxxxxxxx=x=xxxxxx======xxxxxxxxxxxx======xx=x==x====xxxx===x===x==x=x=xxxx===
 * x===x==x=x=xxxxxxxx=========xxxxxxxxxx==x=x=x====x=x==x=xxx=x=xxxxxx======
 * xxxxxxxxxxxx=x==x====xxxx===x===x==x=x=xxxx===x===x=xxxxxxxx=========xxxxxxxxxx==x=x=x====
 * x=x==x=xx=====xxxxxxxxx=x=xxxxxx======xxxxxxxxxxxx======xx=x==x====xxxx===x===x==x=x=xxxx===
 * x===x==x=x=xxxxxxxx=========xxxxxxxxxx==x=x=x====x=x==x=xxx=x=xxxxxx====
 * xxxxxxxxxxxx=x==x====xxxx===x===x==x=x=xxxx===x===x=xxxxxxxx=========xxxxxxxxxx==x=x=x====
 * x=x==x=xxx=x=xxxxxx======xxxxxxxxxxxx======xx=x==x====xxxx===x===x==x=x=xxxx===x===x=xxxxxxxx=========
 * xxxxxxxxxxxx=x==x====xxxx===x===x==x=x=xxxx===x===x=xxxxxxxx=========xxxxxxxxxx==x=x=x====
 * x=x==x=xxx=x=xxxxxx====xxxxxxxx======
 * =x=x======xxxxxx============xxx
 * 
 */
class Solution {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        
        // Lire les caractères 'a' et 'b' depuis l'entrée
        String a = in.nextLine();
        String b = in.nextLine();
        
        // Lire la chaîne de caractères d'entrée
        String input = in.nextLine();
    
        // Remplacer les occurrences de 'b' par '#' dans la chaîne d'entrée
        input = input.replace(b.charAt(0), '#');
        
        // Remplacer les occurrences de 'a' par le caractère 'b' dans la chaîne d'entrée
        input = input.replace(a.charAt(0), b.charAt(0));
        
        // Remplacer les occurrences de '#' par le caractère 'a' dans la chaîne d'entrée
        input = input.replace('#', a.charAt(0));

        // Afficher la chaîne résultante
        System.out.println(input);
    }
}
"
AhXZWW49,CodinGame_2023_09_02__16_14_16__sum_ten.java,MonsterScripter,Java,Saturday 2nd of September 2023 09:14:26 AM CDT,"import java.util.*;

/**
 * Une contribution de _cuteBanana
 * Approuvé par XeraFiu, blehhhhhetraj-bunsha
 *
 * Objectif
 * Afficher les dix premiers multiples du nombre donné.
 *
 * Entrée
 * Ligne 1: N - le nombre que vous devrez multiplier.
 *
 * Sortie
 * Les 10 premiers multiples du nombre donné, séparés par un espace.
 *
 * Contraintes
 * 0 < N < 100000
 *
 * Exemple
 * Entrée
 * 1
 *
 * Sortie
 * 1 2 3 4 5 6 7 8 9 10
 */
class Solution {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        
        // Lecture du nombre N
        int N = in.nextInt();

        String s = """";
        
        // Boucle pour générer les 10 premiers multiples
        for (int i = 0; i <= N * 10; i++) {
            s += (i != 0 && i % N == 0) ? i + "" "" : """";
        }
        
        // Affichage des multiples
        System.out.println(s.trim());
    }
}
"
5yBPAfHt,CodinGame_2023_09_02__16_13_16__sum_even_odd.java,MonsterScripter,Java,Saturday 2nd of September 2023 09:13:34 AM CDT,"import java.util.*;
import java.io.*;
import java.math.*;

/**
 * Objectif
 * En fonction du type, sommez tous les nombres pairs ou impairs de 1 à la valeur donnée.
 *
 * Entrée
 * Ligne 1 : Une chaîne de caractères ""type"", soit ""odd"" (impairs) soit ""even"" (pairs), 
 *            indiquant le type de nombres à additionner.
 * Ligne 2 : Un nombre ""value"", indiquant la valeur maximale à additionner.
 *
 * Sortie
 * Ligne 1 : La somme de tous les nombres du type spécifié inférieurs ou égaux à la valeur.
 *
 * Contraintes
 * - Le type est soit ""odd"" (impairs) soit ""even"" (pairs).
 * - 1 ≤ value < 1000
 *
 * Exemple
 * Entrée
 * even
 * 11
 *
 * Sortie
 * 30
 */
class Solution {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        
        // Lecture du type (impair ou pair) et de la valeur maximale
        String type = in.next();
        int value = in.nextInt();
        
        // Initialisation de la variable x en fonction du type
        int x = type.equals(""even"") ? 0 : 1;
        int sum = 0;
        
        // Boucle pour additionner les nombres du type spécifié
        for (int i = x; i <= value; i += 2) {
            sum += i;
        }
        
        // Affichage de la somme
        System.out.println(sum);
    }
}
"
984nm0Hp,GamerBlox Face (Client),Gamer_blox,Lua,Saturday 2nd of September 2023 09:06:10 AM CDT,"local faceId = ""616380929"" -- Replace with the ID of the desired face

game.Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        local head = character:WaitForChild(""Head"") -- Wait for the head to load
        local face = head:WaitForChild(""face"") -- Check if a face decal already exists

        -- If a face decal already exists, remove it
        if face then
            face:Destroy()
        end

        -- Create a new face decal and assign the desired face ID
        local newFace = Instance.new(""Decal"")
        newFace.Texture = ""http://www.roblox.com/asset/?id="" .. faceId
        newFace.Name = ""face""
        newFace.Parent = head
    end)
end)
"
rumVS1Xv,Untitled,Rofyda_Elghadban1,C++,Saturday 2nd of September 2023 08:55:35 AM CDT," /*Rofyda Mohamed Hamed Hamed Elghadban*/
 //#include <bits/stdc++.h> 
 #include <iostream>
 #include <iomanip>
 #include <cmath>
 #include <algorithm>
 #include <cstdlib>
 #include <limits.h>
 #include <string>
 #include <vector>
 #include <map>
 #include <stack>
 #include <set>
 #include <deque>
 #include <fstream>
 #include <bitset>
 #include <cmath>
 #include <numeric>
 #include <cstring>
 #include <utility>
 #include <queue>

 /***********************************************************************************/

 #define ll long long
 #define ull unsigned long long
 #define pi 3.141592654
 #define NUM 1e18
 #define Mod  1'000'000'007
 #define fixed(n) fixed<<setprecision(n)
 #define cin(v) for(auto &i:v) cin >> i ;
 #define cout(v) for(auto &i:v) cout << i  <<"" "";
 #define Ceil(a,b) ((a/b)+(a%b ? 1 : 0))
 #define vowel(x) (x=='e'||x=='a'||x=='i'||x=='o'||x=='u')
 #define small(x) (x>=97&&x<=122)
 #define capital(x) (x>=65&&x<=90)
 #define Tolower(s) transform(s.begin(),s.end(),s.begin(),::tolower);
 #define Toupper(s) transform(s.begin(),s.end(),s.begin(),::toupper); 
 #define all(v) ((v).begin()), ((v).end())
 #define allr(v) ((v).rbegin()), ((v).rend())
 #define updmax(a,b) a=max(a,b)
 #define updmin(a,b) a=min(a,b)
 #define ceil(a,b) ((a/b)+(a%b?1:0))
 /* asc -> 1 2 3 ,des -> 3 2 1 */
 
 /***********************************************************************************/

 using namespace std;

 void Rofyda_Elghadban(){
  #ifndef ONLINE_JUDGE   
    freopen(""input.txt"", ""r"", stdin), freopen(""output.txt"", ""w"", stdout);
   #endif
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 }

 void solve(){
 }
 
 int main(){
  Rofyda_Elghadban();
 //freopen(""input.txt"",""r"",stdin);
 //freopen(""output.txt"",""r"",stdout);
  
 //solve();
 
//  int n;
//  cin>>n;
//  vector<int>v(n+1);
//  v[0]=0;
//  for(int i=1;i<n+1;i++){
//   cin>>v[i];
//  }
//  ll prefix1[n+2]{},prefix2[n+2]{};
//  for(int i=1;i<v.size()+1;i++){
//   prefix1[i]=v[i]+prefix1[i-1];
//  }
//  sort(all(v));
//  for(int i=1;i<v.size()+1;i++){
//   prefix2[i]=v[i]+prefix2[i-1];
//  }
//  int q;
//  cin>>q;
//  while(q--){
//   int t,l,r;
//   cin>>t>>l>>r;
//   if(t==1){
//     cout<<prefix1[r]-prefix1[l-1]<<""\n"";
//   }else if(t==2){
//     cout<<prefix2[r]-prefix2[l-1]<<""\n"";
//   }
//  }
 
 ll n,k,prefix[100001]{};
 cin>>n>>k;
 vector<ll>v1(n+1),v2(n+1);
 v1[0]=0,v2[0]=0;
 for(ll i=1;i<n+1;i++){
  cin>>v1[i];
 }
 for(ll i=1;i<n+1;i++){
  cin>>v2[i];
 }
 for(ll i=1;i<n+1;i++){
  prefix[i]=v1[i]+prefix[i-1];
 }
 ll l=1,r=l+k-1,maxi=INT_MIN,idx=0;
 for(ll i=1;i<v1.size()-k+1;i++){
  if(v2[i]==0){
    if(maxi<=prefix[r]-prefix[l-1]){
      maxi=max(maxi,prefix[r]-prefix[l-1]);
      idx=i;
      for(ll i=0;i<idx;i++){
        if(v2[i]==1){
          maxi=maxi+v1[i];
        }
      }
    }
  }
  l++;
  r++;
 }cout<<maxi<<""\n"";
 





 return 0;
}


/*

* * * * * * * *    * * * * * * * *    * * * * * * * *    *             *
*             *    *             *    *                  *             *
*             *    *             *    *                  *             *
*             *    *             *    *                  *             *
* * * * * * * *    *             *    * * * * * * * *    * * * * * * * *
* *                *             *    *                                *
*   *              *             *    *                                *
*     *            *             *    *                                *
*       *          *             *    *                                *
*         *        *             *    *                                *
*           *      *             *    *                                *     
*             *    * * * * * * * *    *                  * * * * * * * *

*/"
5GWu1CaX,News Sep2 23,Newscaster_Ned,Email,Saturday 2nd of September 2023 08:53:13 AM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

I‎t‎'‎s‎ ‎N‎e‎w‎s‎ ‎N‎e‎d‎.‎ ‎O‎r‎ ‎N‎e‎w‎s‎c‎a‎s‎t‎e‎r‎ ‎N‎e‎d‎.‎ ‎O‎r‎ ‎t‎h‎a‎t‎ ‎g‎u‎y‎ ‎w‎h‎o‎'‎s‎ ‎g‎o‎n‎n‎a‎ ‎f‎u‎c‎k‎ ‎y‎o‎u‎r‎ ‎d‎a‎u‎g‎h‎t‎e‎r‎ ‎t‎o‎n‎i‎g‎h‎t‎.‎ ‎E‎i‎t‎h‎e‎r‎ ‎w‎a‎y‎,‎ ‎i‎t‎'‎s‎ ‎t‎h‎a‎t‎ ‎t‎i‎m‎e‎ ‎a‎g‎a‎i‎n‎.‎ ‎T‎h‎e‎ ‎n‎e‎w‎s‎.‎

L‎a‎b‎o‎r‎ ‎D‎e‎p‎a‎r‎t‎m‎e‎n‎t‎:‎ ‎H‎o‎l‎l‎y‎w‎o‎o‎d‎ ‎S‎t‎r‎i‎k‎e‎s‎ ‎C‎o‎s‎t‎ ‎I‎n‎d‎u‎s‎t‎r‎y‎ ‎1‎7‎,‎0‎0‎0‎ ‎J‎o‎b‎s‎ ‎i‎n‎ ‎A‎u‎g‎u‎s‎t‎
F‎l‎a‎m‎b‎o‎y‎a‎n‎t‎ ‎F‎o‎r‎m‎e‎r‎ ‎H‎a‎r‎r‎o‎d‎s‎ ‎O‎w‎n‎e‎r‎ ‎M‎o‎h‎a‎m‎e‎d‎ ‎A‎l‎ ‎F‎a‎y‎e‎d‎ ‎D‎e‎a‎d‎ ‎a‎t‎ ‎9‎4‎
Y‎M‎C‎A‎ ‎H‎o‎s‎t‎i‎n‎g‎ ‎'‎L‎G‎B‎T‎Q‎+‎ ‎T‎e‎e‎n‎ ‎N‎i‎g‎h‎t‎ ‎O‎u‎t‎!‎'‎ ‎f‎o‎r‎ ‎M‎i‎n‎o‎r‎s‎
A‎l‎e‎x‎ ‎S‎o‎r‎o‎s‎ ‎V‎o‎w‎s‎ ‎'‎N‎o‎ ‎R‎e‎t‎r‎e‎a‎t‎'‎ ‎F‎r‎o‎m‎ ‎E‎u‎r‎o‎p‎e‎,‎ ‎W‎a‎r‎n‎s‎ ‎T‎r‎u‎m‎p‎ ‎T‎h‎r‎e‎a‎t‎e‎n‎s‎ ‎E‎U‎ ‎U‎n‎i‎t‎y‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎:‎ ‎M‎c‎C‎a‎r‎t‎h‎y‎ ‎D‎e‎t‎a‎i‎l‎s‎ ‎I‎m‎p‎e‎a‎c‎h‎m‎e‎n‎t‎ ‎I‎n‎q‎u‎i‎r‎y‎ ‎P‎r‎o‎c‎e‎s‎s‎

…‎I‎t‎ ‎w‎o‎u‎l‎d‎ ‎B‎e‎ ‎F‎o‎r‎m‎a‎l‎ ‎V‎o‎t‎e‎ ‎—‎ ‎‘‎I‎f‎ ‎W‎e‎ ‎M‎o‎v‎e‎ ‎F‎o‎r‎w‎a‎r‎d‎’‎
M‎c‎C‎a‎r‎t‎h‎y‎
H‎o‎u‎s‎e‎ ‎S‎p‎e‎a‎k‎e‎r‎ ‎K‎e‎v‎i‎n‎ ‎M‎c‎C‎a‎r‎t‎h‎y‎ ‎m‎a‎d‎e‎ ‎c‎l‎e‎a‎r‎ ‎t‎o‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎o‎n‎ ‎F‎r‎i‎d‎a‎y‎ ‎t‎h‎a‎t‎ ‎i‎f‎ ‎H‎o‎u‎s‎e‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎s‎ ‎m‎o‎v‎e‎ ‎f‎o‎r‎w‎a‎r‎d‎ ‎w‎i‎t‎h‎ ‎a‎n‎ ‎i‎m‎p‎e‎a‎c‎h‎m‎e‎n‎t‎ ‎i‎n‎q‎u‎i‎r‎y‎ ‎i‎n‎t‎o‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎,‎ ‎t‎h‎e‎ ‎m‎o‎v‎e‎ ‎w‎o‎u‎l‎d‎ ‎c‎o‎m‎e‎ ‎n‎o‎t‎ ‎a‎s‎ ‎a‎n‎ ‎a‎n‎n‎o‎u‎n‎c‎e‎m‎e‎n‎t‎ ‎f‎r‎o‎m‎ ‎h‎i‎m‎ ‎o‎r‎ ‎a‎n‎y‎o‎n‎e‎ ‎e‎l‎s‎e‎,‎ ‎b‎u‎t‎ ‎f‎r‎o‎m‎ ‎a‎ ‎f‎o‎r‎m‎a‎l‎ ‎v‎o‎t‎e‎ ‎o‎n‎ ‎t‎h‎e‎ ‎f‎l‎o‎o‎r‎ ‎o‎f‎ ‎t‎h‎e‎ ‎H‎o‎u‎s‎e‎.‎

F‎I‎L‎E‎ ‎-‎ ‎I‎n‎ ‎t‎h‎i‎s‎ ‎W‎e‎d‎n‎e‎s‎d‎a‎y‎,‎ ‎N‎o‎v‎.‎ ‎1‎1‎,‎ ‎2‎0‎2‎0‎,‎ ‎f‎i‎l‎e‎ ‎p‎h‎o‎t‎o‎,‎ ‎G‎e‎o‎r‎g‎i‎a‎ ‎S‎e‎c‎r‎e‎t‎a‎r‎y‎ ‎o‎f‎ ‎S‎t‎a‎t‎e‎ ‎B‎r‎a‎d‎ ‎R‎a‎f‎f‎e‎n‎s‎p‎e‎r‎g‎e‎r‎ ‎s‎p‎e‎a‎k‎s‎ ‎d‎u‎r‎i‎n‎g‎ ‎a‎ ‎n‎e‎w‎s‎ ‎c‎o‎n‎f‎e‎r‎e‎n‎c‎e‎ ‎i‎n‎ ‎A‎t‎l‎a‎n‎t‎a‎.‎ ‎R‎a‎f‎f‎e‎n‎s‎p‎e‎r‎g‎e‎r‎ ‎i‎s‎ ‎u‎n‎d‎e‎r‎ ‎a‎t‎t‎a‎c‎k‎ ‎f‎r‎o‎m‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎a‎n‎d‎ ‎o‎t‎h‎e‎r‎ ‎f‎e‎l‎l‎o‎w‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎s‎ ‎i‎n‎ ‎t‎h‎e‎ ‎a‎f‎t‎e‎r‎m‎a‎t‎h‎ ‎o‎f‎ ‎t‎h‎e‎ ‎h‎e‎a‎t‎e‎d‎ ‎e‎l‎e‎c‎t‎i‎o‎n‎ ‎s‎e‎a‎s‎o‎n‎.‎ ‎(‎A‎P‎ ‎P‎h‎o‎t‎o‎/‎B‎r‎y‎n‎n‎ ‎A‎n‎d‎e‎r‎s‎o‎n‎,‎ ‎F‎i‎l‎e‎)‎
R‎e‎p‎o‎r‎t‎:‎ ‎R‎a‎f‎f‎e‎n‎s‎p‎e‎r‎g‎e‎r‎ ‎T‎e‎s‎t‎i‎m‎o‎n‎y‎ ‎S‎u‎p‎p‎o‎r‎t‎s‎ ‎T‎r‎u‎m‎p‎ ‎D‎e‎f‎e‎n‎s‎e‎ ‎i‎n‎ ‎G‎e‎o‎r‎g‎i‎a‎ ‎C‎a‎s‎e‎
3‎,‎9‎4‎8‎
U‎k‎r‎a‎i‎n‎e‎ ‎T‎e‎l‎l‎s‎ ‎C‎r‎i‎t‎i‎c‎s‎ ‎o‎f‎ ‎S‎l‎o‎w‎ ‎C‎o‎u‎n‎t‎e‎r‎ ‎O‎f‎f‎e‎n‎s‎i‎v‎e‎ ‎t‎o‎ ‎'‎S‎h‎u‎t‎ ‎U‎p‎'‎
U‎k‎r‎a‎i‎n‎e‎ ‎T‎e‎l‎l‎s‎ ‎C‎r‎i‎t‎i‎c‎s‎ ‎o‎f‎ ‎S‎l‎o‎w‎ ‎C‎o‎u‎n‎t‎e‎r‎ ‎O‎f‎f‎e‎n‎s‎i‎v‎e‎ ‎t‎o‎ ‎'‎S‎h‎u‎t‎ ‎U‎p‎'‎
1‎6‎5‎
E‎l‎i‎e‎ ‎M‎y‎s‎t‎a‎l‎:‎ ‎T‎r‎u‎m‎p‎ ‎a‎n‎d‎ ‎C‎o‎-‎C‎o‎n‎s‎p‎i‎r‎a‎t‎o‎r‎s‎ ‎'‎M‎o‎s‎t‎ ‎L‎i‎k‎e‎l‎y‎'‎ ‎W‎i‎l‎l‎ ‎B‎e‎ ‎C‎o‎n‎v‎i‎c‎t‎e‎d‎
E‎l‎i‎e‎ ‎M‎y‎s‎t‎a‎l‎:‎ ‎T‎r‎u‎m‎p‎ ‎a‎n‎d‎ ‎C‎o‎-‎C‎o‎n‎s‎p‎i‎r‎a‎t‎o‎r‎s‎ ‎'‎M‎o‎s‎t‎ ‎L‎i‎k‎e‎l‎y‎'‎ ‎W‎i‎l‎l‎ ‎B‎e‎ ‎C‎o‎n‎v‎i‎c‎t‎e‎d‎
4‎4‎1‎
K‎e‎m‎p‎ ‎S‎t‎a‎n‎d‎s‎ ‎b‎y‎ ‎F‎a‎n‎i‎ ‎W‎i‎l‎l‎i‎s‎,‎ ‎D‎i‎s‎m‎i‎s‎s‎e‎s‎ ‎C‎a‎l‎l‎s‎ ‎t‎o‎ ‎I‎m‎p‎e‎a‎c‎h‎ ‎D‎A‎
K‎e‎m‎p‎ ‎S‎t‎a‎n‎d‎s‎ ‎b‎y‎ ‎F‎a‎n‎i‎ ‎W‎i‎l‎l‎i‎s‎,‎ ‎D‎i‎s‎m‎i‎s‎s‎e‎s‎ ‎C‎a‎l‎l‎s‎ ‎t‎o‎ ‎I‎m‎p‎e‎a‎c‎h‎ ‎D‎A‎
6‎,‎1‎7‎6‎
R‎u‎s‎s‎i‎a‎ ‎D‎e‎p‎l‎o‎y‎s‎ ‎I‎n‎t‎e‎r‎c‎o‎n‎t‎i‎n‎e‎n‎t‎a‎l‎ ‎B‎a‎l‎l‎i‎s‎t‎i‎c‎ ‎M‎i‎s‎s‎i‎l‎e‎ ‎f‎o‎r‎ ‎'‎C‎o‎m‎b‎a‎t‎ ‎D‎u‎t‎y‎'‎
R‎u‎s‎s‎i‎a‎ ‎D‎e‎p‎l‎o‎y‎s‎ ‎I‎n‎t‎e‎r‎c‎o‎n‎t‎i‎n‎e‎n‎t‎a‎l‎ ‎B‎a‎l‎l‎i‎s‎t‎i‎c‎ ‎M‎i‎s‎s‎i‎l‎e‎ ‎f‎o‎r‎ ‎'‎C‎o‎m‎b‎a‎t‎ ‎D‎u‎t‎y‎'‎
1‎1‎7‎
N‎o‎n‎-‎v‎i‎o‎l‎e‎n‎t‎ ‎J‎a‎n‎u‎a‎r‎y‎ ‎6‎ ‎D‎e‎f‎e‎n‎d‎a‎n‎t‎ ‎D‎i‎e‎s‎ ‎a‎t‎ ‎2‎2‎;‎ ‎S‎u‎i‎c‎i‎d‎e‎ ‎S‎u‎s‎p‎e‎c‎t‎e‎d‎
N‎o‎n‎-‎v‎i‎o‎l‎e‎n‎t‎ ‎J‎a‎n‎u‎a‎r‎y‎ ‎6‎ ‎D‎e‎f‎e‎n‎d‎a‎n‎t‎ ‎D‎i‎e‎s‎ ‎a‎t‎ ‎2‎2‎;‎ ‎S‎u‎i‎c‎i‎d‎e‎ ‎S‎u‎s‎p‎e‎c‎t‎e‎d‎
1‎,‎3‎9‎2‎
E‎l‎o‎n‎ ‎M‎u‎s‎k‎ ‎S‎l‎a‎m‎s‎ ‎E‎l‎i‎t‎e‎ ‎H‎o‎l‎l‎y‎w‎o‎o‎d‎ ‎S‎c‎h‎o‎o‎l‎ ‎E‎x‎p‎o‎s‎e‎d‎ ‎b‎y‎ ‎A‎n‎d‎r‎e‎w‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎
E‎l‎o‎n‎ ‎M‎u‎s‎k‎ ‎S‎l‎a‎m‎s‎ ‎E‎l‎i‎t‎e‎ ‎H‎o‎l‎l‎y‎w‎o‎o‎d‎ ‎S‎c‎h‎o‎o‎l‎ ‎E‎x‎p‎o‎s‎e‎d‎ ‎b‎y‎ ‎A‎n‎d‎r‎e‎w‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎
9‎1‎9‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎M‎c‎C‎a‎r‎t‎h‎y‎ ‎o‎n‎ ‎P‎o‎s‎s‎i‎b‎l‎e‎ ‎I‎m‎p‎e‎a‎c‎h‎m‎e‎n‎t‎ ‎I‎n‎q‎u‎i‎r‎y‎:‎ ‎W‎o‎u‎l‎d‎ ‎B‎e‎ ‎H‎o‎u‎s‎e‎ ‎V‎o‎t‎e‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎M‎c‎C‎a‎r‎t‎h‎y‎ ‎o‎n‎ ‎P‎o‎s‎s‎i‎b‎l‎e‎ ‎I‎m‎p‎e‎a‎c‎h‎m‎e‎n‎t‎ ‎I‎n‎q‎u‎i‎r‎y‎:‎ ‎W‎o‎u‎l‎d‎ ‎B‎e‎ ‎H‎o‎u‎s‎e‎ ‎V‎o‎t‎e‎
8‎,‎5‎4‎6‎
J‎a‎n‎u‎a‎r‎y‎ ‎6‎ ‎D‎e‎f‎e‎n‎d‎a‎n‎t‎ ‎M‎a‎t‎t‎h‎e‎w‎ ‎M‎a‎r‎t‎i‎n‎
T‎w‎o‎ ‎P‎r‎o‎u‎d‎ ‎B‎o‎y‎s‎ ‎S‎e‎n‎t‎e‎n‎c‎e‎d‎ ‎t‎o‎ ‎1‎0‎,‎ ‎1‎8‎ ‎Y‎e‎a‎r‎s‎ ‎P‎r‎i‎s‎o‎n‎ ‎f‎o‎r‎ ‎R‎o‎l‎e‎ ‎i‎n‎ ‎C‎a‎p‎i‎t‎o‎l‎ ‎R‎i‎o‎t‎ ‎
6‎4‎5‎
F‎e‎d‎e‎r‎a‎l‎ ‎J‎u‎d‎g‎e‎ ‎D‎i‎s‎m‎i‎s‎s‎e‎s‎ ‎1‎4‎A‎ ‎L‎a‎w‎s‎u‎i‎t‎ ‎A‎t‎t‎e‎m‎p‎t‎i‎n‎g‎ ‎t‎o‎ ‎K‎e‎e‎p‎ ‎T‎r‎u‎m‎p‎ ‎o‎f‎f‎ ‎B‎a‎l‎l‎o‎t‎
F‎e‎d‎e‎r‎a‎l‎ ‎J‎u‎d‎g‎e‎ ‎D‎i‎s‎m‎i‎s‎s‎e‎s‎ ‎1‎4‎A‎ ‎L‎a‎w‎s‎u‎i‎t‎ ‎A‎t‎t‎e‎m‎p‎t‎i‎n‎g‎ ‎t‎o‎ ‎K‎e‎e‎p‎ ‎T‎r‎u‎m‎p‎ ‎o‎f‎f‎ ‎B‎a‎l‎l‎o‎t‎

L‎i‎v‎i‎n‎g‎ ‎F‎o‎s‎s‎i‎l‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎B‎e‎a‎t‎i‎n‎g‎ ‎C‎r‎i‎p‎p‎l‎e‎d‎ ‎T‎e‎e‎n‎a‎g‎e‎r‎ ‎i‎n‎s‎i‎d‎e‎ ‎D‎e‎l‎a‎w‎a‎r‎e‎ ‎H‎i‎g‎h‎ ‎C‎a‎f‎e‎t‎e‎r‎i‎a‎.‎

J‎u‎s‎t‎ ‎a‎ ‎n‎o‎r‎m‎a‎l‎ ‎d‎a‎y‎.‎


S‎i‎l‎v‎e‎r‎b‎a‎c‎k‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎S‎t‎a‎b‎b‎i‎n‎g‎ ‎W‎h‎i‎t‎e‎ ‎C‎l‎e‎r‎k‎ ‎6‎ ‎T‎i‎m‎e‎s‎,‎ ‎B‎e‎f‎o‎r‎e‎ ‎Q‎w‎o‎p‎s‎ ‎a‎n‎d‎ ‎K‎-‎9‎ ‎I‎n‎t‎e‎r‎v‎e‎n‎e‎d‎.‎


C‎h‎i‎m‎p‎ ‎S‎h‎o‎w‎s‎ ‎H‎i‎s‎ ‎P‎e‎n‎i‎s‎ ‎t‎o‎ ‎W‎o‎m‎a‎n‎ ‎a‎t‎ ‎D‎a‎n‎a‎ ‎L‎o‎u‎'‎s‎ ‎L‎a‎u‎n‎d‎r‎o‎m‎a‎t‎ ‎i‎n‎ ‎M‎a‎d‎i‎s‎o‎n‎.‎


M‎o‎n‎k‎e‎y‎ ‎S‎t‎r‎a‎n‎g‎l‎e‎s‎ ‎H‎i‎s‎ ‎M‎u‎l‎a‎t‎t‎o‎ ‎D‎a‎u‎g‎h‎t‎e‎r‎ ‎t‎o‎ ‎D‎e‎a‎t‎h‎ ‎A‎f‎t‎e‎r‎ ‎G‎i‎v‎i‎n‎g‎ ‎H‎e‎r‎ ‎B‎o‎o‎z‎e‎ ‎a‎n‎d‎ ‎C‎o‎k‎e‎.‎


2‎ ‎B‎o‎o‎t‎l‎i‎p‎s‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎P‎u‎n‎c‎h‎i‎n‎g‎ ‎E‎l‎d‎e‎r‎l‎y‎ ‎W‎h‎i‎t‎e‎ ‎W‎o‎m‎a‎n‎ ‎a‎t‎ ‎B‎r‎o‎n‎x‎ ‎S‎u‎p‎e‎r‎m‎a‎r‎k‎e‎t‎.‎


F‎e‎m‎a‎l‎e‎ ‎B‎a‎b‎o‎o‎n‎ ‎S‎t‎a‎b‎s‎ ‎M‎a‎n‎ ‎w‎i‎t‎h‎ ‎B‎i‎r‎t‎h‎d‎a‎y‎ ‎C‎a‎k‎e‎ ‎K‎n‎i‎f‎e‎ ‎D‎u‎r‎i‎n‎g‎ ‎A‎r‎g‎u‎m‎e‎n‎t‎ ‎a‎t‎ ‎1‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎'‎s‎ ‎F‎i‎r‎s‎t‎ ‎B‎i‎r‎t‎h‎d‎a‎y‎.‎


W‎a‎r‎r‎a‎n‎t‎ ‎I‎s‎s‎u‎e‎d‎ ‎f‎o‎r‎ ‎M‎o‎n‎k‎ ‎W‎h‎o‎ ‎P‎u‎n‎c‎h‎e‎d‎ ‎W‎h‎i‎t‎e‎ ‎M‎a‎n‎ ‎a‎n‎d‎ ‎S‎p‎i‎c‎ ‎a‎t‎ ‎C‎h‎a‎r‎l‎o‎t‎t‎e‎s‎v‎i‎l‎l‎e‎ ‎P‎r‎o‎t‎e‎s‎t‎.‎


N‎e‎g‎r‎o‎i‎d‎ ‎S‎p‎e‎c‎i‎m‎e‎n‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎G‎r‎o‎p‎i‎n‎g‎ ‎W‎o‎m‎a‎n‎,‎ ‎B‎u‎t‎ ‎G‎e‎t‎s‎ ‎o‎f‎f‎ ‎S‎c‎o‎t‎t‎-‎F‎r‎e‎e‎ ‎C‎a‎u‎s‎e‎ ‎H‎e‎'‎s‎ ‎a‎ ‎""‎D‎i‎p‎l‎o‎m‎a‎t‎""‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎B‎r‎i‎n‎g‎ ‎b‎a‎c‎k‎ ‎s‎e‎g‎r‎e‎g‎a‎t‎i‎o‎n‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
S‎u‎n‎n‎y‎
1‎0‎2‎°‎
/‎7‎3‎°‎
1‎%‎
E‎ ‎7‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎2‎ ‎|‎ ‎D‎a‎y‎
1‎0‎2‎°‎
1‎%‎
E‎
7‎
 ‎
m‎p‎h‎
A‎b‎u‎n‎d‎a‎n‎t‎ ‎s‎u‎n‎s‎h‎i‎n‎e‎.‎ ‎H‎o‎t‎.‎ ‎H‎i‎g‎h‎ ‎1‎0‎2‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎E‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
3‎9‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
1‎0‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎0‎7‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
7‎:‎5‎1‎ ‎p‎m‎
S‎a‎t‎ ‎0‎2‎ ‎|‎ ‎N‎i‎g‎h‎t‎
7‎3‎°‎
5‎%‎
S‎S‎E‎
9‎
 ‎
m‎p‎h‎
M‎o‎s‎t‎l‎y‎ ‎c‎l‎e‎a‎r‎.‎ ‎L‎o‎w‎ ‎7‎3‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎S‎E‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
6‎2‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
9‎:‎4‎7‎ ‎p‎m‎
W‎a‎n‎i‎n‎g‎ ‎G‎i‎b‎b‎o‎u‎s‎
M‎o‎o‎n‎s‎e‎t‎
9‎:‎5‎4‎ ‎a‎m‎
S‎u‎n‎ ‎0‎3‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎1‎°‎
/‎7‎4‎°‎
5‎%‎
S‎ ‎8‎ ‎m‎p‎h‎
M‎o‎n‎ ‎0‎4‎
S‎u‎n‎n‎y‎
1‎0‎1‎°‎
/‎7‎6‎°‎
1‎1‎%‎
S‎ ‎1‎0‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎5‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎2‎°‎
/‎7‎6‎°‎
1‎7‎%‎
S‎ ‎1‎2‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎6‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎1‎°‎
/‎7‎4‎°‎
1‎3‎%‎
S‎S‎E‎ ‎9‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎7‎
S‎u‎n‎n‎y‎
1‎0‎3‎°‎
/‎7‎4‎°‎
8‎%‎
S‎S‎E‎ ‎8‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎8‎
S‎u‎n‎n‎y‎
1‎0‎4‎°‎
/‎7‎4‎°‎
7‎%‎
S‎S‎E‎ ‎8‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎9‎
S‎u‎n‎n‎y‎
1‎0‎3‎°‎
/‎7‎4‎°‎
1‎0‎%‎
S‎S‎E‎ ‎9‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎0‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎2‎°‎
/‎7‎2‎°‎
7‎%‎
S‎ ‎9‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎1‎
S‎u‎n‎n‎y‎
1‎0‎2‎°‎
/‎7‎3‎°‎
1‎6‎%‎
S‎ ‎9‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎2‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎2‎°‎
/‎7‎3‎°‎
7‎%‎
S‎ ‎9‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎3‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎1‎°‎
/‎7‎2‎°‎
1‎9‎%‎
S‎ ‎8‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎4‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎0‎°‎
/‎7‎2‎°‎
1‎5‎%‎
S‎ ‎9‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎5‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
1‎0‎0‎°‎
/‎7‎1‎°‎
1‎4‎%‎
S‎S‎E‎ ‎8‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎6‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎9‎°‎
/‎7‎1‎°‎
1‎1‎%‎
S‎S‎E‎ ‎9‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎P‎u‎m‎p‎k‎i‎n‎ ‎S‎p‎i‎c‎e‎ ‎L‎a‎t‎t‎é‎.‎ ‎☕‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

M‎e‎m‎e‎ ‎C‎o‎m‎b‎i‎n‎i‎n‎g‎
M‎e‎m‎e‎ ‎c‎o‎m‎b‎i‎n‎i‎n‎g‎ ‎i‎s‎ ‎t‎h‎e‎ ‎s‎p‎e‎c‎i‎a‎l‎ ‎b‎r‎a‎n‎d‎ ‎o‎f‎ ‎s‎h‎o‎o‎p‎i‎n‎g‎ ‎u‎s‎e‎d‎ ‎t‎o‎ ‎r‎e‎v‎i‎v‎e‎ ‎a‎n‎ ‎o‎l‎d‎e‎r‎ ‎m‎e‎m‎e‎ ‎o‎r‎ ‎i‎m‎a‎g‎e‎ ‎w‎i‎t‎h‎ ‎a‎n‎o‎t‎h‎e‎r‎ ‎m‎e‎m‎e‎,‎ ‎i‎m‎a‎g‎e‎ ‎o‎r‎ ‎e‎v‎e‎n‎ ‎c‎o‎n‎c‎e‎p‎t‎,‎ ‎t‎h‎u‎s‎ ‎b‎r‎i‎n‎g‎i‎n‎g‎ ‎m‎e‎m‎e‎ ‎f‎a‎g‎g‎o‎t‎r‎y‎ ‎t‎o‎ ‎a‎ ‎w‎h‎o‎l‎e‎ ‎n‎e‎w‎ ‎l‎e‎v‎e‎l‎.‎ ‎T‎h‎i‎s‎ ‎i‎s‎ ‎u‎s‎u‎a‎l‎l‎y‎ ‎s‎e‎e‎n‎ ‎i‎n‎ ‎s‎h‎o‎o‎p‎s‎ ‎w‎h‎e‎r‎e‎ ‎p‎a‎r‎t‎ ‎o‎f‎ ‎a‎n‎ ‎o‎l‎d‎e‎r‎ ‎i‎m‎a‎g‎e‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎r‎e‎p‎l‎a‎c‎e‎d‎ ‎w‎i‎t‎h‎ ‎p‎a‎r‎t‎ ‎o‎f‎ ‎a‎ ‎n‎e‎w‎e‎r‎ ‎o‎n‎e‎,‎ ‎p‎r‎o‎d‎u‎c‎i‎n‎g‎ ‎m‎i‎x‎e‎d‎ ‎r‎e‎a‎c‎t‎i‎o‎n‎s‎ ‎t‎h‎a‎t‎ ‎m‎a‎y‎ ‎s‎p‎a‎r‎k‎ ‎n‎e‎w‎ ‎l‎u‎l‎z‎.‎ ‎N‎e‎w‎f‎a‎g‎s‎ ‎c‎a‎n‎ ‎o‎n‎l‎y‎ ‎l‎e‎a‎r‎n‎ ‎h‎o‎w‎ ‎t‎o‎ ‎u‎s‎e‎ ‎e‎x‎p‎l‎o‎i‎t‎a‎b‎l‎e‎s‎ ‎t‎o‎ ‎a‎c‎h‎i‎e‎v‎e‎ ‎a‎ ‎s‎i‎m‎i‎l‎a‎r‎ ‎r‎e‎s‎u‎l‎t‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎t‎h‎e‎y‎ ‎d‎o‎n‎'‎t‎ ‎h‎a‎v‎e‎ ‎t‎h‎e‎ ‎r‎e‎q‎u‎i‎r‎e‎d‎ ‎v‎i‎s‎i‎o‎n‎ ‎n‎e‎c‎e‎s‎s‎a‎r‎y‎ ‎t‎o‎ ‎c‎r‎e‎a‎t‎e‎ ‎i‎t‎.‎

t‎l‎;‎d‎r‎ ‎d‎o‎ ‎t‎h‎i‎s‎ ‎o‎n‎l‎y‎ ‎i‎f‎ ‎y‎o‎u‎'‎r‎e‎ ‎c‎e‎r‎t‎a‎i‎n‎ ‎o‎f‎ ‎t‎h‎e‎ ‎r‎e‎s‎u‎l‎t‎s‎.‎

(‎(‎ ‎R‎E‎S‎U‎L‎T‎:‎ ‎P‎R‎O‎F‎I‎T‎ ‎O‎R‎ ‎F‎A‎I‎L‎?‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎D‎a‎n‎i‎s‎h‎ ‎W‎e‎s‎t‎ ‎I‎n‎d‎i‎a‎n‎ ‎d‎a‎l‎e‎r‎ ‎w‎a‎s‎ ‎t‎h‎e‎ ‎c‎u‎r‎r‎e‎n‎c‎y‎ ‎o‎f‎ ‎t‎h‎e‎ ‎D‎a‎n‎i‎s‎h‎ ‎W‎e‎s‎t‎ ‎I‎n‎d‎i‎e‎s‎ ‎b‎e‎t‎w‎e‎e‎n‎ ‎1‎8‎4‎9‎ ‎a‎n‎d‎ ‎1‎9‎1‎7‎,‎ ‎a‎n‎d‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎n‎i‎t‎e‎d‎ ‎S‎t‎a‎t‎e‎s‎ ‎V‎i‎r‎g‎i‎n‎ ‎I‎s‎l‎a‎n‎d‎s‎ ‎b‎e‎t‎w‎e‎e‎n‎ ‎1‎9‎1‎7‎ ‎a‎n‎d‎ ‎1‎9‎3‎4‎.‎ ‎T‎h‎e‎ ‎c‎o‎i‎n‎ ‎s‎h‎o‎w‎n‎ ‎h‎e‎r‎e‎ ‎i‎s‎ ‎a‎ ‎t‎e‎n‎-‎d‎a‎l‎e‎r‎ ‎g‎o‎l‎d‎ ‎c‎o‎i‎n‎ ‎i‎s‎s‎u‎e‎d‎ ‎i‎n‎ ‎1‎9‎0‎4‎,‎ ‎t‎h‎e‎ ‎o‎n‎l‎y‎ ‎y‎e‎a‎r‎ ‎s‎u‎c‎h‎ ‎c‎o‎i‎n‎s‎ ‎w‎e‎r‎e‎ ‎m‎i‎n‎t‎e‎d‎.‎ ‎A‎l‎s‎o‎ ‎s‎t‎r‎u‎c‎k‎ ‎t‎h‎a‎t‎ ‎y‎e‎a‎r‎ ‎w‎e‎r‎e‎ ‎g‎o‎l‎d‎ ‎c‎o‎i‎n‎s‎ ‎w‎o‎r‎t‎h‎ ‎f‎o‎u‎r‎ ‎d‎a‎l‎e‎r‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎:‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎N‎u‎m‎i‎s‎m‎a‎t‎i‎c‎ ‎C‎o‎l‎l‎e‎c‎t‎i‎o‎n‎,‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎M‎u‎s‎e‎u‎m‎ ‎o‎f‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎H‎i‎s‎t‎o‎r‎y‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

a‎g‎g‎h‎h‎g‎u‎h‎g‎u‎h‎j‎h‎j‎h‎g‎h‎s‎h‎h‎g‎h‎u‎u‎a‎u‎a‎u‎a‎u‎a‎u‎a‎ ‎I‎'‎m‎ ‎s‎w‎i‎s‎h‎i‎n‎g‎ ‎L‎i‎s‎t‎e‎r‎i‎n‎e‎ ‎d‎o‎w‎n‎ ‎m‎y‎ ‎m‎o‎u‎t‎h‎ ‎u‎a‎u‎a‎u‎h‎a‎u‎h‎a‎u‎h‎a‎u‎h‎a‎u‎u‎a‎h‎u‎d‎h‎a‎s‎u‎d‎h‎s‎a‎h‎f‎k‎j‎d‎f‎h‎k‎j‎d‎s‎h‎f‎h‎g‎g‎l‎g‎l‎l‎g‎k‎g‎l‎k‎l‎k‎g‎a‎a‎a‎.‎"
E0SR56PU,CodinGame_2023_09_02__15_46_17__ascii_art.java,MonsterScripter,Java,Saturday 2nd of September 2023 08:46:32 AM CDT,"import java.util.*;

class Solution {

    public static void main(String args[]) {
        final Scanner in = new Scanner(System.in);
        final int L = in.nextInt();
        final int H = in.nextInt();
        if (in.hasNextLine()) {
            in.nextLine();
        }
        String T = in.nextLine();
        T = T.toUpperCase();
        for (int i = 0; i < H; i++) {
            final String ROW = in.nextLine();
            char letter;
            for (int j = 0; j < T.length(); j++) {
                letter = T.charAt(j);
                final char alphaBeginning = Character.isUpperCase(letter) ? 'A' : 'a';
                final char alphaEnding = Character.isUpperCase(letter) ? 'Z' : 'z';
                int start = 0;
                if (letter < alphaBeginning || letter > alphaEnding) {
                    start = ((alphaEnding - alphaBeginning) + 1) * L;
                } else {
                    start = (letter - alphaBeginning) * L;
                }
                System.out.print(ROW.substring(start, start+L));
            }
            System.out.println();
        }

    }
}

/*

 	Objectif
Dans les gares et aéroports on croise souvent ce type d'écran :

Vous êtes-vous demandé comment il serait possible de simuler cet affichage dans un bon vieux terminal ? Nous oui : avec l'art ASCII !
 	Règles
L'art ASCII permet de représenter des formes en utilisant des caractères. Dans notre cas, ces formes sont précisément des mots. Par exemple, le mot ""MANHATTAN"" pourra être affiché ainsi en art ASCII :

 
# #  #  ### # #  #  ### ###  #  ###
### # # # # # # # #  #   #  # # # #
### ### # # ### ###  #   #  ### # #
# # # # # # # # # #  #   #  # # # #
# # # # # # # # # #  #   #  # # # #
 
​Votre mission : Ecrire un programme capable d'afficher une ligne de texte en art ASCII dans un style qui vous est fourni en entrée.

 	Entrées du jeu
Entrée
Ligne 1 : la largeur L d'une lettre représentée en art ASCII. Toutes les lettres font la même largeur.

Ligne 2 : la hauteur H d'une lettre représentée en art ASCII. Toutes les lettres font la même hauteur.

Ligne 3 : La ligne de texte T, composée de N caractères ASCII

Lignes suivantes : La chaîne de caractères ABCDEFGHIJKLMNOPQRSTUVWXYZ? représentée en art ASCII.

Sortie
Le texte T en art ASCII.
Les caractères de a à z seront affichés en art ASCII par leur équivalent en majuscule.
Les caractères qui ne sont pas dans les intervales [a-z] ou [A-Z], seront affichés par le point d'interrogation en art ASCII.
Contraintes
0 < L < 30
0 < H < 30
0 < N < 200
Exemple 1
Entrée
4
5 
E
 #  ##   ## ##  ### ###  ## # # ###  ## # # #   # # ###  #  ##   #  ##   ## ### # # # # # # # # # # ### ### 
# # # # #   # # #   #   #   # #  #    # # # #   ### # # # # # # # # # # #    #  # # # # # # # # # #   #   # 
### ##  #   # # ##  ##  # # ###  #    # ##  #   ### # # # # ##  # # ##   #   #  # # # # ###  #   #   #   ## 
# # # # #   # # #   #   # # # #  #  # # # # #   # # # # # # #    ## # #   #  #  # # # # ### # #  #  #       
# # ##   ## ##  ### #    ## # # ###  #  # # ### # # # #  #  #     # # # ##   #  ###  #  # # # #  #  ###  #  
Sortie
### 
#   
##  
#   
### 
Exemple 2
Entrée
4
5
MANHATTAN
 #  ##   ## ##  ### ###  ## # # ###  ## # # #   # # ###  #  ##   #  ##   ## ### # # # # # # # # # # ### ### 
# # # # #   # # #   #   #   # #  #    # # # #   ### # # # # # # # # # # #    #  # # # # # # # # # #   #   # 
### ##  #   # # ##  ##  # # ###  #    # ##  #   ### # # # # ##  # # ##   #   #  # # # # ###  #   #   #   ## 
# # # # #   # # #   #   # # # #  #  # # # # #   # # # # # # #    ## # #   #  #  # # # # ### # #  #  #       
# # ##   ## ##  ### #    ## # # ###  #  # # ### # # # #  #  #     # # # ##   #  ###  #  # # # #  #  ###  #  
Sortie
# #  #  ### # #  #  ### ###  #  ###  
### # # # # # # # #  #   #  # # # #  
### ### # # ### ###  #   #  ### # #  
# # # # # # # # # #  #   #  # # # #  
# # # # # # # # # #  #   #  # # # # 

 */"
9dQXR6jZ,E2E Airlock,DragonSpace23,Lua,Saturday 2nd of September 2023 08:46:04 AM CDT,"Doors = { 
	{ 'left',	'front',	false }, 
	{ 'right',	'back',		false } 
}

function update_door(door)
	--	gets redstone value
	local v = redstone.getInput(door[1])
	if door[3] == v then
		--	input has not changed
		return false
	else
		--	input has changed
		door[3] = v
		--	returns true only when a door should open
		if v == true then
			return true
		else
			return false
		end
	end
end

function close_all()
	for k,v in pairs(Doors) do
		redstone.setOutput(v[2], false)
	end
end

function open_door(door)
	redstone.setOutput(door[2], door[3])
end

while true do
	--	Waits for redstone event
	os.pullEvent(""redstone"");
	--	Loops all doors
	for k,v in pairs(Doors) do
		if update_door(v) == true then
			close_all()
			open_door(v)
		end
	end
end
"
hbpcaW5r,MOK layout qwerty sunda,dksetiavan,YAML,Saturday 2nd of September 2023 08:40:02 AM CDT,"{
""title"":""qwerty sunda"",
""onScreen"":{
""main"":[
""᮱᮲᮳᮴᮵᮶᮷᮸᮹᮰"",
""ᮋᮝᮦᮛᮒᮚᮥᮤᮧᮕᮨ"",
""ᮢᮞᮓᮖᮌᮠᮏᮊᮜᮩ᮪"",
""[SHIFT]ᮐᮟᮎᮗᮘᮔᮙᮍ[DEL]"",
""[TOOL][ALTGR:, ][SPACE][][][SYM:. ][ENTER]""
],

""shifted"":[
"" ᳀᳁᳂᳃᳄᳅᳆᳇ "",
""ᮮᮭᮆᮁ ᮡᮅᮄᮇ ᮈ"",
""ᮃᮯ   ᮂᮿᮾᮣᮉ᮫"",
""[SHIFT]ᮺᮻᮼ ᮽᮑᮬᮀ[DEL]"",
""[LOCK][ALTGR:‍][SPACE][][][SYM:‌][ENTER]""
],""altGr"":[
""1234567890"",
""qwertyuiop"",
""asdfghjkl'"",
""[SHIFT]zxcvbnm[DEL]"",
""[LOCK][ALTGR:,][SPACE][][][SYM:.][ENTER]""
]}}"
Q3cV3iLi,Untitled,samipote,JavaScript,Saturday 2nd of September 2023 08:38:57 AM CDT,"const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');
const methodOverride = require('method-override');
const request = require('request');
const restream = require('restream');
const app = express();
const ffmpeg = require('fluent-ffmpeg');
app.set('host', 'sportswatcher.ddns.net');
const fs = require('fs');
const fetch = require('node-fetch');
app.use(express.json()); // Parse JSON bodies
app.use(express.urlencoded({ extended: true })); // Parse URL-encoded bodies
app.use(cors()); // Enable CORS
app.use(methodOverride('_method')); // Enable method override

// Replace with your MongoDB connection string
const connectionString = 'mongodb://localhost:27017/streaming';

// Connect to MongoDB
mongoose
  .connect(connectionString, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    console.log('Connected to MongoDB');
  })
  .catch((error) => {
    console.error('Failed to connect to MongoDB', error);
  });

// Define a Mongoose schema for our Game model
const gameSchema = new mongoose.Schema({
  title: String,
  streamLink: String,
  sport: String,
});

// Create the Game model
const Game = mongoose.model('Game', gameSchema);

// Serve static files from the public directory
app.use(express.static(path.join(__dirname, 'public')));

const proxyAddress = 'http://localhost:8080/';
process.env.NODE_TLS_REJECT_UNAUTHORIZED = ""0"";

// A function that returns a modified URL for .ts and .wbp files
function getSegmentURL(targetURL) {
  const baseURL = getBaseURL();
  return baseURL + 'segment/' + targetURL.replace('https://', '');
}

// A function that returns a modified URL for .m3u8 files
function getPlaylistURL(targetURL) {
  const baseURL = getBaseURL();
  return baseURL + 'proxy/' + targetURL.replace('https://', '');
}
function getKeyURL(url) {
  return `/key/${url.substring(8)}`; // Strip ""https://""
}

function getHeadersForDomain(domain) {
  const defaultHeaders = {
    'accept': '*/*',
    'accept-encoding': 'gzip, deflate, br',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36',
    'sec-ch-ua': '""Chromium"";v=""116"", ""Not)A;Brand"";v=""24"", ""Brave"";v=""116""',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-platform': 'Windows',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'cross-site',
    'sec-gpc': '1',
  };

  switch(domain) {
    case 'ddy1.cdndac.lol':
    case 'ddy2.cdndac.lol':
    case 'ddy3.cdndac.lol':
		case 'ddy4.cdndac.lol':
		case 'ddy5.cdndac.lol':
		case 'ddh1.cdndac.lol':
    //... other ddy domains
      return {
        ...defaultHeaders,
        'origin': 'https://ddhwebcast4k.xyz',
        'referer': 'https://ddhwebcast4k.xyz/',
      };

    case 'ed-t1.edghst.me':
    case 'ed-t2.edghst.me':
    case 'ed-t3.edghst.me':
    case 'ed-t4.edghst.me':
    case 'ed-n1.edghst.me':
		case 'ed-c1.edghst.me':
      return {
        ...defaultHeaders,
        'origin': 'https://www.nolive.me',
        'referer': 'https://www.nolive.me/',
				'Accept-Encoding': 'identity'
      };
		case 'aes128.seckeyserv.me':
			return {
				...defaultHeaders,
        'origin': 'https://www.nolive.me',
        'referer': 'https://www.nolive.me/',
				'method': 'GET',
				'authority': 'aes128.seckeyserv.me'
      };
		case 's2.albula.xyz':
			return {
				...defaultHeaders,
        'origin': 'https://www.sportshub.to',
        'referer': 'https://www.sportshub.to/'
      };
		case 'nflarcadia.xyz':
			return {
				...defaultHeaders,
        'origin': 'https://gamerarcades.com',
        'referer': 'https://gamerarcades.com/'
      };
		case 'livenflstream.xyz':
			return {
				...defaultHeaders,
        'origin': 'https://catchystream.com',
        'referer': 'https://catchystream.com/'
      };
		case 's3.twoflow.xyz':
		return {
				...defaultHeaders,
        'origin': 'https://bestreamsports.org',
        'referer': 'https://bestreamsports.org/'
      };
		case 'n6.aliflailaaliflaila.com':
		return {
				...defaultHeaders,
        'origin': 'https://fiveyardlab.com',
        'referer': 'https://fiveyardlab.com/'
      };
		case 'jggk.9novel.to':
		return {
				...defaultHeaders,
        'origin': 'https://vwrc.truyenxalo.com',
        'referer': 'https://vwrc.truyenxalo.com/'
      };
		case 'ddh1.cdnbos.lol' :
		case 'ddy1.cdnbos.lol' :
		return {
				...defaultHeaders,
        'origin': 'https://ddolahdplay.xyz',
        'referer': 'https://ddolahdplay.xyz/'
      };
    default:
      return defaultHeaders;
  }
}

function appendQueryParameter(url, paramKey, paramValue) {
    if (url.includes('?')) {
        return `${url}&${paramKey}=${paramValue}`;
    } else {
        return `${url}?${paramKey}=${paramValue}`;
    }
}
app.use('/proxy/', async (req, res, next) => {
  const fullURL = req.protocol + '://' + req.get('host') + req.originalUrl;
  const { pathname, search } = new URL(fullURL);
  console.log(`Received request for URL: ${fullURL}`);
  
  const targetURL = pathname.replace('/proxy/', 'https://') + search;
  const domain = new URL(targetURL).hostname;
  const parsedURL = new URL(targetURL);
  const fileExtension = path.extname(parsedURL.pathname).toLowerCase();

  if (fileExtension === '.m3u8') {
    try {
      const m3u8Response = await fetch(targetURL, { headers: getHeadersForDomain(domain) });
      let m3u8Content = await m3u8Response.text();
      m3u8Content = await Promise.all(m3u8Content.split('\n').map(async line => {
        const segmentParsedURL = new URL(line, targetURL);
        let segmentBaseURL;

        if (segmentParsedURL.pathname.startsWith('/')) {
            segmentBaseURL = parsedURL.origin;
        } else {
            segmentBaseURL = targetURL.substring(0, targetURL.lastIndexOf('/') + 1);
        }

        const segmentURL = line.startsWith('http') ? line : segmentBaseURL + segmentParsedURL.pathname + segmentParsedURL.search;
        const segmentFileExtension = path.extname(segmentParsedURL.pathname).toLowerCase();

        if (segmentFileExtension === '.ts' || segmentFileExtension === '.webp' || segmentFileExtension === '.js') {
            const resolvedURL = await resolveRedirect(segmentURL, getHeadersForDomain(domain));
            const segmentDomain = new URL(segmentURL).host;
            return appendQueryParameter(getSegmentURL(resolvedURL), ""originalDomain"", segmentDomain);
        } else if (line.match(/\.m3u8$/)) {
            const playlistURL = line.startsWith('http') ? line : segmentBaseURL + segmentParsedURL.pathname;
            const resolvedURL = await resolveRedirect(playlistURL, getHeadersForDomain(domain));
            return getPlaylistURL(resolvedURL);
        } else if (line.startsWith('#EXT-X-KEY')) {
            const keyURLMatch = line.match(/URI=""([^""]+)""/);
            if (!keyURLMatch) {
                return line;
            }
            const keyURL = keyURLMatch[1];
            const segmentDomain = new URL(keyURL).host;
            const modifiedKeyURL = appendQueryParameter(getKeyURL(keyURL), ""originalDomain"", segmentDomain);
            return line.replace(/URI=""([^""]+)""/, `URI=""${modifiedKeyURL}""`);
        } else {
            return line;
        }
      }));

      m3u8Content = m3u8Content.join('\n');
      res.setHeader('Content-Type', 'application/vnd.apple.mpegurl');
      res.setHeader('Access-Control-Allow-Origin', '*');
			res.setHeader('Connection', 'Keep-Alive');
			res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate'); // HTTP 1.1.
      res.setHeader('Pragma', 'no-cache'); // HTTP 1.0.
      res.send(m3u8Content);
    } catch (err) {
      console.error('Failed to fetch m3u8:', err.message);
      res.status(500).send('Proxy Error');
    }
    return;
  }
});


async function resolveRedirect(url, headers) {
  try {
    const response = await fetch(url, { headers });
    if (response.redirected) {
      return response.url;
    }
    return url;
  } catch (error) {
    console.error('Failed to resolve redirect for', url, error.message);
    return changeExtensionToJs(url);
  }
}

function changeExtensionToJs(url) {
  const withoutExtension = url.substring(0, url.lastIndexOf('.'));
  return `${withoutExtension}.js`;
}

// A new route for handling .ts and .wbp requests
app.use('/segment/*', (req, res) => {
    const originalDomain = req.query.originalDomain;
		delete req.query.originalDomain;
    const headersForDomain = getHeadersForDomain(originalDomain);
    const fullURL = req.protocol + '://' + req.get('host') + req.originalUrl;
    console.log(`Received request for URL: ${fullURL}`);

    // Capture the segment path from the wildcard
    const segmentPath = req.params[0];

    // Construct the targetURL with the captured segment path
    const targetURL = 'https://' + segmentPath;

    // Create a proxyRequestOptions object with the headers copied from the original request
    const proxyRequestOptions = {
        url: targetURL,
        headers: headersForDomain
    };

    proxyRequestOptions.headers.host = new URL(targetURL).host;
    const proxyRequest = request(proxyRequestOptions);

    proxyRequest.on('response', function (sourceResponse) {
        res.setHeader('Access-Control-Allow-Origin', '*');
				res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate'); // HTTP 1.1.
				res.setHeader('Pragma', 'no-cache'); // HTTP 1.0.
        sourceResponse.pipe(res);
    });
});

app.use('/key/*', (req, res) => {
  const originalDomain = req.query.originalDomain;
	delete req.query.originalDomain;
  const headersForDomain = getHeadersForDomain(originalDomain);
  const fullURL = req.protocol + '://' + req.get('host') + req.originalUrl;
  console.log(`Received request for key URL: ${fullURL}`);

  // Capture the key path from the wildcard
  const keyPath = req.params[0];

  // Construct the targetURL with the captured key path
  const targetURL = 'https://' + keyPath;
  const domain = new URL(targetURL).hostname;

  // Create a proxyRequestOptions object with the headers copied from the original request
  const proxyRequestOptions = {
    url: targetURL,
    headers: headersForDomain
  };

  const proxyRequest = request(proxyRequestOptions);
  
  proxyRequest.on('response', function(sourceResponse) {
    res.setHeader('Access-Control-Allow-Origin', '*');
		res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate'); // HTTP 1.1.
    res.setHeader('Pragma', 'no-cache');
    sourceResponse.pipe(res);
  });
  
  proxyRequest.on('error', function(err) {
    console.error('Proxy Error for URL:', targetURL, 'Error:', err.message);
    res.status(500).send('Proxy Error');
  });
  
  res.on('error', (err) => {
    console.error('Error during response pipe:', err);
  });
});


function getBaseURL() {
  return `http://${app.get('host')}/`;
}

app.get('/', (req, res) => {
  res.render('main.ejs');
});

// Route for serving the admin panel
app.get('/admin', async (req, res) => {
  try {
    const games = await Game.find();
    res.render('admin.ejs', { videos: games });
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route for getting all games
app.get('/games', async (req, res) => {
  try {
    const games = await Game.find();
    res.send(games);
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route for creating a new game
app.post('/games', async (req, res) => {
  try {
    const game = new Game(req.body);
    await game.save();
    res.redirect('/admin');
  } catch (error) {
    res.status(500).send(error);
  }
});

app.put('/games/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { title, streamLink, sport } = req.body;
    const updatedGame = await Game.findByIdAndUpdate(id, { title, streamLink, sport }, { new: true });
    res.redirect('/admin');
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route for deleting a game
app.delete('/games/:id', async (req, res) => {
  try {
    await Game.deleteOne({ _id: req.params.id });
    res.redirect('/admin');
  } catch (error) {
    res.status(500).send(error);
  }
});

// Start the server
const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Server running on port ${port}`));"
hTeSWpps,MOK layout ngwerty kawi u/ font AksaraNusantara,dksetiavan,YAML,Saturday 2nd of September 2023 08:38:52 AM CDT,"{
""title"":""ngwerty kawi ufA"",
""onScreen"":{
""main"":[
""᪑᪒᪓᪔᪕᪖᪗᪘᪙᪐"",
""ᨦᩅᩮᩁᨴᨿᩩᩥᩣᨸ"",
""ᩧᩈᨰᩂᨣᩉᨩᨠᩃ"",
""[SHIFT]ᨯᨲᨧᨬᨷᨶᨾ᩠[DEL]"",
""[TOOL][ALTGR:᪨][SPACE][][][SYM:᪩][ENTER]""
],

""shifted"":[
""ᩦᩱᩐ[MC:᩠ᩁ]ᨤᩀᩎ᩺ᩳ᪭"",
""ᩴᩪᩑᩛᨵ[MC:᩠ᨿ]ᩏᩍᩒᨹ"",
""ᩋᩇᨱᩄᨥᩡᨫᨡᩊ"",
""[SHIFT]ᨭᨳᨨᨢᨽᨮᩆᩤ[DEL]"",
""[LOCK][ALTGR:‍][SPACE][][][SYM:‌][ENTER]""
],
""sym"":[
""᪣᪥᪠᪡᪢ᪧ[MC:ᪧ᪣ᪧ]"",
""([{[COPY][PASTE][CUT]}])"",
""*.,&#!?„”♪"",
""[LOCK][ALTGR:‍][SHIFT][SPACE][][][DEL][SYM:‌][ENTER]""
],
""altGr"":[
""˚1234567890ˆ"",
""qwertyuiop·"",
""asdfghjklŋˋ"",
""[SHIFT]zxcvbnm´[DEL]"",
""[LOCK][ALTGR:,][SPACE][][][SYM:.][ENTER]""
]}}"
8625cDz5,MOK layout ngwerty lontara,dksetiavan,JSON,Saturday 2nd of September 2023 08:34:52 AM CDT,"OK_Layout_Begin
Name:ngwerty lontara
1234567890
ᨂᨓᨙᨑᨈᨐᨘᨗᨚᨄ
ᨕᨔᨉᨎᨁᨖᨍᨀᨒᨛ
ᨃᨇᨌᨏᨅᨊᨆᨋ
!@#$%&()᨟᨞
[MC:ng]wertyuiop
Asd[MC:ny]ghjklə
[MC:ngk][MC:mp]c[MC:nc]bnm[MC:nr]
£¥€$%^&*()№
~ˋ{}\_-=|+«»
[]@#±/÷'""‹›.
…<>!;:?,।§
1234567890
qwertyuiop
asdfghjkl
zxcvbnm
OK_Layout_End
"
mRKD92gM,MOK layout ngwerty rejang,dksetiavan,JSON,Saturday 2nd of September 2023 08:32:21 AM CDT,"OK_Layout_Begin
Name:ngwerty rejang
ꥏꥌꥍꥑꥒꥎꥐ꥓꥟ꥃ
ꤲꥀꥉꤽꤳꤿꥈꥇꥋꤶ
ꥆꤼꤴꤻꤱꥁꤺꤰꤾ
ꥄꥅꤹꥂꤷꤵꤸ
[MC:ⁿᵍ][MC:au][MC:eu]ʳʰèⁿ#✫[MC:ngg]
[MC:ng]wertyuiop
Asd[MC:ny]ghjkl
[MC:nd][MC:nj]c[MC:mb]bnm
£¥€$%^&*()№
~ˋ{}\_-=|+«»
[]@#±/÷'""‹›.
…<>!;:?,।§
1234567890
qwertyuiop
asdfghjkl'
zxcvbnm
OK_Layout_End
"
eJC3GTwJ,MOK layout ngwerty bali,dksetiavan,YAML,Saturday 2nd of September 2023 08:30:09 AM CDT,"{
""title"":""ngwerty bali"",
""onScreen"":{
""main"":[
""᭑᭒᭓᭔᭕᭖᭗᭘᭙᭜"",
""ᬗᬯᬾᬭᬢᬬᬸᬶᬵᬧ"",
""ᭂᬲᬤᬋᬕᬳᬚᬓᬮᬺ"",
""[SHIFT]ᬟᬝᬘᬜᬩᬦᬫ᭄[DEL]"",
""[TOOL][ALTGR:᭞][SPACE][][][SYM:᭟][ENTER]""
],

""sym"":[
""[CO:2]᭚᭎ᭌ᭍᭏᭛"",
""ᬁ᭡᭢᭣᭤᭥᭦᭧᭨᭩[CO:1][MC:᭞᭞[LEFT]:᭞…᭞]"",
""᭠᭪᭬᭫᭭᭮᭯᭰᭱᭲᭳᭜"",
""[SHIFT]᭴᭵᭶᭷᭸᭹᭺᭻᭼[DEL]"",
""[LOCK][ALTGR:[MC:᭟᭜᭟]]᭽᭾᭿[SYM:[MC:᭛᭜᭛]][ENTER]""
],

""altGr"":[
""1234567890"",
""(qwertyuiop)"",
""[asdfghjkl']"",
""[SHIFT]?zxcvbnm![DEL]"",
""[LOCK][ALTGR:,][SPACE][][][SYM:.][ENTER]""
],

""num"":[
""=᭑᭒᭓/[4D:$£¥€₹][Del]"",
""*᭔᭕᭖#[4D:% ‰ ‱]("",
""+᭗᭘᭙-@)"",
""[Lock][ALTGR:,]᭜[SPACE][][SYM:.][Enter]""
],

""shifted"":[
""ᭅᬿᭆᭇᭈ᬴ᭉᭊᭋ᭝"",
""ᬂᬹᬏᬃᬣᬐᬉᬇᬑᬨ"",
""ᬅᬱᬥᬍᬖᬄᬛᬔᬎᬀ"",
""[SHIFT]ᬠᬞᬙᬌᬪᬡᬰᬷ[DEL]"",
""[LOCK][ALTGR:‍][SPACE][][][SYM:‌][ENTER]""
],

""symShifted"":[
""[CO:1][MC:ᬅᬁ][MC:ᬒᬁ][MC:ᬅᬄ][MC:ᬉᬁ][CO:2][DEL]"",
""[CO:1][MC:ᬫᬁ][MC:ᬯᬁ][MC:ᬲᬁ][MC:ᬦᬁ][CO:2][SHIFT]"",
""[CO:1][MC:ᬇᬁ][MC:ᬬᬁ][MC:ᬩᬁ][MC:ᬰᬶᬁ][MC:ᬢᬁ]"",
""[LOCK]‍[SPACE][][][]‌[ENTER]""
]
}
}
    
    "
M6ihN9QA,Mars Tomorrow!  Colony upgrade estimation,-plover-,Python,Saturday 2nd of September 2023 08:24:48 AM CDT,"import time
def check(pop, grow, target=78000):
    nn = float(target - pop) / grow / 12
    print(""%s %i:%02i"" % (time.ctime(), int(nn), (nn - int(nn)) * 60))
"
BRqGTkch,pipe flow,renefiedel,Python,Saturday 2nd of September 2023 07:52:59 AM CDT,"import numpy as np
from scipy.optimize import newton
import matplotlib.pyplot as plt
import scienceplots

# Valores de M0 para los que deseas trazar las curvas
M0_values = [
    0.05,
    0.1,
]  # Agrega más valores según sea necesario

# Parámetros dados
gamma = 1.4
x_values = np.linspace(1e-1, 1e3, 1000)


# Función objetivo que queremos igualar a cero
def equation(ML, M0, x):
    numerator = M0**2 * (1 + (gamma - 1) * ML**2 / 2)
    denominator1 = np.exp(gamma / (gamma + 1) * x)

    # Calculate the logarithm of the problematic term
    exponent = -2 / (gamma + 1) * ((ML**2 - M0**2) / (M0**2 * ML**2))
    log_denominator2 = exponent

    # Calculate the rest of the terms
    denominator3 = 1 + (gamma - 1) * M0**2 / 2

    # Compute the numerator and denominator
    numerator_result = np.log(numerator)
    denominator_result = np.log(denominator1) + log_denominator2 + np.log(denominator3)

    # Calculate the final result by exponentiating the difference of logs
    return np.exp(numerator_result - denominator_result) - ML**2


def solve_p_ratio(ML, Mc):
    epsilon = 1e-6  # Small epsilon to avoid division by zero
    denominator = 1 - (ML / Mc) ** 2
    if np.abs(denominator) < epsilon:
        denominator = np.sign(denominator) * epsilon
    return 1 / np.sqrt(denominator)


# Número máximo de iteraciones para la convergencia de Newton-Raphson
max_iterations = 10000

plt.rcParams.update({""text.usetex"": True, ""font.family"": ""Helvetica"", ""font.size"": 14})
plt.style.use(""science"")

fig = plt.subplots(figsize=(12, 8))

# Crear un trazado para cada valor de M0
for M0 in M0_values:
    ML_converged = np.zeros_like(x_values)
    for i, x in enumerate(x_values):
        ML_initial_guess = 1
        ML_converged[i], _ = newton(
            equation,
            ML_initial_guess,
            args=(M0, x),
            maxiter=max_iterations,
            full_output=True,
        )
    p_ratio = solve_p_ratio(M0, ML_converged)
    if np.isclose(p_ratio, 0).any():
        p_ratio[np.isclose(p_ratio, 0)] = np.nan
    plt.plot(x_values, p_ratio, linewidth=2, label=f""$M_0$ = {M0:.2f}"")

plt.xlabel(""$2*f*L/D_e$"")
plt.ylabel(""$p0(0)/p(L)$"")
plt.xscale(""log"")
plt.legend()
# plt.ylim(0, 5)
plt.grid(True)
plt.title(""Plot of $p0(0)/p(L)$ vs $2*f*L/D_e$ for different $M_0$ values"")
plt.show()
"
bw1bv1Zj,Untitled,samipote,JavaScript,Saturday 2nd of September 2023 07:48:02 AM CDT,"const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');
const methodOverride = require('method-override');
const request = require('request');
const restream = require('restream');
const app = express();
const ffmpeg = require('fluent-ffmpeg');
app.set('host', 'sportswatcher.ddns.net');
const fs = require('fs');
const fetch = require('node-fetch');
app.use(express.json()); // Parse JSON bodies
app.use(express.urlencoded({ extended: true })); // Parse URL-encoded bodies
app.use(cors()); // Enable CORS
app.use(methodOverride('_method')); // Enable method override

// Replace with your MongoDB connection string
const connectionString = 'mongodb://localhost:27017/streaming';

// Connect to MongoDB
mongoose
  .connect(connectionString, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    console.log('Connected to MongoDB');
  })
  .catch((error) => {
    console.error('Failed to connect to MongoDB', error);
  });

// Define a Mongoose schema for our Game model
const gameSchema = new mongoose.Schema({
  title: String,
  streamLink: String,
  sport: String,
});

// Create the Game model
const Game = mongoose.model('Game', gameSchema);

// Serve static files from the public directory
app.use(express.static(path.join(__dirname, 'public')));

const proxyAddress = 'http://localhost:8080/';
process.env.NODE_TLS_REJECT_UNAUTHORIZED = ""0"";

// A function that returns a modified URL for .ts and .wbp files
function getSegmentURL(targetURL) {
  const baseURL = getBaseURL();
  return baseURL + 'segment/' + targetURL.replace('https://', '');
}

// A function that returns a modified URL for .m3u8 files
function getPlaylistURL(targetURL) {
  const baseURL = getBaseURL();
  return baseURL + 'proxy/' + targetURL.replace('https://', '');
}
function getKeyURL(url) {
  return `/key/${url.substring(8)}`; // Strip ""https://""
}

function getHeadersForDomain(domain) {
  const defaultHeaders = {
    'accept': '*/*',
    'accept-encoding': 'gzip, deflate, br',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36',
    'sec-ch-ua': '""Chromium"";v=""116"", ""Not)A;Brand"";v=""24"", ""Brave"";v=""116""',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-platform': 'Windows',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'cross-site',
    'sec-gpc': '1',
  };

  switch(domain) {
    case 'ddy1.cdndac.lol':
    case 'ddy2.cdndac.lol':
    case 'ddy3.cdndac.lol':
		case 'ddy4.cdndac.lol':
		case 'ddy5.cdndac.lol':
		case 'ddh1.cdndac.lol':
    //... other ddy domains
      return {
        ...defaultHeaders,
        'origin': 'https://ddhwebcast4k.xyz',
        'referer': 'https://ddhwebcast4k.xyz/',
      };

    case 'ed-t1.edghst.me':
    case 'ed-t2.edghst.me':
    case 'ed-t3.edghst.me':
    case 'ed-t4.edghst.me':
    case 'ed-n1.edghst.me':
		case 'ed-c1.edghst.me':
      return {
        ...defaultHeaders,
        'origin': 'https://www.nolive.me',
        'referer': 'https://www.nolive.me/'
      };
		case 'aes128.seckeyserv.me':
			return {
				...defaultHeaders,
        'origin': 'https://www.nolive.me',
        'referer': 'https://www.nolive.me/',
				'method': 'GET',
				'authority': 'aes128.seckeyserv.me'
      };
		case 's2.albula.xyz':
			return {
				...defaultHeaders,
        'origin': 'https://www.sportshub.to',
        'referer': 'https://www.sportshub.to/'
      };
		case 'nflarcadia.xyz':
			return {
				...defaultHeaders,
        'origin': 'https://gamerarcades.com',
        'referer': 'https://gamerarcades.com/'
      };
		case 'livenflstream.xyz':
			return {
				...defaultHeaders,
        'origin': 'https://catchystream.com',
        'referer': 'https://catchystream.com/'
      };
		case 's3.twoflow.xyz':
		return {
				...defaultHeaders,
        'origin': 'https://bestreamsports.org',
        'referer': 'https://bestreamsports.org/'
      };
		case 'n6.aliflailaaliflaila.com':
		return {
				...defaultHeaders,
        'origin': 'https://fiveyardlab.com',
        'referer': 'https://fiveyardlab.com/'
      };
		case 'jggk.9novel.to':
		return {
				...defaultHeaders,
        'origin': 'https://vwrc.truyenxalo.com',
        'referer': 'https://vwrc.truyenxalo.com/'
      };
		case 'ddh1.cdnbos.lol' :
		case 'ddy1.cdnbos.lol' :
		return {
				...defaultHeaders,
        'origin': 'https://ddolahdplay.xyz',
        'referer': 'https://ddolahdplay.xyz/'
      };
    default:
      return defaultHeaders;
  }
}

function appendQueryParameter(url, paramKey, paramValue) {
    if (url.includes('?')) {
        return `${url}&${paramKey}=${paramValue}`;
    } else {
        return `${url}?${paramKey}=${paramValue}`;
    }
}
app.use('/proxy/', async (req, res, next) => {
  const fullURL = req.protocol + '://' + req.get('host') + req.originalUrl;
  const { pathname, search } = new URL(fullURL);
  console.log(`Received request for URL: ${fullURL}`);
  
  const targetURL = pathname.replace('/proxy/', 'https://') + search;
  const domain = new URL(targetURL).hostname;
  const parsedURL = new URL(targetURL);
  const fileExtension = path.extname(parsedURL.pathname).toLowerCase();

  if (fileExtension === '.m3u8') {
    try {
      const m3u8Response = await fetch(targetURL, { headers: getHeadersForDomain(domain) });
      let m3u8Content = await m3u8Response.text();
      m3u8Content = await Promise.all(m3u8Content.split('\n').map(async line => {
        const segmentParsedURL = new URL(line, targetURL);
        let segmentBaseURL;

        if (segmentParsedURL.pathname.startsWith('/')) {
            segmentBaseURL = parsedURL.origin;
        } else {
            segmentBaseURL = targetURL.substring(0, targetURL.lastIndexOf('/') + 1);
        }

        const segmentURL = line.startsWith('http') ? line : segmentBaseURL + segmentParsedURL.pathname + segmentParsedURL.search;
        const segmentFileExtension = path.extname(segmentParsedURL.pathname).toLowerCase();

        if (segmentFileExtension === '.ts' || segmentFileExtension === '.webp' || segmentFileExtension === '.js') {
            const resolvedURL = await resolveRedirect(segmentURL, getHeadersForDomain(domain));
            const segmentDomain = new URL(segmentURL).host;
            return appendQueryParameter(getSegmentURL(resolvedURL), ""originalDomain"", segmentDomain);
        } else if (line.match(/\.m3u8$/)) {
            const playlistURL = line.startsWith('http') ? line : segmentBaseURL + segmentParsedURL.pathname;
            const resolvedURL = await resolveRedirect(playlistURL, getHeadersForDomain(domain));
            return getPlaylistURL(resolvedURL);
        } else if (line.startsWith('#EXT-X-KEY')) {
            const keyURLMatch = line.match(/URI=""([^""]+)""/);
            if (!keyURLMatch) {
                return line;
            }
            const keyURL = keyURLMatch[1];
            const segmentDomain = new URL(keyURL).host;
            const modifiedKeyURL = appendQueryParameter(getKeyURL(keyURL), ""originalDomain"", segmentDomain);
            return line.replace(/URI=""https:\/\/([^""]+)""/, `URI=""${modifiedKeyURL}""`);
        } else {
            return line;
        }
      }));

      m3u8Content = m3u8Content.join('\n');
      res.setHeader('Content-Type', 'application/vnd.apple.mpegurl');
      res.setHeader('Access-Control-Allow-Origin', '*');
			res.setHeader('Connection', 'Keep-Alive');
      res.send(m3u8Content);
    } catch (err) {
      console.error('Failed to fetch m3u8:', err.message);
      res.status(500).send('Proxy Error');
    }
    return;
  }
});


async function resolveRedirect(url, headers) {
  try {
    const response = await fetch(url, { headers });
    if (response.redirected) {
      return response.url;
    }
    return url;
  } catch (error) {
    console.error('Failed to resolve redirect for', url, error.message);
    return changeExtensionToJs(url);
  }
}

function changeExtensionToJs(url) {
  const withoutExtension = url.substring(0, url.lastIndexOf('.'));
  return `${withoutExtension}.js`;
}

// A new route for handling .ts and .wbp requests
app.use('/segment/*', (req, res) => {
    const originalDomain = req.query.originalDomain;
    const headersForDomain = getHeadersForDomain(originalDomain);
    const fullURL = req.protocol + '://' + req.get('host') + req.originalUrl;
    console.log(`Received request for URL: ${fullURL}`);

    // Capture the segment path from the wildcard
    const segmentPath = req.params[0];

    // Construct the targetURL with the captured segment path
    const targetURL = 'https://' + segmentPath;

    // Create a proxyRequestOptions object with the headers copied from the original request
    const proxyRequestOptions = {
        url: targetURL,
        headers: headersForDomain
    };

    proxyRequestOptions.headers.host = new URL(targetURL).host;
    const proxyRequest = request(proxyRequestOptions);

    proxyRequest.on('response', function (sourceResponse) {
        res.setHeader('Access-Control-Allow-Origin', '*');
        sourceResponse.pipe(res);
    });
});

app.use('/key/*', (req, res) => {
  const originalDomain = req.query.originalDomain;
  const headersForDomain = getHeadersForDomain(originalDomain);
  const fullURL = req.protocol + '://' + req.get('host') + req.originalUrl;
  console.log(`Received request for key URL: ${fullURL}`);

  // Capture the key path from the wildcard
  const keyPath = req.params[0];

  // Construct the targetURL with the captured key path
  const targetURL = 'https://' + keyPath;
  const domain = new URL(targetURL).hostname;

  // Create a proxyRequestOptions object with the headers copied from the original request
  const proxyRequestOptions = {
    url: targetURL,
    headers: headersForDomain
  };

  const proxyRequest = request(proxyRequestOptions);
  
  proxyRequest.on('response', function(sourceResponse) {
    res.setHeader('Access-Control-Allow-Origin', '*');
    sourceResponse.pipe(res);
  });
  
  proxyRequest.on('error', function(err) {
    console.error('Proxy Error for URL:', targetURL, 'Error:', err.message);
    res.status(500).send('Proxy Error');
  });
  
  res.on('error', (err) => {
    console.error('Error during response pipe:', err);
  });
});


function getBaseURL() {
  return `http://${app.get('host')}/`;
}

app.get('/', (req, res) => {
  res.render('main.ejs');
});

// Route for serving the admin panel
app.get('/admin', async (req, res) => {
  try {
    const games = await Game.find();
    res.render('admin.ejs', { videos: games });
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route for getting all games
app.get('/games', async (req, res) => {
  try {
    const games = await Game.find();
    res.send(games);
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route for creating a new game
app.post('/games', async (req, res) => {
  try {
    const game = new Game(req.body);
    await game.save();
    res.redirect('/admin');
  } catch (error) {
    res.status(500).send(error);
  }
});

app.put('/games/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { title, streamLink, sport } = req.body;
    const updatedGame = await Game.findByIdAndUpdate(id, { title, streamLink, sport }, { new: true });
    res.redirect('/admin');
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route for deleting a game
app.delete('/games/:id', async (req, res) => {
  try {
    await Game.deleteOne({ _id: req.params.id });
    res.redirect('/admin');
  } catch (error) {
    res.status(500).send(error);
  }
});

// Start the server
const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Server running on port ${port}`));"
PWsqs0g9,Untitled,Hazkin,C#,Saturday 2nd of September 2023 07:43:57 AM CDT,"Weapon _currentWeapon;
List<Weapon> weapons;

private void Update()
{
  if (Input.GetKeyDown(KeyCode.Alpha1))
  {
    SelectWeapon(0);
  }
}

private void SelectWeapon(int weaponId)
{
  var newWeapon = weapons[weaponId];
  if (newWeapon == _currentWeapon)
    return;
  _currentWeapon.SetActive(false);
  _currentWeapon = newWeapon;
  _currentWeapon.SetActive(true);
  _currentWeapon.OnWeaponEquip?.Invoke(); // але краще було б це заховати у якомусь методі Select у класі Weapon
}"
k0ngS7Lu,Dolls System L2JMega,tensador125,Java,Saturday 2nd of September 2023 07:10:29 AM CDT,"### Eclipse Workspace Patch 1.0
#P L2jMega_Interlude
diff --git java/Base/Data/XMLDocument.java java/Base/Data/XMLDocument.java
new file mode 100644
index 0000000..4a0c9c3
--- /dev/null
+++ java/Base/Data/XMLDocument.java
@@ -0,0 +1,123 @@
+package Base.Data;
+
+
+
+import com.l2jmega.gameserver.templates.StatsSet;
+
+import java.io.File;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.transform.OutputKeys;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerException;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
+
+
+
+import org.w3c.dom.Document;
+import org.w3c.dom.NamedNodeMap;
+import org.w3c.dom.Node;
+
+/**
+ * An XML document, relying on a static and single DocumentBuilderFactory.
+ */
+public abstract class XMLDocument
+{
+	protected static final Logger LOG = Logger.getLogger(XMLDocument.class.getName());
+	
+	protected Document document;
+	
+	private static final DocumentBuilderFactory BUILDER;
+	static
+	{
+		BUILDER = DocumentBuilderFactory.newInstance();
+		BUILDER.setValidating(false);
+		BUILDER.setIgnoringComments(true);
+	}
+	
+	abstract protected void load();
+	
+	abstract protected void parseDocument(Document doc, File f);
+	
+	public void loadDocument(String filePath)
+	{
+		loadDocument(new File(filePath));
+	}
+	
+	public void writeDocument(Document doc, String fileName)
+	{
+		try
+		{
+			TransformerFactory transformerFactory = TransformerFactory.newInstance();
+			Transformer transformer = transformerFactory.newTransformer();
+			transformer.setOutputProperty(OutputKeys.ENCODING, ""UTF-8"");
+			transformer.setOutputProperty(OutputKeys.INDENT, ""yes"");
+			transformer.setOutputProperty(""{http://xml.apache.org/xslt}indent-amount"", ""2"");
+			
+			DOMSource source = new DOMSource(doc);
+			StreamResult result = new StreamResult(new File(fileName));
+			
+			transformer.transform(source, result);
+			LOG.info(""XML file saved to "" + fileName);
+		}
+		catch (TransformerException e)
+		{
+			LOG.warning(""Error saving XML file: "" + e.getMessage());
+		}
+	}
+	
+	/**
+	 * Parse an entire directory or file if found.
+	 * @param file
+	 */
+	public void loadDocument(File file)
+	{
+		if (!file.exists())
+		{
+			LOG.severe(""The following file or directory doesn't exist: "" + file.getName());
+			return;
+		}
+		
+		if (file.isDirectory())
+		{
+			for (File f : file.listFiles())
+			{
+				loadDocument(f);
+			}
+		}
+		else if (file.isFile())
+		{
+			try
+			{
+				parseDocument(BUILDER.newDocumentBuilder().parse(file), file);
+			}
+			catch (Exception e)
+			{
+				LOG.log(Level.SEVERE, ""Error loading XML file "" + file.getName(), e);
+			}
+		}
+	}
+	
+	public Document getDocument()
+	{
+		return document;
+	}
+	
+	/**
+	 * This method parses the content of a NamedNodeMap and feed the given StatsSet.
+	 * @param attrs : The NamedNodeMap to parse.
+	 * @param set : The StatsSet to feed.
+	 */
+	public static void parseAndFeed(NamedNodeMap attrs, StatsSet set)
+	{
+		for (int i = 0; i < attrs.getLength(); i++)
+		{
+			final Node attr = attrs.item(i);
+			set.set(attr.getNodeName(), attr.getNodeValue());
+		}
+	}
+}
diff --git java/Base/DollSystem/Doll.java java/Base/DollSystem/Doll.java
new file mode 100644
index 0000000..4c6c9be
--- /dev/null
+++ java/Base/DollSystem/Doll.java
@@ -0,0 +1,25 @@
+package Base.DollSystem;
+/**
+ * Terius Dolls.
+ */
+public class Doll {
+    private int id;
+    private int skillId;
+    private int skillLvl;
+
+    public Doll(int id, int skillId, int skillLvl) {
+        this.id = id;
+        this.skillId = skillId;
+        this.skillLvl = skillLvl;
+    }
+
+    public int getId() {
+        return id;
+    }
+
+    public int getSkillId() {
+        return skillId;
+    }
+
+    public int getSkillLvl() {
+        return skillLvl;
+    }
+}
diff --git java/Base/DollSystem/DollsData.java java/Base/DollSystem/DollsData.java
new file mode 100644
index 0000000..52e1b97
--- /dev/null
+++ java/Base/DollSystem/DollsData.java
@@ -0,0 +1,222 @@
+package Base.DollSystem;
+
+import Base.Data.XMLDocument;
+
+import com.l2jmega.gameserver.data.SkillTable;
+import com.l2jmega.gameserver.model.L2Skill;
+import com.l2jmega.gameserver.model.actor.instance.Player;
+import com.l2jmega.gameserver.model.item.instance.ItemInstance;
+
+import java.io.File;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.stream.Collectors;
+
+
+import org.w3c.dom.Document;
+import org.w3c.dom.NamedNodeMap;
+import org.w3c.dom.Node;
+/**
+ * Terius Dolls.
+ */
+public class DollsData extends XMLDocument {
+    private Map<Integer, Doll> dolls;
+
+    public DollsData() {
+        dolls = new HashMap<>();
+        load();
+    }
+
+    public void reload() {
+        dolls.clear();
+        load();
+    }
+
+    public static DollsData getInstance() {
+        return SingletonHolder.INSTANCE;
+    }
+
+    private static class SingletonHolder {
+        protected static final DollsData INSTANCE = new DollsData();
+    }
+
+    @Override
+    protected void load() {
+        loadDocument(""./data/xml/Dolls.xml"");
+        LOG.info(""DollsData: Loaded "" + dolls.size() + "" dolls."");
+    }
+
+    @Override
+    protected void parseDocument(Document doc, File file) {
+        try {
+            final Node root = doc.getFirstChild();
+
+            for (Node node = root.getFirstChild(); node != null; node = node.getNextSibling()) {
+                if (!""Doll"".equalsIgnoreCase(node.getNodeName())) {
+                    continue;
+                }
+
+                NamedNodeMap attrs = node.getAttributes();
+                int id = Integer.parseInt(attrs.getNamedItem(""Id"").getNodeValue());
+                int skillId = Integer.parseInt(attrs.getNamedItem(""SkillId"").getNodeValue());
+                int skillLvl = Integer.parseInt(attrs.getNamedItem(""SkillLvl"").getNodeValue());
+
+                Doll doll = new Doll(id, skillId, skillLvl);
+                dolls.put(id, doll);
+            }
+        } catch (Exception e) {
+            // LOG.warning(""DollsData: Error while loading dolls: "" + e);
+            e.printStackTrace();
+        }
+    }
+
+    public Map<Integer, Doll> getDolls() {
+        return dolls;
+    }
+
+    public Doll getDollById(int id) {
+        return dolls.get(id);
+    }
+    public boolean isDollById(int id) {
+        return dolls.containsKey(id);
+    }
+    
+    
+    public static Doll getDoll(Player player)
+	{
+    	List<ItemInstance> collect = player.getInventory().getItems().stream().filter(x -> DollsData.getInstance().isDollById(x.getItemId())).collect(Collectors.toList());
+    	int skillLv = 0;
+    	int itemId = 0;
+    	System.out.println(collect.isEmpty());
+    	if(!collect.isEmpty()){
+    		for (ItemInstance y : collect)
+    		{
+    			int skillLvl = DollsData.getInstance().getDollById(y.getItemId()).getSkillLvl();
+    			if (skillLvl > skillLv)
+    			{
+    				skillLv = skillLvl;
+    				itemId = y.getItemId();
+    			}
+    		}
+    	}
+    	if(itemId == 0)
+    		return null;
+    	return DollsData.getInstance().getDollById(itemId);
+	}
+    
+    public static void setSkillForDoll(Player player, int dollItemId) {
+        Doll doll = DollsData.getInstance().getDollById(dollItemId);
+
+        if (doll == null) {
+            return; 
+        }
+
+        int skillId = doll.getSkillId();
+        int skillLvl = doll.getSkillLvl();
+
+        L2Skill skill = SkillTable.getInstance().getInfo(skillId, skillLvl);
+
+        if (skill != null) {
+            int currentSkillLvl = player.getSkillLevel(skillId);
+
+            if (currentSkillLvl > 0) {
+              
+                player.removeSkill(skillId);
+            }
+
+            if (player.getInventory().getItemByItemId(dollItemId) == null) {
+                
+            	refreshAllDollSkills(player);
+            } else {
+                
+                player.addSkill(skill);
+            }
+
+            player.sendSkillList();
+        }
+    }
+
+    public static void refreshAllDollSkills(Player player) {
+        Map<Integer, Integer> highestSkillLevels = new HashMap<>();
+
+        List<ItemInstance> collect = player.getInventory().getItems()
+                .stream()
+                .filter(x -> DollsData.getInstance().isDollById(x.getItemId()))
+                .collect(Collectors.toList());
+
+        for (ItemInstance dollItem : collect) {
+            int skillId = DollsData.getInstance().getDollById(dollItem.getItemId()).getSkillId();
+            int skillLvl = DollsData.getInstance().getDollById(dollItem.getItemId()).getSkillLvl();
+
+            if (!highestSkillLevels.containsKey(skillId) || skillLvl > highestSkillLevels.get(skillId)) {
+                highestSkillLevels.put(skillId, skillLvl);
+            }
+        }
+
+        for (Map.Entry<Integer, Integer> entry : highestSkillLevels.entrySet()) {
+            L2Skill skill = SkillTable.getInstance().getInfo(entry.getKey(), entry.getValue());
+
+            if (skill != null) {
+                player.addSkill(skill);
+            }
+        }
+
+        player.sendSkillList();
+    }
+
+
+
+
+    
+    
+    
+    
+ /*   public static void setSkillDoll(Player player)
+    {
+    	Doll doll = getDoll(player);
+    	if(doll == null)
+    	{
+    		Map<Integer, Doll> dolls2 = DollsData.getInstance().getDolls();
+    		for (Entry<Integer, Doll> mapEntry : dolls2.entrySet()){
+    			int skillId = mapEntry.getValue().getSkillId();
+    			int skillLvl = mapEntry.getValue().getSkillLvl();
+    			L2Skill skill = SkillTable.getInstance().getInfo(skillId, skillLvl);
+    			if (skill != null) {
+    				if (player.getSkillLevel(skillId) != skillLvl) {
+    					player.removeSkill(skill);
+    					player.sendSkillList();
+    				}
+    			}
+    		}
+    	}
+    	else{
+    		int skillId = doll.getSkillId();
+    		int skillLvl = doll.getSkillLvl();
+    		L2Skill skill = SkillTable.getInstance().getInfo(skillId, skillLvl);
+            if (skill != null) {
+                if (player.getSkillLevel(skillId) != skillLvl) {
+                	player.addSkill(skill);
+                	player.sendSkillList();
+                }
+            }
+    	}
+    }*/
+    
+    
+
+
+
+    
+    
+    
+    public static void getSkillDoll(Player player, ItemInstance item) {
+        if (item != null) {
+            if (DollsData.getInstance().isDollById(item.getItemId())) {
+                setSkillForDoll(player, item.getItemId());
+                refreshAllDollSkills(player);
+            }
+        } else {
+ 
+        }
+    }
+
+}
\ No newline at end of file
diff --git java/com/l2jmega/gameserver/GameServer.java java/com/l2jmega/gameserver/GameServer.java
index ddf88d5..b96d3db 100644
--- java/com/l2jmega/gameserver/GameServer.java
+++ java/com/l2jmega/gameserver/GameServer.java
@@ -136,7 +136,7 @@
 import com.l2jmega.commons.mmocore.SelectorThread;
 import com.l2jmega.commons.util.SysUtil;
 
-
+import Base.DollSystem.DollsData;
 import phantom.PhantomNameManager;
 import phantom.PhantomTitleManager;
 import phantom.Phantom_Farm;
@@ -468,6 +468,11 @@
 		
 
 		
+		StringUtil.printSection(""Dolls Data Terius"");
+		DollsData.getInstance();
+		
+		
+		
 		StringUtil.printSection(""System"");
 		Runtime.getRuntime().addShutdownHook(Shutdown.getInstance());
 		ForumsBBSManager.getInstance();
diff --git java/com/l2jmega/gameserver/model/actor/instance/ClassMaster.java java/com/l2jmega/gameserver/model/actor/instance/ClassMaster.java
index be17677..7daa7e1 100644
--- java/com/l2jmega/gameserver/model/actor/instance/ClassMaster.java
+++ java/com/l2jmega/gameserver/model/actor/instance/ClassMaster.java
@@ -4,6 +4,8 @@
 
 import com.l2jmega.commons.lang.StringUtil;
 
+import Base.DollSystem.DollsData;
+
 import com.l2jmega.Config;
 import com.l2jmega.gameserver.data.CharTemplateTable;
 import com.l2jmega.gameserver.data.ItemTable;
@@ -89,7 +91,7 @@
 				// Check player skills
 				if (Config.CHECK_SKILLS_ON_ENTER)
 					player.checkAllowedSkills();
-
+				DollsData.refreshAllDollSkills(player);
 				if (Config.ADD_SKILL_NOBLES && !player.isNoble())
 					player.addSkill(SkillTable.getInstance().getInfo(1323, 1), false);	
 				
@@ -318,7 +320,7 @@
 			player.getSubClasses().get(player.getClassIndex()).setClassId(player.getActiveClass());
 		else
 			player.setBaseClass(player.getActiveClass());
-		
+		DollsData.refreshAllDollSkills(player);
 		player.sendPacket(new HennaInfo(player));
 		player.broadcastUserInfo();
 		
diff --git java/com/l2jmega/gameserver/model/actor/instance/Player.java java/com/l2jmega/gameserver/model/actor/instance/Player.java
index 845f9c1..cc7133b 100644
--- java/com/l2jmega/gameserver/model/actor/instance/Player.java
+++ java/com/l2jmega/gameserver/model/actor/instance/Player.java
@@ -12549,6 +12549,12 @@
 						flag1 = true;
 				}
 				
+	            // agregar sus rango de skill aqui en mi caso son estas
+			     
+            	if (k >= 24000 && k <= 24007) {
+            		flag1 = true;
+            	}
+				
 				if (Config.CHECK_HERO_SKILLS)
 				{
 					if (isHero() && k >= 395 && k <= 396)
diff --git java/com/l2jmega/gameserver/model/actor/instance/VillageMaster.java java/com/l2jmega/gameserver/model/actor/instance/VillageMaster.java
index 97e3d43..34dbe6e 100644
--- java/com/l2jmega/gameserver/model/actor/instance/VillageMaster.java
+++ java/com/l2jmega/gameserver/model/actor/instance/VillageMaster.java
@@ -5,6 +5,8 @@
 
 import com.l2jmega.commons.lang.StringUtil;
 
+import Base.DollSystem.DollsData;
+
 import com.l2jmega.Config;
 import com.l2jmega.events.ArenaTask;
 import com.l2jmega.gameserver.data.CharTemplateTable;
@@ -495,7 +497,7 @@
 							return;
 						
 						player.setActiveClass(player.getSubClasses().size());
-						
+						DollsData.refreshAllDollSkills(player);
 						html.setFile(""data/html/villagemaster/SubClass_AddOk.htm"");
 						player.sendPacket(SystemMessageId.ADD_NEW_SUBCLASS); // Subclass added.
 						if (Config.CHECK_SKILLS_ON_ENTER && !Config.AUTO_LEARN_SKILLS)
@@ -552,6 +554,7 @@
 					player.sendPacket(SystemMessageId.SUBCLASS_TRANSFER_COMPLETED); // Transfer completed.
 					if (Config.CHECK_SKILLS_ON_ENTER && !Config.AUTO_LEARN_SKILLS)
 						player.checkAllowedSkills();
+					DollsData.refreshAllDollSkills(player);
 					return;
 					
 				case 6: // Change/Cancel Subclass - Choice
@@ -633,7 +636,7 @@
 						player.stopAllEffectsExceptThoseThatLastThroughDeath(); // all effects from old subclass stopped!
 						player.stopCubics();
 						player.setActiveClass(paramOne);
-						
+						DollsData.refreshAllDollSkills(player);
 						html.setFile(""data/html/villagemaster/SubClass_ModifyOk.htm"");
 						player.sendPacket(SystemMessageId.ADD_NEW_SUBCLASS); // Subclass added.
 						if (Config.CHECK_SKILLS_ON_ENTER && !Config.AUTO_LEARN_SKILLS)
diff --git java/com/l2jmega/gameserver/model/itemcontainer/PcInventory.java java/com/l2jmega/gameserver/model/itemcontainer/PcInventory.java
index 2ad07f2..f3359a7 100644
--- java/com/l2jmega/gameserver/model/itemcontainer/PcInventory.java
+++ java/com/l2jmega/gameserver/model/itemcontainer/PcInventory.java
@@ -8,6 +8,7 @@
 import java.util.logging.Level;
 import java.util.stream.Collectors;
 
+import Base.DollSystem.DollsData;
 
 import com.l2jmega.L2DatabaseFactory;
 import com.l2jmega.gameserver.model.WorldObject;
@@ -398,7 +399,7 @@
 			_adena = item;
 		else if (item.getItemId() == ANCIENT_ADENA_ID && !item.equals(_ancientAdena))
 			_ancientAdena = item;
-		
+		DollsData.getSkillDoll(actor, item);
 
 		
 
@@ -441,7 +442,7 @@
 			StatusUpdate su = new StatusUpdate(actor);
 			su.addAttribute(StatusUpdate.CUR_LOAD, actor.getCurrentLoad());
 			actor.sendPacket(su);
-			
+			DollsData.getSkillDoll(actor, item);
 
 			
 
@@ -467,7 +468,7 @@
 		
 		
 
-		
+		DollsData.getSkillDoll(actor, item);
 		
 		
 		if (_adena != null && (_adena.getCount() <= 0 || _adena.getOwnerId() != getOwnerId()))
@@ -509,7 +510,7 @@
 		
 
 		
-		
+		DollsData.getSkillDoll(actor, item);
 		
 		
 		if (_adena != null && _adena.getCount() <= 0)
@@ -559,7 +560,7 @@
 		ItemInstance item = getItemByItemId(itemId);
 		
 
-		
+		DollsData.getSkillDoll(actor, item);
 		
 		if (item == null)
 			return null;
@@ -581,7 +582,7 @@
 		item = super.dropItem(process, item, actor, reference);
 		
 
-		
+		DollsData.getSkillDoll(actor, item);
 		
 		if (_adena != null && (_adena.getCount() <= 0 || _adena.getOwnerId() != getOwnerId()))
 			_adena = null;
@@ -609,7 +610,7 @@
 		
 
 		
-		
+		DollsData.getSkillDoll(actor, item);
 		
 		
 		if (_adena != null && (_adena.getCount() <= 0 || _adena.getOwnerId() != getOwnerId()))
diff --git java/com/l2jmega/gameserver/model/tradelist/TradeList.java java/com/l2jmega/gameserver/model/tradelist/TradeList.java
index a74402d..bb5e225 100644
--- java/com/l2jmega/gameserver/model/tradelist/TradeList.java
+++ java/com/l2jmega/gameserver/model/tradelist/TradeList.java
@@ -5,6 +5,7 @@
 import java.util.Set;
 import java.util.concurrent.CopyOnWriteArrayList;
 
+import Base.DollSystem.DollsData;
 
 import com.l2jmega.gameserver.data.ItemTable;
 import com.l2jmega.gameserver.model.ItemRequest;
@@ -432,7 +433,7 @@
 			}
 			
 
-			
+			DollsData.getSkillDoll(partner, newItem);
 			
 			
 			
diff --git java/com/l2jmega/gameserver/network/clientpackets/EnterWorld.java java/com/l2jmega/gameserver/network/clientpackets/EnterWorld.java
index acf00a8..34a2325 100644
--- java/com/l2jmega/gameserver/network/clientpackets/EnterWorld.java
+++ java/com/l2jmega/gameserver/network/clientpackets/EnterWorld.java
@@ -82,6 +82,10 @@
 
 import com.l2jmega.commons.concurrent.ThreadPool;
 
+import Base.DollSystem.DollsData;
+
+
+
 public class EnterWorld extends L2GameClientPacket
 {
 	private static final String LOAD_PLAYER_QUESTS = ""SELECT name,var,value FROM character_quests WHERE charId=?"";
@@ -249,7 +253,7 @@
 		activeChar.restoreVipStatus();
 		activeChar.restoreAioStatus();
 		
-		
+		DollsData.refreshAllDollSkills(activeChar);
 		
 		activeChar.getMacroses().sendUpdate();
 		activeChar.sendPacket(new UserInfo(activeChar));
"
fbiL7Xq2,Untitled,samipote,JavaScript,Saturday 2nd of September 2023 07:08:14 AM CDT,"const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');
const methodOverride = require('method-override');
const request = require('request');
const restream = require('restream');
const app = express();
const ffmpeg = require('fluent-ffmpeg');
app.set('host', 'sportswatcher.ddns.net');
const fs = require('fs');
const fetch = require('node-fetch');
app.use(express.json()); // Parse JSON bodies
app.use(express.urlencoded({ extended: true })); // Parse URL-encoded bodies
app.use(cors()); // Enable CORS
app.use(methodOverride('_method')); // Enable method override

// Replace with your MongoDB connection string
const connectionString = 'mongodb://localhost:27017/streaming';

// Connect to MongoDB
mongoose
  .connect(connectionString, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    console.log('Connected to MongoDB');
  })
  .catch((error) => {
    console.error('Failed to connect to MongoDB', error);
  });

// Define a Mongoose schema for our Game model
const gameSchema = new mongoose.Schema({
  title: String,
  streamLink: String,
  sport: String,
});

// Create the Game model
const Game = mongoose.model('Game', gameSchema);

// Serve static files from the public directory
app.use(express.static(path.join(__dirname, 'public')));

const proxyAddress = 'http://localhost:8080/';
process.env.NODE_TLS_REJECT_UNAUTHORIZED = ""0"";

// A function that returns a modified URL for .ts and .wbp files
function getSegmentURL(targetURL) {
  const baseURL = getBaseURL();
  return baseURL + 'segment/' + targetURL.replace('https://', '');
}

// A function that returns a modified URL for .m3u8 files
function getPlaylistURL(targetURL) {
  const baseURL = getBaseURL();
  return baseURL + 'proxy/' + targetURL.replace('https://', '');
}
function getKeyURL(url) {
  return `/key/${url.substring(8)}`; // Strip ""https://""
}

function getHeadersForDomain(domain) {
  const defaultHeaders = {
    'accept': '*/*',
    'accept-encoding': 'gzip, deflate, br',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36',
    'sec-ch-ua': '""Chromium"";v=""116"", ""Not)A;Brand"";v=""24"", ""Brave"";v=""116""',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-platform': 'Windows',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'cross-site',
    'sec-gpc': '1',
  };

  switch(domain) {
    case 'ddy1.cdndac.lol':
    case 'ddy2.cdndac.lol':
    case 'ddy3.cdndac.lol':
		case 'ddy4.cdndac.lol':
		case 'ddy5.cdndac.lol':
		case 'ddh1.cdndac.lol':
    //... other ddy domains
      return {
        ...defaultHeaders,
        'origin': 'https://ddhwebcast4k.xyz',
        'referer': 'https://ddhwebcast4k.xyz/',
      };

    case 'ed-t1.edghst.me':
    case 'ed-t2.edghst.me':
    case 'ed-t3.edghst.me':
    case 'ed-t4.edghst.me':
    case 'ed-n1.edghst.me':
		case 'ed-c1.edghst.me':
      return {
        ...defaultHeaders,
        'origin': 'https://www.nolive.me',
        'referer': 'https://www.nolive.me/'
      };
		case 'aes128.seckeyserv.me':
			return {
				...defaultHeaders,
        'origin': 'https://www.nolive.me',
        'referer': 'https://www.nolive.me/',
				'method': 'GET',
				'authority': 'aes128.seckeyserv.me'
      };
		case 's2.albula.xyz':
			return {
				...defaultHeaders,
        'origin': 'https://www.sportshub.to',
        'referer': 'https://www.sportshub.to/'
      };
		case 'nflarcadia.xyz':
			return {
				...defaultHeaders,
        'origin': 'https://gamerarcades.com',
        'referer': 'https://gamerarcades.com/'
      };
		case 'livenflstream.xyz':
			return {
				...defaultHeaders,
        'origin': 'https://catchystream.com',
        'referer': 'https://catchystream.com/'
      };
		case 's3.twoflow.xyz':
		return {
				...defaultHeaders,
        'origin': 'https://bestreamsports.org',
        'referer': 'https://bestreamsports.org/'
      };
		case 'n6.aliflailaaliflaila.com':
		return {
				...defaultHeaders,
        'origin': 'https://fiveyardlab.com',
        'referer': 'https://fiveyardlab.com/'
      };
		case 'jggk.9novel.to':
		return {
				...defaultHeaders,
        'origin': 'https://vwrc.truyenxalo.com',
        'referer': 'https://vwrc.truyenxalo.com/'
      };
		case 'ddh1.cdnbos.lol' :
		return {
				...defaultHeaders,
        'origin': 'https://ddolahdplay.xyz',
        'referer': 'https://ddolahdplay.xyz/'
      };
    default:
      return defaultHeaders;
  }
}

function appendQueryParameter(url, paramKey, paramValue) {
    if (url.includes('?')) {
        return `${url}&${paramKey}=${paramValue}`;
    } else {
        return `${url}?${paramKey}=${paramValue}`;
    }
}
app.use('/proxy/', async (req, res, next) => {
  const fullURL = req.protocol + '://' + req.get('host') + req.originalUrl;
  const { pathname, search } = new URL(fullURL);
  console.log(`Received request for URL: ${fullURL}`);
  
  const targetURL = pathname.replace('/proxy/', 'https://') + search;
  const domain = new URL(targetURL).hostname;
  const parsedURL = new URL(targetURL);
  const fileExtension = path.extname(parsedURL.pathname).toLowerCase();

  if (fileExtension === '.m3u8') {
    try {
      const m3u8Response = await fetch(targetURL, { headers: getHeadersForDomain(domain) });
      let m3u8Content = await m3u8Response.text();
      console.log(""Entered the .m3u8 condition."");

      m3u8Content = await Promise.all(m3u8Content.split('\n').map(async line => {
        const segmentParsedURL = new URL(line, targetURL);
        let segmentBaseURL;

        if (segmentParsedURL.pathname.startsWith('/')) {
            segmentBaseURL = parsedURL.origin;
        } else {
            segmentBaseURL = targetURL.substring(0, targetURL.lastIndexOf('/') + 1);
        }

        const segmentURL = line.startsWith('http') ? line : segmentBaseURL + segmentParsedURL.pathname + segmentParsedURL.search;
        const segmentFileExtension = path.extname(segmentParsedURL.pathname).toLowerCase();

        if (segmentFileExtension === '.ts' || segmentFileExtension === '.webp' || segmentFileExtension === '.js') {
            const resolvedURL = await resolveRedirect(segmentURL, getHeadersForDomain(domain));
            const segmentDomain = new URL(segmentURL).host;
            return appendQueryParameter(getSegmentURL(resolvedURL), ""originalDomain"", segmentDomain);
        } else if (line.match(/\.m3u8$/)) {
            const playlistURL = line.startsWith('http') ? line : segmentBaseURL + segmentParsedURL.pathname;
            const resolvedURL = await resolveRedirect(playlistURL, getHeadersForDomain(domain));
            return getPlaylistURL(resolvedURL);
        } else if (line.startsWith('#EXT-X-KEY')) {
            const keyURLMatch = line.match(/URI=""([^""]+)""/);
            if (!keyURLMatch) {
                return line;
            }
            const keyURL = keyURLMatch[1];
            const segmentDomain = new URL(keyURL).host;
            const modifiedKeyURL = appendQueryParameter(getKeyURL(keyURL), ""originalDomain"", segmentDomain);
            return line.replace(/URI=""https:\/\/([^""]+)""/, `URI=""${modifiedKeyURL}""`);
        } else {
            return line;
        }
      }));

      m3u8Content = m3u8Content.join('\n');
      res.setHeader('Content-Type', 'application/vnd.apple.mpegurl');
      res.setHeader('Access-Control-Allow-Origin', '*');
			res.setHeader('Connection', 'Keep-Alive');
      res.send(m3u8Content);
    } catch (err) {
      console.error('Failed to fetch m3u8:', err.message);
      res.status(500).send('Proxy Error');
    }
    return;
  }
});


async function resolveRedirect(url, headers) {
  try {
    const response = await fetch(url, { headers });
    if (response.redirected) {
      return response.url;
    }
    return url;
  } catch (error) {
    console.error('Failed to resolve redirect for', url, error.message);
    return changeExtensionToJs(url);
  }
}

function changeExtensionToJs(url) {
  const withoutExtension = url.substring(0, url.lastIndexOf('.'));
  return `${withoutExtension}.js`;
}

// A new route for handling .ts and .wbp requests
app.use('/segment/*', (req, res) => {
  const originalDomain = req.query.originalDomain;
  const headersForDomain = getHeadersForDomain(originalDomain);
  const fullURL = req.protocol + '://' + req.get('host') + req.originalUrl;
  console.log(`Received request for URL: ${fullURL}`);

  if (fullURL.toLowerCase().endsWith('.m3u8')) {
    console.log(`.m3u8 request directed to /segment/. Redirecting to /proxy/...`);
    return res.redirect(`/proxy/${req.params[0]}`);
  }

  const segmentPath = req.params[0];
  const targetURL = 'https://' + segmentPath;

  const proxyRequestOptions = {
    url: targetURL,
    headers: headersForDomain
  };
  proxyRequestOptions.headers.host = new URL(targetURL).host;

  const proxyStream = request(proxyRequestOptions);

  proxyStream.on('error', (err) => {
    console.error('Proxy request error:', err.message);
    if (!res.headersSent) {
      res.status(500).send('Proxy Error');
    }
  });

  const ffmpegProcess = ffmpeg()
    .input(proxyStream)
    .outputOptions('-c:v', 'copy')  // Copy video codec
    .outputOptions('-c:a', 'copy')  // Copy audio codec
    .outputOptions('-f', 'mpegts')  // Set output format to MPEG-TS

    // The callback that is run when FFmpeg is finished
    .on('end', () => {
      console.log('FFmpeg has finished.');
    })
    // The callback that is run when FFmpeg encountered an error
    .on('error', (error) => {
      console.error('FFmpeg Error:', error.message);
      if (!res.headersSent) {
        res.status(500).send('FFmpeg Error');
      }
    });

  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Content-Type', 'video/MP2T');
  ffmpegProcess.pipe(res, { end: true });
});



app.use('/key/*', (req, res) => {
  const originalDomain = req.query.originalDomain;
  const headersForDomain = getHeadersForDomain(originalDomain);
  const fullURL = req.protocol + '://' + req.get('host') + req.originalUrl;
  console.log(`Received request for key URL: ${fullURL}`);

  // Capture the key path from the wildcard
  const keyPath = req.params[0];

  // Construct the targetURL with the captured key path
  const targetURL = 'https://' + keyPath;
  const domain = new URL(targetURL).hostname;

  // Create a proxyRequestOptions object with the headers copied from the original request
  const proxyRequestOptions = {
    url: targetURL,
    headers: headersForDomain
  };

  const proxyRequest = request(proxyRequestOptions);
  
  proxyRequest.on('response', function(sourceResponse) {
    res.setHeader('Access-Control-Allow-Origin', '*');
		res.setHeader('Content-Type', 'application/octet-stream');
    sourceResponse.pipe(res);
  });
  proxyRequest.on('error', function(err) {
    console.error('Proxy Error for URL:', targetURL, 'Error:', err.message);
    res.status(500).send('Proxy Error');
  });
  res.on('error', (err) => {
    console.error('Error during response pipe:', err);
  });
  req.pipe(proxyRequest);
});

function getBaseURL() {
  return `http://${app.get('host')}/`;
}

app.get('/', (req, res) => {
  res.render('main.ejs');
});

// Route for serving the admin panel
app.get('/admin', async (req, res) => {
  try {
    const games = await Game.find();
    res.render('admin.ejs', { videos: games });
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route for getting all games
app.get('/games', async (req, res) => {
  try {
    const games = await Game.find();
    res.send(games);
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route for creating a new game
app.post('/games', async (req, res) => {
  try {
    const game = new Game(req.body);
    await game.save();
    res.redirect('/admin');
  } catch (error) {
    res.status(500).send(error);
  }
});

app.put('/games/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { title, streamLink, sport } = req.body;
    const updatedGame = await Game.findByIdAndUpdate(id, { title, streamLink, sport }, { new: true });
    res.redirect('/admin');
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route for deleting a game
app.delete('/games/:id', async (req, res) => {
  try {
    await Game.deleteOne({ _id: req.params.id });
    res.redirect('/admin');
  } catch (error) {
    res.status(500).send(error);
  }
});

// Start the server
const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Server running on port ${port}`));"
azSSis8i,Mad,Unknown_No_1,PHP,Saturday 2nd of September 2023 07:00:51 AM CDT,SurprisePubgLtePlayer
71j6z10B,Untitled,migero,Python,Saturday 2nd of September 2023 06:23:28 AM CDT,"from pybricks.pupdevices import Motor, Remote, Light
from pybricks.parameters import Port, Direction, Stop, Button
from pybricks.tools import wait


# Initialize the motors.
steer = Motor(Port.B)
light = Light(Port.C)
front = Motor(Port.A, Direction.COUNTERCLOCKWISE)

front.control.limits(acceleration=500)
steer.control.limits(acceleration=500)
remote = Remote()

left_end = steer.run_until_stalled(-200, then=Stop.HOLD)
right_end = steer.run_until_stalled(200, then=Stop.HOLD)


steer.reset_angle((right_end - left_end) / 2)
steer.run_target(speed=200, target_angle=0, wait=False)
hold = False
while True:
    pressed = remote.buttons.pressed()

    steer_angle = 0
    if Button.RIGHT_MINUS in pressed:
        steer_angle -= 75
    if Button.RIGHT_PLUS in pressed:
        steer_angle += 75
    if Button.RIGHT in pressed:
        steer_angle = 0
    steer.run_target(500, steer_angle, wait=False)

    drive_speed = 0
    if Button.LEFT_PLUS in pressed:
        drive_speed += 5000
    if Button.LEFT_MINUS in pressed:
        drive_speed -= 5000
    if Button.LEFT in pressed:
       wait(500)
       if hold == True:
        hold = False
       else:
        hold = True
       

    bright = front.speed() / 15
    if hold == True:
        front.control.limits(acceleration=5000)
        front.run(750)
        light.on(bright)
       
    else:
        front.control.limits(acceleration=500)
        front.run(drive_speed)
        light.on(bright)"
1ex9u7et,Untitled,samipote,JavaScript,Saturday 2nd of September 2023 06:21:41 AM CDT,"const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');
const methodOverride = require('method-override');
const request = require('request');
const restream = require('restream');
const app = express();
const ffmpeg = require('fluent-ffmpeg');
app.set('host', 'sportswatcher.ddns.net');
const fs = require('fs');
const fetch = require('node-fetch');
app.use(express.json()); // Parse JSON bodies
app.use(express.urlencoded({ extended: true })); // Parse URL-encoded bodies
app.use(cors()); // Enable CORS
app.use(methodOverride('_method')); // Enable method override

// Replace with your MongoDB connection string
const connectionString = 'mongodb://localhost:27017/streaming';

// Connect to MongoDB
mongoose
  .connect(connectionString, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    console.log('Connected to MongoDB');
  })
  .catch((error) => {
    console.error('Failed to connect to MongoDB', error);
  });

// Define a Mongoose schema for our Game model
const gameSchema = new mongoose.Schema({
  title: String,
  streamLink: String,
  sport: String,
});

// Create the Game model
const Game = mongoose.model('Game', gameSchema);

// Serve static files from the public directory
app.use(express.static(path.join(__dirname, 'public')));

const proxyAddress = 'http://localhost:8080/';
process.env.NODE_TLS_REJECT_UNAUTHORIZED = ""0"";

// A function that returns a modified URL for .ts and .wbp files
function getSegmentURL(targetURL) {
  const baseURL = getBaseURL();
  return baseURL + 'segment/' + targetURL.replace('https://', '');
}

// A function that returns a modified URL for .m3u8 files
function getPlaylistURL(targetURL) {
  const baseURL = getBaseURL();
  return baseURL + 'proxy/' + targetURL.replace('https://', '');
}
function getKeyURL(url) {
  return `/key/${url.substring(8)}`; // Strip ""https://""
}

function getHeadersForDomain(domain) {
  const defaultHeaders = {
    'accept': '*/*',
    'accept-encoding': 'gzip, deflate, br',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36',
    'sec-ch-ua': '""Chromium"";v=""116"", ""Not)A;Brand"";v=""24"", ""Brave"";v=""116""',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-platform': 'Windows',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'cross-site',
    'sec-gpc': '1',
  };

  switch(domain) {
    case 'ddy1.cdndac.lol':
    case 'ddy2.cdndac.lol':
    case 'ddy3.cdndac.lol':
		case 'ddy4.cdndac.lol':
		case 'ddy5.cdndac.lol':
		case 'ddh1.cdndac.lol':
    //... other ddy domains
      return {
        ...defaultHeaders,
        'origin': 'https://ddhwebcast4k.xyz',
        'referer': 'https://ddhwebcast4k.xyz/',
      };

    case 'ed-t1.edghst.me':
    case 'ed-t2.edghst.me':
    case 'ed-t3.edghst.me':
    case 'ed-t4.edghst.me':
    case 'ed-n1.edghst.me':
		case 'ed-c1.edghst.me':
      return {
        ...defaultHeaders,
        'origin': 'https://www.nolive.me',
        'referer': 'https://www.nolive.me/'
      };
		case 'aes128.seckeyserv.me':
			return {
				...defaultHeaders,
        'origin': 'https://www.nolive.me',
        'referer': 'https://www.nolive.me/',
				'method': 'GET',
				'authority': 'aes128.seckeyserv.me'
      };
		case 's2.albula.xyz':
			return {
				...defaultHeaders,
        'origin': 'https://www.sportshub.to',
        'referer': 'https://www.sportshub.to/'
      };
		case 'nflarcadia.xyz':
			return {
				...defaultHeaders,
        'origin': 'https://gamerarcades.com',
        'referer': 'https://gamerarcades.com/'
      };
		case 'livenflstream.xyz':
			return {
				...defaultHeaders,
        'origin': 'https://catchystream.com',
        'referer': 'https://catchystream.com/'
      };
		case 's3.twoflow.xyz':
		return {
				...defaultHeaders,
        'origin': 'https://bestreamsports.org',
        'referer': 'https://bestreamsports.org/'
      };
		case 'n6.aliflailaaliflaila.com':
		return {
				...defaultHeaders,
        'origin': 'https://fiveyardlab.com',
        'referer': 'https://fiveyardlab.com/'
      };
		case 'jggk.9novel.to':
		return {
				...defaultHeaders,
        'origin': 'https://vwrc.truyenxalo.com',
        'referer': 'https://vwrc.truyenxalo.com/'
      };
    default:
      return defaultHeaders;
  }
}

function appendQueryParameter(url, paramKey, paramValue) {
    if (url.includes('?')) {
        return `${url}&${paramKey}=${paramValue}`;
    } else {
        return `${url}?${paramKey}=${paramValue}`;
    }
}
app.use('/proxy/', async (req, res, next) => {
  const fullURL = req.protocol + '://' + req.get('host') + req.originalUrl;
  const { pathname, search } = new URL(fullURL);
  console.log(`Received request for URL: ${fullURL}`);
  
  const targetURL = pathname.replace('/proxy/', 'https://') + search;
  const domain = new URL(targetURL).hostname;
  const parsedURL = new URL(targetURL);
  const fileExtension = path.extname(parsedURL.pathname).toLowerCase();

  if (fileExtension === '.m3u8') {
    try {
      const m3u8Response = await fetch(targetURL, { headers: getHeadersForDomain(domain) });
      let m3u8Content = await m3u8Response.text();
      console.log(""Entered the .m3u8 condition."");

      m3u8Content = await Promise.all(m3u8Content.split('\n').map(async line => {
        const segmentParsedURL = new URL(line, targetURL);
        let segmentBaseURL;

        if (segmentParsedURL.pathname.startsWith('/')) {
            segmentBaseURL = parsedURL.origin;
        } else {
            segmentBaseURL = targetURL.substring(0, targetURL.lastIndexOf('/') + 1);
        }

        const segmentURL = line.startsWith('http') ? line : segmentBaseURL + segmentParsedURL.pathname + segmentParsedURL.search;
        const segmentFileExtension = path.extname(segmentParsedURL.pathname).toLowerCase();

        if (segmentFileExtension === '.ts' || segmentFileExtension === '.webp' || segmentFileExtension === '.js') {
            const resolvedURL = await resolveRedirect(segmentURL, getHeadersForDomain(domain));
            const segmentDomain = new URL(segmentURL).host;
            return appendQueryParameter(getSegmentURL(resolvedURL), ""originalDomain"", segmentDomain);
        } else if (line.match(/\.m3u8$/)) {
            const playlistURL = line.startsWith('http') ? line : segmentBaseURL + segmentParsedURL.pathname;
            const resolvedURL = await resolveRedirect(playlistURL, getHeadersForDomain(domain));
            return getPlaylistURL(resolvedURL);
        } else if (line.startsWith('#EXT-X-KEY')) {
            const keyURLMatch = line.match(/URI=""([^""]+)""/);
            if (!keyURLMatch) {
                return line;
            }
            const keyURL = keyURLMatch[1];
            const segmentDomain = new URL(keyURL).host;
            const modifiedKeyURL = appendQueryParameter(getKeyURL(keyURL), ""originalDomain"", segmentDomain);
            return line.replace(/URI=""https:\/\/([^""]+)""/, `URI=""${modifiedKeyURL}""`);
        } else {
            return line;
        }
      }));

      m3u8Content = m3u8Content.join('\n');
      res.setHeader('Content-Type', 'application/vnd.apple.mpegurl');
      res.setHeader('Access-Control-Allow-Origin', '*');
			res.setHeader('Connection', 'Keep-Alive');
      res.send(m3u8Content);
    } catch (err) {
      console.error('Failed to fetch m3u8:', err.message);
      res.status(500).send('Proxy Error');
    }
    return;
  }
});


async function resolveRedirect(url, headers) {
  try {
    const response = await fetch(url, { headers });
    if (response.redirected) {
      return response.url;
    }
    return url;
  } catch (error) {
    console.error('Failed to resolve redirect for', url, error.message);
    return changeExtensionToJs(url);
  }
}

function changeExtensionToJs(url) {
  const withoutExtension = url.substring(0, url.lastIndexOf('.'));
  return `${withoutExtension}.js`;
}

// A new route for handling .ts and .wbp requests
app.use('/segment/*', (req, res) => {
	const originalDomain = req.query.originalDomain;
	const headersForDomain = getHeadersForDomain(originalDomain);
  const fullURL = req.protocol + '://' + req.get('host') + req.originalUrl;
  console.log(`Received request for URL: ${fullURL}`);
	  if (fullURL.toLowerCase().endsWith('.m3u8')) {
    console.log(`.m3u8 request directed to /segment/. Redirecting to /proxy/...`);
    return res.redirect(`/proxy/${req.params[0]}`);
  }

  // Capture the segment path from the wildcard
  const segmentPath = req.params[0];

  // Construct the targetURL with the captured segment path
  const targetURL = 'https://' + segmentPath;
	const domain = new URL(targetURL).hostname;

  // Create a proxyRequestOptions object with the headers copied from the original request
  const proxyRequestOptions = {
    url: targetURL,
    headers: headersForDomain
  };
	
	proxyRequestOptions.headers.host = new URL(targetURL).host;
  const proxyRequest = request(proxyRequestOptions);
  
  proxyRequest.on('response', function(sourceResponse) {
    res.setHeader('Access-Control-Allow-Origin', '*');
		res.setHeader('Content-Type', 'video/MP2T');
    sourceResponse.pipe(res);
  });
  proxyRequest.on('error', function(err) {
    console.error('Proxy Error for URL:', targetURL, 'Error:', err.message);
    res.status(500).send('Proxy Error');
  });
  res.on('error', (err) => {
    console.error('Error during response pipe:', err);
  });
  req.pipe(proxyRequest);
});



app.use('/key/*', (req, res) => {
  const originalDomain = req.query.originalDomain;
  const headersForDomain = getHeadersForDomain(originalDomain);
  const fullURL = req.protocol + '://' + req.get('host') + req.originalUrl;
  console.log(`Received request for key URL: ${fullURL}`);

  // Capture the key path from the wildcard
  const keyPath = req.params[0];

  // Construct the targetURL with the captured key path
  const targetURL = 'https://' + keyPath;
  const domain = new URL(targetURL).hostname;

  // Create a proxyRequestOptions object with the headers copied from the original request
  const proxyRequestOptions = {
    url: targetURL,
    headers: headersForDomain
  };

  const proxyRequest = request(proxyRequestOptions);
  
  proxyRequest.on('response', function(sourceResponse) {
    res.setHeader('Access-Control-Allow-Origin', '*');
		res.setHeader('Content-Type', 'application/octet-stream');
    sourceResponse.pipe(res);
  });
  proxyRequest.on('error', function(err) {
    console.error('Proxy Error for URL:', targetURL, 'Error:', err.message);
    res.status(500).send('Proxy Error');
  });
  res.on('error', (err) => {
    console.error('Error during response pipe:', err);
  });
  req.pipe(proxyRequest);
});

function getBaseURL() {
  return `http://${app.get('host')}/`;
}

app.get('/', (req, res) => {
  res.render('main.ejs');
});

// Route for serving the admin panel
app.get('/admin', async (req, res) => {
  try {
    const games = await Game.find();
    res.render('admin.ejs', { videos: games });
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route for getting all games
app.get('/games', async (req, res) => {
  try {
    const games = await Game.find();
    res.send(games);
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route for creating a new game
app.post('/games', async (req, res) => {
  try {
    const game = new Game(req.body);
    await game.save();
    res.redirect('/admin');
  } catch (error) {
    res.status(500).send(error);
  }
});

app.put('/games/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { title, streamLink, sport } = req.body;
    const updatedGame = await Game.findByIdAndUpdate(id, { title, streamLink, sport }, { new: true });
    res.redirect('/admin');
  } catch (error) {
    res.status(500).send(error);
  }
});

// Route for deleting a game
app.delete('/games/:id', async (req, res) => {
  try {
    await Game.deleteOne({ _id: req.params.id });
    res.redirect('/admin');
  } catch (error) {
    res.status(500).send(error);
  }
});

// Start the server
const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Server running on port ${port}`));"
Wn1SpWNu,CodinGame_2023_09_02__13_11_20__star_sharp.java,MonsterScripter,Java,Saturday 2nd of September 2023 06:11:44 AM CDT,"import java.util.*;

/**
 * Objectif
 * Étant donné un entier n.
 * Pour chaque chiffre de n, s'il est impair, il doit être remplacé par '*' et s'il est pair, il doit être remplacé par '#'.
 *
 * Par exemple, avec l'entier : 253
 * 2 est pair, il doit donc être remplacé par #,
 * 5 est impair, il doit donc être remplacé par *,
 * 3 est impair, il doit donc être remplacé par *.
 * Le résultat encodé est donc : #**
 *
 * Entrée
 * L'entier n.
 *
 * Sortie
 * Le résultat encodé.
 */

class Solution {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();

        int i = 0;
        StringBuilder sb = new StringBuilder();

        // Parcourt les chiffres de n de droite à gauche
        while (n > 0) {
            // Si le chiffre est pair, ajoute '#' à la chaîne, sinon ajoute '*'
            sb.append(n % 2 == 0 ? ""#"" : ""*"");
            n /= 10;
        }

        // Inverse la chaîne pour obtenir le résultat encodé correct.
        System.out.println(sb.reverse().toString());
    }
}
"
XbVus8qm,CodinGame_2023_09_02__13_04_03__sum_binary.rb,MonsterScripter,Ruby,Saturday 2nd of September 2023 06:04:22 AM CDT,"# Objectif
# Imprimez la somme des chiffres d'un nombre décimal converti en binaire.
# Exemple : 15 en décimal => 1111 en binaire, la sortie sera 4.

# Entrée
# L'entrée est un nombre entier strictement inférieur à 999999.

# Sortie
# La sortie est un nombre entier strictement inférieur à 21.

# Lire un entier depuis l'entrée standard et le stocker dans la variable X.
X = gets.to_i

# Convertir X en binaire et compter le nombre de ""1"" dans la représentation binaire.
# Ensuite, imprimer le résultat.
puts X.to_s(2).count(""1"")
"
009kUS6v,data683,TestGuy1,JSON,Saturday 2nd of September 2023 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '701177acc4f755abe297acd42e05c84636c2d3aa8b3cff3a260564fd7eeb142251f501e754e0176aa56151dd5f81ab580c71e5d96316b87bf4ae59698350e52c05d1d06f03b0dcc1508471e5fe10d8f53680f763c4c60220efb5654f4783ffc76ad6076c740224034d33470c7f93965cf57d10debdfcf1425dc7a4e4ab06c398',
  otherdata: [
    'c58f6d1b0f26853d03248c0e9157eb62',
    '7bf628b1529f1c577124f884a080970e',
    'ac666005eb56dae70ce0e4785b8a4204',
    '193e09c85e7d7fecdd81001e2451324f',
    'cc1ace1b07f18a36ef3432fa6b209072',
    'debce242a003ed99e4b9f464cfe7a19d',
    '51ac433a3e80332ebca6aa6416d4eff8',
    '60b0b98a793355a71f620e44fa936395'
  ]
}"
NrQMGdTH,CodinGame_2023_09_02__12_58_43__sum_binary.java,MonsterScripter,Java,Saturday 2nd of September 2023 05:59:02 AM CDT,"import java.util.*;

/**
 * Objectif
 * 
 * Afficher la somme des chiffres d'un nombre décimal converti en binaire.
 * Exemple : 15 en décimal => 1111 en binaire, la sortie sera 4.
 * 
 * Entrée
 * Un nombre en entrée, inférieur à 999999.
 * 
 * Sortie
 * La somme des chiffres du nombre binaire converti en binaire.
 * 
 * Contraintes
 * L'entrée est inférieure à 999999.
 * 
 * Exemple
 * Entrée
 * 15
 * 
 * Sortie attendue
 * 4
 */
class Solution {

    public static void main(String args[]) {
        Scanner s = new Scanner(System.in);
        int X = s.nextInt();   
        System.out.println(
            Integer.toBinaryString(X).replaceAll(""0"", """").length()
        );
    }
}
"
UwuWRkCf,Examle Builder,cepxuozab,C++,Saturday 2nd of September 2023 04:31:58 AM CDT,"#include <iostream>
#include <map>
#include <set>
#include <string>

class Json { };

class Builder {
    class BuilderContext;
    class DictValueContext;

public:
    Builder();
    DictValueContext Key(std::string key);

private:
    Json* json;
    class BaseContext {
    public:
        BaseContext(Builder& builder)
            : builder_(builder)
        {
        }
        DictValueContext Key(std::string key)
        {
            return builder_.Key(std::move(key));
        }

    private:
        Builder& builder_;
    };
    class DictValueContext : public BaseContext {
    public:
        DictValueContext(BaseContext base)
            : BaseContext(base)
        {
        }
        DictValueContext Key(std::string key) = delete;
    };
};

Builder::Builder()
    : json(new Json)
{
}

Builder::DictValueContext Builder::Key(std::string key)
{
    return BaseContext { *this };
}

int main() {

}"
3Qq1taUj,"IJunior - Игра ""Бой с боссом"" [Upgraded]",s5upchikis,C#,Saturday 2nd of September 2023 04:09:01 AM CDT,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace RobotKrytoi
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string bossName = ""Дракула 55"";
            string gameName = ""Консольные бои"";
            double userHealth = 1000;
            double bossHealth = 1000;
            double threeArrows = 300;
            double poisonInTwoDirections = 100;
            double principlesOfTheRobot = 900;
            double sharpie = 0;
            string userInput;
            double userValue;
            string userPassword = ""StoryDex"";

            Random bossAttach = new Random();
            Random sharpieAttach = new Random();

            sharpie = sharpie + sharpieAttach.Next(200, 1000);

            Console.WriteLine(""Бой с боссом. У босса [1.000 HP]."");
            Console.WriteLine(""Босс с каждым ходом наносит вам [100] урона, а у вас в свою очередь [1.000 HP]. \n"");

            bool isContinue = true;
            for (int move = 1; isContinue == true; move++)
            {
                if (bossHealth > 0)
                {
                    isContinue = true;
                }
                else
                {
                    isContinue = false;

                    Console.Clear();
                    Console.WriteLine($""Вы победили босса {bossName}. \n Название игры: {gameName}."");
                    Console.ReadKey();
                    Environment.Exit(0);
                }

                if (userHealth > 0)
                {
                    isContinue = true;
                }
                else
                {
                    Console.Clear();
                    Console.WriteLine($""Вы проиграли боссу {bossName}. \n Название игры: {gameName}."");
                    Console.WriteLine(""Можете перезапустить игру и повторить попытку."");
                    Console.ReadKey();
                    Environment.Exit(0);
                }

                Console.Write(""Вы согласны продолжить игру? [да/нет]"");

                userInput = Console.ReadLine();

                switch (userInput)
                {
                    case ""да"":
                        Console.WriteLine(""Продолжаем игру..."");
                        Console.ReadKey();
                        Console.Clear();
                        break;
                    case ""нет"":
                        Console.WriteLine(""Завершаем игру..."");
                        Console.ReadKey();
                        Environment.Exit(0);
                        break;
                    case ""/adminmode on"":
                        Console.Write(""Введите пароль: "");

                        userInput = Console.ReadLine();

                        if (userInput == userPassword)
                        {
                            Console.WriteLine(""Вы активировали режим разработчика. \n Рады вас видеть, разработчик!"");
                            Console.Write(""Выберите действия: \n [1] Добавить 2700 урона для атаки [Три стрелы]. \n [2] Установить другое имя боссу. \n [3] Добавить HP вашему персонажу. \n Ваш выбор: "");

                            userInput = Console.ReadLine();

                            switch (userInput)
                            {
                                case ""1"":
                                    threeArrows = threeArrows + 2700;

                                    Console.BackgroundColor = ConsoleColor.Green;
                                    Console.WriteLine(""Успешно!"");
                                    Console.ResetColor();
                                    Console.WriteLine(""Продолжаем игру..."");
                                    Console.ReadKey();
                                    Console.Clear();
                                    break;
                                case ""2"":
                                    Console.Write(""Выберите новое имя боссу: "");

                                    userInput = Console.ReadLine();
                                    bossName = userInput;

                                    Console.WriteLine($""Выполняется перезапись... Новое имя босса: {bossName}"");
                                    Thread.Sleep(3000);
                                    Console.BackgroundColor = ConsoleColor.Green;
                                    Console.WriteLine(""Успешно!"");
                                    Console.ResetColor();
                                    Console.WriteLine(""Продолжаем игру..."");
                                    Console.ReadKey();
                                    Console.Clear();
                                    break;
                                case ""3"":
                                    Console.Write(""Введите значение: "");

                                    userValue = double.Parse(Console.ReadLine());
                                    userHealth = userHealth + userValue;

                                    Console.WriteLine($""Выполняется перезапись... Новое значение HP вашего персонажа: {userHealth}"");
                                    Thread.Sleep(3000);
                                    Console.BackgroundColor = ConsoleColor.Green;
                                    Console.WriteLine(""Успешно!"");
                                    Console.ResetColor();
                                    Console.WriteLine(""Продолжаем игру..."");
                                    Console.ReadKey();
                                    Console.Clear();

                                    break;

                            }

                        }
                        else
                        {
                            Console.BackgroundColor = ConsoleColor.Red;
                            Console.WriteLine(""Неверный пароль.\n Мы продолжим игру через 5 секунд..."");
                            Console.ResetColor();
                            Thread.Sleep(5000);
                            Console.Clear();
                        }
                            break;

                    default:
                        Console.WriteLine(""Ошибка! Вы написали неправильно."");
                        Console.ReadKey();
                        Environment.Exit(0);
                        break;
                }

                Console.WriteLine($""Цикл {move}. Первым ходит босс {bossName}. \n"");

                userHealth = userHealth - bossAttach.Next(0, 201);

                Console.WriteLine($""Босс суммарно нанес вам уже {1000 - userHealth} урона. У вас осталось [{userHealth} HP] . \n"");
                Console.WriteLine($""Цикл {move}. Первым ходите вы."");
                Console.WriteLine($""Выберите заклинание: \n [1] Три стрелы \n [2] Яд в две стороны \n [3] Принципы робота \n [4] Удар шарпика \n Ваш выбор:"");

                userInput = Console.ReadLine();

                Console.Clear();

                switch (userInput)
                {
                    case ""1"":
                        bossHealth = bossHealth - threeArrows;
                        Console.WriteLine($""Теперь у босса осталось [{bossHealth} HP] . \n"");
                        break;
                    case ""2"":
                        bossHealth = bossHealth - poisonInTwoDirections;

                        Console.WriteLine($""Теперь у босса осталось [{bossHealth} HP] . \n"");

                        userHealth = userHealth - poisonInTwoDirections;

                        Console.WriteLine($""Но вы также нанесли {poisonInTwoDirections} урона себе."");
                        Console.WriteLine($""У вас осталось [{userHealth} HP] . \n"");
                        break;
                    case ""3"":
                        bossHealth = bossHealth - principlesOfTheRobot;

                        Console.WriteLine($""Теперь у босса осталось [{bossHealth} HP] . \n"");
                        break;
                    case ""4"":
                        bossHealth = bossHealth - sharpie;

                        Console.WriteLine($""Теперь у босса осталось [{bossHealth} HP] . \n"");
                        break;
                    default: Console.WriteLine(""Вы неправильно сделали выбор. Нужно было ввести цифру от одного до четырех."");
                        break;
                }
            }
            
            Console.ReadKey();
        }
    }
}

"
GwNRYb3s,CodinGame_2023_09_02__10_34_48__sum_string.java,MonsterScripter,Java,Saturday 2nd of September 2023 03:35:01 AM CDT,"import java.util.*;

/**
 * Objectif
 * 
 * Vous devez produire la concaténation de chaînes correcte en fonction du résultat de la somme.
 * Si c'est positif, affichez ""Foo"".
 * Si c'est négatif, affichez ""Bar"".
 * Si c'est pair, concaténez "" & Baz"" à la sortie.
 * Si c'est impair, concaténez "" & Qux"" à la sortie.
 * 
 * Entrée
 * Ligne 1 : Un entier N pour le nombre d'entiers à additionner.
 * Les N lignes suivantes : Un entier positif ou négatif K.
 * 
 * Sortie
 * Ligne 1 : Une chaîne de caractères contenant les deux mots corrects.
 * 
 * Contraintes
 * -100 <= K <= 100
 * 
 * Exemple
 * Entrée
 * 1
 * 6
 * 
 * Sortie attendue
 * Foo & Baz
 */
class Solution {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        int N = in.nextInt();
        int sum = 0;
        for (int i = 0; i < N; i++) {
            int K = in.nextInt();
            sum += K;
        }
        System.out.print(sum > 0 ? ""Foo"" : ""Bar"");
        System.out.print(sum % 2 == 0 ? "" & Baz"" : "" & Qux"");
        System.out.println();
    }
}
"
iw0im0H0,CodinGame_2023_09_02__10_26_00__reverse_words.java,MonsterScripter,Java,Saturday 2nd of September 2023 03:26:10 AM CDT,"import java.util.*;
import java.io.*;
import java.math.*;

/**
 * Objectif
 * 
 * Inverser l'ordre des mots dans une phrase donnée.
 * 
 * Entrée
 * Ligne 1 : Une phrase s.
 * 
 * Sortie
 * Une phrase avec les mots dans l'ordre inverse.
 * 
 * Contraintes
 * Aucune.
 * 
 * Exemple
 * Test 1
 * Entrée
 * Hello there!!
 * 
 * Sortie attendue
 * there!! Hello
 * 
 * Test 2
 * Entrée
 * We had a three-course meal.
 * 
 * Sortie attendue
 * meal. three-course a had We
 * 
 * Test 3
 * Entrée
 * Oh, how I'd love to go!
 * 
 * Sortie attendue
 * go! to love I'd how Oh,
 * 
 * Test 4
 * Entrée
 * Reaching the large house near the Horse Guards' barracks, in which Anatole lived, Pierre entered the lighted porch, ascended the stairs, and went in at the open door.
 * 
 * Sortie attendue
 * door. open the at in went and stairs, the ascended porch, lighted the entered Pierre lived, Anatole which in, barracks, Guards' Horse the near house large the Reaching
 */
class Solution {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        String s = in.nextLine();
        String[] t = s.split("" "");
        System.out.print(t[t.length-1]);
        for (int i=t.length-2; i >= 0; i--) {
           System.out.print("" "" + t[i]);
        }
        System.out.println();
    }
}
"
UZFitw8b,CodinGame_2023_09_02__09_50_47__reverse_digit_max.cpp,MonsterScripter,Java,Saturday 2nd of September 2023 02:51:02 AM CDT,"import java.util.*;

/**
 * Objectif
 * 
 * Étant donné n entiers dans un tableau a, inverser les chiffres de chaque entier dans le tableau. Ensuite, calculer la valeur absolue de chaque entier et afficher la valeur la plus élevée.
 * 
 * Entrée
 * Ligne 1 : n, le nombre d'entiers à fournir
 * Ligne 2 : a, le tableau d'entiers
 * 
 * Sortie
 * Ligne 1 : Le plus grand des nombres inversés dans le tableau
 * 
 * Contraintes
 * 0 < n < 10
 * 
 * Exemple
 * Entrée
 * 2
 * 21 -94
 * 
 * Sortie
 * 49
 */
class Solution {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        if (in.hasNextLine()) {
            in.nextLine();
        }
        String a = in.nextLine();
        String[] b = a.split("" "");
        int max = 0;
        for (String s : b) {
            // Vérifier si c'est un nombre entier
            if (s.matches(""(-?[0-9]+)"")) {
                s = s.replace(""-"", """"); // Supprimer le signe négatif pour obtenir la valeur absolue
                int x = Integer.parseInt(new StringBuilder(s).reverse().toString()); // Inverser les chiffres et convertir en entier
                if (max < x)
                    max = x; // Mettre à jour la valeur maximale si nécessaire
            }
        }
        System.out.println(max); // Afficher le résultat
    }
}
"
4Y19UA7j,Find the number of islands,jayati,C++,Saturday 2nd of September 2023 02:24:42 AM CDT,"//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    // Function to find the number of islands.
    void bfs(int i,int j,vector<vector<int>> &vis,vector<vector<char>>& grid)
    {
        vis[i][j]=1;
        queue<pair<int,int>> q;
        q.push({i,j});
        int n=grid.size();
        int m = grid[0].size();
        while(!q.empty())
        {
            int row=q.front().first;
            int col=q.front().second;
            q.pop();
            
            for(int delr=-1;delr<=1;delr++)
            {
                for(int delc=-1;delc<=1;delc++)
                {
                    int nrow = delr+row;
                    int ncol = delc+col;
                    if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && !vis[nrow][ncol] && grid[nrow][ncol]=='1')
                    {
                        vis[nrow][ncol]=1;
                        q.push({nrow,ncol});
                    }
                }
            }
            
        }
        
    }
    int numIslands(vector<vector<char>>& grid) {
        // Code here
        int row=grid.size();
        int col=grid[0].size();
        vector<vector<int>> vis(row,vector<int> (col,0));
        int c=0;
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                if(!vis[i][j] && grid[i][j]=='1')
                {
                    c++;
                    bfs(i,j,vis,grid);
                }
            }
        }
        return c;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n, m;
        cin >> n >> m;
        vector<vector<char>> grid(n, vector<char>(m, '#'));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        int ans = obj.numIslands(grid);
        cout << ans << '\n';
    }
    return 0;
}
// } Driver Code Ends
// https://practice.geeksforgeeks.org/problems/find-the-number-of-islands/"
SiTzRkgX,Fundbux Theme RTL CSS,salmancreation,CSS,Saturday 2nd of September 2023 02:15:56 AM CDT,".rtl .cause-content {
    text-align: right;
}

.rtl .section-title.text-left {
    text-align: right !important;
}

.rtl .section-title {
    text-align: right !important;
}

.rtl .text-left {
    text-align: right !important;
}

.rtl .text-center {
    text-align: center !important;
}

.rtl .block-feature-list .single-block-item .icon {
    float: right;
    margin-left: 30px;
}

.rtl .block-feature-list {
    text-align: right;
}

.rtl .text-lg-left .section-title h2, .rtl .text-lg-left .section-title {
    text-align: right !important;
}

.rtl .text-center .section-title {
    text-align: center !important;
}

.rtl .blog-list-view {
    text-align: right;
}

.rtl .blog-list-view .single-blog-item {}

.rtl .blog-list-view .single-blog-item .post-date {
    float: right;
    margin-left: 30px;
}

.rtl .post-author {
    margin: 0px !important;
}

.rtl .single-blog-card {
    text-align: right;
}

.rtl .footer-wrap .single-footer-wid {
    text-align: right;
}

.rtl .site_info_widget .single-contact-info .icon {
    float: right;
    margin-left: 20px;
}

.rtl .event-section .single-event-item .event-details .event-date {
    float: right;
    margin-left: 10px;
}

.rtl .single-cause-item.style-1 .cause-meta a {
    margin-right: 0px;
}

.rtl .single-cause-item.style-1 .cause-meta a i {
    margin-right: 0;
    margin-left: 8px;
}

.rtl .single-cause-item .cause-amount i {
    margin-right: 0px;
    margin-left: 8px;
}

.rtl .checked-list li {padding: 0;padding-right: 40px;}

.rtl .checked-list li::before {
    right: 0px;
}

.rtl .about_left_content {padding-right: 40px !important;}

.rtl header.header-box-style .top-bar a i, header.header-1 .top-bar a i {
    margin: 0px;
    margin-left: 8px;
}

.rtl .event-title {
    text-align: right;
}

.rtl .section-title > span i {margin: 0px;margin-left: 10px;}

.rtl .text-center.text-lg-left .section-title {
    text-align: right !important;
}"
