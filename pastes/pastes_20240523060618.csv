id,title,username,language,date,content
2MtL0E3z,snowybot update going to give good run,coinwalk,JavaScript,Thursday 23rd of May 2024 12:44:02 AM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = 0.001;
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var fives = (BaseBet*4.9);
var sixes = (BaseBet*5.9);
var skibi= (BaseBet*12);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var nines = (BaseBet*8.9);
var winnerdinner = (OriginalBalanCe*24);
var loL = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowzy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snow = ((Math.floor(OriginalBalanCe/tens))*tens);
var BalanCe = OriginalBalanCe;
var fast = 1;
var joe = false;
var jim = false;
var OldBal = ((Math.floor(OriginalBalanCe/tens))*tens);
var OldBaltwo = ((Math.floor(OriginalBalanCe/tens))*tens);
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((jim)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>=snowy)){
    NexTBet = NexTBet*2;
    joe = true;
    jim = false;
    snowy = parseFloat(BalanCe);
}
if ((!jim)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>snowy)){
    NexTBet = NexTBet*2;
    joe = true;
    jim = false;
    snowy = parseFloat(BalanCe);
}
if ((joe)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<=snow)){
    NexTBet = NexTBet*2;
    jim = true;
    joe = false;
    snow = parseFloat(BalanCe);
    }
if ((!joe)&&(BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<snow)){
    NexTBet = NexTBet*2;
    jim = true
    joe = false;
    snow = parseFloat(BalanCe);
    }
if ((BalanCe<=(snowzy-skibi))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    fart = 0;
    joe = false;
    jim = false;
    snow = ((Math.floor(BalanCe/tens))*tens);
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe>=(loL+fart))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    fart = 1;
    joe = false;
    jim = false;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
    snow = ((Math.floor(BalanCe/tens))*tens);
    loL = ((Math.floor(BalanCe/tens))*tens);
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();"
p4dwHmid,Control,BimoSora,C++,Thursday 23rd of May 2024 12:02:28 AM CDT,"// Import required libraries
#include <Arduino.h>
#ifdef ESP32
#include <WiFi.h>
#include <AsyncTCP.h>
#elif defined(ESP8266)
#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#endif
#include <ESPAsyncWebServer.h>
#include <FS.h>
#include <Servo.h>

/* Put your SSID & Password */
const char* ssid = ""Car-ESP"";  // Enter SSID here
const char* password = ""12345678"";  // Enter Password here

/* Put IP Address details */
IPAddress local_ip(192,168,1,1);
IPAddress gateway(192,168,1,1);
IPAddress subnet(255,255,255,0);

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

int in1 = D4;
int in2 = D3;
int enA = D2;  // Enable pin for speed control
const int servoPin = D1;
Servo servo;
int currentServoAngle = 90;  // Starting position for servo

void smoothServoMove(int targetAngle) {
  while (currentServoAngle != targetAngle) {
    if (currentServoAngle < targetAngle) {
      currentServoAngle++;
    } else if (currentServoAngle > targetAngle) {
      currentServoAngle--;
    }
    servo.write(currentServoAngle);
    delay(15); // Adjust delay for smoothness
  }
}

void setup() {
  // Serial port for debugging purposes
  Serial.begin(115200);
  Serial.println();

  servo.attach(servoPin);
  servo.write(currentServoAngle);

  if(SPIFFS.begin()) {
    Serial.println(""SPIFFS initialised OK"");
  }

  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(enA, OUTPUT);

  WiFi.softAP(ssid, password);
  WiFi.softAPConfig(local_ip, gateway, subnet);
  delay(100);

  // Route for root / web page
  server.on(""/"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/index.html"", ""text/html"");
  });
  server.on(""/assets/js/jquery.min.js"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/js/jquery.min.js"", ""text/javascript"");
  });

  server.on(""/joystick"", HTTP_POST, [](AsyncWebServerRequest *request) {
    if (request->hasArg(""x"") && request->hasArg(""y"")) {
      String xValue = request->arg(""x"");
      String yValue = request->arg(""y"");
      int x = xValue.toInt();
      int y = yValue.toInt();

      // Calculate speed based on joystick position
      int speed = map(abs(y - 512), 0, 512, 0, 255);

      // Handle motor control
      if (y > 600) { // Forward
        digitalWrite(in1, HIGH);
        digitalWrite(in2, LOW);
        analogWrite(enA, speed);
      } else if (y < 400) { // Reverse
        digitalWrite(in1, LOW);
        digitalWrite(in2, HIGH);
        analogWrite(enA, speed);
      } else { // Stop
        digitalWrite(in1, LOW);
        digitalWrite(in2, LOW);
        analogWrite(enA, 0);
      }

      // Handle servo control
      int targetAngle = map(x, 0, 1023, 0, 180);
      smoothServoMove(targetAngle);

      request->send(200, ""text/plain"", ""ok"");
    } else {
      // Invalid request, return error
      request->send(400, ""text/plain"", ""Bad Request"");
    }
  });

  server.onNotFound([](AsyncWebServerRequest *request){
    // Reset motor and servo when joystick is released
    digitalWrite(in1, LOW);
    digitalWrite(in2, LOW);
    analogWrite(enA, 0);
    smoothServoMove(90);
    request->send(404, ""text/plain"", ""Not Found"");
  });

  // Start server
  server.begin();
}

void loop() {}
"
Tva7LQap,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Thursday 23rd of May 2024 12:01:13 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_865999.pdf

Working as of:
23 May 2024"
3hqnEmWS,Untitled,waitingmoon,CSS,Wednesday 22nd of May 2024 11:42:38 PM CDT,"@media screen and (max-width: 480px) {
    .page-archive .archive-entries .archive-entry {
        padding-left: 160px;
        position: relative;
    }
    .page-archive .archive-entries .entry-thumb-link {
        position: absolute;
        top: 0;
        left: 0;
        width: 144px;
        height: auto;
        padding: 0;
        margin: 16px 0 0 16px;
    }
    .page-archive .archive-entries .entry-thumb {
        position: static;
        height: 0;
        padding-top: 52.5%;
    }
}"
mMcs5XeC,snowybot,coinwalk,JavaScript,Wednesday 22nd of May 2024 10:53:29 PM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = Number((OriginalBalanCe/100).toFixed(8))
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var fives = (BaseBet*4.9);
var sixes = (BaseBet*5.9);
var skibi= (BaseBet*16.9);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var nines = (BaseBet*8.9);
var winnerdinner = (OriginalBalanCe*24);
var loL = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowzy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowy = ((Math.floor(OriginalBalanCe/tens))*tens);
var BalanCe = OriginalBalanCe;
var fuel = 0;
var bobbed = 0;
var OldBal = ((Math.floor(OriginalBalanCe/tens))*tens);
var OldBaltwo = ((Math.floor(OriginalBalanCe/tens))*tens);
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>snowy)){
    NexTBet = NexTBet*2;
    snowy = parseFloat(BalanCe);
}
if ((BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<snowy)){
    NexTBet = NexTBet*2;
    snowy = parseFloat(BalanCe);
    }
if ((BalanCe<=(snowzy-skibi))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe>=(loL+tens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
    loL = ((Math.floor(BalanCe/tens))*tens);
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();"
cZhuS259,snowybot,coinwalk,JavaScript,Wednesday 22nd of May 2024 10:49:02 PM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = Number((OriginalBalanCe/100).toFixed(8))
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var fives = (BaseBet*4.9);
var sixes = (BaseBet*5.9);
var skibi= (BaseBet*16.9);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var nines = (BaseBet*8.9);
var winnerdinner = (OriginalBalanCe*24);
var loL = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowzy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowy = ((Math.floor(OriginalBalanCe/tens))*tens);
var BalanCe = OriginalBalanCe;
var fuel = 0;
var bobbed = 0;
var OldBal = ((Math.floor(OriginalBalanCe/tens))*tens);
var OldBaltwo = ((Math.floor(OriginalBalanCe/tens))*tens);
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe>snowy)){
    NexTBet = NexTBet*2;
    snowy = parseFloat(BalanCe);
}
if ((BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe<snowy)){
    NexTBet = NexTBet*2;
    fuel = fuel+1;
    snowy = parseFloat(BalanCe);
    }
if ((BalanCe<=(snowzy-skibi))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    fuel = 0;
    snowy = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe>=(loL+tens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    fuel = 0;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    loL = ((Math.floor(BalanCe/tens))*tens);
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();"
ZUHXDfFb,TEST_invStartup,jig487,Lua,Wednesday 22nd of May 2024 10:26:44 PM CDT,"--pastebin get ZUHXDfFb startup

--Global menuColor table
local menuColors = {
    title = colors.lightBlue,
    menu = colors.purple,
    text = colors.white,
    highlight = colors.pink,
    --background = colors.black
}

--##############################################
--Function definitions

--Returns true if tbl contains ""inventory"", else false
local function isInv(tbl)
    for i = 1, #tbl do
        if tbl[i] == ""inventory"" then
            return true
        end
    end
    return false
end

--returns true if 'name' ~= ""up"",""down"",""left"",""right"",""forward"",""back""
local function isNotAdjacentOrDump(name,dumpName)
    return not (name == dumpName or name == ""up"" or name == ""down"" or name == ""left"" or name == ""right"" or name == ""forward"" or name == ""back"")
end

--returns a table of wrapped inventories
--takes in a table of peripheral names
local function sortForInv(nameList,dumpName)
    local wrapList = {}
    for i = 1, #nameList do
        local curName = nameList[i]
        if isNotAdjacentOrDump(curName,dumpName) then
            local typeList = {peripheral.getType(curName)} -- = tbl of types
            if isInv(typeList) then
                wrapList[#wrapList+1] = peripheral.wrap(curName)
            end
        end
    end
    return wrapList
end

--returns table of all items in wrapped inventories
--takes in a table of wrapped inventories
local function getItemList(wrapList)
    local itemList = { name = ""Item List""}
    for i = 1, #wrapList do
        local curInv = wrapList[i].list()

        for slot,item in pairs(curInv) do
            item.chestIndex = i
            item.slot = slot
            item.index = #itemList+1
            itemList[#itemList+1] = item
        end
    end

    return itemList
end

--takes in a numbered table of items, structured like this: tbl = {  [1] = {name,count,slot,chetsID}, [..] = {..}, ..  }
--Displays a arrow key controlled menu using a provided menuPage
--returns: int cursor, string menuChoice (either ""search"", ""exit"", or ""select"")
local function openMenu(tbl,cursor)
    local cursor = cursor or 1

    local _,screenHeight = term.getSize()
    local pageLength = screenHeight - 3

    local maxPage = math.ceil(#tbl/(pageLength))
    local page = math.min( math.ceil( cursor / pageLength ) ,maxPage)

    term.clear()
    while true do
        local displayStartIndex = math.max( pageLength*(page-1)+1, 1 )
        local displayEndIndex = math.min( pageLength*(page), #tbl )
        local col = term.getTextColor()

        --clamp cursor to range of 1-displayEndIndex
        cursor = math.min(cursor,displayEndIndex)
        cursor = math.max(cursor,1)

        term.setCursorPos(1,1)
        if tbl.name then
            term.setTextColor(menuColors.title)
            print(""<<< ""..tbl.name.."" >>>"")
        end
        term.setTextColor(menuColors.text)

        --Display item options
        for i = displayStartIndex, displayEndIndex do

            local displayStr = """"
            local displayCount = """"
            if tbl[i] then
                displayStr = tbl[i].name

                --remove the prefix for item names
                local colonIndex = string.find(displayStr,"":"")
                if colonIndex then
                    displayStr = displayStr:sub(colonIndex+1)
                end
                --capitalize the first character
                displayStr = displayStr:gsub(""^%l"", string.upper)

                --remove underscores
                displayStr = string.gsub(displayStr,""_"","" "")

                if tbl[i].count then
                    if tbl[i].count ~= 1 then
                        displayCount = "" : ""..tostring(tbl[i].count)
                    end
                end
            end

            if i == cursor then
                if tbl[i].color then
                    term.setTextColor(tbl[i].color)
                else
                    term.setTextColor(menuColors.highlight)
                end
                print("">""..(displayStr)..displayCount..""<"")
                term.setTextColor(menuColors.text)
            else
                if tbl[i].color then
                    term.setTextColor(tbl[i].color)
                end
                print("" ""..(displayStr)..displayCount.."" "")
                term.setTextColor(menuColors.text)
            end
        end

        term.setTextColor(menuColors.menu)
        print(""Page ""..page.."" / ""..maxPage)
        local _, key = os.pullEvent(""key"")
        if key == keys.up then
            --Move cursor up if it's not at first option
            if cursor > displayStartIndex then
                cursor = cursor - 1
            end
        elseif key == keys.down then
            --move cursor down if it's not at last option
            if cursor < displayEndIndex then
                cursor = cursor + 1
            end
        elseif key == keys.left then
            --move to previous page if not at first page
            if page > 1 then
                page = page - 1
                cursor = cursor - pageLength
                term.clear()
            end
        elseif key == keys.right then
            --move to next page if not at last page
            if page < maxPage then
                page = page + 1
                cursor = cursor + pageLength
                term.clear()
            end
        elseif key == keys.enter then
            --return the menu choice
            return cursor,""select""
        elseif key == keys.backspace then
            --exit the menu
            return cursor,""exit""
        else
            --player wants to search for a string
            return cursor,""search""
        end
    end
end

--iterates over itemList and updates the .index value of each index in the table
local function updateIndex(itemList)
    for key,val in pairs(itemList) do
        if key ~= ""name"" then
            itemList[key].index = key
        end
    end
end

--takes in(String searchTarget, tbl itemList)
--iterates over itemList and checks to see if itemList[i].name == searchTarget
--returns table of all found items that match
local function search(searchTarget,itemList)
    searchTarget = string.lower(searchTarget)
    local foundItems = {name = ""Search: ""..searchTarget}

    --Look through each item
    for i = 1, #itemList do
        --Check to see if current item matches item we are searching for
        if string.find( itemList[i].name, searchTarget ) then
            --found an item that matches search. Add it to foundItems table and update total found item count
            foundItems[#foundItems+1] = itemList[i]
        end
    end

    return foundItems
end

--Takes everything in a specific chest and tries to push it into other peripheral inventories
--returns true if dumped all items, false if failed to dump an item
local function dump(outWrap,wrapList)
    term.clear()
    term.setTextColor(menuColors.title)
    term.setCursorPos(1,1)
    print(""Dumping items..."")

    local badName = peripheral.getName(outWrap)
    local itemList = outWrap.list()
    local namesList = {}
    local itemCount = 0
    for _,_ in pairs(itemList) do
        itemCount = itemCount + 1
    end
    for index,wrap in pairs(wrapList) do
        namesList[index] = peripheral.getName(wrap)
    end

    --CHANGE:
    --Make this smart. Deposit items in the first chest that contains a similar item. Go to next chest if full
    for i = 1, #namesList do
        local name = namesList[i]


        if name ~= badname then
            while itemCount > 0 do
                local full = false
                for slot,_ in pairs(itemList) do
                    --.pushItems returns the amount of items moved
                    if outWrap.pushItems(name, slot) == 0 then
                        --curInv is full. go to next
                        full = true
                        break
                    end
                end

                itemList = outWrap.list()
                itemCount = 0
                for _,_ in pairs(itemList) do
                    itemCount = itemCount + 1
                end
                if itemCount == 0 then
                    return true
                elseif full then
                    --curInv is full. Go to next
                    break
                end
            end
        end
    end

    if itemCount > 0 then
        return false
    end
    return true
end

local function dumpChestCheck(dumpName)
    --error checking to make sure dump chest exists
    local curNameList = peripheral.getNames()
    for i = 1, #curNameList do
        if dumpName == curNameList[i] then
            return dumpName
        end
    end

    local sortedNames = {name = ""Inventory List""}
    for i = 1, #curNameList do
        local curName = curNameList[i]
        if isNotAdjacent(curName) then
            local typeList = {peripheral.getType(curName)} -- = tbl of types
            if isInv(typeList) then
                sortedNames[#sortedNames+1] = {name = curNameList[i]}
            end
        end
    end

    while true do
        term.clear()
        term.setCursorPos(1,1)
        term.setTextColor(menuColors.title)
        print(""Please define a valid dump chest"")
        print(""Or type 'list' to pick from a list of inventories"")
        term.setTextColor(menuColors.menu)
        dumpName = read()
        term.setTextColor(menuColors.text)

        if dumpName == ""list"" then
            local cursor,choice
            while choice ~= ""exit"" do
                cursor,choice = openMenu(sortedNames)
                if choice == ""select"" then
                    return sortedNames[cursor].name
                end
            end
        else
            for i = 1, #sortedNames do
                if dumpName == sortedNames[i].name then
                    return dumpName
                end
            end
        end
    end
end

--###################################################################
--###################################################################
--Main function
local menuTbl = {
    name = ""Main Menu"",
    {name = ""Items""},
    {name = ""Dump""},
    {name = ""Update Item/Chest List""},
    {name = ""Settings""}
}

local colorOptions = {
    name = ""Color List"",
    {name = ""White"", color = 1},
    {name = ""Orange"", color = 2},
    {name = ""Magenta"", color = 4},
    {name = ""Light Blue"", color = 8},
    {name = ""Yellow"", color = 16},
    {name = ""Lime"", color = 32},
    {name = ""Pink"", color = 64},
    {name = ""Gray"", color = 128},
    {name = ""Light Gray"", color = 256},
    {name = ""Cyan"", color = 512},
    {name = ""Purple"", color = 1024},
    {name = ""Blue"", color = 2048},
    {name = ""Brown"", color = 4096},
    {name = ""Green"", color = 8192},
    {name = ""Red"", color = 16384},
    {name = ""Black""}
}

local defaultSettings = {
    settingsMenu = {
        name = ""Settings"",
        {name = ""Title Color"",      count = ""Light Blue"", menu = ""colorOptions""},
        {name = ""Menu Color"",       count = ""Purple"",     menu = ""colorOptions""},
        {name = ""Text Color"",       count = ""White"",      menu = ""colorOptions""},
        {name = ""Highlight Color"",  count = ""Pink"",       menu = ""colorOptions""},
        --{name = ""Background Color"", count = ""Black"",      menu = ""colorOptions""}
        {name = ""Dump Chest"",       count = ""minecraft:chest_0""},
        --{name = ""Reset Settings To Default""},
    },
    menuColors = {
        title = colors.lightBlue,
        menu = colors.purple,
        text = colors.white,
        highlight = colors.pink,
        --background = colors.black
    }
}

local settingsMenu = {
    name = ""Settings"",
    {name = ""Title Color"",      count = ""Light Blue"", menu = ""colorOptions""},
    {name = ""Menu Color"",       count = ""Purple"",     menu = ""colorOptions""},
    {name = ""Text Color"",       count = ""White"",      menu = ""colorOptions""},
    {name = ""Highlight Color"",  count = ""Pink"",       menu = ""colorOptions""},
    --{name = ""Background Color"", count = ""Black"",      menu = ""colorOptions""}
    {name = ""Dump Chest"", count = ""minecraft:chest_0""},
    --{name = ""Reset Settings To Default""},
}

--Load values and check if was interrupted in previous task
local data = {}
if( fs.exists(""inventorySettings.txt"") ) then
    local file = fs.open(""inventorySettings.txt"",""r"")
    data = textutils.unserialise(file.readAll())
    file.close()
    settingsMenu = data.settingsMenu
    menuColors = data.menuColors
else
    data = {
        settingsMenu = settingsMenu,
        menuColors = menuColors
    }
    local file = fs.open(""inventorySettings.txt"",""w"")
    file.write(textutils.serialise(data))
    file.close()
end

--initialize variables from settings
--error checking to make sure dumpChest exists
--Get dump chest name from settings
local test = dumpChestCheck(settingsMenu[5].count)
if test ~= settingsMenu[5].count then
    --update save file
    settingsMenu[5].count = test
    data = {
        settingsMenu = settingsMenu,
        menuColors = menuColors
    }
    local file = fs.open(""inventorySettings.txt"",""w"")
    file.write(textutils.serialise(data))
    file.close()
end

local outChest = test
local outWrap = peripheral.wrap(outChest)

--remove dumpChest from inventory list
local nameList = peripheral.getNames()
for i = 1, #nameList do
    if nameList[i] == outChest then
        table.remove(nameList,i)
        break
    end
end

--finish setting up variables
local wrapList = sortForInv(nameList,outChest)
local itemList
local needToUpdate = true


while true do
    --outer menu
    term.clear()
    local cursor,menuChoice = openMenu(menuTbl)

    local mainChoice = menuTbl[cursor].name
    term.clear()

        if mainChoice == ""Items"" or menuChoice == ""search"" then

            local activeInv = itemList
            local activeSearch = false
            local searchKey = """"

            --check if search is coming from main menu
            if menuChoice == ""search"" then
                term.clear()
                term.setCursorPos(1,1)
                print(""Enter search target:"")
                searchKey = read()
                activeSearch = true
                if needToUpdate then
                    term.setCursorPos(1,1)
                    print(""Getting item list..."")
                    itemList = getItemList(wrapList)
                    needToUpdate = false
                    term.clear()
                end
                activeInv = search(searchKey,itemList)
            elseif needToUpdate then
                term.setCursorPos(1,1)
                print(""Getting item list..."")
                itemList = getItemList(wrapList)
                activeInv = itemList
                needToUpdate = false
                term.clear()
            end
            
            --inside item menu
            while menuChoice ~= ""exit"" do
                cursor,menuChoice = openMenu(activeInv,cursor)
                
                if menuChoice == ""select"" then
                    --pullItem(cursor,itemList)
                    if activeInv[cursor] then
                        local item = activeInv[cursor]
                        local slot = item.slot
                        local count = item.count

                        local wrapFuncs = wrapList[item.chestIndex]

                        --try to push 64 items. If items pushed ~= 0 then go into statement
                        if wrapFuncs.pushItems(outChest,slot,64) ~= 0 then
                            --needToUpdate = true
                            --remove it from the list if stack less than 64 because we moved the whole stack, then update list
                            if count <= 64 then
                                table.remove(itemList, item.index)
                                updateIndex(itemList)
                                if activeSearch then
                                    --CHANGE:
                                    --make this more efficient by using an index table to point to outer itemList instead of creating a new itemList
                                    --HAVE to use search() method instead of updateIndex method because index has to be based on itemList, not activeInv
                                    
                                    table.remove(activeInv,cursor)
                                    --activeInv = search(searchKey,itemList)
                                end
                            else
                                --items still remaining, update count
                                itemList[item.index].count = count - 64
                                if activeSearch then
                                    activeInv[cursor].count = count - 64
                                end
                            end
                        end
                    end

                elseif menuChoice == ""search"" then
                    activeSearch = true
                    term.clear()
                    term.setCursorPos(1,1)
                    print(""Enter search target:"")
                    searchKey = read()
                    activeInv = search(searchKey,itemList)
                    term.clear()
                    term.setCursorPos(1,1)
                    print(""Searching..."")

                elseif menuChoice == ""exit"" then
                    --if activeSearch = true then only go back to invList, not main menu
                    if activeSearch then
                        activeSearch = false
                        activeInv = itemList
                        menuChoice = """"
                    end
                end
            end

        elseif mainChoice == ""Dump"" then
            needToUpdate = true

            --error checking to make sure dump chest exists
            local newDumpChest = dumpChestCheck(outChest)
            if newDumpChest ~= outChest then
                outChest = newDumpChest
                outWrap = peripheral.wrap(outChest)

                --update save file
                settingsMenu[cursor].count = outChest
                data = {
                    settingsMenu = settingsMenu,
                    menuColors = menuColors
                }
                local file = fs.open(""inventorySettings.txt"",""w"")
                file.write(textutils.serialise(data))
                file.close()
            end

            if not dump(outWrap,wrapList) then
                term.setCursorPos(1,1)
                print(""Failed to dump all items!"")
                print(""Storage likely full"")
                print(""Press 'enter' to continue"")
                read()
                nameList = peripheral.getNames()
                wrapList = sortForInv(nameList,outChest)
            end

        elseif mainChoice == ""Update Item/Chest List"" then
            nameList = peripheral.getNames()
            wrapList = sortForInv(nameList,outChest)
            term.setCursorPos(1,1)
            print(""Getting item list..."")
            itemList = getItemList(wrapList)
            needToUpdate = false
    
        elseif mainChoice == ""Settings"" then
            while menuChoice ~= ""exit"" do
                cursor,menuChoice = openMenu(settingsMenu)

                if menuChoice == ""select"" then
                    --check to see if current option has .menu element
                    if settingsMenu[cursor].menu then
                        if settingsMenu[cursor].menu == ""colorOptions"" then
                            --inside a specific color
                            local toChange = cursor
                            cursor,menuChoice = openMenu(colorOptions)
                            if menuChoice == ""select"" then
                                --[[
                                    local menuColors = {
                                        title = colors.lightBlue,
                                        menu = colors.purple,
                                        text = colors.white,
                                        highlight = colors.pink,
                                        background = colors.black
                                    }
                                ]]
                                settingsMenu[toChange].count = colorOptions[cursor].name
                                print(""settingsMenu[""..toChange..""].count = ""..colorOptions[cursor].name)
                                local colorVal = 2^(cursor-1)
                                if toChange == 1 then
                                    menuColors.title = colorVal
                                    print(""title = ""..colorVal)
                                elseif toChange == 2 then
                                    menuColors.menu = colorVal
                                    print(""menu = ""..colorVal)
                                elseif toChange == 3 then
                                    menuColors.text = colorVal
                                    print(""text = ""..colorVal)
                                elseif toChange == 4 then
                                    menuColors.highlight = colorVal
                                    print(""highlight = ""..colorVal)
                                --elseif cursor == 5 then
                                --    menuColors.background = colorVal
                                end

                                --update saveFile
                                data = {
                                    settingsMenu = settingsMenu,
                                    menuColors = menuColors
                                }
                                local file = fs.open(""inventorySettings.txt"",""w"")
                                file.write(textutils.serialise(data))
                                file.close()
                            end
                        end
                    --[[
                    elseif settingsMenu[cursor].name == ""Reset Settings To Default"" then
                        print(""Old settings:"")
                        print(""Settings: ""..textutils.serialize(settingsMenu))
                        read()
                        print(""menu colors: ""..textutils.serialize(menuColors))
                        read()

                        settingsMenu = defaultSettings.settingsMenu
                        menuColors = defaultSettings.menuColors

                        local file = fs.open(""inventorySettings.txt"",""w"")
                        file.write(textutils.serialise(defaultSettings))
                        file.close()

                        print(""Reset settings:"")
                        print(""Settings: ""..textutils.serialize(settingsMenu))
                        read()
                        print(""menu colors: ""..textutils.serialize(menuColors))
                        read()
                    ]]

                    elseif settingsMenu[cursor].name == ""Dump Chest"" then
                        local lineLen = 15--15 = #"">Dump Chest< : ""
                        term.setCursorPos(lineLen,cursor+1)
                        term.setTextColor(menuColors.menu)
                        --update dump chest
                        local newDumpChest = read(nil,nil,nil,tostring(settingsMenu[cursor].count))

                        --error checking to make sure dump chest exists
                        if newDumpChest ~= outChest then
                            newDumpChest = dumpChestCheck(newDumpChest)
                        end

                        outChest = newDumpChest
                        outWrap = peripheral.wrap(outChest)
                    
                        --update save file
                        settingsMenu[cursor].count = outChest
                        data = {
                            settingsMenu = settingsMenu,
                            menuColors = menuColors
                        }
                        local file = fs.open(""inventorySettings.txt"",""w"")
                        file.write(textutils.serialise(data))
                        file.close()
                    end
                end
            end
        end
end"
9nxZ3bzy,ini_parser_test,Python253,Python,Wednesday 22nd of May 2024 10:09:09 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: ini_parser_test.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    - This script is an INI parser that allows users to parse INI-like configuration data from a string. 
    - It provides a menu-based interface for selecting various test scenarios.
    - These include parsing basic configuration settings, application settings, database credentials, and multi-section key-value pairs.

Requirements:
    - Python 3.x
    - io Module

Functions:
    - parse_ini(input_string):
        Parses INI-like configuration data from a string and returns the section name and a dictionary of key-value pairs.
    - line():
        Prints a line of dashes for visual separation.
    - display_menu():
        Displays menu options for selecting different test scenarios.
    - run_test(test_num):
        Runs the selected test scenario based on the user's choice.

Usage:
    - Run the script.
    - Select a test scenario from the menu by entering the corresponding number.
    - View the parsed results and continue to the menu to select another test or exit the script.

Additional Notes:
    - Ensure that the input strings for each test scenario are correctly formatted in the input_strings list.
    - The script includes verbose output during the parsing process to display the sections and key-value pairs found.
""""""

# Get Essential Imports
import io

def line():
    """"""
    Prints a line of dashes for visual separation.
    """"""
    print(""-"" * 40)

def parse_ini(input_string):
    """"""
    Parse INI-like configuration data from a string.

    Args:
        input_string (str): The input string containing INI-like configuration data.

    Returns:
        tuple: A tuple containing the section name and a dictionary of key-value pairs.
    """"""
    key_values = {}  # Dictionary to store key-value pairs
    section = None  # Current section name
    for line_num, line in enumerate(input_string.split(""\n""), start=1):
        # Strip leading and trailing whitespace from each line
        line = line.strip()
        if not line:
            continue  # Skip empty lines

        # Check if line represents a section header
        if line.startswith(""["") and line.endswith(""]""):
            section = line[1:-1]  # Extract section name
            print(f""Found section: [{section}]"")
        else:
            try:
                key, value = line.split(""="", 1)  # Split line into key and value
            except ValueError:
                raise ValueError(
                    f""Error parsing line {line_num}: '{line}'""
                )  # Handle invalid format
            # Store key-value pair in the dictionary
            key = key.strip()
            value = value.strip()
            print(f""Found key-value pair: '{key}' = '{value}'"")
            key_values[key] = value

    return section, key_values

def display_menu():
    """"""
    Display menu options.
    """"""
    line()
    print(""\t    INI Parser Menu:"")
    line()
    print(""1: Test 1 - Basic Configuration"")
    print(""2: Test 2 - Application Settings"")
    print(""3: Test 3 - Database Credentials"")
    print(""4: Test 4 - Multi-Sect & Key-Value Pairs"")
    print(""0: Exit"")

def run_test(test_num):
    """"""
    Run the selected test.

    Args:
        test_num (int): The number of the test to run.
    """"""
    input_strings = [
        ""[config]\n"" ""host = example.com\n"" ""port = 8080\n\n"",
        ""[settings]\n"" ""enabled = true\n"" ""debug_level = 2\n"" ""timeout = 30\n\n"",
        ""[database]\n"" ""username = admin\n"" ""password = leet1337\n\n"",
        ""[section1]\n""
        ""key1 = value1\n""
        ""key2 = value2\n\n""
        ""[section2]\n""
        ""key3 = value3\n""
        ""key4 = value4\n\n"",
    ]
    if test_num == ""0"":
        print(""\n    Program Exiting...   Goodbye!\n"")
        return
    try:
        input_string = input_strings[int(test_num) - 1]
    except IndexError:
        print(""\nInvalid selection!\nPlease choose a number between 0 and 4.\n"")
        return

    print(f""\nRunning Test {test_num} - {display_titles[int(test_num) - 1]}:\n"")

    # Create a file-like object from the input string
    file_obj = io.StringIO(input_string)

    # Parse the input string and get section name and key-value pairs
    section, key_values = parse_ini(file_obj.read())

    line()
    print(""\n\t  Test completed!\n"")
    line()
    input(""\nPress Enter to continue to the menu...\n"")

# Main Menu
display_titles = [
    ""Basic Configuration"",
    ""Application Settings"",
    ""Database Credentials"",
    ""Multi-Sect & Key-Value Pairs"",
]

while True:
    display_menu()
    choice = input(""\nSelect a test (0-4): "")
    line()
    if choice == ""0"":
        break
    elif choice in {""1"", ""2"", ""3"", ""4""}:
        run_test(choice)
    else:
        print(""\nInvalid selection!\nPlease choose a number between 0 and 4.\n"")

print(""\n    Program Exiting...   Goodbye!\n"")
line()
"
K3BqUMxT,div catalogo cuadrilla,catfooll,HTML,Wednesday 22nd of May 2024 10:05:05 PM CDT,"<!DOCTYPE html>
<html lang=""es"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Estilos CSS en HTML</title>
    <style>
        /* Definición de estilos CSS */
        .jugador {
            float: left; /* Alinear cada jugador a la izquierda */
            width: 50%; /* Establecer el ancho de cada jugador al 50% del contenedor */
            box-sizing: border-box; /* Incluir el padding y el borde en el ancho total */
            padding: 10px; /* Añadir un espacio alrededor de cada jugador */
        }
    </style>
</head>
<body>
    <!-- Contenido del cuerpo del documento -->
    <div class=""jugador"">
        <!-- Contenido del primer jugador -->
        <p>hola</p> <h2>hola</h2>
        <p>Jugador 1</p>
    </div>
    <div class=""jugador"">
        <!-- Contenido del segundo jugador -->
        <h2>hola</h2><p>hola</p>
        <p>Jugador 2</p>
    </div>
</body>
</html>"
QiCPXaDr,Rotate,stevenos,Bash,Wednesday 22nd of May 2024 10:05:03 PM CDT,"#!/bin/bash
# 安装依赖: ImageMagick ffmpeg

# 参数设置
IMAGE=""input.png""
OUTPUT=""output.gif""
DIRE=1
FRAME=30
DIFF=2
TEMP_DIR=""temp_frames""

help() {
    echo ""Usage:""
    echo ""$0 [-i input.png][-o output.gif]""
    echo ""[-c]逆时针旋转""
    echo ""[-f 30]帧率""
    echo ""[-d 2]每帧旋转角度""
    exit -1
}

while getopts 'i:o:cf:d:' opt; do
    case $opt in
        i)
            IMAGE=""$OPTARG""
            ;;
        o)
            OUTPUT=""$OPTARG""
            ;;
        c)
            DIRE=-1
            ;;
        f)
            FRAME=""$OPTARG""
            ;;
        d)
            DIFF=""$OPTARG""
            ;;
        ?)
            help
            ;;
    esac
done

if [ ! -f ""$IMAGE"" ]; then
    echo ""$IMAGE 文件不存在""
    help
fi

echo ""当前配置：
IMAGE=$IMAGE 
OUTPUT=$OUTPUT 
DIRE=$DIRE 
FRAME=$FRAME 
DIFF=$DIFF 
TEMP_DIR=$TEMP_DIR \
""


# 创建临时目录
mkdir -p $TEMP_DIR

# 计算总帧数
TOTAL_FRAMES=$((360 / DIFF))

echo ""正在生成图像帧$TOTAL_FRAMES""
# 旋转图像并生成帧
for ((i=0; i<TOTAL_FRAMES; i++)); do
    ANGLE=$((i * DIFF * DIRE))
    convert $IMAGE -background ""#99ccff"" -rotate $ANGLE -gravity center -extent $(identify -format ""%wx%h"" $IMAGE) $TEMP_DIR/frame_$i.png
done

echo ""正在拼接gif""
# 使用 ffmpeg 将帧转换为 gif
ffmpeg -framerate $FRAME -i $TEMP_DIR/frame_%d.png -vf ""scale=trunc(iw/2)*2:trunc(ih/2)*2"" -loop 0 $OUTPUT

# 清理临时文件
rm -r $TEMP_DIR

echo ""
GIF 已生成: $OUTPUT""
"
ZdXzDSw1,penerima,BimoSora,C++,Wednesday 22nd of May 2024 10:01:14 PM CDT,"#include <ArduinoJson.h>

int in1 = 2;
int in2 = 3;
int in3 = 4;
int in4 = 5;

int lightll = 8;
int lightrr = 10;
int seinll = 9;
int seinrr = 11;

unsigned long previousMillis = 0; // will store last time LED was updated
const long interval = 500;        // interval at which to blink (milliseconds)
int ledState = HIGH;              // ledState used to set the LED
boolean state = false;

unsigned long previousMillis2 = 0; // will store last time LED was updated
const long interval2 = 500;        // interval at which to blink (milliseconds)
int ledState2 = HIGH;
boolean state2 = false;

const char* up;
const char* down;
const char* left;
const char* right;
const char* stop;
const char* lightoff;
const char* light;
const char* seinloff;
const char* seinl;
const char* seinroff;
const char* seinr;

void setup() {
  // Initialize Serial port
  Serial.begin(9600);
  while (!Serial) continue;

  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  
  pinMode(lightll, OUTPUT);
  pinMode(lightrr, OUTPUT);
  pinMode(seinll, OUTPUT);
  pinMode(seinrr, OUTPUT);

  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
  
  digitalWrite(lightll, HIGH);
  digitalWrite(lightrr, HIGH);
  digitalWrite(seinll, HIGH);
  digitalWrite(seinrr, HIGH);
}

void loop() {
  JsonDocument doc;
  
  DeserializationError error = deserializeJson(doc, Serial);
  if (error) {
    Serial.print(F(""deserializeJson() failed: ""));
    Serial.println(error.c_str());
    return;
  }

  up = doc[""up""]; // ""up""
  down = doc[""down""]; // ""down""
  left = doc[""left""]; // ""left""
  right = doc[""right""]; // ""right""
  stop = doc[""stop""]; // ""stop""
  lightoff = doc[""lightoff""]; // ""lightoff""
  light = doc[""light""]; // ""light""
  seinloff = doc[""seinloff""]; // ""seinloff""
  seinl = doc[""seinl""]; // ""seinl""
  seinroff = doc[""seinroff""]; // ""seinroff""
  seinr = doc[""seinr""]; // ""seinr""

  if (up == ""a"") {
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    digitalWrite(in3, HIGH);
    digitalWrite(in4, LOW);
  }

  if (down == ""b"") {
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH);
  }

  if (left == ""c"") {
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
    digitalWrite(in3, LOW);
    digitalWrite(in4, LOW);
  }

  if (right == ""d""){
    digitalWrite(in1, LOW);
    digitalWrite(in2, LOW);
    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH);
  }

  if (stop == ""e"") {
    digitalWrite(in1, LOW);
    digitalWrite(in2, LOW);
    digitalWrite(in3, LOW);
    digitalWrite(in4, LOW);
  }

  if (lightoff == ""f"") {
    digitalWrite(lightll, HIGH);
    digitalWrite(lightrr, HIGH);
  }

  if (light == ""g""){
    digitalWrite(lightll, LOW);
    digitalWrite(lightrr, LOW);
  }

  if (seinloff == ""h"") {
    digitalWrite(seinll, HIGH);
    digitalWrite(seinrr, HIGH);
    state = false;
    state2 = false;
  }

  if (seinl == ""i"") {
    digitalWrite(seinll, LOW);
    digitalWrite(seinrr, HIGH);
    state = true;
    state2 = false;
  }

  if (seinroff == ""j"") {
    digitalWrite(seinrr, HIGH);
    digitalWrite(seinll, HIGH);
    state2 = false;
    state = false;
  }

  if (seinr == ""k"") {
    digitalWrite(seinrr, LOW);
    digitalWrite(seinll, HIGH);
    state2 = true;
    state = false;
  }
  
  if (state) {
    Blink();
  } else {
    digitalWrite(seinll, HIGH); // ensure it's off in case it was still on
  }

  if (state2) {
    Blink2();
  } else {
    digitalWrite(seinrr, HIGH); // ensure it's off in case it was still on
  }
}

void Blink() {
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    ledState = !ledState;
    digitalWrite(seinll, ledState);
  }
}

void Blink2() {
  unsigned long currentMillis2 = millis();
  if (currentMillis2 - previousMillis2 >= interval2) {
    previousMillis2 = currentMillis2;
    ledState2 = !ledState2;
    digitalWrite(seinrr, ledState2);
  }
}"
Rbfhgpcu,pengirim,BimoSora,C++,Wednesday 22nd of May 2024 10:00:55 PM CDT,"#include <Arduino.h>
#ifdef ESP32
#include <WiFi.h>
#include <AsyncTCP.h>
#elif defined(ESP8266)
#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#endif
#include <ESPAsyncWebServer.h>
#include <FS.h>
#include <ArduinoJson.h>

/* Put your SSID & Password */
const char* ssid = ""RC Car"";  // Enter SSID here
const char* password = ""12345678"";  // Enter Password here

/* Put IP Address details */
IPAddress local_ip(192,168,1,1);
IPAddress gateway(192,168,1,1);
IPAddress subnet(255,255,255,0);

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);


String up = """";
String down = """";
String left = """";
String right = """";
String stop = """";
String lightoff = """";
String light = """";
String seinloff = """";
String seinl = """";
String seinroff = """";
String seinr = """";

void setup() {
  Serial.begin(9600);
  Serial.println();

  if (SPIFFS.begin()) {
    Serial.println(""SPIFFS initialised OK"");
  } else {
    Serial.println(""SPIFFS initialisation failed"");
  }

  WiFi.softAP(ssid, password);
  WiFi.softAPConfig(local_ip, gateway, subnet);
  delay(100);

  // Route for root / web page
  server.on(""/"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/index.html"", ""text/html"");
  });

  // Define routes for other assets
  server.on(""/assets/css/foundation.css"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/css/foundation.css"", ""text/css"");
  });
  server.on(""/assets/js/vendor.js"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/js/vendor.js"", ""text/javascript"");
  });
  server.on(""/assets/js/foundation.js"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/js/foundation.js"", ""text/javascript"");
  });

  // Define routes for image assets
  server.on(""/assets/img/up.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/up.png"", ""image/png"");
  });
  server.on(""/assets/img/left.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/left.png"", ""image/png"");
  });
  server.on(""/assets/img/stop.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/stop.png"", ""image/png"");
  });
  server.on(""/assets/img/right.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/right.png"", ""image/png"");
  });
  server.on(""/assets/img/down.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/down.png"", ""image/png"");
  });
  server.on(""/assets/img/light.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/light.png"", ""image/png"");
  });
  server.on(""/assets/img/lightoff.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/lightoff.png"", ""image/png"");
  });
  server.on(""/assets/img/seinl.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/seinl.png"", ""image/png"");
  });
  server.on(""/assets/img/seinloff.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/seinloff.png"", ""image/png"");
  });
  server.on(""/assets/img/seinr.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/seinr.png"", ""image/png"");
  });
  server.on(""/assets/img/seinroff.png"", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(SPIFFS, ""/assets/img/seinroff.png"", ""image/png"");
  });

  // Define routes for control commands
  server.on(""/up"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('a');
    up = ""a"";
    request->send(200, ""text/plain"", ""ok"");
  });
  server.on(""/down"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('b');
    down = ""b"";
    request->send(200, ""text/plain"", ""ok"");
  });
  server.on(""/left"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('c');
    left = ""c"";
    request->send(200, ""text/plain"", ""ok"");
  });
  server.on(""/right"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('d');
    right = ""d"";
    request->send(200, ""text/plain"", ""ok"");
  });
  server.on(""/stop"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('e');
    stop = ""e"";
    request->send(200, ""text/plain"", ""ok"");
  });

  server.on(""/lightoff"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('f');
    lightoff = ""f"";
    request->send(200, ""text/plain"", ""ok"");
  });
  server.on(""/light"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('g');
    light = ""g"";
    request->send(200, ""text/plain"", ""ok"");
  });
  server.on(""/seinloff"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('h');
    seinloff = ""h"";
    request->send(200, ""text/plain"", ""ok"");
  });
  server.on(""/seinl"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('i');
    seinl = ""i"";
    request->send(200, ""text/plain"", ""ok"");
  });
  server.on(""/seinroff"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('j');
    seinroff = ""j"";
    request->send(200, ""text/plain"", ""ok"");
  });
  server.on(""/seinr"", HTTP_GET, [] (AsyncWebServerRequest *request) {
    Serial.println('k');
    seinr = ""k"";
    request->send(200, ""text/plain"", ""ok"");
  });

  // Start server
  server.begin();
}

void loop() {
  // Create the JSON document
  JsonDocument doc;
  
  doc[""up""] = ""up"";
  doc[""down""] = ""down"";
  doc[""left""] = ""left"";
  doc[""right""] = ""right"";
  doc[""stop""] = ""stop"";
  doc[""lightoff""] = ""lightoff"";
  doc[""light""] = ""light"";
  doc[""seinloff""] = ""seinloff"";
  doc[""seinl""] = ""seinl"";
  doc[""seinroff""] = ""seinroff"";
  doc[""seinr""] = ""seinr"";
  
  String Serial;
  doc.shrinkToFit();  // optional
  serializeJson(doc, Serial);
}"
GrE4s4ae,smart_pointer_test,Python253,Python,Wednesday 22nd of May 2024 09:36:59 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: smart_pointer_test.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
:: Python Smart Pointer Test ::

Description:
    - This script demonstrates smart pointer behavior through test scenarios.
    - It includes scenarios for moving null pointers and moving non-null pointers.

Requirements:
    - Python 3.x

Functions:
    - move_constructor_or_get(): Executes test scenarios to demonstrate smart pointer behavior.

Usage:
    - Run the script, and it will execute the test scenarios.
    - Review the output to observe the behavior of smart pointers.

Additional Notes:
    - In the Python version, UniquePtr is implemented as a simple class that wraps a pointer.
    - It doesn't perform manual memory management due to Python's automatic garbage collection.
    - However, it serves the same purpose conceptually, providing a way to manage ownership of objects.
""""""

class UniquePtr:
    """"""A simple smart pointer class managing ownership of a pointer.""""""

    def __init__(self, ptr):
        """"""Initialize the UniquePtr with a pointer.""""""
        self.ptr = ptr

    def __del__(self):
        """"""Destructor to clean up the pointer.""""""
        del self.ptr

class Spy:
    """"""A class used for tracking copy operations and deletions.""""""

    def __init__(self, is_deleted, copy_count):
        """"""Initialize Spy object with deletion status and copy count.""""""
        self.is_deleted = is_deleted
        self.copy_count = copy_count

    def __del__(self):
        """"""Destructor to mark the object as deleted.""""""
        self.is_deleted = True

def line():
    """"""
    Prints a line of dashes for visual separation.
    """"""
    print(""-"" * 67)

def move_constructor_or_get():
    """"""Tests scenarios to demonstrate smart pointer behavior.""""""
    line()
    print(""\n  :: [Testing scenarios to demonstrate smart pointer behavior] ::\n"")

    # Scenario 1: Moving null pointers
    line()
    print(""Scenario 1: \t[Moving null pointers]\n"")
    print(""- Creating a UniquePtr with a null pointer..."")
    uptr = UniquePtr(None)
    uptr2 = UniquePtr(uptr.ptr)
    print(""- Verifying that both pointers are null..."")
    assert uptr.ptr is None
    assert uptr2.ptr is None
    print(""\n\t\t[Both pointers are null as expected]"")
    print(""\nScenario 1: \t[Moving null pointers]\t\t\t  [Passed!]"")

    # Scenario 2: Moving non-null pointers
    line()
    print(""Scenario 2: \t[Moving non-null pointers]\n"")
    print(""- Creating a Spy object and wrapping it in a UniquePtr..."")
    copy_count = 0
    is_deleted = False
    ptr = Spy(is_deleted, copy_count)
    uptr = UniquePtr(ptr)
    print(""- Moving the UniquePtr to another UniquePtr..."")
    uptr2 = UniquePtr(uptr.ptr)
    print(""- Verifying ownership transfer and copy count..."")
    assert uptr.ptr is ptr
    assert uptr2.ptr is ptr
    assert copy_count == 0
    print(""\n\t\t[Ownership transferred successfully]"")
    print(""\t\t[Copy count is as expected]"")
    print(""\nScenario 2: \t[Moving non-null pointers]\t\t  [Passed!]"")

if __name__ == ""__main__"":
    move_constructor_or_get()
    line()
    print(""\n\t\tAll test scenarios passed successfully.\n\t\t   Exiting Program...    GoodBye!\n"")
    line()
"
sCNmFCPe,custom_hotkey_manager_cli,Python253,Python,Wednesday 22nd of May 2024 09:04:09 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: custom_hotkey_manager_cli.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
:: Windows Custom Hotkey Manager CLI Tool ::

Description:
    - This script is a command-line interface (CLI) tool designed for managing and creating custom hotkeys in Windows.
    - It allows users to define custom hotkey sequences for launching specific programs and provides a predefined set of useful hotkeys for various Windows actions.
    - By interacting with the script, users can easily create and manage custom hotkeys without needing to access system settings directly.
    - Additionally, the script saves custom hotkeys to a JSON file, ensuring they are persistent across sessions.

Requirements:
    - This script is designed primarily for Windows 10 and newer versions, but many functions are compatible with older versions as far back as Windows 7.
      (SEE COMPATIBILITY BELOW FOR FURTHER DETAILS)
    - It requires Python 3.x and the `keyboard` library to be installed on the system.
    - The script requires administrative privileges to set some hotkeys.

Usage:
    - Run the script in a terminal or command prompt.
    - Follow the on-screen instructions to create or manage hotkeys.

Compatibility:
    - Windows 10 and Windows 11:
        These hotkeys are fully supported.
    - Windows 8 and Windows 8.1:
        Most of these hotkeys are supported, though some features (like virtual desktops) were not introduced until Windows 10.
    - Windows 7:
        Basic hotkeys like opening the start menu, maximizing windows, and taking screenshots are supported,
        but many of the newer features like virtual desktops and some accessibility functions are not present.

Note:
    - This script will work on Windows 7 and up, but some features may not be available in older versions.
      If a feature is not present, the script will handle it gracefully by returning to the menu without errors.

Functions:
    1. select_program():
       - Opens the Program Files directory in File Explorer, allowing users to select a program.

    2. load_hotkeys():
       - Loads predefined and custom hotkeys from a JSON file. If the file does not exist, it initializes with predefined hotkeys.

    3. save_hotkeys(hotkeys):
       - Saves the current hotkeys configuration to a JSON file.

    4. get_hotkey_input():
       - Captures a custom hotkey sequence from the user. The sequence ends when the 'Esc' key is pressed.

    5. create_custom_hotkey():
       - Allows users to create a custom hotkey by selecting a program and assigning a hotkey sequence to it. Saves the custom hotkey to the JSON file.

Additional Notes:
    - Ensure that the script is run with appropriate permissions, especially when setting system-wide hotkeys.
    - Users should exercise caution when assigning hotkeys to avoid conflicts with existing system hotkeys.
""""""

import json
import keyboard
import os

# Predefined hotkeys
PREDEFINED_HOTKEYS = {
    ""open_start_menu"": [""win""],
    ""open_secret_start_menu"": [""win"", ""x""],
    ""cycle_through_taskbar"": [""win"", ""t""],
    ""go_to_nth_application"": [""win"", ""[n]""],
    ""show_all_running_applications"": [""win"", ""tab""],
    ""show_hide_desktop"": [""win"", ""d""],
    ""minimize_all_windows"": [""ctrl"", ""m""],
    ""temporary_show_desktop"": [""win"", "",""],
    ""magnify_screen_content"": [""win"", ""plus""],
    ""maximize_window"": [""win"", ""up""],
    ""maximize_window_vertically"": [""win"", ""shift"", ""up""],
    ""move_window_to_left_monitor"": [""custom""],
    ""move_window_to_right_monitor"": [""custom""],
    ""take_rectangular_screenshot"": [""win"", ""shift"", ""s""],
    ""take_full_screenshot"": [""win"", ""printscreen""],
    ""create_new_virtual_desktop"": [""win"", ""ctrl"", ""d""],
    ""move_between_virtual_desktops_left"": [""win"", ""ctrl"", ""left""],
    ""move_between_virtual_desktops_right"": [""win"", ""ctrl"", ""right""],
    ""close_current_virtual_desktop"": [""win"", ""ctrl"", ""f4""],
    ""open_action_center"": [""win"", ""a""],
    ""open_search"": [""win"", ""s""],
    ""open_new_edge_tab"": [""win"", ""c""],
    ""open_windows_settings"": [""win"", ""i""],
    ""connect_sidebar"": [""win"", ""k""],
    ""use_voice_typing"": [""win"", ""h""],
    ""lock_computer"": [""win"", ""l""],
    ""lock_screen_orientation"": [""win"", ""o""],
    ""open_presentation_sidebar"": [""win"", ""p""],
    ""open_ease_of_access_center"": [""win"", ""u""],
    ""select_from_clipboard_history"": [""win"", ""v""],
    ""set_focus_to_notification_area"": [""win"", ""b""],
    ""open_emoji_panel"": [""win"", "".""],
    ""start_stop_narrator"": [""win"", ""ctrl"", ""enter""],
    ""quick_language_list"": [""win"", ""space""],
    ""open_system_control_panel"": [""win"", ""pause""],
    ""start_task_manager"": [""ctrl"", ""shift"", ""esc""],
    ""start_on_screen_keyboard"": [""ctrl"", ""win"", ""o""],
    ""open_office_application_w"": [""ctrl"", ""shift"", ""alt"", ""win"", ""w""],
    ""open_office_application_p"": [""ctrl"", ""shift"", ""alt"", ""win"", ""p""],
    ""open_office_application_x"": [""ctrl"", ""shift"", ""alt"", ""win"", ""x""],
    ""open_office_application_o"": [""ctrl"", ""shift"", ""alt"", ""win"", ""o""],
    ""open_office_application_t"": [""ctrl"", ""shift"", ""alt"", ""win"", ""t""],
    ""open_office_application_d"": [""ctrl"", ""shift"", ""alt"", ""win"", ""d""],
    ""open_office_application_n"": [""ctrl"", ""shift"", ""alt"", ""win"", ""n""],
    ""open_office_application_l"": [""ctrl"", ""shift"", ""alt"", ""win"", ""l""],
    ""open_office_application_y"": [""ctrl"", ""shift"", ""alt"", ""win"", ""y""],
}

def select_program():
    """"""
    Opens the Program Files directory in File Explorer, allowing users to select a program.

    This function is used to assist users in locating and selecting the executable file for a program they wish to assign a custom hotkey to.
    """"""
    os.system(""explorer C:\\Program Files (x86)"")

def load_hotkeys():
    """"""
    Loads predefined and custom hotkeys from a JSON file.

    Returns:
        dict: A dictionary containing both predefined and custom hotkeys. Initializes with predefined hotkeys if the file does not exist.
    """"""
    try:
        with open(""hotkeys.json"", ""r"") as file:
            hotkeys = json.load(file)
    except FileNotFoundError:
        hotkeys = {""known"": PREDEFINED_HOTKEYS, ""custom"": {}}
    return hotkeys

def save_hotkeys(hotkeys):
    """"""
    Saves the current hotkeys configuration to a JSON file.

    Args:
        hotkeys (dict): A dictionary containing both predefined and custom hotkeys to be saved.
    """"""
    with open(""hotkeys.json"", ""w"") as file:
        json.dump(hotkeys, file, indent=4)

def get_hotkey_input():
    """"""
    Captures a custom hotkey sequence from the user. The sequence ends when the 'Esc' key is pressed.

    Returns:
        list: A list of strings representing the custom hotkey sequence entered by the user.
    """"""
    print(""Press your custom hotkey sequence. Press 'Esc' to finish input."")
    hotkey = []
    modifiers = set()  # Track pressed modifier keys
    while True:
        key = keyboard.read_event(suppress=True)
        if key.event_type == ""down"":
            if key.name == ""esc"":
                break
            elif key.name in [""shift"", ""ctrl"", ""alt"", ""win""]:
                modifiers.add(key.name)
            else:
                hotkey.append(""+"".join(modifiers))
                hotkey.append(key.name)
                modifiers.clear()
                print(""Current input:"", ""+"".join(hotkey))
    return hotkey

def create_custom_hotkey():
    """"""
    Allows users to create a custom hotkey by selecting a program and assigning a hotkey sequence to it. Saves the custom hotkey to the JSON file.

    This function guides the user through the process of defining a new hotkey sequence and associating it with a specific program.
    """"""
    hotkeys = load_hotkeys()
    hotkey = get_hotkey_input()
    hotkey_str = ""+"".join(hotkey)
    print(""Your input:"", hotkey_str)
    if hotkey_str in hotkeys[""known""]:
        print(
            f""The hotkey '{hotkey_str}' already exists for {hotkeys['known'][hotkey_str]}.""
        )
        print(
            ""Do you want to overwrite it or input a different sequence? (1 to Overwrite, 0 to Input Different)""
        )
        choice = input().strip()
        if choice == ""0"":
            return
    elif hotkey_str in hotkeys[""custom""]:
        print(
            f""The hotkey '{hotkey_str}' already exists for {hotkeys['custom'][hotkey_str]}.""
        )
        print(
            ""Do you want to overwrite it or input a different sequence? (1 to Overwrite, 0 to Input Different)""
        )
        choice = input().strip()
        if choice == ""0"":
            return
    select_program()  # Open file explorer
    program_path = input(""Enter the program path or select the program file: "").strip()
    hotkeys[""custom""][hotkey_str] = program_path
    save_hotkeys(hotkeys)

if __name__ == ""__main__"":
    create_custom_hotkey()
"
nukFrER8,RAII-UniquePtr,cepxuozab,C++,Wednesday 22nd of May 2024 08:52:15 PM CDT,"struct Spy {
        explicit Spy(bool& is_deleted, int& copy_count)
                : is_deleted_(is_deleted), copy_count_(copy_count) {}

        Spy(const Spy& rhs)
                : is_deleted_(rhs.is_deleted_), copy_count_(rhs.copy_count_) {
            ++copy_count_;
        }
        ~Spy() {
            is_deleted_ = true;
        }

        bool& is_deleted_;
        int& copy_count_;
    };

void MoveConstructorOrGet() {
        {
            UniquePtr<Spy> uptr(nullptr);
            UniquePtr<Spy> uptr2(std::move(uptr));

            ASSERT_EQUAL(uptr.Get(), nullptr);
            ASSERT_EQUAL(uptr2.Get(), nullptr);
        } {
            int copy_count_ = 0;
            bool is_deleted = false;
            auto *ptr = new Spy(is_deleted, copy_count_);
            UniquePtr<Spy> uptr(ptr);
            UniquePtr<Spy> uptr2(std::move(uptr));

            ASSERT_EQUAL(uptr.Get(), nullptr);
            ASSERT_EQUAL(uptr2.Get(), ptr)
            ASSERT_EQUAL(copy_count_, 0)
        }
    }"
XWKJ7GqD,win_sign_in_cli,Python253,Python,Wednesday 22nd of May 2024 08:47:12 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: win_sign_in_cli.py
# Version: 1.0.3
# Author: Jeoi Reqi

""""""
Windows 11 Sign-in CLI Tool

This script is a command-line interface (CLI) tool designed for managing sign-in options and password settings in Windows 11.
It provides users with a menu-driven interface to perform actions such as changing sign-in methods and enabling or disabling the user password at Windows startup.
By interacting with the script, users can easily navigate through various sign-in options and password settings without the need to access system settings directly.
Additionally, the script ensures a seamless user experience by automatically returning to the main menu after each action, allowing users to perform multiple tasks efficiently.

Requirements:
    - This script is designed for Windows 11.
    - It requires Python 3.x to be installed on the system.

Usage:
    - Run the script in a terminal or command prompt.
    - Follow the on-screen menu instructions to perform desired actions.

Functions:
    1. change_sign_in_method():
       - Opens the sign-in options control panel, allowing users to change their sign-in method using the Windows settings.

    2. enable_disable_password():
       - Opens the Advanced User Account Control Panel (netplwiz), enabling or disabling the user password at Windows startup.
         Note: This function requires elevated permissions to edit the user account settings.

Additional Notes:
    - Ensure that the script is run with appropriate permissions, especially when using the 'enable_disable_password()' function.
    - Users should exercise caution when making changes to sign-in options and password settings, as it may impact system security.
    - To apply the changes completely, you will need to log off and sign in again.
""""""

# Get Essential Imports
import os
import sys

# Function to open sign-in options control panel
def change_sign_in_method():
    print(""Opening Sign-in options page..."")
    os.system(""start ms-settings:signinoptions"")

# Function to enable or disable the user password at windows startup
def enable_disable_password():
    print(
        ""Opening netplwiz...\n\n::Open the Advanced User Account Control Panel::\n\t::(Flashing Shield In The Taskbar)::\n\nMake your selection:\n::🗹 Check To Enable::\n::☐ Uncheck To Disable::\n""
    )
    os.system(""start netplwiz"")  # This requires elevated permissions to edit

def header():
    print(
        """"""
          .---.
         /    |\________________
        ( ()  | ________   _   _)
         \    |/        | | | |
          `---'         '-' |_|
            """"""
    )

def main():
    while True:
        header()
        print(""\nWelcome to Windows 11 Sign-in Options Menu"")
        print(""------------------------------------------\n"")
        print(""1. Change Sign-in Method"")
        print(""2. Enable\Disable Password"")
        print(""0. Exit"")

        choice = input(""\nEnter the number of your choice: "")
        print(""------------------------------------------\n"")

        if choice == ""1"":
            change_sign_in_method()
        elif choice == ""2"":
            enable_disable_password()
        elif choice == ""0"":
            print(""Exiting program...   Goodbye!"")
            sys.exit()  # Exit the program
        else:
            print(""Invalid choice! Please enter a valid option.\n"")
            print(""------------------------------------------\n"")
        input(""Press Enter to return to the menu...\n\n\n\n\n"")

if __name__ == ""__main__"":
    main()

"
yTmUFBM6,keystroke_recorder,Python253,Python,Wednesday 22nd of May 2024 08:26:42 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: keystroke_recorder.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    - This script monitors and logs keystrokes to a text file.
    - It uses the pynput library to listen for keyboard events and logs each keystroke with a timestamp.
    - The script prompts the user to start and stop monitoring, and to exit gracefully.

Functions:
    - on_press(key):
        Logs each key press to a text file with a timestamp.
    - monitor_input():
        Prompts the user to start and stop monitoring, and to exit the program.

Requirements:
    - Python 3.x
    - Pynput Module (install using `pip install pynput`)
   
Usage:
    - Run the script using `python keystroke_recorder.py`.
    - Follow the prompts in the terminal to start monitoring, stop monitoring, and exit the program.

Example Expected Output:

    2020-04-20 18:16:26.210462: Key.enter
    2020-04-20 18:16:35.858730: t
    2020-04-20 18:16:36.041972: e
    2020-04-20 18:16:36.265978: s
    2020-04-20 18:16:36.506444: t
    2020-04-20 18:16:37.178961: Key.space
    2020-04-20 18:16:37.686928: k
    2020-04-20 18:16:37.836686: e
    2020-04-20 18:16:38.111881: y
    2020-04-20 18:16:38.363728: s
    2020-04-20 18:16:38.565703: t
    2020-04-20 18:16:38.721222: r
    2020-04-20 18:16:39.167719: o
    2020-04-20 18:16:39.399612: k
    2020-04-20 18:16:39.618355: e
    2020-04-20 18:16:39.894371: Key.space
    2020-04-20 18:16:40.355300: r
    2020-04-20 18:16:40.572588: e
    2020-04-20 18:16:40.881969: c
    2020-04-20 18:16:41.117424: o
    2020-04-20 18:16:41.482916: r
    2020-04-20 18:16:41.766971: d
    2020-04-20 18:16:41.976781: e
    2020-04-20 18:16:42.208465: r

Additional Notes:
    - Ensure that you have the necessary permissions to run the script.
    - The script logs all keystrokes, including special keys like Enter, Space, and others.
""""""

from pynput.keyboard import Key, Listener
import datetime
import threading
import os

# Set up the text file
txt_file = ""keystrokes.txt""
stop_flag = threading.Event()

def on_press(key):
    """"""
    Logs each key press to a text file with a timestamp.

    Args:
        key: The key that was pressed.
    """"""
    with open(txt_file, ""a"", encoding=""utf-8"") as f:
        if hasattr(key, ""char""):
            f.write(f""{datetime.datetime.now()}: {key.char}\n"")
        else:
            f.write(f""{datetime.datetime.now()}: {key}\n"")
    if stop_flag.is_set():
        return False  # Stop the listener

def monitor_input():
    """"""
    Prompts the user to start and stop monitoring, and to exit the program.
    """"""
    input(""Press Enter to start monitoring...\n"")

    print(""Monitoring keystrokes...\n"")

    input(""Press Enter to stop...\n"")

    print(""Saving log to:"")
    print(f""- {os.getcwd()}/{txt_file}\n"")
    stop_flag.set()

    print(""Keystrokes saved to:"")
    print(f""- {os.path.abspath(txt_file)}\n"")

    input(""Press Enter to exit...\n"")

# Create a listener thread
listener_thread = threading.Thread(target=Listener(on_press=on_press).start)

# Start the listener thread
listener_thread.start()

# Monitor user input
monitor_input()

# Wait for the listener thread to finish
listener_thread.join()

print(""Program exited... Goodbye!"")
"
HfVMjvJW,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🎁,ssss50w,GetText,Wednesday 22nd of May 2024 08:23:07 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
23 May 2024"
fQyzzjCd,centerofmass.py,Hustinyano,Python,Wednesday 22nd of May 2024 07:59:12 PM CDT,"import numpy as np
import matplotlib.pyplot as plt
import scipy.integrate as integrate

def CubicNatural(x, y):
    m = x.size # m is the number of data points
    n = m-1
    a = np.zeros(m)
    b = np.zeros(n)
    c = np.zeros(m)
    d = np.zeros(n)
    for i in range(m):
        a[i] = y[i]
    h = np.zeros(n)
    for i in range(n):
        h[i] = x[i+1] - x[i]
    u = np.zeros(n)
    u[0] = 0
    for i in range(1, n):
        u[i] = 3*(a[i+1]-a[i])/h[i]-3*(a[i]-a[i-1])/h[i-1]
    s = np.zeros(m)
    z = np.zeros(m)
    t = np.zeros(n)
    s[0] = 1
    z[0] = 0
    t[0] = 0
    for i in range(1, n):
        s[i] = 2*(x[i+1]-x[i-1])-h[i-1]*t[i-1]
        t[i] = h[i]/s[i]
        z[i]=(u[i]-h[i-1]*z[i-1])/s[i]
    s[m-1] = 1
    z[m-1] = 0
    c[m-1] = 0
    for i in np.flip(np.arange(n)):
        c[i] = z[i]-t[i]*c[i+1]
        b[i] = (a[i+1]-a[i])/h[i]-h[i]*(c[i+1]+2*c[i])/3
        d[i] = (c[i+1]-c[i])/(3*h[i])
    return a, b, c, d

def CubicNaturalEval(w, x, coeff):
    m = x.size
    if w<x[0] or w>x[m-1]:
        print('error: spline evaluated outside its domain')
        return
    n = m-1
    p = 0
    for i in range(n):
        if w <= x[i+1]:
            break
        else:
            p += 1
    # p is the number of the subinterval w falls into, i.e., p=i means
    # w falls into the ith subinterval $(x_i,x_{i+1}), and therefore
    # the value of the spline at w is
    # a_i+b_i*(w-x_i)+c_i*(w-x_i)^2+d_i*(w-x_i)^3.
    a = coeff[0]
    b = coeff[1]
    c = coeff[2]
    d = coeff[3]
    return a[p]+b[p]*(w-x[p])+c[p]*(w-x[p])**2+d[p]*(w-x[p])**3

xaxis = np.linspace(0, 14.875, 100)

xi = np.array([0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.5, 13, 13.5, 14, 14.5, 14.875])  # Replace with your data points
yi = np.array([0.44, 1.5, 2.875, 4.125, 5.5, 6.875, 8.25, 9.25, 9.375, 9.25, 8.75, 8, 7.375, 6.875, 6.375, 6.375, 6.625, 7.25, 8, 8.25, 7.5, 5.625, 5.25, 5, 5, 5.125, 5.625, 6.375, 7, 7.5, 8.25])  # Replace with your function values at x_data points

for i in CubicNatural(xi,yi):
    print(i)

coeff = CubicNatural(xi, yi)

def f(x):
    return CubicNaturalEval(x, xi, coeff)

def g(x):
    return (f(x)**2)/2

def h(x):
    return (x*f(x))

cuts = 30

#----Trapezoidal Rule Integration----

part = np.linspace(0,14.875,cuts)
fpart = np.zeros(cuts)
gpart = np.zeros(cuts)
hpart = np.zeros(cuts)

for i in range(cuts):
    fpart[i] = f(part[i])
    gpart[i] = g(part[i])
    hpart[i] = h(part[i])


print(""Sfdx = "", np.trapz(fpart))
print(""Sgdx = "", np.trapz(gpart))
print(""Shdx = "", np.trapz(hpart))

print(""x = "", np.trapz(hpart)/np.trapz(fpart))
print(""y = "", np.trapz(gpart)/np.trapz(fpart))

#------------------------------------


#Alternative version below

# Sf, err = integrate.quad(f, 0, 14.875)
# Sg, err = integrate.quad(g, 0, 14.875)
# Sh, err = integrate.quad(h, 0, 14.875)

# print(""Sf(x)dx="", Sf)
# print(""Sg(x)dx="", Sg)
# print(""Sh(x)dx="", Sh)

# print(""x = "", Sh/Sf)
# print(""y = "", Sg/Sf)

"
1FTVR3yy,naturalcubicspline.py,Hustinyano,Python,Wednesday 22nd of May 2024 07:56:19 PM CDT,"import numpy as np
import matplotlib.pyplot as plt

def CubicNatural(x, y):
    m = x.size # m is the number of data points
    n = m-1
    a = np.zeros(m)
    b = np.zeros(n)
    c = np.zeros(m)
    d = np.zeros(n)
    for i in range(m):
        a[i] = y[i]
    h = np.zeros(n)
    for i in range(n):
        h[i] = x[i+1] - x[i]
    u = np.zeros(n)
    u[0] = 0
    for i in range(1, n):
        u[i] = 3*(a[i+1]-a[i])/h[i]-3*(a[i]-a[i-1])/h[i-1]
    s = np.zeros(m)
    z = np.zeros(m)
    t = np.zeros(n)
    s[0] = 1
    z[0] = 0
    t[0] = 0
    for i in range(1, n):
        s[i] = 2*(x[i+1]-x[i-1])-h[i-1]*t[i-1]
        t[i] = h[i]/s[i]
        z[i]=(u[i]-h[i-1]*z[i-1])/s[i]
    s[m-1] = 1
    z[m-1] = 0
    c[m-1] = 0
    for i in np.flip(np.arange(n)):
        c[i] = z[i]-t[i]*c[i+1]
        b[i] = (a[i+1]-a[i])/h[i]-h[i]*(c[i+1]+2*c[i])/3
        d[i] = (c[i+1]-c[i])/(3*h[i])
    return a, b, c, d

def CubicNaturalEval(w, x, coeff):
    m = x.size
    if w<x[0] or w>x[m-1]:
        print('error: spline evaluated outside its domain')
        return
    n = m-1
    p = 0
    for i in range(n):
        if w <= x[i+1]:
            break
        else:
            p += 1
    # p is the number of the subinterval w falls into, i.e., p=i means
    # w falls into the ith subinterval $(x_i,x_{i+1}), and therefore
    # the value of the spline at w is
    # a_i+b_i*(w-x_i)+c_i*(w-x_i)^2+d_i*(w-x_i)^3.
    a = coeff[0]
    b = coeff[1]
    c = coeff[2]
    d = coeff[3]
    return a[p]+b[p]*(w-x[p])+c[p]*(w-x[p])**2+d[p]*(w-x[p])**3

xaxis = np.linspace(0, 14.875, 100)

xi = np.array([0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.5, 13, 13.5, 14, 14.5, 14.875])  # Replace with your data points
yi = np.array([0.44, 1.5, 2.875, 4.125, 5.5, 6.875, 8.25, 9.25, 9.375, 9.25, 8.75, 8, 7.375, 6.875, 6.375, 6.375, 6.625, 7.25, 8, 8.25, 7.5, 5.625, 5.25, 5, 5, 5.125, 5.625, 6.375, 7, 7.5, 8.25])  # Replace with your function values at x_data points

for i in CubicNatural(xi,yi):
    print(i)

coeff = CubicNatural(xi, yi)
naturalspline = np.array(list(map(lambda x: CubicNaturalEval(x, xi, coeff), xaxis)))

plt.plot(xi, yi, 'o', label='Data Points')
plt.plot(xaxis, naturalspline, label='Natural cubic spline')
plt.xlabel(""X"")
plt.ylabel(""Y"")
plt.title(""Natural Cubic Spline"")
plt.legend()
plt.grid(True)
plt.show()"
WpnS9WXH,divideddifference.py,Hustinyano,Python,Wednesday 22nd of May 2024 07:54:19 PM CDT,"import numpy as np
import matplotlib.pyplot as plt

def diff(x, y):
    m = x.size # here m is the number of data points.
    # the degree of the polynomial is m-1
    a = np.zeros(m)
    for i in range(m):
        a[i] = y[i]
    for j in range(1, m):
        for i in np.flip(np.arange(j,m)):
            a[i] = (a[i]-a[i-1]) / (x[i]-x[i-(j)])
    return a

def newton(x, y, z):
    m = x.size # here m is the number of data points, not the degree
    # of the polynomial
    a = diff(x, y)
    sum = a[0]
    pr = 1.0
    for j in range(m-1):
        pr *= (z-x[j])
        sum += a[j+1]*pr
    return sum

xi = np.array([0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.5, 13, 13.5, 14, 14.5, 14.875])  # Replace with your data points
yi = np.array([0.44, 1.5, 2.875, 4.125, 5.5, 6.875, 8.25, 9.25, 9.375, 9.25, 8.75, 8, 7.375, 6.875, 6.375, 6.375, 6.625, 7.25, 8, 8.25, 7.5, 5.625, 5.25, 5, 5, 5.125, 5.625, 6.375, 7, 7.5, 8.25])  # Replace with your function values at x_data points

# print(diff(xi, yi))

xaxis = np.linspace(0, 14.875, 100)
interp = newton(xi, yi, xaxis)
plt.plot(xaxis, interp, label='Newton Divided Difference')
plt.plot(xi, yi, 'o', label='data')
plt.xlabel(""X"")
plt.ylabel(""Y"")
plt.title(""Newton Divided Difference"")
plt.legend()
plt.grid(True)
plt.show()"
FSJWJPm8,ConvertToUPPERCASE-01.ps1,iwishportalwasreal,PowerShell,Wednesday 22nd of May 2024 07:41:08 PM CDT,"<#
2024-05-22 Wed. 9:15a.
ConvertToUPPERCASE-01.ps1
https://github.com/EverythingIsCodeCodeCode/public_GitHub_data/blob/main/ConvertToUPPERCASE-01.ps1
https://pastebin.com/FSJWJPm8
Made with ChatGPT.
This PowerShell script will make a GUI window that lets people convert text to UPPERCASE.  To make a desktop icon shortcut, modify it to something similar to the line below:
powershell.exe -NoProfile -ExecutionPolicy Bypass -File ""C:\Path\To\Your\Script\UppercaseConverter.ps1""
It doesn't require Internet access.  The URIs are part of the standard .NET framework and are recognized by the XAML parser to render the GUI elements correctly.
#>

Add-Type -AssemblyName PresentationFramework

[xml]$xaml = @""
<Window xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation""
        xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml""
        Title=""Uppercase Converter"" Height=""350"" Width=""400"">
    <Grid>
        <TextBox Name=""InputTextBox"" Height=""120"" Margin=""10,10,10,200"" VerticalScrollBarVisibility=""Auto"" AcceptsReturn=""True""/>
        <Button Name=""ConvertButton"" Content=""Convert to Uppercase"" Width=""150"" Height=""40"" HorizontalAlignment=""Center"" VerticalAlignment=""Bottom"" Margin=""0,0,0,50""/>
        <TextBox Name=""OutputTextBox"" Height=""120"" Margin=""10,140,10,90"" VerticalScrollBarVisibility=""Auto"" IsReadOnly=""True""/>
        <TextBlock Name=""ClipboardStatus"" Height=""20"" Margin=""10,0,10,20"" VerticalAlignment=""Bottom"" HorizontalAlignment=""Center"" TextAlignment=""Center""/>
    </Grid>
</Window>
""@

# Load the XAML
$reader = (New-Object System.Xml.XmlNodeReader $xaml)
$window = [Windows.Markup.XamlReader]::Load($reader)

# Define the event handler for the button click
$convertToUppercase = {
    $inputText = $window.FindName(""InputTextBox"").Text
    $outputText = $inputText.ToUpper()
    $window.FindName(""OutputTextBox"").Text = $outputText

    # Copy the converted text to the clipboard
    [System.Windows.Clipboard]::SetText($outputText)
    $window.FindName(""ClipboardStatus"").Text = ""Text copied to clipboard!""
}

# Attach the event handler to the button click event
$convertButton = $window.FindName(""ConvertButton"")
$convertButton.Add_Click($convertToUppercase)

# Show the window
$window.ShowDialog() | Out-Null
"
Qhrdqrns,lagrange.py,Hustinyano,Python,Wednesday 22nd of May 2024 07:37:41 PM CDT,"import numpy as np
import matplotlib.pyplot as plt

def lagrange_interpolation(x_data, y_data, x_val):
  """"""
  This function performs Lagrange polynomial interpolation for a given set of data points.

  Args:
      x_data: A list or numpy array containing the x-coordinates of the data points.
      y_data: A list or numpy array containing the corresponding y-values of the data points.
      x_val: The value at which to evaluate the interpolated polynomial.

  Returns:
      The interpolated value of the function at x_val.
  """"""
  n = len(x_data)
  result = 0
  for i in range(n):
    basis_poly = 1
    for j in range(n):
      if j != i:
        basis_poly *= (x_val - x_data[j]) / (x_data[i] - x_data[j])
    result += y_data[i] * basis_poly
  return result

def plot_interpolation(x_data, y_data, x_range):
  """"""
  This function plots the original data points and the interpolated polynomial.

  Args:
      x_data: A list or numpy array containing the x-coordinates of the data points.
      y_data: A list or numpy array containing the corresponding y-values of the data points.
      x_range: A tuple containing the minimum and maximum values for the x-axis.
  """"""
  # Generate interpolated points
  x_interp = np.linspace(x_range[0], x_range[1], 100)  # Adjust number of points as needed
  y_interp = [lagrange_interpolation(x_data, y_data, x) for x in x_interp]

  # Plot data points and interpolated function
  plt.plot(x_data, y_data, 'o', label='Data Points')
  plt.plot(x_interp, y_interp, label='Interpolated Polynomial')

  # Set labels and title
  plt.xlabel(""X"")
  plt.ylabel(""Y"")
  plt.title(""Lagrange Polynomial Interpolation"")
  plt.legend()
  plt.grid(True)
  plt.show()

# Example usage
x_data = np.array([0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.5, 13, 13.5, 14, 14.5, 14.875])  # Replace with your data points
y_data = np.array([0.44, 1.5, 2.875, 4.125, 5.5, 6.875, 8.25, 9.25, 9.375, 9.25, 8.75, 8, 7.375, 6.875, 6.375, 6.375, 6.625, 7.25, 8, 8.25, 7.5, 5.625, 5.25, 5, 5, 5.125, 5.625, 6.375, 7, 7.5, 8.25])  # Replace with your function values at x_data points

# Define x-axis range for plotting
x_range = (min(x_data), max(x_data))

# Calculate interpolated points and plot
plot_interpolation(x_data, y_data, x_range)
"
qx9s3Wie,Untitled,mzh_pb,C++,Wednesday 22nd of May 2024 07:36:30 PM CDT,"#include ""SPI.h""
#include ""Adafruit_GFX.h""
#include ""Adafruit_ILI9341.h""

const int TFT_CS = 10;
const int TFT_DC = 9;

Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC);

const int TILE_W = 15;
const int BOARD_W = 10 * TILE_W, BOARD_H = 20 * TILE_W;

bool board[10][20];

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  tft.begin();
  for (int i = 0; i < 8; i++) {
    pinMode(i, INPUT_PULLUP);
  }
  tft.fillScreen(ILI9341_BLACK);
  tft.drawRect(5, 5, BOARD_W + 2, BOARD_H + 2, ILI9341_WHITE);
  board[2][5] = 1;
}

void loop() {
  // put your main code here, to run repeatedly:
  tft.setTextColor(ILI9341_WHITE);
  tft.setCursor(0, 0);
  // Serial.println(digitalRead(5));
  delay(100);

  for (int i = 0; i < 10; i++) {
    for (int j = 0; j < 20; j++) {
      if (board[i][j]) {
        tft.fillRect(6 + i * TILE_W, 6 + j * TILE_W, TILE_W, TILE_W, ILI9341_BLUE);
      }
    }
  }
}
"
CijGXESn,Frappe,output,JSON,Wednesday 22nd of May 2024 07:31:26 PM CDT,"{
    ""Button"": {
        ""Background"": [
            0,
            137,
            180,
            250,
            255
        ],
        ""Border"": [
            0,
            35,
            38,
            52,
            255
        ],
        ""Down"": [
            0,
            30,
            102,
            245,
            255
        ],
        ""Text"": [
            0,
            24,
            25,
            38,
            255
        ]
    },
    ""CheckBox"": {
        ""Background"": [
            0,
            35,
            38,
            52,
            255
        ],
        ""Checked"": [
            [
                0,
                245,
                194,
                231,
                255
            ],
            [
                0,
                180,
                180,
                180,
                60
            ]
        ],
        ""Shadow"": [
            [
                0,
                255,
                255,
                255,
                30
            ],
            [
                0,
                20,
                20,
                20,
                180
            ]
        ],
        ""Text"": [
            0,
            166,
            173,
            200,
            255
        ]
    },
    ""ColorPicker"": {
        ""Background"": [
            0,
            15,
            15,
            15,
            245
        ],
        ""Shadow"": [
            [
                0,
                255,
                255,
                255,
                25
            ],
            [
                0,
                20,
                20,
                20,
                180
            ]
        ]
    },
    ""ComboBox"": {
        ""Background"": [
            0,
            41,
            44,
            60,
            255
        ],
        ""Border"": [
            0,
            41,
            44,
            60,
            255
        ],
        ""DropdownBackground"": [
            [
                0,
                48,
                52,
                70,
                255
            ],
            [
                0,
                32,
                32,
                32,
                255
            ]
        ],
        ""DropdownBorder"": [
            0,
            48,
            52,
            70,
            255
        ],
        ""ItemHover"": [
            0,
            127,
            132,
            156,
            60
        ],
        ""ItemSelected"": [
            0,
            127,
            132,
            156,
            60
        ],
        ""ItemText"": [
            0,
            166,
            173,
            200,
            255
        ],
        ""Shadow"": [
            [
                0,
                255,
                255,
                255,
                25
            ],
            [
                0,
                20,
                20,
                20,
                180
            ]
        ],
        ""Text"": [
            0,
            166,
            173,
            200,
            255
        ]
    },
    ""GroupBox"": {
        ""Background"": [
            0,
            48,
            52,
            70,
            255
        ],
        ""Border"": [
            0,
            41,
            44,
            60,
            255
        ],
        ""Shadow"": [
            [
                0,
                0,
                0,
                0,
                128
            ],
            [
                0,
                0,
                0,
                0,
                0
            ]
        ],
        ""Text"": [
            0,
            166,
            173,
            200,
            255
        ]
    },
    ""InputBox"": {
        ""Active"": [
            0,
            35,
            38,
            52,
            255
        ],
        ""ActiveError"": [
            0,
            249,
            226,
            175,
            100
        ],
        ""Border"": [
            0,
            0,
            0,
            0,
            48
        ],
        ""Cursor"": [
            0,
            245,
            224,
            220,
            255
        ],
        ""Inactive"": [
            0,
            41,
            44,
            60,
            255
        ],
        ""Selection"": [
            0,
            0,
            120,
            215,
            80
        ],
        ""Text"": [
            0,
            166,
            173,
            200,
            255
        ],
        ""Unit"": [
            0,
            245,
            194,
            231,
            255
        ]
    },
    ""KeySelector"": {
        ""Active"": [
            0,
            245,
            194,
            231,
            255
        ],
        ""ActiveShadow"": [
            [
                0,
                0,
                0,
                0,
                0
            ],
            [
                0,
                0,
                0,
                0,
                60
            ]
        ],
        ""Background"": [
            0,
            35,
            38,
            52,
            255
        ],
        ""Border"": [
            0,
            0,
            0,
            0,
            48
        ],
        ""Text"": [
            0,
            166,
            173,
            200,
            255
        ]
    },
    ""Label"": {
        ""Text"": [
            0,
            255,
            255,
            255,
            255
        ]
    },
    ""ListView"": {
        ""Background"": [
            0,
            41,
            44,
            60,
            255
        ],
        ""Border"": [
            0,
            41,
            44,
            60,
            255
        ],
        ""Group"": [
            0,
            127,
            132,
            156,
            60
        ],
        ""GroupText"": [
            0,
            166,
            173,
            200,
            255
        ],
        ""ItemHover"": [
            0,
            127,
            132,
            156,
            60
        ],
        ""ItemSelect"": [
            0,
            127,
            132,
            156,
            60
        ],
        ""ItemText"": [
            0,
            166,
            173,
            200,
            255
        ],
        ""Shadow"": [
            [
                0,
                0,
                0,
                0,
                128
            ],
            [
                0,
                0,
                0,
                0,
                0
            ]
        ]
    },
    ""Logo"": {
        ""Colors"": [
            [
                0,
                239,
                159,
                118,
                255
            ],
            [
                0,
                202,
                158,
                230,
                255
            ]
        ]
    },
    ""Popup"": {
        ""Background"": [
            0,
            41,
            44,
            60,
            255
        ],
        ""Border"": [
            0,
            41,
            44,
            60,
            255
        ],
        ""Shadow"": [
            [
                0,
                0,
                0,
                0,
                128
            ],
            [
                0,
                0,
                0,
                0,
                0
            ]
        ]
    },
    ""RadioBox"": {
        ""Background"": [
            0,
            4,
            4,
            22,
            255
        ],
        ""Checked"": [
            [
                0,
                245,
                194,
                231,
                255
            ],
            [
                0,
                180,
                180,
                180,
                60
            ]
        ],
        ""Shadow"": [
            [
                0,
                255,
                255,
                255,
                25
            ],
            [
                0,
                20,
                20,
                20,
                180
            ]
        ],
        ""Text"": [
            0,
            255,
            255,
            255,
            255
        ]
    },
    ""Scrollbar"": {
        ""Background"": [
            [
                0,
                35,
                38,
                52,
                255
            ],
            [
                0,
                20,
                20,
                20,
                180
            ]
        ],
        ""Bar"": [
            0,
            245,
            194,
            231,
            255
        ],
        ""HoverShadow"": [
            [
                0,
                0,
                0,
                0,
                120
            ],
            [
                0,
                0,
                0,
                0,
                60
            ]
        ],
        ""Shadow"": [
            [
                0,
                255,
                255,
                255,
                35
            ],
            [
                0,
                0,
                0,
                0,
                120
            ]
        ]
    },
    ""Slider"": {
        ""Background"": [
            0,
            35,
            38,
            52,
            255
        ],
        ""Bar"": [
            0,
            245,
            194,
            231,
            255
        ],
        ""BarShadow"": [
            [
                0,
                255,
                255,
                255,
                35
            ],
            [
                0,
                0,
                0,
                0,
                120
            ]
        ],
        ""Shadow"": [
            [
                0,
                255,
                255,
                255,
                25
            ],
            [
                0,
                20,
                20,
                20,
                180
            ]
        ],
        ""Text"": [
            0,
            166,
            173,
            200,
            255
        ]
    },
    ""Tab"": {
        ""ActiveColor"": [
            0,
            48,
            52,
            70,
            255
        ],
        ""ActiveOutline"": [
            0,
            48,
            52,
            70,
            255
        ],
        ""ActivePattern"": [
            [
                0,
                108,
                112,
                134,
                0
            ],
            [
                0,
                0,
                0,
                0,
                0
            ]
        ],
        ""ActiveText"": [
            0,
            137,
            180,
            250,
            255
        ],
        ""Text"": [
            0,
            166,
            173,
            200,
            255
        ]
    },
    ""Window"": {
        ""Background"": [
            0,
            35,
            38,
            52,
            255
        ],
        ""Over"": [
            [
                0,
                0,
                0,
                0,
                0
            ],
            [
                0,
                0,
                0,
                0,
                0
            ]
        ],
        ""Shadow"": [
            [
                0,
                0,
                0,
                0,
                255
            ],
            [
                0,
                0,
                0,
                0,
                0
            ]
        ],
        ""Sidebar"": [
            [
                0,
                35,
                38,
                52,
                255
            ],
            [
                0,
                35,
                38,
                52,
                255
            ]
        ],
        ""Topbar"": [
            [
                0,
                35,
                38,
                52,
                255
            ],
            [
                0,
                48,
                52,
                70,
                255
            ]
        ]
    }
}"
5tLj4KP9,2024-05-22_stats.json,rdp_snitch,JSON,Wednesday 22nd of May 2024 07:18:17 PM CDT,"{
  ""ip"": {
    ""139.59.119.78"": 39,
    ""152.42.170.9"": 51,
    ""206.189.91.241"": 30,
    ""206.189.83.211"": 42,
    ""146.190.87.212"": 18,
    ""146.190.91.124"": 33,
    ""152.42.241.81"": 45,
    ""152.42.184.218"": 15,
    ""165.232.161.240"": 30,
    ""146.190.83.197"": 9,
    ""146.190.83.71"": 21,
    ""152.42.178.221"": 12,
    ""104.248.147.80"": 27,
    ""128.199.218.126"": 36,
    ""128.199.219.77"": 30,
    ""104.248.149.190"": 24,
    ""152.42.241.22"": 750,
    ""159.223.92.210"": 756,
    ""188.166.210.48"": 675,
    ""143.198.195.113"": 672,
    ""152.42.254.243"": 627,
    ""152.42.241.3"": 693,
    ""152.42.241.20"": 672,
    ""146.190.95.33"": 24,
    ""188.166.215.223"": 759,
    ""188.166.222.177"": 663,
    ""45.227.254.8"": 6,
    ""185.170.144.3"": 15,
    ""45.227.254.55"": 6,
    ""169.150.209.215"": 3,
    ""80.66.76.130"": 3,
    ""188.166.236.0"": 993,
    ""178.128.60.13"": 960,
    ""188.166.238.49"": 1008,
    ""157.230.244.48"": 927,
    ""188.166.232.15"": 831,
    ""68.183.224.49"": 921,
    ""188.166.248.81"": 825,
    ""206.189.159.59"": 915,
    ""94.232.46.148"": 3,
    ""68.183.226.174"": 1008,
    ""185.198.69.18"": 3,
    ""167.94.145.106"": 3,
    ""194.165.16.78"": 6,
    ""198.235.24.84"": 9,
    ""103.56.7.131"": 12,
    ""87.251.75.145"": 9,
    ""87.251.75.64"": 3,
    ""64.124.50.139"": 6,
    ""45.227.254.9"": 9,
    ""36.91.222.100"": 6,
    ""185.198.69.22"": 3,
    ""120.27.142.130"": 6,
    ""103.75.186.158"": 3,
    ""87.251.75.120"": 6,
    ""152.32.235.78"": 3,
    ""1.55.55.178"": 3,
    ""198.235.24.55"": 9,
    ""213.109.202.230"": 24,
    ""66.115.149.35"": 3,
    ""157.97.121.72"": 3,
    ""138.207.247.21"": 3,
    ""103.56.6.112"": 3,
    ""91.238.181.71"": 6,
    ""194.165.16.37"": 12,
    ""103.120.18.135"": 12,
    ""2.57.149.92"": 3,
    ""112.4.139.162"": 3,
    ""187.157.89.218"": 3,
    ""116.140.196.215"": 3,
    ""173.237.25.68"": 15,
    ""198.235.24.170"": 9,
    ""167.94.146.63"": 3,
    ""139.162.27.10"": 489,
    ""205.210.31.180"": 9
  },
  ""asn"": {
    ""AS14061"": 15141,
    ""AS267784"": 21,
    ""AS197414"": 15,
    ""AS212238"": 3,
    ""AS208091"": 21,
    ""AS212482"": 3,
    ""AS57523"": 6,
    ""AS398705"": 6,
    ""AS48721"": 18,
    ""AS396982"": 36,
    ""AS140599"": 15,
    ""AS6461"": 6,
    ""AS7713"": 6,
    ""AS37963"": 6,
    ""AS135905"": 3,
    ""AS135377"": 3,
    ""AS18403"": 3,
    ""AS208312"": 27,
    ""AS46562"": 3,
    ""AS396356"": 3,
    ""AS11776"": 3,
    ""AS49434"": 6,
    ""AS131939"": 12,
    ""AS56046"": 3,
    ""AS8151"": 3,
    ""AS4837"": 3,
    ""AS7979"": 15,
    ""AS63949"": 489
  },
  ""isp"": {
    ""DIGITALOCEAN"": 39,
    ""DigitalOcean, LLC"": 15102,
    ""Flyservers S.A."": 39,
    ""Xhost Internet Solutions LP"": 39,
    ""Datacamp Limited"": 3,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Censys, Inc."": 6,
    ""Google LLC"": 36,
    ""Comfac Corporation"": 15,
    ""Zayo Bandwidth"": 6,
    ""PT Telekomunikasi Indonesia"": 6,
    ""Addresses CNNIC"": 6,
    ""Inet software one member company limited"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""FPT Telecom Company"": 3,
    ""Red Byte LLC"": 27,
    ""Performive LLC"": 3,
    ""Consumer-Network"": 3,
    ""Breezeline"": 3,
    ""Datacenter location PAR1 France"": 6,
    ""IPS INC"": 12,
    ""China Mobile Communications Corporation"": 3,
    ""Uninet S.A. de C.V."": 3,
    ""China Unicom CHINA169 Network"": 3,
    ""Servers.com, Inc."": 15,
    ""LINODE"": 489
  },
  ""org"": {
    ""DigitalOcean, LLC"": 8349,
    ""Digital Ocean"": 78,
    ""Digitalocean"": 6714,
    ""UAB Host Baltic"": 21,
    ""Xhostis"": 15,
    ""DataCamp Limited"": 3,
    ""Xhost Internet Solutions"": 21,
    ""Dmitriy Panchenko"": 3,
    ""Chang Way Technologies Co. Limited"": 33,
    ""Censys, Inc."": 6,
    ""Flyservers S.A"": 18,
    ""Palo Alto Networks, Inc"": 36,
    ""Comfac Corporation"": 15,
    ""Microsoft Corporation"": 6,
    ""Telekomunikasi Indonesia"": 6,
    ""Aliyun Computing Co., LTD"": 6,
    ""Inet software one member company limited"": 3,
    ""Ucloud Information Technology"": 3,
    ""Vietnam Internet Network Information Center"": 3,
    ""Total server solutions LLC"": 3,
    ""Unknown"": 3,
    ""Breezeline"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""IPS Inc"": 12,
    ""China Mobile Communications Corporation"": 3,
    ""Uninet S.A. de C.V."": 3,
    ""China United Network Communications Corporation Limited"": 3,
    ""Servers.com, Inc."": 15,
    ""Linode, LLC"": 489
  },
  ""regionName"": {
    ""South West"": 15081,
    ""Central Singapore"": 60,
    ""Vilnius"": 21,
    ""North Holland"": 36,
    ""Hesse"": 9,
    ""Perm Krai"": 3,
    ""Moscow"": 30,
    ""Kaunas"": 18,
    ""California"": 39,
    ""Metro Manila"": 15,
    ""Virginia"": 6,
    ""Jakarta"": 6,
    ""Zhejiang"": 6,
    ""Hanoi"": 3,
    ""B\u1eafc Ninh Province"": 3,
    ""Washington"": 3,
    ""New Jersey"": 3,
    ""Pennsylvania"": 3,
    ""\u00cele-de-France"": 6,
    ""Tokyo"": 12,
    ""Lesser Poland"": 3,
    ""Jiangsu"": 3,
    ""Mexico City"": 3,
    ""Beijing"": 3,
    ""Texas"": 15,
    ""North West"": 489
  },
  ""country"": {
    ""Singapore"": 15630,
    ""Lithuania"": 39,
    ""The Netherlands"": 36,
    ""Germany"": 9,
    ""Russia"": 33,
    ""United States"": 69,
    ""Philippines"": 15,
    ""Indonesia"": 6,
    ""China"": 12,
    ""Vietnam"": 6,
    ""France"": 6,
    ""Japan"": 12,
    ""Poland"": 3,
    ""Mexico"": 3
  },
  ""account"": {
    ""142.93.8.59"": 15141,
    ""Test"": 63,
    ""Administr"": 45,
    ""(empty)"": 27,
    ""bKxsFuEbE"": 3,
    ""atjqgY"": 3,
    ""LgEtQX"": 3,
    ""hello"": 543,
    ""Domain"": 21,
    ""Administrator"": 3,
    ""tFZsoEOkc"": 3,
    ""jDJjwk"": 3,
    ""Acddjw"": 3,
    ""wCReqVOvG"": 3,
    ""mHFqMA"": 3,
    ""cpSIPM"": 3,
    ""bfpTehswQ"": 3,
    ""pjWwGD"": 3,
    ""PEssNn"": 3
  },
  ""keyboard"": {
    ""Unknown"": 15879
  },
  ""client_build"": {
    ""Unknown"": 15879
  },
  ""client_name"": {
    ""Unknown"": 15879
  },
  ""ip_type"": {
    ""hosting & proxy"": 3750,
    ""hosting"": 11952,
    ""Unknown"": 135,
    ""proxy"": 36,
    ""mobile"": 6
  }
}"
Y4VX4JMj,2024-05-22_stats.json,rdp_snitch,JSON,Wednesday 22nd of May 2024 07:16:07 PM CDT,"{
  ""ip"": {
    ""139.59.119.78"": 26,
    ""152.42.170.9"": 34,
    ""206.189.91.241"": 20,
    ""206.189.83.211"": 28,
    ""146.190.87.212"": 12,
    ""146.190.91.124"": 22,
    ""152.42.241.81"": 30,
    ""152.42.184.218"": 10,
    ""165.232.161.240"": 20,
    ""146.190.83.197"": 6,
    ""146.190.83.71"": 14,
    ""152.42.178.221"": 8,
    ""104.248.147.80"": 18,
    ""128.199.218.126"": 24,
    ""128.199.219.77"": 20,
    ""104.248.149.190"": 16,
    ""152.42.241.22"": 500,
    ""159.223.92.210"": 504,
    ""188.166.210.48"": 450,
    ""143.198.195.113"": 448,
    ""152.42.254.243"": 418,
    ""152.42.241.3"": 462,
    ""152.42.241.20"": 448,
    ""146.190.95.33"": 16,
    ""188.166.215.223"": 506,
    ""188.166.222.177"": 442,
    ""45.227.254.8"": 4,
    ""185.170.144.3"": 10,
    ""45.227.254.55"": 4,
    ""169.150.209.215"": 2,
    ""80.66.76.130"": 2,
    ""188.166.236.0"": 662,
    ""178.128.60.13"": 640,
    ""188.166.238.49"": 672,
    ""157.230.244.48"": 618,
    ""188.166.232.15"": 554,
    ""68.183.224.49"": 614,
    ""188.166.248.81"": 550,
    ""206.189.159.59"": 610,
    ""94.232.46.148"": 2,
    ""68.183.226.174"": 672,
    ""185.198.69.18"": 2,
    ""167.94.145.106"": 2,
    ""194.165.16.78"": 4,
    ""198.235.24.84"": 6,
    ""103.56.7.131"": 8,
    ""87.251.75.145"": 6,
    ""87.251.75.64"": 2,
    ""64.124.50.139"": 4,
    ""45.227.254.9"": 6,
    ""36.91.222.100"": 4,
    ""185.198.69.22"": 2,
    ""120.27.142.130"": 4,
    ""103.75.186.158"": 2,
    ""87.251.75.120"": 4,
    ""152.32.235.78"": 2,
    ""1.55.55.178"": 2,
    ""198.235.24.55"": 6,
    ""213.109.202.230"": 16,
    ""66.115.149.35"": 2,
    ""157.97.121.72"": 2,
    ""138.207.247.21"": 2,
    ""103.56.6.112"": 2,
    ""91.238.181.71"": 4,
    ""194.165.16.37"": 8,
    ""103.120.18.135"": 8,
    ""2.57.149.92"": 2,
    ""112.4.139.162"": 2,
    ""187.157.89.218"": 2,
    ""116.140.196.215"": 2,
    ""173.237.25.68"": 10,
    ""198.235.24.170"": 6,
    ""167.94.146.63"": 2,
    ""139.162.27.10"": 326,
    ""205.210.31.180"": 6
  },
  ""asn"": {
    ""AS14061"": 10094,
    ""AS267784"": 14,
    ""AS197414"": 10,
    ""AS212238"": 2,
    ""AS208091"": 14,
    ""AS212482"": 2,
    ""AS57523"": 4,
    ""AS398705"": 4,
    ""AS48721"": 12,
    ""AS396982"": 24,
    ""AS140599"": 10,
    ""AS6461"": 4,
    ""AS7713"": 4,
    ""AS37963"": 4,
    ""AS135905"": 2,
    ""AS135377"": 2,
    ""AS18403"": 2,
    ""AS208312"": 18,
    ""AS46562"": 2,
    ""AS396356"": 2,
    ""AS11776"": 2,
    ""AS49434"": 4,
    ""AS131939"": 8,
    ""AS56046"": 2,
    ""AS8151"": 2,
    ""AS4837"": 2,
    ""AS7979"": 10,
    ""AS63949"": 326
  },
  ""isp"": {
    ""DIGITALOCEAN"": 26,
    ""DigitalOcean, LLC"": 10068,
    ""Flyservers S.A."": 26,
    ""Xhost Internet Solutions LP"": 26,
    ""Datacamp Limited"": 2,
    ""Chang Way Technologies Co. Limited"": 4,
    ""Censys, Inc."": 4,
    ""Google LLC"": 24,
    ""Comfac Corporation"": 10,
    ""Zayo Bandwidth"": 4,
    ""PT Telekomunikasi Indonesia"": 4,
    ""Addresses CNNIC"": 4,
    ""Inet software one member company limited"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""FPT Telecom Company"": 2,
    ""Red Byte LLC"": 18,
    ""Performive LLC"": 2,
    ""Consumer-Network"": 2,
    ""Breezeline"": 2,
    ""Datacenter location PAR1 France"": 4,
    ""IPS INC"": 8,
    ""China Mobile Communications Corporation"": 2,
    ""Uninet S.A. de C.V."": 2,
    ""China Unicom CHINA169 Network"": 2,
    ""Servers.com, Inc."": 10,
    ""LINODE"": 326
  },
  ""org"": {
    ""DigitalOcean, LLC"": 5566,
    ""Digital Ocean"": 52,
    ""Digitalocean"": 4476,
    ""UAB Host Baltic"": 14,
    ""Xhostis"": 10,
    ""DataCamp Limited"": 2,
    ""Xhost Internet Solutions"": 14,
    ""Dmitriy Panchenko"": 2,
    ""Chang Way Technologies Co. Limited"": 22,
    ""Censys, Inc."": 4,
    ""Flyservers S.A"": 12,
    ""Palo Alto Networks, Inc"": 24,
    ""Comfac Corporation"": 10,
    ""Microsoft Corporation"": 4,
    ""Telekomunikasi Indonesia"": 4,
    ""Aliyun Computing Co., LTD"": 4,
    ""Inet software one member company limited"": 2,
    ""Ucloud Information Technology"": 2,
    ""Vietnam Internet Network Information Center"": 2,
    ""Total server solutions LLC"": 2,
    ""Unknown"": 2,
    ""Breezeline"": 2,
    ""ThinkTech Technology Industrial CO. Limited"": 4,
    ""IPS Inc"": 8,
    ""China Mobile Communications Corporation"": 2,
    ""Uninet S.A. de C.V."": 2,
    ""China United Network Communications Corporation Limited"": 2,
    ""Servers.com, Inc."": 10,
    ""Linode, LLC"": 326
  },
  ""regionName"": {
    ""South West"": 10054,
    ""Central Singapore"": 40,
    ""Vilnius"": 14,
    ""North Holland"": 24,
    ""Hesse"": 6,
    ""Perm Krai"": 2,
    ""Moscow"": 20,
    ""Kaunas"": 12,
    ""California"": 26,
    ""Metro Manila"": 10,
    ""Virginia"": 4,
    ""Jakarta"": 4,
    ""Zhejiang"": 4,
    ""Hanoi"": 2,
    ""B\u1eafc Ninh Province"": 2,
    ""Washington"": 2,
    ""New Jersey"": 2,
    ""Pennsylvania"": 2,
    ""\u00cele-de-France"": 4,
    ""Tokyo"": 8,
    ""Lesser Poland"": 2,
    ""Jiangsu"": 2,
    ""Mexico City"": 2,
    ""Beijing"": 2,
    ""Texas"": 10,
    ""North West"": 326
  },
  ""country"": {
    ""Singapore"": 10420,
    ""Lithuania"": 26,
    ""The Netherlands"": 24,
    ""Germany"": 6,
    ""Russia"": 22,
    ""United States"": 46,
    ""Philippines"": 10,
    ""Indonesia"": 4,
    ""China"": 8,
    ""Vietnam"": 4,
    ""France"": 4,
    ""Japan"": 8,
    ""Poland"": 2,
    ""Mexico"": 2
  },
  ""account"": {
    ""142.93.8.59"": 10094,
    ""Test"": 42,
    ""Administr"": 30,
    ""(empty)"": 18,
    ""bKxsFuEbE"": 2,
    ""atjqgY"": 2,
    ""LgEtQX"": 2,
    ""hello"": 362,
    ""Domain"": 14,
    ""Administrator"": 2,
    ""tFZsoEOkc"": 2,
    ""jDJjwk"": 2,
    ""Acddjw"": 2,
    ""wCReqVOvG"": 2,
    ""mHFqMA"": 2,
    ""cpSIPM"": 2,
    ""bfpTehswQ"": 2,
    ""pjWwGD"": 2,
    ""PEssNn"": 2
  },
  ""keyboard"": {
    ""Unknown"": 10586
  },
  ""client_build"": {
    ""Unknown"": 10586
  },
  ""client_name"": {
    ""Unknown"": 10586
  },
  ""ip_type"": {
    ""hosting & proxy"": 2500,
    ""hosting"": 7968,
    ""Unknown"": 90,
    ""proxy"": 24,
    ""mobile"": 4
  }
}"
PXbpRnQp,2024-05-22_stats.json,rdp_snitch,JSON,Wednesday 22nd of May 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""139.59.119.78"": 13,
    ""152.42.170.9"": 17,
    ""206.189.91.241"": 10,
    ""206.189.83.211"": 14,
    ""146.190.87.212"": 6,
    ""146.190.91.124"": 11,
    ""152.42.241.81"": 15,
    ""152.42.184.218"": 5,
    ""165.232.161.240"": 10,
    ""146.190.83.197"": 3,
    ""146.190.83.71"": 7,
    ""152.42.178.221"": 4,
    ""104.248.147.80"": 9,
    ""128.199.218.126"": 12,
    ""128.199.219.77"": 10,
    ""104.248.149.190"": 8,
    ""152.42.241.22"": 250,
    ""159.223.92.210"": 252,
    ""188.166.210.48"": 225,
    ""143.198.195.113"": 224,
    ""152.42.254.243"": 209,
    ""152.42.241.3"": 231,
    ""152.42.241.20"": 224,
    ""146.190.95.33"": 8,
    ""188.166.215.223"": 253,
    ""188.166.222.177"": 221,
    ""45.227.254.8"": 2,
    ""185.170.144.3"": 5,
    ""45.227.254.55"": 2,
    ""169.150.209.215"": 1,
    ""80.66.76.130"": 1,
    ""188.166.236.0"": 331,
    ""178.128.60.13"": 320,
    ""188.166.238.49"": 336,
    ""157.230.244.48"": 309,
    ""188.166.232.15"": 277,
    ""68.183.224.49"": 307,
    ""188.166.248.81"": 275,
    ""206.189.159.59"": 305,
    ""94.232.46.148"": 1,
    ""68.183.226.174"": 336,
    ""185.198.69.18"": 1,
    ""167.94.145.106"": 1,
    ""194.165.16.78"": 2,
    ""198.235.24.84"": 3,
    ""103.56.7.131"": 4,
    ""87.251.75.145"": 3,
    ""87.251.75.64"": 1,
    ""64.124.50.139"": 2,
    ""45.227.254.9"": 3,
    ""36.91.222.100"": 2,
    ""185.198.69.22"": 1,
    ""120.27.142.130"": 2,
    ""103.75.186.158"": 1,
    ""87.251.75.120"": 2,
    ""152.32.235.78"": 1,
    ""1.55.55.178"": 1,
    ""198.235.24.55"": 3,
    ""213.109.202.230"": 8,
    ""66.115.149.35"": 1,
    ""157.97.121.72"": 1,
    ""138.207.247.21"": 1,
    ""103.56.6.112"": 1,
    ""91.238.181.71"": 2,
    ""194.165.16.37"": 4,
    ""103.120.18.135"": 4,
    ""2.57.149.92"": 1,
    ""112.4.139.162"": 1,
    ""187.157.89.218"": 1,
    ""116.140.196.215"": 1,
    ""173.237.25.68"": 5,
    ""198.235.24.170"": 3,
    ""167.94.146.63"": 1,
    ""139.162.27.10"": 163,
    ""205.210.31.180"": 3
  },
  ""asn"": {
    ""AS14061"": 5047,
    ""AS267784"": 7,
    ""AS197414"": 5,
    ""AS212238"": 1,
    ""AS208091"": 7,
    ""AS212482"": 1,
    ""AS57523"": 2,
    ""AS398705"": 2,
    ""AS48721"": 6,
    ""AS396982"": 12,
    ""AS140599"": 5,
    ""AS6461"": 2,
    ""AS7713"": 2,
    ""AS37963"": 2,
    ""AS135905"": 1,
    ""AS135377"": 1,
    ""AS18403"": 1,
    ""AS208312"": 9,
    ""AS46562"": 1,
    ""AS396356"": 1,
    ""AS11776"": 1,
    ""AS49434"": 2,
    ""AS131939"": 4,
    ""AS56046"": 1,
    ""AS8151"": 1,
    ""AS4837"": 1,
    ""AS7979"": 5,
    ""AS63949"": 163
  },
  ""isp"": {
    ""DIGITALOCEAN"": 13,
    ""DigitalOcean, LLC"": 5034,
    ""Flyservers S.A."": 13,
    ""Xhost Internet Solutions LP"": 13,
    ""Datacamp Limited"": 1,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Censys, Inc."": 2,
    ""Google LLC"": 12,
    ""Comfac Corporation"": 5,
    ""Zayo Bandwidth"": 2,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Addresses CNNIC"": 2,
    ""Inet software one member company limited"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""FPT Telecom Company"": 1,
    ""Red Byte LLC"": 9,
    ""Performive LLC"": 1,
    ""Consumer-Network"": 1,
    ""Breezeline"": 1,
    ""Datacenter location PAR1 France"": 2,
    ""IPS INC"": 4,
    ""China Mobile Communications Corporation"": 1,
    ""Uninet S.A. de C.V."": 1,
    ""China Unicom CHINA169 Network"": 1,
    ""Servers.com, Inc."": 5,
    ""LINODE"": 163
  },
  ""org"": {
    ""DigitalOcean, LLC"": 2783,
    ""Digital Ocean"": 26,
    ""Digitalocean"": 2238,
    ""UAB Host Baltic"": 7,
    ""Xhostis"": 5,
    ""DataCamp Limited"": 1,
    ""Xhost Internet Solutions"": 7,
    ""Dmitriy Panchenko"": 1,
    ""Chang Way Technologies Co. Limited"": 11,
    ""Censys, Inc."": 2,
    ""Flyservers S.A"": 6,
    ""Palo Alto Networks, Inc"": 12,
    ""Comfac Corporation"": 5,
    ""Microsoft Corporation"": 2,
    ""Telekomunikasi Indonesia"": 2,
    ""Aliyun Computing Co., LTD"": 2,
    ""Inet software one member company limited"": 1,
    ""Ucloud Information Technology"": 1,
    ""Vietnam Internet Network Information Center"": 1,
    ""Total server solutions LLC"": 1,
    ""Unknown"": 1,
    ""Breezeline"": 1,
    ""ThinkTech Technology Industrial CO. Limited"": 2,
    ""IPS Inc"": 4,
    ""China Mobile Communications Corporation"": 1,
    ""Uninet S.A. de C.V."": 1,
    ""China United Network Communications Corporation Limited"": 1,
    ""Servers.com, Inc."": 5,
    ""Linode, LLC"": 163
  },
  ""regionName"": {
    ""South West"": 5027,
    ""Central Singapore"": 20,
    ""Vilnius"": 7,
    ""North Holland"": 12,
    ""Hesse"": 3,
    ""Perm Krai"": 1,
    ""Moscow"": 10,
    ""Kaunas"": 6,
    ""California"": 13,
    ""Metro Manila"": 5,
    ""Virginia"": 2,
    ""Jakarta"": 2,
    ""Zhejiang"": 2,
    ""Hanoi"": 1,
    ""B\u1eafc Ninh Province"": 1,
    ""Washington"": 1,
    ""New Jersey"": 1,
    ""Pennsylvania"": 1,
    ""\u00cele-de-France"": 2,
    ""Tokyo"": 4,
    ""Lesser Poland"": 1,
    ""Jiangsu"": 1,
    ""Mexico City"": 1,
    ""Beijing"": 1,
    ""Texas"": 5,
    ""North West"": 163
  },
  ""country"": {
    ""Singapore"": 5210,
    ""Lithuania"": 13,
    ""The Netherlands"": 12,
    ""Germany"": 3,
    ""Russia"": 11,
    ""United States"": 23,
    ""Philippines"": 5,
    ""Indonesia"": 2,
    ""China"": 4,
    ""Vietnam"": 2,
    ""France"": 2,
    ""Japan"": 4,
    ""Poland"": 1,
    ""Mexico"": 1
  },
  ""account"": {
    ""142.93.8.59"": 5047,
    ""Test"": 21,
    ""Administr"": 15,
    ""(empty)"": 9,
    ""bKxsFuEbE"": 1,
    ""atjqgY"": 1,
    ""LgEtQX"": 1,
    ""hello"": 181,
    ""Domain"": 7,
    ""Administrator"": 1,
    ""tFZsoEOkc"": 1,
    ""jDJjwk"": 1,
    ""Acddjw"": 1,
    ""wCReqVOvG"": 1,
    ""mHFqMA"": 1,
    ""cpSIPM"": 1,
    ""bfpTehswQ"": 1,
    ""pjWwGD"": 1,
    ""PEssNn"": 1
  },
  ""keyboard"": {
    ""Unknown"": 5293
  },
  ""client_build"": {
    ""Unknown"": 5293
  },
  ""client_name"": {
    ""Unknown"": 5293
  },
  ""ip_type"": {
    ""hosting & proxy"": 1250,
    ""hosting"": 3984,
    ""Unknown"": 45,
    ""proxy"": 12,
    ""mobile"": 2
  }
}"
Rk8gYZij,aa,selfharm,Python,Wednesday 22nd of May 2024 07:15:08 PM CDT,"from flask import Flask, render_template, request, jsonify
import discum
import time
import random
import threading

app = Flask(__name__)

try:
    DT = open(""token.txt"", ""r"").read().strip()
except FileNotFoundError:
    print(""token.txt not found"")
    exit()

raids = [
    {""name"": ""Last Wish"", ""big"": ""489911398025920513"", ""small"": ""1080056128240631869""},
    {""name"": ""Deep Stone Crypt"", ""big"": ""780123659183849492"", ""small"": ""1080056027912876062""},
    {""name"": ""Vault Of Glass"", ""big"": ""894652222523203645"", ""small"": ""1080056025182392331""},
    {""name"": ""Garden Of Salvation"", ""big"": ""628624111165374494"", ""small"": ""1080056183072751636""},
    {""name"": ""Vow Of The Disciple"", ""big"": ""949726571973992508"", ""small"": ""1080055964897660959""},
    {""name"": ""Kings Fall"", ""big"": ""1004189641966092430"", ""small"": ""1080055833850806312""},
    {""name"": ""Crotas End"", ""big"": ""1134068958706815016"", ""small"": ""1140402589758927009""}
]

lfg_message = """"
running = False
message_ids = {""big"": [], ""small"": []}

bot = discum.Client(token=DT)

def send_messages(big_channel_id, small_channel_id):
    global running
    while running:
        time.sleep(random.uniform(1.3, 2.0))
        res1 = bot.sendMessage(small_channel_id, lfg_message)
        message_ids[""small""].append(res1.json()['id'])
        time.sleep(random.uniform(0.45, 0.70))
        res2 = bot.sendMessage(big_channel_id, lfg_message)
        message_ids[""big""].append(res2.json()['id'])
        time.sleep(random.randint(28, 30))
        bot.deleteMessage(small_channel_id, res1.json()['id'])
        message_ids[""small""].remove(res1.json()['id'])
        time.sleep(random.randint(1, 2))
        bot.deleteMessage(big_channel_id, res2.json()['id'])
        message_ids[""big""].remove(res2.json()['id'])

@app.route('/')
def index():
    return render_template('index.html', raids=raids)


@app.route('/start_lfg', methods=['POST'])
def start_lfg():
    global lfg_message, running
    data = request.json
    selected_raid = raids[int(data['selectedRaid'])]
    lfg_amount = data['lfgAmount']
    lfg_message = f""LF{lfg_amount}M fresh KWTD dm for invite :)""
    
    running = True
    threading.Thread(target=send_messages, args=(selected_raid['big'], selected_raid['small'])).start()
    
    return jsonify({""status"": ""LFG started""})

@app.route('/stop_lfg', methods=['POST'])
def stop_lfg():
    global running
    running = False
    for msg_id in message_ids[""small""]:
        bot.deleteMessage(raids[int(request.json['selectedRaid'])]['small'], msg_id)
    for msg_id in message_ids[""big""]:
        bot.deleteMessage(raids[int(request.json['selectedRaid'])]['big'], msg_id)
    message_ids[""small""].clear()
    message_ids[""big""].clear()
    return jsonify({""status"": ""LFG stopped""})

if __name__ == '__main__':
    app.run(debug=True)
"
Z35yrjp6,Tutorial,Bacon_Script,Lua,Wednesday 22nd of May 2024 07:12:35 PM CDT,Paste your script here
EPaJ7LZZ,2024_lista_ex3_soma_linhas_colunas,gpsgiraldi,C,Wednesday 22nd of May 2024 06:17:00 PM CDT,"#include <stdio.h>

int main()
{

    int i,j;
//preenchendo uma matriz 3x3 com inteiros
//resultante
    int mat[3][3];
    int somaLinha,somaColuna;
    
    for(i=0;i<3;i++){
        for(j=0;j<3;j++){
            scanf(""%i"",&mat[i][j]);
        }
    }
    printf(""\n"");
//lendo a matriz
    for(i=0;i<3;i++){
        for(j=0;j<3;j++){
            printf(""%i "",mat[i][j]);
        }
    printf(""\n"");
    }
//iniciando a soma das linhas
    somaLinha=0;
    for(i=0;i<3;i++){
        for(j=0;j<3;j++){
            somaLinha=somaLinha+mat[i][j];
        }
        printf(""\nA soma da linha %i equivale a %i"",i,somaLinha);
        somaLinha=0;
    }
    printf(""\n"");
//iniciando a soma das colunas
    somaColuna=0;
    for(i=0;i<3;i++){
        for(j=0;j<3;j++){
            somaColuna=somaColuna+mat[j][i];
        }
        printf(""\nA soma da coluna %i equivale a %i"",i,somaColuna);
        somaColuna=0;
    }
}
"
zck1gu0R,DJ,jburkhar21,Lua,Wednesday 22nd of May 2024 05:56:47 PM CDT,"local speaker = peripheral.find(""speaker"")
local monitor = peripheral.wrap(""back"")

local pitch = 0
while true do
	speaker.playNote(""guitar"",1,pitch)
    pitch = (pitch + 1) % 24
    sleep((1/8/20))
end "
3AQd7HdA,Pastebin.ai - #1 Pastebin Alternative,xxsa,PHP,Wednesday 22nd of May 2024 05:52:51 PM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free and always will be.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes.
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
..
......................................
..."
8Kz84LSF,2024_matriz_identidade,gpsgiraldi,C,Wednesday 22nd of May 2024 05:29:45 PM CDT,"#include <stdio.h>
 
int main()
{
    int n,i,j;
//matriz quadrada indentidade    
        printf(""Insira o tamanho da matriz nxn \n"");
        scanf(""%i"",&n);
        
    int mat[n][n];
//atribuição    
        for(i=0;i<n;i++){    
            for(j=0;j<n;j++){
                if(i==j){
                    mat[i][j]=1;
                }
                else{
                    mat[i][j]=0;
                }
            }
        }    
//saída        
        for(i=0;i<n;i++){
            for(j=0;j<n;j++){
                printf(""%i "",mat[i][j]);
            }
        printf(""\n"");
        }
    return 0;
}"
6Fq1K4m5,Turtle connection,Randomaytion13,Lua,Wednesday 22nd of May 2024 05:14:40 PM CDT,"local http = require(""http"")

local function sendToServer(data)
    local response = http.post(""http://localhost:3000/turtle"", textutils.serialize(data))
    if response then
        print(response.readAll())
    else
        print(""Failed to connect to server"")
    end
end

while true do
    local command = http.get(""http://localhost:3000/command"")
    if command then
        local cmd = command.readAll()
        if cmd == ""forward"" then
            turtle.forward()
        elseif cmd == ""back"" then
            turtle.back()
        end
        sendToServer({x = turtle.getPosition().x, y = turtle.getPosition().y, z = turtle.getPosition().z})
    end
    os.sleep(1)
end
"
uhqH6CS5,codes_1,Catsher,Python,Wednesday 22nd of May 2024 04:27:24 PM CDT,"class Symbol:
    def __init__(self, c: str) -> None:
        if c not in ['0', '1']:
            raise Exception(""Не входит в поле"")
        self.symbol = c

    def __add__(a, b):
        if not isinstance(b, Symbol):
            raise Exception(""Нельзя складывать символ и невесть что"")
        
        a_i = int(a.symbol)
        b_i = int(b.symbol)

        return Symbol(str((a_i + b_i) % 2))

class CodeVector:
    def __init__(self, symbols: list[Symbol]) -> None:
        self.symbols: list[Symbol] = symbols

    def __str__(self) -> str:
        return "" "".join([s.symbol for s in self.symbols])
    
    def from_string(s: str) -> ""CodeVector"":
        return CodeVector(symbols=[Symbol(c=c) for c in s])
    
    def __getitem__(obj, k):
        if not isinstance(k, int):
            raise Exception(""Неправильная индексация"")
        
        return obj.symbols[k]
    

def inf_vector_to_code(v: CodeVector) -> CodeVector:
    summ0: Symbol = v[0] + v[1] + v[3] + v[4] + v[6] + v[8] + v[10]
    summ1: Symbol = v[0] + v[2] + v[3] + v[4] + v[5] + v[9] + v[10]
    summ2: Symbol = v[1] + v[2] + v[3] + v[7] + v[8] + v[10] + v[10]
    summ3: Symbol = v[4] + v[5] + v[6] + v[7] + v[8] + v[9] + v[10]

    p0 = Symbol('0') if summ0.symbol == '0' else Symbol('1')
    p1 = Symbol('0') if summ1.symbol == '0' else Symbol('1')
    p2 = Symbol('0') if summ2.symbol == '0' else Symbol('1')
    p3 = Symbol('0') if summ3.symbol == '0' else Symbol('1')

    final_string: str = f""{p0.symbol}{p1.symbol}{v[0].symbol}{p2.symbol}{v[1].symbol}{v[2].symbol}{v[3].symbol}{p3.symbol}{v[4].symbol}{v[5].symbol}{v[6].symbol}{v[7].symbol}{v[8].symbol}{v[9].symbol}{v[10].symbol}""
    return CodeVector.from_string(final_string)

inf_v = CodeVector.from_string(""10001010111"")
print(inf_vector_to_code(inf_v))"
UBMBt8Ap,Open-DTU-1-WR-2,NittyGritty,JSON,Wednesday 22nd of May 2024 04:17:54 PM CDT,"[
    {
        ""id"": ""8fdbc9a20ac31f93"",
        ""type"": ""tab"",
        ""label"": ""Open-DTU-1-WR-2"",
        ""disabled"": false,
        ""info"": """",
        ""env"": []
    },
    {
        ""id"": ""0a66a060fe69f8eb"",
        ""type"": ""switch"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""name"": ""Wechselspannungsseite: BKW 1"",
        ""property"": ""topic"",
        ""propertyType"": ""msg"",
        ""rules"": [
            {
                ""t"": ""cont"",
                ""v"": ""/0/current"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/0/efficiency"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/0/frequency"",
                ""vt"": ""str""
            },
            {
                ""t"": ""regex"",
                ""v"": ""/0/power$"",
                ""vt"": ""str"",
                ""case"": false
            },
            {
                ""t"": ""cont"",
                ""v"": ""/0/powerdc"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/0/powerfactor"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/0/reactivepower"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/0/temperature"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/0/voltage"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/0/yieldday"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/0/yieldtotal"",
                ""vt"": ""str""
            }
        ],
        ""checkall"": ""true"",
        ""repair"": false,
        ""outputs"": 11,
        ""x"": 830,
        ""y"": 1080,
        ""wires"": [
            [],
            [],
            [],
            [
                ""e3f365f1233c76dc"",
                ""3666cd03a9b93807""
            ],
            [],
            [],
            [],
            [],
            [],
            [
                ""80a86a849c2a68c8""
            ],
            [
                ""07f5fb1168c855ad""
            ]
        ]
    },
    {
        ""id"": ""4d63897c881f6034"",
        ""type"": ""switch"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""name"": ""Moduldaten: BKW 1"",
        ""property"": ""topic"",
        ""propertyType"": ""msg"",
        ""rules"": [
            {
                ""t"": ""cont"",
                ""v"": ""/1/current"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/1/power"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/1/voltage"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/1/yieldday"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/1/yieldtotal"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/2/current"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/2/power"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/2/voltage"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/2/yieldday"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/2/yieldtotal"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/3/current"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/3/power"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/3/voltage"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/3/yieldday"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/3/yieldtotal"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/4/current"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/4/power"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/4/voltage"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/4/yieldday"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/4/yieldtotal"",
                ""vt"": ""str""
            }
        ],
        ""checkall"": ""true"",
        ""repair"": false,
        ""outputs"": 20,
        ""x"": 800,
        ""y"": 380,
        ""wires"": [
            [
                ""e2b1afe1279eb094""
            ],
            [
                ""157f0f74c4911e95""
            ],
            [
                ""349441116637c5f3""
            ],
            [
                ""149be161f50640d5""
            ],
            [],
            [
                ""ce766e6f3b8fa6bc""
            ],
            [
                ""39e94a2e0f7dc1c0""
            ],
            [
                ""633b932567481264""
            ],
            [
                ""54a8f5b6915bda89""
            ],
            [],
            [
                ""c3367eb9b789c5d2""
            ],
            [
                ""f4062da4a8ba030b""
            ],
            [
                ""06bc4d5d6aba989a""
            ],
            [
                ""143f8e6ad104a6f6""
            ],
            [],
            [
                ""b23c81a505b9d96b""
            ],
            [
                ""98381a55fc6a9efa""
            ],
            [
                ""03175626abb08f99""
            ],
            [
                ""9edad6c8d93a26e2""
            ],
            []
        ]
    },
    {
        ""id"": ""31daa49667596ab7"",
        ""type"": ""ui_text"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""group"": ""8705e9555a6bd10f"",
        ""order"": 3,
        ""width"": 0,
        ""height"": 0,
        ""name"": """",
        ""label"": ""Gesamtproduktion"",
        ""format"": ""{{msg.payload}} kWh"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1270,
        ""y"": 1160,
        ""wires"": []
    },
    {
        ""id"": ""e3f365f1233c76dc"",
        ""type"": ""ui_gauge"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""name"": """",
        ""group"": ""8705e9555a6bd10f"",
        ""order"": 1,
        ""width"": ""0"",
        ""height"": ""0"",
        ""gtype"": ""gage"",
        ""title"": ""Momentanleistung"",
        ""label"": ""W"",
        ""format"": ""{{value}}"",
        ""min"": 0,
        ""max"": ""1500"",
        ""colors"": [
            ""#00b500"",
            ""#e6e600"",
            ""#ca3838""
        ],
        ""seg1"": """",
        ""seg2"": """",
        ""className"": """",
        ""x"": 1270,
        ""y"": 1020,
        ""wires"": []
    },
    {
        ""id"": ""80a86a849c2a68c8"",
        ""type"": ""ui_text"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""group"": ""8705e9555a6bd10f"",
        ""order"": 4,
        ""width"": 0,
        ""height"": 0,
        ""name"": """",
        ""label"": ""Tagesproduktion"",
        ""format"": ""{{msg.payload}} Wh"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1260,
        ""y"": 1120,
        ""wires"": []
    },
    {
        ""id"": ""157f0f74c4911e95"",
        ""type"": ""ui_gauge"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""name"": ""Panel 1: Momentanleistung"",
        ""group"": ""209a2a25f524853b"",
        ""order"": 1,
        ""width"": 0,
        ""height"": 0,
        ""gtype"": ""gage"",
        ""title"": ""Momentanleistung P1"",
        ""label"": ""Watt"",
        ""format"": ""{{value}}"",
        ""min"": 0,
        ""max"": ""400"",
        ""colors"": [
            ""#00b500"",
            ""#e6e600"",
            ""#ca3838""
        ],
        ""seg1"": """",
        ""seg2"": """",
        ""className"": """",
        ""x"": 1300,
        ""y"": 80,
        ""wires"": []
    },
    {
        ""id"": ""349441116637c5f3"",
        ""type"": ""ui_text"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""group"": ""209a2a25f524853b"",
        ""order"": 2,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 1: Spannung"",
        ""label"": ""Spannung"",
        ""format"": ""{{msg.payload}} Volt"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1270,
        ""y"": 160,
        ""wires"": []
    },
    {
        ""id"": ""e2b1afe1279eb094"",
        ""type"": ""ui_text"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""group"": ""209a2a25f524853b"",
        ""order"": 3,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 1: Strom"",
        ""label"": ""Strom"",
        ""format"": ""{{msg.payload}} Ampere"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1260,
        ""y"": 40,
        ""wires"": []
    },
    {
        ""id"": ""39e94a2e0f7dc1c0"",
        ""type"": ""ui_gauge"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""name"": ""Panel 2: Momentanleistung"",
        ""group"": ""209a2a25f524853b"",
        ""order"": 6,
        ""width"": 0,
        ""height"": 0,
        ""gtype"": ""gage"",
        ""title"": ""Momentanleistung P2"",
        ""label"": ""Watt"",
        ""format"": ""{{value}}"",
        ""min"": 0,
        ""max"": ""400"",
        ""colors"": [
            ""#00b500"",
            ""#e6e600"",
            ""#ca3838""
        ],
        ""seg1"": """",
        ""seg2"": """",
        ""className"": """",
        ""x"": 1300,
        ""y"": 300,
        ""wires"": []
    },
    {
        ""id"": ""633b932567481264"",
        ""type"": ""ui_text"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""group"": ""209a2a25f524853b"",
        ""order"": 7,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 2: Spannung"",
        ""label"": ""Spannung"",
        ""format"": ""{{msg.payload}} Volt"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1270,
        ""y"": 380,
        ""wires"": []
    },
    {
        ""id"": ""ce766e6f3b8fa6bc"",
        ""type"": ""ui_text"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""group"": ""209a2a25f524853b"",
        ""order"": 8,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 2: Strom"",
        ""label"": ""Strom"",
        ""format"": ""{{msg.payload}} Ampere"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1260,
        ""y"": 260,
        ""wires"": []
    },
    {
        ""id"": ""149be161f50640d5"",
        ""type"": ""ui_text"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""group"": ""209a2a25f524853b"",
        ""order"": 4,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 1: Tagesproduktion"",
        ""label"": ""Tagesproduktion"",
        ""format"": ""{{msg.payload}} Wh"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1290,
        ""y"": 200,
        ""wires"": []
    },
    {
        ""id"": ""54a8f5b6915bda89"",
        ""type"": ""ui_text"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""group"": ""209a2a25f524853b"",
        ""order"": 9,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 2: Tagesproduktion"",
        ""label"": ""Tagesproduktion"",
        ""format"": ""{{msg.payload}} Wh"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1290,
        ""y"": 420,
        ""wires"": []
    },
    {
        ""id"": ""3666cd03a9b93807"",
        ""type"": ""ui_chart"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""name"": """",
        ""group"": ""8705e9555a6bd10f"",
        ""order"": 2,
        ""width"": 0,
        ""height"": 0,
        ""label"": ""Leistungsverlauf"",
        ""chartType"": ""line"",
        ""legend"": ""false"",
        ""xformat"": ""HH:mm:ss"",
        ""interpolate"": ""linear"",
        ""nodata"": """",
        ""dot"": false,
        ""ymin"": ""0"",
        ""ymax"": ""1600"",
        ""removeOlder"": ""12"",
        ""removeOlderPoints"": """",
        ""removeOlderUnit"": ""3600"",
        ""cutout"": 0,
        ""useOneColor"": false,
        ""useUTC"": false,
        ""colors"": [
            ""#1f77b4"",
            ""#aec7e8"",
            ""#ff7f0e"",
            ""#2ca02c"",
            ""#98df8a"",
            ""#d62728"",
            ""#ff9896"",
            ""#9467bd"",
            ""#c5b0d5""
        ],
        ""outputs"": 1,
        ""useDifferentColor"": false,
        ""className"": """",
        ""x"": 1260,
        ""y"": 1060,
        ""wires"": [
            []
        ]
    },
    {
        ""id"": ""f4062da4a8ba030b"",
        ""type"": ""ui_gauge"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""name"": ""Panel 3: Momentanleistung"",
        ""group"": ""2b6db6e6c67da3c4"",
        ""order"": 1,
        ""width"": 0,
        ""height"": 0,
        ""gtype"": ""gage"",
        ""title"": ""Momentanleistung P3"",
        ""label"": ""Watt"",
        ""format"": ""{{value}}"",
        ""min"": 0,
        ""max"": ""400"",
        ""colors"": [
            ""#00b500"",
            ""#e6e600"",
            ""#ca3838""
        ],
        ""seg1"": """",
        ""seg2"": """",
        ""className"": """",
        ""x"": 1300,
        ""y"": 520,
        ""wires"": []
    },
    {
        ""id"": ""06bc4d5d6aba989a"",
        ""type"": ""ui_text"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""group"": ""2b6db6e6c67da3c4"",
        ""order"": 2,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 3: Spannung"",
        ""label"": ""Spannung"",
        ""format"": ""{{msg.payload}} Volt"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1270,
        ""y"": 600,
        ""wires"": []
    },
    {
        ""id"": ""c3367eb9b789c5d2"",
        ""type"": ""ui_text"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""group"": ""2b6db6e6c67da3c4"",
        ""order"": 3,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 3: Strom"",
        ""label"": ""Strom"",
        ""format"": ""{{msg.payload}} Ampere"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1260,
        ""y"": 480,
        ""wires"": []
    },
    {
        ""id"": ""143f8e6ad104a6f6"",
        ""type"": ""ui_text"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""group"": ""2b6db6e6c67da3c4"",
        ""order"": 4,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 3: Tagesproduktion"",
        ""label"": ""Tagesproduktion"",
        ""format"": ""{{msg.payload}} Wh"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1290,
        ""y"": 640,
        ""wires"": []
    },
    {
        ""id"": ""98381a55fc6a9efa"",
        ""type"": ""ui_gauge"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""name"": ""Panel 4: Momentanleistung"",
        ""group"": ""2b6db6e6c67da3c4"",
        ""order"": 5,
        ""width"": 0,
        ""height"": 0,
        ""gtype"": ""gage"",
        ""title"": ""Momentanleistung P4"",
        ""label"": ""Watt"",
        ""format"": ""{{value}}"",
        ""min"": 0,
        ""max"": ""400"",
        ""colors"": [
            ""#00b500"",
            ""#e6e600"",
            ""#ca3838""
        ],
        ""seg1"": """",
        ""seg2"": """",
        ""className"": """",
        ""x"": 1300,
        ""y"": 740,
        ""wires"": []
    },
    {
        ""id"": ""03175626abb08f99"",
        ""type"": ""ui_text"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""group"": ""2b6db6e6c67da3c4"",
        ""order"": 6,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 4: Spannung"",
        ""label"": ""Spannung"",
        ""format"": ""{{msg.payload}} Volt"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1270,
        ""y"": 820,
        ""wires"": []
    },
    {
        ""id"": ""b23c81a505b9d96b"",
        ""type"": ""ui_text"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""group"": ""2b6db6e6c67da3c4"",
        ""order"": 7,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 4: Strom"",
        ""label"": ""Strom"",
        ""format"": ""{{msg.payload}} Ampere"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1260,
        ""y"": 700,
        ""wires"": []
    },
    {
        ""id"": ""9edad6c8d93a26e2"",
        ""type"": ""ui_text"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""group"": ""2b6db6e6c67da3c4"",
        ""order"": 8,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 4: Tagesproduktion"",
        ""label"": ""Tagesproduktion"",
        ""format"": ""{{msg.payload}} Wh"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1290,
        ""y"": 860,
        ""wires"": []
    },
    {
        ""id"": ""22ca8b48efd3bb89"",
        ""type"": ""switch"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""name"": ""Status Display"",
        ""property"": ""topic"",
        ""propertyType"": ""msg"",
        ""rules"": [
            {
                ""t"": ""cont"",
                ""v"": ""/reachable"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/producing"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/last_update"",
                ""vt"": ""str""
            }
        ],
        ""checkall"": ""true"",
        ""repair"": false,
        ""outputs"": 3,
        ""x"": 780,
        ""y"": 1360,
        ""wires"": [
            [
                ""2f16a860af9e55c5""
            ],
            [
                ""0fa1649817dcbee3"",
                ""63c61f8d48801b05""
            ],
            [
                ""68d55d8a7fda6f0a""
            ]
        ]
    },
    {
        ""id"": ""2f16a860af9e55c5"",
        ""type"": ""ui_led"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""order"": 2,
        ""group"": ""fde0e6c52af450ae"",
        ""width"": ""0"",
        ""height"": ""0"",
        ""label"": ""Reachable"",
        ""labelPlacement"": ""left"",
        ""labelAlignment"": ""left"",
        ""colorForValue"": [
            {
                ""color"": ""#ff0000"",
                ""value"": ""0"",
                ""valueType"": ""num""
            },
            {
                ""color"": ""#008000"",
                ""value"": ""1"",
                ""valueType"": ""num""
            }
        ],
        ""allowColorForValueInMessage"": false,
        ""shape"": ""square"",
        ""showGlow"": true,
        ""name"": ""Reachable"",
        ""x"": 1250,
        ""y"": 1240,
        ""wires"": [],
        ""icon"": ""node-red/light.svg""
    },
    {
        ""id"": ""0fa1649817dcbee3"",
        ""type"": ""ui_led"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""order"": 1,
        ""group"": ""fde0e6c52af450ae"",
        ""width"": ""0"",
        ""height"": ""0"",
        ""label"": ""Producing"",
        ""labelPlacement"": ""left"",
        ""labelAlignment"": ""left"",
        ""colorForValue"": [
            {
                ""color"": ""#ff0000"",
                ""value"": ""0"",
                ""valueType"": ""num""
            },
            {
                ""color"": ""#008000"",
                ""value"": ""1"",
                ""valueType"": ""num""
            }
        ],
        ""allowColorForValueInMessage"": false,
        ""shape"": ""square"",
        ""showGlow"": true,
        ""name"": ""Producing"",
        ""x"": 1240,
        ""y"": 1340,
        ""wires"": [],
        ""icon"": ""node-red/alert.svg""
    },
    {
        ""id"": ""eae58b85270f13a6"",
        ""type"": ""debug"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""name"": """",
        ""active"": true,
        ""tosidebar"": false,
        ""console"": false,
        ""tostatus"": true,
        ""complete"": ""payload"",
        ""targetType"": ""msg"",
        ""statusVal"": ""payload"",
        ""statusType"": ""auto"",
        ""x"": 1250,
        ""y"": 1460,
        ""wires"": []
    },
    {
        ""id"": ""fe46cb6de515be0d"",
        ""type"": ""moment"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""name"": """",
        ""topic"": """",
        ""input"": ""payload"",
        ""inputType"": ""msg"",
        ""inTz"": ""ETC/GMT"",
        ""adjAmount"": ""0"",
        ""adjType"": ""hours"",
        ""adjDir"": ""subtract"",
        ""format"": ""dd DD. MMMM YYYY HH:mm:ss "",
        ""locale"": ""de_DE"",
        ""output"": """",
        ""outputType"": ""msg"",
        ""outTz"": ""Europe/Berlin"",
        ""x"": 1200,
        ""y"": 1420,
        ""wires"": [
            [
                ""eae58b85270f13a6"",
                ""f9abf90ba20ebfee""
            ]
        ]
    },
    {
        ""id"": ""f9abf90ba20ebfee"",
        ""type"": ""ui_text"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""group"": ""fde0e6c52af450ae"",
        ""order"": 4,
        ""width"": ""4"",
        ""height"": 2,
        ""name"": ""Last Update"",
        ""label"": ""last update"",
        ""format"": ""{{msg.payload}}"",
        ""layout"": ""col-center"",
        ""className"": """",
        ""x"": 1250,
        ""y"": 1380,
        ""wires"": []
    },
    {
        ""id"": ""68d55d8a7fda6f0a"",
        ""type"": ""function"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""name"": ""Convert to ms"",
        ""func"": ""var DateTime = msg.payload * 1000;\nreturn {payload:DateTime};"",
        ""outputs"": 1,
        ""noerr"": 0,
        ""initialize"": """",
        ""finalize"": """",
        ""libs"": [],
        ""x"": 980,
        ""y"": 1420,
        ""wires"": [
            [
                ""fe46cb6de515be0d""
            ]
        ]
    },
    {
        ""id"": ""07f5fb1168c855ad"",
        ""type"": ""function"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""name"": ""round up"",
        ""func"": ""var kWh = msg.payload;\nvar kWh1 = parseFloat(kWh.toFixed(1));\nreturn {payload:kWh1};"",
        ""outputs"": 1,
        ""noerr"": 0,
        ""initialize"": """",
        ""finalize"": """",
        ""libs"": [],
        ""x"": 1080,
        ""y"": 1160,
        ""wires"": [
            [
                ""31daa49667596ab7""
            ]
        ]
    },
    {
        ""id"": ""2c892c6520d918b4"",
        ""type"": ""comment"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""name"": ""Dashboard DTU 1: GS"",
        ""info"": """",
        ""x"": 140,
        ""y"": 20,
        ""wires"": []
    },
    {
        ""id"": ""24ffb4c9aec7ab58"",
        ""type"": ""comment"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""name"": ""Dashboard Panel 1 - 4"",
        ""info"": """",
        ""x"": 160,
        ""y"": 160,
        ""wires"": []
    },
    {
        ""id"": ""ff3e468b9bec4cfa"",
        ""type"": ""comment"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""name"": ""Dashboard BKW1: HM-1500 GS"",
        ""info"": """",
        ""x"": 230,
        ""y"": 980,
        ""wires"": []
    },
    {
        ""id"": ""5610bcb6275158f7"",
        ""type"": ""comment"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""name"": ""Dashboard WR-Status"",
        ""info"": """",
        ""x"": 160,
        ""y"": 1300,
        ""wires"": []
    },
    {
        ""id"": ""2b68ad87487c88dc"",
        ""type"": ""link in"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""name"": ""Open-DTU-WR-2-In"",
        ""links"": [
            ""c159e04d40e81b3f"",
            ""bf81db276f9dc887""
        ],
        ""x"": 385,
        ""y"": 380,
        ""wires"": [
            [
                ""4d63897c881f6034"",
                ""0a66a060fe69f8eb"",
                ""22ca8b48efd3bb89""
            ]
        ]
    },
    {
        ""id"": ""63c61f8d48801b05"",
        ""type"": ""function"",
        ""z"": ""8fdbc9a20ac31f93"",
        ""name"": ""Store \""Producing\"" as Global Variable"",
        ""func"": ""var Producing = msg.payload;\nglobal.set(\""WR2-Producing\"", Producing)\n\nnode.status({\n    fill: \""blue\"", shape: \""ring\"", text: \""Producing: \""+ Producing\n});\n\nreturn msg;"",
        ""outputs"": 1,
        ""noerr"": 0,
        ""initialize"": """",
        ""finalize"": """",
        ""libs"": [],
        ""x"": 1330,
        ""y"": 1280,
        ""wires"": [
            []
        ]
    },
    {
        ""id"": ""8705e9555a6bd10f"",
        ""type"": ""ui_group"",
        ""name"": ""BKW: HM-1500 GS-WR-2"",
        ""tab"": ""f41144552529f02c"",
        ""order"": 2,
        ""disp"": true,
        ""width"": ""5"",
        ""collapse"": false,
        ""className"": """"
    },
    {
        ""id"": ""209a2a25f524853b"",
        ""type"": ""ui_group"",
        ""name"": ""Panel 1 + 2-WR-2"",
        ""tab"": ""f41144552529f02c"",
        ""order"": 3,
        ""disp"": true,
        ""width"": ""4"",
        ""collapse"": false,
        ""className"": """"
    },
    {
        ""id"": ""2b6db6e6c67da3c4"",
        ""type"": ""ui_group"",
        ""name"": ""Panel 3 + 4-WR-2"",
        ""tab"": ""f41144552529f02c"",
        ""order"": 4,
        ""disp"": true,
        ""width"": ""4"",
        ""collapse"": false,
        ""className"": """"
    },
    {
        ""id"": ""fde0e6c52af450ae"",
        ""type"": ""ui_group"",
        ""name"": ""WR-Status-WR-2"",
        ""tab"": ""f41144552529f02c"",
        ""order"": 1,
        ""disp"": true,
        ""width"": ""4"",
        ""collapse"": false,
        ""className"": """"
    },
    {
        ""id"": ""f41144552529f02c"",
        ""type"": ""ui_tab"",
        ""name"": ""Solardaten WR-2"",
        ""icon"": ""dashboard"",
        ""order"": 2,
        ""disabled"": false,
        ""hidden"": false
    }
]"
KbZEXujE,Open-DTU-1-WR-1,NittyGritty,JSON,Wednesday 22nd of May 2024 04:17:09 PM CDT,"[
    {
        ""id"": ""67b46672db338c88"",
        ""type"": ""tab"",
        ""label"": ""Open-DTU-1-WR-1"",
        ""disabled"": false,
        ""info"": """",
        ""env"": []
    },
    {
        ""id"": ""a7d81fce6977777b"",
        ""type"": ""mqtt in"",
        ""z"": ""67b46672db338c88"",
        ""name"": """",
        ""topic"": ""/home/JW/solar/#"",
        ""qos"": ""2"",
        ""datatype"": ""auto-detect"",
        ""broker"": ""1aee3213a7893e0e"",
        ""nl"": false,
        ""rap"": true,
        ""rh"": 0,
        ""inputs"": 0,
        ""x"": 140,
        ""y"": 380,
        ""wires"": [
            [
                ""7735ef1888d288bb"",
                ""731d9e4919b5d353"",
                ""a357d504ee519fca""
            ]
        ]
    },
    {
        ""id"": ""07621bc29bdd8cde"",
        ""type"": ""switch"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""Wechselspannungsseite: BKW 1"",
        ""property"": ""topic"",
        ""propertyType"": ""msg"",
        ""rules"": [
            {
                ""t"": ""cont"",
                ""v"": ""/0/current"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/0/efficiency"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/0/frequency"",
                ""vt"": ""str""
            },
            {
                ""t"": ""regex"",
                ""v"": ""/0/power$"",
                ""vt"": ""str"",
                ""case"": false
            },
            {
                ""t"": ""cont"",
                ""v"": ""/0/powerdc"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/0/powerfactor"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/0/reactivepower"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/0/temperature"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/0/voltage"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/0/yieldday"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/0/yieldtotal"",
                ""vt"": ""str""
            }
        ],
        ""checkall"": ""true"",
        ""repair"": false,
        ""outputs"": 11,
        ""x"": 830,
        ""y"": 1500,
        ""wires"": [
            [],
            [],
            [],
            [
                ""e13d6c236e06609a"",
                ""eb0cb62d875d9e34""
            ],
            [],
            [],
            [],
            [],
            [],
            [
                ""c50f6485785730c1""
            ],
            [
                ""708616d4e74aa85e""
            ]
        ]
    },
    {
        ""id"": ""2b52c2a59e9c8f0b"",
        ""type"": ""switch"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""Moduldaten: BKW 1"",
        ""property"": ""topic"",
        ""propertyType"": ""msg"",
        ""rules"": [
            {
                ""t"": ""cont"",
                ""v"": ""/1/current"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/1/power"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/1/voltage"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/1/yieldday"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/1/yieldtotal"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/2/current"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/2/power"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/2/voltage"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/2/yieldday"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/2/yieldtotal"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/3/current"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/3/power"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/3/voltage"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/3/yieldday"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/3/yieldtotal"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/4/current"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/4/power"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/4/voltage"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/4/yieldday"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/4/yieldtotal"",
                ""vt"": ""str""
            }
        ],
        ""checkall"": ""true"",
        ""repair"": false,
        ""outputs"": 20,
        ""x"": 840,
        ""y"": 720,
        ""wires"": [
            [
                ""f2888baf32f9757e""
            ],
            [
                ""eca0027d19a10001""
            ],
            [
                ""02cf87cead824b86""
            ],
            [
                ""5067959f63aef55b""
            ],
            [],
            [
                ""1e3fefcb16c2a580""
            ],
            [
                ""e81221ad5770f1f1""
            ],
            [
                ""dfb38b3d0a716c38""
            ],
            [
                ""d0607948bb69ef79""
            ],
            [],
            [
                ""3b5754dfd699b1ea""
            ],
            [
                ""1d313db997788c54""
            ],
            [
                ""59f0b16502b687bc""
            ],
            [
                ""41559b22ee47d5ce""
            ],
            [],
            [
                ""f6a3e3e155f0684f""
            ],
            [
                ""8059a3b5b4265775""
            ],
            [
                ""85a670d34e40b084""
            ],
            [
                ""4777aa1e61a119e3""
            ],
            []
        ]
    },
    {
        ""id"": ""a357d504ee519fca"",
        ""type"": ""switch"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""DTU-Daten"",
        ""property"": ""topic"",
        ""propertyType"": ""msg"",
        ""rules"": [
            {
                ""t"": ""cont"",
                ""v"": ""/ip"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/hostname"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/rssi"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/uptime"",
                ""vt"": ""str""
            }
        ],
        ""checkall"": ""true"",
        ""repair"": false,
        ""outputs"": 4,
        ""x"": 770,
        ""y"": 360,
        ""wires"": [
            [
                ""33c62c6a178ea499""
            ],
            [
                ""61341a44a869d262""
            ],
            [
                ""458d77308b829c5a""
            ],
            [
                ""81fd6527fef968bd""
            ]
        ]
    },
    {
        ""id"": ""49067a2d23f31022"",
        ""type"": ""ui_text"",
        ""z"": ""67b46672db338c88"",
        ""group"": ""459aaa63cf88a451"",
        ""order"": 3,
        ""width"": 0,
        ""height"": 0,
        ""name"": """",
        ""label"": ""Gesamtproduktion"",
        ""format"": ""{{msg.payload}} kWh"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1230,
        ""y"": 1580,
        ""wires"": []
    },
    {
        ""id"": ""e13d6c236e06609a"",
        ""type"": ""ui_gauge"",
        ""z"": ""67b46672db338c88"",
        ""name"": """",
        ""group"": ""459aaa63cf88a451"",
        ""order"": 1,
        ""width"": ""0"",
        ""height"": ""0"",
        ""gtype"": ""gage"",
        ""title"": ""Momentanleistung"",
        ""label"": ""W"",
        ""format"": ""{{value}}"",
        ""min"": 0,
        ""max"": ""2000"",
        ""colors"": [
            ""#00b500"",
            ""#e6e600"",
            ""#ca3838""
        ],
        ""seg1"": """",
        ""seg2"": """",
        ""className"": """",
        ""x"": 1230,
        ""y"": 1420,
        ""wires"": []
    },
    {
        ""id"": ""c50f6485785730c1"",
        ""type"": ""ui_text"",
        ""z"": ""67b46672db338c88"",
        ""group"": ""459aaa63cf88a451"",
        ""order"": 4,
        ""width"": 0,
        ""height"": 0,
        ""name"": """",
        ""label"": ""Tagesproduktion"",
        ""format"": ""{{msg.payload}} Wh"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1220,
        ""y"": 1540,
        ""wires"": []
    },
    {
        ""id"": ""eca0027d19a10001"",
        ""type"": ""ui_gauge"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""Panel 1: Momentanleistung"",
        ""group"": ""110d22d6abec3911"",
        ""order"": 1,
        ""width"": 0,
        ""height"": 0,
        ""gtype"": ""gage"",
        ""title"": ""Momentanleistung P1"",
        ""label"": ""Watt"",
        ""format"": ""{{value}}"",
        ""min"": 0,
        ""max"": ""400"",
        ""colors"": [
            ""#00b500"",
            ""#e6e600"",
            ""#ca3838""
        ],
        ""seg1"": """",
        ""seg2"": """",
        ""className"": """",
        ""x"": 1260,
        ""y"": 500,
        ""wires"": []
    },
    {
        ""id"": ""02cf87cead824b86"",
        ""type"": ""ui_text"",
        ""z"": ""67b46672db338c88"",
        ""group"": ""110d22d6abec3911"",
        ""order"": 2,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 1: Spannung"",
        ""label"": ""Spannung"",
        ""format"": ""{{msg.payload}} Volt"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1230,
        ""y"": 580,
        ""wires"": []
    },
    {
        ""id"": ""f2888baf32f9757e"",
        ""type"": ""ui_text"",
        ""z"": ""67b46672db338c88"",
        ""group"": ""110d22d6abec3911"",
        ""order"": 3,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 1: Strom"",
        ""label"": ""Strom"",
        ""format"": ""{{msg.payload}} Ampere"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1220,
        ""y"": 460,
        ""wires"": []
    },
    {
        ""id"": ""e81221ad5770f1f1"",
        ""type"": ""ui_gauge"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""Panel 2: Momentanleistung"",
        ""group"": ""110d22d6abec3911"",
        ""order"": 6,
        ""width"": 0,
        ""height"": 0,
        ""gtype"": ""gage"",
        ""title"": ""Momentanleistung P2"",
        ""label"": ""Watt"",
        ""format"": ""{{value}}"",
        ""min"": 0,
        ""max"": ""400"",
        ""colors"": [
            ""#00b500"",
            ""#e6e600"",
            ""#ca3838""
        ],
        ""seg1"": """",
        ""seg2"": """",
        ""className"": """",
        ""x"": 1260,
        ""y"": 720,
        ""wires"": []
    },
    {
        ""id"": ""dfb38b3d0a716c38"",
        ""type"": ""ui_text"",
        ""z"": ""67b46672db338c88"",
        ""group"": ""110d22d6abec3911"",
        ""order"": 7,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 2: Spannung"",
        ""label"": ""Spannung"",
        ""format"": ""{{msg.payload}} Volt"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1230,
        ""y"": 800,
        ""wires"": []
    },
    {
        ""id"": ""1e3fefcb16c2a580"",
        ""type"": ""ui_text"",
        ""z"": ""67b46672db338c88"",
        ""group"": ""110d22d6abec3911"",
        ""order"": 8,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 2: Strom"",
        ""label"": ""Strom"",
        ""format"": ""{{msg.payload}} Ampere"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1220,
        ""y"": 680,
        ""wires"": []
    },
    {
        ""id"": ""5067959f63aef55b"",
        ""type"": ""ui_text"",
        ""z"": ""67b46672db338c88"",
        ""group"": ""110d22d6abec3911"",
        ""order"": 4,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 1: Tagesproduktion"",
        ""label"": ""Tagesproduktion"",
        ""format"": ""{{msg.payload}} Wh"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1250,
        ""y"": 620,
        ""wires"": []
    },
    {
        ""id"": ""d0607948bb69ef79"",
        ""type"": ""ui_text"",
        ""z"": ""67b46672db338c88"",
        ""group"": ""110d22d6abec3911"",
        ""order"": 9,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 2: Tagesproduktion"",
        ""label"": ""Tagesproduktion"",
        ""format"": ""{{msg.payload}} Wh"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1250,
        ""y"": 840,
        ""wires"": []
    },
    {
        ""id"": ""eb0cb62d875d9e34"",
        ""type"": ""ui_chart"",
        ""z"": ""67b46672db338c88"",
        ""name"": """",
        ""group"": ""459aaa63cf88a451"",
        ""order"": 2,
        ""width"": 0,
        ""height"": 0,
        ""label"": ""Leistungsverlauf"",
        ""chartType"": ""line"",
        ""legend"": ""false"",
        ""xformat"": ""HH:mm:ss"",
        ""interpolate"": ""linear"",
        ""nodata"": """",
        ""dot"": false,
        ""ymin"": ""0"",
        ""ymax"": ""2000"",
        ""removeOlder"": ""12"",
        ""removeOlderPoints"": """",
        ""removeOlderUnit"": ""3600"",
        ""cutout"": 0,
        ""useOneColor"": false,
        ""useUTC"": false,
        ""colors"": [
            ""#1f77b4"",
            ""#aec7e8"",
            ""#ff7f0e"",
            ""#2ca02c"",
            ""#98df8a"",
            ""#d62728"",
            ""#ff9896"",
            ""#9467bd"",
            ""#c5b0d5""
        ],
        ""outputs"": 1,
        ""useDifferentColor"": false,
        ""className"": """",
        ""x"": 1220,
        ""y"": 1460,
        ""wires"": [
            []
        ]
    },
    {
        ""id"": ""61341a44a869d262"",
        ""type"": ""ui_text"",
        ""z"": ""67b46672db338c88"",
        ""group"": ""8a2b7e69bc92a27a"",
        ""order"": 2,
        ""width"": ""0"",
        ""height"": ""0"",
        ""name"": ""Hostname"",
        ""label"": ""Hostname"",
        ""format"": ""{{msg.payload}}"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1210,
        ""y"": 320,
        ""wires"": []
    },
    {
        ""id"": ""33c62c6a178ea499"",
        ""type"": ""ui_text"",
        ""z"": ""67b46672db338c88"",
        ""group"": ""8a2b7e69bc92a27a"",
        ""order"": 3,
        ""width"": ""0"",
        ""height"": ""0"",
        ""name"": ""IP-Adresse"",
        ""label"": ""IP-Adresse"",
        ""format"": ""{{msg.payload}}"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1210,
        ""y"": 280,
        ""wires"": []
    },
    {
        ""id"": ""7735ef1888d288bb"",
        ""type"": ""switch"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""WR-Namen"",
        ""property"": ""topic"",
        ""propertyType"": ""msg"",
        ""rules"": [
            {
                ""t"": ""cont"",
                ""v"": ""/name"",
                ""vt"": ""str""
            }
        ],
        ""checkall"": ""true"",
        ""repair"": false,
        ""outputs"": 1,
        ""x"": 770,
        ""y"": 300,
        ""wires"": [
            [
                ""f35d012dc5b68713""
            ]
        ]
    },
    {
        ""id"": ""458d77308b829c5a"",
        ""type"": ""ui_text"",
        ""z"": ""67b46672db338c88"",
        ""group"": ""8a2b7e69bc92a27a"",
        ""order"": 4,
        ""width"": ""0"",
        ""height"": ""0"",
        ""name"": ""WLAN-Signalstärke"",
        ""label"": ""WLAN-Signalstärke"",
        ""format"": ""{{msg.payload}} dBm"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1230,
        ""y"": 360,
        ""wires"": []
    },
    {
        ""id"": ""f35d012dc5b68713"",
        ""type"": ""join"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""Namen zusammenfügen"",
        ""mode"": ""custom"",
        ""build"": ""string"",
        ""property"": ""payload"",
        ""propertyType"": ""msg"",
        ""key"": ""topic"",
        ""joiner"": "", "",
        ""joinerType"": ""str"",
        ""accumulate"": false,
        ""timeout"": ""1"",
        ""count"": """",
        ""reduceRight"": false,
        ""reduceExp"": """",
        ""reduceInit"": """",
        ""reduceInitType"": """",
        ""reduceFixup"": """",
        ""x"": 810,
        ""y"": 240,
        ""wires"": [
            [
                ""a91e9ebe137a015a""
            ]
        ]
    },
    {
        ""id"": ""a91e9ebe137a015a"",
        ""type"": ""ui_text"",
        ""z"": ""67b46672db338c88"",
        ""d"": true,
        ""group"": ""8a2b7e69bc92a27a"",
        ""order"": 5,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Bediente Wechselrichter"",
        ""label"": ""Bediente Wechselrichter"",
        ""format"": ""{{msg.payload}}"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1250,
        ""y"": 240,
        ""wires"": []
    },
    {
        ""id"": ""731d9e4919b5d353"",
        ""type"": ""switch"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""Wechselrichter-Seriennummer"",
        ""property"": ""topic"",
        ""propertyType"": ""msg"",
        ""rules"": [
            {
                ""t"": ""cont"",
                ""v"": ""116162810751"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""116183924145"",
                ""vt"": ""str""
            }
        ],
        ""checkall"": ""true"",
        ""repair"": false,
        ""outputs"": 2,
        ""x"": 450,
        ""y"": 820,
        ""wires"": [
            [
                ""2b52c2a59e9c8f0b"",
                ""07621bc29bdd8cde"",
                ""dd36e82b2c28f357"",
                ""8654a9845731a2a8""
            ],
            [
                ""bf81db276f9dc887"",
                ""8235fbcdd150b8c9""
            ]
        ]
    },
    {
        ""id"": ""1d313db997788c54"",
        ""type"": ""ui_gauge"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""Panel 3: Momentanleistung"",
        ""group"": ""ce3549f1898bdf0b"",
        ""order"": 1,
        ""width"": 0,
        ""height"": 0,
        ""gtype"": ""gage"",
        ""title"": ""Momentanleistung P3"",
        ""label"": ""Watt"",
        ""format"": ""{{value}}"",
        ""min"": 0,
        ""max"": ""400"",
        ""colors"": [
            ""#00b500"",
            ""#e6e600"",
            ""#ca3838""
        ],
        ""seg1"": """",
        ""seg2"": """",
        ""className"": """",
        ""x"": 1260,
        ""y"": 940,
        ""wires"": []
    },
    {
        ""id"": ""59f0b16502b687bc"",
        ""type"": ""ui_text"",
        ""z"": ""67b46672db338c88"",
        ""group"": ""ce3549f1898bdf0b"",
        ""order"": 2,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 3: Spannung"",
        ""label"": ""Spannung"",
        ""format"": ""{{msg.payload}} Volt"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1230,
        ""y"": 1020,
        ""wires"": []
    },
    {
        ""id"": ""3b5754dfd699b1ea"",
        ""type"": ""ui_text"",
        ""z"": ""67b46672db338c88"",
        ""group"": ""ce3549f1898bdf0b"",
        ""order"": 3,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 3: Strom"",
        ""label"": ""Strom"",
        ""format"": ""{{msg.payload}} Ampere"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1220,
        ""y"": 900,
        ""wires"": []
    },
    {
        ""id"": ""41559b22ee47d5ce"",
        ""type"": ""ui_text"",
        ""z"": ""67b46672db338c88"",
        ""group"": ""ce3549f1898bdf0b"",
        ""order"": 4,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 3: Tagesproduktion"",
        ""label"": ""Tagesproduktion"",
        ""format"": ""{{msg.payload}} Wh"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1250,
        ""y"": 1060,
        ""wires"": []
    },
    {
        ""id"": ""8059a3b5b4265775"",
        ""type"": ""ui_gauge"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""Panel 4: Momentanleistung"",
        ""group"": ""ce3549f1898bdf0b"",
        ""order"": 5,
        ""width"": 0,
        ""height"": 0,
        ""gtype"": ""gage"",
        ""title"": ""Momentanleistung P4"",
        ""label"": ""Watt"",
        ""format"": ""{{value}}"",
        ""min"": 0,
        ""max"": ""400"",
        ""colors"": [
            ""#00b500"",
            ""#e6e600"",
            ""#ca3838""
        ],
        ""seg1"": """",
        ""seg2"": """",
        ""className"": """",
        ""x"": 1260,
        ""y"": 1160,
        ""wires"": []
    },
    {
        ""id"": ""85a670d34e40b084"",
        ""type"": ""ui_text"",
        ""z"": ""67b46672db338c88"",
        ""group"": ""ce3549f1898bdf0b"",
        ""order"": 6,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 4: Spannung"",
        ""label"": ""Spannung"",
        ""format"": ""{{msg.payload}} Volt"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1230,
        ""y"": 1240,
        ""wires"": []
    },
    {
        ""id"": ""f6a3e3e155f0684f"",
        ""type"": ""ui_text"",
        ""z"": ""67b46672db338c88"",
        ""group"": ""ce3549f1898bdf0b"",
        ""order"": 7,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 4: Strom"",
        ""label"": ""Strom"",
        ""format"": ""{{msg.payload}} Ampere"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1220,
        ""y"": 1120,
        ""wires"": []
    },
    {
        ""id"": ""4777aa1e61a119e3"",
        ""type"": ""ui_text"",
        ""z"": ""67b46672db338c88"",
        ""group"": ""ce3549f1898bdf0b"",
        ""order"": 8,
        ""width"": 0,
        ""height"": 0,
        ""name"": ""Panel 4: Tagesproduktion"",
        ""label"": ""Tagesproduktion"",
        ""format"": ""{{msg.payload}} Wh"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1250,
        ""y"": 1280,
        ""wires"": []
    },
    {
        ""id"": ""774ddfbab4253231"",
        ""type"": ""ui_text"",
        ""z"": ""67b46672db338c88"",
        ""group"": ""8a2b7e69bc92a27a"",
        ""order"": 1,
        ""width"": ""0"",
        ""height"": ""0"",
        ""name"": """",
        ""label"": ""Uptime: "",
        ""format"": ""{{msg.payload}}"",
        ""layout"": ""row-spread"",
        ""className"": """",
        ""x"": 1200,
        ""y"": 400,
        ""wires"": []
    },
    {
        ""id"": ""dd36e82b2c28f357"",
        ""type"": ""switch"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""Status Display"",
        ""property"": ""topic"",
        ""propertyType"": ""msg"",
        ""rules"": [
            {
                ""t"": ""cont"",
                ""v"": ""/reachable"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/producing"",
                ""vt"": ""str""
            },
            {
                ""t"": ""cont"",
                ""v"": ""/last_update"",
                ""vt"": ""str""
            }
        ],
        ""checkall"": ""true"",
        ""repair"": false,
        ""outputs"": 3,
        ""x"": 780,
        ""y"": 1780,
        ""wires"": [
            [
                ""9a055110d5a0a95e""
            ],
            [
                ""be479ffc4936d189"",
                ""153723416ff79191""
            ],
            [
                ""af7e46b147d1da2a""
            ]
        ]
    },
    {
        ""id"": ""9a055110d5a0a95e"",
        ""type"": ""ui_led"",
        ""z"": ""67b46672db338c88"",
        ""order"": 2,
        ""group"": ""2a952f6bd293d8ca"",
        ""width"": ""0"",
        ""height"": ""0"",
        ""label"": ""Reachable"",
        ""labelPlacement"": ""left"",
        ""labelAlignment"": ""left"",
        ""colorForValue"": [
            {
                ""color"": ""#ff0000"",
                ""value"": ""0"",
                ""valueType"": ""num""
            },
            {
                ""color"": ""#008000"",
                ""value"": ""1"",
                ""valueType"": ""num""
            }
        ],
        ""allowColorForValueInMessage"": false,
        ""shape"": ""square"",
        ""showGlow"": true,
        ""name"": ""Reachable"",
        ""x"": 1210,
        ""y"": 1660,
        ""wires"": [],
        ""icon"": ""node-red/light.svg""
    },
    {
        ""id"": ""be479ffc4936d189"",
        ""type"": ""ui_led"",
        ""z"": ""67b46672db338c88"",
        ""order"": 1,
        ""group"": ""2a952f6bd293d8ca"",
        ""width"": ""0"",
        ""height"": ""0"",
        ""label"": ""Producing"",
        ""labelPlacement"": ""left"",
        ""labelAlignment"": ""left"",
        ""colorForValue"": [
            {
                ""color"": ""#ff0000"",
                ""value"": ""0"",
                ""valueType"": ""num""
            },
            {
                ""color"": ""#008000"",
                ""value"": ""1"",
                ""valueType"": ""num""
            }
        ],
        ""allowColorForValueInMessage"": false,
        ""shape"": ""square"",
        ""showGlow"": true,
        ""name"": ""Producing"",
        ""x"": 1200,
        ""y"": 1760,
        ""wires"": [],
        ""icon"": ""node-red/alert.svg""
    },
    {
        ""id"": ""f2a7318464db2f10"",
        ""type"": ""debug"",
        ""z"": ""67b46672db338c88"",
        ""name"": """",
        ""active"": true,
        ""tosidebar"": false,
        ""console"": false,
        ""tostatus"": true,
        ""complete"": ""payload"",
        ""targetType"": ""msg"",
        ""statusVal"": ""payload"",
        ""statusType"": ""auto"",
        ""x"": 1210,
        ""y"": 1880,
        ""wires"": []
    },
    {
        ""id"": ""551d18d5e0a9f085"",
        ""type"": ""moment"",
        ""z"": ""67b46672db338c88"",
        ""name"": """",
        ""topic"": """",
        ""input"": ""payload"",
        ""inputType"": ""msg"",
        ""inTz"": ""ETC/GMT"",
        ""adjAmount"": ""0"",
        ""adjType"": ""hours"",
        ""adjDir"": ""subtract"",
        ""format"": ""dd DD. MMMM YYYY HH:mm:ss "",
        ""locale"": ""de_DE"",
        ""output"": """",
        ""outputType"": ""msg"",
        ""outTz"": ""Europe/Berlin"",
        ""x"": 1160,
        ""y"": 1840,
        ""wires"": [
            [
                ""f2a7318464db2f10"",
                ""9d372935bfd1ab7a""
            ]
        ]
    },
    {
        ""id"": ""9d372935bfd1ab7a"",
        ""type"": ""ui_text"",
        ""z"": ""67b46672db338c88"",
        ""group"": ""2a952f6bd293d8ca"",
        ""order"": 4,
        ""width"": ""4"",
        ""height"": 2,
        ""name"": ""Last Update"",
        ""label"": ""last update"",
        ""format"": ""{{msg.payload}}"",
        ""layout"": ""col-center"",
        ""className"": """",
        ""x"": 1210,
        ""y"": 1800,
        ""wires"": []
    },
    {
        ""id"": ""af7e46b147d1da2a"",
        ""type"": ""function"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""Convert to ms"",
        ""func"": ""var DateTime = msg.payload * 1000;\nreturn {payload:DateTime};"",
        ""outputs"": 1,
        ""noerr"": 0,
        ""initialize"": """",
        ""finalize"": """",
        ""libs"": [],
        ""x"": 960,
        ""y"": 1840,
        ""wires"": [
            [
                ""551d18d5e0a9f085""
            ]
        ]
    },
    {
        ""id"": ""81fd6527fef968bd"",
        ""type"": ""function"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""Convert to \""h m s\"""",
        ""func"": ""var seconds = msg.payload;\nvar h = Math.floor(seconds / (60 * 60));\nvar m = Math.floor(seconds % (60 * 60) / 60);\nvar s = Math.floor(seconds % 60 / 1);\nvar hms = h + \""h \"" + m + \""m \"" + s + \""s\"";\n\nnode.status({\n    fill: \""blue\"", shape: \""ring\"", text: \""Uptime: \"" + hms\n});\n\nreturn {payload:hms};"",
        ""outputs"": 1,
        ""noerr"": 0,
        ""initialize"": """",
        ""finalize"": """",
        ""libs"": [],
        ""x"": 1030,
        ""y"": 400,
        ""wires"": [
            [
                ""774ddfbab4253231""
            ]
        ]
    },
    {
        ""id"": ""708616d4e74aa85e"",
        ""type"": ""function"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""round up"",
        ""func"": ""var kWh = msg.payload;\nvar kWh1 = parseFloat(kWh.toFixed(1));\nreturn {payload:kWh1};"",
        ""outputs"": 1,
        ""noerr"": 0,
        ""initialize"": """",
        ""finalize"": """",
        ""libs"": [],
        ""x"": 1080,
        ""y"": 1620,
        ""wires"": [
            [
                ""49067a2d23f31022""
            ]
        ]
    },
    {
        ""id"": ""a41f365b540aab2e"",
        ""type"": ""comment"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""Dashboard DTU 1: GS"",
        ""info"": """",
        ""x"": 160,
        ""y"": 200,
        ""wires"": []
    },
    {
        ""id"": ""3ed472415d59252f"",
        ""type"": ""comment"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""Dashboard Panel 1 - 4"",
        ""info"": """",
        ""x"": 160,
        ""y"": 580,
        ""wires"": []
    },
    {
        ""id"": ""288b23a279db5e93"",
        ""type"": ""comment"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""Dashboard BKW1: HM-1500 GS"",
        ""info"": """",
        ""x"": 170,
        ""y"": 1520,
        ""wires"": []
    },
    {
        ""id"": ""9b311c3f11b2edab"",
        ""type"": ""comment"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""Dashboard WR-Status"",
        ""info"": """",
        ""x"": 160,
        ""y"": 1720,
        ""wires"": []
    },
    {
        ""id"": ""bf81db276f9dc887"",
        ""type"": ""link out"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""Open-DTU-WR-2-Out"",
        ""mode"": ""link"",
        ""links"": [
            ""2b68ad87487c88dc""
        ],
        ""x"": 685,
        ""y"": 900,
        ""wires"": []
    },
    {
        ""id"": ""17a4c555694b5d00"",
        ""type"": ""join"",
        ""z"": ""67b46672db338c88"",
        ""name"": """",
        ""mode"": ""custom"",
        ""build"": ""object"",
        ""property"": ""payload"",
        ""propertyType"": ""msg"",
        ""key"": ""topic"",
        ""joiner"": ""\\n"",
        ""joinerType"": ""str"",
        ""accumulate"": false,
        ""timeout"": ""3"",
        ""count"": """",
        ""reduceRight"": false,
        ""reduceExp"": """",
        ""reduceInit"": """",
        ""reduceInitType"": """",
        ""reduceFixup"": """",
        ""x"": 270,
        ""y"": 1120,
        ""wires"": [
            [
                ""4a876dd3052e804d"",
                ""ee70914d74c5b307""
            ]
        ]
    },
    {
        ""id"": ""4de39906772d3736"",
        ""type"": ""function"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""function 2"",
        ""func"": ""// /home/JW/solar/116162810751/0/yieldtotal -> 0yieldtotal\n// /home/JW/solar/116162810751/4/power -> 4power\nvar words = msg.topic.split('/');\nvar Serial = (words[4]);\nvar Panel = (words[5]);\nvar FieldName = (words[6]);\nFieldName = FieldName + Panel ;\nmsg.topic=FieldName;\nmsg.Serial= Serial;\nreturn msg;"",
        ""outputs"": 1,
        ""noerr"": 0,
        ""initialize"": """",
        ""finalize"": """",
        ""libs"": [],
        ""x"": 260,
        ""y"": 1060,
        ""wires"": [
            [
                ""17a4c555694b5d00"",
                ""b7d52756a7f01d12""
            ]
        ]
    },
    {
        ""id"": ""4a876dd3052e804d"",
        ""type"": ""function"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""function 3"",
        ""func"": ""var Serial = msg.Serial;\n\nvar power0 = msg.payload.power0;\nvar power1 = msg.payload.power1;\nvar power2 = msg.payload.power2;\nvar power3 = msg.payload.power3;\nvar power4 = msg.payload.power4;\n\nvar yieldday0 = msg.payload.yieldday0;\nvar yieldday1 = msg.payload.yieldday1;\nvar yieldday2 = msg.payload.yieldday2;\nvar yieldday3 = msg.payload.yieldday3;\nvar yieldday4 = msg.payload.yieldday4;\n\nvar yieldtotal0 = msg.payload.yieldtotal0;\nvar yieldtotal1 = msg.payload.yieldtotal1;\nvar yieldtotal2 = msg.payload.yieldtotal2;\nvar yieldtotal3 = msg.payload.yieldtotal3;\nvar yieldtotal4 = msg.payload.yieldtotal4;\n\nvar voltage0 = msg.payload.voltage0;\nvar voltage1 = msg.payload.voltage1;\nvar voltage2 = msg.payload.voltage2;\nvar voltage3 = msg.payload.voltage3;\nvar voltage4 = msg.payload.voltage4;\n\nvar current0 = msg.payload.current0;\nvar current1 = msg.payload.current1;\nvar current2 = msg.payload.current2;\nvar current3 = msg.payload.current3;\nvar current4 = msg.payload.current4;\n\n// Values from WR only (output to Grid)\nvar Temp = msg.payload.temperature0;\nvar Voltage = msg.payload.voltage0;\nvar Freq = msg.payload.frequency0;\n\nvar Influx = [{\n    Serial: Serial,\n\n    Power0: power0,\n    Power1: power1,\n    Power2: power2,\n    Power3: power3,\n    Power4: power4,\n\n    YieldDay0: yieldday0,\n    YieldDay1: yieldday1,\n    YieldDay2: yieldday2,\n    YieldDay3: yieldday3,\n    YieldDay4: yieldday4,\n\n    YieldTotal0: yieldtotal0,\n    YieldTotal1: yieldtotal1,\n    YieldTotal2: yieldtotal2,\n    YieldTotal3: yieldtotal3,\n    YieldTotal4: yieldtotal4,\n\n    Voltage0: voltage0,\n    Voltage1: voltage1,\n    Voltage2: voltage2,\n    Voltage3: voltage3,\n    Voltage4: voltage4,\n\n    Current0: current0,\n    Current1: current1,\n    Current2: current2,\n    Current3: current3,\n    Current4: current4,\n\n    Temp: Temp,\n    Voltage: Voltage,\n    Freq: Freq\n\n}]\n\nnode.status({\n    fill: \""blue\"", shape: \""ring\"", text: Serial + \"" \""\n});\n\nvar Influx1 = { payload: Influx };\nvar time = Date.now();\nvar Time1 = { payload: time };\n\nreturn [Influx1, Time1];\n\n"",
        ""outputs"": 2,
        ""noerr"": 0,
        ""initialize"": """",
        ""finalize"": """",
        ""libs"": [],
        ""x"": 260,
        ""y"": 1180,
        ""wires"": [
            [
                ""0e5a2761cc02ce2f"",
                ""021a0677dc11cef7""
            ],
            [
                ""fd4f2368225e8e13""
            ]
        ]
    },
    {
        ""id"": ""0e5a2761cc02ce2f"",
        ""type"": ""debug"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""debug 16"",
        ""active"": false,
        ""tosidebar"": true,
        ""console"": false,
        ""tostatus"": false,
        ""complete"": ""false"",
        ""statusVal"": """",
        ""statusType"": ""auto"",
        ""x"": 460,
        ""y"": 1160,
        ""wires"": []
    },
    {
        ""id"": ""021a0677dc11cef7"",
        ""type"": ""link out"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""WR-1-Influx-Out"",
        ""mode"": ""link"",
        ""links"": [
            ""33ccdd9af5d41741""
        ],
        ""x"": 415,
        ""y"": 1200,
        ""wires"": []
    },
    {
        ""id"": ""b7d52756a7f01d12"",
        ""type"": ""debug"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""debug 17"",
        ""active"": false,
        ""tosidebar"": true,
        ""console"": false,
        ""tostatus"": false,
        ""complete"": ""true"",
        ""targetType"": ""full"",
        ""statusVal"": """",
        ""statusType"": ""auto"",
        ""x"": 460,
        ""y"": 1000,
        ""wires"": []
    },
    {
        ""id"": ""ee70914d74c5b307"",
        ""type"": ""debug"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""debug 18"",
        ""active"": false,
        ""tosidebar"": true,
        ""console"": false,
        ""tostatus"": false,
        ""complete"": ""payload"",
        ""targetType"": ""msg"",
        ""statusVal"": """",
        ""statusType"": ""auto"",
        ""x"": 460,
        ""y"": 1080,
        ""wires"": []
    },
    {
        ""id"": ""1dd479370234a46e"",
        ""type"": ""join"",
        ""z"": ""67b46672db338c88"",
        ""name"": """",
        ""mode"": ""custom"",
        ""build"": ""object"",
        ""property"": ""payload"",
        ""propertyType"": ""msg"",
        ""key"": ""topic"",
        ""joiner"": ""\\n"",
        ""joinerType"": ""str"",
        ""accumulate"": false,
        ""timeout"": ""3"",
        ""count"": """",
        ""reduceRight"": false,
        ""reduceExp"": """",
        ""reduceInit"": """",
        ""reduceInitType"": """",
        ""reduceFixup"": """",
        ""x"": 750,
        ""y"": 1120,
        ""wires"": [
            [
                ""43c6426e3b12901c"",
                ""6a469cbaba841203""
            ]
        ]
    },
    {
        ""id"": ""d03113ef9277bbcc"",
        ""type"": ""function"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""function 4"",
        ""func"": ""// /home/JW/solar/116162810751/0/yieldtotal -> 0yieldtotal\n// /home/JW/solar/116162810751/4/power -> 4power\nvar words = msg.topic.split('/');\nvar Serial = (words[4]);\nvar Panel = (words[5]);\nvar FieldName = (words[6]);\nFieldName = FieldName + Panel;\nmsg.topic = FieldName;\nmsg.Serial = Serial;\nreturn msg;"",
        ""outputs"": 1,
        ""noerr"": 0,
        ""initialize"": """",
        ""finalize"": """",
        ""libs"": [],
        ""x"": 740,
        ""y"": 1060,
        ""wires"": [
            [
                ""1dd479370234a46e"",
                ""490bccec8509d8b8""
            ]
        ]
    },
    {
        ""id"": ""43c6426e3b12901c"",
        ""type"": ""function"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""function 5"",
        ""func"": ""var Serial = msg.Serial;\n\nvar power0 = msg.payload.power0;\nvar power1 = msg.payload.power1;\nvar power2 = msg.payload.power2;\nvar power3 = msg.payload.power3;\nvar power4 = msg.payload.power4;\n\nvar yieldday0 = msg.payload.yieldday0;\nvar yieldday1 = msg.payload.yieldday1;\nvar yieldday2 = msg.payload.yieldday2;\nvar yieldday3 = msg.payload.yieldday3;\nvar yieldday4 = msg.payload.yieldday4;\n\nvar yieldtotal0 = msg.payload.yieldtotal0;\nvar yieldtotal1 = msg.payload.yieldtotal1;\nvar yieldtotal2 = msg.payload.yieldtotal2;\nvar yieldtotal3 = msg.payload.yieldtotal3;\nvar yieldtotal4 = msg.payload.yieldtotal4;\n\nvar voltage0 = msg.payload.voltage0;\nvar voltage1 = msg.payload.voltage1;\nvar voltage2 = msg.payload.voltage2;\nvar voltage3 = msg.payload.voltage3;\nvar voltage4 = msg.payload.voltage4;\n\nvar current0 = msg.payload.current0;\nvar current1 = msg.payload.current1;\nvar current2 = msg.payload.current2;\nvar current3 = msg.payload.current3;\nvar current4 = msg.payload.current4;\n\n// Values from WR only (output to Grid)\nvar Temp = msg.payload.temperature0;\nvar Voltage = msg.payload.voltage0;\nvar Freq = msg.payload.frequency0;\n\nvar Influx = [{\n    Serial: Serial,\n\n    Power0: power0,\n    Power1: power1,\n    Power2: power2,\n    Power3: power3,\n    Power4: power4,\n\n    YieldDay0: yieldday0,\n    YieldDay1: yieldday1,\n    YieldDay2: yieldday2,\n    YieldDay3: yieldday3,\n    YieldDay4: yieldday4,\n\n    YieldTotal0: yieldtotal0,\n    YieldTotal1: yieldtotal1,\n    YieldTotal2: yieldtotal2,\n    YieldTotal3: yieldtotal3,\n    YieldTotal4: yieldtotal4,\n\n    Voltage0: voltage0,\n    Voltage1: voltage1,\n    Voltage2: voltage2,\n    Voltage3: voltage3,\n    Voltage4: voltage4,\n\n    Current0: current0,\n    Current1: current1,\n    Current2: current2,\n    Current3: current3,\n    Current4: current4,\n\n    Temp: Temp,\n    Voltage: Voltage,\n    Freq: Freq\n\n}]\n\nnode.status({\n    fill: \""blue\"", shape: \""ring\"", text: Serial + \"" \""\n});\n\nvar Influx1 = { payload: Influx };\nvar time = Date.now();\nvar Time1 = { payload: time };\n\nreturn [Influx1, Time1];\n\n"",
        ""outputs"": 2,
        ""noerr"": 0,
        ""initialize"": """",
        ""finalize"": """",
        ""libs"": [],
        ""x"": 740,
        ""y"": 1180,
        ""wires"": [
            [
                ""173bc3bef4216221"",
                ""02bc127bc7371a0f""
            ],
            [
                ""4dd518daec4282be""
            ]
        ]
    },
    {
        ""id"": ""173bc3bef4216221"",
        ""type"": ""debug"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""Influx-DB-Out"",
        ""active"": false,
        ""tosidebar"": true,
        ""console"": false,
        ""tostatus"": false,
        ""complete"": ""payload"",
        ""targetType"": ""msg"",
        ""statusVal"": """",
        ""statusType"": ""auto"",
        ""x"": 940,
        ""y"": 1160,
        ""wires"": []
    },
    {
        ""id"": ""02bc127bc7371a0f"",
        ""type"": ""link out"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""WR-2-Influx-Out"",
        ""mode"": ""link"",
        ""links"": [
            ""33ccdd9af5d41741""
        ],
        ""x"": 885,
        ""y"": 1200,
        ""wires"": []
    },
    {
        ""id"": ""490bccec8509d8b8"",
        ""type"": ""debug"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""debug 20"",
        ""active"": false,
        ""tosidebar"": true,
        ""console"": false,
        ""tostatus"": false,
        ""complete"": ""true"",
        ""targetType"": ""full"",
        ""statusVal"": """",
        ""statusType"": ""auto"",
        ""x"": 920,
        ""y"": 1020,
        ""wires"": []
    },
    {
        ""id"": ""6a469cbaba841203"",
        ""type"": ""debug"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""debug 21"",
        ""active"": false,
        ""tosidebar"": true,
        ""console"": false,
        ""tostatus"": false,
        ""complete"": ""true"",
        ""targetType"": ""full"",
        ""statusVal"": """",
        ""statusType"": ""auto"",
        ""x"": 920,
        ""y"": 1080,
        ""wires"": []
    },
    {
        ""id"": ""153723416ff79191"",
        ""type"": ""function"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""Store \""Producing\"" as Global Variable"",
        ""func"": ""var Producing = msg.payload;\nglobal.set(\""WR1-Producing\"", Producing)\n\nnode.status({\n    fill: \""blue\"", shape: \""ring\"", text: \""Producing: \""+ Producing\n});\n\nreturn msg;"",
        ""outputs"": 1,
        ""noerr"": 0,
        ""initialize"": """",
        ""finalize"": """",
        ""libs"": [],
        ""x"": 1290,
        ""y"": 1700,
        ""wires"": [
            []
        ]
    },
    {
        ""id"": ""8654a9845731a2a8"",
        ""type"": ""switch"",
        ""z"": ""67b46672db338c88"",
        ""name"": """",
        ""property"": ""WR1-Producing"",
        ""propertyType"": ""global"",
        ""rules"": [
            {
                ""t"": ""eq"",
                ""v"": ""1"",
                ""vt"": ""num""
            }
        ],
        ""checkall"": ""true"",
        ""repair"": false,
        ""outputs"": 1,
        ""x"": 270,
        ""y"": 1000,
        ""wires"": [
            [
                ""4de39906772d3736""
            ]
        ]
    },
    {
        ""id"": ""8235fbcdd150b8c9"",
        ""type"": ""switch"",
        ""z"": ""67b46672db338c88"",
        ""name"": """",
        ""property"": ""WR1-Producing"",
        ""propertyType"": ""global"",
        ""rules"": [
            {
                ""t"": ""eq"",
                ""v"": ""1"",
                ""vt"": ""str""
            }
        ],
        ""checkall"": ""true"",
        ""repair"": false,
        ""outputs"": 1,
        ""x"": 730,
        ""y"": 1000,
        ""wires"": [
            [
                ""d03113ef9277bbcc""
            ]
        ]
    },
    {
        ""id"": ""fd4f2368225e8e13"",
        ""type"": ""moment"",
        ""z"": ""67b46672db338c88"",
        ""name"": """",
        ""topic"": """",
        ""input"": ""payload"",
        ""inputType"": ""msg"",
        ""inTz"": ""ETC/GMT"",
        ""adjAmount"": ""0"",
        ""adjType"": ""hours"",
        ""adjDir"": ""subtract"",
        ""format"": ""dd DD. MMMM YYYY HH:mm:ss "",
        ""locale"": ""de_DE"",
        ""output"": """",
        ""outputType"": ""msg"",
        ""outTz"": ""Europe/Berlin"",
        ""x"": 500,
        ""y"": 1240,
        ""wires"": [
            [
                ""24c162118cc9b596""
            ]
        ]
    },
    {
        ""id"": ""24c162118cc9b596"",
        ""type"": ""debug"",
        ""z"": ""67b46672db338c88"",
        ""name"": """",
        ""active"": false,
        ""tosidebar"": true,
        ""console"": false,
        ""tostatus"": true,
        ""complete"": ""payload"",
        ""targetType"": ""msg"",
        ""statusVal"": ""payload"",
        ""statusType"": ""auto"",
        ""x"": 470,
        ""y"": 1280,
        ""wires"": []
    },
    {
        ""id"": ""4dd518daec4282be"",
        ""type"": ""moment"",
        ""z"": ""67b46672db338c88"",
        ""name"": """",
        ""topic"": """",
        ""input"": ""payload"",
        ""inputType"": ""msg"",
        ""inTz"": ""ETC/GMT"",
        ""adjAmount"": ""0"",
        ""adjType"": ""hours"",
        ""adjDir"": ""subtract"",
        ""format"": ""dd DD. MMMM YYYY HH:mm:ss "",
        ""locale"": ""de_DE"",
        ""output"": """",
        ""outputType"": ""msg"",
        ""outTz"": ""Europe/Berlin"",
        ""x"": 960,
        ""y"": 1240,
        ""wires"": [
            [
                ""f756a4e84b28890f""
            ]
        ]
    },
    {
        ""id"": ""f756a4e84b28890f"",
        ""type"": ""debug"",
        ""z"": ""67b46672db338c88"",
        ""name"": """",
        ""active"": false,
        ""tosidebar"": true,
        ""console"": false,
        ""tostatus"": true,
        ""complete"": ""payload"",
        ""targetType"": ""msg"",
        ""statusVal"": ""payload"",
        ""statusType"": ""auto"",
        ""x"": 930,
        ""y"": 1280,
        ""wires"": []
    },
    {
        ""id"": ""7c9e67f106d6c33f"",
        ""type"": ""influxdb out"",
        ""z"": ""67b46672db338c88"",
        ""influxdb"": ""5eb30425.ba7dbc"",
        ""name"": ""JW (local)"",
        ""measurement"": ""Werte"",
        ""precision"": """",
        ""retentionPolicy"": """",
        ""database"": """",
        ""retentionPolicyV18Flux"": """",
        ""org"": """",
        ""bucket"": """",
        ""x"": 820,
        ""y"": 60,
        ""wires"": []
    },
    {
        ""id"": ""33ccdd9af5d41741"",
        ""type"": ""link in"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""Influx-All-In"",
        ""links"": [
            ""e9ebc005ec9d3a49"",
            ""6df4b532721b259e"",
            ""3b2fe42d8352705c"",
            ""b57b6d6933cc9b82"",
            ""15deadbca4d5b209"",
            ""021a0677dc11cef7"",
            ""02bc127bc7371a0f""
        ],
        ""x"": 605,
        ""y"": 60,
        ""wires"": [
            [
                ""7c9e67f106d6c33f""
            ]
        ]
    },
    {
        ""id"": ""706f124bcaf5c0ad"",
        ""type"": ""comment"",
        ""z"": ""67b46672db338c88"",
        ""name"": ""write to Influx DB"",
        ""info"": """",
        ""x"": 140,
        ""y"": 60,
        ""wires"": []
    },
    {
        ""id"": ""1aee3213a7893e0e"",
        ""type"": ""mqtt-broker"",
        ""name"": """",
        ""broker"": ""192.168.123.16"",
        ""port"": ""1883"",
        ""clientid"": """",
        ""autoConnect"": true,
        ""usetls"": false,
        ""protocolVersion"": ""4"",
        ""keepalive"": ""60"",
        ""cleansession"": true,
        ""autoUnsubscribe"": true,
        ""birthTopic"": """",
        ""birthQos"": ""0"",
        ""birthPayload"": """",
        ""birthMsg"": {},
        ""closeTopic"": """",
        ""closeQos"": ""0"",
        ""closePayload"": """",
        ""closeMsg"": {},
        ""willTopic"": """",
        ""willQos"": ""0"",
        ""willPayload"": """",
        ""willMsg"": {},
        ""userProps"": """",
        ""sessionExpiry"": """"
    },
    {
        ""id"": ""459aaa63cf88a451"",
        ""type"": ""ui_group"",
        ""name"": ""BKW: HM-1500 GS-WR-1"",
        ""tab"": ""e7a466ecbe93e634"",
        ""order"": 3,
        ""disp"": true,
        ""width"": ""5"",
        ""collapse"": false,
        ""className"": """"
    },
    {
        ""id"": ""110d22d6abec3911"",
        ""type"": ""ui_group"",
        ""name"": ""Panel 1 + 2-WR-1"",
        ""tab"": ""e7a466ecbe93e634"",
        ""order"": 4,
        ""disp"": true,
        ""width"": ""4"",
        ""collapse"": false,
        ""className"": """"
    },
    {
        ""id"": ""8a2b7e69bc92a27a"",
        ""type"": ""ui_group"",
        ""name"": ""DTU: GS-WR-1"",
        ""tab"": ""e7a466ecbe93e634"",
        ""order"": 1,
        ""disp"": true,
        ""width"": ""5"",
        ""collapse"": false,
        ""className"": """"
    },
    {
        ""id"": ""ce3549f1898bdf0b"",
        ""type"": ""ui_group"",
        ""name"": ""Panel 3 + 4-WR-1"",
        ""tab"": ""e7a466ecbe93e634"",
        ""order"": 5,
        ""disp"": true,
        ""width"": ""4"",
        ""collapse"": false,
        ""className"": """"
    },
    {
        ""id"": ""2a952f6bd293d8ca"",
        ""type"": ""ui_group"",
        ""name"": ""WR-Status-WR-1"",
        ""tab"": ""e7a466ecbe93e634"",
        ""order"": 2,
        ""disp"": true,
        ""width"": ""4"",
        ""collapse"": false,
        ""className"": """"
    },
    {
        ""id"": ""5eb30425.ba7dbc"",
        ""type"": ""influxdb"",
        ""hostname"": ""192.168.178.4"",
        ""port"": ""8086"",
        ""protocol"": ""http"",
        ""database"": ""JW01"",
        ""name"": ""JW01"",
        ""usetls"": false,
        ""tls"": """",
        ""influxdbVersion"": ""1.x"",
        ""url"": """",
        ""rejectUnauthorized"": false
    },
    {
        ""id"": ""e7a466ecbe93e634"",
        ""type"": ""ui_tab"",
        ""name"": ""Solardaten WR-1"",
        ""icon"": ""dashboard"",
        ""order"": 1,
        ""disabled"": false,
        ""hidden"": false
    }
]"
mq5ujcjx,ChemicalTankInstaller,advtech,Lua,Wednesday 22nd of May 2024 04:08:51 PM CDT,"-- Installer Script: installer.lua
local function detectPeripheralType()
    local sides = {""left"", ""right"", ""top"", ""bottom"", ""front"", ""back""}
    local detected = {}
    for _, side in ipairs(sides) do
        if peripheral.isPresent(side) then
            local type = peripheral.getType(side)
            detected[type] = side
        end
    end
    return detected
end

local function promptForPeripheral(type)
    print(""Please enter the side for the "" .. type .. "" (left, right, top, bottom, front, back):"")
    return read()
end

local function installClient()
    local detected = detectPeripheralType()
    local modemSide = detected[""modem""] or promptForPeripheral(""modem"")
    local monitorSide = detected[""monitor""] or promptForPeripheral(""monitor"")

    local clientScript = string.format([[
-- Client Script: client.lua
local modemSide = ""%s"" -- Adjust based on your setup
local monitorSide = ""%s"" -- Adjust based on your setup

rednet.open(modemSide)
local monitor = peripheral.wrap(monitorSide)
if not monitor then
    error(""Monitor not found"")
end

monitor.setTextScale(1)

local statuses = {}

-- Define hex colors for different chemicals
local chemicalHexColors = {
    chlorine = ""#FFFF00"",   -- Yellow
    hydrogen = ""#00FFFF"",   -- Cyan
    oxygen = ""#0000FF"",     -- Blue
    sodium = ""#FFA500"",     -- Orange
    -- Add more chemical colors as needed
}

-- Utility function to map hex colors to ComputerCraft colors
local function hexToColor(hex)
    local colorMap = {
        [""#FFFFFF""] = colors.white,
        [""#000000""] = colors.black,
        [""#FF0000""] = colors.red,
        [""#00FF00""] = colors.lime,
        [""#0000FF""] = colors.blue,
        [""#FFFF00""] = colors.yellow,
        [""#FFA500""] = colors.orange,
        [""#800080""] = colors.purple,
        [""#C0C0C0""] = colors.lightGray,
        [""#808080""] = colors.gray,
        [""#00FFFF""] = colors.cyan,
        [""#008080""] = colors.cyan,
        [""#FFC0CB""] = colors.pink,
        [""#FFD700""] = colors.yellow,
        [""#ADFF2F""] = colors.lime,
        [""#8A2BE2""] = colors.purple,
        [""#00FF00""] = colors.lime,
        [""#00008B""] = colors.blue,
        [""#008000""] = colors.green
        -- Add more mappings as needed
    }
    return colorMap[hex] or colors.white
end

function drawBox(mon, x1, y1, x2, y2, color)
    mon.setBackgroundColor(color)
    for y = y1, y2 do
        mon.setCursorPos(x1, y)
        mon.write(string.rep("" "", x2 - x1 + 1))
    end
end

function drawLine(mon, x1, y1, x2, y2, color)
    mon.setBackgroundColor(color)
    mon.setCursorPos(x1, y1)
    mon.write(string.rep("" "", x2 - x1 + 1))
end

function drawTank(mon, x, y, width, height, percentage, chemicalName)
    local filledHeight = math.floor(percentage * height / 100)
    local emptyHeight = height - filledHeight
    local chemicalColorHex = chemicalHexColors[chemicalName] or ""#00FF00""
    local chemicalColor = hexToColor(chemicalColorHex)

    -- Debug information
    print(""Drawing tank: "", chemicalName, ""Hex: "", chemicalColorHex, ""Color: "", chemicalColor, ""FilledHeight: "", filledHeight, ""EmptyHeight: "", emptyHeight, ""Percentage: "", percentage)

    drawBox(mon, x, y, x + width - 1, y + emptyHeight - 1, colors.lightGray)
    drawBox(mon, x, y + emptyHeight, x + width - 1, y + height - 1, chemicalColor)
    
    mon.setCursorPos(x, y + height + 1)
    mon.setBackgroundColor(colors.black)
    mon.setTextColor(colors.white)
    mon.write(hemicalName)
end

function stripChemicalName(fullName)
    local name = fullName:match(""mekanism:(%w+)"")
    print(""Stripped chemical name: "", name) -- Debug information
    return name
end

function drawGUI()
    monitor.clear()
    local width, height = monitor.getSize()
    drawBox(monitor, 1, 1, width, height, colors.gray)
    drawLine(monitor, 1, 2, width, 2, colors.lightGray)
    monitor.setCursorPos(2, 1)
    monitor.setBackgroundColor(colors.black)
    monitor.setTextColor(colors.white)
    monitor.write(""Mekanism Machines Status"")
    
    local xOffset = 2
    local yOffset = 4
    local tankWidth = math.floor(width / 4) - 2
    local tankHeight = math.floor((height - 4) / 3) - 2
    
    for id, status in pairs(statuses) do
        if status.error then
            monitor.setCursorPos(xOffset, yOffset)
            monitor.write(""Error: "" .. status.error)
        else
            local strippedChemicalName = stripChemicalName(status.chemicalName or ""None"") or ""None""
            drawTank(monitor, xOffset, yOffset, tankWidth, tankHeight, status.percentage, strippedChemicalName)
            yOffset = yOffset + tankHeight + 3
            if yOffset > height - tankHeight - 2 then
                yOffset = 4
                xOffset = xOffset + tankWidth + 3
            end
        end
    end
end

while true do
    local senderId, status, protocol = rednet.receive(""machineStatus"")
    if status then
        statuses[senderId] = status
        drawGUI()
    end
    sleep(1) -- Update every second
end
]], modemSide, monitorSide)

    local file = fs.open(""client.lua"", ""w"")
    file.write(clientScript)
    file.close()
    print(""Client script installed as 'client.lua'."")

    -- Create autorun file
    local autorunFile = fs.open(""startup"", ""w"")
    autorunFile.write('shell.run(""client.lua"")')
    autorunFile.close()
    print(""Autorun script created."")

    print(""Rebooting..."")
    os.reboot()
end

local function installServer()
    local detected = detectPeripheralType()
    local modemSide = detected[""modem""] or promptForPeripheral(""modem"")
    local machineSide = detected[""tileTank""] or detected[""inductionMatrix""] or promptForPeripheral(""machine"")
    local machineType = detected[""tileTank""] and ""chemical_tank"" or detected[""inductionMatrix""] and ""induction_matrix""

    if not machineType then
        print(""Please select the type of machine (chemical_tank or induction_matrix):"")
        machineType = read()
    end

    local serverScript = string.format([[
-- Server Script: server.lua
local modemSide = ""%s"" -- Adjust based on your setup
local machineSide = ""%s"" -- Adjust based on your setup
local machineType = ""%s"" -- Change this to ""induction_matrix"" for induction matrix

rednet.open(modemSide)

function getChemicalTankStatus()
    local tank = peripheral.wrap(machineSide)
    if not tank then
        return {error = ""Chemical Tank not found""}
    end
    
    local storedChemical = tank.getStored()
    local capacity = tank.getChemicalTankCapacity()
    local amount = storedChemical.amount or 0
    local chemicalName = storedChemical.name or ""None""
    local percentage = tank.getFilledPercentage() or 0

    -- Debug information
    print(""Sending status: "", chemicalName, amount, capacity, percentage)

    local status = {
        type = ""Chemical Tank"",
        chemicalName = chemicalName,
        amount = amount,
        capacity = capacity,
        percentage = percentage
    }
    return status
end

function getInductionMatrixStatus()
    local matrix = peripheral.wrap(machineSide)
    if not matrix then
        return {error = ""Induction Matrix not found""}
    end
    
    local energyStored = matrix.getEnergy() or 0
    local maxEnergy = matrix.getMaxEnergy() or 0
    local percentage = (energyStored / maxEnergy) * 100

    local status = {
        type = ""Induction Matrix"",
        energyStored = energyStored,
        maxEnergy = maxEnergy,
        percentage = percentage
    }
    return status
end

function getMachineStatus()
    if machineType == ""chemical_tank"" then
        return getChemicalTankStatus()
    elseif machineType == ""induction_matrix"" then
        return getInductionMatrixStatus()
    else
        return {error = ""Unknown machine type""}
    end
end

while true do
    local status = getMachineStatus()
    rednet.broadcast(status, ""machineStatus"")
    sleep(5) -- Update every 5 seconds
end
]], modemSide, machineSide, machineType)

    local file = fs.open(""server.lua"", ""w"")
    file.write(serverScript)
    file.close()
    print(""Server script installed as 'server.lua'."")

    -- Create autorun file
    local autorunFile = fs.open(""startup"", ""w"")
    autorunFile.write('shell.run(""server.lua"")')
    autorunFile.close()
    print(""Autorun script created."")

    print(""Rebooting..."")
    os.reboot()
end

print(""Install as (1) Client or (2) Server?"")
local choice = read()
if choice == ""1"" then
    installClient()
elseif choice == ""2"" then
    installServer()
else
    print(""Invalid choice. Exiting."")
end
"
MaVFDJ1E,trains.lua,mine_ing,Lua,Wednesday 22nd of May 2024 04:03:59 PM CDT,"trainstation = peripheral.wrap(""left"")
dieselS = {
    cyclic = true,
    entries = {
        {
            conditions = {
                {
                    {
                        data = {},
                        id = ""create:powered""
                    }
                }
                  
            },
            instruction = {
                data = {
                    text = ""IC-Freigh-Fluid-1""
                },
                id = ""create:destination""
            }
        },
        {
            instruction = {
                data = { text = ""IC-NEntry"" },
                id = ""railways:waypoint_destination""
            }
        },
        {
            instruction = {
                data = { text = ""FC-Netherentry"" },
                id = ""railways:waypoint_destination""
            }
        }, 
        {
            conditions = {
                {
                    {
                        data = {
                            bucket = {
                                count = 1,
                                id = ""minecraft:air"",
                                tag = {}
                            },
                            measure = 0,
                            operator = 2,
                            threshold = ""432""
                        },
                        id = ""create:fluid_threshold""
                    }
                }   
            },
            instruction = {
                data = {
                    text = ""FC-Freigh-Diesel-1""
                },
                id = ""create:destination""
            }
        }
    }

}
lavaS= {
    cyclic = true,
    entries = {
        {
            conditions = {
                {
                    {
                        data = {},
                        id = ""create:powered""
                    }
                }
                  
            },
            instruction = {
                data = {
                    text = ""IC-Freigh-Fluid-1""
                },
                id = ""create:destination""
            }
        },
        {
            instruction = {
                data = { text = ""IC-NEntry"" },
                id = ""railways:waypoint_destination""
            }
        },
        {
            instruction = {
                data = { text = ""FC-Netherentry"" },
                id = ""railways:waypoint_destination""
            }
        }, 
        {
            conditions = {
                {
                    {
                        data = {
                            bucket = {
                                count = 1,
                                id = ""minecraft:air"",
                                tag = {}
                            },
                            measure = 0,
                            operator = 2,
                            threshold = ""432""
                        },
                        id = ""create:fluid_threshold""
                    }
                }   
            },
            instruction = {
                data = {
                    text = ""FC-Freigh-Diesel-1""
                },
                id = ""create:destination""
            }
        }
    }

}
trainstation.setSchedule(schedule)


"
QmvUwPju,Pastebin.ai - #1 Pastebin Alternative,xxsa,PHP,Wednesday 22nd of May 2024 04:03:18 PM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free and always will be.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes.
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
..
......................................
.."
2EFGeqi5,Unity ScrollContentManager,DoctorTaco,C#,Wednesday 22nd of May 2024 03:54:01 PM CDT,"using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.UI;

public class ScrollContentManager : MonoBehaviour {
    [SerializeField] bool viewCull = true;
    [SerializeField] bool horizontal;
    [SerializeField] RectTransform visibleArea;

    Func<IEnumerable<IScrollContentItem>> objectList;
    public Func<IEnumerable<IScrollContentItem>> ObjectList {
        get => objectList;
        set {
            objectList = value;
            float x = horizontal ? (itemWidth * (ObjectList?.Invoke() ?? new List<IScrollContentItem>()).Count()) : transform.Rect().sizeDelta.x;
            float y = horizontal ? transform.Rect().sizeDelta.y : (itemWidth * (ObjectList?.Invoke() ?? new List<IScrollContentItem>()).Count());
            transform.Rect().sizeDelta = new Vector2(x, y);

            foreach (var go in prefabsSpawned.Values) {
                Destroy(go);
            }
            prefabsSpawned.Clear();
            positionLastFrame = null;
        }
    }

    float localPos => horizontal ? transform.Rect().localPosition.x : transform.Rect().localPosition.y;
    float availableWidth => horizontal ? visibleArea.rect.width : visibleArea.rect.height;
    GameObject prefab => transform.GetChild(0).gameObject;
    float itemWidth => horizontal ? prefab.transform.Rect().sizeDelta.x : prefab.transform.Rect().sizeDelta.y;

    Dictionary<int, GameObject> prefabsSpawned = new Dictionary<int, GameObject>();

    private void Start() {
        prefab.SetActive(false);
    }

    float? positionLastFrame = null;
    void Update() {
        if (positionLastFrame != localPos) {
            positionLastFrame = localPos;
            var objects = ObjectList?.Invoke() ?? new List<IScrollContentItem>();
            if (objects.Count() > 0) {
                float numElementsBeforeDisplay = (horizontal ? -localPos : localPos) / itemWidth;
                int numElementsToDisplay = Mathf.CeilToInt(availableWidth / itemWidth);
                for (int listIndex = 0; listIndex < objects.Count(); listIndex++) {
                    bool shouldBeActive = listIndex > numElementsBeforeDisplay - 2 && listIndex < numElementsBeforeDisplay + numElementsToDisplay;
                    if (!viewCull) shouldBeActive = true;
                    if (shouldBeActive && !prefabsSpawned.ContainsKey(listIndex)) {
                        GameObject spawned = Instantiate(prefab, transform);
                        spawned.transform.Rect().localPosition += horizontal ? new Vector3(listIndex * itemWidth, 0, 0) : new Vector3(0, listIndex * -itemWidth, 0);
                        prefabsSpawned.Add(listIndex, spawned);
                        objects.ElementAt(listIndex).OnPrefabSpawned(spawned);
                        spawned.SetActive(true);
                    }
                    else if (!shouldBeActive && prefabsSpawned.ContainsKey(listIndex)) {
                        Destroy(prefabsSpawned[listIndex]);
                        prefabsSpawned.Remove(listIndex);
                    }
                }
            }
        }
    }

    public void ScrollToListIndex(int index) {
        if (horizontal) {
            if (transform.Rect().rect.width > transform.parent.Rect().rect.width) { //Only scroll if the content is larger than the viewport area
                float desiredPosition = -index * itemWidth;
                float maxPosition = transform.Rect().rect.width - transform.parent.Rect().rect.width; //Cap the X value at content width - viewport width
                desiredPosition = Mathf.Max(desiredPosition, -maxPosition);
                transform.Rect().localPosition = new Vector3(desiredPosition, transform.Rect().localPosition.y, transform.Rect().localPosition.z);
            }
        }
        else {
            if (transform.Rect().rect.height > transform.parent.Rect().rect.height) { //Only scroll if the content is larger than the viewport area
                float desiredPosition = index * itemWidth;
                float maxPosition = transform.Rect().rect.height - transform.parent.Rect().rect.height; //Cap the Y value at content height - viewport height
                desiredPosition = Mathf.Min(desiredPosition, maxPosition);
                transform.Rect().localPosition = new Vector3(transform.Rect().localPosition.x, desiredPosition, transform.Rect().localPosition.z);
            }
        }
    }

    public void CallOnAllSpawnedPrefabs(Action<GameObject> action) {
        foreach (var prefab in prefabsSpawned) {
            action(prefab.Value);
        }
    }
}

public interface IScrollContentItem {
    public void OnPrefabSpawned(GameObject prefab);
}"
ENkMSp4G,0101,Catsher,Python,Wednesday 22nd of May 2024 03:40:40 PM CDT,"class CodeVector:
    def __init__(self, symbols: list[int]) -> None:
        self.positionsList: list[int] = symbols

    def __str__(self) -> str:
        return """".join(list(map(str, self.positionsList)))     


def sum_code_vectors(v1: CodeVector, v2: CodeVector) -> CodeVector:
    if len(str(v1)) != len(str(v2)):
        raise Exception(""Нельзя складывать разной длины"")

    result_symbols: list[int] = []
    for i in range(len(str(v1))):
        symbol_1 = int(str(v1)[i])
        symbol_2 = int(str(v2)[i])

        res_symb = sum_symbols(symbol_1, symbol_2)
        result_symbols.append(res_symb)

    return CodeVector(symbols=result_symbols)

def sum_symbols(s1: int, s2: int) -> int:
    return (s1 + s2) % 2

def string_to_code_vector(s: str) -> CodeVector:
    symbs: list[int] = []
    for c in s:
        if c not in ['0', '1']:
            raise Exception(""Нельзя"")
        symb = int(c)
        symbs.append(symb)

    return CodeVector(symbols=symbs)

def number_to_code_vector(n: int, leng: int) -> CodeVector:
    b = bin(n)[2:]
    if len(str(b)) < leng:
        b = """".join(['0' for i in range(leng - len(str(b)))]) + b
    return string_to_code_vector(s = b)

def ntcv(n: int, leng: int = 4) -> CodeVector:
    return number_to_code_vector(n=n, leng=leng)

def sum_list_of_vectors(vectors: list[CodeVector]) -> CodeVector:
    summ: CodeVector = vectors[0]
    for i in range(1, len(vectors)):
        summ = sum_code_vectors(summ, vectors[i])

    return summ

codes = list(map(ntcv, [2, 4, 5, 9, 12, 13, 14]))
print(sum_list_of_vectors(codes))"
dXcVSMRy,Untitled,Josif_tepe,C++,Wednesday 22nd of May 2024 03:37:53 PM CDT,"#include <iostream>
using namespace std;

int main()
{
    int x, n;
    cin >> x;
    cin >> n;

    int i, proizvod = 1;
    for(i = 1; i <= n; i += 1)
    {
        proizvod *= x;
    }
    cout << proizvod << endl;
}
"
qy61H7nY,Untitled,Josif_tepe,C++,Wednesday 22nd of May 2024 03:24:49 PM CDT,"#include <iostream>
using namespace std;

int main()
{
   int n;
   cin >> n;

   int i = n, cifra, zbir = 0;
   while(i > 0) 
   {
    cifra = i % 10;
    i /= 10;
    zbir += 1; 
   }
   if(zbir % 2 == 0) 
   {
    cout << ""PAREN"" << endl;
   }
   else 
   {
    cout << ""NEPAREN"" << endl;
   }

}
"
5mYv45tr,_2024_lista_transposta_predefinida,gpsgiraldi,C,Wednesday 22nd of May 2024 03:17:42 PM CDT,"#include <stdio.h>

int main()
{
//entrada
    int m,n,i,j;

    printf(""Indique dois valores para o tamanho da matriz mxn: "");
    scanf(""%i %i"",&m,&n);
//não preciso de duas matrizes, a transposição 
//se dará numa saída alternada
    int mat[m][n];

    for(i=0;i<m;i++){
        for(j=0;j<n;j++){
            if((i%2)==0){
                mat[i][j]=1;
            }
            else{
                mat[i][j]=i*j;
            }
        }
    }
//SAÍDA mat
    for(i=0;i<m;i++){
        for(j=0;j<n;j++){
            printf(""%i "",mat[i][j]);
        }
    printf(""\n"");
    }
    printf(""\n\n"");
//SAÍDA matT
//notar que i e j não tem relação constante com m ou n, são simplesmente
//variáveis de controle da leitura/escrita, e que esta relação está 
//definida pelo limite que i e j vão alcançar(e claro, no mat[j][i] está 
//definida a transposição)

    for(i=0;i<n;i++){
        for(j=0;j<m;j++){
            printf(""%i "",mat[j][i]);
        }
    printf(""\n"");
    }
    return 0;
}
"
38mgeWKf,MoonNoIce - worldsettings.xml,Harrod200,XML,Wednesday 22nd of May 2024 03:16:16 PM CDT,"<?xml version=""1.0"" encoding=""utf-8""?>
<GameData xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
	<WorldSettings>
		<World Id=""MoonNoIce"">
			<Name Key=""NewWorldAreaMoonNoIce"" />
			<Description Key=""MoonNoIceShortDesc"" />
			<Spawn Id=""MNILander"" Event=""NewWorld"" />
			<Rating Value=""Intermediate"" Color=""Green"" />
			<StartingCondition>MoonNoIceStart</StartingCondition>
			<PreviewButton Path=""Interface/preview_lunar.png"" />
			<SkyBoxMaterialName>Starfield Skybox</SkyBoxMaterialName>
			<SetSunInSkybox>false</SetSunInSkybox>
			<SunPrefabName>MoonSun</SunPrefabName>
			<TerrainPrefabName>TerrainMoon</TerrainPrefabName>
			<Gravity>-1.62</Gravity>
			<SizeOfWorld>10</SizeOfWorld>
			<WorldOreDensity>0.001</WorldOreDensity>
			<NumberOfCratersPerRegion>5</NumberOfCratersPerRegion>
			<NumberOfRegions>8</NumberOfRegions>
			<SizeOfCraterRegions>50</SizeOfCraterRegions>
			<BedrockLevel>-40</BedrockLevel>
			<Kelvin>0</Kelvin>
			<Clutter>
				<ClutterXmlData>
					<PrefabName>RockMoon</PrefabName>
					<Weighting>10</Weighting>
					<MinScale>0.6</MinScale>
					<MaxScale>1</MaxScale>
					<MaxAngle>40</MaxAngle>
					<Probability>0.02</Probability>
				</ClutterXmlData>
			</Clutter>
			<TerrainGenerationFeatureSettings>
				<isEnabled>true</isEnabled>
				<BigTileSize>100</BigTileSize>
				<TerrainFeatureCraters>
					<MaxCratersPerGrid>15</MaxCratersPerGrid>
					<MaxCraterSize>15</MaxCraterSize>
					<SmallCraterProbability>50</SmallCraterProbability>
					<MediumCraterProbability>25</MediumCraterProbability>
				</TerrainFeatureCraters>
			</TerrainGenerationFeatureSettings>
			<Planets />
			<Skybox />
			<CelestialConstants BodyScale=""5"">
				<TimeOffset Days=""1"" Seconds=""32"" />
			</CelestialConstants>
			<PlayableBody Id=""MoonNoIce"" Latitude=""0"" Longitude=""-111.5"" />
			<CelestialBodies>
				<Sprite Id=""Mercury"" Magnitude=""1.4"" />
				<Sprite Id=""Venus"" Magnitude=""0.9"" />
				<AtmosphericBody Id=""Earth"" RadiusKm=""6380"">
					<FixedRotation x=""0.3978"" y=""0.9175"" z=""0"" Speed=""9"" />
					<Texture Path=""Textures/earth_diffuse.png"" />
					<Normal Path=""Textures/earth_normal.png"" />
					<Specular Path=""Textures/earth_specular.png"" />
					<Material Smoothness=""1"" Metalic=""0.181"" />
					<Cloud Path=""Textures/earth_clouds.png"" Opacity=""1"">
						<Shadow Opacity=""0.5"" Parallax=""0.015"" />
					</Cloud>
					<Fresnel r=""0.4213835"" g=""0.586222"" b=""1"" Power=""1"" Emission=""1"">
						<RimLow r=""0.4245283"" g=""0"" b=""0"" />
						<RimHigh r=""0.735849"" g=""0.4707605"" b=""0"" />
					</Fresnel>
				</AtmosphericBody>
				<Body Id=""MoonNoIce"" Parent=""Earth"" RadiusKm=""1738"">
					<TidalLocking x=""0.0269"" y=""0.9996"" z=""0"" />
				</Body>
				<Sprite Id=""Mars"" Magnitude=""0.99"" />
				<Sprite Id=""Jupiter"" Magnitude=""0.98"" />
				<Sprite Id=""Saturn"" Magnitude=""1.1"" />
				<Sprite Id=""Uranus"" Magnitude=""1.5"" />
				<Sprite Id=""Neptune"" Magnitude=""1.5"" />
				<Sprite Id=""Pluto"" Magnitude=""4"" />
			</CelestialBodies>
			<SpaceMap Id=""MoonNoIce"" OrbitDistance=""200"">
				<Entry Id=""MoonNoIce"" Code=""13"" IsCharted=""true"">
					<Name Value=""Moon Orbit"" />
					<Connection Id=""IceEjectaMNI"" Difficulty=""100"" />
					<Connection Id=""OrbitingAsteroidFragmentsMNI"" Difficulty=""200"" />
					<MapDisplay X=""0"" Y=""0"">
						<Icon Id=""StatMoon"" Size=""3"" />
						<DynamicPanel Orientation=""0"" Offset=""50"" ExtraSize=""130"" />
					</MapDisplay>
				</Entry>
				<Node Id=""IceEjectaMNI"">
					<Name Value=""Ice Ejecta"" />
					<MapDisplay X=""60"" Y=""80"">
						<Icon Id=""IrregularGasCloud01"" Size=""1"" Tint=""165,181,255,255"" />
						<DynamicPanel Orientation=""2"" Offset=""20"" />
					</MapDisplay>
					<Discover Difficulty=""100"">
						<Site Id=""IceEjectaMNI01"">
							<Name Value=""Water Ejecta"" />
							<MapDisplay>
								<Icon Id=""RegularGasCloud03"" />
							</MapDisplay>
							<Deposit>
								<Density Min=""2"" Max=""4"" />
								<Richness Min=""1"" Max=""3"" />
								<Size Min=""2"" Max=""3"" />
								<Composition>
									<Ice Water=""12"" Carbondioxide=""12"" />
								</Composition>
							</Deposit>
						</Site>
						<Site Id=""IceEjectaMNI02"">
							<Name Value=""Volatile Ejecta"" />
							<MapDisplay>
								<Icon Id=""SparseGasCloud01"" />
							</MapDisplay>
							<Deposit>
								<Density Min=""2"" Max=""4"" />
								<Richness Min=""1"" Max=""3"" />
								<Size Min=""2"" Max=""4"" />
								<Composition>
									<Ice Volatiles=""22"" Carbondioxide=""2"" />
								</Composition>
							</Deposit>
						</Site>
						<Site Id=""IceEjectaMNI03"">
							<Name Value=""Oxygen Ejecta"" />
							<MapDisplay>
								<Icon Id=""SparseGasCloud01"" />
							</MapDisplay>
							<Deposit>
								<Density Min=""2"" Max=""4"" />
								<Richness Min=""1"" Max=""3"" />
								<Size Min=""2"" Max=""4"" />
								<Composition>
									<Ice Oxygen=""18"" Carbondioxide=""6"" />
								</Composition>
							</Deposit>
						</Site>
					</Discover>
				</Node>
				<Node Id=""OrbitingAsteroidFragmentsMNI"">
					<Name Value=""Orbiting Asteroid Fragments"" />
					<Connection Id=""FarsideLockedAsteroidsMNI"" Difficulty=""250"" />
					<Connection Id=""IntraEarthAsteroidsMNI"" Difficulty=""500"" />
					<MapDisplay X=""160"" Y=""-10"">
						<Icon Id=""SparseAsteroid02"" Size=""2"" Tint=""207,165,140,255"" />
						<DynamicPanel Orientation=""0"" Offset=""20"" />
					</MapDisplay>
					<Discover Difficulty=""100"">
						<Site Id=""OrbitingAsteroidFragmentsMNI01"">
							<Name Value=""Iron Rocks"" />
							<MapDisplay>
								<Icon Id=""SparseAsteroid05"" />
							</MapDisplay>
							<Deposit>
								<Density Min=""2"" Max=""5"" />
								<Richness Min=""1"" Max=""2"" />
								<Size Min=""2"" Max=""4"" />
								<Composition>
									<ReagentMix Iron=""1"" />
								</Composition>
							</Deposit>
						</Site>
						<Site Id=""OrbitingAsteroidFragmentsMNI02"">
							<Name Value=""Copper Rocks"" />
							<MapDisplay>
								<Icon Id=""SparseAsteroid01"" />
							</MapDisplay>
							<Deposit>
								<Density Min=""2"" Max=""5"" />
								<Richness Min=""1"" Max=""2"" />
								<Size Min=""2"" Max=""4"" />
								<Composition>
									<ReagentMix Copper="".5"" />
								</Composition>
							</Deposit>
						</Site>
						<Site Id=""OrbitingAsteroidFragmentsMNI03"">
							<Name Value=""Gold Rocks"" />
							<MapDisplay>
								<Icon Id=""SparseAsteroid03"" />
							</MapDisplay>
							<Deposit>
								<Density Min=""2"" Max=""5"" />
								<Richness Min=""1"" Max=""2"" />
								<Size Min=""2"" Max=""4"" />
								<Composition>
									<ReagentMix Gold="".3"" />
								</Composition>
							</Deposit>
							<Survey />
						</Site>
						<Site Id=""OrbitingAsteroidFragmentsMNI04"">
							<Name Value=""Silicon Rocks"" />
							<MapDisplay>
								<Icon Id=""SparseAsteroid04"" />
							</MapDisplay>
							<Deposit>
								<Density Min=""2"" Max=""5"" />
								<Richness Min=""1"" Max=""2"" />
								<Size Min=""2"" Max=""4"" />
								<Composition>
									<ReagentMix Silicon="".5"" />
								</Composition>
							</Deposit>
						</Site>
						<Site Id=""OrbitingAsteroidFragmentsMNI05"">
							<Name Value=""Coal Rocks"" />
							<MapDisplay>
								<Icon Id=""SparseAsteroid06"" />
							</MapDisplay>
							<Deposit>
								<Density Min=""2"" Max=""5"" />
								<Richness Min=""1"" Max=""2"" />
								<Size Min=""2"" Max=""4"" />
								<Composition>
									<ReagentMix Hydrocarbon="".5"" />
								</Composition>
							</Deposit>
						</Site>
					</Discover>
				</Node>
				<Node Id=""IntraEarthAsteroidsMNI"">
					<Name Value=""Intra Earth Asteroids"" />
					<MapDisplay X=""280"" Y=""30"">
						<Icon Id=""MetallicAsteroid03"" Size=""1"" Tint=""195,195,212,255"" />
						<DynamicPanel Orientation=""2"" Offset=""20"" />
					</MapDisplay>
					<Discover Difficulty=""200"">
						<Site Id=""IntraEarthAsteroidsMNI01"">
							<Name Value=""Silver deposit"" />
							<MapDisplay>
								<Icon Id=""SparseAsteroid06"" />
							</MapDisplay>
							<Deposit>
								<Density Min=""3"" Max=""5"" />
								<Richness Min=""1"" Max=""4"" />
								<Size Min=""2"" Max=""3"" />
								<Composition>
									<ReagentMix Silver="".15"" />
								</Composition>
							</Deposit>
						</Site>
						<Site Id=""IntraEarthAsteroidsMNI02"">
							<Name Value=""Nickel deposit"" />
							<MapDisplay>
								<Icon Id=""SparseAsteroid07"" />
							</MapDisplay>
							<Deposit>
								<Density Min=""3"" Max=""5"" />
								<Richness Min=""1"" Max=""4"" />
								<Size Min=""2"" Max=""3"" />
								<Composition>
									<ReagentMix Nickel="".15"" />
								</Composition>
							</Deposit>
						</Site>
						<Site Id=""IntraEarthAsteroidsMNI03"">
							<Name Value=""Lead deposit"" />
							<MapDisplay>
								<Icon Id=""StatAsteroidFragment"" />
							</MapDisplay>
							<Deposit>
								<Density Min=""3"" Max=""5"" />
								<Richness Min=""1"" Max=""4"" />
								<Size Min=""2"" Max=""3"" />
								<Composition>
									<ReagentMix Lead="".15"" />
								</Composition>
							</Deposit>
						</Site>
					</Discover>
				</Node>
				<Node Id=""FarsideLockedAsteroidsMNI"">
					<Name Value=""Farside Locked Asteroids"" />
					<Connection Id=""L4CloudMNI"" Difficulty=""500"" />
					<Connection Id=""L5AsteroidClusterMNI"" Difficulty=""1000"" />
					<MapDisplay X=""300"" Y=""-120"">
						<Icon Id=""MetallicAsteroid04"" Size=""2"" Tint=""253,224,206,255"" />
						<DynamicPanel Orientation=""0"" Offset=""20"" />
					</MapDisplay>
					<Discover Difficulty=""300"">
						<Site Id=""FarsideLockedAsteroidsMNI01"">
							<Name Value=""Cobalt Asteroid"" />
							<MapDisplay>
								<Icon Id=""AsteroidCluster06"" />
							</MapDisplay>
							<Deposit>
								<Density Min=""1"" Max=""3"" />
								<Richness Min=""1"" Max=""3"" />
								<Size Min=""2"" Max=""3"" />
								<Composition>
									<ReagentMix Cobalt="".1"" />
								</Composition>
							</Deposit>
						</Site>
					</Discover>
				</Node>
				<Node Id=""L4CloudMNI"">
					<Name Value=""L4 Cloud"" />
					<MapDisplay X=""420"" Y=""-10"">
						<Icon Id=""IrregularGasCloud03"" Size=""1"" Tint=""226,185,188,255"" />
						<DynamicPanel Orientation=""0"" Offset=""20"" />
					</MapDisplay>
					<Discover Difficulty=""300"">
						<Site Id=""L4CloudMNI01"">
							<Name Value=""Dense Oxygen Ice"" />
							<MapDisplay>
								<Icon Id=""IrregularGasCloud02"" />
							</MapDisplay>
							<Deposit>
								<Density Min=""4"" Max=""8"" />
								<Richness Min=""1"" Max=""3"" />
								<Size Min=""3"" Max=""7"" />
								<Composition>
									<Ice Oxygen=""20"" Nitrogen=""4"" />
								</Composition>
							</Deposit>
						</Site>
						<Site Id=""L4CloudMNI02"">
							<Name Value=""NoS Ice"" />
							<MapDisplay>
								<Icon Id=""IrregularGasCloud01"" />
							</MapDisplay>
							<Deposit>
								<Density Min=""4"" Max=""8"" />
								<Richness Min=""1"" Max=""3"" />
								<Size Min=""3"" Max=""7"" />
								<Composition>
									<Ice NitrousOxide=""22"" Nitrogen=""2"" />
								</Composition>
							</Deposit>
						</Site>
						<Site Id=""L4CloudMNI03"">
							<Name Value=""Water Ice"" />
							<MapDisplay>
								<Icon Id=""RegularGasCloud01"" />
							</MapDisplay>
							<Deposit>
								<Density Min=""4"" Max=""8"" />
								<Richness Min=""1"" Max=""3"" />
								<Size Min=""3"" Max=""7"" />
								<Composition>
									<Ice Water=""22"" Nitrogen=""2"" />
								</Composition>
							</Deposit>
						</Site>
					</Discover>
				</Node>
				<Node Id=""L5AsteroidClusterMNI"">
					<Name Value=""L5 Asteroid Cluster"" />
					<MapDisplay X=""140"" Y=""-160"">
						<Icon Id=""DenseAsteroid05"" Size=""1"" Tint=""195,195,212,255"" />
						<DynamicPanel Orientation=""0"" Offset=""20"" />
					</MapDisplay>
					<Discover Difficulty=""100"">
						<Site Id=""L5AsteroidClusterMNI01"">
							<Name Value=""Dense Iron Asteroid"" />
							<MapDisplay>
								<Icon Id=""MetallicAsteroid06"" />
							</MapDisplay>
							<Deposit>
								<Density Min=""4"" Max=""8"" />
								<Richness Min=""1"" Max=""2"" />
								<Size Min=""3"" Max=""6"" />
								<Composition>
									<ReagentMix Iron=""1"" />
								</Composition>
							</Deposit>
						</Site>
					</Discover>
				</Node>
			</SpaceMap>
			<PreviewScene>
				<CameraPosition>
					<x>0.000</x>
					<y>0.000</y>
					<z>0.000</z>
				</CameraPosition>
				<CameraRotation>
					<x>327.150</x>
					<y>180.420</y>
					<z>358.823</z>
				</CameraRotation>
				<SunRotation>
					<x>47.266</x>
					<y>-46.001</y>
					<z>-107.52</z>
				</SunRotation>
				<Prefabs>
					<Prefab>
						<Name>UISun</Name>
						<Position>
							<x>-12</x>
							<y>731</y>
							<z>-728</z>
						</Position>
						<Rotation>
							<x>0</x>
							<y>0</y>
							<z>0</z>
						</Rotation>
						<Scale>
							<x>13.419</x>
							<y>13.419</y>
							<z>13.419</z>
						</Scale>
					</Prefab>
					<Prefab>
						<Name>UIShuttlecraft</Name>
						<Position>
							<x>-21</x>
							<y>159.1</y>
							<z>-236.2</z>
						</Position>
						<Rotation>
							<x>-36.429</x>
							<y>140.917</y>
							<z>32.933</z>
						</Rotation>
						<Scale>
							<x>15.85437</x>
							<y>15.85437</y>
							<z>15.85437</z>
						</Scale>
					</Prefab>
					<Prefab>
						<Name>UIPlanetEarth</Name>
						<Position>
							<x>-165.7227</x>
							<y>331.3017</y>
							<z>-664.209</z>
						</Position>
						<Rotation>
							<x>71.000</x>
							<y>130.000</y>
							<z>76.000</z>
						</Rotation>
						<Scale>
							<x>1.274</x>
							<y>1.274</y>
							<z>1.274</z>
						</Scale>
					</Prefab>
					<Prefab>
						<Name>UIMoon</Name>
						<Position>
							<x>78.300</x>
							<y>61.000</y>
							<z>-298.500</z>
						</Position>
						<Rotation>
							<x>31.644</x>
							<y>0.000</y>
							<z>0.000</z>
						</Rotation>
						<Scale>
							<x>50.000</x>
							<y>50.000</y>
							<z>50.000</z>
						</Scale>
					</Prefab>
				</Prefabs>
				<SunPrefab>SpaceSun (UnityEngine.Light)</SunPrefab>
				<LensFlare>true</LensFlare>
				<LensFlareIntensity>0.250</LensFlareIntensity>
			</PreviewScene>
			<AmbientLighting>
				<Sky r=""0.1838235"" g=""0.1838235"" b=""0.1838235"" />
				<Equator r=""0.1176471"" g=""0.1176471"" b=""0.1176471"" />
				<Ground r=""0.08088237"" g=""0.08088237"" b=""0.08088237"" />
			</AmbientLighting>
			<NoTerrainLod>true</NoTerrainLod>
			<MineablesOverride>
				<MineableData>
					<DisplayName>Ice</DisplayName>
					<OrePrefabName>ItemIce</OrePrefabName>
					<VisualizerPrefabName>AsteroidOreIce</VisualizerPrefabName>
					<GoggleVisualizerPrefabName>VisualizerGoggleOreIce</GoggleVisualizerPrefabName>
					<Rarity>0</Rarity>
					<MiningTime>2</MiningTime>
					<VoxelType>Ice</VoxelType>
					<VeinSize>1</VeinSize>
					<MaxDropQuantity>0</MaxDropQuantity>
					<MinDropQuantity>0</MinDropQuantity>
					<MaxVeinAttempts>0</MaxVeinAttempts>
					<MinVeinAttempts>0</MinVeinAttempts>
				</MineableData>
				<MineableData>
					<DisplayName>Oxite</DisplayName>
					<OrePrefabName>ItemOxite</OrePrefabName>
					<VisualizerPrefabName>AsteroidOreOxite</VisualizerPrefabName>
					<GoggleVisualizerPrefabName>VisualizerGoggleOreOxite</GoggleVisualizerPrefabName>
					<Rarity>0</Rarity>
					<MiningTime>2</MiningTime>
					<VoxelType>Oxite</VoxelType>
					<VeinSize>1</VeinSize>
					<MaxDropQuantity>0</MaxDropQuantity>
					<MinDropQuantity>0</MinDropQuantity>
					<MaxVeinAttempts>0</MaxVeinAttempts>
					<MinVeinAttempts>0</MinVeinAttempts>
				</MineableData>
				<MineableData>
					<DisplayName>Volatiles</DisplayName>
					<OrePrefabName>ItemVolatiles</OrePrefabName>
					<VisualizerPrefabName>AsteroidOreVolatiles</VisualizerPrefabName>
					<GoggleVisualizerPrefabName>VisualizerGoggleOreVolatiles</GoggleVisualizerPrefabName>
					<Rarity>0</Rarity>
					<MiningTime>2</MiningTime>
					<VoxelType>Volatiles</VoxelType>
					<VeinSize>1</VeinSize>
					<MaxDropQuantity>0</MaxDropQuantity>
					<MinDropQuantity>0</MinDropQuantity>
					<MaxVeinAttempts>0</MaxVeinAttempts>
					<MinVeinAttempts>0</MinVeinAttempts>
				</MineableData>
				<MineableData>
					<DisplayName>Coal</DisplayName>
					<OrePrefabName>ItemCoalOre</OrePrefabName>
					<VisualizerPrefabName>AsteroidOreCoal</VisualizerPrefabName>
					<GoggleVisualizerPrefabName>VisualizerGoggleOreCoal</GoggleVisualizerPrefabName>
					<Rarity>0</Rarity>
					<MiningTime>3</MiningTime>
					<VoxelType>Coal</VoxelType>
					<VeinSize>1</VeinSize>
					<MaxDropQuantity>0</MaxDropQuantity>
					<MinDropQuantity>0</MinDropQuantity>
					<MaxVeinAttempts>0</MaxVeinAttempts>
					<MinVeinAttempts>0</MinVeinAttempts>
				</MineableData>
				<MineableData>
					<DisplayName>Nitrice</DisplayName>
					<OrePrefabName>ItemNitrice</OrePrefabName>
					<VisualizerPrefabName>AsteroidOreNitrice</VisualizerPrefabName>
					<GoggleVisualizerPrefabName>VisualizerGoggleOreNitrice</GoggleVisualizerPrefabName>
					<Rarity>0</Rarity>
					<MiningTime>2</MiningTime>
					<VoxelType>Nitrice</VoxelType>
					<VeinSize>1</VeinSize>
					<MaxDropQuantity>0</MaxDropQuantity>
					<MinDropQuantity>0</MinDropQuantity>
					<MaxVeinAttempts>0</MaxVeinAttempts>
					<MinVeinAttempts>0</MinVeinAttempts>
				</MineableData>
			</MineablesOverride>
			<DeepMineablesOverride>
				<DeepMineableData>
					<DisplayName>Iron</DisplayName>
					<OrePrefabName>ItemIronOre</OrePrefabName>
					<VisualizerPrefabName>AsteroidOreIron</VisualizerPrefabName>
					<GoggleVisualizerPrefabName>VisualizerGoggleOreIron</GoggleVisualizerPrefabName>
					<Rarity>90</Rarity>
					<MiningTime>1</MiningTime>
					<VoxelType>Iron</VoxelType>
					<VeinSize>1</VeinSize>
					<MaxDropQuantity>6</MaxDropQuantity>
					<MinDropQuantity>3</MinDropQuantity>
					<MaxVeinAttempts>100</MaxVeinAttempts>
					<MinVeinAttempts>50</MinVeinAttempts>
				</DeepMineableData>
				<DeepMineableData>
					<DisplayName>Gold</DisplayName>
					<OrePrefabName>ItemGoldOre</OrePrefabName>
					<VisualizerPrefabName>AsteroidOreGold</VisualizerPrefabName>
					<GoggleVisualizerPrefabName>VisualizerGoggleOreGold</GoggleVisualizerPrefabName>
					<Rarity>30</Rarity>
					<MiningTime>5</MiningTime>
					<VoxelType>Gold</VoxelType>
					<VeinSize>1</VeinSize>
					<MaxDropQuantity>4</MaxDropQuantity>
					<MinDropQuantity>2</MinDropQuantity>
					<MaxVeinAttempts>60</MaxVeinAttempts>
					<MinVeinAttempts>40</MinVeinAttempts>
				</DeepMineableData>
				<DeepMineableData>
					<DisplayName>Coal</DisplayName>
					<OrePrefabName>ItemCoalOre</OrePrefabName>
					<VisualizerPrefabName>AsteroidOreCoal</VisualizerPrefabName>
					<GoggleVisualizerPrefabName>VisualizerGoggleOreCoal</GoggleVisualizerPrefabName>
					<Rarity>0</Rarity>
					<MiningTime>3</MiningTime>
					<VoxelType>Coal</VoxelType>
					<VeinSize>1</VeinSize>
					<MaxDropQuantity>0</MaxDropQuantity>
					<MinDropQuantity>0</MinDropQuantity>
					<MaxVeinAttempts>0</MaxVeinAttempts>
					<MinVeinAttempts>0</MinVeinAttempts>
				</DeepMineableData>
				<DeepMineableData>
					<DisplayName>Copper</DisplayName>
					<OrePrefabName>ItemCopperOre</OrePrefabName>
					<VisualizerPrefabName>AsteroidOreCopper</VisualizerPrefabName>
					<GoggleVisualizerPrefabName>VisualizerGoggleOreCopper</GoggleVisualizerPrefabName>
					<Rarity>40</Rarity>
					<MiningTime>2</MiningTime>
					<VoxelType>Copper</VoxelType>
					<VeinSize>1</VeinSize>
					<MaxDropQuantity>5</MaxDropQuantity>
					<MinDropQuantity>3</MinDropQuantity>
					<MaxVeinAttempts>80</MaxVeinAttempts>
					<MinVeinAttempts>60</MinVeinAttempts>
				</DeepMineableData>
				<DeepMineableData>
					<DisplayName>Uranium</DisplayName>
					<OrePrefabName>ItemUraniumOre</OrePrefabName>
					<VisualizerPrefabName>AsteroidOreUranium</VisualizerPrefabName>
					<GoggleVisualizerPrefabName>VisualizerGoggleOreUranium</GoggleVisualizerPrefabName>
					<Rarity>5</Rarity>
					<MiningTime>5</MiningTime>
					<VoxelType>Uranium</VoxelType>
					<VeinSize>1</VeinSize>
					<MaxDropQuantity>3</MaxDropQuantity>
					<MinDropQuantity>2</MinDropQuantity>
					<MaxVeinAttempts>40</MaxVeinAttempts>
					<MinVeinAttempts>20</MinVeinAttempts>
				</DeepMineableData>
				<DeepMineableData>
					<DisplayName>Silver</DisplayName>
					<OrePrefabName>ItemSilverOre</OrePrefabName>
					<VisualizerPrefabName>AsteroidOreSilver</VisualizerPrefabName>
					<GoggleVisualizerPrefabName>VisualizerGoggleOreSilver</GoggleVisualizerPrefabName>
					<Rarity>10</Rarity>
					<MiningTime>5</MiningTime>
					<VoxelType>Silver</VoxelType>
					<VeinSize>1</VeinSize>
					<MaxDropQuantity>10</MaxDropQuantity>
					<MinDropQuantity>5</MinDropQuantity>
					<MaxVeinAttempts>40</MaxVeinAttempts>
					<MinVeinAttempts>20</MinVeinAttempts>
				</DeepMineableData>
				<DeepMineableData>
					<DisplayName>Nickel</DisplayName>
					<OrePrefabName>ItemNickelOre</OrePrefabName>
					<VisualizerPrefabName>AsteroidOreNickel</VisualizerPrefabName>
					<GoggleVisualizerPrefabName>VisualizerGoggleOreNickel</GoggleVisualizerPrefabName>
					<Rarity>10</Rarity>
					<MiningTime>5</MiningTime>
					<VoxelType>Nickel</VoxelType>
					<VeinSize>1</VeinSize>
					<MaxDropQuantity>10</MaxDropQuantity>
					<MinDropQuantity>5</MinDropQuantity>
					<MaxVeinAttempts>40</MaxVeinAttempts>
					<MinVeinAttempts>20</MinVeinAttempts>
				</DeepMineableData>
				<DeepMineableData>
					<DisplayName>Lead</DisplayName>
					<OrePrefabName>ItemLeadOre</OrePrefabName>
					<VisualizerPrefabName>AsteroidOreLead</VisualizerPrefabName>
					<GoggleVisualizerPrefabName>VisualizerGoggleOreLead</GoggleVisualizerPrefabName>
					<Rarity>10</Rarity>
					<MiningTime>5</MiningTime>
					<VoxelType>Lead</VoxelType>
					<VeinSize>1</VeinSize>
					<MaxDropQuantity>10</MaxDropQuantity>
					<MinDropQuantity>5</MinDropQuantity>
					<MaxVeinAttempts>40</MaxVeinAttempts>
					<MinVeinAttempts>20</MinVeinAttempts>
				</DeepMineableData>
				<DeepMineableData>
					<DisplayName>Silicon</DisplayName>
					<OrePrefabName>ItemSiliconOre</OrePrefabName>
					<VisualizerPrefabName>AsteroidOreSilicon</VisualizerPrefabName>
					<GoggleVisualizerPrefabName>VisualizerGoggleOreSilicon</GoggleVisualizerPrefabName>
					<Rarity>40</Rarity>
					<MiningTime>4</MiningTime>
					<VoxelType>Silicon</VoxelType>
					<VeinSize>1</VeinSize>
					<MaxDropQuantity>6</MaxDropQuantity>
					<MinDropQuantity>3</MinDropQuantity>
					<MaxVeinAttempts>50</MaxVeinAttempts>
					<MinVeinAttempts>30</MinVeinAttempts>
				</DeepMineableData>
				<DeepMineableData>
					<DisplayName>Cobalt</DisplayName>
					<OrePrefabName>ItemCobaltOre</OrePrefabName>
					<VisualizerPrefabName>AsteroidOreCobalt</VisualizerPrefabName>
					<GoggleVisualizerPrefabName>VisualizerGoggleOreCobalt</GoggleVisualizerPrefabName>
					<Rarity>10</Rarity>
					<MiningTime>5</MiningTime>
					<VoxelType>Cobalt</VoxelType>
					<VeinSize>1</VeinSize>
					<MaxDropQuantity>5</MaxDropQuantity>
					<MinDropQuantity>3</MinDropQuantity>
					<MaxVeinAttempts>40</MaxVeinAttempts>
					<MinVeinAttempts>20</MinVeinAttempts>
				</DeepMineableData>
			</DeepMineablesOverride>
		</World>
	</WorldSettings>
</GameData>
"
sEttRVzq,Untitled,Josif_tepe,C++,Wednesday 22nd of May 2024 03:15:55 PM CDT,"#include <iostream>
using namespace std;

int main()
{
    int x, n;
    cin >> x;
    cin >> n;

    int proizvod = 1, i;
    for(i = n; i > 0; i--) 
    {
        proizvod *= x;
    }
    cout << proizvod << endl;

}
"
Ez4qvEs4,MoonNoIce - startconditions.xml,Harrod200,XML,Wednesday 22nd of May 2024 03:13:35 PM CDT,"<GameData>
    <!-- Landers -->
    <Spawn Id=""MNILander"">
        <DynamicThing Id=""Lander"">
            <Color Id=""Yellow""/>
            <Spawn Id=""MNIConSupplies1""/>
            <Spawn Id=""MNIConSupplies2""/>
            <Spawn Id=""MNIOrgSupplies1""/>
            <Spawn Id=""MNIResSupplies1""/>
            <Spawn Id=""MNISumSupplies1""/>
            <Spawn Id=""MNIPorSupplies1""/>
            <DynamicThing Id=""DynamicGasTankAdvanced"" SlotIndex=""6"">
                <Color Id=""White""/>
                <Name Value=""Oxygen Tank""/>
                <Gas Type=""Oxygen"" Moles=""2500"" Celsius=""15""/>
            </DynamicThing>
            <DynamicThing Id=""DynamicMKIILiquidCanisterEmpty"" SlotIndex=""7"">
                <Color Id=""Blue""/>
                <Name Value=""Water Tank""/>
                <Gas Type=""Water"" Litres=""780"" Celsius=""15""/>
            </DynamicThing>
        </DynamicThing>
    </Spawn>
	<Spawn Id=""MNIConSupplies1"">
        <DynamicThing Id=""DynamicCrate"">
            <Name Value=""Construction Supplies 1""/>
            <Color Id=""Yellow""/>
            <Item Id=""ItemKitArcFurnace""/>
            <Item Id=""ItemKitAutolathe""/>
            <Item Id=""ItemIronFrames"">
                <Quantity Value=""30""/>
            </Item>
            <Item Id=""ItemIronSheets"">
                <Quantity Value=""50""/>
            </Item>
            <Item Id=""ItemPlasticSheets"">
                <Quantity Value=""50""/>
            </Item>		
            <Item Id=""ItemAreaPowerControl"">
                <Quantity Value=""2""/>
            </Item>
            <Item Id=""ItemSteelSheets"">
                <Quantity Value=""4""/>
            </Item>
            <Item Id=""ItemKitWallIron"">
                <Quantity Value=""30""/>
            </Item>
            <Item Id=""ItemKitSolarPanelBasic""/>
            <Item Id=""ItemGlassSheets"">
                <Quantity Value=""50""/>
            </Item>			
        </DynamicThing>
	</Spawn>
	<Spawn Id=""MNIConSupplies2"">
        <DynamicThing Id=""DynamicCrate"">
            <Name Value=""Construction Supplies 2""/>
            <Color Id=""Yellow""/>
            <Item Id=""ItemActiveVent""/>
            <Item Id=""ItemKitConsole""/>
            <Item Id=""ItemKitDoor"">
                <Quantity Value=""2""/>
            </Item>
            <Item Id=""CircuitboardAirlockControl""/>
            <Item Id=""ItemPipeValve"">
                <Quantity Value=""2""/>
            </Item>		
            <Item Id=""ItemKitPipe"">
                <Quantity Value=""20""/>
            </Item>
            <Item Id=""ItemBatteryCellLarge"">
                <Charge State=""Full""/>
            </Item>
            <Item Id=""ItemDataDisk""/>
            <Item Id=""ItemKitSensor""/>
            <Item Id=""ItemBatteryChargerSmall""/>	
        </DynamicThing>
    </Spawn>
	<Spawn Id=""MNIOrgSupplies1"">
        <DynamicThing Id=""DynamicCrate"">
            <Name Value=""Organic Supplies 1""/>
            <Color Id=""Green""/>
            <Item Id=""ItemEggCarton"">
                <Name Value=""Egg Carton (Fertilized)""/>
                <Item Id=""ItemFertilizedEgg"" />
                <Item Id=""ItemFertilizedEgg"" />
                <Item Id=""ItemFertilizedEgg"" />
                <Item Id=""ItemFertilizedEgg"" />
                <Item Id=""ItemFertilizedEgg"" />
                <Item Id=""ItemFertilizedEgg"" />
            </Item>
            <Item Id=""SeedBag_Potato"">
                <Quantity Value=""3""/>
            </Item>
            <Item Id=""SeedBag_Wheet"">
                <Quantity Value=""3""/>
            </Item>
            <Item Id=""SeedBag_Corn"">
                <Quantity Value=""3""/>
            </Item>
            <Item Id=""SeedBag_Fern"">
                <Quantity Value=""3""/>
            </Item>		
            <Item Id=""SeedBag_Soybean"">
                <Quantity Value=""3""/>
            </Item>
            <Item Id=""SeedBag_Tomato"">
                <Quantity Value=""3""/>
            </Item>
            <Item Id=""SeedBag_Pumpkin"">
                <Quantity Value=""3""/>
            </Item>
            <Item Id=""ItemFilterFern"">
                <Quantity Value=""3""/>
            </Item>
            <Item Id=""SeedBag_Rice"">
                <Quantity Value=""3""/>
            </Item>			
        </DynamicThing>
    </Spawn>
	<Spawn Id=""MNIResSupplies1"">
        <DynamicThing Id=""DynamicCrate"">
            <Name Value=""Residential Supplies 1""/>
            <Color Id=""Yellow""/>
            <Item Id=""ItemWaterBottle"">
                <Percent Value=""100""/>
            </Item>
            <Item Id=""ItemWaterBottle"">
                <Percent Value=""100""/>
            </Item>
            <Item Id=""ItemKitTables"">
                <Quantity Value=""2""/>
            </Item>
            <Item Id=""ItemKitLocker"">
                <Quantity Value=""2""/>
            </Item>
            <Item Id=""ApplianceMicrowave""/>		
            <Item Id=""ItemTomatoSoup""/>
            <Item Id=""ItemWaterBottle"">
                <Percent Value=""100""/>
            </Item>
            <Item Id=""ItemCornSoup""/>
            <Item Id=""CartridgeOreScanner""/>	
            <Item Id=""ItemKitGrowLight""/>			
        </DynamicThing>
    </Spawn>
	<Spawn Id=""MNISumSupplies1"">
        <DynamicThing Id=""DynamicCrate"">
            <Name Value=""Consumable Supplies 1""/>
            <Color Id=""Red""/>
            <Item Id=""ItemRoadFlare"">
                <Quantity Value=""20""/>
            </Item>
            <Item Id=""CircuitboardAdvAirlockControl""/>
            <Item Id=""ItemFlagSmall"">
                <Quantity Value=""10""/>
            </Item>
            <Item Id=""ItemSprayCanBlue""/>
            <Item Id=""ItemSprayCanGreen""/>		
            <Item Id=""ItemSprayCanYellow""/>
            <Item Id=""ItemSprayCanWhite""/>
            <Item Id=""ItemSprayCanRed""/>
            <Item Id=""ItemBeacon"">
                <Item Id=""ItemBatteryCell"" SlotId=""Battery"">
                    <Charge State=""Full""/>
                </Item>
            </Item>
            <Item Id=""ItemLabeller"">
                <Item Id=""ItemBatteryCell"" SlotId=""Battery"">
                    <Charge State=""Full""/>
                </Item>
            </Item>	
        </DynamicThing>
    </Spawn>
	<Spawn Id=""MNIPorSupplies1"">
        <DynamicThing Id=""DynamicCrate"">
            <Name Value=""Portable Appliance Kits""/>
            <Color Id=""Blue""/>
            <Item Id=""ItemKitDynamicHydroponics""/>
            <Item Id=""ItemDynamicAirCon""/>
            <Item Id=""ItemKitDynamicGenerator""/>
            <Item Id=""ItemDynamicScrubber""/>
            <Item Id=""ItemLiquidCanisterEmpty"">
                <Name Value=""Liquid Water""/>
                <Color Id=""Blue""/>
                <Gas Type=""Water"" Litres=""12"" Celsius=""5""/>
            </Item>	
            <Item Id=""ItemBatteryCell"">
                <Charge State=""Full""/>
            </Item>
            <Item Id=""ItemBatteryCell"">
                <Charge State=""Full""/>
            </Item>
            <Item Id=""ItemWrench""/>
            <Item Id=""ItemDuctTape""/>
            <Item Id=""ItemDuctTape""/>			
        </DynamicThing>
    </Spawn>
</GameData>
"
Hg8raKwM,Untitled,Josif_tepe,C++,Wednesday 22nd of May 2024 03:02:25 PM CDT,"#include <iostream>
using namespace std;

int main()
{
    int n;
    cin >> n;

    int i, zbir = 0;
    for(i = n; i > 0; i -= 1) 
    {
        int broj;
        cin >> broj;
        zbir += broj;
    }
    cout << zbir << endl;

}
"
