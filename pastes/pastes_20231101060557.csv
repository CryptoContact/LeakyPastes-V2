id,title,username,language,date,content
gN694A7C,Nigerian scammers [1-11-1/2023],bombaires,AIMMS,Wednesday 1st of November 2023 12:12:52 AM CDT,"<a href=""mailto:info@i-sript.love"">info@i-sript.love</a>
<a href=""mailto:info@mail-intelligence.life"">info@mail-intelligence.life</a>
<a href=""mailto:support@order-help.com"">support@order-help.com</a>
<a href=""mailto:redxavier152@gmail.com"">redxavier152@gmail.com</a>
<a href=""mailto:r.ed.xav.i.er1.52@gmail.com"">r.ed.xav.i.er1.52@gmail.com</a>
<a href=""mailto:redxav.i.e.r1.52@gmail.com"">redxav.i.e.r1.52@gmail.com</a>
<a href=""mailto:re.d.x.a.vie.r.152@gmail.com"">re.d.x.a.vie.r.152@gmail.com</a>
<a href=""mailto:re.dxavie.r.152@gmail.com"">re.dxavie.r.152@gmail.com</a>
<a href=""mailto:red.x.avi.e.r.1.52@gmail.com"">red.x.avi.e.r.1.52@gmail.com</a>
<a href=""mailto:re.d.x.a.v.ier1.5.2@gmail.com"">re.d.x.a.v.ier1.5.2@gmail.com</a>
<a href=""mailto:re.d.x.a.v.ier.1.52@gmail.com"">re.d.x.a.v.ier.1.52@gmail.com</a>
<a href=""mailto:re.d.x.a.vie.r1.52@gmail.com"">re.d.x.a.vie.r1.52@gmail.com</a>
<a href=""mailto:re.d.x.a.v.i.e.r.152@gmail.com"">re.d.x.a.v.i.e.r.152@gmail.com</a>
<a href=""mailto:re.dxav.i.e.r15.2@gmail.com"">re.dxav.i.e.r15.2@gmail.com</a>
<a href=""mailto:r.ed.xavie.r.1.5.2@gmail.com"">r.ed.xavie.r.1.5.2@gmail.com</a>
<a href=""mailto:re.dx.av.i.e.r.15.2@gmail.com"">re.dx.av.i.e.r.15.2@gmail.com</a>
<a href=""mailto:r.e.dxa.v.ier1.5.2@gmail.com"">r.e.dxa.v.ier1.5.2@gmail.com</a>
<a href=""mailto:r.e.dx.a.vi.er1.5.2@gmail.com"">r.e.dx.a.vi.er1.5.2@gmail.com</a>
<a href=""mailto:r.e.d.xavier15.2@gmail.com"">r.e.d.xavier15.2@gmail.com</a>
<a href=""mailto:r.ed.x.avi.er.152@gmail.com"">r.ed.x.avi.er.152@gmail.com</a>
<a href=""mailto:red.xavier.15.2@gmail.com"">red.xavier.15.2@gmail.com</a>
<a href=""mailto:r.e.d.x.a.v.i.e.r1.5.2@gmail.com"">r.e.d.x.a.v.i.e.r1.5.2@gmail.com</a>
<a href=""mailto:redx.avier1.52@gmail.com"">redx.avier1.52@gmail.com</a>
<a href=""mailto:r.edxa.vier1.5.2@gmail.com"">r.edxa.vier1.5.2@gmail.com</a>
<a href=""mailto:red.xav.ier1.52@gmail.com"">red.xav.ier1.52@gmail.com</a>
<a href=""mailto:re.dx.a.vie.r152@gmail.com"">re.dx.a.vie.r152@gmail.com</a>
<a href=""mailto:r.ed.xav.ier152@gmail.com"">r.ed.xav.ier152@gmail.com</a>
<a href=""mailto:red.x.avie.r152@gmail.com"">red.x.avie.r152@gmail.com</a>
<a href=""mailto:r.e.d.x.a.v.i.e.r.1.52@gmail.com"">r.e.d.x.a.v.i.e.r.1.52@gmail.com</a>
<a href=""mailto:r.edxav.ie.r.1.5.2@gmail.com"">r.edxav.ie.r.1.5.2@gmail.com</a>
<a href=""mailto:re.dxa.v.ie.r.1.52@gmail.com"">re.dxa.v.ie.r.1.52@gmail.com</a>
<a href=""mailto:re.dx.av.ier15.2@gmail.com"">re.dx.av.ier15.2@gmail.com</a>
<a href=""mailto:re.d.x.avi.er.152@gmail.com"">re.d.x.avi.er.152@gmail.com</a>
<a href=""mailto:r.e.dx.a.v.i.e.r1.52@gmail.com"">r.e.dx.a.v.i.e.r1.52@gmail.com</a>
<a href=""mailto:red.xa.vi.er.1.5.2@gmail.com"">red.xa.vi.er.1.5.2@gmail.com</a>
<a href=""mailto:red.xa.vi.er1.52@gmail.com"">red.xa.vi.er1.52@gmail.com</a>
<a href=""mailto:red.xav.ie.r152@gmail.com"">red.xav.ie.r152@gmail.com</a>
<a href=""mailto:r.edx.av.i.er1.52@gmail.com"">r.edx.av.i.er1.52@gmail.com</a>
<a href=""mailto:red.xav.ier.1.52@gmail.com"">red.xav.ier.1.52@gmail.com</a>
<a href=""mailto:re.dx.a.v.i.e.r1.52@gmail.com"">re.dx.a.v.i.e.r1.52@gmail.com</a>
<a href=""mailto:r.e.d.x.avier15.2@gmail.com"">r.e.d.x.avier15.2@gmail.com</a>
<a href=""mailto:r.ed.xa.v.ie.r.152@gmail.com"">r.ed.xa.v.ie.r.152@gmail.com</a>
<a href=""mailto:r.e.dx.av.ier152@gmail.com"">r.e.dx.av.ier152@gmail.com</a>
<a href=""mailto:r.ed.x.a.v.ier1.52@gmail.com"">r.ed.x.a.v.ier1.52@gmail.com</a>
<a href=""mailto:r.e.d.xa.v.ie.r.152@gmail.com"">r.e.d.xa.v.ie.r.152@gmail.com</a>
<a href=""mailto:red.x.avie.r.152@gmail.com"">red.x.avie.r.152@gmail.com</a>
<a href=""mailto:re.d.xavi.e.r152@gmail.com"">re.d.xavi.e.r152@gmail.com</a>
<a href=""mailto:re.d.xavie.r15.2@gmail.com"">re.d.xavie.r15.2@gmail.com</a>
<a href=""mailto:re.d.xa.v.ier.1.5.2@gmail.com"">re.d.xa.v.ier.1.5.2@gmail.com</a>
<a href=""mailto:redx.avi.e.r.152@gmail.com"">redx.avi.e.r.152@gmail.com</a>
<a href=""mailto:re.dxav.ier152@gmail.com"">re.dxav.ier152@gmail.com</a>
<a href=""mailto:r.edxav.ier.15.2@gmail.com"">r.edxav.ier.15.2@gmail.com</a>
<a href=""mailto:r.e.d.xa.vie.r.15.2@gmail.com"">r.e.d.xa.vie.r.15.2@gmail.com</a>
<a href=""mailto:r.e.dxavi.e.r15.2@gmail.com"">r.e.dxavi.e.r15.2@gmail.com</a>
<a href=""mailto:re.dxa.v.i.er.1.52@gmail.com"">re.dxa.v.i.er.1.52@gmail.com</a>
<a href=""mailto:r.e.d.xa.vi.e.r152@gmail.com"">r.e.d.xa.vi.e.r152@gmail.com</a>
<a href=""mailto:r.edx.av.i.er.1.52@gmail.com"">r.edx.av.i.er.1.52@gmail.com</a>
<a href=""mailto:re.d.xav.i.er.152@gmail.com"">re.d.xav.i.er.152@gmail.com</a>
<a href=""mailto:redx.av.ier1.52@gmail.com"">redx.av.ier1.52@gmail.com</a>
<a href=""mailto:r.e.dx.a.vi.e.r.152@gmail.com"">r.e.dx.a.vi.e.r.152@gmail.com</a>
<a href=""mailto:r.edxa.v.i.e.r1.5.2@gmail.com"">r.edxa.v.i.e.r1.5.2@gmail.com</a>
<a href=""mailto:red.x.avi.er1.5.2@gmail.com"">red.x.avi.er1.5.2@gmail.com</a>
<a href=""mailto:redx.a.vier1.52@gmail.com"">redx.a.vier1.52@gmail.com</a>
<a href=""mailto:red.xav.i.e.r1.52@gmail.com"">red.xav.i.e.r1.52@gmail.com</a>
<a href=""mailto:r.e.dx.av.i.e.r.1.5.2@gmail.com"">r.e.dx.av.i.e.r.1.5.2@gmail.com</a>
<a href=""mailto:redx.av.i.er.1.5.2@gmail.com"">redx.av.i.er.1.5.2@gmail.com</a>
<a href=""mailto:r.e.dxavie.r1.5.2@gmail.com"">r.e.dxavie.r1.5.2@gmail.com</a>
<a href=""mailto:red.x.avie.r1.52@gmail.com"">red.x.avie.r1.52@gmail.com</a>
<a href=""mailto:r.e.d.xavie.r1.5.2@gmail.com"">r.e.d.xavie.r1.5.2@gmail.com</a>
<a href=""mailto:r.e.d.xavie.r1.52@gmail.com"">r.e.d.xavie.r1.52@gmail.com</a>
<a href=""mailto:r.e.dx.av.i.e.r152@gmail.com"">r.e.dx.av.i.e.r152@gmail.com</a>
<a href=""mailto:r.ed.xa.vier152@gmail.com"">r.ed.xa.vier152@gmail.com</a>
<a href=""mailto:re.d.x.avi.er.1.52@gmail.com"">re.d.x.avi.er.1.52@gmail.com</a>
<a href=""mailto:re.d.x.avi.e.r.1.52@gmail.com"">re.d.x.avi.e.r.1.52@gmail.com</a>
<a href=""mailto:redxa.vi.e.r1.52@gmail.com"">redxa.vi.e.r1.52@gmail.com</a>
<a href=""mailto:redx.a.vie.r.152@gmail.com"">redx.a.vie.r.152@gmail.com</a>
<a href=""mailto:re.dxa.v.ier1.52@gmail.com"">re.dxa.v.ier1.52@gmail.com</a>
<a href=""mailto:re.dxa.v.ier.152@gmail.com"">re.dxa.v.ier.152@gmail.com</a>
<a href=""mailto:r.e.d.x.av.i.er.152@gmail.com"">r.e.d.x.av.i.er.152@gmail.com</a>
<a href=""mailto:r.e.d.x.av.i.e.r.152@gmail.com"">r.e.d.x.av.i.e.r.152@gmail.com</a>
<a href=""mailto:red.x.a.vi.e.r15.2@gmail.com"">red.x.a.vi.e.r15.2@gmail.com</a>
<a href=""mailto:r.e.dx.a.vi.er1.52@gmail.com"">r.e.dx.a.vi.er1.52@gmail.com</a>
<a href=""mailto:redxav.ie.r152@gmail.com"">redxav.ie.r152@gmail.com</a>
<a href=""mailto:re.dxav.i.er15.2@gmail.com"">re.dxav.i.er15.2@gmail.com</a>
<a href=""mailto:re.d.x.a.vi.e.r.15.2@gmail.com"">re.d.x.a.vi.e.r.15.2@gmail.com</a>
<a href=""mailto:redxavier.15.2@gmail.com"">redxavier.15.2@gmail.com</a>
<a href=""mailto:redxa.vier15.2@gmail.com"">redxa.vier15.2@gmail.com</a>
<a href=""mailto:re.d.xa.vi.er.15.2@gmail.com"">re.d.xa.vi.er.15.2@gmail.com</a>
<a href=""mailto:r.e.dx.av.i.er1.5.2@gmail.com"">r.e.dx.av.i.er1.5.2@gmail.com</a>
<a href=""mailto:re.dx.av.i.er.1.5.2@gmail.com"">re.dx.av.i.er.1.5.2@gmail.com</a>
<a href=""mailto:r.e.dxa.vier1.52@gmail.com"">r.e.dxa.vier1.52@gmail.com</a>
<a href=""mailto:r.e.d.x.a.vier.1.5.2@gmail.com"">r.e.d.x.a.vier.1.5.2@gmail.com</a>
<a href=""mailto:red.x.a.vi.er1.52@gmail.com"">red.x.a.vi.er1.52@gmail.com</a>
<a href=""mailto:re.dx.avier1.52@gmail.com"">re.dx.avier1.52@gmail.com</a>
<a href=""mailto:redxav.i.er15.2@gmail.com"">redxav.i.er15.2@gmail.com</a>
<a href=""mailto:r.e.d.x.avier.1.5.2@gmail.com"">r.e.d.x.avier.1.5.2@gmail.com</a>
<a href=""mailto:r.edxav.ie.r.1.52@gmail.com"">r.edxav.ie.r.1.52@gmail.com</a>
<a href=""mailto:r.ed.xavi.er1.52@gmail.com"">r.ed.xavi.er1.52@gmail.com</a>
<a href=""mailto:redxa.vier.15.2@gmail.com"">redxa.vier.15.2@gmail.com</a>
<a href=""mailto:re.dx.a.v.ie.r.1.5.2@gmail.com"">re.dx.a.v.ie.r.1.5.2@gmail.com</a>
<a href=""mailto:re.dx.a.v.i.e.r.15.2@gmail.com"">re.dx.a.v.i.e.r.15.2@gmail.com</a>
<a href=""mailto:re.dxa.vi.e.r.1.52@gmail.com"">re.dxa.vi.e.r.1.52@gmail.com</a>
<a href=""mailto:red.xav.i.e.r.1.52@gmail.com"">red.xav.i.e.r.1.52@gmail.com</a>
<a href=""mailto:redx.a.v.i.er.1.5.2@gmail.com"">redx.a.v.i.er.1.5.2@gmail.com</a>
<a href=""mailto:re.dxa.vie.r.15.2@gmail.com"">re.dxa.vie.r.15.2@gmail.com</a>
<a href=""mailto:r.e.dxa.v.ie.r.15.2@gmail.com"">r.e.dxa.v.ie.r.15.2@gmail.com</a>
<a href=""mailto:r.e.d.x.a.v.ie.r.15.2@gmail.com"">r.e.d.x.a.v.ie.r.15.2@gmail.com</a>
<a href=""mailto:re.d.x.av.ie.r.15.2@gmail.com"">re.d.x.av.ie.r.15.2@gmail.com</a>
<a href=""mailto:re.dx.a.v.ie.r.15.2@gmail.com"">re.dx.a.v.ie.r.15.2@gmail.com</a>
<a href=""mailto:r.e.dx.a.vi.er.1.52@gmail.com"">r.e.dx.a.vi.er.1.52@gmail.com</a>
<a href=""mailto:redxavi.e.r152@gmail.com"">redxavi.e.r152@gmail.com</a>
<a href=""mailto:r.edxavier.1.52@gmail.com"">r.edxavier.1.52@gmail.com</a>
<a href=""mailto:red.xa.v.i.e.r.15.2@gmail.com"">red.xa.v.i.e.r.15.2@gmail.com</a>
<a href=""mailto:r.ed.xa.v.ier1.52@gmail.com"">r.ed.xa.v.ier1.52@gmail.com</a>
<a href=""mailto:r.e.d.x.a.v.i.er1.5.2@gmail.com"">r.e.d.x.a.v.i.er1.5.2@gmail.com</a>
<a href=""mailto:r.edxav.ie.r.152@gmail.com"">r.edxav.ie.r.152@gmail.com</a>
<a href=""mailto:re.d.xa.vier15.2@gmail.com"">re.d.xa.vier15.2@gmail.com</a>
<a href=""mailto:re.d.xa.v.ie.r.1.5.2@gmail.com"">re.d.xa.v.ie.r.1.5.2@gmail.com</a>
<a href=""mailto:re.dxa.v.ie.r1.5.2@gmail.com"">re.dxa.v.ie.r1.5.2@gmail.com</a>
<a href=""mailto:r.edx.av.ie.r152@gmail.com"">r.edx.av.ie.r152@gmail.com</a>
<a href=""mailto:r.edx.a.v.i.er152@gmail.com"">r.edx.a.v.i.er152@gmail.com</a>
<a href=""mailto:re.d.x.avie.r1.5.2@gmail.com"">re.d.x.avie.r1.5.2@gmail.com</a>
<a href=""mailto:redxavie.r.1.5.2@gmail.com"">redxavie.r.1.5.2@gmail.com</a>
<a href=""mailto:r.e.dxavi.er.15.2@gmail.com"">r.e.dxavi.er.15.2@gmail.com</a>
<a href=""mailto:r.e.dxa.vier.15.2@gmail.com"">r.e.dxa.vier.15.2@gmail.com</a>
<a href=""mailto:re.d.xavi.e.r.15.2@gmail.com"">re.d.xavi.e.r.15.2@gmail.com</a>
<a href=""mailto:re.dx.a.vi.e.r.1.5.2@gmail.com"">re.dx.a.vi.e.r.1.5.2@gmail.com</a>
<a href=""mailto:re.dx.avi.e.r.1.5.2@gmail.com"">re.dx.avi.e.r.1.5.2@gmail.com</a>
<a href=""mailto:r.ed.x.a.vier.1.52@gmail.com"">r.ed.x.a.vier.1.52@gmail.com</a>
<a href=""mailto:r.e.dx.a.vier.152@gmail.com"">r.e.dx.a.vier.152@gmail.com</a>
<a href=""mailto:redxa.v.i.e.r.15.2@gmail.com"">redxa.v.i.e.r.15.2@gmail.com</a>
<a href=""mailto:redxavie.r.152@gmail.com"">redxavie.r.152@gmail.com</a>
<a href=""mailto:re.d.xa.v.ie.r1.52@gmail.com"">re.d.xa.v.ie.r1.52@gmail.com</a>
<a href=""mailto:re.dxavier.1.5.2@gmail.com"">re.dxavier.1.5.2@gmail.com</a>
<a href=""mailto:re.d.x.a.v.i.er.152@gmail.com"">re.d.x.a.v.i.er.152@gmail.com</a>
<a href=""mailto:redxa.v.ie.r.15.2@gmail.com"">redxa.v.ie.r.15.2@gmail.com</a>
<a href=""mailto:re.d.x.avi.er152@gmail.com"">re.d.x.avi.er152@gmail.com</a>
<a href=""mailto:r.ed.x.av.ier.1.52@gmail.com"">r.ed.x.av.ier.1.52@gmail.com</a>
<a href=""mailto:r.ed.x.av.ie.r.1.5.2@gmail.com"">r.ed.x.av.ie.r.1.5.2@gmail.com</a>
<a href=""mailto:red.x.avier.1.52@gmail.com"">red.x.avier.1.52@gmail.com</a>
<a href=""mailto:red.xavi.e.r1.5.2@gmail.com"">red.xavi.e.r1.5.2@gmail.com</a>
<a href=""mailto:re.d.xa.v.i.e.r.152@gmail.com"">re.d.xa.v.i.e.r.152@gmail.com</a>
<a href=""mailto:r.e.d.x.avi.e.r.152@gmail.com"">r.e.d.x.avi.e.r.152@gmail.com</a>
<a href=""mailto:red.xav.i.er.152@gmail.com"">red.xav.i.er.152@gmail.com</a>
<a href=""mailto:r.e.d.x.av.ier.1.52@gmail.com"">r.e.d.x.av.ier.1.52@gmail.com</a>
<a href=""mailto:r.ed.x.a.vi.er.15.2@gmail.com"">r.ed.x.a.vi.er.15.2@gmail.com</a>
<a href=""mailto:red.xa.v.i.e.r152@gmail.com"">red.xa.v.i.e.r152@gmail.com</a>
<a href=""mailto:r.e.dxavier152@gmail.com"">r.e.dxavier152@gmail.com</a>
<a href=""mailto:redx.av.i.e.r1.5.2@gmail.com"">redx.av.i.e.r1.5.2@gmail.com</a>
<a href=""mailto:re.dxavie.r1.5.2@gmail.com"">re.dxavie.r1.5.2@gmail.com</a>
<a href=""mailto:re.d.xa.vie.r1.5.2@gmail.com"">re.d.xa.vie.r1.5.2@gmail.com</a>
<a href=""mailto:r.ed.x.a.v.i.er15.2@gmail.com"">r.ed.x.a.v.i.er15.2@gmail.com</a>
<a href=""mailto:red.xav.i.er.1.5.2@gmail.com"">red.xav.i.er.1.5.2@gmail.com</a>
<a href=""mailto:re.dxav.ie.r.1.52@gmail.com"">re.dxav.ie.r.1.52@gmail.com</a>
<a href=""mailto:r.edx.av.i.er.152@gmail.com"">r.edx.av.i.er.152@gmail.com</a>
<a href=""mailto:red.xa.v.ie.r152@gmail.com"">red.xa.v.ie.r152@gmail.com</a>
<a href=""mailto:r.e.d.xavi.e.r.1.5.2@gmail.com"">r.e.d.xavi.e.r.1.5.2@gmail.com</a>
<a href=""mailto:r.e.dx.avier.1.5.2@gmail.com"">r.e.dx.avier.1.5.2@gmail.com</a>
<a href=""mailto:r.e.dxavi.er1.52@gmail.com"">r.e.dxavi.er1.52@gmail.com</a>
<a href=""mailto:r.e.dx.a.v.ier1.52@gmail.com"">r.e.dx.a.v.ier1.52@gmail.com</a>
<a href=""mailto:re.d.x.a.v.i.er1.52@gmail.com"">re.d.x.a.v.i.er1.52@gmail.com</a>
<a href=""mailto:r.e.dx.a.v.i.er.152@gmail.com"">r.e.dx.a.v.i.er.152@gmail.com</a>
<a href=""mailto:redx.av.i.e.r.152@gmail.com"">redx.av.i.e.r.152@gmail.com</a>
<a href=""mailto:r.e.dx.a.vie.r1.52@gmail.com"">r.e.dx.a.vie.r1.52@gmail.com</a>
<a href=""mailto:r.e.d.xa.vie.r1.5.2@gmail.com"">r.e.d.xa.vie.r1.5.2@gmail.com</a>
<a href=""mailto:re.dx.a.vier.152@gmail.com"">re.dx.a.vier.152@gmail.com</a>
<a href=""mailto:redxa.vi.er.15.2@gmail.com"">redxa.vi.er.15.2@gmail.com</a>
<a href=""mailto:redx.avie.r.1.5.2@gmail.com"">redx.avie.r.1.5.2@gmail.com</a>
<a href=""mailto:re.d.xa.v.i.e.r.15.2@gmail.com"">re.d.xa.v.i.e.r.15.2@gmail.com</a>
<a href=""mailto:r.ed.xav.ier1.5.2@gmail.com"">r.ed.xav.ier1.5.2@gmail.com</a>
<a href=""mailto:re.d.xav.i.er1.5.2@gmail.com"">re.d.xav.i.er1.5.2@gmail.com</a>
<a href=""mailto:redxav.i.e.r1.5.2@gmail.com"">redxav.i.e.r1.5.2@gmail.com</a>
<a href=""mailto:redxa.v.ier15.2@gmail.com"">redxa.v.ier15.2@gmail.com</a>
<a href=""mailto:redx.avie.r1.52@gmail.com"">redx.avie.r1.52@gmail.com</a>
<a href=""mailto:red.xa.v.ier15.2@gmail.com"">red.xa.v.ier15.2@gmail.com</a>
<a href=""mailto:re.dxa.v.i.e.r.152@gmail.com"">re.dxa.v.i.e.r.152@gmail.com</a>
<a href=""mailto:red.x.av.ier.15.2@gmail.com"">red.x.av.ier.15.2@gmail.com</a>
<a href=""mailto:r.e.d.xa.vier.1.52@gmail.com"">r.e.d.xa.vier.1.52@gmail.com</a>
<a href=""mailto:r.e.d.x.a.v.i.er.152@gmail.com"">r.e.d.x.a.v.i.er.152@gmail.com</a>
<a href=""mailto:re.d.x.a.v.i.e.r15.2@gmail.com"">re.d.x.a.v.i.e.r15.2@gmail.com</a>
<a href=""mailto:r.e.dxa.v.ier15.2@gmail.com"">r.e.dxa.v.ier15.2@gmail.com</a>
<a href=""mailto:r.ed.xavi.e.r152@gmail.com"">r.ed.xavi.e.r152@gmail.com</a>
<a href=""mailto:r.ed.xav.ier.1.52@gmail.com"">r.ed.xav.ier.1.52@gmail.com</a>
<a href=""mailto:r.e.dx.a.v.ier152@gmail.com"">r.e.dx.a.v.ier152@gmail.com</a>
<a href=""mailto:r.ed.xa.v.i.er.152@gmail.com"">r.ed.xa.v.i.er.152@gmail.com</a>
<a href=""mailto:r.e.dxavier1.52@gmail.com"">r.e.dxavier1.52@gmail.com</a>
<a href=""mailto:red.xa.vier1.52@gmail.com"">red.xa.vier1.52@gmail.com</a>
<a href=""mailto:r.edxa.v.i.er15.2@gmail.com"">r.edxa.v.i.er15.2@gmail.com</a>
<a href=""mailto:red.xa.vi.er15.2@gmail.com"">red.xa.vi.er15.2@gmail.com</a>
<a href=""mailto:r.e.d.xa.vi.er152@gmail.com"">r.e.d.xa.vi.er152@gmail.com</a>
<a href=""mailto:r.edxav.ier1.5.2@gmail.com"">r.edxav.ier1.5.2@gmail.com</a>
<a href=""mailto:re.dx.av.i.er.152@gmail.com"">re.dx.av.i.er.152@gmail.com</a>
<a href=""mailto:r.e.dxavier.152@gmail.com"">r.e.dxavier.152@gmail.com</a>
<a href=""mailto:r.e.dx.a.v.ie.r152@gmail.com"">r.e.dx.a.v.ie.r152@gmail.com</a>
<a href=""mailto:re.dxavier152@gmail.com"">re.dxavier152@gmail.com</a>
<a href=""mailto:red.xa.v.i.e.r.152@gmail.com"">red.xa.v.i.e.r.152@gmail.com</a>
<a href=""mailto:r.e.d.xa.vie.r.1.52@gmail.com"">r.e.d.xa.vie.r.1.52@gmail.com</a>
<a href=""mailto:r.ed.x.a.vier15.2@gmail.com"">r.ed.x.a.vier15.2@gmail.com</a>
<a href=""mailto:re.d.x.a.vi.e.r.1.52@gmail.com"">re.d.x.a.vi.e.r.1.52@gmail.com</a>
<a href=""mailto:r.e.dxav.i.e.r.15.2@gmail.com"">r.e.dxav.i.e.r.15.2@gmail.com</a>
<a href=""mailto:r.e.dx.avi.er.15.2@gmail.com"">r.e.dx.avi.er.15.2@gmail.com</a>
<a href=""mailto:re.dx.a.v.ier.152@gmail.com"">re.dx.a.v.ier.152@gmail.com</a>
<a href=""mailto:r.e.d.xa.v.i.er.15.2@gmail.com"">r.e.d.xa.v.i.er.15.2@gmail.com</a>
<a href=""mailto:re.d.x.avie.r15.2@gmail.com"">re.d.x.avie.r15.2@gmail.com</a>"
ZQxwQ2Qg,BTC Wallet Credentials have been reset,castlclass_20,GetText,Wednesday 1st of November 2023 12:07:58 AM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
liverpoollvr8h:4zuYTC on 212.224.93.130
You can connect via SSH .
Regards"
0thA3hGK,iSH 1.3.2(494) cargo\rust with Alpine 3.16 — Ok,sypwex,Bash,Wednesday 1st of November 2023 12:01:39 AM CDT,"###### Scenario
echo https://dl-cdn.alpinelinux.org/alpine/v3.16/main > /etc/apk/repositories
echo https://dl-cdn.alpinelinux.org/alpine/v3.16/community >> /etc/apk/repositories
apk update
apk upgrade
apk add cargo
 
cargo new ehlo
cd ehlo
cargo run
 
rustc --version # 1.60
cargo --version # 1.60
############################

Welcome to Alpine!

You can install packages with: apk add <package>

You may change this message by editing /etc/motd.

localhost:~# echo https://dl-cdn.alpinelinux.org/alpine/v3.16/main > /etc/apk/repositories
localhost:~# echo https://dl-cdn.alpinelinux.org/alpine/v3.16/community >> /etc/apk/repositories
localhost:~# apk update
fetch https://dl-cdn.alpinelinux.org/alpine/v3.16/main/x86/APKINDEX.tar.gz
fetch https://dl-cdn.alpinelinux.org/alpine/v3.16/community/x86/APKINDEX.tar.gz
v3.16.7-140-g0276255a68b [https://dl-cdn.alpinelinux.org/alpine/v3.16/main]
v3.16.7-139-g1ad42f58eb3 [https://dl-cdn.alpinelinux.org/alpine/v3.16/community]
OK: 16607 distinct packages available
localhost:~# apk upgrade
Upgrading critical system libraries and apk-tools:
(1/1) Upgrading apk-tools (2.12.7-r0 -> 2.12.9-r3)
Executing busybox-1.33.1-r6.trigger
Continuing the upgrade transaction with new apk-tools:
(1/13) Installing alpine-baselayout-data (3.2.0-r23)
(2/13) Upgrading musl (1.2.2-r3 -> 1.2.3-r3)
(3/13) Upgrading busybox (1.33.1-r6 -> 1.35.0-r17)
Executing busybox-1.35.0-r17.post-upgrade
(4/13) Upgrading alpine-baselayout (3.2.0-r16 -> 3.2.0-r23)
Executing alpine-baselayout-3.2.0-r23.pre-upgrade
Executing alpine-baselayout-3.2.0-r23.post-upgrade
(5/13) Upgrading alpine-keys (2.4-r0 -> 2.4-r1)
(6/13) Upgrading ca-certificates-bundle (20191127-r5 -> 20230506-r0)
(7/13) Upgrading libcrypto1.1 (1.1.1l-r0 -> 1.1.1w-r0)
(8/13) Upgrading libssl1.1 (1.1.1l-r0 -> 1.1.1w-r0)
(9/13) Upgrading ssl_client (1.33.1-r6 -> 1.35.0-r17)
(10/13) Upgrading zlib (1.2.11-r3 -> 1.2.12-r3)
(11/13) Upgrading scanelf (1.3.2-r0 -> 1.3.4-r0)
(12/13) Upgrading musl-utils (1.2.2-r3 -> 1.2.3-r3)
(13/13) Purging libretls (3.3.3p1-r2)
Executing busybox-1.35.0-r17.trigger
OK: 6 MiB in 14 packages
localhost:~# apk add cargo
(1/22) Installing rust-stdlib (1.60.0-r2)
(2/22) Installing libgcc (11.2.1_git20220219-r2)
(3/22) Installing libstdc++ (11.2.1_git20220219-r2)
(4/22) Installing binutils (2.38-r3)
(5/22) Installing libgomp (11.2.1_git20220219-r2)
(6/22) Installing libatomic (11.2.1_git20220219-r2)
(7/22) Installing gmp (6.2.1-r2)
(8/22) Installing isl22 (0.22-r0)
(9/22) Installing mpfr4 (4.1.0-r0)
(10/22) Installing mpc1 (1.2.1-r0)
(11/22) Installing gcc (11.2.1_git20220219-r2)
(12/22) Installing musl-dev (1.2.3-r3)
(13/22) Installing libffi (3.4.2-r1)
(14/22) Installing xz-libs (5.2.5-r1)
(15/22) Installing libxml2 (2.9.14-r2)
(16/22) Installing llvm13-libs (13.0.1-r2)
(17/22) Installing rust (1.60.0-r2)
(18/22) Installing ca-certificates (20230506-r0)
(19/22) Installing brotli-libs (1.0.9-r6)
(20/22) Installing nghttp2-libs (1.47.0-r1)
(21/22) Installing libcurl (8.4.0-r0)
(22/22) Installing cargo (1.60.0-r2)
Executing busybox-1.35.0-r17.trigger
Executing ca-certificates-20230506-r0.trigger
OK: 852 MiB in 36 packages
localhost:~#  
localhost:~# cargo new ehlo
     Created binary (application) `ehlo` package
localhost:~# cd ehlo
localhost:~/ehlo# cargo run
   Compiling ehlo v0.1.0 (/root/ehlo)
    Finished dev [unoptimized + debuginfo] target(s) in 6.94s
     Running `target/debug/ehlo`
Hello, world!

localhost:~/ehlo# rustc --version
rustc 1.60.0
localhost:~/ehlo# cargo --version
cargo 1.60.0"
Dj70q7AV,Sample *.cpl file from Windows XP Control panel.,bejiitas_wrath,C++,Tuesday 31st of October 2023 11:35:19 PM CDT,"///////////////////////////////////////////////////////////////////////
//                     Microsoft Windows                             //
//              Copyright(c) Microsoft Corp., 1995                   //
///////////////////////////////////////////////////////////////////////
//
// LANG.CPP - ""Language"" property page for InetCpl
//

// HISTORY:
//
// 1/10/97  beomoh      created
//

#include ""inetcplp.h""

#include <tchar.h>
#include <mlang.h>
#include ""psapi.h""
#include ""tlhelp32.h""
#include ""process.h""
#include <mluisupp.h>
#include <shdocvw.h>

#define ARRAYSIZE(a)        (sizeof(a)/sizeof(a[0]))
#define FORMAT_STR          TEXT(""%s [%s]"")
#define MAX_LIST_STRING_LEN MAX_LOCALE_NAME + MAX_RFC1766_NAME + 3
#define MAX_ACCEPT_LANG_LEN 2048

#define CP_THAI     874
#define CP_ARABIC   1256
#define CP_HEBREW   1255

// used as the return value from setlang dialog
#define RETURN_SETLANG_ENDLANGDIALOG    2
#define RETURN_SETLANG_CLOSEDNORMAL     1
#define RETURN_SETLANG_CANCELED         0

typedef HRESULT (* PCOINIT) (LPVOID);
typedef VOID (* PCOUNINIT) (VOID);
typedef VOID (* PCOMEMFREE) (LPVOID);
typedef HRESULT (* PCOCREINST) (REFCLSID, LPUNKNOWN, DWORD,     REFIID, LPVOID * );

extern HMODULE hOLE32;
extern PCOINIT pCoInitialize;
extern PCOUNINIT pCoUninitialize;
extern PCOMEMFREE pCoTaskMemFree;
extern PCOCREINST pCoCreateInstance;

extern BOOL _StartOLE32();

class CUILangList;
INT_PTR KickSetLang(HWND hDlg, CUILangList * pLangList);

static const TCHAR s_szResourceLocale[] = TEXT(""ResourceLocale"");
// HKLM\Software\Microsoft\Internet Explorer\International used for url string
static const TCHAR s_szUrlSPK[] 
= TEXT(""http://www.microsoft.com/isapi/redir.dll?prd=ie&pver=6&ar=plugui&sba=install"");
static const TCHAR c_szInstall[] 
= TEXT(""Software\\Microsoft\\Active Setup\\Installed Components\\{89820200-ECBD-11CF-8B85-00AA005B4383}"");
static const TCHAR c_szLocale[] = TEXT(""Locale"");
static const TCHAR s_szLangPackPath[]   = TEXT(""Software\\Microsoft\\Internet Explorer"");
static const TCHAR s_szVersion[] = TEXT(""LPKInstalled"");

typedef struct 
{
    WORD wlangid;
    BOOL fValid;
    TCHAR szName[MAX_LOCALE_NAME];
} LANGLIST;

static LANGLIST s_arryLangList[] = 
{
    {0x0409, FALSE, {0}},
    {0x0407, FALSE, {0}},
    {0x0411, FALSE, {0}},
    {0x0412, FALSE, {0}},
    {0x0404, FALSE, {0}},
    {0x0804, FALSE, {0}},
    {0x040c, FALSE, {0}},
    {0x0c0a, FALSE, {0}},
    {0x0416, FALSE, {0}},
    {0x0410, FALSE, {0}},
    {0x0413, FALSE, {0}},
    {0x041d, FALSE, {0}},
    {0x0406, FALSE, {0}},
    {0x040b, FALSE, {0}},
    {0x040e, FALSE, {0}},
    {0x0414, FALSE, {0}},
    {0x0408, FALSE, {0}},
    {0x0415, FALSE, {0}},
    {0x0419, FALSE, {0}},
    {0x0405, FALSE, {0}},
    {0x0816, FALSE, {0}},
    {0x041f, FALSE, {0}},
    {0x041b, FALSE, {0}},
    {0x0424, FALSE, {0}},
    {0x0401, FALSE, {0}},
    {0x040d, FALSE, {0}},
    {0x042d, FALSE, {0}},
    {0x040f, FALSE, {0}},
};

//
//  ISO639 ID table
//
typedef struct tagISO639
{
    LPCTSTR ISO639;
    LANGID LangID;
}   ISO639, *LPISO639;

const ISO639 c_ISO639[] =
{
    { TEXT(""EN""), 0x0409 },
    { TEXT(""DE""), 0x0407 },
    { TEXT(""JA""), 0x0411 },
    { TEXT(""KO""), 0x0412 },
    { TEXT(""TW""), 0x0404 },
    { TEXT(""CN""), 0x0804 },
    { TEXT(""FR""), 0x040C },
    { TEXT(""ES""), 0x0C0A },
    { TEXT(""BR""), 0x0416 },
    { TEXT(""IT""), 0x0410 },
    { TEXT(""NL""), 0x0413 },
    { TEXT(""SV""), 0x041D },
    { TEXT(""DA""), 0x0406 },
    { TEXT(""FI""), 0x040B },
    { TEXT(""HU""), 0x040E },
    { TEXT(""NO""), 0x0414 },
    { TEXT(""EL""), 0x0408 },
    { TEXT(""PL""), 0x0415 },
    { TEXT(""RU""), 0x0419 },
    { TEXT(""CS""), 0x0405 },
    { TEXT(""PT""), 0x0816 },
    { TEXT(""TR""), 0x041F },
    { TEXT(""SK""), 0x041B },
    { TEXT(""SL""), 0x0424 },
    { TEXT(""AR""), 0x0401 },
    { TEXT(""HE""), 0x040D },
    { TEXT(""EU""), 0x042D },
    { TEXT(""IS""), 0x040F },
};

// GetInstallLanguage
//
// synopsis - borrowed this function from shlwapi. we can remove this
//            once we have it exported from shlwapi.dll
//
LANGID GetInstallLanguage(void)
{
    static LANGID LangID = 0;
    TCHAR szISO639[3];
    DWORD cb;

    if (0 == LangID)
    {
        cb = sizeof(szISO639);
        if (ERROR_SUCCESS == SHGetValue(HKEY_LOCAL_MACHINE, c_szInstall, c_szLocale, NULL, szISO639, &cb))
        {
            int i;

            for (i = 0; i < ARRAYSIZE(c_ISO639); i++)
            {
                if (!StrCmpNI(szISO639, c_ISO639[i].ISO639, ARRAYSIZE(szISO639)))
                {
                    LangID = c_ISO639[i].LangID;
                    break;
                }
            }
        }
    }
    return LangID;
}

// CUILangList
// 
// maintains the list of UI languages for user to choose
//
class CUILangList
{
public:
    CUILangList() {_iLangIdx = -1; lang = s_arryLangList; 
                   _nLangList = ARRAYSIZE(s_arryLangList);
                   _fOffice9Installed = -1;};
    
    void    ValidateLangList();
    BOOL    IsValidLang(int idx) { return (idx < _nLangList) ? lang[idx].fValid: FALSE; };
    int     GetCurrentLangIdx();
    void    SetCurrentLangIdx(int idx);
    LPCTSTR GetCurrentLangName();
    LPCTSTR GetLangNameOfIdx(int idx);
    WORD    GetLangIdOfIdx(int idx) { return (idx < _nLangList) ? lang[idx].wlangid:0; };
    UINT    GetIds(int idx); 
    int     GetListSize() {return _nLangList;};
    BOOL    IsOffice9Installed();
    static  HRESULT GetLangList(HWND hdlg, CUILangList ** ppLangList);
    static  HRESULT RemoveLangList(HWND hdlg);
private:
    int _iLangIdx;
    int _nLangList;
    int _fOffice9Installed;
    LANGLIST *lang;
};

// CShutDownProcInfo
// 
// manages information about processes we want
// to shutdown/restart.
//
typedef enum 
{
    PS_UNKNOWN=0, 
    PS_CANDIDATE, 
    PS_TO_BE_SHUTDOWN, 
    PS_IGNORE, 
    PS_SHUTDOWN_OK, 
    PS_WAITING, 
    PS_TO_BE_SHUTDOWN_WITH_NO_RELAUNCH, 
    PS_SHUTDOWN_OK_NO_RELAUNCH_NEEDED, 
} PROCSTATE; 

class CShutDownProcInfo : public CProcessInfo
{
public:
    CShutDownProcInfo(HWND hdlgParent);
    ~CShutDownProcInfo();
    HRESULT EnsureProcList();
    HRESULT IncreaseProcList();
    HRESULT NotifyShutDownToFolks(int *nProccess);
    HRESULT AddToProcList(HWND hwndShutDown);
    HRESULT WaitForOneProcess(int iProc);
    HRESULT WaitForFolksShutDown();
    HRESULT GetRestartAppPath(LPTSTR szPath, int cchPath, int iProc);
    HRESULT RestartFolks();
    static DWORD CALLBACK ShutDownThreadProc(void *pv);
protected:
    typedef struct
    {
        DWORD dwPID;
        TCHAR szExeName[32];
        PROCSTATE State; 
    } PROCLIST;
    PROCLIST *_pProcList;
    int _nAlloced;
    int _iProcList;
    HWND _hdlgParent;
    BOOL _fAllShutDown;
};
// this always fills '0' to empty digits
// caller has to make sure sz has cdigit+1 of buffer
void IntToHex(OUT LPTSTR sz, IN int cdigit, IN int value)
{
    int i, idigit;

    if (sz && value > 0 && cdigit > 0)
    {
        // nul terminate the buffer
        sz[cdigit] = TEXT('\0');
        
        for (i = cdigit-1; i >= 0; i--, value /= 16)
        {
            idigit = value%16;
            if (idigit < 10)
                sz[i] = (TCHAR)idigit + TEXT('0');
            else 
                sz[i] = (TCHAR)idigit - 10 + TEXT('A');
        }
    }
} 

// set valid flags for the lang list
// very expensive so expects to be called only once in a session
// from CUILangList::GetLangList
//
#define MAX_SATELLITEPACKS 30 // 30 must be a practical number for satellite packs
void CUILangList::ValidateLangList()
{
    HKEY hKey;
    HRESULT hr;
    TCHAR szValueName[32];
    WORD aryValidLang[MAX_SATELLITEPACKS +1+1] = {0}; // +1 for install lang, 
                                                      // +1 for terminator

    int  nMaxValidLang = ARRAYSIZE(aryValidLang)-1;   // -1 for terminator
    WORD *pwValid = aryValidLang;
    
    // make the install language always valid
    *pwValid = GetInstallLanguage();
    if (*pwValid != 0)
    {
       *(pwValid+1) = 0; // terminator
       pwValid++;
       nMaxValidLang--;
    }

    if (ERROR_SUCCESS == 
    RegOpenKeyEx(HKEY_LOCAL_MACHINE, REGSTR_PATH_INTERNATIONAL, NULL, KEY_READ, &hKey))
    {
        int i = 0;
        do {
            // see if the value has a match in the list
            DWORD dwType;
            DWORD cb = ARRAYSIZE(szValueName)-2;

            hr = SHEnumValue(hKey, i++, szValueName+2, &cb, &dwType, NULL, NULL);
            if (SUCCEEDED(hr) && dwType == REG_SZ)
            {
                UINT uiInstalled ;

                szValueName[0] = TEXT('0');
                szValueName[1] = TEXT('x');
                StrToIntEx(szValueName, STIF_SUPPORT_HEX, (LPINT)&uiInstalled);
                if (uiInstalled > 0)
                {
                    *pwValid     = (unsigned short) uiInstalled;
                    *(pwValid+1) = 0; // terminator
                    pwValid++;
                }
            }
        } while(hr == ERROR_SUCCESS && i < nMaxValidLang);
        RegCloseKey(hKey);
    }

    // this assumes we can use StrChrW to search a value in 
    // a word array, it also assumes we never have 0 as a langid
    //
    Assert(sizeof(WORD) == sizeof(WCHAR)); // unix?

    int nValidLang = (int)(pwValid-aryValidLang);
    for(int idx = 0; idx < GetListSize(); idx++ )
    {
        // abusing the string function but this is a fast way
        if (StrChrW((WCHAR *)aryValidLang, (WCHAR)lang[idx].wlangid))
        {
            lang[idx].fValid = TRUE;
            if(--nValidLang <= 0)
                break;
        }
    }
}

static const TCHAR s_szPropLangList[] = TEXT(""langlist"");
HRESULT CUILangList::GetLangList(HWND hdlg, CUILangList ** ppLangList)
{
    HRESULT hr=S_OK;
    
    CUILangList *pLangList = (CUILangList *)GetProp(hdlg, s_szPropLangList);
    if (!pLangList)
    {
        pLangList = new CUILangList();
        if (pLangList)
        {
            pLangList->ValidateLangList();
            SetProp(hdlg, s_szPropLangList, (HANDLE)pLangList);
        }
        else
            hr = E_FAIL;
    }
    
    ASSERT(ppLangList);
    if (ppLangList)
        *ppLangList = pLangList;
    
    return hr;
}

HRESULT CUILangList::RemoveLangList(HWND hdlg)
{
    HRESULT hr = S_OK;
    CUILangList *pLangList = (CUILangList *)GetProp(hdlg, s_szPropLangList);

    if (pLangList)
    {
        delete pLangList;
        RemoveProp(hdlg, s_szPropLangList);    
    }
    else
        hr = S_FALSE;

    return hr;
}

void CUILangList::SetCurrentLangIdx(int idx)
{
    TCHAR sz[4+1];
    if (idx != _iLangIdx)
    {
        // the resource id is always 4 digit
        IntToHex(sz, 4, lang[idx].wlangid);
        SHSetValue(HKEY_CURRENT_USER, REGSTR_PATH_INTERNATIONAL, 
                   s_szResourceLocale, REG_SZ, (void *)sz, sizeof(sz));
        _iLangIdx = idx;
    }
}
// returns idx to the lang array
int CUILangList::GetCurrentLangIdx()
{
    // show the current selection
    TCHAR sz[64];
    DWORD dwType;
    int   isel;
    
    // see if it's cached already
    if (_iLangIdx == -1)
    {
        // We basically wants what we've set in the registry,
        // but if Office9 is installed we'll show whatever
        // Office sets, and we can't change the Office setting anyway
        // MLGetUILanguage returns Office's setting if its there
        // Also I suppose we want to show NT5's UI language here
        //
        if (IsOffice9Installed() || IsOS(OS_WIN2000ORGREATER))
            isel = INETCPL_GetUILanguage();
        else
        {
            DWORD dwcbData = sizeof(sz);

            HRESULT hr =  SHGetValue(HKEY_CURRENT_USER, REGSTR_PATH_INTERNATIONAL, 
                                  s_szResourceLocale, &dwType, (void *)&sz[2], &dwcbData);
                   
            if (hr == ERROR_SUCCESS && dwType == REG_SZ)
            {
                sz[0] = TEXT('0');
                sz[1] = TEXT('x');
                StrToIntEx(sz, STIF_SUPPORT_HEX, (LPINT)&isel);
            }
            else
            {
                isel = GetInstallLanguage();
            }
        }
        
        for(int i = 0; i < GetListSize(); i++ )
        {
            if (isel == lang[i].wlangid)
            {
                _iLangIdx = i;
                break;
            }
        }
            
        // english for error case
        if (_iLangIdx < 0) 
            _iLangIdx = 0;
    }
    return _iLangIdx;
}

LPCTSTR CUILangList::GetLangNameOfIdx(int idx)
{
    LPCTSTR pszRet = NULL;
    IMultiLanguage2 *pML2;
    HRESULT hr;
    RFC1766INFO Rfc1766Info={0};

    if(!hOLE32)
    {
        if(!_StartOLE32())
        {
            ASSERT(FALSE);
            return NULL;
        }
    }
    hr = pCoInitialize(NULL);

    if (FAILED(hr))
        return NULL;

    hr = pCoCreateInstance(CLSID_CMultiLanguage, NULL, CLSCTX_INPROC_SERVER, IID_IMultiLanguage2, (LPVOID *) &pML2);

    if (SUCCEEDED(hr))
    {
        if (idx >= 0)
        {
            if (!lang[idx].szName[0])
            {
                pML2->GetRfc1766Info(lang[idx].wlangid, INETCPL_GetUILanguage(), &Rfc1766Info);
                StrCpyNW(lang[idx].szName, Rfc1766Info.wszLocaleName, ARRAYSIZE(lang[0].szName));            
            }
            pszRet = lang[idx].szName;        
        }
        pML2->Release();
    }

    pCoUninitialize();
    return pszRet;
}
 
LPCTSTR CUILangList::GetCurrentLangName()
{
    int idx = GetCurrentLangIdx();
    return GetLangNameOfIdx(idx);
}

BOOL CUILangList::IsOffice9Installed()
{
    DWORD dwVersion;
    DWORD cb = sizeof(dwVersion);
    if (_fOffice9Installed < 0)
    {
        _fOffice9Installed ++;
        if (ERROR_SUCCESS ==
            SHGetValue(HKEY_LOCAL_MACHINE, s_szLangPackPath, s_szVersion, NULL, &dwVersion, &cb)
          && dwVersion > 0) // magic number - christw tells me so
            _fOffice9Installed ++;
    }
    return (BOOL)_fOffice9Installed;
}

void InitCurrentUILang(HWND hDlg)
{
    BOOL fChanged = FALSE;
    CUILangList *pLangList;  
    LPCTSTR pszLangSel = NULL;
    HRESULT hr;
    
    hr = CUILangList::GetLangList(hDlg, &pLangList);
    
    if (SUCCEEDED(hr))
        pszLangSel = pLangList->GetCurrentLangName();
    
    if (pszLangSel)
    {
        TCHAR szBig[1024], szSmall[256];

        GetDlgItemText(hDlg, IDC_LANG_CURSEL, szBig, ARRAYSIZE(szBig));
        if (szBig[0])
            fChanged = (StrStr(szBig, pszLangSel) == NULL); 

        if (MLLoadString((fChanged)? IDS_LANG_FUTUREUSE: IDS_LANG_CURRENTUSE, szSmall, ARRAYSIZE(szSmall)) > 0)
        {
            wnsprintf(szBig, ARRAYSIZE(szBig), szSmall, pszLangSel);
            Static_SetText(GetDlgItem(hDlg, IDC_LANG_CURSEL), szBig);
        }
    }
}


//
// FillAcceptListBox()
//
// Fills the accept language listbox with names of selected language
//
void FillAcceptListBox(IN HWND hDlg)
{
    IMultiLanguage2 *pML2;
    HRESULT hr;
    HKEY hKey;
    DWORD cb;
    TCHAR sz[MAX_LIST_STRING_LEN], szBuf[MAX_ACCEPT_LANG_LEN], *p1, *p2, *p3;
    HWND hwndList = GetDlgItem(hDlg, IDC_LANG_ACCEPT_LIST);

    if(!hOLE32)
    {
        if(!_StartOLE32())
        {
            ASSERT(FALSE);
            return;
        }
    }
    hr = pCoInitialize(NULL);
    if (FAILED(hr))
        return;

    hr = pCoCreateInstance(CLSID_CMultiLanguage, NULL, CLSCTX_INPROC_SERVER, IID_IMultiLanguage2, (LPVOID *) &pML2);
    if (SUCCEEDED(hr))
    {
        if (ERROR_SUCCESS == RegCreateKeyEx(HKEY_CURRENT_USER, REGSTR_PATH_INTERNATIONAL, NULL, NULL, NULL, KEY_SET_VALUE|KEY_READ, NULL, &hKey, NULL))
        {
            LCID lcid;
            RFC1766INFO Rfc1766Info;
            TCHAR sz1[MAX_LIST_STRING_LEN], sz2[MAX_RFC1766_NAME];

            cb = sizeof(szBuf);
            if (ERROR_SUCCESS == RegQueryValueEx(hKey, REGSTR_VAL_ACCEPT_LANGUAGE, NULL, NULL, (LPBYTE)szBuf, &cb))
            {
                p1 = p2 = szBuf;
                while (NULL != *p1)
                {
                    WCHAR wsz[MAX_LIST_STRING_LEN];
                    BOOL bEnd = FALSE;

                    while (TEXT(',') != *p2 && NULL != *p2)
                        p2 = CharNext(p2);
                    if (NULL != *p2)
                        *p2 = NULL;
                    else
                        bEnd = TRUE;
                    p3 = p1;
                    while (TEXT(';') != *p3 && NULL != *p3)
                        p3 = CharNext(p3);
                    if (NULL != *p3)
                        *p3 = NULL;
#ifdef UNICODE
                    StrCpyN(wsz, p1, ARRAYSIZE(wsz));
#else
                    MultiByteToWideChar(CP_ACP, 0, p1, -1, wsz, MAX_RFC1766_NAME);
#endif
                    hr = pML2->GetLcidFromRfc1766(&lcid, wsz);
                    if (SUCCEEDED(hr))
                    {
                        hr = pML2->GetRfc1766Info(lcid, INETCPL_GetUILanguage(), &Rfc1766Info);
                        if (SUCCEEDED(hr))
                        {
#ifdef UNICODE
                            StrCpyN(sz1, Rfc1766Info.wszLocaleName, ARRAYSIZE(sz1));
#else
                            WideCharToMultiByte(CP_ACP, 0, Rfc1766Info.wszLocaleName, -1, sz1, MAX_LIST_STRING_LEN, NULL, NULL);
#endif
                            wnsprintf(sz, ARRAYSIZE(sz), FORMAT_STR, sz1, p1);
                        }
                    }
                    else
                    {
                        MLLoadString(IDS_USER_DEFINED, sz1, ARRAYSIZE(sz1));
                        wnsprintf(sz, ARRAYSIZE(sz), FORMAT_STR, sz1, p1);
                    }
                    ListBox_AddString(hwndList, sz);
                    if (TRUE == bEnd)
                        p1 = p2;
                    else
                        p1 = p2 = p2 + 1;
                }
            }
            else
            {
                lcid = GetUserDefaultLCID();

                hr = pML2->GetRfc1766Info(lcid, INETCPL_GetUILanguage(), &Rfc1766Info);
                if (SUCCEEDED(hr))
                {
#ifdef UNICODE
                    StrCpyN(sz1, Rfc1766Info.wszLocaleName,  ARRAYSIZE(sz1));
                    StrCpyN(sz2, Rfc1766Info.wszRfc1766,  ARRAYSIZE(sz2));
#else
                    WideCharToMultiByte(CP_ACP, 0, Rfc1766Info.wszLocaleName, -1, sz1, MAX_LIST_STRING_LEN, NULL, NULL);
                    WideCharToMultiByte(CP_ACP, 0, Rfc1766Info.wszRfc1766, -1, sz2, MAX_RFC1766_NAME, NULL, NULL);
#endif
                    wnsprintf(sz, ARRAYSIZE(sz), FORMAT_STR, sz1, sz2);
                    ListBox_AddString(hwndList, sz);
                }
            }
            RegCloseKey(hKey);
        }
        pML2->Release();
    }
    pCoUninitialize();
}

//
// LanguageDlgInit()
//
// Initializes the Language dialog.
//
BOOL LanguageDlgInit(IN HWND hDlg)
{
    if (!hDlg)
        return FALSE;   // nothing to initialize

    FillAcceptListBox(hDlg);

    EnableWindow(GetDlgItem(hDlg, IDC_LANG_REMOVE_BUTTON), FALSE);
    EnableWindow(GetDlgItem(hDlg, IDC_LANG_MOVE_UP_BUTTON), FALSE);
    EnableWindow(GetDlgItem(hDlg, IDC_LANG_MOVE_DOWN_BUTTON), FALSE);
    EnableWindow(GetDlgItem(hDlg, IDC_LANG_ADD_BUTTON), !g_restrict.fInternational);
    
    // On NT5, we use NT5's MUI feature instead of IE5 plugui
    if (IsOS(OS_WIN2000ORGREATER))
        ShowWindow(GetDlgItem(hDlg, IDC_LANG_UI_PREF), SW_HIDE);
    else
    {
        UINT uiACP = GetACP();

        // We don't support PlugUI on these platforms
        if (uiACP == CP_ARABIC || uiACP == CP_HEBREW || uiACP == CP_THAI)
            ShowWindow(GetDlgItem(hDlg, IDC_LANG_UI_PREF), SW_HIDE);
        else
            EnableWindow(GetDlgItem(hDlg, IDC_LANG_UI_PREF), !g_restrict.fInternational);
    }

    // show the current UI lang
    InitCurrentUILang(hDlg);
    
    // everything ok
    return TRUE;
}

//
// SaveLanguageData()
//
// Save the new language settings into regestry
//
void SaveLanguageData(IN HWND hDlg)
{
    HKEY hKey;
    DWORD dw;
    int i, iNumItems, iQ, n;
    TCHAR szBuf[MAX_ACCEPT_LANG_LEN];

    if (ERROR_SUCCESS == RegCreateKeyEx(HKEY_CURRENT_USER, REGSTR_PATH_INTERNATIONAL, NULL, NULL, NULL, KEY_WRITE, NULL, &hKey, &dw ))
    {
        HWND hwndList = GetDlgItem(hDlg, IDC_LANG_ACCEPT_LIST);

        iNumItems = ListBox_GetCount(hwndList);

        for (n = 1, iQ = 10; iQ < iNumItems; iQ *= 10, n++)
            ;

        szBuf[0] = NULL;
        for (i = 0; i < iNumItems; i++)
        {
            TCHAR sz[MAX_LIST_STRING_LEN], *p1, *p2;

            ListBox_GetText(hwndList, i, sz);
            p1 = sz;
            // We can assume safely there is '[' and ']' in this string.
            while (TEXT('[') != *p1)
                p1 = CharNext(p1);
            p1 = p2 = p1 + 1;
            while (TEXT(']') != *p2)
                p2 = CharNext(p2);
            *p2 = NULL;
            if (0 == i)
                StrCpyN(szBuf, p1, ARRAYSIZE(szBuf));
            else
            {
                TCHAR szF[MAX_ACCEPT_LANG_LEN], szQ[MAX_ACCEPT_LANG_LEN];

                int len = lstrlen(szBuf);
                StrCpyN(szBuf + len, TEXT("",""), ARRAYSIZE(szBuf) - len);
                len++;
                StrCpyN(szBuf + len, p1, ARRAYSIZE(szBuf) - len);
                wnsprintf(szF, ARRAYSIZE(szF), TEXT("";q=0.%%0%dd""), n);
                wnsprintf(szQ, ARRAYSIZE(szQ), szF, ((iNumItems - i) * iQ + (iNumItems / 2)) / iNumItems);
                len = lstrlen(szBuf);
                StrCpyN(szBuf + len , szQ, ARRAYSIZE(szBuf) - len);
            }
        }
        RegSetValueEx(hKey, REGSTR_VAL_ACCEPT_LANGUAGE, NULL, REG_SZ, (LPBYTE)szBuf, (lstrlen(szBuf)+1)*sizeof(TCHAR));
        RegCloseKey(hKey);
    }
}

// MoveUpDownListItem()
//
// Move selected list item up or down
//
void MoveUpDownListItem(HWND hDlg, HWND hwndList, BOOL bUp)
{
    int i, iNumItems;
    TCHAR sz[MAX_LIST_STRING_LEN];

    i = ListBox_GetCurSel(hwndList);
    iNumItems = ListBox_GetCount(hwndList);
    ListBox_GetText(hwndList, i, sz);
    ListBox_DeleteString(hwndList, i);

    i += (bUp)? -1: 1;
    if (i < 0)
        i = 0;
    else if (i >= iNumItems)
        i = iNumItems - 1;
    ListBox_InsertString(hwndList, i, sz);
    ListBox_SetSel(hwndList, TRUE, i);
    ListBox_SetCurSel(hwndList, i);

    EnableWindow(GetDlgItem(hDlg, IDC_LANG_MOVE_UP_BUTTON), i != 0);
    EnableWindow(GetDlgItem(hDlg, IDC_LANG_MOVE_DOWN_BUTTON), i < iNumItems - 1);

    if (NULL == GetFocus()) // This prevent keyboard access disable
        SetFocus(hwndList);
}


//
// FillLanguageListBox()
//
// Fills the language listbox with the names of available languages
//
BOOL FillLanguageListBox(IN HWND hDlg)
{
    IMultiLanguage2 *pML2;
    HRESULT hr;
    TCHAR sz[MAX_LIST_STRING_LEN], sz1[MAX_LOCALE_NAME], sz2[MAX_RFC1766_NAME];
    HWND hwndEdit = GetDlgItem(hDlg, IDC_LANG_USER_DEFINED_EDIT);
    HWND hwndList = GetDlgItem(hDlg, IDC_LANG_AVAILABLE_LIST);
    HWND hwndAccept = GetDlgItem(GetParent(hDlg), IDC_LANG_ACCEPT_LIST);
    
    SendMessage(hwndEdit, EM_SETLIMITTEXT, 16, 0L); // Set Limit text as 16 characters

    if(!hOLE32)
    {
        if(!_StartOLE32())
        {
            ASSERT(FALSE);
            return FALSE;
        }
    }
    hr = pCoInitialize(NULL);
    if (FAILED(hr))
        return FALSE;

    hr = pCoCreateInstance(CLSID_CMultiLanguage, NULL, CLSCTX_INPROC_SERVER, IID_IMultiLanguage2, (LPVOID *) &pML2);
    if (SUCCEEDED(hr))
    {
        IEnumRfc1766 *pEnumRfc1766;
        RFC1766INFO Rfc1766Info;

        if (SUCCEEDED(pML2->EnumRfc1766(INETCPL_GetUILanguage(), &pEnumRfc1766)))
        {
            while (S_OK == pEnumRfc1766->Next(1, &Rfc1766Info, NULL))
            {
#ifdef UNICODE
                StrCpyN(sz1, Rfc1766Info.wszLocaleName, ARRAYSIZE(sz1));
                StrCpyN(sz2, Rfc1766Info.wszRfc1766,  ARRAYSIZE(sz2));
#else
                WideCharToMultiByte(CP_ACP, 0, Rfc1766Info.wszLocaleName, -1, sz1, MAX_LOCALE_NAME, NULL, NULL);
                WideCharToMultiByte(CP_ACP, 0, Rfc1766Info.wszRfc1766, -1, sz2, MAX_RFC1766_NAME, NULL, NULL);
#endif
                wnsprintf(sz, ARRAYSIZE(sz), FORMAT_STR, sz1, sz2);
                if (LB_ERR == ListBox_FindStringExact(hwndAccept, -1, sz))
                    ListBox_AddString(hwndList, sz);
            }
            pEnumRfc1766->Release();
        }
        pML2->Release();
    }
    pCoUninitialize();
    
    // everything ok
    return TRUE;
}

//
// AddLanguage()
//
// Add selected language to accept language listbox.
//
void AddLanguage(IN HWND hDlg)
{
    int i, j, *pItems, iNumItems, iIndex;
    TCHAR sz[MAX_LIST_STRING_LEN];
    HWND hdlgParent = GetParent(hDlg);
    HWND hwndFrom = GetDlgItem(hDlg, IDC_LANG_AVAILABLE_LIST);
    HWND hwndTo = GetDlgItem(hdlgParent, IDC_LANG_ACCEPT_LIST);

    i = ListBox_GetSelCount(hwndFrom);
    if (0 < i && (pItems = (PINT)LocalAlloc(LPTR, sizeof(int)*i)))
    {
        ListBox_GetSelItems(hwndFrom, i, pItems);
        for (j = 0; j < i; j++)
        {
            ListBox_GetText(hwndFrom, pItems[j], sz);
            ListBox_AddString(hwndTo, sz);
        }
        LocalFree(pItems);
    }
    if (GetWindowTextLength(GetDlgItem(hDlg, IDC_LANG_USER_DEFINED_EDIT)))
    {
        TCHAR *p, sz1[MAX_LIST_STRING_LEN], sz2[MAX_LIST_STRING_LEN];
        BOOL fValid = TRUE;

        GetWindowText(GetDlgItem(hDlg, IDC_LANG_USER_DEFINED_EDIT), sz2, ARRAYSIZE(sz2));
        p = sz2;
        while (NULL != *p && TRUE == fValid)
        {
            switch (*p)
            {
                // Invalid characters for user-defined string
                case TEXT(','):
                case TEXT(';'):
                case TEXT('['):
                case TEXT(']'):
                case TEXT('='):
                    fValid = FALSE;
                    break;

                default:
                    p = CharNext(p);
            }
        }
        if (FALSE == fValid)
        {
            TCHAR szTitle[256], szErr[1024];

            MLLoadShellLangString(IDS_USER_DEFINED_ERR, szErr, ARRAYSIZE(szErr));
            GetWindowText(hDlg, szTitle, ARRAYSIZE(szTitle));
            MessageBox(hDlg, szErr, szTitle, MB_OK | MB_ICONHAND);
        }
        else
        {
            MLLoadString(IDS_USER_DEFINED, sz1, ARRAYSIZE(sz1));
            wnsprintf(sz, ARRAYSIZE(sz), FORMAT_STR, sz1, sz2);
            ListBox_AddString(hwndTo, sz);
        }
    }
    iIndex = ListBox_GetCurSel(hwndTo);
    if (LB_ERR != iIndex)
    {
        iNumItems = ListBox_GetCount(hwndTo);
        EnableWindow(GetDlgItem(hdlgParent, IDC_LANG_REMOVE_BUTTON), iNumItems > 0);
        EnableWindow(GetDlgItem(hdlgParent, IDC_LANG_MOVE_UP_BUTTON), iIndex > 0);
        EnableWindow(GetDlgItem(hdlgParent, IDC_LANG_MOVE_DOWN_BUTTON), iIndex < iNumItems - 1);
    }
}

int ComboBoxEx_AddString(IN HWND hwndCtl, IN LPCTSTR sz)
{
    COMBOBOXEXITEM cbexItem = {0};
    
    int csz = _tcslen(sz);

    cbexItem.mask = CBEIF_TEXT;
    cbexItem.pszText = (LPTSTR)sz;
    cbexItem.cchTextMax = csz;
    
    // sort the string based on the current locale
    // we don't bother to use binary search because
    // the list is up to 25 item
    TCHAR szItem[MAX_LOCALE_NAME];
    int i, itemCount = ComboBox_GetCount(hwndCtl);
    for (i = 0; i < itemCount; i++)
    {
        ComboBox_GetLBText(hwndCtl, i, szItem);
        if (CompareString(INETCPL_GetUILanguage(), 
                          0,
                          sz,
                          csz,
                          szItem,
                          ARRAYSIZE(szItem)) == CSTR_LESS_THAN)
        {
            break;
        }
    }
    cbexItem.iItem = i;
    
    SendMessage(hwndCtl, CBEM_INSERTITEM, (WPARAM)0, (LPARAM)(LPVOID)&cbexItem);
    return i;
}

BOOL FillUILangListBox(IN HWND hDlg, CUILangList *pLangList)
{
    HWND hwndCombo = GetDlgItem(hDlg, IDC_COMBO_UILANG);
    BOOL bNT5 = IsOS(OS_WIN2000ORGREATER);
    DWORD dwAcp = GetACP();
    LPCTSTR pszLangName;
    
    if (!pLangList)
        return FALSE;

    // fill the list up.
    for (int i = 0; i < pLangList->GetListSize(); i++)
    {
        if (!pLangList->IsValidLang(i))
            continue;

        if (!bNT5)
        {
            LANGID lid = pLangList->GetLangIdOfIdx(i);

            if (dwAcp == CP_THAI || dwAcp == CP_ARABIC || dwAcp == CP_HEBREW)
            {
                // do not support cross codepage PlugUI
                // on Thai or Middle East platform(Arabic/Hebrew)
                static DWORD dwDefCP = 0;

                if (dwDefCP == 0)
                {
                    TCHAR szLcData[6+1]; // +2 for '0x' +1 for terminator

                    GetLocaleInfo( MAKELCID(lid, SUBLANG_NEUTRAL),
                        LOCALE_IDEFAULTANSICODEPAGE, szLcData, ARRAYSIZE(szLcData));
                                       
                    dwDefCP = StrToInt(szLcData);
                }
                if (dwDefCP != dwAcp && lid != 0x0409 && lid != GetInstallLanguage())
                    continue;
            }
            else
            {
                // skip Arabic and Hebrew on non-supporting platform
                if (lid == 0x401 || lid == 0x40d)
                    continue;
            }
        }

        pszLangName = pLangList->GetLangNameOfIdx(i);

        // ComboBox_FindStringExact has problems to handle DBCS Unicode characters 
        if (pszLangName)
        {
            int ipos = ComboBoxEx_AddString(hwndCombo, pszLangName);
            if (ipos >= 0)
            {
                ComboBox_SetItemData(hwndCombo, ipos, i);
            }
        }
    }

    // show the current selection
    int iLangIdx = pLangList->GetCurrentLangIdx();
    if (iLangIdx >= 0)
    {
        int iCBPos;
        int iCBSize = ComboBox_GetCount(hwndCombo);
        for (iCBPos = 0; iCBPos < iCBSize; iCBPos++)
        {
            if (iLangIdx == ComboBox_GetItemData(hwndCombo, iCBPos))
                break;
        }

        if (iCBPos < iCBSize)
            ComboBox_SetCurSel(hwndCombo, iCBPos);
    }
    return TRUE;
}

//
// Shutdown/reboot procedures implementation
//
// synopsis: CShutDownInfo class implements the method and the process list
//           which handle the sequence.
//           s_arryClsNames[] holds the list of target application
//           ChangeLanguage() (global) triggers the sequence being called from
//           LangChangeDlgProc().
//
static const LPTSTR s_arryClsNames[] =  
{
    TEXT(""IEFrame""),                       // browser instance
    TEXT(""ThorBrowserWndClass""),           // OE 
    TEXT(""HH Parent""),                     // Html Help
    TEXT(""MPWClass""),                      // 
    TEXT(""Outlook Express Browser Class""), // OE
    TEXT(""ATH_Note""),                      // OE?
    TEXT(""WABBrowseView""),                 // WAB
    TEXT(""Afx:400000:8:10008:0:900d6""),
    TEXT(""Media Player 2""),
    TEXT(""FrontPageExpressWindow""), 
    TEXT(""MSBLUIManager""),                 // Messenger
};

//
// CShutDownInfo
// class methods implementation
//
#define SHUTDOWN_TIMEOUT 2000 // 2 sec
#define RELAUNCH_TIMEOUT 1000 // 1 sec
CShutDownProcInfo::CShutDownProcInfo(HWND hDlg)
{
    _pProcList = NULL;
    _nAlloced = 0;
    _iProcList = 0;
    _hdlgParent = hDlg;
    _fAllShutDown = FALSE;
}

CShutDownProcInfo::~CShutDownProcInfo()
{
    if (_pProcList)
        LocalFree(_pProcList);
}


HRESULT CShutDownProcInfo::EnsureProcList()
{
    HRESULT hr = S_OK;
    if (!_pProcList)
    {
        // alloc mem for practical # of processes
        _nAlloced = ARRAYSIZE(s_arryClsNames);
        _pProcList = (PROCLIST *)LocalAlloc(LPTR, sizeof(PROCLIST)*_nAlloced);
    }
    if (!_pProcList) 
    {
        _nAlloced = 0;
        hr = E_FAIL;
    }

    return hr;
}
HRESULT CShutDownProcInfo::IncreaseProcList()
{
    HRESULT hr = S_OK;
    PROCLIST * pl = NULL;
    // realloc mem every so often
    if (_iProcList+1 > _nAlloced)
    {
        pl = (PROCLIST *)LocalReAlloc(_pProcList, sizeof(PROCLIST)*(ARRAYSIZE(s_arryClsNames)+_nAlloced), 
                                      LMEM_MOVEABLE | LMEM_ZEROINIT);
        if (pl)
        {
            _nAlloced += ARRAYSIZE(s_arryClsNames);
            _pProcList =  pl;
        }
        else
           hr = E_FAIL;
    }

    if (hr == S_OK)
        _iProcList++;

    return hr;
}
// CShutDownProcInfo::AddToProcList()
//
// synopsis: Get process info from given window handle
//           store it for shutdown procedure
//
//
//
HRESULT CShutDownProcInfo::AddToProcList(HWND hwnd)
{
    HRESULT hr = S_OK;

    hr = EnsureProcList();
    if (SUCCEEDED(hr) && hwnd)
    {
        DWORD dwPID;
        BOOL  fFoundDup = FALSE;

        GetWindowThreadProcessId(hwnd, &dwPID);
        
        // check to see if we already have the PID in the list
        for (int i=0; i < _iProcList; i++)
        {
            if (_pProcList[i].dwPID == dwPID)
            {
                fFoundDup = TRUE;
                break;
            }
        }

        // add proccess info only if we don't have it already
        if (!fFoundDup)
        {
            hr = IncreaseProcList();
            if (SUCCEEDED(hr))
            {
                int iCur = _iProcList-1;

                GetExeNameFromPID(dwPID, 
                    _pProcList[iCur].szExeName, 
                    ARRAYSIZE(_pProcList[iCur].szExeName));

                _pProcList[iCur].dwPID = dwPID;
                _pProcList[iCur].State = PS_UNKNOWN;
            }
        }
    }
    return hr;    
}

// CShutDownProcInfo::WaitForOneProcess
//
// synopsis: ensures the given process 
//           has terminated
//
//
HRESULT CShutDownProcInfo::WaitForOneProcess(int iProc)
{
    HRESULT hr = S_OK;
    if (iProc < _iProcList && _pProcList[iProc].State != PS_SHUTDOWN_OK)
    {
        DWORD dwProcessFlags = PROCESS_ALL_ACCESS | 
                               (_fNT ? SYNCHRONIZE : 0 );

        HANDLE hProc = OpenProcess(dwProcessFlags,
                                   FALSE,    
                                   _pProcList[iProc].dwPID);

        // pressume it has terminated, get it marked so
        _pProcList[iProc].State = PS_SHUTDOWN_OK;

        if (hProc) 
        {
            // if the proccess in query is still alive,
            // we'll wait with time out here
            //
            DWORD dwRet = WaitForSingleObject (hProc, SHUTDOWN_TIMEOUT);
            if (dwRet == WAIT_TIMEOUT)
            {
                _pProcList[iProc].State = PS_WAITING;
            }
            
            CloseHandle(hProc);
        }
    }
    return hr;
}

// CShutDownProcInfo::WaitForFolksShutDown
//
// synopsis: ensure the nominated processes terminate. If anyone 
//           doesn't want to terminate, wait for her retrying a couple of
//           times and note her name so we can show it to the user. 
//          
//
#define MAXSHUTDOWNTRY 10
HRESULT CShutDownProcInfo::WaitForFolksShutDown()
{
    HRESULT hr = S_OK;
    int    iTry = 0;
    do
    {
        // pressume all will be fine
        _fAllShutDown = TRUE;
        // waiting loop
        for (int i = 0; i < _iProcList; i++)
        {
            WaitForOneProcess(i);
            if (_pProcList[i].State != PS_SHUTDOWN_OK)
                _fAllShutDown = FALSE;
        }
    }
    while( !_fAllShutDown && iTry++ < MAXSHUTDOWNTRY  );
    // FEATURE: here we should put up a dialog
    //         to ask user if they want to wait
    //         for the apps 

    return hr;
}

// CShutDownProcInfo::NotifyShutDownToFolks
//
// synopsis: send POI_OFFICE_COMMAND to possible candidates on the desktop
//           if a candidate replies with valid value, save the proccess
//           information for the later restart procedure.
//
HRESULT CShutDownProcInfo::NotifyShutDownToFolks(int *pnProcess)
{
    HWND hwndShutDown, hwndAfter;
    PLUGUI_QUERY pq;
    HRESULT hr = S_OK;
    int     nProcToShutDown = 0;

    for (int i = 0; i < ARRAYSIZE(s_arryClsNames); i++)
    {
        hwndAfter = NULL; 
        while (hwndShutDown = FindWindowEx(NULL, hwndAfter, s_arryClsNames[i], NULL))
        {
            pq.uQueryVal = (UINT)SendMessage(hwndShutDown, PUI_OFFICE_COMMAND, PLUGUI_CMD_QUERY, 0);
            if (pq.uQueryVal)
            {
                if(pq.PlugUIInfo.uMajorVersion == OFFICE_VERSION_9)
                {
                    PostMessage(hwndShutDown, PUI_OFFICE_COMMAND, (WPARAM)PLUGUI_CMD_SHUTDOWN, 0);

                    // store the information about the process which this window belongs to
                    // we only need to remember non OLE processes here for re-starting.
                    if (!pq.PlugUIInfo.uOleServer)
                    {
                        AddToProcList(hwndShutDown);
                        nProcToShutDown ++;
                    }
                }
            }
            hwndAfter = hwndShutDown;
        }
    }
    if (!nProcToShutDown)
        hr = S_FALSE;

    if (pnProcess)
        *pnProcess = nProcToShutDown;

    return hr;
}

const TCHAR c_szRegAppPaths[] = TEXT(""Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\"");
HRESULT CShutDownProcInfo::GetRestartAppPath(LPTSTR szPath, int cchPath, int iProc)
{
    HRESULT hr = S_OK;
    TCHAR szAppPath[MAX_PATH];
    TCHAR szRegKey[MAX_PATH];

    ASSERT(szPath && cchPath > 0);

    if (iProc < _iProcList)
    {
        _tcscpy(szRegKey, c_szRegAppPaths);
        _tcscat(szRegKey, _pProcList[iProc].szExeName);
        
        DWORD cb = sizeof(szAppPath);
        if (ERROR_SUCCESS != SHGetValue(HKEY_LOCAL_MACHINE, szRegKey, NULL, NULL, szAppPath, &cb))
        {
            szPath[0] = TEXT('0');
            hr = E_FAIL;
        }
        else
            _tcsncpy(szPath, szAppPath, cchPath);
    }
    return hr;
}

HRESULT CShutDownProcInfo::RestartFolks()
{
    PROCESS_INFORMATION pi;
    for (int i = 0; i < _iProcList; i++)
    {
        STARTUPINFO si = {0};
        si.cb = sizeof(si);
        if (_pProcList[i].State == PS_SHUTDOWN_OK)
        {
            TCHAR szAppPath[MAX_PATH];    
            HRESULT hr = GetRestartAppPath(szAppPath, ARRAYSIZE(szAppPath), i);
            if (hr == S_OK)
            {
                BOOL fLaunchedOK = 
                CreateProcess (szAppPath,               // name of app to launch
                                NULL,                   // lpCmdLine
                                NULL,                   // lpProcessAttributes
                                NULL,                   // lpThreadAttributes
                                TRUE,                   // bInheritHandles
                                NORMAL_PRIORITY_CLASS,  // dwCreationFlags
                                NULL,                   // lpEnvironment
                                NULL,                   // lpCurrentDirectory
                                &si,                    // lpStartupInfo
                                &pi);                   // lpProcessInformation

                if (fLaunchedOK)
                { 
                    DWORD dwRet = WaitForInputIdle (pi.hProcess,
                                                    RELAUNCH_TIMEOUT);
                    CloseHandle(pi.hProcess);
                    CloseHandle(pi.hThread);
                }
            }
        }
    }
    return S_OK;
}



// 
//   CShutDownProcInfo::ShutDownThreadProc
//
//   synopsis: launched from changelang dialog so the dialog
//             wouldn't get blocked when we're waiting for our apps
//             to shutdown/restart. this is a static proc
//             so we should be able to delete the class instance
//             in this proc.
//
DWORD CALLBACK CShutDownProcInfo::ShutDownThreadProc(void *pv)
{
    CShutDownProcInfo *pspi = (CShutDownProcInfo *)pv;
    
    if (pspi)
    {
        HRESULT hr;
        int     nToShutDown;
        // send PUI_OFFICE_COMMAND to corresponding folks...
        hr = pspi->NotifyShutDownToFolks(&nToShutDown);

        // and wait until all processes shutdown
        if (SUCCEEDED(hr) && nToShutDown > 0)
        {
            hr = pspi->WaitForFolksShutDown();

            // then restart here
            if (SUCCEEDED(hr))
               pspi->RestartFolks();
        }
    
        // now the parent dialog should go away
        int iret = (nToShutDown > 0) ? 
                   RETURN_SETLANG_ENDLANGDIALOG: RETURN_SETLANG_CLOSEDNORMAL;
        
        EndDialog(pspi->_hdlgParent, iret);
    
        // delete this class instance
        delete pspi;
    }
    return 0;
}

void OpenSatelliteDownloadUrl(HWND hDlg)
{
    // get the default Url from registry
    TCHAR szSatelliteUrl[INTERNET_MAX_URL_LENGTH];

    // reg api needs size in byte
    DWORD dwType, dwcbData = sizeof(szSatelliteUrl);
    
    DWORD dwRet =  SHGetValue(HKEY_LOCAL_MACHINE, REGSTR_PATH_INTERNATIONAL, 
                             NULL, &dwType, (void *)szSatelliteUrl, &dwcbData);
    if (dwRet != ERROR_SUCCESS || !szSatelliteUrl[0])
    {
       // use the hard coded Url instead
       _tcscpy(szSatelliteUrl, s_szUrlSPK);
    }

    if(!hOLE32)
    {
        if(!_StartOLE32())
        {
            ASSERT(FALSE);
            return;
        }
    }

    HRESULT hr = pCoInitialize(NULL);
    if (SUCCEEDED(hr))
    {
        NavToUrlUsingIE(szSatelliteUrl, TRUE);
        pCoUninitialize();
    }
}

INT_PTR CALLBACK LangMsgDlgProc(HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    switch (uMsg)
    {
        case WM_COMMAND:
        {
            switch (GET_WM_COMMAND_ID(wParam, lParam))
            {
                case IDYES:
                case IDNO:
                case IDOK:
                case IDCANCEL:
                    EndDialog(hDlg, GET_WM_COMMAND_ID(wParam, lParam));
                    break;
            }
            return TRUE;
        }

        case WM_HELP:           // F1
            ResWinHelp( (HWND)((LPHELPINFO)lParam)->hItemHandle, IDS_HELPFILE,
                HELP_WM_HELP, (DWORD_PTR)(LPSTR)mapIDCsToIDHs);
            break;

        case WM_CONTEXTMENU:    // right mouse click
            ResWinHelp( (HWND) wParam, IDS_HELPFILE,
                HELP_CONTEXTMENU, (DWORD_PTR)(LPSTR)mapIDCsToIDHs);        
            break;
    }
    return FALSE;
}

BOOL ChangeLanguage(IN HWND hDlg, CUILangList *pLangList)
{
    HWND hwndCombo = GetDlgItem(hDlg, IDC_COMBO_UILANG);
    int iSel = ComboBox_GetCurSel(hwndCombo);
    INT_PTR idxSel = 0;
    int idxCur;
    
    if (iSel != CB_ERR)
        idxSel = ComboBox_GetItemData(hwndCombo, iSel);

    if ( idxSel != CB_ERR 
        && idxSel < pLangList->GetListSize())
    {
        idxCur = pLangList->GetCurrentLangIdx();

        if (idxCur != idxSel)
        {
            INT_PTR iRet = DialogBox(MLGetHinst(), MAKEINTRESOURCE(IDD_LANG_WARNING), hDlg, LangMsgDlgProc);

            if (IDCANCEL != iRet)
            {
                pLangList->SetCurrentLangIdx((int)idxSel);

                if (IDYES == iRet)
                {
                    CShutDownProcInfo  *pspi = new CShutDownProcInfo(hDlg);
                    if (!SHCreateThread(pspi->ShutDownThreadProc, (void *)pspi, 0, NULL))
                        delete pspi;

                    // returning TRUE to indicate that we do shutdown/restart
                    return TRUE;
                }
                else
                {
                    DialogBox(MLGetHinst(), MAKEINTRESOURCE(IDD_LANG_INFO), hDlg, LangMsgDlgProc);
                }
            }
        }
    }
    // returning FALSE to indicate that we haven't changed the language
    return FALSE;
}

//
// LangChangeDlgProc()
//
// Message handler for the ""Change Language"" subdialog.
//
INT_PTR CALLBACK LangChangeDlgProc(HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    CUILangList *pLangList;
    switch (uMsg)
    {
        case WM_INITDIALOG:
            CUILangList::GetLangList(GetParent(hDlg), &pLangList);
            return FillUILangListBox(hDlg, pLangList);
    
        case WM_DESTROY:
            break;

        case WM_COMMAND:
            switch(GET_WM_COMMAND_ID(wParam, lParam))
            {
                case IDC_LANG_ADDSPK:
                    // open url from resource
                    OpenSatelliteDownloadUrl(hDlg);
                    EndDialog(hDlg, RETURN_SETLANG_ENDLANGDIALOG);
                    break;
                case IDOK:
                    if(!SUCCEEDED(CUILangList::GetLangList(GetParent(hDlg), &pLangList))
                      || !ChangeLanguage(hDlg, pLangList))
                      EndDialog(hDlg, 0);

                    // EndDialog() is called in separate thread 
                    // when shutdown/restart is done
                    // 
                    break;

                case IDCANCEL:
                    EndDialog(hDlg, 0);
                    break;
            }
            break;

        case WM_HELP:           // F1
            ResWinHelp( (HWND)((LPHELPINFO)lParam)->hItemHandle, IDS_HELPFILE,
                HELP_WM_HELP, (DWORD_PTR)(LPSTR)mapIDCsToIDHs);
            break;

        case WM_CONTEXTMENU:    // right mouse click
            ResWinHelp( (HWND) wParam, IDS_HELPFILE,
                HELP_CONTEXTMENU, (DWORD_PTR)(LPSTR)mapIDCsToIDHs);        
            break;

        default:
            return FALSE;
    }
    return TRUE;
}

//
// LangAddDlgProc()
//
// Message handler for the ""Add Language"" subdialog.
//
INT_PTR CALLBACK LangAddDlgProc(HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    switch (uMsg)
    {
        case WM_INITDIALOG:
            return FillLanguageListBox(hDlg);
    
        case WM_DESTROY:
            break;

        case WM_COMMAND:
            switch(GET_WM_COMMAND_ID(wParam, lParam))
            {
                case IDOK:
                    AddLanguage(hDlg);
                    EndDialog(hDlg, 0);
                    break;

                case IDCANCEL:
                    EndDialog(hDlg, 0);
                    break;
            }
            break;

        case WM_HELP:           // F1
            ResWinHelp( (HWND)((LPHELPINFO)lParam)->hItemHandle, IDS_HELPFILE,
                HELP_WM_HELP, (DWORD_PTR)(LPSTR)mapIDCsToIDHs);
            break;

        case WM_CONTEXTMENU:    // right mouse click
            ResWinHelp( (HWND) wParam, IDS_HELPFILE,
                HELP_CONTEXTMENU, (DWORD_PTR)(LPSTR)mapIDCsToIDHs);        
            break;

        default:
            return FALSE;
    }
    return TRUE;
}

// put any cleanup procedures for language dialog here
void LangDlgCleanup(HWND hDlg)
{
    // also delete and remove the instance of
    // UI language list from window prop
    CUILangList::RemoveLangList(hDlg);
}
//
// LanguageDlgProc()
//
// Message handler for the ""Language Preference"" subdialog.
//
INT_PTR CALLBACK LanguageDlgProc(HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    CUILangList *pLangList;
    switch (uMsg)
    {
        case WM_INITDIALOG:
            return LanguageDlgInit(hDlg);
    
        case WM_DESTROY:
            LangDlgCleanup(hDlg);
            break;

        case WM_COMMAND:
            switch(GET_WM_COMMAND_ID(wParam, lParam))
            {
                HWND hwndList;
                int iIndex, iNumItems;
                INT_PTR iret;

                case IDOK:
                    SaveLanguageData(hDlg);
                    EndDialog(hDlg, 0);
                    break;

                case IDCANCEL:
                    EndDialog(hDlg, 0);
                    break;

                case IDC_LANG_ADD_BUTTON:
                    DialogBox(MLGetHinst(), MAKEINTRESOURCE(IDD_LANG_ADD), hDlg, LangAddDlgProc);
                    break;

                case IDC_LANG_UI_PREF:
                    CUILangList::GetLangList(hDlg, &pLangList);
                    iret = KickSetLang(hDlg, pLangList);
                    if (iret == RETURN_SETLANG_ENDLANGDIALOG)
                    {
                        // we're outa job
                        EndDialog(hDlg, 0);
                    }
                    else
                    {
                        InitCurrentUILang(hDlg);
                    }
                    break;

                case IDC_LANG_REMOVE_BUTTON:
                    hwndList = GetDlgItem(hDlg, IDC_LANG_ACCEPT_LIST);
                    iIndex = ListBox_GetCurSel(hwndList);
                    ListBox_DeleteString(hwndList, iIndex);
                    iNumItems = ListBox_GetCount(hwndList);
                    if (iNumItems == iIndex)
                        iIndex--;
                    ListBox_SetCurSel(hwndList, iIndex);
                    EnableWindow(GetDlgItem(hDlg, IDC_LANG_REMOVE_BUTTON), (iNumItems > 0) && !g_restrict.fInternational);
                    EnableWindow(GetDlgItem(hDlg, IDC_LANG_MOVE_UP_BUTTON), (iIndex > 0) && !g_restrict.fInternational);
                    EnableWindow(GetDlgItem(hDlg, IDC_LANG_MOVE_DOWN_BUTTON), (iIndex < iNumItems - 1) && !g_restrict.fInternational);

                    if (NULL == GetFocus()) // This prevent keyboard access disable
                        SetFocus(hwndList);
                    break;

                case IDC_LANG_ACCEPT_LIST:
                    hwndList = GetDlgItem(hDlg, IDC_LANG_ACCEPT_LIST);
                    iIndex = ListBox_GetCurSel(hwndList);
                    if (0 <= iIndex)
                    {
                        iNumItems = ListBox_GetCount(hwndList);
                        EnableWindow(GetDlgItem(hDlg, IDC_LANG_REMOVE_BUTTON), (iNumItems > 0) && !g_restrict.fInternational);
                        EnableWindow(GetDlgItem(hDlg, IDC_LANG_MOVE_UP_BUTTON), (iIndex > 0) && !g_restrict.fInternational);
                        EnableWindow(GetDlgItem(hDlg, IDC_LANG_MOVE_DOWN_BUTTON), (iIndex < iNumItems - 1) && !g_restrict.fInternational);
                    }
                    break;

                case IDC_LANG_MOVE_UP_BUTTON:
                    MoveUpDownListItem(hDlg, GetDlgItem(hDlg, IDC_LANG_ACCEPT_LIST), TRUE);
                    break;

                case IDC_LANG_MOVE_DOWN_BUTTON:
                    MoveUpDownListItem(hDlg, GetDlgItem(hDlg, IDC_LANG_ACCEPT_LIST), FALSE);
                    break;
            }
            break;

        case WM_HELP:           // F1
            ResWinHelp( (HWND)((LPHELPINFO)lParam)->hItemHandle, IDS_HELPFILE,
                HELP_WM_HELP, (DWORD_PTR)(LPSTR)mapIDCsToIDHs);
            break;

        case WM_CONTEXTMENU:    // right mouse click
            ResWinHelp( (HWND) wParam, IDS_HELPFILE,
                HELP_CONTEXTMENU, (DWORD_PTR)(LPSTR)mapIDCsToIDHs);        
            break;

        default:
            return FALSE;
    }
    return TRUE;
}


//
// KickLanguageDialog
//
// synopsis : used for launching Language Preference sub dialog.
//            we need to launch the dialogbox as a separate process if inetcpl is 
//            invoked from Tools->Internet options. 
//            The reason: we shutdown every browser instances on desktop
//                        user chooses different UI language than the current,
//                        including the browser that launched inetcpl.
//
static const TCHAR  s_szRunDll32[] = TEXT(""RunDll32.exe"");
static const TCHAR  s_szKickLangDialog[] = TEXT("" inetcpl.cpl,OpenLanguageDialog"");
void KickLanguageDialog(HWND hDlg)
{
    // 1: here we want to check to see if inetcpl was launched 
    //         as a rundll32 process already, which would happen if user 
    //         clicks on it at control panel folder
    //
    //
    BOOL fLaunchedOnBrowser = FALSE;
    
    // this tells me whether we got invoked from Tools->Internet Options...
    if (g_szCurrentURL[0])
    {
        fLaunchedOnBrowser = TRUE;
    }
    
    if (fLaunchedOnBrowser)
    {
        TCHAR szCommandLine[MAX_PATH];
        TCHAR szTitle[MAX_PATH];

        HWND hwndParent = GetParent(hDlg);
        
        StrCpy(szCommandLine, s_szRunDll32);
        StrCat(szCommandLine, s_szKickLangDialog);
        
        if (GetWindowText(hwndParent, szTitle, ARRAYSIZE(szTitle)) > 0)
        {
            StrCat(szCommandLine, TEXT("" ""));
            StrCat(szCommandLine, szTitle);
        }
        
#ifdef USE_CREATE_PROCESS
        PROCESS_INFORMATION pi;
        STARTUPINFO si = {0};

        si.cb = sizeof(si);
        BOOL fLaunchedOK = 
        CreateProcess (szCommandLine,          // name of app to launch
                       NULL,                   // lpCmdLine
                       NULL,                   // lpProcessAttributes
                       NULL,                   // lpThreadAttributes
                       TRUE,                   // bInheritHandles
                       NORMAL_PRIORITY_CLASS,  // dwCreationFlags
                       NULL,                   // lpEnvironment
                       NULL,                   // lpCurrentDirectory
                       &si,                    // lpStartupInfo
                       &pi);                   // lpProcessInformation
#else
        char szAnsiPath[MAX_PATH];
        SHUnicodeToAnsi(szCommandLine, szAnsiPath, ARRAYSIZE(szAnsiPath));
        WinExec(szAnsiPath, SW_SHOWNORMAL);
#endif
    }
    else
    {
        DialogBoxParam(MLGetHinst(), MAKEINTRESOURCE(IDD_LANG), hDlg, LanguageDlgProc, NULL);
    }
}

//
// KickSetLang
//
// synopsis : tries to find setlang.exe of Office9 first, if found it'll be kicked
//            if not, it uses our own setlang dialog.
//
//
static const TCHAR s_szOfficeInstallRoot[] = TEXT(""Software\\Microsoft\\Office\\9.0\\Common\\InstallRoot"");
static const TCHAR s_szOffice10InstallRoot[] = TEXT(""Software\\Microsoft\\Shared"");
static const TCHAR s_szPath[] = TEXT(""Path"");
static const TCHAR s_szOffice10Path[] = TEXT(""OfficeSetLangInstallLocation"");
static const TCHAR s_szSetLangExe[] = TEXT(""setlang.exe"");

INT_PTR KickSetLang(HWND hDlg, CUILangList *pLangList)
{
    BOOL fOfficeSetLangInstalled = FALSE;
    INT_PTR iret;
    
    TCHAR szSetLangPath[MAX_PATH];    
    
    //  deleting the key this way makes the key invalid for this process
    //  this way the inetcpl doesnt get bogus cached values
    SHDeleteKey(HKEY_CURRENT_USER, TEXT(""Software\\Microsoft\\Windows\\ShellNoRoam\\MUICache""));

    // try to get Office's setlang path
    if(pLangList && pLangList->IsOffice9Installed()) 
    {
        DWORD cb = sizeof(szSetLangPath);
        DWORD dwRet = SHGetValue(HKEY_LOCAL_MACHINE, s_szOffice10InstallRoot, s_szOffice10Path, NULL, szSetLangPath, &cb);

        // fall back to Office9 langpack setting if Office10 langpack setting isn't there
        if (ERROR_SUCCESS != dwRet)
        {
            cb = sizeof(szSetLangPath);            
            dwRet = SHGetValue(HKEY_LOCAL_MACHINE, s_szOfficeInstallRoot, s_szPath, NULL, szSetLangPath, &cb);
        }

        if (ERROR_SUCCESS == dwRet)
        {
            // If last character is a backslash
            if (szSetLangPath[lstrlen(szSetLangPath)-1] == TEXT('\\'))
            {
                // Then concatenate the exe name
                //
                StrCat(szSetLangPath, s_szSetLangExe);
            }
            if (PathFileExists(szSetLangPath) == TRUE)
                fOfficeSetLangInstalled = TRUE;
        }
    }
    
    if (fOfficeSetLangInstalled)
    {
        PROCESS_INFORMATION pi;
        STARTUPINFO si = {0};

        si.cb = sizeof(si);
        BOOL fLaunchedOK = CreateProcess(
                              szSetLangPath,     // name of app to launch
                                       NULL,     // lpCmdLine
                                       NULL,     // lpProcessAttributes
                                       NULL,     // lpThreadAttributes
                                       TRUE,     // bInheritHandles
                      NORMAL_PRIORITY_CLASS,     // dwCreationFlags
                                       NULL,     // lpEnvironment
                                       NULL,     // lpCurrentDirectory
                                       &si,      // lpStartupInfo
                                       &pi);     // lpProcessInformation
        // just wait a while
        if (fLaunchedOK)
        { 
            WaitForInputIdle (pi.hProcess, RELAUNCH_TIMEOUT);
            CloseHandle(pi.hProcess);
            CloseHandle(pi.hThread);
        }
        iret = RETURN_SETLANG_ENDLANGDIALOG;
    }
    else
    {
        iret = DialogBoxParam(MLGetHinst(), MAKEINTRESOURCE(IDD_LANG_CHANGE), hDlg, LangChangeDlgProc, NULL);
    }

    return iret;
}

//
// entry point for rundll32
// NOTE: the following function was written intentionally as non-Unicode
//       mainly because we don't have Wide wrapper mechanism for rundll32
//       function on win95
//
extern void GetRestrictFlags(RESTRICT_FLAGS *pRestrict);
void CALLBACK OpenLanguageDialog(HWND hwnd, HINSTANCE hinst, LPSTR lpszCmdLine, int nCmdShow)
{
    // hinst is ignored because we set it at our LibMain()
    INITCOMMONCONTROLSEX icex;

    GetRestrictFlags(&g_restrict);
    icex.dwSize = sizeof(INITCOMMONCONTROLSEX);
    icex.dwICC  = ICC_USEREX_CLASSES|ICC_NATIVEFNTCTL_CLASS;
    InitCommonControlsEx(&icex);
    
    if (lpszCmdLine && *lpszCmdLine)
    {
        HWND hwndParent = FindWindowA(NULL, lpszCmdLine);
        if (hwndParent)
            hwnd = hwndParent;
    }
    DialogBoxParam(MLGetHinst(), MAKEINTRESOURCE(IDD_LANG), hwnd, LanguageDlgProc, NULL);
}

// MLGetUILanguage in shlwapi returns current MUI language regardless version.
// MUI architecture doesn't display string correctly when main dll and satellite
// pack versions are mismatched.
// A good example is IE version upgrade without upgrading satellite.
// So here is more clever way to get the MUI language.
//
// 1. Get MLGetUILangauge from shlwapi
// 2. Compare it with current installed language.
// 3. if those are different, try to get resource dll.
// 4. if the resource dll is not in correct path just return current installed
//    language.
// 5. Or return the langid of MLGetUILanguage.
LANGID INETCPL_GetUILanguage()
{
    HINSTANCE hMLInst;
    TCHAR szPath[MAX_PATH], szMUI[16];
    LANGID lidUI = MLGetUILanguage();

    if (IsOS(OS_WIN2000ORGREATER))
        return lidUI;

    if (lidUI != GetInstallLanguage())
    {
        hMLInst = MLGetHinst();
        if (GetModuleFileName(hMLInst, szPath, ARRAYSIZE(szPath)))
        {
            IntToHex(szMUI, 4, lidUI);
            if (StrStrI(szPath, szMUI) == NULL)
                lidUI = GetInstallLanguage();
        }
    }

    return lidUI;
}
"
DeaKwwmW,iSH 1.3.2(494) cargo\rust with Alpine Edge error,sypwex,Bash,Tuesday 31st of October 2023 11:27:16 PM CDT,"###### Scenario
echo https://dl-cdn.alpinelinux.org/alpine/edge/main > /etc/apk/repositories
echo https://dl-cdn.alpinelinux.org/alpine/edge/community >> /etc/apk/repositories
apk update
apk upgrade
apk add cargo
 
cargo new ehlo
cd ehlo
cargo run
 
rustc --version # 1.72.1 (d5c2e9c34 2023-09-13) (Alpine Linux 1.72.1-r0)
cargo --version # 1.72.1

cargo clean
ls -al
rm Cargo.lock
ls -al
RUST_BACKTRACE=full cargo build
###########################

Welcome to Alpine!

You can install packages with: apk add <package>

You may change this message by editing /etc/motd.

localhost:~# echo https://dl-cdn.alpinelinux.org/alpine/edge/main > /etc/apk/repositories
localhost:~# echo https://dl-cdn.alpinelinux.org/alpine/edge/community >> /etc/apk/repositories
localhost:~# apk update
fetch https://dl-cdn.alpinelinux.org/alpine/edge/main/x86/APKINDEX.tar.gz
fetch https://dl-cdn.alpinelinux.org/alpine/edge/community/x86/APKINDEX.tar.gz
v20230901-4577-gd7fdda31cc0 [https://dl-cdn.alpinelinux.org/alpine/edge/main]
v20230901-4602-g87d857c01cb [https://dl-cdn.alpinelinux.org/alpine/edge/community]
OK: 20696 distinct packages available
localhost:~# apk upgrade
Upgrading critical system libraries and apk-tools:
(1/8) Purging ssl_client (1.33.1-r6)
(2/8) Upgrading musl (1.2.2-r3 -> 1.2.4_git20230717-r3)
(3/8) Installing libcrypto3 (3.1.4-r0)
(4/8) Installing libssl3 (3.1.4-r0)
(5/8) Upgrading apk-tools (2.12.7-r0 -> 2.14.0-r5)
(6/8) Purging libretls (3.3.3p1-r2)
(7/8) Purging libssl1.1 (1.1.1l-r0)
(8/8) Purging libcrypto1.1 (1.1.1l-r0)
Executing busybox-1.33.1-r6.trigger
Continuing the upgrade transaction with new apk-tools:
(1/11) Installing alpine-baselayout-data (3.4.3-r2)
(2/11) Upgrading busybox (1.33.1-r6 -> 1.36.1-r13)
Executing busybox-1.36.1-r13.post-upgrade
(3/11) Installing busybox-binsh (1.36.1-r13)
(4/11) Upgrading alpine-baselayout (3.2.0-r16 -> 3.4.3-r2)
Executing alpine-baselayout-3.4.3-r2.pre-upgrade
Executing alpine-baselayout-3.4.3-r2.post-upgrade
(5/11) Upgrading alpine-keys (2.4-r0 -> 2.4-r1)
(6/11) Upgrading ca-certificates-bundle (20191127-r5 -> 20230506-r0)
(7/11) Installing ssl_client (1.36.1-r13)
(8/11) Upgrading zlib (1.2.11-r3 -> 1.3-r2)
(9/11) Upgrading scanelf (1.3.2-r0 -> 1.3.7-r2)
(10/11) Upgrading musl-utils (1.2.2-r3 -> 1.2.4_git20230717-r3)
(11/11) Upgrading libc-utils (0.7.2-r3 -> 0.7.2-r5)
Executing busybox-1.36.1-r13.trigger
OK: 6 MiB in 15 packages
localhost:~# apk add cargo
(1/27) Installing libgcc (13.2.1_git20231014-r0)
(2/27) Installing jansson (2.14-r4)
(3/27) Installing libstdc++ (13.2.1_git20231014-r0)
(4/27) Installing zstd-libs (1.5.5-r7)
(5/27) Installing binutils (2.41-r0)
(6/27) Installing libgomp (13.2.1_git20231014-r0)
(7/27) Installing libatomic (13.2.1_git20231014-r0)
(8/27) Installing gmp (6.3.0-r0)
(9/27) Installing isl26 (0.26-r1)
(10/27) Installing mpfr4 (4.2.1-r0)
(11/27) Installing mpc1 (1.3.1-r1)
(12/27) Installing gcc (13.2.1_git20231014-r0)
(13/27) Installing musl-dev (1.2.4_git20230717-r3)
(14/27) Installing libffi (3.4.4-r3)
(15/27) Installing xz-libs (5.4.4-r0)
(16/27) Installing libxml2 (2.11.5-r0)
(17/27) Installing llvm16-libs (16.0.6-r7)
(18/27) Installing scudo-malloc (17.0.3-r0)
(19/27) Installing rust (1.72.1-r0)
(20/27) Installing ca-certificates (20230506-r0)
(21/27) Installing brotli-libs (1.1.0-r0)
(22/27) Installing c-ares (1.20.1-r0)
(23/27) Installing libunistring (1.1-r2)
(24/27) Installing libidn2 (2.3.4-r4)
(25/27) Installing nghttp2-libs (1.57.0-r0)
(26/27) Installing libcurl (8.4.0-r0)
(27/27) Installing cargo (1.72.1-r0)
Executing busybox-1.36.1-r13.trigger
Executing ca-certificates-20230506-r0.trigger
OK: 912 MiB in 42 packages
localhost:~#  
localhost:~# cargo new ehlo
     Created binary (application) `ehlo` package
localhost:~# cd ehlo
localhost:~/ehlo# cargo run
thread 'main' panicked at 'no entry found for key', src/cargo/util/dependency_queue.rs:109:58
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
localhost:~/ehlo#  
localhost:~/ehlo# rustc --version
rustc 1.72.1 (d5c2e9c34 2023-09-13) (Alpine Linux 1.72.1-r0)
localhost:~/ehlo# cargo --version
cargo 1.72.1
localhost:~/ehlo#  
localhost:~/ehlo# cargo clean
localhost:~/ehlo# ls -al
total 12
drwxr-xr-x    4 root     root           224 Nov  1 04:22 .
drwx------    4 root     root           160 Nov  1 04:22 ..
drwxr-xr-x    6 root     root           288 Nov  1 04:22 .git
-rw-r--r--    1 root     root             8 Nov  1 04:22 .gitignore
-rw-r--r--    1 root     root           148 Nov  1 04:22 Cargo.lock
-rw-r--r--    1 root     root           173 Nov  1 04:22 Cargo.toml
drwxr-xr-x    2 root     root            96 Nov  1 04:22 src
localhost:~/ehlo# rm Cargo.lock
localhost:~/ehlo# ls -al
total 8
drwxr-xr-x    4 root     root           192 Nov  1 04:22 .
drwx------    4 root     root           160 Nov  1 04:22 ..
drwxr-xr-x    6 root     root           288 Nov  1 04:22 .git
-rw-r--r--    1 root     root             8 Nov  1 04:22 .gitignore
-rw-r--r--    1 root     root           173 Nov  1 04:22 Cargo.toml
drwxr-xr-x    2 root     root            96 Nov  1 04:22 src
localhost:~/ehlo# RUST_BACKTRACE=full cargo build
thread 'main' panicked at 'no entry found for key', src/cargo/util/dependency_queue.rs:109:58
stack backtrace:
   0: 0x5709afd0 - <unknown>
   1: 0x570cc84c - <unknown>
   2: 0x57094e96 - <unknown>
   3: 0x5709ae16 - <unknown>
   4: 0x5709ca5c - <unknown>
   5: 0x5709c80d - <unknown>
   6: 0x5709d042 - <unknown>
   7: 0x5709cf3b - <unknown>
   8: 0x5709b426 - <unknown>
   9: 0x5709cc33 - <unknown>
  10: 0x565e1d50 - <unknown>
  11: 0x565e1d02 - <unknown>
  12: 0x568ec031 - <unknown>
  13: 0x568bcffe - <unknown>
  14: 0x569e5371 - <unknown>
  15: 0x569e507c - <unknown>
  16: 0x5662d09a - <unknown>
  17: 0x566172b0 - <unknown>
  18: 0x56612ff1 - <unknown>
  19: 0x5664176f - <unknown>
  20: 0x565f9153 - <unknown>
  21: 0x565ffa6b - <unknown>
  22: 0x5708acde - <unknown>
  23: 0x5664884a - <unknown>
  24: 0xf7f74fdf - <unknown>
localhost:~/ehlo# "
yqmm9Xjr,Line/Circle Collision/Response,Dr_Davenstein,FreeBasic,Tuesday 31st of October 2023 11:12:45 PM CDT,"#include ""fbgfx.bi"" 

const as integer scr_w = 800, scr_h = 600

screenres scr_w, scr_h,32,,FB.GFX_HIGH_PRIORITY

type vec2f 
    x as single 
    y as single 
end type 


declare function vec2f_perp( byref a as vec2f, b as vec2f ) as vec2f
declare function cPointline( byref va as vec2f, byref vb as vec2f, byref vPoint as vec2f ) as vec2f 
declare sub vec2f_normalize( byref v as vec2f ) 
declare function vec2f_len( byref v as vec2f ) as single 
declare function vec2f_dot( byref a as vec2f, byref b as vec2f ) as single 
declare function vec2f_dist( byref va as vec2f, byref vb as vec2f ) as single 

dim as vec2f Pl, Pld, Cent, Ero
dim as single Radius, tDist
dim as double deltaTime = timer, curTime = timer
dim as integer i, ip1, Num_Verts

pl = type(scr_w\2, scr_h\2)
Radius = 32

read Num_Verts
dim Lines(Num_Verts) as vec2f

for i = 0 to ubound(Lines)
    read Lines(i).X, Lines(i).Y
next



curTime = timer
do 
    
    deltaTime = timer-curTime
    curTime = timer
    
    var moveSpeed = 350*deltaTime
    
    if multikey(FB.SC_LEFT) then PlD.X -= moveSpeed  
    if multikey(FB.SC_RIGHT) then PlD.X +=  moveSpeed 
    if multikey(FB.SC_UP) then PlD.Y -=  moveSpeed 
    if multikey(FB.SC_DOWN) then PlD.Y +=  moveSpeed    
    
    PlD.X += (-PlD.X*.95)*deltaTime 
    PlD.Y += (-PlD.Y*.95)*deltaTime 
    
    Pl.X+=PlD.X*deltaTime 
    Pl.Y+=PlD.Y*deltaTime 
    
    screenlock

    line(0,0)-(scr_w-1, scr_h-1),0,bf
    
    for i=0 to ubound(Lines)-1 step 2 
        ip1 = i+1 
        Cent = vec2f_perp( Lines(i), Lines(ip1) )
        Ero = cPointline( Lines(i), Lines(ip1), PL )
        tDist = vec2f_Dist( Pl, Ero ) 
        
        if tDist<Radius then 
            Pl.X+=Cent.X*(Radius-tDist) 
            Pl.Y+=Cent.Y*(Radius-tDist) 
        end if 
        
        line(Lines(i).X, Lines(i).Y)-(Lines(ip1).X, Lines(ip1).Y),&hffffff00 
        line(Ero.X, Ero.Y)-(Ero.X + (Cent.X*Radius), Ero.Y + (Cent.Y*Radius)),&hffffffff
    next 
    
    
    circle (Pl.X,Pl.Y),Radius, &hffffff00
    pset (Pl.X,Pl.Y), &hffffff00 
    screensync
    screenunlock
    
    sleep 30,1
    
loop until multikey(FB.SC_ESCAPE)



function cPointline( byref va as vec2f, byref vb as vec2f, byref vPoint as vec2f ) as vec2f 
    
    dim as vec2f tVector1
    dim as vec2f tVector2
    dim as vec2f vReturn
    dim as single d
    dim as single t
    
    tVector1.X = VPoint.X - Va.X 
    tVector1.Y = VPoint.Y - Va.Y 
    
    tVector2.X = Vb.X - Va.X 
    tVector2.Y = Vb.Y - Va.Y 
    
    vec2f_normalize( tVector2 )
    
    d = vec2f_dist( vA, vB ) 
    t = vec2f_dot( tVector2, tVector1 ) 
    
    if t<=0 then return Va 
    
    if t>=d then return Vb 
    
    vReturn.X = Va.X + (tVector2.X * t) 
    vReturn.Y = Va.Y + (tVector2.Y * t)
    
    return vReturn
    
end function 


function vec2f_dist( byref va as vec2f, byref vb as vec2f ) as single 
    
    dim as single dx
    dim as single dy
    
    dx = va.X - vb.X 
    dy = va.Y - vb.Y
    
    return sqr(dx^2+dy^2) 
    
end function 


sub vec2f_normalize( byref v as vec2f )
    
    dim as single vLen
    
    vLen = vec2f_len ( v ) 
    
    v.x /= vLen 
    v.y /= vLen 
    
end sub 


function vec2f_len( byref v as vec2f ) as single 
    
    dim as single tLen
    
    tLen = sqr(v.x^2 + v.y^2) 
    
    if tLen = 0 then tLen = 1
    
    return tLen
    
end function 


function vec2f_dot( byref a as vec2f, byref b as vec2f ) as single 
    
    return a.x*b.x + a.y*b.y 
    
end function 


function vec2f_perp( byref a as vec2f, byref b as vec2f ) as vec2f
    
    dim as single vLen
    dim as vec2f d
    
    d.x = b.x - a.x 
    d.y = b.y - a.y 
    
    vLen = vec2f_len( d )
    
    return type( d.y  / vLen, -d.x / vLen )
    
end function



data 21 

data 50,70 
data 10,240 

data 10,240 
data 100,340 

data 100,340 
data 125,400 

data 125,400 
data 300,450 

data 300,450 
data 450,470 

data 450,470 
data 600,370 

data 600,370 
data 550,300 

data 550,300 
data 625,250 

data 625,250 
data 500,10 

data 500,10 
data 320,50 

data 320,50 
data 50,70 "
kbx6c6Hx,iSH 1.3.2(494) cargo\rust with Alpine 3.19 error,sypwex,Bash,Tuesday 31st of October 2023 11:07:45 PM CDT,"###### Scenario
echo https://dl-cdn.alpinelinux.org/alpine/v3.19/main > /etc/apk/repositories
echo https://dl-cdn.alpinelinux.org/alpine/v3.19/community >> /etc/apk/repositories
apk update
apk upgrade
apk add cargo
 
cargo new ehlo
cd ehlo
cargo run
 
rustc --version # 1.72.1 (d5c2e9c34 2023-09-13) (Alpine Linux 1.72.1-r0)
cargo --version # 1.72.1

cargo clean
ls -al
rm Cargo.lock
ls -al
RUST_BACKTRACE=full cargo build
############################

Welcome to Alpine!

You can install packages with: apk add <package>

You may change this message by editing /etc/motd.

localhost:~# echo https://dl-cdn.alpinelinux.org/alpine/v3.19/main > /etc/apk/repositories
localhost:~# echo https://dl-cdn.alpinelinux.org/alpine/v3.19/community >> /etc/apk/repositories
localhost:~# apk update
fetch https://dl-cdn.alpinelinux.org/alpine/v3.19/main/x86/APKINDEX.tar.gz
fetch https://dl-cdn.alpinelinux.org/alpine/v3.19/community/x86/APKINDEX.tar.gz
v20230901-4555-g18d074cb787 [https://dl-cdn.alpinelinux.org/alpine/v3.19/main]
community v20230901-3812-g6f8c66fa616 [https://dl-cdn.alpinelinux.org/alpine/v3.19/community]
OK: 5956 distinct packages available
localhost:~# apk upgrade
Upgrading critical system libraries and apk-tools:
(1/8) Purging ssl_client (1.33.1-r6)
(2/8) Upgrading musl (1.2.2-r3 -> 1.2.4_git20230717-r3)
(3/8) Installing libcrypto3 (3.1.4-r0)
(4/8) Installing libssl3 (3.1.4-r0)
(5/8) Upgrading apk-tools (2.12.7-r0 -> 2.14.0-r5)
(6/8) Purging libretls (3.3.3p1-r2)
(7/8) Purging libssl1.1 (1.1.1l-r0)
(8/8) Purging libcrypto1.1 (1.1.1l-r0)
Executing busybox-1.33.1-r6.trigger
Continuing the upgrade transaction with new apk-tools:
(1/11) Installing alpine-baselayout-data (3.4.3-r2)
(2/11) Upgrading busybox (1.33.1-r6 -> 1.36.1-r13)
Executing busybox-1.36.1-r13.post-upgrade
(3/11) Installing busybox-binsh (1.36.1-r13)
(4/11) Upgrading alpine-baselayout (3.2.0-r16 -> 3.4.3-r2)
Executing alpine-baselayout-3.4.3-r2.pre-upgrade
Executing alpine-baselayout-3.4.3-r2.post-upgrade
(5/11) Upgrading alpine-keys (2.4-r0 -> 2.4-r1)
(6/11) Upgrading ca-certificates-bundle (20191127-r5 -> 20230506-r0)
(7/11) Installing ssl_client (1.36.1-r13)
(8/11) Upgrading zlib (1.2.11-r3 -> 1.3-r2)
(9/11) Upgrading scanelf (1.3.2-r0 -> 1.3.7-r2)
(10/11) Upgrading musl-utils (1.2.2-r3 -> 1.2.4_git20230717-r3)
(11/11) Upgrading libc-utils (0.7.2-r3 -> 0.7.2-r5)
Executing busybox-1.36.1-r13.trigger
OK: 6 MiB in 15 packages
localhost:~# apk add cargo
(1/27) Installing libgcc (13.2.1_git20231014-r0)
(2/27) Installing jansson (2.14-r4)
(3/27) Installing libstdc++ (13.2.1_git20231014-r0)
(4/27) Installing zstd-libs (1.5.5-r7)
(5/27) Installing binutils (2.41-r0)
(6/27) Installing libgomp (13.2.1_git20231014-r0)
(7/27) Installing libatomic (13.2.1_git20231014-r0)
(8/27) Installing gmp (6.3.0-r0)
(9/27) Installing isl26 (0.26-r1)
(10/27) Installing mpfr4 (4.2.1-r0)
(11/27) Installing mpc1 (1.3.1-r1)
(12/27) Installing gcc (13.2.1_git20231014-r0)
(13/27) Installing musl-dev (1.2.4_git20230717-r3)
(14/27) Installing libffi (3.4.4-r3)
(15/27) Installing xz-libs (5.4.4-r0)
(16/27) Installing libxml2 (2.11.5-r0)
(17/27) Installing llvm16-libs (16.0.6-r7)
(18/27) Installing scudo-malloc (17.0.3-r0)
(19/27) Installing rust (1.72.1-r0)
(20/27) Installing ca-certificates (20230506-r0)
(21/27) Installing brotli-libs (1.1.0-r0)
(22/27) Installing c-ares (1.20.1-r0)
(23/27) Installing libunistring (1.1-r2)
(24/27) Installing libidn2 (2.3.4-r4)
(25/27) Installing nghttp2-libs (1.57.0-r0)
(26/27) Installing libcurl (8.4.0-r0)
(27/27) Installing cargo (1.72.1-r0)
Executing busybox-1.36.1-r13.trigger
Executing ca-certificates-20230506-r0.trigger
OK: 912 MiB in 42 packages
localhost:~# 

localhost:~# cargo new ehlo
     Created binary (application) `ehlo` package
localhost:~# cd ehlo
localhost:~/ehlo# cargo run
thread 'main' panicked at 'no entry found for key', src/cargo/util/dependency_queue.rs:109:58
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
localhost:~/ehlo# 
localhost:~/ehlo# rustc --version 
rustc 1.72.1 (d5c2e9c34 2023-09-13) (Alpine Linux 1.72.1-r0)
localhost:~/ehlo# cargo --version
cargo 1.72.1
localhost:~/ehlo# cargo clean
localhost:~/ehlo# ls -al
total 12
drwxr-xr-x    4 root     root           224 Nov  1 03:52 .
drwx------    4 root     root           160 Nov  1 03:52 ..
drwxr-xr-x    6 root     root           288 Nov  1 03:52 .git
-rw-r--r--    1 root     root             8 Nov  1 03:52 .gitignore
-rw-r--r--    1 root     root           148 Nov  1 03:52 Cargo.lock
-rw-r--r--    1 root     root           173 Nov  1 03:52 Cargo.toml
drwxr-xr-x    2 root     root            96 Nov  1 03:52 src
localhost:~/ehlo# rm Cargo.lock
localhost:~/ehlo# ls -al
total 8
drwxr-xr-x    4 root     root           192 Nov  1 03:53 .
drwx------    4 root     root           160 Nov  1 03:52 ..
drwxr-xr-x    6 root     root           288 Nov  1 03:52 .git
-rw-r--r--    1 root     root             8 Nov  1 03:52 .gitignore
-rw-r--r--    1 root     root           173 Nov  1 03:52 Cargo.toml
drwxr-xr-x    2 root     root            96 Nov  1 03:52 src
localhost:~/ehlo# RUST_BACKTRACE=full cargo build
thread 'main' panicked at 'no entry found for key', src/cargo/util/dependency_queue.rs:109:58
stack backtrace:
   0: 0x5709afd0 - <unknown>
   1: 0x570cc84c - <unknown>
   2: 0x57094e96 - <unknown>
   3: 0x5709ae16 - <unknown>
   4: 0x5709ca5c - <unknown>
   5: 0x5709c80d - <unknown>
   6: 0x5709d042 - <unknown>
   7: 0x5709cf3b - <unknown>
   8: 0x5709b426 - <unknown>
   9: 0x5709cc33 - <unknown>
  10: 0x565e1d50 - <unknown>
  11: 0x565e1d02 - <unknown>
  12: 0x568ec031 - <unknown>
  13: 0x568bcffe - <unknown>
  14: 0x569e5371 - <unknown>
  15: 0x569e507c - <unknown>
  16: 0x5662d09a - <unknown>
  17: 0x566172b0 - <unknown>
  18: 0x56612ff1 - <unknown>
  19: 0x5664176f - <unknown>
  20: 0x565f9153 - <unknown>
  21: 0x565ffa6b - <unknown>
  22: 0x5708acde - <unknown>
  23: 0x5664884a - <unknown>
  24: 0xf7f74fdf - <unknown>
localhost:~/ehlo# "
XsFzzKuf,iSH 1.3.2(494) cargo\rust with Alpine 3.18 error,sypwex,Bash,Tuesday 31st of October 2023 10:45:27 PM CDT,"###### Scenario
echo https://dl-cdn.alpinelinux.org/alpine/v3.18/main > /etc/apk/repositories
echo https://dl-cdn.alpinelinux.org/alpine/v3.18/community >> /etc/apk/repositories
apk update
apk upgrade
apk add cargo
 
cargo new ehlo
cd ehlo
cargo run
 
rustc --version # 1.71.1 (eb26296b5 2023-08-03) (Alpine Linux)
cargo --version # 1.71.1
##################################

Welcome to Alpine!

You can install packages with: apk add <package>

You may change this message by editing /etc/motd.

localhost:~# echo https://dl-cdn.alpinelinux.org/alpine/v3.18/main > /etc/apk/repositories
localhost:~# echo https://dl-cdn.alpinelinux.org/alpine/v3.18/community >> /etc/apk/repositories
localhost:~# apk update
fetch https://dl-cdn.alpinelinux.org/alpine/v3.18/main/x86/APKINDEX.tar.gz
fetch https://dl-cdn.alpinelinux.org/alpine/v3.18/community/x86/APKINDEX.tar.gz
v3.18.4-129-gdb5b5ce6661 [https://dl-cdn.alpinelinux.org/alpine/v3.18/main]
v3.18.4-138-g7257e689a56 [https://dl-cdn.alpinelinux.org/alpine/v3.18/community]
OK: 19339 distinct packages available
localhost:~# apk upgrade
Upgrading critical system libraries and apk-tools:
(1/8) Purging ssl_client (1.33.1-r6)
(2/8) Upgrading musl (1.2.2-r3 -> 1.2.4-r2)
(3/8) Installing libcrypto3 (3.1.4-r0)
(4/8) Installing libssl3 (3.1.4-r0)
(5/8) Upgrading apk-tools (2.12.7-r0 -> 2.14.0-r2)
(6/8) Purging libretls (3.3.3p1-r2)
(7/8) Purging libssl1.1 (1.1.1l-r0)
(8/8) Purging libcrypto1.1 (1.1.1l-r0)
Executing busybox-1.33.1-r6.trigger
Continuing the upgrade transaction with new apk-tools:
(1/11) Installing alpine-baselayout-data (3.4.3-r1)
(2/11) Upgrading busybox (1.33.1-r6 -> 1.36.1-r4)
Executing busybox-1.36.1-r4.post-upgrade
(3/11) Installing busybox-binsh (1.36.1-r4)
(4/11) Upgrading alpine-baselayout (3.2.0-r16 -> 3.4.3-r1)
Executing alpine-baselayout-3.4.3-r1.pre-upgrade
Executing alpine-baselayout-3.4.3-r1.post-upgrade
(5/11) Upgrading alpine-keys (2.4-r0 -> 2.4-r1)
(6/11) Upgrading ca-certificates-bundle (20191127-r5 -> 20230506-r0)
(7/11) Installing ssl_client (1.36.1-r4)
(8/11) Upgrading zlib (1.2.11-r3 -> 1.2.13-r1)
(9/11) Upgrading scanelf (1.3.2-r0 -> 1.3.7-r1)
(10/11) Upgrading musl-utils (1.2.2-r3 -> 1.2.4-r2)
(11/11) Upgrading libc-utils (0.7.2-r3 -> 0.7.2-r5)
Executing busybox-1.36.1-r4.trigger
OK: 6 MiB in 15 packages
localhost:~# apk add cargo
(1/24) Installing libgcc (12.2.1_git20220924-r10)
(2/24) Installing libstdc++ (12.2.1_git20220924-r10)
(3/24) Installing zstd-libs (1.5.5-r4)
(4/24) Installing binutils (2.40-r7)
(5/24) Installing libgomp (12.2.1_git20220924-r10)
(6/24) Installing libatomic (12.2.1_git20220924-r10)
(7/24) Installing gmp (6.2.1-r3)
(8/24) Installing isl26 (0.26-r1)
(9/24) Installing mpfr4 (4.2.0_p12-r0)
(10/24) Installing mpc1 (1.3.1-r1)
(11/24) Installing gcc (12.2.1_git20220924-r10)
(12/24) Installing musl-dev (1.2.4-r2)
(13/24) Installing libffi (3.4.4-r2)
(14/24) Installing xz-libs (5.4.3-r0)
(15/24) Installing libxml2 (2.11.4-r0)
(16/24) Installing llvm16-libs (16.0.6-r1)
(17/24) Installing rust (1.71.1-r0)
(18/24) Installing ca-certificates (20230506-r0)
(19/24) Installing brotli-libs (1.0.9-r14)
(20/24) Installing libunistring (1.1-r1)
(21/24) Installing libidn2 (2.3.4-r1)
(22/24) Installing nghttp2-libs (1.57.0-r0)
(23/24) Installing libcurl (8.4.0-r0)
(24/24) Installing cargo (1.71.1-r0)
Executing busybox-1.36.1-r4.trigger
Executing ca-certificates-20230506-r0.trigger
OK: 890 MiB in 39 packages
localhost:~# 
localhost:~# 
localhost:~# cargo new ehlo
     Created binary (application) `ehlo` package
localhost:~# cd ehlo
localhost:~/ehlo# cargo run
thread 'main' panicked at 'no entry found for key', src/cargo/util/dependency_queue.rs:109:58
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
localhost:~/ehlo# 
localhost:~/ehlo# rust --version
-ash: rust: not found
localhost:~/ehlo# cargo --version
cargo 1.71.1
localhost:~/ehlo# rustc --version
rustc 1.71.1 (eb26296b5 2023-08-03) (Alpine Linux)
localhost:~/ehlo# RUST_BACKTRACE=1 cargo build
error: failed to parse lock file at: /root/ehlo/Cargo.lock

Caused by:
  lock file version `2` was found, but this version of Cargo does not understand this lock file, perhaps Cargo needs to be updated?
localhost:~/ehlo# cargo clean
localhost:~/ehlo# RUST_BACKTRACE=1 cargo build
error: failed to parse lock file at: /root/ehlo/Cargo.lock

Caused by:
  lock file version `2` was found, but this version of Cargo does not understand this lock file, perhaps Cargo needs to be updated?
localhost:~/ehlo# cargo clean
llocalhost:~/ehlo# ls -al
total 12
drwxr-xr-x    4 root     root           224 Nov  1 03:28 .
drwx------    4 root     root           160 Nov  1 03:22 ..
drwxr-xr-x    6 root     root           288 Nov  1 03:22 .git
-rw-r--r--    1 root     root             8 Nov  1 03:22 .gitignore
-rw-r--r--    1 root     root           148 Nov  1 03:22 Cargo.lock
-rw-r--r--    1 root     root           173 Nov  1 03:22 Cargo.toml
drwxr-xr-x    2 root     root            96 Nov  1 03:22 src

localhost:~/ehlo# rm Cargo.lock 
localhost:~/ehlo# RUST_BACKTRACE=1 cargo build
thread 'main' panicked at 'no entry found for key', src/cargo/util/dependency_queue.rs:109:58
stack backtrace:
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
localhost:~/ehlo# ls -al
total 12
drwxr-xr-x    5 root     root           256 Nov  1 03:29 .
drwx------    4 root     root           160 Nov  1 03:22 ..
drwxr-xr-x    6 root     root           288 Nov  1 03:22 .git
-rw-r--r--    1 root     root             8 Nov  1 03:22 .gitignore
-rw-r--r--    1 root     root           148 Nov  1 03:29 Cargo.lock
-rw-r--r--    1 root     root           173 Nov  1 03:22 Cargo.toml
drwxr-xr-x    2 root     root            96 Nov  1 03:22 src
drwxr-xr-x    3 root     root           160 Nov  1 03:29 target
localhost:~/ehlo# cargo clean
localhost:~/ehlo# rm Cargo.lock 
localhost:~/ehlo# RUST_BACKTRACE=full cargo build
thread 'main' panicked at 'no entry found for key', src/cargo/util/dependency_queue.rs:109:58
stack backtrace:
   0: 0x56f6ba60 - <unknown>
   1: 0x56f9954c - <unknown>
   2: 0x56f65aeb - <unknown>
   3: 0x56f6b8a6 - <unknown>
   4: 0x56f6d47c - <unknown>
   5: 0x56f6d239 - <unknown>
   6: 0x56f6da59 - <unknown>
   7: 0x56f6d95b - <unknown>
   8: 0x56f6be86 - <unknown>
   9: 0x56f6d653 - <unknown>
  10: 0x565c8cd0 - <unknown>
  11: 0x565c8c82 - <unknown>
  12: 0x568c1761 - <unknown>
  13: 0x56891e94 - <unknown>
  14: 0x569b7b21 - <unknown>
  15: 0x569b782c - <unknown>
  16: 0x566133ea - <unknown>
  17: 0x565fdfc5 - <unknown>
  18: 0x565fa2aa - <unknown>
  19: 0x56626f7f - <unknown>
  20: 0x565e0ce3 - <unknown>
  21: 0x565e717b - <unknown>
  22: 0x56f5ba6e - <unknown>
  23: 0x5662e01a - <unknown>
  24: 0xf7f7a454 - <unknown>
localhost:~/ehlo# "
cULsfjmN,shaftElevatorBottom,Lanzr,Lua,Tuesday 31st of October 2023 10:27:01 PM CDT,"local modem = peripheral.find(""modem"")
if (modem == nil) then
    print(""no modem link"")
    return
end
modem.open(1)

local function sendToTop()
    modem.transmit(0, 1, ""take change"") 
end

local function redstoneCheck() 
while true do
    os.pullEvent(""redstone"")
    printf(""redstone"")
    switch()
end
end

redstoneCheck()
"
d4jtTeyg,shaftElevatorTop,Lanzr,Lua,Tuesday 31st of October 2023 10:22:08 PM CDT,"local modem = peripheral.find(""modem"")
if (modem == nil) then
    print(""no modem link"")
    return
end
modem.open(0)

local upState = false
local function switch()
    redstone.setOutput(""top"",upState)
    upState = ~upState
end

local function redstoneCheck() 
while true do
    os.pullEvent(""redstone"")
    printf(""redstone"")
    switch()
end
end

local function modemcheck()
while true do
    local event, modemSide, senderChannel, 
        replyChannel, message, senderDistance = os.pullEvent(""modem_message"")
    switch()
    printf(""modem"")
end
end

parallel.waitForAny(redstoneCheck,modemcheck)
"
mE2zhN7B,iSH 1.3.2(494) cargo\rust with Alpine 3.17 error,sypwex,Bash,Tuesday 31st of October 2023 10:15:01 PM CDT,"###### Scenario
echo https://dl-cdn.alpinelinux.org/alpine/v3.17/main > /etc/apk/repositories
echo https://dl-cdn.alpinelinux.org/alpine/v3.17/community >> /etc/apk/repositories
apk update
apk upgrade
apk add cargo

cargo new ehlo
cd ehlo
cargo run

rustc --version # 1.64
cargo --version # 1.64
############################


Welcome to Alpine!

You can install packages with: apk add <package>

You may change this message by editing /etc/motd.

localhost:~# echo https://dl-cdn.alpinelinux.org/alpine/v3.17/main > /etc/apk/repositories
localhost:~# echo https://dl-cdn.alpinelinux.org/alpine/v3.17/community >> /etc/apk/repositories
localhost:~# apk update
fetch https://dl-cdn.alpinelinux.org/alpine/v3.17/main/x86/APKINDEX.tar.gz
fetch https://dl-cdn.alpinelinux.org/alpine/v3.17/community/x86/APKINDEX.tar.gz
v3.17.5-144-g9271183f7c5 [https://dl-cdn.alpinelinux.org/alpine/v3.17/main]
v3.17.5-145-g123509d97de [https://dl-cdn.alpinelinux.org/alpine/v3.17/community]
OK: 17265 distinct packages available
localhost:~# apk upgrade
Upgrading critical system libraries and apk-tools:
(1/7) Purging ssl_client (1.33.1-r6)
(2/7) Installing libcrypto3 (3.0.12-r0)
(3/7) Installing libssl3 (3.0.12-r0)
(4/7) Upgrading apk-tools (2.12.7-r0 -> 2.12.10-r1)
(5/7) Purging libretls (3.3.3p1-r2)
(6/7) Purging libssl1.1 (1.1.1l-r0)
(7/7) Purging libcrypto1.1 (1.1.1l-r0)
Executing busybox-1.33.1-r6.trigger
Continuing the upgrade transaction with new apk-tools:
(1/11) Installing alpine-baselayout-data (3.4.0-r0)
(2/11) Upgrading musl (1.2.2-r3 -> 1.2.3-r5)
(3/11) Upgrading busybox (1.33.1-r6 -> 1.35.0-r29)
Executing busybox-1.35.0-r29.post-upgrade
(4/11) Installing busybox-binsh (1.35.0-r29)
(5/11) Upgrading alpine-baselayout (3.2.0-r16 -> 3.4.0-r0)
Executing alpine-baselayout-3.4.0-r0.pre-upgrade
Executing alpine-baselayout-3.4.0-r0.post-upgrade
(6/11) Upgrading alpine-keys (2.4-r0 -> 2.4-r1)
(7/11) Upgrading ca-certificates-bundle (20191127-r5 -> 20230506-r0)
(8/11) Installing ssl_client (1.35.0-r29)
(9/11) Upgrading zlib (1.2.11-r3 -> 1.2.13-r0)
(10/11) Upgrading scanelf (1.3.2-r0 -> 1.3.5-r1)
(11/11) Upgrading musl-utils (1.2.2-r3 -> 1.2.3-r5)
Executing busybox-1.35.0-r29.trigger
OK: 7 MiB in 15 packages
localhost:~# apk add cargo
(1/23) Installing rust-stdlib (1.64.0-r2)
(2/23) Installing libgcc (12.2.1_git20220924-r4)
(3/23) Installing libstdc++ (12.2.1_git20220924-r4)
(4/23) Installing binutils (2.39-r2)
(5/23) Installing libgomp (12.2.1_git20220924-r4)
(6/23) Installing libatomic (12.2.1_git20220924-r4)
(7/23) Installing gmp (6.2.1-r2)
(8/23) Installing isl25 (0.25-r1)
(9/23) Installing mpfr4 (4.1.0-r0)
(10/23) Installing mpc1 (1.2.1-r1)
(11/23) Installing gcc (12.2.1_git20220924-r4)
(12/23) Installing musl-dev (1.2.3-r5)
(13/23) Installing libffi (3.4.4-r0)
(14/23) Installing xz-libs (5.2.9-r0)
(15/23) Installing libxml2 (2.10.4-r0)
(16/23) Installing zstd-libs (1.5.5-r0)
(17/23) Installing llvm15-libs (15.0.7-r0)
(18/23) Installing rust (1.64.0-r2)
(19/23) Installing ca-certificates (20230506-r0)
(20/23) Installing brotli-libs (1.0.9-r9)
(21/23) Installing nghttp2-libs (1.51.0-r2)
(22/23) Installing libcurl (8.4.0-r0)
(23/23) Installing cargo (1.64.0-r2)
Executing busybox-1.35.0-r29.trigger
Executing ca-certificates-20230506-r0.trigger
OK: 924 MiB in 38 packages
localhost:~# 
localhost:~# cargo new ehlo
Created binary (application) `ehlo` package
localhost:~# cd ehlo
localhost:~/ehlo# cargo run
Compiling ehlo v0.1.0 (/root/ehlo)
error: could not compile `ehlo`

Caused by:
  process didn't exit successfully: `rustc --crate-name ehlo --edition=2021 src/main.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 -C metadata=e5435835a3580f83 -C extra-filename=-e5435835a3580f83 --out-dir /root/ehlo/target/debug/deps -C incremental=/root/ehlo/target/debug/incremental -L dependency=/root/ehlo/target/debug/deps` (signal: 11, SIGSEGV: invalid memory reference)
localhost:~/ehlo# rustc --version
rustc 1.64.0
localhost:~/ehlo# cargo --version
cargo 1.64.0"
S1erMWq3,RUNNER.ini,Najeebsk,INI file,Tuesday 31st of October 2023 10:11:56 PM CDT,"[ShortCuts]
ShortcutName1 = Startup
ShortcutPath1 = C:\Users\Najeeb\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup
ShortcutName2 = Prefetch
ShortcutPath2 = C:\Windows\Prefetch
ShortcutName3 = Temp
ShortcutPath3 = C:\Users\Najeeb\AppData\Local\Temp
ShortcutName4 = Temp-Win
ShortcutPath4 = C:\Windows\Temp
ShortcutName5 = EmptyRecycleBin
ShortcutPath5 = C:\Users\Najeeb\Desktop\NAJEEBSK\EmptyRecycle.exe
ShortcutName6 = ALPHABET-LEETER
ShortcutPath6 = F:\PORTABLE\ALPHABET-UP-LOW\ALPHABET-LEETER.exe
ShortcutName7 = Everything
ShortcutPath7 = F:\PORTABLE\Everything\Everything.exe
ShortcutName8 = Anti-MalwareBytes
ShortcutPath8 = C:\Program Files\Malwarebytes\Anti-Malware\mbam.exe
ShortcutName9 = Notepad++
ShortcutPath9 = F:\PORTABLE\Notepad++\notepad++.exe
ShortcutName10 = ResourceHacker
ShortcutPath10 = F:\CMDER\Soft\ResourceHacker.exe
ShortcutName11 = RUN2
ShortcutPath11 = F:\CMDER\APP\RUN2.exe
ShortcutName12 = Telegram
ShortcutPath12 = F:\PORTABLE\Telegram Desktop\Telegram.exe
ShortcutName13 = IpTvPlayer
ShortcutPath13 = F:\PORTABLE\IP-TV Player\IpTvPlayer.exe
ShortcutName14 = Stalker_Player
ShortcutPath14 = F:\PORTABLE\stalker portal player v7.1\stalker_player.exe
ShortcutName15 = WindowsIPTVPlayer
ShortcutPath15 = F:\PORTABLE\Xtream Codes LTD\Windows IPTV Player\WindowsIPTVPlayer.exe
ShortcutName16 = Bulk Rename Utility
ShortcutPath16 = F:\CMDER\Soft\Bulk Rename Utility.exe
ShortcutName17 =SEARCH-D 
ShortcutPath17 = D:\SEEK.exe
ShortcutName18 = SEARCH-E
ShortcutPath18 = E:\SEEK.exe
ShortcutName19 = SEARCH-F
ShortcutPath19 = F:\SEEK.exe
ShortcutName20 = SEARCH-G
ShortcutPath20 = G:\SEEK.exe
ShortcutName21 = OPEN-Z
ShortcutPath21 = F:\MOUNT-VHD.exe
ShortcutName22 = CLOSE-Z
ShortcutPath22 = F:\UNMOUNT-VHD.exe
ShortcutName23 = SEARCH-Z
ShortcutPath23 = Z:\SEEK.exe
ShortcutName24 = HIDE-SYSTEM
ShortcutPath24 = C:\Users\Najeeb\Desktop\NAJEEBSK\HIDE-SYSTEM.exe"
ZKiyRS0C,RUNNER.ahk,Najeebsk,Autohotkey,Tuesday 31st of October 2023 10:11:01 PM CDT,"#NoEnv
#SingleInstance, Force
SetBatchLines, -1
ini = %A_Scriptdir%\RUNNER.ini ; Replace with your INI path
spath := {}
Gui, New
;Gui, Color, 884488
Gui New, +Hwndmygui
WinSet, TransColor, EEAA99
Gui, +ToolWindow -Border
Gui,Font,S14 Bold,Calibri 
Loop {
 IniRead, sname, %ini%, Shortcuts, ShortcutName%A_Index%
 If (sname = ""ERROR"")
  Break
 IniRead, thisPath, %ini%, Shortcuts, ShortcutPath%A_Index%
 If FileExist(thisPath) {
  spath[sname] := thisPath
  Gui, Add, Button, w200 h20 y+m gProg, %sname%
 }
}
Gui, Show, X775 Y2 W240 H720, Najeeb Run
Return

Prog:
If FileExist(thisPath := spath[A_GuiControl]) {
 SplitPath, thisPath, fn
 If WinExist(""ahk_exe "" fn)
  WinActivate
 Else Run, %thisPath%
} Else MsgBox, 48, File not found, %thisPath%
Return
F1::
    if (WinExist(""ahk_id "" mygui))
        Gui %mygui%: Hide
    else
        Gui %mygui%: Show
Return

#R::Reload  ;<--  ~ Reload Script ~
#S::Suspend ;<--  ~ Suspend Script ~ 
#P::Pause   ;<--  ~ Pause Script ~
#M::WinMinimize, ;<--  ~ Minimize Script ~
ESC::ExitApp     ;<--  ~ Exit Script ~"
VxxHHWJT,Koikatsu List Scraper V1.1,Skelun,JavaScript,Tuesday 31st of October 2023 09:59:54 PM CDT,"/* --------------------------------------------------------------------
-- MOON RATING
-----------------------------------------------------------------------
-- I'm using this because it was the easier way
-- to simulate rating stars.
----------------------------------------------------------------------- */

function moonRating(number) {
  
    // Is it a number?
    if (!isNaN(number)) {
      var votes;
  
      // Is it an interger?
      if (number % 1 === 0) {
        votes=""🌕"".repeat(number);
        votes+=""🌑"".repeat(5-number);
      
      // Or is it a float?
      } else {
        let n = Math.floor(number);
        votes=""🌕"".repeat(n);
        votes+=""🌗"";
        votes+=""🌑"".repeat(4-n);
      }
      return votes;
    } else {
      // If no votes
      return ""------""
    }
  }
  
  /* --------------------------------------------------------------------
  -- Scraping data using Cheerio library
  -- (https://github.com/tani/cheeriogs)
  -- Script ID: 1ReeQ6WO8kKNxoaA_O0XEQ589cIrRvEBA9qcWpNqdOP17i47u6N9M5Xh0
  ----------------------------------------------------------------------- */
  
  // Cheerio method to scrape
  function getContent(url) {
      return UrlFetchApp.fetch(url).getContentText()
  }
  
  /* --------------------------------------------------------------------
  // Actual scrape function
  ----------------------------------------------------------------------- */

  function scrapeData(force) {
  
    // Selects the active sheet
    var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  
    // Get selected cells
    var selectedRange = sheet.getActiveRange();
  
    // Get the values from the selected cells
    var selectedValues = selectedRange.getValues(); 
  
    // Iterate through cells
    for (var i = 0; i < selectedValues.length; i++) {
  
      // It assumes the URLs are in the first column of the selected column
      var url = selectedValues[i][0];
  
      // If the value is not empty...
      if (url) {

        // Grabs the HTML data
        var content = getContent(url);
        
        // Parses the HTML data
        var $ = Cheerio.load(content);
  
        /* --------------------------------------------------------------------
        -- [TITLE]
        -------------------------------------------------------------------- */
        var threadTitle = $('h1.p-title-value');
  
        var title = threadTitle.contents().filter(function() {
          return this.type === 'text';
        }).text();
  
        /* --------------------------------------------------------------------
        -- [STATUS] (ACTIVE - ABANDONED - ONHOLD)
        -------------------------------------------------------------------- */
        // Default status
        var status = 'Active';
  
        // Search for ""Abandoned"" or ""Onhold""
        threadTitle.find('span').each(function() {
          var spanText = $(this).text();
          if (['Completed','Abandoned','Onhold'].includes(spanText)) {
            status = spanText;
            return false;
          }
        });
  
        /* --------------------------------------------------------------------
        -- [ENGINE]
        ----------------------------------------------------------------------- */
        // If there's no engine info, it returns ""unknown""
        var engine = 'Unknown';
  
        // Checks if there's one of these strings
        threadTitle.find('span').each(function() {
          var spanText = $(this).text();
          if (['ADRIFT','Flash','Java','Others','QSP','RAGS','RPGM',""Ren'Py"",'Tads','Unity','Unreal Engine','WebGL','Wolf RPG','HTML'].includes(spanText)) {
            engine = spanText;
            return false; // Stop searching once a match is found
          }
        });
  
        /* --------------------------------------------------------------------
        -- [TAGS]
        ----------------------------------------------------------------------- */
        // Selects the element containing the tags
        var tagList = $('span.js-tagList');
  
        // Grabs the tags and separate them by comma
        var tags = tagList.find('a.tagItem').map(function() {
          return $(this).text();
        }).get().join(', ');
  
        /* --------------------------------------------------------------------
        -- GAMEPLAY
        ----------------------------------------------------------------------- */
        var gameplay;
  
        // Assumes the [Gameplay] type by using the tags
        switch (true) {
          case tags.includes('sandbox'):
            gameplay = 'Sandbox';
            break;
          case tags.includes('turn based combat'):
            gameplay = 'TBC';
            break;
          case tags.includes('management'):
            gameplay = 'Management';
            break;
          case tags.includes('simulator'):
            gameplay = 'Simulator';
            break;
          case tags.includes('rpg'):
            gameplay = 'RPG';
            break;
          default:
            gameplay = 'Visual Novel';
        }
  
        /* --------------------------------------------------------------------
        -- EXTRA INFORMATION
        -----------------------------------------------------------------------
        -- - Thread [Updated] Date
        -- - [Release] Date
        -- - [Dev] name
        -- - [Censored]
        ----------------------------------------------------------------------- */
        // Selects the first message body (which is the one containing the game info)
        var articleText = $('article.message-body').first().text();
  
        // Uses regular expressions to match and capture the information
        // When it was updated
        var updatedREGEX = /Thread Updated: ([^\s]+)/.exec(articleText);
        // When it was released
        var releaseREGEX = /Release Date: ([^\s]+)/.exec(articleText);
        // Who is the dev
        var devREGEX = /Developer: ([^\s]+)/.exec(articleText);
        // It is censored?
        var censoredREGEX = /Censored: (.+?)(?=\n|\r|\r\n)/.exec(articleText);
  
        // Extract the captured values or provide default values if not found
        var updated = updatedREGEX ? updatedREGEX[1] : ""Not found"";
        var release = releaseREGEX ? releaseREGEX[1] : ""Not found"";
        var dev = devREGEX ? devREGEX[1] : ""Not found"";
        var censored = censoredREGEX ? censoredREGEX[1] : ""Not found"";
  
        /* --------------------------------------------------------------------
        -- [RATING] & [VOTES]
        ----------------------------------------------------------------------- */
        // Grabs the JSON generated by F95 forum
        var jsonInfo = $('script[type=""application/ld+json""]').last();
        
        // Uses regular expression to match and caputre the information
        var ratingREGEX = /""ratingValue"": ""(\d+(?:\.\d+)?)""/.exec(jsonInfo);
        var votesREGEX = /""ratingCount"": ""(\d+)""/.exec(jsonInfo);
  
        // Extract the captured values or provide default values if not found
        var rating = ratingREGEX ? ratingREGEX[1] : ""No Rating"";
        var votes = votesREGEX ? votesREGEX[1] : ""0"";

        /* --------------------------------------------------------------------
        -- LAST UPDATE CHECK
        -- --------------------------------------------------------------------
        -- Before outputting the data it will check when the last update was,
        -- to avoid placing the same well maintained games on the top.
        -- -> First it will check if it's just a brand new game, by comparing the
        -- release data with today's date;
        -- -> If it's not a brand new game, it will ignore the game if it was
        -- updated less than 30 days ago;
        ----------------------------------------------------------------------- */

        // Gets today's date
        var today = new Date();

        // Parses the update info
        var updatedDate = new Date(updated);
        
        // Subtracts both dates to get days gap
        var daysSinceLastUpdate = Math.floor((today - updatedDate) / (1000 * 60 * 60 * 24));

        if (force === true || daysSinceLastUpdate > 30) {

            // OUTPUTS THE VALUE INTO DIFFERENT CELLS

            // Write the scraped data to the same row
            var outputRow = selectedRange.getRow() + i;

            // Write the scraped data to adjacent columns
            var outputColumn = selectedRange.getColumn() + 1;

            // All values that will be written
            var values = [[
                title,
                status,
                engine,
                gameplay,
                tags,
                moonRating(rating),
                votes,
                updated,
                release,
                dev,
                censored
            ]];

            // Where it will be written
            sheet.getRange(outputRow, outputColumn, 1, values[0].length).setValues(values);
        }

      }

    }
  
  }

  /* --------------------------------------------------------------------
  -- IGNORE DATE RESTRICTION
  ----------------------------------------------------------------------- */

  function forceScrapeData() {
    scrapeData(true);
  }
  
  /* --------------------------------------------------------------------
  -- CREATES AN EXTRA MENU OPTION
  ----------------------------------------------------------------------- */
  
  function onOpen() {
    var ui = SpreadsheetApp.getUi();
    ui.createMenu('Extra Functions')
        .addItem('Scrape Data', 'scrapeData')
        .addItem('Force Scrape', 'forceScrapeData')
        .addToUi();
  }"
mh39pyqP,belajar widget 3,yocky12k,Dart,Tuesday 31st of October 2023 09:54:42 PM CDT,"import 'package:flutter/material.dart';

void main() {
  runApp(const MainApp());
}

class MainApp extends StatelessWidget {
  const MainApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: DefaultTabController(
        length: 3,
        child: Scaffold(
          appBar: AppBar(
            title: Text('Latihan Widget 3'),
            actions: [
              PopupMenuButton(
                onSelected: (value) {
                  //logika ketika menu di tekan
                },
                itemBuilder: (context) {
                  return <PopupMenuEntry>[
                    PopupMenuItem(
                      value: 'menu 1',
                      child: Text('Chats'),
                    ),
                    PopupMenuItem(
                      value: 'menu 2',
                      child: Text('Status'),
                    ),
                    PopupMenuItem(
                      value: 'menu 3',
                      child: Text('Call'),
                    ),
                  ];
                },
              ),
            ],
            bottom: TabBar(
              tabs: [
                Tab(text: 'Chats'),
                Tab(text: 'Status'),
                Tab(text: 'Call'),
              ],
            ),
          ),
          body: TabBarView(
            children: [
              ListView(
                children: [
                  ListTile(
                    leading: Icon(Icons.person),
                    title: Text('AULIA'),
                    onTap: () {
                      //logic ketika di tekan
                    },
                  ),
                  ListTile(
                    leading: Icon(Icons.person),
                    title: Text('PIAN'),
                    onTap: () {
                      //logic ketika di tekan
                    },
                  ),
                  ListTile(
                    leading: Icon(Icons.person),
                    title: Text('DAENG'),
                    onTap: () {
                      //logic ketika di tekan
                    },
                  ),
                  ListTile(
                    leading: Icon(Icons.person),
                    title: Text('RARA'),
                    onTap: () {
                      //logic ketika di tekan
                    },
                  ),
                  ListTile(
                    leading: Icon(Icons.person),
                    title: Text('ZILAN'),
                    onTap: () {
                      //logic ketika di tekan
                    },
                  ),
                  ListTile(
                    leading: Icon(Icons.person),
                    title: Text('JAFAR'),
                    onTap: () {
                      //logic ketika di tekan
                    },
                  ),
                  ListTile(
                    leading: Icon(Icons.person),
                    title: Text('RAHMAT'),
                    onTap: () {
                      //logic ketika di tekan
                    },
                  ),
                  ListTile(
                    leading: Icon(Icons.person),
                    title: Text('INNA'),
                    onTap: () {
                      //logic ketika di tekan
                    },
                  ),
                  ListTile(
                    leading: Icon(Icons.person),
                    title: Text('LESRIANTO'),
                    onTap: () {
                      //logic ketika di tekan
                    },
                  ),
                  ListTile(
                    leading: Icon(Icons.person),
                    title: Text('BAGUS'),
                    onTap: () {
                      //logic ketika di tekan
                    },
                  ),
                  ListTile(
                    leading: Icon(Icons.person),
                    title: Text('SALEM'),
                    onTap: () {
                      //logic ketika di tekan
                    },
                  ),
                  ListTile(
                    leading: Icon(Icons.person),
                    title: Text('HANNY'),
                    onTap: () {
                      //logic ketika di tekan
                    },
                  ),
                  ListTile(
                    leading: Icon(Icons.person),
                    title: Text('TANIA'),
                    onTap: () {
                      //logic ketika di tekan
                    },
                  ),
                  ListTile(
                    leading: Icon(Icons.person),
                    title: Text('AFIF'),
                    onTap: () {
                      //logic ketika di tekan
                    },
                  ),
                  ListTile(
                    leading: Icon(Icons.person),
                    title: Text('RAVI'),
                    onTap: () {
                      //logic ketika di tekan
                    },
                  ),
                ],
              ),
              Container(
                color: Colors.blueGrey,
                child: ListView(
                  children: [
                    ListTile(
                      leading: Icon(
                        Icons.circle,
                        size: 50,
                      ),
                      title: Text('KHOLIZA'),
                      subtitle: Text('1 menit yang lalu'),
                      textColor: Colors.white,
                      iconColor: Colors.white,
                    ),
                    ListTile(
                      leading: Icon(
                        Icons.circle,
                        size: 50,
                      ),
                      title: Text('PIAN'),
                      subtitle: Text('2 menit yang lalu'),
                      textColor: Colors.white,
                      iconColor: Colors.white,
                    ),
                    ListTile(
                      leading: Icon(
                        Icons.circle,
                        size: 50,
                      ),
                      title: Text('RAFLY'),
                      subtitle: Text('4 menit yang lalu'),
                      textColor: Colors.white,
                      iconColor: Colors.white,
                    ),
                    ListTile(
                      leading: Icon(
                        Icons.circle,
                        size: 50,
                      ),
                      title: Text('FAJAR'),
                      subtitle: Text('3 menit yang lalu'),
                      textColor: Colors.white,
                      iconColor: Colors.white,
                    ),
                    ListTile(
                      leading: Icon(
                        Icons.circle,
                        size: 50,
                      ),
                      title: Text('SASA'),
                      subtitle: Text('1 menit yang lalu'),
                      textColor: Colors.white,
                      iconColor: Colors.white,
                    ),
                    ListTile(
                      leading: Icon(
                        Icons.circle,
                        size: 50,
                      ),
                      title: Text('AFIF'),
                      subtitle: Text('1 menit yang lalu'),
                      textColor: Colors.white,
                      iconColor: Colors.white,
                    ),
                    ListTile(
                      leading: Icon(
                        Icons.circle,
                        size: 50,
                      ),
                      title: Text('RAVI'),
                      subtitle: Text('2 menit yang lalu'),
                      textColor: Colors.white,
                      iconColor: Colors.white,
                    ),
                    ListTile(
                      leading: Icon(
                        Icons.circle,
                        size: 50,
                      ),
                      title: Text('AZMI'),
                      subtitle: Text('4 menit yang lalu'),
                      textColor: Colors.white,
                      iconColor: Colors.white,
                    ),
                    ListTile(
                      leading: Icon(
                        Icons.circle,
                        size: 50,
                      ),
                      title: Text('TANIA'),
                      subtitle: Text('3 menit yang lalu'),
                      textColor: Colors.white,
                      iconColor: Colors.white,
                    ),
                    ListTile(
                      leading: Icon(
                        Icons.circle,
                        size: 50,
                      ),
                      title: Text('PUTRI'),
                      subtitle: Text('1 menit yang lalu'),
                      textColor: Colors.white,
                      iconColor: Colors.white,
                    ),
                    ListTile(
                      leading: Icon(
                        Icons.circle,
                        size: 50,
                      ),
                      title: Text('NOCA'),
                      subtitle: Text('1 menit yang lalu'),
                      textColor: Colors.white,
                      iconColor: Colors.white,
                    ),
                    ListTile(
                      leading: Icon(
                        Icons.circle,
                        size: 50,
                      ),
                      title: Text('NOVI'),
                      subtitle: Text('2 menit yang lalu'),
                      textColor: Colors.white,
                      iconColor: Colors.white,
                    ),
                    ListTile(
                      leading: Icon(
                        Icons.circle,
                        size: 50,
                      ),
                      title: Text('FEBRI'),
                      subtitle: Text('4 menit yang lalu'),
                      textColor: Colors.white,
                      iconColor: Colors.white,
                    ),
                    ListTile(
                      leading: Icon(
                        Icons.circle,
                        size: 50,
                      ),
                      title: Text('FEBRIKA'),
                      subtitle: Text('3 menit yang lalu'),
                      textColor: Colors.white,
                      iconColor: Colors.white,
                    ),
                    ListTile(
                      leading: Icon(
                        Icons.circle,
                        size: 50,
                      ),
                      title: Text('AYU'),
                      subtitle: Text('1 menit yang lalu'),
                      textColor: Colors.white,
                      iconColor: Colors.white,
                    ),
                  ],
                ),
              ),
              Center(
                child: Text('Tidak ada riwayat panggilan'),
              )
            ],
          ),
          bottomNavigationBar: Container(
            color: Colors.blue,
            child: TabBar(
              tabs: [
                Tab(icon: Icon(Icons.chat),
                ),
                Tab(icon: Icon(Icons.image),
                ),
                Tab(icon: Icon(Icons.call),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
"
9JkhBpQk,Untitled,retroman,C,Tuesday 31st of October 2023 09:39:50 PM CDT,"in nim can you do:
#include <stdio.h>
#include <ctype.h>
int main(void)
{
char MyCharArray[5]={'a','b','c','d' ,'e'};
char MyUpperCharArray[5]={toupper(MyCharArray[0]),toupper(MyCharArray[1]),toupper(MyCharArray[2]),toupper(MyCharArray[3]),toupper(MyCharArray[4])};                      
    for(int i=0;i<=4;i++){printf(""%c\n"", MyCharArray[i]);}
    for(int j=0;j<=4;j++){printf(""%c\n"", MyUpperCharArray[j]);
    }      return 0;
}

ChatGPT
In Nim, you can achieve the same functionality as your C code, but with some differences in syntax and style. Here's the equivalent Nim code:

nim
Copy code
import strutils

proc main() =
  var myCharArray: array[0..4, char] = ['a', 'b', 'c', 'd', 'e']
  var myUpperCharArray: array[0..4, char] = [toUpper(myCharArray[0]), toUpper(myCharArray[1]), toUpper(myCharArray[2]), toUpper(myCharArray[3]), toUpper(myCharArray[4])]

  for i in 0..4:
    echo myCharArray[i]

  for j in 0..4:
    echo myUpperCharArray[j]

when isMainModule:
  main()
Key differences between the C code and Nim code:

In Nim, we use import strutils to include the module for string utilities, including the toUpper function.

Nim uses proc to define procedures (functions). The main procedure is defined to encapsulate the program's logic.

Nim uses var to declare variables, and it allows you to specify the array's range with array[0..4, char].

Nim uses echo for printing to the console, and when isMainModule is used to check if the code is being run as the main module (similar to the int main in C).

Overall, the logic and functionality remain the same, but the code is adapted to Nim's syntax and conventions.




User
how about:
char MyCharArray[5] = {'a', 'b', 'c', 'd', 'e'};
char *(MyCharArray2)[5] = {&MyCharArray[0], &MyCharArray[1], &MyCharArray[2], &MyCharArray[3], &MyCharArray[4]};
                           
printf(""%s\n"", MyCharArray2[0]);
printf(""%s\n"", MyCharArray2[1]);
printf(""%s\n"", MyCharArray2[2]);
printf(""%s\n"", MyCharArray2[3]);
printf(""%s\n"", MyCharArray2[4]);
ChatGPT
In Nim, you can achieve similar functionality, but Nim handles arrays and pointers differently. Nim uses sequences for array-like structures, and you don't need to use pointers explicitly. Here's the equivalent Nim code for your C code:

nim
Copy code
proc main() =
  var myCharArray: array[0..4, char] = ['a', 'b', 'c', 'd', 'e']
  var myCharArray2: seq[ptr char] = @[addr myCharArray[0], addr myCharArray[1], addr myCharArray[2], addr myCharArray[3], addr myCharArray[4]]

  echo cast[cstring](myCharArray2[0])
  echo cast[cstring](myCharArray2[1])
  echo cast[cstring](myCharArray2[2])
  echo cast[cstring](myCharArray2[3])
  echo cast[cstring](myCharArray2[4])

when isMainModule:
  main()
Key differences between the C code and Nim code:

In Nim, we use seq to represent sequences, and ptr is used to represent pointers. We create a sequence of pointers to characters, seq[ptr char], to simulate the array of pointers in C.

To print the character array as a string, we use cast[cstring] to convert the pointer to a C-style string for printing.

The code structure remains similar, with the main procedure being executed when the program runs as the main module.

The Nim code achieves the same result as your C code while adapting to Nim's data structures and syntax.




User

2 / 2

how about
char *(MyCharArray2)[5] = {&MyCharArray[0], &MyCharArray[1], &MyCharArray[2], &MyCharArray[3], &MyCharArray[4]};
                           
printf(""%c\n"", *MyCharArray2[0]);
printf(""%c\n"", *MyCharArray2[1]);
printf(""%c\n"", *MyCharArray2[2]);
printf(""%c\n"", *MyCharArray2[3]);
printf(""%c\n"", *MyCharArray2[4]);
ChatGPT
The C code you provided uses an array of pointers to char and then dereferences those pointers to print the characters. In Nim, you can achieve similar functionality using ptr char to represent pointers to characters. Here's the equivalent Nim code:

nim
Copy code
proc main() =
  var myCharArray: array[0..4, char] = ['a', 'b', 'c', 'd', 'e']
  var myCharArray2: array[0..4, ptr char] = @[addr myCharArray[0], addr myCharArray[1], addr myCharArray[2], addr myCharArray[3], addr myCharArray[4]]

  echo cast[char](myCharArray2[0]^)
  echo cast[char](myCharArray2[1]^)
  echo cast[char](myCharArray2[2]^)
  echo cast[char](myCharArray2[3]^)
  echo cast[char](myCharArray2[4]^)

when isMainModule:
  main()
Key differences between the C code and Nim code:

In Nim, we use ptr char to represent pointers to characters, and we use ^ to dereference the pointers.

To print the characters, we use cast[char] to cast the dereferenced pointer to a character.

The code structure remains similar, with the main procedure being executed when the program runs as the main module.

The Nim code achieves the same result as your C code while adapting to Nim's data structures and syntax.




User
how about
#include <stdio.h>
#include <ctype.h>
int main(void)
{
char MyCharArray[5] = {'a','b','c','d','e'};
char (*MyCharArray2)[5] = {&MyCharArray};
printf(""%s\n"", (MyCharArray2[0]));
    return 0;
}
ChatGPT
The C code you provided creates an array of characters MyCharArray, and then it creates a pointer to an array of characters MyCharArray2, which points to MyCharArray. It then prints MyCharArray2[0] as a string.

In Nim, you can achieve similar functionality using the same approach, but you'll use Nim's syntax. Here's the equivalent Nim code:

nim
Copy code
proc main() =
  var myCharArray: array[0..4, char] = ['a', 'b', 'c', 'd', 'e']
  var myCharArray2: ptr array[0..4, char] = addr(myCharArray)

  echo cast[cstring](myCharArray2[])

when isMainModule:
  main()
Key points to note in the Nim code:

In Nim, we use ptr to create a pointer to an array of characters.

To access the elements of the array through the pointer, we use myCharArray2[].

To print the array as a string, we use cast[cstring] to convert the pointer to a C-style string for printing.

The Nim code achieves the same result as your C code while adapting to Nim's syntax and data structures."
jbUXxBmC,Strip mines 3x3,Farmer_GPSY,Lua,Tuesday 31st of October 2023 08:43:20 PM CDT,"function checkFuel()
    if turtle.getFuelLevel() < 10 then
        print(""Refueling..."")
        turtle.select(1) -- Coal in slot 1
        turtle.refuel(1) -- Refuel using 1 piece of coal
    end
end

function dig3x3Section()
    turtle.dig() -- Dig forward
    turtle.forward()
    turtle.digUp()
    turtle.digDown()

    -- Dig upper and lower left corners
    turtle.turnLeft()
    turtle.dig()
    turtle.up()
    turtle.dig()
    turtle.down()
    turtle.down()
    turtle.dig()
    turtle.up()

    -- Dig upper and lower right corners
    turtle.turnRight()
    turtle.turnRight()
    turtle.dig()
    turtle.up()
    turtle.dig()
    turtle.down()
    turtle.down()
    turtle.dig()
    turtle.up()

    -- Face forward again
    turtle.turnLeft()
end

function stripMine()
    while true do -- Run indefinitely
        checkFuel()
        dig3x3Section()
    end
end

stripMine()
"
f4z01FRZ,craft,Typhonack,Lua,Tuesday 31st of October 2023 08:40:05 PM CDT,"function checkslots()
    for slot = 1, 16 do
        local item = turtle.getItemDetail(slot)
        if item then
            local itemName = item.name
            if string.find(itemName, ""infusion_crystal"") then
                if slot == 6 then
                    crystalslot = ""full""
                else 
                    turtle.drop()
                    crystalslot = ""empty""
                end
            end
            if string.find(itemName, ""mysticalagriculture"") then
                turtle.dropDown()
            else 
                turtle.turnleft()
                turtle.drop()
                turtle.turnright()
            end
        end
    end
end

function fillslots()
    if crystalslot == ""empty"" then
        turtle.select(6)
        turtle.suck()
    end
    for _, slot in ipairs({2, 5, 7, 10}) do
        turtle.select(slot)
        turtle.suckDown(64)
    end
end
function craft()
    turtle.select(16)
    make = turtle.craft()
    if make == true then
        turtle.dropUp()
    end
end

function slotcheck()
    for _, slot in ipairs({2, 5, 7, 10}) do
        local item = turtle.getItemDetail(slot)
        if item then
            if make == true then
                turtle.dropDown()
            end
        end
    end

    for _, slot in ipairs({2, 5, 7, 10}) do
        local item = turtle.getItemDetail(slot)
        if item then
            foundItem = true
        else
            foundItem = false
        end
    end

    if foundItem == true then
        print(""Start minor craft"")
    end
end

--start function
checkslots()
fillslots()
craft()
slotcheck()"
2Sj3GK09,Untitled,emacuervo,C++,Tuesday 31st of October 2023 08:02:25 PM CDT,"#include <iostream>
#include <clocale>
#include <cstring>
using namespace std;

#include ""parcial2.h""

class Punto1{
    private:
        int numProv;
        char nombreProv[20];
        int provincia;
        bool estado;
    public:
        int getNumProv(){return numProv;}
        const char* getNombreProv(){return nombreProv;}
        int getProvincia(){return provincia;}
        bool getEstado(){return estado;}

        void setNumProv(int n){numProv = n;}
        void setNombreProv(const char* nombre){strcpy(nombreProv, nombre);}
        void setProvinvia(int p){provincia = p;}
        void setEstado(bool e){estado = e;}

        void Cargar(){
            cout<< ""Numero de Provincia: "";
            cin>> numProv;
            cout<< ""Nombre de Provincia: "";
            cin>> nombreProv;
            cout<< ""Provincia del Proveedor: "";
            cin>> provincia;
            cout<< ""Estado: "";
            estado=true;
        }

        void Mostrar(){
            cout<< numProv << endl;
            cout<< nombreProv << endl;
            cout<< provincia << endl;
        }
};

class ArchivoPunto1{
    private:
        char nombre[30];
    public:
        ArchivoPunto1(const char *n){
            strcpy(nombre, n);
        }
        Punto1 leerRegistro(int pos){
            Punto1 reg;
            FILE *p=fopen(nombre,""rb"");
            if(p==NULL){
                return reg;
            }
            fseek(p, pos * sizeof reg, 0);
            fread(&reg, sizeof reg, 1, p);
            fclose(p);
            return reg;
        }
        bool grabarRegistro(Punto1 reg){
            FILE *p;
            p=fopen(nombre, ""ab"");
            if(p==NULL) return false;
            int escribio=fwrite(&reg, sizeof reg,1, p);
            fclose(p);
            return escribio;
        }
};


void punto1(){
    ArchivoProveedores archProv(""proveedores.dat"");
    int cantProv = archProv.contarRegistros();
    Proveedor regProv;

    ArchivoCompras archCompras(""compras.dat"");
    int cantCompras = archCompras.contarRegistros();
    Compra regCompra;

    ArchivoPunto1 archPunto1(""punto1.dat"");
    Punto1 aux;

    for (int x=0; x<cantProv; x++){
        regProv = archProv.leerRegistro(x);
        for (int i=0; i<cantCompras; i++){
            regCompra = archCompras.leerRegistro(i);
            if (regProv.getNumeroProveedor() == regCompra.getNumeroproveedor() && regCompra.getFechaCompra().getAnio() == 2023 && regCompra.getActivo()){
                aux.setNumProv(regProv.getNumeroProveedor());
                aux.setNombreProv(regProv.getNombre());
                aux.setProvinvia(regProv.getProvincia());
                archPunto1.grabarRegistro(aux);
            }
        }
    }
}

void punto2(){
    ArchivoMateriales archMat(""materiales.dat"");
    int cantMat = archMat.contarRegistros();
    Material regMat;

    int vec[6]{};
    int mayor=0;

    for (int x=0; x<cantMat; x++){
        regMat = archMat.leerRegistro(x);
        if (regMat.getActivo()){
            vec[regMat.getTipo()-1]++;
        }
    }

    for (int x=0; x<6; x++){
        if (vec[x] > mayor){
            mayor = vec[x];
        }
    }
    cout<< ""El tipo de material con mas cantidad de materiales es: "" << mayor << endl;
}

void punto3(){
    ArchivoCompras archCompras(""compras.dat"");
    int cantCompras = archCompras.contarRegistros();
    

    int cod;
    bool band=false;

    Compra* vec;

    vec=new Compra[cantCompras];
    if (vec==NULL){
        cout<< ""Error al crear vector"" << endl;
    }

    cout<< ""Ingrese el codigo del tipo de material (entre 1 y 6): "";
    cin>> cod;

    for (int x=0; x<cantCompras; x++){
        vec[x] = archCompras.leerRegistro(x);
        if (vec[x].getActivo() && vec[x].getCodigoMaterial() == cod){
            vec[x].Mostrar();
            band=true;
        }
    }
    if (!band){
        cout<< ""No hay materiales de este tipo: "" << endl;
    }
    delete[]vec;
}

int main (void){

    punto1();
    punto2();
    punto3();


  return 0;
}"
qbuehUFn,DEPORTES,luckyhay,HTML,Tuesday 31st of October 2023 08:01:13 PM CDT,"{
  ""name"": ""DEPORTES"",
  ""author"": ""C.Vidal © 2023"",
  ""image"": ""https://media.giphy.com/media/TjAcxImn74uoDYVxFl/giphy.gif"",
  ""url"": ""https://pastebin.com/edit/qbuehUFn"",
  ""groups"": [
    
	{
      ""name"": ""DEPORTES ACE STREAM"",
      ""image"": ""https://cdn6.aptoide.com/imgs/8/3/c/83cc431eb89915771fe774e9854fce29_fgraphic.png"",
      ""stations"": [
        
        {
           ""name"": ""INFORMACION"",
                        ""image"": ""https://evhelperknapp.lu/wp-content/uploads/2018/09/info.jpeg"",
 ""info"" : ""Para poder ver los Canales tienes que descargar Ace stream (CLICA AQUI)"" ,                      
 ""url"": ""https://ace-stream-media.uptodown.com/android/descargar"",
  ""embed"": ""true"", ""playerType"":""descargar"", ""playInNatPlayer"": ""false"", ""userAgent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, como Gecko ) Cromo/117.0.5938.152 Safari/537.36""                     
                       
        },
        {  

                        ""name"": ""DAZN LaLiga"",
                        ""image"": ""https://i.postimg.cc/9QK5zX40/daznlaliga.png"",
                        ""url"": ""acestream://a3bca895c58d3fc7d5e4259d3d5e3cf0291d1914"",
                        ""info"" : ""Puede tardar unos segundos ten paciencia😀""
        },
        {
                        ""name"": ""DAZN F1 720P"",
                        ""image"": ""https://i.postimg.cc/d18HfckZ/daznf1.png"",
                        ""url"": ""acestream://e1fcad9de0c782c157fde6377805c58297ab65c2"",
                        ""info"" : ""Puede tardar unos segundos ten paciencia😀""

       },
        {
                        ""name"": ""DAZN F1 1080P"",
                        ""image"": ""https://i.postimg.cc/d18HfckZ/daznf1.png"",
                        ""url"": ""acestream://9dad717d99b29a05672166258a77c25b57713dd5"",
                        ""info"" : ""Puede tardar unos segundos ten paciencia😀""

       },
        {
                        ""name"": ""LaLiga Hypermotion 1080p"",
                        ""image"": ""https://i.postimg.cc/htb5kN6y/liga-hypermotion.png"",
                        ""url"": ""acestream://4c46585214b23b1d802ef2168060c7649a3894cf"", 
                        ""info"" : ""Puede tardar unos segundos ten paciencia😀""
       

      },
        {
                        ""name"": ""M Vamos 1080p"",
                        ""image"": ""https://i.postimg.cc/fLGkh8b5/vamos.png"",
                        ""url"": ""acestream://859bb6295b8d0f224224d3063d9db7cdeca03122"",
                        ""info"" : ""Puede tardar unos segundos ten paciencia😀""


    },
        {
                        ""name"": ""M+ Deportes 1080p"",
                        ""image"": ""https://img.sport-tv-guide.live/images/tv-station-movistar-deportes-364.png"",
                        ""url"": ""acestream://d00223931b1854163e24c5c22475015d7d45c112"",
                        ""info"" : ""Puede tardar unos segundos ten paciencia😀""

   },
        {
                        ""name"": ""EuroSport 1 1080p"",
                        ""image"": ""https://img.sport-tv-guide.live/images/tv-station-es-eurosport-1-615.png"",
                        ""url"": ""acestream://5e4cd48c79f991fcbee2de8b9d30c4b16de3b952"",
                        ""info"" : ""Puede tardar unos segundos ten paciencia😀""

   },
        {
                        ""name"": ""EuroSport 2 1080p"",
                        ""image"": ""https://img.sport-tv-guide.live/images/tv-station-es-eurosport-2-616.png"",
                        ""url"": ""acestream://c373da9e901d414b7384e671112e64d5a2310c29"",
                        ""info"" : ""Puede tardar unos segundos ten paciencia😀""

  },

       ]
    },
    {
      ""name"": ""En obras"",
      ""image"": ""https://media.giphy.com/media/OkgYSqcaCACgTNojsd/giphy.gif"",
      ""stations"": [
        
                {
                        ""name"": ""Canal 3"",
                        ""image"": ""http://www.lapampa.gov.ar/images/stories/Imagenes/Ima_home/canal_3_09-02.jpg"",
                        ""url"": ""http://iphone-streaming.ustream.tv/uhls/17248101/streams/live/iphone/playlist.m3u8""
                },
				{
                        ""name"": ""Canal 4"",
                        ""image"": ""http://www.canal4jujuy.com.ar/img/logo.jpg"",
                        ""url"": ""http://www.janjuaplayer.com/embedplayer/discoverysusy/1/600/400"",
                        ""referer"": ""http://tvpor-internet.com/discovery-latino-en-vivo.html"",
                        ""isHost"": ""true""
                },
                
       ]
    },
    
    
    
		
		
		
                ]
}"
3JmdLX9u,Untitled,Denwer,SQL,Tuesday 31st of October 2023 07:53:04 PM CDT,"DELETE FROM [dbo].[Chat]
WHERE [ID] IN 
(
	SELECT * FROM 
	(
		SELECT [ID_Chat], COUNT(*) as chatMessageCount FROM [dbo].[Chat] as chat
		LEFT JOIN [dbo].[ChatMessage] as chatMessage
			ON chatMessage.ID_Chat = chat.ID
		GROUP BY [ID_Chat]
	) as chatWithCount
	WHERE chatWithCount.chatMessageCount = 0
)"
qyXSEHrX,Untitled,IgorLytkin,Bash,Tuesday 31st of October 2023 07:33:18 PM CDT,"#
#<?php die('Forbidden.'); ?>
#Date: 2023-10-31 11:52:28 UTC
#Software: Joomla! 4.3.4 Stable [ Bora ] 22-August-2023 16:00 GMT

#Fields: datetime	priority clientip	category	message
2023-10-31T11:52:28+00:00	INFO 37.23.0.129	update	Начало установки новой версии
2023-10-31T11:52:41+00:00	INFO 37.23.0.129	update	Завершение установки
2023-10-31T11:52:41+00:00	INFO 37.23.0.129	update	Начало обновления SQL
2023-10-31T11:52:41+00:00	INFO 37.23.0.129	update	Версия базы данных (#__schemas): 4.3.2-2023-05-20
2023-10-31T11:52:41+00:00	INFO 37.23.0.129	update	Выполнен запрос из файла 4.4.0-2023-05-08: INSERT INTO `#__extensions` (`package_id`, `name`, `type`, `element`, `folder`, 
2023-10-31T11:52:41+00:00	INFO 37.23.0.129	update	Выполнен запрос из файла 4.4.0-2023-09-13: INSERT INTO `#__extensions` (`package_id`, `name`, `type`, `element`, `folder`, 
2023-10-31T11:52:41+00:00	INFO 37.23.0.129	update	Завершение обновления SQL
2023-10-31T11:52:41+00:00	INFO 37.23.0.129	update	Удаление устаревших файлов и каталогов
2023-10-31T11:52:41+00:00	WARNING 37.23.0.129	jerror	Не удалось обновить кэш манифеста: Расширение plg_multifactorauth_email не установлено.
2023-10-31T11:52:41+00:00	ERROR 37.23.0.129	update	An error has occurred while running ""JoomlaInstallerScript::updateManifestCaches"". Code: 0. Message: Error on updating manifest cache: (type, element, folder, client) = (plugin, email, plg_multifactorauth_email, 0).
2023-10-31T11:52:41+00:00	WARNING 37.23.0.129	jerror	Не удалось обновить кэш манифеста: Расширение plg_multifactorauth_fixed не установлено.
2023-10-31T11:52:41+00:00	ERROR 37.23.0.129	update	An error has occurred while running ""JoomlaInstallerScript::updateManifestCaches"". Code: 0. Message: Error on updating manifest cache: (type, element, folder, client) = (plugin, fixed, plg_multifactorauth_fixed, 0).
2023-10-31T11:52:41+00:00	WARNING 37.23.0.129	jerror	Не удалось обновить кэш манифеста: Расширение plg_multifactorauth_totp не установлено.
2023-10-31T11:52:41+00:00	ERROR 37.23.0.129	update	An error has occurred while running ""JoomlaInstallerScript::updateManifestCaches"". Code: 0. Message: Error on updating manifest cache: (type, element, folder, client) = (plugin, totp, plg_multifactorauth_totp, 0).
2023-10-31T11:52:41+00:00	WARNING 37.23.0.129	jerror	Не удалось обновить кэш манифеста: Расширение plg_multifactorauth_webauthn не установлено.
2023-10-31T11:52:41+00:00	ERROR 37.23.0.129	update	An error has occurred while running ""JoomlaInstallerScript::updateManifestCaches"". Code: 0. Message: Error on updating manifest cache: (type, element, folder, client) = (plugin, webauthn, plg_multifactorauth_webauthn, 0).
2023-10-31T11:52:41+00:00	WARNING 37.23.0.129	jerror	Не удалось обновить кэш манифеста: Расширение plg_multifactorauth_yubikey не установлено.
2023-10-31T11:52:41+00:00	ERROR 37.23.0.129	update	An error has occurred while running ""JoomlaInstallerScript::updateManifestCaches"". Code: 0. Message: Error on updating manifest cache: (type, element, folder, client) = (plugin, yubikey, plg_multifactorauth_yubikey, 0).
2023-10-31T11:52:41+00:00	WARNING 37.23.0.129	jerror	Не удалось обновить кэш манифеста: Расширение plg_system_shortcut не установлено.
2023-10-31T11:52:41+00:00	ERROR 37.23.0.129	update	An error has occurred while running ""JoomlaInstallerScript::updateManifestCaches"". Code: 0. Message: Error on updating manifest cache: (type, element, folder, client) = (plugin, shortcut, plg_system_shortcut, 0).
2023-10-31T11:52:44+00:00	INFO 37.23.0.129	update	Очистка после установки
2023-10-31T11:52:44+00:00	INFO 37.23.0.129	update	Обновление до версии 4.4.0 завершено"
LWG0MfmM,dortoisv's Data,azimuths,JSON,Tuesday 31st of October 2023 07:22:19 PM CDT,"{""Stats"":{""Key5"":{""ObjectName"":""Key5"",""ObjectClass"":""StringValue"",""ObjectValue"":""5""},""MaxRank"":{""ObjectName"":""MaxRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""24""},""mapmove1"":{""ObjectName"":""mapmove1"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TrainingEXP"":{""ObjectName"":""TrainingEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""-5""},""Key12"":{""ObjectName"":""Key12"",""ObjectClass"":""StringValue"",""ObjectValue"":""=""},""Blind"":{""ObjectName"":""Blind"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""CanRank"":{""ObjectName"":""CanRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""TailedBeastLevel"":{""ObjectName"":""TailedBeastLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""9""},""CombatEXP"":{""ObjectName"":""CombatEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""318""},""Personality"":{""ObjectName"":""Personality"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""GripCount"":{""ObjectName"":""GripCount"",""ObjectClass"":""IntValue"",""ObjectValue"":""8""},""Marking"":{""ObjectName"":""Marking"",""ObjectClass"":""IntValue"",""ObjectValue"":""69""},""SkinColor"":{""ObjectName"":""SkinColor"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""HideName"":{""ObjectName"":""HideName"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot="":{""ObjectName"":""Slot="",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Slot11"":{""ObjectName"":""Slot11"",""ObjectClass"":""StringValue"",""ObjectValue"":""Liger Bomb""},""MSAbility1"":{""ObjectName"":""MSAbility1"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""Key8"":{""ObjectName"":""Key8"",""ObjectClass"":""StringValue"",""ObjectValue"":""8""},""LINDAMINISTARTUP"":{""ObjectName"":""LINDAMINISTARTUP"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""Slot4"":{""ObjectName"":""Slot4"",""ObjectClass"":""StringValue"",""ObjectValue"":""Dosaku""},""Slot9"":{""ObjectName"":""Slot9"",""ObjectClass"":""StringValue"",""ObjectValue"":""Shadow Clone""},""Version"":{""ObjectName"":""Version"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""DateRecord"":{""ObjectName"":""DateRecord"",""ObjectClass"":""IntValue"",""ObjectValue"":""2539""},""Key4"":{""ObjectName"":""Key4"",""ObjectClass"":""StringValue"",""ObjectValue"":""4""},""CurseMarkLevel"":{""ObjectName"":""CurseMarkLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key2"":{""ObjectName"":""Key2"",""ObjectClass"":""StringValue"",""ObjectValue"":""2""},""Genjutsu"":{""ObjectName"":""Genjutsu"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SwordSave"":{""ObjectName"":""SwordSave"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuXP"":{""ObjectName"":""BijuuXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SeenDeaths"":{""ObjectName"":""SeenDeaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BonusSkillPoints"":{""ObjectName"":""BonusSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorB"":{""ObjectName"":""CColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosY"":{""ObjectName"":""PosY"",""ObjectClass"":""IntValue"",""ObjectValue"":""1052""},""SPR"":{""ObjectName"":""SPR"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""BijuuConvo"":{""ObjectName"":""BijuuConvo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""jincooldown"":{""ObjectName"":""jincooldown"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Ken"":{""ObjectName"":""Ken"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Scar"":{""ObjectName"":""Scar"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot12"":{""ObjectName"":""Slot12"",""ObjectClass"":""StringValue"",""ObjectValue"":""Jin Smack""},""Slot8"":{""ObjectName"":""Slot8"",""ObjectClass"":""StringValue"",""ObjectValue"":""Jin Smash""},""EyeColorR"":{""ObjectName"":""EyeColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""127""},""HairColorG"":{""ObjectName"":""HairColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""67""},""RaidCD"":{""ObjectName"":""RaidCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot6"":{""ObjectName"":""Slot6"",""ObjectClass"":""StringValue"",""ObjectValue"":""Primary Lotus""},""HairColorB"":{""ObjectName"":""HairColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""67""},""Gender"":{""ObjectName"":""Gender"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""MSAbility2"":{""ObjectName"":""MSAbility2"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""Kids"":{""ObjectName"":""Kids"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryWep"":{""ObjectName"":""SecondaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""WireKunai""},""PosZ"":{""ObjectName"":""PosZ"",""ObjectClass"":""IntValue"",""ObjectValue"":""2930""},""UnlockedCloak"":{""ObjectName"":""UnlockedCloak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CloakTime"":{""ObjectName"":""CloakTime"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuRelation"":{""ObjectName"":""BijuuRelation"",""ObjectClass"":""IntValue"",""ObjectValue"":""150""},""Prestige"":{""ObjectName"":""Prestige"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot0"":{""ObjectName"":""Slot0"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TailedBeastMastered"":{""ObjectName"":""TailedBeastMastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Mangekyo"":{""ObjectName"":""Mangekyo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastGripped"":{""ObjectName"":""LastGripped"",""ObjectClass"":""IntValue"",""ObjectValue"":""181701782""},""LastAge"":{""ObjectName"":""LastAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""1698788036""},""Key11"":{""ObjectName"":""Key11"",""ObjectClass"":""StringValue"",""ObjectValue"":""c""},""AwakenCD"":{""ObjectName"":""AwakenCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastStomach"":{""ObjectName"":""LastStomach"",""ObjectClass"":""IntValue"",""ObjectValue"":""126""},""ChakraArmorRGB"":{""ObjectName"":""ChakraArmorRGB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Mastered"":{""ObjectName"":""Mastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""WeaveSpeed"":{""ObjectName"":""WeaveSpeed"",""ObjectClass"":""IntValue"",""ObjectValue"":""20""},""WipeLog"":{""ObjectName"":""WipeLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot10"":{""ObjectName"":""Slot10"",""ObjectClass"":""StringValue"",""ObjectValue"":""Knee Strike""},""Key9"":{""ObjectName"":""Key9"",""ObjectClass"":""StringValue"",""ObjectValue"":""9""},""Slot5"":{""ObjectName"":""Slot5"",""ObjectClass"":""StringValue"",""ObjectValue"":""Demon Flip""},""Slot7"":{""ObjectName"":""Slot7"",""ObjectClass"":""StringValue"",""ObjectValue"":""Lariat""},""RESTORE"":{""ObjectName"":""RESTORE"",""ObjectClass"":""IntValue"",""ObjectValue"":""561""},""TailedBeast"":{""ObjectName"":""TailedBeast"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""GrandParentID"":{""ObjectName"":""GrandParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TimesRerolled"":{""ObjectName"":""TimesRerolled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurseMarkEXP"":{""ObjectName"":""CurseMarkEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HBChoice"":{""ObjectName"":""HBChoice"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""WeaponSave"":{""ObjectName"":""WeaponSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""Tanto""},""PrimaryWep"":{""ObjectName"":""PrimaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""OriginalVillage"":{""ObjectName"":""OriginalVillage"",""ObjectClass"":""IntValue"",""ObjectValue"":""9""},""BijuuSealed"":{""ObjectName"":""BijuuSealed"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Name"":{""ObjectName"":""Name"",""ObjectClass"":""StringValue"",""ObjectValue"":""UnoTheActivist 🛸""},""HairColorR"":{""ObjectName"":""HairColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""72""},""Key3"":{""ObjectName"":""Key3"",""ObjectClass"":""StringValue"",""ObjectValue"":""3""},""LastChakra"":{""ObjectName"":""LastChakra"",""ObjectClass"":""IntValue"",""ObjectValue"":""1195""},""MaxAge"":{""ObjectName"":""MaxAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ItemSave"":{""ObjectName"":""ItemSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""Flak""},""RU"":{""ObjectName"":""RU"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""RP"":{""ObjectName"":""RP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""logcheck"":{""ObjectName"":""logcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot-"":{""ObjectName"":""Slot-"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Key1"":{""ObjectName"":""Key1"",""ObjectClass"":""StringValue"",""ObjectValue"":""1""},""FamilyID"":{""ObjectName"":""FamilyID"",""ObjectClass"":""StringValue"",""ObjectValue"":""Dort(40)1792620""},""startnewlife"":{""ObjectName"":""startnewlife"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HandsignTraining"":{""ObjectName"":""HandsignTraining"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot3"":{""ObjectName"":""Slot3"",""ObjectClass"":""StringValue"",""ObjectValue"":""Leaf Rising Wind""},""ToggleAccessories"":{""ObjectName"":""ToggleAccessories"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Blindness"":{""ObjectName"":""Blindness"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""SecondaryAmmo"":{""ObjectName"":""SecondaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""24""},""PDLog"":{""ObjectName"":""PDLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BerserkTimes"":{""ObjectName"":""BerserkTimes"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SpentSkillPoints"":{""ObjectName"":""SpentSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""-23""},""AnbuLog"":{""ObjectName"":""AnbuLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key6"":{""ObjectName"":""Key6"",""ObjectClass"":""StringValue"",""ObjectValue"":""6""},""Deaths"":{""ObjectName"":""Deaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""EyeColorB"":{""ObjectName"":""EyeColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""101""},""Slot1"":{""ObjectName"":""Slot1"",""ObjectClass"":""StringValue"",""ObjectValue"":""Tanto""},""AgeLimit"":{""ObjectName"":""AgeLimit"",""ObjectClass"":""IntValue"",""ObjectValue"":""2400""},""Parentq"":{""ObjectName"":""Parentq"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BDAYS"":{""ObjectName"":""BDAYS"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""Slot2"":{""ObjectName"":""Slot2"",""ObjectClass"":""StringValue"",""ObjectValue"":""Leaf Whirlwind""},""KPos"":{""ObjectName"":""KPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Influence"":{""ObjectName"":""Influence"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Elo"":{""ObjectName"":""Elo"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""DefaultMouth"":{""ObjectName"":""DefaultMouth"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LeftEye"":{""ObjectName"":""LeftEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""ResetPos"":{""ObjectName"":""ResetPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SkillPoints"":{""ObjectName"":""SkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""25""},""Rank"":{""ObjectName"":""Rank"",""ObjectClass"":""IntValue"",""ObjectValue"":""24""},""PrimaryCN"":{""ObjectName"":""PrimaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""LastKilledUser"":{""ObjectName"":""LastKilledUser"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Trauma"":{""ObjectName"":""Trauma"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MissionSuccess"":{""ObjectName"":""MissionSuccess"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurrentWep"":{""ObjectName"":""CurrentWep"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""RecentTrainings"":{""ObjectName"":""RecentTrainings"",""ObjectClass"":""StringValue"",""ObjectValue"":""[\""Kunai Training\"",\""Pushup Training\"",\""Kunai Training\""]""},""EyeColorG"":{""ObjectName"":""EyeColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""42""},""LastHealth"":{""ObjectName"":""LastHealth"",""ObjectClass"":""IntValue"",""ObjectValue"":""469""},""RyoRES"":{""ObjectName"":""RyoRES"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MissionEXP"":{""ObjectName"":""MissionEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""137""},""Ryo"":{""ObjectName"":""Ryo"",""ObjectClass"":""IntValue"",""ObjectValue"":""79""},""CColorR"":{""ObjectName"":""CColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key7"":{""ObjectName"":""Key7"",""ObjectClass"":""StringValue"",""ObjectValue"":""7""},""IsExiled"":{""ObjectName"":""IsExiled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""RightEye"":{""ObjectName"":""RightEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""Bank"":{""ObjectName"":""Bank"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosX"":{""ObjectName"":""PosX"",""ObjectClass"":""IntValue"",""ObjectValue"":""305""},""ParentID"":{""ObjectName"":""ParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TailedBeastEXP"":{""ObjectName"":""TailedBeastEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorG"":{""ObjectName"":""CColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key10"":{""ObjectName"":""Key10"",""ObjectClass"":""StringValue"",""ObjectValue"":""e""},""berserkcheck"":{""ObjectName"":""berserkcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Age"":{""ObjectName"":""Age"",""ObjectClass"":""IntValue"",""ObjectValue"":""10""},""MaxTails"":{""ObjectName"":""MaxTails"",""ObjectClass"":""IntValue"",""ObjectValue"":""8""},""Village"":{""ObjectName"":""Village"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""bald"":{""ObjectName"":""bald"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryCN"":{""ObjectName"":""SecondaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""PrimaryAmmo"":{""ObjectName"":""PrimaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""33""},""KillStreak"":{""ObjectName"":""KillStreak"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""kek"":{""ObjectName"":""kek"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""Title"":{""ObjectName"":""Title"",""ObjectClass"":""StringValue"",""ObjectValue"":""Advisor""},""REFRESH"":{""ObjectName"":""REFRESH"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""}},""Skilltree"":{""Dosaku"":{""ObjectName"":""Dosaku"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Lightning Cloak 2"":{""ObjectName"":""Lightning Cloak 2"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Jin Smack"":{""ObjectName"":""Jin Smack"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""High Powered Chop"":{""ObjectName"":""High Powered Chop"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Demon Flip"":{""ObjectName"":""Demon Flip"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Lariat"":{""ObjectName"":""Lariat"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Shadow Clone Upgrade 1"":{""ObjectName"":""Shadow Clone Upgrade 1"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Dynamic Entry"":{""ObjectName"":""Dynamic Entry"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Leaf Whirlwind"":{""ObjectName"":""Leaf Whirlwind"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Tailed Beast Bomb"":{""ObjectName"":""Tailed Beast Bomb"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Knee Strike"":{""ObjectName"":""Knee Strike"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Clone Jutsu"":{""ObjectName"":""Clone Jutsu"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Jin Smash"":{""ObjectName"":""Jin Smash"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Liger Bomb"":{""ObjectName"":""Liger Bomb"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Substitution"":{""ObjectName"":""Substitution"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""1000 Years of Death"":{""ObjectName"":""1000 Years of Death"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Jin"":{""ObjectName"":""Jin"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Shadow Clone"":{""ObjectName"":""Shadow Clone"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Leaf Rising Wind"":{""ObjectName"":""Leaf Rising Wind"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Shadow Clone Upgrade 2"":{""ObjectName"":""Shadow Clone Upgrade 2"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Eight Gates"":{""ObjectName"":""Eight Gates"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Lightning Cloak"":{""ObjectName"":""Lightning Cloak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Genjutsu Release"":{""ObjectName"":""Genjutsu Release"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Shadow Clone Upgrade 3"":{""ObjectName"":""Shadow Clone Upgrade 3"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Primary Lotus"":{""ObjectName"":""Primary Lotus"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""}},""Copy"":[]}"
7PM7fEmf,2023-10-31_stats.json,rdp_snitch,JSON,Tuesday 31st of October 2023 07:18:16 PM CDT,"{
  ""ip"": {
    ""62.122.184.166"": 24,
    ""62.122.184.168"": 12,
    ""111.61.253.55"": 6,
    ""62.204.41.146"": 9,
    ""205.210.31.162"": 9,
    ""141.98.11.128"": 18,
    ""212.70.149.146"": 15,
    ""185.170.144.3"": 6,
    ""141.98.81.34"": 6,
    ""87.251.75.145"": 6,
    ""198.235.24.244"": 9,
    ""152.89.198.133"": 12,
    ""78.128.114.2"": 6,
    ""38.62.230.230"": 3,
    ""87.251.75.120"": 3,
    ""194.187.176.158"": 3,
    ""152.32.197.159"": 3,
    ""106.116.169.71"": 3,
    ""198.235.24.108"": 9,
    ""58.218.204.183"": 6,
    ""62.122.184.165"": 6,
    ""136.144.35.205"": 3,
    ""172.188.48.214"": 3,
    ""198.235.24.54"": 9,
    ""147.78.47.10"": 3
  },
  ""asn"": {
    ""AS57523"": 54,
    ""AS24547"": 6,
    ""AS59425"": 9,
    ""AS396982"": 36,
    ""AS209605"": 18,
    ""AS204428"": 15,
    ""AS197414"": 6,
    ""AS209588"": 9,
    ""AS208091"": 9,
    ""AS50360"": 6,
    ""AS55286"": 3,
    ""AS208843"": 3,
    ""AS135377"": 3,
    ""AS4134"": 9,
    ""AS396356"": 3,
    ""AS8075"": 3
  },
  ""isp"": {
    ""Chang Way Technologies Co. Limited"": 54,
    ""China Mobile communications corporation"": 6,
    ""Horizon LLC"": 9,
    ""Google LLC"": 36,
    ""UAB Host Baltic"": 18,
    ""SS-Net"": 15,
    ""Xhost Internet Solutions LP"": 15,
    ""Flyservers S.A."": 9,
    ""Tamatiya EOOD"": 6,
    ""B2 Net Solutions Inc."": 3,
    ""Alpha Strike Labs GmbH"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Chinanet"": 9,
    ""Latitude.sh"": 3,
    ""Microsoft"": 3
  },
  ""org"": {
    ""Chang Way Technologies Co. Limited"": 42,
    ""China Mobile"": 6,
    ""Horizon LLC"": 9,
    ""Palo Alto Networks, Inc"": 36,
    ""Unknown"": 18,
    ""4Media Ltd"": 15,
    ""Xhostis"": 6,
    ""Flyservers S.A"": 9,
    ""Xhost Internet Solutions"": 9,
    ""Starcrecium Limited"": 12,
    ""Tamatiya EOOD"": 6,
    ""ServerMania Inc"": 3,
    ""Alpha Strike Labs GmbH"": 3,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Chinanet HE"": 3,
    ""Chinanet JS"": 6,
    ""Panq B.V"": 3,
    ""Microsoft Azure Cloud (southeastasia)"": 3
  },
  ""regionName"": {
    ""Moscow"": 63,
    ""Hebei"": 9,
    ""California"": 36,
    ""Kaunas"": 18,
    ""Plovdiv"": 21,
    ""North Holland"": 9,
    ""Drenthe"": 6,
    ""England"": 9,
    ""New Jersey"": 6,
    ""Land Berlin"": 3,
    ""Sao Paulo"": 3,
    ""Jiangsu"": 6,
    ""Central Singapore"": 3
  },
  ""country"": {
    ""Russia"": 63,
    ""China"": 15,
    ""United States"": 42,
    ""Lithuania"": 18,
    ""Bulgaria"": 21,
    ""Netherlands"": 15,
    ""United Kingdom"": 9,
    ""Germany"": 3,
    ""Brazil"": 3,
    ""Singapore"": 3
  },
  ""account"": {
    ""Domain"": 60,
    ""(empty)"": 12,
    ""Test"": 3,
    ""cOiXFBmjw"": 3,
    ""GGvsNF"": 3,
    ""ZgmpkM"": 3,
    ""Administr"": 63,
    ""QmVAVMocZ"": 3,
    ""zrHbii"": 3,
    ""ZDGDbZ"": 3,
    ""hello"": 12,
    ""user"": 3,
    ""Administrator"": 3,
    ""aaMFIYtwn"": 3,
    ""drcDfD"": 3,
    ""fEqSio"": 3,
    ""luCzpczrO"": 3,
    ""sHoaMz"": 3,
    ""VfQzlh"": 3
  },
  ""keyboard"": {
    ""Unknown"": 192
  },
  ""client_build"": {
    ""Unknown"": 192
  },
  ""client_name"": {
    ""Unknown"": 192
  },
  ""ip_type"": {
    ""Unknown"": 114,
    ""mobile"": 6,
    ""hosting"": 48,
    ""proxy"": 21,
    ""hosting & proxy"": 3
  }
}"
mk9y3EzP,2023-10-31_stats.json,rdp_snitch,JSON,Tuesday 31st of October 2023 07:16:16 PM CDT,"{
  ""ip"": {
    ""62.122.184.166"": 16,
    ""62.122.184.168"": 8,
    ""111.61.253.55"": 4,
    ""62.204.41.146"": 6,
    ""205.210.31.162"": 6,
    ""141.98.11.128"": 12,
    ""212.70.149.146"": 10,
    ""185.170.144.3"": 4,
    ""141.98.81.34"": 4,
    ""87.251.75.145"": 4,
    ""198.235.24.244"": 6,
    ""152.89.198.133"": 8,
    ""78.128.114.2"": 4,
    ""38.62.230.230"": 2,
    ""87.251.75.120"": 2,
    ""194.187.176.158"": 2,
    ""152.32.197.159"": 2,
    ""106.116.169.71"": 2,
    ""198.235.24.108"": 6,
    ""58.218.204.183"": 4,
    ""62.122.184.165"": 4,
    ""136.144.35.205"": 2,
    ""172.188.48.214"": 2,
    ""198.235.24.54"": 6,
    ""147.78.47.10"": 2
  },
  ""asn"": {
    ""AS57523"": 36,
    ""AS24547"": 4,
    ""AS59425"": 6,
    ""AS396982"": 24,
    ""AS209605"": 12,
    ""AS204428"": 10,
    ""AS197414"": 4,
    ""AS209588"": 6,
    ""AS208091"": 6,
    ""AS50360"": 4,
    ""AS55286"": 2,
    ""AS208843"": 2,
    ""AS135377"": 2,
    ""AS4134"": 6,
    ""AS396356"": 2,
    ""AS8075"": 2
  },
  ""isp"": {
    ""Chang Way Technologies Co. Limited"": 36,
    ""China Mobile communications corporation"": 4,
    ""Horizon LLC"": 6,
    ""Google LLC"": 24,
    ""UAB Host Baltic"": 12,
    ""SS-Net"": 10,
    ""Xhost Internet Solutions LP"": 10,
    ""Flyservers S.A."": 6,
    ""Tamatiya EOOD"": 4,
    ""B2 Net Solutions Inc."": 2,
    ""Alpha Strike Labs GmbH"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Chinanet"": 6,
    ""Latitude.sh"": 2,
    ""Microsoft"": 2
  },
  ""org"": {
    ""Chang Way Technologies Co. Limited"": 28,
    ""China Mobile"": 4,
    ""Horizon LLC"": 6,
    ""Palo Alto Networks, Inc"": 24,
    ""Unknown"": 12,
    ""4Media Ltd"": 10,
    ""Xhostis"": 4,
    ""Flyservers S.A"": 6,
    ""Xhost Internet Solutions"": 6,
    ""Starcrecium Limited"": 8,
    ""Tamatiya EOOD"": 4,
    ""ServerMania Inc"": 2,
    ""Alpha Strike Labs GmbH"": 2,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Chinanet HE"": 2,
    ""Chinanet JS"": 4,
    ""Panq B.V"": 2,
    ""Microsoft Azure Cloud (southeastasia)"": 2
  },
  ""regionName"": {
    ""Moscow"": 42,
    ""Hebei"": 6,
    ""California"": 24,
    ""Kaunas"": 12,
    ""Plovdiv"": 14,
    ""North Holland"": 6,
    ""Drenthe"": 4,
    ""England"": 6,
    ""New Jersey"": 4,
    ""Land Berlin"": 2,
    ""Sao Paulo"": 2,
    ""Jiangsu"": 4,
    ""Central Singapore"": 2
  },
  ""country"": {
    ""Russia"": 42,
    ""China"": 10,
    ""United States"": 28,
    ""Lithuania"": 12,
    ""Bulgaria"": 14,
    ""Netherlands"": 10,
    ""United Kingdom"": 6,
    ""Germany"": 2,
    ""Brazil"": 2,
    ""Singapore"": 2
  },
  ""account"": {
    ""Domain"": 40,
    ""(empty)"": 8,
    ""Test"": 2,
    ""cOiXFBmjw"": 2,
    ""GGvsNF"": 2,
    ""ZgmpkM"": 2,
    ""Administr"": 42,
    ""QmVAVMocZ"": 2,
    ""zrHbii"": 2,
    ""ZDGDbZ"": 2,
    ""hello"": 8,
    ""user"": 2,
    ""Administrator"": 2,
    ""aaMFIYtwn"": 2,
    ""drcDfD"": 2,
    ""fEqSio"": 2,
    ""luCzpczrO"": 2,
    ""sHoaMz"": 2,
    ""VfQzlh"": 2
  },
  ""keyboard"": {
    ""Unknown"": 128
  },
  ""client_build"": {
    ""Unknown"": 128
  },
  ""client_name"": {
    ""Unknown"": 128
  },
  ""ip_type"": {
    ""Unknown"": 76,
    ""mobile"": 4,
    ""hosting"": 32,
    ""proxy"": 14,
    ""hosting & proxy"": 2
  }
}"
rBGPCRNA,2023-10-31_stats.json,rdp_snitch,JSON,Tuesday 31st of October 2023 07:15:09 PM CDT,"{
  ""ip"": {
    ""62.122.184.166"": 8,
    ""62.122.184.168"": 4,
    ""111.61.253.55"": 2,
    ""62.204.41.146"": 3,
    ""205.210.31.162"": 3,
    ""141.98.11.128"": 6,
    ""212.70.149.146"": 5,
    ""185.170.144.3"": 2,
    ""141.98.81.34"": 2,
    ""87.251.75.145"": 2,
    ""198.235.24.244"": 3,
    ""152.89.198.133"": 4,
    ""78.128.114.2"": 2,
    ""38.62.230.230"": 1,
    ""87.251.75.120"": 1,
    ""194.187.176.158"": 1,
    ""152.32.197.159"": 1,
    ""106.116.169.71"": 1,
    ""198.235.24.108"": 3,
    ""58.218.204.183"": 2,
    ""62.122.184.165"": 2,
    ""136.144.35.205"": 1,
    ""172.188.48.214"": 1,
    ""198.235.24.54"": 3,
    ""147.78.47.10"": 1
  },
  ""asn"": {
    ""AS57523"": 18,
    ""AS24547"": 2,
    ""AS59425"": 3,
    ""AS396982"": 12,
    ""AS209605"": 6,
    ""AS204428"": 5,
    ""AS197414"": 2,
    ""AS209588"": 3,
    ""AS208091"": 3,
    ""AS50360"": 2,
    ""AS55286"": 1,
    ""AS208843"": 1,
    ""AS135377"": 1,
    ""AS4134"": 3,
    ""AS396356"": 1,
    ""AS8075"": 1
  },
  ""isp"": {
    ""Chang Way Technologies Co. Limited"": 18,
    ""China Mobile communications corporation"": 2,
    ""Horizon LLC"": 3,
    ""Google LLC"": 12,
    ""UAB Host Baltic"": 6,
    ""SS-Net"": 5,
    ""Xhost Internet Solutions LP"": 5,
    ""Flyservers S.A."": 3,
    ""Tamatiya EOOD"": 2,
    ""B2 Net Solutions Inc."": 1,
    ""Alpha Strike Labs GmbH"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Chinanet"": 3,
    ""Latitude.sh"": 1,
    ""Microsoft"": 1
  },
  ""org"": {
    ""Chang Way Technologies Co. Limited"": 14,
    ""China Mobile"": 2,
    ""Horizon LLC"": 3,
    ""Palo Alto Networks, Inc"": 12,
    ""Unknown"": 6,
    ""4Media Ltd"": 5,
    ""Xhostis"": 2,
    ""Flyservers S.A"": 3,
    ""Xhost Internet Solutions"": 3,
    ""Starcrecium Limited"": 4,
    ""Tamatiya EOOD"": 2,
    ""ServerMania Inc"": 1,
    ""Alpha Strike Labs GmbH"": 1,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Chinanet HE"": 1,
    ""Chinanet JS"": 2,
    ""Panq B.V"": 1,
    ""Microsoft Azure Cloud (southeastasia)"": 1
  },
  ""regionName"": {
    ""Moscow"": 21,
    ""Hebei"": 3,
    ""California"": 12,
    ""Kaunas"": 6,
    ""Plovdiv"": 7,
    ""North Holland"": 3,
    ""Drenthe"": 2,
    ""England"": 3,
    ""New Jersey"": 2,
    ""Land Berlin"": 1,
    ""Sao Paulo"": 1,
    ""Jiangsu"": 2,
    ""Central Singapore"": 1
  },
  ""country"": {
    ""Russia"": 21,
    ""China"": 5,
    ""United States"": 14,
    ""Lithuania"": 6,
    ""Bulgaria"": 7,
    ""Netherlands"": 5,
    ""United Kingdom"": 3,
    ""Germany"": 1,
    ""Brazil"": 1,
    ""Singapore"": 1
  },
  ""account"": {
    ""Domain"": 20,
    ""(empty)"": 4,
    ""Test"": 1,
    ""cOiXFBmjw"": 1,
    ""GGvsNF"": 1,
    ""ZgmpkM"": 1,
    ""Administr"": 21,
    ""QmVAVMocZ"": 1,
    ""zrHbii"": 1,
    ""ZDGDbZ"": 1,
    ""hello"": 4,
    ""user"": 1,
    ""Administrator"": 1,
    ""aaMFIYtwn"": 1,
    ""drcDfD"": 1,
    ""fEqSio"": 1,
    ""luCzpczrO"": 1,
    ""sHoaMz"": 1,
    ""VfQzlh"": 1
  },
  ""keyboard"": {
    ""Unknown"": 64
  },
  ""client_build"": {
    ""Unknown"": 64
  },
  ""client_name"": {
    ""Unknown"": 64
  },
  ""ip_type"": {
    ""Unknown"": 38,
    ""mobile"": 2,
    ""hosting"": 16,
    ""proxy"": 7,
    ""hosting & proxy"": 1
  }
}"
0vaDDAC0,Untitled,Mysoft,C,Tuesday 31st of October 2023 06:34:17 PM CDT,"#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

//#define _countof(a) (sizeof(a)/sizeof(*(a)))

#define DoBenchmark

#ifdef DoBenchmark
  #define _Benchmark iCount=0; while ((abs(clock()-ttime)<CLOCKS_PER_SEC) && ++iCount)
#else
  #define _Benchmark 
#endif

typedef struct {
    int group;
    const char* rule;
    const char* ldraw_output;
} Rule;

#include ""table.c""

const Rule* ruleIdx[_countof(rules)];

//comparator function for qsort
int CompareRules( const void* pA , const void* pB ) {
	return strcmp( (*((const Rule**)pA))->rule , (*((const Rule**)pB))->rule );
}
void InitRules() {
	//set ptrs for each rules element at initial index
	for (int N=0 ; N<_countof(ruleIdx) ; N++ ) { ruleIdx[N]	= &rules[N]; }		
	qsort( ruleIdx , _countof(ruleIdx) , sizeof(void*) , CompareRules );
	printf(""%i rules\n"",_countof(ruleIdx));
}
const Rule* FindRule( char* pzRule ) {
	int iBegin = 0 , iEnd = _countof(ruleIdx);
	while (iEnd >= iBegin) {
		//try item from middle
		int idx = (iBegin+iEnd)/2;			
		const char* pzEntry = ruleIdx[idx]->rule;
		int iResu = strcmp( pzRule , pzEntry );
		if (!iResu) { return ruleIdx[idx]; } //found
		if (iBegin == iEnd) { return NULL; } //NOT found
		//remove the wrong half of possibilities		
		if (iResu>0) { iBegin= idx+1; } else { iEnd = idx-1; }		
	}
	return NULL; //NOT found
} 

void NormalizeInput( char* pzInput ) {	
	char WasSpace=1, *pOut = pzInput, C;
	while ((C=*pzInput++)) {
		switch (C) {
		case ' ' : case '\t' : case '\r' : case '\n' : 
		  if (!WasSpace) { *pOut++ = ' '; }
			WasSpace=1; break;
		default: 
		  *pOut++ = C; WasSpace=0;
		}
	}
	while (pOut[-1]==' ') { pOut--; }
	*pOut = '\0';	
}

int main() {

    InitRules();
    
    FILE *outputFile = fopen(""output.txt"", ""a""); // Open the file in append mode

    while (1) {
        char userInput[100];

        printf(""Enter a string (or 'exit' to quit): "");
        fgets(userInput, 100, stdin);
        userInput[strcspn(userInput, ""\n"")] = '\0';
				NormalizeInput( userInput );
				printf(""'%s'\n"",userInput);
				

        if (strcmp(userInput, ""exit"") == 0) {
            break;  // Exit the loop if the user types 'exit'
        }

				#ifdef DoBenchmark
				clock_t ttime = clock();
				long long iCount = 0;
				#endif				
				
				const Rule* pFound = NULL;									
				#if 1
					_Benchmark {
						pFound = FindRule( userInput );
					}
				#else
					_Benchmark {
						for (int N=0 ; N<_countof(rules) ; N++) {
							if (!strcmp(userInput , rules[N].rule)) {
								pFound = &rules[N]; break; 
							}							
						}						
					}
				#endif
				if (pFound) {
					printf(""%s\n"", pFound->ldraw_output);
					fprintf(outputFile, ""%s\n"", pFound->ldraw_output);
				} else {
					printf(""No match found.\n"");
				}				
				
				#ifdef DoBenchmark
				printf(""took %.05fms %lli/s\n"",1000.0/iCount,iCount);
				#endif
				
    }

    fclose(outputFile); // Close the file

    return 0;
		
}
"
GJTUbdu6,Untitled,Mysoft,C,Tuesday 31st of October 2023 05:58:40 PM CDT,"#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

//#define _countof(a) (sizeof(a)/sizeof(*(a)))

#define DoBenchmark

#ifdef DoBenchmark
  #define _Benchmark while (abs(clock()-ttime)<CLOCKS_PER_SEC)
#else
  #define _Benchmark 
#endif

typedef struct {
    int group;
    const char* rule;
    const char* ldraw_output;
} Rule;

#include ""table.c""

const Rule* ruleIdx[_countof(rules)];

//comparator function for qsort
int CompareRules( const void* pA , const void* pB ) {
	return strcmp( (*((const Rule**)pA))->rule , (*((const Rule**)pB))->rule );
}
void InitRules() {
	//set ptrs for each rules element at initial index
	for (int N=0 ; N<_countof(ruleIdx) ; N++ ) { ruleIdx[N]	= &rules[N]; }		
	qsort( ruleIdx , _countof(ruleIdx) , sizeof(void*) , CompareRules );
	printf(""%i rules\n"",_countof(ruleIdx));
}
const Rule* FindRule( char* pzRule ) {
	int iBegin = 0 , iEnd = _countof(ruleIdx);
	while (iEnd >= iBegin) {
		//try item from middle
		int idx = (iBegin+iEnd)/2;			
		const char* pzEntry = ruleIdx[idx]->rule;
		int iResu = strcmp( pzRule , pzEntry );
		if (!iResu) { return ruleIdx[idx]; } //found
		if (iBegin == iEnd) { return NULL; } //NOT found
		//remove the wrong half of possibilities		
		if (iResu>0) { iBegin= idx+1; } else { iEnd = idx-1; }		
	}
	return NULL; //NOT found
} 

void NormalizeInput( char* pzInput ) {	
	char WasSpace=1, *pOut = pzInput, C;
	while ((C=*pzInput++)) {
		switch (C) {
		case ' ' : case '\t' : case '\r' : case '\n' : 
		  if (!WasSpace) { *pOut++ = ' '; }
			WasSpace=1; break;
		default: 
		  *pOut++ = C; WasSpace=0;
		}
	}
	while (pOut[-1]==' ') { pOut--; }
	*pOut = '\0';	
}

int main() {

    InitRules();
    
    FILE *outputFile = fopen(""output.txt"", ""a""); // Open the file in append mode

    while (1) {
        char userInput[100];

        printf(""Enter a string (or 'exit' to quit): "");
        fgets(userInput, 100, stdin);
        userInput[strcspn(userInput, ""\n"")] = '\0';
				NormalizeInput( userInput );
				printf(""'%s'\n"",userInput);
				

        if (strcmp(userInput, ""exit"") == 0) {
            break;  // Exit the loop if the user types 'exit'
        }

				#ifdef DoBenchmark
				clock_t ttime = clock();
				#endif
				long long iCount = 0;
				
				const Rule* pFound = NULL;									
				#if 1
					_Benchmark {
						pFound = FindRule( userInput );					
						iCount++;
					}								
				#else
					_Benchmark {
						for (int N=0 ; N<_countof(rules) ; N++) {
							if (!strcmp(userInput , rules[N].rule)) {
								pFound = &rules[N]; break; 
							}							
						}
						iCount++;
					}
				#endif
				if (pFound) {
					printf(""%s\n"", pFound->ldraw_output);
					fprintf(outputFile, ""%s\n"", pFound->ldraw_output);
				} else {
					printf(""No match found.\n"");
				}				
				
				#ifdef DoBenchmark
				printf(""took %.05fms %lli/s\n"",1000.0/iCount,iCount);
				#endif
				
    }

    fclose(outputFile); // Close the file

    return 0;
		
}
"
p8UiY3Z1,jxstn1x's Data,azimuths,JSON,Tuesday 31st of October 2023 05:47:59 PM CDT,"{""Stats"":{""Key5"":{""ObjectName"":""Key5"",""ObjectClass"":""StringValue"",""ObjectValue"":""5""},""MaxRank"":{""ObjectName"":""MaxRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""24""},""mapmove1"":{""ObjectName"":""mapmove1"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LeftEye"":{""ObjectName"":""LeftEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""Key12"":{""ObjectName"":""Key12"",""ObjectClass"":""StringValue"",""ObjectValue"":""z""},""Blind"":{""ObjectName"":""Blind"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""Slot2"":{""ObjectName"":""Slot2"",""ObjectClass"":""StringValue"",""ObjectValue"":""Wild Water Wave""},""TailedBeastLevel"":{""ObjectName"":""TailedBeastLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CombatEXP"":{""ObjectName"":""CombatEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""149""},""Personality"":{""ObjectName"":""Personality"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""GripCount"":{""ObjectName"":""GripCount"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""Marking"":{""ObjectName"":""Marking"",""ObjectClass"":""IntValue"",""ObjectValue"":""69""},""SkinColor"":{""ObjectName"":""SkinColor"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""RP"":{""ObjectName"":""RP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ToggleAccessories"":{""ObjectName"":""ToggleAccessories"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot11"":{""ObjectName"":""Slot11"",""ObjectClass"":""StringValue"",""ObjectValue"":""Shadow Clone""},""MSAbility1"":{""ObjectName"":""MSAbility1"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Key8"":{""ObjectName"":""Key8"",""ObjectClass"":""StringValue"",""ObjectValue"":""8""},""LINDAMINISTARTUP"":{""ObjectName"":""LINDAMINISTARTUP"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""Slot4"":{""ObjectName"":""Slot4"",""ObjectClass"":""StringValue"",""ObjectValue"":""Leaf Whirlwind""},""Slot9"":{""ObjectName"":""Slot9"",""ObjectClass"":""StringValue"",""ObjectValue"":""Body Flicker""},""Version"":{""ObjectName"":""Version"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""DateRecord"":{""ObjectName"":""DateRecord"",""ObjectClass"":""IntValue"",""ObjectValue"":""2915""},""Key4"":{""ObjectName"":""Key4"",""ObjectClass"":""StringValue"",""ObjectValue"":""4""},""CurseMarkLevel"":{""ObjectName"":""CurseMarkLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key2"":{""ObjectName"":""Key2"",""ObjectClass"":""StringValue"",""ObjectValue"":""2""},""Genjutsu"":{""ObjectName"":""Genjutsu"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""SwordSave"":{""ObjectName"":""SwordSave"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuXP"":{""ObjectName"":""BijuuXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SeenDeaths"":{""ObjectName"":""SeenDeaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BonusSkillPoints"":{""ObjectName"":""BonusSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorB"":{""ObjectName"":""CColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosY"":{""ObjectName"":""PosY"",""ObjectClass"":""IntValue"",""ObjectValue"":""176""},""SPR"":{""ObjectName"":""SPR"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuConvo"":{""ObjectName"":""BijuuConvo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""jincooldown"":{""ObjectName"":""jincooldown"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Ken"":{""ObjectName"":""Ken"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Scar"":{""ObjectName"":""Scar"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot12"":{""ObjectName"":""Slot12"",""ObjectClass"":""StringValue"",""ObjectValue"":""Percutiens""},""RecentTrainings"":{""ObjectName"":""RecentTrainings"",""ObjectClass"":""StringValue"",""ObjectValue"":""[\""Handsign Training\""]""},""EyeColorR"":{""ObjectName"":""EyeColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""116""},""HairColorG"":{""ObjectName"":""HairColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""RaidCD"":{""ObjectName"":""RaidCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot6"":{""ObjectName"":""Slot6"",""ObjectClass"":""StringValue"",""ObjectValue"":""Laser Circus""},""HairColorB"":{""ObjectName"":""HairColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Gender"":{""ObjectName"":""Gender"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""MSAbility2"":{""ObjectName"":""MSAbility2"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Kids"":{""ObjectName"":""Kids"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryWep"":{""ObjectName"":""SecondaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""PosZ"":{""ObjectName"":""PosZ"",""ObjectClass"":""IntValue"",""ObjectValue"":""-2011""},""UnlockedCloak"":{""ObjectName"":""UnlockedCloak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CloakTime"":{""ObjectName"":""CloakTime"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuRelation"":{""ObjectName"":""BijuuRelation"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Prestige"":{""ObjectName"":""Prestige"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Elo"":{""ObjectName"":""Elo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ParentID"":{""ObjectName"":""ParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Mangekyo"":{""ObjectName"":""Mangekyo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastGripped"":{""ObjectName"":""LastGripped"",""ObjectClass"":""IntValue"",""ObjectValue"":""98093327""},""LastAge"":{""ObjectName"":""LastAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""1698782887""},""Key11"":{""ObjectName"":""Key11"",""ObjectClass"":""StringValue"",""ObjectValue"":""-""},""AwakenCD"":{""ObjectName"":""AwakenCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastStomach"":{""ObjectName"":""LastStomach"",""ObjectClass"":""IntValue"",""ObjectValue"":""406""},""ChakraArmorRGB"":{""ObjectName"":""ChakraArmorRGB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Mastered"":{""ObjectName"":""Mastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HandsignTraining"":{""ObjectName"":""HandsignTraining"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""WipeLog"":{""ObjectName"":""WipeLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot10"":{""ObjectName"":""Slot10"",""ObjectClass"":""StringValue"",""ObjectValue"":""Genjutsu Release""},""Key9"":{""ObjectName"":""Key9"",""ObjectClass"":""StringValue"",""ObjectValue"":""9""},""Slot5"":{""ObjectName"":""Slot5"",""ObjectClass"":""StringValue"",""ObjectValue"":""Yotsuki Weapon""},""Slot7"":{""ObjectName"":""Slot7"",""ObjectClass"":""StringValue"",""ObjectValue"":""Water Quaking Pillar""},""RESTORE"":{""ObjectName"":""RESTORE"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TailedBeast"":{""ObjectName"":""TailedBeast"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ItemSave"":{""ObjectName"":""ItemSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TimesRerolled"":{""ObjectName"":""TimesRerolled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurseMarkEXP"":{""ObjectName"":""CurseMarkEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HBChoice"":{""ObjectName"":""HBChoice"",""ObjectClass"":""IntValue"",""ObjectValue"":""10""},""WeaponSave"":{""ObjectName"":""WeaponSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""PrimaryWep"":{""ObjectName"":""PrimaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""OriginalVillage"":{""ObjectName"":""OriginalVillage"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""BijuuSealed"":{""ObjectName"":""BijuuSealed"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Name"":{""ObjectName"":""Name"",""ObjectClass"":""StringValue"",""ObjectValue"":""Justin""},""Parentq"":{""ObjectName"":""Parentq"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastChakra"":{""ObjectName"":""LastChakra"",""ObjectClass"":""IntValue"",""ObjectValue"":""965""},""EyeColorG"":{""ObjectName"":""EyeColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""25""},""Key3"":{""ObjectName"":""Key3"",""ObjectClass"":""StringValue"",""ObjectValue"":""3""},""RU"":{""ObjectName"":""RU"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosX"":{""ObjectName"":""PosX"",""ObjectClass"":""IntValue"",""ObjectValue"":""36""},""logcheck"":{""ObjectName"":""logcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot-"":{""ObjectName"":""Slot-"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Key1"":{""ObjectName"":""Key1"",""ObjectClass"":""StringValue"",""ObjectValue"":""1""},""FamilyID"":{""ObjectName"":""FamilyID"",""ObjectClass"":""StringValue"",""ObjectValue"":""Justin(11)1824402""},""Slot0"":{""ObjectName"":""Slot0"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""GrandParentID"":{""ObjectName"":""GrandParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Slot3"":{""ObjectName"":""Slot3"",""ObjectClass"":""StringValue"",""ObjectValue"":""Leaf Rising Wind""},""HideName"":{""ObjectName"":""HideName"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Blindness"":{""ObjectName"":""Blindness"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""Slot="":{""ObjectName"":""Slot="",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""AnbuLog"":{""ObjectName"":""AnbuLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BerserkTimes"":{""ObjectName"":""BerserkTimes"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SpentSkillPoints"":{""ObjectName"":""SpentSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""-20""},""PDLog"":{""ObjectName"":""PDLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key6"":{""ObjectName"":""Key6"",""ObjectClass"":""StringValue"",""ObjectValue"":""6""},""berserkcheck"":{""ObjectName"":""berserkcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""EyeColorB"":{""ObjectName"":""EyeColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""20""},""Slot1"":{""ObjectName"":""Slot1"",""ObjectClass"":""StringValue"",""ObjectValue"":""Cleaver Blade""},""SecondaryAmmo"":{""ObjectName"":""SecondaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""Key10"":{""ObjectName"":""Key10"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""BDAYS"":{""ObjectName"":""BDAYS"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""AgeLimit"":{""ObjectName"":""AgeLimit"",""ObjectClass"":""IntValue"",""ObjectValue"":""2400""},""KPos"":{""ObjectName"":""KPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""IsExiled"":{""ObjectName"":""IsExiled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TailedBeastMastered"":{""ObjectName"":""TailedBeastMastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MaxAge"":{""ObjectName"":""MaxAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Bank"":{""ObjectName"":""Bank"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ResetPos"":{""ObjectName"":""ResetPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SkillPoints"":{""ObjectName"":""SkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""20""},""Rank"":{""ObjectName"":""Rank"",""ObjectClass"":""IntValue"",""ObjectValue"":""19""},""PrimaryCN"":{""ObjectName"":""PrimaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""LastKilledUser"":{""ObjectName"":""LastKilledUser"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Trauma"":{""ObjectName"":""Trauma"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MissionSuccess"":{""ObjectName"":""MissionSuccess"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurrentWep"":{""ObjectName"":""CurrentWep"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""Slot8"":{""ObjectName"":""Slot8"",""ObjectClass"":""StringValue"",""ObjectValue"":""Basic Genjutsu""},""MissionEXP"":{""ObjectName"":""MissionEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""138""},""HairColorR"":{""ObjectName"":""HairColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""RyoRES"":{""ObjectName"":""RyoRES"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastHealth"":{""ObjectName"":""LastHealth"",""ObjectClass"":""IntValue"",""ObjectValue"":""397""},""Ryo"":{""ObjectName"":""Ryo"",""ObjectClass"":""IntValue"",""ObjectValue"":""553""},""CColorR"":{""ObjectName"":""CColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key7"":{""ObjectName"":""Key7"",""ObjectClass"":""StringValue"",""ObjectValue"":""7""},""WeaveSpeed"":{""ObjectName"":""WeaveSpeed"",""ObjectClass"":""IntValue"",""ObjectValue"":""20""},""RightEye"":{""ObjectName"":""RightEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""DefaultMouth"":{""ObjectName"":""DefaultMouth"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""startnewlife"":{""ObjectName"":""startnewlife"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TrainingEXP"":{""ObjectName"":""TrainingEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""27""},""CanRank"":{""ObjectName"":""CanRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""TailedBeastEXP"":{""ObjectName"":""TailedBeastEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorG"":{""ObjectName"":""CColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MaxTails"":{""ObjectName"":""MaxTails"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Age"":{""ObjectName"":""Age"",""ObjectClass"":""IntValue"",""ObjectValue"":""8""},""Deaths"":{""ObjectName"":""Deaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""Village"":{""ObjectName"":""Village"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""bald"":{""ObjectName"":""bald"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryCN"":{""ObjectName"":""SecondaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""4""},""KillStreak"":{""ObjectName"":""KillStreak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PrimaryAmmo"":{""ObjectName"":""PrimaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""kek"":{""ObjectName"":""kek"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""Influence"":{""ObjectName"":""Influence"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Title"":{""ObjectName"":""Title"",""ObjectClass"":""StringValue"",""ObjectValue"":""Jounin""}},""Skilltree"":{""Wild Water Wave"":{""ObjectName"":""Wild Water Wave"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Water Quaking Pillar"":{""ObjectName"":""Water Quaking Pillar"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Body Flicker"":{""ObjectName"":""Body Flicker"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Laser Circus"":{""ObjectName"":""Laser Circus"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Leaf Rising Wind"":{""ObjectName"":""Leaf Rising Wind"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Basic Genjutsu"":{""ObjectName"":""Basic Genjutsu"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Yotsuki Weapon"":{""ObjectName"":""Yotsuki Weapon"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Water Bullet"":{""ObjectName"":""Water Bullet"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Dynamic Entry"":{""ObjectName"":""Dynamic Entry"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Substitution"":{""ObjectName"":""Substitution"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""1000 Years of Death"":{""ObjectName"":""1000 Years of Death"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Shadow Clone"":{""ObjectName"":""Shadow Clone"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Hail"":{""ObjectName"":""Hail"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Shadow Shuriken"":{""ObjectName"":""Shadow Shuriken"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Percutiens"":{""ObjectName"":""Percutiens"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Genjutsu Release"":{""ObjectName"":""Genjutsu Release"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Clone Jutsu"":{""ObjectName"":""Clone Jutsu"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Leaf Whirlwind"":{""ObjectName"":""Leaf Whirlwind"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""}},""Copy"":[]}"
1N7ZWf1w,Untitled,sissou123,Python,Tuesday 31st of October 2023 05:39:28 PM CDT,"Python Pandas Information Brief training 2023 Advance by Doing.
Accelerate Information Examination and Perception with Python Pandas library in simple and straightforward manner likewise Expert utilizing it with SQL.
for more:https://cuty.io/kzk52"
LBQXihve,Untitled,sissou123,Python,Tuesday 31st of October 2023 05:24:57 PM CDT,"information Control in Python: Expert Python, Numpy and Pandas
Learn Python, NumPy and Pandas for Information Science: Expert fundamental information control for information science in python
for more:https://cuty.io/TVlm4SyLE"
x0PB1xHt,Untitled,sissou123,Python,Tuesday 31st of October 2023 05:05:31 PM CDT,"Python for Data Science & Machine Learning: Zero to Hero
Master Data Science & Machine Learning in Python: Numpy, Pandas, Matplotlib, Scikit-Learn, Machine Learning, and more!
for more:https://cuty.io/tgDaaWD0kQ"
uwpRzZss,MOK layout Zanabazar,dksetiavan,YAML,Tuesday 31st of October 2023 05:00:51 PM CDT,"{
""title"":""Zanabazar"",
""onScreen"":{
""main"":[
""1234567890"",
""[MC:𑨇][MC:𑨄][MC:𑨆][MC:𑨠][MC:𑨱][MC:𑨍][MC:𑨛][MC:𑨒][MC:𑨖][MC:𑨥][MC:𑨀]"",
""[MC:𑨊][MC:𑨁][MC:𑨃][MC:𑨞][MC:𑨫][MC:𑨋][MC:𑨙][MC:𑨐][MC:𑨔][MC:𑨣][MC:𑨺]"",
""[SHIFT][MC:𑨸][MC:𑨳][MC:𑨢][MC:𑨝][MC:𑨭][MC:𑨬][MC:𑨰][MC:𑨪][MC:𑨨][DEL]"",
""[TOOL][ALTGR:[MC:𑩂]][SPACE][][][SYM:[MC:𑩃]][ENTER]""
],

""shifted"":[
""[MC:𑨵][MC:𑨶][MC:𑨷][MC:𑩂][MC:𑩃][MC:𑩄][MC:𑨿][MC:𑩀][MC:𑩅][MC:𑩆]"",
""[MC:𑨈][MC:𑩁][MC:𑨅][MC:𑨡][MC:𑨏][MC:𑨎][MC:𑨜][MC:𑨲][MC:𑨗][MC:𑨦][MC:𑨩]"",
""[MC:𑩇][MC:𑨉][MC:𑨂][MC:𑨟][MC:𑨓][MC:𑨌][MC:𑨚][MC:𑨑][MC:𑨕][MC:𑨤][MC:𑨼]"",
""[SHIFT][MC:𑨹][MC:𑨴][MC:𑨻][MC:𑨘][MC:𑨾][MC:𑨽][MC:𑨮][MC:𑨯][MC:𑨧][DEL]"",
""[LOCK][ALTGR:[MC:𑩁]][SPACE][][][SYM:[MC:𑩄]][ENTER]""
],

""altGr"":[
""1234567890"",
""qwertyuiop"",
""asdfghjkl"",
""[SHIFT]zxcvbnm[DEL]"",
""[LOCK][ALTGR:,][SPACE][][][SYM:.][ENTER]""
]}}"
372vQsLZ,Untitled,B-X-1,Bash,Tuesday 31st of October 2023 04:59:13 PM CDT,return to ((22222883773894487367829))
54PwAkfA,Blink firmware(Arduino Nano),anticlown,C,Tuesday 31st of October 2023 04:57:17 PM CDT,"#include <mega328p.h>
#include <delay.h>

void main(void) {
    int i = 0;
    while(1){                                                                                               
        i = i ^ 1;
        delay_ms(200);
        PORTB = (i<<PORTB7)|(i<<PORTB6)|(i<<PORTB5)|(i<<PORTB4)|(i<<PORTB3)|(i<<PORTB2)|(i<<PORTB1)|(i<<PORTB0);
    }
}"
ij0Dsjau,shop_draw cached,shadowshine57,C,Tuesday 31st of October 2023 04:48:02 PM CDT,"// Shop draw function for each shelf slot, replaces GetItem_Draw inside of EnGirlA_Draw
void shop_draw(z64_actor_t *actor, z64_game_t *game) {
    EnGirlA *this = (EnGirlA *)actor;
    model_t model = {
        .object_id = 0x0000,
        .graphic_id = 0x00,
    };
 
    //See if there is cached data stored in the actor's isInitialized variable at 0x018C. 
    //Cached data is as follows:
    //2 bytes: model object_id
    //1 byte: model graphic_id
    uint16_t object_id = (((uint8_t*)this)[0x018D] << 1) & ((uint8_t*)this)[0x018E];
    uint8_t graphic_id = ((uint8_t*)this)[0x18F];    
 
    /*
        SOLD OUT is given a get item ID of 0x53 for the slot,
        which conflicts with the Gerudo Mask override if it's
        shuffled and the override in the Gerudo Mask slot happens
        to be progressive. To prevent the mask shop from filling up
        with longshots or golden gauntlets, check the currently loaded
        object ID for OBJECT_GI_SOLDOUT (0x148) before attempting to use
        the override model.
    */
    // There is already cached model data, use it instead of doing lookups
    if (object_id > 0 && graphic_id > 0 && graphic_id != 0xFF && game->obj_ctxt.objects[this->objBankIndex].id != 0x148) {       
        model.object_id = object_id;
        model.graphic_id = graphic_id;
        draw_model(model, actor, game, 0.0);
        return;
    }

    // There is no cached data, check if there needs to be
    if (this->getItemId && game->obj_ctxt.objects[this->objBankIndex].id != 0x148) {
        // If the item isn't overridden then we don't want to do an unnecessary lookup, so we store -1 in graphic_id
        if (graphic_id != -1) {
            // Look up the override so we can either cache its model data, or cache that it doesn't exist
            override_t override = lookup_override((z64_actor_t*) this, z64_game.scene_index, this->getItemId);
            if (override.key.all) { // Override exists, cache the model data and load
                lookup_model_by_override(&model, override);
                if (model.object_id != 0x0000) {
                    // Cache object_id and graphic_id
                    ((uint8_t*)this)[0x18D] = (model.object_id >> 1);
                    ((uint8_t*)this)[0x18E] = (model.object_id & 0xFF);
                    ((uint8_t*)this)[0x18F] = model.graphic_id;
                    draw_model(model, actor, game, 0.0);
                }
                return;
            }
            else { // Override does not exist
                ((uint8_t*)this)[0x18D] = 0;
                ((uint8_t*)this)[0x18E] = 0;
                ((uint8_t*)this)[0x18F] = 0xFF;
            }
        }
    }

    // vanilla draw function if the slot is a regular shop item, shuffled or unshuffled
    GetItem_Draw(game, this->giDrawId);
}"
gR6rPAgN,Binary Tree(example),anticlown,C++,Tuesday 31st of October 2023 04:38:09 PM CDT,"#include <iostream>
#include <random>
#include <queue>

int getRandomNumber(int min, int max) {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<int> dis(min, max);
    return dis(gen);
}

struct Trunk
{
    Trunk* prev;
    std::string str;

    Trunk(Trunk* prev, std::string str)
    {
        this->prev = prev;
        this->str = str;
    }
};

class Node {
public:
    int data;
    Node* left;
    Node* right;
    Node* next;

    explicit Node(int value) {
        data = value;
        left = nullptr;
        right = nullptr;
        next = nullptr;
    }
};

class BinarySearchTree {
private:
    Node* root;

    Node* insertNode(Node* node, int value) {
        if (node == nullptr) {
            return new Node(value);
        }

        if (value < node->data) {
            node->left = insertNode(node->left, value);
        }
        else if (value > node->data) {
            node->right = insertNode(node->right, value);
        }

        return node;
    }

    static Node* findMinNode(Node* node) {
        while (node->left != nullptr) {
            node = node->left;
        }
        return node;
    }

    Node* deleteNode(Node* node, int value) {
        if (node == nullptr) {
            return nullptr;
        }

        if (value < node->data) {
            node->left = deleteNode(node->left, value);
        }
        else if (value > node->data) {
            node->right = deleteNode(node->right, value);
        }
        else {
            if (node->left == nullptr && node->right == nullptr) {
                delete node;
                node = nullptr;
            }
            else if (node->left == nullptr) {
                Node* temp = node;
                node = node->right;
                delete temp;
            }
            else if (node->right == nullptr) {
                Node* temp = node;
                node = node->left;
                delete temp;
            }
            else {
                Node* temp = findMinNode(node->right);
                node->data = temp->data;
                node->right = deleteNode(node->right, temp->data);
            }
        }

        return node;
    }

    void inorderTraversal(Node* node) {
        if (node != nullptr) {
            inorderTraversal(node->left);
            std::cout << node->data << "" "";
            inorderTraversal(node->right);
        }
    }

    void preorderTraversal(Node* node) {
        if (node != nullptr) {
            std::cout << node->data << "" "";
            preorderTraversal(node->left);
            preorderTraversal(node->right);
        }
    }

    void postorderTraversal(Node* node) {
        if (node != nullptr) {
            postorderTraversal(node->left);
            postorderTraversal(node->right);
            std::cout << node->data << "" "";
        }
    }

    void preorderTraversalFull(Node* node) {
        if (node != nullptr) {
            std::cout << node->data << "" "";
            if (node->left != nullptr) {
                preorderTraversalFull(node->left);
            }
            else {
                std::cout << ""null "";
            }
            if (node->right != nullptr) {
                preorderTraversalFull(node->right);
            }
            else {
                std::cout << ""null "";
            }
        }
    }

    void inorderTraversalFull(Node* node) {
        if (node != nullptr) {
            if (node->left != nullptr) {
                inorderTraversalFull(node->left);
            }
            else {
                std::cout << ""null "";
            }
            std::cout << node->data << "" "";
            if (node->right != nullptr) {
                inorderTraversalFull(node->right);
            }
            else {
                std::cout << ""null "";
            }
        }
    }

    void postorderTraversalFull(Node* node) {
        if (node != nullptr) {
            if (node->left != nullptr) {
                postorderTraversalFull(node->left);
            }
            else {
                std::cout << ""null "";
            }
            if (node->right != nullptr) {
                postorderTraversalFull(node->right);
            }
            else {
                std::cout << ""null "";
            }
            std::cout << node->data << "" "";
        }
    }

    void inorderTraversalThread(Node* node) {
        if (node != nullptr) {
            inorderTraversalThread(node->left);
            std::cout << node->data << "" -> "";
            if (node->next != nullptr) {
                std::cout << node->next->data;
            }
            else {
                std::cout << ""null"";
            }
            std::cout << std::endl;
            inorderTraversalThread(node->right);
        }
    }

    void showTrunks(Trunk* p)
    {
        if (p == nullptr) {
            return;
        }

        showTrunks(p->prev);
        std::cout << p->str;
    }

    void printTree(Node* root, Trunk* prev = nullptr, bool isLeft = false)
    {
        if (root == nullptr) {
            return;
        }

        std::string prev_str = ""    "";
        auto* trunk = new Trunk(prev, prev_str);

        printTree(root->right, trunk, true);

        if (!prev) {
            trunk->str = ""---"";
        }
        else if (isLeft)
        {
            trunk->str = "".---"";
            prev_str = ""   |"";
        }
        else {
            trunk->str = ""`---"";
            prev->str = prev_str;
        }

        showTrunks(trunk);
        std::cout << "" "" << root->data << std::endl;

        if (prev) {
            prev->str = prev_str;
        }
        trunk->str = ""   |"";

        printTree(root->left, trunk, false);
    }

public:
    BinarySearchTree() {
        root = nullptr;
    }

    void insert(int value) {
        root = insertNode(root, value);
    }

    void remove(int value) {
        root = deleteNode(root, value);
    }

    void inorder() {
        inorderTraversal(root);
        std::cout << std::endl;
    }

    void preorder() {
        preorderTraversal(root);
        std::cout << std::endl;
    }

    void postorder() {
        postorderTraversal(root);
        std::cout << std::endl;
    }

    void preorderFull() {
        preorderTraversalFull(root);
        std::cout << std::endl;
    }

    void inorderFull() {
        inorderTraversalFull(root);
        std::cout << std::endl;
    }

    void postorderFull() {
        postorderTraversalFull(root);
        std::cout << std::endl;
    }

    void reverseInorderThread(Node* node, Node*& prev) {
        if (node == nullptr) {
            return;
        }

        reverseInorderThread(node->left, prev);

        node->next = prev;

        prev = node;

        reverseInorderThread(node->right, prev);
    }

    void reverseInorderThread() {
        Node* prev = nullptr;
        reverseInorderThread(root, prev);
    }

    void inorderThread() {
        inorderTraversalThread(root);
    }

    void print() {
        printTree(root);
    }
};

int main() {
    BinarySearchTree tree;

    for (int i = 0; i < 100; i++) {
        tree.insert(getRandomNumber(-100, 100));
    }

    tree.insert(10);
    tree.insert(3);
    tree.insert(-7);
    tree.insert(0);
    tree.insert(9);
    tree.insert(39);

    tree.print();

    tree.inorder();
    tree.postorder();
    tree.preorder();

    tree.inorderFull();
    tree.postorderFull();
    tree.preorderFull();

    tree.reverseInorderThread();
    tree.inorderThread();

    tree.print();

    system(""pause"");

    return 0;
}"
ZEh5Rju7,Структуры,anticlown,C,Tuesday 31st of October 2023 04:36:09 PM CDT,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>

struct enrollee
{
    char* surname;
    char* city;
    float GPA;
};

int main() {
    setlocale(LC_ALL, ""Rus"");
    printf(""\tДанная программа получает список абитуриентов и выводит в алфавитном порядке список тех, кто проживает в Минске и у кого средний балл 7 и выше. \n"");

    struct enrollee list[10] = { { ""Устинович"", ""Сенно"", 9.0 }, { ""Ханенко"", ""Минск"", 7.5 }, { ""Карась"", ""Гродно"", 9.0 }, { ""Арефин"", ""Брест"", 6.7 } , { ""Асепков"", ""Витебск"", 5.2}, 
                            { ""Елькин"", ""Витебск"", 8.3 }, { ""Кротюк"", ""Минск"", 7.2 }, { ""Кирлица"", ""Минск"", 7.5 }, { ""Заяц"", ""Минск"", 7.1 }, { ""Крутько"", ""Минск"", 10.0 } };

    printf(""\t\t\t\t Введенный список: \n"");

    for (int i = 0; i < 10; i++) {
        printf(""Студент номер %d:\n Фамилия: %s;\n Город: %s;\n Средний балл: %.2f;\n\n"", i + 1, list[i].surname, list[i].city, list[i].GPA);
    }

    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 10 - i - 1; j++) {
            if (strcmp(list[j].surname, list[j + 1].surname) > 0) {
                // меняем элементы местами
                struct enrollee temp;
                temp = list[j];
                list[j] = list[j + 1];
                list[j + 1] = temp;
            }
        }
    }

    printf(""\t\t\t\t Отсортированный список: \n"");

    for (int i = 0; i < 10; i++) {
        printf(""Студент номер %d:\n Фамилия: %s;\n Город: %s;\n Средний балл: %.2f;\n\n"", i + 1, list[i].surname, list[i].city, list[i].GPA);
    }

    printf(""\t\t\t\t Список по заданным фильтрам: \n"");

    for (int i = 0; i < 10; i++) {
        if (strcmp(list[i].city, ""Минск"") == 0 && list[i].GPA >= 7.0)
            printf(""Студент номер %d:\n Фамилия: %s;\n Город: %s;\n Средний балл: %.2f;\n\n"", i + 1, list[i].surname, list[i].city, list[i].GPA);
    }

    return 0;
}"
wRsCHWSh,TheMiniKitty11's Data,azimuths,JSON,Tuesday 31st of October 2023 04:32:51 PM CDT,"{""Stats"":{""Key5"":{""ObjectName"":""Key5"",""ObjectClass"":""StringValue"",""ObjectValue"":""5""},""PrimaryCN"":{""ObjectName"":""PrimaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""mapmove1"":{""ObjectName"":""mapmove1"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TrainingEXP"":{""ObjectName"":""TrainingEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key12"":{""ObjectName"":""Key12"",""ObjectClass"":""StringValue"",""ObjectValue"":""=""},""Blind"":{""ObjectName"":""Blind"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""Slot2"":{""ObjectName"":""Slot2"",""ObjectClass"":""StringValue"",""ObjectValue"":""Grenade Kick""},""TailedBeastLevel"":{""ObjectName"":""TailedBeastLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CombatEXP"":{""ObjectName"":""CombatEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Personality"":{""ObjectName"":""Personality"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""GripCount"":{""ObjectName"":""GripCount"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Marking"":{""ObjectName"":""Marking"",""ObjectClass"":""IntValue"",""ObjectValue"":""69""},""SkinColor"":{""ObjectName"":""SkinColor"",""ObjectClass"":""IntValue"",""ObjectValue"":""7""},""RP"":{""ObjectName"":""RP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot="":{""ObjectName"":""Slot="",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Slot11"":{""ObjectName"":""Slot11"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""MSAbility1"":{""ObjectName"":""MSAbility1"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""KPos"":{""ObjectName"":""KPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LINDAMINISTARTUP"":{""ObjectName"":""LINDAMINISTARTUP"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""Slot4"":{""ObjectName"":""Slot4"",""ObjectClass"":""StringValue"",""ObjectValue"":""Landmine Stomp""},""Slot9"":{""ObjectName"":""Slot9"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Version"":{""ObjectName"":""Version"",""ObjectClass"":""IntValue"",""ObjectValue"":""70""},""HairColorR"":{""ObjectName"":""HairColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""154""},""Key4"":{""ObjectName"":""Key4"",""ObjectClass"":""StringValue"",""ObjectValue"":""4""},""CurseMarkLevel"":{""ObjectName"":""CurseMarkLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key2"":{""ObjectName"":""Key2"",""ObjectClass"":""StringValue"",""ObjectValue"":""2""},""Genjutsu"":{""ObjectName"":""Genjutsu"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SwordSave"":{""ObjectName"":""SwordSave"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuXP"":{""ObjectName"":""BijuuXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key3"":{""ObjectName"":""Key3"",""ObjectClass"":""StringValue"",""ObjectValue"":""3""},""BonusSkillPoints"":{""ObjectName"":""BonusSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorB"":{""ObjectName"":""CColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosY"":{""ObjectName"":""PosY"",""ObjectClass"":""IntValue"",""ObjectValue"":""214""},""SPR"":{""ObjectName"":""SPR"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""BijuuConvo"":{""ObjectName"":""BijuuConvo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""jincooldown"":{""ObjectName"":""jincooldown"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Ken"":{""ObjectName"":""Ken"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Scar"":{""ObjectName"":""Scar"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot12"":{""ObjectName"":""Slot12"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""RecentTrainings"":{""ObjectName"":""RecentTrainings"",""ObjectClass"":""StringValue"",""ObjectValue"":""{}""},""EyeColorR"":{""ObjectName"":""EyeColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""232""},""HairColorG"":{""ObjectName"":""HairColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""136""},""RaidCD"":{""ObjectName"":""RaidCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot6"":{""ObjectName"":""Slot6"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""HairColorB"":{""ObjectName"":""HairColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""112""},""Gender"":{""ObjectName"":""Gender"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""MSAbility2"":{""ObjectName"":""MSAbility2"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Kids"":{""ObjectName"":""Kids"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryWep"":{""ObjectName"":""SecondaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""PosZ"":{""ObjectName"":""PosZ"",""ObjectClass"":""IntValue"",""ObjectValue"":""-5432""},""UnlockedCloak"":{""ObjectName"":""UnlockedCloak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CloakTime"":{""ObjectName"":""CloakTime"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuRelation"":{""ObjectName"":""BijuuRelation"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Prestige"":{""ObjectName"":""Prestige"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Elo"":{""ObjectName"":""Elo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosX"":{""ObjectName"":""PosX"",""ObjectClass"":""IntValue"",""ObjectValue"":""3246""},""Mangekyo"":{""ObjectName"":""Mangekyo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastGripped"":{""ObjectName"":""LastGripped"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastAge"":{""ObjectName"":""LastAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key11"":{""ObjectName"":""Key11"",""ObjectClass"":""StringValue"",""ObjectValue"":""-""},""AwakenCD"":{""ObjectName"":""AwakenCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastStomach"":{""ObjectName"":""LastStomach"",""ObjectClass"":""IntValue"",""ObjectValue"":""171""},""ChakraArmorRGB"":{""ObjectName"":""ChakraArmorRGB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Mastered"":{""ObjectName"":""Mastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HandsignTraining"":{""ObjectName"":""HandsignTraining"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""WipeLog"":{""ObjectName"":""WipeLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot10"":{""ObjectName"":""Slot10"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Key9"":{""ObjectName"":""Key9"",""ObjectClass"":""StringValue"",""ObjectValue"":""9""},""Slot5"":{""ObjectName"":""Slot5"",""ObjectClass"":""StringValue"",""ObjectValue"":""Leaf Whirlwind""},""Slot7"":{""ObjectName"":""Slot7"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""RESTORE"":{""ObjectName"":""RESTORE"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TailedBeast"":{""ObjectName"":""TailedBeast"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ItemSave"":{""ObjectName"":""ItemSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TimesRerolled"":{""ObjectName"":""TimesRerolled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurseMarkEXP"":{""ObjectName"":""CurseMarkEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HBChoice"":{""ObjectName"":""HBChoice"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""WeaponSave"":{""ObjectName"":""WeaponSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""PrimaryWep"":{""ObjectName"":""PrimaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""OriginalVillage"":{""ObjectName"":""OriginalVillage"",""ObjectClass"":""IntValue"",""ObjectValue"":""6""},""BijuuSealed"":{""ObjectName"":""BijuuSealed"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Name"":{""ObjectName"":""Name"",""ObjectClass"":""StringValue"",""ObjectValue"":""Dumpling""},""SeenDeaths"":{""ObjectName"":""SeenDeaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastChakra"":{""ObjectName"":""LastChakra"",""ObjectClass"":""IntValue"",""ObjectValue"":""240""},""Parentq"":{""ObjectName"":""Parentq"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key1"":{""ObjectName"":""Key1"",""ObjectClass"":""StringValue"",""ObjectValue"":""1""},""RU"":{""ObjectName"":""RU"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""EyeColorG"":{""ObjectName"":""EyeColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""149""},""logcheck"":{""ObjectName"":""logcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot-"":{""ObjectName"":""Slot-"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""PrimaryAmmo"":{""ObjectName"":""PrimaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""FamilyID"":{""ObjectName"":""FamilyID"",""ObjectClass"":""StringValue"",""ObjectValue"":""Dumpling(19)1116567""},""DateRecord"":{""ObjectName"":""DateRecord"",""ObjectClass"":""IntValue"",""ObjectValue"":""2577""},""IsExiled"":{""ObjectName"":""IsExiled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot3"":{""ObjectName"":""Slot3"",""ObjectClass"":""StringValue"",""ObjectValue"":""Explosive Boost""},""Key8"":{""ObjectName"":""Key8"",""ObjectClass"":""StringValue"",""ObjectValue"":""8""},""Blindness"":{""ObjectName"":""Blindness"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""HideName"":{""ObjectName"":""HideName"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MaxAge"":{""ObjectName"":""MaxAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BerserkTimes"":{""ObjectName"":""BerserkTimes"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SpentSkillPoints"":{""ObjectName"":""SpentSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""-7""},""PDLog"":{""ObjectName"":""PDLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key6"":{""ObjectName"":""Key6"",""ObjectClass"":""StringValue"",""ObjectValue"":""6""},""berserkcheck"":{""ObjectName"":""berserkcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""EyeColorB"":{""ObjectName"":""EyeColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""191""},""Slot1"":{""ObjectName"":""Slot1"",""ObjectClass"":""StringValue"",""ObjectValue"":""Rocket Fist""},""ToggleAccessories"":{""ObjectName"":""ToggleAccessories"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key10"":{""ObjectName"":""Key10"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""BDAYS"":{""ObjectName"":""BDAYS"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""AgeLimit"":{""ObjectName"":""AgeLimit"",""ObjectClass"":""IntValue"",""ObjectValue"":""2400""},""GrandParentID"":{""ObjectName"":""GrandParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TailedBeastMastered"":{""ObjectName"":""TailedBeastMastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot0"":{""ObjectName"":""Slot0"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""LeftEye"":{""ObjectName"":""LeftEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""Bank"":{""ObjectName"":""Bank"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ResetPos"":{""ObjectName"":""ResetPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SkillPoints"":{""ObjectName"":""SkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""7""},""Rank"":{""ObjectName"":""Rank"",""ObjectClass"":""IntValue"",""ObjectValue"":""6""},""SecondaryAmmo"":{""ObjectName"":""SecondaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""LastKilledUser"":{""ObjectName"":""LastKilledUser"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Trauma"":{""ObjectName"":""Trauma"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MissionSuccess"":{""ObjectName"":""MissionSuccess"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurrentWep"":{""ObjectName"":""CurrentWep"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""MissionEXP"":{""ObjectName"":""MissionEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ParentID"":{""ObjectName"":""ParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""MaxRank"":{""ObjectName"":""MaxRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""24""},""RyoRES"":{""ObjectName"":""RyoRES"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastHealth"":{""ObjectName"":""LastHealth"",""ObjectClass"":""IntValue"",""ObjectValue"":""233""},""Ryo"":{""ObjectName"":""Ryo"",""ObjectClass"":""IntValue"",""ObjectValue"":""100""},""CColorR"":{""ObjectName"":""CColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key7"":{""ObjectName"":""Key7"",""ObjectClass"":""StringValue"",""ObjectValue"":""7""},""WeaveSpeed"":{""ObjectName"":""WeaveSpeed"",""ObjectClass"":""IntValue"",""ObjectValue"":""20""},""RightEye"":{""ObjectName"":""RightEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""DefaultMouth"":{""ObjectName"":""DefaultMouth"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""AnbuLog"":{""ObjectName"":""AnbuLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CanRank"":{""ObjectName"":""CanRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""startnewlife"":{""ObjectName"":""startnewlife"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TailedBeastEXP"":{""ObjectName"":""TailedBeastEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorG"":{""ObjectName"":""CColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MaxTails"":{""ObjectName"":""MaxTails"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Age"":{""ObjectName"":""Age"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""Village"":{""ObjectName"":""Village"",""ObjectClass"":""IntValue"",""ObjectValue"":""6""},""bald"":{""ObjectName"":""bald"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Deaths"":{""ObjectName"":""Deaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryCN"":{""ObjectName"":""SecondaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""KillStreak"":{""ObjectName"":""KillStreak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot8"":{""ObjectName"":""Slot8"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""kek"":{""ObjectName"":""kek"",""ObjectClass"":""IntValue"",""ObjectValue"":""19""},""Influence"":{""ObjectName"":""Influence"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Title"":{""ObjectName"":""Title"",""ObjectClass"":""StringValue"",""ObjectValue"":""Academy Student""}},""Skilltree"":{""Rocket Fist"":{""ObjectName"":""Rocket Fist"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Explosive Boost"":{""ObjectName"":""Explosive Boost"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Leaf Whirlwind"":{""ObjectName"":""Leaf Whirlwind"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Dynamic Entry"":{""ObjectName"":""Dynamic Entry"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Grenade Kick"":{""ObjectName"":""Grenade Kick"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Substitution"":{""ObjectName"":""Substitution"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""1000 Years of Death"":{""ObjectName"":""1000 Years of Death"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Landmine Stomp"":{""ObjectName"":""Landmine Stomp"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""}},""Copy"":[]}"
ZiHmpKpN,Файлы + Структуры,anticlown,C,Tuesday 31st of October 2023 04:27:14 PM CDT,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include <string.h>
#include <malloc.h>

/* employee struct start */
typedef struct {
    char surname[20];
    char department[2];
    int salary;
} employee;

employee* getEmployeeList(char* filePath, int size) {
    employee* list = (employee*)malloc(size * sizeof(employee));
    FILE* file;
    file = fopen(filePath, ""r"");
    int temp;
    fscanf(file, ""%d"", &temp);
    for (int i = 0; i < size; i++)
    {
        fscanf(file, ""%s"", &list[i].surname);
        fscanf(file, ""%s"", &list[i].department);
        fscanf(file, ""%d"", &list[i].salary);
    }
    fclose(file);
    return list;
}

void addEmployee(int size, employee* list) {
    size++;
    list = (employee*)realloc(list, size * sizeof(employee));
    printf(""\nВведите фамилию работника: "");
    scanf(""%s"", &list[size - 1].surname);
    printf(""\nВведите отдел работника: "");
    scanf(""%s"", &list[size - 1].department);
    printf(""\nВведите зарплату работника: "");
    scanf(""%d"", &list[size - 1].salary);
}

void changeEmployee(employee* list) {
    int employeeToChange;
    printf(""\nВыберете необходимого для изменения работника по номеру из списка: "");
    scanf(""%d"", &employeeToChange);
    printf(""Введите новую фамилию работника: "");
    scanf(""%s"", &list[employeeToChange - 1].surname);
    printf(""Введите новую отдел работника: "");
    scanf(""%s"", &list[employeeToChange - 1].department);
    printf(""Введите новую зарплату работника: "");
    scanf(""%d"", &list[employeeToChange - 1].salary);
}

void deleteEmployee(int size, employee* list) {
    int employeeToDelete;
    printf(""\nВыберете необходимого для удаления работника по номеру из списка: "");
    scanf(""%d"", &employeeToDelete);
    for (int i = employeeToDelete - 1; i < size; i++)
        memmove(&list[i], &list[i + 1], 26); //26 - размер одной записи типа employee

    size--;
    list = (employee*)realloc(list, size * sizeof(employee));
}

void printEmployeeList(int size, employee* list) {
    printf(""\n\tКоличество работников: %d\n"", size);
    printf(""\tВывод списка всех работников:\n"");
    for (int i = 0; i < size; i++)
    {
        printf(""%d. %s из отдела %s - зарплата равна %d $\n"", i + 1, list[i].surname, list[i].department, list[i].salary);
    }
}

int calculateAllPayments(int size, employee* list) {
    int sum = 0;
    for (int i = 0; i < size; i++)
    {
        if (strcmp(list[i].department, ""A"") == 0)
            sum += list[i].salary;
    }
    return sum;
}

float calculateAvarageSalary(int size, int paymentsSum) {
    float averageSalary = 0;
    averageSalary = paymentsSum / size;
    return averageSalary;
}

void printPaymentsAndSalary(int paymentsSum, float averageSalary) {
    printf(""Общая сумма выплат отдела А: %d\nСредняя заработная плата сотрудника отдела А: %.2f$"", paymentsSum, averageSalary);
}
/* employee struct end */


/* file funcs/procs start */
char* getPathToFile() {
    static char filePath[20];
    printf(""\nВведите путь к файлу: "");
    gets_s(filePath, 20);
    return filePath;
}

int getSize(char filePath[20]) {
    FILE* file;
    file = fopen(filePath, ""r"");
    int temp;
    fscanf(file, ""%d"", &temp);
    fclose(file);
    return temp;
}

void endWork(char* filePath, int size, employee* list) {
    FILE* file = fopen(filePath, ""w"");
    fprintf(file, ""%d\n"", size);
    for (int i = 0; i < size; i++)
    {
        fprintf(file, ""%s "", &list[i].surname);
        fprintf(file, ""%s "", &list[i].department);
        fprintf(file, ""%d\n"", list[i].salary);
    }
    fclose(file);

    printf(""\n\t\t\t\t\t\tРабота с файлом успешно закончена.\n"");
}
/* file funcs/procs end */


/* print procs/funcs start */
void printTaskInfo() {
    printf(""Данная программа получает файл со сведениями о месячной заработной плате сотрудников отдела.\n"");
    printf(""Затем вычисляет общую сумму выплат за месяц по отделу А,а также среднемесячный заработок сотрудникам этого отдела.\n"");
}

int getChoice() {
    int choice;
    printf(""\nВыберете опцию меню: "");
    scanf_s(""%d"", &choice);
    return choice;
}

void printMenuOptions() {
    printf(""\t\t\t\t\t\tМеню работы с файлом предлагает следующие опции: \n"");
    printf(""\t\t\t\t\t\t\t 1. Добавить запись о работник\n"");
    printf(""\t\t\t\t\t\t\t 2. Изменить запись о работнике\n"");
    printf(""\t\t\t\t\t\t\t 3. Удалить запись о работнике\n"");
    printf(""\t\t\t\t\t\t\t 4. Вывести список работников\n"");
    printf(""\t\t\t\t\t\t\t 5. Посчитать общие выплаты и среднюю з/п.\n"");
    printf(""\t\t\t\t\t\t\t 6. Закончить работу с файлом\n"");
}

void printErrMessage() {
    printf(""Введено неверное значение! Выберете одну из существующих опций.\n"");
}
/* print procs/funcs end */

int main()
{
    setlocale(LC_ALL, ""Rus"");
    printTaskInfo();

    char* filePath = getPathToFile();
    int size = getSize(filePath);
    employee* list = getEmployeeList(filePath, size);

    printMenuOptions();
    int choice = 0;
    while (choice != 6)
    {
        choice = getChoice();
        switch (choice)
        {
            case 1: //добавить запись
            {
                addEmployee(size, list);
                break;
            }
            case 2: //изменить запись
            {
                changeEmployee(list);
                break;
            }
            case 3: //удалить запись
            {
                deleteEmployee(size, list);
                break;
            }
            case 4: //вывести текущий список
            {
                printEmployeeList(size, list);
                break;
            }
            case 5: //посчитать общие выплаты и среднюю зп
            {
                int allPayments = calculateAllPayments(size, list);
                float averageSalary = calculateAvarageSalary(size, allPayments);
                printPaymentsAndSalary(allPayments, averageSalary);
                break;
            }
            case 6: //закончить работу
            {
                endWork(filePath, size, list);
                break;
            }
            default:
            {
                printErrMessage();
            }
        }
    }

    free(list);
    return 0;
}"
yu6RqNZF,random walk ant,Kaelygon,C++,Tuesday 31st of October 2023 04:09:15 PM CDT,"#include <iostream>
#include <SDL2/SDL.h>
#include <stdlib.h>
#include <time.h>



int energy = 16;
const int UPDATE_RATE = 0;
const int SCREEN_WIDTH = 1024;
const int SCREEN_HEIGHT = 1024;
const int GRID_SIZE = 4;  // Size of each grid cell
const int GRID_ROWS = SCREEN_HEIGHT / GRID_SIZE;
const int GRID_COLS = SCREEN_WIDTH / GRID_SIZE;

int antPos[2] = {GRID_ROWS/2,GRID_COLS/2};
int antCol[3] = {64,64,255};
int gridCell[GRID_ROWS][GRID_COLS];

int antDir=0;

void renderWholeGrid(SDL_Renderer* renderer) {
	// Clear the renderer
	SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);

	// Set a different color for each cell
	for (int i = 0; i < GRID_ROWS; ++i) {
		for (int j = 0; j < GRID_COLS; ++j) {
			int red   = gridCell[i][j]*32;
			int green = gridCell[i][j]*32;
			int blue  = gridCell[i][j]*32;

			SDL_SetRenderDrawColor(renderer, red, green, blue, 255);

			SDL_Rect cell = {j * GRID_SIZE, i * GRID_SIZE, GRID_SIZE, GRID_SIZE};
			SDL_RenderFillRect(renderer, &cell);
		}
	}

	SDL_SetRenderDrawColor(renderer, antCol[0], antCol[1], antCol[2], 255);


	SDL_Rect antCell = {antPos[0] * GRID_SIZE, antPos[1] * GRID_SIZE, GRID_SIZE, GRID_SIZE};
	SDL_RenderFillRect(renderer, &antCell);

	// Present the renderer
	SDL_RenderPresent(renderer);
}

void updateAnt(SDL_Renderer* renderer){


	//draw ant old position
		int red   = gridCell[antPos[1]][antPos[0]]*32;
		int green = gridCell[antPos[1]][antPos[0]]*32;
		int blue  = gridCell[antPos[1]][antPos[0]]*32;

		SDL_SetRenderDrawColor(renderer, red, green, blue, 255);

		SDL_Rect cell = {antPos[0] * GRID_SIZE, antPos[1] * GRID_SIZE, GRID_SIZE, GRID_SIZE};
		SDL_RenderFillRect(renderer, &cell);

	//move ant
		if(gridCell[antPos[1]][antPos[0]]){
			antDir+=1;
		}else{
			antDir-=1;
		}
		antDir=(antDir+4)%4;

		int deltay[] = {0,1,0,-1};
		int deltax[] = {-1,0,1,0};

		antPos[0]+=deltax[antDir];
		antPos[1]+=deltay[antDir];

	    antPos[0] = (antPos[0] + GRID_ROWS) % GRID_ROWS;
   		antPos[1] = (antPos[1] + GRID_COLS) % GRID_COLS;
	
	//update cell
		gridCell[antPos[1]][antPos[0]]=!gridCell[antPos[1]][antPos[0]];


	//draw ant
		SDL_SetRenderDrawColor(renderer, antCol[0], antCol[1], antCol[2], 255);
		SDL_Rect antCell = {antPos[0] * GRID_SIZE, antPos[1] * GRID_SIZE, GRID_SIZE, GRID_SIZE};
		SDL_RenderFillRect(renderer, &antCell);

	// Present the renderer
		SDL_RenderPresent(renderer);
		
	printf(""x: %d "",antPos[0]);
	printf(""y: %d	"",antPos[1]);
	printf(""%d\n"",gridCell[antPos[0]][antPos[1]]);
}


int main() {
	srand(time(NULL));

	for (int i = 0; i < GRID_ROWS; ++i) {
		for (int j = 0; j < GRID_COLS; ++j) {
			gridCell[i][j] = ((i+4) / 8 + (j+3) / 8) % 2;
		}
	}
	

	// Initialize SDL
	if (SDL_Init(SDL_INIT_VIDEO) < 0) {
		std::cerr << ""SDL could not initialize! SDL_Error: "" << SDL_GetError() << std::endl;
		return 1;
	}

	// Create a window
	SDL_Window* window = SDL_CreateWindow(""Grid Renderer"", 3400, 600, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
	if (window == nullptr) {
		std::cerr << ""Window could not be created! SDL_Error: "" << SDL_GetError() << std::endl;
		return 2;
	}

	// Create a renderer for the window
	SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
	if (renderer == nullptr) {
		std::cerr << ""Renderer could not be created! SDL_Error: "" << SDL_GetError() << std::endl;
		return 3;
	}

	bool quit = false;
	SDL_Event e;

	renderWholeGrid(renderer);

	Uint32 startTime = SDL_GetTicks();
	startTime+=UPDATE_RATE;
	int updateWholeRate=1000; //update whole screen per x frames
	int frameNum=0;

	while (!quit) {
		frameNum++;
		if(frameNum>updateWholeRate){
			frameNum=0;
			renderWholeGrid(renderer);
		}

		while (SDL_PollEvent(&e) != 0) {
			if (e.type == SDL_QUIT) {
				quit = true;
			}
			if (e.type == SDL_KEYDOWN && e.key.keysym.sym == SDLK_ESCAPE) {
				quit = true;
			}
		}

		// Calculate the time to render a frame
		Uint32 frameTime = SDL_GetTicks() - startTime;

		// Wait for the remainder of the 1-second frame
		if (frameTime < UPDATE_RATE) {
			SDL_Delay(UPDATE_RATE - frameTime);
		}

		startTime = SDL_GetTicks();

		updateAnt(renderer);
	}

	// Clean up and exit
	SDL_DestroyRenderer(renderer);
	SDL_DestroyWindow(window);
	SDL_Quit();

	return 0;
}
"
vNzWXM3W,Untitled,GASIM_,Python,Tuesday 31st of October 2023 04:05:38 PM CDT,"import pandas as pd
import matplotlib.pyplot as plt

# Загрузка данных
data = pd.read_csv('/datasets/energy_consumption.csv', index_col=[0], parse_dates=[0])
data.sort_index(inplace=True)

# Группировка данных по годам и вычисление среднего потребления для каждого года
average_consumption_by_year = data.resample('1Y').mean()

# Построение графика
plt.figure(figsize=(10, 6))
plt.plot(average_consumption_by_year, marker='o', linestyle='-')
plt.xlabel('Год')
plt.ylabel('Среднее потребление электроэнергии (PJME_MW)')
plt.title('Среднее потребление электроэнергии по годам')
plt.grid(True)
plt.show()"
nyFmvxv3,Untitled,fatalryuu,PostgreSQL,Tuesday 31st of October 2023 04:01:36 PM CDT,"-- search with tags
		SELECT ""task"".*, 
        ""tags"".""id"" AS ""tags.id"", 
        ""tags"".""name"" AS ""tags.name"" 
        FROM(
        SELECT 
            ""task"".""id"", 
            ""task"".""title"", 
            ""task"".""description"", 
            ""task"".""authorId"", 
            ""task"".""updatedAt"" 
        FROM 
            career_day.""Tasks"" AS ""task"" ) AS ""task""
        LEFT OUTER JOIN (
            ""career_day"".""TaskToTag"" AS ""tags->TaskToTagEntity"" 
            INNER JOIN ""career_day"".""Tags"" AS ""tags"" 
            ON ""tags"".""id"" = ""tags->TaskToTagEntity"".""tagId""
        ) 
        ON ""task"".""id"" = ""tags->TaskToTagEntity"".""taskId""  
        GROUP BY 
            ""task"".id, 
            ""task"".title, 
            ""task"".description, 
            ""task"".""authorId"", 
            ""task"".""updatedAt"", 
            ""tags"".id, 
            ""tags"".name
        HAVING 
            ""task"".title LIKE '%%' 
        OR 
            ""task"".description LIKE '%%'	
        ORDER BY ""task"".""updatedAt"" DESC
-- without tags
		SELECT career_day.""Tasks"".id, career_day.""Tasks"".title,
        STRING_AGG(tag_names.name, ', ') AS tag_names
        FROM career_day.""Tasks""
        JOIN career_day.""TaskToTag"" ON career_day.""Tasks"".id = career_day.""TaskToTag"".""taskId""
        JOIN career_day.""Tags"" tag_names ON career_day.""TaskToTag"".""tagId"" = tag_names.id
        WHERE tag_names.name IN ('front-end', 'js')
        GROUP BY career_day.""Tasks"".id, career_day.""Tasks"".title
        HAVING COUNT(DISTINCT tag_names.name) = 2
		AND (career_day.""Tasks"".title LIKE '%%' OR career_day.""Tasks"".description LIKE '%%');
-- with tags		
		SELECT ""task"".*, 
        ""tags"".""id"" AS ""tags.id"", 
        ""tags"".""name"" AS ""tags.name"",
        STRING_AGG(tag_names.name, ', ') AS tag_names
        FROM(
        SELECT 
            ""task"".""id"", 
            ""task"".""title"", 
            ""task"".""description"", 
            ""task"".""authorId"", 
            ""task"".""updatedAt"" 
        FROM 
            career_day.""Tasks"" AS ""task"" 
        ) AS ""task""
        LEFT OUTER JOIN (
            ""career_day"".""TaskToTag"" AS ""tags->TaskToTagEntity"" 
            INNER JOIN ""career_day"".""Tags"" AS ""tags"" 
            ON ""tags"".""id"" = ""tags->TaskToTagEntity"".""tagId""
        ) 
        ON ""task"".""id"" = ""tags->TaskToTagEntity"".""taskId"" 
		LEFT JOIN ""career_day"".""Tags"" AS ""tag_names"" ON ""tags->TaskToTagEntity"".""tagId"" = ""tag_names"".""id""
        WHERE tag_names.name IN ('front-end')
        GROUP BY 
            ""task"".id, 
            ""task"".title, 
            ""task"".description, 
            ""task"".""authorId"", 
            ""task"".""updatedAt"", 
            ""tags"".id, 
            ""tags"".name
        HAVING COUNT(DISTINCT tag_names.name) = 1 
		AND (""task"".title LIKE '%%' OR ""task"".description LIKE '%%')
        ORDER BY ""task"".""updatedAt"" DESC;"
VJxDxnUt,fucking unworking Bin Heap,salexame,C++,Tuesday 31st of October 2023 03:48:02 PM CDT,"#include <iostream>

const long long kInf = 1e17;

struct Node {
  long long data;
  Node* parent = nullptr;
  int rank;
  int num = -1;
  std::vector<Node*> child;

  Node(long long value) : data(value), parent(nullptr), rank(0) {}

  int GetHeap() {
    Node* current = this;
    while (current->parent != nullptr) {
      current = current->parent;
    }
    return current->num;
  }
};

void SiftUp(Node* current) {
  while (current->parent != nullptr && current->data < current->parent->data) {
    std::swap(current->data, current->parent->data);
    current = current->parent;
  }
}

void SiftDown(Node* current) {
  while (current->child.size() > 0) {
    Node* min = nullptr;
    for (auto child_ : current->child) {
      if (min == nullptr || child_->data < min->data) {
        min = child_;
      }
    }
    if (min->data > current->data) {
      break;
    }
    std::swap(min->data, current->data);
    current = min;
  }
}

class BinHeap {
 public:
  Node* Add(long long value) {
    Node* node = new Node(value);
    node->num = num_;
    BinHeap tmp;
    tmp.root_[0] = node;
    Merge(tmp);
    UpdateMin();
    return node;
  }

  void SetNum(int num) { num_ = num; }

  BinHeap() : root_(20, nullptr) {}

  BinHeap(std::vector<Node*>&& heap) : root_(heap) {}

  void Merge(BinHeap& other) {
    Node* current = nullptr;
    for (int i = 0; i < 20; ++i) {
      auto merged = Merge(root_[i], other.root_[i]);
      other.root_[i] = nullptr;
      if (merged != nullptr) {
        if (current == nullptr) {
          if (merged->rank == i) {
            root_[i] = merged;
          } else {
            root_[i] = nullptr;
            current = merged;
          }
        } else {
          if (merged->rank == i) {
            current = Merge(current, merged);
            continue;
          } else {
            root_[i] = current;
            current = merged;
          }
        }
      } else {
        root_[i] = current;
        current = nullptr;
      }
    }
    UpdateMin();
  }

  Node* Merge(Node*& first, Node*& second) {
    if (first == nullptr) {
      if (second != nullptr) {
        second->num = num_;
      }
      return second;
    }
    if (second == nullptr) {
      return first;
    }
    if (first->data < second->data) {
      first->rank++;
      second->parent = first;
      first->child.push_back(second);
      return first;
    }
    first->parent = second;
    second->num = num_;
    second->child.push_back(first);
    return second;
  }

  void ExtractMin(Node* node) {
    BinHeap tmp(std::move(node->child));
    delete node;
    Merge(tmp);
    UpdateMin();
  }

  void Set(Node* node, int value) {
    int prev = node->data;
    node->data = value;
    if (value < prev) {
      SiftUp(node);
    } else {
      SiftDown(node);
    }
    UpdateMin();
  }

  void Erase(Node* node) {
    node->data -= kInf;
    SiftUp(node);
    ExtractMin(node);
    UpdateMin();
  }

  long long GetMin() {
    return min_->data;
  }

  Node* GetMinPtr() {
    return min_;
  }

 private:
  void UpdateMin() {
    Node* min = nullptr;
    for (int i = 0; i < 20; ++i) {
      if (root_[i] != nullptr) {
        if (min == nullptr || min->data > root_[i]->data) {
          min = root_[i];
        }
      }
    }
    min_ = min;
  }

  Node* min_;
  int num_;
  std::vector<Node*> root_;
};

void Request(std::vector<BinHeap>& heap, std::vector<Node*>& index) {
  int type;
  std::cin >> type;
  if (type == 0) {
    int value;
    int num;
    std::cin >> num >> value;
    index.push_back(heap[num - 1].Add(value));
  } else if (type == 1) {
    int first;
    int second;
    std::cin >> first >> second;
    heap[second - 1].Merge(heap[first - 1]);
    int aboba = 1;
  } else if (type == 2) {
    int idx;
    std::cin >> idx;
    int num_heap = index[idx - 1]->GetHeap();
    heap[num_heap].Erase(index[idx - 1]);
  } else if (type == 3) {
    int idx;
    int value;
    std::cin >> idx >> value;
    Node* node = index[idx - 1];
    int number = node->GetHeap();
    heap[number].Set(node, value);
  } else if (type == 4) {
    int idx;
    std::cin >> idx;
    std::cout << heap[idx - 1].GetMin() << '\n';
  } else if (type == 5) {
    int idx;
    std::cin >> idx;
    heap[idx - 1].ExtractMin(heap[idx - 1].GetMinPtr());
  }
}

signed main() {
  int count;
  int queries;
  std::cin >> count >> queries;
  std::vector<BinHeap> heap(count);
  for (int i = 0; i < count; ++i) {
    heap[i].SetNum(i);
  }
  std::vector<Node*> index;
  while (queries-- > 0) {
    Request(heap, index);
  }
}"
8sMWb5cN,3Klay's Data,azimuths,JSON,Tuesday 31st of October 2023 03:43:13 PM CDT,"{""Stats"":{""Key5"":{""ObjectName"":""Key5"",""ObjectClass"":""StringValue"",""ObjectValue"":""5""},""PrimaryCN"":{""ObjectName"":""PrimaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""mapmove1"":{""ObjectName"":""mapmove1"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TrainingEXP"":{""ObjectName"":""TrainingEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key12"":{""ObjectName"":""Key12"",""ObjectClass"":""StringValue"",""ObjectValue"":""=""},""Blind"":{""ObjectName"":""Blind"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""Slot2"":{""ObjectName"":""Slot2"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TailedBeastLevel"":{""ObjectName"":""TailedBeastLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CombatEXP"":{""ObjectName"":""CombatEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Personality"":{""ObjectName"":""Personality"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""GripCount"":{""ObjectName"":""GripCount"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Marking"":{""ObjectName"":""Marking"",""ObjectClass"":""IntValue"",""ObjectValue"":""69""},""SkinColor"":{""ObjectName"":""SkinColor"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""RP"":{""ObjectName"":""RP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot="":{""ObjectName"":""Slot="",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Slot11"":{""ObjectName"":""Slot11"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""MSAbility1"":{""ObjectName"":""MSAbility1"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""KPos"":{""ObjectName"":""KPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LINDAMINISTARTUP"":{""ObjectName"":""LINDAMINISTARTUP"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""Slot4"":{""ObjectName"":""Slot4"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Slot9"":{""ObjectName"":""Slot9"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Version"":{""ObjectName"":""Version"",""ObjectClass"":""IntValue"",""ObjectValue"":""70""},""HairColorR"":{""ObjectName"":""HairColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""98""},""Key4"":{""ObjectName"":""Key4"",""ObjectClass"":""StringValue"",""ObjectValue"":""4""},""CurseMarkLevel"":{""ObjectName"":""CurseMarkLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key2"":{""ObjectName"":""Key2"",""ObjectClass"":""StringValue"",""ObjectValue"":""2""},""Genjutsu"":{""ObjectName"":""Genjutsu"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SwordSave"":{""ObjectName"":""SwordSave"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuXP"":{""ObjectName"":""BijuuXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key3"":{""ObjectName"":""Key3"",""ObjectClass"":""StringValue"",""ObjectValue"":""3""},""BonusSkillPoints"":{""ObjectName"":""BonusSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorB"":{""ObjectName"":""CColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosY"":{""ObjectName"":""PosY"",""ObjectClass"":""IntValue"",""ObjectValue"":""1277""},""SPR"":{""ObjectName"":""SPR"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""BijuuConvo"":{""ObjectName"":""BijuuConvo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""jincooldown"":{""ObjectName"":""jincooldown"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Ken"":{""ObjectName"":""Ken"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Scar"":{""ObjectName"":""Scar"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot12"":{""ObjectName"":""Slot12"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""RecentTrainings"":{""ObjectName"":""RecentTrainings"",""ObjectClass"":""StringValue"",""ObjectValue"":""{}""},""EyeColorR"":{""ObjectName"":""EyeColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""60""},""HairColorG"":{""ObjectName"":""HairColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""66""},""RaidCD"":{""ObjectName"":""RaidCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot6"":{""ObjectName"":""Slot6"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""HairColorB"":{""ObjectName"":""HairColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""34""},""Gender"":{""ObjectName"":""Gender"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""MSAbility2"":{""ObjectName"":""MSAbility2"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Kids"":{""ObjectName"":""Kids"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryWep"":{""ObjectName"":""SecondaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""PosZ"":{""ObjectName"":""PosZ"",""ObjectClass"":""IntValue"",""ObjectValue"":""3545""},""UnlockedCloak"":{""ObjectName"":""UnlockedCloak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CloakTime"":{""ObjectName"":""CloakTime"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuRelation"":{""ObjectName"":""BijuuRelation"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Prestige"":{""ObjectName"":""Prestige"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Elo"":{""ObjectName"":""Elo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosX"":{""ObjectName"":""PosX"",""ObjectClass"":""IntValue"",""ObjectValue"":""223""},""Mangekyo"":{""ObjectName"":""Mangekyo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastGripped"":{""ObjectName"":""LastGripped"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastAge"":{""ObjectName"":""LastAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key11"":{""ObjectName"":""Key11"",""ObjectClass"":""StringValue"",""ObjectValue"":""-""},""AwakenCD"":{""ObjectName"":""AwakenCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastStomach"":{""ObjectName"":""LastStomach"",""ObjectClass"":""IntValue"",""ObjectValue"":""174""},""ChakraArmorRGB"":{""ObjectName"":""ChakraArmorRGB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Mastered"":{""ObjectName"":""Mastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HandsignTraining"":{""ObjectName"":""HandsignTraining"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""WipeLog"":{""ObjectName"":""WipeLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot10"":{""ObjectName"":""Slot10"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Key9"":{""ObjectName"":""Key9"",""ObjectClass"":""StringValue"",""ObjectValue"":""9""},""Slot5"":{""ObjectName"":""Slot5"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Slot7"":{""ObjectName"":""Slot7"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""RESTORE"":{""ObjectName"":""RESTORE"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TailedBeast"":{""ObjectName"":""TailedBeast"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ItemSave"":{""ObjectName"":""ItemSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TimesRerolled"":{""ObjectName"":""TimesRerolled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurseMarkEXP"":{""ObjectName"":""CurseMarkEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HBChoice"":{""ObjectName"":""HBChoice"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""WeaponSave"":{""ObjectName"":""WeaponSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""PrimaryWep"":{""ObjectName"":""PrimaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""OriginalVillage"":{""ObjectName"":""OriginalVillage"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""BijuuSealed"":{""ObjectName"":""BijuuSealed"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Name"":{""ObjectName"":""Name"",""ObjectClass"":""StringValue"",""ObjectValue"":""Stiches""},""SeenDeaths"":{""ObjectName"":""SeenDeaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Parentq"":{""ObjectName"":""Parentq"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastChakra"":{""ObjectName"":""LastChakra"",""ObjectClass"":""IntValue"",""ObjectValue"":""405""},""Influence"":{""ObjectName"":""Influence"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""EyeColorG"":{""ObjectName"":""EyeColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""38""},""RU"":{""ObjectName"":""RU"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""DateRecord"":{""ObjectName"":""DateRecord"",""ObjectClass"":""IntValue"",""ObjectValue"":""1655""},""logcheck"":{""ObjectName"":""logcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot-"":{""ObjectName"":""Slot-"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""PrimaryAmmo"":{""ObjectName"":""PrimaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""FamilyID"":{""ObjectName"":""FamilyID"",""ObjectClass"":""StringValue"",""ObjectValue"":""Stiches(15)1595681""},""IsExiled"":{""ObjectName"":""IsExiled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key8"":{""ObjectName"":""Key8"",""ObjectClass"":""StringValue"",""ObjectValue"":""8""},""Slot3"":{""ObjectName"":""Slot3"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""HideName"":{""ObjectName"":""HideName"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Blindness"":{""ObjectName"":""Blindness"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""MaxAge"":{""ObjectName"":""MaxAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PDLog"":{""ObjectName"":""PDLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BerserkTimes"":{""ObjectName"":""BerserkTimes"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SpentSkillPoints"":{""ObjectName"":""SpentSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ToggleAccessories"":{""ObjectName"":""ToggleAccessories"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key6"":{""ObjectName"":""Key6"",""ObjectClass"":""StringValue"",""ObjectValue"":""6""},""berserkcheck"":{""ObjectName"":""berserkcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""EyeColorB"":{""ObjectName"":""EyeColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""160""},""Slot1"":{""ObjectName"":""Slot1"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""AgeLimit"":{""ObjectName"":""AgeLimit"",""ObjectClass"":""IntValue"",""ObjectValue"":""2400""},""Key10"":{""ObjectName"":""Key10"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""BDAYS"":{""ObjectName"":""BDAYS"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""GrandParentID"":{""ObjectName"":""GrandParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TailedBeastMastered"":{""ObjectName"":""TailedBeastMastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot0"":{""ObjectName"":""Slot0"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""LeftEye"":{""ObjectName"":""LeftEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""Bank"":{""ObjectName"":""Bank"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""AnbuLog"":{""ObjectName"":""AnbuLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ResetPos"":{""ObjectName"":""ResetPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SkillPoints"":{""ObjectName"":""SkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""7""},""Rank"":{""ObjectName"":""Rank"",""ObjectClass"":""IntValue"",""ObjectValue"":""6""},""MissionEXP"":{""ObjectName"":""MissionEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastKilledUser"":{""ObjectName"":""LastKilledUser"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Trauma"":{""ObjectName"":""Trauma"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MissionSuccess"":{""ObjectName"":""MissionSuccess"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurrentWep"":{""ObjectName"":""CurrentWep"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""WeaveSpeed"":{""ObjectName"":""WeaveSpeed"",""ObjectClass"":""IntValue"",""ObjectValue"":""20""},""ParentID"":{""ObjectName"":""ParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""LastHealth"":{""ObjectName"":""LastHealth"",""ObjectClass"":""IntValue"",""ObjectValue"":""233""},""RyoRES"":{""ObjectName"":""RyoRES"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MaxRank"":{""ObjectName"":""MaxRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""24""},""Ryo"":{""ObjectName"":""Ryo"",""ObjectClass"":""IntValue"",""ObjectValue"":""100""},""CColorR"":{""ObjectName"":""CColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key7"":{""ObjectName"":""Key7"",""ObjectClass"":""StringValue"",""ObjectValue"":""7""},""SecondaryAmmo"":{""ObjectName"":""SecondaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""RightEye"":{""ObjectName"":""RightEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""DefaultMouth"":{""ObjectName"":""DefaultMouth"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CanRank"":{""ObjectName"":""CanRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""startnewlife"":{""ObjectName"":""startnewlife"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TailedBeastEXP"":{""ObjectName"":""TailedBeastEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorG"":{""ObjectName"":""CColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MaxTails"":{""ObjectName"":""MaxTails"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Village"":{""ObjectName"":""Village"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""Age"":{""ObjectName"":""Age"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""bald"":{""ObjectName"":""bald"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Deaths"":{""ObjectName"":""Deaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryCN"":{""ObjectName"":""SecondaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""4""},""KillStreak"":{""ObjectName"":""KillStreak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot8"":{""ObjectName"":""Slot8"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Key1"":{""ObjectName"":""Key1"",""ObjectClass"":""StringValue"",""ObjectValue"":""1""},""kek"":{""ObjectName"":""kek"",""ObjectClass"":""IntValue"",""ObjectValue"":""15""},""Title"":{""ObjectName"":""Title"",""ObjectClass"":""StringValue"",""ObjectValue"":""Academy Student""},""Wiped"":{""ObjectName"":""Wiped"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""}},""Skilltree"":{""Trash"":{""ObjectName"":""Trash"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""}},""Copy"":[]}"
335DbCCG,3Klay's Data,azimuths,JSON,Tuesday 31st of October 2023 03:37:00 PM CDT,"{""Stats"":{""Key5"":{""ObjectName"":""Key5"",""ObjectClass"":""StringValue"",""ObjectValue"":""5""},""MaxRank"":{""ObjectName"":""MaxRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""24""},""mapmove1"":{""ObjectName"":""mapmove1"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TrainingEXP"":{""ObjectName"":""TrainingEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key12"":{""ObjectName"":""Key12"",""ObjectClass"":""StringValue"",""ObjectValue"":""=""},""Blind"":{""ObjectName"":""Blind"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""CanRank"":{""ObjectName"":""CanRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""TailedBeastLevel"":{""ObjectName"":""TailedBeastLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CombatEXP"":{""ObjectName"":""CombatEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Personality"":{""ObjectName"":""Personality"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""GripCount"":{""ObjectName"":""GripCount"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""Marking"":{""ObjectName"":""Marking"",""ObjectClass"":""IntValue"",""ObjectValue"":""69""},""SkinColor"":{""ObjectName"":""SkinColor"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""RP"":{""ObjectName"":""RP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ToggleAccessories"":{""ObjectName"":""ToggleAccessories"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot11"":{""ObjectName"":""Slot11"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""MSAbility1"":{""ObjectName"":""MSAbility1"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""KPos"":{""ObjectName"":""KPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LINDAMINISTARTUP"":{""ObjectName"":""LINDAMINISTARTUP"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""Slot4"":{""ObjectName"":""Slot4"",""ObjectClass"":""StringValue"",""ObjectValue"":""Crystal Prison""},""Slot9"":{""ObjectName"":""Slot9"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Version"":{""ObjectName"":""Version"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HairColorR"":{""ObjectName"":""HairColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""94""},""EyeColorG"":{""ObjectName"":""EyeColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""113""},""CurseMarkLevel"":{""ObjectName"":""CurseMarkLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key2"":{""ObjectName"":""Key2"",""ObjectClass"":""StringValue"",""ObjectValue"":""2""},""Genjutsu"":{""ObjectName"":""Genjutsu"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SwordSave"":{""ObjectName"":""SwordSave"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuXP"":{""ObjectName"":""BijuuXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SeenDeaths"":{""ObjectName"":""SeenDeaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BonusSkillPoints"":{""ObjectName"":""BonusSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorB"":{""ObjectName"":""CColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosY"":{""ObjectName"":""PosY"",""ObjectClass"":""IntValue"",""ObjectValue"":""155""},""SPR"":{""ObjectName"":""SPR"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""BijuuConvo"":{""ObjectName"":""BijuuConvo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""jincooldown"":{""ObjectName"":""jincooldown"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Ken"":{""ObjectName"":""Ken"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Scar"":{""ObjectName"":""Scar"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot12"":{""ObjectName"":""Slot12"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""RecentTrainings"":{""ObjectName"":""RecentTrainings"",""ObjectClass"":""StringValue"",""ObjectValue"":""[\""Weighted Gear\"",\""Pushup Training\"",\""Spar Training\""]""},""EyeColorR"":{""ObjectName"":""EyeColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""90""},""HairColorG"":{""ObjectName"":""HairColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""112""},""RaidCD"":{""ObjectName"":""RaidCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot6"":{""ObjectName"":""Slot6"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""HairColorB"":{""ObjectName"":""HairColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""137""},""Gender"":{""ObjectName"":""Gender"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""MSAbility2"":{""ObjectName"":""MSAbility2"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Kids"":{""ObjectName"":""Kids"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryWep"":{""ObjectName"":""SecondaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""PaperBomb""},""PosZ"":{""ObjectName"":""PosZ"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""UnlockedCloak"":{""ObjectName"":""UnlockedCloak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CloakTime"":{""ObjectName"":""CloakTime"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuRelation"":{""ObjectName"":""BijuuRelation"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Prestige"":{""ObjectName"":""Prestige"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Elo"":{""ObjectName"":""Elo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TailedBeastMastered"":{""ObjectName"":""TailedBeastMastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Mangekyo"":{""ObjectName"":""Mangekyo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastGripped"":{""ObjectName"":""LastGripped"",""ObjectClass"":""IntValue"",""ObjectValue"":""1049061916""},""LastAge"":{""ObjectName"":""LastAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key11"":{""ObjectName"":""Key11"",""ObjectClass"":""StringValue"",""ObjectValue"":""-""},""AwakenCD"":{""ObjectName"":""AwakenCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastStomach"":{""ObjectName"":""LastStomach"",""ObjectClass"":""IntValue"",""ObjectValue"":""198""},""ChakraArmorRGB"":{""ObjectName"":""ChakraArmorRGB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Mastered"":{""ObjectName"":""Mastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HandsignTraining"":{""ObjectName"":""HandsignTraining"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""WipeLog"":{""ObjectName"":""WipeLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot10"":{""ObjectName"":""Slot10"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Key9"":{""ObjectName"":""Key9"",""ObjectClass"":""StringValue"",""ObjectValue"":""9""},""Slot5"":{""ObjectName"":""Slot5"",""ObjectClass"":""StringValue"",""ObjectValue"":""Crystal Command""},""Slot7"":{""ObjectName"":""Slot7"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""RESTORE"":{""ObjectName"":""RESTORE"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TailedBeast"":{""ObjectName"":""TailedBeast"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ItemSave"":{""ObjectName"":""ItemSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TimesRerolled"":{""ObjectName"":""TimesRerolled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurseMarkEXP"":{""ObjectName"":""CurseMarkEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HBChoice"":{""ObjectName"":""HBChoice"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""WeaponSave"":{""ObjectName"":""WeaponSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""PrimaryWep"":{""ObjectName"":""PrimaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""OriginalVillage"":{""ObjectName"":""OriginalVillage"",""ObjectClass"":""IntValue"",""ObjectValue"":""6""},""BijuuSealed"":{""ObjectName"":""BijuuSealed"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Name"":{""ObjectName"":""Name"",""ObjectClass"":""StringValue"",""ObjectValue"":""MadeinChina""},""Parentq"":{""ObjectName"":""Parentq"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key3"":{""ObjectName"":""Key3"",""ObjectClass"":""StringValue"",""ObjectValue"":""3""},""LastChakra"":{""ObjectName"":""LastChakra"",""ObjectClass"":""IntValue"",""ObjectValue"":""315""},""Influence"":{""ObjectName"":""Influence"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PrimaryCN"":{""ObjectName"":""PrimaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""RU"":{""ObjectName"":""RU"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key8"":{""ObjectName"":""Key8"",""ObjectClass"":""StringValue"",""ObjectValue"":""8""},""logcheck"":{""ObjectName"":""logcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot-"":{""ObjectName"":""Slot-"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""PrimaryAmmo"":{""ObjectName"":""PrimaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""FamilyID"":{""ObjectName"":""FamilyID"",""ObjectClass"":""StringValue"",""ObjectValue"":""MadeinChina(18)337603""},""Slot="":{""ObjectName"":""Slot="",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""IsExiled"":{""ObjectName"":""IsExiled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot3"":{""ObjectName"":""Slot3"",""ObjectClass"":""StringValue"",""ObjectValue"":""Crystal Crossing""},""GrandParentID"":{""ObjectName"":""GrandParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Blindness"":{""ObjectName"":""Blindness"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""AnbuLog"":{""ObjectName"":""AnbuLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PDLog"":{""ObjectName"":""PDLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BerserkTimes"":{""ObjectName"":""BerserkTimes"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SpentSkillPoints"":{""ObjectName"":""SpentSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""-5""},""HideName"":{""ObjectName"":""HideName"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key6"":{""ObjectName"":""Key6"",""ObjectClass"":""StringValue"",""ObjectValue"":""6""},""berserkcheck"":{""ObjectName"":""berserkcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""EyeColorB"":{""ObjectName"":""EyeColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""159""},""Slot1"":{""ObjectName"":""Slot1"",""ObjectClass"":""StringValue"",""ObjectValue"":""Crystal Blade""},""DateRecord"":{""ObjectName"":""DateRecord"",""ObjectClass"":""IntValue"",""ObjectValue"":""1655""},""Key10"":{""ObjectName"":""Key10"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""BDAYS"":{""ObjectName"":""BDAYS"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""Key4"":{""ObjectName"":""Key4"",""ObjectClass"":""StringValue"",""ObjectValue"":""4""},""MaxAge"":{""ObjectName"":""MaxAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryAmmo"":{""ObjectName"":""SecondaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""7""},""AgeLimit"":{""ObjectName"":""AgeLimit"",""ObjectClass"":""IntValue"",""ObjectValue"":""2400""},""DefaultMouth"":{""ObjectName"":""DefaultMouth"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""startnewlife"":{""ObjectName"":""startnewlife"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ResetPos"":{""ObjectName"":""ResetPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SkillPoints"":{""ObjectName"":""SkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""Rank"":{""ObjectName"":""Rank"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""LeftEye"":{""ObjectName"":""LeftEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""LastKilledUser"":{""ObjectName"":""LastKilledUser"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Trauma"":{""ObjectName"":""Trauma"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MissionSuccess"":{""ObjectName"":""MissionSuccess"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurrentWep"":{""ObjectName"":""CurrentWep"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""Slot0"":{""ObjectName"":""Slot0"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""WeaveSpeed"":{""ObjectName"":""WeaveSpeed"",""ObjectClass"":""IntValue"",""ObjectValue"":""20""},""LastHealth"":{""ObjectName"":""LastHealth"",""ObjectClass"":""IntValue"",""ObjectValue"":""224""},""RyoRES"":{""ObjectName"":""RyoRES"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MissionEXP"":{""ObjectName"":""MissionEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Ryo"":{""ObjectName"":""Ryo"",""ObjectClass"":""IntValue"",""ObjectValue"":""84""},""CColorR"":{""ObjectName"":""CColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key7"":{""ObjectName"":""Key7"",""ObjectClass"":""StringValue"",""ObjectValue"":""7""},""Slot2"":{""ObjectName"":""Slot2"",""ObjectClass"":""StringValue"",""ObjectValue"":""Earth Pillar""},""RightEye"":{""ObjectName"":""RightEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""Bank"":{""ObjectName"":""Bank"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosX"":{""ObjectName"":""PosX"",""ObjectClass"":""IntValue"",""ObjectValue"":""-1""},""ParentID"":{""ObjectName"":""ParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TailedBeastEXP"":{""ObjectName"":""TailedBeastEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorG"":{""ObjectName"":""CColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MaxTails"":{""ObjectName"":""MaxTails"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Deaths"":{""ObjectName"":""Deaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Age"":{""ObjectName"":""Age"",""ObjectClass"":""IntValue"",""ObjectValue"":""14""},""Village"":{""ObjectName"":""Village"",""ObjectClass"":""IntValue"",""ObjectValue"":""6""},""bald"":{""ObjectName"":""bald"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryCN"":{""ObjectName"":""SecondaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""KillStreak"":{""ObjectName"":""KillStreak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot8"":{""ObjectName"":""Slot8"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Key1"":{""ObjectName"":""Key1"",""ObjectClass"":""StringValue"",""ObjectValue"":""1""},""kek"":{""ObjectName"":""kek"",""ObjectClass"":""IntValue"",""ObjectValue"":""18""},""Title"":{""ObjectName"":""Title"",""ObjectClass"":""StringValue"",""ObjectValue"":""Academy Student""},""Wiped"":{""ObjectName"":""Wiped"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""}},""Skilltree"":{""Trash"":{""ObjectName"":""Trash"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""}},""Copy"":[]}"
ksgyfKCp,go_to,Fisk__,Lua,Tuesday 31st of October 2023 03:33:42 PM CDT,"function test_direction()
    local x0,y0,z0 = gps.locate()
    if not x0 then 
        print(""Failed to get my location"")
    else
        block_front()
        turtle.forward()
        local x,y,z = gps.locate()
        if not x then 
            print(""Failed to get my location"")
        else
            if x-x0 ~= 0 then
                if x-x0 == 1 then
                    print(""Facing East"")
                    direction = ""east""
                    turtle.back()
                else
                    print(""Facing West"")
                    direction = ""west""
                    turtle.back()
                end
            else if z-z0 ~= 0 then
                if z-z0 == 1 then
                    print(""Facing South"")
                    direction = ""south""
                    turtle.back()
                else
                    print(""Facing North"")
                    direction = ""north""
                    turtle.back()
                end
            end 
        end
    end
end
return direction
end

function stuck_under()
    if turtle.detectUp() == true then
        turtle.back()
        stuck_under()
        offset = offset + 1
    end
end
function block_front()
    if turtle.detect() == true then
        stuck_under()
        turtle.up()
        y0 = y0+1
        block_front()
    end
end

function move_forward(i)
    offset = 0
    for i=i,1,-1
    do block_front()
        turtle.forward()
        if turtle.getFuelLevel() < 10 then
            local success = turtle.refuel()
            if success == false then
                peripheral.find(""modem"", rednet.open)
                local x,y,z = gps.locate()
                rednet.broadcast(""I'm out of fuel at ""..x.."",""..y.."",""..z)
            end
        end
    end
    if offset > 0 then
        move_forward(offset)
    end
end

function go_to(x,y,z)
    x0,y0,z0 = gps.locate()
    if not x0 then 
        print(""Failed to get my location"")
    else
        delta_x = x-x0
        delta_z = z-z0
        if delta_x > 0 then
            print(""I need to go east"")
            local facing = test_direction()
            if facing == ""east"" then
                move_forward(delta_x)
                else if facing == ""west"" then
                    turtle.turnLeft()
                    turtle.turnLeft()
                    move_forward(delta_x)
                else if facing == ""north"" then
                    turtle.turnRight()
                    move_forward(delta_x)
                else if facing == ""south"" then
                    turtle.turnLeft()
                    move_forward(delta_x)
                end
                end
                end
            end
        
        else if delta_x<0 then
                print(""I need to go west"")
                local facing = test_direction()
                if facing == ""west"" then
                    move_forward(delta_x*(-1))
                else if facing == ""east"" then
                    turtle.turnLeft()
                    turtle.turnLeft()
                    move_forward(delta_x*(-1))
                else if facing == ""south"" then
                    turtle.turnRight()
                    move_forward(delta_x*(-1))
                else if facing == ""north"" then
                    turtle.turnLeft()
                    move_forward(delta_x*(-1))
                end
                end
                end
                end
            end
        end
        if delta_z<0 then
                print(""I need to go north"")
                local facing = test_direction()
                if facing == ""north"" then
                    move_forward(delta_z*(-1))
                else if facing == ""south"" then
                    turtle.turnLeft()
                    turtle.turnLeft()
                    move_forward(delta_z*(-1))
                else if facing == ""west"" then
                    turtle.turnRight()
                    move_forward(delta_z*(-1))
                else if facing == ""east"" then
                    turtle.turnLeft()
                    move_forward(delta_z*(-1))
                end
                end
                end
                end
            else if delta_z>0 then
                print(""I need to go south"")
                local facing = test_direction()
                if facing == ""south"" then
                    move_forward(delta_z)
                else if facing == ""north"" then
                    turtle.turnLeft()
                    turtle.turnLeft()
                    move_forward(delta_z)
                else if facing == ""east"" then
                    turtle.turnRight()
                    move_forward(delta_z)
                else if facing == ""west"" then
                    turtle.turnLeft()
                    move_forward(delta_z)
                end
                end
                end
                end
            end
        end
        delta_y = y-y0
            if delta_y > 0 then
            for i=delta_y,1,-1
            do turtle.up()
                end
            else if delta_y < 0 then
            for i=delta_y,1,1
            do turtle.down()
                end
            end
            end
    end
end
"
0bJRCfsD,JavaScript text compression [WIP],Mangus875,JavaScript,Tuesday 31st of October 2023 03:13:23 PM CDT,"const numToBin = num => num.toString(2);
const binToNum = bin => parseInt(bin,2);

function buildTree(freqs) {
	let tree = [];
	let sorted = [];
	let check = 1;
	// sort chars by frequency
	while (sorted.length != Object.keys(freqs).length) {
		for (const i in freqs) {
			if (freqs[i] == check) {
				sorted.push(i);
			}
		}
		check++;
	}
	// sorted.reverse();
	tree = sorted.map((v) => {
		return [v, freqs[v]]
	});
	// console.log(sorted);
	
	// create tree
	while (tree.length > 1) {
		let newElem = [[tree[0][0],tree[1][0]], tree[0][1]+tree[1][1]];
		
		tree = tree.slice(2);
		let slot = 0;
		while (slot < tree.length && tree[slot+1][1] <= newElem[1]) {
			slot++;
		}
		tree.splice(slot+1, 0, newElem);
	}
	
	let newTree = [];
	
	return tree;
}

function assignKeys(tree) {
	let keys = [];
}

function compressText(txt) {
	let chars = [];
	let freqs = [];
	for (let i = 0; i < txt.length; i++) {
		let code = txt[i].charCodeAt(0);
		
		if (freqs[txt[i]] == undefined) {
			freqs[txt[i]] = 1;
		} else {
			freqs[txt[i]]++;
		}
		
		chars.push(code);
	}
	
	console.log(buildTree(freqs));
}
compressText(""The FitnessGram Pacer Test is a multistage aerobic capacity test that progressively gets more difficult as it continues. The 20 meter pacer test will begin in 30 seconds. Line up at the start. The running speed starts slowly, but gets faster each minute after you hear this signal. [beep] A single lap should be completed each time you hear this sound. [ding] Remember to run in a straight line, and run as long as possible. The second time you fail to complete a lap before the sound, your test is over. The test will begin on the word start. On your mark, get ready, start."");

function decompressText(data) {}"
VifQnNF3,GraFilip,cuniszkiewicz,C#,Tuesday 31st of October 2023 03:10:37 PM CDT,"namespace grafilip
{
    class Program
    {
        static void Main(string[] args)
        {
            int liczbaWygrywajaca = 5;
            int liczbaGracza;
            bool podpowiedzi = false;
            char decyzjaKoniec;

        Poczatek:
            Console.Clear();
            Console.WriteLine(""Podaj liczbe od 1-10: "");
            liczbaGracza = int.Parse(Console.ReadLine());
            Console.Clear();
            if (liczbaGracza == 5)
            {
                Console.WriteLine(""Wygrales"");

            }
            else
            {
                Console.WriteLine(""rzegrales"");
                Console.WriteLine();
                Console.WriteLine();
            }
            Console.WriteLine(""Czy chcesz zagrac ponownie? t-tak n-nie: "");
            decyzjaKoniec = char.Parse(Console.ReadLine());
            if (decyzjaKoniec == 't')
            {
                goto Poczatek;
            }
            else
            {
                Console.Clear();
                Console.WriteLine(""\n\n\n\n\n\n\t\t\t\t\t\t\t\tDziekuje za skorzystanie z gry."");
            }

        }
    }
}
"
qrJAWbjw,Porownanie3Liczb,cuniszkiewicz,C#,Tuesday 31st of October 2023 03:09:37 PM CDT,"namespace porownanie3liczb
{
    class Program
    {


        static void Main(string[] args)
        {
            int a, b, c;

            char decyzjaKoniec;
        poczatek:
            Console.Clear();
            Console.WriteLine(""Podaj a: "");
            a = int.Parse(Console.ReadLine());


            Console.WriteLine(""Podaj b: "");
            b = int.Parse(Console.ReadLine());


            Console.WriteLine(""Podaj c: "");
            c = int.Parse(Console.ReadLine());

            Console.Clear();

            // a najwieksze
            if (a > b && a > c)
            {

                if (b > c)
                {
                    Console.WriteLine($""{a} > {b} > {c}"");
                }
                else
                {
                    Console.WriteLine($""{a} > {c} > {b}"");
                }

            }

            //b najwieksze
            if (b > a && b > c)
            {

                if (a > c)
                {
                    Console.WriteLine($""{b} > {a} > {c}"");
                }
                else
                {
                    Console.WriteLine($""{b} > {c} > {a}"");
                }
            }
            //c najwieksze
            if (c > a && c > b)
            {

                if (b > a)
                {
                    Console.WriteLine($""{c} > {b} > {a}"");
                }
                else
                {
                    Console.WriteLine($""{c} > {a} > {b}"");
                }
            }
            Console.ReadKey();

            Console.WriteLine(""czy chcesz kontynuowac? t-tak n-nie: "");
            decyzjaKoniec = char.Parse(Console.ReadLine());
            if (decyzjaKoniec == 't')
            {
                goto poczatek;
            }
            else
            {
                Console.Clear();
                Console.WriteLine(""\n\n\n\n\t\t\t\t\t\tdziekuje za skorzystanie z programu."");
            }
            //Console.ReadKey();
            System.Threading.Thread.Sleep(3000); // zatrzymanie programu na trzy sekundy

        }

    }
}
"
