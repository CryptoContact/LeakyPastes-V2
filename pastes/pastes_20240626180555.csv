id,title,username,language,date,content
dY83c3Zh,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V3 üéÅ,ssss50ws,GetText,Wednesday 26th of June 2024 01:03:44 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!.
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
26 June 2024"
DP4XcMyf,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,x3kiN,JavaScript,Wednesday 26th of June 2024 01:02:14 PM CDT,"G2A.com complimentary voucher & games guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24th 2024

"
xv1Xved0,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V2 üéÅ,BitcoinScript2020,GetText,Wednesday 26th of June 2024 01:01:37 PM CDT,"G2A.com free gift card & games updated guide,
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
26 June 2024"
vvVYrVtC,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,FeasModz514,JavaScript,Wednesday 26th of June 2024 12:56:11 PM CDT,"G2A.com complimentary voucher & gaming guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
24th of June 2024

"
XGqdHyHA,Herecom with summary,roma2341,JSON,Wednesday 26th of June 2024 12:55:21 PM CDT,"{
    ""routes"": [
        {
            ""id"": ""ade1af2c-5d33-4bde-b7a3-6954670553b9"",
            ""sections"": [
                {
                    ""id"": ""7339d833-79f3-4177-b281-47bed00ff1b9"",
                    ""type"": ""vehicle"",
                    ""departure"": {
                        ""time"": ""2024-06-26T19:54:19+02:00"",
                        ""place"": {
                            ""type"": ""place"",
                            ""location"": {
                                ""lat"": 52.5309837,
                                ""lng"": 13.384567
                            },
                            ""originalLocation"": {
                                ""lat"": 52.5307999,
                                ""lng"": 13.3847
                            }
                        }
                    },
                    ""arrival"": {
                        ""time"": ""2024-06-26T19:54:57+02:00"",
                        ""place"": {
                            ""type"": ""place"",
                            ""location"": {
                                ""lat"": 52.5310698,
                                ""lng"": 13.3870416
                            },
                            ""originalLocation"": {
                                ""lat"": 52.5309999,
                                ""lng"": 13.3866999
                            },
                            ""waypoint"": 0
                        }
                    },
                    ""summary"": {
                        ""duration"": 38,
                        ""length"": 213,
                        ""baseDuration"": 32
                    },
                    ""polyline"": ""BGwynmkDu39wZkEmP8BoGsEoQwCsJsEkSoBoG8BsJsE0U8BgK8BoLoB4IoB0KjIkDvRwJ"",
                    ""transport"": {
                        ""mode"": ""car""
                    }
                },
                {
                    ""id"": ""9e78eae4-02d3-4762-ade9-edfbba9d8b0d"",
                    ""type"": ""vehicle"",
                    ""departure"": {
                        ""time"": ""2024-06-26T19:54:57+02:00"",
                        ""place"": {
                            ""type"": ""place"",
                            ""location"": {
                                ""lat"": 52.5310698,
                                ""lng"": 13.3870416
                            },
                            ""originalLocation"": {
                                ""lat"": 52.5309999,
                                ""lng"": 13.3866999
                            },
                            ""waypoint"": 0
                        }
                    },
                    ""arrival"": {
                        ""time"": ""2024-06-26T19:57:53+02:00"",
                        ""place"": {
                            ""type"": ""place"",
                            ""location"": {
                                ""lat"": 52.5323264,
                                ""lng"": 13.378874
                            },
                            ""originalLocation"": {
                                ""lat"": 52.5323,
                                ""lng"": 13.3789
                            }
                        }
                    },
                    ""summary"": {
                        ""duration"": 176,
                        ""length"": 907,
                        ""baseDuration"": 162
                    },
                    ""polyline"": ""BG83nmkDkyixZvM4GvbgP7BjIvC7G_Yj6B7B3DnV3wBzK_YjIrT8VvbsOvR0F7G4D_EgKvM0UzZsE_EoGzF0FnGoGvHsOvR8L3NkSvWoGvHsEzFgFvHkD3IwHrJwHrJgKjN4D_E0ezoBjInV3N_iBzJ_Z"",
                    ""transport"": {
                        ""mode"": ""car""
                    }
                }
            ]
        }
    ]
}"
kcMRD5ts,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,kjihu25,JavaScript,Wednesday 26th of June 2024 12:50:07 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any item for free on G2A.com including Playstation gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24th 2024

"
c6Dwnc1G,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,Bufayez,JavaScript,Wednesday 26th of June 2024 12:44:04 PM CDT,"G2A.com free voucher & gaming guide.
Any gift card for free on G2A.com including Steam gift cards & all else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24th 2024

"
g9HgZuYE,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 3 üéÅ,jusst2k4,GetText,Wednesday 26th of June 2024 12:39:02 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_822921.pdf
 
Working as of:
26 June 2024"
b7Ns950H,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,buch,JavaScript,Wednesday 26th of June 2024 12:38:00 PM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
24th of June 2024

"
E4e1vCiy,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,Alfonso1119,JavaScript,Wednesday 26th of June 2024 12:31:58 PM CDT,"G2A.com free voucher & games guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24 2024

"
JCPTjeLv,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,Garoam,JavaScript,Wednesday 26th of June 2024 12:25:51 PM CDT,"G2A.com complimentary gift card & games guide.
Any voucher for free on G2A.com including Playstation gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24 2024

"
0cfV8jtY,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,atakan1983,JavaScript,Wednesday 26th of June 2024 12:19:49 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any gift card for free on G2A.com including Xbox gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24th 2024

"
mzXEGZY4,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,tajdiqul,JavaScript,Wednesday 26th of June 2024 12:13:38 PM CDT,"G2A.com free voucher & games guide.
Any item for free on G2A.com including Playstation gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
24th of June 2024

"
bTxZrPAv,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,notgoodatscripting,JavaScript,Wednesday 26th of June 2024 12:07:34 PM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Xbox gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?69872

Working as of:
June 24 2024

"
3H4D6zsq,–î–ó –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∏,TeT91,C#,Wednesday 26th of June 2024 12:05:54 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;

namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Storage storage = new Storage();
            storage.ShowDamagedProducts();
        }
    }

    class Storage
    {
        private ProductCreator _productCreator;
        private List<Product> _products;

        public Storage()
        {
            _productCreator = new ProductCreator();
            _products = new List<Product>();

            GenerateProducts();
        }

        public void ShowDamagedProducts()
        {
            foreach (Product product in GetDamagedProducts())
            {
                Console.WriteLine($""{product.Name} - {product.ProductionDate}"");
            }

            Console.ReadKey();
        }

        private IEnumerable<Product> GetDamagedProducts()
        {
            int currentYear = 2024;

            var filteredList = _products.Where(product => currentYear - product.ProductionDate >= product.ExpirationDate);

            return filteredList;
        }

        private void GenerateProducts()
        {
            int productsCount = 20;
            _products = new List<Product>();

            for (int i = 0; i < productsCount; i++)
            {
                Product product = _productCreator.CreateProduct();
                _products.Add(product);
            }
        }
    }

    class ProductCreator
    {
        private string[] _names;

        public ProductCreator()
        {
            InitNames();
        }

        public Product CreateProduct()
        {
            int nameId = UserUtils.GenerateRandomValue(_names.Length);

            int minYear = 1990;
            int maxYear = 2024;

            string name = _names[nameId];
            int productionYear = UserUtils.GenerateRandomValue(minYear, maxYear);

            return new Product(name, productionYear);
        }

        private void InitNames()
        {
            int namesCount = 5;

            _names = new string[namesCount];

            for (int i = 0; i < namesCount; i++)
            {
                _names[i] = $""–¢—É—à–µ–Ω–∫–∞ {i}"";
            }
        }
    }

    class Product
    {
        public Product(string name, int productionDate)
        {
            Name = name;
            ProductionDate = productionDate;
            ExpirationDate = 5;
        }

        public string Name { get; private set; }

        public int ProductionDate { get; private set; }

        public int ExpirationDate { get; private set; }
    }

    static class UserUtils
    {
        private static Random s_random = new Random();

        public static int GenerateRandomValue(int minValue, int maxValue)
        {
            return s_random.Next(minValue, maxValue);
        }

        public static int GenerateRandomValue(int maxValue)
        {
            return s_random.Next(maxValue);
        }
    }
}"
zzkrPBPz,Untitled,dllbridge,C,Wednesday 26th of June 2024 11:55:34 AM CDT,"

#include <string.h>
#include  <stdio.h>

 
char szWord[99] = ""SONY12"", 
     sz_2  [99];
 
int _strlen(char *psz); 

void _strcpy(char*, char*); 
 
/////////////////////////////////
int main()                     //
{
        
    int n = _strlen(szWord);
     
    printf(""n = %d\n"", n);  
    
   _strcpy(sz_2, szWord);   
    
    printf(""sz_2 = %s\n"", sz_2);  
}




//////////////////////////////////////////////////
void _strcpy(char *psz1, char *psz2)           //    –°–∫–æ–ø–∏—Ä–æ–≤–∞–ª—Å—è –ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –Ω–æ–ª—å?
{
    
    int i = 0;
    
    do
    {
    
       psz1[i] = psz2[i];
    
    }
    while( psz2[++i] != 0);

    
        
}



///////////////////////////////////
int _strlen(char *psz)           //    
{
    
    int i = 0;
    
    while( szWord[++i] != 0);

    
       
return i;        
}










/*

///////////////////////////////////
int _strlen(char *psz)           //    
{
    
    int i = 0;
    
    for(; szWord[i] != 0; i++)
    {
    
       // printf(""%2d\n"", szWord[i]);
        

    }  // printf(""%2d\n"", szWord[i]);  
    
       
return i;        
}


*/




















      //  if(szWord[i] == 0) { printf(""OGO!\n""); break; }


/*

#include <stdlib.h>
#include   <time.h>
#include  <stdio.h>

 
char szWord[99] = ""SONY_Pictures""; 

 
/////////////////////////////////
int main()                     //
{
        
    for(int i = 0; szWord[i] == 0; i++)
    {
    
        printf(""%c\n"", szWord[i]);
        
      //  if(szWord[i] == 0) { printf(""OGO!\n""); break; }
    }
        
}


*/























/*

#include <stdlib.h>
#include   <time.h>
#include  <stdio.h>
 
 
void monitor(int *p); 
 
/////////////////////////////////
int main()                     //
{
    
    srand(time(0));
 
    int array[20],
               nx,             //  min
               ng;             //  max
 
 
    for(int i = 0; i < 20; i++)
    {
        
       array[i] = rand()%200;   
    }
    
    monitor(array);
    
    ng = array[0];
    nx = array[0]; 
       
    int nIndex_Max = 0,
        nIndex_min = 0;
    
    
    for(int i = 0; i < sizeof(array)/4; i++ )
    {
        
      if(array[i] > ng) 
      {
          ng = array[i];         
          nIndex_Max = i;
      }
      
      if(array[i] < nx) 
      {
          nx = array[i];         
          nIndex_min = i;
      }      
    }
    printf(""Max element array: %d, his index = %d\n"", ng, nIndex_Max);
    printf(""min element array: %d, his index = %d\n"", nx, nIndex_min);
    
    
return 0;
}
 
 




/////////////////////////////////////////////////////
void monitor(int *p)                               // 
{
        
        
    for(int i = 0; i < 20; i++)
    {
        
       printf(""%d\n"", p[i]); 
    }        
        
}
*/



"
vRp2VQjy,ServerError: received 500 HTTP response,basedcount_bot,Python,Wednesday 26th of June 2024 11:44:52 AM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 263, in read_comments
    async for comment in pcm_subreddit.stream.comments(skip_existing=True):  # Comment
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/util.py"", line 160, in stream_generator
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/util.py"", line 160, in <listcomp>
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 34, in __anext__
    await self._next_batch()
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 785, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 567, in _objectify_request
    await self.request(
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 1032, in request
    return await self._core.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 383, in request
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 305, in _request_with_retries
    return await self._do_retry(
           ^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 170, in _do_retry
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 305, in _request_with_retries
    return await self._do_retry(
           ^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 170, in _do_retry
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 322, in _request_with_retries
    raise self.STATUS_EXCEPTIONS[response.status](response)
asyncprawcore.exceptions.ServerError: received 500 HTTP response
"
pwhAauSp,Initial Town Manager,Thatguy5532,C,Wednesday 26th of June 2024 11:42:01 AM CDT,"class LIB_TownManagerComponentClass : ScriptComponentClass
{
};

class LIB_TownData : Managed
{
	EntityID markerID;
	string name;
	int population;
	int stability;
	int support;
	string faction;
	int size;
}

class LIB_TownManagerComponent : ScriptComponent
{
	protected static ref array<IEntity> m_ObjArr = {};
	protected static ref array<IEntity> m_objMarkerArr = {};

	//------------------------------------------------------------------------------------------------
	override void EOnInit(IEntity owner)
	{
		//Print(owner.GetName());
		if (GetGame().InPlayMode()) {
			SCR_MapDescriptorComponent MapD = SCR_MapDescriptorComponent.Cast(owner.FindComponent(SCR_MapDescriptorComponent));
			
			if (IsObj(owner, MapD))
			{
				m_ObjArr.Insert(owner);
				IEntity MarkerEnt = CreateObjMarker(owner);
				CreateObjArea(owner);
				m_objMarkerArr.Insert(MarkerEnt);
			}
		}
		
		
	}
	
	bool IsObj(IEntity owner, SCR_MapDescriptorComponent MapD)
	{
		switch(MapD.GetBaseType())
		{
			case EMapDescriptorType.MDT_PORT:
				return true;
				break;
			
			case EMapDescriptorType.MDT_BASE:
				return true;
				break;
			
			case EMapDescriptorType.MDT_FORTRESS:
				return true;
				break;
			
			case EMapDescriptorType.MDT_FUELSTATION:
				return true;
				break;
			
			case EMapDescriptorType.MDT_NAME_GENERIC:
				return true;
				break;
			
			case EMapDescriptorType.MDT_NAME_CITY:
				return true;
				break;
			
			case EMapDescriptorType.MDT_NAME_VILLAGE:
				return true;
				break;
			
			case EMapDescriptorType.MDT_NAME_TOWN:
				return true;
				break;
			
			case EMapDescriptorType.MDT_NAME_SETTLEMENT:
				return true;
				break;
		}
		return false;
	}

	//------------------------------------------------------------------------------------------------
	override void OnPostInit(IEntity owner)
	{
		// remove if unused
		SetEventMask(owner, EntityEvent.INIT);
	}

	//------------------------------------------------------------------------------------------------
	override void OnDelete(IEntity owner)
	{
		// remove if unused
		SCR_MapDescriptorComponent MapD = SCR_MapDescriptorComponent.Cast(owner.FindComponent(SCR_MapDescriptorComponent));
		if (m_ObjArr) {
			m_ObjArr.RemoveItem(owner)
		}
	}
	//------------------------------------------------------------------------------------------------
	static IEntity GetRandObj()
	{
		if (m_ObjArr.IsEmpty()) {
			return null;
		};
		
		return m_ObjArr.GetRandomElement();
	}
	
	static array<IEntity> GetObjArr()
	{
		if (m_ObjArr.IsEmpty()) {
			return null;
		};
		
		return m_ObjArr;
	}
	
	IEntity CreateObjMarker(IEntity owner)
	{
		Print(""Create Obj Marker"");
		
		IEntity slotMarker = GetGame().SpawnEntityPrefab(""{E537867C6E760514}Prefabs/ScenarioFramework/Components/Marker Entities/SlotMarker.et"", false);
		LIB_ScenarioFrameworkSlotMarker markerComp = LIB_ScenarioFrameworkSlotMarker.Cast(slotMarker.FindComponent(LIB_ScenarioFrameworkSlotMarker));
		SCR_MapDescriptorComponent MapD = SCR_MapDescriptorComponent.Cast(owner.FindComponent(SCR_MapDescriptorComponent));
		
		
		slotMarker.SetOrigin(owner.GetOrigin());
		//Print(slotMarker);
		//Print(markerComp);
		markerComp.SetScriptSpawned(true);
		Print(MapD.GetBaseType());
		switch(MapD.GetBaseType())
		{
			case EMapDescriptorType.MDT_PORT:
				markerComp.SetMapMarkerIcon(LIB_EScenarioFrameworkMarkerCustom.FUELSTATION);
				PrintFormat(""MDT_PORT: %1"", LIB_EScenarioFrameworkMarkerCustom.FUELSTATION);
				break;
			
			case EMapDescriptorType.MDT_BASE:
				markerComp.SetMapMarkerIcon(LIB_EScenarioFrameworkMarkerCustom.MILITARY);
				PrintFormat(""MDT_BASE: %1"", LIB_EScenarioFrameworkMarkerCustom.MILITARY);
				break;
			
			case EMapDescriptorType.MDT_FORTRESS:
				markerComp.SetMapMarkerIcon(LIB_EScenarioFrameworkMarkerCustom.MILITARY);
				PrintFormat(""MDT_FORTRESS: %1"", LIB_EScenarioFrameworkMarkerCustom.MILITARY);
				break;
			
			case EMapDescriptorType.MDT_FUELSTATION:
				markerComp.SetMapMarkerIcon(LIB_EScenarioFrameworkMarkerCustom.FUELSTATION);
				PrintFormat(""MDT_FUELSTATION: %1"", LIB_EScenarioFrameworkMarkerCustom.FUELSTATION);
				break;
			
			case EMapDescriptorType.MDT_NAME_GENERIC:
				markerComp.SetMapMarkerIcon(LIB_EScenarioFrameworkMarkerCustom.TOWN);
				PrintFormat(""MDT_NAME_GENERIC: %1"", LIB_EScenarioFrameworkMarkerCustom.TOWN);
				break;
			
			case EMapDescriptorType.MDT_NAME_CITY:
				markerComp.SetMapMarkerIcon(LIB_EScenarioFrameworkMarkerCustom.CAPITAL);
				PrintFormat(""MDT_NAME_CITY: %1"", LIB_EScenarioFrameworkMarkerCustom.CAPITAL);
				break;
			
			case EMapDescriptorType.MDT_NAME_VILLAGE:
				markerComp.SetMapMarkerIcon(LIB_EScenarioFrameworkMarkerCustom.TOWN);
				PrintFormat(""MDT_NAME_VILLAGE: %1"", LIB_EScenarioFrameworkMarkerCustom.TOWN);
				break;
			
			case EMapDescriptorType.MDT_NAME_TOWN:
				markerComp.SetMapMarkerIcon(LIB_EScenarioFrameworkMarkerCustom.TOWN);
				PrintFormat(""MDT_NAME_TOWN: %1"", LIB_EScenarioFrameworkMarkerCustom.TOWN);
				break;
			
			case EMapDescriptorType.MDT_NAME_SETTLEMENT:
				markerComp.SetMapMarkerIcon(LIB_EScenarioFrameworkMarkerCustom.TOWN);
				PrintFormat(""MDT_NAME_SETTLEMENT: %1"", LIB_EScenarioFrameworkMarkerCustom.TOWN);
				break;
		}
		
		markerComp.SetMapMarkerColor(LIB_EScenarioFrameworkMarkerCustomColor.BLUFOR);
		markerComp.SetMapMarkerText(owner.GetName());
		markerComp.CreateMapMarker();
		
		return slotMarker;
	}
	
	// {C72F956E4AC6A6E7}Prefabs/ScenarioFramework/Components/Area.et
	void CreateObjArea(IEntity owner)
	{
		//IEntity Area = GetGame().SpawnEntityPrefab(""{C72F956E4AC6A6E7}Prefabs/ScenarioFramework/Components/Area.et"", false);
		//SCR_ScenarioFrameworkArea AreaComp = SCR_ScenarioFrameworkArea.Cast(Area.FindComponent(SCR_ScenarioFrameworkArea));
		//Area.SetOrigin(owner.GetOrigin());
		
		
	}
};
"
bvpiR0iW,View CSV files in the Shell,metalx1000,Bash,Wednesday 26th of June 2024 11:10:56 AM CDT,"wget -qO- ""https://randomuser.me/api/?nat=us&results=100&format=csv""  > users.csv

cat users.csv

#no line wrap and searchable
less -S users.csv

#better spacing
column -t -s, users.csv   #looks messy because of line wrapping
column -t -s, users.csv|less -S

#if using delimiters other then comas
sed 's/,/|/g' users.csv > users2.csv
column -t -s\| users2.csv|less -S

#using vim/neovim
vim <(column -t -s, users.csv)

# might give you more options
sudo apt-get install csvtool
csvtool readable users.csv
csvtool readable users.csv|less -S
csvtool readable users.csv|view     #vi read only
vim <(csvtool readable users.csv)

#and of course visidata
sudo apt install visidata
visidata users.csv
"
Sp47hPKH,Prim,OnuSike,C++,Wednesday 26th of June 2024 10:54:09 AM CDT,"#include <iostream>
#include <fstream>
#define inf 2000000000

using namespace std;

ifstream fin(""prim.in"");
ofstream fout(""prim.out"");

int n,a[101][101],s,w[101];
bool v[101];

void prim(int x)
{
    int i,j,k,minn,iminn,jminn;
    v[x]=true;
    for (k=1; k<=n-1; k++)
    {
        minn=inf;
        for (i=1; i<=n; i++)
            if (v[i]==true)
                for (j=1; j<=n; j++)
                    if (v[j]==false && a[i][j]!=0 && a[i][j]<minn)
                    {
                        minn=a[i][j];
                        iminn=j;
                        jminn=i;
                    }
        s+=minn;
        v[iminn]=true;
        w[iminn]=jminn;
    }
    return;
}

int main()
{
    int m,i,j,c;
    fin >> n >> m;
    for (; m>=1; m--)
    {
        fin >> i >> j >> c;
        a[i][j]=a[j][i]=c;
    }
    prim(1);
    fout << s << ""\n"";
    for (i=1; i<=n; i++)
        fout << w[i] << ' ';
    return 0;
}
"
TjCNTzMm,Kruskal,OnuSike,C++,Wednesday 26th of June 2024 10:53:35 AM CDT,"#include <iostream>
#include <fstream>
using namespace std;
ifstream in(""kruskal.in"");
ofstream out(""kruskal.out"");
int n,m;

struct muchii{
int i,j,cost;
}v[4951],alese[101];

int kruskal ()
{
    int comcon[101],i,x,y,suma=0,k=0,j;
    for (i=1;i<=n;i++)
    comcon[i]=i;
    for (i=1;i<=m;i++)
        if (comcon[v[i].i]!=comcon[v[i].j])
    {
        x=comcon[v[i].i];
        y=comcon[v[i].j];
        for (j=1;j<=n;j++)
            if (comcon[j]==y)
            comcon[j]=x;
        suma=suma+v[i].cost;
        k++;
        alese[k]=v[i];
        if (k==n-1)
            return suma;
    }
    return -1;

}
int main()
{
  int x,i;
  in>>n>>m;
  for (i=1;i<=m;i++)
      in>>v[i].i>>v[i].j>>v[i].cost;
do{
    x=0;
    for (i=1;i<m;i++)
        if (v[i].cost>v[i+1].cost)
    {
        swap (v[i],v[i+1]);
        x=1;
    }

}while (x==1);
out<<kruskal();
out<<endl;
for (i=1;i<n;i++)
{
    out<<alese[i].i<<' '<<alese[i].j;
    out<<endl;
}
    return 0;
}"
sdZVS2wi,podivnost s interpolaci,max2201111,Python,Wednesday 26th of June 2024 10:37:42 AM CDT,"import numpy as np
import matplotlib.pyplot as plt
from skimage.transform import resize

# Matice A
A = np.array([
    [0, 255],
    [255,100],
])

# Funkce pro vytvo≈ôen√≠ obr√°zku z dat
def create_image(data, column_min_vals, column_max_vals):
    num_rows, num_columns = len(data), len(data[0])
    image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)
    for i in range(num_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [column_min_vals[j], column_max_vals[j]], [0, 255]))
            image[i, j] = np.array([pixel_value] * 3)
    return image

# Min a max hodnoty sloupc≈Ø
column_min_vals = np.min(A, axis=0)
column_max_vals = np.max(A, axis=0)

# Vytvo≈ôen√≠ obr√°zku
image = create_image(A, column_min_vals, column_max_vals)

# Roz≈°√≠≈ôen√≠ obr√°zku na pevnou velikost pro lep≈°√≠ vizualizaci
image_resized = resize(image, (100, 100, 3), anti_aliasing=True)

# Zobrazen√≠ obr√°zku
plt.imshow(image_resized)
plt.title(""Generated Image from Matrix A"")
plt.axis(""off"")
plt.show()
"
G97zaqq7,Set user,RaymondVDB,SQL,Wednesday 26th of June 2024 10:17:30 AM CDT,"UPDATE users
SET role = 'User'
WHERE email = 'email';"
S8cxnupD,Untitled,Mochinov,JSON,Wednesday 26th of June 2024 09:59:51 AM CDT,"{
  ""id"": ""evt_1PVwcnR8QWoDuPnP0eRk39Wn"", // Substituting data for top up
  ""object"": ""event"",
  ""account"": ""acct_1PNvJIR8QWoDuPnP"",
  ""api_version"": ""2024-04-10"",
  ""created"": 1719411304,
  ""data"": {
    ""object"": {
      ""id"": ""cs_test_a1uS9U7mL0zDhvwzkx6k7YhmITcD9dQUVp1gkQsMSE4hITV5tzQ7aR4Z9L"",
      ""object"": ""checkout.session"",
      ""after_expiration"": null,
      ""allow_promotion_codes"": false,
      ""amount_subtotal"": 10000,
      ""amount_total"": 10000,
      ""automatic_tax"": {
        ""enabled"": false,
        ""liability"": null,
        ""status"": null
      },
      ""billing_address_collection"": ""auto"",
      ""cancel_url"": ""https://stripe.com"",
      ""client_reference_id"": null,
      ""client_secret"": null,
      ""consent"": null,
      ""consent_collection"": null,
      ""created"": 1719411286,
      ""currency"": ""usd"",
      ""currency_conversion"": null,
      ""custom_fields"": [
      ],
      ""custom_text"": {
        ""after_submit"": null,
        ""shipping_address"": null,
        ""submit"": null,
        ""terms_of_service_acceptance"": null
      },
      ""customer"": null,
      ""customer_creation"": ""if_required"",
      ""customer_details"": {
        ""address"": {
          ""city"": null,
          ""country"": ""SM"",
          ""line1"": null,
          ""line2"": null,
          ""postal_code"": null,
          ""state"": null
        },
        ""email"": ""asdf@asdf.asdf"",
        ""name"": ""sdfgsdfg sdfgsdfg"",
        ""phone"": null,
        ""tax_exempt"": ""none"",
        ""tax_ids"": [
        ]
      },
      ""customer_email"": null,
      ""expires_at"": 1719497685,
      ""invoice"": null,
      ""invoice_creation"": {
        ""enabled"": false,
        ""invoice_data"": {
          ""account_tax_ids"": null,
          ""custom_fields"": null,
          ""description"": null,
          ""footer"": null,
          ""issuer"": null,
          ""metadata"": {
          },
          ""rendering_options"": null
        }
      },
      ""livemode"": false,
      ""locale"": ""auto"",
      ""metadata"": {
        ""x_forwarded_for"": ""93.191.78.242"",
        ""type_operation"": ""add money"", 
        ""payment_request_uuid"": ""4b36f226-8155-448c-837a-acc8de558254"", // Substituting data for top up
        ""company_id"": ""5ca4dc7a-ff1b-49b6-bfaf-5fa694a6b38f"", // Substituting data for top up
        ""currency"": ""USD"", // Substituting data for top up
        ""company_stripe_account"": ""acct_1PNvJIR8QWoDuPnP"", // Substituting data for top up
        ""environment_uuid"": ""4b36f226-8155-448c-837a-acc8de558254"", // Substituting data for top up
        ""wallet_uuid"": ""4cf8390f-e2f4-4976-9ba8-e98ca66cabfa"", // Substituting data for top up
        ""user_uuid"": ""37b475cb-15a9-40fa-b707-41ea4f375f6e"", // Substituting data for top up
        ""stripe_product_id"": ""prod_QEODzAVIfQngs7"", // Substituting data for top up
        ""x_test_mode_switch"": ""off"", // Substituting data for top up
        ""amount"": ""10000"", // Substituting data for top up
        ""interaction_method"": ""web""
      },
      ""mode"": ""payment"",
      ""payment_intent"": ""pi_3PVwclR8QWoDuPnP2nPzBhBY"",
      ""payment_link"": ""plink_1PVwcSR8QWoDuPnPVySPFpY5"",
      ""payment_method_collection"": ""if_required"",
      ""payment_method_configuration_details"": {
        ""id"": ""pmc_1PNvJKR8QWoDuPnP6JjN55u5"",
        ""parent"": ""pmc_1PETxMJM4u3ZwjCHUF05NADx""
      },
      ""payment_method_options"": {
        ""card"": {
          ""request_three_d_secure"": ""automatic""
        }
      },
      ""payment_method_types"": [
        ""card"",
        ""link""
      ],
      ""payment_status"": ""paid"",
      ""phone_number_collection"": {
        ""enabled"": false
      },
      ""recovered_from"": null,
      ""saved_payment_method_options"": null,
      ""setup_intent"": null,
      ""shipping_address_collection"": null,
      ""shipping_cost"": null,
      ""shipping_details"": null,
      ""shipping_options"": [
      ],
      ""status"": ""complete"",
      ""submit_type"": ""auto"",
      ""subscription"": null,
      ""success_url"": ""https://stripe.com"",
      ""total_details"": {
        ""amount_discount"": 0,
        ""amount_shipping"": 0,
        ""amount_tax"": 0
      },
      ""ui_mode"": ""hosted"",
      ""url"": null
    }
  },
  ""livemode"": false,
  ""pending_webhooks"": 2,
  ""request"": {
    ""id"": null,
    ""idempotency_key"": null
  },
  ""type"": ""checkout.session.completed""
}"
Tg9hQkM7,Friend List and Maintenance,mladrad,Python,Wednesday 26th of June 2024 09:54:32 AM CDT,"names_lst = input().split("", "")
black_counter = 0
losted_names = 0
while True:
    command = input().split()
    if command[0] == ""Report"":
        break
    elif command[0] == ""Blacklist"":
        name = command[1]
        for i in range(len(names_lst)):
            if names_lst[i] == name:
                print(f""{name} was blacklisted."")
                names_lst[i] = ""Blacklisted""
                black_counter += 1
        if black_counter == 0:
            print(f""{name} was not found."")

    elif command[0] == ""Error"":
        index = command[1]
        if int(index) in range(len(names_lst)):
            if names_lst[int(index)] != ""Blacklisted"" and names_lst[int(index)] != ""Lost"":
                print(f""{names_lst[int(index)]} was lost due to an error."")
                names_lst[int(index)] = ""Lost""
                losted_names += 1

    elif command[0] == ""Change"":
        index = command[1]
        new_name = command[2]
        if int(index) in range(len(names_lst)):
            name = names_lst[int(index)]
            names_lst[int(index)] = new_name
            print(f""{name} changed his username to {new_name}."")

print(f""Blacklisted names: {black_counter}"")
print(f""Lost names: {losted_names}"")
print(' '.join(names_lst))
"
2REpE9Xw,The Angry Cat,mladrad,Python,Wednesday 26th of June 2024 09:53:00 AM CDT,"items_list = list(map(int, input().split("", "")))
entry_point = int(input())
type_of_items = input()
left_list = []
right_list = []
result = 0
position = ''
if entry_point in range(len(items_list)):
    for left in range(0, entry_point):
        left_list.append(items_list[left])
    for right in range(entry_point + 1, len(items_list)):
        right_list.append(items_list[right])

    if type_of_items == ""cheap"":
        if min(left_list) <= min(right_list):
            res = [i for i in left_list if i < items_list[entry_point]]
            result = sum(res)
            # result = min(left_list)
            position = ""Left""
        else:
            res = [i for i in right_list if i < items_list[entry_point]]
            result = sum(res)
            # result = min(right_list)
            position = ""Right""
    elif type_of_items == ""expensive"":
        if max(left_list) > max(right_list):
            res = [i for i in left_list if i >= items_list[entry_point]]
            result = sum(res)
            # result = sum(left_list)
            position = ""Left""
        else:
            res = [i for i in right_list if i >= items_list[entry_point]]
            result = sum(res)
            position = ""Right""

print(f""{position} - {result}"")
"
CUHw5scP,Remote Control,Ewgeniy,Lua,Wednesday 26th of June 2024 09:43:50 AM CDT,"local component = require(""component"")
local internet = require(""internet"")
local robot = require(""robot"")
local serial = require(""serialization"")

-- –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram
print(""–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞:"")
local botToken = io.read()
print(""–í–≤–µ–¥–∏—Ç–µ Chat ID –≤–∞—à–µ–≥–æ Telegram —á–∞—Ç–∞:"")
local chatID = io.read()

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è URL
local function urlencode(str)
    if (str) then
        str = string.gsub(str, ""\n"", ""\r\n"")
        str = string.gsub(str, ""([^%w ])"", function(c) return string.format(""%%%02X"", string.byte(c)) end)
        str = string.gsub(str, "" "", ""+"")
    end
    return str    
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
local function sendTelegramMessage(chatID, text)
    local url = ""https://api.telegram.org/bot"" .. botToken .. ""/sendMessage?chat_id="" .. chatID .. ""&text="" .. urlencode(text)
    
    local result, reason = internet.request(url)
    if result then
        local response = """"
        for chunk in result do
            response = response .. chunk
        end
        print(""–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:"", text)
    else
        print(""–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:"", reason)
    end
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
local function getTelegramUpdates(offset)
    local url = ""https://api.telegram.org/bot"" .. botToken .. ""/getUpdates?timeout=60""
    if offset then
        url = url .. ""&offset="" .. offset
    end
    local result, reason = internet.request(url)
    if result then
        local response = """"
        for chunk in result do
            response = response .. chunk
        end
        return serial.unserialize(response)
    else
        print(""–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram:"", reason)
        return nil
    end
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –æ—Ç Telegram
local function processCommand(command)
    if command == ""/forward"" then
        robot.forward()
    elseif command == ""/back"" then
        robot.back()
    elseif command == ""/turnleft"" then
        robot.turnLeft()
    elseif command == ""/turnright"" then
        robot.turnRight()
    elseif command == ""/up"" then
        robot.up()
    elseif command == ""/down"" then
        robot.down()
    else
        sendTelegramMessage(chatID, ""–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: "" .. command)
    end
end

-- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –æ—Ç Telegram
local offset = nil
while true do
    local updates = getTelegramUpdates(offset)
    if updates and updates.result then
        for i, update in ipairs(updates.result) do
            if update.message and update.message.text and tostring(update.message.chat.id) == chatID then
                processCommand(update.message.text)
                offset = update.update_id + 1
            end
        end
    end
    os.sleep(1)
end
"
af4RFnBW,3d-editor.lua,crococrystal,Lua,Wednesday 26th of June 2024 09:43:26 AM CDT,"local component = require(""component"")
local fs = require(""filesystem"")
local shell = require(""shell"")
local term = require(""term"")
local serialization = require(""serialization"")

local function setTextColor(color)
    term.gpu().setForeground(color)
end

local function resetTextColor()
    term.gpu().setForeground(0xFFFFFF)
end

local function clearScreen()
    term.clear()
end

local function listModels()
    local models = {}
    for file in fs.list(""/home/3d/"") do
        if file:match(""%.3d$"") then
            local filePath = ""/home/3d/"" .. file
            local fileContent = io.open(filePath, ""r"")
            if fileContent then
                local content = fileContent:read(""*a"")
                fileContent:close()
                local model = serialization.unserialize(content)
                if model and model.label then
                    table.insert(models, {label = model.label, file = filePath})
                end
            end
        end
    end
    table.sort(models, function(a, b) return a.label < b.label end)
    return models
end

local function parseColorCodes(text)
    local colorCodes = {
        [""¬ß0""] = 0x000000, [""¬ß1""] = 0x0000AA, [""¬ß2""] = 0x00AA00, [""¬ß3""] = 0x00AAAA,
        [""¬ß4""] = 0xAA0000, [""¬ß5""] = 0xAA00AA, [""¬ß6""] = 0xFFAA00, [""¬ß7""] = 0xAAAAAA,
        [""¬ß8""] = 0x555555, [""¬ß9""] = 0x5555FF, [""¬ßa""] = 0x55FF55, [""¬ßb""] = 0x55FFFF,
        [""¬ßc""] = 0xFF5555, [""¬ßd""] = 0xFF55FF, [""¬ße""] = 0xFFFF55, [""¬ßf""] = 0xFFFFFF
    }

    local textWithoutCodes = text:gsub(""¬ß."", """")
    local coloredTextParts = {}
    local lastColor = 0xFFFFFF

    for code, subText in text:gmatch(""(¬ß.)([^¬ß]*)"") do
        if colorCodes[code] then
            lastColor = colorCodes[code]
        end
        table.insert(coloredTextParts, {color = lastColor, text = subText})
    end

    if #coloredTextParts == 0 then
        table.insert(coloredTextParts, {color = lastColor, text = textWithoutCodes})
    end

    return textWithoutCodes, coloredTextParts
end

local function selectModel(models)
    clearScreen()
    setTextColor(0xFF00FF)  -- –Ø—Ä–∫–æ —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ü–≤–µ—Ç
    print(""–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:"")
    resetTextColor()
    print()
    for i, model in ipairs(models) do
        setTextColor(0xFFFFFF)  -- –ë–µ–ª—ã–π —Ü–≤–µ—Ç –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤
        io.write(i .. "". "")
        resetTextColor()
        local _, parts = parseColorCodes(model.label)
        for _, part in ipairs(parts) do
            setTextColor(part.color)
            io.write(part.text)
        end
        setTextColor(0xAAAAAA)  -- –°–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        print("" - "" .. model.file:match(""/home/(.+)$""))
        resetTextColor()
    end
    print()
    print()
    setTextColor(0xAAAAAA)  -- –°–µ—Ä—ã–π —Ü–≤–µ—Ç
    print(""–í–≤–µ–¥–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã"")
    resetTextColor()
    print()
    setTextColor(0xFFFF00)  -- –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
    print(""–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏:"")
    resetTextColor()
    local choice = tonumber(term.read())
    if choice and choice >= 1 and choice <= #models then
        return models[choice]
    elseif choice == nil then
        return ""exit""
    else
        return nil
    end
end

local function displaySelectedModel(modelName)
    clearScreen()
    setTextColor(0xFF00FF)  -- –Ø—Ä–∫–æ —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ü–≤–µ—Ç
    print(""–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: \"""" .. modelName .. ""\"""")
    resetTextColor()
    print()
    print(""0. –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å"")
    print(""1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É"")
    print(""2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä—ã"")
    print(""3. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"")
    print(""4. –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"")
    print(""5. –ü–æ–≤–µ—Ä–Ω—É—Ç—å –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏"")
    print(""6. –ü–æ–≤–µ—Ä–Ω—É—Ç—å –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏"")
    print(""7. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"")
    setTextColor(0xFFFF00)  -- –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
    print(""8. –ù–∞—á–∞—Ç—å –ø–µ—á–∞—Ç—å –º–æ–¥–µ–ª–∏"")
    resetTextColor()
    print()
    setTextColor(0xAAAAAA)  -- –°–µ—Ä—ã–π —Ü–≤–µ—Ç
    print(""–í–≤–µ–¥–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã"")
    resetTextColor()
end

local function readTexture()
    setTextColor(0xFFFF00)
    print(""–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å –ø–æ–º–æ—â—å—é \""–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç—É—Ä\"""")
    resetTextColor()
    local texture = term.read():gsub(""\n"", """")
    if texture == """" then
        return nil
    else
        return texture
    end
end

local function readColorMode()
    setTextColor(0xFFFF00)
    print(""–†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞:"")
    setTextColor(0xFFFFFF)
    print(""1. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏"")
    print(""2. –û—á–∏—Å—Ç–∏—Ç—å —Ü–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏"")
    print(""3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å HEX —Ü–≤–µ—Ç"")
    resetTextColor()
    local choice = tonumber(term.read())
    if choice and (choice == 1 or choice == 2 or choice == 3) then
        return choice
    else
        print(""–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"")
        return nil
    end
end

local function readColor()
    setTextColor(0xFFFF00)
    print(""–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä—ã:"")
    print()
    setTextColor(0xAAAAAA)  -- –°–µ—Ä—ã–π —Ü–≤–µ—Ç
    print(""–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ü–≤–µ—Ç–∞ –±–µ–∑ #. –ù–∞–ø—Ä–∏–º–µ—Ä \""E23737\"""")
    print(""–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"")
    resetTextColor()
    local color = term.read():gsub(""\n"", """")
    if color == """" then
        return nil
    else
        return tonumber(color, 16)
    end
end

local function readRotation(prompt)
    setTextColor(0xFFFF00)
    print(prompt)
    resetTextColor()
    local rotation = tonumber(term.read())
    if rotation == 0 or rotation == 90 or rotation == 180 or rotation == 270 or rotation == 360 then
        return rotation
    else
        print(""–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"")
        return nil
    end
end

local function transformShape(shape, vertical, horizontal, texture, colorMode, color)
    local x1, y1, z1, x2, y2, z2 = shape[1], shape[2], shape[3], shape[4], shape[5], shape[6]

    -- Vertical rotation
    if vertical == 90 then
        y1, z1 = z1, 16 - y1
        y2, z2 = z2, 16 - y2
    elseif vertical == 180 then
        y1, z1 = 16 - y1, 16 - z1
        y2, z2 = 16 - y2, 16 - z2
    elseif vertical == 270 then
        y1, z1 = 16 - z1, y1
        y2, z2 = 16 - z2, y2
    elseif vertical == 360 then
        -- No change for 360 degrees as it is same as 0 degrees
    end

    -- Horizontal rotation
    if horizontal == 90 then
        x1, z1 = z1, 16 - x1
        x2, z2 = z2, 16 - x2
    elseif horizontal == 180 then
        x1, z1 = 16 - x1, 16 - z1
        x2, z2 = 16 - x2, 16 - z2
    elseif horizontal == 270 then
        x1, z1 = 16 - z1, x1
        x2, z2 = 16 - z2, x2
    elseif horizontal == 360 then
        -- No change for 360 degrees as it is same as 0 degrees
    end

    if texture then
        shape.texture = texture
    end

    if colorMode == 2 then
        shape.tint = nil
    elseif colorMode == 3 and color then
        shape.tint = color
    end

    return {x1, y1, z1, x2, y2, z2, texture = shape.texture, tint = shape.tint, state = shape.state}
end

local function modifyModel(model, texture, colorMode, color, vertical, horizontal)
    for i, shape in ipairs(model.shapes) do
        model.shapes[i] = transformShape(shape, vertical, horizontal, texture, colorMode, color)
    end
    return model
end

local function displayMenu(model, texture, colorMode, color, vertical, horizontal)
    clearScreen()
    local label = model.label or ""–ë–µ–∑ –∏–º–µ–Ω–∏""
    local _, parts = parseColorCodes(label)
    setTextColor(0xFFFFFF)
    io.write(""–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: \"""")
    for _, part in ipairs(parts) do
        setTextColor(part.color)
        io.write(part.text)
    end
    setTextColor(0xFFFFFF)
    print(""\"""")
    resetTextColor()
    print()
    setTextColor(0xFFFFFF)
    print(""0. –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å"")
    print(""1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É"")
    print(""2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç—É—Ä—ã"")
    print(""3. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"")
    print(""4. –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"")
    print(""5. –ü–æ–≤–µ—Ä–Ω—É—Ç—å –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏"")
    print(""6. –ü–æ–≤–µ—Ä–Ω—É—Ç—å –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏"")
    print(""7. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"")
    setTextColor(0xFFFF00)  -- –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
    print(""8. –ù–∞—á–∞—Ç—å –ø–µ—á–∞—Ç—å –º–æ–¥–µ–ª–∏"")
    resetTextColor()
    print()
    setTextColor(0xAAAAAA)  -- –°–µ—Ä—ã–π —Ü–≤–µ—Ç
    print(""–í–≤–µ–¥–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã"")
    resetTextColor()
end

local function changeLabel(model)
    while true do
        clearScreen()
        setTextColor(0xFFFF00)
        print(""–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:"")
        resetTextColor()
        print()
        setTextColor(0xFFFFFF)
        print(""–ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤ —Å —É—á–µ—Ç–æ–º —Ü–≤–µ—Ç–æ–≤—ã—Ö –∫–æ–¥–æ–≤"")
        print(""–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã —Å –ø–æ–º–æ—â—å—é &"")
        resetTextColor()
        print()
        setTextColor(0xAAAAAA)
        print(""–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"")
        resetTextColor()
        print()

        local newLabel = term.read():gsub(""\n"", """")
        if newLabel == """" then
            return model.label
        else
            -- –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ —É—á–µ—Ç–∞ —Ü–≤–µ—Ç–æ–≤—ã—Ö –∫–æ–¥–æ–≤
            local textOnly = newLabel:gsub(""&."", """")  -- –£–¥–∞–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤—ã—Ö –∫–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª–∏–Ω—ã
            if #textOnly > 30 then
                setTextColor(0xFF6363)  -- –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
                print(""–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"")
                resetTextColor()
                os.sleep(2)  -- –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            else
                newLabel = newLabel:gsub(""&"", ""¬ß"")
                model.label = newLabel
                setTextColor(0x66FF63)  -- –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
                print(""–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"")
                resetTextColor()
                os.sleep(2)  -- –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                return model.label
            end
        end
    end
end

local function changeTooltip(model)
    clearScreen()
    setTextColor(0xFFFF00)
    print(""–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:"")
    resetTextColor()
    local newTooltip = term.read():gsub(""\n"", """")
    if newTooltip == """" then
        return model.tooltip
    else
        -- –ó–∞–º–µ–Ω—è–µ–º & –Ω–∞ ¬ß –¥–ª—è —Ü–≤–µ—Ç–æ–≤—ã—Ö –∫–æ–¥–æ–≤
        newTooltip = newTooltip:gsub(""&"", ""¬ß"")
        -- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ü–≤–µ—Ç–∞
        newTooltip = newTooltip:gsub(""#¬ß"", ""\n¬ß"")
        -- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        newTooltip = newTooltip:gsub(""#"", ""\n"")
        model.tooltip = newTooltip
    end
    return model.tooltip
end

local function displayInfo(model, texture, colorMode, color, vertical, horizontal)
    clearScreen()
    local label = model.label or ""–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ""
    local tooltip = model.tooltip or ""–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ""
    local _, labelParts = parseColorCodes(label)
    local tooltipLines = {}
    for line in tooltip:gmatch(""[^\n]+"") do
        table.insert(tooltipLines, line)
    end
    setTextColor(0xFFFFFF)
    io.write(""–ù–∞–∑–≤–∞–Ω–∏–µ: \"""")
    for _, part in ipairs(labelParts) do
        setTextColor(part.color)
        io.write(part.text)
    end
    setTextColor(0xFFFFFF)
    print(""\"""")
    print()
    print(""–û–ø–∏—Å–∞–Ω–∏–µ:"")
    for _, line in ipairs(tooltipLines) do
        local _, parts = parseColorCodes(line)
        for _, part in ipairs(parts) do
            setTextColor(part.color)
            io.write(part.text)
        end
        print()  -- –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    end
    print()
    setTextColor(0xFFFFFF)
    print(""–¢–µ–∫—Å—Ç—É—Ä–∞: "" .. (texture or ""–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è""))
    if colorMode == 1 then
        print(""–¶–≤–µ—Ç: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π"")
    elseif colorMode == 2 then
        print(""–¶–≤–µ—Ç: –¶–≤–µ—Ç–∞ —É–¥–∞–ª–µ–Ω—ã"")
    elseif colorMode == 3 then
        print(""–¶–≤–µ—Ç: "" .. string.format(""#%06X"", color))
    end
    print(""–ü–æ–≤–æ—Ä–æ—Ç –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏: "" .. vertical)
    print(""–ü–æ–≤–æ—Ä–æ—Ç –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏: "" .. horizontal)
    print()
    setTextColor(0xAAAAAA)  -- –°–µ—Ä—ã–π —Ü–≤–µ—Ç
    print(""–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"")
    resetTextColor()
    term.read()
end

local function main()
    local models = listModels()
    if #models == 0 then
        print(""–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ .3d"")
        return
    end

    local modelChoice = selectModel(models)
    if modelChoice == ""exit"" then
        return
    elseif not modelChoice then
        return
    end

    local modelName = modelChoice.label
    local modelPath = modelChoice.file
    local file = io.open(modelPath, ""r"")
    if not file then
        print(""–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏"")
        return
    end
    local modelData = file:read(""*a"")
    file:close()

    local model = serialization.unserialize(modelData)
    if model == nil then
        print(""–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏"")
        return
    end

    local texture = nil
    local colorMode = 1
    local color = nil
    local vertical = 0
    local horizontal = 0

    while true do
        displayMenu(model, texture, colorMode, color, vertical, horizontal)
        local choice = tonumber(term.read())
        if choice == nil then
            return
        elseif choice == 0 then
            modelChoice = selectModel(models)
            if modelChoice == ""exit"" then
                return
            elseif not modelChoice then
                return
            end
            modelName = modelChoice.label
            modelPath = modelChoice.file
            file = io.open(modelPath, ""r"")
            if not file then
                print(""–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏"")
                return
            end
            modelData = file:read(""*a"")
            file:close()
            model = serialization.unserialize(modelData)
            if model == nil then
                print(""–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏"")
                return
            end
            texture = nil
            colorMode = 1
            color = nil
            vertical = 0
            horizontal = 0
        elseif choice == 1 then
            texture = readTexture()
        elseif choice == 2 then
            colorMode = readColorMode()
            if colorMode == 3 then
                color = readColor()
            end
        elseif choice == 3 then
            model.label = changeLabel(model)
        elseif choice == 4 then
            model.tooltip = changeTooltip(model)
        elseif choice == 5 then
            vertical = readRotation(""–í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–¥—É—Å –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø–æ –í–µ—Ä—Ç–∏–∫–∞–ª–∏ (0, 90, 180, 270, 360):"")
            if vertical == nil then
                vertical = 0
            end
        elseif choice == 6 then
            horizontal = readRotation(""–í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–¥—É—Å –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø–æ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ (0, 90, 180, 270, 360):"")
            if horizontal == nil then
                horizontal = 0
            end
        elseif choice == 7 then
            displayInfo(model, texture, colorMode, color, vertical, horizontal)
        elseif choice == 8 then
            local newModel = modifyModel(model, texture, colorMode, color, vertical, horizontal)
            fs.makeDirectory(""/home/modified-3d"")
            local newModelPath = ""/home/modified-3d/modified_"" .. fs.name(modelPath)
            file = io.open(newModelPath, ""w"")
            if not file then
                print(""–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏"")
                return
            end
            file:write(serialization.serialize(newModel))
            file:close()
            setTextColor(0x00FF00)
            print(""–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫: "" .. newModelPath)
            resetTextColor()
            print(""–ó–∞–ø—É—Å–∫ –ø–µ—á–∞—Ç–∏..."")
            os.execute(""/home/3d/3d.lua "" .. newModelPath)
            break
        else
            print(""–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"")
        end
    end
end

main()"
WEXgPH8c,Working_with_properties,SaNik74,C#,Wednesday 26th of June 2024 09:42:25 AM CDT,"namespace Working_with_properties
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Player davide = new Player(3, 5);
            Draw draw = new Draw();

            draw.PutPlayerOnMap(davide);
        }
    }

    class Player
    {
        public int PositionX { get; private set; }
        public int PositionY { get; private set; }

        public Player(int positionX, int positionY)
        {
            PositionX = positionX;
            PositionY = positionY;
        }
    }

    class Draw
    {
        public void PutPlayerOnMap(Player playerName, char playerSymbol = '@')
        {
            Console.SetCursorPosition(playerName.PositionX, playerName.PositionY);
            Console.Write(playerSymbol);
        }
    }
}"
W5WUJSzt,ü§ë G2A.COM FREE GIFT CARD GUIDE JUN 2024 V2 ü§ë,x2w,GetText,Wednesday 26th of June 2024 09:42:24 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
26 June 2024

"
WLgLNA4q,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V2 üéÅ,kaka440ka,GetText,Wednesday 26th of June 2024 09:27:41 AM CDT,"G2A.com free gift card & games updated guide
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered

This is the most up to date version of this script. Any other one posted will not work,
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
26 June 2024"
bWRxfhQw,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V2 üéÅ,wwxcwx,GetText,Wednesday 26th of June 2024 09:23:35 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
26 June 2024"
xcJbcm4B,schemaOne,Ninbo,JSON,Wednesday 26th of June 2024 09:19:11 AM CDT,"# A book has a title and an author
type Book {
  title: String
  author: Author
}

# An author has a name and a list of books
type Author {
  name: String
  books: [Book]
}

# A publisher has identification
type Publisher {
  name: String
  ISBN: String
}"
TwkS6GVt,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V2 üéÅ,portalxwe,GetText,Wednesday 26th of June 2024 09:16:56 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
26 June 2024"
Xx81ZfdQ,display image fractal like range(5),max2201111,Python,Wednesday 26th of June 2024 09:15:51 AM CDT,"import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tqdm.notebook import tqdm_notebook
from IPython.display import display, Javascript
from google.colab import files
import os
import shutil
import ast
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import seaborn as sns
from skimage.transform import resize
import sys

display(Javascript('IPython.OutputArea.auto_scroll_threshold = 9999;'))

label_colors = {0: [0, 128, 0], 1: [255, 0, 0]}
label_colors_testing = {0: [0, 128, 0], 1: [255, 0, 0]}

%matplotlib inline

def create_image(data, predictions, label_colors, column_min_vals, column_max_vals):
    num_rows, num_columns = len(data), len(data[0])
    image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)
    for i in range(num_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [column_min_vals[j], column_max_vals[j]], [0, 255]))
            image[i, j] = np.array([pixel_value] * 3)
        image[i, -1] = label_colors[predictions[i]]
    return image

def create_imageN(data, predictions, label_colors, column_min_vals, column_max_vals):
    num_training_rows = len(data)
    num_columns = len(data[0])
    image_training = np.zeros((num_training_rows, num_columns + 1, 3), dtype=np.uint8)
    for i in range(num_training_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [column_min_vals[j], column_max_vals[j]], [0, 255]))
            image_training[i, j] = np.array([pixel_value] * 3)
        image_training[i, -1] = label_colors[int(predictions[i])]
    return image_training

def create_cnn_model(input_shape):
    model = tf.keras.Sequential([
        tf.keras.layers.InputLayer(input_shape=input_shape),
        tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu'),
        tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),
        tf.keras.layers.Dropout(0.25),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(64, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.001)),
        tf.keras.layers.Dropout(0.5),
        tf.keras.layers.Dense(1, activation='sigmoid')
    ])
    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    return model

new_persons_results = [
    [0.030391238492519845, 0.23021081913032299, 0.4743575198860915, 0.639395348276238],
    [0.19790381537769108, 0.37639843860181527, 0.5676528538456297, 0.716530820399044],
    [0.0035245462826666075, 0.23127629815305784, 0.4802171123709532, 0.6591272725083992],
    [0.059230621364548486, 0.24424510845680134, 0.442553808602372, 0.6891856336835676],
    [0.05536813173866345, 0.2538888869331579, 0.47861285542743165, 0.6200559751500355],
    [0.1300359168058454, 0.38443677757577344, 0.5957238735056223, 0.795823160451845],
    [0.1743368240338569, 0.3713129035302336, 0.5640350202165867, 0.7213527928848786],
    [0.09173335232875372, 0.2559096689549753, 0.49527436563146954, 0.6970388573439903],
    [0.015235204378572087, 0.2284904031445293, 0.46613902406934005, 0.6917336579549159],
    [0.0011416656054787145, 0.24567669307188245, 0.4388400949432476, 0.667323193441009],
    [0.11776711, 0.17521301, 0.5074825,  0.8509191 ],
    [0.12314088, 0.27565651, 0.52214202, 0.77386896],
]

uploaded = files.upload()
for filename in uploaded.keys():
    original_path = f""/content/{filename}""
    destination_path = os.path.join(""/content/"", ""/content/DATA2"")
    shutil.move(original_path, destination_path)
    print(f""Soubor {filename} byl p≈ôesunut do {destination_path}"")

file_path = '/content/DATA2'
with open(file_path, 'r') as file:
    code = file.read()

A_list = ast.literal_eval(code)
A = np.array(A_list)

labels = [results[-1] for results in A]
data = [results[:-1] for results in A]

num_training_rows = 50
num_testing_rows = 50
X_train, X_test, y_train, y_test = data[:num_training_rows], data[num_training_rows:num_training_rows+num_testing_rows], labels[:num_training_rows], labels[num_training_rows:num_training_rows+num_testing_rows]
X_train, X_test, y_train, y_test = data[:num_training_rows], data[:num_testing_rows], labels[:num_training_rows], labels[:num_testing_rows]

mean_values = np.mean(X_train, axis=0)
std_values = np.std(X_train, axis=0)
X_train_normalized = (X_train - mean_values) / std_values
X_test_normalized = (X_test - mean_values) / std_values

column_min_vals = np.min(X_train_normalized, axis=0)
column_max_vals = np.max(X_train_normalized, axis=0)

# Verify normalization
print(""Mean of X_train_normalized (should be close to 0):"", np.mean(X_train_normalized, axis=0))
print(""Std of X_train_normalized (should be close to 1):"", np.std(X_train_normalized, axis=0))

dnn_model = tf.keras.Sequential([
    tf.keras.layers.Dense(128, activation='relu', input_shape=(len(X_train[0]),)),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.Dropout(0.2),  # Sn√≠≈æen√≠ dropout rate
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(16, activation='relu'),
    tf.keras.layers.BatchNormalization(),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(1, activation='sigmoid')
])
dnn_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001), loss='binary_crossentropy', metrics=['accuracy'])

# Generov√°n√≠ dummy p≈ôedpovƒõd√≠ pro tr√©ninkov√° data
train_predictions = [0] * len(X_train_normalized)  # Dummy p≈ôedpovƒõdi pro tr√©ninkov√© obr√°zky

# Generov√°n√≠ skuteƒçn√Ωch p≈ôedpovƒõd√≠ pro testovac√≠ data
test_predictions = (dnn_model.predict(X_test_normalized) > 0.5).astype(int).flatten()

# Generov√°n√≠ obr√°zk≈Ø z normalizovan√Ωch dat
image_training = create_imageN(X_train_normalized, y_train, label_colors, column_min_vals, column_max_vals)
image_testing = create_image(X_test_normalized, test_predictions, label_colors_testing, column_min_vals, column_max_vals)

# Ovƒõ≈ôen√≠ poƒçtu vygenerovan√Ωch obr√°zk≈Ø
print(""Poƒçet tr√©ninkov√Ωch obr√°zk≈Ø:"", len(image_training))
print(""Poƒçet testovac√≠ch obr√°zk≈Ø:"", len(image_testing))
assert len(image_training) == 50, ""Poƒçet tr√©ninkov√Ωch obr√°zk≈Ø by mƒõl b√Ωt 50.""
assert len(image_testing) == len(X_test_normalized), ""Poƒçet testovac√≠ch obr√°zk≈Ø by mƒõl odpov√≠dat poƒçtu testovac√≠ch vzork≈Ø.""

# Zmƒõna velikosti obr√°zk≈Ø na pevnou velikost pro vstup do CNN
image_training_resized = [resize(img[:, :-1], (100, 100, 3)) for img in image_training]
image_testing_resized = [resize(img[:, :-1], (100, 100, 3)) for img in image_testing]

# Ovƒõ≈ôen√≠ zmƒõny velikosti obr√°zk≈Ø
print(""Tvar prvn√≠ho tr√©ninkov√©ho obr√°zku po zmƒõnƒõ velikosti:"", image_training_resized[0].shape)
print(""Tvar prvn√≠ho testovac√≠ho obr√°zku po zmƒõnƒõ velikosti:"", image_testing_resized[0].shape)

# P≈ôevod obr√°zk≈Ø do form√°tu numpy pole
X_train_cnn = np.array(image_training_resized)
X_test_cnn = np.array(image_testing_resized)

# Ovƒõ≈ôen√≠ tvaru pol√≠
print(""Tvar X_train_cnn:"", X_train_cnn.shape)
print(""Tvar X_test_cnn:"", X_test_cnn.shape)
assert X_train_cnn.shape == (50, 100, 100, 3), ""Tvar X_train_cnn by mƒõl b√Ωt (50, 100, 100, 3).""

# Funkce pro zobrazen√≠ obr√°zku
def display_image(image, title=""Image""):
    plt.imshow(image)
    plt.title(title)
    plt.axis('off')
    plt.show()

# Zobrazen√≠ nƒõkolika tr√©ninkov√Ωch obr√°zk≈Ø
for i in range(5):
    display_image(X_train_cnn[i], title=f""Tr√©ninkov√Ω obr√°zek {i+1}"")

# Tr√©nov√°n√≠ modelu DNN
dnn_accuracy_history = []
epochs = 500  # Reduced to 500 for quicker convergence

for epoch in tqdm_notebook(range(epochs)):
    history_dnn = dnn_model.fit(X_train_normalized, np.array(y_train), epochs=1, verbose=0, shuffle=False)
    dnn_accuracy_history.append(history_dnn.history['accuracy'][0])

    if epoch == 1:
        y_pred_after_2nd_epoch_dnn = dnn_model.predict(X_test_normalized)
        y_pred_binary_after_2nd_epoch_dnn = [1 if pred >= 0.5 else 0 for pred in y_pred_after_2nd_epoch_dnn]
        image_testing_before_2nd_epoch_dnn = create_image(X_test_normalized, y_pred_binary_after_2nd_epoch_dnn, label_colors_testing, column_min_vals, column_max_vals)

    if epoch >= epochs-1:
        print(f""HERE HERE Epoch: {epoch}, Epochs: {epochs}\n"")
        sys.stdout.flush()

        # Iterate through new persons
        for idx, personNEW_results in enumerate(new_persons_results, start=1):
            assert len(personNEW_results) == len(X_train[0]), ""Mismatch in the number of features.""
            personNEW_results_normalized = (np.array(personNEW_results) - mean_values) / std_values
            personNEW_prediction_dnn = dnn_model.predict(np.array([personNEW_results_normalized]))
            personNEW_label_dnn = 1 if personNEW_prediction_dnn >= 0.5 else 0
            y_pred_after_50_epochs_dnn = dnn_model.predict(X_test_normalized)
            y_pred_binary_after_50_epochs_dnn = [1 if pred >= 0.5 else 0 for pred in y_pred_after_50_epochs_dnn]
            image_testing_after_50_epochs_dnn = create_image(X_test_normalized, y_pred_binary_after_50_epochs_dnn, label_colors_testing, column_min_vals, column_max_vals)
            image_personNEW_dnn = create_imageN([personNEW_results_normalized], [personNEW_label_dnn], label_colors, column_min_vals, column_max_vals)
            plt.figure(figsize=(5, 5))
            plt.imshow(image_personNEW_dnn)
            plt.title(f""New Person {idx} - DNN\nLabel: {personNEW_label_dnn}, Prediction: {personNEW_prediction_dnn}"")
            plt.axis(""off"")
            plt.show()

# CNN Model
cnn_model = tf.keras.Sequential([
    tf.keras.layers.InputLayer(input_shape=(100, 100, 3)),
    tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),
    tf.keras.layers.Dropout(0.25),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(64, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.001)),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(1, activation='sigmoid')
])
cnn_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Training CNN Model
cnn_accuracy_history = []

for epoch in tqdm_notebook(range(epochs)):
    history_cnn = cnn_model.fit(X_train_cnn, np.array(y_train), epochs=1, verbose=0, shuffle=False)
    cnn_accuracy_history.append(history_cnn.history['accuracy'][0])

    if epoch == 1:
        y_pred_after_2nd_epoch_cnn = cnn_model.predict(X_test_cnn)
        y_pred_binary_after_2nd_epoch_cnn = [1 if pred >= 0.5 else 0 for pred in y_pred_after_2nd_epoch_cnn]
        image_testing_before_2nd_epoch_cnn = create_image(X_test_normalized, y_pred_binary_after_2nd_epoch_cnn, label_colors_testing, column_min_vals, column_max_vals)

    if epoch >= epochs-1:
        print(f""HERE HERE Epoch: {epoch}, Epochs: {epochs}\n"")
        sys.stdout.flush()

        # Iterate through new persons
        for idx, personNEW_results in enumerate(new_persons_results, start=1):
            assert len(personNEW_results) == len(X_train[0]), ""Mismatch in the number of features.""
            personNEW_results_normalized = (np.array(personNEW_results) - mean_values) / std_values
            image_personNEW = create_imageN([personNEW_results_normalized], [0], label_colors, column_min_vals, column_max_vals)
            image_personNEW_resized = resize(image_personNEW[:, :-1], (100, 100, 3))
            personNEW_prediction_cnn = cnn_model.predict(np.array([image_personNEW_resized]))
            personNEW_label_cnn = 1 if personNEW_prediction_cnn >= 0.5 else 0
            y_pred_after_50_epochs_cnn = cnn_model.predict(X_test_cnn)
            y_pred_binary_after_50_epochs_cnn = [1 if pred >= 0.5 else 0 for pred in y_pred_after_50_epochs_cnn]
            image_testing_after_50_epochs_cnn = create_image(X_test_normalized, y_pred_binary_after_50_epochs_cnn, label_colors_testing, column_min_vals, column_max_vals)
            image_personNEW_cnn = create_imageN([personNEW_results_normalized], [personNEW_label_cnn], label_colors, column_min_vals, column_max_vals)
            plt.figure(figsize=(5, 5))
            plt.imshow(image_personNEW_cnn)
            plt.title(f""New Person {idx} - CNN\nLabel: {personNEW_label_cnn}, Prediction: {personNEW_prediction_cnn}"")
            plt.axis(""off"")
            plt.show()

# Display the images
plt.figure(figsize=(25, 15))
plt.subplot(2, 2, 1)
plt.imshow(image_training)
plt.title(""Training Data"")
plt.axis(""off"")

plt.subplot(2, 2, 2)
plt.imshow(image_testing_before_2nd_epoch_dnn)
plt.title(""Testing Data (2nd Epoch) - DNN"")
plt.axis(""off"")

plt.subplot(2, 2, 3)
plt.imshow(image_testing_after_50_epochs_dnn)
plt.title(f""Testing Data ({epochs} Epochs) - DNN"")
plt.axis(""off"")

plt.subplot(2, 2, 4)
plt.imshow(image_personNEW_dnn)
plt.title(f""New Person - DNN\nLabel: {personNEW_label_dnn},[{personNEW_prediction_dnn}]"")
plt.axis(""off"")

plt.figure(figsize=(12, 5))
plt.plot(range(1, epochs + 1), dnn_accuracy_history, marker='o')
plt.title('DNN Accuracy Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.grid()

plt.figure(figsize=(25, 15))
plt.subplot(2, 2, 1)
plt.imshow(image_training)
plt.title(""Training Data"")
plt.axis(""off"")

plt.subplot(2, 2, 2)
plt.imshow(image_testing_before_2nd_epoch_cnn)
plt.title(""Testing Data (2nd Epoch) - CNN"")
plt.axis(""off"")

plt.subplot(2, 2, 3)
plt.imshow(image_testing_after_50_epochs_cnn)
plt.title(f""Testing Data ({epochs} Epochs) - CNN"")
plt.axis(""off"")

plt.subplot(2, 2, 4)
plt.imshow(image_personNEW_cnn)
plt.title(f""New Person - CNN\nLabel: {personNEW_label_cnn},[{personNEW_prediction_cnn}]"")
plt.axis(""off"")

plt.figure(figsize=(12, 5))
plt.plot(range(1, epochs + 1), cnn_accuracy_history, marker='o')
plt.title('CNN Accuracy Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.grid()

# Confusion Matrix and Performance Metrics for DNN
dnn_predictions = (dnn_model.predict(X_test_normalized) > 0.5).astype(int)
dnn_conf_matrix = confusion_matrix(y_test, dnn_predictions)
print(f""Confusion Matrix for DNN:\n{dnn_conf_matrix}"")
dnn_accuracy = accuracy_score(y_test, dnn_predictions)
dnn_precision = precision_score(y_test, dnn_predictions)
dnn_recall = recall_score(y_test, dnn_predictions)
dnn_f1 = f1_score(y_test, dnn_predictions)
print(f""DNN Accuracy: {dnn_accuracy:.4f}"")
print(f""DNN Precision: {dnn_precision:.4f}"")
print(f""DNN Recall: {dnn_recall:.4f}"")
print(f""DNN F1 Score: {dnn_f1:.4f}"")

# Confusion Matrix and Performance Metrics for CNN
cnn_predictions = (cnn_model.predict(X_test_cnn) > 0.5).astype(int)
print(""PP:"",X_test_cnn)
cnn_conf_matrix = confusion_matrix(y_test, cnn_predictions)
print(f""Confusion Matrix for CNN:\n{cnn_conf_matrix}"")
cnn_accuracy = accuracy_score(y_test, cnn_predictions)
cnn_precision = precision_score(y_test, cnn_predictions)
cnn_recall = recall_score(y_test, cnn_predictions)
cnn_f1 = f1_score(y_test, cnn_predictions)
print(f""CNN Accuracy: {cnn_accuracy:.4f}"")
print(f""CNN Precision: {cnn_precision:.4f}"")
print(f""CNN Recall: {cnn_recall:.4f}"")
print(f""CNN F1 Score: {cnn_f1:.4f}"")

# Display confusion matrices
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
sns.heatmap(dnn_conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('DNN Confusion Matrix')

plt.subplot(1, 2, 2)
sns.heatmap(cnn_conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('CNN Confusion Matrix')

plt.show()

# Optimalizace nov√©ho vektoru pro predikci co nejbl√≠≈æe 0.52
target_prediction = 0.52
input_shape = 4
new_vector = np.random.randn(input_shape)
new_vector = tf.Variable(new_vector, dtype=tf.float32)

optimizer = tf.optimizers.Adam(learning_rate=0.1)

def loss_function():
    prediction = dnn_model(tf.reshape(new_vector, (1, -1)))
    return tf.abs(prediction - target_prediction)

# Gradientn√≠ sestup
for _ in range(1000):
    optimizer.minimize(loss_function, [new_vector])

# Denormalizace v√Ωsledn√©ho vektoru
result_vector = new_vector.numpy()
denormalized_vector = result_vector * std_values + mean_values
result_prediction = dnn_model.predict(result_vector.reshape(1, -1))

print(""V√Ωsledn√Ω vektor (normalizovan√Ω):"", result_vector)
print(""V√Ωsledn√Ω vektor (denormalizovan√Ω):"", denormalized_vector)
print(""Predikce v√Ωsledn√©ho vektoru:"", result_prediction)
"
JSiBqzy5,Untitled,dllbridge,C,Wednesday 26th of June 2024 09:06:33 AM CDT,"
#include  <stdio.h>


void foo(int*);   


int    n1,         //  ;lksda;lka';
       n2 =   7,   // iuoyoiuyoiuy
      *p  = &n2; 

////////////////////////////////////////////////////
int main()                                        // 
{
        
    int  n = 40; 

    int *pn = &n;

    foo(&n);
    
    printf("" *p = %d \n"", *p);
}







////////////////////////////////////////////////////
void foo(int *p)                                  // 
{
        
     *p = *p + 5;


}

"
ibZQvZLX,ARC GIS,HawkeyeHS,Python,Wednesday 26th of June 2024 09:04:59 AM CDT,"import geopandas as gpd
import pandas as pd
from deepforest import utilities
import os
import matplotlib.pyplot as plt
import rasterio as rio

# Load the data
df= gpd.read_file('/home/hawkeye/Desktop/qgis-tutorial/sequoia_stems_forBen.shp')
def create_bounding_box(easting, northing, box_size=30):
    half_size = box_size / 2
    return {
        'xmin': easting - half_size,
        'xmax': easting + half_size,
        'ymin': northing - half_size,
        'ymax': northing + half_size
    }
bounding_boxes = df.apply(lambda row: create_bounding_box(row['Easting'], row['Northng']), axis=1)

# Convert bounding boxes to a DataFrame
bounding_boxes_df = pd.DataFrame(list(bounding_boxes))

# Combine with original data
result_df = pd.concat([df, bounding_boxes_df], axis=1)

url='https://map.dfg.ca.gov/arcgis/rest/services/Base_Remote_Sensing/NAIP_2022/ImageServer'

print(result_df.head(1))

for idx, row in result_df.iterrows():
    xmin, ymin, xmax, ymax = row['xmin'], row['ymin'], row['xmax'], row['ymax']
    print(xmin, ymin, xmax, ymax)
    tmp_dir='./naip_images'
    os.makedirs(tmp_dir, exist_ok=True)
    image_name = f""image_{idx}.tif""
    filename = utilities.download_ArcGIS_REST(url, xmin, ymin, xmax, ymax, savedir=tmp_dir, image_name=image_name)
    # Check the saved file exists
    assert os.path.exists(f""{tmp_dir}/{image_name}"")

    # Confirm file has crs and show
    with rio.open(""{}/{}"".format(tmp_dir, image_name)) as src:
        assert src.crs is not None
        # Show
        plt.imshow(src.read().transpose(1,2,0))
        plt.show()
        
    break
"
1miT25kQ,Herecom api response with multiple waypoints,roma2341,JSON,Wednesday 26th of June 2024 09:02:27 AM CDT,"{""routes"":[{""id"":""5c61f06f-ee77-4c01-ac90-f9e120c42741"",""sections"":[{""id"":""e102259b-5af0-4de1-9a92-390ae50fd589"",""type"":""vehicle"",""departure"":{""time"":1719410507.000000000,""place"":{""type"":""place"",""location"":{""lat"":53.3477374,""lng"":-6.259462},""original_location"":{""lat"":53.3477,""lng"":-6.2597}}},""arrival"":{""time"":1719411812.000000000,""place"":{""type"":""place"",""location"":{""lat"":53.3477199,""lng"":-6.1988201}}},""polyline"":""BGy5i4lDrwh-L2CjB8Q7G0K3D0FvC4DnBrEvgBnLoB3DoB3DT7pBoL8LopB8BwH8BwHwHkhBwWzKgPwoCoBwHoBoL8BsO4Iw-B4Io4BUoQ0K8GoG4DsEkDkDkD4D4DsE8GwCkIgFwRwCwM4DkSwC0PA4IAsJAoL7BoQnB0K7B0FjDsJrEgKnB4DvC4DjDgF_E8GrEsErEkDzFwC3IkD_J8BjITzFnBnB4cAsE7BkmBnB8VTkN7BgoBToGvCkSnBkIvCoLnBkXT4NnB8VnBsOvCwlBvCkmB7B4hB7GwmDTwH7BwqBToLnB4X7B4XnBoVjDsnBnB0ZTgKAkIToLnB8QnBoanBoQ7B4cT8L7BofT8LTgK3D84BnBkSnB4X7BgZnBgUvCwqB7BsY7BsdvC0ejD0tBnB4NnB0U7Gk9CvCgoB3DsnBnB8QvCgjBA0ZU8QU0F4D8Q8BkDUoBUwCgF0FoG0FgFkD8G4DwRkDwM8BoLoB8L8BkDUoGoBkX4D8VUoGvC4IT8a4D0K8BoL0F0FsE0UgP4coV4X8QgFkDgK8GoGsE8Q0K8LsJgPsOoL4N4N8VsE8G4D0FkIkI4IwH4DwCgFkDwH4DwHwCgFAoGAgF7BoGjD4IzFsEjDkI3D8GAU4DwCkIwCwH8B8GwC4I8BgK8BwMwC4NsE0U8BwH8BoG8BoGkDgF8BgFoBgFUkDoB4IT8QnBwWvC4SrEoV_EkX_EwW3D4SjDwM3DsOrEsO_EoQzFsTnBgFnGwb7B0K7B4IrE4cvC8fnBoVT0P7B4rB7BsnBTwMTsJAsJoBsJoBwCoBkDoBsEU0FnBgF7BgF7BwCvC8BjDoBvC4InB0KTkIT8fTgUnBgenB8VToQnB4cT0P7BwlB3DslCnBkcnB0oBA0PTkNnBoL3D4S7BgKTwHT4NAgKnB0ezFo3EnBgoBTkXA4SA8pBTgmCAw1DAopBAwvBA0K7BsJrEgFnGkDrsBsEzoBkD3NU3hBoBjXT_JAnLjI3I_E3IvC7LUriBrJjN3I3DvC3D3DjD_EnBnGnB3uCT_Y3IjD3STvb3D"",""transport"":{""mode"":""car""}},{""id"":""8de466c2-1b11-4fc9-a97b-ebc4f1b01a69"",""type"":""transit"",""departure"":{""time"":1719413012.000000000,""place"":{""type"":""place"",""location"":{""lat"":53.3477199,""lng"":-6.1988201}}},""arrival"":{""time"":1719422912.000000000,""place"":{""type"":""place"",""location"":{""lat"":53.3179499,""lng"":-4.6213201}}},""polyline"":""BGw4i4lDnir6L73E3IrdgFrT4SvH8VrEkNjI84BjXozLAkhBTopLjDo2jC0FwiUktF8_gUvC8iCrJ4yFzF8lDs3I4m0Iw2tBsntxB70SwtqGj-xBgqmHjkH4vdn7Co3JzmCsyDvyC0tBryDkIv8CjS_1EziE7yOj-OjIjInG7GnGvHrEnG"",""transport"":{""mode"":""ferry""}},{""id"":""64347b8f-9247-4a85-b98d-0716b278422c"",""type"":""vehicle"",""departure"":{""time"":1719423512.000000000,""place"":{""type"":""place"",""location"":{""lat"":53.3179499,""lng"":-4.6213201}}},""arrival"":{""time"":1719441304.000000000,""place"":{""type"":""place"",""location"":{""lat"":51.5008762,""lng"":-0.12239},""original_location"":{""lat"":51.5007999,""lng"":-0.1224}}},""polyline"":"""",""transport"":{""mode"":""car""}},{""id"":""2f020ab7-fc97-4ac1-aef3-fdde49918b65"",""type"":""vehicle"",""departure"":{""time"":1719441304.000000000,""place"":{""type"":""place"",""location"":{""lat"":51.5008762,""lng"":-0.12239},""original_location"":{""lat"":51.5007999,""lng"":-0.1224}}},""arrival"":{""time"":1719446917.000000000,""place"":{""type"":""place"",""location"":{""lat"":51.1258999,""lng"":1.3357399}}},""polyline"":"""",""transport"":{""mode"":""car""}},{""id"":""20d63a4f-6fe1-41fe-b83f-922cbc638327"",""type"":""transit"",""departure"":{""time"":1719448117.000000000,""place"":{""type"":""place"",""location"":{""lat"":51.1258999,""lng"":1.3357399}}},""arrival"":{""time"":1719451766.000000000,""place"":{""type"":""place"",""location"":{""lat"":50.9675199,""lng"":1.84917}}},""polyline"":""BG4ovwhD47wxCr-C08Bj5E4gJ7zB8xCvvBwhDvqGs1O7tE4oK3mvD487JzkDs8IznE0hM_48B01sF7jJ82bruK82lB_sGwkY7wPk-lCrtDktP3Ss0CnLgyBn5hBsq4EjzC0sJzmCs4FvqBw8CzyBwhDvoCkqEvhDg5FjpCk-E3_B0qF3rB8kGnpB07JjX01H3Iw5GvH0gKkDglKjD4oF_J0mCjIk6B7BkNvCgPvqB0nEzvFw6N"",""transport"":{""mode"":""ferry""}},{""id"":""73497966-68da-4110-9ed7-a74e72dac0d2"",""type"":""vehicle"",""departure"":{""time"":1719452366.000000000,""place"":{""type"":""place"",""location"":{""lat"":50.9675199,""lng"":1.84917}}},""arrival"":{""time"":1719462508.000000000,""place"":{""type"":""place"",""location"":{""lat"":48.8566467,""lng"":2.3510431},""original_location"":{""lat"":48.8567,""lng"":2.3508}}},""polyline"":""BGg-5mhDk17wD7iCw0G3D0KnGsJ_Y8qDvWogD7GsdvCsJT8B7B0F7BsEvC0FjIsOrJgPnGgKrE0K7BoLU4NoLw-B4D8VwMgrCgKg8BgK4uC4I8sCoGouBAoGnB0FjD0PTkIoBwHgKw5B4Sk7D0Kk_BgF4cgF8f8Gwb8BwHwMgU0K0KsOsOsJsJsJ0K4I0KsJ8LoLwRsJsOkIkNsJ0P4IgPwH4NkIgP8GkNsJ8V8G8Q8GwR0F4N0F4N0FsOsEwMgF4SsE0P4DsOsEoQsEwRsE8QkD0PkD0PwC4N8BkNwCgUwC0PwCoQ8BoLoB4IkDgUkDgUkDsTkDkS4DoV4DoVsEsY0Kw0BkNg8BkI41BsEofgFkhB8G8uB4DgZkIozBoBwH8BwM4N87C8f0oGkIkwB8G8pB4I03BkIo4B8B4SUkIU0KA8QnB4XnBsOvC8VzFoa3DgP_EoQzF0PrE0KzFwMjIoQnLwRjIoL7GkI_E0FvCwCrOkNrJwH3NgKjN4IrOkIvMoG7QkI7GkDzUsJzKgFnLgF7QwHjN0FvM0FzP8GvyC0jB7GkDrJsE7uB0Uv-B8avjCge79B8avM0F3cwM7V4IzP0FzPgF_YoG3S4DjSwCvHUnVoBrdA3hBA_JT3SU3IArxBA3NUrOAjIUrToB7L8BnBArEUzKoB_YgFjhB4IrEoBzoB4I74B8L7V4DvW4D_OoBjcAnQT_OnBzP7BjSjD_OjDjc7GzjBvM3hBvMnsCvb7uBjNjczF_djDrOAjDA3hBoBrJoBze0F3rBoL_d4IzegKj6BkS_JkDrToG7nCgZrT8G_E8BvWwH7LwC_OwCrJgFnGwC7BUrEoB3DoB_EoBrJkD_OgFzUoGvCU3DU3DUrEU_EU7BAzFA_ETrETrETzFnBvCT_JjDzK3D7GvCzF7B7BT3DTjDTzFTzFArEA3DA3DUvCUvCUnL4D_O0F_J4DjIkDzK4DnG8B_J4D3DoB3NwC7GoBrEUnGUrEA_ETrET7GnBnGnB3IT_JTzFA3IA3DU3DoBjDoBjD8BjDwC7B8BvCkDnB8BnB8B7BkD7B4DnBkDnBkD7BgFvC8GjDsJvCwHvC8GvC0FvC0F7B4DvCsEvCsEjDgFjDsEvCkDvCwC7B8B_EsEjDwCzKwHvHgFjN4I7aoV_O4I_T8LrnBsYvRoLnVsOrT4N3XwR_Y4S3XkS7VwRrYgU7V4S7VsTjX0UrTkS3SwR7QoQnQoQvRkSrOgPnQwR3S0UjSgUnQ4S3S8V_TsYvRoVvR8VjSkXvRkX7QkX7Q4X3S8avR0ZzPkXzPkX_OkXrOwWrOkX3NkXrOsYvM8VvM8VrO0ZrOoa3Noa_O4czPofzPofjN8arO0erOof_OkhBjNsdjNsd_O4hBrOwgBvR0oB7kBg1CrqCspFn4BshEvwD4iIr2B47D3uC81FnsCgvFnpBogDzoB8gD3SwvB_sB80DnakpCjcs0C7Qk1BjNkrBvMwqB3N4wB7Qw-BjNgyB_J0oBnLwvBnLkwB3I4mBrJ4rBrJgtB_T8gDnQs0CvlB48Fn4Bg9InG8f3D4SzZojE3Xw1DjIsnB3IsnBrJ4mBrJokBrOozBjIwb_JofzK8f7LkhB_OsnB7LsdvR8pBzKsYzKkX7LsYrJ4S7LwWjSkhBrYwqBnQ8azPgZrTsdvW8f7V4cnawgBvR0U7Q4SrY0Z_YgZnVsTrY8VzUwRnV8Q3SsOvW0P3hBoV_sBwb3uC4wBvWsO7fwWrJ8GvMsJzKkI3S0PvM0K7f4c7L0K3I4Ina0ZvMwM7LwMjhBsiB_tD8vDjckcnQ8QrYgZnaoa7aoa3hB8fjhB0erOwM_O4N7L0KvRsOzesY7VwRzP8LzZkSrd0UvR8L_TkN3c4S36B8kB_vC0yBrnBgZ3hBwWjSwM3coV_OoLvM0KrYoV7Q0PvMwMzKgKjNwMjN4N7fsiBjhBkmB_sBk1BzUsYjc8frY0ZzU0UvR8QzPsO_d0ZnfgZ3XwRvW0PnfgUjS0K7QsJzZwMvW0KzZoLriB4NvWwHjX8G_dkIvbwHnfkInV0FzZwHzZkIvRoGrO0F7fkN_Y8L7a4NvW8L_T8LnQ0KnawRjX8QzZgU_Y0UvWgUrTkSjSwRna8avRgUjX8azP4SvWkczUkc3X4hB7V4hB3N8VjN8VnVwlBrTokBjN0Z7V4rB39C4hGrE4I_OsdjNoajI0PjIoQrJkS3I8Q7GwMjI0P3I0P3IoQ_JkSjIsOvMwW7Qsd_O0ZrOsYzPgZrOwW_OkX3NoVzPsYrOoV3NgU7L8Q7Q4XjS0ZjSsYnQoV_T0Z3S4X3S4XjSwWnQsTzPkSvRgUnQkSzPwR_ToV3SsTvMkNrOgPnQoQzP0P7QoQ_O4N_O4NzPsO_O4NzP4NnQsOvM0KrO8L_OwM_O8LvMgKjNgK3N0KvMsJ3N0KzP8LzPoLzPoL_O0K3NgKnVgP_YwRnVsO7xCo4B7VgP3X8QrT4NnQ8LvRwM3S4NjS4N_OoLvMsJrO0K_O8LjSsOzPkNzPkNjS0PnLsJ_OwM3N8LrOwM_O4NzK0KvW8V3ckc_OgP_sBouBzP0P_Y0ejNgPjhB4mB_J8LrJoL_JwMnL4N3NwRrT4XnQoV7QwWna4hBzKsO7agoB3_B8gDnpBghCjmBghCnkBsgC3cs2BrTwlBzKgU7a03Bna03BrYw0BrdwjC_TkwBvgBoxCzZ8iCnfo2CzU08BrJkczPkwB_O0tBzjBstDjhBgpDjSs7B3XosCnV89BrTs2B_Tk1B7Vw0BvRgoBjSsnBrYsxB_Y8uBnLgUnQkczP0ZrdouB3hBsxB_T8azoB0yB3XkcnQkSrsB0tB3hB8fjhB4cnf0ZrnB4crnBoa7fsT_ToLzyBgZ_sBsTzjB4NztBgP39Cgez8B4SvqB4N7zBoQ3kCoV_iB0K3hBsJvvB0Prd4IvR0F31B8QjpCsYz3B0UjmBgPnV4IzoB8Qna8LrYoLnQwH7V0K3c4NjSsJzUgKjmBgUrY4N3XkN_iBgUvlBoVvboQ3X4N_nBsY3NkIzekS_iB0U_iB0U_iBgUzjB0UnVwM3SoLriBgU3mB8VvlB0Uze8Q7fwRjcsOrO8G_iB8Q7QwH_Y0KjrBwR3X4I_E8B3SwHnVwH_nBsOnnC4Xv5BkSvvBgPr7B4SnpB4N3mB4N3SwHzUwHrTwHvMgFn4BsY7a8LjmBkS3SsJvlBsT7agPztB8a3cwRjhBoVjN4IvlB0Z7kBoa7VoQze4X_iBkc7Q4NnLsJvH8GrOwMnQ4N7Q0PrxBouBvgB0e7awbvbsd31Bs7B7VgZvgB4mB_nB4wBvqBg3BrdgoBvgBgtB7pBo9Brd0tBzekwBjhBs2B7Q4cze41BjmB0mCnLoV7f08B3hBoiCzyBsjD79Bk7Dv0BknD7VkrB3XwvB7aw0B_OkczZkwBnV4mBnQ4cnQ4c3c4wBrTkhBrT8f3couBjwB0rC_nBs7B_dkrB3c0oBr7BoxCj1BonC7sC4nDvgB4rB3ckmBrYwgBrE0F3S0ZnVsdnagjBzyBwjCrEoG3DgFvH0KzUkcjXwgB_Tsd3NsTnagoB_E8GrEoGzPkXvH0K_dkwBrxB4uCzPgZzFsJzF0KnLgUjSgjBzK8VvMoarOkcnL8V3I4SvMoazF8L7BsErJ4S_E0KjD0FrEgK7Q8kBnQwlBzP4hBnVsxBvHwRzU4wB7BsErO0jBvM0e_TsxBnfsqC7fwtC3hBgwCrJ8VvHoV3SouBrYw5BvHwR_J4XjN8fnL8arsBoqDjhBgwCrOgjBvR4rBjSssB_OgjBjSopB_donC7V41BrJ8V3N8fjI4SzP0jB3IgUzKgZ7GsO_JsYnG4NzK4XjNsd3Xw0B7f4pC7VkwBzFkN3I4SnG0KnGsOvCoGnf0mCze4kCrE4InV4wBjhBgrC7VsxBjhB4pC7VsxB7VgyB3hBgrCjXgyB3X0yB_Y0yB_Y0yBvlBwoC3SsiBjX0tBvbsxBnpBkpCjckwB3cwvB3c8uBrJgPzF4IrdouB_douB_dgtB_OwWzP8VjN4SjDsE_dwqBzP8V7fwqB7fwqBvgB8pBjhBopBjhBgoB3hBgoB7QgUjIsJnagejI4I3IgKvH4IrJgKriBwlB_iBokBriB0jBzjB0jBv0Bw0BzjB0jB_iBgjBzjBsiBjSwRzjBgjBvCwCrEsE3cwbzjBsiBzjBsiBzjBsiBzjBsiBnkBsiB_Y4Xjc8arsBopBvb0Z_iBkhBvRoQzPsO3D4D_OsOvR0PjhB0ezF0F_JsJvM0KzUkS7fgerOkNjrBsnB7pBkmBjcgZrT8QvCwC7G8Gn9B03BjNoLzoBgjBnpBwlBzP4N_TwRjS0PzZwWzeoa79Bk1BjX4SzUoQ3SgP3c8V7QwM3hBsYnVgP7Q8LjSwMrdgUrOsJrnBgZ_OsJ_OsJ3XsOnQgKzU8L3mB8V3wBoazPkInQkIvR4I7QkIvlBkS7QkIriB8Q7VoLrTsJnf0P3SsJrOwHrnB8VnVoL_OkI_J0F_ToLjXsO_TwMjSoLrdsTnLwH3SkNvWoQ_TsOrTsO7a0UvlBsd7VkSzyBssBjX0U_O4NjcoajNkNjXwW3cgenLoLnL8LrYoavM4NnQkSvRgUjSoVnV0ZjN0P_xB4_BnQoV_OgU_O0U3NsTzPkXnLgP7QkXrO8V_Tof_Y4mBnGgKvMgUnf8zBvMoV7awvBzPkcvMkXnVsnBjI0P_J4S3IwRzK0UnLwWrJ4S_J0UrOgenL4XrJgU3NofzK4XrJgUjNkcjNkcrJ0UzKkXrT8pBzPkhB7LgZzK8VjN8a7VssB7QkhB7aw0BjX4rBjS4hBrTgjBzU8kBnQ4c7LoVrTsiBzU0jB7QkcnL4SnVgjBvM0UrdouBzZgoBzZsnB7Q0Z3N0U3XgjB_JsOnG4I_JsO3IwM7Q4X3SoazZ0jBrO4S7L4SzKgP7V0evRsY74BgwC_vCwwD7VofjS0Z_2B4uC7fwvB7xC09D7kBs7B7akrBzeozB3NwWnQwb3N4XzUokB_iB08B7uB01CzPgenf46BzjB4kC3N8a_YgyBnQwgBzUwqBnpB82C_TkrBzoBs5C7QkmBrJoV7G0P7QgoBjSwqBjS8pB_JkXzP0jBjS8pB3N8f_T8uB_JkX3NofvMsdnQwlB7LwbzUkwBnV4wB3N8fvM4c3Xs2BnQwlB_JkXzKsYzP0jB_EoLnLgZrJ0UzKkXnL4XnL4X3N4cnLkX3IkSnQkhB3IwRvMsY7LwWzPsdnL0UzF0K_E4I3XwqBzP8a3c4wB_YopB_dkwB7fsxB7Q0ZjNsTjcopBvgBssB3c4mB3cwlBzU8a7G4I_EoGvbsiBjS8VnLkNvb8f7QsTnQkSzUwW3hBokBna8ankBokBrO4N_OsO7Q0PvlB4hBvW0U_doavlBwgBvWsT_xB0oBz3B0tBnf0Z3XsTnQ4NvRgPvR4NrT0PnQkNnQsO_O8LzPwMjN0KnQkNjSgP7Q4NjN0KzPkN7QsOrToQ_ToQjSgP3S0PrT8QnQsOjmB4hB3S8Q7LoLjNwMjIwHnQ0P7L8LvRkSjX4XvWwWriB8kBjNsO3IgKzPkSvMsOrJoL_T4X3SkXjSwW7pBk1BjIgK3cgoBjhB8uBnf0tBjI8LvM4S_J0P_YsnB3SgezUsiBrY8pB3X0oB_d8zBnVkmBrJoQ7Q0e3I0P3N4X3ck1BrJkSvH4NnQ8f3N8a_EsJ3IwRvM0Z7V0tBvH0P7GsOnQ0jB7ag8B_TouBvMsdnVw0BzUozB3Xw-B_OsnB7Vk_BnLkhBzU08BnV0hCnV0mCvHoarOsxB_Os2BjIgejS8nC_EkSnGoa7Vs-CnGkcvHgjBjSg6CnGkhB7G8kBjI0tBjDkS3DwWzK8iC_JoiCvHw5B3I4_BrEsnBjIsqCjDsiBjD4hBvC8fzF4_BjDkmB3Do4BnB0yB3D0hC_Es-CnGguDzF8xC3Dg8BnGk9CnB0UvC0e3D0tB3DgoBnG08BjIwoC_JoxCjI08B7G0tB3I8zB7GopBrJw0BzFofvMk_BzF4czF8ajI8kBvH4hBjSgrCnVkzC_TwoCzK8kBnQg3B7GwWrJ0e3NwqB_JgezZwoCnQssBjNgjBnLge_OkmB7fwtCjc0hC79BwuEvH8QnQ8kBnaw5B_J8V7L0ZrJ0UjDoG3DwH_E0K_E8L_O8kBnQ8kBrJwWrO0jBrJ8VnV41BzUs2BzKwb_JwbrOkrBzPssBrJ8a7Q0yBrT08BrJ8f3Sw-BnLsnBvH8anL4mBnL4rBjcovDzK0tB7G0e3IgoB7Lo4BnGsdnG8f7L08BnLo9B_Jg8B7GssB_J89BvHs2B3D0Z_EokBrEsiBzFgyB7Gs7B_E0yBjIw3CrE03BrEw-BnBwR7B0jBjD4_BjD8nCvC06CnBguDAoxCoBwyC8B0rCwCk4CwCwhDoBsiBoBw-BwC87C8B89BoBw-BkDwhDoBoiCwColD8B4kCU4hBoB4hBoB0ZAonCAoBUsdU0jBA8zBTkwBnB0oB7B0oB7B8frE8iCzF4uC7G4kCjD8arEsiBjI0hC_JgmC_EkhB3I8zB_E0ZzF8f_JsxBvMg8BjD4N_E8VzFkXrEoQzFkXjI0ejI0e3DgPzFsT7G0Z7B8GrJofvHgZvb4zC_Tw5BvgBo2CjX84B3X84BzF8L_T4rBjS4mBjI8QjI0PrT4mBvbk1BzUokB3I0PjS8f7LgU_dozB_sBgrC_sBkpC3rBkpC3rB8nCzUkhBvWkmBrdkwBrsBwoCrdkwBnG0KjhBg3BvgBs2BjwBgwC7GoLvHwMnV0jB_nB0mC_2BwmDriBwjC_iB8nCjc89B_dslC_nBg_C7uBwwDv0Bo-DvtC0-FnpBgpDriB44C_2Bk0EnuBw_D3hBg_CnkBstDjmBgzD3IoajIoa3I8avR03BnG8VzKsiBvR46BnL4mBvHoavHgZ7Qg8BnV0wC7GgZ3DgP3IsiBvb0uDnVw3C3Ng8B3I8pB_J0tBzF0Z7QwyC_EgZ7G4hBrE8VvCgPjIgtB3I8uBvHopBjD0U7GgoBrJg8B7GgoB3I08B3DgZnBgKjDkX3DgZ7BgP3DoajI08BnG4wBnB0KnB8L3D4cjDkcT0FT0FT8G7BwRrEwqB_EssBvCkXjDwbjDge7BoV_E4wBrJ4zCrEwqBzF0yBrE0oBvC4XjI4pCzFk1BjI8nCzF4wBrE0oBrJsvC3NgpD_J0mCjIw0BrJw5BnQ49CjIkrB3IssBvHkmBnGsdjN89BnGkcvH4hBvM41B7L4wB3IgjBvH4cvR4_B_Os2BjI4cnpBgsE7kB47DnGgUjIoa7LgoB3IsdzP0yBnQs2B_OgyBzKgjBvMopBnLkmBzKgjB7LkmBjD8L3I4cvHgZnL0jBnG0UnLkmBzFwR_JsiB_JsiBzK0jBjI8arE4NvHsY3X4uC7Q84BrJgevMsnB3NkrB_To9B3Iwb_Jsd7QkwB3NwlBzK4c7awjCzKoanL8a7LkcvMkcrOof_TkrBvMoanL8VvqBwyCvbsxB3IgPzKwRjIkN7LgUrEwHnG0KjI4N_YkmBnf8uB3IkNjcsnBjcsnBrJwMrToanGkI7V4c_TgZriB0oBrYkcrEgFvbgevlB4mB7QkS7QwRzK0KzPsOzFgF_J4I7VkSz8BozBnkB4cnuBsiBnkBsYzoBoa36BgjBrxB8a_xBsY_gC4c3mBsOrsB0P3rB4N74B0PnLwCze8G7VsEzeoGzP8BzU4DjhBsEnQ8B_Y8BjXoBnV8B_iB8BvbUzPU3NAjNU7aoBvMA3hB8B3XoB3coB7pBwCjmB8BrnBUzoBwCztBwCnLUvboB_nB8BjXoBrYoBnQUnVoB3SoBrYAzjB8B_iB8BztBwC_nB8BvWoB7f8BrT8B7Q8BjXwCzP8B_T8Bjc4D7uB8G7pBwHnpBwHzoB4Ij_BsOnpB0K_dkIvgBsJvW8Gjc4IzjB8LvgB8LvgB8Lze8Lnf8LrsBkSrE8BjSkIjXgKrTsJnzBsYnL0F_JgFzPwH_T0KrdgPvWwMnQ4I7G4DrToL_T8LrnBkX3mB4XjmBsYvWsOvC8BjIgF7QwMzZ4SnkBoajSwMvWgPvH0FzKkIzP8L7kB4cjI8G3cwWrToQvRsOzjB0evRgPrToQ_EsEnLgK3N4N_Y4XjN8L3IkI3IwHjNkNvM8LjNkN7L8L_JsJ7L8L_T0U3I4IjS4Sz3Bg8B7uB0yBzUkX7uB8zBvRsTvRsTzPwR7GwH3IsJnL8LrJsJvMsO_T8VnpB0tBzZkczZkcv0Bs7B31Bw-B7QgU7tEkjFzoB8uBriBgoB_2BghCjmB4rB_Y8a31Bw-B_8DgxEj1B08B3mBwvB7a8f3NwRnQgUvCkDvW4czjB0tB7fwqBzUkc7Vge3X4hB_sBsgCrJ4NvWwgB3ckrB_JgP3X0jBvM4SjIkNjN0UnjEopG7uB8nCjmBk6Bz3B4zC_iBs2Bz3B01CnnCwrD7LwRvRgZjS0ZzP0U7Q0U_JwM7fokBjS4S_TgUzyBgtBrT0PzPoLzPoL3hB8VjrBgZ_YwMvgB4NjhB8LnfsJjmBkIjSkDjSkD_iB4D7kBkDjXUrYUjwBArOUvlBoB3DArEA3IU_nBU7LoB3NU7VoB_JA_7BoBzoBoBjSA3wBA3zCsEnVoB7QoB_YwC7Q8B3c4DjSwC3SkDjSkDjXsEzZ0FvRsE3SgFnkBoLzjBwMnzBgU7pBsTjmBsTzoBwW3SoL_nBoazeoVnfwW7V8QrnBwgB_TwRvgB0e7VoVrdge7VkX3Xoa3mBssBvbwgBnuBw5Bz3BonCnQ8V7L0P_JkN_Toa7kG0_H_vCsoDvMoQ7LgPvM0PjcgjBrvCsjD3mBwvBzrCo7Cn2C4nDj6B0mCrOwR78Ew7F_OkSjNoQ7nCs0CrdgjBjIsJnfkmBvjC8xCjhBsnBvgBgoB_iBssBjNoQvgB8pBzU8ajcokBjwB0hCzPwW7fgtBzPwWnQwW7GgKvWkhBv0BgwC7pB4_B7Qwb_J0PjwBkuCnVokBvlBk_B3SwgBrd8zB3I0P7pB8sCrEkIjX4rBvb8zBvR4hBvWssBnak1BzZw0BzZ41B_J0U3IsTvCgF_J8V_J4X_TssBnQ8kBna46BzFkN7Lwb_O0jBjIgUnLwb_TgyBzZ0hC_JsYnLkc7Vg8B_JgZzUo4B_J4czK4cvRozBvM8kBna4uCjNsnB7LokBzZoxC3I4czF4SzK8kBvvBskF3DkN3Iof7Q89B_Ow5BzPk_BjN41B3XsjDzPkkCzU0_C3NwjC_JwvB_J0yB7L4_B7Qk9CzPg_CzK4_B_O0_CrJghCjIg8B7GsxB7GsxBrJ8nCnG84BjS0lFnG08B7G4_B7BsT7BgP7BgUvM42D7Go9B3I0wC7G0hCzKwhDjI0rCnL4nDjIosCjI0rC3IoxC3I8xCrOojE3NkxD_EgoBjDoVvC8VzF8pB7QwmDvM4pCjI4rBzK03BrOwjCrJ0tB7Gge_E0UnGsYnG0ZzF8VrJwgBjD0K3D4NvC4IrE0PrEsOrE4N_E4N7GsT7GkSrE0K_EoLrJoVvH0PzF0K_E4I3DoGjDgF3I4N3IkN_E8G3DgF3DgFvHsJnG8GnG8GzF0FjDkD_J4IjI8GvM0K3N8L3SgP3DwCrEwCvM8G3SkI3S8G3NkDvM8BrOoBrYAzKTrOnBvM7BvH7BrETnLjDjNjDvM_EvM_EzFvC7G3DnGjDnGjDnazPvMrJvC7B7LjIvMnLjNnL3NnL_drT3IvHrJ3IrJjInLrJnLrJnQjN7LrJrJvHvMrJzP7L7Q7L3NrJjSvMvR7LjSvMnQzK7QzK7avR_OrJ_TvMzUjN3XrOvgB_T_nB_YvWrOzUjNvtCrxB79B3mBr0C31BzyB7fzP_JjNjIn2Cj1BjI_E_EjD3zCj1Br2GnoErkF3nDvpJ_4FriB3XjIzFniCnpBvgBzUrYzPrqC7uB3hBnVzZnQvRnLjX_OjwBnfvkEvyC_2BriBrlCjrBvhDn9BvjCvqB3_BzoBz_C_7BzoB_YjD7B7zB3hBjuCrxBj6BnkBjkC7pB_JnGvtCrxB36BnkB3uCrxBv0BjhBnG3D_mE7xCj6B3hBvtC7pB7f7QjIrEzKzFvqB7VnuB7VvRjIzUrJ3S3IrgC7anpBnQ7kB3N3XjInf_JnajI3c3I_iB_JvgB3IzevHjcnG_sB3Ird_E7arEzZ3D3crE3XjDzZjD7avCrT7BrYnBvbnBjXTjuCA7pBoBnaUze8BzZ8B7V8BjXwCvgB4DnQ8B3SgFnLoBvRkDzP8BvMwCnQwCjSkDrYgFjc0F_Y0F7VgF3hB4IjXoGzjBgKnkB0Kjc4IvR0FrToG7asJ7kBkNvbgK7QoGvR8Gze8L_YsJ_YsJ7fkN_iBsOzoBoQzekN_iBsO3XgKvb8L31BwWniCwbz4DozB_iBsO_lCsd3rB4SjrBkS79B0ZztBsTjkC4crsB4S_nB8Qr2BkXvtC8f_qC8f_gCwb_vC4hBzkD8pBjwBgUr7BgZ7pBkS3_B8ankB0PzjBkN_iBgP3uCsiB36B4XzjB0PrsBkS7zB8VrxBoVzZ0KrT8G7V4IvbgKjc0KzyBsTvlBgPnfgKjcsJzegK_YwH3c4I3XwHvRgF7V0FnQsEnQsEjSsEjSsE7Q4DvR4D3S4DzPkDzPkDjSkDnQwC7QwCzUkDvRwC3SwCnQ8BnQ8BjS8BnQoB7QoBjSoB7V8B3SoBzUoB3SU3XUzZUnaA3XA7aA7aTvbTvgBTrYT_dnB7iCjDzZnBvlB7BrxB3Dj4C7G_YnB_dvCzZnB7QnBzKTnf7BnVnBzUnBvW7B_TnBjhBjDz3BvCzrCrEjkCzFnpBjDj_BrE3rBvC79B_EnQTzPT7QT7f7BjhBvC36BrE_gC3DzjBvC7kBvCr2B3D7f7B3kCrErd7B7nCzFv5BrE7sC_Ejc7BnLTvRT_T7Bz3BrEvb7BjpC_ErsBvC_xB3DvWnBjhBvC_d7Bnf7Br5C7G_iBvC7kB7Bjc7B7kB7BjNnB_EAjc7B3X7Bn9B3DjiDzFv3CjDziE3D78EvC3pCTvhDTriBA79BUv1DnBj4CnB7iCT7uBUvjCT_7BAvjCAjxDA_7BTj1BUr0CT7gDT72CTr7BAnkBnB7kBAvlBArTAzZTrYTzeArOAr7BT74BTnfA3cA_dA_nBTnxCoBnfAjmBA7fTzZTj_B7B_YTriB7BvRnBvW7BnQ7BnLnBvR7Bn4B7Gv0B7GnfrEjhB_E_gCrJztBnGvRvC3X3DvgB_E79B3I31B7GnQ7BnV7BnfvCnuBjDvgB7BrnBTvgBAv-BU_OU_OU_ToBjmBkDrT8B31B0F_iBsEjXkD7QwC3X4D3rBwH3hBoG7-DkX3hB0FjwBsJ3wB4InzBsJ3kCwM7iC8LzyBsJjcgF_lCwMjmB0Fj9CkSvgBoG3kCwM_lCkN3cgFze0Fj6BsJzP4DnV4D3X4D_iB8Gn9BoLvyCgP3wB4IjcgFv-BoLrsB4I74B0K7kBkIriBkI3mBsJ3cwHv0BgP_nBkNnpBgPriB4NriB4NvbwMzjBkS3cgPriB4SjmB8V31B8fj6BokB_TwMrnB8aj_BgoBvjCwqBjwB4cj_BgjBnpB8VvgBgP_sB0UztB4SnQoGj1B8Q_iB0K_OsEzPsEjX0F_TsE_T4DriBgF_JoBvMoBnawC_sBgFrJUzKU3SUrnBUrsBT7LT_JT_T7BvWvC_YjDjXjD7VjDrTjD7GnB_J7BrOjDjSrEjc7G_OrEjSzFvlBnL_J3D3N_EzjB3NrTvH7L_E7QvHjcvM_Y7LrO7G_OvH_OvH7Q3IrT_J3NvH_OjIrOvHvM7GvM7GzKnG3-Ej9C7frTnnCzoB_sB3XvgBjS7Q3I_T_JrdrO_iBnQjhBrO7Q7GrdnLjhB7LrYvH_JjDjN3DvM3D7LjDnQrE7QrE3NjDvR3DrT3DjmB7GrOvCvRvCrY3DvM7BrO7BnajDzU7BvkE_JvbvCvb7B3rBjD_T7BrT7BnQ7BvRvCjSvCjSvC_TvCzjBnGrT3DvR3D7Q3D_O3DvWzF3IvCjhB_JrTnGvWjIjS7GrTvHjSvH_OzF3NzFzP7G7QvHjSjI7QjI7iC7f3NvHjSzKnV7LzyBjcz8B7fnQjIrxB7anjEzmCz0F7gDr1EzwCv-G_3D7-DjkC_OjIv3CjwB3NvH3NvH3NvHrOjIvM7GnLnGvM7GrOjIrO3I3N3IjN3I_O_J_O_JrO_JrO_JrO_JrO_JzPnLztBjhBnVzP_YjSnuBjhBz3BrnB3SjNnQnL_O_J_TjNvHzF3InG3InGrTnLvR_JnQrJ_OjInQ3I3S_JvRrJnQjIrO7GvRjInQvHnQ7G_OnGrOzFrOzFzPzF3N_E_O_EzP_E3NrEnQ_EnQrE7QrEvRrErTrErTrErTrEjS3D7QjDrTjDrY3D7-D3S_0CvMzmCzK36BjInQvCnL7BjInB_TjDjiDrOjcrE3zCjNjcrE79B3IrYjDjXjDvWvCnajDrYvCnV7BnGTnQnBjSnBjSnB3SnB7QTvRT7QTjSAjSArTA7QU3XAzUUzUU3XoBruFsJvWoBrYoBzZUvWUrTA7QA_OAnQAnQAvRT7QTnQT_OTjSnB_OnBjSnBrT7BzU7Bj2DzKz4D7L36GnVrT7B3S7Bn9BnGnrF7Q78E_OrxG_TjhBjD3hB3DnpBrErdjDjS7BnVvC7QvCzFTvRvCzUjD_TjD3SjDvRjDjS3DjSrEvRrE7QrEjS_EjS_EvRzFzP_EnQzFvRnGzPzFnQnG7Q7GjSvHzP7GvRjIvRjIjS3I3SrJrT_JjS_JnQrJ3SnL3SnLvRnLjS7LnQnL3SjN7Q7LvRvMnQ7LnQ7LzP7LrT_O31BnpBz3BjrBj6BztB_TzP_T_O_Y3SvRjNzPnLnQ7LrO_J7LjIvM3InLvHrJnGjNjI_OrJrO3IrO3I3NjIjSzK_OjI_OjIzPjI_OvH_OvHzPvHnQvHrOnGnQ7G_OnGrOzF_OzF7QnGrO_E_O_ErOrErOrEnLjDnLjD7LjDvMjDrO3DrO3D_EnBvCTvMjDzKvC3NjD_OjDnQjD_iB7Gjc_EjmBnG_dzF7QjD3hB_E7arEjhBzFjrBvHrJ7Bjc_Erd_E7arE_d_Er7B_JvRjDzZrEnLvCztBvHjmBnG7nCvM_lC7Lr2BrJz3BrJ7QjDrTjD_TvCvlB7Gz6C_O_iBnG3kC7LjpCvM34CrO3hBzFzyB3IjwBjIvgBzF_gCzKzoB7G3hBnG7a_EzU3DrTjD72C_O3mBnGvqBvHn4BrJ_iBzF3DTzUjD_nB7GvM7B79BzK3rBvH3mBnGvRjDjSjDrnBjI_ETrOvCjXjD3SjD7QvC7LnBzP7B_OvC7uB3I31BrJ_2BrJjhBzFjwB3I7arEvoC7LvbrEnV3DrT3D7kB7GnkBvH3cnG3cnG3XzFnkBrJzejIrdjIvgB_Jvb3IzjB7LjXjIrY3IvR7G_TjI_T3I7VrJjSjIvW_J7V_J_TrJvWzK_drO7ajNrdrOnzB_Y3kCriB31Bvb_T_JvMnGnQjIrmE7iCvoCnkB7iC3hB_2BvbztBvWzjBvRrsB7VvvB3Xv5BjcjuC3mBjzCzoBnajNzyBzZrsBvWrYvMzZjNzZjNzZjN7Q3InQ3InQrJvR_J_O3I_JnGvMjIrOrJvRnLvR7LvR7L7Q7LnQ7L7QvMnQvMnQvM7LrJ_JjI3NnLjNnL_OjN7LzK_O3NnLzKzK_J_T3SvH7GjXvWriBjhB7uBztBjwBvvBvb7arT3S7QnQnQ_OnQ_O7QzP7Q_OzPrO_TvR7QrO_OvMzPvMjSrOnQvM7QvMnQ7L7Q7LrO_JjN3IjN3IvRnL3N3I_O3IzP3I7QrJjS_JvRrJ7Q3IrTrJvWzKzUrJnQ7GzPnGzPnGjS7GzPzFjSnG_T7G3SnG3SnGjXvHzZjI3qEvqBrjD_dn9G7iCnvDjhB3XvH_YvHzerJ3pCjX_2B7Q3rBjNzyB_OrnB7L7zBzPrnB7Lna3I3hBzKvbjI_nBnLnuBjNnzBzPnzBzPz8BjSvvBrOrd3InQ_EniC_TnpBvM_iBzK_nB7LrqCvWzrCjXvW7G_TnGnV7GnV7GvWvH7VvH_T7G7VvH7VvH_T7GvRnGjXjIzZrJjX3IjX3IjX3I7V3I7azK3XrJ7azKrsBvRjkCvbvjCvb73En9B_sBjSzPnGnlIzpDj0Er7Bj4CzjB3rB7QrxBjSrOzF3NzF7Q7GnV3I_YzK3SvHzPnG7QnGnGvCjIjDzU3IzKrE3I3DzZzK_EvC7V3IrJjD7QvHvRvHvHjD_J_EvR7G7L_E3NnG3I3DjI3DrJrErE7B7GjD_J_EvH3DjI3D_EvCvMnGzPvHvH3DrT_J_d_OzFvCnVzKjXnLzFvCzFvCn4Bna7f_OjIrEz3Bjcr9Fz_CvqBnVrgC7fn1Fz6CznJvzE_T_JzU_JzU_JjS3IjSjI_T3I_OzFzP7GnQnG7Q7GrOzF7QnGvMrEjNrEzP_ErOrEvM3D3N3DrO3D_O3DzP3DrOjDvMvCnQjDjNvCrOvC_OvC7QvCrTvC7Q7BzP7BnQnB3SnBjNTrnBTjSAvlBAjmBUnLU3IA3mBoBrEA_xB8BjNUjIA_7BwC_TU_TU_nBA7aoB7LU_YoB_sBoBrnBoBvoC8Bz_CwCz9DsEjzCwCzuI4Iz8B8Bv_DsEr0C8BnuBUvgB8BrdUjcoB7QUrOArdU_JAjIArTT_iB7B_Y7B7VvC3c3DzUjD3X3DrnBjInazFjrBnLvR_EvW7GjcrJnQzF7VjI7fjNnnC_d_9FrvCvjCjc3zCzjBj4C7kB3zC_iBviFjkCz-U75IrTjIjSvH7Q7GzPnGvR7GvR7GzPnGzPzF3N_ErO_E7GvC7VvH3SnGvRzFnQ_EnQ_EvW7G7Q_ErYvHrTzF3X7GrY7GrY7GrdjI7frJ7frJnkBzKrkF7uBvsF_xBvWnGzUzFrT_EvWzFzUzF3XzF3SrEvbzFjX_E7VrE3XrEnL7B7L7BzZ3D3SvCnarE3SvCrTvCrT7BnV7B7V7BrTT7VnB3cnB7fnB3NTjSArYA3XA36BnB3wBTryD7BzPAvCA3DAr7BT7lDnBv4E7B3sDnBj1BTjpCnB74BvC_sBnBz8BjD7pBjDzevC_YvC7VvCzUvCvWjD_TjDze_Ena_EjXrEzenG7Q3D_TrEzP3D3NjDjcvHvbvHrd3IzerJriBnLriB7LzhCjXvlBjN7kB_OjwBvRvqBnQ3XrJrdnLrxB3SniCzZ79B3XjzCrd_7B3Xz1CvgBv-B3XnpBnQrnBnQr7BzZ_2BrYvvBnV7qDrxBzoB_T34C7pBr2BnazrCzjBnuBvW_7B3cv0BrYvlBvRrnBrTzyBrYj1B_Yv5Bvbj1BzZrTrJ_O7GzjB7Qv1Dn4B3gEn9Bj6BvbvoCriB32D74B7uBvW36Bjc_gCzevpE_gC7sCvlB7pBrTrd_OzerOzoB3S_nB3S_nB3SrO7Gna7LjrBjS7VrJ_OnG7azK_T3Ij_B3Xv-B3XnxC_d_qCjcvqBnQnzBrTniCrYjmBrOjmBrOnzBrT7QnGzK3DvR7G7a_J7zBrTvyCzejc_JrxB3S74B7V7zBrT3rBzPn9BvW3wB3SjwBjSz6C3hBv5BnVvb_JnfzKnpBjNnG7B3SnGnG7B7QnGvlBvH7zBvM3hB7GjpCzPvhD_TrOjDnVrE_iB7GzZnGjhBvH3rBjIjwBrJ3S3DzKvCvlBjIjkCrOj2DrYvMvCrO3D7Q3D3rBjI7fzFrnBjInpB3IjrBrJjrB3I7pB3Ij6BvMvlBjIjhB7Gr7B7Lj_BjNvbzF_xBzKjuCnQ31BnL_lC_OjrB3Ir0CvRvvB_JjhB7GzuDjX7uB_J7pB3IzoB3IzenG7f7GvbzFnf7G7azFj4C7QvrDvWv5BvM7kBvHjrBrJz3BnL3wB_Jj6BvMroDnV31BnLz8BjN7f7G7kBvHvjCjN3wBzK3rB3I7sC7Qz8BvMrYzFzU_ErYnGvWnG7VnG3XvHna3I_dnLjcnLnanLzZ7LjXnLzUnLvb_OnV7L3X3NvbnQ_djS7pB_YjXrO79BvlBv8Cn4B_2B3hB7nCrsBrjDn9BzpDrgCzhC_nBn9BjmBjuCvvB3hB_TjhBjSjc_O3crO7fzP3c3N_Y7LrYnL3X_JrY_J3hB3NzoB_O3mB3Nze_Jjc3IvbjIzZvHjhB3I3mBrJzZnGjX_EjX_EnfzF_d_E_iB_E3hBrE7ajD7avCnkBjD7iCzF7xCvHjrB3D3kCzFn2CvH_qC7G7kBjDzjBvC_lCzF7zB3DvqBjDrnBrE7kB3D3uC7GjuCnGj6B_E_-CjIr-CjI_qCnGzrCnGngDjI_lC_E7fvCjX7BnavCnkGzPrsB3DrnB3D7QnBrETnLnBrJnB3hB7B3cnB7fTnfAzeAvWUjXoBnQoBrT8B3XwC3XkD_TkDjSkDrYgF7aoG_YoG3SgFzjB0KriBoLnf0KjcgK3uCkcnVkIv-BwW7uBwRz3B0UzwCkcrsB8Q7GwCvHkDnVwHnVkIz8B8Vz8BwW7kBkN3X4IjNgFvRoGrJ4D_TkIvlBsO7kB4NnasJnQoGztBoQj_BkX3wBkSj_BkXz3BoVzUwHjXkI_2BgU7uB8Q_T8G_T8G_ToGvRgF7VoGrT0FnVoGnQsEvRsEnVgFvWgFrTsEnVsEzPkD_d0F_dgFriBgF_TwCrTwCzUwCnQ8B3S8Bna8BzZ8BzZoB_dUjrBoBnaAzjBT36BnBjwBTzoBnB_lCA36BTvbT3_BTjXT3mBnBrnBnBnanB79BjInzBnGv-BrJjzCnQv-BrOzUrErOjDvbzFj_BjNvqBrJzjBvHvMvCrd7G3SrEjczF7pBrJzoB_J_nB7LvHvCn9BjS_dzK7QnGzmC7a3DnB7V3InLrEjNzFzP7GjNzFjrBrT7GjDjNnG7avM7frO74Bna7zB7VriB_OnzB3XvqBzUzkDztBniC_d74Bna7pBzUrnB7Q7zBjXr7B7a3pCjhBrgCrd3kCnfjzCvlBj_B3crgC_dzyBvWnkBnQztBzUzyBjXvlBvRjrB_TrxB7Vj9CjrBriB_OnBTjwBzUnGvCrTjIjrB7QjSvH3c_J3DnBzF7Bvb_JnkBjN7kB7LjXjInLjD7G7BnkBzK_djIvbvHjmBzK36BnQrEnB7kB_J7G7BrsBvMnzBrO3hBrJjcvHnQ3DzKvC3NjD_T3DjSvCnVvC7QT3NTjNUnLA3IUrT8BnQ8B7QwCzUsE_O4D7QgF7Q0FnQ0F3SwHjSkIzPwH_OkI7L8G_OsJ7LkInQoLnQ8LrOoLnQkNnLsJnV4Srd0ZjcsYjXsTnaoVvRwMvRoLzPsJzP4I_OkI3XoLnQ8G_TwHvRoG_ToGnQsEzZoGvgBwH_lC0P3wBoLjhBwHj1BwMzhCgPzrCwR3kC0PnzBwM_d4I7awH3S0FzU8GvMsE_J4D3NgF_YgK7aoLrxBwWvlBwR7akNv0BoanV0KnQkIzUgKvRkIjmBwRjcwM_YgK7agK7QoGrOgFzPgF3S0F7QsEzP4DjI8BnQkDzU4D7VkD7V8BnGAnLUrTU3NA_OAvMTzU7BvR7BzZrEnazF3S_EvW7GjSnGzZ_JzjB_O3c3NrYvM3XjNrdvRnanQ3X_OzZ7Q_Y7QzjBrY_dnV7a3SnVrOvqBjcnpBvb7zBriBrnBzZnfrTnkBvWjmB3XrnB_Y3hBnVrgCzoBnsC3wB3IzFnV3N7a7QzUjN7kBjXnuBrdzK7GzKnGnLvHjmBrYzoBzZjhBzU7LvHz3BzjB_iBvW7VrOjc_TvRvMzPvMjN_JnQjN_Y7VnQ_O3NvM_OrO3N3NnQ7Q_OnQrT7V3S7VvWvbzP_TrO3SzP7VjN3SrOzUvlB74BrtDjoF31BjzC7anpB7kBn4BrnB_7BnkBn4Brd_sBna_nBzZrnB7azoBnVnfzU_dzUrdjXnfvWrdnQzUzUzZnfvlB_Y3c_T7VnVjX_YnajhBriB_sBztB7nCnnCj1B31Bn4B74B3_BrgCn2Cz1CnavbvgBriBvb_djD3D_TjXnQ_TvR7V3NvRrOrT3NrTnLnQjNrTvMrT_JzPjSrdvMnVzK3S7L7VjN_Y3N7a_OzejNvbrOzevR3mBnVjwB_iBjuC7fvoCnar7B7a_7Br7BvkE3rB7gD3NzerdzhCzejkCnG3N_OjhBjIvRnQ3hBrdr7BvR_iB7VvqBzoBnxC3IjS3I3SvM_dnLzZ7GzP_TjwBnGrO_O7kB3rBjsDvHjS7G7Q_J_YTnBjDvHzKjX_Y3wBzFnL3mBnnCrnB7iC_djwB_YrnB_YzjBrYzjBrTzZ_T7a3NvR3NvRzPrTnVzZ_T3XvR_TvR3S3hB_iBjhB3hB7LnLvWnVnkBvgBzjB_dzPjNzZzUzejXnfjXnpB_d3rBzen4B_nB3X7Q7LjI7nCnzBnkB_YzjB_YrY7QnkBrYvWrOrT7LjSzKrTzKrTrJnQvHvWrJvRnG7V7G7VnG_T_E3XrE3SjD_TvC_Y7BvWT_YUzUoBnVwC_TkD7QkDvR4DzP4D_O4DzPgFvRoGnQoGrdoLvboL_Y0KjSwHjXsJnQoGzUwH_OgF_OsErTgFnQ4DnV4DjX4D_TwCrYwC7VU3XAnVTvW7B7Q7B7QvCjXrE7Q3DrTzFvRzFvRzFvRnG_TjIjSjIvRjI3SrJnQ3IvRzK3S7LvW_O3X7Q_TzP_TnQ3X_T3X_T3SzPvR3NrOzKzPnL7QnLvRnLvRzK3XjN7VnL_TrJ3SjI_OzFjSnGjSzF3S_E_T_E_OjDzU3D_TjDzUvCzUnBzUT3XAvbAvRAnQAzPAzPTnLT3NnB7Q7BrO7B_OvCrT3D3XzFzKjDzPrE3SnGvRnGjSvHnQ7GjNnGrO7G3NvH3X3NrO3IrOrJzPzKjNrJ7L3IjN_JvM_JvMnL3SvR3NvMzPrOnVnV_JnL3N_OjSnV7LrOrOvRjNnQnQzUvW3c7ariBnLrOvb_iBrYzenV7a_YnfnajhBriB3rBjcnkB7V7a_JjNrxB79B7fzoB3cnkBriBrsB74BvoCzUnarlC34C_nB_xBjmBjwB3hBvqB7f_nBjhBnpBjkCn2CjX3c7Q_T7ariBzZjhB3mB3wB_JvM3pCv8C3S3X7pBv0BjmB3wB7lD3gE7Vjc_d3mBnf_nBzyBj_BnkBztB7Q7V7VvbjSvWjSjXvWvb7L_O7QzU_OvR3SnV3N_OjSrT7QvRrO3NzP_OvRnQzenaztBnkB7arT_dzU_YnQ_YrO_YjNzZ7L_YnLjX_JzPnGrOzFzPzF7QzFnQ_E3S_E3SrE7V_E7VrEzZrEna3DjhBrEjInB7xC_Jze3Djc3DjcrEjX3DvWrErOjD3SrE3S_E3N3DnLjDjcjIvWvHnVvH_TvH_TjIzZzK_YnLvWzKzU_JzUzKnVnLnkB3SvbrOrd_O7VnL3X7L_YvMzZ7LzZnLzU3InazKnVjIrdzKze_J3NrE7LjDrT_EjXzFjhBvH7V_E7kB7G7uBjI3rBvHrY3D3hB_EjcrErTjD7uBjI7uBvHzoBnGzUjD7V3DvW3DvRjD7QvCnf3DvgBjD_sB3DrTnBzPT7QA_sBoB7f8B7uB4DvlBkDrvC8GvlBwCvW8B_nB4DrT8B3mBkD7V8BrnBkD7VoB7QoBzPU_8DwMnkBkD_T8B7QoBvsFgP74BgFnfwC7zBsEvqB4DrxBsErdwC_nBkDrdwC7V8BjcwC7zBsEnfwCzFU_JUzPUriBkDjmBkDzZwC3ckDnQoB_T8B3S8B_2BsErsBkDnzBsEj2DgK7kBwCrToB7VoBnVU3SAjSTvMTrTnBnV7B3S7BzUvCjX3D_YrEnVrE7Q3DjSrE3S_EnVnGnV7G_T7G3S7GrYrJ3X_J3XzKjS3IrT_J3S_J_iB3S7pBvWztB3XzyB_YjSjIvRvH3XrJ_TvH_drJzZvH_Y7G7fjIzP3D_OjD_d7GrqCvR3hBjInf7GjXzF3N3DvM3DjSzF3SnG3S7G7VjIvbnLna7LnV_JnajNzUnL3SzK36BzjB79BrnBrTvMvb7QnQ_JnG3DzUnLjrBvW3D7B7kB7QvlB_OnkBrOrdzKrY3InG7BrdzKj1BrTzjBjNzZrJrJ3D7VjIrO_EzezK_E7BzPzFvlBrOzjBvMvWjInfnLjcnLnGvCjIjDjXrJrOzF3S3InV_JnavMrTrJjS3I_sB7VnfzPvHrEjIrEzFjD3SrJ_T_JztBvWzPjIze_OjN7G_EvCnGjD7kB3S7VzK7Q3I3rBvW_TzKv0BvbjX7L35E7sC3IrEjuC_nBnGjD3X7L_OvHnQjI7G3Dna3NnGjDzUzK_EvCjX7LnGjDvRrJnGvCjN7GnkB_T7uB3XrdrO79B_d_T_JrOvHv5Brd7lDnzB_2BvbzZjNzPjInpBnV_EvCvM7GvR3InkB3S3NvH7QrJ3I_E7L7GvHrEvWrOjS7L_d_TjXzPnGrE7G_E_OnLzKjIjSrO3S_OnpB3hBjI7GrE3DzKrJjIvHjX7VvlB7kBnLnLvb3c_JzK3mB7pBrnBjrBv5B3_B39CnlD7f_iB_O7Q_Yvb_Yjc3SzUjD3D3D3DrE_EzevgBnuBzyB74B3_BnkB3mB_nBvqBvR3S_Yvbrd7fvb_dze3hBnQvRvHrOrJnL_JvMvRzUvRzZ_JnQnGzK_OvbzK_Y7B_E7LvbrJ_Y7Lrd7L7ajN_YrO3XnQzU3IzKjczevvBrsB_O3NvMnL_JrJ_J_J_JzK_JzK3I_J_JvMrJ7LrJvM3IvM_JrO_JrO3IjNnarnBvhDrwEzyB_qCvgB3wBvlB_2B_qC3sDvM3SjcvqBrJ_O_JrOrJ_OrTrd_JrO3IrO3SjcvR7anLvRvC3DvMrTnB7B3I7L7L7Q7avqB3SvbrTjc3Sjc3SjcjSvbjI_Ona_nB3I3NzKnQ_sBvjCjcvqB3SnfnGzK7L7VnLnV7GjNnQ3hB7VjwBjNrdvHzP3IjSjI_OzKjSrOvWzKrO_O_T_OvR3NrO_T3S7VvR_OzKnQ_JnQ3I3S3I_OzF3IjD7L3DjXzFjcnGrgCvMzoBjI7GnB31BjInzB7GnajD_ET_ETzeT3hBnBvRTvMA_OA_OA7iC4DjcwCjNoBvWwCnLU_EU7GoBvlBwHvlBoGjSkD_EUrJ8BnQoGnV8GrsBoLjhBgK3XkIzUwHzKsE3rBkSrxB0UvvBoV39CopBrY8LnVgKjcwMriBgPn5Do4B3wBoVvW0K7sC4hB7pB8Qv5BoVjmBkNnzBgP3wBoLztBgKnkB0Fz3B4I3hBgF3_BsJzK8BnLUnLoB3I8BvCUvCU7BAzFU7BA7BArEUvCU3DUvHAnVkDnGUnGUnVkDnfgFnVkDjX4D3DU_O8BzP8BrT8BrJUvMoBnLU_TUrTUvRAnQTnQT_OnB_OnBnQ7BnQvCnQjD_TrE3NjDvMjDnLjDnLjD_TnG7L3D_Y3InQnGjSvH3hBrO7anL7kBnQ_nB7Q_dvM7anLnL_ErJ3DjIjDjIjDrJ3DnLrEnQzFnL3DzP_E7L3D3N3DrTzF3X7GzZ7GrdjIrYvHjc3IvqB3N_xB3SzoB3S7kB3S_iB_T7anQnavRzjBzZrEjD7pBjhB3uCzhCnQvM_JjI3NnLjX_OjX3N7VnLjNzFrJ3DvW3I7a_JjDnBnGvCrEnBjDnBvWjI_TvH3hBvMrO_EjNrE_iBrOvW_JnVvH_EvCjI3D3S7LnkBvWvlBrTnL_E3I3D7GjD_E7B7GvCzF7BnG7B7G7B_EnB3I7BnGnBrJ7BjNvCjNnB7QTrYUrT8BnLoB7GoB3I8BvHwCvH8BjN4DjSoGrT4I7VwMrJoG7GsEzF4D_Y4SrTkNzUoQvvBgjB3DkD7LgKvH0Fjc4S_YsOjSsJrT4I_YsJnG8B7G8BvH8B7G8BrJwCnG8BjSgFvRsEjN4DzKwCzPsEvHwC7GwC3IkD3I4DjNgF3hBkN7LkDvH8B7GoBrJoB3IUnLAvHT_ET7GnB_JvCrJvCzFvCjI3DnLzFjI_EjIzF7LjIvH7GvMvMvHjI_OvRrEnGvC3D_OzU_OnVjN_TnLvRrJnQvH_OvH7QjIzUvMzjB_E3XvC3NrEzevCzZT3STrdAjcoBzjB4D3uCwCvvBkDrgCoBzUkDn9BAzFA7VT7VvC3hBzFriBvC7L3DzP3DrO_EnQ_E_OnGvRnGnQnG_O7GzPnLna_TnuB_J7VvR3mBjIjSrJvWnL_YnpBj9C3N7f3IrT_OriBnV7uBzFvM3N_iB_JnV_OnkBjNzevbj_BjSjrBjSnpB3N_drErJ_E7LnV_xBvH7QvW_xBzK7VrJ3SzUrnBzPrd_E7LrJ3SrO7a3InQrJrTrJ_T3D3IzFnL_J_T7Lna7QnkB3NjcjmBnxC_JnVzjB3pCvC_EvCzFzF7LzKnVrJ3S_JvRrOnarEjI7QrdrTvgBzKvRjDzF7a3rBzF_J_J_OrE7GnGrJzPvW3SzZnL3NjNnQ_J7LvlB3rBvRzUjNzPjInLnL_O_JzP_J7QvRjmBnGzPnGjSnGrT_J3hBjIjc7Gvb_JzoBzFvWnQjkCjIvgBnG7anG3c7BzKrEzP3D3XnB7QTrOAzFA3NU3NUjSoBzP8B_OoBrJ8B7LoBvH0FvlBsErY4DjX8GrnBkInuB8B7L8B_J8B_JoBrJ8B3NUvHU_JAnLT_JjDrO7BzF7B_EjDvH3D7GjD_E3DrEvH7G_E3D_EvCzFvC7GnBnGTjIoB7GwC7G4DvHsEnGsEjIoGnGsEjIgF_J0FnL0F3IkDnLkDvHkD7GkDjDkD7B8B7BoB7BoBrEwCrT4Dr-CsOjcsErOwC_OwC_OwC_EU3IoB3rBwHrO8B3c8B7VoB3DA7QnBvRnB7ajDrYvC3cjDzZjDnLnBzKnBnLnBzKTnLnBvMTnLArJUnLAzFUzK8BzFoB7GoBvH8B3IwCjIwCjIwCzKsE7GkDjI4DvH4DjIsEvHsEzUwMvHsE3IgF3IgF7G4D_EwCzFwC7GwCnL4DvM4DjN8BjNU3NAjN7BjNvCjNvCjNvC3NvC_T_EvM7BjInB7LvCrY_EvMvCzK7BzK7B7LvC7LvCjX_EjNvC_EnBrET_TrEnfnGvMvC7LvCjNjDvMvCvMjDvMvCrOvCnL7B_J7BrJ7BzFnBvMvCnL7B7L7BvMnBnuB3D7avCrnBjDna7BnLnBrJnBrJnB_J7BjNjDjS_EvM3DnVnGr7BvRrYvHztB_O7fzK3IjD_J3DjI3DrE7BzKzFzFjDvHrEvHzFvHnGvH7GjIjI7GvH7GjI7GrJ7G_JzF3IzF_JnGnLzFnL_EnL_E7L_EjNrE7L_OvqB7QvvB_J7arEnL_E7L_EnL_EzK_E_JzFzK7G7L7G7LzUnkBzKjSzK3S3SvgB7anuBrEvH3IrOrJzPjIjN3I3N_JrOjX_iBjIvMjIvM7LrTzF3I7BjDjIvM7GnL7GjNnG_OnGnQzF7Q_E7QrEvRrE_T_OrgCzKvvB7L_xBrJvqBjD7QjD3S7B3N8BvRTrOTrYoBzU8B7QkDnQwC_J4DvMwCnGsEzK4IrT8G3cwCrJoBnGoBrJA7GTjI7BjI7BnGrEzKjIjNjNjI7BvC7B7B7B_EnB3DnB_EnBnGTnGT7GA_E4NzjBoQ7pB4D3D0F_E4D3D8B7BkXnVgZvWoVzU4IrJ0U3SoL7L8L_OoG3IsYnfkInG8LnLoL3NssBr7Boa7f8ariBgZ7fwHrJwHrJ8pB7zB8L_OsEzFgFvHsE7G4DnGsEvHsEjIgF3IsEvHsE7G0FvH0FvH0FvHoGvH8QzUgejmB8QzU8L3NsOnQgUrTkIjIkIvHwHvHkN_OkhBrnB8G3IsEzFwCjDwCjD0F7G4IzKkNzP8LjN0KvMgPvRwHjIgK_JkIjI8LjNwHvH8GjIwH3I0FnGkNzPoV3X8L_OsOnQ0KjNsO3S0KrOoQnV4cjmBwMvRkc3mBoV3coGjI4DrE4D3DkDvCkD7BkDnBkDTsJTgjBrsB8fvqBsEnG8GjIwR7V8LrOgP7Q0FvHoGjIsJ3N8BvC4DrEoGvHgF7GkIzKgFjI8LvR4DrEsE3DgFvCgF7BkN_E8GjDwH3DwHrEwHrEkI_EkI_EoG3D0FrE8GzFwHnGkI7GwH7GgF_EoGvH4rBz3BwMnQ8L_O4DrEwCvCwC7BwCTkDAkD8BwCoBwCUwCUwCA4DnB8GvM4S7f4IjNoVzjB8GrO4D_JgFzP8GvWoQnpBkD_JgPnpBwM3hB4I3X8L7fwb3pC4S3wBoQzoBkS7uBsJ_YgF3NgF3I4IvWwCnGgKjcoLvbkI_TkInVsE7BwCTwCAwCUoBUgKwH4IoG0FkDOG"",""transport"":{""mode"":""car""}},{""id"":""d2791ec2-3461-4295-a0b0-e30a83f8ad59"",""type"":""vehicle"",""departure"":{""time"":1719462508.000000000,""place"":{""type"":""place"",""location"":{""lat"":48.8566467,""lng"":2.3510431},""original_location"":{""lat"":48.8567,""lng"":2.3508}}},""arrival"":{""time"":1719499194.000000000,""place"":{""type"":""place"",""location"":{""lat"":52.5165554,""lng"":13.3833073},""original_location"":{""lat"":52.5166,""lng"":13.3833}}},""polyline"":"""",""transport"":{""mode"":""car""}}]}]}"
zRq5AJei,RC Bluetooth Car,NaroxEG,C++,Wednesday 26th of June 2024 09:00:52 AM CDT,"#include <SoftwareSerial.h>

#define MotorA_F 4
#define MotorA_B 5
#define MotorB_F 6
#define MotorB_B 7
#define ENA 9
#define ENB 10

#define tx 3
#define rx 2

SoftwareSerial Bluetooth(rx,tx);

char _read;

void setup() {
  pinMode(MotorA_F, OUTPUT);
  pinMode(MotorA_B, OUTPUT);
  pinMode(MotorB_F, OUTPUT);
  pinMode(MotorB_B, OUTPUT);

  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);

  Bluetooth.begin(9600);
}

void loop() {
  // Controlling Speed
  analogWrite(ENA, 255);
  analogWrite(ENB, 255);
  if (Bluetooth.available() > 0) {
    _read = Bluetooth.read();

    if (_read == ""F"") {
      digitalWrite(MotorA_F, HIGH);
      digitalWrite(MotorA_B, LOW);

      digitalWrite(MotorB_F, HIGH);
      digitalWrite(MotorB_B, LOW);
    } else if (_read == ""B"") {
      digitalWrite(MotorA_F, LOW);
      digitalWrite(MotorA_B, HIGH);

      digitalWrite(MotorB_F, LOW);
      digitalWrite(MotorB_B, HIGH);
    } else if (_read == ""L"") {
      digitalWrite(MotorA_F, LOW);
      digitalWrite(MotorA_B, HIGH);

      digitalWrite(MotorB_F, HIGH);
      digitalWrite(MotorB_B, LOW);
    } else if (_read == ""R"") {
      digitalWrite(MotorA_F, HIGH);
      digitalWrite(MotorA_B, LOW);

      digitalWrite(MotorB_F, LOW);
      digitalWrite(MotorB_B, HIGH);
    }
  }

}
"
NdN53V5A,my_menu and add_song_menu,horozov86,Python,Wednesday 26th of June 2024 08:58:38 AM CDT,"# —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ—Ç–æ –º–µ–Ω—é my_menu
my_menu = Menu(wnd)
wnd.config(menu=my_menu)

# —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ–¥ –º–µ–Ω—é add_song_menu
add_song_menu = Menu(my_menu)

# –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –ø–æ–¥ –º–µ–Ω—é—Ç–æ –∫—ä–º –≥–ª–∞–≤–Ω–æ—Ç–æ –º–µ–Ω—é
my_menu.add_cascade(label=""Add Songs"", menu=add_song_menu)

# –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∫—ä–º –ø–∞–¥–∞—â–æ—Ç–æ –º–µ–Ω—é –∏ –∑–∞ –º–µ–Ω—é—Ç–æ –∫–æ–µ—Ç–æ –ø–∞–¥–∞ —Å–µ –∑–∞–¥–∞–≤–∞ –∏–º–µ
add_song_menu.add_command(label=""Add One Song To Playlist"", command=add_song)

def add_song():
    song = filedialog.askopenfilename(initialdir=""audio"", title=""Choose a song"", filetypes=((""mp3 Files"", ""*.mp3""),))
    song_box.insert(END, song)"
UL7LGdCa,Untitled,dllbridge,C,Wednesday 26th of June 2024 08:56:22 AM CDT,"
#include  <stdio.h>


void foo(int *n2);   

////////////////////////////////////////////////////
int main()                                        // 
{
        
    int  n = 4; 

    int *pn = &n;

    foo(&n);
    
    printf("" n = %d \n"", n);
}







////////////////////////////////////////////////////
void foo(int *p)                                  // 
{
        
     *p = *p + 5;


}














/*
#include  <stdio.h>


int  n = 4; 

int *pn = &n;

////////////////////////////////////////////////////
int main()                                        // 
{
	

    printf("" n = %d \n"",    n);
    printf(""&n = %d \n"",   &n);         
    printf(""pn = %d \n"",  *pn);  
}



*/




"
Vxzd5ViJ,ÈÇÄÊÇ®‰∏ÄËµ∑ÁúãÔºö‚öô ËΩªÂêàÈõÜËÆæÁΩÆ ‚öô,xiaomianao666,JavaScript,Wednesday 26th of June 2024 08:56:17 AM CDT,Êµ∑ÈòîËßÜÁïåËßÑÂàôÂàÜ‰∫´ÔºåÂΩìÂâçÂàÜ‰∫´ÁöÑÊòØÔºö‰∫åÁ∫ßÈ°µÈù¢ËØ¶ÊÉÖÔø•page_detailÔø•‚öô ËΩªÂêàÈõÜËÆæÁΩÆ ‚öô@@
FNhVBy87,squadMedic.sqf,kerbo_,SQF,Wednesday 26th of June 2024 08:38:36 AM CDT,"// Have the medic do medic things

// _medicClass needs to match the current class of your medic
//
// KP Liberation
//_medicClass = ""rhsusf_army_ocp_medic"";
//
// Antistasi
_medicClass = ""I_G_medic_F"";

_medic = objNull; 
_injured = objNull; 
_medicPos = objNull;
_injuredUnits = [];

{ 
 if ((typeOf _x == _medicClass) && (alive _x)) exitWith { 
  _medic = _x; 
 }; 
} forEach units group player; 
 
if(isNull _medic) exitWith { hint ""No medic found""; }; 
 
player sideChat format[""Found squad medic %1"", (name _medic)]; 
_medicPos = position _medic; 
 
{ 
 if(getDammage _x > 0.1) then { 
  _injuredUnits pushBack _x; 
 }; 
} forEach units group player; 
 
if (count _injuredUnits == 0) exitWith {_medic sideChat ""No injured found""}; 
_medic sideChat format[""Found %1 injured"", (count _injuredUnits)]; 
 
_injuredUnitsClosest = [_injuredUnits, [_medic], { _input0 = objNull; _input0 distance _x}, ""ASCEND"", {canMove _x}] call BIS_fnc_sortBy; 
 
{ 
 _injured = _x; 
 if(_medic == _injured) then { 
  _medic sideChat ""Healing myself""; 
  _medic action[""HealSoldierSelf"", _injured]; 
  waitUntil { (getDammage _injured < 0.1) or (!alive _injured)}; 
 } else { 
  if(!isPlayer _injured) then { 
   _injured disableAI ""MOVE""; 
   _injured setUnitPos ""down""; 
  }; 
  _medic sideChat format[""Moving to %1"", (name _injured)]; 
  _medic doMove (position _injured); 
  while {(_medic distance _injured > 3) and (canMove _medic) and (alive _injured) and (alive _medic)} do { 
   sleep 1; 
   _medic doMove (position _injured); 
  }; 
  if(!alive _medic) exitWith {player sideChat format[""Medic %1 is down!"", (name _medic)]}; 
  if(alive _injured) then { 
   _medic sideChat format[""Healing %1"", (name _injured)]; 
   _medic disableAI ""MOVE""; 
   _medic setUnitPos ""middle""; 
   _medic action [""HealSoldier"", _injured]; 
   waitUntil { (getDammage _injured < 0.1) or (!alive _injured)}; 
   sleep 1; 
   _medic sideChat format[""OK %1, you are good to go"", (name _injured)]; 
   if(!isPlayer _injured) then { 
	_injured enableAI ""MOVE""; 
	_injured setUnitPos ""auto""; 
   }; 
   _medic enableAI ""MOVE""; 
   _medic setUnitPos ""auto""; 
  } else { 
   _medic sideChat format[""We lost %1!"", (name _injured)]; 
  }; 
 }; 
} forEach _injuredUnitsClosest; 
 
_medic sideChat ""All good now""; 
_medic doMove _medicPos;"
keGLhPrv,ÈÇÄÊÇ®‰∏ÄËµ∑ÁúãÔºö‰πùÈôçÈ£é,xiaomianao666,JavaScript,Wednesday 26th of June 2024 08:29:01 AM CDT,Êµ∑ÈòîËßÜÁïåËßÑÂàôÂàÜ‰∫´ÔºåÂΩìÂâçÂàÜ‰∫´ÁöÑÊòØÔºö‰∫åÁ∫ßÈ°µÈù¢ËØ¶ÊÉÖÔø•page_detailÔø•‰πùÈôçÈ£é@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJqczpcXG5ldmFsKEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9wYWdlL21haW5cXFwiKSkucnVsZSk7XFxubGV0IHR5cGUgPSBnZXRQYXJhbSgndHlwZScsICcnKSxcXG4gICAgaWQgPSBnZXRQYXJhbSgnaWQnLCAnJyksXFxuICAgIHRpdGxlID0gZ2V0UGFyYW0oJ3RpdGxlJywgJycpO1xcbmxldCByZXMgPSBnZXREb3ViYW5SZXMoXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvXFxcIiArIHR5cGUgKyBcXFwiL1xcXCIgKyBpZCk7XFxubGV0IHVwZGF0ZSA9IFxcXCJcXFwiO1xcbmlmICh0aXRsZSA9PSAnJykge1xcbiAgICBsZXQgbGVuZ3RoID0gcmVzLnZlbmRvcnMubGVuZ3RoO1xcbiAgICB1cGRhdGUgKz0gbGVuZ3RoID4gMCA/ICflhbEnICsgbGVuZ3RoICsgJ+S4queJh+a6kCcgOiAn5pqC5peg54mH5rqQJztcXG4gICAgaWYgKGxlbmd0aCA+IDApIHtcXG4gICAgICAgIGxldCBlID0gcmVzLnZlbmRvcnNbMF07XFxuICAgICAgICB1cGRhdGUgKz0gZS5lcGlzb2Rlc19pbmZvID8gXFxcInxcXFwiICsgZS5lcGlzb2Rlc19pbmZvIDogXFxcIlxcXCI7XFxuICAgIH1cXG59IGVsc2Uge1xcbiAgICBmb3IgKGxldCBlIG9mIHJlcy52ZW5kb3JzKSB7XFxuICAgICAgICBpZiAoZS50aXRsZSA9PSB0aXRsZSkge1xcbiAgICAgICAgICAgIHVwZGF0ZSArPSBlLmVwaXNvZGVzX2luZm8gPyBlLmVwaXNvZGVzX2luZm8gOiBcXFwiXFxcIjtcXG4gICAgICAgICAgICBicmVhaztcXG4gICAgICAgIH1cXG4gICAgfVxcbn1cXG5zZXRSZXN1bHQodXBkYXRlKTtcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIumFjee9rue8lui+keeVjOmdolwiLFwicGF0aFwiOlwic2V0dGluZy1lZGl0b3JcIixcInJ1bGVcIjpcImpzOlxcbi8qKlxcbiAqIOmAmui/h+S8oOWFpSBwYXJhbXMg5a+56LGh55Sf5oiQ57yW6L6R55WM6Z2iXFxuICogQHBhcmFtIGQg6KeG55WMIHNldFJlc3VsdCDnlKjnmoTliJfooahcXG4gKiBAcGFyYW0gY29uZmlnS2V5IGNvbmZpZyDnmoQga2V5IOWAvO+8jOavlOWmguaIkeimgeaLvyBjb25maWcuZGV0YWlsc1ZpZXdDb25maWdz77yMY29uZmlnS2V5IOWwseS8oCBcXFwiZGV0YWlsc1ZpZXdDb25maWdzXFxcIlxcbiAqIEBwYXJhbSBwYXJhbXMg57yW6L6R55WM6Z2i55qE6YWN572uXFxuICpcXG4gKiDjgJBwYXJhbXPlr7nosaHmlbDmja7npLrkvovjgJFcXG4gKiB7XFxuICAgICAgICBrZXk6IFxcXCJpbnB1dF9uYW1lXFxcIixcXG4gICAgICAgIGRlc2M6IFxcXCLor7fovpPlhaXlkI3np7BcXFwiLFxcbiAgICAgICAgdHlwZTogJ3RleHRhcmVhJyxcXG4gICAgICAgIGRhdGE6IHtcXG4gICAgICAgICAgICBjb25maWc6IHtcXG4gICAgICAgICAgICAgICAga2V5OiBcXFwiaW5wdXRfY29kZVxcXCIsXFxuICAgICAgICAgICAgICAgIGRlc2M6IFxcXCLor7fovpPlhaXovpPlhaXphY3nva5cXFwiLFxcbiAgICAgICAgICAgICAgICB0eXBlOiAndGV4dGFyZWEnXFxuICAgICAgICAgICAgfSxcXG4gICAgICAgIH1cXG4gICAgfVxcbiAqL1xcbmZ1bmN0aW9uIG1vZGVFZGl0UGFnZShkLCBjb25maWdLZXksIHBhcmFtcykge1xcbiAgICBhZGRMaXN0ZW5lcignb25DbG9zZScsICQudG9TdHJpbmcoKHBhcmFtcykgPT4ge1xcbiAgICAgICAgY2xlYXJNeVZhcihwYXJhbXMua2V5KVxcbiAgICAgICAgbGV0IGRhdGFzID0gcGFyYW1zLmRhdGE7XFxuICAgICAgICBsZXQgZGF0YUtleXMgPSBPYmplY3Qua2V5cyhkYXRhcyk7XFxuICAgICAgICBmb3IgKGxldCBpIGluIGRhdGFLZXlzKSB7XFxuICAgICAgICAgICAgbGV0IGRhdGFLZXkgPSBkYXRhS2V5c1tpXVxcbiAgICAgICAgICAgIGNsZWFyTXlWYXIoZGF0YXNbZGF0YUtleV0ua2V5KVxcbiAgICAgICAgfVxcbiAgICB9LCBwYXJhbXMpKVxcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFxcXCLkv53lrZhcXFwiLFxcbiAgICAgICAgZGVzYzogcGFyYW1zLmRlc2MsXFxuICAgICAgICBjb2xfdHlwZTogJ2lucHV0JyxcXG4gICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgdGl0bGVWaXNpYmxlOiBmYWxzZSxcXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU6IGdldE15VmFyKHBhcmFtcy5rZXksIFxcXCJcXFwiKSxcXG4gICAgICAgICAgICB0eXBlOiBwYXJhbXMudHlwZSA/IHBhcmFtcy50eXBlIDogJycsXFxuICAgICAgICAgICAgb25DaGFuZ2U6ICdwdXRNeVZhcihcXFwiJyArIHBhcmFtcy5rZXkgKyAnXFxcIiwgaW5wdXQpJ1xcbiAgICAgICAgfVxcbiAgICB9KVxcbiAgICBsZXQgZGF0YXMgPSBwYXJhbXMuZGF0YTtcXG4gICAgbGV0IGRhdGFLZXlzID0gT2JqZWN0LmtleXMoZGF0YXMpO1xcbiAgICBmb3IgKGxldCBkYXRhS2V5IG9mIGRhdGFLZXlzKSB7XFxuICAgICAgICBsZXQgZGF0YSA9IGRhdGFzW2RhdGFLZXldXFxuICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBcXFwi5L+d5a2YXFxcIixcXG4gICAgICAgICAgICBkZXNjOiBkYXRhLmRlc2MsXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdpbnB1dCcsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgdGl0bGVWaXNpYmxlOiBmYWxzZSxcXG4gICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBnZXRNeVZhcihkYXRhLmtleSwgXFxcIlxcXCIpLFxcbiAgICAgICAgICAgICAgICB0eXBlOiBkYXRhLnR5cGUgPyBkYXRhLnR5cGUgOiAnJyxcXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA1LFxcbiAgICAgICAgICAgICAgICBoaWdobGlnaHQ6IHRydWUsXFxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiAncHV0TXlWYXIoXFxcIicgKyBkYXRhLmtleSArICdcXFwiLCBpbnB1dCknXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSlcXG4gICAgfVxcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICfkv53lrZgnLFxcbiAgICAgICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJyxcXG4gICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eSNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGNvbmZpZ0tleSwgcGFyYW1zKSA9PiB7XFxuICAgICAgICAgICAgbGV0IGNvbmZpZyA9IEpTT04ucGFyc2UocmVxdWVzdChnZXRNeVZhcigncWRiX2NvbmZpZycpKSlcXG4gICAgICAgICAgICBsZXQgbmFtZSA9IGdldE15VmFyKHBhcmFtcy5rZXksIFxcXCJcXFwiKTtcXG4gICAgICAgICAgICBpZihuYW1lID09ICfpu5jorqQnKSByZXR1cm4gJ3RvYXN0Oi8v6buY6K6k6YWN572u5peg5rOV57yW6L6RJ1xcbiAgICAgICAgICAgIGNvbmZpZ1tjb25maWdLZXldLnVzZSA9IG5hbWVcXG4gICAgICAgICAgICBpZiAoIWNvbmZpZ1tjb25maWdLZXldW25hbWVdKSBjb25maWdbY29uZmlnS2V5XVtuYW1lXSA9IHt9XFxuICAgICAgICAgICAgbGV0IGRhdGFzID0gcGFyYW1zLmRhdGE7XFxuICAgICAgICAgICAgbGV0IGRhdGFLZXlzID0gT2JqZWN0LmtleXMoZGF0YXMpO1xcbiAgICAgICAgICAgIGZvciAobGV0IGkgaW4gZGF0YUtleXMpIHtcXG4gICAgICAgICAgICAgICAgbGV0IGRhdGFLZXkgPSBkYXRhS2V5c1tpXVxcbiAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IGRhdGFzW2RhdGFLZXldXFxuICAgICAgICAgICAgICAgIGNvbmZpZ1tjb25maWdLZXldW25hbWVdW2RhdGFLZXldID0gZ2V0TXlWYXIoZGF0YS5rZXksIFxcXCJcXFwiKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgd3JpdGVGaWxlKGdldE15VmFyKCdxZGJfY29uZmlnJyksIEpTT04uc3RyaW5naWZ5KGNvbmZpZykpXFxuICAgICAgICAgICAgYmFjaygpO1xcbiAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/kv53lrZjmiJDlip8nXFxuICAgICAgICB9LCBjb25maWdLZXksIHBhcmFtcylcXG4gICAgfSlcXG59XFxuXFxuLy/oh6rlrprkuYnpppbpobUt6YWN572u57yW6L6R6aG16Z2iXFxuZnVuY3Rpb24gaG9tZVBhZ2VNb2RlRWRpdFBhZ2UoZCkge1xcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICc8Zm9udCBjb2xvcj1cXFwicmVkXFxcIj4nICsgJ+i/lOWbnuaVsOe7hCzkvptzZXRSZXN1bHTkvb/nlKgnICsgJzwvZm9udD4nICsgJzxmb250IGNvbG9yPVxcXCIjODA4MDgwXFxcIj48YnI+JyArICfjgJDlhoXnva7lh73mlbDjgJEnICsgJzxicj4mbmJzcDsmbmJzcDsmbmJzcDtoaWtlcjovL3BhZ2Uvc2V0dGluZ1BhZ2U6IOiuvue9rumhtSjpu5jorqTpppbpobXmnInkvb/nlKjnpLrkvospJyArICc8L2ZvbnQ+JyxcXG4gICAgICAgIGNvbF90eXBlOiAncmljaF90ZXh0J1xcbiAgICB9KVxcbiAgICBtb2RlRWRpdFBhZ2UoZCwgXFxcImhvbWVQYWdlQ29uZmlnc1xcXCIsIHtcXG4gICAgICAgIGtleTogXFxcImlucHV0X25hbWVcXFwiLFxcbiAgICAgICAgZGVzYzogXFxcIuivt+i+k+WFpeWQjeensFxcXCIsXFxuICAgICAgICAvLyB0eXBlOiAnaW5wdXQnXFxuICAgICAgICBkYXRhOiB7XFxuICAgICAgICAgICAgY29uZmlnOiB7XFxuICAgICAgICAgICAgICAgIGtleTogXFxcImlucHV0X2NvZGVcXFwiLFxcbiAgICAgICAgICAgICAgICBkZXNjOiBcXFwi6K+36L6T5YWl6YWN572u5Luj56CBXFxcIixcXG4gICAgICAgICAgICAgICAgdHlwZTogJ3RleHRhcmVhJ1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfSlcXG59XFxuXFxuLy/oh6rlrprkuYnor6bmg4XpobXpnaIt6YWN572u57yW6L6R6aG16Z2iXFxuZnVuY3Rpb24gZGV0YWlsVmlld01vZGVFZGl0UGFnZShkKSB7XFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogJzxmb250IGNvbG9yPVxcXCIjODA4MDgwXFxcIj4nICsgJ+OAkOWGhee9ruWPmOmHj+OAkScgKyAnPGJyPiZuYnNwOyZuYnNwOyZuYnNwO2lkOiDniYfljZVpZCcgKyAnPGJyPiZuYnNwOyZuYnNwOyZuYnNwO3R5cGU6IOeJh+WNleexu+WeiycgKyAnPGJyPiZuYnNwOyZuYnNwOyZuYnNwO3RpdGxlOiDniYfljZXmoIfpopgnICsgJzwvZm9udD4nLFxcbiAgICAgICAgY29sX3R5cGU6ICdyaWNoX3RleHQnXFxuICAgIH0pXFxuICAgIG1vZGVFZGl0UGFnZShkLCBcXFwiZGV0YWlsc1ZpZXdDb25maWdzXFxcIiwge1xcbiAgICAgICAga2V5OiBcXFwiaW5wdXRfbmFtZVxcXCIsXFxuICAgICAgICBkZXNjOiBcXFwi6K+36L6T5YWl5ZCN56ewXFxcIixcXG4gICAgICAgIC8vIHR5cGU6ICdpbnB1dCdcXG4gICAgICAgIGRhdGE6IHtcXG4gICAgICAgICAgICBjb25maWc6IHtcXG4gICAgICAgICAgICAgICAga2V5OiBcXFwiaW5wdXRfY29kZVxcXCIsXFxuICAgICAgICAgICAgICAgIGRlc2M6IFxcXCLor7fovpPlhaXphY3nva7ku6PnoIFcXFwiLFxcbiAgICAgICAgICAgICAgICB0eXBlOiAndGV4dGFyZWEnXFxuICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICBzZXR0aW5nOiB7XFxuICAgICAgICAgICAgICAgIGtleTogXFxcImlucHV0X3NldHRpbmdfY29kZVxcXCIsXFxuICAgICAgICAgICAgICAgIGRlc2M6IFxcXCLor7fovpPlhaXorr7nva7pobXpnaLku6PnoIFcXFwiLFxcbiAgICAgICAgICAgICAgICB0eXBlOiAndGV4dGFyZWEnXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9KVxcbn1cXG5cXG4vL+iHquWumuS5ieino+aekC3nvJbovpHpobXpnaJcXG5mdW5jdGlvbiBhbmFseXNpc01vZGVFZGl0UGFnZShkKSB7XFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogJzxmb250IGNvbG9yPVxcXCIjODA4MDgwXFxcIj4nICsgJ+OAkOino+aekOS7o+eggeWGhee9ruWPmOmHj+OAkScgKyAnPGJyPiZuYnNwOyZuYnNwOyZuYnNwO2lucHV0OiDop4bpopHpk77mjqUnICsgJzwvZm9udD4nLFxcbiAgICAgICAgY29sX3R5cGU6ICdyaWNoX3RleHQnXFxuICAgIH0pXFxuICAgIG1vZGVFZGl0UGFnZShkLCBcXFwiYW5hbHlzaXNDb25maWdzXFxcIiwge1xcbiAgICAgICAga2V5OiBcXFwiaW5wdXRfbmFtZVxcXCIsXFxuICAgICAgICBkZXNjOiBcXFwi6K+36L6T5YWl5ZCN56ewXFxcIixcXG4gICAgICAgIC8vIHR5cGU6ICdpbnB1dCdcXG4gICAgICAgIGRhdGE6IHtcXG4gICAgICAgICAgICBjb25maWc6IHtcXG4gICAgICAgICAgICAgICAga2V5OiBcXFwiaW5wdXRfY29kZVxcXCIsXFxuICAgICAgICAgICAgICAgIGRlc2M6IFxcXCLor7fovpPlhaXop6PmnpDku6PnoIFcXFwiLFxcbiAgICAgICAgICAgICAgICB0eXBlOiAndGV4dGFyZWEnXFxuICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBrZXk6ICdpbnB1dF9leHRyYScsXFxuICAgICAgICAgICAgICAgIGRlc2M6ICfor7fovpPlhaVleHRyYeWxnuaAp+WAvCcsXFxuICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0YXJlYSdcXG4gICAgICAgICAgICB9LFxcbiAgICAgICAgICAgIHNldHRpbmc6IHtcXG4gICAgICAgICAgICAgICAga2V5OiBcXFwiaW5wdXRfc2V0dGluZ19jb2RlXFxcIixcXG4gICAgICAgICAgICAgICAgZGVzYzogXFxcIuivt+i+k+WFpeiuvue9rumhtemdouS7o+eggVxcXCIsXFxuICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0YXJlYSdcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH0pXFxufVxcblxcbmxldCBkID0gW107XFxubGV0IHZpZXcgPSBnZXRQYXJhbShcXFwidmlld1xcXCIsXFxcIlxcXCIpO1xcbmlmKHZpZXc9PVxcXCJhbmFseXNpc01vZGVFZGl0UGFnZVxcXCIpe1xcbiAgICBzZXRQYWdlVGl0bGUoXFxcIuiHquWumuS5ieino+aekOe8lui+kVxcXCIpXFxuICAgIGFuYWx5c2lzTW9kZUVkaXRQYWdlKGQpO1xcbn1lbHNlIGlmKHZpZXc9PVxcXCJkZXRhaWxWaWV3TW9kZUVkaXRQYWdlXFxcIil7XFxuICAgIHNldFBhZ2VUaXRsZShcXFwi6Ieq5a6a5LmJ6K+m5oOF6aG157yW6L6RXFxcIilcXG4gICAgZGV0YWlsVmlld01vZGVFZGl0UGFnZShkKTtcXG59ZWxzZSBpZih2aWV3PT1cXFwiaG9tZVBhZ2VNb2RlRWRpdFBhZ2VcXFwiKXtcXG4gICAgc2V0UGFnZVRpdGxlKFxcXCLoh6rlrprkuYnpppbpobXnvJbovpFcXFwiKVxcbiAgICBob21lUGFnZU1vZGVFZGl0UGFnZShkKTtcXG59XFxuc2V0UmVzdWx0KGQpO1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwi6Kej6Zmk6KKr5bCBaXBcIixcInBhdGhcIjpcInJlbGVhc2VJUFwiLFwicnVsZVwiOlwianM6XFxubGV0IGlkID0gZ2V0UGFyYW0oJ2lkJyk7XFxubGV0IGQgPSBbXTtcXG5kLnB1c2goe1xcbiAgICB0aXRsZTogJ+aCqOW3suiiq+WwgeemgUlQ5Zyw5Z2A5oiW6Kem5Y+R5LqG5Lq65py66aqM6K+B77yM6K+35oyJ54Wn5Lul5LiL5q2l6aqk5aSE55CGKOWmguS4jeWkhOeQhuaCqOWwhuWcqOS4gOauteaXtumXtOWGheaXoOazleato+W4uOiOt+WPluWJp+mbhuWIl+ihqCknLFxcbiAgICB1cmw6ICdoaWtlcjovL2VtcHR5JyxcXG4gICAgY29sX3R5cGU6ICd0ZXh0XzEnXFxufSk7XFxuZC5wdXNoKHtcXG4gICAgdGl0bGU6ICcxLueCueWHu+atpOWkhOWvvOWFpeiHquWKqOiOt+WPlkNvb2tpZeaPkuS7ticsXFxuICAgIHVybDogJCgpXFxuICAgICAgICAubGF6eVJ1bGUoKCkgPT4ge1xcbiAgICAgICAgICAgIGxldCBnZXREb3ViYW5Db29raWUgPSBcXFwiKGZ1bmN0aW9uKCl7aWYod2luZG93Wydsb2NhdGlvbiddWydob3N0J109PSd3d3cuZG91YmFuLmNvbScpe2Z5X2JyaWRnZV9hcHBbJ3dyaXRlRmlsZSddKCdoaWtlcjovL2ZpbGVzL2NhY2hlL2RvdWJhbmNvb2tpZS50eHQnLGZ5X2JyaWRnZV9hcHBbJ2dldENvb2tpZSddKCdodHRwczovL3d3dy5kb3ViYW4uY29tLycpKTt9aWYod2luZG93Wydsb2NhdGlvbiddWydob3N0J109PSdtLmRvdWJhbi5jb20nKXtmeV9icmlkZ2VfYXBwWyd3cml0ZUZpbGUnXSgnaGlrZXI6Ly9maWxlcy9jYWNoZS9kb3ViYW5jb29raWUudHh0JyxmeV9icmlkZ2VfYXBwWydnZXRDb29raWUnXSgnaHR0cHM6Ly9tLmRvdWJhbi5jb20vJykpO319KCkpO1xcXCJcXG4gICAgICAgICAgICBpZiAoIWZpbGVFeGlzdCgnaGlrZXI6Ly9maWxlcy9jYWNoZS9nbG9iYWxfZ2V0RG91YmFuQ29va2llLmpzJykpIHtcXG4gICAgICAgICAgICAgICAgd3JpdGVGaWxlKCdoaWtlcjovL2ZpbGVzL2NhY2hlL2dsb2JhbF9nZXREb3ViYW5Db29raWUuanMnLCBnZXREb3ViYW5Db29raWUpO1xcbiAgICAgICAgICAgIH07XFxuICAgICAgICAgICAgcmV0dXJuICdydWxlOi8vJyArIGJhc2U2NEVuY29kZSgn5rW36ZiU6KeG55WM77yM572R6aG15o+S5Lu277+lanNfdXJs77+lZ2xvYmFsX2dldERvdWJhbkNvb2tpZUBoaWtlcjovL2ZpbGVzL2NhY2hlL2dsb2JhbF9nZXREb3ViYW5Db29raWUuanMnKTtcXG4gICAgICAgIH0pLFxcbiAgICBjb2xfdHlwZTogJ3RleHRfMSdcXG59KTtcXG5kLnB1c2goe1xcbiAgICB0aXRsZTogJzIu54K55Ye75q2k5aSE6L+b5YWl572R6aG16L+b6KGM55m75b2V5oiW5Lq65py66aqM6K+B77yM5a6M5oiQ5ZCO6L+U5Zue5q2k6aG16Z2iJyxcXG4gICAgdXJsOiAnaHR0cHM6Ly9tb3ZpZS5kb3ViYW4uY29tL3N1YmplY3QvJyArIGlkICsgJy8nLFxcbiAgICBjb2xfdHlwZTogJ3RleHRfMSdcXG59KTtcXG5kLnB1c2goe1xcbiAgICB0aXRsZTogJzMu5a6M5oiQ55m75b2V5oiW5Lq65py66aqM6K+B5ZCO6L+U5Zue5b2x54mH6K+m5oOF6aG16Z2i6YeN5paw6L+b5YWlJyxcXG4gICAgdXJsOiAnaGlrZXI6Ly9lbXB0eScsXFxuICAgIGNvbF90eXBlOiAndGV4dF8xJ1xcbn0pO1xcbnNldFJlc3VsdChkKVwifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwi5oqi5pWR6aG16Z2iXCIsXCJwYXRoXCI6XCJ1cmdlbmN5TW9kZVwiLFwicnVsZVwiOlwianM6XFxubGV0IGQgPSBbXTtcXG5cXG5kLnB1c2goe1xcbiAgdGl0bGU6ICflvojmmI7mmL4s5Ye65LqG5LiA5Lqb5bCP6Zeu6aKYLOW7uuiuruafpeeci+iuvue9ricsXFxuICBkZXNjOiBcXFwi5Ye66ZSZ5L2N572uOlxcXCIgKyAodHlwZW9mKHBvcykgPT0gJ3VuZGVmaW5lZCcgPyAn5pyq55+lJyA6IHBvcyksXFxuICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnLFxcbiAgdXJsOiAnaGlrZXI6Ly9lbXB0eScsXFxufSk7XFxuXFxuZC5wdXNoKHtcXG4gICAgdGl0bGU6ICfngrnmiJHov5vlhaXorr7nva7pobUnLFxcbiAgICBjb2xfdHlwZTogJ3RleHRfMScsXFxuICAgIHVybDogXFxcImhpa2VyOi8vcGFnZS9zZXR0aW5nUGFnZVxcXCJcXG59KVxcblxcbmQucHVzaCh7XFxuICB0aXRsZTogJ+iLpeS/ruaUueiuvue9ruS4jei1t+S9nOeUqCzngrnmiJHlpI3liLbplJnor6/kv6Hmga/mj5DkuqTnu5nlvIDlj5HogIUnLFxcbiAgZGVzYzogZS50b1N0cmluZygpLFxcbiAgY29sX3R5cGU6ICd0ZXh0XzEnLFxcbiAgdXJsOiAnY29weTovLycgKyBlLnRvU3RyaW5nKCksXFxufSk7XFxuXFxuc2V0UmVzdWx0KGQpO1xcblwifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwi6aG65L2s5LiT55So6K+m5oOF6aG1XCIsXCJwYXRoXCI6XCJTZGV0YWlsXCIsXCJydWxlXCI6XCJqczpcXG5ldmFsKE1ZX1JVTEUucHJlUnVsZSk7XFxuZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vcGFnZS9tYWluXFxcIikpLnJ1bGUpO1xcbmxldCB0eXBlID0gZ2V0UGFyYW0oJ3R5cGUnLCAnJyksXFxuICAgIGlkID0gZ2V0UGFyYW0oJ2lkJywgJycpO1xcbmRldGFpbHNWaWV3KHR5cGUsIGlkKTtcIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuS4u+S7o+eggVwiLFwicGF0aFwiOlwibWFpblwiLFwicnVsZVwiOlwibGV0IHZlcnNpb24gPSAyMDI0MDIxNzAwMDE7XFxyXFxuZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS91dGlscycpKS5ydWxlKTtcXHJcXG5cXHJcXG5sZXQgcGFyc2VWaWRlb1VybExhenkgPSAkLnRvU3RyaW5nKCgpID0+IHtcXHJcXG4gICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcclxcbiAgICBsZXQgYW5hbHlzaXNDb25maWdzID0gZ2V0Q29uZmlnKCdhbmFseXNpc0NvbmZpZ3MnKTtcXHJcXG4gICAgbGV0IGFuYWx5c2lzQ29uZmlnID0gYW5hbHlzaXNDb25maWdzW2FuYWx5c2lzQ29uZmlncy51c2VdLmNvbmZpZztcXHJcXG4gICAgbGV0IHJlc3VsdCA9IFxcXCJ0b2FzdDovL+ino+aekOWksei0pVxcXCI7XFxyXFxuICAgIHRyeSB7XFxyXFxuICAgICAgICBpZiAoYW5hbHlzaXNDb25maWcuc3RhcnRzV2l0aChcXFwiKFxcXCIpKSB7XFxyXFxuICAgICAgICAgICAgZXZhbCgncmVzdWx0ID0gJyArIGFuYWx5c2lzQ29uZmlnKTtcXHJcXG4gICAgICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICAgICAgZXZhbCgncmVzdWx0ID0gJyArICcoKCkgPT4geycgKyBhbmFseXNpc0NvbmZpZyArICd9KSgpJyk7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH0gY2F0Y2ggKGUpIHt9XFxyXFxuICAgIHJldHVybiByZXN1bHQ7XFxyXFxufSlcXHJcXG5cXHJcXG4vL+mmlumhtVxcclxcbmZ1bmN0aW9uIGhvbWUoKSB7XFxyXFxuICAgIGlmIChnZXRJdGVtKFxcXCJzdGFydFxcXCIsIFxcXCJcXFwiKSA9PSBcXFwiXFxcIikge1xcclxcbiAgICAgICAgc2V0SXRlbShcXFwic3RhcnRcXFwiLCBcXFwiMVxcXCIpO1xcclxcbiAgICAgICAgc2V0SXRlbSgndXBkYXRlJywgU3RyaW5nKHZlcnNpb24pKTtcXHJcXG4gICAgICAgIGNvbmZpcm0oe1xcclxcbiAgICAgICAgICAgIHRpdGxlOiAn5rip6aao5o+Q56S6JyxcXHJcXG4gICAgICAgICAgICBjb250ZW50OiAn5q2k6KeE5YiZ5LuF6ZmQ5a2m5Lmg5Lqk5rWB5L2/55SoXFxcXG7or7fkuo7lr7zlhaXlkI4yNOWwj+aXtuWGheWIoOmZpCFcXFxcblxcXFxu5Lu75L2V57uE57uH5oiW5Liq5Lq65LiN5b6X5Lul5Lu75L2V5pa55byP5pa55rOVXFxcXG7kvKDmkq3mraTop4TliJnnmoTmlbTkvZPmiJbpg6jliIYhIVxcXFxuXFxcXG7mhJ/osKLlpKfkvazku6zmj5DkvpvnmoTmioDmnK/mlK/mjIEhISEnLFxcclxcbiAgICAgICAgICAgIGNvbmZpcm06ICcnLFxcclxcbiAgICAgICAgICAgIGNhbmNlbDogJydcXHJcXG4gICAgICAgIH0pXFxyXFxuICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICBsZXQgdXBkYXRlSW5mbyA9IGdldEl0ZW0oJ3VwZGF0ZScsICcnKTtcXHJcXG4gICAgICAgIGlmICh1cGRhdGVJbmZvID09ICcnIHx8IHBhcnNlSW50KHVwZGF0ZUluZm8pIDwgdmVyc2lvbikge1xcclxcbiAgICAgICAgICAgIHNldEl0ZW0oJ3VwZGF0ZScsIFN0cmluZyh2ZXJzaW9uKSk7XFxyXFxuICAgICAgICAgICAgY29uZmlybSh7XFxyXFxuICAgICAgICAgICAgICAgIHRpdGxlOiAn5pys5qyh5pu05paw5YaF5a65JyxcXHJcXG4gICAgICAgICAgICAgICAgY29udGVudDogJ+mZjeS9jumFjee9ruaWh+S7tuWHuumUmeamgueOhycsXFxyXFxuICAgICAgICAgICAgICAgIGNvbmZpcm06ICcnLFxcclxcbiAgICAgICAgICAgICAgICBjYW5jZWw6ICcnXFxyXFxuICAgICAgICAgICAgfSlcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgICBhZGRMaXN0ZW5lcihcXFwib25DbG9zZVxcXCIsICQudG9TdHJpbmcoKCkgPT4ge1xcclxcbiAgICAgICAgY2xlYXJNeVZhcihcXFwicWRiX2NvbmZpZ1xcXCIpO1xcclxcbiAgICB9KSlcXHJcXG4gICAgbGV0IGhvbWVQYWdlQ29uZmlncyA9IGdldENvbmZpZygnaG9tZVBhZ2VDb25maWdzJyk7XFxyXFxuICAgIGxldCBob21lUGFnZUNvbmZpZyA9IGhvbWVQYWdlQ29uZmlnc1tob21lUGFnZUNvbmZpZ3MudXNlXS5jb25maWc7XFxyXFxuICAgIGlmIChob21lUGFnZUNvbmZpZy5zdGFydHNXaXRoKFxcXCIoXFxcIikpIHtcXHJcXG4gICAgICAgIGV2YWwoJ2QgPSAnICsgaG9tZVBhZ2VDb25maWcpXFxyXFxuICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICBldmFsKCdkID0gJyArICcoKCkgPT4geycgKyBob21lUGFnZUNvbmZpZyArICd9KSgpJylcXHJcXG4gICAgfVxcclxcbiAgICBzZXRSZXN1bHQoZCk7XFxyXFxufVxcclxcblxcclxcbi8v5rW36ZiU5pCc57SiXFxyXFxuZnVuY3Rpb24gc2VhcmNoKCkge1xcclxcbiAgICBsZXQgd2QgPSBNWV9VUkwuc3BsaXQoXFxcIi8jL1xcXCIpWzFdO1xcclxcbiAgICBsZXQgcGFnZSA9IE1ZX1BBR0U7XFxyXFxuICAgIGxldCBzID0gZ2V0RG91YmFuUmVzKCdodHRwczovL2Zyb2RvLmRvdWJhbi5jb20vYXBpL3YyL3NlYXJjaC9zdWJqZWN0cz90eXBlPW1vdmllJnE9JyArIHdkICsgKHBhZ2UgPyAnJnN0YXJ0PScgKyAocGFnZSAtIDEpICogMjAgOiAnJnN0YXJ0PTAnKSArICcmY291bnQ9MjAnKTtcXHJcXG5cXHJcXG4gICAgbGV0IGxpc3QgPSBzLml0ZW1zO1xcclxcbiAgICBsZXQgZGV0YWlsc1ZpZXdDb25maWdzID0gZ2V0Q29uZmlnKCdkZXRhaWxzVmlld0NvbmZpZ3MnKTtcXHJcXG5cXHJcXG4gICAgbGV0IGl0ZW1zID0gW107XFxyXFxuICAgIGxpc3QuZm9yRWFjaChkYXRhID0+IHtcXHJcXG4gICAgICAgIGlmIChkYXRhLnRhcmdldF90eXBlID09ICdkb3VsaXN0X2NhcmRzJykge1xcclxcbiAgICAgICAgICAgIGRhdGEudGFyZ2V0LmRvdWxpc3RzLmZvckVhY2goZSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xcclxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUudGl0bGUsXFxyXFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkvJHBhZ2V7ZnlwYWdlfSNub0hpc3RvcnkjJylcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAucnVsZSgodHlwZSwgaWQpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gXFxcInBsYXlsaXN0XFxcIikge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG91TGlzdChpZCwgTVlfUEFHRSwgNTApO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gXFxcImNvbGxlY3Rpb25cXFwiIHx8IHR5cGUgPT0gXFxcImNoYXJ0XFxcIikge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdENvbGxlY3Rpb25MaXN0KE1ZX1BBR0UsIDUwLCBpZCk7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBlLnRhcmdldF90eXBlLCBlLmlkKSxcXHJcXG4gICAgICAgICAgICAgICAgICAgIGltZzogZS5jb3Zlcl91cmwgKyBcXFwiQFJlZmVyZXI9XFxcIiArIGUuY292ZXJfdXJsXFxyXFxuICAgICAgICAgICAgICAgIH0pXFxyXFxuICAgICAgICAgICAgfSlcXHJcXG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YS50YXJnZXRfdHlwZSA9PSAnY2hhcnQnKSB7XFxyXFxuICAgICAgICAgICAgbGV0IGUgPSBkYXRhLnRhcmdldDtcXHJcXG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcXHJcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGUudGl0bGUsXFxyXFxuICAgICAgICAgICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eS8kcGFnZXtmeXBhZ2V9I25vSGlzdG9yeSMnKVxcclxcbiAgICAgICAgICAgICAgICAgICAgLnJ1bGUoKHR5cGUsIGlkKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcXFwicGxheWxpc3RcXFwiKSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvdUxpc3QoaWQsIE1ZX1BBR0UsIDUwKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gXFxcImNvbGxlY3Rpb25cXFwiIHx8IHR5cGUgPT0gXFxcImNoYXJ0XFxcIikge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0Q29sbGVjdGlvbkxpc3QoTVlfUEFHRSwgNTAsIGlkKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgICAgICB9LCBkYXRhLnRhcmdldF90eXBlLCBlLmlkKSxcXHJcXG4gICAgICAgICAgICAgICAgaW1nOiBlLmNvdmVyX3VybCArIFxcXCJAUmVmZXJlcj1cXFwiICsgZS5jb3Zlcl91cmxcXHJcXG4gICAgICAgICAgICB9KVxcclxcbiAgICAgICAgfSBlbHNlIHtcXHJcXG4gICAgICAgICAgICBsZXQgdHlwZSA9IGRhdGEudGFyZ2V0X3R5cGUsXFxyXFxuICAgICAgICAgICAgICAgIGlkID0gZGF0YS50YXJnZXQuaWQsXFxyXFxuICAgICAgICAgICAgICAgIHRpdGxlID0gZGF0YS50YXJnZXQudGl0bGU7XFxyXFxuICAgICAgICAgICAgbGV0IHVzZUNvbmZpZyA9IGRldGFpbHNWaWV3Q29uZmlnc1tkZXRhaWxzVmlld0NvbmZpZ3MudXNlXS5jb25maWc7XFxyXFxuICAgICAgICAgICAgbGV0IHVybFBhcmFtcyA9IHt9O1xcclxcbiAgICAgICAgICAgIGlmICh1c2VDb25maWcuc3RhcnRzV2l0aCgneycpKSB7XFxyXFxuICAgICAgICAgICAgICAgIGV2YWwoJ3VybFBhcmFtcyA9ICcgKyB1c2VDb25maWcpO1xcclxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICAgICAgICAgIHVybFBhcmFtcy51cmwgPSAkKFxcXCJoaWtlcjovL2VtcHR5I25vSGlzdG9yeSMjaW1tZXJzaXZlVGhlbWUjXFxcIiArICc/dHlwZT0nICsgdHlwZSArICcmaWQ9JyArIGlkKVxcclxcbiAgICAgICAgICAgICAgICAgICAgLnJ1bGUoKHR5cGUsIGlkLCB0aXRsZSwgdXNlQ29uZmlnKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcXFwicGxheWxpc3RcXFwiKSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvdUxpc3QoaWQsIE1ZX1BBR0UsIDUwKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmFsKHVzZUNvbmZpZyk7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICAgICAgfSwgdHlwZSwgaWQsIHRpdGxlLCB1c2VDb25maWcpO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcXHJcXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxcclxcbiAgICAgICAgICAgICAgICBpbWc6IGRhdGEudGFyZ2V0LmNvdmVyX3VybCArIFxcXCJAUmVmZXJlcj1cXFwiICsgZGF0YS50YXJnZXQuY292ZXJfdXJsLFxcclxcbiAgICAgICAgICAgICAgICBkZXNjOiBkYXRhLnR5cGVfbmFtZSxcXHJcXG4gICAgICAgICAgICAgICAgY29udGVudDogZGF0YS50YXJnZXQuY2FyZF9zdWJ0aXRsZSxcXHJcXG4gICAgICAgICAgICAgICAgdXJsOiB1cmxQYXJhbXMudXJsLFxcclxcbiAgICAgICAgICAgICAgICBleHRyYTogdXJsUGFyYW1zLmV4dHJhXFxyXFxuICAgICAgICAgICAgfSk7XFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgIH0pO1xcclxcblxcclxcbiAgICBzZXRTZWFyY2hSZXN1bHQoe1xcclxcbiAgICAgICAgZGF0YTogaXRlbXNcXHJcXG4gICAgfSk7XFxyXFxufVxcclxcblxcclxcbi8v5LqM57qn6aG16Z2iXFxyXFxuZnVuY3Rpb24gZXJqaSgpIHtcXHJcXG4gICAgYWRkTGlzdGVuZXIoXFxcIm9uQ2xvc2VcXFwiLCAkLnRvU3RyaW5nKCgpID0+IHtcXHJcXG4gICAgICAgIGNsZWFyTXlWYXIoXFxcImZpbmRMaXN0XFxcIik7XFxyXFxuICAgICAgICBjbGVhck15VmFyKFxcXCJob3RMaXN0XFxcIik7XFxyXFxuICAgICAgICBjbGVhck15VmFyKFxcXCJjbGFzc2xpc3RcXFwiKTtcXHJcXG4gICAgICAgIGNsZWFyTXlWYXIoXFxcInBsYXlsaXN0XFxcIik7XFxyXFxuICAgICAgICBjbGVhck15VmFyKFxcXCJyYW5rTGlzdFxcXCIpO1xcclxcbiAgICAgICAgY2xlYXJNeVZhcihcXFwicmFua2luZ1xcXCIpO1xcclxcbiAgICAgICAgY2xlYXJNeVZhcihcXFwiY29taW5nXFxcIik7XFxyXFxuICAgICAgICBjbGVhck15VmFyKFxcXCJhbmFseXNpc1xcXCIpO1xcclxcbiAgICB9KSlcXHJcXG5cXHJcXG4gICAgbGV0IGNob2ljZSA9IE1ZX1VSTC5zcGxpdCgnLyMvJylbMV0uc3BsaXQoJyMnKVswXTtcXHJcXG4gICAgbGV0IGQgPSBbXTtcXHJcXG4gICAgc3dpdGNoIChjaG9pY2UpIHtcXHJcXG4gICAgICAgIGNhc2UgXFxcIuaOqOiNkFxcXCI6XFxyXFxuICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcclxcbiAgICAgICAgICAgIGQgPSBmaW5kTGlzdChNWV9QQUdFLCAxMCk7XFxyXFxuICAgICAgICAgICAgYnJlYWs7XFxyXFxuICAgICAgICBjYXNlIFxcXCLng63pl6hcXFwiOlxcclxcbiAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtcXHJcXG4gICAgICAgICAgICBkID0gaG90TGlzdChNWV9QQUdFLCAxMCk7XFxyXFxuICAgICAgICAgICAgYnJlYWs7XFxyXFxuICAgICAgICBjYXNlIFxcXCLliIbnsbtcXFwiOlxcclxcbiAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtcXHJcXG4gICAgICAgICAgICBkID0gY2xhc3NMaXN0KE1ZX1BBR0UsIDE1KTtcXHJcXG4gICAgICAgICAgICBicmVhaztcXHJcXG4gICAgICAgIGNhc2UgXFxcIueJh+WNlVxcXCI6XFxyXFxuICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcclxcbiAgICAgICAgICAgIGQgPSBwbGF5TGlzdChNWV9QQUdFLCAxMCk7XFxyXFxuICAgICAgICAgICAgYnJlYWs7XFxyXFxuICAgICAgICBjYXNlIFxcXCLmppzljZVcXFwiOlxcclxcbiAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtcXHJcXG4gICAgICAgICAgICBkID0gcmFua0xpc3QoTVlfUEFHRSwgMTApO1xcclxcbiAgICAgICAgICAgIGJyZWFrO1xcclxcbiAgICAgICAgY2FzZSBcXFwi5bCG5LiK5pigXFxcIjpcXHJcXG4gICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxyXFxuICAgICAgICAgICAgZCA9IGNvbWluZ0xpc3QoTVlfUEFHRSwgMTApO1xcclxcbiAgICAgICAgICAgIGJyZWFrO1xcclxcbiAgICB9XFxyXFxuICAgIHNldFJlc3VsdChkKTtcXHJcXG59XFxyXFxuXFxyXFxuLy/ojrflj5bosYbnk6PotYTmupAs6L+U5ZueanNvbuaVsOaNrlxcclxcbmZ1bmN0aW9uIGdldERvdWJhblJlcyh1cmwpIHtcXG4gICAgLy9sb2codXJsKVxcclxcbiAgICB2YXIgY2MgPW51bGw7XFxyXFxuICAgIGlmKCQudHlwZSh1cmwpPT0nb2JqZWN0Jyl7XFxyXFxuICAgICAgICAgY2M9dXJsLmNjO1xcclxcbiAgICAgICAgIHVybCA9IHVybC51cmw7XFxyXFxuICAgIH1cXHJcXG4gICAgdmFyIF91cmwgPSB1cmw7XFxyXFxuICAgIGlmICh1cmwuaW5kZXhPZignYXBpa2V5JykgPT09IC0xKSB7XFxyXFxuICAgICAgICBfdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBcXFwiYXBpa2V5PTBkYWQ1NTFlYzBmODRlZDAyOTA3ZmY1YzQyZThlYzcwXFxcIlxcclxcbiAgICB9XFxyXFxuICAgIGxldCBfdHMgPSBwYXJzZUludChEYXRlLm5vdygpLzEwMDApLnRvU3RyaW5nKCk7XFxyXFxuICAgIGxldCBtID0gJ0dFVCYnICsgZW5jb2RlVVJJQ29tcG9uZW50KHVybC5zcGxpdCgnZG91YmFuLmNvbScpWzFdLnNwbGl0KCc/JylbMF0pICsgJyYnICsgX3RzO1xcclxcbiAgICBldmFsKGdldENyeXB0b0pTKCkpO1xcclxcbiAgICBsZXQgX3NpZyA9IGhleFRvQmFzZTY0KENyeXB0b0pTLkhtYWNTSEExKG0sJ2JmN2RkZGM3YzljZmU2ZjcnKS50b1N0cmluZygpKTtcXHJcXG4gICAgX3VybCArPSAnJl9zaWc9JyArIF9zaWcgKycmX3RzPScgKyBfdHM7XFxyXFxuICAgIC8vbGV0IGNvb2tpZUNhY2hlID0gJ2hpa2VyOi8vZmlsZXMvY2FjaGUvZG91YmFuY29va2llLnR4dCc7XFxyXFxuICAgIGxldCBzID0gZmV0Y2goX3VybCwge1xcclxcbiAgICAgICAgaGVhZGVyczoge1xcclxcbiAgICAgICAgICAgIC8vJ0Nvb2tpZSc6IGZldGNoKGNvb2tpZUNhY2hlKSxcXHJcXG4gICAgICAgICAgICBcXFwiVXNlci1BZ2VudFxcXCI6IFxcXCJSZXh4YXItQ29yZS8wLjEuMyBhcGktY2xpZW50LzEgY29tLmRvdWJhbi5mcm9kby83LjkuMC5iZXRhMigyMTUpIEFuZHJvaWQvMjUgcHJvZHVjdC9UQVMtQUwwMCB2ZW5kb3IvSFVBV0VJIG1vZGVsL1RBUy1BTDAwICByb20vYW5kcm9pZCAgbmV0d29yay93aWZpICBwbGF0Zm9ybS9tb2JpbGUgY29tLmRvdWJhbi5mcm9kby83LjkuMC5iZXRhMigyMTUpIFJleHhhci8xLjIuMTUxICBwbGF0Zm9ybS9tb2JpbGUgMS4yLjE1MVxcXCJcXHJcXG4gICAgICAgIH0sXFxyXFxuICAgICAgICBtZXRob2Q6ICdHRVQnXFxyXFxuICAgICAgICAvL2JvZHk6ICdob3N0PWZyb2RvLmRvdWJhbi5jb20nXFxyXFxuICAgIH0pO1xcclxcbiAgICBsZXQganNvbiA9IEpTT04ucGFyc2Uocyk7XFxyXFxuICAgIGlmKGpzb24ubG9jYWxpemVkX21lc3NhZ2Upe1xcclxcbiAgICAgICAgY2M9IGNjPT1udWxsID8gMSA6IGNjKzE7XFxyXFxuICAgICAgICBsb2coJ+mHjeivleasoeaVsDonK2NjKTtcXHJcXG4gICAgICAgIGlmKGNjPjUpe3Rocm93IG5ldyBFcnJvcign6LaF5pe2Jyl9XFxyXFxuICAgICAgICBqYXZhLmxhbmcuVGhyZWFkLnNsZWVwKDEwMDApO1xcclxcbiAgICAgICAgcmV0dXJuIGdldERvdWJhblJlcyh7dXJsOnVybCxjYzpjY30pO1xcclxcbiAgICB9ZWxzZXtcXHJcXG4gICAgICAgIHJldHVybiBqc29uO1xcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbi8v5qC55o2u6K+E5YiG5L+h5oGv6I635Y+W6K+E5YiG5pif5pif5qC35byPXFxyXFxuZnVuY3Rpb24gY29tcHV0ZVJhdGluZyhlLCB0KSB7XFxyXFxuICAgIGxldCBpID0gXFxcIlxcXCI7XFxyXFxuICAgIGZvciAobGV0IHIgPSAwOyByIDwgNTsgcisrKSByIDwgTWF0aC5yb3VuZCh0IC8gKGUgLyA1KSkgPyBpICs9IFxcXCLimIVcXFwiIDogaSArPSBcXFwi4piGXFxcIjtcXHJcXG4gICAgcmV0dXJuIGk7XFxyXFxufVxcclxcblxcclxcbi8v6K+E5YiG6K+m5oOF6aG16Z2iXFxyXFxuZnVuY3Rpb24gcmF0aW5nKHR5cGUsIGlkLCByYXRpbmdDb3VudCkge1xcclxcbiAgICBzZXRQYWdlVGl0bGUoJ+W9seeJh+S/oeaBrycpO1xcclxcbiAgICAvL+ivhOWIhue7n+iuoVxcclxcbiAgICBsZXQgaSA9IGdldERvdWJhblJlcyhcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9cXFwiICsgdHlwZSArIFxcXCIvXFxcIiArIGlkICsgXFxcIi9yYXRpbmdcXFwiKTtcXHJcXG5cXHJcXG4gICAgbGV0IHIgPSBcXFwiPGgyPuivhOWIhue7n+iuoTwvaDI+XFxcIjtcXHJcXG5cXHJcXG4gICAgciArPSAnPHNtYWxsPjxmb250IGNvbG9yPVxcXCJncmV5XFxcIj4nICsgcmF0aW5nQ291bnQgKyAn5Lq66K+E5YiGJyArICc8L2ZvbnQ+PC9zbWFsbD48YnIvPic7XFxyXFxuXFxyXFxuICAgIGxldCBzdGFyQ29sb3IgPSBnZXRDb25maWcoJ3N0YXJDb2xvcicpO1xcclxcbiAgICBpZiAoaS5zdGF0cy5sZW5ndGggPT0gMCkge1xcclxcbiAgICAgICAgaS5zdGF0cyA9IFswLCAwLCAwLCAwLCAwXTtcXHJcXG4gICAgfVxcclxcbiAgICBpLnN0YXRzLnJldmVyc2UoKS5mb3JFYWNoKCgodmFsdWUsIGluZGV4KSA9PiB7XFxyXFxuICAgICAgICByICs9ICc8Zm9udCBjb2xvcj0nICsgc3RhckNvbG9yICsgJz4nICsgW1xcXCLimIXimIXimIXimIXimIVcXFwiLCBcXFwi4piF4piF4piF4piF4piGXFxcIiwgXFxcIuKYheKYheKYheKYhuKYhlxcXCIsIFxcXCLimIXimIXimIbimIbimIZcXFwiLCBcXFwi4piF4piG4piG4piG4piGXFxcIl1baW5kZXhdICsgXFxcIjwvZm9udD4mbmJzcDtcXFwiO1xcclxcblxcclxcbiAgICAgICAgciArPSBmdW5jdGlvbihlKSB7XFxyXFxuICAgICAgICAgICAgbGV0IHQxID0gJyc7XFxyXFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlOyBpKyspIHQxICs9IFxcXCLilodcXFwiO1xcclxcbiAgICAgICAgICAgIGxldCB0MiA9ICcnO1xcclxcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAgLSBlOyBpKyspIHQyICs9IFxcXCLilodcXFwiO1xcclxcbiAgICAgICAgICAgIHJldHVybiB0MS5mb250Y29sb3IoJyNmZmFjMmQnKSArIHQyLmZvbnRjb2xvcignI2U1ZTFlNCcpO1xcclxcbiAgICAgICAgfSgoMTAgKiB2YWx1ZSkudG9GaXhlZCgwKSk7XFxyXFxuXFxyXFxuICAgICAgICByICs9ICcmbmJzcDs8c21hbGw+PGZvbnQgY29sb3I9XFxcImdyZXlcXFwiPicgKyAoMTAwICogdmFsdWUpXFxyXFxuICAgICAgICAgICAgLnRvRml4ZWQoMSkgKyBcXFwiJTwvZm9udD48L3NtYWxsPjxici8+XFxcIjtcXHJcXG4gICAgfSkpO1xcclxcblxcclxcbiAgICByICs9IFtpLmRvbmVfY291bnQgPyBpLmRvbmVfY291bnQgKyBcXFwi5Lq655yL6L+HXFxcIiA6IFxcXCJcXFwiLCBpLmRvaW5nX2NvdW50ID8gaS5kb2luZ19jb3VudCArIFxcXCLkurrlnKjnnItcXFwiIDogXFxcIlxcXCIsIGkud2lzaF9jb3VudCA/IGkud2lzaF9jb3VudCArIFxcXCLkurrmg7PnnItcXFwiIDogXFxcIlxcXCJdLmpvaW4oXFxcIiZuYnNwOyZuYnNwO1xcXCIpXFxyXFxuICAgICAgICAuc21hbGwoKVxcclxcbiAgICAgICAgLmZvbnRjb2xvcignZ3JleScpO1xcclxcbiAgICAvL+W9seeJh+S/oeaBr1xcclxcbiAgICBpID0gZ2V0RG91YmFuUmVzKFxcXCJodHRwczovL2Zyb2RvLmRvdWJhbi5jb20vYXBpL3YyL1xcXCIgKyB0eXBlICsgXFxcIi9cXFwiICsgaWQgKyBcXFwiL2Rlc2NcXFwiKTtcXHJcXG4gICAgbGV0IGwgPSBpLmh0bWwucmVwbGFjZSgvW1xcXFxuXFxcXHRcXFxccl0vZywgXFxcIlxcXCIpXFxyXFxuICAgICAgICAucmVwbGFjZSgvPHRkXFxcXHMqW14+XSo+KC4qPyk8XFxcXC90ZD4vZywgXFxcIjxzcGFuPiQxPC9zcGFuPlxcXCIpXFxyXFxuICAgICAgICAucmVwbGFjZSgvPHRyXFxcXHMqW14+XSo+KC4qPyk8XFxcXC90cj4vZywgXFxcIjx0ZW5nPiQxPC90ZW5nPjxici8+XFxcIik7XFxyXFxuICAgIHBhcnNlRG9tRm9yQXJyYXkobCwgXFxcInNlY3Rpb24mJnRlbmdcXFwiKS5mb3JFYWNoKChlID0+IHtcXHJcXG4gICAgICAgIGxldCB0ID0gcGFyc2VEb21Gb3JBcnJheShlLCBcXFwic3BhblxcXCIpO1xcclxcbiAgICAgICAgbCA9IGwucmVwbGFjZSh0WzBdLCAnPGZvbnQgY29sb3I9XFxcImdyZXlcXFwiPicgKyB0WzBdLnJlcGxhY2UoLzxzcGFuXFxcXHMqW14+XSo+KC4qPyk8XFxcXC9zcGFuPi9nLCBcXFwiJDFcXFwiKSArIFxcXCLvvJo8L2ZvbnQ+XFxcIilcXHJcXG4gICAgfSkpO1xcclxcbiAgICByICs9IGw7XFxyXFxuICAgIC8v6I635aWW6K6w5b2VXFxyXFxuICAgIGxldCBwYWdlID0gTVlfUEFHRTtcXHJcXG4gICAgbGV0IHMgPSBnZXREb3ViYW5SZXMoXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvXFxcIiArIHR5cGUgKyBcXFwiL1xcXCIgKyBpZCArIFxcXCIvYXdhcmRzP3N0YXJ0PVxcXCIgKyAyMCAqIChwYWdlIC0gMSkgKyBcXFwiJmNvdW50PTIwXFxcIik7XFxyXFxuICAgIHIgKz0gXFxcIjxoMj7ojrflpZborrDlvZVcXFwiICsgJzxzbWFsbD48Zm9udCBjb2xvcj1cXFwiZ3JleVxcXCI+JyArIChzLnRvdGFsICE9IDAgPyAnKOWFsScgKyBzLnRvdGFsICsgJ+mhuSknIDogJyjmmoLml6ApJykgKyAnPC9mb250Pjwvc21hbGw+JyArIFxcXCI8L2gyPlxcXCI7XFxyXFxuICAgIC8vciArPSAnPGZvbnQgY29sb3I9XFxcImdyZXlcXFwiPicgKyAocy50b3RhbCAhPSAwID8gJ+WFsScgKyBzLnRvdGFsICsgJ+mhuScgOiAn5pqC5pegJykgKyAnPC9mb250Pjxici8+JztcXHJcXG4gICAgbGV0IHIyID0gJyc7XFxyXFxuICAgIHMuYXdhcmRzLmZvckVhY2goZSA9PiB7XFxyXFxuICAgICAgICByMiArPSAoZS5jZXJlbW9ueS50aXRsZSArICcoJyArIGUuY2VyZW1vbnkueWVhciArICcpJykuYmlnKCkuYm9sZCgpICsgJzxzbWFsbD4oPGEgaHJlZj1cXFwiaGlrZXI6Ly9lbXB0eSNub0hpc3RvcnkjQHJ1bGU9anM6ZXZhbChKU09OLnBhcnNlKGZldGNoKGBoaWtlcjovL3BhZ2UvbWFpbmApKS5ydWxlKTthd2FyZFZpZXcoYCcgKyBlLmNlcmVtb255LmlkICsgJ2AsYCcgKyBlLmNlcmVtb255LnRpdGxlICsgJ2ApO1xcXCI+5p+l55yL6K+m5oOFPC9hPik8L3NtYWxsPicgKyAnPGJyLz4nO1xcclxcbiAgICAgICAgZS5jYXRlZ29yaWVzLmZvckVhY2goaXRlbSA9PiB7XFxyXFxuICAgICAgICAgICAgcjIgKz0gKGl0ZW0uY2F0ZWdvcnkudGl0bGUgKyAoaXRlbS5pc193b24gPyAnJyA6ICco5o+Q5ZCNKScpICsgJyZuYnNwOycpLmZvbnRjb2xvcihcXFwiZ3JleVxcXCIpO1xcclxcbiAgICAgICAgICAgIHIyICs9IGl0ZW0uY2VsZWJyaXRpZXMubWFwKGNlbGVicml0eSA9PiBjZWxlYnJpdHkubmFtZSkuam9pbignJm5ic3A7LyZuYnNwOycpO1xcclxcbiAgICAgICAgICAgIHIyICs9ICc8YnIvPic7XFxyXFxuICAgICAgICB9KVxcclxcbiAgICAgICAgcjIgKz0gJzxici8+JztcXHJcXG4gICAgfSlcXHJcXG5cXHJcXG4gICAgaWYgKHBhZ2UgPT0gMSkge1xcclxcbiAgICAgICAgc2V0SG9tZVJlc3VsdCh7XFxyXFxuICAgICAgICAgICAgZGF0YTogW3tcXHJcXG4gICAgICAgICAgICAgICAgdGl0bGU6IHIgKyByMixcXHJcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiXFxyXFxuICAgICAgICAgICAgfV1cXHJcXG4gICAgICAgIH0pXFxyXFxuICAgIH0gZWxzZSBpZihzLmF3YXJkcy5sZW5ndGggPT0gMCl7XFxyXFxuICAgICAgICBzZXRSZXN1bHQoW10pO1xcclxcbiAgICB9IGVsc2V7XFxyXFxuICAgICAgICBzZXRIb21lUmVzdWx0KHtcXHJcXG4gICAgICAgICAgICBkYXRhOiBbe1xcclxcbiAgICAgICAgICAgICAgICB0aXRsZTogcjIsXFxyXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIlxcclxcbiAgICAgICAgICAgIH1dXFxyXFxuICAgICAgICB9KVxcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbi8v5aWW6aG56K+m5oOF6aG16Z2iXFxyXFxuZnVuY3Rpb24gYXdhcmRWaWV3KGlkLCBuYW1lKSB7XFxyXFxuICAgIHNldFBhZ2VUaXRsZShuYW1lKTtcXHJcXG4gICAgbGV0IHMgPSBnZXREb3ViYW5SZXMoXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvY2VyZW1vbnkvXFxcIiArIGlkKTtcXHJcXG4gICAgbGV0IGEgPSBbXTtcXHJcXG4gICAgYS5wdXNoKHtcXHJcXG4gICAgICAgIHRpdGxlOiAn4oCc4oCc4oCd4oCdJyArIChzLnRpdGxlICsgJygnICsgcy55ZWFyICsgJyknKS5iaWcoKS5ib2xkKCksXFxyXFxuICAgICAgICBjb2xfdHlwZTogJ3RleHRfMScsXFxyXFxuICAgICAgICBleHRyYToge1xcclxcbiAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9KVxcclxcbiAgICBzLnBsYXlsaXN0cy5mb3JFYWNoKGUgPT4ge1xcclxcbiAgICAgICAgYS5wdXNoKHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogZS50aXRsZSxcXHJcXG4gICAgICAgICAgICBkZXNjOiAn5YWxJyArIGUuaXRlbXNfY291bnQgKyAn6YOoJyxcXHJcXG4gICAgICAgICAgICBpbWc6IGUuY292ZXJfdXJsICsgJ0BSZWZlcmVyPScgKyBlLmNvdmVyX3VybCxcXHJcXG4gICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkjbm9IaXN0b3J5IycpLnJ1bGUoKGlkKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtcXHJcXG4gICAgICAgICAgICAgICAgZG91TGlzdChpZCk7XFxyXFxuICAgICAgICAgICAgfSwgZS5pZClcXHJcXG4gICAgICAgIH0pXFxyXFxuICAgIH0pXFxyXFxuXFxyXFxuICAgIGxldCByID0gJyc7XFxyXFxuICAgIHMucHJpemVzLmZvckVhY2goZSA9PiB7XFxyXFxuICAgICAgICByICs9ICc8aDQ+6I635aWW5ZCN5Y2VKCcgKyBlLnRpdGxlICsgJyk8L2g0Pic7XFxyXFxuICAgICAgICBlLmNhdGVnb3JpZXMuZm9yRWFjaCh0ID0+IHtcXHJcXG4gICAgICAgICAgICByICs9ICh0LnRpdGxlICsgJyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOycpLmZvbnRjb2xvcihcXFwiZ3JleVxcXCIpLmJvbGQoKTtcXHJcXG4gICAgICAgICAgICByICs9IHQucmVzdWx0cy5tYXAoaXRlbSA9PiAhIWl0ZW0uaW5mbyA/IGl0ZW0uaW5mbyArICgnJm5ic3A7LSZuYnNwOycgKyBpdGVtLnRpdGxlICsgJyZuYnNwOyZuYnNwOycpLmZvbnRjb2xvcihcXFwiZ3JleVxcXCIpIDogaXRlbS50aXRsZSkuam9pbignJm5ic3A7LyZuYnNwOycpLmJvbGQoKTtcXHJcXG4gICAgICAgICAgICByICs9ICc8YnIvPic7XFxyXFxuICAgICAgICB9KVxcclxcbiAgICB9KVxcclxcbiAgICBhLnB1c2goe1xcclxcbiAgICAgICAgdGl0bGU6IHIsXFxyXFxuICAgICAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCdcXHJcXG4gICAgfSlcXHJcXG5cXHJcXG4gICAgbGV0IGkgPSBbXTtcXHJcXG4gICAgcy5jZXJlbW9uaWVzLmZvckVhY2goZSA9PiB7XFxyXFxuICAgICAgICBpLnB1c2goe1xcclxcbiAgICAgICAgICAgIHRpdGxlOiBlLnRpdGxlLFxcclxcbiAgICAgICAgICAgIGRlc2M6IGUueWVhciArICflubQnLFxcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMycsXFxyXFxuICAgICAgICAgICAgaW1nOiBlLnBpYy5ub3JtYWwgKyAnQFJlZmVyZXI9JyArIGUucGljLm5vcm1hbCxcXHJcXG4gICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkjbm9IaXN0b3J5IycpLnJ1bGUoKGlkLCBuYW1lKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtcXHJcXG4gICAgICAgICAgICAgICAgYXdhcmRWaWV3KGlkLCBuYW1lKTtcXHJcXG4gICAgICAgICAgICB9LCBlLmlkLCBlLnRpdGxlKVxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgfSlcXHJcXG4gICAgaWYgKGkubGVuZ3RoID4gMCkge1xcclxcbiAgICAgICAgaS51bnNoaWZ0KHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogJ+KAnOKAnOKAneKAnScgKyAn5Y6G5bGK5Zue6aG+Jy5iaWcoKS5ib2xkKCksXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0XzEnLFxcclxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxyXFxuICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH0pXFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgc2V0UmVzdWx0KGEuY29uY2F0KGkpKTtcXHJcXG59XFxyXFxuXFxyXFxuLy/liafnhafpobXpnaJcXHJcXG5mdW5jdGlvbiBzdGlsbHNMaXN0KHR5cGUsIGlkKSB7XFxyXFxuICAgIGFkZExpc3RlbmVyKCdvbkNsb3NlJywgJ2NsZWFyTXlWYXIoXFxcInBob3RvXFxcIiknKTtcXHJcXG4gICAgbGV0IHBhZ2UgPSBNWV9QQUdFO1xcclxcbiAgICBsZXQgaXRlbXMgPSB7XFxyXFxuICAgICAgICDliafnhac6ICdwaG90b3MnLFxcclxcbiAgICAgICAg5rW35oqlOiAnY292ZXJzJ1xcclxcbiAgICB9O1xcclxcbiAgICBsZXQgYSA9IFtdO1xcclxcbiAgICBsZXQgdGVtcCA9IGdldE15VmFyKCdwaG90bycsICdwaG90b3MnKTtcXHJcXG4gICAgbGV0IGNvbG9yID0gZ2V0Q29uZmlnKCdjaG9vc2VDb2xvcicpO1xcclxcbiAgICBmb3IgKGxldCBpIGluIGl0ZW1zKSB7XFxyXFxuICAgICAgICBhLnB1c2goe1xcclxcbiAgICAgICAgICAgIHRpdGxlOiB0ZW1wID09IGl0ZW1zW2ldID8gJ+KAnOKAnOKAneKAnScgKyBpLmZvbnRjb2xvcihjb2xvcikgOiBpLFxcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxyXFxuICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5JykubGF6eVJ1bGUoKHQpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoJ3Bob3RvJywgdCk7XFxyXFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxyXFxuICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSc7XFxyXFxuICAgICAgICAgICAgfSwgaXRlbXNbaV0pXFxyXFxuICAgICAgICB9KVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIGxldCByID0gZ2V0RG91YmFuUmVzKFxcXCJodHRwczovL2Zyb2RvLmRvdWJhbi5jb20vYXBpL3YyL1xcXCIgKyB0eXBlICsgXFxcIi9cXFwiICsgaWQgKyBcXFwiL1xcXCIgKyB0ZW1wICsgXFxcIj9zdGFydD1cXFwiICsgMzAgKiAocGFnZSAtIDEpICsgXFxcIiZjb3VudD0zMFxcXCIpO1xcclxcbiAgICBsZXQgbCA9IHIucGhvdG9zLm1hcCgoZSA9PiAoe1xcclxcbiAgICAgICAgdGl0bGU6IGUuY3JlYXRlX3RpbWUsXFxyXFxuICAgICAgICBpbWc6IGUuaW1hZ2Uuc21hbGwudXJsICsgXFxcIkBSZWZlcmVyPVxcXCIgKyBlLmltYWdlLnNtYWxsLnVybCxcXHJcXG4gICAgICAgIHVybDogZS5pbWFnZS5sYXJnZS51cmwgKyBcXFwiP3R5cGU9LmpwZ0BSZWZlcmVyPVxcXCIgKyBlLmltYWdlLmxhcmdlLnVybCArIFxcXCI/dHlwZT0uanBnXFxcIixcXHJcXG4gICAgICAgIGNvbF90eXBlOiBcXFwicGljXzJcXFwiXFxyXFxuICAgIH0pKSk7XFxyXFxuXFxyXFxuICAgIGlmIChwYWdlID09IDEpIHtcXHJcXG4gICAgICAgIGwudW5zaGlmdCh7XFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJibGFua19ibG9ja1xcXCJcXHJcXG4gICAgICAgIH0pO1xcclxcbiAgICAgICAgaWYgKHRlbXAgPT0gJ3Bob3RvcycpIHtcXHJcXG4gICAgICAgICAgICBsLnVuc2hpZnQoe1xcclxcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcIjxiaWc+5YWxPHN0cm9uZz4gXFxcIiArIHIudG90YWwgKyAnIDwvc3Ryb25nPuW8oOWJp+eFpzwvYmlnPjxici8+PHNtYWxsPjxmb250IGNvbG9yPVxcXCJncmV5XFxcIj7lrpjmlrnliafnhafvvJonICsgci5vICsgXFxcIuW8oCZuYnNwO+aIquWbvu+8mlxcXCIgKyByLmMgKyBcXFwi5bygJm5ic3A75bel5L2c54Wn77yaXFxcIiArIHIudyArIFxcXCLlvKAmbmJzcDvmlrDpl7vlm77niYfvvJpcXFwiICsgci5uICsgXFxcIuW8oCZuYnNwO+eyieS4neWbvueJh++8mlxcXCIgKyByLmYgKyBcXFwi5bygPC9mb250Pjwvc21hbGw+XFxcIixcXHJcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiXFxyXFxuICAgICAgICAgICAgfSlcXHJcXG4gICAgICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICAgICAgbC51bnNoaWZ0KHtcXHJcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXCI8YmlnPuWFsTxzdHJvbmc+IFxcXCIgKyByLnRvdGFsICsgXFxcIjwvc3Ryb25nPuW8oOa1t+aKpTwvYmlnPlxcXCIsXFxyXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIlxcclxcbiAgICAgICAgICAgIH0pXFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICBsID0gYS5jb25jYXQobCk7XFxyXFxuICAgIH1cXHJcXG4gICAgc2V0SG9tZVJlc3VsdCh7XFxyXFxuICAgICAgICBkYXRhOiBsXFxyXFxuICAgIH0pXFxyXFxufVxcclxcblxcclxcbi8v5ryU6IGM5Lq65ZGY6aG16Z2iXFxyXFxuZnVuY3Rpb24gY3JlZGl0cyh0eXBlLCBpZCkge1xcclxcbiAgICBsZXQgaSA9IGdldERvdWJhblJlcyhcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9cXFwiICsgdHlwZSArIFxcXCIvXFxcIiArIGlkICsgXFxcIi9jcmVkaXRzXFxcIik7XFxyXFxuICAgIGxldCByID0gW107XFxyXFxuICAgIGkuY3JlZGl0cy5mb3JFYWNoKChlID0+IHtcXHJcXG4gICAgICAgIHIucHVzaCh7XFxyXFxuICAgICAgICAgICAgdGl0bGU6IGUudGl0bGUsXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiXFxyXFxuICAgICAgICB9KTtcXHJcXG4gICAgICAgIGUuY2VsZWJyaXRpZXMuZm9yRWFjaCgoZSA9PiB7XFxyXFxuICAgICAgICAgICAgci5wdXNoKHtcXHJcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGUubmFtZSArIFxcXCJcXFxcblxcXCIgKyBlLmxhdGluX25hbWUsXFxyXFxuICAgICAgICAgICAgICAgIGRlc2M6IGUuY2hhcmFjdGVyLFxcclxcbiAgICAgICAgICAgICAgICBpbWc6IGUuYXZhdGFyLm5vcm1hbCArIFxcXCJAUmVmZXJlcj1cXFwiICsgZS5hdmF0YXIubm9ybWFsLFxcclxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfdmVydGljYWxfcGljJyxcXHJcXG4gICAgICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5I25vSGlzdG9yeSMjaW1tZXJzaXZlVGhlbWUjJykucnVsZSgoZSkgPT4ge1xcclxcbiAgICAgICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgZWxlc3NhclZpZXcoZS51cmkuc3BsaXQoXFxcInN1YmplY3RfaWQ9XFxcIilbMV0sIGUuaWQsIGUubmFtZSk7XFxyXFxuICAgICAgICAgICAgICAgIH0sIGUpXFxyXFxuICAgICAgICAgICAgfSlcXHJcXG4gICAgICAgIH0pKVxcclxcbiAgICB9KSk7XFxyXFxuICAgIHNldEhvbWVSZXN1bHQoe1xcclxcbiAgICAgICAgZGF0YTogclxcclxcbiAgICB9KVxcclxcbn1cXHJcXG5cXHJcXG4vL+efreivhOmhtemdolxcclxcbmZ1bmN0aW9uIHNob3J0Q29tbWVudExpc3QodHlwZSwgaWQpIHtcXHJcXG4gICAgYWRkTGlzdGVuZXIoJ29uQ2xvc2UnLCBcXFwiY2xlYXJNeVZhcignc2hvcnRjb21tZW50JylcXFwiKTtcXHJcXG4gICAgbGV0IGl0ZW1zID0ge1xcclxcbiAgICAgICAg54Ot6ZeoOiAnaG90JyxcXHJcXG4gICAgICAgIOacgOaWsDogJ2xhdGVzdCdcXHJcXG4gICAgfVxcclxcbiAgICBsZXQgdSA9IGdldE15VmFyKCdzaG9ydGNvbW1lbnQnLCAnaG90Jyk7XFxyXFxuICAgIGxldCBhID0gW107XFxyXFxuICAgIGxldCBjaG9vc2VDb2xvciA9IGdldENvbmZpZygnY2hvb3NlQ29sb3InKSAvLyB8fCBcXFwiI0ZBNzI5OFxcXCI7XFxyXFxuICAgIGZvciAoaSBpbiBpdGVtcykge1xcclxcbiAgICAgICAgYS5wdXNoKHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogdSA9PT0gaXRlbXNbaV0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjaG9vc2VDb2xvciArICc+JyArIGkgKyAnIDwvZm9udD48L2I+JyA6IGksXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXHJcXG4gICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOiAvL2VtcHR5JykubGF6eVJ1bGUoKHQpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcInNob3J0Y29tbWVudFxcXCIsIHQpO1xcclxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcclxcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxyXFxuICAgICAgICAgICAgfSwgaXRlbXNbaV0pXFxyXFxuICAgICAgICB9KVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIGxldCBwYWdlID0gTVlfUEFHRTtcXHJcXG4gICAgbGV0IHIgPSBnZXREb3ViYW5SZXMoXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvXFxcIiArIHR5cGUgKyBcXFwiL1xcXCIgKyBpZCArIFxcXCIvaW50ZXJlc3RzP3N0YXJ0PVxcXCIgKyAzMCAqIChwYWdlIC0gMSkgKyBcXFwiJmNvdW50PTMwJm9yZGVyX2J5PVxcXCIgKyB1KTtcXHJcXG4gICAgbGV0IGwgPSBbXTtcXHJcXG4gICAgbGV0IHN0YXJDb2xvciA9IGdldENvbmZpZygnc3RhckNvbG9yJyk7XFxyXFxuICAgIHIuaW50ZXJlc3RzLmZvckVhY2goKGUgPT4ge1xcclxcbiAgICAgICAgbGV0IHQgPSBcXFwiXFxcIjtcXHJcXG4gICAgICAgIGlmIChlLnJhdGluZykge1xcclxcbiAgICAgICAgICAgIHQgPSBjb21wdXRlUmF0aW5nKGUucmF0aW5nLm1heCwgZS5yYXRpbmcudmFsdWUpO1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgbC5wdXNoKHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogZS51c2VyLm5hbWUsXFxyXFxuICAgICAgICAgICAgaW1nOiBlLnVzZXIuYXZhdGFyLFxcclxcbiAgICAgICAgICAgIHVybDogZS51c2VyLnVybCxcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImF2YXRhclxcXCJcXHJcXG4gICAgICAgIH0pO1xcclxcbiAgICAgICAgbC5wdXNoKHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogZS5jb21tZW50ICsgKHQgPyAnPGJyLz48c21hbGw+55yL6L+HIDxmb250IGNvbG9yPScgKyBzdGFyQ29sb3IgKyAnPicgKyB0ICsgXFxcIjwvZm9udD48L3NtYWxsPlxcXCIgOiBcXFwiXFxcIikgKyAnPGJyLz48c21hbGw+PGZvbnQgY29sb3I9XFxcImdyZXlcXFwiPicgKyBlLnZvdGVfY291bnQgKyBcXFwi6LWe4oCiXFxcIiArIC9cXFxcZHs0fS1cXFxcZHsxLDJ9LVxcXFxkezEsMn0vZy5leGVjKGUuY3JlYXRlX3RpbWUpICsgXFxcIjwvZm9udD48L3NtYWxsPlxcXCIsXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiXFxyXFxuICAgICAgICB9KTtcXHJcXG4gICAgICAgIGwucHVzaCh7XFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJsaW5lXFxcIlxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgfSkpO1xcclxcblxcclxcbiAgICBpZiAocGFnZSA9PSAxKSB7XFxyXFxuICAgICAgICBsLnVuc2hpZnQoe1xcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwiYmxhbmtfYmxvY2tcXFwiXFxyXFxuICAgICAgICB9KTtcXHJcXG4gICAgICAgIGwudW5zaGlmdCh7XFxyXFxuICAgICAgICAgICAgdGl0bGU6IFxcXCI8YmlnPuWFsTxzdHJvbmc+IFxcXCIgKyByLnRvdGFsICsgXFxcIiA8L3N0cm9uZz7mnaHnn63or4Q8L2JpZz5cXFwiLFxcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIlxcclxcbiAgICAgICAgfSk7XFxyXFxuICAgICAgICBzZXRIb21lUmVzdWx0KHtcXHJcXG4gICAgICAgICAgICBkYXRhOiBhLmNvbmNhdChsKVxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgfSBlbHNlIHtcXHJcXG4gICAgICAgIHNldEhvbWVSZXN1bHQoe1xcclxcbiAgICAgICAgICAgIGRhdGE6IGxcXHJcXG4gICAgICAgIH0pXFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuLy/liafor4TpobXpnaJcXHJcXG5mdW5jdGlvbiBkcmFtYVJldmlld0xpc3QodHlwZSwgaWQpIHtcXHJcXG4gICAgYWRkTGlzdGVuZXIoJ29uQ2xvc2UnLCBcXFwiY2xlYXJNeVZhcignZHJhbWFyZXZpZXcnKVxcXCIpO1xcclxcbiAgICBsZXQgaXRlbXMgPSB7XFxyXFxuICAgICAgICDng63pl6g6ICdob3QnLFxcclxcbiAgICAgICAg5pyA5pawOiAnbGF0ZXN0J1xcclxcbiAgICB9XFxyXFxuICAgIGxldCB1ID0gZ2V0TXlWYXIoJ2RyYW1hcmV2aWV3JywgJ2hvdCcpO1xcclxcbiAgICBsZXQgYSA9IFtdO1xcclxcbiAgICBsZXQgY2hvb3NlQ29sb3IgPSBnZXRDb25maWcoJ2Nob29zZUNvbG9yJyk7XFxyXFxuICAgIGZvciAoaSBpbiBpdGVtcykge1xcclxcbiAgICAgICAgYS5wdXNoKHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogdSA9PT0gaXRlbXNbaV0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjaG9vc2VDb2xvciArICc+JyArIGkgKyAnIDwvZm9udD48L2I+JyA6IGksXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXHJcXG4gICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOiAvL2VtcHR5JykubGF6eVJ1bGUoKHQpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcImRyYW1hcmV2aWV3XFxcIiwgdCk7XFxyXFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxyXFxuICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXHJcXG4gICAgICAgICAgICB9LCBpdGVtc1tpXSlcXHJcXG4gICAgICAgIH0pXFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgbGV0IHBhZ2UgPSBNWV9QQUdFXFxyXFxuICAgIGxldCByID0gZ2V0RG91YmFuUmVzKFxcXCJodHRwczovL2Zyb2RvLmRvdWJhbi5jb20vYXBpL3YyL1xcXCIgKyB0eXBlICsgXFxcIi9cXFwiICsgaWQgKyBcXFwiL3Jldmlld3M/c3RhcnQ9XFxcIiArIDE1ICogKHBhZ2UgLSAxKSArIFxcXCImY291bnQ9MTUmb3JkZXJfYnk9XFxcIiArIHUpO1xcclxcbiAgICBsZXQgbCA9IFtdO1xcclxcbiAgICBsZXQgc3RhckNvbG9yID0gZ2V0Q29uZmlnKCdzdGFyQ29sb3InKTtcXHJcXG4gICAgci5yZXZpZXdzLmZvckVhY2goKGUgPT4ge1xcclxcbiAgICAgICAgbGV0IHQgPSBcXFwiXFxcIjtcXHJcXG4gICAgICAgIGlmIChlLnJhdGluZykge1xcclxcbiAgICAgICAgICAgIHQgPSBjb21wdXRlUmF0aW5nKGUucmF0aW5nLm1heCwgZS5yYXRpbmcudmFsdWUpO1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgbGV0IGkgPSBlLmNvbW1lbnRzX2NvdW50ID8gZS5jb21tZW50c19jb3VudCArIFxcXCLlm57lpI1cXFwiIDogXFxcIlxcXCIsXFxyXFxuICAgICAgICAgICAgciA9IGUudXNlZnVsX2NvdW50ID8gZS51c2VmdWxfY291bnQgKyBcXFwi5pyJ55SoXFxcIiA6IFxcXCJcXFwiLFxcclxcbiAgICAgICAgICAgIG8gPSBlLnJlc2hhcmVzX2NvdW50ID8gZS5yZXNoYXJlc19jb3VudCArIFxcXCLovazlj5FcXFwiIDogXFxcIlxcXCI7XFxyXFxuXFxyXFxuICAgICAgICByID0gaSAmJiByID8gXFxcIuKAolxcXCIgKyByIDogcjtcXHJcXG4gICAgICAgIG8gPSAoaSB8fCByKSAmJiBvID8gXFxcIuKAolxcXCIgKyBvIDogbztcXHJcXG4gICAgICAgIGwucHVzaCh7XFxyXFxuICAgICAgICAgICAgdGl0bGU6IGUudXNlci5uYW1lLFxcclxcbiAgICAgICAgICAgIGltZzogZS51c2VyLmF2YXRhcixcXHJcXG4gICAgICAgICAgICB1cmw6IGUudXNlci51cmwsXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJhdmF0YXJcXFwiXFxyXFxuICAgICAgICB9KVxcclxcbiAgICAgICAgbC5wdXNoKHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogXFxcIjxzdHJvbmc+XFxcIiArIGUudGl0bGUgKyBcXFwiPC9zdHJvbmc+PGJyLz5cXFwiICsgZS5hYnN0cmFjdCArICcgICA8c21hbGw+KDxhIGhyZWY9XFxcImhpa2VyOi8vZW1wdHkjbm9IaXN0b3J5I0BydWxlPWpzOmV2YWwoSlNPTi5wYXJzZShmZXRjaChgaGlrZXI6Ly9wYWdlL21haW5gKSkucnVsZSk7ZHJhbWFSZXZpZXdWaWV3KCcgKyBlLmlkICsgJylcXFwiPuabtOWkmjwvYT4pPC9zbWFsbD4nICsgKHQgPyAnPGJyLz48c21hbGw+55yL6L+HIDxmb250IGNvbG9yPScgKyBzdGFyQ29sb3IgKyAnPicgKyB0ICsgXFxcIjwvZm9udD48L3NtYWxsPlxcXCIgOiBcXFwiXFxcIikgKyAnPGJyLz48c21hbGw+PGZvbnQgY29sb3I9XFxcImdyZXlcXFwiPicgKyBpICsgciArIG8gKyBcXFwiPC9mb250Pjwvc21hbGw+XFxcIixcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCJcXHJcXG4gICAgICAgIH0pXFxyXFxuICAgICAgICBsLnB1c2goe1xcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwibGluZVxcXCJcXHJcXG4gICAgICAgIH0pXFxyXFxuICAgIH0pKTtcXHJcXG5cXHJcXG4gICAgaWYgKHBhZ2UgPT0gMSkge1xcclxcbiAgICAgICAgbC51bnNoaWZ0KHtcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImJsYW5rX2Jsb2NrXFxcIlxcclxcbiAgICAgICAgfSk7XFxyXFxuICAgICAgICBsLnVuc2hpZnQoe1xcclxcbiAgICAgICAgICAgIHRpdGxlOiBcXFwiPGJpZz7lhbE8c3Ryb25nPiBcXFwiICsgci50b3RhbCArIFxcXCIgPC9zdHJvbmc+5p2h5Ymn6K+EPC9iaWc+XFxcIixcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCJcXHJcXG4gICAgICAgIH0pO1xcclxcblxcclxcbiAgICAgICAgc2V0SG9tZVJlc3VsdCh7XFxyXFxuICAgICAgICAgICAgZGF0YTogYS5jb25jYXQobClcXHJcXG4gICAgICAgIH0pXFxyXFxuICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICBzZXRIb21lUmVzdWx0KHtcXHJcXG4gICAgICAgICAgICBkYXRhOiBsXFxyXFxuICAgICAgICB9KVxcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbi8v6aKE5ZGK54mH6aG16Z2iXFxyXFxuZnVuY3Rpb24gdHJhaWxlcnModHlwZSwgaWQpIHtcXHJcXG4gICAgc2V0UGFnZVRpdGxlKCfpooTlkYot54mH5q61LeiKsee1ricpXFxyXFxuICAgIGxldCBpID0gZ2V0RG91YmFuUmVzKFxcXCJodHRwczovL2Zyb2RvLmRvdWJhbi5jb20vYXBpL3YyL1xcXCIgKyB0eXBlICsgXFxcIi9cXFwiICsgaWQgKyBcXFwiL3RyYWlsZXJzXFxcIikudHJhaWxlcnM7XFxyXFxuICAgIGkuZm9yRWFjaCgoZSA9PiB7XFxyXFxuICAgICAgICBlLmNvbF90eXBlID0gXFxcIm1vdmllXzJcXFwiLCBlLmRlc2MgPSBlLnN1YmplY3RfdGl0bGUgKyBcXFwi4oCiXFxcIiArIGUuY3JlYXRlX3RpbWUsIGUuaW1nID0gZS5jb3Zlcl91cmwsIGUudXJsID0gZS52aWRlb191cmxcXHJcXG4gICAgfSkpO1xcclxcblxcclxcbiAgICBsZXQgciA9IGkuZmlsdGVyKChlID0+IFxcXCJBXFxcIiA9PT0gZS50eXBlKSk7XFxyXFxuICAgIGxldCBsID0gaS5maWx0ZXIoKGUgPT4gXFxcIkJcXFwiID09PSBlLnR5cGUpKTtcXHJcXG4gICAgbGV0IG8gPSBpLmZpbHRlcigoZSA9PiBcXFwiQ1xcXCIgPT09IGUudHlwZSkpO1xcclxcblxcclxcbiAgICBpZiAoci5sZW5ndGggPiAwKSB7XFxyXFxuICAgICAgICByLnVuc2hpZnQoe1xcclxcbiAgICAgICAgICAgIHRpdGxlOiBcXFwi6aKE5ZGKXFxcIixcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCJcXHJcXG4gICAgICAgIH0pXFxyXFxuICAgIH1cXHJcXG4gICAgaWYgKGwubGVuZ3RoID4gMCkge1xcclxcbiAgICAgICAgbC51bnNoaWZ0KHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogXFxcIueJh+autVxcXCIsXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiXFxyXFxuICAgICAgICB9KVxcclxcbiAgICB9XFxyXFxuICAgIGlmIChvLmxlbmd0aCA+IDApIHtcXHJcXG4gICAgICAgIG8udW5zaGlmdCh7XFxyXFxuICAgICAgICAgICAgdGl0bGU6IFxcXCLoirHnta5cXFwiLFxcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIlxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBzZXRIb21lUmVzdWx0KHtcXHJcXG4gICAgICAgIGRhdGE6IHIuY29uY2F0KGwpXFxyXFxuICAgICAgICAgICAgLmNvbmNhdChvKVxcclxcbiAgICB9KVxcclxcbn1cXHJcXG5cXHJcXG4vL+inhumikeivhOiuuumhtemdolxcclxcbmZ1bmN0aW9uIHZpZGVvQ29tbWVudCh0eXBlLCBpZCkge1xcclxcbiAgICBsZXQgaSA9IGdldERvdWJhblJlcyhcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9cXFwiICsgdHlwZSArIFxcXCIvXFxcIiArIGlkICsgXFxcIi92aWRlb3NcXFwiKS52aWRlb3M7XFxyXFxuICAgIGkuZm9yRWFjaCgoZSA9PiB7XFxyXFxuICAgICAgICBlLmNvbF90eXBlID0gXFxcIm1vdmllXzJcXFwiLCBlLmRlc2MgPSBlLmF1dGhvci5uYW1lICsgXFxcIuKAolxcXCIgKyBlLmNyZWF0ZV90aW1lLCBlLmltZyA9IGUuY292ZXJfdXJsICsgXFxcIkBSZWZlcmVyPVxcXCIgKyBlLmNvdmVyX3VybCwgZS51cmwgPSBlLnZpZGVvX3VybFxcclxcbiAgICB9KSlcXHJcXG4gICAgaWYgKGkubGVuZ3RoID4gMCkge1xcclxcbiAgICAgICAgaS51bnNoaWZ0KHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogXFxcIuinhumikeivhOiuulxcXCIsXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiXFxyXFxuICAgICAgICB9KVxcclxcbiAgICB9XFxyXFxuICAgIHNldEhvbWVSZXN1bHQoe1xcclxcbiAgICAgICAgZGF0YTogaVxcclxcbiAgICB9KVxcclxcbn1cXHJcXG5cXHJcXG4vL+a8lOiBjOS6uuWRmOivpuaDhemhtemdolxcclxcbmZ1bmN0aW9uIGVsZXNzYXJWaWV3KGlkLCBwaWQsIG5hbWUpIHtcXHJcXG4gICAgc2V0UGFnZVRpdGxlKG5hbWUpO1xcclxcbiAgICBsZXQgaSA9IGdldERvdWJhblJlcyhcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9lbGVzc2FyL3N1YmplY3QvXFxcIiArIGlkKTtcXHJcXG4gICAgbGV0IGEgPSBbXTtcXHJcXG4gICAgYS5wdXNoKHtcXHJcXG4gICAgICAgIHRpdGxlOiAn4oCc4oCc4oCd4oCdJyArIChpLnRpdGxlICsgJygnICsgaS5sYXRpbl90aXRsZSArICcpJykuYmlnKCkuYm9sZCgpLFxcclxcbiAgICAgICAgZGVzYzogJ+KAnOKAnOKAneKAnScgKyBpLmRlc2MubWF0Y2goL1xcXFw8cFxcXFw+LipcXFxcPFxcXFwvcFxcXFw+LylbMF0sXFxyXFxuICAgICAgICBpbWc6IGkuY292ZXIubm9ybWFsLnVybCArICdAUmVmZXJlcj0nICsgaS5jb3Zlci5ub3JtYWwudXJsLFxcclxcbiAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX3ZlcnRpY2FsX3BpY19ibHVyJyxcXHJcXG4gICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eScpLnJ1bGUoKGRlc2MsIGV4dHJhLCBuYW1lKSA9PiB7XFxyXFxuICAgICAgICAgICAgbGV0IGluZm8gPSBleHRyYS5pbmZvLm1hcChlID0+IGUuam9pbignOiZuYnNwOycpKTtcXHJcXG4gICAgICAgICAgICBzZXRSZXN1bHQoW3tcXHJcXG4gICAgICAgICAgICAgICAgdGl0bGU6ICc8aDI+JyArIG5hbWUgKyAnPC9oMj4nICsgaW5mby5qb2luKCc8YnIvPicpICsgZGVzYy5tYXRjaCgvXFxcXDxwXFxcXD4uKlxcXFw8XFxcXC9wXFxcXD4vKVswXSxcXHJcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICdyaWNoX3RleHQnXFxyXFxuICAgICAgICAgICAgfV0pXFxyXFxuICAgICAgICB9LCBpLmRlc2MsIGkuZXh0cmEsIGkudGl0bGUpXFxyXFxuICAgIH0pXFxyXFxuICAgIFxcclxcbiAgICBsZXQgaW5kZXggPSBpLm1vZHVsZXMuZmluZEluZGV4KGN1ciA9PiBjdXIudHlwZSA9PSBcXFwiYXdhcmRfcmVzdWx0X2NvbGxlY3Rpb25cXFwiKTtcXHJcXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcXHJcXG4gICAgICAgIGxldCBlID0gaS5tb2R1bGVzW2luZGV4XS5wYXlsb2FkO1xcclxcbiAgICAgICAgYS5wdXNoKHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogJ+KAnOKAnOKAneKAnScgKyAn6I635aWW6K6w5b2VJy5iaWcoKS5ib2xkKCkgKyAnPHNtYWxsPijlhbEnICsgZS50b3RhbCArICfpobkpPC9zbWFsbD4nLFxcclxcbiAgICAgICAgICAgIGRlc2M6ICfigJzigJzigJ3igJ08c3Ryb25nPicgKyBlLmF3YXJkc1swXS5jZXJlbW9ueS50aXRsZSArICc8L3N0cm9uZz5cXFxcbicgKyBlLmF3YXJkc1swXS5jYXRlZ29yeS50aXRsZSArIChlLmF3YXJkc1swXS5pc193b24gPyAnJyA6ICco5o+Q5ZCNKScpLFxcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMScsXFxyXFxuICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5LyMvJHBhZ2V7ZnlwYWdlfSNub0hpc3RvcnkjJykucnVsZSgoaWQsIGNvdW50KSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtcXHJcXG4gICAgICAgICAgICAgICAgZWxlc3NhckF3YXJkcyhpZCwgY291bnQpO1xcclxcbiAgICAgICAgICAgIH0sIGUuaWQsIGUudG90YWwpLFxcclxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxyXFxuICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH0pXFxyXFxuICAgIH1cXHJcXG4gICAgXFxyXFxuICAgIGluZGV4ID0gaS5tb2R1bGVzLmZpbmRJbmRleChjdXIgPT4gY3VyLnR5cGUgPT0gXFxcIndvcmtfY29sbGVjdGlvbnNcXFwiKTtcXHJcXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcXHJcXG4gICAgICAgIGxldCBlMiA9IGkubW9kdWxlc1tpbmRleF0ucGF5bG9hZDtcXHJcXG4gICAgICAgIGEucHVzaCh7XFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xcclxcbiAgICAgICAgfSlcXHJcXG4gICAgICAgIGEucHVzaCh7XFxyXFxuICAgICAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ0nICsgJ+W9seinhuS9nOWTgScuYmlnKCkuYm9sZCgpICsgKCco5YWxJyArIGUyLmNvbGxlY3Rpb25zWzBdLnRvdGFsICsgJ+mDqCknKS5zbWFsbCgpLFxcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMScsXFxyXFxuICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5LyMvJHBhZ2V7ZnlwYWdlfSNub0hpc3RvcnkjJykucnVsZSgoaWQsIHR5cGUpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcclxcbiAgICAgICAgICAgICAgICBlbGVzc2FyV29ya3MoaWQsIHR5cGUpO1xcclxcbiAgICAgICAgICAgIH0sIGUyLmlkLCBlMi5jb2xsZWN0aW9uc1swXS50aXRsZSksXFxyXFxuICAgICAgICAgICAgZXh0cmE6IHtcXHJcXG4gICAgICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlXFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfSlcXHJcXG5cXHJcXG4gICAgICAgIGxldCBkZXRhaWxzVmlld0NvbmZpZ3MgPSBnZXRDb25maWcoJ2RldGFpbHNWaWV3Q29uZmlncycpO1xcclxcbiAgICAgICAgbGV0IHdvcmtzID0gZTIuY29sbGVjdGlvbnNbMF0ud29ya3M7XFxyXFxuICAgICAgICBsZXQgbGVuZ3RoID0gd29ya3MubGVuZ3RoIDw9IDMgPyB3b3Jrcy5sZW5ndGggOiAzO1xcclxcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xcclxcbiAgICAgICAgICAgIGxldCBlID0gd29ya3NbaV07XFxyXFxuICAgICAgICAgICAgbGV0IHJhdGluZyA9IFxcXCJcXFwiO1xcclxcbiAgICAgICAgICAgIGlmIChlLnN1YmplY3QuZXh0cmEucmF0aW5nX2dyb3VwLnJhdGluZykge1xcclxcbiAgICAgICAgICAgICAgICByYXRpbmcgPSBjb21wdXRlUmF0aW5nKGUuc3ViamVjdC5leHRyYS5yYXRpbmdfZ3JvdXAucmF0aW5nLm1heCwgZS5zdWJqZWN0LmV4dHJhLnJhdGluZ19ncm91cC5yYXRpbmcudmFsdWUpICsgXFxcIiBcXFwiICsgZS5zdWJqZWN0LmV4dHJhLnJhdGluZ19ncm91cC5yYXRpbmcudmFsdWUgKyBcXFwi5YiGXFxcIjtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAgICAgbGV0IHR5cGUgPSBlLnN1YmplY3Quc3VidHlwZSxcXHJcXG4gICAgICAgICAgICAgICAgaWQgPSBlLnN1YmplY3QuaWQsXFxyXFxuICAgICAgICAgICAgICAgIHRpdGxlID0gZS5zdWJqZWN0LnRpdGxlO1xcclxcbiAgICAgICAgICAgIGxldCB1c2VDb25maWcgPSBkZXRhaWxzVmlld0NvbmZpZ3NbZGV0YWlsc1ZpZXdDb25maWdzLnVzZV0uY29uZmlnO1xcclxcbiAgICAgICAgICAgIGxldCB1cmxQYXJhbXMgPSB7fTtcXHJcXG4gICAgICAgICAgICBpZiAodXNlQ29uZmlnLnN0YXJ0c1dpdGgoJ3snKSkge1xcclxcbiAgICAgICAgICAgICAgICBldmFsKCd1cmxQYXJhbXMgPSAnICsgdXNlQ29uZmlnKTtcXHJcXG4gICAgICAgICAgICB9IGVsc2Uge1xcclxcbiAgICAgICAgICAgICAgICB1cmxQYXJhbXMudXJsID0gJChcXFwiaGlrZXI6Ly9lbXB0eSNub0hpc3RvcnkjI2ltbWVyc2l2ZVRoZW1lI1xcXCIgKyAnP3R5cGU9JyArIHR5cGUgKyAnJmlkPScgKyBpZCkucnVsZSgodHlwZSwgaWQsIHRpdGxlLCB1c2VDb25maWcpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcXFwicGxheWxpc3RcXFwiKSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgZG91TGlzdChpZCwgTVlfUEFHRSwgNTApO1xcclxcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBldmFsKHVzZUNvbmZpZyk7XFxyXFxuICAgICAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgIH0sIHR5cGUsIGlkLCB0aXRsZSwgdXNlQ29uZmlnKTtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgYS5wdXNoKHtcXHJcXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxcclxcbiAgICAgICAgICAgICAgICBpbWc6IGUuc3ViamVjdC5jb3Zlci5ub3JtYWwudXJsICsgXFxcIkBSZWZlcmVyPVxcXCIgKyBlLnN1YmplY3QuY292ZXIubm9ybWFsLnVybCxcXHJcXG4gICAgICAgICAgICAgICAgZGVzYzogcmF0aW5nLFxcclxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzMnLFxcclxcbiAgICAgICAgICAgICAgICB1cmw6IHVybFBhcmFtcy51cmwsXFxyXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB1cmxQYXJhbXMuZXh0cmFcXHJcXG4gICAgICAgICAgICB9KVxcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgLyphLnB1c2goe1xcclxcbiAgICAgICAgICAgIHRpdGxlOiAn5p+l55yL5pu05aSaJyxcXHJcXG4gICAgICAgICAgICBpbWc6ICdodHRwczovL2pva2VyLXR4LmNvZGluZy5uZXQvcC9oaWtlcmltZy9kL2hpa2VyL2dpdC9yYXcvbWFzdGVyL2ltZy9tb3JlX3Zlci5wbmc/ZG93bmxvYWQ9ZmFsc2UnLFxcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMycsXFxyXFxuICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5LyMvJHBhZ2V7ZnlwYWdlfSNub0hpc3RvcnkjJylcXHJcXG4gICAgICAgICAgICAgICAgLnJ1bGUoKGlkLCB0eXBlKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtcXHJcXG4gICAgICAgICAgICAgICAgZWxlc3NhcldvcmtzKGlkLCB0eXBlKTtcXHJcXG4gICAgICAgICAgICB9LCBlMi5pZCwgZTIuY29sbGVjdGlvbnNbMF0udGl0bGUpXFxyXFxuICAgICAgICB9KSovXFxyXFxuICAgIH1cXHJcXG4gICAgXFxyXFxuICAgIGluZGV4ID0gaS5tb2R1bGVzLmZpbmRJbmRleChjdXIgPT4gY3VyLnR5cGUgPT0gXFxcInBob3Rvc1xcXCIpO1xcclxcbiAgICBpZiAoaW5kZXggPiAtMSkge1xcclxcbiAgICAgICAgbGV0IGUzID0gaS5tb2R1bGVzW2luZGV4XS5wYXlsb2FkO1xcclxcbiAgICAgICAgYS5wdXNoKHtcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ2xpbmUnXFxyXFxuICAgICAgICB9KVxcclxcbiAgICAgICAgYS5wdXNoKHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogJ+KAnOKAnOKAneKAnScgKyAn5ryU5ZGY54Wn54mHJy5iaWcoKS5ib2xkKCkgKyAoJyjlhbEnICsgZTMudG90YWwgKyAn5bygKScpLnNtYWxsKCksXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJyxcXHJcXG4gICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkvIy8kcGFnZXtmeXBhZ2V9I25vSGlzdG9yeSMnKS5ydWxlKChwaWQpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcclxcbiAgICAgICAgICAgICAgICBlbGVzc2FyUGhvdG9zKHBpZCk7XFxyXFxuICAgICAgICAgICAgfSwgcGlkKSxcXHJcXG4gICAgICAgICAgICBleHRyYToge1xcclxcbiAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9KVxcclxcblxcclxcbiAgICAgICAgbGV0IHBsZW5ndGggPSBlMy5waG90b3MubGVuZ3RoIDw9IDIgPyBlMy5waG90b3MubGVuZ3RoIDogMjtcXHJcXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGxlbmd0aDsgaSsrKSB7XFxyXFxuICAgICAgICAgICAgYS5wdXNoKHtcXHJcXG4gICAgICAgICAgICAgICAgLy90aXRsZTogZTMucGhvdG9zWzBdLmRlc2NyaXB0aW9uLFxcclxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2NhcmRfcGljXzInLFxcclxcbiAgICAgICAgICAgICAgICBkZXNjOiAnMCcsXFxyXFxuICAgICAgICAgICAgICAgIGltZzogZTMucGhvdG9zW2ldLmltYWdlLm5vcm1hbC51cmwgKyAnQFJlZmVyZXI9JyArIGUzLnBob3Rvc1tpXS5pbWFnZS5ub3JtYWwudXJsLFxcclxcbiAgICAgICAgICAgICAgICB1cmw6IGUzLnBob3Rvc1tpXS5pbWFnZS5ub3JtYWwudXJsICsgJ0BSZWZlcmVyPScgKyBlMy5waG90b3NbaV0uaW1hZ2Uubm9ybWFsLnVybFxcclxcbiAgICAgICAgICAgIH0pXFxyXFxuICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAvKmEucHVzaCh7XFxyXFxuICAgICAgICAgICAgLy90aXRsZTogJ+afpeeci+abtOWkmicsXFxyXFxuICAgICAgICAgICAgaW1nOiAnaHR0cHM6Ly9qb2tlci10eC5jb2RpbmcubmV0L3AvaGlrZXJpbWcvZC9oaWtlci9naXQvcmF3L21hc3Rlci9pbWcvbW9yZS5wbmc/ZG93bmxvYWQ9ZmFsc2UnLFxcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnY2FyZF9waWNfMicsXFxyXFxuICAgICAgICAgICAgZGVzYzogJzAnLFxcclxcbiAgICAgICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eS8jLyRwYWdle2Z5cGFnZX0jbm9IaXN0b3J5IycpXFxyXFxuICAgICAgICAgICAgICAgIC5ydWxlKChwaWQpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcclxcbiAgICAgICAgICAgICAgICBlbGVzc2FyUGhvdG9zKHBpZCk7XFxyXFxuICAgICAgICAgICAgfSwgcGlkKVxcclxcbiAgICAgICAgfSkqL1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIHNldFJlc3VsdChhKTtcXHJcXG59XFxyXFxuXFxyXFxuLy/mvJTogYzkurrlkZjojrflpZbor6bmg4XpobXpnaJcXHJcXG5mdW5jdGlvbiBlbGVzc2FyQXdhcmRzKGlkLCBjb3VudCkge1xcclxcbiAgICBsZXQgaSA9IGdldERvdWJhblJlcyhcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9lbGVzc2FyL2F3YXJkX3Jlc3VsdF9jb2xsZWN0aW9uL1xcXCIgKyBpZCArIFxcXCIvYXdhcmRzP3N0YXJ0PVxcXCIgKyAzMCAqIChNWV9QQUdFIC0gMSkgKyBcXFwiJmNvdW50PTMwXFxcIik7XFxyXFxuICAgIGxldCBsID0gW107XFxyXFxuICAgIGxldCBkZXRhaWxzVmlld0NvbmZpZ3MgPSBnZXRDb25maWcoJ2RldGFpbHNWaWV3Q29uZmlncycpO1xcclxcbiAgICBpLmF3YXJkcy5mb3JFYWNoKHQgPT4ge1xcclxcbiAgICAgICAgbC5wdXNoKHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogKHQueWVhcitcXFwiXFxcIikuYm9sZCgpLmJpZygpLFxcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiAncmljaF90ZXh0J1xcclxcbiAgICAgICAgfSlcXHJcXG5cXHJcXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdC5tb2R1bGVzLmxlbmd0aDsgaSsrKSB7XFxyXFxuICAgICAgICAgICAgbGV0IGUgPSB0Lm1vZHVsZXNbaV07XFxyXFxuICAgICAgICAgICAgaWYgKCFlLmNlcmVtb255IHx8ICFlLmNhdGVnb3J5KSB7XFxyXFxuICAgICAgICAgICAgICAgIGxldCByYXRpbmcgPSBcXFwiXFxcIjtcXHJcXG4gICAgICAgICAgICAgICAgaWYgKGUuZXh0cmEucmF0aW5nX2dyb3VwLnJhdGluZykge1xcclxcbiAgICAgICAgICAgICAgICAgICAgcmF0aW5nID0gY29tcHV0ZVJhdGluZyhlLmV4dHJhLnJhdGluZ19ncm91cC5yYXRpbmcubWF4LCBlLmV4dHJhLnJhdGluZ19ncm91cC5yYXRpbmcudmFsdWUpICsgXFxcIiBcXFwiICsgZS5leHRyYS5yYXRpbmdfZ3JvdXAucmF0aW5nLnZhbHVlICsgXFxcIuWIhlxcXCI7XFxyXFxuICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAgICAgbGV0IHR5cGUgPSBlLnN1YnR5cGUsXFxyXFxuICAgICAgICAgICAgICAgICAgICBpZCA9IGUuaWQsXFxyXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZSA9IGUudGl0bGU7XFxyXFxuICAgICAgICAgICAgICAgIGxldCB1c2VDb25maWcgPSBkZXRhaWxzVmlld0NvbmZpZ3NbZGV0YWlsc1ZpZXdDb25maWdzLnVzZV0uY29uZmlnO1xcclxcbiAgICAgICAgICAgICAgICBsZXQgdXJsUGFyYW1zID0ge307XFxyXFxuICAgICAgICAgICAgICAgIGlmICh1c2VDb25maWcuc3RhcnRzV2l0aCgneycpKSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBldmFsKCd1cmxQYXJhbXMgPSAnICsgdXNlQ29uZmlnKTtcXHJcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHVybFBhcmFtcy51cmwgPSAkKFxcXCJoaWtlcjovL2VtcHR5I25vSGlzdG9yeSMjaW1tZXJzaXZlVGhlbWUjXFxcIiArICc/dHlwZT0nICsgdHlwZSArICcmaWQ9JyArIGlkKS5ydWxlKCh0eXBlLCBpZCwgdGl0bGUsIHVzZUNvbmZpZykgPT4ge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gXFxcInBsYXlsaXN0XFxcIikge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3VMaXN0KGlkLCBNWV9QQUdFLCA1MCk7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZhbCh1c2VDb25maWcpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAgICAgICAgIH0sIHR5cGUsIGlkLCB0aXRsZSwgdXNlQ29uZmlnKTtcXHJcXG4gICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICBsLnB1c2goe1xcclxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxcclxcbiAgICAgICAgICAgICAgICAgICAgaW1nOiBlLmNvdmVyLm5vcm1hbC51cmwgKyBcXFwiQFJlZmVyZXI9XFxcIiArIGUuY292ZXIubm9ybWFsLnVybCxcXHJcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6IHJhdGluZyArICdcXFxcbicgKyBlLmV4dHJhLnNob3J0X2luZm8sXFxyXFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHVybFBhcmFtcy51cmwsXFxyXFxuICAgICAgICAgICAgICAgICAgICBleHRyYTogdXJsUGFyYW1zLmV4dHJhXFxyXFxuICAgICAgICAgICAgICAgIH0pXFxyXFxuICAgICAgICAgICAgfSBlbHNlIHtcXHJcXG4gICAgICAgICAgICAgICAgbC5wdXNoKHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlLmNlcmVtb255LnRpdGxlLmJvbGQoKSArICc8c21hbGw+KDxhIGhyZWY9XFxcImhpa2VyOi8vZW1wdHkjbm9IaXN0b3J5I0BydWxlPWpzOmV2YWwoSlNPTi5wYXJzZShmZXRjaChgaGlrZXI6Ly9wYWdlL21haW5gKSkucnVsZSk7YXdhcmRWaWV3KGAnICsgZS5jZXJlbW9ueS5pZCArICdgLGAnICsgZS5jZXJlbW9ueS50aXRsZSArICdgKTtcXFwiPuafpeeci+ivpuaDhTwvYT4pPC9zbWFsbD4nICsgJzxici8+JyArIChlLmNhdGVnb3J5LnRpdGxlICsgKGUuaXNfd29uID8gJycgOiAnKOaPkOWQjSknKSkuc21hbGwoKSxcXHJcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAncmljaF90ZXh0J1xcclxcbiAgICAgICAgICAgICAgICB9KVxcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfSlcXHJcXG5cXHJcXG4gICAgaWYgKE1ZX1BBR0UgPT0gMSkge1xcclxcbiAgICAgICAgbC51bnNoaWZ0KHtcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImJsYW5rX2Jsb2NrXFxcIlxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgICAgIGwudW5zaGlmdCh7XFxyXFxuICAgICAgICAgICAgdGl0bGU6IFxcXCI8YmlnPuWFsTxzdHJvbmc+IFxcXCIgKyBjb3VudCArIFxcXCIgPC9zdHJvbmc+6aG56I635aWW6K6w5b2VPC9iaWc+XFxcIixcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCJcXHJcXG4gICAgICAgIH0pXFxyXFxuICAgIH1cXHJcXG4gICAgc2V0UmVzdWx0KGwpO1xcclxcbn1cXHJcXG5cXHJcXG4vL+a8lOiBjOS6uuWRmOS9nOWTgemhtemdolxcclxcbmZ1bmN0aW9uIGVsZXNzYXJXb3JrcyhpZCwgdHlwZSkge1xcclxcbiAgICBsZXQgaSA9IGdldERvdWJhblJlcyhcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9lbGVzc2FyL3dvcmtfY29sbGVjdGlvbnMvXFxcIiArIGlkICsgXFxcIi93b3Jrcz9zdGFydD1cXFwiICsgMzAgKiAoTVlfUEFHRSAtIDEpICsgXFxcIiZjb3VudD0zMCZjb2xsZWN0aW9uX3RpdGxlPVxcXCIgKyB0eXBlKTtcXHJcXG5cXHJcXG4gICAgbGV0IGwgPSBbXTtcXHJcXG4gICAgbGV0IGRldGFpbHNWaWV3Q29uZmlncyA9IGdldENvbmZpZygnZGV0YWlsc1ZpZXdDb25maWdzJyk7XFxyXFxuICAgIGkud29ya3MuZm9yRWFjaCgoZSA9PiB7XFxyXFxuICAgICAgICBsZXQgcmF0aW5nID0gXFxcIlxcXCI7XFxyXFxuICAgICAgICBpZiAoZS5zdWJqZWN0LmV4dHJhLnJhdGluZ19ncm91cC5yYXRpbmcpIHtcXHJcXG4gICAgICAgICAgICByYXRpbmcgPSBjb21wdXRlUmF0aW5nKGUuc3ViamVjdC5leHRyYS5yYXRpbmdfZ3JvdXAucmF0aW5nLm1heCwgZS5zdWJqZWN0LmV4dHJhLnJhdGluZ19ncm91cC5yYXRpbmcudmFsdWUpICsgXFxcIiBcXFwiICsgZS5zdWJqZWN0LmV4dHJhLnJhdGluZ19ncm91cC5yYXRpbmcudmFsdWUgKyBcXFwi5YiGXFxcIjtcXHJcXG4gICAgICAgIH1cXG4gICAgICAgIFxcbiAgICAgICAgbGV0IHllYXIgPSBlLnN1YmplY3QuZXh0cmEgPyAoZS5zdWJqZWN0LmV4dHJhLnllYXIgPyAnKCcrZS5zdWJqZWN0LmV4dHJhLnllYXIrJyknIDogJycpIDogJyc7XFxyXFxuXFxyXFxuICAgICAgICBsZXQgdHlwZSA9IGUuc3ViamVjdC5zdWJ0eXBlLFxcclxcbiAgICAgICAgICAgIGlkID0gZS5zdWJqZWN0LmlkLFxcclxcbiAgICAgICAgICAgIHRpdGxlID0gZS5zdWJqZWN0LnRpdGxlO1xcclxcbiAgICAgICAgbGV0IHVzZUNvbmZpZyA9IGRldGFpbHNWaWV3Q29uZmlnc1tkZXRhaWxzVmlld0NvbmZpZ3MudXNlXS5jb25maWc7XFxyXFxuICAgICAgICBsZXQgdXJsUGFyYW1zID0ge307XFxyXFxuICAgICAgICBpZiAodXNlQ29uZmlnLnN0YXJ0c1dpdGgoJ3snKSkge1xcclxcbiAgICAgICAgICAgIGV2YWwoJ3VybFBhcmFtcyA9ICcgKyB1c2VDb25maWcpO1xcclxcbiAgICAgICAgfSBlbHNlIHtcXHJcXG4gICAgICAgICAgICB1cmxQYXJhbXMudXJsID0gJChcXFwiaGlrZXI6Ly9lbXB0eSNub0hpc3RvcnkjI2ltbWVyc2l2ZVRoZW1lI1xcXCIgKyAnP3R5cGU9JyArIHR5cGUgKyAnJmlkPScgKyBpZCkucnVsZSgodHlwZSwgaWQsIHRpdGxlLCB1c2VDb25maWcpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcclxcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gXFxcInBsYXlsaXN0XFxcIikge1xcclxcbiAgICAgICAgICAgICAgICAgICAgZG91TGlzdChpZCwgTVlfUEFHRSwgNTApO1xcclxcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcclxcbiAgICAgICAgICAgICAgICAgICAgZXZhbCh1c2VDb25maWcpO1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgfSwgdHlwZSwgaWQsIHRpdGxlLCB1c2VDb25maWcpO1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgbC5wdXNoKHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogdGl0bGUgKyB5ZWFyLFxcclxcbiAgICAgICAgICAgIGltZzogZS5zdWJqZWN0LmNvdmVyLm5vcm1hbC51cmwgKyBcXFwiQFJlZmVyZXI9XFxcIiArIGUuc3ViamVjdC5jb3Zlci5ub3JtYWwudXJsLFxcclxcbiAgICAgICAgICAgIGRlc2M6IGUucm9sZXMuam9pbihcXFwi4oCiXFxcIikgKyBcXFwiXFxcXG5cXFwiICsgcmF0aW5nICsgJ1xcXFxuJyArIGUuc3ViamVjdC5leHRyYS5zaG9ydF9pbmZvLFxcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV92ZXJ0aWNhbF9waWMnLFxcclxcbiAgICAgICAgICAgIHVybDogdXJsUGFyYW1zLnVybCxcXHJcXG4gICAgICAgICAgICBleHRyYTogdXJsUGFyYW1zLmV4dHJhXFxyXFxuICAgICAgICB9KVxcclxcbiAgICB9KSlcXHJcXG5cXHJcXG4gICAgaWYgKE1ZX1BBR0UgPT0gMSkge1xcclxcbiAgICAgICAgbC51bnNoaWZ0KHtcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImJsYW5rX2Jsb2NrXFxcIlxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgICAgIGwudW5zaGlmdCh7XFxyXFxuICAgICAgICAgICAgdGl0bGU6IFxcXCI8YmlnPuWFsTxzdHJvbmc+IFxcXCIgKyBpLnRvdGFsICsgXFxcIiA8L3N0cm9uZz7pg6jkvZzlk4E8L2JpZz5cXFwiLFxcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIlxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgfVxcclxcbiAgICBzZXRIb21lUmVzdWx0KHtcXHJcXG4gICAgICAgIGRhdGE6IGxcXHJcXG4gICAgfSlcXHJcXG59XFxyXFxuXFxyXFxuLy/mvJTogYzkurrlkZjnhafniYfpobXpnaJcXHJcXG5mdW5jdGlvbiBlbGVzc2FyUGhvdG9zKHBpZCkge1xcclxcbiAgICBsZXQgaSA9IGdldERvdWJhblJlcyhcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9jZWxlYnJpdHkvXFxcIiArIHBpZCArIFxcXCIvcGhvdG9zP3N0YXJ0PVxcXCIgKyAzMCAqIChNWV9QQUdFIC0gMSkgKyBcXFwiJmNvdW50PTMwXFxcIik7XFxyXFxuICAgIGxldCBsID0gW107XFxyXFxuICAgIGkucGhvdG9zLmZvckVhY2goZSA9PiB7XFxyXFxuICAgICAgICBsLnB1c2goe1xcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnY2FyZF9waWNfMicsXFxyXFxuICAgICAgICAgICAgZGVzYzogJzAnLFxcclxcbiAgICAgICAgICAgIGltZzogZS5pbWFnZS5ub3JtYWwudXJsICsgJ0BSZWZlcmVyPScgKyBlLmltYWdlLm5vcm1hbC51cmwsXFxyXFxuICAgICAgICAgICAgdXJsOiBlLmltYWdlLm5vcm1hbC51cmwgKyAnQFJlZmVyZXI9JyArIGUuaW1hZ2Uubm9ybWFsLnVybFxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgfSlcXHJcXG4gICAgaWYgKE1ZX1BBR0UgPT0gMSkge1xcclxcbiAgICAgICAgbC51bnNoaWZ0KHtcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImJsYW5rX2Jsb2NrXFxcIlxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgICAgIGwudW5zaGlmdCh7XFxyXFxuICAgICAgICAgICAgdGl0bGU6IFxcXCI8YmlnPuWFsTxzdHJvbmc+IFxcXCIgKyBpLnRvdGFsICsgXFxcIiA8L3N0cm9uZz7lvKDnhafniYc8L2JpZz5cXFwiLFxcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIlxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgfVxcclxcbiAgICBzZXRSZXN1bHQobCk7XFxyXFxufVxcclxcblxcclxcbi8v5Ymn6K+E6K+m5oOF6aG16Z2iXFxyXFxuZnVuY3Rpb24gZHJhbWFSZXZpZXdWaWV3KGlkKSB7XFxyXFxuICAgIHNldFBhZ2VUaXRsZSgn5Ymn6K+E6K+m5oOFJyk7XFxyXFxuICAgIGxldCBpID0gZ2V0RG91YmFuUmVzKFxcXCJodHRwczovL2Zyb2RvLmRvdWJhbi5jb20vYXBpL3YyL3Jldmlldy9cXFwiICsgaWQpO1xcclxcblxcclxcbiAgICBpLnBob3Rvcy5mb3JFYWNoKChlID0+IHtcXHJcXG4gICAgICAgIGkuY29udGVudCA9IGkuY29udGVudC5yZXBsYWNlKCdpZD1cXFwiJyArIGUudGFnX25hbWUgKyAnXFxcIicsICdzcmM9XFxcIicgKyBlLmltYWdlLmxhcmdlLnVybCArIFxcXCJAUmVmZXJlcj1cXFwiICsgZS5pbWFnZS5sYXJnZS51cmwgKyAnXFxcIicpXFxyXFxuICAgIH0pKTtcXHJcXG5cXHJcXG4gICAgbGV0IGwgPSBnZXREb3ViYW5SZXMoXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvcmV2aWV3L1xcXCIgKyBpZCArIFxcXCIvY29tbWVudHNcXFwiKTtcXHJcXG4gICAgbGV0IG8gPSBbe1xcclxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJibGFua19ibG9ja1xcXCJcXHJcXG4gICAgfSwge1xcclxcbiAgICAgICAgdGl0bGU6IFxcXCI8YmlnPjxzdHJvbmc+6K+E6K6677yaPC9zdHJvbmc+PC9iaWc+XFxcIixcXHJcXG4gICAgICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIlxcclxcbiAgICB9XTtcXHJcXG5cXHJcXG4gICAgbC5jb21tZW50cy5sZW5ndGggPiAwID8gbC5jb21tZW50cy5mb3JFYWNoKChlID0+IHtcXHJcXG4gICAgICAgIG8ucHVzaCh7XFxyXFxuICAgICAgICAgICAgdGl0bGU6IGUuYXV0aG9yLm5hbWUsXFxyXFxuICAgICAgICAgICAgaW1nOiBlLmF1dGhvci5hdmF0YXIsXFxyXFxuICAgICAgICAgICAgdXJsOiBlLmF1dGhvci51cmwsXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJhdmF0YXJcXFwiXFxyXFxuICAgICAgICB9KVxcclxcbiAgICAgICAgby5wdXNoKHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogZS50ZXh0ICsgKGUucmVwbGllcy5sZW5ndGggPiAwID8gJyA8c21hbGw+PGEgaHJlZj1cXFwiaGlrZXI6Ly9lbXB0eSNub0hpc3RvcnkjQHJ1bGU9anM6ZXZhbChKU09OLnBhcnNlKGZldGNoKGBoaWtlcjovL3BhZ2UvbWFpbmApKS5ydWxlKTtkcmFtYVJldmlld1JlcGx5VmlldygnICsgZS5pZCArICcpO1xcXCI+W+afpeeci+WbnuWkjV08L2E+PC9zbWFsbD4nIDogXFxcIlxcXCIpLFxcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIlxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgICAgIG8ucHVzaCh7XFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJsaW5lXFxcIlxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgfSkpIDogby5wdXNoKHtcXHJcXG4gICAgICAgIHRpdGxlOiAnPGZvbnQgY29sb3I9XFxcImdyZXlcXFwiPigg4oCizKXMgSDLjSDigKLMgOClgiAp6L+Y5rKh5pyJ5Lq66K+E6K66Li4uPC9mb250PicsXFxyXFxuICAgICAgICBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCJcXHJcXG4gICAgfSk7XFxyXFxuXFxyXFxuICAgIGxldCBhID0gXFxcIlxcXCI7XFxyXFxuICAgIGlmIChpLnJhdGluZykge1xcclxcbiAgICAgICAgYSA9IGNvbXB1dGVSYXRpbmcoaS5yYXRpbmcubWF4LCBpLnJhdGluZy52YWx1ZSk7XFxyXFxuICAgIH1cXHJcXG4gICAgbGV0IGNvbG9yID0gSlNPTi5wYXJzZShmZXRjaChnZXRNeVZhcigncWRiX2NvbmZpZycpKSlcXHJcXG4gICAgICAgIC5zdGFyQ29sb3IgfHwgXFxcIiNmZmFjMmRcXFwiO1xcclxcbiAgICBsZXQgcyA9IFt7XFxyXFxuICAgICAgICB0aXRsZTogXFxcIjxiaWc+PHN0cm9uZz5cXFwiICsgaS50aXRsZSArIFxcXCI8L3N0cm9uZz48L2JpZz5cXFwiLFxcclxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiXFxyXFxuICAgIH0sIHtcXHJcXG4gICAgICAgIHRpdGxlOiBpLnVzZXIubmFtZSArIFxcXCIg55qE5Ymn6K+EXFxcIixcXHJcXG4gICAgICAgIGltZzogaS51c2VyLmF2YXRhcixcXHJcXG4gICAgICAgIHVybDogaS51c2VyLnVybCxcXHJcXG4gICAgICAgIGNvbF90eXBlOiBcXFwiYXZhdGFyXFxcIlxcclxcbiAgICB9LCB7XFxyXFxuICAgICAgICB0aXRsZTogKGkuc3BvaWxlciA/IFxcXCI8c21hbGw+PGZvbnQgY29sb3I9I2YyMGMwMD7ov5nnr4flvbHor4Tlj6/og73mnInliafpgI88L2ZvbnQ+PC9zbWFsbD48YnIvPlxcXCIgOiBcXFwiXFxcIikgKyAoYSA/ICc8c21hbGw+55yL6L+HIDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIGEgKyBcXFwiPC9mb250Pjxici8+PC9zbWFsbD5cXFwiIDogXFxcIlxcXCIpICsgJzxzbWFsbD48Zm9udCBjb2xvcj1cXFwiZ3JleVxcXCI+JyArIC9cXFxcZHs0fS1cXFxcZHsxLDJ9LVxcXFxkezEsMn0vZy5leGVjKGkuY3JlYXRlX3RpbWUpICsgXFxcIjwvZm9udD48L3NtYWxsPlxcXCIsXFxyXFxuICAgICAgICBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCJcXHJcXG4gICAgfSwge1xcclxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJsaW5lX2JsYW5rXFxcIlxcclxcbiAgICB9LCB7XFxyXFxuICAgICAgICB0aXRsZTogaS5jb250ZW50LnJlcGxhY2UoLzxkaXZcXFxccypbXj5dKj4oLio/KTxcXFxcL2Rpdj4vZywgXFxcIiQxXFxcIikgKyAoaS5pc19vcmlnaW5hbCA/ICc8c21hbGw+PGZvbnQgY29sb3I9XFxcImdyZXlcXFwiPiZjb3B5O+acrOaWh+eJiOadg+W9kuivpeS9nOiAheaJgOacie+8jOS7u+S9leW9ouW8j+i9rOi9veivt+iBlOezu+S9nOiAheOAgjwvZm9udD48L3NtYWxsPicgOiBcXFwiXFxcIiksXFxyXFxuICAgICAgICBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCJcXHJcXG4gICAgfV07XFxyXFxuXFxyXFxuICAgIHNldEhvbWVSZXN1bHQoe1xcclxcbiAgICAgICAgZGF0YTogcy5jb25jYXQobylcXHJcXG4gICAgfSlcXHJcXG59XFxyXFxuXFxyXFxuLy/liafor4Tlm57lpI3pobXpnaJcXHJcXG5mdW5jdGlvbiBkcmFtYVJldmlld1JlcGx5VmlldyhpZCkge1xcclxcbiAgICBzZXRQYWdlVGl0bGUoJ+WbnuWkjeivpuaDhScpO1xcclxcbiAgICBsZXQgdCA9IGdldERvdWJhblJlcyhcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9yZXZpZXcvY29tbWVudC9cXFwiICsgaWQgKyBcXFwiL3JlcGxpZXNcXFwiKTtcXHJcXG4gICAgbGV0IGkgPSBbXTtcXHJcXG4gICAgdC5yZXBsaWVzLmZvckVhY2goKGUgPT4ge1xcclxcbiAgICAgICAgaS5wdXNoKHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogZS5hdXRob3IubmFtZSxcXHJcXG4gICAgICAgICAgICBpbWc6IGUuYXV0aG9yLmF2YXRhcixcXHJcXG4gICAgICAgICAgICB1cmw6IGUuYXV0aG9yLnVybCxcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImF2YXRhclxcXCJcXHJcXG4gICAgICAgIH0pXFxyXFxuICAgICAgICBpLnB1c2goe1xcclxcbiAgICAgICAgICAgIHRpdGxlOiAoZS5yZWZfY29tbWVudC5oYXNfcmVmID8gJ+WbnuWkjUA8Zm9udCBjb2xvcj1cXFwiYmx1ZVxcXCI+JyArIGUucmVmX2NvbW1lbnQuYXV0aG9yLm5hbWUgKyBcXFwiPC9mb250Pu+8mlxcXCIgOiBcXFwiXFxcIikgKyBlLnRleHQsXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiXFxyXFxuICAgICAgICB9KVxcclxcbiAgICAgICAgaS5wdXNoKHtcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImxpbmVcXFwiXFxyXFxuICAgICAgICB9KVxcclxcbiAgICB9KSlcXHJcXG5cXHJcXG4gICAgc2V0SG9tZVJlc3VsdCh7XFxyXFxuICAgICAgICBkYXRhOiBpXFxyXFxuICAgIH0pXFxyXFxufVxcclxcblxcclxcbi8v55u45YWz5o6o6I2Q6aG16Z2iXFxyXFxuZnVuY3Rpb24gcmVjb21tZW5kYXRpb25zKHR5cGUsIGlkKXtcXHJcXG4gICAgc2V0UGFnZVRpdGxlKCfnm7jlhbPmjqjojZAnKTtcXHJcXG4gICAgbGV0IHJlcyA9IGdldERvdWJhblJlcyhcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9cXFwiKyB0eXBlICsgXFxcIi9cXFwiICsgaWQgKyBcXFwiL3JlY29tbWVuZGF0aW9uc1xcXCIpO1xcclxcbiAgICBsZXQgZGV0YWlsc1ZpZXdDb25maWdzID0gZ2V0Q29uZmlnKCdkZXRhaWxzVmlld0NvbmZpZ3MnKTtcXHJcXG4gICAgbGV0IGkgPSByZXMubWFwKChlID0+IHtcXHJcXG4gICAgICAgIGxldCB0eXBlID0gZS50eXBlLFxcclxcbiAgICAgICAgICAgIGlkID0gZS5pZCxcXHJcXG4gICAgICAgICAgICB0aXRsZSA9IGUudGl0bGU7XFxyXFxuICAgICAgICBsZXQgdXNlQ29uZmlnID0gZGV0YWlsc1ZpZXdDb25maWdzW2RldGFpbHNWaWV3Q29uZmlncy51c2VdLmNvbmZpZztcXHJcXG4gICAgICAgIGxldCB1cmxQYXJhbXMgPSB7fTtcXHJcXG4gICAgICAgIGlmICh1c2VDb25maWcuc3RhcnRzV2l0aCgneycpKSB7XFxyXFxuICAgICAgICAgICAgZXZhbCgndXJsUGFyYW1zID0gJyArIHVzZUNvbmZpZyk7XFxyXFxuICAgICAgICB9IGVsc2Uge1xcclxcbiAgICAgICAgICAgIHVybFBhcmFtcy51cmwgPSAkKFxcXCJoaWtlcjovL2VtcHR5I25vSGlzdG9yeSMjaW1tZXJzaXZlVGhlbWUjXFxcIiArICc/dHlwZT0nICsgdHlwZSArICcmaWQ9JyArIGlkKS5ydWxlKCh0eXBlLCBpZCwgdGl0bGUsIHVzZUNvbmZpZykgPT4ge1xcclxcbiAgICAgICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxyXFxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcXFwicGxheWxpc3RcXFwiKSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBkb3VMaXN0KGlkLCBNWV9QQUdFLCA1MCk7XFxyXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBldmFsKHVzZUNvbmZpZyk7XFxyXFxuICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICB9LCB0eXBlLCBpZCwgdGl0bGUsIHVzZUNvbmZpZyk7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICByZXR1cm4ge1xcclxcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcXHJcXG4gICAgICAgICAgICB1cmw6IHVybFBhcmFtcy51cmwsXFxyXFxuICAgICAgICAgICAgZXh0cmE6IHVybFBhcmFtcy5leHRyYSxcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzMnLFxcclxcbiAgICAgICAgICAgIGltZzogZS5waWMgPyBlLnBpYy5ub3JtYWwgKyBcXFwiQFJlZmVyZXI9XFxcIiArIGUucGljLm5vcm1hbCA6IGUuY292ZXIudXJsICsgJ0BSZWZlcmVyPScgKyBlLmNvdmVyLnVybCxcXHJcXG4gICAgICAgICAgICBkZXNjOiBlLm51bGxfcmF0aW5nX3JlYXNvbiB8fCBlLnJhdGluZy52YWx1ZVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9KSk7XFxyXFxuXFxyXFxuICAgIHNldEhvbWVSZXN1bHQoe1xcclxcbiAgICAgICAgZGF0YTogaVxcclxcbiAgICB9KVxcclxcbn1cXHJcXG5cXHJcXG4vL+W9seeJh+ivpuaDhemhtemdolxcclxcbmZ1bmN0aW9uIGRldGFpbHNWaWV3KHR5cGUsIGlkKSB7XFxyXFxuICAgIGxldCBpID0gZ2V0RG91YmFuUmVzKFxcXCJodHRwczovL2Zyb2RvLmRvdWJhbi5jb20vYXBpL3YyL1xcXCIgKyB0eXBlICsgXFxcIi9cXFwiICsgaWQpO1xcclxcbiAgICBzZXRQYWdlVGl0bGUoaS50aXRsZSk7XFxyXFxuICAgIGxldCBpbmZvID0gXFxcIlxcXCI7XFxyXFxuICAgIGlmIChpLmlzX3R2KSB7XFxyXFxuICAgICAgICBpbmZvID0gW2kuY291bnRyaWVzID8gaS5jb3VudHJpZXMuam9pbihcXFwiIFxcXCIpIDogbnVsbCwgaS5nZW5yZXMgPyBpLmdlbnJlcy5qb2luKFxcXCIgXFxcIikgOiBudWxsLCBpLnB1YmRhdGUgPyBpLnB1YmRhdGVbMF0gKyBcXFwi6aaW5pKtXFxcIiA6IG51bGwsIGkuZXBpc29kZXNfY291bnQgPyBcXFwi5YWxXFxcIiArIGkuZXBpc29kZXNfY291bnQgKyBcXFwi6ZuGXFxcIiA6IG51bGwsIGkuZHVyYXRpb25zID8gXFxcIuWNlembhueJh+mVv1xcXCIgKyBpLmR1cmF0aW9ucyA6IG51bGxdLmZpbHRlcigoZSA9PiBudWxsICE9PSBlKSkuam9pbihcXFwiIC8gXFxcIik7XFxyXFxuICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICBpbmZvID0gW2kuY291bnRyaWVzID8gaS5jb3VudHJpZXMuam9pbihcXFwiIFxcXCIpIDogbnVsbCwgaS5nZW5yZXMgPyBpLmdlbnJlcy5qb2luKFxcXCIgXFxcIikgOiBudWxsLCBpLnB1YmRhdGUgPyBpLnB1YmRhdGVbMF0gKyBcXFwi6aaW5pKtXFxcIiA6IG51bGwsIGkuZHVyYXRpb25zID8gXFxcIueJh+mVv1xcXCIgKyBpLmR1cmF0aW9ucyA6IG51bGxdLmZpbHRlcigoZSA9PiBudWxsICE9PSBlKSkuam9pbihcXFwiIC8gXFxcIik7XFxyXFxuICAgIH1cXHJcXG4gICAgbGV0IGluZm9JdGVtcyA9IFt7XFxyXFxuICAgICAgICB0aXRsZTogaS50aXRsZSArIFxcXCJcXFxcblxcXCIgKyBpLm9yaWdpbmFsX3RpdGxlICsgXFxcIihcXFwiICsgaS55ZWFyICsgXFxcIilcXFwiLFxcclxcbiAgICAgICAgZGVzYzogaW5mbyB8fCBpLmNhcmRfc3VidGl0bGUsXFxyXFxuICAgICAgICBpbWc6IGkucGljLm5vcm1hbCArIFxcXCJAUmVmZXJlcj1cXFwiICsgaS5waWMubm9ybWFsLFxcclxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJtb3ZpZV8xX3ZlcnRpY2FsX3BpY19ibHVyXFxcIixcXHJcXG4gICAgICAgIHVybDogJ2hpa2VyOi8vcGFnZS9zZXR0aW5nUGFnZT92aWV3PWFuYWx5c2lzU2V0dGluZ01vZHVsZSNub0hpc3RvcnkjJyxcXHJcXG4gICAgICAgIGV4dHJhOiB7XFxyXFxuICAgICAgICAgICAgbmV3V2luZG93OiB0cnVlLFxcclxcbiAgICAgICAgICAgIHdpbmRvd0lkOiAn6auY57qn5Yqf6IO9JyxcXHJcXG4gICAgICAgICAgICBncmFkaWVudDogdHJ1ZVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XTtcXHJcXG5cXHJcXG4gICAgbGV0IHJhdGluZyA9IFxcXCJcXFwiO1xcclxcbiAgICBpZiAoaS5yYXRpbmcpIHtcXHJcXG4gICAgICAgIHJhdGluZyA9IGNvbXB1dGVSYXRpbmcoaS5yYXRpbmcubWF4LCBpLnJhdGluZy52YWx1ZSk7XFxyXFxuICAgIH1cXHJcXG4gICAgbGV0IHJhdGluZ0l0ZW1zID0gW107XFxyXFxuICAgIGxldCBjb2xvciA9IGdldENvbmZpZygnc3RhckNvbG9yJyk7XFxyXFxuICAgIGxldCByYXRpbmdUaXRsZSA9ICcnXFxyXFxuICAgIGlmIChyYXRpbmcpIHtcXHJcXG4gICAgICAgIHJhdGluZ1RpdGxlID0gJ+ixhueTo+ivhOWIhuKEoicuYmlnKCkuYm9sZCgpICsgJzxicj4nICsgcmF0aW5nLmZvbnRjb2xvcihjb2xvcikgKyAnJm5ic3A7Jm5ic3A7JyArIChpLnJhdGluZy52YWx1ZS50b0ZpeGVkKDEpICsgJ+WIhicpLmJpZygpLmJvbGQoKTtcXHJcXG4gICAgfSBlbHNlIHtcXHJcXG4gICAgICAgIHJhdGluZ1RpdGxlID0gJ+aaguaXoOivhOWIhicuYmlnKCkuYm9sZCgpICsgJzxicj4nICsgJ+eCueaIkeafpeeci+W9seeJh+S/oeaBrycuZm9udGNvbG9yKCdncmV5Jyk7XFxyXFxuICAgIH1cXHJcXG4gICAgcmF0aW5nSXRlbXMgPSBbe1xcclxcbiAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ0nICsgcmF0aW5nVGl0bGUsXFxyXFxuICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfY2VudGVyXzFcXFwiLFxcclxcbiAgICAgICAgZXh0cmE6IHtcXHJcXG4gICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXHJcXG4gICAgICAgIH0sXFxyXFxuICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkvIy8kcGFnZXtmeXBhZ2V9I25vSGlzdG9yeSMnKS5ydWxlKCh0eXBlLCBpZCwgcmF0aW5nQ291bnQpID0+IHtcXHJcXG4gICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxyXFxuICAgICAgICAgICAgcmF0aW5nKHR5cGUsIGlkLCByYXRpbmdDb3VudCk7XFxyXFxuICAgICAgICB9LCBpLnN1YnR5cGUsIGkuaWQsIGkucmF0aW5nID8gaS5yYXRpbmcuY291bnQgOiAwKVxcclxcbiAgICB9XTtcXHJcXG5cXHJcXG4gICAgbGV0IHJlbGF0ZWRJdGVtcyA9IFt7XFxyXFxuICAgICAgICB0aXRsZTogXFxcIuWJp+eFp1xcXCIsXFxyXFxuICAgICAgICBpbWc6IFxcXCJodHRwczovL2dpdGNvZGUubmV0L3FxXzQxODQ2NzU2L2hpa2VyLy0vcmF3L21hc3Rlci9pbWcv5Ymn54WnLnBuZ1xcXCIsXFxyXFxuICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkvIy8kcGFnZXtmeXBhZ2V9I25vSGlzdG9yeSMnKS5ydWxlKCh0KSA9PiB7XFxyXFxuICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcclxcbiAgICAgICAgICAgIHN0aWxsc0xpc3QodFswXSwgdFsxXSk7XFxyXFxuICAgICAgICB9LCBbaS5zdWJ0eXBlLCBpLmlkXSksXFxyXFxuICAgICAgICBjb2xfdHlwZTogXFxcImljb25fcm91bmRfc21hbGxfNFxcXCJcXHJcXG4gICAgfSwge1xcclxcbiAgICAgICAgdGl0bGU6IFxcXCLmvJTogYxcXFwiLFxcclxcbiAgICAgICAgaW1nOiBcXFwiaHR0cHM6Ly9naXRjb2RlLm5ldC9xcV80MTg0Njc1Ni9oaWtlci8tL3Jhdy9tYXN0ZXIvaW1nL+a8lOiBjC5wbmdcXFwiLFxcclxcbiAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5LyMvJHBhZ2V7ZnlwYWdlfSNub0hpc3RvcnkjJykucnVsZSgodCkgPT4ge1xcclxcbiAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtcXHJcXG4gICAgICAgICAgICBjcmVkaXRzKHRbMF0sIHRbMV0pO1xcclxcbiAgICAgICAgfSwgW2kuc3VidHlwZSwgaS5pZF0pLFxcclxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJpY29uX3JvdW5kX3NtYWxsXzRcXFwiXFxyXFxuICAgIH0sIHtcXHJcXG4gICAgICAgIHRpdGxlOiBcXFwi55+t6K+EXFxcIixcXHJcXG4gICAgICAgIGltZzogXFxcImh0dHBzOi8vZ2l0Y29kZS5uZXQvcXFfNDE4NDY3NTYvaGlrZXIvLS9yYXcvbWFzdGVyL2ltZy/nn63or4QucG5nXFxcIixcXHJcXG4gICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eS8jLyRwYWdle2Z5cGFnZX0jbm9IaXN0b3J5IycpLnJ1bGUoKHQpID0+IHtcXHJcXG4gICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxyXFxuICAgICAgICAgICAgc2hvcnRDb21tZW50TGlzdCh0WzBdLCB0WzFdKTtcXHJcXG4gICAgICAgIH0sIFtpLnN1YnR5cGUsIGkuaWRdKSxcXHJcXG4gICAgICAgIGNvbF90eXBlOiBcXFwiaWNvbl9yb3VuZF9zbWFsbF80XFxcIlxcclxcbiAgICB9LCB7XFxyXFxuICAgICAgICB0aXRsZTogXFxcIuWJp+ivhFxcXCIsXFxyXFxuICAgICAgICBpbWc6IFxcXCJodHRwczovL2dpdGNvZGUubmV0L3FxXzQxODQ2NzU2L2hpa2VyLy0vcmF3L21hc3Rlci9pbWcv5Ymn6K+ELnBuZ1xcXCIsXFxyXFxuICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkvIy8kcGFnZXtmeXBhZ2V9I25vSGlzdG9yeSMnKS5ydWxlKCh0KSA9PiB7XFxyXFxuICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcclxcbiAgICAgICAgICAgIGRyYW1hUmV2aWV3TGlzdCh0WzBdLCB0WzFdKTtcXHJcXG4gICAgICAgIH0sIFtpLnN1YnR5cGUsIGkuaWRdKSxcXHJcXG4gICAgICAgIGNvbF90eXBlOiBcXFwiaWNvbl9yb3VuZF9zbWFsbF80XFxcIlxcclxcbiAgICB9XTtcXHJcXG5cXHJcXG4gICAgbGV0IGludHJvSXRlbXMgPSBbXTtcXHJcXG4gICAgaWYgKGkuaW50cm8pIHtcXHJcXG4gICAgICAgIGludHJvSXRlbXMgPSBbe1xcclxcbiAgICAgICAgICAgIHRpdGxlOiBcXFwi4oCc4oCc4oCd4oCdPGJpZz48c3Ryb25nPuWJp+aDheeugOS7izwvc3Ryb25nPjwvYmlnPlxcXCIsXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXHJcXG4gICAgICAgICAgICBleHRyYToge1xcclxcbiAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXHJcXG4gICAgICAgICAgICB9LFxcclxcbiAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknXFxyXFxuICAgICAgICB9LCB7XFxyXFxuICAgICAgICAgICAgdGl0bGU6IFxcXCImbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDtcXFwiICsgaS5pbnRyby5yZXBsYWNlKC9cXFxcbi9nLCBcXFwiPGJyLz4mbmJzcDsmbmJzcDsmbmJzcDsmbmJzcDtcXFwiKS5yZXBsYWNlKC9cXFxccy9nLCBcXFwiIFxcXCIpLnJlcGxhY2UoL1xcXFx0L2csIFxcXCIgXFxcIiksXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiXFxyXFxuICAgICAgICB9XVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIGxldCB2aWRlb1JlbGF0ZWRJdGVtcyA9IFtdO1xcclxcbiAgICBpZiAoaS50cmFpbGVyKSB7XFxyXFxuICAgICAgICB2aWRlb1JlbGF0ZWRJdGVtcy5wdXNoKHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogXFxcIuKAnOKAnOKAneKAnTxiaWc+PHN0cm9uZz7pooTlkYo8L3N0cm9uZz48L2JpZz5cXFwiLFxcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF9jZW50ZXJfMVxcXCIsXFxyXFxuICAgICAgICAgICAgZXh0cmE6IHtcXHJcXG4gICAgICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlXFxyXFxuICAgICAgICAgICAgfSxcXHJcXG4gICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5J1xcclxcbiAgICAgICAgfSk7XFxyXFxuICAgICAgICB2aWRlb1JlbGF0ZWRJdGVtcy5wdXNoKHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogaS50cmFpbGVyLnRpdGxlLFxcclxcbiAgICAgICAgICAgIGltZzogaS50cmFpbGVyLmNvdmVyX3VybCxcXHJcXG4gICAgICAgICAgICB1cmw6IGkudHJhaWxlci52aWRlb191cmwsXFxyXFxuICAgICAgICAgICAgZGVzYzogaS50cmFpbGVyLnN1YmplY3RfdGl0bGUgKyBcXFwi4oCiXFxcIiArIGkudHJhaWxlci5jcmVhdGVfdGltZSxcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcIm1vdmllXzJcXFwiXFxyXFxuICAgICAgICB9KTtcXHJcXG4gICAgICAgIHZpZGVvUmVsYXRlZEl0ZW1zLnB1c2goe1xcclxcbiAgICAgICAgICAgIHRpdGxlOiAn5p+l55yL5pu05aSaJyxcXHJcXG4gICAgICAgICAgICBpbWc6IFxcXCJodHRwczovL2dpdGNvZGUubmV0L3FxXzQxODQ2NzU2L2hpa2VyLy0vcmF3L21hc3Rlci9pbWcvbW9yZS5wbmdcXFwiLFxcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwibW92aWVfMlxcXCIsXFxyXFxuICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5LyMvJHBhZ2V7ZnlwYWdlfSNub0hpc3RvcnkjJykucnVsZSgodCkgPT4ge1xcclxcbiAgICAgICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxyXFxuICAgICAgICAgICAgICAgIHRyYWlsZXJzKHRbMF0sIHRbMV0pO1xcclxcbiAgICAgICAgICAgIH0sIFtpLnN1YnR5cGUsIGkuaWRdKSxcXHJcXG4gICAgICAgIH0pO1xcclxcbiAgICB9XFxyXFxuICAgIGlmIChpLnZpZGVvKSB7XFxyXFxuICAgICAgICB2aWRlb1JlbGF0ZWRJdGVtcy5wdXNoKHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogXFxcIuKAnOKAnOKAneKAnTxiaWc+PHN0cm9uZz7op4bpopHor4Torro8L3N0cm9uZz48L2JpZz5cXFwiLFxcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF9jZW50ZXJfMVxcXCIsXFxyXFxuICAgICAgICAgICAgZXh0cmE6IHtcXHJcXG4gICAgICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlXFxyXFxuICAgICAgICAgICAgfSxcXHJcXG4gICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5J1xcclxcbiAgICAgICAgfSk7XFxyXFxuICAgICAgICB2aWRlb1JlbGF0ZWRJdGVtcy5wdXNoKHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogaS52aWRlby50aXRsZSxcXHJcXG4gICAgICAgICAgICBpbWc6IGkudmlkZW8uY292ZXJfdXJsICsgXFxcIkBSZWZlcmVyPVxcXCIgKyBpLnZpZGVvLmNvdmVyX3VybCxcXHJcXG4gICAgICAgICAgICB1cmw6IGkudmlkZW8udmlkZW9fdXJsLFxcclxcbiAgICAgICAgICAgIGRlc2M6IGkudmlkZW8uYXV0aG9yLm5hbWUgKyBcXFwi4oCiXFxcIiArIGkudmlkZW8uY3JlYXRlX3RpbWUsXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJtb3ZpZV8yXFxcIlxcclxcbiAgICAgICAgfSk7XFxyXFxuICAgICAgICB2aWRlb1JlbGF0ZWRJdGVtcy5wdXNoKHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogJ+afpeeci+abtOWkmicsXFxyXFxuICAgICAgICAgICAgaW1nOiBcXFwiaHR0cHM6Ly9naXRjb2RlLm5ldC9xcV80MTg0Njc1Ni9oaWtlci8tL3Jhdy9tYXN0ZXIvaW1nL21vcmUucG5nXFxcIixcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcIm1vdmllXzJcXFwiLFxcclxcbiAgICAgICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eS8jLyRwYWdle2Z5cGFnZX0jbm9IaXN0b3J5IycpLnJ1bGUoKHQpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcclxcbiAgICAgICAgICAgICAgICB2aWRlb0NvbW1lbnQodFswXSwgdFsxXSk7XFxyXFxuICAgICAgICAgICAgfSwgW2kuc3VidHlwZSwgaS5pZF0pLFxcclxcbiAgICAgICAgfSk7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgbGV0IGNvbmZpZyA9IEpTT04ucGFyc2UoZmV0Y2goZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSkpO1xcclxcblxcclxcbiAgICBsZXQgYW5hbHlzaXNDb25maWdzID0gZ2V0Q29uZmlnKCdhbmFseXNpc0NvbmZpZ3MnLCBjb25maWcpO1xcclxcbiAgICBsZXQgZXh0cmFDb25maWcgPSBhbmFseXNpc0NvbmZpZ3NbYW5hbHlzaXNDb25maWdzLnVzZV0uZXh0cmEgfHwgJ3t9JztcXHJcXG4gICAgbGV0IGV4dHJhID0ge307XFxyXFxuICAgIHRyeSB7XFxyXFxuICAgICAgICBpZiAoZXh0cmFDb25maWcuc3RhcnRzV2l0aCgneycpKSBldmFsKCdleHRyYT0nICsgZXh0cmFDb25maWcpO1xcclxcbiAgICB9IGNhdGNoIChlKSB7fVxcclxcbiAgICBsZXQgdmlkZW9JdGVtcyA9IFtdO1xcclxcbiAgICB2aWRlb1VybHNNb2R1bGUodmlkZW9JdGVtcywgdHlwZSwgaWQsIFsnaWNvbl8yJywgJ2ljb25fc21hbGxfNCddLCBwYXJzZVZpZGVvVXJsTGF6eSwgaSwgZXh0cmEpO1xcclxcbiAgICBpZiAodmlkZW9JdGVtcy5sZW5ndGggPiAwKSB7XFxyXFxuICAgICAgICB2aWRlb0l0ZW1zLnVuc2hpZnQoe1xcclxcbiAgICAgICAgICAgIHRpdGxlOiBcXFwi4oCc4oCc4oCd4oCdPGJpZz48c3Ryb25nPuWcqOe6v+inguecizwvc3Ryb25nPjwvYmlnPlxcXCIsXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXHJcXG4gICAgICAgICAgICBleHRyYToge1xcclxcbiAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXHJcXG4gICAgICAgICAgICB9LFxcclxcbiAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknXFxyXFxuICAgICAgICB9KVxcclxcbiAgICB9IGVsc2Uge1xcclxcbiAgICAgICAgdmlkZW9JdGVtcy51bnNoaWZ0KHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogXFxcIuKAnOKAnOKAneKAnTxiaWc+PHN0cm9uZz7lsJrml6DniYfmupA8L3N0cm9uZz48L2JpZz5cXFwiLFxcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF9jZW50ZXJfMVxcXCIsXFxyXFxuICAgICAgICAgICAgZXh0cmE6IHtcXHJcXG4gICAgICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlXFxyXFxuICAgICAgICAgICAgfSxcXHJcXG4gICAgICAgICAgICB1cmw6ICd0b2FzdDovL+ecn+eahOayoeeJh+a6kCdcXHJcXG4gICAgICAgIH0pXFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgbGV0IHF1aWNrU2VhcmNoQ29uZmlncyA9IGdldENvbmZpZygncXVpY2tTZWFyY2hDb25maWdzJywgY29uZmlnKTtcXHJcXG4gICAgbGV0IHF1aWNrU2VhcmNoSXRlbXMgPSBbXTtcXHJcXG4gICAgcXVpY2tTZWFyY2hDb25maWdzLm9yZGVyLmZvckVhY2gocXVpY2tTZWFyY2hJdGVtID0+IHtcXHJcXG4gICAgICAgIGlmIChxdWlja1NlYXJjaENvbmZpZ3NbcXVpY2tTZWFyY2hJdGVtXSkge1xcclxcbiAgICAgICAgICAgIHF1aWNrU2VhcmNoSXRlbXMucHVzaCh7XFxyXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBxdWlja1NlYXJjaEl0ZW0sXFxyXFxuICAgICAgICAgICAgICAgIGltZzogcXVpY2tTZWFyY2hDb25maWdzW3F1aWNrU2VhcmNoSXRlbV0ucGljLFxcclxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogcXVpY2tTZWFyY2hDb25maWdzLm1vZGUgfHwgJ2ljb25fc21hbGxfNCcsXFxyXFxuICAgICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vc2VhcmNoP3M9JyArIGkudGl0bGUgKyAnJnJ1bGU9JyArIHF1aWNrU2VhcmNoQ29uZmlnc1txdWlja1NlYXJjaEl0ZW1dLm5hbWVcXHJcXG4gICAgICAgICAgICB9KVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9KVxcclxcbiAgICBpZiAocXVpY2tTZWFyY2hJdGVtcy5sZW5ndGggPiAwKSB7XFxyXFxuICAgICAgICBxdWlja1NlYXJjaEl0ZW1zLnVuc2hpZnQoe1xcclxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ+KAnOKAnOKAneKAnTxzdHJvbmc+PGJpZz7lv6vpgJ/mkJzntKI8L2JpZz48L3N0cm9uZz4nLFxcclxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnLFxcclxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcclxcbiAgICAgICAgICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlXFxyXFxuICAgICAgICAgICAgICAgIH0sXFxyXFxuICAgICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknXFxyXFxuICAgICAgICAgICAgfSlcXHJcXG4gICAgICAgICAgICAvKnF1aWNrU2VhcmNoSXRlbXMudW5zaGlmdCh7XFxyXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZSdcXHJcXG4gICAgICAgICAgICB9KSovXFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgc2V0SG9tZVJlc3VsdCh7XFxyXFxuICAgICAgICBkYXRhOiBpbmZvSXRlbXMuY29uY2F0KHJhdGluZ0l0ZW1zKVxcclxcbiAgICAgICAgICAgIC5jb25jYXQocmVsYXRlZEl0ZW1zKVxcclxcbiAgICAgICAgICAgIC5jb25jYXQoe1xcclxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2xpbmUnXFxyXFxuICAgICAgICAgICAgfSlcXHJcXG4gICAgICAgICAgICAuY29uY2F0KHF1aWNrU2VhcmNoSXRlbXMpXFxyXFxuICAgICAgICAgICAgLmNvbmNhdCh7XFxyXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZSdcXHJcXG4gICAgICAgICAgICB9KVxcclxcbiAgICAgICAgICAgIC5jb25jYXQodmlkZW9JdGVtcylcXHJcXG4gICAgICAgICAgICAuY29uY2F0KHtcXHJcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xcclxcbiAgICAgICAgICAgIH0pXFxyXFxuICAgICAgICAgICAgLmNvbmNhdCh2aWRlb1JlbGF0ZWRJdGVtcylcXHJcXG4gICAgICAgICAgICAuY29uY2F0KHtcXHJcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xcclxcbiAgICAgICAgICAgIH0pXFxyXFxuICAgICAgICAgICAgLmNvbmNhdChpbnRyb0l0ZW1zKVxcclxcbiAgICAgICAgICAgIC5jb25jYXQoe1xcclxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2xpbmUnLFxcclxcbiAgICAgICAgICAgICAgICBleHRyYTp7XFxyXFxuICAgICAgICAgICAgICAgICAgaWQ6ICdyZWNvbW1lbmRhdGlvbnMnXFxyXFxuICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICB9KVxcclxcbiAgICAgICAgICAgIC5jb25jYXQoe1xcclxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnLFxcclxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ+KAnOKAnOKAneKAnTxzbWFsbD48Zm9udCBjb2xvcj0jODcxZjc4PuS7peS4iuaVsOaNruadpea6kOS6juixhueTo++8jOWmguaCqOWWnOasou+8jOivt+S4i+i9veWumOaWuWFwcDwvZm9udD48L3NtYWxsPicsXFxyXFxuICAgICAgICAgICAgICAgIGRlc2M6ICfigJzigJzigJ3igJ08c21hbGw+PGZvbnQgY29sb3I9I2YyMGMwMD7mraTop4TliJnku4XpmZDlrabkuaDkuqTmtYHkvb/nlKjvvIzor7fkuo7lr7zlhaXlkI4yNOWwj+aXtuWGheWIoOmZpO+8jOS7u+S9lee7hOe7h+aIluS4quS6uuS4jeW+l+S7peS7u+S9leaWueW8j+aWueazleS8oOaSreatpOinhOWImeeahOaVtOS9k+aIlumDqOWIhu+8gTwvZm9udD48L3NtYWxsPicsXFxyXFxuICAgICAgICAgICAgICAgIHVybDogJ2h0dHBzOi8vbW92aWUuZG91YmFuLmNvbS9zdWJqZWN0LycgKyBpZCArICcvJyxcXHJcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgfSlcXHJcXG4gICAgfSlcXHJcXG4gICAgYmUoW3tcXHJcXG4gICAgICAgIGZ1bmM6IGZ1bmN0aW9uKG9iail7XFxyXFxuICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcclxcbiAgICAgICAgICAgIGxldCByZXMgPSBnZXREb3ViYW5SZXMob2JqLnVybCk7XFxyXFxuICAgICAgICAgICAgXFxyXFxuICAgICAgICAgICAgbGV0IGRldGFpbHNWaWV3Q29uZmlncyA9IGdldENvbmZpZygnZGV0YWlsc1ZpZXdDb25maWdzJyk7XFxyXFxuICAgICAgICAgICAgbGV0IGwgPSBbcmVzWzBdLHJlc1sxXSxyZXNbMl1dO1xcclxcbiAgICAgICAgICAgIGxldCBpID0gbC5tYXAoKGUgPT4ge1xcclxcbiAgICAgICAgICAgICAgICBsZXQgdHlwZSA9IGUudHlwZSxcXHJcXG4gICAgICAgICAgICAgICAgICAgIGlkID0gZS5pZCxcXHJcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlID0gZS50aXRsZTtcXHJcXG4gICAgICAgICAgICAgICAgbGV0IHVzZUNvbmZpZyA9IGRldGFpbHNWaWV3Q29uZmlnc1tkZXRhaWxzVmlld0NvbmZpZ3MudXNlXS5jb25maWc7XFxyXFxuICAgICAgICAgICAgICAgIGxldCB1cmxQYXJhbXMgPSB7fTtcXHJcXG4gICAgICAgICAgICAgICAgaWYgKHVzZUNvbmZpZy5zdGFydHNXaXRoKCd7JykpIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGV2YWwoJ3VybFBhcmFtcyA9ICcgKyB1c2VDb25maWcpO1xcclxcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcclxcbiAgICAgICAgICAgICAgICAgICAgdXJsUGFyYW1zLnVybCA9ICQoXFxcImhpa2VyOi8vZW1wdHkjbm9IaXN0b3J5IyNpbW1lcnNpdmVUaGVtZSNcXFwiICsgJz90eXBlPScgKyB0eXBlICsgJyZpZD0nICsgaWQpLnJ1bGUoKHR5cGUsIGlkLCB0aXRsZSwgdXNlQ29uZmlnKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcXFwicGxheWxpc3RcXFwiKSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvdUxpc3QoaWQsIE1ZX1BBR0UsIDUwKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmFsKHVzZUNvbmZpZyk7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICAgICAgfSwgdHlwZSwgaWQsIHRpdGxlLCB1c2VDb25maWcpO1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgIHJldHVybiB7XFxyXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsXFxyXFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHVybFBhcmFtcy51cmwsXFxyXFxuICAgICAgICAgICAgICAgICAgICBleHRyYTogdXJsUGFyYW1zLmV4dHJhLFxcclxcbiAgICAgICAgICAgICAgICAgICAgaW1nOiBlLnBpYyA/IGUucGljLm5vcm1hbCArIFxcXCJAUmVmZXJlcj1cXFwiICsgZS5waWMubm9ybWFsIDogZS5jb3Zlci51cmwgKyAnQFJlZmVyZXI9JyArIGUuY292ZXIudXJsLFxcclxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogZS5udWxsX3JhdGluZ19yZWFzb24gfHwgZS5yYXRpbmcudmFsdWVcXHJcXG4gICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIH0pKTtcXHJcXG4gICAgICAgICAgICBhZGRJdGVtQWZ0ZXIoJ3JlY29tbWVuZGF0aW9ucycsIGlbMl0pO1xcclxcbiAgICAgICAgICAgIGFkZEl0ZW1BZnRlcigncmVjb21tZW5kYXRpb25zJywgaVsxXSk7XFxyXFxuICAgICAgICAgICAgYWRkSXRlbUFmdGVyKCdyZWNvbW1lbmRhdGlvbnMnLCBpWzBdKTtcXHJcXG4gICAgICAgICAgICBhZGRJdGVtQWZ0ZXIoJ3JlY29tbWVuZGF0aW9ucycsIHtcXHJcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLigJzigJzigJ3igJ08YmlnPjxzdHJvbmc+55u45YWz5o6o6I2QPC9zdHJvbmc+PC9iaWc+XFxcIixcXHJcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXHJcXG4gICAgICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5LyNub0hpc3RvcnkjJykucnVsZSgodCkgPT4ge1xcclxcbiAgICAgICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgcmVjb21tZW5kYXRpb25zKHRbMF0sIHRbMV0pO1xcclxcbiAgICAgICAgICAgICAgICB9LCBbb2JqLnR5cGUsIG9iai5pZF0pLFxcclxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcclxcbiAgICAgICAgICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlXFxyXFxuICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICB9KVxcclxcbiAgICAgICAgICAgIHVwZGF0ZUl0ZW0oJ3JlY29tbWVuZGF0aW9ucycse2NvbF90eXBlOiAnbGluZScsZXh0cmE6e2lkOidub29vcCd9fSlcXHJcXG4gICAgICAgIH0sXFxyXFxuICAgICAgICBwYXJhbToge1xcclxcbiAgICAgICAgICAgIHVybDogXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvXFxcIiArIHR5cGUgKyBcXFwiL1xcXCIgKyBpZCArIFxcXCIvcmVjb21tZW5kYXRpb25zXFxcIixcXHJcXG4gICAgICAgICAgICB0eXBlOiB0eXBlLFxcclxcbiAgICAgICAgICAgIGlkOiBpZFxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XSlcXHJcXG59XFxyXFxuXFxyXFxuLy/mjqjojZBcXHJcXG5mdW5jdGlvbiBmaW5kTGlzdChwYWdlLCBjb3VudCkge1xcclxcbiAgICBpZiAoIWdldE15VmFyKCdmaW5kTGlzdCcpKSBwdXRNeVZhcignZmluZExpc3QnLCAne1xcXCJpdGVtXFxcIjpcXFwibW92aWVcXFwiLFxcXCJwbGF5YWJsZVxcXCI6XFxcIjBcXFwiLFxcXCJzY29yZVxcXCI6XFxcIjAsMTBcXFwifScpO1xcclxcbiAgICBsZXQgYSA9IFtdO1xcclxcbiAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2ZpbmRMaXN0JykpO1xcclxcbiAgICBsZXQgY29sb3IgPSBnZXRDb25maWcoJ2Nob29zZUNvbG9yJyk7XFxyXFxuXFxyXFxuICAgIGxldCBpdGVtcyA9IHtcXHJcXG4gICAgICAgIOeUteW9sTogJ21vdmllJyxcXHJcXG4gICAgICAgIOeUteinhuWJpzogJ3R2J1xcclxcbiAgICB9XFxyXFxuICAgIGZvciAoaSBpbiBpdGVtcykge1xcclxcbiAgICAgICAgYS5wdXNoKHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogdGVtcC5pdGVtID09PSBpdGVtc1tpXSA/ICfigJzigJzigJ3igJ08Yj4gPGZvbnQgY29sb3I9JyArIGNvbG9yICsgJz4nICsgaSArICcgPC9mb250PjwvYj4nIDogaSxcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcclxcbiAgICAgICAgICAgIHVybDogJCgnaGlrZXI6IC8vZW1wdHkjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChlKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcignZmluZExpc3QnKSk7XFxyXFxuICAgICAgICAgICAgICAgIHRlbXAuaXRlbSA9IGU7XFxyXFxuICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXCJmaW5kTGlzdFxcXCIsIEpTT04uc3RyaW5naWZ5KHRlbXApKTtcXHJcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXHJcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcclxcbiAgICAgICAgICAgIH0sIGl0ZW1zW2ldKVxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBhLnB1c2goe1xcclxcbiAgICAgICAgY29sX3R5cGU6ICdibGFua19ibG9jaydcXHJcXG4gICAgfSlcXHJcXG5cXHJcXG4gICAgbGV0IHBsYXlhYmxlID0ge1xcclxcbiAgICAgICAg5YWo6YOo5b2x54mHOiAnMCcsXFxyXFxuICAgICAgICDku4XmnInniYfmupA6ICcxJ1xcclxcbiAgICB9XFxyXFxuICAgIGZvciAobGV0IHIgaW4gcGxheWFibGUpIHtcXHJcXG4gICAgICAgIGEucHVzaCh7XFxyXFxuICAgICAgICAgICAgdGl0bGU6IHRlbXAucGxheWFibGUgPT0gcGxheWFibGVbcl0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIHIgKyAnIDwvZm9udD48L2I+JyA6IHIsXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXHJcXG4gICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOiAvL2VtcHR5I25vTG9hZGluZyMnKS5sYXp5UnVsZSgoZSkgPT4ge1xcclxcbiAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2ZpbmRMaXN0JykpO1xcclxcbiAgICAgICAgICAgICAgICB0ZW1wLnBsYXlhYmxlID0gZTtcXHJcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcImZpbmRMaXN0XFxcIiwgSlNPTi5zdHJpbmdpZnkodGVtcCkpO1xcclxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcclxcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxyXFxuICAgICAgICAgICAgfSwgcGxheWFibGVbcl0pXFxyXFxuICAgICAgICB9KVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIGEucHVzaCh7XFxyXFxuICAgICAgICB0aXRsZTogJ+KAnOKAnOKAneKAnTxiPiA8Zm9udCBjb2xvcj0nICsgY29sb3IgKyAnPuivhOWIhuWMuumXtDonICsgdGVtcC5zY29yZS5yZXBsYWNlKCcsJywgJy0nKSArICcgPC9mb250PjwvYj4nLFxcclxcbiAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXHJcXG4gICAgICAgIHVybDogJCh0ZW1wLnNjb3JlLnJlcGxhY2UoJywnLCAnLScpLCAn6K+E5YiG5bqU5ZyoMC0xMOS5i+mXtCcpLmlucHV0KCgpID0+IHtcXHJcXG4gICAgICAgICAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2ZpbmRMaXN0JykpO1xcclxcbiAgICAgICAgICAgIGxldCBpbnB1dHMgPSBpbnB1dC5zcGxpdCgnLScpO1xcclxcbiAgICAgICAgICAgIGlmIChpbnB1dHMubGVuZ3RoID09IDIgJiYgaW5wdXRzLmV2ZXJ5KGUgPT4gZSA+PSAwICYmIGUgPD0gMTApICYmIHBhcnNlRmxvYXQoaW5wdXRzWzBdKSA8IGlucHV0c1sxXSkge1xcclxcbiAgICAgICAgICAgICAgICB0ZW1wLnNjb3JlID0gaW5wdXQucmVwbGFjZSgnLScsICcsJyk7XFxyXFxuICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXCJmaW5kTGlzdFxcXCIsIEpTT04uc3RyaW5naWZ5KHRlbXApKTtcXHJcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXHJcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcclxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/or7fmraPnoa7ovpPlhaUnXFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgfSlcXHJcXG5cXHJcXG4gICAgbGV0IHMgPSBnZXREb3ViYW5SZXMoXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvXFxcIiArIHRlbXAuaXRlbSArIFxcXCIvcmVjb21tZW5kXFxcIiArICc/cGxheWFibGU9JyArIHRlbXAucGxheWFibGUgKyAnJnNjb3JlX3JhbmdlPScgKyB0ZW1wLnNjb3JlICsgKHBhZ2UgPyBcXFwiJnN0YXJ0PVxcXCIgKyAocGFnZSAtIDEpICogY291bnQgKyBcXFwiJmNvdW50PVxcXCIgKyBjb3VudCA6IFxcXCImc3RhcnQ9MCZjb3VudD04XFxcIikpO1xcclxcbiAgICBsZXQgbCA9IHMuaXRlbXM7XFxyXFxuICAgIGwgPSBsLmZpbHRlcihlID0+IGUudHlwZSAhPT0gXFxcImFkXFxcIiAmJiBlLnR5cGUgIT09IFxcXCJ0YWdzXFxcIik7XFxyXFxuXFxyXFxuICAgIGxldCBkZXRhaWxzVmlld0NvbmZpZ3MgPSBnZXRDb25maWcoJ2RldGFpbHNWaWV3Q29uZmlncycpO1xcclxcbiAgICBsZXQgaSA9IGwubWFwKChlID0+IHtcXHJcXG4gICAgICAgIGxldCB0eXBlID0gZS50eXBlLFxcclxcbiAgICAgICAgICAgIGlkID0gZS5pZCxcXHJcXG4gICAgICAgICAgICB0aXRsZSA9IGUuc3VidGl0bGUgfHwgZS50aXRsZTtcXHJcXG4gICAgICAgIGxldCBiYXNlVXJsID0gZS50eXBlID09PSBcXFwicGxheWxpc3RcXFwiID8gJ2hpa2VyOi8vZW1wdHkvJHBhZ2V7ZnlwYWdlfScgOiAnaGlrZXI6Ly9lbXB0eSNpbW1lcnNpdmVUaGVtZSMnO1xcclxcbiAgICAgICAgbGV0IHVzZUNvbmZpZyA9IGRldGFpbHNWaWV3Q29uZmlnc1tkZXRhaWxzVmlld0NvbmZpZ3MudXNlXS5jb25maWc7XFxyXFxuICAgICAgICBsZXQgdXJsUGFyYW1zID0ge307XFxyXFxuICAgICAgICBpZiAodXNlQ29uZmlnLnN0YXJ0c1dpdGgoJ3snKSkge1xcclxcbiAgICAgICAgICAgIGV2YWwoJ3VybFBhcmFtcyA9ICcgKyB1c2VDb25maWcpO1xcclxcbiAgICAgICAgfSBlbHNlIHtcXHJcXG4gICAgICAgICAgICB1cmxQYXJhbXMudXJsID0gJChiYXNlVXJsICsgXFxcIiNub0hpc3RvcnkjXFxcIiArICc/dHlwZT0nICsgdHlwZSArICcmaWQ9JyArIGlkKS5ydWxlKCh0eXBlLCBpZCwgdGl0bGUsIHVzZUNvbmZpZykgPT4ge1xcclxcbiAgICAgICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxyXFxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcXFwicGxheWxpc3RcXFwiKSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBkb3VMaXN0KGlkLCBNWV9QQUdFLCA1MCk7XFxyXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBldmFsKHVzZUNvbmZpZyk7XFxyXFxuICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICB9LCB0eXBlLCBpZCwgdGl0bGUsIHVzZUNvbmZpZyk7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICByZXR1cm4ge1xcclxcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSArICh0eXBlID09PSBcXFwicGxheWxpc3RcXFwiID8gXFxcIlxcXCIgOiBcXFwi77yIXFxcIiArIGUueWVhciArIFxcXCLvvIlcXFwiKSxcXHJcXG4gICAgICAgICAgICB1cmw6IHVybFBhcmFtcy51cmwsXFxyXFxuICAgICAgICAgICAgZXh0cmE6IHVybFBhcmFtcy5leHRyYSxcXHJcXG4gICAgICAgICAgICBpbWc6IGUucGljID8gZS5waWMubm9ybWFsICsgXFxcIkBSZWZlcmVyPVxcXCIgKyBlLnBpYy5ub3JtYWwgOiBlLmNvdmVyX3VybCArIFxcXCJAUmVmZXJlcj1cXFwiICsgZS5jb3Zlcl91cmwsXFxyXFxuICAgICAgICAgICAgZGVzYzogZS50eXBlICE9PSBcXFwicGxheWxpc3RcXFwiID8gKGUudGFncy5tYXAoKGUgPT4gZS5uYW1lKSkuam9pbihcXFwiLFxcXCIpICsgXFxcIlxcXFxuXFxcIiArIChlLnJhdGluZyA/IGNvbXB1dGVSYXRpbmcoZS5yYXRpbmcubWF4LCBlLnJhdGluZy52YWx1ZSkgKyBcXFwiIFxcXCIgKyBlLnJhdGluZy52YWx1ZS50b0ZpeGVkKDEpICsgXFxcIuWIhlxcXCIgOiBcXFwi5pqC5peg6K+E5YiGXFxcIikpIDogKGUudGl0bGUgKyBcXFwiXFxcXG5cXFwiICsgZS50YWdzLmpvaW4oXFxcIixcXFwiKSArIFxcXCJcXFxcbuWFsVxcXCIgKyBlLml0ZW1zX2NvdW50ICsgXFxcIumDqFxcXCIpXFxyXFxuICAgICAgICB9XFxyXFxuICAgIH0pKTtcXHJcXG5cXHJcXG4gICAgcmV0dXJuIHBhZ2UgPiAxID8gaSA6IGEuY29uY2F0KGkpO1xcclxcbn1cXHJcXG5cXHJcXG4vL+eDremXqFxcclxcbmZ1bmN0aW9uIGhvdExpc3QocGFnZSwgY291bnQpIHtcXHJcXG4gICAgaWYgKCFnZXRNeVZhcignaG90TGlzdCcpKSBwdXRNeVZhcignaG90TGlzdCcsICd7XFxcIml0ZW1cXFwiOlxcXCJtb3ZpZV9zaG93aW5nP2FyZWE95YWo6YOoXFxcIixcXFwicGxheWFibGVcXFwiOlxcXCIwXFxcIixcXFwic29ydFxcXCI6XFxcInJlY29tbWVuZFxcXCIsXFxcInNjb3JlXFxcIjpcXFwiMCwxMFxcXCJ9Jyk7XFxyXFxuICAgIGxldCBhID0gW107XFxyXFxuICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcignaG90TGlzdCcpKTtcXHJcXG4gICAgbGV0IGNvbG9yID0gZ2V0Q29uZmlnKCdjaG9vc2VDb2xvcicpO1xcclxcblxcclxcbiAgICBsZXQgaXRlbXMgPSB7XFxyXFxuICAgICAgICDnlLXlvbE6IHtcXHJcXG4gICAgICAgICAgICDlvbHpmaLng63mmKDnlLXlvbE6ICdtb3ZpZV9zaG93aW5nP2FyZWE95YWo6YOoJyxcXHJcXG4gICAgICAgICAgICDosYbnk6Png63pl6jnlLXlvbE6ICdob3RfZ2FpYT9hcmVhPeWFqOmDqCcsXFxyXFxuICAgICAgICAgICAg54Ot6Zeo5Y2O6K+t55S15b2xOiAnaG90X2dhaWE/YXJlYT3ljY7or60nLFxcclxcbiAgICAgICAgICAgIOeDremXqOasp+e+jueUteW9sTogJ2hvdF9nYWlhP2FyZWE95qyn576OJyxcXHJcXG4gICAgICAgICAgICDng63pl6jpn6nlm73nlLXlvbE6ICdob3RfZ2FpYT9hcmVhPemfqeWbvScsXFxyXFxuICAgICAgICAgICAg54Ot6Zeo5pel5pys55S15b2xOiAnaG90X2dhaWE/YXJlYT3ml6XmnKwnXFxyXFxuICAgICAgICB9LFxcclxcbiAgICAgICAg55S16KeG5YmnOiB7XFxyXFxuICAgICAgICAgICAg54Ot5pKt55S16KeG5YmnOiAndHZfaG90JyxcXHJcXG4gICAgICAgICAgICDng63mkq3lm73kuqfliac6ICd0dl9kb21lc3RpYycsXFxyXFxuICAgICAgICAgICAg54Ot5pKt5qyn576O5YmnOiAndHZfYW1lcmljYW4nLFxcclxcbiAgICAgICAgICAgIOeDreaSreaXpeWJpzogJ3R2X2phcGFuZXNlJyxcXHJcXG4gICAgICAgICAgICDng63mkq3pn6nliac6ICd0dl9rb3JlYW4nLFxcclxcbiAgICAgICAgICAgIOeDreaSreWKqOeUuzogJ3R2X2FuaW1hdGlvbidcXHJcXG4gICAgICAgIH0sXFxyXFxuICAgICAgICDnu7zoibo6IHtcXHJcXG4gICAgICAgICAgICDng63mkq3nu7zoibo6ICdzaG93X2hvdCcsXFxyXFxuICAgICAgICAgICAg5Zu95YaF57u86Im6OiAnc2hvd19kb21lc3RpYycsXFxyXFxuICAgICAgICAgICAg5Zu95aSW57u86Im6OiAnc2hvd19mb3JlaWduJ1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuICAgIGZvciAobGV0IGkgaW4gaXRlbXMpIHtcXHJcXG4gICAgICAgIGZvciAobGV0IGogaW4gaXRlbXNbaV0pIHtcXHJcXG4gICAgICAgICAgICBhLnB1c2goe1xcclxcbiAgICAgICAgICAgICAgICB0aXRsZTogdGVtcC5pdGVtID09IGl0ZW1zW2ldW2pdID8gJ+KAnOKAnOKAneKAnTxiPiA8Zm9udCBjb2xvcj0nICsgY29sb3IgKyAnPicgKyBqICsgJyA8L2ZvbnQ+PC9iPicgOiBqLFxcclxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcclxcbiAgICAgICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChlKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2hvdExpc3QnKSk7XFxyXFxuICAgICAgICAgICAgICAgICAgICB0ZW1wLml0ZW0gPSBlO1xcclxcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoJ2hvdExpc3QnLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxyXFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcclxcbiAgICAgICAgICAgICAgICB9LCBpdGVtc1tpXVtqXSlcXHJcXG4gICAgICAgICAgICB9KVxcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgYS5wdXNoKHtcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImJsYW5rX2Jsb2NrXFxcIlxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBsZXQgc29ydCA9IHtcXHJcXG4gICAgICAgIOeDreW6puaOkuW6jzogJ3JlY29tbWVuZCcsXFxyXFxuICAgICAgICDml7bpl7TmjpLluo86ICd0aW1lJyxcXHJcXG4gICAgICAgIOivhOWIhuaOkuW6jzogJ3JhbmsnXFxyXFxuICAgIH1cXHJcXG4gICAgZm9yIChsZXQgciBpbiBzb3J0KSB7XFxyXFxuICAgICAgICBhLnB1c2goe1xcclxcbiAgICAgICAgICAgIHRpdGxlOiB0ZW1wLnNvcnQgPT0gc29ydFtyXSA/ICfigJzigJzigJ3igJ08Yj4gPGZvbnQgY29sb3I9JyArIGNvbG9yICsgJz4nICsgciArICcgPC9mb250PjwvYj4nIDogcixcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcclxcbiAgICAgICAgICAgIHVybDogJCgnaGlrZXI6IC8vZW1wdHkjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChlKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcignaG90TGlzdCcpKTtcXHJcXG4gICAgICAgICAgICAgICAgdGVtcC5zb3J0ID0gZTtcXHJcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcImhvdExpc3RcXFwiLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxyXFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxyXFxuICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXHJcXG4gICAgICAgICAgICB9LCBzb3J0W3JdKVxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBhLnB1c2goe1xcclxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJibGFua19ibG9ja1xcXCJcXHJcXG4gICAgfSlcXHJcXG5cXHJcXG4gICAgbGV0IHBsYXlhYmxlID0ge1xcclxcbiAgICAgICAg5YWo6YOo5b2x54mHOiAnMCcsXFxyXFxuICAgICAgICDku4XmnInniYfmupA6ICcxJ1xcclxcbiAgICB9XFxyXFxuICAgIGZvciAobGV0IHIgaW4gcGxheWFibGUpIHtcXHJcXG4gICAgICAgIGEucHVzaCh7XFxyXFxuICAgICAgICAgICAgdGl0bGU6IHRlbXAucGxheWFibGUgPT0gcGxheWFibGVbcl0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIHIgKyAnIDwvZm9udD48L2I+JyA6IHIsXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXHJcXG4gICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOiAvL2VtcHR5I25vTG9hZGluZyMnKS5sYXp5UnVsZSgoZSkgPT4ge1xcclxcbiAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2hvdExpc3QnKSk7XFxyXFxuICAgICAgICAgICAgICAgIHRlbXAucGxheWFibGUgPSBlO1xcclxcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwiaG90TGlzdFxcXCIsIEpTT04uc3RyaW5naWZ5KHRlbXApKTtcXHJcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXHJcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcclxcbiAgICAgICAgICAgIH0sIHBsYXlhYmxlW3JdKVxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBhLnB1c2goe1xcclxcbiAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ08Yj4gPGZvbnQgY29sb3I9JyArIGNvbG9yICsgJz7or4TliIbljLrpl7Q6JyArIHRlbXAuc2NvcmUucmVwbGFjZSgnLCcsICctJykgKyAnIDwvZm9udD48L2I+JyxcXHJcXG4gICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxyXFxuICAgICAgICB1cmw6ICQodGVtcC5zY29yZS5yZXBsYWNlKCcsJywgJy0nKSwgJ+ivhOWIhuW6lOWcqDAtMTDkuYvpl7QnKS5pbnB1dCgoKSA9PiB7XFxyXFxuICAgICAgICAgICAgbGV0IHRlbXAgPSBKU09OLnBhcnNlKGdldE15VmFyKCdob3RMaXN0JykpO1xcclxcbiAgICAgICAgICAgIGxldCBpbnB1dHMgPSBpbnB1dC5zcGxpdCgnLScpO1xcclxcbiAgICAgICAgICAgIGlmIChpbnB1dHMubGVuZ3RoID09IDIgJiYgaW5wdXRzLmV2ZXJ5KGUgPT4gZSA+PSAwICYmIGUgPD0gMTApICYmIHBhcnNlRmxvYXQoaW5wdXRzWzBdKSA8IGlucHV0c1sxXSkge1xcclxcbiAgICAgICAgICAgICAgICB0ZW1wLnNjb3JlID0gaW5wdXQucmVwbGFjZSgnLScsICcsJyk7XFxyXFxuICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXCJob3RMaXN0XFxcIiwgSlNPTi5zdHJpbmdpZnkodGVtcCkpO1xcclxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcclxcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxyXFxuICAgICAgICAgICAgfSBlbHNlIHtcXHJcXG4gICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+ivt+ato+ehrui+k+WFpSdcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9KVxcclxcbiAgICB9KVxcclxcblxcclxcbiAgICBsZXQgbCA9IFtdO1xcclxcbiAgICBpZiAodGVtcC5pdGVtLmluZGV4T2YoJz8nKSAhPSAtMSkge1xcclxcbiAgICAgICAgbGV0IHMgPSBnZXREb3ViYW5SZXMoXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvbW92aWUvXFxcIiArIHRlbXAuaXRlbSArICcmcGxheWFibGU9JyArIHRlbXAucGxheWFibGUgKyAnJnNvcnQ9JyArIHRlbXAuc29ydCArICcmc2NvcmVfcmFuZ2U9JyArIHRlbXAuc2NvcmUgKyAocGFnZSA/IFxcXCImc3RhcnQ9XFxcIiArIChwYWdlIC0gMSkgKiBjb3VudCArIFxcXCImY291bnQ9XFxcIiArIGNvdW50IDogXFxcIiZzdGFydD0wJmNvdW50PTMwXFxcIikgKyAnJmxvY19pZD0xMDgyODgnKTtcXHJcXG4gICAgICAgIGwgPSBzLml0ZW1zO1xcclxcbiAgICB9IGVsc2Uge1xcclxcbiAgICAgICAgbGV0IHMgPSBnZXREb3ViYW5SZXMoXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvc3ViamVjdF9jb2xsZWN0aW9uL1xcXCIgKyB0ZW1wLml0ZW0gKyAnL2l0ZW1zJyArICc/cGxheWFibGU9JyArIHRlbXAucGxheWFibGUgKyAnJnNvcnQ9JyArIHRlbXAuc29ydCArICcmc2NvcmVfcmFuZ2U9JyArIHRlbXAuc2NvcmUgKyAocGFnZSA/IFxcXCImc3RhcnQ9XFxcIiArIChwYWdlIC0gMSkgKiBjb3VudCArIFxcXCImY291bnQ9XFxcIiArIGNvdW50IDogXFxcIiZzdGFydD0wJmNvdW50PTMwXFxcIikpO1xcclxcbiAgICAgICAgbCA9IHMuc3ViamVjdF9jb2xsZWN0aW9uX2l0ZW1zO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIGxldCBkZXRhaWxzVmlld0NvbmZpZ3MgPSBnZXRDb25maWcoJ2RldGFpbHNWaWV3Q29uZmlncycpO1xcclxcbiAgICBsZXQgaSA9IGwubWFwKChlID0+IHtcXHJcXG4gICAgICAgIGxldCB0eXBlID0gZS50eXBlLFxcclxcbiAgICAgICAgICAgIGlkID0gZS5pZCxcXHJcXG4gICAgICAgICAgICB0aXRsZSA9IGUudGl0bGU7XFxyXFxuICAgICAgICBsZXQgdXNlQ29uZmlnID0gZGV0YWlsc1ZpZXdDb25maWdzW2RldGFpbHNWaWV3Q29uZmlncy51c2VdLmNvbmZpZztcXHJcXG4gICAgICAgIGxldCB1cmxQYXJhbXMgPSB7fTtcXHJcXG4gICAgICAgIGlmICh1c2VDb25maWcuc3RhcnRzV2l0aCgneycpKSB7XFxyXFxuICAgICAgICAgICAgZXZhbCgndXJsUGFyYW1zID0gJyArIHVzZUNvbmZpZyk7XFxyXFxuICAgICAgICB9IGVsc2Uge1xcclxcbiAgICAgICAgICAgIHVybFBhcmFtcy51cmwgPSAkKFxcXCJoaWtlcjovL2VtcHR5I25vSGlzdG9yeSMjaW1tZXJzaXZlVGhlbWUjXFxcIiArICc/dHlwZT0nICsgdHlwZSArICcmaWQ9JyArIGlkKS5ydWxlKCh0eXBlLCBpZCwgdGl0bGUsIHVzZUNvbmZpZykgPT4ge1xcclxcbiAgICAgICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxyXFxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcXFwicGxheWxpc3RcXFwiKSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBkb3VMaXN0KGlkLCBNWV9QQUdFLCA1MCk7XFxyXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBldmFsKHVzZUNvbmZpZyk7XFxyXFxuICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICB9LCB0eXBlLCBpZCwgdGl0bGUsIHVzZUNvbmZpZyk7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICByZXR1cm4ge1xcclxcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSArIFxcXCLvvIhcXFwiICsgZS55ZWFyICsgXFxcIu+8iVxcXCIsXFxyXFxuICAgICAgICAgICAgdXJsOiB1cmxQYXJhbXMudXJsLFxcclxcbiAgICAgICAgICAgIGV4dHJhOiB1cmxQYXJhbXMuZXh0cmEsXFxyXFxuICAgICAgICAgICAgaW1nOiBlLnBpYyA/IGUucGljLm5vcm1hbCArIFxcXCJAUmVmZXJlcj1cXFwiICsgZS5waWMubm9ybWFsIDogZS5jb3Zlci51cmwgKyAnQFJlZmVyZXI9JyArIGUuY292ZXIudXJsLFxcclxcbiAgICAgICAgICAgIGRlc2M6IChlLnRhZ3MgPyBlLnRhZ3MubWFwKChlID0+IGUubmFtZSkpLmpvaW4oXFxcIixcXFwiKSA6IGUuY2FyZF9zdWJ0aXRsZSkgKyBcXFwiXFxcXG5cXFwiICsgKGUucmF0aW5nID8gY29tcHV0ZVJhdGluZyhlLnJhdGluZy5tYXgsIGUucmF0aW5nLnZhbHVlKSArIFxcXCIgXFxcIiArIGUucmF0aW5nLnZhbHVlLnRvRml4ZWQoMSkgKyBcXFwi5YiGXFxcIiA6IFxcXCLmmoLml6Dor4TliIZcXFwiKVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9KSk7XFxyXFxuXFxyXFxuICAgIHJldHVybiBwYWdlID4gMSA/IGkgOiBhLmNvbmNhdChpKTtcXHJcXG59XFxyXFxuXFxyXFxuLy/liIbnsbtcXHJcXG5mdW5jdGlvbiBjbGFzc0xpc3QocGFnZSwgY291bnQpIHtcXHJcXG4gICAgaWYgKCFnZXRNeVZhcignY2xhc3NsaXN0Jykpe1xcclxcbiAgICAgICAgcHV0TXlWYXIoJ2NsYXNzbGlzdCcsIEpTT04uc3RyaW5naWZ5KHtzdWJ0eXBlOlxcXCJcXFwiLGxvY2FsOlxcXCJcXFwiLHllYXI6XFxcIlxcXCIsY2xhc3M6XFxcIlxcXCIscmFuazpcXFwiVVxcXCIsdHlwZTpcXFwiXFxcIixmaWx0ZXI6XFxcIlxcXCIsc2NvcmU6XFxcIjAsMTBcXFwifSkpO1xcclxcbiAgICB9XFxyXFxuICAgIGxldCBhID0gW107XFxyXFxuICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcignY2xhc3NsaXN0JykpO1xcclxcbiAgICBsZXQgY29sb3IgPSBnZXRDb25maWcoJ2Nob29zZUNvbG9yJyk7XFxyXFxuXFxyXFxuICAgIGxldCBpdGVtcyA9IHtcXHJcXG4gICAgICAgIHN1YnR5cGU6IFtcXFwi5YWo6YOo5b2i5byPXFxcIiwgXFxcIueUteW9sVxcXCIsIFxcXCLnlLXop4bliadcXFwiLCBcXFwi57u86Im6XFxcIiwgXFxcIuWKqOa8q1xcXCIsIFxcXCLnuqrlvZXniYdcXFwiLCBcXFwi55+t54mHXFxcIl0sXFxyXFxuICAgICAgICBsb2NhbDogW1xcXCLlhajpg6jlnLDljLpcXFwiLCBcXFwi6Ieq5a6a5LmJ5Zyw5Yy6XFxcIiwgXFxcIuS4reWbveWkp+mZhlxcXCIsIFxcXCLnvo7lm71cXFwiLCBcXFwi5Lit5Zu96aaZ5rivXFxcIiwgXFxcIuS4reWbveWPsOa5vlxcXCIsIFxcXCLml6XmnKxcXFwiLCBcXFwi6Z+p5Zu9XFxcIiwgXFxcIuiLseWbvVxcXCIsIFxcXCLms5Xlm71cXFwiLCBcXFwi5b635Zu9XFxcIiwgXFxcIuaEj+Wkp+WIqVxcXCIsIFxcXCLopb/nj63niZlcXFwiLCBcXFwi5Y2w5bqmXFxcIiwgXFxcIuazsOWbvVxcXCIsIFxcXCLkv4TnvZfmlq9cXFwiLCBcXFwi5LyK5pyXXFxcIiwgXFxcIuWKoOaLv+Wkp1xcXCIsIFxcXCLmvrPlpKfliKnkuppcXFwiLCBcXFwi54ix5bCU5YWwXFxcIiwgXFxcIueRnuWFuFxcXCIsIFxcXCLlt7Topb9cXFwiLCBcXFwi5Li56bqmXFxcIl0sXFxyXFxuICAgICAgICB0eXBlOiBbXFxcIuWFqOmDqOexu+Wei1xcXCIsIFxcXCLoh6rlrprkuYnnsbvlnotcXFwiLCBcXFwi5Ymn5oOFXFxcIiwgXFxcIuWWnOWJp1xcXCIsIFxcXCLliqjkvZxcXFwiLCBcXFwi54ix5oOFXFxcIiwgXFxcIuenkeW5u1xcXCIsIFxcXCLliqjnlLtcXFwiLCBcXFwi5oKs55aRXFxcIiwgXFxcIuaDiuaCmlxcXCIsIFxcXCLmgZDmgJZcXFwiLCBcXFwi54qv572qXFxcIiwgXFxcIuWQjOaAp1xcXCIsIFxcXCLpn7PkuZBcXFwiLCBcXFwi5q2M6IieXFxcIiwgXFxcIuS8oOiusFxcXCIsIFxcXCLljoblj7JcXFwiLCBcXFwi5oiY5LqJXFxcIiwgXFxcIuilv+mDqFxcXCIsIFxcXCLlpYflubtcXFwiLCBcXFwi5YaS6ZmpXFxcIiwgXFxcIueBvumavlxcXCIsIFxcXCLmrabkvqBcXFwiLCBcXFwiXFxcXHU2MGM1XFxcXHU4MjcyXFxcIl0sXFxyXFxuICAgICAgICB5ZWFyOiBbXFxcIuWFqOmDqOW5tOS7o1xcXCIsIFxcXCLoh6rlrprkuYnlubTku71cXFwiLCBcXFwiMjAyMOW5tOS7o1xcXCIsIFxcXCIyMDEw5bm05LujXFxcIiwgXFxcIjIwMDDlubTku6NcXFwiLCBcXFwiOTDlubTku6NcXFwiLCBcXFwiODDlubTku6NcXFwiLCBcXFwiNzDlubTku6NcXFwiLCBcXFwiNjDlubTku6NcXFwiLCBcXFwi5pu05pepXFxcIl0sXFxyXFxuICAgICAgICBjbGFzczogW1xcXCLlhajpg6jnibnoibJcXFwiLCBcXFwi6Ieq5a6a5LmJ5qCH562+XFxcIiwgXFxcIue7j+WFuFxcXCIsIFxcXCLpnZLmmKVcXFwiLCBcXFwi5paH6Im6XFxcIiwgXFxcIuaQnueskVxcXCIsIFxcXCLlirHlv5dcXFwiLCBcXFwi6a2U5bm7XFxcIiwgXFxcIuaEn+S6ulxcXCIsIFxcXCLlpbPmgKdcXFwiLCBcXFwi6buR5biuXFxcIiwgXFxcIuayu+aEiFxcXCIsIFxcXCLnvo7po59cXFwiLCBcXFwi5a6X5pWZXFxcIiwgXFxcIuWwj+ivtOaUuee8llxcXCIsIFxcXCLotoXnuqfoi7Hpm4RcXFwiXVxcclxcbiAgICB9XFxyXFxuICAgIGZvciAoaXRlbSBpbiBpdGVtcykge1xcclxcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtc1tpdGVtXS5sZW5ndGg7IGkrKykge1xcclxcbiAgICAgICAgICAgIGxldCB0aXRsZSA9IFxcXCJcXFwiO1xcclxcbiAgICAgICAgICAgIGlmKHRlbXBbaXRlbV0gPT0gaXRlbXNbaXRlbV1baV0gfHwgKHRlbXBbaXRlbV0gPT0gXFxcIlxcXCIgJiYgaSA9PSAwKSl7XFxyXFxuICAgICAgICAgICAgICAgIHRpdGxlID0gJ+KAnOKAnOKAneKAnTxiPiA8Zm9udCBjb2xvcj0nICsgY29sb3IgKyAnPicgKyBpdGVtc1tpdGVtXVtpXSArICcgPC9mb250PjwvYj4nO1xcclxcbiAgICAgICAgICAgIH1lbHNle1xcclxcbiAgICAgICAgICAgICAgICB0aXRsZSA9IGl0ZW1zW2l0ZW1dW2ldO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICBsZXQgdXJsID0gJCgnaGlrZXI6Ly9lbXB0eSNub0xvYWRpbmcjJykubGF6eVJ1bGUoKHRleHQsaXRlbSkgPT4ge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcignY2xhc3NsaXN0JykpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBbaXRlbV0gPSB0ZXh0LmluZGV4T2YoXFxcIuWFqOmDqFxcXCIpICE9IC0xID8gXFxcIlxcXCIgOiB0ZXh0O1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXCJjbGFzc2xpc3RcXFwiLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxyXFxuICAgICAgICAgICAgICAgICAgICB9LCBpdGVtc1tpdGVtXVtpXSwgaXRlbSk7XFxyXFxuICAgICAgICAgICAgXFxyXFxuICAgICAgICAgICAgaWYoaXRlbXNbaXRlbV1baV0gPT0gXFxcIuiHquWumuS5ieW5tOS7vVxcXCIpe1xcclxcbiAgICAgICAgICAgICAgICBpZih0ZW1wLnllYXIgPT0gXFxcIuiHquWumuS5ieW5tOS7vVxcXCIpe1xcclxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGUgPSAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+6Ieq5a6a5LmJ5bm05Lu9OicgKyB0ZW1wLmN1c3RvbVllYXIgKyAnIDwvZm9udD48L2I+JztcXHJcXG4gICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICBcXHJcXG4gICAgICAgICAgICAgICAgdXJsID0gJCh0ZW1wLmN1c3RvbVllYXIsICfnm7TmjqXovpPlhaXlhbfkvZPlubTku70s5L6L5aaCMjAwMCcpLmlucHV0KCgpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcignY2xhc3NsaXN0JykpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgaWYoaW5wdXQubGVuZ3RoID09IDQpe1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAuY3VzdG9tWWVhciA9IGlucHV0O1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAueWVhciA9IFxcXCLoh6rlrprkuYnlubTku71cXFwiO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXCJjbGFzc2xpc3RcXFwiLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxyXFxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v6K+35q2j56Gu6L6T5YWlJ1xcclxcbiAgICAgICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICB9KTtcXHJcXG4gICAgICAgICAgICB9ZWxzZSBpZihpdGVtc1tpdGVtXVtpXSA9PSBcXFwi6Ieq5a6a5LmJ5Zyw5Yy6XFxcIil7XFxyXFxuICAgICAgICAgICAgICAgIGlmKHRlbXAubG9jYWwgPT0gXFxcIuiHquWumuS5ieWcsOWMulxcXCIpe1xcclxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGUgPSAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+6Ieq5a6a5LmJ5Zyw5Yy6OicgKyB0ZW1wLmN1c3RvbUxvY2FsICsgJyA8L2ZvbnQ+PC9iPic7XFxyXFxuICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAgICAgXFxyXFxuICAgICAgICAgICAgICAgIHVybCA9ICQodGVtcC5jdXN0b21Mb2NhbCwgJ+ebtOaOpei+k+WFpeWFt+S9k+WcsOWMuizkvovlpoLkuK3lm73lpKfpmYYnKS5pbnB1dCgoKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2NsYXNzbGlzdCcpKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGlmKGlucHV0Lmxlbmd0aCA+IDApe1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAuY3VzdG9tTG9jYWwgPSBpbnB1dDtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wLmxvY2FsID0gXFxcIuiHquWumuS5ieWcsOWMulxcXCI7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcImNsYXNzbGlzdFxcXCIsIEpTT04uc3RyaW5naWZ5KHRlbXApKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXHJcXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/or7fmraPnoa7ovpPlhaUnXFxyXFxuICAgICAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgIH0pO1xcclxcbiAgICAgICAgICAgIH1lbHNlIGlmKGl0ZW1zW2l0ZW1dW2ldID09IFxcXCLoh6rlrprkuYnnsbvlnotcXFwiKXtcXHJcXG4gICAgICAgICAgICAgICAgaWYodGVtcC50eXBlID09IFxcXCLoh6rlrprkuYnnsbvlnotcXFwiKXtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlID0gJ+KAnOKAnOKAneKAnTxiPiA8Zm9udCBjb2xvcj0nICsgY29sb3IgKyAnPuiHquWumuS5ieexu+WeizonICsgdGVtcC5jdXN0b21UeXBlICsgJyA8L2ZvbnQ+PC9iPic7XFxyXFxuICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAgICAgXFxyXFxuICAgICAgICAgICAgICAgIHVybCA9ICQodGVtcC5jdXN0b21UeXBlLCAn55u05o6l6L6T5YWl5YW35L2T57G75Z6LLOS+i+WmguWJp+aDhScpLmlucHV0KCgpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcignY2xhc3NsaXN0JykpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgaWYoaW5wdXQubGVuZ3RoID4gMCl7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcC5jdXN0b21UeXBlID0gaW5wdXQ7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcC50eXBlID0gXFxcIuiHquWumuS5ieexu+Wei1xcXCI7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcImNsYXNzbGlzdFxcXCIsIEpTT04uc3RyaW5naWZ5KHRlbXApKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXHJcXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/or7fmraPnoa7ovpPlhaUnXFxyXFxuICAgICAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgIH0pO1xcclxcbiAgICAgICAgICAgIH1lbHNlIGlmKGl0ZW1zW2l0ZW1dW2ldID09IFxcXCLoh6rlrprkuYnmoIfnrb5cXFwiKXtcXHJcXG4gICAgICAgICAgICAgICAgaWYodGVtcC5jbGFzcyA9PSBcXFwi6Ieq5a6a5LmJ5qCH562+XFxcIil7XFxyXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZSA9ICfigJzigJzigJ3igJ08Yj4gPGZvbnQgY29sb3I9JyArIGNvbG9yICsgJz7oh6rlrprkuYnmoIfnrb46JyArIHRlbXAuY3VzdG9tQ2xhc3MgKyAnIDwvZm9udD48L2I+JztcXHJcXG4gICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICBcXHJcXG4gICAgICAgICAgICAgICAgdXJsID0gJCh0ZW1wLmN1c3RvbUNsYXNzLCAn55u05o6l6L6T5YWl5YW35L2T5qCH562+LOS+i+Wmgue7j+WFuFxcXFxu5Y+v5YaZ5aSa5Liq5qCH562+LOS9v+eUqFxcXCLoi7HmlofpgJflj7dcXFwi5YiG6ZqUJykuaW5wdXQoKCkgPT4ge1xcclxcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXAgPSBKU09OLnBhcnNlKGdldE15VmFyKCdjbGFzc2xpc3QnKSk7XFxyXFxuICAgICAgICAgICAgICAgICAgICBpZihpbnB1dC5sZW5ndGggPiAwKXtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wLmN1c3RvbUNsYXNzID0gaW5wdXQ7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcC5jbGFzcyA9IFxcXCLoh6rlrprkuYnmoIfnrb5cXFwiO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXCJjbGFzc2xpc3RcXFwiLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxyXFxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v6K+35q2j56Gu6L6T5YWlJ1xcclxcbiAgICAgICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICB9KTtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgYS5wdXNoKHtcXHJcXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxcclxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcclxcbiAgICAgICAgICAgICAgICB1cmw6IHVybFxcclxcbiAgICAgICAgICAgIH0pXFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICBhLnB1c2goe1xcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnYmxhbmtfYmxvY2snXFxyXFxuICAgICAgICB9KVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIGxldCByYW5rID0ge1xcclxcbiAgICAgICAg6buY6K6k5o6S5bqPOiBcXFwiVVxcXCIsXFxyXFxuICAgICAgICDng63luqY6IFxcXCJUXFxcIixcXHJcXG4gICAgICAgIOivhOWIhjogXFxcIlNcXFwiLFxcclxcbiAgICAgICAg5pe26Ze0OiBcXFwiUlxcXCJcXHJcXG4gICAgfVxcclxcbiAgICBmb3IgKGxldCByIGluIHJhbmspIHtcXHJcXG4gICAgICAgIGEucHVzaCh7XFxyXFxuICAgICAgICAgICAgdGl0bGU6IHRlbXAucmFuayA9PT0gcmFua1tyXSA/ICfigJzigJzigJ3igJ08Yj4gPGZvbnQgY29sb3I9JyArIGNvbG9yICsgJz4nICsgciArICcgPC9mb250PjwvYj4nIDogcixcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcclxcbiAgICAgICAgICAgIHVybDogJCgnaGlrZXI6IC8vZW1wdHkjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChlKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcignY2xhc3NsaXN0JykpO1xcclxcbiAgICAgICAgICAgICAgICB0ZW1wLnJhbmsgPSBlO1xcclxcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwiY2xhc3NsaXN0XFxcIiwgSlNPTi5zdHJpbmdpZnkodGVtcCkpO1xcclxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcclxcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxyXFxuICAgICAgICAgICAgfSwgcmFua1tyXSlcXHJcXG4gICAgICAgIH0pXFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgYS5wdXNoKHtcXHJcXG4gICAgICAgIGNvbF90eXBlOiAnYmxhbmtfYmxvY2snXFxyXFxuICAgIH0pXFxyXFxuXFxyXFxuICAgIGxldCBmaWx0ZXIgPSB7XFxyXFxuICAgICAgICDlhajpg6jlvbHniYc6ICcnLFxcclxcbiAgICAgICAg5LuF5pyJ54mH5rqQOiAncGxheWFibGUnXFxyXFxuICAgIH1cXHJcXG4gICAgZm9yIChsZXQgciBpbiBmaWx0ZXIpIHtcXHJcXG4gICAgICAgIGEucHVzaCh7XFxyXFxuICAgICAgICAgICAgdGl0bGU6IHRlbXAuZmlsdGVyID09PSBmaWx0ZXJbcl0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIHIgKyAnIDwvZm9udD48L2I+JyA6IHIsXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXHJcXG4gICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOiAvL2VtcHR5I25vTG9hZGluZyMnKS5sYXp5UnVsZSgoZSkgPT4ge1xcclxcbiAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2NsYXNzbGlzdCcpKTtcXHJcXG4gICAgICAgICAgICAgICAgdGVtcC5maWx0ZXIgPSBlO1xcclxcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwiY2xhc3NsaXN0XFxcIiwgSlNPTi5zdHJpbmdpZnkodGVtcCkpO1xcclxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcclxcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxyXFxuICAgICAgICAgICAgfSwgZmlsdGVyW3JdKVxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBhLnB1c2goe1xcclxcbiAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ08Yj4gPGZvbnQgY29sb3I9JyArIGNvbG9yICsgJz7or4TliIbljLrpl7Q6JyArIHRlbXAuc2NvcmUucmVwbGFjZSgnLCcsICctJykgKyAnIDwvZm9udD48L2I+JyxcXHJcXG4gICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxyXFxuICAgICAgICB1cmw6ICQodGVtcC5zY29yZS5yZXBsYWNlKCcsJywgJy0nKSwgJ+ivhOWIhuW6lOWcqDAtMTDkuYvpl7QnKS5pbnB1dCgoKSA9PiB7XFxyXFxuICAgICAgICAgICAgbGV0IHRlbXAgPSBKU09OLnBhcnNlKGdldE15VmFyKCdjbGFzc2xpc3QnKSk7XFxyXFxuICAgICAgICAgICAgbGV0IGlucHV0cyA9IGlucHV0LnNwbGl0KCctJyk7XFxyXFxuICAgICAgICAgICAgaWYgKGlucHV0cy5sZW5ndGggPT0gMiAmJiBpbnB1dHMuZXZlcnkoZSA9PiBlID49IDAgJiYgZSA8PSAxMCkgJiYgcGFyc2VGbG9hdChpbnB1dHNbMF0pIDwgaW5wdXRzWzFdKSB7XFxyXFxuICAgICAgICAgICAgICAgIHRlbXAuc2NvcmUgPSBpbnB1dC5yZXBsYWNlKCctJywgJywnKTtcXHJcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcImNsYXNzbGlzdFxcXCIsIEpTT04uc3RyaW5naWZ5KHRlbXApKTtcXHJcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXHJcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcclxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/or7fmraPnoa7ovpPlhaUnXFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgfSlcXHJcXG5cXHJcXG4gICAgbGV0IHMgPSBnZXREb3ViYW5SZXMoXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvbW92aWUvdGFnP1xcXCJcXHJcXG4gICAgICAgICAgICArIChwYWdlID8gXFxcInN0YXJ0PVxcXCIgKyAocGFnZSAtIDEpICogY291bnRcXHJcXG4gICAgICAgICAgICArIFxcXCImY291bnQ9XFxcIiArIGNvdW50IDogXFxcInN0YXJ0PTAmY291bnQ9MzBcXFwiKVxcclxcbiAgICAgICAgICAgICsgXFxcIiZxPVxcXCIgKyB0ZW1wLnN1YnR5cGVcXHJcXG4gICAgICAgICAgICArIFxcXCIsXFxcIiArICh0ZW1wLmxvY2FsPT1cXFwi6Ieq5a6a5LmJ5Zyw5Yy6XFxcIiA/IHRlbXAuY3VzdG9tTG9jYWwgOiB0ZW1wLmxvY2FsKVxcclxcbiAgICAgICAgICAgICsgXFxcIixcXFwiICsgKHRlbXAudHlwZT09XFxcIuiHquWumuS5ieexu+Wei1xcXCIgPyB0ZW1wLmN1c3RvbVR5cGUgOiB0ZW1wLnR5cGUpXFxyXFxuICAgICAgICAgICAgKyBcXFwiLFxcXCIgKyAodGVtcC55ZWFyPT1cXFwi6Ieq5a6a5LmJ5bm05Lu9XFxcIiA/IHRlbXAuY3VzdG9tWWVhciA6IHRlbXAueWVhcilcXHJcXG4gICAgICAgICAgICArIFxcXCIsXFxcIiArICh0ZW1wLmNsYXNzPT1cXFwi6Ieq5a6a5LmJ5qCH562+XFxcIiA/IHRlbXAuY3VzdG9tQ2xhc3MgOiB0ZW1wLmNsYXNzKVxcclxcbiAgICAgICAgICAgICsgXFxcIiZzb3J0PVxcXCIgKyB0ZW1wLnJhbmsgKyBcXFwiJnNjb3JlX3JhbmdlPVxcXCIgKyB0ZW1wLnNjb3JlICsgJyZmaWx0ZXI9JyArIHRlbXAuZmlsdGVyKTtcXHJcXG4gICAgbGV0IGwgPSBzLmRhdGE7XFxyXFxuXFxyXFxuICAgIGxldCBkZXRhaWxzVmlld0NvbmZpZ3MgPSBnZXRDb25maWcoJ2RldGFpbHNWaWV3Q29uZmlncycpO1xcclxcbiAgICBsZXQgaSA9IGwubWFwKChlID0+IHtcXHJcXG4gICAgICAgIGxldCB0eXBlID0gZS50eXBlLFxcclxcbiAgICAgICAgICAgIGlkID0gZS5pZCxcXHJcXG4gICAgICAgICAgICB0aXRsZSA9IGUudGl0bGU7XFxyXFxuICAgICAgICBsZXQgdXNlQ29uZmlnID0gZGV0YWlsc1ZpZXdDb25maWdzW2RldGFpbHNWaWV3Q29uZmlncy51c2VdLmNvbmZpZztcXHJcXG4gICAgICAgIGxldCB1cmxQYXJhbXMgPSB7fTtcXHJcXG4gICAgICAgIGlmICh1c2VDb25maWcuc3RhcnRzV2l0aCgneycpKSB7XFxyXFxuICAgICAgICAgICAgZXZhbCgndXJsUGFyYW1zID0gJyArIHVzZUNvbmZpZyk7XFxyXFxuICAgICAgICB9IGVsc2Uge1xcclxcbiAgICAgICAgICAgIHVybFBhcmFtcy51cmwgPSAkKFxcXCJoaWtlcjovL2VtcHR5I25vSGlzdG9yeSMjaW1tZXJzaXZlVGhlbWUjXFxcIiArICc/dHlwZT0nICsgdHlwZSArICcmaWQ9JyArIGlkKS5ydWxlKCh0eXBlLCBpZCwgdGl0bGUsIHVzZUNvbmZpZykgPT4ge1xcclxcbiAgICAgICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxyXFxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcXFwicGxheWxpc3RcXFwiKSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBkb3VMaXN0KGlkLCBNWV9QQUdFLCA1MCk7XFxyXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBldmFsKHVzZUNvbmZpZyk7XFxyXFxuICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICB9LCB0eXBlLCBpZCwgdGl0bGUsIHVzZUNvbmZpZyk7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICByZXR1cm4ge1xcclxcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzMnLFxcclxcbiAgICAgICAgICAgIHVybDogdXJsUGFyYW1zLnVybCxcXHJcXG4gICAgICAgICAgICBleHRyYTogdXJsUGFyYW1zLmV4dHJhLFxcclxcbiAgICAgICAgICAgIGltZzogZS5jb3Zlcl91cmwgKyBcXFwiQFJlZmVyZXI9XFxcIiArIGUuY292ZXJfdXJsLFxcclxcbiAgICAgICAgICAgIGRlc2M6IGUubnVsbF9yYXRpbmdfcmVhc29uIHx8IGUucmF0aW5nLnZhbHVlXFxyXFxuICAgICAgICB9XFxyXFxuICAgIH0pKTtcXHJcXG5cXHJcXG4gICAgcmV0dXJuIHBhZ2UgPiAxID8gaSA6IGEuY29uY2F0KGkpO1xcclxcbn1cXHJcXG5cXHJcXG4vL+eJh+WNlVxcclxcbmZ1bmN0aW9uIHBsYXlMaXN0KHBhZ2UsIGNvdW50KSB7XFxyXFxuICAgIGlmICghZ2V0TXlWYXIoJ3BsYXlsaXN0JykpIHB1dE15VmFyKCdwbGF5bGlzdCcsICd7XFxcInN1YnR5cGVcXFwiOlxcXCJcXFwiLFxcXCJ0eXBlXFxcIjpcXFwiYWxsXFxcIn0nKTtcXHJcXG4gICAgbGV0IGEgPSBbXTtcXHJcXG4gICAgbGV0IHRlbXAgPSBKU09OLnBhcnNlKGdldE15VmFyKCdwbGF5bGlzdCcsICd7XFxcInN1YnR5cGVcXFwiOlxcXCJcXFwiLFxcXCJ0eXBlXFxcIjpcXFwiYWxsXFxcIn0nKSk7XFxyXFxuICAgIGxldCBjb2xvciA9IGdldENvbmZpZygnY2hvb3NlQ29sb3InKTtcXHJcXG5cXHJcXG4gICAgbGV0IGl0ZW1zID0ge1xcclxcbiAgICAgICAgdHlwZToge1xcclxcbiAgICAgICAgICAgIOWFqOmDqDogXFxcImFsbFxcXCIsXFxyXFxuICAgICAgICAgICAg6LGG55Oj54mH5Y2VOiBcXFwib2ZmaWNpYWxcXFwiLFxcclxcbiAgICAgICAgICAgIOeyvumAiTogXFxcInNlbGVjdGVkXFxcIixcXHJcXG4gICAgICAgICAgICDnu4/lhbg6IFxcXCJjbGFzc2ljYWxcXFwiLFxcclxcbiAgICAgICAgICAgIOiOt+WlljogXFxcInByaXplXFxcIixcXHJcXG4gICAgICAgICAgICDpq5jliIY6IFxcXCJoaWdoX3Njb3JlXFxcIixcXHJcXG4gICAgICAgICAgICDmppzljZU6IFxcXCJtb3ZpZV9saXN0XFxcIixcXHJcXG4gICAgICAgICAgICDlhrfpl6jkvbPniYc6IFxcXCJkYXJrX2hvcnNlXFxcIixcXHJcXG4gICAgICAgICAgICDkuLvpopg6IFxcXCJ0b3BpY1xcXCIsXFxyXFxuICAgICAgICAgICAg5a+85ryUOiBcXFwiZGlyZWN0b3JcXFwiLFxcclxcbiAgICAgICAgICAgIOa8lOWRmDogXFxcImFjdG9yXFxcIixcXHJcXG4gICAgICAgICAgICDns7vliJc6IFxcXCJzZXJpZXNcXFwiLFxcclxcbiAgICAgICAgICAgIOWNjuivrTogXFxcImNoaW5lc2VcXFwiLFxcclxcbiAgICAgICAgICAgIOasp+e+jjogXFxcIndlc3Rlcm5cXFwiLFxcclxcbiAgICAgICAgICAgIOaXpeacrDogXFxcImphcGFuZXNlXFxcIixcXHJcXG4gICAgICAgICAgICDpn6nlm706IFxcXCJrb3JlYVxcXCIsXFxyXFxuICAgICAgICAgICAg5Zac5YmnOiBcXFwiY29tZWR5XFxcIixcXHJcXG4gICAgICAgICAgICDliqjkvZw6IFxcXCJhY3Rpb25cXFwiLFxcclxcbiAgICAgICAgICAgIOeIseaDhTogXFxcImxvdmVcXFwiLFxcclxcbiAgICAgICAgICAgIOenkeW5uzogXFxcInNjaWVuY2VfZmljdGlvblxcXCIsXFxyXFxuICAgICAgICAgICAg5Yqo55S7OiBcXFwiY2FydG9vblxcXCIsXFxyXFxuICAgICAgICAgICAg5oKs55aROiBcXFwibXlzdGVyeVxcXCIsXFxyXFxuICAgICAgICAgICAg5oOK5oKaOiBcXFwicGFuaWNcXFwiLFxcclxcbiAgICAgICAgICAgIOaBkOaAljogXFxcImhvcnJpYmxlXFxcIixcXHJcXG4gICAgICAgICAgICDniq/nvao6IFxcXCJjcmltaW5hbFxcXCIsXFxyXFxuICAgICAgICAgICAg5ZCM5oCnOiBcXFwibGdidFxcXCIsXFxyXFxuICAgICAgICAgICAg5oiY5LqJOiBcXFwid2FyXFxcIixcXHJcXG4gICAgICAgICAgICDlpYflubs6IFxcXCJmYW50YXN5XFxcIixcXHJcXG4gICAgICAgICAgICBcXFwiXFxcXHU2MGM1XFxcXHU4MjcyXFxcIjogXFxcImVyb3RpY2FcXFwiLFxcclxcbiAgICAgICAgICAgIOmfs+S5kDogXFxcIm11c2ljXFxcIixcXHJcXG4gICAgICAgICAgICDnuqrlvZXniYc6IFxcXCJkb2N1bWVudGFyeVxcXCIsXFxyXFxuICAgICAgICAgICAg5rK75oSIOiBcXFwiY3VyZVxcXCIsXFxyXFxuICAgICAgICAgICAg6Im65pyvOiBcXFwiYXJ0XFxcIixcXHJcXG4gICAgICAgICAgICDpu5HoibLlub3pu5g6IFxcXCJkYXJrX2h1bW9yXFxcIixcXHJcXG4gICAgICAgICAgICDpnZLmmKU6IFxcXCJ5b3V0aFxcXCIsXFxyXFxuICAgICAgICAgICAg5aWz5oCnOiBcXFwiZmVtYWxlXFxcIixcXHJcXG4gICAgICAgICAgICDnnJ/lrp7kuovku7bmlLnnvJY6IFxcXCJyZWFsX2V2ZW50XFxcIixcXHJcXG4gICAgICAgICAgICDmmrTlips6IFxcXCJ2aW9sZW5jZVxcXCIsXFxyXFxuICAgICAgICAgICAg6buR55m9OiBcXFwiYmxhY2tfd2hpdGVcXFwiLFxcclxcbiAgICAgICAgICAgIOe+jumjnzogXFxcImZvb2RcXFwiLFxcclxcbiAgICAgICAgICAgIOaXheihjDogXFxcInRyYXZlbFxcXCIsXFxyXFxuICAgICAgICAgICAg5YS/56ulOiBcXFwiY2hpbGRcXFwiLFxcclxcbiAgICAgICAgICAgIOS6uuaApzogXFxcImh1bWFuaXR5XFxcIixcXHJcXG4gICAgICAgICAgICDlrrbluq06IFxcXCJmYW1pbHlcXFwiLFxcclxcbiAgICAgICAgICAgIOaWh+iJujogXFxcImxpdGVyYXJ5X2FydFxcXCIsXFxyXFxuICAgICAgICAgICAg5bCP6K+05pS557yWOiBcXFwibm92ZWxcXFwiLFxcclxcbiAgICAgICAgICAgIOaEn+S6ujogXFxcIm1vdmluZ1xcXCIsXFxyXFxuICAgICAgICAgICAg5Yqx5b+XOiBcXFwiaW5zcGlyYXRpb25cXFwiXFxyXFxuICAgICAgICB9LFxcclxcbiAgICAgICAgc3VidHlwZToge1xcclxcbiAgICAgICAgICAgIOWFqOmDqDogXFxcIlxcXCIsXFxyXFxuICAgICAgICAgICAg55S15b2xOiBcXFwibW92aWVcXFwiLFxcclxcbiAgICAgICAgICAgIOeUteinhuWJpzogXFxcInR2XFxcIlxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuICAgIGZvciAobGV0IGkgaW4gaXRlbXMpIHtcXHJcXG4gICAgICAgIGZvciAobGV0IGogaW4gaXRlbXNbaV0pIHtcXHJcXG4gICAgICAgICAgICBhLnB1c2goe1xcclxcbiAgICAgICAgICAgICAgICB0aXRsZTogdGVtcFtpXSA9PT0gaXRlbXNbaV1bal0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIGogKyAnIDwvZm9udD48L2I+JyA6IGosXFxyXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxyXFxuICAgICAgICAgICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eSNub0xvYWRpbmcjJykubGF6eVJ1bGUoKHQpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcigncGxheWxpc3QnLCAne1xcXCJzdWJ0eXBlXFxcIjpcXFwiXFxcIixcXFwidHlwZVxcXCI6XFxcImFsbFxcXCJ9JykpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgdGVtcFt0WzBdXSA9IHRbMV07XFxyXFxuICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwicGxheWxpc3RcXFwiLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxyXFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcclxcbiAgICAgICAgICAgICAgICB9LCBbaSwgaXRlbXNbaV1bal1dKVxcclxcbiAgICAgICAgICAgIH0pXFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICBhLnB1c2goe1xcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwiYmxhbmtfYmxvY2tcXFwiXFxyXFxuICAgICAgICB9KVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIGxldCBzID0gZ2V0RG91YmFuUmVzKFxcXCJodHRwczovL2Zyb2RvLmRvdWJhbi5jb20vYXBpL3YyL3NreW5ldC9uZXdfcGxheWxpc3RzXFxcIiArIFxcXCI/Y2F0ZWdvcnk9XFxcIiArIHRlbXAudHlwZSArIFxcXCImc3ViamVjdF90eXBlPVxcXCIgKyB0ZW1wLnN1YnR5cGUgKyAocGFnZSA/IFxcXCImc3RhcnQ9XFxcIiArIChwYWdlIC0gMSkgKiBjb3VudCArIFxcXCImY291bnQ9XFxcIiArIGNvdW50IDogXFxcIiZzdGFydD0wJmNvdW50PTEwXFxcIikpO1xcclxcbiAgICBsZXQgbCA9IHMuZGF0YVswXS5pdGVtcztcXHJcXG5cXHJcXG4gICAgbGV0IGkgPSBsLm1hcCgoZSA9PiAoe1xcclxcbiAgICAgICAgdGl0bGU6IGUudGl0bGUsXFxyXFxuICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkvJHBhZ2V7ZnlwYWdlfSNub0hpc3RvcnkjJykucnVsZSgodHlwZSwgaWQpID0+IHtcXHJcXG4gICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxyXFxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IFxcXCJwbGF5bGlzdFxcXCIpIHtcXHJcXG4gICAgICAgICAgICAgICAgZG91TGlzdChpZCwgTVlfUEFHRSwgNTApO1xcclxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICAgICAgICAgIHN1YmplY3RDb2xsZWN0aW9uTGlzdChNWV9QQUdFLCA1MCwgaWQpO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH0sIGUudHlwZSwgZS5pZCksXFxyXFxuICAgICAgICBpbWc6IGUuY292ZXJfdXJsICsgXFxcIkBSZWZlcmVyPVxcXCIgKyBlLmNvdmVyX3VybCxcXHJcXG4gICAgICAgIGRlc2M6IFxcXCLlhbFcXFwiICsgZS5pdGVtc19jb3VudCArIFxcXCLpg6hcXFwiXFxyXFxuICAgIH0pKSk7XFxyXFxuXFxyXFxuICAgIHJldHVybiBwYWdlID4gMSA/IGkgOiBhLmNvbmNhdChpKTtcXHJcXG59XFxyXFxuXFxyXFxuLy/mppzljZVcXHJcXG5mdW5jdGlvbiByYW5rTGlzdChwYWdlLCBjb3VudCkge1xcclxcbiAgICBpZiAoIWdldE15VmFyKCdyYW5rTGlzdCcpKSBwdXRNeVZhcigncmFua0xpc3QnLCAne1xcXCJ0eXBlXFxcIjpcXFwibW92aWVcXFwiLFxcXCJsaXN0XFxcIjpcXFwicmFua19saXN0XFxcIixcXFwieWVhcl9saXN0c1xcXCI6W10sXFxcImNhdGVnb3J5X2xpc3RzXFxcIjpbXSxcXFwieWVhclxcXCI6XFxcIlxcXCIsXFxcImNhdGVnb3J5XFxcIjpcXFwiXFxcIn0nKTtcXHJcXG4gICAgbGV0IGEgPSBbXTtcXHJcXG4gICAgbGV0IHRlbXAgPSBKU09OLnBhcnNlKGdldE15VmFyKCdyYW5rTGlzdCcpKTtcXHJcXG4gICAgbGV0IGNvbG9yID0gZ2V0Q29uZmlnKCdjaG9vc2VDb2xvcicpO1xcclxcblxcclxcbiAgICBsZXQgaXRlbXMgPSB7XFxyXFxuICAgICAgICDnlLXlvbE6ICdtb3ZpZScsXFxyXFxuICAgICAgICDnlLXop4bliac6ICd0didcXHJcXG4gICAgfVxcclxcbiAgICBmb3IgKGxldCBpIGluIGl0ZW1zKSB7XFxyXFxuICAgICAgICBhLnB1c2goe1xcclxcbiAgICAgICAgICAgIHRpdGxlOiB0ZW1wLnR5cGUgPT0gaXRlbXNbaV0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIGkgKyAnIDwvZm9udD48L2I+JyA6IGksXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXHJcXG4gICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChlKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcigncmFua0xpc3QnKSk7XFxyXFxuICAgICAgICAgICAgICAgIHRlbXAudHlwZSA9IGU7XFxyXFxuICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXCJyYW5rTGlzdFxcXCIsIEpTT04uc3RyaW5naWZ5KHRlbXApKTtcXHJcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXHJcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcclxcbiAgICAgICAgICAgIH0sIGl0ZW1zW2ldKVxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBhLnB1c2goe1xcclxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJibGFua19ibG9ja1xcXCJcXHJcXG4gICAgfSlcXHJcXG5cXHJcXG4gICAgbGV0IGxpc3QgPSB7XFxyXFxuICAgICAgICDlj6PnopHmppzljZU6ICdyYW5rX2xpc3QnLFxcclxcbiAgICAgICAg5bm05bqm5qac5Y2VOiAneWVhcl9yYW5rcycsXFxyXFxuICAgICAgICDnsbvlnovmppzljZU6ICdjYXRlZ29yeV9yYW5rcydcXHJcXG4gICAgfVxcclxcbiAgICBmb3IgKGxldCBpIGluIGxpc3QpIHtcXHJcXG4gICAgICAgIGEucHVzaCh7XFxyXFxuICAgICAgICAgICAgdGl0bGU6IHRlbXAubGlzdCA9PSBsaXN0W2ldID8gJ+KAnOKAnOKAneKAnTxiPiA8Zm9udCBjb2xvcj0nICsgY29sb3IgKyAnPicgKyBpICsgJyA8L2ZvbnQ+PC9iPicgOiBpLFxcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxyXFxuICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5I25vTG9hZGluZyMnKS5sYXp5UnVsZSgoZSkgPT4ge1xcclxcbiAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ3JhbmtMaXN0JykpO1xcclxcbiAgICAgICAgICAgICAgICB0ZW1wLmxpc3QgPSBlO1xcclxcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwicmFua0xpc3RcXFwiLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxyXFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxyXFxuICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXHJcXG4gICAgICAgICAgICB9LCBsaXN0W2ldKVxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBpZiAodGVtcC5saXN0ID09ICd5ZWFyX3JhbmtzJyAmJiB0ZW1wLnllYXJfbGlzdHMubGVuZ3RoID09IDApIHtcXHJcXG4gICAgICAgIGxldCB0ID0gZ2V0RG91YmFuUmVzKFxcXCJodHRwczovL2Zyb2RvLmRvdWJhbi5jb20vYXBpL3YyL1xcXCIgKyB0ZW1wLnR5cGUgKyAnL3JhbmtfbGlzdCcpO1xcclxcbiAgICAgICAgdGVtcC55ZWFyX2xpc3RzID0gdC5ncm91cHNbMV0udGFicztcXHJcXG4gICAgICAgIHB1dE15VmFyKCdyYW5rTGlzdCcsIEpTT04uc3RyaW5naWZ5KHRlbXApKTtcXHJcXG4gICAgfSBlbHNlIGlmICh0ZW1wLmxpc3QgPT0gJ2NhdGVnb3J5X3JhbmtzJyAmJiB0ZW1wLmNhdGVnb3J5X2xpc3RzLmxlbmd0aCA9PSAwKSB7XFxyXFxuICAgICAgICBsZXQgdCA9IGdldERvdWJhblJlcyhcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9cXFwiICsgdGVtcC50eXBlICsgJy9yYW5rX2xpc3QnKTtcXHJcXG4gICAgICAgIHRlbXAuY2F0ZWdvcnlfbGlzdHMgPSB0Lmdyb3Vwc1syXS50YWJzO1xcclxcbiAgICAgICAgcHV0TXlWYXIoJ3JhbmtMaXN0JywgSlNPTi5zdHJpbmdpZnkodGVtcCkpO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIGlmICh0ZW1wLmxpc3QgPT0gJ3llYXJfcmFua3MnKSB7XFxyXFxuICAgICAgICBhLnB1c2goe1xcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwiYmxhbmtfYmxvY2tcXFwiXFxyXFxuICAgICAgICB9KVxcclxcbiAgICAgICAgaWYgKCF0ZW1wLnllYXIpIHRlbXAueWVhciA9IHRlbXAueWVhcl9saXN0c1swXS5rZXk7XFxyXFxuICAgICAgICBmb3IgKGxldCB0IG9mIHRlbXAueWVhcl9saXN0cykge1xcclxcbiAgICAgICAgICAgIGEucHVzaCh7XFxyXFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0ZW1wLnllYXIgPT0gdC5rZXkgPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIHQudGl0bGUgKyAnIDwvZm9udD48L2I+JyA6IHQudGl0bGUsXFxyXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxyXFxuICAgICAgICAgICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eSNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGUpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcigncmFua0xpc3QnKSk7XFxyXFxuICAgICAgICAgICAgICAgICAgICB0ZW1wLnllYXIgPSBlO1xcclxcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcInJhbmtMaXN0XFxcIiwgSlNPTi5zdHJpbmdpZnkodGVtcCkpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXHJcXG4gICAgICAgICAgICAgICAgfSwgdC5rZXkpXFxyXFxuICAgICAgICAgICAgfSlcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfSBlbHNlIGlmICh0ZW1wLmxpc3QgPT0gJ2NhdGVnb3J5X3JhbmtzJykge1xcclxcbiAgICAgICAgYS5wdXNoKHtcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImJsYW5rX2Jsb2NrXFxcIlxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgICAgIGlmICghdGVtcC5jYXRlZ29yeSkgdGVtcC5jYXRlZ29yeSA9IHRlbXAuY2F0ZWdvcnlfbGlzdHNbMF0ua2V5O1xcclxcbiAgICAgICAgZm9yIChsZXQgdCBvZiB0ZW1wLmNhdGVnb3J5X2xpc3RzKSB7XFxyXFxuICAgICAgICAgICAgYS5wdXNoKHtcXHJcXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRlbXAuY2F0ZWdvcnkgPT0gdC5rZXkgPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIHQudGl0bGUgKyAnIDwvZm9udD48L2I+JyA6IHQudGl0bGUsXFxyXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxyXFxuICAgICAgICAgICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eSNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGUpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcigncmFua0xpc3QnKSk7XFxyXFxuICAgICAgICAgICAgICAgICAgICB0ZW1wLmNhdGVnb3J5ID0gZTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXCJyYW5rTGlzdFxcXCIsIEpTT04uc3RyaW5naWZ5KHRlbXApKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxyXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxyXFxuICAgICAgICAgICAgICAgIH0sIHQua2V5KVxcclxcbiAgICAgICAgICAgIH0pXFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgbGV0IGwgPSBbXTtcXHJcXG4gICAgaWYgKHRlbXAubGlzdCA9PSAncmFua19saXN0JyAmJiBNWV9QQUdFID09IDEpIHtcXHJcXG4gICAgICAgIGxldCBzID0gZ2V0RG91YmFuUmVzKFxcXCJodHRwczovL2Zyb2RvLmRvdWJhbi5jb20vYXBpL3YyL1xcXCIgKyB0ZW1wLnR5cGUgKyAnLycgKyB0ZW1wLmxpc3QgKyAocGFnZSA/IFxcXCI/c3RhcnQ9XFxcIiArIChwYWdlIC0gMSkgKiBjb3VudCArIFxcXCImY291bnQ9XFxcIiArIGNvdW50IDogXFxcIj9zdGFydD0wJmNvdW50PTEwXFxcIikpO1xcclxcbiAgICAgICAgbCA9IHMuZ3JvdXBzWzBdLnNlbGVjdGVkX2NvbGxlY3Rpb25zO1xcclxcbiAgICB9IGVsc2UgaWYgKHRlbXAubGlzdCA9PSAneWVhcl9yYW5rcycgJiYgTVlfUEFHRSA9PSAxKSB7XFxyXFxuICAgICAgICBsZXQgcyA9IGdldERvdWJhblJlcyhcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9cXFwiICsgdGVtcC50eXBlICsgJy8nICsgdGVtcC5saXN0ICsgJz95ZWFyPScgKyB0ZW1wLnllYXIgKyAocGFnZSA/IFxcXCImc3RhcnQ9XFxcIiArIChwYWdlIC0gMSkgKiBjb3VudCArIFxcXCImY291bnQ9XFxcIiArIGNvdW50IDogXFxcIiZzdGFydD0wJmNvdW50PTEwXFxcIikpO1xcclxcbiAgICAgICAgbCA9IHMuZ3JvdXBzWzBdLnNlbGVjdGVkX2NvbGxlY3Rpb25zO1xcclxcbiAgICB9IGVsc2UgaWYgKHRlbXAubGlzdCA9PSAnY2F0ZWdvcnlfcmFua3MnKSB7XFxyXFxuICAgICAgICBsZXQgcyA9IGdldERvdWJhblJlcyhcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9cXFwiICsgdGVtcC50eXBlICsgJy8nICsgdGVtcC5saXN0ICsgJz9jYXRlZ29yeT0nICsgdGVtcC5jYXRlZ29yeSArIChwYWdlID8gXFxcIiZzdGFydD1cXFwiICsgKHBhZ2UgLSAxKSAqIGNvdW50ICsgXFxcIiZjb3VudD1cXFwiICsgY291bnQgOiBcXFwiJnN0YXJ0PTAmY291bnQ9MTBcXFwiKSk7XFxyXFxuICAgICAgICBsID0gcy5zZWxlY3RlZF9jb2xsZWN0aW9ucztcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBsZXQgaSA9IFtdO1xcclxcbiAgICBpZiAodGVtcC5saXN0ID09ICdjYXRlZ29yeV9yYW5rcycpIHtcXHJcXG4gICAgICAgIGkgPSBsLm1hcCgoZSA9PiAoe1xcclxcbiAgICAgICAgICAgIHRpdGxlOiAn4oCc4oCc4oCd4oCdJyArIGUudGl0bGUuYm9sZCgpLFxcclxcbiAgICAgICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eS8kcGFnZXtmeXBhZ2V9I25vSGlzdG9yeSMnKS5ydWxlKCh0eXBlLCBpZCkgPT4ge1xcclxcbiAgICAgICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxyXFxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcXFwicGxheWxpc3RcXFwiKSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBkb3VMaXN0KGlkLCBNWV9QQUdFLCA1MCk7XFxyXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBzdWJqZWN0Q29sbGVjdGlvbkxpc3QoTVlfUEFHRSwgNTAsIGlkKTtcXHJcXG4gICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIH0sIGUudHlwZSwgZS5pZCksXFxyXFxuICAgICAgICAgICAgaW1nOiBlLmNvdmVyX3VybCArIFxcXCJAUmVmZXJlcj1cXFwiICsgZS5jb3Zlcl91cmwsXFxyXFxuICAgICAgICAgICAgZGVzYzogXFxcIuWFsVxcXCIgKyBlLnRvdGFsICsgXFxcIumDqFxcXCJcXHJcXG4gICAgICAgIH0pKSk7XFxyXFxuICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICBpID0gbC5tYXAoKGUgPT4gKHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogJycgLyon4oCc4oCc4oCd4oCdJyArIGUubWVkaXVtX25hbWUgKyAnXFxcXG4nICsgZ2V0U3Ryb25nVGV4dChlLnRpdGxlKSovICxcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ2NhcmRfcGljXzInLFxcclxcbiAgICAgICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eS8kcGFnZXtmeXBhZ2V9I25vSGlzdG9yeSMnKS5ydWxlKCh0eXBlLCBpZCwgc3RpdGxlKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgIHNldFBhZ2VUaXRsZShzdGl0bGUpO1xcclxcbiAgICAgICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxyXFxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcXFwicGxheWxpc3RcXFwiKSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBkb3VMaXN0KGlkLCBNWV9QQUdFLCA1MCk7XFxyXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBzdWJqZWN0Q29sbGVjdGlvbkxpc3QoTVlfUEFHRSwgNTAsIGlkKTtcXHJcXG4gICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIH0sIGUudHlwZSwgZS5pZCwgZS50aXRsZSksXFxyXFxuICAgICAgICAgICAgaW1nOiBlLmNvdmVyX3VybCArIFxcXCJAUmVmZXJlcj1cXFwiICsgZS5jb3Zlcl91cmwsXFxyXFxuICAgICAgICAgICAgZGVzYzogXFxcIjBcXFwiXFxyXFxuICAgICAgICB9KSkpO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIHJldHVybiBwYWdlID4gMSA/IGkgOiBhLmNvbmNhdChpKTtcXHJcXG59XFxyXFxuXFxyXFxuLy/lsIbkuIrmmKBcXHJcXG5mdW5jdGlvbiBjb21pbmdMaXN0KHBhZ2UsIGNvdW50KSB7XFxyXFxuICAgIGlmICghZ2V0TXlWYXIoJ2NvbWluZycpKSBwdXRNeVZhcignY29taW5nJywgJ3tcXFwidHlwZVxcXCI6XFxcIm1vdmllXFxcIixcXFwicmFua1xcXCI6XFxcIiZzb3J0Ynk9aG90XFxcIixcXFwibG9jYWxcXFwiOlxcXCJkb21lc3RpY1xcXCIsXFxcImFyZWFcXFwiOlxcXCJcXFwiLFxcXCJmaWx0ZXJcXFwiOlxcXCJcXFwifScpO1xcclxcbiAgICBsZXQgYSA9IFtdO1xcclxcbiAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2NvbWluZycpKTtcXHJcXG4gICAgbGV0IGNvbG9yID0gZ2V0Q29uZmlnKCdjaG9vc2VDb2xvcicpO1xcclxcblxcclxcbiAgICBsZXQgaXRlbXMgPSB7XFxyXFxuICAgICAgICDnlLXlvbE6ICdtb3ZpZScsXFxyXFxuICAgICAgICDnlLXop4bliac6ICd0didcXHJcXG4gICAgfVxcclxcbiAgICBmb3IgKGxldCBpIGluIGl0ZW1zKSB7XFxyXFxuICAgICAgICBhLnB1c2goe1xcclxcbiAgICAgICAgICAgIHRpdGxlOiB0ZW1wLnR5cGUgPT09IGl0ZW1zW2ldID8gJ+KAnOKAnOKAneKAnTxiPiA8Zm9udCBjb2xvcj0nICsgY29sb3IgKyAnPicgKyBpICsgJyA8L2ZvbnQ+PC9iPicgOiBpLFxcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxyXFxuICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5I25vTG9hZGluZyMnKS5sYXp5UnVsZSgoZSkgPT4ge1xcclxcbiAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2NvbWluZycpKTtcXHJcXG4gICAgICAgICAgICAgICAgdGVtcC50eXBlID0gZTtcXHJcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcImNvbWluZ1xcXCIsIEpTT04uc3RyaW5naWZ5KHRlbXApKTtcXHJcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXHJcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcclxcbiAgICAgICAgICAgIH0sIGl0ZW1zW2ldKVxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgfVxcclxcbiAgICBsZXQgcmFuayA9IHtcXHJcXG4gICAgICAgIOeDreW6pjogJyZzb3J0Ynk9aG90JyxcXHJcXG4gICAgICAgIOaXtumXtDogJydcXHJcXG4gICAgfVxcclxcbiAgICBhLnB1c2goe1xcclxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJibGFua19ibG9ja1xcXCJcXHJcXG4gICAgfSlcXHJcXG4gICAgZm9yIChsZXQgaSBpbiByYW5rKSB7XFxyXFxuICAgICAgICBhLnB1c2goe1xcclxcbiAgICAgICAgICAgIHRpdGxlOiB0ZW1wLnJhbmsgPT09IHJhbmtbaV0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIGkgKyAnIDwvZm9udD48L2I+JyA6IGksXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXHJcXG4gICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChlKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcignY29taW5nJykpO1xcclxcbiAgICAgICAgICAgICAgICB0ZW1wLnJhbmsgPSBlO1xcclxcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwiY29taW5nXFxcIiwgSlNPTi5zdHJpbmdpZnkodGVtcCkpO1xcclxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcclxcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxyXFxuICAgICAgICAgICAgfSwgcmFua1tpXSlcXHJcXG4gICAgICAgIH0pXFxyXFxuICAgIH1cXHJcXG4gICAgbGV0IGxvY2FsID0ge1xcclxcbiAgICAgICAg5Zu95YaFOiAnZG9tZXN0aWMnLFxcclxcbiAgICAgICAg5YWo55CDOiAnaW50ZXJuYXRpb25hbCdcXHJcXG4gICAgfVxcclxcbiAgICBpZiAodGVtcC50eXBlID09ICdtb3ZpZScpIHtcXHJcXG4gICAgICAgIGEucHVzaCh7XFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJibGFua19ibG9ja1xcXCJcXHJcXG4gICAgICAgIH0pXFxyXFxuICAgICAgICBmb3IgKGxldCBpIGluIGxvY2FsKSB7XFxyXFxuICAgICAgICAgICAgYS5wdXNoKHtcXHJcXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRlbXAubG9jYWwgPT09IGxvY2FsW2ldID8gJ+KAnOKAnOKAneKAnTxiPiA8Zm9udCBjb2xvcj0nICsgY29sb3IgKyAnPicgKyBpICsgJyA8L2ZvbnQ+PC9iPicgOiBpLFxcclxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcclxcbiAgICAgICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChlKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2NvbWluZycpKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHRlbXAubG9jYWwgPSBlO1xcclxcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcImNvbWluZ1xcXCIsIEpTT04uc3RyaW5naWZ5KHRlbXApKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxyXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxyXFxuICAgICAgICAgICAgICAgIH0sIGxvY2FsW2ldKVxcclxcbiAgICAgICAgICAgIH0pXFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG4gICAgbGV0IGFyZWEgPSB7XFxyXFxuICAgICAgICDlhajpg6g6ICcnLFxcclxcbiAgICAgICAg576O5Zu9OiAnJmFyZWFfZmlsdGVyPWFtZXJpY2FuJyxcXHJcXG4gICAgICAgIOasp+a0sjogJyZhcmVhX2ZpbHRlcj1ldXJvcGUnLFxcclxcbiAgICAgICAg5pel5pysOiAnJmFyZWFfZmlsdGVyPWphcGFuZXNlJyxcXHJcXG4gICAgICAgIOmfqeWbvTogJyZhcmVhX2ZpbHRlcj1rb3JlYW4nXFxyXFxuICAgIH1cXHJcXG4gICAgaWYgKHRlbXAudHlwZSA9PSAnbW92aWUnICYmIHRlbXAubG9jYWwgPT0gJ2ludGVybmF0aW9uYWwnKSB7XFxyXFxuICAgICAgICBhLnB1c2goe1xcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwiYmxhbmtfYmxvY2tcXFwiXFxyXFxuICAgICAgICB9KVxcclxcbiAgICAgICAgZm9yIChsZXQgaSBpbiBhcmVhKSB7XFxyXFxuICAgICAgICAgICAgYS5wdXNoKHtcXHJcXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRlbXAuYXJlYSA9PT0gYXJlYVtpXSA/ICfigJzigJzigJ3igJ08Yj4gPGZvbnQgY29sb3I9JyArIGNvbG9yICsgJz4nICsgaSArICcgPC9mb250PjwvYj4nIDogaSxcXHJcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXHJcXG4gICAgICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5I25vTG9hZGluZyMnKS5sYXp5UnVsZSgoZSkgPT4ge1xcclxcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXAgPSBKU09OLnBhcnNlKGdldE15VmFyKCdjb21pbmcnKSk7XFxyXFxuICAgICAgICAgICAgICAgICAgICB0ZW1wLmFyZWEgPSBlO1xcclxcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcImNvbWluZ1xcXCIsIEpTT04uc3RyaW5naWZ5KHRlbXApKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxyXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxyXFxuICAgICAgICAgICAgICAgIH0sIGFyZWFbaV0pXFxyXFxuICAgICAgICAgICAgfSlcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgICBsZXQgZmlsdGVyID0ge1xcclxcbiAgICAgICAg5YWo6YOoOiAnJyxcXHJcXG4gICAgICAgIOWbveS6p+WJpzogJyZ0eXBlX2ZpbHRlcj10dl9kb21lc3RpYycsXFxyXFxuICAgICAgICDmrKfnvo7liac6ICcmdHlwZV9maWx0ZXI9dHZfYW1lcmljYW4nLFxcclxcbiAgICAgICAg5pel5YmnOiAnJnR5cGVfZmlsdGVyPXR2X2phcGFuZXNlJyxcXHJcXG4gICAgICAgIOmfqeWJpzogJyZ0eXBlX2ZpbHRlcj10dl9rb3JlYW4nLFxcclxcbiAgICAgICAg5Yqo55S7OiAnJnR5cGVfZmlsdGVyPXR2X2FuaW1hdGlvbicsXFxyXFxuICAgICAgICDlm73lhoXnu7zoibo6ICcmdHlwZV9maWx0ZXI9c2hvd19kb21lc3RpYycsXFxyXFxuICAgICAgICDlm73lpJbnu7zoibo6ICcmdHlwZV9maWx0ZXI9c2hvd19mb3JlaWduJ1xcclxcbiAgICB9XFxyXFxuICAgIGlmICh0ZW1wLnR5cGUgPT0gJ3R2Jykge1xcclxcbiAgICAgICAgYS5wdXNoKHtcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImJsYW5rX2Jsb2NrXFxcIlxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgICAgIGZvciAobGV0IGkgaW4gZmlsdGVyKSB7XFxyXFxuICAgICAgICAgICAgYS5wdXNoKHtcXHJcXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRlbXAuZmlsdGVyID09PSBmaWx0ZXJbaV0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIGkgKyAnIDwvZm9udD48L2I+JyA6IGksXFxyXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxyXFxuICAgICAgICAgICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eSNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGUpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcignY29taW5nJykpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgdGVtcC5maWx0ZXIgPSBlO1xcclxcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcImNvbWluZ1xcXCIsIEpTT04uc3RyaW5naWZ5KHRlbXApKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxyXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxyXFxuICAgICAgICAgICAgICAgIH0sIGZpbHRlcltpXSlcXHJcXG4gICAgICAgICAgICB9KVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIGxldCBzID0gZ2V0RG91YmFuUmVzKFxcXCJodHRwczovL2Zyb2RvLmRvdWJhbi5jb20vYXBpL3YyL1xcXCIgKyB0ZW1wLnR5cGUgKyBcXFwiL2NvbWluZ19zb29uXFxcIiArIFxcXCI/YXJlYT1cXFwiICsgdGVtcC5sb2NhbCArIHRlbXAucmFuayArIHRlbXAuYXJlYSArIHRlbXAuZmlsdGVyICsgKHBhZ2UgPyBcXFwiJnN0YXJ0PVxcXCIgKyAocGFnZSAtIDEpICogY291bnQgKyBcXFwiJmNvdW50PVxcXCIgKyBjb3VudCA6IFxcXCImc3RhcnQ9MCZjb3VudD0xMFxcXCIpKTtcXHJcXG4gICAgbGV0IGwgPSBzLnN1YmplY3RzO1xcclxcbiAgICBsZXQgZGV0YWlsc1ZpZXdDb25maWdzID0gZ2V0Q29uZmlnKCdkZXRhaWxzVmlld0NvbmZpZ3MnKTtcXHJcXG5cXHJcXG4gICAgbGV0IGkgPSBsLm1hcCgoZSA9PiB7XFxyXFxuICAgICAgICBsZXQgdHlwZSA9IGUudHlwZSxcXHJcXG4gICAgICAgICAgICBpZCA9IGUuaWQsXFxyXFxuICAgICAgICAgICAgdGl0bGUgPSBlLnRpdGxlO1xcclxcbiAgICAgICAgbGV0IHVzZUNvbmZpZyA9IGRldGFpbHNWaWV3Q29uZmlnc1tkZXRhaWxzVmlld0NvbmZpZ3MudXNlXS5jb25maWc7XFxyXFxuICAgICAgICBsZXQgdXJsUGFyYW1zID0ge307XFxyXFxuICAgICAgICBpZiAodXNlQ29uZmlnLnN0YXJ0c1dpdGgoJ3snKSkge1xcclxcbiAgICAgICAgICAgIGV2YWwoJ3VybFBhcmFtcyA9ICcgKyB1c2VDb25maWcpO1xcclxcbiAgICAgICAgfSBlbHNlIHtcXHJcXG4gICAgICAgICAgICB1cmxQYXJhbXMudXJsID0gJChcXFwiaGlrZXI6Ly9lbXB0eSNub0hpc3RvcnkjI2ltbWVyc2l2ZVRoZW1lI1xcXCIgKyAnP3R5cGU9JyArIHR5cGUgKyAnJmlkPScgKyBpZCkucnVsZSgodHlwZSwgaWQsIHRpdGxlLCB1c2VDb25maWcpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcclxcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gXFxcInBsYXlsaXN0XFxcIikge1xcclxcbiAgICAgICAgICAgICAgICAgICAgZG91TGlzdChpZCwgTVlfUEFHRSwgNTApO1xcclxcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcclxcbiAgICAgICAgICAgICAgICAgICAgZXZhbCh1c2VDb25maWcpO1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgfSwgdHlwZSwgaWQsIHRpdGxlLCB1c2VDb25maWcpO1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgcmV0dXJuIHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogdGl0bGUgKyBcXFwi77yIXFxcIiArIGUueWVhciArIFxcXCLvvIlcXFwiLFxcclxcbiAgICAgICAgICAgIHVybDogdXJsUGFyYW1zLnVybCxcXHJcXG4gICAgICAgICAgICBleHRyYTogdXJsUGFyYW1zLmV4dHJhLFxcclxcbiAgICAgICAgICAgIGltZzogZS5jb3Zlcl91cmwgKyBcXFwiQFJlZmVyZXI9XFxcIiArIGUuY292ZXJfdXJsLFxcclxcbiAgICAgICAgICAgIGRlc2M6IFxcXCLkuIrmmKDml6XmnJ86XFxcIiArIGUucHViZGF0ZSArIFxcXCJcXFxcblxcXCIgKyBlLndpc2hfY291bnQgKyBcXFwi5Lq65oOz55yLXFxcIiArIFxcXCJcXFxcblxcXCIgKyBlLm51bGxfcmF0aW5nX3JlYXNvblxcclxcbiAgICAgICAgfVxcclxcbiAgICB9KSk7XFxyXFxuXFxyXFxuICAgIHJldHVybiBwYWdlID4gMSA/IGkgOiBhLmNvbmNhdChpKTtcXHJcXG59XFxyXFxuXFxyXFxuLy/niYfljZXor6bmg4VcXHJcXG5mdW5jdGlvbiBzdWJqZWN0Q29sbGVjdGlvbkxpc3QocGFnZSwgY291bnQsIGlkKSB7XFxyXFxuICAgIGlmICghZ2V0TXlWYXIoJ3JhbmtpbmcnKSkgcHV0TXlWYXIoJ3JhbmtpbmcnLCAne1xcXCJpdGVtXFxcIjpcXFwibW92aWVfcmVhbF90aW1lX2hvdGVzdFxcXCIsXFxcInBsYXlhYmxlXFxcIjpcXFwiMFxcXCIsXFxcInNjb3JlXFxcIjpcXFwiMC0xMFxcXCJ9Jyk7XFxyXFxuICAgIGxldCBhID0gW107XFxyXFxuICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcigncmFua2luZycpKTtcXHJcXG4gICAgbGV0IGNvbG9yID0gZ2V0Q29uZmlnKCdjaG9vc2VDb2xvcicpO1xcclxcblxcclxcbiAgICBsZXQgaXRlbXMgPSB7XFxyXFxuICAgICAgICDnlLXlvbE6IHtcXHJcXG4gICAgICAgICAgICDlrp7ml7bng63pl6jnlLXlvbE6ICdtb3ZpZV9yZWFsX3RpbWVfaG90ZXN0JyxcXHJcXG4gICAgICAgICAgICDkuIDlkajlj6PnopHnlLXlvbE6ICdtb3ZpZV93ZWVrbHlfYmVzdCcsXFxyXFxuICAgICAgICAgICAgdG9wMjUw55S15b2xOiAnbW92aWVfdG9wMjUwJ1xcclxcbiAgICAgICAgfSxcXHJcXG4gICAgICAgIOeUteinhuWJpzoge1xcclxcbiAgICAgICAgICAgIOWunuaXtueDremXqOWJp+mbhjogJ3R2X3JlYWxfdGltZV9ob3Rlc3QnLFxcclxcbiAgICAgICAgICAgIOWNjuivreWPo+eikeWJp+mbhjogJ3R2X2NoaW5lc2VfYmVzdF93ZWVrbHknLFxcclxcbiAgICAgICAgICAgIOWFqOeQg+WPo+eikeWJp+mbhjogJ3R2X2dsb2JhbF9iZXN0X3dlZWtseSdcXHJcXG4gICAgICAgIH0sXFxyXFxuICAgICAgICDnu7zoibo6IHtcXHJcXG4gICAgICAgICAgICDlm73lhoXlj6PnopHnu7zoibo6ICdzaG93X2NoaW5lc2VfYmVzdF93ZWVrbHknLFxcclxcbiAgICAgICAgICAgIOWbveWkluWPo+eikee7vOiJujogJ3Nob3dfZ2xvYmFsX2Jlc3Rfd2Vla2x5J1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuICAgIGZvciAobGV0IGkgaW4gaXRlbXMpIHtcXHJcXG4gICAgICAgIGZvciAobGV0IGogaW4gaXRlbXNbaV0pIHtcXHJcXG4gICAgICAgICAgICBhLnB1c2goe1xcclxcbiAgICAgICAgICAgICAgICB0aXRsZTogdGVtcC5pdGVtID09IGl0ZW1zW2ldW2pdID8gJ+KAnOKAnOKAneKAnTxiPiA8Zm9udCBjb2xvcj0nICsgY29sb3IgKyAnPicgKyBqICsgJyA8L2ZvbnQ+PC9iPicgOiBqLFxcclxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcclxcbiAgICAgICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChlKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ3JhbmtpbmcnKSk7XFxyXFxuICAgICAgICAgICAgICAgICAgICB0ZW1wLml0ZW0gPSBlO1xcclxcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcInJhbmtpbmdcXFwiLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxyXFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcclxcbiAgICAgICAgICAgICAgICB9LCBpdGVtc1tpXVtqXSlcXHJcXG4gICAgICAgICAgICB9KVxcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgYS5wdXNoKHtcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImJsYW5rX2Jsb2NrXFxcIlxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBhLnB1c2goe1xcclxcbiAgICAgICAgY29sX3R5cGU6ICdibGFua19ibG9jaydcXHJcXG4gICAgfSlcXHJcXG5cXHJcXG4gICAgbGV0IGkgPSBbXTtcXHJcXG4gICAgbGV0IHBsYXlhYmxlID0ge1xcclxcbiAgICAgICAg5YWo6YOo5b2x54mHOiAnMCcsXFxyXFxuICAgICAgICDku4XmnInniYfmupA6ICcxJ1xcclxcbiAgICB9XFxyXFxuICAgIGZvciAobGV0IHIgaW4gcGxheWFibGUpIHtcXHJcXG4gICAgICAgIGkucHVzaCh7XFxyXFxuICAgICAgICAgICAgdGl0bGU6IHRlbXAucGxheWFibGUgPT0gcGxheWFibGVbcl0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIHIgKyAnIDwvZm9udD48L2I+JyA6IHIsXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXHJcXG4gICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOiAvL2VtcHR5I25vTG9hZGluZyMnKS5sYXp5UnVsZSgoZSkgPT4ge1xcclxcbiAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ3JhbmtpbmcnKSk7XFxyXFxuICAgICAgICAgICAgICAgIHRlbXAucGxheWFibGUgPSBlO1xcclxcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwicmFua2luZ1xcXCIsIEpTT04uc3RyaW5naWZ5KHRlbXApKTtcXHJcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXHJcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcclxcbiAgICAgICAgICAgIH0sIHBsYXlhYmxlW3JdKVxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBpLnB1c2goe1xcclxcbiAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ08Yj4gPGZvbnQgY29sb3I9JyArIGNvbG9yICsgJz7or4TliIbljLrpl7Q6JyArIHRlbXAuc2NvcmUgKyAnIDwvZm9udD48L2I+JyxcXHJcXG4gICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxyXFxuICAgICAgICB1cmw6ICQodGVtcC5zY29yZSwgJ+ivhOWIhuW6lOWcqDAtMTDkuYvpl7QnKS5pbnB1dCgoKSA9PiB7XFxyXFxuICAgICAgICAgICAgbGV0IHRlbXAgPSBKU09OLnBhcnNlKGdldE15VmFyKCdyYW5raW5nJykpO1xcclxcbiAgICAgICAgICAgIGxldCBpbnB1dHMgPSBpbnB1dC5zcGxpdCgnLScpO1xcclxcbiAgICAgICAgICAgIGlmIChpbnB1dHMubGVuZ3RoID09IDIgJiYgaW5wdXRzLmV2ZXJ5KGUgPT4gZSA+PSAwICYmIGUgPD0gMTApICYmIHBhcnNlRmxvYXQoaW5wdXRzWzBdKSA8IGlucHV0c1sxXSkge1xcclxcbiAgICAgICAgICAgICAgICB0ZW1wLnNjb3JlID0gaW5wdXQ7XFxyXFxuICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXCJyYW5raW5nXFxcIiwgSlNPTi5zdHJpbmdpZnkodGVtcCkpO1xcclxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcclxcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxyXFxuICAgICAgICAgICAgfSBlbHNlIHtcXHJcXG4gICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+ivt+ato+ehrui+k+WFpSdcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9KVxcclxcbiAgICB9KVxcclxcblxcclxcbiAgICBsZXQgdCA9IGdldERvdWJhblJlcyhcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9zdWJqZWN0X2NvbGxlY3Rpb24vXFxcIiArIChpZCB8fCB0ZW1wLml0ZW0pKTtcXHJcXG4gICAgaS5wdXNoKHtcXHJcXG4gICAgICAgIHRpdGxlOiB0LnRpdGxlICsgJyjlhbEnICsgdC50b3RhbCArICfpg6gpJyxcXHJcXG4gICAgICAgIGRlc2M6IHQuZGVzY3JpcHRpb24sXFxyXFxuICAgICAgICAvKmltZzogdC5oZWFkZXJfYmdfaW1hZ2UgKyBcXFwiQFJlZmVyZXI9XFxcIiArIHQuaGVhZGVyX2JnX2ltYWdlLFxcclxcbiAgICAgICAgdXJsOiB0LmhlYWRlcl9iZ19pbWFnZSArIFxcXCI/dHlwZT0uanBnQFJlZmVyZXI9XFxcIiArIHQuaGVhZGVyX2JnX2ltYWdlICsgXFxcIj90eXBlPS5qcGdcXFwiLCovXFxyXFxuICAgICAgICB1cmw6ICd0b2FzdDovL+eCueaIkeW5suWYmycsXFxyXFxuICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfMVxcXCJcXHJcXG4gICAgfSlcXHJcXG5cXHJcXG4gICAgbGV0IHMgPSBnZXREb3ViYW5SZXMoXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvc3ViamVjdF9jb2xsZWN0aW9uL1xcXCIgKyAoaWQgfHwgdGVtcC5pdGVtKSArIFxcXCIvaXRlbXM/XFxcIiArIChwYWdlID8gXFxcInN0YXJ0PVxcXCIgKyAocGFnZSAtIDEpICogY291bnQgKyBcXFwiJmNvdW50PVxcXCIgKyBjb3VudCA6IFxcXCJzdGFydD0wJmNvdW50PTUwXFxcIikpO1xcclxcbiAgICBsZXQgbCA9IHMuc3ViamVjdF9jb2xsZWN0aW9uX2l0ZW1zO1xcclxcbiAgICBpZiAodGVtcC5wbGF5YWJsZSA9PSAnMScpIGwgPSBsLmZpbHRlcihlID0+ICEhZS5oYXNfbGluZXdhdGNoKTtcXHJcXG4gICAgaWYgKHRlbXAuc2NvcmUgIT0gJzAtMTAnKSB7XFxyXFxuICAgICAgICBsID0gbC5maWx0ZXIoZSA9PiB7XFxyXFxuICAgICAgICAgICAgbGV0IHIgPSB0ZW1wLnNjb3JlLnNwbGl0KCctJyk7XFxyXFxuICAgICAgICAgICAgcmV0dXJuIGUucmF0aW5nICYmIGUucmF0aW5nLnZhbHVlIDwgclsxXSAmJiBlLnJhdGluZy52YWx1ZSA+IHJbMF07XFxyXFxuICAgICAgICB9KTtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBsZXQgZGV0YWlsc1ZpZXdDb25maWdzID0gZ2V0Q29uZmlnKCdkZXRhaWxzVmlld0NvbmZpZ3MnKTtcXHJcXG4gICAgbGV0IHIgPSBsLm1hcCgoZSA9PiB7XFxyXFxuICAgICAgICBsZXQgdHlwZSA9IGUudHlwZSxcXHJcXG4gICAgICAgICAgICBpZCA9IGUuaWQsXFxyXFxuICAgICAgICAgICAgdGl0bGUgPSBlLnRpdGxlO1xcclxcbiAgICAgICAgbGV0IHVzZUNvbmZpZyA9IGRldGFpbHNWaWV3Q29uZmlnc1tkZXRhaWxzVmlld0NvbmZpZ3MudXNlXS5jb25maWc7XFxyXFxuICAgICAgICBsZXQgdXJsUGFyYW1zID0ge307XFxyXFxuICAgICAgICBpZiAodXNlQ29uZmlnLnN0YXJ0c1dpdGgoJ3snKSkge1xcclxcbiAgICAgICAgICAgIGV2YWwoJ3VybFBhcmFtcyA9ICcgKyB1c2VDb25maWcpO1xcclxcbiAgICAgICAgfSBlbHNlIHtcXHJcXG4gICAgICAgICAgICB1cmxQYXJhbXMudXJsID0gJChcXFwiaGlrZXI6Ly9lbXB0eSNub0hpc3RvcnkjI2ltbWVyc2l2ZVRoZW1lI1xcXCIgKyAnP3R5cGU9JyArIHR5cGUgKyAnJmlkPScgKyBpZCkucnVsZSgodHlwZSwgaWQsIHRpdGxlLCB1c2VDb25maWcpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcclxcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gXFxcInBsYXlsaXN0XFxcIikge1xcclxcbiAgICAgICAgICAgICAgICAgICAgZG91TGlzdChpZCwgTVlfUEFHRSwgNTApO1xcclxcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcclxcbiAgICAgICAgICAgICAgICAgICAgZXZhbCh1c2VDb25maWcpO1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgfSwgdHlwZSwgaWQsIHRpdGxlLCB1c2VDb25maWcpO1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgcmV0dXJuIHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogdGl0bGUsXFxyXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX3ZlcnRpY2FsX3BpYycsXFxyXFxuICAgICAgICAgICAgdXJsOiB1cmxQYXJhbXMudXJsLFxcclxcbiAgICAgICAgICAgIGV4dHJhOiB1cmxQYXJhbXMuZXh0cmEsXFxyXFxuICAgICAgICAgICAgaW1nOiBlLnBpYy5ub3JtYWwgKyBcXFwiQFJlZmVyZXI9XFxcIiArIGUucGljLm5vcm1hbCxcXHJcXG4gICAgICAgICAgICBkZXNjOiBlLmNhcmRfc3VidGl0bGUuc3BsaXQoXFxcIi9cXFwiKS5maWx0ZXIoKChlLCB0KSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgIGlmICh0IDwgMykgcmV0dXJuIGVcXHJcXG4gICAgICAgICAgICB9KSkuam9pbihcXFwiLFxcXCIpICsgXFxcIlxcXFxuXFxcIiArIChlLnJhdGluZyA/IGNvbXB1dGVSYXRpbmcoZS5yYXRpbmcubWF4LCBlLnJhdGluZy52YWx1ZSkgKyBcXFwiIFxcXCIgKyBlLnJhdGluZy52YWx1ZS50b0ZpeGVkKDEpICsgXFxcIuWIhlxcXCIgOiBcXFwi5pqC5peg6K+E5YiGXFxcIilcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfSkpO1xcclxcblxcclxcbiAgICBzZXRIb21lUmVzdWx0KHtcXHJcXG4gICAgICAgIGRhdGE6IHBhZ2UgPiAxID8gciA6IChpZCA/IGkuY29uY2F0KHIpIDogYS5jb25jYXQoaSkuY29uY2F0KHIpKVxcclxcbiAgICB9KVxcclxcbn1cXHJcXG5cXHJcXG4vL+ixhuWIl+ivpuaDhVxcclxcbmZ1bmN0aW9uIGRvdUxpc3QoaWQsIHBhZ2UsIGNvdW50KSB7XFxyXFxuICAgIGFkZExpc3RlbmVyKCdvbkNsb3NlJywgJ2NsZWFyTXlWYXIoXFxcImRvdUxpc3RcXFwiKScpO1xcclxcbiAgICBpZiAoIWdldE15VmFyKCdkb3VMaXN0JykpIHB1dE15VmFyKCdkb3VMaXN0JywgJ3tcXFwicGxheWFibGVcXFwiOlxcXCIwXFxcIixcXFwic2NvcmVcXFwiOlxcXCIwLTEwXFxcIn0nKTtcXHJcXG4gICAgbGV0IGkgPSBbXTtcXHJcXG4gICAgbGV0IHRlbXAgPSBKU09OLnBhcnNlKGdldE15VmFyKCdkb3VMaXN0JykpO1xcclxcbiAgICBsZXQgY29sb3IgPSBnZXRDb25maWcoJ2Nob29zZUNvbG9yJyk7XFxyXFxuXFxyXFxuICAgIGxldCBwbGF5YWJsZSA9IHtcXHJcXG4gICAgICAgIOWFqOmDqOW9seeJhzogJzAnLFxcclxcbiAgICAgICAg5LuF5pyJ54mH5rqQOiAnMSdcXHJcXG4gICAgfVxcclxcbiAgICBmb3IgKGxldCByIGluIHBsYXlhYmxlKSB7XFxyXFxuICAgICAgICBpLnB1c2goe1xcclxcbiAgICAgICAgICAgIHRpdGxlOiB0ZW1wLnBsYXlhYmxlID09IHBsYXlhYmxlW3JdID8gJ+KAnOKAnOKAneKAnTxiPiA8Zm9udCBjb2xvcj0nICsgY29sb3IgKyAnPicgKyByICsgJyA8L2ZvbnQ+PC9iPicgOiByLFxcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxyXFxuICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjogLy9lbXB0eSNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGUpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgbGV0IHRlbXAgPSBKU09OLnBhcnNlKGdldE15VmFyKCdkb3VMaXN0JykpO1xcclxcbiAgICAgICAgICAgICAgICB0ZW1wLnBsYXlhYmxlID0gZTtcXHJcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcImRvdUxpc3RcXFwiLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxyXFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxyXFxuICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXHJcXG4gICAgICAgICAgICB9LCBwbGF5YWJsZVtyXSlcXHJcXG4gICAgICAgIH0pXFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgaS5wdXNoKHtcXHJcXG4gICAgICAgIHRpdGxlOiAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+6K+E5YiG5Yy66Ze0OicgKyB0ZW1wLnNjb3JlICsgJyA8L2ZvbnQ+PC9iPicsXFxyXFxuICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcclxcbiAgICAgICAgdXJsOiAkKHRlbXAuc2NvcmUsICfor4TliIblupTlnKgwLTEw5LmL6Ze0JykuaW5wdXQoKCkgPT4ge1xcclxcbiAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcignZG91TGlzdCcpKTtcXHJcXG4gICAgICAgICAgICBsZXQgaW5wdXRzID0gaW5wdXQuc3BsaXQoJy0nKTtcXHJcXG4gICAgICAgICAgICBpZiAoaW5wdXRzLmxlbmd0aCA9PSAyICYmIGlucHV0cy5ldmVyeShlID0+IGUgPj0gMCAmJiBlIDw9IDEwKSAmJiBwYXJzZUZsb2F0KGlucHV0c1swXSkgPCBpbnB1dHNbMV0pIHtcXHJcXG4gICAgICAgICAgICAgICAgdGVtcC5zY29yZSA9IGlucHV0O1xcclxcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwiZG91TGlzdFxcXCIsIEpTT04uc3RyaW5naWZ5KHRlbXApKTtcXHJcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXHJcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcclxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/or7fmraPnoa7ovpPlhaUnXFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfSlcXHJcXG4gICAgfSlcXHJcXG5cXHJcXG4gICAgbGV0IHQgPSBnZXREb3ViYW5SZXMoXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvZG91bGlzdC9cXFwiICsgaWQpO1xcclxcbiAgICBpLnB1c2goe1xcclxcbiAgICAgICAgdGl0bGU6IHQudGl0bGUsXFxyXFxuICAgICAgICBkZXNjOiAn5YWxJyArIHQuaXRlbXNfY291bnQgKyAn6YOoKCcgKyB0LnBsYXlhYmxlX2NvdW50ICsgJ+mDqOWPr+aSreaUviknLFxcclxcbiAgICAgICAgLyppbWc6IHQuaGVhZGVyX2JnX2ltYWdlICsgXFxcIkBSZWZlcmVyPVxcXCIgKyB0LmhlYWRlcl9iZ19pbWFnZSxcXHJcXG4gICAgICAgIHVybDogdC5oZWFkZXJfYmdfaW1hZ2UgKyBcXFwiP3R5cGU9LmpwZ0BSZWZlcmVyPVxcXCIgKyB0LmhlYWRlcl9iZ19pbWFnZSArIFxcXCI/dHlwZT0uanBnXFxcIiwqL1xcclxcbiAgICAgICAgdXJsOiAndG9hc3Q6Ly/liKvngrnmiJEnLFxcclxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiXFxyXFxuICAgIH0pO1xcclxcblxcclxcbiAgICBsZXQgcyA9IGdldERvdWJhblJlcyhcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9kb3VsaXN0L1xcXCIgKyBpZCArIFxcXCIvcG9zdHNcXFwiICsgJz9wbGF5YWJsZT0nICsgdGVtcC5wbGF5YWJsZSArIChwYWdlID8gXFxcIiZzdGFydD1cXFwiICsgKHBhZ2UgLSAxKSAqIGNvdW50ICsgXFxcIiZjb3VudD1cXFwiICsgY291bnQgOiBcXFwiJnN0YXJ0PTAmY291bnQ9NTBcXFwiKSk7XFxyXFxuICAgIGxldCBsID0gcy5pdGVtcztcXHJcXG4gICAgaWYgKHRlbXAuc2NvcmUgIT0gJzAtMTAnKSB7XFxyXFxuICAgICAgICBsID0gbC5maWx0ZXIoZSA9PiB7XFxyXFxuICAgICAgICAgICAgbGV0IHIgPSB0ZW1wLnNjb3JlLnNwbGl0KCctJyk7XFxyXFxuICAgICAgICAgICAgcmV0dXJuIGUuY29udGVudC5zdWJqZWN0LnJhdGluZyAmJiBlLmNvbnRlbnQuc3ViamVjdC5yYXRpbmcudmFsdWUgPCByWzFdICYmIGUuY29udGVudC5zdWJqZWN0LnJhdGluZy52YWx1ZSA+IHJbMF07XFxyXFxuICAgICAgICB9KTtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICBsZXQgZGV0YWlsc1ZpZXdDb25maWdzID0gZ2V0Q29uZmlnKCdkZXRhaWxzVmlld0NvbmZpZ3MnKTtcXHJcXG4gICAgbGV0IHIgPSBsLm1hcCgoZSA9PiB7XFxyXFxuICAgICAgICBsZXQgdHlwZSA9IGUuY29udGVudC5zdWJqZWN0LnR5cGUsXFxyXFxuICAgICAgICAgICAgaWQgPSBlLmNvbnRlbnQuc3ViamVjdC5pZCxcXHJcXG4gICAgICAgICAgICB0aXRsZSA9IGUuY29udGVudC5zdWJqZWN0LnRpdGxlO1xcclxcbiAgICAgICAgbGV0IHVzZUNvbmZpZyA9IGRldGFpbHNWaWV3Q29uZmlnc1tkZXRhaWxzVmlld0NvbmZpZ3MudXNlXS5jb25maWc7XFxyXFxuICAgICAgICBsZXQgdXJsUGFyYW1zID0ge307XFxyXFxuICAgICAgICBpZiAodXNlQ29uZmlnLnN0YXJ0c1dpdGgoJ3snKSkge1xcclxcbiAgICAgICAgICAgIGV2YWwoJ3VybFBhcmFtcyA9ICcgKyB1c2VDb25maWcpO1xcclxcbiAgICAgICAgfSBlbHNlIHtcXHJcXG4gICAgICAgICAgICB1cmxQYXJhbXMudXJsID0gJChcXFwiaGlrZXI6Ly9lbXB0eSNub0hpc3RvcnkjI2ltbWVyc2l2ZVRoZW1lI1xcXCIgKyAnP3R5cGU9JyArIHR5cGUgKyAnJmlkPScgKyBpZCkucnVsZSgodHlwZSwgaWQsIHRpdGxlLCB1c2VDb25maWcpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcclxcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gXFxcInBsYXlsaXN0XFxcIikge1xcclxcbiAgICAgICAgICAgICAgICAgICAgZG91TGlzdChpZCwgTVlfUEFHRSwgNTApO1xcclxcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcclxcbiAgICAgICAgICAgICAgICAgICAgZXZhbCh1c2VDb25maWcpO1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgfSwgdHlwZSwgaWQsIHRpdGxlLCB1c2VDb25maWcpO1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgcmV0dXJuIHtcXHJcXG4gICAgICAgICAgICB0aXRsZTogdGl0bGUsXFxyXFxuICAgICAgICAgICAgdXJsOiB1cmxQYXJhbXMudXJsLFxcclxcbiAgICAgICAgICAgIGV4dHJhOiB1cmxQYXJhbXMuZXh0cmEsXFxyXFxuICAgICAgICAgICAgaW1nOiBlLmNvbnRlbnQuc3ViamVjdC5waWMubm9ybWFsICsgXFxcIkBSZWZlcmVyPVxcXCIgKyBlLmNvbnRlbnQuc3ViamVjdC5waWMubm9ybWFsLFxcclxcbiAgICAgICAgICAgIGRlc2M6IGUuY29udGVudC5zdWJqZWN0LmNhcmRfc3VidGl0bGUuc3BsaXQoXFxcIi9cXFwiKS5maWx0ZXIoKChlLCB0KSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgIGlmICh0IDwgMykgcmV0dXJuIGVcXHJcXG4gICAgICAgICAgICB9KSkuam9pbihcXFwiLFxcXCIpICsgXFxcIlxcXFxuXFxcIiArIChlLmNvbnRlbnQuc3ViamVjdC5yYXRpbmcgPyBjb21wdXRlUmF0aW5nKGUuY29udGVudC5zdWJqZWN0LnJhdGluZy5tYXgsIGUuY29udGVudC5zdWJqZWN0LnJhdGluZy52YWx1ZSkgKyBcXFwiIFxcXCIgKyBlLmNvbnRlbnQuc3ViamVjdC5yYXRpbmcudmFsdWUudG9GaXhlZCgxKSArIFxcXCLliIZcXFwiIDogXFxcIuaaguaXoOivhOWIhlxcXCIpXFxyXFxuICAgICAgICB9XFxyXFxuICAgIH0pKTtcXHJcXG5cXHJcXG4gICAgc2V0SG9tZVJlc3VsdCh7XFxyXFxuICAgICAgICBkYXRhOiBwYWdlID4gMSA/IHIgOiBpLmNvbmNhdChyKVxcclxcbiAgICB9KVxcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG5cXHJcXG4vL+inhumikeaooeWdl1xcclxcbmZ1bmN0aW9uIHZpZGVvVXJsc01vZHVsZShkLCB0eXBlLCBpZCwgY29sLCBsYXp5LCBfcmVzLCBleHRyYSkge1xcclxcbiAgICAvL2NvbOaYr+agt+W8j2NvbFswXSxjb2xbMV3liIbliKvmmK90duWSjG1vdmll55qE5qC35byPKHR25Lya5pyJ5YiG6ZuG5L+h5oGvdGl0bGXkvJrlvojplb8pXFxyXFxuICAgIGlmICghY29sKSBjb2wgPSBbJ2ljb25fMicsICdpY29uX3NtYWxsXzQnXTtcXHJcXG4gICAgaWYgKCFsYXp5KSBsYXp5ID0gJ3JldHVybiBpbnB1dCc7XFxyXFxuICAgIGxldCByZXMgPSBfcmVzIHx8IGdldERvdWJhblJlcyhcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9cXFwiICsgdHlwZSArIFxcXCIvXFxcIiArIGlkKTtcXHJcXG4gICAgZm9yIChsZXQgaXRlbSBpbiByZXMudmVuZG9ycykge1xcclxcbiAgICAgICAgbGV0IGUgPSByZXMudmVuZG9yc1tpdGVtXTtcXHJcXG4gICAgICAgIGlmICh0eXBlID09PSBcXFwidHZcXFwiKSB7XFxyXFxuICAgICAgICAgICAgZC5wdXNoKHtcXHJcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGUudGl0bGUgKyAoZS5lcGlzb2Rlc19pbmZvID8gXFxcIuKAolxcXCIgKyBlLmVwaXNvZGVzX2luZm8gOiBcXFwiXFxcIiksXFxyXFxuICAgICAgICAgICAgICAgIGltZzogZS5pY29uLFxcclxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogY29sWzBdIHx8IFxcXCJpY29uXzJcXFwiLFxcclxcbiAgICAgICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHk/aWQ9JyArIGlkICsgJyZ0eXBlPScgKyB0eXBlICsgJyZ0aXRsZT0nICsgZS50aXRsZSkucnVsZSgocmVzLCBpZCwgZSwgbGF6eSwgZXh0cmEpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGxldCB0aXRsZSA9IHJlcy50aXRsZSxcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBwaWMgPSByZXMucGljLm5vcm1hbCArIFxcXCJAUmVmZXJlcj1cXFwiICsgcmVzLnBpYy5ub3JtYWw7XFxyXFxuICAgICAgICAgICAgICAgICAgICBzZXRQYWdlVGl0bGUoZS50aXRsZSArICctJyArIHRpdGxlKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVBpY1VybChwaWMpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cXHJcXG4gICAgICAgICAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGxldCB1cmxzID0gZ2V0VHZVcmxzKGlkLCBlLmlkKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGxhenkgPSAkKFxcXCJcXFwiKS5sYXp5UnVsZShsYXp5ID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0VXJsID0gXFxcInRvYXN0Oi8v6Kej5p6Q5aSx6LSlXFxcIjtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF6eS5zdGFydHNXaXRoKFxcXCIoXFxcIikpIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2YWwoJ3Jlc3VsdFVybCA9ICcgKyBsYXp5KVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZhbCgncmVzdWx0VXJsID0gJyArICcoKCkgPT4geycgKyBsYXp5ICsgJ30pKCknKVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2coZS5tZXNzYWdlKVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0VXJsXFxyXFxuICAgICAgICAgICAgICAgICAgICB9LCBsYXp5KVxcclxcbiAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSBbXTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YodXJscykgPT0gXFxcIm9iamVjdFxcXCIpIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IFtdO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdXJscy5sZW5ndGg7IGkrKykge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfnrKwnICsgKGkgKyAxKSArICfpm4YnLFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0XzQnLFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBsYXp5ID8gdXJsc1tpXSArIGxhenkgOiB1cmxzW2ldLFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IGV4dHJhXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3VsdChkKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mKHVybHMpID09IFxcXCJzdHJpbmdcXFwiICYmIHVybHMgPT0gJ+iiq+WwgWlwJykge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBydWxlID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL3BhZ2UvcmVsZWFzZUlQP3J1bGU96Z2S6LGGXFxcIikpXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5ydWxlO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2YWwocnVsZSk7XFxyXFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZih1cmxzKSA9PSAnc3RyaW5nJyAmJiB1cmxzID09ICfmsqHmnInmlLblvZUnKSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGQgPSBbXTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+ixhueTo+ayoeacieaUtuW9leatpOinhumikea6kOeahOivpue7huS/oeaBrycsXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfngrnmiJHlj6/ku6Xljrvop4bpopHmupDnvZHnq5nnnIvnnIsnLFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnLFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGUudXJsXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7XFxyXFxuICAgICAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgIH0sIHJlcywgaWQsIGUsIGxhenksIGV4dHJhKVxcclxcbiAgICAgICAgICAgIH0pXFxyXFxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdtb3ZpZScpIHtcXHJcXG4gICAgICAgICAgICBsZXQgbUxhenkgPSAkKFxcXCJcXFwiKS5sYXp5UnVsZShsYXp5ID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdFVybCA9IFxcXCJ0b2FzdDovL+ino+aekOWksei0pVxcXCI7XFxyXFxuICAgICAgICAgICAgICAgIHRyeSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBpZiAobGF6eS5zdGFydHNXaXRoKFxcXCIoXFxcIikpIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBldmFsKCdyZXN1bHRVcmwgPSAnICsgbGF6eSlcXHJcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZhbCgncmVzdWx0VXJsID0gJyArICcoKCkgPT4geycgKyBsYXp5ICsgJ30pKCknKVxcclxcbiAgICAgICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBsb2coZS5tZXNzYWdlKVxcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRVcmxcXHJcXG4gICAgICAgICAgICB9LCBsYXp5KVxcclxcbiAgICAgICAgICAgIGQucHVzaCh7XFxyXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBlLnRpdGxlICsgKGUuZXBpc29kZXNfaW5mbyA/IFxcXCLigKJcXFwiICsgZS5lcGlzb2Rlc19pbmZvIDogXFxcIlxcXCIpLFxcclxcbiAgICAgICAgICAgICAgICBpbWc6IGUuaWNvbixcXHJcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IGNvbFsxXSB8fCBcXFwiaWNvbl9zbWFsbF80XFxcIixcXHJcXG4gICAgICAgICAgICAgICAgdXJsOiBtTGF6eSA/IGUudXJsICsgbUxhenkgOiBlLnVybCxcXHJcXG4gICAgICAgICAgICAgICAgZXh0cmE6IGV4dHJhXFxyXFxuICAgICAgICAgICAgfSlcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG4vL+iOt+WPlueUteinhuWJp+WIhumbhumTvuaOpSxpZOaYr+eJh+WtkOe8luWPtyx1aWTmmK/op4bpopHmupDnvJblj7dcXHJcXG5mdW5jdGlvbiBnZXRUdlVybHMoaWQsIHVpZCkge1xcclxcbiAgICBsZXQgY29va2llQ2FjaGUgPSAnaGlrZXI6Ly9maWxlcy9jYWNoZS9kb3ViYW5jb29raWUudHh0JztcXHJcXG4gICAgbGV0IG1VcmwgPSAnaHR0cHM6Ly9tb3ZpZS5kb3ViYW4uY29tL3N1YmplY3QvJyArIGlkICsgJy8nO1xcclxcbiAgICBsZXQgaGVhZGVycyA9IHtcXHJcXG4gICAgICAgIFxcXCJVc2VyLUFnZW50XFxcIjogUENfVUEsXFxyXFxuICAgIH1cXHJcXG4gICAgaWYgKGZpbGVFeGlzdChjb29raWVDYWNoZSkpIHtcXHJcXG4gICAgICAgIGhlYWRlcnNbXFxcIkNvb2tpZVxcXCJdID0gZmV0Y2goY29va2llQ2FjaGUpXFxyXFxuICAgIH1cXHJcXG4gICAgbGV0IGh0bWwgPSByZXF1ZXN0KG1VcmwsIHtcXHJcXG4gICAgICAgIGhlYWRlcnM6IGhlYWRlcnNcXHJcXG4gICAgfSlcXHJcXG4gICAgaWYgKChodG1sLmluY2x1ZGVzKFxcXCLnmbvlvZXot7PovaxcXFwiKSAmJiBodG1sLmluY2x1ZGVzKFxcXCLlvILluLjor7fmsYJcXFwiKSkgfHwgKGh0bWwuaW5jbHVkZXMoXFxcIndpbmRvdy5sb2NhdGlvbi5ocmVmXFxcIikgJiYgaHRtbC5pbmNsdWRlcyhcXFwic2VjLmRvdWJhblxcXCIpKSkge1xcclxcbiAgICAgICAgcmV0dXJuICfooqvlsIFpcCc7XFxyXFxuICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICBsZXQgcyA9IHtcXHJcXG4gICAgICAgICAgICBxcTogMSxcXHJcXG4gICAgICAgICAgICB5b3VrdTogMyxcXHJcXG4gICAgICAgICAgICBsZXR2OiA2LFxcclxcbiAgICAgICAgICAgIG1ndHY6IDcsXFxyXFxuICAgICAgICAgICAgYmlsaWJpbGk6IDgsXFxyXFxuICAgICAgICAgICAgaXFpeWk6IDksXFxyXFxuICAgICAgICAgICAgY250djogMTIsXFxyXFxuICAgICAgICAgICAgY2N0djY6IDEzLFxcclxcbiAgICAgICAgICAgIG1pZ3V2aWRlbzogMTUsXFxyXFxuICAgICAgICAgICAgeGlndWE6IDE3LFxcclxcbiAgICAgICAgICAgIGFjZnVuOiAxOCxcXHJcXG4gICAgICAgICAgICBtYWlkdWlkdWk6IDE5XFxyXFxuICAgICAgICB9O1xcclxcbiAgICAgICAgbGV0IG51bSA9IHNbdWlkXTtcXHJcXG5cXHJcXG4gICAgICAgIHZhciBzb3VyY2VzID0ge307XFxyXFxuICAgICAgICBsZXQgc2wgPSBodG1sLm1hdGNoKC9zb3VyY2VzXFxcXFtbMS05XXsxLDJ9XFxcXF1bXFxcXHNcXFxcU10qP1xcXFxdL2cpO1xcclxcbiAgICAgICAgaWYgKHNsKSB7XFxyXFxuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBzbCkge1xcclxcbiAgICAgICAgICAgICAgICBldmFsKHNsW2ldKTtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9IGVsc2Uge1xcclxcbiAgICAgICAgICAgIGxldCBzY3JpcHRfbGlzdCA9IHBhcnNlRG9tRm9yQXJyYXkoaHRtbCwgJ2JvZHkmJnNjcmlwdFtzcmNdJyk7XFxyXFxuICAgICAgICAgICAgbGV0IHNvdXJjZXNfdXJsID0gXFxcIlxcXCI7XFxyXFxuICAgICAgICAgICAgZm9yIChsZXQgaSBpbiBzY3JpcHRfbGlzdCkge1xcclxcbiAgICAgICAgICAgICAgICBsZXQgdXJsID0gcGFyc2VEb21Gb3JIdG1sKHNjcmlwdF9saXN0W2ldLCAnc2NyaXB0JiZzcmMnKTtcXHJcXG4gICAgICAgICAgICAgICAgaWYgKHVybC5pbmRleE9mKCdtaXhlZF9zdGF0aWMnKSAhPT0gLTEpIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZXNfdXJsID0gdXJsO1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIGxldCBzb3VyY2VzX2xpc3QgPSByZXF1ZXN0KHNvdXJjZXNfdXJsKS5tYXRjaCgvc291cmNlc1xcXFxbWzEtOV17MSwyfVxcXFxdW1xcXFxzXFxcXFNdKj9cXFxcXS9nKTtcXHJcXG4gICAgICAgICAgICBmb3IgKHZhciBpIGluIHNvdXJjZXNfbGlzdCkge1xcclxcbiAgICAgICAgICAgICAgICBldmFsKHNvdXJjZXNfbGlzdFtpXSk7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgbGV0IHJlbiA9IHNvdXJjZXNbbnVtXTtcXHJcXG4gICAgICAgIGlmIChyZW4gJiYgcmVuLmxlbmd0aCA+IDApIHtcXHJcXG4gICAgICAgICAgICAvKnZhciByID0gcmVuLm1hcChlID0+IHVuZXNjYXBlKGUucGxheV9saW5rLnJlcGxhY2UoLyhodHRwc3xodHRwKTpcXFxcL1xcXFwvd3d3LmRvdWJhbi5jb21cXFxcL2xpbmsyXFxcXC9cXFxcP3VybD0vLCAnJylcXHJcXG4gICAgICAgICAgICAgICAgLnNwbGl0KCc7JylbMF0uc3BsaXQoJy5odG1sJylbMF0gKyAnLmh0bWwnKSkqL1xcclxcbiAgICAgICAgICAgIHZhciByID0gcmVuLm1hcChlID0+IHVuZXNjYXBlKGUucGxheV9saW5rLnNwbGl0KCc/dXJsPScpWzFdLnNwbGl0KCcmJylbMF0pKVxcclxcblxcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgcmV0dXJuIHIgfHwgJ+ayoeacieaUtuW9lSc7XFxyXFxuICAgIH1cXHJcXG59XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLorr7nva7pobVcIixcInBhdGhcIjpcInNldHRpbmdQYWdlXCIsXCJydWxlXCI6XCJqczpcXG5ldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL3V0aWxzJykpLnJ1bGUpO1xcblxcbi8v5b2x54mH6K+m5oOF6YWN572u5qih5Z2XXFxuZnVuY3Rpb24gZGV0YWlsVmlld01vZGVNb2R1bGUoZCwgZGV0YWlsc1ZpZXdDb25maWdzKSB7XFxuICAgIGxldCBkZXRhaWxzVmlld0NvbmZpZ3MgPSBnZXRDb25maWcoJ2RldGFpbHNWaWV3Q29uZmlncycpO1xcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICfoh6rlrprkuYnlvbHniYfor6bmg4XpobXpnaInLmJvbGQoKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIlxcbiAgICB9KVxcbiAgICBmb3IgKGxldCBjb25maWdLZXkgb2YgT2JqZWN0LmtleXMoZGV0YWlsc1ZpZXdDb25maWdzKSkge1xcbiAgICAgICAgaWYgKGNvbmZpZ0tleSA9PT0gJ3VzZScpIGNvbnRpbnVlO1xcbiAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogY29uZmlnS2V5ID09PSBkZXRhaWxzVmlld0NvbmZpZ3MudXNlID8gXFxcIuKAnOKAnFxcXCIgKyBjb25maWdLZXkgKyBcXFwi4oCd4oCdXFxcIiA6IGNvbmZpZ0tleSxcXG4gICAgICAgICAgICB1cmw6ICQoXFxcImhpa2VyOi8vZW1wdHkjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKGNvbmZpZ0tleSA9PiB7XFxuICAgICAgICAgICAgICAgIGxldCBjb25maWcgPSBKU09OLnBhcnNlKHJlcXVlc3QoZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSkpXFxuICAgICAgICAgICAgICAgIGlmIChjb25maWcuZGV0YWlsc1ZpZXdDb25maWdzLnVzZSA9PT0gY29uZmlnS2V5KSB7XFxuICAgICAgICAgICAgICAgICAgICAvL3B1dE15VmFyKFxcXCJpbnB1dF9jb25maWdfdHlwZVxcXCIsICflvbHniYfor6bmg4XpobXpnaLphY3nva4nKVxcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcImlucHV0X25hbWVcXFwiLCBjb25maWdLZXkpO1xcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcImlucHV0X2NvZGVcXFwiLCBjb25maWcuZGV0YWlsc1ZpZXdDb25maWdzW2NvbmZpZ0tleV0uY29uZmlnKTtcXG4gICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXCJpbnB1dF9zZXR0aW5nX2NvZGVcXFwiLCBjb25maWcuZGV0YWlsc1ZpZXdDb25maWdzW2NvbmZpZ0tleV0uc2V0dGluZyB8fCBcXFwiXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vcGFnZS9zZXR0aW5nLWVkaXRvcj9ydWxlPemdkuixhiZ2aWV3PWRldGFpbFZpZXdNb2RlRWRpdFBhZ2UnO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGNvbmZpZy5kZXRhaWxzVmlld0NvbmZpZ3MudXNlID0gY29uZmlnS2V5XFxuICAgICAgICAgICAgICAgIHdyaXRlRmlsZShnZXRNeVZhcigncWRiX2NvbmZpZycpLCBKU09OLnN0cmluZ2lmeShjb25maWcpKVxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxuICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/liIfmjaLmiJDlip8nXFxuICAgICAgICAgICAgfSwgY29uZmlnS2V5KSxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJ1xcbiAgICAgICAgfSlcXG4gICAgfVxcbiAgICBkLnB1c2goe1xcbiAgICAgICAgY29sX3R5cGU6ICdibGFua19ibG9jaydcXG4gICAgfSlcXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiAn4p6VJyxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcbiAgICAgICAgdXJsOiAnaGlrZXI6Ly9wYWdlL3NldHRpbmctZWRpdG9yP3J1bGU96Z2S6LGGJnZpZXc9ZGV0YWlsVmlld01vZGVFZGl0UGFnZSdcXG4gICAgfSk7XFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogJ+KelicsXFxuICAgICAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJyxcXG4gICAgICAgIHVybDogJChPYmplY3Qua2V5cyhkZXRhaWxzVmlld0NvbmZpZ3MpLmZpbHRlcihjb25maWdLZXkgPT4gY29uZmlnS2V5ICE9PSAndXNlJyAmJiBjb25maWdLZXkgIT09ICfpu5jorqQnKSwgMilcXG4gICAgICAgICAgICAuc2VsZWN0KCgpID0+IHtcXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ID09PSAn6buY6K6kJykgcmV0dXJuICd0b2FzdDovL+m7mOiupOmFjee9ruaXoOazleWIoOmZpO+8gSdcXG4gICAgICAgICAgICAgICAgbGV0IGNvbmZpZyA9IEpTT04ucGFyc2UocmVxdWVzdChnZXRNeVZhcigncWRiX2NvbmZpZycpKSlcXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ID09PSBjb25maWcuZGV0YWlsc1ZpZXdDb25maWdzLnVzZSkgcmV0dXJuICd0b2FzdDovL+ivpemFjee9ruato+WcqOS9v+eUqO+8jOaXoOazleWIoOmZpO+8gSdcXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoJ+ehruiupOWIoOmZpFxcXCInICsgaW5wdXQgKyAnXFxcIu+8nycpLmNvbmZpcm0oKGNvbmZpZywgY29uZmlnS2V5KSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgY29uZmlnLmRldGFpbHNWaWV3Q29uZmlnc1tjb25maWdLZXldXFxuICAgICAgICAgICAgICAgICAgICB3cml0ZUZpbGUoZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSwgSlNPTi5zdHJpbmdpZnkoY29uZmlnKSlcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/liKDpmaQnICsgY29uZmlnS2V5ICsgJ+aIkOWKnydcXG4gICAgICAgICAgICAgICAgfSwgY29uZmlnLCBpbnB1dClcXG4gICAgICAgICAgICB9KVxcbiAgICB9KVxcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICfwn5OdJyxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcbiAgICAgICAgdXJsOiAkKE9iamVjdC5rZXlzKGRldGFpbHNWaWV3Q29uZmlncykuZmlsdGVyKGNvbmZpZ0tleSA9PiBjb25maWdLZXkgIT09ICd1c2UnKSwgMikuc2VsZWN0KCgpID0+IHtcXG4gICAgICAgICAgICAvLyBpZiAoaW5wdXQgPT09ICfpu5jorqQnKSByZXR1cm4gJ3RvYXN0Oi8v6buY6K6k6YWN572u5peg5rOV57yW6L6R77yBJ1xcbiAgICAgICAgICAgIGxldCBjb25maWcgPSBKU09OLnBhcnNlKHJlcXVlc3QoZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSkpXFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcImlucHV0X25hbWVcXFwiLCBjb25maWdLZXkpO1xcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXCJpbnB1dF9jb2RlXFxcIiwgY29uZmlnLmRldGFpbHNWaWV3Q29uZmlnc1tjb25maWdLZXldLmNvbmZpZyk7XFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcImlucHV0X3NldHRpbmdfY29kZVxcXCIsIGNvbmZpZy5kZXRhaWxzVmlld0NvbmZpZ3NbY29uZmlnS2V5XS5zZXR0aW5nIHx8IFxcXCJcXFwiKTtcXG4gICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vcGFnZS9zZXR0aW5nLWVkaXRvcj9ydWxlPemdkuixhiZ2aWV3PWRldGFpbFZpZXdNb2RlRWRpdFBhZ2UnXFxuICAgICAgICB9KVxcbiAgICB9KVxcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICfwn5OlJyxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcbiAgICAgICAgdXJsOiAkKFxcXCJcXFwiLCBcXFwi6K+36L6T5YWl5Y+j5LukXFxcIikuaW5wdXQoKCkgPT4ge1xcbiAgICAgICAgICAgIGlmICghaW5wdXQuaW5jbHVkZXMoXFxcIuW9seeJh+ivpuaDhemhtemdoumFjee9rlxcXCIpKSByZXR1cm4gXFxcInRvYXN0Oi8v6K+l5Y+j5Luk5LiN5piv5b2x54mH6K+m5oOF6aG16Z2i6YWN572uXFxcIjtcXG4gICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL3V0aWxzJykpLnJ1bGUpXFxuICAgICAgICAgICAgbGV0IGltcG9ydENvbmZpZ3MgPSBDb25maWdUb29sLmltcG9ydChpbnB1dCk7XFxuICAgICAgICAgICAgaWYgKCFpbXBvcnRDb25maWdzKSByZXR1cm4gXFxcInRvYXN0Oi8v5Ly85LmO5Ye65LqG6ZSZ77yM6K+35bCd6K+V5YaN5qyh5a+85YWl772eXFxcIjtcXG4gICAgICAgICAgICBwdXRNeVZhcihcXFwiaW5wdXRfbmFtZVxcXCIsIGltcG9ydENvbmZpZ3MubmFtZSk7XFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcImlucHV0X2NvZGVcXFwiLCBpbXBvcnRDb25maWdzLmRhdGEuY29uZmlnKTtcXG4gICAgICAgICAgICBwdXRNeVZhcihcXFwiaW5wdXRfc2V0dGluZ19jb2RlXFxcIiwgaW1wb3J0Q29uZmlncy5kYXRhLnNldHRpbmcgfHwgXFxcIlxcXCIpO1xcbiAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9wYWdlL3NldHRpbmctZWRpdG9yP3J1bGU96Z2S6LGGJnZpZXc9ZGV0YWlsVmlld01vZGVFZGl0UGFnZSc7XFxuICAgICAgICB9KVxcbiAgICB9KVxcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICfwn5OkJyxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcbiAgICAgICAgdXJsOiAkKE9iamVjdC5rZXlzKGRldGFpbHNWaWV3Q29uZmlncykuZmlsdGVyKGNvbmZpZ0tleSA9PiBjb25maWdLZXkgIT09ICd1c2UnKSwgMikuc2VsZWN0KCgpID0+IHtcXG4gICAgICAgICAgICAvLyBpZiAoaW5wdXQgPT09ICfpu5jorqQnKSByZXR1cm4gJ3RvYXN0Oi8v6buY6K6k6YWN572u5peg5rOV57yW6L6R77yBJ1xcbiAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvdXRpbHMnKSkucnVsZSlcXG4gICAgICAgICAgICBsZXQgY29uZmlnID0gZ2V0Q29uZmlnKCk7XFxuICAgICAgICAgICAgbGV0IHNlbGVjdENvbmZpZyA9IHtcXG4gICAgICAgICAgICAgICAgbmFtZTogaW5wdXQsXFxuICAgICAgICAgICAgICAgIGRhdGE6IGNvbmZpZy5kZXRhaWxzVmlld0NvbmZpZ3NbaW5wdXRdXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJldHVybiAkKENvbmZpZ1Rvb2wuZW5jVHlwZUxpc3QsIDIpLnNlbGVjdCgoc2VsZWN0Q29uZmlnKSA9PiB7XFxuICAgICAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvdXRpbHMnKSkucnVsZSlcXG4gICAgICAgICAgICAgICAgcmV0dXJuIENvbmZpZ1Rvb2wudG9DbGlwYm9hcmQoQ29uZmlnVG9vbC5leHBvcnQoc2VsZWN0Q29uZmlnLm5hbWUsIHNlbGVjdENvbmZpZywgXFxcIuW9seeJh+ivpuaDhemhtemdoumFjee9rlxcXCIsIGlucHV0KSlcXG4gICAgICAgICAgICB9LCBzZWxlY3RDb25maWcpXFxuICAgICAgICB9KVxcbiAgICB9KVxcbn1cXG4vLyDor6bmg4XpobXorr7nva7mqKHlnZdcXG5mdW5jdGlvbiBkZXRhaWxWaWV3U2V0dGluZ01vZHVsZShkKSB7XFxuICAgIGxldCBkZXRhaWxzVmlld0NvbmZpZ3MgPSBnZXRDb25maWcoJ2RldGFpbHNWaWV3Q29uZmlncycpO1xcbiAgICBkZXRhaWxWaWV3TW9kZU1vZHVsZShkLCBkZXRhaWxzVmlld0NvbmZpZ3MpXFxuICAgIGxldCBkZXRhaWxWaWV3U2V0dGluZyA9IGRldGFpbHNWaWV3Q29uZmlnc1tkZXRhaWxzVmlld0NvbmZpZ3MudXNlXS5zZXR0aW5nXFxuICAgIGxldCByZXN1bHQgPSBcXFwidG9hc3Q6Ly/or6Xor6bmg4XpobXml6Dorr7nva7pobXpnaJcXFwiO1xcbiAgICBpZiAoZGV0YWlsVmlld1NldHRpbmcpIHtcXG4gICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgaWYgKGRldGFpbFZpZXdTZXR0aW5nLmluZGV4T2YoJ3JldHVybicpID09IC0xKSB0aHJvdyBuZXcgRXJyb3IoJ+W/hemhuyByZXR1cm4gQHJ1bGU9anM6IOaIliAkKCkucnVsZScpO1xcbiAgICAgICAgICAgIGlmIChkZXRhaWxWaWV3U2V0dGluZy5zdGFydHNXaXRoKFxcXCIoXFxcIikpIHtcXG4gICAgICAgICAgICAgICAgZXZhbCgncmVzdWx0ID0gJyArIGRldGFpbFZpZXdTZXR0aW5nKVxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIGV2YWwoJ3Jlc3VsdCA9ICcgKyAnKCgpID0+IHsnICsgZGV0YWlsVmlld1NldHRpbmcgKyAnfSkoKScpXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgICAgIGxvZyhlLm1lc3NhZ2UpO1xcbiAgICAgICAgICAgIHJlc3VsdCA9IFxcXCJ0b2FzdDovL+mUmeivr+eahOiuvue9rumhtemdouS7o+eggSzor7fliY3lvoAg5pel5b+XIOafpeeci+mUmeivr+WOn+WboFxcXCJcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICfimpnvuI8nLFxcbiAgICAgICAgY29sX3R5cGU6ICdmbGV4X2J1dHRvbicsXFxuICAgICAgICB1cmw6IHJlc3VsdFxcbiAgICB9KVxcbn1cXG5cXG4vLyDpppbpobXorr7nva7mqKHlnZdcXG5mdW5jdGlvbiBob21lUGFnZVNldHRpbmdNb2R1bGUoZCkge1xcbiAgICBsZXQgaG9tZVBhZ2VDb25maWdzID0gZ2V0Q29uZmlnKCdob21lUGFnZUNvbmZpZ3MnKTtcXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiAn6Ieq5a6a5LmJ6aaW6aG1Jy5ib2xkKCksXFxuICAgICAgICBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCJcXG4gICAgfSlcXG4gICAgZm9yIChsZXQgY29uZmlnS2V5IG9mIE9iamVjdC5rZXlzKGhvbWVQYWdlQ29uZmlncykpIHtcXG4gICAgICAgIGlmIChjb25maWdLZXkgPT09ICd1c2UnKSBjb250aW51ZTtcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IGNvbmZpZ0tleSA9PT0gaG9tZVBhZ2VDb25maWdzLnVzZSA/IFxcXCLigJzigJxcXFwiICsgY29uZmlnS2V5ICsgXFxcIuKAneKAnVxcXCIgOiBjb25maWdLZXksXFxuICAgICAgICAgICAgdXJsOiAkKFxcXCJoaWtlcjovL2VtcHR5I25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZShjb25maWdLZXkgPT4ge1xcbiAgICAgICAgICAgICAgICBsZXQgY29uZmlnID0gSlNPTi5wYXJzZShyZXF1ZXN0KGdldE15VmFyKCdxZGJfY29uZmlnJykpKVxcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmhvbWVQYWdlQ29uZmlncy51c2UgPT09IGNvbmZpZ0tleSkge1xcbiAgICAgICAgICAgICAgICAgICAgLy9wdXRNeVZhcihcXFwiaW5wdXRfY29uZmlnX3R5cGVcXFwiLCAn6aaW6aG16YWN572uJylcXG4gICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXCJpbnB1dF9uYW1lXFxcIiwgY29uZmlnS2V5KTtcXG4gICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXCJpbnB1dF9jb2RlXFxcIiwgY29uZmlnLmhvbWVQYWdlQ29uZmlnc1tjb25maWdLZXldLmNvbmZpZyk7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vcGFnZS9zZXR0aW5nLWVkaXRvcj9ydWxlPemdkuixhiZ2aWV3PWhvbWVQYWdlTW9kZUVkaXRQYWdlJztcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBjb25maWcuaG9tZVBhZ2VDb25maWdzLnVzZSA9IGNvbmZpZ0tleVxcbiAgICAgICAgICAgICAgICB3cml0ZUZpbGUoZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSwgSlNPTi5zdHJpbmdpZnkoY29uZmlnKSlcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5YiH5o2i5oiQ5YqfJ1xcbiAgICAgICAgICAgIH0sIGNvbmZpZ0tleSksXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdmbGV4X2J1dHRvbidcXG4gICAgICAgIH0pXFxuICAgIH1cXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIGNvbF90eXBlOiAnYmxhbmtfYmxvY2snXFxuICAgIH0pXFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogJ+KelScsXFxuICAgICAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJyxcXG4gICAgICAgIHVybDogJ2hpa2VyOi8vcGFnZS9zZXR0aW5nLWVkaXRvcj92aWV3PWhvbWVQYWdlTW9kZUVkaXRQYWdlJ1xcbiAgICB9KTtcXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiAn4p6WJyxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcbiAgICAgICAgdXJsOiAkKE9iamVjdC5rZXlzKGhvbWVQYWdlQ29uZmlncykuZmlsdGVyKGNvbmZpZ0tleSA9PiBjb25maWdLZXkgIT09ICd1c2UnICYmIGNvbmZpZ0tleSAhPT0gJ+m7mOiupCcpLCAyKVxcbiAgICAgICAgICAgIC5zZWxlY3QoKCkgPT4ge1xcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT09ICfpu5jorqQnKSByZXR1cm4gJ3RvYXN0Oi8v6buY6K6k6YWN572u5peg5rOV5Yig6Zmk77yBJ1xcbiAgICAgICAgICAgICAgICBsZXQgY29uZmlnID0gSlNPTi5wYXJzZShyZXF1ZXN0KGdldE15VmFyKCdxZGJfY29uZmlnJykpKVxcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT09IGNvbmZpZy5ob21lUGFnZUNvbmZpZ3MudXNlKSByZXR1cm4gJ3RvYXN0Oi8v6K+l6YWN572u5q2j5Zyo5L2/55So77yM5peg5rOV5Yig6Zmk77yBJ1xcbiAgICAgICAgICAgICAgICByZXR1cm4gJCgn56Gu6K6k5Yig6ZmkXFxcIicgKyBpbnB1dCArICdcXFwi77yfJykuY29uZmlybSgoY29uZmlnLCBjb25maWdLZXkpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuaG9tZVBhZ2VDb25maWdzW2NvbmZpZ0tleV1cXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlRmlsZShnZXRNeVZhcigncWRiX2NvbmZpZycpLCBKU09OLnN0cmluZ2lmeShjb25maWcpKVxcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+WIoOmZpCcgKyBjb25maWdLZXkgKyAn5oiQ5YqfJ1xcbiAgICAgICAgICAgICAgICB9LCBjb25maWcsIGlucHV0KVxcbiAgICAgICAgICAgIH0pXFxuICAgIH0pXFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogJ/Cfk50nLFxcbiAgICAgICAgY29sX3R5cGU6ICdmbGV4X2J1dHRvbicsXFxuICAgICAgICB1cmw6ICQoT2JqZWN0LmtleXMoaG9tZVBhZ2VDb25maWdzKS5maWx0ZXIoY29uZmlnS2V5ID0+IGNvbmZpZ0tleSAhPT0gJ3VzZScpLCAyKS5zZWxlY3QoKCkgPT4ge1xcbiAgICAgICAgICAgIC8vIGlmIChpbnB1dCA9PT0gJ+m7mOiupCcpIHJldHVybiAndG9hc3Q6Ly/pu5jorqTphY3nva7ml6Dms5XnvJbovpHvvIEnXFxuICAgICAgICAgICAgbGV0IGNvbmZpZyA9IEpTT04ucGFyc2UocmVxdWVzdChnZXRNeVZhcigncWRiX2NvbmZpZycpKSk7XFxuICAgICAgICAgICAgbGV0IGNvbmZpZ0tleSA9IGlucHV0O1xcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXCJpbnB1dF9uYW1lXFxcIiwgY29uZmlnS2V5KTtcXG4gICAgICAgICAgICBwdXRNeVZhcihcXFwiaW5wdXRfY29kZVxcXCIsIGNvbmZpZy5ob21lUGFnZUNvbmZpZ3NbY29uZmlnS2V5XS5jb25maWcpO1xcbiAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9wYWdlL3NldHRpbmctZWRpdG9yP3J1bGU96Z2S6LGGJnZpZXc9aG9tZVBhZ2VNb2RlRWRpdFBhZ2UnO1xcbiAgICAgICAgfSlcXG4gICAgfSlcXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiAn8J+TpScsXFxuICAgICAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJyxcXG4gICAgICAgIHVybDogJChcXFwiXFxcIiwgXFxcIuivt+i+k+WFpeWPo+S7pFxcXCIpLmlucHV0KCgpID0+IHtcXG4gICAgICAgICAgICBpZiAoIWlucHV0LmluY2x1ZGVzKFxcXCLpppbpobXphY3nva5cXFwiKSkgcmV0dXJuIFxcXCJ0b2FzdDovL+ivpeWPo+S7pOS4jeaYr+mmlumhtemFjee9rlxcXCI7XFxuICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS91dGlscycpKS5ydWxlKVxcbiAgICAgICAgICAgIGxldCBpbXBvcnRDb25maWdzID0gQ29uZmlnVG9vbC5pbXBvcnQoaW5wdXQpO1xcbiAgICAgICAgICAgIGlmICghaW1wb3J0Q29uZmlncykgcmV0dXJuIFxcXCJ0b2FzdDovL+S8vOS5juWHuuS6humUme+8jOivt+WwneivleWGjeasoeWvvOWFpe+9nlxcXCI7XFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcImlucHV0X25hbWVcXFwiLCBpbXBvcnRDb25maWdzLm5hbWUpO1xcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXCJpbnB1dF9jb2RlXFxcIiwgaW1wb3J0Q29uZmlncy5kYXRhLmNvbmZpZyk7XFxuICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL3BhZ2Uvc2V0dGluZy1lZGl0b3I/cnVsZT3pnZLosYYmdmlldz1ob21lUGFnZU1vZGVFZGl0UGFnZSc7XFxuICAgICAgICB9KVxcbiAgICB9KVxcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICfwn5OkJyxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcbiAgICAgICAgdXJsOiAkKE9iamVjdC5rZXlzKGhvbWVQYWdlQ29uZmlncykuZmlsdGVyKGNvbmZpZ0tleSA9PiBjb25maWdLZXkgIT09ICd1c2UnKSwgMikuc2VsZWN0KCgpID0+IHtcXG4gICAgICAgICAgICAvLyBpZiAoaW5wdXQgPT09ICfpu5jorqQnKSByZXR1cm4gJ3RvYXN0Oi8v6buY6K6k6YWN572u5peg5rOV57yW6L6R77yBJ1xcbiAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvdXRpbHMnKSkucnVsZSlcXG4gICAgICAgICAgICBsZXQgY29uZmlnID0gZ2V0Q29uZmlnKCk7XFxuICAgICAgICAgICAgbGV0IHNlbGVjdENvbmZpZyA9IHtcXG4gICAgICAgICAgICAgICAgbmFtZTogaW5wdXQsXFxuICAgICAgICAgICAgICAgIGRhdGE6IGNvbmZpZy5ob21lUGFnZUNvbmZpZ3NbaW5wdXRdXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJldHVybiAkKENvbmZpZ1Rvb2wuZW5jVHlwZUxpc3QsIDIpLnNlbGVjdCgoc2VsZWN0Q29uZmlnKSA9PiB7XFxuICAgICAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvdXRpbHMnKSkucnVsZSlcXG4gICAgICAgICAgICAgICAgcmV0dXJuIENvbmZpZ1Rvb2wudG9DbGlwYm9hcmQoQ29uZmlnVG9vbC5leHBvcnQoc2VsZWN0Q29uZmlnLm5hbWUsIHNlbGVjdENvbmZpZywgXFxcIummlumhtemFjee9rlxcXCIsIGlucHV0KSlcXG4gICAgICAgICAgICB9LCBzZWxlY3RDb25maWcpXFxuICAgICAgICB9KVxcbiAgICB9KVxcbn1cXG5cXG4vLyDop6PmnpDphY3nva7mqKHlnZdcXG5mdW5jdGlvbiBhbmFseXNpc01vZGVNb2R1bGUoZCwgYW5hbHlzaXNDb25maWdzKSB7XFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogJ+iHquWumuS5ieino+aekOaPkuS7ticuYm9sZCgpLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiXFxuICAgIH0pXFxuICAgIGZvciAobGV0IGNvbmZpZ0tleSBvZiBPYmplY3Qua2V5cyhhbmFseXNpc0NvbmZpZ3MpKSB7XFxuICAgICAgICBpZiAoY29uZmlnS2V5ID09PSAndXNlJykgY29udGludWU7XFxuICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBjb25maWdLZXkgPT09IGFuYWx5c2lzQ29uZmlncy51c2UgPyBcXFwi4oCc4oCcXFxcIiArIGNvbmZpZ0tleSArIFxcXCLigJ3igJ1cXFwiIDogY29uZmlnS2V5LFxcbiAgICAgICAgICAgIHVybDogJChcXFwiaGlrZXI6Ly9lbXB0eSNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoY29uZmlnS2V5ID0+IHtcXG4gICAgICAgICAgICAgICAgbGV0IGNvbmZpZyA9IEpTT04ucGFyc2UocmVxdWVzdChnZXRNeVZhcigncWRiX2NvbmZpZycpKSlcXG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5hbmFseXNpc0NvbmZpZ3MudXNlID09PSBjb25maWdLZXkpIHtcXG4gICAgICAgICAgICAgICAgICAgIC8vcHV0TXlWYXIoXFxcImlucHV0X2NvbmZpZ190eXBlXFxcIiwgJ+ino+aekOaPkuS7tumFjee9ricpXFxuICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwiaW5wdXRfbmFtZVxcXCIsIGNvbmZpZ0tleSk7XFxuICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwiaW5wdXRfY29kZVxcXCIsIGNvbmZpZy5hbmFseXNpc0NvbmZpZ3NbY29uZmlnS2V5XS5jb25maWcpO1xcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcImlucHV0X2V4dHJhXFxcIiwgY29uZmlnLmFuYWx5c2lzQ29uZmlnc1tjb25maWdLZXldLmV4dHJhIHx8IFxcXCJcXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXCJpbnB1dF9zZXR0aW5nX2NvZGVcXFwiLCBjb25maWcuYW5hbHlzaXNDb25maWdzW2NvbmZpZ0tleV0uc2V0dGluZyB8fCBcXFwiXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vcGFnZS9zZXR0aW5nLWVkaXRvcj9ydWxlPemdkuixhiZ2aWV3PWFuYWx5c2lzTW9kZUVkaXRQYWdlJztcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBjb25maWcuYW5hbHlzaXNDb25maWdzLnVzZSA9IGNvbmZpZ0tleVxcbiAgICAgICAgICAgICAgICB3cml0ZUZpbGUoZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSwgSlNPTi5zdHJpbmdpZnkoY29uZmlnKSlcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5YiH5o2i5oiQ5YqfJ1xcbiAgICAgICAgICAgIH0sIGNvbmZpZ0tleSksXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdmbGV4X2J1dHRvbidcXG4gICAgICAgIH0pXFxuICAgIH1cXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIGNvbF90eXBlOiAnYmxhbmtfYmxvY2snXFxuICAgIH0pXFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogJ+KelScsXFxuICAgICAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJyxcXG4gICAgICAgIHVybDogJ2hpa2VyOi8vcGFnZS9zZXR0aW5nLWVkaXRvcj9ydWxlPemdkuixhiZ2aWV3PWFuYWx5c2lzTW9kZUVkaXRQYWdlJ1xcbiAgICB9KTtcXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiAn4p6WJyxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcbiAgICAgICAgdXJsOiAkKE9iamVjdC5rZXlzKGFuYWx5c2lzQ29uZmlncykuZmlsdGVyKGNvbmZpZ0tleSA9PiBjb25maWdLZXkgIT09ICd1c2UnICYmIGNvbmZpZ0tleSAhPT0gJ+S4jeino+aekCcgJiYgY29uZmlnS2V5ICE9PSAn5pat5o+SJyksIDIpXFxuICAgICAgICAgICAgLnNlbGVjdCgoKSA9PiB7XFxuICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gJ+S4jeino+aekCcgJiYgaW5wdXQgPT09ICfmlq3mj5InKSByZXR1cm4gJ3RvYXN0Oi8v6buY6K6k6Kej5p6Q5peg5rOV5Yig6Zmk77yBJ1xcbiAgICAgICAgICAgICAgICBsZXQgY29uZmlnID0gSlNPTi5wYXJzZShyZXF1ZXN0KGdldE15VmFyKCdxZGJfY29uZmlnJykpKVxcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT09IGNvbmZpZy5hbmFseXNpc0NvbmZpZ3MudXNlKSByZXR1cm4gJ3RvYXN0Oi8v6K+l6Kej5p6Q5q2j5Zyo5L2/55So77yM5peg5rOV5Yig6Zmk77yBJ1xcbiAgICAgICAgICAgICAgICByZXR1cm4gJCgn56Gu6K6k5Yig6ZmkXFxcIicgKyBpbnB1dCArICdcXFwi77yfJykuY29uZmlybSgoY29uZmlnLCBjb25maWdLZXkpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuYW5hbHlzaXNDb25maWdzW2NvbmZpZ0tleV1cXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlRmlsZShnZXRNeVZhcigncWRiX2NvbmZpZycpLCBKU09OLnN0cmluZ2lmeShjb25maWcpKVxcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+WIoOmZpCcgKyBjb25maWdLZXkgKyAn5oiQ5YqfJ1xcbiAgICAgICAgICAgICAgICB9LCBjb25maWcsIGlucHV0KVxcbiAgICAgICAgICAgIH0pXFxuICAgIH0pXFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogJ/Cfk50nLFxcbiAgICAgICAgY29sX3R5cGU6ICdmbGV4X2J1dHRvbicsXFxuICAgICAgICB1cmw6ICQoT2JqZWN0LmtleXMoYW5hbHlzaXNDb25maWdzKS5maWx0ZXIoY29uZmlnS2V5ID0+IGNvbmZpZ0tleSAhPT0gJ3VzZScpLCAyKVxcbiAgICAgICAgICAgIC5zZWxlY3QoKCkgPT4ge1xcbiAgICAgICAgICAgICAgICAvLyBpZiAoaW5wdXQgPT09ICfkuI3op6PmnpAnICYmIGlucHV0ID09PSAn5pat5o+SJykgcmV0dXJuICd0b2FzdDovL+m7mOiupOino+aekOaXoOazlee8lui+ke+8gSdcXG4gICAgICAgICAgICAgICAgbGV0IGNvbmZpZyA9IEpTT04ucGFyc2UocmVxdWVzdChnZXRNeVZhcigncWRiX2NvbmZpZycpKSk7XFxuICAgICAgICAgICAgICAgIGxldCBjb25maWdLZXkgPSBpbnB1dDtcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcImlucHV0X25hbWVcXFwiLCBjb25maWdLZXkpO1xcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwiaW5wdXRfY29kZVxcXCIsIGNvbmZpZy5hbmFseXNpc0NvbmZpZ3NbY29uZmlnS2V5XS5jb25maWcpO1xcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwiaW5wdXRfZXh0cmFcXFwiLCBjb25maWcuYW5hbHlzaXNDb25maWdzW2NvbmZpZ0tleV0uZXh0cmEgfHwgXFxcIlxcXCIpO1xcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwiaW5wdXRfc2V0dGluZ19jb2RlXFxcIiwgY29uZmlnLmFuYWx5c2lzQ29uZmlnc1tjb25maWdLZXldLnNldHRpbmcgfHwgXFxcIlxcXCIpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vcGFnZS9zZXR0aW5nLWVkaXRvcj9ydWxlPemdkuixhiZ2aWV3PWFuYWx5c2lzTW9kZUVkaXRQYWdlJztcXG4gICAgICAgICAgICB9KVxcbiAgICB9KVxcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICfwn5OlJyxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcbiAgICAgICAgdXJsOiAkKFxcXCJcXFwiLCBcXFwi6K+36L6T5YWl5Y+j5LukXFxcIikuaW5wdXQoKCkgPT4ge1xcbiAgICAgICAgICAgIGlmICghaW5wdXQuaW5jbHVkZXMoXFxcIuino+aekOaPkuS7tumFjee9rlxcXCIpKSByZXR1cm4gXFxcInRvYXN0Oi8v6K+l5Y+j5Luk5LiN5piv6Kej5p6Q5o+S5Lu26YWN572uXFxcIjtcXG4gICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL3V0aWxzJykpLnJ1bGUpXFxuICAgICAgICAgICAgbGV0IGltcG9ydENvbmZpZ3MgPSBDb25maWdUb29sLmltcG9ydChpbnB1dCk7XFxuICAgICAgICAgICAgaWYgKCFpbXBvcnRDb25maWdzKSByZXR1cm4gXFxcInRvYXN0Oi8v5Ly85LmO5Ye65LqG6ZSZ77yM6K+35bCd6K+V5YaN5qyh5a+85YWl772eXFxcIjtcXG4gICAgICAgICAgICBwdXRNeVZhcihcXFwiaW5wdXRfbmFtZVxcXCIsIGltcG9ydENvbmZpZ3MubmFtZSk7XFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcImlucHV0X2NvZGVcXFwiLCBpbXBvcnRDb25maWdzLmRhdGEuY29uZmlnKTtcXG4gICAgICAgICAgICBwdXRNeVZhcihcXFwiaW5wdXRfZXh0cmFcXFwiLCBpbXBvcnRDb25maWdzLmRhdGEuZXh0cmEgfHwgXFxcIlxcXCIpO1xcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXCJpbnB1dF9zZXR0aW5nX2NvZGVcXFwiLCBpbXBvcnRDb25maWdzLmRhdGEuc2V0dGluZyB8fCBcXFwiXFxcIik7XFxuICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL3BhZ2Uvc2V0dGluZy1lZGl0b3I/cnVsZT3pnZLosYYmdmlldz1hbmFseXNpc01vZGVFZGl0UGFnZSc7XFxuICAgICAgICB9KVxcbiAgICB9KVxcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICfwn5OkJyxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcbiAgICAgICAgdXJsOiAkKE9iamVjdC5rZXlzKGFuYWx5c2lzQ29uZmlncykuZmlsdGVyKGNvbmZpZ0tleSA9PiBjb25maWdLZXkgIT09ICd1c2UnKSwgMikuc2VsZWN0KCgpID0+IHtcXG4gICAgICAgICAgICAvLyBpZiAoaW5wdXQgPT09ICfpu5jorqQnKSByZXR1cm4gJ3RvYXN0Oi8v6buY6K6k6YWN572u5peg5rOV57yW6L6R77yBJ1xcbiAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvdXRpbHMnKSkucnVsZSlcXG4gICAgICAgICAgICBsZXQgY29uZmlnID0gZ2V0Q29uZmlnKCk7XFxuICAgICAgICAgICAgbGV0IHNlbGVjdENvbmZpZyA9IHtcXG4gICAgICAgICAgICAgICAgbmFtZTogaW5wdXQsXFxuICAgICAgICAgICAgICAgIGRhdGE6IGNvbmZpZy5hbmFseXNpc0NvbmZpZ3NbaW5wdXRdXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJldHVybiAkKENvbmZpZ1Rvb2wuZW5jVHlwZUxpc3QsIDIpLnNlbGVjdCgoc2VsZWN0Q29uZmlnKSA9PiB7XFxuICAgICAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvdXRpbHMnKSkucnVsZSlcXG4gICAgICAgICAgICAgICAgcmV0dXJuIENvbmZpZ1Rvb2wudG9DbGlwYm9hcmQoQ29uZmlnVG9vbC5leHBvcnQoc2VsZWN0Q29uZmlnLm5hbWUsIHNlbGVjdENvbmZpZywgXFxcIuino+aekOaPkuS7tumFjee9rlxcXCIsIGlucHV0KSlcXG4gICAgICAgICAgICB9LCBzZWxlY3RDb25maWcpXFxuICAgICAgICB9KVxcbiAgICB9KVxcbn1cXG5cXG4vLyDop6PmnpDorr7nva7mqKHlnZdcXG5mdW5jdGlvbiBhbmFseXNpc1NldHRpbmdNb2R1bGUoZCkge1xcbiAgICBsZXQgYW5hbHlzaXNDb25maWdzID0gZ2V0Q29uZmlnKCdhbmFseXNpc0NvbmZpZ3MnKTtcXG4gICAgYW5hbHlzaXNNb2RlTW9kdWxlKGQsIGFuYWx5c2lzQ29uZmlncyk7XFxuICAgIC8qKlxcbiAgICAgKiDov5nkuIvpnaLnmoTpg73mmK/mi7/orr7nva7pobXpnaLnmoTphY3nva7lh7rmnaUgZXZhbCDmiafooYzvvIzmnIDnu4jojrflvpfmj5Lku7borr7nva7pobXpnaLnmoQgdXJs77yM6L+Z5LiqIHVybCDlj6/ku6XmmK/nvZHpobXkuZ/lj6/ku6XmmK/kuoznuqfnlYzpnaJcXG4gICAgICovXFxuICAgIGxldCBhbmFseXNpc1NldHRpbmcgPSBhbmFseXNpc0NvbmZpZ3NbYW5hbHlzaXNDb25maWdzLnVzZV0uc2V0dGluZztcXG4gICAgbGV0IHJlc3VsdCA9IFxcXCJ0b2FzdDovL+ivpeaPkuS7tuaXoOiuvue9rumhtemdolxcXCI7XFxuICAgIGlmIChhbmFseXNpc1NldHRpbmcpIHtcXG4gICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgaWYgKGFuYWx5c2lzU2V0dGluZy5pbmRleE9mKCdyZXR1cm4nKSA9PSAtMSkgdGhyb3cgbmV3IEVycm9yKCflv4XpobsgcmV0dXJuIEBydWxlPWpzOiDmiJYgJCgpLnJ1bGUnKTtcXG4gICAgICAgICAgICBpZiAoYW5hbHlzaXNTZXR0aW5nLnN0YXJ0c1dpdGgoXFxcIihcXFwiKSkge1xcbiAgICAgICAgICAgICAgICBldmFsKCdyZXN1bHQgPSAnICsgYW5hbHlzaXNTZXR0aW5nKTtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICBldmFsKCdyZXN1bHQgPSAnICsgJygoKSA9PiB7JyArIGFuYWx5c2lzU2V0dGluZyArICd9KSgpJyk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgICAgIGxvZyhlLm1lc3NhZ2UpO1xcbiAgICAgICAgICAgIHJlc3VsdCA9IFxcXCJ0b2FzdDovL+mUmeivr+eahOiuvue9rumhtemdouS7o+eggSzor7fliY3lvoAg5pel5b+XIOafpeeci+mUmeivr+WOn+WboFxcXCJcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICfimpnvuI8nLFxcbiAgICAgICAgY29sX3R5cGU6ICdmbGV4X2J1dHRvbicsXFxuICAgICAgICB1cmw6IHJlc3VsdFxcbiAgICB9KVxcbn1cXG5cXG4vL+iHquWumuS5ieW/q+mAn+aQnOe0ouaooeWdl1xcbmZ1bmN0aW9uIHF1aWNrU2VhcmNoRElZTW9kdWxlKGQsIGNvbmZpZykge1xcbiAgICBsZXQgcXVpY2tTZWFyY2hDb25maWdzID0gZ2V0Q29uZmlnKCdxdWlja1NlYXJjaENvbmZpZ3MnLCBjb25maWcpO1xcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICfoh6rlrprkuYnlv6vpgJ/mkJzntKInLmJvbGQoKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIlxcbiAgICB9KVxcbiAgICBmb3IgKGxldCBjb25maWdLZXkgb2YgcXVpY2tTZWFyY2hDb25maWdzLm9yZGVyKSB7XFxuICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBjb25maWdLZXksXFxuICAgICAgICAgICAgdXJsOiAkKCfinpXmmK/mt7vliqBcXFxcbuKeluaYr+WIoOmZpFxcXFxu8J+TneaYr+S/ruaUuVxcXFxu8J+UgeaYr+aOkuW6j1xcXFxu4pqZ77iP5piv6K6+572u5qC35byPJykuY29uZmlybSgoKSA9PiB7XFxuICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/kuIvmrKHkuI3opoHlho3ngrnmiJHkuoYnXFxuICAgICAgICAgICAgfSksXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdmbGV4X2J1dHRvbidcXG4gICAgICAgIH0pXFxuICAgIH1cXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIGNvbF90eXBlOiAnYmxhbmtfYmxvY2snXFxuICAgIH0pXFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogJ+Kele+4jycsXFxuICAgICAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJyxcXG4gICAgICAgIHVybDogJCgn5pi+56S65ZCNQEDlsI/nqIvluo/lkI1AQOWbvueJh+mTvuaOpScsICfmoLnmja7mj5DnpLrovpPlhaXlsLHlpb3kuoZcXFxcbuWwj+eoi+W6j+WQjeS4uuepuuWImeS4uua1t+mYlOaQnOe0oicpLmlucHV0KCgpID0+IHtcXG4gICAgICAgICAgICBsZXQgY29uZmlnID0gSlNPTi5wYXJzZShmZXRjaChnZXRNeVZhcigncWRiX2NvbmZpZycpKSk7XFxuICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC5zcGxpdCgnQEAnKTtcXG4gICAgICAgICAgICBpZihpbnB1dC5sZW5ndGggIT0gMyB8fCBpbnB1dFswXSA9PT0gXFxcIlxcXCIpIHJldHVybiBcXFwidG9hc3Q6Ly/moLzlvI/kuI3lr7nvvIzmjInmoLzlvI/ovpPlhaUhXFxcIjtcXG4gICAgICAgICAgICBpZiAoY29uZmlnLnF1aWNrU2VhcmNoQ29uZmlncy5vcmRlci5pbmRleE9mKGlucHV0WzBdKSA9PSAtMSkgY29uZmlnLnF1aWNrU2VhcmNoQ29uZmlncy5vcmRlci5wdXNoKGlucHV0WzBdKTtcXG4gICAgICAgICAgICBjb25maWcucXVpY2tTZWFyY2hDb25maWdzW2lucHV0WzBdXSA9IHtcXG4gICAgICAgICAgICAgICAgbmFtZTogaW5wdXRbMV0sXFxuICAgICAgICAgICAgICAgIHBpYzogaW5wdXRbMl1cXG4gICAgICAgICAgICB9O1xcbiAgICAgICAgICAgIHdyaXRlRmlsZShnZXRNeVZhcigncWRiX2NvbmZpZycpLCBKU09OLnN0cmluZ2lmeShjb25maWcpKTtcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxuICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+a3u+WKoOaIkOWKnyc7XFxuICAgICAgICB9KVxcbiAgICB9KTtcXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiAn4p6WJyxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcbiAgICAgICAgdXJsOiAkKHF1aWNrU2VhcmNoQ29uZmlncy5vcmRlciwgMikuc2VsZWN0KCgpID0+IHtcXG4gICAgICAgICAgICBsZXQgY29uZmlnID0gSlNPTi5wYXJzZShyZXF1ZXN0KGdldE15VmFyKCdxZGJfY29uZmlnJykpKVxcbiAgICAgICAgICAgIHJldHVybiAkKCfnoa7orqTliKDpmaRcXFwiJyArIGlucHV0ICsgJ1xcXCLvvJ8nKS5jb25maXJtKChjb25maWcsIGNvbmZpZ0tleSkgPT4ge1xcbiAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSBjb25maWcucXVpY2tTZWFyY2hDb25maWdzLm9yZGVyLmluZGV4T2YoY29uZmlnS2V5KTtcXG4gICAgICAgICAgICAgICAgY29uZmlnLnF1aWNrU2VhcmNoQ29uZmlncy5vcmRlci5zcGxpY2UoaW5kZXgsIDEpO1xcbiAgICAgICAgICAgICAgICBkZWxldGUgY29uZmlnLnF1aWNrU2VhcmNoQ29uZmlnc1tjb25maWdLZXldXFxuICAgICAgICAgICAgICAgIHdyaXRlRmlsZShnZXRNeVZhcigncWRiX2NvbmZpZycpLCBKU09OLnN0cmluZ2lmeShjb25maWcpKVxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxuICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/liKDpmaQnICsgY29uZmlnS2V5ICsgJ+aIkOWKnydcXG4gICAgICAgICAgICB9LCBjb25maWcsIGlucHV0KVxcbiAgICAgICAgfSlcXG4gICAgfSlcXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiAn8J+TnScsXFxuICAgICAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJyxcXG4gICAgICAgIHVybDogJChxdWlja1NlYXJjaENvbmZpZ3Mub3JkZXIsIDIpLnNlbGVjdCgoKSA9PiB7XFxuICAgICAgICAgICAgbGV0IGNvbmZpZyA9IEpTT04ucGFyc2UocmVxdWVzdChnZXRNeVZhcigncWRiX2NvbmZpZycpKSk7XFxuICAgICAgICAgICAgbGV0IHF1aWNrU2VhcmNoQ29uZmlncyA9IGNvbmZpZy5xdWlja1NlYXJjaENvbmZpZ3M7XFxuICAgICAgICAgICAgbGV0IGR0ZXh0ID0gaW5wdXQgKyAnQEAnICsgcXVpY2tTZWFyY2hDb25maWdzW2lucHV0XS5uYW1lICsgJ0BAJyArIHF1aWNrU2VhcmNoQ29uZmlnc1tpbnB1dF0ucGljO1xcbiAgICAgICAgICAgIHJldHVybiAkKGR0ZXh0LCAn6K+35L+u5pS5JykuaW5wdXQoKGNvbmZpZywgcmF3KSA9PiB7XFxuICAgICAgICAgICAgICAgIGlucHV0ID0gaW5wdXQuc3BsaXQoJ0BAJyk7XFxuICAgICAgICAgICAgICAgIGlmIChyYXcgIT0gaW5wdXRbMF0pIHtcXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IGNvbmZpZy5xdWlja1NlYXJjaENvbmZpZ3Mub3JkZXIuaW5kZXhPZihyYXcpO1xcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLnF1aWNrU2VhcmNoQ29uZmlncy5vcmRlcltpbmRleF0gPSBpbnB1dFswXTtcXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb25maWcucXVpY2tTZWFyY2hDb25maWdzW3Jhd107XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5xdWlja1NlYXJjaENvbmZpZ3Mub3JkZXIuaW5kZXhPZihpbnB1dFswXSkgPT0gLTEpIGNvbmZpZy5xdWlja1NlYXJjaENvbmZpZ3Mub3JkZXIucHVzaChpbnB1dFswXSk7XFxuICAgICAgICAgICAgICAgIGNvbmZpZy5xdWlja1NlYXJjaENvbmZpZ3NbaW5wdXRbMF1dID0ge1xcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogaW5wdXRbMV0sXFxuICAgICAgICAgICAgICAgICAgICBwaWM6IGlucHV0WzJdXFxuICAgICAgICAgICAgICAgIH07XFxuICAgICAgICAgICAgICAgIHdyaXRlRmlsZShnZXRNeVZhcigncWRiX2NvbmZpZycpLCBKU09OLnN0cmluZ2lmeShjb25maWcpKTtcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5L+u5pS55oiQ5YqfJztcXG4gICAgICAgICAgICB9LCBjb25maWcsIGlucHV0KVxcbiAgICAgICAgfSlcXG4gICAgfSlcXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiAn8J+UgScsXFxuICAgICAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJyxcXG4gICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eSNub0hpc3RvcnkjJykucnVsZSgoKSA9PiB7XFxuICAgICAgICAgICAgYWRkTGlzdGVuZXIoJ29uQ2xvc2UnLCAkLnRvU3RyaW5nKCgpID0+IHtcXG4gICAgICAgICAgICAgICAgY2xlYXJNeVZhcignanNvbicpO1xcbiAgICAgICAgICAgICAgICBjbGVhck15VmFyKCdvcCcpO1xcbiAgICAgICAgICAgIH0pKVxcbiAgICAgICAgICAgIGlmIChnZXRNeVZhcignanNvbicpID09IFxcXCJcXFwiKSB7XFxuICAgICAgICAgICAgICAgIGxldCBjb25maWcgPSBKU09OLnBhcnNlKHJlcXVlc3QoZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSkpO1xcbiAgICAgICAgICAgICAgICBsZXQgcXVpY2tTZWFyY2hDb25maWdzID0gY29uZmlnLnF1aWNrU2VhcmNoQ29uZmlncztcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoJ2pzb24nLCBKU09OLnN0cmluZ2lmeShxdWlja1NlYXJjaENvbmZpZ3MpKTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgbGV0IG9sZCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2pzb24nKSk7XFxuICAgICAgICAgICAgbGV0IGQgPSBbXTtcXG4gICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogJ+WIhuWIq+eCueWHu+S4pOmhueS7peS6pOaNoumhuuW6j1xcXFxu4oCY4oCY5o6S5bqP5a6M5q+V5ZCO54K55oiR5L+d5a2Y5o6S5bqPLOWQpuWImeaOkuW6j+S4jeeUn+aViOKAmeKAmScsXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMScsXFxuICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBsZXQgY29uZmlnID0gSlNPTi5wYXJzZShmZXRjaChnZXRNeVZhcigncWRiX2NvbmZpZycpKSk7XFxuICAgICAgICAgICAgICAgICAgICBjb25maWcucXVpY2tTZWFyY2hDb25maWdzID0gSlNPTi5wYXJzZShnZXRNeVZhcignanNvbicpKTtcXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlRmlsZShnZXRNeVZhcigncWRiX2NvbmZpZycpLCBKU09OLnN0cmluZ2lmeShjb25maWcpKTtcXG4gICAgICAgICAgICAgICAgICAgIGJhY2sodHJ1ZSk7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5L+u5pS55oiQ5YqfJ1xcbiAgICAgICAgICAgICAgICB9KVxcbiAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgb2xkLm9yZGVyLmZvckVhY2goKHZhbHVlLCBpbmRleCkgPT4ge1xcbiAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGdldE15VmFyKCdvcCcpID09IHZhbHVlID8gdmFsdWUgKyAn4oCY4oCYKOW9k+WJjemAieS4rSnigJnigJknIDogdmFsdWUsXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfMScsXFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICQoKS5sYXp5UnVsZSgoa2V5LCBpbmRleCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvcCA9IGdldE15VmFyKCdvcCcpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcCA9PSAnJykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcignb3AnLCBrZXkpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcCA9PSBrZXkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJNeVZhcignb3AnKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvbGQgPSBKU09OLnBhcnNlKGdldE15VmFyKCdqc29uJykpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV3YSA9IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IG9sZC5tb2RlLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXI6IG9sZC5vcmRlclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgb3BpbmRleCA9IG5ld2Eub3JkZXIuaW5kZXhPZihvcCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhvcGluZGV4IC0gaW5kZXgpID09IDEpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld2Eub3JkZXJbb3BpbmRleF0gPSBrZXk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdhLm9yZGVyW2luZGV4XSA9IG9wO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9waW5kZXggPiBpbmRleCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3YS5vcmRlci5zcGxpY2Uob3BpbmRleCwgMSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdhLm9yZGVyLnNwbGljZShpbmRleCwgMCwgb3ApO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3YS5vcmRlci5zcGxpY2Uob3BpbmRleCwgMSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdhLm9yZGVyLnNwbGljZShpbmRleCAtIDEsIDAsIG9wKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdhLm9yZGVyLmZvckVhY2godmFsdWUgPT4gbmV3YVt2YWx1ZV0gPSBvbGRbdmFsdWVdKVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcignanNvbicsIEpTT04uc3RyaW5naWZ5KG5ld2EpKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJNeVZhcignb3AnKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIH0sIHZhbHVlLCBpbmRleClcXG4gICAgICAgICAgICAgICAgfSlcXG4gICAgICAgICAgICB9KVxcbiAgICAgICAgICAgIHNldFJlc3VsdChkKTtcXG4gICAgICAgIH0pXFxuICAgIH0pXFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogJ+Kame+4jycsXFxuICAgICAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJyxcXG4gICAgICAgIHVybDogJChxdWlja1NlYXJjaENvbmZpZ3NbJ21vZGUnXSB8fCBcXFwiXFxcIiwgJ+ivt+ato+ehrui+k+WFpee7hOS7tuagt+W8j1xcXFxu5bu66K6u5YC8OmZsZXhfYnV0dG9uIHNjcm9sbF9idXR0b24gaWNvbl9yb3VuZF9zbWFsbF80IGljb25fc21hbGxfNCcpLmlucHV0KCgpID0+IHtcXG4gICAgICAgICAgICBsZXQgY29uZmlnID0gSlNPTi5wYXJzZShyZXF1ZXN0KGdldE15VmFyKCdxZGJfY29uZmlnJykpKTtcXG4gICAgICAgICAgICBjb25maWcucXVpY2tTZWFyY2hDb25maWdzLm1vZGUgPSBpbnB1dDtcXG4gICAgICAgICAgICB3cml0ZUZpbGUoZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSwgSlNPTi5zdHJpbmdpZnkoY29uZmlnKSk7XFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/moLflvI/kv67mlLnmiJDlip8nXFxuICAgICAgICB9KVxcbiAgICB9KVxcbn1cXG5cXG4vL+iuvue9rumhtemdolxcbmZ1bmN0aW9uIHNldHRpbmdQYWdlKCkge1xcbiAgICBsZXQgY29uZiA9IGdldENvbmZpZygpO1xcbiAgICBsZXQgZCA9IFtdO1xcblxcbiAgICBsZXQgc3RhckNvbG9yID0gY29uZi5zdGFyQ29sb3IgfHwgJyNmZmFjMmQnO1xcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ0nICsgJ+iHquWumuS5ieaYn+aYn+minOiJsicuYm9sZCgpLFxcbiAgICAgICAgZGVzYzogJ+KAnOKAnOKAneKAnTxmb250IGNvbG9yPScgKyBzdGFyQ29sb3IgKyAnPicgKyAn4piF4piF4piF4piF4piFPC9mb250PicsXFxuICAgICAgICBjb2xfdHlwZTogJ3RleHRfMScsXFxuICAgICAgICB1cmw6ICQoc3RhckNvbG9yLCAn5Yir5b+Y5LqGIycpLmlucHV0KCgpID0+IHtcXG4gICAgICAgICAgICBsZXQgY29uZmlnID0gSlNPTi5wYXJzZShmZXRjaChnZXRNeVZhcigncWRiX2NvbmZpZycpKSk7XFxuICAgICAgICAgICAgY29uZmlnLnN0YXJDb2xvciA9IGlucHV0O1xcbiAgICAgICAgICAgIHdyaXRlRmlsZShnZXRNeVZhcigncWRiX2NvbmZpZycpLCBKU09OLnN0cmluZ2lmeShjb25maWcpKTtcXG4gICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcbiAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/orr7nva7mm7TmlLnlt7Lkv53lrZhcXFwiO1xcbiAgICAgICAgfSlcXG4gICAgfSlcXG4gICAgbGV0IGNob29zZUNvbG9yID0gY29uZi5jaG9vc2VDb2xvciB8fCAnI0ZBNzI5OCc7XFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogJ+KAnOKAnOKAneKAnScgKyAn6Ieq5a6a5LmJ6YCJ5Lit5qCH562+6aKc6ImyJy5ib2xkKCksXFxuICAgICAgICBkZXNjOiAn4oCc4oCc4oCd4oCdPGZvbnQgY29sb3I9JyArIGNob29zZUNvbG9yICsgJz4nICsgJ+aIkeaYr+mihOiniOaViOaenDwvZm9udD4nLFxcbiAgICAgICAgY29sX3R5cGU6ICd0ZXh0XzEnLFxcbiAgICAgICAgdXJsOiAkKGNob29zZUNvbG9yLCAn5Yir5b+Y5LqGIycpLmlucHV0KCgpID0+IHtcXG4gICAgICAgICAgICBsZXQgY29uZmlnID0gSlNPTi5wYXJzZShmZXRjaChnZXRNeVZhcigncWRiX2NvbmZpZycpKSk7XFxuICAgICAgICAgICAgY29uZmlnLmNob29zZUNvbG9yID0gaW5wdXQ7XFxuICAgICAgICAgICAgd3JpdGVGaWxlKGdldE15VmFyKCdxZGJfY29uZmlnJyksIEpTT04uc3RyaW5naWZ5KGNvbmZpZykpO1xcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+iuvue9ruabtOaUueW3suS/neWtmFxcXCI7XFxuICAgICAgICB9KVxcbiAgICB9KVxcblxcbiAgICBob21lUGFnZVNldHRpbmdNb2R1bGUoZCk7XFxuICAgIGQucHVzaCh7XFxuICAgICAgICBjb2xfdHlwZTogJ2xpbmUnXFxuICAgIH0pXFxuXFxuICAgIHF1aWNrU2VhcmNoRElZTW9kdWxlKGQsIGNvbmYpO1xcbiAgICBkLnB1c2goe1xcbiAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xcbiAgICB9KVxcblxcbiAgICBkZXRhaWxWaWV3U2V0dGluZ01vZHVsZShkKTtcXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIGNvbF90eXBlOiAnbGluZSdcXG4gICAgfSlcXG5cXG4gICAgaWYgKHRydWUvKmdldEl0ZW0oJ3Bhc3N3b3JkJykgPT0gJ3RydWUnKi8pIHtcXG4gICAgICAgIGFuYWx5c2lzU2V0dGluZ01vZHVsZShkKTtcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xcbiAgICAgICAgfSlcXG4gICAgfVxcblxcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ0nICsgJ+aBouWkjem7mOiupOiuvue9ricuYm9sZCgpLFxcbiAgICAgICAgZGVzYzogJ+mHjeeUnycsXFxuICAgICAgICBjb2xfdHlwZTogJ3RleHRfMScsXFxuICAgICAgICB1cmw6ICQoWyfph43nva7mmJ/mmJ/popzoibInLCAn6YeN572u6YCJ5Lit5qCH562+6aKc6ImyJywgJ+mHjee9ruW/q+mAn+aQnOe0oicsICfph43nva7pppbpobXkuLrpu5jorqQnLCAn6YeN572u6K+m5oOF6aG1JyAsICfmuIXpmaTlhajpg6jorr7nva4nXSwgMSkuc2VsZWN0KCgpID0+IHtcXG4gICAgICAgICAgICByZXR1cm4gJChcXFwi56Gu5a6a6KaBXFxcIiArIGlucHV0ICsgXFxcIu+8n1xcXCIpLmNvbmZpcm0oKHNlbCkgPT4ge1xcbiAgICAgICAgICAgICAgICBsZXQgaXRlbSA9ICcnO1xcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHNlbCkge1xcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAn6YeN572u5pif5pif6aKc6ImyJzpcXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gJ3N0YXJDb2xvcic7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICBjYXNlICfph43nva7pgInkuK3moIfnrb7popzoibInOlxcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSAnY2hvb3NlQ29sb3InO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAn6YeN572u5b+r6YCf5pCc57SiJzpcXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gJ3F1aWNrU2VhcmNoQ29uZmlncyc7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICBjYXNlICfph43nva7pppbpobXkuLrpu5jorqQnOlxcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSAnaG9tZVBhZ2VDb25maWdzJztcXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ+mHjee9ruivpuaDhemhtSc6XFxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSA9ICdkZXRhaWxWaWV3Q29uZmlncyc7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICBjYXNlICfmuIXpmaTlhajpg6jorr7nva4nOlxcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSAnYWxsJztcXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAvLyBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL3NldHRpbmdQYWdlJykpLnJ1bGUpO1xcbiAgICAgICAgICAgICAgICBsZXQgZGVmYXVsdENvbmZpZ3MgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9kZWZhdWx0Q29uZmlnc1xcXCIpO1xcbiAgICAgICAgICAgICAgICBpZiAoaXRlbSA9PSAnYWxsJykge1xcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVGaWxlKGdldE15VmFyKCdxZGJfY29uZmlnJyksIEpTT04uc3RyaW5naWZ5KGRlZmF1bHRDb25maWdzKSk7XFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+W3slxcXCIgKyBzZWw7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZihpdGVtID09IFxcXCJob21lUGFnZUNvbmZpZ3NcXFwiKXtcXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb25maWcgPSBKU09OLnBhcnNlKGZldGNoKGdldE15VmFyKCdxZGJfY29uZmlnJykpKTtcXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ1tpdGVtXVtcXFwi6buY6K6kXFxcIl0gPSBkZWZhdWx0Q29uZmlnc1tpdGVtXVtcXFwi6buY6K6kXFxcIl07XFxuICAgICAgICAgICAgICAgICAgICBjb25maWdbaXRlbV0udXNlID0gXFxcIum7mOiupFxcXCI7XFxuICAgICAgICAgICAgICAgICAgICB3cml0ZUZpbGUoZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSwgSlNPTi5zdHJpbmdpZnkoY29uZmlnKSk7XFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+W3slxcXCIgKyBzZWw7XFxuICAgICAgICAgICAgICAgIH1lbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb25maWcgPSBKU09OLnBhcnNlKGZldGNoKGdldE15VmFyKCdxZGJfY29uZmlnJykpKTtcXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ1tpdGVtXSA9IGRlZmF1bHRDb25maWdzW2l0ZW1dO1xcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVGaWxlKGdldE15VmFyKCdxZGJfY29uZmlnJyksIEpTT04uc3RyaW5naWZ5KGNvbmZpZykpO1xcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/lt7JcXFwiICsgc2VsO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSwgaW5wdXQpXFxuICAgICAgICB9KVxcbiAgICB9KVxcbiAgICBzZXRSZXN1bHQoZCk7XFxufVxcblxcbmxldCB2aWV3ID0gZ2V0UGFyYW0oXFxcInZpZXdcXFwiLFxcXCJcXFwiKTtcXG5pZih2aWV3PT1cXFwiXFxcIil7XFxuICAgIHNldFBhZ2VUaXRsZShcXFwi6K6+572uXFxcIilcXG4gICAgc2V0dGluZ1BhZ2UoKTtcXG59ZWxzZSBpZih2aWV3PT1cXFwiYW5hbHlzaXNTZXR0aW5nTW9kdWxlXFxcIil7XFxuICAgIGxldCBkID0gW107XFxuICAgIHNldFBhZ2VUaXRsZShcXFwi6Kej5p6Q6K6+572uXFxcIilcXG4gICAgYW5hbHlzaXNTZXR0aW5nTW9kdWxlKGQpO1xcbiAgICBzZXRSZXN1bHQoZCk7XFxufVwifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwi6buY6K6k6YWN572uXCIsXCJwYXRoXCI6XCJkZWZhdWx0Q29uZmlnc1wiLFwicnVsZVwiOlwianM6XFxyXFxubGV0IGRlZmF1bHRDb25maWdzID0ge1xcclxcbiAgICBzdGFyQ29sb3I6IFxcXCIjZmZhYzJkXFxcIixcXHJcXG4gICAgY2hvb3NlQ29sb3I6IFxcXCIjRkE3Mjk4XFxcIixcXHJcXG4gICAgcXVpY2tTZWFyY2hDb25maWdzOiB7XFxyXFxuICAgICAgICBtb2RlOiBcXFwic2Nyb2xsX2J1dHRvblxcXCIsXFxyXFxuICAgICAgICBvcmRlcjogW1xcXCLmtbfpmJTmkJzntKJcXFwiXSxcXHJcXG4gICAgICAgIFxcXCLmtbfpmJTmkJzntKJcXFwiOiB7XFxyXFxuICAgICAgICAgICAgbmFtZTogXFxcIlxcXCIsXFxyXFxuICAgICAgICAgICAgcGljOiBcXFwiXFxcIlxcclxcbiAgICAgICAgfVxcclxcbiAgICB9LFxcclxcbiAgICBkZXRhaWxzVmlld0NvbmZpZ3M6IHtcXHJcXG4gICAgICAgIHVzZTogXFxcIum7mOiupFxcXCIsXFxyXFxuICAgICAgICBcXFwi6buY6K6kXFxcIjoge1xcclxcbiAgICAgICAgICAgIGNvbmZpZzogXFxcImV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtkZXRhaWxzVmlldyh0eXBlLCBpZCk7XFxcIlxcclxcbiAgICAgICAgfVxcclxcbiAgICB9LFxcclxcbiAgICBob21lUGFnZUNvbmZpZ3M6e1xcclxcbiAgICAgICAgdXNlOiBcXFwi6buY6K6kXFxcIixcXHJcXG4gICAgICAgIFxcXCLpu5jorqRcXFwiOiB7XFxyXFxuICAgICAgICAgICAgY29uZmlnOiBgbGV0IGQgPSBbXTtcXHJcXG5kLnB1c2goe1xcclxcbiAgICB0aXRsZTogJycsXFxyXFxuICAgIGltZzogJ2h0dHBzOi8vZ2l0Y29kZS5uZXQvcXFfNDE4NDY3NTYvaGlrZXIvLS9yYXcvbWFzdGVyL2ltZy/osYbnk6MucG5nJyxcXHJcXG4gICAgZGVzYzogJzAnLFxcclxcbiAgICBjb2xfdHlwZTogJ2NhcmRfcGljXzEnLFxcclxcbiAgICB1cmw6ICdoaWtlcjovL3BhZ2Uvc2V0dGluZ1BhZ2UnXFxyXFxufSlcXHJcXG5cXHJcXG5sZXQgcyA9IFtcXFwi5o6o6I2QXFxcIiwgXFxcIueDremXqFxcXCIsIFxcXCLliIbnsbtcXFwiLCBcXFwi54mH5Y2VXFxcIiwgXFxcIuamnOWNlVxcXCIsIFxcXCLlsIbkuIrmmKBcXFwiXTtcXHJcXG5sZXQgaW1nID0gXFxcImh0dHBzOi8vZ2l0Y29kZS5uZXQvcXFfNDE4NDY3NTYvaGlrZXIvLS9yYXcvbWFzdGVyL2ltZy9cXFwiO1xcclxcbmZvciAobGV0IGkgaW4gcykge1xcclxcbiAgICBkLnB1c2goe1xcclxcbiAgICAgICAgdGl0bGU6IHNbaV0sXFxyXFxuICAgICAgICBpbWc6IGltZyArIHNbaV0gKyAnLmpwZycsXFxyXFxuICAgICAgICBjb2xfdHlwZTogJ2ljb25fMicsXFxyXFxuICAgICAgICB1cmw6IFxcXCJoaWtlcjovL2VtcHR5XFxcIiArICckcGFnZXtmeXBhZ2V9LyMvJyArIHNbaV0gKyBcXFwiI25vSGlzdG9yeSNcXFwiXFxyXFxuICAgIH0pXFxyXFxufVxcclxcbnJldHVybiBkO2BcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfSxcXHJcXG4gICAgYW5hbHlzaXNDb25maWdzOiB7XFxyXFxuICAgICAgICB1c2U6IFxcXCLkuI3op6PmnpBcXFwiLFxcclxcbiAgICAgICAgXFxcIuS4jeino+aekFxcXCI6IHtcXHJcXG4gICAgICAgICAgICBjb25maWc6ICQudG9TdHJpbmcoKCkgPT4ge1xcclxcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQ7XFxyXFxuICAgICAgICAgICAgfSksXFxyXFxuICAgICAgICAgICAgc2V0dGluZzogJC50b1N0cmluZygoKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/or6Xmj5Lku7bml6Dorr7nva7pobXpnaJcXFwiO1xcclxcbiAgICAgICAgICAgIH0pXFxyXFxuICAgICAgICB9LFxcclxcbiAgICAgICAgXFxcIuaWreaPklxcXCI6IHtcXHJcXG4gICAgICAgICAgICBjb25maWc6ICQudG9TdHJpbmcoKCkgPT4ge1xcclxcbiAgICAgICAgICAgICAgICBsZXQgZmlsZSA9IFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL0R1YW5OaWFuL015UGFyc2UuanNvblxcXCI7XFxyXFxuICAgICAgICAgICAgICAgIGxldCBvbGRmaWxlID0gXFxcImhpa2VyOi8vZmlsZXMvY2FjaGUvTXlQYXJzZVNldC5qc29uXFxcIjtcXHJcXG4gICAgICAgICAgICAgICAgaWYgKGZpbGVFeGlzdChmaWxlKSkge1xcclxcbiAgICAgICAgICAgICAgICAgICAgZXZhbCgnanNvbj0nICsgZmV0Y2goZmlsZSkpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgbGV0IGpzVXJsID0ganNvbi5zZXR0aW5ncy5jajtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGV2YWwoZmV0Y2goanNVcmwpKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBheXRtUGFyc2UoaW5wdXQpO1xcclxcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGZpbGVFeGlzdChvbGRmaWxlKSkge1xcclxcbiAgICAgICAgICAgICAgICAgICAgbGV0IGpzVXJsID0gSlNPTi5wYXJzZShmZXRjaChvbGRmaWxlKSkuY2o7XFxyXFxuICAgICAgICAgICAgICAgICAgICBldmFsKGZldGNoKGpzVXJsKSk7XFxyXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXl0bVBhcnNlKGlucHV0KTtcXHJcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/msqHmib7liLDmlq3mj5LphY3nva7mlofku7YnO1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgfSksXFxyXFxuICAgICAgICAgICAgc2V0dGluZzogJC50b1N0cmluZygoKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgIGxldCBmaWxlID0gXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvRHVhbk5pYW4vTXlQYXJzZS5qc29uXFxcIjtcXHJcXG4gICAgICAgICAgICAgICAgbGV0IG9sZGZpbGUgPSBcXFwiaGlrZXI6Ly9maWxlcy9jYWNoZS9NeVBhcnNlU2V0Lmpzb25cXFwiO1xcclxcbiAgICAgICAgICAgICAgICBpZiAoZmlsZUV4aXN0KGZpbGUpKSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBldmFsKCdqc29uPScgKyBmZXRjaChmaWxlKSk7XFxyXFxuICAgICAgICAgICAgICAgICAgICBsZXQganNVcmwgPSBqc29uLnNldHRpbmdzLmNqO1xcclxcbiAgICAgICAgICAgICAgICAgICAgZXZhbChmZXRjaChqc1VybCkpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldFVybDtcXHJcXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmaWxlRXhpc3Qob2xkZmlsZSkpIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGxldCBqc1VybCA9IEpTT04ucGFyc2UoZmV0Y2gob2xkZmlsZSkpLmNqO1xcclxcbiAgICAgICAgICAgICAgICAgICAgZXZhbChmZXRjaChqc1VybCkpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldFVybDtcXHJcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9wYWdlL1JvdXRlP3J1bGU9TXlGaWVsZOG0sOKBvyZ0eXBlPeiuvue9rlxcXCI7XFxyXFxuICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICB9KVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVxcclxcbiQuZXhwb3J0cyA9IGRlZmF1bHRDb25maWdzO1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwi5bel5YW36ZuGXCIsXCJwYXRoXCI6XCJ1dGlsc1wiLFwicnVsZVwiOlwianM6XFxyXFxuLy/liJ3lp4vljJbphY3nva4sbmFtZeS4uumFjee9rumhueWQjeensFxcclxcbmZ1bmN0aW9uIGluaXRDb25maWdzKG5hbWUsIGNvbmZpZykge1xcclxcbiAgICBpZiAoIWNvbmZpZykge1xcclxcbiAgICAgICAgY29uZmlnID0gSlNPTi5wYXJzZShmZXRjaChnZXRNeVZhcigncWRiX2NvbmZpZycpKSk7XFxyXFxuICAgIH1cXHJcXG4gICAgaWYgKGNvbmZpZ1tuYW1lXSA9PSBudWxsKSB7XFxyXFxuICAgICAgICBsZXQgZGVmYXVsdENvbmZpZ3MgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9kZWZhdWx0Q29uZmlnc1xcXCIpO1xcclxcbiAgICAgICAgY29uZmlnW25hbWVdID0gZGVmYXVsdENvbmZpZ3NbbmFtZV0gPyBkZWZhdWx0Q29uZmlnc1tuYW1lXSA6IHt9O1xcclxcbiAgICAgICAgd3JpdGVGaWxlKGdldE15VmFyKCdxZGJfY29uZmlnJyksIEpTT04uc3RyaW5naWZ5KGNvbmZpZykpO1xcclxcbiAgICB9XFxyXFxuICAgIHJldHVybiBjb25maWc7XFxyXFxufVxcclxcblxcclxcbi8v6I635Y+W6YWN572u6aG5XFxyXFxuZnVuY3Rpb24gZ2V0Q29uZmlnKG5hbWUsIHJvb3RDb25maWcpIHtcXHJcXG4gICAgbGV0IGNvbmZpZyA9IHJvb3RDb25maWcgPyByb290Q29uZmlnIDogSlNPTi5wYXJzZShmZXRjaChnZXRNeVZhcigncWRiX2NvbmZpZycpKSk7XFxyXFxuICAgIGlmIChuYW1lKSB7XFxyXFxuICAgICAgICBpZiAoY29uZmlnW25hbWVdID09IG51bGwpIHtcXHJcXG4gICAgICAgICAgICBjb25maWcgPSBpbml0Q29uZmlncyhuYW1lLCBjb25maWcpO1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgcmV0dXJuIGNvbmZpZ1tuYW1lXTtcXHJcXG4gICAgfSBlbHNlIHtcXHJcXG4gICAgICAgIHJldHVybiBjb25maWc7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuLy/nvJbnoIHlt6XlhbfnsbtcXHJcXG5sZXQgWmlwVG9vbCA9IHtcXHJcXG4gICAgZGVwZW5kZW5jZTogJ2h0dHBzOi8vdW5wa2cuY29tL2x6LXN0cmluZ0AxLjQuNC9saWJzL2x6LXN0cmluZy5taW4uanMnLFxcclxcbiAgICBjb21wcmVzczoge1xcclxcbiAgICAgICAgc2l6ZToge1xcclxcbiAgICAgICAgICAgIGtleTogXFxcInRleHQtY29tcHJlc3Mtc2l6ZVxcXCIsXFxyXFxuICAgICAgICAgICAgc2V0OiAobmV3VmFsdWUpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIodGhpcy5rZXksIG5ld1ZhbHVlLnRvU3RyaW5nKCkpXFxyXFxuICAgICAgICAgICAgfSxcXHJcXG4gICAgICAgICAgICBnZXQ6ICgpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGdldE15VmFyKHRoaXMua2V5LCBcXFwiMFxcXCIpKVxcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH0sXFxyXFxuICAgICAgICBleGVjOiAoaW5wdXQpID0+IHtcXHJcXG4gICAgICAgICAgICBldmFsKHJlcXVlc3QoWmlwVG9vbC5kZXBlbmRlbmNlKSlcXHJcXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gTFpTdHJpbmcuY29tcHJlc3NUb0VuY29kZWRVUklDb21wb25lbnQoaW5wdXQpXFxyXFxuICAgICAgICAgICAgICAgIC8vIFppcFRvb2wuY29tcHJlc3Muc2l6ZS5zZXQocmVzdWx0Lmxlbmd0aCAqIDIpXFxyXFxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxcclxcbiAgICAgICAgfVxcclxcbiAgICB9LFxcclxcbiAgICBkZWNvbXByZXNzOiB7XFxyXFxuICAgICAgICBzaXplOiB7XFxyXFxuICAgICAgICAgICAgZ2V0OiAoKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRNeVZhcihcXFwidGV4dC1kZWNvbXByZXNzXFxcIiwgXFxcIjBcXFwiKVxcclxcbiAgICAgICAgICAgICAgICAgICAgLmxlbmd0aFxcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH0sXFxyXFxuICAgICAgICBleGVjOiAoaW5wdXQpID0+IHtcXHJcXG4gICAgICAgICAgICBldmFsKHJlcXVlc3QoWmlwVG9vbC5kZXBlbmRlbmNlKSlcXHJcXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gTFpTdHJpbmcuZGVjb21wcmVzc0Zyb21FbmNvZGVkVVJJQ29tcG9uZW50KGlucHV0KVxcclxcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG4vLyDphY3nva7pobnlt6XlhbfnsbtcXHJcXG5sZXQgQ29uZmlnVG9vbCA9IHtcXHJcXG4gICAgZW5jVHlwZUxpc3Q6IFsnQmFzZTY0JywgJ1ppcHBlciddLmNvbmNhdChnZXRQYXN0ZXMoKSksXFxyXFxuICAgIHRvQ2xpcGJvYXJkOiAoY29uZmlnQ29tbWFuZCwgbmFtZSkgPT4ge1xcclxcbiAgICAgICAgaWYgKGNvbmZpZ0NvbW1hbmQuc3RhcnRzV2l0aCgndG9hc3Q6Ly8nKSkgcmV0dXJuIGNvbmZpZ0NvbW1hbmRcXHJcXG4gICAgICAgIGlmICghbmFtZSkge1xcclxcbiAgICAgICAgICAgIGxldCBjb21tYW5kU3BsaXRzID0gY29uZmlnQ29tbWFuZC5zcGxpdChcXFwi77+lXFxcIilcXHJcXG4gICAgICAgICAgICBuYW1lID0gY29tbWFuZFNwbGl0c1syXVxcclxcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lID8gKFxcXCLigJxcXFwiICsgbmFtZSArIFxcXCLigJ1cXFwiKSA6ICcnXFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxyXFxuICAgICAgICByZXR1cm4gXFxcImNvcHk6Ly9cXFwiICsgY29uZmlnQ29tbWFuZCArIFxcXCIuanM6J3RvYXN0Oi8v5a+85Ye6XFxcIiArIG5hbWUgKyBcXFwi5oiQ5Yqf77yBJ1xcXCI7XFxyXFxuICAgIH0sXFxyXFxuICAgIGV4cG9ydDogKG5hbWUsIGNvbmZpZywgcmVtYXJrLCBlbmNUeXBlKSA9PiB7XFxyXFxuICAgICAgICBsZXQgc3ltYm9sID0gXFxcIumdkuixhuWPo+S7pO+/pVxcXCIgKyByZW1hcmsgKyBcXFwi77+lXFxcIiArIG5hbWUgKyBcXFwi77+lXFxcIiArIGVuY1R5cGUgKyBcXFwi77+lXFxcIjtcXHJcXG4gICAgICAgIGxldCByZXN1bHQgPSBjb25maWdcXHJcXG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcXFwib2JqZWN0XFxcIikge1xcclxcbiAgICAgICAgICAgIHJlc3VsdCA9IEpTT04uc3RyaW5naWZ5KGNvbmZpZyk7XFxyXFxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiByZXN1bHQgPT09IFxcXCJzdHJpbmdcXFwiKSB7XFxyXFxuICAgICAgICAgICAgcmVzdWx0ID0gY29uZmlnO1xcclxcbiAgICAgICAgfSBlbHNlIHtcXHJcXG4gICAgICAgICAgICB0aHJvdyBcXFwi5a+85Ye65pWw5o2u5LiN5ZCI5rOVXFxcIlxcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgc3dpdGNoIChlbmNUeXBlKSB7XFxyXFxuICAgICAgICAgICAgY2FzZSAnQmFzZTY0JzpcXHJcXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gYmFzZTY0RW5jb2RlKHJlc3VsdCk7XFxyXFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcclxcbiAgICAgICAgICAgIGNhc2UgJ1ppcHBlcic6XFxyXFxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IFppcFRvb2wuY29tcHJlc3MuZXhlYyhyZXN1bHQpXFxyXFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcclxcbiAgICAgICAgICAgIGRlZmF1bHQgOlxcclxcbiAgICAgICAgICAgICAgICBpZiAoZ2V0QXBwVmVyc2lvbigpID4gMjA3MCkge1xcclxcbiAgICAgICAgICAgICAgICAgICAgc3ltYm9sID0gXFxcIumdkuixhuWPo+S7pO+/pVxcXCIgKyByZW1hcmsgKyBcXFwi77+lXFxcIiArIG5hbWVcXHJcXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNoYXJlUGFzdGUoQ29uZmlnVG9vbC5leHBvcnQobmFtZSwgY29uZmlnLCByZW1hcmssICdaaXBwZXInKSxlbmNUeXBlKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnXFxcXG5cXFxcbicgKyBzeW1ib2xcXHJcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/or7fmm7TmlrDop4bnlYzniYjmnKzoh7MgQzIwNzAg5Lul5LiKJ1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgcmVzdWx0ID0gc3ltYm9sICsgcmVzdWx0XFxyXFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xcclxcbiAgICB9LFxcclxcbiAgICBpbXBvcnQ6IChjb25maWdDb21tYW5kKSA9PiB7XFxyXFxuICAgICAgICBsZXQgcmVzdWx0ID0gJydcXHJcXG4gICAgICAgIGlmIChjb25maWdDb21tYW5kLnN0YXJ0c1dpdGgoJ+S6kScpKSB7XFxyXFxuICAgICAgICAgICAgaWYgKGdldEFwcFZlcnNpb24oKSA+IDIwNzApIHtcXHJcXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY29uZmlnQ29tbWFuZC5zcGxpdCgn6Z2S6LGGJylbMF0ucmVwbGFjZSgvXFxcXFxcXFxuLywgJycpXFxyXFxuICAgICAgICAgICAgICAgIGNvbmZpZ0NvbW1hbmQgPSBwYXJzZVBhc3RlKHJlc3VsdClcXHJcXG4gICAgICAgICAgICB9IGVsc2Uge1xcclxcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v6K+35pu05paw6KeG55WM54mI5pys6IezIEMyMDcwIOS7peS4iidcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICB0cnkge1xcclxcbiAgICAgICAgICAgIGxldCByZXN1bHRTcGxpdHMgPSBjb25maWdDb21tYW5kLnNwbGl0KFxcXCLvv6VcXFwiKVxcclxcbiAgICAgICAgICAgIGxldCBlbmNUeXBlID0gcmVzdWx0U3BsaXRzWzNdXFxyXFxuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0U3BsaXRzWzRdXFxyXFxuICAgICAgICAgICAgc3dpdGNoIChlbmNUeXBlKSB7XFxyXFxuICAgICAgICAgICAgICAgIGNhc2UgJ0Jhc2U2NCc6XFxyXFxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBiYXNlNjREZWNvZGUocmVzdWx0KTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcclxcbiAgICAgICAgICAgICAgICBjYXNlICdaaXBwZXInOlxcclxcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gWmlwVG9vbC5kZWNvbXByZXNzLmV4ZWMocmVzdWx0KVxcclxcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIHJlc3VsdCA9IEpTT04ucGFyc2UocmVzdWx0KTtcXHJcXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXHJcXG4gICAgICAgICAgICBsb2coZS5tZXNzYWdlKVxcclxcbiAgICAgICAgICAgIHRocm93IFxcXCLlr7zlhaXmlbDmja7kuI3lkIjms5VcXFwiXFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xcclxcbiAgICB9XFxyXFxufVwifV0sXCJzYXZlZFwiOmZhbHNlLFwidGl0bGVcIjpcIumdkuixhlwiLFwidmVyc2lvblwiOjAsXCJ1cmxcIjpcImhpa2VyOi8vZW1wdHkjbm9IaXN0b3J5IyNpbW1lcnNpdmVUaGVtZSM/dHlwZT1tb3ZpZSZpZD0zMjEyMTIwO2dldDtVVEYtODt7VXNlci1BZ2VudEBNb3ppbGxhLzUuMCAoTGludXjvvJvvvJsgQW5kcm9pZCAxMe+8m++8myBNaSAxMCBQcm8pIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84OC4wLjQzMjQuMTUyIE1vYmlsZSBTYWZhcmkvNTM3LjM2fVwiLFwiY29sX3R5cGVcIjpcIm1vdmllXzFcIixcImZpbmRfcnVsZVwiOlwianM6KFxcbih0eXBlLCBpZCwgdGl0bGUsIHVzZUNvbmZpZykgPT4ge1xcbiAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9wYWdlL21haW5cXFwiKSkucnVsZSk7XFxuICAgIGlmICh0eXBlID09PSBcXFwicGxheWxpc3RcXFwiKSB7XFxuICAgICAgICBkb3VMaXN0KGlkLCBNWV9QQUdFLCA1MCk7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICBldmFsKHVzZUNvbmZpZyk7XFxuICAgIH1cXG59XFxuKShcXFwibW92aWVcXFwiLFxcXCIzMjEyMTIwXFxcIixcXFwi5Lmd6ZmN6aOOXFxcIixcXFwiZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO2RldGFpbHNWaWV3KHR5cGUsIGlkKTtcXFwiKVwiLFwiZ3JvdXBcIjpcIuKRoOaOqOiNkFwiLFwidWFcIjpcIm1vYmlsZVwiLFwicHJlUnVsZVwiOlwibGV0IGZpbGUgPSBcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9qb2tlci9xZGJfY29uZmlnLmpzXFxcIjtcXG5sZXQgYmFrZmlsZSA9IFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2pva2VyL3FkYl9jb25maWcuanMuYmFrXFxcIjtcXG50cnkge1xcbiAgICBsZXQgZGVmYXVsdENvbmZpZ3MgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9kZWZhdWx0Q29uZmlncz9ydWxlPemdkuixhlxcXCIpO1xcbiAgICBpZiAoIWZpbGVFeGlzdChmaWxlKSkge1xcbiAgICAgICAgd3JpdGVGaWxlKGZpbGUsIEpTT04uc3RyaW5naWZ5KGRlZmF1bHRDb25maWdzKSk7XFxuICAgIH1lbHNle1xcbiAgICAgICAgdHJ5e1xcbiAgICAgICAgICAgIGxldCBjb25maWcgPSBKU09OLnBhcnNlKGZldGNoKGZpbGUpKTtcXG4gICAgICAgICAgICBjb25maWcuZGV0YWlsc1ZpZXdDb25maWdzW1xcXCLpu5jorqRcXFwiXSA9IGRlZmF1bHRDb25maWdzLmRldGFpbHNWaWV3Q29uZmlnc1tcXFwi6buY6K6kXFxcIl07XFxuICAgICAgICAgICAgY29uZmlnLmhvbWVQYWdlQ29uZmlnc1tcXFwi6buY6K6kXFxcIl0gPSBkZWZhdWx0Q29uZmlncy5ob21lUGFnZUNvbmZpZ3NbXFxcIum7mOiupFxcXCJdO1xcbiAgICAgICAgICAgIHdyaXRlRmlsZShmaWxlLCBKU09OLnN0cmluZ2lmeShjb25maWcpKTtcXG4gICAgICAgIH1jYXRjaChlKXtcXG4gICAgICAgICAgICB3cml0ZUZpbGUoYmFrZmlsZSwgZmV0Y2goZmlsZSkpO1xcbiAgICAgICAgICAgIHdyaXRlRmlsZShmaWxlLCBKU09OLnN0cmluZ2lmeShkZWZhdWx0Q29uZmlncykpO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIHB1dE15VmFyKFxcXCJxZGJfY29uZmlnXFxcIiwgZmlsZSk7XFxufSBjYXRjaCAoZSkge1xcbiAgICBsZXQgcG9zID0gXFxcIumihOWkhOeQhlxcXCI7XFxuICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL3BhZ2UvdXJnZW5jeU1vZGU/cnVsZT3pnZLosYZcXFwiKSkucnVsZSlcXG59XCIsXCJwYWdlc1wiOlwiW3tcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIumFjee9rue8lui+keeVjOmdolxcXCIsXFxcInBhdGhcXFwiOlxcXCJzZXR0aW5nLWVkaXRvclxcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbi8qKlxcXFxuICog6YCa6L+H5Lyg5YWlIHBhcmFtcyDlr7nosaHnlJ/miJDnvJbovpHnlYzpnaJcXFxcbiAqIEBwYXJhbSBkIOinhueVjCBzZXRSZXN1bHQg55So55qE5YiX6KGoXFxcXG4gKiBAcGFyYW0gY29uZmlnS2V5IGNvbmZpZyDnmoQga2V5IOWAvO+8jOavlOWmguaIkeimgeaLvyBjb25maWcuZGV0YWlsc1ZpZXdDb25maWdz77yMY29uZmlnS2V5IOWwseS8oCBcXFxcXFxcImRldGFpbHNWaWV3Q29uZmlnc1xcXFxcXFwiXFxcXG4gKiBAcGFyYW0gcGFyYW1zIOe8lui+keeVjOmdoueahOmFjee9rlxcXFxuICpcXFxcbiAqIOOAkHBhcmFtc+WvueixoeaVsOaNruekuuS+i+OAkVxcXFxuICoge1xcXFxuICAgICAgICBrZXk6IFxcXFxcXFwiaW5wdXRfbmFtZVxcXFxcXFwiLFxcXFxuICAgICAgICBkZXNjOiBcXFxcXFxcIuivt+i+k+WFpeWQjeensFxcXFxcXFwiLFxcXFxuICAgICAgICB0eXBlOiAndGV4dGFyZWEnLFxcXFxuICAgICAgICBkYXRhOiB7XFxcXG4gICAgICAgICAgICBjb25maWc6IHtcXFxcbiAgICAgICAgICAgICAgICBrZXk6IFxcXFxcXFwiaW5wdXRfY29kZVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGRlc2M6IFxcXFxcXFwi6K+36L6T5YWl6L6T5YWl6YWN572uXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgdHlwZTogJ3RleHRhcmVhJ1xcXFxuICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgfVxcXFxuICAgIH1cXFxcbiAqL1xcXFxuZnVuY3Rpb24gbW9kZUVkaXRQYWdlKGQsIGNvbmZpZ0tleSwgcGFyYW1zKSB7XFxcXG4gICAgYWRkTGlzdGVuZXIoJ29uQ2xvc2UnLCAkLnRvU3RyaW5nKChwYXJhbXMpID0+IHtcXFxcbiAgICAgICAgY2xlYXJNeVZhcihwYXJhbXMua2V5KVxcXFxuICAgICAgICBsZXQgZGF0YXMgPSBwYXJhbXMuZGF0YTtcXFxcbiAgICAgICAgbGV0IGRhdGFLZXlzID0gT2JqZWN0LmtleXMoZGF0YXMpO1xcXFxuICAgICAgICBmb3IgKGxldCBpIGluIGRhdGFLZXlzKSB7XFxcXG4gICAgICAgICAgICBsZXQgZGF0YUtleSA9IGRhdGFLZXlzW2ldXFxcXG4gICAgICAgICAgICBjbGVhck15VmFyKGRhdGFzW2RhdGFLZXldLmtleSlcXFxcbiAgICAgICAgfVxcXFxuICAgIH0sIHBhcmFtcykpXFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi5L+d5a2YXFxcXFxcXCIsXFxcXG4gICAgICAgIGRlc2M6IHBhcmFtcy5kZXNjLFxcXFxuICAgICAgICBjb2xfdHlwZTogJ2lucHV0JyxcXFxcbiAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgIHRpdGxlVmlzaWJsZTogZmFsc2UsXFxcXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU6IGdldE15VmFyKHBhcmFtcy5rZXksIFxcXFxcXFwiXFxcXFxcXCIpLFxcXFxuICAgICAgICAgICAgdHlwZTogcGFyYW1zLnR5cGUgPyBwYXJhbXMudHlwZSA6ICcnLFxcXFxuICAgICAgICAgICAgb25DaGFuZ2U6ICdwdXRNeVZhcihcXFxcXFxcIicgKyBwYXJhbXMua2V5ICsgJ1xcXFxcXFwiLCBpbnB1dCknXFxcXG4gICAgICAgIH1cXFxcbiAgICB9KVxcXFxuICAgIGxldCBkYXRhcyA9IHBhcmFtcy5kYXRhO1xcXFxuICAgIGxldCBkYXRhS2V5cyA9IE9iamVjdC5rZXlzKGRhdGFzKTtcXFxcbiAgICBmb3IgKGxldCBkYXRhS2V5IG9mIGRhdGFLZXlzKSB7XFxcXG4gICAgICAgIGxldCBkYXRhID0gZGF0YXNbZGF0YUtleV1cXFxcbiAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuS/neWtmFxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZGVzYzogZGF0YS5kZXNjLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdpbnB1dCcsXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlVmlzaWJsZTogZmFsc2UsXFxcXG4gICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBnZXRNeVZhcihkYXRhLmtleSwgXFxcXFxcXCJcXFxcXFxcIiksXFxcXG4gICAgICAgICAgICAgICAgdHlwZTogZGF0YS50eXBlID8gZGF0YS50eXBlIDogJycsXFxcXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA1LFxcXFxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodDogdHJ1ZSxcXFxcbiAgICAgICAgICAgICAgICBvbkNoYW5nZTogJ3B1dE15VmFyKFxcXFxcXFwiJyArIGRhdGEua2V5ICsgJ1xcXFxcXFwiLCBpbnB1dCknXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pXFxcXG4gICAgfVxcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiAn5L+d5a2YJyxcXFxcbiAgICAgICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJyxcXFxcbiAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5I25vTG9hZGluZyMnKS5sYXp5UnVsZSgoY29uZmlnS2V5LCBwYXJhbXMpID0+IHtcXFxcbiAgICAgICAgICAgIGxldCBjb25maWcgPSBKU09OLnBhcnNlKHJlcXVlc3QoZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSkpXFxcXG4gICAgICAgICAgICBsZXQgbmFtZSA9IGdldE15VmFyKHBhcmFtcy5rZXksIFxcXFxcXFwiXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgaWYobmFtZSA9PSAn6buY6K6kJykgcmV0dXJuICd0b2FzdDovL+m7mOiupOmFjee9ruaXoOazlee8lui+kSdcXFxcbiAgICAgICAgICAgIGNvbmZpZ1tjb25maWdLZXldLnVzZSA9IG5hbWVcXFxcbiAgICAgICAgICAgIGlmICghY29uZmlnW2NvbmZpZ0tleV1bbmFtZV0pIGNvbmZpZ1tjb25maWdLZXldW25hbWVdID0ge31cXFxcbiAgICAgICAgICAgIGxldCBkYXRhcyA9IHBhcmFtcy5kYXRhO1xcXFxuICAgICAgICAgICAgbGV0IGRhdGFLZXlzID0gT2JqZWN0LmtleXMoZGF0YXMpO1xcXFxuICAgICAgICAgICAgZm9yIChsZXQgaSBpbiBkYXRhS2V5cykge1xcXFxuICAgICAgICAgICAgICAgIGxldCBkYXRhS2V5ID0gZGF0YUtleXNbaV1cXFxcbiAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IGRhdGFzW2RhdGFLZXldXFxcXG4gICAgICAgICAgICAgICAgY29uZmlnW2NvbmZpZ0tleV1bbmFtZV1bZGF0YUtleV0gPSBnZXRNeVZhcihkYXRhLmtleSwgXFxcXFxcXCJcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB3cml0ZUZpbGUoZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSwgSlNPTi5zdHJpbmdpZnkoY29uZmlnKSlcXFxcbiAgICAgICAgICAgIGJhY2soKTtcXFxcbiAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/kv53lrZjmiJDlip8nXFxcXG4gICAgICAgIH0sIGNvbmZpZ0tleSwgcGFyYW1zKVxcXFxuICAgIH0pXFxcXG59XFxcXG5cXFxcbi8v6Ieq5a6a5LmJ6aaW6aG1LemFjee9rue8lui+kemhtemdolxcXFxuZnVuY3Rpb24gaG9tZVBhZ2VNb2RlRWRpdFBhZ2UoZCkge1xcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiAnPGZvbnQgY29sb3I9XFxcXFxcXCJyZWRcXFxcXFxcIj4nICsgJ+i/lOWbnuaVsOe7hCzkvptzZXRSZXN1bHTkvb/nlKgnICsgJzwvZm9udD4nICsgJzxmb250IGNvbG9yPVxcXFxcXFwiIzgwODA4MFxcXFxcXFwiPjxicj4nICsgJ+OAkOWGhee9ruWHveaVsOOAkScgKyAnPGJyPiZuYnNwOyZuYnNwOyZuYnNwO2hpa2VyOi8vcGFnZS9zZXR0aW5nUGFnZTog6K6+572u6aG1KOm7mOiupOmmlumhteacieS9v+eUqOekuuS+iyknICsgJzwvZm9udD4nLFxcXFxuICAgICAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCdcXFxcbiAgICB9KVxcXFxuICAgIG1vZGVFZGl0UGFnZShkLCBcXFxcXFxcImhvbWVQYWdlQ29uZmlnc1xcXFxcXFwiLCB7XFxcXG4gICAgICAgIGtleTogXFxcXFxcXCJpbnB1dF9uYW1lXFxcXFxcXCIsXFxcXG4gICAgICAgIGRlc2M6IFxcXFxcXFwi6K+36L6T5YWl5ZCN56ewXFxcXFxcXCIsXFxcXG4gICAgICAgIC8vIHR5cGU6ICdpbnB1dCdcXFxcbiAgICAgICAgZGF0YToge1xcXFxuICAgICAgICAgICAgY29uZmlnOiB7XFxcXG4gICAgICAgICAgICAgICAga2V5OiBcXFxcXFxcImlucHV0X2NvZGVcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICBkZXNjOiBcXFxcXFxcIuivt+i+k+WFpemFjee9ruS7o+eggVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0YXJlYSdcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgIH0pXFxcXG59XFxcXG5cXFxcbi8v6Ieq5a6a5LmJ6K+m5oOF6aG16Z2iLemFjee9rue8lui+kemhtemdolxcXFxuZnVuY3Rpb24gZGV0YWlsVmlld01vZGVFZGl0UGFnZShkKSB7XFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6ICc8Zm9udCBjb2xvcj1cXFxcXFxcIiM4MDgwODBcXFxcXFxcIj4nICsgJ+OAkOWGhee9ruWPmOmHj+OAkScgKyAnPGJyPiZuYnNwOyZuYnNwOyZuYnNwO2lkOiDniYfljZVpZCcgKyAnPGJyPiZuYnNwOyZuYnNwOyZuYnNwO3R5cGU6IOeJh+WNleexu+WeiycgKyAnPGJyPiZuYnNwOyZuYnNwOyZuYnNwO3RpdGxlOiDniYfljZXmoIfpopgnICsgJzwvZm9udD4nLFxcXFxuICAgICAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCdcXFxcbiAgICB9KVxcXFxuICAgIG1vZGVFZGl0UGFnZShkLCBcXFxcXFxcImRldGFpbHNWaWV3Q29uZmlnc1xcXFxcXFwiLCB7XFxcXG4gICAgICAgIGtleTogXFxcXFxcXCJpbnB1dF9uYW1lXFxcXFxcXCIsXFxcXG4gICAgICAgIGRlc2M6IFxcXFxcXFwi6K+36L6T5YWl5ZCN56ewXFxcXFxcXCIsXFxcXG4gICAgICAgIC8vIHR5cGU6ICdpbnB1dCdcXFxcbiAgICAgICAgZGF0YToge1xcXFxuICAgICAgICAgICAgY29uZmlnOiB7XFxcXG4gICAgICAgICAgICAgICAga2V5OiBcXFxcXFxcImlucHV0X2NvZGVcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICBkZXNjOiBcXFxcXFxcIuivt+i+k+WFpemFjee9ruS7o+eggVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0YXJlYSdcXFxcbiAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICBzZXR0aW5nOiB7XFxcXG4gICAgICAgICAgICAgICAga2V5OiBcXFxcXFxcImlucHV0X3NldHRpbmdfY29kZVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGRlc2M6IFxcXFxcXFwi6K+36L6T5YWl6K6+572u6aG16Z2i5Luj56CBXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgdHlwZTogJ3RleHRhcmVhJ1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9XFxcXG4gICAgfSlcXFxcbn1cXFxcblxcXFxuLy/oh6rlrprkuYnop6PmnpAt57yW6L6R6aG16Z2iXFxcXG5mdW5jdGlvbiBhbmFseXNpc01vZGVFZGl0UGFnZShkKSB7XFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6ICc8Zm9udCBjb2xvcj1cXFxcXFxcIiM4MDgwODBcXFxcXFxcIj4nICsgJ+OAkOino+aekOS7o+eggeWGhee9ruWPmOmHj+OAkScgKyAnPGJyPiZuYnNwOyZuYnNwOyZuYnNwO2lucHV0OiDop4bpopHpk77mjqUnICsgJzwvZm9udD4nLFxcXFxuICAgICAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCdcXFxcbiAgICB9KVxcXFxuICAgIG1vZGVFZGl0UGFnZShkLCBcXFxcXFxcImFuYWx5c2lzQ29uZmlnc1xcXFxcXFwiLCB7XFxcXG4gICAgICAgIGtleTogXFxcXFxcXCJpbnB1dF9uYW1lXFxcXFxcXCIsXFxcXG4gICAgICAgIGRlc2M6IFxcXFxcXFwi6K+36L6T5YWl5ZCN56ewXFxcXFxcXCIsXFxcXG4gICAgICAgIC8vIHR5cGU6ICdpbnB1dCdcXFxcbiAgICAgICAgZGF0YToge1xcXFxuICAgICAgICAgICAgY29uZmlnOiB7XFxcXG4gICAgICAgICAgICAgICAga2V5OiBcXFxcXFxcImlucHV0X2NvZGVcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICBkZXNjOiBcXFxcXFxcIuivt+i+k+WFpeino+aekOS7o+eggVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0YXJlYSdcXFxcbiAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIGtleTogJ2lucHV0X2V4dHJhJyxcXFxcbiAgICAgICAgICAgICAgICBkZXNjOiAn6K+36L6T5YWlZXh0cmHlsZ7mgKflgLwnLFxcXFxuICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0YXJlYSdcXFxcbiAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICBzZXR0aW5nOiB7XFxcXG4gICAgICAgICAgICAgICAga2V5OiBcXFxcXFxcImlucHV0X3NldHRpbmdfY29kZVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGRlc2M6IFxcXFxcXFwi6K+36L6T5YWl6K6+572u6aG16Z2i5Luj56CBXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgdHlwZTogJ3RleHRhcmVhJ1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9XFxcXG4gICAgfSlcXFxcbn1cXFxcblxcXFxubGV0IGQgPSBbXTtcXFxcbmxldCB2aWV3ID0gZ2V0UGFyYW0oXFxcXFxcXCJ2aWV3XFxcXFxcXCIsXFxcXFxcXCJcXFxcXFxcIik7XFxcXG5pZih2aWV3PT1cXFxcXFxcImFuYWx5c2lzTW9kZUVkaXRQYWdlXFxcXFxcXCIpe1xcXFxuICAgIHNldFBhZ2VUaXRsZShcXFxcXFxcIuiHquWumuS5ieino+aekOe8lui+kVxcXFxcXFwiKVxcXFxuICAgIGFuYWx5c2lzTW9kZUVkaXRQYWdlKGQpO1xcXFxufWVsc2UgaWYodmlldz09XFxcXFxcXCJkZXRhaWxWaWV3TW9kZUVkaXRQYWdlXFxcXFxcXCIpe1xcXFxuICAgIHNldFBhZ2VUaXRsZShcXFxcXFxcIuiHquWumuS5ieivpuaDhemhtee8lui+kVxcXFxcXFwiKVxcXFxuICAgIGRldGFpbFZpZXdNb2RlRWRpdFBhZ2UoZCk7XFxcXG59ZWxzZSBpZih2aWV3PT1cXFxcXFxcImhvbWVQYWdlTW9kZUVkaXRQYWdlXFxcXFxcXCIpe1xcXFxuICAgIHNldFBhZ2VUaXRsZShcXFxcXFxcIuiHquWumuS5iemmlumhtee8lui+kVxcXFxcXFwiKVxcXFxuICAgIGhvbWVQYWdlTW9kZUVkaXRQYWdlKGQpO1xcXFxufVxcXFxuc2V0UmVzdWx0KGQpO1xcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIuino+mZpOiiq+WwgWlwXFxcIixcXFwicGF0aFxcXCI6XFxcInJlbGVhc2VJUFxcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmxldCBpZCA9IGdldFBhcmFtKCdpZCcpO1xcXFxubGV0IGQgPSBbXTtcXFxcbmQucHVzaCh7XFxcXG4gICAgdGl0bGU6ICfmgqjlt7LooqvlsIHnpoFJUOWcsOWdgOaIluinpuWPkeS6huS6uuacuumqjOivge+8jOivt+aMieeFp+S7peS4i+atpemqpOWkhOeQhijlpoLkuI3lpITnkIbmgqjlsIblnKjkuIDmrrXml7bpl7TlhoXml6Dms5XmraPluLjojrflj5bliafpm4bliJfooagpJyxcXFxcbiAgICB1cmw6ICdoaWtlcjovL2VtcHR5JyxcXFxcbiAgICBjb2xfdHlwZTogJ3RleHRfMSdcXFxcbn0pO1xcXFxuZC5wdXNoKHtcXFxcbiAgICB0aXRsZTogJzEu54K55Ye75q2k5aSE5a+85YWl6Ieq5Yqo6I635Y+WQ29va2ll5o+S5Lu2JyxcXFxcbiAgICB1cmw6ICQoKVxcXFxuICAgICAgICAubGF6eVJ1bGUoKCkgPT4ge1xcXFxuICAgICAgICAgICAgbGV0IGdldERvdWJhbkNvb2tpZSA9IFxcXFxcXFwiKGZ1bmN0aW9uKCl7aWYod2luZG93Wydsb2NhdGlvbiddWydob3N0J109PSd3d3cuZG91YmFuLmNvbScpe2Z5X2JyaWRnZV9hcHBbJ3dyaXRlRmlsZSddKCdoaWtlcjovL2ZpbGVzL2NhY2hlL2RvdWJhbmNvb2tpZS50eHQnLGZ5X2JyaWRnZV9hcHBbJ2dldENvb2tpZSddKCdodHRwczovL3d3dy5kb3ViYW4uY29tLycpKTt9aWYod2luZG93Wydsb2NhdGlvbiddWydob3N0J109PSdtLmRvdWJhbi5jb20nKXtmeV9icmlkZ2VfYXBwWyd3cml0ZUZpbGUnXSgnaGlrZXI6Ly9maWxlcy9jYWNoZS9kb3ViYW5jb29raWUudHh0JyxmeV9icmlkZ2VfYXBwWydnZXRDb29raWUnXSgnaHR0cHM6Ly9tLmRvdWJhbi5jb20vJykpO319KCkpO1xcXFxcXFwiXFxcXG4gICAgICAgICAgICBpZiAoIWZpbGVFeGlzdCgnaGlrZXI6Ly9maWxlcy9jYWNoZS9nbG9iYWxfZ2V0RG91YmFuQ29va2llLmpzJykpIHtcXFxcbiAgICAgICAgICAgICAgICB3cml0ZUZpbGUoJ2hpa2VyOi8vZmlsZXMvY2FjaGUvZ2xvYmFsX2dldERvdWJhbkNvb2tpZS5qcycsIGdldERvdWJhbkNvb2tpZSk7XFxcXG4gICAgICAgICAgICB9O1xcXFxuICAgICAgICAgICAgcmV0dXJuICdydWxlOi8vJyArIGJhc2U2NEVuY29kZSgn5rW36ZiU6KeG55WM77yM572R6aG15o+S5Lu277+lanNfdXJs77+lZ2xvYmFsX2dldERvdWJhbkNvb2tpZUBoaWtlcjovL2ZpbGVzL2NhY2hlL2dsb2JhbF9nZXREb3ViYW5Db29raWUuanMnKTtcXFxcbiAgICAgICAgfSksXFxcXG4gICAgY29sX3R5cGU6ICd0ZXh0XzEnXFxcXG59KTtcXFxcbmQucHVzaCh7XFxcXG4gICAgdGl0bGU6ICcyLueCueWHu+atpOWkhOi/m+WFpee9kemhtei/m+ihjOeZu+W9leaIluS6uuacuumqjOivge+8jOWujOaIkOWQjui/lOWbnuatpOmhtemdoicsXFxcXG4gICAgdXJsOiAnaHR0cHM6Ly9tb3ZpZS5kb3ViYW4uY29tL3N1YmplY3QvJyArIGlkICsgJy8nLFxcXFxuICAgIGNvbF90eXBlOiAndGV4dF8xJ1xcXFxufSk7XFxcXG5kLnB1c2goe1xcXFxuICAgIHRpdGxlOiAnMy7lrozmiJDnmbvlvZXmiJbkurrmnLrpqozor4HlkI7ov5Tlm57lvbHniYfor6bmg4XpobXpnaLph43mlrDov5vlhaUnLFxcXFxuICAgIHVybDogJ2hpa2VyOi8vZW1wdHknLFxcXFxuICAgIGNvbF90eXBlOiAndGV4dF8xJ1xcXFxufSk7XFxcXG5zZXRSZXN1bHQoZClcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLmiqLmlZHpobXpnaJcXFwiLFxcXCJwYXRoXFxcIjpcXFwidXJnZW5jeU1vZGVcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5sZXQgZCA9IFtdO1xcXFxuXFxcXG5kLnB1c2goe1xcXFxuICB0aXRsZTogJ+W+iOaYjuaYvizlh7rkuobkuIDkupvlsI/pl67popgs5bu66K6u5p+l55yL6K6+572uJyxcXFxcbiAgZGVzYzogXFxcXFxcXCLlh7rplJnkvY3nva46XFxcXFxcXCIgKyAodHlwZW9mKHBvcykgPT0gJ3VuZGVmaW5lZCcgPyAn5pyq55+lJyA6IHBvcyksXFxcXG4gIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMScsXFxcXG4gIHVybDogJ2hpa2VyOi8vZW1wdHknLFxcXFxufSk7XFxcXG5cXFxcbmQucHVzaCh7XFxcXG4gICAgdGl0bGU6ICfngrnmiJHov5vlhaXorr7nva7pobUnLFxcXFxuICAgIGNvbF90eXBlOiAndGV4dF8xJyxcXFxcbiAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL3NldHRpbmdQYWdlXFxcXFxcXCJcXFxcbn0pXFxcXG5cXFxcbmQucHVzaCh7XFxcXG4gIHRpdGxlOiAn6Iul5L+u5pS56K6+572u5LiN6LW35L2c55SoLOeCueaIkeWkjeWItumUmeivr+S/oeaBr+aPkOS6pOe7meW8gOWPkeiAhScsXFxcXG4gIGRlc2M6IGUudG9TdHJpbmcoKSxcXFxcbiAgY29sX3R5cGU6ICd0ZXh0XzEnLFxcXFxuICB1cmw6ICdjb3B5Oi8vJyArIGUudG9TdHJpbmcoKSxcXFxcbn0pO1xcXFxuXFxcXG5zZXRSZXN1bHQoZCk7XFxcXG5cXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLpobrkvazkuJPnlKjor6bmg4XpobVcXFwiLFxcXCJwYXRoXFxcIjpcXFwiU2RldGFpbFxcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmV2YWwoTVlfUlVMRS5wcmVSdWxlKTtcXFxcbmV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9wYWdlL21haW5cXFxcXFxcIikpLnJ1bGUpO1xcXFxubGV0IHR5cGUgPSBnZXRQYXJhbSgndHlwZScsICcnKSxcXFxcbiAgICBpZCA9IGdldFBhcmFtKCdpZCcsICcnKTtcXFxcbmRldGFpbHNWaWV3KHR5cGUsIGlkKTtcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLkuLvku6PnoIFcXFwiLFxcXCJwYXRoXFxcIjpcXFwibWFpblxcXCIsXFxcInJ1bGVcXFwiOlxcXCJsZXQgdmVyc2lvbiA9IDIwMjQwMjE3MDAwMTtcXFxcclxcXFxuZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS91dGlscycpKS5ydWxlKTtcXFxcclxcXFxuXFxcXHJcXFxcbmxldCBwYXJzZVZpZGVvVXJsTGF6eSA9ICQudG9TdHJpbmcoKCkgPT4ge1xcXFxyXFxcXG4gICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcXFxyXFxcXG4gICAgbGV0IGFuYWx5c2lzQ29uZmlncyA9IGdldENvbmZpZygnYW5hbHlzaXNDb25maWdzJyk7XFxcXHJcXFxcbiAgICBsZXQgYW5hbHlzaXNDb25maWcgPSBhbmFseXNpc0NvbmZpZ3NbYW5hbHlzaXNDb25maWdzLnVzZV0uY29uZmlnO1xcXFxyXFxcXG4gICAgbGV0IHJlc3VsdCA9IFxcXFxcXFwidG9hc3Q6Ly/op6PmnpDlpLHotKVcXFxcXFxcIjtcXFxcclxcXFxuICAgIHRyeSB7XFxcXHJcXFxcbiAgICAgICAgaWYgKGFuYWx5c2lzQ29uZmlnLnN0YXJ0c1dpdGgoXFxcXFxcXCIoXFxcXFxcXCIpKSB7XFxcXHJcXFxcbiAgICAgICAgICAgIGV2YWwoJ3Jlc3VsdCA9ICcgKyBhbmFseXNpc0NvbmZpZyk7XFxcXHJcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcclxcXFxuICAgICAgICAgICAgZXZhbCgncmVzdWx0ID0gJyArICcoKCkgPT4geycgKyBhbmFseXNpc0NvbmZpZyArICd9KSgpJyk7XFxcXHJcXFxcbiAgICAgICAgfVxcXFxyXFxcXG4gICAgfSBjYXRjaCAoZSkge31cXFxcclxcXFxuICAgIHJldHVybiByZXN1bHQ7XFxcXHJcXFxcbn0pXFxcXHJcXFxcblxcXFxyXFxcXG4vL+mmlumhtVxcXFxyXFxcXG5mdW5jdGlvbiBob21lKCkge1xcXFxyXFxcXG4gICAgaWYgKGdldEl0ZW0oXFxcXFxcXCJzdGFydFxcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiKSA9PSBcXFxcXFxcIlxcXFxcXFwiKSB7XFxcXHJcXFxcbiAgICAgICAgc2V0SXRlbShcXFxcXFxcInN0YXJ0XFxcXFxcXCIsIFxcXFxcXFwiMVxcXFxcXFwiKTtcXFxcclxcXFxuICAgICAgICBzZXRJdGVtKCd1cGRhdGUnLCBTdHJpbmcodmVyc2lvbikpO1xcXFxyXFxcXG4gICAgICAgIGNvbmZpcm0oe1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogJ+a4qemmqOaPkOekuicsXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbnRlbnQ6ICfmraTop4TliJnku4XpmZDlrabkuaDkuqTmtYHkvb/nlKhcXFxcXFxcXG7or7fkuo7lr7zlhaXlkI4yNOWwj+aXtuWGheWIoOmZpCFcXFxcXFxcXG5cXFxcXFxcXG7ku7vkvZXnu4Tnu4fmiJbkuKrkurrkuI3lvpfku6Xku7vkvZXmlrnlvI/mlrnms5VcXFxcXFxcXG7kvKDmkq3mraTop4TliJnnmoTmlbTkvZPmiJbpg6jliIYhIVxcXFxcXFxcblxcXFxcXFxcbuaEn+iwouWkp+S9rOS7rOaPkOS+m+eahOaKgOacr+aUr+aMgSEhIScsXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbmZpcm06ICcnLFxcXFxyXFxcXG4gICAgICAgICAgICBjYW5jZWw6ICcnXFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgbGV0IHVwZGF0ZUluZm8gPSBnZXRJdGVtKCd1cGRhdGUnLCAnJyk7XFxcXHJcXFxcbiAgICAgICAgaWYgKHVwZGF0ZUluZm8gPT0gJycgfHwgcGFyc2VJbnQodXBkYXRlSW5mbykgPCB2ZXJzaW9uKSB7XFxcXHJcXFxcbiAgICAgICAgICAgIHNldEl0ZW0oJ3VwZGF0ZScsIFN0cmluZyh2ZXJzaW9uKSk7XFxcXHJcXFxcbiAgICAgICAgICAgIGNvbmZpcm0oe1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6ICfmnKzmrKHmm7TmlrDlhoXlrrknLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgY29udGVudDogJ+mZjeS9jumFjee9ruaWh+S7tuWHuumUmeamgueOhycsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICBjb25maXJtOiAnJyxcXFxcclxcXFxuICAgICAgICAgICAgICAgIGNhbmNlbDogJydcXFxcclxcXFxuICAgICAgICAgICAgfSlcXFxcclxcXFxuICAgICAgICB9XFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBhZGRMaXN0ZW5lcihcXFxcXFxcIm9uQ2xvc2VcXFxcXFxcIiwgJC50b1N0cmluZygoKSA9PiB7XFxcXHJcXFxcbiAgICAgICAgY2xlYXJNeVZhcihcXFxcXFxcInFkYl9jb25maWdcXFxcXFxcIik7XFxcXHJcXFxcbiAgICB9KSlcXFxcclxcXFxuICAgIGxldCBob21lUGFnZUNvbmZpZ3MgPSBnZXRDb25maWcoJ2hvbWVQYWdlQ29uZmlncycpO1xcXFxyXFxcXG4gICAgbGV0IGhvbWVQYWdlQ29uZmlnID0gaG9tZVBhZ2VDb25maWdzW2hvbWVQYWdlQ29uZmlncy51c2VdLmNvbmZpZztcXFxcclxcXFxuICAgIGlmIChob21lUGFnZUNvbmZpZy5zdGFydHNXaXRoKFxcXFxcXFwiKFxcXFxcXFwiKSkge1xcXFxyXFxcXG4gICAgICAgIGV2YWwoJ2QgPSAnICsgaG9tZVBhZ2VDb25maWcpXFxcXHJcXFxcbiAgICB9IGVsc2Uge1xcXFxyXFxcXG4gICAgICAgIGV2YWwoJ2QgPSAnICsgJygoKSA9PiB7JyArIGhvbWVQYWdlQ29uZmlnICsgJ30pKCknKVxcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG4gICAgc2V0UmVzdWx0KGQpO1xcXFxyXFxcXG59XFxcXHJcXFxcblxcXFxyXFxcXG4vL+a1t+mYlOaQnOe0olxcXFxyXFxcXG5mdW5jdGlvbiBzZWFyY2goKSB7XFxcXHJcXFxcbiAgICBsZXQgd2QgPSBNWV9VUkwuc3BsaXQoXFxcXFxcXCIvIy9cXFxcXFxcIilbMV07XFxcXHJcXFxcbiAgICBsZXQgcGFnZSA9IE1ZX1BBR0U7XFxcXHJcXFxcbiAgICBsZXQgcyA9IGdldERvdWJhblJlcygnaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9zZWFyY2gvc3ViamVjdHM/dHlwZT1tb3ZpZSZxPScgKyB3ZCArIChwYWdlID8gJyZzdGFydD0nICsgKHBhZ2UgLSAxKSAqIDIwIDogJyZzdGFydD0wJykgKyAnJmNvdW50PTIwJyk7XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgbGV0IGxpc3QgPSBzLml0ZW1zO1xcXFxyXFxcXG4gICAgbGV0IGRldGFpbHNWaWV3Q29uZmlncyA9IGdldENvbmZpZygnZGV0YWlsc1ZpZXdDb25maWdzJyk7XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgbGV0IGl0ZW1zID0gW107XFxcXHJcXFxcbiAgICBsaXN0LmZvckVhY2goZGF0YSA9PiB7XFxcXHJcXFxcbiAgICAgICAgaWYgKGRhdGEudGFyZ2V0X3R5cGUgPT0gJ2RvdWxpc3RfY2FyZHMnKSB7XFxcXHJcXFxcbiAgICAgICAgICAgIGRhdGEudGFyZ2V0LmRvdWxpc3RzLmZvckVhY2goZSA9PiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZS50aXRsZSxcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkvJHBhZ2V7ZnlwYWdlfSNub0hpc3RvcnkjJylcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgLnJ1bGUoKHR5cGUsIGlkKSA9PiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gXFxcXFxcXCJwbGF5bGlzdFxcXFxcXFwiKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG91TGlzdChpZCwgTVlfUEFHRSwgNTApO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09IFxcXFxcXFwiY29sbGVjdGlvblxcXFxcXFwiIHx8IHR5cGUgPT0gXFxcXFxcXCJjaGFydFxcXFxcXFwiKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdENvbGxlY3Rpb25MaXN0KE1ZX1BBR0UsIDUwLCBpZCk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGUudGFyZ2V0X3R5cGUsIGUuaWQpLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGltZzogZS5jb3Zlcl91cmwgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiICsgZS5jb3Zlcl91cmxcXFxcclxcXFxuICAgICAgICAgICAgICAgIH0pXFxcXHJcXFxcbiAgICAgICAgICAgIH0pXFxcXHJcXFxcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLnRhcmdldF90eXBlID09ICdjaGFydCcpIHtcXFxcclxcXFxuICAgICAgICAgICAgbGV0IGUgPSBkYXRhLnRhcmdldDtcXFxcclxcXFxuICAgICAgICAgICAgaXRlbXMucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogZS50aXRsZSxcXFxcclxcXFxuICAgICAgICAgICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eS8kcGFnZXtmeXBhZ2V9I25vSGlzdG9yeSMnKVxcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIC5ydWxlKCh0eXBlLCBpZCkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcXFxcXFxcInBsYXlsaXN0XFxcXFxcXCIpIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvdUxpc3QoaWQsIE1ZX1BBR0UsIDUwKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09IFxcXFxcXFwiY29sbGVjdGlvblxcXFxcXFwiIHx8IHR5cGUgPT0gXFxcXFxcXCJjaGFydFxcXFxcXFwiKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0Q29sbGVjdGlvbkxpc3QoTVlfUEFHRSwgNTAsIGlkKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIH0sIGRhdGEudGFyZ2V0X3R5cGUsIGUuaWQpLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgaW1nOiBlLmNvdmVyX3VybCArIFxcXFxcXFwiQFJlZmVyZXI9XFxcXFxcXCIgKyBlLmNvdmVyX3VybFxcXFxyXFxcXG4gICAgICAgICAgICB9KVxcXFxyXFxcXG4gICAgICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgICAgIGxldCB0eXBlID0gZGF0YS50YXJnZXRfdHlwZSxcXFxcclxcXFxuICAgICAgICAgICAgICAgIGlkID0gZGF0YS50YXJnZXQuaWQsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0aXRsZSA9IGRhdGEudGFyZ2V0LnRpdGxlO1xcXFxyXFxcXG4gICAgICAgICAgICBsZXQgdXNlQ29uZmlnID0gZGV0YWlsc1ZpZXdDb25maWdzW2RldGFpbHNWaWV3Q29uZmlncy51c2VdLmNvbmZpZztcXFxcclxcXFxuICAgICAgICAgICAgbGV0IHVybFBhcmFtcyA9IHt9O1xcXFxyXFxcXG4gICAgICAgICAgICBpZiAodXNlQ29uZmlnLnN0YXJ0c1dpdGgoJ3snKSkge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgZXZhbCgndXJsUGFyYW1zID0gJyArIHVzZUNvbmZpZyk7XFxcXHJcXFxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB1cmxQYXJhbXMudXJsID0gJChcXFxcXFxcImhpa2VyOi8vZW1wdHkjbm9IaXN0b3J5IyNpbW1lcnNpdmVUaGVtZSNcXFxcXFxcIiArICc/dHlwZT0nICsgdHlwZSArICcmaWQ9JyArIGlkKVxcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIC5ydWxlKCh0eXBlLCBpZCwgdGl0bGUsIHVzZUNvbmZpZykgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcXFxcXFxcInBsYXlsaXN0XFxcXFxcXCIpIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvdUxpc3QoaWQsIE1ZX1BBR0UsIDUwKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2YWwodXNlQ29uZmlnKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIH0sIHR5cGUsIGlkLCB0aXRsZSwgdXNlQ29uZmlnKTtcXFxcclxcXFxuICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcXFxcclxcXFxuICAgICAgICAgICAgICAgIGltZzogZGF0YS50YXJnZXQuY292ZXJfdXJsICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIiArIGRhdGEudGFyZ2V0LmNvdmVyX3VybCxcXFxcclxcXFxuICAgICAgICAgICAgICAgIGRlc2M6IGRhdGEudHlwZV9uYW1lLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgY29udGVudDogZGF0YS50YXJnZXQuY2FyZF9zdWJ0aXRsZSxcXFxcclxcXFxuICAgICAgICAgICAgICAgIHVybDogdXJsUGFyYW1zLnVybCxcXFxcclxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB1cmxQYXJhbXMuZXh0cmFcXFxcclxcXFxuICAgICAgICAgICAgfSk7XFxcXHJcXFxcbiAgICAgICAgfVxcXFxyXFxcXG5cXFxcclxcXFxuICAgIH0pO1xcXFxyXFxcXG5cXFxcclxcXFxuICAgIHNldFNlYXJjaFJlc3VsdCh7XFxcXHJcXFxcbiAgICAgICAgZGF0YTogaXRlbXNcXFxcclxcXFxuICAgIH0pO1xcXFxyXFxcXG59XFxcXHJcXFxcblxcXFxyXFxcXG4vL+S6jOe6p+mhtemdolxcXFxyXFxcXG5mdW5jdGlvbiBlcmppKCkge1xcXFxyXFxcXG4gICAgYWRkTGlzdGVuZXIoXFxcXFxcXCJvbkNsb3NlXFxcXFxcXCIsICQudG9TdHJpbmcoKCkgPT4ge1xcXFxyXFxcXG4gICAgICAgIGNsZWFyTXlWYXIoXFxcXFxcXCJmaW5kTGlzdFxcXFxcXFwiKTtcXFxcclxcXFxuICAgICAgICBjbGVhck15VmFyKFxcXFxcXFwiaG90TGlzdFxcXFxcXFwiKTtcXFxcclxcXFxuICAgICAgICBjbGVhck15VmFyKFxcXFxcXFwiY2xhc3NsaXN0XFxcXFxcXCIpO1xcXFxyXFxcXG4gICAgICAgIGNsZWFyTXlWYXIoXFxcXFxcXCJwbGF5bGlzdFxcXFxcXFwiKTtcXFxcclxcXFxuICAgICAgICBjbGVhck15VmFyKFxcXFxcXFwicmFua0xpc3RcXFxcXFxcIik7XFxcXHJcXFxcbiAgICAgICAgY2xlYXJNeVZhcihcXFxcXFxcInJhbmtpbmdcXFxcXFxcIik7XFxcXHJcXFxcbiAgICAgICAgY2xlYXJNeVZhcihcXFxcXFxcImNvbWluZ1xcXFxcXFwiKTtcXFxcclxcXFxuICAgICAgICBjbGVhck15VmFyKFxcXFxcXFwiYW5hbHlzaXNcXFxcXFxcIik7XFxcXHJcXFxcbiAgICB9KSlcXFxcclxcXFxuXFxcXHJcXFxcbiAgICBsZXQgY2hvaWNlID0gTVlfVVJMLnNwbGl0KCcvIy8nKVsxXS5zcGxpdCgnIycpWzBdO1xcXFxyXFxcXG4gICAgbGV0IGQgPSBbXTtcXFxcclxcXFxuICAgIHN3aXRjaCAoY2hvaWNlKSB7XFxcXHJcXFxcbiAgICAgICAgY2FzZSBcXFxcXFxcIuaOqOiNkFxcXFxcXFwiOlxcXFxyXFxcXG4gICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxcXHJcXFxcbiAgICAgICAgICAgIGQgPSBmaW5kTGlzdChNWV9QQUdFLCAxMCk7XFxcXHJcXFxcbiAgICAgICAgICAgIGJyZWFrO1xcXFxyXFxcXG4gICAgICAgIGNhc2UgXFxcXFxcXCLng63pl6hcXFxcXFxcIjpcXFxcclxcXFxuICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcXFxyXFxcXG4gICAgICAgICAgICBkID0gaG90TGlzdChNWV9QQUdFLCAxMCk7XFxcXHJcXFxcbiAgICAgICAgICAgIGJyZWFrO1xcXFxyXFxcXG4gICAgICAgIGNhc2UgXFxcXFxcXCLliIbnsbtcXFxcXFxcIjpcXFxcclxcXFxuICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcXFxyXFxcXG4gICAgICAgICAgICBkID0gY2xhc3NMaXN0KE1ZX1BBR0UsIDE1KTtcXFxcclxcXFxuICAgICAgICAgICAgYnJlYWs7XFxcXHJcXFxcbiAgICAgICAgY2FzZSBcXFxcXFxcIueJh+WNlVxcXFxcXFwiOlxcXFxyXFxcXG4gICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxcXHJcXFxcbiAgICAgICAgICAgIGQgPSBwbGF5TGlzdChNWV9QQUdFLCAxMCk7XFxcXHJcXFxcbiAgICAgICAgICAgIGJyZWFrO1xcXFxyXFxcXG4gICAgICAgIGNhc2UgXFxcXFxcXCLmppzljZVcXFxcXFxcIjpcXFxcclxcXFxuICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcXFxyXFxcXG4gICAgICAgICAgICBkID0gcmFua0xpc3QoTVlfUEFHRSwgMTApO1xcXFxyXFxcXG4gICAgICAgICAgICBicmVhaztcXFxcclxcXFxuICAgICAgICBjYXNlIFxcXFxcXFwi5bCG5LiK5pigXFxcXFxcXCI6XFxcXHJcXFxcbiAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtcXFxcclxcXFxuICAgICAgICAgICAgZCA9IGNvbWluZ0xpc3QoTVlfUEFHRSwgMTApO1xcXFxyXFxcXG4gICAgICAgICAgICBicmVhaztcXFxcclxcXFxuICAgIH1cXFxcclxcXFxuICAgIHNldFJlc3VsdChkKTtcXFxcclxcXFxufVxcXFxyXFxcXG5cXFxcclxcXFxuLy/ojrflj5bosYbnk6PotYTmupAs6L+U5ZueanNvbuaVsOaNrlxcXFxyXFxcXG5mdW5jdGlvbiBnZXREb3ViYW5SZXModXJsKSB7XFxcXG4gICAgLy9sb2codXJsKVxcXFxyXFxcXG4gICAgdmFyIGNjID1udWxsO1xcXFxyXFxcXG4gICAgaWYoJC50eXBlKHVybCk9PSdvYmplY3QnKXtcXFxcclxcXFxuICAgICAgICAgY2M9dXJsLmNjO1xcXFxyXFxcXG4gICAgICAgICB1cmwgPSB1cmwudXJsO1xcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG4gICAgdmFyIF91cmwgPSB1cmw7XFxcXHJcXFxcbiAgICBpZiAodXJsLmluZGV4T2YoJ2FwaWtleScpID09PSAtMSkge1xcXFxyXFxcXG4gICAgICAgIF91cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIFxcXFxcXFwiYXBpa2V5PTBkYWQ1NTFlYzBmODRlZDAyOTA3ZmY1YzQyZThlYzcwXFxcXFxcXCJcXFxcclxcXFxuICAgIH1cXFxcclxcXFxuICAgIGxldCBfdHMgPSBwYXJzZUludChEYXRlLm5vdygpLzEwMDApLnRvU3RyaW5nKCk7XFxcXHJcXFxcbiAgICBsZXQgbSA9ICdHRVQmJyArIGVuY29kZVVSSUNvbXBvbmVudCh1cmwuc3BsaXQoJ2RvdWJhbi5jb20nKVsxXS5zcGxpdCgnPycpWzBdKSArICcmJyArIF90cztcXFxcclxcXFxuICAgIGV2YWwoZ2V0Q3J5cHRvSlMoKSk7XFxcXHJcXFxcbiAgICBsZXQgX3NpZyA9IGhleFRvQmFzZTY0KENyeXB0b0pTLkhtYWNTSEExKG0sJ2JmN2RkZGM3YzljZmU2ZjcnKS50b1N0cmluZygpKTtcXFxcclxcXFxuICAgIF91cmwgKz0gJyZfc2lnPScgKyBfc2lnICsnJl90cz0nICsgX3RzO1xcXFxyXFxcXG4gICAgLy9sZXQgY29va2llQ2FjaGUgPSAnaGlrZXI6Ly9maWxlcy9jYWNoZS9kb3ViYW5jb29raWUudHh0JztcXFxcclxcXFxuICAgIGxldCBzID0gZmV0Y2goX3VybCwge1xcXFxyXFxcXG4gICAgICAgIGhlYWRlcnM6IHtcXFxcclxcXFxuICAgICAgICAgICAgLy8nQ29va2llJzogZmV0Y2goY29va2llQ2FjaGUpLFxcXFxyXFxcXG4gICAgICAgICAgICBcXFxcXFxcIlVzZXItQWdlbnRcXFxcXFxcIjogXFxcXFxcXCJSZXh4YXItQ29yZS8wLjEuMyBhcGktY2xpZW50LzEgY29tLmRvdWJhbi5mcm9kby83LjkuMC5iZXRhMigyMTUpIEFuZHJvaWQvMjUgcHJvZHVjdC9UQVMtQUwwMCB2ZW5kb3IvSFVBV0VJIG1vZGVsL1RBUy1BTDAwICByb20vYW5kcm9pZCAgbmV0d29yay93aWZpICBwbGF0Zm9ybS9tb2JpbGUgY29tLmRvdWJhbi5mcm9kby83LjkuMC5iZXRhMigyMTUpIFJleHhhci8xLjIuMTUxICBwbGF0Zm9ybS9tb2JpbGUgMS4yLjE1MVxcXFxcXFwiXFxcXHJcXFxcbiAgICAgICAgfSxcXFxcclxcXFxuICAgICAgICBtZXRob2Q6ICdHRVQnXFxcXHJcXFxcbiAgICAgICAgLy9ib2R5OiAnaG9zdD1mcm9kby5kb3ViYW4uY29tJ1xcXFxyXFxcXG4gICAgfSk7XFxcXHJcXFxcbiAgICBsZXQganNvbiA9IEpTT04ucGFyc2Uocyk7XFxcXHJcXFxcbiAgICBpZihqc29uLmxvY2FsaXplZF9tZXNzYWdlKXtcXFxcclxcXFxuICAgICAgICBjYz0gY2M9PW51bGwgPyAxIDogY2MrMTtcXFxcclxcXFxuICAgICAgICBsb2coJ+mHjeivleasoeaVsDonK2NjKTtcXFxcclxcXFxuICAgICAgICBpZihjYz41KXt0aHJvdyBuZXcgRXJyb3IoJ+i2heaXticpfVxcXFxyXFxcXG4gICAgICAgIGphdmEubGFuZy5UaHJlYWQuc2xlZXAoMTAwMCk7XFxcXHJcXFxcbiAgICAgICAgcmV0dXJuIGdldERvdWJhblJlcyh7dXJsOnVybCxjYzpjY30pO1xcXFxyXFxcXG4gICAgfWVsc2V7XFxcXHJcXFxcbiAgICAgICAgcmV0dXJuIGpzb247XFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbn1cXFxcclxcXFxuXFxcXHJcXFxcbi8v5qC55o2u6K+E5YiG5L+h5oGv6I635Y+W6K+E5YiG5pif5pif5qC35byPXFxcXHJcXFxcbmZ1bmN0aW9uIGNvbXB1dGVSYXRpbmcoZSwgdCkge1xcXFxyXFxcXG4gICAgbGV0IGkgPSBcXFxcXFxcIlxcXFxcXFwiO1xcXFxyXFxcXG4gICAgZm9yIChsZXQgciA9IDA7IHIgPCA1OyByKyspIHIgPCBNYXRoLnJvdW5kKHQgLyAoZSAvIDUpKSA/IGkgKz0gXFxcXFxcXCLimIVcXFxcXFxcIiA6IGkgKz0gXFxcXFxcXCLimIZcXFxcXFxcIjtcXFxcclxcXFxuICAgIHJldHVybiBpO1xcXFxyXFxcXG59XFxcXHJcXFxcblxcXFxyXFxcXG4vL+ivhOWIhuivpuaDhemhtemdolxcXFxyXFxcXG5mdW5jdGlvbiByYXRpbmcodHlwZSwgaWQsIHJhdGluZ0NvdW50KSB7XFxcXHJcXFxcbiAgICBzZXRQYWdlVGl0bGUoJ+W9seeJh+S/oeaBrycpO1xcXFxyXFxcXG4gICAgLy/or4TliIbnu5/orqFcXFxcclxcXFxuICAgIGxldCBpID0gZ2V0RG91YmFuUmVzKFxcXFxcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9cXFxcXFxcIiArIHR5cGUgKyBcXFxcXFxcIi9cXFxcXFxcIiArIGlkICsgXFxcXFxcXCIvcmF0aW5nXFxcXFxcXCIpO1xcXFxyXFxcXG5cXFxcclxcXFxuICAgIGxldCByID0gXFxcXFxcXCI8aDI+6K+E5YiG57uf6K6hPC9oMj5cXFxcXFxcIjtcXFxcclxcXFxuXFxcXHJcXFxcbiAgICByICs9ICc8c21hbGw+PGZvbnQgY29sb3I9XFxcXFxcXCJncmV5XFxcXFxcXCI+JyArIHJhdGluZ0NvdW50ICsgJ+S6uuivhOWIhicgKyAnPC9mb250Pjwvc21hbGw+PGJyLz4nO1xcXFxyXFxcXG5cXFxcclxcXFxuICAgIGxldCBzdGFyQ29sb3IgPSBnZXRDb25maWcoJ3N0YXJDb2xvcicpO1xcXFxyXFxcXG4gICAgaWYgKGkuc3RhdHMubGVuZ3RoID09IDApIHtcXFxcclxcXFxuICAgICAgICBpLnN0YXRzID0gWzAsIDAsIDAsIDAsIDBdO1xcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG4gICAgaS5zdGF0cy5yZXZlcnNlKCkuZm9yRWFjaCgoKHZhbHVlLCBpbmRleCkgPT4ge1xcXFxyXFxcXG4gICAgICAgIHIgKz0gJzxmb250IGNvbG9yPScgKyBzdGFyQ29sb3IgKyAnPicgKyBbXFxcXFxcXCLimIXimIXimIXimIXimIVcXFxcXFxcIiwgXFxcXFxcXCLimIXimIXimIXimIXimIZcXFxcXFxcIiwgXFxcXFxcXCLimIXimIXimIXimIbimIZcXFxcXFxcIiwgXFxcXFxcXCLimIXimIXimIbimIbimIZcXFxcXFxcIiwgXFxcXFxcXCLimIXimIbimIbimIbimIZcXFxcXFxcIl1baW5kZXhdICsgXFxcXFxcXCI8L2ZvbnQ+Jm5ic3A7XFxcXFxcXCI7XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgICAgIHIgKz0gZnVuY3Rpb24oZSkge1xcXFxyXFxcXG4gICAgICAgICAgICBsZXQgdDEgPSAnJztcXFxcclxcXFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlOyBpKyspIHQxICs9IFxcXFxcXFwi4paHXFxcXFxcXCI7XFxcXHJcXFxcbiAgICAgICAgICAgIGxldCB0MiA9ICcnO1xcXFxyXFxcXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwIC0gZTsgaSsrKSB0MiArPSBcXFxcXFxcIuKWh1xcXFxcXFwiO1xcXFxyXFxcXG4gICAgICAgICAgICByZXR1cm4gdDEuZm9udGNvbG9yKCcjZmZhYzJkJykgKyB0Mi5mb250Y29sb3IoJyNlNWUxZTQnKTtcXFxcclxcXFxuICAgICAgICB9KCgxMCAqIHZhbHVlKS50b0ZpeGVkKDApKTtcXFxcclxcXFxuXFxcXHJcXFxcbiAgICAgICAgciArPSAnJm5ic3A7PHNtYWxsPjxmb250IGNvbG9yPVxcXFxcXFwiZ3JleVxcXFxcXFwiPicgKyAoMTAwICogdmFsdWUpXFxcXHJcXFxcbiAgICAgICAgICAgIC50b0ZpeGVkKDEpICsgXFxcXFxcXCIlPC9mb250Pjwvc21hbGw+PGJyLz5cXFxcXFxcIjtcXFxcclxcXFxuICAgIH0pKTtcXFxcclxcXFxuXFxcXHJcXFxcbiAgICByICs9IFtpLmRvbmVfY291bnQgPyBpLmRvbmVfY291bnQgKyBcXFxcXFxcIuS6uueci+i/h1xcXFxcXFwiIDogXFxcXFxcXCJcXFxcXFxcIiwgaS5kb2luZ19jb3VudCA/IGkuZG9pbmdfY291bnQgKyBcXFxcXFxcIuS6uuWcqOeci1xcXFxcXFwiIDogXFxcXFxcXCJcXFxcXFxcIiwgaS53aXNoX2NvdW50ID8gaS53aXNoX2NvdW50ICsgXFxcXFxcXCLkurrmg7PnnItcXFxcXFxcIiA6IFxcXFxcXFwiXFxcXFxcXCJdLmpvaW4oXFxcXFxcXCImbmJzcDsmbmJzcDtcXFxcXFxcIilcXFxcclxcXFxuICAgICAgICAuc21hbGwoKVxcXFxyXFxcXG4gICAgICAgIC5mb250Y29sb3IoJ2dyZXknKTtcXFxcclxcXFxuICAgIC8v5b2x54mH5L+h5oGvXFxcXHJcXFxcbiAgICBpID0gZ2V0RG91YmFuUmVzKFxcXFxcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9cXFxcXFxcIiArIHR5cGUgKyBcXFxcXFxcIi9cXFxcXFxcIiArIGlkICsgXFxcXFxcXCIvZGVzY1xcXFxcXFwiKTtcXFxcclxcXFxuICAgIGxldCBsID0gaS5odG1sLnJlcGxhY2UoL1tcXFxcXFxcXG5cXFxcXFxcXHRcXFxcXFxcXHJdL2csIFxcXFxcXFwiXFxcXFxcXCIpXFxcXHJcXFxcbiAgICAgICAgLnJlcGxhY2UoLzx0ZFxcXFxcXFxccypbXj5dKj4oLio/KTxcXFxcXFxcXC90ZD4vZywgXFxcXFxcXCI8c3Bhbj4kMTwvc3Bhbj5cXFxcXFxcIilcXFxcclxcXFxuICAgICAgICAucmVwbGFjZSgvPHRyXFxcXFxcXFxzKltePl0qPiguKj8pPFxcXFxcXFxcL3RyPi9nLCBcXFxcXFxcIjx0ZW5nPiQxPC90ZW5nPjxici8+XFxcXFxcXCIpO1xcXFxyXFxcXG4gICAgcGFyc2VEb21Gb3JBcnJheShsLCBcXFxcXFxcInNlY3Rpb24mJnRlbmdcXFxcXFxcIikuZm9yRWFjaCgoZSA9PiB7XFxcXHJcXFxcbiAgICAgICAgbGV0IHQgPSBwYXJzZURvbUZvckFycmF5KGUsIFxcXFxcXFwic3BhblxcXFxcXFwiKTtcXFxcclxcXFxuICAgICAgICBsID0gbC5yZXBsYWNlKHRbMF0sICc8Zm9udCBjb2xvcj1cXFxcXFxcImdyZXlcXFxcXFxcIj4nICsgdFswXS5yZXBsYWNlKC88c3BhblxcXFxcXFxccypbXj5dKj4oLio/KTxcXFxcXFxcXC9zcGFuPi9nLCBcXFxcXFxcIiQxXFxcXFxcXCIpICsgXFxcXFxcXCLvvJo8L2ZvbnQ+XFxcXFxcXCIpXFxcXHJcXFxcbiAgICB9KSk7XFxcXHJcXFxcbiAgICByICs9IGw7XFxcXHJcXFxcbiAgICAvL+iOt+WlluiusOW9lVxcXFxyXFxcXG4gICAgbGV0IHBhZ2UgPSBNWV9QQUdFO1xcXFxyXFxcXG4gICAgbGV0IHMgPSBnZXREb3ViYW5SZXMoXFxcXFxcXCJodHRwczovL2Zyb2RvLmRvdWJhbi5jb20vYXBpL3YyL1xcXFxcXFwiICsgdHlwZSArIFxcXFxcXFwiL1xcXFxcXFwiICsgaWQgKyBcXFxcXFxcIi9hd2FyZHM/c3RhcnQ9XFxcXFxcXCIgKyAyMCAqIChwYWdlIC0gMSkgKyBcXFxcXFxcIiZjb3VudD0yMFxcXFxcXFwiKTtcXFxcclxcXFxuICAgIHIgKz0gXFxcXFxcXCI8aDI+6I635aWW6K6w5b2VXFxcXFxcXCIgKyAnPHNtYWxsPjxmb250IGNvbG9yPVxcXFxcXFwiZ3JleVxcXFxcXFwiPicgKyAocy50b3RhbCAhPSAwID8gJyjlhbEnICsgcy50b3RhbCArICfpobkpJyA6ICco5pqC5pegKScpICsgJzwvZm9udD48L3NtYWxsPicgKyBcXFxcXFxcIjwvaDI+XFxcXFxcXCI7XFxcXHJcXFxcbiAgICAvL3IgKz0gJzxmb250IGNvbG9yPVxcXFxcXFwiZ3JleVxcXFxcXFwiPicgKyAocy50b3RhbCAhPSAwID8gJ+WFsScgKyBzLnRvdGFsICsgJ+mhuScgOiAn5pqC5pegJykgKyAnPC9mb250Pjxici8+JztcXFxcclxcXFxuICAgIGxldCByMiA9ICcnO1xcXFxyXFxcXG4gICAgcy5hd2FyZHMuZm9yRWFjaChlID0+IHtcXFxcclxcXFxuICAgICAgICByMiArPSAoZS5jZXJlbW9ueS50aXRsZSArICcoJyArIGUuY2VyZW1vbnkueWVhciArICcpJykuYmlnKCkuYm9sZCgpICsgJzxzbWFsbD4oPGEgaHJlZj1cXFxcXFxcImhpa2VyOi8vZW1wdHkjbm9IaXN0b3J5I0BydWxlPWpzOmV2YWwoSlNPTi5wYXJzZShmZXRjaChgaGlrZXI6Ly9wYWdlL21haW5gKSkucnVsZSk7YXdhcmRWaWV3KGAnICsgZS5jZXJlbW9ueS5pZCArICdgLGAnICsgZS5jZXJlbW9ueS50aXRsZSArICdgKTtcXFxcXFxcIj7mn6XnnIvor6bmg4U8L2E+KTwvc21hbGw+JyArICc8YnIvPic7XFxcXHJcXFxcbiAgICAgICAgZS5jYXRlZ29yaWVzLmZvckVhY2goaXRlbSA9PiB7XFxcXHJcXFxcbiAgICAgICAgICAgIHIyICs9IChpdGVtLmNhdGVnb3J5LnRpdGxlICsgKGl0ZW0uaXNfd29uID8gJycgOiAnKOaPkOWQjSknKSArICcmbmJzcDsnKS5mb250Y29sb3IoXFxcXFxcXCJncmV5XFxcXFxcXCIpO1xcXFxyXFxcXG4gICAgICAgICAgICByMiArPSBpdGVtLmNlbGVicml0aWVzLm1hcChjZWxlYnJpdHkgPT4gY2VsZWJyaXR5Lm5hbWUpLmpvaW4oJyZuYnNwOy8mbmJzcDsnKTtcXFxcclxcXFxuICAgICAgICAgICAgcjIgKz0gJzxici8+JztcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgICAgIHIyICs9ICc8YnIvPic7XFxcXHJcXFxcbiAgICB9KVxcXFxyXFxcXG5cXFxcclxcXFxuICAgIGlmIChwYWdlID09IDEpIHtcXFxcclxcXFxuICAgICAgICBzZXRIb21lUmVzdWx0KHtcXFxcclxcXFxuICAgICAgICAgICAgZGF0YTogW3tcXFxcclxcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiByICsgcjIsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJyaWNoX3RleHRcXFxcXFxcIlxcXFxyXFxcXG4gICAgICAgICAgICB9XVxcXFxyXFxcXG4gICAgICAgIH0pXFxcXHJcXFxcbiAgICB9IGVsc2UgaWYocy5hd2FyZHMubGVuZ3RoID09IDApe1xcXFxyXFxcXG4gICAgICAgIHNldFJlc3VsdChbXSk7XFxcXHJcXFxcbiAgICB9IGVsc2V7XFxcXHJcXFxcbiAgICAgICAgc2V0SG9tZVJlc3VsdCh7XFxcXHJcXFxcbiAgICAgICAgICAgIGRhdGE6IFt7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogcjIsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJyaWNoX3RleHRcXFxcXFxcIlxcXFxyXFxcXG4gICAgICAgICAgICB9XVxcXFxyXFxcXG4gICAgICAgIH0pXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbn1cXFxcclxcXFxuXFxcXHJcXFxcbi8v5aWW6aG56K+m5oOF6aG16Z2iXFxcXHJcXFxcbmZ1bmN0aW9uIGF3YXJkVmlldyhpZCwgbmFtZSkge1xcXFxyXFxcXG4gICAgc2V0UGFnZVRpdGxlKG5hbWUpO1xcXFxyXFxcXG4gICAgbGV0IHMgPSBnZXREb3ViYW5SZXMoXFxcXFxcXCJodHRwczovL2Zyb2RvLmRvdWJhbi5jb20vYXBpL3YyL2NlcmVtb255L1xcXFxcXFwiICsgaWQpO1xcXFxyXFxcXG4gICAgbGV0IGEgPSBbXTtcXFxcclxcXFxuICAgIGEucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ0nICsgKHMudGl0bGUgKyAnKCcgKyBzLnllYXIgKyAnKScpLmJpZygpLmJvbGQoKSxcXFxcclxcXFxuICAgICAgICBjb2xfdHlwZTogJ3RleHRfMScsXFxcXHJcXFxcbiAgICAgICAgZXh0cmE6IHtcXFxcclxcXFxuICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlXFxcXHJcXFxcbiAgICAgICAgfVxcXFxyXFxcXG4gICAgfSlcXFxcclxcXFxuICAgIHMucGxheWxpc3RzLmZvckVhY2goZSA9PiB7XFxcXHJcXFxcbiAgICAgICAgYS5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGU6IGUudGl0bGUsXFxcXHJcXFxcbiAgICAgICAgICAgIGRlc2M6ICflhbEnICsgZS5pdGVtc19jb3VudCArICfpg6gnLFxcXFxyXFxcXG4gICAgICAgICAgICBpbWc6IGUuY292ZXJfdXJsICsgJ0BSZWZlcmVyPScgKyBlLmNvdmVyX3VybCxcXFxcclxcXFxuICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5I25vSGlzdG9yeSMnKS5ydWxlKChpZCkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgZG91TGlzdChpZCk7XFxcXHJcXFxcbiAgICAgICAgICAgIH0sIGUuaWQpXFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuICAgIH0pXFxcXHJcXFxcblxcXFxyXFxcXG4gICAgbGV0IHIgPSAnJztcXFxcclxcXFxuICAgIHMucHJpemVzLmZvckVhY2goZSA9PiB7XFxcXHJcXFxcbiAgICAgICAgciArPSAnPGg0PuiOt+WlluWQjeWNlSgnICsgZS50aXRsZSArICcpPC9oND4nO1xcXFxyXFxcXG4gICAgICAgIGUuY2F0ZWdvcmllcy5mb3JFYWNoKHQgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICByICs9ICh0LnRpdGxlICsgJyZuYnNwOyZuYnNwOyZuYnNwOyZuYnNwOycpLmZvbnRjb2xvcihcXFxcXFxcImdyZXlcXFxcXFxcIikuYm9sZCgpO1xcXFxyXFxcXG4gICAgICAgICAgICByICs9IHQucmVzdWx0cy5tYXAoaXRlbSA9PiAhIWl0ZW0uaW5mbyA/IGl0ZW0uaW5mbyArICgnJm5ic3A7LSZuYnNwOycgKyBpdGVtLnRpdGxlICsgJyZuYnNwOyZuYnNwOycpLmZvbnRjb2xvcihcXFxcXFxcImdyZXlcXFxcXFxcIikgOiBpdGVtLnRpdGxlKS5qb2luKCcmbmJzcDsvJm5ic3A7JykuYm9sZCgpO1xcXFxyXFxcXG4gICAgICAgICAgICByICs9ICc8YnIvPic7XFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuICAgIH0pXFxcXHJcXFxcbiAgICBhLnB1c2goe1xcXFxyXFxcXG4gICAgICAgIHRpdGxlOiByLFxcXFxyXFxcXG4gICAgICAgIGNvbF90eXBlOiAncmljaF90ZXh0J1xcXFxyXFxcXG4gICAgfSlcXFxcclxcXFxuXFxcXHJcXFxcbiAgICBsZXQgaSA9IFtdO1xcXFxyXFxcXG4gICAgcy5jZXJlbW9uaWVzLmZvckVhY2goZSA9PiB7XFxcXHJcXFxcbiAgICAgICAgaS5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGU6IGUudGl0bGUsXFxcXHJcXFxcbiAgICAgICAgICAgIGRlc2M6IGUueWVhciArICflubQnLFxcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzMnLFxcXFxyXFxcXG4gICAgICAgICAgICBpbWc6IGUucGljLm5vcm1hbCArICdAUmVmZXJlcj0nICsgZS5waWMubm9ybWFsLFxcXFxyXFxcXG4gICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkjbm9IaXN0b3J5IycpLnJ1bGUoKGlkLCBuYW1lKSA9PiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBhd2FyZFZpZXcoaWQsIG5hbWUpO1xcXFxyXFxcXG4gICAgICAgICAgICB9LCBlLmlkLCBlLnRpdGxlKVxcXFxyXFxcXG4gICAgICAgIH0pXFxcXHJcXFxcbiAgICB9KVxcXFxyXFxcXG4gICAgaWYgKGkubGVuZ3RoID4gMCkge1xcXFxyXFxcXG4gICAgICAgIGkudW5zaGlmdCh7XFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlOiAn4oCc4oCc4oCd4oCdJyArICfljoblsYrlm57pob4nLmJpZygpLmJvbGQoKSxcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0XzEnLFxcXFxyXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlXFxcXHJcXFxcbiAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG5cXFxcclxcXFxuICAgIHNldFJlc3VsdChhLmNvbmNhdChpKSk7XFxcXHJcXFxcbn1cXFxcclxcXFxuXFxcXHJcXFxcbi8v5Ymn54Wn6aG16Z2iXFxcXHJcXFxcbmZ1bmN0aW9uIHN0aWxsc0xpc3QodHlwZSwgaWQpIHtcXFxcclxcXFxuICAgIGFkZExpc3RlbmVyKCdvbkNsb3NlJywgJ2NsZWFyTXlWYXIoXFxcXFxcXCJwaG90b1xcXFxcXFwiKScpO1xcXFxyXFxcXG4gICAgbGV0IHBhZ2UgPSBNWV9QQUdFO1xcXFxyXFxcXG4gICAgbGV0IGl0ZW1zID0ge1xcXFxyXFxcXG4gICAgICAgIOWJp+eFpzogJ3Bob3RvcycsXFxcXHJcXFxcbiAgICAgICAg5rW35oqlOiAnY292ZXJzJ1xcXFxyXFxcXG4gICAgfTtcXFxcclxcXFxuICAgIGxldCBhID0gW107XFxcXHJcXFxcbiAgICBsZXQgdGVtcCA9IGdldE15VmFyKCdwaG90bycsICdwaG90b3MnKTtcXFxcclxcXFxuICAgIGxldCBjb2xvciA9IGdldENvbmZpZygnY2hvb3NlQ29sb3InKTtcXFxcclxcXFxuICAgIGZvciAobGV0IGkgaW4gaXRlbXMpIHtcXFxcclxcXFxuICAgICAgICBhLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogdGVtcCA9PSBpdGVtc1tpXSA/ICfigJzigJzigJ3igJ0nICsgaS5mb250Y29sb3IoY29sb3IpIDogaSxcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXFxcclxcXFxuICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5JykubGF6eVJ1bGUoKHQpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHB1dE15VmFyKCdwaG90bycsIHQpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSc7XFxcXHJcXFxcbiAgICAgICAgICAgIH0sIGl0ZW1zW2ldKVxcXFxyXFxcXG4gICAgICAgIH0pXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgbGV0IHIgPSBnZXREb3ViYW5SZXMoXFxcXFxcXCJodHRwczovL2Zyb2RvLmRvdWJhbi5jb20vYXBpL3YyL1xcXFxcXFwiICsgdHlwZSArIFxcXFxcXFwiL1xcXFxcXFwiICsgaWQgKyBcXFxcXFxcIi9cXFxcXFxcIiArIHRlbXAgKyBcXFxcXFxcIj9zdGFydD1cXFxcXFxcIiArIDMwICogKHBhZ2UgLSAxKSArIFxcXFxcXFwiJmNvdW50PTMwXFxcXFxcXCIpO1xcXFxyXFxcXG4gICAgbGV0IGwgPSByLnBob3Rvcy5tYXAoKGUgPT4gKHtcXFxcclxcXFxuICAgICAgICB0aXRsZTogZS5jcmVhdGVfdGltZSxcXFxcclxcXFxuICAgICAgICBpbWc6IGUuaW1hZ2Uuc21hbGwudXJsICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIiArIGUuaW1hZ2Uuc21hbGwudXJsLFxcXFxyXFxcXG4gICAgICAgIHVybDogZS5pbWFnZS5sYXJnZS51cmwgKyBcXFxcXFxcIj90eXBlPS5qcGdAUmVmZXJlcj1cXFxcXFxcIiArIGUuaW1hZ2UubGFyZ2UudXJsICsgXFxcXFxcXCI/dHlwZT0uanBnXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwicGljXzJcXFxcXFxcIlxcXFxyXFxcXG4gICAgfSkpKTtcXFxcclxcXFxuXFxcXHJcXFxcbiAgICBpZiAocGFnZSA9PSAxKSB7XFxcXHJcXFxcbiAgICAgICAgbC51bnNoaWZ0KHtcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiYmxhbmtfYmxvY2tcXFxcXFxcIlxcXFxyXFxcXG4gICAgICAgIH0pO1xcXFxyXFxcXG4gICAgICAgIGlmICh0ZW1wID09ICdwaG90b3MnKSB7XFxcXHJcXFxcbiAgICAgICAgICAgIGwudW5zaGlmdCh7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcXFxcXCI8YmlnPuWFsTxzdHJvbmc+IFxcXFxcXFwiICsgci50b3RhbCArICcgPC9zdHJvbmc+5byg5Ymn54WnPC9iaWc+PGJyLz48c21hbGw+PGZvbnQgY29sb3I9XFxcXFxcXCJncmV5XFxcXFxcXCI+5a6Y5pa55Ymn54Wn77yaJyArIHIubyArIFxcXFxcXFwi5bygJm5ic3A75oiq5Zu+77yaXFxcXFxcXCIgKyByLmMgKyBcXFxcXFxcIuW8oCZuYnNwO+W3peS9nOeFp++8mlxcXFxcXFwiICsgci53ICsgXFxcXFxcXCLlvKAmbmJzcDvmlrDpl7vlm77niYfvvJpcXFxcXFxcIiArIHIubiArIFxcXFxcXFwi5bygJm5ic3A757KJ5Lid5Zu+54mH77yaXFxcXFxcXCIgKyByLmYgKyBcXFxcXFxcIuW8oDwvZm9udD48L3NtYWxsPlxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCJcXFxcclxcXFxuICAgICAgICAgICAgfSlcXFxcclxcXFxuICAgICAgICB9IGVsc2Uge1xcXFxyXFxcXG4gICAgICAgICAgICBsLnVuc2hpZnQoe1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwiPGJpZz7lhbE8c3Ryb25nPiBcXFxcXFxcIiArIHIudG90YWwgKyBcXFxcXFxcIjwvc3Ryb25nPuW8oOa1t+aKpTwvYmlnPlxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCJcXFxcclxcXFxuICAgICAgICAgICAgfSlcXFxcclxcXFxuICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgbCA9IGEuY29uY2F0KGwpO1xcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG4gICAgc2V0SG9tZVJlc3VsdCh7XFxcXHJcXFxcbiAgICAgICAgZGF0YTogbFxcXFxyXFxcXG4gICAgfSlcXFxcclxcXFxufVxcXFxyXFxcXG5cXFxcclxcXFxuLy/mvJTogYzkurrlkZjpobXpnaJcXFxcclxcXFxuZnVuY3Rpb24gY3JlZGl0cyh0eXBlLCBpZCkge1xcXFxyXFxcXG4gICAgbGV0IGkgPSBnZXREb3ViYW5SZXMoXFxcXFxcXCJodHRwczovL2Zyb2RvLmRvdWJhbi5jb20vYXBpL3YyL1xcXFxcXFwiICsgdHlwZSArIFxcXFxcXFwiL1xcXFxcXFwiICsgaWQgKyBcXFxcXFxcIi9jcmVkaXRzXFxcXFxcXCIpO1xcXFxyXFxcXG4gICAgbGV0IHIgPSBbXTtcXFxcclxcXFxuICAgIGkuY3JlZGl0cy5mb3JFYWNoKChlID0+IHtcXFxcclxcXFxuICAgICAgICByLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogZS50aXRsZSxcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCJcXFxcclxcXFxuICAgICAgICB9KTtcXFxcclxcXFxuICAgICAgICBlLmNlbGVicml0aWVzLmZvckVhY2goKGUgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICByLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGUubmFtZSArIFxcXFxcXFwiXFxcXFxcXFxuXFxcXFxcXCIgKyBlLmxhdGluX25hbWUsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICBkZXNjOiBlLmNoYXJhY3RlcixcXFxcclxcXFxuICAgICAgICAgICAgICAgIGltZzogZS5hdmF0YXIubm9ybWFsICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIiArIGUuYXZhdGFyLm5vcm1hbCxcXFxcclxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV92ZXJ0aWNhbF9waWMnLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5I25vSGlzdG9yeSMjaW1tZXJzaXZlVGhlbWUjJykucnVsZSgoZSkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBlbGVzc2FyVmlldyhlLnVyaS5zcGxpdChcXFxcXFxcInN1YmplY3RfaWQ9XFxcXFxcXCIpWzFdLCBlLmlkLCBlLm5hbWUpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgfSwgZSlcXFxcclxcXFxuICAgICAgICAgICAgfSlcXFxcclxcXFxuICAgICAgICB9KSlcXFxcclxcXFxuICAgIH0pKTtcXFxcclxcXFxuICAgIHNldEhvbWVSZXN1bHQoe1xcXFxyXFxcXG4gICAgICAgIGRhdGE6IHJcXFxcclxcXFxuICAgIH0pXFxcXHJcXFxcbn1cXFxcclxcXFxuXFxcXHJcXFxcbi8v55+t6K+E6aG16Z2iXFxcXHJcXFxcbmZ1bmN0aW9uIHNob3J0Q29tbWVudExpc3QodHlwZSwgaWQpIHtcXFxcclxcXFxuICAgIGFkZExpc3RlbmVyKCdvbkNsb3NlJywgXFxcXFxcXCJjbGVhck15VmFyKCdzaG9ydGNvbW1lbnQnKVxcXFxcXFwiKTtcXFxcclxcXFxuICAgIGxldCBpdGVtcyA9IHtcXFxcclxcXFxuICAgICAgICDng63pl6g6ICdob3QnLFxcXFxyXFxcXG4gICAgICAgIOacgOaWsDogJ2xhdGVzdCdcXFxcclxcXFxuICAgIH1cXFxcclxcXFxuICAgIGxldCB1ID0gZ2V0TXlWYXIoJ3Nob3J0Y29tbWVudCcsICdob3QnKTtcXFxcclxcXFxuICAgIGxldCBhID0gW107XFxcXHJcXFxcbiAgICBsZXQgY2hvb3NlQ29sb3IgPSBnZXRDb25maWcoJ2Nob29zZUNvbG9yJykgLy8gfHwgXFxcXFxcXCIjRkE3Mjk4XFxcXFxcXCI7XFxcXHJcXFxcbiAgICBmb3IgKGkgaW4gaXRlbXMpIHtcXFxcclxcXFxuICAgICAgICBhLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogdSA9PT0gaXRlbXNbaV0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjaG9vc2VDb2xvciArICc+JyArIGkgKyAnIDwvZm9udD48L2I+JyA6IGksXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxcXHJcXFxcbiAgICAgICAgICAgIHVybDogJCgnaGlrZXI6IC8vZW1wdHknKS5sYXp5UnVsZSgodCkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCJzaG9ydGNvbW1lbnRcXFxcXFxcIiwgdCk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcXFxyXFxcXG4gICAgICAgICAgICB9LCBpdGVtc1tpXSlcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG5cXFxcclxcXFxuICAgIGxldCBwYWdlID0gTVlfUEFHRTtcXFxcclxcXFxuICAgIGxldCByID0gZ2V0RG91YmFuUmVzKFxcXFxcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9cXFxcXFxcIiArIHR5cGUgKyBcXFxcXFxcIi9cXFxcXFxcIiArIGlkICsgXFxcXFxcXCIvaW50ZXJlc3RzP3N0YXJ0PVxcXFxcXFwiICsgMzAgKiAocGFnZSAtIDEpICsgXFxcXFxcXCImY291bnQ9MzAmb3JkZXJfYnk9XFxcXFxcXCIgKyB1KTtcXFxcclxcXFxuICAgIGxldCBsID0gW107XFxcXHJcXFxcbiAgICBsZXQgc3RhckNvbG9yID0gZ2V0Q29uZmlnKCdzdGFyQ29sb3InKTtcXFxcclxcXFxuICAgIHIuaW50ZXJlc3RzLmZvckVhY2goKGUgPT4ge1xcXFxyXFxcXG4gICAgICAgIGxldCB0ID0gXFxcXFxcXCJcXFxcXFxcIjtcXFxcclxcXFxuICAgICAgICBpZiAoZS5yYXRpbmcpIHtcXFxcclxcXFxuICAgICAgICAgICAgdCA9IGNvbXB1dGVSYXRpbmcoZS5yYXRpbmcubWF4LCBlLnJhdGluZy52YWx1ZSk7XFxcXHJcXFxcbiAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgIGwucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlOiBlLnVzZXIubmFtZSxcXFxcclxcXFxuICAgICAgICAgICAgaW1nOiBlLnVzZXIuYXZhdGFyLFxcXFxyXFxcXG4gICAgICAgICAgICB1cmw6IGUudXNlci51cmwsXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImF2YXRhclxcXFxcXFwiXFxcXHJcXFxcbiAgICAgICAgfSk7XFxcXHJcXFxcbiAgICAgICAgbC5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGU6IGUuY29tbWVudCArICh0ID8gJzxici8+PHNtYWxsPueci+i/hyA8Zm9udCBjb2xvcj0nICsgc3RhckNvbG9yICsgJz4nICsgdCArIFxcXFxcXFwiPC9mb250Pjwvc21hbGw+XFxcXFxcXCIgOiBcXFxcXFxcIlxcXFxcXFwiKSArICc8YnIvPjxzbWFsbD48Zm9udCBjb2xvcj1cXFxcXFxcImdyZXlcXFxcXFxcIj4nICsgZS52b3RlX2NvdW50ICsgXFxcXFxcXCLotZ7igKJcXFxcXFxcIiArIC9cXFxcXFxcXGR7NH0tXFxcXFxcXFxkezEsMn0tXFxcXFxcXFxkezEsMn0vZy5leGVjKGUuY3JlYXRlX3RpbWUpICsgXFxcXFxcXCI8L2ZvbnQ+PC9zbWFsbD5cXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCJcXFxcclxcXFxuICAgICAgICB9KTtcXFxcclxcXFxuICAgICAgICBsLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lXFxcXFxcXCJcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgfSkpO1xcXFxyXFxcXG5cXFxcclxcXFxuICAgIGlmIChwYWdlID09IDEpIHtcXFxcclxcXFxuICAgICAgICBsLnVuc2hpZnQoe1xcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJibGFua19ibG9ja1xcXFxcXFwiXFxcXHJcXFxcbiAgICAgICAgfSk7XFxcXHJcXFxcbiAgICAgICAgbC51bnNoaWZ0KHtcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwiPGJpZz7lhbE8c3Ryb25nPiBcXFxcXFxcIiArIHIudG90YWwgKyBcXFxcXFxcIiA8L3N0cm9uZz7mnaHnn63or4Q8L2JpZz5cXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCJcXFxcclxcXFxuICAgICAgICB9KTtcXFxcclxcXFxuICAgICAgICBzZXRIb21lUmVzdWx0KHtcXFxcclxcXFxuICAgICAgICAgICAgZGF0YTogYS5jb25jYXQobClcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgfSBlbHNlIHtcXFxcclxcXFxuICAgICAgICBzZXRIb21lUmVzdWx0KHtcXFxcclxcXFxuICAgICAgICAgICAgZGF0YTogbFxcXFxyXFxcXG4gICAgICAgIH0pXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbn1cXFxcclxcXFxuXFxcXHJcXFxcbi8v5Ymn6K+E6aG16Z2iXFxcXHJcXFxcbmZ1bmN0aW9uIGRyYW1hUmV2aWV3TGlzdCh0eXBlLCBpZCkge1xcXFxyXFxcXG4gICAgYWRkTGlzdGVuZXIoJ29uQ2xvc2UnLCBcXFxcXFxcImNsZWFyTXlWYXIoJ2RyYW1hcmV2aWV3JylcXFxcXFxcIik7XFxcXHJcXFxcbiAgICBsZXQgaXRlbXMgPSB7XFxcXHJcXFxcbiAgICAgICAg54Ot6ZeoOiAnaG90JyxcXFxcclxcXFxuICAgICAgICDmnIDmlrA6ICdsYXRlc3QnXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBsZXQgdSA9IGdldE15VmFyKCdkcmFtYXJldmlldycsICdob3QnKTtcXFxcclxcXFxuICAgIGxldCBhID0gW107XFxcXHJcXFxcbiAgICBsZXQgY2hvb3NlQ29sb3IgPSBnZXRDb25maWcoJ2Nob29zZUNvbG9yJyk7XFxcXHJcXFxcbiAgICBmb3IgKGkgaW4gaXRlbXMpIHtcXFxcclxcXFxuICAgICAgICBhLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogdSA9PT0gaXRlbXNbaV0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjaG9vc2VDb2xvciArICc+JyArIGkgKyAnIDwvZm9udD48L2I+JyA6IGksXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxcXHJcXFxcbiAgICAgICAgICAgIHVybDogJCgnaGlrZXI6IC8vZW1wdHknKS5sYXp5UnVsZSgodCkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCJkcmFtYXJldmlld1xcXFxcXFwiLCB0KTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxcXHJcXFxcbiAgICAgICAgICAgIH0sIGl0ZW1zW2ldKVxcXFxyXFxcXG4gICAgICAgIH0pXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgbGV0IHBhZ2UgPSBNWV9QQUdFXFxcXHJcXFxcbiAgICBsZXQgciA9IGdldERvdWJhblJlcyhcXFxcXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvXFxcXFxcXCIgKyB0eXBlICsgXFxcXFxcXCIvXFxcXFxcXCIgKyBpZCArIFxcXFxcXFwiL3Jldmlld3M/c3RhcnQ9XFxcXFxcXCIgKyAxNSAqIChwYWdlIC0gMSkgKyBcXFxcXFxcIiZjb3VudD0xNSZvcmRlcl9ieT1cXFxcXFxcIiArIHUpO1xcXFxyXFxcXG4gICAgbGV0IGwgPSBbXTtcXFxcclxcXFxuICAgIGxldCBzdGFyQ29sb3IgPSBnZXRDb25maWcoJ3N0YXJDb2xvcicpO1xcXFxyXFxcXG4gICAgci5yZXZpZXdzLmZvckVhY2goKGUgPT4ge1xcXFxyXFxcXG4gICAgICAgIGxldCB0ID0gXFxcXFxcXCJcXFxcXFxcIjtcXFxcclxcXFxuICAgICAgICBpZiAoZS5yYXRpbmcpIHtcXFxcclxcXFxuICAgICAgICAgICAgdCA9IGNvbXB1dGVSYXRpbmcoZS5yYXRpbmcubWF4LCBlLnJhdGluZy52YWx1ZSk7XFxcXHJcXFxcbiAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgIGxldCBpID0gZS5jb21tZW50c19jb3VudCA/IGUuY29tbWVudHNfY291bnQgKyBcXFxcXFxcIuWbnuWkjVxcXFxcXFwiIDogXFxcXFxcXCJcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAgciA9IGUudXNlZnVsX2NvdW50ID8gZS51c2VmdWxfY291bnQgKyBcXFxcXFxcIuacieeUqFxcXFxcXFwiIDogXFxcXFxcXCJcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAgbyA9IGUucmVzaGFyZXNfY291bnQgPyBlLnJlc2hhcmVzX2NvdW50ICsgXFxcXFxcXCLovazlj5FcXFxcXFxcIiA6IFxcXFxcXFwiXFxcXFxcXCI7XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgICAgIHIgPSBpICYmIHIgPyBcXFxcXFxcIuKAolxcXFxcXFwiICsgciA6IHI7XFxcXHJcXFxcbiAgICAgICAgbyA9IChpIHx8IHIpICYmIG8gPyBcXFxcXFxcIuKAolxcXFxcXFwiICsgbyA6IG87XFxcXHJcXFxcbiAgICAgICAgbC5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGU6IGUudXNlci5uYW1lLFxcXFxyXFxcXG4gICAgICAgICAgICBpbWc6IGUudXNlci5hdmF0YXIsXFxcXHJcXFxcbiAgICAgICAgICAgIHVybDogZS51c2VyLnVybCxcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiYXZhdGFyXFxcXFxcXCJcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgICAgIGwucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIjxzdHJvbmc+XFxcXFxcXCIgKyBlLnRpdGxlICsgXFxcXFxcXCI8L3N0cm9uZz48YnIvPlxcXFxcXFwiICsgZS5hYnN0cmFjdCArICcgICA8c21hbGw+KDxhIGhyZWY9XFxcXFxcXCJoaWtlcjovL2VtcHR5I25vSGlzdG9yeSNAcnVsZT1qczpldmFsKEpTT04ucGFyc2UoZmV0Y2goYGhpa2VyOi8vcGFnZS9tYWluYCkpLnJ1bGUpO2RyYW1hUmV2aWV3VmlldygnICsgZS5pZCArICcpXFxcXFxcXCI+5pu05aSaPC9hPik8L3NtYWxsPicgKyAodCA/ICc8YnIvPjxzbWFsbD7nnIvov4cgPGZvbnQgY29sb3I9JyArIHN0YXJDb2xvciArICc+JyArIHQgKyBcXFxcXFxcIjwvZm9udD48L3NtYWxsPlxcXFxcXFwiIDogXFxcXFxcXCJcXFxcXFxcIikgKyAnPGJyLz48c21hbGw+PGZvbnQgY29sb3I9XFxcXFxcXCJncmV5XFxcXFxcXCI+JyArIGkgKyByICsgbyArIFxcXFxcXFwiPC9mb250Pjwvc21hbGw+XFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiXFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuICAgICAgICBsLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lXFxcXFxcXCJcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgfSkpO1xcXFxyXFxcXG5cXFxcclxcXFxuICAgIGlmIChwYWdlID09IDEpIHtcXFxcclxcXFxuICAgICAgICBsLnVuc2hpZnQoe1xcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJibGFua19ibG9ja1xcXFxcXFwiXFxcXHJcXFxcbiAgICAgICAgfSk7XFxcXHJcXFxcbiAgICAgICAgbC51bnNoaWZ0KHtcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwiPGJpZz7lhbE8c3Ryb25nPiBcXFxcXFxcIiArIHIudG90YWwgKyBcXFxcXFxcIiA8L3N0cm9uZz7mnaHliafor4Q8L2JpZz5cXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCJcXFxcclxcXFxuICAgICAgICB9KTtcXFxcclxcXFxuXFxcXHJcXFxcbiAgICAgICAgc2V0SG9tZVJlc3VsdCh7XFxcXHJcXFxcbiAgICAgICAgICAgIGRhdGE6IGEuY29uY2F0KGwpXFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgc2V0SG9tZVJlc3VsdCh7XFxcXHJcXFxcbiAgICAgICAgICAgIGRhdGE6IGxcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG59XFxcXHJcXFxcblxcXFxyXFxcXG4vL+mihOWRiueJh+mhtemdolxcXFxyXFxcXG5mdW5jdGlvbiB0cmFpbGVycyh0eXBlLCBpZCkge1xcXFxyXFxcXG4gICAgc2V0UGFnZVRpdGxlKCfpooTlkYot54mH5q61LeiKsee1ricpXFxcXHJcXFxcbiAgICBsZXQgaSA9IGdldERvdWJhblJlcyhcXFxcXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvXFxcXFxcXCIgKyB0eXBlICsgXFxcXFxcXCIvXFxcXFxcXCIgKyBpZCArIFxcXFxcXFwiL3RyYWlsZXJzXFxcXFxcXCIpLnRyYWlsZXJzO1xcXFxyXFxcXG4gICAgaS5mb3JFYWNoKChlID0+IHtcXFxcclxcXFxuICAgICAgICBlLmNvbF90eXBlID0gXFxcXFxcXCJtb3ZpZV8yXFxcXFxcXCIsIGUuZGVzYyA9IGUuc3ViamVjdF90aXRsZSArIFxcXFxcXFwi4oCiXFxcXFxcXCIgKyBlLmNyZWF0ZV90aW1lLCBlLmltZyA9IGUuY292ZXJfdXJsLCBlLnVybCA9IGUudmlkZW9fdXJsXFxcXHJcXFxcbiAgICB9KSk7XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgbGV0IHIgPSBpLmZpbHRlcigoZSA9PiBcXFxcXFxcIkFcXFxcXFxcIiA9PT0gZS50eXBlKSk7XFxcXHJcXFxcbiAgICBsZXQgbCA9IGkuZmlsdGVyKChlID0+IFxcXFxcXFwiQlxcXFxcXFwiID09PSBlLnR5cGUpKTtcXFxcclxcXFxuICAgIGxldCBvID0gaS5maWx0ZXIoKGUgPT4gXFxcXFxcXCJDXFxcXFxcXCIgPT09IGUudHlwZSkpO1xcXFxyXFxcXG5cXFxcclxcXFxuICAgIGlmIChyLmxlbmd0aCA+IDApIHtcXFxcclxcXFxuICAgICAgICByLnVuc2hpZnQoe1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLpooTlkYpcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCJcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG4gICAgaWYgKGwubGVuZ3RoID4gMCkge1xcXFxyXFxcXG4gICAgICAgIGwudW5zaGlmdCh7XFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIueJh+autVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJyaWNoX3RleHRcXFxcXFxcIlxcXFxyXFxcXG4gICAgICAgIH0pXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBpZiAoby5sZW5ndGggPiAwKSB7XFxcXHJcXFxcbiAgICAgICAgby51bnNoaWZ0KHtcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi6Iqx57WuXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiXFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuICAgIH1cXFxcclxcXFxuXFxcXHJcXFxcbiAgICBzZXRIb21lUmVzdWx0KHtcXFxcclxcXFxuICAgICAgICBkYXRhOiByLmNvbmNhdChsKVxcXFxyXFxcXG4gICAgICAgICAgICAuY29uY2F0KG8pXFxcXHJcXFxcbiAgICB9KVxcXFxyXFxcXG59XFxcXHJcXFxcblxcXFxyXFxcXG4vL+inhumikeivhOiuuumhtemdolxcXFxyXFxcXG5mdW5jdGlvbiB2aWRlb0NvbW1lbnQodHlwZSwgaWQpIHtcXFxcclxcXFxuICAgIGxldCBpID0gZ2V0RG91YmFuUmVzKFxcXFxcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9cXFxcXFxcIiArIHR5cGUgKyBcXFxcXFxcIi9cXFxcXFxcIiArIGlkICsgXFxcXFxcXCIvdmlkZW9zXFxcXFxcXCIpLnZpZGVvcztcXFxcclxcXFxuICAgIGkuZm9yRWFjaCgoZSA9PiB7XFxcXHJcXFxcbiAgICAgICAgZS5jb2xfdHlwZSA9IFxcXFxcXFwibW92aWVfMlxcXFxcXFwiLCBlLmRlc2MgPSBlLmF1dGhvci5uYW1lICsgXFxcXFxcXCLigKJcXFxcXFxcIiArIGUuY3JlYXRlX3RpbWUsIGUuaW1nID0gZS5jb3Zlcl91cmwgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiICsgZS5jb3Zlcl91cmwsIGUudXJsID0gZS52aWRlb191cmxcXFxcclxcXFxuICAgIH0pKVxcXFxyXFxcXG4gICAgaWYgKGkubGVuZ3RoID4gMCkge1xcXFxyXFxcXG4gICAgICAgIGkudW5zaGlmdCh7XFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuinhumikeivhOiuulxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJyaWNoX3RleHRcXFxcXFxcIlxcXFxyXFxcXG4gICAgICAgIH0pXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBzZXRIb21lUmVzdWx0KHtcXFxcclxcXFxuICAgICAgICBkYXRhOiBpXFxcXHJcXFxcbiAgICB9KVxcXFxyXFxcXG59XFxcXHJcXFxcblxcXFxyXFxcXG4vL+a8lOiBjOS6uuWRmOivpuaDhemhtemdolxcXFxyXFxcXG5mdW5jdGlvbiBlbGVzc2FyVmlldyhpZCwgcGlkLCBuYW1lKSB7XFxcXHJcXFxcbiAgICBzZXRQYWdlVGl0bGUobmFtZSk7XFxcXHJcXFxcbiAgICBsZXQgaSA9IGdldERvdWJhblJlcyhcXFxcXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvZWxlc3Nhci9zdWJqZWN0L1xcXFxcXFwiICsgaWQpO1xcXFxyXFxcXG4gICAgbGV0IGEgPSBbXTtcXFxcclxcXFxuICAgIGEucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ0nICsgKGkudGl0bGUgKyAnKCcgKyBpLmxhdGluX3RpdGxlICsgJyknKS5iaWcoKS5ib2xkKCksXFxcXHJcXFxcbiAgICAgICAgZGVzYzogJ+KAnOKAnOKAneKAnScgKyBpLmRlc2MubWF0Y2goL1xcXFxcXFxcPHBcXFxcXFxcXD4uKlxcXFxcXFxcPFxcXFxcXFxcL3BcXFxcXFxcXD4vKVswXSxcXFxcclxcXFxuICAgICAgICBpbWc6IGkuY292ZXIubm9ybWFsLnVybCArICdAUmVmZXJlcj0nICsgaS5jb3Zlci5ub3JtYWwudXJsLFxcXFxyXFxcXG4gICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV92ZXJ0aWNhbF9waWNfYmx1cicsXFxcXHJcXFxcbiAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5JykucnVsZSgoZGVzYywgZXh0cmEsIG5hbWUpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgbGV0IGluZm8gPSBleHRyYS5pbmZvLm1hcChlID0+IGUuam9pbignOiZuYnNwOycpKTtcXFxcclxcXFxuICAgICAgICAgICAgc2V0UmVzdWx0KFt7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogJzxoMj4nICsgbmFtZSArICc8L2gyPicgKyBpbmZvLmpvaW4oJzxici8+JykgKyBkZXNjLm1hdGNoKC9cXFxcXFxcXDxwXFxcXFxcXFw+LipcXFxcXFxcXDxcXFxcXFxcXC9wXFxcXFxcXFw+LylbMF0sXFxcXHJcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCdcXFxcclxcXFxuICAgICAgICAgICAgfV0pXFxcXHJcXFxcbiAgICAgICAgfSwgaS5kZXNjLCBpLmV4dHJhLCBpLnRpdGxlKVxcXFxyXFxcXG4gICAgfSlcXFxcclxcXFxuICAgIFxcXFxyXFxcXG4gICAgbGV0IGluZGV4ID0gaS5tb2R1bGVzLmZpbmRJbmRleChjdXIgPT4gY3VyLnR5cGUgPT0gXFxcXFxcXCJhd2FyZF9yZXN1bHRfY29sbGVjdGlvblxcXFxcXFwiKTtcXFxcclxcXFxuICAgIGlmIChpbmRleCA+IC0xKSB7XFxcXHJcXFxcbiAgICAgICAgbGV0IGUgPSBpLm1vZHVsZXNbaW5kZXhdLnBheWxvYWQ7XFxcXHJcXFxcbiAgICAgICAgYS5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ0nICsgJ+iOt+WlluiusOW9lScuYmlnKCkuYm9sZCgpICsgJzxzbWFsbD4o5YWxJyArIGUudG90YWwgKyAn6aG5KTwvc21hbGw+JyxcXFxcclxcXFxuICAgICAgICAgICAgZGVzYzogJ+KAnOKAnOKAneKAnTxzdHJvbmc+JyArIGUuYXdhcmRzWzBdLmNlcmVtb255LnRpdGxlICsgJzwvc3Ryb25nPlxcXFxcXFxcbicgKyBlLmF3YXJkc1swXS5jYXRlZ29yeS50aXRsZSArIChlLmF3YXJkc1swXS5pc193b24gPyAnJyA6ICco5o+Q5ZCNKScpLFxcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnLFxcXFxyXFxcXG4gICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkvIy8kcGFnZXtmeXBhZ2V9I25vSGlzdG9yeSMnKS5ydWxlKChpZCwgY291bnQpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGVsZXNzYXJBd2FyZHMoaWQsIGNvdW50KTtcXFxcclxcXFxuICAgICAgICAgICAgfSwgZS5pZCwgZS50b3RhbCksXFxcXHJcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXFxcclxcXFxuICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgIH0pXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBcXFxcclxcXFxuICAgIGluZGV4ID0gaS5tb2R1bGVzLmZpbmRJbmRleChjdXIgPT4gY3VyLnR5cGUgPT0gXFxcXFxcXCJ3b3JrX2NvbGxlY3Rpb25zXFxcXFxcXCIpO1xcXFxyXFxcXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcXFxcclxcXFxuICAgICAgICBsZXQgZTIgPSBpLm1vZHVsZXNbaW5kZXhdLnBheWxvYWQ7XFxcXHJcXFxcbiAgICAgICAgYS5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xcXFxyXFxcXG4gICAgICAgIH0pXFxcXHJcXFxcbiAgICAgICAgYS5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ0nICsgJ+W9seinhuS9nOWTgScuYmlnKCkuYm9sZCgpICsgKCco5YWxJyArIGUyLmNvbGxlY3Rpb25zWzBdLnRvdGFsICsgJ+mDqCknKS5zbWFsbCgpLFxcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnLFxcXFxyXFxcXG4gICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkvIy8kcGFnZXtmeXBhZ2V9I25vSGlzdG9yeSMnKS5ydWxlKChpZCwgdHlwZSkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgZWxlc3NhcldvcmtzKGlkLCB0eXBlKTtcXFxcclxcXFxuICAgICAgICAgICAgfSwgZTIuaWQsIGUyLmNvbGxlY3Rpb25zWzBdLnRpdGxlKSxcXFxcclxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcXFxyXFxcXG4gICAgICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuXFxcXHJcXFxcbiAgICAgICAgbGV0IGRldGFpbHNWaWV3Q29uZmlncyA9IGdldENvbmZpZygnZGV0YWlsc1ZpZXdDb25maWdzJyk7XFxcXHJcXFxcbiAgICAgICAgbGV0IHdvcmtzID0gZTIuY29sbGVjdGlvbnNbMF0ud29ya3M7XFxcXHJcXFxcbiAgICAgICAgbGV0IGxlbmd0aCA9IHdvcmtzLmxlbmd0aCA8PSAzID8gd29ya3MubGVuZ3RoIDogMztcXFxcclxcXFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XFxcXHJcXFxcbiAgICAgICAgICAgIGxldCBlID0gd29ya3NbaV07XFxcXHJcXFxcbiAgICAgICAgICAgIGxldCByYXRpbmcgPSBcXFxcXFxcIlxcXFxcXFwiO1xcXFxyXFxcXG4gICAgICAgICAgICBpZiAoZS5zdWJqZWN0LmV4dHJhLnJhdGluZ19ncm91cC5yYXRpbmcpIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHJhdGluZyA9IGNvbXB1dGVSYXRpbmcoZS5zdWJqZWN0LmV4dHJhLnJhdGluZ19ncm91cC5yYXRpbmcubWF4LCBlLnN1YmplY3QuZXh0cmEucmF0aW5nX2dyb3VwLnJhdGluZy52YWx1ZSkgKyBcXFxcXFxcIiBcXFxcXFxcIiArIGUuc3ViamVjdC5leHRyYS5yYXRpbmdfZ3JvdXAucmF0aW5nLnZhbHVlICsgXFxcXFxcXCLliIZcXFxcXFxcIjtcXFxcclxcXFxuICAgICAgICAgICAgfVxcXFxyXFxcXG5cXFxcclxcXFxuICAgICAgICAgICAgbGV0IHR5cGUgPSBlLnN1YmplY3Quc3VidHlwZSxcXFxcclxcXFxuICAgICAgICAgICAgICAgIGlkID0gZS5zdWJqZWN0LmlkLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgdGl0bGUgPSBlLnN1YmplY3QudGl0bGU7XFxcXHJcXFxcbiAgICAgICAgICAgIGxldCB1c2VDb25maWcgPSBkZXRhaWxzVmlld0NvbmZpZ3NbZGV0YWlsc1ZpZXdDb25maWdzLnVzZV0uY29uZmlnO1xcXFxyXFxcXG4gICAgICAgICAgICBsZXQgdXJsUGFyYW1zID0ge307XFxcXHJcXFxcbiAgICAgICAgICAgIGlmICh1c2VDb25maWcuc3RhcnRzV2l0aCgneycpKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBldmFsKCd1cmxQYXJhbXMgPSAnICsgdXNlQ29uZmlnKTtcXFxcclxcXFxuICAgICAgICAgICAgfSBlbHNlIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHVybFBhcmFtcy51cmwgPSAkKFxcXFxcXFwiaGlrZXI6Ly9lbXB0eSNub0hpc3RvcnkjI2ltbWVyc2l2ZVRoZW1lI1xcXFxcXFwiICsgJz90eXBlPScgKyB0eXBlICsgJyZpZD0nICsgaWQpLnJ1bGUoKHR5cGUsIGlkLCB0aXRsZSwgdXNlQ29uZmlnKSA9PiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcXFxcXFxcInBsYXlsaXN0XFxcXFxcXCIpIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZG91TGlzdChpZCwgTVlfUEFHRSwgNTApO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2YWwodXNlQ29uZmlnKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9LCB0eXBlLCBpZCwgdGl0bGUsIHVzZUNvbmZpZyk7XFxcXHJcXFxcbiAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICAgICAgYS5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcXFxcclxcXFxuICAgICAgICAgICAgICAgIGltZzogZS5zdWJqZWN0LmNvdmVyLm5vcm1hbC51cmwgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiICsgZS5zdWJqZWN0LmNvdmVyLm5vcm1hbC51cmwsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICBkZXNjOiByYXRpbmcsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzMnLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgdXJsOiB1cmxQYXJhbXMudXJsLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHVybFBhcmFtcy5leHRyYVxcXFxyXFxcXG4gICAgICAgICAgICB9KVxcXFxyXFxcXG4gICAgICAgIH1cXFxcclxcXFxuICAgICAgICAvKmEucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlOiAn5p+l55yL5pu05aSaJyxcXFxcclxcXFxuICAgICAgICAgICAgaW1nOiAnaHR0cHM6Ly9qb2tlci10eC5jb2RpbmcubmV0L3AvaGlrZXJpbWcvZC9oaWtlci9naXQvcmF3L21hc3Rlci9pbWcvbW9yZV92ZXIucG5nP2Rvd25sb2FkPWZhbHNlJyxcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8zJyxcXFxcclxcXFxuICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5LyMvJHBhZ2V7ZnlwYWdlfSNub0hpc3RvcnkjJylcXFxcclxcXFxuICAgICAgICAgICAgICAgIC5ydWxlKChpZCwgdHlwZSkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgZWxlc3NhcldvcmtzKGlkLCB0eXBlKTtcXFxcclxcXFxuICAgICAgICAgICAgfSwgZTIuaWQsIGUyLmNvbGxlY3Rpb25zWzBdLnRpdGxlKVxcXFxyXFxcXG4gICAgICAgIH0pKi9cXFxcclxcXFxuICAgIH1cXFxcclxcXFxuICAgIFxcXFxyXFxcXG4gICAgaW5kZXggPSBpLm1vZHVsZXMuZmluZEluZGV4KGN1ciA9PiBjdXIudHlwZSA9PSBcXFxcXFxcInBob3Rvc1xcXFxcXFwiKTtcXFxcclxcXFxuICAgIGlmIChpbmRleCA+IC0xKSB7XFxcXHJcXFxcbiAgICAgICAgbGV0IGUzID0gaS5tb2R1bGVzW2luZGV4XS5wYXlsb2FkO1xcXFxyXFxcXG4gICAgICAgIGEucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZSdcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgICAgIGEucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlOiAn4oCc4oCc4oCd4oCdJyArICfmvJTlkZjnhafniYcnLmJpZygpLmJvbGQoKSArICgnKOWFsScgKyBlMy50b3RhbCArICflvKApJykuc21hbGwoKSxcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJyxcXFxcclxcXFxuICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5LyMvJHBhZ2V7ZnlwYWdlfSNub0hpc3RvcnkjJykucnVsZSgocGlkKSA9PiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBlbGVzc2FyUGhvdG9zKHBpZCk7XFxcXHJcXFxcbiAgICAgICAgICAgIH0sIHBpZCksXFxcXHJcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXFxcclxcXFxuICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgIH0pXFxcXHJcXFxcblxcXFxyXFxcXG4gICAgICAgIGxldCBwbGVuZ3RoID0gZTMucGhvdG9zLmxlbmd0aCA8PSAyID8gZTMucGhvdG9zLmxlbmd0aCA6IDI7XFxcXHJcXFxcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwbGVuZ3RoOyBpKyspIHtcXFxcclxcXFxuICAgICAgICAgICAgYS5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIC8vdGl0bGU6IGUzLnBob3Rvc1swXS5kZXNjcmlwdGlvbixcXFxcclxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnY2FyZF9waWNfMicsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICBkZXNjOiAnMCcsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICBpbWc6IGUzLnBob3Rvc1tpXS5pbWFnZS5ub3JtYWwudXJsICsgJ0BSZWZlcmVyPScgKyBlMy5waG90b3NbaV0uaW1hZ2Uubm9ybWFsLnVybCxcXFxcclxcXFxuICAgICAgICAgICAgICAgIHVybDogZTMucGhvdG9zW2ldLmltYWdlLm5vcm1hbC51cmwgKyAnQFJlZmVyZXI9JyArIGUzLnBob3Rvc1tpXS5pbWFnZS5ub3JtYWwudXJsXFxcXHJcXFxcbiAgICAgICAgICAgIH0pXFxcXHJcXFxcbiAgICAgICAgfVxcXFxyXFxcXG5cXFxcclxcXFxuICAgICAgICAvKmEucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgIC8vdGl0bGU6ICfmn6XnnIvmm7TlpJonLFxcXFxyXFxcXG4gICAgICAgICAgICBpbWc6ICdodHRwczovL2pva2VyLXR4LmNvZGluZy5uZXQvcC9oaWtlcmltZy9kL2hpa2VyL2dpdC9yYXcvbWFzdGVyL2ltZy9tb3JlLnBuZz9kb3dubG9hZD1mYWxzZScsXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnY2FyZF9waWNfMicsXFxcXHJcXFxcbiAgICAgICAgICAgIGRlc2M6ICcwJyxcXFxcclxcXFxuICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5LyMvJHBhZ2V7ZnlwYWdlfSNub0hpc3RvcnkjJylcXFxcclxcXFxuICAgICAgICAgICAgICAgIC5ydWxlKChwaWQpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGVsZXNzYXJQaG90b3MocGlkKTtcXFxcclxcXFxuICAgICAgICAgICAgfSwgcGlkKVxcXFxyXFxcXG4gICAgICAgIH0pKi9cXFxcclxcXFxuICAgIH1cXFxcclxcXFxuXFxcXHJcXFxcbiAgICBzZXRSZXN1bHQoYSk7XFxcXHJcXFxcbn1cXFxcclxcXFxuXFxcXHJcXFxcbi8v5ryU6IGM5Lq65ZGY6I635aWW6K+m5oOF6aG16Z2iXFxcXHJcXFxcbmZ1bmN0aW9uIGVsZXNzYXJBd2FyZHMoaWQsIGNvdW50KSB7XFxcXHJcXFxcbiAgICBsZXQgaSA9IGdldERvdWJhblJlcyhcXFxcXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvZWxlc3Nhci9hd2FyZF9yZXN1bHRfY29sbGVjdGlvbi9cXFxcXFxcIiArIGlkICsgXFxcXFxcXCIvYXdhcmRzP3N0YXJ0PVxcXFxcXFwiICsgMzAgKiAoTVlfUEFHRSAtIDEpICsgXFxcXFxcXCImY291bnQ9MzBcXFxcXFxcIik7XFxcXHJcXFxcbiAgICBsZXQgbCA9IFtdO1xcXFxyXFxcXG4gICAgbGV0IGRldGFpbHNWaWV3Q29uZmlncyA9IGdldENvbmZpZygnZGV0YWlsc1ZpZXdDb25maWdzJyk7XFxcXHJcXFxcbiAgICBpLmF3YXJkcy5mb3JFYWNoKHQgPT4ge1xcXFxyXFxcXG4gICAgICAgIGwucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlOiAodC55ZWFyK1xcXFxcXFwiXFxcXFxcXCIpLmJvbGQoKS5iaWcoKSxcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdyaWNoX3RleHQnXFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuXFxcXHJcXFxcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0Lm1vZHVsZXMubGVuZ3RoOyBpKyspIHtcXFxcclxcXFxuICAgICAgICAgICAgbGV0IGUgPSB0Lm1vZHVsZXNbaV07XFxcXHJcXFxcbiAgICAgICAgICAgIGlmICghZS5jZXJlbW9ueSB8fCAhZS5jYXRlZ29yeSkge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgbGV0IHJhdGluZyA9IFxcXFxcXFwiXFxcXFxcXCI7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBpZiAoZS5leHRyYS5yYXRpbmdfZ3JvdXAucmF0aW5nKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgcmF0aW5nID0gY29tcHV0ZVJhdGluZyhlLmV4dHJhLnJhdGluZ19ncm91cC5yYXRpbmcubWF4LCBlLmV4dHJhLnJhdGluZ19ncm91cC5yYXRpbmcudmFsdWUpICsgXFxcXFxcXCIgXFxcXFxcXCIgKyBlLmV4dHJhLnJhdGluZ19ncm91cC5yYXRpbmcudmFsdWUgKyBcXFxcXFxcIuWIhlxcXFxcXFwiO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgICAgICAgICAgbGV0IHR5cGUgPSBlLnN1YnR5cGUsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgaWQgPSBlLmlkLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlID0gZS50aXRsZTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGxldCB1c2VDb25maWcgPSBkZXRhaWxzVmlld0NvbmZpZ3NbZGV0YWlsc1ZpZXdDb25maWdzLnVzZV0uY29uZmlnO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgbGV0IHVybFBhcmFtcyA9IHt9O1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgaWYgKHVzZUNvbmZpZy5zdGFydHNXaXRoKCd7JykpIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBldmFsKCd1cmxQYXJhbXMgPSAnICsgdXNlQ29uZmlnKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgdXJsUGFyYW1zLnVybCA9ICQoXFxcXFxcXCJoaWtlcjovL2VtcHR5I25vSGlzdG9yeSMjaW1tZXJzaXZlVGhlbWUjXFxcXFxcXCIgKyAnP3R5cGU9JyArIHR5cGUgKyAnJmlkPScgKyBpZCkucnVsZSgodHlwZSwgaWQsIHRpdGxlLCB1c2VDb25maWcpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gXFxcXFxcXCJwbGF5bGlzdFxcXFxcXFwiKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3VMaXN0KGlkLCBNWV9QQUdFLCA1MCk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmFsKHVzZUNvbmZpZyk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICB9LCB0eXBlLCBpZCwgdGl0bGUsIHVzZUNvbmZpZyk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBsLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBpbWc6IGUuY292ZXIubm9ybWFsLnVybCArIFxcXFxcXFwiQFJlZmVyZXI9XFxcXFxcXCIgKyBlLmNvdmVyLm5vcm1hbC51cmwsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogcmF0aW5nICsgJ1xcXFxcXFxcbicgKyBlLmV4dHJhLnNob3J0X2luZm8sXFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmxQYXJhbXMudXJsLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGV4dHJhOiB1cmxQYXJhbXMuZXh0cmFcXFxcclxcXFxuICAgICAgICAgICAgICAgIH0pXFxcXHJcXFxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBsLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlLmNlcmVtb255LnRpdGxlLmJvbGQoKSArICc8c21hbGw+KDxhIGhyZWY9XFxcXFxcXCJoaWtlcjovL2VtcHR5I25vSGlzdG9yeSNAcnVsZT1qczpldmFsKEpTT04ucGFyc2UoZmV0Y2goYGhpa2VyOi8vcGFnZS9tYWluYCkpLnJ1bGUpO2F3YXJkVmlldyhgJyArIGUuY2VyZW1vbnkuaWQgKyAnYCxgJyArIGUuY2VyZW1vbnkudGl0bGUgKyAnYCk7XFxcXFxcXCI+5p+l55yL6K+m5oOFPC9hPik8L3NtYWxsPicgKyAnPGJyLz4nICsgKGUuY2F0ZWdvcnkudGl0bGUgKyAoZS5pc193b24gPyAnJyA6ICco5o+Q5ZCNKScpKS5zbWFsbCgpLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAncmljaF90ZXh0J1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgfSlcXFxcclxcXFxuICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgIH1cXFxcclxcXFxuICAgIH0pXFxcXHJcXFxcblxcXFxyXFxcXG4gICAgaWYgKE1ZX1BBR0UgPT0gMSkge1xcXFxyXFxcXG4gICAgICAgIGwudW5zaGlmdCh7XFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImJsYW5rX2Jsb2NrXFxcXFxcXCJcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgICAgIGwudW5zaGlmdCh7XFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIjxiaWc+5YWxPHN0cm9uZz4gXFxcXFxcXCIgKyBjb3VudCArIFxcXFxcXFwiIDwvc3Ryb25nPumhueiOt+WlluiusOW9lTwvYmlnPlxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJyaWNoX3RleHRcXFxcXFxcIlxcXFxyXFxcXG4gICAgICAgIH0pXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBzZXRSZXN1bHQobCk7XFxcXHJcXFxcbn1cXFxcclxcXFxuXFxcXHJcXFxcbi8v5ryU6IGM5Lq65ZGY5L2c5ZOB6aG16Z2iXFxcXHJcXFxcbmZ1bmN0aW9uIGVsZXNzYXJXb3JrcyhpZCwgdHlwZSkge1xcXFxyXFxcXG4gICAgbGV0IGkgPSBnZXREb3ViYW5SZXMoXFxcXFxcXCJodHRwczovL2Zyb2RvLmRvdWJhbi5jb20vYXBpL3YyL2VsZXNzYXIvd29ya19jb2xsZWN0aW9ucy9cXFxcXFxcIiArIGlkICsgXFxcXFxcXCIvd29ya3M/c3RhcnQ9XFxcXFxcXCIgKyAzMCAqIChNWV9QQUdFIC0gMSkgKyBcXFxcXFxcIiZjb3VudD0zMCZjb2xsZWN0aW9uX3RpdGxlPVxcXFxcXFwiICsgdHlwZSk7XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgbGV0IGwgPSBbXTtcXFxcclxcXFxuICAgIGxldCBkZXRhaWxzVmlld0NvbmZpZ3MgPSBnZXRDb25maWcoJ2RldGFpbHNWaWV3Q29uZmlncycpO1xcXFxyXFxcXG4gICAgaS53b3Jrcy5mb3JFYWNoKChlID0+IHtcXFxcclxcXFxuICAgICAgICBsZXQgcmF0aW5nID0gXFxcXFxcXCJcXFxcXFxcIjtcXFxcclxcXFxuICAgICAgICBpZiAoZS5zdWJqZWN0LmV4dHJhLnJhdGluZ19ncm91cC5yYXRpbmcpIHtcXFxcclxcXFxuICAgICAgICAgICAgcmF0aW5nID0gY29tcHV0ZVJhdGluZyhlLnN1YmplY3QuZXh0cmEucmF0aW5nX2dyb3VwLnJhdGluZy5tYXgsIGUuc3ViamVjdC5leHRyYS5yYXRpbmdfZ3JvdXAucmF0aW5nLnZhbHVlKSArIFxcXFxcXFwiIFxcXFxcXFwiICsgZS5zdWJqZWN0LmV4dHJhLnJhdGluZ19ncm91cC5yYXRpbmcudmFsdWUgKyBcXFxcXFxcIuWIhlxcXFxcXFwiO1xcXFxyXFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgXFxcXG4gICAgICAgIGxldCB5ZWFyID0gZS5zdWJqZWN0LmV4dHJhID8gKGUuc3ViamVjdC5leHRyYS55ZWFyID8gJygnK2Uuc3ViamVjdC5leHRyYS55ZWFyKycpJyA6ICcnKSA6ICcnO1xcXFxyXFxcXG5cXFxcclxcXFxuICAgICAgICBsZXQgdHlwZSA9IGUuc3ViamVjdC5zdWJ0eXBlLFxcXFxyXFxcXG4gICAgICAgICAgICBpZCA9IGUuc3ViamVjdC5pZCxcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGUgPSBlLnN1YmplY3QudGl0bGU7XFxcXHJcXFxcbiAgICAgICAgbGV0IHVzZUNvbmZpZyA9IGRldGFpbHNWaWV3Q29uZmlnc1tkZXRhaWxzVmlld0NvbmZpZ3MudXNlXS5jb25maWc7XFxcXHJcXFxcbiAgICAgICAgbGV0IHVybFBhcmFtcyA9IHt9O1xcXFxyXFxcXG4gICAgICAgIGlmICh1c2VDb25maWcuc3RhcnRzV2l0aCgneycpKSB7XFxcXHJcXFxcbiAgICAgICAgICAgIGV2YWwoJ3VybFBhcmFtcyA9ICcgKyB1c2VDb25maWcpO1xcXFxyXFxcXG4gICAgICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgICAgIHVybFBhcmFtcy51cmwgPSAkKFxcXFxcXFwiaGlrZXI6Ly9lbXB0eSNub0hpc3RvcnkjI2ltbWVyc2l2ZVRoZW1lI1xcXFxcXFwiICsgJz90eXBlPScgKyB0eXBlICsgJyZpZD0nICsgaWQpLnJ1bGUoKHR5cGUsIGlkLCB0aXRsZSwgdXNlQ29uZmlnKSA9PiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gXFxcXFxcXCJwbGF5bGlzdFxcXFxcXFwiKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgZG91TGlzdChpZCwgTVlfUEFHRSwgNTApO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBldmFsKHVzZUNvbmZpZyk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgICAgIH0sIHR5cGUsIGlkLCB0aXRsZSwgdXNlQ29uZmlnKTtcXFxcclxcXFxuICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgbC5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGU6IHRpdGxlICsgeWVhcixcXFxcclxcXFxuICAgICAgICAgICAgaW1nOiBlLnN1YmplY3QuY292ZXIubm9ybWFsLnVybCArIFxcXFxcXFwiQFJlZmVyZXI9XFxcXFxcXCIgKyBlLnN1YmplY3QuY292ZXIubm9ybWFsLnVybCxcXFxcclxcXFxuICAgICAgICAgICAgZGVzYzogZS5yb2xlcy5qb2luKFxcXFxcXFwi4oCiXFxcXFxcXCIpICsgXFxcXFxcXCJcXFxcXFxcXG5cXFxcXFxcIiArIHJhdGluZyArICdcXFxcXFxcXG4nICsgZS5zdWJqZWN0LmV4dHJhLnNob3J0X2luZm8sXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV92ZXJ0aWNhbF9waWMnLFxcXFxyXFxcXG4gICAgICAgICAgICB1cmw6IHVybFBhcmFtcy51cmwsXFxcXHJcXFxcbiAgICAgICAgICAgIGV4dHJhOiB1cmxQYXJhbXMuZXh0cmFcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgfSkpXFxcXHJcXFxcblxcXFxyXFxcXG4gICAgaWYgKE1ZX1BBR0UgPT0gMSkge1xcXFxyXFxcXG4gICAgICAgIGwudW5zaGlmdCh7XFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImJsYW5rX2Jsb2NrXFxcXFxcXCJcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgICAgIGwudW5zaGlmdCh7XFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIjxiaWc+5YWxPHN0cm9uZz4gXFxcXFxcXCIgKyBpLnRvdGFsICsgXFxcXFxcXCIgPC9zdHJvbmc+6YOo5L2c5ZOBPC9iaWc+XFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiXFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuICAgIH1cXFxcclxcXFxuICAgIHNldEhvbWVSZXN1bHQoe1xcXFxyXFxcXG4gICAgICAgIGRhdGE6IGxcXFxcclxcXFxuICAgIH0pXFxcXHJcXFxcbn1cXFxcclxcXFxuXFxcXHJcXFxcbi8v5ryU6IGM5Lq65ZGY54Wn54mH6aG16Z2iXFxcXHJcXFxcbmZ1bmN0aW9uIGVsZXNzYXJQaG90b3MocGlkKSB7XFxcXHJcXFxcbiAgICBsZXQgaSA9IGdldERvdWJhblJlcyhcXFxcXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvY2VsZWJyaXR5L1xcXFxcXFwiICsgcGlkICsgXFxcXFxcXCIvcGhvdG9zP3N0YXJ0PVxcXFxcXFwiICsgMzAgKiAoTVlfUEFHRSAtIDEpICsgXFxcXFxcXCImY291bnQ9MzBcXFxcXFxcIik7XFxcXHJcXFxcbiAgICBsZXQgbCA9IFtdO1xcXFxyXFxcXG4gICAgaS5waG90b3MuZm9yRWFjaChlID0+IHtcXFxcclxcXFxuICAgICAgICBsLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ2NhcmRfcGljXzInLFxcXFxyXFxcXG4gICAgICAgICAgICBkZXNjOiAnMCcsXFxcXHJcXFxcbiAgICAgICAgICAgIGltZzogZS5pbWFnZS5ub3JtYWwudXJsICsgJ0BSZWZlcmVyPScgKyBlLmltYWdlLm5vcm1hbC51cmwsXFxcXHJcXFxcbiAgICAgICAgICAgIHVybDogZS5pbWFnZS5ub3JtYWwudXJsICsgJ0BSZWZlcmVyPScgKyBlLmltYWdlLm5vcm1hbC51cmxcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgfSlcXFxcclxcXFxuICAgIGlmIChNWV9QQUdFID09IDEpIHtcXFxcclxcXFxuICAgICAgICBsLnVuc2hpZnQoe1xcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJibGFua19ibG9ja1xcXFxcXFwiXFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuICAgICAgICBsLnVuc2hpZnQoe1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCI8YmlnPuWFsTxzdHJvbmc+IFxcXFxcXFwiICsgaS50b3RhbCArIFxcXFxcXFwiIDwvc3Ryb25nPuW8oOeFp+eJhzwvYmlnPlxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJyaWNoX3RleHRcXFxcXFxcIlxcXFxyXFxcXG4gICAgICAgIH0pXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBzZXRSZXN1bHQobCk7XFxcXHJcXFxcbn1cXFxcclxcXFxuXFxcXHJcXFxcbi8v5Ymn6K+E6K+m5oOF6aG16Z2iXFxcXHJcXFxcbmZ1bmN0aW9uIGRyYW1hUmV2aWV3VmlldyhpZCkge1xcXFxyXFxcXG4gICAgc2V0UGFnZVRpdGxlKCfliafor4Tor6bmg4UnKTtcXFxcclxcXFxuICAgIGxldCBpID0gZ2V0RG91YmFuUmVzKFxcXFxcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9yZXZpZXcvXFxcXFxcXCIgKyBpZCk7XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgaS5waG90b3MuZm9yRWFjaCgoZSA9PiB7XFxcXHJcXFxcbiAgICAgICAgaS5jb250ZW50ID0gaS5jb250ZW50LnJlcGxhY2UoJ2lkPVxcXFxcXFwiJyArIGUudGFnX25hbWUgKyAnXFxcXFxcXCInLCAnc3JjPVxcXFxcXFwiJyArIGUuaW1hZ2UubGFyZ2UudXJsICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIiArIGUuaW1hZ2UubGFyZ2UudXJsICsgJ1xcXFxcXFwiJylcXFxcclxcXFxuICAgIH0pKTtcXFxcclxcXFxuXFxcXHJcXFxcbiAgICBsZXQgbCA9IGdldERvdWJhblJlcyhcXFxcXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvcmV2aWV3L1xcXFxcXFwiICsgaWQgKyBcXFxcXFxcIi9jb21tZW50c1xcXFxcXFwiKTtcXFxcclxcXFxuICAgIGxldCBvID0gW3tcXFxcclxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJibGFua19ibG9ja1xcXFxcXFwiXFxcXHJcXFxcbiAgICB9LCB7XFxcXHJcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwiPGJpZz48c3Ryb25nPuivhOiuuu+8mjwvc3Ryb25nPjwvYmlnPlxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiXFxcXHJcXFxcbiAgICB9XTtcXFxcclxcXFxuXFxcXHJcXFxcbiAgICBsLmNvbW1lbnRzLmxlbmd0aCA+IDAgPyBsLmNvbW1lbnRzLmZvckVhY2goKGUgPT4ge1xcXFxyXFxcXG4gICAgICAgIG8ucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlOiBlLmF1dGhvci5uYW1lLFxcXFxyXFxcXG4gICAgICAgICAgICBpbWc6IGUuYXV0aG9yLmF2YXRhcixcXFxcclxcXFxuICAgICAgICAgICAgdXJsOiBlLmF1dGhvci51cmwsXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImF2YXRhclxcXFxcXFwiXFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuICAgICAgICBvLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogZS50ZXh0ICsgKGUucmVwbGllcy5sZW5ndGggPiAwID8gJyA8c21hbGw+PGEgaHJlZj1cXFxcXFxcImhpa2VyOi8vZW1wdHkjbm9IaXN0b3J5I0BydWxlPWpzOmV2YWwoSlNPTi5wYXJzZShmZXRjaChgaGlrZXI6Ly9wYWdlL21haW5gKSkucnVsZSk7ZHJhbWFSZXZpZXdSZXBseVZpZXcoJyArIGUuaWQgKyAnKTtcXFxcXFxcIj5b5p+l55yL5Zue5aSNXTwvYT48L3NtYWxsPicgOiBcXFxcXFxcIlxcXFxcXFwiKSxcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCJcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgICAgIG8ucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImxpbmVcXFxcXFxcIlxcXFxyXFxcXG4gICAgICAgIH0pXFxcXHJcXFxcbiAgICB9KSkgOiBvLnB1c2goe1xcXFxyXFxcXG4gICAgICAgIHRpdGxlOiAnPGZvbnQgY29sb3I9XFxcXFxcXCJncmV5XFxcXFxcXCI+KCDigKLMpcyBIMuNIOKAosyA4KWCICnov5jmsqHmnInkurror4TorrouLi48L2ZvbnQ+JyxcXFxcclxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJyaWNoX3RleHRcXFxcXFxcIlxcXFxyXFxcXG4gICAgfSk7XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgbGV0IGEgPSBcXFxcXFxcIlxcXFxcXFwiO1xcXFxyXFxcXG4gICAgaWYgKGkucmF0aW5nKSB7XFxcXHJcXFxcbiAgICAgICAgYSA9IGNvbXB1dGVSYXRpbmcoaS5yYXRpbmcubWF4LCBpLnJhdGluZy52YWx1ZSk7XFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBsZXQgY29sb3IgPSBKU09OLnBhcnNlKGZldGNoKGdldE15VmFyKCdxZGJfY29uZmlnJykpKVxcXFxyXFxcXG4gICAgICAgIC5zdGFyQ29sb3IgfHwgXFxcXFxcXCIjZmZhYzJkXFxcXFxcXCI7XFxcXHJcXFxcbiAgICBsZXQgcyA9IFt7XFxcXHJcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwiPGJpZz48c3Ryb25nPlxcXFxcXFwiICsgaS50aXRsZSArIFxcXFxcXFwiPC9zdHJvbmc+PC9iaWc+XFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCJcXFxcclxcXFxuICAgIH0sIHtcXFxcclxcXFxuICAgICAgICB0aXRsZTogaS51c2VyLm5hbWUgKyBcXFxcXFxcIiDnmoTliafor4RcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICBpbWc6IGkudXNlci5hdmF0YXIsXFxcXHJcXFxcbiAgICAgICAgdXJsOiBpLnVzZXIudXJsLFxcXFxyXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImF2YXRhclxcXFxcXFwiXFxcXHJcXFxcbiAgICB9LCB7XFxcXHJcXFxcbiAgICAgICAgdGl0bGU6IChpLnNwb2lsZXIgPyBcXFxcXFxcIjxzbWFsbD48Zm9udCBjb2xvcj0jZjIwYzAwPui/meevh+W9seivhOWPr+iDveacieWJp+mAjzwvZm9udD48L3NtYWxsPjxici8+XFxcXFxcXCIgOiBcXFxcXFxcIlxcXFxcXFwiKSArIChhID8gJzxzbWFsbD7nnIvov4cgPGZvbnQgY29sb3I9JyArIGNvbG9yICsgJz4nICsgYSArIFxcXFxcXFwiPC9mb250Pjxici8+PC9zbWFsbD5cXFxcXFxcIiA6IFxcXFxcXFwiXFxcXFxcXCIpICsgJzxzbWFsbD48Zm9udCBjb2xvcj1cXFxcXFxcImdyZXlcXFxcXFxcIj4nICsgL1xcXFxcXFxcZHs0fS1cXFxcXFxcXGR7MSwyfS1cXFxcXFxcXGR7MSwyfS9nLmV4ZWMoaS5jcmVhdGVfdGltZSkgKyBcXFxcXFxcIjwvZm9udD48L3NtYWxsPlxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiXFxcXHJcXFxcbiAgICB9LCB7XFxcXHJcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwibGluZV9ibGFua1xcXFxcXFwiXFxcXHJcXFxcbiAgICB9LCB7XFxcXHJcXFxcbiAgICAgICAgdGl0bGU6IGkuY29udGVudC5yZXBsYWNlKC88ZGl2XFxcXFxcXFxzKltePl0qPiguKj8pPFxcXFxcXFxcL2Rpdj4vZywgXFxcXFxcXCIkMVxcXFxcXFwiKSArIChpLmlzX29yaWdpbmFsID8gJzxzbWFsbD48Zm9udCBjb2xvcj1cXFxcXFxcImdyZXlcXFxcXFxcIj4mY29weTvmnKzmlofniYjmnYPlvZLor6XkvZzogIXmiYDmnInvvIzku7vkvZXlvaLlvI/ovazovb3or7fogZTns7vkvZzogIXjgII8L2ZvbnQ+PC9zbWFsbD4nIDogXFxcXFxcXCJcXFxcXFxcIiksXFxcXHJcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCJcXFxcclxcXFxuICAgIH1dO1xcXFxyXFxcXG5cXFxcclxcXFxuICAgIHNldEhvbWVSZXN1bHQoe1xcXFxyXFxcXG4gICAgICAgIGRhdGE6IHMuY29uY2F0KG8pXFxcXHJcXFxcbiAgICB9KVxcXFxyXFxcXG59XFxcXHJcXFxcblxcXFxyXFxcXG4vL+WJp+ivhOWbnuWkjemhtemdolxcXFxyXFxcXG5mdW5jdGlvbiBkcmFtYVJldmlld1JlcGx5VmlldyhpZCkge1xcXFxyXFxcXG4gICAgc2V0UGFnZVRpdGxlKCflm57lpI3or6bmg4UnKTtcXFxcclxcXFxuICAgIGxldCB0ID0gZ2V0RG91YmFuUmVzKFxcXFxcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9yZXZpZXcvY29tbWVudC9cXFxcXFxcIiArIGlkICsgXFxcXFxcXCIvcmVwbGllc1xcXFxcXFwiKTtcXFxcclxcXFxuICAgIGxldCBpID0gW107XFxcXHJcXFxcbiAgICB0LnJlcGxpZXMuZm9yRWFjaCgoZSA9PiB7XFxcXHJcXFxcbiAgICAgICAgaS5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGU6IGUuYXV0aG9yLm5hbWUsXFxcXHJcXFxcbiAgICAgICAgICAgIGltZzogZS5hdXRob3IuYXZhdGFyLFxcXFxyXFxcXG4gICAgICAgICAgICB1cmw6IGUuYXV0aG9yLnVybCxcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiYXZhdGFyXFxcXFxcXCJcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgICAgIGkucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlOiAoZS5yZWZfY29tbWVudC5oYXNfcmVmID8gJ+WbnuWkjUA8Zm9udCBjb2xvcj1cXFxcXFxcImJsdWVcXFxcXFxcIj4nICsgZS5yZWZfY29tbWVudC5hdXRob3IubmFtZSArIFxcXFxcXFwiPC9mb250Pu+8mlxcXFxcXFwiIDogXFxcXFxcXCJcXFxcXFxcIikgKyBlLnRleHQsXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiXFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuICAgICAgICBpLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lXFxcXFxcXCJcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgfSkpXFxcXHJcXFxcblxcXFxyXFxcXG4gICAgc2V0SG9tZVJlc3VsdCh7XFxcXHJcXFxcbiAgICAgICAgZGF0YTogaVxcXFxyXFxcXG4gICAgfSlcXFxcclxcXFxufVxcXFxyXFxcXG5cXFxcclxcXFxuLy/nm7jlhbPmjqjojZDpobXpnaJcXFxcclxcXFxuZnVuY3Rpb24gcmVjb21tZW5kYXRpb25zKHR5cGUsIGlkKXtcXFxcclxcXFxuICAgIHNldFBhZ2VUaXRsZSgn55u45YWz5o6o6I2QJyk7XFxcXHJcXFxcbiAgICBsZXQgcmVzID0gZ2V0RG91YmFuUmVzKFxcXFxcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9cXFxcXFxcIisgdHlwZSArIFxcXFxcXFwiL1xcXFxcXFwiICsgaWQgKyBcXFxcXFxcIi9yZWNvbW1lbmRhdGlvbnNcXFxcXFxcIik7XFxcXHJcXFxcbiAgICBsZXQgZGV0YWlsc1ZpZXdDb25maWdzID0gZ2V0Q29uZmlnKCdkZXRhaWxzVmlld0NvbmZpZ3MnKTtcXFxcclxcXFxuICAgIGxldCBpID0gcmVzLm1hcCgoZSA9PiB7XFxcXHJcXFxcbiAgICAgICAgbGV0IHR5cGUgPSBlLnR5cGUsXFxcXHJcXFxcbiAgICAgICAgICAgIGlkID0gZS5pZCxcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGUgPSBlLnRpdGxlO1xcXFxyXFxcXG4gICAgICAgIGxldCB1c2VDb25maWcgPSBkZXRhaWxzVmlld0NvbmZpZ3NbZGV0YWlsc1ZpZXdDb25maWdzLnVzZV0uY29uZmlnO1xcXFxyXFxcXG4gICAgICAgIGxldCB1cmxQYXJhbXMgPSB7fTtcXFxcclxcXFxuICAgICAgICBpZiAodXNlQ29uZmlnLnN0YXJ0c1dpdGgoJ3snKSkge1xcXFxyXFxcXG4gICAgICAgICAgICBldmFsKCd1cmxQYXJhbXMgPSAnICsgdXNlQ29uZmlnKTtcXFxcclxcXFxuICAgICAgICB9IGVsc2Uge1xcXFxyXFxcXG4gICAgICAgICAgICB1cmxQYXJhbXMudXJsID0gJChcXFxcXFxcImhpa2VyOi8vZW1wdHkjbm9IaXN0b3J5IyNpbW1lcnNpdmVUaGVtZSNcXFxcXFxcIiArICc/dHlwZT0nICsgdHlwZSArICcmaWQ9JyArIGlkKS5ydWxlKCh0eXBlLCBpZCwgdGl0bGUsIHVzZUNvbmZpZykgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFxcXFxcXFwicGxheWxpc3RcXFxcXFxcIikge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGRvdUxpc3QoaWQsIE1ZX1BBR0UsIDUwKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgZXZhbCh1c2VDb25maWcpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgICAgICB9LCB0eXBlLCBpZCwgdGl0bGUsIHVzZUNvbmZpZyk7XFxcXHJcXFxcbiAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgIHJldHVybiB7XFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcXFxcclxcXFxuICAgICAgICAgICAgdXJsOiB1cmxQYXJhbXMudXJsLFxcXFxyXFxcXG4gICAgICAgICAgICBleHRyYTogdXJsUGFyYW1zLmV4dHJhLFxcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzMnLFxcXFxyXFxcXG4gICAgICAgICAgICBpbWc6IGUucGljID8gZS5waWMubm9ybWFsICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIiArIGUucGljLm5vcm1hbCA6IGUuY292ZXIudXJsICsgJ0BSZWZlcmVyPScgKyBlLmNvdmVyLnVybCxcXFxcclxcXFxuICAgICAgICAgICAgZGVzYzogZS5udWxsX3JhdGluZ19yZWFzb24gfHwgZS5yYXRpbmcudmFsdWVcXFxcclxcXFxuICAgICAgICB9XFxcXHJcXFxcbiAgICB9KSk7XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgc2V0SG9tZVJlc3VsdCh7XFxcXHJcXFxcbiAgICAgICAgZGF0YTogaVxcXFxyXFxcXG4gICAgfSlcXFxcclxcXFxufVxcXFxyXFxcXG5cXFxcclxcXFxuLy/lvbHniYfor6bmg4XpobXpnaJcXFxcclxcXFxuZnVuY3Rpb24gZGV0YWlsc1ZpZXcodHlwZSwgaWQpIHtcXFxcclxcXFxuICAgIGxldCBpID0gZ2V0RG91YmFuUmVzKFxcXFxcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9cXFxcXFxcIiArIHR5cGUgKyBcXFxcXFxcIi9cXFxcXFxcIiArIGlkKTtcXFxcclxcXFxuICAgIHNldFBhZ2VUaXRsZShpLnRpdGxlKTtcXFxcclxcXFxuICAgIGxldCBpbmZvID0gXFxcXFxcXCJcXFxcXFxcIjtcXFxcclxcXFxuICAgIGlmIChpLmlzX3R2KSB7XFxcXHJcXFxcbiAgICAgICAgaW5mbyA9IFtpLmNvdW50cmllcyA/IGkuY291bnRyaWVzLmpvaW4oXFxcXFxcXCIgXFxcXFxcXCIpIDogbnVsbCwgaS5nZW5yZXMgPyBpLmdlbnJlcy5qb2luKFxcXFxcXFwiIFxcXFxcXFwiKSA6IG51bGwsIGkucHViZGF0ZSA/IGkucHViZGF0ZVswXSArIFxcXFxcXFwi6aaW5pKtXFxcXFxcXCIgOiBudWxsLCBpLmVwaXNvZGVzX2NvdW50ID8gXFxcXFxcXCLlhbFcXFxcXFxcIiArIGkuZXBpc29kZXNfY291bnQgKyBcXFxcXFxcIumbhlxcXFxcXFwiIDogbnVsbCwgaS5kdXJhdGlvbnMgPyBcXFxcXFxcIuWNlembhueJh+mVv1xcXFxcXFwiICsgaS5kdXJhdGlvbnMgOiBudWxsXS5maWx0ZXIoKGUgPT4gbnVsbCAhPT0gZSkpLmpvaW4oXFxcXFxcXCIgLyBcXFxcXFxcIik7XFxcXHJcXFxcbiAgICB9IGVsc2Uge1xcXFxyXFxcXG4gICAgICAgIGluZm8gPSBbaS5jb3VudHJpZXMgPyBpLmNvdW50cmllcy5qb2luKFxcXFxcXFwiIFxcXFxcXFwiKSA6IG51bGwsIGkuZ2VucmVzID8gaS5nZW5yZXMuam9pbihcXFxcXFxcIiBcXFxcXFxcIikgOiBudWxsLCBpLnB1YmRhdGUgPyBpLnB1YmRhdGVbMF0gKyBcXFxcXFxcIummluaSrVxcXFxcXFwiIDogbnVsbCwgaS5kdXJhdGlvbnMgPyBcXFxcXFxcIueJh+mVv1xcXFxcXFwiICsgaS5kdXJhdGlvbnMgOiBudWxsXS5maWx0ZXIoKGUgPT4gbnVsbCAhPT0gZSkpLmpvaW4oXFxcXFxcXCIgLyBcXFxcXFxcIik7XFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBsZXQgaW5mb0l0ZW1zID0gW3tcXFxcclxcXFxuICAgICAgICB0aXRsZTogaS50aXRsZSArIFxcXFxcXFwiXFxcXFxcXFxuXFxcXFxcXCIgKyBpLm9yaWdpbmFsX3RpdGxlICsgXFxcXFxcXCIoXFxcXFxcXCIgKyBpLnllYXIgKyBcXFxcXFxcIilcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICBkZXNjOiBpbmZvIHx8IGkuY2FyZF9zdWJ0aXRsZSxcXFxcclxcXFxuICAgICAgICBpbWc6IGkucGljLm5vcm1hbCArIFxcXFxcXFwiQFJlZmVyZXI9XFxcXFxcXCIgKyBpLnBpYy5ub3JtYWwsXFxcXHJcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwibW92aWVfMV92ZXJ0aWNhbF9waWNfYmx1clxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgIHVybDogJ2hpa2VyOi8vcGFnZS9zZXR0aW5nUGFnZT92aWV3PWFuYWx5c2lzU2V0dGluZ01vZHVsZSNub0hpc3RvcnkjJyxcXFxcclxcXFxuICAgICAgICBleHRyYToge1xcXFxyXFxcXG4gICAgICAgICAgICBuZXdXaW5kb3c6IHRydWUsXFxcXHJcXFxcbiAgICAgICAgICAgIHdpbmRvd0lkOiAn6auY57qn5Yqf6IO9JyxcXFxcclxcXFxuICAgICAgICAgICAgZ3JhZGllbnQ6IHRydWVcXFxcclxcXFxuICAgICAgICB9XFxcXHJcXFxcbiAgICB9XTtcXFxcclxcXFxuXFxcXHJcXFxcbiAgICBsZXQgcmF0aW5nID0gXFxcXFxcXCJcXFxcXFxcIjtcXFxcclxcXFxuICAgIGlmIChpLnJhdGluZykge1xcXFxyXFxcXG4gICAgICAgIHJhdGluZyA9IGNvbXB1dGVSYXRpbmcoaS5yYXRpbmcubWF4LCBpLnJhdGluZy52YWx1ZSk7XFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBsZXQgcmF0aW5nSXRlbXMgPSBbXTtcXFxcclxcXFxuICAgIGxldCBjb2xvciA9IGdldENvbmZpZygnc3RhckNvbG9yJyk7XFxcXHJcXFxcbiAgICBsZXQgcmF0aW5nVGl0bGUgPSAnJ1xcXFxyXFxcXG4gICAgaWYgKHJhdGluZykge1xcXFxyXFxcXG4gICAgICAgIHJhdGluZ1RpdGxlID0gJ+ixhueTo+ivhOWIhuKEoicuYmlnKCkuYm9sZCgpICsgJzxicj4nICsgcmF0aW5nLmZvbnRjb2xvcihjb2xvcikgKyAnJm5ic3A7Jm5ic3A7JyArIChpLnJhdGluZy52YWx1ZS50b0ZpeGVkKDEpICsgJ+WIhicpLmJpZygpLmJvbGQoKTtcXFxcclxcXFxuICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgcmF0aW5nVGl0bGUgPSAn5pqC5peg6K+E5YiGJy5iaWcoKS5ib2xkKCkgKyAnPGJyPicgKyAn54K55oiR5p+l55yL5b2x54mH5L+h5oGvJy5mb250Y29sb3IoJ2dyZXknKTtcXFxcclxcXFxuICAgIH1cXFxcclxcXFxuICAgIHJhdGluZ0l0ZW1zID0gW3tcXFxcclxcXFxuICAgICAgICB0aXRsZTogJ+KAnOKAnOKAneKAnScgKyByYXRpbmdUaXRsZSxcXFxcclxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0X2NlbnRlcl8xXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgZXh0cmE6IHtcXFxcclxcXFxuICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlXFxcXHJcXFxcbiAgICAgICAgfSxcXFxcclxcXFxuICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkvIy8kcGFnZXtmeXBhZ2V9I25vSGlzdG9yeSMnKS5ydWxlKCh0eXBlLCBpZCwgcmF0aW5nQ291bnQpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcXFxyXFxcXG4gICAgICAgICAgICByYXRpbmcodHlwZSwgaWQsIHJhdGluZ0NvdW50KTtcXFxcclxcXFxuICAgICAgICB9LCBpLnN1YnR5cGUsIGkuaWQsIGkucmF0aW5nID8gaS5yYXRpbmcuY291bnQgOiAwKVxcXFxyXFxcXG4gICAgfV07XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgbGV0IHJlbGF0ZWRJdGVtcyA9IFt7XFxcXHJcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi5Ymn54WnXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgaW1nOiBcXFxcXFxcImh0dHBzOi8vZ2l0Y29kZS5uZXQvcXFfNDE4NDY3NTYvaGlrZXIvLS9yYXcvbWFzdGVyL2ltZy/liafnhacucG5nXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5LyMvJHBhZ2V7ZnlwYWdlfSNub0hpc3RvcnkjJykucnVsZSgodCkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxcXHJcXFxcbiAgICAgICAgICAgIHN0aWxsc0xpc3QodFswXSwgdFsxXSk7XFxcXHJcXFxcbiAgICAgICAgfSwgW2kuc3VidHlwZSwgaS5pZF0pLFxcXFxyXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImljb25fcm91bmRfc21hbGxfNFxcXFxcXFwiXFxcXHJcXFxcbiAgICB9LCB7XFxcXHJcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi5ryU6IGMXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgaW1nOiBcXFxcXFxcImh0dHBzOi8vZ2l0Y29kZS5uZXQvcXFfNDE4NDY3NTYvaGlrZXIvLS9yYXcvbWFzdGVyL2ltZy/mvJTogYwucG5nXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5LyMvJHBhZ2V7ZnlwYWdlfSNub0hpc3RvcnkjJykucnVsZSgodCkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxcXHJcXFxcbiAgICAgICAgICAgIGNyZWRpdHModFswXSwgdFsxXSk7XFxcXHJcXFxcbiAgICAgICAgfSwgW2kuc3VidHlwZSwgaS5pZF0pLFxcXFxyXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImljb25fcm91bmRfc21hbGxfNFxcXFxcXFwiXFxcXHJcXFxcbiAgICB9LCB7XFxcXHJcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi55+t6K+EXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgaW1nOiBcXFxcXFxcImh0dHBzOi8vZ2l0Y29kZS5uZXQvcXFfNDE4NDY3NTYvaGlrZXIvLS9yYXcvbWFzdGVyL2ltZy/nn63or4QucG5nXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5LyMvJHBhZ2V7ZnlwYWdlfSNub0hpc3RvcnkjJykucnVsZSgodCkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxcXHJcXFxcbiAgICAgICAgICAgIHNob3J0Q29tbWVudExpc3QodFswXSwgdFsxXSk7XFxcXHJcXFxcbiAgICAgICAgfSwgW2kuc3VidHlwZSwgaS5pZF0pLFxcXFxyXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImljb25fcm91bmRfc21hbGxfNFxcXFxcXFwiXFxcXHJcXFxcbiAgICB9LCB7XFxcXHJcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi5Ymn6K+EXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgaW1nOiBcXFxcXFxcImh0dHBzOi8vZ2l0Y29kZS5uZXQvcXFfNDE4NDY3NTYvaGlrZXIvLS9yYXcvbWFzdGVyL2ltZy/liafor4QucG5nXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5LyMvJHBhZ2V7ZnlwYWdlfSNub0hpc3RvcnkjJykucnVsZSgodCkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxcXHJcXFxcbiAgICAgICAgICAgIGRyYW1hUmV2aWV3TGlzdCh0WzBdLCB0WzFdKTtcXFxcclxcXFxuICAgICAgICB9LCBbaS5zdWJ0eXBlLCBpLmlkXSksXFxcXHJcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiaWNvbl9yb3VuZF9zbWFsbF80XFxcXFxcXCJcXFxcclxcXFxuICAgIH1dO1xcXFxyXFxcXG5cXFxcclxcXFxuICAgIGxldCBpbnRyb0l0ZW1zID0gW107XFxcXHJcXFxcbiAgICBpZiAoaS5pbnRybykge1xcXFxyXFxcXG4gICAgICAgIGludHJvSXRlbXMgPSBbe1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLigJzigJzigJ3igJ08YmlnPjxzdHJvbmc+5Ymn5oOF566A5LuLPC9zdHJvbmc+PC9iaWc+XFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfY2VudGVyXzFcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcXFxyXFxcXG4gICAgICAgICAgICB9LFxcXFxyXFxcXG4gICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5J1xcXFxyXFxcXG4gICAgICAgIH0sIHtcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwiJm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7XFxcXFxcXCIgKyBpLmludHJvLnJlcGxhY2UoL1xcXFxcXFxcbi9nLCBcXFxcXFxcIjxici8+Jm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7XFxcXFxcXCIpLnJlcGxhY2UoL1xcXFxcXFxccy9nLCBcXFxcXFxcIiBcXFxcXFxcIikucmVwbGFjZSgvXFxcXFxcXFx0L2csIFxcXFxcXFwiIFxcXFxcXFwiKSxcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCJcXFxcclxcXFxuICAgICAgICB9XVxcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG5cXFxcclxcXFxuICAgIGxldCB2aWRlb1JlbGF0ZWRJdGVtcyA9IFtdO1xcXFxyXFxcXG4gICAgaWYgKGkudHJhaWxlcikge1xcXFxyXFxcXG4gICAgICAgIHZpZGVvUmVsYXRlZEl0ZW1zLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLigJzigJzigJ3igJ08YmlnPjxzdHJvbmc+6aKE5ZGKPC9zdHJvbmc+PC9iaWc+XFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfY2VudGVyXzFcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcXFxyXFxcXG4gICAgICAgICAgICB9LFxcXFxyXFxcXG4gICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5J1xcXFxyXFxcXG4gICAgICAgIH0pO1xcXFxyXFxcXG4gICAgICAgIHZpZGVvUmVsYXRlZEl0ZW1zLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogaS50cmFpbGVyLnRpdGxlLFxcXFxyXFxcXG4gICAgICAgICAgICBpbWc6IGkudHJhaWxlci5jb3Zlcl91cmwsXFxcXHJcXFxcbiAgICAgICAgICAgIHVybDogaS50cmFpbGVyLnZpZGVvX3VybCxcXFxcclxcXFxuICAgICAgICAgICAgZGVzYzogaS50cmFpbGVyLnN1YmplY3RfdGl0bGUgKyBcXFxcXFxcIuKAolxcXFxcXFwiICsgaS50cmFpbGVyLmNyZWF0ZV90aW1lLFxcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJtb3ZpZV8yXFxcXFxcXCJcXFxcclxcXFxuICAgICAgICB9KTtcXFxcclxcXFxuICAgICAgICB2aWRlb1JlbGF0ZWRJdGVtcy5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGU6ICfmn6XnnIvmm7TlpJonLFxcXFxyXFxcXG4gICAgICAgICAgICBpbWc6IFxcXFxcXFwiaHR0cHM6Ly9naXRjb2RlLm5ldC9xcV80MTg0Njc1Ni9oaWtlci8tL3Jhdy9tYXN0ZXIvaW1nL21vcmUucG5nXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcIm1vdmllXzJcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5LyMvJHBhZ2V7ZnlwYWdlfSNub0hpc3RvcnkjJykucnVsZSgodCkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgdHJhaWxlcnModFswXSwgdFsxXSk7XFxcXHJcXFxcbiAgICAgICAgICAgIH0sIFtpLnN1YnR5cGUsIGkuaWRdKSxcXFxcclxcXFxuICAgICAgICB9KTtcXFxcclxcXFxuICAgIH1cXFxcclxcXFxuICAgIGlmIChpLnZpZGVvKSB7XFxcXHJcXFxcbiAgICAgICAgdmlkZW9SZWxhdGVkSXRlbXMucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuKAnOKAnOKAneKAnTxiaWc+PHN0cm9uZz7op4bpopHor4Torro8L3N0cm9uZz48L2JpZz5cXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF9jZW50ZXJfMVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlXFxcXHJcXFxcbiAgICAgICAgICAgIH0sXFxcXHJcXFxcbiAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknXFxcXHJcXFxcbiAgICAgICAgfSk7XFxcXHJcXFxcbiAgICAgICAgdmlkZW9SZWxhdGVkSXRlbXMucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlOiBpLnZpZGVvLnRpdGxlLFxcXFxyXFxcXG4gICAgICAgICAgICBpbWc6IGkudmlkZW8uY292ZXJfdXJsICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIiArIGkudmlkZW8uY292ZXJfdXJsLFxcXFxyXFxcXG4gICAgICAgICAgICB1cmw6IGkudmlkZW8udmlkZW9fdXJsLFxcXFxyXFxcXG4gICAgICAgICAgICBkZXNjOiBpLnZpZGVvLmF1dGhvci5uYW1lICsgXFxcXFxcXCLigKJcXFxcXFxcIiArIGkudmlkZW8uY3JlYXRlX3RpbWUsXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcIm1vdmllXzJcXFxcXFxcIlxcXFxyXFxcXG4gICAgICAgIH0pO1xcXFxyXFxcXG4gICAgICAgIHZpZGVvUmVsYXRlZEl0ZW1zLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogJ+afpeeci+abtOWkmicsXFxcXHJcXFxcbiAgICAgICAgICAgIGltZzogXFxcXFxcXCJodHRwczovL2dpdGNvZGUubmV0L3FxXzQxODQ2NzU2L2hpa2VyLy0vcmF3L21hc3Rlci9pbWcvbW9yZS5wbmdcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwibW92aWVfMlxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkvIy8kcGFnZXtmeXBhZ2V9I25vSGlzdG9yeSMnKS5ydWxlKCh0KSA9PiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB2aWRlb0NvbW1lbnQodFswXSwgdFsxXSk7XFxcXHJcXFxcbiAgICAgICAgICAgIH0sIFtpLnN1YnR5cGUsIGkuaWRdKSxcXFxcclxcXFxuICAgICAgICB9KTtcXFxcclxcXFxuICAgIH1cXFxcclxcXFxuXFxcXHJcXFxcbiAgICBsZXQgY29uZmlnID0gSlNPTi5wYXJzZShmZXRjaChnZXRNeVZhcigncWRiX2NvbmZpZycpKSk7XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgbGV0IGFuYWx5c2lzQ29uZmlncyA9IGdldENvbmZpZygnYW5hbHlzaXNDb25maWdzJywgY29uZmlnKTtcXFxcclxcXFxuICAgIGxldCBleHRyYUNvbmZpZyA9IGFuYWx5c2lzQ29uZmlnc1thbmFseXNpc0NvbmZpZ3MudXNlXS5leHRyYSB8fCAne30nO1xcXFxyXFxcXG4gICAgbGV0IGV4dHJhID0ge307XFxcXHJcXFxcbiAgICB0cnkge1xcXFxyXFxcXG4gICAgICAgIGlmIChleHRyYUNvbmZpZy5zdGFydHNXaXRoKCd7JykpIGV2YWwoJ2V4dHJhPScgKyBleHRyYUNvbmZpZyk7XFxcXHJcXFxcbiAgICB9IGNhdGNoIChlKSB7fVxcXFxyXFxcXG4gICAgbGV0IHZpZGVvSXRlbXMgPSBbXTtcXFxcclxcXFxuICAgIHZpZGVvVXJsc01vZHVsZSh2aWRlb0l0ZW1zLCB0eXBlLCBpZCwgWydpY29uXzInLCAnaWNvbl9zbWFsbF80J10sIHBhcnNlVmlkZW9VcmxMYXp5LCBpLCBleHRyYSk7XFxcXHJcXFxcbiAgICBpZiAodmlkZW9JdGVtcy5sZW5ndGggPiAwKSB7XFxcXHJcXFxcbiAgICAgICAgdmlkZW9JdGVtcy51bnNoaWZ0KHtcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi4oCc4oCc4oCd4oCdPGJpZz48c3Ryb25nPuWcqOe6v+inguecizwvc3Ryb25nPjwvYmlnPlxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0X2NlbnRlcl8xXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXFxcclxcXFxuICAgICAgICAgICAgfSxcXFxcclxcXFxuICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9lbXB0eSdcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgfSBlbHNlIHtcXFxcclxcXFxuICAgICAgICB2aWRlb0l0ZW1zLnVuc2hpZnQoe1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLigJzigJzigJ3igJ08YmlnPjxzdHJvbmc+5bCa5peg54mH5rqQPC9zdHJvbmc+PC9iaWc+XFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfY2VudGVyXzFcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcXFxyXFxcXG4gICAgICAgICAgICB9LFxcXFxyXFxcXG4gICAgICAgICAgICB1cmw6ICd0b2FzdDovL+ecn+eahOayoeeJh+a6kCdcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG5cXFxcclxcXFxuICAgIGxldCBxdWlja1NlYXJjaENvbmZpZ3MgPSBnZXRDb25maWcoJ3F1aWNrU2VhcmNoQ29uZmlncycsIGNvbmZpZyk7XFxcXHJcXFxcbiAgICBsZXQgcXVpY2tTZWFyY2hJdGVtcyA9IFtdO1xcXFxyXFxcXG4gICAgcXVpY2tTZWFyY2hDb25maWdzLm9yZGVyLmZvckVhY2gocXVpY2tTZWFyY2hJdGVtID0+IHtcXFxcclxcXFxuICAgICAgICBpZiAocXVpY2tTZWFyY2hDb25maWdzW3F1aWNrU2VhcmNoSXRlbV0pIHtcXFxcclxcXFxuICAgICAgICAgICAgcXVpY2tTZWFyY2hJdGVtcy5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBxdWlja1NlYXJjaEl0ZW0sXFxcXHJcXFxcbiAgICAgICAgICAgICAgICBpbWc6IHF1aWNrU2VhcmNoQ29uZmlnc1txdWlja1NlYXJjaEl0ZW1dLnBpYyxcXFxcclxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBxdWlja1NlYXJjaENvbmZpZ3MubW9kZSB8fCAnaWNvbl9zbWFsbF80JyxcXFxcclxcXFxuICAgICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vc2VhcmNoP3M9JyArIGkudGl0bGUgKyAnJnJ1bGU9JyArIHF1aWNrU2VhcmNoQ29uZmlnc1txdWlja1NlYXJjaEl0ZW1dLm5hbWVcXFxcclxcXFxuICAgICAgICAgICAgfSlcXFxcclxcXFxuICAgICAgICB9XFxcXHJcXFxcbiAgICB9KVxcXFxyXFxcXG4gICAgaWYgKHF1aWNrU2VhcmNoSXRlbXMubGVuZ3RoID4gMCkge1xcXFxyXFxcXG4gICAgICAgIHF1aWNrU2VhcmNoSXRlbXMudW5zaGlmdCh7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ+KAnOKAnOKAneKAnTxzdHJvbmc+PGJpZz7lv6vpgJ/mkJzntKI8L2JpZz48L3N0cm9uZz4nLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJyxcXFxcclxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlXFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9LFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9lbXB0eSdcXFxcclxcXFxuICAgICAgICAgICAgfSlcXFxcclxcXFxuICAgICAgICAgICAgLypxdWlja1NlYXJjaEl0ZW1zLnVuc2hpZnQoe1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xcXFxyXFxcXG4gICAgICAgICAgICB9KSovXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgc2V0SG9tZVJlc3VsdCh7XFxcXHJcXFxcbiAgICAgICAgZGF0YTogaW5mb0l0ZW1zLmNvbmNhdChyYXRpbmdJdGVtcylcXFxcclxcXFxuICAgICAgICAgICAgLmNvbmNhdChyZWxhdGVkSXRlbXMpXFxcXHJcXFxcbiAgICAgICAgICAgIC5jb25jYXQoe1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xcXFxyXFxcXG4gICAgICAgICAgICB9KVxcXFxyXFxcXG4gICAgICAgICAgICAuY29uY2F0KHF1aWNrU2VhcmNoSXRlbXMpXFxcXHJcXFxcbiAgICAgICAgICAgIC5jb25jYXQoe1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xcXFxyXFxcXG4gICAgICAgICAgICB9KVxcXFxyXFxcXG4gICAgICAgICAgICAuY29uY2F0KHZpZGVvSXRlbXMpXFxcXHJcXFxcbiAgICAgICAgICAgIC5jb25jYXQoe1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xcXFxyXFxcXG4gICAgICAgICAgICB9KVxcXFxyXFxcXG4gICAgICAgICAgICAuY29uY2F0KHZpZGVvUmVsYXRlZEl0ZW1zKVxcXFxyXFxcXG4gICAgICAgICAgICAuY29uY2F0KHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZSdcXFxcclxcXFxuICAgICAgICAgICAgfSlcXFxcclxcXFxuICAgICAgICAgICAgLmNvbmNhdChpbnRyb0l0ZW1zKVxcXFxyXFxcXG4gICAgICAgICAgICAuY29uY2F0KHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZScsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICBleHRyYTp7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgIGlkOiAncmVjb21tZW5kYXRpb25zJ1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgICAgICB9KVxcXFxyXFxcXG4gICAgICAgICAgICAuY29uY2F0KHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMScsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ+KAnOKAnOKAneKAnTxzbWFsbD48Zm9udCBjb2xvcj0jODcxZjc4PuS7peS4iuaVsOaNruadpea6kOS6juixhueTo++8jOWmguaCqOWWnOasou+8jOivt+S4i+i9veWumOaWuWFwcDwvZm9udD48L3NtYWxsPicsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICBkZXNjOiAn4oCc4oCc4oCd4oCdPHNtYWxsPjxmb250IGNvbG9yPSNmMjBjMDA+5q2k6KeE5YiZ5LuF6ZmQ5a2m5Lmg5Lqk5rWB5L2/55So77yM6K+35LqO5a+85YWl5ZCOMjTlsI/ml7blhoXliKDpmaTvvIzku7vkvZXnu4Tnu4fmiJbkuKrkurrkuI3lvpfku6Xku7vkvZXmlrnlvI/mlrnms5XkvKDmkq3mraTop4TliJnnmoTmlbTkvZPmiJbpg6jliIbvvIE8L2ZvbnQ+PC9zbWFsbD4nLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgdXJsOiAnaHR0cHM6Ly9tb3ZpZS5kb3ViYW4uY29tL3N1YmplY3QvJyArIGlkICsgJy8nLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXFxcclxcXFxuICAgICAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICAgICAgfSlcXFxcclxcXFxuICAgIH0pXFxcXHJcXFxcbiAgICBiZShbe1xcXFxyXFxcXG4gICAgICAgIGZ1bmM6IGZ1bmN0aW9uKG9iail7XFxcXHJcXFxcbiAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtcXFxcclxcXFxuICAgICAgICAgICAgbGV0IHJlcyA9IGdldERvdWJhblJlcyhvYmoudXJsKTtcXFxcclxcXFxuICAgICAgICAgICAgXFxcXHJcXFxcbiAgICAgICAgICAgIGxldCBkZXRhaWxzVmlld0NvbmZpZ3MgPSBnZXRDb25maWcoJ2RldGFpbHNWaWV3Q29uZmlncycpO1xcXFxyXFxcXG4gICAgICAgICAgICBsZXQgbCA9IFtyZXNbMF0scmVzWzFdLHJlc1syXV07XFxcXHJcXFxcbiAgICAgICAgICAgIGxldCBpID0gbC5tYXAoKGUgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgbGV0IHR5cGUgPSBlLnR5cGUsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgaWQgPSBlLmlkLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlID0gZS50aXRsZTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGxldCB1c2VDb25maWcgPSBkZXRhaWxzVmlld0NvbmZpZ3NbZGV0YWlsc1ZpZXdDb25maWdzLnVzZV0uY29uZmlnO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgbGV0IHVybFBhcmFtcyA9IHt9O1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgaWYgKHVzZUNvbmZpZy5zdGFydHNXaXRoKCd7JykpIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBldmFsKCd1cmxQYXJhbXMgPSAnICsgdXNlQ29uZmlnKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgdXJsUGFyYW1zLnVybCA9ICQoXFxcXFxcXCJoaWtlcjovL2VtcHR5I25vSGlzdG9yeSMjaW1tZXJzaXZlVGhlbWUjXFxcXFxcXCIgKyAnP3R5cGU9JyArIHR5cGUgKyAnJmlkPScgKyBpZCkucnVsZSgodHlwZSwgaWQsIHRpdGxlLCB1c2VDb25maWcpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gXFxcXFxcXCJwbGF5bGlzdFxcXFxcXFwiKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3VMaXN0KGlkLCBNWV9QQUdFLCA1MCk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmFsKHVzZUNvbmZpZyk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICB9LCB0eXBlLCBpZCwgdGl0bGUsIHVzZUNvbmZpZyk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHVybFBhcmFtcy51cmwsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHVybFBhcmFtcy5leHRyYSxcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBpbWc6IGUucGljID8gZS5waWMubm9ybWFsICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIiArIGUucGljLm5vcm1hbCA6IGUuY292ZXIudXJsICsgJ0BSZWZlcmVyPScgKyBlLmNvdmVyLnVybCxcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiBlLm51bGxfcmF0aW5nX3JlYXNvbiB8fCBlLnJhdGluZy52YWx1ZVxcXFxyXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgICAgICB9KSk7XFxcXHJcXFxcbiAgICAgICAgICAgIGFkZEl0ZW1BZnRlcigncmVjb21tZW5kYXRpb25zJywgaVsyXSk7XFxcXHJcXFxcbiAgICAgICAgICAgIGFkZEl0ZW1BZnRlcigncmVjb21tZW5kYXRpb25zJywgaVsxXSk7XFxcXHJcXFxcbiAgICAgICAgICAgIGFkZEl0ZW1BZnRlcigncmVjb21tZW5kYXRpb25zJywgaVswXSk7XFxcXHJcXFxcbiAgICAgICAgICAgIGFkZEl0ZW1BZnRlcigncmVjb21tZW5kYXRpb25zJywge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi4oCc4oCc4oCd4oCdPGJpZz48c3Ryb25nPuebuOWFs+aOqOiNkDwvc3Ryb25nPjwvYmlnPlxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF9jZW50ZXJfMVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5LyNub0hpc3RvcnkjJykucnVsZSgodCkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICByZWNvbW1lbmRhdGlvbnModFswXSwgdFsxXSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9LCBbb2JqLnR5cGUsIG9iai5pZF0pLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXFxcclxcXFxuICAgICAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICAgICAgfSlcXFxcclxcXFxuICAgICAgICAgICAgdXBkYXRlSXRlbSgncmVjb21tZW5kYXRpb25zJyx7Y29sX3R5cGU6ICdsaW5lJyxleHRyYTp7aWQ6J25vb29wJ319KVxcXFxyXFxcXG4gICAgICAgIH0sXFxcXHJcXFxcbiAgICAgICAgcGFyYW06IHtcXFxcclxcXFxuICAgICAgICAgICAgdXJsOiBcXFxcXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvXFxcXFxcXCIgKyB0eXBlICsgXFxcXFxcXCIvXFxcXFxcXCIgKyBpZCArIFxcXFxcXFwiL3JlY29tbWVuZGF0aW9uc1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICB0eXBlOiB0eXBlLFxcXFxyXFxcXG4gICAgICAgICAgICBpZDogaWRcXFxcclxcXFxuICAgICAgICB9XFxcXHJcXFxcbiAgICB9XSlcXFxcclxcXFxufVxcXFxyXFxcXG5cXFxcclxcXFxuLy/mjqjojZBcXFxcclxcXFxuZnVuY3Rpb24gZmluZExpc3QocGFnZSwgY291bnQpIHtcXFxcclxcXFxuICAgIGlmICghZ2V0TXlWYXIoJ2ZpbmRMaXN0JykpIHB1dE15VmFyKCdmaW5kTGlzdCcsICd7XFxcXFxcXCJpdGVtXFxcXFxcXCI6XFxcXFxcXCJtb3ZpZVxcXFxcXFwiLFxcXFxcXFwicGxheWFibGVcXFxcXFxcIjpcXFxcXFxcIjBcXFxcXFxcIixcXFxcXFxcInNjb3JlXFxcXFxcXCI6XFxcXFxcXCIwLDEwXFxcXFxcXCJ9Jyk7XFxcXHJcXFxcbiAgICBsZXQgYSA9IFtdO1xcXFxyXFxcXG4gICAgbGV0IHRlbXAgPSBKU09OLnBhcnNlKGdldE15VmFyKCdmaW5kTGlzdCcpKTtcXFxcclxcXFxuICAgIGxldCBjb2xvciA9IGdldENvbmZpZygnY2hvb3NlQ29sb3InKTtcXFxcclxcXFxuXFxcXHJcXFxcbiAgICBsZXQgaXRlbXMgPSB7XFxcXHJcXFxcbiAgICAgICAg55S15b2xOiAnbW92aWUnLFxcXFxyXFxcXG4gICAgICAgIOeUteinhuWJpzogJ3R2J1xcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG4gICAgZm9yIChpIGluIGl0ZW1zKSB7XFxcXHJcXFxcbiAgICAgICAgYS5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGU6IHRlbXAuaXRlbSA9PT0gaXRlbXNbaV0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIGkgKyAnIDwvZm9udD48L2I+JyA6IGksXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxcXHJcXFxcbiAgICAgICAgICAgIHVybDogJCgnaGlrZXI6IC8vZW1wdHkjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChlKSA9PiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2ZpbmRMaXN0JykpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgdGVtcC5pdGVtID0gZTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiZmluZExpc3RcXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkodGVtcCkpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcclxcXFxuICAgICAgICAgICAgfSwgaXRlbXNbaV0pXFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuICAgIH1cXFxcclxcXFxuXFxcXHJcXFxcbiAgICBhLnB1c2goe1xcXFxyXFxcXG4gICAgICAgIGNvbF90eXBlOiAnYmxhbmtfYmxvY2snXFxcXHJcXFxcbiAgICB9KVxcXFxyXFxcXG5cXFxcclxcXFxuICAgIGxldCBwbGF5YWJsZSA9IHtcXFxcclxcXFxuICAgICAgICDlhajpg6jlvbHniYc6ICcwJyxcXFxcclxcXFxuICAgICAgICDku4XmnInniYfmupA6ICcxJ1xcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG4gICAgZm9yIChsZXQgciBpbiBwbGF5YWJsZSkge1xcXFxyXFxcXG4gICAgICAgIGEucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlOiB0ZW1wLnBsYXlhYmxlID09IHBsYXlhYmxlW3JdID8gJ+KAnOKAnOKAneKAnTxiPiA8Zm9udCBjb2xvcj0nICsgY29sb3IgKyAnPicgKyByICsgJyA8L2ZvbnQ+PC9iPicgOiByLFxcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcXFxyXFxcXG4gICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOiAvL2VtcHR5I25vTG9hZGluZyMnKS5sYXp5UnVsZSgoZSkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgbGV0IHRlbXAgPSBKU09OLnBhcnNlKGdldE15VmFyKCdmaW5kTGlzdCcpKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHRlbXAucGxheWFibGUgPSBlO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCJmaW5kTGlzdFxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcXFxyXFxcXG4gICAgICAgICAgICB9LCBwbGF5YWJsZVtyXSlcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG5cXFxcclxcXFxuICAgIGEucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ08Yj4gPGZvbnQgY29sb3I9JyArIGNvbG9yICsgJz7or4TliIbljLrpl7Q6JyArIHRlbXAuc2NvcmUucmVwbGFjZSgnLCcsICctJykgKyAnIDwvZm9udD48L2I+JyxcXFxcclxcXFxuICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcXFxyXFxcXG4gICAgICAgIHVybDogJCh0ZW1wLnNjb3JlLnJlcGxhY2UoJywnLCAnLScpLCAn6K+E5YiG5bqU5ZyoMC0xMOS5i+mXtCcpLmlucHV0KCgpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgbGV0IHRlbXAgPSBKU09OLnBhcnNlKGdldE15VmFyKCdmaW5kTGlzdCcpKTtcXFxcclxcXFxuICAgICAgICAgICAgbGV0IGlucHV0cyA9IGlucHV0LnNwbGl0KCctJyk7XFxcXHJcXFxcbiAgICAgICAgICAgIGlmIChpbnB1dHMubGVuZ3RoID09IDIgJiYgaW5wdXRzLmV2ZXJ5KGUgPT4gZSA+PSAwICYmIGUgPD0gMTApICYmIHBhcnNlRmxvYXQoaW5wdXRzWzBdKSA8IGlucHV0c1sxXSkge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgdGVtcC5zY29yZSA9IGlucHV0LnJlcGxhY2UoJy0nLCAnLCcpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCJmaW5kTGlzdFxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcXFxyXFxcXG4gICAgICAgICAgICB9IGVsc2Uge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+ivt+ato+ehrui+k+WFpSdcXFxcclxcXFxuICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgIH0pXFxcXHJcXFxcbiAgICB9KVxcXFxyXFxcXG5cXFxcclxcXFxuICAgIGxldCBzID0gZ2V0RG91YmFuUmVzKFxcXFxcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9cXFxcXFxcIiArIHRlbXAuaXRlbSArIFxcXFxcXFwiL3JlY29tbWVuZFxcXFxcXFwiICsgJz9wbGF5YWJsZT0nICsgdGVtcC5wbGF5YWJsZSArICcmc2NvcmVfcmFuZ2U9JyArIHRlbXAuc2NvcmUgKyAocGFnZSA/IFxcXFxcXFwiJnN0YXJ0PVxcXFxcXFwiICsgKHBhZ2UgLSAxKSAqIGNvdW50ICsgXFxcXFxcXCImY291bnQ9XFxcXFxcXCIgKyBjb3VudCA6IFxcXFxcXFwiJnN0YXJ0PTAmY291bnQ9OFxcXFxcXFwiKSk7XFxcXHJcXFxcbiAgICBsZXQgbCA9IHMuaXRlbXM7XFxcXHJcXFxcbiAgICBsID0gbC5maWx0ZXIoZSA9PiBlLnR5cGUgIT09IFxcXFxcXFwiYWRcXFxcXFxcIiAmJiBlLnR5cGUgIT09IFxcXFxcXFwidGFnc1xcXFxcXFwiKTtcXFxcclxcXFxuXFxcXHJcXFxcbiAgICBsZXQgZGV0YWlsc1ZpZXdDb25maWdzID0gZ2V0Q29uZmlnKCdkZXRhaWxzVmlld0NvbmZpZ3MnKTtcXFxcclxcXFxuICAgIGxldCBpID0gbC5tYXAoKGUgPT4ge1xcXFxyXFxcXG4gICAgICAgIGxldCB0eXBlID0gZS50eXBlLFxcXFxyXFxcXG4gICAgICAgICAgICBpZCA9IGUuaWQsXFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlID0gZS5zdWJ0aXRsZSB8fCBlLnRpdGxlO1xcXFxyXFxcXG4gICAgICAgIGxldCBiYXNlVXJsID0gZS50eXBlID09PSBcXFxcXFxcInBsYXlsaXN0XFxcXFxcXCIgPyAnaGlrZXI6Ly9lbXB0eS8kcGFnZXtmeXBhZ2V9JyA6ICdoaWtlcjovL2VtcHR5I2ltbWVyc2l2ZVRoZW1lIyc7XFxcXHJcXFxcbiAgICAgICAgbGV0IHVzZUNvbmZpZyA9IGRldGFpbHNWaWV3Q29uZmlnc1tkZXRhaWxzVmlld0NvbmZpZ3MudXNlXS5jb25maWc7XFxcXHJcXFxcbiAgICAgICAgbGV0IHVybFBhcmFtcyA9IHt9O1xcXFxyXFxcXG4gICAgICAgIGlmICh1c2VDb25maWcuc3RhcnRzV2l0aCgneycpKSB7XFxcXHJcXFxcbiAgICAgICAgICAgIGV2YWwoJ3VybFBhcmFtcyA9ICcgKyB1c2VDb25maWcpO1xcXFxyXFxcXG4gICAgICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgICAgIHVybFBhcmFtcy51cmwgPSAkKGJhc2VVcmwgKyBcXFxcXFxcIiNub0hpc3RvcnkjXFxcXFxcXCIgKyAnP3R5cGU9JyArIHR5cGUgKyAnJmlkPScgKyBpZCkucnVsZSgodHlwZSwgaWQsIHRpdGxlLCB1c2VDb25maWcpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcXFxcXFxcInBsYXlsaXN0XFxcXFxcXCIpIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBkb3VMaXN0KGlkLCBNWV9QQUdFLCA1MCk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGV2YWwodXNlQ29uZmlnKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICAgICAgfSwgdHlwZSwgaWQsIHRpdGxlLCB1c2VDb25maWcpO1xcXFxyXFxcXG4gICAgICAgIH1cXFxcclxcXFxuICAgICAgICByZXR1cm4ge1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogdGl0bGUgKyAodHlwZSA9PT0gXFxcXFxcXCJwbGF5bGlzdFxcXFxcXFwiID8gXFxcXFxcXCJcXFxcXFxcIiA6IFxcXFxcXFwi77yIXFxcXFxcXCIgKyBlLnllYXIgKyBcXFxcXFxcIu+8iVxcXFxcXFwiKSxcXFxcclxcXFxuICAgICAgICAgICAgdXJsOiB1cmxQYXJhbXMudXJsLFxcXFxyXFxcXG4gICAgICAgICAgICBleHRyYTogdXJsUGFyYW1zLmV4dHJhLFxcXFxyXFxcXG4gICAgICAgICAgICBpbWc6IGUucGljID8gZS5waWMubm9ybWFsICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIiArIGUucGljLm5vcm1hbCA6IGUuY292ZXJfdXJsICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIiArIGUuY292ZXJfdXJsLFxcXFxyXFxcXG4gICAgICAgICAgICBkZXNjOiBlLnR5cGUgIT09IFxcXFxcXFwicGxheWxpc3RcXFxcXFxcIiA/IChlLnRhZ3MubWFwKChlID0+IGUubmFtZSkpLmpvaW4oXFxcXFxcXCIsXFxcXFxcXCIpICsgXFxcXFxcXCJcXFxcXFxcXG5cXFxcXFxcIiArIChlLnJhdGluZyA/IGNvbXB1dGVSYXRpbmcoZS5yYXRpbmcubWF4LCBlLnJhdGluZy52YWx1ZSkgKyBcXFxcXFxcIiBcXFxcXFxcIiArIGUucmF0aW5nLnZhbHVlLnRvRml4ZWQoMSkgKyBcXFxcXFxcIuWIhlxcXFxcXFwiIDogXFxcXFxcXCLmmoLml6Dor4TliIZcXFxcXFxcIikpIDogKGUudGl0bGUgKyBcXFxcXFxcIlxcXFxcXFxcblxcXFxcXFwiICsgZS50YWdzLmpvaW4oXFxcXFxcXCIsXFxcXFxcXCIpICsgXFxcXFxcXCJcXFxcXFxcXG7lhbFcXFxcXFxcIiArIGUuaXRlbXNfY291bnQgKyBcXFxcXFxcIumDqFxcXFxcXFwiKVxcXFxyXFxcXG4gICAgICAgIH1cXFxcclxcXFxuICAgIH0pKTtcXFxcclxcXFxuXFxcXHJcXFxcbiAgICByZXR1cm4gcGFnZSA+IDEgPyBpIDogYS5jb25jYXQoaSk7XFxcXHJcXFxcbn1cXFxcclxcXFxuXFxcXHJcXFxcbi8v54Ot6ZeoXFxcXHJcXFxcbmZ1bmN0aW9uIGhvdExpc3QocGFnZSwgY291bnQpIHtcXFxcclxcXFxuICAgIGlmICghZ2V0TXlWYXIoJ2hvdExpc3QnKSkgcHV0TXlWYXIoJ2hvdExpc3QnLCAne1xcXFxcXFwiaXRlbVxcXFxcXFwiOlxcXFxcXFwibW92aWVfc2hvd2luZz9hcmVhPeWFqOmDqFxcXFxcXFwiLFxcXFxcXFwicGxheWFibGVcXFxcXFxcIjpcXFxcXFxcIjBcXFxcXFxcIixcXFxcXFxcInNvcnRcXFxcXFxcIjpcXFxcXFxcInJlY29tbWVuZFxcXFxcXFwiLFxcXFxcXFwic2NvcmVcXFxcXFxcIjpcXFxcXFxcIjAsMTBcXFxcXFxcIn0nKTtcXFxcclxcXFxuICAgIGxldCBhID0gW107XFxcXHJcXFxcbiAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2hvdExpc3QnKSk7XFxcXHJcXFxcbiAgICBsZXQgY29sb3IgPSBnZXRDb25maWcoJ2Nob29zZUNvbG9yJyk7XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgbGV0IGl0ZW1zID0ge1xcXFxyXFxcXG4gICAgICAgIOeUteW9sToge1xcXFxyXFxcXG4gICAgICAgICAgICDlvbHpmaLng63mmKDnlLXlvbE6ICdtb3ZpZV9zaG93aW5nP2FyZWE95YWo6YOoJyxcXFxcclxcXFxuICAgICAgICAgICAg6LGG55Oj54Ot6Zeo55S15b2xOiAnaG90X2dhaWE/YXJlYT3lhajpg6gnLFxcXFxyXFxcXG4gICAgICAgICAgICDng63pl6jljY7or63nlLXlvbE6ICdob3RfZ2FpYT9hcmVhPeWNjuivrScsXFxcXHJcXFxcbiAgICAgICAgICAgIOeDremXqOasp+e+jueUteW9sTogJ2hvdF9nYWlhP2FyZWE95qyn576OJyxcXFxcclxcXFxuICAgICAgICAgICAg54Ot6Zeo6Z+p5Zu955S15b2xOiAnaG90X2dhaWE/YXJlYT3pn6nlm70nLFxcXFxyXFxcXG4gICAgICAgICAgICDng63pl6jml6XmnKznlLXlvbE6ICdob3RfZ2FpYT9hcmVhPeaXpeacrCdcXFxcclxcXFxuICAgICAgICB9LFxcXFxyXFxcXG4gICAgICAgIOeUteinhuWJpzoge1xcXFxyXFxcXG4gICAgICAgICAgICDng63mkq3nlLXop4bliac6ICd0dl9ob3QnLFxcXFxyXFxcXG4gICAgICAgICAgICDng63mkq3lm73kuqfliac6ICd0dl9kb21lc3RpYycsXFxcXHJcXFxcbiAgICAgICAgICAgIOeDreaSreasp+e+juWJpzogJ3R2X2FtZXJpY2FuJyxcXFxcclxcXFxuICAgICAgICAgICAg54Ot5pKt5pel5YmnOiAndHZfamFwYW5lc2UnLFxcXFxyXFxcXG4gICAgICAgICAgICDng63mkq3pn6nliac6ICd0dl9rb3JlYW4nLFxcXFxyXFxcXG4gICAgICAgICAgICDng63mkq3liqjnlLs6ICd0dl9hbmltYXRpb24nXFxcXHJcXFxcbiAgICAgICAgfSxcXFxcclxcXFxuICAgICAgICDnu7zoibo6IHtcXFxcclxcXFxuICAgICAgICAgICAg54Ot5pKt57u86Im6OiAnc2hvd19ob3QnLFxcXFxyXFxcXG4gICAgICAgICAgICDlm73lhoXnu7zoibo6ICdzaG93X2RvbWVzdGljJyxcXFxcclxcXFxuICAgICAgICAgICAg5Zu95aSW57u86Im6OiAnc2hvd19mb3JlaWduJ1xcXFxyXFxcXG4gICAgICAgIH1cXFxcclxcXFxuICAgIH1cXFxcclxcXFxuICAgIGZvciAobGV0IGkgaW4gaXRlbXMpIHtcXFxcclxcXFxuICAgICAgICBmb3IgKGxldCBqIGluIGl0ZW1zW2ldKSB7XFxcXHJcXFxcbiAgICAgICAgICAgIGEucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogdGVtcC5pdGVtID09IGl0ZW1zW2ldW2pdID8gJ+KAnOKAnOKAneKAnTxiPiA8Zm9udCBjb2xvcj0nICsgY29sb3IgKyAnPicgKyBqICsgJyA8L2ZvbnQ+PC9iPicgOiBqLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXFxcclxcXFxuICAgICAgICAgICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eSNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGUpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2hvdExpc3QnKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgdGVtcC5pdGVtID0gZTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcignaG90TGlzdCcsIEpTT04uc3RyaW5naWZ5KHRlbXApKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcclxcXFxuICAgICAgICAgICAgICAgIH0sIGl0ZW1zW2ldW2pdKVxcXFxyXFxcXG4gICAgICAgICAgICB9KVxcXFxyXFxcXG4gICAgICAgIH1cXFxcclxcXFxuICAgICAgICBhLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJibGFua19ibG9ja1xcXFxcXFwiXFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuICAgIH1cXFxcclxcXFxuXFxcXHJcXFxcbiAgICBsZXQgc29ydCA9IHtcXFxcclxcXFxuICAgICAgICDng63luqbmjpLluo86ICdyZWNvbW1lbmQnLFxcXFxyXFxcXG4gICAgICAgIOaXtumXtOaOkuW6jzogJ3RpbWUnLFxcXFxyXFxcXG4gICAgICAgIOivhOWIhuaOkuW6jzogJ3JhbmsnXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBmb3IgKGxldCByIGluIHNvcnQpIHtcXFxcclxcXFxuICAgICAgICBhLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogdGVtcC5zb3J0ID09IHNvcnRbcl0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIHIgKyAnIDwvZm9udD48L2I+JyA6IHIsXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxcXHJcXFxcbiAgICAgICAgICAgIHVybDogJCgnaGlrZXI6IC8vZW1wdHkjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChlKSA9PiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2hvdExpc3QnKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0ZW1wLnNvcnQgPSBlO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCJob3RMaXN0XFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KHRlbXApKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxcXHJcXFxcbiAgICAgICAgICAgIH0sIHNvcnRbcl0pXFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuICAgIH1cXFxcclxcXFxuXFxcXHJcXFxcbiAgICBhLnB1c2goe1xcXFxyXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImJsYW5rX2Jsb2NrXFxcXFxcXCJcXFxcclxcXFxuICAgIH0pXFxcXHJcXFxcblxcXFxyXFxcXG4gICAgbGV0IHBsYXlhYmxlID0ge1xcXFxyXFxcXG4gICAgICAgIOWFqOmDqOW9seeJhzogJzAnLFxcXFxyXFxcXG4gICAgICAgIOS7heacieeJh+a6kDogJzEnXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBmb3IgKGxldCByIGluIHBsYXlhYmxlKSB7XFxcXHJcXFxcbiAgICAgICAgYS5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGU6IHRlbXAucGxheWFibGUgPT0gcGxheWFibGVbcl0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIHIgKyAnIDwvZm9udD48L2I+JyA6IHIsXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxcXHJcXFxcbiAgICAgICAgICAgIHVybDogJCgnaGlrZXI6IC8vZW1wdHkjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChlKSA9PiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2hvdExpc3QnKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0ZW1wLnBsYXlhYmxlID0gZTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiaG90TGlzdFxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcXFxyXFxcXG4gICAgICAgICAgICB9LCBwbGF5YWJsZVtyXSlcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG5cXFxcclxcXFxuICAgIGEucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ08Yj4gPGZvbnQgY29sb3I9JyArIGNvbG9yICsgJz7or4TliIbljLrpl7Q6JyArIHRlbXAuc2NvcmUucmVwbGFjZSgnLCcsICctJykgKyAnIDwvZm9udD48L2I+JyxcXFxcclxcXFxuICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcXFxyXFxcXG4gICAgICAgIHVybDogJCh0ZW1wLnNjb3JlLnJlcGxhY2UoJywnLCAnLScpLCAn6K+E5YiG5bqU5ZyoMC0xMOS5i+mXtCcpLmlucHV0KCgpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgbGV0IHRlbXAgPSBKU09OLnBhcnNlKGdldE15VmFyKCdob3RMaXN0JykpO1xcXFxyXFxcXG4gICAgICAgICAgICBsZXQgaW5wdXRzID0gaW5wdXQuc3BsaXQoJy0nKTtcXFxcclxcXFxuICAgICAgICAgICAgaWYgKGlucHV0cy5sZW5ndGggPT0gMiAmJiBpbnB1dHMuZXZlcnkoZSA9PiBlID49IDAgJiYgZSA8PSAxMCkgJiYgcGFyc2VGbG9hdChpbnB1dHNbMF0pIDwgaW5wdXRzWzFdKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0ZW1wLnNjb3JlID0gaW5wdXQucmVwbGFjZSgnLScsICcsJyk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcImhvdExpc3RcXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkodGVtcCkpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcclxcXFxuICAgICAgICAgICAgfSBlbHNlIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/or7fmraPnoa7ovpPlhaUnXFxcXHJcXFxcbiAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgfSlcXFxcclxcXFxuXFxcXHJcXFxcbiAgICBsZXQgbCA9IFtdO1xcXFxyXFxcXG4gICAgaWYgKHRlbXAuaXRlbS5pbmRleE9mKCc/JykgIT0gLTEpIHtcXFxcclxcXFxuICAgICAgICBsZXQgcyA9IGdldERvdWJhblJlcyhcXFxcXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvbW92aWUvXFxcXFxcXCIgKyB0ZW1wLml0ZW0gKyAnJnBsYXlhYmxlPScgKyB0ZW1wLnBsYXlhYmxlICsgJyZzb3J0PScgKyB0ZW1wLnNvcnQgKyAnJnNjb3JlX3JhbmdlPScgKyB0ZW1wLnNjb3JlICsgKHBhZ2UgPyBcXFxcXFxcIiZzdGFydD1cXFxcXFxcIiArIChwYWdlIC0gMSkgKiBjb3VudCArIFxcXFxcXFwiJmNvdW50PVxcXFxcXFwiICsgY291bnQgOiBcXFxcXFxcIiZzdGFydD0wJmNvdW50PTMwXFxcXFxcXCIpICsgJyZsb2NfaWQ9MTA4Mjg4Jyk7XFxcXHJcXFxcbiAgICAgICAgbCA9IHMuaXRlbXM7XFxcXHJcXFxcbiAgICB9IGVsc2Uge1xcXFxyXFxcXG4gICAgICAgIGxldCBzID0gZ2V0RG91YmFuUmVzKFxcXFxcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9zdWJqZWN0X2NvbGxlY3Rpb24vXFxcXFxcXCIgKyB0ZW1wLml0ZW0gKyAnL2l0ZW1zJyArICc/cGxheWFibGU9JyArIHRlbXAucGxheWFibGUgKyAnJnNvcnQ9JyArIHRlbXAuc29ydCArICcmc2NvcmVfcmFuZ2U9JyArIHRlbXAuc2NvcmUgKyAocGFnZSA/IFxcXFxcXFwiJnN0YXJ0PVxcXFxcXFwiICsgKHBhZ2UgLSAxKSAqIGNvdW50ICsgXFxcXFxcXCImY291bnQ9XFxcXFxcXCIgKyBjb3VudCA6IFxcXFxcXFwiJnN0YXJ0PTAmY291bnQ9MzBcXFxcXFxcIikpO1xcXFxyXFxcXG4gICAgICAgIGwgPSBzLnN1YmplY3RfY29sbGVjdGlvbl9pdGVtcztcXFxcclxcXFxuICAgIH1cXFxcclxcXFxuXFxcXHJcXFxcbiAgICBsZXQgZGV0YWlsc1ZpZXdDb25maWdzID0gZ2V0Q29uZmlnKCdkZXRhaWxzVmlld0NvbmZpZ3MnKTtcXFxcclxcXFxuICAgIGxldCBpID0gbC5tYXAoKGUgPT4ge1xcXFxyXFxcXG4gICAgICAgIGxldCB0eXBlID0gZS50eXBlLFxcXFxyXFxcXG4gICAgICAgICAgICBpZCA9IGUuaWQsXFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlID0gZS50aXRsZTtcXFxcclxcXFxuICAgICAgICBsZXQgdXNlQ29uZmlnID0gZGV0YWlsc1ZpZXdDb25maWdzW2RldGFpbHNWaWV3Q29uZmlncy51c2VdLmNvbmZpZztcXFxcclxcXFxuICAgICAgICBsZXQgdXJsUGFyYW1zID0ge307XFxcXHJcXFxcbiAgICAgICAgaWYgKHVzZUNvbmZpZy5zdGFydHNXaXRoKCd7JykpIHtcXFxcclxcXFxuICAgICAgICAgICAgZXZhbCgndXJsUGFyYW1zID0gJyArIHVzZUNvbmZpZyk7XFxcXHJcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcclxcXFxuICAgICAgICAgICAgdXJsUGFyYW1zLnVybCA9ICQoXFxcXFxcXCJoaWtlcjovL2VtcHR5I25vSGlzdG9yeSMjaW1tZXJzaXZlVGhlbWUjXFxcXFxcXCIgKyAnP3R5cGU9JyArIHR5cGUgKyAnJmlkPScgKyBpZCkucnVsZSgodHlwZSwgaWQsIHRpdGxlLCB1c2VDb25maWcpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcXFxcXFxcInBsYXlsaXN0XFxcXFxcXCIpIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBkb3VMaXN0KGlkLCBNWV9QQUdFLCA1MCk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGV2YWwodXNlQ29uZmlnKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICAgICAgfSwgdHlwZSwgaWQsIHRpdGxlLCB1c2VDb25maWcpO1xcXFxyXFxcXG4gICAgICAgIH1cXFxcclxcXFxuICAgICAgICByZXR1cm4ge1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogdGl0bGUgKyBcXFxcXFxcIu+8iFxcXFxcXFwiICsgZS55ZWFyICsgXFxcXFxcXCLvvIlcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAgdXJsOiB1cmxQYXJhbXMudXJsLFxcXFxyXFxcXG4gICAgICAgICAgICBleHRyYTogdXJsUGFyYW1zLmV4dHJhLFxcXFxyXFxcXG4gICAgICAgICAgICBpbWc6IGUucGljID8gZS5waWMubm9ybWFsICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIiArIGUucGljLm5vcm1hbCA6IGUuY292ZXIudXJsICsgJ0BSZWZlcmVyPScgKyBlLmNvdmVyLnVybCxcXFxcclxcXFxuICAgICAgICAgICAgZGVzYzogKGUudGFncyA/IGUudGFncy5tYXAoKGUgPT4gZS5uYW1lKSkuam9pbihcXFxcXFxcIixcXFxcXFxcIikgOiBlLmNhcmRfc3VidGl0bGUpICsgXFxcXFxcXCJcXFxcXFxcXG5cXFxcXFxcIiArIChlLnJhdGluZyA/IGNvbXB1dGVSYXRpbmcoZS5yYXRpbmcubWF4LCBlLnJhdGluZy52YWx1ZSkgKyBcXFxcXFxcIiBcXFxcXFxcIiArIGUucmF0aW5nLnZhbHVlLnRvRml4ZWQoMSkgKyBcXFxcXFxcIuWIhlxcXFxcXFwiIDogXFxcXFxcXCLmmoLml6Dor4TliIZcXFxcXFxcIilcXFxcclxcXFxuICAgICAgICB9XFxcXHJcXFxcbiAgICB9KSk7XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgcmV0dXJuIHBhZ2UgPiAxID8gaSA6IGEuY29uY2F0KGkpO1xcXFxyXFxcXG59XFxcXHJcXFxcblxcXFxyXFxcXG4vL+WIhuexu1xcXFxyXFxcXG5mdW5jdGlvbiBjbGFzc0xpc3QocGFnZSwgY291bnQpIHtcXFxcclxcXFxuICAgIGlmICghZ2V0TXlWYXIoJ2NsYXNzbGlzdCcpKXtcXFxcclxcXFxuICAgICAgICBwdXRNeVZhcignY2xhc3NsaXN0JywgSlNPTi5zdHJpbmdpZnkoe3N1YnR5cGU6XFxcXFxcXCJcXFxcXFxcIixsb2NhbDpcXFxcXFxcIlxcXFxcXFwiLHllYXI6XFxcXFxcXCJcXFxcXFxcIixjbGFzczpcXFxcXFxcIlxcXFxcXFwiLHJhbms6XFxcXFxcXCJVXFxcXFxcXCIsdHlwZTpcXFxcXFxcIlxcXFxcXFwiLGZpbHRlcjpcXFxcXFxcIlxcXFxcXFwiLHNjb3JlOlxcXFxcXFwiMCwxMFxcXFxcXFwifSkpO1xcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG4gICAgbGV0IGEgPSBbXTtcXFxcclxcXFxuICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcignY2xhc3NsaXN0JykpO1xcXFxyXFxcXG4gICAgbGV0IGNvbG9yID0gZ2V0Q29uZmlnKCdjaG9vc2VDb2xvcicpO1xcXFxyXFxcXG5cXFxcclxcXFxuICAgIGxldCBpdGVtcyA9IHtcXFxcclxcXFxuICAgICAgICBzdWJ0eXBlOiBbXFxcXFxcXCLlhajpg6jlvaLlvI9cXFxcXFxcIiwgXFxcXFxcXCLnlLXlvbFcXFxcXFxcIiwgXFxcXFxcXCLnlLXop4bliadcXFxcXFxcIiwgXFxcXFxcXCLnu7zoibpcXFxcXFxcIiwgXFxcXFxcXCLliqjmvKtcXFxcXFxcIiwgXFxcXFxcXCLnuqrlvZXniYdcXFxcXFxcIiwgXFxcXFxcXCLnn63niYdcXFxcXFxcIl0sXFxcXHJcXFxcbiAgICAgICAgbG9jYWw6IFtcXFxcXFxcIuWFqOmDqOWcsOWMulxcXFxcXFwiLCBcXFxcXFxcIuiHquWumuS5ieWcsOWMulxcXFxcXFwiLCBcXFxcXFxcIuS4reWbveWkp+mZhlxcXFxcXFwiLCBcXFxcXFxcIue+juWbvVxcXFxcXFwiLCBcXFxcXFxcIuS4reWbvemmmea4r1xcXFxcXFwiLCBcXFxcXFxcIuS4reWbveWPsOa5vlxcXFxcXFwiLCBcXFxcXFxcIuaXpeacrFxcXFxcXFwiLCBcXFxcXFxcIumfqeWbvVxcXFxcXFwiLCBcXFxcXFxcIuiLseWbvVxcXFxcXFwiLCBcXFxcXFxcIuazleWbvVxcXFxcXFwiLCBcXFxcXFxcIuW+t+WbvVxcXFxcXFwiLCBcXFxcXFxcIuaEj+Wkp+WIqVxcXFxcXFwiLCBcXFxcXFxcIuilv+ePreeJmVxcXFxcXFwiLCBcXFxcXFxcIuWNsOW6plxcXFxcXFwiLCBcXFxcXFxcIuazsOWbvVxcXFxcXFwiLCBcXFxcXFxcIuS/hOe9l+aWr1xcXFxcXFwiLCBcXFxcXFxcIuS8iuacl1xcXFxcXFwiLCBcXFxcXFxcIuWKoOaLv+Wkp1xcXFxcXFwiLCBcXFxcXFxcIua+s+Wkp+WIqeS6mlxcXFxcXFwiLCBcXFxcXFxcIueIseWwlOWFsFxcXFxcXFwiLCBcXFxcXFxcIueRnuWFuFxcXFxcXFwiLCBcXFxcXFxcIuW3tOilv1xcXFxcXFwiLCBcXFxcXFxcIuS4uem6plxcXFxcXFwiXSxcXFxcclxcXFxuICAgICAgICB0eXBlOiBbXFxcXFxcXCLlhajpg6jnsbvlnotcXFxcXFxcIiwgXFxcXFxcXCLoh6rlrprkuYnnsbvlnotcXFxcXFxcIiwgXFxcXFxcXCLliafmg4VcXFxcXFxcIiwgXFxcXFxcXCLllpzliadcXFxcXFxcIiwgXFxcXFxcXCLliqjkvZxcXFxcXFxcIiwgXFxcXFxcXCLniLHmg4VcXFxcXFxcIiwgXFxcXFxcXCLnp5HlubtcXFxcXFxcIiwgXFxcXFxcXCLliqjnlLtcXFxcXFxcIiwgXFxcXFxcXCLmgqznlpFcXFxcXFxcIiwgXFxcXFxcXCLmg4rmgppcXFxcXFxcIiwgXFxcXFxcXCLmgZDmgJZcXFxcXFxcIiwgXFxcXFxcXCLniq/nvapcXFxcXFxcIiwgXFxcXFxcXCLlkIzmgKdcXFxcXFxcIiwgXFxcXFxcXCLpn7PkuZBcXFxcXFxcIiwgXFxcXFxcXCLmrYzoiJ5cXFxcXFxcIiwgXFxcXFxcXCLkvKDorrBcXFxcXFxcIiwgXFxcXFxcXCLljoblj7JcXFxcXFxcIiwgXFxcXFxcXCLmiJjkuolcXFxcXFxcIiwgXFxcXFxcXCLopb/pg6hcXFxcXFxcIiwgXFxcXFxcXCLlpYflubtcXFxcXFxcIiwgXFxcXFxcXCLlhpLpmalcXFxcXFxcIiwgXFxcXFxcXCLngb7pmr5cXFxcXFxcIiwgXFxcXFxcXCLmrabkvqBcXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcXHU2MGM1XFxcXFxcXFx1ODI3MlxcXFxcXFwiXSxcXFxcclxcXFxuICAgICAgICB5ZWFyOiBbXFxcXFxcXCLlhajpg6jlubTku6NcXFxcXFxcIiwgXFxcXFxcXCLoh6rlrprkuYnlubTku71cXFxcXFxcIiwgXFxcXFxcXCIyMDIw5bm05LujXFxcXFxcXCIsIFxcXFxcXFwiMjAxMOW5tOS7o1xcXFxcXFwiLCBcXFxcXFxcIjIwMDDlubTku6NcXFxcXFxcIiwgXFxcXFxcXCI5MOW5tOS7o1xcXFxcXFwiLCBcXFxcXFxcIjgw5bm05LujXFxcXFxcXCIsIFxcXFxcXFwiNzDlubTku6NcXFxcXFxcIiwgXFxcXFxcXCI2MOW5tOS7o1xcXFxcXFwiLCBcXFxcXFxcIuabtOaXqVxcXFxcXFwiXSxcXFxcclxcXFxuICAgICAgICBjbGFzczogW1xcXFxcXFwi5YWo6YOo54m56ImyXFxcXFxcXCIsIFxcXFxcXFwi6Ieq5a6a5LmJ5qCH562+XFxcXFxcXCIsIFxcXFxcXFwi57uP5YW4XFxcXFxcXCIsIFxcXFxcXFwi6Z2S5pilXFxcXFxcXCIsIFxcXFxcXFwi5paH6Im6XFxcXFxcXCIsIFxcXFxcXFwi5pCe56yRXFxcXFxcXCIsIFxcXFxcXFwi5Yqx5b+XXFxcXFxcXCIsIFxcXFxcXFwi6a2U5bm7XFxcXFxcXCIsIFxcXFxcXFwi5oSf5Lq6XFxcXFxcXCIsIFxcXFxcXFwi5aWz5oCnXFxcXFxcXCIsIFxcXFxcXFwi6buR5biuXFxcXFxcXCIsIFxcXFxcXFwi5rK75oSIXFxcXFxcXCIsIFxcXFxcXFwi576O6aOfXFxcXFxcXCIsIFxcXFxcXFwi5a6X5pWZXFxcXFxcXCIsIFxcXFxcXFwi5bCP6K+05pS557yWXFxcXFxcXCIsIFxcXFxcXFwi6LaF57qn6Iux6ZuEXFxcXFxcXCJdXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBmb3IgKGl0ZW0gaW4gaXRlbXMpIHtcXFxcclxcXFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zW2l0ZW1dLmxlbmd0aDsgaSsrKSB7XFxcXHJcXFxcbiAgICAgICAgICAgIGxldCB0aXRsZSA9IFxcXFxcXFwiXFxcXFxcXCI7XFxcXHJcXFxcbiAgICAgICAgICAgIGlmKHRlbXBbaXRlbV0gPT0gaXRlbXNbaXRlbV1baV0gfHwgKHRlbXBbaXRlbV0gPT0gXFxcXFxcXCJcXFxcXFxcIiAmJiBpID09IDApKXtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHRpdGxlID0gJ+KAnOKAnOKAneKAnTxiPiA8Zm9udCBjb2xvcj0nICsgY29sb3IgKyAnPicgKyBpdGVtc1tpdGVtXVtpXSArICcgPC9mb250PjwvYj4nO1xcXFxyXFxcXG4gICAgICAgICAgICB9ZWxzZXtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHRpdGxlID0gaXRlbXNbaXRlbV1baV07XFxcXHJcXFxcbiAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICAgICAgbGV0IHVybCA9ICQoJ2hpa2VyOi8vZW1wdHkjbm9Mb2FkaW5nIycpLmxhenlSdWxlKCh0ZXh0LGl0ZW0pID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXAgPSBKU09OLnBhcnNlKGdldE15VmFyKCdjbGFzc2xpc3QnKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBbaXRlbV0gPSB0ZXh0LmluZGV4T2YoXFxcXFxcXCLlhajpg6hcXFxcXFxcIikgIT0gLTEgPyBcXFxcXFxcIlxcXFxcXFwiIDogdGV4dDtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCJjbGFzc2xpc3RcXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkodGVtcCkpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgfSwgaXRlbXNbaXRlbV1baV0sIGl0ZW0pO1xcXFxyXFxcXG4gICAgICAgICAgICBcXFxcclxcXFxuICAgICAgICAgICAgaWYoaXRlbXNbaXRlbV1baV0gPT0gXFxcXFxcXCLoh6rlrprkuYnlubTku71cXFxcXFxcIil7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBpZih0ZW1wLnllYXIgPT0gXFxcXFxcXCLoh6rlrprkuYnlubTku71cXFxcXFxcIil7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGUgPSAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+6Ieq5a6a5LmJ5bm05Lu9OicgKyB0ZW1wLmN1c3RvbVllYXIgKyAnIDwvZm9udD48L2I+JztcXFxcclxcXFxuICAgICAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICAgICAgICAgIFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgdXJsID0gJCh0ZW1wLmN1c3RvbVllYXIsICfnm7TmjqXovpPlhaXlhbfkvZPlubTku70s5L6L5aaCMjAwMCcpLmlucHV0KCgpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2NsYXNzbGlzdCcpKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBpZihpbnB1dC5sZW5ndGggPT0gNCl7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAuY3VzdG9tWWVhciA9IGlucHV0O1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wLnllYXIgPSBcXFxcXFxcIuiHquWumuS5ieW5tOS7vVxcXFxcXFwiO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcImNsYXNzbGlzdFxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+ivt+ato+ehrui+k+WFpSdcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcclxcXFxuICAgICAgICAgICAgfWVsc2UgaWYoaXRlbXNbaXRlbV1baV0gPT0gXFxcXFxcXCLoh6rlrprkuYnlnLDljLpcXFxcXFxcIil7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBpZih0ZW1wLmxvY2FsID09IFxcXFxcXFwi6Ieq5a6a5LmJ5Zyw5Yy6XFxcXFxcXCIpe1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlID0gJ+KAnOKAnOKAneKAnTxiPiA8Zm9udCBjb2xvcj0nICsgY29sb3IgKyAnPuiHquWumuS5ieWcsOWMujonICsgdGVtcC5jdXN0b21Mb2NhbCArICcgPC9mb250PjwvYj4nO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgICAgICAgICAgXFxcXHJcXFxcbiAgICAgICAgICAgICAgICB1cmwgPSAkKHRlbXAuY3VzdG9tTG9jYWwsICfnm7TmjqXovpPlhaXlhbfkvZPlnLDljLos5L6L5aaC5Lit5Zu95aSn6ZmGJykuaW5wdXQoKCkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcignY2xhc3NsaXN0JykpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGlmKGlucHV0Lmxlbmd0aCA+IDApe1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wLmN1c3RvbUxvY2FsID0gaW5wdXQ7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAubG9jYWwgPSBcXFxcXFxcIuiHquWumuS5ieWcsOWMulxcXFxcXFwiO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcImNsYXNzbGlzdFxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+ivt+ato+ehrui+k+WFpSdcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcclxcXFxuICAgICAgICAgICAgfWVsc2UgaWYoaXRlbXNbaXRlbV1baV0gPT0gXFxcXFxcXCLoh6rlrprkuYnnsbvlnotcXFxcXFxcIil7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBpZih0ZW1wLnR5cGUgPT0gXFxcXFxcXCLoh6rlrprkuYnnsbvlnotcXFxcXFxcIil7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGUgPSAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+6Ieq5a6a5LmJ57G75Z6LOicgKyB0ZW1wLmN1c3RvbVR5cGUgKyAnIDwvZm9udD48L2I+JztcXFxcclxcXFxuICAgICAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICAgICAgICAgIFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgdXJsID0gJCh0ZW1wLmN1c3RvbVR5cGUsICfnm7TmjqXovpPlhaXlhbfkvZPnsbvlnoss5L6L5aaC5Ymn5oOFJykuaW5wdXQoKCkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcignY2xhc3NsaXN0JykpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGlmKGlucHV0Lmxlbmd0aCA+IDApe1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wLmN1c3RvbVR5cGUgPSBpbnB1dDtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcC50eXBlID0gXFxcXFxcXCLoh6rlrprkuYnnsbvlnotcXFxcXFxcIjtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCJjbGFzc2xpc3RcXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkodGVtcCkpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/or7fmraPnoa7ovpPlhaUnXFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgICAgICAgICAgfSk7XFxcXHJcXFxcbiAgICAgICAgICAgIH1lbHNlIGlmKGl0ZW1zW2l0ZW1dW2ldID09IFxcXFxcXFwi6Ieq5a6a5LmJ5qCH562+XFxcXFxcXCIpe1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgaWYodGVtcC5jbGFzcyA9PSBcXFxcXFxcIuiHquWumuS5ieagh+etvlxcXFxcXFwiKXtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZSA9ICfigJzigJzigJ3igJ08Yj4gPGZvbnQgY29sb3I9JyArIGNvbG9yICsgJz7oh6rlrprkuYnmoIfnrb46JyArIHRlbXAuY3VzdG9tQ2xhc3MgKyAnIDwvZm9udD48L2I+JztcXFxcclxcXFxuICAgICAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICAgICAgICAgIFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgdXJsID0gJCh0ZW1wLmN1c3RvbUNsYXNzLCAn55u05o6l6L6T5YWl5YW35L2T5qCH562+LOS+i+Wmgue7j+WFuFxcXFxcXFxcbuWPr+WGmeWkmuS4quagh+etvizkvb/nlKhcXFxcXFxcIuiLseaWh+mAl+WPt1xcXFxcXFwi5YiG6ZqUJykuaW5wdXQoKCkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcignY2xhc3NsaXN0JykpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGlmKGlucHV0Lmxlbmd0aCA+IDApe1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wLmN1c3RvbUNsYXNzID0gaW5wdXQ7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAuY2xhc3MgPSBcXFxcXFxcIuiHquWumuS5ieagh+etvlxcXFxcXFwiO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcImNsYXNzbGlzdFxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+ivt+ato+ehrui+k+WFpSdcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcclxcXFxuICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgICAgICBhLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXFxcclxcXFxuICAgICAgICAgICAgICAgIHVybDogdXJsXFxcXHJcXFxcbiAgICAgICAgICAgIH0pXFxcXHJcXFxcbiAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgIGEucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnYmxhbmtfYmxvY2snXFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuICAgIH1cXFxcclxcXFxuXFxcXHJcXFxcbiAgICBsZXQgcmFuayA9IHtcXFxcclxcXFxuICAgICAgICDpu5jorqTmjpLluo86IFxcXFxcXFwiVVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgIOeDreW6pjogXFxcXFxcXCJUXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAg6K+E5YiGOiBcXFxcXFxcIlNcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICDml7bpl7Q6IFxcXFxcXFwiUlxcXFxcXFwiXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBmb3IgKGxldCByIGluIHJhbmspIHtcXFxcclxcXFxuICAgICAgICBhLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogdGVtcC5yYW5rID09PSByYW5rW3JdID8gJ+KAnOKAnOKAneKAnTxiPiA8Zm9udCBjb2xvcj0nICsgY29sb3IgKyAnPicgKyByICsgJyA8L2ZvbnQ+PC9iPicgOiByLFxcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcXFxyXFxcXG4gICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOiAvL2VtcHR5I25vTG9hZGluZyMnKS5sYXp5UnVsZSgoZSkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgbGV0IHRlbXAgPSBKU09OLnBhcnNlKGdldE15VmFyKCdjbGFzc2xpc3QnKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0ZW1wLnJhbmsgPSBlO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCJjbGFzc2xpc3RcXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkodGVtcCkpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcclxcXFxuICAgICAgICAgICAgfSwgcmFua1tyXSlcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG5cXFxcclxcXFxuICAgIGEucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgY29sX3R5cGU6ICdibGFua19ibG9jaydcXFxcclxcXFxuICAgIH0pXFxcXHJcXFxcblxcXFxyXFxcXG4gICAgbGV0IGZpbHRlciA9IHtcXFxcclxcXFxuICAgICAgICDlhajpg6jlvbHniYc6ICcnLFxcXFxyXFxcXG4gICAgICAgIOS7heacieeJh+a6kDogJ3BsYXlhYmxlJ1xcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG4gICAgZm9yIChsZXQgciBpbiBmaWx0ZXIpIHtcXFxcclxcXFxuICAgICAgICBhLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogdGVtcC5maWx0ZXIgPT09IGZpbHRlcltyXSA/ICfigJzigJzigJ3igJ08Yj4gPGZvbnQgY29sb3I9JyArIGNvbG9yICsgJz4nICsgciArICcgPC9mb250PjwvYj4nIDogcixcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXFxcclxcXFxuICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjogLy9lbXB0eSNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGUpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcignY2xhc3NsaXN0JykpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgdGVtcC5maWx0ZXIgPSBlO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCJjbGFzc2xpc3RcXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkodGVtcCkpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcclxcXFxuICAgICAgICAgICAgfSwgZmlsdGVyW3JdKVxcXFxyXFxcXG4gICAgICAgIH0pXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgYS5wdXNoKHtcXFxcclxcXFxuICAgICAgICB0aXRsZTogJ+KAnOKAnOKAneKAnTxiPiA8Zm9udCBjb2xvcj0nICsgY29sb3IgKyAnPuivhOWIhuWMuumXtDonICsgdGVtcC5zY29yZS5yZXBsYWNlKCcsJywgJy0nKSArICcgPC9mb250PjwvYj4nLFxcXFxyXFxcXG4gICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxcXHJcXFxcbiAgICAgICAgdXJsOiAkKHRlbXAuc2NvcmUucmVwbGFjZSgnLCcsICctJyksICfor4TliIblupTlnKgwLTEw5LmL6Ze0JykuaW5wdXQoKCkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2NsYXNzbGlzdCcpKTtcXFxcclxcXFxuICAgICAgICAgICAgbGV0IGlucHV0cyA9IGlucHV0LnNwbGl0KCctJyk7XFxcXHJcXFxcbiAgICAgICAgICAgIGlmIChpbnB1dHMubGVuZ3RoID09IDIgJiYgaW5wdXRzLmV2ZXJ5KGUgPT4gZSA+PSAwICYmIGUgPD0gMTApICYmIHBhcnNlRmxvYXQoaW5wdXRzWzBdKSA8IGlucHV0c1sxXSkge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgdGVtcC5zY29yZSA9IGlucHV0LnJlcGxhY2UoJy0nLCAnLCcpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCJjbGFzc2xpc3RcXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkodGVtcCkpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcclxcXFxuICAgICAgICAgICAgfSBlbHNlIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/or7fmraPnoa7ovpPlhaUnXFxcXHJcXFxcbiAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgfSlcXFxcclxcXFxuXFxcXHJcXFxcbiAgICBsZXQgcyA9IGdldERvdWJhblJlcyhcXFxcXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvbW92aWUvdGFnP1xcXFxcXFwiXFxcXHJcXFxcbiAgICAgICAgICAgICsgKHBhZ2UgPyBcXFxcXFxcInN0YXJ0PVxcXFxcXFwiICsgKHBhZ2UgLSAxKSAqIGNvdW50XFxcXHJcXFxcbiAgICAgICAgICAgICsgXFxcXFxcXCImY291bnQ9XFxcXFxcXCIgKyBjb3VudCA6IFxcXFxcXFwic3RhcnQ9MCZjb3VudD0zMFxcXFxcXFwiKVxcXFxyXFxcXG4gICAgICAgICAgICArIFxcXFxcXFwiJnE9XFxcXFxcXCIgKyB0ZW1wLnN1YnR5cGVcXFxcclxcXFxuICAgICAgICAgICAgKyBcXFxcXFxcIixcXFxcXFxcIiArICh0ZW1wLmxvY2FsPT1cXFxcXFxcIuiHquWumuS5ieWcsOWMulxcXFxcXFwiID8gdGVtcC5jdXN0b21Mb2NhbCA6IHRlbXAubG9jYWwpXFxcXHJcXFxcbiAgICAgICAgICAgICsgXFxcXFxcXCIsXFxcXFxcXCIgKyAodGVtcC50eXBlPT1cXFxcXFxcIuiHquWumuS5ieexu+Wei1xcXFxcXFwiID8gdGVtcC5jdXN0b21UeXBlIDogdGVtcC50eXBlKVxcXFxyXFxcXG4gICAgICAgICAgICArIFxcXFxcXFwiLFxcXFxcXFwiICsgKHRlbXAueWVhcj09XFxcXFxcXCLoh6rlrprkuYnlubTku71cXFxcXFxcIiA/IHRlbXAuY3VzdG9tWWVhciA6IHRlbXAueWVhcilcXFxcclxcXFxuICAgICAgICAgICAgKyBcXFxcXFxcIixcXFxcXFxcIiArICh0ZW1wLmNsYXNzPT1cXFxcXFxcIuiHquWumuS5ieagh+etvlxcXFxcXFwiID8gdGVtcC5jdXN0b21DbGFzcyA6IHRlbXAuY2xhc3MpXFxcXHJcXFxcbiAgICAgICAgICAgICsgXFxcXFxcXCImc29ydD1cXFxcXFxcIiArIHRlbXAucmFuayArIFxcXFxcXFwiJnNjb3JlX3JhbmdlPVxcXFxcXFwiICsgdGVtcC5zY29yZSArICcmZmlsdGVyPScgKyB0ZW1wLmZpbHRlcik7XFxcXHJcXFxcbiAgICBsZXQgbCA9IHMuZGF0YTtcXFxcclxcXFxuXFxcXHJcXFxcbiAgICBsZXQgZGV0YWlsc1ZpZXdDb25maWdzID0gZ2V0Q29uZmlnKCdkZXRhaWxzVmlld0NvbmZpZ3MnKTtcXFxcclxcXFxuICAgIGxldCBpID0gbC5tYXAoKGUgPT4ge1xcXFxyXFxcXG4gICAgICAgIGxldCB0eXBlID0gZS50eXBlLFxcXFxyXFxcXG4gICAgICAgICAgICBpZCA9IGUuaWQsXFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlID0gZS50aXRsZTtcXFxcclxcXFxuICAgICAgICBsZXQgdXNlQ29uZmlnID0gZGV0YWlsc1ZpZXdDb25maWdzW2RldGFpbHNWaWV3Q29uZmlncy51c2VdLmNvbmZpZztcXFxcclxcXFxuICAgICAgICBsZXQgdXJsUGFyYW1zID0ge307XFxcXHJcXFxcbiAgICAgICAgaWYgKHVzZUNvbmZpZy5zdGFydHNXaXRoKCd7JykpIHtcXFxcclxcXFxuICAgICAgICAgICAgZXZhbCgndXJsUGFyYW1zID0gJyArIHVzZUNvbmZpZyk7XFxcXHJcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcclxcXFxuICAgICAgICAgICAgdXJsUGFyYW1zLnVybCA9ICQoXFxcXFxcXCJoaWtlcjovL2VtcHR5I25vSGlzdG9yeSMjaW1tZXJzaXZlVGhlbWUjXFxcXFxcXCIgKyAnP3R5cGU9JyArIHR5cGUgKyAnJmlkPScgKyBpZCkucnVsZSgodHlwZSwgaWQsIHRpdGxlLCB1c2VDb25maWcpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcXFxcXFxcInBsYXlsaXN0XFxcXFxcXCIpIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBkb3VMaXN0KGlkLCBNWV9QQUdFLCA1MCk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGV2YWwodXNlQ29uZmlnKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICAgICAgfSwgdHlwZSwgaWQsIHRpdGxlLCB1c2VDb25maWcpO1xcXFxyXFxcXG4gICAgICAgIH1cXFxcclxcXFxuICAgICAgICByZXR1cm4ge1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogdGl0bGUsXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMycsXFxcXHJcXFxcbiAgICAgICAgICAgIHVybDogdXJsUGFyYW1zLnVybCxcXFxcclxcXFxuICAgICAgICAgICAgZXh0cmE6IHVybFBhcmFtcy5leHRyYSxcXFxcclxcXFxuICAgICAgICAgICAgaW1nOiBlLmNvdmVyX3VybCArIFxcXFxcXFwiQFJlZmVyZXI9XFxcXFxcXCIgKyBlLmNvdmVyX3VybCxcXFxcclxcXFxuICAgICAgICAgICAgZGVzYzogZS5udWxsX3JhdGluZ19yZWFzb24gfHwgZS5yYXRpbmcudmFsdWVcXFxcclxcXFxuICAgICAgICB9XFxcXHJcXFxcbiAgICB9KSk7XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgcmV0dXJuIHBhZ2UgPiAxID8gaSA6IGEuY29uY2F0KGkpO1xcXFxyXFxcXG59XFxcXHJcXFxcblxcXFxyXFxcXG4vL+eJh+WNlVxcXFxyXFxcXG5mdW5jdGlvbiBwbGF5TGlzdChwYWdlLCBjb3VudCkge1xcXFxyXFxcXG4gICAgaWYgKCFnZXRNeVZhcigncGxheWxpc3QnKSkgcHV0TXlWYXIoJ3BsYXlsaXN0JywgJ3tcXFxcXFxcInN1YnR5cGVcXFxcXFxcIjpcXFxcXFxcIlxcXFxcXFwiLFxcXFxcXFwidHlwZVxcXFxcXFwiOlxcXFxcXFwiYWxsXFxcXFxcXCJ9Jyk7XFxcXHJcXFxcbiAgICBsZXQgYSA9IFtdO1xcXFxyXFxcXG4gICAgbGV0IHRlbXAgPSBKU09OLnBhcnNlKGdldE15VmFyKCdwbGF5bGlzdCcsICd7XFxcXFxcXCJzdWJ0eXBlXFxcXFxcXCI6XFxcXFxcXCJcXFxcXFxcIixcXFxcXFxcInR5cGVcXFxcXFxcIjpcXFxcXFxcImFsbFxcXFxcXFwifScpKTtcXFxcclxcXFxuICAgIGxldCBjb2xvciA9IGdldENvbmZpZygnY2hvb3NlQ29sb3InKTtcXFxcclxcXFxuXFxcXHJcXFxcbiAgICBsZXQgaXRlbXMgPSB7XFxcXHJcXFxcbiAgICAgICAgdHlwZToge1xcXFxyXFxcXG4gICAgICAgICAgICDlhajpg6g6IFxcXFxcXFwiYWxsXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIOixhueTo+eJh+WNlTogXFxcXFxcXCJvZmZpY2lhbFxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICDnsr7pgIk6IFxcXFxcXFwic2VsZWN0ZWRcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAg57uP5YW4OiBcXFxcXFxcImNsYXNzaWNhbFxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICDojrflpZY6IFxcXFxcXFwicHJpemVcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAg6auY5YiGOiBcXFxcXFxcImhpZ2hfc2NvcmVcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAg5qac5Y2VOiBcXFxcXFxcIm1vdmllX2xpc3RcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAg5Ya36Zeo5L2z54mHOiBcXFxcXFxcImRhcmtfaG9yc2VcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAg5Li76aKYOiBcXFxcXFxcInRvcGljXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIOWvvOa8lDogXFxcXFxcXCJkaXJlY3RvclxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICDmvJTlkZg6IFxcXFxcXFwiYWN0b3JcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAg57O75YiXOiBcXFxcXFxcInNlcmllc1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICDljY7or606IFxcXFxcXFwiY2hpbmVzZVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICDmrKfnvo46IFxcXFxcXFwid2VzdGVyblxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICDml6XmnKw6IFxcXFxcXFwiamFwYW5lc2VcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAg6Z+p5Zu9OiBcXFxcXFxcImtvcmVhXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIOWWnOWJpzogXFxcXFxcXCJjb21lZHlcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAg5Yqo5L2cOiBcXFxcXFxcImFjdGlvblxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICDniLHmg4U6IFxcXFxcXFwibG92ZVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICDnp5Hlubs6IFxcXFxcXFwic2NpZW5jZV9maWN0aW9uXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIOWKqOeUuzogXFxcXFxcXCJjYXJ0b29uXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIOaCrOeWkTogXFxcXFxcXCJteXN0ZXJ5XFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIOaDiuaCmjogXFxcXFxcXCJwYW5pY1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICDmgZDmgJY6IFxcXFxcXFwiaG9ycmlibGVcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAg54qv572qOiBcXFxcXFxcImNyaW1pbmFsXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIOWQjOaApzogXFxcXFxcXCJsZ2J0XFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIOaImOS6iTogXFxcXFxcXCJ3YXJcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAg5aWH5bm7OiBcXFxcXFxcImZhbnRhc3lcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAgXFxcXFxcXCJcXFxcXFxcXHU2MGM1XFxcXFxcXFx1ODI3MlxcXFxcXFwiOiBcXFxcXFxcImVyb3RpY2FcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAg6Z+z5LmQOiBcXFxcXFxcIm11c2ljXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIOe6quW9leeJhzogXFxcXFxcXCJkb2N1bWVudGFyeVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICDmsrvmhIg6IFxcXFxcXFwiY3VyZVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICDoibrmnK86IFxcXFxcXFwiYXJ0XFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIOm7keiJsuW5vem7mDogXFxcXFxcXCJkYXJrX2h1bW9yXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIOmdkuaYpTogXFxcXFxcXCJ5b3V0aFxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICDlpbPmgKc6IFxcXFxcXFwiZmVtYWxlXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIOecn+WunuS6i+S7tuaUuee8ljogXFxcXFxcXCJyZWFsX2V2ZW50XFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIOaatOWKmzogXFxcXFxcXCJ2aW9sZW5jZVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICDpu5Hnmb06IFxcXFxcXFwiYmxhY2tfd2hpdGVcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAg576O6aOfOiBcXFxcXFxcImZvb2RcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAg5peF6KGMOiBcXFxcXFxcInRyYXZlbFxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICDlhL/nq6U6IFxcXFxcXFwiY2hpbGRcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAg5Lq65oCnOiBcXFxcXFxcImh1bWFuaXR5XFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIOWutuW6rTogXFxcXFxcXCJmYW1pbHlcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAg5paH6Im6OiBcXFxcXFxcImxpdGVyYXJ5X2FydFxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICDlsI/or7TmlLnnvJY6IFxcXFxcXFwibm92ZWxcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAg5oSf5Lq6OiBcXFxcXFxcIm1vdmluZ1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICDlirHlv5c6IFxcXFxcXFwiaW5zcGlyYXRpb25cXFxcXFxcIlxcXFxyXFxcXG4gICAgICAgIH0sXFxcXHJcXFxcbiAgICAgICAgc3VidHlwZToge1xcXFxyXFxcXG4gICAgICAgICAgICDlhajpg6g6IFxcXFxcXFwiXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIOeUteW9sTogXFxcXFxcXCJtb3ZpZVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICDnlLXop4bliac6IFxcXFxcXFwidHZcXFxcXFxcIlxcXFxyXFxcXG4gICAgICAgIH1cXFxcclxcXFxuICAgIH1cXFxcclxcXFxuICAgIGZvciAobGV0IGkgaW4gaXRlbXMpIHtcXFxcclxcXFxuICAgICAgICBmb3IgKGxldCBqIGluIGl0ZW1zW2ldKSB7XFxcXHJcXFxcbiAgICAgICAgICAgIGEucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogdGVtcFtpXSA9PT0gaXRlbXNbaV1bal0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIGogKyAnIDwvZm9udD48L2I+JyA6IGosXFxcXHJcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5I25vTG9hZGluZyMnKS5sYXp5UnVsZSgodCkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcigncGxheWxpc3QnLCAne1xcXFxcXFwic3VidHlwZVxcXFxcXFwiOlxcXFxcXFwiXFxcXFxcXCIsXFxcXFxcXCJ0eXBlXFxcXFxcXCI6XFxcXFxcXCJhbGxcXFxcXFxcIn0nKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgdGVtcFt0WzBdXSA9IHRbMV07XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCJwbGF5bGlzdFxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9LCBbaSwgaXRlbXNbaV1bal1dKVxcXFxyXFxcXG4gICAgICAgICAgICB9KVxcXFxyXFxcXG4gICAgICAgIH1cXFxcclxcXFxuICAgICAgICBhLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJibGFua19ibG9ja1xcXFxcXFwiXFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuICAgIH1cXFxcclxcXFxuXFxcXHJcXFxcbiAgICBsZXQgcyA9IGdldERvdWJhblJlcyhcXFxcXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvc2t5bmV0L25ld19wbGF5bGlzdHNcXFxcXFxcIiArIFxcXFxcXFwiP2NhdGVnb3J5PVxcXFxcXFwiICsgdGVtcC50eXBlICsgXFxcXFxcXCImc3ViamVjdF90eXBlPVxcXFxcXFwiICsgdGVtcC5zdWJ0eXBlICsgKHBhZ2UgPyBcXFxcXFxcIiZzdGFydD1cXFxcXFxcIiArIChwYWdlIC0gMSkgKiBjb3VudCArIFxcXFxcXFwiJmNvdW50PVxcXFxcXFwiICsgY291bnQgOiBcXFxcXFxcIiZzdGFydD0wJmNvdW50PTEwXFxcXFxcXCIpKTtcXFxcclxcXFxuICAgIGxldCBsID0gcy5kYXRhWzBdLml0ZW1zO1xcXFxyXFxcXG5cXFxcclxcXFxuICAgIGxldCBpID0gbC5tYXAoKGUgPT4gKHtcXFxcclxcXFxuICAgICAgICB0aXRsZTogZS50aXRsZSxcXFxcclxcXFxuICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkvJHBhZ2V7ZnlwYWdlfSNub0hpc3RvcnkjJykucnVsZSgodHlwZSwgaWQpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcXFxyXFxcXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gXFxcXFxcXCJwbGF5bGlzdFxcXFxcXFwiKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBkb3VMaXN0KGlkLCBNWV9QQUdFLCA1MCk7XFxcXHJcXFxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBzdWJqZWN0Q29sbGVjdGlvbkxpc3QoTVlfUEFHRSwgNTAsIGlkKTtcXFxcclxcXFxuICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgIH0sIGUudHlwZSwgZS5pZCksXFxcXHJcXFxcbiAgICAgICAgaW1nOiBlLmNvdmVyX3VybCArIFxcXFxcXFwiQFJlZmVyZXI9XFxcXFxcXCIgKyBlLmNvdmVyX3VybCxcXFxcclxcXFxuICAgICAgICBkZXNjOiBcXFxcXFxcIuWFsVxcXFxcXFwiICsgZS5pdGVtc19jb3VudCArIFxcXFxcXFwi6YOoXFxcXFxcXCJcXFxcclxcXFxuICAgIH0pKSk7XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgcmV0dXJuIHBhZ2UgPiAxID8gaSA6IGEuY29uY2F0KGkpO1xcXFxyXFxcXG59XFxcXHJcXFxcblxcXFxyXFxcXG4vL+amnOWNlVxcXFxyXFxcXG5mdW5jdGlvbiByYW5rTGlzdChwYWdlLCBjb3VudCkge1xcXFxyXFxcXG4gICAgaWYgKCFnZXRNeVZhcigncmFua0xpc3QnKSkgcHV0TXlWYXIoJ3JhbmtMaXN0JywgJ3tcXFxcXFxcInR5cGVcXFxcXFxcIjpcXFxcXFxcIm1vdmllXFxcXFxcXCIsXFxcXFxcXCJsaXN0XFxcXFxcXCI6XFxcXFxcXCJyYW5rX2xpc3RcXFxcXFxcIixcXFxcXFxcInllYXJfbGlzdHNcXFxcXFxcIjpbXSxcXFxcXFxcImNhdGVnb3J5X2xpc3RzXFxcXFxcXCI6W10sXFxcXFxcXCJ5ZWFyXFxcXFxcXCI6XFxcXFxcXCJcXFxcXFxcIixcXFxcXFxcImNhdGVnb3J5XFxcXFxcXCI6XFxcXFxcXCJcXFxcXFxcIn0nKTtcXFxcclxcXFxuICAgIGxldCBhID0gW107XFxcXHJcXFxcbiAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ3JhbmtMaXN0JykpO1xcXFxyXFxcXG4gICAgbGV0IGNvbG9yID0gZ2V0Q29uZmlnKCdjaG9vc2VDb2xvcicpO1xcXFxyXFxcXG5cXFxcclxcXFxuICAgIGxldCBpdGVtcyA9IHtcXFxcclxcXFxuICAgICAgICDnlLXlvbE6ICdtb3ZpZScsXFxcXHJcXFxcbiAgICAgICAg55S16KeG5YmnOiAndHYnXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBmb3IgKGxldCBpIGluIGl0ZW1zKSB7XFxcXHJcXFxcbiAgICAgICAgYS5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGU6IHRlbXAudHlwZSA9PSBpdGVtc1tpXSA/ICfigJzigJzigJ3igJ08Yj4gPGZvbnQgY29sb3I9JyArIGNvbG9yICsgJz4nICsgaSArICcgPC9mb250PjwvYj4nIDogaSxcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXFxcclxcXFxuICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5I25vTG9hZGluZyMnKS5sYXp5UnVsZSgoZSkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgbGV0IHRlbXAgPSBKU09OLnBhcnNlKGdldE15VmFyKCdyYW5rTGlzdCcpKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHRlbXAudHlwZSA9IGU7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcInJhbmtMaXN0XFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KHRlbXApKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxcXHJcXFxcbiAgICAgICAgICAgIH0sIGl0ZW1zW2ldKVxcXFxyXFxcXG4gICAgICAgIH0pXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgYS5wdXNoKHtcXFxcclxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJibGFua19ibG9ja1xcXFxcXFwiXFxcXHJcXFxcbiAgICB9KVxcXFxyXFxcXG5cXFxcclxcXFxuICAgIGxldCBsaXN0ID0ge1xcXFxyXFxcXG4gICAgICAgIOWPo+eikeamnOWNlTogJ3JhbmtfbGlzdCcsXFxcXHJcXFxcbiAgICAgICAg5bm05bqm5qac5Y2VOiAneWVhcl9yYW5rcycsXFxcXHJcXFxcbiAgICAgICAg57G75Z6L5qac5Y2VOiAnY2F0ZWdvcnlfcmFua3MnXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBmb3IgKGxldCBpIGluIGxpc3QpIHtcXFxcclxcXFxuICAgICAgICBhLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogdGVtcC5saXN0ID09IGxpc3RbaV0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIGkgKyAnIDwvZm9udD48L2I+JyA6IGksXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxcXHJcXFxcbiAgICAgICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eSNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGUpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcigncmFua0xpc3QnKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0ZW1wLmxpc3QgPSBlO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCJyYW5rTGlzdFxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcXFxyXFxcXG4gICAgICAgICAgICB9LCBsaXN0W2ldKVxcXFxyXFxcXG4gICAgICAgIH0pXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgaWYgKHRlbXAubGlzdCA9PSAneWVhcl9yYW5rcycgJiYgdGVtcC55ZWFyX2xpc3RzLmxlbmd0aCA9PSAwKSB7XFxcXHJcXFxcbiAgICAgICAgbGV0IHQgPSBnZXREb3ViYW5SZXMoXFxcXFxcXCJodHRwczovL2Zyb2RvLmRvdWJhbi5jb20vYXBpL3YyL1xcXFxcXFwiICsgdGVtcC50eXBlICsgJy9yYW5rX2xpc3QnKTtcXFxcclxcXFxuICAgICAgICB0ZW1wLnllYXJfbGlzdHMgPSB0Lmdyb3Vwc1sxXS50YWJzO1xcXFxyXFxcXG4gICAgICAgIHB1dE15VmFyKCdyYW5rTGlzdCcsIEpTT04uc3RyaW5naWZ5KHRlbXApKTtcXFxcclxcXFxuICAgIH0gZWxzZSBpZiAodGVtcC5saXN0ID09ICdjYXRlZ29yeV9yYW5rcycgJiYgdGVtcC5jYXRlZ29yeV9saXN0cy5sZW5ndGggPT0gMCkge1xcXFxyXFxcXG4gICAgICAgIGxldCB0ID0gZ2V0RG91YmFuUmVzKFxcXFxcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9cXFxcXFxcIiArIHRlbXAudHlwZSArICcvcmFua19saXN0Jyk7XFxcXHJcXFxcbiAgICAgICAgdGVtcC5jYXRlZ29yeV9saXN0cyA9IHQuZ3JvdXBzWzJdLnRhYnM7XFxcXHJcXFxcbiAgICAgICAgcHV0TXlWYXIoJ3JhbmtMaXN0JywgSlNPTi5zdHJpbmdpZnkodGVtcCkpO1xcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG5cXFxcclxcXFxuICAgIGlmICh0ZW1wLmxpc3QgPT0gJ3llYXJfcmFua3MnKSB7XFxcXHJcXFxcbiAgICAgICAgYS5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiYmxhbmtfYmxvY2tcXFxcXFxcIlxcXFxyXFxcXG4gICAgICAgIH0pXFxcXHJcXFxcbiAgICAgICAgaWYgKCF0ZW1wLnllYXIpIHRlbXAueWVhciA9IHRlbXAueWVhcl9saXN0c1swXS5rZXk7XFxcXHJcXFxcbiAgICAgICAgZm9yIChsZXQgdCBvZiB0ZW1wLnllYXJfbGlzdHMpIHtcXFxcclxcXFxuICAgICAgICAgICAgYS5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0ZW1wLnllYXIgPT0gdC5rZXkgPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIHQudGl0bGUgKyAnIDwvZm9udD48L2I+JyA6IHQudGl0bGUsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5I25vTG9hZGluZyMnKS5sYXp5UnVsZSgoZSkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcigncmFua0xpc3QnKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgdGVtcC55ZWFyID0gZTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcInJhbmtMaXN0XFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KHRlbXApKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcclxcXFxuICAgICAgICAgICAgICAgIH0sIHQua2V5KVxcXFxyXFxcXG4gICAgICAgICAgICB9KVxcXFxyXFxcXG4gICAgICAgIH1cXFxcclxcXFxuICAgIH0gZWxzZSBpZiAodGVtcC5saXN0ID09ICdjYXRlZ29yeV9yYW5rcycpIHtcXFxcclxcXFxuICAgICAgICBhLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJibGFua19ibG9ja1xcXFxcXFwiXFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuICAgICAgICBpZiAoIXRlbXAuY2F0ZWdvcnkpIHRlbXAuY2F0ZWdvcnkgPSB0ZW1wLmNhdGVnb3J5X2xpc3RzWzBdLmtleTtcXFxcclxcXFxuICAgICAgICBmb3IgKGxldCB0IG9mIHRlbXAuY2F0ZWdvcnlfbGlzdHMpIHtcXFxcclxcXFxuICAgICAgICAgICAgYS5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0ZW1wLmNhdGVnb3J5ID09IHQua2V5ID8gJ+KAnOKAnOKAneKAnTxiPiA8Zm9udCBjb2xvcj0nICsgY29sb3IgKyAnPicgKyB0LnRpdGxlICsgJyA8L2ZvbnQ+PC9iPicgOiB0LnRpdGxlLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXFxcclxcXFxuICAgICAgICAgICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eSNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGUpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ3JhbmtMaXN0JykpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHRlbXAuY2F0ZWdvcnkgPSBlO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwicmFua0xpc3RcXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkodGVtcCkpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgfSwgdC5rZXkpXFxcXHJcXFxcbiAgICAgICAgICAgIH0pXFxcXHJcXFxcbiAgICAgICAgfVxcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG5cXFxcclxcXFxuICAgIGxldCBsID0gW107XFxcXHJcXFxcbiAgICBpZiAodGVtcC5saXN0ID09ICdyYW5rX2xpc3QnICYmIE1ZX1BBR0UgPT0gMSkge1xcXFxyXFxcXG4gICAgICAgIGxldCBzID0gZ2V0RG91YmFuUmVzKFxcXFxcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9cXFxcXFxcIiArIHRlbXAudHlwZSArICcvJyArIHRlbXAubGlzdCArIChwYWdlID8gXFxcXFxcXCI/c3RhcnQ9XFxcXFxcXCIgKyAocGFnZSAtIDEpICogY291bnQgKyBcXFxcXFxcIiZjb3VudD1cXFxcXFxcIiArIGNvdW50IDogXFxcXFxcXCI/c3RhcnQ9MCZjb3VudD0xMFxcXFxcXFwiKSk7XFxcXHJcXFxcbiAgICAgICAgbCA9IHMuZ3JvdXBzWzBdLnNlbGVjdGVkX2NvbGxlY3Rpb25zO1xcXFxyXFxcXG4gICAgfSBlbHNlIGlmICh0ZW1wLmxpc3QgPT0gJ3llYXJfcmFua3MnICYmIE1ZX1BBR0UgPT0gMSkge1xcXFxyXFxcXG4gICAgICAgIGxldCBzID0gZ2V0RG91YmFuUmVzKFxcXFxcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9cXFxcXFxcIiArIHRlbXAudHlwZSArICcvJyArIHRlbXAubGlzdCArICc/eWVhcj0nICsgdGVtcC55ZWFyICsgKHBhZ2UgPyBcXFxcXFxcIiZzdGFydD1cXFxcXFxcIiArIChwYWdlIC0gMSkgKiBjb3VudCArIFxcXFxcXFwiJmNvdW50PVxcXFxcXFwiICsgY291bnQgOiBcXFxcXFxcIiZzdGFydD0wJmNvdW50PTEwXFxcXFxcXCIpKTtcXFxcclxcXFxuICAgICAgICBsID0gcy5ncm91cHNbMF0uc2VsZWN0ZWRfY29sbGVjdGlvbnM7XFxcXHJcXFxcbiAgICB9IGVsc2UgaWYgKHRlbXAubGlzdCA9PSAnY2F0ZWdvcnlfcmFua3MnKSB7XFxcXHJcXFxcbiAgICAgICAgbGV0IHMgPSBnZXREb3ViYW5SZXMoXFxcXFxcXCJodHRwczovL2Zyb2RvLmRvdWJhbi5jb20vYXBpL3YyL1xcXFxcXFwiICsgdGVtcC50eXBlICsgJy8nICsgdGVtcC5saXN0ICsgJz9jYXRlZ29yeT0nICsgdGVtcC5jYXRlZ29yeSArIChwYWdlID8gXFxcXFxcXCImc3RhcnQ9XFxcXFxcXCIgKyAocGFnZSAtIDEpICogY291bnQgKyBcXFxcXFxcIiZjb3VudD1cXFxcXFxcIiArIGNvdW50IDogXFxcXFxcXCImc3RhcnQ9MCZjb3VudD0xMFxcXFxcXFwiKSk7XFxcXHJcXFxcbiAgICAgICAgbCA9IHMuc2VsZWN0ZWRfY29sbGVjdGlvbnM7XFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgbGV0IGkgPSBbXTtcXFxcclxcXFxuICAgIGlmICh0ZW1wLmxpc3QgPT0gJ2NhdGVnb3J5X3JhbmtzJykge1xcXFxyXFxcXG4gICAgICAgIGkgPSBsLm1hcCgoZSA9PiAoe1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogJ+KAnOKAnOKAneKAnScgKyBlLnRpdGxlLmJvbGQoKSxcXFxcclxcXFxuICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5LyRwYWdle2Z5cGFnZX0jbm9IaXN0b3J5IycpLnJ1bGUoKHR5cGUsIGlkKSA9PiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gXFxcXFxcXCJwbGF5bGlzdFxcXFxcXFwiKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgZG91TGlzdChpZCwgTVlfUEFHRSwgNTApO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBzdWJqZWN0Q29sbGVjdGlvbkxpc3QoTVlfUEFHRSwgNTAsIGlkKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICAgICAgfSwgZS50eXBlLCBlLmlkKSxcXFxcclxcXFxuICAgICAgICAgICAgaW1nOiBlLmNvdmVyX3VybCArIFxcXFxcXFwiQFJlZmVyZXI9XFxcXFxcXCIgKyBlLmNvdmVyX3VybCxcXFxcclxcXFxuICAgICAgICAgICAgZGVzYzogXFxcXFxcXCLlhbFcXFxcXFxcIiArIGUudG90YWwgKyBcXFxcXFxcIumDqFxcXFxcXFwiXFxcXHJcXFxcbiAgICAgICAgfSkpKTtcXFxcclxcXFxuICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgaSA9IGwubWFwKChlID0+ICh7XFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlOiAnJyAvKifigJzigJzigJ3igJ0nICsgZS5tZWRpdW1fbmFtZSArICdcXFxcXFxcXG4nICsgZ2V0U3Ryb25nVGV4dChlLnRpdGxlKSovICxcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdjYXJkX3BpY18yJyxcXFxcclxcXFxuICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5LyRwYWdle2Z5cGFnZX0jbm9IaXN0b3J5IycpLnJ1bGUoKHR5cGUsIGlkLCBzdGl0bGUpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHNldFBhZ2VUaXRsZShzdGl0bGUpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFxcXFxcXFwicGxheWxpc3RcXFxcXFxcIikge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGRvdUxpc3QoaWQsIE1ZX1BBR0UsIDUwKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgc3ViamVjdENvbGxlY3Rpb25MaXN0KE1ZX1BBR0UsIDUwLCBpZCk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgICAgIH0sIGUudHlwZSwgZS5pZCwgZS50aXRsZSksXFxcXHJcXFxcbiAgICAgICAgICAgIGltZzogZS5jb3Zlcl91cmwgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiICsgZS5jb3Zlcl91cmwsXFxcXHJcXFxcbiAgICAgICAgICAgIGRlc2M6IFxcXFxcXFwiMFxcXFxcXFwiXFxcXHJcXFxcbiAgICAgICAgfSkpKTtcXFxcclxcXFxuICAgIH1cXFxcclxcXFxuXFxcXHJcXFxcbiAgICByZXR1cm4gcGFnZSA+IDEgPyBpIDogYS5jb25jYXQoaSk7XFxcXHJcXFxcbn1cXFxcclxcXFxuXFxcXHJcXFxcbi8v5bCG5LiK5pigXFxcXHJcXFxcbmZ1bmN0aW9uIGNvbWluZ0xpc3QocGFnZSwgY291bnQpIHtcXFxcclxcXFxuICAgIGlmICghZ2V0TXlWYXIoJ2NvbWluZycpKSBwdXRNeVZhcignY29taW5nJywgJ3tcXFxcXFxcInR5cGVcXFxcXFxcIjpcXFxcXFxcIm1vdmllXFxcXFxcXCIsXFxcXFxcXCJyYW5rXFxcXFxcXCI6XFxcXFxcXCImc29ydGJ5PWhvdFxcXFxcXFwiLFxcXFxcXFwibG9jYWxcXFxcXFxcIjpcXFxcXFxcImRvbWVzdGljXFxcXFxcXCIsXFxcXFxcXCJhcmVhXFxcXFxcXCI6XFxcXFxcXCJcXFxcXFxcIixcXFxcXFxcImZpbHRlclxcXFxcXFwiOlxcXFxcXFwiXFxcXFxcXCJ9Jyk7XFxcXHJcXFxcbiAgICBsZXQgYSA9IFtdO1xcXFxyXFxcXG4gICAgbGV0IHRlbXAgPSBKU09OLnBhcnNlKGdldE15VmFyKCdjb21pbmcnKSk7XFxcXHJcXFxcbiAgICBsZXQgY29sb3IgPSBnZXRDb25maWcoJ2Nob29zZUNvbG9yJyk7XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgbGV0IGl0ZW1zID0ge1xcXFxyXFxcXG4gICAgICAgIOeUteW9sTogJ21vdmllJyxcXFxcclxcXFxuICAgICAgICDnlLXop4bliac6ICd0didcXFxcclxcXFxuICAgIH1cXFxcclxcXFxuICAgIGZvciAobGV0IGkgaW4gaXRlbXMpIHtcXFxcclxcXFxuICAgICAgICBhLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogdGVtcC50eXBlID09PSBpdGVtc1tpXSA/ICfigJzigJzigJ3igJ08Yj4gPGZvbnQgY29sb3I9JyArIGNvbG9yICsgJz4nICsgaSArICcgPC9mb250PjwvYj4nIDogaSxcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXFxcclxcXFxuICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5I25vTG9hZGluZyMnKS5sYXp5UnVsZSgoZSkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgbGV0IHRlbXAgPSBKU09OLnBhcnNlKGdldE15VmFyKCdjb21pbmcnKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0ZW1wLnR5cGUgPSBlO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCJjb21pbmdcXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkodGVtcCkpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcclxcXFxuICAgICAgICAgICAgfSwgaXRlbXNbaV0pXFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuICAgIH1cXFxcclxcXFxuICAgIGxldCByYW5rID0ge1xcXFxyXFxcXG4gICAgICAgIOeDreW6pjogJyZzb3J0Ynk9aG90JyxcXFxcclxcXFxuICAgICAgICDml7bpl7Q6ICcnXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBhLnB1c2goe1xcXFxyXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImJsYW5rX2Jsb2NrXFxcXFxcXCJcXFxcclxcXFxuICAgIH0pXFxcXHJcXFxcbiAgICBmb3IgKGxldCBpIGluIHJhbmspIHtcXFxcclxcXFxuICAgICAgICBhLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogdGVtcC5yYW5rID09PSByYW5rW2ldID8gJ+KAnOKAnOKAneKAnTxiPiA8Zm9udCBjb2xvcj0nICsgY29sb3IgKyAnPicgKyBpICsgJyA8L2ZvbnQ+PC9iPicgOiBpLFxcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcXFxyXFxcXG4gICAgICAgICAgICB1cmw6ICQoJ2hpa2VyOi8vZW1wdHkjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChlKSA9PiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2NvbWluZycpKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHRlbXAucmFuayA9IGU7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcImNvbWluZ1xcXFxcXFwiLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcXFxyXFxcXG4gICAgICAgICAgICB9LCByYW5rW2ldKVxcXFxyXFxcXG4gICAgICAgIH0pXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBsZXQgbG9jYWwgPSB7XFxcXHJcXFxcbiAgICAgICAg5Zu95YaFOiAnZG9tZXN0aWMnLFxcXFxyXFxcXG4gICAgICAgIOWFqOeQgzogJ2ludGVybmF0aW9uYWwnXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBpZiAodGVtcC50eXBlID09ICdtb3ZpZScpIHtcXFxcclxcXFxuICAgICAgICBhLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJibGFua19ibG9ja1xcXFxcXFwiXFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuICAgICAgICBmb3IgKGxldCBpIGluIGxvY2FsKSB7XFxcXHJcXFxcbiAgICAgICAgICAgIGEucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogdGVtcC5sb2NhbCA9PT0gbG9jYWxbaV0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIGkgKyAnIDwvZm9udD48L2I+JyA6IGksXFxcXHJcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5I25vTG9hZGluZyMnKS5sYXp5UnVsZSgoZSkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcignY29taW5nJykpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHRlbXAubG9jYWwgPSBlO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiY29taW5nXFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KHRlbXApKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcclxcXFxuICAgICAgICAgICAgICAgIH0sIGxvY2FsW2ldKVxcXFxyXFxcXG4gICAgICAgICAgICB9KVxcXFxyXFxcXG4gICAgICAgIH1cXFxcclxcXFxuICAgIH1cXFxcclxcXFxuICAgIGxldCBhcmVhID0ge1xcXFxyXFxcXG4gICAgICAgIOWFqOmDqDogJycsXFxcXHJcXFxcbiAgICAgICAg576O5Zu9OiAnJmFyZWFfZmlsdGVyPWFtZXJpY2FuJyxcXFxcclxcXFxuICAgICAgICDmrKfmtLI6ICcmYXJlYV9maWx0ZXI9ZXVyb3BlJyxcXFxcclxcXFxuICAgICAgICDml6XmnKw6ICcmYXJlYV9maWx0ZXI9amFwYW5lc2UnLFxcXFxyXFxcXG4gICAgICAgIOmfqeWbvTogJyZhcmVhX2ZpbHRlcj1rb3JlYW4nXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBpZiAodGVtcC50eXBlID09ICdtb3ZpZScgJiYgdGVtcC5sb2NhbCA9PSAnaW50ZXJuYXRpb25hbCcpIHtcXFxcclxcXFxuICAgICAgICBhLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJibGFua19ibG9ja1xcXFxcXFwiXFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuICAgICAgICBmb3IgKGxldCBpIGluIGFyZWEpIHtcXFxcclxcXFxuICAgICAgICAgICAgYS5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0ZW1wLmFyZWEgPT09IGFyZWFbaV0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIGkgKyAnIDwvZm9udD48L2I+JyA6IGksXFxcXHJcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5I25vTG9hZGluZyMnKS5sYXp5UnVsZSgoZSkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcignY29taW5nJykpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHRlbXAuYXJlYSA9IGU7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCJjb21pbmdcXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkodGVtcCkpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgfSwgYXJlYVtpXSlcXFxcclxcXFxuICAgICAgICAgICAgfSlcXFxcclxcXFxuICAgICAgICB9XFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBsZXQgZmlsdGVyID0ge1xcXFxyXFxcXG4gICAgICAgIOWFqOmDqDogJycsXFxcXHJcXFxcbiAgICAgICAg5Zu95Lqn5YmnOiAnJnR5cGVfZmlsdGVyPXR2X2RvbWVzdGljJyxcXFxcclxcXFxuICAgICAgICDmrKfnvo7liac6ICcmdHlwZV9maWx0ZXI9dHZfYW1lcmljYW4nLFxcXFxyXFxcXG4gICAgICAgIOaXpeWJpzogJyZ0eXBlX2ZpbHRlcj10dl9qYXBhbmVzZScsXFxcXHJcXFxcbiAgICAgICAg6Z+p5YmnOiAnJnR5cGVfZmlsdGVyPXR2X2tvcmVhbicsXFxcXHJcXFxcbiAgICAgICAg5Yqo55S7OiAnJnR5cGVfZmlsdGVyPXR2X2FuaW1hdGlvbicsXFxcXHJcXFxcbiAgICAgICAg5Zu95YaF57u86Im6OiAnJnR5cGVfZmlsdGVyPXNob3dfZG9tZXN0aWMnLFxcXFxyXFxcXG4gICAgICAgIOWbveWklue7vOiJujogJyZ0eXBlX2ZpbHRlcj1zaG93X2ZvcmVpZ24nXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBpZiAodGVtcC50eXBlID09ICd0dicpIHtcXFxcclxcXFxuICAgICAgICBhLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJibGFua19ibG9ja1xcXFxcXFwiXFxcXHJcXFxcbiAgICAgICAgfSlcXFxcclxcXFxuICAgICAgICBmb3IgKGxldCBpIGluIGZpbHRlcikge1xcXFxyXFxcXG4gICAgICAgICAgICBhLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRlbXAuZmlsdGVyID09PSBmaWx0ZXJbaV0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIGkgKyAnIDwvZm9udD48L2I+JyA6IGksXFxcXHJcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5I25vTG9hZGluZyMnKS5sYXp5UnVsZSgoZSkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcignY29taW5nJykpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHRlbXAuZmlsdGVyID0gZTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcImNvbWluZ1xcXFxcXFwiLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9LCBmaWx0ZXJbaV0pXFxcXHJcXFxcbiAgICAgICAgICAgIH0pXFxcXHJcXFxcbiAgICAgICAgfVxcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG5cXFxcclxcXFxuICAgIGxldCBzID0gZ2V0RG91YmFuUmVzKFxcXFxcXFwiaHR0cHM6Ly9mcm9kby5kb3ViYW4uY29tL2FwaS92Mi9cXFxcXFxcIiArIHRlbXAudHlwZSArIFxcXFxcXFwiL2NvbWluZ19zb29uXFxcXFxcXCIgKyBcXFxcXFxcIj9hcmVhPVxcXFxcXFwiICsgdGVtcC5sb2NhbCArIHRlbXAucmFuayArIHRlbXAuYXJlYSArIHRlbXAuZmlsdGVyICsgKHBhZ2UgPyBcXFxcXFxcIiZzdGFydD1cXFxcXFxcIiArIChwYWdlIC0gMSkgKiBjb3VudCArIFxcXFxcXFwiJmNvdW50PVxcXFxcXFwiICsgY291bnQgOiBcXFxcXFxcIiZzdGFydD0wJmNvdW50PTEwXFxcXFxcXCIpKTtcXFxcclxcXFxuICAgIGxldCBsID0gcy5zdWJqZWN0cztcXFxcclxcXFxuICAgIGxldCBkZXRhaWxzVmlld0NvbmZpZ3MgPSBnZXRDb25maWcoJ2RldGFpbHNWaWV3Q29uZmlncycpO1xcXFxyXFxcXG5cXFxcclxcXFxuICAgIGxldCBpID0gbC5tYXAoKGUgPT4ge1xcXFxyXFxcXG4gICAgICAgIGxldCB0eXBlID0gZS50eXBlLFxcXFxyXFxcXG4gICAgICAgICAgICBpZCA9IGUuaWQsXFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlID0gZS50aXRsZTtcXFxcclxcXFxuICAgICAgICBsZXQgdXNlQ29uZmlnID0gZGV0YWlsc1ZpZXdDb25maWdzW2RldGFpbHNWaWV3Q29uZmlncy51c2VdLmNvbmZpZztcXFxcclxcXFxuICAgICAgICBsZXQgdXJsUGFyYW1zID0ge307XFxcXHJcXFxcbiAgICAgICAgaWYgKHVzZUNvbmZpZy5zdGFydHNXaXRoKCd7JykpIHtcXFxcclxcXFxuICAgICAgICAgICAgZXZhbCgndXJsUGFyYW1zID0gJyArIHVzZUNvbmZpZyk7XFxcXHJcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcclxcXFxuICAgICAgICAgICAgdXJsUGFyYW1zLnVybCA9ICQoXFxcXFxcXCJoaWtlcjovL2VtcHR5I25vSGlzdG9yeSMjaW1tZXJzaXZlVGhlbWUjXFxcXFxcXCIgKyAnP3R5cGU9JyArIHR5cGUgKyAnJmlkPScgKyBpZCkucnVsZSgodHlwZSwgaWQsIHRpdGxlLCB1c2VDb25maWcpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvbWFpbicpKS5ydWxlKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcXFxcXFxcInBsYXlsaXN0XFxcXFxcXCIpIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBkb3VMaXN0KGlkLCBNWV9QQUdFLCA1MCk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGV2YWwodXNlQ29uZmlnKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICAgICAgfSwgdHlwZSwgaWQsIHRpdGxlLCB1c2VDb25maWcpO1xcXFxyXFxcXG4gICAgICAgIH1cXFxcclxcXFxuICAgICAgICByZXR1cm4ge1xcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZTogdGl0bGUgKyBcXFxcXFxcIu+8iFxcXFxcXFwiICsgZS55ZWFyICsgXFxcXFxcXCLvvIlcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAgdXJsOiB1cmxQYXJhbXMudXJsLFxcXFxyXFxcXG4gICAgICAgICAgICBleHRyYTogdXJsUGFyYW1zLmV4dHJhLFxcXFxyXFxcXG4gICAgICAgICAgICBpbWc6IGUuY292ZXJfdXJsICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIiArIGUuY292ZXJfdXJsLFxcXFxyXFxcXG4gICAgICAgICAgICBkZXNjOiBcXFxcXFxcIuS4iuaYoOaXpeacnzpcXFxcXFxcIiArIGUucHViZGF0ZSArIFxcXFxcXFwiXFxcXFxcXFxuXFxcXFxcXCIgKyBlLndpc2hfY291bnQgKyBcXFxcXFxcIuS6uuaDs+eci1xcXFxcXFwiICsgXFxcXFxcXCJcXFxcXFxcXG5cXFxcXFxcIiArIGUubnVsbF9yYXRpbmdfcmVhc29uXFxcXHJcXFxcbiAgICAgICAgfVxcXFxyXFxcXG4gICAgfSkpO1xcXFxyXFxcXG5cXFxcclxcXFxuICAgIHJldHVybiBwYWdlID4gMSA/IGkgOiBhLmNvbmNhdChpKTtcXFxcclxcXFxufVxcXFxyXFxcXG5cXFxcclxcXFxuLy/niYfljZXor6bmg4VcXFxcclxcXFxuZnVuY3Rpb24gc3ViamVjdENvbGxlY3Rpb25MaXN0KHBhZ2UsIGNvdW50LCBpZCkge1xcXFxyXFxcXG4gICAgaWYgKCFnZXRNeVZhcigncmFua2luZycpKSBwdXRNeVZhcigncmFua2luZycsICd7XFxcXFxcXCJpdGVtXFxcXFxcXCI6XFxcXFxcXCJtb3ZpZV9yZWFsX3RpbWVfaG90ZXN0XFxcXFxcXCIsXFxcXFxcXCJwbGF5YWJsZVxcXFxcXFwiOlxcXFxcXFwiMFxcXFxcXFwiLFxcXFxcXFwic2NvcmVcXFxcXFxcIjpcXFxcXFxcIjAtMTBcXFxcXFxcIn0nKTtcXFxcclxcXFxuICAgIGxldCBhID0gW107XFxcXHJcXFxcbiAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ3JhbmtpbmcnKSk7XFxcXHJcXFxcbiAgICBsZXQgY29sb3IgPSBnZXRDb25maWcoJ2Nob29zZUNvbG9yJyk7XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgbGV0IGl0ZW1zID0ge1xcXFxyXFxcXG4gICAgICAgIOeUteW9sToge1xcXFxyXFxcXG4gICAgICAgICAgICDlrp7ml7bng63pl6jnlLXlvbE6ICdtb3ZpZV9yZWFsX3RpbWVfaG90ZXN0JyxcXFxcclxcXFxuICAgICAgICAgICAg5LiA5ZGo5Y+j56KR55S15b2xOiAnbW92aWVfd2Vla2x5X2Jlc3QnLFxcXFxyXFxcXG4gICAgICAgICAgICB0b3AyNTDnlLXlvbE6ICdtb3ZpZV90b3AyNTAnXFxcXHJcXFxcbiAgICAgICAgfSxcXFxcclxcXFxuICAgICAgICDnlLXop4bliac6IHtcXFxcclxcXFxuICAgICAgICAgICAg5a6e5pe254Ot6Zeo5Ymn6ZuGOiAndHZfcmVhbF90aW1lX2hvdGVzdCcsXFxcXHJcXFxcbiAgICAgICAgICAgIOWNjuivreWPo+eikeWJp+mbhjogJ3R2X2NoaW5lc2VfYmVzdF93ZWVrbHknLFxcXFxyXFxcXG4gICAgICAgICAgICDlhajnkIPlj6PnopHliafpm4Y6ICd0dl9nbG9iYWxfYmVzdF93ZWVrbHknXFxcXHJcXFxcbiAgICAgICAgfSxcXFxcclxcXFxuICAgICAgICDnu7zoibo6IHtcXFxcclxcXFxuICAgICAgICAgICAg5Zu95YaF5Y+j56KR57u86Im6OiAnc2hvd19jaGluZXNlX2Jlc3Rfd2Vla2x5JyxcXFxcclxcXFxuICAgICAgICAgICAg5Zu95aSW5Y+j56KR57u86Im6OiAnc2hvd19nbG9iYWxfYmVzdF93ZWVrbHknXFxcXHJcXFxcbiAgICAgICAgfVxcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG4gICAgZm9yIChsZXQgaSBpbiBpdGVtcykge1xcXFxyXFxcXG4gICAgICAgIGZvciAobGV0IGogaW4gaXRlbXNbaV0pIHtcXFxcclxcXFxuICAgICAgICAgICAgYS5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0ZW1wLml0ZW0gPT0gaXRlbXNbaV1bal0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIGogKyAnIDwvZm9udD48L2I+JyA6IGosXFxcXHJcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5I25vTG9hZGluZyMnKS5sYXp5UnVsZSgoZSkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gSlNPTi5wYXJzZShnZXRNeVZhcigncmFua2luZycpKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICB0ZW1wLml0ZW0gPSBlO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwicmFua2luZ1xcXFxcXFwiLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9LCBpdGVtc1tpXVtqXSlcXFxcclxcXFxuICAgICAgICAgICAgfSlcXFxcclxcXFxuICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgYS5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiYmxhbmtfYmxvY2tcXFxcXFxcIlxcXFxyXFxcXG4gICAgICAgIH0pXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgYS5wdXNoKHtcXFxcclxcXFxuICAgICAgICBjb2xfdHlwZTogJ2JsYW5rX2Jsb2NrJ1xcXFxyXFxcXG4gICAgfSlcXFxcclxcXFxuXFxcXHJcXFxcbiAgICBsZXQgaSA9IFtdO1xcXFxyXFxcXG4gICAgbGV0IHBsYXlhYmxlID0ge1xcXFxyXFxcXG4gICAgICAgIOWFqOmDqOW9seeJhzogJzAnLFxcXFxyXFxcXG4gICAgICAgIOS7heacieeJh+a6kDogJzEnXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBmb3IgKGxldCByIGluIHBsYXlhYmxlKSB7XFxcXHJcXFxcbiAgICAgICAgaS5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGU6IHRlbXAucGxheWFibGUgPT0gcGxheWFibGVbcl0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIHIgKyAnIDwvZm9udD48L2I+JyA6IHIsXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxcXHJcXFxcbiAgICAgICAgICAgIHVybDogJCgnaGlrZXI6IC8vZW1wdHkjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChlKSA9PiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ3JhbmtpbmcnKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0ZW1wLnBsYXlhYmxlID0gZTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwicmFua2luZ1xcXFxcXFwiLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcXFxyXFxcXG4gICAgICAgICAgICB9LCBwbGF5YWJsZVtyXSlcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG5cXFxcclxcXFxuICAgIGkucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ08Yj4gPGZvbnQgY29sb3I9JyArIGNvbG9yICsgJz7or4TliIbljLrpl7Q6JyArIHRlbXAuc2NvcmUgKyAnIDwvZm9udD48L2I+JyxcXFxcclxcXFxuICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcXFxyXFxcXG4gICAgICAgIHVybDogJCh0ZW1wLnNjb3JlLCAn6K+E5YiG5bqU5ZyoMC0xMOS5i+mXtCcpLmlucHV0KCgpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgbGV0IHRlbXAgPSBKU09OLnBhcnNlKGdldE15VmFyKCdyYW5raW5nJykpO1xcXFxyXFxcXG4gICAgICAgICAgICBsZXQgaW5wdXRzID0gaW5wdXQuc3BsaXQoJy0nKTtcXFxcclxcXFxuICAgICAgICAgICAgaWYgKGlucHV0cy5sZW5ndGggPT0gMiAmJiBpbnB1dHMuZXZlcnkoZSA9PiBlID49IDAgJiYgZSA8PSAxMCkgJiYgcGFyc2VGbG9hdChpbnB1dHNbMF0pIDwgaW5wdXRzWzFdKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0ZW1wLnNjb3JlID0gaW5wdXQ7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcInJhbmtpbmdcXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkodGVtcCkpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcclxcXFxuICAgICAgICAgICAgfSBlbHNlIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/or7fmraPnoa7ovpPlhaUnXFxcXHJcXFxcbiAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgfSlcXFxcclxcXFxuXFxcXHJcXFxcbiAgICBsZXQgdCA9IGdldERvdWJhblJlcyhcXFxcXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvc3ViamVjdF9jb2xsZWN0aW9uL1xcXFxcXFwiICsgKGlkIHx8IHRlbXAuaXRlbSkpO1xcXFxyXFxcXG4gICAgaS5wdXNoKHtcXFxcclxcXFxuICAgICAgICB0aXRsZTogdC50aXRsZSArICco5YWxJyArIHQudG90YWwgKyAn6YOoKScsXFxcXHJcXFxcbiAgICAgICAgZGVzYzogdC5kZXNjcmlwdGlvbixcXFxcclxcXFxuICAgICAgICAvKmltZzogdC5oZWFkZXJfYmdfaW1hZ2UgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiICsgdC5oZWFkZXJfYmdfaW1hZ2UsXFxcXHJcXFxcbiAgICAgICAgdXJsOiB0LmhlYWRlcl9iZ19pbWFnZSArIFxcXFxcXFwiP3R5cGU9LmpwZ0BSZWZlcmVyPVxcXFxcXFwiICsgdC5oZWFkZXJfYmdfaW1hZ2UgKyBcXFxcXFxcIj90eXBlPS5qcGdcXFxcXFxcIiwqL1xcXFxyXFxcXG4gICAgICAgIHVybDogJ3RvYXN0Oi8v54K55oiR5bmy5ZibJyxcXFxcclxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIlxcXFxyXFxcXG4gICAgfSlcXFxcclxcXFxuXFxcXHJcXFxcbiAgICBsZXQgcyA9IGdldERvdWJhblJlcyhcXFxcXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvc3ViamVjdF9jb2xsZWN0aW9uL1xcXFxcXFwiICsgKGlkIHx8IHRlbXAuaXRlbSkgKyBcXFxcXFxcIi9pdGVtcz9cXFxcXFxcIiArIChwYWdlID8gXFxcXFxcXCJzdGFydD1cXFxcXFxcIiArIChwYWdlIC0gMSkgKiBjb3VudCArIFxcXFxcXFwiJmNvdW50PVxcXFxcXFwiICsgY291bnQgOiBcXFxcXFxcInN0YXJ0PTAmY291bnQ9NTBcXFxcXFxcIikpO1xcXFxyXFxcXG4gICAgbGV0IGwgPSBzLnN1YmplY3RfY29sbGVjdGlvbl9pdGVtcztcXFxcclxcXFxuICAgIGlmICh0ZW1wLnBsYXlhYmxlID09ICcxJykgbCA9IGwuZmlsdGVyKGUgPT4gISFlLmhhc19saW5ld2F0Y2gpO1xcXFxyXFxcXG4gICAgaWYgKHRlbXAuc2NvcmUgIT0gJzAtMTAnKSB7XFxcXHJcXFxcbiAgICAgICAgbCA9IGwuZmlsdGVyKGUgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICBsZXQgciA9IHRlbXAuc2NvcmUuc3BsaXQoJy0nKTtcXFxcclxcXFxuICAgICAgICAgICAgcmV0dXJuIGUucmF0aW5nICYmIGUucmF0aW5nLnZhbHVlIDwgclsxXSAmJiBlLnJhdGluZy52YWx1ZSA+IHJbMF07XFxcXHJcXFxcbiAgICAgICAgfSk7XFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgbGV0IGRldGFpbHNWaWV3Q29uZmlncyA9IGdldENvbmZpZygnZGV0YWlsc1ZpZXdDb25maWdzJyk7XFxcXHJcXFxcbiAgICBsZXQgciA9IGwubWFwKChlID0+IHtcXFxcclxcXFxuICAgICAgICBsZXQgdHlwZSA9IGUudHlwZSxcXFxcclxcXFxuICAgICAgICAgICAgaWQgPSBlLmlkLFxcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZSA9IGUudGl0bGU7XFxcXHJcXFxcbiAgICAgICAgbGV0IHVzZUNvbmZpZyA9IGRldGFpbHNWaWV3Q29uZmlnc1tkZXRhaWxzVmlld0NvbmZpZ3MudXNlXS5jb25maWc7XFxcXHJcXFxcbiAgICAgICAgbGV0IHVybFBhcmFtcyA9IHt9O1xcXFxyXFxcXG4gICAgICAgIGlmICh1c2VDb25maWcuc3RhcnRzV2l0aCgneycpKSB7XFxcXHJcXFxcbiAgICAgICAgICAgIGV2YWwoJ3VybFBhcmFtcyA9ICcgKyB1c2VDb25maWcpO1xcXFxyXFxcXG4gICAgICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgICAgIHVybFBhcmFtcy51cmwgPSAkKFxcXFxcXFwiaGlrZXI6Ly9lbXB0eSNub0hpc3RvcnkjI2ltbWVyc2l2ZVRoZW1lI1xcXFxcXFwiICsgJz90eXBlPScgKyB0eXBlICsgJyZpZD0nICsgaWQpLnJ1bGUoKHR5cGUsIGlkLCB0aXRsZSwgdXNlQ29uZmlnKSA9PiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gXFxcXFxcXCJwbGF5bGlzdFxcXFxcXFwiKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgZG91TGlzdChpZCwgTVlfUEFHRSwgNTApO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBldmFsKHVzZUNvbmZpZyk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgICAgIH0sIHR5cGUsIGlkLCB0aXRsZSwgdXNlQ29uZmlnKTtcXFxcclxcXFxuICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgcmV0dXJuIHtcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfdmVydGljYWxfcGljJyxcXFxcclxcXFxuICAgICAgICAgICAgdXJsOiB1cmxQYXJhbXMudXJsLFxcXFxyXFxcXG4gICAgICAgICAgICBleHRyYTogdXJsUGFyYW1zLmV4dHJhLFxcXFxyXFxcXG4gICAgICAgICAgICBpbWc6IGUucGljLm5vcm1hbCArIFxcXFxcXFwiQFJlZmVyZXI9XFxcXFxcXCIgKyBlLnBpYy5ub3JtYWwsXFxcXHJcXFxcbiAgICAgICAgICAgIGRlc2M6IGUuY2FyZF9zdWJ0aXRsZS5zcGxpdChcXFxcXFxcIi9cXFxcXFxcIikuZmlsdGVyKCgoZSwgdCkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgaWYgKHQgPCAzKSByZXR1cm4gZVxcXFxyXFxcXG4gICAgICAgICAgICB9KSkuam9pbihcXFxcXFxcIixcXFxcXFxcIikgKyBcXFxcXFxcIlxcXFxcXFxcblxcXFxcXFwiICsgKGUucmF0aW5nID8gY29tcHV0ZVJhdGluZyhlLnJhdGluZy5tYXgsIGUucmF0aW5nLnZhbHVlKSArIFxcXFxcXFwiIFxcXFxcXFwiICsgZS5yYXRpbmcudmFsdWUudG9GaXhlZCgxKSArIFxcXFxcXFwi5YiGXFxcXFxcXCIgOiBcXFxcXFxcIuaaguaXoOivhOWIhlxcXFxcXFwiKVxcXFxyXFxcXG4gICAgICAgIH1cXFxcclxcXFxuICAgIH0pKTtcXFxcclxcXFxuXFxcXHJcXFxcbiAgICBzZXRIb21lUmVzdWx0KHtcXFxcclxcXFxuICAgICAgICBkYXRhOiBwYWdlID4gMSA/IHIgOiAoaWQgPyBpLmNvbmNhdChyKSA6IGEuY29uY2F0KGkpLmNvbmNhdChyKSlcXFxcclxcXFxuICAgIH0pXFxcXHJcXFxcbn1cXFxcclxcXFxuXFxcXHJcXFxcbi8v6LGG5YiX6K+m5oOFXFxcXHJcXFxcbmZ1bmN0aW9uIGRvdUxpc3QoaWQsIHBhZ2UsIGNvdW50KSB7XFxcXHJcXFxcbiAgICBhZGRMaXN0ZW5lcignb25DbG9zZScsICdjbGVhck15VmFyKFxcXFxcXFwiZG91TGlzdFxcXFxcXFwiKScpO1xcXFxyXFxcXG4gICAgaWYgKCFnZXRNeVZhcignZG91TGlzdCcpKSBwdXRNeVZhcignZG91TGlzdCcsICd7XFxcXFxcXCJwbGF5YWJsZVxcXFxcXFwiOlxcXFxcXFwiMFxcXFxcXFwiLFxcXFxcXFwic2NvcmVcXFxcXFxcIjpcXFxcXFxcIjAtMTBcXFxcXFxcIn0nKTtcXFxcclxcXFxuICAgIGxldCBpID0gW107XFxcXHJcXFxcbiAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2RvdUxpc3QnKSk7XFxcXHJcXFxcbiAgICBsZXQgY29sb3IgPSBnZXRDb25maWcoJ2Nob29zZUNvbG9yJyk7XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgbGV0IHBsYXlhYmxlID0ge1xcXFxyXFxcXG4gICAgICAgIOWFqOmDqOW9seeJhzogJzAnLFxcXFxyXFxcXG4gICAgICAgIOS7heacieeJh+a6kDogJzEnXFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbiAgICBmb3IgKGxldCByIGluIHBsYXlhYmxlKSB7XFxcXHJcXFxcbiAgICAgICAgaS5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGU6IHRlbXAucGxheWFibGUgPT0gcGxheWFibGVbcl0gPyAn4oCc4oCc4oCd4oCdPGI+IDxmb250IGNvbG9yPScgKyBjb2xvciArICc+JyArIHIgKyAnIDwvZm9udD48L2I+JyA6IHIsXFxcXHJcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxcXHJcXFxcbiAgICAgICAgICAgIHVybDogJCgnaGlrZXI6IC8vZW1wdHkjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChlKSA9PiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2RvdUxpc3QnKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0ZW1wLnBsYXlhYmxlID0gZTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiZG91TGlzdFxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeSh0ZW1wKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcXFxyXFxcXG4gICAgICAgICAgICB9LCBwbGF5YWJsZVtyXSlcXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG5cXFxcclxcXFxuICAgIGkucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ08Yj4gPGZvbnQgY29sb3I9JyArIGNvbG9yICsgJz7or4TliIbljLrpl7Q6JyArIHRlbXAuc2NvcmUgKyAnIDwvZm9udD48L2I+JyxcXFxcclxcXFxuICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcXFxyXFxcXG4gICAgICAgIHVybDogJCh0ZW1wLnNjb3JlLCAn6K+E5YiG5bqU5ZyoMC0xMOS5i+mXtCcpLmlucHV0KCgpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgbGV0IHRlbXAgPSBKU09OLnBhcnNlKGdldE15VmFyKCdkb3VMaXN0JykpO1xcXFxyXFxcXG4gICAgICAgICAgICBsZXQgaW5wdXRzID0gaW5wdXQuc3BsaXQoJy0nKTtcXFxcclxcXFxuICAgICAgICAgICAgaWYgKGlucHV0cy5sZW5ndGggPT0gMiAmJiBpbnB1dHMuZXZlcnkoZSA9PiBlID49IDAgJiYgZSA8PSAxMCkgJiYgcGFyc2VGbG9hdChpbnB1dHNbMF0pIDwgaW5wdXRzWzFdKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0ZW1wLnNjb3JlID0gaW5wdXQ7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcImRvdUxpc3RcXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkodGVtcCkpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcclxcXFxuICAgICAgICAgICAgfSBlbHNlIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/or7fmraPnoa7ovpPlhaUnXFxcXHJcXFxcbiAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICB9KVxcXFxyXFxcXG4gICAgfSlcXFxcclxcXFxuXFxcXHJcXFxcbiAgICBsZXQgdCA9IGdldERvdWJhblJlcyhcXFxcXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvZG91bGlzdC9cXFxcXFxcIiArIGlkKTtcXFxcclxcXFxuICAgIGkucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgdGl0bGU6IHQudGl0bGUsXFxcXHJcXFxcbiAgICAgICAgZGVzYzogJ+WFsScgKyB0Lml0ZW1zX2NvdW50ICsgJ+mDqCgnICsgdC5wbGF5YWJsZV9jb3VudCArICfpg6jlj6/mkq3mlL4pJyxcXFxcclxcXFxuICAgICAgICAvKmltZzogdC5oZWFkZXJfYmdfaW1hZ2UgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiICsgdC5oZWFkZXJfYmdfaW1hZ2UsXFxcXHJcXFxcbiAgICAgICAgdXJsOiB0LmhlYWRlcl9iZ19pbWFnZSArIFxcXFxcXFwiP3R5cGU9LmpwZ0BSZWZlcmVyPVxcXFxcXFwiICsgdC5oZWFkZXJfYmdfaW1hZ2UgKyBcXFxcXFxcIj90eXBlPS5qcGdcXFxcXFxcIiwqL1xcXFxyXFxcXG4gICAgICAgIHVybDogJ3RvYXN0Oi8v5Yir54K55oiRJyxcXFxcclxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIlxcXFxyXFxcXG4gICAgfSk7XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgbGV0IHMgPSBnZXREb3ViYW5SZXMoXFxcXFxcXCJodHRwczovL2Zyb2RvLmRvdWJhbi5jb20vYXBpL3YyL2RvdWxpc3QvXFxcXFxcXCIgKyBpZCArIFxcXFxcXFwiL3Bvc3RzXFxcXFxcXCIgKyAnP3BsYXlhYmxlPScgKyB0ZW1wLnBsYXlhYmxlICsgKHBhZ2UgPyBcXFxcXFxcIiZzdGFydD1cXFxcXFxcIiArIChwYWdlIC0gMSkgKiBjb3VudCArIFxcXFxcXFwiJmNvdW50PVxcXFxcXFwiICsgY291bnQgOiBcXFxcXFxcIiZzdGFydD0wJmNvdW50PTUwXFxcXFxcXCIpKTtcXFxcclxcXFxuICAgIGxldCBsID0gcy5pdGVtcztcXFxcclxcXFxuICAgIGlmICh0ZW1wLnNjb3JlICE9ICcwLTEwJykge1xcXFxyXFxcXG4gICAgICAgIGwgPSBsLmZpbHRlcihlID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgbGV0IHIgPSB0ZW1wLnNjb3JlLnNwbGl0KCctJyk7XFxcXHJcXFxcbiAgICAgICAgICAgIHJldHVybiBlLmNvbnRlbnQuc3ViamVjdC5yYXRpbmcgJiYgZS5jb250ZW50LnN1YmplY3QucmF0aW5nLnZhbHVlIDwgclsxXSAmJiBlLmNvbnRlbnQuc3ViamVjdC5yYXRpbmcudmFsdWUgPiByWzBdO1xcXFxyXFxcXG4gICAgICAgIH0pO1xcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG5cXFxcclxcXFxuICAgIGxldCBkZXRhaWxzVmlld0NvbmZpZ3MgPSBnZXRDb25maWcoJ2RldGFpbHNWaWV3Q29uZmlncycpO1xcXFxyXFxcXG4gICAgbGV0IHIgPSBsLm1hcCgoZSA9PiB7XFxcXHJcXFxcbiAgICAgICAgbGV0IHR5cGUgPSBlLmNvbnRlbnQuc3ViamVjdC50eXBlLFxcXFxyXFxcXG4gICAgICAgICAgICBpZCA9IGUuY29udGVudC5zdWJqZWN0LmlkLFxcXFxyXFxcXG4gICAgICAgICAgICB0aXRsZSA9IGUuY29udGVudC5zdWJqZWN0LnRpdGxlO1xcXFxyXFxcXG4gICAgICAgIGxldCB1c2VDb25maWcgPSBkZXRhaWxzVmlld0NvbmZpZ3NbZGV0YWlsc1ZpZXdDb25maWdzLnVzZV0uY29uZmlnO1xcXFxyXFxcXG4gICAgICAgIGxldCB1cmxQYXJhbXMgPSB7fTtcXFxcclxcXFxuICAgICAgICBpZiAodXNlQ29uZmlnLnN0YXJ0c1dpdGgoJ3snKSkge1xcXFxyXFxcXG4gICAgICAgICAgICBldmFsKCd1cmxQYXJhbXMgPSAnICsgdXNlQ29uZmlnKTtcXFxcclxcXFxuICAgICAgICB9IGVsc2Uge1xcXFxyXFxcXG4gICAgICAgICAgICB1cmxQYXJhbXMudXJsID0gJChcXFxcXFxcImhpa2VyOi8vZW1wdHkjbm9IaXN0b3J5IyNpbW1lcnNpdmVUaGVtZSNcXFxcXFxcIiArICc/dHlwZT0nICsgdHlwZSArICcmaWQ9JyArIGlkKS5ydWxlKCh0eXBlLCBpZCwgdGl0bGUsIHVzZUNvbmZpZykgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFxcXFxcXFwicGxheWxpc3RcXFxcXFxcIikge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGRvdUxpc3QoaWQsIE1ZX1BBR0UsIDUwKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgZXZhbCh1c2VDb25maWcpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgICAgICB9LCB0eXBlLCBpZCwgdGl0bGUsIHVzZUNvbmZpZyk7XFxcXHJcXFxcbiAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgIHJldHVybiB7XFxcXHJcXFxcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcXFxcclxcXFxuICAgICAgICAgICAgdXJsOiB1cmxQYXJhbXMudXJsLFxcXFxyXFxcXG4gICAgICAgICAgICBleHRyYTogdXJsUGFyYW1zLmV4dHJhLFxcXFxyXFxcXG4gICAgICAgICAgICBpbWc6IGUuY29udGVudC5zdWJqZWN0LnBpYy5ub3JtYWwgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiICsgZS5jb250ZW50LnN1YmplY3QucGljLm5vcm1hbCxcXFxcclxcXFxuICAgICAgICAgICAgZGVzYzogZS5jb250ZW50LnN1YmplY3QuY2FyZF9zdWJ0aXRsZS5zcGxpdChcXFxcXFxcIi9cXFxcXFxcIikuZmlsdGVyKCgoZSwgdCkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgaWYgKHQgPCAzKSByZXR1cm4gZVxcXFxyXFxcXG4gICAgICAgICAgICB9KSkuam9pbihcXFxcXFxcIixcXFxcXFxcIikgKyBcXFxcXFxcIlxcXFxcXFxcblxcXFxcXFwiICsgKGUuY29udGVudC5zdWJqZWN0LnJhdGluZyA/IGNvbXB1dGVSYXRpbmcoZS5jb250ZW50LnN1YmplY3QucmF0aW5nLm1heCwgZS5jb250ZW50LnN1YmplY3QucmF0aW5nLnZhbHVlKSArIFxcXFxcXFwiIFxcXFxcXFwiICsgZS5jb250ZW50LnN1YmplY3QucmF0aW5nLnZhbHVlLnRvRml4ZWQoMSkgKyBcXFxcXFxcIuWIhlxcXFxcXFwiIDogXFxcXFxcXCLmmoLml6Dor4TliIZcXFxcXFxcIilcXFxcclxcXFxuICAgICAgICB9XFxcXHJcXFxcbiAgICB9KSk7XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgc2V0SG9tZVJlc3VsdCh7XFxcXHJcXFxcbiAgICAgICAgZGF0YTogcGFnZSA+IDEgPyByIDogaS5jb25jYXQocilcXFxcclxcXFxuICAgIH0pXFxcXHJcXFxcbn1cXFxcclxcXFxuXFxcXHJcXFxcblxcXFxyXFxcXG5cXFxcclxcXFxuLy/op4bpopHmqKHlnZdcXFxcclxcXFxuZnVuY3Rpb24gdmlkZW9VcmxzTW9kdWxlKGQsIHR5cGUsIGlkLCBjb2wsIGxhenksIF9yZXMsIGV4dHJhKSB7XFxcXHJcXFxcbiAgICAvL2NvbOaYr+agt+W8j2NvbFswXSxjb2xbMV3liIbliKvmmK90duWSjG1vdmll55qE5qC35byPKHR25Lya5pyJ5YiG6ZuG5L+h5oGvdGl0bGXkvJrlvojplb8pXFxcXHJcXFxcbiAgICBpZiAoIWNvbCkgY29sID0gWydpY29uXzInLCAnaWNvbl9zbWFsbF80J107XFxcXHJcXFxcbiAgICBpZiAoIWxhenkpIGxhenkgPSAncmV0dXJuIGlucHV0JztcXFxcclxcXFxuICAgIGxldCByZXMgPSBfcmVzIHx8IGdldERvdWJhblJlcyhcXFxcXFxcImh0dHBzOi8vZnJvZG8uZG91YmFuLmNvbS9hcGkvdjIvXFxcXFxcXCIgKyB0eXBlICsgXFxcXFxcXCIvXFxcXFxcXCIgKyBpZCk7XFxcXHJcXFxcbiAgICBmb3IgKGxldCBpdGVtIGluIHJlcy52ZW5kb3JzKSB7XFxcXHJcXFxcbiAgICAgICAgbGV0IGUgPSByZXMudmVuZG9yc1tpdGVtXTtcXFxcclxcXFxuICAgICAgICBpZiAodHlwZSA9PT0gXFxcXFxcXCJ0dlxcXFxcXFwiKSB7XFxcXHJcXFxcbiAgICAgICAgICAgIGQucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogZS50aXRsZSArIChlLmVwaXNvZGVzX2luZm8gPyBcXFxcXFxcIuKAolxcXFxcXFwiICsgZS5lcGlzb2Rlc19pbmZvIDogXFxcXFxcXCJcXFxcXFxcIiksXFxcXHJcXFxcbiAgICAgICAgICAgICAgICBpbWc6IGUuaWNvbixcXFxcclxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBjb2xbMF0gfHwgXFxcXFxcXCJpY29uXzJcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAgICAgIHVybDogJCgnaGlrZXI6Ly9lbXB0eT9pZD0nICsgaWQgKyAnJnR5cGU9JyArIHR5cGUgKyAnJnRpdGxlPScgKyBlLnRpdGxlKS5ydWxlKChyZXMsIGlkLCBlLCBsYXp5LCBleHRyYSkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCB0aXRsZSA9IHJlcy50aXRsZSxcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcGljID0gcmVzLnBpYy5ub3JtYWwgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiICsgcmVzLnBpYy5ub3JtYWw7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKGUudGl0bGUgKyAnLScgKyB0aXRsZSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVBpY1VybChwaWMpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9tYWluJykpLnJ1bGUpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCB1cmxzID0gZ2V0VHZVcmxzKGlkLCBlLmlkKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBsYXp5ID0gJChcXFxcXFxcIlxcXFxcXFwiKS5sYXp5UnVsZShsYXp5ID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdFVybCA9IFxcXFxcXFwidG9hc3Q6Ly/op6PmnpDlpLHotKVcXFxcXFxcIjtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXp5LnN0YXJ0c1dpdGgoXFxcXFxcXCIoXFxcXFxcXCIpKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZhbCgncmVzdWx0VXJsID0gJyArIGxhenkpXFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2YWwoJ3Jlc3VsdFVybCA9ICcgKyAnKCgpID0+IHsnICsgbGF6eSArICd9KSgpJylcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nKGUubWVzc2FnZSlcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0VXJsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgfSwgbGF6eSlcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IFtdO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YodXJscykgPT0gXFxcXFxcXCJvYmplY3RcXFxcXFxcIikge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZCA9IFtdO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVybHMubGVuZ3RoOyBpKyspIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfnrKwnICsgKGkgKyAxKSArICfpm4YnLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF80JyxcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGxhenkgPyB1cmxzW2ldICsgbGF6eSA6IHVybHNbaV0sXFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IGV4dHJhXFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3VsdChkKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZih1cmxzKSA9PSBcXFxcXFxcInN0cmluZ1xcXFxcXFwiICYmIHVybHMgPT0gJ+iiq+WwgWlwJykge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcnVsZSA9IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vcGFnZS9yZWxlYXNlSVA/cnVsZT3pnZLosYZcXFxcXFxcIikpXFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucnVsZTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZhbChydWxlKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZih1cmxzKSA9PSAnc3RyaW5nJyAmJiB1cmxzID09ICfmsqHmnInmlLblvZUnKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkID0gW107XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+ixhueTo+ayoeacieaUtuW9leatpOinhumikea6kOeahOivpue7huS/oeaBrycsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn54K55oiR5Y+v5Lul5Y676KeG6aKR5rqQ572R56uZ55yL55yLJyxcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMScsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGUudXJsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3VsdChkKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9LCByZXMsIGlkLCBlLCBsYXp5LCBleHRyYSlcXFxcclxcXFxuICAgICAgICAgICAgfSlcXFxcclxcXFxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdtb3ZpZScpIHtcXFxcclxcXFxuICAgICAgICAgICAgbGV0IG1MYXp5ID0gJChcXFxcXFxcIlxcXFxcXFwiKS5sYXp5UnVsZShsYXp5ID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGxldCByZXN1bHRVcmwgPSBcXFxcXFxcInRvYXN0Oi8v6Kej5p6Q5aSx6LSlXFxcXFxcXCI7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0cnkge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXp5LnN0YXJ0c1dpdGgoXFxcXFxcXCIoXFxcXFxcXCIpKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2YWwoJ3Jlc3VsdFVybCA9ICcgKyBsYXp5KVxcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2YWwoJ3Jlc3VsdFVybCA9ICcgKyAnKCgpID0+IHsnICsgbGF6eSArICd9KSgpJylcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgbG9nKGUubWVzc2FnZSlcXFxcclxcXFxuICAgICAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRVcmxcXFxcclxcXFxuICAgICAgICAgICAgfSwgbGF6eSlcXFxcclxcXFxuICAgICAgICAgICAgZC5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBlLnRpdGxlICsgKGUuZXBpc29kZXNfaW5mbyA/IFxcXFxcXFwi4oCiXFxcXFxcXCIgKyBlLmVwaXNvZGVzX2luZm8gOiBcXFxcXFxcIlxcXFxcXFwiKSxcXFxcclxcXFxuICAgICAgICAgICAgICAgIGltZzogZS5pY29uLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IGNvbFsxXSB8fCBcXFxcXFxcImljb25fc21hbGxfNFxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgdXJsOiBtTGF6eSA/IGUudXJsICsgbUxhenkgOiBlLnVybCxcXFxcclxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiBleHRyYVxcXFxyXFxcXG4gICAgICAgICAgICB9KVxcXFxyXFxcXG4gICAgICAgIH1cXFxcclxcXFxuICAgIH1cXFxcclxcXFxufVxcXFxyXFxcXG5cXFxcclxcXFxuLy/ojrflj5bnlLXop4bliafliIbpm4bpk77mjqUsaWTmmK/niYflrZDnvJblj7csdWlk5piv6KeG6aKR5rqQ57yW5Y+3XFxcXHJcXFxcbmZ1bmN0aW9uIGdldFR2VXJscyhpZCwgdWlkKSB7XFxcXHJcXFxcbiAgICBsZXQgY29va2llQ2FjaGUgPSAnaGlrZXI6Ly9maWxlcy9jYWNoZS9kb3ViYW5jb29raWUudHh0JztcXFxcclxcXFxuICAgIGxldCBtVXJsID0gJ2h0dHBzOi8vbW92aWUuZG91YmFuLmNvbS9zdWJqZWN0LycgKyBpZCArICcvJztcXFxcclxcXFxuICAgIGxldCBoZWFkZXJzID0ge1xcXFxyXFxcXG4gICAgICAgIFxcXFxcXFwiVXNlci1BZ2VudFxcXFxcXFwiOiBQQ19VQSxcXFxcclxcXFxuICAgIH1cXFxcclxcXFxuICAgIGlmIChmaWxlRXhpc3QoY29va2llQ2FjaGUpKSB7XFxcXHJcXFxcbiAgICAgICAgaGVhZGVyc1tcXFxcXFxcIkNvb2tpZVxcXFxcXFwiXSA9IGZldGNoKGNvb2tpZUNhY2hlKVxcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG4gICAgbGV0IGh0bWwgPSByZXF1ZXN0KG1VcmwsIHtcXFxcclxcXFxuICAgICAgICBoZWFkZXJzOiBoZWFkZXJzXFxcXHJcXFxcbiAgICB9KVxcXFxyXFxcXG4gICAgaWYgKChodG1sLmluY2x1ZGVzKFxcXFxcXFwi55m75b2V6Lez6L2sXFxcXFxcXCIpICYmIGh0bWwuaW5jbHVkZXMoXFxcXFxcXCLlvILluLjor7fmsYJcXFxcXFxcIikpIHx8IChodG1sLmluY2x1ZGVzKFxcXFxcXFwid2luZG93LmxvY2F0aW9uLmhyZWZcXFxcXFxcIikgJiYgaHRtbC5pbmNsdWRlcyhcXFxcXFxcInNlYy5kb3ViYW5cXFxcXFxcIikpKSB7XFxcXHJcXFxcbiAgICAgICAgcmV0dXJuICfooqvlsIFpcCc7XFxcXHJcXFxcbiAgICB9IGVsc2Uge1xcXFxyXFxcXG4gICAgICAgIGxldCBzID0ge1xcXFxyXFxcXG4gICAgICAgICAgICBxcTogMSxcXFxcclxcXFxuICAgICAgICAgICAgeW91a3U6IDMsXFxcXHJcXFxcbiAgICAgICAgICAgIGxldHY6IDYsXFxcXHJcXFxcbiAgICAgICAgICAgIG1ndHY6IDcsXFxcXHJcXFxcbiAgICAgICAgICAgIGJpbGliaWxpOiA4LFxcXFxyXFxcXG4gICAgICAgICAgICBpcWl5aTogOSxcXFxcclxcXFxuICAgICAgICAgICAgY250djogMTIsXFxcXHJcXFxcbiAgICAgICAgICAgIGNjdHY2OiAxMyxcXFxcclxcXFxuICAgICAgICAgICAgbWlndXZpZGVvOiAxNSxcXFxcclxcXFxuICAgICAgICAgICAgeGlndWE6IDE3LFxcXFxyXFxcXG4gICAgICAgICAgICBhY2Z1bjogMTgsXFxcXHJcXFxcbiAgICAgICAgICAgIG1haWR1aWR1aTogMTlcXFxcclxcXFxuICAgICAgICB9O1xcXFxyXFxcXG4gICAgICAgIGxldCBudW0gPSBzW3VpZF07XFxcXHJcXFxcblxcXFxyXFxcXG4gICAgICAgIHZhciBzb3VyY2VzID0ge307XFxcXHJcXFxcbiAgICAgICAgbGV0IHNsID0gaHRtbC5tYXRjaCgvc291cmNlc1xcXFxcXFxcW1sxLTldezEsMn1cXFxcXFxcXF1bXFxcXFxcXFxzXFxcXFxcXFxTXSo/XFxcXFxcXFxdL2cpO1xcXFxyXFxcXG4gICAgICAgIGlmIChzbCkge1xcXFxyXFxcXG4gICAgICAgICAgICBmb3IgKHZhciBpIGluIHNsKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBldmFsKHNsW2ldKTtcXFxcclxcXFxuICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgICAgIGxldCBzY3JpcHRfbGlzdCA9IHBhcnNlRG9tRm9yQXJyYXkoaHRtbCwgJ2JvZHkmJnNjcmlwdFtzcmNdJyk7XFxcXHJcXFxcbiAgICAgICAgICAgIGxldCBzb3VyY2VzX3VybCA9IFxcXFxcXFwiXFxcXFxcXCI7XFxcXHJcXFxcbiAgICAgICAgICAgIGZvciAobGV0IGkgaW4gc2NyaXB0X2xpc3QpIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGxldCB1cmwgPSBwYXJzZURvbUZvckh0bWwoc2NyaXB0X2xpc3RbaV0sICdzY3JpcHQmJnNyYycpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgaWYgKHVybC5pbmRleE9mKCdtaXhlZF9zdGF0aWMnKSAhPT0gLTEpIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzX3VybCA9IHVybDtcXFxcclxcXFxuICAgICAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgICAgICBsZXQgc291cmNlc19saXN0ID0gcmVxdWVzdChzb3VyY2VzX3VybCkubWF0Y2goL3NvdXJjZXNcXFxcXFxcXFtbMS05XXsxLDJ9XFxcXFxcXFxdW1xcXFxcXFxcc1xcXFxcXFxcU10qP1xcXFxcXFxcXS9nKTtcXFxcclxcXFxuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBzb3VyY2VzX2xpc3QpIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGV2YWwoc291cmNlc19saXN0W2ldKTtcXFxcclxcXFxuICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgIH1cXFxcclxcXFxuXFxcXHJcXFxcbiAgICAgICAgbGV0IHJlbiA9IHNvdXJjZXNbbnVtXTtcXFxcclxcXFxuICAgICAgICBpZiAocmVuICYmIHJlbi5sZW5ndGggPiAwKSB7XFxcXHJcXFxcbiAgICAgICAgICAgIC8qdmFyIHIgPSByZW4ubWFwKGUgPT4gdW5lc2NhcGUoZS5wbGF5X2xpbmsucmVwbGFjZSgvKGh0dHBzfGh0dHApOlxcXFxcXFxcL1xcXFxcXFxcL3d3dy5kb3ViYW4uY29tXFxcXFxcXFwvbGluazJcXFxcXFxcXC9cXFxcXFxcXD91cmw9LywgJycpXFxcXHJcXFxcbiAgICAgICAgICAgICAgICAuc3BsaXQoJzsnKVswXS5zcGxpdCgnLmh0bWwnKVswXSArICcuaHRtbCcpKSovXFxcXHJcXFxcbiAgICAgICAgICAgIHZhciByID0gcmVuLm1hcChlID0+IHVuZXNjYXBlKGUucGxheV9saW5rLnNwbGl0KCc/dXJsPScpWzFdLnNwbGl0KCcmJylbMF0pKVxcXFxyXFxcXG5cXFxcclxcXFxuICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgcmV0dXJuIHIgfHwgJ+ayoeacieaUtuW9lSc7XFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbn1cXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLorr7nva7pobVcXFwiLFxcXCJwYXRoXFxcIjpcXFwic2V0dGluZ1BhZ2VcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5ldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL3V0aWxzJykpLnJ1bGUpO1xcXFxuXFxcXG4vL+W9seeJh+ivpuaDhemFjee9ruaooeWdl1xcXFxuZnVuY3Rpb24gZGV0YWlsVmlld01vZGVNb2R1bGUoZCwgZGV0YWlsc1ZpZXdDb25maWdzKSB7XFxcXG4gICAgbGV0IGRldGFpbHNWaWV3Q29uZmlncyA9IGdldENvbmZpZygnZGV0YWlsc1ZpZXdDb25maWdzJyk7XFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6ICfoh6rlrprkuYnlvbHniYfor6bmg4XpobXpnaInLmJvbGQoKSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCJcXFxcbiAgICB9KVxcXFxuICAgIGZvciAobGV0IGNvbmZpZ0tleSBvZiBPYmplY3Qua2V5cyhkZXRhaWxzVmlld0NvbmZpZ3MpKSB7XFxcXG4gICAgICAgIGlmIChjb25maWdLZXkgPT09ICd1c2UnKSBjb250aW51ZTtcXFxcbiAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBjb25maWdLZXkgPT09IGRldGFpbHNWaWV3Q29uZmlncy51c2UgPyBcXFxcXFxcIuKAnOKAnFxcXFxcXFwiICsgY29uZmlnS2V5ICsgXFxcXFxcXCLigJ3igJ1cXFxcXFxcIiA6IGNvbmZpZ0tleSxcXFxcbiAgICAgICAgICAgIHVybDogJChcXFxcXFxcImhpa2VyOi8vZW1wdHkjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZShjb25maWdLZXkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIGxldCBjb25maWcgPSBKU09OLnBhcnNlKHJlcXVlc3QoZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSkpXFxcXG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5kZXRhaWxzVmlld0NvbmZpZ3MudXNlID09PSBjb25maWdLZXkpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgLy9wdXRNeVZhcihcXFxcXFxcImlucHV0X2NvbmZpZ190eXBlXFxcXFxcXCIsICflvbHniYfor6bmg4XpobXpnaLphY3nva4nKVxcXFxuICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcImlucHV0X25hbWVcXFxcXFxcIiwgY29uZmlnS2V5KTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCJpbnB1dF9jb2RlXFxcXFxcXCIsIGNvbmZpZy5kZXRhaWxzVmlld0NvbmZpZ3NbY29uZmlnS2V5XS5jb25maWcpO1xcXFxuICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcImlucHV0X3NldHRpbmdfY29kZVxcXFxcXFwiLCBjb25maWcuZGV0YWlsc1ZpZXdDb25maWdzW2NvbmZpZ0tleV0uc2V0dGluZyB8fCBcXFxcXFxcIlxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL3BhZ2Uvc2V0dGluZy1lZGl0b3I/cnVsZT3pnZLosYYmdmlldz1kZXRhaWxWaWV3TW9kZUVkaXRQYWdlJztcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgY29uZmlnLmRldGFpbHNWaWV3Q29uZmlncy51c2UgPSBjb25maWdLZXlcXFxcbiAgICAgICAgICAgICAgICB3cml0ZUZpbGUoZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSwgSlNPTi5zdHJpbmdpZnkoY29uZmlnKSlcXFxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+WIh+aNouaIkOWKnydcXFxcbiAgICAgICAgICAgIH0sIGNvbmZpZ0tleSksXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJ1xcXFxuICAgICAgICB9KVxcXFxuICAgIH1cXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICBjb2xfdHlwZTogJ2JsYW5rX2Jsb2NrJ1xcXFxuICAgIH0pXFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6ICfinpUnLFxcXFxuICAgICAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJyxcXFxcbiAgICAgICAgdXJsOiAnaGlrZXI6Ly9wYWdlL3NldHRpbmctZWRpdG9yP3J1bGU96Z2S6LGGJnZpZXc9ZGV0YWlsVmlld01vZGVFZGl0UGFnZSdcXFxcbiAgICB9KTtcXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogJ+KelicsXFxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcXFxuICAgICAgICB1cmw6ICQoT2JqZWN0LmtleXMoZGV0YWlsc1ZpZXdDb25maWdzKS5maWx0ZXIoY29uZmlnS2V5ID0+IGNvbmZpZ0tleSAhPT0gJ3VzZScgJiYgY29uZmlnS2V5ICE9PSAn6buY6K6kJyksIDIpXFxcXG4gICAgICAgICAgICAuc2VsZWN0KCgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT09ICfpu5jorqQnKSByZXR1cm4gJ3RvYXN0Oi8v6buY6K6k6YWN572u5peg5rOV5Yig6Zmk77yBJ1xcXFxuICAgICAgICAgICAgICAgIGxldCBjb25maWcgPSBKU09OLnBhcnNlKHJlcXVlc3QoZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSkpXFxcXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ID09PSBjb25maWcuZGV0YWlsc1ZpZXdDb25maWdzLnVzZSkgcmV0dXJuICd0b2FzdDovL+ivpemFjee9ruato+WcqOS9v+eUqO+8jOaXoOazleWIoOmZpO+8gSdcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gJCgn56Gu6K6k5Yig6ZmkXFxcXFxcXCInICsgaW5wdXQgKyAnXFxcXFxcXCLvvJ8nKS5jb25maXJtKChjb25maWcsIGNvbmZpZ0tleSkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgY29uZmlnLmRldGFpbHNWaWV3Q29uZmlnc1tjb25maWdLZXldXFxcXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlRmlsZShnZXRNeVZhcigncWRiX2NvbmZpZycpLCBKU09OLnN0cmluZ2lmeShjb25maWcpKVxcXFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/liKDpmaQnICsgY29uZmlnS2V5ICsgJ+aIkOWKnydcXFxcbiAgICAgICAgICAgICAgICB9LCBjb25maWcsIGlucHV0KVxcXFxuICAgICAgICAgICAgfSlcXFxcbiAgICB9KVxcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiAn8J+TnScsXFxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcXFxuICAgICAgICB1cmw6ICQoT2JqZWN0LmtleXMoZGV0YWlsc1ZpZXdDb25maWdzKS5maWx0ZXIoY29uZmlnS2V5ID0+IGNvbmZpZ0tleSAhPT0gJ3VzZScpLCAyKS5zZWxlY3QoKCkgPT4ge1xcXFxuICAgICAgICAgICAgLy8gaWYgKGlucHV0ID09PSAn6buY6K6kJykgcmV0dXJuICd0b2FzdDovL+m7mOiupOmFjee9ruaXoOazlee8lui+ke+8gSdcXFxcbiAgICAgICAgICAgIGxldCBjb25maWcgPSBKU09OLnBhcnNlKHJlcXVlc3QoZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSkpXFxcXG4gICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcImlucHV0X25hbWVcXFxcXFxcIiwgY29uZmlnS2V5KTtcXFxcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiaW5wdXRfY29kZVxcXFxcXFwiLCBjb25maWcuZGV0YWlsc1ZpZXdDb25maWdzW2NvbmZpZ0tleV0uY29uZmlnKTtcXFxcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiaW5wdXRfc2V0dGluZ19jb2RlXFxcXFxcXCIsIGNvbmZpZy5kZXRhaWxzVmlld0NvbmZpZ3NbY29uZmlnS2V5XS5zZXR0aW5nIHx8IFxcXFxcXFwiXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL3BhZ2Uvc2V0dGluZy1lZGl0b3I/cnVsZT3pnZLosYYmdmlldz1kZXRhaWxWaWV3TW9kZUVkaXRQYWdlJ1xcXFxuICAgICAgICB9KVxcXFxuICAgIH0pXFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6ICfwn5OlJyxcXFxcbiAgICAgICAgY29sX3R5cGU6ICdmbGV4X2J1dHRvbicsXFxcXG4gICAgICAgIHVybDogJChcXFxcXFxcIlxcXFxcXFwiLCBcXFxcXFxcIuivt+i+k+WFpeWPo+S7pFxcXFxcXFwiKS5pbnB1dCgoKSA9PiB7XFxcXG4gICAgICAgICAgICBpZiAoIWlucHV0LmluY2x1ZGVzKFxcXFxcXFwi5b2x54mH6K+m5oOF6aG16Z2i6YWN572uXFxcXFxcXCIpKSByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+ivpeWPo+S7pOS4jeaYr+W9seeJh+ivpuaDhemhtemdoumFjee9rlxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS91dGlscycpKS5ydWxlKVxcXFxuICAgICAgICAgICAgbGV0IGltcG9ydENvbmZpZ3MgPSBDb25maWdUb29sLmltcG9ydChpbnB1dCk7XFxcXG4gICAgICAgICAgICBpZiAoIWltcG9ydENvbmZpZ3MpIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5Ly85LmO5Ye65LqG6ZSZ77yM6K+35bCd6K+V5YaN5qyh5a+85YWl772eXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcImlucHV0X25hbWVcXFxcXFxcIiwgaW1wb3J0Q29uZmlncy5uYW1lKTtcXFxcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiaW5wdXRfY29kZVxcXFxcXFwiLCBpbXBvcnRDb25maWdzLmRhdGEuY29uZmlnKTtcXFxcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiaW5wdXRfc2V0dGluZ19jb2RlXFxcXFxcXCIsIGltcG9ydENvbmZpZ3MuZGF0YS5zZXR0aW5nIHx8IFxcXFxcXFwiXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL3BhZ2Uvc2V0dGluZy1lZGl0b3I/cnVsZT3pnZLosYYmdmlldz1kZXRhaWxWaWV3TW9kZUVkaXRQYWdlJztcXFxcbiAgICAgICAgfSlcXFxcbiAgICB9KVxcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiAn8J+TpCcsXFxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcXFxuICAgICAgICB1cmw6ICQoT2JqZWN0LmtleXMoZGV0YWlsc1ZpZXdDb25maWdzKS5maWx0ZXIoY29uZmlnS2V5ID0+IGNvbmZpZ0tleSAhPT0gJ3VzZScpLCAyKS5zZWxlY3QoKCkgPT4ge1xcXFxuICAgICAgICAgICAgLy8gaWYgKGlucHV0ID09PSAn6buY6K6kJykgcmV0dXJuICd0b2FzdDovL+m7mOiupOmFjee9ruaXoOazlee8lui+ke+8gSdcXFxcbiAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvdXRpbHMnKSkucnVsZSlcXFxcbiAgICAgICAgICAgIGxldCBjb25maWcgPSBnZXRDb25maWcoKTtcXFxcbiAgICAgICAgICAgIGxldCBzZWxlY3RDb25maWcgPSB7XFxcXG4gICAgICAgICAgICAgICAgbmFtZTogaW5wdXQsXFxcXG4gICAgICAgICAgICAgICAgZGF0YTogY29uZmlnLmRldGFpbHNWaWV3Q29uZmlnc1tpbnB1dF1cXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIHJldHVybiAkKENvbmZpZ1Rvb2wuZW5jVHlwZUxpc3QsIDIpLnNlbGVjdCgoc2VsZWN0Q29uZmlnKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS91dGlscycpKS5ydWxlKVxcXFxuICAgICAgICAgICAgICAgIHJldHVybiBDb25maWdUb29sLnRvQ2xpcGJvYXJkKENvbmZpZ1Rvb2wuZXhwb3J0KHNlbGVjdENvbmZpZy5uYW1lLCBzZWxlY3RDb25maWcsIFxcXFxcXFwi5b2x54mH6K+m5oOF6aG16Z2i6YWN572uXFxcXFxcXCIsIGlucHV0KSlcXFxcbiAgICAgICAgICAgIH0sIHNlbGVjdENvbmZpZylcXFxcbiAgICAgICAgfSlcXFxcbiAgICB9KVxcXFxufVxcXFxuLy8g6K+m5oOF6aG16K6+572u5qih5Z2XXFxcXG5mdW5jdGlvbiBkZXRhaWxWaWV3U2V0dGluZ01vZHVsZShkKSB7XFxcXG4gICAgbGV0IGRldGFpbHNWaWV3Q29uZmlncyA9IGdldENvbmZpZygnZGV0YWlsc1ZpZXdDb25maWdzJyk7XFxcXG4gICAgZGV0YWlsVmlld01vZGVNb2R1bGUoZCwgZGV0YWlsc1ZpZXdDb25maWdzKVxcXFxuICAgIGxldCBkZXRhaWxWaWV3U2V0dGluZyA9IGRldGFpbHNWaWV3Q29uZmlnc1tkZXRhaWxzVmlld0NvbmZpZ3MudXNlXS5zZXR0aW5nXFxcXG4gICAgbGV0IHJlc3VsdCA9IFxcXFxcXFwidG9hc3Q6Ly/or6Xor6bmg4XpobXml6Dorr7nva7pobXpnaJcXFxcXFxcIjtcXFxcbiAgICBpZiAoZGV0YWlsVmlld1NldHRpbmcpIHtcXFxcbiAgICAgICAgdHJ5IHtcXFxcbiAgICAgICAgICAgIGlmIChkZXRhaWxWaWV3U2V0dGluZy5pbmRleE9mKCdyZXR1cm4nKSA9PSAtMSkgdGhyb3cgbmV3IEVycm9yKCflv4XpobsgcmV0dXJuIEBydWxlPWpzOiDmiJYgJCgpLnJ1bGUnKTtcXFxcbiAgICAgICAgICAgIGlmIChkZXRhaWxWaWV3U2V0dGluZy5zdGFydHNXaXRoKFxcXFxcXFwiKFxcXFxcXFwiKSkge1xcXFxuICAgICAgICAgICAgICAgIGV2YWwoJ3Jlc3VsdCA9ICcgKyBkZXRhaWxWaWV3U2V0dGluZylcXFxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgZXZhbCgncmVzdWx0ID0gJyArICcoKCkgPT4geycgKyBkZXRhaWxWaWV3U2V0dGluZyArICd9KSgpJylcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgICAgbG9nKGUubWVzc2FnZSk7XFxcXG4gICAgICAgICAgICByZXN1bHQgPSBcXFxcXFxcInRvYXN0Oi8v6ZSZ6K+v55qE6K6+572u6aG16Z2i5Luj56CBLOivt+WJjeW+gCDml6Xlv5cg5p+l55yL6ZSZ6K+v5Y6f5ZugXFxcXFxcXCJcXFxcbiAgICAgICAgfVxcXFxuICAgIH1cXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogJ+Kame+4jycsXFxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcXFxuICAgICAgICB1cmw6IHJlc3VsdFxcXFxuICAgIH0pXFxcXG59XFxcXG5cXFxcbi8vIOmmlumhteiuvue9ruaooeWdl1xcXFxuZnVuY3Rpb24gaG9tZVBhZ2VTZXR0aW5nTW9kdWxlKGQpIHtcXFxcbiAgICBsZXQgaG9tZVBhZ2VDb25maWdzID0gZ2V0Q29uZmlnKCdob21lUGFnZUNvbmZpZ3MnKTtcXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogJ+iHquWumuS5iemmlumhtScuYm9sZCgpLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJyaWNoX3RleHRcXFxcXFxcIlxcXFxuICAgIH0pXFxcXG4gICAgZm9yIChsZXQgY29uZmlnS2V5IG9mIE9iamVjdC5rZXlzKGhvbWVQYWdlQ29uZmlncykpIHtcXFxcbiAgICAgICAgaWYgKGNvbmZpZ0tleSA9PT0gJ3VzZScpIGNvbnRpbnVlO1xcXFxuICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IGNvbmZpZ0tleSA9PT0gaG9tZVBhZ2VDb25maWdzLnVzZSA/IFxcXFxcXFwi4oCc4oCcXFxcXFxcXCIgKyBjb25maWdLZXkgKyBcXFxcXFxcIuKAneKAnVxcXFxcXFwiIDogY29uZmlnS2V5LFxcXFxuICAgICAgICAgICAgdXJsOiAkKFxcXFxcXFwiaGlrZXI6Ly9lbXB0eSNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKGNvbmZpZ0tleSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IGNvbmZpZyA9IEpTT04ucGFyc2UocmVxdWVzdChnZXRNeVZhcigncWRiX2NvbmZpZycpKSlcXFxcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmhvbWVQYWdlQ29uZmlncy51c2UgPT09IGNvbmZpZ0tleSkge1xcXFxuICAgICAgICAgICAgICAgICAgICAvL3B1dE15VmFyKFxcXFxcXFwiaW5wdXRfY29uZmlnX3R5cGVcXFxcXFxcIiwgJ+mmlumhtemFjee9ricpXFxcXG4gICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiaW5wdXRfbmFtZVxcXFxcXFwiLCBjb25maWdLZXkpO1xcXFxuICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcImlucHV0X2NvZGVcXFxcXFxcIiwgY29uZmlnLmhvbWVQYWdlQ29uZmlnc1tjb25maWdLZXldLmNvbmZpZyk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9wYWdlL3NldHRpbmctZWRpdG9yP3J1bGU96Z2S6LGGJnZpZXc9aG9tZVBhZ2VNb2RlRWRpdFBhZ2UnO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICBjb25maWcuaG9tZVBhZ2VDb25maWdzLnVzZSA9IGNvbmZpZ0tleVxcXFxuICAgICAgICAgICAgICAgIHdyaXRlRmlsZShnZXRNeVZhcigncWRiX2NvbmZpZycpLCBKU09OLnN0cmluZ2lmeShjb25maWcpKVxcXFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5YiH5o2i5oiQ5YqfJ1xcXFxuICAgICAgICAgICAgfSwgY29uZmlnS2V5KSxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nXFxcXG4gICAgICAgIH0pXFxcXG4gICAgfVxcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIGNvbF90eXBlOiAnYmxhbmtfYmxvY2snXFxcXG4gICAgfSlcXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogJ+KelScsXFxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcXFxuICAgICAgICB1cmw6ICdoaWtlcjovL3BhZ2Uvc2V0dGluZy1lZGl0b3I/dmlldz1ob21lUGFnZU1vZGVFZGl0UGFnZSdcXFxcbiAgICB9KTtcXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogJ+KelicsXFxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcXFxuICAgICAgICB1cmw6ICQoT2JqZWN0LmtleXMoaG9tZVBhZ2VDb25maWdzKS5maWx0ZXIoY29uZmlnS2V5ID0+IGNvbmZpZ0tleSAhPT0gJ3VzZScgJiYgY29uZmlnS2V5ICE9PSAn6buY6K6kJyksIDIpXFxcXG4gICAgICAgICAgICAuc2VsZWN0KCgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT09ICfpu5jorqQnKSByZXR1cm4gJ3RvYXN0Oi8v6buY6K6k6YWN572u5peg5rOV5Yig6Zmk77yBJ1xcXFxuICAgICAgICAgICAgICAgIGxldCBjb25maWcgPSBKU09OLnBhcnNlKHJlcXVlc3QoZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSkpXFxcXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ID09PSBjb25maWcuaG9tZVBhZ2VDb25maWdzLnVzZSkgcmV0dXJuICd0b2FzdDovL+ivpemFjee9ruato+WcqOS9v+eUqO+8jOaXoOazleWIoOmZpO+8gSdcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gJCgn56Gu6K6k5Yig6ZmkXFxcXFxcXCInICsgaW5wdXQgKyAnXFxcXFxcXCLvvJ8nKS5jb25maXJtKChjb25maWcsIGNvbmZpZ0tleSkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgY29uZmlnLmhvbWVQYWdlQ29uZmlnc1tjb25maWdLZXldXFxcXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlRmlsZShnZXRNeVZhcigncWRiX2NvbmZpZycpLCBKU09OLnN0cmluZ2lmeShjb25maWcpKVxcXFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/liKDpmaQnICsgY29uZmlnS2V5ICsgJ+aIkOWKnydcXFxcbiAgICAgICAgICAgICAgICB9LCBjb25maWcsIGlucHV0KVxcXFxuICAgICAgICAgICAgfSlcXFxcbiAgICB9KVxcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiAn8J+TnScsXFxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcXFxuICAgICAgICB1cmw6ICQoT2JqZWN0LmtleXMoaG9tZVBhZ2VDb25maWdzKS5maWx0ZXIoY29uZmlnS2V5ID0+IGNvbmZpZ0tleSAhPT0gJ3VzZScpLCAyKS5zZWxlY3QoKCkgPT4ge1xcXFxuICAgICAgICAgICAgLy8gaWYgKGlucHV0ID09PSAn6buY6K6kJykgcmV0dXJuICd0b2FzdDovL+m7mOiupOmFjee9ruaXoOazlee8lui+ke+8gSdcXFxcbiAgICAgICAgICAgIGxldCBjb25maWcgPSBKU09OLnBhcnNlKHJlcXVlc3QoZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSkpO1xcXFxuICAgICAgICAgICAgbGV0IGNvbmZpZ0tleSA9IGlucHV0O1xcXFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCJpbnB1dF9uYW1lXFxcXFxcXCIsIGNvbmZpZ0tleSk7XFxcXG4gICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcImlucHV0X2NvZGVcXFxcXFxcIiwgY29uZmlnLmhvbWVQYWdlQ29uZmlnc1tjb25maWdLZXldLmNvbmZpZyk7XFxcXG4gICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vcGFnZS9zZXR0aW5nLWVkaXRvcj9ydWxlPemdkuixhiZ2aWV3PWhvbWVQYWdlTW9kZUVkaXRQYWdlJztcXFxcbiAgICAgICAgfSlcXFxcbiAgICB9KVxcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiAn8J+TpScsXFxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCJcXFxcXFxcIiwgXFxcXFxcXCLor7fovpPlhaXlj6Pku6RcXFxcXFxcIikuaW5wdXQoKCkgPT4ge1xcXFxuICAgICAgICAgICAgaWYgKCFpbnB1dC5pbmNsdWRlcyhcXFxcXFxcIummlumhtemFjee9rlxcXFxcXFwiKSkgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/or6Xlj6Pku6TkuI3mmK/pppbpobXphY3nva5cXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvdXRpbHMnKSkucnVsZSlcXFxcbiAgICAgICAgICAgIGxldCBpbXBvcnRDb25maWdzID0gQ29uZmlnVG9vbC5pbXBvcnQoaW5wdXQpO1xcXFxuICAgICAgICAgICAgaWYgKCFpbXBvcnRDb25maWdzKSByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+S8vOS5juWHuuS6humUme+8jOivt+WwneivleWGjeasoeWvvOWFpe+9nlxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCJpbnB1dF9uYW1lXFxcXFxcXCIsIGltcG9ydENvbmZpZ3MubmFtZSk7XFxcXG4gICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcImlucHV0X2NvZGVcXFxcXFxcIiwgaW1wb3J0Q29uZmlncy5kYXRhLmNvbmZpZyk7XFxcXG4gICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vcGFnZS9zZXR0aW5nLWVkaXRvcj9ydWxlPemdkuixhiZ2aWV3PWhvbWVQYWdlTW9kZUVkaXRQYWdlJztcXFxcbiAgICAgICAgfSlcXFxcbiAgICB9KVxcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiAn8J+TpCcsXFxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcXFxuICAgICAgICB1cmw6ICQoT2JqZWN0LmtleXMoaG9tZVBhZ2VDb25maWdzKS5maWx0ZXIoY29uZmlnS2V5ID0+IGNvbmZpZ0tleSAhPT0gJ3VzZScpLCAyKS5zZWxlY3QoKCkgPT4ge1xcXFxuICAgICAgICAgICAgLy8gaWYgKGlucHV0ID09PSAn6buY6K6kJykgcmV0dXJuICd0b2FzdDovL+m7mOiupOmFjee9ruaXoOazlee8lui+ke+8gSdcXFxcbiAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvdXRpbHMnKSkucnVsZSlcXFxcbiAgICAgICAgICAgIGxldCBjb25maWcgPSBnZXRDb25maWcoKTtcXFxcbiAgICAgICAgICAgIGxldCBzZWxlY3RDb25maWcgPSB7XFxcXG4gICAgICAgICAgICAgICAgbmFtZTogaW5wdXQsXFxcXG4gICAgICAgICAgICAgICAgZGF0YTogY29uZmlnLmhvbWVQYWdlQ29uZmlnc1tpbnB1dF1cXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIHJldHVybiAkKENvbmZpZ1Rvb2wuZW5jVHlwZUxpc3QsIDIpLnNlbGVjdCgoc2VsZWN0Q29uZmlnKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS91dGlscycpKS5ydWxlKVxcXFxuICAgICAgICAgICAgICAgIHJldHVybiBDb25maWdUb29sLnRvQ2xpcGJvYXJkKENvbmZpZ1Rvb2wuZXhwb3J0KHNlbGVjdENvbmZpZy5uYW1lLCBzZWxlY3RDb25maWcsIFxcXFxcXFwi6aaW6aG16YWN572uXFxcXFxcXCIsIGlucHV0KSlcXFxcbiAgICAgICAgICAgIH0sIHNlbGVjdENvbmZpZylcXFxcbiAgICAgICAgfSlcXFxcbiAgICB9KVxcXFxufVxcXFxuXFxcXG4vLyDop6PmnpDphY3nva7mqKHlnZdcXFxcbmZ1bmN0aW9uIGFuYWx5c2lzTW9kZU1vZHVsZShkLCBhbmFseXNpc0NvbmZpZ3MpIHtcXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogJ+iHquWumuS5ieino+aekOaPkuS7ticuYm9sZCgpLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJyaWNoX3RleHRcXFxcXFxcIlxcXFxuICAgIH0pXFxcXG4gICAgZm9yIChsZXQgY29uZmlnS2V5IG9mIE9iamVjdC5rZXlzKGFuYWx5c2lzQ29uZmlncykpIHtcXFxcbiAgICAgICAgaWYgKGNvbmZpZ0tleSA9PT0gJ3VzZScpIGNvbnRpbnVlO1xcXFxuICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IGNvbmZpZ0tleSA9PT0gYW5hbHlzaXNDb25maWdzLnVzZSA/IFxcXFxcXFwi4oCc4oCcXFxcXFxcXCIgKyBjb25maWdLZXkgKyBcXFxcXFxcIuKAneKAnVxcXFxcXFwiIDogY29uZmlnS2V5LFxcXFxuICAgICAgICAgICAgdXJsOiAkKFxcXFxcXFwiaGlrZXI6Ly9lbXB0eSNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKGNvbmZpZ0tleSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IGNvbmZpZyA9IEpTT04ucGFyc2UocmVxdWVzdChnZXRNeVZhcigncWRiX2NvbmZpZycpKSlcXFxcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmFuYWx5c2lzQ29uZmlncy51c2UgPT09IGNvbmZpZ0tleSkge1xcXFxuICAgICAgICAgICAgICAgICAgICAvL3B1dE15VmFyKFxcXFxcXFwiaW5wdXRfY29uZmlnX3R5cGVcXFxcXFxcIiwgJ+ino+aekOaPkuS7tumFjee9ricpXFxcXG4gICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiaW5wdXRfbmFtZVxcXFxcXFwiLCBjb25maWdLZXkpO1xcXFxuICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcImlucHV0X2NvZGVcXFxcXFxcIiwgY29uZmlnLmFuYWx5c2lzQ29uZmlnc1tjb25maWdLZXldLmNvbmZpZyk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiaW5wdXRfZXh0cmFcXFxcXFxcIiwgY29uZmlnLmFuYWx5c2lzQ29uZmlnc1tjb25maWdLZXldLmV4dHJhIHx8IFxcXFxcXFwiXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcImlucHV0X3NldHRpbmdfY29kZVxcXFxcXFwiLCBjb25maWcuYW5hbHlzaXNDb25maWdzW2NvbmZpZ0tleV0uc2V0dGluZyB8fCBcXFxcXFxcIlxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL3BhZ2Uvc2V0dGluZy1lZGl0b3I/cnVsZT3pnZLosYYmdmlldz1hbmFseXNpc01vZGVFZGl0UGFnZSc7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIGNvbmZpZy5hbmFseXNpc0NvbmZpZ3MudXNlID0gY29uZmlnS2V5XFxcXG4gICAgICAgICAgICAgICAgd3JpdGVGaWxlKGdldE15VmFyKCdxZGJfY29uZmlnJyksIEpTT04uc3RyaW5naWZ5KGNvbmZpZykpXFxcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/liIfmjaLmiJDlip8nXFxcXG4gICAgICAgICAgICB9LCBjb25maWdLZXkpLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdmbGV4X2J1dHRvbidcXFxcbiAgICAgICAgfSlcXFxcbiAgICB9XFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgY29sX3R5cGU6ICdibGFua19ibG9jaydcXFxcbiAgICB9KVxcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiAn4p6VJyxcXFxcbiAgICAgICAgY29sX3R5cGU6ICdmbGV4X2J1dHRvbicsXFxcXG4gICAgICAgIHVybDogJ2hpa2VyOi8vcGFnZS9zZXR0aW5nLWVkaXRvcj9ydWxlPemdkuixhiZ2aWV3PWFuYWx5c2lzTW9kZUVkaXRQYWdlJ1xcXFxuICAgIH0pO1xcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiAn4p6WJyxcXFxcbiAgICAgICAgY29sX3R5cGU6ICdmbGV4X2J1dHRvbicsXFxcXG4gICAgICAgIHVybDogJChPYmplY3Qua2V5cyhhbmFseXNpc0NvbmZpZ3MpLmZpbHRlcihjb25maWdLZXkgPT4gY29uZmlnS2V5ICE9PSAndXNlJyAmJiBjb25maWdLZXkgIT09ICfkuI3op6PmnpAnICYmIGNvbmZpZ0tleSAhPT0gJ+aWreaPkicpLCAyKVxcXFxuICAgICAgICAgICAgLnNlbGVjdCgoKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ID09PSAn5LiN6Kej5p6QJyAmJiBpbnB1dCA9PT0gJ+aWreaPkicpIHJldHVybiAndG9hc3Q6Ly/pu5jorqTop6PmnpDml6Dms5XliKDpmaTvvIEnXFxcXG4gICAgICAgICAgICAgICAgbGV0IGNvbmZpZyA9IEpTT04ucGFyc2UocmVxdWVzdChnZXRNeVZhcigncWRiX2NvbmZpZycpKSlcXFxcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT09IGNvbmZpZy5hbmFseXNpc0NvbmZpZ3MudXNlKSByZXR1cm4gJ3RvYXN0Oi8v6K+l6Kej5p6Q5q2j5Zyo5L2/55So77yM5peg5rOV5Yig6Zmk77yBJ1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiAkKCfnoa7orqTliKDpmaRcXFxcXFxcIicgKyBpbnB1dCArICdcXFxcXFxcIu+8nycpLmNvbmZpcm0oKGNvbmZpZywgY29uZmlnS2V5KSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuYW5hbHlzaXNDb25maWdzW2NvbmZpZ0tleV1cXFxcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVGaWxlKGdldE15VmFyKCdxZGJfY29uZmlnJyksIEpTT04uc3RyaW5naWZ5KGNvbmZpZykpXFxcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+WIoOmZpCcgKyBjb25maWdLZXkgKyAn5oiQ5YqfJ1xcXFxuICAgICAgICAgICAgICAgIH0sIGNvbmZpZywgaW5wdXQpXFxcXG4gICAgICAgICAgICB9KVxcXFxuICAgIH0pXFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6ICfwn5OdJyxcXFxcbiAgICAgICAgY29sX3R5cGU6ICdmbGV4X2J1dHRvbicsXFxcXG4gICAgICAgIHVybDogJChPYmplY3Qua2V5cyhhbmFseXNpc0NvbmZpZ3MpLmZpbHRlcihjb25maWdLZXkgPT4gY29uZmlnS2V5ICE9PSAndXNlJyksIDIpXFxcXG4gICAgICAgICAgICAuc2VsZWN0KCgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAvLyBpZiAoaW5wdXQgPT09ICfkuI3op6PmnpAnICYmIGlucHV0ID09PSAn5pat5o+SJykgcmV0dXJuICd0b2FzdDovL+m7mOiupOino+aekOaXoOazlee8lui+ke+8gSdcXFxcbiAgICAgICAgICAgICAgICBsZXQgY29uZmlnID0gSlNPTi5wYXJzZShyZXF1ZXN0KGdldE15VmFyKCdxZGJfY29uZmlnJykpKTtcXFxcbiAgICAgICAgICAgICAgICBsZXQgY29uZmlnS2V5ID0gaW5wdXQ7XFxcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCJpbnB1dF9uYW1lXFxcXFxcXCIsIGNvbmZpZ0tleSk7XFxcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCJpbnB1dF9jb2RlXFxcXFxcXCIsIGNvbmZpZy5hbmFseXNpc0NvbmZpZ3NbY29uZmlnS2V5XS5jb25maWcpO1xcXFxuICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiaW5wdXRfZXh0cmFcXFxcXFxcIiwgY29uZmlnLmFuYWx5c2lzQ29uZmlnc1tjb25maWdLZXldLmV4dHJhIHx8IFxcXFxcXFwiXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiaW5wdXRfc2V0dGluZ19jb2RlXFxcXFxcXCIsIGNvbmZpZy5hbmFseXNpc0NvbmZpZ3NbY29uZmlnS2V5XS5zZXR0aW5nIHx8IFxcXFxcXFwiXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9wYWdlL3NldHRpbmctZWRpdG9yP3J1bGU96Z2S6LGGJnZpZXc9YW5hbHlzaXNNb2RlRWRpdFBhZ2UnO1xcXFxuICAgICAgICAgICAgfSlcXFxcbiAgICB9KVxcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiAn8J+TpScsXFxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCJcXFxcXFxcIiwgXFxcXFxcXCLor7fovpPlhaXlj6Pku6RcXFxcXFxcIikuaW5wdXQoKCkgPT4ge1xcXFxuICAgICAgICAgICAgaWYgKCFpbnB1dC5pbmNsdWRlcyhcXFxcXFxcIuino+aekOaPkuS7tumFjee9rlxcXFxcXFwiKSkgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/or6Xlj6Pku6TkuI3mmK/op6PmnpDmj5Lku7bphY3nva5cXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvdXRpbHMnKSkucnVsZSlcXFxcbiAgICAgICAgICAgIGxldCBpbXBvcnRDb25maWdzID0gQ29uZmlnVG9vbC5pbXBvcnQoaW5wdXQpO1xcXFxuICAgICAgICAgICAgaWYgKCFpbXBvcnRDb25maWdzKSByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+S8vOS5juWHuuS6humUme+8jOivt+WwneivleWGjeasoeWvvOWFpe+9nlxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCJpbnB1dF9uYW1lXFxcXFxcXCIsIGltcG9ydENvbmZpZ3MubmFtZSk7XFxcXG4gICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcImlucHV0X2NvZGVcXFxcXFxcIiwgaW1wb3J0Q29uZmlncy5kYXRhLmNvbmZpZyk7XFxcXG4gICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcImlucHV0X2V4dHJhXFxcXFxcXCIsIGltcG9ydENvbmZpZ3MuZGF0YS5leHRyYSB8fCBcXFxcXFxcIlxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiaW5wdXRfc2V0dGluZ19jb2RlXFxcXFxcXCIsIGltcG9ydENvbmZpZ3MuZGF0YS5zZXR0aW5nIHx8IFxcXFxcXFwiXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL3BhZ2Uvc2V0dGluZy1lZGl0b3I/cnVsZT3pnZLosYYmdmlldz1hbmFseXNpc01vZGVFZGl0UGFnZSc7XFxcXG4gICAgICAgIH0pXFxcXG4gICAgfSlcXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogJ/Cfk6QnLFxcXFxuICAgICAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJyxcXFxcbiAgICAgICAgdXJsOiAkKE9iamVjdC5rZXlzKGFuYWx5c2lzQ29uZmlncykuZmlsdGVyKGNvbmZpZ0tleSA9PiBjb25maWdLZXkgIT09ICd1c2UnKSwgMikuc2VsZWN0KCgpID0+IHtcXFxcbiAgICAgICAgICAgIC8vIGlmIChpbnB1dCA9PT0gJ+m7mOiupCcpIHJldHVybiAndG9hc3Q6Ly/pu5jorqTphY3nva7ml6Dms5XnvJbovpHvvIEnXFxcXG4gICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL3V0aWxzJykpLnJ1bGUpXFxcXG4gICAgICAgICAgICBsZXQgY29uZmlnID0gZ2V0Q29uZmlnKCk7XFxcXG4gICAgICAgICAgICBsZXQgc2VsZWN0Q29uZmlnID0ge1xcXFxuICAgICAgICAgICAgICAgIG5hbWU6IGlucHV0LFxcXFxuICAgICAgICAgICAgICAgIGRhdGE6IGNvbmZpZy5hbmFseXNpc0NvbmZpZ3NbaW5wdXRdXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICByZXR1cm4gJChDb25maWdUb29sLmVuY1R5cGVMaXN0LCAyKS5zZWxlY3QoKHNlbGVjdENvbmZpZykgPT4ge1xcXFxuICAgICAgICAgICAgICAgIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2UvdXRpbHMnKSkucnVsZSlcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29uZmlnVG9vbC50b0NsaXBib2FyZChDb25maWdUb29sLmV4cG9ydChzZWxlY3RDb25maWcubmFtZSwgc2VsZWN0Q29uZmlnLCBcXFxcXFxcIuino+aekOaPkuS7tumFjee9rlxcXFxcXFwiLCBpbnB1dCkpXFxcXG4gICAgICAgICAgICB9LCBzZWxlY3RDb25maWcpXFxcXG4gICAgICAgIH0pXFxcXG4gICAgfSlcXFxcbn1cXFxcblxcXFxuLy8g6Kej5p6Q6K6+572u5qih5Z2XXFxcXG5mdW5jdGlvbiBhbmFseXNpc1NldHRpbmdNb2R1bGUoZCkge1xcXFxuICAgIGxldCBhbmFseXNpc0NvbmZpZ3MgPSBnZXRDb25maWcoJ2FuYWx5c2lzQ29uZmlncycpO1xcXFxuICAgIGFuYWx5c2lzTW9kZU1vZHVsZShkLCBhbmFseXNpc0NvbmZpZ3MpO1xcXFxuICAgIC8qKlxcXFxuICAgICAqIOi/meS4i+mdoueahOmDveaYr+aLv+iuvue9rumhtemdoueahOmFjee9ruWHuuadpSBldmFsIOaJp+ihjO+8jOacgOe7iOiOt+W+l+aPkuS7tuiuvue9rumhtemdoueahCB1cmzvvIzov5nkuKogdXJsIOWPr+S7peaYr+e9kemhteS5n+WPr+S7peaYr+S6jOe6p+eVjOmdolxcXFxuICAgICAqL1xcXFxuICAgIGxldCBhbmFseXNpc1NldHRpbmcgPSBhbmFseXNpc0NvbmZpZ3NbYW5hbHlzaXNDb25maWdzLnVzZV0uc2V0dGluZztcXFxcbiAgICBsZXQgcmVzdWx0ID0gXFxcXFxcXCJ0b2FzdDovL+ivpeaPkuS7tuaXoOiuvue9rumhtemdolxcXFxcXFwiO1xcXFxuICAgIGlmIChhbmFseXNpc1NldHRpbmcpIHtcXFxcbiAgICAgICAgdHJ5IHtcXFxcbiAgICAgICAgICAgIGlmIChhbmFseXNpc1NldHRpbmcuaW5kZXhPZigncmV0dXJuJykgPT0gLTEpIHRocm93IG5ldyBFcnJvcign5b+F6aG7IHJldHVybiBAcnVsZT1qczog5oiWICQoKS5ydWxlJyk7XFxcXG4gICAgICAgICAgICBpZiAoYW5hbHlzaXNTZXR0aW5nLnN0YXJ0c1dpdGgoXFxcXFxcXCIoXFxcXFxcXCIpKSB7XFxcXG4gICAgICAgICAgICAgICAgZXZhbCgncmVzdWx0ID0gJyArIGFuYWx5c2lzU2V0dGluZyk7XFxcXG4gICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgIGV2YWwoJ3Jlc3VsdCA9ICcgKyAnKCgpID0+IHsnICsgYW5hbHlzaXNTZXR0aW5nICsgJ30pKCknKTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgICAgbG9nKGUubWVzc2FnZSk7XFxcXG4gICAgICAgICAgICByZXN1bHQgPSBcXFxcXFxcInRvYXN0Oi8v6ZSZ6K+v55qE6K6+572u6aG16Z2i5Luj56CBLOivt+WJjeW+gCDml6Xlv5cg5p+l55yL6ZSZ6K+v5Y6f5ZugXFxcXFxcXCJcXFxcbiAgICAgICAgfVxcXFxuICAgIH1cXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogJ+Kame+4jycsXFxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcXFxuICAgICAgICB1cmw6IHJlc3VsdFxcXFxuICAgIH0pXFxcXG59XFxcXG5cXFxcbi8v6Ieq5a6a5LmJ5b+r6YCf5pCc57Si5qih5Z2XXFxcXG5mdW5jdGlvbiBxdWlja1NlYXJjaERJWU1vZHVsZShkLCBjb25maWcpIHtcXFxcbiAgICBsZXQgcXVpY2tTZWFyY2hDb25maWdzID0gZ2V0Q29uZmlnKCdxdWlja1NlYXJjaENvbmZpZ3MnLCBjb25maWcpO1xcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiAn6Ieq5a6a5LmJ5b+r6YCf5pCc57SiJy5ib2xkKCksXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiXFxcXG4gICAgfSlcXFxcbiAgICBmb3IgKGxldCBjb25maWdLZXkgb2YgcXVpY2tTZWFyY2hDb25maWdzLm9yZGVyKSB7XFxcXG4gICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogY29uZmlnS2V5LFxcXFxuICAgICAgICAgICAgdXJsOiAkKCfinpXmmK/mt7vliqBcXFxcXFxcXG7inpbmmK/liKDpmaRcXFxcXFxcXG7wn5Od5piv5L+u5pS5XFxcXFxcXFxu8J+UgeaYr+aOkuW6j1xcXFxcXFxcbuKame+4j+aYr+iuvue9ruagt+W8jycpLmNvbmZpcm0oKCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/kuIvmrKHkuI3opoHlho3ngrnmiJHkuoYnXFxcXG4gICAgICAgICAgICB9KSxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nXFxcXG4gICAgICAgIH0pXFxcXG4gICAgfVxcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIGNvbF90eXBlOiAnYmxhbmtfYmxvY2snXFxcXG4gICAgfSlcXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogJ+Kele+4jycsXFxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcXFxuICAgICAgICB1cmw6ICQoJ+aYvuekuuWQjUBA5bCP56iL5bqP5ZCNQEDlm77niYfpk77mjqUnLCAn5qC55o2u5o+Q56S66L6T5YWl5bCx5aW95LqGXFxcXFxcXFxu5bCP56iL5bqP5ZCN5Li656m65YiZ5Li65rW36ZiU5pCc57SiJykuaW5wdXQoKCkgPT4ge1xcXFxuICAgICAgICAgICAgbGV0IGNvbmZpZyA9IEpTT04ucGFyc2UoZmV0Y2goZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSkpO1xcXFxuICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC5zcGxpdCgnQEAnKTtcXFxcbiAgICAgICAgICAgIGlmKGlucHV0Lmxlbmd0aCAhPSAzIHx8IGlucHV0WzBdID09PSBcXFxcXFxcIlxcXFxcXFwiKSByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+agvOW8j+S4jeWvue+8jOaMieagvOW8j+i+k+WFpSFcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIGlmIChjb25maWcucXVpY2tTZWFyY2hDb25maWdzLm9yZGVyLmluZGV4T2YoaW5wdXRbMF0pID09IC0xKSBjb25maWcucXVpY2tTZWFyY2hDb25maWdzLm9yZGVyLnB1c2goaW5wdXRbMF0pO1xcXFxuICAgICAgICAgICAgY29uZmlnLnF1aWNrU2VhcmNoQ29uZmlnc1tpbnB1dFswXV0gPSB7XFxcXG4gICAgICAgICAgICAgICAgbmFtZTogaW5wdXRbMV0sXFxcXG4gICAgICAgICAgICAgICAgcGljOiBpbnB1dFsyXVxcXFxuICAgICAgICAgICAgfTtcXFxcbiAgICAgICAgICAgIHdyaXRlRmlsZShnZXRNeVZhcigncWRiX2NvbmZpZycpLCBKU09OLnN0cmluZ2lmeShjb25maWcpKTtcXFxcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/mt7vliqDmiJDlip8nO1xcXFxuICAgICAgICB9KVxcXFxuICAgIH0pO1xcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiAn4p6WJyxcXFxcbiAgICAgICAgY29sX3R5cGU6ICdmbGV4X2J1dHRvbicsXFxcXG4gICAgICAgIHVybDogJChxdWlja1NlYXJjaENvbmZpZ3Mub3JkZXIsIDIpLnNlbGVjdCgoKSA9PiB7XFxcXG4gICAgICAgICAgICBsZXQgY29uZmlnID0gSlNPTi5wYXJzZShyZXF1ZXN0KGdldE15VmFyKCdxZGJfY29uZmlnJykpKVxcXFxuICAgICAgICAgICAgcmV0dXJuICQoJ+ehruiupOWIoOmZpFxcXFxcXFwiJyArIGlucHV0ICsgJ1xcXFxcXFwi77yfJykuY29uZmlybSgoY29uZmlnLCBjb25maWdLZXkpID0+IHtcXFxcbiAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSBjb25maWcucXVpY2tTZWFyY2hDb25maWdzLm9yZGVyLmluZGV4T2YoY29uZmlnS2V5KTtcXFxcbiAgICAgICAgICAgICAgICBjb25maWcucXVpY2tTZWFyY2hDb25maWdzLm9yZGVyLnNwbGljZShpbmRleCwgMSk7XFxcXG4gICAgICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5xdWlja1NlYXJjaENvbmZpZ3NbY29uZmlnS2V5XVxcXFxuICAgICAgICAgICAgICAgIHdyaXRlRmlsZShnZXRNeVZhcigncWRiX2NvbmZpZycpLCBKU09OLnN0cmluZ2lmeShjb25maWcpKVxcXFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5Yig6ZmkJyArIGNvbmZpZ0tleSArICfmiJDlip8nXFxcXG4gICAgICAgICAgICB9LCBjb25maWcsIGlucHV0KVxcXFxuICAgICAgICB9KVxcXFxuICAgIH0pXFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6ICfwn5OdJyxcXFxcbiAgICAgICAgY29sX3R5cGU6ICdmbGV4X2J1dHRvbicsXFxcXG4gICAgICAgIHVybDogJChxdWlja1NlYXJjaENvbmZpZ3Mub3JkZXIsIDIpLnNlbGVjdCgoKSA9PiB7XFxcXG4gICAgICAgICAgICBsZXQgY29uZmlnID0gSlNPTi5wYXJzZShyZXF1ZXN0KGdldE15VmFyKCdxZGJfY29uZmlnJykpKTtcXFxcbiAgICAgICAgICAgIGxldCBxdWlja1NlYXJjaENvbmZpZ3MgPSBjb25maWcucXVpY2tTZWFyY2hDb25maWdzO1xcXFxuICAgICAgICAgICAgbGV0IGR0ZXh0ID0gaW5wdXQgKyAnQEAnICsgcXVpY2tTZWFyY2hDb25maWdzW2lucHV0XS5uYW1lICsgJ0BAJyArIHF1aWNrU2VhcmNoQ29uZmlnc1tpbnB1dF0ucGljO1xcXFxuICAgICAgICAgICAgcmV0dXJuICQoZHRleHQsICfor7fkv67mlLknKS5pbnB1dCgoY29uZmlnLCByYXcpID0+IHtcXFxcbiAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0LnNwbGl0KCdAQCcpO1xcXFxuICAgICAgICAgICAgICAgIGlmIChyYXcgIT0gaW5wdXRbMF0pIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gY29uZmlnLnF1aWNrU2VhcmNoQ29uZmlncy5vcmRlci5pbmRleE9mKHJhdyk7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5xdWlja1NlYXJjaENvbmZpZ3Mub3JkZXJbaW5kZXhdID0gaW5wdXRbMF07XFxcXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb25maWcucXVpY2tTZWFyY2hDb25maWdzW3Jhd107XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIGlmIChjb25maWcucXVpY2tTZWFyY2hDb25maWdzLm9yZGVyLmluZGV4T2YoaW5wdXRbMF0pID09IC0xKSBjb25maWcucXVpY2tTZWFyY2hDb25maWdzLm9yZGVyLnB1c2goaW5wdXRbMF0pO1xcXFxuICAgICAgICAgICAgICAgIGNvbmZpZy5xdWlja1NlYXJjaENvbmZpZ3NbaW5wdXRbMF1dID0ge1xcXFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBpbnB1dFsxXSxcXFxcbiAgICAgICAgICAgICAgICAgICAgcGljOiBpbnB1dFsyXVxcXFxuICAgICAgICAgICAgICAgIH07XFxcXG4gICAgICAgICAgICAgICAgd3JpdGVGaWxlKGdldE15VmFyKCdxZGJfY29uZmlnJyksIEpTT04uc3RyaW5naWZ5KGNvbmZpZykpO1xcXFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5L+u5pS55oiQ5YqfJztcXFxcbiAgICAgICAgICAgIH0sIGNvbmZpZywgaW5wdXQpXFxcXG4gICAgICAgIH0pXFxcXG4gICAgfSlcXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogJ/CflIEnLFxcXFxuICAgICAgICBjb2xfdHlwZTogJ2ZsZXhfYnV0dG9uJyxcXFxcbiAgICAgICAgdXJsOiAkKCdoaWtlcjovL2VtcHR5I25vSGlzdG9yeSMnKS5ydWxlKCgpID0+IHtcXFxcbiAgICAgICAgICAgIGFkZExpc3RlbmVyKCdvbkNsb3NlJywgJC50b1N0cmluZygoKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgY2xlYXJNeVZhcignanNvbicpO1xcXFxuICAgICAgICAgICAgICAgIGNsZWFyTXlWYXIoJ29wJyk7XFxcXG4gICAgICAgICAgICB9KSlcXFxcbiAgICAgICAgICAgIGlmIChnZXRNeVZhcignanNvbicpID09IFxcXFxcXFwiXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgICAgICBsZXQgY29uZmlnID0gSlNPTi5wYXJzZShyZXF1ZXN0KGdldE15VmFyKCdxZGJfY29uZmlnJykpKTtcXFxcbiAgICAgICAgICAgICAgICBsZXQgcXVpY2tTZWFyY2hDb25maWdzID0gY29uZmlnLnF1aWNrU2VhcmNoQ29uZmlncztcXFxcbiAgICAgICAgICAgICAgICBwdXRNeVZhcignanNvbicsIEpTT04uc3RyaW5naWZ5KHF1aWNrU2VhcmNoQ29uZmlncykpO1xcXFxuICAgICAgICAgICAgfVxcXFxuXFxcXG4gICAgICAgICAgICBsZXQgb2xkID0gSlNPTi5wYXJzZShnZXRNeVZhcignanNvbicpKTtcXFxcbiAgICAgICAgICAgIGxldCBkID0gW107XFxcXG4gICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiAn5YiG5Yir54K55Ye75Lik6aG55Lul5Lqk5o2i6aG65bqPXFxcXFxcXFxu4oCY4oCY5o6S5bqP5a6M5q+V5ZCO54K55oiR5L+d5a2Y5o6S5bqPLOWQpuWImeaOkuW6j+S4jeeUn+aViOKAmeKAmScsXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJyxcXFxcbiAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICBsZXQgY29uZmlnID0gSlNPTi5wYXJzZShmZXRjaChnZXRNeVZhcigncWRiX2NvbmZpZycpKSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5xdWlja1NlYXJjaENvbmZpZ3MgPSBKU09OLnBhcnNlKGdldE15VmFyKCdqc29uJykpO1xcXFxuICAgICAgICAgICAgICAgICAgICB3cml0ZUZpbGUoZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSwgSlNPTi5zdHJpbmdpZnkoY29uZmlnKSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIGJhY2sodHJ1ZSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/kv67mlLnmiJDlip8nXFxcXG4gICAgICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICBvbGQub3JkZXIuZm9yRWFjaCgodmFsdWUsIGluZGV4KSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGdldE15VmFyKCdvcCcpID09IHZhbHVlID8gdmFsdWUgKyAn4oCY4oCYKOW9k+WJjemAieS4rSnigJnigJknIDogdmFsdWUsXFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF8xJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCkubGF6eVJ1bGUoKGtleSwgaW5kZXgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvcCA9IGdldE15VmFyKCdvcCcpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wID09ICcnKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoJ29wJywga2V5KTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3AgPT0ga2V5KSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJNeVZhcignb3AnKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9sZCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ2pzb24nKSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5ld2EgPSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IG9sZC5tb2RlLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcjogb2xkLm9yZGVyXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgb3BpbmRleCA9IG5ld2Eub3JkZXIuaW5kZXhPZihvcCk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKG9waW5kZXggLSBpbmRleCkgPT0gMSkge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdhLm9yZGVyW29waW5kZXhdID0ga2V5O1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdhLm9yZGVyW2luZGV4XSA9IG9wO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3BpbmRleCA+IGluZGV4KSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld2Eub3JkZXIuc3BsaWNlKG9waW5kZXgsIDEpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdhLm9yZGVyLnNwbGljZShpbmRleCwgMCwgb3ApO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld2Eub3JkZXIuc3BsaWNlKG9waW5kZXgsIDEpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdhLm9yZGVyLnNwbGljZShpbmRleCAtIDEsIDAsIG9wKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3YS5vcmRlci5mb3JFYWNoKHZhbHVlID0+IG5ld2FbdmFsdWVdID0gb2xkW3ZhbHVlXSlcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcignanNvbicsIEpTT04uc3RyaW5naWZ5KG5ld2EpKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhck15VmFyKCdvcCcpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICB9LCB2YWx1ZSwgaW5kZXgpXFxcXG4gICAgICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICBzZXRSZXN1bHQoZCk7XFxcXG4gICAgICAgIH0pXFxcXG4gICAgfSlcXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogJ+Kame+4jycsXFxcXG4gICAgICAgIGNvbF90eXBlOiAnZmxleF9idXR0b24nLFxcXFxuICAgICAgICB1cmw6ICQocXVpY2tTZWFyY2hDb25maWdzWydtb2RlJ10gfHwgXFxcXFxcXCJcXFxcXFxcIiwgJ+ivt+ato+ehrui+k+WFpee7hOS7tuagt+W8j1xcXFxcXFxcbuW7uuiuruWAvDpmbGV4X2J1dHRvbiBzY3JvbGxfYnV0dG9uIGljb25fcm91bmRfc21hbGxfNCBpY29uX3NtYWxsXzQnKS5pbnB1dCgoKSA9PiB7XFxcXG4gICAgICAgICAgICBsZXQgY29uZmlnID0gSlNPTi5wYXJzZShyZXF1ZXN0KGdldE15VmFyKCdxZGJfY29uZmlnJykpKTtcXFxcbiAgICAgICAgICAgIGNvbmZpZy5xdWlja1NlYXJjaENvbmZpZ3MubW9kZSA9IGlucHV0O1xcXFxuICAgICAgICAgICAgd3JpdGVGaWxlKGdldE15VmFyKCdxZGJfY29uZmlnJyksIEpTT04uc3RyaW5naWZ5KGNvbmZpZykpO1xcXFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcXFxuICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+agt+W8j+S/ruaUueaIkOWKnydcXFxcbiAgICAgICAgfSlcXFxcbiAgICB9KVxcXFxufVxcXFxuXFxcXG4vL+iuvue9rumhtemdolxcXFxuZnVuY3Rpb24gc2V0dGluZ1BhZ2UoKSB7XFxcXG4gICAgbGV0IGNvbmYgPSBnZXRDb25maWcoKTtcXFxcbiAgICBsZXQgZCA9IFtdO1xcXFxuXFxcXG4gICAgbGV0IHN0YXJDb2xvciA9IGNvbmYuc3RhckNvbG9yIHx8ICcjZmZhYzJkJztcXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogJ+KAnOKAnOKAneKAnScgKyAn6Ieq5a6a5LmJ5pif5pif6aKc6ImyJy5ib2xkKCksXFxcXG4gICAgICAgIGRlc2M6ICfigJzigJzigJ3igJ08Zm9udCBjb2xvcj0nICsgc3RhckNvbG9yICsgJz4nICsgJ+KYheKYheKYheKYheKYhTwvZm9udD4nLFxcXFxuICAgICAgICBjb2xfdHlwZTogJ3RleHRfMScsXFxcXG4gICAgICAgIHVybDogJChzdGFyQ29sb3IsICfliKvlv5jkuoYjJykuaW5wdXQoKCkgPT4ge1xcXFxuICAgICAgICAgICAgbGV0IGNvbmZpZyA9IEpTT04ucGFyc2UoZmV0Y2goZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSkpO1xcXFxuICAgICAgICAgICAgY29uZmlnLnN0YXJDb2xvciA9IGlucHV0O1xcXFxuICAgICAgICAgICAgd3JpdGVGaWxlKGdldE15VmFyKCdxZGJfY29uZmlnJyksIEpTT04uc3RyaW5naWZ5KGNvbmZpZykpO1xcXFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v6K6+572u5pu05pS55bey5L+d5a2YXFxcXFxcXCI7XFxcXG4gICAgICAgIH0pXFxcXG4gICAgfSlcXFxcbiAgICBsZXQgY2hvb3NlQ29sb3IgPSBjb25mLmNob29zZUNvbG9yIHx8ICcjRkE3Mjk4JztcXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogJ+KAnOKAnOKAneKAnScgKyAn6Ieq5a6a5LmJ6YCJ5Lit5qCH562+6aKc6ImyJy5ib2xkKCksXFxcXG4gICAgICAgIGRlc2M6ICfigJzigJzigJ3igJ08Zm9udCBjb2xvcj0nICsgY2hvb3NlQ29sb3IgKyAnPicgKyAn5oiR5piv6aKE6KeI5pWI5p6cPC9mb250PicsXFxcXG4gICAgICAgIGNvbF90eXBlOiAndGV4dF8xJyxcXFxcbiAgICAgICAgdXJsOiAkKGNob29zZUNvbG9yLCAn5Yir5b+Y5LqGIycpLmlucHV0KCgpID0+IHtcXFxcbiAgICAgICAgICAgIGxldCBjb25maWcgPSBKU09OLnBhcnNlKGZldGNoKGdldE15VmFyKCdxZGJfY29uZmlnJykpKTtcXFxcbiAgICAgICAgICAgIGNvbmZpZy5jaG9vc2VDb2xvciA9IGlucHV0O1xcXFxuICAgICAgICAgICAgd3JpdGVGaWxlKGdldE15VmFyKCdxZGJfY29uZmlnJyksIEpTT04uc3RyaW5naWZ5KGNvbmZpZykpO1xcXFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v6K6+572u5pu05pS55bey5L+d5a2YXFxcXFxcXCI7XFxcXG4gICAgICAgIH0pXFxcXG4gICAgfSlcXFxcblxcXFxuICAgIGhvbWVQYWdlU2V0dGluZ01vZHVsZShkKTtcXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICBjb2xfdHlwZTogJ2xpbmUnXFxcXG4gICAgfSlcXFxcblxcXFxuICAgIHF1aWNrU2VhcmNoRElZTW9kdWxlKGQsIGNvbmYpO1xcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIGNvbF90eXBlOiAnbGluZSdcXFxcbiAgICB9KVxcXFxuXFxcXG4gICAgZGV0YWlsVmlld1NldHRpbmdNb2R1bGUoZCk7XFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xcXFxuICAgIH0pXFxcXG5cXFxcbiAgICBpZiAodHJ1ZS8qZ2V0SXRlbSgncGFzc3dvcmQnKSA9PSAndHJ1ZScqLykge1xcXFxuICAgICAgICBhbmFseXNpc1NldHRpbmdNb2R1bGUoZCk7XFxcXG4gICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ2xpbmUnXFxcXG4gICAgICAgIH0pXFxcXG4gICAgfVxcXFxuXFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ0nICsgJ+aBouWkjem7mOiupOiuvue9ricuYm9sZCgpLFxcXFxuICAgICAgICBkZXNjOiAn6YeN55SfJyxcXFxcbiAgICAgICAgY29sX3R5cGU6ICd0ZXh0XzEnLFxcXFxuICAgICAgICB1cmw6ICQoWyfph43nva7mmJ/mmJ/popzoibInLCAn6YeN572u6YCJ5Lit5qCH562+6aKc6ImyJywgJ+mHjee9ruW/q+mAn+aQnOe0oicsICfph43nva7pppbpobXkuLrpu5jorqQnLCAn6YeN572u6K+m5oOF6aG1JyAsICfmuIXpmaTlhajpg6jorr7nva4nXSwgMSkuc2VsZWN0KCgpID0+IHtcXFxcbiAgICAgICAgICAgIHJldHVybiAkKFxcXFxcXFwi56Gu5a6a6KaBXFxcXFxcXCIgKyBpbnB1dCArIFxcXFxcXFwi77yfXFxcXFxcXCIpLmNvbmZpcm0oKHNlbCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIGxldCBpdGVtID0gJyc7XFxcXG4gICAgICAgICAgICAgICAgc3dpdGNoIChzZWwpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAn6YeN572u5pif5pif6aKc6ImyJzpcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSAnc3RhckNvbG9yJztcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcXFxuICAgICAgICAgICAgICAgICAgICBjYXNlICfph43nva7pgInkuK3moIfnrb7popzoibInOlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSA9ICdjaG9vc2VDb2xvcic7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXFxcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAn6YeN572u5b+r6YCf5pCc57SiJzpcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSAncXVpY2tTZWFyY2hDb25maWdzJztcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcXFxuICAgICAgICAgICAgICAgICAgICBjYXNlICfph43nva7pppbpobXkuLrpu5jorqQnOlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSA9ICdob21lUGFnZUNvbmZpZ3MnO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ+mHjee9ruivpuaDhemhtSc6XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gJ2RldGFpbFZpZXdDb25maWdzJztcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcXFxuICAgICAgICAgICAgICAgICAgICBjYXNlICfmuIXpmaTlhajpg6jorr7nva4nOlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSA9ICdhbGwnO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIC8vIGV2YWwoSlNPTi5wYXJzZShyZXF1ZXN0KCdoaWtlcjovL3BhZ2Uvc2V0dGluZ1BhZ2UnKSkucnVsZSk7XFxcXG4gICAgICAgICAgICAgICAgbGV0IGRlZmF1bHRDb25maWdzID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2RlZmF1bHRDb25maWdzXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgIGlmIChpdGVtID09ICdhbGwnKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlRmlsZShnZXRNeVZhcigncWRiX2NvbmZpZycpLCBKU09OLnN0cmluZ2lmeShkZWZhdWx0Q29uZmlncykpO1xcXFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+W3slxcXFxcXFwiICsgc2VsO1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZihpdGVtID09IFxcXFxcXFwiaG9tZVBhZ2VDb25maWdzXFxcXFxcXCIpe1xcXFxuICAgICAgICAgICAgICAgICAgICBsZXQgY29uZmlnID0gSlNPTi5wYXJzZShmZXRjaChnZXRNeVZhcigncWRiX2NvbmZpZycpKSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ1tpdGVtXVtcXFxcXFxcIum7mOiupFxcXFxcXFwiXSA9IGRlZmF1bHRDb25maWdzW2l0ZW1dW1xcXFxcXFwi6buY6K6kXFxcXFxcXCJdO1xcXFxuICAgICAgICAgICAgICAgICAgICBjb25maWdbaXRlbV0udXNlID0gXFxcXFxcXCLpu5jorqRcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVGaWxlKGdldE15VmFyKCdxZGJfY29uZmlnJyksIEpTT04uc3RyaW5naWZ5KGNvbmZpZykpO1xcXFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+W3slxcXFxcXFwiICsgc2VsO1xcXFxuICAgICAgICAgICAgICAgIH1lbHNlIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbmZpZyA9IEpTT04ucGFyc2UoZmV0Y2goZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSkpO1xcXFxuICAgICAgICAgICAgICAgICAgICBjb25maWdbaXRlbV0gPSBkZWZhdWx0Q29uZmlnc1tpdGVtXTtcXFxcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVGaWxlKGdldE15VmFyKCdxZGJfY29uZmlnJyksIEpTT04uc3RyaW5naWZ5KGNvbmZpZykpO1xcXFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+W3slxcXFxcXFwiICsgc2VsO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0sIGlucHV0KVxcXFxuICAgICAgICB9KVxcXFxuICAgIH0pXFxcXG4gICAgc2V0UmVzdWx0KGQpO1xcXFxufVxcXFxuXFxcXG5sZXQgdmlldyA9IGdldFBhcmFtKFxcXFxcXFwidmlld1xcXFxcXFwiLFxcXFxcXFwiXFxcXFxcXCIpO1xcXFxuaWYodmlldz09XFxcXFxcXCJcXFxcXFxcIil7XFxcXG4gICAgc2V0UGFnZVRpdGxlKFxcXFxcXFwi6K6+572uXFxcXFxcXCIpXFxcXG4gICAgc2V0dGluZ1BhZ2UoKTtcXFxcbn1lbHNlIGlmKHZpZXc9PVxcXFxcXFwiYW5hbHlzaXNTZXR0aW5nTW9kdWxlXFxcXFxcXCIpe1xcXFxuICAgIGxldCBkID0gW107XFxcXG4gICAgc2V0UGFnZVRpdGxlKFxcXFxcXFwi6Kej5p6Q6K6+572uXFxcXFxcXCIpXFxcXG4gICAgYW5hbHlzaXNTZXR0aW5nTW9kdWxlKGQpO1xcXFxuICAgIHNldFJlc3VsdChkKTtcXFxcbn1cXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLpu5jorqTphY3nva5cXFwiLFxcXCJwYXRoXFxcIjpcXFwiZGVmYXVsdENvbmZpZ3NcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXHJcXFxcbmxldCBkZWZhdWx0Q29uZmlncyA9IHtcXFxcclxcXFxuICAgIHN0YXJDb2xvcjogXFxcXFxcXCIjZmZhYzJkXFxcXFxcXCIsXFxcXHJcXFxcbiAgICBjaG9vc2VDb2xvcjogXFxcXFxcXCIjRkE3Mjk4XFxcXFxcXCIsXFxcXHJcXFxcbiAgICBxdWlja1NlYXJjaENvbmZpZ3M6IHtcXFxcclxcXFxuICAgICAgICBtb2RlOiBcXFxcXFxcInNjcm9sbF9idXR0b25cXFxcXFxcIixcXFxcclxcXFxuICAgICAgICBvcmRlcjogW1xcXFxcXFwi5rW36ZiU5pCc57SiXFxcXFxcXCJdLFxcXFxyXFxcXG4gICAgICAgIFxcXFxcXFwi5rW36ZiU5pCc57SiXFxcXFxcXCI6IHtcXFxcclxcXFxuICAgICAgICAgICAgbmFtZTogXFxcXFxcXCJcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICAgICAgcGljOiBcXFxcXFxcIlxcXFxcXFwiXFxcXHJcXFxcbiAgICAgICAgfVxcXFxyXFxcXG4gICAgfSxcXFxcclxcXFxuICAgIGRldGFpbHNWaWV3Q29uZmlnczoge1xcXFxyXFxcXG4gICAgICAgIHVzZTogXFxcXFxcXCLpu5jorqRcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICBcXFxcXFxcIum7mOiupFxcXFxcXFwiOiB7XFxcXHJcXFxcbiAgICAgICAgICAgIGNvbmZpZzogXFxcXFxcXCJldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL21haW4nKSkucnVsZSk7ZGV0YWlsc1ZpZXcodHlwZSwgaWQpO1xcXFxcXFwiXFxcXHJcXFxcbiAgICAgICAgfVxcXFxyXFxcXG4gICAgfSxcXFxcclxcXFxuICAgIGhvbWVQYWdlQ29uZmlnczp7XFxcXHJcXFxcbiAgICAgICAgdXNlOiBcXFxcXFxcIum7mOiupFxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgIFxcXFxcXFwi6buY6K6kXFxcXFxcXCI6IHtcXFxcclxcXFxuICAgICAgICAgICAgY29uZmlnOiBgbGV0IGQgPSBbXTtcXFxcclxcXFxuZC5wdXNoKHtcXFxcclxcXFxuICAgIHRpdGxlOiAnJyxcXFxcclxcXFxuICAgIGltZzogJ2h0dHBzOi8vZ2l0Y29kZS5uZXQvcXFfNDE4NDY3NTYvaGlrZXIvLS9yYXcvbWFzdGVyL2ltZy/osYbnk6MucG5nJyxcXFxcclxcXFxuICAgIGRlc2M6ICcwJyxcXFxcclxcXFxuICAgIGNvbF90eXBlOiAnY2FyZF9waWNfMScsXFxcXHJcXFxcbiAgICB1cmw6ICdoaWtlcjovL3BhZ2Uvc2V0dGluZ1BhZ2UnXFxcXHJcXFxcbn0pXFxcXHJcXFxcblxcXFxyXFxcXG5sZXQgcyA9IFtcXFxcXFxcIuaOqOiNkFxcXFxcXFwiLCBcXFxcXFxcIueDremXqFxcXFxcXFwiLCBcXFxcXFxcIuWIhuexu1xcXFxcXFwiLCBcXFxcXFxcIueJh+WNlVxcXFxcXFwiLCBcXFxcXFxcIuamnOWNlVxcXFxcXFwiLCBcXFxcXFxcIuWwhuS4iuaYoFxcXFxcXFwiXTtcXFxcclxcXFxubGV0IGltZyA9IFxcXFxcXFwiaHR0cHM6Ly9naXRjb2RlLm5ldC9xcV80MTg0Njc1Ni9oaWtlci8tL3Jhdy9tYXN0ZXIvaW1nL1xcXFxcXFwiO1xcXFxyXFxcXG5mb3IgKGxldCBpIGluIHMpIHtcXFxcclxcXFxuICAgIGQucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgdGl0bGU6IHNbaV0sXFxcXHJcXFxcbiAgICAgICAgaW1nOiBpbWcgKyBzW2ldICsgJy5qcGcnLFxcXFxyXFxcXG4gICAgICAgIGNvbF90eXBlOiAnaWNvbl8yJyxcXFxcclxcXFxuICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiICsgJyRwYWdle2Z5cGFnZX0vIy8nICsgc1tpXSArIFxcXFxcXFwiI25vSGlzdG9yeSNcXFxcXFxcIlxcXFxyXFxcXG4gICAgfSlcXFxcclxcXFxufVxcXFxyXFxcXG5yZXR1cm4gZDtgXFxcXHJcXFxcbiAgICAgICAgfVxcXFxyXFxcXG4gICAgfSxcXFxcclxcXFxuICAgIGFuYWx5c2lzQ29uZmlnczoge1xcXFxyXFxcXG4gICAgICAgIHVzZTogXFxcXFxcXCLkuI3op6PmnpBcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICBcXFxcXFxcIuS4jeino+aekFxcXFxcXFwiOiB7XFxcXHJcXFxcbiAgICAgICAgICAgIGNvbmZpZzogJC50b1N0cmluZygoKSA9PiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQ7XFxcXHJcXFxcbiAgICAgICAgICAgIH0pLFxcXFxyXFxcXG4gICAgICAgICAgICBzZXR0aW5nOiAkLnRvU3RyaW5nKCgpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v6K+l5o+S5Lu25peg6K6+572u6aG16Z2iXFxcXFxcXCI7XFxcXHJcXFxcbiAgICAgICAgICAgIH0pXFxcXHJcXFxcbiAgICAgICAgfSxcXFxcclxcXFxuICAgICAgICBcXFxcXFxcIuaWreaPklxcXFxcXFwiOiB7XFxcXHJcXFxcbiAgICAgICAgICAgIGNvbmZpZzogJC50b1N0cmluZygoKSA9PiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBsZXQgZmlsZSA9IFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9EdWFuTmlhbi9NeVBhcnNlLmpzb25cXFxcXFxcIjtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGxldCBvbGRmaWxlID0gXFxcXFxcXCJoaWtlcjovL2ZpbGVzL2NhY2hlL015UGFyc2VTZXQuanNvblxcXFxcXFwiO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgaWYgKGZpbGVFeGlzdChmaWxlKSkge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGV2YWwoJ2pzb249JyArIGZldGNoKGZpbGUpKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBsZXQganNVcmwgPSBqc29uLnNldHRpbmdzLmNqO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGV2YWwoZmV0Y2goanNVcmwpKTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXl0bVBhcnNlKGlucHV0KTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsZUV4aXN0KG9sZGZpbGUpKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IGpzVXJsID0gSlNPTi5wYXJzZShmZXRjaChvbGRmaWxlKSkuY2o7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgZXZhbChmZXRjaChqc1VybCkpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBheXRtUGFyc2UoaW5wdXQpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5rKh5om+5Yiw5pat5o+S6YWN572u5paH5Lu2JztcXFxcclxcXFxuICAgICAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICAgICAgfSksXFxcXHJcXFxcbiAgICAgICAgICAgIHNldHRpbmc6ICQudG9TdHJpbmcoKCkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgbGV0IGZpbGUgPSBcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvRHVhbk5pYW4vTXlQYXJzZS5qc29uXFxcXFxcXCI7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBsZXQgb2xkZmlsZSA9IFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9jYWNoZS9NeVBhcnNlU2V0Lmpzb25cXFxcXFxcIjtcXFxcclxcXFxuICAgICAgICAgICAgICAgIGlmIChmaWxlRXhpc3QoZmlsZSkpIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBldmFsKCdqc29uPScgKyBmZXRjaChmaWxlKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IGpzVXJsID0ganNvbi5zZXR0aW5ncy5jajtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBldmFsKGZldGNoKGpzVXJsKSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldFVybDtcXFxcclxcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsZUV4aXN0KG9sZGZpbGUpKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IGpzVXJsID0gSlNPTi5wYXJzZShmZXRjaChvbGRmaWxlKSkuY2o7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgZXZhbChmZXRjaChqc1VybCkpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXRVcmw7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vcGFnZS9Sb3V0ZT9ydWxlPU15RmllbGThtLDigb8mdHlwZT3orr7nva5cXFxcXFxcIjtcXFxcclxcXFxuICAgICAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICAgICAgfSlcXFxcclxcXFxuICAgICAgICB9XFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbn1cXFxcclxcXFxuJC5leHBvcnRzID0gZGVmYXVsdENvbmZpZ3M7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwi5bel5YW36ZuGXFxcIixcXFwicGF0aFxcXCI6XFxcInV0aWxzXFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxyXFxcXG4vL+WIneWni+WMlumFjee9rixuYW1l5Li66YWN572u6aG55ZCN56ewXFxcXHJcXFxcbmZ1bmN0aW9uIGluaXRDb25maWdzKG5hbWUsIGNvbmZpZykge1xcXFxyXFxcXG4gICAgaWYgKCFjb25maWcpIHtcXFxcclxcXFxuICAgICAgICBjb25maWcgPSBKU09OLnBhcnNlKGZldGNoKGdldE15VmFyKCdxZGJfY29uZmlnJykpKTtcXFxcclxcXFxuICAgIH1cXFxcclxcXFxuICAgIGlmIChjb25maWdbbmFtZV0gPT0gbnVsbCkge1xcXFxyXFxcXG4gICAgICAgIGxldCBkZWZhdWx0Q29uZmlncyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9kZWZhdWx0Q29uZmlnc1xcXFxcXFwiKTtcXFxcclxcXFxuICAgICAgICBjb25maWdbbmFtZV0gPSBkZWZhdWx0Q29uZmlnc1tuYW1lXSA/IGRlZmF1bHRDb25maWdzW25hbWVdIDoge307XFxcXHJcXFxcbiAgICAgICAgd3JpdGVGaWxlKGdldE15VmFyKCdxZGJfY29uZmlnJyksIEpTT04uc3RyaW5naWZ5KGNvbmZpZykpO1xcXFxyXFxcXG4gICAgfVxcXFxyXFxcXG4gICAgcmV0dXJuIGNvbmZpZztcXFxcclxcXFxufVxcXFxyXFxcXG5cXFxcclxcXFxuLy/ojrflj5bphY3nva7poblcXFxcclxcXFxuZnVuY3Rpb24gZ2V0Q29uZmlnKG5hbWUsIHJvb3RDb25maWcpIHtcXFxcclxcXFxuICAgIGxldCBjb25maWcgPSByb290Q29uZmlnID8gcm9vdENvbmZpZyA6IEpTT04ucGFyc2UoZmV0Y2goZ2V0TXlWYXIoJ3FkYl9jb25maWcnKSkpO1xcXFxyXFxcXG4gICAgaWYgKG5hbWUpIHtcXFxcclxcXFxuICAgICAgICBpZiAoY29uZmlnW25hbWVdID09IG51bGwpIHtcXFxcclxcXFxuICAgICAgICAgICAgY29uZmlnID0gaW5pdENvbmZpZ3MobmFtZSwgY29uZmlnKTtcXFxcclxcXFxuICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgcmV0dXJuIGNvbmZpZ1tuYW1lXTtcXFxcclxcXFxuICAgIH0gZWxzZSB7XFxcXHJcXFxcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcXFxcclxcXFxuICAgIH1cXFxcclxcXFxufVxcXFxyXFxcXG5cXFxcclxcXFxuLy/nvJbnoIHlt6XlhbfnsbtcXFxcclxcXFxubGV0IFppcFRvb2wgPSB7XFxcXHJcXFxcbiAgICBkZXBlbmRlbmNlOiAnaHR0cHM6Ly91bnBrZy5jb20vbHotc3RyaW5nQDEuNC40L2xpYnMvbHotc3RyaW5nLm1pbi5qcycsXFxcXHJcXFxcbiAgICBjb21wcmVzczoge1xcXFxyXFxcXG4gICAgICAgIHNpemU6IHtcXFxcclxcXFxuICAgICAgICAgICAga2V5OiBcXFxcXFxcInRleHQtY29tcHJlc3Mtc2l6ZVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICBzZXQ6IChuZXdWYWx1ZSkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIodGhpcy5rZXksIG5ld1ZhbHVlLnRvU3RyaW5nKCkpXFxcXHJcXFxcbiAgICAgICAgICAgIH0sXFxcXHJcXFxcbiAgICAgICAgICAgIGdldDogKCkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGdldE15VmFyKHRoaXMua2V5LCBcXFxcXFxcIjBcXFxcXFxcIikpXFxcXHJcXFxcbiAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICB9LFxcXFxyXFxcXG4gICAgICAgIGV4ZWM6IChpbnB1dCkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICBldmFsKHJlcXVlc3QoWmlwVG9vbC5kZXBlbmRlbmNlKSlcXFxcclxcXFxuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IExaU3RyaW5nLmNvbXByZXNzVG9FbmNvZGVkVVJJQ29tcG9uZW50KGlucHV0KVxcXFxyXFxcXG4gICAgICAgICAgICAgICAgLy8gWmlwVG9vbC5jb21wcmVzcy5zaXplLnNldChyZXN1bHQubGVuZ3RoICogMilcXFxcclxcXFxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxcXFxyXFxcXG4gICAgICAgIH1cXFxcclxcXFxuICAgIH0sXFxcXHJcXFxcbiAgICBkZWNvbXByZXNzOiB7XFxcXHJcXFxcbiAgICAgICAgc2l6ZToge1xcXFxyXFxcXG4gICAgICAgICAgICBnZXQ6ICgpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRNeVZhcihcXFxcXFxcInRleHQtZGVjb21wcmVzc1xcXFxcXFwiLCBcXFxcXFxcIjBcXFxcXFxcIilcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICAubGVuZ3RoXFxcXHJcXFxcbiAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICB9LFxcXFxyXFxcXG4gICAgICAgIGV4ZWM6IChpbnB1dCkgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICBldmFsKHJlcXVlc3QoWmlwVG9vbC5kZXBlbmRlbmNlKSlcXFxcclxcXFxuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IExaU3RyaW5nLmRlY29tcHJlc3NGcm9tRW5jb2RlZFVSSUNvbXBvbmVudChpbnB1dClcXFxcclxcXFxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxcXFxyXFxcXG4gICAgICAgIH1cXFxcclxcXFxuICAgIH1cXFxcclxcXFxufVxcXFxyXFxcXG5cXFxcclxcXFxuLy8g6YWN572u6aG55bel5YW357G7XFxcXHJcXFxcbmxldCBDb25maWdUb29sID0ge1xcXFxyXFxcXG4gICAgZW5jVHlwZUxpc3Q6IFsnQmFzZTY0JywgJ1ppcHBlciddLmNvbmNhdChnZXRQYXN0ZXMoKSksXFxcXHJcXFxcbiAgICB0b0NsaXBib2FyZDogKGNvbmZpZ0NvbW1hbmQsIG5hbWUpID0+IHtcXFxcclxcXFxuICAgICAgICBpZiAoY29uZmlnQ29tbWFuZC5zdGFydHNXaXRoKCd0b2FzdDovLycpKSByZXR1cm4gY29uZmlnQ29tbWFuZFxcXFxyXFxcXG4gICAgICAgIGlmICghbmFtZSkge1xcXFxyXFxcXG4gICAgICAgICAgICBsZXQgY29tbWFuZFNwbGl0cyA9IGNvbmZpZ0NvbW1hbmQuc3BsaXQoXFxcXFxcXCLvv6VcXFxcXFxcIilcXFxcclxcXFxuICAgICAgICAgICAgbmFtZSA9IGNvbW1hbmRTcGxpdHNbMl1cXFxcclxcXFxuICAgICAgICAgICAgbmFtZSA9IG5hbWUgPyAoXFxcXFxcXCLigJxcXFxcXFxcIiArIG5hbWUgKyBcXFxcXFxcIuKAnVxcXFxcXFwiKSA6ICcnXFxcXHJcXFxcbiAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcclxcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJjb3B5Oi8vXFxcXFxcXCIgKyBjb25maWdDb21tYW5kICsgXFxcXFxcXCIuanM6J3RvYXN0Oi8v5a+85Ye6XFxcXFxcXCIgKyBuYW1lICsgXFxcXFxcXCLmiJDlip/vvIEnXFxcXFxcXCI7XFxcXHJcXFxcbiAgICB9LFxcXFxyXFxcXG4gICAgZXhwb3J0OiAobmFtZSwgY29uZmlnLCByZW1hcmssIGVuY1R5cGUpID0+IHtcXFxcclxcXFxuICAgICAgICBsZXQgc3ltYm9sID0gXFxcXFxcXCLpnZLosYblj6Pku6Tvv6VcXFxcXFxcIiArIHJlbWFyayArIFxcXFxcXFwi77+lXFxcXFxcXCIgKyBuYW1lICsgXFxcXFxcXCLvv6VcXFxcXFxcIiArIGVuY1R5cGUgKyBcXFxcXFxcIu+/pVxcXFxcXFwiO1xcXFxyXFxcXG4gICAgICAgIGxldCByZXN1bHQgPSBjb25maWdcXFxcclxcXFxuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXFxcXFxcXCJvYmplY3RcXFxcXFxcIikge1xcXFxyXFxcXG4gICAgICAgICAgICByZXN1bHQgPSBKU09OLnN0cmluZ2lmeShjb25maWcpO1xcXFxyXFxcXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXFxcXFxcXCJzdHJpbmdcXFxcXFxcIikge1xcXFxyXFxcXG4gICAgICAgICAgICByZXN1bHQgPSBjb25maWc7XFxcXHJcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcclxcXFxuICAgICAgICAgICAgdGhyb3cgXFxcXFxcXCLlr7zlh7rmlbDmja7kuI3lkIjms5VcXFxcXFxcIlxcXFxyXFxcXG4gICAgICAgIH1cXFxcclxcXFxuICAgICAgICBzd2l0Y2ggKGVuY1R5cGUpIHtcXFxcclxcXFxuICAgICAgICAgICAgY2FzZSAnQmFzZTY0JzpcXFxcclxcXFxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGJhc2U2NEVuY29kZShyZXN1bHQpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxcXHJcXFxcbiAgICAgICAgICAgIGNhc2UgJ1ppcHBlcic6XFxcXHJcXFxcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBaaXBUb29sLmNvbXByZXNzLmV4ZWMocmVzdWx0KVxcXFxyXFxcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxcXHJcXFxcbiAgICAgICAgICAgIGRlZmF1bHQgOlxcXFxyXFxcXG4gICAgICAgICAgICAgICAgaWYgKGdldEFwcFZlcnNpb24oKSA+IDIwNzApIHtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBzeW1ib2wgPSBcXFxcXFxcIumdkuixhuWPo+S7pO+/pVxcXFxcXFwiICsgcmVtYXJrICsgXFxcXFxcXCLvv6VcXFxcXFxcIiArIG5hbWVcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBzaGFyZVBhc3RlKENvbmZpZ1Rvb2wuZXhwb3J0KG5hbWUsIGNvbmZpZywgcmVtYXJrLCAnWmlwcGVyJyksZW5jVHlwZSk7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdcXFxcXFxcXG5cXFxcXFxcXG4nICsgc3ltYm9sXFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/or7fmm7TmlrDop4bnlYzniYjmnKzoh7MgQzIwNzAg5Lul5LiKJ1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxcXHJcXFxcbiAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgIHJlc3VsdCA9IHN5bWJvbCArIHJlc3VsdFxcXFxyXFxcXG4gICAgICAgIHJldHVybiByZXN1bHQ7XFxcXHJcXFxcbiAgICB9LFxcXFxyXFxcXG4gICAgaW1wb3J0OiAoY29uZmlnQ29tbWFuZCkgPT4ge1xcXFxyXFxcXG4gICAgICAgIGxldCByZXN1bHQgPSAnJ1xcXFxyXFxcXG4gICAgICAgIGlmIChjb25maWdDb21tYW5kLnN0YXJ0c1dpdGgoJ+S6kScpKSB7XFxcXHJcXFxcbiAgICAgICAgICAgIGlmIChnZXRBcHBWZXJzaW9uKCkgPiAyMDcwKSB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBjb25maWdDb21tYW5kLnNwbGl0KCfpnZLosYYnKVswXS5yZXBsYWNlKC9cXFxcXFxcXFxcXFxcXFxcbi8sICcnKVxcXFxyXFxcXG4gICAgICAgICAgICAgICAgY29uZmlnQ29tbWFuZCA9IHBhcnNlUGFzdGUocmVzdWx0KVxcXFxyXFxcXG4gICAgICAgICAgICB9IGVsc2Uge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+ivt+abtOaWsOinhueVjOeJiOacrOiHsyBDMjA3MCDku6XkuIonXFxcXHJcXFxcbiAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgdHJ5IHtcXFxcclxcXFxuICAgICAgICAgICAgbGV0IHJlc3VsdFNwbGl0cyA9IGNvbmZpZ0NvbW1hbmQuc3BsaXQoXFxcXFxcXCLvv6VcXFxcXFxcIilcXFxcclxcXFxuICAgICAgICAgICAgbGV0IGVuY1R5cGUgPSByZXN1bHRTcGxpdHNbM11cXFxcclxcXFxuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0U3BsaXRzWzRdXFxcXHJcXFxcbiAgICAgICAgICAgIHN3aXRjaCAoZW5jVHlwZSkge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgY2FzZSAnQmFzZTY0JzpcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBiYXNlNjREZWNvZGUocmVzdWx0KTtcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBicmVhaztcXFxcclxcXFxuICAgICAgICAgICAgICAgIGNhc2UgJ1ppcHBlcic6XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gWmlwVG9vbC5kZWNvbXByZXNzLmV4ZWMocmVzdWx0KVxcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcXFxyXFxcXG4gICAgICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgICAgIHJlc3VsdCA9IEpTT04ucGFyc2UocmVzdWx0KTtcXFxcclxcXFxuICAgICAgICB9IGNhdGNoIChlKSB7XFxcXHJcXFxcbiAgICAgICAgICAgIGxvZyhlLm1lc3NhZ2UpXFxcXHJcXFxcbiAgICAgICAgICAgIHRocm93IFxcXFxcXFwi5a+85YWl5pWw5o2u5LiN5ZCI5rOVXFxcXFxcXCJcXFxcclxcXFxuICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcXFxcclxcXFxuICAgIH1cXFxcclxcXFxufVxcXCJ9XVwifSIsInBpY1VybCI6Imh0dHBzOi8vcW5tb2IzLmRvdWJhbmlvLmNvbS92aWV3L3Bob3RvL3NfcmF0aW9fcG9zdGVyL3B1YmxpYy9wMjU1NDExMzQ1MS5qcGc/aW1hZ2VWaWV3Mi8wL3EvODAvdy85OTk5L2gvMTIwL2Zvcm1hdC93ZWJwQFJlZmVyZXI9aHR0cHM6Ly9xbm1vYjMuZG91YmFuaW8uY29tL3ZpZXcvcGhvdG8vc19yYXRpb19wb3N0ZXIvcHVibGljL3AyNTU0MTEzNDUxLmpwZz9pbWFnZVZpZXcyLzAvcS84MC93Lzk5OTkvaC8xMjAvZm9ybWF0L3dlYnAiLCJ0aXRsZSI6IuS5nemZjemjjiJ9
PPJft8LW,SharedPhysicsSystem.Solve,TornadoTechnologies,C#,Wednesday 26th of June 2024 08:06:35 AM CDT," 	    private void Solve(EntityUid uid, PhysicsMapComponent component, float frameTime, float dtRatio, float invDt, bool prediction)
    {
        // Build and simulated islands from awake bodies.
        _bodyStack.EnsureCapacity(component.AwakeBodies.Count);
        _islandSet.EnsureCapacity(component.AwakeBodies.Count);
        _awakeBodyList.AddRange(component.AwakeBodies);

        var bodyQuery = GetEntityQuery<PhysicsComponent>();
        var metaQuery = GetEntityQuery<MetaDataComponent>();
        var jointQuery = GetEntityQuery<JointComponent>();
        var jointRelayQuery = GetEntityQuery<JointRelayTargetComponent>();

        var islandIndex = 0;
        var loneIsland = new IslandData(
            islandIndex++,
            true,
            _islandBodyPool.Get(),
            _islandContactPool.Get(),
            _islandJointPool.Get(),
            new List<(Joint Joint, float Error)>());

        var islands = new List<IslandData>();
        var islandJoints = new List<(Joint Original, Joint Joint)>();

        // Build the relevant islands / graphs for all bodies.
        foreach (var seed in _awakeBodyList)
        {
            // I tried not running prediction for non-contacted entities but unfortunately it looked like shit
            // when contact broke so if you want to try that then GOOD LUCK.
            if (seed.Island) continue;

            var seedUid = seed.Owner;

            if (!metaQuery.TryGetComponent(seedUid, out var metadata))
            {
                Log.Error($""Found deleted entity {ToPrettyString(seedUid)} on map!"");
                RemoveSleepBody(seedUid, seed, component);
                continue;
            }

            if ((metadata.EntityPaused && !seed.IgnorePaused) ||
                (prediction && !seed.Predict) ||
                !seed.CanCollide ||
                seed.BodyType == BodyType.Static)
            {
                continue;
            }

            // Start of a new island
            var bodies = _islandBodyPool.Get();
            var contacts = _islandContactPool.Get();
            var joints = _islandJointPool.Get();
            _bodyStack.Push(seed);

            seed.Island = true;

            while (_bodyStack.TryPop(out var body))
            {
                var bodyUid = body.Owner;

                bodies.Add(body);
                _islandSet.Add(body);

                // Static bodies don't propagate islands
                if (body.BodyType == BodyType.Static) continue;

                // As static bodies can never be awake (unlike Farseer) we'll set this after the check.
                SetAwake(bodyUid, body, true, updateSleepTime: false);

                var node = body.Contacts.First;

                while (node != null)
                {
                    var contact = node.Value;
                    node = node.Next;

                    // Has this contact already been added to an island / is it pre-init?
                    if ((contact.Flags & (ContactFlags.Island | ContactFlags.PreInit)) != 0x0) continue;

                    // Is this contact solid and touching?
                    if (!contact.Enabled || !contact.IsTouching) continue;

                    // Skip sensors.
                    if (contact.FixtureA?.Hard != true || contact.FixtureB?.Hard != true) continue;

                    contacts.Add(contact);
                    contact.Flags |= ContactFlags.Island;
                    var bodyA = contact.BodyA!;
                    var bodyB = contact.BodyB!;

                    var other = bodyA == body ? bodyB : bodyA;

                    // Was the other body already added to this island?
                    if (other.Island) continue;

                    _bodyStack.Push(other);
                    other.Island = true;
                }

                // Handle joints
                if (jointRelayQuery.TryGetComponent(bodyUid, out var relayComp))
                {
                    foreach (var relay in relayComp.Relayed)
                    {
                        if (!jointQuery.TryGetComponent(relay, out var jointComp))
                            continue;

                        foreach (var joint in jointComp.GetJoints.Values)
                        {
                            if (joint.IslandFlag)
                                continue;

                            var uidA = joint.BodyAUid;
                            var uidB = joint.BodyBUid;
                            DebugTools.AssertNotEqual(uidA, uidB);

                            if (jointQuery.TryGetComponent(uidA, out var jointCompA) &&
                                jointCompA.Relay != null)
                            {
                                DebugTools.AssertNotEqual(uidB, jointCompA.Relay.Value);
                                uidA = jointCompA.Relay.Value;
                            }

                            if (jointQuery.TryGetComponent(uidB, out var jointCompB) &&
                                jointCompB.Relay != null)
                            {
                                DebugTools.AssertNotEqual(uidA, jointCompB.Relay.Value);
                                uidB = jointCompB.Relay.Value;
                            }

                            var copy = joint.Clone(uidA, uidB);
                            islandJoints.Add((joint, copy));
                            joint.IslandFlag = true;
                        }
                    }
                }

                if (jointQuery.TryGetComponent(bodyUid, out var jointComponent) &&
                    jointComponent.Relay == null)
                {
                    foreach (var joint in jointComponent.Joints.Values)
                    {
                        if (joint.IslandFlag)
                            continue;

                        var uidA = joint.BodyAUid;
                        var uidB = joint.BodyBUid;

                        if (jointQuery.TryGetComponent(uidA, out var jointCompA) &&
                            jointCompA.Relay != null)
                        {
                            uidA = jointCompA.Relay.Value;
                        }

                        if (jointQuery.TryGetComponent(uidB, out var jointCompB) &&
                            jointCompB.Relay != null)
                        {
                            uidB = jointCompB.Relay.Value;
                        }

                        var copy = joint.Clone(uidA, uidB);
                        islandJoints.Add((joint, copy));
                        joint.IslandFlag = true;
                    }
                }

                foreach (var (original, joint) in islandJoints)
                {
                    var bodyA = bodyQuery.GetComponent(joint.BodyAUid);
                    var bodyB = bodyQuery.GetComponent(joint.BodyBUid);

                    if (!bodyA.CanCollide || !bodyB.CanCollide)
                        continue;

                    joints.Add((original, joint));

                    if (!bodyA.Island)
                    {
                        _bodyStack.Push(bodyA);
                        bodyA.Island = true;
                    }

                    if (!bodyB.Island)
                    {
                        _bodyStack.Push(bodyB);
                        bodyB.Island = true;
                    }
                }

                islandJoints.Clear();
            }

            int idx;

            // Bodies not touching anything, hence we can just add it to the lone island.
            if (contacts.Count == 0 && joints.Count == 0)
            {
                DebugTools.Assert(bodies.Count == 1 && bodies[0].BodyType != BodyType.Static);
                loneIsland.Bodies.Add(bodies[0]);
                idx = loneIsland.Index;
            }
            else
            {
                var data = new IslandData(islandIndex++, false, bodies, contacts, joints, new List<(Joint Joint, float Error)>());
                islands.Add(data);
                idx = data.Index;
            }

            // Allow static bodies to be re-used in other islands
            for (var i = 0; i < bodies.Count; i++)
            {
                var body = bodies[i];

                // Static bodies can participate in other islands
                if (body.BodyType == BodyType.Static)
                {
                    body.Island = false;
                }

                body.IslandIndex[idx] = i;
            }
        }

        // If we didn't use lone island just return it.
        if (loneIsland.Bodies.Count > 0)
        {
            islands.Add(loneIsland);
        }
        else
        {
            ReturnIsland(loneIsland);
        }

        SolveIslands(uid, component, islands, frameTime, dtRatio, invDt, prediction);

        foreach (var island in islands)
        {
            ReturnIsland(island);
        }

        Cleanup(component, frameTime);
    }"
Pa1VWf8k,Time and Weather Controller,Leander,Lua,Wednesday 26th of June 2024 07:20:17 AM CDT,"local basalt = require(""basalt"")

local day = false
local night = false
local rain = false
local clear = false

local controllerEnabled = false

local function main()
	local monitor = peripheral.find(""monitor"")
	if monitor == nil then
		print(""Failed to find monitor"")
		return -1
	elseif not monitor.isColor() then
		print(""Monitor not supported"")
		return -1
	end

	monitor.setTextScale(0.5)

	local monitorWidth, monitorHeight = monitor.getSize()
	print(""Monitor size: "" .. monitorWidth .. "" : "" .. monitorHeight)

	local main = basalt.addMonitor()
	main:setMonitor(monitor)

	local dayLabel = main
		:addLabel()
		:setPosition(1, 1)
		:setSize(monitorWidth / 2 - 1, 1)
		:setText(""Time:"")
		:setFontSize(0.5)

	TimeLabel = main
		:addLabel()
		:setPosition(1, 2)
		:setSize(monitorWidth / 2 - 1, 1)
		:setText(""00:00:00"")
		:setFontSize(0.5)

	DateLabel = main
		:addLabel()
		:setPosition(1, 3)
		:setSize(monitorWidth / 2 - 1, 1)
		:setText(""01/01/1970"")
		:setFontSize(0.5)

	DayButton = main
		:addButton()
		:setPosition(monitorWidth / 2 + 1, 1)
		:setSize(monitorWidth / 2, 3)
		:setText(""N/A"")
		:setForeground(colors.black)
		:setBackground(colors.gray)
		:onClick(
			function()
				if not controllerEnabled then
					if not (day or night) then
						DayButton:setText(""Day"")
						day = true
					elseif day then
						DayButton:setText(""Night"")
						day = false
						night = true
					elseif night then
						DayButton:setText(""N/A"")
						night = false
					end
				end
			end
		)

	local rainLabel = main
		:addLabel()
		:setPosition(1, 4)
		:setSize(monitorWidth / 2 - 1, 1)
		:setText(""Weather:"")
		:setFontSize(0.5)

	WeatherLabel = main
		:addLabel()
		:setPosition(1, 5)
		:setSize(monitorWidth / 2 - 1, 1)
		:setText(""N/A"")
		:setFontSize(0.5)

	RainButton = main
		:addButton()
		:setPosition(monitorWidth / 2 + 1, 4)
		:setSize(monitorWidth / 2, 3)
		:setText(""N/A"")
		:setForeground(colors.black)
		:setBackground(colors.gray)
		:onClick(
			function()
				if not controllerEnabled then
					if not (rain or clear) then
						RainButton:setText(""Clear"")
						clear = true
					elseif clear then
						RainButton:setText(""Rain"")
						clear = false
						rain = true
					elseif rain then
						RainButton:setText(""N/A"")
						rain = false
					end
				end
			end
		)

	local controlerLabel1 = main
		:addLabel()
		:setPosition(1, 8)
		:setSize(monitorWidth + 1, 1)
		:setText(""Toggle"")
		:setFontSize(0.5)
		:setZIndex(50)
		:setTextAlign(""center"")

	local controlerLabel2 = main
		:addLabel()
		:setPosition(1, 9)
		:setSize(monitorWidth + 1, 1)
		:setText(""Controller"")
		:setFontSize(0.5)
		:setZIndex(50)
		:setTextAlign(""center"")

	ControllerButton = main
		:addButton()
		:setPosition(1, 7)
		:setSize(monitorWidth, 4)
		:setText("""")
		:setForeground(colors.black)
		:setBackground(colors.red)
		:onClick(
			function()
				if not controllerEnabled then
					ControllerButton:setBackground(colors.green)
					controllerEnabled = true
				else
					ControllerButton:setBackground(colors.red)
					controllerEnabled = false
				end
			end
		)

	local detectionLoop = main:addThread()

	detectionLoop:start(detectionThread)

	basalt:autoUpdate()

	return 0
end

local function makeDawn()
	print(""Making Dawn"")
	DayButton:setBackground(colors.orange)
	rs.setBundledOutput(""right"", colors.yellow)
	os.sleep(0.5)
	rs.setBundledOutput(""right"", 0)
	while not rs.getInput(""left"") do
		os.sleep(0.5)
	end
	DayButton:setBackground(colors.lime)
end

local function makeDusk()
	print(""Making Dusk"")
	DayButton:setBackground(colors.orange)
	rs.setBundledOutput(""right"", colors.lightGray)
	os.sleep(0.5)
	rs.setBundledOutput(""right"", 0)
	while rs.getInput(""left"") do
		os.sleep(0.5)
	end
	DayButton:setBackground(colors.lime)
end

local function startRain()
	print(""Starting Rain"")
	RainButton:setBackground(colors.orange)
	rs.setBundledOutput(""right"", colors.blue)
	os.sleep(0.5)
	rs.setBundledOutput(""right"", 0)
	while not rs.getInput(""back"") do
		os.sleep(0.5)
	end
	RainButton:setBackground(colors.lime)
end

local function stopRain()
	print(""Stopping Rain"")
	RainButton:setBackground(colors.orange)
	rs.setBundledOutput(""right"", colors.lightBlue)
	os.sleep(0.5)
	rs.setBundledOutput(""right"", 0)
	while rs.getInput(""back"") do
		os.sleep(0.5)
	end
	RainButton:setBackground(colors.lime)
end

function detectionThread()
	while true do
		if day or night then
			DayButton:setBackground(colors.lime)
		else
			DayButton:setBackground(colors.gray)
		end

		if clear or rain then
			RainButton:setBackground(colors.lime)
		else
			RainButton:setBackground(colors.gray)
		end

		local isDay = rs.getInput(""left"")
		local isRaining = rs.getInput(""back"")
		if controllerEnabled then
			if isDay and night then
				TimeLabel:setForeground(colors.orange)
				TimeLabel:setText(""FF"")
				makeDusk()
				TimeLabel:setForeground(colors.black)
			elseif not isDay and day then
				TimeLabel:setForeground(colors.orange)
				TimeLabel:setText(""FF"")
				makeDawn()
				TimeLabel:setForeground(colors.black)
			end

			if isRaining and clear then
				WeatherLabel:setForeground(colors.orange)
				WeatherLabel:setText(""Switching"")
				stopRain()
				WeatherLabel:setForeground(colors.black)
			elseif not isRaining and rain then
				WeatherLabel:setForeground(colors.orange)
				WeatherLabel:setText(""Switching"")
				startRain()
				WeatherLabel:setForeground(colors.black)
			end
		end

		local time = os.epoch(""ingame"") / 1000
		local timeTable = os.date(""*t"", time)
		TimeLabel:setText(timeTable.hour .. "":"" .. timeTable.min .. "":"" .. timeTable.sec)
		DateLabel:setText(timeTable.day .. ""/"" .. timeTable.month .. ""/"" .. timeTable.year)

		if isRaining then
			WeatherLabel:setText(""Rain"")
		else
			WeatherLabel:setText(""Clear"")
		end

		os.sleep(1)
	end
end

local function runProgram()
	local returnCode = main()

	term.setBackgroundColor(colors.black)

	if returnCode >= 0 then
		term.setTextColor(colors.green)
	else
		term.setTextColor(colors.red)
	end

	print(""Program exited with code "" .. returnCode)
	term.setTextColor(colors.white)
end

runProgram()"
zth50E4J,AUDIOAPI,An_random_user,Lua,Wednesday 26th of June 2024 07:10:22 AM CDT,"local encoder = dfpwm.make_encoder()
local decoder = dfpwm.make_decoder()
local callback_onframe = callback_onframe or function()end
local out = fs.open(output, ""wb"")
for input in io.lines(input, 16 * 1024 * 2) do
  local decoded = decoder(input)
  local output = {}

  for i = 1, #decoded, 2 do
    local value_1, value_2 = decoded[i], decoded[i + 1]
    output[(i + 1) / 2] = (value_1 + value_2) / 2
  end

  out.write(encoder(output))
  callback_onframe()
  sleep(0)
end
out.close()"
u8r2jYxN,203167,kirber,JSON,Wednesday 26th of June 2024 06:58:04 AM CDT,"{
  ""Source"": ""crm"",
  ""Message"": """",
  ""Id"": ""463970be-a433-ef11-b82c-005056b83cbb"",
  ""Type"": ""create"",
  ""Time"": ""2024-06-26T13:13:38"",
  ""Attributes"": {
    ""createdon"": ""2024-06-26T13:13:34"",
    ""smt_addition_realization_termid"": null,
    ""smt_colorcode"": null,
    ""smt_constructor_groupcode"": 100000002,
    ""smt_default_optionbit"": true,
    ""smt_description"": null,
    ""smt_discount_amount"": null,
    ""smt_discount_percent"": 0.0000000000,
    ""smt_discount_typecode"": 100000002,
    ""smt_end_date"": ""2025-01-01T03:00:00"",
    ""smt_group_for_websitecode"": 100000002,
    ""smt_initial_fee"": 20.0000000000,
    ""smt_interest_rate"": 5.9000000000,
    ""smt_interest_rate_validity"": 24,
    ""smt_marketing_name"": ""–ò–ø–æ—Ç–µ–∫–∞ 5,9% –Ω–∞ 2 –≥–æ–¥–∞"",
    ""smt_max_quantity"": null,
    ""smt_mortgage_program_validity"": ""30"",
    ""smt_name"": ""–î–î–£_–ö–≤–∞—Ä—Ç–∏—Ä–∞_–°–∞–º–æ–ª–µ—Ç –ò–ø–æ—Ç–µ–∫–∞_–°—Ç–∞–≤–∫–∞ 5,9% –Ω–∞ 2 –≥–æ–¥–∞ –¥–∞–ª–µ–µ 18% (–ø–≤ –æ—Ç 20% —Å—Ä–æ–∫ –¥–æ 30 –ª–µ—Ç)"",
    ""smt_option_classcode"": null,
    ""smt_parent_realization_termid"": {
      ""Id"": ""7963c53b-c56d-ee11-b82a-005056b83cbb"",
      ""LogicalName"": ""smt_realization_term"",
      ""Name"": ""–°–∞–º–æ–ª–µ—Ç –ò–ø–æ—Ç–µ–∫–∞_–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ""
    },
    ""smt_payment_optioncode"": 100000002,
    ""smt_postsale"": null,
    ""smt_realization_term_classifier_smt_isfurnishing"": null,
    ""smt_realization_term_classifierid"": {
      ""Id"": ""ef20a54c-8200-ee11-9a2c-005056b84c7c"",
      ""LogicalName"": ""smt_realization_term_classifier"",
      ""Name"": ""–°–∞–π—Ç –ò–ø–æ—Ç–µ–∫–∞""
    },
    ""smt_realization_termid"": ""463970be-a433-ef11-b82c-005056b83cbb"",
    ""smt_realization_termParent_smt_default_optionbit"": false,
    ""smt_realization_termParent_smt_name"": ""–°–∞–º–æ–ª–µ—Ç –ò–ø–æ—Ç–µ–∫–∞_–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ"",
    ""smt_realization_termParent_smt_parent_realization_termid"": {
      ""Id"": ""6d63c53b-c56d-ee11-b82a-005056b83cbb"",
      ""LogicalName"": ""smt_realization_term"",
      ""Name"": ""–°–∞–º–æ–ª–µ—Ç –ò–ø–æ—Ç–µ–∫–∞""
    },
    ""smt_realization_termParent_smt_realization_termid"": ""7963c53b-c56d-ee11-b82a-005056b83cbb"",
    ""smt_realization_termParent_smt_rejecting_realization_termid"": null,
    ""smt_realization_termParent_smt_required_optionbit"": false,
    ""smt_required_optionbit"": false,
    ""smt_room_for_optioncode"": null,
    ""smt_roomcode"": null,
    ""smt_special_interest_rate"": 18.0000000000,
    ""smt_start_date"": ""2024-06-26T03:00:00"",
    ""smt_stylecode"": null,
    ""smt_summ_credit_max"": null,
    ""smt_technicsbit"": false,
    ""smt_term_typecode"": 100000003,
    ""smt_translate_to_dypricebit"": false,
    ""statecode"": 0,
    ""statuscode"": 1
  },
  ""LinkEntities"": {},
  ""ManyMany"": {}
}"
uAsDU3gV,Review CapitalBear,fxvnpro,PHP,Wednesday 26th of June 2024 06:55:52 AM CDT,"https://www.fxvnpro.com/review-capitalbear/
 "
ReGSqZyA,Review CapitalBear,reviewbrokers,PHP,Wednesday 26th of June 2024 06:55:33 AM CDT,"https://www.reviewbrokers.net/review-capitalbear/
 "
