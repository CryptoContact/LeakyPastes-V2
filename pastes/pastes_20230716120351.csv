id,title,username,language,date,content
CQqEAnGi,Untitled,HollowProphet,YAML,Sunday 16th of July 2023 06:51:57 AM CDT,"---
version: '3'
services:
  plex:
    image: plexinc/pms-docker:latest
    container_name: plex
    devices:
      - ""/dev/sda2:/dev/sda2""
    volumes:
      - /Documents/dockervolumes/plex/config
      - /Documents/dockervolumes/plex/transcode
      - /mnt/exdisk/TV
      - /mnt/exdisk/Movies
    environment:
      - TZ=""America/New_York""
      - PLEX_CLAIM=""
      - PLEX_UID=1000
      - PLEX_GID=1000
    restart: unless-stopped
    network_mode: ""host""
	"
cj6c6dqe,data635,TestGuy1,JSON,Sunday 16th of July 2023 06:00:11 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'd135b001238e7d4402ef23cfc6f4a4ad0b027f09220a3a9e8b751a48500d2102ba4bf1c0e1a49ba7e2907712a31632dc800b3ff34d8fa2030779a0290129c76e92238b010e4d6ae163ec6edda5924e5f499646d2c01cc4d4ef87dd39f34dbed08a785b197dfa9f570ce2769d1797bbf18311c39ebd91b47fa2906ffa87469054',
  otherdata: [
    'e6bd8af8e88bee6e272e9b6801b509d1',
    '13fc36137384e7ddf7afdce44b199253',
    '63f9881364a708542d1b1b47903257d6',
    'fc03dd808f978387cc20e1dce44bd0a0',
    '5c28bab94afbd227d2edc9e6f3470e26',
    '326a79c983702b5818ec41bbd61433a5',
    'ac097ee8913ec6fbd07c029d0fd497bf',
    '91492e3466fd215b90f8905f430e3429'
  ]
}"
bh1sH36m,OnTimeForTheExam,MladenKarachanov,Java,Sunday 16th of July 2023 05:28:08 AM CDT,"package ProgrammingBasics2;

import java.util.Scanner;

public class OnTimefortheExam {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int hoursExam = Integer.parseInt(scanner.nextLine());
        int minutesExam = Integer.parseInt(scanner.nextLine());
        int hourOfArrival = Integer.parseInt(scanner.nextLine());
        int minuteOfArrival = Integer.parseInt(scanner.nextLine());
        int examTotalMinutes = hoursExam * 60 + minutesExam;
        int arrivalTotalMinutes = hourOfArrival * 60 + minuteOfArrival;

        int diff = Math.abs(examTotalMinutes - arrivalTotalMinutes);
        if (arrivalTotalMinutes > examTotalMinutes) {
            System.out.println(""Late"");
            if (diff < 60) {
                System.out.printf(""%d minutes after the start"", diff);
            } else {
                int hours = diff / 60;
                int minutes = diff % 60;
                System.out.printf(""%d:%02d hours after the start"", hours, minutes);
            }
        }else if (diff <=30) {
            System.out.println(""On time"");
            if (examTotalMinutes != arrivalTotalMinutes) {
                System.out.printf(""%d minutes before the start"", diff);
            }
        }else{
            System.out.println(""Early"");
            if (diff < 60) {
                System.out.printf(""%d minutes before the start"", diff);
            }else{
                int hours =diff / 60;
                int minutes = diff %60;
                System.out.printf(""%d: %02d hours before the start"",hours,minutes);




                    }
                }
            }

        }"
maS6jUkZ,Untitled,phpface,CSS,Sunday 16th of July 2023 05:11:12 AM CDT,".post-thumbnail:hover img{
    transform: none;
}

.post-thumbnail .video-hover {
    display: none;
}
"
dUmqy3jM,07. Hotel Room,veronikaaa86,Python,Sunday 16th of July 2023 05:05:42 AM CDT,"month = input()
count_nights = int(input())

apartment_price = 0
studio_price = 0
if month == ""May"" or month == ""October"":
    apartment_price = 65 * count_nights
    studio_price = 50 * count_nights

elif month == ""June"" or month == ""September"":
    apartment_price = 68.7 * count_nights
    studio_price = 75.2 * count_nights

elif month == ""July"" or month == ""August"":
    apartment_price = 77 * count_nights
    studio_price = 76 * count_nights

if count_nights > 14 and (month == ""May"" or month == ""October""):
    studio_price = studio_price * 0.70
elif count_nights > 7 and (month == ""May"" or month == ""October""):
    studio_price = studio_price * 0.95
elif count_nights > 14 and (month == ""June"" or month == ""September""):
    studio_price = studio_price * 0.8

if count_nights > 14:
    apartment_price = apartment_price * 0.9

print(f""Apartment: {apartment_price:.2f} lv."")
print(f""Studio: {studio_price:.2f} lv."")
"
VdSBu1zw,Untitled,Overwtime,Java,Sunday 16th of July 2023 05:01:42 AM CDT,"package ru.overwrite.ublocker.utils;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.Map;
import java.util.HashSet;
import java.util.HashMap;
import java.util.regex.Pattern;

import org.bukkit.Sound;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;

import ru.overwrite.ublocker.Main;
import ru.overwrite.ublocker.listeners.chat.*;

public class Config {
	
	private final Main plugin;
	
	public Config(Main plugin) {
        this.plugin = plugin;
    }
	
	public FileConfiguration chat, symbols, commands, blocksyntax;
	
	public Set<String> ban_words_string;
	public Set<Pattern> ban_words_pattern;
	
	public Set<String> commandBlock_string;
	
	public Set<String> symbolBlock_string;
	public Map<String,  ArrayList<String>> symbolBlock_string_excluded_commands;
	public Map<Pattern, ArrayList<String>> symbolBlock_pattern_excluded_commands;
	
	public Map<String, ArrayList<String>> commandBlock_string_actions;
	public Map<Pattern, ArrayList<String>> commandBlock_pattern_actions;
	
	public Map<String, ArrayList<String>> symbolBlock_string_actions;
	public Map<Pattern, ArrayList<String>> symbolBlock_pattern_actions;
	
	public String
	allowed_chat_chars_mode,
	allowed_chat_chars_message,
	allowed_chat_chars_notify_message,
	allowed_chat_chars_string,
	allowed_book_chars_mode,
	allowed_book_chars_message,
	allowed_book_chars_notify_message,
	allowed_book_chars_string,
	numbers_check_message,
	numbers_check_notify_message,
	banwordmode,
	ban_words_message,
	ban_words_notify_message;
	
	public Pattern
	allowed_chat_chars_pattern,
	allowed_book_chars_pattern;
	
	public boolean 
	allowed_chat_chars_notify,
	allowed_book_chars_notify,
	strict_numbers_check,
	numbers_check_notify,
	ban_words_notify;
	
	public Set<String> excludedplayers;
	
	public Sound
	sounds_admin_notify_sound,
	sounds_blocked_command_sound;
	
	public float
	sounds_admin_notify_volume,
	sounds_admin_notify_pitch,
	sounds_blocked_command_volume,
	sounds_blocked_command_pitch;
	
	public int maxmsgnumbers;
	
	public void setupChat() {
		chat = getFile(""chat.yml"");
		ConfigurationSection settings = chat.getConfigurationSection(""chat_settings"");
		ConfigurationSection allowedChars = settings.getConfigurationSection(""allowed_chat_chars"");
		setupChatChars(allowedChars);
		ConfigurationSection allowedBookChars = settings.getConfigurationSection(""allowed_book_chars"");
		setupBookChars(allowedBookChars);
		ConfigurationSection numbersCheck = settings.getConfigurationSection(""numbers_check"");
		setupNumberCheck(numbersCheck);
		ConfigurationSection banWords = settings.getConfigurationSection(""ban_words_chat"");
		setupBanWords(banWords);
	}
	
	private void setupChatChars(ConfigurationSection allowedChars) {
		if (allowedChars.getBoolean(""enable"")) {
			ChatFilter.enabled = true;
			allowed_chat_chars_message = allowedChars.getString(""message"");
			allowed_chat_chars_notify = allowedChars.getBoolean(""notify"");
			allowed_chat_chars_notify_message = allowedChars.getString(""notify_message"");
			switch (allowedChars.getString(""mode"")) {
				case ""STRING"": {
					allowed_chat_chars_mode = ""STRING"";
					allowed_chat_chars_string = allowedChars.getString(""pattern"");
					break;
				}
				case ""PATTERN"": {
					allowed_chat_chars_mode = ""PATTERN"";
					allowed_chat_chars_pattern = Pattern.compile(allowedChars.getString(""pattern""));
					break;
				}
			}
		}
	}
	
	private void setupBookChars(ConfigurationSection allowedBookChars) {
		if (allowedBookChars.getBoolean(""enable"")) {
			BookChecker.enabled = true;
			allowed_book_chars_message = allowedBookChars.getString(""message"");
			allowed_book_chars_notify = allowedBookChars.getBoolean(""notify"");
			allowed_book_chars_notify_message = allowedBookChars.getString(""notify_message"");
			switch (allowedBookChars.getString(""mode"")) {
				case ""STRING"": {
					allowed_book_chars_mode = ""STRING"";
					allowed_book_chars_string = allowedBookChars.getString(""pattern"");
					break;
				}
				case ""PATTERN"": {
					allowed_book_chars_mode = ""PATTERN"";
					allowed_book_chars_pattern = Pattern.compile(allowedBookChars.getString(""pattern""));
					break;
				}
			}
		}
	}
	
	private void setupNumberCheck(ConfigurationSection numbersCheck) {
		if (numbersCheck.getBoolean(""enable"")) {
			NumbersCheck.enabled = true;
			maxmsgnumbers = numbersCheck.getInt(""maxmsgnumbers"");
			strict_numbers_check = numbersCheck.getBoolean(""strict_numbers_check"");
			numbers_check_message = numbersCheck.getString(""message"");
			numbers_check_notify = numbersCheck.getBoolean(""notify"");
			numbers_check_notify_message = numbersCheck.getString(""notify_message"");
		}
	}
	
	private void setupBanWords(ConfigurationSection banWords) {
		if (banWords.getBoolean(""enable"")) {
			BanWords.enabled = true;
			switch (banWords.getString(""mode"").toUpperCase()) {
				case ""STRING"": {
					banwordmode = ""STRING"";
					ban_words_string = new HashSet<>(banWords.getStringList(""words""));
					break;
				}
				case ""PATTERN"": {
					banwordmode = ""PATTERN"";
					ban_words_pattern = new HashSet<>();
					List<Pattern> bannedWords = new ArrayList<>();
					for (String patternString : banWords.getStringList(""words"")) {
						Pattern pattern = Pattern.compile(patternString);
						bannedWords.add(pattern);
						ban_words_pattern.add(pattern);
					}
				}
			}
			ban_words_message = Utils.colorize(banWords.getString(""message""));
			ban_words_notify = banWords.getBoolean(""notify"");
			ban_words_notify_message = Utils.colorize(banWords.getString(""notify_message""));
		}
	}
	
	public void setupCommands() {
		commands = getFile(""commands.yml"");
		commandBlock_string_actions = new HashMap<>();
		commandBlock_pattern_actions = new HashMap<>();
		for (String cmds : commands.getConfigurationSection(""commands"").getKeys(false)) {
			ConfigurationSection selection = commands.getConfigurationSection(""commands."" + cmds);
			switch (selection.getString(""mode"")) {
				case ""STRING"": {
					commandBlock_string = new HashSet<>(selection.getStringList(""commands""));
					for (String command : selection.getStringList(""commands"")) {
						ArrayList<String> actionList = new ArrayList<>(selection.getStringList(""actions""));
						commandBlock_string_actions.put(command, actionList);
					}
					break;
				}
				case ""PATTERN"": {
					List<Pattern> commandList = new ArrayList<>();
					for (String patternString : selection.getStringList(""commands"")) {
			            Pattern pattern = Pattern.compile(patternString);
			            commandList.add(pattern);
			        }
					for (Pattern command : commandList) {
						ArrayList<String> actionList = new ArrayList<>(selection.getStringList(""actions""));
						commandBlock_pattern_actions.put(command, actionList);
					}
					break;
				}
			}
		}
	}
	
	public void setupSymbols() {
		symbols = getFile(""symbols.yml"");
		symbolBlock_string_actions = new HashMap<>();
		symbolBlock_pattern_actions = new HashMap<>();
		symbolBlock_string_excluded_commands = new HashMap<>();
		symbolBlock_pattern_excluded_commands = new HashMap<>();
		for (String smbls : symbols.getConfigurationSection(""symbols"").getKeys(false)) {
			ConfigurationSection selection = symbols.getConfigurationSection(""symbols."" + smbls);
			switch (selection.getString(""mode"")) {
				case ""STRING"": {
					symbolBlock_string = new HashSet<>(selection.getStringList(""symbols""));
					for (String symbol : selection.getStringList(""symbols"")) {
						ArrayList<String> actionList = new ArrayList<>(selection.getStringList(""actions""));
						symbolBlock_string_actions.put(symbol, actionList);
						ArrayList<String> excludedList = new ArrayList<>(selection.getStringList(""excluded_commands""));
						symbolBlock_string_excluded_commands.put(symbol, excludedList);
					}
					break;
				}
				case ""PATTERN"": {
					List<Pattern> symbolList = new ArrayList<>();
					for (String patternString : selection.getStringList(""symbols"")) {
			            Pattern pattern = Pattern.compile(patternString);
			            symbolList.add(pattern);
			        }
					for (Pattern symbol : symbolList) {
						ArrayList<String> actionList = new ArrayList<>(selection.getStringList(""actions""));
						symbolBlock_pattern_actions.put(symbol, actionList);
						ArrayList<String> excludedList = new ArrayList<>(selection.getStringList(""excluded_commands""));
						symbolBlock_pattern_excluded_commands.put(symbol, excludedList);
					}
					break;
				}
			}
		}
	}
    
    public void setupExcluded(FileConfiguration config) {
        excludedplayers = new HashSet<>(config.getStringList(""excluded-players""));
        if (plugin.debug) {
            plugin.logger.info(""§e> Невосприимчивые игроки загружены"");
        }
    }
    
    public FileConfiguration getFile(String fileName) {
	    File file = new File(plugin.getDataFolder(), fileName);
	    if (!file.exists()) {
	    	plugin.saveResource(fileName, false);
	    }
	    if (plugin.debug) {
        	plugin.logger.info(""§a> + "" + fileName + ""+ получен"");
        }
	    return YamlConfiguration.loadConfiguration(file);
	}

    public FileConfiguration save(FileConfiguration config, String fileName) {
        try {
            config.save(new File(plugin.getDataFolder(), fileName));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return config;
    }
}
"
vnZCiJNj,Untitled,Overwtime,Java,Sunday 16th of July 2023 05:01:13 AM CDT,"package ru.overwrite.ublocker;

import java.util.logging.Logger;
import org.bukkit.Server;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.java.JavaPlugin;

import ru.overwrite.ublocker.listeners.chat.*;
import ru.overwrite.ublocker.listeners.commands.*;
import ru.overwrite.ublocker.listeners.symbols.*;
import ru.overwrite.ublocker.utils.*;

public class Main extends JavaPlugin {
	
	public static String serialiser;
	
	private final Config pluginConfig = new Config(this);
  
	public boolean debug;
  
	public final Logger logger = getLogger();
	
	public final Server server = getServer();
  
	public void onEnable() {
		long startTime = System.currentTimeMillis();
		checkPaper();
		saveDefaultConfig();
		FileConfiguration config = getConfig();
		ConfigurationSection settings = config.getConfigurationSection(""settings"");
		serialiser = settings.getString(""serialiser"");
		debug = settings.getBoolean(""debug"");
		pluginConfig.setupExcluded(config);
		PluginManager pluginManager = server.getPluginManager();
		if (settings.getBoolean(""enable_chat_module"")) {
			pluginConfig.setupChat();
			pluginManager.registerEvents(new BanWords(this), this);
			pluginManager.registerEvents(new BookChecker(this), this);
			pluginManager.registerEvents(new ChatFilter(this), this);
			pluginManager.registerEvents(new NumbersCheck(this), this);
		}
		if (settings.getBoolean(""enable_symbol_module"")) {
			pluginConfig.setupSymbols();
			pluginManager.registerEvents(new SyntaxBlocker(this), this);
			pluginManager.registerEvents(new SignBlocker(this), this);
		}
		if (settings.getBoolean(""enable_command_module"")) {
			pluginConfig.setupCommands();
			pluginManager.registerEvents(new CommandBlocker(this), this);
			pluginManager.registerEvents(new CommandHider(this), this);
			pluginManager.registerEvents(new TabComplete(this), this);
		}
		if (settings.getBoolean(""enable-metrics"")) {
			new Metrics(this, 15379);
		}
		if (settings.getBoolean(""update-checker"")) {
			Utils.checkUpdates(this, version -> {
				logger.info(""§6========================================"");
				if (getDescription().getVersion().equals(version)) {
					logger.info(""§aВы используете последнюю версию плагина!"");
				} else {
					logger.info(""§aВы используете устаревшую или некорректную версию плагина!"");
					logger.info(""§aВы можете загрузить последнюю версию плагина здесь:"");
					logger.info(""§bhttps://github.com/Overwrite987/UniversalBlocker/releases/"");
				}
				logger.info(""§6========================================"");
			});
		}
		getCommand(""universalblocker"").setExecutor(new CommandClass(this));
		long endTime = System.currentTimeMillis();
		logger.info(""Plugin started in "" + (endTime - startTime) + "" ms"");
	}
  
	private void checkPaper() {
		if (server.getName().equals(""Craftserver"")) {
			logger.info(""§6============= §6! WARNING ! §c============="");
			logger.info(""§eЭтот плагин работает только на Paper и его форках!"");
			logger.info(""§eАвтор плагина §cкатегорически §eвыступает за отказ от использования устаревшего и уязвимого софта!"");
			logger.info(""§eСкачать Paper: §ahttps://papermc.io/downloads/all"");
			logger.info(""§6============= §6! WARNING ! §c============="");
			setEnabled(false);
		}
	}
  
	public Config getPluginConfig() {
		return pluginConfig;
	}
  
	public void sendTitleMessage(String[] titleMessages, Player p) {
			String title = Utils.colorize(titleMessages[0]);
			String subtitle = Utils.colorize(titleMessages[1]);
			int fadeIn = Integer.parseInt(titleMessages[2]);
			int stay = Integer.parseInt(titleMessages[3]);
			int fadeOut = Integer.parseInt(titleMessages[4]);
			p.sendTitle(title, subtitle, fadeIn, stay, fadeOut);
	}
	
	public String getActionType(String str) {
        return str.split(""] "")[0];
    }
	
	public String getAction(String str) {
		return str.split(""] "")[1];
    }
	
	public Boolean isHovertexted(String str) {
		return str.contains(""ht="");
	}
	
	public String getHoverTextedMessage(String str) {
		return isHovertexted(str) ? str.split(""ht="")[0] : str;
	}
	
	public String getHoverText(String str) {
		return isHovertexted(str) ? str.split(""ht="")[1] : """";
	}
	
	public void onDisable() {
		if (getConfig().getBoolean(""shutdown-on-disable"")) {
			server.shutdown();
		}
	}
}
"
FGA3VDpV,Untitled,Overwtime,Java,Sunday 16th of July 2023 04:59:05 AM CDT,"package ru.overwrite.ublocker.listeners.commands;

import java.util.ArrayList;
import java.util.Map;
import java.util.regex.Pattern;

import org.bukkit.Bukkit;
import org.bukkit.Sound;
import org.bukkit.entity.Player;
import org.bukkit.event.Cancellable;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;

import net.md_5.bungee.api.chat.BaseComponent;
import net.md_5.bungee.api.chat.ComponentBuilder;
import net.md_5.bungee.api.chat.HoverEvent;
import net.md_5.bungee.api.chat.HoverEvent.Action;
import net.md_5.bungee.api.chat.hover.content.Text;

import ru.overwrite.ublocker.Main;
import ru.overwrite.ublocker.utils.Config;
import ru.overwrite.ublocker.utils.Utils;

public class CommandBlocker implements Listener {
	
	final Main plugin;
	private final Config pluginConfig;
	
	public CommandBlocker(Main plugin) {
        this.plugin = plugin;
        pluginConfig = plugin.getPluginConfig();
	}
	
	@EventHandler(priority = EventPriority.HIGHEST)
	public void onCommand(PlayerCommandPreprocessEvent e) {
	 	Player p = e.getPlayer();
	 	String command = e.getMessage().toLowerCase();
	 	if (pluginConfig.commandBlock_string.contains(command)) {
	 		ArrayList<String> actions = pluginConfig.commandBlock_string_actions.get(command);
	 		if (actions == null) return;
	 		executeActions(e, p, command, actions);
	 		return;
	 	}
	 	for (Map.Entry<Pattern, ArrayList<String>> entry : pluginConfig.commandBlock_pattern_actions.entrySet()) {
	        Pattern pattern = entry.getKey();
	        ArrayList<String> actions = entry.getValue();
	        plugin.logger.info(""1"");
	        if (actions == null) continue; 
	        plugin.logger.info(""2"");
	        if (pattern.matcher(command).matches()) {
	        	plugin.logger.info(""3"");
	 			executeActions(e, p, command, actions);
	 			plugin.logger.info(""4"");
	 			break;
	 		}
	 	}
	}
	
	private void executeActions(Cancellable e, Player p, String command, ArrayList<String> actions) {
		for (String action : actions) {
 			switch (plugin.getActionType(action)) {
 				case ""[BLOCK"": {
 					e.setCancelled(true);
 					break;
 				}
 				case ""[LITE_BLOCK"": {
 					if (!p.hasPermission(plugin.getAction(action))) {
 						e.setCancelled(true);
 					}
 					break;
 				}
 				case ""[MESSAGE"": {
 					if (!e.isCancelled()) return;
 					String message = plugin.getHoverTextedMessage(plugin.getAction(action));
 					String hovertext = plugin.getHoverText(plugin.getAction(action));
 					HoverEvent hover = new HoverEvent(Action.SHOW_TEXT, new Text(Utils.colorize(hovertext
 							.replace(""%cmd%"", command))));
 					BaseComponent[] comp = new ComponentBuilder(Utils.colorize(message
 							.replace(""%cmd%"", command)
 							.replace(hovertext, """")))
 							.event(hover).create();
 					p.spigot().sendMessage(comp);
 					break;
 				}
 				case ""[TITLE"": {
 					if (!e.isCancelled()) return;
 					String[] titleMessages = plugin.getAction(action).replace(""%cmd%"", command).split("":"");
 					plugin.sendTitleMessage(titleMessages, p);
 					break;
 				}
 				case ""[SOUND"": {
 					if (!e.isCancelled()) return;
 					p.playSound(p.getLocation(), 
 							Sound.valueOf(plugin.getAction(action).split("":"")[0]), 
 							Float.valueOf(plugin.getAction(action).split("":"")[1]), 
 							Float.valueOf(plugin.getAction(action).split("":"")[2]));
 					break;
 				}
 				case ""[NOTIFY"": {
 					if (!e.isCancelled()) return;
 					String message = plugin.getHoverTextedMessage(plugin.getAction(action).split(""perm="")[0]);
 					String hovertext = plugin.getHoverText(plugin.getAction(action).split(""perm="")[0]);
 					HoverEvent hover = new HoverEvent(Action.SHOW_TEXT, new Text(Utils.colorize(hovertext 
 							.replace(""%player%"", p.getName())
 							.replace(""%cmd%"", command))));
 					BaseComponent[] comp = new ComponentBuilder(Utils.colorize(message
 							.replace(""%player%"", p.getName())
 							.replace(""%cmd%"", command)
 							.replace(hovertext, """")))
 							.event(hover).create();
 					for (Player ps : Bukkit.getOnlinePlayers()) {
 						if (ps.hasPermission(plugin.getAction(action).split(""perm="")[1])) {
 							ps.spigot().sendMessage(comp);
 						}
 					}
 					break;
 				}
 				case ""[NOTIFY_SOUND"": {
 					if (!e.isCancelled()) return;
 					for (Player ps : Bukkit.getOnlinePlayers()) {
 						if (ps.hasPermission(plugin.getAction(action).split(""perm="")[1])) {
 							String sound = plugin.getAction(action).split(""perm="")[0];
 							ps.playSound(ps.getLocation(), 
 									Sound.valueOf(sound.split("":"")[0]), 
 									Float.valueOf(sound.split("":"")[1]), 
 									Float.valueOf(sound.split("":"")[2]));
 						}
 					}
 					break;
 				}
 			}
 		}
	}
}"
3PtFCUQg,08. On Time for the Exam,veronikaaa86,Python,Sunday 16th of July 2023 04:48:15 AM CDT,"exam_hour = int(input())
exam_min = int(input())
arrival_hour = int(input())
arrival_min = int(input())

exam_all_min = (exam_hour * 60) + exam_min
arrival_all_min = (arrival_hour * 60) + arrival_min
diff_min = abs(arrival_all_min - exam_all_min)

if arrival_all_min > exam_all_min:
    print(""Late"")
    if diff_min >= 60:
        hour = diff_min // 60
        minutes = diff_min % 60
        print(f""{hour}:{minutes:02d} hours after the start"")
    else:
        print(f""{diff_min} minutes after the start"")
elif arrival_all_min == exam_all_min or diff_min <= 30:
    print(""On time"")
    if diff_min > 0:
        print(f""{diff_min} minutes before the start"")
else:
    print(""Early"")
    if diff_min >= 60:
        hour = diff_min // 60
        minutes = diff_min % 60
        print(f""{hour}:{minutes:02d} hours before the start"")
    else:
        print(f""{diff_min} minutes before the start"")"
x4ixitkX,Triiget navLink,JeCodeLeSoir,C#,Sunday 16th of July 2023 04:28:40 AM CDT,"using Unity.AI.Navigation;
using UnityEngine;
using UnityEngine.AI;

public class AntTriggerLink : MonoBehaviour
{
    [SerializeField] private NavMeshAgent meshAgent;
    [SerializeField] private BehaviorAnt behaviorAnt;

    private void Reset()
    {
        meshAgent = GetComponent<NavMeshAgent>();
        behaviorAnt = GetComponent<BehaviorAnt>();
    }

    bool Trigg;

    int area = -1;
    AnteaterManager anteaterManager = null;
    
    private void LateUpdate()
    {
        if (meshAgent.isOnOffMeshLink)
        {
            var offMeshLinkData = meshAgent.currentOffMeshLinkData;
 
            if (offMeshLinkData.offMeshLink is not null)
            {
                var offMeshLink = offMeshLinkData.offMeshLink;
                anteaterManager = offMeshLink.GetComponent<AnteaterManager>();
                area = offMeshLink.area;
            }
            else
            {
                var MeshLink = meshAgent.navMeshOwner as NavMeshLink;
                if (MeshLink is not null)
                {
                    anteaterManager = MeshLink.GetComponent<AnteaterManager>();
                    area = MeshLink.area;
                }
            }
        }

        if (Trigg != meshAgent.isOnOffMeshLink)
        {
            if (!meshAgent.isOnOffMeshLink)
            {
                if (area > -1 && anteaterManager is not null)
                {
                    if (area
                        == NavMesh.GetAreaFromName(""Enter""))
                    {
                        anteaterManager.Register(behaviorAnt);
                        Debug.Log(""Enter"");
                    }

                    if (area
                       == NavMesh.GetAreaFromName(""Exit""))
                    {
                        anteaterManager.UnRegister(behaviorAnt);
                        Debug.Log(""Exit"");
                    }

                    area = -1;
                    anteaterManager = null;
                }
            }
            Trigg = meshAgent.isOnOffMeshLink;
        }
    }
}"
rkRqGdqa,06. Operations Between Numbers,veronikaaa86,Python,Sunday 16th of July 2023 04:11:13 AM CDT,"first_num = int(input())
second_num = int(input())
operator = input()

result = 0
zero_flag = False
if operator == ""+"":
    result = first_num + second_num
elif operator == ""-"":
    result = first_num - second_num
elif operator == ""*"":
    result = first_num * second_num
elif operator == ""/"":
    if second_num == 0:
        zero_flag = True
    else:
        result = first_num / second_num
elif operator == ""%"":
    if second_num == 0:
        zero_flag = True
    else:
        result = first_num % second_num

if operator == ""+"" or operator == ""-"" or operator == ""*"":
    if result % 2 == 0:
        print(f""{first_num} {operator} {second_num} = {result} - even"")
    else:
        print(f""{first_num} {operator} {second_num} = {result} - odd"")
elif operator == ""/"":
    if zero_flag:
        print(f""Cannot divide {first_num} by zero"")
    else:
        print(f""{first_num} / {second_num} = {result:.2f}"")
elif operator == ""%"":
    if zero_flag:
        print(f""Cannot divide {first_num} by zero"")
    else:
        print(f""{first_num} {operator} {second_num} = {result}"")"
Gm8BNfFw,Slide Down A Hill,LuaXe,Lua,Sunday 16th of July 2023 04:09:55 AM CDT,"if game.Players.LocalPlayer.PlayerGui.HUD:FindFirstChild(""Right"") then game.Players.LocalPlayer.PlayerGui.HUD.Right:Destroy() end

function W() spawn(function () while getgenv().W do
if game.workspace.Slide.End:FindFirstChild(""Part"") then
    TPCFrame(game.workspace.Slide.End.Part.CFrame) wait(0.2) PHP(0)
end wait(7)
        end
    end)
end

local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wall%20v3')))()

local w = library:CreateWindow(""Slide Down A Hill"")

local b = w:CreateFolder(""Main"")

b:Toggle(""Inf. Wins/Inf. Money"",function(val) getgenv().W = val W() end)

b:Label(""Made by X_LuaF#0705"",{TextSize = 21; TextColor = Color3.fromRGB(255,255,255); BgColor = Color3.fromRGB(38, 38, 38);})

local w = library:CreateWindow(""LocalPlayer"")

local b = w:CreateFolder(""LP"")

b:DestroyGui()

b:Button(""Discord"",function() setclipboard(""workink.co/2GQ/LTD"") end)
b:Button(""Full Version"",function() loadstring(game:HttpGet(""https://pastebin.com/raw/GphZf9Xe"", true))() end)
b:Button(""Rejoin"",function() loadstring(game:HttpGet(""https://pastebin.com/raw/mM7JBG5h"", true))() end)
b:Button(""Reset"",function() loadstring(game:HttpGet(""https://pastebin.com/raw/EEY6SATj"", true))() end)

b:Slider(""WalkSpeed"",{min = 0; max = 100000; precise = false;},function(val) game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = val end)
b:Slider(""JumpPower"",{min = 0; max = 100000; precise = false;},function(val) game.Players.LocalPlayer.Character.Humanoid.JumpPower = val end)
b:Slider(""HipHeight"",{min = 0; max = 100000; precise = false;},function(val) game.Players.LocalPlayer.Character.Humanoid.HipHeight = val end)
b:Slider(""Gravity"",{min = 0; max = 360; precise = false;},function(val) game.workspace.Gravity = val end)
b:Slider(""FOV"",{min = 0;max = 120;precise = false;},function(val) game.workspace.CurrentCamera.FieldOfView = val end)

function TPCFrame(Player_CFrame) if game.Players.LocalPlayer.Character:FindFirstChild(""HumanoidRootPart"") then game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Player_CFrame end end
function RTPCFrame(M_CF) if game.Players.LocalPlayer.Character:FindFirstChild(""HumanoidRootPart"") then M_CF.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame end end
function PHP(Player_HP) if game.Players.LocalPlayer.Character:FindFirstChild(""Humanoid"") then game.Players.LocalPlayer.Character.Humanoid.Health = Player_HP end end"
vC2Mt0Z1,Python permutations,alaex777,Python,Sunday 16th of July 2023 03:56:07 AM CDT,"# 16.07.23

from itertools import permutations

perm = permutations([1, 2, 3])

print(list(perm))
# [
#   (1, 2, 3), (1, 3, 2),
#   (2, 1, 3), (2, 3, 1),
#   (3, 1, 2), (3, 2, 1)
# ]
"
4EMjU9wm,OptimizedMiningTurtleV4,Arciesis,Lua,Sunday 16th of July 2023 03:54:23 AM CDT,"-- My own vector implementation
local Vec = {}

--- Create a new instance of Vec
---@field x number the X axis
---@field y number the y axis
---@field z number the z axis
function Vec.new(x, y, z)
    local self = {}
    self.x = x
    self.y = y
    self.z = z

    function self.toCCVec()
        return vector.new(x, y, z)
    end

    function self.getX()
        return x
    end

    function self.getY()
        return y
    end

    function self.getZ()
        return z
    end

    function self.addX()
        x = x + 1
    end

    function self.subX()
        x = x - 1
    end

    ---@public
    function self.addY()
        y = y + 1
    end

    ---@public
    function self.subY()
        y = y - 1
    end

    function self.addZ()
        z = z + 1
    end

    function self.subZ()
        z = z - 1
    end

    return self
end

-- Movement management related

local SMovementManagement = {}

--local SPos_mt = { __index = SMovementManagement }

local instance

--- Singleton Pos management
---@param ori_pos Vec the original pos of the turtle
---@param heading_dir number the dir of the length
---@param mining_dir number the dir of the width
---@param length_limit number the dist which the turtle has to mine the main way
---@param width_limit number the dist the turtle has to mine the mining way
---@public
SMovementManagement.new = function(ori_pos, heading_dir, mining_dir, length_limit, width_limit)
    if instance then
        return instance
    end

    local self = {}
    self.ORIGINAL_POS = ori_pos
    self.HEADING_DIR = heading_dir
    self.MINING_DIR = mining_dir
    self.LENGTH_LIMIT = length_limit
    self.WIDTH_LIMIT = width_limit
    self.dist_from_ori_pos = Vec.new(0, 0, 0)
    self.actual_heading = heading_dir
    self.level = 0
    local is_mining = true

    ---@param move string the direction of the movement
    ---@private
    function self.updateDist(move)
        if self.actual_heading == 0 then
            if move == ""forth"" then
                self.dist_from_ori_pos.subZ()
            elseif move == ""back"" then
                self.dist_from_ori_pos.addZ()
            else
                error(""updateDist"")
            end
        elseif self.actual_heading == 1 then
            if move == ""forth"" then
                self.dist_from_ori_pos.subX()
            elseif move == ""back"" then
                self.dist_from_ori_pos.addX()
            else
                error(""updateDist"")
            end
        elseif self.actual_heading == 2 then
            if move == ""forth"" then
                self.dist_from_ori_pos.addZ()
            elseif move == ""back"" then
                self.dist_from_ori_pos.subZ()
            else
                error(""updateDist"")
            end
        elseif self.actual_heading == 3 then
            if move == ""forth"" then
                self.dist_from_ori_pos.addX()
            elseif move == ""back"" then
                self.dist_from_ori_pos.subX()
            else
                error(""updateDist"")
            end
        else
            error(""updateDist"")
        end
    end

    function self.left()
        turtle.turnLeft()
        self.actual_heading = ((self.actual_heading + 1) % 4)
    end

    function self.right()
        turtle.turnRight()
        self.actual_heading = ((self.actual_heading - 1) % 4)
    end

    ---move the turtle forward, gravel insensitive
    ---@public
    function self.moveForward()
        local moved
        repeat
            moved = turtle.forward()
            if not moved then
                turtle.dig()
            end
        until moved
        self.updateDist(""forth"")
    end

    ---move the turtle back, gravel insensitive
    ---@public
    function self.moveBackward()
        local moved
        repeat
            moved = turtle.back()
            if not moved then
                self.right()
                self.right()
                turtle.dig()
                self.right()
                self.right()
            end
        until moved
        --self.dist_from_ori_pos.
        self.updateDist(""back"")
    end

    ---move the turtle up, gravel insensitive
    ---@public
    function self.moveUp()
        local moved
        repeat
            moved = turtle.up()
            if not moved then
                turtle.digUp()
            end
        until moved
        self.dist_from_ori_pos.addY()
    end

    ---move the turtle down, gravel insensitive
    ---@public
    function self.moveDown()
        local moved
        repeat
            moved = turtle.down()
            if not moved then
                turtle.digDown()
            end
        until moved
        self.dist_from_ori_pos.subY()
    end

    local function returnXHome()
        -- north = -Z = 0
        -- west = -X = 1
        -- south = +Z = 2
        -- east = +X = 3
        repeat
            local pos_x = self.dist_from_ori_pos.getX()
            if pos_x ~= 0 then
                self.moveBackward()
            end
        until pos_x == 0
    end

    ---@private
    local function returnYHome()
        repeat
            if self.dist_from_ori_pos.getY() < 0 then
                self.moveUp()
            elseif self.dist_from_ori_pos.getY() > 0 then
                -- is_full_home this case really necessary ?
                -- I think if I want to dig up in the future...
                self.moveDown()
            end
        until self.dist_from_ori_pos.getY() == 0
    end

    --- Return to the middle level of a mine
    local function returnToMiningLevel()
        local pos_y = math.abs(self.dist_from_ori_pos.getY())
        local has_to_move = ((pos_y % 4) ~= 0)
        local has_to_move_up, has_to_move_down

        if not has_to_move then
            return
        end

        if level == 0 then
            if pos_y == 0 then
                return
            end

            pos_y = self.dist_from_ori_pos.getY()
            if pos_y < 0 then
                repeat
                    self.moveUp()
                    pos_y = self.dist_from_ori_pos.getY()
                until pos_y == 0
                return
            end

            if pos_y > 0 then
                repeat
                    self.moveDown()
                    pos_y = self.dist_from_ori_pos.getY()
                until pos_y == 0
            end
        end

        has_to_move_up = ((level * 4) - pos_y) < 0
        has_to_move_down = ((level * 4) - pos_y) > 0
        if has_to_move_up then
            repeat
                self.moveUp()

                pos_y = math.abs(self.dist_from_ori_pos.getY())
                has_to_move_up = ((level * 4) - pos_y) < 0
            until has_to_move_up
            return
        end

        if has_to_move_down then
            repeat
                self.moveDown()

                pos_y = math.abs(self.dist_from_ori_pos.getY())
                has_to_move_down = ((level * 4) - pos_y) > 0
            until has_to_move_down
            return
        end
    end

    ---@private
    local function returnZHome()
        repeat
            local pos_z = self.dist_from_ori_pos.getZ()
            if pos_z ~= 0 then
                self.moveBackward()
            end
        until pos_z == 0
    end

    --- return home, if is_full_home is true then it return to the start point otherwise
    ---it just return to the center
    ---@param is_full_home boolean whether it need to return to the start point
    function self.returnHome(is_full_home)
        returnToMiningLevel()

        if is_mining then
            -- north = -Z = 0
            -- west = -X = 1
            -- south = +Z = 2
            -- east = +X = 3
            if self.MINING_DIR == 0 or self.MINING_DIR == 2 then
                returnZHome()
                returnXHome()
            elseif self.MINING_DIR == 1 or self.MINING_DIR == 3 then
                returnXHome()
                returnZHome()
            else
                error(""returnHome"")
            end
            if not is_full_home then
                return
            end

            returnYHome()
            return
        end

        if self.HEADING_DIR == 0 or self.HEADING_DIR == 2 then
            returnZHome()
        elseif self.HEADING_DIR == 1 or self.HEADING_DIR == 3 then
            returnXHome()
        else
            error(""returnHome"")
        end

        if is_full_home then
            returnYHome()
        end
    end

    --- Tell whether the length limit has been reached
    ---@return boolean whether the limit has been reached
    function self.isLengthLimitReached()
        -- north = -Z = 0
        -- west = -X = 1
        -- south = +Z = 2
        -- east = +X = 3
        if self.HEADING_DIR == 0 or self.HEADING_DIR == 2 then
            local pos_z = self.dist_from_ori_pos.getZ()
            if math.abs(pos_z) < self.LENGTH_LIMIT then
                return false
            end
        end

        if self.HEADING_DIR == 1 or self.HEADING_DIR == 3 then
            local pos_x = self.dist_from_ori_pos.getX()
            if math.abs(pos_x) < self.LENGTH_LIMIT then
                return false
            end
        end
        return true
    end

    --function self.isWidthLimitReached()
    --    -- north = -Z = 0
    --    -- west = -X = 1
    --    -- south = +Z = 2
    --    -- east = +X = 3
    --    if self.HEADING_DIR == 0 or self.MINING_DIR == 2 then
    --        if self.LENGTH_LIMIT <= self.dist_from_ori_pos.getZ() then
    --            self.returnHome(false)
    --        end
    --    end
    --
    --    if self.HEADING_DIR == 1 or self.MINING_DIR == 3 then
    --        if self.LENGTH_LIMIT <= self.dist_from_ori_pos.getX() then
    --            self.returnHome(false)
    --        end
    --    end
    --end

    --setmetatable(self, SPos_mt)
    instance = self
    return instance
end

-- inventory

--- Tell whether there are slot left in the inventory of the turtle
--- assume the inventory has been sorted before the call of that function
---@return boolean whether there is available slot in the inventory of the turtle
local function hasAvailableSlot()
    for i = 1, 16 do
        if turtle.getItemCount(i) == 0 then
            return true
        end
    end
    return false
end

--- make space in the inventory by dropping the unnecessary items
local function makeSpace()
    for i = 1, 16, 1 do
        local detail = turtle.getItemDetail(i, true)
        if detail ~= nil then
            if not (detail.tags and (detail.tags[""forge:ores""] or detail.tags[""forge:raw_materials""]
                    or detail.tags[""minecraft:coals""] or detail.tags[""forge:gems""]
                    or detail.tags[""forge:ingots""] or detail.tags[""forge:dusts/redstone""]
                    or detail.tags[""forge:storage_blocks/coal""]
                    or detail.tags[""forge:storage_blocks/charcoal""])) then
                turtle.select(i)
                turtle.drop()
            end
        end
    end
    turtle.select(1)
end

--- tell whether the slot is already taken or not
---@param slot number the number of the slot
local function isSlotTaken(slot)
    turtle.select(slot)
    local itemCount = turtle.getItemCount()
    if itemCount >= 0 then
        return false
    else
        return true
    end
end

--- place a stack of ore/gems/redstone/coal et in the first slot possible
---iterate 16 * 16 times so it takes time
local function sortStacks()
    for i = 1, 16 do
        for j = 1, 16 do
            turtle.select(j)
            local is_slot_taken = isSlotTaken(i)
            if not is_slot_taken then
                turtle.transferTo(i)
            end
        end
    end
end

---stack the item together if possible
---iterate 16 * 16 times so it takes time
local function stackItems()
    for i = 1, 16 do
        for j = 1, 16 do
            turtle.select(j)
            local isEqual = turtle.compareTo(i)
            if isEqual then
                local nbrToTransfer = turtle.getItemCount(j)
                local firstSlotSpaceLeft = turtle.getItemSpace(i)
                if ((firstSlotSpaceLeft - nbrToTransfer) <= 64) then
                    turtle.transferTo(i, nbrToTransfer)
                else
                    turtle.transferTo(i, firstSlotSpaceLeft)
                end
            end

        end
    end
end

--- sortInventory the inventory by stacking items together if possible
local function sortInventory()
    local has_available_slot = hasAvailableSlot()
    if not has_available_slot then
        stackItems()
        sortStacks()
        turtle.select(1)
    end
end

--- This function has to be called after the inventory has been cleaned up
---emptyInventory the inventory into a chest except for fuel and refuel
local function emptyInventory()
    for i = 1, 16 do
        local data = turtle.getItemDetail(i, true)
        local count
        if data then
            if data.tags and not (data.tags[""minecraft:coals""] or
                    data.tags[""forge:storage_blocks/coal""] or
                    data.tags[""forge:storage_blocks/charcoal""]) then
                count = turtle.getItemCount(i)
                turtle.select(i)
                turtle.dropUp(count)
            end
        end
    end
    turtle.select(1)
end

-- fuel

--- prompt the user to remind their to refuel the turtle before it start
local function askForFuel()
    repeat
        print(""\nDid you put fuel in the first slot ? [Y/n]"")
        local input = string.lower(read())
    until input == ""y""
end

--- refuel the turtle
local function refuelTurtle()
    local count
    for i = 1, 16 do
        turtle.select(i)
        count = turtle.getItemCount(i)
        turtle.refuel(count)
    end
    turtle.select(1)
end

--- first refuel of the turtle.
---Prompt
local function init_fuel()
    askForFuel()
    local level = turtle.getFuelLevel()
    if level == ""unlimited"" then
        error(""Turtle does not need fuel"")
    end

    refuelTurtle()
end

---refuel the turtle


-- cli

---ask input to the user to know the facing direction
---@return number dir the facing pos as defined
local function load_facing_direction()
    -- north = -Z = 0
    -- west = -X = 1
    -- south = +Z = 2
    -- east = +X = 3
    local dir
    repeat
        print(""In which direction the turtle is facing ?\n[0]: North\n[1]: West\n[2]: South\n[3]: East"")
        local input = string.lower(read())
        print("""")

        dir = tonumber(input)

        if not dir then
            print((""Error: you must enter a valid number\n you typed '%s'""):format(input))
            dir = -1
        end
    until (dir >= 0 and dir <= 3) and type(dir) == ""number""
    return dir
end

--- load the mining direction of the turtle
---@param facing_dir number the direction it will go forth
---@return number mining_dir the direction it will mine
local function load_mining_direction(facing_dir)
    -- north = -Z = 0
    -- west = -X = 1
    -- south = +Z = 2
    -- east = +X = 3
    local input
    local mining_dir
    repeat
        print(""In which direction the turtle is going to mine ?\n"")
        if (facing_dir % 2 == 0) then
            print(""[1]: West\n[3]: East"")
        else
            print(""[0]: North\n[2]: South"")
        end

        input = string.lower(read())
        print("""")

        mining_dir = tonumber(input)

        if not mining_dir then
            print((""Error: you must enter a valid number\nYou typed %s""):format(input))
            print("""")
            mining_dir = -1
        end

        -- check if the values are correct e.g: not opposite one from another
        if ((facing_dir % 2 == 0) and (mining_dir == 0 or mining_dir == 2)) or ((facing_dir % 2 == 1) and (mining_dir == 1 or mining_dir == 3)) then
            print((""Error: check the choices !\n""))
            mining_dir = -1
        end
    until (mining_dir >= 0 and mining_dir <= 3) and type(mining_dir) == ""number""

    return mining_dir
end

local function askForLength()
    local input
    local length

    repeat
        print(""What length the turtle should mine ?\n"")
        input = string.lower(read())

        length = tonumber(input)

        if length and length >= 0 then
            return length
        else
            print(""Error: type a valid number (i.e: >= 0)"")
            length = -1
        end
    until type(length) == ""number"" and length >= 0
end

local function askForWidth()
    local input, width
    repeat
        print(""What width the turtle should mine ?\n"")
        input = string.lower(read())

        width = tonumber(input)

        if width and width >= 0 then
            return width
        else
            print(""Error: type a valid number (i.e: >= 0)"")
            width = -1
        end
    until type(width) == ""number"" and width >= 0
end

--- ask for the user's input the X and Z of the starting point of the turtle
---@return number, number, number the original pos of the turtle (X, Y, Z)
local function askForStartPoint()
    -- Ask for the X starting point of the turtle
    local pos_x, input_x
    while type(pos_x) ~= ""number"" do
        print(""X="")
        input_x = string.lower(read())
        print("""")
        pos_x = tonumber(input_x)
    end

    -- Ask for the Y starting point
    local pos_y, input_y
    while type(pos_y) ~= ""number"" do
        print(""Y="")
        input_y = string.lower(read())
        print("""")
        pos_y = tonumber(input_y)
    end


    -- Ask for the Z starting point of the turtle
    local pos_z, input_z
    while type(pos_z) ~= ""number"" do
        print(""Z="")
        input_z = string.lower(read())
        print("""")
        pos_z = tonumber(input_z)
    end

    return pos_x, pos_y, pos_z
end

-- optimizedMine

--- inspect each sides  of the turtle to find ores i.e:
---
---1= front
---
---2= right
---
---3= back
---
---4:= left
---@return boolean, number whether there is ore and the side which it found it
local function detectOreEachSide()
    for i = 1, 4 do
        local has_block, data = turtle.inspect()
        if has_block then
            if data and data.tags and (data.tags[""forge:ores""] or
                    data.tags[""forge:raw_materials""] or
                    data.tags[""minecraft:coals""] or
                    data.tags[""forge:gems""] or
                    data.tags[""forge:ingots""] or
                    data.tags[""forge:dusts/redstone""])
            then
                ---@TODO make the turtle turn until it found its original facing
                for _ = i - 1, 1, -1 do
                    turtle.turnLeft()
                end
                return true, i
            end
        end
        turtle.turnRight()
    end
    return false, 0
end

--- detect whether there is or on the up side
---@return boolean whether there is ore
local function detectOreUp()
    local has_block, data = turtle.inspectUp()
    if has_block then
        if data and data.tags and (data.tags[""forge:ores""] or
                data.tags[""forge:raw_materials""] or
                data.tags[""minecraft:coals""] or
                data.tags[""forge:gems""] or
                data.tags[""forge:ingots""] or
                data.tags[""forge:dusts/redstone""])
        then
            return true
        else
            return false
        end
    else
        return false
    end
end

--- detect whether there is or on the down side
---@return boolean whether there is ore
local function detectOreDown()
    local has_block, data = turtle.inspectDown()
    if has_block then
        if data and data.tags and (data.tags[""forge:ores""] or
                data.tags[""forge:raw_materials""] or
                data.tags[""minecraft:coals""] or
                data.tags[""forge:gems""] or
                data.tags[""forge:ingots""] or
                data.tags[""forge:dusts/redstone""])
        then
            return true
        else
            return false
        end
    else
        return false
    end
end

--- A recursive function that dig all the ores and go back with the exact same path
---@param ore_path table the path of the ores
local function orePathFinder(ore_path, moves)
    local has_ore_side, side = detectOreEachSide()
    local has_ore_up = detectOreUp()
    local has_ore_down = detectOreDown()
    local has_ore = has_ore_side or has_ore_up or has_ore_down
    local reverse_side

    -- backward pathfinding, its deleted the last entry of the table
    if not has_ore then
        reverse_side = table.remove(ore_path)
        if reverse_side then
            -- 1: front => back
            -- 2: right => left
            -- 3: back => front
            -- 4: left => right
            -- 5: down => up
            -- 6: up => down
            if reverse_side == 1 then
                moves.moveBackward()
            elseif reverse_side == 2 then
                moves.moveBackward()
                moves.left()
            elseif reverse_side == 3 then
                moves.moveBackward()
                moves.right()
                moves.right()
            elseif reverse_side == 4 then
                moves.moveBackward()
                moves.right()
            elseif reverse_side == 5 then
                moves.moveUp()
            elseif reverse_side == 6 then
                moves.moveDown()
            end
        end

        -- forward ore finding, it insert the direction one the table
        -- 1: front
        -- 2: right
        -- 3: back
        -- 4: left
        -- 5: down
        -- 6: up
    elseif has_ore_side then
        if side then
            if side == 1 then
                moves.moveForward()
                table.insert(ore_path, side)
            elseif side == 2 then
                moves.right()
                moves.moveForward()
                table.insert(ore_path, side)
            elseif side == 3 then
                moves.right()
                moves.right()
                moves.moveForward()
                table.insert(ore_path, side)
            elseif side == 4 then
                moves.left()
                moves.moveForward()
                table.insert(ore_path, side)
            end
        end
    elseif has_ore_down then

        moves.moveDown()
        table.insert(ore_path, 5)
    elseif has_ore_up then
        moves.moveUp()
        table.insert(ore_path, 6)
    end

    if ((not has_ore) and (#ore_path == 0)) then
        return
    else
        orePathFinder(ore_path, moves)
    end
end

--- mine straight for 64 blocks and then come backward
local function mineStraight(move_management)
    local ores
    for _ = 1, move_management.WIDTH_LIMIT, 1 do
        ores = {}
        orePathFinder(ores, move_management)
        move_management.moveForward()

        -- do the up step
        move_management.moveUp()
        ores = {}
        orePathFinder(ores, move_management)
        move_management.moveDown()

        -- do the final step: the down one
        move_management.moveDown()
        ores = {}
        orePathFinder(ores, move_management)
        move_management.moveUp()

        if not hasAvailableSlot then
            makeSpace()
        end

    end

    refuelTurtle()
    makeSpace()

    for _ = 1, move_management.WIDTH_LIMIT, 1 do
        move_management.moveBackward()
    end

    sortInventory()
end

local function mine3BlocksStraight(move_management)
    for _ = 1, 3 do
        turtle.dig()
        move_management.moveForward()
        turtle.digUp()
        turtle.digDown()
    end
end

---
local function shift(side, move_management)
    if side == ""left"" then
        move_management.right()
        mine3BlocksStraight(move_management)
    elseif side == ""right"" then
        move_management.left()
        mine3BlocksStraight(move_management)
    else
        error(""Should not happened"")
    end
end

---Mine below the turtle to reach the next level (aka stage)
---@param moves SMovementManagement the movement management singleton
local function mine4BlocksBelow(moves)
    moves.level = moves.level + 1

    for i = 1, (moves.level * 4) do
        local actual_pos_y = moves.ORIGINAL_POS.getY() - math.abs(moves.dist_from_ori_pos.getY())
        if actual_pos_y == -57 and ((i % 4) ~= 3) then
            moves.returnHome(true)
            break
        end

        moves.moveDown()

    end

end

-- Instructions

init_fuel()

-- local posX, posZ = load_start_point()
local facing_dir = load_facing_direction()
local mining_dir = load_mining_direction(facing_dir)
local length = askForLength()
local width = askForWidth()
local ori_x, ori_y, ori_z = askForStartPoint()
local ori_pos = Vec.new(ori_x, ori_y, ori_z)
local moves = SMovementManagement.new(ori_pos, facing_dir, mining_dir, length, width)


-- north = -Z = 0
-- west = -X = 1
-- south = +Z = 2
-- east = +X = 3


-- all the mine left moves:
-- (facing_dir == 0 and mining_dir == 1)
-- (facing_dir == 1 and mining_dir == 2)
-- (facing_dir == 2 and mining_dir == 3)
-- (facing_dir == 3 and mining_dir == 0)

-- all the mine right moves
-- (facing_dir == 0 and mining_dir == 3)
-- (facing_dir == 1 and mining_dir == 0)
-- (facing_dir == 2 and mining_dir == 1)
-- (facing_dir == 3 and mining_dir == 2)
local max_y = moves.ORIGINAL_POS.getY() - math.abs(moves.dist_from_ori_pos.getY())
while max_y > -57 do
    local has_available_slot = hasAvailableSlot()
    local is_limit_reached = moves.isLengthLimitReached()
    while has_available_slot and not is_limit_reached do
        if (facing_dir == 0 and mining_dir == 1) or (facing_dir == 1 and mining_dir == 2) or
                (facing_dir == 2 and mining_dir == 3) or (facing_dir == 3 and mining_dir == 0) then
            -- if the turtle needs to mine to its left at the beginning
            local side = ""left""
            moves.left()
            mineStraight(moves)
            shift(side, moves)

        elseif (facing_dir == 0 and mining_dir == 3) or (facing_dir == 1 and mining_dir == 0) or
                (facing_dir == 2 and mining_dir == 1) or (facing_dir == 3 and mining_dir == 2) then
            -- if the turtle needs to mine to its right at the beginning
            local side = ""right""
            moves.right()
            mineStraight(moves)
            shift(side, moves)
        end

        has_available_slot = hasAvailableSlot()
        is_limit_reached = moves.isLengthLimitReached()
    end
    max_y = moves.ORIGINAL_POS.getY() - math.abs(moves.dist_from_ori_pos.getY())
    moves.returnHome(true)
    makeSpace()
    --- need to return home moves.returnHome(true)
    emptyInventory()

    mine4BlocksBelow(moves)
end
"
CQUTQ5yF,05. Journey,veronikaaa86,Python,Sunday 16th of July 2023 03:52:33 AM CDT,"budget = float(input())
season = input()

destination = """"
place = """"
price = 0
if budget <= 100:
    destination = ""Bulgaria""
    if season == ""summer"":
        place = ""Camp""
        price = budget * 0.3
    elif season == ""winter"":
        place = ""Hotel""
        price = budget * 0.7

elif budget <= 1000:
    destination = ""Balkans""
    if season == ""summer"":
        place = ""Camp""
        price = budget * 0.4
    elif season == ""winter"":
        place = ""Hotel""
        price = budget * 0.8

elif budget > 1000:
    destination = ""Europe""
    place = ""Hotel""
    price = budget * 0.9

print(f""Somewhere in {destination}"")
print(f""{place} - {price:.2f}"")"
m1RpiKSh,04. Fishing Boat,veronikaaa86,Python,Sunday 16th of July 2023 03:38:34 AM CDT,"budget = int(input())
# ""Spring"", ""Summer"", ""Autumn"" или ""Winter""
season = input()
count_people = int(input())

price = 0
if season == ""Spring"":
    price = 3000
elif season == ""Summer"" or season == ""Autumn"":
    price = 4200
elif season == ""Winter"":
    price = 2600

if count_people <= 6:
    price = price * 0.9
elif 6 < count_people <= 11:
    price = price * 0.85
elif count_people > 11:
    price = price * 0.75

if count_people % 2 == 0 and season != ""Autumn"":
    price = price * 0.95

diff = abs(budget - price)
if budget >= price:
    print(f""Yes! You have {diff:.2f} leva left."")
else:
    print(f""Not enough money! You need {diff:.2f} leva."")
"
dsa1wT6A,user_list.blade.php,rezamalik15,HTML,Sunday 16th of July 2023 03:04:38 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <meta http-equiv=""X-UA-Compatible"" content=""ie=edge"">
    <title>User List</title>
    <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"" rel=""stylesheet"" integrity=""sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM"" crossorigin=""anonymous"">
</head>
<body>

    <div class=""container mt-3"">
        
        <h2>Tambah User Baru</h2>
        <form action=""/user/add"" method=""POST"">
            @csrf
            <div class=""mb-3 col-6"">
                <label for=""name"">Nama</label>
                <input class=""form-control"" type=""text"" id=""name"" placeholder=""Nama Lengkap"" name=""name"" required>
            </div>
            <div class=""mb-3 col-6"">
                <label for=""email"">Email</label>
                <input class=""form-control"" type=""email"" id=""email"" placeholder=""Alamat Email"" name=""email"" required>
            </div>
            <div class=""mb-3 col-6"">
                <label for=""password"">Password</label>
                <input class=""form-control"" type=""password"" id=""password"" placeholder=""Masukkan Password"" name=""password"" onkeyup=validatePassword() required>
            </div>
            <div class=""mb-3 col-6"">
                <label for=""password2"">Konfirmasi Password</label>
                <input class=""form-control"" type=""password"" id=""password2"" placeholder=""Masukkan Password Kembali"" name=""password2"" onkeyup=validatePassword() required>
            </div>
            <div class=""mb-3 col-6"">
                <input class=""btn btn-primary"" type=""submit"" id=""submitform"" value=""Tambahkan"" name=""submit"">
            </div>
            
        </form>

        <hr>

        <h2>Daftar User</h2>
        <table class=""table table-striped"">
            <thead>
                <tr>
                    <th>Nama</th>
                    <th>Email</th>
                    <th>Password</th>
                    <th></th>
                </tr>
            </thead>

            <tbody>
            
            @foreach ($users as $user)

                <tr>
                    <td>{{ $user->name }}</td>
                    <td>{{ $user->email }}</td>
                    <td>{{ $user->password }}</td>
                    <td>
                        <a href=""/user/edit/form/{{$user->id}}""
                            class=""btn btn-warning"">
                            Edit
                        </a>
                        <a href=""/user/delete/{{$user->id}}""
                            class=""btn btn-danger""
                            onclick=""confirm('Anda yakin ingin menghapus user {{$user->name}}?')"">
                            Delete
                        </a>
                    </td>
                </tr>
                
            @endforeach

            </tbody>
        </table>

    </div>

    <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"" integrity=""sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz"" crossorigin=""anonymous""></script>   
    <script>
        const password1 = document.getElementById('password')
        const password2 = document.getElementById('password2')
        const submitButton = document.getElementById('submitform')

        function validatePassword(){
            if(password1.value !== password2.value){
                submitButton.disabled = true
            } else {
                submitButton.disabled = false
            }
        }
        
    </script>
</body>
</html>"
ZNc4z2e8,Untitled,35657,C++,Sunday 16th of July 2023 03:03:39 AM CDT,"

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <windows.h>  // для работы SetConsoleCP, SetConsoleOutputCP


using namespace std;


int main() {

	SetConsoleCP(1251); // установка кодовой страницы windows cp 1251 в поток ввода
	SetConsoleOutputCP(1251); // установка кодовой страницы wincp 1251 в поток вывода

	ifstream fin;
	fin.open(""C:/Users/PC/Desktop/file.txt"");


	if (!fin.is_open()) {
		cout << ""Ошибка открытия файла"" << endl;

	}
	else {
		int count = 0;
		string word;
		string user_word;
		cout << ""Введите слово для поиска: "";
		getline(cin, user_word);
		const int size = user_word.size();
		int k = 0;
		while (!fin.eof()) {
			getline(fin, word);
			for (int i = 0; i < word.size(); i++) {
				if (word[i] == user_word[0] ||  user_word[0] >= 'А' && user_word[0] < 'а' && word[i] == user_word[0] + 32 || user_word[0] >= 'а' && word[i] == user_word[0] - 32) { // вот здесь добавили проверок
					for (int j = 0; j < min(size, word.size()); j++) {
						if (word[i] == user_word[j] || user_word[j] >= 'А' && user_word[j] < 'а' && word[i] == user_word[j] + 32 || user_word[j] >= 'а' && word[i] == user_word[j] - 32) { // и здесь добавили проверок
							k++;
							i++;
						}
						else {
							k = 0;
							break;
						}
					}
					if (k == size) {
						count++;
					}
					k = 0;
				}
			}
		}
		fin.close();
		cout << count << "" повторений"" << endl;
	}
}


"
d6ixFjXL,03. New House,veronikaaa86,Python,Sunday 16th of July 2023 03:02:54 AM CDT,"# ""Roses"", ""Dahlias"", ""Tulips"", ""Narcissus"" или ""Gladiolus""
type_flowers = input()
count_flowers = int(input())
budget = int(input())

total_sum = 0
if type_flowers == ""Roses"":
    total_sum = 5 * count_flowers
    if count_flowers > 80:
        total_sum = total_sum * 0.9
elif type_flowers == ""Dahlias"":
    total_sum = 3.8 * count_flowers
    if count_flowers > 90:
        total_sum = total_sum * 0.85
elif type_flowers == ""Tulips"":
    total_sum = 2.8 * count_flowers
    if count_flowers > 80:
        total_sum = total_sum * 0.85
elif type_flowers == ""Narcissus"":
    total_sum = 3 * count_flowers
    if count_flowers < 120:
        total_sum = total_sum * 1.15
elif type_flowers == ""Gladiolus"":
    total_sum = 2.5 * count_flowers
    if count_flowers < 80:
        total_sum = total_sum * 1.20

diff = abs(total_sum - budget)
if budget >= total_sum:
    print(f""Hey, you have a great garden with {count_flowers} {type_flowers} and {diff:.2f} leva left."")
else:
    print(f""Not enough money, you need {diff:.2f} leva more."")"
KKYvZVXV,Untitled,35657,C++,Sunday 16th of July 2023 02:39:29 AM CDT,"
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <windows.h>  // для работы SetConsoleCP, SetConsoleOutputCP


using namespace std;


int main() {

	SetConsoleCP(1251); // установка кодовой страницы windows cp 1251 в поток ввода
	SetConsoleOutputCP(1251); // установка кодовой страницы wincp 1251 в поток вывода

	ifstream fin;
	fin.open(""C:/Users/PC/Desktop/file.txt"");


	if (!fin.is_open()) {
		cout << ""Ошибка открытия файла"" << endl;

	}
	else {
		int count = 0;
		string word;
		string user_word;
		cout << ""Введите слово для поиска: "";
		getline(cin, user_word);
		const int size = user_word.size();
		int k = 0;
		while (!fin.eof()) {
			getline(fin, word);
			for (int i = 0; i < word.size(); i++) {
				if (word[i] == user_word[0] || word[i] == user_word[0] - 32 || word[i] == user_word[0] + 32) { // здесь поменяли
					for (int j = 0; j < min(size, word.size()); j++) {
						if (word[i] == user_word[j] || word[i] == user_word[j] - 32 || word[i] == user_word[0] + 32) { // здесь поменяли
							k++;
							i++;
						}
						else {
							k = 0;
							break;
						}
					}
					if (k == size) {
						count++;
					}
					k = 0;
				}
			}
		}
		fin.close();
		cout << count << "" повторений"" << endl;
	}
}


"
bsscV4CS,№23. Pong. Коллизия,Chl_Snt,Python,Sunday 16th of July 2023 02:27:37 AM CDT,"from tkinter import *
import time

root = Tk()
root.geometry(""800x600+200+100"")
root.title(""Pong"")


canvas = Canvas(root, width=800, height=600, bg=""black"")
canvas.pack()
score = 0


class Player:
    def __init__(self):
        self.id = None
        self.y = None
        self.speed = None

    def draw(self):
        canvas.move(self.id, 0, self.y)
        _, y, _, y1 = canvas.coords(self.id)
        if y <= 0 or y1 >= 600:
            self.y = 0


class Player1(Player):
    def __init__(self):
        super().__init__()
        self.id = canvas.create_rectangle(30, 10, 40, 90, fill=""white"")
        self.y = 0
        self.speed = 3

    def move(self, event):
        if event.keysym == ""w"":
            self.y = -self.speed
        if event.keysym == ""s"":
            self.y = self.speed
        print(self.y)

    def stop(self, event):
        if event.keysym in ""ws"":
            self.y = 0


class Player2(Player):
    def __init__(self):
        super().__init__()
        self.id = canvas.create_rectangle(760, 10, 770, 90, fill=""white"")
        self.y = 0
        self.speed = 3

    def move(self, event):
        if event.keysym == ""Up"":
            self.y = -self.speed
        if event.keysym == ""Down"":
            self.y = self.speed

    def stop(self, event):
        if event.keysym in (""Up"", ""Down""):
            self.y = 0


class Ball:
    def __init__(self):
        self.id = canvas.create_oval(40, 20, 70, 50, fill=""white"")
        self.x = 3
        self.y = 3


    def draw(self):
        canvas.move(self.id, self.x, self.y)
        bx, by, bx1, by1 = canvas.coords(self.id)
        if by <= 0 or by1 >= 600:
            self.y = -self.y

        x1, y1, x11, y11 = canvas.coords(player1.id)
        x2, y2, x22, y22 = canvas.coords(player2.id)


        if by > y1 and by1 < y11 and bx <= x11:
            self.x -= 0.25
            player1.speed += 0.25
            player2.speed += 0.25
            self.x = -self.x

        if by > y2 and by1 < y22 and bx1 >= x2:
            self.x += 0.25
            player1.speed += 0.25
            player2.speed += 0.25
            self.x = -self.x

        if bx <= 0 or bx1 >= 800:
            return True



ball = Ball()
player1 = Player1()
player2 = Player2()


root.bind_all(""<KeyPress>"", player1.move)
root.bind_all(""<KeyPress>"", player2.move, add=""+"")
root.bind_all(""<KeyRelease>"", player1.stop)
root.bind_all(""<KeyRelease>"", player2.stop, add=""+"")


while True:
    root.update()
    root.update_idletasks()
    loser = ball.draw()
    if loser:
        break
    player1.draw()
    player2.draw()
    time.sleep(0.01)
"
d33fUsFv,01. Cinema,veronikaaa86,Python,Sunday 16th of July 2023 02:23:48 AM CDT,"type_tickets = input()
rows = int(input())
cols = int(input())

all_seats = rows * cols

price = 0
if type_tickets == ""Premiere"":
    price = 12
elif type_tickets == ""Normal"":
    price = 7.50
elif type_tickets == ""Discount"":
    price = 5

total_income = all_seats * price

print(f""{total_income:.2f} leva"")"
7Jx1z52B,!golive,palmtreetop,JSON,Sunday 16th of July 2023 12:34:08 AM CDT,"[`🌊 be water, my friend`,
`🍕 pizza, money, swiffer`,
`💅🏾 c'est parti (let's go)`,
`🍹 don't judge me, it's 5pm ~somewhere~`,
`🤓 come by and hang w this nerd`,
`🔪 looks like i can have a lil' fun now`,
`🌪️ believe it or not, i'm pretty busy! ok not really`,
`😩 where's jessica?`,
`🍃 WINDS! GATHER!`,
`🩰 la lala la lala - la la 💀LA`,
`⏱️ tick tock, i'm on the clock`,
`💫 we can do this ALL day EVERY day!`,
`✨ ion know nothin' 'bout vidya games`,
`🫧 pop pop pop, it's time to rock`,
`👟 just do it`,
`🗣️ what a chatty introvert`,
`🐾 my cat dgaf im about to go live`,
`🪄 it's time for some black girl magic ⋆｡°✩`,
`🌍 complete - global - satuRATIONNNNN`,
`🌺 come on down, the water's fine`,
`🪩 we don't need a reason for joy - oh yeah - it's your FRIDAY NIGHT 🎵`,
`🔮 LOOK at how she's WALKING ⋆｡°✩`]"
9UHU6mb1,registration_result.blade.php,rezamalik15,HTML,Saturday 15th of July 2023 10:00:58 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <meta http-equiv=""X-UA-Compatible"" content=""ie=edge"">
    <title>Register</title>
    <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"" rel=""stylesheet"" integrity=""sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM"" crossorigin=""anonymous"">
</head>
<body>

    <div class=""container "">

        <div class=""position-absolute top-50 start-50 translate-middle w-auto shadow p-5"">

            <h2 class=""text-center"">Selamat Datang</h2>
            <hr>
            <p>Berikut ini adalah data yang kamu masukkan</p>

            <div class=""mb-3"">
                <h6 style=""text-decoration: underline;"">Nama</h6>
                <h5>{{ $name; }}</h5>
            </div>

            <div class=""mb-3"">
                <h6 style=""text-decoration: underline;"">Tempat Lahir</h6>
                <h5>{{ $pob; }}</h5>
            </div>

            <div class=""mb-3"">
                <h6 style=""text-decoration: underline;"">Tanggal Lahir</h6>
                <h5>{{ $dob; }}</h5>
            </div>

            <div class=""mb-3"">
                <h6 style=""text-decoration: underline;"">Jenis Kelamin</h6>
                <h5>{{ $gender; }}</h5>
            </div>

            <div class=""mb-3"">
                <h6 style=""text-decoration: underline;"">Email</h6>
                <h5>{{ $email; }}</h5>
            </div>

            <div class=""mb-3"">
                <h6 style=""text-decoration: underline;"">Nomor Telepon</h6>
                <h5>{{ $phone; }}</h5>
            </div>
            
        </div>

    </div>

    <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"" integrity=""sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz"" crossorigin=""anonymous""></script>   
    
</body>
</html>"
630vN6Gu,Airlock v2.2,LtTwinkie,C#,Saturday 15th of July 2023 09:55:13 PM CDT,"/*
 * Twinkie Industries™ Automation Presents
 * Airlock Automation v2.2
 * 
 * This script will allow you to set up airlocks with vents and lights that will operate properly with a single button press or sensor trigger.
 * 
 * On the vent and any lights add the following to CustomData
 * [Airlock]
 * Name=airlockName
 * 
 * Also add it to the doors but include if the door is the outside door or not
 * [Airlock]
 * Name=airlockName
 * IsOutside=true
 * 
 * When you run the script using the name of the airlock as the argument it will properly cycle the airlock.
 */

// SETTINGS ---------------------------------------------------------------------------------------------------

// If you set a value for GRID_NAME, each block will require it in the name. This is used to prevent blocks from
// other grids being added.
public const string GRID_NAME = """";

// This timeout prevents the airlock getting stuck because the vent can't depressurize. For example, if there is
// no free space in an oxygen tank or no oxygen tank connected the vent won't be able to remove the air.
public const double VENT_TIMEOUT_SECONDS = 4.0;

// The normal color for the airlock light when it is pressurized
public static readonly Color PRESSURIZED_COLOR = Light.FLORESCENT_WARM;

// The color for the airlock light when it is depressurized
public static readonly Color UNPRESSURIZED_COLOR = Color.Red;


// END SETTINGS - PLEASE DO NOT EDIT BELOW --------------------------------------------------------------------

private Dictionary<string, Airlock> _airlocks = new Dictionary<string, Airlock>();
private List<string> _invalidAirlocks = new List<string>();

public Program()
{
    Refresh();
    Runtime.UpdateFrequency = UpdateFrequency.Update10;
}

public void Main(string argument, UpdateType updateSource)
{
    if (_invalidAirlocks.Count != 0)
    {
        Echo(""Invalid airlocks:"");
        foreach (string invalidAirlock in _invalidAirlocks)
        {
            Echo(invalidAirlock);
        }
        _invalidAirlocks.Clear();
    }

    if (string.IsNullOrWhiteSpace(argument))
    {
        foreach (var airlock in _airlocks.Values)
        {
            airlock.Update(VENT_TIMEOUT_SECONDS);
        }

        return;
    }

    string lower = argument.ToLowerInvariant();

    if (lower == ""lock"")
    {
        foreach (var airlock in _airlocks)
        {
            Echo($""Locking {airlock.Key}"");
            airlock.Value.Lock();
        }

        return;
    }

    if (lower == ""reset"")
    {
        foreach (var airlock in _airlocks)
        {
            Echo($""Resetting {airlock.Key}"");
            airlock.Value.Reset();
        }

        return;
    }

    if (lower == ""refresh"")
    {
        Echo($""Refresh arg"");
        Refresh();
        return;
    }

    if (_airlocks.ContainsKey(argument))
    {
        Airlock airlock;
        if (_airlocks.TryGetValue(argument, out airlock))
        {
            Echo($""Cycling {argument}"");
            airlock.Cycle();
        }
        else
        {
            Echo($""{argument} not found"");
        }
    }
}

public void Refresh()
{
    _airlocks.Clear();

    var airlockBlocks = new List<IMyTerminalBlock>();
    GridTerminalSystem.GetBlocksOfType(airlockBlocks, block => block.CustomName.Contains(GRID_NAME) && MyIni.HasSection(block.CustomData, CustomData.AIRLOCK));

    foreach (IMyTerminalBlock block in airlockBlocks)
    {
        CustomData customData;
        try
        {
            customData = new CustomData(block, Echo);
        }
        catch (Exception)
        {
            continue;
        }

        string airlockName = customData.Name;
        Airlock airlock;
        if (!_airlocks.TryGetValue(airlockName, out airlock))
        {
            airlock = _airlocks[airlockName] = new Airlock();
            airlock.PressurizedColor = PRESSURIZED_COLOR;
            airlock.UnpressurizedColor = UNPRESSURIZED_COLOR;
        }

        bool isOutside = block is IMyDoor ? customData.IsOutside : false;
        airlock.Add(block, isOutside);
    }

    foreach (KeyValuePair<string, Airlock> airlock in _airlocks)
    {
        if (!airlock.Value.IsFunctional)
        {
            _airlocks.Remove(airlock.Key);
            _invalidAirlocks.Add(airlock.Key);
        }
        else
        {
            airlock.Value.Reset();
        }
    }
}

private class Airlock
{
    private enum State
    {
        /// <summary> Waiting for the doors to close </summary>
        Locking,

        /// <summary> Airlock is offline </summary>
        Locked,

        /// <summary> Closing both doors and pressurizing </summary>
        Resetting,

        /// <summary> Nothing happening </summary>
        Idle,

        /// <summary> Waiting for the door to close </summary>
        Closing,

        /// <summary> Waiting for venting </summary>
        Venting,

        /// <summary> Waiting for the door to open </summary>
        Opening,
    }

    public List<Door> DoorsIn = new List<Door>();
    public List<Door> DoorsOut = new List<Door>();
    public List<Vent> AirVents = new List<Vent>();
    public List<Light> Lights = new List<Light>();

    private State _state = State.Idle;
    private bool _openOut;
    private DateTime _nextAction;

    public Color PressurizedColor { get; set; }
    public Color UnpressurizedColor { get; set; }

    public bool IsFunctional => DoorsIn.Count != 0 && DoorsOut.Count != 0 && AirVents.Count != 0;

    public List<Door> AllDoors
    {
        get
        {
            var rv = new List<Door>(DoorsIn.Count + DoorsOut.Count);
            rv.AddRange(DoorsIn);
            rv.AddRange(DoorsOut);
            return rv;
        }
    }

    public void Add(IMyTerminalBlock block, bool isOutside = false)
    {
        if (block is IMyDoor)
        {
            var door = new Door(block as IMyDoor);
            if (isOutside)
            {
                DoorsOut.Add(door);
            }
            else
            {
                DoorsIn.Add(door);
            }
        }
        else if (block is IMyAirVent)
        {
            AirVents.Add(new Vent(block as IMyAirVent));
        }
        else if (block is IMyLightingBlock)
        {
            Lights.Add(new Light(block as IMyLightingBlock));
        }
    }

    public void Update(double timeoutSeconds)
    {
        if (_state == State.Idle || _state == State.Locked)
            return;

        // Un-timed states
        if (_state == State.Venting)
        {
            if (_openOut && Vent.AllDepressurized(AirVents) ||
                !_openOut && Vent.AllPressurized(AirVents) ||
                DateTime.UtcNow > _nextAction) // timeout
            {
                _nextAction = Door.OpenDoors(_openOut ? DoorsOut : DoorsIn);
                RefreshLights();
                _state = State.Opening;
            }

            return;
        }

        if (DateTime.UtcNow < _nextAction)
            return;

        // Timed states
        switch (_state)
        {
            // Cycle
            case State.Closing:
            {
                PowerOff();
                Vent.SetDepressurize(AirVents, _openOut);
                _nextAction = DateTime.UtcNow + TimeSpan.FromSeconds(timeoutSeconds);
                _state = State.Venting;
                break;
            }
            case State.Opening:
            {
                PowerOff();
                RefreshLights();
                _state = State.Idle;
                break;
            }

            // Lock
            case State.Locking:
            {
                PowerOff();
                _state = State.Locked;
                break;
            }

            // Reset
            case State.Resetting:
            {
                Light.SetEnabled(Lights, true);
                RefreshLights();
                _state = State.Idle;
                break;
            }
        }
    }

    public void Cycle()
    {
        if (_state != State.Idle)
            return;

        _openOut = !_openOut;
        _nextAction = Door.CloseDoors(AllDoors);
        Light.SetColor(Lights, Color.Red);
        _state = State.Closing;
    }

    public void Reset()
    {
        _nextAction = Door.CloseDoors(AllDoors);
        Light.SetEnabled(Lights, true);
        _state = State.Resetting;
    }

    public void Lock()
    {
        _nextAction = Door.CloseDoors(AllDoors);
        Light.SetEnabled(Lights, false);
        _state = State.Locking;
    }

    private void PowerOff()
    {
        Door.SetEnabled(AllDoors, false);
    }

    private void RefreshLights()
    {
        Color color = Vent.AllPressurized(AirVents) && !Vent.AnyDepressurizing(AirVents)
            ? PressurizedColor
            : UnpressurizedColor;

        Light.SetColor(Lights, color);
    }
}

private class CustomData
{
    public const string AIRLOCK = ""Airlock"";
    public const string IS_OUTSIDE = ""IsOutside"";
    private const string NAME = ""Name"";

    public MyIni Ini { get; } = new MyIni();

    public string Name => Get(NAME).ToString();
    public bool IsOutside => Get(IS_OUTSIDE).ToBoolean();

    public CustomData(IMyTerminalBlock block, Action<string> echo)
    {
        MyIniParseResult parseResult;
        if (!Ini.TryParse(block.CustomData, out parseResult))
        {
            echo?.Invoke(""Failed to parse ini"");
            throw new Exception(parseResult.ToString());
        }

        MyIniValue nameResult = Get(NAME);
        if (nameResult.IsEmpty)
        {
            string message = $""Can't find {NAME} setting for {block.CustomName}"";
            echo?.Invoke(message);
            throw new Exception(message);
        }

        if (block is IMyDoor)
        {
            MyIniValue outsideResult = Get(IS_OUTSIDE);
            if (outsideResult.IsEmpty)
            {
                string message = $""Can't find {IS_OUTSIDE} settings for {block.CustomName}"";
                echo?.Invoke(message);
                throw new Exception(message);
            }
        }
    }

    public MyIniValue Get(string key) => Ini.Get(AIRLOCK, key);
}

// Mixin
public class Door
{
    public const double DELAY_STANDARD_MILLIS = 1.0;
    public const double DELAY_HANGAR_MILLIS = 10.0;
    private double _customDelay;

    private bool _isHangar;

    public IMyDoor Block { get; }

    public bool Enabled { get { return Block.Enabled; } set { Block.Enabled = value; } }
    public DoorStatus Status => Block.Status;
    public float OpenRatio => Block.OpenRatio;
    public bool IsOpen => Block.Status == DoorStatus.Open;
    public bool IsClosed => Block.Status == DoorStatus.Closed;
    public bool IsTransitioning => !IsOpen && !IsClosed;

    public Door(IMyDoor block, double customDelay = 0.0)
    {
        Block = block;
        _customDelay = customDelay;
        _isHangar = block is IMyAirtightHangarDoor;
    }

    public static void SetEnabled(List<Door> doors, bool value)
    {
        foreach (Door door in doors)
        {
            door.Enabled = value;
        }
    }

    public static bool AnyOpened(List<Door> doors)
    {
        foreach (var door in doors)
        {
            if (door.Status == DoorStatus.Open)
                return true;
        }
        return false;
    }

    public static bool AnyClosed(List<Door> doors)
    {
        foreach (var door in doors)
        {
            if (door.Status == DoorStatus.Closed)
                return true;
        }
        return false;
    }

    public static DateTime OpenDoors(List<Door> doors)
    {
        DateTime maxDelay = DateTime.UtcNow;
        foreach (Door door in doors)
        {
            maxDelay = Max(maxDelay, door.OpenDoor());
        }

        return maxDelay;
    }

    public static DateTime CloseDoors(List<Door> doors)
    {
        DateTime maxDelay = DateTime.UtcNow;
        foreach (Door door in doors)
        {
            maxDelay = Max(maxDelay, door.CloseDoor());
        }

        return maxDelay;
    }

    public DateTime OpenDoor()
    {
        if (Block.Status == DoorStatus.Open)
            return DateTime.UtcNow;

        Block.Enabled = true;
        Block.OpenDoor();
        return Delay();

    }

    public DateTime CloseDoor()
    {
        if (Block.Status == DoorStatus.Closed)
            return DateTime.UtcNow;

        Block.Enabled = true;
        Block.CloseDoor();
        return Delay();

    }

    public DateTime ToggleDoor()
    {
        return Block.Status == DoorStatus.Closed || Block.Status == DoorStatus.Closing
                ? OpenDoor()
                : CloseDoor();
    }

    private DateTime Delay()
    {
        double standardDelay = _isHangar ? DELAY_HANGAR_MILLIS : DELAY_STANDARD_MILLIS;
        double delay = _customDelay != 0.0 ? _customDelay : standardDelay;
        return DateTime.UtcNow + TimeSpan.FromSeconds(delay);
    }

    private static DateTime Max(DateTime a, DateTime b)
    {
        return a > b ? a : b;
    }
}

// Mixin
public class Light
{
    public static readonly Color SODIUM = new Color(255, 183, 76);
    public static readonly Color INCANDESCENT = new Color(255, 255, 210);
    public static readonly Color FLORESCENT_WARM = new Color(230, 255, 255);
    public static readonly Color FLORESCENT_COOL = new Color(175, 215, 255);

    public IMyLightingBlock Block { get; private set; }

    public bool OriginalEnabled { get; private set; }
    public float OriginalRadius { get; private set; }
    public float OriginalIntensity { get; private set; }
    public float OriginalFalloff { get; private set; }
    public float OriginalBlinkInterval { get; private set; }
    public float OriginalBlinkLength { get; private set; }
    public float OriginalBlinkOffset { get; private set; }
    public Color OriginalColor { get; private set; }

    public bool Enabled { get { return Block.Enabled;} set { Block.Enabled = value; } }
    public float Radius { get { return Block.Radius; } set { Block.Radius = value; } }
    float Intensity { get { return Block.Intensity; } set { Block.Intensity = value; } }
    float Falloff { get { return Block.Falloff; } set { Block.Falloff = value; } }
    float BlinkIntervalSeconds { get { return Block.BlinkIntervalSeconds; } set { Block.BlinkIntervalSeconds = value; } }
    float BlinkLength { get { return Block.BlinkLength; } set { Block.BlinkLength = value; } }
    float BlinkOffset { get { return Block.BlinkOffset; } set { Block.BlinkOffset = value; } }
    Color Color { get { return Block.Color; } set { Block.Color = value; } }

    public Light(IMyLightingBlock block)
    {
        Block = block;
        OriginalEnabled = Block.Enabled;
        OriginalRadius = Block.Radius;
        OriginalIntensity = Block.Intensity;
        OriginalFalloff = Block.Falloff;
        OriginalBlinkInterval = Block.BlinkIntervalSeconds;
        OriginalBlinkLength = Block.BlinkLength;
        OriginalBlinkOffset = Block.BlinkOffset;
        OriginalColor = Block.Color;
    }

    public static void SetEnabled(List<Light> lights, bool value)
    {
        foreach (var light in lights)
        {
            light.Enabled = value;
        }
    }

    public static void SetColor(List<Light> lights, Color color)
    {
        foreach (var light in lights)
        {
            light.Color = color;
        }
    }

    public void Reset()
    {
        ResetEnabled();
        ResetRadius();
        ResetIntensity();
        ResetFalloff();
        ResetBlinkInterval();
        ResetBlinkLength();
        ResetBlinkOffset();
        ResetColor();
    }

    public void ResetEnabled() => Block.Enabled = OriginalEnabled;
    public void ResetRadius() => Block.Radius = OriginalRadius;
    public void ResetIntensity() => Block.Intensity = OriginalIntensity;
    public void ResetFalloff() => Block.Falloff = OriginalFalloff;
    public void ResetBlinkInterval() => Block.BlinkIntervalSeconds = OriginalBlinkInterval;
    public void ResetBlinkLength() => Block.BlinkLength = OriginalBlinkLength;
    public void ResetBlinkOffset() => Block.BlinkOffset = OriginalBlinkOffset;
    public void ResetColor() => Block.Color = OriginalColor;
}

// Mixin
public class Vent
{
    private const int DELAY_MILLIS = 2000;

    private int _customDelay;

    public IMyAirVent Block { get; }

    public bool Enabled { get { return Block.Enabled; } set { Block.Enabled = value; } }
    public bool CanPressurize => Block.CanPressurize;
    public float OxygenLevel => Block.GetOxygenLevel();
    public VentStatus Status => Block.Status;
    public bool PressurizationEnabled => Block.PressurizationEnabled;

    public bool Depressurize => Block.Depressurize;

    public bool IsPressurized => Block.Status == VentStatus.Pressurized;
    public bool IsDepressurized => Block.Status == VentStatus.Depressurized;
    public bool IsPressureUncertain => !IsPressurized && !IsDepressurized;

    public Vent(IMyAirVent block, int customDelay = 0)
    {
        Block = block;
        _customDelay = customDelay;
    }

    public static void SetEnabled(List<Vent> vents, bool value)
    {
        foreach (Vent vent in vents)
        {
            vent.Enabled = value;
        }
    }

    public static float OxygenLevelMin(List<Vent> vents)
    {
        float level = float.MaxValue;
        foreach (var vent in vents)
        {
            if (vent.OxygenLevel < level)
                level = vent.OxygenLevel;
        }
        return level;
    }

    public static float OxygenLevelMax(List<Vent> vents)
    {
        float level = float.MinValue;
        foreach (var vent in vents)
        {
            if (vent.OxygenLevel > level)
                level = vent.OxygenLevel;
        }
        return level;
    }

    public static float OxygenLevelAve(List<Vent> vents)
    {
        float level = 0f;
        foreach (var vent in vents)
        {
            level += vent.OxygenLevel;
        }
        return level / vents.Count;
    }

    public static bool AnyDepressurizing(List<Vent> vents)
    {
        foreach (var vent in vents)
        {
            if (vent.Depressurize)
                return true;
        }
        return false;
    }

    public static DateTime SetDepressurize(List<Vent> vents, bool value)
    {
        DateTime maxDelay = DateTime.UtcNow;
        for (int i = 0; i < vents.Count; i++)
        {
            if (vents[i]?.Block == null)
                continue;

            maxDelay = Max(maxDelay, vents[i].SetDepressurize(value));
        }

        return maxDelay;
    }

    public static bool AllPressurized(List<Vent> vents)
    {
        foreach (var vent in vents)
        {
            if (vent.Status != VentStatus.Pressurized)
                return false;
        }

        return true;
    }

    public static bool AllDepressurized(List<Vent> vents)
    {
        foreach (var vent in vents)
        {
            if (vent.Status != VentStatus.Depressurized)
                return false;
        }

        return true;
    }

    public DateTime SetDepressurize(bool value)
    {
        if (Block.Depressurize == value)
            return DateTime.UtcNow;

        Block.Depressurize = value;
        return Delay();

    }

    private DateTime Delay()
    {
        int delay = _customDelay != 0 ? _customDelay : DELAY_MILLIS;
        return DateTime.UtcNow + TimeSpan.FromMilliseconds(delay);
    }

    private static DateTime Max(DateTime a, DateTime b)
    {
        return a > b ? a : b;
    }
}"
SHUDnHAP,registration_form.blade.php,rezamalik15,HTML,Saturday 15th of July 2023 09:39:08 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <meta http-equiv=""X-UA-Compatible"" content=""ie=edge"">
    <title>Register</title>
    <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"" rel=""stylesheet"" integrity=""sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM"" crossorigin=""anonymous"">
</head>
<body>

    <div class=""container "">

        <div class=""position-absolute top-50 start-50 translate-middle w-50 shadow p-3"">

            <form action=""/register/add"" method=""post"">
                @csrf

                <h2 class=""text-center"">Daftar Di sini</h2>
    
                <div class=""mb-3"">
                    <label for=""name"">Nama</label>
                    <input class=""form-control col"" type=""text"" id=""name"" placeholder=""Nama Lengkap"" name=""name"">
                </div>

                <div class=""mb-3"">
                    <label for=""pob"">Tempat Lahir</label>
                    <input class=""form-control col"" type=""text"" id=""pob"" placeholder=""Kota tempat lahir"" name=""pob"">
                </div>

                <div class=""mb-3"">
                    <label for=""dob"">Tanggal Lahir</label>
                    <input class=""form-control col"" type=""date"" id=""dob"" name=""dob"">
                </div>

                <div class=""mb-3"">
                    <label>Jenis Kelamin</label>
                    <div class=""form-check mb-2"">
                        <input class=""form-check-input"" type=""radio"" name=""gender"" id=""male"" value=""1"">
                        <label class=""form-check-label"" for=""male"">Laki - Laki</label>
                    </div>
                    <div class=""form-check"">
                        <input class=""form-check-input"" type=""radio"" name=""gender"" id=""female"" value=""0"">
                        <label class=""form-check-label"" for=""female"">Perempuan</label>
                    </div>
                </div>

                <div class=""mb-3"">
                    <label for=""email"">Email</label>
                    <input class=""form-control col"" type=""email"" id=""email"" name=""email"">
                </div>

                <div class=""mb-3"">
                    <label for=""phone"">Nomor Telepon</label>
                    <input class=""form-control col"" type=""text"" id=""dob"" name=""phone"">
                </div>

                <div class=""mb-3"">
                    <input class=""btn btn-primary col-12"" type=""submit"" id=""submit"" value=""Daftar"">
                </div>
    
            </form>

        </div>

    </div>

    <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"" integrity=""sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz"" crossorigin=""anonymous""></script>   
    
</body>
</html>"
0RsMR47e,Untitled,PixelPlayz_Programs_,Lua,Saturday 15th of July 2023 09:34:40 PM CDT,"local DataStoreService = game:GetService('DataStoreService')
local DataStore = DataStoreService:GetOrderedDataStore(""CoinsData"")

local function LoadData(player)
	player:SetAttribute('CoinsDataLoaded', false)
	local data = DataStore:GetAsync(player.UserId)
	if (data ~= nil) then
		player.leaderstats.Coins.Value = tonumber(data)
		player:SetAttribute('CoinsDataLoaded', true)
	else
		player.leaderstats.Coins.Value = 0
		player:SetAttribute('CoinsDataLoaded', true)
	end
end

local function SaveData(player)
	if player:GetAttribute('CoinsDataLoaded') == true then
		local success, errormsg = pcall(function()
			local data = player.leaderstats.Coins.Value
			DataStore:SetAsync(player.UserId, data)
		end)
		if not (success) then
			warn('Data failed to save: ' .. errormsg)
		end
	end
end

game.Players.PlayerAdded:Connect(LoadData)
game.Players.PlayerRemoving:Connect(SaveData)"
q2Rw3kfv,Auto-Close Doors v3.2,LtTwinkie,C#,Saturday 15th of July 2023 09:30:55 PM CDT,"/*
 * Twinkie Industries™ Automation Presents
 * Auto-Close Doors v3.2
 */

// SETTINGS ---------------------------------------------------------------------------------------------------

// If you set a value for GRID_NAME, each block will require it in the name. This is used to prevent blocks from
// other grids being added.
public const string GRID_NAME = """";

// Doors with [AutoCloseIgnore] in their custom data are ignored by this script.
private const string AUTO_CLOSE_IGNORE = ""AutoCloseIgnore"";

// How long to wait before closing a door.
private const double CLOSE_SECONDS = 1.4;


// END SETTINGS - PLEASE DO NOT EDIT BELOW --------------------------------------------------------------------

private Dictionary<long, DoorState> _doors = new Dictionary<long, DoorState>();

public Program()
{
    Runtime.UpdateFrequency = UpdateFrequency.Update10;
}

public void Main(string argument, UpdateType updateSource)
{
    var blocks = new List<IMyDoor>();
    GridTerminalSystem.GetBlocksOfType(blocks, Check);

    if (blocks.Count == 0)
        return;

    DateTime now = DateTime.UtcNow;

    // Add
    foreach (IMyDoor block in blocks)
    {
        DoorState door;
        if (!_doors.TryGetValue(block.EntityId, out door))
        {
            _doors[block.EntityId] = door = new DoorState(block);
            Echo($""Adding door: {door.Name}"");
        }

        door.Update(now, Echo);
    }

    // Remove
    var toRemove = new List<long>();
    foreach (KeyValuePair<long, DoorState> door in _doors)
    {
        if (door.Value.WenUpdate != now)
            toRemove.Add(door.Key);
    }

    foreach (long key in toRemove)
    {
        _doors.Remove(key);
        Echo($""Removing door: {_doors[key].Name}"");
    }
}

private static bool Check(IMyDoor block)
{
    return StringUtil.Contains(block.CustomName, GRID_NAME) &&
        !MyIni.HasSection(block.CustomData, AUTO_CLOSE_IGNORE);
}

// Mixin
public class Door
{
    public const double DELAY_STANDARD_MILLIS = 1.0;
    public const double DELAY_HANGAR_MILLIS = 10.0;
    private double _customDelay;

    private bool _isHangar;

    public IMyDoor Block { get; }

    public bool Enabled { get { return Block.Enabled; } set { Block.Enabled = value; } }
    public DoorStatus Status => Block.Status;
    public float OpenRatio => Block.OpenRatio;
    public bool IsOpen => Block.Status == DoorStatus.Open;
    public bool IsClosed => Block.Status == DoorStatus.Closed;
    public bool IsTransitioning => !IsOpen && !IsClosed;

    public Door(IMyDoor block, double customDelay = 0.0)
    {
        Block = block;
        _customDelay = customDelay;
        _isHangar = block is IMyAirtightHangarDoor;
    }

    public static void SetEnabled(List<Door> doors, bool value)
    {
        foreach (Door door in doors)
        {
            door.Enabled = value;
        }
    }

    public static bool AnyOpened(List<Door> doors)
    {
        foreach (var door in doors)
        {
            if (door.Status == DoorStatus.Open)
                return true;
        }
        return false;
    }

    public static bool AnyClosed(List<Door> doors)
    {
        foreach (var door in doors)
        {
            if (door.Status == DoorStatus.Closed)
                return true;
        }
        return false;
    }

    public static DateTime OpenDoors(List<Door> doors)
    {
        DateTime maxDelay = DateTime.UtcNow;
        foreach (Door door in doors)
        {
            maxDelay = Max(maxDelay, door.OpenDoor());
        }

        return maxDelay;
    }

    public static DateTime CloseDoors(List<Door> doors)
    {
        DateTime maxDelay = DateTime.UtcNow;
        foreach (Door door in doors)
        {
            maxDelay = Max(maxDelay, door.CloseDoor());
        }

        return maxDelay;
    }

    public DateTime OpenDoor()
    {
        if (Block.Status == DoorStatus.Open)
            return DateTime.UtcNow;

        Block.Enabled = true;
        Block.OpenDoor();
        return Delay();

    }

    public DateTime CloseDoor()
    {
        if (Block.Status == DoorStatus.Closed)
            return DateTime.UtcNow;

        Block.Enabled = true;
        Block.CloseDoor();
        return Delay();

    }

    public DateTime ToggleDoor()
    {
        return Block.Status == DoorStatus.Closed || Block.Status == DoorStatus.Closing
                ? OpenDoor()
                : CloseDoor();
    }

    private DateTime Delay()
    {
        double standardDelay = _isHangar ? DELAY_HANGAR_MILLIS : DELAY_STANDARD_MILLIS;
        double delay = _customDelay != 0.0 ? _customDelay : standardDelay;
        return DateTime.UtcNow + TimeSpan.FromSeconds(delay);
    }

    private static DateTime Max(DateTime a, DateTime b)
    {
        return a > b ? a : b;
    }
}

// Mixin
public class DoorState
{
    public DateTime WenUpdate { get; private set; }

    private Door _block;
    private bool _isOpen;
    private DateTime _wenClose;

    public string Name => _block.Block.CustomName;

    public DoorState(IMyDoor door)
    {
        _block = new Door(door);
    }

    public void Update(DateTime wenUpdate, Action<string> echo)
    {
        WenUpdate = wenUpdate;

        if (!_block.Enabled)
            return;

        if (_block.IsOpen)
        {
            if (_isOpen && DateTime.UtcNow > _wenClose)
            {
                Close(true);
                echo($""Closing: {Name}"");
            }
            else if (!_isOpen)
            {
                Open();
                echo($""Now open: {Name}"");
            }
        }
        else
        {
            if (_isOpen)
            {
                Close(false);
                echo($""Now closed: {Name}"");
            }
        }
    }

    private void Open()
    {
        _isOpen = true;
        _wenClose = DateTime.UtcNow + TimeSpan.FromSeconds(CLOSE_SECONDS);
    }

    private void Close(bool actuateDoor)
    {
        _isOpen = false;

        if (actuateDoor)
            _block.CloseDoor();
    }
}

// Mixin
public static class StringUtil
{
    public static bool Contains(string text, string testSequence, bool useInvariant = true)
    {
        return useInvariant
            ? text.ToLowerInvariant().Contains(testSequence.ToLowerInvariant())
            : text.ToLower().Contains(testSequence.ToLower());
    }

    public static bool Equality(string a, string b, bool useInvariant = true)
    {
        return useInvariant
            ? a.ToLowerInvariant() == b.ToLowerInvariant()
            : a.ToLower() == b.ToLower();
    }

    public static bool ContainsKey<T>(Dictionary<string, T> dict, string key)
    {
        if (dict.ContainsKey(key)) return true;
        if (dict.ContainsKey(key.ToLowerInvariant())) return true;
        if (dict.ContainsKey(key.ToLower())) return true;

        return false;
    }

    public static bool TryGetValue<T>(Dictionary<string, T> dict, string key, out T value)
    {
        if (dict.TryGetValue(key, out value)) return true;
        if (dict.TryGetValue(key.ToLowerInvariant(), out value)) return true;
        if (dict.TryGetValue(key.ToLower(), out value)) return true;

        return false;
    }

    public static bool HasSection(IMyTerminalBlock block, string key)
    {
        if (MyIni.HasSection(block.CustomData, key)) return true;
        if (MyIni.HasSection(block.CustomData, key.ToLowerInvariant())) return true;
        if (MyIni.HasSection(block.CustomData, key.ToLower())) return true;

        return false;
    }
}"
H8J8ZC0s,C++ MultiThreading TicTakToe,Nickanick12,C++,Saturday 15th of July 2023 08:38:30 PM CDT,"///////////////////////////////////////////////////////////////////////////////////
// TODO:: #include any needed files
///////////////////////////////////////////////////////////////////////////////////
#include <stdio.h>
#include <iostream>
#include <random>
#include <chrono>
#include <thread>
#include <mutex>
#include <cstdarg>

// Include file and line numbers for memory leak detection for visual studio in debug mode
#if defined _MSC_VER && defined _DEBUG
	#include <crtdbg.h>
	#define new new(_NORMAL_BLOCK, __FILE__, __LINE__)
	#define ENABLE_LEAK_DETECTION() _CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF)
#else
	#define ENABLE_LEAK_DETECTION()
#endif

class UniformRandInt
{
public:
	void Init(int min, int max)
	{
		// Seed our random number generator with a non-deterministic random value. If no such capabilities exist then
		//   the number will be pulled from a pseudo random number generator.
		randEngine.seed(randDevice());

		// We want to generate values in the range of [min, max] (inclusive) with a uniform distribution.
		distro = std::uniform_int_distribution<int>(min, max);
	}

	int operator()()
	{
		return distro(randEngine);
	}

private:
	std::random_device randDevice;
	std::mt19937 randEngine;
	std::uniform_int_distribution<int> distro;
	std::mutex randMutex;
};

///////////////////////////////////////////////////////////////////////////////////
// The various states the game can be in
///////////////////////////////////////////////////////////////////////////////////
enum class GameState
{
	StillPlaying,
	Won,
	Draw
};

///////////////////////////////////////////////////////////////////////////////////
// The player types
///////////////////////////////////////////////////////////////////////////////////
enum class PlayerType
{
	None,
	X,
	O
};

///////////////////////////////////////////////////////////////////////////////////
// Various types of operations that can be performed on our synchronization object
//   via LogSync.
///////////////////////////////////////////////////////////////////////////////////
enum class LogSyncOperation
{
	 // Create and initialize resources
	Init,
	// Release all resources and cleanup
	Release,
	// Lock the synchronization object
	Lock,
	// Unlock the synchronization object
	Unlock
};

///////////////////////////////////////////////////////////////////////////////////
// Contains all game related data
///////////////////////////////////////////////////////////////////////////////////
struct Game
{
	// Number of players that are currently playing in this game
	int playerCount;
	// ID of the game
	int gameNumber;
	// Determines which player is currently playing
	PlayerType currentTurn;
	// The current state of the board. It will always be StillPlaying until the game's complete.
	GameState currentGameState;
	// Thread ID of the X player or -1 if X player doesn't exist for this game
	int playerX;
	// Thread ID of the O player or -1 if O player doesn't exist for this game
	int playerO;
	// Mutex to access playerCount in a thread safe manner.
	std::mutex playerCountMutex;
	// Primary mutex that controls the game play. The player that has this mutex locked
	//  will be playing, while the other player will be waiting on the gameCondition.
	std::mutex gameMutex;
	// Primary conditional that controls the game play
	std::condition_variable gameCondition;
	// Unique lock which will be constructed with the gameMutex. This will ONLY be valid in
	//  the PlayGame function.
	std::unique_lock<std::mutex> *gameUniqueLock;
	// A 3x3 array of PlayerTypes that represents the game board. Each entry will represent
	//  which player currently owns that spot or 'None' if the spot is not taken.
	PlayerType gameBoard[3][3];
};

///////////////////////////////////////////////////////////////////////////////////
// Contains all player related data
///////////////////////////////////////////////////////////////////////////////////
struct Player
{
	// ID of the player
	int id;
	// Number of games this player has played
	int gamesPlayed;
	// Number of games this player won
	int winCount;
	// Number of games this player lost
	int loseCount;
	// Number of games this player tied
	int drawCount;
	// Type of player this player represents
	PlayerType type;
	// Pointer to the pool of games. See GamePool for more details.
	struct GamePool *gamePool;
	// Pointer to the pool of players. See PlayerPool for more details.
	struct PlayerPool *playerPool;
	// random number generator for this thread
	UniformRandInt myRand;
};

///////////////////////////////////////////////////////////////////////////////////
// Holds all of the games
///////////////////////////////////////////////////////////////////////////////////
struct GamePool
{ 
	// An array of game specific data with exactly one entry for each game. See Game for more details.
	Game *perGameData;
	// Total number of games and the number of entries in perGameData
	int totalGameCount;
};

///////////////////////////////////////////////////////////////////////////////////
// This structure is provided to store data for keeping track of the total number
//   of player threads in a thread-safe manner and implementing the starting gun
//   logic.
///////////////////////////////////////////////////////////////////////////////////
struct PlayerPool
{ 
	///////////////////////////////////////////////////////////////////////////////////
	// TODO:: You will need to add variables here to keep track of the total number of
	//   player threads in a thread-safe manner and implement the starting gun logic.
	///////////////////////////////////////////////////////////////////////////////////
	
	// Mutex to access playerCount in a thread safe manner
	std::mutex playerCountMutex;
	// Condition variable that will be signaled when the number of players changes
	std::condition_variable playerCountConditionVariable;
	// Mutex to access startingGun in a thread safe manner
	std::mutex startingGunMutex;
	// Condition variable that will be signaled when the starting gun is ready
	std::condition_variable startingGunConditionVariable;
	
	// Total number of players and the number of entries in perPlayerData
	int totalPlayerCount;
	// Number of players currently running
	int count; 
	// Bool demonstrating that players are ready.
	bool playersAreReady;
	// Total number of players that are ready.
	int readyPlayerCount;
};

///////////////////////////////////////////////////////////////////////////////////
// Prompts the user to press enter and waits for user input
///////////////////////////////////////////////////////////////////////////////////
void Pause()
{
	printf(""Press Enter to continue\n"");
	(void)getchar();
}

///////////////////////////////////////////////////////////////////////////////////
// Controls all access to the lockable object (mutex) used for synchronizing output.
//
// Arguments:
//   operationToperform - Operation we'll be performing on the lockable object.
// 
// Note: 
//   This function will primarily be used in your synchronized print function (Log),
//   but in some cases you may need to use it to print several strings while
//   still preventing other threads from printing until you're done.
//
// Example:
//   The following will print ""Hi!"" as three separate prints, but because we
//   locked our printing object no other threads will be able to interrupt us
//   until we've invoked the Unlock operation.
//
//       LogSync(LogSyncOperation::Lock);
//       printf(""H"");
//       printf(""i"");
//       printf(""!"");
//       LogSync(LogSyncOperation::Unlock);
///////////////////////////////////////////////////////////////////////////////////
void LogSync(LogSyncOperation operationToPerform)
{
	///////////////////////////////////////////////////////////////////////////////////
	// TODO:: Implement 'LogSync' logic. Init and Release may or may not be required
	//   depending on your implementation. 
	//
	//  NOTE: For this function you MAY use static to create your mutex
	///////////////////////////////////////////////////////////////////////////////////

	static std::mutex logMutex;

	switch (operationToPerform)
		switch (operationToPerform)
		{
		case LogSyncOperation::Init:
			// Initialize the mutex if required
			break;
		case LogSyncOperation::Release:
			// Release the mutex if required
			break;
		case LogSyncOperation::Lock:
			// Lock the mutex
			logMutex.lock();
			break;
		case LogSyncOperation::Unlock:
			// Unlock the mutex
			logMutex.unlock();
			break;
		}
}

///////////////////////////////////////////////////////////////////////////////////
// Prints a formatted string to the standard output in a thread safe manner. 
//
// Arguments:
//   format - Format of string to print.
//   ... - Additional arguments. See documentation for printf().
//
// Note: 
//   Do not modify the signature of this function. The ellipsis '...' is valid
//   syntax, which allows for an unspecified amount of arguments to be passed when
//   calling this function. You will need to extract these arguments into a
//   va_list to be able to do anything with them. 
//
//   After you have the list of arguments in the va_list then you can use vprintf 
//   to print the original formatted string exactly like printf would. 
//   You will probably need to look up vprintf (just google c++ vprintf) but when you do you 
//   should find some simple examples of how to call it using the va_list.
//
//   Just keep in mind the whole purpose of intercepting the printf: We want to make 
//   it so one and only one thread will be able to print at a time. The need for this will be made
//   more clear when printing the game board, which is done one tile at a time.
//
// Returns: 
//   Result of vprintf
///////////////////////////////////////////////////////////////////////////////////
int Log(const char *format, ...)
{
	int result = 0;

	///////////////////////////////////////////////////////////////////////////////////
	// TODO:: Implement 'Log' logic. This function should behave exactly like printf,
	//   but all console output will be synchronized via LogSync.
	///////////////////////////////////////////////////////////////////////////////////
	va_list args;
	va_start(args, format);

	LogSync(LogSyncOperation::Lock);

	// The output operation is now protected by the mutex, because LogSync(LogSyncOperation::Lock) locks it.
	result = vprintf(format, args);

	// Now we can unlock the mutex
	LogSync(LogSyncOperation::Unlock);

	va_end(args);

	return result;
}

///////////////////////////////////////////////////////////////////////////////////
// Prints the current game board to the console
//
// Arguments:
//   currentGame - Pointer to the game that is being joined
///////////////////////////////////////////////////////////////////////////////////
void PrintGameBoard(const Game *currentGame)
{
	///////////////////////////////////////////////////////////////////////////////////
	// TODO:: Print the game board to the screen as a single block of text without 
	//   interruption from other threads that are attempting to print. Any other thread
	//   that attempts to print must block until the entire game board has been printed.
	//   Do not use Log in this function, use printf.
	//
	// This portion of the lab requires you to write the LogSync and Log functions. Get
	//   your threads running and shutting down before attempting these functions.
	///////////////////////////////////////////////////////////////////////////////////
	
	LogSync(LogSyncOperation::Lock);  // Lock the synchronization mechanism

	for (int row = 0; row < 3; row++)
	{
		for(int col = 0; col < 3; col++)
		{
			if (currentGame->gameBoard[row][col] == PlayerType::None)
			{
				printf(""[ ]"");
			}
			else
			{
				printf(""[%c]"", (currentGame->gameBoard[row][col] == PlayerType::X) ? 'X' : 'O');
			}
			std::this_thread::yield();
		}
		printf(""\n"");
	}

	LogSync(LogSyncOperation::Unlock);  // Unlock the synchronization mechanism
}

///////////////////////////////////////////////////////////////////////////////////
// Determines if the player made a winning move on the game board
//
// Arguments:
//   row - The row 'player' picked to play at
//   col - The column 'player' picked to play at
//   game - Pointer to the game being checked
//   player - Pointer to the player that made the move
//
// Return:
//   True if player won, otherwise false
///////////////////////////////////////////////////////////////////////////////////
bool DidWeWin(int row, int col, const Game *game, const Player *player)
{
	bool completeRow = true;
	bool completeCol = true;
	bool completeDiagonalA = true;
	bool completeDiagonalB = true;

	// Check specified row, column, and both diagonals to see if this player made
	//  a winning move.
	for (int i = 0; i < 3; i++)
	{
		if(game->gameBoard[row][i] != player->type)
			completeRow = false;
		if(game->gameBoard[i][col] != player->type)
			completeCol = false;
		if(game->gameBoard[i][i] != player->type)
			completeDiagonalA = false;
		if(game->gameBoard[2 - i][i] != player->type)
			completeDiagonalB = false;
	}

	return completeRow || completeCol || completeDiagonalA || completeDiagonalB;
}

///////////////////////////////////////////////////////////////////////////////////
// Play the entire game of Tic-Tac-Toe as 'currentPlayer' in 'currentGame'
//
// Arguments:
//   currentPlayer - Pointer to the player that is trying to play each game
//   currentGame - Pointer to the game that is being joined
//
// Note:
//   6. Pick a spot on the board to play
//   7. IF The game is over: wake up the other player so it can play and return.
//   7. IF The game isn't over: wake up the other player and go to sleep. Next player starts at #6
//
//  gameUniqueLock is the primary synchronization object 
///////////////////////////////////////////////////////////////////////////////////
GameState MakeAMove(Player *currentPlayer, Game *currentGame)
{
	int possibleMoves[9];
	int totalPossibleMoves = 0;

	// Find all valid moves this player can make
	for (int row = 0; row < 3; row++)
	{
		for(int col = 0; col < 3; col++)
		{
			if (currentGame->gameBoard[row][col] == PlayerType::None)
			{
				possibleMoves[totalPossibleMoves++] = (row * 3) + col;
			}
		}
	}

	if (totalPossibleMoves != 0) 
	{ 
		// There are valid moves left on the board, pick a random valid location
		int randomMoveIndex = currentPlayer->myRand() % totalPossibleMoves;

		int row = possibleMoves[randomMoveIndex] / 3;
		int col = possibleMoves[randomMoveIndex] % 3;
		currentGame->gameBoard[row][col] = currentPlayer->type;

		printf(""Game %d: Player %d: Picked [Row: %d, Col: %d]\n"", currentGame->gameNumber, currentPlayer->id, row,  col);

		if (DidWeWin(row, col, currentGame, currentPlayer)) 
		{ 
			printf(""Game %d:Player %d - Won\n"", currentGame->gameNumber, currentPlayer->id);
			currentPlayer->winCount++;

			return GameState::Won;
		}
		else 
		{ 
			return GameState::StillPlaying;
		}
	}

	// There are no more moves left, game resulted in a draw.
	printf(""Game %d:Player %d - Draw\n"", currentGame->gameNumber, currentPlayer->id);
	currentPlayer->drawCount++;

	return GameState::Draw;
}

///////////////////////////////////////////////////////////////////////////////////
// Play the entire game of Tic-Tac-Toe as 'currentPlayer' in 'currentGame'
//
// Arguments:
//   currentPlayer - Pointer to the player that is trying to play each game
//   currentGame - Pointer to the game that is being joined
//
// Note:
//   6. Pick a spot on the board to play
//   7. IF The game is over: wake up the other player so it can play and return.
//   7. IF The game isn't over: wake up the other player and go to sleep. Next player starts at #6
//
//  gameUniqueLock is the primary synchronization object 
///////////////////////////////////////////////////////////////////////////////////
void PlayGame(Player *currentPlayer, Game *currentGame)
{
	printf(""Game %d:Player %d vs Player %d (Player %d) starting\n"", currentGame->gameNumber, currentGame->playerX, currentGame->playerO, currentPlayer->id);

	if(currentGame->playerO == -1 || currentGame->playerX == -1)
	{
		printf(""ERROR: Playing game with only one player present. Did you forget to wait for the second player in JoinGame()?\n"");
		Pause();
		exit(1);
	}

	while (currentGame->currentGameState == GameState::StillPlaying) 
	{ 
		if (currentGame->currentTurn != currentPlayer->type) 
		{
			printf(""ERROR: Wrong player is playing. You broke it.\n"");
			Pause();
			exit(1);
		}

		currentGame->currentTurn = (currentPlayer->type == PlayerType::X) ? PlayerType::O : PlayerType::X;

		// Make a move on the game board. The result of this function will determine the current state of the board.
		currentGame->currentGameState = MakeAMove(currentPlayer, currentGame);
		PrintGameBoard(currentGame);

		switch (currentGame->currentGameState)
		{
			case GameState::StillPlaying:
				///////////////////////////////////////////////////////////////////////////////////
				// TODO:: The game is not over yet. We need to notify the other player that it's
				//   their turn and then we must wait until they tell us it's our turn.
				///////////////////////////////////////////////////////////////////////////////////
				currentGame->gameCondition.notify_one(); // Notify the other player
				currentGame->gameCondition.wait(*currentGame->gameUniqueLock,
				[&]() { return currentGame->currentTurn == currentPlayer->type; }); // Wait for our turn
				continue;
			case GameState::Won:
				///////////////////////////////////////////////////////////////////////////////////
				// TODO:: We have won the game, we must wake up the other player so they can break
				//   out of the PlayGame function.
				///////////////////////////////////////////////////////////////////////////////////
				currentGame->gameCondition.notify_one(); // Notify the other player
				return;
			case GameState::Draw:
				///////////////////////////////////////////////////////////////////////////////////
				// TODO:: The game ended in a tie, we must wake up the other player so they can break
				//   out of the PlayGame function
				///////////////////////////////////////////////////////////////////////////////////
				currentGame->gameCondition.notify_one(); // Notify the other player
				return;
		}
	}

	// Only one player will execute this logic. The winning/Tied player will exit this function
	//   upon finding out the game is over.
	if (currentGame->currentGameState == GameState::Won) 
	{ 
		printf(""Game %d:Player %d - Lost\n"", currentGame->gameNumber, currentPlayer->id);
		(currentPlayer->loseCount)++;
	}
	else if(currentGame->currentGameState == GameState::Draw) 
	{ 
		printf(""Game %d:Player %d - Draw\n"", currentGame->gameNumber, currentPlayer->id);
		(currentPlayer->drawCount)++; // count draw
	}
}

///////////////////////////////////////////////////////////////////////////////////
// Makes 'currentPlayer' join 'currentGame' and either waits for another player to
//  join or begins playing the game if both players are now present.
//
// Arguments:
//   currentPlayer - Pointer to the player that is trying to play each game
//   currentGame - Pointer to the game that is being joined
//
// Note:
//   1. Player 1 joins the game and is assigned 'O'
//   2. Player 1 Waits for player 2 to join the game.
//   3. Player 2 joins the game and is assigned 'X'
//   4. Player 2 starts playing the game
//   5. PlayGame();
///////////////////////////////////////////////////////////////////////////////////
void JoinGame(Player *currentPlayer, Game *currentGame)
{
	// The player thread has joined a game and will begin playing it now.
	std::unique_lock<std::mutex> gameUniqueLock(currentGame->gameMutex);
	currentGame->gameUniqueLock = &gameUniqueLock;

	if (currentGame->playerO == -1)
	{
		printf(""Player %d joining game %d as 'O'\n"", currentPlayer->id, currentGame->gameNumber);

		currentGame->playerO = currentPlayer->id;
		currentPlayer->type = PlayerType::O;

		///////////////////////////////////////////////////////////////////////////////////
		// TODO:: We're the only player in the game right now so we need to wait for the 
		//   other player to join the game and play it's turn.
		///////////////////////////////////////////////////////////////////////////////////
		
		// Wait for the second player to join the game or for the game to reset
		currentGame->gameCondition.wait(gameUniqueLock,
			[&]() { return currentGame->playerCount == 2; });
	}
	else 
	{
		printf(""Player %d joining game %d as 'X'\n"", currentPlayer->id, currentGame->gameNumber);

		currentGame->playerX = currentPlayer->id;
		currentPlayer->type = PlayerType::X;

		// Notify playerO that playerX has joined the game
		currentGame->gameCondition.notify_one();
	}

	PlayGame(currentPlayer, currentGame);
	currentGame->gameUniqueLock = nullptr;
	currentPlayer->gamesPlayed++;
	gameUniqueLock.unlock();
}

///////////////////////////////////////////////////////////////////////////////////
// Makes the specified player try to sequentially join and play each game in the
//   pool of games.
//
// Arguments:
//   currentPlayer - Pointer to the player that is trying to play each game
///////////////////////////////////////////////////////////////////////////////////
void TryToPlayEachGame(Player *currentPlayer)
{
	printf(""Player %d starting to play games...\n"", currentPlayer->id);

	Game *listOfGames = currentPlayer->gamePool->perGameData;
	int totalGameCount = currentPlayer->gamePool->totalGameCount;

	// All of our player threads will be going through the pool of games looking for the any
	//   games that aren't full. The player will join and play any non-full games it finds while
	//   iterating through the list of games.
	for (int i = 0; i < totalGameCount; i++) 
	{
		// Check to see if we can join this game
		listOfGames[i].playerCountMutex.lock();
		if (listOfGames[i].playerCount == 2)
		{
			// Game is full, skip it
			listOfGames[i].playerCountMutex.unlock();
			continue;
		}

		// This game wasn't full so we will join it
		listOfGames[i].playerCount++;
		listOfGames[i].playerCountMutex.unlock();

		// We joined the game so we can start playing it
		JoinGame(currentPlayer, &listOfGames[i]);
	}
}

///////////////////////////////////////////////////////////////////////////////////
// Entry point for player threads. 
//
// Arguments:
//   currentPlayer - Pointer to a player struct that is unique to this thread
///////////////////////////////////////////////////////////////////////////////////
void PlayerThreadEntrypoint(Player* currentPlayer)
{
	printf(""Player %d waiting on starting gun\n"", currentPlayer->id);

	///////////////////////////////////////////////////////////////////////////////////
	// TODO:: Let main know there's one more player thread running then wait for a
	//   notification from main via the condition variable you created in the PlayerPool
	//   struct.
	//
	// Notes:
	//   * Please remember that to do a wait on a condition variable you will need a unique_lock
	//     that was constructed using a mutex corresponding to the condition variable you're using.
	//     For example, if you had a 'count', 'countMutex' and a 'countCondition' then there's a really
	//     good chance that all three variables will be used to control access to the 'count'. If we
	//     wanted to wait for a change on 'count', we would probably wait using 'countCondition' and a
	//     unique_lock that was constructed using 'countMutex'.
	//   * Please note that it's very easy to create a 'hole' in the synchronization and miss
	//     the signal from main. If you find that a few of your threads are stuck on the wait in this
	//     section of code then you probably have a hole in your synchronization here. If this happens
	//     then you probably let main 'fire' the gun (via notify) before you were waiting on it.
	//
	///////////////////////////////////////////////////////////////////////////////////


	// Let main know there's one more player thread running
	{
		std::unique_lock<std::mutex> lock(currentPlayer->playerPool->playerCountMutex);
		currentPlayer->playerPool->count++;
		currentPlayer->playerPool->playerCountConditionVariable.notify_all();
	}

	// Wait for all players to be ready
	{
		std::unique_lock<std::mutex> lock(currentPlayer->playerPool->playerCountMutex);
		currentPlayer->playerPool->playerCountConditionVariable.wait(lock, [&]() {
			return currentPlayer->playerPool->count == currentPlayer->playerPool->totalPlayerCount;
			});
	}

	// Barrier point: All players are ready, continue together

	// Let main know there's one less player thread running
	{
		std::unique_lock<std::mutex> lock(currentPlayer->playerPool->playerCountMutex);
		currentPlayer->playerPool->count--;
		currentPlayer->playerPool->playerCountConditionVariable.notify_all();
	}

	// Wait for all players to reach this point
	{
		std::unique_lock<std::mutex> lock(currentPlayer->playerPool->startingGunMutex);
		currentPlayer->playerPool->readyPlayerCount++;
		currentPlayer->playerPool->startingGunConditionVariable.wait(lock, [&]() {
			return currentPlayer->playerPool->readyPlayerCount == currentPlayer->playerPool->totalPlayerCount &&
				currentPlayer->playerPool->playersAreReady;
			});
	}

	// All players have reached this point, continue together

	// Attempt to play each game, all of the game logic will occur in this function
	printf(""Player %d running\n"", currentPlayer->id);
	TryToPlayEachGame(currentPlayer);

	// Barrier point: Wait for all players to finish playing games
	{
		std::unique_lock<std::mutex> lock(currentPlayer->playerPool->playerCountMutex);
		currentPlayer->playerPool->readyPlayerCount--;
		currentPlayer->playerPool->playerCountConditionVariable.notify_all();
	}

	// Wait for all players to finish playing games
	{
		std::unique_lock<std::mutex> lock(currentPlayer->playerPool->playerCountMutex);
		currentPlayer->playerPool->playerCountConditionVariable.wait(lock, [&]() {
			return currentPlayer->playerPool->readyPlayerCount == 0;
			});
	}

	// All players have reached this point, continue together
}


///////////////////////////////////////////////////////////////////////////////////
// Displays the results of all players and all games to the console.
//
// Arguments:
//   perPlayerData - An array of player structs; one entry for each player.
//   totalPlayerCount - Total number of players
//   perGameData - An array of game data; one entry for each game.
//   gameCount - Total number of games
///////////////////////////////////////////////////////////////////////////////////
void PrintResults(const Player *perPlayerData, int totalPlayerCount, const Game *perGameData, int totalGameCount)
{
	int totalGamesWon = 0;
	int totalGamesTied = 0;
	int totalPlayerWins = 0;
	int totalPlayerLoses = 0;
	int totalPlayerTies = 0;

	printf(""********* Player Results **********\n"");
	for (int i = 0; i < totalPlayerCount; i++) 
	{
		printf(""Player %d, Played %d game(s), Won %d, Lost %d, Draw %d\n"",
			perPlayerData[i].id,
			perPlayerData[i].gamesPlayed,
			perPlayerData[i].winCount,
			perPlayerData[i].loseCount,
			perPlayerData[i].drawCount
		); 

		totalPlayerWins += perPlayerData[i].winCount;
		totalPlayerLoses += perPlayerData[i].loseCount;
		totalPlayerTies += perPlayerData[i].drawCount;
	}

	printf(""Total Players %d, Wins %d, Losses %d, Draws %d\n\n\n"", totalPlayerCount, totalPlayerWins, totalPlayerLoses, (totalPlayerTies / 2));

	printf(""********* Game Results **********\n"");
	for (int i = 0; i < totalGameCount; i++)
	{
		printf(""Game %d - 'X' player %d, 'O' player %d, game result %s\n"", 
			perGameData[i].gameNumber,
			perGameData[i].playerX,
			perGameData[i].playerO,
			((perGameData[i].currentGameState == GameState::Won) ? ""Won"" : ""Draw"")
		);

		if (perGameData[i].currentGameState == GameState::Won)
		{
			totalGamesWon++;
		}
		else
		{
			totalGamesTied++;
		}
	}
	printf(""Total Games = %d, %d Games Won, %d Games were a Draw\n\n\n"", totalGameCount, totalGamesWon, totalGamesTied);
}

int main(int argc, char **argv)
{
	ENABLE_LEAK_DETECTION();


	// Total number of games we're going to be playing.
	int totalGameCount;	
	// Total number of players that will be playing.
	int totalPlayerCount;
	// An array of player specific data with exactly one entry for each player. See Player for more details.
	Player *perPlayerData;
	// Contains all data needed to keep track of players. See PlayerPool for more details.
	PlayerPool poolOfPlayers;
	// An array of game specific data with exactly one entry for each game. See Game for more details.
	Game *perGameData;
	// Contains all of the games. See GamePool for more details.
	GamePool poolOfGames; 

	if (argc != 3)
	{
		fprintf(stderr, ""Usage: TicTacToe gameCount playerCount\n\n"");
		fprintf(stderr, ""Arguments:\n"");
		fprintf(stderr, ""    gameCount                    Number of games.                              \n"");
		fprintf(stderr, ""    playerCount                  Number of players.                            \n"");
		Pause();
		return 1;
	}
	totalGameCount = atoi(argv[1]);
	totalPlayerCount = atoi(argv[2]);

	if(totalGameCount < 0 || totalPlayerCount < 0)
	{
		fprintf(stderr, ""Error: All arguments must be positive integer values.\n"");
		Pause();
		return 1;
	}

	if(totalPlayerCount < 2)
	{
		fprintf(stderr, ""Error: Requires at least two players.\n"");
		Pause();
		return 1;
	}

	printf(""%s starting %d player(s) for %d game(s)\n"", argv[0], totalPlayerCount, totalGameCount);

	// Allocate and array of players
	perPlayerData = new Player[totalPlayerCount];

	// Allocate array of games
	perGameData = new Game[totalGameCount];

	// Initialize pool of games
	poolOfGames.perGameData = perGameData;
	poolOfGames.totalGameCount = totalGameCount;

	///////////////////////////////////////////////////////////////////////////////////
	// TODO:: Initialize your data in the pool of players
	///////////////////////////////////////////////////////////////////////////////////
	

    poolOfPlayers.totalPlayerCount = totalPlayerCount;

    poolOfPlayers.count = 0;

    poolOfPlayers.playersAreReady = false;

    poolOfPlayers.readyPlayerCount = 0;

	// Initialize each game
	for (int i = 0; i < totalGameCount; i++) 
	{
		perGameData[i].playerO = -1;
		perGameData[i].playerX = -1;
		perGameData[i].gameNumber = i + 1;
		perGameData[i].currentTurn = PlayerType::X;
		perGameData[i].currentGameState = GameState::StillPlaying;
		perGameData[i].playerCount = 0;
		memset(perGameData[i].gameBoard, 0, sizeof(perGameData[i].gameBoard));
	}

	// Initialize each player
	for (int i = 0; i < totalPlayerCount; i++) 
	{
		perPlayerData[i].id = i;
		perPlayerData[i].drawCount = 0;
		perPlayerData[i].gamesPlayed = 0;
		perPlayerData[i].loseCount = 0;
		perPlayerData[i].winCount = 0;
		perPlayerData[i].gamePool = &poolOfGames;
		perPlayerData[i].playerPool = &poolOfPlayers;
		perPlayerData[i].type = PlayerType::None;
		perPlayerData[i].myRand.Init(0, INT_MAX);
	}

	///////////////////////////////////////////////////////////////////////////////////
	// TODO:: Start the player threads. The player threads should begin executing in
	//   the PlayerThreadEntrypoint function. Make sure to detach the threads.
	///////////////////////////////////////////////////////////////////////////////////

	std::vector<std::thread> playerThreads;
	for (int i = 0; i < totalPlayerCount; i++)
	{
		playerThreads.push_back(std::thread(PlayerThreadEntrypoint, &perPlayerData[i]));
	}

	// Detach the threads
	for (auto& thread : playerThreads)
	{
		thread.detach();
	}

	///////////////////////////////////////////////////////////////////////////////////
	// TODO:: Wait for all players to be ready 
	///////////////////////////////////////////////////////////////////////////////////

	{
		std::unique_lock<std::mutex> lock(poolOfPlayers.playerCountMutex);
		poolOfPlayers.playerCountConditionVariable.wait
		(lock, [&]() { return poolOfPlayers.count == totalPlayerCount; });
	}

	///////////////////////////////////////////////////////////////////////////////////
	// TODO:: Notify all waiting threads that they can start playing.
	///////////////////////////////////////////////////////////////////////////////////

	{
		std::unique_lock<std::mutex> lock(poolOfPlayers.startingGunMutex);
		poolOfPlayers.playersAreReady = true;
		poolOfPlayers.startingGunConditionVariable.notify_all();
	}

	///////////////////////////////////////////////////////////////////////////////////
	// TODO:: Wait for all detached player threads to complete.
	///////////////////////////////////////////////////////////////////////////////////

	{
		std::unique_lock<std::mutex> lock(poolOfPlayers.playerCountMutex);
		poolOfPlayers.playerCountConditionVariable.wait(lock, [&]() { return poolOfPlayers.count == 0; });
	}

	PrintResults(perPlayerData, totalPlayerCount, perGameData, totalGameCount);

	///////////////////////////////////////////////////////////////////////////////////
	// TODO:: Cleanup
	///////////////////////////////////////////////////////////////////////////////////

	delete[] perPlayerData;
	delete[] perGameData;


	Pause();
	return 0;
}
"
sw0him41,2023-07-15_stats.json,rdp_snitch,JSON,Saturday 15th of July 2023 07:18:20 PM CDT,"{
  ""ip"": {
    ""112.121.167.186"": 273,
    ""159.65.219.36"": 18,
    ""192.99.110.148"": 18,
    ""62.233.50.135"": 12,
    ""172.104.168.248"": 6,
    ""178.79.185.221"": 3,
    ""157.230.36.177"": 6,
    ""209.146.28.26"": 3,
    ""31.43.185.32"": 15,
    ""39.108.174.140"": 24,
    ""185.170.144.3"": 6,
    ""79.124.62.106"": 6,
    ""60.250.29.35"": 48,
    ""101.50.104.162"": 96,
    ""87.251.75.120"": 3,
    ""143.42.78.210"": 3,
    ""172.232.20.70"": 3,
    ""139.162.167.16"": 3,
    ""103.180.137.168"": 3,
    ""172.233.208.215"": 3,
    ""87.251.75.64"": 3,
    ""114.217.18.245"": 6,
    ""120.46.34.131"": 6,
    ""194.26.135.176"": 9,
    ""213.6.148.83"": 3,
    ""106.116.169.71"": 3,
    ""51.75.160.42"": 6,
    ""164.92.158.134"": 3,
    ""74.124.24.238"": 3,
    ""198.235.24.120"": 9,
    ""45.119.81.119"": 6,
    ""114.55.227.74"": 3,
    ""121.138.145.136"": 6,
    ""191.101.174.156"": 3,
    ""162.142.125.14"": 3,
    ""62.122.184.166"": 12,
    ""62.122.184.168"": 12,
    ""165.154.128.221"": 3,
    ""205.210.31.215"": 9,
    ""167.172.76.60"": 3,
    ""152.89.198.133"": 6,
    ""62.122.184.165"": 6,
    ""167.248.133.36"": 3
  },
  ""asn"": {
    ""AS45753"": 273,
    ""AS14061"": 30,
    ""AS16276"": 24,
    ""AS57523"": 57,
    ""AS63949"": 21,
    ""AS135607"": 3,
    ""AS211736"": 15,
    ""AS37963"": 27,
    ""AS48080"": 6,
    ""AS207812"": 6,
    ""AS3462"": 48,
    ""AS23674"": 96,
    ""AS208091"": 6,
    ""AS149077"": 3,
    ""AS4134"": 9,
    ""AS55990"": 6,
    ""AS12975"": 3,
    ""AS13354"": 3,
    ""AS396982"": 18,
    ""AS131386"": 6,
    ""AS4766"": 6,
    ""AS32780"": 3,
    ""AS398324"": 3,
    ""AS135377"": 3,
    ""AS398722"": 3
  },
  ""isp"": {
    ""Netsec Limited"": 273,
    ""DigitalOcean, LLC"": 30,
    ""OVH SAS"": 24,
    ""Chang Way Technologies Co. Limited"": 57,
    ""Akamai Technologies"": 6,
    ""Linode"": 3,
    ""Cogent Communications"": 3,
    ""FOP Dmytro Nedilskyi"": 15,
    ""Hangzhou Alibaba Advertising Co"": 27,
    ""Dmitriy Panchenko"": 6,
    ""DM AUTO EOOD"": 6,
    ""Chunghwa Telecom Co., Ltd."": 48,
    ""Nayatel (Pvt) Ltd"": 96,
    ""XHOST-INTERNET-SOLUTIONS"": 6,
    ""Akamai Technologies, Inc."": 9,
    ""Yen Viet Tourist Company Limited"": 3,
    ""Akamai International B.V."": 3,
    ""Chinanet"": 9,
    ""Huawei Cloud Service data center"": 6,
    ""Palestine Telecommunications Company"": 3,
    ""zColo"": 3,
    ""Google LLC"": 18,
    ""Long Van System Solution"": 6,
    ""Korea Telecom"": 6,
    ""Hosting Services"": 3,
    ""Censys, Inc."": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3
  },
  ""org"": {
    ""Simcentric Solutions Limited."": 273,
    ""Digital Ocean"": 18,
    ""AVAST Software"": 18,
    ""Sierra LLC"": 12,
    ""Linode"": 9,
    ""Linode, LLC"": 6,
    ""DigitalOcean, LLC"": 12,
    ""IPS, Inc"": 3,
    ""FOP Dmytro Nedilskyi"": 15,
    ""Aliyun Computing Co., LTD"": 27,
    ""Xhostis"": 6,
    ""Internet Solutions & Innovations LTD"": 6,
    ""Chunghwa Telecom Co. Ltd."": 48,
    ""Nayatel"": 96,
    ""Xhost Internet Solutions"": 6,
    ""Akamai Technologies, Inc."": 6,
    ""Yen Viet Tourist Company Limited"": 3,
    ""Chinanet JS"": 6,
    ""Huawei Cloud Service"": 6,
    ""Chang Way Technologies Co. Limited"": 39,
    ""Palestine Telecommunications Company"": 3,
    ""Chinanet HE"": 3,
    ""OVH Ltd"": 6,
    ""zColo"": 3,
    ""Palo Alto Networks, Inc"": 18,
    ""Unknown"": 6,
    ""Kornet"": 6,
    ""Ipxo"": 3,
    ""Censys Inc"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Starcrecium Limited"": 6,
    ""Censys, Inc."": 3
  },
  ""regionName"": {
    ""Sai Kung District"": 273,
    ""New Jersey"": 21,
    ""Quebec"": 18,
    ""Moscow"": 63,
    ""North West"": 9,
    ""England"": 12,
    ""South West"": 9,
    ""Metro Manila"": 3,
    ""Kyiv City"": 15,
    ""Guangdong"": 24,
    ""English River"": 6,
    ""Taipei City"": 48,
    ""Khyber Pakhtunkhwa"": 96,
    ""North Holland"": 9,
    ""Illinois"": 6,
    ""Hesse"": 3,
    ""Tinh Binh Duong"": 3,
    ""Jiangsu"": 6,
    ""Beijing"": 6,
    ""Rafah"": 3,
    ""Hebei"": 3,
    ""Texas"": 3,
    ""California"": 18,
    ""Ho Chi Minh"": 6,
    ""Zhejiang"": 3,
    ""Gyeonggi-do"": 6,
    ""Michigan"": 6
  },
  ""country"": {
    ""Hong Kong"": 273,
    ""United States"": 54,
    ""Canada"": 18,
    ""Russia"": 63,
    ""Singapore"": 18,
    ""United Kingdom"": 12,
    ""Philippines"": 3,
    ""Ukraine"": 15,
    ""China"": 42,
    ""Seychelles"": 6,
    ""Taiwan"": 48,
    ""Pakistan"": 96,
    ""Netherlands"": 9,
    ""Germany"": 3,
    ""Vietnam"": 9,
    ""Palestine"": 3,
    ""South Korea"": 6
  },
  ""account"": {
    ""hello"": 540,
    ""Test"": 18,
    ""beio"": 3,
    ""Administr"": 42,
    ""(empty)"": 12,
    ""PfIvLrQpi"": 3,
    ""FTebQz"": 3,
    ""IcKXpp"": 3,
    ""Domain"": 42,
    ""nmap"": 3,
    ""yWNYiUAFu"": 3,
    ""dPXtmu"": 3,
    ""ALmcLr"": 3
  },
  ""keyboard"": {
    ""Unknown"": 678
  },
  ""client_build"": {
    ""Unknown"": 678
  },
  ""client_name"": {
    ""Unknown"": 678
  },
  ""ip_type"": {
    ""hosting"": 387,
    ""hosting & proxy"": 27,
    ""proxy"": 18,
    ""Unknown"": 246
  }
}"
4PqcP4mU,2023-07-15_stats.json,rdp_snitch,JSON,Saturday 15th of July 2023 07:16:08 PM CDT,"{
  ""ip"": {
    ""112.121.167.186"": 182,
    ""159.65.219.36"": 12,
    ""192.99.110.148"": 12,
    ""62.233.50.135"": 8,
    ""172.104.168.248"": 4,
    ""178.79.185.221"": 2,
    ""157.230.36.177"": 4,
    ""209.146.28.26"": 2,
    ""31.43.185.32"": 10,
    ""39.108.174.140"": 16,
    ""185.170.144.3"": 4,
    ""79.124.62.106"": 4,
    ""60.250.29.35"": 32,
    ""101.50.104.162"": 64,
    ""87.251.75.120"": 2,
    ""143.42.78.210"": 2,
    ""172.232.20.70"": 2,
    ""139.162.167.16"": 2,
    ""103.180.137.168"": 2,
    ""172.233.208.215"": 2,
    ""87.251.75.64"": 2,
    ""114.217.18.245"": 4,
    ""120.46.34.131"": 4,
    ""194.26.135.176"": 6,
    ""213.6.148.83"": 2,
    ""106.116.169.71"": 2,
    ""51.75.160.42"": 4,
    ""164.92.158.134"": 2,
    ""74.124.24.238"": 2,
    ""198.235.24.120"": 6,
    ""45.119.81.119"": 4,
    ""114.55.227.74"": 2,
    ""121.138.145.136"": 4,
    ""191.101.174.156"": 2,
    ""162.142.125.14"": 2,
    ""62.122.184.166"": 8,
    ""62.122.184.168"": 8,
    ""165.154.128.221"": 2,
    ""205.210.31.215"": 6,
    ""167.172.76.60"": 2,
    ""152.89.198.133"": 4,
    ""62.122.184.165"": 4,
    ""167.248.133.36"": 2
  },
  ""asn"": {
    ""AS45753"": 182,
    ""AS14061"": 20,
    ""AS16276"": 16,
    ""AS57523"": 38,
    ""AS63949"": 14,
    ""AS135607"": 2,
    ""AS211736"": 10,
    ""AS37963"": 18,
    ""AS48080"": 4,
    ""AS207812"": 4,
    ""AS3462"": 32,
    ""AS23674"": 64,
    ""AS208091"": 4,
    ""AS149077"": 2,
    ""AS4134"": 6,
    ""AS55990"": 4,
    ""AS12975"": 2,
    ""AS13354"": 2,
    ""AS396982"": 12,
    ""AS131386"": 4,
    ""AS4766"": 4,
    ""AS32780"": 2,
    ""AS398324"": 2,
    ""AS135377"": 2,
    ""AS398722"": 2
  },
  ""isp"": {
    ""Netsec Limited"": 182,
    ""DigitalOcean, LLC"": 20,
    ""OVH SAS"": 16,
    ""Chang Way Technologies Co. Limited"": 38,
    ""Akamai Technologies"": 4,
    ""Linode"": 2,
    ""Cogent Communications"": 2,
    ""FOP Dmytro Nedilskyi"": 10,
    ""Hangzhou Alibaba Advertising Co"": 18,
    ""Dmitriy Panchenko"": 4,
    ""DM AUTO EOOD"": 4,
    ""Chunghwa Telecom Co., Ltd."": 32,
    ""Nayatel (Pvt) Ltd"": 64,
    ""XHOST-INTERNET-SOLUTIONS"": 4,
    ""Akamai Technologies, Inc."": 6,
    ""Yen Viet Tourist Company Limited"": 2,
    ""Akamai International B.V."": 2,
    ""Chinanet"": 6,
    ""Huawei Cloud Service data center"": 4,
    ""Palestine Telecommunications Company"": 2,
    ""zColo"": 2,
    ""Google LLC"": 12,
    ""Long Van System Solution"": 4,
    ""Korea Telecom"": 4,
    ""Hosting Services"": 2,
    ""Censys, Inc."": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2
  },
  ""org"": {
    ""Simcentric Solutions Limited."": 182,
    ""Digital Ocean"": 12,
    ""AVAST Software"": 12,
    ""Sierra LLC"": 8,
    ""Linode"": 6,
    ""Linode, LLC"": 4,
    ""DigitalOcean, LLC"": 8,
    ""IPS, Inc"": 2,
    ""FOP Dmytro Nedilskyi"": 10,
    ""Aliyun Computing Co., LTD"": 18,
    ""Xhostis"": 4,
    ""Internet Solutions & Innovations LTD"": 4,
    ""Chunghwa Telecom Co. Ltd."": 32,
    ""Nayatel"": 64,
    ""Xhost Internet Solutions"": 4,
    ""Akamai Technologies, Inc."": 4,
    ""Yen Viet Tourist Company Limited"": 2,
    ""Chinanet JS"": 4,
    ""Huawei Cloud Service"": 4,
    ""Chang Way Technologies Co. Limited"": 26,
    ""Palestine Telecommunications Company"": 2,
    ""Chinanet HE"": 2,
    ""OVH Ltd"": 4,
    ""zColo"": 2,
    ""Palo Alto Networks, Inc"": 12,
    ""Unknown"": 4,
    ""Kornet"": 4,
    ""Ipxo"": 2,
    ""Censys Inc"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Starcrecium Limited"": 4,
    ""Censys, Inc."": 2
  },
  ""regionName"": {
    ""Sai Kung District"": 182,
    ""New Jersey"": 14,
    ""Quebec"": 12,
    ""Moscow"": 42,
    ""North West"": 6,
    ""England"": 8,
    ""South West"": 6,
    ""Metro Manila"": 2,
    ""Kyiv City"": 10,
    ""Guangdong"": 16,
    ""English River"": 4,
    ""Taipei City"": 32,
    ""Khyber Pakhtunkhwa"": 64,
    ""North Holland"": 6,
    ""Illinois"": 4,
    ""Hesse"": 2,
    ""Tinh Binh Duong"": 2,
    ""Jiangsu"": 4,
    ""Beijing"": 4,
    ""Rafah"": 2,
    ""Hebei"": 2,
    ""Texas"": 2,
    ""California"": 12,
    ""Ho Chi Minh"": 4,
    ""Zhejiang"": 2,
    ""Gyeonggi-do"": 4,
    ""Michigan"": 4
  },
  ""country"": {
    ""Hong Kong"": 182,
    ""United States"": 36,
    ""Canada"": 12,
    ""Russia"": 42,
    ""Singapore"": 12,
    ""United Kingdom"": 8,
    ""Philippines"": 2,
    ""Ukraine"": 10,
    ""China"": 28,
    ""Seychelles"": 4,
    ""Taiwan"": 32,
    ""Pakistan"": 64,
    ""Netherlands"": 6,
    ""Germany"": 2,
    ""Vietnam"": 6,
    ""Palestine"": 2,
    ""South Korea"": 4
  },
  ""account"": {
    ""hello"": 360,
    ""Test"": 12,
    ""beio"": 2,
    ""Administr"": 28,
    ""(empty)"": 8,
    ""PfIvLrQpi"": 2,
    ""FTebQz"": 2,
    ""IcKXpp"": 2,
    ""Domain"": 28,
    ""nmap"": 2,
    ""yWNYiUAFu"": 2,
    ""dPXtmu"": 2,
    ""ALmcLr"": 2
  },
  ""keyboard"": {
    ""Unknown"": 452
  },
  ""client_build"": {
    ""Unknown"": 452
  },
  ""client_name"": {
    ""Unknown"": 452
  },
  ""ip_type"": {
    ""hosting"": 258,
    ""hosting & proxy"": 18,
    ""proxy"": 12,
    ""Unknown"": 164
  }
}"
QNB63HBz,2023-07-15_stats.json,rdp_snitch,JSON,Saturday 15th of July 2023 07:15:08 PM CDT,"{
  ""ip"": {
    ""112.121.167.186"": 91,
    ""159.65.219.36"": 6,
    ""192.99.110.148"": 6,
    ""62.233.50.135"": 4,
    ""172.104.168.248"": 2,
    ""178.79.185.221"": 1,
    ""157.230.36.177"": 2,
    ""209.146.28.26"": 1,
    ""31.43.185.32"": 5,
    ""39.108.174.140"": 8,
    ""185.170.144.3"": 2,
    ""79.124.62.106"": 2,
    ""60.250.29.35"": 16,
    ""101.50.104.162"": 32,
    ""87.251.75.120"": 1,
    ""143.42.78.210"": 1,
    ""172.232.20.70"": 1,
    ""139.162.167.16"": 1,
    ""103.180.137.168"": 1,
    ""172.233.208.215"": 1,
    ""87.251.75.64"": 1,
    ""114.217.18.245"": 2,
    ""120.46.34.131"": 2,
    ""194.26.135.176"": 3,
    ""213.6.148.83"": 1,
    ""106.116.169.71"": 1,
    ""51.75.160.42"": 2,
    ""164.92.158.134"": 1,
    ""74.124.24.238"": 1,
    ""198.235.24.120"": 3,
    ""45.119.81.119"": 2,
    ""114.55.227.74"": 1,
    ""121.138.145.136"": 2,
    ""191.101.174.156"": 1,
    ""162.142.125.14"": 1,
    ""62.122.184.166"": 4,
    ""62.122.184.168"": 4,
    ""165.154.128.221"": 1,
    ""205.210.31.215"": 3,
    ""167.172.76.60"": 1,
    ""152.89.198.133"": 2,
    ""62.122.184.165"": 2,
    ""167.248.133.36"": 1
  },
  ""asn"": {
    ""AS45753"": 91,
    ""AS14061"": 10,
    ""AS16276"": 8,
    ""AS57523"": 19,
    ""AS63949"": 7,
    ""AS135607"": 1,
    ""AS211736"": 5,
    ""AS37963"": 9,
    ""AS48080"": 2,
    ""AS207812"": 2,
    ""AS3462"": 16,
    ""AS23674"": 32,
    ""AS208091"": 2,
    ""AS149077"": 1,
    ""AS4134"": 3,
    ""AS55990"": 2,
    ""AS12975"": 1,
    ""AS13354"": 1,
    ""AS396982"": 6,
    ""AS131386"": 2,
    ""AS4766"": 2,
    ""AS32780"": 1,
    ""AS398324"": 1,
    ""AS135377"": 1,
    ""AS398722"": 1
  },
  ""isp"": {
    ""Netsec Limited"": 91,
    ""DigitalOcean, LLC"": 10,
    ""OVH SAS"": 8,
    ""Chang Way Technologies Co. Limited"": 19,
    ""Akamai Technologies"": 2,
    ""Linode"": 1,
    ""Cogent Communications"": 1,
    ""FOP Dmytro Nedilskyi"": 5,
    ""Hangzhou Alibaba Advertising Co"": 9,
    ""Dmitriy Panchenko"": 2,
    ""DM AUTO EOOD"": 2,
    ""Chunghwa Telecom Co., Ltd."": 16,
    ""Nayatel (Pvt) Ltd"": 32,
    ""XHOST-INTERNET-SOLUTIONS"": 2,
    ""Akamai Technologies, Inc."": 3,
    ""Yen Viet Tourist Company Limited"": 1,
    ""Akamai International B.V."": 1,
    ""Chinanet"": 3,
    ""Huawei Cloud Service data center"": 2,
    ""Palestine Telecommunications Company"": 1,
    ""zColo"": 1,
    ""Google LLC"": 6,
    ""Long Van System Solution"": 2,
    ""Korea Telecom"": 2,
    ""Hosting Services"": 1,
    ""Censys, Inc."": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1
  },
  ""org"": {
    ""Simcentric Solutions Limited."": 91,
    ""Digital Ocean"": 6,
    ""AVAST Software"": 6,
    ""Sierra LLC"": 4,
    ""Linode"": 3,
    ""Linode, LLC"": 2,
    ""DigitalOcean, LLC"": 4,
    ""IPS, Inc"": 1,
    ""FOP Dmytro Nedilskyi"": 5,
    ""Aliyun Computing Co., LTD"": 9,
    ""Xhostis"": 2,
    ""Internet Solutions & Innovations LTD"": 2,
    ""Chunghwa Telecom Co. Ltd."": 16,
    ""Nayatel"": 32,
    ""Xhost Internet Solutions"": 2,
    ""Akamai Technologies, Inc."": 2,
    ""Yen Viet Tourist Company Limited"": 1,
    ""Chinanet JS"": 2,
    ""Huawei Cloud Service"": 2,
    ""Chang Way Technologies Co. Limited"": 13,
    ""Palestine Telecommunications Company"": 1,
    ""Chinanet HE"": 1,
    ""OVH Ltd"": 2,
    ""zColo"": 1,
    ""Palo Alto Networks, Inc"": 6,
    ""Unknown"": 2,
    ""Kornet"": 2,
    ""Ipxo"": 1,
    ""Censys Inc"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Starcrecium Limited"": 2,
    ""Censys, Inc."": 1
  },
  ""regionName"": {
    ""Sai Kung District"": 91,
    ""New Jersey"": 7,
    ""Quebec"": 6,
    ""Moscow"": 21,
    ""North West"": 3,
    ""England"": 4,
    ""South West"": 3,
    ""Metro Manila"": 1,
    ""Kyiv City"": 5,
    ""Guangdong"": 8,
    ""English River"": 2,
    ""Taipei City"": 16,
    ""Khyber Pakhtunkhwa"": 32,
    ""North Holland"": 3,
    ""Illinois"": 2,
    ""Hesse"": 1,
    ""Tinh Binh Duong"": 1,
    ""Jiangsu"": 2,
    ""Beijing"": 2,
    ""Rafah"": 1,
    ""Hebei"": 1,
    ""Texas"": 1,
    ""California"": 6,
    ""Ho Chi Minh"": 2,
    ""Zhejiang"": 1,
    ""Gyeonggi-do"": 2,
    ""Michigan"": 2
  },
  ""country"": {
    ""Hong Kong"": 91,
    ""United States"": 18,
    ""Canada"": 6,
    ""Russia"": 21,
    ""Singapore"": 6,
    ""United Kingdom"": 4,
    ""Philippines"": 1,
    ""Ukraine"": 5,
    ""China"": 14,
    ""Seychelles"": 2,
    ""Taiwan"": 16,
    ""Pakistan"": 32,
    ""Netherlands"": 3,
    ""Germany"": 1,
    ""Vietnam"": 3,
    ""Palestine"": 1,
    ""South Korea"": 2
  },
  ""account"": {
    ""hello"": 180,
    ""Test"": 6,
    ""beio"": 1,
    ""Administr"": 14,
    ""(empty)"": 4,
    ""PfIvLrQpi"": 1,
    ""FTebQz"": 1,
    ""IcKXpp"": 1,
    ""Domain"": 14,
    ""nmap"": 1,
    ""yWNYiUAFu"": 1,
    ""dPXtmu"": 1,
    ""ALmcLr"": 1
  },
  ""keyboard"": {
    ""Unknown"": 226
  },
  ""client_build"": {
    ""Unknown"": 226
  },
  ""client_name"": {
    ""Unknown"": 226
  },
  ""ip_type"": {
    ""hosting"": 129,
    ""hosting & proxy"": 9,
    ""proxy"": 6,
    ""Unknown"": 82
  }
}"
VFpSN1hy,Nigerian scammers [15-7-3/2023],bombaires,HTML,Saturday 15th of July 2023 06:57:26 PM CDT,"<a href=""mailto:md7197656044@gmail.com"">md7197656044@gmail.com</a>
<a href=""mailto:md.71.976560.4.4@gmail.com"">md.71.976560.4.4@gmail.com</a>
<a href=""mailto:m.d7.1.97.6.56.04.4@gmail.com"">m.d7.1.97.6.56.04.4@gmail.com</a>
<a href=""mailto:m.d71.97.6.560.44@gmail.com"">m.d71.97.6.560.44@gmail.com</a>
<a href=""mailto:m.d71.97.6.5.60.44@gmail.com"">m.d71.97.6.5.60.44@gmail.com</a>
<a href=""mailto:m.d71.9.765604.4@gmail.com"">m.d71.9.765604.4@gmail.com</a>
<a href=""mailto:md71.97.65.6.0.44@gmail.com"">md71.97.65.6.0.44@gmail.com</a>
<a href=""mailto:m.d.7.19.7.6.5.60.4.4@gmail.com"">m.d.7.19.7.6.5.60.4.4@gmail.com</a>
<a href=""mailto:md.719.76.5.604.4@gmail.com"">md.719.76.5.604.4@gmail.com</a>
<a href=""mailto:m.d.719.7.6.5.60.44@gmail.com"">m.d.719.7.6.5.60.44@gmail.com</a>
<a href=""mailto:m.d719.76.5.6.0.44@gmail.com"">m.d719.76.5.6.0.44@gmail.com</a>
<a href=""mailto:md7.1.97.6.5.6.044@gmail.com"">md7.1.97.6.5.6.044@gmail.com</a>
<a href=""mailto:m.d7.1976.5.6.0.4.4@gmail.com"">m.d7.1976.5.6.0.4.4@gmail.com</a>
<a href=""mailto:md.719765.6.0.4.4@gmail.com"">md.719765.6.0.4.4@gmail.com</a>
<a href=""mailto:m.d7.1.9.7.6.5.6.044@gmail.com"">m.d7.1.9.7.6.5.6.044@gmail.com</a>
<a href=""mailto:md.71976.560.4.4@gmail.com"">md.71976.560.4.4@gmail.com</a>
<a href=""mailto:m.d71.9765.6.04.4@gmail.com"">m.d71.9765.6.04.4@gmail.com</a>
<a href=""mailto:md71.9.7.6.56.0.44@gmail.com"">md71.9.7.6.56.0.44@gmail.com</a>
<a href=""mailto:md.719.7.6.560.4.4@gmail.com"">md.719.7.6.560.4.4@gmail.com</a>
<a href=""mailto:md.7197.6.56.044@gmail.com"">md.7197.6.56.044@gmail.com</a>
<a href=""mailto:m.d7.19.76.5.604.4@gmail.com"">m.d7.19.76.5.604.4@gmail.com</a>
<a href=""mailto:md.7197656.044@gmail.com"">md.7197656.044@gmail.com</a>
<a href=""mailto:m.d7.19.7.6.5.604.4@gmail.com"">m.d7.19.7.6.5.604.4@gmail.com</a>
<a href=""mailto:md.7.19.7.6.5.604.4@gmail.com"">md.7.19.7.6.5.604.4@gmail.com</a>
<a href=""mailto:md71.976.56.04.4@gmail.com"">md71.976.56.04.4@gmail.com</a>
<a href=""mailto:md.719.7656.04.4@gmail.com"">md.719.7656.04.4@gmail.com</a>
<a href=""mailto:m.d71.9.76.5.6.0.4.4@gmail.com"">m.d71.9.76.5.6.0.4.4@gmail.com</a>
<a href=""mailto:md71976560.44@gmail.com"">md71976560.44@gmail.com</a>
<a href=""mailto:md.71.97.65.6044@gmail.com"">md.71.97.65.6044@gmail.com</a>
<a href=""mailto:md7197656.0.4.4@gmail.com"">md7197656.0.4.4@gmail.com</a>
<a href=""mailto:md7.1.9.7.6.5.6.0.44@gmail.com"">md7.1.9.7.6.5.6.0.44@gmail.com</a>
<a href=""mailto:m.d.7197.65.60.44@gmail.com"">m.d.7197.65.60.44@gmail.com</a>
<a href=""mailto:m.d7.1.9.76.560.4.4@gmail.com"">m.d7.1.9.76.560.4.4@gmail.com</a>
<a href=""mailto:md.71.97.6.560.44@gmail.com"">md.71.97.6.560.44@gmail.com</a>
<a href=""mailto:md.7.1.9.76560.44@gmail.com"">md.7.1.9.76560.44@gmail.com</a>
<a href=""mailto:m.d71.9.7.656.0.4.4@gmail.com"">m.d71.9.7.656.0.4.4@gmail.com</a>
<a href=""mailto:md.7.19.7.65.60.44@gmail.com"">md.7.19.7.65.60.44@gmail.com</a>
<a href=""mailto:m.d7.1.9.7.65.6.0.4.4@gmail.com"">m.d7.1.9.7.65.6.0.4.4@gmail.com</a>
<a href=""mailto:m.d.7.1.9.76560.44@gmail.com"">m.d.7.1.9.76560.44@gmail.com</a>
<a href=""mailto:md.71.9.765.6.0.4.4@gmail.com"">md.71.9.765.6.0.4.4@gmail.com</a>
<a href=""mailto:md.7.1.9.765.6.0.44@gmail.com"">md.7.1.9.765.6.0.44@gmail.com</a>
<a href=""mailto:md719.7.65.604.4@gmail.com"">md719.7.65.604.4@gmail.com</a>
<a href=""mailto:m.d.7.197.6.56.04.4@gmail.com"">m.d.7.197.6.56.04.4@gmail.com</a>
<a href=""mailto:md.7.1.9.76.5.6.0.44@gmail.com"">md.7.1.9.76.5.6.0.44@gmail.com</a>
<a href=""mailto:md.719.7.6560.44@gmail.com"">md.719.7.6560.44@gmail.com</a>
<a href=""mailto:md.7197.65604.4@gmail.com"">md.7197.65604.4@gmail.com</a>
<a href=""mailto:md.7.19.76.5.60.4.4@gmail.com"">md.7.19.76.5.60.4.4@gmail.com</a>
<a href=""mailto:md7.1.976.5.60.44@gmail.com"">md7.1.976.5.60.44@gmail.com</a>
<a href=""mailto:md7.1.9765.60.44@gmail.com"">md7.1.9765.60.44@gmail.com</a>
<a href=""mailto:md7197.6.56044@gmail.com"">md7197.6.56044@gmail.com</a>
<a href=""mailto:m.d.7.19.76.5.60.44@gmail.com"">m.d.7.19.76.5.60.44@gmail.com</a>
<a href=""mailto:m.d.71.97.656.0.4.4@gmail.com"">m.d.71.97.656.0.4.4@gmail.com</a>
<a href=""mailto:m.d.7.1.97.6.5.60.4.4@gmail.com"">m.d.7.1.97.6.5.60.4.4@gmail.com</a>
<a href=""mailto:m.d.7.197.6.5.60.4.4@gmail.com"">m.d.7.197.6.5.60.4.4@gmail.com</a>
<a href=""mailto:m.d7.1.9.76.56.04.4@gmail.com"">m.d7.1.9.76.56.04.4@gmail.com</a>
<a href=""mailto:md.71.9.7.6.5.6.0.4.4@gmail.com"">md.71.9.7.6.5.6.0.4.4@gmail.com</a>
<a href=""mailto:m.d.7.197.65.604.4@gmail.com"">m.d.7.197.65.604.4@gmail.com</a>
<a href=""mailto:m.d7.197.656.04.4@gmail.com"">m.d7.197.656.04.4@gmail.com</a>
<a href=""mailto:md71.9.7656.04.4@gmail.com"">md71.9.7656.04.4@gmail.com</a>
<a href=""mailto:m.d7.1.976.56.044@gmail.com"">m.d7.1.976.56.044@gmail.com</a>
<a href=""mailto:m.d7.1.97.6.5.60.4.4@gmail.com"">m.d7.1.97.6.5.60.4.4@gmail.com</a>
<a href=""mailto:md7.1.9765.6.04.4@gmail.com"">md7.1.9765.6.04.4@gmail.com</a>
<a href=""mailto:m.d.7.1.97.656.04.4@gmail.com"">m.d.7.1.97.656.04.4@gmail.com</a>
<a href=""mailto:m.d71.9.7656.044@gmail.com"">m.d71.9.7656.044@gmail.com</a>
<a href=""mailto:m.d7.1.9.76.5.60.4.4@gmail.com"">m.d7.1.9.76.5.60.4.4@gmail.com</a>
<a href=""mailto:md7.1.976.5.6.044@gmail.com"">md7.1.976.5.6.044@gmail.com</a>
<a href=""mailto:md.71.976.56.044@gmail.com"">md.71.976.56.044@gmail.com</a>
<a href=""mailto:md.719.76.560.4.4@gmail.com"">md.719.76.560.4.4@gmail.com</a>
<a href=""mailto:md.7.19.7.6.56044@gmail.com"">md.7.19.7.6.56044@gmail.com</a>
<a href=""mailto:md7.1.9.76.5.6.04.4@gmail.com"">md7.1.9.76.5.6.04.4@gmail.com</a>
<a href=""mailto:m.d71.9.7.656044@gmail.com"">m.d71.9.7.656044@gmail.com</a>
<a href=""mailto:m.d719.76560.44@gmail.com"">m.d719.76560.44@gmail.com</a>
<a href=""mailto:md71.9.7.6.5.60.4.4@gmail.com"">md71.9.7.6.5.60.4.4@gmail.com</a>
<a href=""mailto:md.7.1.9.76.5.6.0.4.4@gmail.com"">md.7.1.9.76.5.6.0.4.4@gmail.com</a>
<a href=""mailto:md.719.7.656.0.4.4@gmail.com"">md.719.7.656.0.4.4@gmail.com</a>
<a href=""mailto:m.d7.1.9.7.6.5.604.4@gmail.com"">m.d7.1.9.7.6.5.604.4@gmail.com</a>
<a href=""mailto:m.d719.7.65.6.04.4@gmail.com"">m.d719.7.65.6.04.4@gmail.com</a>
<a href=""mailto:m.d.7.197.6.560.4.4@gmail.com"">m.d.7.197.6.560.4.4@gmail.com</a>
<a href=""mailto:md.719.765.60.44@gmail.com"">md.719.765.60.44@gmail.com</a>
<a href=""mailto:m.d.71.97.65.6.0.44@gmail.com"">m.d.71.97.65.6.0.44@gmail.com</a>
<a href=""mailto:m.d7.197.6.5.6044@gmail.com"">m.d7.197.6.5.6044@gmail.com</a>
<a href=""mailto:m.d71.97.6.56.0.4.4@gmail.com"">m.d71.97.6.56.0.4.4@gmail.com</a>
<a href=""mailto:m.d7.1.9.765.60.44@gmail.com"">m.d7.1.9.765.60.44@gmail.com</a>
<a href=""mailto:md71.9.76.5.6044@gmail.com"">md71.9.76.5.6044@gmail.com</a>
<a href=""mailto:m.d7.19.765.6.044@gmail.com"">m.d7.19.765.6.044@gmail.com</a>
<a href=""mailto:m.d71.9.765.60.44@gmail.com"">m.d71.9.765.60.44@gmail.com</a>
<a href=""mailto:md7.1.9.7.6.5.6.0.4.4@gmail.com"">md7.1.9.7.6.5.6.0.4.4@gmail.com</a>
<a href=""mailto:md71.9765.6.0.44@gmail.com"">md71.9765.6.0.44@gmail.com</a>
<a href=""mailto:m.d.71.9765604.4@gmail.com"">m.d.71.9765604.4@gmail.com</a>
<a href=""mailto:md7.19.7.656044@gmail.com"">md7.19.7.656044@gmail.com</a>
<a href=""mailto:md7.1976.5.604.4@gmail.com"">md7.1976.5.604.4@gmail.com</a>
<a href=""mailto:md.7.1.9.7.65.60.44@gmail.com"">md.7.1.9.7.65.60.44@gmail.com</a>
<a href=""mailto:md719.7656.044@gmail.com"">md719.7656.044@gmail.com</a>
<a href=""mailto:m.d71.9.76.5.6.0.44@gmail.com"">m.d71.9.76.5.6.0.44@gmail.com</a>
<a href=""mailto:md71.976560.4.4@gmail.com"">md71.976560.4.4@gmail.com</a>
<a href=""mailto:md71976.5.6.044@gmail.com"">md71976.5.6.044@gmail.com</a>
<a href=""mailto:m.d.71.97.6.5.6044@gmail.com"">m.d.71.97.6.5.6044@gmail.com</a>
<a href=""mailto:m.d.7.1976.5.604.4@gmail.com"">m.d.7.1976.5.604.4@gmail.com</a>
<a href=""mailto:m.d7.19.7.6.5.6.044@gmail.com"">m.d7.19.7.6.5.6.044@gmail.com</a>
<a href=""mailto:md7.1.9.7.6.5.60.4.4@gmail.com"">md7.1.9.7.6.5.60.4.4@gmail.com</a>
<a href=""mailto:md7.19.7.65.60.44@gmail.com"">md7.19.7.65.60.44@gmail.com</a>
<a href=""mailto:m.d.7.197.656.0.44@gmail.com"">m.d.7.197.656.0.44@gmail.com</a>
<a href=""mailto:md71.976.56.0.4.4@gmail.com"">md71.976.56.0.4.4@gmail.com</a>
<a href=""mailto:md71.9.765.6.04.4@gmail.com"">md71.9.765.6.04.4@gmail.com</a>
<a href=""mailto:m.d.7.19.76560.4.4@gmail.com"">m.d.7.19.76560.4.4@gmail.com</a>
<a href=""mailto:m.d.71976.560.4.4@gmail.com"">m.d.71976.560.4.4@gmail.com</a>
<a href=""mailto:m.d.71.9.765.60.4.4@gmail.com"">m.d.71.9.765.60.4.4@gmail.com</a>
<a href=""mailto:m.d.71976.56.0.44@gmail.com"">m.d.71976.56.0.44@gmail.com</a>
<a href=""mailto:md7.1976.5.6.044@gmail.com"">md7.1976.5.6.044@gmail.com</a>
<a href=""mailto:m.d71.976.56.0.4.4@gmail.com"">m.d71.976.56.0.4.4@gmail.com</a>
<a href=""mailto:md7197.65.6.04.4@gmail.com"">md7197.65.6.04.4@gmail.com</a>
<a href=""mailto:md71.9.7.65.6.04.4@gmail.com"">md71.9.7.65.6.04.4@gmail.com</a>
<a href=""mailto:md7.1976.56044@gmail.com"">md7.1976.56044@gmail.com</a>
<a href=""mailto:m.d.7.1.97.656.0.4.4@gmail.com"">m.d.7.1.97.656.0.4.4@gmail.com</a>
<a href=""mailto:md7.19.765604.4@gmail.com"">md7.19.765604.4@gmail.com</a>
<a href=""mailto:m.d7.1.9.7.6.56.04.4@gmail.com"">m.d7.1.9.7.6.56.04.4@gmail.com</a>
<a href=""mailto:m.d7.1.9.7.6560.4.4@gmail.com"">m.d7.1.9.7.6560.4.4@gmail.com</a>
<a href=""mailto:m.d.719.76560.4.4@gmail.com"">m.d.719.76560.4.4@gmail.com</a>
<a href=""mailto:m.d.7197.6.5.6.044@gmail.com"">m.d.7197.6.5.6.044@gmail.com</a>
<a href=""mailto:md71.9.7.656.0.44@gmail.com"">md71.9.7.656.0.44@gmail.com</a>
<a href=""mailto:md.7.19.7.6.5.6.044@gmail.com"">md.7.19.7.6.5.6.044@gmail.com</a>
<a href=""mailto:m.d.7.19.76.5.60.4.4@gmail.com"">m.d.7.19.76.5.60.4.4@gmail.com</a>
<a href=""mailto:md.7.1.976.5.60.4.4@gmail.com"">md.7.1.976.5.60.4.4@gmail.com</a>
<a href=""mailto:md7.19.765.6.04.4@gmail.com"">md7.19.765.6.04.4@gmail.com</a>
<a href=""mailto:m.d7.1.9.76.56044@gmail.com"">m.d7.1.9.76.56044@gmail.com</a>
<a href=""mailto:md7.19.7.6.56.04.4@gmail.com"">md7.19.7.6.56.04.4@gmail.com</a>
<a href=""mailto:md.71976.5.6.0.4.4@gmail.com"">md.71976.5.6.0.4.4@gmail.com</a>
<a href=""mailto:m.d71976560.4.4@gmail.com"">m.d71976560.4.4@gmail.com</a>
<a href=""mailto:md.719.76.5.60.44@gmail.com"">md.719.76.5.60.44@gmail.com</a>
<a href=""mailto:md719.7656.04.4@gmail.com"">md719.7656.04.4@gmail.com</a>
<a href=""mailto:m.d719.7.65.60.44@gmail.com"">m.d719.7.65.60.44@gmail.com</a>
<a href=""mailto:m.d.7.1.9.7.65.6.044@gmail.com"">m.d.7.1.9.7.65.6.044@gmail.com</a>
<a href=""mailto:md.7.1976.560.4.4@gmail.com"">md.7.1976.560.4.4@gmail.com</a>
<a href=""mailto:md7.19765.6044@gmail.com"">md7.19765.6044@gmail.com</a>
<a href=""mailto:md7.197.6.5.604.4@gmail.com"">md7.197.6.5.604.4@gmail.com</a>
<a href=""mailto:md.71.976560.44@gmail.com"">md.71.976560.44@gmail.com</a>
<a href=""mailto:md7.19.7.6.560.44@gmail.com"">md7.19.7.6.560.44@gmail.com</a>
<a href=""mailto:md71.9765.6.044@gmail.com"">md71.9765.6.044@gmail.com</a>
<a href=""mailto:m.d.7.1976.56.0.44@gmail.com"">m.d.7.1976.56.0.44@gmail.com</a>
<a href=""mailto:md.71.9.7.6560.44@gmail.com"">md.71.9.7.6560.44@gmail.com</a>
<a href=""mailto:m.d.71.97.656044@gmail.com"">m.d.71.97.656044@gmail.com</a>
<a href=""mailto:md71.97.656.0.4.4@gmail.com"">md71.97.656.0.4.4@gmail.com</a>
<a href=""mailto:md.7.1.976.56.044@gmail.com"">md.7.1.976.56.044@gmail.com</a>
<a href=""mailto:md.719.765.6.044@gmail.com"">md.719.765.6.044@gmail.com</a>
<a href=""mailto:md7.197.65.604.4@gmail.com"">md7.197.65.604.4@gmail.com</a>
<a href=""mailto:m.d.719.76.560.44@gmail.com"">m.d.719.76.560.44@gmail.com</a>
<a href=""mailto:m.d7197.65.6.0.4.4@gmail.com"">m.d7197.65.6.0.4.4@gmail.com</a>
<a href=""mailto:m.d.71.9.76.560.44@gmail.com"">m.d.71.9.76.560.44@gmail.com</a>
<a href=""mailto:md719.765604.4@gmail.com"">md719.765604.4@gmail.com</a>
<a href=""mailto:m.d7.1.976.5.6.0.44@gmail.com"">m.d7.1.976.5.6.0.44@gmail.com</a>
<a href=""mailto:m.d7.19.76.560.44@gmail.com"">m.d7.19.76.560.44@gmail.com</a>
<a href=""mailto:m.d.7.1976.5.6.04.4@gmail.com"">m.d.7.1976.5.6.04.4@gmail.com</a>
<a href=""mailto:m.d7.1.97.6.560.4.4@gmail.com"">m.d7.1.97.6.560.4.4@gmail.com</a>
<a href=""mailto:m.d71.97.6.5.604.4@gmail.com"">m.d71.97.6.5.604.4@gmail.com</a>
<a href=""mailto:m.d.7.197656.0.44@gmail.com"">m.d.7.197656.0.44@gmail.com</a>
<a href=""mailto:m.d.719765.6.0.44@gmail.com"">m.d.719765.6.0.44@gmail.com</a>
<a href=""mailto:m.d71.9.76560.44@gmail.com"">m.d71.9.76560.44@gmail.com</a>
<a href=""mailto:md.71.9765.6.0.44@gmail.com"">md.71.9765.6.0.44@gmail.com</a>
<a href=""mailto:m.d.7.197.656.044@gmail.com"">m.d.7.197.656.044@gmail.com</a>
<a href=""mailto:m.d.71.9.76.56.0.4.4@gmail.com"">m.d.71.9.76.56.0.4.4@gmail.com</a>
<a href=""mailto:md.71.9765.6.0.4.4@gmail.com"">md.71.9765.6.0.4.4@gmail.com</a>
<a href=""mailto:md.7.1.9.76.5.60.44@gmail.com"">md.7.1.9.76.5.60.44@gmail.com</a>
<a href=""mailto:m.d.7.1976.5.6.044@gmail.com"">m.d.7.1976.5.6.044@gmail.com</a>
<a href=""mailto:md71.97.6.5.6.04.4@gmail.com"">md71.97.6.5.6.04.4@gmail.com</a>
<a href=""mailto:m.d7.19.7.6.560.4.4@gmail.com"">m.d7.19.7.6.560.4.4@gmail.com</a>
<a href=""mailto:m.d71.97.65.6.0.44@gmail.com"">m.d71.97.65.6.0.44@gmail.com</a>
<a href=""mailto:md.7.1.976.560.44@gmail.com"">md.7.1.976.560.44@gmail.com</a>
<a href=""mailto:m.d.71.9.7.6.56.0.44@gmail.com"">m.d.71.9.7.6.56.0.44@gmail.com</a>
<a href=""mailto:m.d7197.6.5.60.44@gmail.com"">m.d7197.6.5.60.44@gmail.com</a>
<a href=""mailto:md.71.9.7656.04.4@gmail.com"">md.71.9.7656.04.4@gmail.com</a>
<a href=""mailto:md7.1.9.76.5.6.0.44@gmail.com"">md7.1.9.76.5.6.0.44@gmail.com</a>
<a href=""mailto:m.d.7.197656.04.4@gmail.com"">m.d.7.197656.04.4@gmail.com</a>
<a href=""mailto:m.d71.97.6.5.6.0.4.4@gmail.com"">m.d71.97.6.5.6.0.4.4@gmail.com</a>
<a href=""mailto:md7.19.7.656.04.4@gmail.com"">md7.19.7.656.04.4@gmail.com</a>
<a href=""mailto:m.d71.9.7656.0.4.4@gmail.com"">m.d71.9.7656.0.4.4@gmail.com</a>
<a href=""mailto:md.7197.6.56044@gmail.com"">md.7197.6.56044@gmail.com</a>
<a href=""mailto:md7197.6.5.60.44@gmail.com"">md7197.6.5.60.44@gmail.com</a>
<a href=""mailto:md7.1.97.656.0.4.4@gmail.com"">md7.1.97.656.0.4.4@gmail.com</a>
<a href=""mailto:m.d.719.76.5.604.4@gmail.com"">m.d.719.76.5.604.4@gmail.com</a>
<a href=""mailto:md7.19.76.56.0.4.4@gmail.com"">md7.19.76.56.0.4.4@gmail.com</a>
<a href=""mailto:md.71.9.7.65.6.0.4.4@gmail.com"">md.71.9.7.65.6.0.4.4@gmail.com</a>
<a href=""mailto:md.71976.5.60.4.4@gmail.com"">md.71976.5.60.4.4@gmail.com</a>
<a href=""mailto:md719.7656044@gmail.com"">md719.7656044@gmail.com</a>
<a href=""mailto:md7.1.9.76.5.604.4@gmail.com"">md7.1.9.76.5.604.4@gmail.com</a>
<a href=""mailto:md.7.1976.5.6.04.4@gmail.com"">md.7.1976.5.6.04.4@gmail.com</a>
<a href=""mailto:m.d7.1976.5.6.044@gmail.com"">m.d7.1976.5.6.044@gmail.com</a>
<a href=""mailto:md.7.197.6.56044@gmail.com"">md.7.197.6.56044@gmail.com</a>
<a href=""mailto:m.d7197.656.0.4.4@gmail.com"">m.d7197.656.0.4.4@gmail.com</a>
<a href=""mailto:md.7.1.97656.0.44@gmail.com"">md.7.1.97656.0.44@gmail.com</a>
<a href=""mailto:m.d.7.19.76.56044@gmail.com"">m.d.7.19.76.56044@gmail.com</a>
<a href=""mailto:md.7.1.9.7.656044@gmail.com"">md.7.1.9.7.656044@gmail.com</a>
<a href=""mailto:m.d7.1976.56.0.4.4@gmail.com"">m.d7.1976.56.0.4.4@gmail.com</a>
<a href=""mailto:m.d719.7.6.5.6.044@gmail.com"">m.d719.7.6.5.6.044@gmail.com</a>
<a href=""mailto:m.d.71.9.7.65.6.04.4@gmail.com"">m.d.71.9.7.65.6.04.4@gmail.com</a>
<a href=""mailto:m.d.71.9765.6.044@gmail.com"">m.d.71.9765.6.044@gmail.com</a>
<a href=""mailto:m.d71.9.765.6044@gmail.com"">m.d71.9.765.6044@gmail.com</a>
<a href=""mailto:m.d.7.1.9.76.56.0.4.4@gmail.com"">m.d.7.1.9.76.56.0.4.4@gmail.com</a>
<a href=""mailto:md.71.9.7.65.6044@gmail.com"">md.71.9.7.65.6044@gmail.com</a>
<a href=""mailto:md.7.1.9.7.6.5.6044@gmail.com"">md.7.1.9.7.6.5.6044@gmail.com</a>
<a href=""mailto:m.d.71.9.76.5.6.0.44@gmail.com"">m.d.71.9.76.5.6.0.44@gmail.com</a>
<a href=""mailto:md.71.9.76.56044@gmail.com"">md.71.9.76.56044@gmail.com</a>"
nCUs7h2t,Funkylocomotiontunnelborer,ccbackups,Lua,Saturday 15th of July 2023 06:17:24 PM CDT,"while true do
         turtle.dig()
end"
57P7EWGv,# tk_sharpen_image.py,here2share,Python,Saturday 15th of July 2023 05:57:16 PM CDT,"1. High-pass filter:
```
def sharpen_image(img):
    # applying high pass filter
    kernel = [[-1,-1,-1], [-1,9,-1], [-1,-1,-1]]
    sharp_img = img.filter(ImageFilter.Kernel((3,3), kernel))
    return sharp_img
```

2. Laplacian filter:
```
def sharpen_image(img):
    # applying Laplacian filter
    kernel = [[0, -1, 0], [-1, 4, -1], [0, -1, 0]]
    sharp_img = img.filter(ImageFilter.Kernel((3,3), kernel))
    return sharp_img
```

3. Sobel operator:
```
def sharpen_image(img):
    # applying sobel operator
    kernel_x = [[-1,0,1], [-2,0,2], [-1,0,1]]
    kernel_y = [[-1,-2,-1], [0,0,0], [1,2,1]]
    img_x = img.filter(ImageFilter.Kernel((3,3), kernel_x))
    img_y = img.filter(ImageFilter.Kernel((3,3), kernel_y))
    sharp_img = ImageChops.add(img_x, img_y)
    return sharp_img
```

4. Unsharp mask filter:
```
def sharpen_image(img):
    # applying unsharp mask filter
    blurred = img.filter(ImageFilter.BLUR)
    sharp = ImageEnhance.Sharpness(img).enhance(2.0)
    sharp_img = ImageChops.subtract(sharp, blurred)
    return sharp_img
```

5. Roberts operator:
```
def sharpen_image(img):
    # applying roberts operator
    kernel_x = [[1,0], [0,-1]]
    kernel_y = [[0,1], [-1,0]]
    img_x = img.filter(ImageFilter.Kernel((2,2), kernel_x))
    img_y = img.filter(ImageFilter.Kernel((2,2), kernel_y))
    sharp_img = ImageChops.add(img_x, img_y)
    return sharp_img
```

6. Prewitt operator:
```
def sharpen_image(img):
    # applying prewitt operator
    kernel_x = [[-1,-1,-1], [0,0,0], [1,1,1]]
    kernel_y = [[-1,0,1], [-1,0,1], [-1,0,1]]
    img_x = img.filter(ImageFilter.Kernel((3,3), kernel_x))
    img_y = img.filter(ImageFilter.Kernel((3,3), kernel_y))
    sharp_img = ImageChops.add(img_x, img_y)
    return sharp_img
```

7. Scharr operator:
```
def sharpen_image(img):
    # applying scharr operator
    kernel_x = [[3,0,-3], [10,0,-10], [3,0,-3]]
    kernel_y = [[3,10,3], [0,0,0], [-3,-10,-3]]
    img_x = img.filter(ImageFilter.Kernel((3,3), kernel_x))
    img_y = img.filter(ImageFilter.Kernel((3,3), kernel_y))
    sharp_img = ImageChops.add(img_x, img_y)
    return sharp_img
```

8. Canny edge detection filter:
```
def sharpen_image(img):
    # applying canny edge detection filter
    edges = img.filter(ImageFilter.FIND_EDGES)
    sharp_img = ImageChops.subtract(img, edges)
    return sharp_img
```

9. Median filter:
```
def sharpen_image(img):
    # applying median filter
    sharp_img = img.filter(ImageFilter.MedianFilter(size=3))
    return sharp_img
```

10. Gaussian weighted average:
```
def sharpen_image(img):
    # applying gaussian weighted average
    kernel = [[0.04, 0.12, 0.04], [0.12, 0.36, 0.12], [0.04, 0.12, 0.04]]
    sharp_img = img.filter(ImageFilter.Kernel((3,3), kernel))
    return sharp_img
```"
1dBhwckP,BWR - Changelog 15/07/23,SSilver,Diff,Saturday 15th of July 2023 05:33:01 PM CDT,"Dead Ringer
+ Removed 100% cloak meter consumed on decloak
+ -50% cloak meter only consumed with Feign Death is activated at >50% HP
- Reduced cloak regen bonus to +25% (was +100%)
- Removed cloak duration bonus
Last version attempted to make feign more predictable with its recharge more consistent in all uses - when tanking damage in gunfights or escaping near death. This however made the feign ability too spammable especially with the faster recharge, and simply increasing recharge time would make more punishing for it's intended usage. In order to better reward the latter use and discourage the former, it's recharge and duration was tweaked to benefit using it to genuinely feign death with a longer duration and less potential recharge.

Vaccinator
+ Increased passive patient damage bonus to +15% (was +10%)
+ Increased ubercharge damage resistance to 30% (was 25%)
+ Resistance when stacked becomes 50% x2, 65% x3
The medigun's benefits appaered too muted even for how quickly it built uber. This attempt to turn them up should make them more rewarding.

Fists of Steel
- Overheal penalty works passively, no longer increases uber build
Attempting to make the downside more consistent on this weapon and cut back on its bugginess.

Eyelander
+ Removed Shield Recharge penalty
The sword's downside appeared to hold it back right off the bat, and its snowball didn't appare to require a huge downside.

Disciplinary Action
- Added No Random Crits
- Added: This weapon holsters 100% slower
Make this weapon decidedly worse for melee combat and require more committment to gain its benefit before you can switch off.

Solemn Vow
- Added No Random Crits
Didn't have apparent downside to make it worse for combat than stock.

Your Eternal Reward
- Removed cloak regen bonus
Appeared to be overtuned with its regen bonus."
j2iCFNRt,743. Network Delay Time,duydn95,Python,Saturday 15th of July 2023 04:53:21 PM CDT,"class Solution:
    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:
        #Y tuong: dung Dijkstra de tim do dai duong di ngan nhat tu k den cac dinh con lai (d[i]). Ket qua = min(d[i]).
        #TC: O(m) + O(mlogn) = O(m * log(n)), m la so canh, n la so dinh
        #SC: O(m + n)
        d = [float('inf') for i in range(n + 1)]
        d[k] = 0
        #B1: Doi thanh danh sach ke
        adj = defaultdict(list)
        weight = {}
        for (fr, to, wt) in times:
            adj[fr].append(to)
            weight[fr, to] = wt

        #B2: Dijkstra
        heap = []
        heappush(heap, (0, k))
        fixed = set()
        while heap:
            _, u = heappop(heap)
            if u in fixed:
                continue
            fixed.add(u)
            for v in adj[u]:
                if v not in fixed and d[v] > d[u] + weight[u, v]:
                    d[v] = d[u] + weight[u, v]
                    heappush(heap, (d[v], v))
        
        #B3
        if max(d[1:]) == float('inf'):
            return -1
        return max(d[1:])
"
H3F6yNKm,1584. Min Cost to Connect All Points,duydn95,Python,Saturday 15th of July 2023 04:53:00 PM CDT,"class UnionFind:
    def __init__(self, N):
        self.rank = [1 for i in range(N)]
        self.parent = [i for i in range(N)]
    
    def find(self, x):
        if x != self.parent[x]:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]
    
    def union(self, x, y):
        px = self.find(x)
        py = self.find(y)

        if px == py:
            return False
        if self.rank[px] < self.rank[py]:
            self.parent[px] = py
        else:
            self.parent[py] = px
            if self.rank[px] == self.rank[py]:
                self.rank[px] += 1
        return True
class Solution:
    def minCostConnectPoints(self, points: List[List[int]]) -> int:
        #TC: O(N^2) + O(N^2logN) + O(N^2) = O(N^2logN)
        #SC: O(N^2)

        #Y tuong: Su dung thuat toan Kruskal de tim cay khung nho nhat tren do thi tao boi N diem  
        ans = 0
        #B1: Bieu dien do thi duoi dang danh sach canh
        edges = []
        N = len(points)
        for i in range(N):
            for j in range(i + 1, N):
                cost = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1])
                edges.append((i, j, cost))

        edges.sort(key = lambda x: x[2])   
        #B2: Kruskal
        uf = UnionFind(N)
        for (a, b, w) in edges:
            if uf.union(a, b):
                ans += w
        return ans  
"
BXriSCEL,1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance,duydn95,Python,Saturday 15th of July 2023 04:52:10 PM CDT,"class Solution:
    def findTheCity(self, n: int, edges: List[List[int]], distanceThreshold: int) -> int:

        #TC: O(m) + O(n^3) + O(n^2) = O(n^3)
        #SC: O(m + n^2) = O(n^2)
        #Y tuong: su dung thuat toan Floyd-Warshall de tim duong di ngan nhat giua moi cap dinh
        ans, min_reachable = None, float('inf')
        def find_num_reachable(u):
            '''
                Return number of reachable city from u
            '''
            num_reachable_from_u = 0
            for v in range(n):
                if u != v and d[u][v] <= distanceThreshold:
                    num_reachable_from_u += 1
            return num_reachable_from_u

        d = [[float('inf') for i in range(n)] for j in range(n)]
        for u in range(n):
            d[u][u] = 0
        #B1: Chuyen bieu dien do thi tu danh sach canh thanh danh sach ke
        adj = defaultdict(list)

        weight = {}
        for (fr, to, wt) in edges:
            adj[fr].append(to)
            adj[to].append(fr)
            weight[fr, to] = wt
            weight[to, fr] = wt
            d[fr][to] = wt
            d[to][fr] = wt

        #B2: Floyd-Warshal
        for k in range(n):
            for i in range(n):
                for j in range(n):
                    if d[i][j] > d[i][k] + d[k][j]:
                        d[i][j] = d[i][k] + d[k][j]
        #B3: 
        for u in range(n):
            fnr = find_num_reachable(u)
            print(u, fnr)
            if fnr <= min_reachable:
                ans, min_reachable = u, fnr
        
        return ans

"
PFXa2V2g,White noise generator,Kaelygon,C,Saturday 15th of July 2023 04:44:14 PM CDT,"//White noise generator
ukaelEntropy KAENTROPY = {.a = 13381U, .b = 42513U};
inline static void reseed(){
II=0; //DEBUG 
 
    KAENTROPY.a = KAENTROPY.a * 13 + 7;
    KAENTROPY.b = KAENTROPY.b * 13 + 7;
    KAENTROPY.a = KAENTROPY.a + KAENTROPY.b;
 
	if(KAENTROPY.b&0b0010001011010000U){return;}
	
INC[II]++; //DEBUG  
II+=II<9?1:0; //DEBUG
 
    for(uint8_t i=0;i<5;i+=1){ //iterations
        uint8_t izero=(i==0);
        KAENTROPY.a = KAENTROPY.a * (13+izero*16) + 7 + izero*8;
        KAENTROPY.b = KAENTROPY.b * (13+izero*16) + 7 + izero*8;
        KAENTROPY.a = KAENTROPY.a + KAENTROPY.b;
		
        if( KAENTROPY.b&(KAENTROPY.a>>(8-i)) ){break;}  
INC[II]++; //DEBUG  
II+=II<9?1:0; //DEBUG
    }

    return;
}"
ST1gQXCh,webinar-input-patterns-2023-07-15,jspill,Python,Saturday 15th of July 2023 04:21:23 PM CDT,"# Webinar Input Patterns July 15 2023

# input() ALWAYS returns a string
# myInput = input() # that myInput var is definitely a str!

# but we might want to change it to something else...

# 1 Recast a numeric string into an int or float
# 2 Breaking up a long string into a list of smaller strings
# 3 Break up a string containing numeric chars into a list of
#       recast ints or floats
# 4 One value tells you how many times to call input()
# 5 We DON'T KNOW how many times to call input(), but we know
#       a sentinel value to stop


# 1 Recast a numeric string into an int or float
# looks like a number...  5 but it's really the string ""5""
# easy, recast
# myInput = int(input()) # or float(input()) if you want a float

# 2 Breaking up a long string into a list of smaller strings
# ""Pat Silly Doe""
# myInput = input()
# strList = myInput.split()
# strList = input().split() # could do it one step
# print(strList)

# getting a series of numbers...
# 12 44 67 23
# myInput = ""12 44 67 23"" # input()
# strList = myInput.split()
# print(strList)
# # traditional for loop for new list
# numList = []
# for num in strList:
#     numList.append(int(num))
# # or list comprehension for new list
# numList = [int(num) for num in strList]
# print(numList)
#
# # 4 One value tells you HOW MANY TIMES to call input()
# # 5 # so 5 more pieces of data coming in...
# # 30.0
# # 50.0
# # 10.0
# # 100.0
# # 65.0
#
# numVals = int(input())
# floatList = [] # fill this basket...
#
# for num in range(numVals): # do this 5 times
#     # get each next input, do your stuff
#     nextInput = float(input())
#     floatList.append(nextInput)
# print(floatList)
#
# Question on ""printing a list without brackets""... which isn't necessarily something you need to do
# for n in floatList:
#     print(n, end="" "")
# print() # get the line return back, unless a question says otherwise
#
# # "" "".join(listOfStrings)
# print("" "".join([str(num) for num in floatList]))

# Question on range(len())
# myList = [""Scooby"", ""Shaggy"", ""Velma"", ""Daphne"", ""Fred"", ""Scrappy""]
# for item in myList:
#     print(item)
#
# for n in range(len(myList)):
#     print(n)
#     print(myList[n])

# back to Input Patterns...

# 5 We DON'T KNOW how many times to call input(), but we know to stop on some SENTINEL VALUE
# this is a WHILE loop condition

# ask for the FIRST input()
# myInput = input()
# # then set up a WHILE LOOP
# while myInput != ""-1"": # or whatever value tells you to stop
#     # do what you need with that input...
#
#     # get the next input
#     myInput = input()

# multiple quit commands
# myInput = input()
# quitCommands = [""quit"", ""done"", ""d""] # put them in a list to avoid many conditions joined by an OR
# while not myInput in quitCommands:
#     print(f""I got the command: {myInput}"")
#     myInput = input()
# print(""OK. Done!"")












"
q6RTkQsQ,Untitled,es3n1n,HTML,Saturday 15th of July 2023 04:17:48 PM CDT,"<html>
<body>
<script>
alert(1337);
</script>
</body>
</html>"
RW8mbKex,TikTacToe,spider68,C++,Saturday 15th of July 2023 04:11:36 PM CDT,"/* Online C++ Compiler and Editor */
#include <bits/stdc++.h>

using namespace std;

class Player{
    public:
        string name;
        char sign;
        Player(string name, char sign){
            this->name=name;
            this->sign=sign;
        }
};

class TikTacToe{
    int size,count=0;
    vector<vector<char>>board;
    deque<Player>players;
    public:
        TikTacToe(int size){
            this->size = size;
            board = vector<vector<char>>(size,vector<char>(size, '.'));
            Player p1 =  Player(""player1"",'X');
            Player p2 =  Player(""player2"",'O');
            players.push_back(p1);
            players.push_back(p2);
        }
        void StartGame();
        bool EnterValue(Player p);
        void PrintBoard();
        bool IsGameCompleted(int row, int col, Player p);
};

void TikTacToe::StartGame(){
    while(count<size*size){
        Player current = players.front();
        if(EnterValue(current)==false){
            break;
        }
        players.pop_front();
        players.push_back(current);
    }
}

bool TikTacToe::EnterValue(Player p){
    int row, col;
    cout<<p.name<<"" please enter row and col\n"";
    cin>>row>>col;
    if(row<0 || col<0 || row>=size || col>=size){
        cout<<""invalid index write again\n"";
        return EnterValue(p);
    }
    if(board[row][col]!='.'){
        cout<<""value is already filled in index write again\n"";
        return EnterValue(p);
    }
    board[row][col]=p.sign;
    PrintBoard();
    count++;
    
    if (IsGameCompleted(row,col,p)){
        cout<<p.name<<"" won game"";
        return false;
    } 
    if(count==size*size){
        cout<<""withddraw game"";
        return false;
    }
    
    cout<<endl;
    return true;
}

void TikTacToe::PrintBoard(){
    for(int i=0;i<size;i++){
        cout<<""|"";
        for(int j=0;j<size;j++){
            cout<<board[i][j]<<""|"";
        }
        cout<<""\n--------\n"";
    }
}

bool TikTacToe::IsGameCompleted(int row, int col, Player p){
    bool valid=true;
    for(int i=0;i<size;i++){
        if(board[row][i]!=p.sign){
            valid=false;
            break;
        }
    }
    if(valid)return true;
    
    valid=true;
    for(int i=0;i<size;i++){
        if(board[i][col]!=p.sign){
            valid=false;
            break;
        }
    }
    if(valid)return true;
    
    valid=true;
    for(int i=0;i<size;i++){
        if(board[i][i]!=p.sign){
            valid=false;
            break;
        }
    }
    if(valid)return true;
    
    valid=true;
    for(int i=0;i<size;i++){
        if(board[i][size-i-1]!=p.sign){
            valid=false;
            break;
        }
    }
    if(valid)return true;
    return false;
}


int main()
{
   TikTacToe obj = TikTacToe(3);
   obj.StartGame();
   return 0;
}"
kxe1AgZR,Spammers and Scammers [7-2/2023],bombaires,HTML,Saturday 15th of July 2023 04:11:07 PM CDT,"<a href=""mailto:sales@hugeserver.com"">sales@hugeserver.com</a>
<a href=""mailto:billing@hugeserver.com"">billing@hugeserver.com</a>
<a href=""mailto:support@hugeserver.com"">support@hugeserver.com</a>
<a href=""mailto:support@qfxcinemas.com"">support@qfxcinemas.com</a>
<a href=""mailto:mattosbw2@gmail.com"">mattosbw2@gmail.com</a>
<a href=""mailto:m.a.tto.s.bw2@gmail.com"">m.a.tto.s.bw2@gmail.com</a>
<a href=""mailto:ma.t.to.s.bw.2@gmail.com"">ma.t.to.s.bw.2@gmail.com</a>
<a href=""mailto:mattos.bw2@gmail.com"">mattos.bw2@gmail.com</a>
<a href=""mailto:mat.t.osbw2@gmail.com"">mat.t.osbw2@gmail.com</a>
<a href=""mailto:m.a.t.tosb.w.2@gmail.com"">m.a.t.tosb.w.2@gmail.com</a>
<a href=""mailto:m.at.tos.b.w2@gmail.com"">m.at.tos.b.w2@gmail.com</a>
<a href=""mailto:m.a.t.t.o.s.bw2@gmail.com"">m.a.t.t.o.s.bw2@gmail.com</a>
<a href=""mailto:ma.ttos.bw.2@gmail.com"">ma.ttos.bw.2@gmail.com</a>
<a href=""mailto:mat.t.osbw.2@gmail.com"">mat.t.osbw.2@gmail.com</a>
<a href=""mailto:m.att.osb.w.2@gmail.com"">m.att.osb.w.2@gmail.com</a>
<a href=""mailto:matt.o.sb.w.2@gmail.com"">matt.o.sb.w.2@gmail.com</a>
<a href=""mailto:ma.ttosb.w2@gmail.com"">ma.ttosb.w2@gmail.com</a>
<a href=""mailto:mat.t.o.s.bw2@gmail.com"">mat.t.o.s.bw2@gmail.com</a>
<a href=""mailto:m.at.tosbw2@gmail.com"">m.at.tosbw2@gmail.com</a>
<a href=""mailto:m.at.t.o.sb.w.2@gmail.com"">m.at.t.o.sb.w.2@gmail.com</a>
<a href=""mailto:ma.t.t.osbw.2@gmail.com"">ma.t.t.osbw.2@gmail.com</a>
<a href=""mailto:m.attosb.w2@gmail.com"">m.attosb.w2@gmail.com</a>
<a href=""mailto:mat.to.sb.w2@gmail.com"">mat.to.sb.w2@gmail.com</a>
<a href=""mailto:mat.tosb.w2@gmail.com"">mat.tosb.w2@gmail.com</a>
<a href=""mailto:ma.ttosb.w.2@gmail.com"">ma.ttosb.w.2@gmail.com</a>
<a href=""mailto:m.a.t.t.o.sb.w.2@gmail.com"">m.a.t.t.o.sb.w.2@gmail.com</a>
<a href=""mailto:m.at.t.osbw2@gmail.com"">m.at.t.osbw2@gmail.com</a>
<a href=""mailto:ma.t.tosb.w2@gmail.com"">ma.t.tosb.w2@gmail.com</a>
<a href=""mailto:m.at.t.os.b.w.2@gmail.com"">m.at.t.os.b.w.2@gmail.com</a>
<a href=""mailto:m.a.tt.os.bw2@gmail.com"">m.a.tt.os.bw2@gmail.com</a>
<a href=""mailto:mat.to.s.bw2@gmail.com"">mat.to.s.bw2@gmail.com</a>
<a href=""mailto:mat.to.sbw2@gmail.com"">mat.to.sbw2@gmail.com</a>
<a href=""mailto:ma.t.t.o.s.bw.2@gmail.com"">ma.t.t.o.s.bw.2@gmail.com</a>
<a href=""mailto:m.at.t.osb.w2@gmail.com"">m.at.t.osb.w2@gmail.com</a>
<a href=""mailto:mat.t.os.bw.2@gmail.com"">mat.t.os.bw.2@gmail.com</a>
<a href=""mailto:m.at.t.o.s.bw.2@gmail.com"">m.at.t.o.s.bw.2@gmail.com</a>
<a href=""mailto:m.a.tt.os.b.w.2@gmail.com"">m.a.tt.os.b.w.2@gmail.com</a>
<a href=""mailto:ma.tto.s.b.w.2@gmail.com"">ma.tto.s.b.w.2@gmail.com</a>
<a href=""mailto:m.atto.sbw2@gmail.com"">m.atto.sbw2@gmail.com</a>
<a href=""mailto:matt.os.bw.2@gmail.com"">matt.os.bw.2@gmail.com</a>
<a href=""mailto:ma.tt.osb.w.2@gmail.com"">ma.tt.osb.w.2@gmail.com</a>
<a href=""mailto:matt.o.s.b.w.2@gmail.com"">matt.o.s.b.w.2@gmail.com</a>
<a href=""mailto:m.a.t.to.sbw2@gmail.com"">m.a.t.to.sbw2@gmail.com</a>
<a href=""mailto:m.at.t.o.s.bw2@gmail.com"">m.at.t.o.s.bw2@gmail.com</a>
<a href=""mailto:ma.tto.sbw.2@gmail.com"">ma.tto.sbw.2@gmail.com</a>
<a href=""mailto:m.atto.sb.w2@gmail.com"">m.atto.sb.w2@gmail.com</a>
<a href=""mailto:matto.s.b.w2@gmail.com"">matto.s.b.w2@gmail.com</a>
<a href=""mailto:m.at.tos.bw.2@gmail.com"">m.at.tos.bw.2@gmail.com</a>
<a href=""mailto:mat.to.sbw.2@gmail.com"">mat.to.sbw.2@gmail.com</a>
<a href=""mailto:ma.tto.sb.w.2@gmail.com"">ma.tto.sb.w.2@gmail.com</a>
<a href=""mailto:ma.t.t.o.sbw2@gmail.com"">ma.t.t.o.sbw2@gmail.com</a>
<a href=""mailto:ma.t.tosb.w.2@gmail.com"">ma.t.tosb.w.2@gmail.com</a>
<a href=""mailto:matto.sbw2@gmail.com"">matto.sbw2@gmail.com</a>
<a href=""mailto:m.att.os.b.w.2@gmail.com"">m.att.os.b.w.2@gmail.com</a>
<a href=""mailto:matt.os.b.w2@gmail.com"">matt.os.b.w2@gmail.com</a>
<a href=""mailto:m.att.o.s.b.w.2@gmail.com"">m.att.o.s.b.w.2@gmail.com</a>
<a href=""mailto:mattosbw.2@gmail.com"">mattosbw.2@gmail.com</a>
<a href=""mailto:m.a.t.t.os.b.w2@gmail.com"">m.a.t.t.os.b.w2@gmail.com</a>
<a href=""mailto:m.at.t.o.s.b.w.2@gmail.com"">m.at.t.o.s.b.w.2@gmail.com</a>
<a href=""mailto:m.at.t.os.bw.2@gmail.com"">m.at.t.os.bw.2@gmail.com</a>
<a href=""mailto:matt.osbw.2@gmail.com"">matt.osbw.2@gmail.com</a>
<a href=""mailto:mattosbw2@gmail.com"">mattosbw2@gmail.com</a>
<a href=""mailto:mat.t.o.s.b.w2@gmail.com"">mat.t.o.s.b.w2@gmail.com</a>
<a href=""mailto:m.att.o.sbw2@gmail.com"">m.att.o.sbw2@gmail.com</a>
<a href=""mailto:ma.tt.o.s.b.w2@gmail.com"">ma.tt.o.s.b.w2@gmail.com</a>
<a href=""mailto:ma.t.t.os.bw.2@gmail.com"">ma.t.t.os.bw.2@gmail.com</a>
<a href=""mailto:ma.t.t.o.s.bw2@gmail.com"">ma.t.t.o.s.bw2@gmail.com</a>
<a href=""mailto:m.at.t.o.sb.w2@gmail.com"">m.at.t.o.sb.w2@gmail.com</a>
<a href=""mailto:m.a.tt.o.s.b.w2@gmail.com"">m.a.tt.o.s.b.w2@gmail.com</a>
<a href=""mailto:mat.t.os.bw2@gmail.com"">mat.t.os.bw2@gmail.com</a>
<a href=""mailto:m.a.t.t.o.s.b.w.2@gmail.com"">m.a.t.t.o.s.b.w.2@gmail.com</a>
<a href=""mailto:matto.s.b.w.2@gmail.com"">matto.s.b.w.2@gmail.com</a>
<a href=""mailto:matto.sb.w.2@gmail.com"">matto.sb.w.2@gmail.com</a>
<a href=""mailto:m.a.tto.s.b.w2@gmail.com"">m.a.tto.s.b.w2@gmail.com</a>
<a href=""mailto:ma.tt.os.b.w2@gmail.com"">ma.tt.os.b.w2@gmail.com</a>
<a href=""mailto:m.att.osb.w2@gmail.com"">m.att.osb.w2@gmail.com</a>
<a href=""mailto:mat.tosb.w.2@gmail.com"">mat.tosb.w.2@gmail.com</a>
<a href=""mailto:ma.tt.osb.w2@gmail.com"">ma.tt.osb.w2@gmail.com</a>
<a href=""mailto:ma.tt.o.sb.w2@gmail.com"">ma.tt.o.sb.w2@gmail.com</a>
<a href=""mailto:ma.t.tos.bw.2@gmail.com"">ma.t.tos.bw.2@gmail.com</a>
<a href=""mailto:m.a.t.to.s.bw.2@gmail.com"">m.a.t.to.s.bw.2@gmail.com</a>
<a href=""mailto:ma.tt.o.s.bw.2@gmail.com"">ma.tt.o.s.bw.2@gmail.com</a>
<a href=""mailto:ma.tt.o.sb.w.2@gmail.com"">ma.tt.o.sb.w.2@gmail.com</a>
<a href=""mailto:ma.tt.osbw.2@gmail.com"">ma.tt.osbw.2@gmail.com</a>
<a href=""mailto:m.at.t.o.sbw.2@gmail.com"">m.at.t.o.sbw.2@gmail.com</a>
<a href=""mailto:mat.to.sb.w.2@gmail.com"">mat.to.sb.w.2@gmail.com</a>
<a href=""mailto:mat.t.o.s.b.w.2@gmail.com"">mat.t.o.s.b.w.2@gmail.com</a>
<a href=""mailto:m.a.t.tosbw2@gmail.com"">m.a.t.tosbw2@gmail.com</a>
<a href=""mailto:ma.t.t.osb.w2@gmail.com"">ma.t.t.osb.w2@gmail.com</a>
<a href=""mailto:m.atto.sb.w.2@gmail.com"">m.atto.sb.w.2@gmail.com</a>
<a href=""mailto:m.attosbw.2@gmail.com"">m.attosbw.2@gmail.com</a>
<a href=""mailto:mat.to.s.bw.2@gmail.com"">mat.to.s.bw.2@gmail.com</a>
<a href=""mailto:m.at.tosbw.2@gmail.com"">m.at.tosbw.2@gmail.com</a>
<a href=""mailto:m.at.to.sbw2@gmail.com"">m.at.to.sbw2@gmail.com</a>
<a href=""mailto:m.a.tt.osbw.2@gmail.com"">m.a.tt.osbw.2@gmail.com</a>
<a href=""mailto:m.att.o.s.bw.2@gmail.com"">m.att.o.s.bw.2@gmail.com</a>
<a href=""mailto:m.a.t.t.o.s.bw.2@gmail.com"">m.a.t.t.o.s.bw.2@gmail.com</a>
<a href=""mailto:m.attos.b.w.2@gmail.com"">m.attos.b.w.2@gmail.com</a>
<a href=""mailto:mattosb.w2@gmail.com"">mattosb.w2@gmail.com</a>
<a href=""mailto:m.a.t.t.o.sbw2@gmail.com"">m.a.t.t.o.sbw2@gmail.com</a>
<a href=""mailto:m.at.to.s.bw.2@gmail.com"">m.at.to.s.bw.2@gmail.com</a>
<a href=""mailto:ma.ttos.b.w2@gmail.com"">ma.ttos.b.w2@gmail.com</a>
<a href=""mailto:m.a.ttos.bw2@gmail.com"">m.a.ttos.bw2@gmail.com</a>
<a href=""mailto:mat.t.osb.w2@gmail.com"">mat.t.osb.w2@gmail.com</a>
<a href=""mailto:m.at.tosb.w.2@gmail.com"">m.at.tosb.w.2@gmail.com</a>
<a href=""mailto:ma.t.tos.bw2@gmail.com"">ma.t.tos.bw2@gmail.com</a>
<a href=""mailto:ma.t.t.o.s.b.w.2@gmail.com"">ma.t.t.o.s.b.w.2@gmail.com</a>
<a href=""mailto:m.att.o.sb.w.2@gmail.com"">m.att.o.sb.w.2@gmail.com</a>
<a href=""mailto:matt.o.sb.w2@gmail.com"">matt.o.sb.w2@gmail.com</a>
<a href=""mailto:m.a.ttosbw2@gmail.com"">m.a.ttosbw2@gmail.com</a>
<a href=""mailto:m.a.tto.sb.w2@gmail.com"">m.a.tto.sb.w2@gmail.com</a>
<a href=""mailto:m.a.ttosb.w.2@gmail.com"">m.a.ttosb.w.2@gmail.com</a>
<a href=""mailto:ma.t.t.os.b.w2@gmail.com"">ma.t.t.os.b.w2@gmail.com</a>
<a href=""mailto:m.a.tto.sbw.2@gmail.com"">m.a.tto.sbw.2@gmail.com</a>
<a href=""mailto:matt.o.s.bw.2@gmail.com"">matt.o.s.bw.2@gmail.com</a>
<a href=""mailto:m.a.tt.o.sbw.2@gmail.com"">m.a.tt.o.sbw.2@gmail.com</a>
<a href=""mailto:ma.t.to.s.bw2@gmail.com"">ma.t.to.s.bw2@gmail.com</a>
<a href=""mailto:m.a.tt.os.bw.2@gmail.com"">m.a.tt.os.bw.2@gmail.com</a>
<a href=""mailto:m.a.t.tos.b.w2@gmail.com"">m.a.t.tos.b.w2@gmail.com</a>
<a href=""mailto:m.at.tosb.w2@gmail.com"">m.at.tosb.w2@gmail.com</a>
<a href=""mailto:m.at.t.o.s.b.w2@gmail.com"">m.at.t.o.s.b.w2@gmail.com</a>
<a href=""mailto:m.att.o.sbw.2@gmail.com"">m.att.o.sbw.2@gmail.com</a>
<a href=""mailto:ma.tto.sb.w2@gmail.com"">ma.tto.sb.w2@gmail.com</a>
<a href=""mailto:m.a.tto.sbw2@gmail.com"">m.a.tto.sbw2@gmail.com</a>
<a href=""mailto:mat.tosbw2@gmail.com"">mat.tosbw2@gmail.com</a>
<a href=""mailto:matt.os.b.w.2@gmail.com"">matt.os.b.w.2@gmail.com</a>
<a href=""mailto:m.a.t.t.osbw.2@gmail.com"">m.a.t.t.osbw.2@gmail.com</a>
<a href=""mailto:ma.t.to.sb.w2@gmail.com"">ma.t.to.sb.w2@gmail.com</a>
<a href=""mailto:ma.tto.s.bw.2@gmail.com"">ma.tto.s.bw.2@gmail.com</a>
<a href=""mailto:m.at.to.sbw.2@gmail.com"">m.at.to.sbw.2@gmail.com</a>
<a href=""mailto:m.at.t.os.b.w2@gmail.com"">m.at.t.os.b.w2@gmail.com</a>
<a href=""mailto:ma.t.t.o.sb.w.2@gmail.com"">ma.t.t.o.sb.w.2@gmail.com</a>
<a href=""mailto:ma.tto.sbw2@gmail.com"">ma.tto.sbw2@gmail.com</a>
<a href=""mailto:mat.t.os.b.w2@gmail.com"">mat.t.os.b.w2@gmail.com</a>
<a href=""mailto:ma.tt.o.sbw.2@gmail.com"">ma.tt.o.sbw.2@gmail.com</a>
<a href=""mailto:ma.t.to.sb.w.2@gmail.com"">ma.t.to.sb.w.2@gmail.com</a>
<a href=""mailto:m.at.t.o.sbw2@gmail.com"">m.at.t.o.sbw2@gmail.com</a>
<a href=""mailto:mat.tos.bw2@gmail.com"">mat.tos.bw2@gmail.com</a>
<a href=""mailto:mat.tos.bw.2@gmail.com"">mat.tos.bw.2@gmail.com</a>
<a href=""mailto:m.a.t.t.osbw2@gmail.com"">m.a.t.t.osbw2@gmail.com</a>
<a href=""mailto:ma.t.to.sbw2@gmail.com"">ma.t.to.sbw2@gmail.com</a>
<a href=""mailto:m.att.osbw2@gmail.com"">m.att.osbw2@gmail.com</a>
<a href=""mailto:m.a.tt.osbw2@gmail.com"">m.a.tt.osbw2@gmail.com</a>
<a href=""mailto:mat.tos.b.w2@gmail.com"">mat.tos.b.w2@gmail.com</a>
<a href=""mailto:ma.t.tos.b.w.2@gmail.com"">ma.t.tos.b.w.2@gmail.com</a>
<a href=""mailto:m.a.ttos.b.w2@gmail.com"">m.a.ttos.b.w2@gmail.com</a>
<a href=""mailto:mat.t.o.sb.w.2@gmail.com"">mat.t.o.sb.w.2@gmail.com</a>
<a href=""mailto:ma.ttosbw2@gmail.com"">ma.ttosbw2@gmail.com</a>
<a href=""mailto:m.a.t.to.sb.w.2@gmail.com"">m.a.t.to.sb.w.2@gmail.com</a>
<a href=""mailto:m.a.t.t.osb.w.2@gmail.com"">m.a.t.t.osb.w.2@gmail.com</a>
<a href=""mailto:ma.t.t.o.sb.w2@gmail.com"">ma.t.t.o.sb.w2@gmail.com</a>
<a href=""mailto:m.a.ttos.bw.2@gmail.com"">m.a.ttos.bw.2@gmail.com</a>
<a href=""mailto:m.att.os.b.w2@gmail.com"">m.att.os.b.w2@gmail.com</a>
<a href=""mailto:m.at.t.os.bw2@gmail.com"">m.at.t.os.bw2@gmail.com</a>
<a href=""mailto:matt.os.bw2@gmail.com"">matt.os.bw2@gmail.com</a>
<a href=""mailto:m.a.tt.o.s.bw2@gmail.com"">m.a.tt.o.s.bw2@gmail.com</a>
<a href=""mailto:m.a.t.tos.bw2@gmail.com"">m.a.t.tos.bw2@gmail.com</a>
<a href=""mailto:m.a.tt.o.s.b.w.2@gmail.com"">m.a.tt.o.s.b.w.2@gmail.com</a>
<a href=""mailto:m.a.t.t.o.s.b.w2@gmail.com"">m.a.t.t.o.s.b.w2@gmail.com</a>
<a href=""mailto:m.a.t.tos.bw.2@gmail.com"">m.a.t.tos.bw.2@gmail.com</a>
<a href=""mailto:m.a.t.to.s.b.w2@gmail.com"">m.a.t.to.s.b.w2@gmail.com</a>
<a href=""mailto:m.a.tt.o.sb.w2@gmail.com"">m.a.tt.o.sb.w2@gmail.com</a>
<a href=""mailto:mat.t.o.s.bw.2@gmail.com"">mat.t.o.s.bw.2@gmail.com</a>
<a href=""mailto:ma.tt.os.bw2@gmail.com"">ma.tt.os.bw2@gmail.com</a>
<a href=""mailto:m.a.t.to.s.b.w.2@gmail.com"">m.a.t.to.s.b.w.2@gmail.com</a>
<a href=""mailto:ma.t.tos.b.w2@gmail.com"">ma.t.tos.b.w2@gmail.com</a>
<a href=""mailto:m.a.t.to.s.bw2@gmail.com"">m.a.t.to.s.bw2@gmail.com</a>
<a href=""mailto:m.atto.s.b.w2@gmail.com"">m.atto.s.b.w2@gmail.com</a>
<a href=""mailto:m.at.to.s.b.w.2@gmail.com"">m.at.to.s.b.w.2@gmail.com</a>
<a href=""mailto:m.a.tt.osb.w.2@gmail.com"">m.a.tt.osb.w.2@gmail.com</a>
<a href=""mailto:ma.tto.s.bw2@gmail.com"">ma.tto.s.bw2@gmail.com</a>
<a href=""mailto:m.atto.sbw.2@gmail.com"">m.atto.sbw.2@gmail.com</a>
<a href=""mailto:m.a.t.t.os.b.w.2@gmail.com"">m.a.t.t.os.b.w.2@gmail.com</a>
<a href=""mailto:m.at.t.osb.w.2@gmail.com"">m.at.t.osb.w.2@gmail.com</a>
<a href=""mailto:matto.sb.w2@gmail.com"">matto.sb.w2@gmail.com</a>
<a href=""mailto:m.attos.bw2@gmail.com"">m.attos.bw2@gmail.com</a>
<a href=""mailto:m.att.o.sb.w2@gmail.com"">m.att.o.sb.w2@gmail.com</a>
<a href=""mailto:mat.to.s.b.w.2@gmail.com"">mat.to.s.b.w.2@gmail.com</a>
<a href=""mailto:mat.tos.b.w.2@gmail.com"">mat.tos.b.w.2@gmail.com</a>
<a href=""mailto:m.atto.s.bw2@gmail.com"">m.atto.s.bw2@gmail.com</a>
<a href=""mailto:m.att.os.bw2@gmail.com"">m.att.os.bw2@gmail.com</a>
<a href=""mailto:m.a.ttos.b.w.2@gmail.com"">m.a.ttos.b.w.2@gmail.com</a>
<a href=""mailto:m.a.t.t.osb.w2@gmail.com"">m.a.t.t.osb.w2@gmail.com</a>
<a href=""mailto:mat.t.o.sbw2@gmail.com"">mat.t.o.sbw2@gmail.com</a>
<a href=""mailto:mattosb.w.2@gmail.com"">mattosb.w.2@gmail.com</a>
<a href=""mailto:ma.ttos.bw2@gmail.com"">ma.ttos.bw2@gmail.com</a>
<a href=""mailto:mattos.b.w.2@gmail.com"">mattos.b.w.2@gmail.com</a>
<a href=""mailto:matt.o.s.b.w2@gmail.com"">matt.o.s.b.w2@gmail.com</a>
<a href=""mailto:ma.t.t.o.sbw.2@gmail.com"">ma.t.t.o.sbw.2@gmail.com</a>
<a href=""mailto:m.attosb.w.2@gmail.com"">m.attosb.w.2@gmail.com</a>
<a href=""mailto:mat.t.o.sb.w2@gmail.com"">mat.t.o.sb.w2@gmail.com</a>
<a href=""mailto:m.at.to.s.b.w2@gmail.com"">m.at.to.s.b.w2@gmail.com</a>
<a href=""mailto:ma.ttosbw.2@gmail.com"">ma.ttosbw.2@gmail.com</a>
<a href=""mailto:m.a.t.tosb.w2@gmail.com"">m.a.t.tosb.w2@gmail.com</a>
<a href=""mailto:m.attosbw2@gmail.com"">m.attosbw2@gmail.com</a>
<a href=""mailto:ma.tt.os.bw.2@gmail.com"">ma.tt.os.bw.2@gmail.com</a>
<a href=""mailto:ma.ttos.b.w.2@gmail.com"">ma.ttos.b.w.2@gmail.com</a>
<a href=""mailto:m.att.osbw.2@gmail.com"">m.att.osbw.2@gmail.com</a>
<a href=""mailto:m.a.t.t.o.sb.w2@gmail.com"">m.a.t.t.o.sb.w2@gmail.com</a>
<a href=""mailto:matto.sbw.2@gmail.com"">matto.sbw.2@gmail.com</a>
<a href=""mailto:matt.osbw2@gmail.com"">matt.osbw2@gmail.com</a>
<a href=""mailto:matto.s.bw2@gmail.com"">matto.s.bw2@gmail.com</a>
<a href=""mailto:m.a.ttosbw.2@gmail.com"">m.a.ttosbw.2@gmail.com</a>
<a href=""mailto:m.a.tto.s.bw.2@gmail.com"">m.a.tto.s.bw.2@gmail.com</a>
<a href=""mailto:m.at.to.sb.w.2@gmail.com"">m.at.to.sb.w.2@gmail.com</a>
<a href=""mailto:mattosbw1@gmail.com"">mattosbw1@gmail.com</a>
<a href=""mailto:m.at.tos.b.w1@gmail.com"">m.at.tos.b.w1@gmail.com</a>
<a href=""mailto:m.att.os.b.w.1@gmail.com"">m.att.os.b.w.1@gmail.com</a>
<a href=""mailto:ma.ttos.b.w.1@gmail.com"">ma.ttos.b.w.1@gmail.com</a>
<a href=""mailto:ma.ttos.bw.1@gmail.com"">ma.ttos.bw.1@gmail.com</a>
<a href=""mailto:ma.t.tosbw.1@gmail.com"">ma.t.tosbw.1@gmail.com</a>
<a href=""mailto:matto.s.bw.1@gmail.com"">matto.s.bw.1@gmail.com</a>
<a href=""mailto:m.a.t.to.sbw1@gmail.com"">m.a.t.to.sbw1@gmail.com</a>
<a href=""mailto:matt.o.s.b.w.1@gmail.com"">matt.o.s.b.w.1@gmail.com</a>
<a href=""mailto:m.at.to.sbw.1@gmail.com"">m.at.to.sbw.1@gmail.com</a>
<a href=""mailto:m.a.t.to.sb.w.1@gmail.com"">m.a.t.to.sb.w.1@gmail.com</a>
<a href=""mailto:ma.tto.s.bw.1@gmail.com"">ma.tto.s.bw.1@gmail.com</a>
<a href=""mailto:m.att.osb.w1@gmail.com"">m.att.osb.w1@gmail.com</a>
<a href=""mailto:ma.tto.s.bw1@gmail.com"">ma.tto.s.bw1@gmail.com</a>
<a href=""mailto:ma.t.t.osbw.1@gmail.com"">ma.t.t.osbw.1@gmail.com</a>
<a href=""mailto:m.atto.s.b.w.1@gmail.com"">m.atto.s.b.w.1@gmail.com</a>
<a href=""mailto:m.a.t.tosbw.1@gmail.com"">m.a.t.tosbw.1@gmail.com</a>
<a href=""mailto:matt.o.s.bw1@gmail.com"">matt.o.s.bw1@gmail.com</a>
<a href=""mailto:matt.osbw.1@gmail.com"">matt.osbw.1@gmail.com</a>
<a href=""mailto:m.a.t.t.os.b.w.1@gmail.com"">m.a.t.t.os.b.w.1@gmail.com</a>
<a href=""mailto:m.at.t.osb.w.1@gmail.com"">m.at.t.osb.w.1@gmail.com</a>
<a href=""mailto:ma.tto.sb.w.1@gmail.com"">ma.tto.sb.w.1@gmail.com</a>
<a href=""mailto:m.att.o.sb.w.1@gmail.com"">m.att.o.sb.w.1@gmail.com</a>
<a href=""mailto:ma.tt.o.s.bw.1@gmail.com"">ma.tt.o.s.bw.1@gmail.com</a>
<a href=""mailto:ma.t.tos.b.w.1@gmail.com"">ma.t.tos.b.w.1@gmail.com</a>
<a href=""mailto:mat.to.sb.w.1@gmail.com"">mat.to.sb.w.1@gmail.com</a>
<a href=""mailto:m.att.os.bw1@gmail.com"">m.att.os.bw1@gmail.com</a>
<a href=""mailto:mat.tosbw1@gmail.com"">mat.tosbw1@gmail.com</a>
<a href=""mailto:m.a.ttos.bw.1@gmail.com"">m.a.ttos.bw.1@gmail.com</a>
<a href=""mailto:ma.t.t.o.sbw1@gmail.com"">ma.t.t.o.sbw1@gmail.com</a>
<a href=""mailto:mat.t.osbw.1@gmail.com"">mat.t.osbw.1@gmail.com</a>
<a href=""mailto:mattosbw.1@gmail.com"">mattosbw.1@gmail.com</a>
<a href=""mailto:ma.t.to.sb.w1@gmail.com"">ma.t.to.sb.w1@gmail.com</a>
<a href=""mailto:m.at.t.o.s.b.w.1@gmail.com"">m.at.t.o.s.b.w.1@gmail.com</a>
<a href=""mailto:ma.tto.sbw1@gmail.com"">ma.tto.sbw1@gmail.com</a>
<a href=""mailto:m.a.t.t.o.sbw1@gmail.com"">m.a.t.t.o.sbw1@gmail.com</a>
<a href=""mailto:m.attosb.w.1@gmail.com"">m.attosb.w.1@gmail.com</a>
<a href=""mailto:m.at.t.osbw.1@gmail.com"">m.at.t.osbw.1@gmail.com</a>
<a href=""mailto:m.a.tt.o.s.b.w.1@gmail.com"">m.a.tt.o.s.b.w.1@gmail.com</a>
<a href=""mailto:mat.tosbw.1@gmail.com"">mat.tosbw.1@gmail.com</a>
<a href=""mailto:ma.t.tosbw1@gmail.com"">ma.t.tosbw1@gmail.com</a>
<a href=""mailto:ma.tto.sbw.1@gmail.com"">ma.tto.sbw.1@gmail.com</a>
<a href=""mailto:ma.t.t.o.s.b.w.1@gmail.com"">ma.t.t.o.s.b.w.1@gmail.com</a>
<a href=""mailto:ma.tt.osb.w1@gmail.com"">ma.tt.osb.w1@gmail.com</a>
<a href=""mailto:mat.t.os.b.w1@gmail.com"">mat.t.os.b.w1@gmail.com</a>
<a href=""mailto:mat.t.o.s.bw1@gmail.com"">mat.t.o.s.bw1@gmail.com</a>
<a href=""mailto:matt.o.s.b.w1@gmail.com"">matt.o.s.b.w1@gmail.com</a>
<a href=""mailto:m.atto.sbw.1@gmail.com"">m.atto.sbw.1@gmail.com</a>
<a href=""mailto:m.a.t.tos.bw.1@gmail.com"">m.a.t.tos.bw.1@gmail.com</a>
<a href=""mailto:matto.s.b.w.1@gmail.com"">matto.s.b.w.1@gmail.com</a>
<a href=""mailto:ma.tto.s.b.w1@gmail.com"">ma.tto.s.b.w1@gmail.com</a>
<a href=""mailto:mat.t.os.bw1@gmail.com"">mat.t.os.bw1@gmail.com</a>
<a href=""mailto:m.atto.sb.w.1@gmail.com"">m.atto.sb.w.1@gmail.com</a>
<a href=""mailto:m.att.o.s.bw.1@gmail.com"">m.att.o.s.bw.1@gmail.com</a>
<a href=""mailto:m.a.t.t.os.bw.1@gmail.com"">m.a.t.t.os.bw.1@gmail.com</a>
<a href=""mailto:m.at.to.s.bw.1@gmail.com"">m.at.to.s.bw.1@gmail.com</a>
<a href=""mailto:ma.tt.os.b.w1@gmail.com"">ma.tt.os.b.w1@gmail.com</a>
<a href=""mailto:m.att.o.s.bw1@gmail.com"">m.att.o.s.bw1@gmail.com</a>
<a href=""mailto:ma.t.tos.bw.1@gmail.com"">ma.t.tos.bw.1@gmail.com</a>
<a href=""mailto:ma.tt.o.s.bw1@gmail.com"">ma.tt.o.s.bw1@gmail.com</a>
<a href=""mailto:m.a.t.to.sb.w1@gmail.com"">m.a.t.to.sb.w1@gmail.com</a>
<a href=""mailto:m.a.t.t.osb.w1@gmail.com"">m.a.t.t.osb.w1@gmail.com</a>
<a href=""mailto:m.atto.s.b.w1@gmail.com"">m.atto.s.b.w1@gmail.com</a>
<a href=""mailto:mat.to.s.bw1@gmail.com"">mat.to.s.bw1@gmail.com</a>
<a href=""mailto:mat.tos.bw.1@gmail.com"">mat.tos.bw.1@gmail.com</a>
<a href=""mailto:m.a.t.t.o.s.b.w1@gmail.com"">m.a.t.t.o.s.b.w1@gmail.com</a>
<a href=""mailto:m.at.to.s.b.w1@gmail.com"">m.at.to.s.b.w1@gmail.com</a>
<a href=""mailto:ma.tt.osbw.1@gmail.com"">ma.tt.osbw.1@gmail.com</a>
<a href=""mailto:m.att.osbw1@gmail.com"">m.att.osbw1@gmail.com</a>
<a href=""mailto:m.at.t.os.bw1@gmail.com"">m.at.t.os.bw1@gmail.com</a>
<a href=""mailto:m.a.tto.sbw1@gmail.com"">m.a.tto.sbw1@gmail.com</a>
<a href=""mailto:mat.tos.bw1@gmail.com"">mat.tos.bw1@gmail.com</a>
<a href=""mailto:m.a.tt.os.b.w.1@gmail.com"">m.a.tt.os.b.w.1@gmail.com</a>
<a href=""mailto:ma.t.t.osb.w.1@gmail.com"">ma.t.t.osb.w.1@gmail.com</a>
<a href=""mailto:m.at.to.s.b.w.1@gmail.com"">m.at.to.s.b.w.1@gmail.com</a>
<a href=""mailto:mattos.bw.1@gmail.com"">mattos.bw.1@gmail.com</a>
<a href=""mailto:mat.t.os.b.w.1@gmail.com"">mat.t.os.b.w.1@gmail.com</a>
<a href=""mailto:m.a.tto.s.b.w1@gmail.com"">m.a.tto.s.b.w1@gmail.com</a>
<a href=""mailto:m.a.ttos.bw1@gmail.com"">m.a.ttos.bw1@gmail.com</a>
<a href=""mailto:m.at.tosb.w.1@gmail.com"">m.at.tosb.w.1@gmail.com</a>
<a href=""mailto:m.at.tos.bw1@gmail.com"">m.at.tos.bw1@gmail.com</a>
<a href=""mailto:ma.tto.s.b.w.1@gmail.com"">ma.tto.s.b.w.1@gmail.com</a>
<a href=""mailto:m.at.t.o.sbw.1@gmail.com"">m.at.t.o.sbw.1@gmail.com</a>
<a href=""mailto:mat.t.o.sb.w.1@gmail.com"">mat.t.o.sb.w.1@gmail.com</a>
<a href=""mailto:m.a.ttosb.w.1@gmail.com"">m.a.ttosb.w.1@gmail.com</a>
<a href=""mailto:ma.tt.o.sbw1@gmail.com"">ma.tt.o.sbw1@gmail.com</a>
<a href=""mailto:mat.to.sbw.1@gmail.com"">mat.to.sbw.1@gmail.com</a>
<a href=""mailto:ma.t.t.o.s.b.w1@gmail.com"">ma.t.t.o.s.b.w1@gmail.com</a>
<a href=""mailto:m.a.tt.o.s.bw.1@gmail.com"">m.a.tt.o.s.bw.1@gmail.com</a>
<a href=""mailto:mat.t.osbw1@gmail.com"">mat.t.osbw1@gmail.com</a>
<a href=""mailto:matto.sbw.1@gmail.com"">matto.sbw.1@gmail.com</a>
<a href=""mailto:m.a.t.to.s.b.w.1@gmail.com"">m.a.t.to.s.b.w.1@gmail.com</a>
<a href=""mailto:m.at.to.sb.w.1@gmail.com"">m.at.to.sb.w.1@gmail.com</a>
<a href=""mailto:m.at.t.o.s.b.w1@gmail.com"">m.at.t.o.s.b.w1@gmail.com</a>
<a href=""mailto:ma.tt.os.b.w.1@gmail.com"">ma.tt.os.b.w.1@gmail.com</a>
<a href=""mailto:ma.t.to.sb.w.1@gmail.com"">ma.t.to.sb.w.1@gmail.com</a>
<a href=""mailto:m.atto.s.bw.1@gmail.com"">m.atto.s.bw.1@gmail.com</a>
<a href=""mailto:mat.tos.b.w.1@gmail.com"">mat.tos.b.w.1@gmail.com</a>
<a href=""mailto:mat.to.sb.w1@gmail.com"">mat.to.sb.w1@gmail.com</a>
<a href=""mailto:m.a.t.t.os.b.w1@gmail.com"">m.a.t.t.os.b.w1@gmail.com</a>
<a href=""mailto:m.a.t.t.os.bw1@gmail.com"">m.a.t.t.os.bw1@gmail.com</a>
<a href=""mailto:m.at.t.os.bw.1@gmail.com"">m.at.t.os.bw.1@gmail.com</a>
<a href=""mailto:m.at.tosb.w1@gmail.com"">m.at.tosb.w1@gmail.com</a>
<a href=""mailto:m.att.osbw.1@gmail.com"">m.att.osbw.1@gmail.com</a>
<a href=""mailto:m.a.t.t.osbw.1@gmail.com"">m.a.t.t.osbw.1@gmail.com</a>
<a href=""mailto:m.a.t.tosb.w1@gmail.com"">m.a.t.tosb.w1@gmail.com</a>
<a href=""mailto:m.a.ttos.b.w1@gmail.com"">m.a.ttos.b.w1@gmail.com</a>
<a href=""mailto:ma.ttos.b.w1@gmail.com"">ma.ttos.b.w1@gmail.com</a>
<a href=""mailto:ma.tt.o.sb.w.1@gmail.com"">ma.tt.o.sb.w.1@gmail.com</a>
<a href=""mailto:matt.os.bw.1@gmail.com"">matt.os.bw.1@gmail.com</a>
<a href=""mailto:mattosb.w1@gmail.com"">mattosb.w1@gmail.com</a>
<a href=""mailto:mattosb.w.1@gmail.com"">mattosb.w.1@gmail.com</a>
<a href=""mailto:ma.t.tos.bw1@gmail.com"">ma.t.tos.bw1@gmail.com</a>
<a href=""mailto:ma.t.to.s.b.w1@gmail.com"">ma.t.to.s.b.w1@gmail.com</a>
<a href=""mailto:ma.ttosb.w.1@gmail.com"">ma.ttosb.w.1@gmail.com</a>
<a href=""mailto:ma.t.t.os.bw.1@gmail.com"">ma.t.t.os.bw.1@gmail.com</a>
<a href=""mailto:m.a.t.to.s.bw.1@gmail.com"">m.a.t.to.s.bw.1@gmail.com</a>
<a href=""mailto:m.att.o.sbw1@gmail.com"">m.att.o.sbw1@gmail.com</a>
<a href=""mailto:mat.to.s.b.w.1@gmail.com"">mat.to.s.b.w.1@gmail.com</a>
<a href=""mailto:m.a.tt.osbw.1@gmail.com"">m.a.tt.osbw.1@gmail.com</a>
<a href=""mailto:m.a.t.tos.b.w.1@gmail.com"">m.a.t.tos.b.w.1@gmail.com</a>
<a href=""mailto:m.attos.b.w.1@gmail.com"">m.attos.b.w.1@gmail.com</a>
<a href=""mailto:m.atto.sb.w1@gmail.com"">m.atto.sb.w1@gmail.com</a>
<a href=""mailto:matt.osb.w1@gmail.com"">matt.osb.w1@gmail.com</a>
<a href=""mailto:ma.t.t.os.bw1@gmail.com"">ma.t.t.os.bw1@gmail.com</a>
<a href=""mailto:ma.t.t.osb.w1@gmail.com"">ma.t.t.osb.w1@gmail.com</a>
<a href=""mailto:mat.tosb.w.1@gmail.com"">mat.tosb.w.1@gmail.com</a>
<a href=""mailto:ma.t.t.o.s.bw.1@gmail.com"">ma.t.t.o.s.bw.1@gmail.com</a>
<a href=""mailto:ma.tt.os.bw1@gmail.com"">ma.tt.os.bw1@gmail.com</a>
<a href=""mailto:m.a.t.t.o.s.bw1@gmail.com"">m.a.t.t.o.s.bw1@gmail.com</a>
<a href=""mailto:m.a.tt.os.b.w1@gmail.com"">m.a.tt.os.b.w1@gmail.com</a>
<a href=""mailto:mattos.bw1@gmail.com"">mattos.bw1@gmail.com</a>
<a href=""mailto:ma.t.t.osbw1@gmail.com"">ma.t.t.osbw1@gmail.com</a>
<a href=""mailto:mat.to.sbw1@gmail.com"">mat.to.sbw1@gmail.com</a>
<a href=""mailto:m.a.t.t.o.sb.w1@gmail.com"">m.a.t.t.o.sb.w1@gmail.com</a>
<a href=""mailto:m.a.tto.s.b.w.1@gmail.com"">m.a.tto.s.b.w.1@gmail.com</a>
<a href=""mailto:mat.t.o.s.b.w.1@gmail.com"">mat.t.o.s.b.w.1@gmail.com</a>
<a href=""mailto:m.a.tto.s.bw1@gmail.com"">m.a.tto.s.bw1@gmail.com</a>
<a href=""mailto:ma.t.to.s.b.w.1@gmail.com"">ma.t.to.s.b.w.1@gmail.com</a>
<a href=""mailto:ma.t.t.o.s.bw1@gmail.com"">ma.t.t.o.s.bw1@gmail.com</a>
<a href=""mailto:m.a.tto.sb.w.1@gmail.com"">m.a.tto.sb.w.1@gmail.com</a>
<a href=""mailto:m.attos.bw1@gmail.com"">m.attos.bw1@gmail.com</a>
<a href=""mailto:mattos.b.w1@gmail.com"">mattos.b.w1@gmail.com</a>
<a href=""mailto:m.a.ttosb.w1@gmail.com"">m.a.ttosb.w1@gmail.com</a>
<a href=""mailto:ma.ttosbw.1@gmail.com"">ma.ttosbw.1@gmail.com</a>
<a href=""mailto:ma.tt.o.s.b.w1@gmail.com"">ma.tt.o.s.b.w1@gmail.com</a>
<a href=""mailto:m.a.ttosbw1@gmail.com"">m.a.ttosbw1@gmail.com</a>
<a href=""mailto:m.at.tos.bw.1@gmail.com"">m.at.tos.bw.1@gmail.com</a>
<a href=""mailto:matt.o.s.bw.1@gmail.com"">matt.o.s.bw.1@gmail.com</a>
<a href=""mailto:ma.t.t.os.b.w1@gmail.com"">ma.t.t.os.b.w1@gmail.com</a>
<a href=""mailto:m.a.tt.o.s.bw1@gmail.com"">m.a.tt.o.s.bw1@gmail.com</a>
<a href=""mailto:ma.t.to.s.bw.1@gmail.com"">ma.t.to.s.bw.1@gmail.com</a>
<a href=""mailto:m.a.tt.osb.w.1@gmail.com"">m.a.tt.osb.w.1@gmail.com</a>
<a href=""mailto:ma.t.tosb.w1@gmail.com"">ma.t.tosb.w1@gmail.com</a>
<a href=""mailto:matt.os.bw1@gmail.com"">matt.os.bw1@gmail.com</a>
<a href=""mailto:ma.t.t.o.sb.w.1@gmail.com"">ma.t.t.o.sb.w.1@gmail.com</a>
<a href=""mailto:ma.ttosbw1@gmail.com"">ma.ttosbw1@gmail.com</a>
<a href=""mailto:m.at.tosbw.1@gmail.com"">m.at.tosbw.1@gmail.com</a>
<a href=""mailto:matt.o.sb.w1@gmail.com"">matt.o.sb.w1@gmail.com</a>
<a href=""mailto:m.attosbw.1@gmail.com"">m.attosbw.1@gmail.com</a>
<a href=""mailto:mat.t.osb.w1@gmail.com"">mat.t.osb.w1@gmail.com</a>
<a href=""mailto:m.att.o.sbw.1@gmail.com"">m.att.o.sbw.1@gmail.com</a>
<a href=""mailto:ma.tt.o.sb.w1@gmail.com"">ma.tt.o.sb.w1@gmail.com</a>
<a href=""mailto:matt.o.sb.w.1@gmail.com"">matt.o.sb.w.1@gmail.com</a>
<a href=""mailto:mat.tos.b.w1@gmail.com"">mat.tos.b.w1@gmail.com</a>
<a href=""mailto:m.at.to.sbw1@gmail.com"">m.at.to.sbw1@gmail.com</a>
<a href=""mailto:m.a.tt.o.sb.w1@gmail.com"">m.a.tt.o.sb.w1@gmail.com</a>
<a href=""mailto:ma.t.tos.b.w1@gmail.com"">ma.t.tos.b.w1@gmail.com</a>
<a href=""mailto:ma.t.t.o.sbw.1@gmail.com"">ma.t.t.o.sbw.1@gmail.com</a>
<a href=""mailto:mattos.b.w.1@gmail.com"">mattos.b.w.1@gmail.com</a>
<a href=""mailto:m.attosbw1@gmail.com"">m.attosbw1@gmail.com</a>
<a href=""mailto:ma.tt.o.s.b.w.1@gmail.com"">ma.tt.o.s.b.w.1@gmail.com</a>
<a href=""mailto:m.atto.s.bw1@gmail.com"">m.atto.s.bw1@gmail.com</a>
<a href=""mailto:m.a.ttos.b.w.1@gmail.com"">m.a.ttos.b.w.1@gmail.com</a>
<a href=""mailto:m.a.tto.sbw.1@gmail.com"">m.a.tto.sbw.1@gmail.com</a>
<a href=""mailto:m.a.ttosbw.1@gmail.com"">m.a.ttosbw.1@gmail.com</a>
<a href=""mailto:m.a.tt.osb.w1@gmail.com"">m.a.tt.osb.w1@gmail.com</a>
<a href=""mailto:matto.sb.w.1@gmail.com"">matto.sb.w.1@gmail.com</a>
<a href=""mailto:matt.osbw1@gmail.com"">matt.osbw1@gmail.com</a>
<a href=""mailto:matto.sb.w1@gmail.com"">matto.sb.w1@gmail.com</a>
<a href=""mailto:m.a.tt.o.sbw1@gmail.com"">m.a.tt.o.sbw1@gmail.com</a>
<a href=""mailto:m.at.to.s.bw1@gmail.com"">m.at.to.s.bw1@gmail.com</a>
<a href=""mailto:m.at.t.o.s.bw.1@gmail.com"">m.at.t.o.s.bw.1@gmail.com</a>
<a href=""mailto:mat.t.osb.w.1@gmail.com"">mat.t.osb.w.1@gmail.com</a>
<a href=""mailto:m.att.o.sb.w1@gmail.com"">m.att.o.sb.w1@gmail.com</a>
<a href=""mailto:mat.to.s.b.w1@gmail.com"">mat.to.s.b.w1@gmail.com</a>
<a href=""mailto:ma.t.t.os.b.w.1@gmail.com"">ma.t.t.os.b.w.1@gmail.com</a>
<a href=""mailto:m.at.t.o.sb.w.1@gmail.com"">m.at.t.o.sb.w.1@gmail.com</a>
<a href=""mailto:m.attosb.w1@gmail.com"">m.attosb.w1@gmail.com</a>
<a href=""mailto:m.attos.bw.1@gmail.com"">m.attos.bw.1@gmail.com</a>
<a href=""mailto:matto.s.bw1@gmail.com"">matto.s.bw1@gmail.com</a>
<a href=""mailto:mat.t.os.bw.1@gmail.com"">mat.t.os.bw.1@gmail.com</a>
<a href=""mailto:mat.t.o.s.bw.1@gmail.com"">mat.t.o.s.bw.1@gmail.com</a>
<a href=""mailto:m.a.t.tos.bw1@gmail.com"">m.a.t.tos.bw1@gmail.com</a>
<a href=""mailto:m.a.t.t.o.s.bw.1@gmail.com"">m.a.t.t.o.s.bw.1@gmail.com</a>
<a href=""mailto:m.at.t.o.sb.w1@gmail.com"">m.at.t.o.sb.w1@gmail.com</a>
<a href=""mailto:ma.tt.osb.w.1@gmail.com"">ma.tt.osb.w.1@gmail.com</a>
<a href=""mailto:m.a.tto.sb.w1@gmail.com"">m.a.tto.sb.w1@gmail.com</a>
<a href=""mailto:m.a.t.t.o.s.b.w.1@gmail.com"">m.a.t.t.o.s.b.w.1@gmail.com</a>
<a href=""mailto:m.att.osb.w.1@gmail.com"">m.att.osb.w.1@gmail.com</a>
<a href=""mailto:m.a.t.tos.b.w1@gmail.com"">m.a.t.tos.b.w1@gmail.com</a>"
nGLDRUwk,turbine 2,fames,Lua,Saturday 15th of July 2023 03:51:13 PM CDT,"function round(num, numDecimalPlaces)
	local mult = 10^(numDecimalPlaces or 0)
	return math.floor(num * mult + 0.5) / mult
end

function comma(number)

  local i, j, minus, int, fraction = tostring(number):find('([-]?)(%d+)([.]?%d*)')

  -- reverse the int-string and append a comma to all blocks of 3 digits
  int = int:reverse():gsub(""(%d%d%d)"", ""%1,"")

  -- reverse the int-string back remove an optional comma and put the 
  -- optional minus and fractional part back
  return minus .. int:reverse():gsub(""^,"", """") .. fraction
end

function checkTurbine()
	print(""checking for turbine..."")
	local dummy = peripheral.find(""BiggerReactors_Turbine"")
	dummy.setActive(false)
	dummy.setCoilEngaged(false)
	dummy.fluidTank().setNominalFlowRate(0)
	print(""turbine found"")
	print("""")
end

function checkReactor()
	print(""checking for reactor..."")
	local dummy = peripheral.find(""BiggerReactors_Reactor"")
	dummy.setActive(false)
	dummy.setAllControlRodLevels(100)
	print(""reactor found"")
	print("""")
end

function checkMonitor()
	print(""checking for monitor"")
	local dummy = peripheral.find(""monitor"")
	dummy.clear()
	print(""monitor found"")
	print("""")
end

function bootup()
	print(""bootup"")
	local function keypress() -- func 1 (relearn config)
		print(""press space"")
		local event, key, isHeld = os.pullEvent(""key"")

		if key == keys.space then
			bootSelect = ""learn""
			bootDone = true
		end
	end

	local function timer() -- func 2 (use saved config)
		sleep(5)
		bootSelect = ""run""
		bootDone = true
	end

	local i = parallel.waitForAny(keypress,timer)
end

function init()
	if pcall(checkMonitor) then
		monitor = peripheral.find(""monitor"")
		monitorFound = true
		term.redirect(monitor)
	else
		print(""no monitor detected, skipping"")
		print("""")
	end

	if pcall(checkTurbine) then
		turbine = peripheral.find(""BiggerReactors_Turbine"")
	else
		error(""turbine missing. check connections."",0)
	end

	if pcall(checkReactor) then
		reactor = peripheral.find(""BiggerReactors_Reactor"")
	else
		error(""reactor missing. check connections."",0)
	end

	initDone = true

	-- parameters
	p_rpmSPLow = 987.0
	p_rpmSPHigh = 1843.25
	p_rpmTol = 1.001 -- rpm tolerance (~0.1% deviation is good)	
	p_rpmStable = 20 -- how long we should wait to be stable

	p_batLow = 80 -- battery level (%) where we switch over to low rpm (bat. level > p_batLow => low rpm)
	p_batHigh = 75 -- battery level (%) where we switch over to high rpm (bat. level < p_batHigh => High rpm)

	-- bootup vars
	bootSelect = ""learn""
	bootDone = false

	-- learn vars
	reactorBooted = false
	reactorMaxFlow = 0

	turbineLowLearned = false
	turbineLowResetSum = false
	turbineLowCnt = 0

	turbineHighLearned = false
	turbineHighResetSum = false
	turbineHighCnt = 0

	flowLow = 0	-- global var flowrate for 987 rpm
	flowHigh = 0	-- global var flowrate for 1843.25 rpm

	learnDone = false

	-- turbine controller vars
	turbESum = 0

	-- save folder
	saveFolder = ""turbineCtrl""..os.computerID()

end

if initDone == nil then
	print(""starting init"")
	print("""")
	init()
end

function turbineCtrl(rpmSP,kp,ki,maxFlow)
	print(""turbineCtrl"")
	print("""")

	turbine.setActive(true)
	local curFlow = turbine.fluidTank().nominalFlowRate()
	local curRPM = turbine.rotor().RPM() 

	-- engage coils if RPM is above 50% of target
	if curRPM >= (rpmSP*0.5) then
		turbine.setCoilEngaged(true)
	else
		turbine.setCoilEngaged(false)
	end

	-- PI Calculation
	local e = rpmSP - curRPM
	turbESum = e + turbESum

	-- limit error integral to max flow
	if turbESum >= maxFlow then
		turbESum = maxFlow
	end

	if turbESum < 0 then
		turbESum = 0
	end

	local y = (kp*e)+(ki*turbESum)

	-- limit y to max flow
	if y >= maxFlow then
		y = maxFlow
	end

	if curRPM < (rpmSP*1.25) then
		turbine.fluidTank().setNominalFlowRate(y)
	else
		-- limit the output if we overshoot
		turbine.fluidTank().setNominalFlowRate(y*0.1)
	end


	print("" target: ""..rpmSP)
	print(""current: ""..curRPM)
	print(""      y: ""..y)
	print(""   eSum: ""..turbESum)
end

function learn()
	print(""learn"")
	-- we need to start up the reactor first.
	-- in this phase, we do not care about efficiency all that much
	if not reactorBooted then
		print(""boot reactor"")
		reactor.setAllControlRodLevels(25)
		reactor.setActive(true)
		sleep(10)
		reactorMaxFlow = reactor.coolantTank().maxTransitionedLastTick()
		reactorBooted = true
		print(""max: ""..reactorMaxFlow)
	end

	if reactorBooted then
		-- we then figure out the low RPM flowrate (987rpm)
		if turbineLowLearned == false then
			local curRPM = turbine.rotor().RPM()
			turbineCtrl(p_rpmSPLow,25,2.25,reactorMaxFlow)

			-- if RPM is within tolerance, wait to be stable
			if not ((curRPM > p_rpmSPLow*p_rpmTol) or (curRPM < p_rpmSPLow/p_rpmTol)) then
				turbineLowCnt = turbineLowCnt + 1
				if turbineLowCnt >= p_rpmStable then
					flowLow = turbine.fluidTank().nominalFlowRate()
					print(""low flowrate: ""..flowLow)
					turbineLowLearned= true
					turbineLowResetSum = true
					-- todo: add file saving for next boot
				end
			else
				turbineLowCnt = 0
			end
		else
			if turbineLowResetSum then
				turbESum = 0
				turbineLowResetSum = false
			end
			turbineLowCnt = 0
		end
		-- and then the high RPM flowrate (1843.25rpm)
		if turbineLowLearned and not turbineHighLearned then
			local curRPM = turbine.rotor().RPM()
			turbineCtrl(p_rpmSPHigh,25,2.25,reactorMaxFlow)

			-- if RPM is within tolerance, wait to be stable
			if not ((curRPM > p_rpmSPHigh*p_rpmTol) or (curRPM < p_rpmSPHigh/p_rpmTol)) then
				turbineHighCnt = turbineHighCnt + 1
				if turbineHighCnt >= p_rpmStable then
					flowHigh = turbine.fluidTank().nominalFlowRate()
					print(""high flowrate: ""..flowHigh)
					turbineHighLearned= true
					turbineHighResetSum = true
					-- todo: add file saving for next boot
				end
			else
				turbineHighCnt = 0
			end
		else
			if turbineHighResetSum then
				turbESum = 0
				turbineHighResetSum = false
			end
			turbineHighCnt = 0
		end
		-- after that, we can switch over to the run mode and save the parameter data
		if turbineLowLearned and turbineHighLearned then
			saveParameters()
			bootSelect= ""run""
		end
	end
end

function saveParameters()
	-- data setup


	fs.makeDir(saveFolder)
	local file = fs.open(saveFolder..""/""..""data.txt"",""w"")
	file.writeLine(flowLow)
	file.writeLine(flowHigh)
	file.close()
end

function loadParameters()
	local file = fs.open(saveFolder..""/""..""data.txt"",""r"")
	local fileData = {}
	local line = file.readLine()

	repeat
		table.insert(fileData,line)
		line = file.readLine()
	until line == nil
	file.close()
	flowLow = tonumber(fileData[1])
	flowHigh = tonumber(fileData[2])
	print(fileData[1])
	print(fileData[2])
end

function batPercent()
	local cap = turbine.battery().capacity()
	local stored = turbine.battery().stored()
	return (stored/cap)*100
end

function run()
	-- check for valid parameters
	local bat = batPercent()
	if flowLow == nil or flowHigh == nil or flowLow == 0 or flowHigh == 0 then
		if pcall(loadParameters) then
			print(""load successfull"")
		else
			print(""invalid or missing saved parameters. relearning..."")
			bootSelect = ""learn""
			return
		end
	else
		turbine.setActive(true)
		turbine.setCoilEngaged(true)
	end

	if bat > p_batLow then
		turbine.fluidTank().setNominalFlowRate(flowLow)
		print(""low"")
	elseif bat < p_batHigh then
		print(""high"")
		turbine.fluidTank().setNominalFlowRate(flowHigh)
	end
end

while initDone == true do
	if not bootDone then
		bootup()
	else
		if bootSelect == ""learn"" then
			learn()
		elseif bootSelect == ""run"" then
			run()
		end
	end
	sleep(1)
end"
HC8uh15T,pocket.ryos.lol:443,dantect,Lua,Saturday 15th of July 2023 03:18:16 PM CDT,"HTTP/1.1 200 Connection Established
FiddlerGateway: Direct
StartTime: 17:12:08.653

Encrypted HTTPS traffic flows through this CONNECT tunnel. HTTPS Decryption is enabled in Fiddler, so decrypted sessions running in this tunnel will be shown in the Web Sessions list.

Secure Protocol: Tls12
Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256

== Server Certificate ==========
[Version]
  V3

[Subject]
  CN=ryos.lol
  Simple Name: ryos.lol
  DNS Name: ryos.lol

[Issuer]
  CN=GTS CA 1P5, O=Google Trust Services LLC, C=US
  Simple Name: GTS CA 1P5
  DNS Name: GTS CA 1P5

[Serial Number]
  1FC2FCAC4E2D668311B791DF2C388C8C

[Not Before]
  20/5/2023 09:00:16

[Not After]
  18/8/2023 09:00:15

[Thumbprint]
  CD6DD8A8593771A2072AA692A91512474212511A

[Signature Algorithm]
  sha256RSA(1.2.840.113549.1.1.11)

[Public Key]
  Algorithm: RSA
  Length: 2048
  Key Blob: 30 82 01 0a 02 82 01 01 00 98 02 a0 d0 02 3a 05 87 a7 bc 42 0b 50 56 9e 9f 11 4f 0e f2 c1 ba 19 2f 19 a9 57 de 96 3c 0c 36 2b 04 7b 4a 54 e3 b8 af ff 3e 42 08 01 c3 c1 9b ea cf 34 53 ca 1d 70 48 ad 58 37 3e ab d9 9e 28 13 67 25 e2 ee bb 89 93 18 b6 8b 41 eb 6e 06 52 1a f7 77 91 a0 6e e3 c1 a2 81 ad d3 43 bf 3e a1 25 aa 60 31 42 36 ef cc 68 56 56 0e 7c e9 e4 b4 30 a1 68 03 8b 78 28 c5 81 45 3c 8c 96 1e 77 c4 3a 5a 21 fa cd a3 e4 09 4b d1 6d cc 16 68 26 cd a5 27 23 59 27 a9 26 b3 db 86 70 12 94 98 ce b4 37 88 bf fd d3 d9 4d 05 b8 1a 5f d1 14 e7 33 67 e6 c4 b2 e5 3b bd 5b f5 89 98 55 03 4e c8 46 65 b5 b2 5b 72 8b b0 73 95 0a 18 85 3d 6a 42 81 86 10 d5 46 ca f4 95 c9 b2 c9 7c 4e ff 1b 34 55 cd 02 be f9 da 93 1f 4d ec e5 7c ef 24 51 57 58 c2 ef c9 cd 0a 16 43 f4 4c 68 9e e7 c9 62 d3 35 99 02 03 01 00 01
  Parameters: 05 00

[Extensions]
* Uso de la clave(2.5.29.15):
  Firma digital, Cifrado de clave (a0)

* Uso mejorado de claves(2.5.29.37):
  Autenticación del servidor (1.3.6.1.5.5.7.3.1)

* Restricciones básicas(2.5.29.19):
  Tipo de asunto=Entidad final
Restricción de longitud de ruta=Ninguno

* Identificador de clave del titular(2.5.29.14):
  8f8d51f2ed6f0164baed4e859bb333813a6ae4d4

* Identificador de clave de entidad emisora(2.5.29.35):
  Id. de clave=d5fc9e0ddf1ecadd0897976e2bc55fc52bf5ecb8

* Acceso a la información de entidad emisora(1.3.6.1.5.5.7.1.1):
  [1]Acceso a información de autoridad
     Método de acceso=Protocolo de estado de certificado en línea (1.3.6.1.5.5.7.48.1)
     Nombre alternativo:
          Dirección URL=http://ocsp.pki.goog/s/gts1p5/SOOUxt0Izc8
[2]Acceso a información de autoridad
     Método de acceso=Emisor de la entidad de certificación (1.3.6.1.5.5.7.48.2)
     Nombre alternativo:
          Dirección URL=http://pki.goog/repo/certs/gts1p5.der

* Nombre alternativo del titular(2.5.29.17):
  Nombre DNS=ryos.lol
Nombre DNS=*.ryos.lol

* Directivas del certificado(2.5.29.32):
  [1]Directiva de certificados:
     Identificador de directiva=2.23.140.1.2.1
[2]Directiva de certificados:
     Identificador de directiva=1.3.6.1.4.1.11129.2.5.3

* Puntos de distribución CRL(2.5.29.31):
  [1]Punto de distribución CRL
     Nombre del punto de distribución:
          Nombre completo:
               Dirección URL=http://crls.pki.goog/gts1p5/0pCh_3p1N9o.crl

* Lista SCT(1.3.6.1.4.1.11129.2.4.2):
  v1
adf7befa7cff10c88b9d3d9c1e3e186ab467295dcfb10c24ca858634ebdc828a
‎sábado, ‎20 ‎de ‎mayo ‎de ‎2023 10:00:16
SHA256
ECDSA
3044022001be0af0517ae64cd8caef71b0e9dfa3c23bf396d048ad762ee90835ee1ce8d802201291804af63b34f1f25548351651599cea960c83537727b56ee3c52db73e9d13

v1
b3737707e18450f86386d605a9dc11094a792db1670c0b87dcf0030e7936a59a
‎sábado, ‎20 ‎de ‎mayo ‎de ‎2023 10:00:16
SHA256
ECDSA
3045022100fa382615fe434f44169847509ed9220faafb0da79dad5dedbc00f836aec1fc0502201cef15e1eb6c51dce0f20d023a8765835b9c6f7cfea77fbd06024530e0a41361


[SubjectAltNames]
Nombre DNS=ryos.lol
Nombre DNS=*.ryos.lol

"
Kn9AYxEW,Untitled,therealsamyak,Python,Saturday 15th of July 2023 02:42:56 PM CDT,"class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:

        course_map = { course:[] for course in range(numCourses)}
        
        for item in prerequisites:
            course_map[item[0]].append(item[1])
            
        visit_list = set()

        def depth_first_search(curr_course: int):
            if curr_course in visit_list:
                return False
            if course_map[curr_course] == []:
                return True
            
            visit_list.add(curr_course)
            for prereq in course_map[curr_course]:
                if not depth_first_search(prereq):
                    return False
            
            visit_list.remove(curr_course)
            course_map[curr_course] = []
            return True
            
        for course in range(numCourses):
            if not depth_first_search(course):
                return False
        
        return True"
CeQBJx4h,CREATE A CART RIDE (UPDATED),2AreYouMental110,Lua,Saturday 15th of July 2023 02:22:18 PM CDT,"-- https://www.roblox.com/games/11727501024/UPD-Create-a-Cart-Ride
local up = true -- will move the cart a little up when teleporting, use if cart is glitching through the ground


print(""loading..."")
getgenv().clicktotpcacr = false
local Library = loadstring(game:HttpGet(""https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua""))()
local Window = Library.CreateLib(""Create A Cart Ride"", ""Sentinel"")
local t1 = Window:NewTab(""Main"")
local t1s1 = t1:NewSection(""Main"")
local level
local mouse = game.Players.LocalPlayer:GetMouse()
local ctrldown = false

t1s1:NewButton(""unlock all levels"", ""unlock all levels"", function()
    for i,v in pairs(workspace.CartRideWorkspace.Objects:GetChildren()) do
        if v.Name == ""LevelSpawn"" then
            firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart,v.LevelSpawn,0)
        end
    end
end)
t1s1:NewButton(""get cart (if there is one)"", ""get cart"", function()
    for i,v in pairs(workspace.CartRideWorkspace.Objects:GetChildren()) do
        if v.Name == ""CartGiver"" then
            for i,v in pairs(v:GetChildren()) do 
                if v:FindFirstChild(""TouchInterest"") then
                    firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart,v,0)
                end
            end
        end
    end
end)
t1s1:NewButton(""TP to end"", ""teleport to end"", function()
    local carts = {}
    for i,v in pairs(workspace.CartRideWorkspace.Objects:GetChildren()) do
        if v.Name == ""LevelSpawn"" then
            carts[v] = tonumber(string.sub(v.LevelSpawn.BBG.TextLabel.Text,string.find(v.LevelSpawn.BBG.TextLabel.Text,"" "")+1))
        end
    end
    local winnercart = nil
    for i,v in pairs(carts) do
        if winnercart == nil then
            winnercart = {i,v}
        elseif v > winnercart[2] then
            print(v)
            winnercart = {i,v}
        end
    end
    local cf = winnercart[1].LevelSpawn.CFrame
    if up then
        cf = cf + Vector3.new(0,10,0)
    end
    game.Players.LocalPlayer.Character:PivotTo(cf)
end)
t1s1:NewTextBox(""level (only number)"",""level"",function(txt)
    level = tonumber(txt)
end)
t1s1:NewButton(""TP to level"", ""teleport to level"", function()
    for i,v in pairs(workspace.CartRideWorkspace.Objects:GetChildren()) do
        if v.Name == ""LevelSpawn"" and tonumber(string.sub(v.LevelSpawn.BBG.TextLabel.Text,string.find(v.LevelSpawn.BBG.TextLabel.Text,"" "")+1)) == level then
            local cf = v.LevelSpawn.CFrame
            if up then
                cf = cf + Vector3.new(0,10,0)
            end
            game.Players.LocalPlayer.Character:PivotTo(cf)
        end
    end
end)
game:GetService(""UserInputService"").InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.LeftControl then
        ctrldown = true
    elseif getgenv().clicktotpcacr == true and ctrldown == true and input.UserInputType == Enum.UserInputType.MouseButton1 then
        local cf = mouse.Hit
        if up then
            cf = cf + Vector3.new(0,10,0)
        end
        game.Players.LocalPlayer.Character:PivotTo(cf)
    end
end)
game:GetService(""UserInputService"").InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.LeftControl then
        ctrldown = false
    end
end)
t1s1:NewToggle(""ctrl+click to TP"",""click to teleport"",function(bool)
    getgenv().clicktotpcacr = bool
end)"
vgMMLaQy,Turtle no ender,Silasko,Lua,Saturday 15th of July 2023 02:00:11 PM CDT,"local SLOT_COUNT = 16

local width, depth = 10, 10
 
if (#arg == 2) then
    width = tonumber(arg[1])
    depth = tonumber(arg[2])
else
    print('None or Malformed Size Given, Defaulting to 10x10')
end
 
function moveDigForward()
    turtle.dig()
    turtle.digUp()
    turtle.digDown()
    turtle.forward()
end
 
 
function refuelTurtle()
    for slot = 1, SLOT_COUNT, 1 do
        turtle.select(slot)
            local item = turtle.getItemDetail(slot)
            if (turtle.refuel(2)) then 
                print(""Turtle refueled"")
                return true
            end
    end
end
 
function checkFuel()
    local fuel = turtle.getFuelLevel()
    if(fuel < 20) then
       refuelTurtle()
    else
        print(""No fuel needed"")
    end
end
 
function turnLeft()
    turtle.turnLeft()
    turtle.dig()
    turtle.digUp()
    turtle.digDown()
    turtle.forward()
    turtle.turnLeft()
end
 
function turnRight()
    turtle.turnRight()
    turtle.dig()
    turtle.digUp()
    turtle.digDown()
    turtle.forward()
    turtle.turnRight()
end
 
function returnHome()
    if(math.fmod(depth,2) == 0) then
        turtle.turnRight()
        for i = 1, depth, 1 do
            if(turtle.detect() == true) then
                turtle.dig()
                turtle.forward()
            else
                turtle.forward()
            end
        end
    else --depth not divisible by 2
        turtle.turnLeft()
        for i = 1, depth, 1 do
            if(turtle.detect() == true) then
                turtle.dig()
                turtle.forward()
            else
                turtle.forward()
            end
        end
        turtle.turnRight()
        for i = 1, width, 1 do
            if(turtle.detect() == true) then
                turtle.dig()
                turtle.forward()
            else
                turtle.forward()
            end
        end
    end
    print(""Return home completed"")
    listen()
end

function listen()
    rednet.open(""left"")
        while true do
            local sender, message, protocol = rednet.receive()
            if message == ""ping"" then
                broadcastGPS()
            end
        end
end

function broadcastGPS()
    rednet.open(""left"")
    local x,y,z = gps.locate()
    rednet.broadcast(""gps: ""..x.."" ""..y.."" ""..z)
end



DROPPED_ITEMS = {
    ""minecraft:stone"",
    ""minecraft:dirt"",
    ""minecraft:cobblestone"",
    ""minecraft:sand"",
    ""minecraft:gravel""
}

function purgeCrap()
    for slot = 1, SLOT_COUNT, 1 do
        turtle.select(slot)
            local item = turtle.getItemDetail(slot)
            if (item ~= nil ) then 
                for itemIndex = 1, #DROPPED_ITEMS, 1 do
                        if(item[""name""] == DROPPED_ITEMS[itemIndex]) then
                        turtle.dropDown()
                        print(""Purging "",item[""name""])
                    end
                end

                
            end
    end
end

function start()
    checkFuel()
    for col = 1, depth, 1 do
        for row = 1, width, 1 do
            moveDigForward()
            print(string.format(""position: column %d   row %d "",col,row))
        end
        --start of each col
        checkFuel()
        purgeCrap()
        if(math.fmod(col,2) == 0) then
            turnRight()
        else
            turnLeft()
        end

    end
    returnHome()
end
 
start()"
YbafspZQ,Untitled,Skos_Martren,C++,Saturday 15th of July 2023 01:56:56 PM CDT,"class Solution {

    unsigned* getKoef() {
        static unsigned koef[1 + 'z'] = {};
        if (koef[0] == 0) {
            mt19937 gen(2202);
            for (char c = 'a'; c <= 'z'; c++) {
                koef[c] = uniform_int_distribution<unsigned>(1e9, 2e9)(gen);
            }
        }
        return koef;
    }

public:

    vector<int> findAnagrams(string_view s, string_view p) {
        
        if (s.size() < p.size()) {return {};}
        
        vector<int> ans;
        unsigned* koef = getKoef();
        
        unsigned sum = 0; // char of p -, chars of s +, multiply by koef 
        
        for (char c : p) {
            sum -= koef[c];
        }
        
        for (int i = 0; i < (int)p.size(); i++) {
            char c = s[i];
            sum += koef[c];
        }
        
        if (sum == 0) {ans.push_back(0);}
        
        for (int i = (int)p.size(); i < (int)s.size(); i++) {
            
            const char toRemove = s[i - (int)p.size()];
            const char toAdd = s[i];
            
            sum -= koef[toRemove];
            sum += koef[toAdd];
            
            if (sum == 0) {ans.push_back(i - (int)p.size() + 1);}
        }
        
            return ans;
    }
    
};"
