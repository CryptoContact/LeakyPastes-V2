id,title,username,language,date,content
QdyZVg9M,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,atakan1983,JavaScript,Thursday 6th of June 2024 01:04:48 PM CDT,"G2A.com free voucher & games guide.
Any voucher for free on G2A.com including Amazon gift cards & all else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
June 4nd 2024"
GJLPMgr5,"""Buzzer Melody"" rev_02",pleasedontcode,Arduino,Thursday 6th of June 2024 12:59:44 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Buzzer Melody""
	- Source Code compiled for: Arduino Uno
	- Source Code created on: 2024-06-06 17:58:57

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* play https video on buzzer */
/****** SYSTEM REQUIREMENT 2 *****/
	/* play https video youtube on speakers without sd */
	/* card */
/****** END SYSTEM REQUIREMENTS *****/


/****** DEFINITION OF LIBRARIES *****/
#include <ezBuzzer.h>  //https://github.com/ArduinoGetStarted/buzzer

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t mybuzzer_PassiveBuzzer_Signal_PIN_D2 = 2;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool mybuzzer_PassiveBuzzer_Signal_PIN_D2_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float mybuzzer_PassiveBuzzer_Signal_PIN_D2_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
const int BUZZER_PIN = 3;  // Define the pin for the buzzer
ezBuzzer buzzer(BUZZER_PIN);  // Initialize the ezBuzzer object

int melody[] = {
  NOTE_E5, NOTE_E5, NOTE_E5,
  NOTE_E5, NOTE_E5, NOTE_E5,
  NOTE_E5, NOTE_G5, NOTE_C5, NOTE_D5,
  NOTE_E5,
  NOTE_F5, NOTE_F5, NOTE_F5, NOTE_F5,
  NOTE_F5, NOTE_E5, NOTE_E5, NOTE_E5, NOTE_E5,
  NOTE_E5, NOTE_D5, NOTE_D5, NOTE_E5,
  NOTE_D5, NOTE_G5
};

int noteDurations[] = {
  8, 8, 4,
  8, 8, 4,
  8, 8, 8, 8,
  2,
  8, 8, 8, 8,
  8, 8, 8, 16, 16,
  8, 8, 8, 8,
  4, 4
};

int noteLength;

void setup(void)
{
  // put your setup code here, to run once:
  Serial.begin(9600);
  pinMode(mybuzzer_PassiveBuzzer_Signal_PIN_D2, OUTPUT);
  noteLength = sizeof(noteDurations) / sizeof(int);
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  buzzer.loop();  // Update the buzzer state

  if (buzzer.getState() == BUZZER_IDLE) {
    buzzer.playMelody(melody, noteDurations, noteLength);  // Play the melody when the buzzer is idle
  }

  updateOutputs();  // Refresh output data
}

void updateOutputs()
{
  digitalWrite(mybuzzer_PassiveBuzzer_Signal_PIN_D2, mybuzzer_PassiveBuzzer_Signal_PIN_D2_rawData);
}

/* END CODE */"
kztVWmKT,üí≤ G2A.com Free Gift Card Guide 06 June 2024 üí≤,ssss50w,GetText,Thursday 6th of June 2024 12:59:00 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
06 June 2024"
upyygRQN,Melody Buzzer rev_01,pleasedontcode,Arduino,Thursday 6th of June 2024 12:58:47 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Melody Buzzer
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-06-06 17:57:26

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* play https video on buzzer */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <ezBuzzer.h>  //https://github.com/ArduinoGetStarted/buzzer

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t mybuzzer_PassiveBuzzer_Signal_PIN_D2 = 2;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool mybuzzer_PassiveBuzzer_Signal_PIN_D2_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float mybuzzer_PassiveBuzzer_Signal_PIN_D2_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
const int BUZZER_PIN = 3;  // Define the pin for the buzzer
ezBuzzer buzzer(BUZZER_PIN);  // Initialize the ezBuzzer object

int melody[] = {
  NOTE_E5, NOTE_E5, NOTE_E5,
  NOTE_E5, NOTE_E5, NOTE_E5,
  NOTE_E5, NOTE_G5, NOTE_C5, NOTE_D5,
  NOTE_E5,
  NOTE_F5, NOTE_F5, NOTE_F5, NOTE_F5,
  NOTE_F5, NOTE_E5, NOTE_E5, NOTE_E5, NOTE_E5,
  NOTE_E5, NOTE_D5, NOTE_D5, NOTE_E5,
  NOTE_D5, NOTE_G5
};

int noteDurations[] = {
  8, 8, 4,
  8, 8, 4,
  8, 8, 8, 8,
  2,
  8, 8, 8, 8,
  8, 8, 8, 16, 16,
  8, 8, 8, 8,
  4, 4
};

int noteLength;

void setup(void)
{
  // put your setup code here, to run once:
  Serial.begin(9600);
  pinMode(mybuzzer_PassiveBuzzer_Signal_PIN_D2, OUTPUT);
  noteLength = sizeof(noteDurations) / sizeof(int);
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  buzzer.loop();  // Update the buzzer state

  if (buzzer.getState() == BUZZER_IDLE) {
    buzzer.playMelody(melody, noteDurations, noteLength);  // Play the melody when the buzzer is idle
  }

  updateOutputs();  // Refresh output data
}

void updateOutputs()
{
  digitalWrite(mybuzzer_PassiveBuzzer_Signal_PIN_D2, mybuzzer_PassiveBuzzer_Signal_PIN_D2_rawData);
}

/* END CODE */"
vbcvtBqE,Untitled,Josif_tepe,C++,Thursday 6th of June 2024 12:58:42 PM CDT,"#include <bits/stdc++.h>
using namespace std;
const int maxn = 1e5 + 10;
const int INF = 1e8;
int a[maxn];
int n;
int segment_tree[3 * maxn];
void build(int L, int R, int pos) {
  if(L == R) {
    segment_tree[pos] = 1;
  }
  else {
    int middle = (L + R) / 2;
    build(L, middle, 2 * pos);
    build(middle + 1, R, 2 * pos + 1);
    segment_tree[pos] = segment_tree[2 * pos] + segment_tree[2 * pos + 1];
  }
 
}
void update(int L, int R, int pos, int idx) {
  if(L == R) {
    segment_tree[pos] = 0;
    return;
  }
  int middle = (L + R) / 2;
  if(idx <= middle) {
    update(L, middle, 2 * pos, idx);
  }
  else {
    update(middle + 1, R, 2 * pos + 1, idx);
  }
  segment_tree[pos] = segment_tree[2 * pos] + segment_tree[2 * pos + 1];
}
int query(int L, int R, int pos, int x) {
    if(L == R) {
      return L;
    }
    int middle = (L + R) / 2;
    if(segment_tree[2 * pos] >= x) {
      return query(L, middle, 2 * pos, x);
    }
    else {
      return query(middle + 1, R, 2 * pos + 1, x - segment_tree[2 * pos]);
    }
}
int main()
{ 
    ios_base::sync_with_stdio(false);
    cin >> n;
    for(int i = 0; i < n; i++) {
      cin >> a[i];
    }
    sort(a, a + n);
    build(0, n - 1, 1);
    vector<int> q(n);
    for(int i = 0; i < n; i++) {
        cin >> q[i];
        q[i]++;
      }
      vector<int> res(n);
      for(int i = n - 1; i >= 0; i--) {
        int idx = query(0, n - 1, 1, q[i]);
        
        res[i] = a[idx];
        
        
        update(0, n - 1, 1, idx);
   
      }
      for(int i = 0; i < n; i++) {
        cout << res[i] << "" "";
      }
      return 0;
}
//    134  167   
// 0 1 0 0 3 2 6 7 4 6 9 4
 
// 134 167 120 119 156 120 167 182 155 163 172 145 
 
// 1 1 1 1 0 1 1 1 1 1 0 1   "
P9gVPiRC,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,ColtM4A2,JavaScript,Thursday 6th of June 2024 12:58:33 PM CDT,"G2A.com free voucher & games guide.
Any item for free on G2A.com including Steam gift cards & all else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
June 4nd 2024"
JDtsZt9H,Untitled,Josif_tepe,C++,Thursday 6th of June 2024 12:58:05 PM CDT,"#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
const int maxn = 5e5 + 10;
const ll INF = 1e9;
int a[maxn];
int n;
struct node {
  ll sum, pref_sum, suff_sum, max_sum;
  node () {}
  node(ll x) {
    sum = x;
    pref_sum = x;
    suff_sum = x;
    max_sum = x;
  }
};
node segment_tree[3 * maxn];
node merge_two_nodes(node A, node B) {
  node C;
  C.sum = A.sum + B.sum;
  C.pref_sum = max(A.pref_sum, A.sum + B.pref_sum);
  C.suff_sum = max(B.suff_sum, B.sum + A.suff_sum);
  C.max_sum = max(A.max_sum, max(B.max_sum, A.suff_sum + B.pref_sum));
  return C;
}
void build(int L, int R, int pos) {
  if(L == R) {
    segment_tree[pos] = node(a[L]);
  }
  else {
    int middle = (L + R) / 2;
    build(L, middle, 2 * pos);
    build(middle + 1, R, 2 * pos + 1);
    segment_tree[pos] = merge_two_nodes(segment_tree[2 * pos], segment_tree[2 * pos + 1]);
  }
}
node query(int L, int R, int pos, int i, int j) {
  // L R  i L R j L R
  if(i <= L and R <= j) {
    return segment_tree[pos];
  }
  if(R < i or j < L) {
    return node(-INF);
  }
  int middle = (L + R) / 2;
  return merge_two_nodes(query(L, middle, 2 * pos, i, j), query(middle + 1, R, 2 * pos + 1, i, j));
}
void update(int L, int R, int pos, int idx, int value) {
  if(L == R) {
    segment_tree[pos] = node(value);
    return;
  }
  int middle = (L + R) / 2;
  if(idx <= middle) {
    update(L, middle, 2 * pos, idx, value);
  }
  else {
    update(middle + 1, R, 2 * pos + 1, idx, value);
  }
  segment_tree[pos] = merge_two_nodes(segment_tree[2 * pos], segment_tree[2 * pos + 1]);
 
}
int main()
{ 
    ios_base::sync_with_stdio(false);
    int q;
    cin >> n >> q;
    for(int i = 0; i < n; i++) {
      cin >> a[i];
    }
    build(0, n - 1, 1);
    
    
    while(q--) {
      int a, b;
      cin >> a >> b;
      a--; 
      update(0, n - 1, 1, a, b);
      ll res = query(0, n - 1, 1, 0, n - 1).max_sum;
      if(res < 0) {
        res = 0;
      }
    cout << res  << endl;
    }
      return 0;
}
 "
eYGN6DZ7,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,Skarface-MKL,JavaScript,Thursday 6th of June 2024 12:52:31 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any voucher for free on G2A.com including Xbox gift cards & everything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
4nd of June 2024"
xgVkMD71,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,thepplayz,JavaScript,Thursday 6th of June 2024 12:46:31 PM CDT,"G2A.com complimentary voucher & games guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
4nd of June 2024"
BkXXwDxy,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,sirmikey,JavaScript,Thursday 6th of June 2024 12:40:31 PM CDT,"G2A.com complimentary gift card & games guide.
Any item for free on G2A.com including Steam gift cards & anything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
June 4nd 2024"
dGUBz8FQ,Krypton-Hub,Dark_Agent,Lua,Thursday 6th of June 2024 12:38:10 PM CDT,"local Players = game:FindFirstChildOfClass(""Players"")
local UserInput = game:FindFirstChildOfClass(""UserInputService"")
local TweenServ = game:FindFirstChildOfClass(""TweenService"")
local TweenInformation = TweenInfo.new(0.25)

local LocalPlayer = Players.LocalPlayer

local Library = {}
local Tabbing = {}

local Current = nil
local SelectedTabButton = nil
local SelectedTab = nil

local Main = nil
local TabList = nil
local Tabs = nil
local Assets = nil

local C3RGB = Color3.fromRGB
local ScreenGui = Instance.new(""ScreenGui"")

task.spawn(function() -- let the gui create on other core
	local G2L = {};

	-- StarterGui.Light
	G2L[""1""] = ScreenGui
	G2L[""1""][""Name""] = [[Light]];

	-- StarterGui.Light.MainFrame
	G2L[""2""] = Instance.new(""Frame"", G2L[""1""]);
	G2L[""2""][""BorderSizePixel""] = 0;
	G2L[""2""][""BackgroundColor3""] = Color3.fromRGB(34, 34, 34);
	G2L[""2""][""AnchorPoint""] = Vector2.new(0.5, 0.5);
	G2L[""2""][""Size""] = UDim2.new(0, 450, 0, 300);
	G2L[""2""][""Position""] = UDim2.new(0.4996, 0, 0.49882, 0);
	G2L[""2""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""2""][""Name""] = [[MainFrame]];
	G2L[""2""][""BackgroundTransparency""] = 0.25;

	local ae = Instance.new(""ImageLabel"", G2L[""2""]);
	ae[""BorderSizePixel""] = 0;
	ae[""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	ae[""ScaleType""] = Enum.ScaleType.Tile;
	ae[""ImageTransparency""] = 0.75;
	ae[""Image""] = [[rbxassetid://12975580993]];
	ae[""TileSize""] = UDim2.new(0, 8, 0, 8);
	ae[""Size""] = UDim2.new(1, 0, 1, 0);
	ae['Name'] = ""SnowTiles""
	ae[""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	ae[""BackgroundTransparency""] = 1;
	ae.ZIndex=-1
	
	-- StarterGui.Light.MainFrame.UICorner
	G2L[""3""] = Instance.new(""UICorner"", G2L[""2""]);
	G2L[""3""][""CornerRadius""] = UDim.new(0, 4);

	-- StarterGui.Light.MainFrame.Title
	G2L[""4""] = Instance.new(""TextLabel"", G2L[""2""]);
	G2L[""4""][""BorderSizePixel""] = 0;
	G2L[""4""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""4""][""TextXAlignment""] = Enum.TextXAlignment.Left;
	G2L[""4""][""TextTransparency""] = 0.25;
	G2L[""4""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""4""][""TextSize""] = 16;
	G2L[""4""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""4""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""4""][""BackgroundTransparency""] = 1;
	G2L[""4""][""Size""] = UDim2.new(0, 89, 0, 19);
	G2L[""4""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""4""][""Text""] = [[Krypton]];
	G2L[""4""][""Name""] = [[Title]];
	G2L[""4""][""Position""] = UDim2.new(0, 10, 0, 6);

	-- StarterGui.Light.MainFrame.TabList
	G2L[""5""] = Instance.new(""ScrollingFrame"", G2L[""2""]);
	G2L[""5""][""Active""] = true;
	G2L[""5""][""BorderSizePixel""] = 0;
	G2L[""5""][""CanvasSize""] = UDim2.new(0, 0, 0, 0);
	G2L[""5""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""5""][""Name""] = [[TabList]];
	G2L[""5""][""AutomaticCanvasSize""] = Enum.AutomaticSize.Y;
	G2L[""5""][""ClipsDescendants""] = false;
	G2L[""5""][""Size""] = UDim2.new(0, 100, 0, 262);
	G2L[""5""][""ScrollBarImageColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""5""][""Position""] = UDim2.new(0, 10, 0.13333, -10);
	G2L[""5""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""5""][""ScrollBarThickness""] = 0;
	G2L[""5""][""BackgroundTransparency""] = 1;

	-- StarterGui.Light.MainFrame.TabList.UIListLayout
	G2L[""6""] = Instance.new(""UIListLayout"", G2L[""5""]);
	G2L[""6""][""HorizontalAlignment""] = Enum.HorizontalAlignment.Center;
	G2L[""6""][""Padding""] = UDim.new(0, 2);
	G2L[""6""][""SortOrder""] = Enum.SortOrder.LayoutOrder;

	-- StarterGui.Light.MainFrame.TabHandler
	G2L[""7""] = Instance.new(""Frame"", G2L[""2""]);
	G2L[""7""][""BorderSizePixel""] = 0;
	G2L[""7""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""7""][""ClipsDescendants""] = true;
	G2L[""7""][""Size""] = UDim2.new(0, 325, 0, 274);
	G2L[""7""][""Position""] = UDim2.new(0.256, 0, 0.08333, 0);
	G2L[""7""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""7""][""Name""] = [[TabHandler]];
	G2L[""7""][""BackgroundTransparency""] = 1;

	-- StarterGui.Light.MainFrame.TabHandler.Tabs
	G2L[""8""] = Instance.new(""Folder"", G2L[""7""]);
	G2L[""8""][""Name""] = [[Tabs]];

	-- StarterGui.Light.MainFrame.shadowHolder
	G2L[""9""] = Instance.new(""Frame"", G2L[""2""]);
	G2L[""9""][""ZIndex""] = -1;
	G2L[""9""][""AnchorPoint""] = Vector2.new(0.5, 0.5);
	G2L[""9""][""Size""] = UDim2.new(1.02778, 0, 1.045, 0);
	G2L[""9""][""Position""] = UDim2.new(0.5, 0, 0.49917, 0);
	G2L[""9""][""Name""] = [[shadowHolder]];
	G2L[""9""][""BackgroundTransparency""] = 1;

	-- StarterGui.Light.MainFrame.shadowHolder.umbraShadow
	G2L[""a""] = Instance.new(""ImageLabel"", G2L[""9""]);
	G2L[""a""][""ZIndex""] = 0;
	G2L[""a""][""SliceCenter""] = Rect.new(10, 10, 118, 118);
	G2L[""a""][""ScaleType""] = Enum.ScaleType.Slice;
	G2L[""a""][""ImageTransparency""] = 0.86;
	G2L[""a""][""ImageColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""a""][""AnchorPoint""] = Vector2.new(0.5, 0.5);
	G2L[""a""][""Image""] = [[rbxassetid://1316045217]];
	G2L[""a""][""Size""] = UDim2.new(1, 4, 1, 4);
	G2L[""a""][""BackgroundTransparency""] = 1;
	G2L[""a""][""Name""] = [[umbraShadow]];
	G2L[""a""][""Position""] = UDim2.new(0.5, 0, 0.5, 2);

	-- StarterGui.Light.MainFrame.shadowHolder.penumbraShadow
	G2L[""b""] = Instance.new(""ImageLabel"", G2L[""9""]);
	G2L[""b""][""ZIndex""] = 0;
	G2L[""b""][""SliceCenter""] = Rect.new(10, 10, 118, 118);
	G2L[""b""][""ScaleType""] = Enum.ScaleType.Slice;
	G2L[""b""][""ImageTransparency""] = 0.88;
	G2L[""b""][""ImageColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""b""][""AnchorPoint""] = Vector2.new(0.5, 0.5);
	G2L[""b""][""Image""] = [[rbxassetid://1316045217]];
	G2L[""b""][""Size""] = UDim2.new(1, 4, 1, 4);
	G2L[""b""][""BackgroundTransparency""] = 1;
	G2L[""b""][""Name""] = [[penumbraShadow]];
	G2L[""b""][""Position""] = UDim2.new(0.5, 0, 0.5, 2);

	-- StarterGui.Light.MainFrame.shadowHolder.ambientShadow
	G2L[""c""] = Instance.new(""ImageLabel"", G2L[""9""]);
	G2L[""c""][""ZIndex""] = 0;
	G2L[""c""][""SliceCenter""] = Rect.new(10, 10, 118, 118);
	G2L[""c""][""ScaleType""] = Enum.ScaleType.Slice;
	G2L[""c""][""ImageTransparency""] = 0.88;
	G2L[""c""][""ImageColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""c""][""AnchorPoint""] = Vector2.new(0.5, 0.5);
	G2L[""c""][""Image""] = [[rbxassetid://1316045217]];
	G2L[""c""][""Size""] = UDim2.new(1, 4, 1, 4);
	G2L[""c""][""BackgroundTransparency""] = 1;
	G2L[""c""][""Name""] = [[ambientShadow]];
	G2L[""c""][""Position""] = UDim2.new(0.5, 0, 0.5, 2);

	-- StarterGui.Light.MainFrame.ExitButton
	G2L[""d""] = Instance.new(""ImageButton"", G2L[""2""]);
	G2L[""d""][""BorderSizePixel""] = 0;
	G2L[""d""][""ScaleType""] = Enum.ScaleType.Fit;
	G2L[""d""][""ImageTransparency""] = 0.35;
	G2L[""d""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""d""][""Image""] = [[rbxasset://textures/AnimationEditor/button_popup_close.png]];
	G2L[""d""][""Size""] = UDim2.new(0, 12, 0, 12);
	G2L[""d""][""BackgroundTransparency""] = 1;
	G2L[""d""][""Name""] = [[ExitButton]];
	G2L[""d""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""d""][""Position""] = UDim2.new(0.97286, -10, -0.00333, 10);

	-- StarterGui.Light.MainFrame.ExitPrompt
	G2L[""e""] = Instance.new(""Frame"", G2L[""2""]);
	G2L[""e""][""Visible""] = false;
	G2L[""e""][""ZIndex""] = 3;
	G2L[""e""][""BorderSizePixel""] = 0;
	G2L[""e""][""BackgroundColor3""] = Color3.fromRGB(48, 48, 48);
	G2L[""e""][""AnchorPoint""] = Vector2.new(0.5, 0.5);
	G2L[""e""][""ClipsDescendants""] = true;
	G2L[""e""][""Size""] = UDim2.new(0, 209, 0, 69);
	G2L[""e""][""Position""] = UDim2.new(0.5, 0, 5.5, 0);
	G2L[""e""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""e""][""Name""] = [[ExitPrompt]];
	G2L[""e""][""BackgroundTransparency""] = 0.1;

	-- StarterGui.Light.MainFrame.ExitPrompt.ButtonCorner
	G2L[""f""] = Instance.new(""UICorner"", G2L[""e""]);
	G2L[""f""][""Name""] = [[ButtonCorner]];
	G2L[""f""][""CornerRadius""] = UDim.new(0, 4);

	-- StarterGui.Light.MainFrame.ExitPrompt.UIStroke
	G2L[""10""] = Instance.new(""UIStroke"", G2L[""e""]);
	G2L[""10""][""Transparency""] = 0.5;
	G2L[""10""][""ApplyStrokeMode""] = Enum.ApplyStrokeMode.Border;
	G2L[""10""][""Thickness""] = 0.75;
	G2L[""10""][""Color""] = Color3.fromRGB(212, 212, 212);

	-- StarterGui.Light.MainFrame.ExitPrompt.Yes
	G2L[""11""] = Instance.new(""TextButton"", G2L[""e""]);
	G2L[""11""][""BorderSizePixel""] = 0;
	G2L[""11""][""TextSize""] = 14;
	G2L[""11""][""TextColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""11""][""BackgroundColor3""] = Color3.fromRGB(138, 255, 102);
	G2L[""11""][""FontFace""] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""11""][""ZIndex""] = 3;
	G2L[""11""][""Size""] = UDim2.new(0, 89, 0, 21);
	G2L[""11""][""BackgroundTransparency""] = 0.9;
	G2L[""11""][""Name""] = [[Yes]];
	G2L[""11""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""11""][""Text""] = [[ ]];
	G2L[""11""][""Position""] = UDim2.new(0.05115, 0, 0.1465, 30);

	-- StarterGui.Light.MainFrame.ExitPrompt.Yes.UIStroke
	G2L[""12""] = Instance.new(""UIStroke"", G2L[""11""]);
	G2L[""12""][""Transparency""] = 0.5;
	G2L[""12""][""ApplyStrokeMode""] = Enum.ApplyStrokeMode.Border;
	G2L[""12""][""Thickness""] = 0.75;
	G2L[""12""][""Color""] = Color3.fromRGB(38, 54, 23);

	-- StarterGui.Light.MainFrame.ExitPrompt.Yes.ButtonCorner
	G2L[""13""] = Instance.new(""UICorner"", G2L[""11""]);
	G2L[""13""][""Name""] = [[ButtonCorner]];
	G2L[""13""][""CornerRadius""] = UDim.new(0, 4);

	-- StarterGui.Light.MainFrame.ExitPrompt.Yes.Label
	G2L[""14""] = Instance.new(""TextLabel"", G2L[""11""]);
	G2L[""14""][""ZIndex""] = 3;
	G2L[""14""][""BorderSizePixel""] = 0;
	G2L[""14""][""TextStrokeColor3""] = Color3.fromRGB(219, 246, 209);
	G2L[""14""][""TextTransparency""] = 0.25;
	G2L[""14""][""BackgroundColor3""] = Color3.fromRGB(133, 255, 88);
	G2L[""14""][""TextSize""] = 14;
	G2L[""14""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""14""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""14""][""BackgroundTransparency""] = 1;
	G2L[""14""][""AnchorPoint""] = Vector2.new(0, 0.5);
	G2L[""14""][""Size""] = UDim2.new(0, 89, 0, 20);
	G2L[""14""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""14""][""Text""] = [[Yeah go ahead!]];
	G2L[""14""][""Name""] = [[Label]];
	G2L[""14""][""Position""] = UDim2.new(0, 0, 0, 10);

	-- StarterGui.Light.MainFrame.ExitPrompt.Label
	G2L[""15""] = Instance.new(""TextLabel"", G2L[""e""]);
	G2L[""15""][""ZIndex""] = 3;
	G2L[""15""][""BorderSizePixel""] = 0;
	G2L[""15""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""15""][""TextTransparency""] = 0.25;
	G2L[""15""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""15""][""TextSize""] = 16;
	G2L[""15""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""15""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""15""][""BackgroundTransparency""] = 1;
	G2L[""15""][""AnchorPoint""] = Vector2.new(0, 0.5);
	G2L[""15""][""Size""] = UDim2.new(0, 208, 0, 25);
	G2L[""15""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""15""][""Text""] = [[Are you sure you wanna quit?]];
	G2L[""15""][""Name""] = [[Label]];
	G2L[""15""][""Position""] = UDim2.new(0, 0, 0, 19);

	-- StarterGui.Light.MainFrame.ExitPrompt.No
	G2L[""16""] = Instance.new(""TextButton"", G2L[""e""]);
	G2L[""16""][""BorderSizePixel""] = 0;
	G2L[""16""][""TextSize""] = 14;
	G2L[""16""][""TextColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""16""][""BackgroundColor3""] = Color3.fromRGB(255, 86, 86);
	G2L[""16""][""FontFace""] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""16""][""ZIndex""] = 3;
	G2L[""16""][""Size""] = UDim2.new(0, 89, 0, 21);
	G2L[""16""][""BackgroundTransparency""] = 0.9;
	G2L[""16""][""Name""] = [[No]];
	G2L[""16""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""16""][""Text""] = [[ ]];
	G2L[""16""][""Position""] = UDim2.new(0.53583, 0, 0.1465, 30);

	-- StarterGui.Light.MainFrame.ExitPrompt.No.UIStroke
	G2L[""17""] = Instance.new(""UIStroke"", G2L[""16""]);
	G2L[""17""][""Transparency""] = 0.5;
	G2L[""17""][""ApplyStrokeMode""] = Enum.ApplyStrokeMode.Border;
	G2L[""17""][""Thickness""] = 0.75;
	G2L[""17""][""Color""] = Color3.fromRGB(99, 29, 29);

	-- StarterGui.Light.MainFrame.ExitPrompt.No.ButtonCorner
	G2L[""18""] = Instance.new(""UICorner"", G2L[""16""]);
	G2L[""18""][""Name""] = [[ButtonCorner]];
	G2L[""18""][""CornerRadius""] = UDim.new(0, 4);

	-- StarterGui.Light.MainFrame.ExitPrompt.No.Label
	G2L[""19""] = Instance.new(""TextLabel"", G2L[""16""]);
	G2L[""19""][""ZIndex""] = 3;
	G2L[""19""][""BorderSizePixel""] = 0;
	G2L[""19""][""TextStrokeColor3""] = Color3.fromRGB(246, 200, 200);
	G2L[""19""][""TextTransparency""] = 0.25;
	G2L[""19""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""19""][""TextSize""] = 14;
	G2L[""19""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""19""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""19""][""BackgroundTransparency""] = 1;
	G2L[""19""][""AnchorPoint""] = Vector2.new(0, 0.5);
	G2L[""19""][""Size""] = UDim2.new(0, 89, 0, 20);
	G2L[""19""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""19""][""Text""] = [[Not feelin it.]];
	G2L[""19""][""Name""] = [[Label]];
	G2L[""19""][""Position""] = UDim2.new(0, 0, 0, 10);

	-- StarterGui.Light.MainFrame.Assets
	G2L[""1a""] = Instance.new(""Folder"", G2L[""2""]);
	G2L[""1a""][""Name""] = [[Assets]];

	-- StarterGui.Light.MainFrame.Assets.Label
	G2L[""1b""] = Instance.new(""Frame"", G2L[""1a""]);
	G2L[""1b""][""Visible""] = false;
	G2L[""1b""][""BorderSizePixel""] = 0;
	G2L[""1b""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 202);
	G2L[""1b""][""ClipsDescendants""] = true;
	G2L[""1b""][""Size""] = UDim2.new(0, 315, 0, 30);
	G2L[""1b""][""Position""] = UDim2.new(0.0295, 0, 0.2594, 0);
	G2L[""1b""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""1b""][""Name""] = [[Label]];
	G2L[""1b""][""BackgroundTransparency""] = 0.9;

	-- StarterGui.Light.MainFrame.Assets.Label.ButtonCorner
	G2L[""1c""] = Instance.new(""UICorner"", G2L[""1b""]);
	G2L[""1c""][""Name""] = [[ButtonCorner]];
	G2L[""1c""][""CornerRadius""] = UDim.new(0, 4);

	-- StarterGui.Light.MainFrame.Assets.Label.UIStroke
	G2L[""1d""] = Instance.new(""UIStroke"", G2L[""1b""])
	G2L[""1d""][""Transparency""] = 0.5;
	G2L[""1d""][""ApplyStrokeMode""] = Enum.ApplyStrokeMode.Border;
	G2L[""1d""][""Thickness""] = 0.75;
	G2L[""1d""][""Color""] = Color3.fromRGB(212, 212, 212);

	-- StarterGui.Light.MainFrame.Assets.Label.Label
	G2L[""1e""] = Instance.new(""TextLabel"", G2L[""1b""]);
	G2L[""1e""][""BorderSizePixel""] = 0;
	G2L[""1e""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""1e""][""TextXAlignment""] = Enum.TextXAlignment.Left;
	G2L[""1e""][""TextTransparency""] = 0.25;
	G2L[""1e""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""1e""][""TextSize""] = 16;
	G2L[""1e""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""1e""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""1e""][""BackgroundTransparency""] = 1;
	G2L[""1e""][""AnchorPoint""] = Vector2.new(0, 0.5);
	G2L[""1e""][""Size""] = UDim2.new(0, 264, 0, 16);
	G2L[""1e""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""1e""][""Name""] = [[Label]];
	G2L[""1e""][""Position""] = UDim2.new(0, 10, 0, 15);

	-- StarterGui.Light.MainFrame.Assets.Label.Description
	G2L[""1f""] = Instance.new(""TextLabel"", G2L[""1b""]);
	G2L[""1f""][""TextWrapped""] = true;
	G2L[""1f""][""BorderSizePixel""] = 0;
	G2L[""1f""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""1f""][""TextXAlignment""] = Enum.TextXAlignment.Left;
	G2L[""1f""][""TextTransparency""] = 0.25;
	G2L[""1f""][""TextYAlignment""] = Enum.TextYAlignment.Top;
	G2L[""1f""][""RichText""] = true
	G2L[""1f""][""AutomaticSize""] = Enum.AutomaticSize.Y
	G2L[""1f""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""1f""][""TextSize""] = 14;
	G2L[""1f""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""1f""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""1f""][""BackgroundTransparency""] = 1;
	G2L[""1f""][""AnchorPoint""] = Vector2.new(0, 0);
	G2L[""1f""][""Size""] = UDim2.new(0, 299, 0, 30);
	G2L[""1f""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""1f""][""Text""] = [[ ]];
	G2L[""1f""][""Name""] = [[Description]];
	G2L[""1f""][""Position""] = UDim2.new(0, 10, 0, 44);

	-- StarterGui.Light.MainFrame.Assets.Textbox
	G2L[""20""] = Instance.new(""Frame"", G2L[""1a""]);
	G2L[""20""][""Visible""] = false;
	G2L[""20""][""BorderSizePixel""] = 0;
	G2L[""20""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""20""][""ClipsDescendants""] = true;
	G2L[""20""][""Size""] = UDim2.new(0, 315, 0, 30);
	G2L[""20""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""20""][""Name""] = [[Textbox]];
	G2L[""20""][""BackgroundTransparency""] = 0.9;

	-- StarterGui.Light.MainFrame.Assets.Textbox.ButtonCorner
	G2L[""21""] = Instance.new(""UICorner"", G2L[""20""]);
	G2L[""21""][""Name""] = [[ButtonCorner]];
	G2L[""21""][""CornerRadius""] = UDim.new(0, 4);

	-- StarterGui.Light.MainFrame.Assets.Textbox.TextBox
	G2L[""22""] = Instance.new(""TextBox"", G2L[""20""]);
	G2L[""22""][""CursorPosition""] = -1;
	G2L[""22""][""TextColor3""] = Color3.fromRGB(167, 167, 167);
	G2L[""22""][""PlaceholderColor3""] = Color3.fromRGB(136, 136, 136);
	G2L[""22""][""BorderSizePixel""] = 0;
	G2L[""22""][""TextWrapped""] = true;
	G2L[""22""][""TextTransparency""] = 0.25;
	G2L[""22""][""TextStrokeColor3""] = Color3.fromRGB(228, 228, 228);
	G2L[""22""][""TextSize""] = 14;
	G2L[""22""][""TextScaled""] = true;
	G2L[""22""][""BackgroundColor3""] = Color3.fromRGB(21, 21, 21);
	G2L[""22""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""22""][""AnchorPoint""] = Vector2.new(0.5, 0.5);
	G2L[""22""][""PlaceholderText""] = [[Input There]];
	G2L[""22""][""Size""] = UDim2.new(0, 73, 0, 17);
	G2L[""22""][""Position""] = UDim2.new(0.859, 0, 0, 15);
	G2L[""22""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""22""][""Text""] = [[]];
	G2L[""22""][""BackgroundTransparency""] = 0.8;

	-- StarterGui.Light.MainFrame.Assets.Textbox.TextBox.ButtonCorner
	G2L[""23""] = Instance.new(""UICorner"", G2L[""22""]);
	G2L[""23""][""Name""] = [[ButtonCorner]];
	G2L[""23""][""CornerRadius""] = UDim.new(0, 2);

	-- StarterGui.Light.MainFrame.Assets.Textbox.TextBox.UIStroke
	G2L[""24""] = Instance.new(""UIStroke"", G2L[""22""]);
	G2L[""24""][""Transparency""] = 0.5;
	G2L[""24""][""ApplyStrokeMode""] = Enum.ApplyStrokeMode.Border;
	G2L[""24""][""Thickness""] = 0.75;
	G2L[""24""][""Color""] = Color3.fromRGB(212, 212, 212);

	-- StarterGui.Light.MainFrame.Assets.Textbox.TextBox.UITextSizeConstraint
	G2L[""25""] = Instance.new(""UITextSizeConstraint"", G2L[""22""]);
	G2L[""25""][""MaxTextSize""] = 14;

	-- StarterGui.Light.MainFrame.Assets.Textbox.UIStroke
	G2L[""26""] = Instance.new(""UIStroke"", G2L[""20""]);
	G2L[""26""][""Transparency""] = 0.5;
	G2L[""26""][""ApplyStrokeMode""] = Enum.ApplyStrokeMode.Border;
	G2L[""26""][""Thickness""] = 0.75;
	G2L[""26""][""Color""] = Color3.fromRGB(212, 212, 212);

	-- StarterGui.Light.MainFrame.Assets.Textbox.Label
	G2L[""27""] = Instance.new(""TextLabel"", G2L[""20""]);
	G2L[""27""][""BorderSizePixel""] = 0;
	G2L[""27""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""27""][""TextXAlignment""] = Enum.TextXAlignment.Left;
	G2L[""27""][""TextTransparency""] = 0.25;
	G2L[""27""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""27""][""TextSize""] = 16;
	G2L[""27""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""27""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""27""][""BackgroundTransparency""] = 1;
	G2L[""27""][""AnchorPoint""] = Vector2.new(0, 0.5);
	G2L[""27""][""Size""] = UDim2.new(0, 264, 0, 16);
	G2L[""27""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""27""][""Name""] = [[Label]];
	G2L[""27""][""Position""] = UDim2.new(0, 10, 0, 15);

	-- StarterGui.Light.MainFrame.Assets.Textbox.Description
	G2L[""28""] = Instance.new(""TextLabel"", G2L[""20""]);
	G2L[""28""][""TextWrapped""] = true;
	G2L[""28""][""BorderSizePixel""] = 0;
	G2L[""28""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""28""][""TextXAlignment""] = Enum.TextXAlignment.Left;
	G2L[""28""][""TextTransparency""] = 0.25;
	G2L[""28""][""TextYAlignment""] = Enum.TextYAlignment.Top;
	G2L[""28""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""28""][""TextSize""] = 14;
	G2L[""28""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""28""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""28""][""BackgroundTransparency""] = 1;
	G2L[""28""][""RichText""] = true
	G2L[""28""][""AutomaticSize""] = Enum.AutomaticSize.Y
	G2L[""28""][""AnchorPoint""] = Vector2.new(0, 0);
	G2L[""28""][""Size""] = UDim2.new(0, 299, 0, 30);
	G2L[""28""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""28""][""Text""] = [[ ]];
	G2L[""28""][""Name""] = [[Description]];
	G2L[""28""][""Position""] = UDim2.new(0, 10, 0, 44);

	-- StarterGui.Light.MainFrame.Assets.Button
	G2L[""29""] = Instance.new(""TextButton"", G2L[""1a""]);
	G2L[""29""][""BorderSizePixel""] = 0;
	G2L[""29""][""AutoButtonColor""] = false;
	G2L[""29""][""TextTransparency""] = 0.25;
	G2L[""29""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""29""][""TextSize""] = 16;
	G2L[""29""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""29""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""29""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""29""][""Size""] = UDim2.new(0, 315, 0, 30);
	G2L[""29""][""BackgroundTransparency""] = 0.9;
	G2L[""29""][""Name""] = [[Button]];
	G2L[""29""][""ClipsDescendants""] = true;
	G2L[""29""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""29""][""Text""] = [[ ]];
	G2L[""29""][""Visible""] = false;

	-- StarterGui.Light.MainFrame.Assets.Button.ButtonCorner
	G2L[""2a""] = Instance.new(""UICorner"", G2L[""29""]);
	G2L[""2a""][""Name""] = [[ButtonCorner]];
	G2L[""2a""][""CornerRadius""] = UDim.new(0, 4);

	-- StarterGui.Light.MainFrame.Assets.Button.UIStroke
	G2L[""2b""] = Instance.new(""UIStroke"", G2L[""29""]);
	G2L[""2b""][""Transparency""] = 0.5;
	G2L[""2b""][""ApplyStrokeMode""] = Enum.ApplyStrokeMode.Border;
	G2L[""2b""][""Thickness""] = 0.75;
	G2L[""2b""][""Color""] = Color3.fromRGB(212, 212, 212);

	-- StarterGui.Light.MainFrame.Assets.Button.Label
	G2L[""2c""] = Instance.new(""TextLabel"", G2L[""29""]);
	G2L[""2c""][""BorderSizePixel""] = 0;
	G2L[""2c""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""2c""][""TextXAlignment""] = Enum.TextXAlignment.Left;
	G2L[""2c""][""TextTransparency""] = 0.25;
	G2L[""2c""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""2c""][""TextSize""] = 16;
	G2L[""2c""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""2c""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""2c""][""BackgroundTransparency""] = 1;
	G2L[""2c""][""AnchorPoint""] = Vector2.new(0, 0.5);
	G2L[""2c""][""Size""] = UDim2.new(0, 264, 0, 16);
	G2L[""2c""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""2c""][""Name""] = [[Label]];
	G2L[""2c""][""Position""] = UDim2.new(0, 10, 0, 15);

	-- StarterGui.Light.MainFrame.Assets.Button.Description
	G2L[""2d""] = Instance.new(""TextLabel"", G2L[""29""]);
	G2L[""2d""][""TextWrapped""] = true;
	G2L[""2d""][""BorderSizePixel""] = 0;
	G2L[""2d""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""2d""][""TextXAlignment""] = Enum.TextXAlignment.Left;
	G2L[""2d""][""TextTransparency""] = 0.25;
	G2L[""2d""][""TextYAlignment""] = Enum.TextYAlignment.Top;
	G2L[""2d""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""2d""][""TextSize""] = 14;
	G2L[""2d""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""2d""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""2d""][""BackgroundTransparency""] = 1;
	G2L[""2d""][""RichText""] = true
	G2L[""2d""][""AutomaticSize""] = Enum.AutomaticSize.Y
	G2L[""2d""][""AnchorPoint""] = Vector2.new(0, 0);
	G2L[""2d""][""Size""] = UDim2.new(0, 299, 0, 30);
	G2L[""2d""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""2d""][""Text""] = [[ ]];
	G2L[""2d""][""Name""] = [[Description]];
	G2L[""2d""][""Position""] = UDim2.new(0, 10, 0, 44);

	-- StarterGui.Light.MainFrame.Assets.TabButton
	G2L[""2e""] = Instance.new(""TextButton"", G2L[""1a""]);
	G2L[""2e""][""BorderSizePixel""] = 0;
	G2L[""2e""][""TextTransparency""] = 0.25;
	G2L[""2e""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""2e""][""TextSize""] = 16;
	G2L[""2e""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""2e""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""2e""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""2e""][""Size""] = UDim2.new(0, 91, 0, 20);
	G2L[""2e""][""BackgroundTransparency""] = 1;
	G2L[""2e""][""Name""] = [[TabButton]];
	G2L[""2e""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""2e""][""Text""] = [[Config]];
	G2L[""2e""][""Visible""] = false;

	-- StarterGui.Light.MainFrame.Assets.TabButton.UICorner
	G2L[""2f""] = Instance.new(""UICorner"", G2L[""2e""]);
	G2L[""2f""][""CornerRadius""] = UDim.new(0, 2);

	-- StarterGui.Light.MainFrame.Assets.Toggle
	G2L[""30""] = Instance.new(""TextButton"", G2L[""1a""]);
	G2L[""30""][""BorderSizePixel""] = 0;
	G2L[""30""][""AutoButtonColor""] = false;
	G2L[""30""][""TextTransparency""] = 0.25;
	G2L[""30""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""30""][""TextSize""] = 16;
	G2L[""30""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""30""][""BackgroundColor3""] = Color3.fromRGB(255, 175, 175);
	G2L[""30""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""30""][""Size""] = UDim2.new(0, 315, 0, 30);
	G2L[""30""][""BackgroundTransparency""] = 0.9;
	G2L[""30""][""Name""] = [[Toggle]];
	G2L[""30""][""ClipsDescendants""] = true;
	G2L[""30""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""30""][""Text""] = [[ ]];
	G2L[""30""][""Visible""] = false;
	G2L[""30""][""Position""] = UDim2.new(0.01087, 0, 0.02256, 0);

	-- StarterGui.Light.MainFrame.Assets.Toggle.ButtonCorner
	G2L[""31""] = Instance.new(""UICorner"", G2L[""30""]);
	G2L[""31""][""Name""] = [[ButtonCorner]];
	G2L[""31""][""CornerRadius""] = UDim.new(0, 4);

	-- StarterGui.Light.MainFrame.Assets.Toggle.Label
	G2L[""32""] = Instance.new(""TextLabel"", G2L[""30""]);
	G2L[""32""][""BorderSizePixel""] = 0;
	G2L[""32""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""32""][""TextXAlignment""] = Enum.TextXAlignment.Left;
	G2L[""32""][""TextTransparency""] = 0.25;
	G2L[""32""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""32""][""TextSize""] = 16;
	G2L[""32""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""32""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""32""][""BackgroundTransparency""] = 1;
	G2L[""32""][""AnchorPoint""] = Vector2.new(0, 0.5);
	G2L[""32""][""Size""] = UDim2.new(0, 264, 0, 16);
	G2L[""32""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""32""][""Name""] = [[Label]];
	G2L[""32""][""Position""] = UDim2.new(0, 10, 0, 15);

	-- StarterGui.Light.MainFrame.Assets.Toggle.UIStroke
	G2L[""33""] = Instance.new(""UIStroke"", G2L[""30""]);
	G2L[""33""][""Transparency""] = 0.5;
	G2L[""33""][""ApplyStrokeMode""] = Enum.ApplyStrokeMode.Border;
	G2L[""33""][""Thickness""] = 0.75;
	G2L[""33""][""Color""] = Color3.fromRGB(212, 212, 212);

	-- StarterGui.Light.MainFrame.Assets.Toggle.Description
	G2L[""34""] = Instance.new(""TextLabel"", G2L[""30""]);
	G2L[""34""][""TextWrapped""] = true;
	G2L[""34""][""BorderSizePixel""] = 0;
	G2L[""34""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""34""][""TextXAlignment""] = Enum.TextXAlignment.Left;
	G2L[""34""][""TextTransparency""] = 0.25;
	G2L[""34""][""TextYAlignment""] = Enum.TextYAlignment.Top;
	G2L[""34""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""34""][""TextSize""] = 14;
	G2L[""34""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""34""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""34""][""BackgroundTransparency""] = 1;
	G2L[""34""][""RichText""] = true
	G2L[""34""][""AutomaticSize""] = Enum.AutomaticSize.Y
	G2L[""34""][""AnchorPoint""] = Vector2.new(0, 0);
	G2L[""34""][""Size""] = UDim2.new(0, 299, 0, 30);
	G2L[""34""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""34""][""Text""] = [[ ]];
	G2L[""34""][""Name""] = [[Description]];
	G2L[""34""][""Position""] = UDim2.new(0, 10, 0, 44);

	-- StarterGui.Light.MainFrame.Assets.Slider
	G2L[""35""] = Instance.new(""Frame"", G2L[""1a""]);
	G2L[""35""][""Visible""] = false;
	G2L[""35""][""BorderSizePixel""] = 0;
	G2L[""35""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""35""][""ClipsDescendants""] = true;
	G2L[""35""][""Size""] = UDim2.new(0, 315, 0, 55);
	G2L[""35""][""Position""] = UDim2.new(0.01087, 0, 0.02256, 0);
	G2L[""35""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""35""][""Name""] = [[Slider]];
	G2L[""35""][""BackgroundTransparency""] = 0.9;

	-- StarterGui.Light.MainFrame.Assets.Slider.ButtonCorner
	G2L[""36""] = Instance.new(""UICorner"", G2L[""35""]);
	G2L[""36""][""Name""] = [[ButtonCorner]];
	G2L[""36""][""CornerRadius""] = UDim.new(0, 4);

	-- StarterGui.Light.MainFrame.Assets.Slider.UIStroke
	G2L[""37""] = Instance.new(""UIStroke"", G2L[""35""]);
	G2L[""37""][""Transparency""] = 0.5;
	G2L[""37""][""ApplyStrokeMode""] = Enum.ApplyStrokeMode.Border;
	G2L[""37""][""Thickness""] = 0.75;
	G2L[""37""][""Color""] = Color3.fromRGB(212, 212, 212);

	-- StarterGui.Light.MainFrame.Assets.Slider.SliderHold
	G2L[""38""] = Instance.new(""TextButton"", G2L[""35""]);
	G2L[""38""][""BorderSizePixel""] = 0;
	G2L[""38""][""AutoButtonColor""] = false;
	G2L[""38""][""TextSize""] = 14;
	G2L[""38""][""TextColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""38""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""38""][""FontFace""] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""38""][""Size""] = UDim2.new(0, 297, 0, 16);
	G2L[""38""][""BackgroundTransparency""] = 0.9;
	G2L[""38""][""Name""] = [[SliderHold]];
	G2L[""38""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""38""][""Text""] = [[ ]];
	G2L[""38""][""Position""] = UDim2.new(0.032, 0, 0, 30);

	-- StarterGui.Light.MainFrame.Assets.Slider.SliderHold.UIStroke
	G2L[""39""] = Instance.new(""UIStroke"", G2L[""38""]);
	G2L[""39""][""Transparency""] = 0.5;
	G2L[""39""][""ApplyStrokeMode""] = Enum.ApplyStrokeMode.Border;
	G2L[""39""][""Thickness""] = 0.75;
	G2L[""39""][""Color""] = Color3.fromRGB(212, 212, 212);

	-- StarterGui.Light.MainFrame.Assets.Slider.SliderHold.SliderDecor
	G2L[""3a""] = Instance.new(""Frame"", G2L[""38""]);
	G2L[""3a""][""BorderSizePixel""] = 0;
	G2L[""3a""][""BackgroundColor3""] = Color3.fromRGB(255, 185, 185);
	G2L[""3a""][""Size""] = UDim2.new(0, 0, 0, 16);
	G2L[""3a""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""3a""][""Name""] = [[SliderDecor]];
	G2L[""3a""][""BackgroundTransparency""] = 0.8;

	-- StarterGui.Light.MainFrame.Assets.Slider.SliderHold.SliderDecor.ButtonCorner
	G2L[""3b""] = Instance.new(""UICorner"", G2L[""3a""]);
	G2L[""3b""][""Name""] = [[ButtonCorner]];
	G2L[""3b""][""CornerRadius""] = UDim.new(0, 2);

	-- StarterGui.Light.MainFrame.Assets.Slider.SliderHold.Value
	G2L[""3c""] = Instance.new(""TextLabel"", G2L[""38""]);
	G2L[""3c""][""BorderSizePixel""] = 0;
	G2L[""3c""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""3c""][""TextXAlignment""] = Enum.TextXAlignment.Right;
	G2L[""3c""][""TextTransparency""] = 0.25;
	G2L[""3c""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""3c""][""TextSize""] = 16;
	G2L[""3c""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""3c""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""3c""][""BackgroundTransparency""] = 1;
	G2L[""3c""][""AnchorPoint""] = Vector2.new(0, 0.5);
	G2L[""3c""][""Size""] = UDim2.new(0, 38, 0, 14);
	G2L[""3c""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""3c""][""Text""] = [[10]];
	G2L[""3c""][""Name""] = [[Value]];
	G2L[""3c""][""Position""] = UDim2.new(0.8381, 10, -1.25292, 5);

	-- StarterGui.Light.MainFrame.Assets.Slider.SliderHold.ButtonCorner
	G2L[""3d""] = Instance.new(""UICorner"", G2L[""38""]);
	G2L[""3d""][""Name""] = [[ButtonCorner]];
	G2L[""3d""][""CornerRadius""] = UDim.new(0, 2);

	-- StarterGui.Light.MainFrame.Assets.Slider.Label
	G2L[""3e""] = Instance.new(""TextLabel"", G2L[""35""]);
	G2L[""3e""][""BorderSizePixel""] = 0;
	G2L[""3e""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""3e""][""TextXAlignment""] = Enum.TextXAlignment.Left;
	G2L[""3e""][""TextTransparency""] = 0.25;
	G2L[""3e""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""3e""][""TextSize""] = 16;
	G2L[""3e""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""3e""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""3e""][""BackgroundTransparency""] = 1;
	G2L[""3e""][""AnchorPoint""] = Vector2.new(0, 0.5);
	G2L[""3e""][""Size""] = UDim2.new(0, 264, 0, 16);
	G2L[""3e""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""3e""][""Name""] = [[Label]];
	G2L[""3e""][""Position""] = UDim2.new(0, 10, 0, 15);

	-- StarterGui.Light.MainFrame.Assets.Slider.Description
	G2L[""3f""] = Instance.new(""TextLabel"", G2L[""35""]);
	G2L[""3f""][""TextWrapped""] = true;
	G2L[""3f""][""BorderSizePixel""] = 0;
	G2L[""3f""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""3f""][""TextXAlignment""] = Enum.TextXAlignment.Left;
	G2L[""3f""][""TextTransparency""] = 0.25;
	G2L[""3f""][""TextYAlignment""] = Enum.TextYAlignment.Top;
	G2L[""3f""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""3f""][""TextSize""] = 14;
	G2L[""3f""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""3f""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""3f""][""BackgroundTransparency""] = 1;
	G2L[""3f""][""RichText""] = true
	G2L[""3f""][""AutomaticSize""] = Enum.AutomaticSize.Y
	G2L[""3f""][""AnchorPoint""] = Vector2.new(0, 0);
	G2L[""3f""][""Size""] = UDim2.new(0, 299, 0, 30);
	G2L[""3f""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""3f""][""Text""] = [[]];
	G2L[""3f""][""Name""] = [[Description]];
	G2L[""3f""][""Position""] = UDim2.new(0, 10, 0, 69);

	-- StarterGui.Light.MainFrame.Assets.DropdownOption
	G2L[""40""] = Instance.new(""TextButton"", G2L[""1a""]);
	G2L[""40""][""BorderSizePixel""] = 0;
	G2L[""40""][""TextTransparency""] = 0.25;
	G2L[""40""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""40""][""TextSize""] = 16;
	G2L[""40""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""40""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""40""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""40""][""Size""] = UDim2.new(0, 285, 0, 20);
	G2L[""40""][""BackgroundTransparency""] = 0.95;
	G2L[""40""][""Name""] = [[DropdownOption]];
	G2L[""40""][""ClipsDescendants""] = true;
	G2L[""40""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""40""][""Text""] = [[ ]];
	G2L[""40""][""Visible""] = false;
	G2L[""40""][""Position""] = UDim2.new(0, 0, 0.04615, 0);

	-- StarterGui.Light.MainFrame.Assets.DropdownOption.ButtonCorner
	G2L[""41""] = Instance.new(""UICorner"", G2L[""40""]);
	G2L[""41""][""Name""] = [[ButtonCorner]];
	G2L[""41""][""CornerRadius""] = UDim.new(0, 4);

	-- StarterGui.Light.MainFrame.Assets.DropdownOption.Label
	G2L[""42""] = Instance.new(""TextLabel"", G2L[""40""]);
	G2L[""42""][""BorderSizePixel""] = 0;
	G2L[""42""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""42""][""TextXAlignment""] = Enum.TextXAlignment.Left;
	G2L[""42""][""TextTransparency""] = 0.25;
	G2L[""42""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""42""][""TextSize""] = 14;
	G2L[""42""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""42""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""42""][""BackgroundTransparency""] = 1;
	G2L[""42""][""AnchorPoint""] = Vector2.new(0, 0.5);
	G2L[""42""][""Size""] = UDim2.new(0, 264, 0, 20);
	G2L[""42""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""42""][""Text""] = [[Option 1]];
	G2L[""42""][""Name""] = [[Label]];
	G2L[""42""][""Position""] = UDim2.new(0, 10, 0, 10);

	-- StarterGui.Light.MainFrame.Assets.Dropdown
	G2L[""43""] = Instance.new(""TextButton"", G2L[""1a""]);
	G2L[""43""][""BorderSizePixel""] = 0;
	G2L[""43""][""AutoButtonColor""] = false;
	G2L[""43""][""TextTransparency""] = 0.25;
	G2L[""43""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""43""][""TextSize""] = 16;
	G2L[""43""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""43""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""43""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""43""][""Size""] = UDim2.new(0, 315, 0, 30);
	G2L[""43""][""BackgroundTransparency""] = 0.9;
	G2L[""43""][""Name""] = [[Dropdown]];
	G2L[""43""][""ClipsDescendants""] = true;
	G2L[""43""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""43""][""Text""] = [[ ]];
	G2L[""43""][""Visible""] = false;
	G2L[""43""][""Position""] = UDim2.new(0.01087, 0, 0.0188, 0);

	-- StarterGui.Light.MainFrame.Assets.Dropdown.ButtonCorner
	G2L[""44""] = Instance.new(""UICorner"", G2L[""43""]);
	G2L[""44""][""Name""] = [[ButtonCorner]];
	G2L[""44""][""CornerRadius""] = UDim.new(0, 4);

	-- StarterGui.Light.MainFrame.Assets.Dropdown.UIStroke
	G2L[""45""] = Instance.new(""UIStroke"", G2L[""43""]);
	G2L[""45""][""Transparency""] = 0.5;
	G2L[""45""][""ApplyStrokeMode""] = Enum.ApplyStrokeMode.Border;
	G2L[""45""][""Thickness""] = 0.75;
	G2L[""45""][""Color""] = Color3.fromRGB(212, 212, 212);

	-- StarterGui.Light.MainFrame.Assets.Dropdown.Label
	G2L[""46""] = Instance.new(""TextLabel"", G2L[""43""]);
	G2L[""46""][""BorderSizePixel""] = 0;
	G2L[""46""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""46""][""TextXAlignment""] = Enum.TextXAlignment.Left;
	G2L[""46""][""TextTransparency""] = 0.25;
	G2L[""46""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""46""][""TextSize""] = 16;
	G2L[""46""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""46""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""46""][""BackgroundTransparency""] = 1;
	G2L[""46""][""AnchorPoint""] = Vector2.new(0, 0.5);
	G2L[""46""][""Size""] = UDim2.new(0, 192, 0, 16);
	G2L[""46""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""46""][""Text""] = [[Select your agent:]];
	G2L[""46""][""Name""] = [[Label]];
	G2L[""46""][""Position""] = UDim2.new(0, 10, 0, 15);

	-- StarterGui.Light.MainFrame.Assets.Dropdown.Description
	G2L[""47""] = Instance.new(""TextLabel"", G2L[""43""]);
	G2L[""47""][""TextWrapped""] = true;
	G2L[""47""][""BorderSizePixel""] = 0;
	G2L[""47""][""TextStrokeColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""47""][""TextXAlignment""] = Enum.TextXAlignment.Left;
	G2L[""47""][""TextTransparency""] = 0.25;
	G2L[""47""][""TextYAlignment""] = Enum.TextYAlignment.Top;
	G2L[""47""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""47""][""TextSize""] = 14;
	G2L[""47""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""47""][""TextColor3""] = Color3.fromRGB(223, 223, 223);
	G2L[""47""][""BackgroundTransparency""] = 1;
	G2L[""47""][""AnchorPoint""] = Vector2.new(0, 0.5);
	G2L[""47""][""Size""] = UDim2.new(0, 299, 0, 28);
	G2L[""47""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""47""][""Text""] = [[Description]];
	G2L[""47""][""Name""] = [[Description]];
	G2L[""47""][""Position""] = UDim2.new(0, 10, 0, 44);

	-- StarterGui.Light.MainFrame.Assets.Dropdown.SelectedOption
	G2L[""48""] = Instance.new(""TextLabel"", G2L[""43""]);
	G2L[""48""][""BorderSizePixel""] = 0;
	G2L[""48""][""TextStrokeColor3""] = Color3.fromRGB(141, 179, 196);
	G2L[""48""][""TextXAlignment""] = Enum.TextXAlignment.Right;
	G2L[""48""][""TextTransparency""] = 0.25;
	G2L[""48""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""48""][""TextSize""] = 16;
	G2L[""48""][""FontFace""] = Font.new([[rbxassetid://12187370747]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
	G2L[""48""][""TextColor3""] = Color3.fromRGB(160, 203, 223);
	G2L[""48""][""BackgroundTransparency""] = 1;
	G2L[""48""][""AnchorPoint""] = Vector2.new(0, 0.5);
	G2L[""48""][""Size""] = UDim2.new(0, 98, 0, 16);
	G2L[""48""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""48""][""Text""] = [[nil]];
	G2L[""48""][""Name""] = [[SelectedOption]];
	G2L[""48""][""Position""] = UDim2.new(0, 202, 0, 15);

	-- StarterGui.Light.MainFrame.Assets.Dropdown.DropDownInfo
	G2L[""49""] = Instance.new(""Frame"", G2L[""43""]);
	G2L[""49""][""BorderSizePixel""] = 0;
	G2L[""49""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""49""][""Size""] = UDim2.new(0, 301, 0, 52);
	G2L[""49""][""Position""] = UDim2.new(0, 8, 0, 65);
	G2L[""49""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""49""][""Name""] = [[DropDownInfo]];
	G2L[""49""][""BackgroundTransparency""] = 1;

	-- StarterGui.Light.MainFrame.Assets.Dropdown.DropDownInfo.ScrollingFrame
	G2L[""4a""] = Instance.new(""ScrollingFrame"", G2L[""49""]);
	G2L[""4a""][""Active""] = true;
	G2L[""4a""][""BorderSizePixel""] = 0;
	G2L[""4a""][""CanvasSize""] = UDim2.new(0, 0, 0, 0);
	G2L[""4a""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""4a""][""AutomaticCanvasSize""] = Enum.AutomaticSize.Y;
	G2L[""4a""][""Size""] = UDim2.new(0, 301, 0, 46);
	G2L[""4a""][""Position""] = UDim2.new(0, 0, 0.05987, 0);
	G2L[""4a""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""4a""][""ScrollBarThickness""] = 1;
	G2L[""4a""][""BackgroundTransparency""] = 1;

	-- StarterGui.Light.MainFrame.Assets.Dropdown.DropDownInfo.ScrollingFrame.UIListLayout
	G2L[""4b""] = Instance.new(""UIListLayout"", G2L[""4a""]);
	G2L[""4b""][""HorizontalAlignment""] = Enum.HorizontalAlignment.Center;
	G2L[""4b""][""Padding""] = UDim.new(0, 2);
	G2L[""4b""][""SortOrder""] = Enum.SortOrder.LayoutOrder;

	-- StarterGui.Light.MainFrame.Assets.Dropdown.DropDownInfo.UIStroke
	G2L[""4c""] = Instance.new(""UIStroke"", G2L[""49""]);
	G2L[""4c""][""Transparency""] = 0.5;
	G2L[""4c""][""ApplyStrokeMode""] = Enum.ApplyStrokeMode.Border;
	G2L[""4c""][""Thickness""] = 0.75;
	G2L[""4c""][""Color""] = Color3.fromRGB(212, 212, 212);

	-- StarterGui.Light.MainFrame.Assets.Dropdown.DropDownInfo.UICorner
	G2L[""4d""] = Instance.new(""UICorner"", G2L[""49""]);
	G2L[""4d""][""CornerRadius""] = UDim.new(0, 2);

	-- StarterGui.Light.MainFrame.Assets.Tab
	G2L[""4e""] = Instance.new(""ScrollingFrame"", G2L[""1a""]);
	G2L[""4e""][""Visible""] = false;
	G2L[""4e""][""Active""] = true;
	G2L[""4e""][""BorderSizePixel""] = 0;
	G2L[""4e""][""CanvasSize""] = UDim2.new(0, 0, 0, 0);
	G2L[""4e""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""4e""][""Name""] = [[Tab]];
	G2L[""4e""][""AutomaticCanvasSize""] = Enum.AutomaticSize.Y;
	G2L[""4e""][""Size""] = UDim2.new(0, 322, 0, 265);
	G2L[""4e""][""ScrollBarImageColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""4e""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""4e""][""ScrollBarThickness""] = 0;
	G2L[""4e""][""BackgroundTransparency""] = 1;

	-- StarterGui.Light.MainFrame.Assets.Tab.UIListLayout
	G2L[""4f""] = Instance.new(""UIListLayout"", G2L[""4e""]);
	G2L[""4f""][""HorizontalAlignment""] = Enum.HorizontalAlignment.Center;
	G2L[""4f""][""Padding""] = UDim.new(0, 5);
	G2L[""4f""][""SortOrder""] = Enum.SortOrder.LayoutOrder;

	-- StarterGui.Light.MainFrame.Assets.Tab.FillerTop
	G2L[""50""] = Instance.new(""Frame"", G2L[""4e""]);
	G2L[""50""][""BorderSizePixel""] = 0;
	G2L[""50""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""50""][""Size""] = UDim2.new(0, 100, 0, 1);
	G2L[""50""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""50""][""Name""] = [[FillerTop]];
	G2L[""50""][""BackgroundTransparency""] = 1;

	-- StarterGui.Light.MainFrame.Assets.Tab.FillerBottom
	G2L[""51""] = Instance.new(""Frame"", G2L[""4e""]);
	G2L[""51""][""BorderSizePixel""] = 0;
	G2L[""51""][""BackgroundColor3""] = Color3.fromRGB(255, 255, 255);
	G2L[""51""][""Size""] = UDim2.new(0, 100, 0, 1);
	G2L[""51""][""BorderColor3""] = Color3.fromRGB(0, 0, 0);
	G2L[""51""][""Name""] = [[FillerBottom]];
	G2L[""51""][""BackgroundTransparency""] = 1;
end)

local function ApplyPropertyTween(GuiObject, Information)
	local Tweening = TweenServ:Create(GuiObject, TweenInformation, Information)

	Tweening.Completed:Connect(function()
		Tweening:Destroy()
	end)

	Tweening:Play()
end

local function ApplyTextGlowingHover(GuiObject, TouchedObject)
	local TouchedObject = TouchedObject or GuiObject
	TouchedObject.MouseEnter:Connect(function()
		ApplyPropertyTween(GuiObject, {TextStrokeTransparency=0.85})
	end)

	TouchedObject.MouseLeave:Connect(function()
		ApplyPropertyTween(GuiObject, {TextStrokeTransparency=1})
	end)
end

local function ApplyAutoResize(GuiObject, TextObject)
	local OriginalPosition = TextObject.Position
	TextObject:GetPropertyChangedSignal(""Text""):Connect(function()
		TextObject.Position = OriginalPosition + UDim2.new(0,0,0,TextObject.TextBounds.Y-16)
	end)
	TextObject.Position = OriginalPosition + UDim2.new(0,0,0,TextObject.TextBounds.Y-16)
	
	local OldSize = GuiObject.Size

	GuiObject.MouseEnter:Connect(function()
		GuiObject:TweenSize(UDim2.new(0, OldSize.X.Offset, 0, OldSize.Y.Offset + (TextObject.AbsoluteSize.Y + 10) ), Enum.EasingDirection.InOut, Enum.EasingStyle.Quint, 0.2, true)
	end)

	GuiObject.MouseLeave:Connect(function()
		GuiObject:TweenSize(OldSize, Enum.EasingDirection.InOut, Enum.EasingStyle.Quint, 0.2, true)
	end)
end

Library.Create = function(self)
	Current = ScreenGui:Clone()
	Current.ResetOnSpawn = false
	
	
	Main = Current:WaitForChild(""MainFrame"")
	Assets = Main:WaitForChild(""Assets"")
	TabList = Main:WaitForChild(""TabList"")
	Tabs = Main:WaitForChild(""TabHandler""):WaitForChild(""Tabs"")
	local ExitPrompt = Main:WaitForChild(""ExitPrompt"")
	local Exit = Main:WaitForChild(""ExitButton"")
	local SnowTiles = Main:WaitForChild(""SnowTiles"")
	local Draggy = Instance.new(""Frame"")
	Draggy.Size = UDim2.new(0, 450,0, 25)
	Draggy.Position = UDim2.new(0,0,0,0)
	Draggy.Transparency = 0.99
	Draggy.Parent = Main
	local iscoregui = pcall(function() game:GetService(""CoreGui"") end)
	local dragging
	local dragInput
	local dragStart
	local startPos
	
	ExitPrompt.Visible = true
	Current.Enabled = true
	Current.Parent = (gethui and gethui()) or (not iscoregui and game:FindFirstChildOfClass(""CoreGui"")) or LocalPlayer.PlayerGui



	Main.MouseEnter:Connect(function()
		ApplyPropertyTween(Main, {[""Transparency""]=0.25})
		ApplyPropertyTween(SnowTiles, {[""ImageTransparency""]=0.75})
	end)

	Main.MouseLeave:Connect(function()
		ApplyPropertyTween(Main, {[""Transparency""]=0.5})
		ApplyPropertyTween(SnowTiles, {[""ImageTransparency""]=0.85})
	end)

	ApplyTextGlowingHover(Main:WaitForChild(""Title""))
	
	Exit.MouseButton1Down:Connect(function()
		ExitPrompt:TweenPosition(UDim2.new(0.5,0,0.5,0), Enum.EasingDirection.InOut, Enum.EasingStyle.Quint, 0.5, true)
	end)
	
	
	ExitPrompt:WaitForChild(""Yes"").MouseButton1Down:Once(function()
		Current:Destroy()
		Current = nil
	end)

	ExitPrompt:WaitForChild(""No"").MouseButton1Down:Connect(function()
		ExitPrompt:TweenPosition(UDim2.new(0.5,0,5.5,0), Enum.EasingDirection.InOut, Enum.EasingStyle.Quint, 0.5, true)
	end)


	local function update(input)
		local delta = input.Position - dragStart
		Main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
	
	local Mouse = LocalPlayer:GetMouse()
	Draggy.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = Main.Position

			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	Draggy.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)

	UserInput.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)

	return Tabbing
end
Tabbing.MakeTab = function(self, Name)
	local TabButton = Assets:WaitForChild(""TabButton""):Clone()
	ApplyTextGlowingHover(TabButton)

	local Tab = Assets:WaitForChild(""Tab""):Clone()
	local Bottom, Top = Tab:WaitForChild(""FillerBottom""), Tab:WaitForChild(""FillerTop"")
	TabButton.Visible = true
	TabButton.Text = Name
	Tab.Name = Name


	TabButton.MouseButton1Down:Connect(function()
		if SelectedTab and SelectedTab ~= Tab and SelectedTabButton and SelectedTabButton ~= TabButton then
			SelectedTab:TweenPosition(UDim2.new(1.033, 0, 0, 0), Enum.EasingDirection.InOut, Enum.EasingStyle.Quint, 0.5, true)
			Tab:TweenPosition(UDim2.new(0, 0, 0, 0), Enum.EasingDirection.InOut, Enum.EasingStyle.Quint, 0.5, true)

			ApplyPropertyTween(SelectedTabButton, {BackgroundTransparency=1})
			ApplyPropertyTween(TabButton, {BackgroundTransparency=0.9})
		end
		
		Tab.Visible = true

		SelectedTabButton = TabButton
		SelectedTab = Tab
	end)

	Tab.ChildAdded:Connect(function(Child)
		Bottom.Parent = nil
		task.delay(2, function()
			Bottom.Parent = Tab
		end)
	end)

	Tab.Parent = Tabs
	TabButton.Parent = TabList

	return {
		AddLabel = function(self, Text, DescriptionText)
			local Class = Assets:WaitForChild(""Label""):Clone()
			local TextLabel = Class:WaitForChild(""Label"")
			local Description = Class:WaitForChild(""Description"")
			if DescriptionText then
				Description.Text = DescriptionText
				ApplyAutoResize(Class, Description)
			end
			ApplyTextGlowingHover(TextLabel, Class)
			TextLabel.Text = Text

			Class.Visible = true
			Class.Parent = Tab

			return {
				UpdateLabel = function(Text)
					TextLabel.Text = Text
				end,
				Remove = function()
					Class:Destroy()
				end,
			}
		end,

		AddButton = function(self, Text, DescriptionText, Callback)
			local Callback = Callback
			local Class = Assets:WaitForChild(""Button""):Clone()
			local TextLabel = Class:WaitForChild(""Label"")
			local Description = Class:WaitForChild(""Description"")
			if DescriptionText then
				Description.Text = DescriptionText
				ApplyAutoResize(Class, Description)
			end
			ApplyTextGlowingHover(TextLabel, Class)
			TextLabel.Text = Text

			Class.Visible = true
			Class.Parent = Tab

			Class.MouseButton1Down:Connect(function()
				ApplyPropertyTween(Class, {BackgroundTransparency=0.75})

				task.spawn(Callback)

				task.delay(0.175, function()
					ApplyPropertyTween(Class, {BackgroundTransparency=0.9})
				end)
			end)

			return {
				UpdateLabel = function(self, Text)
					TextLabel.Text = Text
				end,
				UpdateCallback = function(_, NewCallback)
					Callback = NewCallback
				end,
				Remove = function()
					Class:Destroy()
				end,
			}
		end,


		AddToggle = function(self, Text, DescriptionText, DefaultState, Callback)
			local State = DefaultState
			Callback = Callback
			local Class = Assets:WaitForChild(""Toggle""):Clone()
			local TextLabel = Class:WaitForChild(""Label"")
			local Description = Class:WaitForChild(""Description"")
			if DescriptionText then
				Description.Text = DescriptionText
				ApplyAutoResize(Class, Description)
			end
			ApplyTextGlowingHover(TextLabel, Class)
			TextLabel.Text = Text

			Class.BackgroundColor3 = State and C3RGB(180, 255, 167) or C3RGB(255, 174, 174)
			Class.Visible = true
			Class.Parent = Tab

			Class.MouseButton1Down:Connect(function()
				State = not State
				ApplyPropertyTween(Class, {BackgroundColor3=State and C3RGB(180, 255, 167) or C3RGB(255, 174, 174)})

				task.spawn(Callback, State)
			end)

			return {
				UpdateLabel = function(self, Text)
					TextLabel.Text = Text
				end,
				UpdateCallback = function(_, NewCallback)
					Callback = NewCallback
				end,
				Set = function(State1)
					State = State1
					ApplyPropertyTween(Class, {BackgroundColor3=State and C3RGB(180, 255, 167) or C3RGB(255, 174, 174)})
				end,
				Change = function()
					State = not State
					ApplyPropertyTween(Class, {BackgroundColor3=State and C3RGB(180, 255, 167) or C3RGB(255, 174, 174)})
				end,
				Remove = function()
					Class:Destroy()
				end,
			}
		end,

		AddTextBox = function(self, Text, DescriptionText, Placeholder, Callback)
			Callback = Callback
			local Class = Assets:WaitForChild(""Textbox""):Clone()
			local TextLabel = Class:WaitForChild(""Label"")
			local TextBox = Class:FindFirstChildOfClass(""TextBox"")
			local Description = Class:WaitForChild(""Description"")
			if DescriptionText then
				Description.Text = DescriptionText
				ApplyAutoResize(Class, Description)
			end
			if Placeholder then TextBox.PlaceholderText = Placeholder end

			ApplyTextGlowingHover(TextLabel, Class)
			TextLabel.Text = Text

			Class.Visible = true
			Class.Parent = Tab

			TextBox.FocusLost:Connect(function(EnterPressed)
				if EnterPressed then
					task.spawn(Callback, TextBox.Text)
					TextBox.Text = """"
				end
			end)

			return {
				UpdateLabel = function(_, Text)
					TextLabel.Text = Text
				end,
				UpdatePlaceholder = function(_, Placeholder)
					TextBox.PlaceholderText = Placeholder
				end,
				UpdateCallback = function(_, NewCallback)
					Callback = NewCallback
				end,
				Remove = function()
					Class:Destroy()
				end,
			}
		end,

		AddSlider = function(self, Text, DescriptionText, Min, Max, Default, Callback)
			Callback = Callback
			local Class = Assets:WaitForChild(""Slider""):Clone()
			local TextLabel = Class:WaitForChild(""Label"")
			local SliderHolder = Class:WaitForChild(""SliderHold"")
			local SliderDecor = SliderHolder:WaitForChild(""SliderDecor"")
			local SliderValue = SliderHolder:WaitForChild(""Value"")
			local Description = Class:WaitForChild(""Description"")
			if DescriptionText then
				Description.Text = DescriptionText
				ApplyAutoResize(Class, Description)
			end
			ApplyTextGlowingHover(TextLabel, Class)
			TextLabel.Text = Text

			Class.Visible = true
			Class.Parent = Tab

			local MinimumValue = Min or 0
			local MaximumValue = Max or 100

			SliderDecor.Size = UDim2.new(Default/Max, 0, 0, SliderDecor.AbsoluteSize.Y)

			SliderValue.Text = tostring(Default) or '10'

			local Value;
			local Move_Connection, Release_Connection
			local Mouse = game:GetService(""Players"").LocalPlayer:GetMouse()

			local CB = Callback or function() end -- I just copy pasted from my old reanimation lol

			SliderHolder.MouseButton1Down:Connect(function()
				Value = math.floor((((MaximumValue - MinimumValue) / 297) * SliderDecor.AbsoluteSize.X) + tonumber(MinimumValue)) or 0
				pcall(function()
					Callback(Value)
				end)
				SliderDecor.Size = UDim2.new(0, math.clamp(Mouse.X - SliderDecor.AbsolutePosition.X, 0, 297), 0, 16)
				Move_Connection = Mouse.Move:Connect(function()
					SliderValue.Text = Value
					Value = math.floor((((MaximumValue - MinimumValue) / 297) * SliderDecor.AbsoluteSize.X) + tonumber(MinimumValue))
					pcall(function()
						Callback(Value)
					end)
					SliderDecor.Size = UDim2.new(0, math.clamp(Mouse.X - SliderDecor.AbsolutePosition.X, 0, 297), 0, 16)
				end)
				Release_Connection = UserInput.InputEnded:Connect(function(MouseUIS)
					if MouseUIS.UserInputType == Enum.UserInputType.MouseButton1 then
						Value = math.floor((((MaximumValue - MinimumValue) / 297) * SliderDecor.AbsoluteSize.X) + tonumber(MinimumValue))
						Callback(Value)
						SliderDecor.Size = UDim2.new(0, math.clamp(Mouse.X - SliderDecor.AbsolutePosition.X, 0, 297), 0, 16)
						Move_Connection:Disconnect()
						Release_Connection:Disconnect()
					end
				end)
			end)

			return {
				UpdateLabel = function(self, Text)
					TextLabel.Text = Text
				end,
				UpdateCallback = function(self, NewCallback)
					Callback = NewCallback
				end,
				UpdateMinValue = function(self, NewValue)
					MinimumValue = NewValue or 0
				end,
				UpdateMaxValue = function(self, NewValue)
					MaximumValue = NewValue or 0
				end,
				Remove = function()
					Class:Destroy()
				end,
			}
		end,

		AddDropDown = function(self, Text, DescriptionText, List, Default, Callback)
			Callback = Callback
			local Opened = false
			local Class = Assets:WaitForChild(""Dropdown""):Clone()
			local TextLabel = Class:WaitForChild(""Label"")
			local Description = Class:WaitForChild(""Description"")
			local Selected = Class:WaitForChild(""SelectedOption"")
			local Scrolling = Class:WaitForChild(""DropDownInfo""):WaitForChild(""ScrollingFrame"")
			local OriginSize = Class.Size
			local ToResize = UDim2.new(0,315,0,125)

			Description.Text = DescriptionText or ""Dropdown.""

			ApplyTextGlowingHover(TextLabel, Class)
			ApplyTextGlowingHover(Selected, Class)
			TextLabel.Text = Text

			Class.Visible = true
			Class.Parent = Tab

			for _,v in next, List do
				local Option = Assets:WaitForChild(""DropdownOption""):Clone()
				local OptionLabel = Option:WaitForChild(""Label"")

				OptionLabel.Text = tostring(v)
				Option.Visible = true
				Option.Parent = Scrolling
				Option.MouseButton1Down:Connect(function()
					task.spawn(Callback, v)
					Selected.Text = tostring(v)

					ApplyPropertyTween(Option, {BackgroundTransparency=0.75})

					task.spawn(Callback)

					task.delay(0.175, function()
						ApplyPropertyTween(Option, {BackgroundTransparency=0.95})
					end)

					--Class:TweenSize(OriginSize, Enum.EasingDirection.InOut, Enum.EasingStyle.Quint, 0.5, true)
					--Opened = false
				end)
			end

			Class.MouseButton1Down:Connect(function()
				Opened = not Opened
				if Opened then	
					Class:TweenSize(ToResize, Enum.EasingDirection.InOut, Enum.EasingStyle.Quint, 0.5, true)
				else
					Class:TweenSize(OriginSize, Enum.EasingDirection.InOut, Enum.EasingStyle.Quint, 0.5, true)
				end
			end)

			Selected.Text = tostring(List[Default])
			return {
				UpdateLabel = function(self, Text)
					TextLabel.Text = Text
				end,
				UpdateCallback = function(self, NewCallback)
					Callback = NewCallback
				end,
				Remove = function()
					Class:Destroy()
				end,
			}
		end,
	}
end

local x = Library:Create()

local tab = x:MakeTab(""Credits"")
local Keybinds = x:MakeTab(""Keybinds"")
tab:AddLabel(""UI"", 'Credits to xyzkade on discord for the UI Library.')
tab:AddLabel(""Everything"", 'Credits to ballsman3761 or libary.hello on discord for everything else.')"
RiC92K0y,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,sayid83,JavaScript,Thursday 6th of June 2024 12:34:25 PM CDT,"G2A.com complimentary gift card & games guide.
Any item for free on G2A.com including Amazon gift cards & all else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
June 4nd 2024"
EpQQ154p,Untitled,AMRCODEING,C#,Thursday 6th of June 2024 12:33:00 PM CDT," public class Authentication
        {
            public String Server;
            public String Username;
            public String Password;
            public String MacAddress;
            public Authentication(Byte[] Buffer)
            {
                if (BitConverter.ToUInt16(Buffer, 0) == 312)
                {
                    if (BitConverter.ToUInt16(Buffer, 2) == 1952)
                    {
                        BinaryReader BR = new BinaryReader(new MemoryStream(Buffer));
                        BR.BaseStream.Seek(4, SeekOrigin.Current);
                        Username = Encoding.Default.GetString(BR.ReadBytes(16)).Replace(""\0"", """");
                        BR.ReadBytes(52);
                        Byte SizePassword = BR.ReadByte();
                        Password = PasswordDecryption.Decrypt(BR.ReadBytes(32), SizePassword);
                        BR.ReadBytes(31);
                        Server = Encoding.Default.GetString(BR.ReadBytes(16)).Replace(""\0"", """");
                        MacAddress = Encoding.Default.GetString(BR.ReadBytes(16)).Replace(""\0"", """");
                        BR.Close();
                    }
                }
            }
        }

private class PasswordDecryption
        {
            static Byte[] Own_Key = new Byte[32] { 90, 17, 149, 66, 219, 255, 251, 70, 166, 196, 18, 119, 53, 86, 200, 80, 163, 238, 137, 46, 10, 56, 158, 100, 64, 26, 88, 207, 239, 167, 123, 88 };
            static Byte[] Tow_Key = new Byte[32] { 88, 254, 246, 138, 126, 226, 64, 156, 140, 89, 90, 28, 108, 196, 28, 62, 23, 161, 92, 192, 94, 253, 194, 74, 138, 224, 88, 171, 233, 26, 217, 179 };
            public static String Decrypt(Byte[] Data, Byte Length)
            {
                Byte[] BufferOut = new Byte[Math.Min((Int32)Length, 32)];
                for (Int32 x = 0; x < Math.Min((Int32)Length, 32); x++)
                {
                    BufferOut[x] = (Byte)(Own_Key[x * 44 % 32] ^ Data[x]);
                    BufferOut[x] = (Byte)(Tow_Key[x * 99 % 32] ^ BufferOut[x]);
                }
                return Encoding.Default.GetString(BufferOut).Replace(""\0"", """");
            }
        }"
svAEW2yJ,Python Main Guard,haiv,Python,Thursday 6th of June 2024 12:29:50 PM CDT,"if __name__ == ""__main__"":
    main()
"
GF7Q1hST,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,PetrikDev,JavaScript,Thursday 6th of June 2024 12:28:21 PM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Xbox gift cards & all else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
4nd of June 2024"
hcjGVDTR,Untitled,Akuma95,Lua,Thursday 6th of June 2024 12:25:37 PM CDT,"-- Turtle Farming Programm
-- Funktionen

function Pause()
	for x=1,1200 do
		if redstone.getInput(""left"") == true then break end
		sleep(1)
	end
end

function Refuel()
    print(""Aktuelles Fuel level: "", turtle.getFuelLevel())
	turtle.select(1)
	while turtle.getItemCount(1) > 1 do 
		turtle.refuel(1)
	end
	turtle.select(2)
    
    print(""Geladen, Neues Fuel Level: "", turtle.getFuelLevel())
end

function Seed()
	turtle.digDown()
	turtle.placeDown()
end

function Vor(s)
	for x=1,8 do
		turtle.forward()
		if s == true then Seed() end
	end
end

function Lagern()
	for x=3,16 do
		turtle.select(x)
		while turtle.getItemCount(x) > 0 do 
			turtle.dropDown()
		end
	end
	turtle.select(2)
end

-- Startposition
Refuel()
turtle.select(2)
while turtle.detectUp() == true do
	turtle.turnRight()
	while turtle.forward() == ture do 
		turtle.forward()
	end
end

while turtle.detect() == true do
	turtle.turnRight()
end

Lagern()

while true do 
	Pause()
    Refuel()
	turtle.forward()
	Seed()

	for y=1,4 do
		Vor(true)
		turtle.turnLeft()
		turtle.forward()
		turtle.turnLeft()
		Seed()
		Vor(true)
		turtle.turnRight()
		turtle.forward()
		turtle.turnRight()
		Seed()
	end
	Vor(true)
	turtle.turnRight()

	Vor(false)
	turtle.turnRight()
	Vor(false)
	turtle.forward()
	turtle.turnRight()
	turtle.turnRight()

	Lagern()
	Pause()
end"
0W40rDD9,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,x3kiN,JavaScript,Thursday 6th of June 2024 12:22:20 PM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Steam gift cards & all else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
June 4nd 2024"
3J0dBucY,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,FeasModz514,JavaScript,Thursday 6th of June 2024 12:16:18 PM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Steam gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
4nd of June 2024"
FyRDws3k,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,kjihu25,JavaScript,Thursday 6th of June 2024 12:10:18 PM CDT,"G2A.com complimentary voucher & gaming guide.
Any voucher for free on G2A.com including Amazon gift cards & anything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
June 4nd 2024"
f8j9c7wR,ü§ë G2A.com Free Gift Card Guide Jun 2024 FIX ü§ë,jusst2k4,GetText,Thursday 6th of June 2024 12:09:41 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_720535.pdf

Working as of:
06 June 2024"
XSk0uv9s,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,Bufayez,JavaScript,Thursday 6th of June 2024 12:04:17 PM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Playstation gift cards & all else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
June 4nd 2024"
mGiDtFs2,Untitled,Rodunskiy,C#,Thursday 6th of June 2024 11:59:00 AM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            int[,] numbers =
            {
            {1,1,1,1 },
            {2,2,2,2 },
            {3,3,3,3 }
            };

            int lineIndex1 = 0;
            int lineIndex2 = 1;
            int sum = 0;
            int product = 1;

            for (int i = 0; i < numbers.GetLength(0); i++)
            {
                for (int j = 0; j < numbers.GetLength(1); j++)
                {
                    Console.Write(numbers[i, j]);
                }

                Console.WriteLine();
            }

            for (int i = 0; i < numbers.GetLength(0); i++)
            {
                product *= numbers[i, lineIndex1];
            }

            for (int i = 0; i < numbers.GetLength(1); i++)
            {
                sum += numbers[lineIndex2, i];
            }

            Console.WriteLine($""–°—É–º–º–∞: {sum}"");
            Console.WriteLine($""–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: {product}"");
        }
    }
}

"
nX4F3wwu,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,buch,JavaScript,Thursday 6th of June 2024 11:58:10 AM CDT,"G2A.com free voucher & gaming guide.
Any gift card for free on G2A.com including Steam gift cards & all else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
June 4nd 2024"
eySgx732,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,Alfonso1119,JavaScript,Thursday 6th of June 2024 11:52:06 AM CDT,"G2A.com complimentary gift card & gaming guide.
Any voucher for free on G2A.com including Xbox gift cards & everything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
June 4 2024"
kS5DVc7u,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,Garoam,JavaScript,Thursday 6th of June 2024 11:46:06 AM CDT,"G2A.com complimentary gift card & gaming guide.
Any voucher for free on G2A.com including Xbox gift cards & all else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
June 4nd 2024"
Q71MPBaB,BoreMisc,No_Zen,Lua,Thursday 6th of June 2024 11:45:09 AM CDT,"local chest = peripheral.wrap(""minecraft:chest_246"")

term.clear()
term.setCursorPos(1, 1)
print(""Bore Misc"")

turtle.select(1)

local filter = {}
filter[""create:track""] = true
filter[""minecraft:cobblestone""] = true
filter[""magnumtorch:diamond_magnum_torch""] = true

local function main()
	for slot, item in pairs(chest.list()) do
		if filter[item.name] then
			chest.pushItems(""minecraft:chest_249"", slot)
			turtle.dropDown()
		end
	end
	
	return ""continue""
end

while true do
	local status = main()
	if status == ""continue"" then
		os.sleep(0.1)
	elseif status == ""break"" then
		break
	else
		print(""Unknown exit status"")
	end
end"
G0iN8ewb,Stroomverbruik API - ESP32-3248S035 - core 3.0.0 - eigen webserver voor WiFi-verbinding,jgoy,C++,Thursday 6th of June 2024 11:39:33 AM CDT,"/* ==================================================================================
 sketch for ESP32-3248S035 - VERSION WITHOUT the library WiFiManager.h
 If a WiFi connection cannot be made, a Web server is started to store the WiFi credentials.
 SHOULD COMPILE ON CORE 3.0.x (Arduino IDE: boards manager: ESP32 - espressif)
 ====================================================================================
 Arduino IDE - board: ESP32 Dev Module of DOIT ESP32 DEVKIT V1
 https://nl.aliexpress.com/item/1005006398547061.html
 https://nl.aliexpress.com/item/1005005900820162.html
====================================================================================*/

#include <WiFi.h>
#include <ArduinoJson.h>  // https://github.com/bblanchon/ArduinoJson
#include <WebServer.h>
#include <Preferences.h>  // no need to download
#include <HTTPClient.h>   // for API connection
#include <TFT_eSPI.h>     // https://github.com/Bodmer/TFT_eSPI

TFT_eSPI tft = TFT_eSPI();  // User_Setup.h settings available on: https://espgo.be board ESP32-3248S035
WebServer server(80);
Preferences flash;

#define SHOW_ITEMS 34  // max number of records you want to process.
#define VALUE_RED 100  // electricity price in red color if higher than this value
#define UTC_OFFSET_SUMMER 7200
#define UTC_OFFSET_WINTER 3600
struct tm tInfo;                                                        // https://cplusplus.com/reference/ctime/tm/
bool chart = true;                                                      // display in figures or in chart (toggle with flash button)
const char* time_Zone = ""CET-1CEST,M3.5.0,M10.5.0/3"";                   // https://github.com/nayarsystems/posix_tz_db/blob/master/zones.csv
double prijzen[SHOW_ITEMS];                                             // most recent 34 prices
double prices[SHOW_ITEMS * 2];                                          // all prices returned by the API
double priceNow;                                                        // price of current hour
time_t epo[SHOW_ITEMS];                                                 // most recent 34 prices Json
time_t epoc[SHOW_ITEMS * 2];                                            // all epoch times returned by the API
uint8_t API_ITEMS;                                                      // counter for API data
String my_link = ""https://api.energy-charts.info/price?bzn=BE&start="";  // link will be completed with current time
String webText, buttons, Ssid, Pasw;
char* connect[] = { ""WiFi: no connection"", ""Connect to hotspot"", ""S035_ESP"", ""Start a browser - address"",
                    ""192.168.4.1"", ""to save network"", ""and password"" };

void setup(void) {
  pinMode(16, OUTPUT), digitalWrite(16, HIGH);  // green LED off
  pinMode(17, OUTPUT), digitalWrite(17, HIGH);  // blue LED off
  pinMode(0, INPUT_PULLUP);                     // flash button
  tft.init();
  tft.setRotation(3);
  tft.fillScreen(TFT_BLACK);  // delete output from previous sessions
  tft.setTextWrap(false);
  connectWiFi();
  configTzTime(time_Zone, ""be.pool.ntp.org"");
  showStartupData();
}

void loop() {
  display_Time();
  if (!digitalRead(0)) changeView();  // flash button changes between chart or list of figures
  // if (priceNow < 0) startHeavyPowerConsumer();  // priceNow = current price
}

void showStartupData() {
  tft.fillScreen(TFT_BLACK);
  tft.drawCentreString(""Retrieving SNTP time"", 240, 160, 4);
  getLocalTime(&tInfo);
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_ORANGE);
  tft.drawCentreString(""Retrieving Json Data"", 240, 160, 4);
  retrieve_Data();
  show_Chart(), showCurrentPrice();
}

void changeView() {
  chart = !chart;
  chart ? show_Chart() : show_Data();
  showCurrentPrice(), delay(800);  // 800 = UI debouncing button
}

void display_Time() {
  char theDate[11];
  getLocalTime(&tInfo);  // SNTP sync at startup and then every 3 hours thereafter (ESP32)
  tft.drawRect(-1, 26, 482, 2, WiFi.isConnected() ? TFT_GREEN : TFT_RED);
  tft.setTextColor(TFT_GREEN, TFT_BLACK);
  tft.setCursor(0, 0, 4);
  strftime(theDate, sizeof(theDate), ""%d-%m-%G"", &tInfo);  // https://cplusplus.com/reference/ctime/strftime/
  tft.print(theDate);
  tft.setCursor(tft.getCursorX() + 8, 0);
  tft.setTextColor(TFT_WHITE, TFT_BLACK);
  tft.printf(""%02d:%02d:%02d"", tInfo.tm_hour, tInfo.tm_min, tInfo.tm_sec);
  if ((tInfo.tm_hour == 15) && (tInfo.tm_min == 2) && (tInfo.tm_sec == 15)) ESP.restart();  // new API data available: restart
  if ((tInfo.tm_min == 0) && (tInfo.tm_sec == 0)) {                                        // refresh data (local) every hour
    (chart) ? show_Chart() : show_Data();
    showCurrentPrice(), delay(950);
  }
}

void retrieve_Data() {  // prepare string with epoch times and retrieve energy data
  time_t now;
  time(&now);                                                             // assign epoch time to ""now""
  now = now - (now % 3600);                                               // round down to the whole hour
  now = now + ((tInfo.tm_isdst) ? UTC_OFFSET_SUMMER : UTC_OFFSET_WINTER);  
  my_link = my_link + String(now - (24 * 3600)) + ""&end="" + String(now + (SHOW_ITEMS * 3600));
  if (my_link.length() > 56) get_JsonData();  // do not send empty input (e.g., if SNTP times out)
  else {                                      // composing string (to send to API) = failed
    tft.fillRect(0, 200, 320, 40, TFT_BLACK);
    tft.drawCentreString(""Link API incomplete"", 160, 200, 4);
  }
  tft.setCursor(264, 0, 4);
  tft.setTextColor(TFT_SILVER, TFT_BLACK);
  tft.print(""/MWh:"");
  tft.fillCircle(255, 10, 9, TFT_SILVER);  // euro symbol
  tft.fillCircle(255, 10, 7, TFT_BLACK), tft.fillRect(258, 5, 8, 12, TFT_BLACK);
  tft.drawRect(247, 8, 9, 2, TFT_SILVER), tft.drawRect(249, 11, 6, 2, TFT_SILVER);
}

void show_Chart() {  // Json data in chart on display
  tft.fillRect(0, 28, 480, 290, TFT_BLACK);
  tft.setTextColor(TFT_WHITE);
  for (uint8_t i = 0; i < 6; i++) {  // draw lines with values -50, 0, 50, 100 etc.
    tft.drawFastHLine(0, 40 + i * 50, 480, tft.color565(64, 64, 64));
    for (uint8_t j = 0; j < 3; j++)  // j verwerkt de horizontale co√∂rdinaat
      tft.drawRightString(String(i * 50 - 50), j * 228 + 23, 286 - i * 50, 1);
  }
  for (uint8_t i = 0; i < SHOW_ITEMS; i++) {
    struct tm* cor;              // to convert epoch times to tm structure in local time
    if (epo[i]) {                // do not show empty data
      cor = localtime(&epo[i]);  // adjust epoch times in the list to local time / dst
      if ((cor->tm_hour == tInfo.tm_hour) && (cor->tm_mday == tInfo.tm_mday)) {
        priceNow = prijzen[i];
        tft.drawFastVLine(6 + i * 14, 26, 292, TFT_MAGENTA);
        tft.fillTriangle((i * 14) - 4, 300, (i * 14) - 4, 310, 6 + i * 14, 305, TFT_MAGENTA);
        tft.fillTriangle((i * 14) - 4, 55, (i * 14) - 4, 65, 6 + i * 14, 60, TFT_MAGENTA);
      }
      tft.setTextColor(prijzen[i] > 0 ? TFT_BLACK : TFT_YELLOW);
      uint16_t mijnKleur = prijzen[i] < VALUE_RED ? TFT_CYAN : TFT_RED;
      if (prijzen[i] < 50) mijnKleur = TFT_GREEN;
      if (prijzen[i] < 0) {
        mijnKleur = TFT_YELLOW;
        tft.fillRect(i * 14, 240, 13, 0 - prijzen[i], mijnKleur);
        tft.drawFastVLine(i * 14 + 13, 240, 0 - prijzen[i], TFT_BLACK);
      } else {
        tft.fillRect(i * 14, 240 - prijzen[i], 13, prijzen[i], mijnKleur);
        tft.drawFastVLine(i * 14 + 13, 240 - prijzen[i], prijzen[i], TFT_BLACK);
      }
      tft.setCursor(1 + i * 14, 230, 1);  // hours at the bottom of chart
      tft.printf(""%02d"", cor->tm_hour);
      tft.setTextColor(TFT_RED);
      tft.setCursor(1 + i * 14, 243, 1);
      tft.printf(""%02d"", cor->tm_hour);
    }
  }
}

void show_Data() {  // display Json datas in 2 colums time / price
  tft.fillRect(0, 28, 480, 290, TFT_BLACK);
  tft.drawRect(240, 26, 2, 292, WiFi.isConnected() ? TFT_GREEN : TFT_RED);
  struct tm* cor;  
  for (uint8_t i = 0; i < SHOW_ITEMS; i++) {
    if (epo[i]) {               
      cor = localtime(&epo[i]);  
      tft.setTextColor(TFT_LIGHTGREY, TFT_BLACK);
      tft.setCursor(((i < 18) ? 0 : 260), 33 + (i % 18) * 16, 2);
      tft.printf("" %02d. "", i + 1);
      if ((cor->tm_hour == tInfo.tm_hour) && (cor->tm_mday == tInfo.tm_mday)) {
        priceNow = prijzen[i];
        tft.setTextColor(TFT_MAGENTA, TFT_BLACK);
      } else tft.setTextColor(TFT_WHITE, TFT_BLACK);
      tft.printf(""%02d-%02d-%02d %02d:%02d"", cor->tm_mday, cor->tm_mon + 1, cor->tm_year + 1900, cor->tm_hour, cor->tm_min);
      tft.setTextColor((prijzen[i] < VALUE_RED) ? TFT_CYAN : TFT_RED);
      if (prijzen[i] < 50) tft.setTextColor(TFT_GREEN, TFT_BLACK);
      if (prijzen[i] < 0) tft.setTextColor(TFT_YELLOW, TFT_BLACK);
      tft.drawRightString(String(prijzen[i]), (i < 18 ? 220 : 480), 33 + (i % 18) * 16, 2);
    }
  }
}

void showCurrentPrice() {  // price (upper right corner of display)
  tft.setTextColor(priceNow < VALUE_RED ? TFT_CYAN : TFT_RED);
  if (priceNow < 50) tft.setTextColor(TFT_GREEN);
  if (priceNow < 0) tft.setTextColor(TFT_YELLOW);
  tft.fillRect(344, 0, 136, 22, TFT_BLACK);
  tft.setCursor(344, 0, 4);
  tft.printf(""%3.2F"", priceNow);
}

void get_JsonData() {
  HTTPClient http;
  http.begin(my_link);
  if (http.GET() == 200) {
    DynamicJsonDocument doc(4096);  // choose value large enough to contain the data
    auto error = deserializeJson(doc, http.getString());
    if (error) {
      tft.drawCentreString(""deserializeJson() failed"", 240, 200, 4);
      tft.drawCentreString(error.c_str(), 240, 250, 4);
    }
    for (uint8_t i = 0; i < SHOW_ITEMS * 2; i++) {  // actually more data than we can show on display
      prices[i] = doc[""price""][i];
      epoc[i] = doc[""unix_seconds""][i];
      API_ITEMS = i;  // count number of returned items
    }
  } else {  // http.get has failed
    tft.fillScreen(TFT_BLACK);
    tft.drawCentreString(""Error in API response"", 240, 160, 4);
    tft.drawCentreString(""Restart in 20 seconds"", 240, 190, 4);
    delay(20000);
    ESP.restart();
  }
  http.end();
  uint8_t j = SHOW_ITEMS + 1;
  for (uint8_t i = API_ITEMS; i >= 0; i--) {  // select the most recent Json data
    if (epoc[i] != 0) {                       // ignore empty data
      j--;                                    // counter for results
      prijzen[j - 1] = prices[i];             // transferring valid prices from API results
      epo[j - 1] = epoc[i];                   // also hours to ""local"" array
      if (j == 0) break;                      // stop when we have 34 items
    }
  }
}

void connectWiFi() {
  WiFi.disconnect();
  flash.begin(""login_data"", true);  // true = alleen lezen
  Ssid = flash.getString(""ssid"", """");
  Pasw = flash.getString(""pasw"", """");
  flash.end();
  WiFi.begin(Ssid.c_str(), Pasw.c_str());
  if (testWifi()) return;
  else {  // no WiFi connection
    messageNoConnection();
    startWebServer();
    server.begin();
    setupAP();
  }
  while ((WiFi.status() != WL_CONNECTED)) server.handleClient();
}

bool testWifi() {
  tft.fillScreen(TFT_BLACK);
  tft.setCursor(44, 0, 4);
  tft.setTextColor(TFT_GREEN, TFT_BLACK);
  tft.print(""Verbinden met WiFi"");
  tft.fillCircle(160, 138, 10, TFT_YELLOW);
  tft.drawRect(10, 190, 300, 20, TFT_CYAN);
  byte c = 0;
  while (c < 180) {
    if (WiFi.isConnected()) {
      WiFi.setAutoReconnect(true);
      WiFi.persistent(true);
      return true;
    }
    delay(20);
    for (byte t = 0; t < 4; t++) {  // animatie logo wifi
      tft.drawSmoothArc(160, 140, (c % 20) + 20 + (t * 20), (c % 20) + 14 + (t * 20), 135, 225, TFT_YELLOW, TFT_YELLOW, true);
      tft.drawSmoothArc(160, 140, (c % 20) + 14 + (t * 20), (c % 20) + 13 + (t * 20), 120, 240, TFT_BLACK, TFT_BLACK, true);
    }
    tft.drawFastVLine(c + 11, 192, 16, TFT_CYAN);
    ++c;
  }
  return false;
}

void messageNoConnection() {
  tft.fillScreen(TFT_NAVY);
  tft.setTextColor(TFT_YELLOW), tft.setTextFont(4);
  for (uint8_t i = 0; i < 7; i++) tft.drawCentreString(connect[i], 240, 40 + i * 30, 4);
}

void setupAP(void) {
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  delay(100);
  int n = WiFi.scanNetworks();
  for (int i = 0; i < n; ++i) {
    buttons += ""\n<button onclick='scrollNaar(this.id)' id='"";
    buttons += WiFi.SSID(i);
    buttons += ""'"";
    buttons += "">"" + WiFi.SSID(i);
    buttons += ""</button><br>"";
  }
  delay(9000);
  WiFi.softAP(""S035_ESP"", """");
  startWebServer();
  server.begin();
}

void startWebServer() {
  server.on(""/"", []() {
    IPAddress ip = WiFi.softAPIP();
    webText = ""<!DOCTYPE HTML>\n<html lang='nl'>\n<head>\n<meta name='viewport' "";
    webText += ""content='width=device-width, initial-scale=1.0' />"";
    webText += ""\n<style>\np {\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 14px;\n}"";
    webText += ""\nbutton, input {\n  width: 200px;\n  border-radius: 5px;\n  padding: 4px 4px;"";
    webText += ""\n  margin: 8px; \n  font-size: 14px;\n  font-weight: 500;\n}"";
    webText += ""\n</style>\n</head>"";
    webText += ""\n<body bgcolor='LightYellow'><p align=center style=\""font-family:arial; "";
    webText += ""\nfont-size:180%;\"">Store WiFi credentials on ESP32 <br>"";
    webText += ""\n<p align=left style=\""font-family:arial; font-size:120%;\"">"";
    webText += ""\nNetworks found (Click on a network to select it):</p>"";
    webText += buttons;
    webText += ""\n</p><form method='get' action='setting'><p><b>\nSSID: <br>"";
    webText += ""\n<input id='ssid' name='ssid'><br>PASW: </b><br>"";
    webText += ""\n<input type='password' name='pass'><br><br>"";
    webText += ""\n<input type='submit' value='Opslaan'>\n</form>\n</body>\n<script>"";
    webText += ""\nfunction scrollNaar(tekst) {"";
    webText += ""\n  document.getElementById('ssid').value = tekst;"";
    webText += ""\n  window.scrollTo(0, document.body.scrollHeight);\n}\n</script>\n</body>\n</html>"";
    server.send(200, ""\ntext/html"", webText);
  });
  server.on(""/setting"", []() {  // store settings
    webText = ""<!DOCTYPE HTML>\n<html lang='nl'>\n<head>\n<meta name='viewport' "";
    webText += ""content='width=device-width, initial-scale=1.0' />"";
    webText += ""\n<style>\np {\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 14px;"";
    webText += ""\n}\n</style>\n</head>\n<body bgcolor='LightYellow'><p align=center style=\""font-family:arial;"";
    webText += ""\nfont-size:180%;\"">WiFi credentials stored<br>"";
    webText += ""\n<p align=left style=\""font-family:arial; font-size:120%;\"">"";
    webText += ""\n<u>ESP reboot, close this window. </u></p>\n</body>\n</html>"";
    server.send(200, ""\ntext/html"", webText);
    String mijnSsid = server.arg(""ssid"");
    String mijnPasw = server.arg(""pass"");
    if (mijnSsid.length() > 0 && mijnPasw.length() > 0) {
      flash.begin(""login_data"", false);  // false = also write to preferences ""flash/login_data""
      flash.putString(""ssid"", mijnSsid);
      flash.putString(""pasw"", mijnPasw);
      flash.end();
      ESP.restart();
    }
    server.sendHeader(""Access-Control-Allow-Origin"", ""*"");
    server.send(200, ""application/json"", webText);
  });
}"
2dKcqVh0,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,ColtM4A2,JavaScript,Thursday 6th of June 2024 11:33:56 AM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Xbox gift cards & anything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
4nd of June 2024"
KfEeJGPQ,"""Button Connectivity"" rev_01",pleasedontcode,Arduino,Thursday 6th of June 2024 11:33:12 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Button Connectivity""
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-06-06 16:31:46

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Turn on 6 light from wifi */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>  //https://github.com/evert-arias/EasyButton
#include <WiFi.h>        // Include the WiFi library

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void onButtonPressed();

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t San_PushButton_PIN_D4 = 4;

/****** DEFINITION OF DIGITAL OUTPUT PINS FOR LIGHTS *****/
const uint8_t Light_PIN_1 = 5;
const uint8_t Light_PIN_2 = 18;
const uint8_t Light_PIN_3 = 19;
const uint8_t Light_PIN_4 = 21;
const uint8_t Light_PIN_5 = 22;
const uint8_t Light_PIN_6 = 23;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton button(San_PushButton_PIN_D4);  // Initialize EasyButton object with the pin

/****** WIFI CREDENTIALS *****/
const char* ssid = ""your_SSID"";
const char* password = ""your_PASSWORD"";

void onButtonPressed() {
  Serial.println(""Button pressed"");

  // Toggle the state of the lights
  digitalWrite(Light_PIN_1, !digitalRead(Light_PIN_1));
  digitalWrite(Light_PIN_2, !digitalRead(Light_PIN_2));
  digitalWrite(Light_PIN_3, !digitalRead(Light_PIN_3));
  digitalWrite(Light_PIN_4, !digitalRead(Light_PIN_4));
  digitalWrite(Light_PIN_5, !digitalRead(Light_PIN_5));
  digitalWrite(Light_PIN_6, !digitalRead(Light_PIN_6));
}

void setup(void) {
  // Initialize serial communication
  Serial.begin(115200);
  Serial.println();
  Serial.println("">>> EasyButton single button example <<<"");

  // Initialize the button
  button.begin();
  button.onPressed(onButtonPressed);

  // Initialize the light pins as outputs
  pinMode(Light_PIN_1, OUTPUT);
  pinMode(Light_PIN_2, OUTPUT);
  pinMode(Light_PIN_3, OUTPUT);
  pinMode(Light_PIN_4, OUTPUT);
  pinMode(Light_PIN_5, OUTPUT);
  pinMode(Light_PIN_6, OUTPUT);

  // Initialize the lights to be off
  digitalWrite(Light_PIN_1, LOW);
  digitalWrite(Light_PIN_2, LOW);
  digitalWrite(Light_PIN_3, LOW);
  digitalWrite(Light_PIN_4, LOW);
  digitalWrite(Light_PIN_5, LOW);
  digitalWrite(Light_PIN_6, LOW);

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println(""Connecting to WiFi..."");
  }
  Serial.println(""Connected to WiFi"");
}

void loop(void) {
  // Continuously read the status of the button
  button.read();
}

/* END CODE */"
U7NA4MDE,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,Skarface-MKL,JavaScript,Thursday 6th of June 2024 11:27:56 AM CDT,"G2A.com complimentary gift card & gaming guide.
Any gift card for free on G2A.com including Steam gift cards & anything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
June 4nd 2024"
kSnZhUWZ,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,thepplayz,JavaScript,Thursday 6th of June 2024 11:21:56 AM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
June 4 2024"
HFSD90i6,Guild Emojis List,Aouchan,ASM (NASM),Thursday 6th of June 2024 11:18:57 AM CDT,"Trigger: Anything

$nomention

$if[$isSlash==true]
    $defer
$else
    $reply
    $botTyping
    $allowUserMentions[]
$endif

$var[color;4ac1e4]

$httpAddHeader[apikey;$getVar[ApiKey]]
$httpAddHeader[bot-token;$getVar[BotToken]]
$httpAddHeader[guild-id;$guildID]
 
 $httpGet[https://bdfddata.rickyjs.xyz/release/guild/emojis]
 $jsonParse[$httpResult]

$enableDecimals[true]
$var[div;$divide[$jsonArrayCount[details];10]]

$if[$checkContains[$var[div];.]==true]
    $textSplit[$var[div];.]
    $var[total.pages;$sum[1;$splitText[1]]]
$else
    $var[total.pages;$var[div]]
$endif

$var[x;0]
$var[sep;$url[decode;%0A]]
$var[code;%{DOL}%var[emoji\;%{DOL}%json[details\;%{DOL}%var[x\]\;identifier\]\]%{DOL}%if[%{DOL}%var[emoji\]!=\]%{DOL}%sum[%{DOL}%var[x\]\;1\]. %{DOL}%var[emoji\] `(%{DOL}%var[emoji\])`%{DOL}%var[sep\]%{DOL}%else %{DOL}%stop%{DOL}%endif%{DOL}%var[x\;%{DOL}%calculate[%{DOL}%var[x\] + 1\]\]]

$var[result;$eval[$repeatMessage[10;$var[code]]]]

$authorIcon[$serverIcon[$guildID]]
$author[$serverName[$guildID]]

$title[Server Emojis List]
$description[$var[result]]
$color[$var[color]]
$footer[Page 1/$var[total.pages]]

$var[firstpage.emoji;<:Pixelated_FirstArrow:1193452503589716078>]
$var[lastpage.emoji;<:Pixelated_LastArrow:1193452401831710720>]
$var[nextpage.emoji;<:Pixelated_NextArrow:1193452428230672435>]
$var[prevpage.emoji;<:Pixelated_PrevArrow:1193452525832126464>]

$addButton[no;GuildEmojiList-$authorID-FirstPage;;primary;true;$var[firstpage.emoji]]
$addButton[no;GuildEmojiList-$authorID-PrevPage;;primary;true;$var[prevpage.emoji]]
$addButton[no;GuildEmojiList-$authorID-NextPage;;primary;$checkCondition[$var[total.pages]==1];$var[nextpage.emoji]]
$addButton[no;GuildEmojiList-$authorID-LastPage;;primary;$checkCondition[$var[total.pages]==1];$var[lastpage.emoji]]

$var[q;0]

$newSelectMenu[EmojisList.Menu;1;1;Emojis on Page 1 üå∑]
$eval[$repeatMessage[10;%{DOL}%var[emoji\;%{DOL}%json[details\;%{DOL}%var[q\]\;identifier\]\]%{DOL}%var[user\;%{DOL}%json[details\;%{DOL}%var[q\]\;user\;id\]\]%{DOL}%if[%{DOL}%var[emoji\]!=\]%{DOL}%addSelectMenuOption[EmojisList.Menu\;%{DOL}%json[details\;%{DOL}%var[q\]\;name\]\;emoji.info-%{DOL}%var[emoji\]-%{DOL}%var[q\]-%{DOL}%var[user\]\;\;\;%{DOL}%var[emoji\]\]%{DOL}%else %{DOL}%stop%{DOL}%endif%{DOL}%var[q\;%{DOL}%calculate[%{DOL}%var[q\] + 1\]\]]]
"
dJ1pNb2w,Guild Emojis List's Interaction Code,Aouchan,ASM (NASM),Thursday 6th of June 2024 11:17:13 AM CDT,"Trigger: $onInteraction

$nomention
$botListHide

$textSplit[$customID;-]

$if[$splitText[1]==GuildEmojiList]
    $if[$splitText[2]==$authorID]
        
        $var[firstpage.emoji;<:Pixelated_FirstArrow:1193452503589716078>]
        $var[lastpage.emoji;<:Pixelated_LastArrow:1193452401831710720>]
        $var[nextpage.emoji;<:Pixelated_NextArrow:1193452428230672435>]
        $var[prevpage.emoji;<:Pixelated_PrevArrow:1193452525832126464>]
        $var[color;4ac1e4]
        
        $httpAddHeader[apikey;$getVar[ApiKey]]
        $httpAddHeader[bot-token;$getVar[BotToken]]
        $httpAddHeader[guild-id;$guildID]
        $httpGet[https://bdfddata.rickyjs.xyz/release/guild/emojis]
        $jsonParse[$httpResult]
        
        $var[total.emojis;$jsonArrayCount[details]]
        
        $async[math]
          $textSplit[$replaceText[$getEmbedData[$channelID;$messageID;1;footer];Page;];/]
          $var[current.page;$splitText[1]]
          
          $enableDecimals[true]
          $var[div;$divide[$var[total.emojis];10]]
          
          $if[$checkContains[$var[div];.]==true]
              $textSplit[$var[div];.]
              $var[total.pages;$sum[1;$splitText[1]]]
          $else
              $var[total.pages;$var[div]]
          $endif
        $endasync $await[math]
        
        $if[$splitText[3]==FirstPage]
            $var[updated.page;1]
        $elseif[$splitText[3]==PrevPage]
            $var[updated.page;$sub[$var[current.page];1]]
        $elseif[$splitText[3]==NextPage]
            $var[updated.page;$sum[$var[current.page];1]]
        $else
            $var[updated.page;$var[total.pages]]
        $endif
        
        $if[$or[$var[updated.page]>$var[total.pages];$var[updated.page]<=0]==true]
            $var[updated.page;$var[total.pages]]
        $endif
        
        $var[sep;$url[decode;%0A]]
        $var[max.show;$multi[$var[updated.page];10]]
        $var[initial.index;$sub[$var[max.show];9]]
        $var[x;$sub[$var[initial.index];1]]
        
        $var[code;%{DOL}%var[emoji\;%{DOL}%json[details\;%{DOL}%var[x\]\;identifier\]\]%{DOL}%if[%{DOL}%var[emoji\]!=\]%{DOL}%sum[%{DOL}%var[x\]\;1\]. %{DOL}%var[emoji\] `(%{DOL}%var[emoji\])`%{DOL}%var[sep\]%{DOL}%else %{DOL}%stop%{DOL}%endif%{DOL}%var[x\;%{DOL}%calculate[%{DOL}%var[x\] + 1\]\]]
        $var[result;$eval[$repeatMessage[10;$var[code]]]]
        
        $authorIcon[$serverIcon[$guildID]]
        $author[$serverName[$guildID]]
        
        $title[Server Emojis List]
        $description[$var[result]]
        $color[$var[color]]
        $footer[Page $var[updated.page]/$var[total.pages]]
        
        $removeAllComponents
        $addButton[no;GuildEmojiList-$authorID-FirstPage;;primary;$checkCondition[$var[updated.page]==1];$var[firstpage.emoji]]
        $addButton[no;GuildEmojiList-$authorID-PrevPage;;primary;$checkCondition[$var[updated.page]==1];$var[prevpage.emoji]]
        $addButton[no;GuildEmojiList-$authorID-NextPage;;primary;$checkCondition[$var[updated.page]==$var[total.pages]];$var[nextpage.emoji]]
        $addButton[no;GuildEmojiList-$authorID-LastPage;;primary;$checkCondition[$var[updated.page]==$var[total.pages]];$var[lastpage.emoji]]
        
        $var[o;$sub[$multi[$var[updated.page];10];9]]
        $var[q;$sub[$var[o];1]]
        
        $newSelectMenu[EmojisList.Menu;1;1;Emojis on Page $var[updated.page] üå∑]
        $eval[$repeatMessage[10;%{DOL}%var[emoji\;%{DOL}%json[details\;%{DOL}%var[q\]\;identifier\]\]%{DOL}%var[user\;%{DOL}%json[details\;%{DOL}%var[q\]\;user\;id\]\]%{DOL}%if[%{DOL}%var[emoji\]!=\]%{DOL}%addSelectMenuOption[EmojisList.Menu\;%{DOL}%json[details\;%{DOL}%var[q\]\;name\]\;emoji.info-%{DOL}%var[emoji\]-%{DOL}%var[q\]-%{DOL}%var[user\]\;\;\;%{DOL}%var[emoji\]\]%{DOL}%else %{DOL}%stop%{DOL}%endif%{DOL}%var[q\;%{DOL}%calculate[%{DOL}%var[q\] + 1\]\]]]
    $else
        $ephemeral
        $removeAllComponents
        You can't use this button!
    $endif
$endif

$textSplit[$message;-]

$if[$splitText[1]==emoji.info]
    $var[full.emoji;$splitText[2]]
    $var[user;$splitText[4]]
    
    $textSplit[$var[full.emoji];:]
    $var[emoji.id;$replaceText[$splitText[3];>;]]
    $var[emoji.name;$splitText[2]]
    
    $var[animated?;$checkContains[$splitText[1];a]]
    $var[emoji.url;https://cdn.discordapp.com/emojis/$var[emoji.id].$replaceText[$replaceText[$var[animated?];true;gif];false;png]]
    
    $httpGet[$var[emoji.url]]
    $ephemeral
    $removeAllComponents
    
    $if[$httpStatus!=200]
        üíî Looks like that emoji isn't available anymore..
    $else
        $var[creation;$calculate[($var[emoji.id] / 4194304 + 1420070400000) / 1000]]
        $var[sep;$url[decode;%0A]]
        $var[color;4ac1e4]
       
        $title[Emoji Information]
        $description[¬ª `Name:` $var[emoji.name]$var[sep]¬ª `Animated:` $toTitleCase[$var[animated?]]$var[sep]$var[sep]¬ª `Created:` <t:$var[creation]> (<t:$var[creation]:R>)$var[sep]¬ª `Added By:` <@$var[user]> (@$username[$var[user]])]
        $image[$var[emoji.url]]
        $color[$var[color]]
        $footer[Emoji ID: $var[emoji.id]]
        
        $addButton[false;$var[emoji.url];Open in Browser;link;false]
    $endif
$endif
"
tZsUwriv,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,sirmikey,JavaScript,Thursday 6th of June 2024 11:15:53 AM CDT,"G2A.com free voucher & gaming guide.
Any voucher for free on G2A.com including Amazon gift cards & anything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
June 4 2024"
2Rp4SQC6,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,sayid83,JavaScript,Thursday 6th of June 2024 11:09:46 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any item for free on G2A.com including Steam gift cards & anything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
June 4 2024"
BNpPSe7u,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,PetrikDev,JavaScript,Thursday 6th of June 2024 11:03:44 AM CDT,"G2A.com free voucher & games guide.
Any gift card for free on G2A.com including Playstation gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
June 4 2024"
Eqbme9Mp,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,x3kiN,JavaScript,Thursday 6th of June 2024 10:57:44 AM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Amazon gift cards & all else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
June 4nd 2024"
zQhb7GW1,Untitled,pacho_the_python,SQL,Thursday 6th of June 2024 10:55:04 AM CDT,"delete from volunteers_departments
where department_name = 'Education program assistant';"
YZdD2fDr,BorePack,No_Zen,Lua,Thursday 6th of June 2024 10:54:54 AM CDT,"local modem = peripheral.wrap(""bottom"")
local inventory = modem.getNameLocal()
local chest = peripheral.wrap(""back"")
local resupply = peripheral.wrap(""minecraft:chest_247"")

term.clear()
term.setCursorPos(1, 1)
print(""Bore Pack"")

turtle.select(1)

local function main()
	if redstone.getInput(""right"") then
		redstone.setOutput(""left"", true)
	else
		redstone.setOutput(""left"", false)
		print(""Idle"")
		os.sleep(0.5)
		term.clear()
		term.setCursorPos(1, 1)
		print(""Bore Pack"")
		return ""idle""
	end
	
	local blockAbove = turtle.detectUp()

	if not blockAbove then		
		for slot, item in pairs(resupply.list()) do
        	if item.name == ""packages:package"" then
            	resupply.pushItems(inventory, slot, 1, 1)
				turtle.placeUp()
				return ""continue""
        	end
		end
		print(""No packages!"")
		os.sleep(5)
		return ""continue""
    end
	
	local package = peripheral.wrap(""top"")
	
	local chestSlots = {}

	for slot, item in pairs(chest.list()) do
		table.insert(chestSlots, {slot = slot, count = item.count})
	end

	if #chestSlots <= 0 then
		return ""continue""
	end

	local currentSlot = 1

	local totalRemaining = 0
	for i=1, 8 do
		if chestSlots[currentSlot].count <= 0 then
			currentSlot = currentSlot + 1
			if chestSlots[currentSlot] == nil then
				return ""continue""
			end
		end

		local slot = package.getItemDetail(i)
		if slot == nil then
			slot = {count = 0, maxCount = 64}
		end
		totalRemaining = totalRemaining + (slot.maxCount - slot.count)
		if slot.count < slot.maxCount then
			local toGrab = math.min(slot.maxCount - slot.count, chestSlots[currentSlot].count)
			chest.pushItems(""top"", chestSlots[currentSlot].slot, toGrab, i)
			chestSlots[currentSlot].count = chestSlots[currentSlot].count - toGrab
			totalRemaining = totalRemaining - toGrab
		end
	end

	if totalRemaining <= 0 then
		turtle.digUp()
		turtle.drop()
		return ""continue""
	end
	
	return ""continue""
end

while true do
	local status = main()
	if status == ""continue"" then
		os.sleep(0.1)
	elseif status == ""idle"" then
	elseif status == ""break"" then
		break
	else
		print(""Unknown exit status"")
	end
end"
Ptnke6A0,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,FeasModz514,JavaScript,Thursday 6th of June 2024 10:51:43 AM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Amazon gift cards & anything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
June 4 2024"
97qR5Sck,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,kjihu25,JavaScript,Thursday 6th of June 2024 10:45:41 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any voucher for free on G2A.com including Xbox gift cards & anything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
June 4nd 2024"
4w9YuVNy,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,Bufayez,JavaScript,Thursday 6th of June 2024 10:39:40 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any gift card for free on G2A.com including Steam gift cards & anything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
4nd of June 2024"
z649kM6k,ü§ëG2A.com Free Gift Card Guide June 2024 FixüéÅ,buch,JavaScript,Thursday 6th of June 2024 10:33:37 AM CDT,"G2A.com complimentary gift card & gaming guide.
Any gift card for free on G2A.com including Xbox gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
June 4 2024"
T7meb4Le,MR,Caelm,Lua,Thursday 6th of June 2024 10:30:13 AM CDT,"local players = game:GetService(""Players"")
local localPlr = players.LocalPlayer
local mouse = localPlr:GetMouse()

local UILibrary = loadstring(game:HttpGet(""https://pastebin.com/raw/V1ca2q9s""))()

local window = UILibrary.Load(""MOD MENU"")

local gameTab = window.AddPage(""GAME"")
local worldTab = window.AddPage(""WORLD"")
local movementTab = window.AddPage(""MOVEMENT"")
local visualTab = window.AddPage(""VISUAL"")

--world tab

worldTab.AddLabel(""WARNING: WILL ONLY APPLY TO YOUR CLIENT"")

worldTab.AddSlider(""GRAVITY"", {Min=0, Max=499, Def=196.2}, function(gravity)
	workspace.Gravity = gravity
end)

worldTab.AddSlider(""TIME"", {Min=0, Max=24, Def=14.5}, function(hour)
	game.Lighting.ClockTime = hour
end)

--movement tab

local clickTpConnection

local clickTpToggle = movementTab.AddToggle(""CLICK TP"", false, function(val) --Click Tp
	if val then
		clickTpConnection = mouse.Button1Up:Connect(function()
			local character = localPlr.Character or localPlr.CharacterAdded:Wait()
			character.HumanoidRootPart.CFrame = mouse.Hit
		end)
	else
		clickTpConnection:Disconnect()
	end
end)

local speedSlider = movementTab.AddSlider(""WALK SPEED"", {Min=0, Max=999, Def=16}, function(speed)
	local character = localPlr.Character or localPlr.CharacterAdded:Wait()
	character.Humanoid.WalkSpeed = speed
end)

local jumpSlider = movementTab.AddSlider(""JUMP POWER"", {Min=0, Max=499, Def=50}, function(power)
	local character = localPlr.Character or localPlr.CharacterAdded:Wait()
	character.Humanoid.UseJumpPower = true
	character.Humanoid.JumpPower = power
end)

local infJumpConnection

local infJumpToggle = movementTab.AddToggle(""INF JUMP"", false, function(val)
	if val then
		infJumpConnection = game:GetService(""RunService"").RenderStepped:Connect(function()
			if not game.Players.LocalPlayer.Character then return end
			if not game.Players.LocalPlayer.Character.Humanoid then return end

			if game.Players.LocalPlayer.Character.Humanoid.Jump then
				game.Players.LocalPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
			end
		end)
	else
		infJumpConnection:Disconnect()
	end
end)

local stalking = false

local stalk = movementTab.AddToggle(""STALK RANDOM PLAYER"", false, function(val)
	if val then
		stalking = true
		
		local ranPlr = players:GetPlayers()[math.random(1, #players:GetPlayers())]
		local ranCharacter = ranPlr.Character or ranPlr.CharacterAdded:Wait()
		 task.spawn(function()
			while wait() do
				local character = localPlr.Character or localPlr.CharacterAdded:Wait()
				character.PrimaryPart.CFrame = ranCharacter.PrimaryPart.CFrame
				
				if stalking == false then return end
			end
		end)
	else
		stalking = false
	end
end)

local flyToggle = movementTab.AddToggle(""FLY"", false, function(val)
	-- Flying Script

	local player = game.Players.LocalPlayer
	local character = player.Character or player.CharacterAdded:Wait()
	local humanoid = character:WaitForChild(""Humanoid"")
	local userInputService = game:GetService(""UserInputService"")
	local runService = game:GetService(""RunService"")

	local flying = false
	local speed = 50

	-- Keybinds

	local bodyGyro = Instance.new(""BodyGyro"")
	local bodyVelocity = Instance.new(""BodyVelocity"")

	bodyGyro.P = 9e4
	bodyGyro.maxTorque = Vector3.new(9e9, 9e9, 9e9)
	bodyGyro.cframe = character.PrimaryPart.CFrame

	bodyVelocity.velocity = Vector3.new(0, 0, 0)
	bodyVelocity.maxForce = Vector3.new(9e9, 9e9, 9e9)

	local function startFlying()
		bodyGyro.Parent = character.PrimaryPart
		bodyVelocity.Parent = character.PrimaryPart
		flying = true
	end

	local function stopFlying()
		bodyGyro.Parent = nil
		bodyVelocity.Parent = nil
		flying = false
	end

	runService.RenderStepped:Connect(function()
		if flying then
			local camera = workspace.CurrentCamera
			local moveDirection = Vector3.new()

			if userInputService:IsKeyDown(Enum.KeyCode.W) then
				moveDirection = moveDirection + camera.CFrame.LookVector
			end
			if userInputService:IsKeyDown(Enum.KeyCode.S) then
				moveDirection = moveDirection - camera.CFrame.LookVector
			end
			if userInputService:IsKeyDown(Enum.KeyCode.A) then
				moveDirection = moveDirection - camera.CFrame.RightVector
			end
			if userInputService:IsKeyDown(Enum.KeyCode.D) then
				moveDirection = moveDirection + camera.CFrame.RightVector
			end
			if userInputService:IsKeyDown(Enum.KeyCode.Space) then
				moveDirection = moveDirection + camera.CFrame.UpVector
			end
			if userInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
				moveDirection = moveDirection - camera.CFrame.UpVector
			end

			bodyVelocity.velocity = moveDirection * speed
			bodyGyro.cframe = camera.CFrame
		end
	end)
	
	if val then
		startFlying()
	else
		stopFlying()
	end
end)

--visual tab

local espToggle = visualTab.AddToggle(""ESP"", false, function(val)
	if val then
		for _, plr:Player in pairs(players:GetPlayers()) do
			local character = plr.Character or plr.CharacterAdded:Wait()
			local highlight = Instance.new(""Highlight"", character)
			task.wait()
		end
	else
		for _, plr:Player in pairs(players:GetPlayers()) do
			local character = plr.Character or plr.CharacterAdded:Wait()
			if character:FindFirstChildOfClass(""Highlight"") then
				character:FindFirstChildOfClass(""Highlight""):Destroy()
			end
			task.wait()
		end
	end
end)

--game tab

local instaAnswerConnection

local instaAnswer = gameTab.AddToggle(""INSTA ANSWER"", false, function(val)
	local function solveEquation(equation)
		if string.sub(equation, 1, 1) == ""‚àö"" then
			local split = string.split(equation, ""‚àö"")
			local result = math.sqrt(split[2])
			return result
		else
			local num1, operator, num2 = string.match(equation, ""(%d+)%s*([%+%-%*/%^√∑])%s*(%d+)"")
			num1 = tonumber(num1)
			num2 = tonumber(num2)
			local result
			if operator == ""+"" then
				result = num1 + num2
			elseif operator == ""-"" then
				result = num1 - num2
			elseif operator == ""*"" then
				result = num1 * num2
			elseif operator == ""/"" or operator == ""√∑"" then
				result = num1 / num2
			elseif operator == ""^"" then
				result = math.pow(num1, num2)
			else
				error(""Unsupported operator: "" .. operator)
			end

			return result
		end
	end
	if val then
		local hud = localPlr.PlayerGui.HUD
		local equation:TextLabel = hud.Equation.TopColor.Equation.Text
		local sendAnswer = game:GetService(""ReplicatedStorage"").SendAnswer
		instaAnswerConnection = equation.Changed:Connect(function(prop)
			if prop == ""Text"" then
				local answer = solveEquation(equation.Text)
				
				local args = {
					[1] = answer
				}
				
				sendAnswer:InvokeServer(unpack(args))
			end
		end)
	else
		instaAnswerConnection:Disconnect()
	end
end)"
UPQ9YcZ0,tldr,wickedjackal,Bash,Thursday 6th of June 2024 10:29:53 AM CDT,"{
  ""pagesRepository"": ""https://github.com/tldr-pages/tldr"",
  ""repositoryBase"": ""https://tldr.sh/assets/tldr-pages"",
  ""skipUpdateWhenPageNotFound"": false,
  ""themes"": {
    ""simple"": {
      ""commandName"": ""bold, underline"",
      ""mainDescription"": ""bold"",
      ""exampleDescription"": """",
      ""exampleCode"": """",
      ""exampleToken"": ""underline""
    },
    ""base16"": {
      ""commandName"": ""bold"",
      ""mainDescription"": """",
      ""exampleDescription"": ""green"",
      ""exampleCode"": ""red"",
      ""exampleToken"": ""cyan""
    },
    ""ocean"": {
      ""commandName"": ""bold, cyan"",
      ""mainDescription"": """",
      ""exampleDescription"": ""green"",
      ""exampleCode"": ""cyan"",
      ""exampleToken"": ""dim""
    },
    ""inverse"": {
      ""commandName"": ""bold, inverse"",
      ""mainDescription"": ""inverse"",
      ""exampleDescription"": ""black"",
      ""exampleCode"": ""inverse"",
      ""exampleToken"": ""green, bgBlack, inverse""
    },
    ""matrix"": {
      ""commandName"": ""bold"",
      ""mainDescription"": ""underline"",
      ""exampleDescription"": ""green, bgBlack"",
      ""exampleCode"": ""green, bgBlack"",
      ""exampleToken"": ""green, bold, bgBlack""
    }
  },
  ""theme"": ""simple""
}"
jCzqZ7TJ,dig,Luping,Lua,Thursday 6th of June 2024 10:29:25 AM CDT,"while(1)
do
	turtle.dig()
end"
k7YcSxq7,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,Alfonso1119,JavaScript,Thursday 6th of June 2024 10:27:31 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any gift card for free on G2A.com including Steam gift cards & anything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
June 4 2024"
yCqrQPWm,BoreDebris,No_Zen,Lua,Thursday 6th of June 2024 10:24:02 AM CDT,"local modem = peripheral.wrap(""front"")
local inventory = modem.getNameLocal()
local chest = peripheral.wrap(""minecraft:chest_246"")

term.clear()
term.setCursorPos(1, 1)
print(""Bore Debris"")

turtle.select(1)

local function main()
	for slot, item in pairs(chest.list()) do
		if item.name == ""minecraft:ancient_debris"" then
			chest.pushItems(inventory, slot)
			turtle.dropDown()
		end
	end
	
	return ""continue""
end

while true do
	local status = main()
	if status == ""continue"" then
		os.sleep(0.1)
	elseif status == ""break"" then
		break
	else
		print(""Unknown exit status"")
	end
end"
FFnzKsSr,ü§ëG2A.com Free Gift Card Guide June 2024 Fixü§ë,Garoam,JavaScript,Thursday 6th of June 2024 10:21:18 AM CDT,"G2A.com complimentary voucher & games guide.
Any gift card for free on G2A.com including Steam gift cards & everything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?654

Working as of:
4nd of June 2024"
GeTbAJLi,Untitled,pacho_the_python,SQL,Thursday 6th of June 2024 10:17:25 AM CDT,"create table animals (
    id serial primary key ,
    name varchar(30) not null ,
    birthdate date not null ,
    owner_id integer,
    animal_type_id integer not null ,

    constraint fk_animals_owners
        foreign key (owner_id)
        references owners(id)
        on DELETE CASCADE
        on UPDATE CASCADE,

    constraint fk_animals_animal_types
        foreign key (animal_type_id)
        references animal_types(id)
        on DELETE CASCADE
        on UPDATE CASCADE
);"
