id,title,username,language,date,content
8J2kj618,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Saturday 30th of December 2023 12:03:22 AM CDT,"Dear Moe,
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-351754"
avkv1798,Dutch National Flag algorithm,naren_paste,Python,Friday 29th of December 2023 11:39:27 PM CDT,"def sort_array(arr):
    low, mid, high = 0, 0, len(arr) - 1

    while mid <= high:
        if arr[mid] == 0:
            arr[low], arr[mid] = arr[mid], arr[low]
            low += 1
            mid += 1
        elif arr[mid] == 1:
            mid += 1
        else:
            arr[mid], arr[high] = arr[high], arr[mid]
            high -= 1

    return arr

# Example usage:
arr = [0, 2, 1, 2, 0]
sorted_arr = sort_array(arr)
print(sorted_arr)
"
teTSWLXH,Untitled,Artani,Lua,Friday 29th of December 2023 11:15:05 PM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/LOLking123456/Arena/main/Fight""))()"
bir0LEiY,G2A.com Refund Exploit Dec 2023,G2ARefundExploit,GetText,Friday 29th of December 2023 10:40:20 PM CDT,"G2A.com refund exploit updated guide 
Any item for free on G2A.com such as Amazon, Steam, and any other gift cards.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_530102.pdf
 
Working as of
30 December 2023

712014"
JumASenV,IR-REMOTE MANEJO CODE,Hatkat,Python,Friday 29th of December 2023 10:29:10 PM CDT,"from machine import Pin
from ir_rx.nec import NEC_16
import time

def callback(data):
    
    if(data != -1):
        print(""El codigo del control es: "" + str(data))
        
pinIR = 0 # numero de PIN conectado al OUT del sensor IR

pin_ir = Pin(pinIR, Pin.IN)

# Cambia NEC_8 por la clase adecuada si es necesario
ir_receiver = NEC_16(pin_ir, callback)  

while True:
    pass
        

"
ZV7Yj4au,_init__ - IR_REMOTE,Hatkat,Python,Friday 29th of December 2023 10:27:53 PM CDT,"# Author: Jonathan Martin Ordoñez
# Guardar en la carpeta ir_rx como __init__.py
from machine import Timer, Pin
from array import array
from utime import ticks_us


class IR_RX():
    # Result/error codes
    # Repeat button code
    REPEAT = -1
    # Error codes
    BADSTART = -2
    BADBLOCK = -3
    BADREP = -4
    OVERRUN = -5
    BADDATA = -6
    BADADDR = -7

    def __init__(self, pin, nedges, tblock, callback, *args):  # Optional args for callback
        self._pin = pin
        self._nedges = nedges
        self._tblock = tblock
        self.callback = callback
        self.args = args
        self._errf = lambda _ : None
        self.verbose = False

        self._times = array('i',  (0 for _ in range(nedges + 1)))  # +1 for overrun
        pin.irq(handler = self._cb_pin, trigger = (Pin.IRQ_FALLING | Pin.IRQ_RISING))
        self.edge = 0
        self.tim = Timer(-1)  # Sofware timer
        self.cb = self.decode

    # Pin interrupt. Save time of each edge for later decode.
    def _cb_pin(self, line):
        t = ticks_us()
        # On overrun ignore pulses until software timer times out
        if self.edge <= self._nedges:  # Allow 1 extra pulse to record overrun
            if not self.edge:  # First edge received
                self.tim.init(period=self._tblock , mode=Timer.ONE_SHOT, callback=self.cb)
            self._times[self.edge] = t
            self.edge += 1

    def do_callback(self, cmd, addr, ext, thresh=0):
        self.edge = 0
        if cmd >= thresh:
            self.callback(cmd, *self.args)  # Llamada a la función callback con un solo argumento 'cmd'
        else:
            self._errf(cmd)


    def error_function(self, func):
        self._errf = func

    def close(self):
        self._pin.irq(handler = None)
        self.tim.deinit()

"
ZwY0s2Ks,nec - IR_REMOTE,Hatkat,Python,Friday 29th of December 2023 10:27:05 PM CDT,"# Author: Jonathan Martin Ordoñez
# Guardar en la carpeta ir_rx como nec.py

from utime import ticks_us, ticks_diff
from ir_rx import IR_RX

class NEC_ABC(IR_RX):
    def __init__(self, pin, extended, samsung, callback, *args):
        # Block lasts <= 80ms (extended mode) and has 68 edges
        super().__init__(pin, 68, 80, callback, *args)
        self._extended = extended
        self._addr = 0
        self._leader = 2500 if samsung else 4000  # 4.5ms for Samsung else 9ms

    def decode(self, _):
        try:
            if self.edge > 68:
                raise RuntimeError(self.OVERRUN)
            width = ticks_diff(self._times[1], self._times[0])
            if width < self._leader:  # 9ms leading mark for all valid data
                raise RuntimeError(self.BADSTART)
            width = ticks_diff(self._times[2], self._times[1])
            if width > 3000:  # 4.5ms space for normal data
                if self.edge < 68:  # Haven't received the correct number of edges
                    raise RuntimeError(self.BADBLOCK)
                # Time spaces only (marks are always 562.5µs)
                # Space is 1.6875ms (1) or 562.5µs (0)
                # Skip last bit which is always 1
                val = 0
                for edge in range(3, 68 - 2, 2):
                    val >>= 1
                    if ticks_diff(self._times[edge + 1], self._times[edge]) > 1120:
                        val |= 0x80000000
            elif width > 1700: # 2.5ms space for a repeat code. Should have exactly 4 edges.
                raise RuntimeError(self.REPEAT if self.edge == 4 else self.BADREP)  # Treat REPEAT as error.
            else:
                raise RuntimeError(self.BADSTART)
            addr = val & 0xff  # 8 bit addr
            cmd = (val >> 16) & 0xff
            if cmd != (val >> 24) ^ 0xff:
                raise RuntimeError(self.BADDATA)
            if addr != ((val >> 8) ^ 0xff) & 0xff:  # 8 bit addr doesn't match check
                if not self._extended:
                    raise RuntimeError(self.BADADDR)
                addr |= val & 0xff00  # pass assumed 16 bit address to callback
            self._addr = addr
        except RuntimeError as e:
            cmd = e.args[0]
            addr = self._addr if cmd == self.REPEAT else 0  # REPEAT uses last address
        # Set up for new data burst and run user callback
        self.do_callback(cmd, addr, 0, self.REPEAT)

class NEC_8(NEC_ABC):
    def __init__(self, pin, callback, *args):
        super().__init__(pin, False, False, callback, *args)

class NEC_16(NEC_ABC):
    def __init__(self, pin, callback, *args):
        super().__init__(pin, True, False, callback, *args)

class SAMSUNG(NEC_ABC):
    def __init__(self, pin, callback, *args):
        super().__init__(pin, True, True, callback, *args)

"
nQz0piPH,somescr-ke,ApexdaUser,Lua,Friday 29th of December 2023 09:19:25 PM CDT,"_G.olm = getsenv(game.Players.LocalPlayer.PlayerScripts.CharacterScript)[""loadmap""]
print(""saved old loadmap(), replacing..."")
for i,v in pairs(getsenv(game.Players.LocalPlayer.PlayerScripts.CharacterScript)) do
getfenv(0)[i] = getsenv(game.Players.LocalPlayer.PlayerScripts.CharacterScript)[i] end
getsenv(game.Players.LocalPlayer.PlayerScripts.CharacterScript)[""loadmap""] = newcclosure(function(map)
_G.loading = true
	rf.mapdebris:ClearAllChildren()
	map.Parent = workspace
	onrope, pole = nil,nil
	ignore = {char, vis, workspace.debris, button, textbox, snapshotcam}
	rg3 = {}
	spinCF = {}
	enemies = {}
	eggs = 0
	maxeggs = 8
	gotice = false
	UI.UI.egg.Visible = false
	script.bgm:Stop()script.bgmW:Stop()script.bgmA:Stop()script.bgmC:Stop()
	script.bgm.SoundId = ""rbxassetid://""..map.settings.bgm.Value
	script.bgmW.SoundId = map.settings:FindFirstChild'bgmW' and ""rbxassetid://""..map.settings.bgmW.Value or ""rbxasset://sounds/uuhhh.mp3""
	script.bgmA.SoundId = map.settings:FindFirstChild'bgmA' and ""rbxassetid://""..map.settings.bgmA.Value or ""rbxasset://sounds/uuhhh.mp3""
	script.bgmC.SoundId = map.settings:FindFirstChild'bgmC' and ""rbxassetid://""..map.settings.bgmC.Value or ""rbxasset://sounds/uuhhh.mp3""
	script.bgmP.SoundId = map.settings:FindFirstChild'bgmP' and ""rbxassetid://""..map.settings.bgmP.Value or ""rbxasset://sounds/uuhhh.mp3""
	script.bgm.Volume,script.bgmW.Volume,script.bgmA.Volume,script.bgmC.Volume=0,0,0,0
	local toload = {}
	
	if map:FindFirstChild'spawn'then map.spawn:Destroy() end
	
	while map:FindFirstChild'GROUP'do
		local g = map.GROUP
		for _,v in pairs(g:GetChildren())do
			v.Parent = map
		end
		g:Destroy()
	end
	for _,v in pairs(map:GetChildren())do
		if v.Name == ""water"" then
			rg3[#rg3+1]=v
			if v:FindFirstChild'pos'then
				v.pos.Value = v.CFrame
			else
				local g = v:Clone()
				g.Parent = v
				g.Name = ""notwater""
				g.Size = v.Size-Vector3.new(1,1,1)*.2
				g.Transparency = 1
				local x, y, z, R00, R01, R02, R10, R11, R12, R20, R21, R22  = v.CFrame:components()
				g.CFrame = CFrame.new(x, y, z, -R00, R01, R02, -R10, R11, R12, -R20, R21, R22)
			end
		elseif v.Name == ""candy""then
			local c = rf.candy:Clone()
			c.Parent = map
			c.CFrame = CFrame.new(v.Position)
			c.pos.Value = v.Position
			spinCF[#spinCF+1] = c
			rg3[#rg3+1]=c
			v:Destroy()
		elseif v.Name == ""candy2""then
			for x = 1, 6 do
				local c = rf.candy:Clone()
				c.Parent = map
				c.CFrame = CFrame.new((v.CFrame*CFrame.Angles(0,x/6*math.pi*2,0)*CFrame.new(0,0,-v.Size.X)).p)
				c.pos.Value = c.Position
				spinCF[#spinCF+1] = c
				rg3[#rg3+1]=c
			end
			v:Destroy()
		elseif v.Name == ""hcandy""then
			local c = rf.hcandy:Clone()
			c.Parent = map
			c.CFrame = CFrame.new(v.Position)
			c.pos.Value = v.Position
			spinCF[#spinCF+1] = c
			rg3[#rg3+1]=c
			v:Destroy()
		elseif v.Name == ""egg""then
			local c = rf.egg:Clone()
			c.Parent = map
			c.CFrame = CFrame.new(v.Position)
			c.pos.Value = v.Position
			spinCF[#spinCF+1] = c
			rg3[#rg3+1]=c
			v:Destroy()
		elseif v.Name == ""battery""then
			local c = rf.battery:Clone()
			c.Parent = map
			c.CFrame = CFrame.new(v.Position)
			c.pos.Value = v.Position
			spinCF[#spinCF+1] = c
			rg3[#rg3+1]=c
			v:Destroy()
		elseif v.Name == ""jetpack""or v.Name == ""skateboard""or v.Name == ""flamethrower"" then
			v.vis.pos.Value = v.Position
			spinCF[#spinCF+1] = v.vis
		elseif string.sub(v.Name,1,5)==""ToCam""or v.Name == ""Light""or string.sub(v.Name, 1,3)==""TPa"" or v:FindFirstChild'tx'
			or v.Name==""lava"" or v.Name==""breakable""then
			rg3[#rg3+1]=v
		elseif v.Name == ""ropemod""then
			torope(true, v)
		elseif v.Name == ""enemy""then
			local c = rf.enemies[v.id.Value]:Clone()
			c.Parent = map
			c.col.CFrame = v.CFrame
			enemies[#enemies+1] = {c, require(c.ModuleScript)}
			c.col.tag.Value = #enemies
			rg3[#rg3+1]=c.col
			ignore[#ignore+1] = c
			v:Destroy()
		elseif string.sub(v.Name,1,6)==""unlock""then
			if prog>=tonumber(string.sub(v.Name,7,-1)) then
				v:Destroy()
			end
		elseif v.Name == ""door"" then
			rg3[#rg3+1]=v
		elseif v.Name == ""breakable""then
			rg3[#rg3+1]=v
		elseif v.Name == ""icedcream""then
			local c
			if icedfound[v.id.Value] then
				c = rf.notcream:Clone()
			else 
				c = rf.icedcream:Clone()
			end
			c.Parent = v.Parent
			c.CFrame = v.CFrame
			c.pos.Value = v.Position
			spinCF[#spinCF+1] = c
			c.desc.Value = v.desc.Value
			c.id.Value = v.id.Value
			v:Destroy()
		elseif v.Name == ""silent"" then
			rg3[#rg3+1]=v
		elseif v.Name == ""wind"" then
			rg3[#rg3+1]=v
		end
	end
	if map:FindFirstChild'picks'then
		for _,v in pairs(map.picks:GetChildren())do
			ignore[#ignore+1] = v
			local t = Instance.new(""Vector3Value"")
			t.Parent = v
			t.Name = ""st""
			t.Value = v.Position
			v.CollisionGroupId = 2
			v.Touched:Connect(function(h)
				if h.Name == ""kill""then
					v.CFrame = CFrame.new(t.Value)
					v.Velocity = Vector3.new()
				end
			end)
		end
		map.picks.ChildRemoved:connect(function(v)
			wait()
			if map:FindFirstChild'picks' then
				v.Parent = map.picks
				v.CFrame = CFrame.new(v.st.Value)
				v.Velocity = Vector3.new()
				v.RotVelocity = Vector3.new()
			end
		end)
	end
	if map:FindFirstChild'moving' then
		for _,v in pairs(map.moving:GetChildren())do
			if v:FindFirstChild'endo'then
				v.start.Value = v.Position
				v.endo.Value = v.Position + v.endo.Value
				if v.Name == ""water""then
					rg3[#rg3+1]=v
				end
			elseif v:FindFirstChild(""start"")then
				v.start.Value = v.Position
			end
		end
	end
	for _,v in pairs(game.Lighting:GetChildren())do
		if v.Name==""copy""then
			v:Destroy()
		end
	end
	for _,v in pairs(map.settings.lighting:GetChildren())do
		if v.Name==""copy""then
			v.Parent = game.Lighting
		else
			game.Lighting[v.Name] = v.Value
		end
	end
	wait()
	game.ContentProvider:PreloadAsync(toload)
	script.bgm:Play()script.bgmW:Play()script.bgmA:Play()script.bgmC:Play()script.bgmP:Play()
	_G.loading = false
end)
print(""Replaced loadmap()"")"
3NCwPugh,anglerfisher,LFCxx,Java,Friday 29th of December 2023 08:25:48 PM CDT,"package anglerfisher;

import net.runelite.api.coords.WorldPoint;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.wrappers.SimpleNpc;
import simple.robot.script.Script;
import simple.robot.utils.WorldArea;
import simple.hooks.simplebot.ChatMessage;
import java.awt.*;

@ScriptManifest(author = ""YourName"", name = ""Anglerfish Fisher"", description = ""Fishes Anglerfish"", category = Category.FISHING, version = ""1.0"", servers = """", discord = """")
public class main extends Script {

    private final int FISHING_SPOT_ID = 6828;
    private final int FISHING_ROD_ID = 307;
    private final int SANDWORMS_ID = 13431;
    private final WorldArea BANK_AREA = new WorldArea(new WorldPoint(1793, 3796, 0), new WorldPoint(1814, 3779, 0));
    private final WorldPoint[] PATH_TO_FISHING = {
        new WorldPoint(1825, 3771, 0),
        new WorldPoint(1828, 3771, 0)
    };
    private long startTime;
    private int fishCaught = 0;

    @Override
    public void onExecute() {
        log(""Script started: Anglerfish Fisher"");
        startTime = System.currentTimeMillis();
    }

    @Override
    public void onProcess() {
        if (ctx.inventory.inventoryFull()) {
            if (ctx.pathing.inArea(BANK_AREA)) {
                bankAndRestock();
            } else {
                walkToArea(BANK_AREA);
            }
        } else {
            if (atFishingSpot()) {
                fishAnglerfish();
            } else {
                walkToPath(PATH_TO_FISHING);
            }
        }
    }

    private boolean atFishingSpot() {
        return ctx.pathing.inArea(new WorldArea(PATH_TO_FISHING[0], PATH_TO_FISHING[PATH_TO_FISHING.length - 1]));
    }

    private void fishAnglerfish() {
        SimpleNpc fishingSpot = ctx.npcs.populate().filter(FISHING_SPOT_ID).nearest().next();
        if (fishingSpot != null) {
            fishingSpot.click(""Fish"");
            ctx.onCondition(() -> ctx.players.getLocal().isAnimating(), 250, 20);
        }
    }

    private void bankAndRestock() {
        if (!ctx.bank.bankOpen()) {
            ctx.bank.openBank();
        } else {
            ctx.bank.depositAllExcept(FISHING_ROD_ID, SANDWORMS_ID);
            ctx.bank.withdraw(SANDWORMS_ID, 0); // Withdraw all sandworms
            ctx.bank.closeBank();
        }
    }

    private void walkToArea(WorldArea area) {
        if (!ctx.pathing.inArea(area)) {
            WorldPoint destination = area.randomTile();
            if (isReachable(destination)) {
                navigateToWorldPoint(destination);
            }
        }
    }

    private void walkToPath(WorldPoint[] path) {
        for (WorldPoint point : path) {
            if (isReachable(point) && shouldWalkToPoint(point)) {
                ctx.pathing.step(point);
                ctx.onCondition(() -> ctx.players.getLocal().distanceTo(point) < 5, 250, 20);
            }
        }
    }

    private boolean shouldWalkToPoint(WorldPoint point) {
        WorldPoint playerLocation = WorldPoint.fromLocalInstance(ctx.client, ctx.players.getLocal().getLocalLocation());
        return playerLocation != null && playerLocation.distanceTo(point) > 5;
    }

    private boolean isReachable(WorldPoint destination) {
        // Replace with actual conversion logic as per your API
        return true; // Placeholder for simplicity
    }

    private void navigateToWorldPoint(WorldPoint destination) {
        WorldPoint[] path = ctx.pathing.createLocalPath(destination);
        if (path != null && path.length > 0) {
            walkToPath(path);
        }
    }

    @Override
    public void onChatMessage(ChatMessage chatMessage) {
        String message = chatMessage.getMessage().toLowerCase();
        if (message.contains(""you catch"")) {
            fishCaught++;
        }
    }

    @Override
    public void paint(Graphics graphics) {
        long runTime = System.currentTimeMillis() - startTime;
        graphics.setColor(Color.BLACK);
        graphics.drawString(""Running Time: "" + formatTime(runTime), 10, 15);
        graphics.drawString(""Fish Caught: "" + fishCaught, 10, 30);
    }

    private String formatTime(long ms) {
        int seconds = (int) (ms / 1000) % 60;
        int minutes = (int) ((ms / (1000 * 60)) % 60);
        int hours = (int) ((ms / (1000 * 60 * 60)) % 24);
        return String.format(""%02d:%02d:%02d"", hours, minutes, seconds);
    }

    @Override
    public void onTerminate() {
        log(""Script stopped: Anglerfish Fisher"");
    }

    private void log(String message) {
        // Implement logging logic here if needed
    }
}"
q3fCRn8S,Mestre do Python.. SOLID + Clean Code,Rnery,Python,Friday 29th of December 2023 07:34:46 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-

def obter_numero(mensagem):
    while True:
        try:
            return float(input(mensagem))
        except ValueError:
            print(""Por favor, insira um número válido."")

def mostrar_soma(num1, num2):
    return num1 + num2

def mostrar_resto(num1, num2):
    return num1 - num2

def mostrar_multiplicacao(num1, num2):
    return num1 * num2

def exibir_menu():
    return """"""
    Menu:
    1. Mostrar a soma dos dois números
    2. Mostrar o resto dos dois números (o primeiro menos o segundo)
    3. Mostrar a multiplicação dos dois números
    0. Sair
    """"""

def opcao_invalida():
    print(""Opção inválida. Tente novamente."")

def sair_programa():
    print(""Saindo do programa. Até mais!"")

# Mapeamento das escolhas para as funções correspondentes
opcoes = {
    1: mostrar_soma,
    2: mostrar_resto,
    3: mostrar_multiplicacao,
    0: sair_programa,
}

def main():
    while True:
        try:
            num1 = obter_numero(""Digite o primeiro número: "")
            num2 = obter_numero(""Digite o segundo número: "")

            print(exibir_menu())

            escolha = int(input(""Escolha uma opção: ""))

            if escolha in opcoes:
                resultado = opcoes[escolha](num1, num2)
                if escolha != 0:
                    print(f""Resultado: {resultado}"")
                else:
                    opcoes[escolha]()
                    break
            else:
                opcao_invalida()

        except ValueError:
            print(""Por favor, insira números válidos."")

if __name__ == ""__main__"":
    main()
"
uZ6NyWEv,Commands to Install 32 bit Windows 7 on 2010 Mac mini,dander61,Bash,Friday 29th of December 2023 07:19:09 PM CDT,"You can copy and paste these commands instead of typing by hand. 

***** Step 4 *****

# Use the following command to copy the Windows 7 ISO file to the Desktop.
cp /Volumes/WINSTALL/etc/GSP1RMCPRXFRER_EN_DVD.ISO ~/Desktop/windows.iso

# Execute the following commands to build the virtual machine named 'MyWindows'.
vboxmanage createvm --name MyWindows --ostype Windows7 --register
vboxmanage modifyvm MyWindows --memory 512 --vram 32 --mouse usbtablet
vboxmanage storagectl MyWindows --name SATA --add sata --controller IntelAhci --portcount 2 --hostiocache on
vboxmanage storageattach MyWindows --storagectl SATA --port 0 --device 0 --type dvddrive --medium ~/Desktop/windows.iso
cd ~/VirtualBox\ VMs/MyWindows
diskutil unmount disk0s3
sudo vboxmanage internalcommands createrawvmdk -filename bootcamp.vmdk -rawdisk /dev/disk0 -partitions 3
sudo chown $USER bootcamp*.vmdk
sudo chmod 666 /dev/disk0s3
vboxmanage closemedium disk bootcamp.vmdk
vboxmanage storageattach MyWindows --storagectl SATA --port 1 --device 0 --type hdd --medium bootcamp.vmdk
cd ~

***** Step 5 *****

# Enter the commands below to start the virtual machine.
diskutil unmount disk0s3
sudo chmod 666 /dev/disk0s3
vboxmanage startvm MyWindows

***** Step 6 *****

# Enter the command below to update the internal drive MBR.
sudo fdisk -e -f ~/VirtualBox\ VMs/MyWindows/bootcamp-pt.vmdk /dev/disk0

***** How to Remove the Virtual Machine *****

#From Mac OS X, enter the commands given below in a Terminal application window.
cd ~
diskutil unmount disk0s3
sudo chmod 666 /dev/disk0s3
VBoxManage unregistervm --delete MyWindows
sudo chmod 640 /dev/disk0s3
diskutil mount disk0s3
"
0ucuuTRW,2023-12-29_stats.json,rdp_snitch,JSON,Friday 29th of December 2023 06:18:19 PM CDT,"{
  ""ip"": {
    ""194.165.17.21"": 81,
    ""74.105.22.130"": 81,
    ""103.20.102.235"": 18,
    ""87.251.75.145"": 15,
    ""45.227.254.9"": 18,
    ""188.121.99.171"": 12,
    ""109.69.7.157"": 3,
    ""188.119.66.112"": 3,
    ""205.210.31.175"": 9,
    ""194.165.16.78"": 12,
    ""15.204.9.251"": 3,
    ""87.251.75.64"": 3,
    ""45.79.103.72"": 3,
    ""185.170.144.3"": 9,
    ""185.190.24.101"": 3,
    ""185.170.144.113"": 27,
    ""83.97.73.77"": 6,
    ""47.52.61.90"": 3,
    ""205.210.31.55"": 9,
    ""103.77.240.58"": 6,
    ""213.201.230.188"": 6,
    ""134.249.44.8"": 3,
    ""62.204.41.208"": 12,
    ""179.60.147.51"": 3,
    ""58.218.204.183"": 9,
    ""23.225.14.53"": 6,
    ""118.194.236.137"": 3,
    ""80.94.95.238"": 12,
    ""198.235.24.74"": 9,
    ""2.57.149.92"": 3,
    ""59.18.161.39"": 3,
    ""94.74.64.196"": 3,
    ""89.248.170.88"": 3,
    ""45.227.254.54"": 6,
    ""94.232.45.101"": 6,
    ""198.235.24.93"": 9,
    ""63.135.161.62"": 3
  },
  ""asn"": {
    ""AS48721"": 93,
    ""AS701"": 81,
    ""AS140817"": 18,
    ""AS208091"": 18,
    ""AS267784"": 24,
    ""AS202468"": 12,
    ""AS21183"": 3,
    ""AS57523"": 3,
    ""AS396982"": 36,
    ""AS16276"": 3,
    ""AS63949"": 3,
    ""AS197414"": 36,
    ""AS211632"": 3,
    ""AS208312"": 9,
    ""AS45102"": 3,
    ""AS140810"": 6,
    ""AS3257"": 6,
    ""AS15895"": 3,
    ""AS59425"": 12,
    ""AS209588"": 3,
    ""AS4134"": 9,
    ""AS40065"": 6,
    ""AS135377"": 3,
    ""AS204428"": 12,
    ""AS4766"": 3,
    ""AS136907"": 3,
    ""AS202425"": 3,
    ""AS212482"": 6,
    ""AS206092"": 3
  },
  ""isp"": {
    ""Flyservers S.A."": 120,
    ""Verizon Business"": 81,
    ""ODS ONLINE DATA SOLUTION JOINT STOCK COMPANY"": 18,
    ""Xhost Internet Solutions LP"": 60,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 12,
    ""Vodafone Network"": 3,
    ""Chang Way Technologies Co. Limited"": 3,
    ""Google LLC"": 36,
    ""OVH SAS"": 3,
    ""Akamai Technologies, Inc."": 3,
    ""Internet Solutions & Innovations LTD."": 3,
    ""Red Byte LLC"": 9,
    ""Alibaba Cloud LLC"": 3,
    ""HTSG"": 6,
    ""GTT Communications Inc"": 6,
    ""Kyivstar UA"": 3,
    ""Horizon LLC"": 12,
    ""Chinanet"": 9,
    ""Cnservers LLC"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""SS-Net"": 12,
    ""Korea Telecom"": 3,
    ""Huawei International Pte. LTD"": 3,
    ""IP Volume inc"": 3,
    ""Rockion LLC"": 3
  },
  ""org"": {
    ""Flyservers S.A"": 93,
    ""Verizon Business"": 81,
    ""Thai AN Khang Communication Services Co., LTD"": 18,
    ""Xhost Internet Solutions"": 18,
    ""UAB Host Baltic"": 24,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 12,
    ""Unknown"": 6,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Palo Alto Networks, Inc"": 36,
    ""OVH US LLC"": 3,
    ""Linode"": 3,
    ""Xhostis"": 36,
    ""Tribeka Web Advisors S.A"": 3,
    ""Red Byte LLC"": 6,
    ""ALICLOUD-HK"": 3,
    ""Htsg High Technology Services and Media Joint Stock Company"": 6,
    ""GTT"": 6,
    ""Kyivstar LLC"": 3,
    ""Horizon LLC"": 12,
    ""Cloud Solutions S.A"": 3,
    ""Chinanet JS"": 9,
    ""CloudRadium L.L.C"": 6,
    ""Ucloud Information Technology"": 3,
    ""BtHoster LTD"": 12,
    ""(ju)sion"": 3,
    ""Quasi Networks LTD."": 3,
    ""Dmitriy Panchenko"": 6,
    ""Ipxo LLC"": 3
  },
  ""regionName"": {
    ""Kaunas"": 93,
    ""New Jersey"": 81,
    ""Ho Chi Minh"": 18,
    ""North Holland"": 57,
    ""Vilnius"": 24,
    ""Tehran"": 12,
    ""Tirana"": 3,
    ""Moscow"": 21,
    ""California"": 45,
    ""Oregon"": 3,
    ""Mariehamns stad"": 3,
    ""Central and Western District"": 3,
    ""Hanoi"": 6,
    ""District of Columbia"": 6,
    ""Kyiv City"": 3,
    ""Distrito Federal"": 3,
    ""Jiangsu"": 9,
    ""Tokyo"": 3,
    ""Budapest"": 12,
    ""Lesser Poland"": 3,
    ""Gyeonggi-do"": 3,
    ""Mexico City"": 3,
    ""Perm Krai"": 6,
    ""New York"": 3
  },
  ""country"": {
    ""Lithuania"": 117,
    ""United States"": 138,
    ""Vietnam"": 24,
    ""The Netherlands"": 57,
    ""Iran"": 12,
    ""Albania"": 3,
    ""Russia"": 27,
    ""Aland Islands"": 3,
    ""Hong Kong"": 3,
    ""Ukraine"": 3,
    ""Venezuela"": 3,
    ""China"": 9,
    ""Japan"": 3,
    ""Hungary"": 12,
    ""Poland"": 3,
    ""South Korea"": 3,
    ""Mexico"": 3
  },
  ""account"": {
    ""142.93.8.59"": 177,
    ""hello"": 63,
    ""Administr"": 57,
    ""Domain"": 51,
    ""AlYgUWBMh"": 3,
    ""zCZFBF"": 3,
    ""PAyllj"": 3,
    ""Test"": 27,
    ""a"": 3,
    ""cmwfMryQE"": 3,
    ""hYklDI"": 3,
    ""QVdqZz"": 3,
    ""Administrator"": 3,
    ""WuwQQQcFd"": 3,
    ""JmadLX"": 3,
    ""Bciham"": 3,
    ""(empty)"": 6,
    ""iOATlHthE"": 3,
    ""cTGhlF"": 3,
    ""RveJgO"": 3
  },
  ""keyboard"": {
    ""Unknown"": 423
  },
  ""client_build"": {
    ""Unknown"": 423
  },
  ""client_name"": {
    ""Unknown"": 423
  },
  ""ip_type"": {
    ""Unknown"": 333,
    ""hosting"": 69,
    ""mobile"": 3,
    ""proxy"": 18
  }
}"
NnMRkiu8,2023-12-29_stats.json,rdp_snitch,JSON,Friday 29th of December 2023 06:16:04 PM CDT,"{
  ""ip"": {
    ""194.165.17.21"": 54,
    ""74.105.22.130"": 54,
    ""103.20.102.235"": 12,
    ""87.251.75.145"": 10,
    ""45.227.254.9"": 12,
    ""188.121.99.171"": 8,
    ""109.69.7.157"": 2,
    ""188.119.66.112"": 2,
    ""205.210.31.175"": 6,
    ""194.165.16.78"": 8,
    ""15.204.9.251"": 2,
    ""87.251.75.64"": 2,
    ""45.79.103.72"": 2,
    ""185.170.144.3"": 6,
    ""185.190.24.101"": 2,
    ""185.170.144.113"": 18,
    ""83.97.73.77"": 4,
    ""47.52.61.90"": 2,
    ""205.210.31.55"": 6,
    ""103.77.240.58"": 4,
    ""213.201.230.188"": 4,
    ""134.249.44.8"": 2,
    ""62.204.41.208"": 8,
    ""179.60.147.51"": 2,
    ""58.218.204.183"": 6,
    ""23.225.14.53"": 4,
    ""118.194.236.137"": 2,
    ""80.94.95.238"": 8,
    ""198.235.24.74"": 6,
    ""2.57.149.92"": 2,
    ""59.18.161.39"": 2,
    ""94.74.64.196"": 2,
    ""89.248.170.88"": 2,
    ""45.227.254.54"": 4,
    ""94.232.45.101"": 4,
    ""198.235.24.93"": 6,
    ""63.135.161.62"": 2
  },
  ""asn"": {
    ""AS48721"": 62,
    ""AS701"": 54,
    ""AS140817"": 12,
    ""AS208091"": 12,
    ""AS267784"": 16,
    ""AS202468"": 8,
    ""AS21183"": 2,
    ""AS57523"": 2,
    ""AS396982"": 24,
    ""AS16276"": 2,
    ""AS63949"": 2,
    ""AS197414"": 24,
    ""AS211632"": 2,
    ""AS208312"": 6,
    ""AS45102"": 2,
    ""AS140810"": 4,
    ""AS3257"": 4,
    ""AS15895"": 2,
    ""AS59425"": 8,
    ""AS209588"": 2,
    ""AS4134"": 6,
    ""AS40065"": 4,
    ""AS135377"": 2,
    ""AS204428"": 8,
    ""AS4766"": 2,
    ""AS136907"": 2,
    ""AS202425"": 2,
    ""AS212482"": 4,
    ""AS206092"": 2
  },
  ""isp"": {
    ""Flyservers S.A."": 80,
    ""Verizon Business"": 54,
    ""ODS ONLINE DATA SOLUTION JOINT STOCK COMPANY"": 12,
    ""Xhost Internet Solutions LP"": 40,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 8,
    ""Vodafone Network"": 2,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Google LLC"": 24,
    ""OVH SAS"": 2,
    ""Akamai Technologies, Inc."": 2,
    ""Internet Solutions & Innovations LTD."": 2,
    ""Red Byte LLC"": 6,
    ""Alibaba Cloud LLC"": 2,
    ""HTSG"": 4,
    ""GTT Communications Inc"": 4,
    ""Kyivstar UA"": 2,
    ""Horizon LLC"": 8,
    ""Chinanet"": 6,
    ""Cnservers LLC"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""SS-Net"": 8,
    ""Korea Telecom"": 2,
    ""Huawei International Pte. LTD"": 2,
    ""IP Volume inc"": 2,
    ""Rockion LLC"": 2
  },
  ""org"": {
    ""Flyservers S.A"": 62,
    ""Verizon Business"": 54,
    ""Thai AN Khang Communication Services Co., LTD"": 12,
    ""Xhost Internet Solutions"": 12,
    ""UAB Host Baltic"": 16,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 8,
    ""Unknown"": 4,
    ""Chang Way Technologies Co. Limited"": 4,
    ""Palo Alto Networks, Inc"": 24,
    ""OVH US LLC"": 2,
    ""Linode"": 2,
    ""Xhostis"": 24,
    ""Tribeka Web Advisors S.A"": 2,
    ""Red Byte LLC"": 4,
    ""ALICLOUD-HK"": 2,
    ""Htsg High Technology Services and Media Joint Stock Company"": 4,
    ""GTT"": 4,
    ""Kyivstar LLC"": 2,
    ""Horizon LLC"": 8,
    ""Cloud Solutions S.A"": 2,
    ""Chinanet JS"": 6,
    ""CloudRadium L.L.C"": 4,
    ""Ucloud Information Technology"": 2,
    ""BtHoster LTD"": 8,
    ""(ju)sion"": 2,
    ""Quasi Networks LTD."": 2,
    ""Dmitriy Panchenko"": 4,
    ""Ipxo LLC"": 2
  },
  ""regionName"": {
    ""Kaunas"": 62,
    ""New Jersey"": 54,
    ""Ho Chi Minh"": 12,
    ""North Holland"": 38,
    ""Vilnius"": 16,
    ""Tehran"": 8,
    ""Tirana"": 2,
    ""Moscow"": 14,
    ""California"": 30,
    ""Oregon"": 2,
    ""Mariehamns stad"": 2,
    ""Central and Western District"": 2,
    ""Hanoi"": 4,
    ""District of Columbia"": 4,
    ""Kyiv City"": 2,
    ""Distrito Federal"": 2,
    ""Jiangsu"": 6,
    ""Tokyo"": 2,
    ""Budapest"": 8,
    ""Lesser Poland"": 2,
    ""Gyeonggi-do"": 2,
    ""Mexico City"": 2,
    ""Perm Krai"": 4,
    ""New York"": 2
  },
  ""country"": {
    ""Lithuania"": 78,
    ""United States"": 92,
    ""Vietnam"": 16,
    ""The Netherlands"": 38,
    ""Iran"": 8,
    ""Albania"": 2,
    ""Russia"": 18,
    ""Aland Islands"": 2,
    ""Hong Kong"": 2,
    ""Ukraine"": 2,
    ""Venezuela"": 2,
    ""China"": 6,
    ""Japan"": 2,
    ""Hungary"": 8,
    ""Poland"": 2,
    ""South Korea"": 2,
    ""Mexico"": 2
  },
  ""account"": {
    ""142.93.8.59"": 118,
    ""hello"": 42,
    ""Administr"": 38,
    ""Domain"": 34,
    ""AlYgUWBMh"": 2,
    ""zCZFBF"": 2,
    ""PAyllj"": 2,
    ""Test"": 18,
    ""a"": 2,
    ""cmwfMryQE"": 2,
    ""hYklDI"": 2,
    ""QVdqZz"": 2,
    ""Administrator"": 2,
    ""WuwQQQcFd"": 2,
    ""JmadLX"": 2,
    ""Bciham"": 2,
    ""(empty)"": 4,
    ""iOATlHthE"": 2,
    ""cTGhlF"": 2,
    ""RveJgO"": 2
  },
  ""keyboard"": {
    ""Unknown"": 282
  },
  ""client_build"": {
    ""Unknown"": 282
  },
  ""client_name"": {
    ""Unknown"": 282
  },
  ""ip_type"": {
    ""Unknown"": 222,
    ""hosting"": 46,
    ""mobile"": 2,
    ""proxy"": 12
  }
}"
YqTPuu4z,2023-12-29_stats.json,rdp_snitch,JSON,Friday 29th of December 2023 06:15:09 PM CDT,"{
  ""ip"": {
    ""194.165.17.21"": 27,
    ""74.105.22.130"": 27,
    ""103.20.102.235"": 6,
    ""87.251.75.145"": 5,
    ""45.227.254.9"": 6,
    ""188.121.99.171"": 4,
    ""109.69.7.157"": 1,
    ""188.119.66.112"": 1,
    ""205.210.31.175"": 3,
    ""194.165.16.78"": 4,
    ""15.204.9.251"": 1,
    ""87.251.75.64"": 1,
    ""45.79.103.72"": 1,
    ""185.170.144.3"": 3,
    ""185.190.24.101"": 1,
    ""185.170.144.113"": 9,
    ""83.97.73.77"": 2,
    ""47.52.61.90"": 1,
    ""205.210.31.55"": 3,
    ""103.77.240.58"": 2,
    ""213.201.230.188"": 2,
    ""134.249.44.8"": 1,
    ""62.204.41.208"": 4,
    ""179.60.147.51"": 1,
    ""58.218.204.183"": 3,
    ""23.225.14.53"": 2,
    ""118.194.236.137"": 1,
    ""80.94.95.238"": 4,
    ""198.235.24.74"": 3,
    ""2.57.149.92"": 1,
    ""59.18.161.39"": 1,
    ""94.74.64.196"": 1,
    ""89.248.170.88"": 1,
    ""45.227.254.54"": 2,
    ""94.232.45.101"": 2,
    ""198.235.24.93"": 3,
    ""63.135.161.62"": 1
  },
  ""asn"": {
    ""AS48721"": 31,
    ""AS701"": 27,
    ""AS140817"": 6,
    ""AS208091"": 6,
    ""AS267784"": 8,
    ""AS202468"": 4,
    ""AS21183"": 1,
    ""AS57523"": 1,
    ""AS396982"": 12,
    ""AS16276"": 1,
    ""AS63949"": 1,
    ""AS197414"": 12,
    ""AS211632"": 1,
    ""AS208312"": 3,
    ""AS45102"": 1,
    ""AS140810"": 2,
    ""AS3257"": 2,
    ""AS15895"": 1,
    ""AS59425"": 4,
    ""AS209588"": 1,
    ""AS4134"": 3,
    ""AS40065"": 2,
    ""AS135377"": 1,
    ""AS204428"": 4,
    ""AS4766"": 1,
    ""AS136907"": 1,
    ""AS202425"": 1,
    ""AS212482"": 2,
    ""AS206092"": 1
  },
  ""isp"": {
    ""Flyservers S.A."": 40,
    ""Verizon Business"": 27,
    ""ODS ONLINE DATA SOLUTION JOINT STOCK COMPANY"": 6,
    ""Xhost Internet Solutions LP"": 20,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 4,
    ""Vodafone Network"": 1,
    ""Chang Way Technologies Co. Limited"": 1,
    ""Google LLC"": 12,
    ""OVH SAS"": 1,
    ""Akamai Technologies, Inc."": 1,
    ""Internet Solutions & Innovations LTD."": 1,
    ""Red Byte LLC"": 3,
    ""Alibaba Cloud LLC"": 1,
    ""HTSG"": 2,
    ""GTT Communications Inc"": 2,
    ""Kyivstar UA"": 1,
    ""Horizon LLC"": 4,
    ""Chinanet"": 3,
    ""Cnservers LLC"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""SS-Net"": 4,
    ""Korea Telecom"": 1,
    ""Huawei International Pte. LTD"": 1,
    ""IP Volume inc"": 1,
    ""Rockion LLC"": 1
  },
  ""org"": {
    ""Flyservers S.A"": 31,
    ""Verizon Business"": 27,
    ""Thai AN Khang Communication Services Co., LTD"": 6,
    ""Xhost Internet Solutions"": 6,
    ""UAB Host Baltic"": 8,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 4,
    ""Unknown"": 2,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Palo Alto Networks, Inc"": 12,
    ""OVH US LLC"": 1,
    ""Linode"": 1,
    ""Xhostis"": 12,
    ""Tribeka Web Advisors S.A"": 1,
    ""Red Byte LLC"": 2,
    ""ALICLOUD-HK"": 1,
    ""Htsg High Technology Services and Media Joint Stock Company"": 2,
    ""GTT"": 2,
    ""Kyivstar LLC"": 1,
    ""Horizon LLC"": 4,
    ""Cloud Solutions S.A"": 1,
    ""Chinanet JS"": 3,
    ""CloudRadium L.L.C"": 2,
    ""Ucloud Information Technology"": 1,
    ""BtHoster LTD"": 4,
    ""(ju)sion"": 1,
    ""Quasi Networks LTD."": 1,
    ""Dmitriy Panchenko"": 2,
    ""Ipxo LLC"": 1
  },
  ""regionName"": {
    ""Kaunas"": 31,
    ""New Jersey"": 27,
    ""Ho Chi Minh"": 6,
    ""North Holland"": 19,
    ""Vilnius"": 8,
    ""Tehran"": 4,
    ""Tirana"": 1,
    ""Moscow"": 7,
    ""California"": 15,
    ""Oregon"": 1,
    ""Mariehamns stad"": 1,
    ""Central and Western District"": 1,
    ""Hanoi"": 2,
    ""District of Columbia"": 2,
    ""Kyiv City"": 1,
    ""Distrito Federal"": 1,
    ""Jiangsu"": 3,
    ""Tokyo"": 1,
    ""Budapest"": 4,
    ""Lesser Poland"": 1,
    ""Gyeonggi-do"": 1,
    ""Mexico City"": 1,
    ""Perm Krai"": 2,
    ""New York"": 1
  },
  ""country"": {
    ""Lithuania"": 39,
    ""United States"": 46,
    ""Vietnam"": 8,
    ""The Netherlands"": 19,
    ""Iran"": 4,
    ""Albania"": 1,
    ""Russia"": 9,
    ""Aland Islands"": 1,
    ""Hong Kong"": 1,
    ""Ukraine"": 1,
    ""Venezuela"": 1,
    ""China"": 3,
    ""Japan"": 1,
    ""Hungary"": 4,
    ""Poland"": 1,
    ""South Korea"": 1,
    ""Mexico"": 1
  },
  ""account"": {
    ""142.93.8.59"": 59,
    ""hello"": 21,
    ""Administr"": 19,
    ""Domain"": 17,
    ""AlYgUWBMh"": 1,
    ""zCZFBF"": 1,
    ""PAyllj"": 1,
    ""Test"": 9,
    ""a"": 1,
    ""cmwfMryQE"": 1,
    ""hYklDI"": 1,
    ""QVdqZz"": 1,
    ""Administrator"": 1,
    ""WuwQQQcFd"": 1,
    ""JmadLX"": 1,
    ""Bciham"": 1,
    ""(empty)"": 2,
    ""iOATlHthE"": 1,
    ""cTGhlF"": 1,
    ""RveJgO"": 1
  },
  ""keyboard"": {
    ""Unknown"": 141
  },
  ""client_build"": {
    ""Unknown"": 141
  },
  ""client_name"": {
    ""Unknown"": 141
  },
  ""ip_type"": {
    ""Unknown"": 111,
    ""hosting"": 23,
    ""mobile"": 1,
    ""proxy"": 6
  }
}"
ppjKY43i,prototyp.ps1,SuperSilverainox,PowerShell,Friday 29th of December 2023 05:35:41 PM CDT,"Add-Type -AssemblyName PresentationFramework

function Show-Notification {
    param (
        [string]$Title,
        [string]$Message
    )

    [System.Windows.MessageBox]::Show($Message, $Title)
}

# Możesz dostosować tytuł i wiadomość powiadomienia
$notificationTitle = ""Informacja""
$notificationMessage = ""Witamy w systemie. Pamiętaj o przestrzeganiu zasad bezpieczeństwa.""

Show-Notification -Title $notificationTitle -Message $notificationMessage
"
3BjzkMDK,donbass,Zvezdochkin,HTML,Friday 29th of December 2023 05:25:08 PM CDT,"<align=""center"">
<size=42><color=#fcff03>Kyle's project</color> <b>/</b> <color=#c262ff>Донбасс</color></size>
<b><size=16><color=#FB9800>НонРП</color> сервер с небольшим сводом правил и наличием большого кол-ва уникальных плагинов</size>\n<color=#C0C0C0>[CIS ONLY]</color></b>
</align>

<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1cW8t4Wy8s0ezmSLt3gnc7Tx7WDvEvpphXUHwtAgCXKU/edit?usp=sharing""><mark=#fc5ac9><size=13>|🎙️|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Голосовые Реплики|<space=5.65em>|</mark></link></size>

<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1C3bFwA8Wo18ZTuckRfkZcv3wthr6YB7SsGrX919SzRE""><mark=#E31C1C><size=13>|📖|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Общие Правила|<space=6.35em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/forms/d/e/1FAIpQLScFw-V2QxXXvjjhXeuwf7it-IAJTaBIiAKq_s-9yHELJE-Wrg/viewform""><mark=#FF8C00><size=13>|📋|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Заявка на Администратора|<space=0.85em>|</mark></link></size>
 
<size=17><link=""https://discord.gg/uxfhSG2""><mark=#32CD32><size=13>|💬|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Дискорд сервер|<space=6.2em>|</mark></link></size>
 
<size=17><link=""https://kyles.ru/""><mark=#2297E6><size=13>|🌐|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Сайт|<space=11.6em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1yKABCtmIdKt78jm_rkbfQoxhAKLVRRltagroYD_rldE""><mark=#4c00ff><size=13>|💎|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Донат-привилегии|<space=5.1em>|</mark></link></size>
</align>

<align=""left"">
<color=#FF4500><b>Список плагинов:</b></color>
 • Старая озвучка <color=#2297E6><b>CASSIE</b></color>
 • Расширенная Зона поверхности
 • Вторая Зона побега
 • Подклассы <color=#FFA500><b>Class-D</b></color> <size=10><color=#D3D3D3>(Class-C, Class-E)</color></size>
 • Подклассы <color=#FFFF00><b>Учёных</b></color> <size=10><color=#D3D3D3>(Major Scientist, Zone Manager, Reserch Supervisor)</color></size>
 • Говорящие <color=#FF0000><b>SCP</b></color>
 • Игровой класс <color=#FF0000><b>SCP-457</b></color>
 • Изменённый инвентарь классов
 • Счётчик патронов в <color=#2297E6><b>HUD</b></color>
 • Информационный монитор в интеркоме
 • Блокирование дверей
 • Бесконтактное открытие дверей
 • Изменённая скорость лифтов
 • Автобоеголовка после долгой игры
 • Бесконечный заряд рации
 • Улучшенное Карманное измерение
</align>
"
NXWc7vQb,vietnam,Zvezdochkin,HTML,Friday 29th of December 2023 05:24:48 PM CDT,"<align=""center"">
<size=40><color=#fcff03>Kyle's project</color> <b>/</b> <color=#13c634>Вьетнам</color></size>
<b><size=16><color=#FB9800>НонРП</color> сервер с небольшим сводом правил и наличием большого кол-ва уникальных плагинов</size>\n<color=#C0C0C0>[CIS ONLY]</color></b>
</align>

<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1cW8t4Wy8s0ezmSLt3gnc7Tx7WDvEvpphXUHwtAgCXKU/edit?usp=sharing""><mark=#fc5ac9><size=13>|🎙️|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Голосовые Реплики|<space=5.65em>|</mark></link></size>

<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1C3bFwA8Wo18ZTuckRfkZcv3wthr6YB7SsGrX919SzRE""><mark=#E31C1C><size=13>|📖|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Общие Правила|<space=6.35em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/forms/d/e/1FAIpQLScFw-V2QxXXvjjhXeuwf7it-IAJTaBIiAKq_s-9yHELJE-Wrg/viewform""><mark=#FF8C00><size=13>|📋|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Заявка на Администратора|<space=0.85em>|</mark></link></size>
 
<size=17><link=""https://discord.gg/uxfhSG2""><mark=#32CD32><size=13>|💬|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Дискорд сервер|<space=6.2em>|</mark></link></size>
 
<size=17><link=""https://kyles.ru/""><mark=#2297E6><size=13>|🌐|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Сайт|<space=11.6em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1yKABCtmIdKt78jm_rkbfQoxhAKLVRRltagroYD_rldE""><mark=#4c00ff><size=13>|💎|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Донат-привилегии|<space=5.1em>|</mark></link></size>
</align>

<align=""left"">
<color=#FF4500><b>Список плагинов:</b></color>
 • Глобальная Оккультная Коалиция
 • Расширенная Зона поверхности
 • Вторая Зона побега
 • Говорящие <color=#FF0000><b>SCP</b></color>
 • Игровой класс <color=#FF0000><b>SCP-457</b></color>
 • Изменённый инвентарь классов
 • Счётчик патронов в <color=#2297E6><b>HUD</b></color>
 • Информационный монитор в интеркоме
 • Блокирование дверей
 • Бесконтактное открытие дверей
 • Быстрая скорость лифтов
 • Автобоеголовка после долгой игры
 • Бесконечный заряд рации
 • Улучшенное Карманное измерение
</align>
"
uP7yk2bL,mediumrp1,Zvezdochkin,HTML,Friday 29th of December 2023 05:24:27 PM CDT,"<align=""center"">
<size=34><color=#fcff03>Kyle's Project</color> <b>/</b> <color=#fd6f5a>MediumRP</color></size>
<b><size=18><color=#FB9800>РП</color> сервер со средним уровнем отыгровки</size>\n<color=#C0C0C0>[CIS ONLY]</color></b>
</align>

<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1cW8t4Wy8s0ezmSLt3gnc7Tx7WDvEvpphXUHwtAgCXKU/edit?usp=sharing""><mark=#fc5ac9><size=13>|🎙️|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Голосовые Реплики|<space=5.65em>|</mark></link></size>

<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1c3mQcidlg-ZfVxGwr8FWLK6du5q198qsGcx8Sp16Qyk""><mark=#fd6f5a><size=13>|📕|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Правила Сервера|<space=5.65em>|</mark></link></size>

<size=17><link=""https://docs.google.com/document/d/1C3bFwA8Wo18ZTuckRfkZcv3wthr6YB7SsGrX919SzRE""><mark=#E31C1C><size=13>|📖|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Общие Правила|<space=6.35em>|</mark></link></size>

<size=17><link=""https://docs.google.com/forms/d/e/1FAIpQLScGaVBVJzTjANzRltI96IOXE1Qg8vibOBeK1tUbBe3Wl3QU_w/viewform""><mark=#FF8C00><size=13>|📋|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Заявка на Администратора|<space=0.85em>|</mark></link></size>

<size=17><link=""https://discord.gg/uxfhSG2""><mark=#32CD32><size=13>|💬|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Дискорд сервер|<space=6.2em>|</mark></link></size>

<size=17><link=""https://kyles.ru/""><mark=#2297E6><size=13>|🌐|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Сайт|<space=11.6em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1yKABCtmIdKt78jm_rkbfQoxhAKLVRRltagroYD_rldE/edit#heading=h.u1s6ffc8bslo""><mark=#4c00ff><size=13>|💎|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Донат-привилегии|<space=5.1em>|</mark></link></size>
</align>

<align=""left"">
<color=#FF4500><b>Список плагинов:</b></color>
 • Старая озвучка <color=#2297E6><b>CASSIE</b></color>
 • Расширенная Зона поверхности
 • Вторая Зона побега
 • Говорящий <color=#FF0000><b>SCP-049</b></color>
 • Дополнительный класс <color=#FFA500><b>«Главный охранник»</b></color>
 • Слегка изменённый инвентарь
 • Переделанное кол-во ХП игровых SCP
 • <b>SCP-173</b> и <b>SCP-096</b> не могут появиться вместе
 • Информационный монитор в интеркоме
 • Блокирование дверей
 • Автобоеголовка после долгой игры
 • Повышенный заряд рации
 • Улучшенное Карманное измерение
 • Реалистичная стамина
</align>
"
UzzGMVwG,slivarp,Zvezdochkin,HTML,Friday 29th of December 2023 05:23:56 PM CDT,"<align=""center"">
<size=42><color=#fcff03>Kyle's project</color> <b>/</b> <color=#3c72aa>SlivaRP</color></size>
<b><size=18><color=#FB9800>РП</color> сервер с лёгким уровнем отыгровки</size>\n<color=#C0C0C0>[CIS ONLY]</color></b>
</align>

<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1cW8t4Wy8s0ezmSLt3gnc7Tx7WDvEvpphXUHwtAgCXKU/edit?usp=sharing""><mark=#fc5ac9><size=13>|🎙️|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Голосовые Реплики|<space=5.65em>|</mark></link></size>

<align=""left"">
<size=17><link=""https://docs.google.com/document/d/16aD2O2prfuo1tO9G62Q8DvS9_zntzdN9qpI-rHWiv-A""><mark=#fd6f5a><size=13>|📕|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Правила Сервера|<space=5.65em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1C3bFwA8Wo18ZTuckRfkZcv3wthr6YB7SsGrX919SzRE""><mark=#E31C1C><size=13>|📖|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Общие Правила|<space=6.35em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/forms/d/e/1FAIpQLSc5cqtVOEb-d5PDFZSQfVdHQqR3AEN8EQvorXHBQ3F_iCc5VQ/viewform""><mark=#FF8C00><size=13>|📋|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Заявка на Администратора|<space=0.85em>|</mark></link></size>
 
<size=17><link=""https://discord.gg/uxfhSG2""><mark=#32CD32><size=13>|💬|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Дискорд сервер|<space=6.2em>|</mark></link></size>
 
<size=17><link=""https://kyles.ru/""><mark=#2297E6><size=13>|🌐|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Сайт|<space=11.6em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1yKABCtmIdKt78jm_rkbfQoxhAKLVRRltagroYD_rldE/edit#heading=h.u1s6ffc8bslo""><mark=#4c00ff><size=13>|💎|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Донат-привилегии|<space=5.1em>|</mark></link></size>
</align>

<align=""left"">
<color=#FF4500><b>Список плагинов:</b></color>
 • Расширенная Зона поверхности
 • Вторая Зона побега
 • Говорящий <color=#FF0000><b>SCP-049</b></color>
 • Информационный монитор в интеркоме
 • Блокирование дверей
 • Автобоеголовка после долгой игры
 • Бесконечный заряд рации
 • Улучшенное Карманное измерение
 • Реалистичная стамина
</align>"
AWcUv7Gc,classic5,Zvezdochkin,HTML,Friday 29th of December 2023 05:23:13 PM CDT,"<align=""center"">
<size=40><color=#fcff03>Kyle's project</color> <b>/</b> <color=#e4c5e2>Classic #5</color></size>
<b><size=16><color=#FB9800>Классический</color> сервер cо стандартными настройками</size>\n<color=#C0C0C0>[CIS ONLY]</color></b>
</align>
 
<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1cW8t4Wy8s0ezmSLt3gnc7Tx7WDvEvpphXUHwtAgCXKU/edit?usp=sharing""><mark=#fc5ac9><size=13>|🎙️|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Голосовые Реплики|<space=5.65em>|</mark></link></size>
 
 
<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1el0utWs_HRbKY_GzdcCRnNxSeF1U3SlT3bm-QsR69dA""><mark=#fd6f5a><size=13>|📕|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Правила Сервера|<space=5.65em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1C3bFwA8Wo18ZTuckRfkZcv3wthr6YB7SsGrX919SzRE""><mark=#E31C1C><size=13>|📖|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Общие Правила|<space=6.35em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/forms/d/e/1FAIpQLScVBwr7aeuOPD_olkjw_dqH-o2yftto8g9EjFvx4gVaAGsdYQ/viewform""><mark=#FF8C00><size=13>|📋|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Заявка на Администратора|<space=0.85em>|</mark></link></size>
 
<size=17><link=""https://discord.gg/uxfhSG2""><mark=#32CD32><size=13>|💬|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Дискорд сервер|<space=6.2em>|</mark></link></size>
 
<size=17><link=""https://kyles.ru/""><mark=#2297E6><size=13>|🌐|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Сайт|<space=11.6em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1yKABCtmIdKt78jm_rkbfQoxhAKLVRRltagroYD_rldE""><mark=#4c00ff><size=13>|💎|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Донат-привилегии|<space=5.1em>|</mark></link></size>
</align>
 
<size=0>.</size>"
r4gWjB9s,classic4,Zvezdochkin,HTML,Friday 29th of December 2023 05:22:56 PM CDT,"<align=""center"">
<size=40><color=#fcff03>Kyle's project</color> <b>/</b> <color=#e4c5e2>Classic #4</color></size>
<b><size=16><color=#FB9800>Классический</color> сервер cо стандартными настройками</size>\n<color=#C0C0C0>[CIS ONLY]</color></b>
</align>
 
<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1cW8t4Wy8s0ezmSLt3gnc7Tx7WDvEvpphXUHwtAgCXKU/edit?usp=sharing""><mark=#fc5ac9><size=13>|🎙️|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Голосовые Реплики|<space=5.65em>|</mark></link></size>
 
 
<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1el0utWs_HRbKY_GzdcCRnNxSeF1U3SlT3bm-QsR69dA""><mark=#fd6f5a><size=13>|📕|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Правила Сервера|<space=5.65em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1C3bFwA8Wo18ZTuckRfkZcv3wthr6YB7SsGrX919SzRE""><mark=#E31C1C><size=13>|📖|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Общие Правила|<space=6.35em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/forms/d/e/1FAIpQLScVBwr7aeuOPD_olkjw_dqH-o2yftto8g9EjFvx4gVaAGsdYQ/viewform""><mark=#FF8C00><size=13>|📋|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Заявка на Администратора|<space=0.85em>|</mark></link></size>
 
<size=17><link=""https://discord.gg/uxfhSG2""><mark=#32CD32><size=13>|💬|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Дискорд сервер|<space=6.2em>|</mark></link></size>
 
<size=17><link=""https://kyles.ru/""><mark=#2297E6><size=13>|🌐|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Сайт|<space=11.6em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1yKABCtmIdKt78jm_rkbfQoxhAKLVRRltagroYD_rldE""><mark=#4c00ff><size=13>|💎|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Донат-привилегии|<space=5.1em>|</mark></link></size>
</align>
 
<size=0>.</size>"
2QenJcb6,classic3,Zvezdochkin,HTML,Friday 29th of December 2023 05:22:40 PM CDT,"<align=""center"">
<size=40><color=#fcff03>Kyle's project</color> <b>/</b> <color=#e4c5e2>Classic #3</color></size>
<b><size=16><color=#FB9800>Классический</color> сервер cо стандартными настройками</size>\n<color=#C0C0C0>[CIS ONLY]</color></b>
</align>
 
<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1cW8t4Wy8s0ezmSLt3gnc7Tx7WDvEvpphXUHwtAgCXKU/edit?usp=sharing""><mark=#fc5ac9><size=13>|🎙️|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Голосовые Реплики|<space=5.65em>|</mark></link></size>
 
 
<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1el0utWs_HRbKY_GzdcCRnNxSeF1U3SlT3bm-QsR69dA""><mark=#fd6f5a><size=13>|📕|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Правила Сервера|<space=5.65em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1C3bFwA8Wo18ZTuckRfkZcv3wthr6YB7SsGrX919SzRE""><mark=#E31C1C><size=13>|📖|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Общие Правила|<space=6.35em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/forms/d/e/1FAIpQLScVBwr7aeuOPD_olkjw_dqH-o2yftto8g9EjFvx4gVaAGsdYQ/viewform""><mark=#FF8C00><size=13>|📋|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Заявка на Администратора|<space=0.85em>|</mark></link></size>
 
<size=17><link=""https://discord.gg/uxfhSG2""><mark=#32CD32><size=13>|💬|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Дискорд сервер|<space=6.2em>|</mark></link></size>
 
<size=17><link=""https://kyles.ru/""><mark=#2297E6><size=13>|🌐|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Сайт|<space=11.6em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1yKABCtmIdKt78jm_rkbfQoxhAKLVRRltagroYD_rldE""><mark=#4c00ff><size=13>|💎|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Донат-привилегии|<space=5.1em>|</mark></link></size>
</align>
 
<size=0>.</size>"
w6nVrfSj,classic2,Zvezdochkin,HTML,Friday 29th of December 2023 05:22:19 PM CDT,"<align=""center"">
<size=40><color=#fcff03>Kyle's project</color> <b>/</b> <color=#e4c5e2>Classic #2</color></size>
<b><size=16><color=#FB9800>Классический</color> сервер cо стандартными настройками</size>\n<color=#C0C0C0>[CIS ONLY]</color></b>
</align>
 
<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1cW8t4Wy8s0ezmSLt3gnc7Tx7WDvEvpphXUHwtAgCXKU/edit?usp=sharing""><mark=#fc5ac9><size=13>|🎙️|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Голосовые Реплики|<space=5.65em>|</mark></link></size>
 
 
<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1el0utWs_HRbKY_GzdcCRnNxSeF1U3SlT3bm-QsR69dA""><mark=#fd6f5a><size=13>|📕|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Правила Сервера|<space=5.65em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1C3bFwA8Wo18ZTuckRfkZcv3wthr6YB7SsGrX919SzRE""><mark=#E31C1C><size=13>|📖|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Общие Правила|<space=6.35em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/forms/d/e/1FAIpQLScVBwr7aeuOPD_olkjw_dqH-o2yftto8g9EjFvx4gVaAGsdYQ/viewform""><mark=#FF8C00><size=13>|📋|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Заявка на Администратора|<space=0.85em>|</mark></link></size>
 
<size=17><link=""https://discord.gg/uxfhSG2""><mark=#32CD32><size=13>|💬|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Дискорд сервер|<space=6.2em>|</mark></link></size>
 
<size=17><link=""https://kyles.ru/""><mark=#2297E6><size=13>|🌐|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Сайт|<space=11.6em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1yKABCtmIdKt78jm_rkbfQoxhAKLVRRltagroYD_rldE""><mark=#4c00ff><size=13>|💎|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Донат-привилегии|<space=5.1em>|</mark></link></size>
</align>
 
<size=0>.</size>"
3kaWfESn,classic1,Zvezdochkin,HTML,Friday 29th of December 2023 05:19:29 PM CDT,"<align=""center"">
<size=40><color=#fcff03>Kyle's project</color> <b>/</b> <color=#e4c5e2>Classic #1</color></size>
<b><size=16><color=#FB9800>Классический</color> сервер cо стандартными настройками</size>\n<color=#C0C0C0>[CIS ONLY]</color></b>
</align>

<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1cW8t4Wy8s0ezmSLt3gnc7Tx7WDvEvpphXUHwtAgCXKU/edit?usp=sharing""><mark=#fc5ac9><size=13>|🎙️|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Голосовые Реплики|<space=5.65em>|</mark></link></size>

 
<align=""left"">
<size=17><link=""https://docs.google.com/document/d/1el0utWs_HRbKY_GzdcCRnNxSeF1U3SlT3bm-QsR69dA""><mark=#fd6f5a><size=13>|📕|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Правила Сервера|<space=5.65em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1C3bFwA8Wo18ZTuckRfkZcv3wthr6YB7SsGrX919SzRE""><mark=#E31C1C><size=13>|📖|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Общие Правила|<space=6.35em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/forms/d/e/1FAIpQLScVBwr7aeuOPD_olkjw_dqH-o2yftto8g9EjFvx4gVaAGsdYQ/viewform""><mark=#FF8C00><size=13>|📋|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Заявка на Администратора|<space=0.85em>|</mark></link></size>
 
<size=17><link=""https://discord.gg/uxfhSG2""><mark=#32CD32><size=13>|💬|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Дискорд сервер|<space=6.2em>|</mark></link></size>
 
<size=17><link=""https://kyles.ru/""><mark=#2297E6><size=13>|🌐|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Сайт|<space=11.6em>|</mark></link></size>
 
<size=17><link=""https://docs.google.com/document/d/1yKABCtmIdKt78jm_rkbfQoxhAKLVRRltagroYD_rldE""><mark=#4c00ff><size=13>|💎|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Донат-привилегии|<space=5.1em>|</mark></link></size>
</align>
 
<size=0>.</size>
"
bKf3MzVb,Card batterie,fabrizio97726,YAML,Friday 29th of December 2023 04:32:13 PM CDT,"type: custom:mushroom-template-card
icon: mdi:battery-high
primary: null
icon_color: green
secondary: >-
  {{ states('sensor.iphone_13_battery_level') | round(0) }}% iPhone  | {{
  states('sensor.ipad_490_battery_level') | round(0) }}% iPad
layout: vertical
tap_action:
  action: navigate
  navigation_path: /lovelace-casa2/iphone-13
double_tap_action:
  action: navigate
  navigation_path: /lovelace-casa2/andrea
card_mod:
  style:
    mushroom-shape-icon$: |
      .shape {
        background: radial-gradient(var(--card-background-color) 60%, transparent 0%), conic-gradient(rgb(var(--rgb-{{ config.icon_color }})) {{ states('sensor.iphone_13_battery_level') }}% 0%, var(--card-background-color) 0% 100%);
      }
      .shape:before {
        content: """";
        background: radial-gradient(var(--card-background-color) 60%, transparent 0%), conic-gradient(rgb(var(--rgb-teal)) {{ states('sensor.ipad_490_battery_level') }}% 0%, var(--card-background-color) 0% 100%);
        position: absolute;
        border-radius: var(--icon-border-radius);
        width: 81%;
        height: 81%;
      }
      .shape:after {
        content: """";
        height: 100%;
        width: 100%;"
SefSQnNK,updated transaction,aacoimbra,Python,Friday 29th of December 2023 03:45:30 PM CDT,"const fcl = require(""@onflow/fcl"");
const misc = require('./utils/misc');
const templates = require('./utils/flow_templates');
const t = require(""@onflow/types"");

import { promises as fsPromises } from 'fs';

misc.configFcl('emulator');

export default async function main() {

    const accounts = JSON.parse(
		await fsPromises.readFile('accounts.json', 'utf8'),
	);

    await fcl.config().put('system.contracts.BBCollectables', accounts.admin.address)	


    const admin = {
		address: accounts.admin.address,
		publicKey: accounts.admin.keys.public,
		privateKey: accounts.admin.keys.private,
		keyIndex: 0,
	};

    const user = {
		address: accounts.userAccount1.address,
		publicKey: accounts.userAccount1.keys.public,
		privateKey: accounts.userAccount1.keys.private,
		keyIndex: 0,
	};

	const args: any = [
		fcl.arg(""1"", t.UInt32),
		fcl.arg(""1"", t.UInt32),
	];

    const txId = await templates.simpleTransactionBuilder(admin, [admin, user], admin, 'mint_card', args);

    const viralatTransaction = await fcl.tx(txId).onceExecuted();

    // console.log(viralatTransaction)
};

main()
	.then((text) => console.log(text))
	.catch((error) => console.log(error));
"
PggnzANz,Untitled,woxd,JavaScript,Friday 29th of December 2023 03:38:44 PM CDT,"const mainButton = document.getElementById(""mainButton"");
const daysInput = document.getElementById(""daysInput"");
const resetButton = document.getElementById(""resetButton"");

// mainButton.addEventListener(""click"",runProject);
// resetButton.addEventListener(""click"",resetFields);

function runProject(){

};

function resetFields(){
    
};

async function getData(){
    try{
    const response = await fetch(""https://api.npoint.io/a2d5073c8fd9159e043d"");
    const responseObj = await response.json();
    if (responseObj.status >= 400 && responseObj.status < 600) {
        throw new Error(""Bad response from server"");
      }
      return responseObj;
    }
    catch(error){
        console.log(error)
    }
}

async function filterOutErrors(){
    let dataKeys = 1;
    let data;
    let counter = 0;
    while (dataKeys == 1 && counter < 5) {
        counter++;
        data = await getData();
        dataKeys = Object.keys(data).length;
        console.log(data);
        console.log(dataKeys);
        console.log(data.scriptType);
        console.log(counter)
    }

    if (counter == 5) {
        throw new Error(""Number of errors exceeded limit"");
    }
    return data;
}

async function filterByType(){
    let dataType;
    let cleanData;
    while (dataType != ""basic""){
        cleanData = await filterOutErrors();
        dataType = cleanData.scriptType;
    }
    return cleanData;
}

async function getDataPerAccount(){
    // let numberOfVideos = daysInput.value * 3;
    let numberOfVideos = 3;
    const dataPerAccount = [];
    for (let i = 0; i < numberOfVideos; i++) {
        dataPerAccount.push(await filterByType());
    }
    console.log(dataPerAccount);
}

// filterOutErrors();
// filterByType();
getDataPerAccount();"
u466vW40,The Script,ThatBoiAlan,Lua,Friday 29th of December 2023 03:34:02 PM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/lannysteel/PetSim99/main/PetSimScript""))()"
pVkigq3j,full contract,aacoimbra,Python,Friday 29th of December 2023 03:23:23 PM CDT,"// import NonFungibleToken from 0x631e88ae7f1d7c20
// import MetadataViews from 0x631e88ae7f1d7c20
// import FungibleToken from 0x9a0766d93b6608b7
// import PRNG from 0x2bf5575475144be3

import ""NonFungibleToken""
import ""MetadataViews""
import ""FungibleToken""
// import ""PRNG""

pub contract BBCollectables: NonFungibleToken {

    // pub let network: String

    pub event ContractInitialized()

    pub event CardCreated(cardID: UInt32, metadata: {String:String})
    pub event PackCreated(packID: UInt32)

    pub event CardAddedToPack(packID: UInt32, cardID: UInt32)
    pub event CardRetiredFromPack(packID: UInt32, cardID: UInt32, numCards: UInt32)
    pub event CardUnretiredFromPack(packID: UInt32, cardID: UInt32, numCards: UInt32)

    pub event PackLocked(packID: UInt32)
    pub event PackUnlocked(packID: UInt32)

    pub event BlockPackMint(packID: UInt32)

   
    pub event TicketMinted(packID: UInt32, serialNumber: UInt32) 
    pub event TicketSpent(id: UInt64, packID: UInt32, serialNumber: UInt32, content: [UInt32])
    pub event TicketDestroyed(id: UInt64)

    pub event BBNftMinted(BBNftID: UInt64, cardID: UInt32, packID: UInt32, serialNumber: UInt32)
    pub event BBNftDestroyed(id: UInt64)


    pub event Withdraw(id: UInt64, from: Address?)

    pub event Deposit(id: UInt64, to: Address?)

    pub let NftCollectionStoragePath: StoragePath
    pub let NftCollectionPublicPath: PublicPath
    pub let AdminStoragePath: StoragePath

    pub var cardDatas: {UInt32: Card}
    access(self) var packDatas: {UInt32: PackData}
    pub var packs: @{UInt32: Pack}

    pub var nextCardID: UInt32
    pub var nextPackID: UInt32

    pub var totalSupply: UInt64


    pub struct Card {

        pub let cardID: UInt32

        // pub let categories: [String]

        pub let metadata: {String: String}

        init(metadata: {String: String}) {
            pre {
                metadata.length != 0: ""New Card metadata cannot be empty""
            }
            self.cardID = BBCollectables.nextCardID
            // self.categories = categories
            self.metadata = metadata
        }
    }

    pub struct PackData {

        pub let packID: UInt32

        pub let name: String

        pub let rarityDistribution: {String: UInt256}

        init(name: String, rarityDistribution: {String: UInt256}) {
            pre {
                name.length > 0: ""New Pack name cannot be empty""
            }
            self.packID = BBCollectables.nextPackID
            self.name = name
            self.rarityDistribution = rarityDistribution
        }
    }

    pub resource Pack {

        pub let name: String

        pub let packID: UInt32

        access(contract) var rarityDistribution: {String: UInt256}

        access(contract) var cards: [UInt32]

        access(contract) var retired: {UInt32: Bool}

        pub var locked: Bool

        access(contract) var ticketsMinted: UInt32

        access(contract) var ticketsSpent: UInt32

        access(contract) var ticketsDestroyed: UInt32

        access(contract) var mintCapPerCard: {UInt32: UInt32}

        access(contract) var numberMintedPerCard: {UInt32: UInt32}

        access(contract) var numberDestroyedPerCard: {UInt32: UInt32}

        pub var cardsAvailableByRarity: {String: [UInt32]}

        init(name: String, rarityDistribution: {String: UInt256}) {
            self.name = name
            self.packID = BBCollectables.nextPackID
            self.rarityDistribution = rarityDistribution
            self.cards = []
            self.retired = {}
            self.locked = false
            self.ticketsMinted = 0
            self.ticketsSpent = 0
            self.ticketsDestroyed = 0
            self.mintCapPerCard = {}
            self.numberMintedPerCard = {}
            self.numberDestroyedPerCard = {}
            self.cardsAvailableByRarity = {}

            for rarity in rarityDistribution.keys {
                self.cardsAvailableByRarity[rarity] = []
            }

            BBCollectables.packDatas[self.packID] = PackData(name: name, rarityDistribution: rarityDistribution)
        }

        pub fun addCard(cardID: UInt32, mintCap: UInt32) {

            pre {
                BBCollectables.cardDatas[cardID] != nil: ""Cannot add the Card to Pack: Card doesn't exist.""
                !self.locked: ""Cannot add the Card to the Pack after the Pack has been locked.""
                self.numberMintedPerCard[cardID] == nil: ""The Card has already beed added to the Pack.""
                self.rarityDistribution[BBCollectables.getCardMetaDataByField(cardID: cardID, field: ""rarity"")!] != nil: ""The Card rarity not included in pack.""
                mintCap >= 0: ""'maxCount' parameter must be 0 or higher.""
            }


            self.cards.append(cardID)

            self.retired[cardID] = false

            self.mintCapPerCard[cardID] = mintCap

            self.numberMintedPerCard[cardID] = 0

            self.numberDestroyedPerCard[cardID] = 0
            
            self.cardsAvailableByRarity[BBCollectables.getCardMetaDataByField(cardID: cardID, field: ""rarity"")!]!.append(cardID)

            emit CardAddedToPack(packID: self.packID, cardID: cardID)
        }

        pub fun addCards(cardIDs: [UInt32], mintCaps: [UInt32]) {
            
            var i = 0
            while i < cardIDs.length {
                self.addCard(cardID: cardIDs[i], mintCap: mintCaps[i])
                i = i + 1
            }
                
        }
        

        pub fun retireCard(cardID: UInt32) {
            pre {
                self.retired[cardID] != nil: ""Cannot retire the Card: Card doesn't exist in this Pack!""
                self.retired[cardID] == false: ""Cannot retire the Card: Card already retired!""
                !self.locked: ""Cannot retire card: This Pack is locked.""
            }

            let cardRarity = BBCollectables.getCardMetaDataByField(cardID: cardID, field: ""rarity"")!

            var index: UInt16 = 0
            for value in self.cardsAvailableByRarity[cardRarity]! {
                if value == cardID {
                self.cardsAvailableByRarity[cardRarity]!.remove(at: index)
                }
                index = index + 1
            }
            

            if !self.retired[cardID]! {
                self.retired[cardID] = true

                emit CardRetiredFromPack(packID: self.packID, cardID: cardID, numCards: self.numberMintedPerCard[cardID]!)
            }
        }

        pub fun unretireCard(cardID: UInt32) {
            pre {
                self.retired[cardID] != nil: ""Cannot unretire the Card: Card doesn't exist in this Pack!""
                self.retired[cardID] == true: ""Cannot unretire the Card: Card must be retired!""
                self.numberMintedPerCard[cardID]! < self.mintCapPerCard[cardID]! || self.mintCapPerCard[cardID]! == 0: ""Cannot unretire the Card: Card has reached it's maximum mint cap!""
                !self.locked: ""Cannot retire card: This Pack is locked.""
            }

            let cardRarity = BBCollectables.getCardMetaDataByField(cardID: cardID, field: ""rarity"")!

            self.cardsAvailableByRarity[cardRarity]!.insert(at: self.cardsAvailableByRarity[cardRarity]!.length - 1, cardID)

            if self.retired[cardID]! {
                self.retired[cardID] = false

                emit CardUnretiredFromPack(packID: self.packID, cardID: cardID, numCards: self.numberMintedPerCard[cardID]!)
            }
        }

        pub fun retireAll() {
            for card in self.cards {
                self.retireCard(cardID: card)
            }
        }

        pub fun lock() {
            if !self.locked {
                self.locked = true
                emit PackLocked(packID: self.packID)
            }
        }

        pub fun unlock() {
            if self.locked {
                self.locked = false
                emit PackUnlocked(packID: self.packID)
            }
        }

        pub fun spentTicketCount() {
            self.ticketsSpent = self.ticketsSpent +1
        }

        pub fun destroyedTicketCount() {
            self.ticketsDestroyed = self.ticketsDestroyed +1
        }


        pub fun mintBBNft(cardID: UInt32): @NFT {
            pre {
                self.retired[cardID] != nil: ""Cannot mint the Card: This Card doesn't exist.""
                !self.retired[cardID]!: ""Cannot mint the Card from this Pack: This Card has been retired.""
                self.numberMintedPerCard[cardID]! < self.mintCapPerCard[cardID]! || self.mintCapPerCard[cardID]! == 0: ""Card has reached the maximum mint cap.""
            }

            let numInCard = self.numberMintedPerCard[cardID]!

            let newBBNft: @NFT <- create NFT(cardID: cardID,
                                              packID: self.packID,
                                              timestamp: getCurrentBlock().timestamp,
                                              packIndex: UInt32(self.cards.firstIndex(of: cardID)!),
                                              serialNumber: numInCard +1
                                              )
            
            self.numberMintedPerCard[cardID] = numInCard +1

            if self.numberMintedPerCard[cardID]! >= self.mintCapPerCard[cardID]! && self.mintCapPerCard[cardID]! > 0 {
                self.retireCard(cardID: cardID)
            }

            return <-newBBNft
        }

        pub fun destroyBBNft(cardID: UInt32) {
            self.numberDestroyedPerCard[cardID] = self.numberDestroyedPerCard[cardID]! +1
        }

        pub fun batchMintBBNft(cardID: UInt32, quantity: UInt64): @Collection {
            let newCollection <- create Collection()

            var i: UInt64 = 0
            while i < quantity {
                newCollection.deposit(token: <-self.mintBBNft(cardID: cardID))
                i = i +1
            }

            return <-newCollection
        }

        pub fun getRarityDistribution(): {String: UInt256} {
            return self.rarityDistribution
        }

        pub fun getCards(): [UInt32] {
            return self.cards
        }

        pub fun getRetired(): {UInt32: Bool} {
            return self.retired
        }

        pub fun getNumMintedPerCard(): {UInt32: UInt32} {
            return self.numberMintedPerCard
        }
    }

    pub struct QueryPackData {
        pub let packID: UInt32
        pub let name: String
        pub var locked: Bool
        access(self) var rarityDistribution: {String: UInt256}
        access(self) var cards: [UInt32]
        access(self) var retired: {UInt32: Bool}
        access(self) var cardsAvailableByRarity: {String: [UInt32]}
        access(contract) var ticketsMinted: UInt32
        access(contract) var ticketsSpent: UInt32
        access(contract) var ticketsDestroyed: UInt32
        access(self) var mintCapPerCard: {UInt32: UInt32}
        access(self) var numberMintedPerCard: {UInt32: UInt32}
        access(self) var numberDestroyedPerCard: {UInt32: UInt32}
        

        init(packID: UInt32) {
            pre {
                BBCollectables.packs[packID] != nil: ""The Pack with the provided ID does not exist""
            }

            let pack= (&BBCollectables.packs[packID] as &Pack?)!
            let packData = BBCollectables.packDatas[packID]!

            self.packID = packID
            self.name = packData.name
            self.locked = pack.locked
            self.rarityDistribution = pack.rarityDistribution
            self.cards = pack.cards
            self.retired = pack.retired
            self.cardsAvailableByRarity = pack.cardsAvailableByRarity
            self.ticketsMinted = pack.ticketsMinted
            self.ticketsSpent = pack.ticketsSpent
            self.ticketsDestroyed = pack.ticketsDestroyed
            self.mintCapPerCard = pack.mintCapPerCard
            self.numberMintedPerCard = pack.numberMintedPerCard
            self.numberDestroyedPerCard = pack.numberDestroyedPerCard
        }

        pub fun getRarityDistribution(): {String: UInt256} {
            return self.rarityDistribution
        }

        pub fun getCards(): [UInt32] {
            return self.cards
        }

        pub fun getRetired(): {UInt32: Bool} {
            return self.retired
        }

        pub fun getcardsAvailableByRarity(): {String: [UInt32]} {
            return self.cardsAvailableByRarity
        }

        pub fun getTicketsMinted(): UInt32 {
            return self.ticketsMinted
        }

        pub fun getTicketsSpent(): UInt32 {
            return self.ticketsSpent
        }

        pub fun getNumberMintedPerCard(): {UInt32: UInt32} {
            return self.numberMintedPerCard
        }

        pub fun getNumberDestroyedPerCard(): {UInt32: UInt32} {
            return self.numberDestroyedPerCard
        }
    }

    pub struct BBNftData {

        pub let cardID: UInt32

        pub let packID: UInt32

        pub let timestamp: UFix64

        pub let packIndex: UInt32

        pub let serialNumber: UInt32


        init(cardID: UInt32, packID: UInt32, timestamp: UFix64, packIndex:UInt32, serialNumber: UInt32) {
            self.cardID = cardID
            self.packID = packID
            self.timestamp = timestamp
            self.packIndex = packIndex
            self.serialNumber = serialNumber
        }

    }

    pub struct BBNftMetadataView {

        pub let name : String?
        pub let description: String?
        pub let rarity: String?
        pub let media: String?

        pub let cardID: UInt32?
        pub let packID: UInt32?
        pub let timestamp: UFix64?
        pub let packIndex: UInt32?
        pub let serialNumber: UInt32?

        init(
            name: String?,
            description: String?,
            rarity: String?,
            media: String?,

            cardID: UInt32?,
            packID: UInt32?,
            timestamp: UFix64?,
            packIndex: UInt32?,
            serialNumber: UInt32?,
            
        ) {
            self.name = name
            self.description = description
            self.rarity = rarity
            self.media = media

            self.cardID = cardID
            self.packID = packID
            self.timestamp = timestamp
            self.packIndex = packIndex
            self.serialNumber = serialNumber
        }
    }

    pub resource NFT: NonFungibleToken.INFT, MetadataViews.Resolver {

        pub let id: UInt64
        pub let data: BBNftData

        init(cardID: UInt32, packID: UInt32, timestamp: UFix64, packIndex: UInt32, serialNumber: UInt32) {

            BBCollectables.totalSupply = BBCollectables.totalSupply +1

            self.id = BBCollectables.totalSupply

            self.data = BBNftData(cardID: cardID, packID: packID, timestamp: timestamp, packIndex: packIndex, serialNumber: serialNumber)

            emit BBNftMinted(BBNftID: self.id, cardID: cardID, packID: self.data.packID, serialNumber: self.data.serialNumber)
        }

        destroy() {
            BBCollectables.packs[self.data.packID]?.destroyBBNft(cardID: self.data.cardID)
            emit BBNftDestroyed(id: self.id)
        }

        pub fun name(): String {
            let cardName: String = BBCollectables.getCardMetaDataByField(cardID: self.data.cardID, field: ""name"") ?? """"
            return cardName
        }

        pub fun description(): String {
            let packName: String = BBCollectables.getPackName(packID: self.data.packID) ?? """"
            let serialNumber: String = self.data.serialNumber.toString()
            return ""A series ""
                .concat(packName)
                .concat("" BBNft with serial number "")
                .concat(serialNumber)
        }

        pub fun getCardURL(): String {
 
            return ""https://media.BBCollectables.bite.blue/"".concat(""testnet"").concat(""/cards/"").concat(BBCollectables.getCardMetaDataByField(cardID: self.data.cardID, field: ""media"")!).concat(""/carta.png"")
            
            // return BBCollectables.getCardMetaDataByField(cardID: self.data.cardID, field: ""media"")!
        }

        pub fun mapCardData(dict: {String: AnyStruct}) : {String: AnyStruct} {      
            let cardMetadata = BBCollectables.getCardMetaData(cardID: self.data.cardID) ?? {}
            for name in cardMetadata.keys {
                let value = cardMetadata[name] ?? """"
                if value != """" {
                    dict.insert(key: name, value)
                }
            }
            return dict
        }

        pub fun getViews(): [Type] {
            return [
                Type<MetadataViews.Display>(),
                Type<BBNftMetadataView>(),
                Type<MetadataViews.ExternalURL>(),
                Type<MetadataViews.NFTCollectionData>(),
                Type<MetadataViews.NFTCollectionDisplay>(),
                Type<MetadataViews.Serial>(),
                Type<MetadataViews.Traits>(),
                Type<MetadataViews.Medias>()
            ]
        }

        pub fun resolveView(_ view: Type): AnyStruct? {
            switch view {
                case Type<MetadataViews.Display>():
                    return MetadataViews.Display(
                        name: self.name(),
                        description: self.description(),
                        thumbnail: MetadataViews.HTTPFile(url: self.getCardURL())
                    )
                case Type<BBNftMetadataView>():
                    return BBNftMetadataView(
                        name: BBCollectables.getCardMetaDataByField(cardID: self.data.cardID, field: ""name""),
                        description: BBCollectables.getCardMetaDataByField(cardID: self.data.cardID, field: ""cardDescription""),
                        rarity: BBCollectables.getCardMetaDataByField(cardID: self.data.cardID, field: ""rarity""),
                        media: self.getCardURL(),
                        
                        cardID: self.data.cardID,
                        packID: self.data.packID,
                        timestamp: self.data.timestamp,
                        packIndex: self.data.packIndex,
                        serialNumber: self.data.serialNumber,
                    )
                    
                case Type<MetadataViews.ExternalURL>():
                    return MetadataViews.ExternalURL(self.getCardURL())

                case Type<MetadataViews.NFTCollectionData>():
                    return MetadataViews.NFTCollectionData(
                        storagePath: /storage/BBNFTCollection,
                        publicPath: /public/BBNFTCollection,
                        providerPath: /private/BBNFTCollection,
                        publicCollection: Type<&BBCollectables.Collection{NonFungibleToken.CollectionPublic}>(),
                        publicLinkedType: Type<&BBCollectables.Collection{NonFungibleToken.Receiver,NonFungibleToken.CollectionPublic,MetadataViews.ResolverCollection}>(),
                        providerLinkedType: Type<&BBCollectables.Collection{NonFungibleToken.Provider,NonFungibleToken.Receiver,NonFungibleToken.CollectionPublic,MetadataViews.ResolverCollection}>(),
                        createEmptyCollectionFunction: (fun (): @NonFungibleToken.Collection {
                            return <-BBCollectables.createEmptyCollection()
                        })
                    )

                case Type<MetadataViews.NFTCollectionDisplay>():
                    let bannerImage = MetadataViews.Media(
                        file: MetadataViews.HTTPFile(
                            url: ""https://media.BBCollectables.bite.blue/testnet/branding/BB-banner.svg""
                        ),
                        mediaType: ""image/svg""
                    )
                    let squareImage = MetadataViews.Media(
                        file: MetadataViews.HTTPFile(
                            url: ""https://media.BBCollectables.bite.blue/testnet/branding/BB-logopack-04.svg""
                        ),
                        mediaType: ""image/svg""
                    )

                    return MetadataViews.NFTCollectionDisplay(
                        name: ""Organiser Collectables Collection"",
                        description: ""Uma experiência de outro planeta. 🪐"",
                        externalURL: MetadataViews.ExternalURL(""https://www.bluebite.tech/""),
                        squareImage: squareImage,
                        bannerImage: bannerImage,
                        socials: {
                            ""instagram"": MetadataViews.ExternalURL(""https://www.instagram.com/richmond_fc/"")
                        }
                    )

                case Type<MetadataViews.Serial>():
                    return MetadataViews.Serial(
                        UInt64(self.data.serialNumber)
                    )

                case Type<MetadataViews.Traits>():
                    // sports radar team id
                    let excludedNames: [String] = [""timestamp""]
                    // non play specific traits
                    let traitDictionary: {String: AnyStruct} = {
                        ""packName"": BBCollectables.getPackName(packID: self.data.packID)
                    }
                    // add play specific data
                    let fullDictionary = self.mapCardData(dict: traitDictionary)
                    return MetadataViews.dictToTraits(dict: fullDictionary, excludedNames: excludedNames)

                case Type<MetadataViews.Medias>():
                    return MetadataViews.Medias(
                        items: [
                            MetadataViews.Media(
                                file: MetadataViews.HTTPFile(
                                    url: self.getCardURL()
                                ),
                                mediaType: ""image/png""
                            )
                        ]
                    )
            }

            return nil
        }
 
        
    }

    // pub struct PackTicketData{

    //     pub let packID: UInt32

    //     pub let serialNumber: UInt32

    //     init(packID: UInt32, serialNumber: UInt32) {
    //         self.packID = packID
    //         self.serialNumber = serialNumber
    //     }
    // }

    pub resource Admin {

        pub fun createCard( metadata: {String: String}): UInt32 {

            pre {
                metadata.containsKey(""rarity"") == true: ""Metadata missing rarity field""
                metadata.containsKey(""name"") == true: ""Metadata missing name field""
                metadata.containsKey(""description"") == true: ""Metadata missing description field""
                metadata.containsKey(""date"") == true: ""Metadata missing date field""
            }

            for value in BBCollectables.cardDatas.values {
                if value.metadata[""name""] == metadata[""name""] {
                    return 0
                }
            }

            var newCard = Card( metadata: metadata)

            let newID = newCard.cardID

            BBCollectables.nextCardID = BBCollectables.nextCardID +1

            emit CardCreated(cardID: newCard.cardID, metadata: newCard.metadata)

            BBCollectables.cardDatas[newID] = newCard

            return newID
        }

        pub fun createPack(name: String, rarityDistribution: {String: UInt256}): UInt32 {

            var newPack <- create Pack(name: name, rarityDistribution: rarityDistribution)

            BBCollectables.nextPackID = BBCollectables.nextPackID +1

            let newID = newPack.packID

            emit PackCreated(packID: newPack.packID)

            BBCollectables.packs[newID] <-! newPack

            return newID
        }

        pub fun borrowPack(packID: UInt32): &Pack {
            pre {
                BBCollectables.packs[packID] != nil: ""Cannot borrow Pack: The Pack doesn't exist""
            }
            
            return (&BBCollectables.packs[packID] as &Pack?)!
        }

        pub fun createNewAdmin(): @Admin {
            return <-create Admin()
        }
    }

    pub resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.CollectionPublic, MetadataViews.ResolverCollection { 

        pub var ownedNFTs: @{UInt64: NonFungibleToken.NFT}

        init() {
            self.ownedNFTs <- {}
        }

        pub fun withdraw(withdrawID: UInt64): @NonFungibleToken.NFT {

            let token <- self.ownedNFTs.remove(key: withdrawID) 
                ?? panic(""Cannot withdraw: Card does not exist in the collection"")

            emit Withdraw(id: token.id, from: self.owner?.address)
            
            return <-token
        }

        pub fun batchWithdraw(ids: [UInt64]): @NonFungibleToken.Collection {
            var batchCollection <- create Collection()
            
            for id in ids {
                batchCollection.deposit(token: <-self.withdraw(withdrawID: id))
            }
            
            return <-batchCollection
        }
        pub fun deposit(token: @NonFungibleToken.NFT) {
            

            let token <- token as! @BBCollectables.NFT

            let id = token.id

            let oldToken <- self.ownedNFTs[id] <- token

            if self.owner?.address != nil {
                emit Deposit(id: id, to: self.owner?.address)
            }

            destroy oldToken
        }

        pub fun batchDeposit(tokens: @NonFungibleToken.Collection) {

            let keys = tokens.getIDs()

            for key in keys {
                self.deposit(token: <-tokens.withdraw(withdrawID: key))
            }

            destroy tokens
        }

        pub fun getIDs(): [UInt64] {
            return self.ownedNFTs.keys
        }

        pub fun borrowNFT(id: UInt64): &NonFungibleToken.NFT {
            return (&self.ownedNFTs[id] as &NonFungibleToken.NFT?)!
        }

        pub fun borrowBBNft(id: UInt64): &BBCollectables.NFT? {
            if self.ownedNFTs[id] != nil {
                let ref = (&self.ownedNFTs[id] as auth &NonFungibleToken.NFT?)!
                return ref as! &BBCollectables.NFT
            } else {
                return nil
            }
        }

        pub fun borrowViewResolver(id: UInt64): &AnyResource{MetadataViews.Resolver} {
            let nft = (&self.ownedNFTs[id] as auth &NonFungibleToken.NFT?)!
            let BBNFT = nft as! &BBCollectables.NFT
            return BBNFT as &AnyResource{MetadataViews.Resolver}
        }

        destroy() {
            destroy self.ownedNFTs
        }
    }

    pub fun createEmptyCollection(): @NonFungibleToken.Collection {
        return <-create BBCollectables.Collection()
    }


    pub fun getAllCards(): {UInt32: BBCollectables.Card} {
        return BBCollectables.cardDatas
    }

    pub fun getCardMetaData(cardID: UInt32): {String: String}? {
        return self.cardDatas[cardID]?.metadata
    }

    pub fun getCardMetaDataByField(cardID: UInt32, field: String): String? {
        if let card = BBCollectables.cardDatas[cardID] {
            return card.metadata[field]
        } else {
            return nil
        }
    }

    pub fun getPackData(packID: UInt32): QueryPackData? {
        if BBCollectables.packs[packID] == nil {
            return nil
        } else {
            return QueryPackData(packID: packID)
        }
    }

    pub fun getPackName(packID: UInt32): String? {
        return BBCollectables.packDatas[packID]?.name
    }

    pub fun getPackIDsByName(packName: String): [UInt32]? {
        var packIDs: [UInt32] = []

        for packData in BBCollectables.packDatas.values {
            if packName == packData.name {

                packIDs.append(packData.packID)
            }
        }

        if packIDs.length == 0 {
            return nil
        } else {
            return packIDs
        }
    }

    pub fun getCardsInPack(packID: UInt32): [UInt32]? {

        return BBCollectables.packs[packID]?.cards
    }

    pub fun getRarityDistributionOfPack(packID: UInt32): {String: UInt256}? {

        return BBCollectables.packs[packID]?.rarityDistribution
    }

    pub fun isPackLocked(packID: UInt32): Bool? {
        return BBCollectables.packs[packID]?.locked
    }


    init() {

        // self.network = ""testnet""

        self.cardDatas = {}
        self.packDatas = {}
        self.packs <- {}
        self.nextCardID = 1
        self.nextPackID = 1
        self.totalSupply = 0

        self.NftCollectionStoragePath = /storage/BBNFTCollection
        self.NftCollectionPublicPath = /public/BBNFTCollection
        self.AdminStoragePath = /storage/BBAdmin

        self.account.save<@Collection>(<- create Collection(), to: self.NftCollectionStoragePath)

        self.account.link<&BBCollectables.Collection{NonFungibleToken.CollectionPublic, MetadataViews.ResolverCollection}>(self.NftCollectionPublicPath, target: self.NftCollectionStoragePath)

        let adminResource: @BBCollectables.Admin <- create Admin()

        adminResource.createPack(name: ""Coleção 2024"", rarityDistribution: { ""comum"": 50, ""raro"": 30,""épico"":16, ""lendário"": 4})

        self.account.save<@Admin>(<- adminResource, to: self.AdminStoragePath)

        emit ContractInitialized()

        
    }
}
 "
zqQ2SQf8,Transaction,aacoimbra,Python,Friday 29th of December 2023 03:15:44 PM CDT,"import ""Collectables""
import ""NonFungibleToken""
import ""MetadataViews""

transaction(packID: UInt32, cardID: UInt32) {
    // local variable for the admin reference
    let adminRef: &Collectables.Admin
    let receiverRef: &AnyResource{NonFungibleToken.CollectionPublic}

    prepare(admin: AuthAccount, user: AuthAccount) {
        // borrow a reference to the Admin resource in storage
        self.adminRef = admin.borrow<&Collectables.Admin>(from: Collectables.AdminStoragePath)!

        if user.borrow<&Collectables.Collection>(from: Collectables.NftCollectionStoragePath) == nil {
            
            let collection  <- Collectables.createEmptyCollection()

            user.save(<- collection, to: Collectables.NftCollectionStoragePath)

            user.link<&{NonFungibleToken.Receiver, NonFungibleToken.CollectionPublic, MetadataViews.ResolverCollection}>(Collectables.NftCollectionPublicPath, target: Collectables.NftCollectionStoragePath)
        }

        self.receiverRef = user.getCapability(Collectables.NftCollectionPublicPath).borrow<&{NonFungibleToken.CollectionPublic}>()!
    }

    execute {

        let packRef: &Collectables.Pack = self.adminRef.borrowPack(packID: packID)

        let mintedCard: @NonFungibleToken.NFT <-! packRef.mintNft(cardID: cardID) as! @NonFungibleToken.NFT

        self.receiverRef.deposit(token: <- mintedCard )
    }
}"
RDcDEtm8,Untitled,sissou123,HTML,Friday 29th of December 2023 03:02:15 PM CDT,"Learn To Build Beautiful HTML5 And CSS3 Websites In 1 Month
The fastest way to learn HTML5/CSS3 & how to build websites that wow. Great for designers, entrepreneurs, & beginners! 
for more:https://dz-linkk.com/m67OHE
"
9S3LFQq5,Untitled,sissou123,PHP,Friday 29th of December 2023 02:56:01 PM CDT,"Learn PHP Programming From Scratch
Over 50 hours of PHP programming goodness. 
for more:https://cuty.io/7fxP5
"
LP3TsquL,TRENDLINE_RVI_DeMarker_ADX_ACMA_AO_SYSTEM,Trip_dp,C++,Friday 29th of December 2023 02:52:39 PM CDT,"//+------------------------------------------------------------------+
//| TRENDLINE_RVI_DeMarker_ADX_ACMA_AO_SYSTEM.mq5 |
//| Copyright 2022, MetaQuotes Ltd. |
//| https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright ""Copyright 2022, MetaQuotes Ltd.""
#property link ""https://www.mql5.com""
#property version ""1.00""
//+------------------------------------------------------------------+
//| Expert initialization function |
//+------------------------------------------------------------------+
int OnInit()
  {
//--- create timer
   EventSetTimer(60);
//---
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
//--- destroy timer EventKillTimer();
  }
//+------------------------------------------------------------------+
//| Expert tick function |
//+------------------------------------------------------------------+
void OnTick()
  {
////////////////////////Trend Lines////////////////////////////////////
   long candlesUp = ChartGetInteger(0, CHART_FIRST_VISIBLE_BAR, 0);
   double pLow[];
   ArraySetAsSeries(pLow, true);
   CopyLow(_Symbol, _Period, 0, candlesUp, pLow);
   long candleLow = ArrayMinimum(pLow, 0, candlesUp);
   MqlRates pArrayUp[];
   ArraySetAsSeries(pArrayUp, true);
   long DataUp = CopyRates(_Symbol, _Period, 0, candlesUp, pArrayUp);
   ObjectDelete(_Symbol,""UpwardTrendline"");
   ObjectCreate(_Symbol, ""UpwardTrendline"", OBJ_TREND, 0, pArrayUp[candleLow].time, pArrayUp[candleLow].low, pArrayUp[0].time, pArrayUp[0].low);
   ObjectSetInteger(0, ""UpwardTrendline"", OBJPROP_COLOR, Blue);
   ObjectSetInteger(0, ""UpwardTrendline"", OBJPROP_STYLE, STYLE_SOLID);
   ObjectSetInteger(0, ""UpwardTrendline"", OBJPROP_WIDTH, 1);
   ObjectSetInteger(0, ""UpwardTrendline"", OBJPROP_RAY_RIGHT, true);
   long candlesDown = ChartGetInteger(0, CHART_FIRST_VISIBLE_BAR, 0);
   double pHighDown[];
   ArraySetAsSeries(pHighDown, true);
   CopyHigh(_Symbol, _Period, 0, candlesDown, pHighDown);
   long candleHighDown = ArrayMaximum(pHighDown, 0, candlesDown);
   MqlRates pArrayDown[];
   ArraySetAsSeries(pArrayDown, true);
   int DataDown = CopyRates(_Symbol, _Period, 0, candlesDown, pArrayDown);
   ObjectDelete(_Symbol, ""DownwardTrendline"");
   ObjectCreate(_Symbol, ""DownwardTrendline"", OBJ_TREND, 0, pArrayDown[candleHighDown].time, pArrayDown[candleHighDown].high, pArrayDown[0].time, pArrayDown[0].high);
   ObjectSetInteger(0, ""DownwardTrendline"", OBJPROP_COLOR, Blue);
   ObjectSetInteger(0, ""DownwardTrendline"", OBJPROP_STYLE, STYLE_SOLID);
   ObjectSetInteger(0, ""DownwardTrendline"", OBJPROP_WIDTH, 1);
   ObjectSetInteger(0, ""DownwardTrendline"", OBJPROP_RAY_RIGHT, true);
   long candlesSupport = ChartGetInteger(0, CHART_FIRST_VISIBLE_BAR, 0);
   double pLowSupport[];
   ArraySetAsSeries(pLowSupport, true);
   CopyLow(_Symbol, _Period, 0, candlesSupport, pLowSupport);
   long candleLowSupport = ArrayMinimum(pLowSupport, 0, candlesSupport);
   MqlRates pArraySupport[];
   ArraySetAsSeries(pArraySupport, true);
   int DataSupport = CopyRates(_Symbol, _Period, 0, candlesSupport, pArraySupport);
   ObjectDelete(_Symbol, ""supportLine"");
   ObjectCreate(_Symbol, ""supportLine"", OBJ_HLINE, 0, pArraySupport[candleLowSupport].time, pArraySupport[candleLowSupport].low, pArraySupport[0].time, pArraySupport[0].low);
   ObjectSetInteger(0, ""supportLine"", OBJPROP_COLOR, Green);
   ObjectSetInteger(0, ""supportLine"", OBJPROP_STYLE, STYLE_SOLID);
   ObjectSetInteger(0, ""supportLine"", OBJPROP_WIDTH, 3);
   ObjectSetInteger(0, ""supportLine"", OBJPROP_RAY, true);
   long candlesResistance = ChartGetInteger(0, CHART_FIRST_VISIBLE_BAR, 0);
   double pHighResistance[];
   ArraySetAsSeries(pHighResistance, true);
   CopyHigh(_Symbol, _Period, 0, candlesResistance, pHighResistance);
   long candleHighResistance = ArrayMaximum(pHighResistance, 0, candlesResistance);
   MqlRates pArrayResistance[];
   ArraySetAsSeries(pArrayResistance, true);
   long DataResistance = CopyRates(_Symbol, _Period, 0, candlesResistance, pArrayResistance);
   ObjectDelete(_Symbol, ""resistanceLine"");
   ObjectCreate(_Symbol, ""resistanceLine"", OBJ_HLINE, 0, pArrayResistance[candleHighResistance].time, pArrayResistance[candleHighResistance].high, pArrayResistance[0].time, pArrayResistance[0].high);
   ObjectSetInteger(0, ""resistanceLine"", OBJPROP_COLOR, Red);
   ObjectSetInteger(0, ""resistanceLine"", OBJPROP_STYLE, STYLE_SOLID);
   ObjectSetInteger(0, ""resistanceLine"", OBJPROP_WIDTH, 3);
   ObjectSetInteger(0, ""resistanceLine"", OBJPROP_RAY_RIGHT, true);

/////////////////////////////////////VIDYA/////////////////////////////////////////////
   MqlRates priceArrayVIDYA[];
   double vidyaArray[];
   double vidyaArray1[];
   int DataVIDYA = CopyRates(_Symbol, _Period, 0, 3, priceArrayVIDYA);
   ArraySetAsSeries(vidyaArray, true);
   ArraySetAsSeries(vidyaArray1, true);
   int vidyaDef = iVIDyA(_Symbol, _Period, 9, 12, 0, PRICE_CLOSE);
   int vidyaDef1 = iVIDyA(_Symbol, _Period, 20, 50, 0, PRICE_CLOSE);
   CopyBuffer(vidyaDef, 0, 0, 3, vidyaArray);
   CopyBuffer(vidyaDef1, 0, 0, 3, vidyaArray1);
   double currentCloseVIDYA = NormalizeDouble(priceArrayVIDYA[2].close, 6);
   double vidyaVal = NormalizeDouble(vidyaArray[0], 6);
   double vidyaVal1 = NormalizeDouble(vidyaArray1[0], 6);

///////////////////RVI Moving Average/////////////////////////////////////////////////
   MqlRates pArrayRVI_MA[];
   double maArrayRVI_MA[];
   double rviArray[];
   double rviSignalArray[];
   int DataRVI_MA = CopyRates(_Symbol, _Period, 0, 1, pArrayRVI_MA);
   ArraySetAsSeries(maArrayRVI_MA, true);
   ArraySetAsSeries(rviArray, true);
   ArraySetAsSeries(rviSignalArray, true);
   int rviDef = iRVI(_Symbol, _Period, 10);
   int maDefRVI_MA = iMA(_Symbol, _Period, 100, 0, MODE_EMA, PRICE_CLOSE);
   CopyBuffer(rviDef, 0, 0, 3, rviArray);
   CopyBuffer(rviDef, 1, 0, 3, rviSignalArray);
   CopyBuffer(maDefRVI_MA, 0, 0, 3, maArrayRVI_MA);
   double rviValue = NormalizeDouble(rviArray[0], 3);
   double rviSignalValue = NormalizeDouble(rviSignalArray[0], 3);
   double maValueRVI_MA = NormalizeDouble(maArrayRVI_MA[0], 3);
////////////////////ACELERATOR_OSCILLATOR//////////////////////////////////////
   MqlRates pArrayACMA[];
   double acArray[];
   double maArrayACMA[];
   int DataACMA = CopyRates(_Symbol,_Period, 0, 1, pArrayACMA);
   ArraySetAsSeries(acArray, true);
   ArraySetAsSeries(maArrayACMA, true);
   int acDefACMA = iAC(_Symbol, _Period);
   int maDefACMA = iMA(_Symbol, _Period, 50, 0, MODE_EMA, PRICE_CLOSE);
   CopyBuffer(acDefACMA, 0, 0, 3, acArray);
   CopyBuffer(maDefACMA,0, 0, 3, maArrayACMA);
   int acMaxArray = ArrayMaximum(acArray, 1, WHOLE_ARRAY);
   int acMinArray = ArrayMinimum(acArray, 1, WHOLE_ARRAY);
   double closingPriceACMA = pArrayACMA[0].close;
   double acValue = NormalizeDouble(acArray[0], 7);
   double acMaxValue = NormalizeDouble(acArray[acMaxArray], 7);
   double acMinValue = NormalizeDouble(acArray[acMinArray], 7);
   double maValueACMA = NormalizeDouble(maArrayACMA[0], 7);

///////////////////////AWESOME_OSCILLATOR///////////////////////////////////////////
   MqlRates pArrayAO[];
   double aoArray[];
   double maArrayAO[];
   int DataAO = CopyRates(_Symbol, _Period, 0, 1, pArrayAO);
   ArraySetAsSeries(aoArray, true);
   ArraySetAsSeries(maArrayAO, true);
   int aoDef = iAO(_Symbol, _Period);
   int maDefAO = iMA(_Symbol, _Period, 50, 0, MODE_EMA, PRICE_CLOSE);
   CopyBuffer(aoDef, 0, 0, 3, aoArray);
   CopyBuffer(maDefAO, 0, 0,3, maArrayAO);
   double closingPriceAO = pArrayAO[0].close;
   double aoValue = NormalizeDouble(aoArray[0], 7);
   double maValueAO = NormalizeDouble(maArrayAO[0], 7);

///////////////////////////DeMARKER_DIVERGENCE//////////////////////////////////////////
   double deMarkerArray[];
   MqlRates pArrayDeMarker[];
   ArraySetAsSeries(deMarkerArray, true);
   ArraySetAsSeries(pArrayDeMarker, true);
   int deMarkerDef = iDeMarker(_Symbol, _Period, 14);
   int pDataDeMarker = CopyRates(_Symbol, _Period, 0, 14, pArrayDeMarker);
   CopyBuffer(deMarkerDef, 0, 0, 14, deMarkerArray);
   double deMarkerVal = NormalizeDouble(deMarkerArray[0], 4);
   double deMarkerPrevVal = NormalizeDouble(deMarkerArray[1], 4);
   double currentHighDeMarker = NormalizeDouble(pArrayDeMarker[0].high, 6);
   double currentLowDeMarker = NormalizeDouble(pArrayDeMarker[0].low, 6);
   double prevHighDeMarker = NormalizeDouble(pArrayDeMarker[1].high, 6);
   double prevLowDeMarker = NormalizeDouble(pArrayDeMarker[1].low, 6);

/////////////////////////////////////ADX//////////////////////////////////////
//creating a variable for signal
//Create arrays for current ADX value, previous ADX value, +DI value and -DI value
   double ADXArray0[];
   double ADXArray1[];
   double PDIArray[];
   double NDIArray[];

//Identifying the ADX, positive DI, negative DI.
   int ADXDef = iADX(_Symbol, _Period, 14);

//Sort price arrays from current data
   ArraySetAsSeries(ADXArray0,true);
   ArraySetAsSeries(ADXArray1,true);
   ArraySetAsSeries(PDIArray,true);
   ArraySetAsSeries(NDIArray,true);

//Filling data according to created ADX
   CopyBuffer(ADXDef,0,0,3,ADXArray0);
   CopyBuffer(ADXDef,0,0,2,ADXArray1);
   CopyBuffer(ADXDef,1,0,3,PDIArray);
   CopyBuffer(ADXDef,2,0,3,NDIArray);

//Getting values of the current data
   double ADXValue=NormalizeDouble(ADXArray0[0], 2);
   double ADXValueLast=NormalizeDouble(ADXArray1[1], 2);
   double PDIValue=NormalizeDouble(PDIArray[0], 2);
   double NDIValue=NormalizeDouble(NDIArray[0], 2);

//////////////////////////CONDITIONS////////////////////////////////////////////
//DEFINE BUY CONDITIONS
   bool BUY_CONDITION_1 = (vidyaVal > vidyaVal1);
   bool BUY_CONDITION_2 = (acValue > acMaxValue) && (closingPriceACMA > maValueACMA);
   bool BUY_CONDITION_3 = (aoValue > 0) && (closingPriceAO > maValueAO);
   bool BUY_CONDITION_4 = (pArrayRVI_MA[0].close > maValueRVI_MA) && (rviValue > rviSignalValue);
   bool BUY_CONDITION_5 = (ADXValue > 25) && (ADXValue > ADXValueLast);
   bool BUY_CONDITION_6 = (PDIValue > NDIValue);
   bool BUY_CONDITION_7 = (currentHighDeMarker > prevHighDeMarker) && (deMarkerVal < deMarkerPrevVal);

//DEFINE SELL CONDITIONS
   bool SELL_CONDITION_1 = (vidyaVal < vidyaVal1);
   bool SELL_CONDITION_2 = (acValue < acMinValue) && (closingPriceACMA < maValueACMA);
   bool SELL_CONDITION_3 = (aoValue < 0) && (closingPriceAO < maValueAO);
   bool SELL_CONDITION_4 = (pArrayRVI_MA[0].close < maValueRVI_MA) && (rviValue < rviSignalValue);
   bool SELL_CONDITION_5 = (ADXValue > 25) && (ADXValue > ADXValueLast);
   bool SELL_CONDITION_6 = (PDIValue < NDIValue);
   bool SELL_CONDITION_7 = (currentLowDeMarker < prevLowDeMarker) && (deMarkerVal > deMarkerPrevVal);

//BUY SIGNAL

//if(BUY_CONDITION_1 == 1)
//Comment(""Current Close Value is "",currentCloseVIDYA,""\n"",
//   ""Current VIDYA (9,12) Value is ""
//   ,vidyaVal,""\n"",
//   ""Current VIDYA (20,50) Value is "",vidyaVal1);

   if(BUY_CONDITION_2)
     {
      if(BUY_CONDITION_3)
        {
         if(BUY_CONDITION_4)
           {
            if(BUY_CONDITION_5)
              {
               if(BUY_CONDITION_6)
                 {
                  if(BUY_CONDITION_7)
                    {
                     Comment(""BUY"", ""\n"",
                             ""AC Closing Price Is"", closingPriceACMA, ""\n"",
                             ""AC Value Is "", acValue, ""\n"",
                             ""AC Max Value Is "", acMaxValue, ""\n"",
                             ""AC Min Value Is "", acMinValue, ""\n"",
                             ""AC MA Value Is "", maValueACMA, ""\n"",
                             ""AO Closing Price is "", closingPriceAO, ""\n"",
                             ""AO Value Is "", aoValue, ""\n"",
                             ""AO MA Value Is "", maValueAO, ""\n"",
                             ""RVI Closing price is "", pArrayRVI_MA[0].close, ""\n"",
                             ""RVI MA Value is "", maValueRVI_MA, ""\n"",
                             ""Relative Vigor Index Is "", rviValue, ""\n"",
                             ""RVI Signal Value Is "", rviSignalValue, ""\n"",
                             ""ADX Value is "", ADXValue, ""\n"",
                             ""ADX Value Last is "", ADXValueLast, ""\n"",
                             ""+DI Value is "", PDIValue, ""\n"",
                             ""-DI Value is "", NDIValue, ""\n"",
                             ""Current High Is "", currentHighDeMarker, ""\n"",
                             ""Prev. High Value Is "", prevHighDeMarker, ""\n"",
                             ""Current DeMarker Value Is "", deMarkerVal, ""\n"",
                             ""Prev. DeMarker Value Is "", deMarkerPrevVal);
                    }
                 }
              }
           }
        }
     }
//SELL SIGNAL

//if(SELL_CONDITION_1)
//Comment(""Current Close Value is "",currentCloseVIDYA,""\n"",
//      ""Current VIDYA (9,12) Value is "",vidyaVal,""\n"",""Current VIDYA (20,50) Value is "",vidyaVal1, ""\n"");

   if(SELL_CONDITION_2)
     {
      if(SELL_CONDITION_3)
        {
         if(SELL_CONDITION_4)
           {
            if(SELL_CONDITION_5)
              {
               if(SELL_CONDITION_6)
                 {
                  if(SELL_CONDITION_7)
                    {
                     Comment(""SELL"", ""\n"",
                             ""AC Closing Price Is "", closingPriceACMA, ""\n"",
                             ""AC Value Is "", acValue, ""\n"",
                             ""AC Max Value Is "", acMaxValue, ""\n"",
                             ""AC Min Value Is "", acMinValue, ""\n"",
                             ""AC MA Value is "", maValueACMA, ""\n"",
                             ""AO Closing Price Is "", closingPriceAO, ""\n"",
                             ""AO Value Is "", aoValue, ""\n"",
                             ""AO MA Value Is "", maValueAO, ""\n"",
                             ""RVI Closing Price Is "", pArrayRVI_MA[0].close, ""\n"",
                             ""RVI MA Value Is "", maValueRVI_MA, ""\n"",
                             ""Relative Vigor Index Is "", rviValue, ""\n"",
                             ""RVI Signal Value Is "", rviSignalValue, ""\n"",
                             ""ADX Value is "", ADXValue, ""\n"",
                             ""ADX Value Last is "", ADXValueLast, ""\n"",
                             ""+DI Value is "", PDIValue, ""\n"",
                             ""-DI Value is "", NDIValue, ""\n"",
                             ""Current Low Is "", currentLowDeMarker, ""\n"",
                             ""Prev. Low Is "", prevLowDeMarker, ""\n"",
                             ""Current DeMarker Value Is "", deMarkerVal, ""\n"",
                             ""Prev. DeMarker Value Is "", deMarkerPrevVal);
                    }
                 }
              }
           }
        }
     }
  }
//+------------------------------------------------------------------+
"
5qVSzpuz,Untitled,woxd,JSON,Friday 29th of December 2023 02:49:29 PM CDT,"{""error"":""1001""}"
2NUaTzqA,zulrah fisher,LFCxx,Java,Friday 29th of December 2023 02:32:59 PM CDT,"package PowerFisher;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import net.runelite.api.ChatMessageType;
import simple.hooks.filters.SimpleSkills.Skills;
import simple.hooks.queries.SimpleItemQuery;
import simple.hooks.scripts.Category;
import simple.hooks.scripts.ScriptManifest;
import simple.hooks.simplebot.ChatMessage;
import simple.hooks.wrappers.SimpleItem;
import simple.hooks.wrappers.SimpleNpc;
import simple.robot.script.Script;

@ScriptManifest(author = ""Satan666"", name = ""Sacred Eel Fisher & Cutter"", category = Category.FISHING, description = ""Will fish and cut sacred eel's for its zulrah scales"", version = ""0.1"", servers = {""OldschoolRSPS""}, discord = ""kavinsky_crowley"")
public class Main extends Script implements MouseListener {
    private int fishingSpotId = 6488;
    private long lastFishingAttemptTime = 0;
    private final long FISHING_ATTEMPT_COOLDOWN = 20000;
    private int fishCaught = 0;
    private long startTime;
    private int startFishingXp;

    @Override
    public void onExecute() {
        this.startTime = System.currentTimeMillis();
        this.startFishingXp = this.ctx.skills.experience(Skills.FISHING);
        this.ctx.updateStatus(""Starting Sacred Eel Fisher & Cutter"");
    }

    @Override
    public void onProcess() {
        // Check for bait in inventory
        if (this.ctx.inventory.populate().filter(313).isEmpty()) {
            this.ctx.updateStatus(""Out of bait, stopping script."");
            this.ctx.stopScript();
            return;
        }

        // Main fishing logic
        if (this.ctx.inventory.populate().population() == 28) {
            manageInventory();
        } else if (System.currentTimeMillis() - lastFishingAttemptTime > FISHING_ATTEMPT_COOLDOWN) {
            fish();
        }
    }

    private void manageInventory() {
        SimpleItemQuery<SimpleItem> itemsToDrop = this.ctx.inventory.populate().filter(i -> i.getId() != 946 && i.getId() != 12934 && i.getId() != 313 && i.getId() != 307 && i.getId() != 13339);
        for (SimpleItem item : itemsToDrop) {
            item.click(""Drop"");
            this.ctx.sleep(100);
        }

        // Note: Have not added cutting method
    }

    private void fish() {
        SimpleNpc fishingSpot = (SimpleNpc) this.ctx.npcs.populate().filter(fishingSpotId).nearest().next();
        if (fishingSpot != null && fishingSpot.validateInteractable() && System.currentTimeMillis() - lastFishingAttemptTime > FISHING_ATTEMPT_COOLDOWN) {
            fishingSpot.click(""Bait"");
            lastFishingAttemptTime = System.currentTimeMillis();
            this.ctx.sleep(1000); // Adjust the sleep time as needed
        }
    }
    @Override
    public void onChatMessage(ChatMessage chatMessage) {
        if (chatMessage.getType() == ChatMessageType.SPAM) {
            String message = chatMessage.getMessage().toLowerCase();
            if (message.contains(""you catch a sacred eel"")) {
                fishCaught++;
            }
        }
    }

    @Override
    public void paint(Graphics graphics) {
        graphics.setColor(Color.BLACK);
        graphics.drawString(""Time Running: "" + formatTime(System.currentTimeMillis() - startTime), 20, 20);
        graphics.drawString(""Fish Caught: "" + fishCaught, 20, 35);
        graphics.drawString(""XP Gained: "" + (this.ctx.skills.experience(Skills.FISHING) - startFishingXp), 20, 50);
    }

    private String formatTime(long ms) {
        int seconds = (int) (ms / 1000) % 60;
        int minutes = (int) ((ms / (1000 * 60)) % 60);
        int hours = (int) ((ms / (1000 * 60 * 60)) % 24);
        return String.format(""%02d:%02d:%02d"", hours, minutes, seconds);
    }

    // MouseListener methods
    @Override
    public void mouseClicked(MouseEvent e) {}

    @Override
    public void mousePressed(MouseEvent e) {}

    @Override
    public void mouseReleased(MouseEvent e) {}

    @Override
    public void mouseEntered(MouseEvent e) {}

    @Override
    public void mouseExited(MouseEvent e) {}

    @Override
    public void onTerminate() {
        this.ctx.updateStatus(""Stopping Sacred Eel Fisher"");
    }
    }
"
NFMGP5Cy,Immich Portainer Stack File,gadgeteerza,YAML,Friday 29th of December 2023 01:41:54 PM CDT,"version: ""3.8""

#
# WARNING: Make sure to use the docker-compose.yml of the current release:
#
# https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml
#
# Note the variables are left as-is, you need to enter that info in the stcks.env file
# which is then pulled in when the stack is created

services:
  immich-server:
    container_name: immich_server
    hostname: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    command: [ ""start.sh"", ""immich"" ]
    networks:
      - mysql-net
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
      - /var/lib/docker/volumes/piwigogallery/_data/upload:/mnt/media/piwigo:ro
    env_file:
      - stack.env
    ports:
      - 2283:3001
    depends_on:
      - redis
      - database
    restart: always
    labels:
      com.centurylinklabs.watchtower.enable: ""true""

  immich-microservices:
    container_name: immich_microservices
    hostname: immich_microservices
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    # extends:
    #   file: hwaccel.yml
    #   service: hwaccel
    command: [ ""start.sh"", ""microservices"" ]
    networks:
      - mysql-net
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
      - /var/lib/docker/volumes/piwigogallery/_data/upload:/mnt/media/piwigo:ro
    env_file:
      - stack.env
    depends_on:
      - redis
      - database
    restart: always
    labels:
      # Enable Watchtower to notify about updated image
      com.centurylinklabs.watchtower.enable: ""true""

  immich-machine-learning:
    container_name: immich_machine_learning
    hostname: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    networks:
      - mysql-net
    volumes:
      - model-cache:/cache
    env_file:
      - stack.env
    restart: always
    labels:
      # Enables Watchtower to notify about updated image
      com.centurylinklabs.watchtower.enable: ""true""

  redis:
    container_name: immich_redis
    hostname: immich_redis
    image: redis:6.2-alpine@sha256:b6124ab2e45cc332e16398022a411d7e37181f21ff7874835e0180f56a09e82a
    networks:
      - mysql-net
    restart: always
    labels:
      # Enables Watchtower to notify about updated image
      com.centurylinklabs.watchtower.enable: ""true""

  database:
    container_name: immich_postgres
    hostname: immich_postgres
    image: tensorchord/pgvecto-rs:pg14-v0.1.11@sha256:0335a1a22f8c5dd1b697f14f079934f5152eaaa216c09b61e293be285491f8ee
    env_file:
      - stack.env
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
    networks:
      - mysql-net
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always
    labels:
      # Enables Watchtower to notify about updated image
      com.centurylinklabs.watchtower.enable: ""true""

volumes:
  pgdata:
  model-cache:

networks:
  mysql-net:
    # Joins existing network of this name
    external: true
    # Specify name so that it does not append stack name
    name: mysql-net
"
Bi3JCDtS,Driving Empire Script 2024,Artani,Lua,Friday 29th of December 2023 01:31:19 PM CDT,"*NEW* KEYLESS WORKING DRIVING EMPIRE AUTO FARM SCRIPT HACK PASTEBIN 2024

https://artanisrbx.com/driving-empire-working-auto-farm-script-pastebin-2024-no-key/
COPY LINK INTO BROWSER FOR SCRIPT!
TUTORIAL
https://www.youtube.com/watch?v=Nt1XKaWZh1w"
p1uBqtd0,skrypt.vbs,SuperSilverainox,VBScript,Friday 29th of December 2023 01:25:22 PM CDT,"' Specify the source and target paths and the file format
Dim sourcePath, targetPath, fileFormat
sourcePath = ""C:\source\path""
targetPath = ""D:\target\path""
fileFormat = ""*.png""

' Create FileSystemObject
Dim fso
Set fso = CreateObject(""Scripting.FileSystemObject"")

' Ensure target directory exists
If Not fso.FolderExists(targetPath) Then
    fso.CreateFolder(targetPath)
End If

' Function to recursively search and process files
Sub ProcessFolder(folder)
    Dim subFolder
    For Each subFolder In folder.SubFolders
        ProcessFolder subFolder
    Next

    Dim file, fileName, targetFile
    For Each file In folder.Files
        If LCase(fso.GetExtensionName(file.Name)) = ""png"" Then
            counter = counter + 1
            fileName = counter & "".png""
            targetFile = fso.BuildPath(targetPath, fileName)
            file.Move targetFile
        End If
    Next
End Sub

' Counter for file renaming
Dim counter
counter = 0

' Start processing
Dim rootFolder
Set rootFolder = fso.GetFolder(sourcePath)
ProcessFolder rootFolder

WScript.Echo ""Files transferred and renamed.""
"
UZJ4JtA2,Untitled,sissou123,C++,Friday 29th of December 2023 01:12:55 PM CDT,"C++: From Beginner to Expert
Designed for people who don't have any knowledge about the programming and want to program in C++
for more:https://cuty.io/VQWIdHIFo"
BhVTfbaq,Untitled,sissou123,JavaScript,Friday 29th of December 2023 01:04:41 PM CDT,"The Modern Javascript Bootcamp Course
The most up-to-date JS resource online! Master Javascript by building a beautiful portfolio of projects!
for more:https://cuty.io/x3ahWL5"
tHZ4wfcf,Untitled,sissou123,JavaScript,Friday 29th of December 2023 12:58:53 PM CDT,"JavaScript - The Complete Guide 2023 (Beginner + Advanced)
Modern JavaScript from the beginning - all the way up to JS expert level! THE must-have JavaScript resource in 2023.
for more:https://cuty.io/igGUlp"
0PFYBYHe,Untitled,sissou123,PHP,Friday 29th of December 2023 12:50:02 PM CDT,"The Complete 2023 PHP Full Stack Web Developer Bootcamp
Learn to build websites with HTML , CSS , JAVASCRIPT , Bootstrap , PHP , MySQL , WordPress , OOP & more! 
for more:https://cuty.io/Pv3t0Dtry
"
zgzpmeuh,Untitled,lucks232,Python,Friday 29th of December 2023 12:32:45 PM CDT,"# creación de la clase polinomio
class Polinomio:
    def __init__(self, coeficientes):
        self.coeficientes = coeficientes

    # constructor del polinomio
    def __str__(self):
        # podríamos haber definido el polinomio como una cadena vacía también
        terminos = []

        # al usar enumerate podemos asignar 2 variables al bucle for (i -> posición), (coef -> el coeficiente) en lugar de usar una variable auxiliar de contador
        for i, coef in enumerate(self.coeficientes):
            if coef == 0:
                # al contrario de break, continue, nos hace saltar directamente a la siguiente iteración del for
                continue
            potencia = (len(self.coeficientes)-1) - i 
            # condiciones
            if potencia == 0:
                terminos.append(f""{coef}"")
            elif potencia == 1:
                if coef == 1:
                    terminos.append(""x"")
                elif coef == -1:
                    terminos.append(""-x"")
                else:
                    terminos.append(f""{coef}x"")
            else:
                if coef == 1:
                    terminos.append(f""x^{potencia}"")
                elif coef == -1:
                    terminos.append(f""-x^{potencia}"")
                else:
                    terminos.append(f""{coef}x^{potencia}"")
        #unimos terminos de la lista con + y reemplazamos ""+ -"" por ""- "" en caso de que los coeficientes sean negativos
        polinomio = ' + '.join(terminos).replace(""+ -"",""- "")

        if not terminos:
            return ""0""
        
        return polinomio
    
    def evaluar(self, x):
        coeficientes = self.coeficientes  # se obtienen los coeficientes del polinomio
        imagen = 0

        # se recorre la lista de coeficientes para calcular el valor del polinomio
        for i, coef in enumerate(coeficientes):
            # se calcula el término correspondiente y se suma a la imagen
            if (len(coeficientes)-1-i) != 0:
                imagen += pow(x, len(coeficientes)-1-i) * coef
            else:
                # cuando es el término independiente (potencia 0), se suma directamente el coeficiente
                imagen += coef
        return imagen
    
    def mul_real(self, x):
        coeficientes_copia = []
        # copiamos el polinomio original a una copia para no modificarlo
        for coef in self.coeficientes:
            coeficientes_copia.append(coef)

        # se multiplica cada coeficiente por el número real 'x'
        for i, coef in enumerate(coeficientes_copia):
            coeficientes_copia[i] = coef*x  # actualiza el coeficiente multiplicándolo por x
        
        return Polinomio(coeficientes_copia)
        
    def pol_opuesto(self):
        coeficientes_copia = []
        # hacemos la copia
        for coef in self.coeficientes:
            coeficientes_copia.append(coef)

        # se cambia el signo de cada coeficiente para obtener el polinomio opuesto
        for i, coef in enumerate(coeficientes_copia):
            coeficientes_copia[i] = coef*(-1)  # cambia el signo del coeficiente
        
        return Polinomio(coeficientes_copia)  # devuelve el polinomio opuesto
        
    def derivada(self):
        # crear una copia de la lista de coeficientes para manipularla
        coeficientes_copia = []
        for coef in self.coeficientes:
            coeficientes_copia.append(coef)
        
        # eliminar el término constante ya que su derivada es 0
        coeficientes_copia.pop()
        
        # lista para almacenar los coeficientes derivados
        coeficientes_derivados = []

        # calcular la derivada de cada término del polinomio
        for i, coef in enumerate(coeficientes_copia):
            grado = len(coeficientes_copia)-i  # determinar el grado del término
            coef = coef*grado
            coeficientes_derivados.append(coef)
        
        # devolver un nuevo polinomio con los coeficientes derivados
        return Polinomio(coeficientes_derivados)
    
    def suma_pol(self, other):
        # invertir las listas de coeficientes para trabajar de menor a mayor grado
        polinomio1 = list(reversed(self.coeficientes))
        polinomio2 = list(reversed(other.coeficientes))

        max_longitud = max(len(polinomio1), len(polinomio2))
        polinomio1_l = polinomio1 + (max_longitud - len(polinomio1))*[0]
        polinomio2_l = polinomio2 + (max_longitud - len(polinomio2))*[0]

        # sumar los coeficientes correspondientes de los dos polinomios
        coeficientes_suma = []
        for i in range(max_longitud):
            coeficientes_suma.append(polinomio1_l[i] + polinomio2_l[i])

        # invertir de nuevo para obtener el orden correcto de coeficientes
        coeficientes_suma = list(reversed(coeficientes_suma))
        
        return Polinomio(coeficientes_suma)

    def resta_pol(self, other):
        polinomio1 = list(reversed(self.coeficientes))
        polinomio2 = list(reversed(other.coeficientes))

        max_longitud = max(len(polinomio1), len(polinomio2))
        polinomio1_l = polinomio1 + (max_longitud - len(polinomio1))*[0]
        polinomio2_l = polinomio2 + (max_longitud - len(polinomio2))*[0]

        # restar los coeficientes correspondientes
        coeficientes_resta = []
        for i in range(max_longitud):
            coeficientes_resta.append(polinomio1_l[i] - polinomio2_l[i])

        coeficientes_resta = list(reversed(coeficientes_resta))
        
        return Polinomio(coeficientes_resta)
    
    def mul_pol(self, other):
        polinomio1 = list(reversed(self.coeficientes))
        polinomio2 = list(reversed(other.coeficientes))

        # se inicializa el resultado con ceros para almacenar los coeficientes resultantes
        resultado = [0] * (len(polinomio1) + len(polinomio2) - 1)
        for i, coef1 in enumerate(polinomio1):
            for j, coef2 in enumerate(polinomio2):
                resultado[i+j] += coef1 * coef2
        
        # eliminar ceros al final que no representan términos
        while len(resultado) > 1 and resultado[-1] == 0:
            resultado.pop()
        
        # devolver nuevo polinomio con coeficientes invertidos a su orden original
        return Polinomio(list(reversed(resultado)))

    def div_pol(self, other):
        polinomio1 = list(reversed(self.coeficientes))
        polinomio2 = list(reversed(other.coeficientes))

        # determinar grados de los polinomios para guiar la división
        grado_dividendo = len(polinomio1) - 1
        grado_divisor = len(polinomio2) - 1

        # inicializar cociente con ceros
        cociente = [0] * max(1, grado_dividendo - grado_divisor + 1)
        while grado_dividendo >= grado_divisor and grado_dividendo >= 0:
            # calcular factor del término actual del cociente
            factor = polinomio1[grado_dividendo] / polinomio2[grado_divisor]
            cociente[grado_dividendo - grado_divisor] = factor

            # restar el múltiplo del divisor del dividendo
            for i in range(len(polinomio2)):
                if grado_dividendo - i < 0:
                    break
                polinomio1[grado_dividendo - i] -= polinomio2[grado_divisor - i] * factor

            # ajustar grado del dividendo después de la substracción
            while grado_dividendo >= 0 and (grado_dividendo >= len(polinomio1) or polinomio1[grado_dividendo] == 0):
                grado_dividendo -= 1

        # recolectar y ajustar los términos restantes como el resto
        resto = list(reversed(polinomio1[:max(0, grado_dividendo + 1)]))

        # convertimos los coeficientes a enteros si son enteros exactos para limpieza de n.0
        for i, coef in enumerate(resto):
            if resto[i] % 1 == 0:
                resto[i] = int(resto[i])
        
        for i, coef in enumerate(cociente):
            if coef % 1 == 0:
                cociente[i] = int(cociente[i])

        # se eliminan ceros innecesarios del cociente
        while len(cociente) > 1 and cociente[-1] == 0:
            cociente.pop()

        return Polinomio(list(reversed(cociente))), Polinomio(resto)

    # Los método de aquí en adelante han sido estructurados para ser usados dentro del método factorizar()
    # El razonamiento que se ha hecho para poder por lo menos factorizar polinomios con soluciones racionales ha sido
    # 1) MCD -> Simplificamos -> Ruffini -> Iteramos
    def mcd(self):
        # definición de la función euclides para calcular el mcd de dos números
        def euclides(a, b):
            # bucle mientras b sea diferente de cero
            while b != 0:
                # actualizamos los valores de a y b usando el algoritmo de euclides
                a, b = b, a % b
            return a
        
        # inicializamos mcd con el primer coeficiente del polinomio
        mcd = self.coeficientes[0]
        # iteramos sobre los coeficientes del polinomio
        for coef in self.coeficientes[1:]:
            # actualizamos el mcd con el mcd del coeficiente actual y el mcd acumulado
            mcd = euclides(mcd, coef)
        return mcd
    
    def simplificar(self):
        # obtenemos el mcd de los coeficientes del polinomio
        mcd = self.mcd()

        # solo simplificamos si el mcd es diferente de 1
        if mcd != 1:
            nuevos_coeficientes = [] # lista para almacenar los nuevos coeficientes
            # dividimos cada coeficiente por el mcd y lo añadimos a la lista de nuevos coeficientes
            for coef in self.coeficientes:
                nuevos_coeficientes.append(coef // mcd)
            # actualizamos los coeficientes del polinomio con los nuevos coeficientes simplificados
            self.coeficientes = nuevos_coeficientes
        
    def raices_racionales(self):
        # inicialización de la lista para almacenar posibles numeradores
        numerador = []
        # bucle para encontrar todos los enteros entre el negativo y positivo del último coeficiente
        for i in range(-abs(self.coeficientes[-1]), abs(self.coeficientes[-1]) + 1):
            if i != 0:  # excluimos el cero ya que no es un candidato válido para el numerador
                numerador.append(i)
        
        # inicialización de la lista para almacenar posibles denominadores
        denominador = []
        # bucle para encontrar todos los divisores del primer coeficiente
        for i in range(1, abs(self.coeficientes[0]) + 1):
            if self.coeficientes[0] % i == 0:  # si i es un divisor de coeficientes[0]
                denominador.append(i)
        
        # utilizamos un conjunto para evitar repetir candidatos
        candidatos = set()
        # doble bucle para dividir todos los numeradores posibles entre los denominadores
        for numerador_valor in numerador:
            for denominador_valor in denominador:
                candidato = numerador_valor // denominador_valor
                candidatos.add(candidato)  # añadimos el candidato al conjunto de candidatos
        
        # devolvemos el conjunto de candidatos posibles
        return candidatos
    
    def ruffini(self, raiz):
        # inicialización de la lista para almacenar los coeficientes resultantes
        resultado = []
        # el primer coeficiente siempre es parte del resultado
        resultado.append(self.coeficientes[0])
        # aplicamos la regla de ruffini para encontrar el resto de coeficientes
        for coef in self.coeficientes[1:]:
            # multiplicamos el último elemento de resultado por la raíz y sumamos el coeficiente actual
            resultado.append(resultado[-1] * raiz + coef)
        
        # devolvemos dos cosas: el polinomio resultante y el residuo
        # el polinomio resultante es todos menos el último término de resultado
        # el último término de resultado es el residuo
        return Polinomio(resultado[:-1]), resultado[-1]
    
    def factorizar(self):
        # copia de los coeficientes para evitar modificar el polinomio original
        coeficientes_copia = []
        for coef in self.coeficientes:
            coeficientes_copia.append(coef)

        # creación de una nueva variable de clase Polinomio con la copia de los coeficientes
        coeficientes_copia = Polinomio(coeficientes_copia)

        # simplificación del polinomio si es necesario
        coeficientes_copia.simplificar()

        # inicializamos la lista para almacenar los factores del polinomio
        factores = []
        # bucle para encontrar todos los factores
        while len(coeficientes_copia.coeficientes) > 1:
            # búsqueda de raíces racionales del polinomio
            raices = coeficientes_copia.raices_racionales()
            raiz_encontrada = None
            # iteramos a través de las raíces potenciales
            for r in raices:
                # uso del método de ruffini para reducir el polinomio por una raíz potencial
                polinomio_reducido, resto = coeficientes_copia.ruffini(r)
                if resto == 0:  # si el resto es 0, r es una raíz del polinomio
                    raiz_encontrada = r
                    # actualizamos los coeficientes del polinomio para reflejar la división
                    coeficientes_copia.coeficientes = polinomio_reducido.coeficientes
                    # registro del factor encontrado
                    factores.append(f""x - {r}"")
                    break  # salimos del bucle ya que encontramos una raíz válida
            if raiz_encontrada is None:
                break  # si no se encuentran más raíces racionales, terminamos el bucle

        # devolución de la lista de factores encontrados
        return factores"
hJ0hY6dP,Untitled,lucks232,Python,Friday 29th of December 2023 12:32:11 PM CDT,"from polinomio_clase import Polinomio

def crear_polinomio():
    coeficientes = []  # se inicia una lista vacía para almacenar los coeficientes
    grado = int(input(""¿Cuál es el grado del polinomio?: ""))

    # se recorre el rango de grados del polinomio de forma descendente
    for i in reversed(range(grado+1)):
        if i != 0:  # si el término no es el constante
            coef = int(input(f""Escriba el coeficiente del término de x con exponente {i}: ""))
            coeficientes.append(coef)  # se agrega el coeficiente a la lista
        else:  # si es el término constante
            coef = int(input(f""Escriba el coeficiente del término constante (sin x): ""))
            coeficientes.append(coef)  # se agrega el término constante a la lista

    polinomio = Polinomio(coeficientes)  # se crea una instancia del polinomio

    print(f""\nPolinomio creado:\n\n{polinomio}\n"")
    return polinomio

def listar_polinomios():
    polinomios = array_de_polinomios()

    print(""            Lista de polinomios:"")
    print(""═══════════════════════════════════════════"")
    
    for i, pol in enumerate(polinomios):
        print(f""{i+1}) {pol}"")

def eliminar_polinomio():
    polinomios = array_de_polinomios()

    print(""¿Qué polinomio quieres eliminar de la lista? (1,2,3,4...)"")
    pol_eliminar = int(input())

    polinomios.pop(pol_eliminar-1)
    with open('polinomios.txt', 'w', encoding='utf-8') as file:
        for pols in polinomios:
            for coef in pols.coeficientes:
                file.write(f""{coef} "")
            file.write(""\n"")

def array_de_polinomios():
    polinomios = []
    
    with open('polinomios.txt', 'r', encoding='utf-8') as file: # leemos el archivo
        for linea in file:
            coeficientes = []
            for num in linea.split():
                coeficientes.append(int(num))
            polinomios.append(Polinomio(coeficientes))
                
    return polinomios
    
# menu
def menu_principal():
    while True:
        print(""╔═════════════════════════════════╗"")
        print(""║                                 ║"")
        print(""║      1. Crear un polinomio      ║"")
        print(""║      2. Listar polinomios       ║"")
        print(""║      3. Eliminar un polinomio   ║"")
        print(""║      4. Operar con polinomios   ║"")
        print(""║      5. Salir                   ║"")
        print(""║                                 ║"")
        print(""║             Hecho por L. García ║"")
        print(""╚═════════════════════════════════╝"")

        opcion = int(input(""Escoge una opción: ""))

        if opcion == 1:
            polinomio = crear_polinomio()
            while True: #bucle infinito para añadir robustez en caso de mal input
                respuesta = input(""¿Quieres guardar este polinomio? (y/n): "")
                if respuesta.lower() == 'y' or respuesta.lower() == 'yes': 
                    with open('polinomios.txt', 'a', encoding='utf-8') as file:
                        for i, coef in enumerate(polinomio.coeficientes):
                            file.write(f""{coef} "")
                        file.write(""\n"")
                        break

                elif respuesta.lower() == 'n' or respuesta.lower() == 'no':
                    break
                else:
                    print(""Respuesta inválida"")

        elif opcion == 2:
            print('\n')
            listar_polinomios()
            print(""\nEsta es la lista de polinomios hasta ahora."")
            while True: # bucle infinito para añadir robustez en el input
                print(""m: volver al menú principal         x: salir"")
                respuesta = input()
                if respuesta.lower() == 'm':
                    menu_principal()
                else:
                    break
                break
            break                
        
        elif opcion == 3:
            print('\n')

            listar_polinomios()
            eliminar_polinomio()

            print(""\nPolinomios eliminado de la lista exitosamente."")

            while True:
                print(""\nm: volver al menú principal         x: salir"")
                respuesta = input()
                if respuesta.lower() == 'm':
                    menu_principal()
                else:
                    break
                break
            break

        elif opcion == 4:
            print(""\n               Lista de operaciones:"")
            print(""══════════════════════════════════════════════"")
            print(""1) Evaluar un polinomio en un punto dado"")
            print(""2) Multiplicar un polinomio por un número real"")
            print(""3) Obtención del polinomio opuesto"")
            print(""4) Calcular la derivada de un polinomio"")
            print(""5) Sumar polinomios"")
            print(""6) Restar polinomios"")
            print(""7) Multiplicar polinomios"")
            print(""8) Dividir polinomios"")
            print(""9) Factorizar un polinomio\n"")
            
            print(""¿Qué operación quieres realizar? (1,2,3...):"")
            respuesta_op = int(input())

            if respuesta_op == 1: # evaluar polinomio
                polinomios = array_de_polinomios()

                listar_polinomios()

                print(""\n¿Qué polinomio deseas evaluar de la lista? (1,2,3...): "")
                input_pol = int(input())

                print(""\nEscoja un valor de x sobre el cual quiere evaluar el polinomio seleccionado:"")
                input_valor = float(input())
                
                if input_valor % 1 == 0:
                    input_valor = int(input_valor)

                pol = polinomios[input_pol-1]
                valor = pol.evaluar(input_valor)
                
                print(f""\n{pol} evaluado en {input_valor} es {valor}"")

                while True: # bucle infinito para añadir robustez en el input
                    print(""\nm: volver al menú principal         x: salir"")
                    respuesta = input()
                    if respuesta.lower() == 'm':
                        menu_principal()
                    else:
                        break                    
                break
            
            if respuesta_op == 2: # multiplicar polinomio por número real
                polinomios = array_de_polinomios()

                listar_polinomios()

                print(""\n¿Con qué polinomio deseas operar de la lista? (1,2,3...): "")
                input_pol = int(input())

                print(""\nEscoja un valor real por el cual quiere multiplicar el polinomio seleccionado:"")
                input_valor = float(input())

                pol = polinomios[input_pol-1]

                if input_valor % 1 == 0:
                    input_valor = int(input_valor)

                mul = pol.mul_real(input_valor)

                print(f""\nEl polinomio resultante de multiplicar {pol} por {input_valor} es {mul}"")

                while True: # bucle infinito para añadir robustez en el input
                    print(""\nm: volver al menú principal         x: salir"")
                    respuesta = input()
                    if respuesta.lower() == 'm':
                        menu_principal()
                    else:
                        break                    
                break
            
            if respuesta_op == 3: # obtener el polinomio opuesto
                polinomios = array_de_polinomios()

                listar_polinomios()

                print(""\n¿De qué polinomio deseas obtener su opuesto en la lista? (1,2,3...): "")
                input_pol = int(input())

                pol = polinomios[input_pol-1]
                pol_opuesto = pol.pol_opuesto()

                print(f""\nEl polinomio opuesto a {pol} es {pol_opuesto}"")

                while True: # bucle infinito para añadir robustez en el input
                    print(""\nm: volver al menú principal         x: salir"")
                    respuesta = input()
                    if respuesta.lower() == 'm':
                        menu_principal()
                    else:
                        break                    
                break

            if respuesta_op == 4: # calcular la derivada de un polinomio
                polinomios = array_de_polinomios()

                listar_polinomios()

                print(""\n¿Qué polinomio deseas derivar de la lista? (1,2,3...): "")
                input_pol = int(input())

                polinomio = polinomios[input_pol-1]
            
                pol_derivada = polinomio.derivada()

                print(f""\nLa derivada de {polinomio} es {pol_derivada}"")

                while True: # bucle infinito para añadir robustez en el input
                    print(""\nm: volver al menú principal         x: salir"")
                    respuesta = input()
                    if respuesta.lower() == 'm':
                        menu_principal()
                    else:
                        break                    
                break

            if respuesta_op == 5: # sumar polinomios
                polinomios = array_de_polinomios()

                listar_polinomios()

                print(""\nElige el primer sumando (1,2,3...):"")
                input_pol1 = int(input())
                print(""Elige el segundo sumando (1,2,3...):"")
                input_pol2 = int(input())

                polinomio1 = polinomios[input_pol1-1]
                polinomio2 = polinomios[input_pol2-1]

                value = polinomio1.suma_pol(polinomio2)

                print(f""\nLa suma entre ambos polinomios es {value}"")

                while True: # bucle infinito para añadir robustez en el input
                    print(""\nm: volver al menú principal         x: salir"")
                    respuesta = input()
                    if respuesta.lower() == 'm':
                        menu_principal()
                    else:
                        break                    
                break

            if respuesta_op == 6: # restar polinomios
                polinomios = array_de_polinomios()

                listar_polinomios()

                print(""\nElige el primer término de la resta (1,2,3...):"")
                input_pol1 = int(input())
                print(""Elige el segundo término de la resta (1,2,3...):"")
                input_pol2 = int(input())

                polinomio1 = polinomios[input_pol1-1]
                polinomio2 = polinomios[input_pol2-1]

                value = polinomio1.resta_pol(polinomio2)

                print(f""\nLa resta entre ambos polinomios es {value}"")

                while True: # bucle infinito para añadir robustez en el input
                    print(""\nm: volver al menú principal         x: salir"")
                    respuesta = input()
                    if respuesta.lower() == 'm':
                        menu_principal()
                    else:
                        break                    
                break
            
            if respuesta_op == 7: # multiplicar polinomios
                polinomios = array_de_polinomios()

                listar_polinomios()

                print(""\nElige el primer término de la multiplicación (1,2,3...):"")
                input_pol1 = int(input())
                print(""Elige el segundo término de la multiplicación (1,2,3...):"")
                input_pol2 = int(input())

                polinomio1 = polinomios[input_pol1-1]
                polinomio2 = polinomios[input_pol2-1]

                value = polinomio1.mul_pol(polinomio2)

                print(f""\nLa multiplicación entre ambos polinomios es {value}"")

                while True: # bucle infinito para añadir robustez en el input
                    print(""\nm: volver al menú principal         x: salir"")
                    respuesta = input()
                    if respuesta.lower() == 'm':
                        menu_principal()
                    else:
                        break                    
                break
            
            if respuesta_op == 8: # dividir polinomios
                polinomios = array_de_polinomios()

                listar_polinomios()

                print(""\nElige el dividendo de la división (1,2,3...):"")
                input_pol1 = int(input())
                print(""Elige el divisor de la división (1,2,3...):"")
                input_pol2 = int(input())

                polinomio1 = polinomios[input_pol1-1]
                polinomio2 = polinomios[input_pol2-1]

                value = polinomio1.div_pol(polinomio2)

                print(f""\nLa división entre ambos polinomios da como cociente {value[0]} y como resto {value[1]}"")

                while True: # bucle infinito para añadir robustez en el input
                    print(""\nm: volver al menú principal         x: salir"")
                    respuesta = input()
                    if respuesta.lower() == 'm':
                        menu_principal()
                    else:
                        break                    
                break
            
            if respuesta_op == 9: # factorizar polinomios
                polinomios = array_de_polinomios()

                listar_polinomios()

                print(""\n¿Qué polinomio deseas factorizar de la lista? (1,2,3...):"")
                input_pol = int(input())

                polinomio = polinomios[input_pol-1]

                value = polinomio.factorizar()

                print(f""\nAl factorizar {polinomio} obtenemos como raices {value}"")


        elif opcion == 5:
            break


menu_principal()"
LZ341WUF,Untitled,Josif_tepe,C++,Friday 29th of December 2023 12:00:03 PM CDT,"#include <iostream>
using namespace std;
int main() {
    int a, b, k;
    cin >> a >> b >> k;
    
    int zbir = 0;
    for(int n = a; n <= b; n += 1) {
        int broj_na_deliteli_na_n = 0;
        for(int i = 1; i <= n; i += 1) {
            if(n % i == 0) {
                broj_na_deliteli_na_n += 1;
            }
        }
        int ok = 1;
        for(int i = n - 1; i >= n - k; i -= 1) {
            if(i >= 1) {
                int deliteli_na_i = 0;
                for(int j = 1; j <= i; j += 1) {
                    if(i % j == 0) {
                        deliteli_na_i += 1;
                    }
                }
                if(broj_na_deliteli_na_n <= deliteli_na_i) {
                    ok = 0;
                }
            }
            if(ok == 1) {
                zbir += n;
            }
        }
        
    }
    cout << zbir << endl;
    return 0;
}
"
hX1MbaYk,Untitled,Josif_tepe,C++,Friday 29th of December 2023 11:49:43 AM CDT,"#include <iostream>
using namespace std;
int main() {
    int n = 28;
    int k = 4;
    int broj_na_deliteli_na_n = 0;
    for(int i = 1; i <= n; i += 1) {
        if(n % i == 0) {
            broj_na_deliteli_na_n += 1;
        }
    }
    int ok = 1;
    for(int i = n - 1; i >= n - k; i -= 1) {
        
        int deliteli_na_i = 0;
        for(int j = 1; j <= i; j += 1) {
            if(i % j == 0) {
                deliteli_na_i += 1;
            }
        }
        if(broj_na_deliteli_na_n <= deliteli_na_i) {
            ok = 0;
        }
    }
    if(ok == 1) {
        cout << ""DA"" << endl;
    }
    else {
        cout << ""NE"" << endl;
    }
    return 0;
}
"
VJGDDgGw,Untitled,sissou123,Python,Friday 29th of December 2023 11:41:13 AM CDT,"Python Application Developer
Build web applications using the Python programming language and the Django framework.
for more:https://dz-linkk.com/ZSoHs"
jiX2pCjc,Untitled,ahmedzero11,HTML,Friday 29th of December 2023 11:37:52 AM CDT,"<head>
	<style>
		#target_website {
			position:relative;
			width:128px;
			height:128px;
			opacity:0.00001;
			z-index:2;
			}
		#decoy_website {
			position:absolute;
			width:300px;
			height:400px;
			z-index:1;
			}
	</style>
</head>
...
<body>
	<div id=""decoy_website"">
	...decoy web content here...
	</div>
	<iframe id=""target_website"" src=""https://fk3ulag6srkz4sstwu5nmnak0b62uxim.oastify.com"">
	</iframe>
</body>"
xfjks86m,Untitled,Josif_tepe,C++,Friday 29th of December 2023 11:34:14 AM CDT,"#include <iostream>
using namespace std;
int main() {
    int n;
    cin >> n;
    
    for(int i = 1; i <= n; i++) {
        if(n % i == 0) {
            cout << i << "" "";
        }
    }
    return 0;
}
"
jgnEWic7,Untitled,sissou123,PHP,Friday 29th of December 2023 11:33:24 AM CDT,"Complete Modern PHP Developer Course in 2023
The modern PHP course with a project, challenges and theory. Includes SQL and MVC Framework. Get started with PHP 8!
for more:https://cuty.io/Ydlyn9y2e "
