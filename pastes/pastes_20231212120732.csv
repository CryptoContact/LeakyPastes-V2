id,title,username,language,date,content
hW0VnFFk,youlikehits,HendarOfficial,PHP,Tuesday 12th of December 2023 06:00:45 AM CDT,"Link: https://pastebin.com/917PVMrg 
Pass: premium30 "
39F1JSCq,data780,TestGuy1,JSON,Tuesday 12th of December 2023 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '7d14bec65769b7e079b150e628fa628a2bc245b3e9552b45b06919722ee6a5b3a411ed255b58e54ccb1e01dd154ca296534a26f5e806905180e46d4fdf9f5e3d3619f46ecf2d97e8e1a1d6bc7e93a540638a6b127bdd632ae2340cc2c852529e20f8dafc4d7ffe4edf7dcdec302fb2bdf561bacbc71d8d244578a575e2850452',
  otherdata: [
    '95c6ae7b21e8605a5da0e1d666074dc1',
    '17f586933f9bd677dd5042d831d6ebf8',
    '150bc71de9f474ba12b93923922a6e89',
    '457ce4fb812a37637a85aae5d5269a3b',
    'ae9a6b0d44d37bfb8fb46b8ebb1c54be',
    '9651d0e8fe5a1407b83395bbc75df4e7',
    'af20bf8ca405de6ee5cbf32ae9be7eed',
    '3f4a77c543b3aca8e9d4e8e296651dc4'
  ]
}"
917PVMrg,youlikehitspass,HendarOfficial,PHP,Tuesday 12th of December 2023 05:57:27 AM CDT,premium130 
S2LeXzEF,Untitled,DMxMWI-N3wbi3,JavaScript,Tuesday 12th of December 2023 05:53:28 AM CDT,"const axios = require(""axios"");
const request = require(""request"");
const fs = require(""fs"");

module.exports.config = {
  name: ""codm"",
  version: ""1"",
  hasPermssion: 0,
  credits: ""Eugene Aguilar"",
  description: ""Call of duty highlights video"",
  commandCategory: ""no prefix"",
  usages: ""..."",
  cooldowns: 6,
};
const lugmok = ""https://php-api.diciper09.repl.co"";
module.exports.handleEvent = async function ({ api, event }) {
  if (!(event.body.indexOf(""codm"") === 0 || event.body.indexOf(""Codm"") === 0))
    return;

  api.sendMessage(
    `‚è±Ô∏è | ùôëùôûùôôùôöùô§ ùôûùô® ùô®ùôöùô£ùôôùôûùô£ùôú ùô•ùô°ùôöùôñùô®ùôö ùô¨ùôñùôûùô©...`,
    event.threadID,
    event.messageID,
  );
  axios
    .get(`${lugmok}/codm/?apikey=omsimnida`)
    .then((res) => {
      const { url } = res.data;
      let ext = url.split(""."").pop();
      let callback = function () {
        api.sendMessage(
          {
            body: `Call Of Duty Mobile`,
            attachment: fs.createReadStream(__dirname + `/cache/codm.${ext}`),
          },
          event.threadID,
          () => fs.unlinkSync(__dirname + `/cache/codm.${ext}`),
          event.messageID,
        );
      };
      request(res.data.url)
        .pipe(fs.createWriteStream(__dirname + `/cache/codm.${ext}`))
        .on(""close"", callback);
    })
    .catch((err) => {
      api.sendMessage(
        ""error na bai maya naman"",
        event.threadID,
        event.messageID,
      );
      api.setMessageReaction(""‚ùå"", event.messageID, (err) => {}, true);
    });
};
module.exports.run = async function ({ api, event }) {
  api.sendMessage(
    `This command doesn't need a prefix`,
    event.threadID,
    event.messageID,
  );
};
"
AJS0gWs4,–¥–µ—Ä–µ–≤—å—è –∞–∏—Å–¥,Vladislav8653,C,Tuesday 12th of December 2023 05:18:48 AM CDT,"#include ""stdio.h""
#include <stdlib.h>
#define nullptr NULL

struct tree {
    int data;
    struct tree *left;
    struct tree *right;
};

struct tree *createNode(int rootNode)
{
    struct tree *head = malloc(sizeof (struct tree));
    head->left = nullptr; // = null, –Ω–æ —ç—Ç–æ —ç–≤–æ–ª—é—Ü–∏—è
    head->right = nullptr;
    head->data = rootNode;
    return head;
}

void addNode (struct tree *head, int data)
{
    if (data < head->data){
        if (head->left != nullptr){
            addNode(head->left, data);
        } else {
            struct tree *node = createNode(data);
            head->left = node;
            // node->data = data;
        }
    } else if (data >= head->data) {
        if (head->right != nullptr){
            addNode(head->right, data);
        } else {
            struct tree *node = createNode(data);
            head->right = node;
            //node->data = data;
        }
    }
}

void freeTree (struct tree *head){
    if (head != nullptr){
        freeTree(head->right);
        freeTree(head->left);
        free(head);
    }
}

void print(struct tree *head, long n)
{
    long i;
    if (head)
    {
        print(head->right, n+5);
        for (i = 0; i < n; i++)
            printf("" "");
        printf(""%d\n"", head->data);
        print(head->left, n+5);
    }
}

void fromUptoDown (struct tree *head){
    if (head != nullptr){
        printf(""%d "", head->data);
        fromUptoDown(head->left);
        fromUptoDown(head->right);
    }
}

void fromDowntoUp (struct tree *head){
    if (head != nullptr){
        fromDowntoUp(head->left);
        fromDowntoUp(head->right);
        printf(""%d "", head->data);
    }
}

void fromLeftToRight (struct tree *head){
    if (head != nullptr){
        fromLeftToRight(head->left);
        printf(""%d "", head->data);
        fromLeftToRight(head->right);
    }
}

void rightThreadedInorder(struct tree *head) {
    struct tree *current = head;
    struct tree *prev = nullptr;
    while (current != nullptr) {
        if (current->left == nullptr) {
            printf(""%d -> "", current->data);
            current = current->right;
        } else {
            prev = current->left;
            while (prev->right != nullptr && prev->right != current) {
                prev = prev->right;
            }
            if (prev->right == nullptr) {
                prev->right = current;
                current = current->left;
            } else {
                prev->right = nullptr;
                printf(""%d -> "", current->data);
                current = current->right;
            }
        }
    }
    printf(""%d"", 50);
}

int main() {
    struct tree *head = createNode(50);
    addNode(head, 40);
    addNode(head, 30);
    addNode(head, 45);
    addNode(head, 60);
    addNode(head, 55);
    addNode(head, 70);
    print(head, 0);
    printf(""%s"", ""Top-to-bottom bypass: "");
    fromUptoDown(head); // —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
    printf(""%s"", ""\nBottom-to-top bypass: "");
    fromDowntoUp(head); // —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
    printf(""%s"", ""\nLeft-to-right bypass: "");
    fromLeftToRight(head); // —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
    printf(""%s"", ""\nFlashing: "");
    rightThreadedInorder(head);
    freeTree(head);
    return 0;
}

/*
–ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–µ—Ä–µ–≤–æ –¥–≤–æ–∏—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞, –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ –Ω–∞ —ç–∫—Ä–∞–Ω
–≤—ã–ø–æ–ª–Ω–∏—Ç—å 3 –ø–æ–ª–Ω—ã—Ö –æ–±—Ö–æ–¥–∞ (–≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω), —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—É—é –ø—Ä–∞–≤—É—é –ø—Ä–æ—à–∏–≤–∫—É (–≤—ã–≤–µ—Å—Ç–∏ –µ–µ –Ω–∞ —ç–∫—Ä–∞–Ω)
*/"
LsTf0mVN,ÈÇÄÊÇ®‰∏ÄËµ∑ÁúãÔºöÂá∫Èîô[10],xiaomianao666,JavaScript,Tuesday 12th of December 2023 05:16:26 AM CDT,Êµ∑ÈòîËßÜÁïåËßÑÂàôÂàÜ‰∫´ÔºåÂΩìÂâçÂàÜ‰∫´ÁöÑÊòØÔºö‰∫åÁ∫ßÈ°µÈù¢ËØ¶ÊÉÖÔø•page_detailÔø•Âá∫Èîô[10]@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5oiR55qE5Li76aG1XCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eVwiLFwiY29sX3R5cGVcIjpcIng1X3dlYnZpZXdfc2luZ2xlXCIsXCJmaW5kX3J1bGVcIjpcImpzOnNldFJlc3VsdChbe1xcbiAgICB1cmw6XFxcImZpbGU6Ly8vc3RvcmFnZS9lbXVsYXRlZC8wL0FuZHJvaWQvZGF0YS9jb20uZXhhbXBsZS5oaWtlcnZpZXcvZmlsZXMvRG9jdW1lbnRzL25ld1BsYW5Ib21lLmh0bWwjbm9SZWNvcmRIaXN0b3J5I1xcXCIsXFxuZGVzYzpcXFwiMTAwJSYmZmxvYXRcXFwiLFxcbmV4dHJhOntjYW5CYWNrOiB0cnVlfVxcbn1dKTtcIixcImdyb3VwXCI6XCLikaDmjqjojZBcIixcInBhZ2VzXCI6XCJbXVwifSIsInRpdGxlIjoi5Ye66ZSZWzEwXSJ9
x20qG1mE,BTC Wallet Credentials have been reset,castlclass_20,GetText,Tuesday 12th of December 2023 05:11:06 AM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
Bressiyk:ph2cZ9 on 212.224.93.130
You can connect via SSH.
Regards"
UQjb11Ur,Compile Satanic Linux Kernel for Debian,teuk,Bash,Tuesday 12th of December 2023 05:10:53 AM CDT,"apt-mark hold linux-image*
cd /usr/src
wget ""https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.6.6.tar.xz""
tar xJf linux-6.6.6.tar.xz
cd linux-6.6.6
cp /boot/config-$(uname -r) .config
make nconfig # Press F9 and Save
./scripts/config -d CONFIG_MODULE_SIG_ALL -d CONFIG_MODULE_SIG_KEY -d CONFIG_SYSTEM_TRUSTED_KEYS
./scripts/config --disable DEBUG_INFO
make bindeb-pkg
dpkg -i linux-*6.6.6*.deb
# Shutdown apps and
reboot
"
TM70PnKJ,drawbot_–ó–∞–¥–∞–Ω–∏–µ3,annstasi,Python,Tuesday 12th of December 2023 05:10:25 AM CDT,"from poetry_data.data import getData
from drawbot_skia.drawbot import *
from datetime import datetime

poetry = getData('poetry')
fireballs = getData('fireballs')

# # –ü–æ–¥—Å—á–µ—Ç –∞–≤—Ç–æ—Ä–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö —á–∞—â–µ –≤—Å–µ–≥–æ –ø–∞–¥–∞–ª–∏ –±–æ–ª–∏–¥—ã –≤ –¥–µ–Ω—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
# author_counts = {}

# for fire in fireballs:
#     for poet in poetry:
#         if fire['date'].date() == poet['date'].date():
#             author = poet['author']
#             if author in author_counts:
#                 author_counts[author] += 1
#             else:
#                 author_counts[author] = 1

# print(author_counts)
# value_key_pairs = ((value, key) for (key,value) in author_counts.items())
# # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∞—Å—Ç–æ—Ç–µ
# sorted_value_key_pairs = sorted(value_key_pairs, reverse=True)
# print(sorted_value_key_pairs)

# # –ò—Ç–æ–≥:
# # 16 –ß–∞—Ä–ª—å–∑ –ë—É–∫–æ–≤—Å–∫–∏, 14 –ê–Ω–¥—Ä–µ–π –ì—Ä–∏—à–∞–µ–≤, 13 –ú–∏—Ö–∞–∏–ª –ê–π–∑–µ–Ω–±–µ—Ä–≥, 13 –í–∏—Ç–∞–ª–∏–π –ü—É—Ö–∞–Ω–æ–≤, 13 –í–∞—Å–∏–ª–∏–π –ë–æ—Ä–æ–¥–∏–Ω 
# # 12 –Ø–Ω –°–∞—Ç—É–Ω–æ–≤—Å–∫–∏–π, 11 –í—Å–µ–≤–æ–ª–æ–¥ –ù–µ–∫—Ä–∞—Å–æ–≤, 10 –û–∫—Å–∞–Ω–∞ –í–∞—Å—è–∫–∏–Ω–∞, 10 –î–∞–Ω–∏–ª–∞ –î–∞–≤—ã–¥–æ–≤, 9 –°–æ—Ñ–∏—è –ü–æ–ª—è–∫–æ–≤–∞

# –í—ã–±–æ—Ä –∞–≤—Ç–æ—Ä–∞
author_name = '–ß–∞—Ä–ª—å–∑ –ë—É–∫–æ–≤—Å–∫–∏'
# –í—ã–±–∏—Ä–∞–µ–º –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –∏ –±–µ—Ä–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç–Ω–µ—Ä–≥–∏–∏ –±–æ–ª–∏–¥–æ–≤
energies = []

for fire in fireballs:
     for poet in poetry:
         if (poet['author'] == author_name) & (fire['date'].date() == poet['date'].date()):
            #print(fire['energy'])
            energies.append(float(fire['energy']))
#print(energies)

# –°—É–º–º–∏—Ä—É–µ–º —ç–Ω–µ—Ä–≥–∏—é –≤—Å–µ—Ö –±–æ–ª–∏–¥–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ 
sum_fireballs = sum(energies)
x = 0
y = 0
date_text = 0

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –¥–∞—Ç—É –±–µ—Ä–µ–º —É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –±–æ–ª–∏–¥–∞
for fire in fireballs:
    if float(fire['energy']) == max(energies):
        x = float(fire['lat'])
        y = float(fire['lon'])
        date_text = fire['date'].date()

# –ò—â–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∞ –≤ –¥–µ–Ω—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –±–æ–ª–∏–¥–∞
text_index = 0
for index, poet in enumerate(poetry):
   if (poet['date'].date() == date_text) & (poet['author'] == author_name):
       #print(f""Text is at index: {index}"")
       text_index = index
       #print(poet['text'])

newPage(742.5, 1050)
# –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –≤ –¥–∞—Ç—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –±–æ–ª–∏–¥–∞
pub = poetry[text_index][""text""]
fontSize(30)
# font(""Times-Italic"", 30) –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç..
splitted_pub = pub.split(""\n"")
y_text = 1050 - 40
for line in splitted_pub:
    text(line, (10, y_text))
    y_text -= 25

# –°—Ç–∞–≤–∏–º –¥–∞—Ç—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –±–æ–ª–∏–¥–∞
text(str(date_text), (550, 1000))

# –†–∏—Å—É–µ–º —á–µ—Ä–Ω—ã–π –∫—Ä—É–≥, –≥–¥–µ x = lat, y = lon –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –±–æ–ª–∏–¥–∞, —Ä–∞–¥–∏—É—Å = —Å—É–º–º–∞ —ç–Ω–µ—Ä–≥–∏–π –≤—Å–µ—Ö –±–æ–ª–∏–¥–æ–≤
shadow((0, 0), 30, (0, 0, 0))
oval(x, y, sum_fireballs, sum_fireballs)
fill(0, 0, 0)

saveImage(""page-001.pdf"")"
gLTLvpGP,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Tuesday 12th of December 2023 05:07:09 AM CDT,"Dear Moe,
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-548322"
djb8RJ85,Advent of Code 2023 - Day 12,mgla,C#,Tuesday 12th of December 2023 04:52:39 AM CDT,"var input = File.ReadAllLines(""input.txt"");

var part1 = 0L;
var part2 = 0L;
var cache = new Dictionary<string, long>();

foreach (var line in input.Select(l => l.Split(' ')))
{
    var springs = line[0];
    var groups = line[1].Split(',').Select(int.Parse).ToList();
    
    part1 += Calculate(springs, groups);

    springs = string.Join('?', Enumerable.Repeat(springs, 5));
    groups = Enumerable.Repeat(groups, 5).SelectMany(g => g).ToList();

    part2 += Calculate(springs, groups);
}

Console.WriteLine($""Part1: {part1}"");
Console.WriteLine($""Part2: {part2}"");
return;

long Calculate(string springs, List<int> groups)
{
    var key = $""{springs},{string.Join(',', groups)}"";  // Cache key: spring pattern + group lengths

    if (cache.TryGetValue(key, out var value))
    {
        return value;
    }
    
    value = GetCount(springs, groups);
    cache[key] = value;

    return value;
}

long GetCount(string springs, List<int> groups)
{
    while (true)
    {
        if (groups.Count == 0)
        {
            return springs.Contains('#') ? 0 : 1; // No more groups to match: if there are no springs left, we have a match
        }

        if (string.IsNullOrEmpty(springs))
        {
            return 0; // No more springs to match, although we still have groups to match
        }

        if (springs.StartsWith('.'))
        {
            springs = springs.Trim('.'); // Remove all dots from the beginning
            continue;
        }

        if (springs.StartsWith('?'))
        {
            return Calculate(""."" + springs[1..], groups) + Calculate(""#"" + springs[1..], groups); // Try both options recursively
        }

        if (springs.StartsWith('#')) // Start of a group
        {
            if (groups.Count == 0)
            {
                return 0; // No more groups to match, although we still have a spring in the input
            }

            if (springs.Length < groups[0])
            {
                return 0; // Not enough characters to match the group
            }

            if (springs[..groups[0]].Contains('.'))
            {
                return 0; // Group cannot contain dots for the given length
            }

            if (groups.Count > 1)
            {
                if (springs.Length < groups[0] + 1 || springs[groups[0]] == '#') 
                {
                    return 0; // Group cannot be followed by a spring, and there must be enough characters left
                }

                springs = springs[(groups[0] + 1)..]; // Skip the character after the group - it's either a dot or a question mark
                groups = groups[1..];
                continue;
            }

            springs = springs[groups[0]..]; // Last group, no need to check the character after the group
            groups = groups[1..];
            continue;
        }

        throw new Exception(""Invalid input"");
    }
}"
5bysLxB6,Untitled,Skos_Martren,C++,Tuesday 12th of December 2023 04:00:29 AM CDT,"#include""profile.h""
#include<vector>
#include<iostream>
#include<algorithm>
#include<iomanip>
#include<future>
#include<execution> 
using namespace std;

//________________________________________________________________________

template <typename C>
struct SubRange {
	C& collection;
	size_t first_index, last_index;

	auto begin() const {
		return collection.begin() + first_index;
	}

	auto end() const {
		return collection.begin() + last_index;
	}

	size_t size() const {
		return last_index - first_index;
	}

};

template <typename Container>
class Paginator {
private:
	vector<SubRange<Container>> pages;

public:
	Paginator(Container& c, size_t page_size) {
		for (size_t i = 0; i < c.size(); i += page_size) {
			pages.push_back({ c, i,  min(i + page_size, c.size()) });
		}
	}

	auto begin() const {
		return pages.begin();
	}

	auto end() const {
		return pages.end();
	}

	size_t size() const {
		return pages.size();
	}
};

template <typename C>
Paginator<C> Paginate(C& c, size_t page_size) {
	return Paginator<C>(c, page_size);
}

//________________________________________________________________________


template <typename ContainerOfVectors>
void GenerateSingleThread(ContainerOfVectors& result, size_t first_row, size_t column_size) {
	for (auto& row : result) {
		row.reserve(column_size);
		for (size_t column = 0; column < column_size; ++column) {
			row.push_back(first_row ^ column);
		}
		++first_row;
	}
}

vector <vector <int>> GenerateSingleThread(size_t size) {
	vector <vector <int>> result(size);
	GenerateSingleThread(result, 0, size);
	return result;
}


vector <vector <int>> GenerateMultiThread(size_t size, size_t page_size) {
	vector <vector <int>> result(size);
	vector <future <void>> futures;
	size_t first_row = 0;
	for (auto page : Paginate(result, page_size)) {
		futures.push_back(
			async([page, first_row, size] {
				GenerateSingleThread(page, first_row, size);
				})
		);
		first_row += page_size;
	}
	return result;
}

template <typename ContainerOfVectors>
void for_each_GenerateMultiThread(
	ContainerOfVectors& result, size_t first_row, size_t column_size) {
	for_each(execution::par, begin(result), end(result),
		[&first_row, column_size](vector <int >& row) { // row —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ { begin(result), end(result)}, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º –∏ –±—É–¥—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ —Ç–µ–ª–µ –ª—è–º–±—ã, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –≤ for_each
			row.reserve(column_size);
			for (size_t column = 0; column < column_size; ++column) {
				row.push_back(first_row ^ column);
			}
			++first_row;
		}
	);
}


int main() {
	LOG_DURATION(""Total"");
	const size_t matrix_size = 7000;
	vector <vector <int>> matrix;
	{
		LOG_DURATION(""Single thread generation"");
		matrix = GenerateSingleThread(matrix_size);
	}
	{
		LOG_DURATION(""Multi thread generation"");
		matrix = GenerateMultiThread(matrix_size, 2000);
	}
	{
		LOG_DURATION(""for_each Multi thread generation"");
		for_each_GenerateMultiThread(matrix, matrix_size, 2000);
	}
}
"
nu7YyG7H,Product bundles v6.4.0 Min/Max Items compatibility,palsushobhan,PHP,Tuesday 12th of December 2023 03:50:28 AM CDT,"add_filter('wcfm_product_bundles_general_fields', function($fields) {
    global $WCFMph, $wp;
    if( version_compare( $WCFMph->version, '1.0.8', '<=' ) && version_compare( WC_PB()->plugin_version(), '6.4.0', '>=' )) {
        $min_qty_limit = '';
        $max_qty_limit = '';
        if(!empty( $wp->query_vars['wcfm-products-manage'] )) {
            $product_id = $wp->query_vars['wcfm-products-manage'];
            $min_qty_limit = get_post_meta( $product_id, '_wcpb_min_qty_limit', true );
            $max_qty_limit = get_post_meta( $product_id, '_wcpb_max_qty_limit', true );
        }
        $min_max_fields = array( 
            ""_wcpb_min_qty_limit"" => array( 'label' => __( 'Min Bundle Size', 'woocommerce-product-bundles-min-max-items' ), 'type' => 'number', 'value' => $min_qty_limit, 'class' => 'wcfm-text', 'label_class' => 'wcfm_title', 'hints' => __( 'Minimum required quantity of bundled items.', 'woocommerce-product-bundles' ) ),
            ""_wcpb_max_qty_limit"" => array( 'label' => __( 'Max Bundle Size', 'woocommerce-product-bundles-min-max-items' ), 'type' => 'number', 'value' => $max_qty_limit, 'class' => 'wcfm-text', 'label_class' => 'wcfm_title', 'hints' => __( 'Maximum allowed quantity of bundled items.', 'woocommerce-product-bundles-min-max-items' ) ),
        );
        $index = array_search( ""_wc_pb_group_mode"", array_keys( $fields ) ) + 1;
        return array_slice( $fields, 0, $index, true ) +
            $min_max_fields +
            array_slice( $fields, $index, count( $fields ) - 1, true );
    
    }
    return $fields;
});
add_action( 'after_wcfm_products_manage_meta_save', function($new_product_id, $wcfm_products_manage_form_data) {
    global $WCFMph;
    $product_type = empty( $wcfm_products_manage_form_data['product_type'] ) ? WC_Product_Factory::get_product_type( $new_product_id ) : sanitize_title( stripslashes( $wcfm_products_manage_form_data['product_type'] ) );
    if ( $product_type != 'bundle' ) {
        return;
    }
    $product = wc_get_product( $new_product_id );
    if( version_compare( $WCFMph->version, '1.0.8', '<=' ) && version_compare( WC_PB()->plugin_version(), '6.4.0', '>=' )) {
        if ( ! empty( $wcfm_products_manage_form_data[ '_wcpb_min_qty_limit' ] ) && is_numeric( $wcfm_products_manage_form_data[ '_wcpb_min_qty_limit' ] ) ) {
            $product->add_meta_data( '_wcpb_min_qty_limit', stripslashes( $wcfm_products_manage_form_data[ '_wcpb_min_qty_limit' ] ), true );
        } else {
            $product->delete_meta_data( '_wcpb_min_qty_limit' );
        }
    
        if ( ! empty( $wcfm_products_manage_form_data[ '_wcpb_max_qty_limit' ] ) && is_numeric( $wcfm_products_manage_form_data[ '_wcpb_max_qty_limit' ] ) ) {
            $product->add_meta_data( '_wcpb_max_qty_limit', stripslashes( $wcfm_products_manage_form_data[ '_wcpb_max_qty_limit' ] ), true );
        } else {
            $product->delete_meta_data( '_wcpb_max_qty_limit' );
        }
        $product->save();
    }
}, 91, 2 );"
m0zFJ8vb,1A2B_2.0Áâà,excellent940707,C++,Tuesday 12th of December 2023 03:43:14 AM CDT,"#include<bits/stdc++.h>
#include<conio.h>
using namespace std;

bool check_duplicate(vector<int> v){
     /*
     Êé•Êî∂vector<int> ÂûãÊÖãÂà•ÁöÑËÆäÊï∏

     Ê™¢Ê∏¨vÈô£Âàó‰∏≠ÊúâÁÑ°ÈáçË§áÊï∏ÂÄº

     ÁÑ°ÈáçË§áÂõûÂÇ≥TRUE
     */
     int flag[10]={0};
     for(int i=0;i<v.size();++i){
          flag[v[i]]+=1;
          if(flag[v[i]]>1)return 0;
     }
     return 1;
}

bool check_length(string s, int length){
     /*
     Êé•Êî∂vector<int> ÂûãÊÖãÂà•ÁöÑËÆäÊï∏
     ÂíåintÂûãÊÖãÂà•ÁöÑËÆäÊï∏‰ª£Ë°®ÈúÄÊ±ÇÈï∑Â∫¶

     Ê™¢Ê∏¨vÈô£ÂàóÈï∑Â∫¶ÊòØÂê¶Á¨¶ÂêàÈúÄÊ±ÇÈï∑Â∫¶

     Èï∑Â∫¶Ê≠£Á¢∫ÂõûÂÇ≥TRUE
     */
     return s.size()==length;
}

bool check_number(string s){
     /*
     Êé•Êî∂vector<int> ÂûãÊÖãÂà•ÁöÑËÆäÊï∏

     Ê™¢Ê∏¨vÈô£ÂàóÊòØÂê¶ÂèÉÈõúÂ≠óÂÖÉ

     ÁÑ°ÂèÉÈõúÂÑÑÂÖÉÂõûÂÇ≥TRUE
     */
     for(char e:s){
          if(!isdigit(e))return 0;
     }
     return 1;
}

vector<int> input(int length, bool hide=0){
     /*
     Êé•Êî∂intÂûãÊÖãÂà•ÁöÑËÆäÊï∏‰ª£Ë°®ÈúÄÊ±ÇÈï∑Â∫¶
     ËôïÁêÜËº∏ÂÖ•Êï∏ÂàóÁöÑÈÉ®ÂàÜ
     
     hideÊé•Êî∂boolÂûãÊÖãÂà•ËÆäÔºåÁÇ∫Èö±ËóèÂäüËÉΩÔºåËº∏ÂÖ•ÁöÑÊï∏ÂàóÂ∞áÂΩ±ËóèÈ°ØÁ§∫

     ÂõûÂÇ≥ÂÄºÂûãÊÖãÂà•ÁÇ∫vector<int>
     ‰øùË≠âÂõûÂÇ≥Èô£ÂàóÁ¨¶ÂêàÈúÄÊ±ÇÈï∑Â∫¶‰∏îÁÑ°ÈáçË§áÊï∏ÂÄº
     */
     vector<int> v(length);
     string num;
     while(true){
          if(hide){
               /*
               Ê≥®ÊÑè:Ê≠§ÂäüËÉΩÁõÆÂâçÁÑ°Ê≥ïÂú®google colab‰∏äÂü∑Ë°å
               */
               int idx=0;
               while(idx<length){
                    char ch=getch();
                    if(isdigit(ch)){
                         v[idx++] = ch-'0';
                         putchar('*');
                    }
               }
               putchar('\n');
          }else{
               cin>>num;
          }
          if(num==""yeet""){
               while(true)cout<<""ÁøªÊ°åÂï¶Ôºå‰∏çÁé©‰∫Ü\n"";//ÂΩ©Ëõã
          }else if(!check_number(num)){
               cout<<""The input number must be 0~9\n"";
               continue;
          }else if(!check_length(num, length)){
               cout<<""Wrong input length\n"";
               continue;
          }else{
               for(int i=0;i<num.size();++i){
                    v[i] = num[i]-'0';
               }
          }
          if(!check_duplicate(v)){
               cout<<""Duplicate numbers are not allowed\n"";
          }else{
               break;
          }
     }
     return v;
}

vector<int> set_number(int length, bool user_create=0){
     /*
     Êé•Êî∂intÂûãÊÖãÂà•ÁöÑËÆäÊï∏‰ª£Ë°®ÈúÄÊ±ÇÈï∑Â∫¶
     ÂíåboolÂûãÊÖãÂà•ÁöÑËÆäÊï∏‰ª£Ë°®ÊòØÂê¶ÈúÄË¶ÅÈö®Ê©üÁîüÊàêÊï∏Âàó

     ËôïÁêÜÁîüÊàêÁ≠îÊ°àÊï∏ÂàóÁöÑÈÉ®ÂàÜ
     
     ÂõûÂÇ≥ÂÄºÂûãÊÖãÂà•ÁÇ∫vector<int>
     ‰øùË≠âÂõûÂÇ≥Èô£ÂàóÁ¨¶ÂêàÈúÄÊ±ÇÈï∑Â∫¶‰∏îÁÑ°ÈáçË§áÊï∏ÂÄº
     */
     int flag[10]={0,1,2,3,4,5,6,7,8,9};
     vector<int> v(length);
     if(user_create){
          cout<<""Please input your answer: "";
          return input(length, 1);
     }
     for(int i=0;i<10;++i)
          swap(flag[i],flag[rand()%10]);
     for(int i=0;i<length;++i)
          v[i]=flag[i];
     return v;
}

pair<int, int> deter(vector<int> ans, vector<int> input)
{
     /*
     Êé•Êî∂vector<int>ÂûãÊÖãÂà•ÁöÑËÆäÊï∏‰ª£Ë°®Á≠îÊ°à
     ÂíåÊé•Êî∂vector<int>ÂûãÊÖãÂà•ÁöÑËÆäÊï∏‰ª£Ë°®Ëº∏ÂÖ•Êï∏Âàó

     ËôïÁêÜÁ≠îÊ°àÂíåÁîüÊàêÊï∏ÂàóÊØîÂ∞çÔºå‰∏¶Ëº∏Âá∫ÂπæAÂπæB
     
     ÂõûÂÇ≥ÂÄºÂûãÊÖãÂà•ÁÇ∫bool‰ª£Ë°®ÊòØÂê¶ÁåúÂ∞ç
     */
     int n=ans.size();
     int A=0,B=0;
     for(int i=0;i<n;i++)
     {
          if(ans[i]==input[i])
          {
               A++;
          }
          else
          {
               for(int count=0;count<n;count++)
               {
                    if(input[i]==ans[count])
                    {
                         B++;
                         break;
                    }
               }
          }
     }
     
     return make_pair(A,B);
}

void report(vector<int> ans, vector<vector<int>> record, long long time, int play_times, string name){
     /*
     Êà∞Â†±Ê®°ÊùøÔºåÊé•Êî∂ÊâÄÊúâÈúÄÊ±ÇÁöÑÂèÉÊï∏

     Ëº∏Âá∫Êà∞Â†±
     
     ÁÑ°ÂõûÂÇ≥
     */
     int min=time/60, sec=time%60, length=ans.size();
     cout<<name<<"" result report\n"";
     for(int i=0;i<23;++i)cout<<""-\n""[i==22];
     cout<<""The number  |\nyou guessed""<<"" | ""<<""result""<<'\n';
     for(int i=0;i<23;++i)cout<<""-\n""[i==22];
     for(auto num:record){
          for(int i=0;i<11-length;++i)cout<<' ';
          for(int e:num)cout<<e;
          cout<<"" | "";
          auto result = deter(ans, num);
          cout<<result.first<<""A""<<result.second<<""B"";
          cout<<'\n';
     }
     cout<<""Á∏ΩÈÅäÊà≤ÊôÇÈñì: ""<<min<<'m'<<sec<<'s'<<'\n';
     cout<<""Á∏ΩÈÅäÁé©Ê¨°Êï∏: ""<<play_times<<'\n';
}

void props(vector<int> ans, int mode){
     /*
     Êé•Êî∂vector<int>ÂûãÊÖãÂà•ÁöÑËÆäÊï∏‰ª£Ë°®Á≠îÊ°à
     Êé•Êî∂intÂûãÊÖãÂà•ËÆäÊï∏‰ª£Ë°®ÊèêÁ§∫Ê®°Âºè

     ËôïÁêÜÈÅìÂÖ∑Á≥ªÁµ±ÊèêÁ§∫Ëº∏Âá∫
     
     ÁÑ°ÂõûÂÇ≥
     */
      int length=ans.size();
      int idx = rand()%length;
      if(mode==1){
          cout<<""ÊèêÁ§∫: ""<<""Á≠îÊ°à‰∏≠ÊúâÊï∏Â≠ó""<<ans[idx]<<'\n';
      }else{
          cout<<""ÊèêÁ§∫: ""<<""Á≠îÊ°àÁÇ∫"";
          for(int i=0;i<length;++i){
               if(i==idx)cout<<ans[idx];
               else cout<<'_';
          }
          cout<<'\n';
      }
}

void difficult(vector<int> &a, int mode)
{
     /*
     Êé•Êî∂vector<int>ÂûãÊÖãÂà•ÁöÑËÆäÊï∏‰ª£Ë°®Á≠îÊ°à
     Êé•Êî∂intÂûãÊÖãÂà•ËÆäÊï∏‰ª£Ë°®Êõ¥ÊîπÊ®°Âºè

     mode 1ÁÇ∫Èö®Ê©ü‰∫§ÊèõÁ≠îÊ°àÊï∏Âàó‰∏≠‰ªªÂÖ©‰ΩçÁöÑÊï∏Â≠óÔºå‰∏ç‰øùË≠â‰∏ÄÂÆöÊúÉ‰∫§Êèõ
     mode 2ÁÇ∫Èö®Ê©ü‰∫§ÊèõÁ≠îÊ°àÊï∏Âàó‰∏≠Êüê‰∏Ä‰ΩçÁöÑÊï∏Â≠óÔºå‰∏ç‰øùË≠â‰∏ÄÂÆöÊúÉÊõ¥Êèõ
     
     ÁÑ°ÂõûÂÇ≥
     */
     int length = a.size();
     if(mode==1){
          
          swap(a[rand()%length],a[rand()%length]);
     }else if(mode==2){
          while(true)
          {
               a[rand()%length]=rand()%10;
               if(check_duplicate(a)==1)
               {
                    break;
               }
          }
     }
}

int random_skill(){
     /*
     ÁÑ°Êé•Êî∂ÂèÉÊï∏

     Ë®àÁÆóÈö®Ê©üÊäÄËÉΩÊ©üÁéáÁî®
     
     Âç∞Âá∫ÊâÄÈÅ∏‰∏≠ÁöÑÊäÄËÉΩÔºå‰∏¶ÂõûÂÇ≥Ë©≤ÊäÄËÉΩ‰ª£Ë°®ÁöÑÊï∏Â≠ó
     ÊäÄËÉΩ 0ÔºåÂ±èËîΩÂ∞çÊâãÁöÑBÊ†º
     ÊäÄËÉΩ 1ÔºåÂ±èËîΩÂ∞çÊâãÁöÑAÊ†º
     ÊäÄËÉΩ 2ÔºåÂ∞çÊâã‰∏ãÂõûÂêàÁÑ°Ê≥ï‰ΩøÁî®ÊäÄËÉΩ

     */
     int num = rand()%10;
     switch(num){
          case 0:
          case 1:
               cout<<""Block the opponent's B\n"";
               return 0;
          case 2:
          case 3:
               cout<<""Block the opponent's A\n"";
               return 1;
          case 4:
          case 5:
               cout<<""Opponent cannot use skills next round\n"";
               return 2;
          default:
               cout<<""You didn't get any skills\n"";
               return -1;
     }
}

void single_mode(){
     //ÂñÆ‰∫∫ÈÅäÊà≤Ê®°Âºè‰∏ªÂáΩÂºè

     /*
     ans:Á≠îÊ°àÈô£Âàó
     tmp:Êö´Â≠òËº∏ÂÖ•Èô£Âàó
     record:Á¥ÄÈåÑÊ≠∑Ê¨°Èô£Âàó
     length:Èô£ÂàóÈï∑Â∫¶
     play_times:Ë®òÈåÑÈÅäÁé©Ê¨°Êï∏
     */
     vector<int> ans, tmp;
     vector<vector<int>> record;
     int length, play_times=0;   
     //ÈÅ∏ÊìáÈï∑Â∫¶
     do{
          cout<<""set length(1~10): "";
          cin>>length;
     }while(0>=length||length>10);
     
     //ÈÅ∏ÊìáÊòØÂê¶Èö®Ê©üÁîüÊàêÁ≠îÊ°à
     cout<<""Do you want to randomly generate numbers?(Yes or No) "";
     string create;
     while(true){
          cin>>create;
          if(create==""Yes""){
               ans = set_number(length);
               break;
          }else if(create==""No""){
               ans = set_number(length, 1);
               break;
          }else{
               cout<<""Please input Yes or No\n"";
          }
     }

     //ÈÅ∏ÊìáÊòØÂê¶‰ΩøÁî®ÈÅìÂÖ∑
     cout<<""Will you use the prop system?(Yes or No) "";
     int use_prop=0;
     while(true){
          cin>>create;
          if(create==""Yes""){
               use_prop=2;
               break;
          }else if(create==""No""){
               use_prop=0;
               break;
          }else{
               cout<<""Please input Yes or No\n"";
          }
     }

     //ÈÅ∏ÊìáÈõ£ÊòìÂ∫¶
     cout<<""What degree of difficulty you want choose?(easy, normal, hard) "";
     int difficulty=-1;
     while(true){
          cin>>create;
          if(create==""easy""){
               difficulty=0;
               break;
          }else if(create==""normal""){
               difficulty=1;
               break;
          }else if(create==""hard""){
               difficulty=2;
               break;
          }else{
               cout<<""Please input Yes or No\n"";
          }
     }

     //ÈÅäÊà≤ÈÅéÁ®ã
     system(""cls"");//Ê≠§Ë°åÁ®ãÂºèÁÑ°Ê≥ïÂú®colab‰∏ä‰ΩøÁî®

     cout<<""Game Start\n"";
     //Á¥ÄÈåÑÊôÇÈñì
     time_t t_start, t_end;
     time(&t_start);
     while(true){
          play_times++;

          if(use_prop){
               int condition;
               cout<<""Do you want use props?(0 or 1): "";
               cin>>condition;
               if(condition){
                    use_prop--;
                    props(ans,use_prop);
               }
          }

          if(difficulty==1){
               if(play_times%5==0){
                    difficult(ans, 1);
                    cout<<""The order of answers has been changed\n"";
               }
          }else if(difficulty==2){
               if(play_times%10==0){
                    difficult(ans,2);
                    cout<<""Answer numbers have been changed\n"";
               }else if(play_times%5==0){
                    difficult(ans,1);
                    cout<<""The order of answers has been changed\n"";
               }
          }

          cout<<""Please input number: "";
          tmp = input(length);
          record.emplace_back(tmp);
          cout<<setw(19)<<""result""<<"": "";
          auto result = deter(ans, tmp);
          cout<<result.first<<""A""<<result.second<<""B\n"";
          if(result.first==4){
               break;
          }

     }
     time(&t_end);

     cout<<""You win!!!!\n"";
     report(ans, record, t_end-t_start, play_times, ""your"");
     
}

void competition_mode()
{
     //Á´∂ÊäÄÊ®°Âºè‰∏ªÁ®ãÂºè

     /*
     ans1:Áé©ÂÆ∂‰∏ÄÁ≠îÊ°àÈô£Âàó
     ans2:Áé©ÂÆ∂‰∫åÁ≠îÊ°àÈô£Âàó
     input1, input2:Êö´Â≠òËº∏ÂÖ•Èô£Âàó
     p1_record, p2_record:Á¥ÄÈåÑÊ≠∑Ê¨°Èô£Âàó
     length:Èô£ÂàóÈï∑Â∫¶
     p1_times, p2_times:Ë®òÈåÑÈÅäÁé©Ê¨°Êï∏
     p1_state, p2_state:Ë®òÈåÑÁé©ÂÆ∂ÊäÄËÉΩÁãÄÊÖã(ÊäΩÂç°Ê©üÂäüËÉΩ)
     */
     vector<int> ans1, ans2;
     vector<int> input1,input2;
     vector<vector<int>> p1_record, p2_record;
     int p1_times=0, p2_times=0,p1_state=-1,p2_state=-1;
     int length;

     //ÈÅ∏ÊìáÈï∑Â∫¶
     do{
          cout<<""Please choose 4-10 numbers""<<endl;
          cin>>length;
     }while(0>=length||length>10);
     
     //ÈÅ∏ÊìáÊ®°Âºè
     int mode;
     cout<<""If you want to select the number ramdomly input 0""<<endl;
     cout<<""If you want to select the number by yourself input 1""<<endl;
     cout<<""If you want to leave input -1""<<endl;
     cin>>mode;
     if(mode==0)
     {
          ans1=set_number(length);
          ans2=set_number(length);

     }
     else if(mode==1)
     {
          ans1=set_number(length,1);
          ans2=set_number(length,1);
     }
     else
     {
          cout<<""Bye""<<endl;
          return;
     }


     //Á¥ÄÈåÑÊôÇÈñìÁî®
     time_t t_start, t_end;
     time(&t_start);

     //ÈÅäÊà≤ÈÅéÁ®ã
     while(true)
     {
          //Áé©ÂÆ∂‰∏ÄÈÉ®ÂàÜ
          cout<<""\nPlayer1\'s turn: ""<<endl;
          //ÊäΩÂèñÊäÄËÉΩ
          if(p1_state!=2){
               cout<<""The skill player1 get: "";
               p2_state = random_skill();
          }
          //Ëº∏ÂÖ•Êï∏Â≠ó
          cout<<""Please input number: "";
          input1=input(length);
          p1_record.push_back(input1);
          p1_times++;
          pair<int,int> result = deter(ans1, input1);
          cout<<setw(19)<<""result""<<"": "";
          //Âç∞Âá∫ÁµêÊûú
          if(p1_state==0){
               cout<<result.first<<""A""<<'?'<<""B\n"";
               p1_state=-1;
          }else if(p1_state==1){
               cout<<'?'<<""A""<<result.second<<""B\n"";
               p1_state=-1;
          }else{
               cout<<result.first<<""A""<<result.second<<""B\n"";
          }
          if(result.first==4){
               cout<<""You are the winner""<<endl;
               break;
          }
          p1_state=-1;

          //Áé©ÂÆ∂‰∫åÈÉ®ÂàÜ
          cout<<""\nPlayer2\'s turn""<<endl;
          //ÊäΩÂèñÊäÄËÉΩ
          if(p2_state!=2){
               cout<<""The skill player2 get: "";
               p1_state = random_skill();
          }
          //Ëº∏ÂÖ•Êï∏Â≠ó
          cout<<""Please input number: "";
          input2=input(length);
          p2_record.push_back(input2);
          p2_times++;
          result = deter(ans2, input2);
          cout<<setw(19)<<""result""<<"": "";
          //Âç∞Âá∫ÁµêÊûú
          if(p2_state==0){
               cout<<result.first<<""A""<<'?'<<""B\n"";
               p2_state=-1;
          }else if(p2_state==1){
               cout<<'?'<<""A""<<result.second<<""B\n"";
               p2_state=-1;
          }else{
               cout<<result.first<<""A""<<result.second<<""B\n"";
          }
          if(result.first==4){
               cout<<""You are the winner""<<endl;
               break;
          }
          p2_state=-1;

     }
     time(&t_end);

     report(ans1, p1_record, t_end-t_start, p1_times, ""player1's"");
     report(ans2, p2_record, t_end-t_start, p2_times, ""player2's"");

     return ;
}

int main(){
     srand(time(NULL));
     
     //ÈÅ∏ÊìáÈÅäÁé©Ê®°Âºè
     string create;
      while(true){
          cout<<""What mode you want to choose?(single or competition)"";
          cin>>create;
          if(create==""single""){
               single_mode();
               break;
          }else if(create==""competition""){
               competition_mode();
               break;
          }else{
               cout<<""Please input Yes or No\n"";
          }
     }
     return 0;
}"
LEvQGmzF,AoC 2023 day 12 (Perl),musifter,Perl,Tuesday 12th of December 2023 03:21:18 AM CDT,"#!/usr/bin/perl

use v5.26;
use warnings;

use List::Util      qw(sum);

no warnings 'recursion';

# Get input as array of characters
my @input;
while (<>) {
    my @sec  = split / /;
    my $str  = $sec[0];
    my @nums = map {int} split( /,/, $sec[1] );

    push($input[1]->@*, {str => $str, groups => [@nums]});
    push($input[2]->@*, {str => $str . (('?'. $str) x 4), groups => [(@nums) x 5]});
}

my %memo;
sub recurse {
    # str to process, current potential group length, groups left to see
    my ($str, $len, @groups) = @_;

    # Check memo
    return ($memo{$str, $len, @groups}) if (exists $memo{$str, $len, @groups});

    my $ret = 0;

    if (!$str) {
        # Out of input, must decide if we found a match:
        # All groups accounted for, no hanging group.
        $ret = 1  if (@groups == 0 and $len == 0);

        # Check if hanging group is the size of the only remaining group:
        $ret = 1  if (@groups == 1 and $groups[0] == $len);

        return( $memo{$str, $len, @groups} = $ret );
    }

    # If out of groups, use regex to check if no manditory groups remain
    return( $memo{$str, $len, @groups} = ($str =~ m/^[^#]*$/) ) if (!@groups);

    # ASSERT: length($str) > 0, $len >= 0, @groups > 0

    # Get next chr, keep copy of $str for memo
    my $new_str = $str;
    my $chr = substr( $new_str, 0, 1, '' );

    if ($chr ne '.') {   # ? or #
        # adv making grouping larger
        $ret += &recurse( $new_str, $len + 1, @groups );
    }

    if ($chr ne '#') {   # ? or .
        if ($len == 0) {
            # no current grouping, just advance
            $ret += &recurse( $new_str, 0, @groups );

        } elsif ($len == $groups[0]) {
            # current grouping matches current target
            my @new_groups = @groups;
            shift @new_groups;

            $ret += &recurse( $new_str, 0, @new_groups );
        }
        # else: Bad block length!  Fail match, recurse no further
    }

    return( $memo{$str, $len, @groups} = $ret );
}

foreach (1 .. 2) {
    say ""Part $_: "", sum map { &recurse( $_->{str}, 0, $_->{groups}->@* ) } $input[$_]->@*;
}
"
5ENnUiVy,Untitled,LukeSavefrogs,JavaScript,Tuesday 12th of December 2023 03:20:40 AM CDT,"function sleepAsync (milliseconds) {
  return new Promise(resolve => setTimeout(() => resolve(`Elapsed ${milliseconds} ms`), milliseconds))
}
function sleepCallback (milliseconds, callback) {
  new Promise(resolve => setTimeout(() => resolve(`Elapsed ${milliseconds} ms`), milliseconds)).then(callback)
}

function withCallback (data, callback) {
  console.log(""Start"")
  sleepCallback(5000, (data) => {
    console.log(""Data:"", data)
  })
  console.log(""End"")
}

async function withoutCallback () {
  console.log(""Start"")
  const data = await sleepAsync(5000)
  console.log(""Data:"", data)
  console.log(""End"")
}"
1LEr3q7q,DoDock,D98rolb,Delphi,Tuesday 12th of December 2023 02:33:36 AM CDT,"procedure TControl.DoDock(NewDockSite: TWinControl; var ARect: TRect);
begin
  { Erase TControls before UpdateboundsRect modifies position }
  if not (Self is TWinControl) then InvalidateControl(Visible, False);
  if Parent <> NewDockSite then
    UpdateBoundsRect(ARect) else
    BoundsRect := ARect;

{ The last line is the problem
Before call width is 154 and height is 774.
After call that set parent to nil 
is width 249 and height is 554}
  if (NewDockSite = nil) or (NewDockSite = NullDockSite) then Parent := nil;   
end;"
xJ7iGrNX,Undock,D98rolb,Delphi,Tuesday 12th of December 2023 02:27:17 AM CDT,"procedure TRightPaneForm.Undock(const aForm: TCustomForm);
var
 Rect: TRect;
begin
  Rect.Left := Left;
  Rect.Top := Top;
  Rect.Width := Width;
  Rect.Height := Height;
  Rect := ClientToScreen(Rect);
  ManualFloat(Rect);
end;"
3xqgRMQm,js,AleksandarKrastinkov,JavaScript,Tuesday 12th of December 2023 02:22:54 AM CDT,"const wrapper = document.querySelector('.wrapper');
const loginLink = document.querySelector('.login-link');
const RegisterLink = document.querySelector('.register-link');
const btnPopup = document.querySelector('.action_btn');
const iconClose = document.querySelector('.icon-close');
RegisterLink.addEventListener('click', () => {wrapper.classList.add('active')});
loginLink.addEventListener('click', () => {wrapper.classList.remove('active')});
btnPopup.addEventListener('click', () => {wrapper.classList.add('active-popup')});
iconClose.addEventListener('click', () => {wrapper.classList.remove('active-popup')});





"
puL3QGHa,Nigerian scammers [12-12-1/2023],bombaires,AIMMS,Tuesday 12th of December 2023 01:59:39 AM CDT,"<a href=""mailto:amancioortega79@gmail.com"">amancioortega79@gmail.com</a>
<a href=""mailto:a.mancio.ort.e.ga7.9@gmail.com"">a.mancio.ort.e.ga7.9@gmail.com</a>
<a href=""mailto:a.mancio.o.rte.ga7.9@gmail.com"">a.mancio.o.rte.ga7.9@gmail.com</a>
<a href=""mailto:a.ma.n.c.i.oor.te.g.a7.9@gmail.com"">a.ma.n.c.i.oor.te.g.a7.9@gmail.com</a>
<a href=""mailto:a.m.ancioort.ega79@gmail.com"">a.m.ancioort.ega79@gmail.com</a>
<a href=""mailto:a.mancio.or.t.e.g.a.7.9@gmail.com"">a.mancio.or.t.e.g.a.7.9@gmail.com</a>
<a href=""mailto:am.a.n.c.io.o.rte.g.a7.9@gmail.com"">am.a.n.c.io.o.rte.g.a7.9@gmail.com</a>
<a href=""mailto:a.ma.n.c.ioo.rte.g.a7.9@gmail.com"">a.ma.n.c.ioo.rte.g.a7.9@gmail.com</a>
<a href=""mailto:ama.n.cioortega79@gmail.com"">ama.n.cioortega79@gmail.com</a>
<a href=""mailto:am.an.cioo.rte.ga7.9@gmail.com"">am.an.cioo.rte.ga7.9@gmail.com</a>
<a href=""mailto:a.ma.nci.oor.t.e.ga.79@gmail.com"">a.ma.nci.oor.t.e.ga.79@gmail.com</a>
<a href=""mailto:a.m.an.cioor.te.ga7.9@gmail.com"">a.m.an.cioor.te.ga7.9@gmail.com</a>
<a href=""mailto:ama.nci.o.o.rte.g.a7.9@gmail.com"">ama.nci.o.o.rte.g.a7.9@gmail.com</a>
<a href=""mailto:ama.nc.i.o.o.r.teg.a.7.9@gmail.com"">ama.nc.i.o.o.r.teg.a.7.9@gmail.com</a>
<a href=""mailto:a.m.ancio.o.rt.ega.79@gmail.com"">a.m.ancio.o.rt.ega.79@gmail.com</a>
<a href=""mailto:a.m.an.c.ioo.r.te.g.a79@gmail.com"">a.m.an.c.ioo.r.te.g.a79@gmail.com</a>
<a href=""mailto:a.m.a.n.c.i.oo.rtega79@gmail.com"">a.m.a.n.c.i.oo.rtega79@gmail.com</a>
<a href=""mailto:amanc.io.o.r.t.e.ga7.9@gmail.com"">amanc.io.o.r.t.e.ga7.9@gmail.com</a>
<a href=""mailto:a.m.a.n.c.ioo.rt.ega7.9@gmail.com"">a.m.a.n.c.ioo.rt.ega7.9@gmail.com</a>
<a href=""mailto:am.ancio.or.t.eg.a.79@gmail.com"">am.ancio.or.t.eg.a.79@gmail.com</a>
<a href=""mailto:am.an.ci.o.o.rteg.a7.9@gmail.com"">am.an.ci.o.o.rteg.a7.9@gmail.com</a>
<a href=""mailto:a.man.cioorteg.a.7.9@gmail.com"">a.man.cioorteg.a.7.9@gmail.com</a>
<a href=""mailto:am.a.n.c.i.oo.rteg.a79@gmail.com"">am.a.n.c.i.oo.rteg.a79@gmail.com</a>
<a href=""mailto:a.m.anc.ioorte.g.a79@gmail.com"">a.m.anc.ioorte.g.a79@gmail.com</a>
<a href=""mailto:am.an.cioorteg.a7.9@gmail.com"">am.an.cioorteg.a7.9@gmail.com</a>
<a href=""mailto:a.manci.oor.t.e.g.a.79@gmail.com"">a.manci.oor.t.e.g.a.79@gmail.com</a>
<a href=""mailto:am.a.nc.ioor.t.eg.a79@gmail.com"">am.a.nc.ioor.t.eg.a79@gmail.com</a>
<a href=""mailto:a.m.anci.oor.t.e.ga.79@gmail.com"">a.m.anci.oor.t.e.ga.79@gmail.com</a>
<a href=""mailto:amancio.o.rte.g.a.7.9@gmail.com"">amancio.o.rte.g.a.7.9@gmail.com</a>
<a href=""mailto:a.manc.i.oo.rt.e.g.a79@gmail.com"">a.manc.i.oo.rt.e.g.a79@gmail.com</a>
<a href=""mailto:a.ma.nci.o.or.t.e.ga.7.9@gmail.com"">a.ma.nci.o.or.t.e.ga.7.9@gmail.com</a>
<a href=""mailto:aman.c.io.ortega79@gmail.com"">aman.c.io.ortega79@gmail.com</a>
<a href=""mailto:aman.c.io.o.r.te.g.a.7.9@gmail.com"">aman.c.io.o.r.te.g.a.7.9@gmail.com</a>
<a href=""mailto:a.m.an.c.ioo.r.tega79@gmail.com"">a.m.an.c.ioo.r.tega79@gmail.com</a>
<a href=""mailto:am.a.nc.i.o.o.rt.e.g.a7.9@gmail.com"">am.a.nc.i.o.o.rt.e.g.a7.9@gmail.com</a>
<a href=""mailto:a.m.a.nc.i.o.o.rt.e.ga7.9@gmail.com"">a.m.a.nc.i.o.o.rt.e.ga7.9@gmail.com</a>
<a href=""mailto:a.m.a.n.cio.o.r.tega.7.9@gmail.com"">a.m.a.n.cio.o.r.tega.7.9@gmail.com</a>
<a href=""mailto:ama.nc.ioor.teg.a7.9@gmail.com"">ama.nc.ioor.teg.a7.9@gmail.com</a>
<a href=""mailto:a.mancio.o.r.t.ega7.9@gmail.com"">a.mancio.o.r.t.ega7.9@gmail.com</a>
<a href=""mailto:amancioorte.ga.7.9@gmail.com"">amancioorte.ga.7.9@gmail.com</a>
<a href=""mailto:aman.ci.o.o.rt.e.g.a.79@gmail.com"">aman.ci.o.o.rt.e.g.a.79@gmail.com</a>
<a href=""mailto:a.m.a.n.ci.o.o.rte.g.a7.9@gmail.com"">a.m.a.n.ci.o.o.rte.g.a7.9@gmail.com</a>
<a href=""mailto:am.a.nci.oo.r.te.ga.7.9@gmail.com"">am.a.nci.oo.r.te.ga.7.9@gmail.com</a>
<a href=""mailto:am.a.n.cioor.t.ega.7.9@gmail.com"">am.a.n.cioor.t.ega.7.9@gmail.com</a>
<a href=""mailto:am.a.n.ci.o.orte.ga7.9@gmail.com"">am.a.n.ci.o.orte.ga7.9@gmail.com</a>
<a href=""mailto:ama.nc.ioo.rteg.a7.9@gmail.com"">ama.nc.ioo.rteg.a7.9@gmail.com</a>
<a href=""mailto:a.m.an.c.i.o.o.r.t.e.g.a.79@gmail.com"">a.m.an.c.i.o.o.r.t.e.g.a.79@gmail.com</a>
<a href=""mailto:am.anc.i.o.or.t.e.g.a.79@gmail.com"">am.anc.i.o.or.t.e.g.a.79@gmail.com</a>
<a href=""mailto:amanc.io.o.r.tega79@gmail.com"">amanc.io.o.r.tega79@gmail.com</a>
<a href=""mailto:ama.n.ci.o.orte.ga79@gmail.com"">ama.n.ci.o.orte.ga79@gmail.com</a>
<a href=""mailto:am.an.cioor.te.g.a.7.9@gmail.com"">am.an.cioor.te.g.a.7.9@gmail.com</a>
<a href=""mailto:a.ma.n.cio.o.rte.ga.7.9@gmail.com"">a.ma.n.cio.o.rte.ga.7.9@gmail.com</a>
<a href=""mailto:a.manci.o.or.teg.a79@gmail.com"">a.manci.o.or.teg.a79@gmail.com</a>
<a href=""mailto:a.man.c.ioort.ega.7.9@gmail.com"">a.man.c.ioort.ega.7.9@gmail.com</a>
<a href=""mailto:am.an.ci.oo.rt.e.g.a.7.9@gmail.com"">am.an.ci.oo.rt.e.g.a.7.9@gmail.com</a>
<a href=""mailto:a.ma.nc.io.o.r.t.e.ga7.9@gmail.com"">a.ma.nc.io.o.r.t.e.ga7.9@gmail.com</a>
<a href=""mailto:a.m.an.c.ioo.rte.g.a79@gmail.com"">a.m.an.c.ioo.rte.g.a79@gmail.com</a>
<a href=""mailto:a.m.a.n.c.i.o.o.r.tega79@gmail.com"">a.m.a.n.c.i.o.o.r.tega79@gmail.com</a>
<a href=""mailto:a.m.a.nc.i.oo.r.t.e.ga79@gmail.com"">a.m.a.nc.i.oo.r.t.e.ga79@gmail.com</a>
<a href=""mailto:am.an.ci.o.or.t.ega7.9@gmail.com"">am.an.ci.o.or.t.ega7.9@gmail.com</a>
<a href=""mailto:am.a.ncio.or.te.g.a7.9@gmail.com"">am.a.ncio.or.te.g.a7.9@gmail.com</a>
<a href=""mailto:ama.ncioorte.ga7.9@gmail.com"">ama.ncioorte.ga7.9@gmail.com</a>
<a href=""mailto:a.m.an.c.io.orte.ga79@gmail.com"">a.m.an.c.io.orte.ga79@gmail.com</a>
<a href=""mailto:aman.cioorte.g.a.7.9@gmail.com"">aman.cioorte.g.a.7.9@gmail.com</a>
<a href=""mailto:a.m.an.ci.oor.t.eg.a.7.9@gmail.com"">a.m.an.ci.oor.t.eg.a.7.9@gmail.com</a>
<a href=""mailto:am.a.nci.oor.te.g.a79@gmail.com"">am.a.nci.oor.te.g.a79@gmail.com</a>
<a href=""mailto:a.m.a.ncioo.r.tega7.9@gmail.com"">a.m.a.ncioo.r.tega7.9@gmail.com</a>
<a href=""mailto:ama.nci.oort.ega.7.9@gmail.com"">ama.nci.oort.ega.7.9@gmail.com</a>
<a href=""mailto:a.man.ci.o.o.rteg.a7.9@gmail.com"">a.man.ci.o.o.rteg.a7.9@gmail.com</a>
<a href=""mailto:am.a.n.cio.or.tega.7.9@gmail.com"">am.a.n.cio.or.tega.7.9@gmail.com</a>
<a href=""mailto:a.ma.nci.oort.e.ga7.9@gmail.com"">a.ma.nci.oort.e.ga7.9@gmail.com</a>
<a href=""mailto:a.man.cioo.rt.ega.79@gmail.com"">a.man.cioo.rt.ega.79@gmail.com</a>
<a href=""mailto:a.ma.n.c.io.o.r.teg.a.7.9@gmail.com"">a.ma.n.c.io.o.r.teg.a.7.9@gmail.com</a>
<a href=""mailto:ama.ncio.ortega7.9@gmail.com"">ama.ncio.ortega7.9@gmail.com</a>
<a href=""mailto:am.a.n.c.i.oort.eg.a.7.9@gmail.com"">am.a.n.c.i.oort.eg.a.7.9@gmail.com</a>
<a href=""mailto:a.manci.oor.te.g.a79@gmail.com"">a.manci.oor.te.g.a79@gmail.com</a>
<a href=""mailto:a.m.anc.io.o.r.t.e.g.a7.9@gmail.com"">a.m.anc.io.o.r.t.e.g.a7.9@gmail.com</a>
<a href=""mailto:am.a.ncioo.r.te.g.a7.9@gmail.com"">am.a.ncioo.r.te.g.a7.9@gmail.com</a>
<a href=""mailto:ama.nc.io.or.t.e.ga.79@gmail.com"">ama.nc.io.or.t.e.ga.79@gmail.com</a>
<a href=""mailto:am.an.cio.o.rte.g.a79@gmail.com"">am.an.cio.o.rte.g.a79@gmail.com</a>
<a href=""mailto:am.a.nc.i.oorte.ga7.9@gmail.com"">am.a.nc.i.oorte.ga7.9@gmail.com</a>
<a href=""mailto:am.anci.o.o.r.te.g.a79@gmail.com"">am.anci.o.o.r.te.g.a79@gmail.com</a>
<a href=""mailto:a.ma.nc.i.oorte.g.a.79@gmail.com"">a.ma.nc.i.oorte.g.a.79@gmail.com</a>
<a href=""mailto:am.a.nc.i.oorte.ga.7.9@gmail.com"">am.a.nc.i.oorte.ga.7.9@gmail.com</a>
<a href=""mailto:amanci.o.o.r.te.ga.79@gmail.com"">amanci.o.o.r.te.ga.79@gmail.com</a>
<a href=""mailto:am.anci.oort.eg.a79@gmail.com"">am.anci.oort.eg.a79@gmail.com</a>
<a href=""mailto:a.ma.n.ci.oort.e.ga79@gmail.com"">a.ma.n.ci.oort.e.ga79@gmail.com</a>
<a href=""mailto:a.m.a.n.c.i.o.o.rt.ega.7.9@gmail.com"">a.m.a.n.c.i.o.o.rt.ega.7.9@gmail.com</a>
<a href=""mailto:a.ma.n.c.io.or.teg.a.79@gmail.com"">a.ma.n.c.io.or.teg.a.79@gmail.com</a>
<a href=""mailto:am.an.c.i.o.o.r.te.ga.7.9@gmail.com"">am.an.c.i.o.o.r.te.ga.7.9@gmail.com</a>
<a href=""mailto:a.ma.nc.i.o.o.r.t.e.ga.79@gmail.com"">a.ma.nc.i.o.o.r.t.e.ga.79@gmail.com</a>
<a href=""mailto:a.ma.nc.i.o.ortega7.9@gmail.com"">a.ma.nc.i.o.ortega7.9@gmail.com</a>
<a href=""mailto:a.ma.n.ci.o.ort.eg.a79@gmail.com"">a.ma.n.ci.o.ort.eg.a79@gmail.com</a>
<a href=""mailto:a.ma.ncioo.rt.ega.79@gmail.com"">a.ma.ncioo.rt.ega.79@gmail.com</a>
<a href=""mailto:a.m.a.ncioo.r.te.g.a7.9@gmail.com"">a.m.a.ncioo.r.te.g.a7.9@gmail.com</a>
<a href=""mailto:am.anci.oo.r.te.ga79@gmail.com"">am.anci.oo.r.te.ga79@gmail.com</a>
<a href=""mailto:a.m.anci.o.o.r.teg.a79@gmail.com"">a.m.anci.o.o.r.teg.a79@gmail.com</a>
<a href=""mailto:amancioo.rt.eg.a.7.9@gmail.com"">amancioo.rt.eg.a.7.9@gmail.com</a>
<a href=""mailto:a.ma.n.ci.o.or.te.g.a.79@gmail.com"">a.ma.n.ci.o.or.te.g.a.79@gmail.com</a>
<a href=""mailto:a.ma.nc.i.oort.e.ga79@gmail.com"">a.ma.nc.i.oort.e.ga79@gmail.com</a>
<a href=""mailto:aman.cio.o.rt.eg.a.7.9@gmail.com"">aman.cio.o.rt.eg.a.7.9@gmail.com</a>
<a href=""mailto:amanci.oor.t.e.g.a.79@gmail.com"">amanci.oor.t.e.g.a.79@gmail.com</a>
<a href=""mailto:amancioort.eg.a7.9@gmail.com"">amancioort.eg.a7.9@gmail.com</a>
<a href=""mailto:am.anci.oor.te.g.a7.9@gmail.com"">am.anci.oor.te.g.a7.9@gmail.com</a>
<a href=""mailto:a.mancio.or.t.e.ga.79@gmail.com"">a.mancio.or.t.e.ga.79@gmail.com</a>
<a href=""mailto:amanc.i.oor.teg.a.7.9@gmail.com"">amanc.i.oor.teg.a.7.9@gmail.com</a>
<a href=""mailto:aman.ci.oo.rtega.7.9@gmail.com"">aman.ci.oo.rtega.7.9@gmail.com</a>
<a href=""mailto:amancio.or.te.g.a7.9@gmail.com"">amancio.or.te.g.a7.9@gmail.com</a>
<a href=""mailto:am.a.nc.i.oo.rt.eg.a7.9@gmail.com"">am.a.nc.i.oo.rt.eg.a7.9@gmail.com</a>
<a href=""mailto:ama.n.cio.o.r.tega79@gmail.com"">ama.n.cio.o.r.tega79@gmail.com</a>
<a href=""mailto:a.m.a.nc.i.o.o.r.t.e.g.a.79@gmail.com"">a.m.a.nc.i.o.o.r.t.e.g.a.79@gmail.com</a>
<a href=""mailto:aman.cioo.r.teg.a7.9@gmail.com"">aman.cioo.r.teg.a7.9@gmail.com</a>
<a href=""mailto:am.a.ncio.o.r.te.ga79@gmail.com"">am.a.ncio.o.r.te.ga79@gmail.com</a>
<a href=""mailto:a.manci.o.or.tega7.9@gmail.com"">a.manci.o.or.tega7.9@gmail.com</a>
<a href=""mailto:ama.nci.o.or.te.g.a.7.9@gmail.com"">ama.nci.o.or.te.g.a.7.9@gmail.com</a>
<a href=""mailto:am.a.n.c.i.o.o.rteg.a.79@gmail.com"">am.a.n.c.i.o.o.rteg.a.79@gmail.com</a>
<a href=""mailto:a.man.c.io.orteg.a.79@gmail.com"">a.man.c.io.orteg.a.79@gmail.com</a>
<a href=""mailto:amanc.i.oor.te.ga.7.9@gmail.com"">amanc.i.oor.te.ga.7.9@gmail.com</a>
<a href=""mailto:a.m.a.n.cioo.r.te.g.a7.9@gmail.com"">a.m.a.n.cioo.r.te.g.a7.9@gmail.com</a>
<a href=""mailto:amanc.i.o.ortega.79@gmail.com"">amanc.i.o.ortega.79@gmail.com</a>
<a href=""mailto:am.a.n.cioo.r.te.g.a7.9@gmail.com"">am.a.n.cioo.r.te.g.a7.9@gmail.com</a>
<a href=""mailto:am.an.cio.o.rtega.7.9@gmail.com"">am.an.cio.o.rtega.7.9@gmail.com</a>
<a href=""mailto:amanc.i.oor.te.ga.79@gmail.com"">amanc.i.oor.te.ga.79@gmail.com</a>
<a href=""mailto:a.m.ancioor.te.g.a.79@gmail.com"">a.m.ancioor.te.g.a.79@gmail.com</a>
<a href=""mailto:ama.nc.io.or.tega79@gmail.com"">ama.nc.io.or.tega79@gmail.com</a>
<a href=""mailto:a.m.an.c.ioo.r.teg.a.79@gmail.com"">a.m.an.c.ioo.r.teg.a.79@gmail.com</a>
<a href=""mailto:ama.n.cio.ort.e.g.a79@gmail.com"">ama.n.cio.ort.e.g.a79@gmail.com</a>
<a href=""mailto:am.an.c.io.or.t.e.g.a7.9@gmail.com"">am.an.c.io.or.t.e.g.a7.9@gmail.com</a>
<a href=""mailto:a.m.a.nc.ioo.rt.e.ga.79@gmail.com"">a.m.a.nc.ioo.rt.e.ga.79@gmail.com</a>
<a href=""mailto:a.ma.nci.o.o.rt.e.g.a7.9@gmail.com"">a.ma.nci.o.o.rt.e.g.a7.9@gmail.com</a>
<a href=""mailto:am.a.n.c.i.oor.t.ega.79@gmail.com"">am.a.n.c.i.oor.t.ega.79@gmail.com</a>
<a href=""mailto:a.man.cio.o.r.t.eg.a7.9@gmail.com"">a.man.cio.o.r.t.eg.a7.9@gmail.com</a>
<a href=""mailto:amancioort.e.ga79@gmail.com"">amancioort.e.ga79@gmail.com</a>
<a href=""mailto:ama.n.c.i.oor.t.e.g.a.79@gmail.com"">ama.n.c.i.oor.t.e.g.a.79@gmail.com</a>
<a href=""mailto:a.ma.nc.ioo.r.te.ga79@gmail.com"">a.ma.nc.ioo.r.te.ga79@gmail.com</a>
<a href=""mailto:ama.n.cio.ortega79@gmail.com"">ama.n.cio.ortega79@gmail.com</a>
<a href=""mailto:a.m.anci.o.o.r.t.eg.a.79@gmail.com"">a.m.anci.o.o.r.t.eg.a.79@gmail.com</a>
<a href=""mailto:a.ma.nci.oo.rteg.a79@gmail.com"">a.ma.nci.oo.rteg.a79@gmail.com</a>
<a href=""mailto:a.m.a.ncio.o.r.t.eg.a.79@gmail.com"">a.m.a.ncio.o.r.t.eg.a.79@gmail.com</a>
<a href=""mailto:a.m.a.nc.i.o.or.t.ega79@gmail.com"">a.m.a.nc.i.o.or.t.ega79@gmail.com</a>
<a href=""mailto:am.an.c.io.o.r.t.e.ga.79@gmail.com"">am.an.c.io.o.r.t.e.ga.79@gmail.com</a>
<a href=""mailto:aman.cioo.r.t.e.g.a.79@gmail.com"">aman.cioo.r.t.e.g.a.79@gmail.com</a>
<a href=""mailto:am.a.nci.o.ort.eg.a.79@gmail.com"">am.a.nci.o.ort.eg.a.79@gmail.com</a>
<a href=""mailto:a.m.anc.i.o.o.r.te.g.a.79@gmail.com"">a.m.anc.i.o.o.r.te.g.a.79@gmail.com</a>
<a href=""mailto:a.m.an.c.ioort.ega7.9@gmail.com"">a.m.an.c.ioort.ega7.9@gmail.com</a>
<a href=""mailto:a.m.a.nc.i.oo.rtega7.9@gmail.com"">a.m.a.nc.i.oo.rtega7.9@gmail.com</a>
<a href=""mailto:amanc.i.o.o.rt.eg.a.7.9@gmail.com"">amanc.i.o.o.rt.eg.a.7.9@gmail.com</a>
<a href=""mailto:a.man.c.i.oo.rt.e.g.a7.9@gmail.com"">a.man.c.i.oo.rt.e.g.a7.9@gmail.com</a>
<a href=""mailto:a.m.a.n.c.io.ort.ega.7.9@gmail.com"">a.m.a.n.c.io.ort.ega.7.9@gmail.com</a>
<a href=""mailto:a.manci.oort.ega79@gmail.com"">a.manci.oort.ega79@gmail.com</a>
<a href=""mailto:aman.ci.oort.eg.a79@gmail.com"">aman.ci.oort.eg.a79@gmail.com</a>
<a href=""mailto:am.a.n.cio.orte.g.a79@gmail.com"">am.a.n.cio.orte.g.a79@gmail.com</a>
<a href=""mailto:am.ancio.o.rtega.7.9@gmail.com"">am.ancio.o.rtega.7.9@gmail.com</a>
<a href=""mailto:a.m.a.n.c.i.oort.eg.a.7.9@gmail.com"">a.m.a.n.c.i.oort.eg.a.7.9@gmail.com</a>
<a href=""mailto:ama.n.c.i.o.o.rt.ega.79@gmail.com"">ama.n.c.i.o.o.rt.ega.79@gmail.com</a>
<a href=""mailto:a.man.ci.o.orte.ga79@gmail.com"">a.man.ci.o.orte.ga79@gmail.com</a>
<a href=""mailto:a.ma.nci.oor.t.e.ga79@gmail.com"">a.ma.nci.oor.t.e.ga79@gmail.com</a>
<a href=""mailto:aman.ci.oo.rtega7.9@gmail.com"">aman.ci.oo.rtega7.9@gmail.com</a>
<a href=""mailto:am.a.n.ci.oort.eg.a.7.9@gmail.com"">am.a.n.ci.oort.eg.a.7.9@gmail.com</a>
<a href=""mailto:a.ma.ncioort.e.ga7.9@gmail.com"">a.ma.ncioort.e.ga7.9@gmail.com</a>
<a href=""mailto:am.a.nc.i.oor.te.g.a.7.9@gmail.com"">am.a.nc.i.oor.te.g.a.7.9@gmail.com</a>
<a href=""mailto:a.ma.nc.ioort.e.g.a7.9@gmail.com"">a.ma.nc.ioort.e.g.a7.9@gmail.com</a>
<a href=""mailto:aman.c.i.oo.rteg.a.7.9@gmail.com"">aman.c.i.oo.rteg.a.7.9@gmail.com</a>
<a href=""mailto:a.man.ci.o.o.r.t.e.ga79@gmail.com"">a.man.ci.o.o.r.t.e.ga79@gmail.com</a>
<a href=""mailto:a.ma.n.cioo.r.t.eg.a79@gmail.com"">a.ma.n.cioo.r.t.eg.a79@gmail.com</a>
<a href=""mailto:a.ma.n.ci.o.o.r.teg.a.7.9@gmail.com"">a.ma.n.ci.o.o.r.teg.a.7.9@gmail.com</a>
<a href=""mailto:a.man.c.ioo.r.te.ga79@gmail.com"">a.man.c.ioo.r.te.ga79@gmail.com</a>
<a href=""mailto:ama.nc.i.o.or.t.eg.a7.9@gmail.com"">ama.nc.i.o.or.t.eg.a7.9@gmail.com</a>
<a href=""mailto:a.ma.nc.i.o.o.rte.ga79@gmail.com"">a.ma.nc.i.o.o.rte.ga79@gmail.com</a>
<a href=""mailto:a.man.c.i.oort.e.ga.79@gmail.com"">a.man.c.i.oort.e.ga.79@gmail.com</a>
<a href=""mailto:a.mancioo.r.t.eg.a79@gmail.com"">a.mancioo.r.t.eg.a79@gmail.com</a>
<a href=""mailto:a.ma.n.c.i.o.o.rt.ega.7.9@gmail.com"">a.ma.n.c.i.o.o.rt.ega.7.9@gmail.com</a>
<a href=""mailto:a.man.ci.oort.eg.a.7.9@gmail.com"">a.man.ci.oort.eg.a.7.9@gmail.com</a>
<a href=""mailto:amanci.oor.tega7.9@gmail.com"">amanci.oor.tega7.9@gmail.com</a>
<a href=""mailto:a.ma.n.cioort.e.g.a.79@gmail.com"">a.ma.n.cioort.e.g.a.79@gmail.com</a>
<a href=""mailto:a.ma.n.ci.o.or.teg.a7.9@gmail.com"">a.ma.n.ci.o.or.teg.a7.9@gmail.com</a>
<a href=""mailto:am.ancio.or.t.e.ga.7.9@gmail.com"">am.ancio.or.t.e.ga.7.9@gmail.com</a>
<a href=""mailto:a.manc.io.or.t.eg.a.7.9@gmail.com"">a.manc.io.or.t.eg.a.7.9@gmail.com</a>
<a href=""mailto:aman.c.ioo.r.t.eg.a.79@gmail.com"">aman.c.ioo.r.t.eg.a.79@gmail.com</a>
<a href=""mailto:aman.c.i.oo.r.teg.a.7.9@gmail.com"">aman.c.i.oo.r.teg.a.7.9@gmail.com</a>
<a href=""mailto:a.m.anci.oo.rte.ga7.9@gmail.com"">a.m.anci.oo.rte.ga7.9@gmail.com</a>
<a href=""mailto:a.m.a.n.ci.o.orteg.a7.9@gmail.com"">a.m.a.n.ci.o.orteg.a7.9@gmail.com</a>
<a href=""mailto:a.m.anci.oorte.ga79@gmail.com"">a.m.anci.oorte.ga79@gmail.com</a>
<a href=""mailto:a.m.an.cio.or.t.e.g.a79@gmail.com"">a.m.an.cio.or.t.e.g.a79@gmail.com</a>
<a href=""mailto:am.a.nc.i.o.o.r.t.e.ga79@gmail.com"">am.a.nc.i.o.o.r.t.e.ga79@gmail.com</a>
<a href=""mailto:a.m.a.n.ci.oo.rte.g.a.79@gmail.com"">a.m.a.n.ci.oo.rte.g.a.79@gmail.com</a>
<a href=""mailto:amanci.oor.te.ga.79@gmail.com"">amanci.oor.te.ga.79@gmail.com</a>
<a href=""mailto:am.a.n.ci.o.o.r.tega7.9@gmail.com"">am.a.n.ci.o.o.r.tega7.9@gmail.com</a>
<a href=""mailto:am.an.c.i.oort.e.ga79@gmail.com"">am.an.c.i.oort.e.ga79@gmail.com</a>
<a href=""mailto:am.a.nci.o.o.r.t.e.g.a79@gmail.com"">am.a.nci.o.o.r.t.e.g.a79@gmail.com</a>
<a href=""mailto:a.m.an.c.ioor.t.eg.a79@gmail.com"">a.m.an.c.ioor.t.eg.a79@gmail.com</a>
<a href=""mailto:a.ma.n.c.ioorteg.a.7.9@gmail.com"">a.ma.n.c.ioorteg.a.7.9@gmail.com</a>
<a href=""mailto:a.m.an.c.ioortega79@gmail.com"">a.m.an.c.ioortega79@gmail.com</a>
<a href=""mailto:a.m.an.c.io.o.r.te.ga79@gmail.com"">a.m.an.c.io.o.r.te.ga79@gmail.com</a>
<a href=""mailto:aman.c.i.o.ort.eg.a7.9@gmail.com"">aman.c.i.o.ort.eg.a7.9@gmail.com</a>
<a href=""mailto:a.m.ancioor.teg.a.79@gmail.com"">a.m.ancioor.teg.a.79@gmail.com</a>
<a href=""mailto:ama.n.c.ioo.rteg.a.79@gmail.com"">ama.n.c.ioo.rteg.a.79@gmail.com</a>
<a href=""mailto:ama.n.c.ioo.r.tega.79@gmail.com"">ama.n.c.ioo.r.tega.79@gmail.com</a>
<a href=""mailto:ama.n.cioorte.ga.79@gmail.com"">ama.n.cioorte.ga.79@gmail.com</a>
<a href=""mailto:a.m.a.nc.io.o.rtega79@gmail.com"">a.m.a.nc.io.o.rtega79@gmail.com</a>
<a href=""mailto:am.a.nc.i.oort.ega.7.9@gmail.com"">am.a.nc.i.oort.ega.7.9@gmail.com</a>
<a href=""mailto:wjacob662@gmail.com"">wjacob662@gmail.com</a>
<a href=""mailto:w.j.a.cob.662@gmail.com"">w.j.a.cob.662@gmail.com</a>
<a href=""mailto:wjacob6.6.2@gmail.com"">wjacob6.6.2@gmail.com</a>
<a href=""mailto:wj.ac.o.b66.2@gmail.com"">wj.ac.o.b66.2@gmail.com</a>
<a href=""mailto:wj.ac.o.b.66.2@gmail.com"">wj.ac.o.b.66.2@gmail.com</a>
<a href=""mailto:w.j.acob.6.6.2@gmail.com"">w.j.acob.6.6.2@gmail.com</a>
<a href=""mailto:wj.acob6.62@gmail.com"">wj.acob6.62@gmail.com</a>
<a href=""mailto:wja.c.ob.662@gmail.com"">wja.c.ob.662@gmail.com</a>
<a href=""mailto:wj.a.co.b.66.2@gmail.com"">wj.a.co.b.66.2@gmail.com</a>
<a href=""mailto:w.jacob6.62@gmail.com"">w.jacob6.62@gmail.com</a>
<a href=""mailto:wj.acob6.6.2@gmail.com"">wj.acob6.6.2@gmail.com</a>
<a href=""mailto:w.jaco.b.6.6.2@gmail.com"">w.jaco.b.6.6.2@gmail.com</a>
<a href=""mailto:w.ja.cob.6.62@gmail.com"">w.ja.cob.6.62@gmail.com</a>
<a href=""mailto:w.j.a.c.ob.6.62@gmail.com"">w.j.a.c.ob.6.62@gmail.com</a>
<a href=""mailto:wj.ac.ob.662@gmail.com"">wj.ac.ob.662@gmail.com</a>
<a href=""mailto:wjaco.b66.2@gmail.com"">wjaco.b66.2@gmail.com</a>
<a href=""mailto:wja.c.ob.6.6.2@gmail.com"">wja.c.ob.6.6.2@gmail.com</a>
<a href=""mailto:wj.a.c.ob.662@gmail.com"">wj.a.c.ob.662@gmail.com</a>
<a href=""mailto:wj.a.cob6.62@gmail.com"">wj.a.cob6.62@gmail.com</a>
<a href=""mailto:w.j.a.co.b66.2@gmail.com"">w.j.a.co.b66.2@gmail.com</a>
<a href=""mailto:w.j.acob66.2@gmail.com"">w.j.acob66.2@gmail.com</a>
<a href=""mailto:w.j.aco.b6.62@gmail.com"">w.j.aco.b6.62@gmail.com</a>
<a href=""mailto:wjaco.b6.6.2@gmail.com"">wjaco.b6.6.2@gmail.com</a>
<a href=""mailto:wj.aco.b.66.2@gmail.com"">wj.aco.b.66.2@gmail.com</a>
<a href=""mailto:w.j.a.c.o.b.662@gmail.com"">w.j.a.c.o.b.662@gmail.com</a>
<a href=""mailto:w.ja.c.ob662@gmail.com"">w.ja.c.ob662@gmail.com</a>
<a href=""mailto:w.jac.ob662@gmail.com"">w.jac.ob662@gmail.com</a>
<a href=""mailto:wja.cob.6.6.2@gmail.com"">wja.cob.6.6.2@gmail.com</a>
<a href=""mailto:w.j.ac.o.b6.6.2@gmail.com"">w.j.ac.o.b6.6.2@gmail.com</a>
<a href=""mailto:wja.c.ob66.2@gmail.com"">wja.c.ob66.2@gmail.com</a>
<a href=""mailto:w.ja.co.b6.62@gmail.com"">w.ja.co.b6.62@gmail.com</a>
<a href=""mailto:wj.aco.b.662@gmail.com"">wj.aco.b.662@gmail.com</a>
<a href=""mailto:wj.a.c.o.b66.2@gmail.com"">wj.a.c.o.b66.2@gmail.com</a>
<a href=""mailto:wj.acob.6.62@gmail.com"">wj.acob.6.62@gmail.com</a>
<a href=""mailto:wj.a.cob.662@gmail.com"">wj.a.cob.662@gmail.com</a>
<a href=""mailto:w.j.a.co.b.6.6.2@gmail.com"">w.j.a.co.b.6.6.2@gmail.com</a>
<a href=""mailto:wja.co.b.66.2@gmail.com"">wja.co.b.66.2@gmail.com</a>
<a href=""mailto:w.j.a.c.o.b.66.2@gmail.com"">w.j.a.c.o.b.66.2@gmail.com</a>
<a href=""mailto:wja.cob.662@gmail.com"">wja.cob.662@gmail.com</a>
<a href=""mailto:w.ja.cob6.6.2@gmail.com"">w.ja.cob6.6.2@gmail.com</a>
<a href=""mailto:wja.cob6.62@gmail.com"">wja.cob6.62@gmail.com</a>
<a href=""mailto:w.j.a.co.b6.6.2@gmail.com"">w.j.a.co.b6.6.2@gmail.com</a>
<a href=""mailto:w.jacob.66.2@gmail.com"">w.jacob.66.2@gmail.com</a>
<a href=""mailto:w.j.a.c.ob662@gmail.com"">w.j.a.c.ob662@gmail.com</a>
<a href=""mailto:wjacob66.2@gmail.com"">wjacob66.2@gmail.com</a>
<a href=""mailto:w.j.a.co.b6.62@gmail.com"">w.j.a.co.b6.62@gmail.com</a>
<a href=""mailto:w.j.ac.ob.66.2@gmail.com"">w.j.ac.ob.66.2@gmail.com</a>
<a href=""mailto:w.ja.co.b.662@gmail.com"">w.ja.co.b.662@gmail.com</a>
<a href=""mailto:wja.c.o.b.6.6.2@gmail.com"">wja.c.o.b.6.6.2@gmail.com</a>
<a href=""mailto:wj.a.c.ob6.62@gmail.com"">wj.a.c.ob6.62@gmail.com</a>
<a href=""mailto:wj.a.co.b662@gmail.com"">wj.a.co.b662@gmail.com</a>
<a href=""mailto:w.jaco.b6.6.2@gmail.com"">w.jaco.b6.6.2@gmail.com</a>
<a href=""mailto:w.ja.co.b662@gmail.com"">w.ja.co.b662@gmail.com</a>
<a href=""mailto:w.ja.co.b.66.2@gmail.com"">w.ja.co.b.66.2@gmail.com</a>
<a href=""mailto:wj.a.c.ob.66.2@gmail.com"">wj.a.c.ob.66.2@gmail.com</a>
<a href=""mailto:wj.a.c.ob.6.6.2@gmail.com"">wj.a.c.ob.6.6.2@gmail.com</a>
<a href=""mailto:wja.c.ob6.6.2@gmail.com"">wja.c.ob6.6.2@gmail.com</a>
<a href=""mailto:wjacob.6.6.2@gmail.com"">wjacob.6.6.2@gmail.com</a>
<a href=""mailto:wjaco.b.6.6.2@gmail.com"">wjaco.b.6.6.2@gmail.com</a>
<a href=""mailto:w.j.a.c.ob66.2@gmail.com"">w.j.a.c.ob66.2@gmail.com</a>
<a href=""mailto:wja.c.o.b6.6.2@gmail.com"">wja.c.o.b6.6.2@gmail.com</a>
<a href=""mailto:wja.cob.6.62@gmail.com"">wja.cob.6.62@gmail.com</a>
<a href=""mailto:wj.aco.b.6.62@gmail.com"">wj.aco.b.6.62@gmail.com</a>
<a href=""mailto:w.jaco.b6.62@gmail.com"">w.jaco.b6.62@gmail.com</a>
<a href=""mailto:wjacob6.62@gmail.com"">wjacob6.62@gmail.com</a>
<a href=""mailto:w.ja.c.ob.6.6.2@gmail.com"">w.ja.c.ob.6.6.2@gmail.com</a>
<a href=""mailto:w.j.a.co.b.6.62@gmail.com"">w.j.a.co.b.6.62@gmail.com</a>
<a href=""mailto:wjac.ob6.6.2@gmail.com"">wjac.ob6.6.2@gmail.com</a>
<a href=""mailto:wjaco.b662@gmail.com"">wjaco.b662@gmail.com</a>
<a href=""mailto:wja.c.o.b6.62@gmail.com"">wja.c.o.b6.62@gmail.com</a>
<a href=""mailto:w.j.a.c.ob6.6.2@gmail.com"">w.j.a.c.ob6.6.2@gmail.com</a>
<a href=""mailto:w.j.a.cob.6.6.2@gmail.com"">w.j.a.cob.6.6.2@gmail.com</a>
<a href=""mailto:w.j.a.co.b.662@gmail.com"">w.j.a.co.b.662@gmail.com</a>
<a href=""mailto:w.j.acob.66.2@gmail.com"">w.j.acob.66.2@gmail.com</a>
<a href=""mailto:wj.a.c.o.b.662@gmail.com"">wj.a.c.o.b.662@gmail.com</a>
<a href=""mailto:wj.ac.ob6.62@gmail.com"">wj.ac.ob6.62@gmail.com</a>
<a href=""mailto:w.jac.o.b662@gmail.com"">w.jac.o.b662@gmail.com</a>
<a href=""mailto:wj.a.co.b66.2@gmail.com"">wj.a.co.b66.2@gmail.com</a>
<a href=""mailto:w.ja.c.o.b.6.6.2@gmail.com"">w.ja.c.o.b.6.6.2@gmail.com</a>
<a href=""mailto:wj.ac.o.b.662@gmail.com"">wj.ac.o.b.662@gmail.com</a>
<a href=""mailto:w.ja.co.b.6.6.2@gmail.com"">w.ja.co.b.6.6.2@gmail.com</a>
<a href=""mailto:wja.co.b6.6.2@gmail.com"">wja.co.b6.6.2@gmail.com</a>
<a href=""mailto:wj.ac.o.b.6.6.2@gmail.com"">wj.ac.o.b.6.6.2@gmail.com</a>
<a href=""mailto:w.j.a.cob.66.2@gmail.com"">w.j.a.cob.66.2@gmail.com</a>
<a href=""mailto:w.jacob6.6.2@gmail.com"">w.jacob6.6.2@gmail.com</a>
<a href=""mailto:w.ja.cob.6.6.2@gmail.com"">w.ja.cob.6.6.2@gmail.com</a>
<a href=""mailto:w.jaco.b.662@gmail.com"">w.jaco.b.662@gmail.com</a>
<a href=""mailto:wj.ac.ob.6.62@gmail.com"">wj.ac.ob.6.62@gmail.com</a>
<a href=""mailto:wj.a.co.b.6.6.2@gmail.com"">wj.a.co.b.6.6.2@gmail.com</a>
<a href=""mailto:wj.ac.ob662@gmail.com"">wj.ac.ob662@gmail.com</a>
<a href=""mailto:w.ja.c.ob66.2@gmail.com"">w.ja.c.ob66.2@gmail.com</a>
<a href=""mailto:w.j.ac.ob.6.6.2@gmail.com"">w.j.ac.ob.6.6.2@gmail.com</a>
<a href=""mailto:wj.a.c.o.b662@gmail.com"">wj.a.c.o.b662@gmail.com</a>
<a href=""mailto:w.j.ac.ob6.6.2@gmail.com"">w.j.ac.ob6.6.2@gmail.com</a>
<a href=""mailto:wj.a.c.o.b.6.6.2@gmail.com"">wj.a.c.o.b.6.6.2@gmail.com</a>
<a href=""mailto:w.j.a.c.o.b.6.6.2@gmail.com"">w.j.a.c.o.b.6.6.2@gmail.com</a>
<a href=""mailto:w.j.a.c.o.b6.62@gmail.com"">w.j.a.c.o.b6.62@gmail.com</a>
<a href=""mailto:w.j.acob6.6.2@gmail.com"">w.j.acob6.6.2@gmail.com</a>
<a href=""mailto:w.j.aco.b.66.2@gmail.com"">w.j.aco.b.66.2@gmail.com</a>
<a href=""mailto:w.j.acob.6.62@gmail.com"">w.j.acob.6.62@gmail.com</a>
<a href=""mailto:wj.aco.b6.6.2@gmail.com"">wj.aco.b6.6.2@gmail.com</a>
<a href=""mailto:wj.a.c.ob6.6.2@gmail.com"">wj.a.c.ob6.6.2@gmail.com</a>
<a href=""mailto:wja.c.ob662@gmail.com"">wja.c.ob662@gmail.com</a>
<a href=""mailto:wjac.o.b.6.62@gmail.com"">wjac.o.b.6.62@gmail.com</a>
<a href=""mailto:w.j.ac.ob6.62@gmail.com"">w.j.ac.ob6.62@gmail.com</a>
<a href=""mailto:w.j.a.c.ob.662@gmail.com"">w.j.a.c.ob.662@gmail.com</a>
<a href=""mailto:wjac.o.b6.62@gmail.com"">wjac.o.b6.62@gmail.com</a>
<a href=""mailto:w.ja.co.b6.6.2@gmail.com"">w.ja.co.b6.6.2@gmail.com</a>
<a href=""mailto:w.ja.c.o.b6.62@gmail.com"">w.ja.c.o.b6.62@gmail.com</a>
<a href=""mailto:w.ja.c.ob6.6.2@gmail.com"">w.ja.c.ob6.6.2@gmail.com</a>
<a href=""mailto:w.jaco.b662@gmail.com"">w.jaco.b662@gmail.com</a>
<a href=""mailto:wja.c.ob.66.2@gmail.com"">wja.c.ob.66.2@gmail.com</a>
<a href=""mailto:wja.cob662@gmail.com"">wja.cob662@gmail.com</a>
<a href=""mailto:wj.a.co.b6.6.2@gmail.com"">wj.a.co.b6.6.2@gmail.com</a>
<a href=""mailto:wjac.ob.662@gmail.com"">wjac.ob.662@gmail.com</a>
<a href=""mailto:w.j.ac.ob662@gmail.com"">w.j.ac.ob662@gmail.com</a>
<a href=""mailto:w.j.a.c.o.b6.6.2@gmail.com"">w.j.a.c.o.b6.6.2@gmail.com</a>
<a href=""mailto:w.j.ac.o.b6.62@gmail.com"">w.j.ac.o.b6.62@gmail.com</a>
<a href=""mailto:wja.c.o.b.66.2@gmail.com"">wja.c.o.b.66.2@gmail.com</a>
<a href=""mailto:w.ja.c.o.b.6.62@gmail.com"">w.ja.c.o.b.6.62@gmail.com</a>
<a href=""mailto:wj.aco.b662@gmail.com"">wj.aco.b662@gmail.com</a>
<a href=""mailto:wj.ac.ob6.6.2@gmail.com"">wj.ac.ob6.6.2@gmail.com</a>
<a href=""mailto:wja.cob.66.2@gmail.com"">wja.cob.66.2@gmail.com</a>
<a href=""mailto:wj.a.cob.6.62@gmail.com"">wj.a.cob.6.62@gmail.com</a>
<a href=""mailto:w.jac.o.b.6.6.2@gmail.com"">w.jac.o.b.6.6.2@gmail.com</a>
<a href=""mailto:wjac.o.b.66.2@gmail.com"">wjac.o.b.66.2@gmail.com</a>
<a href=""mailto:w.ja.co.b66.2@gmail.com"">w.ja.co.b66.2@gmail.com</a>
<a href=""mailto:w.j.a.c.o.b66.2@gmail.com"">w.j.a.c.o.b66.2@gmail.com</a>
<a href=""mailto:w.ja.c.ob6.62@gmail.com"">w.ja.c.ob6.62@gmail.com</a>
<a href=""mailto:w.jac.o.b.66.2@gmail.com"">w.jac.o.b.66.2@gmail.com</a>
<a href=""mailto:wj.aco.b6.62@gmail.com"">wj.aco.b6.62@gmail.com</a>
<a href=""mailto:wjaco.b.66.2@gmail.com"">wjaco.b.66.2@gmail.com</a>
<a href=""mailto:w.j.acob6.62@gmail.com"">w.j.acob6.62@gmail.com</a>
<a href=""mailto:wj.acob66.2@gmail.com"">wj.acob66.2@gmail.com</a>
<a href=""mailto:w.j.ac.ob66.2@gmail.com"">w.j.ac.ob66.2@gmail.com</a>
<a href=""mailto:w.j.aco.b662@gmail.com"">w.j.aco.b662@gmail.com</a>
<a href=""mailto:wja.co.b.6.62@gmail.com"">wja.co.b.6.62@gmail.com</a>
<a href=""mailto:w.jacob66.2@gmail.com"">w.jacob66.2@gmail.com</a>
<a href=""mailto:w.j.a.cob6.6.2@gmail.com"">w.j.a.cob6.6.2@gmail.com</a>
<a href=""mailto:wj.acob.66.2@gmail.com"">wj.acob.66.2@gmail.com</a>
<a href=""mailto:wja.co.b662@gmail.com"">wja.co.b662@gmail.com</a>
<a href=""mailto:w.jaco.b.66.2@gmail.com"">w.jaco.b.66.2@gmail.com</a>
<a href=""mailto:wjaco.b.662@gmail.com"">wjaco.b.662@gmail.com</a>
<a href=""mailto:w.j.a.c.ob.66.2@gmail.com"">w.j.a.c.ob.66.2@gmail.com</a>
<a href=""mailto:w.j.a.c.ob6.62@gmail.com"">w.j.a.c.ob6.62@gmail.com</a>
<a href=""mailto:wjac.o.b6.6.2@gmail.com"">wjac.o.b6.6.2@gmail.com</a>
<a href=""mailto:wja.cob6.6.2@gmail.com"">wja.cob6.6.2@gmail.com</a>
<a href=""mailto:wjac.o.b.662@gmail.com"">wjac.o.b.662@gmail.com</a>
<a href=""mailto:w.j.ac.o.b.6.6.2@gmail.com"">w.j.ac.o.b.6.6.2@gmail.com</a>
<a href=""mailto:w.j.aco.b.6.6.2@gmail.com"">w.j.aco.b.6.6.2@gmail.com</a>
<a href=""mailto:w.j.a.c.o.b.6.62@gmail.com"">w.j.a.c.o.b.6.62@gmail.com</a>
<a href=""mailto:w.j.aco.b6.6.2@gmail.com"">w.j.aco.b6.6.2@gmail.com</a>
<a href=""mailto:w.jac.o.b.6.62@gmail.com"">w.jac.o.b.6.62@gmail.com</a>
<a href=""mailto:w.jac.o.b.662@gmail.com"">w.jac.o.b.662@gmail.com</a>
<a href=""mailto:wjac.ob66.2@gmail.com"">wjac.ob66.2@gmail.com</a>
<a href=""mailto:w.j.ac.o.b.6.62@gmail.com"">w.j.ac.o.b.6.62@gmail.com</a>
<a href=""mailto:wj.ac.o.b6.62@gmail.com"">wj.ac.o.b6.62@gmail.com</a>
<a href=""mailto:w.j.a.c.ob.6.6.2@gmail.com"">w.j.a.c.ob.6.6.2@gmail.com</a>
<a href=""mailto:w.j.aco.b.662@gmail.com"">w.j.aco.b.662@gmail.com</a>
<a href=""mailto:wjac.o.b.6.6.2@gmail.com"">wjac.o.b.6.6.2@gmail.com</a>
<a href=""mailto:w.ja.cob.66.2@gmail.com"">w.ja.cob.66.2@gmail.com</a>
<a href=""mailto:w.jac.ob6.6.2@gmail.com"">w.jac.ob6.6.2@gmail.com</a>
<a href=""mailto:wj.acob.662@gmail.com"">wj.acob.662@gmail.com</a>
<a href=""mailto:wja.c.ob6.62@gmail.com"">wja.c.ob6.62@gmail.com</a>
<a href=""mailto:w.jac.ob.6.6.2@gmail.com"">w.jac.ob.6.6.2@gmail.com</a>
<a href=""mailto:w.ja.c.o.b662@gmail.com"">w.ja.c.o.b662@gmail.com</a>
<a href=""mailto:w.ja.c.ob.662@gmail.com"">w.ja.c.ob.662@gmail.com</a>
<a href=""mailto:w.ja.cob662@gmail.com"">w.ja.cob662@gmail.com</a>
<a href=""mailto:wj.aco.b66.2@gmail.com"">wj.aco.b66.2@gmail.com</a>
<a href=""mailto:wj.a.c.ob66.2@gmail.com"">wj.a.c.ob66.2@gmail.com</a>
<a href=""mailto:w.ja.c.ob.6.62@gmail.com"">w.ja.c.ob.6.62@gmail.com</a>
<a href=""mailto:w.ja.cob6.62@gmail.com"">w.ja.cob6.62@gmail.com</a>
<a href=""mailto:wj.a.co.b6.62@gmail.com"">wj.a.co.b6.62@gmail.com</a>
<a href=""mailto:wja.co.b66.2@gmail.com"">wja.co.b66.2@gmail.com</a>
<a href=""mailto:wjaco.b.6.62@gmail.com"">wjaco.b.6.62@gmail.com</a>
<a href=""mailto:wjac.o.b66.2@gmail.com"">wjac.o.b66.2@gmail.com</a>
<a href=""mailto:wj.a.cob.6.6.2@gmail.com"">wj.a.cob.6.6.2@gmail.com</a>
<a href=""mailto:w.jacob.662@gmail.com"">w.jacob.662@gmail.com</a>
<a href=""mailto:w.jac.o.b6.6.2@gmail.com"">w.jac.o.b6.6.2@gmail.com</a>
<a href=""mailto:wj.ac.ob.6.6.2@gmail.com"">wj.ac.ob.6.6.2@gmail.com</a>
<a href=""mailto:wj.ac.ob66.2@gmail.com"">wj.ac.ob66.2@gmail.com</a>
<a href=""mailto:wj.aco.b.6.6.2@gmail.com"">wj.aco.b.6.6.2@gmail.com</a>
<a href=""mailto:w.j.a.cob66.2@gmail.com"">w.j.a.cob66.2@gmail.com</a>
<a href=""mailto:w.jac.ob.6.62@gmail.com"">w.jac.ob.6.62@gmail.com</a>
<a href=""mailto:w.ja.c.o.b6.6.2@gmail.com"">w.ja.c.o.b6.6.2@gmail.com</a>
<a href=""mailto:wjacob.66.2@gmail.com"">wjacob.66.2@gmail.com</a>
<a href=""mailto:wj.a.cob6.6.2@gmail.com"">wj.a.cob6.6.2@gmail.com</a>
<a href=""mailto:wjac.ob.6.6.2@gmail.com"">wjac.ob.6.6.2@gmail.com</a>
<a href=""mailto:wj.a.cob66.2@gmail.com"">wj.a.cob66.2@gmail.com</a>
<a href=""mailto:wj.ac.o.b6.6.2@gmail.com"">wj.ac.o.b6.6.2@gmail.com</a>
<a href=""mailto:w.ja.c.o.b66.2@gmail.com"">w.ja.c.o.b66.2@gmail.com</a>
<a href=""mailto:w.jacob.6.62@gmail.com"">w.jacob.6.62@gmail.com</a>
<a href=""mailto:w.j.ac.ob.6.62@gmail.com"">w.j.ac.ob.6.62@gmail.com</a>
<a href=""mailto:w.j.a.co.b662@gmail.com"">w.j.a.co.b662@gmail.com</a>
<a href=""mailto:wj.a.co.b.662@gmail.com"">wj.a.co.b.662@gmail.com</a>
<a href=""mailto:wj.a.c.o.b.66.2@gmail.com"">wj.a.c.o.b.66.2@gmail.com</a>
<a href=""mailto:wjac.ob.66.2@gmail.com"">wjac.ob.66.2@gmail.com</a>
<a href=""mailto:w.j.aco.b66.2@gmail.com"">w.j.aco.b66.2@gmail.com</a>
<a href=""mailto:w.j.acob.662@gmail.com"">w.j.acob.662@gmail.com</a>
<a href=""mailto:w.ja.c.o.b.66.2@gmail.com"">w.ja.c.o.b.66.2@gmail.com</a>
<a href=""mailto:wj.a.c.ob662@gmail.com"">wj.a.c.ob662@gmail.com</a>
<a href=""mailto:john_njoku21@outlook.com"">john_njoku21@outlook.com</a>
<a href=""mailto:rolandothm@gmail.com"">rolandothm@gmail.com</a>
<a href=""mailto:rol.a.ndoth.m@gmail.com"">rol.a.ndoth.m@gmail.com</a>
<a href=""mailto:ro.land.o.t.hm@gmail.com"">ro.land.o.t.hm@gmail.com</a>
<a href=""mailto:rol.an.doth.m@gmail.com"">rol.an.doth.m@gmail.com</a>
<a href=""mailto:r.o.la.nd.o.thm@gmail.com"">r.o.la.nd.o.thm@gmail.com</a>
<a href=""mailto:rol.a.nd.o.t.h.m@gmail.com"">rol.a.nd.o.t.h.m@gmail.com</a>
<a href=""mailto:r.o.l.a.n.do.t.h.m@gmail.com"">r.o.l.a.n.do.t.h.m@gmail.com</a>
<a href=""mailto:r.o.l.a.n.d.o.t.h.m@gmail.com"">r.o.l.a.n.d.o.t.h.m@gmail.com</a>
<a href=""mailto:ro.l.a.nd.ot.hm@gmail.com"">ro.l.a.nd.ot.hm@gmail.com</a>
<a href=""mailto:r.o.l.a.nd.oth.m@gmail.com"">r.o.l.a.nd.oth.m@gmail.com</a>
<a href=""mailto:ro.l.a.nd.ot.h.m@gmail.com"">ro.l.a.nd.ot.h.m@gmail.com</a>
<a href=""mailto:r.ol.and.ot.h.m@gmail.com"">r.ol.and.ot.h.m@gmail.com</a>
<a href=""mailto:r.ol.an.doth.m@gmail.com"">r.ol.an.doth.m@gmail.com</a>
<a href=""mailto:rola.nd.o.thm@gmail.com"">rola.nd.o.thm@gmail.com</a>
<a href=""mailto:ro.lan.do.th.m@gmail.com"">ro.lan.do.th.m@gmail.com</a>
<a href=""mailto:rol.and.o.th.m@gmail.com"">rol.and.o.th.m@gmail.com</a>
<a href=""mailto:r.ol.a.ndothm@gmail.com"">r.ol.a.ndothm@gmail.com</a>
<a href=""mailto:rol.a.n.d.ot.h.m@gmail.com"">rol.a.n.d.ot.h.m@gmail.com</a>
<a href=""mailto:rola.n.d.ot.hm@gmail.com"">rola.n.d.ot.hm@gmail.com</a>
<a href=""mailto:r.o.l.and.o.th.m@gmail.com"">r.o.l.and.o.th.m@gmail.com</a>
<a href=""mailto:r.o.l.andothm@gmail.com"">r.o.l.andothm@gmail.com</a>
<a href=""mailto:ro.l.a.n.doth.m@gmail.com"">ro.l.a.n.doth.m@gmail.com</a>
<a href=""mailto:r.ol.a.nd.o.thm@gmail.com"">r.ol.a.nd.o.thm@gmail.com</a>
<a href=""mailto:r.o.l.a.n.d.o.thm@gmail.com"">r.o.l.a.n.d.o.thm@gmail.com</a>
<a href=""mailto:ro.l.ando.th.m@gmail.com"">ro.l.ando.th.m@gmail.com</a>
<a href=""mailto:r.ola.n.d.o.t.hm@gmail.com"">r.ola.n.d.o.t.hm@gmail.com</a>
<a href=""mailto:r.o.lan.d.othm@gmail.com"">r.o.lan.d.othm@gmail.com</a>
<a href=""mailto:r.o.lan.d.ot.hm@gmail.com"">r.o.lan.d.ot.hm@gmail.com</a>
<a href=""mailto:r.o.l.a.ndo.t.hm@gmail.com"">r.o.l.a.ndo.t.hm@gmail.com</a>
<a href=""mailto:rol.and.ot.hm@gmail.com"">rol.and.ot.hm@gmail.com</a>
<a href=""mailto:rol.an.do.thm@gmail.com"">rol.an.do.thm@gmail.com</a>
<a href=""mailto:r.o.l.a.n.dot.h.m@gmail.com"">r.o.l.a.n.dot.h.m@gmail.com</a>
<a href=""mailto:r.o.la.ndo.thm@gmail.com"">r.o.la.ndo.thm@gmail.com</a>
<a href=""mailto:rola.ndot.hm@gmail.com"">rola.ndot.hm@gmail.com</a>
<a href=""mailto:rol.a.n.doth.m@gmail.com"">rol.a.n.doth.m@gmail.com</a>
<a href=""mailto:rol.an.d.oth.m@gmail.com"">rol.an.d.oth.m@gmail.com</a>
<a href=""mailto:ro.land.oth.m@gmail.com"">ro.land.oth.m@gmail.com</a>
<a href=""mailto:ro.l.and.ot.h.m@gmail.com"">ro.l.and.ot.h.m@gmail.com</a>
<a href=""mailto:ro.l.a.n.d.o.t.h.m@gmail.com"">ro.l.a.n.d.o.t.h.m@gmail.com</a>
<a href=""mailto:r.o.la.nd.o.th.m@gmail.com"">r.o.la.nd.o.th.m@gmail.com</a>
<a href=""mailto:ro.la.ndo.thm@gmail.com"">ro.la.ndo.thm@gmail.com</a>
<a href=""mailto:r.o.landot.hm@gmail.com"">r.o.landot.hm@gmail.com</a>
<a href=""mailto:r.ol.a.nd.o.t.hm@gmail.com"">r.ol.a.nd.o.t.hm@gmail.com</a>
<a href=""mailto:r.o.l.ando.thm@gmail.com"">r.o.l.ando.thm@gmail.com</a>
<a href=""mailto:rol.and.o.thm@gmail.com"">rol.and.o.thm@gmail.com</a>
<a href=""mailto:rolan.do.t.h.m@gmail.com"">rolan.do.t.h.m@gmail.com</a>
<a href=""mailto:ro.lan.do.t.hm@gmail.com"">ro.lan.do.t.hm@gmail.com</a>
<a href=""mailto:r.ol.a.n.d.ot.h.m@gmail.com"">r.ol.a.n.d.ot.h.m@gmail.com</a>
<a href=""mailto:rolando.th.m@gmail.com"">rolando.th.m@gmail.com</a>
<a href=""mailto:r.o.lan.d.o.th.m@gmail.com"">r.o.lan.d.o.th.m@gmail.com</a>
<a href=""mailto:r.ola.nd.oth.m@gmail.com"">r.ola.nd.oth.m@gmail.com</a>
<a href=""mailto:rolan.d.o.thm@gmail.com"">rolan.d.o.thm@gmail.com</a>
<a href=""mailto:r.ol.and.oth.m@gmail.com"">r.ol.and.oth.m@gmail.com</a>
<a href=""mailto:ro.l.a.nd.othm@gmail.com"">ro.l.a.nd.othm@gmail.com</a>
<a href=""mailto:rola.ndo.t.hm@gmail.com"">rola.ndo.t.hm@gmail.com</a>
<a href=""mailto:r.o.l.ando.t.hm@gmail.com"">r.o.l.ando.t.hm@gmail.com</a>
<a href=""mailto:r.o.l.an.d.o.t.h.m@gmail.com"">r.o.l.an.d.o.t.h.m@gmail.com</a>
<a href=""mailto:rolan.d.ot.hm@gmail.com"">rolan.d.ot.hm@gmail.com</a>
<a href=""mailto:ro.la.ndo.t.h.m@gmail.com"">ro.la.ndo.t.h.m@gmail.com</a>
<a href=""mailto:rolandothm@gmail.com"">rolandothm@gmail.com</a>
<a href=""mailto:r.ola.n.do.t.hm@gmail.com"">r.ola.n.do.t.hm@gmail.com</a>
<a href=""mailto:r.ola.nd.o.th.m@gmail.com"">r.ola.nd.o.th.m@gmail.com</a>
<a href=""mailto:rol.a.n.do.t.hm@gmail.com"">rol.a.n.do.t.hm@gmail.com</a>
<a href=""mailto:roland.othm@gmail.com"">roland.othm@gmail.com</a>
<a href=""mailto:ro.la.n.d.ot.h.m@gmail.com"">ro.la.n.d.ot.h.m@gmail.com</a>
<a href=""mailto:rol.andot.h.m@gmail.com"">rol.andot.h.m@gmail.com</a>
<a href=""mailto:rolan.d.othm@gmail.com"">rolan.d.othm@gmail.com</a>
<a href=""mailto:rol.a.nd.ot.hm@gmail.com"">rol.a.nd.ot.hm@gmail.com</a>
<a href=""mailto:r.o.l.a.ndot.h.m@gmail.com"">r.o.l.a.ndot.h.m@gmail.com</a>
<a href=""mailto:ro.l.an.d.o.t.hm@gmail.com"">ro.l.an.d.o.t.hm@gmail.com</a>
<a href=""mailto:r.ol.an.do.thm@gmail.com"">r.ol.an.do.thm@gmail.com</a>
<a href=""mailto:r.o.l.and.o.t.h.m@gmail.com"">r.o.l.and.o.t.h.m@gmail.com</a>
<a href=""mailto:rola.n.dot.h.m@gmail.com"">rola.n.dot.h.m@gmail.com</a>
<a href=""mailto:ro.lan.dot.h.m@gmail.com"">ro.lan.dot.h.m@gmail.com</a>
<a href=""mailto:r.o.l.ando.t.h.m@gmail.com"">r.o.l.ando.t.h.m@gmail.com</a>
<a href=""mailto:r.o.lan.do.t.hm@gmail.com"">r.o.lan.do.t.hm@gmail.com</a>
<a href=""mailto:rol.andoth.m@gmail.com"">rol.andoth.m@gmail.com</a>
<a href=""mailto:rola.nd.oth.m@gmail.com"">rola.nd.oth.m@gmail.com</a>
<a href=""mailto:ro.la.ndo.th.m@gmail.com"">ro.la.ndo.th.m@gmail.com</a>
<a href=""mailto:rola.nd.o.th.m@gmail.com"">rola.nd.o.th.m@gmail.com</a>
<a href=""mailto:r.o.la.n.d.o.thm@gmail.com"">r.o.la.n.d.o.thm@gmail.com</a>
<a href=""mailto:r.ol.ando.t.hm@gmail.com"">r.ol.ando.t.hm@gmail.com</a>
<a href=""mailto:r.o.lan.d.ot.h.m@gmail.com"">r.o.lan.d.ot.h.m@gmail.com</a>
<a href=""mailto:r.ol.a.ndoth.m@gmail.com"">r.ol.a.ndoth.m@gmail.com</a>
<a href=""mailto:r.ol.and.ot.hm@gmail.com"">r.ol.and.ot.hm@gmail.com</a>
<a href=""mailto:r.ol.and.o.t.h.m@gmail.com"">r.ol.and.o.t.h.m@gmail.com</a>
<a href=""mailto:r.ol.an.do.t.h.m@gmail.com"">r.ol.an.do.t.h.m@gmail.com</a>
<a href=""mailto:ro.l.and.ot.hm@gmail.com"">ro.l.and.ot.hm@gmail.com</a>
<a href=""mailto:rola.nd.ot.h.m@gmail.com"">rola.nd.ot.h.m@gmail.com</a>
<a href=""mailto:rola.n.dothm@gmail.com"">rola.n.dothm@gmail.com</a>
<a href=""mailto:ro.l.a.nd.o.th.m@gmail.com"">ro.l.a.nd.o.th.m@gmail.com</a>
<a href=""mailto:r.o.l.a.n.d.othm@gmail.com"">r.o.l.a.n.d.othm@gmail.com</a>
<a href=""mailto:rol.a.nd.o.thm@gmail.com"">rol.a.nd.o.thm@gmail.com</a>
<a href=""mailto:r.o.l.a.ndot.hm@gmail.com"">r.o.l.a.ndot.hm@gmail.com</a>
<a href=""mailto:r.ola.n.do.th.m@gmail.com"">r.ola.n.do.th.m@gmail.com</a>
<a href=""mailto:r.olan.d.o.th.m@gmail.com"">r.olan.d.o.th.m@gmail.com</a>
<a href=""mailto:r.o.l.and.ot.h.m@gmail.com"">r.o.l.and.ot.h.m@gmail.com</a>
<a href=""mailto:r.ola.nd.o.t.hm@gmail.com"">r.ola.nd.o.t.hm@gmail.com</a>
<a href=""mailto:r.ol.and.o.t.hm@gmail.com"">r.ol.and.o.t.hm@gmail.com</a>
<a href=""mailto:rol.a.n.do.thm@gmail.com"">rol.a.n.do.thm@gmail.com</a>
<a href=""mailto:r.o.l.an.do.t.hm@gmail.com"">r.o.l.an.do.t.hm@gmail.com</a>
<a href=""mailto:rol.a.n.d.oth.m@gmail.com"">rol.a.n.d.oth.m@gmail.com</a>
<a href=""mailto:r.o.lan.dot.hm@gmail.com"">r.o.lan.dot.hm@gmail.com</a>
<a href=""mailto:r.o.lan.d.oth.m@gmail.com"">r.o.lan.d.oth.m@gmail.com</a>
<a href=""mailto:ro.l.an.dot.h.m@gmail.com"">ro.l.an.dot.h.m@gmail.com</a>
<a href=""mailto:rola.ndot.h.m@gmail.com"">rola.ndot.h.m@gmail.com</a>
<a href=""mailto:rol.a.ndo.thm@gmail.com"">rol.a.ndo.thm@gmail.com</a>
<a href=""mailto:ro.la.nd.othm@gmail.com"">ro.la.nd.othm@gmail.com</a>
<a href=""mailto:rol.an.dot.h.m@gmail.com"">rol.an.dot.h.m@gmail.com</a>
<a href=""mailto:rol.a.n.dot.hm@gmail.com"">rol.a.n.dot.hm@gmail.com</a>
<a href=""mailto:ro.l.an.d.o.thm@gmail.com"">ro.l.an.d.o.thm@gmail.com</a>
<a href=""mailto:r.ola.n.d.oth.m@gmail.com"">r.ola.n.d.oth.m@gmail.com</a>
<a href=""mailto:rol.a.ndo.t.h.m@gmail.com"">rol.a.ndo.t.h.m@gmail.com</a>
<a href=""mailto:r.o.l.a.n.d.o.t.hm@gmail.com"">r.o.l.a.n.d.o.t.hm@gmail.com</a>
<a href=""mailto:r.ol.a.nd.ot.hm@gmail.com"">r.ol.a.nd.ot.hm@gmail.com</a>
<a href=""mailto:ro.l.a.nd.o.t.h.m@gmail.com"">ro.l.a.nd.o.t.h.m@gmail.com</a>
<a href=""mailto:r.o.l.a.n.d.o.th.m@gmail.com"">r.o.l.a.n.d.o.th.m@gmail.com</a>
<a href=""mailto:r.o.landot.h.m@gmail.com"">r.o.landot.h.m@gmail.com</a>
<a href=""mailto:r.olan.dot.hm@gmail.com"">r.olan.dot.hm@gmail.com</a>
<a href=""mailto:r.o.l.and.othm@gmail.com"">r.o.l.and.othm@gmail.com</a>
<a href=""mailto:r.o.lando.t.h.m@gmail.com"">r.o.lando.t.h.m@gmail.com</a>
<a href=""mailto:ro.lan.d.ot.h.m@gmail.com"">ro.lan.d.ot.h.m@gmail.com</a>
<a href=""mailto:ro.l.an.d.o.th.m@gmail.com"">ro.l.an.d.o.th.m@gmail.com</a>
<a href=""mailto:rol.an.do.t.h.m@gmail.com"">rol.an.do.t.h.m@gmail.com</a>
<a href=""mailto:ro.l.an.dothm@gmail.com"">ro.l.an.dothm@gmail.com</a>
<a href=""mailto:rola.n.dot.hm@gmail.com"">rola.n.dot.hm@gmail.com</a>
<a href=""mailto:ro.l.a.n.d.o.thm@gmail.com"">ro.l.a.n.d.o.thm@gmail.com</a>
<a href=""mailto:r.o.la.nd.othm@gmail.com"">r.o.la.nd.othm@gmail.com</a>
<a href=""mailto:rola.n.d.o.t.hm@gmail.com"">rola.n.d.o.t.hm@gmail.com</a>
<a href=""mailto:r.o.lan.d.o.thm@gmail.com"">r.o.lan.d.o.thm@gmail.com</a>
<a href=""mailto:r.o.lando.th.m@gmail.com"">r.o.lando.th.m@gmail.com</a>
<a href=""mailto:r.o.la.n.d.o.t.hm@gmail.com"">r.o.la.n.d.o.t.hm@gmail.com</a>
<a href=""mailto:r.o.lan.dot.h.m@gmail.com"">r.o.lan.dot.h.m@gmail.com</a>
<a href=""mailto:r.ol.and.o.th.m@gmail.com"">r.ol.and.o.th.m@gmail.com</a>
<a href=""mailto:r.ola.ndo.thm@gmail.com"">r.ola.ndo.thm@gmail.com</a>
<a href=""mailto:r.o.lando.thm@gmail.com"">r.o.lando.thm@gmail.com</a>
<a href=""mailto:r.olan.do.thm@gmail.com"">r.olan.do.thm@gmail.com</a>
<a href=""mailto:ro.l.a.n.d.othm@gmail.com"">ro.l.a.n.d.othm@gmail.com</a>
<a href=""mailto:rolan.do.t.hm@gmail.com"">rolan.do.t.hm@gmail.com</a>
<a href=""mailto:ro.l.an.do.t.h.m@gmail.com"">ro.l.an.do.t.h.m@gmail.com</a>
<a href=""mailto:r.o.l.a.n.d.ot.h.m@gmail.com"">r.o.l.a.n.d.ot.h.m@gmail.com</a>
<a href=""mailto:r.o.l.a.nd.o.t.h.m@gmail.com"">r.o.l.a.nd.o.t.h.m@gmail.com</a>
<a href=""mailto:ro.l.a.n.do.th.m@gmail.com"">ro.l.a.n.do.th.m@gmail.com</a>
<a href=""mailto:rol.a.n.d.o.th.m@gmail.com"">rol.a.n.d.o.th.m@gmail.com</a>
<a href=""mailto:r.ol.and.othm@gmail.com"">r.ol.and.othm@gmail.com</a>
<a href=""mailto:rola.n.d.othm@gmail.com"">rola.n.d.othm@gmail.com</a>
<a href=""mailto:ro.lan.d.o.t.hm@gmail.com"">ro.lan.d.o.t.hm@gmail.com</a>
<a href=""mailto:r.olando.th.m@gmail.com"">r.olando.th.m@gmail.com</a>
<a href=""mailto:r.o.land.ot.hm@gmail.com"">r.o.land.ot.hm@gmail.com</a>
<a href=""mailto:rola.ndoth.m@gmail.com"">rola.ndoth.m@gmail.com</a>
<a href=""mailto:ro.l.and.o.thm@gmail.com"">ro.l.and.o.thm@gmail.com</a>
<a href=""mailto:r.o.la.n.d.o.th.m@gmail.com"">r.o.la.n.d.o.th.m@gmail.com</a>
<a href=""mailto:ro.la.n.do.t.h.m@gmail.com"">ro.la.n.do.t.h.m@gmail.com</a>
<a href=""mailto:r.o.la.nd.oth.m@gmail.com"">r.o.la.nd.oth.m@gmail.com</a>
<a href=""mailto:rolandoth.m@gmail.com"">rolandoth.m@gmail.com</a>
<a href=""mailto:r.olando.t.h.m@gmail.com"">r.olando.t.h.m@gmail.com</a>
<a href=""mailto:ro.la.nd.o.t.h.m@gmail.com"">ro.la.nd.o.t.h.m@gmail.com</a>
<a href=""mailto:r.o.l.an.d.oth.m@gmail.com"">r.o.l.an.d.oth.m@gmail.com</a>
<a href=""mailto:ro.l.an.do.thm@gmail.com"">ro.l.an.do.thm@gmail.com</a>
<a href=""mailto:r.o.lan.dothm@gmail.com"">r.o.lan.dothm@gmail.com</a>
<a href=""mailto:rola.n.doth.m@gmail.com"">rola.n.doth.m@gmail.com</a>
<a href=""mailto:r.o.l.and.oth.m@gmail.com"">r.o.l.and.oth.m@gmail.com</a>
<a href=""mailto:r.o.l.a.nd.o.th.m@gmail.com"">r.o.l.a.nd.o.th.m@gmail.com</a>
<a href=""mailto:r.oland.ot.hm@gmail.com"">r.oland.ot.hm@gmail.com</a>
<a href=""mailto:ro.l.ando.thm@gmail.com"">ro.l.ando.thm@gmail.com</a>
<a href=""mailto:r.ola.n.d.othm@gmail.com"">r.ola.n.d.othm@gmail.com</a>
<a href=""mailto:rolando.t.h.m@gmail.com"">rolando.t.h.m@gmail.com</a>
<a href=""mailto:r.o.l.a.ndo.th.m@gmail.com"">r.o.l.a.ndo.th.m@gmail.com</a>
<a href=""mailto:rola.n.d.ot.h.m@gmail.com"">rola.n.d.ot.h.m@gmail.com</a>
<a href=""mailto:ro.landot.h.m@gmail.com"">ro.landot.h.m@gmail.com</a>
<a href=""mailto:ro.l.andothm@gmail.com"">ro.l.andothm@gmail.com</a>
<a href=""mailto:r.ol.a.n.dot.hm@gmail.com"">r.ol.a.n.dot.hm@gmail.com</a>
<a href=""mailto:r.o.lando.t.hm@gmail.com"">r.o.lando.t.hm@gmail.com</a>
<a href=""mailto:rol.a.nd.o.t.hm@gmail.com"">rol.a.nd.o.t.hm@gmail.com</a>
<a href=""mailto:ro.l.a.ndot.hm@gmail.com"">ro.l.a.ndot.hm@gmail.com</a>
<a href=""mailto:r.ol.an.d.othm@gmail.com"">r.ol.an.d.othm@gmail.com</a>
<a href=""mailto:r.olan.dothm@gmail.com"">r.olan.dothm@gmail.com</a>
<a href=""mailto:r.o.l.andot.hm@gmail.com"">r.o.l.andot.hm@gmail.com</a>
<a href=""mailto:r.ol.an.d.ot.hm@gmail.com"">r.ol.an.d.ot.hm@gmail.com</a>
<a href=""mailto:rol.a.n.d.o.t.h.m@gmail.com"">rol.a.n.d.o.t.h.m@gmail.com</a>
<a href=""mailto:r.ol.a.n.d.o.thm@gmail.com"">r.ol.a.n.d.o.thm@gmail.com</a>
<a href=""mailto:ro.lan.d.o.t.h.m@gmail.com"">ro.lan.d.o.t.h.m@gmail.com</a>
<a href=""mailto:r.olandoth.m@gmail.com"">r.olandoth.m@gmail.com</a>
<a href=""mailto:r.ola.ndothm@gmail.com"">r.ola.ndothm@gmail.com</a>
<a href=""mailto:r.ol.ando.t.h.m@gmail.com"">r.ol.ando.t.h.m@gmail.com</a>
<a href=""mailto:r.o.land.ot.h.m@gmail.com"">r.o.land.ot.h.m@gmail.com</a>
<a href=""mailto:rola.n.d.o.t.h.m@gmail.com"">rola.n.d.o.t.h.m@gmail.com</a>
<a href=""mailto:r.o.l.a.ndothm@gmail.com"">r.o.l.a.ndothm@gmail.com</a>
<a href=""mailto:r.ol.an.d.ot.h.m@gmail.com"">r.ol.an.d.ot.h.m@gmail.com</a>
<a href=""mailto:r.o.la.n.dothm@gmail.com"">r.o.la.n.dothm@gmail.com</a>
<a href=""mailto:ro.l.andot.hm@gmail.com"">ro.l.andot.hm@gmail.com</a>
<a href=""mailto:rol.and.oth.m@gmail.com"">rol.and.oth.m@gmail.com</a>
<a href=""mailto:r.ol.a.n.do.t.hm@gmail.com"">r.ol.a.n.do.t.hm@gmail.com</a>
<a href=""mailto:r.ola.ndot.hm@gmail.com"">r.ola.ndot.hm@gmail.com</a>
<a href=""mailto:rol.andothm@gmail.com"">rol.andothm@gmail.com</a>
<a href=""mailto:rol.an.do.th.m@gmail.com"">rol.an.do.th.m@gmail.com</a>
<a href=""mailto:ro.l.a.n.d.ot.h.m@gmail.com"">ro.l.a.n.d.ot.h.m@gmail.com</a>
<a href=""mailto:r.o.l.a.nd.ot.hm@gmail.com"">r.o.l.a.nd.ot.hm@gmail.com</a>
<a href=""mailto:rol.an.d.ot.hm@gmail.com"">rol.an.d.ot.hm@gmail.com</a>
<a href=""mailto:r.olan.d.othm@gmail.com"">r.olan.d.othm@gmail.com</a>
<a href=""mailto:ro.la.n.do.th.m@gmail.com"">ro.la.n.do.th.m@gmail.com</a>"
B71vhxbU,Checkbox Switch,boxsnake,HTML 5,Tuesday 12th of December 2023 01:48:29 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Document</title>
    <style>
    .switch-button {
        --width: 5rem;
        --height: 2rem;
        --gap: .5rem;
        --track-bg-color: #999;
        --track-border-color: #666;
        --track-border-width: .15rem;
        --thumb-size: calc(var(--height) - 2 * var(--gap));
        --thumb-bg-color: #eee;
        --thumb-border-color: #fff;
        --thumb-border-width: .15rem;
        --animation-duration: .5s;

        display: block;
        position: relative;
        width: var(--width);
        height: var(--height);
        visibility: hidden;
    }
    .switch-button::before,
    .switch-button::after {
        box-sizing: border-box;
        display: inline-block;
        content: '';
        position: absolute;
        visibility: visible;
    }
    .switch-button::before {
        z-index: 0;
        inset: 0;
        background-color: var(--track-bg-color);
        border: var(--track-border-width) solid var(--track-border-color);
        border-radius: calc(var(--height) / 2);
    }
    .switch-button::after {
        z-index: 1;
        left: var(--gap);
        top: 50%;
        transform: translateY(-50%);
        width: var(--thumb-size);
        height: var(--thumb-size);
        background-color: var(--thumb-bg-color);
        border: var(--thumb-border-width) solid var(--thumb-border-color);
        border-radius: calc(var(--thumb-size) / 2);
        transition: ease-in-out var(--animation-duration) left;
    }
    .switch-button:checked::after {
        left: calc(var(--width) - var(--gap) - var(--thumb-size));
    }

    .gap {
        height: 1rem;
    }
    </style>
</head>
<body>
    <input class=""switch-button"" type=""checkbox"" />
    <div class=""gap""></div>
    <input class=""switch-button"" type=""checkbox"" style=""
        --width: 2rem;
        --height: .8rem;
        --gap: -.2rem;

        --track-bg-color: #fff;
        --track-border-width: .1rem;
        --track-border-color: #252525;
        --track-border-width: .1rem;
        --thumb-bg-color: #dedede;
        --thumb-border-color: #fff;
        --thumb-border-width: 0;
    "">
</body>
</html>
"
Lz15BM6W,Untitled,clown1337,C++,Tuesday 12th of December 2023 01:30:13 AM CDT,"#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstring>
#include <deque>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <limits>
#include <map>
#include <numeric>
#include <ostream>
#include <queue>
#include <random>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>

using namespace std;
/// Pragmas ///
#pragma GCC optimize(""Ofast, O3, unroll-loops"")
#pragma GCC target(""sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,fma"")
/// Defines ///
typedef long long ll;
/// consts ///
long long N = 100100;
vector<bool> used(N);
vector<vector<int>> g(N);
vector<int> dist(N);
vector<int> isPrime(N, true);
/// Geometry ///
struct Vector {
  double x, y;
  Vector() {}
  Vector(double x1, double y1) {
    x = x1;
    y = y1;
  }
  Vector(Vector a, Vector b) {
    x = b.x - a.x;
    y = b.y - a.y;
  }
  Vector operator+(Vector other) const {
    return Vector(x + other.x, y + other.y);
  }
  Vector operator-(Vector other) const {
    return Vector(x - other.x, y - other.y);
  }
  Vector operator*(double d) { return Vector(x * d, y * d); }
  double operator*(Vector other) const { return x * other.x + y * other.y; }
  long long operator^(Vector other) const { return x * other.y - y * other.x; }
  long long len2() { return x * x + y * y; }
  long long len() { return sqrt(len2()); }
};
typedef Vector Point;
double Angle(Vector a, Vector b) { return atan2(a ^ b, a * b); }

double Dist(Vector a, Vector b) { return Vector(a, b).len(); }

double Area(Point a, Point b, Point c) {
  Vector ab(a, b);
  Vector ac(a, c);
  return (double)abs(ab ^ ac) / 2;
}

istream &operator>>(istream &in, Point &p) {
  in >> p.x >> p.y;
  return in;
}

ostream &operator<<(ostream &out, Point p) {
  out << p.x << ' ' << p.y;
  return out;
}
/// GCD & LCM ///
ll gcd(ll a, ll b) { return (b ? gcd(b, a % b) : a); }

ll lcm(ll a, ll b) { return a / gcd(a, b) * b; }
/// DFS ///
void dfs(int v) {
  used[v] = true;
  for (int i = 0; i < g[v].size(); i++) {
    int u = g[v][i];
    if (!used[u])
      dfs(u);
  }
}
/// BFS ///
void bfs(int start, int end) {
  dist[start] = 0;
  used[start] = true;
  queue<int> q;
  q.push(start);
  while (!q.empty()) {
    int v = q.front();
    q.pop();
    for (int i = 0; i < g[v].size(); i++) {
      int u = g[v][i];
      if (dist[v] + 1 < dist[u]) {
        used[u] = true;
        dist[u] = dist[v] + 1;
        q.push(u);
      }
    }
  }
}
/// SIEVE ///
void sieve() {
  isPrime[0] = isPrime[1] = false;
  for (int i = 2; i < N; i++) {
    if (isPrime[i]) {
      for (int j = i * i; j < N; j += i) {
        isPrime[j] = false;
      }
    }
  }
}
/// CountDivs ///
vector<int> divs;
int countDivs(int n) {
  int cnt = 2;
  divs.push_back(1);
  divs.push_back(n);
  for (int i = 2; i * i <= n; i++) {
    if (n % i == 0) {
      cnt += 2;
      divs.push_back(i);
      divs.push_back(n / i);
      if (i * i == n) {
        cnt--;
        divs.pop_back();
      }
    }
  }
  return cnt;
}
/// BinPow ///
ll binPow(ll x, ll n) {
  if (n == 0) {
    return 1;
  }
  if (n % 2 == 0) {
    ll a = binPow(x, n / 2);
    return a * a;
  } else {
    ll a = binPow(x, n - 1);
    return x * a;
  }
}
/// Extended Euclid algorithm ///
int gcdExtended(int a, int b, int *x, int *y) {
  if (a == 0) {
    *x = 0;
    *y = 1;
    return b;
  }
  int x1, y1;
  int gcd = gcdExtended(b % a, a, &x1, &y1);
  *x = y1 - (b / a) * x1;
  *y = x1;
  return gcd;
}
/// dijstra ///
void dijkstra(ll s) {
  dist[s] = 0;
  set<pair<ll, ll>> q;
  q.emplace(dist[s], s);
  while (!q.empty()) {
    ll v = q.begin()->second;
    q.erase(q.begin());
    for (int i = 0; i < g[v].size(); ++i) {
      ll u = g[v][i].second;
      ll len = g[v][i].first;
      if (dist[u] < dist[v] + len) {
        q.erase({dist[u], u});
        dist[u] = dist[v] + len;
        q.emplace(dist[u], u);
      }
    }
  }
}
/// DSU ///
vector<int> dsu_par(1e5 + 50000);
vector<int> dsu_sz(1e5 + 50000);

ll dsu_setId(ll v) {
  if (dsu_par[v] == v)
    return v;
  else
    return dsu_par[v] = dsu_setId(dsu_par[v]);
}

void dsu_union(ll a, ll b) {
  ll x = dsu_setId(a);
  ll y = dsu_setId(b);
  if (dsu_sz[x] < dsu_sz[y])
    swap(x, y);
  dsu_par[x] = y;
  dsu_sz[x] += dsu_sz[y];
}

bool dsu_check(ll a, ll b) {
  if (dsu_setId(a) == dsu_setId(b)) {
    return true;
  } else {
    return false;
  }
}
/// segtree ///
struct segtree {
  struct node {
    int x;
  };

  vector<node> tree;
  int size;

  const node ZERO = {0};
  node one_element(int a) { return {a}; }

  node combine(node a, node b) { return {a.x + b.x}; }

  void init(int n) {
    size = 1;
    while (size < n)
      size *= 2;
    tree.assign(2 * size - 1, ZERO);
  }

  void build(vector<int> &q, int x, int lx, int rx) {
    if (rx - lx == 1) {
      if (lx < q.size()) {
        tree[x] = node({1});
      }
      return;
    }
    int m = lx + (rx - lx) / 2;
    build(q, 2 * x + 1, lx, m);
    build(q, 2 * x + 2, m, rx);
    tree[x] = combine(tree[2 * x + 1], tree[2 * x + 2]);
  }

  void build(vector<int> &q) {
    init(q.size());
    build(q, 0, 0, size);
  }

  void set(int i, int v, int x, int lx, int rx) {
    if (rx - lx == 1) {
      tree[x] = node({v});
      return;
    }
    int m = lx + (rx - lx) / 2;
    if (i < m)
      set(i, v, 2 * x + 1, lx, m);
    else
      set(i, v, 2 * x + 2, m, rx);
    tree[x] = combine(tree[2 * x + 1], tree[2 * x + 2]);
  }

  void set(int i, int v) { set(i, v, 0, 0, size); }

  int calc(int l, int r, int x, int lx, int rx) {
    if (lx >= r || rx <= l) {
      return 0;
    }
    if (lx >= l && rx <= r) {
      return tree[x].x;
    }
    int m = lx + (rx - lx) / 2;
    int s1 = calc(l, r, 2 * x + 1, lx, m);
    int s2 = calc(l, r, 2 * x + 2, m, rx);
    return s1 + s2;
  }

  int calc(int l, int r) { return calc(l, r, 0, 0, size); }
};

/// stack min ///
struct stack_min {
  vector<int> val;
  vector<int> val_min = {((ll)1e9)};

  void push(int v) {
    val.push_back(v);
    val_min.push_back(min(val_min.back(), v));
  }
  void pop() {
    val_min.pop_back();
    val.pop_back();
  }
  int get_min() { return val_min.back(); }
  int back() { return val.back(); }
};
/// queue min ///
struct queue_min {
  stack_min st1, st2;
  void push(int v) { st1.push(v); }
  void pop() {
    if (st2.val.size()) {
      st2.pop();
    } else {
      while (st1.val.size()) {
        st2.push(st1.back());
        st1.pop();
      }
      st2.pop();
    }
  }
  int get_min() { return min(st1.get_min(), st2.get_min()); }
};
/// next under
vector<int> next_under_right(vector<int> &q) {
  vector<int> st;
  vector<int> ans(q.size());
  for (int i = 0; i < q.size(); ++i) {
    while (st.size() && q[st.back()] > q[i]) {
      ans[st.back()] = i;
      st.pop_back();
    }
    st.push_back(i);
  }
  while (!st.empty()) {
    ans[st.back()] = q.size();
    st.pop_back();
  }
  return ans;
}
/// substring ///
void substring() {
  vector<ll> p_pow(s.size() + 1, 1), pr(s.size() + 1, 0);
  //
  for (int i = 0; i < s.size(); ++i) {
    p_pow[i + 1] = (p_pow[i] * p) % MOD;
  }
  //
  for (int i = 0; i < s.size(); ++i) {
    pr[i + 1] = (pr[i] * p + s[i]) % MOD;
  }
  //
  ll h = 0;
  for (int i = 0; i < t.size(); ++i) {
    h = (h * p + t[i]) % MOD;
  }
  //
  vector<int> ans;
  for (int i = 0; i <= s.size() - t.size(); ++i) {
    ll h_nw = (pr[i + t.size()] - (pr[i] * p_pow[t.size()]) + MOD * MOD) % MOD;
    if (h_nw == h) {
      ans.push_back(i);
    }
  }
  cout << ans.size() << '\n';
  for (auto &x : ans)
    cout << x << ' ';
}

/// DSU form algo ///
int p[maxn], s[maxn];

int leader(int v) { return (p[v] == v) ? v : p[v] = leader(p[v]); }

void unite(int a, int b) {
  a = leader(a), b = leader(b);
  if (s[a] > s[b])
    swap(a, b);
  s[b] += s[a];
  p[a] = b;
}

void init(n) {
  for (int i = 0; i < n; i++)
    p[i] = i, s[i] = 1;
}
/// sqrt ///
void sqrt_main() {
  // c —ç—Ç–æ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤, –∏ —Ç–∞–∫–∂–µ –∏—Ö —Ä–∞–∑–º–µ—Ä; –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ
  // –∫–æ—Ä–Ω—è
  const int maxn = 1e5, c = 330;
  int a[maxn], b[c], add[c];

  for (int i = 0; i < n; i++)
    b[i / c] += a[i];
}

int sum(int l, int r) {
  int res = 0;
  while (l <= r) {
    // –µ—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –Ω–∞—á–∞–ª–µ –±–ª–æ–∫–∞ –∏ –æ–Ω —Ü–µ–ª–∏–∫–æ–º –≤ –∑–∞–ø—Ä–æ—Å–µ
    if (l % c == 0 && l + c - 1 <= r) {
      res += b[l / c];
      l += c; // –º—ã –º–æ–∂–µ–º –ø—Ä—ã–≥–Ω—É—Ç—å —Å—Ä–∞–∑—É –Ω–∞ –±–ª–æ–∫
    } else {
      res += a[l] + add[l / c];
      l += 1;
    }
  }
  return res;
}

void upd(int l, int r, int x) {
  while (l <= r) {
    if (l % c == 0 && l + c - 1 <= r) {
      b[l / c] += c * x;
      add[l / c] += x;
      l += c;
    } else {
      b[l / c] += x;
      a[l] += x;
      l++;
    }
  }
}
/// bridjes ///
void dfs(int v, int p = -1) {
  used[v] = true;
  tin[v] = fup[v] = timer++;
  for (size_t i = 0; i < g[v].size(); ++i) {
    int to = g[v][i];
    if (to == p)
      continue;
    if (used[to])
      fup[v] = min(fup[v], tin[to]);
    else {
      dfs(to, v);
      fup[v] = min(fup[v], fup[to]);
      if (fup[to] > tin[v])
        IS_BRIDGE(v, to);
    }
  }
}

void find_bridges() {
  timer = 0;
  for (int i = 0; i < n; ++i)
    used[i] = false;
  for (int i = 0; i < n; ++i)
    if (!used[i])
      dfs(i);
}

/// cutpoints ///
void dfs(int v, int p = -1) {
  used[v] = true;
  tin[v] = fup[v] = timer++;
  int children = 0;
  for (size_t i = 0; i < g[v].size(); ++i) {
    int to = g[v][i];
    if (to == p)
      continue;
    if (used[to])
      fup[v] = min(fup[v], tin[to]);
    else {
      dfs(to, v);
      fup[v] = min(fup[v], fup[to]);
      if (fup[to] >= tin[v] && p != -1)
        IS_CUTPOINT(v);
      ++children;
    }
  }
  if (p == -1 && children > 1)
    IS_CUTPOINT(v);
}

void cutpoints_main() {
  int n;
  ... —á—Ç–µ–Ω–∏–µ n –∏ g...

      timer = 0;
  for (int i = 0; i < n; ++i)
    used[i] = false;
  dfs(0);
}
/// prima ///
vector<int> min_e(n, INF), sel_e(n, -1);
min_e[0] = 0;
for (int i = 0; i < n; ++i) {
  int v = -1;
  for (int j = 0; j < n; ++j)
    if (!used[j] && (v == -1 || min_e[j] < min_e[v]))
      v = j;
  if (min_e[v] == INF) {
    cout << ""No MST!"";
    exit(0);
  }

  used[v] = true;
  if (sel_e[v] != -1)
    cout << v << "" "" << sel_e[v] << endl;

  for (int to = 0; to < n; ++to)
    if (g[v][to] < min_e[to]) {
      min_e[to] = g[v][to];
      sel_e[to] = v;
    }
}

/// fibbonaci ///
const long M = 1000000007; // modulo
map<long, long> F;

long f(long n) {
  if (F.count(n))
    return F[n];
  long k = n / 2;
  if (n % 2 == 0) { // n=2*k
    return F[n] = (f(k) * f(k) + f(k - 1) * f(k - 1)) % M;
  } else { // n=2*k+1
    return F[n] = (f(k) * f(k + 1) + f(k - 1) * f(k)) % M;
  }
}

void fibbonaci_main() {
  long n;
  F[0] = F[1] = 1;
  while (cin >> n)
    cout << (n == 0 ? 0 : f(n - 1)) << endl;
}
/// topsort ///
void dfs(int v) {
  used[v] = true;
  for (size_t i = 0; i < g[v].size(); ++i) {
    int to = g[v][i];
    if (!used[to])
      dfs(to);
  }
  ans.push_back(v);
}

void topological_sort() {
  for (int i = 0; i < n; ++i)
    used[i] = false;
  ans.clear();
  for (int i = 0; i < n; ++i)
    if (!used[i])
      dfs(i);
  reverse(ans.begin(), ans.end());
}
/// n k ///
const int maxn = ...;
int C[maxn + 1][maxn + 1];
for (int n = 0; n <= maxn; ++n) {
  C[n][0] = C[n][n] = 1;
  for (int k = 1; k < n; ++k)
    C[n][k] = C[n - 1][k - 1] + C[n - 1][k];
}
/// hashes ///
string s, t; // –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

// —Å—á–∏—Ç–∞–µ–º –≤—Å–µ —Å—Ç–µ–ø–µ–Ω–∏ p
const int p = 31;
vector<long long> p_pow(max(s.length(), t.length()));
p_pow[0] = 1;
for (size_t i = 1; i < p_pow.size(); ++i)
  p_pow[i] = p_pow[i - 1] * p;

// —Å—á–∏—Ç–∞–µ–º —Ö—ç—à–∏ –æ—Ç –≤—Å–µ—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ —Å—Ç—Ä–æ–∫–∏ T
vector<long long> h(t.length());
for (size_t i = 0; i < t.length(); ++i) {
  h[i] = (t[i] - 'a' + 1) * p_pow[i];
  if (i)
    h[i] += h[i - 1];
}

// —Å—á–∏—Ç–∞–µ–º —Ö—ç—à –æ—Ç —Å—Ç—Ä–æ–∫–∏ S
long long h_s = 0;
for (size_t i = 0; i < s.length(); ++i)
  h_s += (s[i] - 'a' + 1) * p_pow[i];

// –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ T –¥–ª–∏–Ω—ã |S| –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏—Ö
for (size_t i = 0; i + s.length() - 1 < t.length(); ++i) {
  long long cur_h = h[i + s.length() - 1];
  if (i)
    cur_h -= h[i - 1];
  // –ø—Ä–∏–≤–æ–¥–∏–º —Ö—ç—à–∏ –∫ –æ–¥–Ω–æ–π —Å—Ç–µ–ø–µ–Ω–∏ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
  if (cur_h == h_s * p_pow[i])
    cout << i << ' ';
}
/// find comps ///
int n;
vector<int> g[MAXN];
bool used[MAXN];
vector<int> comp;

void dfs(int v) {
  used[v] = true;
  comp.push_back(v);
  for (size_t i = 0; i < g[v].size(); ++i) {
    int to = g[v][i];
    if (!used[to])
      dfs(to);
  }
}

void find_comps() {
  for (int i = 0; i < n; ++i)
    used[i] = false;
  for (int i = 0; i < n; ++i)
    if (!used[i]) {
      comp.clear();
      dfs(i);

      cout << ""Component:"";
      for (size_t j = 0; j < comp.size(); ++j)
        cout << ' ' << comp[j];
      cout << endl;
    }
}

/// –ê—Ö–æ-–∫–∞—Ä–∞—Å–∏–∫ ///
const int MAXN = 404, MOD = 1e9 + 7, sigma = 26;
 
int term[MAXN], len[MAXN], to[MAXN][sigma], link[MAXN], sz = 1;
void add_str(string s)
{
    int cur = 0;
    for(auto c: s)
    {
        if(!to[cur][c - 'a'])
        {
            to[cur][c - 'a'] = sz++;
            len[to[cur][c - 'a']] = len[cur] + 1;
        }
        cur = to[cur][c - 'a'];
    }
    term[cur] = cur; 
}
 
void push_links()
{
    int que[sz];
    int st = 0, fi = 1;
    que[0] = 0;
    while(st < fi)
    {
        int V = que[st++];
        int U = link[V];
        if(!term[V]) term[V] = term[U];
        for(int c = 0; c < sigma; c++)
            if(to[V][c])
            {
                link[to[V][c]] = V ? to[U][c] : 0;
                que[fi++] = to[V][c];
            }
            else
            {
                to[V][c] = to[U][c];
            }
    }
}
/// –¢–µ—Ä–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ ///
double l = ..., r = ..., EPS = ...; // –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
while (r - l > EPS) {
   double m1 = l + (r - l) / 3,
      m2 = r - (r - l) / 3;
   if (f (m1) < f (m2))
      l = m1;
   else
      r = m2;
}
/// knapsack ///
int knapSack(int W, int w[], int v[], int n) {
   int i, wt;
   int K[n + 1][W + 1];
   for (i = 0; i <= n; i++) {
      for (wt = 0; wt <= W; wt++) {
         if (i == 0 || wt == 0)
         K[i][wt] = 0;
         else if (w[i - 1] <= wt)
            K[i][wt] = max(v[i - 1] + K[i - 1][wt - w[i - 1]], K[i - 1][wt]);
         else
        K[i][wt] = K[i - 1][wt];
      }
   }
   return K[n][W];
}
///
def edit_distance(s1, s2):
    m, n = len(s1), len(s2)
    dp = [[0] * (n+1) for _ in range(m+1)]

    for i in range(m+1):
        for j in range(n+1):
            if i == 0:
                dp[i][j] = j
            elif j == 0:
                dp[i][j] = i
            elif s1[i-1] == s2[j-1]:
                dp[i][j] = dp[i-1][j-1]
            else:
                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])

    return dp[m][n]
/// nvp
int d[MAXN];
d[0] = -INF;
for (int i=1; i<=n; ++i)
	d[i] = INF;
 
for (int i=0; i<n; i++) {
	int j = int (upper_bound (d.begin(), d.end(), a[i]) - d.begin());
	if (d[j-1] < a[i] && a[i] < d[j])
		d[j] = a[i];
}
/// 
def edit_distance_with_allowed_ops(s1, s2, allowed_ops):
    m, n = len(s1), len(s2)
    dp = [[0] * (n+1) for _ in range(m+1)]

    for i in range(m+1):
        dp[i][0] = i

    for j in range(n+1):
        dp[0][j] = j

    for i in range(1, m+1):
        for j in range(1, n+1):
            if s1[i-1] == s2[j-1]:
                dp[i][j] = dp[i-1][j-1]
            elif allowed_ops.get((s1[i-1], s2[j-1])):
                op_cost = allowed_ops[(s1[i-1], s2[j-1])]
                dp[i][j] = min(dp[i-1][j] + op_cost[0], dp[i][j-1] + op_cost[1], dp[i-1][j-1] + op_cost[2])
            else:
                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])

    return dp[m][n]
/// –ö–¢–û
for (int i=0; i<k; ++i) {
	x[i] = a[i];
	for (int j=0; j<i; ++j) {
		x[i] = r[j][i] * (x[i] - x[j]);
 
		x[i] = x[i] % p[i];
		if (x[i] < 0)  x[i] += p[i];
	}
}
/// big
class big_integer {
    // –æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è (1 000 000 000)
    static const int BASE = 1000000000;
 
    // –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —á–∏—Å–ª–∞
    std::vector<int> _digits;
 
    // –∑–Ω–∞–∫ —á–∏—Å–ª–∞
    bool _is_negative;
 
    void _remove_leading_zeros();
    void _shift_right();
 
public:
    // –∫–ª–∞—Å—Å-–∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –±—Ä–æ—Å–∞–µ–º–æ–µ –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –Ω–∞ –Ω–æ–ª—å
    class divide_by_zero: public std::exception {  };
 
    big_integer();
    big_integer(std::string);
    big_integer(signed char);
    big_integer(unsigned char);
    big_integer(signed short);
    big_integer(unsigned short);
    big_integer(signed int);
    big_integer(unsigned int);
    big_integer(signed long);
    big_integer(unsigned long);
    big_integer(signed long long);
    big_integer(unsigned long long);
 
    friend std::ostream& operator <<(std::ostream&, const big_integer&);
    operator std::string() const;
    const big_integer operator +() const;
    const big_integer operator -() const;
    const big_integer operator ++();
    const big_integer operator ++(int);
    const big_integer operator --();
    const big_integer operator --(int);
    friend bool operator ==(const big_integer&, const big_integer&);
    friend bool operator <(const big_integer&, const big_integer&);
    friend bool operator !=(const big_integer&, const big_integer&);
    friend bool operator <=(const big_integer&, const big_integer&);
    friend bool operator >(const big_integer&, const big_integer&);
    friend bool operator >=(const big_integer&, const big_integer&);
    friend const big_integer operator +(big_integer, const big_integer&);
    big_integer& operator +=(const big_integer&);
    friend const big_integer operator -(big_integer, const big_integer&);
    big_integer& operator -=(const big_integer&);
    friend const big_integer operator *(const big_integer&, const big_integer&);
    big_integer& operator *=(const big_integer&);
    friend const big_integer operator /(const big_integer&, const big_integer&);
    big_integer& operator /=(const big_integer&);
    friend const big_integer operator %(const big_integer&, const big_integer&);
    big_integer& operator %=(const big_integer&);
 
    bool odd() const;
    bool even() const;
    const big_integer pow(big_integer) const;
};
 
// —Å–æ–∑–¥–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 0
big_integer::big_integer() {
    this->_is_negative = false;
}
 
// —Å–æ–∑–¥–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–∑ C++-—Å—Ç—Ä–æ–∫–∏
big_integer::big_integer(std::string str) {
    if (str.length() == 0) {
        this->_is_negative = false;
    }
    else {
        if (str[0] == '-') {
            str = str.substr(1);
            this->_is_negative = true;
        }
        else {
            this->_is_negative = false;
        }
 
        for (long long i = str.length(); i > 0; i -= 9) {
            if (i < 9)
                this->_digits.push_back(atoi(str.substr(0, i).c_str()));
            else
                this->_digits.push_back(atoi(str.substr(i - 9, 9).c_str()));
        }
 
        this->_remove_leading_zeros();
    }
}
 
// —É–¥–∞–ª—è–µ—Ç –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
void big_integer::_remove_leading_zeros() {
    while (this->_digits.size() > 1 && this->_digits.back() == 0) {
        this->_digits.pop_back();
    }
 
    if (this->_digits.size() == 1 && this->_digits[0] == 0) this->_is_negative = false;
}
 
// –ø–µ—á–∞—Ç–∞–µ—Ç —á–∏—Å–ª–æ –≤ –ø–æ—Ç–æ–∫ –≤—ã–≤–æ–¥–∞
std::ostream& operator <<(std::ostream& os, const big_integer& bi) {
    if (bi._digits.empty()) os << 0;
    else {
        if (bi._is_negative) os << '-';
        os << bi._digits.back();
        char old_fill = os.fill('0');
        for (long long i = static_cast<long long>(bi._digits.size()) - 2; i >= 0; --i) os << std::setw(9) << bi._digits[i];
        os.fill(old_fill);
    }
 
    return os;
}
 
// —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
bool operator ==(const big_integer& left, const big_integer& right) {
    if (left._is_negative != right._is_negative) return false;
    if (left._digits.empty()) {
        if (right._digits.empty() || (right._digits.size() == 1 && right._digits[0] == 0)) return true;
        else return false;
    }
    
    if (right._digits.empty()) {
        if (left._digits.size() == 1 && left._digits[0] == 0) return true;
        else return false;
    }
 
    if (left._digits.size() != right._digits.size()) return false;
    for (size_t i = 0; i < left._digits.size(); ++i) if (left._digits[i] != right._digits[i]) return false;
 
    return true;
}
 
// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
const big_integer big_integer::operator +() const {
    return big_integer(*this);
}
 
// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Å –¥—Ä—É–≥–∏–º –∑–Ω–∞–∫–æ–º
const big_integer big_integer::operator -() const {
    big_integer copy(*this);
    copy._is_negative = !copy._is_negative;
    return copy;
}
 
// –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ª–µ–≤—ã–π –æ–ø–µ—Ä–∞–Ω–¥ –º–µ–Ω—å—à–µ –ø—Ä–∞–≤–æ–≥–æ
bool operator <(const big_integer& left, const big_integer& right) {
    if (left == right) return false;
    if (left._is_negative) {
        if (right._is_negative) return ((-right) < (-left));
        else return true;
    }
    else if (right._is_negative) return false;
    else {
        if (left._digits.size() != right._digits.size()) {
            return left._digits.size() < right._digits.size();
        }
        else {
            for (long long i = left._digits.size() - 1; i >= 0; --i) {
                if (left._digits[i] != right._digits[i]) return left._digits[i] < right._digits[i];
            }
            
            return false;
        }
    }
}
 
// —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ –Ω–∞ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
bool operator !=(const big_integer& left, const big_integer& right) {
    return !(left == right);
}
 
// –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ª–µ–≤—ã–π –æ–ø–µ—Ä–∞–Ω–¥ –º–µ–Ω—å—à–µ –ª–∏–±–æ —Ä–∞–≤–µ–Ω –ø—Ä–∞–≤–æ–≥–æ
bool operator <=(const big_integer& left, const big_integer& right) {
    return (left < right || left == right);
}
 
// –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ª–µ–≤—ã–π –æ–ø–µ—Ä–∞–Ω–¥ –±–æ–ª—å—à–µ –ø—Ä–∞–≤–æ–≥–æ
bool operator >(const big_integer& left, const big_integer& right) {
    return !(left <= right);
}
 
// –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ª–µ–≤—ã–π –æ–ø–µ—Ä–∞–Ω–¥ –±–æ–ª—å—à–µ –ª–∏–±–æ —Ä–∞–≤–µ–Ω –ø—Ä–∞–≤–æ–≥–æ
bool operator >=(const big_integer& left, const big_integer& right) {
    return !(left < right);
}
 
// —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞
const big_integer operator +(big_integer left, const big_integer& right) {
    if (left._is_negative) {
        if (right._is_negative) return -(-left + (-right));
        else return right - (-left);
    }
    else if (right._is_negative) return left - (-right);
    int carry = 0;
    for (size_t i = 0; i < std::max(left._digits.size(), right._digits.size()) || carry != 0; ++i) {
        if (i == left._digits.size()) left._digits.push_back(0);
        left._digits[i] += carry + (i < right._digits.size() ? right._digits[i] : 0);
        carry = left._digits[i] >= big_integer::BASE;
        if (carry != 0) left._digits[i] -= big_integer::BASE;
    }
 
    return left;
}
 
// –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç –∫ —Ç–µ–∫—É—â–µ–º—É —á–∏—Å–ª—É –Ω–æ–≤–æ–µ
big_integer& big_integer::operator +=(const big_integer& value) {
    return *this = (*this + value);
}
 
// –ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
const big_integer big_integer::operator++() {
    return (*this += 1);
}
 
// –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —á–∏—Å–ª–æ –∫ —Å—Ç—Ä–æ–∫–µ
big_integer::operator std::string() const {
    std::stringstream ss;
    ss << *this;
    return ss.str();
}
 
// –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç signed char –∫ big_integer
big_integer::big_integer(signed char c) {
    if (c < 0) this->_is_negative = true;
    else this->_is_negative = false;
    this->_digits.push_back(std::abs(c));
}
 
// –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç unsigned char –∫ big_integer
big_integer::big_integer(unsigned char c) {
    this->_is_negative = false;
    this->_digits.push_back(c);
}
 
// –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç signed short –∫ big_integer
big_integer::big_integer(signed short s) {
    if (s < 0) this->_is_negative = true;
    else this->_is_negative = false;
    this->_digits.push_back(std::abs(s));
}
 
// –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç unsigned short –∫ big_integer
big_integer::big_integer(unsigned short s) {
    this->_is_negative = false;
    this->_digits.push_back(s);
}
 
// –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç signed int –∫ big_integer
big_integer::big_integer(signed int i) {
    if (i < 0) this->_is_negative = true;
    else this->_is_negative = false;
    this->_digits.push_back(std::abs(i) % big_integer::BASE);
    i /= big_integer::BASE;
    if (i != 0) this->_digits.push_back(std::abs(i));
}
 
// –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç unsigned int –∫ big_integer
big_integer::big_integer(unsigned int i) {
    this->_digits.push_back(i % big_integer::BASE);
    i /= big_integer::BASE;
    if (i != 0) this->_digits.push_back(i);
}
 
// –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç signed long –∫ big_integer
big_integer::big_integer(signed long l) {
    if (l < 0) this->_is_negative = true;
    else this->_is_negative = false;
    this->_digits.push_back(std::abs(l) % big_integer::BASE);
    l /= big_integer::BASE;
    if (l != 0) this->_digits.push_back(std::abs(l));
}
 
// –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç unsigned long –∫ big_integer
big_integer::big_integer(unsigned long l) {
    this->_digits.push_back(l % big_integer::BASE);
    l /= big_integer::BASE;
    if (l != 0) this->_digits.push_back(l);
}
 
// –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç signed long long –∫ big_integer
big_integer::big_integer(signed long long l) {
    if (l < 0) { this->_is_negative = true; l = -l; }
    else this->_is_negative = false;
    do {
        this->_digits.push_back(l % big_integer::BASE);
        l /= big_integer::BASE;
    } while (l != 0);
}
 
// –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç unsigned long long –∫ big_integer
big_integer::big_integer(unsigned long long l) {
    this->_is_negative = false;
    do {
        this->_digits.push_back(l % big_integer::BASE);
        l /= big_integer::BASE;
    } while (l != 0);
}
 
// –ø–æ—Å—Ç—Ñ–∏–∫—Å–Ω—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
const big_integer big_integer::operator ++(int) {
    *this += 1;
    return *this - 1;
}
 
// –ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–π –¥–µ–∫—Ä–µ–º–µ–Ω—Ç
const big_integer big_integer::operator --() {
    return *this -= 1;
}
 
// –ø–æ—Å—Ç—Ñ–∏–∫—Å–Ω—ã–π –¥–µ–∫—Ä–µ–º–µ–Ω—Ç
const big_integer big_integer::operator --(int) {
    *this -= 1;
    return *this + 1;
}
 
// –≤—ã—á–∏—Ç–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞
const big_integer operator -(big_integer left, const big_integer& right) {
    if (right._is_negative) return left + (-right);
    else if (left._is_negative) return -(-left + right);
    else if (left < right) return -(right - left);
    int carry = 0;
    for (size_t i = 0; i < right._digits.size() || carry != 0; ++i) {
        left._digits[i] -= carry + (i < right._digits.size() ? right._digits[i] : 0);
        carry = left._digits[i] < 0;
        if (carry != 0) left._digits[i] += big_integer::BASE;
    }
 
    left._remove_leading_zeros();
    return left;
}
 
// –≤—ã—á–∏—Ç–∞–µ—Ç –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —á–∏—Å–ª–∞ –Ω–æ–≤–æ–µ
big_integer& big_integer::operator -=(const big_integer& value) {
    return *this = (*this - value);
}
 
// –ø–µ—Ä–µ–º–Ω–æ–∂–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞
const big_integer operator *(const big_integer& left, const big_integer& right) {
    big_integer result;
    result._digits.resize(left._digits.size() + right._digits.size());
    for (size_t i = 0; i < left._digits.size(); ++i) {
        int carry = 0;
        for (size_t j = 0; j < right._digits.size() || carry != 0; ++j) {
            long long cur = result._digits[i + j] + 
                left._digits[i] * 1LL * (j < right._digits.size() ? right._digits[j] : 0) + carry;
            result._digits[i + j] = static_cast<int>(cur % big_integer::BASE);
            carry = static_cast<int>(cur / big_integer::BASE);
        }
    }
 
    result._is_negative = left._is_negative != right._is_negative;
    result._remove_leading_zeros();
    return result;
}
 
// –¥–æ–º–Ω–æ–∂–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ
big_integer& big_integer::operator *=(const big_integer& value) {
    return *this = (*this * value);
}
 
// —Å–¥–≤–∏–≥–∞–µ—Ç –≤—Å–µ —Ä–∞–∑—Ä—è–¥—ã –Ω–∞ 1 –≤–ø—Ä–∞–≤–æ (–¥–æ–º–Ω–æ–∂–∞–µ—Ç –Ω–∞ BASE)
void big_integer::_shift_right() {
    if (this->_digits.size() == 0) {
        this->_digits.push_back(0);
        return;
    }
    this->_digits.push_back(this->_digits[this->_digits.size() - 1]);
    for (size_t i = this->_digits.size() - 2; i > 0; --i) this->_digits[i] = this->_digits[i - 1];
    this->_digits[0] = 0;
}
 
// –¥–µ–ª–∏—Ç –¥–≤–∞ —á–∏—Å–ª–∞
const big_integer operator /(const big_integer& left, const big_integer& right) {
    if (right == 0) throw big_integer::divide_by_zero();
    big_integer b = right;
    b._is_negative = false;
    big_integer result, current;
    result._digits.resize(left._digits.size());
    for (long long i = static_cast<long long>(left._digits.size()) - 1; i >= 0; --i) {
        current._shift_right();
        current._digits[0] = left._digits[i];
        current._remove_leading_zeros();
        int x = 0, l = 0, r = big_integer::BASE;
        while (l <= r) {
            int m = (l + r) / 2;
            big_integer t = b * m;
            if (t <= current) {
                x = m;
                l = m + 1;
            }
            else r = m - 1;
        }
 
        result._digits[i] = x;
        current = current - b * x;
    }
 
    result._is_negative = left._is_negative != right._is_negative;
    result._remove_leading_zeros();
    return result;
}
 
// –¥–µ–ª–∏—Ç —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ
big_integer& big_integer::operator /=(const big_integer& value) {
    return *this = (*this / value);
}
 
// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –¥–≤—É—Ö —á–∏—Å–µ–ª
const big_integer operator %(const big_integer& left, const big_integer& right) {
    big_integer result = left - (left / right) * right;
    if (result._is_negative) result += right;
    return result;
}
 
// –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–º—É —á–∏—Å–ª—É –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ
big_integer& big_integer::operator %=(const big_integer& value) {
    return *this = (*this % value);
}
 
// –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ –Ω–µ—á–µ—Ç–Ω—ã–º
bool big_integer::odd() const {
    if (this->_digits.size() == 0) return false;
    return this->_digits[0] & 1;
}
 
// –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ —á–µ—Ç–Ω—ã–º
bool big_integer::even() const {
    return !this->odd();
}
 
// –≤–æ–∑–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç–µ–ø–µ–Ω—å
const big_integer big_integer::pow(big_integer n) const {
    big_integer a(*this), result(1);
    while (n != 0) {
        if (n.odd()) result *= a;
        a *= a;
        n /= 2;
    }
 
    return result;
}
void solve() {}

signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t = 1;
  // cin >> t;
  while (t--)
    solve();
  return 0;
}"
EmCzs00p,Untitled,clown1337,C++,Tuesday 12th of December 2023 01:04:06 AM CDT,"#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstring>
#include <deque>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <limits>
#include <map>
#include <numeric>
#include <ostream>
#include <queue>
#include <random>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>

using namespace std;
/// Pragmas ///
#pragma GCC optimize(""Ofast, O3, unroll-loops"")
#pragma GCC target(""sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,fma"")
/// Defines ///
typedef long long ll;
/// consts ///
long long N = 100100;
vector<bool> used(N);
vector<vector<int>> g(N);
vector<int> dist(N);
vector<int> isPrime(N, true);
/// Geometry ///
struct Vector {
  double x, y;
  Vector() {}
  Vector(double x1, double y1) {
    x = x1;
    y = y1;
  }
  Vector(Vector a, Vector b) {
    x = b.x - a.x;
    y = b.y - a.y;
  }
  Vector operator+(Vector other) const {
    return Vector(x + other.x, y + other.y);
  }
  Vector operator-(Vector other) const {
    return Vector(x - other.x, y - other.y);
  }
  Vector operator*(double d) { return Vector(x * d, y * d); }
  double operator*(Vector other) const { return x * other.x + y * other.y; }
  long long operator^(Vector other) const { return x * other.y - y * other.x; }
  long long len2() { return x * x + y * y; }
  long long len() { return sqrt(len2()); }
};
typedef Vector Point;
double Angle(Vector a, Vector b) { return atan2(a ^ b, a * b); }

double Dist(Vector a, Vector b) { return Vector(a, b).len(); }

double Area(Point a, Point b, Point c) {
  Vector ab(a, b);
  Vector ac(a, c);
  return (double)abs(ab ^ ac) / 2;
}

istream &operator>>(istream &in, Point &p) {
  in >> p.x >> p.y;
  return in;
}

ostream &operator<<(ostream &out, Point p) {
  out << p.x << ' ' << p.y;
  return out;
}
/// GCD & LCM ///
ll gcd(ll a, ll b) { return (b ? gcd(b, a % b) : a); }

ll lcm(ll a, ll b) { return a / gcd(a, b) * b; }
/// DFS ///
void dfs(int v) {
  used[v] = true;
  for (int i = 0; i < g[v].size(); i++) {
    int u = g[v][i];
    if (!used[u])
      dfs(u);
  }
}
/// BFS ///
void bfs(int start, int end) {
  dist[start] = 0;
  used[start] = true;
  queue<int> q;
  q.push(start);
  while (!q.empty()) {
    int v = q.front();
    q.pop();
    for (int i = 0; i < g[v].size(); i++) {
      int u = g[v][i];
      if (dist[v] + 1 < dist[u]) {
        used[u] = true;
        dist[u] = dist[v] + 1;
        q.push(u);
      }
    }
  }
}
/// SIEVE ///
void sieve() {
  isPrime[0] = isPrime[1] = false;
  for (int i = 2; i < N; i++) {
    if (isPrime[i]) {
      for (int j = i * i; j < N; j += i) {
        isPrime[j] = false;
      }
    }
  }
}
/// CountDivs ///
vector<int> divs;
int countDivs(int n) {
  int cnt = 2;
  divs.push_back(1);
  divs.push_back(n);
  for (int i = 2; i * i <= n; i++) {
    if (n % i == 0) {
      cnt += 2;
      divs.push_back(i);
      divs.push_back(n / i);
      if (i * i == n) {
        cnt--;
        divs.pop_back();
      }
    }
  }
  return cnt;
}
/// BinPow ///
ll binPow(ll x, ll n) {
  if (n == 0) {
    return 1;
  }
  if (n % 2 == 0) {
    ll a = binPow(x, n / 2);
    return a * a;
  } else {
    ll a = binPow(x, n - 1);
    return x * a;
  }
}
/// Extended Euclid algorithm ///
int gcdExtended(int a, int b, int *x, int *y) {
  if (a == 0) {
    *x = 0;
    *y = 1;
    return b;
  }
  int x1, y1;
  int gcd = gcdExtended(b % a, a, &x1, &y1);
  *x = y1 - (b / a) * x1;
  *y = x1;
  return gcd;
}
/// dijstra ///
void dijkstra(ll s) {
  dist[s] = 0;
  set<pair<ll, ll>> q;
  q.emplace(dist[s], s);
  while (!q.empty()) {
    ll v = q.begin()->second;
    q.erase(q.begin());
    for (int i = 0; i < g[v].size(); ++i) {
      ll u = g[v][i].second;
      ll len = g[v][i].first;
      if (dist[u] < dist[v] + len) {
        q.erase({dist[u], u});
        dist[u] = dist[v] + len;
        q.emplace(dist[u], u);
      }
    }
  }
}
/// DSU ///
vector<int> dsu_par(1e5 + 50000);
vector<int> dsu_sz(1e5 + 50000);

ll dsu_setId(ll v) {
  if (dsu_par[v] == v)
    return v;
  else
    return dsu_par[v] = dsu_setId(dsu_par[v]);
}

void dsu_union(ll a, ll b) {
  ll x = dsu_setId(a);
  ll y = dsu_setId(b);
  if (dsu_sz[x] < dsu_sz[y])
    swap(x, y);
  dsu_par[x] = y;
  dsu_sz[x] += dsu_sz[y];
}

bool dsu_check(ll a, ll b) {
  if (dsu_setId(a) == dsu_setId(b)) {
    return true;
  } else {
    return false;
  }
}
/// segtree ///
struct segtree {
  struct node {
    int x;
  };

  vector<node> tree;
  int size;

  const node ZERO = {0};
  node one_element(int a) { return {a}; }

  node combine(node a, node b) { return {a.x + b.x}; }

  void init(int n) {
    size = 1;
    while (size < n)
      size *= 2;
    tree.assign(2 * size - 1, ZERO);
  }

  void build(vector<int> &q, int x, int lx, int rx) {
    if (rx - lx == 1) {
      if (lx < q.size()) {
        tree[x] = node({1});
      }
      return;
    }
    int m = lx + (rx - lx) / 2;
    build(q, 2 * x + 1, lx, m);
    build(q, 2 * x + 2, m, rx);
    tree[x] = combine(tree[2 * x + 1], tree[2 * x + 2]);
  }

  void build(vector<int> &q) {
    init(q.size());
    build(q, 0, 0, size);
  }

  void set(int i, int v, int x, int lx, int rx) {
    if (rx - lx == 1) {
      tree[x] = node({v});
      return;
    }
    int m = lx + (rx - lx) / 2;
    if (i < m)
      set(i, v, 2 * x + 1, lx, m);
    else
      set(i, v, 2 * x + 2, m, rx);
    tree[x] = combine(tree[2 * x + 1], tree[2 * x + 2]);
  }

  void set(int i, int v) { set(i, v, 0, 0, size); }

  int calc(int l, int r, int x, int lx, int rx) {
    if (lx >= r || rx <= l) {
      return 0;
    }
    if (lx >= l && rx <= r) {
      return tree[x].x;
    }
    int m = lx + (rx - lx) / 2;
    int s1 = calc(l, r, 2 * x + 1, lx, m);
    int s2 = calc(l, r, 2 * x + 2, m, rx);
    return s1 + s2;
  }

  int calc(int l, int r) { return calc(l, r, 0, 0, size); }
};

/// stack min ///
struct stack_min {
  vector<int> val;
  vector<int> val_min = {((ll)1e9)};

  void push(int v) {
    val.push_back(v);
    val_min.push_back(min(val_min.back(), v));
  }
  void pop() {
    val_min.pop_back();
    val.pop_back();
  }
  int get_min() { return val_min.back(); }
  int back() { return val.back(); }
};
/// queue min ///
struct queue_min {
  stack_min st1, st2;
  void push(int v) { st1.push(v); }
  void pop() {
    if (st2.val.size()) {
      st2.pop();
    } else {
      while (st1.val.size()) {
        st2.push(st1.back());
        st1.pop();
      }
      st2.pop();
    }
  }
  int get_min() { return min(st1.get_min(), st2.get_min()); }
};
/// next under
vector<int> next_under_right(vector<int> &q) {
  vector<int> st;
  vector<int> ans(q.size());
  for (int i = 0; i < q.size(); ++i) {
    while (st.size() && q[st.back()] > q[i]) {
      ans[st.back()] = i;
      st.pop_back();
    }
    st.push_back(i);
  }
  while (!st.empty()) {
    ans[st.back()] = q.size();
    st.pop_back();
  }
  return ans;
}
/// substring ///
void substring() {
  vector<ll> p_pow(s.size() + 1, 1), pr(s.size() + 1, 0);
  //
  for (int i = 0; i < s.size(); ++i) {
    p_pow[i + 1] = (p_pow[i] * p) % MOD;
  }
  //
  for (int i = 0; i < s.size(); ++i) {
    pr[i + 1] = (pr[i] * p + s[i]) % MOD;
  }
  //
  ll h = 0;
  for (int i = 0; i < t.size(); ++i) {
    h = (h * p + t[i]) % MOD;
  }
  //
  vector<int> ans;
  for (int i = 0; i <= s.size() - t.size(); ++i) {
    ll h_nw = (pr[i + t.size()] - (pr[i] * p_pow[t.size()]) + MOD * MOD) % MOD;
    if (h_nw == h) {
      ans.push_back(i);
    }
  }
  cout << ans.size() << '\n';
  for (auto &x : ans)
    cout << x << ' ';
}

/// DSU form algo ///
int p[maxn], s[maxn];

int leader(int v) { return (p[v] == v) ? v : p[v] = leader(p[v]); }

void unite(int a, int b) {
  a = leader(a), b = leader(b);
  if (s[a] > s[b])
    swap(a, b);
  s[b] += s[a];
  p[a] = b;
}

void init(n) {
  for (int i = 0; i < n; i++)
    p[i] = i, s[i] = 1;
}
/// sqrt ///
void sqrt_main() {
  // c —ç—Ç–æ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤, –∏ —Ç–∞–∫–∂–µ –∏—Ö —Ä–∞–∑–º–µ—Ä; –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ
  // –∫–æ—Ä–Ω—è
  const int maxn = 1e5, c = 330;
  int a[maxn], b[c], add[c];

  for (int i = 0; i < n; i++)
    b[i / c] += a[i];
}

int sum(int l, int r) {
  int res = 0;
  while (l <= r) {
    // –µ—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –Ω–∞—á–∞–ª–µ –±–ª–æ–∫–∞ –∏ –æ–Ω —Ü–µ–ª–∏–∫–æ–º –≤ –∑–∞–ø—Ä–æ—Å–µ
    if (l % c == 0 && l + c - 1 <= r) {
      res += b[l / c];
      l += c; // –º—ã –º–æ–∂–µ–º –ø—Ä—ã–≥–Ω—É—Ç—å —Å—Ä–∞–∑—É –Ω–∞ –±–ª–æ–∫
    } else {
      res += a[l] + add[l / c];
      l += 1;
    }
  }
  return res;
}

void upd(int l, int r, int x) {
  while (l <= r) {
    if (l % c == 0 && l + c - 1 <= r) {
      b[l / c] += c * x;
      add[l / c] += x;
      l += c;
    } else {
      b[l / c] += x;
      a[l] += x;
      l++;
    }
  }
}
/// bridjes ///
void dfs(int v, int p = -1) {
  used[v] = true;
  tin[v] = fup[v] = timer++;
  for (size_t i = 0; i < g[v].size(); ++i) {
    int to = g[v][i];
    if (to == p)
      continue;
    if (used[to])
      fup[v] = min(fup[v], tin[to]);
    else {
      dfs(to, v);
      fup[v] = min(fup[v], fup[to]);
      if (fup[to] > tin[v])
        IS_BRIDGE(v, to);
    }
  }
}

void find_bridges() {
  timer = 0;
  for (int i = 0; i < n; ++i)
    used[i] = false;
  for (int i = 0; i < n; ++i)
    if (!used[i])
      dfs(i);
}

/// cutpoints ///
void dfs(int v, int p = -1) {
  used[v] = true;
  tin[v] = fup[v] = timer++;
  int children = 0;
  for (size_t i = 0; i < g[v].size(); ++i) {
    int to = g[v][i];
    if (to == p)
      continue;
    if (used[to])
      fup[v] = min(fup[v], tin[to]);
    else {
      dfs(to, v);
      fup[v] = min(fup[v], fup[to]);
      if (fup[to] >= tin[v] && p != -1)
        IS_CUTPOINT(v);
      ++children;
    }
  }
  if (p == -1 && children > 1)
    IS_CUTPOINT(v);
}

void cutpoints_main() {
  int n;
  ... —á—Ç–µ–Ω–∏–µ n –∏ g...

      timer = 0;
  for (int i = 0; i < n; ++i)
    used[i] = false;
  dfs(0);
}
/// prima ///
vector<int> min_e(n, INF), sel_e(n, -1);
min_e[0] = 0;
for (int i = 0; i < n; ++i) {
  int v = -1;
  for (int j = 0; j < n; ++j)
    if (!used[j] && (v == -1 || min_e[j] < min_e[v]))
      v = j;
  if (min_e[v] == INF) {
    cout << ""No MST!"";
    exit(0);
  }

  used[v] = true;
  if (sel_e[v] != -1)
    cout << v << "" "" << sel_e[v] << endl;

  for (int to = 0; to < n; ++to)
    if (g[v][to] < min_e[to]) {
      min_e[to] = g[v][to];
      sel_e[to] = v;
    }
}

/// fibbonaci ///
const long M = 1000000007; // modulo
map<long, long> F;

long f(long n) {
  if (F.count(n))
    return F[n];
  long k = n / 2;
  if (n % 2 == 0) { // n=2*k
    return F[n] = (f(k) * f(k) + f(k - 1) * f(k - 1)) % M;
  } else { // n=2*k+1
    return F[n] = (f(k) * f(k + 1) + f(k - 1) * f(k)) % M;
  }
}

void fibbonaci_main() {
  long n;
  F[0] = F[1] = 1;
  while (cin >> n)
    cout << (n == 0 ? 0 : f(n - 1)) << endl;
}
/// topsort ///
void dfs(int v) {
  used[v] = true;
  for (size_t i = 0; i < g[v].size(); ++i) {
    int to = g[v][i];
    if (!used[to])
      dfs(to);
  }
  ans.push_back(v);
}

void topological_sort() {
  for (int i = 0; i < n; ++i)
    used[i] = false;
  ans.clear();
  for (int i = 0; i < n; ++i)
    if (!used[i])
      dfs(i);
  reverse(ans.begin(), ans.end());
}
/// n k ///
const int maxn = ...;
int C[maxn + 1][maxn + 1];
for (int n = 0; n <= maxn; ++n) {
  C[n][0] = C[n][n] = 1;
  for (int k = 1; k < n; ++k)
    C[n][k] = C[n - 1][k - 1] + C[n - 1][k];
}
/// hashes ///
string s, t; // –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

// —Å—á–∏—Ç–∞–µ–º –≤—Å–µ —Å—Ç–µ–ø–µ–Ω–∏ p
const int p = 31;
vector<long long> p_pow(max(s.length(), t.length()));
p_pow[0] = 1;
for (size_t i = 1; i < p_pow.size(); ++i)
  p_pow[i] = p_pow[i - 1] * p;

// —Å—á–∏—Ç–∞–µ–º —Ö—ç—à–∏ –æ—Ç –≤—Å–µ—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ —Å—Ç—Ä–æ–∫–∏ T
vector<long long> h(t.length());
for (size_t i = 0; i < t.length(); ++i) {
  h[i] = (t[i] - 'a' + 1) * p_pow[i];
  if (i)
    h[i] += h[i - 1];
}

// —Å—á–∏—Ç–∞–µ–º —Ö—ç—à –æ—Ç —Å—Ç—Ä–æ–∫–∏ S
long long h_s = 0;
for (size_t i = 0; i < s.length(); ++i)
  h_s += (s[i] - 'a' + 1) * p_pow[i];

// –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ T –¥–ª–∏–Ω—ã |S| –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏—Ö
for (size_t i = 0; i + s.length() - 1 < t.length(); ++i) {
  long long cur_h = h[i + s.length() - 1];
  if (i)
    cur_h -= h[i - 1];
  // –ø—Ä–∏–≤–æ–¥–∏–º —Ö—ç—à–∏ –∫ –æ–¥–Ω–æ–π —Å—Ç–µ–ø–µ–Ω–∏ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
  if (cur_h == h_s * p_pow[i])
    cout << i << ' ';
}
/// find comps ///
int n;
vector<int> g[MAXN];
bool used[MAXN];
vector<int> comp;

void dfs(int v) {
  used[v] = true;
  comp.push_back(v);
  for (size_t i = 0; i < g[v].size(); ++i) {
    int to = g[v][i];
    if (!used[to])
      dfs(to);
  }
}

void find_comps() {
  for (int i = 0; i < n; ++i)
    used[i] = false;
  for (int i = 0; i < n; ++i)
    if (!used[i]) {
      comp.clear();
      dfs(i);

      cout << ""Component:"";
      for (size_t j = 0; j < comp.size(); ++j)
        cout << ' ' << comp[j];
      cout << endl;
    }
}

/// –ê—Ö–æ-–∫–∞—Ä–∞—Å–∏–∫ ///
const int MAXN = 404, MOD = 1e9 + 7, sigma = 26;
 
int term[MAXN], len[MAXN], to[MAXN][sigma], link[MAXN], sz = 1;
void add_str(string s)
{
    int cur = 0;
    for(auto c: s)
    {
        if(!to[cur][c - 'a'])
        {
            to[cur][c - 'a'] = sz++;
            len[to[cur][c - 'a']] = len[cur] + 1;
        }
        cur = to[cur][c - 'a'];
    }
    term[cur] = cur; 
}
 
void push_links()
{
    int que[sz];
    int st = 0, fi = 1;
    que[0] = 0;
    while(st < fi)
    {
        int V = que[st++];
        int U = link[V];
        if(!term[V]) term[V] = term[U];
        for(int c = 0; c < sigma; c++)
            if(to[V][c])
            {
                link[to[V][c]] = V ? to[U][c] : 0;
                que[fi++] = to[V][c];
            }
            else
            {
                to[V][c] = to[U][c];
            }
    }
}
/// –¢–µ—Ä–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ ///
double l = ..., r = ..., EPS = ...; // –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
while (r - l > EPS) {
   double m1 = l + (r - l) / 3,
      m2 = r - (r - l) / 3;
   if (f (m1) < f (m2))
      l = m1;
   else
      r = m2;
}
/// knapsack ///
int knapSack(int W, int w[], int v[], int n) {
   int i, wt;
   int K[n + 1][W + 1];
   for (i = 0; i <= n; i++) {
      for (wt = 0; wt <= W; wt++) {
         if (i == 0 || wt == 0)
         K[i][wt] = 0;
         else if (w[i - 1] <= wt)
            K[i][wt] = max(v[i - 1] + K[i - 1][wt - w[i - 1]], K[i - 1][wt]);
         else
        K[i][wt] = K[i - 1][wt];
      }
   }
   return K[n][W];
}
///
def edit_distance(s1, s2):
    m, n = len(s1), len(s2)
    dp = [[0] * (n+1) for _ in range(m+1)]

    for i in range(m+1):
        for j in range(n+1):
            if i == 0:
                dp[i][j] = j
            elif j == 0:
                dp[i][j] = i
            elif s1[i-1] == s2[j-1]:
                dp[i][j] = dp[i-1][j-1]
            else:
                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])

    return dp[m][n]
/// nvp
int d[MAXN];
d[0] = -INF;
for (int i=1; i<=n; ++i)
	d[i] = INF;
 
for (int i=0; i<n; i++) {
	int j = int (upper_bound (d.begin(), d.end(), a[i]) - d.begin());
	if (d[j-1] < a[i] && a[i] < d[j])
		d[j] = a[i];
}
/// 
def edit_distance_with_allowed_ops(s1, s2, allowed_ops):
    m, n = len(s1), len(s2)
    dp = [[0] * (n+1) for _ in range(m+1)]

    for i in range(m+1):
        dp[i][0] = i

    for j in range(n+1):
        dp[0][j] = j

    for i in range(1, m+1):
        for j in range(1, n+1):
            if s1[i-1] == s2[j-1]:
                dp[i][j] = dp[i-1][j-1]
            elif allowed_ops.get((s1[i-1], s2[j-1])):
                op_cost = allowed_ops[(s1[i-1], s2[j-1])]
                dp[i][j] = min(dp[i-1][j] + op_cost[0], dp[i][j-1] + op_cost[1], dp[i-1][j-1] + op_cost[2])
            else:
                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])

    return dp[m][n]
/// 
void solve() {}

signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t = 1;
  // cin >> t;
  while (t--)
    solve();
  return 0;
}"
NXPH5rxg,Untitled,clown1337,C++,Tuesday 12th of December 2023 12:50:14 AM CDT,"#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstring>
#include <deque>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <limits>
#include <map>
#include <numeric>
#include <ostream>
#include <queue>
#include <random>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>

using namespace std;
/// Pragmas ///
#pragma GCC optimize(""Ofast, O3, unroll-loops"")
#pragma GCC target(""sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,fma"")
/// Defines ///
typedef long long ll;
/// consts ///
long long N = 100100;
vector<bool> used(N);
vector<vector<int>> g(N);
vector<int> dist(N);
vector<int> isPrime(N, true);
/// Geometry ///
struct Vector {
  double x, y;
  Vector() {}
  Vector(double x1, double y1) {
    x = x1;
    y = y1;
  }
  Vector(Vector a, Vector b) {
    x = b.x - a.x;
    y = b.y - a.y;
  }
  Vector operator+(Vector other) const {
    return Vector(x + other.x, y + other.y);
  }
  Vector operator-(Vector other) const {
    return Vector(x - other.x, y - other.y);
  }
  Vector operator*(double d) { return Vector(x * d, y * d); }
  double operator*(Vector other) const { return x * other.x + y * other.y; }
  long long operator^(Vector other) const { return x * other.y - y * other.x; }
  long long len2() { return x * x + y * y; }
  long long len() { return sqrt(len2()); }
};
typedef Vector Point;
double Angle(Vector a, Vector b) { return atan2(a ^ b, a * b); }

double Dist(Vector a, Vector b) { return Vector(a, b).len(); }

double Area(Point a, Point b, Point c) {
  Vector ab(a, b);
  Vector ac(a, c);
  return (double)abs(ab ^ ac) / 2;
}

istream &operator>>(istream &in, Point &p) {
  in >> p.x >> p.y;
  return in;
}

ostream &operator<<(ostream &out, Point p) {
  out << p.x << ' ' << p.y;
  return out;
}
/// GCD & LCM ///
ll gcd(ll a, ll b) { return (b ? gcd(b, a % b) : a); }

ll lcm(ll a, ll b) { return a / gcd(a, b) * b; }
/// DFS ///
void dfs(int v) {
  used[v] = true;
  for (int i = 0; i < g[v].size(); i++) {
    int u = g[v][i];
    if (!used[u])
      dfs(u);
  }
}
/// BFS ///
void bfs(int start, int end) {
  dist[start] = 0;
  used[start] = true;
  queue<int> q;
  q.push(start);
  while (!q.empty()) {
    int v = q.front();
    q.pop();
    for (int i = 0; i < g[v].size(); i++) {
      int u = g[v][i];
      if (dist[v] + 1 < dist[u]) {
        used[u] = true;
        dist[u] = dist[v] + 1;
        q.push(u);
      }
    }
  }
}
/// SIEVE ///
void sieve() {
  isPrime[0] = isPrime[1] = false;
  for (int i = 2; i < N; i++) {
    if (isPrime[i]) {
      for (int j = i * i; j < N; j += i) {
        isPrime[j] = false;
      }
    }
  }
}
/// CountDivs ///
vector<int> divs;
int countDivs(int n) {
  int cnt = 2;
  divs.push_back(1);
  divs.push_back(n);
  for (int i = 2; i * i <= n; i++) {
    if (n % i == 0) {
      cnt += 2;
      divs.push_back(i);
      divs.push_back(n / i);
      if (i * i == n) {
        cnt--;
        divs.pop_back();
      }
    }
  }
  return cnt;
}
/// BinPow ///
ll binPow(ll x, ll n) {
  if (n == 0) {
    return 1;
  }
  if (n % 2 == 0) {
    ll a = binPow(x, n / 2);
    return a * a;
  } else {
    ll a = binPow(x, n - 1);
    return x * a;
  }
}
/// Extended Euclid algorithm ///
int gcdExtended(int a, int b, int *x, int *y) {
  if (a == 0) {
    *x = 0;
    *y = 1;
    return b;
  }
  int x1, y1;
  int gcd = gcdExtended(b % a, a, &x1, &y1);
  *x = y1 - (b / a) * x1;
  *y = x1;
  return gcd;
}
/// dijstra ///
void dijkstra(ll s) {
  dist[s] = 0;
  set<pair<ll, ll>> q;
  q.emplace(dist[s], s);
  while (!q.empty()) {
    ll v = q.begin()->second;
    q.erase(q.begin());
    for (int i = 0; i < g[v].size(); ++i) {
      ll u = g[v][i].second;
      ll len = g[v][i].first;
      if (dist[u] < dist[v] + len) {
        q.erase({dist[u], u});
        dist[u] = dist[v] + len;
        q.emplace(dist[u], u);
      }
    }
  }
}
/// DSU ///
vector<int> dsu_par(1e5 + 50000);
vector<int> dsu_sz(1e5 + 50000);

ll dsu_setId(ll v) {
  if (dsu_par[v] == v)
    return v;
  else
    return dsu_par[v] = dsu_setId(dsu_par[v]);
}

void dsu_union(ll a, ll b) {
  ll x = dsu_setId(a);
  ll y = dsu_setId(b);
  if (dsu_sz[x] < dsu_sz[y])
    swap(x, y);
  dsu_par[x] = y;
  dsu_sz[x] += dsu_sz[y];
}

bool dsu_check(ll a, ll b) {
  if (dsu_setId(a) == dsu_setId(b)) {
    return true;
  } else {
    return false;
  }
}
/// segtree ///
struct segtree {
  struct node {
    int x;
  };

  vector<node> tree;
  int size;

  const node ZERO = {0};
  node one_element(int a) { return {a}; }

  node combine(node a, node b) { return {a.x + b.x}; }

  void init(int n) {
    size = 1;
    while (size < n)
      size *= 2;
    tree.assign(2 * size - 1, ZERO);
  }

  void build(vector<int> &q, int x, int lx, int rx) {
    if (rx - lx == 1) {
      if (lx < q.size()) {
        tree[x] = node({1});
      }
      return;
    }
    int m = lx + (rx - lx) / 2;
    build(q, 2 * x + 1, lx, m);
    build(q, 2 * x + 2, m, rx);
    tree[x] = combine(tree[2 * x + 1], tree[2 * x + 2]);
  }

  void build(vector<int> &q) {
    init(q.size());
    build(q, 0, 0, size);
  }

  void set(int i, int v, int x, int lx, int rx) {
    if (rx - lx == 1) {
      tree[x] = node({v});
      return;
    }
    int m = lx + (rx - lx) / 2;
    if (i < m)
      set(i, v, 2 * x + 1, lx, m);
    else
      set(i, v, 2 * x + 2, m, rx);
    tree[x] = combine(tree[2 * x + 1], tree[2 * x + 2]);
  }

  void set(int i, int v) { set(i, v, 0, 0, size); }

  int calc(int l, int r, int x, int lx, int rx) {
    if (lx >= r || rx <= l) {
      return 0;
    }
    if (lx >= l && rx <= r) {
      return tree[x].x;
    }
    int m = lx + (rx - lx) / 2;
    int s1 = calc(l, r, 2 * x + 1, lx, m);
    int s2 = calc(l, r, 2 * x + 2, m, rx);
    return s1 + s2;
  }

  int calc(int l, int r) { return calc(l, r, 0, 0, size); }
};

/// stack min ///
struct stack_min {
  vector<int> val;
  vector<int> val_min = {((ll)1e9)};

  void push(int v) {
    val.push_back(v);
    val_min.push_back(min(val_min.back(), v));
  }
  void pop() {
    val_min.pop_back();
    val.pop_back();
  }
  int get_min() { return val_min.back(); }
  int back() { return val.back(); }
};
/// queue min ///
struct queue_min {
  stack_min st1, st2;
  void push(int v) { st1.push(v); }
  void pop() {
    if (st2.val.size()) {
      st2.pop();
    } else {
      while (st1.val.size()) {
        st2.push(st1.back());
        st1.pop();
      }
      st2.pop();
    }
  }
  int get_min() { return min(st1.get_min(), st2.get_min()); }
};
/// next under
vector<int> next_under_right(vector<int> &q) {
  vector<int> st;
  vector<int> ans(q.size());
  for (int i = 0; i < q.size(); ++i) {
    while (st.size() && q[st.back()] > q[i]) {
      ans[st.back()] = i;
      st.pop_back();
    }
    st.push_back(i);
  }
  while (!st.empty()) {
    ans[st.back()] = q.size();
    st.pop_back();
  }
  return ans;
}
/// substring ///
void substring() {
  vector<ll> p_pow(s.size() + 1, 1), pr(s.size() + 1, 0);
  //
  for (int i = 0; i < s.size(); ++i) {
    p_pow[i + 1] = (p_pow[i] * p) % MOD;
  }
  //
  for (int i = 0; i < s.size(); ++i) {
    pr[i + 1] = (pr[i] * p + s[i]) % MOD;
  }
  //
  ll h = 0;
  for (int i = 0; i < t.size(); ++i) {
    h = (h * p + t[i]) % MOD;
  }
  //
  vector<int> ans;
  for (int i = 0; i <= s.size() - t.size(); ++i) {
    ll h_nw = (pr[i + t.size()] - (pr[i] * p_pow[t.size()]) + MOD * MOD) % MOD;
    if (h_nw == h) {
      ans.push_back(i);
    }
  }
  cout << ans.size() << '\n';
  for (auto &x : ans)
    cout << x << ' ';
}

/// DSU form algo ///
int p[maxn], s[maxn];

int leader(int v) { return (p[v] == v) ? v : p[v] = leader(p[v]); }

void unite(int a, int b) {
  a = leader(a), b = leader(b);
  if (s[a] > s[b])
    swap(a, b);
  s[b] += s[a];
  p[a] = b;
}

void init(n) {
  for (int i = 0; i < n; i++)
    p[i] = i, s[i] = 1;
}
/// sqrt ///
void sqrt_main() {
  // c —ç—Ç–æ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤, –∏ —Ç–∞–∫–∂–µ –∏—Ö —Ä–∞–∑–º–µ—Ä; –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ
  // –∫–æ—Ä–Ω—è
  const int maxn = 1e5, c = 330;
  int a[maxn], b[c], add[c];

  for (int i = 0; i < n; i++)
    b[i / c] += a[i];
}

int sum(int l, int r) {
  int res = 0;
  while (l <= r) {
    // –µ—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –Ω–∞—á–∞–ª–µ –±–ª–æ–∫–∞ –∏ –æ–Ω —Ü–µ–ª–∏–∫–æ–º –≤ –∑–∞–ø—Ä–æ—Å–µ
    if (l % c == 0 && l + c - 1 <= r) {
      res += b[l / c];
      l += c; // –º—ã –º–æ–∂–µ–º –ø—Ä—ã–≥–Ω—É—Ç—å —Å—Ä–∞–∑—É –Ω–∞ –±–ª–æ–∫
    } else {
      res += a[l] + add[l / c];
      l += 1;
    }
  }
  return res;
}

void upd(int l, int r, int x) {
  while (l <= r) {
    if (l % c == 0 && l + c - 1 <= r) {
      b[l / c] += c * x;
      add[l / c] += x;
      l += c;
    } else {
      b[l / c] += x;
      a[l] += x;
      l++;
    }
  }
}
/// bridjes ///
void dfs(int v, int p = -1) {
  used[v] = true;
  tin[v] = fup[v] = timer++;
  for (size_t i = 0; i < g[v].size(); ++i) {
    int to = g[v][i];
    if (to == p)
      continue;
    if (used[to])
      fup[v] = min(fup[v], tin[to]);
    else {
      dfs(to, v);
      fup[v] = min(fup[v], fup[to]);
      if (fup[to] > tin[v])
        IS_BRIDGE(v, to);
    }
  }
}

void find_bridges() {
  timer = 0;
  for (int i = 0; i < n; ++i)
    used[i] = false;
  for (int i = 0; i < n; ++i)
    if (!used[i])
      dfs(i);
}

/// cutpoints ///
void dfs(int v, int p = -1) {
  used[v] = true;
  tin[v] = fup[v] = timer++;
  int children = 0;
  for (size_t i = 0; i < g[v].size(); ++i) {
    int to = g[v][i];
    if (to == p)
      continue;
    if (used[to])
      fup[v] = min(fup[v], tin[to]);
    else {
      dfs(to, v);
      fup[v] = min(fup[v], fup[to]);
      if (fup[to] >= tin[v] && p != -1)
        IS_CUTPOINT(v);
      ++children;
    }
  }
  if (p == -1 && children > 1)
    IS_CUTPOINT(v);
}

void cutpoints_main() {
  int n;
  ... —á—Ç–µ–Ω–∏–µ n –∏ g...

      timer = 0;
  for (int i = 0; i < n; ++i)
    used[i] = false;
  dfs(0);
}
/// prima ///
vector<int> min_e(n, INF), sel_e(n, -1);
min_e[0] = 0;
for (int i = 0; i < n; ++i) {
  int v = -1;
  for (int j = 0; j < n; ++j)
    if (!used[j] && (v == -1 || min_e[j] < min_e[v]))
      v = j;
  if (min_e[v] == INF) {
    cout << ""No MST!"";
    exit(0);
  }

  used[v] = true;
  if (sel_e[v] != -1)
    cout << v << "" "" << sel_e[v] << endl;

  for (int to = 0; to < n; ++to)
    if (g[v][to] < min_e[to]) {
      min_e[to] = g[v][to];
      sel_e[to] = v;
    }
}

/// fibbonaci ///
const long M = 1000000007; // modulo
map<long, long> F;

long f(long n) {
  if (F.count(n))
    return F[n];
  long k = n / 2;
  if (n % 2 == 0) { // n=2*k
    return F[n] = (f(k) * f(k) + f(k - 1) * f(k - 1)) % M;
  } else { // n=2*k+1
    return F[n] = (f(k) * f(k + 1) + f(k - 1) * f(k)) % M;
  }
}

void fibbonaci_main() {
  long n;
  F[0] = F[1] = 1;
  while (cin >> n)
    cout << (n == 0 ? 0 : f(n - 1)) << endl;
}
/// topsort ///
void dfs(int v) {
  used[v] = true;
  for (size_t i = 0; i < g[v].size(); ++i) {
    int to = g[v][i];
    if (!used[to])
      dfs(to);
  }
  ans.push_back(v);
}

void topological_sort() {
  for (int i = 0; i < n; ++i)
    used[i] = false;
  ans.clear();
  for (int i = 0; i < n; ++i)
    if (!used[i])
      dfs(i);
  reverse(ans.begin(), ans.end());
}
/// n k ///
const int maxn = ...;
int C[maxn + 1][maxn + 1];
for (int n = 0; n <= maxn; ++n) {
  C[n][0] = C[n][n] = 1;
  for (int k = 1; k < n; ++k)
    C[n][k] = C[n - 1][k - 1] + C[n - 1][k];
}
/// hashes ///
string s, t; // –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

// —Å—á–∏—Ç–∞–µ–º –≤—Å–µ —Å—Ç–µ–ø–µ–Ω–∏ p
const int p = 31;
vector<long long> p_pow(max(s.length(), t.length()));
p_pow[0] = 1;
for (size_t i = 1; i < p_pow.size(); ++i)
  p_pow[i] = p_pow[i - 1] * p;

// —Å—á–∏—Ç–∞–µ–º —Ö—ç—à–∏ –æ—Ç –≤—Å–µ—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ —Å—Ç—Ä–æ–∫–∏ T
vector<long long> h(t.length());
for (size_t i = 0; i < t.length(); ++i) {
  h[i] = (t[i] - 'a' + 1) * p_pow[i];
  if (i)
    h[i] += h[i - 1];
}

// —Å—á–∏—Ç–∞–µ–º —Ö—ç—à –æ—Ç —Å—Ç—Ä–æ–∫–∏ S
long long h_s = 0;
for (size_t i = 0; i < s.length(); ++i)
  h_s += (s[i] - 'a' + 1) * p_pow[i];

// –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ T –¥–ª–∏–Ω—ã |S| –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏—Ö
for (size_t i = 0; i + s.length() - 1 < t.length(); ++i) {
  long long cur_h = h[i + s.length() - 1];
  if (i)
    cur_h -= h[i - 1];
  // –ø—Ä–∏–≤–æ–¥–∏–º —Ö—ç—à–∏ –∫ –æ–¥–Ω–æ–π —Å—Ç–µ–ø–µ–Ω–∏ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
  if (cur_h == h_s * p_pow[i])
    cout << i << ' ';
}
/// find comps ///
int n;
vector<int> g[MAXN];
bool used[MAXN];
vector<int> comp;

void dfs(int v) {
  used[v] = true;
  comp.push_back(v);
  for (size_t i = 0; i < g[v].size(); ++i) {
    int to = g[v][i];
    if (!used[to])
      dfs(to);
  }
}

void find_comps() {
  for (int i = 0; i < n; ++i)
    used[i] = false;
  for (int i = 0; i < n; ++i)
    if (!used[i]) {
      comp.clear();
      dfs(i);

      cout << ""Component:"";
      for (size_t j = 0; j < comp.size(); ++j)
        cout << ' ' << comp[j];
      cout << endl;
    }
}

/// –ê—Ö–æ-–∫–∞—Ä–∞—Å–∏–∫ ///
const int MAXN = 404, MOD = 1e9 + 7, sigma = 26;
 
int term[MAXN], len[MAXN], to[MAXN][sigma], link[MAXN], sz = 1;
void add_str(string s)
{
    int cur = 0;
    for(auto c: s)
    {
        if(!to[cur][c - 'a'])
        {
            to[cur][c - 'a'] = sz++;
            len[to[cur][c - 'a']] = len[cur] + 1;
        }
        cur = to[cur][c - 'a'];
    }
    term[cur] = cur; 
}
 
void push_links()
{
    int que[sz];
    int st = 0, fi = 1;
    que[0] = 0;
    while(st < fi)
    {
        int V = que[st++];
        int U = link[V];
        if(!term[V]) term[V] = term[U];
        for(int c = 0; c < sigma; c++)
            if(to[V][c])
            {
                link[to[V][c]] = V ? to[U][c] : 0;
                que[fi++] = to[V][c];
            }
            else
            {
                to[V][c] = to[U][c];
            }
    }
}
/// –¢–µ—Ä–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ ///
double l = ..., r = ..., EPS = ...; // –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
while (r - l > EPS) {
   double m1 = l + (r - l) / 3,
      m2 = r - (r - l) / 3;
   if (f (m1) < f (m2))
      l = m1;
   else
      r = m2;
}
/// knapsack ///
int knapSack(int W, int w[], int v[], int n) {
   int i, wt;
   int K[n + 1][W + 1];
   for (i = 0; i <= n; i++) {
      for (wt = 0; wt <= W; wt++) {
         if (i == 0 || wt == 0)
         K[i][wt] = 0;
         else if (w[i - 1] <= wt)
            K[i][wt] = max(v[i - 1] + K[i - 1][wt - w[i - 1]], K[i - 1][wt]);
         else
        K[i][wt] = K[i - 1][wt];
      }
   }
   return K[n][W];
}
///
def edit_distance(s1, s2):
    m, n = len(s1), len(s2)
    dp = [[0] * (n+1) for _ in range(m+1)]

    for i in range(m+1):
        for j in range(n+1):
            if i == 0:
                dp[i][j] = j
            elif j == 0:
                dp[i][j] = i
            elif s1[i-1] == s2[j-1]:
                dp[i][j] = dp[i-1][j-1]
            else:
                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])

    return dp[m][n]
/// nvp
int d[MAXN];
d[0] = -INF;
for (int i=1; i<=n; ++i)
	d[i] = INF;
 
for (int i=0; i<n; i++) {
	int j = int (upper_bound (d.begin(), d.end(), a[i]) - d.begin());
	if (d[j-1] < a[i] && a[i] < d[j])
		d[j] = a[i];
}
///
void solve() {}

signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t = 1;
  // cin >> t;
  while (t--)
    solve();
  return 0;
}"
w5bu3Xt9,Untitled,clown1337,C++,Tuesday 12th of December 2023 12:38:42 AM CDT,"#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstring>
#include <deque>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <limits>
#include <map>
#include <numeric>
#include <ostream>
#include <queue>
#include <random>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>

using namespace std;
/// Pragmas ///
#pragma GCC optimize(""Ofast, O3, unroll-loops"")
#pragma GCC target(""sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,fma"")
/// Defines ///
typedef long long ll;
/// consts ///
long long N = 100100;
vector<bool> used(N);
vector<vector<int>> g(N);
vector<int> dist(N);
vector<int> isPrime(N, true);
/// Geometry ///
struct Vector {
  double x, y;
  Vector() {}
  Vector(double x1, double y1) {
    x = x1;
    y = y1;
  }
  Vector(Vector a, Vector b) {
    x = b.x - a.x;
    y = b.y - a.y;
  }
  Vector operator+(Vector other) const {
    return Vector(x + other.x, y + other.y);
  }
  Vector operator-(Vector other) const {
    return Vector(x - other.x, y - other.y);
  }
  Vector operator*(double d) { return Vector(x * d, y * d); }
  double operator*(Vector other) const { return x * other.x + y * other.y; }
  long long operator^(Vector other) const { return x * other.y - y * other.x; }
  long long len2() { return x * x + y * y; }
  long long len() { return sqrt(len2()); }
};
typedef Vector Point;
double Angle(Vector a, Vector b) { return atan2(a ^ b, a * b); }

double Dist(Vector a, Vector b) { return Vector(a, b).len(); }

double Area(Point a, Point b, Point c) {
  Vector ab(a, b);
  Vector ac(a, c);
  return (double)abs(ab ^ ac) / 2;
}

istream &operator>>(istream &in, Point &p) {
  in >> p.x >> p.y;
  return in;
}

ostream &operator<<(ostream &out, Point p) {
  out << p.x << ' ' << p.y;
  return out;
}
/// GCD & LCM ///
ll gcd(ll a, ll b) { return (b ? gcd(b, a % b) : a); }

ll lcm(ll a, ll b) { return a / gcd(a, b) * b; }
/// DFS ///
void dfs(int v) {
  used[v] = true;
  for (int i = 0; i < g[v].size(); i++) {
    int u = g[v][i];
    if (!used[u])
      dfs(u);
  }
}
/// BFS ///
void bfs(int start, int end) {
  dist[start] = 0;
  used[start] = true;
  queue<int> q;
  q.push(start);
  while (!q.empty()) {
    int v = q.front();
    q.pop();
    for (int i = 0; i < g[v].size(); i++) {
      int u = g[v][i];
      if (dist[v] + 1 < dist[u]) {
        used[u] = true;
        dist[u] = dist[v] + 1;
        q.push(u);
      }
    }
  }
}
/// SIEVE ///
void sieve() {
  isPrime[0] = isPrime[1] = false;
  for (int i = 2; i < N; i++) {
    if (isPrime[i]) {
      for (int j = i * i; j < N; j += i) {
        isPrime[j] = false;
      }
    }
  }
}
/// CountDivs ///
vector<int> divs;
int countDivs(int n) {
  int cnt = 2;
  divs.push_back(1);
  divs.push_back(n);
  for (int i = 2; i * i <= n; i++) {
    if (n % i == 0) {
      cnt += 2;
      divs.push_back(i);
      divs.push_back(n / i);
      if (i * i == n) {
        cnt--;
        divs.pop_back();
      }
    }
  }
  return cnt;
}
/// BinPow ///
ll binPow(ll x, ll n) {
  if (n == 0) {
    return 1;
  }
  if (n % 2 == 0) {
    ll a = binPow(x, n / 2);
    return a * a;
  } else {
    ll a = binPow(x, n - 1);
    return x * a;
  }
}
/// Extended Euclid algorithm ///
int gcdExtended(int a, int b, int *x, int *y) {
  if (a == 0) {
    *x = 0;
    *y = 1;
    return b;
  }
  int x1, y1;
  int gcd = gcdExtended(b % a, a, &x1, &y1);
  *x = y1 - (b / a) * x1;
  *y = x1;
  return gcd;
}
/// dijstra ///
void dijkstra(ll s) {
  dist[s] = 0;
  set<pair<ll, ll>> q;
  q.emplace(dist[s], s);
  while (!q.empty()) {
    ll v = q.begin()->second;
    q.erase(q.begin());
    for (int i = 0; i < g[v].size(); ++i) {
      ll u = g[v][i].second;
      ll len = g[v][i].first;
      if (dist[u] < dist[v] + len) {
        q.erase({dist[u], u});
        dist[u] = dist[v] + len;
        q.emplace(dist[u], u);
      }
    }
  }
}
/// DSU ///
vector<int> dsu_par(1e5 + 50000);
vector<int> dsu_sz(1e5 + 50000);

ll dsu_setId(ll v) {
  if (dsu_par[v] == v)
    return v;
  else
    return dsu_par[v] = dsu_setId(dsu_par[v]);
}

void dsu_union(ll a, ll b) {
  ll x = dsu_setId(a);
  ll y = dsu_setId(b);
  if (dsu_sz[x] < dsu_sz[y])
    swap(x, y);
  dsu_par[x] = y;
  dsu_sz[x] += dsu_sz[y];
}

bool dsu_check(ll a, ll b) {
  if (dsu_setId(a) == dsu_setId(b)) {
    return true;
  } else {
    return false;
  }
}
/// segtree ///
struct segtree {
  struct node {
    int x;
  };

  vector<node> tree;
  int size;

  const node ZERO = {0};
  node one_element(int a) { return {a}; }

  node combine(node a, node b) { return {a.x + b.x}; }

  void init(int n) {
    size = 1;
    while (size < n)
      size *= 2;
    tree.assign(2 * size - 1, ZERO);
  }

  void build(vector<int> &q, int x, int lx, int rx) {
    if (rx - lx == 1) {
      if (lx < q.size()) {
        tree[x] = node({1});
      }
      return;
    }
    int m = lx + (rx - lx) / 2;
    build(q, 2 * x + 1, lx, m);
    build(q, 2 * x + 2, m, rx);
    tree[x] = combine(tree[2 * x + 1], tree[2 * x + 2]);
  }

  void build(vector<int> &q) {
    init(q.size());
    build(q, 0, 0, size);
  }

  void set(int i, int v, int x, int lx, int rx) {
    if (rx - lx == 1) {
      tree[x] = node({v});
      return;
    }
    int m = lx + (rx - lx) / 2;
    if (i < m)
      set(i, v, 2 * x + 1, lx, m);
    else
      set(i, v, 2 * x + 2, m, rx);
    tree[x] = combine(tree[2 * x + 1], tree[2 * x + 2]);
  }

  void set(int i, int v) { set(i, v, 0, 0, size); }

  int calc(int l, int r, int x, int lx, int rx) {
    if (lx >= r || rx <= l) {
      return 0;
    }
    if (lx >= l && rx <= r) {
      return tree[x].x;
    }
    int m = lx + (rx - lx) / 2;
    int s1 = calc(l, r, 2 * x + 1, lx, m);
    int s2 = calc(l, r, 2 * x + 2, m, rx);
    return s1 + s2;
  }

  int calc(int l, int r) { return calc(l, r, 0, 0, size); }
};

/// stack min ///
struct stack_min {
  vector<int> val;
  vector<int> val_min = {((ll)1e9)};

  void push(int v) {
    val.push_back(v);
    val_min.push_back(min(val_min.back(), v));
  }
  void pop() {
    val_min.pop_back();
    val.pop_back();
  }
  int get_min() { return val_min.back(); }
  int back() { return val.back(); }
};
/// queue min ///
struct queue_min {
  stack_min st1, st2;
  void push(int v) { st1.push(v); }
  void pop() {
    if (st2.val.size()) {
      st2.pop();
    } else {
      while (st1.val.size()) {
        st2.push(st1.back());
        st1.pop();
      }
      st2.pop();
    }
  }
  int get_min() { return min(st1.get_min(), st2.get_min()); }
};
/// next under
vector<int> next_under_right(vector<int> &q) {
  vector<int> st;
  vector<int> ans(q.size());
  for (int i = 0; i < q.size(); ++i) {
    while (st.size() && q[st.back()] > q[i]) {
      ans[st.back()] = i;
      st.pop_back();
    }
    st.push_back(i);
  }
  while (!st.empty()) {
    ans[st.back()] = q.size();
    st.pop_back();
  }
  return ans;
}
/// substring ///
void substring() {
  vector<ll> p_pow(s.size() + 1, 1), pr(s.size() + 1, 0);
  //
  for (int i = 0; i < s.size(); ++i) {
    p_pow[i + 1] = (p_pow[i] * p) % MOD;
  }
  //
  for (int i = 0; i < s.size(); ++i) {
    pr[i + 1] = (pr[i] * p + s[i]) % MOD;
  }
  //
  ll h = 0;
  for (int i = 0; i < t.size(); ++i) {
    h = (h * p + t[i]) % MOD;
  }
  //
  vector<int> ans;
  for (int i = 0; i <= s.size() - t.size(); ++i) {
    ll h_nw = (pr[i + t.size()] - (pr[i] * p_pow[t.size()]) + MOD * MOD) % MOD;
    if (h_nw == h) {
      ans.push_back(i);
    }
  }
  cout << ans.size() << '\n';
  for (auto &x : ans)
    cout << x << ' ';
}

/// DSU form algo ///
int p[maxn], s[maxn];

int leader(int v) { return (p[v] == v) ? v : p[v] = leader(p[v]); }

void unite(int a, int b) {
  a = leader(a), b = leader(b);
  if (s[a] > s[b])
    swap(a, b);
  s[b] += s[a];
  p[a] = b;
}

void init(n) {
  for (int i = 0; i < n; i++)
    p[i] = i, s[i] = 1;
}
/// sqrt ///
void sqrt_main() {
  // c —ç—Ç–æ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤, –∏ —Ç–∞–∫–∂–µ –∏—Ö —Ä–∞–∑–º–µ—Ä; –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ
  // –∫–æ—Ä–Ω—è
  const int maxn = 1e5, c = 330;
  int a[maxn], b[c], add[c];

  for (int i = 0; i < n; i++)
    b[i / c] += a[i];
}

int sum(int l, int r) {
  int res = 0;
  while (l <= r) {
    // –µ—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –Ω–∞—á–∞–ª–µ –±–ª–æ–∫–∞ –∏ –æ–Ω —Ü–µ–ª–∏–∫–æ–º –≤ –∑–∞–ø—Ä–æ—Å–µ
    if (l % c == 0 && l + c - 1 <= r) {
      res += b[l / c];
      l += c; // –º—ã –º–æ–∂–µ–º –ø—Ä—ã–≥–Ω—É—Ç—å —Å—Ä–∞–∑—É –Ω–∞ –±–ª–æ–∫
    } else {
      res += a[l] + add[l / c];
      l += 1;
    }
  }
  return res;
}

void upd(int l, int r, int x) {
  while (l <= r) {
    if (l % c == 0 && l + c - 1 <= r) {
      b[l / c] += c * x;
      add[l / c] += x;
      l += c;
    } else {
      b[l / c] += x;
      a[l] += x;
      l++;
    }
  }
}
/// bridjes ///
void dfs(int v, int p = -1) {
  used[v] = true;
  tin[v] = fup[v] = timer++;
  for (size_t i = 0; i < g[v].size(); ++i) {
    int to = g[v][i];
    if (to == p)
      continue;
    if (used[to])
      fup[v] = min(fup[v], tin[to]);
    else {
      dfs(to, v);
      fup[v] = min(fup[v], fup[to]);
      if (fup[to] > tin[v])
        IS_BRIDGE(v, to);
    }
  }
}

void find_bridges() {
  timer = 0;
  for (int i = 0; i < n; ++i)
    used[i] = false;
  for (int i = 0; i < n; ++i)
    if (!used[i])
      dfs(i);
}

/// cutpoints ///
void dfs(int v, int p = -1) {
  used[v] = true;
  tin[v] = fup[v] = timer++;
  int children = 0;
  for (size_t i = 0; i < g[v].size(); ++i) {
    int to = g[v][i];
    if (to == p)
      continue;
    if (used[to])
      fup[v] = min(fup[v], tin[to]);
    else {
      dfs(to, v);
      fup[v] = min(fup[v], fup[to]);
      if (fup[to] >= tin[v] && p != -1)
        IS_CUTPOINT(v);
      ++children;
    }
  }
  if (p == -1 && children > 1)
    IS_CUTPOINT(v);
}

void cutpoints_main() {
  int n;
  ... —á—Ç–µ–Ω–∏–µ n –∏ g...

      timer = 0;
  for (int i = 0; i < n; ++i)
    used[i] = false;
  dfs(0);
}
/// prima ///
vector<int> min_e(n, INF), sel_e(n, -1);
min_e[0] = 0;
for (int i = 0; i < n; ++i) {
  int v = -1;
  for (int j = 0; j < n; ++j)
    if (!used[j] && (v == -1 || min_e[j] < min_e[v]))
      v = j;
  if (min_e[v] == INF) {
    cout << ""No MST!"";
    exit(0);
  }

  used[v] = true;
  if (sel_e[v] != -1)
    cout << v << "" "" << sel_e[v] << endl;

  for (int to = 0; to < n; ++to)
    if (g[v][to] < min_e[to]) {
      min_e[to] = g[v][to];
      sel_e[to] = v;
    }
}

/// fibbonaci ///
const long M = 1000000007; // modulo
map<long, long> F;

long f(long n) {
  if (F.count(n))
    return F[n];
  long k = n / 2;
  if (n % 2 == 0) { // n=2*k
    return F[n] = (f(k) * f(k) + f(k - 1) * f(k - 1)) % M;
  } else { // n=2*k+1
    return F[n] = (f(k) * f(k + 1) + f(k - 1) * f(k)) % M;
  }
}

void fibbonaci_main() {
  long n;
  F[0] = F[1] = 1;
  while (cin >> n)
    cout << (n == 0 ? 0 : f(n - 1)) << endl;
}
/// topsort ///
void dfs(int v) {
  used[v] = true;
  for (size_t i = 0; i < g[v].size(); ++i) {
    int to = g[v][i];
    if (!used[to])
      dfs(to);
  }
  ans.push_back(v);
}

void topological_sort() {
  for (int i = 0; i < n; ++i)
    used[i] = false;
  ans.clear();
  for (int i = 0; i < n; ++i)
    if (!used[i])
      dfs(i);
  reverse(ans.begin(), ans.end());
}
/// n k ///
const int maxn = ...;
int C[maxn + 1][maxn + 1];
for (int n = 0; n <= maxn; ++n) {
  C[n][0] = C[n][n] = 1;
  for (int k = 1; k < n; ++k)
    C[n][k] = C[n - 1][k - 1] + C[n - 1][k];
}
/// hashes ///
string s, t; // –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

// —Å—á–∏—Ç–∞–µ–º –≤—Å–µ —Å—Ç–µ–ø–µ–Ω–∏ p
const int p = 31;
vector<long long> p_pow(max(s.length(), t.length()));
p_pow[0] = 1;
for (size_t i = 1; i < p_pow.size(); ++i)
  p_pow[i] = p_pow[i - 1] * p;

// —Å—á–∏—Ç–∞–µ–º —Ö—ç—à–∏ –æ—Ç –≤—Å–µ—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ —Å—Ç—Ä–æ–∫–∏ T
vector<long long> h(t.length());
for (size_t i = 0; i < t.length(); ++i) {
  h[i] = (t[i] - 'a' + 1) * p_pow[i];
  if (i)
    h[i] += h[i - 1];
}

// —Å—á–∏—Ç–∞–µ–º —Ö—ç—à –æ—Ç —Å—Ç—Ä–æ–∫–∏ S
long long h_s = 0;
for (size_t i = 0; i < s.length(); ++i)
  h_s += (s[i] - 'a' + 1) * p_pow[i];

// –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ T –¥–ª–∏–Ω—ã |S| –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏—Ö
for (size_t i = 0; i + s.length() - 1 < t.length(); ++i) {
  long long cur_h = h[i + s.length() - 1];
  if (i)
    cur_h -= h[i - 1];
  // –ø—Ä–∏–≤–æ–¥–∏–º —Ö—ç—à–∏ –∫ –æ–¥–Ω–æ–π —Å—Ç–µ–ø–µ–Ω–∏ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
  if (cur_h == h_s * p_pow[i])
    cout << i << ' ';
}
/// find comps ///
int n;
vector<int> g[MAXN];
bool used[MAXN];
vector<int> comp;

void dfs(int v) {
  used[v] = true;
  comp.push_back(v);
  for (size_t i = 0; i < g[v].size(); ++i) {
    int to = g[v][i];
    if (!used[to])
      dfs(to);
  }
}

void find_comps() {
  for (int i = 0; i < n; ++i)
    used[i] = false;
  for (int i = 0; i < n; ++i)
    if (!used[i]) {
      comp.clear();
      dfs(i);

      cout << ""Component:"";
      for (size_t j = 0; j < comp.size(); ++j)
        cout << ' ' << comp[j];
      cout << endl;
    }
}

/// –ê—Ö–æ-–∫–∞—Ä–∞—Å–∏–∫ ///
const int MAXN = 404, MOD = 1e9 + 7, sigma = 26;
 
int term[MAXN], len[MAXN], to[MAXN][sigma], link[MAXN], sz = 1;
void add_str(string s)
{
    int cur = 0;
    for(auto c: s)
    {
        if(!to[cur][c - 'a'])
        {
            to[cur][c - 'a'] = sz++;
            len[to[cur][c - 'a']] = len[cur] + 1;
        }
        cur = to[cur][c - 'a'];
    }
    term[cur] = cur; 
}
 
void push_links()
{
    int que[sz];
    int st = 0, fi = 1;
    que[0] = 0;
    while(st < fi)
    {
        int V = que[st++];
        int U = link[V];
        if(!term[V]) term[V] = term[U];
        for(int c = 0; c < sigma; c++)
            if(to[V][c])
            {
                link[to[V][c]] = V ? to[U][c] : 0;
                que[fi++] = to[V][c];
            }
            else
            {
                to[V][c] = to[U][c];
            }
    }
}
/// –¢–µ—Ä–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ ///
double l = ..., r = ..., EPS = ...; // –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
while (r - l > EPS) {
   double m1 = l + (r - l) / 3,
      m2 = r - (r - l) / 3;
   if (f (m1) < f (m2))
      l = m1;
   else
      r = m2;
}

void solve() {}

signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t = 1;
  // cin >> t;
  while (t--)
    solve();
  return 0;
}"
GtP0Qib1,Untitled,clown1337,C++,Tuesday 12th of December 2023 12:33:30 AM CDT,"/// –ê—Ö–æ-–∫–∞—Ä–∞—Å–∏–∫ ///
const int MAXN = 404, MOD = 1e9 + 7, sigma = 26;
 
int term[MAXN], len[MAXN], to[MAXN][sigma], link[MAXN], sz = 1;
void add_str(string s)
{
    int cur = 0;
    for(auto c: s)
    {
        if(!to[cur][c - 'a'])
        {
            to[cur][c - 'a'] = sz++;
            len[to[cur][c - 'a']] = len[cur] + 1;
        }
        cur = to[cur][c - 'a'];
    }
    term[cur] = cur; 
}
 
void push_links()
{
    int que[sz];
    int st = 0, fi = 1;
    que[0] = 0;
    while(st < fi)
    {
        int V = que[st++];
        int U = link[V];
        if(!term[V]) term[V] = term[U];
        for(int c = 0; c < sigma; c++)
            if(to[V][c])
            {
                link[to[V][c]] = V ? to[U][c] : 0;
                que[fi++] = to[V][c];
            }
            else
            {
                to[V][c] = to[U][c];
            }
    }
}
/// –¢–µ—Ä–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ ///
double l = ..., r = ..., EPS = ...; // –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
while (r - l > EPS) {
   double m1 = l + (r - l) / 3,
      m2 = r - (r - l) / 3;
   if (f (m1) < f (m2))
      l = m1;
   else
      r = m2;
}
"
06Hp3HdX,Untitled,Crjase,JavaScript,Tuesday 12th of December 2023 12:30:47 AM CDT,"import * as THREE from 'stuff/three.js'




console.log(""Aaaaaaaaaaaaaaaaaaaa"")

// const renderer = new THREE.WebGLRenderer({antialias: true});
// renderer.setSize(window.innerWidth, window.innerHeight);
// document.body.appendChild(renderer.domElement);

// // Sets the color of the background
// renderer.setClearColor(0xFEFEFE);

// const scene = new THREE.Scene();
// const camera = new THREE.PerspectiveCamera(
//     45,
//     window.innerWidth / window.innerHeight,
//     0.1,
//     1000
// );

// // Sets orbit control to move the camera around
// const orbit = new OrbitControls(camera, renderer.domElement);

// // Camera positioning
// camera.position.set(6, 8, 14);
// orbit.update();

// const planeMesh = new THREE.Mesh(
//     new THREE.PlaneGeometry(20, 20),
//     new THREE.MeshBasicMaterial({
//         side: THREE.DoubleSide
//     })
// );
// planeMesh.rotateX(-Math.PI / 2);
// scene.add(planeMesh);

// // Sets a 12 by 12 gird helper
// const gridHelper = new THREE.GridHelper(12, 12);
// scene.add(gridHelper);

// // Sets the x, y, and z axes with each having a length of 4
// const axesHelper = new THREE.AxesHelper(4);
// scene.add(axesHelper);

// function animate() {
//     renderer.render(scene, camera);
// }

// renderer.setAnimationLoop(animate);

// window.addEventListener('resize', function() {
//     camera.aspect = window.innerWidth / window.innerHeight;
//     camera.updateProjectionMatrix();
//     renderer.setSize(window.innerWidth, window.innerHeight);
// });"
NZFvrpLN,ez150,JbPH008,JSON,Tuesday 12th of December 2023 12:26:24 AM CDT,‚ñü‚ñõ‚ñÉ‚ñú‚ñÉ‚ñû‚ñú‚ñù‚ñú‚ñú‚ñù‚ñä‚ñÉ‚ñû‚ñù‚ñÜ‚ñü‚ñá‚ñü‚ñÜ‚ñÉ‚ñû‚ñú‚ñÖ‚ñù‚ñö‚ñù‚ñû‚ñü‚ñê‚ñü‚ñá‚ñõ‚ñê‚ñû‚ñõ‚ñÉ‚ñõ‚ñû‚ñõ‚ñû‚ñú‚ñÉ‚ñù‚ñÉ‚ñû‚ñÉ‚ñû‚ñù‚ñÑ‚ñÉ‚ñü‚ñù‚ñõ‚ñü‚ñÉ‚ñù‚ñû‚ñÉ‚ñõ‚ñü‚ñö‚ñü‚ñÉ‚ñü‚ñá‚ñû‚ñÖ‚ñû‚ñù‚ñü‚ñö‚ñÉ‚ñû‚ñÉ‚ñô‚ñù‚ñù‚ñú‚ñõ‚ñù‚ñä‚ñù‚ñà‚ñú‚ñù‚ñú‚ñú‚ñù‚ñê‚ñü‚ñê‚ñü‚ñû‚ñÉ‚ñô‚ñù‚ñõ‚ñü‚ñö‚ñú‚ñÑ‚ñû‚ñÉ‚ñû‚ñÜ‚ñÉ‚ñû‚ñû‚ñÑ‚ñû‚ñü‚ñú‚ñõ‚ñü‚ñü‚ñû‚ñô‚ñÉ‚ñü‚ñú‚ñû‚ñú‚ñû‚ñû‚ñÖ‚ñû‚ñÑ‚ñü‚ñá‚ñÉ‚ñÖ‚ñü‚ñÜ‚ñü‚ñÑ‚ñü‚ñÑ‚ñü‚ñö‚ñÉ‚ñü‚ñû‚ñÖ‚ñù‚ñà‚ñÉ‚ñú‚ñü‚ñà‚ñü‚ñõ‚ñü‚ñê‚ñú‚ñö‚ñÉ‚ñù‚ñü‚ñö‚ñÉ‚ñù‚ñÉ‚ñÉ‚ñú‚ñô‚ñù‚ñö‚ñù‚ñÜ‚ñü‚ñà‚ñÉ‚ñÑ‚ñù‚ñÉ‚ñÉ‚ñõ‚ñù‚ñà‚ñû‚ñú‚ñü‚ñü‚ñü‚ñü‚ñõ‚ñê‚ñü‚ñù‚ñÉ‚ñü‚ñù‚ñâ‚ñú‚ñô‚ñõ‚ñê‚ñÉ‚ñÑ‚ñü‚ñà‚ñü‚ñù‚ñü‚ñá‚ñÉ‚ñû‚ñü‚ñà‚ñû‚ñõ‚ñÉ‚ñú‚ñû‚ñõ‚ñû‚ñù‚ñÉ‚ñÉ‚ñú‚ñú‚ñú‚ñû‚ñú‚ñù‚ñÉ‚ñÉ‚ñü‚ñú‚ñü‚ñÉ‚ñú‚ñú‚ñù‚ñä‚ñÉ‚ñõ‚ñÉ‚ñû‚ñù‚ñä‚ñù‚ñÑ‚ñú‚ñÉ‚ñû‚ñõ‚ñÉ‚ñÖ‚ñù‚ñá‚ñù‚ñÉ‚ñü‚ñõ‚ñü‚ñá‚ñü‚ñâ‚ñÉ‚ñú‚ñù‚ñù‚ñü‚ñõ‚ñü‚ñÉ‚ñù‚ñÑ‚ñù‚ñù‚ñû‚ñù‚ñù‚ñà‚ñú‚ñõ‚ñÉ‚ñõ‚ñù‚ñö‚ñü‚ñû‚ñú‚ñù‚ñü‚ñÉ‚ñú‚ñô‚ñû‚ñú‚ñú‚ñü‚ñÉ‚ñú‚ñÉ‚ñö‚ñü‚ñÉ‚ñü‚ñö‚ñû‚ñû‚ñü‚ñê‚ñü‚ñÑ‚ñÉ‚ñÖ‚ñÉ‚ñÑ‚ñü‚ñü‚ñù‚ñä‚ñü‚ñü‚ñù‚ñÉ‚ñü‚ñÉ‚ñú‚ñÑ‚ñü‚ñà‚ñÉ‚ñü‚ñü‚ñù‚ñü‚ñá‚ñú‚ñú‚ñÉ‚ñÉ‚ñú‚ñú‚ñù‚ñü‚ñû‚ñÑ‚ñü‚ñù‚ñû‚ñû‚ñû‚ñû‚ñü‚ñà‚ñü‚ñâ‚ñú‚ñö‚ñù‚ñö‚ñú‚ñú‚ñÉ‚ñû‚ñû‚ñÖ‚ñÉ‚ñö‚ñû‚ñÖ‚ñú‚ñÑ‚ñú‚ñô‚ñÉ‚ñú‚ñü‚ñú‚ñû‚ñô‚ñÉ‚ñû‚ñÉ‚ñö‚ñú‚ñü‚ñü‚ñê‚ñü‚ñÖ‚ñÉ‚ñö‚ñú‚ñÖ‚ñù‚ñÉ‚ñõ‚ñá‚ñÉ‚ñÑ‚ñõ‚ñê‚ñû‚ñù‚ñú‚ñú‚ñû‚ñû‚ñÉ‚ñÖ‚ñû‚ñÖ‚ñù‚ñâ‚ñü‚ñà‚ñú‚ñô‚ñÉ‚ñö‚ñÉ‚ñÖ‚ñú‚ñõ‚ñü‚ñÑ‚ñü‚ñü‚ñû‚ñÑ‚ñù‚ñê‚ñõ‚ñá‚ñú‚ñõ‚ñü‚ñÜ‚ñÉ‚ñü‚ñû‚ñô‚ñù‚ñâ‚ñú‚ñü‚ñù‚ñÉ‚ñû‚ñú‚ñü‚ñÜ‚ñú‚ñõ‚ñÉ‚ñÖ‚ñû‚ñõ‚ñú‚ñÑ‚ñú‚ñÑ‚ñû‚ñÉ‚ñÉ‚ñù‚ñÉ‚ñÉ‚ñü‚ñÜ‚ñú‚ñô‚ñú‚ñû‚ñù‚ñû‚ñù‚ñà‚ñü‚ñÜ‚ñÉ‚ñö‚ñù‚ñö‚ñü‚ñà‚ñù‚ñö‚ñû‚ñù‚ñü‚ñê‚ñû‚ñù‚ñú‚ñù‚ñú‚ñú‚ñû‚ñÑ‚ñú‚ñÖ‚ñú‚ñÉ‚ñÉ‚ñÑ‚ñü‚ñû‚ñÉ‚ñÉ‚ñú‚ñû‚ñü‚ñâ‚ñù‚ñä‚ñû‚ñÜ‚ñÉ‚ñù‚ñõ‚ñê‚ñú‚ñö‚ñû‚ñÉ‚ñù‚ñÉ‚ñú‚ñõ‚ñù‚ñû‚ñü‚ñû‚ñû‚ñû‚ñú‚ñÉ‚ñÉ‚ñõ‚ñü‚ñù‚ñü‚ñá‚ñú‚ñö‚ñù‚ñú‚ñú‚ñü‚ñÉ‚ñõ‚ñû‚ñû‚ñû‚ñÖ‚ñü‚ñâ‚ñú‚ñÑ‚ñÉ‚ñú‚ñú‚ñö‚ñü‚ñù‚ñù‚ñà‚ñü‚ñä‚ñü‚ñÉ‚ñù‚ñû‚ñù‚ñÑ‚ñü‚ñÉ‚ñú‚ñö‚ñü‚ñö‚ñù‚ñÉ‚ñÉ‚ñô‚ñù‚ñâ‚ñú‚ñú‚ñù‚ñû‚ñû‚ñÉ‚ñú‚ñÑ‚ñü‚ñÑ‚ñü‚ñú‚ñõ‚ñê‚ñû‚ñö‚ñù‚ñá‚ñú‚ñù‚ñù‚ñú‚ñü‚ñü‚ñù‚ñê‚ñù‚ñâ‚ñú‚ñü‚ñú‚ñû‚ñÉ‚ñÖ‚ñü‚ñÑ‚ñû‚ñü‚ñü‚ñû‚ñû‚ñù‚ñû‚ñÜ‚ñù‚ñù‚ñù‚ñú‚ñù‚ñÉ‚ñÉ‚ñö‚ñù‚ñú‚ñÉ‚ñÜ‚ñû‚ñû‚ñÉ‚ñû‚ñü‚ñÑ‚ñú‚ñú‚ñü‚ñÑ‚ñù‚ñú‚ñú‚ñÑ‚ñû‚ñû‚ñü‚ñê‚ñÉ‚ñö‚ñû‚ñÉ‚ñÉ‚ñÖ‚ñù‚ñÑ‚ñù‚ñÑ‚ñú‚ñú‚ñù‚ñÜ‚ñõ‚ñá‚ñü‚ñù‚ñü‚ñû‚ñù‚ñà‚ñù‚ñä‚ñÉ‚ñÖ‚ñü‚ñö‚ñü‚ñû‚ñÉ‚ñÉ‚ñü‚ñä‚ñü‚ñû‚ñù‚ñú‚ñú‚ñù‚ñÉ‚ñÉ‚ñÉ‚ñü‚ñü‚ñÖ‚ñú‚ñù‚ñÉ‚ñô‚ñü‚ñú‚ñû‚ñù‚ñü‚ñú‚ñÉ‚ñÖ‚ñú‚ñö‚ñÉ‚ñü‚ñù‚ñö‚ñÉ‚ñü‚ñÉ‚ñô‚ñÉ‚ñú‚ñû‚ñù‚ñû‚ñÑ‚ñÉ‚ñÑ‚ñü‚ñú‚ñù‚ñú‚ñÉ‚ñú‚ñù‚ñú‚ñÉ‚ñÜ‚ñü‚ñà‚ñÉ‚ñõ‚ñú‚ñù‚ñü‚ñê‚ñü‚ñÜ‚ñù‚ñÖ‚ñû‚ñú‚ñû‚ñû‚ñú‚ñù‚ñú‚ñÑ‚ñù‚ñú‚ñú‚ñö‚ñú‚ñô‚ñû‚ñù‚ñú‚ñõ‚ñù‚ñÜ‚ñù‚ñä‚ñÉ‚ñÑ‚ñù‚ñû‚ñù‚ñö‚ñù‚ñà‚ñû‚ñû‚ñü‚ñõ‚ñù‚ñä‚ñú‚ñÑ‚ñÉ‚ñü‚ñú‚ñô‚ñÉ‚ñö‚ñü‚ñÉ‚ñú‚ñÑ‚ñü‚ñÖ‚ñÉ‚ñÑ‚ñÉ‚ñÖ‚ñÉ‚ñü‚ñÉ‚ñÜ‚ñü‚ñú‚ñÉ‚ñö‚ñû‚ñû‚ñû‚ñü‚ñõ‚ñá‚ñù‚ñÖ‚ñù‚ñä‚ñú‚ñû‚ñÉ‚ñû‚ñú‚ñû‚ñü‚ñê‚ñü‚ñù‚ñû‚ñö‚ñû‚ñÖ‚ñü‚ñü‚ñü‚ñü‚ñù‚ñÑ‚ñÉ‚ñÖ‚ñÉ‚ñÉ‚ñÉ‚ñÜ‚ñü‚ñâ‚ñõ‚ñê‚ñÉ‚ñû‚ñü‚ñÉ‚ñû‚ñú‚ñú‚ñõ‚ñú‚ñü‚ñÉ‚ñù‚ñú‚ñõ‚ñû‚ñú‚ñû‚ñû‚ñÉ‚ñô‚ñÉ‚ñÉ‚ñù‚ñÉ‚ñù‚ñü‚ñü‚ñà‚ñù‚ñû‚ñú‚ñù‚ñÉ‚ñÜ‚ñú‚ñú‚ñõ‚ñá‚ñü‚ñá‚ñû‚ñú‚ñù‚ñÑ‚ñú‚ñö‚ñü‚ñù‚ñü‚ñû‚ñú‚ñô‚ñù‚ñÖ‚ñÉ‚ñÑ‚ñÉ‚ñÑ‚ñù‚ñÜ‚ñõ‚ñá‚ñÉ‚ñö‚ñù‚ñâ‚ñÉ‚ñÉ‚ñÉ‚ñú‚ñü‚ñö‚ñü‚ñÑ‚ñü‚ñú‚ñù‚ñÉ‚ñù‚ñû‚ñú‚ñú‚ñÉ‚ñô‚ñü‚ñú‚ñù‚ñÑ‚ñü‚ñà‚ñú‚ñÑ‚ñü‚ñê‚ñü‚ñä‚ñû‚ñÑ‚ñú‚ñö‚ñù‚ñü‚ñÉ‚ñú‚ñÉ‚ñü‚ñû‚ñÑ‚ñü‚ñú‚ñú‚ñú‚ñÉ‚ñö‚ñü‚ñâ‚ñü‚ñÜ‚ñú‚ñö‚ñû‚ñÉ‚ñù‚ñÖ‚ñü‚ñù‚ñú‚ñû‚ñú‚ñõ‚ñÉ‚ñú‚ñû‚ñÜ‚ñû‚ñú‚ñÉ‚ñü‚ñù‚ñà‚ñÉ‚ñö‚ñú‚ñÑ‚ñü‚ñÉ‚ñù‚ñú‚ñÉ‚ñÜ‚ñú‚ñõ‚ñû‚ñô‚ñú‚ñõ‚ñú‚ñõ‚ñú‚ñù‚ñÉ‚ñú‚ñû‚ñÖ‚ñû‚ñÑ‚ñü‚ñÖ‚ñû‚ñÉ‚ñü‚ñû‚ñü‚ñÖ‚ñÉ‚ñü‚ñù‚ñú‚ñü‚ñä‚ñù‚ñà‚ñü‚ñä‚ñÉ‚ñú‚ñü‚ñá‚ñû‚ñÉ‚ñÉ‚ñù‚ñû‚ñÜ‚ñù‚ñÜ‚ñü‚ñÜ‚ñù‚ñà‚ñü‚ñù‚ñü‚ñà‚ñù‚ñü‚ñù‚ñê‚ñÉ‚ñÉ‚ñÉ‚ñû‚ñú‚ñÑ‚ñû‚ñÜ‚ñÉ‚ñù‚ñü‚ñÖ‚ñü‚ñÑ‚ñÉ‚ñÉ‚ñú‚ñö‚ñõ‚ñê‚ñÉ‚ñö‚ñû‚ñÑ‚ñü‚ñä‚ñÉ‚ñõ‚ñû‚ñõ‚ñü‚ñÉ‚ñù‚ñû‚ñù‚ñÉ‚ñÉ‚ñÑ‚ñÉ‚ñû‚ñÉ‚ñõ‚ñû‚ñù‚ñü‚ñâ‚ñü‚ñà‚ñù‚ñà‚ñü‚ñö‚ñõ‚ñê‚ñù‚ñü‚ñú‚ñú‚ñû‚ñô‚ñü‚ñõ‚ñü‚ñÜ‚ñù‚ñÉ‚ñü‚ñà‚ñü‚ñâ‚ñù‚ñú‚ñù‚ñâ‚ñù‚ñù‚ñù‚ñâ‚ñõ‚ñá‚ñü‚ñä‚ñù‚ñö‚ñû‚ñÖ‚ñú‚ñü‚ñù‚ñü‚ñü‚ñü‚ñù‚ñÖ‚ñû‚ñô‚ñú‚ñÉ‚ñü‚ñö‚ñù‚ñê‚ñÉ‚ñü‚ñû‚ñÑ‚ñü‚ñÑ‚ñü‚ñú‚ñù‚ñä‚ñü‚ñú‚ñù‚ñü‚ñû‚ñû‚ñû‚ñõ‚ñú‚ñù‚ñÉ‚ñÑ‚ñÉ‚ñö‚ñü‚ñö‚ñü‚ñÉ‚ñû‚ñõ‚ñû‚ñÜ‚ñù‚ñú‚ñü‚ñÉ‚ñÉ‚ñö‚ñÉ‚ñõ‚ñú‚ñù‚ñû‚ñù‚ñú‚ñõ‚ñû‚ñÜ‚ñû‚ñÜ‚ñü‚ñû‚ñü‚ñû‚ñù‚ñä‚ñü‚ñÜ‚ñû‚ñô‚ñú‚ñÑ‚ñû‚ñö‚ñü‚ñú‚ñù‚ñû‚ñù‚ñü‚ñü‚ñâ‚ñõ‚ñá‚ñù‚ñö‚ñÉ‚ñú‚ñû‚ñÉ‚ñü‚ñú‚ñù‚ñü‚ñú‚ñû‚ñÉ‚ñÑ‚ñú‚ñõ‚ñú‚ñû‚ñù‚ñâ‚ñù‚ñÖ‚ñû‚ñÉ‚ñú‚ñú‚ñü‚ñÖ‚ñü‚ñÉ‚ñù‚ñá‚ñù‚ñá‚ñü‚ñö‚ñù‚ñá‚ñû‚ñû‚ñü‚ñú‚ñü‚ñÜ‚ñÉ‚ñõ‚ñú‚ñû‚ñù‚ñõ‚ñû‚ñô‚ñü‚ñÜ‚ñú‚ñù‚ñü‚ñû‚ñù‚ñõ‚ñú‚ñû‚ñû‚ñÖ‚ñÉ‚ñù‚ñú‚ñù‚ñù‚ñÜ‚ñü‚ñá‚ñú‚ñÑ‚ñù‚ñü‚ñù‚ñö‚ñû‚ñõ‚ñõ‚ñá‚ñù‚ñù‚ñú‚ñú‚ñü‚ñê‚ñú‚ñü‚ñÉ‚ñö‚ñû‚ñú‚ñú‚ñÑ‚ñÉ‚ñû‚ñù‚ñÜ‚ñù‚ñû‚ñÉ‚ñÜ‚ñù‚ñÖ‚ñú‚ñÉ‚ñú‚ñõ‚ñú‚ñö‚ñû‚ñÑ‚ñú‚ñü‚ñÉ‚ñö‚ñü‚ñê‚ñü‚ñö‚ñû‚ñÉ‚ñü‚ñÖ‚ñû‚ñù‚ñû‚ñÜ‚ñù‚ñö‚ñü‚ñú‚ñÉ‚ñû‚ñü‚ñä‚ñÉ‚ñÜ‚ñõ‚ñê‚ñù‚ñÑ‚ñü‚ñÑ‚ñù‚ñÜ‚ñÉ‚ñÑ‚ñü‚ñû‚ñõ‚ñá‚ñü‚ñö‚ñõ‚ñá‚ñÉ‚ñü‚ñû‚ñÜ‚ñù‚ñÖ‚ñù‚ñÉ‚ñÉ‚ñü‚ñú‚ñõ‚ñù‚ñö‚ñü‚ñö‚ñü‚ñÑ‚ñû‚ñö‚ñù‚ñÑ‚ñù‚ñÉ‚ñü‚ñÖ‚ñû‚ñû‚ñú‚ñö‚ñù‚ñù‚ñü‚ñä‚ñù‚ñá‚ñù‚ñÉ‚ñû‚ñô‚ñü‚ñÖ‚ñÉ‚ñõ‚ñû‚ñÖ‚ñù‚ñÑ‚ñû‚ñü‚ñù‚ñû‚ñü‚ñÖ‚ñú‚ñú‚ñü‚ñà‚ñú‚ñû‚ñù‚ñê‚ñú‚ñõ‚ñü‚ñû‚ñÉ‚ñö‚ñù‚ñÖ‚ñû‚ñÖ‚ñÉ‚ñü‚ñü‚ñú‚ñù‚ñö‚ñÉ‚ñô‚ñû‚ñÑ‚ñû‚ñô‚ñÉ‚ñÉ‚ñü‚ñù‚ñù‚ñà‚ñú‚ñû‚ñÉ‚ñö‚ñü‚ñÜ‚ñù‚ñÜ‚ñÉ‚ñÑ‚ñù‚ñâ‚ñü‚ñê‚ñû‚ñú‚ñù‚ñü‚ñÉ‚ñü‚ñú‚ñÉ‚ñù‚ñÖ‚ñû‚ñú‚ñü‚ñá‚ñù‚ñÑ‚ñü‚ñÉ‚ñü‚ñä‚ñü‚ñÜ‚ñü‚ñâ‚ñù‚ñÑ‚ñù‚ñö‚ñõ‚ñá‚ñù‚ñÖ‚ñú‚ñô‚ñù‚ñõ‚ñü‚ñÉ‚ñú‚ñú‚ñû‚ñÑ‚ñü‚ñÖ‚ñû‚ñü‚ñú‚ñÉ‚ñú‚ñÖ‚ñù‚ñõ‚ñù‚ñÖ‚ñú‚ñù‚ñù‚ñà‚ñû‚ñÜ‚ñù‚ñÑ‚ñû‚ñô‚ñù‚ñÑ‚ñû‚ñù‚ñù‚ñâ‚ñú‚ñú‚ñù‚ñê‚ñü‚ñÜ‚ñÉ‚ñÑ‚ñû‚ñö‚ñú‚ñö‚ñü‚ñâ‚ñú‚ñú‚ñû‚ñö‚ñÉ‚ñõ‚ñù‚ñù‚ñù‚ñö‚ñÉ‚ñü‚ñú‚ñÉ‚ñÉ‚ñö‚ñÉ‚ñú‚ñû‚ñô‚ñÉ‚ñù‚ñõ‚ñá‚ñÉ‚ñÖ‚ñú‚ñù‚ñü‚ñõ‚ñú‚ñö‚ñù‚ñö‚ñù‚ñà‚ñü‚ñö‚ñû‚ñÖ‚ñû‚ñù‚ñù‚ñá‚ñû‚ñõ‚ñÉ‚ñÖ‚ñÉ‚ñù‚ñÉ‚ñû‚ñú‚ñô‚ñû‚ñú‚ñù‚ñù‚ñû‚ñú‚ñú‚ñö‚ñü‚ñä‚ñÉ‚ñÖ‚ñû‚ñõ‚ñù‚ñü‚ñÉ‚ñû‚ñù‚ñõ‚ñû‚ñõ‚ñù‚ñâ‚ñÉ‚ñÜ‚ñú‚ñö‚ñú‚ñù‚ñÉ‚ñö‚ñÉ‚ñü‚ñù‚ñà‚ñù‚ñõ‚ñÉ‚ñö‚ñü‚ñâ‚ñü‚ñá‚ñù‚ñÑ‚ñü‚ñö‚ñü‚ñù‚ñü‚ñú‚ñü‚ñú‚ñü‚ñù‚ñÉ‚ñü‚ñú‚ñÖ‚ñù‚ñÜ‚ñü‚ñÉ‚ñÉ‚ñÜ‚ñù‚ñá‚ñú‚ñù‚ñü‚ñà‚ñü‚ñä‚ñÉ‚ñù‚ñÉ‚ñö‚ñõ‚ñê‚ñù‚ñÖ‚ñû‚ñÖ‚ñÉ‚ñü‚ñü‚ñà‚ñù‚ñõ‚ñÉ‚ñÑ‚ñÉ‚ñÑ‚ñú‚ñû‚ñÉ‚ñú‚ñû‚ñÖ‚ñû‚ñÉ‚ñú‚ñÉ‚ñü‚ñä‚ñû‚ñÉ‚ñÉ‚ñÜ‚ñõ‚ñê‚ñù‚ñÖ‚ñú‚ñÖ‚ñù‚ñÜ‚ñü‚ñê‚ñù‚ñõ‚ñú‚ñù‚ñù‚ñû‚ñü‚ñä‚ñù‚ñö‚ñõ‚ñê‚ñú‚ñü‚ñÉ‚ñÜ‚ñû‚ñô‚ñÉ‚ñõ‚ñü‚ñÉ‚ñÉ‚ñÖ‚ñú‚ñö‚ñù‚ñõ‚ñÉ‚ñú‚ñù‚ñÜ‚ñù‚ñü‚ñú‚ñù‚ñû‚ñö‚ñú‚ñô‚ñÉ‚ñÉ‚ñÉ‚ñú‚ñù‚ñÑ‚ñÉ‚ñõ‚ñÉ‚ñö‚ñù‚ñù‚ñû‚ñÜ‚ñÉ‚ñÑ‚ñü‚ñü‚ñÉ‚ñÜ‚ñù‚ñê‚ñÉ‚ñú‚ñÉ‚ñõ‚ñü‚ñà‚ñü‚ñÑ‚ñù‚ñä‚ñù‚ñö‚ñù‚ñõ‚ñü‚ñõ‚ñü‚ñê‚ñû‚ñú‚ñü‚ñÖ‚ñù‚ñÖ‚ñÉ‚ñü‚ñÉ‚ñõ‚ñü‚ñú‚ñú‚ñö‚ñù‚ñÖ‚ñû‚ñû‚ñû‚ñõ‚ñú‚ñú‚ñü‚ñû‚ñú‚ñÖ‚ñú‚ñÖ‚ñú‚ñú‚ñù‚ñê‚ñû‚ñÜ‚ñü‚ñÉ‚ñÉ‚ñô‚ñù‚ñá‚ñù‚ñÉ‚ñù‚ñä‚ñÉ‚ñô‚ñü‚ñâ‚ñù‚ñâ‚ñù‚ñÜ‚ñü‚ñù‚ñù‚ñà‚ñú‚ñõ‚ñù‚ñä‚ñú‚ñú‚ñü‚ñá‚ñû‚ñõ‚ñÉ‚ñú‚ñù‚ñÜ‚ñÉ‚ñú‚ñõ‚ñê‚ñú‚ñô‚ñú‚ñõ‚ñú‚ñÉ‚ñù‚ñö‚ñü‚ñû‚ñú‚ñú‚ñù‚ñú‚ñü‚ñú‚ñÉ‚ñû‚ñõ‚ñê‚ñü‚ñÉ‚ñû‚ñú‚ñù‚ñö‚ñÉ‚ñÜ‚ñü‚ñà‚ñù‚ñö‚ñü‚ñû‚ñú‚ñù‚ñü‚ñü‚ñÉ‚ñû‚ñü‚ñÉ‚ñÉ‚ñÉ‚ñú‚ñü‚ñü‚ñû‚ñÉ‚ñö‚ñú‚ñú‚ñù‚ñõ‚ñû‚ñõ‚ñù‚ñû‚ñù‚ñä‚ñü‚ñÖ‚ñÉ‚ñÖ‚ñÉ‚ñÑ‚ñú‚ñô‚ñÉ‚ñÉ‚ñû‚ñú‚ñù‚ñÜ‚ñù‚ñû‚ñú‚ñù‚ñÉ‚ñô‚ñû‚ñõ‚ñú‚ñõ‚ñù‚ñà‚ñú‚ñÉ‚ñü‚ñà‚ñü‚ñê‚ñü‚ñú‚ñÉ‚ñõ‚ñú‚ñÖ‚ñú‚ñö‚ñú‚ñÑ‚ñù‚ñÜ‚ñü‚ñÖ‚ñû‚ñú‚ñü‚ñú‚ñù‚ñâ‚ñú‚ñô‚ñÉ‚ñÖ‚ñû‚ñô‚ñû‚ñÉ‚ñù‚ñü‚ñõ‚ñá‚ñü‚ñá‚ñÉ‚ñö‚ñù‚ñÉ‚ñù‚ñä‚ñù‚ñâ‚ñü‚ñä‚ñú‚ñÉ‚ñú‚ñû‚ñù‚ñû‚ñü‚ñÑ‚ñÉ‚ñÑ‚ñù‚ñê‚ñû‚ñú‚ñü‚ñÉ‚ñü‚ñü‚ñÉ‚ñõ‚ñü‚ñü‚ñÉ‚ñÑ‚ñù‚ñâ‚ñú‚ñÑ‚ñÉ‚ñù‚ñü‚ñÖ‚ñÉ‚ñÜ‚ñú‚ñú‚ñÉ‚ñû‚ñü‚ñâ‚ñù‚ñÖ‚ñù‚ñÖ‚ñü‚ñÑ‚ñú‚ñÉ‚ñü‚ñä‚ñü‚ñà‚ñù‚ñä‚ñû‚ñô‚ñú‚ñù‚ñÉ‚ñü‚ñû‚ñÉ‚ñü‚ñö‚ñü‚ñû‚ñù‚ñÖ‚ñú‚ñù‚ñú‚ñú‚ñü‚ñà‚ñÉ‚ñü‚ñÉ‚ñö‚ñù‚ñû‚ñü‚ñù‚ñù‚ñÑ‚ñù‚ñá‚ñù‚ñÖ‚ñû‚ñö‚ñü‚ñÜ‚ñû‚ñÖ‚ñÉ‚ñÑ‚ñü‚ñÉ‚ñù‚ñà‚ñú‚ñö‚ñü‚ñÉ‚ñú‚ñõ‚ñû‚ñù‚ñü‚ñö‚ñü‚ñà‚ñû‚ñô‚ñü‚ñõ‚ñÉ‚ñû‚ñû‚ñõ‚ñü‚ñà‚ñú‚ñô‚ñü‚ñû‚ñû‚ñû‚ñü‚ñÜ‚ñù‚ñÉ‚ñû‚ñô‚ñÉ‚ñô‚ñù‚ñö‚ñü‚ñâ‚ñõ‚ñá‚ñù‚ñú‚ñÉ‚ñú‚ñù‚ñá‚ñû‚ñÖ‚ñú‚ñÉ‚ñû‚ñû‚ñü‚ñú‚ñü‚ñê‚ñù‚ñâ‚ñÉ‚ñö‚ñÉ‚ñõ‚ñõ‚ñê‚ñü‚ñÖ‚ñú‚ñú‚ñÉ‚ñû‚ñü‚ñö‚ñÉ‚ñÉ‚ñû‚ñû‚ñù‚ñê‚ñù‚ñê‚ñú‚ñü‚ñû‚ñù‚ñû‚ñÜ‚ñü‚ñú‚ñÉ‚ñÑ‚ñû‚ñù‚ñù‚ñà‚ñù‚ñá‚ñû‚ñÉ‚ñù‚ñÖ‚ñü‚ñù‚ñù‚ñá‚ñú‚ñÑ‚ñü‚ñû‚ñû‚ñõ‚ñù‚ñÖ‚ñù‚ñü‚ñú‚ñõ‚ñû‚ñú‚ñú‚ñÉ‚ñÉ‚ñÑ‚ñÉ‚ñÖ‚ñû‚ñü‚ñû‚ñÑ‚ñú‚ñû‚ñù‚ñâ‚ñú‚ñÉ‚ñÉ‚ñõ‚ñü‚ñü‚ñü‚ñö‚ñÉ‚ñÜ‚ñû‚ñô‚ñû‚ñô‚ñú‚ñÖ‚ñù‚ñà‚ñü‚ñù‚ñù‚ñê‚ñû‚ñÉ‚ñû‚ñù‚ñû‚ñõ‚ñü‚ñÑ‚ñÉ‚ñö‚ñÉ‚ñÖ‚ñú‚ñÑ‚ñû‚ñô‚ñü‚ñä‚ñù‚ñê‚ñü‚ñú‚ñû‚ñÉ‚ñú‚ñÖ‚ñü‚ñà‚ñù‚ñù‚ñú‚ñú‚ñÉ‚ñö‚ñù‚ñà‚ñù‚ñá‚ñù‚ñù‚ñû‚ñú‚ñü‚ñÖ‚ñû‚ñû‚ñü‚ñõ‚ñÉ‚ñü‚ñú‚ñô‚ñÉ‚ñö‚ñù‚ñâ‚ñõ‚ñê‚ñÉ‚ñú‚ñû‚ñú‚ñú‚ñô‚ñü‚ñÜ‚ñú‚ñü‚ñû‚ñÉ‚ñû‚ñü‚ñü‚ñâ‚ñú‚ñö‚ñú‚ñù‚ñû‚ñü‚ñü‚ñö‚ñÉ‚ñû‚ñú‚ñú‚ñú‚ñÖ‚ñú‚ñö‚ñü‚ñá‚ñù‚ñà‚ñú‚ñÉ‚ñü‚ñê‚ñü‚ñâ‚ñú‚ñÑ‚ñü‚ñà‚ñü‚ñÉ‚ñû‚ñÑ‚ñÉ‚ñÑ‚ñû‚ñû‚ñü‚ñü‚ñù‚ñÑ‚ñû‚ñÜ‚ñú‚ñõ‚ñù‚ñÜ‚ñù‚ñü‚ñù‚ñü‚ñÉ‚ñÑ‚ñù‚ñÜ‚ñù‚ñÜ‚ñû‚ñô‚ñÉ‚ñú‚ñù‚ñû‚ñû‚ñü‚ñû‚ñÉ‚ñÉ‚ñú‚ñÉ‚ñô‚ñû‚ñô‚ñù‚ñá‚ñÉ‚ñÑ‚ñõ‚ñê‚ñû‚ñü‚ñÉ‚ñõ‚ñõ‚ñê‚ñü‚ñü‚ñú‚ñù‚ñú‚ñÑ‚ñü‚ñö‚ñü‚ñù‚ñÉ‚ñõ‚ñú‚ñú‚ñù‚ñú‚ñü‚ñá‚ñû‚ñÉ‚ñü‚ñá‚ñü‚ñõ‚ñù‚ñâ‚ñü‚ñõ‚ñú‚ñú‚ñÉ‚ñÜ‚ñü‚ñú‚ñü‚ñÉ‚ñù‚ñà‚ñû‚ñú‚ñù‚ñâ‚ñü‚ñõ‚ñü‚ñá‚ñÉ‚ñõ‚ñû‚ñÉ‚ñû‚ñû‚ñù‚ñÑ‚ñÉ‚ñû‚ñú‚ñÉ‚ñÉ‚ñÑ‚ñù‚ñù‚ñú‚ñû‚ñû‚ñô‚ñù‚ñá‚ñú‚ñù‚ñû‚ñÑ‚ñü‚ñù‚ñü‚ñú‚ñü‚ñà‚ñÉ‚ñù‚ñù‚ñõ‚ñü‚ñÜ‚ñü‚ñÑ‚ñù‚ñû‚ñü‚ñù‚ñõ‚ñê‚ñû‚ñÑ‚ñù‚ñõ‚ñù‚ñÜ‚ñù‚ñä‚ñü‚ñà‚ñü‚ñü‚ñù‚ñà‚ñù‚ñê‚ñû‚ñû‚ñü‚ñû‚ñü‚ñà‚ñÉ‚ñö‚ñü‚ñá‚ñú‚ñÖ‚ñù‚ñõ‚ñû‚ñö‚ñü‚ñú‚ñü‚ñû‚ñù‚ñÉ‚ñú‚ñÑ‚ñú‚ñü‚ñú‚ñÉ‚ñù‚ñú‚ñÉ‚ñü‚ñú‚ñÉ‚ñú‚ñù‚ñû‚ñú‚ñõ‚ñá‚ñõ‚ñá‚ñû‚ñö‚ñü‚ñõ‚ñú‚ñú‚ñû‚ñÑ‚ñû‚ñÉ‚ñù‚ñü‚ñÉ‚ñù‚ñú‚ñõ‚ñÉ‚ñû‚ñü‚ñö‚ñù‚ñû‚ñù‚ñÉ‚ñú‚ñÑ‚ñÉ‚ñú‚ñü‚ñû‚ñü‚ñÑ‚ñÉ‚ñÜ‚ñü‚ñà‚ñú‚ñÖ‚ñü‚ñù‚ñÉ‚ñô‚ñù‚ñá‚ñü‚ñê‚ñÉ‚ñõ‚ñù‚ñÑ‚ñÉ‚ñô‚ñû‚ñÉ‚ñü‚ñû‚ñü‚ñö‚ñù‚ñú‚ñù‚ñÑ‚ñù‚ñÉ‚ñü‚ñá‚ñÉ‚ñÖ‚ñù‚ñÖ‚ñù‚ñÜ‚ñù‚ñê‚ñû‚ñÑ‚ñü‚ñü‚ñü‚ñä‚ñÉ‚ñõ‚ñù‚ñÜ‚ñû‚ñö‚ñÉ‚ñÑ‚ñû‚ñû‚ñü‚ñù‚ñù‚ñà‚ñû‚ñù‚ñü‚ñÖ‚ñõ‚ñá‚ñù‚ñö‚ñü‚ñà‚ñû‚ñû‚ñü‚ñà‚ñù‚ñÖ‚ñú‚ñÖ‚ñù‚ñö‚ñù‚ñö‚ñù‚ñÜ‚ñü‚ñü‚ñÉ‚ñö‚ñü‚ñù‚ñÉ‚ñü‚ñù‚ñÖ‚ñÉ‚ñÖ‚ñõ‚ñá‚ñü‚ñù‚ñù‚ñÉ‚ñú‚ñü‚ñÉ‚ñõ‚ñü‚ñê‚ñü‚ñà‚ñù‚ñù‚ñù‚ñÑ‚ñú‚ñô‚ñü‚ñú‚ñù‚ñõ‚ñõ‚ñê‚ñÉ‚ñõ‚ñü‚ñÜ‚ñü‚ñû‚ñõ‚ñá‚ñÉ‚ñû‚ñü‚ñû‚ñÉ‚ñÑ‚ñù‚ñõ‚ñù‚ñÑ‚ñú‚ñù‚ñõ‚ñê‚ñõ‚ñê‚ñù‚ñä‚ñù‚ñõ‚ñü‚ñÜ‚ñÉ‚ñÉ‚ñü‚ñú‚ñû‚ñÑ‚ñü‚ñù‚ñõ‚ñá‚ñù‚ñü‚ñû‚ñü‚ñÉ‚ñü‚ñü‚ñü‚ñÉ‚ñÖ‚ñù‚ñÉ‚ñü‚ñá‚ñù‚ñõ‚ñÉ‚ñü‚ñü‚ñÑ‚ñü‚ñü‚ñû‚ñÉ‚ñû‚ñÖ‚ñü‚ñá‚ñù‚ñü‚ñû‚ñù‚ñù‚ñù‚ñù‚ñÖ‚ñü‚ñÖ‚ñû‚ñö‚ñù‚ñê‚ñü‚ñä‚ñú‚ñõ‚ñü‚ñÖ‚ñù‚ñÉ‚ñÉ‚ñÑ‚ñú‚ñÑ‚ñû‚ñû‚ñü‚ñú‚ñù‚ñà‚ñú‚ñÖ‚ñõ‚ñê‚ñÉ‚ñÜ‚ñù‚ñê‚ñù‚ñü‚ñÉ‚ñù‚ñû‚ñÖ‚ñõ‚ñá‚ñü‚ñà‚ñù‚ñÖ‚ñü‚ñû‚ñù‚ñõ‚ñù‚ñä‚ñù‚ñö‚ñú‚ñÉ‚ñõ‚ñá‚ñÉ‚ñõ‚ñÉ‚ñÉ‚ñú‚ñÖ‚ñü‚ñê‚ñú‚ñõ‚ñû‚ñú‚ñü‚ñâ‚ñü‚ñÑ‚ñü‚ñÉ‚ñú‚ñô‚ñü‚ñÑ‚ñû‚ñù‚ñû‚ñû‚ñù‚ñÖ‚ñü‚ñá‚ñü‚ñû‚ñú‚ñú‚ñÉ‚ñú‚ñÉ‚ñù‚ñú‚ñù‚ñû‚ñÉ‚ñÉ‚ñü‚ñù‚ñõ‚ñü‚ñá‚ñù‚ñà‚ñû‚ñú‚ñü‚ñÜ‚ñû‚ñö‚ñü‚ñú‚ñù‚ñà‚ñü‚ñá‚ñú‚ñú‚ñû‚ñõ‚ñù‚ñü‚ñû‚ñÉ‚ñü‚ñü‚ñú‚ñÑ‚ñÉ‚ñü‚ñù‚ñâ‚ñû‚ñö‚ñû‚ñÑ‚ñü‚ñÉ‚ñû‚ñö‚ñÉ‚ñÉ‚ñÉ‚ñü‚ñü‚ñÖ‚ñù‚ñÖ‚ñù‚ñü‚ñü‚ñõ‚ñü‚ñê‚ñü‚ñá‚ñÉ‚ñÉ‚ñû‚ñü‚ñü‚ñú‚ñü‚ñõ‚ñÉ‚ñù‚ñû‚ñö‚ñÉ‚ñÖ‚ñù‚ñü‚ñù‚ñê‚ñÉ‚ñõ‚ñÉ‚ñÑ‚ñü‚ñÑ‚ñù‚ñê‚ñü‚ñä‚ñù‚ñÖ‚ñû‚ñû‚ñû‚ñú‚ñù‚ñÉ‚ñù‚ñú‚ñù‚ñû‚ñü‚ñù‚ñû‚ñö‚ñû‚ñõ‚ñü‚ñÑ‚ñù‚ñõ‚ñÉ‚ñõ‚ñù‚ñê‚ñÉ‚ñü‚ñü‚ñú‚ñü‚ñõ‚ñù‚ñÉ‚ñû‚ñõ‚ñÉ‚ñõ‚ñù‚ñú‚ñú‚ñÉ‚ñû‚ñû‚ñü‚ñá‚ñü‚ñà‚ñÉ‚ñö‚ñû‚ñü‚ñû‚ñû‚ñù‚ñê‚ñù‚ñÜ‚ñù‚ñâ‚ñû‚ñù‚ñÉ‚ñÖ‚ñù‚ñÑ‚ñû‚ñú‚ñú‚ñô‚ñù‚ñû‚ñÉ‚ñù‚ñû‚ñõ‚ñÉ‚ñö‚ñÉ‚ñù‚ñú‚ñô‚ñú‚ñö‚ñü‚ñÑ‚ñú‚ñû‚ñù‚ñà‚ñû‚ñõ‚ñü‚ñÜ‚ñü‚ñÑ‚ñù‚ñâ‚ñü‚ñù‚ñû‚ñÜ‚ñÉ‚ñü‚ñÉ‚ñö‚ñÉ‚ñÖ‚ñù‚ñü‚ñõ‚ñá‚ñÉ‚ñÖ‚ñú‚ñù‚ñû‚ñü‚ñü‚ñû‚ñù‚ñà‚ñû‚ñÜ‚ñù‚ñÑ‚ñü‚ñê‚ñû‚ñû‚ñù‚ñû‚ñù‚ñÜ‚ñü‚ñù‚ñù‚ñä‚ñÉ‚ñÉ‚ñÉ‚ñÜ‚ñü‚ñõ‚ñÉ‚ñù‚ñü‚ñÑ‚ñú‚ñö‚ñü‚ñÜ‚ñÉ‚ñù‚ñÉ‚ñö‚ñü‚ñÑ‚ñÉ‚ñÜ‚ñù‚ñÜ‚ñû‚ñõ‚ñú‚ñÉ‚ñü‚ñê‚ñü‚ñü‚ñû‚ñö‚ñù‚ñû‚ñü‚ñê‚ñù‚ñÉ‚ñù‚ñö‚ñü‚ñö‚ñõ‚ñê‚ñù‚ñü‚ñÉ‚ñö‚ñõ‚ñá‚ñü‚ñü‚ñÉ‚ñÉ‚ñü‚ñÉ‚ñú‚ñü‚ñõ‚ñá‚ñü‚ñä‚ñù‚ñá‚ñü‚ñö‚ñü‚ñü‚ñÉ‚ñÖ‚ñù‚ñâ‚ñú‚ñú‚ñù‚ñä‚ñù‚ñê‚ñü‚ñÉ‚ñõ‚ñê‚ñü‚ñê‚ñù‚ñõ‚ñû‚ñö‚ñõ‚ñê‚ñù‚ñá‚ñù‚ñû‚ñÉ‚ñú‚ñú‚ñú‚ñû‚ñü‚ñú‚ñû‚ñú‚ñú‚ñü‚ñù‚ñü‚ñâ‚ñü‚ñà‚ñú‚ñõ‚ñü‚ñà‚ñû‚ñô‚ñü‚ñÖ‚ñû‚ñö‚ñû‚ñù‚ñù‚ñù‚ñù‚ñõ‚ñÉ‚ñú‚ñù‚ñù‚ñÉ‚ñú‚ñü‚ñö‚ñû‚ñù‚ñü‚ñÉ‚ñù‚ñÜ‚ñù‚ñö‚ñÉ‚ñû‚ñü‚ñö‚ñú‚ñÖ‚ñù‚ñÜ‚ñü‚ñü‚ñú‚ñû‚ñÉ‚ñÜ‚ñü‚ñâ‚ñú‚ñü‚ñû‚ñÖ‚ñÉ‚ñô‚ñÉ‚ñÜ‚ñü‚ñê‚ñú‚ñÖ‚ñú‚ñõ‚ñÉ‚ñü‚ñÉ‚ñõ‚ñü‚ñÉ‚ñú‚ñù‚ñü‚ñâ‚ñü‚ñû‚ñú‚ñÖ‚ñû‚ñÑ‚ñù‚ñâ‚ñü‚ñú‚ñÉ‚ñÑ‚ñú‚ñù‚ñü‚ñû‚ñÉ‚ñÖ‚ñù‚ñÑ‚ñü‚ñú‚ñû‚ñÜ‚ñÉ‚ñÖ‚ñü‚ñö‚ñú‚ñû‚ñü‚ñö‚ñù‚ñà‚ñÉ‚ñû‚ñÉ‚ñü‚ñù‚ñù‚ñù‚ñâ‚ñü‚ñõ‚ñù‚ñù‚ñû‚ñô‚ñü‚ñê‚ñù‚ñù‚ñû‚ñû‚ñõ‚ñê‚ñÉ‚ñú‚ñú‚ñÉ‚ñú‚ñÑ‚ñú‚ñù‚ñù‚ñê‚ñù‚ñù‚ñû‚ñÜ‚ñÉ‚ñû‚ñÉ‚ñõ‚ñü‚ñù‚ñù‚ñÜ‚ñú‚ñö‚ñù‚ñÉ‚ñÉ‚ñú‚ñü‚ñù‚ñû‚ñô‚ñü‚ñÉ‚ñú‚ñÉ‚ñü‚ñÜ‚ñú‚ñõ‚ñû‚ñÖ‚ñÉ‚ñû‚ñù‚ñá‚ñÉ‚ñÉ‚ñú‚ñÉ‚ñü‚ñõ‚ñù‚ñú‚ñù‚ñÑ‚ñü‚ñú‚ñù‚ñÜ‚ñù‚ñö‚ñú‚ñÖ‚ñü‚ñÑ‚ñü‚ñà‚ñû‚ñÜ‚ñù‚ñÑ‚ñú‚ñÉ‚ñù‚ñÑ‚ñú‚ñÑ‚ñù‚ñà‚ñÉ‚ñú‚ñü‚ñÖ‚ñû‚ñô‚ñú‚ñö‚ñû‚ñô‚ñù‚ñõ‚ñü‚ñä‚ñü‚ñÜ‚ñü‚ñõ‚ñú‚ñõ‚ñü‚ñÉ‚ñü‚ñÖ‚ñÉ‚ñÑ‚ñù‚ñû‚ñû‚ñù‚ñú‚ñõ‚ñù‚ñú‚ñõ‚ñá‚ñÉ‚ñÖ‚ñÉ‚ñù‚ñù‚ñù‚ñõ‚ñá‚ñÉ‚ñÑ‚ñÉ‚ñÖ‚ñù‚ñü‚ñÉ‚ñö‚ñù‚ñÜ‚ñù‚ñÜ‚ñÉ‚ñÜ‚ñÉ‚ñô‚ñù‚ñü‚ñù‚ñá‚ñü‚ñõ‚ñú‚ñõ‚ñù‚ñà‚ñû‚ñÉ‚ñù‚ñä‚ñû‚ñû‚ñû‚ñû‚ñÉ‚ñÉ‚ñù‚ñú‚ñü‚ñä‚ñÉ‚ñÖ‚ñù‚ñä‚ñÉ‚ñõ‚ñÉ‚ñÖ‚ñü‚ñÜ‚ñü‚ñü‚ñû‚ñú‚ñü‚ñâ‚ñü‚ñû‚ñû‚ñÜ‚ñù‚ñÑ‚ñú‚ñÉ‚ñû‚ñù‚ñÉ‚ñÖ‚ñù‚ñá‚ñü‚ñö‚ñù‚ñÉ‚ñù‚ñÖ‚ñü‚ñÜ‚ñú‚ñÖ‚ñú‚ñÑ‚ñù‚ñö‚ñû‚ñÖ‚ñú‚ñü‚ñû‚ñú‚ñü‚ñÉ‚ñü‚ñê‚ñû‚ñü‚ñü‚ñä‚ñü‚ñá‚ñü‚ñú‚ñÉ‚ñõ‚ñù‚ñú‚ñù‚ñÉ‚ñú‚ñÖ‚ñÉ‚ñô‚ñü‚ñâ‚ñú‚ñö‚ñÉ‚ñõ‚ñü‚ñÖ‚ñù‚ñú‚ñù‚ñâ‚ñú‚ñô‚ñû‚ñü‚ñù‚ñä‚ñü‚ñú‚ñû‚ñô‚ñÉ‚ñô‚ñù‚ñÖ‚ñú‚ñÉ‚ñù‚ñö‚ñü‚ñû‚ñÉ‚ñù‚ñû‚ñü‚ñù‚ñà‚ñõ‚ñê‚ñû‚ñü‚ñÉ‚ñÜ‚ñü‚ñü‚ñù‚ñê‚ñú‚ñõ‚ñù‚ñÑ‚ñù‚ñö‚ñü‚ñê‚ñÉ‚ñö‚ñÉ‚ñÉ‚ñõ‚ñê‚ñú‚ñÖ‚ñü‚ñÉ‚ñú‚ñÑ‚ñù‚ñù‚ñÉ‚ñù‚ñü‚ñû‚ñù‚ñâ‚ñü‚ñÑ‚ñü‚ñö‚ñü‚ñû‚ñú‚ñÉ‚ñü‚ñù‚ñõ‚ñê‚ñû‚ñÖ‚ñü‚ñá‚ñü‚ñú‚ñõ‚ñá‚ñù‚ñä‚ñÉ‚ñù‚ñÉ‚ñÜ‚ñú‚ñö‚ñû‚ñõ‚ñû‚ñö‚ñÉ‚ñù‚ñù‚ñê‚ñÉ‚ñö‚ñú‚ñÉ‚ñù‚ñõ‚ñù‚ñÖ‚ñú‚ñü‚ñÉ‚ñû‚ñÉ‚ñù‚ñü‚ñá‚ñû‚ñÜ‚ñú‚ñö‚ñü‚ñú‚ñü‚ñä‚ñü‚ñä‚ñû‚ñõ‚ñõ‚ñá‚ñù‚ñù‚ñü‚ñà‚ñú‚ñû‚ñû‚ñõ‚ñÉ‚ñÉ‚ñû‚ñÑ‚ñú‚ñÑ‚ñü‚ñê‚ñû‚ñú‚ñü‚ñù‚ñü‚ñá‚ñû‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñü‚ñú‚ñú‚ñõ‚ñê‚ñÉ‚ñú‚ñù‚ñü‚ñü‚ñú‚ñü‚ñâ‚ñû‚ñû‚ñù‚ñü‚ñú‚ñõ‚ñù‚ñä‚ñü‚ñÖ‚ñü‚ñÖ‚ñû‚ñÑ‚ñÉ‚ñö‚ñü‚ñú‚ñú‚ñõ‚ñù‚ñû‚ñÉ‚ñù‚ñÉ‚ñö‚ñÉ‚ñö‚ñù‚ñú‚ñõ‚ñê‚ñú‚ñÑ‚ñü‚ñà‚ñû‚ñÜ‚ñû‚ñü‚ñù‚ñá‚ñü‚ñÜ‚ñÉ‚ñÉ‚ñü‚ñà‚ñú‚ñÑ‚ñú‚ñü‚ñü‚ñõ‚ñû‚ñö‚ñü‚ñá‚ñû‚ñÉ‚ñü‚ñú‚ñü‚ñá‚ñù‚ñÜ‚ñü‚ñÑ‚ñû‚ñÖ‚ñü‚ñù‚ñü‚ñü‚ñû‚ñö‚ñù‚ñâ‚ñü‚ñâ‚ñÉ‚ñõ‚ñù‚ñû‚ñÉ‚ñû‚ñÉ‚ñô‚ñü‚ñö‚ñù‚ñú‚ñû‚ñù‚ñû‚ñõ‚ñú‚ñõ‚ñú‚ñÉ‚ñú‚ñÉ‚ñÉ‚ñÜ‚ñü‚ñâ‚ñÉ‚ñõ‚ñÉ‚ñÑ‚ñû‚ñû‚ñü‚ñê‚ñü‚ñà‚ñú‚ñü‚ñû‚ñÖ‚ñù‚ñÑ‚ñû‚ñù‚ñû‚ñù‚ñÉ‚ñÖ‚ñù‚ñõ‚ñú‚ñÉ‚ñü‚ñõ‚ñú‚ñõ‚ñù‚ñÜ‚ñü‚ñû‚ñÉ‚ñÖ‚ñù‚ñÑ‚ñü‚ñõ‚ñÉ‚ñÜ‚ñú‚ñõ‚ñü‚ñÑ‚ñú‚ñù‚ñû‚ñö‚ñû‚ñõ‚ñú‚ñÖ‚ñú‚ñÖ‚ñú‚ñü‚ñû‚ñû‚ñù‚ñÉ‚ñû‚ñô‚ñù‚ñÖ‚ñù‚ñù‚ñü‚ñâ‚ñü‚ñÜ‚ñù‚ñà‚ñú‚ñö‚ñù‚ñâ‚ñü‚ñÑ‚ñú‚ñÑ‚ñû‚ñÜ‚ñû‚ñü‚ñü‚ñÖ‚ñù‚ñä‚ñÉ‚ñÜ‚ñû‚ñõ‚ñù‚ñâ‚ñú‚ñú‚ñù‚ñÑ‚ñù‚ñà‚ñú‚ñõ‚ñù‚ñâ‚ñû‚ñÑ‚ñü‚ñú‚ñü‚ñü‚ñû‚ñù‚ñù‚ñû‚ñù‚ñû‚ñü‚ñù‚ñû‚ñô‚ñü‚ñö‚ñû‚ñú‚ñû‚ñú‚ñü‚ñä‚ñû‚ñÜ‚ñü‚ñÜ‚ñû‚ñü‚ñü‚ñâ‚ñù‚ñù‚ñú‚ñú‚ñú‚ñù‚ñú‚ñú‚ñû‚ñÖ‚ñü‚ñõ‚ñú‚ñô‚ñú‚ñõ‚ñú‚ñÖ‚ñÉ‚ñÖ‚ñú‚ñû‚ñÉ‚ñû‚ñû‚ñÉ‚ñù‚ñÜ‚ñù‚ñÉ‚ñù‚ñÖ‚ñú‚ñÉ‚ñû‚ñÜ‚ñü‚ñÖ‚ñû‚ñô‚ñù‚ñä‚ñü‚ñÑ‚ñõ‚ñê‚ñû‚ñÉ‚ñú‚ñö‚ñû‚ñù‚ñù‚ñÑ‚ñÉ‚ñö‚ñù‚ñü‚ñù‚ñá‚ñû‚ñö‚ñù‚ñÉ‚ñÉ‚ñÖ‚ñú‚ñö‚ñÉ‚ñü‚ñû‚ñÉ‚ñù‚ñú‚ñü‚ñù‚ñü‚ñú‚ñõ‚ñê‚ñü‚ñù‚ñü‚ñü‚ñù‚ñÉ‚ñÉ‚ñõ‚ñú‚ñÖ‚ñú‚ñô‚ñù‚ñä‚ñù‚ñâ‚ñÉ‚ñÖ‚ñù‚ñà‚ñù‚ñÜ‚ñÉ‚ñÜ‚ñú‚ñü‚ñù‚ñü‚ñû‚ñü‚ñû‚ñö‚ñú‚ñÑ‚ñù‚ñú‚ñÉ‚ñû‚ñù‚ñÑ‚ñú‚ñû‚ñù‚ñà‚ñù‚ñÖ‚ñÉ‚ñú‚ñü‚ñÜ‚ñû‚ñû‚ñú‚ñû‚ñü‚ñä‚ñÉ‚ñÖ‚ñû‚ñü‚ñú‚ñù‚ñü‚ñö‚ñÉ‚ñö‚ñú‚ñû‚ñù‚ñÑ‚ñÉ‚ñõ‚ñû‚ñõ‚ñû‚ñö‚ñù‚ñÜ‚ñÉ‚ñù‚ñü‚ñê‚ñù‚ñÖ‚ñú‚ñû‚ñù‚ñá‚ñù‚ñü‚ñü‚ñá‚ñù‚ñü‚ñû‚ñô‚ñõ‚ñê‚ñü‚ñÜ‚ñû‚ñÑ‚ñü‚ñâ‚ñÉ‚ñô‚ñú‚ñõ‚ñü‚ñÖ‚ñÉ‚ñÉ‚ñÉ‚ñÉ‚ñû‚ñô‚ñü‚ñà‚ñü‚ñö‚ñõ‚ñê‚ñû‚ñö‚ñÉ‚ñô‚ñü‚ñÜ‚ñü‚ñÉ‚ñû‚ñõ‚ñú‚ñõ‚ñù‚ñÜ‚ñü‚ñõ‚ñú‚ñù‚ñû‚ñÜ‚ñù‚ñÑ‚ñü‚ñù‚ñù‚ñû‚ñù‚ñÑ‚ñû‚ñû‚ñü‚ñê‚ñù‚ñú‚ñü‚ñö‚ñü‚ñõ‚ñù‚ñü‚ñù‚ñÖ‚ñú‚ñû‚ñû‚ñÜ‚ñú‚ñÑ‚ñù‚ñÖ‚ñû‚ñö‚ñÉ‚ñü‚ñù‚ñà‚ñü‚ñâ‚ñú‚ñô‚ñú‚ñõ‚ñÉ‚ñÜ‚ñù‚ñõ‚ñù‚ñû‚ñü‚ñõ‚ñû‚ñü‚ñû‚ñù‚ñû‚ñú‚ñù‚ñÖ‚ñÉ‚ñû‚ñÉ‚ñÑ‚ñû‚ñô‚ñù‚ñû‚ñû‚ñú‚ñû‚ñÉ‚ñÉ‚ñÑ‚ñÉ‚ñÖ‚ñü‚ñÖ‚ñü‚ñâ‚ñù‚ñê‚ñü‚ñâ‚ñü‚ñÜ‚ñõ‚ñê‚ñÉ‚ñü‚ñÉ‚ñÖ‚ñü‚ñê‚ñû‚ñö‚ñú‚ñú‚ñÉ‚ñÉ‚ñú‚ñü‚ñõ‚ñê‚ñû‚ñû‚ñû‚ñö‚ñû‚ñÜ‚ñü‚ñá‚ñû‚ñü‚ñÉ‚ñú‚ñü‚ñä‚ñú‚ñü‚ñü‚ñü‚ñú‚ñÑ‚ñù‚ñê‚ñù‚ñù‚ñû‚ñÖ‚ñù‚ñÖ‚ñù‚ñú‚ñú‚ñÉ‚ñÉ‚ñÉ‚ñû‚ñÉ‚ñû‚ñÖ‚ñü‚ñÉ‚ñù‚ñà‚ñû‚ñÖ‚ñû‚ñÑ‚ñú‚ñû‚ñü‚ñü‚ñù‚ñâ‚ñõ‚ñê‚ñú‚ñü‚ñü‚ñÜ‚ñù‚ñÉ‚ñú‚ñô‚ñû‚ñö‚ñÉ‚ñû‚ñù‚ñü‚ñú‚ñù‚ñÉ‚ñü‚ñü‚ñÜ‚ñü‚ñà‚ñû‚ñô‚ñÉ‚ñû‚ñù‚ñÜ‚ñù‚ñä‚ñù‚ñâ‚ñü‚ñÉ‚ñü‚ñû‚ñü‚ñÉ‚ñÉ‚ñû‚ñú‚ñö‚ñû‚ñÑ‚ñÉ‚ñÖ‚ñù‚ñÖ‚ñù‚ñû‚ñû‚ñù‚ñû‚ñô‚ñú‚ñÉ‚ñü‚ñÖ‚ñü‚ñä‚ñõ‚ñá‚ñü‚ñà‚ñù‚ñà‚ñü‚ñê‚ñú‚ñö‚ñü‚ñù‚ñü‚ñâ‚ñü‚ñÜ‚ñú‚ñÉ‚ñù‚ñú‚ñú‚ñÑ‚ñú‚ñÑ‚ñü‚ñü‚ñù‚ñû‚ñÉ‚ñû‚ñú‚ñÖ‚ñÉ‚ñÖ‚ñû‚ñö‚ñõ‚ñê‚ñû‚ñû‚ñõ‚ñá‚ñü‚ñõ‚ñÉ‚ñö‚ñü‚ñä‚ñù‚ñâ‚ñÉ‚ñù‚ñÉ‚ñü‚ñù‚ñÉ‚ñù‚ñÖ‚ñõ‚ñê‚ñú‚ñü‚ñú‚ñõ‚ñù‚ñá‚ñù‚ñá‚ñü‚ñâ‚ñü‚ñü‚ñÉ‚ñõ‚ñú‚ñû‚ñü‚ñä‚ñù‚ñù‚ñú‚ñü‚ñù‚ñÜ‚ñú‚ñÉ‚ñù‚ñâ‚ñÉ‚ñú‚ñû‚ñÜ‚ñû‚ñÑ‚ñù‚ñÉ‚ñü‚ñê‚ñû‚ñö‚ñú‚ñÑ‚ñû‚ñú‚ñü‚ñä‚ñü‚ñõ‚ñú‚ñÑ‚ñÉ‚ñú‚ñú‚ñÑ‚ñÉ‚ñú‚ñÉ‚ñû‚ñÉ‚ñÖ‚ñü‚ñö‚ñû‚ñÑ‚ñü‚ñÑ‚ñü‚ñà‚ñû‚ñü‚ñü‚ñö‚ñù‚ñü‚ñú‚ñû‚ñû‚ñÜ‚ñü‚ñü‚ñû‚ñô‚ñù‚ñö‚ñü‚ñõ‚ñú‚ñü‚ñû‚ñú‚ñú‚ñÑ‚ñÉ‚ñõ‚ñú‚ñù‚ñü‚ñÖ‚ñÉ‚ñÜ‚ñû‚ñÑ‚ñÉ‚ñü‚ñù‚ñü‚ñú‚ñü‚ñÉ‚ñõ‚ñÉ‚ñû‚ñü‚ñù‚ñû‚ñÑ‚ñû‚ñú‚ñü‚ñâ‚ñù‚ñõ‚ñÉ‚ñô‚ñü‚ñù‚ñÉ‚ñü‚ñü‚ñê‚ñû‚ñõ‚ñÉ‚ñÜ‚ñü‚ñà‚ñõ‚ñá‚ñú‚ñÑ‚ñü‚ñá‚ñü‚ñú‚ñÉ‚ñö‚ñù‚ñù‚ñù‚ñá‚ñû‚ñú‚ñû‚ñô‚ñù‚ñú‚ñÉ‚ñü‚ñÉ‚ñù‚ñù‚ñê‚ñú‚ñÑ‚ñÉ‚ñÜ‚ñÉ‚ñù‚ñü‚ñû‚ñù‚ñü‚ñü‚ñÜ‚ñÉ‚ñú‚ñü‚ñú‚ñü‚ñö‚ñü‚ñá‚ñÉ‚ñû‚ñù‚ñÖ‚ñú‚ñú‚ñù‚ñõ‚ñÉ‚ñù‚ñû‚ñô‚ñü‚ñê‚ñú‚ñô‚ñü‚ñá‚ñù‚ñä‚ñü‚ñü‚ñù‚ñü‚ñÉ‚ñú‚ñû‚ñù‚ñú‚ñû‚ñÉ‚ñû‚ñù‚ñÉ‚ñû‚ñõ‚ñü‚ñá‚ñû‚ñõ‚ñù‚ñá‚ñõ‚ñê‚ñù‚ñû‚ñû‚ñÑ‚ñü‚ñÑ‚ñÉ‚ñü‚ñù‚ñÑ‚ñú‚ñú‚ñú‚ñõ‚ñù‚ñÜ‚ñù‚ñâ‚ñú‚ñù‚ñû‚ñö‚ñÉ‚ñú‚ñù‚ñú‚ñü‚ñÜ‚ñù‚ñö‚ñü‚ñâ‚ñÉ‚ñö‚ñü‚ñÑ‚ñú‚ñú‚ñû‚ñõ‚ñü‚ñû‚ñù‚ñõ‚ñù‚ñü‚ñÉ‚ñö‚ñõ‚ñá‚ñù‚ñü‚ñù‚ñü‚ñû‚ñÖ‚ñû‚ñõ‚ñÉ‚ñü‚ñü‚ñú‚ñù‚ñÖ‚ñõ‚ñê‚ñû‚ñô‚ñù‚ñü‚ñÉ‚ñÖ‚ñÉ‚ñö‚ñÉ‚ñû‚ñù‚ñà‚ñù‚ñõ‚ñú‚ñú‚ñû‚ñú‚ñú‚ñû‚ñü‚ñö‚ñù‚ñê‚ñü‚ñú‚ñü‚ñü‚ñú‚ñü‚ñû‚ñû‚ñû‚ñû‚ñú‚ñú‚ñü‚ñú‚ñù‚ñõ‚ñù‚ñä‚ñÉ‚ñÜ‚ñõ‚ñá‚ñÉ‚ñù‚ñú‚ñÑ‚ñú‚ñÑ‚ñü‚ñû‚ñû‚ñÉ‚ñù‚ñÖ‚ñû‚ñö‚ñú‚ñù‚ñü‚ñâ‚ñù‚ñõ‚ñù‚ñù‚ñü‚ñõ‚ñû‚ñÜ‚ñü‚ñÜ‚ñÉ‚ñû‚ñû‚ñÖ‚ñü‚ñà‚ñù‚ñÉ‚ñù‚ñö‚ñú‚ñâ
pwncwPku,Secure Login Redirection: Redirect wp-login.php to /login with Elementor Compatibility,vapvarun,PHP,Tuesday 12th of December 2023 12:15:06 AM CDT,"// Redirect wp-login.php to the custom login page
function wbcom_custom_login_redirect($redirect_to, $request, $user) {
    // Is there a user to check?
    if (isset($user->roles) && is_array($user->roles) && in_array('subscriber', $user->roles)) {
        // Redirect them to the default place
        return home_url('/login'); // Updated to use /login
    } else {
        return $redirect_to;
    }
}
add_filter('login_redirect', 'wbcom_custom_login_redirect', 10, 3);

// Redirect non-logged-in users accessing wp-login.php
function wbcom_redirect_non_logged_in_users() {
    if (!is_user_logged_in() && strpos($_SERVER['REQUEST_URI'], 'wp-login.php') !== false && !isset($_POST['wp-submit']) && !defined('DOING_AJAX')) {
        $custom_login_url = home_url('/login'); // Updated to use /login
        wp_redirect($custom_login_url);
        exit;
    }
}
add_action('init', 'wbcom_redirect_non_logged_in_users');
"
4s1CU4DZ,Untitled,Crjase,HTML,Tuesday 12th of December 2023 12:11:02 AM CDT,"<!DOCTYPE html>

<html>
    <head>
        <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
        <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"">
        <style>
			body { margin: 0; }
		</style>
    </head>
    <body>
        <script type=""importmap"" src=""/src/html/main.js"">
            {
                ""imports"": {
                    ""stuff/"": ""/src/imports/THREEJS/three.js""
                }
            }
        </script>
    </body>
</html>"
ajiGbtf1,Advent of code 2023 day 12,hhoppe,Python,Tuesday 12th of December 2023 12:08:38 AM CDT,"def day12(s0, *, part2=False):

  @functools.cache
  def compute(s, counts):
    if not s:
      return 0 if counts else 1
    sum_matches = compute(s[1:], counts) if s[0] in '.?' else 0
    if counts:
      n = counts[0]
      if s[:n].replace('?', '#') == '#' * n and s[n] in '.?':
        sum_matches += compute(s[n + 1 :], counts[1:])
    return sum_matches

  total = 0
  for line in s0.splitlines():
    s, right = line.split()
    counts = tuple(map(int, right.split(',')))
    if part2:
      s = '?'.join([s] * 5)
      counts *= 5
    total += compute(s + '.', counts)

  return total"
zepxVC7D,ÈÇÄÊÇ®‰∏ÄËµ∑ÁúãÔºö555ÂΩ±ËßÜ-Êó†ÊâÄÁïèÊÉß,xiaomianao666,JavaScript,Monday 11th of December 2023 10:48:09 PM CDT,Êµ∑ÈòîËßÜÁïåËßÑÂàôÂàÜ‰∫´ÔºåÂΩìÂâçÂàÜ‰∫´ÁöÑÊòØÔºö‰∫åÁ∫ßÈ°µÈù¢ËØ¶ÊÉÖÔø•page_detailÔø•555ÂΩ±ËßÜ-Êó†ÊâÄÁïèÊÉß@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJqczpcXG5ldmFsKGZldGNoKCdoaWtlcjovL2ZpbGVzL3J1bGVzL3h5cS9oaWtlcm1vdmllLmpzJykpO2hpa2NoYXB0ZXIoKTtcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInBhcmFtc1wiOlwie1xcXCJpZFxcXCI6XFxcIl9feHF5czFAMFxcXCJ9XCIsXCJzYXZlZFwiOmZhbHNlLFwidGl0bGVcIjpcIummmeaDheW9seinhlwiLFwidmVyc2lvblwiOjAsXCJ1cmxcIjpcImh0dHBzOi8vd3d3LjU1NXl5Ny5jb20vdm9kZGV0YWlsLzQ0NTg1Ny5odG1sO2dldDtVVEYtODt7VXNlci1BZ2VudEBNb3ppbGxhLzUuMCAoTGludXjvvJvvvJsgQW5kcm9pZCAxMe+8m++8myBNaSAxMCBQcm8pIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84OC4wLjQzMjQuMTUyIE1vYmlsZSBTYWZhcmkvNTM3LjM2fVwiLFwiY29sX3R5cGVcIjpcImljb25fNF9jYXJkXCIsXCJmaW5kX3J1bGVcIjpcImpzOihcXG4odGt0LCBNT1Z0aXRsZSkgPT4ge1xcbiAgICBpZiAodGt0ICE9IFxcXCJcXFwiKSB7XFxuICAgICAgICBzZXRQYWdlVGl0bGUodGt0ICsgXFxcIi1cXFwiICsgTU9WdGl0bGUpO1xcbiAgICB9XFxuICAgIGV2YWwoZmV0Y2goXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMveHlxL2hpa2VybW92aWUuanNcXFwiKSk7XFxuICAgIG9tZXJqKCk7XFxufVxcbikoXFxcIjU1NeW9seinhlxcXCIsXFxcIuaXoOaJgOeVj+aDp1xcXCIpXCIsXCJncm91cFwiOlwi8J+NjuinhumikVwiLFwidWFcIjpcIm1vYmlsZVwiLFwicHJlUnVsZVwiOlwiLy/orr7nva7mm7TmlrDpl7TpmpTml7bpl7Qs5Y2V5L2N5Li65pW05pWw5aSp44CCXFxudmFyIHVwdGltZSA9IDI7XFxuZnVuY3Rpb24gdXBydWxlZmlsZSgpIHtcXG4gICAgdmFyIHJ1bGVqcyA9IGZldGNoKCdodHRwczovL2FnaXQuYWkvbHprMjM1NTkvQ2xvdWRSdWxlL3Jhdy9icmFuY2gvbWFzdGVyL2hpa2VybW92aWUuanMnLCB7fSk7XFxuICAgIGlmIChydWxlanMuc2VhcmNoKC9sYXp5UnVsZS8pID09IC0xKSB7XFxuICAgICAgICBydWxlanMgPSBmZXRjaCgnaHR0cHM6Ly9jb2RlYmVyZy5vcmcvbHprMjM1NTkvY2xvdWRydWxlL3Jhdy9icmFuY2gvbWFzdGVyL2hpa2VybW92aWUuanMnLCB7fSk7XFxuICAgIH1cXG4gICAgaWYgKHJ1bGVqcy5zZWFyY2goL2xhenlSdWxlLykgIT0gLTEpIHtcXG4gICAgICAgIHdyaXRlRmlsZShcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy94eXEvaGlrZXJtb3ZpZS5qc1xcXCIsIHJ1bGVqcyk7XFxuICAgIH1cXG4gICAgdmFyIHJ1bGVqc29uID0gZmV0Y2goJ2h0dHBzOi8vYWdpdC5haS9semsyMzU1OS9DbG91ZFJ1bGUvcmF3L2JyYW5jaC9tYXN0ZXIvaGlrZXJtb3ZpZS5qc29uJywge30pO1xcbiAgICBpZiAocnVsZWpzb24uc2VhcmNoKC9cXFxcXFxcInZvZGhyZWZcXFxcXFxcIi8pID09IC0xKSB7XFxuICAgICAgICBydWxlanNvbiA9IGZldGNoKCdodHRwczovL2NvZGViZXJnLm9yZy9semsyMzU1OS9jbG91ZHJ1bGUvcmF3L2JyYW5jaC9tYXN0ZXIvaGlrZXJtb3ZpZS5qc29uJywge30pO1xcbiAgICB9XFxuICAgIGlmIChydWxlanNvbi5zZWFyY2goL1xcXFxcXFwidm9kaHJlZlxcXFxcXFwiLykgIT0gLTEpIHtcXG4gICAgICAgIHdyaXRlRmlsZShcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy94eXEvaGlrZXJtb3ZpZS5qc29uXFxcIiwgcnVsZWpzb24pO1xcbiAgICB9XFxuICAgIGlmIChydWxlanMuc2VhcmNoKC9sYXp5UnVsZS8pICE9IC0xICYmIHJ1bGVqc29uLnNlYXJjaCgvXFxcXFxcXCJ2b2RocmVmXFxcXFxcXCIvKSAhPSAtMSkge1xcbiAgICAgICAgd3JpdGVGaWxlKFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL3h5cS9oaWtlcnVwZGF0ZS50eHRcXFwiLCBuZXcgRGF0ZSgpICsgJycpO1xcbiAgICAgICAgY29uZmlybSh7dGl0bGU6J+aPkOekuicsIGNvbnRlbnQ6J+iHquWKqOabtOaWsOWujOaIkCd9KTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIGNvbmZpcm0oe3RpdGxlOifmj5DnpLonLCBjb250ZW50Oifoh6rliqjmm7TmlrDlpLHotKUnfSk7XFxuICAgIH1cXG59XFxuXFxuXFxuXFxuLy/mo4DmtYvmmK/lkKbmnInlhpnlhaXml7bpl7TkuI7op4TliJnnmoRqc+aPkuS7tuaWh+S7tlxcbmlmIChmaWxlRXhpc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMveHlxL2hpa2VydXBkYXRlLnR4dFxcXCIpICYmIGZpbGVFeGlzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy94eXEvaGlrZXJtb3ZpZS5qc1xcXCIpICYmIGZpbGVFeGlzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy94eXEvaGlrZXJtb3ZpZS5qc29uXFxcIikpIHtcXG4gICAgLy/orqHnrpfml7bpl7Tpl7TpmpRcXG4gICAgdmFyIHN0YXJ0ID0gbmV3IERhdGUoZmV0Y2goXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMveHlxL2hpa2VydXBkYXRlLnR4dFxcXCIsIHt9KSk7XFxuICAgIHZhciBub3d0ID0gbmV3IERhdGUoKTtcXG4gICAgdmFyIERfVCA9IG5vd3QuZ2V0VGltZSgpIC0gc3RhcnQuZ2V0VGltZSgpO1xcbiAgICB2YXIgRF9EID0gRF9UIC8gKDEwMDAgKiAzNjAwICogMjQpO1xcbiAgICB2YXIgdGRpZiA9IHBhcnNlSW50KERfRCkgKyAnJztcXG4gICAgLy9sb2codGRpZik7XFxuICAgIC8v6buY6K6k6Ze06ZqU6LaF6L+H6K6+572u5aSp5pWw5bCx5Y+W5LiA5qyh5LqR56uv5paH5Lu2XFxuICAgIGlmICh0ZGlmID49IHVwdGltZSB8fCB0ZGlmIDwgMCkge1xcbiAgICAgICAgdXBydWxlZmlsZSgpO1xcbiAgICB9XFxufSBlbHNlIHtcXG4gICAgLy/lpoLmnpzlsJHkuIDkuKrmlofku7blsLHoh6rliqjlj5bkupHnq6/mlofku7ZcXG4gICAgdXBydWxlZmlsZSgpO1xcbn1cXG5cXG5cXG5cXG4vL+aJp+ihjOmcgOimgemihOWkhOeQhueahOermeeCuVxcbnZhciBsYWMgPSBmZXRjaCgnaGlrZXI6Ly9maWxlcy9ydWxlcy94eXEvaGlrZXJtb3ZpZS5qcycpO1xcbi8vbG9nKGxhYy5sZW5ndGgpO1xcbmlmIChsYWMuc2VhcmNoKC9sYXp5UnVsZS8pICE9IC0xKSB7XFxuICAgIGV2YWwobGFjKTtcXG4gICAgaGlrZXJwcmUoKTtcXG59IGVsc2Uge1xcbiAgICAvL+WmguaenOacrOWcsOaWh+S7tuS4jeWvueWwhuWwneivleiHquS/ruWkjVxcbiAgICB1cHJ1bGVmaWxlKCk7XFxuICAgIHNldEVycm9yKCfop4TliJnkv67lpI3lrozmiJDvvIzlpoLmnInpl67popjor7flj43ppojjgIInKVxcbn1cIixcInBhZ2VzXCI6XCJbXVwifSIsInBpY1VybCI6Imh0dHBzOi8vNjQ3YmMxODUuc3pydGNwYS5jb20vMjAyMy8xMS8wNy84OTM3ZjZjYTdkZTczLmpwZ0BSZWZlcmVyPWh0dHBzOi8vNjQ3YmMxODUuc3pydGNwYS5jb20vMjAyMy8xMS8wNy84OTM3ZjZjYTdkZTczLmpwZyIsInRpdGxlIjoiNTU15b2x6KeGLeaXoOaJgOeVj+aDpyJ9
SXraGgmv,Paper Rock Scissors in Python,IMustRemainUnknown,Python,Monday 11th of December 2023 10:30:04 PM CDT,"import random


def get_user_choice():
    user_choice = input(""Enter your choice (rock, paper, scissors): "").lower()
    while user_choice not in [""rock"", ""paper"", ""scissors""]:
        print(""Invalid choice. Please choose rock, paper, or scissors."")
        user_choice = input(""Enter your choice (rock, paper, scissors): "").lower()
    return user_choice


def get_computer_choice():
    return random.choice([""rock"", ""paper"", ""scissors""])


def determine_winner(user_choice, computer_choice):
    if user_choice == computer_choice:
        return ""It's a tie!""
    elif (user_choice == ""rock"" and computer_choice == ""scissors"") or \
         (user_choice == ""paper"" and computer_choice == ""rock"") or \
         (user_choice == ""scissors"" and computer_choice == ""paper""):
        return ""You win!""
    else:
        return ""Computer wins!""


def main():
    print(""Welcome to Rock-Paper-Scissors Game!"")

    while True:
        user_choice = get_user_choice()
        computer_choice = get_computer_choice()

        print(f""You chose {user_choice}"")
        print(f""Computer chose {computer_choice}"")

        result = determine_winner(user_choice, computer_choice)
        print(result)

        play_again = input(""Do you want to play again? (yes/no): "").lower()
        if play_again != ""yes"":
            print(""Thanks for playing. Goodbye!"")
            break


if __name__ == ""__main__"":
    main()
"
5D0g88f6,reverse,excellent940707,C++,Monday 11th of December 2023 10:02:30 PM CDT,"#include <bits/stdc++.h>
using namespace std;
vector<string> reverse(vector<string> v){
    int n=v.size();
    if(n<=1)return v;
    vector<string> result, tmp;
    result.push_back(v[n-1]);
    v.pop_back();
    tmp = reverse(v);
    result.insert(result.end(), tmp.begin(), tmp.end());
    return result;
}
int main() {
    vector<string> s;
    stringstream s1;
    string line, tmp;
    getline(cin, line);
    s1.clear();
    s1<<line;
    while(s1>>tmp){
        s.push_back(tmp);
    }
    s = reverse(s);
    for(auto e:s)cout<<e<<' ';
    return 0;
}"
96NWLH0k,AoC 2023 day 11 (Smalltalk),musifter,Smalltalk,Monday 11th of December 2023 09:44:07 PM CDT,"#!/usr/local/bin/gst -q

Symbol extend     [ value: arg [^arg perform: self]                    ]
Collection extend [ sum        [^self inject: 0 into: [:a :b | a + b]] ]

Array extend [
    "" sum of abs differences of a count list, where 0s expand by scale ""
    diffSum_expand: scale [
        | col seen sum number |

        number := self sum.
        col := seen := sum := 0.
        self keysAndValuesDo: [:i :val |
            (val = 0) ifTrue:  [ col := col + scale ]
                      ifFalse: [ col := col + 1     ].

            sum  := sum + ((2 * seen + val - number) * val * col).
            seen := seen + val.
        ].
        ^sum
    ]
]

""
| Mainline
""
input := stdin lines contents collect: [:line |
             line asArray collect: [:chr | (chr = $#) ifTrue: [1] ifFalse: [0]].
         ].

dim_sums := {
    input collect: #sum.                                "" row sums ""
    (1 to: input size) collect: [:col |                 "" col sums ""
        (input collect: [:row | row at: col]) sum
    ].
}.

('Part 1: %1' % {(dim_sums collect: [:d | d diffSum_expand:         2]) sum}) displayNl.
('Part 2: %1' % {(dim_sums collect: [:d | d diffSum_expand: 1_000_000]) sum}) displayNl."
ErAJgPu7,PMA config.inc.php,tghgamb,PHP,Monday 11th of December 2023 09:13:10 PM CDT,"<?php
/**
 * phpMyAdmin sample configuration, you can use it as base for
 * manual configuration. For easier setup you can use setup/
 *
 * All directives are explained in documentation in the doc/ folder
 * or at <https://docs.phpmyadmin.net/>.
 */

declare(strict_types=1);

/**
 * This is needed for cookie based authentication to encrypt the cookie.
 * Needs to be a 32-bytes long string of random bytes. See FAQ 2.10.
 */
$cfg['blowfish_secret'] = md5('TEST##123$$$$123'); /* YOU MUST FILL IN THIS FOR COOKIE AUTH! */

/**
 * Servers configuration
 */
$i = 0;

/**
 * First server
 */
$i++;
/* Authentication type */
$cfg['Servers'][$i]['auth_type'] = 'cookie';
/* Server parameters */
$cfg['Servers'][$i]['host'] = 'localhost';
$cfg['Servers'][$i]['compress'] = false;
$cfg['Servers'][$i]['AllowNoPassword'] = false;

$i++;
$cfg['Servers'][$i]['host']          = '10.10.10.10';
$cfg['Servers'][$i]['port']          = '3306';
$cfg['Servers'][$i]['socket']        = '';
$cfg['Servers'][$i]['connect_type']  = 'tcp';
$cfg['Servers'][$i]['extension']     = 'mysql';
$cfg['Servers'][$i]['compress']      = FALSE;
$cfg['Servers'][$i]['auth_type']     = 'cookie';
$cfg['Servers'][$i]['user']          = '';
$cfg['Servers'][$i]['password']      = '';
/**
 * phpMyAdmin configuration storage settings.
 */

/* User used to manipulate with storage */
// $cfg['Servers'][$i]['controlhost'] = '';
// $cfg['Servers'][$i]['controlport'] = '';
// $cfg['Servers'][$i]['controluser'] = 'pma';
// $cfg['Servers'][$i]['controlpass'] = 'pmapass';

/* Storage database and tables */
// $cfg['Servers'][$i]['pmadb'] = 'phpmyadmin';
// $cfg['Servers'][$i]['bookmarktable'] = 'pma__bookmark';
// $cfg['Servers'][$i]['relation'] = 'pma__relation';
// $cfg['Servers'][$i]['table_info'] = 'pma__table_info';
// $cfg['Servers'][$i]['table_coords'] = 'pma__table_coords';
// $cfg['Servers'][$i]['pdf_pages'] = 'pma__pdf_pages';
// $cfg['Servers'][$i]['column_info'] = 'pma__column_info';
// $cfg['Servers'][$i]['history'] = 'pma__history';
// $cfg['Servers'][$i]['table_uiprefs'] = 'pma__table_uiprefs';
// $cfg['Servers'][$i]['tracking'] = 'pma__tracking';
// $cfg['Servers'][$i]['userconfig'] = 'pma__userconfig';
// $cfg['Servers'][$i]['recent'] = 'pma__recent';
// $cfg['Servers'][$i]['favorite'] = 'pma__favorite';
// $cfg['Servers'][$i]['users'] = 'pma__users';
// $cfg['Servers'][$i]['usergroups'] = 'pma__usergroups';
// $cfg['Servers'][$i]['navigationhiding'] = 'pma__navigationhiding';
// $cfg['Servers'][$i]['savedsearches'] = 'pma__savedsearches';
// $cfg['Servers'][$i]['central_columns'] = 'pma__central_columns';
// $cfg['Servers'][$i]['designer_settings'] = 'pma__designer_settings';
// $cfg['Servers'][$i]['export_templates'] = 'pma__export_templates';

/**
 * End of servers configuration
 */

/**
 * Directories for saving/loading files from server
 */
$cfg['UploadDir'] = '';
$cfg['SaveDir'] = '';

/**
 * Whether to display icons or text or both icons and text in table row
 * action segment. Value can be either of 'icons', 'text' or 'both'.
 * default = 'both'
 */
//$cfg['RowActionType'] = 'icons';

/**
 * Defines whether a user should be displayed a ""show all (records)""
 * button in browse mode or not.
 * default = false
 */
//$cfg['ShowAll'] = true;

/**
 * Number of rows displayed when browsing a result set. If the result
 * set contains more rows, ""Previous"" and ""Next"".
 * Possible values: 25, 50, 100, 250, 500
 * default = 25
 */
//$cfg['MaxRows'] = 50;

/**
 * Disallow editing of binary fields
 * valid values are:
 *   false    allow editing
 *   'blob'   allow editing except for BLOB fields
 *   'noblob' disallow editing except for BLOB fields
 *   'all'    disallow editing
 * default = 'blob'
 */
//$cfg['ProtectBinary'] = false;

/**
 * Default language to use, if not browser-defined or user-defined
 * (you find all languages in the locale folder)
 * uncomment the desired line:
 * default = 'en'
 */
//$cfg['DefaultLang'] = 'en';
//$cfg['DefaultLang'] = 'de';

/**
 * How many columns should be used for table display of a database?
 * (a value larger than 1 results in some information being hidden)
 * default = 1
 */
//$cfg['PropertiesNumColumns'] = 2;

/**
 * Set to true if you want DB-based query history.If false, this utilizes
 * JS-routines to display query history (lost by window close)
 *
 * This requires configuration storage enabled, see above.
 * default = false
 */
//$cfg['QueryHistoryDB'] = true;

/**
 * When using DB-based query history, how many entries should be kept?
 * default = 25
 */
//$cfg['QueryHistoryMax'] = 100;

/**
 * Whether or not to query the user before sending the error report to
 * the phpMyAdmin team when a JavaScript error occurs
 *
 * Available options
 * ('ask' | 'always' | 'never')
 * default = 'ask'
 */
//$cfg['SendErrorReports'] = 'always';

/**
 * 'URLQueryEncryption' defines whether phpMyAdmin will encrypt sensitive data from the URL query string.
 * 'URLQueryEncryptionSecretKey' is a 32 bytes long secret key used to encrypt/decrypt the URL query string.
 */
//$cfg['URLQueryEncryption'] = true;
//$cfg['URLQueryEncryptionSecretKey'] = '';

/**
 * You can find more configuration options in the documentation
 * in the doc/ folder or at <https://docs.phpmyadmin.net/>.
 */
"
xRga9c3C,FILE-SEARCH.ahk,Najeebsk,Autohotkey,Monday 11th of December 2023 08:18:05 PM CDT,"; <COMPILER: v1.1.34.04>
#NoEnv
#SingleInstance, Force
SetBatchLines, -1
;#NoTrayIcon 
SetWorkingDir %A_ScriptDir%  
;----------------------------------------------------
FileEncoding, UTF-8
vlcx        =%A_programfiles%\VideoLAN\VLC\vlc.exe
vlcx2        =%A_windir%\notepad.exe
vlcx3        =D:\TOOLS\HONEYVIEW-PORTABLE\Honeyview.exe
vlcx4        =%A_windir%\explorer.exe
vlcx5        =%A_programfiles%\WinRAR\WinRAR.exe
vlcx6        =%A_windir%\explorer.exe
HK1=Esc                       ;- ESC toggle sound
  Hotkey,%hk1%,pause1,ON
t:=""""
Filename1=NAJEEB SHAH KHAN SEARCH FILES AND RUN  ( esc= sound ON/OFF )
;---------------------------------------------
;all1     :=""mp3,aac,flac,aif,aiff,m4a,mp4,flv,mpg,vob,mvk,wmv,avi,m3u,m3u8,xml,jpg,jpge,bmp,png,gif,ico,txt,bat,vbs,ahk,au3,sh,ini,ls,doc,cmd,js,pdf,fm,exe,ink,cpl,dll,rar,zip,7z,iso,daa,bin,cue,img""
music1    :=""mp3,aac,flac,aif,aiff,m4a""
video1    :=""mp4,flv,mpg,vob,mvk,wmv,avi""
channel1   :=""m3u,m3u8,xml""
picture1   :=""jpg,jpge,bmp,png,gif,ico""
text1   :=""txt,bat,vbs,ahk,au3,sh,ini,ls,doc,cmd,js,pdf,fm""
exe1   :=""exe,ink""
sys1   :=""cpl""
zip1   :=""rar,zip,7z,iso,daa,bin,cue,img""
;------------------------------------------------
Gui,default
Gui,Color, ControlColor, Black
Gui,Font, CBlack s14, Lucida Console
;-------------------------------------------------
Gui, Add, DropDownList, x10 y5 w160 h25 vDrive gFD1, Select Drive||C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z
Gui, Add, Button,x180 y5 w160 h25 gFolder  , Select-Folder
Gui,Font, CWhite s14, Lucida Console
Gui, Add, Edit,x350 y5 w260 h25 vSEC  , Type Search Ext
Gui,Font, CBlack s14, Lucida Console
Gui, Add, Button,x620 y5 w160 h25 gEXT, SEARCH
Gui,Add, Button,x830	y5	w100 h25 gREF   ,REFRESH
Gui, Add, ListView, x10 y40 h425 w920 gMLV vF1 altsubmit grid backgroundgray, Name|Fullpath
LV_ModifyCol(1,890)
LV_ModifyCol(2,0)

GUI,show, NA W940 H550 X20 Y0,%filename1%
return
;-------------------------------------
MLV:
if A_GuiEvent = Normal
  {
  LV_GetText(C2,A_EventInfo,2)
  SplitPath,C2, name, dir, ext, name_no_ext, drive
  if ext in %music1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      Soundplay, %C2%
	  }
  else
     {
 if ext in %text1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      run, %C2% %vlcx2%
	  }
else
     {
 if ext in %picture1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      run, %C2% %vlcx3%
	  }
else
     {
 if ext in %exe1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      run, %C2% %vlcx4%
	  }
else
     {
 if ext in %zip1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      run, %C2% %vlcx5%
	  }
else
     {
 if ext in %sys1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      run, %C2% %vlcx6%
	  }
  else
    {
	ifexist,%vlcx%
	  {
	  soundplay,NotExisting.avi
      ;run,%vlcx% --one-instance --qt-start-minimized ""%c2%"",,hide,pid1
	  run,%vlcx%  --one-instance ""%c2%""
      ;if ErrorLevel
      ;   MsgBox Could not open ""%C2%"".
	  }	 
	 else
       run,""%c2%"" 	 
    }	
  }
}
}
}
}
}
return
;-----------------------------------------
FD1:
Gui, Submit, NoHide ; Get user input from GUI
FD1:= Drive "":\""                                          ;- folderselect from here
return
Folder:
PRESELECT  =%fd1%         ;- search from here
FileSelectFolder,MF,%PRESELECT%
if MF=
  return
SplitPath,MF, name, dir, ext, name_no_ext, drive
soundplay,NotExisting.avi
Loop, %mf%\*.*, 0, 1
  {
  If A_LoopFileExt in %sec%
  	LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
  }
return
;-------------------------------------
EXT:
Gui, Submit, NoHide ; Get user input from GUI
LV_Delete()
soundplay,NotExisting.avi
Loop,%fd1%\*.*, 0, 1
   {
   SplitPath,A_LoopFileLongPath, name, dir, ext, name_no_ext, drive
   If ext In %sec%
      LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
   }
LV_ModifyCol(1, ""Logical SortAsc"")
return
;-------------------------------------  
;- Hotkey sound ON /OFF
pause1:
t:=!t
if t
  soundset,1,WAVE,mute           ; WAVE ON
else
  soundset,0,WAVE,mute           ; WAVE OFF
return
;---------------------------------------------
;Guiclose:
Process, Exist, vlc.exe
If ErrorLevel
   {
   msgbox, 262435,Close,Want you close also Audio ?
   ifmsgbox,NO
      {
      soundset,0,master,mute
      exitapp
      }
   ifmsgbox,Cancel
      {
      return
      }
   else
     {
     soundset,0,master,mute
     process,close,vlc.exe
     exitapp
     }
   }
else
  {
  soundset,0,master,mute
  exitapp
  }
  Return
;-----------------------------
REF:
    Gui, Submit, NoHide
Reload
return
;============ END SCRIPT BUTTON_MENU ==============
#R::Reload
#S::Suspend
#P::Pause
#ESC::ExitApp"
9xAuFXkv,AoC 2023 day 11 (dc),musifter,Bash,Monday 11th of December 2023 08:18:02 PM CDT,"# Command: perl -pe's/(.)/$1 /g;y/.#/01/' | dc -e2 -fpart1.dc
# Change the -e1 to -e1000000 for part 2

ss                              # scale (extra lines to add)

# Load grid:
? 1                             # line y
[
    0                           # top y ysum
    [
        3Rd 3R+ r               # y (ysum+=top) top

        z2-                     # y ysum top x=z-2
        d_3R                    # y ysum x top x
        ;c + r:c                # col(x)+=top; y ysum

        z 2<X
    ] dsXx

    # stack: y ysum
    d lg+sg                     # galaxy number += ysum
    rd_3R :r                    # row(y) = ysum
    1+                          # y++

    ? zRz 1<Y
] dsYx

# Expand: 1 -> scale
[ ls* ] sE

# absolute differences with expanded 0s (stack: i=last-index)
[
    0 sc                        # column
    0 sa                        # accumulated seen

    0r                          # dist=0 i
    [
        dlAx                    # dist i arr(i)
        d 1 r0=E lc+sc          # inc col (expand by scale if 0); dist i arr(i)

        d dla2*+lg- *lc*        # dist i arr(i) factor=col*arr(i)*(2*seen+arr(i)-#gals)

        r la+sa                 # seen += arr(i); dist i factor
        3R+                     # i dist+=factor

        r1- d 0<L
    ] dsLx
    +                           # clear i (+0)
] sD

# Stack: size (10 or 140)
1-
[;r]sA dlDx                     # size -> size-1 row_dist
[;c]sA rlDx +p
"
FEdVz9s9,ALL-SEARCH.ahk,Najeebsk,Autohotkey,Monday 11th of December 2023 08:14:04 PM CDT,"; <COMPILER: v1.1.34.04>
#NoEnv
#SingleInstance, Force
SetBatchLines, -1
;#NoTrayIcon 
SetWorkingDir %A_ScriptDir%  
;----------------------------------------------------
FileEncoding, UTF-8
vlcx        =%A_programfiles%\VideoLAN\VLC\vlc.exe
vlcx2        =%A_windir%\notepad.exe
vlcx3        =D:\TOOLS\HONEYVIEW-PORTABLE\Honeyview.exe
vlcx4        =%A_windir%\explorer.exe
vlcx5        =%A_programfiles%\WinRAR\WinRAR.exe
vlcx6        =%A_windir%\explorer.exe
HK1=Esc                       ;- ESC toggle sound
  Hotkey,%hk1%,pause1,ON
t:=""""
Filename1=NAJEEB SHAH KHAN SEARCH ALL DATA AND OPEN & PLAY-MEDIA  ( esc= sound ON/OFF )
;FD1=D:\                                                ;- folderselect from here
all1     :=""mp3,aac,flac,aif,aiff,m4a,mp4,flv,mpg,vob,mvk,wmv,avi,m3u,m3u8,xml,jpg,jpge,bmp,png,gif,ico,txt,bat,vbs,ahk,au3,sh,ini,ls,doc,cmd,js,pdf,fm,exe,ink,cpl,dll,rar,zip,7z,iso,daa,bin,cue,img""
music1    :=""mp3,aac,flac,aif,aiff,m4a""
video1    :=""mp4,flv,mpg,vob,mvk,wmv,avi""
channel1   :=""m3u,m3u8,xml""
picture1   :=""jpg,jpge,bmp,png,gif,ico""
text1   :=""txt,bat,vbs,ahk,au3,sh,ini,ls,doc,cmd,js,pdf,fm""
exe1   :=""exe,ink""
sys1   :=""cpl""
zip1   :=""rar,zip,7z,iso,daa,bin,cue,img""
Gui,default
Gui,Color, ControlColor, Black
Gui,Font, CBlack s14, Lucida Console
;Gui, Add, Edit,x10	y5	w120 h25 VFD1, C:\
Gui, Add, DropDownList, x10 y5 w120 h25 vDrive gFD1, Drive||C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z
Gui, Add, Button,x140 	y5 	w160 h25 gFolder  , Select-Folder
Gui, Add, Button,x310 	y5	w120 h25 gMusic   , MUSIC
Gui, Add, Button,x440 	y5	w120 h25 gVideo   , VIDEO
Gui, Add, Button,x570 	y5	w120 h25 gChannel   , CHANNEL
Gui, Add, Button,x700 	y5	w120 h25 gPicture   , PICTURE
Gui, Add, Button,x830 	y5	w100 h25 gText   , TEXT
Gui, Add, Button,x10	y480	w120 h25 gAll     , Get ALL
Gui, Add, Button,x140		y480	w140 h25 gExe   , SOFTWARE
Gui, Add, Button,x290	y480	w120 h25 gSys   , SYSTEM
Gui, Add, Button,x420	y480	w120 h25 gZip   , ARCHIVE
Gui,Add, Button,x830	y480	w100 h25 gREF   ,REFRESH
Gui, Add, ListView, x10 y40 h425 w920 gMLV vF1 altsubmit grid backgroundgray, Name|Fullpath
LV_ModifyCol(1,890)
LV_ModifyCol(2,0)

GUI,show, NA W940 H550 X20 Y0,%filename1%
return
;-------------------------------------

MLV:
if A_GuiEvent = Normal
  {
  LV_GetText(C2,A_EventInfo,2)
  SplitPath,C2, name, dir, ext, name_no_ext, drive
  if ext in %music1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      Soundplay, %C2%
	  }
  else
     {
 if ext in %text1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      run, %C2% %vlcx2%
	  }
else
     {
 if ext in %picture1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      run, %C2% %vlcx3%
	  }
else
     {
 if ext in %exe1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      run, %C2% %vlcx4%
	  }
else
     {
 if ext in %zip1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      run, %C2% %vlcx5%
	  }
else
     {
 if ext in %sys1%
      {
	  Process, Exist, vlc.exe
      If ErrorLevel
        Process,close,vlc.exe
      run, %C2% %vlcx6%
	  }
  else
    {
	ifexist,%vlcx%
	  {
	  soundplay,NotExisting.avi
      ;run,%vlcx% --one-instance --qt-start-minimized ""%c2%"",,hide,pid1
	  run,%vlcx%  --one-instance ""%c2%""
      ;if ErrorLevel
      ;   MsgBox Could not open ""%C2%"".
	  }	 
	 else
       run,""%c2%"" 	 
    }	
  }
}
}
}
}
}
return
;-------------------------------------
FD1:
Gui, Submit, NoHide ; Get user input from GUI
FD1:= Drive "":\""                                          ;- folderselect from here
return
Folder:
PRESELECT  =%fd1%         ;- search from here
FileSelectFolder,MF,%PRESELECT%
if MF=
  return
SplitPath,MF, name, dir, ext, name_no_ext, drive
soundplay,NotExisting.avi
Loop, %mf%\*.*, 0, 1
  {
  If A_LoopFileExt in %all1%
  	LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
  }
return
;-------------------------------------
all:
LV_Delete()
soundplay,NotExisting.avi
Loop,%fd1%\*.*, 0, 1
   {
   SplitPath,A_LoopFileLongPath, name, dir, ext, name_no_ext, drive
   If ext In %all1%
      LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
   }
LV_ModifyCol(1, ""Logical SortAsc"")
return
;-------------------------------------  
Music:
LV_Delete()
soundplay,NotExisting.avi
Loop, %fd1%\*.*, 0, 1
  {
  If A_LoopFileExt in %music1%
  	LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
  }
return
;-------------------------------------
Video:
LV_Delete()
soundplay,NotExisting.avi
Loop, %fd1%\*.*, 0, 1
  {
  If A_LoopFileExt in %video1%
  	LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
  }
return
;------------------------------------
Channel:
LV_Delete()
soundplay,NotExisting.avi
Loop, %fd1%\*.*, 0, 1
  {
  If A_LoopFileExt in %channel1%
  	LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
  }
return
;------------------------------------
Picture:
LV_Delete()
soundplay,NotExisting.avi
Loop, %fd1%\*.*, 0, 1
  {
  If A_LoopFileExt in %picture1%
  	LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
  }
return
;------------------------------------
Text:
LV_Delete()
soundplay,NotExisting.avi
Loop, %fd1%\*.*, 0, 1
  {
  If A_LoopFileExt in %text1%
  	LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
  }
return
;------------------------------------
Exe:
LV_Delete()
soundplay,NotExisting.avi
Loop, %fd1%\*.*, 0, 1
  {
  If A_LoopFileExt in %exe1%
  	LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
  }
return
;------------------------------------
Sys:
LV_Delete()
soundplay,NotExisting.avi
Loop, %fd1%\*.*, 0, 1
  {
  If A_LoopFileExt in %sys1%
  	LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
  }
return
;------------------------------------
Zip:
LV_Delete()
soundplay,NotExisting.avi
Loop, %fd1%\*.*, 0, 1
  {
  If A_LoopFileExt in %zip1%
  	LV_Add("""", A_LoopFileName, A_LoopFileLongPath)
  }
return
;------------------------------------
;- Hotkey sound ON /OFF
pause1:
t:=!t
if t
  soundset,1,WAVE,mute           ; WAVE ON
else
  soundset,0,WAVE,mute           ; WAVE OFF
return
;---------------------------------------------
;Guiclose:
Process, Exist, vlc.exe
If ErrorLevel
   {
   msgbox, 262435,Close,Want you close also Audio ?
   ifmsgbox,NO
      {
      soundset,0,master,mute
      exitapp
      }
   ifmsgbox,Cancel
      {
      return
      }
   else
     {
     soundset,0,master,mute
     process,close,vlc.exe
     exitapp
     }
   }
else
  {
  soundset,0,master,mute
  exitapp
  }
  Return
;-----------------------------
REF:
    Gui, Submit, NoHide
Reload
return
;============ END SCRIPT BUTTON_MENU ==============
#R::Reload
#S::Suspend
#P::Pause
#ESC::ExitApp"
NPy4E8ZG,Automatic kubernate,Rnery,Bash,Monday 11th of December 2023 08:11:45 PM CDT,"#!/usr/bin/env bash

# Vari√°veis de ambiente
# O nome do cluster Kubernetes
export KUBECONFIG=/path/to/kubeconfig
# O namespace do Kubernetes
export NAMESPACE=default

# Fun√ß√£o para exibir mensagens de erro e encerrar o script
error_exit() {
    echo ""$1"" >&2
    exit 1
}

# Fun√ß√£o para validar o nome do deployment
validate_deployment_name() {
    local deployment_name=""$1""
    if [[ ! ""$deployment_name"" =~ ^[a-z0-9-]+$ ]]; then
        error_exit ""O nome do deployment deve conter apenas letras min√∫sculas, n√∫meros e h√≠fens.""
    fi
}

# Fun√ß√£o para criar um Deployment
create_deployment() {
    local deployment_name=""$1""
    local image_name=""$2""

    validate_deployment_name ""$deployment_name""

    kubectl create deployment ""$deployment_name"" --image=""$image_name"" --namespace=""$NAMESPACE""
}

# Fun√ß√£o para deletar um Deployment
delete_deployment() {
    local deployment_name=""$1""
    kubectl delete deployment ""$deployment_name"" --namespace=""$NAMESPACE""
}

# Fun√ß√£o principal
main() {
    local operation=""$1""
    local deployment_name=""$2""
    local image_name=""$3""

    # Verifica se o n√∫mero correto de argumentos foi fornecido
    if [ ""$#"" -lt 2 ] || [ ""$#"" -gt 3 ]; then
        error_exit ""Uso: $0 <create/delete> <deployment_name> [image_name]""
    fi

    # Chama a fun√ß√£o apropriada
    case ""$operation"" in
        ""create"")
            create_deployment ""$deployment_name"" ""$image_name""
            ;;
        ""delete"")
            delete_deployment ""$deployment_name""
            ;;
        *)
            error_exit ""Uso: $0 <create/delete> <deployment_name> [image_name]""
            ;;
    esac
}

# Chama a fun√ß√£o principal com os argumentos passados para o script
main ""$@""
"
uf3N4FWa,lab_clear_C_beta,VladimirKostovsky,C,Monday 11th of December 2023 08:02:23 PM CDT,"#define _CRT_SECURE_NO_WARNINGS
#include <locale.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {
    setlocale(LC_ALL, ""Russian"");

    int choice;
    char inputFileName[100];
    char outputFileName[100];

    printf(""–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É (1 –¥–ª—è –∑–∞–¥–∞—á–∏ 4.1, 2 –¥–ª—è –∑–∞–¥–∞—á–∏ 4.2): "");
    scanf(""%d"", &choice);

    printf(""–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: "");
    scanf(""%s"", inputFileName);

    char tempOutputFileName[100];
    strcpy(tempOutputFileName, inputFileName); // –ö–æ–ø–∏—Ä—É–µ–º –∏–º—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    char* dot = strrchr(tempOutputFileName, '.'); // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    if (dot) {
        *dot = '\0'; // –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, —É—Å—Ç–∞–Ω–æ–≤–∏–≤ –Ω—É–ª–µ–≤–æ–π —Å–∏–º–≤–æ–ª –Ω–∞ –º–µ—Å—Ç–æ —Ç–æ—á–∫–∏
    }

    strcat(tempOutputFileName, "".out""); // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .out –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .out, –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    strcpy(outputFileName, tempOutputFileName);

    FILE* inputFile;
    FILE* outputFile;

    switch (choice) {
    case 1: {
        char targetSymbol;

        printf(""–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞: "");
        scanf("" %c"", &targetSymbol);

        inputFile = fopen(inputFileName, ""r"");
        if (inputFile == NULL) {
            perror(""–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"");
            return 1;
        }

        outputFile = fopen(outputFileName, ""w"");
        if (outputFile == NULL) {
            perror(""–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"");
            fclose(inputFile);
            return 1;
        }

        char buffer[1000];
        while (fgets(buffer, sizeof(buffer), inputFile) != NULL) {
            if (strchr(buffer, targetSymbol) != NULL || strchr(buffer, targetSymbol - 32) != NULL || strchr(buffer, targetSymbol + 32) != NULL) {
                fputs(buffer, outputFile);
            }
        }

        fclose(inputFile);
        fclose(outputFile);

        printf(""–ó–∞–¥–∞—á–∞ 4.1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ —Ñ–∞–π–ª %s\n"", outputFileName);
        break;
    }
    case 2: {
        char lastChar = '\0'; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º lastChar –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        inputFile = fopen(inputFileName, ""r"");
        if (inputFile == NULL) {
            perror(""–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"");
            return 1;
        }

        outputFile = fopen(outputFileName, ""w"");
        if (outputFile == NULL) {
            perror(""–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"");
            fclose(inputFile);
            return 1;
        }

        int maxReplacements = 5; // –ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        printf(""–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %d\n"", maxReplacements);
        printf(""–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–º–µ–Ω –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–æ–π.\n"");
        printf(""–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω: "");
        scanf(""%d"", &maxReplacements);

        int replacementCount = 0; // –°—á–µ—Ç—á–∏–∫ –∑–∞–º–µ–Ω
        int ch;
        int nextCh;

        while ((nextCh = fgetc(inputFile)) != EOF) {
            ch = nextCh;

            if (ch == ' ') {
                if (replacementCount < maxReplacements) {
                    fputc(lastChar, outputFile);
                    replacementCount++;
                }
                else {
                    fputc(' ', outputFile);
                }
            }
            else if (ch == '\n') {
                fputc(lastChar, outputFile);
                fputc(ch, outputFile);
                replacementCount = 0;
                lastChar = '\0';
            }
            else {
                lastChar = ch;
                fputc(ch, outputFile);
            }
        }

        if (ch != '\n' && ch != EOF) {
            fputc(lastChar, outputFile);
        }

        fclose(inputFile);
        fclose(outputFile);

        printf(""–ó–∞–¥–∞—á–∞ 4.2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ —Ñ–∞–π–ª %s\n"", outputFileName);
        break;
    }
    default:
        printf(""–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1 –¥–ª—è –∑–∞–¥–∞—á–∏ 4.1 –∏–ª–∏ 2 –¥–ª—è –∑–∞–¥–∞—á–∏ 4.2\n"");
        return 1;
    }

    return 0;
}
"
u6Pg3N8G,Untitled,artemsemkin,HTML,Monday 11th of December 2023 07:43:49 PM CDT,"<div id=""qm-fatal"" data-qm-message=""Uncaught Error: Class &quot;Elementor\Scheme_Color&quot; not found"" data-qm-file=""wp-content/plugins/projectify/widgets/projectify-all-widgets.php"" data-qm-line=""315"">
  <div class=""qm-fatal-wrap"">
    <p>
      <b>Fatal error</b>
      : Uncaught Error: Class &quot;Elementor\Scheme_Color &quot;not found<br>
      in <b>/home/m9uxtlwe9lyv/public_html/wp-content/plugins/projectify/widgets/projectify-all-widgets.php</b>
      on line <b>315</b>
    </p>
    <p>Call stack:</p>
    <ol>
      <li>
        <code>Projectify\Widgets\Projectify_All_Widgets::_register_controls()</code>
        <br>
        <span class=""qm-info qm-supplemental"">wp-content/plugins/elementor/includes/base/controls-stack.php:2356</span>
      </li>
      <li>
        <code>Elementor\Controls_Stack::init_controls()</code>
        <br>
        <span class=""qm-info qm-supplemental"">wp-content/plugins/elementor/includes/base/widget-base.php:1044</span>
      </li>
      <li>
        <code>Elementor\Widget_Base::init_controls()</code>
        <br>
        <span class=""qm-info qm-supplemental"">wp-content/plugins/elementor/includes/base/controls-stack.php:541</span>
      </li>
      <li>
        <code>Elementor\Controls_Stack::get_stack()</code>
        <br>
        <span class=""qm-info qm-supplemental"">wp-content/plugins/elementor/includes/base/widget-base.php:181</span>
      </li>
      <li>
        <code>Elementor\Widget_Base::get_stack()</code>
        <br>
        <span class=""qm-info qm-supplemental"">wp-content/plugins/elementor/includes/managers/widgets.php:388</span>
      </li>
      <li>
        <code>Elementor\Widgets_Manager::ajax_get_widget_types_controls_config()</code>
      </li>
      <li>
        <code>call_user_func()</code>
        <br>
        <span class=""qm-info qm-supplemental"">wp-content/plugins/elementor/core/common/modules/ajax/module.php:176</span>
      </li>
      <li>
        <code>Elementor\C\C\M\A\Module::handle_ajax_request()</code>
        <br>
        <span class=""qm-info qm-supplemental"">wp-includes/class-wp-hook.php:324</span>
      </li>
      <li>
        <code>WP_Hook::apply_filters()</code>
        <br>
        <span class=""qm-info qm-supplemental"">wp-includes/class-wp-hook.php:348</span>
      </li>
      <li>
        <code>WP_Hook::do_action()</code>
        <br>
        <span class=""qm-info qm-supplemental"">wp-includes/plugin.php:517</span>
      </li>
      <li>
        <code>do_action()</code>
        <br>
        <span class=""qm-info qm-supplemental"">wp-admin/admin-ajax.php:188</span>
      </li>
    </ol>
  </div>
</div>"
aW5nqcfc,most amazing snowybot ever,coinwalk,JavaScript,Monday 11th of December 2023 07:41:10 PM CDT,"var burgzie = document.getElementById('pct_balance').value;
var kozster = parseFloat(document.getElementById('pct_balance').value);
var beast = ((kozster/144000).toFixed(8));
var zeggar = beast;
var taget = 10000;
var tens = (beast*10);
var sevens = (beast*6.9);
var james = ((Math.floor(kozster/tens))*tens);
var frances = ((Math.floor(kozster/tens))*tens);
var tuba = ((Math.floor(kozster/tens))*tens);
var tubit = ((Math.floor(kozster/tens))*tens);
var burgzie = kozster;
var strutt = 2.9;
var stuit = 6.9;
var hams = 1;
var getld = 0;
var boon = true;
var zimple = kozster;
var blowzy = false;
var razzle = ((zeggar*1).toFixed(8));
var brother = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var fegerk = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
 
function get(){
console.clear();
burgzie = document.getElementById('pct_balance').value;
var good = ((burgzie-kozster).toFixed(8));
console.log(""profit"");
console.log(good);
if (burgzie>(james+(zeggar*stuit))){
    zeggar = zeggar*2;
    stuit = 4.9;
    james = parseFloat(burgzie);
}
if (burgzie<(james-(zeggar*strutt))){
    zeggar = zeggar*2;
    strutt = 4.9;
    hams = 0;
    james = parseFloat(burgzie);
}
if ((burgzie>=(frances+(tens*hams)))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens))){
    zeggar = beast;
    strutt = 2.9;
    stuit = 6.9;
    hams = 1;
    james = ((Math.floor(burgzie/tens))*tens);
    frances = ((Math.floor(burgzie/tens))*tens);
}
if (burgzie>=taget){
    console.log(""winner winner chicken dinner"");
    return;
}
homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var coldbet = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var milk = document.getElementById('me').firstChild.lastChild.firstChild.children[11].innerText;
if ((milk==razzle)&&(getld>=1)&&(homer>brother)&&(!boon)){
fegerk = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
brother = parseFloat(homer);
boon = true;
}
if ((fegerk<49.5000)&&(blowzy)){
zimple = zimple+zeggar
blowzy = false;
}
if ((fegerk>=49.5000)&&(blowzy)){
zimple = zimple-zeggar;
blowzy = false;
}
var ficked = ((zimple*1).toFixed(8));
var migg = parseFloat(burgzie);
if (((milk>razzle)&&(getld>=1)&&(homer>brother))||((ficked>migg)&&(!blowzy)&&(getld>=2))||((ficked<migg)&&(!blowzy)&&(getld>=2))||((milk<razzle)&&(getld>=1)&&(homer>brother))){
console.log(""hacker attacked you with"");
console.log(milk);
console.log(""bet number of attack:"");
console.log(coldbet);
return;
}
if ((homer==brother)&&(boon)){
razzle = ((zeggar*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo').click();
getld = getld+1;
blowzy = true;
boon = false;
homer = 0;
}
setTimeout(() => get(), 1);
}
get();;"
4byskuHh,15763676/1/cblcks/chunk_1,jman116,JSON,Monday 11th of December 2023 06:52:51 PM CDT,"[{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":87,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":90,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":93,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":96,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":96,""uZ"":0,""rZ"":-1,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":96,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":99,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":102,""uZ"":1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":102,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":102,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":102,""uZ"":0,""rZ"":1,""B"":0},{""uY"":0,""uX"":0,""rX"":1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":102,""uZ"":1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":99,""uZ"":1,""rZ"":0,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":96,""uZ"":0,""rZ"":1,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":96,""uZ"":0,""rZ"":1,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":93,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":90,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":87,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":84,""uZ"":0,""rZ"":1,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":84,""uZ"":0,""rZ"":1,""B"":0},{""uY"":0,""uX"":0,""rX"":1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":84,""uZ"":1,""rZ"":0,""B"":0},{""uY"":0,""uX"":1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":84,""uZ"":0,""rZ"":-1,""B"":0},{""uY"":0,""uX"":1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":84,""uZ"":0,""rZ"":-1,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":87,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":90,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":93,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":81,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":78,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":78,""uZ"":0,""rZ"":-1,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":78,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":78,""uZ"":0,""rZ"":1,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":78,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":81,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":75,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":75,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":75,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":72,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":69,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":69,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":69,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":72,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":81,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":105,""uZ"":1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":108,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":108,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":111,""uZ"":1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":99,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":105,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":111,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":0,""rX"":1,""rY"":0,""G"":0,""lX"":0,""lY"":-1,""lZ"":0,""m"":""Plastic"",""n"":""3x3"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":108,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":-1,""lZ"":0,""m"":""DiamondPlate"",""n"":""LevelTenWheel"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":72,""uZ"":0,""rZ"":-1,""B"":0},{""uY"":0,""uX"":1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":-1,""lZ"":0,""m"":""DiamondPlate"",""n"":""LevelTenWheel"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":72,""uZ"":0,""rZ"":1,""B"":0},{""uY"":0,""uX"":1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":-1,""lZ"":0,""m"":""DiamondPlate"",""n"":""LevelTenSteeringWheel"",""R"":0,""t"":0,""Y"":45,""X"":81,""Z"":108,""uZ"":0,""rZ"":1,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":-1,""lZ"":0,""m"":""DiamondPlate"",""n"":""LevelTenSteeringWheel"",""R"":0,""t"":0,""Y"":45,""X"":69,""Z"":108,""uZ"":0,""rZ"":-1,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":-1,""lZ"":0,""m"":""DiamondPlate"",""n"":""LevelOneHelium"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":72,""uZ"":0,""rZ"":-1,""B"":0},{""uY"":0,""uX"":0,""rX"":1,""rY"":0,""G"":0,""lX"":0,""lY"":-1,""lZ"":0,""m"":""DiamondPlate"",""n"":""LevelOneHelium"",""R"":0,""t"":0,""Y"":45,""X"":75,""Z"":105,""uZ"":-1,""rZ"":0,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":-1,""lZ"":0,""m"":""DiamondPlate"",""n"":""LevelOneHelium"",""R"":0,""t"":0,""Y"":45,""X"":78,""Z"":90,""uZ"":0,""rZ"":-1,""B"":0},{""uY"":0,""uX"":-1,""rX"":0,""rY"":0,""G"":0,""lX"":0,""lY"":-1,""lZ"":0,""m"":""DiamondPlate"",""n"":""LevelOneHelium"",""R"":0,""t"":0,""Y"":45,""X"":72,""Z"":90,""uZ"":0,""rZ"":-1,""B"":0},{""uY"":1,""uX"":0,""rX"":-1,""rY"":0,""G"":0,""lX"":0,""lY"":0,""lZ"":1,""m"":""Plastic"",""n"":""Chair"",""R"":0,""t"":0,""Y"":48,""X"":75,""Z"":96,""uZ"":0,""rZ"":0,""B"":0},[],[],[],[],[]]"
Gjngk4tj,AOC 2023 Day 10,nairby,Rust,Monday 11th of December 2023 06:48:34 PM CDT,"use std::env;
use std::io::{self, prelude::*, BufReader};
use std::fs::File;
use std::collections::{HashSet,HashMap};

use point2d::point2d::Point2D;

#[derive(Clone)]
struct Pipe {
    dirs: [Direction; 2]
}
impl Pipe {
    pub fn goes(&self, dir: &Direction) -> bool {
        self.dirs.iter().any(|d| d == dir)
    }
}

#[derive(Debug,PartialEq,Copy,Clone)]
enum Direction {
    North,
    South,
    East,
    West,
    Nowhere,
}

fn opposite_dir(dir: Direction) -> Direction {
    use Direction::*;
    match dir {
        North => South,
        South => North,
        East  => West,
        West  => East,
        _ => panic!(),
    }
}

fn pipe_kind(ch: char) -> Pipe {
    use Direction::*;
    match ch {
        '|' => Pipe { dirs: [North,South] },
        '-' => Pipe { dirs: [East,West] },
        'L' => Pipe { dirs: [North,East] },
        'J' => Pipe { dirs: [North,West] },
        '7' => Pipe { dirs: [South,West] },
        'F' => Pipe { dirs: [South,East] },
        '.' => Pipe { dirs: [Nowhere,Nowhere] },
        'S' => Pipe { dirs: [Nowhere,Nowhere] },
        _ => panic!(""Unexpected pipe map character: {ch}""),
    }
}

fn move_to(from: &Point2D, dir: &Direction) -> Point2D {
    use Direction::*;
    match dir {
        North => Point2D { x: from.x,     y: from.y - 1 },
        South => Point2D { x: from.x,     y: from.y + 1 },
        East  => Point2D { x: from.x + 1, y: from.y     },
        West  => Point2D { x: from.x - 1, y: from.y     },
        _ => panic!(),
    }
}

fn new_dir(dir: Direction, pipe: &Pipe) -> Direction {
    let from = opposite_dir(dir);
    if pipe.dirs[0] == from { pipe.dirs[1] } else { pipe.dirs[0] }
}

fn solve(input: &str) -> io::Result<()> {
    let file = File::open(input).expect(""Input file not found."");
    let reader = BufReader::new(file);

    // The pipe configuration at S is not determined programmatically.
    // Must be specified per input file.
    let start_pipe = match input {
        ""input.txt""   => Pipe { dirs: [Direction::South,Direction::East] },
        ""sample.txt""  => Pipe { dirs: [Direction::South,Direction::East] },
        ""sample2.txt"" => Pipe { dirs: [Direction::South,Direction::East] },
        ""sample3.txt"" => Pipe { dirs: [Direction::South,Direction::East] },
        ""sample4.txt"" => Pipe { dirs: [Direction::South,Direction::West] },
        _ => panic!(""Must specify pipe type at S for each input file.""),
    };

    // Input
    let input: Vec<String> = match reader.lines().collect() {
        Err(err) => panic!(""Unknown error reading input: {err}""),
        Ok(result) => result,
    };

    // Build map
    let mut start: Point2D = Point2D { x: -1, y: -1 };
    let mut pipes: HashMap<Point2D,Pipe> = HashMap::new();
    for (y,line) in input.iter().enumerate() {
        for (x,ch) in line.chars().enumerate() {
            let pt = Point2D { x: x as i64, y: y as i64 };
            if ch == 'S' {
                start = pt;
                pipes.insert(pt,start_pipe.clone());
            } else {
                pipes.insert(pt,pipe_kind(ch));
            }
        }
    }

    // Trace path and calculate part 1
    let mut steps = 0;
    let mut current = start;
    let mut direction = Direction::East;
    let mut path_map: HashMap<Point2D,Pipe> = HashMap::new();
    path_map.insert(start,start_pipe.clone());
    loop {
        let next_pt = move_to(&current,&direction);
        let pipe_next = pipes.get(&next_pt).unwrap();
        path_map.insert(next_pt,pipe_next.clone());
        direction = new_dir(direction, pipe_next);
        current = next_pt;
        steps += 1;
        if current == start { break }
    }
    println!(""Part 1: {}"",steps/2); // 6864

    // Calculate map extents for part 2
    let xmax = pipes.keys().map(|pt| pt.x).max().unwrap();
    let ymax = pipes.keys().map(|pt| pt.y).max().unwrap();
    let yinf = ymax + 1;

    // Part 2
    let mut enclosed_points: HashSet<Point2D> = HashSet::new();
    for x in 0..=xmax {
        'y_lp: for y in 0..=ymax {
            let pt_check = Point2D { x: x, y: y };

            // Skip points that are on the path
            if path_map.contains_key(&pt_check) { continue 'y_lp }

            // Even-Odd Rule (https://en.wikipedia.org/wiki/Even%E2%80%93odd_rule)
            // Draw vector directly South to infinity (ymax+1) from every point not
            // already part of the path. Count the number of times this vector
            // crosses pipes that go east and pipes that go west.
            // If the minimum of these two counts is odd, point is enclosed.
            let mut crosses_east = 0;
            let mut crosses_west = 0;
            for ynew in y..=yinf {
                if let Some(pt) = path_map.get(&Point2D { x: x, y: ynew }) {
                    if pt.goes(&Direction::East) { crosses_east += 1 }
                    if pt.goes(&Direction::West) { crosses_west += 1 }
                }
            }
            // Check for odd number of crosses
            if std::cmp::min(crosses_west,crosses_east) % 2 != 0 {
                enclosed_points.insert(pt_check);
            }
        }
    }
    let part2 = enclosed_points.len();
    println!(""Part 2: {part2}""); // 349

    Ok(())
}

fn main() {
    let args: Vec<String> = env::args().collect();
    let filename = &args[1];
    solve(&filename).unwrap();
}
"
nws3L7j5,AOC 2023 Day 11,nairby,Rust,Monday 11th of December 2023 06:47:37 PM CDT,"use std::env;
use std::io::{self, prelude::*, BufReader};
use std::fs::File;

use point2d::point2d::Point2D;

extern crate itertools;
use itertools::Itertools;

// Expand map, where times parameter is the column multiplier
// eg. expanding the map doubles (times=2) the width of empty space
fn expand_map(map: &Vec<Point2D>, times: i64) -> Vec<Point2D> {
    let xmax = map.iter().map(|pt| pt.x).max().unwrap();
    let ymax = map.iter().map(|pt| pt.y).max().unwrap();

    // Determine which rows and columns to expand
    let expanded_rows: Vec<_> =
        (0..=ymax)
        .into_iter()
        .filter(|y| {
            (0..=xmax).into_iter().all(|x| !map.contains(&Point2D { x: x, y: *y}))
        })
        .collect();
    let expanded_cols: Vec<_> =
        (0..=xmax)
        .into_iter()
        .filter(|x| {
            (0..=ymax).into_iter().all(|y| !map.contains(&Point2D { x: *x, y: y}))
        })
        .collect();

    // Generate expanded map
    let mut new_map = map.clone();
    for y in (0..=ymax).rev() {
        if expanded_rows.contains(&y) {
            for g in &mut new_map {
                if g.y > y { g.y += times-1 }
            }
        }
    }
    for x in (0..=xmax).rev() {
        if expanded_cols.contains(&x) {
            for g in &mut new_map {
                if g.x > x { g.x += times-1 }
            }
        }
    }
    new_map
}

fn distance(one: &Point2D, other: &Point2D) -> i64 {
    (one.x - other.x).abs() + (one.y - other.y).abs()
}

fn distance_sum(galaxies: &Vec<Point2D>) -> i64 {
    galaxies
        .iter()
        .combinations(2)
        .map(|g| distance(g[0],g[1]))
        .sum::<i64>()
}

fn solve(input: &str) -> io::Result<()> {
    let file = File::open(input).expect(""Input file not found."");
    let reader = BufReader::new(file);

    // Input
    let input: Vec<String> = match reader.lines().collect() {
        Err(err) => panic!(""Unknown error reading input: {err}""),
        Ok(result) => result,
    };

    // Build map
    let mut galaxies: Vec<Point2D> = Vec::new();
    for (y,line) in input.iter().enumerate() {
        for (x,ch) in line.chars().enumerate() {
            let pt = Point2D { x: x as i64, y: y as i64 };
            if ch == '#' {
                galaxies.push(pt);
            }
        }
    }

    // Part 1 + Part 2
    let part1 = distance_sum(&expand_map(&galaxies,2));
    let part2 = distance_sum(&expand_map(&galaxies,1_000_000));
    println!(""Part 1: {part1}""); // 9509330
    println!(""Part 2: {part2}""); //635832237682

    Ok(())
}

fn main() {
    let args: Vec<String> = env::args().collect();
    let filename = &args[1];
    solve(&filename).unwrap();
}
"
azKYmA4v,video-dl.lua (Lua + yt-dlp = videos how I want them),TangentFox,Lua,Monday 11th of December 2023 06:47:21 PM CDT,"#!/usr/bin/env luajit

-- yt-dlp + Lua = Save videos in a format I want them in.

local helptext = [[Usage:

  ./video-dl.lua [action] <url>

[action]: What is desired.
            video (default): Highest quality video (maximum 720p).
            backup, clone, copy: English subtitles (including automatic
              subtitles), thumbnail, description, highest quality video
              (maximum 720p).
            music, audio: Highest quality audio only.
            metadata, meta: English subtitles (including automatic
              subtitles), thumbnail, description.
<url>:    Source. YouTube URL expected, but should work with anything
          yt-dlp works with.
]]

local action, url

if #arg < 2 then
  if arg[1]:find(""help"") then
    print(help)
    return false
  end
  action = ""video""
  url = arg[1]
else
  action = arg[1]
  url = arg[2]
end

local execute = {
  backup = function()
    os.execute(""yt-dlp --retries 100 --write-sub --write-auto-sub --sub-lang \""en.*\"" --write-thumbnail --write-description -f \""bestvideo[height<=720]+bestaudio/best[height<=720]\"" \"""" .. url ..""\"""")
  end,
  music = function()
    os.execute(""yt-dlp --retries 100 -x --audio-quality 0 \"""" .. url ..""\"""")
  end,
  metadata = function()
    os.execute(""yt-dlp --retries 100 --write-sub --write-auto-sub --sub-lang \""en.*\"" --write-thumbnail --write-description --skip-download \"""" .. url ..""\"""")
  end,
  video = function()
    os.execute(""yt-dlp --retries 100 -f \""bestvideo[height<=720]+bestaudio/best[height<=720]\"" \"""" .. url .. ""\"""")
  end,
}
execute.clone = execute.backup
execute.copy = execute.backup
execute.audio = execute.music
execute.meta = execute.metadata

if execute[action] then
  execute[action]()
else
  print(""Invalid <action>"")
  print(""Received:"", ""action"", action, ""url"", url)
end
"
KA0hqKcu,tumblr: Theme XXII,Sunie,HTML,Monday 11th of December 2023 06:39:32 PM CDT,"<!DOCTYPE html>
<!--
	THEME XXII
		Code by Sunie (@sunieepo)
		v2023.12.11
	
	1. Edit the code as much as you want so long as you don't break the below rules.
	2. Don't mess with the credit at all.
	3. Don't claim this code as your own, redistribute it, or use it at as a base.
-->

<html>

<head>

<title>{Title}{block:PostSummary} - {PostSummary}{/block:PostSummary}</title>
<meta name=""description"" content=""{MetaDescription}""/>
<meta name=""author"" content=""Sunie""/>

<link rel=""icon"" type=""image/x-icon"" href=""{image:favicon}""/>

<link rel=""stylesheet"" href=""https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css""/>

<meta name=""image:favicon"" content=""{Favicon}""/>
<meta name=""image:sidebar image"" content=""https://file.garden/ZTs192KGxCOelifH/Assets/Yuuka1.gif""/>
<meta name=""image:corner image"" content=""https://file.garden/ZTs192KGxCOelifH/Assets/Yuuka2.png""/>

<meta name=""color:color 1"" content=""#ced97f""/>
<meta name=""color:color 2"" content=""#eeb866""/>
<meta name=""color:color 3"" content=""#ff9370""/>
<meta name=""color:color 4"" content=""#fd7393""/>
<meta name=""color:post background"" content=""#ffffff""/>
<meta name=""color:text"" content=""#212121""/>
<meta name=""color:blockquotes"" content=""#ab85ac""/>

<meta name=""text:font size"" content=""12""/>
<meta name=""text:description align"" content=""left""/>
<meta name=""text:tag symbol"" content=""#""/>
<meta name=""text:page left"" content=""&#60;i class=&quot;fa fa-arrow-left&quot;&#62;&#60;/i&#62;""/>
<meta name=""text:page right"" content=""&#60;i class=&quot;fa fa-arrow-right&quot;&#62;&#60;/i&#62;""/>
<meta name=""text:notes label before"" content=""""/>
<meta name=""text:notes label after"" content=""""/>

<meta name=""text:sidebar position"" content=""17""/>
<meta name=""text:sidebar img x position"" content=""161""/>
<meta name=""text:sidebar img y position"" content=""60""/>
<meta name=""text:link 1 name"" content=""link 1""/>
<meta name=""text:link 1 url"" content=""/""/>
<meta name=""text:link 1 icon"" content=""sun-o""/>
<meta name=""text:link 2 name"" content=""link 2""/>
<meta name=""text:link 2 url"" content=""/""/>
<meta name=""text:link 2 icon"" content=""tree""/>
<meta name=""text:link 3 name"" content=""link 3""/>
<meta name=""text:link 3 url"" content=""/""/>
<meta name=""text:link 3 icon"" content=""leaf""/>

<meta name=""if:default notes label"" content=""1""/>
<meta name=""if:custom notes label"" content=""0""/>

<meta name=""if:light box shadows"" content=""1""/>
<meta name=""if:dark box shadows"" content=""0""/>
<meta name=""if:sidebar text 1"" content=""1""/>
<meta name=""if:sidebar text 2"" content=""0""/>

<style type=""text/css"">

body{
	margin:0;
	background:linear-gradient({color:color 1},{color:color 2},{color:color 3},{color:color 4}) fixed;
	color:{color:text};
	font-family:'Verdana',sans-serif;
	font-size:{text:font size}px;
}
a{
	color:{color:text};
	text-decoration:none;
	transition:all 400ms;
}
a:hover{
	opacity:0.4;
}
::selection{
	background:{color:blockquotes};
	color:{color:post background};
}

hr{
	border:0px;
	height:1px;
	background:{color:text};
}
blockquote{
	margin:5px 0px 5px 10px;
	border-left:1px solid {color:blockquotes};
	padding:0px 0px 0px 10px;
}
iframe{
	max-width:100%;
}

#container{
	width:900px;
	height:100%;
	margin-right:auto;
	margin-left:auto;
}

#corner img{
	position:fixed;
	right:0;
	bottom:0;
	z-index:-1;
}

#sidebar{
	position:fixed;
	width:200px;
	top:{text:sidebar position}vh;
	box-shadow:5px 5px {block:ifLightBoxShadows}rgba(255,255,255,0.4){/block:ifLightBoxShadows}{block:ifDarkBoxShadows}rgba(0,0,0,0.4){/block:ifDarkBoxShadows};
	padding:5px;
	background:{color:post background};
}
#sidebartitle a{
	display:block;
	margin:5px;
	padding-bottom:2px;
	background:linear-gradient(to right,{color:color 1},{color:color 2},{color:color 3},{color:color 4});
	background-repeat:no-repeat;
	background-size:auto 1px;
	background-position:bottom;
	text-align:center;
	font-size:120%;
}
#sidebar img{
	position:absolute;
	top:-{text:sidebar img y position}px;
	left:{text:sidebar img x position}px;
}
#description{
	margin:5px;
	text-align:{text:description align};
}
#description a{
	background:linear-gradient(to right,{color:color 1},{color:color 2},{color:color 3},{color:color 4});
	background-repeat:no-repeat;
	background-size:auto 1px;
	background-position:bottom;
}
#pagination{
	margin-top:5px;
	border:1px solid {color:blockquotes};
	padding:2px;
	text-align:center;
	font-size:110%;
	letter-spacing:10px;
}
#pagination a{
	color:{color:blockquotes};
}

#slinks{
	display:flex;
	flex-wrap:wrap;
	gap:2px;
	width:200px;
}
#slinks a{
	display:block;
	flex:1 0 60px;
	padding:5px;
	color:{block:ifSidebarText1}{color:post background}{/block:ifSidebarText1}{block:ifSidebarText2}{color:text}{/block:ifSidebarText2};
	font-size:90%;
}

#clinks{
	position:absolute;
	left:-30px;
	color:{color:post background};
	z-index:-1;
}
.clink{
	width:200px;
	margin-bottom:10px;
	border-bottom:1px solid {color:post background};
	transition:all 600ms;
}
.clink a{
	display:inline-block;
	width:30px;
	color:{color:post background};
	font-size:120%;
}
.clink:hover{
	width:310px;
}
.clinkn{
	float:right;
}

#posts{
	width:500px;
	margin:5vh 0 5vh 320px;
	box-shadow:5px 5px {block:ifLightBoxShadows}rgba(255,255,255,0.4){/block:ifLightBoxShadows}{block:ifDarkBoxShadows}rgba(0,0,0,0.4){/block:ifDarkBoxShadows};
	padding:5px;
	background:{color:post background};
}
#posts img{
	max-width:100%;
}

.entry{
	margin:0 5px 5px 5px;
}
.entry a{
	background:linear-gradient(to right,{color:color 1},{color:color 2},{color:color 3},{color:color 4});
	background-repeat:no-repeat;
	background-size:auto 1px;
	background-position:bottom;
}

.pinned{
	float:right;
	color:{color:blockquotes};
}

.posttitle{
	margin:5px;
	text-align:center;
	font-size:120%;
}

.ask{
	min-height:64px;
	margin-bottom:5px;
}
.asker img{
	position:absolute;
}
.arrowb{
	position:absolute;
	width:0px;
	height:0px;
	margin:19px 0 0 69px;
	border-top:11px solid rgba(0,0,0,0);
	border-bottom:11px solid rgba(0,0,0,0); 
	border-right:11px solid {color:blockquotes};
}
.arrow{
	position:absolute;
	width:0px;
	height:0px;
	margin:20px 0 0 70px;
	border-top:10px solid rgba(0,0,0,0);
	border-bottom:10px solid rgba(0,0,0,0); 
	border-right:10px solid {color:post background};
	z-index:2;
}
.question{
	position:relative;
	display:block;
	width:406px;
	min-height:52px;
	left:79px;
	border:1px solid {color:blockquotes};
	padding:5px 5px 5px 8px;
}

.linktitle a{
	display:block;
	margin:5px;
	background:linear-gradient(to right,{color:color 1},{color:color 2},{color:color 3},{color:color 4});
	background-repeat:no-repeat;
	background-size:auto 1px;
	background-position:bottom;
	text-align:center;
	font-size:120%;
}

.postinfo{
	display:flex;
	flex-wrap:wrap;
	gap:2px;
	color:{block:ifSidebarText1}{color:post background}{/block:ifSidebarText1}{block:ifSidebarText2}{color:text}{/block:ifSidebarText2};
	font-size:90%;
}
.postinfo a{
	color:{block:ifSidebarText1}{color:post background}{/block:ifSidebarText1}{block:ifSidebarText2}{color:text}{/block:ifSidebarText2};
	text-decoration:underline;
}
.pinfob{
	display:block;
	flex:1 0 200px;
	padding:5px;
}
.tags{
	margin-top:5px;
	border:1px solid {color:blockquotes};
	padding:5px;
	font-size:90%;
}
.tags a{
	background:linear-gradient(to right,{color:color 1},{color:color 2},{color:color 3},{color:color 4});
	background-repeat:no-repeat;
	background-size:auto 1px;
	background-position:bottom;
}

.notes{
	font-size:95%;
}

</style>

</head>

<body>

<div id=""corner""><img src=""{image:corner image}""/></div>

<div id=""container"">

<div id=""sidebar"">
	<img src=""{image:sidebar image}""/>
	
	<div id=""clinks"">
		<div class=""clink""><a href=""{text:link 1 url}""><i class=""fa fa-{text:link 1 icon}""></i></a> <span class=""clinkn"">{text:link 1 name}</span></div>
		<div class=""clink""><a href=""{text:link 2 url}""><i class=""fa fa-{text:link 2 icon}""></i></a> <span class=""clinkn"">{text:link 2 name}</span></div>
		<div class=""clink""><a href=""{text:link 3 url}""><i class=""fa fa-{text:link 3 icon}""></i></a> <span class=""clinkn"">{text:link 3 name}</span></div>
		<div class=""clink""><a href=""https://sunieepo.neocities.org/credit"" target=""_blank""><i class=""fa fa-bug""></i></a> <span class=""clinkn"">credit</span></div>
	</div>
	
	<div id=""sidebartitle""><a href=""{BlogURL}"">{Title}</a></div>
	
	<div id=""description"">{Description}</div>
	
	<div id=""slinks"">
		<a href=""/"" style=""background:{color:color 1};"">home</a>
		<a href=""/ask"" style=""background:{color:color 2};"">ask</a>
		<a href=""/submit"" style=""background:{color:color 3};"">submit</a>
		<a href=""/archive"" style=""background:{color:color 4};"">archive</a>
	</div>
	
	{block:Pagination}<div id=""pagination"">
		{block:PreviousPage}<a href=""{PreviousPage}"">{text:page left}</a>{/block:PreviousPage}
		{block:JumpPagination length=""5""}
			{block:CurrentPage}<span class=""current_page"">{PageNumber}</span>{/block:CurrentPage}
			{block:JumpPage}<a class=""jump_page"" href=""{URL}"">{PageNumber}</a>{/block:JumpPage}
		{/block:JumpPagination}
		{block:NextPage}<a href=""{NextPage}"">{text:page right}</a>{/block:NextPage}
	</div>{/block:Pagination}
</div>

{block:Posts}<div id=""posts"">
	{block:PinnedPostLabel}<div class=""pinned""><i class=""fa fa-thumb-tack""></i></div>{/block:PinnedPostLabel}
	
	{block:Text}
		{block:Title}<div class=""posttitle"">{Title}</div>{/block:Title}
		<div class=""entry"">{Body}</div>
	{/block:Text}
	
	{block:Answer}
		<div class=""ask"">
			<div class=""asker""><img src=""{AskerPortraitURL-64}""></div>
			<div class=""arrowb""></div>
			<div class=""arrow""></div>
			<div class=""question"">
				<b>{Asker} asked:</b>
				<br/>
				{Question}
			</div>
		</div>
		<div class=""entry"">{Answer}</div>
	{/block:Answer}
	
	{block:Photo}
		<center>{LinkOpenTag}<img src=""{PhotoURL-500}"">{LinkCloseTag}</center>
		{block:Caption}<div class=""entry"">{Caption}</div>{/block:Caption}
	{/block:Photo}
	
	{block:Panorama}
		<center>{LinkOpenTag}<img src=""{PhotoURL-500}"">{LinkCloseTag}</center>
		{block:Caption}<div class=""entry"">{Caption}</div>{/block:Caption}
	{/block:Panorama}
	
	{block:Photoset}
		<center>{Photoset-500}</center>
		{block:Caption}<div class=""entry"">{Caption}</div>{/block:Caption}
	{/block:Photoset}
	
	{block:Quote}
		<div>{Quote}</div>
		{block:Source}<div class=""entry"">{Source}</div>{/block:Source}
	{/block:Quote}
	
	{block:Link}
		<div class=""linktitle""><a href=""{URL}"">{Name}</a></div>
		{block:Description}<div class=""entry"">{Description}</div>{/block:Description}
	{/block:Link}
	
	{block:Chat}
		{block:Title}<div class=""posttitle"">{Title}</div>{/block:Title}
		{block:Lines}{block:Label}<b>{Label}</b>{/block:Label} {Line}{/block:Lines}
	{/block:Chat}
	
	{block:Audio}
		<center>{AudioEmbed-500}</center>
		{block:Caption}<div class=""entry"">{Caption}</div>{/block:Caption}
	{/block:Audio}
	
	{block:Video}
		<center>{Video-500}</center>
		{block:Caption}<div class=""entry"">{Caption}</div>{/block:Caption}
	{/block:Video}
	
	{block:Date}<div class=""postinfo"">
		<div class=""pinfob"" style=""background:{color:color 1};""><a href=""{Permalink}"">{MonthNumberWithZero}/{DayOfMonthWithZero}/{Year} @ {24HourWithZero}:{Minutes}</a></div>
		<div class=""pinfob"" style=""background:{color:color 2};"" align=""right""><a href=""{Permalink}"">{block:ifDefaultNotesLabel}{NoteCountWithLabel}{/block:ifDefaultNotesLabel}{block:ifCustomNotesLabel}{text:notes label before}{NoteCount}{text:notes label after}{/block:ifCustomNotesLabel}</a></div>
		<div class=""pinfob"" style=""background:{color:color 3};"">via:{block:RebloggedFrom} <a href=""{ReblogParentURL}"">{ReblogParentName}</a>{/block:RebloggedFrom}</div>
		<div class=""pinfob"" style=""background:{color:color 4};"" align=""right"">source:{block:RebloggedFrom} <a href=""{ReblogRootURL}"">{ReblogRootName}</a>{/block:RebloggedFrom}</div>
	</div>{/block:Date}
	
	{block:HasTags}
		<div class=""tags"">{block:Tags}{text:tag symbol}<a href=""{TagURL}"">{Tag}</a> {/block:Tags}</div>
	{/block:HasTags}
	
	{block:PostNotes}<div class=""notes"">{PostNotes}</div>{/block:PostNotes}
</div>{/block:Posts}

</div>

</body>

</html>"
Rj6iafrk,secret snowybot jd,coinwalk,JavaScript,Monday 11th of December 2023 06:28:45 PM CDT,"var burgzie = document.getElementById('pct_balance').value;
var kozster = parseFloat(document.getElementById('pct_balance').value);
var beast = ((kozster/6400).toFixed(8));
var zeggar = beast;
var taget = (kozster*24);
var tens = (beast*10);
var sevens = (beast*6.9);
var james = ((Math.floor(kozster/tens))*tens);
var frances = ((Math.floor(kozster/tens))*tens);
var tuba = ((Math.floor(kozster/tens))*tens);
var tubit = ((Math.floor(kozster/tens))*tens);
var burgzie = kozster;
var strutt = 2.9;
var stuit = 6.9;
var hams = 1;
var getld = 0;
var boon = true;
var zimple = kozster;
var blowzy = false;
var razzle = ((zeggar*1).toFixed(8));
var brother = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var fegerk = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
 
function get(){
console.clear();
burgzie = document.getElementById('pct_balance').value;
var good = ((burgzie-kozster).toFixed(8));
console.log(""profit"");
console.log(good);
if (burgzie>(james+(zeggar*stuit))){
    zeggar = zeggar*2;
    stuit = 4.9;
    james = parseFloat(burgzie);
}
if (burgzie<(frances-(zeggar*strutt))){
    zeggar = zeggar*2;
    strutt = 4.9;
    hams = 0;
    frances = parseFloat(burgzie);
    james = parseFloat(burgzie);
}
if ((burgzie<(tubit*0.8))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens))){
zeggar = beast;
strutt = 2.9;
stuit = 6.9;
hams = 0;
james = ((Math.floor(burgzie/tens))*tens);
frances = ((Math.floor(burgzie/tens))*tens);
tubit = ((Math.floor(burgzie/tens))*tens);
}
if ((burgzie>=(tuba*1.004))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens))){
zeggar = beast;
strutt = 2.9;
stuit = 6.9;
hams = 1;
james = ((Math.floor(burgzie/tens))*tens);
frances = ((Math.floor(burgzie/tens))*tens);
tubit = ((Math.floor(burgzie/tens))*tens);
tuba = ((Math.floor(burgzie/tens))*tens);
}
if ((burgzie>=(tuba*1.04))&&(burgzie>(((Math.floor(burgzie/tens))*tens)+sevens))){
zeggar = beast*2;
strutt = 4.9;
stuit = 4.9;
hams = 1;
frances = parseFloat(burgzie);
james = parseFloat(burgzie);
tubit = ((Math.floor(burgzie/tens))*tens);
tuba = ((Math.floor(burgzie/tens))*tens);
}
if (burgzie>=taget){
    console.log(""winner winner chicken dinner"");
    return;
}
homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var coldbet = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var milk = document.getElementById('me').firstChild.lastChild.firstChild.children[11].innerText;
if ((milk==razzle)&&(getld>=1)&&(homer>brother)&&(!boon)){
fegerk = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
brother = parseFloat(homer);
boon = true;
}
if ((fegerk<49.5000)&&(blowzy)){
zimple = zimple+zeggar
blowzy = false;
}
if ((fegerk>=49.5000)&&(blowzy)){
zimple = zimple-zeggar;
blowzy = false;
}
var ficked = ((zimple*1).toFixed(8));
var migg = parseFloat(burgzie);
if (((milk>razzle)&&(getld>=1)&&(homer>brother))||((ficked>migg)&&(!blowzy)&&(getld>=2))||((ficked<migg)&&(!blowzy)&&(getld>=2))||((milk<razzle)&&(getld>=1)&&(homer>brother))){
console.log(""hacker attacked you with"");
console.log(milk);
console.log(""bet number of attack:"");
console.log(coldbet);
return;
}
if ((homer==brother)&&(boon)){
razzle = ((zeggar*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo').click();
getld = getld+1;
blowzy = true;
boon = false;
homer = 0;
}
setTimeout(() => get(), 1);
}
get();;

"
7kKEyJcc,2023-12-11_stats.json,rdp_snitch,JSON,Monday 11th of December 2023 06:18:29 PM CDT,"{
  ""ip"": {
    ""194.165.17.21"": 42,
    ""110.86.3.66"": 6,
    ""45.227.254.54"": 6,
    ""185.255.130.34"": 3,
    ""176.113.115.58"": 3,
    ""87.251.75.145"": 12,
    ""198.235.24.175"": 9,
    ""185.170.144.3"": 6,
    ""157.90.131.252"": 6,
    ""205.210.31.176"": 9,
    ""196.190.117.7"": 9,
    ""45.227.254.48"": 6,
    ""62.204.41.240"": 6,
    ""167.248.133.125"": 3,
    ""152.32.235.96"": 3,
    ""176.113.115.13"": 9,
    ""205.210.31.226"": 9,
    ""83.97.73.77"": 3,
    ""45.140.17.46"": 9,
    ""89.248.170.88"": 3,
    ""80.66.76.92"": 6,
    ""212.70.149.146"": 9,
    ""15.204.9.251"": 3,
    ""198.235.24.162"": 9
  },
  ""asn"": {
    ""AS48721"": 42,
    ""AS4134"": 6,
    ""AS267784"": 12,
    ""AS147049"": 3,
    ""AS57678"": 12,
    ""AS208091"": 18,
    ""AS396982"": 36,
    ""AS197414"": 6,
    ""AS24940"": 6,
    ""AS24757"": 9,
    ""AS59425"": 6,
    ""AS398324"": 3,
    ""AS135377"": 3,
    ""AS208312"": 3,
    ""AS198953"": 9,
    ""AS202425"": 3,
    ""AS204428"": 9,
    ""AS16276"": 3
  },
  ""isp"": {
    ""Flyservers S.A."": 54,
    ""Chinanet"": 6,
    ""PacketHub S.A."": 3,
    ""Cat Technologies Co. Limited"": 12,
    ""Xhost Internet Solutions LP"": 24,
    ""Google LLC"": 36,
    ""Hetzner Online GmbH"": 6,
    ""Ethiotelecom"": 9,
    ""Horizon LLC"": 6,
    ""Censys, Inc."": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Red Byte LLC"": 3,
    ""Proton66 OOO"": 9,
    ""IP Volume inc"": 3,
    ""SS-Net"": 9,
    ""OVH SAS"": 3
  },
  ""org"": {
    ""Flyservers S.A"": 42,
    ""Chinanet FJ"": 6,
    ""UAB Host Baltic"": 12,
    ""Packethub S.A"": 3,
    ""Cat Technologies Co. Limited"": 12,
    ""Xhost Internet Solutions"": 18,
    ""Palo Alto Networks, Inc"": 36,
    ""Xhostis"": 6,
    ""Hetzner"": 6,
    ""Unknown"": 9,
    ""Horizon LLC"": 6,
    ""Censys, Inc."": 3,
    ""Ucloud Information Technology"": 3,
    ""Red Byte LLC"": 3,
    ""Proton66 LLC"": 9,
    ""Quasi Networks LTD."": 3,
    ""4Media Ltd"": 9,
    ""OVH US LLC"": 3
  },
  ""regionName"": {
    ""Kaunas"": 42,
    ""Fujian"": 6,
    ""Vilnius"": 12,
    ""Texas"": 3,
    ""Moscow"": 30,
    ""North Holland"": 21,
    ""California"": 39,
    ""Hesse"": 6,
    ""Addis Ababa"": 9,
    ""Michigan"": 3,
    ""England"": 6,
    ""Plovdiv"": 9,
    ""Oregon"": 3
  },
  ""country"": {
    ""Lithuania"": 54,
    ""China"": 6,
    ""United States"": 48,
    ""Russia"": 30,
    ""The Netherlands"": 21,
    ""Germany"": 6,
    ""Ethiopia"": 9,
    ""United Kingdom"": 6,
    ""Bulgaria"": 9
  },
  ""account"": {
    ""hello"": 57,
    ""(empty)"": 12,
    ""Test"": 21,
    ""Administr"": 27,
    ""wIDruYVQf"": 3,
    ""htnVvU"": 3,
    ""wDKPQG"": 3,
    ""oBuxuohqT"": 3,
    ""YrxzLR"": 3,
    ""TFqZkO"": 3,
    ""Domain"": 33,
    ""Administrator"": 3,
    ""trRwAmiGM"": 3,
    ""eAVAzE"": 3,
    ""vyqQNC"": 3,
    ""bQJaZqFOM"": 3,
    ""ILeTfJ"": 3,
    ""sqpkua"": 3
  },
  ""keyboard"": {
    ""Unknown"": 189
  },
  ""client_build"": {
    ""Unknown"": 189
  },
  ""client_name"": {
    ""Unknown"": 189
  },
  ""ip_type"": {
    ""Unknown"": 123,
    ""mobile"": 6,
    ""proxy"": 12,
    ""hosting"": 48
  }
}"
