id,title,username,language,date,content
ripV69xu,🤑G2A.com Free Gift Card FIX June 2024🤑,x3kiN,Python,Wednesday 12th of June 2024 12:55:46 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any item for free on G2A.com including Steam gift cards & everything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
k7AJuXzu,🤑G2A.com Free Gift Card FIX June 2024🎁,FeasModz514,Python,Wednesday 12th of June 2024 12:49:47 AM CDT,"G2A.com complimentary gift card & games guide.
Any gift card for free on G2A.com including Xbox gift cards & anything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
wyz5iQsE,🤑G2A.com Free Gift Card FIX June 2024🤑,kiraezwhethe,Python,Wednesday 12th of June 2024 12:43:49 AM CDT,"G2A.com complimentary voucher & games guide.
Any gift card for free on G2A.com including Playstation gift cards & all else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
1xR1Zt7L,🤑G2A.com Free Gift Card FIX June 2024🤑,ColtM4A2,Python,Wednesday 12th of June 2024 12:37:46 AM CDT,"G2A.com complimentary gift card & gaming guide.
Any gift card for free on G2A.com including Xbox gift cards & all else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
0zmjMTWn,🤑G2A.com Free Gift Card FIX June 2024🎁,Skarface-MKL,Python,Wednesday 12th of June 2024 12:31:31 AM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Playstation gift cards & all else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
ZAghfBSx,🤑G2A.com Free Gift Card FIX June 2024🤑,thepplayz,Python,Wednesday 12th of June 2024 12:25:32 AM CDT,"G2A.com complimentary gift card & games guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
2KQKTxe2,nasa_epic_images,Python253,Python,Wednesday 12th of June 2024 12:21:21 AM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: nasa_epic_images.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    This script downloads images from NASA's EPIC (Earth Polychromatic Imaging Camera) satellite. 
    EPIC is a camera onboard the NOAA's DSCOVR (Deep Space Climate Observatory) spacecraft, 
    positioned at the Lagrange point 1 (L1), approximately one million miles from Earth. 
    The camera captures images of the entire sunlit side of Earth, providing a unique perspective on our planet.

    The EPIC images are available in four different types:
        - Natural: True-color images that show Earth as it appears to the human eye.
        - Enhanced: Images that are adjusted to enhance specific features of the atmosphere and surface.
        - Aerosol: Images that highlight the distribution and concentration of aerosols in the atmosphere.
        - Cloud: Images that provide detailed views of cloud formations and their dynamics.

    Users can specify a date range to download images for, and the images will be saved in the specified folder.

Requirements:
    - Python 3.x
    - Required modules:
        - requests
        - datetime
        - concurrent.futures
        - time
        - colorama
Functions:
        - Main:
            - download_images_for_date:
                Checks if images are available for a specific date and option, and downloads them if available.
            - download_image:
                Downloads a single image from the specified source URL and saves it to the destination folder.
            - get_valid_start_date:
                Prompts the user to enter a valid start date after the epoch date for the selected option.
            - get_valid_end_date:
                Prompts the user to enter a valid end date before today or 'today'.

        - Header:
            - generate_nasa_epic_header:
                Generates the NASA EPIC header with color formatting.
            - print_colored_header:
                Prints the colored header with the NASA and EPIC logos.
                
Classes:
    - NASAEPICManager:
        A class to manage NASA EPIC API requests and rate limits.

Usage:
    1. Ensure there's a file named 'nasa_api.txt' in the current working directory containing your NASA API Key(s).
       The API key file contents must be separated by a new line if you have multiple keys.
    2. Run the script.
    3. Follow the on-screen prompts to select an option, specify the date range, and enter the download location.
    4. The images will be downloaded and saved in folders according to the selected option and date.

Additional Notes:
    - You need to obtain a NASA API key to use this script.
        - You can get it by registering on the [NASA API portal](https://api.nasa.gov/index.html?apply-for-an-api-key).
    - After obtaining your API key, create a text file named 'nasa_api.txt' in the same directory as this script.
    - Save your API key(s) in 'nasa_api.txt', with each key on a new line if you have multiple keys. Example:
        - EXAMPLE:
            - YOUR_FIRST_API_KEY
            - YOUR_SECOND_API_KEY
    - Colorama is initialized to automatically reset colors after each use.
    - To download the metadata, you can go to URL: (https://pastebin.com/zAB34Acu)
        - Save the script as 'nasa_epic_metadata.py' in your current working directory.
        - Follow the detailed prompting from the program 
""""""

# Get Essential Imports
import os
import requests
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor
import time
from colorama import init, Fore, Style

# Initialize colorama
init(autoreset=True)

class NASAEPICManager:
    """"""
    A class to manage NASA EPIC API requests and rate limits.

    Attributes:
        api_keys (list): List of API keys obtained from a file.
        current_key_index (int): Index of the current API key being used.
        hourly_limit (int): Maximum number of API calls allowed per hour.
        calls_count (int): Number of API calls made in the current hour.
        last_reset_time (float): Timestamp of the last reset time for the hourly limit.
    """"""
    
    def __init__(self, api_keys_file):
        """"""
        Initializes the NASAEPICManager with API keys and rate limit parameters.

        Args:
            api_keys_file (str): Path to the file containing API keys.
        """"""
        with open(api_keys_file, 'r', encoding='utf-8') as file:
            self.api_keys = file.read().splitlines()
        self.current_key_index = 0
        self.hourly_limit = 1000  # Default value, will be updated based on the headers
        self.calls_count = 0
        self.last_reset_time = time.time()

    def make_api_request(self, url):
        """"""
        Makes an API request to the specified URL.

        Args:
            url (str): The URL to make the API request to.

        Returns:
            dict or None: JSON response from the API if successful, otherwise None.
        """"""
        self.check_rate_limit()
        current_api_key = self.api_keys[self.current_key_index]
        params = {'api_key': current_api_key}
        response = requests.get(url, params=params)

        # Update rate limit counters based on response headers
        self.calls_count += 1

        # Handle non-JSON response (e.g., HTML error pages)
        try:
            response_json = response.json()
        except requests.exceptions.JSONDecodeError:
            response_json = None

        remaining_requests = int(response.headers.get('X-RateLimit-Remaining', 0))
        if self.calls_count == 1:
            # Set the initial hourly limit based on the headers
            self.hourly_limit = remaining_requests

        self.last_reset_time = int(response.headers.get('X-RateLimit-Reset', self.last_reset_time))

        print(f""API Key: {current_api_key}, \n\nRemaining Requests: {remaining_requests}"")

        return response_json

    def check_rate_limit(self):
        """"""
        Checks and manages the API call rate limit.
        Resets counters if more than one hour has passed or switches to the next API key if the hourly limit is reached.
        """"""
        current_time = time.time()
        time_since_reset = current_time - self.last_reset_time

        if time_since_reset >= 3600:
            # Reset counters if more than one hour has passed
            self.calls_count = 0
            self.last_reset_time = current_time

        if self.calls_count >= self.hourly_limit:
            # Switch to the next API key if the hourly limit is reached
            self.current_key_index = (self.current_key_index + 1) % len(self.api_keys)
            self.calls_count = 0

# Set epoch dates for the 4 options
epoch_dates = {
    'natural': '2015-06-13',
    'enhanced': '2015-08-07',
    'aerosol': '2020-09-04',
    'cloud': '2023-01-03'
}

def get_valid_start_date(selected_option):
    """"""
    Prompt the user to enter a valid start date after the epoch date for the selected option.

    Args:
        selected_option (str): The selected option ('natural', 'enhanced', 'aerosol', or 'cloud').

    Returns:
        str: A valid start date in the format 'YYYY-MM-DD'.
    """"""
    while True:
        start_date_input = input(f""\nEnter any start date after {epoch_dates[selected_option]} (YYYY-MM-DD) or type 'epoch': "")

        if start_date_input.lower() == 'epoch':
            return epoch_dates[selected_option]

        try:
            start_date = datetime.strptime(start_date_input, ""%Y-%m-%d"")
            if start_date < datetime.strptime(epoch_dates[selected_option], ""%Y-%m-%d""):
                print(f""\nStart date must be after {epoch_dates[selected_option]}! Please try again.\n"")
            elif start_date > datetime.utcnow():
                print(""\nStart date cannot be in the future! Please try again."")
            else:
                return start_date.strftime(""%Y-%m-%d"")
        except ValueError:
            print(""\nInvalid date format! (Try: 'YYYY-MM-DD) Please try again."")

def get_valid_end_date():
    """"""
    Prompt the user to enter a valid end date before today or 'today'.

    Returns:
        str: A valid end date in the format 'YYYY-MM-DD'.
    """"""
    while True:
        end_date_input = input(""\nEnter any end date before today (YYYY-MM-DD) or type 'today': "")

        if not end_date_input:
            print(""\nEnd date cannot be empty! Please enter a valid end date or type 'today' to use the current date."")
            continue

        if end_date_input.lower() == 'today':
            return datetime.utcnow().strftime(""%Y-%m-%d"")

        try:
            end_date = datetime.strptime(end_date_input, ""%Y-%m-%d"")
            if end_date > datetime.utcnow():
                print(""\nEnd date cannot be in the future! Please try again."")
            else:
                return end_date.strftime(""%Y-%m-%d"")
        except ValueError:
            print(""\nInvalid date format! (Try: 'YYYY-MM-DD) Please try again."")

def download_images_for_date(date_str, nasa_manager, selected_option, download_location):
    """"""
    Download images for a specified date and option from the NASA EPIC API.

    Args:
        date_str (str): The date in the format 'YYYY-MM-DD'.
        nasa_manager (NASAEPICManager): An instance of the NASAEPICManager class.
        selected_option (str): The selected option ('natural', 'enhanced', 'aerosol', or 'cloud').
        download_location (str): The folder location where the images will be downloaded.

    Returns:
        bool: True if images are downloaded successfully, False otherwise.
    """"""
    print(f""\nChecking if images are available for date {date_str} and option {selected_option}...\n"")

    # Update the metadata URL based on the selected option
    metadata_url = f""https://api.nasa.gov/EPIC/api/{selected_option}/date/{date_str}""
    metadata = nasa_manager.make_api_request(metadata_url)

    # Check if imagery is available for the date
    if isinstance(metadata, list) and metadata:
        # Check if there are images available in the metadata
        if ""\nNo imagery available for the date!\n"" in metadata[0].get(""reason"", """"):
            print(f""No imagery available for the date: {date_str}"")
            return False

        # If imagery is available, create and download images to the folder
        folder_name = f""{date_str[:4]}_{selected_option.upper()}""
        folder_path = os.path.join(download_location, folder_name, date_str[5:7])
        print(""\nCreating folder and downloading images for date:"", date_str)
        os.makedirs(folder_path, exist_ok=True)

        with ThreadPoolExecutor() as executor:
            futures = []

            for item in metadata:
                name = item[""image""] + '.png'
                source = f""https://epic.gsfc.nasa.gov/archive/{selected_option}/{date_str[:4]}/{date_str[5:7]}/{date_str[8:10]}/png/{name}""
                destination = os.path.join(folder_path, name)

                futures.append(executor.submit(download_image, source, destination, nasa_manager))

            for future in futures:
                future.result()

        print(""\nImages downloaded successfully in folder:\n\n"", folder_path)
        return True
    elif metadata is not None:
        # Handle the case where the API request was successful but no metadata is available
        print(f""\nNo metadata available for the date: {date_str}!\n"")
        return False
    else:
        # Handle the case where the API request failed (e.g., 503 error)
        print(f""\nError fetching metadata for {date_str}! Please check if the date is valid or try again later.\n"")
        return False

def download_image(source, destination, nasa_manager, max_retries=3):
    """"""
    Download an image from the specified source URL to the destination path.

    Args:
        source (str): The URL of the image to download.
        destination (str): The local file path where the image will be saved.
        nasa_manager (NASAEPICManager): An instance of the NASAEPICManager class for rate limit management.
        max_retries (int): The maximum number of retry attempts in case of download failure. Default is 3.

    Returns:
        bool: True if the image is downloaded successfully, False otherwise.
    """"""
    for attempt in range(max_retries):
        try:
            response = requests.get(source, timeout=5)  # (Default=5) Adjust the timeout value as needed (in seconds)
            response.raise_for_status()  # Check for request success

            with open(destination, 'wb') as image_file:
                image_file.write(response.content)

            print(""Downloaded:"", os.path.basename(destination))
            return True  # Image downloaded successfully

        except requests.exceptions.Timeout:
            print(f""\nAttempt {attempt + 1}: Image download timed out! \n\nRetrying...\n"")
            continue  # Retry the download

        except requests.exceptions.RequestException as e:
            print(f""\nError downloading image: {e}!\n"")
            if 'API Key' in str(e):  # Retry with a new API key if the error is related to the API key
                nasa_manager.check_rate_limit()
                continue
            return False  # Failed to download image

    print(f""\nMax retries reached! Failed to download image: \n\n{os.path.basename(destination)}\n"")
    return False

# Define the header as a list of strings for easier manipulation
header_lines = [
    ""                        ███    ██  █████  ███████  █████                            "",
    ""                        ████   ██ ██   ██ ██      ██   ██                           "",
    ""                        ██ ██  ██ ███████ ███████ ███████                           "",
    ""                        ██  ██ ██ ██   ██      ██ ██   ██                           "",
    ""                        ██   ████ ██   ██ ███████ ██   ██                           "",
    ""███████  █████         ██████  ███████        █████  ██████         ██████  ███████ "",
    ""     ██ ██   ██       ██       ██            ██   ██      ██       ██       ██      "",
    ""    ██   █████  █████ ███████  ███████ █████  █████   █████  █████ ███████  ███████ "",
    ""   ██   ██   ██       ██    ██      ██       ██   ██      ██       ██    ██      ██ "",
    ""   ██    █████         ██████  ███████        █████  ██████         ██████  ███████ "",
    ""                            ███████ ██████  ██  ██████                              "",
    ""                            ██      ██   ██ ██ ██                                   "",
    ""                            █████   ██████  ██ ██                                   "",
    ""                            ██      ██      ██ ██                                   "",
    ""                            ███████ ██      ██  ██████                     (IMAGES) ""
]

# Apply colors to the specified lines
colored_header = []
for i, line in enumerate(header_lines):
    if 0 <= i < 5:  # NASA
        colored_header.append(Fore.RED + line + Style.RESET_ALL)
    elif 5 <= i < 10:  # 78-65-83-65 (ASCII CODE)
        colored_header.append(Fore.WHITE + line + Style.RESET_ALL)
    elif 10 <= i < 15:  # EPIC
        colored_header.append(Fore.BLUE + line + Style.RESET_ALL)
    else:
        colored_header.append(line)

# Print the colored header
for line in colored_header:
    print(line)
    
# Start menu
while True:
    """"""
    Main loop to interact with the user, allowing them to select options for downloading EPIC images.

    The loop continuously prompts the user to select an option for EPIC imagery download, input start and end dates,
    and specify the download location. It then iterates through the specified date range, attempting to download
    EPIC images for each date within the range.

    The loop continues until the user decides to exit the program.

    """"""
    nasa_manager_loop = NASAEPICManager('nasa_api.txt')

    # Display options for the user
    print(""_"" * 83)
    print(""\nOptions:"")
    print(""1. Natural"")
    print(""2. Enhanced"")
    print(""3. Cloud"")
    print(""4. Aerosol"")
    
    # Get user's choice
    option_loop = input(""\nSelect an option (1-4): "")
    
    # Map the user's choice to the corresponding URL component
    options_mapping = {
        '1': 'natural',
        '2': 'enhanced',
        '3': 'cloud',
        '4': 'aerosol'
    }

    selected_option_loop = options_mapping.get(option_loop)

    # Check if the selected option is valid
    if not selected_option_loop:
        # If the option is invalid, print an error message
        print(""\nInvalid option! Please enter a valid option number."")
        # Since the option is invalid, continue to the next iteration of the loop
        # to prompt the user again for a valid option
        continue

    # Get the start date from the user
    start_date_str_loop = get_valid_start_date(selected_option_loop)

    print(f""\nSelected Option: {selected_option_loop}, Start Date: {start_date_str_loop}, Epoch Date: {epoch_dates[selected_option_loop]}"")

    # Get the end date from the user
    end_date_str_loop = get_valid_end_date()

    # Get the download location from the user
    download_location_loop = input(""\nEnter the download location (e.g., 'EPIC_ARCHIVE'): "")
    if not download_location_loop:
        print(""\nDownload location cannot be empty!\n"")
        continue

    # Convert the start and end dates to datetime objects
    start_date_loop = datetime.strptime(start_date_str_loop, ""%Y-%m-%d"")
    end_date_loop = datetime.strptime(end_date_str_loop, ""%Y-%m-%d"")

    # Iterate through the date range and download images for each date
    current_date_loop = start_date_loop
    while current_date_loop <= end_date_loop:
        current_date_str_loop = current_date_loop.strftime(""%Y-%m-%d"")
        if not download_images_for_date(current_date_str_loop, nasa_manager_loop, selected_option_loop, download_location_loop):
            # If no images are available for the current date, move to the next date
            current_date_loop += timedelta(days=1)
            continue

        # Move to the next date
        current_date_loop += timedelta(days=1)

    # Exit the loop if all dates have been processed
    break

# Once the loop exits, print a farewell message
print(""\nExiting Program...   GoodBye!\n"")
"
AEMu4jU2,🤑G2A.com Free Gift Card FIX June 2024🤑,sirmikey,Python,Wednesday 12th of June 2024 12:19:32 AM CDT,"G2A.com complimentary voucher & games guide.
Any voucher for free on G2A.com including Xbox gift cards & anything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
zAB34Acu,nasa_epic_metadata,Python253,Python,Wednesday 12th of June 2024 12:18:16 AM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: nasa_epic_metadata.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    - This script fetches image metadata from NASA's EPIC (Earth Polychromatic Imaging Camera) API. 
    - EPIC is a camera onboard the NOAA's DSCOVR (Deep Space Climate Observatory) spacecraft, 
      positioned at the Lagrange point 1 (L1), approximately one million miles from Earth. 
    - The camera captures images of the entire sunlit side of Earth, providing a unique perspective on our planet.

    The EPIC images are available in four different types:
        - Natural: True-color images that show Earth as it appears to the human eye.
        - Enhanced: Images that are adjusted to enhance specific features of the atmosphere and surface.
        - Aerosol: Images that highlight the distribution and concentration of aerosols in the atmosphere.
        - Cloud: Images that provide detailed views of cloud formations and their dynamics.

    Users can specify a date range to fetch metadata for, and the metadata will be saved in the specified folder.
    The metadata includes information such as:
        - Identifier: A unique identifier for each image.
        - Image: The name of the image file.
        - Date: The date and time when the image was captured.
        - Centroid Coordinates: The latitude and longitude coordinates of the image's center.
        - DSCOVR J2000 Position: The position of the DSCOVR spacecraft in J2000 coordinates (X, Y, Z).
        - Lunar J2000 Position: The position of the Moon in J2000 coordinates (X, Y, Z).
        - Sun J2000 Position: The position of the Sun in J2000 coordinates (X, Y, Z).

Requirements:
    - Python 3.x
    - Required modules:
        - requests
        - datetime
        - time
        - dateutil
        - colorama

Functions:
    - make_api_request:
        Makes an API request to the specified URL.
    - check_rate_limit:
        Checks and manages the API call rate limit.
    - write_metadata_to_file:
        Writes the fetched metadata to a file.

Classes:
    - NASAEPICManager:
        A class to manage NASA EPIC API requests and rate limits.

Usage:
    1. Ensure there's a file named 'nasa_api.txt' in the current working directory containing your NASA API Key(s).
       The API key file contents must be separated by a new line if you need to use multiple keys.
    2. Run the script.
    3. Follow the on-screen prompts to select an option and specify the date range.
    4. The metadata will be fetched and saved in a text file.

Additional Notes:
    - You need to obtain a NASA API key to use this script.
        - You can get it by registering on the [NASA API portal](https://api.nasa.gov/index.html?apply-for-an-api-key).
    - After obtaining your API key, create a text file named 'nasa_api.txt' in the same directory as this script.
    - Save your API key(s) in 'nasa_api.txt', with each key on a new line if you have multiple keys. Example:
        - EXAMPLE:
            - YOUR_FIRST_API_KEY
            - YOUR_SECOND_API_KEY
    - To download the image files, you can go to URL: (https://pastebin.com/2KQKTxe2)
        - Save the script as 'nasa_epic_images.py' in your current working directory.
        - Follow the detailed prompting from the program 
""""""

# Get Essential Imports
import time
import requests
from datetime import datetime, timedelta
from dateutil import parser as date_parser
from colorama import init, Fore, Style

# Initialize colorama
init(autoreset=True)

class NASAEPICManager:
    """"""
    A class to manage NASA EPIC API requests and rate limits.

    Attributes:
        api_keys (list): List of API keys obtained from a file.
        current_key_index (int): Index of the current API key being used.
        hourly_limit (int): Maximum number of API calls allowed per hour.
        calls_count (int): Number of API calls made in the current hour.
        last_reset_time (float): Timestamp of the last reset time for the hourly limit.
    """"""

    def __init__(self, api_keys_file):
        """"""
        Initializes the NASAEPICManager with API keys and rate limit parameters.

        Args:
            api_keys_file (str): Path to the file containing API keys.
        """"""
        with open(api_keys_file, 'r', encoding='utf-8') as file:
            self.api_keys = file.read().splitlines()
        self.current_key_index = 0
        self.hourly_limit = 999
        self.calls_count = 0
        self.last_reset_time = time.time()

    def make_api_request(self, url, retries=3):
        """"""
        Makes an API request to the specified URL.

        Args:
            url (str): The URL to make the API request to.
            retries (int): Number of retries in case of failure. Default is 3.

        Returns:
            dict: JSON response from the API if successful, otherwise None.
        """"""
        self.check_rate_limit()
        current_api_key = self.api_keys[self.current_key_index]
        params = {'api_key': current_api_key}

        for _ in range(retries):
            try:
                response = requests.get(url, params=params)
                response.raise_for_status()
                self.calls_count += 1
                print(f""\nAPI Key: {current_api_key}, Remaining Requests: {response.headers.get('X-RateLimit-Remaining', 0)}\n"")
                return response.json()
            except requests.exceptions.RequestException:
                print(f""\nError: No image metadata found for {url}! Retrying...\n"")
                time.sleep(3)  # Wait for 3 seconds before retrying

        print(f""Failed to fetch metadata after retries for {url}."")
        return None

    def check_rate_limit(self):
        """"""
        Checks and manages the API call rate limit.
        Resets counters if more than one hour has passed or switches to the next API key if the hourly limit is reached.
        """"""
        current_time = time.time()
        time_since_reset = current_time - self.last_reset_time

        if time_since_reset >= 3600:
            # Reset counters if more than one hour has passed
            self.calls_count = 0
            self.last_reset_time = current_time

        if self.calls_count >= self.hourly_limit:
            # Switch to the next API key if the hourly limit is reached
            self.current_key_index = (self.current_key_index + 1) % len(self.api_keys)
            self.calls_count = 0

def write_metadata_to_file(metadata_list, filename_str):
    """"""
    Writes metadata to a file.

    Args:
        metadata_list (list): A list of dictionaries containing metadata information.
        filename_str (str): The name of the file to write the metadata to.

    Notes:
        - Each entry in the metadata list should be a dictionary containing metadata information.
        - The function writes metadata in a formatted way to the specified file.
        - Metadata includes identifier, image name, date, centroid coordinates, and positions of DSCOVr, Lunar, and Sun.

    """"""
    with open(filename_str, 'w', encoding='UTF-8') as file:
        for entry in metadata_list:
            file.write(f""Identifier: #{entry['identifier']}, \tImage: {entry['image']}, \tDate: {entry['date']}\n\n"")
            file.write(f""Centroid Coordinates: \tLatitude {entry['coords']['centroid_coordinates']['lat']}, \tLongitude {entry['coords']['centroid_coordinates']['lon']}\n\n"")
            file.write(""\t\t\t\t[X]\t\t\t[Y]\t\t\t[Z]\n\n"")
            file.write(f""DSCOVr J2000 Position: \tx {entry['coords']['dscovr_j2000_position']['x']}, \ty {entry['coords']['dscovr_j2000_position']['y']}, \tz {entry['coords']['dscovr_j2000_position']['z']}\n"")
            file.write(f""Lunar J2000 Position: \tx {entry['coords']['lunar_j2000_position']['x']}, \ty {entry['coords']['lunar_j2000_position']['y']}, \tz {entry['coords']['lunar_j2000_position']['z']}\n"")
            file.write(f""Sun J2000 Position: \tx {entry['coords']['sun_j2000_position']['x']}, \ty {entry['coords']['sun_j2000_position']['y']}, \tz {entry['coords']['sun_j2000_position']['z']}\n\n"")
            file.write(""-"" * 50 + ""\n\n"")

# Define the header as a list of strings for easier manipulation
header_lines = [
    ""                        ███    ██  █████  ███████  █████                            "",
    ""                        ████   ██ ██   ██ ██      ██   ██                           "",
    ""                        ██ ██  ██ ███████ ███████ ███████                           "",
    ""                        ██  ██ ██ ██   ██      ██ ██   ██                           "",
    ""                        ██   ████ ██   ██ ███████ ██   ██                           "",
    ""███████  █████         ██████  ███████        █████  ██████         ██████  ███████ "",
    ""     ██ ██   ██       ██       ██            ██   ██      ██       ██       ██      "",
    ""    ██   █████  █████ ███████  ███████ █████  █████   █████  █████ ███████  ███████ "",
    ""   ██   ██   ██       ██    ██      ██       ██   ██      ██       ██    ██      ██ "",
    ""   ██    █████         ██████  ███████        █████  ██████         ██████  ███████ "",
    ""                            ███████ ██████  ██  ██████                              "",
    ""                            ██      ██   ██ ██ ██                                   "",
    ""                            █████   ██████  ██ ██                                   "",
    ""                            ██      ██      ██ ██                                   "",
    ""                            ███████ ██      ██  ██████                   (METADATA) ""
]

# Apply colors to the specified lines
colored_header = []
for i, line in enumerate(header_lines):
    if 0 <= i < 5:  # NASA
        colored_header.append(Fore.RED + line + Style.RESET_ALL)
    elif 5 <= i < 10:  # 78-65-83-65 (ASCII CODE)
        colored_header.append(Fore.WHITE + line + Style.RESET_ALL)
    elif 10 <= i < 15:  # EPIC
        colored_header.append(Fore.BLUE + line + Style.RESET_ALL)
    else:
        colored_header.append(line)

# Print the colored header
for line in colored_header:
    print(line)
    
if __name__ == ""__main__"":
    nasa_manager = NASAEPICManager('nasa_api.txt')

    while True:  # Loop for the menu
        # Display options for the user
        print(""_"" * 83)
        print(""\nMetadata Options:\n"")
        print(""1. Natural"")
        print(""2. Enhanced"")
        print(""3. Cloud"")
        print(""4. Aerosol"")
        print(""5. Exit"")  # Option to exit

        # Get user's choice
        option = input(""\nSelect an option (1-5): "")

        if option == '5':  # Exit option
            print(""\nExiting Program...   GoodBye!\n"")
            break  # Exit the loop and end the program

        # Map the user's choice to the corresponding URL component
        option_mapping = {
            '1': 'natural',
            '2': 'enhanced',
            '3': 'cloud',
            '4': 'aerosol'
        }

        # Check if the user's choice is valid
        if option in option_mapping:
            selected_option = option_mapping[option]

            # Get current date to compare with user input
            current_date = datetime.now().date()

            # Check if start date is before the epoch date (June 13, 2015)
            epoch_dates = {
                'natural': '2015-06-13',
                'enhanced': '2015-08-07',
                'aerosol': '2020-09-04',
                'cloud': '2023-01-03'
            }

            # Get start date from the user
            print(""_"" * 83)
            print(""\n\t\t\t:: Start Date Format: (YYYY-MM-DD) ::\n"")
            start_date_str = input(f""Enter a 'Start Date' after {epoch_dates[selected_option]}:  "")
            print(""_"" * 83)
            start_date = date_parser.parse(start_date_str).date()

            # Check if start date is before the epoch date (June 13, 2015)
            epoch_date = datetime(2015, 6, 13).date()
            if start_date < epoch_date:
                print(Fore.RED + ""\nError: Start date cannot be before June 13, 2015!\n"" + Style.RESET_ALL)
                continue  # Restart the loop for a new input

            # Check if start date is in the future
            if start_date > current_date:
                print(Fore.RED + ""\nError: Start date cannot be in the future!\n"" + Style.RESET_ALL)
                continue  # Restart the loop for a new input

            # Check if the user wants to log a single day or a range of dates
            end_date_str = input(""\nEnter the end date (YYYY-MM-DD) or press [ENTER] to log a single day: "")
            if end_date_str:
                end_date = date_parser.parse(end_date_str).date()

                # Check if end date is in the future
                if end_date > current_date:
                    print(Fore.RED + ""\nError: End date cannot be in the future!\n"" + Style.RESET_ALL)
                    continue  # Restart the loop for a new input

                # Check if end date is before the epoch date (June 13, 2015)
                if end_date < epoch_date:
                    print(Fore.RED + ""\nError: End date cannot be before June 13, 2015!\n"" + Style.RESET_ALL)
                    continue  # Restart the loop for a new input
            else:
                end_date = start_date

            # Specify the filename for the formatted metadata
            filename = f'{start_date_str}_{end_date_str}_{selected_option}.txt'

            # Iterate through the date range and log data for each day
            current_date = start_date
            all_metadata = []  # List to store metadata for all dates

            while current_date <= end_date:
                date_str = current_date.strftime('%Y-%m-%d')
                metadata_url = f""https://api.nasa.gov/EPIC/api/{selected_option}/date/{date_str}?api_key=TEMPL4ujtA3LyN0qbFh4imFv7gxDfUG9WoU0eWOu""
                metadata = nasa_manager.make_api_request(metadata_url)

                if metadata:
                    print(f""Metadata for {date_str}:"")
                    print(metadata)
                    all_metadata.extend(metadata)  # Append metadata to the list

                current_date += timedelta(days=1)

            # Create the file if it doesn't exist
            if all_metadata:
                write_metadata_to_file(all_metadata, filename)
                print(f""\nFormatted metadata has been written to {filename}\n"")
            else:
                print(""\nNo valid entries found in the specified date range.\n"")
        else:
            print(""\nInvalid option! Please select a valid option (1-5).\n"")  
"
V4shdvjS,🤑G2A.com Free Gift Card FIX June 2024🎁,sayid83,Python,Wednesday 12th of June 2024 12:13:31 AM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
JFnBbdxQ,🤑 G2A.com Free Gift Card Guide Jun 2024 FIX 🤑,jusst2k4,GetText,Wednesday 12th of June 2024 12:13:01 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_489321.pdf

Working as of:
12 June 2024"
Bnds62BZ,myshell_dynamic_array_Size,axyd,C,Wednesday 12th of June 2024 12:12:18 AM CDT,"#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>

#define MAXLINE 81
#define MAXARG 10
#define WHITE ""\t \n""
#define RED   ""\x1B[31m""
#define GRN   ""\x1B[32m""
#define RESET ""\x1B[0m""

void execCommand(char *input){
	char *args[MAXARG];	//array of tokens
	char *token;
	int tknCtr = 0;

	/*Split string into tokens*/
	//first token
	token = strtok(input, WHITE);
	args[0] = token;
	//all other tokens
	while(token != NULL){
		token = strtok(NULL, WHITE);
		args[++tknCtr] = token;
	}
	
	/*Shell fork*/
	int forkStatus = 0;
	pid_t pexec, waitPexec;

	if ((pexec = fork()) == 0){
		//search current directory, including relative paths
		int status = execv(args[0], args);

		//search /bin directory
		if( status == -1){
			//prepend first token with /bin directory
			char dir1[80] = ""/bin"";
			char buf[256];

			snprintf(buf, sizeof buf, ""%s/%s"", dir1, args[0]);
			args[0] = buf;

			status = execv(args[0], args);
			
			//binary not found in /bin directory
			if( status == -1){
				printf(RED""\n\t/!\\ ERROR: command not found/!\\\n\n""RESET);
			}
		}
		exit(0);
	} else if (pexec < 0) {
		printf(RED""\n\t/!\\ ERROR: could not fork executor /!\\\n""RESET);
	} else {
		while ((waitPexec = wait(&forkStatus)) > 0);	//wait on child
	}
}

int main(){
	char input[MAXLINE];
	
	do{
		printf(GRN""What command do you desire: ""RESET);
	
		scanf(""%80[^\n]"", input);		//read until enter pressed		
		while ((getchar()) != '\n');	//flush stdin buffer

		if (strcmp(input, ""exit"") == 0) break;

		execCommand(input);
	} while (strcmp(input, ""exit"") != 0);
	
	printf(""\n\tGOODBYE !\n"");
	exit(EXIT_SUCCESS);
}"
WM6rAKtD,🤑G2A.com Free Gift Card FIX June 2024🎁,PetrikDev,Python,Wednesday 12th of June 2024 12:07:31 AM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Steam gift cards & anything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
mYbmYhfi,🤑G2A.com Free Gift Card FIX June 2024🎁,x3kiN,Python,Wednesday 12th of June 2024 12:01:32 AM CDT,"G2A.com free voucher & games guide.
Any gift card for free on G2A.com including Xbox gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
yj4rtLwr,🤑G2A.com Free Gift Card FIX June 2024🤑,FeasModz514,Python,Tuesday 11th of June 2024 11:55:33 PM CDT,"G2A.com complimentary voucher & gaming guide.
Any gift card for free on G2A.com including Amazon gift cards & all else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
vfrECGHU,🤑G2A.com Free Gift Card FIX June 2024🎁,kjihu25,Python,Tuesday 11th of June 2024 11:49:34 PM CDT,"G2A.com free gift card & games guide.
Any voucher for free on G2A.com including Steam gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
gc3Z3Xcm,🤑G2A.com Free Gift Card FIX June 2024🤑,Bufayez,Python,Tuesday 11th of June 2024 11:43:34 PM CDT,"G2A.com free gift card & gaming guide.
Any voucher for free on G2A.com including Steam gift cards & anything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
YWFcjuka,🤑G2A.com Free Gift Card FIX June 2024🎁,buch,Python,Tuesday 11th of June 2024 11:37:35 PM CDT,"G2A.com free gift card & gaming guide.
Any voucher for free on G2A.com including Xbox gift cards & all else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
LwUcsNdz,🤑G2A.com Free Gift Card FIX June 2024🎁,Alfonso1119,Python,Tuesday 11th of June 2024 11:31:36 PM CDT,"G2A.com complimentary voucher & games guide.
Any voucher for free on G2A.com including Playstation gift cards & all else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
e6FfB6Xy,🤑G2A.com Free Gift Card FIX June 2024🤑,Garoam,Python,Tuesday 11th of June 2024 11:25:37 PM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Steam gift cards & everything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
4iA07Ru9,🤑G2A.com Free Gift Card FIX June 2024🤑,atakan1983,Python,Tuesday 11th of June 2024 11:19:37 PM CDT,"G2A.com complimentary gift card & games guide.
Any voucher for free on G2A.com including Playstation gift cards & anything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
HQbYVV8U,🤑G2A.com Free Gift Card FIX June 2024🎁,tajdiqul,Python,Tuesday 11th of June 2024 11:13:35 PM CDT,"G2A.com free gift card & games guide.
Any gift card for free on G2A.com including Amazon gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
czQikYfb,My code,AndiGodGamersDev,Lua,Tuesday 11th of June 2024 11:13:09 PM CDT,"local Players = game:GetService(""Players"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")

local Assets = ReplicatedStorage.Assets
local TutorialBeam = Assets.TutorialBeam
local Modules = Assets.Modules

local Promise = require(Modules.Promise)
local Fusion = require(Modules.Fusion)

local Tutorial = {}
Tutorial.__index = Tutorial

function Tutorial.New()
     local self = setmetatable({}, Tutorial)
     
     self.NewObject = Instance.new
     
     self.TutorialParts = workspace[""Tutorial Parts""]

     self.Guis = script.Guis

     self.NewTutorialBeam = TutorialBeam:Clone()

     self.Player = Players.LocalPlayer
     
     self.NewFusion = Fusion.New
     self.NewPromise = Promise.new

     self:RunAfterLoaded()

     return self
end

function Tutorial:RunAfterLoaded()
     local Character = self.Player.Character or self.Player.CharacterAdded:Wait()
     local HumanoidRootPart = Character.HumanoidRootPart or Character:FindFirstChild(""HumanoidRootPart"")

     local Loaded = self.NewFusion ""BoolValue"" {
          Name = ""HasLoaded"",
          Value = false,
     }

     Loaded.Parent = self.Player

     if not self.Player.HasLoaded.Value then
          self.Player.HasLoaded.Value = true
     end

     if self.Player.HasLoaded.Value == true then
          return self.NewPromise(function(resolve, reject, onCancel)
               local AttachmentTutorialV1 = self.NewObject(""Attachment"", HumanoidRootPart)
               self.NewTutorialBeam.Attachment0 = AttachmentTutorialV1

               local AttachmentTutorialV2 = self.NewObject(""Attachment"", HumanoidRootPart)
               self.NewTutorialBeam.Attachment1 = AttachmentTutorialV2

               self.NewTutorialBeam.Parent = HumanoidRootPart

               local GuideArrow = self.Guis.GuideArrow:Clone()
               GuideArrow.Adornee = self.TutorialParts[""Test 1""]
               GuideArrow.Enabled = true
               GuideArrow.Parent = self.Player.PlayerGui

               AttachmentTutorialV1.Name = ""TutorialAttachmentV1""
               AttachmentTutorialV2.Name = ""TutorialAttachmentV2""
               AttachmentTutorialV2.Parent = GuideArrow.Adornee

               self.TutorialParts[""Test 1""].Touched:Connect(function(Hit)
                    if Hit and Hit.Parent:FindFirstChild(""HumanoidRootPart"") ~= nil then
                         GuideArrow.Adornee = self.TutorialParts[""Test 2""]
                         AttachmentTutorialV2.Parent = GuideArrow.Adornee
                    end
               end)

               self.TutorialParts[""Test 2""].Touched:Connect(function(Hit)
                    if Hit and Hit.Parent:FindFirstChild(""HumanoidRootPart"") ~= nil then
                         GuideArrow.Adornee = self.TutorialParts[""Test 3""]
                         AttachmentTutorialV2.Parent = GuideArrow.Adornee
                    end
               end)

               self.TutorialParts[""Test 3""].Touched:Connect(function(Hit)
                    if Hit and Hit.Parent:FindFirstChild(""HumanoidRootPart"") ~= nil then
                         GuideArrow.Adornee = self.TutorialParts[""Test 1""]
                         AttachmentTutorialV2.Parent = GuideArrow.Adornee
                    end
               end)
               resolve('Success')
          end):andThen(print)
     end
end

task.spawn(function()
     Tutorial.New()
end)"
0wCuxbC6,🤑G2A.com Free Gift Card FIX June 2024🎁,notgoodatscripting,Python,Tuesday 11th of June 2024 11:07:36 PM CDT,"G2A.com free gift card & games guide.
Any gift card for free on G2A.com including Playstation gift cards & all else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
g5TapCxL,🤑G2A.com Free Gift Card FIX June 2024🎁,bgill55,Python,Tuesday 11th of June 2024 11:01:36 PM CDT,"G2A.com free voucher & games guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
R2R5bdMb,🤑G2A.com Free Gift Card FIX June 2024🎁,FreeRobux12345,Python,Tuesday 11th of June 2024 10:55:38 PM CDT,"G2A.com complimentary gift card & games guide.
Any voucher for free on G2A.com including Xbox gift cards & anything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
RZ0St8Cf,stasisChamber,nauseant,Lua,Tuesday 11th of June 2024 10:44:28 PM CDT,"MASTER_CHANNEL = 5452
STASIS_CHANNEL = 34214
LABEL = os.getComputerLabel()

modem = peripheral.find(""modem"")
modem.open(STASIS_CHANNEL)


function job()
    redstone.setOutput(""front"",true)
    os.sleep(3)
    redstone.setOutput(""front"",false)
end


while true do
    local event, modemSide, senderChannel, replyChannel, message, senderDistance = os.pullEvent(""modem_message"")
    local transmission = message
    local delimiter = "" ""
    local result = splitString(transmission, delimiter)
    if message == LABEL then
        job()
    end
end"
gxRAAmHV,🤑G2A.com Free Gift Card FIX June 2024🎁,mikyser,Python,Tuesday 11th of June 2024 10:43:39 PM CDT,"G2A.com complimentary voucher & games guide.
Any gift card for free on G2A.com including Steam gift cards & anything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
5JBMJPyb,🤑G2A.com Free Gift Card FIX June 2024🎁,Ohtaku,Python,Tuesday 11th of June 2024 10:37:40 PM CDT,"G2A.com complimentary voucher & gaming guide.
Any gift card for free on G2A.com including Amazon gift cards & all else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
4yq9TT9m,🤑G2A.com Free Gift Card FIX June 2024🎁,Elii,Python,Tuesday 11th of June 2024 10:31:41 PM CDT,"G2A.com complimentary voucher & gaming guide.
Any gift card for free on G2A.com including Steam gift cards & everything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
MZJRu8Pg,🤑G2A.com Free Gift Card FIX June 2024🎁,guywithabigheart,Python,Tuesday 11th of June 2024 10:25:41 PM CDT,"G2A.com free voucher & gaming guide.
Any voucher for free on G2A.com including Amazon gift cards & everything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
dYKgnNQK,🤑G2A.com Free Gift Card FIX June 2024🎁,PetrikDev,Python,Tuesday 11th of June 2024 10:19:41 PM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Xbox gift cards & anything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
jAqejrYf,🤑G2A.com Free Gift Card FIX June 2024🎁,x3kiN,Python,Tuesday 11th of June 2024 10:13:41 PM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Playstation gift cards & anything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
7XWQRa0t,🤑G2A.com Free Gift Card FIX June 2024🤑,FeasModz514,Python,Tuesday 11th of June 2024 10:07:41 PM CDT,"G2A.com free gift card & gaming guide.
Any item for free on G2A.com including Amazon gift cards & anything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
mbUCt73R,🤑G2A.com Free Gift Card FIX June 2024🤑,kiraezwhethe,Python,Tuesday 11th of June 2024 10:01:42 PM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Playstation gift cards & all else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
dYz6kcXR,🤑G2A.com Free Gift Card FIX June 2024🎁,ColtM4A2,Python,Tuesday 11th of June 2024 09:55:40 PM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Amazon gift cards & anything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
Ne9Gn3xc,🤑G2A.com Free Gift Card FIX June 2024🎁,Skarface-MKL,Python,Tuesday 11th of June 2024 09:49:40 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any voucher for free on G2A.com including Steam gift cards & all else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
tgsS5ZwS,🤑G2A.com Free Gift Card FIX June 2024🤑,thepplayz,Python,Tuesday 11th of June 2024 09:43:42 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any voucher for free on G2A.com including Steam gift cards & all else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
ng3q9SDh,🤑G2A.com Free Gift Card FIX June 2024🤑,sirmikey,Python,Tuesday 11th of June 2024 09:37:42 PM CDT,"G2A.com complimentary gift card & games guide.
Any gift card for free on G2A.com including Amazon gift cards & everything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
XTWGpDwg,🤑G2A.com Free Gift Card FIX June 2024🎁,PetrikDev,Python,Tuesday 11th of June 2024 09:25:40 PM CDT,"G2A.com complimentary gift card & games guide.
Any gift card for free on G2A.com including Xbox gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
gtCR3ibz,🤑G2A.com Free Gift Card FIX June 2024🎁,x3kiN,Python,Tuesday 11th of June 2024 09:19:41 PM CDT,"G2A.com free voucher & games guide.
Any item for free on G2A.com including Amazon gift cards & all else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
sPJsCbvU,🤑G2A.com Free Gift Card FIX June 2024🤑,FeasModz514,Python,Tuesday 11th of June 2024 09:13:41 PM CDT,"G2A.com complimentary gift card & games guide.
Any gift card for free on G2A.com including Amazon gift cards & all else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
jmuqvnLF,Alpine.data,aim2u,JavaScript,Tuesday 11th of June 2024 09:08:21 PM CDT,"document.addEventListener('alpine:init', () => {
            Alpine.data('formHandler',() => ({
                selectedJenis: '',
                selectedKategori: '',
                selectedSubKategori: '',
                selectedGrup: '',
                kategoriList: [],
                subKategoriList: [],
                grupList: [],
                async fetchKategori() {
                    this.kategoriList = [];
                    this.subKategoriList = [];
                    this.grupList = [];
                    if (this.selectedJenis) {
                        const response = await fetch(`/accountmatix/get-kategori/${this.selectedJenis}`);
                        this.kategoriList = await response.json();
                    }
                },
                async fetchSubKategori() {
                    this.subKategoriList = [];
                    this.grupList = [];
                    if (this.selectedKategori) {
                        const response = await fetch(`/accountmatix/get-subkategori/${this.selectedKategori}`);
                        this.subKategoriList = await response.json();
                    }
                },
                async fetchGrup() {
                    this.grupList = [];
                    if (this.selectedSubKategori) {
                        const response = await fetch(`/accountmatix/get-group/${this.selectedSubKategori}`);
                        this.grupList = await response.json();
                    }
                }
            }))
    })"
Lszut6Bi,🤑G2A.com Free Gift Card FIX June 2024🎁,kjihu25,Python,Tuesday 11th of June 2024 09:07:42 PM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Amazon gift cards & all else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
4jugjNsm,🤑G2A.com Free Gift Card FIX June 2024🎁,Bufayez,Python,Tuesday 11th of June 2024 09:01:41 PM CDT,"G2A.com complimentary gift card & gaming guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
Ka6AKaN3,newMiner,Plieax,Lua,Tuesday 11th of June 2024 08:57:21 PM CDT,"local xdist = 0
local ydist = 0
local zdist = 0

local outputOffsetX = 0
local outputOffsetY = 0
local outputOffsetZ = 0

local fuelOffsetX = 0
local fuelOffsetY = 0
local fuelOffsetZ = 0

-- south = z+, east = x+
-- 1 north, 2 east, 3 south, 4 west
local startFacing = 3

-- do not edit variables below
local facing = startFacing

local function breakAhead()
    while (turtle.detect())do
        turtle.dig()
    end
end

local function turnTo(directionNum) 
    if (directionNum ~= facing) then
        local turnDist= facing-directionNum
        -- if you need to turn once to left or right
        if math.abs(turnDist) == 3 then
            if (turnDist > 0) then
                turtle.turnLeft()
            else
                turtle.turnRight()
            end
        -- if you need to turn once
        elseif math.abs(turnDist) == 1 then
            if (turnDist > 0) then
                turtle.turnRight()
            else
                turtle.turnLeft()
            end
        else
            turtle.turnRight()
            turtle.turnRight()
        end
    end
    facing = directionNum
end

local function forceMoveNorth()
    breakAhead()
end



    turnTo(3) -- south 
    sleep(1)
    turnTo(4) -- west west
    sleep(1)
    turnTo(2) -- east east
    sleep(1)
    turnTo(4) -- west west
    sleep(1)
    turnTo(3) -- south south
    sleep(1)
    turnTo(4) -- west west
    sleep(1)
    turnTo(1) -- north south
"
T1UntiZb,Untitled,dereksir,Ruby,Tuesday 11th of June 2024 08:55:55 PM CDT,"require 'puppeteer-ruby'
require 'csv'

# launch a browser instance
Puppeteer.launch(headless: false) do |browser|
  # open a new page
  page = browser.new_page

  # navigate to the target web page
  page.goto(""https://www.scrapingcourse.com/infinite-scrolling"")
  
  # select all products
  products = page.query_selector_all('.product-item')
 
  # iterate through each product
  products.each do |product|
    # select product name and price, and extract their text content
    name = product.query_selector('.product-name').evaluate('(el) => el.textContent')
    price = product.query_selector('.product-price').evaluate('(el) => el.textContent')
    { name: name, price: price }
  end

  # create a CSV file and initialize the header row
  CSV.open('products.csv', 'wb', write_headers: true, headers: ['Product Name', 'Price']) do |csv|
    # populate CSV file with product details
    product_data.each do |product|
      csv << [product[:name], product[:price]]
    end
  end
  puts ""Data has been successfully exported to products.csv""
end"
AbQKkWjF,🤑G2A.com Free Gift Card FIX June 2024🎁,buch,Python,Tuesday 11th of June 2024 08:55:41 PM CDT,"G2A.com free gift card & games guide.
Any gift card for free on G2A.com including Amazon gift cards & anything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
nUtjqJBV,🤑G2A.com Free Gift Card FIX June 2024🤑,Alfonso1119,Python,Tuesday 11th of June 2024 08:49:42 PM CDT,"G2A.com complimentary gift card & games guide.
Any item for free on G2A.com including Steam gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
LUUweTBm,Untitled,dereksir,Ruby,Tuesday 11th of June 2024 08:47:08 PM CDT,"# create a CSV file and initialize the header row
CSV.open('products.csv', 'wb', write_headers: true, headers: ['Product Name', 'Price']) do |csv|
  # populate CSV file with product details
  product_data.each do |product|
    csv << [product[:name], product[:price]]
  end
end"
