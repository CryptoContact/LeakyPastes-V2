id,title,username,language,date,content
FxWZqJRh,Untitled,victor128w,JavaScript,Thursday 14th of December 2023 11:59:29 AM CDT,"const USER_DATABASE = ""USER_DATABASE"";

let
roomNameString = ""üåå APOLLO | Futsal x3 üîµ""
    room = HBInit({
	roomName: roomNameString, // nome da sua hospedagem
	maxPlayers: 30, // quantidade de players que essa sala pode suportar, maximo 30
	public: true, // true para sala publica, false para sala privada.
        playerName: ""[üéÆ]"",
	geo : { code : ""KP"", lat : -19.81, lon : -43.95}, // localiza√ß√£o da hospedagem
	noPlayer: false// false para host com bot, true para host sem bot
})

let
prefixString = ""!"",
bansURL = 'https://discord.com/api/webhooks/1174434045321551932/0RYZWYoCeib7_bG5i2zBaQh-7-FXmPP2TmfcBQV6x0NTpnp2LoUH2uTwtE1B4jZ_lAnq',
JogadoresBanidosObject = {};

let Request = {
	post: (player, content)=>{
		let params = {
			""username"": `${player.name} aplicou um banimento`,
			""avatar_url"": ""https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&="",
			""content"": content,
			""url"": ""https://discord.com/api/webhooks/1174434045321551932/0RYZWYoCeib7_bG5i2zBaQh-7-FXmPP2TmfcBQV6x0NTpnp2LoUH2uTwtE1B4jZ_lAnq"",
		};

		fetch(bansURL, {
			method: ""POST"",
			headers: new Headers({ ""Content-Type"": ""application/json"" }),
			body: JSON.stringify(params)
		})
	}
};

let Comandos = {
	ban: (player, tempo, conn, motivo)=>{
		let aliasTempoArray = [""s"", ""m"", ""h"", ""d""];

		if (!parseInt(tempo[0])) room.sendAnnouncement(`${tempo} n√£o √© um n√∫mero inteiro.`, player.id);
		else {
			if (tempo.toString().length < 2) room.sendAnnouncement(`Voc√™ precisa colocar o tempo. ex: 3m`, player.id);
			else {
				if (!aliasTempoArray.includes(tempo[1])) room.sendAnnouncement(""Voc√™ n√£o colocou se vai ser minuto ou horas. ex: 5h"", player.id);
				else {
					if (conn == undefined) room.sendAnnouncement(""Voc√™ n√£o digitou o conn."", player.id);
					else {
						if (JogadoresBanidosObject[conn]) room.sendAnnouncement(`[${conn}] j√° foi banido`, player.id);
							else {
								if (motivo == undefined) room.sendAnnouncement(""Motivo n√£o definido"", player.id);
									else {
									let motivoSemBarra = motivo.split(""_"").join("" "");
									conn[player.name] = player.name;
									JogadoresBanidosObject[conn] = { tempo: tempo, motivo: motivoSemBarra, autor: player.name, name: player.conn};
									Request.post(player, `[${conn}]\nsala: ${roomName}\ntempo: ${tempo[0]} ${tempo[1] == ""s"" ? ""segundos"" : tempo[1] == ""m"" ? ""minutos"" : tempo[1] == ""h"" ? ""horas"" : tempo[1] == ""d"" ? ""dias"" : ""Tempo n√£o detectado.""}\nMOTIVO: ${motivoSemBarra}`);

							room.sendAnnouncement(`[${conn}] foi banido por ${tempo[0]} ${aliasTempoArray[0] ? ""segundos"" : aliasTempoArray[1] ? ""minutos"" : aliasTempoArray[2] ? ""horas"" : aliasTempoArray[3] ? ""dias"" : ""aliasTempoArray n√£o tem esse tempo""}`, player.id);

							setTimeout(()=>{
							delete JogadoresBanidosObject[conn];
							}, tempo[1] == ""s"" ? 1000*tempo[0] : tempo[1] == ""m"" ? 1000*60*tempo[0] : tempo[1] == ""h"" ? 1000*60*60*tempo[0] : tempo[1] == ""d"" ? 1000*60*60*24*tempo[0] : null)
						}
					}
				}
			}
			}
		}
	},
	infoban: (player, conn)=>{
		if (conn == undefined) room.sendAnnouncement(""Voc√™ n√£o digitou o conn."", player.id);
		else {
			if (!JogadoresBanidosObject[conn]) room.sendAnnouncement(`[${conn}] n√£o foi banido.`, player.id);
			else room.sendAnnouncement(`CONN: ${conn}\nAUTOR: ${JogadoresBanidosObject[conn].autor}\nTEMPO: ${JogadoresBanidosObject[conn].tempo}`, player.id);
		}
	}
};


const playerRadius = 15;
var ballRadius = 6.35;
const triggerDistance = playerRadius + ballRadius + 0.01;

var afkLimit = 16; // cronometro de limite de AFK
var drawTimeLimit = 3; // tempo de empate, escolha um n√∫mero para definir quanto tempo de limite para o jogo ser empatado, deixe Infinity para n√£o ocorrer empates.
var maxTeamSize = 3;
var slowMode = 0;

const Team = { SPECTATORS: 0, RED: 1, BLUE: 2 };
const team = { SPEC: 0, RED: 1, BLUE: 2 };
var extendedP = [];
const eP = { ID: 0, AUTH: 1, CONN: 2, AFK: 3, ACT: 4, GK: 5, MUTE: 6 };
const Ss = { GA: 0, WI: 1, DR: 2, LS: 3, WR: 4, GL: 5, AS: 6, GK: 7, CS: 8, CP: 9, RL: 10, NK: 11 }

var ModoChatPausado = [];

var players;
var teamR;
var teamB;
var teamS;
var lastTeamTouched;
var lastPlayersTouched; 
var countAFK = false; 
var activePlay = false; 
var goldenGoal = false;
var SMSet = new Set()
var banList = []
var game;
var GKList = ["""", """"];
var Rposs = 0;
var Bposs = 0;
var point = [{ ""x"": 0, ""y"": 0 }, { ""x"": 0, ""y"": 0 }]; 
var ballSpeed;
var lastWinner = Team.SPECTATORS;
var streak = 0;
var allBlues = []; 
var allReds = []; 
var inChooseMode = false; 
var redCaptainChoice = """";
var blueCaptainChoice = """";
var chooseTime = 20;
var timeOutCap;
var checkTimeVariable = false; 
var statNumber = 0;
var endGameVariable = false; 
var resettingTeams = false;
var capLeft = false;
var statInterval = 6;

var bloquear_comando = []
var block_comando = [];
var limit = 30;

let registros = new Map()
var checkregister = []
var checkchat = []
var logins = []

var L1 = [''] 
var L2 = [''] 
var L3 = [''] 
var L4 = ['']
var L5 = ['']
var L6 = [''] 
var L7 = ['']
var L8 = [""""]
var L9 = [""""]
var L10 = [""""]
var L11 = [""""]
var L12 = [""""]
var L13 = [""""]
var L14 = [""""]
var L15 = [""""]

const entradapersonalizadabras = ""O vip premium entrou na sala""
var Indio1 = [""Indio"", ""Indio2""];

const entradapersonalizadafominha = ""O brabo fominha entrou pra arrega√ßar.""
var Indio2 = [""Indio"", ""Indio2""];

const entradapersonalizadazum = ""O Trov√£o faz zuuum e entra na sala ‚ö°""
var Indio3 = [""Indio"", ""Indio2""];

const entradapersonalizadazx = ""chegou pra amassar geral""
var Indio4 = [""Indio"", ""Patola | ü¶Ü"", ""Indio2""];

const entradapersonalizadawaxie = ""Todos se ajoelhem diante dele! o Lord Chegou""
var Indio5 = [""Indio"", ""Patola | ü¶Ü"", ""Indio2""];

const puskasoutubro = """"

const cL1 = []
const fL1 = []	
const cL2 = []
const fL2 = []	
const cL3 = []
const fL3 = []	
const cL4 = []
const fL4 = []	
const cL5 = []
const fL5 = []
const cL6 = []
const fL6 = []
const cL7 = []
const fL7 = [] 
const cL8 = []
const fL8 = [] 
const cL9 = []
const fL9 = [] 
const cL10 = []
const fL10 = [] 
const cL11 = []
const fL11 = [] 
const cL12 = []
const fL12 = [] 
const cL13 = []
const fL13 = [] 
const cL14 = []
const fL14 = [] 
const cL15 = []
const fL15 = [] 

const premium = [""Indio"", ""Patola | ü¶Ü"", ""Indio2"", ""Big Shark""]; //MVP+
const supremo = [""Indio"", ""Patola | ü¶Ü"", ""Indio2"", ""Big Shark""]; // MVP++
const booster =[""Indio"", ""Patola | ü¶Ü"", ""Indio2"", ""Big Shark""];
const vips = [""Indio"",
""Patola | ü¶Ü"",
""Indio2"",
""Big Shark"",
"""",
""""];

const semlimiteafk = ["""",
""Indio"",
""Patola | ü¶Ü"",
""Indio2"",
""Big Shark"",
"""",
"""",
"""",
"""",
"""",
"""",
"""",
"""",
""""];

var jogadoresvips = 
[[""Indio"", ""189.4.101.28""],
[""Patola | ü¶Ü"", ""170.150.74.75""],
[""Indio2"", ""189.4.111.28""],
[""Big Shark"", ""187.101.139.167""],
["""", """"],
["""", """"],
["""", """"],
["""", """"]
];

const verificados = [
""Indio"",
""Patola | ü¶Ü"",
""Indio2"",
""Big Shark"",
"""",
"""",
""""];

const staffespecial = [
""Indio"",
""Patola | ü¶Ü"",
""Indio2"",
""Big Shark"",
""""];

const staff = [
""Indio"",
""Patola | ü¶Ü"",
""Indio2"",
""Big Shark"",
"""",
"""",
"""",
"""",
""""];

const adminF = [""Indio"", ""Patola | ü¶Ü"", ""Indio2""]
		
const adminG = [
""Big Shark"",
"""",
"""",
"""",
""""];

const adminM = ["""", """", """"];

const adminE= [""""];

var administradores = 
[["""", """"],
[""Indio"", ""189.4.101.28""],
[""Patola | ü¶Ü"", ""170.150.74.75""],
[""Indio2"", ""189.4.111.28""],
[""Big Shark"", ""187.101.139.167""],
["""", """"],
["""", """"],
["""", """"]
];
var WebHookURL = ""https://discord.com/api/webhooks/1174434530917109780/v6x18zmV9uJvMqQrHfJlREJJpfcGf_udtZz69hBhgwNEp--KwdORWKZ00bIUJ2qHQ9Jk""
var report = 'https://discord.com/api/webhooks/1174434530917109780/v6x18zmV9uJvMqQrHfJlREJJpfcGf_udtZz69hBhgwNEp--KwdORWKZ00bIUJ2qHQ9Jk';
var tempoMensagem = 1000;

var conns = []
var playerConn = []
var tempoDePause = 1000*15; // 5 segundos de pause.
var pausePlayers = []; // Os players que digitarem o comando ""!p"" ter√£o seus Ids puxados para um array ""pausePlayers"".
var pauseGame = true; // Pause = true | unPause = false.
var partida = true; // Partida n√£o iniciada = true | Partida iniciada = false.

var blacklist = [
	{Nick:""Alvaro‚Å∑‚Å∑‚Å∑ #m√° fase"", ipv4: ""200.97.250.154"", Auth: ""KfXj8OMEmCCfHTErhG026V_hq14yLwbpQXaKHAdlb2I"", Conn: ""3230302E39372E3235302E313534""},
	{Nick:"""", ipv4: ""185.54.230.213"", Auth: ""dA3PhXBNAm3oHi_A9NgHVgreijAlchJnc1GWeVWBaYY"", Conn: ""3138352E35342E3233302E323133""},
	{Nick:""Soukxzy"", ipv4: ""187.183.47.42"", Auth: ""KXx-4JWea09iTJSzN50DLlPvi1Ctah209_JwMd-nDSM"", Conn: ""3138372E3138332E34372E3432""},
	{Nick:""Mao"", ipv4: ""187.16.187.125"", Auth: ""k2tfQ897zpXxTPyx2OnzzZrpB0rHiKLJjXtCRNJ1SPY"", Conn: ""3138372E31362E3138372E313235""}];
	
let votekickTimes = {}; //This holds the amount of votes which the players used.
let votekickCount = {}; //This holds the amount of votes which were done against each of the players.
let linkhaxcolors = 'https://htmlcolorcodes.com/';
let erro = 'Voc√™ n√£o tem permiss√£o para executar esse comando.';
let cor_definida = 'voc√™ escolheu a cor ';
let fonte_definida = 'voc√™ escolheu a fonte ';
let erroapi = 'essa n√£o e uma fonte fornecida pela API, aqui est√° a lista de todas possiveis \n';
let replaystest = `https://discord.com/api/webhooks/1169778630587584593/0xEmL789p0nmXAkUxOd3PqwGOpOYC-mu6zdF_sqP2n35Yj4GEQLYUgg6A9zRemUB1Qvq`;

let
palavras = [
""VADIA"", ""vadia"", ""sua vadia"", ""SUA VADIA"", ""SUA PROSTITUTA"", ""sua prostituta"",
""VAGABUNDA"", ""vagabunda"",""sua vagabunda"", ""SUA VAGABUNDA"",
""filho da puta"",
""FILHO DA PUTA"", 
""pnc"",
""pau no cu"",
""seu lixo"",
""SEU LIXO"",
""PNC"",
""PAU NO CU"",
""desgra√ßa"",
""DESGRA√áA"",
""sua vagabunda"", ""SUA VAGABUNDA"", ""seu vagabundo"", ""SEU VAGABUNDO"",
""Se mata"", ""SE MATA"", ""se mata"", ""seu desgra√ßado"", ""sua desgra√ßada"", ""SEU DESGRA√áADO"", ""SUA DESGRA√áADA"",
""se suicida"", ""SE SUICIDA""
],
regex = new RegExp(palavras.join(""|""), 'gi');

let
linkmsg = [
""https://"",
""http://"", 
""http://www""],
link = new RegExp(linkmsg.join(""|""), 'gi');

let
travasmsg = [""‡∞å‰ΩπÁ†ïƒà‚ºàÊ∏ª‰¨≠‡•ë‚¨∫ÁàÇ·∞æ·ú™‰âß·¨Ø„ç∏·úñ·ò¨ÊÖ©„ô≤‘êÁÄ©‡§û‡†£Á¨ã‚Ñâ‚®Ñ„ê∑Á¥™Ê®©‡®õ‡µΩ„îôÊÄÖ„¨ÜÁôï‚®¥Áêê·∏â‚âºÂ¥™"", ""·ôª·∏ª‚®Ç„àøÁàá‰ï¶·¥µÁÅæ„∏èÁúÆ·â°·Ñ∏‹çÁ§ÇÊµ∑Â≠∏„∞å‚¨¶ —´‚ºï‡∏¢‚åë·∏∑„†ï·çÉ„§ï„åã‚ê¢Áú¢Á†¨‚µØÁÖæ‚∞®Á∏Ç„â∞Âåä„§Ä‡§πÁ®´·ùà‚¥æ„Ñ´„§í"", ""‰âä"", ""ÿà‡¨ø"", ""„îûÂ∏±‡•π‡†ö‚∞Ø·ºØÊµ∏·º±·îû·ç≠‡®ÆÂ®ÆŸÅ„§Æ„Äï"", ""„±≥‚¨ó·Ö∑–¥Áîá·úØ‚©ø·§∂‚±ÅÊàÉ Ê§èÁºÅ‚ºêÁçæ‚å±‡¥Æ„àê·µ≤Ê°®‘∑·¥ëƒø·ëÜ„®§‡∞¥‚ë∏Áîà‚®ò—≤‚àØ„ò¥‰Åîÿ≠‡∏æÿå‡∏åÁò™""],
travas = new RegExp(travasmsg.join(""|""), 'gi');

let
travamsg = [""„ß´ÁíßÔøΩÓãµËß≠‰¢úÊΩá·ÄÄ·©®ÏÄ°‡∞àÊ≥ÑÏ∞âÎÑæÔë±Ô´§„è≠ÔøΩÔâΩÁ∑∫"", ""‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì"", ""„ß´"", ""Áíß"", ""Êáà‡±©‰äÄËÑÅÊΩ°‰£öÓ∂ø‚æ§„∏ºÏß†‡§¨"", ""Ó∫ïÎó≤·≠æÓòÖÔøΩÎùÄÊÄ•Ëîπ‚πâÍÜ£„Åõ„ÜâÏòÄÈ∑Ä√öÈåòÈôàÊê≥Á™á„âï""],
trava = new RegExp(travamsg.join(""|""), 'gi');

let
sistmsg = [""ÍßÅÍßÇÍßÉÍßÑÔøΩÍßÖÍ¶∏Í¶πÍ¶∫Í©µÍ©∂Í©∑Í©∏Í©πÍ©∫‚ñì‚ñí‚ñë‚ñÑ‚ñà‚ñÄ‚îÄ‚ñà‚ñÄ‚ñà‚ñà‚ñÑ‚ñà‚ñÄ‚ñà‚ñÄ‚ñà‚ñ¨ÏµÉÏµÑÏµÖÏµÜÏµáÏµàÏµâÏµäÏµãÏµåÏµçÏµéÏµèÔøΩÏµêÏµëÏµíÔøΩÔ§§Ô§•"", ""Ô§¶"", ""Ô§ß"", ""Ô§®"", ""Ô§©"", ""‰±°‰±¢‰±£‰±§‰±•‰±¶‰±ß‰±®‚ñâ‚ñá‚ñà‚ñÇ‚ñÉ‚ñÑ‚ñÇ‚ñÉ""];

sist = new RegExp(sistmsg.join(""|""), 'gi');

let
antitrmsg = [""ÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàò"", ""ÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàò"", ""ÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôç"", ""Ïàò"", ""Ìôç"", ""Ïàò"", ""Ìôç"", ""Ïàò"", ""ÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôç"", ""ÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàòÌôçÏàò""];
antitr = new RegExp(antitrmsg.join(""|""), 'gi');

let
antitramsg = [""„ß´ÁíßÔøΩÓãµËß≠‰¢úÊΩá·ÄÄ·©®ÏÄ°‡∞àÊ≥ÑÏ∞âÎÑæÔë±sawÔ´§„è≠ÔøΩÔâΩÁ∑∫ÔøΩÂ†≤Êò∏‚∏êÎÇßÊáà‡±©‰äÄËÑÅÊΩ°‰£öÓ∂ø‚æ§„∏ºÏß†‡§¨Í∫ÖÔøΩÔòµÔπ¥ÔØ∞ÔπüÔµø‡øøÔñæ"", ""Îπè‚ø†Èõ¥„∞ØÏ≤áÎ∏åÏæûÔøΩÏù®‚éòÂ†åÔøΩÃÉ„≠éÊéåÔøΩ‰ëÇÂê∫ÏèòÓ∫ïÎó≤·≠æÓòÖÔøΩÎùÄÊÄ•Ëîπ‚ô§‚πâÍÜ£„Åõ„ÜâÏòÄÈ∑Ä√∫ÈåòÈôàÊê≥Á™á„âïÍôïÈÑ≤Ê¨ôËéöÏÅÉ‚óëÏ≤∂„ò•‰Ö∫"", ""«´"", ""Âë°"", ""ËÆ¨"", ""Ó≠ÆÍØ©"", ""Óçû‰åª‚®£ÔøΩÓΩµÈ¶´„∑àÊêäÍåàÊÅò„†ÑÔûÇÈôåÈ¢ìÃåË∞Ü"", ""Èûø√• ‰Üî‚Ω™Ô≠ìÊ´ÜÈôóÏçÜ„æëÏæõÁÇ¶ÕùËñêÔèøÔøΩÁø∫ÔøßÁ•ã€ì""];
antitra = new RegExp(antitramsg.join(""|""), 'gi');

let
antitravamsg = ["" ‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà‚ñâ„ëà„ëâ„ëä„ëã„ëå„ëç„ëé„ëè„ëê„ëë„ëí„ëì„ëî„ëï„ëñ„ëó"", ""„ëò„ëô„ëö„ëõ„ëú„ëù„ëû„ëü„ë†„ë¢„ë£„ë§„ë•„ë¶„ëß„ë®„ë©„ë™„ë´„ë¨„ë≠„ëÆ„ëØ„ë∞„ë±„ë≤„ë≥„ë¥„ëµ„ë∂„ë∑„ë∏„ëπ„ë∫„ëª„ëº„ëΩ„ëæ„íÄ„íÅ"", ""ÍßÅÍßÇÍßÉÍßÑÔøΩÍßÖÍ¶∏Í¶πÍ¶∫Í¶ªÍ©µÍ©∂Í©∑Í©∏Í©πÍ©∫"", ""‚ñì‚ñí‚ñë"", ""‚ñÑ‚ñà‚ñÄ"", ""‚îÄ‚ñà‚ñÄ‚ñà‚ñà"", ""‚ñÑ‚ñà‚ñÄ‚ñà‚ñÄ‚ñà‚ñ¨"", ""ÏµÉÏµÑÏµÖÏµÜÏµáÏµàÏµâÏµäÏµãÏµåÏµçÏµéÏµèÔøΩÏµêÏµëÏµíÔøΩ"", ""Ô§§Ô§•Ô§¶Ô§ßÔ§®Ô§©‰±°‰±¢‰±£‰±§‰±•‰±¶‰±ß‰±®‚ñâ‚ñá‚ñà‚ñÇ‚ñÉ‚ñÑ‚ñÇ‚ñÉ""];
antitrava = new RegExp(antitravamsg.join(""|""), 'gi');

let
racmsg = [
	""sua macaca"",
	""sua negra"",
	""sua preta"",
	""SUA PRETA"",
	""SUA NEGRA"",
	""SUA MACACA"",
	""seu macaco"",
	""seu negro"",
	""seu preto"",
	""SEU PRETO"",
	""SEU NEGRO"",
	""SEU MACACO"",
	""voce √© macaco"",
	""voce √© preto"",
	""voce √© negro"",
	""VOCE √â MACACO"",
	""VOCE √â PRETO"",
	""VOCE √â NEGRO"",
	""voce e macaco"",
	""voce e preto"",
	""voce e negro"",
	""VOCE e MACACO"",
	""VOCE e PRETO"",
	""VOCE e NEGRO"",
	""preto macaco"",
	""macaco preto"",
	""seu macaco preto"",
	""seu preto macaco"",
	""seu negro macaco preto"",
	""seu macaco preto negro"",
	""seu preto negro macaco"",
	""SEU NEGRO MACACO PRETO"",
	""SEU MACACO PRETO NEGRO"",
	""SEU PRETO NEGRO MACACO"",
	""seu marrom"",
	""SEU MARROM"",
	""sua marrom"",
	""SUA MARROM"",
	""seu macaquinho"",
	""SEU MACAQUINHO"",
	""sua macaquinha"",
	""SUA MACAQUINHA""];
racismo = new RegExp(racmsg.join(""|""), 'gi');

function autobans(message) {

    var request = new XMLHttpRequest();
    request.open(""POST"",""https://discord.com/api/webhooks/1174434045321551932/0RYZWYoCeib7_bG5i2zBaQh-7-FXmPP2TmfcBQV6x0NTpnp2LoUH2uTwtE1B4jZ_lAnq"");

    request.setRequestHeader('Content-type', 'application/json');

    var params = {
		embeds: [
			{
				fields: [],
				title: ""Banimento auto aplicado"",
				color: 16777215,
				footer: {
					text: ""¬© APOLLO 2023 all reseverd.""
				},
				author: { ""name"": roomNameString },
				image: {
					url: ""https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&=""
				},
				thumbnail: {
					url: ""https://media.discordapp.net/attachments/1114717413754273813/1174450725993062511/OIG.png?ex=6567a379&is=65552e79&hm=9d35f0c6273adfbd7bc3b20647a134bf1ec52ab03c6206c6b0866e3aeb846397&=&width=425&height=425""
				}
			}
		],
        avatar_url: 'https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&=',
        username: 'APOLLO',
        content: message
    };

    request.send(JSON.stringify(params));
}

let Cor = {
	Vermelho: 0xFA5646,
	Laranja: 0xFFC12F,
	Verde: 0x7DFA89,
	Azul: 0x05C5FF,
	Amrelo: 0xFFFF17,
	Cinza: 0xCCCCCC,
	Branco: 0xFFFFFF,
	Azulclaro: 0x6ECAFF,
	Powderblue: 0xB0E0E6,
	Roxo: 0x800080,
	Platina: 0xE5E4E2,
	Ouro: 0xffd700,
	Prata: 0xd5d5d5,
	Bronze: 0x896728,
	Thistle: 0xD8BFD8,
	Khaki: 0xF0E68C,
	AliceBlue: 0xF0F8FF,
	GhostWhite: 0xF8F8FF,
	Snow: 0xFFFAFA,
	Seashell:0xFFF5EE,
	FloralWhite: 0xFFFAF0,
	WhiteSmoke: 0xF5F5F5,
	Beige: 0xF5F5DC,
	OldLace:	0xFDF5E6,
	Ivory:	0xFFFFF0,
	Linen:	0xFAF0E6,
	Cornsilk: 0xFFF8DC,
	AntiqueWhite: 0xFAEBD7,
	BlanchedAlmond: 0xFFEBCD,
	Bisque: 0xFFE4C4,
	LightYellow: 0xFFFFE0,
	LemonChiffon: 0xFFFACD,
	LightGoldenrodYellow: 0xFAFAD2,
	PapayaWhip: 0xFFEFD5,
	PeachPuff: 0xFFDAB9,
	Moccasin: 0xFFE4B5,
	PaleGoldenrod: 0xEEE8AA,
	Azulescuro: 0x426AD6
	}

	var spamArray = [0, 0, 0, 0, 0, 0]
	var mutado = []
	
	var info = {
		amarelo: 0xFFFF17,
		vermelho: 0xFA5646,
		negrito: 'bold',
		desmutar: 240000,
	}
	
	function detectarspam(player, message) {
		spamArray.push(player.id)
		
		if (mutado.includes(player.name) == false && spamArray[spamArray.length - 1] === player.id && spamArray[spamArray.length - 2] === player.id) {
		setTimeout(_ => {  if (spamArray[spamArray.length - 2] === player.id){ player.id = spamArray[spamArray.length = 0];	}}, info.desmutar - 230000) }
	
		if (mutado.includes(player.name) == false && spamArray[spamArray.length - 1] === player.id && spamArray[spamArray.length - 2] === player.id && spamArray[spamArray.length - 3] === player.id) {
		setTimeout(_ => {  if (spamArray[spamArray.length - 3] === player.id){ player.id = spamArray[spamArray.length = 0];	}}, info.desmutar - 230000) }
	
		if (mutado.includes(player.name) == false && spamArray[spamArray.length - 1] === player.id && spamArray[spamArray.length - 2] === player.id && spamArray[spamArray.length - 3] === player.id && spamArray[spamArray.length - 4] === player.id) {
		setTimeout(_ => {  if (spamArray[spamArray.length - 4] === player.id){ player.id = spamArray[spamArray.length = 0];	}}, info.desmutar - 230000) }
		
		if (mutado.includes(player.name) == false && spamArray[spamArray.length - 1] === player.id && spamArray[spamArray.length - 2] === player.id && spamArray[spamArray.length - 3] === player.id && spamArray[spamArray.length - 4] === player.id && spamArray[spamArray.length - 5] === player.id) {
		room.sendAnnouncement(""[PV] Voc√™ pode ser punido por fazer 'SPAM', escreva devagar!"", player.id, info.vermelho, info.negrito)
		setTimeout(_ => {  if (spamArray[spamArray.length - 5] === player.id){ player.id = spamArray[spamArray.length = 0];	}}, info.desmutar - 230000) }
		
		if (mutado.includes(player.name) == false && spamArray[spamArray.length - 1] === player.id && spamArray[spamArray.length - 2] === player.id && spamArray[spamArray.length - 3] === player.id && spamArray[spamArray.length - 4] === player.id && spamArray[spamArray.length - 5] === player.id && spamArray[spamArray.length - 6] === player.id) {
		room.sendAnnouncement(player.name + ""üö´ foi mutado por fazer spam üö´ "", null, info.amarelo, info.negrito)
		mutado.push(player.name)
		
		setTimeout(() => {
		var remover = mutado.indexOf(player.name) + mutado.splice(remover, 1)
		room.sendAnnouncement('[PV] voc√™ foi desmutado, chat liberado.', player.id, info.amarelo, info.negrito)
		}, info.desmutar) // temporizador
		
		}
	}

let RecSistem = {
    getCustomDate: ()=>{
        let
        data = new Date().toLocaleDateString().split(""/"").join(""-""),
        relogio = new Date().toLocaleTimeString().split("":"");

        return `${data}-${relogio[0]}h${relogio[1]}m`;
    },
    getScoresTime: time=>{
        return ~~(Math.trunc(time) / 60) + "":"" + (Math.trunc(time)%60).toString().padStart(2, '0');
    },
    sendDiscordWebhook: scores=>{
        let
        red = room.getPlayerList().filter((player)=>player.team == 1).map((player)=> player.name),
        blue = room.getPlayerList().filter((player)=>player.team == 2).map((player)=> player.name);

        let form = new FormData();
        form.append(null, new File( [room.stopRecording()], `${getDate()}`+`${cod}${cod1}${cod2}${cod3}${cod4}.hbr2`, {""type"": ""text/plain""} ));
        form.append(""payload_json"", JSON.stringify(RecSistem.getParams(scores, red, blue)));

        let xhr = new XMLHttpRequest();
        xhr.open(""POST"", replaystest);
        xhr.send(form);
    },
    getParams: (scores, red, blue)=>{
        let params = {
          ""username"": ""APOLLO REPLAYS"",
          ""avatar_url"": ""https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&="",
          ""content"": ""----------------------------------------------------------------------------------"",
          ""embeds"": [{
            ""title"": ""-------- APOLLO --------"",
			color: 16777215,
            ""description"": ""REPLAY - 2023"",
            ""timestamp"": null,
            ""author"": { ""name"": roomNameString },
			image: {
				url: ""https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&=""
			},
			thumbnail: {
				url: ""https://media.discordapp.net/attachments/1114717413754273813/1174450725993062511/OIG.png?ex=6567a379&is=65552e79&hm=9d35f0c6273adfbd7bc3b20647a134bf1ec52ab03c6206c6b0866e3aeb846397&=&width=425&height=425""
			},
            ""footer"": {
                ""text"": `${getDate()}`+`${cod}${cod1}${cod2}${cod3}${cod4}`,
            },
            ""fields"": [
            { ""name"": ""RED"", ""value"": `${red.join(""\n"")}\n**GOLS**\n${scores.red}`, ""inline"": true },
            { ""name"": ""BLUE"", ""value"": `${blue.join(""\n"")}\n**GOLS**\n${scores.blue}`, ""inline"": true },
            { ""name"": ""Tempo que durou a partida"", ""value"": RecSistem.getScoresTime(scores.time) },
            ]
        }],
        ""components"": []
    };
    return params;
}
};
//FIM LET'S

//CONST'S	

const votedPlayers = new Set() //The set of players which were voted.
const disc = 'https://discord.gg/BfwezkPMEN';
const comandovip = 'Comando exclusivo para VIPS';
const capit√£es = 'Apenas capit√£es do time podem escolher uniforme.';
const capit√£espausar = 'Apenas capit√£es do time podem pausar a partida.';
const corsucesso = 'Cor alterada com sucesso.'
const PnZ = [""""];

const resetarAvatarEm = 3;
const fontsdisp = [""normal"", ""bold"", ""italic"", ""small""];
const Negrito = 'bold';
const Italic = 'italic';
const Normal = 'normal';

const frasesGOL = [
"" GOLA√áO DE "",
"" UM BELISSIMO GOL DE "",
"" QUE FINALIZA√á√ÉO SENHORES, √â DE "",
"" UMA BELA FINALIZA√á√ÉO DE "",
"" A-DI-VI-NHA, GOLLLLLLLLLLLL DE ""

]; // Frases de gol

  const frasesASS = [
"", GRANDE PASSE DE "",
"", PASSE MONSTRUOSO DE "",
"", QUE ASSISTENCIA FENOMENAL DE "",
]; // Frases de assistencias

  const golcontra = [
"" GOL CONTRA, QUE ISSO ""]; // Frases de gol contra
	

  const WINRED = [
"" RED VENCEU O BLUE MAIS UMA VEZ, POR "",
"" RED √â PAI DO BLUE, VENCEU POR "",
"" GRANDE VIT√ìRIA DO RED, PLACAR: "" ];

  const WINBLUE = [
"" BLUE VENCEU O RED MAIS UMA VEZ, POR "",
"" BLUE √â PAI DO RED, VENCEU POR "",
"" GRANDE VIT√ìRIA DO BLUE, PLACAR: "" ];
  
  const sbt = [
	"" UHHHHHHHHHHHHHHHHHHHHHH"",
	"" SER√Å QUE VAI SAIR UM GOL?"",
	"" HOJE VAI TER ZEBRA, PODE TER CERTEZA!!"",
	"" EM PLENO 2023, OS TIMES EST√ÉO MUITO RUIM""
];

const oemessagem = [
	' OPA, VAI PARA AONDE?!',
	' CREDO, QUE OEEEE FOI ESSE',
	' NUSSAAAAA, PASSOU LOTADOOOO',
	' EPAAAAA, PASSOU VOANDO AQUI EM MARTE!',
	' RECEBAAAA, E RECEBEU UM OE INCRIVEL',
	' WOWWWW, ESSE BETA LEVOU UM OE',
	' HAHAHAHA, O CARA PASSOU LOTADO',
	' SEM COMENT√ÅRIOS PARA ESSE OE',
	' F, ESSE PASSOU LOTADO NA VELOCIDADE DA LUZ',
	"" SENHORRRRRR, QUE OEEEEE FOI ESSEEEEEE!""
];

const code = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];
const code1 = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];
const code2 = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];
const code3 = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];
const code4 = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];


var cod = code[(Math.random() * code.length) | 0]
var cod1 = code1[(Math.random() * code.length) | 0]
var cod2 = code2[(Math.random() * code.length) | 0]
var cod3 = code3[(Math.random() * code.length) | 0]
var cod4 = code4[(Math.random() * code.length) | 0]


const URLs = {
	chat: ""https://discord.com/api/webhooks/1174408747867701320/d_PTXcD9qu0DHOGGV1s8BHD-5QGYETdepT7TSOJBucqXTwTPjwC8ccL36FKAxth4Tvr9""
};

room.setTeamsLock(true)
var Mapa = `{
	""name"": ""APOLLO X3"",
	""width"": 640,
	""height"": 290,
	""spawnDistance"": 350,
	""bg"": {
		""type"": """",
		""width"": 550,
		""height"": 240,
		""kickOffRadius"": 80,
		""cornerRadius"": 0,
		""color"": ""2E2E2E""
	},
	""vertexes"": [
		{
			""x"": 550,
			""y"": 240,
			""trait"": ""ballArea"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": -240,
			""trait"": ""ballArea"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 0,
			""y"": 80,
			""bCoef"": 0.15,
			""trait"": ""kickOffBarrier"",
			""color"": ""7A7A7A"",
			""vis"": true,
			""curve"": 180
		},
		{
			""x"": 0,
			""y"": -80,
			""bCoef"": 0.15,
			""trait"": ""kickOffBarrier"",
			""color"": ""7A7A7A"",
			""vis"": true,
			""curve"": 180
		},
		{
			""x"": -550,
			""y"": -80,
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""curve"": 0,
			""color"": ""000000"",
			""pos"": [
				-700,
				-80
			]
		},
		{
			""x"": -590,
			""y"": -80,
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""curve"": 0,
			""color"": ""000000"",
			""pos"": [
				-700,
				-80
			]
		},
		{
			""x"": -590,
			""y"": 80,
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""curve"": 0,
			""color"": ""000000"",
			""pos"": [
				-700,
				80
			]
		},
		{
			""x"": -550,
			""y"": 80,
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""curve"": 0,
			""color"": ""000000"",
			""pos"": [
				-700,
				80
			]
		},
		{
			""x"": 550,
			""y"": -80,
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""curve"": 0,
			""color"": ""000000"",
			""pos"": [
				700,
				-80
			]
		},
		{
			""x"": 590,
			""y"": -80,
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""curve"": 0,
			""color"": ""000000"",
			""pos"": [
				700,
				-80
			]
		},
		{
			""x"": 590,
			""y"": 80,
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""curve"": 0,
			""color"": ""000000"",
			""pos"": [
				700,
				80
			]
		},
		{
			""x"": 550,
			""y"": 80,
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""curve"": 0,
			""color"": ""000000"",
			""pos"": [
				700,
				80
			]
		},
		{
			""x"": -550,
			""y"": 80,
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A"",
			""pos"": [
				-700,
				80
			]
		},
		{
			""x"": -550,
			""y"": 240,
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -550,
			""y"": -80,
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A"",
			""pos"": [
				-700,
				-80
			]
		},
		{
			""x"": -550,
			""y"": -240,
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -550,
			""y"": 240,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A"",
			""curve"": -0.3535876431154097,
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": 550,
			""y"": 240,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A"",
			""curve"": -0.3535876431154097,
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": 550,
			""y"": 80,
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""pos"": [
				700,
				80
			],
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": 240,
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": -240,
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": -80,
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A"",
			""pos"": [
				700,
				-80
			]
		},
		{
			""x"": 550,
			""y"": -240,
			""bCoef"": 0,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": -240,
			""bCoef"": 0,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -550,
			""y"": -240,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""curve"": 0,
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": -240,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""curve"": 0,
			""color"": ""7A7A7A""
		},
		{
			""x"": 0,
			""y"": -239,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""color"": ""2E2E2E""
		},
		{
			""x"": 0,
			""y"": -80,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 0,
			""y"": 80,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""color"": ""7A7A7A"",
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": 0,
			""y"": 240,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""color"": ""2E2E2E"",
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": 0,
			""y"": -80,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true,
			""color"": ""7A7A7A""
		},
		{
			""x"": 0,
			""y"": 80,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true,
			""color"": ""7A7A7A""
		},
		{
			""x"": 0,
			""y"": 80,
			""trait"": ""kickOffBarrier"",
			""color"": ""7A7A7A"",
			""vis"": true,
			""curve"": -180
		},
		{
			""x"": 0,
			""y"": -80,
			""trait"": ""kickOffBarrier"",
			""color"": ""7A7A7A"",
			""vis"": true,
			""curve"": -180
		},
		{
			""x"": 0,
			""y"": 80,
			""trait"": ""kickOffBarrier"",
			""color"": ""7A7A7A"",
			""vis"": true,
			""curve"": 0
		},
		{
			""x"": 0,
			""y"": -80,
			""trait"": ""kickOffBarrier"",
			""color"": ""7A7A7A"",
			""vis"": true,
			""curve"": 0
		},
		{
			""x"": -557.5,
			""y"": 80,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""curve"": 0,
			""vis"": false,
			""pos"": [
				-700,
				80
			],
			""color"": ""7A7A7A""
		},
		{
			""x"": -557.5,
			""y"": 240,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""curve"": 0,
			""vis"": false,
			""color"": ""7A7A7A""
		},
		{
			""x"": -557.5,
			""y"": -240,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""vis"": false,
			""curve"": 0,
			""color"": ""7A7A7A""
		},
		{
			""x"": -557.5,
			""y"": -80,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""vis"": false,
			""curve"": 0,
			""pos"": [
				-700,
				-80
			],
			""color"": ""7A7A7A""
		},
		{
			""x"": 557.5,
			""y"": -240,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""vis"": false,
			""curve"": 0,
			""color"": ""7A7A7A""
		},
		{
			""x"": 557.5,
			""y"": -80,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""vis"": false,
			""curve"": 0,
			""pos"": [
				700,
				-80
			],
			""color"": ""7A7A7A""
		},
		{
			""x"": 557.5,
			""y"": 80,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""curve"": 0,
			""vis"": false,
			""pos"": [
				700,
				80
			],
			""color"": ""7A7A7A""
		},
		{
			""x"": 557.5,
			""y"": 240,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""curve"": 0,
			""vis"": false,
			""color"": ""7A7A7A""
		},
		{
			""x"": 0,
			""y"": -80,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 0,
			""y"": 80,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -550,
			""y"": -80,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -550,
			""y"": 80,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": -80,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": 80,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -550,
			""y"": 200,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A"",
			""curve"": -90
		},
		{
			""x"": -390,
			""y"": 70,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A"",
			""curve"": 0
		},
		{
			""x"": -550,
			""y"": 226,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""curve"": -90,
			""color"": ""7A7A7A""
		},
		{
			""x"": -536,
			""y"": 240,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""curve"": -90,
			""color"": ""7A7A7A""
		},
		{
			""x"": -550,
			""y"": -200,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A"",
			""curve"": 90
		},
		{
			""x"": -390,
			""y"": -70,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A"",
			""curve"": 0
		},
		{
			""x"": -550,
			""y"": -226,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""curve"": 90,
			""color"": ""7A7A7A""
		},
		{
			""x"": -536,
			""y"": -240,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""curve"": 90,
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": -226,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""curve"": -90,
			""color"": ""7A7A7A""
		},
		{
			""x"": 536,
			""y"": -240,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""curve"": -90,
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": 226,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""curve"": 90,
			""color"": ""7A7A7A""
		},
		{
			""x"": 536,
			""y"": 240,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""curve"": 90,
			""color"": ""7A7A7A""
		},
		{
			""x"": 550,
			""y"": 200,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A"",
			""curve"": 90
		},
		{
			""x"": 390,
			""y"": 70,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A"",
			""curve"": 90
		},
		{
			""x"": 550,
			""y"": -200,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A"",
			""curve"": -90
		},
		{
			""x"": 390,
			""y"": -70,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A"",
			""curve"": -90
		},
		{
			""x"": 390,
			""y"": 70,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A"",
			""curve"": 0
		},
		{
			""x"": 390,
			""y"": -70,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A"",
			""curve"": 0
		},
		{
			""x"": -550.5714302062988,
			""y"": -80.42856979370117,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""FF4040"",
			""curve"": 0
		},
		{
			""x"": 550.5714302062988,
			""y"": -80.42856979370117,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""4D52FF"",
			""curve"": 0
		},
		{
			""x"": -550.5714302062988,
			""y"": 78.42856979370117,
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""x"": 550.5714302062988,
			""y"": 80.42856979370117,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""4D52FF"",
			""curve"": 0
		},
		{
			""x"": -550.5714302062988,
			""y"": -26.428569793701172,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""FF7373"",
			""curve"": 0
		},
		{
			""x"": 550.5714302062988,
			""y"": -26.428569793701172,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""8293FF"",
			""curve"": 0
		},
		{
			""x"": -550.5714302062988,
			""y"": 22.428569793701172,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""FF7373""
		},
		{
			""x"": 550.5714302062988,
			""y"": 26.428569793701172,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""8293FF"",
			""curve"": 0
		},
		{
			""x"": 0.3333320617675781,
			""y"": -291.33333587646484,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier""
		},
		{
			""x"": -0.3333320617675781,
			""y"": -291.33333587646484,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier""
		},
		{
			""x"": 0,
			""y"": -285.6666717529297,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""color"": ""2E2E2E""
		},
		{
			""x"": -42.00960219478736,
			""y"": 43.72427983539095,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -13.717421124828519,
			""y"": -51.44032921810699,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 34.29355281207134,
			""y"": 36.0082304526749,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 55.72702331961591,
			""y"": -46.29629629629628,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 10.288065843621382,
			""y"": -48.868312757201636,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 59.15637860082302,
			""y"": 5.144032921810701,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -37,
			""y"": 31,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 10,
			""y"": -12,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -42,
			""y"": 35,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 9,
			""y"": -7,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -34,
			""y"": 39,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": 10,
			""y"": -2,
			""bCoef"": 0.1,
			""trait"": ""line"",
			""color"": ""7A7A7A""
		},
		{
			""x"": -590,
			""y"": -80,
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""curve"": -34.30899670281414,
			""color"": ""000000"",
			""pos"": [
				700,
				-80
			]
		},
		{
			""x"": -590,
			""y"": 80,
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""curve"": -34.30899670281414,
			""color"": ""000000"",
			""pos"": [
				700,
				80
			]
		},
		{
			""x"": -99.10743556474034,
			""y"": 285.27206212636275,
			""cMask"": [
				""ball""
			],
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": -79.99665939203257,
			""y"": 246.3154799281507,
			""cMask"": [
				""ball""
			],
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": -62.35594292491769,
			""y"": 285.27206212636275,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": 23.13648964119558,
			""y"": 242.9121670288802,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": 21.66642993560268,
			""y"": 281.8687492270922,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": 40.84696866890255,
			""y"": 281.8687492270922,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": -51.414477177399945,
			""y"": 284.86399517208076,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": -50.02489671314589,
			""y"": 246.88212914913666,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": -50.87572191688402,
			""y"": 263.0564636185021,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": -50.87572191688402,
			""y"": 247.12264066088437,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": -8.557042570304588,
			""y"": 252.01151576840815,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true,
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": -9.020236058389273,
			""y"": 283.9642666102407,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true,
			""_data"": {
				""mirror"": {}
			}
		},
		{
			""x"": -8.557042570304588,
			""y"": 283.9642666102407,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true,
			""_data"": {
				""mirror"": {}
			},
			""_selected"": ""segment""
		},
		{
			""x"": -8.557042570304588,
			""y"": 252.01151576840815,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true,
			""_data"": {
				""mirror"": {}
			},
			""_selected"": ""segment""
		},
		{
			""x"": 54.19363810590804,
			""y"": 242.9121670288802,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": 54.19363810590804,
			""y"": 281.8687492270922,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": 72.72137762929542,
			""y"": 281.8687492270922,
			""cMask"": [
				""ball""
			]
		},
		{
			""x"": 102.48773068070405,
			""y"": 252.01151576840815,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true
		},
		{
			""x"": 102.02453719261936,
			""y"": 282.86117283622406,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true
		},
		{
			""x"": 102.02453719261936,
			""y"": 282.86117283622406,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true
		},
		{
			""x"": 102.02453719261936,
			""y"": 252.01151576840815,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""vis"": true
		},
		{
			""x"": -64.72954265929657,
			""y"": 256.5354880853103,
			""cMask"": [
				""ball""
			],
			""_data"": {
				""mirror"": {}
			}
		}
	],
	""segments"": [
		{
			""v0"": 4,
			""v1"": 5,
			""curve"": 0,
			""color"": ""000000"",
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""pos"": [
				-700,
				-80
			],
			""y"": -80
		},
		{
			""v0"": 6,
			""v1"": 7,
			""curve"": 0,
			""color"": ""000000"",
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""pos"": [
				-700,
				80
			],
			""y"": 80
		},
		{
			""v0"": 8,
			""v1"": 9,
			""curve"": 0,
			""color"": ""000000"",
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""pos"": [
				700,
				-80
			],
			""y"": -80
		},
		{
			""v0"": 9,
			""v1"": 10,
			""curve"": 34.16936245547304,
			""color"": ""000000"",
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""x"": 590
		},
		{
			""v0"": 10,
			""v1"": 11,
			""curve"": 0,
			""color"": ""000000"",
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""pos"": [
				700,
				80
			],
			""y"": 80
		},
		{
			""v0"": 2,
			""v1"": 3,
			""curve"": 180,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.15,
			""cGroup"": [
				""blueKO""
			],
			""trait"": ""kickOffBarrier""
		},
		{
			""v0"": 2,
			""v1"": 3,
			""curve"": -180,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.15,
			""cGroup"": [
				""redKO""
			],
			""trait"": ""kickOffBarrier""
		},
		{
			""v0"": 12,
			""v1"": 13,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""x"": -550
		},
		{
			""v0"": 14,
			""v1"": 15,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""x"": -550
		},
		{
			""v0"": 16,
			""v1"": 17,
			""curve"": -0.3535876431154097,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""y"": 240,
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						-550,
						240
					],
					""b"": [
						550,
						240
					],
					""curve"": -0.3535876431154097,
					""radius"": 178245.64490260708,
					""center"": [
						0,
						-178004.7963525059
					],
					""from"": 1.5677106925115314,
					""to"": 1.573881961078262
				}
			}
		},
		{
			""v0"": 18,
			""v1"": 19,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""x"": 550
		},
		{
			""v0"": 20,
			""v1"": 21,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 1.15,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""x"": 550
		},
		{
			""v0"": 22,
			""v1"": 23,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""x"": 550,
			""y"": -240
		},
		{
			""v0"": 24,
			""v1"": 25,
			""curve"": 0,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""y"": -240
		},
		{
			""v0"": 26,
			""v1"": 27,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier""
		},
		{
			""v0"": 28,
			""v1"": 29,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						0,
						80
					],
					""b"": [
						0,
						240
					],
					""radius"": null,
					""center"": [
						null,
						null
					],
					""from"": null,
					""to"": null
				}
			}
		},
		{
			""v0"": 36,
			""v1"": 37,
			""curve"": 0,
			""vis"": false,
			""color"": ""7A7A7A"",
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""x"": -557.5
		},
		{
			""v0"": 38,
			""v1"": 39,
			""curve"": 0,
			""vis"": false,
			""color"": ""7A7A7A"",
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""x"": -557.5
		},
		{
			""v0"": 40,
			""v1"": 41,
			""curve"": 0,
			""vis"": false,
			""color"": ""7A7A7A"",
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""x"": 557.5
		},
		{
			""v0"": 42,
			""v1"": 43,
			""curve"": 0,
			""vis"": false,
			""color"": ""7A7A7A"",
			""bCoef"": 1,
			""cMask"": [
				""ball""
			],
			""trait"": ""ballArea"",
			""x"": 557.5
		},
		{
			""v0"": 50,
			""v1"": 51,
			""curve"": -90,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 53,
			""v1"": 52,
			""curve"": -90,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 54,
			""v1"": 55,
			""curve"": 90,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 51,
			""v1"": 55,
			""curve"": 0,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 57,
			""v1"": 56,
			""curve"": 90,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 59,
			""v1"": 58,
			""curve"": -90,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 61,
			""v1"": 60,
			""curve"": 90,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 62,
			""v1"": 63,
			""curve"": 90,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 64,
			""v1"": 65,
			""curve"": -90,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 66,
			""v1"": 67,
			""curve"": 0,
			""vis"": true,
			""color"": ""7A7A7A"",
			""bCoef"": 0.1,
			""trait"": ""line"",
			""x"": 390
		},
		{
			""v0"": 72,
			""v1"": 74,
			""curve"": 0,
			""vis"": true,
			""color"": ""FF7373"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 73,
			""v1"": 75,
			""curve"": 0,
			""vis"": true,
			""color"": ""8293FF"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 74,
			""v1"": 70,
			""curve"": 0,
			""vis"": true,
			""color"": ""FF4040"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 75,
			""v1"": 71,
			""curve"": 0,
			""vis"": true,
			""color"": ""4D52FF"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 72,
			""v1"": 68,
			""curve"": 0,
			""vis"": true,
			""color"": ""FF4040"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 73,
			""v1"": 69,
			""curve"": 0,
			""vis"": true,
			""color"": ""4D52FF"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""v0"": 26,
			""v1"": 78,
			""vis"": true,
			""color"": ""2E2E2E"",
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""x"": 0
		},
		{
			""v0"": 79,
			""v1"": 80,
			""color"": ""7A7A7A"",
			""trait"": ""line""
		},
		{
			""v0"": 80,
			""v1"": 81,
			""color"": ""7A7A7A"",
			""trait"": ""line""
		},
		{
			""v0"": 79,
			""v1"": 82,
			""color"": ""7A7A7A"",
			""trait"": ""line""
		},
		{
			""v0"": 83,
			""v1"": 84,
			""curve"": 105.98430261137086,
			""color"": ""7A7A7A"",
			""trait"": ""line""
		},
		{
			""v0"": 91,
			""v1"": 92,
			""curve"": -34.30899670281414,
			""color"": ""000000"",
			""cMask"": [
				""ball""
			],
			""trait"": ""goalNet"",
			""x"": -590
		},
		{
			""v0"": 93,
			""v1"": 94,
			""cMask"": [
				""ball""
			],
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						-99.10743556474034,
						285.27206212636275
					],
					""b"": [
						-79.99665939203257,
						246.3154799281507
					],
					""curve"": -11.580583034901748,
					""radius"": 215.04932021446746,
					""center"": [
						-281.63597664240604,
						171.56391898453032
					],
					""from"": 0.3550123447197935,
					""to"": 0.5571316479794265
				}
			},
			""curve"": -11.580583034901748
		},
		{
			""v0"": 94,
			""v1"": 95,
			""cMask"": [
				""ball""
			]
		},
		{
			""v0"": 96,
			""v1"": 97,
			""cMask"": [
				""ball""
			]
		},
		{
			""v0"": 97,
			""v1"": 98,
			""cMask"": [
				""ball""
			],
			""y"": 281.8687492270922
		},
		{
			""v0"": 99,
			""v1"": 100,
			""cMask"": [
				""ball""
			]
		},
		{
			""v0"": 101,
			""v1"": 102,
			""curve"": -217.55096872885548,
			""cMask"": [
				""ball""
			]
		},
		{
			""v0"": 103,
			""v1"": 104,
			""curve"": 182.72621800529865,
			""vis"": true,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						-8.557042570304588,
						252.01151576840815
					],
					""b"": [
						-9.020236058389273,
						283.9642666102407
					],
					""curve"": 182.72621800529865,
					""radius"": 15.982576819627445,
					""center"": [
						-8.4084777915851,
						267.9934020870445
					],
					""from"": -1.5800918815688385,
					""to"": 1.6090822523405661
				}
			}
		},
		{
			""v0"": 105,
			""v1"": 106,
			""curve"": 182.72621800529865,
			""vis"": true,
			""bCoef"": 0.1,
			""cMask"": [
				""red"",
				""blue""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier"",
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						-8.557042570304588,
						283.9642666102407
					],
					""b"": [
						-8.557042570304588,
						252.01151576840815
					],
					""curve"": 182.72621800529865,
					""radius"": 15.980897796226841,
					""center"": [
						-8.937204093066422,
						267.98789118932444
					],
					""from"": 1.547005586635091,
					""to"": -1.547005586635091
				}
			},
			""_selected"": true
		},
		{
			""v0"": 107,
			""v1"": 108,
			""cMask"": [
				""ball""
			]
		},
		{
			""v0"": 108,
			""v1"": 109,
			""cMask"": [
				""ball""
			]
		},
		{
			""v0"": 110,
			""v1"": 111,
			""curve"": 182.72621800529865,
			""vis"": true,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier""
		},
		{
			""v0"": 112,
			""v1"": 113,
			""curve"": 182.72621800529865,
			""vis"": true,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			],
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""trait"": ""kickOffBarrier""
		},
		{
			""v0"": 93,
			""v1"": 114,
			""cMask"": [
				""ball""
			],
			""_data"": {
				""mirror"": {},
				""arc"": {
					""a"": [
						-99.10743556474034,
						285.27206212636275
					],
					""b"": [
						-64.72954265929657,
						256.5354880853103
					],
					""radius"": null,
					""center"": [
						null,
						null
					],
					""from"": null,
					""to"": null
				}
			}
		}
	],
	""goals"": [
		{
			""p0"": [
				-557.5,
				-80
			],
			""p1"": [
				-557.5,
				80
			],
			""team"": ""red"",
			""color"": ""7A7A7A""
		},
		{
			""p0"": [
				557.5,
				80
			],
			""p1"": [
				557.5,
				-80
			],
			""team"": ""blue"",
			""color"": ""7A7A7A""
		}
	],
	""discs"": [
		{
			""radius"": 5,
			""pos"": [
				-550,
				80
			],
			""color"": ""CFCFCF"",
			""trait"": ""goalPost"",
			""y"": 80
		},
		{
			""radius"": 5,
			""pos"": [
				-550,
				-80
			],
			""color"": ""CFCFCF"",
			""trait"": ""goalPost"",
			""y"": -80,
			""x"": -560
		},
		{
			""radius"": 5,
			""pos"": [
				550,
				80
			],
			""color"": ""CFCFCF"",
			""trait"": ""goalPost"",
			""y"": 80
		},
		{
			""radius"": 5,
			""pos"": [
				550,
				-80
			],
			""color"": ""CFCFCF"",
			""trait"": ""goalPost"",
			""y"": -80
		},
		{
			""radius"": 3,
			""invMass"": 0,
			""pos"": [
				-550,
				240
			],
			""color"": ""FFCC00"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""radius"": 3,
			""invMass"": 0,
			""pos"": [
				-550,
				-240
			],
			""color"": ""FFCC00"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""radius"": 3,
			""invMass"": 0,
			""pos"": [
				550,
				-240
			],
			""color"": ""FFCC00"",
			""bCoef"": 0.1,
			""trait"": ""line""
		},
		{
			""radius"": 3,
			""invMass"": 0,
			""pos"": [
				550,
				240
			],
			""color"": ""FFCC00"",
			""bCoef"": 0.1,
			""trait"": ""line""
		}
	],
	""planes"": [
		{
			""normal"": [
				0,
				1
			],
			""dist"": -240,
			""bCoef"": 1,
			""trait"": ""ballArea"",
			""vis"": false,
			""curve"": 0,
			""_data"": {
				""extremes"": {
					""normal"": [
						0,
						1
					],
					""dist"": -240,
					""canvas_rect"": [
						-940.3699691520002,
						-427.5744703488001,
						940.3699691520002,
						427.5744703488001
					],
					""a"": [
						-940.3699691520002,
						-240
					],
					""b"": [
						940.3699691520002,
						-240
					]
				}
			}
		},
		{
			""normal"": [
				0,
				-1
			],
			""dist"": -240.58349039526215,
			""bCoef"": 1,
			""trait"": ""ballArea"",
			""_data"": {
				""extremes"": {
					""normal"": [
						0,
						-1
					],
					""dist"": -240.58349039526215,
					""canvas_rect"": [
						-940.3699691520002,
						-427.5744703488001,
						940.3699691520002,
						427.5744703488001
					],
					""a"": [
						-940.3699691520002,
						240.58349039526215
					],
					""b"": [
						940.3699691520002,
						240.58349039526215
					]
				}
			}
		},
		{
			""normal"": [
				0,
				1
			],
			""dist"": -291,
			""bCoef"": 0.1,
			""_data"": {
				""extremes"": {
					""normal"": [
						0,
						1
					],
					""dist"": -291,
					""canvas_rect"": [
						-940.3699691520002,
						-427.5744703488001,
						940.3699691520002,
						427.5744703488001
					],
					""a"": [
						-940.3699691520002,
						-291
					],
					""b"": [
						940.3699691520002,
						-291
					]
				}
			}
		},
		{
			""normal"": [
				0,
				-1
			],
			""dist"": -290.61041953574596,
			""bCoef"": 0.1,
			""_data"": {
				""extremes"": {
					""normal"": [
						0,
						-1
					],
					""dist"": -290.61041953574596,
					""canvas_rect"": [
						-940.3699691520002,
						-427.5744703488001,
						940.3699691520002,
						427.5744703488001
					],
					""a"": [
						-940.3699691520002,
						290.61041953574596
					],
					""b"": [
						940.3699691520002,
						290.61041953574596
					]
				}
			}
		},
		{
			""normal"": [
				1,
				0
			],
			""dist"": -638,
			""bCoef"": 0.1,
			""_data"": {
				""extremes"": {
					""normal"": [
						1,
						0
					],
					""dist"": -638,
					""canvas_rect"": [
						-940.3699691520002,
						-427.5744703488001,
						940.3699691520002,
						427.5744703488001
					],
					""a"": [
						-638,
						-427.5744703488001
					],
					""b"": [
						-638,
						427.5744703488001
					]
				}
			}
		},
		{
			""normal"": [
				-1,
				0
			],
			""dist"": -640,
			""bCoef"": 0.1,
			""_data"": {
				""extremes"": {
					""normal"": [
						-1,
						0
					],
					""dist"": -640,
					""canvas_rect"": [
						-940.3699691520002,
						-427.5744703488001,
						940.3699691520002,
						427.5744703488001
					],
					""a"": [
						640,
						-427.5744703488001
					],
					""b"": [
						640,
						427.5744703488001
					]
				}
			}
		},
		{
			""normal"": [
				1,
				0
			],
			""dist"": -638,
			""bCoef"": 0.1,
			""trait"": ""ballArea"",
			""vis"": false,
			""curve"": 0,
			""_data"": {
				""extremes"": {
					""normal"": [
						1,
						0
					],
					""dist"": -638,
					""canvas_rect"": [
						-940.3699691520002,
						-427.5744703488001,
						940.3699691520002,
						427.5744703488001
					],
					""a"": [
						-638,
						-427.5744703488001
					],
					""b"": [
						-638,
						427.5744703488001
					]
				}
			}
		},
		{
			""normal"": [
				-1,
				0
			],
			""dist"": -640,
			""bCoef"": 0.1,
			""trait"": ""ballArea"",
			""vis"": false,
			""curve"": 0,
			""_data"": {
				""extremes"": {
					""normal"": [
						-1,
						0
					],
					""dist"": -640,
					""canvas_rect"": [
						-940.3699691520002,
						-427.5744703488001,
						940.3699691520002,
						427.5744703488001
					],
					""a"": [
						640,
						-427.5744703488001
					],
					""b"": [
						640,
						427.5744703488001
					]
				}
			}
		}
	],
	""traits"": {
		""ballArea"": {
			""vis"": false,
			""bCoef"": 1,
			""cMask"": [
				""ball""
			]
		},
		""goalPost"": {
			""radius"": 8,
			""invMass"": 0,
			""bCoef"": 0.5
		},
		""goalNet"": {
			""vis"": true,
			""bCoef"": 0.1,
			""cMask"": [
				""ball""
			]
		},
		""line"": {
			""vis"": true,
			""bCoef"": 0.1,
			""cMask"": [
				""""
			]
		},
		""kickOffBarrier"": {
			""vis"": false,
			""bCoef"": 0.1,
			""cGroup"": [
				""redKO"",
				""blueKO""
			],
			""cMask"": [
				""red"",
				""blue""
			]
		}
	},
	""playerPhysics"": {
		""bCoef"": 0,
		""acceleration"": 0.11,
		""kickingAcceleration"": 0.1,
		""kickStrength"": 5,
		""radius"": 15,
		""invMass"": 0.5,
		""damping"": 0.96,
		""cGroup"": [
			""red"",
			""blue""
		],
		""gravity"": [
			0,
			0
		],
		""kickingDamping"": 0.96,
		""kickback"": 0
	},
	""ballPhysics"": {
		""radius"": 6.25,
		""bCoef"": 0.4,
		""invMass"": 1.5,
		""damping"": 0.99,
		""color"": ""FFEB3B"",
		""cMask"": [
			""all""
		],
		""gravity"": [
			0,
			0
		],
		""cGroup"": [
			""ball""
		]
	},
	""joints"": [],
	""redSpawnPoints"": [],
	""blueSpawnPoints"": [],
	""canBeStored"": false,
	""cameraWidth"": 0,
	""cameraHeight"": 0,
	""maxViewWidth"": 0,
	""cameraFollow"": ""ball"",
	""kickOffReset"": ""partial""
}`;
const scoreMapa = 3; // Limite de pontua√ß√£o do jogo
const tempoMapa = 3; // Limite de tempo do jogo

loadMap(Mapa, scoreMapa, tempoMapa);

setInterval(() => { // local aonde stats dos players s√£o armazenadas
	if(Object.keys(localStorage).includes(""_grecaptcha"")){
	localStorage.removeItem(""_grecaptcha"")
	  var tableau = []
	  if (statNumber % 5 == 0) {
		  Object.keys(localStorage).forEach(function (key) { if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.GA])]); } });
		  if (tableau.length < 5) {
			  return false;
		  }
		  tableau.sort(function (a, b) { return b[1] - a[1]; });
		  console.log(""Jogos> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1]);
	  }
	  if (statNumber % 5 == 1) {
		  Object.keys(localStorage).forEach(function (key) { if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.WI])]); } });
		  if (tableau.length < 5) {
			  return false;
		  }
		  tableau.sort(function (a, b) { return b[1] - a[1]; });
		  console.log(""Vit√≥rias> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1]);
	  }
	  if (statNumber % 5 == 2) {
		  Object.keys(localStorage).forEach(function (key) { if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.GL])]); } });
		  if (tableau.length < 5) {
			  return false;
		  }
		  tableau.sort(function (a, b) { return b[1] - a[1]; });
		  console.logt(""Gols> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1]);
	  }
	  if (statNumber % 5 == 3) {
		  Object.keys(localStorage).forEach(function (key) { if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.AS])]); } });
		  if (tableau.length < 5) {
			  return false;
		  }
		  tableau.sort(function (a, b) { return b[1] - a[1]; });
		  console.log(""Passes> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1]);
	  }
	  if (statNumber % 5 == 4) {
		  Object.keys(localStorage).forEach(function (key) { if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) { tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.CS])]); } });
		  if (tableau.length < 5) {
			  return false;
		  }
		  tableau.sort(function (a, b) { return b[1] - a[1]; });
		  console.log(""Defesas> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1]);
	  }
	}
	  statNumber++;
  }, statInterval * 60 * 1000)

  room.onPlayerJoin = function (player) { // evento quando o player entra na sala
		extendedP.push([player.id, player.auth, player.conn, false, 0, 0, false])
		updateRoleOnPlayerIn()
		if (localStorage.getItem(getAuth(player)) == null) { 
			stats = [0, 0, 0, 0, ""0.00"", 0, 0, 0, 0, ""0.00"", ""player"", player.name] 
			localStorage.setItem(getAuth(player), JSON.stringify(stats)) 
			}
		var conn = player.conn
		var ipv4 = conn.match(/.{1,2}/g).map(function(v){
			return String.fromCharCode(parseInt(v, 16));
		  }).join('');
		  sendAnnouncementToDiscord(
			  ""```""+""üìùInforma√ß√µes do jogador, conn, auth, IP e data ‚è∞"" + ""\n""+
	  
		  ""O jogador "" + player.name + "" entrou na sala APOLLO""+ ""\n"" +
		  ""conn: "" + player.conn + ""üåé"" +
		  ""\n"" + ""auth: "" + player.auth + ""üíª"" + ""\n""+
		  ""IPV4: "" + (ipv4) + ""üåê"" + ""\n"" +
		  ""Data: "" + `${getDateInfo()}` +""```"");
		  multiplas_abas(player)

	for(var i=0; i < administradores.length; i++){
        if(player.name == administradores[i][0] && ipv4 == administradores[i][1]){
        }
        else if((player.name == administradores[i][0] && ipv4 != administradores[i][1]) || (player.name != administradores[i][0] && ipv4 == administradores[i][1])){
        room.kickPlayer(player.id,""Voc√™ n√£o tem permiss√£o de entrar com esse nick."",false);
        }
        }


		for(var i=0; i < jogadoresvips.length; i++){
			if(player.name == jogadoresvips[i][0] && ipv4 == jogadoresvips[i][1]){
			}
			else if((player.name == jogadoresvips[i][0] && ipv4 != jogadoresvips[i][1]) || (player.name != jogadoresvips[i][0] && ipv4 == jogadoresvips[i][1])){
			room.kickPlayer(player.id,""Voc√™ n√£o tem permiss√£o de entrar com esse nick."",false);
			}
			}


	if(isBlacklisted(player) == true) room.kickPlayer(player.id,""Voc√™ foi banido, saiba mais em (https://discord.gg/BfwezkPMEN)"",true);
	if (JogadoresBanidosObject[player.conn]) room.kickPlayer(player.id, ""Voc√™ est√° banido"", true);

	if (Indio1.includes(player.name)){
		room.sendAnnouncement(entradapersonalizadabras, null, Cor.Azul, Negrito)
	}
	if (Indio1.includes(player.name)){
		room.sendAnnouncement(puskasoutubro, null, Cor.Azul, Negrito)
	}
	if (Indio2.includes(player.name)){
		room.sendAnnouncement(entradapersonalizadafominha, null, Cor.Amrelo, Italic)
	}
	if (Indio3.includes(player.name)){
		room.sendAnnouncement(entradapersonalizadazum, null, Cor.Amrelo, Negrito)
	}
	if (Indio4.includes(player.name)){
		room.sendAnnouncement(entradapersonalizadazx, null, Cor.Amrelo, Negrito)
	}

	if (Indio5.includes(player.name)){
		room.sendAnnouncement(entradapersonalizadawaxie, null, Cor.Azulclaro, Negrito)
	}
	if (adminF.includes(player.name)){
		room.sendAnnouncement(""O DONO DA SALA ENTROU!!"", null, Cor.Vermelho, Negrito)
	}	if (adminG.includes(player.name)){
		room.sendAnnouncement(""UM DOS ADMINISTRADORES EST√Å ENTRE N√ìS!!!"", null, Cor.Azulclaro, Negrito)
	}	if (adminM.includes(player.name)){
		room.sendAnnouncement(""UM DOS MODERADORES EST√Å ENTRE N√ìS!!"", null, Cor.Verde, Negrito)
	}	if (adminE.includes(player.name)){
		room.sendAnnouncement(""UM DOS ESTAGI√ÅRIOS EST√Å ENTRES N√ìS!!"", null, Cor.Amrelo, Negrito)
	}

	setTimeout(() => {
		room.sendAnnouncement(""ENTRE EM NOSSO DISCORD: "" + disc, player.id, Cor.Branco, Normal)
		}, tempoMensagem * 10)


	cor_e_fonte()

	let db = jsonToMap(localStorage.getItem(USER_DATABASE))
	if (db.get(player.name,
	{...player, authenticated: false}))
	setTimeout(() => {
	let p = registros.get(player.id)
	registros.get(player.id,{...player, authenticated: false})
	}, 20000)
	
	room.sendAnnouncement(player.name + "", bem-vindo(a) a Apollo!!"", null, Cor.Azul, Negrito) 
        room.sendAnnouncement(
  '‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n' +
  '‚ïë                        …™…¥·¥Ö…™·¥è·¥ç·¥è·¥Ös           s·¥õ·¥Ä·¥õs:·¥è…¥   \n' +
  '‚ïë                           ú·¥Äx ô·¥Ä ü ü                             \n' +
  '‚ïë                            ·¥Ä·¥ú·¥õ·¥è                                    \n' +
  '‚ïë      https://discord.gg/BfwezkPMEN          \n' +
  '‚ïü‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n' +
  '‚ïë  !·¥Ä“ì·¥ã ! ô ô ! ú·¥á ü·¥ò ! ü·¥è…¢…™…¥ [·¥Ñ·¥è·¥Ö·¥á] !·¥ç·¥á !s·¥õ·¥Ä·¥õs      \n' +
  '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù',
  player.id,
  0xffa500,
  'Normal'
);

	if (db.get(player.name)) {
	checkregister.push(player.name)
	checkchat.push(player.name)
	}
	else {
	setTimeout(_ => { room.sendAnnouncement(""‚Ä¢ Para se registrar, escreva !registrar senha"", player.id)}, tempoMensagem*4)
	}
	
	if (checkregister.includes(player.name) == true) {
	room.sendAnnouncement(""‚Ä¢ Essa conta foi registrada, use o comando !login e a senha para logar!"", player.id, Cor.Laranja, Negrito) // msg privada
	room.sendAnnouncement(""‚Ä¢ Informe a sua senha!"", player.id, Cor.Amarelo, Negrito) // msg privada
	}
}
  
room.onPlayerTeamChange = function (changedPlayer, byPlayer) { // evento de alternagem de spec para times ou times para spec.
    if (changedPlayer.id == 0) {
        room.setPlayerTeam(0, Team.SPECTATORS);
        return;
    }
    if (getAFK(changedPlayer) && changedPlayer.team != Team.SPECTATORS) {
        room.setPlayerTeam(changedPlayer.id, Team.SPECTATORS);
        room.sendAnnouncement(changedPlayer.name + "" AFK!"", null, Cor.Vermelho, 'bold', 1);
        return;
    }
    updateTeams();
    if (room.getScores() != null) {
        var scores = room.getScores();
        if (changedPlayer.team != Team.SPECTATORS && scores.time <= (3 / 4) * scores.timeLimit && Math.abs(scores.blue - scores.red) < 2) {
            (changedPlayer.team == Team.RED) ? allReds.push(changedPlayer) : allBlues.push(changedPlayer);
        }
    }
    if (changedPlayer.team == Team.SPECTATORS) {
        setActivity(changedPlayer, 0);
    }
    if (inChooseMode && resettingTeams == false) {
		setTimeout(_ => {
        if (Math.abs(teamR.length - teamB.length) == teamS.length) {
            deactivateChooseMode();
            resumeGame();
            var b = teamS.length;
            if (teamR.length > teamB.length) {
                for (var i = 0; i < b; i++) {
                    setTimeout(() => { room.setPlayerTeam(teamS[0].id, Team.BLUE); }, 200 * i);
                }
            }
            else {
                for (var i = 0; i < b; i++) {
                    setTimeout(() => { room.setPlayerTeam(teamS[0].id, Team.RED); }, 200 * i);
                }
            }
            return;
        }
        else if ((teamR.length == maxTeamSize && teamB.length == maxTeamSize) || (teamR.length == teamB.length && teamS.length < 2)) {
            deactivateChooseMode();
            resumeGame();
        }
        else if (teamR.length <= teamB.length && redCaptainChoice != """") { // choice remembered
            redCaptainChoice == ""top"" ? room.setPlayerTeam(teamS[0].id, Team.RED) : redCaptainChoice == ""random"" ? room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.RED) : room.setPlayerTeam(teamS[teamS.length - 1].id, Team.RED);
            return;
        }
        else if (teamB.length < teamR.length && blueCaptainChoice != """") {
            blueCaptainChoice == ""top"" ? room.setPlayerTeam(teamS[0].id, Team.BLUE) : blueCaptainChoice == ""random"" ? room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.BLUE) : room.setPlayerTeam(teamS[teamS.length - 1].id, Team.BLUE);
            return;
        }
        else {
            choosePlayer();
        }
    }, 500)
	}
}
  
room.onPlayerLeave = function (player) { // evento quando o player sai da sala
	  if (teamR.findIndex((red) => red.id == player.id) == 0 && inChooseMode && teamR.length <= teamB.length) {
	  choosePlayer();
	  capLeft = true; setTimeout(() => { capLeft = false; }, 10);
	  }
	  if (teamB.findIndex((blue) => blue.id == player.id) == 0 && inChooseMode && teamB.length < teamR.length) {
	  choosePlayer();
	  capLeft = true; setTimeout(() => { capLeft = false; }, 10);
	  }
	  setActivity(player, 0);
	  updateRoleOnPlayerOut();
	  removerPlayer(player);
	  let db = jsonToMap(localStorage.getItem(USER_DATABASE))
	  if (db.get(player.name)) { registros.authenticated = false; }
	  registrosout(player)
}

function registrosout(player){
	if(logins.includes(player.name) == true){
	var remover = logins.indexOf(player)
	logins.splice(logins.indexOf(player.name))
	}
  }
  
room.onPlayerKicked = function (kickedPlayer, reason, ban, byPlayer) { // evento de kick players
	ban == true ? banList.push([kickedPlayer.name, kickedPlayer.id]) : null;
}

var banidos = [];

function bantosenddiscord(message) {

    var request = new XMLHttpRequest();
    request.open(""POST"",""https://discord.com/api/webhooks/1174434045321551932/0RYZWYoCeib7_bG5i2zBaQh-7-FXmPP2TmfcBQV6x0NTpnp2LoUH2uTwtE1B4jZ_lAnq"");

    request.setRequestHeader('Content-type', 'application/json');

    var params = {
		embeds: [
			{
				fields: [],
				title: ""BANIMENTO"",
				description: ""Pronto!\nUsu√°rio banido: "" + message.substr(5),
				color: 16777215,
				footer: {
					text: ""¬© APOLLO 2023 all reseverd.""
				},
				image: {
					url: ""https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&=""
				},
				thumbnail: {
					url: ""https://flyclipart.com/thumb2/west-shamokin-high-school-476991.png""
				}
			}
		],
        avatar_url: 'https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&=',
        username: 'APOLLO',
        content: message
    };

    request.send(JSON.stringify(params));
}

	  /* PLAYER ACTIVITY */

	  let extractnewPassword = (message) => {
		let split = message.trim().split("" "");
		if (split.length !== 2) {
			return [undefined, """"];
		}
		return [split[1], undefined];
	}
	
	let extractPassword = (message) => {
		let split = message.trim().split("" "")
		if (split.length !== 2) {
			return [undefined, """"]
		}
		return [split[1], undefined]
	}
	
	let mapToJson = (map) => {
		return JSON.stringify([...map]);
	}
	
	let jsonToMap = (jsonStr) => {
		return new Map(JSON.parse(jsonStr));
	}

	  room.onPlayerChat = function(player, message) {
		
		let messageSplit = message.split("" "");

		if (Object.keys(Comandos).map(comando=> `${prefixString}${comando}`).includes(messageSplit[0].toLowerCase())) {
			Comandos[messageSplit[0].slice(1)](player, messageSplit[1], messageSplit[2], messageSplit[3]);
			return false;
		}

		let login = (id, username, password) => {
			let db = jsonToMap(localStorage.getItem(USER_DATABASE))
			if (!db.get(username)) {
			return room.sendAnnouncement(`@${username}, voc√™ n√£o foi registrado, Use ""!registrar senha"" para registrar`, player.id, Cor.Laranja, Negrito, 2)
			}
			if (db.get(username) !== password) {
			return room.sendAnnouncement(`@${username}, senha errada.`, player.id, Cor.Vermelho, Negrito, 2)
			}
			else {
			registros.authenticated = true;
			registros.set(id, registros)
			var remover = checkregister.indexOf(message)
			checkregister.splice(checkregister.indexOf(player.name))
			var remover = checkchat.indexOf(message)
			checkchat.splice(checkchat.indexOf(player.name))
			logins.push(player.name)
			return room.sendAnnouncement(`O jogador ${username} logou!`, null, 0xFFFF17, Normal)
			}}
		  let registro = (username, password) => {
			let db = jsonToMap(localStorage.getItem(USER_DATABASE))
			if (db.get(username)) {
			return room.sendAnnouncement(`${username}, voc√™ ja possui um registro informe a senha !senha senha!`, player.id, Cor.Vermelho, Negrito, 2);
			}
			let map = db.set(username, password);
			localStorage.setItem(USER_DATABASE, mapToJson(map))
			room.sendAnnouncement(`${username}, voc√™ se registrou!, o seu registro foi ativado`, player.id, Cor.Laranja, Negrito, 2);
			room.sendAnnouncement(player.name + ' sua senha √©:' + message.substr(11), player.id, Cor.Verde, Negrito, 2)
			checkregister.push(player.name)
			}
		  let alterarsenha = (username, password) => {
			let db = jsonToMap(localStorage.getItem(USER_DATABASE));
			let map = db.set(username, password);
			localStorage.setItem(USER_DATABASE, mapToJson(map))
			room.sendAnnouncement(player.name + ' voc√™ alterou a sua senha! sua senha nova √© ' + message.substr(12), player.id, 0xFFFF17, Negrito)
		  }
		  
			msg = message;
			if(msg.startsWith(""!login"") && logins.includes(player.name) == true) { room.sendAnnouncement(`@${player.name}, voc√™ j√° esta logado.`, player.id, Cor.Laranja, Negrito, 2) }
			  if(msg.startsWith(""!login"") && logins.includes(player.name) == false) {
			  let [password, error] = extractPassword(msg);
				  if (error) {
					  room.sendAnnouncement(`@${player.name}, ${error}`);
					  return false;
				  }
				  login(player.id, player.name, password);
				  return false;
			  }
			  else if(msg.startsWith(""!registrar"") && message.substr(0, 11) == ""!registrar "") {
			let [password, error] = extractPassword(msg);
				  if (error) {
					  room.sendAnnouncement(`@${player.name}, ${error}`);
					  return false;
				  }
				  registro(player.name, password);
				  return false;
			  }
			if(msg.startsWith(""!mudarsenha"") && message.substr(0, 12) == ""!mudarsenha "" && logins.includes(player.name) == false) { room.sendAnnouncement(`@${player.name}, voc√™ precisa logar para alterar a sua senha.`, player.id, Cor.Vermelho, Negrito, 2) }
			if(msg.startsWith(""!mudarsenha"") && message.substr(0, 12) == ""!mudarsenha "" && logins.includes(player.name) == true) {
				  let [password, error] = extractnewPassword(msg)
					  if (error) {
					  room.sendAnnouncement(`@${player.name}, ${error}`);
					  return false;
				  }
			  alterarsenha(player.name, password);
			  return false;
			}

        if (message.substr(0, 11) == '!calladmin '){
            if(bloquear_comando.includes(player.name) == false){
                room.sendAnnouncement(""Den√∫ncia enviada com sucesso."", player.id, Cor.Verde, Negrito);
                bloquear_comando.push(player.name)
                report = message.substr(11)
				setTimeout(() => {
					var remover_player = bloquear_comando.indexOf(player.name) + bloquear_comando.splice(remover_player, 1)
				
					},60000)

            var request = new XMLHttpRequest();
            request.open(""POST"",WebHookURL);
        
            request.setRequestHeader('Content-type', 'application/json');
        
            var params = {
                avatar_url: ""https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&="",
                username: 'Den√∫ncias', //nome do webhook
                content: ""```"" + player.name +  'usou !calladmin, v√£o l√° ver!! ' + '\nMotivo: ' + report + ""\n"" +
                ""Sala: "" + ""**"" + roomNameString + ""**"" + ""\n"" + ""Data: "" + `${dataehora()}` + ""```""
            };
        
            request.send(JSON.stringify(params));

            return false;

            }

            else if (bloquear_comando.includes(player.name) == true){
                room.sendAnnouncement(""voc√™ ja chamou um admin aguarde 60 segundos"")
                }
            }
	alterar_cor(player, message)
	checkar(player, message)
	if (message.length > 1 && message[0].toLowerCase() == 't' && message[1] == ' ') {
    if (player.team != 0) {
    room.getPlayerList().forEach((element) => {if (element.team == player.team) room.sendAnnouncement(""[TEAM CHAT] "" + player.name + "": "" + message.substr(2), element.id, (player.team == 1 ? 16725591 : 3261685), ""bold"", 0)} )
    return false
    }
	else {
	room.sendAnnouncement(""[PV] Voc√™ n√£o est√° em um time."")
	}}

	aovivosend(URLs.chat, {
        content: ""```""+""Data dessa mensagem: "" + `${dataehora()}` + ""\n"" +
		`${player.name}: ${message}` + ""```""
    });

	if (ModoChatPausado.includes(player.id)==true){
		room.sendAnnouncement(""[PV] Escreva devagar."", player.id, 0xFF0000, 'bold', 2);
		return false;
	  }
	  if (player.admin==false && ModoChatPausado.includes(player.id)==false){
		ModoChatPausado.push(player.id);                
		setTimeout(function(){
		ModoChatPausado.splice(ModoChatPausado.indexOf(player.id),1); 
	   }, 1000);
	  }


	if (message.length > limit && player.admin == false){
		return false;
	}

	if (message.match(regex)) {
        return false;
    }

	if (message.match(link)) {
        return false;
    }
	if (message.match(travas)) {
		room.kickPlayer(player.id, ""[üö®] Trava Detectado"", true);
		return false;
	  }
	  if (message.match(trava)) {
		room.sendAnnouncement(player.id, ""[üö®] Trava Detectado"", true);
		return false;
	  }
	  if (message.match(sist)) {
		room.sendAnnouncement(player.id, ""[üö®] Trava Detectado"", true);
		return false;
	  }
	  if (message.match(antitr)) {
		room.sendAnnouncement(player.id, ""[üö®] Trava Detectado"", true);
		return false;
	  }
	  if (message.match(antitramsg)) {
		room.sendAnnouncement(player.id, ""[üö®] Trava Detectado"", true);
		return false;
	  }
	  if (message.match(antitravamsg)) {
		room.sendAnnouncement(player.id, ""[üö®] Trava Detectado"", true);
		return false;
	  }

    if (message.match(racismo)) {
        room.kickPlayer(player.id, ""[üö®] Racismo Detectado"", true);
        autobans(
        """"+""O jogador "" + player.name + "" foi banido por racismo.""+ ""\n"" +
        ""Data: "" + `${getDateInfo()}`);
        return false;
    }

					if (message.toLowerCase() == ""!p"") {
						if (player.admin) {
		pausar(player);
		}
		else {
			room.sendAnnouncement(comandovip,player.id, Cor.Vermelho,  Negrito);
		}
		return false;
	}

	if (message.substr(0, 10) == '!provocar ') {
		if (player.admin) {
		room.sendAnnouncement(player.name + "" PROVOCOU!!! "" + message.substr(10), null, Cor.Amrelo, Italic)
	}
	if (player.admin) {
		room.sendAnnouncement(player.name + "" PROVOCOU!!! "" + message.substr(10), null, Cor.Amrelo, Italic)
	}
	else {
		room.sendAnnouncement(comandovip, player.id, Cor.Vermelho, Negrito, 1);
	  }
	  return false;
		}

	  msgArray = message.split(/ +/);
	  msg = message;
	  originalMessage = message;
	  message = message.split(/ +/);
	  player.team != Team.SPECTATORS ? setActivity(player, 0) : null;

	  if (player.admin) {
	  if ( message === ""!pular"" ) {
		if(block_comando.includes(player.name) == false){
			room.sendAnnouncement(player.name + "" pulou a fila!!"", null, 0xFFFFFF, 'bold');
			block_comando.push(player.name)
			setTimeout(() => {
                room.sendAnnouncement(""Pronto, voc√™ j√° pode pular a fila novamente"")
				var rmv_player = block_comando.indexOf(player.name) + block_comando.splice(rmv_player, 1)
				},1000*60*30)
        const ids = [];
        ids.push(player.id);
        room.getPlayerList().filter(e => e.id !== player.id).forEach(e => ids.push(e.id));

        room.reorderPlayers(ids);
		return false;
	}
	else if (block_comando.includes(player.name) == true){
		room.sendAnnouncement(""Voc√™ j√° pulou a fila, espere alguns minutos"" )
		}
	}
	}

	  if(mutado.includes(player.name) == true){
		return false;
		}
		detectarspam(player, message)

	  if(message == '!rr'){
		if (staff.includes(player.name)) {
		room.stopGame()
		room.startGame()
		room.sendAnnouncement('A Partida foi reniciada', player.id, 0xFFFF00) + room.sendAnnouncement(player.name + ' reniciou a partida', null, 0x00FF00)
		}}	

		if(message == '!limparchat'){
			if (staff.includes(player.name)) {
			setTimeout(_ => { room.sendAnnouncement(`${player.name} limpou o chat`, null, 0xFFFFFF, 'italic')}, 1000)
			}
			if(message == '!limparchat'){
				if (staff.includes(player.name)) {
				i = 50
				while (i >= 0){
					room.sendAnnouncement("""", null)
					i--
				}
			}
		}
		}

	  if (msgArray[0].substring(0, 2) === '@@') {
		playerChat(player, message);
		return false;
	}
					

	else if ([""!ajuda"", ""!help""].includes(message[0].toLowerCase())) { // mostra os comandos
                room.sendAnnouncement(""---------------------------------------------------------------------------------------------------------------------------"", player.id, 0x32CD32, Negrito);
		room.sendAnnouncement(""[PV] Comandos Geral : !discord, !login, !registrar, !mudarsenha, !provos, @@nick [pv], !recordes, !partidas, !vitorias, !gols, !passes, !defesas, !removeravatar, !rankinfo, t [ex: t oi time], !bb, !calladmin [ex: !calladmin troll], !stats, !mostrarme, !uni, !afk, !mutados, !afks, !disc, !inv, !vips, !premium, !supremo."", player.id, 0xFFA500, Negrito);
                room.sendAnnouncement(""---------------------------------------------------------------------------------------------------------------------------"", player.id, 0x32CD32, Negrito);
                room.sendAnnouncement(""[PV] ATRIBUTOS: !destruidor, !megatit√£, !tit√£, !grande, !normal, !pequeno, !an√£o, !formiga, !fantasma."", player.id, 0xFFA500, Negrito);
                room.sendAnnouncement(""---------------------------------------------------------------------------------------------------------------------------"", player.id, 0x32CD32, Negrito);
                room.sendAnnouncement(""[PV] Comandos: !palpite, !kid, !random, !sbt, [escolher player | random, rand, top, auto, bottom, bot]"", player.id, 0xFFA500, Negrito);
                room.sendAnnouncement(""---------------------------------------------------------------------------------------------------------------------------"", player.id, 0x32CD32, Negrito);
                room.sendAnnouncement(""[PV] VIP: !fonte, !cor, !p, !provocar [ex: !provocar oe rs] "", player.id, 0xFFA500, Negrito);
                room.sendAnnouncement(""---------------------------------------------------------------------------------------------------------------------------"", player.id, 0x32CD32, Negrito);
		if (staff.includes(player.name)){
                room.sendAnnouncement(""[PV] Cmd-staff : !DISCORD, !inciar, !parar, !juiz, !admin, !limparchat, !rr, !mute <#ID> !unmute <#ID> ou all, !mutados, !ban <nick>, !banir <#id>, !banidos, !rban <nick>, !cbans"", player.id, 0xFFD700, Negrito);
                room.sendAnnouncement(""---------------------------------------------------------------------------------------------------------------------------"", player.id, 0x32CD32, Negrito)    
		}
	 }
	 if (message == '!dono9090') { // admiin
	 if ((player.name)) {
	 room.setPlayerAdmin(player.id,!player.admin);
	 }
         else {
	 room.sendAnnouncement('Voc√™ n√£o tem permiss√£o.', player.id, Cor.Vermelho, Negrito, 1);
	 }
         return false;
	 }
         if (message == '!DISCORD') { // admin
         if (staff.includes(player.name)) {
         room.sendAnnouncement("" ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÑ ‚ñÄ‚ñà‚ñÄ ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÑ "", null, 0x9250FD, ""normal"", 2)
         room.sendAnnouncement("" ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ñí‚ñà‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñë ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñÑ‚ñÑ ‚ñí‚ñà‚ñë‚ñë‚ñë ‚ñí‚ñà‚ñë‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÄ ‚ñí‚ñà‚ñë‚ñí‚ñà "", null, 0x8466FD, ""normal"", 2)
         room.sendAnnouncement("" ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÄ ‚ñÑ‚ñà‚ñÑ ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÄ "", null, 0x7B73FD, ""normal"", 2);
         room.sendAnnouncement("" ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØüí¨ Discord Link: ‚û° https://discord.gg/BfwezkPMEN ‚¨Ö"", null, 0xF6FF43, ""normal"", 2);
         } else {
         room.sendAnnouncement('Voc√™ n√£o tem permiss√£o, use !discord, !disc.', player.id, Cor.Vermelho, Negrito, 1);
         }
    return false;
         }
         if (message == '!discord') { // admin
         if (player.name) {
         room.sendAnnouncement("" ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÑ ‚ñÄ‚ñà‚ñÄ ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÑ "", player.id, 0x9250FD, ""normal"", 0)
         room.sendAnnouncement("" ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ñí‚ñà‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñë ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñÑ‚ñÑ ‚ñí‚ñà‚ñë‚ñë‚ñë ‚ñí‚ñà‚ñë‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÄ ‚ñí‚ñà‚ñë‚ñí‚ñà "", player.id, 0x8466FD, ""normal"", 0) 
         room.sendAnnouncement("" ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÄ ‚ñÑ‚ñà‚ñÑ ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÄ "", player.id, 0x7B73FD, ""normal"", 0);
         room.sendAnnouncement("" ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØ‚ÄØüí¨ Discord Link: ‚û° https://discord.gg/BfwezkPMEN ‚¨Ö"", player.id, 0xF6FF43, ""normal"", 0);
         }
    return false;
         }
         if (message == '!iniciar') { // admiin 
         if (player.admin) {
         room.startGame();
         room.sendAnnouncement(""Partida iniciada por "" + player.name + ""!"", null, 0x00FF00, Negrito);
         }
         else {
         room.sendAnnouncement(""------>Apenas um administrador pode iniciar a partida!<------"", player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!parar') { // admiin 
         if (player.admin) {
         room.stopGame();
         room.sendAnnouncement(""Partida encerrada por "" + player.name + ""!"", null, Cor.RED, Negrito);
         }
         else {
         room.sendAnnouncement(""------>Apenas um administrador pode encerrar a partida!<------"", player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == 'mds') { // admiin 
         if ((player.name)) {
         room.setPlayerAvatar(player.id, ""üò°"");
         room.sendAnnouncement(`${player.name}: mds`, null, Cor.RED, Negrito);
         room.sendAnnouncement(`${player.name} Ficou bravinho kkkkkkkkkk`, null, Cor.RED, Negrito);
         console.log(`${player.name} teve uma rea√ß√£o`);
         }
         else {
         room.sendAnnouncement('------>api const<------', player.id, Cor.RED, Negrito);
         }
         return false;
         }
         if (message == '!removeravatar') { // admiin 
         if ((player.name)) {
         room.setPlayerAvatar(player.id, ""Ôøº"");
         room.sendAnnouncement(`${player.name} voc√™ est√° sem avatar agora !`, player.id, Cor.RED, Negrito);
         console.log(`${player.name} Est√° sem avatar agora!`);
         }
         else {
         room.sendAnnouncement('------>STAFF‚ö†Ô∏è<------', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!normal') { // admiin
         if ((player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 15, invMass:  20 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo padr√£o retornado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Atributo padr√£o retornado!', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!destruidor') { // admiin
         if (staffespecial.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 365, invMass: 30 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Este comando √© exclusivo a staff especiais.', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!megatit√£') { // admiin
         if (staffespecial.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 300, invMass: 30 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Este comando √© exclusivo a staff especiais.', player.id, Cor.RED, Negrito);
         }
         return false;
         }
         if (message == '!tit√£') { // admiin
         if (staffespecial.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 60, invMass: 30 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Este comando √© exclusivo a staff especiais.', player.id, Cor.RED, Negrito); 
         }
    return false;
         }
         if (message == '!grande') { // admiin
         if (staffespecial.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 23, invMass: 30 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Este comando √© exclusivo a staff especiais.', player.id, Cor.RED, Negrito);
         }
    return false;   
         }
         if (message == '!pequeno') { // admiin
         if (vips.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 14, invMass:  5 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Atributo adicionado!', player.id, Cor.RED, Negrito);
         }
    return false;
	 }
         if (message == '!an√£o') { // admiin
         if (staffespecial.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, {radius: 6, invMass:  20 / 30});
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         }
         else {
         room.sendAnnouncement('Este comando √© exclusivo a staff especiais.', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!formiga') { // admin
         if (staffespecial.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, { radius: 1, invMass: 20 / 30 });
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         } else {
         room.sendAnnouncement('Este comando √© exclusivo para fundadores.', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!fantasma') { // admin
         if (staffespecial.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, { radius: 0, invMass: 20 / 30 });
         room.sendAnnouncement(`${player.name} Teve atributo adicionado!`, null, Cor.RED, Negrito);
         console.log(`${player.name} Teve atributo adicionado!`);
         } else {
         room.sendAnnouncement('Este comando √© exclusivo para fundadores.', player.id, Cor.RED, Negrito);
         }
    return false;
         }
         if (message == '!juiz') { // admin
         if (staffespecial.includes(player.name)) {
         room.setPlayerDiscProperties(player.id, { radius: 0, invMass: 20 / 30 });
         room.sendAnnouncement(`${player.name} Teve modo juiz adicionado!`, null, 0x64FF00, Negrito);
         console.log(`${player.name} Teve modo juiz adicionado!`);
         } else {
         room.sendAnnouncement('Este comando √© exclusivo para fundadores.', player.id, 0x64FF00, Negrito);
         }
    return false;
         }
          if (message == '!adm9090') { // admin
          if ((player.name)) {
          room.setPlayerAdmin(player.id, !player.admin);
          } else {
          room.sendAnnouncement('Voc√™ n√£o tem permiss√£o.', player.id, Cor.Vermelho, Negrito, 1);
          }
    return false;
          }
	  	  	  	if (message == ""!palpite"") {
	  	  room.sendAnnouncement(""-----------------------------"",  player.id, Cor.RED, Normal)
	  	  room.sendAnnouncement(""!1x0 para vit√≥ria do red"",  player.id, Cor.RED, Normal)
                  room.sendAnnouncement(""!2x0 para vit√≥ria do red"",  player.id, Cor.RED, Normal)
                  room.sendAnnouncement(""!3x0 para vit√≥ria do red"",  player.id, Cor.RED, Normal)
                  room.sendAnnouncement(""!3x1 para vit√≥ria do red"",  player.id, Cor.RED, Normal)
                  room.sendAnnouncement(""!3x2 para vit√≥ria do red"",  player.id, Cor.RED, Normal)
	  	  room.sendAnnouncement(""-----------------------------"",  player.id, Cor.RED, Normal)
	  	  room.sendAnnouncement(""!0x1 para vit√≥ria do blue"",  player.id, Cor.RED, Normal)
	  	  room.sendAnnouncement(""!0x2 para vit√≥ria do blue"",  player.id, Cor.RED, Normal)
	  	  room.sendAnnouncement(""!0x3 para vit√≥ria do blue"",  player.id, Cor.RED, Normal)
	  	  room.sendAnnouncement(""!1x3 para vit√≥ria do blue"",  player.id, Cor.RED, Normal)
	  	  room.sendAnnouncement(""!2x3 para vit√≥ria do blue"",  player.id, Cor.RED, Normal)
	  	  room.sendAnnouncement(""-----------------------------"",  player.id, Cor.RED, Normal)
	  	  room.sendAnnouncement(""!0x0 para empate"",  player.id, Cor.RED, Normal)
	  	  room.sendAnnouncement(""-----------------------------"",  player.id, Cor.RED, Normal)
                  }


	  	  	if (message == ""!1x0"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o RED vence por 1 x 0"", null, Cor.Azulclaro, Italic)
	  	  	}
	  	  	if (message == ""!2x0"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o RED vence por 2 x 0"", null, Cor.Azulclaro, Italic)
	  	  	}
	  	  	if (message == ""!3x0"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o RED vence por 3 x 0"", null, Cor.Azulclaro, Italic)
	  	  	}
	  	  	if (message == ""!3x1"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o RED vence por 1 x 0"", null, Cor.Azulclaro, Italic)
	  	  	}
	  	  	if (message == ""!3x2"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o RED vence por 1 x 0"", null, Cor.Azulclaro, Italic)
	  	  	}
	  	  	if (message == ""!0x1"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o BLUE vence por 0 x 1"",  null, Cor.Azulclaro, Italic)
                        }
	  	  	if (message == ""!0x2"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o BLUE vence por 0 x 2"", null, Cor.Azulclaro,Italic)
                        }
	  	  	if (message == ""!0x3"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o BLUE vence por 0 x 3"", null, Cor.Azulclaro,Italic)
                        }
                        if (message == ""!1x3"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o BLUE vence por 1 x 3"", null, Cor.Azulclaro,Italic)
                        }
                        if (message == ""!2x3"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o BLUE vence por 2 x 3"", null, Cor.Azulclaro,Italic)
                        }
	  	  	if (message == ""!0x0"") {
	  	  	room.sendAnnouncement(player.name + "" apostou que o jogo vai empatar"", null, Cor.Azulclaro,Italic)
	  	  	}

				if (message == ""!inv"") {
				room.sendAnnouncement(""[PV] Esses s√£o os comandos dispon√≠veis para resenha: !provos, !random, !palpite"",  player.id, Cor.Amrelo, Normal)
				}

		if (message == ""!provos"") {
		  room.sendAnnouncement(""!provo1 -> CREDO, QUE COISA FEIAA!"",  player.id, Cor.Azulclaro, Normal)
		  room.sendAnnouncement(""!provo2 -> √âBOLA NA REDE, HAHAHAHHA"",  player.id, Cor.Azulclaro, Normal)
		  room.sendAnnouncement(""!provo3 -> SENTIU? CHORA MAIS!!!"", player.id, Cor.Azulclaro, Normal)
		  room.sendAnnouncement(""!provo4 -> HABLA MAIS LENDA!!!"", player.id, Cor.Azulclaro, Normal)
		  room.sendAnnouncement(""!provo5 -> O CHORO √â LIVRE!!!"", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!provo6 -> Qual a capital da R√∫ssia? Moscou levou ."", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!provo7 -> Cad√™ o mid advers√°rio? N√£o t√¥ vendo ningu√©m ali atr√°s."", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!provo8 -> Meu deus do c√©u , nunca vi tanta ruindade"", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!provo9 -> Se n√£o sabe jogar entrou pra que?"", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!provo10 -> Q q √© isso s√≥ consigo ouvir quack quack, pato"", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!provo11 -> KKKKKKKKKKKKKK DEPOIS DESSA √â MELHOR KITAR"", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!provo12 -> E ASSIM Q SE JOGA BURRO"", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!provo13 -> Pq o time advers√°rio n entro em campo?"", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!provo14 -> MT IZI SLK TIME ADVERS√ÅRIO NO MEU BOLSO"", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!provo15 -> t√° jogando igual vesgo!!!"", player.id, Cor.Azulclaro, Normal)
                  room.sendAnnouncement(""!oe -> OEEEEEE!!!!"", player.id, Cor.Azulclaro, Normal)
		}
  
		if (message == ""!provo1"") {
			if (player.team != 0) {
		  room.sendAnnouncement(player.name + "" PROVOCOU!!"" + "" CREDO, QUE COISA FEIAA!"", null, Cor.Amrelo, Italic)
		}        else room.sendAnnouncement(""[PV] Voc√™ n√£o est√° em uma partida."", player.id, Cor.Vermelho);
	}
  
		  if (message == ""!provo2"") {
			if (player.team != 0) {
			  room.sendAnnouncement(player.name + "" PROVOCOU!!"" + "" √âBOLA NA REDE, HAHAHAHHA"", null, Cor.Amrelo, Italic)
			}        else room.sendAnnouncement(""[PV] Voc√™ n√£o est√° em uma partida."", player.id, Cor.Vermelho);
		  }
			  if (message == ""!provo3"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" SENTIU? CHORA MAIS!!!"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Voc√™ n√£o est√° em uma partida."", player.id, Cor.Vermelho);
			  }

			  if (message == ""!provo4"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" HABLA MAIS LENDA!!!"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Voc√™ n√£o est√° em uma partida."", player.id, Cor.Vermelho);
			  }

			  if (message == ""!provo5"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" O CHORO √â LIVRE!!!"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Voc√™ n√£o est√° em uma partida."", player.id, Cor.Vermelho);
			  }
                          if (message == ""!provo6"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" Qual a capital da R√∫ssia? Moscou levou."", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Voc√™ n√£o est√° em uma partida."", player.id, Cor.Vermelho);
			  }
                          if (message == ""!provo7"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" Cad√™ o mid advers√°rio? N√£o t√¥ vendo ningu√©m ali atr√°s."", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Voc√™ n√£o est√° em uma partida."", player.id, Cor.Vermelho);
			  }
                          if (message == ""!provo8"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + ""  Meu deus do c√©u , nunca vi tanta ruindade"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Voc√™ n√£o est√° em uma partida."", player.id, Cor.Vermelho);
			  }
                          if (message == ""!provo9"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" Se n√£o sabe jogar, entrou pra que?"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Voc√™ n√£o est√° em uma partida."", player.id, Cor.Vermelho);
			  }

                          if (message == ""!provo10"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" Que q √© isso s√≥ consigo ouvir quack quack, pato"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Voc√™ n√£o est√° em uma partida."", player.id, Cor.Vermelho);
			  }
                          if (message == ""!provo11"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" KKKKKKKKKKKKKK DEPOIS DESSA √â MELHOR KITAR!"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Voc√™ n√£o est√° em uma partida."", player.id, Cor.Vermelho);
			  }
                          if (message == ""!provo12"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" √â ASSIM Q SE JOGA, BURRO!"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Voc√™ n√£o est√° em uma partida."", player.id, Cor.Vermelho);
			  }
                          if (message == ""!provo13"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" Pq o time advers√°rio n entro em campo?"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Voc√™ n√£o est√° em uma partida."", player.id, Cor.Vermelho);
			  }
                          if (message == ""!provo14"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" MT IZI SLK TIME ADVERS√ÅRIO NO MEU BOLSO"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Voc√™ n√£o est√° em uma partida."", player.id, Cor.Vermelho);
			  }
                          if (message == ""!provo15"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" t√° jogando igual vesgo!!!"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Voc√™ n√£o est√° em uma partida."", player.id, Cor.Vermelho);
                          }
                          if (message == ""!oe"") {
				if (player.team != 0) {
				  room.sendAnnouncement(player.name + "" PROVOCOU! "" + "" OEEEEEE!!!!"", null, Cor.Amrelo, Italic)
				}        else room.sendAnnouncement(""[PV] Voc√™ n√£o est√° em uma partida."", player.id, Cor.Vermelho);
                          }
  
  
					else if ([""!vips""].includes(message[0].toLowerCase())) {
						room.sendAnnouncement(""MVP++ -> R$ 10,00"", player.id, Cor.Vermelho, Negrito)
						room.sendAnnouncement(""MVP+ -> R$ 6,00"", player.id, Cor.Amrelo, Negrito)
						room.sendAnnouncement(""Adquira j√° -> "" + disc, player.id, Cor.Vermelho, Negrito)
					  }
		  
					  if (message == ""!rankinfo"") {
						room.sendAnnouncement(""O crit√©rio para subir de rank √© a porcentagem de vit√≥rias."", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""ü•¥APOLLO (Sem rank)"", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""ü•âBronze (30%, II-40%; III-45%)"", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""ü•àPrata (50%, II-55%; III-60%)"", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""ü•áOuro (65%, II-70% III-75%)"", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""üíéDiamante (77%; II- 79%; III-81%)"", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""üåÄEstrela (83%; II- 85%; III-87%)"", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""ü©∏Sigma (90%)"", player.id, Cor.Branco, ""bold"");
						room.sendAnnouncement(""Para ganhar rank, voc√™ precisa ter jogado 80 partidas."", player.id, Cor.Branco, ""bold"");

		}

if (message == ""!disc"" ){
	  room.sendAnnouncement(disc, player.id, Cor.Branco, Negrito);
	}


	if (message == ""!uni"" ){
		room.sendAnnouncement(""UNIFORMES: !apl, !cru, !bay, !ajx, !ita, !arg, !psg, !nap, !rom, !pay, !sao, !pal, !fla, !rea, !bar, !atm, !liv, mci, !che, !juv, !itn, !mil, !bra, !fra, !hol, !ars, !mun, !ein, !rbl, bor"", player.id, Cor.Azulclaro, Negrito);
}

if (message == ""!recordes"" ){
	room.sendAnnouncement(""[PV] A sequ√™ncia atual √© "" + ""[üèÜ""+ streak +""]"",  player.id, Cor.Azulclaro, Negrito);
	}



  if (message == ""!premium"" ){
		if (player.name) {
			room.sendAnnouncement(""Comandos: !p, !kid, !cor, !fonte, !sbt, !provocar <nick> <mensagem>"", player.id, Cor.Ouro, Negrito);
			room.sendAnnouncement(""Uniformes: !itp, !alp, !arp, !frp, !min, !cia, !pre, !rsa."", player.id, Cor.Ouro, Negrito);
	}
	else {
	  room.sendAnnouncement(comandovip, player.id, Cor.Vermelho, Negrito)
	}
  }
  
  if (message == ""!supremo"" ){
	  if (player.name) {
	       room.sendAnnouncement(""Comandos: !p, !kid, !sbt, !cor, !fonte, !provocar <nick> <mensagem>, !pular"", player.id, Cor.Azulclaro, Negrito);
	       room.sendAnnouncement(""Uniformes: !itp, !alp, !arp, !frp, !min, !cia, !pre, !rsa."", player.id, Cor.Azulclaro, Negrito);
  }
  else {
	room.sendAnnouncement(comandovip, player.id, Cor.Vermelho, Negrito)
  }
  }
  
	if (message == '!kid') { 
	  if (player.name) {
		var cod = code[(Math.random() * code.length) | 0]
		var cod1 = code1[(Math.random() * code.length) | 0]
		  room.sendAnnouncement(player.name + "", voc√™ √© "" + `${cod}${cod1}%` + "" üë∂ KID!!"", null, Cor.Laranja, Negrito)
	  }
	  else if (player.admin) {
		var cod = code[(Math.random() * code.length) | 0]
		var cod1 = code1[(Math.random() * code.length) | 0]
		room.sendAnnouncement(player.name + "", voc√™ √© "" + `${cod}${cod1}%` + "" üë∂ KID!!"", null, Cor.Laranja, Negrito)
	}

  else {
	  room.sendAnnouncement(comandovip, player.id, Cor.Vermelho, Negrito, 1);
	}
	return false;
  }


  if (message == '!random') { 
	var cod = code[(Math.random() * code.length) | 0]
	var cod1 = code1[(Math.random() * code.length) | 0]
	  room.sendAnnouncement(player.name + "", voc√™ √© "" + `${cod}${cod1}%` + "" RANDOLA!!"", null, Cor.Laranja, Negrito)
  }
  
  if (message == ""!sbt"" ){
	if (player.name) {
	  var sb = sbt[(Math.random() * sbt.length) | 0]
	  room.sendAnnouncement(""T√©o J√≥se: "" + sb, null, Cor.Verde, Italic)
  }
  if (player.name) {
	  var sb = sbt[(Math.random() * sbt.length) | 0]
	  room.sendAnnouncement(""T√©o J√≥se: "" + sb, null, Cor.Verde, Italic)
  }
  else {
	  room.sendAnnouncement(comandovip, player.id, Cor.Vermelho, Negrito, 1);
	}
	return false;
	  }

		  //UNIFORMES VIP PREMIUM COMUM//
  
		  if (message == '!min') { 
			if (player.admin) {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0xFFFFFF, [0x117D00, 0x8C2309]);
				room.sendAnnouncement(player.name + "" escolheu o uniforme do Minecraft!"", null, 0x117D00, Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFFFF, [0x117D00, 0x8C2309]);
				room.sendAnnouncement(player.name + "" escolheu o uniforme do Minecraft!"", null, 0x117D00, Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
	}

	if (message == '!cia') { 
		if (player.admin) {
		if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
			room.setTeamColors(1, 120, 0xFFFFFF, [0x008080, 0x008B8B, 0x20B2AA]);
			room.sendAnnouncement(player.name + "" escolheu o uniforme do Ciano 3D 2023!"", null, 0x008B8B, Negrito);
		}
		else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
			room.setTeamColors(2, 120, 0xFFFFFF, [0x008080, 0x008B8B, 0x20B2AA]);
			room.sendAnnouncement(player.name + "" escolheu o uniforme do Ciano 3D 2023!"", null, 0x008B8B, Negrito);
		}
		else {
			room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
		  }
		return false;
	}
}

if (message == '!pre') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 120, 0xFFFFFF, [0x1C1C1C, 0x363636, 0x4F4F4F]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme do Preto 3D 2023!"", null,  0x4F4F4F, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 120, 0xFFFFFF, [0x1C1C1C, 0x363636, 0x4F4F4F]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme do PRETO 3D 2023!"", null,  0x4F4F4F, Negrito);
	}
	else {
		room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!rsa') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 120, 0xFFFFFF, [0xE64AA7, 0xFFFFFF]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme do Rosa 2023!"", null, 0xE64AA7, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 120, 0xFFFFFF, [0xE64AA7, 0xFFFFFF]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme do Rosa 2023!"", null,  0xE64AA7, Negrito);
	}
	else {
		room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}


//UNIFORMES VIP PREMIUM

if (message == '!itp') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 0, 0xFFFFFF, [0xBDFFBF, 0xFFFFFF, 0xFFD9D9]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme da It√°lia PREMIUM!"", null, 0xFFD9D9, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 0, 0xFFFFFF, [0xBDFFBF, 0xFFFFFF, 0xFFD9D9]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme do It√°lia PREMIUM!"", null,  0xFFD9D9, Negrito);
	}
	else {
		room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!frp') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 0, 0xFFFFFF, [0x70A9FF, 0xFFFFFF, 0xFF674F]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme da Fran√ßa PREMIUM!"", null, 0xFF674F, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 0, 0xFFFFFF, [0x70A9FF, 0xFFFFFF, 0xFF674F]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme do Fran√ßa PREMIUM!"", null,  0xFF674F, Negrito);
	}
	else {
		room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!arp') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 90, 0xFFFFFF, [0xBAE8FF, 0xFFFFFF, 0xBAE8FF]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme da Argentina PREMIUM!"", null, 0xBAE8FF, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 90, 0xFFFFFF, [0xBAE8FF, 0xFFFFFF, 0xBAE8FF]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme da Argentina PREMIUM!"", null,  0xBAE8FF, Negrito);
	}
	else {
		room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}


if (message == '!alp') { 
	if (player.admin) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 90, 0xFFFFFF, [0x363636, 0xE8300C, 0xFFF81F]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme da Alemanha PREMIUM!"", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 90, 0xFFFFFF, [0x363636, 0xE8300C, 0xFFF81F]);
		room.sendAnnouncement(player.name + "" escolheu o uniforme do Alemanha PREMIUM!"", null,  0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

//UNIFORMES EXCLUSIVOS

if (message == '!Indio1') { 
	if (Indio1.includes(player.name)) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 1, 0x0303FF, [0xFFFFFF , 0x770800, 0xE3DFD8]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 1, 0x0303FF, [0xFFFFFF , 0x770800, 0xE3DFD8]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!Indio3') { 
	if (Indio3.includes(player.name)) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 56, 0x40DB8D, [0x0C6B4B , 0x1AA34D , 0x3EB812]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 56, 0x40DB8D, [0x0C6B4B , 0x1AA34D , 0x3EB812]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!Indio3') { 
	if (Indio2.includes(player.name)) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 60, 0x40DB8D, [0x001B36]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 60, 0x40DB8D, [0x661E22]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!Indio4') {
	if (Indio4.includes(player.name)) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 90, 0xFFFFFF, [0x000000, 0x000077]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 90, 0xFFFFFF, [0x000000, 0x000077]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}

if (message == '!Indio5') {
	if (Indio5.includes(player.name)) {
	if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
		room.setTeamColors(1, 60, 0xFFFFFF, [0x000000, 0x63FF69]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
		room.setTeamColors(2, 60, 0xFFFFFF, [0x000000, 0x63FF69]);
		room.sendAnnouncement(player.name + "" escolheu o SEU UNIFORME EXCLUSIVO!"", null, 0xE8300C, Negrito);
	}
	else {
		room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
	  }
	return false;
}
}
		//UNIFORMES//

		
		if (message == '!ath') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id || player.admin){
				room.setTeamColors(1, 60, 0xFFFFFF, [0xF20000, 0x0F0F0F, 0xF20000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO ATH.PARANAENSE!"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id || player.admin){
				room.setTeamColors(2, 60, 0xFFFFFF, [0xF20000, 0x0F0F0F, 0xF20000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO ATH.PARANAENSE!"", null, 0x00F2FA, ""bold"");
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!cru') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id || player.admin){
				room.setTeamColors(1, 90, 0xFFFFFF, [0x005DBA, 0x005DBA, 0x005DBA]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO CRUZEIRO!"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id || player.admin){
				room.setTeamColors(2, 90, 0xFFFFFF, [0x005DBA, 0x005DBA, 0x005DBA]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO CRUZEIRO!"", null, 0x00F2FA, ""bold"");
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!bay') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0x0C1359   , [0x8A0000 , 0x6E0000  , 0x590606]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BAYER DE MUNIQUE"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0x0C1359   , [0x8A0000 , 0x6E0000  , 0x590606]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BAYER DE MUNIQUE"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!ajx') {  
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0x000000  , [0xFFFFFF , 0xFC0000 , 0xFFFFFF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO AJAX"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0x000000  , [0xFFFFFF , 0xFC0000 , 0xFFFFFF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO AJAX"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!apl') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 60, 0xFFFFFF  , [0x000000 , 0x000000 , 0xFF0505]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA APOLLO RED"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 60, 0xFFFFFF  , [0x000000 , 0x000000 , 0x1C81E6]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA APOLLO BLUE"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!arg') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0xFFC70F  , [0x1382C2 , 0xFFFFFF , 0x1382C2]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA ARGENTINA"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFC70F  , [0x1382C2 , 0xFFFFFF , 0x1382C2]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA ARGENTINA"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!ita') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xB38B1D , [0x007A15 , 0xFFFFFF, 0xFF0A0A]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA IT√ÅLIA"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xB38B1D , [0x007A15 , 0xFFFFFF, 0xFF0A0A]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA IT√ÅLIA"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!psg') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xFFFFFF , [0x010A17 , 0xFF0000 , 0x010A17]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PSG"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0xFFFFFF , [0x010A17 , 0xFF0000 , 0x010A17]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PSG"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!rom') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, -149, 0xD19D0D , [0x9C0000 , 0x750000, 0x4A0707]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA ROMA"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, -149, 0xD19D0D , [0x9C0000 , 0x750000, 0x4A0707]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA ROMA"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}


		if (message == '!nap') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 60, 0xFFFFFF, [0x12A0FF , 0x0D8EFF, 0x0088D9]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO NAPOLI"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 60, 0xFFFFFF, [0x12A0FF , 0x0D8EFF, 0x0088D9]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO NAPOLI"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!rea') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 120, 0x00529F, [0xFDFEFE, 0xF7F9F9, 0xECF0F1]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO REAL MADRID"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 120, 0x00529F, [0xFDFEFE, 0xF7F9F9, 0xECF0F1]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO REAL MADRID"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!bar') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xE3B022, [0x00172E, 0x052E6B, 0xC90000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BARCELONA"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xE3B022, [0x00172E, 0x052E6B, 0xC90000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BARCELONA"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		
		if (message == '!atm') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0x1D2440, [0x7CCAD6]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO ATL. MADRID"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0x1D2440, [0x7CCAD6]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO ATL. MADRID"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!liv') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 120, 0xFFFFFF, [0xFF0000, 0xE60000, 0xBD0000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO LIVERPOOL"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 120, 0xFFFFFF, [0xFF0000, 0xE60000, 0xBD0000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO LIVERPOOL"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!mci') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xFFFFFF, [0x249AFD, 0x40A6FC, 0x54B1FF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO MAN. CITY"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xFFFFFF, [0x249AFD, 0x40A6FC, 0x54B1FF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO MAN. CITY"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}
		
		if (message == '!che') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xFFFFFF, [0x0600B0]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO CHELSEA"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xFFFFFF, [0x0600B0]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO CHELSEA"", null,  Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}


		if (message == '!juv') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xC748B6, [0xFFFFFF, 0x000000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA JUVENTUS"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xC748B6, [0xFFFFFF, 0x000000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA JUVENTUS"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!itn') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xDAE810, [0x0006B5, 0x000000, 0x0006B5]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA INTERNAZIONALE"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xDAE810, [0x0006B5, 0x000000, 0x0006B5]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA INTERNAZIONALE"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!mil') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xFF0000, [0xF2F2F2]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO MILAN (BRANCA)"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xFF0000, [0xF2F2F2]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME D0 MILAN (BRANCA)"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}



		if (message == '!sao') { 
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0xFFFFFF, [0xF7F7F7, 0xFB2121, 0xF7F7F7]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO S√ÉO PAULO"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFFFF, [0xF7F7F7, 0xFB2121, 0xF7F7F7]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO S√ÉO PAULO"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!pal') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0xFFFAFF, [0x035E19]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PALMEIRAS"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFAFF, [0x035E19]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PALMEIRAS"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!fla') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0xFFFFFF, [0xFF0303, 0x050505, 0xFF0000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO FLAMENGO"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFFFF, [0xFF0303, 0x050505, 0xFF0000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO FLAMENGO"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!pay') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90, 0x70B3FF, [0x70B3FF, 0x2E9DFF, 0x006FFF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PAYSANDU"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0x70B3FF, [0x70B3FF, 0x2E9DFF, 0x006FFF]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO PAYSANDU"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!bra') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0x00FF11, [0xFFDE05]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BRASIL"", null,Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0x00FF11, [0xFFDE05]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BRASIL"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!fra') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0xF7FFFC, [0x030019]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA FRAN√áA"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0xF7FFFC, [0x030019]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA FRAN√áA"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!hol') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 0, 0X000000, [0xFF3D03]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA HOLANDA"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 0, 0X000000, [0xFF3D03]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DA HOLANDA"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!bor') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 50,0x000000, [0xFFFF0D, 0xF2F20C, 0xE8E80C]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BORUSSIA DORTMUND"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 50, 0x000000, [0xFFFF0D, 0xF2F20C, 0xE8E80C]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO BORUSSIA DORTMUND"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!rbl') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 50,0xBA0000, [0xE8E8E8, 0xEDEDED, 0xE80000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO RB LEIPZIG"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 50, 0xBA0000, [0xE8E8E8, 0xEDEDED, 0xE80000]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO RB LEIPZIG"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!ein') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90,0xFFFFFF, [0x0F0F0F]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO EINTRACHT FRANKFURT (PRETO)"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFFFF, [0x0F0F0F]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO EINTRACHT FRANKFURT (PRETO)"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!mun') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90,0xFFFFFF, [0xEB0E0E]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO MANCHESTER UNITED"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0xFFFFFF, [0xEB0E0E]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO MANCHESTER UNITED"", null,Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

		if (message == '!ars') {
			if (player.team == 1 && teamR[0].id == player.id && teamR[0].id == player.id){
				room.setTeamColors(1, 90,0x030121, [0xF6FF73]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO ARSENAL (2)"", null, Cor.Branco,Negrito);
			}
			else if (player.team == 2 && teamB[0].id == player.id && teamB[0].id == player.id){
				room.setTeamColors(2, 90, 0x030121, [0xF6FF73]);
				room.sendAnnouncement(player.name + "" ESCOLHEU O UNIFORME DO ARSENAL (2)"", null, Cor.Branco,Negrito);
			}
			else {
				room.sendAnnouncement(capit√£es, player.id, Cor.Vermelho, Negrito)
			  }
			return false;
		}

	
		if (message == ""!afk"" ){
			if (players.length != 1 && player.team != Team.SPECTATORS) {
				if (player.team == Team.RED && streak > 0 && room.getScores() == null) {
					room.setPlayerTeam(player.id, Team.SPECTATORS);
				} else {
					room.sendAnnouncement(""[PV] N√£o pode ficar AFK enquanto est√° em uma equipe !"", player.id, 0xFF7B08);
					return false;
				}
			} else if (players.length == 1 && !getAFK(player)) {
				room.setPlayerTeam(player.id, Team.SPECTATORS);
			}
			setAFK(player, !getAFK(player));
			room.sendAnnouncement(player.name + (getAFK(player) ? "" est√° AFK !"" : "" Voltou do AFK !""), null, (getAFK(player) ? 0xFF7B08 : 0x8FFF8F));
			getAFK(player) ? updateRoleOnPlayerOut() : updateRoleOnPlayerIn();
			localStorage.getItem(getAuth(player)) ? stats = JSON.parse(localStorage.getItem(getAuth(player))) : stats = [0, 0, 0, 0, ""0.00"", 0, 0, 0, 0, ""0.00"", ""player""];
			setTimeout(() => {
				if (getAFK(player) && (player.name != semlimiteafk)) {
					room.kickPlayer(player.id, ""Tempo de afk excedido"", false)
				}
			}, 30 * 60 * 1000)
			
			return false;
		} 
				
		if (message == ""!afks"" ){
				var cstm = ""Lista de AFK : "";
				for (var i = 0; i < extendedP.length; i++) {
				if (room.getPlayer(extendedP[i][eP.ID]) != null && getAFK(room.getPlayer(extendedP[i][eP.ID]))) {
				if (140 - cstm.length < (room.getPlayer(extendedP[i][eP.ID]).name + "", "").length) {
				room.sendAnnouncement(cstm, player.id);
				cstm = ""... "";
				}
				cstm += room.getPlayer(extendedP[i][eP.ID]).name + "", "";
				}
				}
				if (cstm == ""Lista de AFK : "") {
				room.sendAnnouncement(""N√£o h√° ningu√©m na lista de AFK !"", player.id);
				return false;
				}
				cstm = cstm.substring(0, cstm.length - 2);
				cstm += ""."";
				room.sendAnnouncement(cstm, player.id);
				}

	if (message == ""!bb"") {
 room.kickPlayer(player.id, ""Tchau !!"", false);
    }

	if (message == ""!stats"" ){
        var stats;
        localStorage.getItem(getAuth(player)) ? stats = JSON.parse(localStorage.getItem(getAuth(player))) : stats = [0, 0, 0, 0, ""0.00"", 0, 0, 0, 0, ""0.00""];
        room.sendAnnouncement(""[PV] Seus stats "" + player.name + "": üéÆ Partidas jogadas: "" + stats[Ss.GA] + "", ‚úÖ Vitorias: "" + stats[Ss.WI] + "", ‚≠ï Empates: "" + stats[Ss.DR] + "", ‚ùå Derrotas: "" + stats[Ss.LS] + "", WR: "" + stats[Ss.WR] + ""%, ‚öΩÔ∏è Gols: "" + stats[Ss.GL] + "", üëü Assist√™ncias: "" + stats[Ss.AS] + "", ü§ö GK: "" + stats[Ss.GK] + "", ü§ö CS: "" + stats[Ss.CS] + "", ü§ö CS%: "" + stats[Ss.CP] + ""%"", player.id, 0x73EC59, ""bold"");
        room.sendAnnouncement(""[PV] Quer mostrar a todos? Use !mostrarme."", player.id, 0xFF7900, ""bold"");
    } 	else if (message == ""!mostrarme"" ){
        var stats;
        localStorage.getItem(getAuth(player)) ? stats = JSON.parse(localStorage.getItem(getAuth(player))) : stats = [0, 0, 0, 0, ""0.00"", 0, 0, 0, 0, ""0.00""];
        room.sendAnnouncement(""[üìÑ] ""+ player.name + "" mostrou seus stats!"", null, 0xFF7900, ""bold"")
        room.sendAnnouncement(""[üìÑ] Stats de "" + player.name + "": üéÆ Partidas Jogadas: "" + stats[Ss.GA] + "", ‚úÖ Vitorias: "" + stats[Ss.WI] + "", ‚≠ï Empates: "" + stats[Ss.DR] + "", ‚ùå Derrotas: "" + stats[Ss.LS] + "", WR: "" + stats[Ss.WR] + ""%, ‚öΩÔ∏è Gols: "" + stats[Ss.GL] + "", üëü Assist√™ncias: "" + stats[Ss.AS] + "", ü§ö GK: "" + stats[Ss.GK] + "", ü§ö CS: "" + stats[Ss.CS] + "", ü§ö CS%: "" + stats[Ss.CP] + ""%"", null, 0x73EC59, ""bold"");
    } else if (message == ""!partidas"" ){
        var tableau = [];
        try {
            Object.keys(localStorage).forEach(function(key) {
                if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) {
                    tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.GA])]);
                }
            });
        } catch {

        }
        if (tableau.length < 5) {
            room.sendAnnouncement(""[PV] N√£o jogou partidas suficientes"", player.id, 0xFF0000);
            return false;
        }
        tableau.sort(function(a, b) {
            return b[1] - a[1];
        });
        room.sendAnnouncement(""üéÆ Partidas Jogadas> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1], player.id, 0x73EC59);

        return false;
    } else 	if (message == ""!vitorias"" ){
        var tableau = [];
        try {
            Object.keys(localStorage).forEach(function(key) {
                if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) {
                    tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.WI])]);
                }
            });
        } catch {

        }
        if (tableau.length < 5) {
            room.sendAnnouncement(""[PV] N√£o jogou partidas suficientes"", player.id, 0x73EC59);
            return false;
        }
        tableau.sort(function(a, b) {
            return b[1] - a[1];
        });
        room.sendAnnouncement(""‚úÖ Vit√≥rias> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1], player.id, 0x73EC59);

        return false;
    } else 	if (message == ""!gols"" ){
        var tableau = [];
        try {
            Object.keys(localStorage).forEach(function(key) {
                if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) {
                    tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.GL])]);
                }
            });
        } catch {

        }
        if (tableau.length < 5) {
            room.sendAnnouncement(""[PV] N√£o jogou partidas suficientes"", player.id, 0x73EC59);
            return false;
        }
        tableau.sort(function(a, b) {
            return b[1] - a[1];
        });
        room.sendAnnouncement(""‚öΩÔ∏è Gols> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1], player.id, 0x73EC59);

        return false;
    } else 	if (message == ""!passes"" ){
        var tableau = [];
        try {
            Object.keys(localStorage).forEach(function(key) {
                if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) {
                    tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.AS])]);
                }
            });
        } catch {

        }
        if (tableau.length < 5) {
            room.sendAnnouncement(""[PV] N√£o jogou partidas suficientes"", player.id);
            return false;
        }
        tableau.sort(function(a, b) {
            return b[1] - a[1];
        });
        room.sendAnnouncement(""üëü Assist√™ncias> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1], player.id, 0x73EC59);

        return false;
    } else 	if (message == ""!defesas"" ){
        var tableau = [];
        try {
            Object.keys(localStorage).forEach(function(key) {
                if (![""player_name"", ""view_mode"", ""geo"", ""avatar"", ""player_auth_key""].includes(key)) {
                    tableau.push([(JSON.parse(localStorage.getItem(key))[Ss.NK]), (JSON.parse(localStorage.getItem(key))[Ss.CS])]);
                }
            });
        } catch {

        }
        if (tableau.length < 5) {
            room.sendAnnouncement(""[PV] N√£o jogou partidas suficientes"", player.id, 0x73EC59);
            return false;
        }
        tableau.sort(function(a, b) {
            return b[1] - a[1];
        });
        room.sendAnnouncement(""ü§ö CS> #1 "" + tableau[0][0] + "": "" + tableau[0][1] + "" #2 "" + tableau[1][0] + "": "" + tableau[1][1] + "" #3 "" + tableau[2][0] + "": "" + tableau[2][1] + "" #4 "" + tableau[3][0] + "": "" + tableau[3][1] + "" #5 "" + tableau[4][0] + "": "" + tableau[4][1], player.id, 0x73EC59);

        return false;
    }
	if (message == ""!mutados"" ){
		var cstm = ""[PV] Lista de mutados : "";
		for (var i = 0; i < extendedP.length; i++) {
		if (room.getPlayer(extendedP[i][eP.ID]) != null && getMute(room.getPlayer(extendedP[i][eP.ID]))) {
		if (140 - cstm.length < (room.getPlayer(extendedP[i][eP.ID]).name + ""["" + (extendedP[i][eP.ID]) + ""], "").length) {
		room.sendAnnouncement(cstm, player.id);
		cstm = ""... "";
		}
		cstm += room.getPlayer(extendedP[i][eP.ID]).name + ""["" + (extendedP[i][eP.ID]) + ""], "";
		}
		}
		if (cstm == ""[PV] Lista de Mutados : "") {
		room.sendAnnouncement(""[PV] N√£o h√° ningu√©m na lista de mutados !"", player.id);
		return false;
		}
		cstm = cstm.substring(0, cstm.length - 2);
		cstm += ""."";
		room.sendAnnouncement(cstm, player.id);
		}
		
		else if ([""!mute""].includes(message[0].toLowerCase())) { // comando para mutar um jogador, deve ser admin, use !mute + ID do jogador
			if (player.admin) {			
			updateTeams();
		  
			var timeOut;
			if (!Number.isNaN(Number.parseInt(message[1])) && message.length > 1) {
			if (Number.parseInt(message[1]) > 0) {
			timeOut = Number.parseInt(message[1]) * 60 * 1000;
			}
			else {
			timeOut = 10 * 60 * 1000;
			}
			if (message[2].length > 1 && message[2][0] == ""#"") {
			message[2] = message[2].substring(1, message[2].length);
			if (!Number.isNaN(Number.parseInt(message[2])) && room.getPlayer(Number.parseInt(message[2])) != null) {
			if (room.getPlayer(Number.parseInt(message[2])).admin || getMute(room.getPlayer(Number.parseInt(message[2]))
			)) { return false;
			}
			setTimeout(function (player) { setMute(player, false); }, timeOut, room.getPlayer(Number.parseInt(message[2]
			))); setMute(room.getPlayer(Number.parseInt(message[2])), true);
			room.sendAnnouncement(room.getPlayer(Number.parseInt(message[2])).name + "" foi mutado por "" + (timeOut /
			60000) + "" minutos !""); }
			}
			}
			else if (Number.isNaN(Number.parseInt(message[1]))) {
			if (message[1].length > 1 && message[1][0] == ""#"") {
			message[1] = message[1].substring(1, message[1].length);
			if (!Number.isNaN(Number.parseInt(message[1])) && room.getPlayer(Number.parseInt(message[1])) != null) {
			if (room.getPlayer(Number.parseInt(message[1])).admin || getMute(room.getPlayer(Number.parseInt(message[1]))
			)) { return false;
			}
			setTimeout(function (player) { setMute(player, false); }, 10 * 60 * 1000, room.getPlayer(Number.parseInt
			(message[1])));
			setMute(room.getPlayer(Number.parseInt(message[1])), true);
			room.sendAnnouncement(room.getPlayer(Number.parseInt(message[1])).name + "" Foi mutado por 10 minutos!"");
			}
			}
			}
			}
			}
			
			else if ([""!unmute""].includes(message[0].toLowerCase())) { // comando para desmutar um jogador, deve ser admin, use !mute + ID do jogador
			if (player.admin && message.length >= 2) {
			if (message[1] == ""all"") {
			extendedP.forEach((ePlayer) => { ePlayer[eP.MUTE] = false; });
			room.sendAnnouncement(""Todos foram desmutados."");
			} else if (!Number.isNaN(Number.parseInt(message[1])) && room.getPlayer(Number.parseInt(message[1])) != null && getMute(room.getPlayer(Number.parseInt(message[1])))) {
			setMute(room.getPlayer(Number.parseInt(message[1])), false);
			room.sendAnnouncement(room.getPlayer(Number.parseInt(message[1])).name + "" Foi desmutado !"");
			}
			else if (Number.isNaN(Number.parseInt(message[1]))) {
			if (message[1].length > 1 && message[1][0] == ""#"") {
			message[1] = message[1].substring(1, message[1].length);
			if (!Number.isNaN(Number.parseInt(message[1])) && room.getPlayer(Number.parseInt(message[1])) != null && getMute(room.getPlayer(Number.parseInt(message[1])))) {
			setMute(room.getPlayer(Number.parseInt(message[1])), false);
			room.sendAnnouncement(room.getPlayer(Number.parseInt(message[1])).name + "" Foi desmutado !"");
			}
			}
			}
			}
			}
			
			else if ([""!banidos""].includes(message[0].toLowerCase())) { // comando para ver a lista de banidos
			if (banList.length == 0) {
			room.sendAnnouncement(""[PV] Ningu√©m foi banido."", player.id);
			return false;
			}
			var cstm = ""[PV] Lista de banidos : "";
			for (var i = 0; i < banList.length; i++) {
			if (140 - cstm.length < (banList[i][0] + ""["" + (banList[i][1]) + ""], "").length) {
			room.sendAnnouncement(cstm, player.id);
			cstm = ""... "";
			}
			cstm += banList[i][0] + ""["" + (banList[i][1]) + ""], "";
			}
			cstm = cstm.substring(0, cstm.length - 2);
			cstm += ""."";
			room.sendAnnouncement(cstm, player.id);
			}
			
			else if ([""!limparbans""].includes(message[0].toLowerCase())) { // comando para limpar os bans da sala, para desbanir um jogador especifico escreva !clearbans + ID do jogador
			if (player.admin) {
			if (message.length == 1) {
			room.clearBans();
			room.sendAnnouncement(""Bans removidos!"")
			banList = [];
			}
			if (message.length == 2) {
			if (!Number.isNaN(Number.parseInt(message[1]))) {
			if (Number.parseInt(message[1]) > 0) {
			ID = Number.parseInt(message[1]);
			room.clearBan(ID);
			if (banList.length != banList.filter((array) => array[1] != ID)) {
			room.sendAnnouncement(banList.filter((array) => array[1] == ID)[0][0] + "" ha sido baneado del host !"");
			}
			setTimeout(() => { banList = banList.filter((array) => array[1] != ID); }, 20);
			}
			}
			}
			}
			}

	  if (message[0][0] == ""!"") { // mensagens com o prefixo [!] n√£o ir√£o aparecer no chat.
	  return false;
	  }
	  
	  if (teamR.length != 0 && teamB.length != 0 && inChooseMode) { //choosing management
	  if (player.id == teamR[0].id || player.id == teamB[0].id) { // we care if it's one of the captains choosing
	  if (teamR.length <= teamB.length && player.id == teamR[0].id) { // we care if it's red turn && red cap talking
	  if ([""top"", ""auto""].includes(message[0].toLowerCase())) {
	  room.setPlayerTeam(teamS[0].id, Team.RED);
	  redCaptainChoice = ""top"";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + "" usou top !"", null);
	  return false;
	  }
	  else if ([""random"", ""rand""].includes(message[0].toLowerCase())) {
	  var r = getRandomInt(teamS.length);
	  room.setPlayerTeam(teamS[r].id, Team.RED);
	  redCaptainChoice = ""random"";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + "" usou random !"",null);
	  return false;
	  }
	  else if ([""bottom"", ""bot""].includes(message[0].toLowerCase())) {
	  room.setPlayerTeam(teamS[teamS.length - 1].id, Team.RED);
	  redCaptainChoice = ""bottom"";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + "" usou bottom !"", null);
	  return false;
	  }
	  else if (!Number.isNaN(Number.parseInt(message[0]))) {
	  if (Number.parseInt(message[0]) > teamS.length || Number.parseInt(message[0]) < 1) {
	  room.sendAnnouncement(""N√∫mero invalido !"", player.id);
	  return false;
	  }
	  else {
	  room.setPlayerTeam(teamS[Number.parseInt(message[0]) - 1].id, Team.RED);
	  room.sendAnnouncement(player.name + "" escolhoeu o(a) "" + teamS[Number.parseInt(message[0]) - 1].name + "" !"", null);
	  return false;
	  }
	  }
	  }
	  if (teamR.length > teamB.length && player.id == teamB[0].id) { // we care if it's red turn && red cap talking
	  if ([""top"", ""auto""].includes(message[0].toLowerCase())) {
	  room.setPlayerTeam(teamS[0].id, Team.BLUE);
	  blueCaptainChoice = ""top"";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + "" usou top !"", null);
	  return false;
	  }
	  else if ([""random"", ""rand""].includes(message[0].toLowerCase())) {
	  room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.BLUE);
	  blueCaptainChoice = ""random"";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + "" usou random !"", null);
	  return false;
	  }
	  else if ([""bottom"", ""bot""].includes(message[0].toLowerCase())) {
	  room.setPlayerTeam(teamS[teamS.length - 1].id, Team.BLUE);
	  blueCaptainChoice = ""bottom"";
	  clearTimeout(timeOutCap);
	  room.sendAnnouncement(player.name + "" usou bottom !"", null);
	  return false;
	  }
	  else if (!Number.isNaN(Number.parseInt(message[0]))) {
	  if (Number.parseInt(message[0]) > teamS.length || Number.parseInt(message[0]) < 1) {
	  room.sendAnnouncement(""N√∫mero invalido !"", player.id);
	  return false;
	  }
	  else {
	  room.setPlayerTeam(teamS[Number.parseInt(message[0]) - 1].id, Team.BLUE);
	  room.sendAnnouncement(player.name + "" escolheu o(a) "" + teamS[Number.parseInt(message[0]) - 1].name + "" !"", null);
	  return false;
	  }
	  }
	  }
	  }
	  }
    
	  if (getMute(player)) {
        room.sendAnnouncement(""Voc√™ est√° mutado."", player.id);
        return false;
    }


	if (adminF.includes(player.name)) {
		stats = JSON.parse(localStorage.getItem(getAuth(player)));
		room.sendAnnouncement(""[‚öΩ: "" + stats[Ss.GL] +""] [üëë|DONO] "" + player.name + "": "" + message.join(' '), null, Cor.Branco, Negrito, 1);
		return false;
	}

	if (adminG.includes(player.name)) {
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

		room.sendAnnouncement(""[‚öΩ: "" + stats[Ss.GL] +""] [ADMIN-G] "" + player.name + "": "" + message.join(' '), null, 0xCCA01F, Negrito, 1);
		return false;
	}

	if (adminM.includes(player.name)) {
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

		room.sendAnnouncement(""[‚öΩ: "" + stats[Ss.GL] +""] [ADMIN-M] "" + player.name + "": "" + message.join(' '), null, 0x74FF00, Negrito, 1);
		return false;
	}

	if (adminE.includes(player.name)) {
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

		room.sendAnnouncement(""[‚öΩ: "" + stats[Ss.GL] +""] [ADMIN-E] "" + player.name + "": "" + message.join(' '), null, 0xF4CA21, Negrito, 1);
		return false;
	}

	if(L1.includes(player.name) === true && verificados.includes(player.name) === true){
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

	room.sendAnnouncement(""[‚öΩ: "" + stats[Ss.GL] +""] [MVP++] ""+ player.name + "": "" + message.join(' '), null, cL1, fL1)		
	return false;
	}
	if(L2.includes(player.name) === true && verificados.includes(player.name) === true){
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

	room.sendAnnouncement(""[‚öΩ: "" + stats[Ss.GL] +""] [] ""+ player.name + "": "" + message.join(' '), null, cL2, fL2)	
	return false;
	}
	if(L3.includes(player.name) === true && verificados.includes(player.name) === true){
		stats = JSON.parse(localStorage.getItem(getAuth(player)));

		room.sendAnnouncement(""[‚öΩ: "" + stats[Ss.GL] +""] [] ""+ player.name + "": "" + message.join(' '), null, cL3, fL3)	
		return false;
		}
		if(L4.includes(player.name) === true && verificados.includes(player.name) === true){
			stats = JSON.parse(localStorage.getItem(getAuth(player)));

			room.sendAnnouncement(""[‚öΩ: "" + stats[Ss.GL] +""] [] ""+ player.name + "": "" + message.join(' '), null, cL4, fL4)	
			return false;
			}
		
			if(L5.includes(player.name) === true && verificados.includes(player.name) === true){
				stats = JSON.parse(localStorage.getItem(getAuth(player)));


				room.sendAnnouncement(""[‚öΩ: "" + stats[Ss.GL] +""] [] ""+ player.name + "": "" + message.join(' '), null, cL5, fL5)	
				return false;
				}
			
				if(L6.includes(player.name) === true && verificados.includes(player.name) === true){
					stats = JSON.parse(localStorage.getItem(getAuth(player)));

					room.sendAnnouncement(""[‚öΩ: "" + stats[Ss.GL] +""] [] ""+ player.name + "": "" + message.join(' '), null, cL6, fL6)	
					return false;
					}
					if(L7.includes(player.name) === true && verificados.includes(player.name) === true){
						stats = JSON.parse(localStorage.getItem(getAuth(player)));

						room.sendAnnouncement(""[‚öΩ: "" + stats[Ss.GL] +""] [] ""+ player.name + "": "" + message.join(' '), null, cL7, fL7)	
						return false;
						}
					if(L10.includes(player.name) === true && verificados.includes(player.name) === true){
						stats = JSON.parse(localStorage.getItem(getAuth(player)));

						room.sendAnnouncement(""[‚öΩ: "" + stats[Ss.GL] +""] [MVP++] ""+ player.name + "": "" + message.join(' '), null, cL10, fL10)	
						return false;
						}	
						if(L11.includes(player.name) === true && verificados.includes(player.name) === true){
							stats = JSON.parse(localStorage.getItem(getAuth(player)));

							room.sendAnnouncement(""[‚öΩ: "" + stats[Ss.GL] +""] [MVP++] ""+ player.name + "": "" + message.join(' '), null, cL11, fL11)	
							return false;
							}	
							if(L12.includes(player.name) === true && verificados.includes(player.name) === true){
								stats = JSON.parse(localStorage.getItem(getAuth(player)));

								room.sendAnnouncement(""[‚öΩ: "" + stats[Ss.GL] +""] [MVP++] ""+ player.name + "": "" + message.join(' '), null, cL12, fL12)	
								return false;
								}	

								if(L13.includes(player.name) === true && verificados.includes(player.name) === true){//MVP+
									stats = JSON.parse(localStorage.getItem(getAuth(player)));

									room.sendAnnouncement(""[‚öΩ: "" + stats[Ss.GL] +""] [MVP+] ""+ player.name + "": "" + message.join(' '), null, cL13, fL13)	
									return false;
									}	

									if(L14.includes(player.name) === true && verificados.includes(player.name) === true){//MVP+
										stats = JSON.parse(localStorage.getItem(getAuth(player)));

										room.sendAnnouncement(""[‚öΩ: "" + stats[Ss.GL] +""] [MVP++] ""+ player.name + "": "" + message.join(' '), null, cL14, fL14)	
										return false;
										}	
										if(L15.includes(player.name) === true && verificados.includes(player.name) === true){//MVP+
											stats = JSON.parse(localStorage.getItem(getAuth(player)));

											room.sendAnnouncement(""[‚öΩ: "" + stats[Ss.GL] +""] [MVP++] ""+ player.name + "": "" + message.join(' '), null, cL15, fL15)	
											return false;
											}	
						
						if (booster.includes(player.name)) {
							
							stats = JSON.parse(localStorage.getItem(getAuth(player)));

							room.sendAnnouncement(""[BOOSTER] "" + player.name + "": "" + message.join(' '), null, 0xF000FF, Normal, 1);
							return false;
						}

						if (localStorage.getItem(getAuth(player))){ // elo definido por vit√≥rias dos registrados
							stats = JSON.parse(localStorage.getItem(getAuth(player)));
							let db = jsonToMap(localStorage.getItem(USER_DATABASE)) 					 
							if (db.get(player.name)) {
								if (stats[Ss.GA] > 80 && stats[Ss.WR] > 90){
									room.sendAnnouncement(""ü©∏ [SIGMA] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 87){
									room.sendAnnouncement(""üåÄüåÄüåÄ [ESTRELA] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 85 ){
									room.sendAnnouncement(""üåÄüåÄ [ESTRELA] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 83 ){
									room.sendAnnouncement(""üåÄ [ESTRELA] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 81 ){
									room.sendAnnouncement(""üíéüíéüíé [DIAMANTE] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 79 ){
									room.sendAnnouncement(""üíéüíé [DIAMANTE] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 77){
									room.sendAnnouncement(""üíé [DIAMANTE] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 75 ){
									room.sendAnnouncement(""ü•áü•áü•á [OURO] ""+ player.name + "": "" + message.join(' '), null)
								}else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 70 ){
									room.sendAnnouncement(""ü•áü•á [OURO] ""+ player.name + "": "" + message.join(' '), null)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 65){
									room.sendAnnouncement(""ü•á [OURO] ""+ player.name + "": "" + message.join(' '), null)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 60){
									room.sendAnnouncement(""ü•àü•àü•à [PRATA] ""+ player.name + "": "" + message.join(' '), null)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 55){
									room.sendAnnouncement(""ü•àü•à [PRATA] ""+ player.name + "": "" + message.join(' '), null)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 50 ){
									room.sendAnnouncement(""ü•à [PRATA] ""+ player.name + "": "" + message.join(' '), null)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 45){
									room.sendAnnouncement(""ü•âü•âü•â [BRONZE] ""+ player.name + "": "" + message.join(' '), null)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 40){
									room.sendAnnouncement(""ü•âü•â [BRONZE] ""+ player.name + "": "" + message.join(' '), null)
								} else if (stats[Ss.GA] > 80 && stats[Ss.WR] > 30){
									room.sendAnnouncement(""ü•â [BRONZE] ""+ player.name + "": "" + message.join(' '), null)
									} else {
									room.sendAnnouncement(""ü•¥ [‚úÖ|APOLLO] ""+ player.name + "": "" + message.join(' '), null)
									}
									return false;
										}
										else {
											room.sendAnnouncement(""‚ùå ""+ player.name + "": "" + msg + """", null, Cor.Branco)
										}
									return false;
								}
							}


  room.onPlayerActivity = function (player) {
	  setActivity(player, 0);
  }
  
  room.onPlayerBallKick = function(player) {
    if (lastPlayersTouched[0] == null || player.id != lastPlayersTouched[0].id) {
        !activePlay ? activePlay = true : null;
        lastTeamTouched = player.team;
        lastPlayersTouched[1] = lastPlayersTouched[0];
        lastPlayersTouched[0] = player;
    }
}

  
	  /* GAME MANAGEMENT */
  
room.onGameStart = function (byPlayer) {
	game = new Game(Date.now(), room.getScores(), []);
	countAFK = true;
	activePlay = false;
	goldenGoal = false;
	endGameVariable = false;
	lastPlayersTouched = [null, null]
    Rposs = 0;
	Bposs = 0;
	GKList = []
	allReds = []
	allBlues = []  
	  if (teamR.length == maxTeamSize && teamB.length == maxTeamSize) {
	  for (var i = 0; i < maxTeamSize; i++) {
	  allReds.push(teamR[i]);
	  allBlues.push(teamB[i]);
	  }
	  }
	  for (var i = 0; i < extendedP.length; i++) {
	  extendedP[i][eP.GK] = 0;
	  extendedP[i][eP.ACT] = 0;
	  room.getPlayer(extendedP[i][eP.ID]) == null ? extendedP.splice(i, 1) : null;
	  }
	  room.sendAnnouncement(""     ‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢     "", null, 0xFF8C00, Normal);
	  room.sendAnnouncement(""     ‚Ä¢.       üí¨ Use t para falar com seu time--------------------------------------‚Ä¢     "", null, 0xFFD700, Normal);
	  room.sendAnnouncement(""     ‚Ä¢.       A partida est√° sendo gravada-------------------------------------------‚Ä¢     "", null, 0xFFD700, Normal);
	  room.sendAnnouncement(""     ‚Ä¢.       Use !uni para ver os uniformes-----------------------------------------‚Ä¢     "", null, 0xFFD700, Normal);
	  room.sendAnnouncement(""     ‚Ä¢.       UNIFORMES VIPS: !itp, !alp, !arp, !frp, !min, !cia, !pre, !rsa.----‚Ä¢     "", null, 0xFFD700, Normal);
          room.sendAnnouncement(""     ‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢   "", null, 0xFF8C00, Normal);
          room.sendAnnouncement(""ùôàùôêùòøùòºùôâùòøùôä ùòº ùòºùôçùôÄùôâùòº..."", null, 0xFFFF00, Negrito);
	  room.startRecording();
	  deactivateChooseMode();
	  resetPause();
}
//var mensagem_programada;
//var mensagemIntervalo = 1000 * 60 * 15;//
//mensagem_programada = setInterval(function(){
//}, mensagemIntervalo)//
room.onGameStop = function (byPlayer) {
	partida = true;
	if (endGameVariable) {
	updateTeams();
	solo()
	if (inChooseMode) {
	if (players.length == 2 * maxTeamSize) {
	inChooseMode = false;
	resetBtn();
	for (var i = 0; i < maxTeamSize; i++) {
	setTimeout(() => { randomBtn(); }, 400 * i);
	}
	setTimeout(() => { room.startGame(); }, 2000);
	}
	else {
	if (lastWinner == Team.RED) {
	blueToSpecBtn();
	}
	else if (lastWinner == Team.BLUE) {
	redToSpecBtn();
	blueToRedBtn();
	}
	else {
	resetBtn();
	}
	setTimeout(() => { topBtn(); }, 500);
	}
	}
	else {
	if (players.length == 2) {
	if (lastWinner == Team.BLUE) {
	room.setPlayerTeam(teamB[0].id, Team.RED);
	room.setPlayerTeam(teamR[0].id, Team.BLUE);
	}
	setTimeout(() => { room.startGame(); }, 2000);
	}
	else if (players.length == 3 || players.length >= 2 * maxTeamSize + 1) {
	if (lastWinner == Team.RED) {
	blueToSpecBtn();
	}
	else {
	redToSpecBtn();
	blueToRedBtn();
	}
	setTimeout(() => { topBtn(); }, 200);
	setTimeout(() => { room.startGame(); }, 2000);
	}
	else if (players.length == 4) {
	resetBtn();
	setTimeout(() => { randomBtn(); setTimeout(() => { randomBtn(); }, 500); }, 500);
	setTimeout(() => { room.startGame(); }, 2000);
	}
	else if (players.length == 5 || players.length >= 2 * maxTeamSize + 1) {
	if (lastWinner == Team.RED) {
	blueToSpecBtn();
	}
	else {
	redToSpecBtn();
	blueToRedBtn();
	}
	setTimeout(() => { topBtn(); }, 200);
	activateChooseMode();
	}
	else if (players.length == 6) {
	resetBtn();
	setTimeout(() => { randomBtn(); setTimeout(() => { randomBtn(); setTimeout(() => { randomBtn(); }, 500); }, 500); }, 500);
	setTimeout(() => { room.startGame(); }, 2000);
	}
	}
	}
} 
  room.onGamePause = function (byPlayer) {
  pauseGame = true;
  }	  
  room.onGameUnpause = function (byPlayer) {
	  if (teamR.length == 4 && teamB.length == 4 && inChooseMode || (teamR.length == teamB.length && teamS.length < 2 && inChooseMode)) {
	  deactivateChooseMode();
	  }
	  pauseGame = false;
  }
  room.onGamePause = () => {
	let scores = room.getScores()
        let redNumero = scores.red
        let blueNumero = scores.blue
        let blueString = blueNumero.toString()
        let redString = redNumero.toString()
        room.sendAnnouncement(`ùôÖùôäùôÇùôä ùôÅùôäùôÑ ùôãùòºùôêùôéùòºùòøùôä! ùôãùôáùòºùòæùòºùôç ùôçùôÄùòø: ${redString} ùôÄ ùòΩùôáùôêùôÄ ùòæùôäùôà: ${blueString}`, null, 0xFFFF00, Negrito)
  }
	  
  room.onGameUnpause = () => {
	room.sendAnnouncement(""ùôä ùôÖùôäùôÇùôä ùôÅùôäùôÑ ùòøùôÄùôéùôãùòºùôêùôéùòºùòøùôä!"", null, 0xFFFF00, Negrito);
  }
  room.onTeamGoal = function (team) {
	activePlay = false;
	countAFK = false;
	const scores = room.getScores();
	let players = room.getPlayerList();

    for (let i = 0; i < players.length; i++) {
        if (players[i].team == team) room.setPlayerAvatar(players[i].id, ""üåü"");
    }
    setTimeout(() => {
        for (let i = 0; i < players.length; i++) {
           room.setPlayerAvatar(players[i].id, null);
        }
    }, resetarAvatarEm * 1000);
	game.scores = scores;
	if (lastPlayersTouched[0] != null && lastPlayersTouched[0].team == team) {
	if (lastPlayersTouched[1] != null && lastPlayersTouched[1].team == team) {
	var frasegol = frasesGOL[(Math.random() * frasesGOL.length) | 0]
	var fraseasis = frasesASS[(Math.random() * frasesASS.length) | 0]
	room.sendAnnouncement(getTime(scores) + frasegol + lastPlayersTouched[0].name + fraseasis + lastPlayersTouched[1].name + "". VELOCIDADE : "" + ballSpeed.toPrecision(4).toString() + ""km/h. "" + (team == Team.RED ? """" : """"),null,(team == Team.RED ? 0xFF0000 : 0x1E47EC), Italic);
	game.goals.push(new Goal(scores.time, team, lastPlayersTouched[0], lastPlayersTouched[1]));
	}
	else {
	var frasegol = frasesGOL[(Math.random() * frasesGOL.length) | 0]
	room.sendAnnouncement(getTime(scores) + frasegol + lastPlayersTouched[0].name + "", VELOCIDADE : "" + ballSpeed.toPrecision(4).toString() + ""km/h. "" + (team == Team.RED ? """" : """"),null,(team == Team.RED ? 0xFF0000 : 0x1E47EC), Italic);
	}
	}
	else {
	var fraseautogol = golcontra[(Math.random() * golcontra.length) | 0]
	room.sendAnnouncement(getTime(scores) + golcontra + lastPlayersTouched[0].name + "", VELOCIDADE : "" + ballSpeed.toPrecision(4).toString() + ""km/h. "" + (team == Team.RED ? """" : """"),null,(team == Team.RED ? 0xFF0000 : 0x1E47EC), Italic);
	game.goals.push(new Goal(scores.time, team, null, null));
	}
	if (scores.scoreLimit != 0 && (scores.red == scores.scoreLimit || scores.blue == scores.scoreLimit && scores.blue > 0 || goldenGoal == true)) {
	endGame(team);
	goldenGoal = false;
	setTimeout(() => { room.stopGame(); }, 1000);
	}
}
  
  room.onPositionsReset = function () {
	  countAFK = true;
	  lastPlayersTouched = [null, null];
  }
  
	  /* MISCELLANEOUS */
  
room.onRoomLink=(link)=>{
}
  
  room.onPlayerAdminChange = function (changedPlayer, byPlayer) {
	  if (getMute(changedPlayer) && changedPlayer.admin) {
	  room.sendAnnouncement(changedPlayer.name + "" foi desmutado."");
	  setMute(changedPlayer, false);
	  }
  }
  
  room.onStadiumChange = function (newStadiumName, byPlayer) {
  }

  //func√µes

  function sendAnnouncementToDiscord(message) {

    var request = new XMLHttpRequest();
    request.open(""POST"",""https://discord.com/api/webhooks/1169778841020014602/gv1c1lr5mEPyIEmr7Bs80cdDytG7DxiLyoT7DbijpEicYlDbhZ5AOPjjel7rFdVkyVhd"");

    request.setRequestHeader('Content-type', 'application/json');

    var params = {
        avatar_url: 'https://media.discordapp.net/attachments/1114717413754273813/1174436793303711764/aa7532a690a084e42db5c3a9c42343ff.png?ex=6567967f&is=6555217f&hm=4095b3f87e888e6152aeadffc048b62b056c8ecaf54e995bfefb2404b5fb46d0&=',
        username: 'APOLLO',
        content: message
    };

    request.send(JSON.stringify(params));
}

function getDate(){
let data = new Date(),
dia=data.getDate().toString().padStart(2, '0'),
mes=(data.getMonth()+1).toString().padStart(2, '0'),
ano=data.getFullYear(),
horas=data.getHours().toString().padStart(2, '0'),
minutos=data.getMinutes().toString().padStart(2, '0');
segundos=data.getSeconds().toString().padStart(2, '0');

return `${dia}${minutos}${segundos}`;
}

  // Cada jogador que est√° jogando tem a chance de pausar o jogo apenas uma vez.
  function pausar(player) {
	  if (partida == true) room.sendAnnouncement(""A partida ainda n√£o come√ßou."", player.id, Cor.Vermelho, Negrito);
	  else {
		  if (player.team != 0) {
			  if (pausePlayers.includes(player.id)) room.sendAnnouncement(""Voc√™ n√£o pode pausar a partida at√© que ele termine."", player.id, Cor.Vermelho, Negrito);
			  else {
				  if (pauseGame == true) room.sendAnnouncement(""A partida j√° est√° pausada."", player.id, Cor.Azulescuro, Negrito);
				  else {
					  pausePlayers.push(player.id);
					  room.sendAnnouncement(`${player.name} pausou a partida por ${tempoDePause/1000} segundos.`, null, Cor.Branco, Negrito); // tempoDePause dividido por 1000 = 5
					  room.pauseGame(true);
					  setTimeout(_=> {room.pauseGame(false);}, tempoDePause);
				  }
			  }
		  }
		  else room.sendAnnouncement(""Voc√™ n√£o est√° em nenhum time."", player.id, Cor.Vermelho, Negrito);
	  }
  }
  
  function removerPlayer(player) {
	  if (pausePlayers.includes(player.id)) {
		  pausePlayers.splice(pausePlayers.indexOf(player.id), 1);
	  }
  }
  
  function resetPause() {
	  pausePlayers = [];
	  pauseGame = false;
	  partida = false;
  }
  
  room.setTeamsLock(true)


function aovivosend(url, params = {}) {

    const xhr = new XMLHttpRequest();

    xhr.open(""POST"", url);

    xhr.setRequestHeader(""Content-Type"", ""application/json""); // formato json

    /**
     * DISCORD WEBHOOK PARAMS
     * https://birdie0.github.io/discord-webhooks-guide/index.html
     */
    xhr.send(JSON.stringify(params));

}


function cor_e_fonte(){
	if(cL1.length == 0) cL1.push('0xFFFFFF')
	if(cL2.length == 0) cL2.push('0xFFFFFF')
	if(cL3.length == 0) cL3.push('0xFFFFFF')
	if(cL4.length == 0) cL4.push('0xFFFFFF')
	if(cL5.length == 0) cL5.push('0xFFFFFF')
	if(cL6.length == 0) cL6.push('0xFFFFFF')
	if(cL7.length == 0) cL7.push('0x008000')
	if(cL8.length == 0) cL8.push('0x008000')
	if(cL10.length == 0) cL10.push('0x008000')
	if(cL11.length == 0) cL11.push('0x008000')
	if(cL12.length == 0) cL12.push('0x008000')
	if(cL13.length == 0) cL13.push('0x008000')
	if(cL14.length == 0) cL14.push('0x008000')
	if(cL15.length == 0) cL15.push('0x008000')
	
	
	
	if(fL1.length == 0) fL1.push('normal') 
	if(fL2.length == 0) fL2.push('normal')
	if(fL3.length == 0) fL3.push('normal') 
	if(fL4.length == 0) fL4.push('normal')
	if(fL5.length == 0) fL5.push('normal')  
	if(fL6.length == 0) fL6.push('normal')
	if(fL7.length == 0) fL7.push('bold') 
	if(fL8.length == 0) fL8.push('bold') 
	if(fL10.length == 0) fL10.push('bold')
	if(fL11.length == 0) fL11.push('bold')
	if(fL12.length == 0) fL12.push('bold')
	if(fL13.length == 0) fL13.push('bold')
	if(fL14.length == 0) fL14.push('0x008000')
	if(fL15.length == 0) fL15.push('0x008000')

	}

function checkar(player, message){
	if (message.substr(0, 5) == ""!cor "" && message.length > 11) {
	room.sendAnnouncement(`O C√≥digo deve conter apenas 6 n√∫meros ou letras \nfa√ßa sua cor aqui ${linkhaxcolors} \nexemplos vermelho = !cor FF0000`, player.id)
	return false;
	}
	if (message.substr(0, 5) == ""!cor "") { if(verificados.includes(player.name) === false) room.sendAnnouncement(`${erro}`, player.id)}
	if (message.substr(0, 7) == ""!fonte "") { if(verificados.includes(player.name) === false) room.sendAnnouncement(`${erro}`, player.id)}
	alterar_fonte(player, message)	
}
  
  function solo(){
	if (teamR.length == 1 || teamB.length == 0) {
	setTimeout(() => { room.startGame(); }, 2000);
	}
	else {
		if (teamR.length == 0 || teamB.length == 1) {
		setTimeout(() => { room.startGame(); }, 2000);
		}
	}
}
  
  function Goal(time, team, striker, assist) {
	  this.time = time;
	  this.team = team;
	  this.striker = striker;
	  this.assist = assist;
  }
  
  function Game(date, scores, goals) {
	  this.date = date;
	  this.scores = scores;
	  this.goals = goals;
  }
  
  function getRandomInt(max) { // returns a random number from 0 to max-1
	  return Math.floor(Math.random() * Math.floor(max));
  }
  
  function getTime(scores) { // returns the current time of the game
	  return ""["" + Math.floor(Math.floor(scores.time / 60) / 10).toString() + Math.floor(Math.floor(scores.time / 60) % 10).toString() + "":"" + Math.floor(Math.floor(scores.time - (Math.floor(scores.time / 60) * 60)) / 10).toString() + Math.floor(Math.floor(scores.time - (Math.floor(scores.time / 60) * 60)) % 10).toString() + ""]""
  }
  
  function pointDistance(p1, p2) {
	  var d1 = p1.x - p2.x;
	  var d2 = p1.y - p2.y;
	  return Math.sqrt(d1 * d1 + d2 * d2);
  }
  
	  /* BUTTONS */

  function topBtn() {
	  if (teamS.length == 0) {
	  return;
	  }
	  else {
	  if (teamR.length == teamB.length) {
	  if (teamS.length > 1) {
	  room.setPlayerTeam(teamS[0].id, Team.RED);
	  room.setPlayerTeam(teamS[1].id, Team.BLUE);
	  }
	  return;
	  }
	  else if (teamR.length < teamB.length) {
	  room.setPlayerTeam(teamS[0].id, Team.RED);
	  }
	  else {
	  room.setPlayerTeam(teamS[0].id, Team.BLUE);
	  }
	  }
  }
  
  function randomBtn() {
	  if (teamS.length == 0) {
	  return;
	  }
	  else {
	  if (teamR.length == teamB.length) {
	  if (teamS.length > 1) {
	  var r = getRandomInt(teamS.length);
	  room.setPlayerTeam(teamS[r].id, Team.RED);
	  teamS = teamS.filter((spec) => spec.id != teamS[r].id);
	  room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.BLUE);
	  }
	  return;
	  }
	  else if (teamR.length < teamB.length) {
	  room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.RED);
	  }
	  else {
	  room.setPlayerTeam(teamS[getRandomInt(teamS.length)].id, Team.BLUE);
	  }
	  }
  }
  
  function blueToSpecBtn() {
	  resettingTeams = true;
	  setTimeout(() => { resettingTeams = false; }, 100);
	  for (var i = 0; i < teamB.length; i++) {
	  room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
	  }
  }
  
  function redToSpecBtn() {
	  resettingTeams = true;
	  setTimeout(() => { resettingTeams = false; }, 100);
	  for (var i = 0; i < teamR.length; i++) {
	  room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
	  }
  }
  
  function resetBtn() {
	  resettingTeams = true;
	  setTimeout(() => { resettingTeams = false; }, 100);
	  if (teamR.length <= teamB.length) {
	  for (var i = 0; i < teamR.length; i++) {
	  room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
	  room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
	  }
	  for (var i = teamR.length; i < teamB.length; i++) {
	  room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
	  }
	  }
	  else {
	  for (var i = 0; i < teamB.length; i++) {
	  room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
	  room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
	  }
	  for (var i = teamB.length; i < teamR.length; i++) {
	  room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
	  }
	  }
  }
  
  function blueToRedBtn() {
	  resettingTeams = true;
	  setTimeout(() => { resettingTeams = false; }, 100);
	  for (var i = 0; i < teamB.length; i++) {
	  room.setPlayerTeam(teamB[i].id, Team.RED);
	  }
  }
  
	  /* GAME FUNCTIONS */
  
function checkTime() {
	  const scores = room.getScores();
	  game.scores = scores;
	  if (Math.abs(scores.time - scores.timeLimit) <= 0.01 && scores.timeLimit != 0) {
	  if (scores.red != scores.blue) {
	  if (checkTimeVariable == false) {
	  checkTimeVariable = true;
	  setTimeout(() => { checkTimeVariable = false; }, 3000);
	  scores.red > scores.blue ? endGame(Team.RED) : endGame(Team.BLUE);
	  setTimeout(() => { room.stopGame(); }, 2000);
	  }
	  return;
	  }
	  goldenGoal = true;
	  room.sendAnnouncement(""[‚öΩ] GOL DE OURO"", null, Cor.Branco, Normal);
	  }
	  if (Math.abs(drawTimeLimit * 60 - scores.time - 60) <= 0.01 && players.length > 2) {
	  if (checkTimeVariable == false) {
	  checkTimeVariable = true;
	  setTimeout(() => { checkTimeVariable = false; }, 10);
	  room.sendAnnouncement(""[‚ûï] 2 MINUTOS DE ACR√âSCIMOS!!"", null, Cor.Branco, Normal);
	  }
	  }
	  if (Math.abs(scores.time - drawTimeLimit * 120) <= 0.01 && players.length > 2) {
	  if (checkTimeVariable == false) {
	  checkTimeVariable = true;
	  setTimeout(() => { checkTimeVariable = false; }, 10);
	  endGame(Team.SPECTATORS);
	  room.stopGame();
	  goldenGoal = false;
	  }
	}
}
  
function endGame(winner) { // handles the end of a game : no stopGame function inside
    players.length >= 2 * maxTeamSize - 1 ? activateChooseMode() : null;
    const scores = room.getScores();
    game.scores = scores;
    Rposs = Rposs / (Rposs + Bposs);
    Bposs = 1 - Rposs;
    lastWinner = winner;
    endGameVariable = true;
    if (winner == Team.RED) {
        streak++;
        room.sendAnnouncement(""üî¥ O RED VENCEU "" + scores.red + ""-"" + scores.blue + "", STREAK : "" + streak + "" üèÜ"", null, Cor.Vermelho, Normal);
    } else if (winner == Team.BLUE) {
        streak = 1;
        room.sendAnnouncement(""üîµ O BLUE VENCEU "" + scores.blue + ""-"" + scores.red + "", STREAK : "" + streak + "" üèÜ"", null, Cor.Azul, Normal);
    }
    room.sendAnnouncement(""POSSE DE BOLA: üî¥ "" + (Rposs * 100).toPrecision(3).toString() + ""% : "" + (Bposs * 100).toPrecision(3).toString() + ""% üîµ"", null, Cor.Azulclaro, ""bold"");
    scores.red == 0 ? (scores.blue == 0 ?
            room.sendAnnouncement(GKList[0].name + "" E "" + GKList[1].name + "" S√ÉO OS MELHORES GK DA SALA !!! "", null, Cor.Amrelo, Normal) :
            room.sendAnnouncement(GKList[1].name + "" UMA VERDADEIRO ET NO GOL!! PASSA NADA!!! "", null, Cor.Amrelo, Normal)) : scores.blue == 0 ?
        room.sendAnnouncement(GKList[0].name + "" UM VERDADEIRO GK !!! "", null, Cor.Amrelo, Normal ) : null
		RecSistem.sendDiscordWebhook(scores);
		room.sendAnnouncement(""Grava√ß√£o enviada ao discord. ID: "" + `${getDate()}`+`${cod}${cod1}${cod2}${cod3}${cod4}`, null, Cor.Amrelo, Negrito);
		updateStats();
}

  
  function quickRestart() {
	  room.stopGame();
	  setTimeout(() => { room.startGame(); }, 2000);
  }
  
  function resumeGame() {
	  setTimeout(() => { room.startGame(); }, 2000);
	  setTimeout(() => { room.pauseGame(false); }, 1000);
  }
  
  function activateChooseMode() { // Modo escolhas ativado
	  inChooseMode = true;
	  slowMode = 2;
  }
  
  function deactivateChooseMode() { // Modo escolhas desativado
	  inChooseMode = false;
	  clearTimeout(timeOutCap);
	  if (slowMode != 0) {
	  slowMode = 0;
	  }
	  redCaptainChoice = """";
	  blueCaptainChoice = """";
  }
  
  function loadMap(map, scoreLim, timeLim) { // customiza√ß√£o de mapas
	  if (map != '') {
	  room.setCustomStadium(map);
	  } else {
	  console.log(""error cargando mapa"")
	  room.setDefaultStadium(""Classic"");
	  }
	  room.setScoreLimit(scoreLim);
	  room.setTimeLimit(timeLim);
  }
  
	  /* PLAYER FUNCTIONS */
  
  function updateTeams() { // update the players' list and all the teams' list
	  players = room.getPlayerList().filter((player) => player.id != 0 && !getAFK(player));
	  teamR = players.filter(p => p.team === Team.RED);
	  teamB = players.filter(p => p.team === Team.BLUE);
	  teamS = players.filter(p => p.team === Team.SPECTATORS);
  }
  
  function handleInactivity() { // handles inactivity : players will be kicked after afkLimit
    if (countAFK && (teamR.length + teamB.length) > 1) {
        for (var i = 0; i < teamR.length; i++) {
            setActivity(teamR[i], getActivity(teamR[i]) + 1);
        }
        for (var i = 0; i < teamB.length; i++) {
            setActivity(teamB[i], getActivity(teamB[i]) + 1);
        }
    }
    for (var i = 0; i < extendedP.length; i++) {
        if (extendedP[i][eP.ACT] == 60 * (2 / 3 * afkLimit)) {
			room.sendAnnouncement(""@"" + room.getPlayer(extendedP[i][eP.ID]).name + "", mova-se em "" + Math.floor(afkLimit / 3) + "" segundos, para n√£o ser kickado pela verifica√ß√£o de 'AFKS'!"", extendedP[i][eP.ID], Cor.Laranja, Negrito);

        }
        if (extendedP[i][eP.ACT] >= 60 * afkLimit) {
            extendedP[i][eP.ACT] = 0;
            if (room.getScores().time <= afkLimit - 0.5) {
                setTimeout(() => { !inChooseMode ? quickRestart() : room.stopGame(); }, 10);
            }
            room.kickPlayer(extendedP[i][eP.ID], ""AFK"", false);
        }
    }
}
  
  function getAuth(player) {
	  return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.AUTH] : null;
  }
  
  function getAFK(player) {
	  return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.AFK] : null;
  }
  
  function setAFK(player, value) {
	  extendedP.filter((a) => a[0] == player.id).forEach((player) => player[eP.AFK] = value);
  }
  
  function getActivity(player) {
	  return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.ACT] : null;
  }
  
  function setActivity(player, value) {
	  extendedP.filter((a) => a[0] == player.id).forEach((player) => player[eP.ACT] = value);
  }
  
  function getGK(player) {
	  return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.GK] : null;
  }
  
  function setGK(player, value) {
	  extendedP.filter((a) => a[0] == player.id).forEach((player) => player[eP.GK] = value);
  }
  
  function getMute(player) {
	  return extendedP.filter((a) => a[0] == player.id) != null ? extendedP.filter((a) => a[0] == player.id)[0][eP.MUTE] : null;
  }
  
  function setMute(player, value) {
	  extendedP.filter((a) => a[0] == player.id).forEach((player) => player[eP.MUTE] = value);
  }
  
  function updateRoleOnPlayerIn() { // Se a lista de specs for = 0, inicia o jogo.
	  updateTeams()
	  if (inChooseMode) {
	  if (players.length == 6) {
	  loadMap(Mapa, scoreMapa, tempoMapa);
	  }
	  getSpecList(teamR.length <= teamB.length ? teamR[0] : teamB[0]);
	  }
	  balanceTeams();	
  }
  
  function updateRoleOnPlayerOut() { // Detectar ragequit e atualizar times.
	  updateTeams();
	  if (room.getScores() != null) {
	  var scores = room.getScores();
	  if (players.length >= 2 * maxTeamSize && scores.time >= (5 / 6) * game.scores.timeLimit && teamR.length != teamB.length) {
	  if (teamR.length < teamB.length) {
	  if (scores.blue - scores.red == 2) {
	  endGame(Team.BLUE);
	  room.sendAnnouncement(""Ragequit, jogo finalizado"");
	  setTimeout(() => { room.stopGame(); }, 100);
	  return;
	  }
	  }
	  else {
	  if (scores.red - scores.blue == 2) {
	  endGame(Team.RED);
	  room.sendAnnouncement(""Ragequit, jogo finalizado"");
	  setTimeout(() => { room.stopGame(); }, 100);
	  return;
	  }
	  }
	  }
	  }
	  if (inChooseMode) {
	  if (players.length < 6) {
	  loadMap(Mapa, scoreMapa, tempoMapa);
	  }
	  if (teamR.length == 0 || teamB.length == 0) {
	  teamR.length == 0 ? room.setPlayerTeam(teamS[0].id, Team.RED) : room.setPlayerTeam(teamS[0].id, Team.BLUE);
	  return;
	  }
	  if (Math.abs(teamR.length - teamB.length) == teamS.length) {
	  room.sendAnnouncement(""Nenhum player restou, completando equipes e iniciando ..."");
	  deactivateChooseMode();
	  resumeGame();
	  var b = teamS.length;
	  if (teamR.length > teamB.length) {
	  for (var i = 0; i < b; i++) {
	  setTimeout(() => { room.setPlayerTeam(teamS[0].id, Team.BLUE); }, 5 * i);
	  }
	  }
	  else {
	  for (var i = 0; i < b; i++) {
	  setTimeout(() => { room.setPlayerTeam(teamS[0].id, Team.RED); }, 5 * i);
	  }
	  }
	  return;
	  }
	  if (streak == 0 && room.getScores() == null) {
	  if (Math.abs(teamR.length - teamB.length) == 2) { // se algu√©m saiu de um time tem 2 jogadores a mais que o outro.
	  room.sendAnnouncement("" Equilibrando equipes... "");
	  teamR.length > teamB.length ? room.setPlayerTeam(teamR[teamR.length - 1].id, Team.SPECTATORS) : room.setPlayerTeam(teamB[teamB.length - 1].id, Team.SPECTATORS); }
	  }
	  if (teamR.length == teamB.length && teamS.length < 2) {
	  deactivateChooseMode();
	  resumeGame();
	  return;
	  }
	  capLeft ? choosePlayer() : getSpecList(teamR.length <= teamB.length ? teamR[0] : teamB[0]);
	  }
	  balanceTeams();
  }
  
  function balanceTeams() { // Fun√ß√£o que balan√ßea os times, corrigi times que est√£o com player a menos.
	  if (!inChooseMode) {
		  if (players.length == 1 && teamR.length == 0) { // 1 player
			  quickRestart();
			  loadMap(Mapa, scoreMapa, tempoMapa);
			  room.setPlayerTeam(players[0].id, Team.RED);
		  }
		  else if (Math.abs(teamR.length - teamB.length) == teamS.length && teamS.length > 0) { // spec players supply required players
			  const n = Math.abs(teamR.length - teamB.length);
			  if (teamR.length > teamB.length) {
				  for (var i = 0; i < n; i++) {
					  room.setPlayerTeam(teamS[i].id, Team.BLUE);
				  }
			  }
			  else {
				  for (var i = 0; i < n; i++) {
					  room.setPlayerTeam(teamS[i].id, Team.RED);
				  }
			  }
		  }
		  else if (Math.abs(teamR.length - teamB.length) > teamS.length) { //no sufficient players
			  const n = Math.abs(teamR.length - teamB.length);
			  if (players.length == 1) {
				  quickRestart();
				  loadMap(Mapa, scoreMapa, tempoMapa);
				  room.setPlayerTeam(players[0].id, Team.RED);
				  return;
			  }
			  else if (players.length == 6) {
				  quickRestart();
				  
			  }
			  if (players.length == maxTeamSize * 2 - 1) {
				  allReds = [];
				  allBlues = [];
			  }
			  if (teamR.length > teamB.length) {
				  for (var i = 0; i < n; i++) {
					  room.setPlayerTeam(teamR[teamR.length - 1 - i].id, Team.SPECTATORS);
				  }
			  }
			  else {
				  for (var i = 0; i < n; i++) {
					  room.setPlayerTeam(teamB[teamB.length - 1 - i].id, Team.SPECTATORS);
				  }
			  }
		  }
		  else if (Math.abs(teamR.length - teamB.length) < teamS.length && teamR.length != teamB.length) { //choose mode
			  room.pauseGame(true)
			  activateChooseMode();
			  choosePlayer();
		  }
		  else if (teamS.length >= 2 && teamR.length == teamB.length && teamR.length < maxTeamSize) { //2 in red 2 in blue and 2 or more spec
			  if (teamR.length == 2) {
				  quickRestart();
				  if (!teamS.length == 2){
					  
				  }
			  }
			  topBtn();
		  }
	  }
  }
  
  function alterar_cor(player, message){
	if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L1.includes(player.name) === true) {
	if(cL1.length == 1 && message.length <= 11){ 
	cL1.splice(cL1.indexOf(message)) + cL1.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL1)}}

	if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L2.includes(player.name) === true) {
	if(cL2.length == 1 && message.length <= 11){ 
	cL2.splice(cL2.indexOf(message)) + cL2.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL2)}}
	
	if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L3.includes(player.name) === true) {
	if(cL3.length == 1 && message.length <= 11){ 
	cL3.splice(cL3.indexOf(message)) + cL3.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL3)}}
	
	if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L4.includes(player.name) === true) {
	if(cL4.length == 1 && message.length <= 11){ 
	cL4.splice(cL4.indexOf(message)) + cL4.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL4)}}
	
	if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L5.includes(player.name) === true) {
	if(cL5.length == 1 && message.length <= 11){ 
	cL5.splice(cL5.indexOf(message)) + cL5.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL5)}}

	if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L6.includes(player.name) === true) {
		if(cL6.length == 1 && message.length <= 11){ 
		cL6.splice(cL6.indexOf(message)) + cL6.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL6)}}

		if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L7.includes(player.name) === true) {
			if(cL7.length == 1 && message.length <= 11){ 
			cL7.splice(cL7.indexOf(message)) + cL7.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL7)}}

			if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L8.includes(player.name) === true) {
				if(cL8.length == 1 && message.length <= 11){ 
				cL8.splice(cL8.indexOf(message)) + cL8.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL8)}}

				if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L10.includes(player.name) === true) {
					if(cL10.length == 1 && message.length <= 11){ 
					cL10.splice(cL10.indexOf(message)) + cL10.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL10)}}

					if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L11.includes(player.name) === true) {
						if(cL11.length == 1 && message.length <= 11){ 
						cL11.splice(cL11.indexOf(message)) + cL11.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL11)}}

						if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L12.includes(player.name) === true) {
							if(cL12.length == 1 && message.length <= 11){ 
							cL12.splice(cL12.indexOf(message)) + cL12.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL12)}}

							if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L13.includes(player.name) === true) {
								if(cL13.length == 1 && message.length <= 11){ 
								cL13.splice(cL13.indexOf(message)) + cL13.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL13)}}

								if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L14.includes(player.name) === true) {
									if(cL14.length == 1 && message.length <= 11){ 
									cL14.splice(cL14.indexOf(message)) + cL14.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL14)}}

									if (message.substr(0, 5) == ""!cor "" && verificados.includes(player.name) != false && L15.includes(player.name) === true) {
										if(cL15.length == 1 && message.length <= 11){ 
										cL15.splice(cL15.indexOf(message)) + cL15.push('0x'+ message.substr(5)) + room.sendAnnouncement(`${cor_definida}` + message.substr(5), player.id, cL15)}}
	
								}

	

function alterar_fonte(player, message){
	if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L1.includes(player.name) === true) { 
	if(fL1.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){
	fL1.splice(fL1.indexOf(message)) + fL1.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
	else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}
	
	if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L2.includes(player.name) === true) { 
	if(fL2.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
	fL2.splice(fL2.indexOf(message)) + fL2.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
	else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}
	
	if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L3.includes(player.name) === true) { 
	if(fL3.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
	fL3.splice(fL3.indexOf(message)) + fL3.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
	else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}
	
	if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L4.includes(player.name) === true) { 
	if(fL4.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
	fL4.splice(fL4.indexOf(message)) + fL4.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
	else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}
	
	if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L5.includes(player.name) === true) { 
	if(fL5.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
	fL5.splice(fL5.indexOf(message)) + fL5.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
	else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

	if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L6.includes(player.name) === true) { 
		if(fL6.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
		fL6.splice(fL6.indexOf(message)) + fL6.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
		else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

		if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L7.includes(player.name) === true) { 
			if(fL7.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
			fL7.splice(fL7.indexOf(message)) + fL7.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
			else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

			if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L8.includes(player.name) === true) { 
				if(fL8.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
				fL8.splice(fL8.indexOf(message)) + fL8.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
				else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

				if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L10.includes(player.name) === true) { 
					if(fL10.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
					fL10.splice(fL10.indexOf(message)) + fL10.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
					else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

					if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L11.includes(player.name) === true) { 
						if(fL11.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
						fL11.splice(fL11.indexOf(message)) + fL11.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
						else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

						if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L12.includes(player.name) === true) { 
							if(fL12.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
							fL12.splice(fL12.indexOf(message)) + fL12.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
							else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

							if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L13.includes(player.name) === true) { 
								if(fL13.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
								fL13.splice(fL13.indexOf(message)) + fL13.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
								else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

								if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L14.includes(player.name) === true) { 
									if(fL14.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
									fL14.splice(fL14.indexOf(message)) + fL14.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
									else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}

									if (message.substr(0, 7) == ""!fonte "" && verificados.includes(player.name) != false && L15.includes(player.name) === true) { 
										if(fL15.length == 1 && message.substr(7) === fontsdisp[0] || message.substr(7) === fontsdisp[1] || message.substr(7) === fontsdisp[2] || message.substr(7) === fontsdisp[3] || message.substr(7) === fontsdisp[4]){ 
										fL15.splice(fL15.indexOf(message)) + fL15.push(message.substr(7)) + room.sendAnnouncement(`${fonte_definida}` + message.substr(7), player.id)}
										else { room.sendAnnouncement(`${erroapi} ${fontsdisp}`, player.id) }}
}

  
  function choosePlayer() { // Fun√ß√£o para que os capit√£es possam escolher.
	  clearTimeout(timeOutCap);
	  if (teamR.length <= teamB.length && teamR.length != 0) {
	  room.sendAnnouncement(""Escolha o n√∫mero disponivel ou use random, bottom e/ou top"", teamR[0].id);
	  timeOutCap = setTimeout(function (player) { room.sendAnnouncement(""Seja r√°pido @"" + player.name + "", restam "" + Number.
	  parseInt(chooseTime / 2) + "" segundos para escolher !""); timeOutCap = setTimeout(function (player) { room.
	  kickPlayer(player.id, ""N√£o escolheu a tempo, ou esteve AFK!"", false); }, chooseTime * 500, teamR[0]); }, chooseTime * 1000, teamR[0]);
	  }
	  else if (teamB.length < teamR.length && teamB.length != 0) {
	  room.sendAnnouncement(""Escolha o n√∫mero disponivel ou use random, bottom e/ou top"", teamB[0].
	  id); timeOutCap = setTimeout(function (player) { room.sendAnnouncement(""Seja r√°pido @"" + player.name + "", restam "" + Number.
	  parseInt(chooseTime / 2) + "" segundos para escolher !"", player.id); timeOutCap = setTimeout(function (player) { room.
	  kickPlayer(player.id, ""N√£o escolheu a tempo, ou esteva AFK!"", false); }, chooseTime * 500, teamB[0]); }, chooseTime * 1000, teamB[0]);
	  }
	  if (teamR.length != 0 && teamB.length != 0) getSpecList(teamR.length <= teamB.length ? teamR[0] : teamB[0]);
  }
  
  function getSpecList(player) {
    var cstm = ""[PV] Jogadores : "";
    for (var i = 0; i < teamS.length; i++) {
        if (140 - cstm.length < (teamS[i].name + ""["" + (i + 1) + ""], "").length) {
            room.sendAnnouncement(cstm, player.id);
            cstm = ""... "";
        }
        cstm += teamS[i].name + ""["" + (i + 1) + ""], "";
    }
    cstm = cstm.substring(0, cstm.length - 2);
    cstm += ""."";
    room.sendAnnouncement(cstm, player.id);
}


function getLastTouchOfTheBall() {
	const ballPosition = room.getBallPosition();
	updateTeams();
	for (var i = 0; i < players.length; i++) {
	if (players[i].position != null) {
	var distanceToBall = pointDistance(players[i].position, ballPosition);
	if (distanceToBall < triggerDistance) {
	!activePlay ? activePlay = true : null;
	if (lastTeamTouched == players[i].team && lastPlayersTouched[0] != null && lastPlayersTouched[0].id != players[i].id) {
	lastPlayersTouched[1] = lastPlayersTouched[0];
	lastPlayersTouched[0] = players[i];
	}
	lastTeamTouched = players[i].team;
	}
	}
	}
	}
	
	function getStats() { // gives possession, ball speed and GK of each team
	if (activePlay) {
	updateTeams();
	lastTeamTouched == Team.RED ? Rposs++ : Bposs++;
	var ballPosition = room.getBallPosition();
	point[1] = point[0];
	point[0] = ballPosition;
	ballSpeed = (pointDistance(point[0], point[1]) * 60 * 60 * 60)/15000;
	var k = [-1, Infinity];
	for (var i = 0; i < teamR.length; i++) {
	if (teamR[i].position.x < k[1]) {
	k[0] = teamR[i];
	k[1] = teamR[i].position.x;
	}
	}
	k[0] != -1 ? setGK(k[0], getGK(k[0]) + 1) : null;
	k = [-1, -Infinity];
	for (var i = 0; i < teamB.length; i++) {
	if (teamB[i].position.x > k[1]) {
	k[0] = teamB[i];
	k[1] = teamB[i].position.x;
	}
	}
	k[0] != -1 ? setGK(k[0], getGK(k[0]) + 1) : null;
	findGK();
	}
	}
	
	function updateStats() {
	if (players.length >= 2 * maxTeamSize && (game.scores.time >= (5 / 6) * game.scores.timeLimit || game.scores.red == game.scores.scoreLimit || game.scores.blue == game.scores.scoreLimit) && allReds.length >= maxTeamSize && allBlues.length >= maxTeamSize) {
	var stats;
	for (var i = 0; i < allReds.length; i++) {
	localStorage.getItem(getAuth(allReds[i])) ? stats = JSON.parse(localStorage.getItem(getAuth(allReds[i]))) : stats = [0, 0, 0, 0, ""0.00"", 0, 0, 0, 0, ""0.00"", ""player"", allReds[i].name];
	stats[Ss.GA]++;
	lastWinner == Team.RED ? stats[Ss.WI]++ : lastWinner == Team.BLUE ? stats[Ss.LS]++ : stats[Ss.DR]++;
	stats[Ss.WR] = (100 * stats[Ss.WI] / stats[Ss.GA]).toPrecision(3);
	localStorage.setItem(getAuth(allReds[i]), JSON.stringify(stats));
	}
	for (var i = 0; i < allBlues.length; i++) {
	localStorage.getItem(getAuth(allBlues[i])) ? stats = JSON.parse(localStorage.getItem(getAuth(allBlues[i]))) : stats = [0, 0, 0, 0, ""0.00"", 0, 0, 0, 0, ""0.00"", ""player"", allBlues[i].name];
	stats[Ss.GA]++;
	lastWinner == Team.BLUE ? stats[Ss.WI]++ : lastWinner == Team.RED ? stats[Ss.LS]++ : stats[Ss.DR]++;
	stats[Ss.WR] = (100 * stats[Ss.WI] / stats[Ss.GA]).toPrecision(3);
	localStorage.setItem(getAuth(allBlues[i]), JSON.stringify(stats));
	}
	for (var i = 0; i < game.goals.length; i++) {
	if (game.goals[i].striker != null) {
	if ((allBlues.concat(allReds)).findIndex((player) => player.id == game.goals[i].striker.id) != -1) {
	stats = JSON.parse(localStorage.getItem(getAuth(game.goals[i].striker)));
	stats[Ss.GL]++;
	localStorage.setItem(getAuth(game.goals[i].striker), JSON.stringify(stats));
	}
	}
	if (game.goals[i].assist != null) {
	if ((allBlues.concat(allReds)).findIndex((player) => player.name == game.goals[i].assist.name) != -1) {
	stats = JSON.parse(localStorage.getItem(getAuth(game.goals[i].assist)));
	stats[Ss.AS]++;
	localStorage.setItem(getAuth(game.goals[i].assist), JSON.stringify(stats));
	}
	}
	}
	if (allReds.findIndex((player) => player.id == GKList[0].id) != -1) {
	stats = JSON.parse(localStorage.getItem(getAuth(GKList[0])));
	stats[Ss.GK]++;
	game.scores.blue == 0 ? stats[Ss.CS]++ : null;
	stats[Ss.CP] = (100 * stats[Ss.CS] / stats[Ss.GK]).toPrecision(3);
	localStorage.setItem(getAuth(GKList[0]), JSON.stringify(stats));
	}
	if (allBlues.findIndex((player) => player.id == GKList[1].id) != -1) {
	stats = JSON.parse(localStorage.getItem(getAuth(GKList[1])));
	stats[Ss.GK]++;
	game.scores.red == 0 ? stats[Ss.CS]++ : null;
	stats[Ss.CP] = (100 * stats[Ss.CS] / stats[Ss.GK]).toPrecision(3);
	localStorage.setItem(getAuth(GKList[1]), JSON.stringify(stats));
	}
	}
	}
	
	function findGK() {
	var tab = [[-1,""""], [-1,""""]];
	for (var i = 0; i < extendedP.length ; i++) {
	if (room.getPlayer(extendedP[i][eP.ID]) != null && room.getPlayer(extendedP[i][eP.ID]).team == Team.RED) {
	if (tab[0][0] < extendedP[i][eP.GK]) {
	tab[0][0] = extendedP[i][eP.GK];
	tab[0][1] = room.getPlayer(extendedP[i][eP.ID]);
	}
	}
	else if (room.getPlayer(extendedP[i][eP.ID]) != null && room.getPlayer(extendedP[i][eP.ID]).team == Team.BLUE) {
	if (tab[1][0] < extendedP[i][eP.GK]) {
	tab[1][0] = extendedP[i][eP.GK];
	tab[1][1] = room.getPlayer(extendedP[i][eP.ID]);
	}
	}
	}
	GKList = [tab[0][1], tab[1][1]];
	}

function isBlacklisted(player){
    return blacklist.filter(b => b.ipv4 == player.ipv4 || b.Auth == player.auth || b.Conn == player.conn).length > 0;
}

  function getDatehoras(){
	let data = new Date(),
	dia=data.getDate().toString().padStart(2, '0'),
	mes=(data.getMonth()+1).toString().padStart(2, '0'),
	horas=data.getHours().toString().padStart(2, '0'),
	minutos=data.getMinutes().toString().padStart(2, '0');
	return `${horas}:${minutos}`;
}

function getDateInfo(){
	let data = new Date(),
	dia=data.getDate().toString().padStart(2, '0'),
	mes=(data.getMonth()+1).toString().padStart(2, '0'),
	ano=data.getFullYear(),
	horas=data.getHours().toString().padStart(2, '0'),
	minutos=data.getMinutes().toString().padStart(2, '0');
	segundos=data.getSeconds().toString().padStart(2, '0');
	return `${dia} do ${mes} de ${ano}, √°s ${horas}:${minutos}:${segundos}`;
}

function dataehora(){
	let data = new Date(),
	dia=data.getDate().toString().padStart(2, '0'),
	mes=(data.getMonth()+1).toString().padStart(2, '0'),
	ano=data.getFullYear(),
	horas=data.getHours().toString().padStart(2, '0'),
	minutos=data.getMinutes().toString().padStart(2, '0');
	segundos=data.getSeconds().toString().padStart(2, '0');
	return `${dia}/${mes} de ${ano}, √°s ${horas}:${minutos} e ${segundos} segundos`;
}


function multiplas_abas(player){
conns.push([player.id,player.name,player.auth,player.conn])
playerConn[player.id] = player.conn; 
if (room.getPlayerList().filter((p) => playerConn[p.id] == player.conn).length > 1) 
room.kickPlayer(room.getPlayerList().filter((p) => playerConn[p.id] == player.conn)[1].id, ""Voc√™ j√° est√° nessa sala em outra aba, feche a outra aba."", false)
}

function playerChat(player, message) {
	var playerTargetIndex = players.findIndex(
		(p) => p.name.replaceAll(' ', '_') == msgArray[0].substring(2)
	);
	if (playerTargetIndex == -1) {
		room.sendAnnouncement(
			""Player inv√°lido, verifique se o nome digitado est√° correto."",
			player.id,
			Cor.Vermelho,
			'bold',
		);
		return false;
	}
	var playerTarget = players[playerTargetIndex];
	if (player.id == playerTarget.id) {
		room.sendAnnouncement(
			""Voc√™ n√£o pode enviar um PV para si mesmo!"",
			player.id,
			Cor.Vermelho,
			'bold',
			null
		);
		return false;
	}
	var messageFrom = `[Privado com ${playerTarget.name}] ${player.name}: ${msgArray.slice(1).join(' ')}`

	var messageTo = `[Privado com ${player.name}] ${player.name}: ${msgArray.slice(1).join(' ')}`

	room.sendAnnouncement(
		messageFrom,
		player.id,
		Cor.Azulclaro,
		Normal,
		1
	);
	room.sendAnnouncement(
		messageTo,
		playerTarget.id,
		Cor.Azulclaro,
		Normal,
		1
	);
}

room.onGameTick = function () {
    checkTime()
    getLastTouchOfTheBall()
    getStats()
    handleInactivity()
	lastScores = room.getScores()
}"
i9nTy5j4,Untitled,Josif_tepe,C++,Thursday 14th of December 2023 11:54:06 AM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <algorithm>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    string s;
    cin >> s;
    int n = (int) s.size();
    if(n <= 1000) {
        int res = 0;
        for(int i = 0; i < n; i++) {
            string tmp = """";
            for(int j = i; j < n; j++) {
                tmp += s[j];
                string rev_tmp = tmp;
                reverse(rev_tmp.begin(), rev_tmp.end());
                string x = tmp + rev_tmp + tmp + rev_tmp;
                if(s.find(x) != string::npos) {
                    res = max(res, (int) x.size());
                }
            }
        }
        cout << res << endl;
    }
    
    return 0;
}
"
YbMc71bC,G2A Refund Exploit Dec 2023,G2ARefundExploit,GetText,Thursday 14th of December 2023 11:49:05 AM CDT,"G2A refund exploit updated guide - any item for free on G2A.com

https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view#g2a_refund_exploit.pdf

Working as of 
13 December 2023

845697"
VkNa2eQE,Untitled,Nikaas,C#,Thursday 14th of December 2023 11:37:36 AM CDT,"        public override void SetItem<T>(string name, T value)
        {
            string playerPrefsKey = GetPlayerPrefsKey(name);
            switch (value)
            {
                case int:
                case Enum:
                    PlayerPrefs.SetInt(playerPrefsKey, (int)(object)value);
                    break;
                case float:
                    PlayerPrefs.SetFloat(playerPrefsKey, (float)(object)value);
                    break;
                case string:
                    PlayerPrefs.SetString(playerPrefsKey, (string)(object)value);
                    break;
                case not int and not Enum and not float and not string:
                    throw new Exception($""Can not set data item named {name} of type {typeof(T)}. "" +
                        $""{nameof(PlayerPrefs)} stores only {nameof(Int32)}, {nameof(Single)} or {nameof(String)}."");
            }
        }"
HNHSYknF,Untitled,Josif_tepe,C++,Thursday 14th of December 2023 11:36:31 AM CDT,"class Solution {
public:
    int repeatedStringMatch(string a, string b) {
        int n = a.size(), m = b.size();
        int rep = m / n;
        string s = """";
        for(int i = 0; i < rep; i++) {
            s += a;
        }
        for(int i = 0; i < 5; i++)  {
            if(s.find(b) != string::npos) {
                return rep + i;
            }
            s += a;
            
        }
        return -1;
    }
};"
urE08mkP,Untitled,Josif_tepe,C++,Thursday 14th of December 2023 11:27:37 AM CDT,"class Solution {
public:
    vector<string> findRepeatedDnaSequences(string s) {
        vector<string> res;
        unordered_map<string, int> m;
        int n = s.size();
        for(int i = 0; i < n; i++) {
            string tmp = """";
            for(int j = i; j < min(i + 10, n); j++) {
                tmp += s[j];
            }
            if(tmp.size() == 10) {
                m[tmp]++;
            }
        }
        for(unordered_map<string, int>::iterator it = m.begin(); it != m.end(); it++) {
            if(it->second > 1) {
                res.push_back(it->first);
            }
        }
        return res;
    }
};"
EBS7NNmY,Script para sincronizar el AppScript de Google Sheet con Divi,oscarviedma,HTML,Thursday 14th of December 2023 11:21:07 AM CDT,"<section id=""ov-listado-menu"">
<!-- Aqu√≠ es donde se cargar√° el contenido din√°mico -->
</section>

<script>
// Hacer una solicitud GET a la URL de la aplicaci√≥n web de Google Apps Script
fetch('https://script.google.com/macros/s/AKfycbzeXVrsOq7dvgbnQQn-0Mektvb6P9wLe_BRKoZsq6CqlMh6w-XGUWleBDaYX7f6u9Qr/exec')
	.then(response => response.json())
  .then(data => {
  // Procesar los datos y construir el HTML
    var html = '';
    for (var section in data) {
    	html += '<h2 class=""titulo-seccion"">' + section + '</h2>\n';
    		for (var i = 0; i < data[section].length; i++) {
      		var dish = data[section][i];
          html += '<div class=""card-menu"">\n';
          html += '<div class=""img-cover"">\n';
          html += '<img src=""' + dish.image + '"" alt=""' + dish.name + '"">\n';
          html += '</div>\n';
          html += '<div class=""info-menu"">\n';
          html += '<h3 class=""titulo"">' + dish.name + '</h3>\n';
          html += '<p class=""descripcion"">' + dish.description + '</p>\n';
          html += '<div class=""precio"">' + dish.price + '</div>\n';
          html += '</div>\n';
          html += '</div>\n';
        }
      }
    // Insertar el contenido din√°mico en el contenedor
      document.getElementById('ov-listado-menu').innerHTML = html;
    })
    .catch(error => console.error('Error al obtener el contenido:', error));
</script>"
gJy0eapT,filecheck,iconoclasthero,Bash,Thursday 14th of December 2023 11:19:30 AM CDT,"filecheck() {
if [[ ""$1"" != *\ --\ Audiobook.m4b ]] && printf 'The file specified: %s\nis not in the correct format of\n* -- Audiobook.m4b, checking directory for an m4b file...""
elif [[ ""$1"" == *\ --\ Audiobook.m4b ]] && [[ -f ""$1"" ]]  #suggested this is poor design to ignore the input if it is not in the correct format.
 then
   m4bin=""$1""
   echo ""$m4bin""
else
#   for i in *m4b
#    do
      files=(*m4b)
      elif [[ -f ""$files"" ]] && [[ ""${#files[@]}"" == 1 ]]
       then
         if [[ ""$files"" == *\ --\ Audiobook.m4b ]]
          then
            m4bin=""$files""
         elif [[ ""$files"" == *m4b ]]
          then
            m4bin=""${files/.m4b/ -- Audiobook.m4b}""
            mv ""$files"" ""$m4bin""
         fi
      else
        echo ""No single & appropriate input file found or specified, please check and retry...""
        ls
        exit 1
      fi
fi
}

"
aXC0YVbj,Untitled,Josif_tepe,C++,Thursday 14th of December 2023 11:15:14 AM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <set>
using namespace std;
typedef long long ll;
const int maxn = 205;
int n, o;
const int alphabet_size = 26;
int trie[maxn][alphabet_size];
ll dp[alphabet_size][1 << 9][maxn];
map<int, int> at_trie_end_of_word;
ll rek(int at, int visited, int at_trie) {
    if(at == o and __builtin_popcount(visited) == n) {
        return 1;
    }
    if(at >= o) {
        return 0;
    }
    if(dp[at][visited][at_trie] != -1) {
        return dp[at][visited][at_trie];
    }
    ll res = 0;
    for(int i = 0; i < 26; i++) {
        int c = trie[at_trie][i];
        res += rek(at + 1, visited | at_trie_end_of_word[c], c);
    }
    return dp[at][visited][at_trie] = res;
}
set<string> words;
void gen_strings(int at, int visited, int at_trie, string s) {
    if(at == o and __builtin_popcount(visited) == n) {
        words.insert(s);
        return;
    }
    if(at >= o) {
        return;
    }
    for(int i = 0; i < 26; i++) {
        int c = trie[at_trie][i];
        if(rek(at + 1, visited | at_trie_end_of_word[c], c) > 0) {
            gen_strings(at + 1, visited | at_trie_end_of_word[c], c, s + (char) (i + 'a'));
        }
    }
}
int main() {
    ios_base::sync_with_stdio(false);
    memset(dp, -1, sizeof dp);
    cin >> o >> n;
    vector<string> v(n);
    
    for(int i = 0; i < n; i++) {
        cin >> v[i];
    }
    map<string, int> m1;
    map<int, string> m2;
    int cnt = 1;
    for(int i = 0; i < n; i++) {
        string tmp = """";
        for(int j = 0; j < (int) v[i].size(); j++) {
            tmp += v[i][j];
            m1[tmp] = cnt;
            m2[cnt] = tmp;
            cnt++;
        }
    }
    m1[""""] = 0;
    m2[0] = """";
    for(int i = 0; i <= 100; i++) {
        if(m2.find(i) != m2.end()) {
            for(int j = 0; j < n; j++) {
                if((int) m2[i].size() >= (int) v[j].size() and m2[i].find(v[j]) != string::npos) {
                    at_trie_end_of_word[i] |= (1 << j);
                }
            }
        }
        string tmp = """";
        for(int j = 0; j < 26; j++) {
            tmp = m2[i] + (char) (j + 'a');
            while(m1.find(tmp) == m1.end()) {
                tmp.erase(tmp.begin());
            }
            trie[i][j] = m1[tmp];
        }
        
    }
    ll res = rek(0, 0, 0);
    if(res <= 30) {
        cout << res << endl;
        gen_strings(0, 0, 0, """");
        for(string s : words) {
            cout << s << ""\n"";
        }
    }
    else {
        cout << res << endl;
    }
    return 0;
}
"
JKb1RH4n,Node-RED power monitor,zhexo,JSON,Thursday 14th of December 2023 11:00:38 AM CDT,"[
    {
        ""id"": ""f5feb4f34a9d21a0"",
        ""type"": ""tab"",
        ""label"": ""Flow 1"",
        ""disabled"": false,
        ""info"": """",
        ""env"": []
    },
    {
        ""id"": ""5d3fa99708536e48"",
        ""type"": ""random"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""Machine 1"",
        ""low"": 1,
        ""high"": 10,
        ""inte"": ""true"",
        ""property"": ""payload"",
        ""x"": 310,
        ""y"": 140,
        ""wires"": [
            [
                ""969ec03067c25088"",
                ""65184d8e8df51bdf"",
                ""2f37d955cb717f01""
            ]
        ]
    },
    {
        ""id"": ""7a1e5699db5ba318"",
        ""type"": ""random"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""Machine 2"",
        ""low"": 1,
        ""high"": 10,
        ""inte"": ""true"",
        ""property"": ""payload"",
        ""x"": 310,
        ""y"": 220,
        ""wires"": [
            [
                ""32b45174fabda3b9"",
                ""22506ffce87ae681"",
                ""c2707c23f7108db9""
            ]
        ]
    },
    {
        ""id"": ""35b5761543c7e83c"",
        ""type"": ""random"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""Machine 3"",
        ""low"": 1,
        ""high"": 10,
        ""inte"": ""true"",
        ""property"": ""payload"",
        ""x"": 310,
        ""y"": 300,
        ""wires"": [
            [
                ""7037845f1b6fbb05"",
                ""841a73baf48df2bf"",
                ""93caf6d52b988881""
            ]
        ]
    },
    {
        ""id"": ""783c99fc6f875824"",
        ""type"": ""random"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""Machine 4"",
        ""low"": 1,
        ""high"": 10,
        ""inte"": ""true"",
        ""property"": ""payload"",
        ""x"": 310,
        ""y"": 380,
        ""wires"": [
            [
                ""0a9ffe41295556a0"",
                ""1068a2c6147fb98d"",
                ""afcefcb4f443dcc9""
            ]
        ]
    },
    {
        ""id"": ""261121d35b08329e"",
        ""type"": ""random"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""Machine 5"",
        ""low"": 1,
        ""high"": 10,
        ""inte"": ""true"",
        ""property"": ""payload"",
        ""x"": 310,
        ""y"": 460,
        ""wires"": [
            [
                ""6477b1fe5bcfaa33"",
                ""79595d42f1ee1f80"",
                ""6bd80e52fc22117d""
            ]
        ]
    },
    {
        ""id"": ""e9f7cad779d3aaee"",
        ""type"": ""inject"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""5 sec"",
        ""props"": [
            {
                ""p"": ""payload""
            },
            {
                ""p"": ""topic"",
                ""vt"": ""str""
            }
        ],
        ""repeat"": ""1"",
        ""crontab"": """",
        ""once"": true,
        ""onceDelay"": 0.1,
        ""topic"": """",
        ""payload"": """",
        ""payloadType"": ""date"",
        ""x"": 110,
        ""y"": 260,
        ""wires"": [
            [
                ""5d3fa99708536e48"",
                ""7a1e5699db5ba318"",
                ""35b5761543c7e83c"",
                ""783c99fc6f875824"",
                ""261121d35b08329e""
            ]
        ]
    },
    {
        ""id"": ""969ec03067c25088"",
        ""type"": ""ui_gauge"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": """",
        ""group"": ""0be107e5ba0dc7e2"",
        ""order"": 1,
        ""width"": 3,
        ""height"": 3,
        ""gtype"": ""gage"",
        ""title"": ""Power output 1"",
        ""label"": ""W"",
        ""format"": ""{{value}}"",
        ""min"": 0,
        ""max"": 10,
        ""colors"": [
            ""#00b500"",
            ""#e6e600"",
            ""#ca3838""
        ],
        ""seg1"": """",
        ""seg2"": """",
        ""diff"": false,
        ""className"": """",
        ""x"": 500,
        ""y"": 80,
        ""wires"": []
    },
    {
        ""id"": ""32b45174fabda3b9"",
        ""type"": ""ui_gauge"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": """",
        ""group"": ""73ef8a147b2fd5f3"",
        ""order"": 1,
        ""width"": 3,
        ""height"": 3,
        ""gtype"": ""gage"",
        ""title"": ""Power output 2"",
        ""label"": ""W"",
        ""format"": ""{{value}}"",
        ""min"": 0,
        ""max"": 10,
        ""colors"": [
            ""#00b500"",
            ""#e6e600"",
            ""#ca3838""
        ],
        ""seg1"": """",
        ""seg2"": """",
        ""diff"": false,
        ""className"": """",
        ""x"": 500,
        ""y"": 160,
        ""wires"": []
    },
    {
        ""id"": ""2f37d955cb717f01"",
        ""type"": ""ui_chart"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": """",
        ""group"": ""0be107e5ba0dc7e2"",
        ""order"": 4,
        ""width"": ""5"",
        ""height"": ""5"",
        ""label"": ""Graph1"",
        ""chartType"": ""line"",
        ""legend"": ""false"",
        ""xformat"": ""HH:mm:ss"",
        ""interpolate"": ""linear"",
        ""nodata"": """",
        ""dot"": false,
        ""ymin"": ""1"",
        ""ymax"": ""10"",
        ""removeOlder"": 1,
        ""removeOlderPoints"": """",
        ""removeOlderUnit"": ""60"",
        ""cutout"": 0,
        ""useOneColor"": false,
        ""useUTC"": false,
        ""colors"": [
            ""#1e78b8"",
            ""#aec7e8"",
            ""#ff7f0e"",
            ""#2ca02c"",
            ""#98df8a"",
            ""#d62728"",
            ""#ff9896"",
            ""#9467bd"",
            ""#c5b0d5""
        ],
        ""outputs"": 1,
        ""useDifferentColor"": false,
        ""className"": """",
        ""x"": 800,
        ""y"": 120,
        ""wires"": [
            []
        ]
    },
    {
        ""id"": ""c2707c23f7108db9"",
        ""type"": ""ui_chart"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": """",
        ""group"": ""73ef8a147b2fd5f3"",
        ""order"": 4,
        ""width"": ""5"",
        ""height"": ""5"",
        ""label"": ""Graph 2"",
        ""chartType"": ""line"",
        ""legend"": ""false"",
        ""xformat"": ""HH:mm:ss"",
        ""interpolate"": ""linear"",
        ""nodata"": """",
        ""dot"": false,
        ""ymin"": ""1"",
        ""ymax"": ""10"",
        ""removeOlder"": 1,
        ""removeOlderPoints"": """",
        ""removeOlderUnit"": ""60"",
        ""cutout"": 0,
        ""useOneColor"": false,
        ""useUTC"": false,
        ""colors"": [
            ""#1f77b4"",
            ""#aec7e8"",
            ""#ff7f0e"",
            ""#2ca02c"",
            ""#98df8a"",
            ""#d62728"",
            ""#ff9896"",
            ""#9467bd"",
            ""#c5b0d5""
        ],
        ""outputs"": 1,
        ""useDifferentColor"": false,
        ""className"": """",
        ""x"": 800,
        ""y"": 200,
        ""wires"": [
            []
        ]
    },
    {
        ""id"": ""841a73baf48df2bf"",
        ""type"": ""ui_chart"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": """",
        ""group"": ""f8b87db8db4def0a"",
        ""order"": 4,
        ""width"": ""5"",
        ""height"": ""5"",
        ""label"": ""Graph 3"",
        ""chartType"": ""line"",
        ""legend"": ""false"",
        ""xformat"": ""HH:mm:ss"",
        ""interpolate"": ""linear"",
        ""nodata"": """",
        ""dot"": false,
        ""ymin"": ""1"",
        ""ymax"": ""10"",
        ""removeOlder"": 1,
        ""removeOlderPoints"": """",
        ""removeOlderUnit"": ""60"",
        ""cutout"": 0,
        ""useOneColor"": false,
        ""useUTC"": false,
        ""colors"": [
            ""#1f77b4"",
            ""#aec7e8"",
            ""#ff7f0e"",
            ""#2ca02c"",
            ""#98df8a"",
            ""#d62728"",
            ""#ff9896"",
            ""#9467bd"",
            ""#c5b0d5""
        ],
        ""outputs"": 1,
        ""useDifferentColor"": false,
        ""className"": """",
        ""x"": 800,
        ""y"": 280,
        ""wires"": [
            []
        ]
    },
    {
        ""id"": ""afcefcb4f443dcc9"",
        ""type"": ""ui_chart"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": """",
        ""group"": ""09eee1ee8667a9f4"",
        ""order"": 4,
        ""width"": ""5"",
        ""height"": ""5"",
        ""label"": ""Graph 4"",
        ""chartType"": ""line"",
        ""legend"": ""false"",
        ""xformat"": ""HH:mm:ss"",
        ""interpolate"": ""linear"",
        ""nodata"": """",
        ""dot"": false,
        ""ymin"": ""1"",
        ""ymax"": ""10"",
        ""removeOlder"": 1,
        ""removeOlderPoints"": """",
        ""removeOlderUnit"": ""60"",
        ""cutout"": 0,
        ""useOneColor"": false,
        ""useUTC"": false,
        ""colors"": [
            ""#1f77b4"",
            ""#aec7e8"",
            ""#ff7f0e"",
            ""#2ca02c"",
            ""#98df8a"",
            ""#d62728"",
            ""#ff9896"",
            ""#9467bd"",
            ""#c5b0d5""
        ],
        ""outputs"": 1,
        ""useDifferentColor"": false,
        ""className"": """",
        ""x"": 800,
        ""y"": 360,
        ""wires"": [
            []
        ]
    },
    {
        ""id"": ""6bd80e52fc22117d"",
        ""type"": ""ui_chart"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": """",
        ""group"": ""d00a672806fb8dd6"",
        ""order"": 4,
        ""width"": ""5"",
        ""height"": ""5"",
        ""label"": ""Graph 5"",
        ""chartType"": ""line"",
        ""legend"": ""false"",
        ""xformat"": ""HH:mm:ss"",
        ""interpolate"": ""linear"",
        ""nodata"": """",
        ""dot"": false,
        ""ymin"": ""1"",
        ""ymax"": ""10"",
        ""removeOlder"": 1,
        ""removeOlderPoints"": """",
        ""removeOlderUnit"": ""60"",
        ""cutout"": 0,
        ""useOneColor"": false,
        ""useUTC"": false,
        ""colors"": [
            ""#1f77b4"",
            ""#aec7e8"",
            ""#ff7f0e"",
            ""#2ca02c"",
            ""#98df8a"",
            ""#d62728"",
            ""#ff9896"",
            ""#9467bd"",
            ""#c5b0d5""
        ],
        ""outputs"": 1,
        ""useDifferentColor"": false,
        ""className"": """",
        ""x"": 800,
        ""y"": 440,
        ""wires"": [
            []
        ]
    },
    {
        ""id"": ""65184d8e8df51bdf"",
        ""type"": ""ui_text"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""group"": ""0be107e5ba0dc7e2"",
        ""order"": 2,
        ""width"": 2,
        ""height"": 2,
        ""name"": ""Value 1"",
        ""label"": """",
        ""format"": ""{{msg.payload}} W"",
        ""layout"": ""col-center"",
        ""className"": """",
        ""style"": false,
        ""font"": """",
        ""fontSize"": """",
        ""color"": ""#000000"",
        ""x"": 660,
        ""y"": 100,
        ""wires"": []
    },
    {
        ""id"": ""22506ffce87ae681"",
        ""type"": ""ui_text"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""group"": ""73ef8a147b2fd5f3"",
        ""order"": 2,
        ""width"": 2,
        ""height"": 2,
        ""name"": ""Value 2"",
        ""label"": """",
        ""format"": ""{{msg.payload}} W"",
        ""layout"": ""row-left"",
        ""className"": """",
        ""style"": false,
        ""font"": """",
        ""fontSize"": """",
        ""color"": ""#000000"",
        ""x"": 660,
        ""y"": 180,
        ""wires"": []
    },
    {
        ""id"": ""7037845f1b6fbb05"",
        ""type"": ""ui_text"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""group"": ""f8b87db8db4def0a"",
        ""order"": 2,
        ""width"": 2,
        ""height"": 2,
        ""name"": ""Value 3"",
        ""label"": """",
        ""format"": ""{{msg.payload}} W"",
        ""layout"": ""row-left"",
        ""className"": """",
        ""style"": false,
        ""font"": """",
        ""fontSize"": """",
        ""color"": ""#000000"",
        ""x"": 660,
        ""y"": 260,
        ""wires"": []
    },
    {
        ""id"": ""93caf6d52b988881"",
        ""type"": ""ui_gauge"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": """",
        ""group"": ""f8b87db8db4def0a"",
        ""order"": 1,
        ""width"": 3,
        ""height"": 3,
        ""gtype"": ""gage"",
        ""title"": ""Power output 3"",
        ""label"": ""W"",
        ""format"": ""{{value}}"",
        ""min"": ""1"",
        ""max"": 10,
        ""colors"": [
            ""#00b500"",
            ""#e6e600"",
            ""#ca3838""
        ],
        ""seg1"": """",
        ""seg2"": """",
        ""diff"": false,
        ""className"": """",
        ""x"": 500,
        ""y"": 240,
        ""wires"": []
    },
    {
        ""id"": ""0a9ffe41295556a0"",
        ""type"": ""ui_gauge"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": """",
        ""group"": ""09eee1ee8667a9f4"",
        ""order"": 1,
        ""width"": 3,
        ""height"": 3,
        ""gtype"": ""gage"",
        ""title"": ""Power output 4"",
        ""label"": ""W"",
        ""format"": ""{{value}}"",
        ""min"": ""1"",
        ""max"": 10,
        ""colors"": [
            ""#00b500"",
            ""#e6e600"",
            ""#ca3838""
        ],
        ""seg1"": """",
        ""seg2"": """",
        ""diff"": false,
        ""className"": """",
        ""x"": 500,
        ""y"": 320,
        ""wires"": []
    },
    {
        ""id"": ""1068a2c6147fb98d"",
        ""type"": ""ui_text"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""group"": ""09eee1ee8667a9f4"",
        ""order"": 2,
        ""width"": 2,
        ""height"": 2,
        ""name"": ""Value 4"",
        ""label"": """",
        ""format"": ""{{msg.payload}} W"",
        ""layout"": ""row-left"",
        ""className"": """",
        ""style"": false,
        ""font"": """",
        ""fontSize"": """",
        ""color"": ""#000000"",
        ""x"": 660,
        ""y"": 340,
        ""wires"": []
    },
    {
        ""id"": ""6477b1fe5bcfaa33"",
        ""type"": ""ui_gauge"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": """",
        ""group"": ""d00a672806fb8dd6"",
        ""order"": 1,
        ""width"": 3,
        ""height"": 3,
        ""gtype"": ""gage"",
        ""title"": ""Power output 5"",
        ""label"": ""W"",
        ""format"": ""{{value}}"",
        ""min"": ""1"",
        ""max"": 10,
        ""colors"": [
            ""#00b500"",
            ""#e6e600"",
            ""#ca3838""
        ],
        ""seg1"": """",
        ""seg2"": """",
        ""diff"": false,
        ""className"": """",
        ""x"": 500,
        ""y"": 400,
        ""wires"": []
    },
    {
        ""id"": ""79595d42f1ee1f80"",
        ""type"": ""ui_text"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""group"": ""d00a672806fb8dd6"",
        ""order"": 2,
        ""width"": 2,
        ""height"": 2,
        ""name"": ""Value 5"",
        ""label"": """",
        ""format"": ""{{msg.payload}} W"",
        ""layout"": ""row-left"",
        ""className"": """",
        ""style"": false,
        ""font"": """",
        ""fontSize"": """",
        ""color"": ""#000000"",
        ""x"": 660,
        ""y"": 420,
        ""wires"": []
    },
    {
        ""id"": ""d8fe5265aaf01a57"",
        ""type"": ""ui_spacer"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""spacer"",
        ""group"": ""0be107e5ba0dc7e2"",
        ""order"": 3,
        ""width"": 2,
        ""height"": 1
    },
    {
        ""id"": ""1f4894a315b3ca54"",
        ""type"": ""ui_spacer"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""spacer"",
        ""group"": ""73ef8a147b2fd5f3"",
        ""order"": 3,
        ""width"": 2,
        ""height"": 1
    },
    {
        ""id"": ""8f44c9d861787e5e"",
        ""type"": ""ui_spacer"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""spacer"",
        ""group"": ""f8b87db8db4def0a"",
        ""order"": 3,
        ""width"": 2,
        ""height"": 1
    },
    {
        ""id"": ""01390f1bc578e7f8"",
        ""type"": ""ui_spacer"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""spacer"",
        ""group"": ""09eee1ee8667a9f4"",
        ""order"": 3,
        ""width"": 2,
        ""height"": 1
    },
    {
        ""id"": ""6d5519680587d5c0"",
        ""type"": ""ui_spacer"",
        ""z"": ""f5feb4f34a9d21a0"",
        ""name"": ""spacer"",
        ""group"": ""d00a672806fb8dd6"",
        ""order"": 3,
        ""width"": 2,
        ""height"": 1
    },
    {
        ""id"": ""0be107e5ba0dc7e2"",
        ""type"": ""ui_group"",
        ""name"": ""Machine 1"",
        ""tab"": ""cac63cb1962e3f68"",
        ""order"": 1,
        ""disp"": true,
        ""width"": ""5"",
        ""collapse"": false,
        ""className"": """"
    },
    {
        ""id"": ""73ef8a147b2fd5f3"",
        ""type"": ""ui_group"",
        ""name"": ""Machine 2"",
        ""tab"": ""cac63cb1962e3f68"",
        ""order"": 2,
        ""disp"": true,
        ""width"": ""5"",
        ""collapse"": false,
        ""className"": """"
    },
    {
        ""id"": ""f8b87db8db4def0a"",
        ""type"": ""ui_group"",
        ""name"": ""Machine 3"",
        ""tab"": ""cac63cb1962e3f68"",
        ""order"": 3,
        ""disp"": true,
        ""width"": ""5"",
        ""collapse"": false,
        ""className"": """"
    },
    {
        ""id"": ""09eee1ee8667a9f4"",
        ""type"": ""ui_group"",
        ""name"": ""Machine 4"",
        ""tab"": ""cac63cb1962e3f68"",
        ""order"": 4,
        ""disp"": true,
        ""width"": ""5"",
        ""collapse"": false,
        ""className"": """"
    },
    {
        ""id"": ""d00a672806fb8dd6"",
        ""type"": ""ui_group"",
        ""name"": ""Machine 5"",
        ""tab"": ""cac63cb1962e3f68"",
        ""order"": 5,
        ""disp"": true,
        ""width"": ""5"",
        ""collapse"": false,
        ""className"": """"
    },
    {
        ""id"": ""cac63cb1962e3f68"",
        ""type"": ""ui_tab"",
        ""name"": ""Power monitor"",
        ""icon"": ""dashboard"",
        ""order"": 2,
        ""disabled"": false,
        ""hidden"": false
    }
]"
c3A3J0RD,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Thursday 14th of December 2023 10:36:47 AM CDT,"Dear Moe,
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-896990"
0rMNhC4P,Untitled,Kirsiina,PHP,Thursday 14th of December 2023 10:26:16 AM CDT,"<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Language Lines
    |--------------------------------------------------------------------------
    |
    | The following language lines are used during authentication for various
    | messages that we need to display to the user. You are free to modify
    | these language lines according to your application's requirements.
    |
    */

    'failed'   => 'These credentials do not match our records.',
    'throttle' => 'Too many login attempts. Please try again in :seconds seconds.',

    // Activation items
    'sentEmail'        => 'We have sent an email to :email.',
    'clickInEmail'     => 'Please click the link in it to activate your account.',
    'anEmailWasSent'   => 'An email was sent to :email on :date.',
    'clickHereResend'  => 'Click here to resend the email.',
    'successActivated' => 'Success, your account has been activated.',
    'unsuccessful'     => 'Your account could not be activated; please try again.',
    'notCreated'       => 'Your account could not be created; please try again.',
    'tooManyEmails'    => 'Too many activation emails have been sent to :email. <br />Please try again in <span class=""label label-danger"">:hours hours</span>.',
    'regThanks'        => 'Thank you for registering, ',
    'invalidToken'     => 'Invalid activation token. ',
    'activationSent'   => 'Activation email sent. ',
    'alreadyActivated' => 'Already activated. ',

    // Labels
    'whoops'          => 'Whoops! ',
    'someProblems'    => 'There were some problems with your input.',
    'email'           => 'E-Mail Address',
    'password'        => 'Password',
    'rememberMe'      => ' Remember Me',
    'login'           => 'Login',
    'forgot'          => 'Forgot Your Password?',
    'forgot_message'  => 'Password Troubles?',
    'name'            => 'Username',
    'first_name'      => 'First Name',
    'last_name'       => 'Last Name',
    'confirmPassword' => 'Confirm Password',
    'register'        => 'Register',

    // Placeholders
    'ph_name'          => 'Username',
    'ph_email'         => 'E-mail Address',
    'ph_firstname'     => 'First Name',
    'ph_lastname'      => 'Last Name',
    'ph_password'      => 'Password',
    'ph_password_conf' => 'Confirm Password',

    // User flash messages
    'sendResetLink' => 'Send Password Reset Link',
    'resetPassword' => 'Reset Password',
    'loggedIn'      => 'You are logged in!',

    // email links
    'pleaseActivate'    => 'Please activate your account.',
    'clickHereReset'    => 'Click here to reset your password: ',
    'clickHereActivate' => 'Click here to activate your account: ',

    // Validators
    'userNameTaken'    => 'Username is taken',
    'userNameRequired' => 'Username is required',
    'fNameRequired'    => 'First Name is required',
    'lNameRequired'    => 'Last Name is required',
    'emailRequired'    => 'Email is required',
    'emailInvalid'     => 'Email is invalid',
    'passwordRequired' => 'Password is required',
    'PasswordMin'      => 'Password needs to have at least 6 characters',
    'PasswordMax'      => 'Password maximum length is 20 characters',
    'captchaRequire'   => 'Captcha is required',
    'CaptchaWrong'     => 'Wrong captcha, please try again.',
    'roleRequired'     => 'User role is required.',

];"
SRFprMEg,Netplan VLAN example,sleekkeepup,YAML,Thursday 14th of December 2023 10:24:17 AM CDT,"---
network:
  version: 2
  renderer: networkd
  ethernets:
    enp0s17: {}
  vlans:
    vlan.2:
      id: 2
      link: enp0s17
      addresses:
        - fd00:2600:1410:1000::b63
      nameservers:
        addresses:
          - fd00:2600:1410:1000::b62
      routes:
        - to: default
          via: fd00:2600:1410:1000::b62
"
QSDYWEnd,filecheck(),iconoclasthero,Bash,Thursday 14th of December 2023 10:10:24 AM CDT,"
filecheck1() {
#[[ ! $1 =~ .+\ --\ Audiobook.m4b ]] && echo ""No file name give..."" && exit
if [[ ""$1"" == *\ --\ Audiobook.m4b ]]
 then
   m4bin=""$1""
   echo ""$m4bin""
else
   for i in *m4b
    do
      files=(*m4b)
      if [[ ""${#files[@]}"" == 1 ]] && [[ ""$files"" == *\ --\ Audiobook.m4b ]]
       then
         m4bin=""$i""
      elif [[ ""${#files[@]}"" == 1 ]] && [[ ""$files"" == *m4b ]]
       then
         m4bin=""${files/.m4b/ -- Audiobook.m4b}""
         mv ""$files"" ""$m4bin""
      else
        echo ""No input file found or specified, please check and retry...""
        ls
        exit
      fi
    done
fi
}


filecheck2() {
if [[ ""$1"" == *\ --\ Audiobook.m4b ]] && [[ -f ""$1"" ]]
 then
   m4bin=""$1""
   echo ""$m4bin""
else
   for i in *m4b
    do
      files=(*m4b)
      if [[ -f ""$i"" ]] && [[ ""${#files[@]}"" == 1 ]]
       then
         if [[ ""$files"" == *\ --\ Audiobook.m4b ]]
          then
            m4bin=""$i""
         elif [[ ""$files"" == *m4b ]]
          then
            m4bin=""${files/.m4b/ -- Audiobook.m4b}""
            mv ""$files"" ""$m4bin""
         fi
      else
        echo ""No single & appropriate input file found or specified, please check and retry...""
        ls
        exit 1
      fi
    done
fi
}



####################################
#start

[[ ""$1"" == @(edit|e|nano) ]] && editscript

filecheck2 ""$1""
if ! filecheck2 ""$1""; then exit; fi

mediainfo ""$m4bin""
"
1Tb7KzgP,Untitled,skft185,Python,Thursday 14th of December 2023 10:09:25 AM CDT,"def convertToArray():
    try:
        numCount = input(""–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ N: "")
        resultArray = []
        for i in range(int(numCount)):
            num = input(f""–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ {i + 1}: "")
            resultArray.append(int(num))
        return resultArray
    except ValueError:
        print(""Incorrect num"")


print(convertToArray())"
Jam3Cjss,termometr,sdfdsfdsfhhhh,C,Thursday 14th of December 2023 09:46:18 AM CDT,"DHT dht22(2, DHT22);
 
 
void setup(){
  pinMode(6, OUTPUT);
  pinMode(7, OUTPUT);
  pinMode(2, INPUT);
  Serial.begin(9600);
  }
 
void loop(){
 
 float temp = dht22.readTemperature();
 float hum = dht22.readHumidity();
 
 Serial.println (""Temperatura:"");
 Serial.println (temp);
 Serial.println (""Wilgotnosc:"");
 Serial.println (hum);
 
  delay(2000);
 
  if (temp >26) {
    digitalWrite(6, HIGH);
}
  if (temp <25){ 
    digitalWrite (6, LOW);
  }
    
  if (temp >26) {
    digitalWrite(7, HIGH);
}
  if ( temp <25){ 
    digitalWrite (7, LOW);
  }

 
}"
20SUFcwH,Untitled,jamieburchell,JSON,Thursday 14th of December 2023 09:44:16 AM CDT,"{
    ""version"": ""2.6.1"",
    ""cluster.messagebus.debug"": false,
    ""cluster.messagebus.enabled"": false,
    ""cluster.messagebus.sns.region"": """",
    ""cluster.messagebus.sns.api_key"": """",
    ""cluster.messagebus.sns.api_secret"": """",
    ""cluster.messagebus.sns.topic_arn"": """",
    ""dbcache.configuration_overloaded"": false,
    ""dbcache.debug"": false,
    ""dbcache.debug_purge"": false,
    ""dbcache.enabled"": false,
    ""dbcache.engine"": ""file"",
    ""dbcache.file.gc"": 3600,
    ""dbcache.file.locking"": false,
    ""dbcache.lifetime"": 180,
    ""dbcache.memcached.persistent"": true,
    ""dbcache.memcached.aws_autodiscovery"": false,
    ""dbcache.memcached.servers"": [
        ""127.0.0.1:11211""
    ],
    ""dbcache.memcached.username"": """",
    ""dbcache.memcached.password"": """",
    ""dbcache.memcached.binary_protocol"": true,
    ""dbcache.redis.persistent"": true,
    ""dbcache.redis.servers"": [
        ""127.0.0.1:6379""
    ],
    ""dbcache.redis.verify_tls_certificates"": true,
    ""dbcache.redis.password"": """",
    ""dbcache.redis.dbid"": 0,
    ""dbcache.redis.timeout"": 0,
    ""dbcache.redis.retry_interval"": 0,
    ""dbcache.redis.read_timeout"": 0,
    ""dbcache.use_filters"": false,
    ""dbcache.reject.constants"": [
        ""APP_REQUEST"",
        ""DOING_CRON"",
        ""DONOTCACHEDB"",
        ""SHORTINIT"",
        ""XMLRPC_REQUEST""
    ],
    ""dbcache.reject.cookie"": [],
    ""dbcache.reject.logged"": true,
    ""dbcache.reject.sql"": [
        ""gdsr_"",
        ""wp_rg_"",
        ""_wp_session_"",
        ""_wc_session_""
    ],
    ""dbcache.reject.uri"": [],
    ""dbcache.reject.words"": [
        ""^\\s*insert\\b"",
        ""^\\s*delete\\b"",
        ""^\\s*update\\b"",
        ""^\\s*replace\\b"",
        ""^\\s*create\\b"",
        ""^\\s*alter\\b"",
        ""^\\s*show\\b"",
        ""^\\s*set\\b"",
        ""\\bautoload\\s+=\\s+'yes'"",
        ""\\bsql_calc_found_rows\\b"",
        ""\\bfound_rows\\(\\)""
    ],
    ""docroot_fix.enable"": false,
    ""lazyload.enabled"": true,
    ""lazyload.threshold"": """",
    ""lazyload.process_img"": false,
    ""lazyload.process_background"": true,
    ""lazyload.googlemaps.google_maps_easy"": false,
    ""lazyload.googlemaps.wp_google_maps"": false,
    ""lazyload.googlemaps.wp_google_map_plugin"": false,
    ""lazyload.exclude"": [
        ""avia-bg-style-fixed"",
        ""data-bgposition="",
        ""data-envira-src="",
        ""data-large_image="",
        ""data-lazy-original="",
        ""data-lazy-src="",
        ""data-lazyload="",
        ""data-lazysrc="",
        ""data-no-lazy="",
        ""data-src="",
        ""data-srcset="",
        ""fullurl="",
        ""lazy-slider-img="",
        ""loading=\""eager\"""",
        ""no-lazy"",
        ""rev-slidebg"",
        ""skip-lazy"",
        ""soliloquy-image"",
        ""swatch-img"",
        ""w3-total-cache"",
        ""woocommerce\/assets\/images\/placeholder.png"",
        ""wpcf7_captcha""
    ],
    ""lazyload.embed_method"": ""async_head"",
    ""objectcache.configuration_overloaded"": false,
    ""objectcache.enabled"": true,
    ""objectcache.debug"": false,
    ""objectcache.debug_purge"": false,
    ""objectcache.enabled_for_wp_admin"": false,
    ""objectcache.fallback_transients"": true,
    ""objectcache.engine"": ""memcached"",
    ""objectcache.file.gc"": 3600,
    ""objectcache.file.locking"": false,
    ""objectcache.memcached.servers"": [
        ""127.0.0.1:11211""
    ],
    ""objectcache.memcached.persistent"": true,
    ""objectcache.memcached.aws_autodiscovery"": false,
    ""objectcache.memcached.username"": """",
    ""objectcache.memcached.password"": """",
    ""objectcache.memcached.binary_protocol"": true,
    ""objectcache.redis.persistent"": true,
    ""objectcache.redis.servers"": [
        ""127.0.0.1:6379""
    ],
    ""objectcache.redis.verify_tls_certificates"": true,
    ""objectcache.redis.password"": """",
    ""objectcache.redis.dbid"": 0,
    ""objectcache.redis.timeout"": 0,
    ""objectcache.redis.retry_interval"": 0,
    ""objectcache.redis.read_timeout"": 0,
    ""objectcache.groups.global"": [
        ""users"",
        ""userlogins"",
        ""usermeta"",
        ""user_meta"",
        ""site-transient"",
        ""site-options"",
        ""site-lookup"",
        ""blog-lookup"",
        ""blog-details"",
        ""rss"",
        ""global-posts""
    ],
    ""objectcache.groups.nonpersistent"": [
        ""counts"",
        ""plugins""
    ],
    ""objectcache.lifetime"": 180,
    ""objectcache.purge.all"": false,
    ""pgcache.configuration_overloaded"": false,
    ""pgcache.enabled"": true,
    ""pgcache.comment_cookie_ttl"": 1800,
    ""pgcache.debug"": false,
    ""pgcache.debug_purge"": false,
    ""pgcache.engine"": ""file_generic"",
    ""pgcache.file.gc"": 3600,
    ""pgcache.file.nfs"": false,
    ""pgcache.file.locking"": false,
    ""pgcache.lifetime"": 3600,
    ""pgcache.memcached.servers"": [
        ""127.0.0.1:11211""
    ],
    ""pgcache.memcached.persistent"": true,
    ""pgcache.memcached.aws_autodiscovery"": false,
    ""pgcache.memcached.username"": """",
    ""pgcache.memcached.password"": """",
    ""pgcache.memcached.binary_protocol"": true,
    ""pgcache.redis.persistent"": true,
    ""pgcache.redis.servers"": [
        ""127.0.0.1:6379""
    ],
    ""pgcache.redis.verify_tls_certificates"": true,
    ""pgcache.redis.password"": """",
    ""pgcache.redis.dbid"": 0,
    ""pgcache.redis.timeout"": 0,
    ""pgcache.redis.retry_interval"": 0,
    ""pgcache.redis.read_timeout"": 0,
    ""pgcache.cache.query"": false,
    ""pgcache.cache.home"": true,
    ""pgcache.cache.feed"": true,
    ""pgcache.cache.nginx_handle_xml"": true,
    ""pgcache.cache.ssl"": true,
    ""pgcache.cache.404"": false,
    ""pgcache.cache.headers"": [
        ""Last-Modified"",
        ""Content-Type"",
        ""X-Pingback"",
        ""P3P"",
        ""Link""
    ],
    ""pgcache.compatibility"": false,
    ""pgcache.remove_charset"": false,
    ""pgcache.accept.uri"": [
        ""sitemap(_index)?\\.xml(\\.gz)?"",
        ""([a-z0-9_\\-]+)?sitemap\\.xsl"",
        ""[a-z0-9_\\-]+-sitemap([0-9]+)?\\.xml(\\.gz)?""
    ],
    ""pgcache.accept.files"": [
        ""wp-comments-popup.php"",
        ""wp-links-opml.php"",
        ""wp-locations.php""
    ],
    ""pgcache.accept.qs"": [
        ""_branch_match_id"",
        ""_bta_c"",
        ""_bta_tid"",
        ""_ga"",
        ""_gl"",
        ""_ke"",
        ""adgroupid"",
        ""adid"",
        ""age-verified"",
        ""ao_noptimize"",
        ""campaignid"",
        ""campid"",
        ""cn-reloaded"",
        ""customid"",
        ""dm_i"",
        ""ef_id"",
        ""epik"",
        ""fb_action_ids"",
        ""fb_action_types"",
        ""fb_source"",
        ""fbclid"",
        ""gclid"",
        ""gclsrc"",
        ""gdffi"",
        ""gdfms"",
        ""gdftrk"",
        ""hsa_acc"",
        ""hsa_ad"",
        ""hsa_cam"",
        ""hsa_grp"",
        ""hsa_kw"",
        ""hsa_mt"",
        ""hsa_net"",
        ""hsa_src"",
        ""hsa_tgt"",
        ""hsa_ver"",
        ""igshid"",
        ""matomo_campaign"",
        ""matomo_cid"",
        ""matomo_content"",
        ""matomo_group"",
        ""matomo_keyword"",
        ""matomo_medium"",
        ""matomo_placement"",
        ""matomo_source"",
        ""mc_cid"",
        ""mc_eid"",
        ""mkcid"",
        ""mkevt"",
        ""mkrid"",
        ""mkwid"",
        ""msclkid"",
        ""mtm_campaign"",
        ""mtm_cid"",
        ""mtm_content"",
        ""mtm_group"",
        ""mtm_keyword"",
        ""mtm_medium"",
        ""mtm_placement"",
        ""mtm_source"",
        ""pcrid"",
        ""piwik_campaign"",
        ""piwik_keyword"",
        ""piwik_kwd"",
        ""pk_campaign"",
        ""pk_cid"",
        ""pk_content"",
        ""pk_keyword"",
        ""pk_kwd"",
        ""pk_medium"",
        ""pk_source"",
        ""pp"",
        ""redirect_log_mongo_id"",
        ""redirect_mongo_id"",
        ""ref"",
        ""s_kwcid"",
        ""sb_referer_host"",
        ""si"",
        ""sscid"",
        ""toolid"",
        ""trk_contact"",
        ""trk_module"",
        ""trk_msg"",
        ""trk_sid"",
        ""usqp"",
        ""utm_campaign"",
        ""utm_content"",
        ""utm_expid"",
        ""utm_id"",
        ""utm_medium"",
        ""utm_source"",
        ""utm_term""
    ],
    ""pgcache.migrated.qsexempts"": 1687783496,
    ""pgcache.late_init"": false,
    ""pgcache.late_caching"": false,
    ""pgcache.mirrors.enabled"": false,
    ""pgcache.mirrors.home_urls"": [
        """"
    ],
    ""pgcache.reject.front_page"": false,
    ""pgcache.reject.logged"": true,
    ""pgcache.reject.logged_roles"": false,
    ""pgcache.reject.roles"": [
        """"
    ],
    ""pgcache.reject.uri"": [
        ""wp-.*\\.php"",
        ""index\\.php""
    ],
    ""pgcache.reject.categories"": [
        """"
    ],
    ""pgcache.reject.tags"": [
        """"
    ],
    ""pgcache.reject.authors"": [
        """"
    ],
    ""pgcache.reject.custom"": [
        """"
    ],
    ""pgcache.reject.ua"": [
        """"
    ],
    ""pgcache.reject.cookie"": [
        ""wptouch_switch_toggle""
    ],
    ""pgcache.reject.request_head"": false,
    ""pgcache.purge.front_page"": true,
    ""pgcache.purge.home"": true,
    ""pgcache.purge.post"": true,
    ""pgcache.purge.comments"": true,
    ""pgcache.purge.author"": true,
    ""pgcache.purge.terms"": true,
    ""pgcache.purge.archive.daily"": true,
    ""pgcache.purge.archive.monthly"": true,
    ""pgcache.purge.archive.yearly"": true,
    ""pgcache.purge.feed.blog"": true,
    ""pgcache.purge.feed.comments"": true,
    ""pgcache.purge.feed.author"": true,
    ""pgcache.purge.feed.terms"": true,
    ""pgcache.purge.feed.types"": [
        ""rss2""
    ],
    ""pgcache.purge.postpages_limit"": 10,
    ""pgcache.purge.pages"": [
        ""\/who-we-are\/"",
        """"
    ],
    ""pgcache.purge.sitemap_regex"": ""([a-z0-9_\\-]*?)sitemap([a-z0-9_\\-]*)?\\.xml"",
    ""pgcache.prime.enabled"": true,
    ""pgcache.prime.interval"": 900,
    ""pgcache.prime.limit"": 50,
    ""pgcache.prime.sitemap"": ""\/sitemap_index.xml"",
    ""pgcache.prime.post.enabled"": true,
    ""pgcache.rest"": """",
    ""pgcache.cookiegroups.enabled"": false,
    ""pgcache.cookiegroups.groups"": {
        ""mobile"": {
            ""enabled"": false,
            ""cache"": true,
            ""cookies"": [
                ""wptouch-pro-view=mobile"",
                ""wptouch-pro-cache-state=mobile""
            ]
        },
        ""loggedin"": {
            ""enabled"": false,
            ""cache"": true,
            ""cookies"": [
                ""wordpress_logged_in_.*""
            ]
        },
        ""subscribers"": {
            ""enabled"": false,
            ""cache"": true,
            ""cookies"": [
                ""role=subscriber"",
                ""role=member""
            ]
        }
    },
    ""stats.enabled"": false,
    ""stats.slot_seconds"": 60,
    ""stats.slots_count"": 60,
    ""stats.cpu.enabled"": false,
    ""stats.access_log.enabled"": false,
    ""stats.access_log.filename"": """",
    ""stats.access_log.format"": ""%h %l %u %t \\\""%r\\\"" %>s %O \\\""%{Referer}i\\\"" \\\""%{User-Agent}i\\\"""",
    ""stats.access_log.webserver"": ""apache"",
    ""minify.configuration_overloaded"": false,
    ""minify.enabled"": true,
    ""minify.auto"": true,
    ""minify.debug"": false,
    ""minify.engine"": ""file"",
    ""minify.error.notification"": """",
    ""minify.file.gc"": 86400,
    ""minify.file.nfs"": false,
    ""minify.file.locking"": false,
    ""minify.memcached.servers"": [
        ""127.0.0.1:11211""
    ],
    ""minify.memcached.persistent"": true,
    ""minify.memcached.aws_autodiscovery"": false,
    ""minify.memcached.username"": """",
    ""minify.memcached.password"": """",
    ""minify.memcached.binary_protocol"": true,
    ""minify.redis.persistent"": true,
    ""minify.redis.servers"": [
        ""127.0.0.1:6379""
    ],
    ""minify.redis.verify_tls_certificates"": true,
    ""minify.redis.password"": """",
    ""minify.redis.dbid"": 0,
    ""minify.redis.timeout"": 0,
    ""minify.redis.retry_interval"": 0,
    ""minify.redis.read_timeout"": 0,
    ""minify.rewrite"": true,
    ""minify.options"": [],
    ""minify.symlinks"": [],
    ""minify.lifetime"": 86400,
    ""minify.upload"": true,
    ""minify.html.enable"": false,
    ""minify.html.engine"": ""html"",
    ""minify.html.reject.feed"": false,
    ""minify.html.inline.css"": false,
    ""minify.html.inline.js"": false,
    ""minify.html.strip.crlf"": false,
    ""minify.html.comments.ignore"": [
        ""google_ad_"",
        ""RSPEAK_"",
        ""mfunc""
    ],
    ""minify.css.enable"": true,
    ""minify.css.engine"": ""css"",
    ""minify.css.method"": ""both"",
    ""minify.css.http2push"": false,
    ""minify.css.strip.comments"": false,
    ""minify.css.strip.crlf"": false,
    ""minify.css.embed"": false,
    ""minify.css.imports"": ""process"",
    ""minify.css.groups"": [],
    ""minify.js.http2push"": false,
    ""minify.js.enable"": true,
    ""minify.js.engine"": ""js"",
    ""minify.js.method"": ""both"",
    ""minify.js.combine.header"": false,
    ""minify.js.header.embed_type"": ""blocking"",
    ""minify.js.combine.body"": false,
    ""minify.js.body.embed_type"": ""blocking"",
    ""minify.js.combine.footer"": false,
    ""minify.js.footer.embed_type"": ""blocking"",
    ""minify.js.strip.comments"": false,
    ""minify.js.strip.crlf"": false,
    ""minify.js.groups"": [],
    ""minify.yuijs.path.java"": ""java"",
    ""minify.yuijs.path.jar"": ""yuicompressor.jar"",
    ""minify.yuijs.options.line-break"": 5000,
    ""minify.yuijs.options.nomunge"": false,
    ""minify.yuijs.options.preserve-semi"": false,
    ""minify.yuijs.options.disable-optimizations"": false,
    ""minify.yuicss.path.java"": ""java"",
    ""minify.yuicss.path.jar"": ""yuicompressor.jar"",
    ""minify.yuicss.options.line-break"": 5000,
    ""minify.ccjs.path.java"": ""java"",
    ""minify.ccjs.path.jar"": ""compiler.jar"",
    ""minify.ccjs.options.compilation_level"": ""SIMPLE_OPTIMIZATIONS"",
    ""minify.ccjs.options.formatting"": """",
    ""minify.csstidy.options.remove_bslash"": true,
    ""minify.csstidy.options.compress_colors"": false,
    ""minify.csstidy.options.compress_font-weight"": false,
    ""minify.csstidy.options.lowercase_s"": false,
    ""minify.csstidy.options.optimise_shorthands"": 0,
    ""minify.csstidy.options.remove_last_;"": false,
    ""minify.csstidy.options.remove_space_before_important"": false,
    ""minify.csstidy.options.case_properties"": 1,
    ""minify.csstidy.options.sort_properties"": false,
    ""minify.csstidy.options.sort_selectors"": false,
    ""minify.csstidy.options.merge_selectors"": 0,
    ""minify.csstidy.options.discard_invalid_selectors"": false,
    ""minify.csstidy.options.discard_invalid_properties"": false,
    ""minify.csstidy.options.css_level"": ""CSS3.0"",
    ""minify.csstidy.options.preserve_css"": false,
    ""minify.csstidy.options.timestamp"": false,
    ""minify.csstidy.options.template"": ""highest_compression"",
    ""minify.htmltidy.options.clean"": false,
    ""minify.htmltidy.options.hide-comments"": true,
    ""minify.htmltidy.options.wrap"": 0,
    ""minify.reject.logged"": false,
    ""minify.reject.ua"": [
        """"
    ],
    ""minify.reject.uri"": [
        """"
    ],
    ""minify.reject.files.js"": [
        """"
    ],
    ""minify.reject.files.css"": [
        """"
    ],
    ""minify.cache.files"": [
        """"
    ],
    ""minify.cache.files_regexp"": false,
    ""cdn.configuration_overloaded"": false,
    ""cdn.enabled"": false,
    ""cdn.debug"": false,
    ""cdn.flush_manually"": false,
    ""cdn.engine"": ""stackpath2"",
    ""cdn.uploads.enable"": true,
    ""cdn.includes.enable"": true,
    ""cdn.includes.files"": ""*.css;*.js;*.gif;*.png;*.jpg;*.xml"",
    ""cdn.theme.enable"": true,
    ""cdn.theme.files"": ""*.css;*.js;*.gif;*.png;*.jpg;*.ico;*.ttf;*.otf;*.woff;*.woff2;*.less"",
    ""cdn.minify.enable"": true,
    ""cdn.custom.enable"": true,
    ""cdn.custom.files"": [
        ""favicon.ico"",
        ""{wp_content_dir}\/gallery\/*"",
        ""{wp_content_dir}\/uploads\/avatars\/*"",
        ""{plugins_dir}\/wordpress-seo\/css\/xml-sitemap.xsl"",
        ""{plugins_dir}\/wp-minify\/min*"",
        ""{plugins_dir}\/*.js"",
        ""{plugins_dir}\/*.css"",
        ""{plugins_dir}\/*.gif"",
        ""{plugins_dir}\/*.jpg"",
        ""{plugins_dir}\/*.png""
    ],
    ""cdn.import.files"": false,
    ""cdn.queue.interval"": 900,
    ""cdn.queue.limit"": 25,
    ""cdn.force.rewrite"": false,
    ""cdn.autoupload.enabled"": false,
    ""cdn.autoupload.interval"": 3600,
    ""cdn.canonical_header"": false,
    ""cdn.admin.media_library"": false,
    ""cdn.cors_header"": true,
    ""cdn.ftp.host"": """",
    ""cdn.ftp.type"": """",
    ""cdn.ftp.user"": """",
    ""cdn.ftp.pass"": """",
    ""cdn.ftp.path"": """",
    ""cdn.ftp.pasv"": false,
    ""cdn.ftp.domain"": [],
    ""cdn.ftp.ssl"": ""auto"",
    ""cdn.ftp.default_keys"": true,
    ""cdn.ftp.pubkey"": """",
    ""cdn.ftp.privkey"": """",
    ""cdn.google_drive.client_id"": """",
    ""cdn.google_drive.refresh_token"": """",
    ""cdn.google_drive.folder.id"": """",
    ""cdn.google_drive.folder.title"": """",
    ""cdn.google_drive.folder.url"": """",
    ""cdn.highwinds.account_hash"": """",
    ""cdn.highwinds.api_token"": """",
    ""cdn.highwinds.host.hash_code"": """",
    ""cdn.highwinds.host.domains"": [],
    ""cdn.highwinds.ssl"": ""auto"",
    ""cdn.s3.key"": """",
    ""cdn.s3.secret"": """",
    ""cdn.s3.bucket"": """",
    ""cdn.s3.bucket.location"": ""us-east-1"",
    ""cdn.s3.cname"": [],
    ""cdn.s3.ssl"": ""auto"",
    ""cdn.s3.public_objects"": ""enabled"",
    ""cdn.s3_compatible.api_host"": ""auto"",
    ""cdn.cf.key"": """",
    ""cdn.cf.secret"": """",
    ""cdn.cf.bucket"": """",
    ""cdn.cf.bucket.location"": ""us-east-1"",
    ""cdn.cf.id"": """",
    ""cdn.cf.cname"": [],
    ""cdn.cf.ssl"": ""auto"",
    ""cdn.cf.public_objects"": ""enabled"",
    ""cdn.cf2.key"": """",
    ""cdn.cf2.secret"": """",
    ""cdn.cf2.id"": """",
    ""cdn.cf2.cname"": [],
    ""cdn.cf2.ssl"": """",
    ""cdn.rscf.user"": """",
    ""cdn.rscf.key"": """",
    ""cdn.rscf.location"": ""us"",
    ""cdn.rscf.container"": """",
    ""cdn.rscf.cname"": [],
    ""cdn.rscf.ssl"": ""auto"",
    ""cdn.rackspace_cdn.user_name"": """",
    ""cdn.rackspace_cdn.api_key"": """",
    ""cdn.rackspace_cdn.region"": """",
    ""cdn.rackspace_cdn.service.access_url"": """",
    ""cdn.rackspace_cdn.service.id"": """",
    ""cdn.rackspace_cdn.service.name"": """",
    ""cdn.rackspace_cdn.service.protocol"": ""http"",
    ""cdn.rackspace_cdn.domains"": [],
    ""cdn.azure.user"": """",
    ""cdn.azure.key"": """",
    ""cdn.azure.container"": """",
    ""cdn.azure.cname"": [],
    ""cdn.azure.ssl"": ""auto"",
    ""cdn.mirror.domain"": [],
    ""cdn.mirror.ssl"": ""auto"",
    ""cdn.limelight.short_name"": """",
    ""cdn.limelight.username"": """",
    ""cdn.limelight.api_key"": """",
    ""cdn.limelight.host.domains"": [],
    ""cdn.limelight.ssl"": ""auto"",
    ""cdn.cotendo.username"": """",
    ""cdn.cotendo.password"": """",
    ""cdn.cotendo.zones"": [],
    ""cdn.cotendo.domain"": [],
    ""cdn.cotendo.ssl"": ""auto"",
    ""cdn.akamai.username"": """",
    ""cdn.akamai.password"": """",
    ""cdn.akamai.email_notification"": [],
    ""cdn.akamai.action"": ""invalidate"",
    ""cdn.akamai.zone"": ""production"",
    ""cdn.akamai.domain"": [],
    ""cdn.akamai.ssl"": ""auto"",
    ""cdn.edgecast.account"": """",
    ""cdn.edgecast.token"": """",
    ""cdn.edgecast.domain"": [],
    ""cdn.edgecast.ssl"": ""auto"",
    ""cdn.att.account"": """",
    ""cdn.att.token"": """",
    ""cdn.att.domain"": [],
    ""cdn.att.ssl"": ""auto"",
    ""cdn.stackpath.authorization_key"": """",
    ""cdn.stackpath.domain"": [],
    ""cdn.stackpath.ssl"": ""auto"",
    ""cdn.stackpath.zone_id"": 0,
    ""cdn.stackpath2.client_id"": """",
    ""cdn.stackpath2.client_secret"": """",
    ""cdn.stackpath2.stack_id"": """",
    ""cdn.stackpath2.site_id"": 0,
    ""cdn.stackpath2.site_root_domain"": 0,
    ""cdn.stackpath2.domain"": [],
    ""cdn.stackpath2.ssl"": ""auto"",
    ""cdn.reject.admins"": false,
    ""cdn.reject.logged_roles"": false,
    ""cdn.reject.roles"": [],
    ""cdn.reject.ua"": [],
    ""cdn.reject.uri"": [],
    ""cdn.reject.files"": [
        ""{uploads_dir}\/wpcf7_captcha\/*"",
        ""{uploads_dir}\/imagerotator.swf"",
        ""{plugins_dir}\/wp-fb-autoconnect\/facebook-platform\/channel.html""
    ],
    ""cdn.reject.ssl"": false,
    ""cdnfsd.enabled"": false,
    ""cdnfsd.engine"": """",
    ""cdnfsd.debug"": false,
    ""cdnfsd.cloudfront.access_key"": """",
    ""cdnfsd.cloudfront.secret_key"": """",
    ""cdnfsd.cloudfront.distribution_id"": """",
    ""cdnfsd.limelight.short_name"": """",
    ""cdnfsd.limelight.username"": """",
    ""cdnfsd.limelight.api_key"": """",
    ""cdnfsd.stackpath.api_key"": """",
    ""cdnfsd.stackpath.zone_id"": 0,
    ""cdnfsd.stackpath2.client_id"": """",
    ""cdnfsd.stackpath2.client_secret"": """",
    ""cdnfsd.stackpath2.stack_id"": """",
    ""cdnfsd.stackpath2.site_id"": 0,
    ""cdnfsd.stackpath2.site_root_domain"": 0,
    ""cdnfsd.stackpath2.domain"": [],
    ""cdnfsd.stackpath2.ssl"": ""auto"",
    ""cdnfsd.transparentcdn.client_id"": """",
    ""cdnfsd.transparentcdn.client_secret"": """",
    ""cdnfsd.transparentcdn.company_id"": """",
    ""varnish.configuration_overloaded"": false,
    ""varnish.enabled"": false,
    ""varnish.debug"": false,
    ""varnish.servers"": [
        """"
    ],
    ""browsercache.configuration_overloaded"": false,
    ""browsercache.enabled"": true,
    ""browsercache.rewrite"": false,
    ""browsercache.no404wp"": false,
    ""browsercache.no404wp.exceptions"": [
        ""robots\\.txt"",
        ""[a-z0-9_\\-]*sitemap[a-z0-9_\\.\\-]*\\.(xml|xsl|html)(\\.gz)?""
    ],
    ""browsercache.cssjs.last_modified"": true,
    ""browsercache.cssjs.compression"": false,
    ""browsercache.cssjs.brotli"": false,
    ""browsercache.cssjs.expires"": false,
    ""browsercache.cssjs.lifetime"": 31536000,
    ""browsercache.cssjs.nocookies"": false,
    ""browsercache.cssjs.cache.control"": false,
    ""browsercache.cssjs.cache.policy"": ""cache_public_maxage"",
    ""browsercache.cssjs.etag"": false,
    ""browsercache.cssjs.w3tc"": false,
    ""browsercache.cssjs.replace"": true,
    ""browsercache.cssjs.querystring"": false,
    ""browsercache.html.compression"": false,
    ""browsercache.html.brotli"": false,
    ""browsercache.html.last_modified"": true,
    ""browsercache.html.expires"": false,
    ""browsercache.html.lifetime"": 31536000,
    ""browsercache.html.cache.control"": false,
    ""browsercache.html.cache.policy"": ""cache_public_maxage"",
    ""browsercache.html.etag"": false,
    ""browsercache.html.w3tc"": false,
    ""browsercache.html.replace"": false,
    ""browsercache.other.last_modified"": true,
    ""browsercache.other.compression"": false,
    ""browsercache.other.brotli"": false,
    ""browsercache.other.expires"": false,
    ""browsercache.other.lifetime"": 31536000,
    ""browsercache.other.nocookies"": false,
    ""browsercache.other.cache.control"": false,
    ""browsercache.other.cache.policy"": ""cache_public_maxage"",
    ""browsercache.other.etag"": false,
    ""browsercache.other.w3tc"": false,
    ""browsercache.other.replace"": false,
    ""browsercache.other.querystring"": false,
    ""browsercache.replace.exceptions"": [
        """"
    ],
    ""browsercache.security.session.cookie_httponly"": """",
    ""browsercache.security.session.cookie_secure"": """",
    ""browsercache.security.session.use_only_cookies"": """",
    ""browsercache.hsts"": false,
    ""browsercache.security.hsts.directive"": ""maxage"",
    ""browsercache.security.xfo"": false,
    ""browsercache.security.xfo.directive"": ""same"",
    ""browsercache.security.xfo.allow"": """",
    ""browsercache.security.xss"": false,
    ""browsercache.security.xss.directive"": ""block"",
    ""browsercache.security.xcto"": false,
    ""browsercache.security.pkp"": false,
    ""browsercache.security.pkp.pin"": """",
    ""browsercache.security.pkp.pin.backup"": """",
    ""browsercache.security.pkp.extra"": ""maxage"",
    ""browsercache.security.pkp.report.url"": """",
    ""browsercache.security.pkp.report.only"": ""0"",
    ""browsercache.security.referrer.policy"": false,
    ""browsercache.security.referrer.policy.directive"": ""no-referrer-when-downgrade"",
    ""browsercache.security.csp"": false,
    ""browsercache.security.csp.reporturi"": """",
    ""browsercache.security.csp.reportto"": """",
    ""browsercache.security.csp.base"": """",
    ""browsercache.security.csp.frame"": """",
    ""browsercache.security.csp.connect"": """",
    ""browsercache.security.csp.font"": """",
    ""browsercache.security.csp.script"": """",
    ""browsercache.security.csp.style"": """",
    ""browsercache.security.csp.img"": """",
    ""browsercache.security.csp.media"": """",
    ""browsercache.security.csp.object"": """",
    ""browsercache.security.csp.plugin"": """",
    ""browsercache.security.csp.form"": """",
    ""browsercache.security.csp.frame.ancestors"": """",
    ""browsercache.security.csp.sandbox"": """",
    ""browsercache.security.csp.child"": """",
    ""browsercache.security.csp.manifest"": """",
    ""browsercache.security.csp.scriptelem"": """",
    ""browsercache.security.csp.scriptattr"": """",
    ""browsercache.security.csp.styleelem"": """",
    ""browsercache.security.csp.styleattr"": """",
    ""browsercache.security.csp.worker"": """",
    ""browsercache.security.csp.default"": """",
    ""browsercache.security.cspro"": false,
    ""browsercache.security.cspro.reporturi"": """",
    ""browsercache.security.cspro.reportto"": """",
    ""browsercache.security.cspro.base"": """",
    ""browsercache.security.cspro.frame"": """",
    ""browsercache.security.cspro.connect"": """",
    ""browsercache.security.cspro.font"": """",
    ""browsercache.security.cspro.script"": """",
    ""browsercache.security.cspro.style"": """",
    ""browsercache.security.cspro.img"": """",
    ""browsercache.security.cspro.media"": """",
    ""browsercache.security.cspro.object"": """",
    ""browsercache.security.cspro.plugin"": """",
    ""browsercache.security.cspro.form"": """",
    ""browsercache.security.cspro.frame.ancestors"": """",
    ""browsercache.security.cspro.sandbox"": """",
    ""browsercache.security.cspro.child"": """",
    ""browsercache.security.cspro.manifest"": """",
    ""browsercache.security.cspro.scriptelem"": """",
    ""browsercache.security.cspro.scriptattr"": """",
    ""browsercache.security.cspro.styleelem"": """",
    ""browsercache.security.cspro.styleattr"": """",
    ""browsercache.security.cspro.worker"": """",
    ""browsercache.security.cspro.default"": """",
    ""browsercache.security.fp"": false,
    ""browsercache.security.fp.values"": [],
    ""mobile.configuration_overloaded"": false,
    ""mobile.enabled"": false,
    ""mobile.rgroups"": {
        ""tablets"": {
            ""theme"": """",
            ""enabled"": false,
            ""redirect"": """",
            ""agents"": [
                ""a1-32ab0"",
                ""a210"",
                ""a211"",
                ""b6000-h"",
                ""b8000-h"",
                ""bnrv200"",
                ""bntv400"",
                ""darwin"",
                ""gt-n8005"",
                ""gt-p3105"",
                ""gt-p6810"",
                ""gt-p7510"",
                ""hmj37"",
                ""hp-tablet"",
                ""hp\\sslate"",
                ""hp\\sslatebook"",
                ""ht7s3"",
                ""ideatab_a1107"",
                ""ideataba2109a"",
                ""ideos\\ss7"",
                ""imm76d"",
                ""ipad"",
                ""k00f"",
                ""kfjwi"",
                ""kfot"",
                ""kftt"",
                ""kindle"",
                ""l-06c"",
                ""lg-f200k"",
                ""lg-f200l"",
                ""lg-f200s"",
                ""m470bsa"",
                ""m470bse"",
                ""maxwell"",
                ""me173x"",
                ""mediapad"",
                ""midc497"",
                ""msi\\senjoy\\s10\\splus"",
                ""mz601"",
                ""mz616"",
                ""nexus"",
                ""nookcolor"",
                ""pg09410"",
                ""pg41200"",
                ""pmp5570c"",
                ""pmp5588c"",
                ""pocketbook"",
                ""qmv7a"",
                ""sgp311"",
                ""sgpt12"",
                ""shv-e230k"",
                ""shw-m305w"",
                ""shw-m380w"",
                ""sm-p605"",
                ""smarttab"",
                ""sonysgp321"",
                ""sph-p500"",
                ""surfpad"",
                ""tab07-200"",
                ""tab10-201"",
                ""tab465euk"",
                ""tab474"",
                ""tablet"",
                ""tegranote"",
                ""tf700t"",
                ""thinkpad"",
                ""viewpad"",
                ""voltaire""
            ]
        },
        ""phones"": {
            ""theme"": """",
            ""enabled"": false,
            ""redirect"": """",
            ""agents"": [
                ""(android|bb\\d+|meego).+mobile"",
                ""240x320"",
                ""2.0\\ mmp"",
                ""\\bppc\\b"",
                ""acer\\ s100"",
                ""alcatel"",
                ""amoi"",
                ""archos5"",
                ""asus"",
                ""au-mic"",
                ""audiovox"",
                ""avantgo"",
                ""bada"",
                ""benq"",
                ""bird"",
                ""blackberry"",
                ""blazer"",
                ""cdm"",
                ""cellphone"",
                ""cupcake"",
                ""danger"",
                ""ddipocket"",
                ""docomo"",
                ""docomo\\ ht-03a"",
                ""dopod"",
                ""dream"",
                ""elaine\/3.0"",
                ""ericsson"",
                ""eudoraweb"",
                ""fly"",
                ""froyo"",
                ""googlebot-mobile"",
                ""haier"",
                ""hiptop"",
                ""hp.ipaq"",
                ""htc"",
                ""htc\\ hero"",
                ""htc\\ magic"",
                ""htc_dream"",
                ""htc_magic"",
                ""huawei"",
                ""i-mobile"",
                ""iemobile"",
                ""iemobile\/7"",
                ""iemobile\/7.0"",
                ""iemobile\/9"",
                ""incognito"",
                ""iphone"",
                ""ipod"",
                ""j-phone"",
                ""kddi"",
                ""konka"",
                ""kwc"",
                ""kyocera\/wx310k"",
                ""lenovo"",
                ""lg"",
                ""lg\/u990"",
                ""lg-gw620"",
                ""lge\\ vx"",
                ""liquid\\ build"",
                ""maemo"",
                ""midp"",
                ""midp-2.0"",
                ""mmef20"",
                ""mmp"",
                ""mobilephone"",
                ""mot-mb200"",
                ""mot-mb300"",
                ""mot-v"",
                ""motorola"",
                ""msie\\ 10.0"",
                ""netfront"",
                ""newgen"",
                ""newt"",
                ""nexus\\ 7"",
                ""nexus\\ one"",
                ""nintendo\\ ds"",
                ""nintendo\\ wii"",
                ""nitro"",
                ""nokia"",
                ""novarra"",
                ""openweb"",
                ""opera\\ mini"",
                ""opera\\ mobi"",
                ""opera.mobi"",
                ""p160u"",
                ""palm"",
                ""panasonic"",
                ""pantech"",
                ""pdxgw"",
                ""pg"",
                ""philips"",
                ""phone"",
                ""playbook"",
                ""playstation\\ portable"",
                ""portalmmm"",
                ""proxinet"",
                ""psp"",
                ""qtek"",
                ""s8000"",
                ""sagem"",
                ""samsung"",
                ""samsung-s8000"",
                ""sanyo"",
                ""sch"",
                ""sch-i800"",
                ""sec"",
                ""sendo"",
                ""series60.*webkit"",
                ""series60\/5.0"",
                ""sgh"",
                ""sharp"",
                ""sharp-tq-gx10"",
                ""small"",
                ""smartphone"",
                ""softbank"",
                ""sonyericsson"",
                ""sonyericssone10"",
                ""sonyericssonu20"",
                ""sonyericssonx10"",
                ""sph"",
                ""symbian"",
                ""symbian\\ os"",
                ""symbianos"",
                ""t-mobile\\ mytouch\\ 3g"",
                ""t-mobile\\ opal"",
                ""tattoo"",
                ""toshiba"",
                ""touch"",
                ""treo"",
                ""ts21i-10"",
                ""up.browser"",
                ""up.link"",
                ""uts"",
                ""vertu"",
                ""vodafone"",
                ""wap"",
                ""webmate"",
                ""webos"",
                ""willcome"",
                ""windows\\ ce"",
                ""windows.ce"",
                ""winwap"",
                ""xda"",
                ""xoom"",
                ""zte""
            ]
        }
    },
    ""referrer.configuration_overloaded"": false,
    ""referrer.enabled"": false,
    ""referrer.rgroups"": {
        ""search_engines"": {
            ""theme"": """",
            ""enabled"": false,
            ""redirect"": """",
            ""referrers"": [
                ""google\\.com"",
                ""yahoo\\.com"",
                ""bing\\.com"",
                ""ask\\.com"",
                ""msn\\.com""
            ]
        }
    },
    ""common.track_usage"": false,
    ""common.tweeted"": false,
    ""config.check"": false,
    ""config.path"": """",
    ""widget.latest.items"": 3,
    ""widget.latest_news.items"": 5,
    ""widget.pagespeed.enabled"": false,
    ""widget.pagespeed.access_token"": """",
    ""widget.pagespeed.w3tc_pagespeed_key"": """",
    ""timelimit.email_send"": 180,
    ""timelimit.varnish_purge"": 300,
    ""timelimit.cache_flush"": 600,
    ""timelimit.cache_gc"": 600,
    ""timelimit.cdn_upload"": 600,
    ""timelimit.cdn_delete"": 300,
    ""timelimit.cdn_purge"": 300,
    ""timelimit.cdn_import"": 600,
    ""timelimit.cdn_test"": 300,
    ""timelimit.domain_rename"": 120,
    ""timelimit.minify_recommendations"": 600,
    ""common.instance_id"": 1290655265,
    ""common.force_master"": true,
    ""extensions.active"": {
        ""user-experience-emoji"": ""w3-total-cache\/UserExperience_Emoji_Extension.php"",
        ""user-experience-oembed"": ""w3-total-cache\/UserExperience_OEmbed_Extension.php""
    },
    ""extensions.active_frontend"": {
        ""user-experience-emoji"": ""*"",
        ""user-experience-oembed"": ""*""
    },
    ""extensions.active_dropin"": [],
    ""plugin.license_key"": """",
    ""plugin.type"": """",
    ""jquerymigrate.disabled"": false,
    ""imageservice"": {
        ""compression"": ""lossy"",
        ""auto"": ""enabled"",
        ""visibility"": ""never""
    },
    ""imageservice.configuration_overloaded"": true,
    ""fragmentcache"": {
        ""engine"": """"
    },
    ""cdn.maxcdn.authorization_key"": """",
    ""cdn.maxcdn.domain"": [],
    ""cdn.maxcdn.ssl"": ""auto"",
    ""cdn.maxcdn.zone_id"": 0,
    ""cdnfsd.maxcdn.api_key"": """",
    ""cdnfsd.maxcdn.zone_id"": 0,
    ""widget.pagespeed.key"": """",
    ""widget.pagespeed.key.restrict.referrer"": """",
    ""widget.pagespeed.show_in_admin_bar"": false,
    ""pgcache.bad_behavior_path"": """",
    ""newrelic"": {
        ""monitoring_type"": ""apm""
    },
    ""page"": ""w3tc_userexperience"",
    ""_wpnonce"": ""437056305c"",
    ""_wp_http_referer"": ""\/wp\/wp-admin\/admin.php?page=w3tc_userexperience"",
    ""w3tc_save_options"": ""Save Settings""
}"
cJECMNn0,Button fence,Samuil_Krumov,HTML,Thursday 14th of December 2023 09:14:03 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"">
  <title>Fence Button</title>
  <style>
    body, html {
      margin: 0;
      padding: 0;
    }

    .center {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }
    .fence-button {
      padding: 15px 30px;
      font-size: 18px;
      background-color: #3498db;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      position: relative;
      overflow: hidden;
    }
    .fence-button::before,
    .fence-button::after {
      content: '';
      position: absolute;
      top: 0;
      bottom: 0;
      width: 4px;
      background-color: black; 
      transform: scaleX(0); 
      transition: transform 0.5s ease-in-out;
    }

    .fence-button::before {
      left: 25%;
      height: 100%;
    }

    .fence-button::after {
      right: 25%;
      height: 100%;
    }

    
    .fence-button:hover::before,
    .fence-button:hover::after {
      transform: scaleX(1); 
    }
    .fence-button:hover {
      cursor: no-drop; 
    }
  </style>
</head>
<body>

<div class=""center"">
  <button class=""fence-button"">Hover Me</button>
</div>

</body>
</html>
"
7eFmDXiF,News Dec14 23,Newscaster_Ned,Email,Thursday 14th of December 2023 09:00:05 AM CDT,".‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé1‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé2‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé3‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äét‚Äée‚Äé.‚Äé

H‚Äée‚Äéy‚Äé,‚Äé ‚Äég‚Äéu‚Äéy‚Äés‚Äé.‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äéc‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéN‚Äée‚Äéd‚Äé ‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äég‚Äéi‚Äév‚Äée‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äén‚Äée‚Äéw‚Äés‚Äé.‚Äé

B‚Äéa‚Äéd‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äés‚Äé

H‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚ÄéV‚Äéo‚Äét‚Äée‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéF‚Äéo‚Äér‚Äém‚Äéa‚Äél‚Äéi‚Äéz‚Äée‚Äé ‚ÄéI‚Äém‚Äép‚Äée‚Äéa‚Äéc‚Äéh‚Äém‚Äée‚Äén‚Äét‚Äé ‚ÄéI‚Äén‚Äéq‚Äéu‚Äéi‚Äér‚Äéy‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚ÄéJ‚Äéo‚Äée‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé

V‚Äéo‚Äét‚Äée‚Äé ‚ÄéC‚Äéo‚Äém‚Äée‚Äés‚Äé ‚ÄéJ‚Äéu‚Äés‚Äét‚Äé ‚ÄéH‚Äéo‚Äéu‚Äér‚Äés‚Äé ‚Äéa‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéH‚Äéu‚Äén‚Äét‚Äée‚Äér‚Äé ‚ÄéR‚Äée‚Äéf‚Äéu‚Äés‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚ÄéC‚Äéo‚Äém‚Äép‚Äél‚Äéy‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéC‚Äéo‚Äén‚Äég‚Äér‚Äée‚Äés‚Äés‚Äéi‚Äéo‚Äén‚Äéa‚Äél‚Äé ‚ÄéS‚Äéu‚Äéb‚Äép‚Äéo‚Äée‚Äén‚Äéa‚Äé
P‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚ÄéJ‚Äéo‚Äée‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚Äés‚Äép‚Äée‚Äéa‚Äék‚Äés‚Äé ‚Äéd‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚Äén‚Äée‚Äéw‚Äés‚Äé ‚Äéc‚Äéo‚Äén‚Äéf‚Äée‚Äér‚Äée‚Äén‚Äéc‚Äée‚Äé ‚Äéa‚Äéf‚Äét‚Äée‚Äér‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äém‚Äée‚Äée‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéC‚Äéh‚Äéi‚Äén‚Äéa‚Äé'‚Äés‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚ÄéX‚Äéi‚Äé ‚ÄéJ‚Äéi‚Äén‚Äép‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéF‚Äéi‚Äél‚Äéo‚Äél‚Äéi‚Äé ‚ÄéE‚Äés‚Äét‚Äéa‚Äét‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚ÄéW‚Äéo‚Äéo‚Äéd‚Äés‚Äéi‚Äéd‚Äée‚Äé,‚Äé ‚ÄéC‚Äéa‚Äél‚Äéi‚Äéf‚Äé.‚Äé,‚Äé ‚ÄéW‚Äée‚Äéd‚Äén‚Äée‚Äés‚Äéd‚Äéa‚Äéy‚Äé,‚Äé ‚ÄéN‚Äéo‚Äév‚Äé,‚Äé ‚Äé1‚Äé5‚Äé,‚Äé ‚Äé2‚Äé0‚Äé2‚Äé3‚Äé,‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äéi‚Äéd‚Äée‚Äél‚Äéi‚Äén‚Äée‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéA‚Äés‚Äéi‚Äéa‚Äé-‚ÄéP‚Äéa‚Äéc‚Äéi‚Äéf‚Äéi‚Äéc‚Äé ‚ÄéE‚Äéc‚Äéo‚Äén‚Äéo‚Äém‚Äéi‚Äéc‚Äé ‚ÄéC‚Äéo‚Äéo‚Äép‚Äée‚Äér‚Äéa‚Äét‚Äéi‚Äév‚Äée‚Äé ‚Äéc‚Äéo‚Äén‚Äéf‚Äée‚Äér‚Äée‚Äén‚Äéc‚Äée‚Äé.‚Äé ‚Äé(‚ÄéD‚Äéo‚Äéu‚Äég‚Äé ‚ÄéM‚Äéi‚Äél‚Äél‚Äés‚Äé/‚ÄéT‚Äéh‚Äée‚Äé ‚ÄéN‚Äée‚Äéw‚Äé ‚ÄéY‚Äéo‚Äér‚Äék‚Äé ‚ÄéT‚Äéi‚Äém‚Äée‚Äés‚Äé ‚Äév‚Äéi‚Äéa‚Äé ‚ÄéA‚ÄéP‚Äé,‚Äé ‚ÄéP‚Äéo‚Äéo‚Äél‚Äé)‚Äé
T‚Äéh‚Äée‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéR‚Äée‚Äép‚Äér‚Äée‚Äés‚Äée‚Äén‚Äét‚Äéa‚Äét‚Äéi‚Äév‚Äée‚Äés‚Äé ‚Äéo‚Äén‚Äé ‚ÄéW‚Äée‚Äéd‚Äén‚Äée‚Äés‚Äéd‚Äéa‚Äéy‚Äé ‚Äév‚Äéo‚Äét‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äéf‚Äéo‚Äér‚Äém‚Äéa‚Äél‚Äéi‚Äéz‚Äée‚Äé ‚Äéa‚Äén‚Äé ‚Äéi‚Äém‚Äép‚Äée‚Äéa‚Äéc‚Äéh‚Äém‚Äée‚Äén‚Äét‚Äé ‚Äéi‚Äén‚Äéq‚Äéu‚Äéi‚Äér‚Äéy‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚ÄéJ‚Äéo‚Äée‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚Äéb‚Äéy‚Äé ‚Äéa‚Äé ‚Äév‚Äéo‚Äét‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äé2‚Äé2‚Äé1‚Äé ‚Äét‚Äéo‚Äé ‚Äé2‚Äé1‚Äé2‚Äé.‚Äé

T‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéS‚Äél‚Äéa‚Äém‚Äés‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚Äéa‚Äés‚Äé ‚Äé‚Äò‚ÄéL‚Äéo‚Äéw‚Äé-‚ÄéI‚ÄéQ‚Äé‚Äô‚Äé ‚Äéi‚Äén‚Äé ‚ÄéI‚Äéo‚Äéw‚Äéa‚Äé,‚Äé ‚ÄéS‚Äéa‚Äéy‚Äés‚Äé ‚ÄéJ‚Äéo‚Äée‚Äé ‚Äé‚Äò‚ÄéM‚Äéo‚Äés‚Äét‚Äé ‚ÄéC‚Äéo‚Äér‚Äér‚Äéu‚Äép‚Äét‚Äé‚Äô‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚Äéi‚Äén‚Äé
T‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéS‚Äél‚Äéa‚Äém‚Äés‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚Äéa‚Äés‚Äé ‚Äé‚Äò‚ÄéL‚Äéo‚Äéw‚Äé-‚ÄéI‚ÄéQ‚Äé‚Äô‚Äé ‚Äéi‚Äén‚Äé ‚ÄéI‚Äéo‚Äéw‚Äéa‚Äé,‚Äé ‚ÄéS‚Äéa‚Äéy‚Äés‚Äé ‚ÄéJ‚Äéo‚Äée‚Äé ‚Äé‚Äò‚ÄéM‚Äéo‚Äés‚Äét‚Äé ‚ÄéC‚Äéo‚Äér‚Äér‚Äéu‚Äép‚Äét‚Äé‚Äô‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚Äéi‚Äén‚Äé
2‚Äé5‚Äé2‚Äé
T‚Äél‚Äéa‚Äéi‚Äéb‚Äé:‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéC‚Äéa‚Äén‚Äé'‚Äét‚Äé ‚ÄéB‚Äéa‚Äés‚Äéh‚Äé ‚ÄéM‚Äée‚Äé,‚Äé ‚ÄéN‚Äéo‚Äé ‚ÄéO‚Äén‚Äée‚Äé ‚ÄéC‚Äéa‚Äén‚Äé ‚ÄéP‚Äéo‚Äél‚Äéi‚Äéc‚Äée‚Äé ‚ÄéW‚Äéh‚Äéa‚Äét‚Äé ‚ÄéI‚Äé ‚ÄéS‚Äéa‚Äéy‚Äé ‚Äé'‚Äéa‚Äés‚Äé ‚Äéa‚Äé ‚ÄéP‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äé'‚Äé
T‚Äél‚Äéa‚Äéi‚Äéb‚Äé:‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéC‚Äéa‚Äén‚Äé'‚Äét‚Äé ‚ÄéB‚Äéa‚Äés‚Äéh‚Äé ‚ÄéM‚Äée‚Äé,‚Äé ‚ÄéN‚Äéo‚Äé ‚ÄéO‚Äén‚Äée‚Äé ‚ÄéC‚Äéa‚Äén‚Äé ‚ÄéP‚Äéo‚Äél‚Äéi‚Äéc‚Äée‚Äé ‚ÄéW‚Äéh‚Äéa‚Äét‚Äé ‚ÄéI‚Äé ‚ÄéS‚Äéa‚Äéy‚Äé ‚Äé'‚Äéa‚Äés‚Äé ‚Äéa‚Äé ‚ÄéP‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äé'‚Äé
6‚Äé7‚Äé8‚Äé
7‚Äé0‚Äé%‚Äé ‚ÄéD‚Äéi‚Äés‚Äéa‚Äép‚Äép‚Äér‚Äéo‚Äév‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéU‚ÄéK‚Äé ‚ÄéP‚ÄéM‚Äé ‚ÄéS‚Äéu‚Äén‚Äéa‚Äék‚Äé
7‚Äé0‚Äé%‚Äé ‚ÄéD‚Äéi‚Äés‚Äéa‚Äép‚Äép‚Äér‚Äéo‚Äév‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéU‚ÄéK‚Äé ‚ÄéP‚ÄéM‚Äé ‚ÄéS‚Äéu‚Äén‚Äéa‚Äék‚Äé
1‚Äé1‚Äé5‚Äé
H‚Äéu‚Äén‚Äét‚Äée‚Äér‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéS‚Äéa‚Äéy‚Äés‚Äé ‚ÄéH‚Äée‚Äé ‚ÄéW‚Äéo‚Äén‚Äé'‚Äét‚Äé ‚ÄéT‚Äée‚Äés‚Äét‚Äéi‚Äéf‚Äéy‚Äé ‚ÄéB‚Äée‚Äéh‚Äéi‚Äén‚Äéd‚Äé ‚ÄéC‚Äél‚Äéo‚Äés‚Äée‚Äéd‚Äé ‚ÄéD‚Äéo‚Äéo‚Äér‚Äés‚Äé
H‚Äéu‚Äén‚Äét‚Äée‚Äér‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéS‚Äéa‚Äéy‚Äés‚Äé ‚ÄéH‚Äée‚Äé ‚ÄéW‚Äéo‚Äén‚Äé'‚Äét‚Äé ‚ÄéT‚Äée‚Äés‚Äét‚Äéi‚Äéf‚Äéy‚Äé ‚ÄéB‚Äée‚Äéh‚Äéi‚Äén‚Äéd‚Äé ‚ÄéC‚Äél‚Äéo‚Äés‚Äée‚Äéd‚Äé ‚ÄéD‚Äéo‚Äéo‚Äér‚Äés‚Äé
5‚Äé,‚Äé0‚Äé1‚Äé3‚Äé
B‚Äéo‚Äés‚Äét‚Äéo‚Äén‚Äé ‚ÄéM‚Äéa‚Äéy‚Äéo‚Äér‚Äé ‚ÄéP‚Äél‚Äéa‚Äén‚Äés‚Äé ‚Äé'‚ÄéN‚Äéo‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äés‚Äé'‚Äé ‚ÄéC‚Äéh‚Äér‚Äéi‚Äés‚Äét‚Äém‚Äéa‚Äés‚Äé ‚ÄéP‚Äéa‚Äér‚Äét‚Äéy‚Äé
B‚Äéo‚Äés‚Äét‚Äéo‚Äén‚Äé ‚ÄéM‚Äéa‚Äéy‚Äéo‚Äér‚Äé ‚ÄéP‚Äél‚Äéa‚Äén‚Äés‚Äé ‚Äé'‚ÄéN‚Äéo‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äés‚Äé'‚Äé ‚ÄéC‚Äéh‚Äér‚Äéi‚Äés‚Äét‚Äém‚Äéa‚Äés‚Äé ‚ÄéP‚Äéa‚Äér‚Äét‚Äéy‚Äé
1‚Äé,‚Äé2‚Äé8‚Äé3‚Äé
P‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚ÄéJ‚Äéo‚Äée‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚Äés‚Äép‚Äée‚Äéa‚Äék‚Äés‚Äé ‚Äéd‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚Äén‚Äée‚Äéw‚Äés‚Äé ‚Äéc‚Äéo‚Äén‚Äéf‚Äée‚Äér‚Äée‚Äén‚Äéc‚Äée‚Äé ‚Äéa‚Äéf‚Äét‚Äée‚Äér‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äém‚Äée‚Äée‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéC‚Äéh‚Äéi‚Äén‚Äéa‚Äé'‚Äés‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚ÄéX‚Äéi‚Äé ‚ÄéJ‚Äéi‚Äén‚Äép‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéF‚Äéi‚Äél‚Äéo‚Äél‚Äéi‚Äé ‚ÄéE‚Äés‚Äét‚Äéa‚Äét‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚ÄéW‚Äéo‚Äéo‚Äéd‚Äés‚Äéi‚Äéd‚Äée‚Äé,‚Äé ‚ÄéC‚Äéa‚Äél‚Äéi‚Äéf‚Äé.‚Äé,‚Äé ‚ÄéW‚Äée‚Äéd‚Äén‚Äée‚Äés‚Äéd‚Äéa‚Äéy‚Äé,‚Äé ‚ÄéN‚Äéo‚Äév‚Äé,‚Äé ‚Äé1‚Äé5‚Äé,‚Äé ‚Äé2‚Äé0‚Äé2‚Äé3‚Äé,‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äéi‚Äéd‚Äée‚Äél‚Äéi‚Äén‚Äée‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéA‚Äés‚Äéi‚Äéa‚Äé-‚ÄéP‚Äéa‚Äéc‚Äéi‚Äéf‚Äéi‚Äéc‚Äé ‚ÄéE‚Äéc‚Äéo‚Äén‚Äéo‚Äém‚Äéi‚Äéc‚Äé ‚ÄéC‚Äéo‚Äéo‚Äép‚Äée‚Äér‚Äéa‚Äét‚Äéi‚Äév‚Äée‚Äé ‚Äéc‚Äéo‚Äén‚Äéf‚Äée‚Äér‚Äée‚Äén‚Äéc‚Äée‚Äé.‚Äé ‚Äé(‚ÄéD‚Äéo‚Äéu‚Äég‚Äé ‚ÄéM‚Äéi‚Äél‚Äél‚Äés‚Äé/‚ÄéT‚Äéh‚Äée‚Äé ‚ÄéN‚Äée‚Äéw‚Äé ‚ÄéY‚Äéo‚Äér‚Äék‚Äé ‚ÄéT‚Äéi‚Äém‚Äée‚Äés‚Äé ‚Äév‚Äéi‚Äéa‚Äé ‚ÄéA‚ÄéP‚Äé,‚Äé ‚ÄéP‚Äéo‚Äéo‚Äél‚Äé)‚Äé
H‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚ÄéV‚Äéo‚Äét‚Äée‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéF‚Äéo‚Äér‚Äém‚Äéa‚Äél‚Äéi‚Äéz‚Äée‚Äé ‚ÄéI‚Äém‚Äép‚Äée‚Äéa‚Äéc‚Äéh‚Äém‚Äée‚Äén‚Äét‚Äé ‚ÄéI‚Äén‚Äéq‚Äéu‚Äéi‚Äér‚Äéy‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚ÄéJ‚Äéo‚Äée‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé
7‚Äé,‚Äé1‚Äé0‚Äé2‚Äé
F‚Äée‚Äéd‚Äée‚Äér‚Äéa‚Äél‚Äé ‚ÄéJ‚Äéu‚Äéd‚Äég‚Äée‚Äé ‚ÄéP‚Äéa‚Äéu‚Äés‚Äée‚Äés‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéJ‚Äéa‚Äén‚Äéu‚Äéa‚Äér‚Äéy‚Äé ‚Äé6‚Äé ‚ÄéC‚Äéa‚Äés‚Äée‚Äé ‚ÄéA‚Äém‚Äéi‚Äéd‚Äé ‚ÄéA‚Äép‚Äép‚Äée‚Äéa‚Äél‚Äé
1‚Äé,‚Äé0‚Äé0‚Äé2‚Äé
R‚Äéa‚Äés‚Äék‚Äéi‚Äén‚Äé:‚Äé ‚ÄéG‚ÄéO‚ÄéP‚Äé ‚ÄéI‚Äém‚Äép‚Äée‚Äéa‚Äéc‚Äéh‚Äém‚Äée‚Äén‚Äét‚Äé ‚ÄéI‚Äén‚Äéq‚Äéu‚Äéi‚Äér‚Äéy‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéM‚Äéo‚Äéc‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéC‚Äéo‚Äén‚Äés‚Äét‚Äéi‚Äét‚Äéu‚Äét‚Äéi‚Äéo‚Äén‚Äé
R‚Äéa‚Äés‚Äék‚Äéi‚Äén‚Äé:‚Äé ‚ÄéG‚ÄéO‚ÄéP‚Äé ‚ÄéI‚Äém‚Äép‚Äée‚Äéa‚Äéc‚Äéh‚Äém‚Äée‚Äén‚Äét‚Äé ‚ÄéI‚Äén‚Äéq‚Äéu‚Äéi‚Äér‚Äéy‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéM‚Äéo‚Äéc‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéC‚Äéo‚Äén‚Äés‚Äét‚Äéi‚Äét‚Äéu‚Äét‚Äéi‚Äéo‚Äén‚Äé
4‚Äé6‚Äé7‚Äé
C‚Äéo‚Äém‚Äée‚Äér‚Äé,‚Äé ‚ÄéJ‚Äéo‚Äér‚Äéd‚Äéa‚Äén‚Äé ‚ÄéB‚Äée‚Äég‚Äéi‚Äén‚Äé ‚ÄéC‚Äéo‚Äén‚Äét‚Äée‚Äém‚Äép‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéC‚Äéo‚Äén‚Äég‚Äér‚Äée‚Äés‚Äés‚Äé ‚ÄéP‚Äér‚Äéo‚Äéc‚Äée‚Äée‚Äéd‚Äéi‚Äén‚Äég‚Äés‚Äé ‚ÄéA‚Äég‚Äéa‚Äéi‚Äén‚Äés‚Äét‚Äé ‚ÄéH‚Äéu‚Äén‚Äét‚Äée‚Äér‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé
C‚Äéo‚Äém‚Äée‚Äér‚Äé,‚Äé ‚ÄéJ‚Äéo‚Äér‚Äéd‚Äéa‚Äén‚Äé ‚ÄéB‚Äée‚Äég‚Äéi‚Äén‚Äé ‚ÄéC‚Äéo‚Äén‚Äét‚Äée‚Äém‚Äép‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéC‚Äéo‚Äén‚Äég‚Äér‚Äée‚Äés‚Äés‚Äé ‚ÄéP‚Äér‚Äéo‚Äéc‚Äée‚Äée‚Äéd‚Äéi‚Äén‚Äég‚Äés‚Äé ‚ÄéA‚Äég‚Äéa‚Äéi‚Äén‚Äés‚Äét‚Äé ‚ÄéH‚Äéu‚Äén‚Äét‚Äée‚Äér‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé
4‚Äé,‚Äé6‚Äé1‚Äé3‚Äé
R‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äé:‚Äé ‚ÄéH‚Äéa‚Äér‚Äév‚Äéa‚Äér‚Äéd‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚ÄéC‚Äél‚Äéa‚Äéu‚Äéd‚Äéi‚Äén‚Äée‚Äé ‚ÄéG‚Äéa‚Äéy‚Äé ‚Äét‚Äéo‚Äé ‚ÄéS‚Äét‚Äéa‚Äéy‚Äé;‚Äé ‚ÄéP‚Äél‚Äéa‚Äég‚Äéi‚Äéa‚Äér‚Äéi‚Äés‚Äém‚Äé ‚ÄéC‚Äéo‚Äén‚Äéc‚Äée‚Äér‚Äén‚Äés‚Äé ‚ÄéL‚Äéi‚Äén‚Äég‚Äée‚Äér‚Äé
R‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äé:‚Äé ‚ÄéH‚Äéa‚Äér‚Äév‚Äéa‚Äér‚Äéd‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚ÄéC‚Äél‚Äéa‚Äéu‚Äéd‚Äéi‚Äén‚Äée‚Äé ‚ÄéG‚Äéa‚Äéy‚Äé ‚Äét‚Äéo‚Äé ‚ÄéS‚Äét‚Äéa‚Äéy‚Äé;‚Äé ‚ÄéP‚Äél‚Äéa‚Äég‚Äéi‚Äéa‚Äér‚Äéi‚Äés‚Äém‚Äé ‚ÄéC‚Äéo‚Äén‚Äéc‚Äée‚Äér‚Äén‚Äés‚Äé ‚ÄéL‚Äéi‚Äén‚Äég‚Äée‚Äér‚Äé

N‚Äée‚Äég‚Äér‚Äéo‚Äé ‚ÄéE‚Äéx‚Äé-‚ÄéH‚Äéo‚Äém‚Äée‚Äéc‚Äéo‚Äém‚Äéi‚Äén‚Äég‚Äé ‚ÄéK‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äét‚Äé ‚ÄéW‚Äéo‚Äéo‚Äéd‚Äér‚Äéo‚Äéw‚Äé ‚ÄéW‚Äéi‚Äél‚Äés‚Äéo‚Äén‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äé ‚ÄéD‚Äéi‚Äée‚Äés‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéR‚Äéu‚Äés‚Äés‚Äéi‚Äéa‚Äén‚Äé ‚ÄéR‚Äéo‚Äéu‚Äél‚Äée‚Äét‚Äét‚Äée‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéS‚Äéo‚Äém‚Äée‚Äé ‚ÄéF‚Äée‚Äél‚Äél‚Äéo‚Äéw‚Äé ‚ÄéN‚Äée‚Äég‚Äér‚Äéo‚Äée‚Äés‚Äé.‚Äé

O‚Äéf‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äét‚Äéu‚Äép‚Äéi‚Äéd‚Äé ‚Äét‚Äéh‚Äéi‚Äén‚Äég‚Äés‚Äé ‚Äén‚Äée‚Äég‚Äér‚Äéo‚Äée‚Äés‚Äé ‚Äéd‚Äéo‚Äé,‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äéi‚Äés‚Äé ‚Äéb‚Äéy‚Äé ‚Äéf‚Äéa‚Äér‚Äé ‚Äéo‚Äén‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äét‚Äéu‚Äép‚Äéi‚Äéd‚Äée‚Äés‚Äét‚Äé.‚Äé


B‚Äéo‚Äéd‚Äée‚Äég‚Äéa‚Äé ‚ÄéS‚Äét‚Äéo‚Äér‚Äée‚Äé ‚ÄéO‚Äéw‚Äén‚Äée‚Äér‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéo‚Äét‚Äés‚Äé ‚ÄéM‚Äéo‚Äén‚Äék‚Äée‚Äéy‚Äé ‚ÄéM‚Äéa‚Äén‚Äé ‚ÄéD‚Äée‚Äéa‚Äéd‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéG‚Äée‚Äét‚Äés‚Äé ‚Äén‚Äéo‚Äé ‚ÄéC‚Äéh‚Äéa‚Äér‚Äég‚Äée‚Äés‚Äé.‚Äé


K‚ÄéF‚ÄéC‚Äé ‚ÄéA‚Äéf‚Äéi‚Äéc‚Äéi‚Äéo‚Äén‚Äéa‚Äéd‚Äéo‚Äé ‚ÄéR‚Äéo‚Äéb‚Äés‚Äé ‚ÄéM‚Äéa‚Äén‚Äéh‚Äéa‚Äét‚Äét‚Äéa‚Äén‚Äé ‚ÄéJ‚Äée‚Äéw‚Äée‚Äél‚Äér‚Äéy‚Äé ‚ÄéS‚Äét‚Äéo‚Äér‚Äée‚Äé.‚Äé


G‚Äér‚Äéo‚Äéi‚Äéd‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéo‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéi‚Äén‚Äé ‚ÄéV‚Äéi‚Äén‚Äée‚Äél‚Äéa‚Äén‚Äéd‚Äé.‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéW‚Äée‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé.‚Äé

T‚Äéh‚Äéu‚Äé ‚Äé1‚Äé4‚Äé ‚Äé|‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé
6‚Äé7‚Äé¬∞‚Äé
1‚Äé5‚Äé%‚Äé
E‚Äé
9‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
C‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé ‚Äés‚Äék‚Äéi‚Äée‚Äés‚Äé ‚Äée‚Äéa‚Äér‚Äél‚Äéy‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äén‚Äé ‚Äép‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äéa‚Äéf‚Äét‚Äée‚Äér‚Äén‚Äéo‚Äéo‚Äén‚Äé.‚Äé ‚ÄéS‚Äél‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äéc‚Äéh‚Äéa‚Äén‚Äéc‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äéa‚Äé ‚Äér‚Äéa‚Äéi‚Äén‚Äé ‚Äés‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äé.‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äé ‚Äé6‚Äé7‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéE‚Äé ‚Äéa‚Äét‚Äé ‚Äé5‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé

H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
6‚Äé0‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
3‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
S‚Äéu‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
7‚Äé:‚Äé1‚Äé7‚Äé ‚Äéa‚Äém‚Äé
S‚Äéu‚Äén‚Äés‚Äée‚Äét‚Äé
5‚Äé:‚Äé3‚Äé2‚Äé ‚Äép‚Äém‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé1‚Äé4‚Äé ‚Äé|‚Äé ‚ÄéN‚Äéi‚Äég‚Äéh‚Äét‚Äé
5‚Äé3‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
E‚Äé
9‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
M‚Äéa‚Äéi‚Äén‚Äél‚Äéy‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé.‚Äé ‚ÄéL‚Äéo‚Äéw‚Äé ‚Äé5‚Äé3‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéE‚Äé ‚Äéa‚Äét‚Äé ‚Äé5‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé

H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
8‚Äé3‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
0‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
M‚Äéo‚Äéo‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
9‚Äé:‚Äé1‚Äé2‚Äé ‚Äéa‚Äém‚Äé
W‚Äéa‚Äéx‚Äéi‚Äén‚Äég‚Äé ‚ÄéC‚Äér‚Äée‚Äés‚Äéc‚Äée‚Äén‚Äét‚Äé
M‚Äéo‚Äéo‚Äén‚Äés‚Äée‚Äét‚Äé
7‚Äé:‚Äé1‚Äé7‚Äé ‚Äép‚Äém‚Äé
F‚Äér‚Äéi‚Äé ‚Äé1‚Äé5‚Äé
R‚Äéa‚Äéi‚Äén‚Äé
6‚Äé6‚Äé¬∞‚Äé
/‚Äé4‚Äé5‚Äé¬∞‚Äé
7‚Äé0‚Äé%‚Äé
E‚ÄéS‚ÄéE‚Äé ‚Äé7‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé1‚Äé6‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
6‚Äé3‚Äé¬∞‚Äé
/‚Äé3‚Äé7‚Äé¬∞‚Äé
6‚Äé%‚Äé
N‚ÄéN‚ÄéW‚Äé ‚Äé1‚Äé6‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé1‚Äé7‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
6‚Äé8‚Äé¬∞‚Äé
/‚Äé3‚Äé8‚Äé¬∞‚Äé
5‚Äé%‚Äé
W‚Äé ‚Äé6‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé1‚Äé8‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéS‚Äéu‚Äén‚Äén‚Äéy‚Äé
6‚Äé7‚Äé¬∞‚Äé
/‚Äé3‚Äé8‚Äé¬∞‚Äé
4‚Äé%‚Äé
N‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé1‚Äé9‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
6‚Äé1‚Äé¬∞‚Äé
/‚Äé4‚Äé1‚Äé¬∞‚Äé
4‚Äé%‚Äé
E‚Äé ‚Äé6‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé2‚Äé0‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
6‚Äé9‚Äé¬∞‚Äé
/‚Äé4‚Äé9‚Äé¬∞‚Äé
7‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé9‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé2‚Äé1‚Äé
C‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé1‚Äé¬∞‚Äé
/‚Äé5‚Äé4‚Äé¬∞‚Äé
2‚Äé1‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé8‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé2‚Äé2‚Äé
S‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
6‚Äé9‚Äé¬∞‚Äé
/‚Äé5‚Äé4‚Äé¬∞‚Äé
5‚Äé2‚Äé%‚Äé
E‚ÄéS‚ÄéE‚Äé ‚Äé8‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé2‚Äé3‚Äé
S‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
6‚Äé7‚Äé¬∞‚Äé
/‚Äé5‚Äé2‚Äé¬∞‚Äé
5‚Äé8‚Äé%‚Äé
E‚ÄéS‚ÄéE‚Äé ‚Äé9‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé2‚Äé4‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
6‚Äé8‚Äé¬∞‚Äé
/‚Äé5‚Äé1‚Äé¬∞‚Äé
5‚Äé3‚Äé%‚Äé
E‚ÄéS‚ÄéE‚Äé ‚Äé8‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé2‚Äé5‚Äé
S‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
6‚Äé5‚Äé¬∞‚Äé
/‚Äé4‚Äé9‚Äé¬∞‚Äé
5‚Äé8‚Äé%‚Äé
N‚ÄéN‚ÄéE‚Äé ‚Äé8‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé2‚Äé6‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
6‚Äé5‚Äé¬∞‚Äé
/‚Äé4‚Äé6‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
N‚Äé ‚Äé9‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé2‚Äé7‚Äé
P‚ÄéM‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
6‚Äé3‚Äé¬∞‚Äé
/‚Äé4‚Äé5‚Äé¬∞‚Äé
4‚Äé6‚Äé%‚Äé
N‚Äé ‚Äé9‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé2‚Äé8‚Äé
S‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
6‚Äé1‚Äé¬∞‚Äé
/‚Äé4‚Äé3‚Äé¬∞‚Äé
5‚Äé0‚Äé%‚Äé
N‚ÄéN‚ÄéW‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

C‚Äéu‚Äér‚Äér‚Äée‚Äén‚Äét‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äé:‚Äé ‚ÄéS‚Äét‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äél‚Äéa‚Äés‚Äé ‚Äéüé¢¬Ä¬é‚Äéüè¢¬Ä¬é

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

P‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äée‚Äé
P‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äée‚Äé ‚Äé(‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äék‚Äén‚Äéo‚Äéw‚Äén‚Äé ‚Äéa‚Äés‚Äé ‚ÄéF‚Äéu‚Äéc‚Äék‚Äé-‚ÄéY‚Äéo‚Äéu‚Äé-‚ÄéI‚Äé-‚ÄéW‚Äéa‚Äés‚Äé-‚ÄéH‚Äée‚Äér‚Äée‚Äé-‚ÄéF‚Äéi‚Äér‚Äés‚Äét‚Äé-‚ÄéL‚Äéa‚Äén‚Äéd‚Äé)‚Äé ‚Äéi‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéd‚Äér‚Äéa‚Äém‚Äéa‚Äé ‚Äéh‚Äée‚Äéa‚Äéd‚Äéq‚Äéu‚Äéa‚Äér‚Äét‚Äée‚Äér‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéw‚Äéo‚Äér‚Äél‚Äéd‚Äé;‚Äé ‚Äén‚Äéo‚Äé ‚Äés‚Äéi‚Äén‚Äég‚Äél‚Äée‚Äé ‚Äép‚Äél‚Äéa‚Äéc‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéw‚Äéo‚Äér‚Äél‚Äéd‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äég‚Äée‚Äén‚Äée‚Äér‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äém‚Äéu‚Äéc‚Äéh‚Äé ‚Äéd‚Äér‚Äéa‚Äém‚Äéa‚Äé ‚Äés‚Äéi‚Äén‚Äéc‚Äée‚Äé ‚ÄéN‚Äéa‚Äéz‚Äéi‚Äé ‚ÄéG‚Äée‚Äér‚Äém‚Äéa‚Äén‚Äéy‚Äé.‚Äé ‚ÄéP‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äée‚Äé ‚Äéc‚Äéo‚Äén‚Äét‚Äéi‚Äén‚Äéu‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äég‚Äée‚Äét‚Äés‚Äé ‚Äép‚Äéw‚Äén‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéP‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äés‚Äé,‚Äé ‚Äéd‚Äéu‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äér‚Äéa‚Äéc‚Äéi‚Äéa‚Äél‚Äé ‚Äéh‚Äéa‚Äén‚Äéd‚Äéi‚Äéc‚Äéa‚Äép‚Äé,‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äép‚Äér‚Äéo‚Äén‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äés‚Äép‚Äéo‚Äén‚Äét‚Äéa‚Äén‚Äée‚Äéo‚Äéu‚Äés‚Äé ‚Äéd‚Äée‚Äét‚Äéo‚Äén‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé,‚Äé ‚Äéc‚Äéa‚Äéu‚Äés‚Äéi‚Äén‚Äég‚Äé ‚Äém‚Äéu‚Äéc‚Äéh‚Äé ‚Äéa‚Äén‚Äén‚Äéo‚Äéy‚Äéa‚Äén‚Äéc‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äél‚Äéu‚Äél‚Äéz‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚ÄéP‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äés‚Äé ‚Äél‚Äéi‚Äév‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚ÄéP‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äée‚Äé ‚Äés‚Äéi‚Äén‚Äéc‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéM‚Äéu‚Äés‚Äél‚Äéi‚Äém‚Äés‚Äé ‚Äér‚Äéa‚Äép‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéB‚Äéy‚Äéz‚Äéa‚Äén‚Äét‚Äéi‚Äén‚Äée‚Äés‚Äé,‚Äé ‚Äéw‚Äéh‚Äéi‚Äél‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé ‚Äél‚Äéi‚Äév‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äés‚Äéi‚Äén‚Äéc‚Äée‚Äé ‚Äéb‚Äée‚Äéf‚Äéo‚Äér‚Äée‚Äé ‚Äél‚Äéo‚Äél‚Äéi‚Äét‚Äéa‚Äés‚Äé ‚Äéw‚Äée‚Äér‚Äée‚Äé ‚Äéi‚Äén‚Äév‚Äée‚Äén‚Äét‚Äée‚Äéd‚Äé.‚Äé ‚ÄéA‚Äéc‚Äéc‚Äéo‚Äér‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéo‚Äé ‚ÄéR‚Äéa‚Äéc‚Äéh‚Äée‚Äél‚Äé ‚ÄéC‚Äéo‚Äér‚Äér‚Äéi‚Äée‚Äé,‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äém‚Äéa‚Äék‚Äée‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéP‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéi‚Äén‚Äéd‚Äéi‚Äég‚Äée‚Äén‚Äéo‚Äéu‚Äés‚Äé,‚Äé ‚Äén‚Äéa‚Äét‚Äéi‚Äév‚Äée‚Äé ‚Äép‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äél‚Äéa‚Äén‚Äéd‚Äé.‚Äé ‚ÄéM‚Äéo‚Äés‚Äét‚Äé ‚Äér‚Äée‚Äéc‚Äée‚Äén‚Äét‚Äél‚Äéy‚Äé,‚Äé ‚ÄéP‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéG‚Äéa‚Äéz‚Äéa‚Äé ‚Äég‚Äée‚Äén‚Äée‚Äér‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äée‚Äén‚Äéo‚Äér‚Äém‚Äéo‚Äéu‚Äés‚Äé ‚Äéd‚Äér‚Äéa‚Äém‚Äéa‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéw‚Äéo‚Äér‚Äél‚Äéd‚Äé ‚Äés‚Äét‚Äéa‚Äég‚Äée‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äéb‚Äée‚Äée‚Äén‚Äé ‚Äés‚Äéu‚Äég‚Äég‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚ÄéP‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äés‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äéa‚Äés‚Äé ‚Äém‚Äéu‚Äéc‚Äéh‚Äé ‚Äéo‚Äéf‚Äé ‚Äéa‚Äé ‚Äép‚Äée‚Äér‚Äés‚Äée‚Äéc‚Äéu‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äéx‚Äé ‚Äéa‚Äés‚Äé ‚Äéd‚Äéo‚Äé ‚ÄéJ‚Äée‚Äéw‚Äés‚Äé

(‚Äé(‚Äé ‚ÄéR‚Äéo‚Äéc‚Äék‚Äée‚Äét‚Äés‚Äé ‚Äéa‚Äéw‚Äéa‚Äéy‚Äé~‚Äé!‚Äé ‚Äé)‚Äé)‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

T‚Äéh‚Äée‚Äé ‚Äér‚Äéa‚Äés‚Äép‚Äéb‚Äée‚Äér‚Äér‚Äéy‚Äé ‚Äéi‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äée‚Äéd‚Äéi‚Äéb‚Äél‚Äée‚Äé ‚Äéf‚Äér‚Äéu‚Äéi‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äéa‚Äé ‚Äém‚Äéu‚Äél‚Äét‚Äéi‚Äét‚Äéu‚Äéd‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äép‚Äél‚Äéa‚Äén‚Äét‚Äé ‚Äés‚Äép‚Äée‚Äéc‚Äéi‚Äée‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äég‚Äée‚Äén‚Äéu‚Äés‚Äé ‚ÄéR‚Äéu‚Äéb‚Äéu‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äér‚Äéo‚Äés‚Äée‚Äé ‚Äéf‚Äéa‚Äém‚Äéi‚Äél‚Äéy‚Äé,‚Äé ‚Äém‚Äéo‚Äés‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äéw‚Äéh‚Äéi‚Äéc‚Äéh‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äéu‚Äéb‚Äég‚Äée‚Äén‚Äéu‚Äés‚Äé ‚ÄéI‚Äéd‚Äéa‚Äée‚Äéo‚Äéb‚Äéa‚Äét‚Äéu‚Äés‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äén‚Äéa‚Äém‚Äée‚Äé ‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äéa‚Äép‚Äép‚Äél‚Äéi‚Äée‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äél‚Äéa‚Äén‚Äét‚Äé ‚Äéi‚Äét‚Äés‚Äée‚Äél‚Äéf‚Äé.‚Äé ‚ÄéR‚Äéa‚Äés‚Äép‚Äéb‚Äée‚Äér‚Äér‚Äéy‚Äé ‚Äép‚Äél‚Äéa‚Äén‚Äét‚Äés‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äép‚Äée‚Äér‚Äée‚Äén‚Äén‚Äéi‚Äéa‚Äél‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äéw‚Äéo‚Äéo‚Äéd‚Äéy‚Äé ‚Äés‚Äét‚Äée‚Äém‚Äés‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äén‚Äé ‚Äéa‚Äég‚Äég‚Äér‚Äée‚Äég‚Äéa‚Äét‚Äée‚Äé ‚Äéf‚Äér‚Äéu‚Äéi‚Äét‚Äé,‚Äé ‚Äéd‚Äée‚Äév‚Äée‚Äél‚Äéo‚Äép‚Äéi‚Äén‚Äég‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äén‚Äéu‚Äém‚Äée‚Äér‚Äéo‚Äéu‚Äés‚Äé ‚Äéd‚Äéi‚Äés‚Äét‚Äéi‚Äén‚Äéc‚Äét‚Äé ‚Äéc‚Äéa‚Äér‚Äép‚Äée‚Äél‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äéa‚Äé ‚Äés‚Äéi‚Äén‚Äég‚Äél‚Äée‚Äé ‚Äéf‚Äél‚Äéo‚Äéw‚Äée‚Äér‚Äé.‚Äé ‚ÄéO‚Äér‚Äéi‚Äég‚Äéi‚Äén‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéo‚Äéc‚Äéc‚Äéu‚Äér‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äéi‚Äén‚Äé ‚ÄéE‚Äéa‚Äés‚Äét‚Äé ‚ÄéA‚Äés‚Äéi‚Äéa‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äér‚Äéa‚Äés‚Äép‚Äéb‚Äée‚Äér‚Äér‚Äéy‚Äé ‚Äéi‚Äés‚Äé ‚Äén‚Äéo‚Äéw‚Äé ‚Äéc‚Äéu‚Äél‚Äét‚Äéi‚Äév‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äéa‚Äéc‚Äér‚Äéo‚Äés‚Äés‚Äé ‚Äén‚Äéo‚Äér‚Äét‚Äéh‚Äée‚Äér‚Äén‚Äé ‚ÄéE‚Äéu‚Äér‚Äéo‚Äép‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéN‚Äéo‚Äér‚Äét‚Äéh‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéi‚Äés‚Äé ‚Äée‚Äéa‚Äét‚Äée‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äé ‚Äév‚Äéa‚Äér‚Äéi‚Äée‚Äét‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚Äéw‚Äéa‚Äéy‚Äés‚Äé ‚Äéi‚Äén‚Äéc‚Äél‚Äéu‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äés‚Äé ‚Äéa‚Äé ‚Äéw‚Äéh‚Äéo‚Äél‚Äée‚Äé ‚Äéf‚Äér‚Äéu‚Äéi‚Äét‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äép‚Äér‚Äée‚Äés‚Äée‚Äér‚Äév‚Äée‚Äés‚Äé,‚Äé ‚Äéc‚Äéa‚Äék‚Äée‚Äés‚Äé,‚Äé ‚Äéi‚Äéc‚Äée‚Äé ‚Äéc‚Äér‚Äée‚Äéa‚Äém‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äél‚Äéi‚Äéq‚Äéu‚Äée‚Äéu‚Äér‚Äés‚Äé.‚Äé ‚ÄéR‚Äéa‚Äés‚Äép‚Äéb‚Äée‚Äér‚Äér‚Äéi‚Äée‚Äés‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äéa‚Äé ‚Äér‚Äéi‚Äéc‚Äéh‚Äé ‚Äés‚Äéo‚Äéu‚Äér‚Äéc‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äév‚Äéi‚Äét‚Äéa‚Äém‚Äéi‚Äén‚Äé ‚ÄéC‚Äé,‚Äé ‚Äém‚Äéa‚Äén‚Äég‚Äéa‚Äén‚Äée‚Äés‚Äée‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéd‚Äéi‚Äée‚Äét‚Äéa‚Äér‚Äéy‚Äé ‚Äéf‚Äéi‚Äéb‚Äée‚Äér‚Äé.‚Äé

P‚Äéh‚Äéo‚Äét‚Äéo‚Äég‚Äér‚Äéa‚Äép‚Äéh‚Äé ‚Äéc‚Äér‚Äée‚Äéd‚Äéi‚Äét‚Äé:‚Äé ‚ÄéI‚Äév‚Äéa‚Äér‚Äé ‚ÄéL‚Äée‚Äéi‚Äéd‚Äéu‚Äés‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

W‚Äée‚Äél‚Äél‚Äé ‚ÄéI‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äéf‚Äéi‚Äén‚Äéi‚Äés‚Äéh‚Äée‚Äéd‚Äé ‚Äéw‚Äér‚Äéa‚Äép‚Äép‚Äéi‚Äén‚Äég‚Äé ‚ÄéC‚Äéh‚Äér‚Äéi‚Äés‚Äét‚Äém‚Äéa‚Äés‚Äé ‚Äép‚Äér‚Äée‚Äés‚Äée‚Äén‚Äét‚Äés‚Äé.‚Äé ‚ÄéI‚Äé ‚Äés‚Äée‚Äét‚Äé ‚Äéu‚Äép‚Äé ‚Äéa‚Äé ‚Äét‚Äér‚Äéa‚Äép‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéD‚Äér‚Äé.‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚ÄéP‚Äée‚Äén‚Äéi‚Äés‚Äé ‚Äés‚Äéo‚Äé ‚Äéi‚Äéf‚Äé ‚Äéh‚Äée‚Äé ‚Äéf‚Äéa‚Äél‚Äél‚Äés‚Äé ‚Äéd‚Äéo‚Äéw‚Äén‚Äé ‚Äém‚Äéy‚Äé ‚Äéc‚Äéh‚Äéi‚Äém‚Äén‚Äée‚Äéy‚Äé,‚Äé ‚Äéh‚Äée‚Äé'‚Äél‚Äél‚Äé ‚Äég‚Äée‚Äét‚Äé ‚Äér‚Äéo‚Äéa‚Äés‚Äét‚Äée‚Äéd‚Äé.‚Äé"
D4MbFXd3,Untitled,IMohammedNasr,C#,Thursday 14th of December 2023 08:54:39 AM CDT,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Threading;

namespace OperatingSystemProject
{
    public partial class Form1 : Form
    {
        // Array to represent the forks, initially set to available (0)
        bool[] fork = new bool[5];

        public Form1()
        {
            InitializeComponent();
        }

        // Picking left and right fork
        private void Get(int left, int right, int n)
        {
            lock(this) // Using 'this' object as a lock to synchronize access to shared resources
            {
                while (fork[left] || fork[right]) // While either fork is in use
                {
                    Nasr.Invoke((MethodInvoker)(() => Nasr.AppendText($""Philosopher {n} is thinking...\n""))); // Output that the philosopher is thinking
                    Monitor.Wait(this); // Wait for notification to acquire both forks (waiting PulseAll(this)
                }
                fork[left] = true; // Pick up left fork
                fork[right] = true; // Pick up right fork
            }
        }

        // Putting down forks
        private void Put(int left, int right, int n)
        {
            lock(this) // Using 'this' object as a lock to synchronize access to shared resources
            {
                fork[left] = false; // put down left fork
                fork[right] = false; // put down right fork
                Nasr.Invoke((MethodInvoker)(() => Nasr.AppendText($""Philosopher {n} stopped eating...\n""))); // Output that the philosopher stopped eating
                Monitor.PulseAll(this); // Notify waiting threads that forks are available (the Mointor.Wait(This) will continue)
            }
        }

        private void PhilosopherAction(int n, int thinkDelay, int eatDelay)
        {
            int left = n == 0 ? 4 : n - 1; // Index of the left fork
            int right = n; // Index of the right fork

            new Thread(() =>
            {
                while(true) // Infinite loop to (continuous actions of a philosopher)
                {
                    try
                    {
                        Thread.Sleep(thinkDelay); // thinking time
                        Get(left, right, n); // try to pick up forks
                        Nasr.Invoke((MethodInvoker)(() => Nasr.AppendText($""Philosopher {n} is eating...\n""))); // Output that the philosopher is eating
                        Thread.Sleep(eatDelay); // eating time
                        Put(left, right, n); // put down forks after eating
                    }
                    catch
                    {
                        return;
                    }
                }
            }).Start(); // Start the thread
        }

        // run the dining philosophers problem
        private void RunProblem()
        {
            PhilosopherAction(0, 5000, 5000); // Philosopher 0
            PhilosopherAction(1, 5000, 5000); // Philosopher 1
            PhilosopherAction(2, 5000, 5000); // Philosopher 2
            PhilosopherAction(3, 5000, 5000); // Philosopher 3
            PhilosopherAction(4, 5000, 5000); // Philosopher 4
        }

        private void Form1_Load(object sender, EventArgs e)
        {
        }

        private System.Threading.Timer timer;
        private void simpleButton1_Click(object sender, EventArgs e)
        {
            RunProblem(); // Start the dining philosophers simulation
            // calling the timer function that will excute every 5.1 secs
            timer = new System.Threading.Timer(TimerCallback, null, 5100, 5100);
        }
        // The Timer function that adds newline
        private void TimerCallback(Object o)
        {
            Nasr.Invoke((MethodInvoker)(() => Nasr.AppendText($""\n"")));
        }
    }
}
"
ak3TDZQt,Untitled,VaibhavGaikwad,Python,Thursday 14th of December 2023 08:46:59 AM CDT,"            path.append(next_node)
            new_distance = distance + graph[current][next_node]
            new_distance, new_path = dfs(graph, next_node, visited, path, new_distance)
            visited.remove(next_node)
            path.pop() 
            
            if new_distance < min_distance:
                min_distance = new_distance
                best_path = new_path
    
    return min_distance, best_path

def read_graph_from_input():
    n = int(input(""Enter the number of nodes: ""))
    graph = []
    for i in range(n):
        row = []
        for j in range(n):
            weight = int(input(f""Enter the weight from node {i} to node {j}: ""))
            row.append(weight)
        graph.append(row)
    return graph

def main():
    graph = read_graph_from_input()
    min_tour_len, tour_path = dfs(graph, 0, set([0]), [0], 0)
    print(""Minimum Travel Length:"", min_tour_len)
    print(""Travel Path:"", tour_path)

if __name__ == ""__main__"":
    main()
"
ZrbstqJP,AOC2023D07.py,bob_f,Python,Thursday 14th of December 2023 08:39:10 AM CDT,"from collections import Counter

def get_puzzle_input(a_file_name: str) -> list[str]:
    with open(a_file_name) as INFILE:
        return [line.rstrip().split()[0] for line in INFILE if not line.startswith('#')]
    
def sort_cards(a_card: str) -> int:

    rank_map = {
        'A' : 1, 'K' : 2, 'Q' : 3, 'T' : 4, 
        '9' : 5, '8' : 6, '7' : 7, '6' : 8, 
        '5' : 9, '4' : 10, '3' : 11, '2' : 12, 
        'J' : 13 }

    return rank_map[a_card]

def upgrade_hand(a_hand: str) -> str:

    hand_counter = Counter(a_hand)
    hand_set = set(hand_counter.keys())
    hand_set.discard('J')
    ranked_hand_set = sorted(hand_set, key=sort_cards)

    if hand_counter['J'] == 5: 
        return 'AAAAA'

    if hand_counter['J'] == 4: 
        return ranked_hand_set[0] * 5

    if hand_counter['J'] == 3:
        if len(ranked_hand_set) == 1:
            return ranked_hand_set[0] * 5
        else:
            return (ranked_hand_set[0] * 4) + ranked_hand_set[1]

    if hand_counter['J'] == 2:
        if len(ranked_hand_set) == 1:
            return ranked_hand_set[0] * 5
        elif len(ranked_hand_set) == 2:
            return (ranked_hand_set[0] * 4) + ranked_hand_set[1]
        elif len(ranked_hand_set) == 3:
            return (ranked_hand_set[0] * 3) + ''.join(ranked_hand_set[1:])

    if hand_counter['J'] == 1:
        if len(ranked_hand_set) == 4:
            return (ranked_hand_set[0] * 2) + ''.join(ranked_hand_set[1:])
        elif len(ranked_hand_set) == 3:
            return (ranked_hand_set[0] * 3) + ''.join(ranked_hand_set[1:])
        elif len(ranked_hand_set) == 2:
            return (ranked_hand_set[0] * 4) + ranked_hand_set[1]
        elif len(ranked_hand_set) == 1:
            return ranked_hand_set[0] * 5
        else:
            assert False, 'Why am I here?'

    # No J card, return original hand

    return a_hand

hands = get_puzzle_input('AOC2023\AOC2023D07.txt')    
print(f'{hands=}')

for hand in hands:
    hand_upgraded = upgrade_hand(hand)
    print(f'{hand=}, {hand_upgraded=}')"
x7eXa8uY,HashTable,smatskevich,C++,Thursday 14th of December 2023 08:23:32 AM CDT,"#include <algorithm>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

int Hash(const string& key) {
  return key.empty() ? 0 : key.back();
}

class HashTable {
 public:
  HashTable() : table_(8) {}
  bool Add(const string& key) {
    int h = Hash(key) % table_.size();
    auto& v = table_[h];
    auto it = find(v.begin(), v.end(), key);
    if (it != v.end()) return false;
    v.push_back(key);
    return true;
  }
  bool Remove(const string& key) {
    int h = Hash(key) % table_.size();
    auto& v = table_[h];
    auto it = find(v.begin(), v.end(), key);
    if (it == v.end()) return false;
    v.erase(it);
    return true;
  }
  bool Has(const string& key) {
    int h = Hash(key) % table_.size();
    auto& v = table_[h];
    auto it = find(v.begin(), v.end(), key);
    return it != v.end();
  }

 private:
  vector<vector<string>> table_;
};

int main() {
  HashTable t;
  string command, key;
  while (cin >> command >> key) {
    if (command == ""+"") {
      cout << (t.Add(key) ? ""OK"" : ""FAIL"") << ""\n"";
    } else if (command == ""-"") {
      cout << (t.Remove(key) ? ""OK"" : ""FAIL"") << ""\n"";
    } else if (command == ""?"") {
      cout << (t.Has(key) ? ""OK"" : ""FAIL"") << ""\n"";
    }
  }
  return 0;
}
"
tL6uHpV6,Untitled,eliax1996,Python,Thursday 14th of December 2023 08:13:58 AM CDT,"text = """"""
O....#....
O.OO#....#
.....##...
OO.#O....O
.O.....O#.
O.#..O.#.#
..O..#O..O
.......O..
....###..
OO..#....
""""""

game = tuple(tuple(line) for line in text.strip().split(""\n""))


def display(board):
    for i in range(0, len(board)):
        for j in range(0, len(board[i])):
            print(board[i][j], end="""")
        print()

    print(""\n\n"")


@cache
def rotate_north(game_board):
    board = [list(line) for line in game_board]

    print(""computing new board"")

    for i in range(0, len(board)):
        for j in range(0, len(board[0])):
            if board[i][j] != ""O"":
                continue

            destination = i - 1
            while destination > -1 and board[destination][j] == ""."":
                destination -= 1

            board[i][j], board[destination + 1][j] = board[destination + 1][j], board[i][j]

    return tuple(tuple(line) for line in board)


@cache
def rotate_south(game_board):
    board = [list(line) for line in game_board]

    print(""computing new board"")

    for i in range(len(board) - 1, -1, -1):
        for j in range(0, len(board[0])):
            if board[i][j] != ""O"":
                continue

            destination = i + 1
            while destination < len(board) and board[destination][j] == ""."":
                destination += 1

            board[i][j], board[destination - 1][j] = board[destination - 1][j], board[i][j]

    return tuple(tuple(line) for line in board)


@cache
def rotate_east(game_board):
    board = [list(line) for line in game_board]

    print(""computing new board"")

    for i in range(0, len(board)):
        for j in range(len(board[0]) - 1, -1, -1):
            if board[i][j] != ""O"":
                continue

            destination = j + 1
            while destination < len(board) and board[i][destination] == ""."":
                destination += 1

            board[i][j], board[i][destination - 1] = board[i][destination - 1], board[i][j]

    return tuple(tuple(line) for line in board)


@cache
def rotate_west(game_board):
    board = [list(line) for line in game_board]

    print(""computing new board"")

    for i in range(0, len(board)):
        for j in range(0, len(board[i])):
            if board[i][j] != ""O"":
                continue

            destination = j - 1
            while destination > -1 and board[i][destination] == ""."":
                destination -= 1

            board[i][j], board[i][destination + 1] = board[i][destination + 1], board[i][j]

    return tuple(tuple(line) for line in board)


@cache
def cycle(board):
    new_game = rotate_north(board)
    new_game = rotate_west(new_game)
    new_game = rotate_south(new_game)
    new_game = rotate_east(new_game)
    return new_game


@cache
def points(board):
    tot = 0
    points = len(board)
    for i in range(len(board) - 1, -1, -1):
        for j in range(0, len(board[i])):
            if board[i][j] == ""O"":
                tot += points - i
    return tot


combinations_and_transformed = {}
first_in_repetition = None

cycle_start = None
cycle_width = None

for i in range(0, 1000000000):
    new_game = cycle(game)
    if game in combinations_and_transformed and combinations_and_transformed[game][1] == new_game:
        cycle_start = combinations_and_transformed[game][0]
        cycle_width = i - 1 - combinations_and_transformed[game][0]
        break
    else:
        combinations_and_transformed[game] = (i - 1, new_game)  # we are storing the index of the previous result
    game = new_game

print(f""cycle starts at {cycle_start}"")
print(f""cycle width {cycle_width}"")
print(f""missing {(1000000000 - cycle_start) % cycle_width}"")

for i in range(0, (1000000000 - (cycle_start + cycle_width)) % cycle_width - 1):
    print(points(game))
    game = cycle(game)

print(f""points of the final position: {points(game)}"")
"
uKXPAsqu,Untitled,GASIM_,Python,Thursday 14th of December 2023 08:12:35 AM CDT,"from tensorflow.keras import Sequential
from tensorflow.keras.layers import Conv2D, AveragePooling2D, Flatten, Dense
import matplotlib.pyplot as plt
import numpy as np
from tensorflow.keras.preprocessing.image import ImageDataGenerator

def load_train(path):
    train_datagen = ImageDataGenerator(
        validation_split=0.25,
        rescale=1./255,
        horizontal_flip=True
    )

    validation_datagen = ImageDataGenerator(
        validation_split=0.25,
        rescale=1./255
    )

    train_datagen_flow = train_datagen.flow_from_directory(
        os.path.join(path, 'fruits_small'),
        target_size=(150, 150),
        batch_size=16,
        class_mode='sparse',
        subset='training',
        seed=12345
    )

    val_datagen_flow = validation_datagen.flow_from_directory(
        os.path.join(path, 'fruits_small'),
        target_size=(150, 150),
        batch_size=16,
        class_mode='sparse',
        subset='validation',
        seed=12345
    )

    return train_datagen_flow, val_datagen_flow

def create_model(num_classes):
    model = Sequential()
    model.add(Conv2D(filters=6,
                    kernel_size=(3, 3),
                    activation='relu',
                    input_shape=(150, 150, 3)))
    model.add(AveragePooling2D(pool_size=(2, 2)))
    model.add(Flatten())
    model.add(Dense(units=12, activation='softmax'))

    model.compile(loss='sparse_categorical_crossentropy', 
                  optimizer='adam', metrics=['acc'])
    
    return model

def train_model(model, train_generator, validation_generator, epochs=1):
    history = model.fit(train_datagen_flow,
          validation_data=val_datagen_flow,
          steps_per_epoch=len(train_datagen_flow),
          validation_steps=len(val_datagen_flow),
          verbose=2, epochs=epochs)

    return history"
iamWPRpz,servicio.sh,sergio_educacionit,Bash,Thursday 14th of December 2023 08:11:48 AM CDT,"if ! systemctl is-active apache2.service > /dev/null; then

	echo ""el servicio apache2 esta detenido""
	echo ""iniciando servicio...""

	systemctl start apache2
	echo ""...""
	journalctl --no-pager -u apache2.service | tail -3

else
	echo ""el servicio esta en ejecucion..""

fi
"
fAMmVRpj,Bot_grezzo_Damiano Dotto_qta_forex-gbpnzd-sessioni,Maurizio-Ciullo,JavaScript,Thursday 14th of December 2023 08:03:58 AM CDT,"									// Bot_grezzo_Damiano Dotto_qta_forex-gbpnzd-sessioni //
									// Questa strategia grezza √® sul formu della QTA //

// Strategia grezza, banalissima su GBP/NZD timeframe H1:

// La logica √® molto semplice, entro in posizione long al prezzo pi√π basso raggiunto nelle ultime 6 ore quando l‚Äôorario √® 7:00 (exchange time UTC-5) e chiudere la posizione alle 15:00.

// Questo approccio sfrutta le dinamiche del mercato che si verificano nelle ore di apertura dei due importanti mercati finanziari, Londra e New York,
// andando a posizionare l‚Äôentrata sui minimi dall‚Äôapertura di Londra e chiudere nella sessione di NY.



//@version=5

strategy(""Strategia Londra-New York"", overlay=true)
lowerLow = ta.lowest(low, 6)

if hour(time) == 7
    strategy.entry(""Long"", strategy.long, limit=lowerLow)

if hour(time) == 15
    strategy.close(""Long"")"
wDB0hbZV,Bot Utente QTA JohnnyTYX Diverg Prezz E RSI BTC-USDT 4H,Maurizio-Ciullo,JavaScript,Thursday 14th of December 2023 08:03:15 AM CDT,"                                                              // Strategia Utente Quant Trader Academy BTC/USDT 4H //
							      // Bot Utente QTA JohnnyTYX Diverg Prezz E RSI BTC-USDT 4H //
							      // Trovi strategia e report sul formum qta o in cartella //

// Buonasera a tutti, sto smanettando un po su pinescript, l‚Äôidea della strategia √© agire sia su divergenze ribassiste sia rialziste del prezzo in confronto all‚Äôindicatore rsi.
// La strategia si comporta bene su stocks e crypto in particolare su BTC/USD cambiando alcuni parametri, fatemi sapere cosa ne pensate
// e volevo sapere se √© possibile che abbia overfittato i parametri, grazie
// mille in anticipo


//@version=4
strategy(""RSI Divergence Strategy Bitcoin H4"", overlay=true)

// Input rsi 
rsiLength = input(7, title=""RSI Period"", minval=1)
rsiSource = input(close, title=""RSI Source"")
priceHigh = highest(high, rsiLength)
priceLow = lowest(low, rsiLength)

// Input Generali 
in_valuta = input(""EUR"", title=""Valuta"", options=['EUR', 'USD', 'CAD'])
riskPerTrade = input(1.0, title=""Risk Per Trade %"", minval=0.1, maxval=100)
in_atr_periodo = input(6, title=""Periodicit√† ATR"", minval=5, maxval=500)
in_atr_min = input(0.0015, title=""Min ATR"", minval=0.0001, maxval=500)
in_tp_short = input(1.8, title=""TP short"")
in_tp_long = input(2.5, title=""TP Long"")
in_solo_long = input(false, title=""Solo Long"")
emaPeriod = input(26, title=""EMA period"", minval=1)

// Input per la percentuale dell'impulso
percentualeImpulso = input(2, title=""Percentuale Impulso"", minval=1, maxval=100,step = 0.1)

//Input sessione Trading 
hourTrading = input(title=""Sessione valida di trading"", type=input.string, defval=""0000-0000:1234567"")
rangeTrading = time(timeframe.period, hourTrading)
bgcolor(rangeTrading ? color.green : color.red)

// Calcolo degli indicatori
rsi = rsi(rsiSource, rsiLength)
rsiHigh = highest(rsi, rsiLength)
rsiLow = lowest(rsi, rsiLength)
atr = atr(in_atr_periodo)
ema = ema(close, emaPeriod)

// Definizione dell'impulso rialzista
isBullishImpulse(candles, percentuale) =>
    changePercent = (close - close[candles]) / close[candles] * 100
    bullishImpulse = changePercent > percentuale  
//Definizione impulso ribassista 
isBearishImpulse(candles, percentuale) =>
    changePercent = (close - close[candles]) / close[candles] * 100
    bearishImpulse = changePercent < -percentuale

firstImpulse = isBullishImpulse(1, percentualeImpulso)
secondImpulse = isBullishImpulse(2, percentualeImpulso)

firstBearishImpulse = isBearishImpulse(1, percentualeImpulso)
secondBearishImpulse = isBearishImpulse(2, percentualeImpulso)

// Calcolo dell'RSI per il primo e il secondo impulso rialzista
rsiFirstImpulse = rsi(rsiSource, rsiLength)
rsiSecondImpulse = security(syminfo.tickerid, ""D"", rsi(rsiSource, rsiLength))

rsiFirstBearishImpulse = rsi(rsiSource, rsiLength)
rsiSecondBearishImpulse = security(syminfo.tickerid, ""D"", rsi(rsiSource, rsiLength))

// Confronto dell'RSI durante i due impulsi
rsiBullishDivergence = (secondImpulse and rsiSecondImpulse < rsiFirstImpulse)
rsiBearishDivergence = (secondBearishImpulse and rsiSecondBearishImpulse > rsiFirstBearishImpulse)

//Position size 
valutabaseuguale = in_valuta == syminfo.basecurrency
valutaSecondariaUguale = in_valuta == syminfo.currency
nessunavaluta = not valutaSecondariaUguale and not valutabaseuguale
conversionecoppia = valutaSecondariaUguale ? syminfo.tickerid : in_valuta + syminfo.currency
conversioneTassocambio = security(symbol=conversionecoppia, resolution=""D"", expression=close)

getVolumePosizione(stopLossSizePoints) =>
    riskAmount = (strategy.equity * (riskPerTrade / 100)) * (valutabaseuguale or nessunavaluta ? conversioneTassocambio : 1.0)
    riskPerPoint = (stopLossSizePoints * syminfo.pointvalue)
    positionSize = (riskAmount / riskPerPoint) / (syminfo.mintick * 10)
    round(positionSize)

// Esecuzione delle operazioni
if (rsiBearishDivergence)  and not in_solo_long and rangeTrading and close < close [1]
    slPrice = high + atr
    slPips = ((slPrice - high) / syminfo.mintick / 10)
    size = getVolumePosizione(slPips)
    strategy.entry(""Sell"", strategy.short, qty=size)
    strategy.exit(""Sell"", profit=slPips * in_tp_short * 10, stop=slPrice)

if rsiBullishDivergence and close > close [1] and rangeTrading and close > close [1]
    slPrice = low - atr
    slPips = ((low - slPrice) / syminfo.mintick / 10)
    size = getVolumePosizione(slPips)
    strategy.entry(""Buy"", strategy.long, qty=size)
    strategy.exit(""Buy"", profit=slPips * in_tp_long * 10, stop=slPrice)

// Visualizzazione grafica
plotshape(firstImpulse, color=color.green, style=shape.triangleup, location=location.belowbar, size=size.small, title=""First Bullish Impulse"")
plotshape(secondImpulse, color=color.green, style=shape.triangleup, location=location.belowbar, size=size.small, title=""Second Bullish Impulse"")

plotshape(firstBearishImpulse, color=color.red, style=shape.triangledown, location=location.abovebar, size=size.small, title=""First Bearish Impulse"")
plotshape(secondBearishImpulse, color=color.red, style=shape.triangledown, location=location.abovebar, size=size.small, title=""Second Bearish Impulse"")

plot(ema, title=""EMA"", color=color.purple)"
KsKgPwv4,java oop lab test23,STANAANDREY,Java,Thursday 14th of December 2023 07:50:54 AM CDT,"
abstract class User {
    protected String name;

    public User(final String name) {
        this.name = name;
    }

    public abstract double computeIncome(int mins);
}

class Subscriber extends User {
    private int level;

    public Subscriber(final String name, int level) {
        super(name);
        this.level = level;
    }

    @Override
    public double computeIncome(int mins) {
        return 1.5 * mins * level;
    }

    @Override
    public String toString() {
        return name + ""-"" + level;
    }
}

class Creator extends User {

    private Subscriber[] subs;
    private int len = 0;

    public Creator(final String name) {
        super(name);
        this.subs = new Subscriber[1];
    }

    public void add(final Subscriber sub) {
        if (len == subs.length) {
            Subscriber[] aux = subs;
            subs = new Subscriber[len * 2];
            for (int i = 0; i < len; i++) {
                subs[i] = aux[i];
            }
        }
        subs[len++] = sub;
    }

    @Override
    public double computeIncome(int mins) {
        double sum = 0;
        for (int i = 0; i < len; i++) {
            sum += subs[i].computeIncome(mins);
        }
        return sum;
    }

    public String toString() {
        String s = name;
        s += "" - "";
        for (int i = 0; i < len; i++) {
            s += subs[i];
        }
        return s;
    }
}

class Platform {
    private User[] users;
    private int len = 0;
    private static final int MAX_LEN  = 1000;

    public Platform() {
        users = new User[MAX_LEN];
    }

    public boolean addUser(final User user) {
        if (len == MAX_LEN) {
            return false;
        }
        users[len++] = user;
        return true;
    }

    public User getVIP(int mins) {
        User ans = null;
        double maxi = 0.0;
        for (int i = 0; i < len; i++) {
        double curr = users[i].computeIncome(mins);
        if (maxi < curr) {
            maxi = curr;
            ans = users[i];
        }
        }
        return ans;
    }
}

public class Main {
    public static void main(String[] args) {
        Creator c1 = new Creator(""johnc1"");
        Creator c2 = new Creator(""johnc2"");
        Subscriber sub = new Subscriber(""john"", 1);
        c1.add(sub);
        Platform p = new Platform();
        p.addUser(c1);
        p.addUser(c2);
        p.addUser(sub);
        System.out.println(p.getVIP(30));
    }
}
"
gnNEKrwr,state machnie C generator,ApelPro,C,Thursday 14th of December 2023 07:48:41 AM CDT,"/*
---------------------------------------------------------------------------------------------------------------
State machine descriptor
---------------------------------------------------------------------------------------------------------------
A0--ai=0-->A1,
A0--i=10-->A23,
A1---->A2;
A2--btn=1 or x=0 and i!=1-->B;;;;
B--i=0-->A0,
C--(j=2 or k=2) and (j=12 or k=1)-->D


---------------------------------------------------------------------------------------------------------------
Generated C code
---------------------------------------------------------------------------------------------------------------
*/

#define state_change( newState ) state = newState;
#define state_change_with_condition( newState, condition ) if ( condition ) { state = newState; }
#define and(a, b) a && b
#define or(a, b) (a || b)

typedef enum {
 A0 = 0,
 A1,
 A23,
 A2,
 B,
 C,
 D 
} state_t;


/* State machine functions */
state_t state_A0( void ) {
 if ( ai==0 ) {
  return A1;
 }
 else if ( i==10 ) {
  return A23;
 }
 return A0;
}

state_t state_A1( void ) {
 return A2;
}

state_t state_A23( void ) {
 return A23;
}

state_t state_A2( void ) {
 if ( or(and(x==0,i!=1),btn==1) ) {
  return B;
 }
 return A2;
}

state_t state_B( void ) {
 if ( i==0 ) {
  return A0;
 }
 return B;
}

state_t state_C( void ) {
 if ( and(or(k==2,j==2),or(k==1,j==12)) ) {
  return D;
 }
 return C;
}

state_t state_D( void ) {
 return D;
}

/* End of state machnie functions */


state_t (*states_functions[]) {
 state_A0,
 state_A1,
 state_A23,
 state_A2,
 state_B,
 state_C,
 state_D 
};

int main() {
 state_t state =  A0;
 while( true ) { state = state_functions[state](); }
}"
iEmekpVy,drjhdrjdrjdrj,gadungw71,PHP,Thursday 14th of December 2023 07:26:45 AM CDT,"https://m.facebook.com/media/set/?set=a.326775126963536
https://m.facebook.com/media/set/?set=a.326776056963443
https://m.facebook.com/media/set/?set=a.366647056020729
https://m.facebook.com/media/set/?set=a.685410140403101
https://m.facebook.com/media/set/?set=a.211448192007444
https://m.facebook.com/media/set/?set=a.122121746720103457
https://m.facebook.com/media/set/?set=a.122128970618072793
https://m.facebook.com/media/set/?set=a.122128972106072793
https://m.facebook.com/media/set/?set=a.122131307060063810
https://m.facebook.com/media/set/?set=a.122130425858074426
https://m.facebook.com/media/set/?set=a.122130426992074426
https://m.facebook.com/media/set/?set=a.122130426992074426
https://m.facebook.com/media/set/?set=a.122132395454072773
https://m.facebook.com/media/set/?set=a.122132396702072773
https://m.facebook.com/media/set/?set=a.122123742986052089
https://m.facebook.com/media/set/?set=a.122120735186089767
https://hackmd.io/@rerewilli6/ryGJktd8a
https://rentry.co/mnf8o
https://pastelink.net/732vnutt
https://snippet.host/ywztpz
https://glot.io/snippets/gri92uijw5
https://etextpad.com/zbuy6hnnai
https://justpaste.me/DlYz1
https://homment.com/bJPXmWxvIPQA6WgM2h48
https://jsfiddle.net/putradani/1rvawzk3/
https://jsbin.com/vulalis/edit?html,output"
QxHjZ2qg,Untitled,lobster_r,JSON,Thursday 14th of December 2023 07:25:37 AM CDT,"{
  ""status"": true,
  ""message"": null,
  ""result"": {
    ""items"": [
      {
        ""type"": ""String"",
        ""slug"": ""name"",
        ""title"": ""–ò–º—è"",
        ""toMerge"": {
          ""column"": ""name""
        },
        ""additionalForm"": {
          ""fields"": [
            {
              ""title"": ""–¢–∏–ø –°—Ä–∞–≤–Ω–µ–Ω–∏—è"",
              ""slug"": ""type"",
              ""type"": ""select"",
              ""configuration"": {
                ""dictionaryList"": [
                  {
                    ""title"": ""\u0421\u0442\u0430\u0442\u0438\u0447\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435"",
                    ""id"": ""static""
                  },
                  {
                    ""title"": ""\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0438\u0437 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0438"",
                    ""id"": ""dynamic""
                  }
                ]
              },
              ""validation"": [
                {
                  ""type"": ""required"",
                  ""text"": ""\u041f\u043e\u043b\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043a \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044e""
                }
              ]
            },
            {
              ""title"": ""–û–ø–µ—Ä–∞–Ω–¥"",
              ""slug"": ""operator"",
              ""type"": ""select"",
              ""configuration"": {
                ""dictionaryList"": [
                  {
                    ""title"": ""\u0420\u0430\u0432\u043d\u043e"",
                    ""id"": ""EQ""
                  },
                  {
                    ""title"": ""\u041d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u043d\u0430\u0431\u043e\u0440\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439"",
                    ""id"": ""IN""
                  },
                  {
                    ""title"": ""\u041d\u0435 \u0440\u0430\u0432\u043d\u043e"",
                    ""id"": ""NEQ""
                  },
                  {
                    ""title"": ""\u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441"",
                    ""id"": ""LIKE""
                  },
                  {
                    ""title"": ""\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441"",
                    ""id"": ""NOT_LIKE""
                  },
                  {
                    ""title"": ""\u042f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0443\u043b\u0435\u0432\u044b\u043c"",
                    ""id"": ""IS_NULL""
                  },
                  {
                    ""title"": ""\u041d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0443\u043b\u0435\u0432\u044b\u043c"",
                    ""id"": ""IS_NOT_NULL""
                  }
                ]
              },
              ""configurationReplace"": [
                {
                  ""applyIf"": [
                    {
                      ""field"": ""type"",
                      ""value"": [
                        ""dynamic""
                      ]
                    }
                  ],
                  ""configuration"": {
                    ""dictionaryList"": [
                      {
                        ""title"": ""\u0420\u0430\u0432\u043d\u043e"",
                        ""id"": ""EQ""
                      }
                    ]
                  }
                }
              ],
              ""validation"": [
                {
                  ""type"": ""required"",
                  ""text"": ""\u041f\u043e\u043b\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043a \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044e""
                }
              ]
            },
            {
              ""title"": ""–ó–Ω–∞—á–µ–Ω–∏–µ"",
              ""slug"": ""value"",
              ""type"": ""text"",
              ""placeholder"": ""input"",
              ""validation"": [
                {
                  ""type"": ""required"",
                  ""text"": ""\u041f\u043e\u043b\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043a \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044e""
                }
              ],
              ""configurationReplace"": [
                {
                  ""applyIf"": [
                    {
                      ""field"": ""type"",
                      ""value"": [
                        ""static""
                      ]
                    }
                  ]
                }
              ]
            },
            {
              ""title"": ""–ó–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–æ–ª–µ–π —Å—É—â–Ω–æ—Å—Ç–∏"",
              ""slug"": ""valueReplace"",
              ""type"": ""select"",
              ""configuration"": {
                ""dictionaryList"": [
                  {
                    ""title"": ""title"",
                    ""id"": ""title""
                  },
                  {
                    ""title"": ""positions"",
                    ""id"": ""positions""
                  },
                  {
                    ""title"": ""children"",
                    ""id"": ""children""
                  },
                  {
                    ""title"": ""MetaField: \u042e\u0440\u0438\u0434\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043b\u0438\u0446\u043e"",
                    ""id"": ""metaField:company_id""
                  },
                  {
                    ""title"": ""MetaField: \u041d\u0435\u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 (\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0439) \u0440\u0430\u0441\u0447\u0435\u0442 \u043f\u0438\u0446\u0446\u0430\u043c\u0435\u0439\u043a\u0435\u0440\u043e\u0432"",
                    ""id"": ""metaField:pizzamaker_non_standart""
                  },
                  {
                    ""title"": ""MetaField: \u041d\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0444\u0438\u043b\u0438\u0430\u043b\u0430 \u0432 \u0440\u0430\u0441\u0447\u0435\u0442\u043d\u044b\u0445 \u0441\u043c\u0435\u043d\u0430\u0445 \u0434\u0440\u0443\u0433\u0438\u0445 \u0444\u0438\u043b\u0438\u0430\u043b\u043e\u0432"",
                    ""id"": ""metaField:include_only_own_employees""
                  },
                  {
                    ""title"": ""MetaField:  \u0412\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0440\u0430\u0441\u0447\u0435\u0442\u043d\u0443\u044e \u0441\u043c\u0435\u043d\u0443 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439"",
                    ""id"": ""metaField:include_drivers""
                  },
                  {
                    ""title"": ""MetaField: \u0412\u043e\u0437\u0440\u0430\u0441\u0442"",
                    ""id"": ""metaField:age""
                  }
                ]
              },
              ""validation"": [
                {
                  ""type"": ""required"",
                  ""text"": ""\u041f\u043e\u043b\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043a \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044e""
                }
              ]
            }
          ],
          ""values"": null
        }
      }
    ]
  }
}
"
cG80NKdd,Untitled,Gronos02,Python,Thursday 14th of December 2023 07:15:15 AM CDT,"from mpi4py import MPI

comm = MPI.COMM_WORLD
rank = comm.Get_rank()

if rank == 0:
    comm.send(""anekdot #6"", dest=1, tag=11)
    comm.send(""anekdot #1"", dest=1, tag=11)
    comm.send(""anekdot #4"", dest=2, tag=11)
if rank == 1:
    for i in range(2):
        data = comm.recv(source=0, tag=11)
        print(f""process 2 posmeyalsa s {data} from process 1"")
    comm.send(""anekdot #2"", dest=2, tag=11)
    comm.send(""anekdot #5"", dest=3, tag=11)
if rank == 2:
    data = comm.recv(source=0, tag=11)
    print(f""process 3 posmeyalsa s {data} from process 1"")

    data = comm.recv(source=1, tag=11)
    print(f""process 3 posmeyalsa s {data} from process 2"")

    data = comm.recv(source=3, tag=11)
    print(f""process 3 posmeyalsa s {data} from process 4"")

    comm.send(""anekdot #7"", dest=4, tag=11)
if rank == 3:
    data = comm.recv(source=1, tag=11)
    print(f""process 4 posmeyalsa s {data} from process 2"")

    comm.send(""anekdot #2"", dest=2, tag=11)
    comm.send(""anekdot #3"", dest=4, tag=11)
    comm.send(""anekdot #1"", dest=4, tag=11)
if rank == 4:
    data = comm.recv(source=3, tag=11)
    print(f""process 5 posmeyalsa s {data} from process 4"")
    data = comm.recv(source=3, tag=11)
    print(f""process 5 posmeyalsa s {data} from process 4"")
    data = comm.recv(source=2, tag=11)
    print(f""process 5 posmeyalsa s {data} from process 2"")
"
qQjQuEys,configuration.h,taj1994,C++,Thursday 14th of December 2023 07:08:04 AM CDT,"/**
 * Marlin 3D Printer Firmware
 * Copyright (c) 2020 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
 *
 * Based on Sprinter and grbl.
 * Copyright (c) 2011 Camiel Gubbels / Erik van der Zalm
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 */
#pragma once

/**
 * Configuration.h
 *
 * Basic settings such as:
 *
 * - Type of electronics
 * - Type of temperature sensor
 * - Printer geometry
 * - Endstop configuration
 * - LCD controller
 * - Extra features
 *
 * Advanced settings can be found in Configuration_adv.h
 */
#define CONFIGURATION_H_VERSION 02010300

//===========================================================================
//============================= Getting Started =============================
//===========================================================================

/**
 * Here are some useful links to help get your machine configured and calibrated:
 *
 * Example Configs:     https://github.com/MarlinFirmware/Configurations/branches/all
 *
 * Pr≈Ø≈°a Calculator:    https://blog.prusa3d.com/calculator_3416/
 *
 * Calibration Guides:  https://reprap.org/wiki/Calibration
 *                      https://reprap.org/wiki/Triffid_Hunter%27s_Calibration_Guide
 *                      https://web.archive.org/web/20220907014303/https://sites.google.com/site/repraplogphase/calibration-of-your-reprap
 *                      https://youtu.be/wAL9d7FgInk
 *                      https://teachingtechyt.github.io/calibration.html
 *
 * Calibration Objects: https://www.thingiverse.com/thing:5573
 *                      https://www.thingiverse.com/thing:1278865
 */

// @section info

// Author info of this build printed to the host during boot and M115
#define STRING_CONFIG_H_AUTHOR ""(none, Ender 5 Plus)"" // Who made the changes.
//#define CUSTOM_VERSION_FILE Version.h // Path from the root directory (no quotes)

// @section machine

// Choose the name from boards.h that matches your setup
#ifndef MOTHERBOARD
  #define MOTHERBOARD BOARD_BTT_SKR_MINI_E3_V3_0
#endif

/**
 * Select the serial port on the board to use for communication with the host.
 * This allows the connection of wireless adapters (for instance) to non-default port pins.
 * Serial port -1 is the USB emulated serial port, if available.
 * Note: The first serial port (-1 or 0) will always be used by the Arduino bootloader.
 *
 * :[-1, 0, 1, 2, 3, 4, 5, 6, 7]
 */
#define SERIAL_PORT 2

/**
 * Serial Port Baud Rate
 * This is the default communication speed for all serial ports.
 * Set the baud rate defaults for additional serial ports below.
 *
 * 250000 works in most cases, but you might try a lower speed if
 * you commonly experience drop-outs during host printing.
 * You may try up to 1000000 to speed up SD file transfer.
 *
 * :[2400, 9600, 19200, 38400, 57600, 115200, 250000, 500000, 1000000]
 */
#define BAUDRATE 115200

#define BAUD_RATE_GCODE     // Enable G-code M575 to set the baud rate

/**
 * Select a secondary serial port on the board to use for communication with the host.
 * Currently Ethernet (-2) is only supported on Teensy 4.1 boards.
 * :[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7]
 */
#define SERIAL_PORT_2 -1
#define BAUDRATE_2 250000   // :[2400, 9600, 19200, 38400, 57600, 115200, 250000, 500000, 1000000] Enable to override BAUDRATE

/**
 * Select a third serial port on the board to use for communication with the host.
 * Currently only supported for AVR, DUE, LPC1768/9 and STM32/STM32F1
 * :[-1, 0, 1, 2, 3, 4, 5, 6, 7]
 */
//#define SERIAL_PORT_3 1
//#define BAUDRATE_3 250000   // :[2400, 9600, 19200, 38400, 57600, 115200, 250000, 500000, 1000000] Enable to override BAUDRATE

// Enable the Bluetooth serial interface on AT90USB devices
//#define BLUETOOTH

// Name displayed in the LCD ""Ready"" message and Info menu
#define CUSTOM_MACHINE_NAME ""Ender 5 Plus""

// Printer's unique ID, used by some programs to differentiate between machines.
// Choose your own or use a service like https://www.uuidgenerator.net/version4
//#define MACHINE_UUID ""00000000-0000-0000-0000-000000000000""

// @section stepper drivers

/**
 * Stepper Drivers
 *
 * These settings allow Marlin to tune stepper driver timing and enable advanced options for
 * stepper drivers that support them. You may also override timing options in Configuration_adv.h.
 *
 * Use TMC2208/TMC2208_STANDALONE for TMC2225 drivers and TMC2209/TMC2209_STANDALONE for TMC2226 drivers.
 *
 * Options: A4988, A5984, DRV8825, LV8729, TB6560, TB6600, TMC2100,
 *          TMC2130, TMC2130_STANDALONE, TMC2160, TMC2160_STANDALONE,
 *          TMC2208, TMC2208_STANDALONE, TMC2209, TMC2209_STANDALONE,
 *          TMC26X,  TMC26X_STANDALONE,  TMC2660, TMC2660_STANDALONE,
 *          TMC5130, TMC5130_STANDALONE, TMC5160, TMC5160_STANDALONE
 * :['A4988', 'A5984', 'DRV8825', 'LV8729', 'TB6560', 'TB6600', 'TMC2100', 'TMC2130', 'TMC2130_STANDALONE', 'TMC2160', 'TMC2160_STANDALONE', 'TMC2208', 'TMC2208_STANDALONE', 'TMC2209', 'TMC2209_STANDALONE', 'TMC26X', 'TMC26X_STANDALONE', 'TMC2660', 'TMC2660_STANDALONE', 'TMC5130', 'TMC5130_STANDALONE', 'TMC5160', 'TMC5160_STANDALONE']
 */
#define X_DRIVER_TYPE  TMC2209
#define Y_DRIVER_TYPE  TMC2209
#define Z_DRIVER_TYPE  TMC2209
//#define X2_DRIVER_TYPE A4988
//#define Y2_DRIVER_TYPE A4988
//#define Z2_DRIVER_TYPE A4988
//#define Z3_DRIVER_TYPE A4988
//#define Z4_DRIVER_TYPE A4988
//#define I_DRIVER_TYPE  A4988
//#define J_DRIVER_TYPE  A4988
//#define K_DRIVER_TYPE  A4988
//#define U_DRIVER_TYPE  A4988
//#define V_DRIVER_TYPE  A4988
//#define W_DRIVER_TYPE  A4988
#define E0_DRIVER_TYPE TMC2209
//#define E1_DRIVER_TYPE A4988
//#define E2_DRIVER_TYPE A4988
//#define E3_DRIVER_TYPE A4988
//#define E4_DRIVER_TYPE A4988
//#define E5_DRIVER_TYPE A4988
//#define E6_DRIVER_TYPE A4988
//#define E7_DRIVER_TYPE A4988

/**
 * Additional Axis Settings
 *
 * Define AXISn_ROTATES for all axes that rotate or pivot.
 * Rotational axis coordinates are expressed in degrees.
 *
 * AXISn_NAME defines the letter used to refer to the axis in (most) G-code commands.
 * By convention the names and roles are typically:
 *   'A' : Rotational axis parallel to X
 *   'B' : Rotational axis parallel to Y
 *   'C' : Rotational axis parallel to Z
 *   'U' : Secondary linear axis parallel to X
 *   'V' : Secondary linear axis parallel to Y
 *   'W' : Secondary linear axis parallel to Z
 *
 * Regardless of these settings the axes are internally named I, J, K, U, V, W.
 */
#ifdef I_DRIVER_TYPE
  #define AXIS4_NAME 'A' // :['A', 'B', 'C', 'U', 'V', 'W']
  #define AXIS4_ROTATES
#endif
#ifdef J_DRIVER_TYPE
  #define AXIS5_NAME 'B' // :['B', 'C', 'U', 'V', 'W']
  #define AXIS5_ROTATES
#endif
#ifdef K_DRIVER_TYPE
  #define AXIS6_NAME 'C' // :['C', 'U', 'V', 'W']
  #define AXIS6_ROTATES
#endif
#ifdef U_DRIVER_TYPE
  #define AXIS7_NAME 'U' // :['U', 'V', 'W']
  //#define AXIS7_ROTATES
#endif
#ifdef V_DRIVER_TYPE
  #define AXIS8_NAME 'V' // :['V', 'W']
  //#define AXIS8_ROTATES
#endif
#ifdef W_DRIVER_TYPE
  #define AXIS9_NAME 'W' // :['W']
  //#define AXIS9_ROTATES
#endif

// @section extruder

// This defines the number of extruders
// :[0, 1, 2, 3, 4, 5, 6, 7, 8]
#define EXTRUDERS 1

// Generally expected filament diameter (1.75, 2.85, 3.0, ...). Used for Volumetric, Filament Width Sensor, etc.
#define DEFAULT_NOMINAL_FILAMENT_DIA 1.75

// For Cyclops or any ""multi-extruder"" that shares a single nozzle.
//#define SINGLENOZZLE

// Save and restore temperature and fan speed on tool-change.
// Set standby for the unselected tool with M104/106/109 T...
#if ENABLED(SINGLENOZZLE)
  //#define SINGLENOZZLE_STANDBY_TEMP
  //#define SINGLENOZZLE_STANDBY_FAN
#endif

// A dual extruder that uses a single stepper motor
//#define SWITCHING_EXTRUDER
#if ENABLED(SWITCHING_EXTRUDER)
  #define SWITCHING_EXTRUDER_SERVO_NR 0
  #define SWITCHING_EXTRUDER_SERVO_ANGLES { 0, 90 } // Angles for E0, E1[, E2, E3]
  #if EXTRUDERS > 3
    #define SWITCHING_EXTRUDER_E23_SERVO_NR 1
  #endif
#endif

// Switch extruders by bumping the toolhead. Requires EVENT_GCODE_TOOLCHANGE_#.
//#define MECHANICAL_SWITCHING_EXTRUDER

/**
 * A dual-nozzle that uses a servomotor to raise/lower one (or both) of the nozzles.
 * Can be combined with SWITCHING_EXTRUDER.
 */
//#define SWITCHING_NOZZLE
#if ENABLED(SWITCHING_NOZZLE)
  #define SWITCHING_NOZZLE_SERVO_NR 0
  //#define SWITCHING_NOZZLE_E1_SERVO_NR 1          // If two servos are used, the index of the second
  #define SWITCHING_NOZZLE_SERVO_ANGLES { 0, 90 }   // A pair of angles for { E0, E1 }.
                                                    // For Dual Servo use two pairs: { { lower, raise }, { lower, raise } }
  #define SWITCHING_NOZZLE_SERVO_DWELL 2500         // Dwell time to wait for servo to make physical move
#endif

// Switch nozzles by bumping the toolhead. Requires EVENT_GCODE_TOOLCHANGE_#.
//#define MECHANICAL_SWITCHING_NOZZLE

/**
 * Two separate X-carriages with extruders that connect to a moving part
 * via a solenoid docking mechanism. Requires SOL1_PIN and SOL2_PIN.
 */
//#define PARKING_EXTRUDER

/**
 * Two separate X-carriages with extruders that connect to a moving part
 * via a magnetic docking mechanism using movements and no solenoid
 *
 * project   : https://www.thingiverse.com/thing:3080893
 * movements : https://youtu.be/0xCEiG9VS3k
 *             https://youtu.be/Bqbcs0CU2FE
 */
//#define MAGNETIC_PARKING_EXTRUDER

#if ANY(PARKING_EXTRUDER, MAGNETIC_PARKING_EXTRUDER)

  #define PARKING_EXTRUDER_PARKING_X { -78, 184 }     // X positions for parking the extruders
  #define PARKING_EXTRUDER_GRAB_DISTANCE 1            // (mm) Distance to move beyond the parking point to grab the extruder

  #if ENABLED(PARKING_EXTRUDER)

    #define PARKING_EXTRUDER_SOLENOIDS_INVERT           // If enabled, the solenoid is NOT magnetized with applied voltage
    #define PARKING_EXTRUDER_SOLENOIDS_PINS_ACTIVE LOW  // LOW or HIGH pin signal energizes the coil
    #define PARKING_EXTRUDER_SOLENOIDS_DELAY 250        // (ms) Delay for magnetic field. No delay if 0 or not defined.
    //#define MANUAL_SOLENOID_CONTROL                   // Manual control of docking solenoids with M380 S / M381

  #elif ENABLED(MAGNETIC_PARKING_EXTRUDER)

    #define MPE_FAST_SPEED      9000      // (mm/min) Speed for travel before last distance point
    #define MPE_SLOW_SPEED      4500      // (mm/min) Speed for last distance travel to park and couple
    #define MPE_TRAVEL_DISTANCE   10      // (mm) Last distance point
    #define MPE_COMPENSATION       0      // Offset Compensation -1 , 0 , 1 (multiplier) only for coupling

  #endif

#endif

/**
 * Switching Toolhead
 *
 * Support for swappable and dockable toolheads, such as
 * the E3D Tool Changer. Toolheads are locked with a servo.
 */
//#define SWITCHING_TOOLHEAD

/**
 * Magnetic Switching Toolhead
 *
 * Support swappable and dockable toolheads with a magnetic
 * docking mechanism using movement and no servo.
 */
//#define MAGNETIC_SWITCHING_TOOLHEAD

/**
 * Electromagnetic Switching Toolhead
 *
 * Parking for CoreXY / HBot kinematics.
 * Toolheads are parked at one edge and held with an electromagnet.
 * Supports more than 2 Toolheads. See https://youtu.be/JolbsAKTKf4
 */
//#define ELECTROMAGNETIC_SWITCHING_TOOLHEAD

#if ANY(SWITCHING_TOOLHEAD, MAGNETIC_SWITCHING_TOOLHEAD, ELECTROMAGNETIC_SWITCHING_TOOLHEAD)
  #define SWITCHING_TOOLHEAD_Y_POS          235         // (mm) Y position of the toolhead dock
  #define SWITCHING_TOOLHEAD_Y_SECURITY      10         // (mm) Security distance Y axis
  #define SWITCHING_TOOLHEAD_Y_CLEAR         60         // (mm) Minimum distance from dock for unobstructed X axis
  #define SWITCHING_TOOLHEAD_X_POS          { 215, 0 }  // (mm) X positions for parking the extruders
  #if ENABLED(SWITCHING_TOOLHEAD)
    #define SWITCHING_TOOLHEAD_SERVO_NR       2         // Index of the servo connector
    #define SWITCHING_TOOLHEAD_SERVO_ANGLES { 0, 180 }  // (degrees) Angles for Lock, Unlock
  #elif ENABLED(MAGNETIC_SWITCHING_TOOLHEAD)
    #define SWITCHING_TOOLHEAD_Y_RELEASE      5         // (mm) Security distance Y axis
    #define SWITCHING_TOOLHEAD_X_SECURITY   { 90, 150 } // (mm) Security distance X axis (T0,T1)
    //#define PRIME_BEFORE_REMOVE                       // Prime the nozzle before release from the dock
    #if ENABLED(PRIME_BEFORE_REMOVE)
      #define SWITCHING_TOOLHEAD_PRIME_MM           20  // (mm)   Extruder prime length
      #define SWITCHING_TOOLHEAD_RETRACT_MM         10  // (mm)   Retract after priming length
      #define SWITCHING_TOOLHEAD_PRIME_FEEDRATE    300  // (mm/min) Extruder prime feedrate
      #define SWITCHING_TOOLHEAD_RETRACT_FEEDRATE 2400  // (mm/min) Extruder retract feedrate
    #endif
  #elif ENABLED(ELECTROMAGNETIC_SWITCHING_TOOLHEAD)
    #define SWITCHING_TOOLHEAD_Z_HOP          2         // (mm) Z raise for switching
  #endif
#endif

/**
 * ""Mixing Extruder""
 *   - Adds G-codes M163 and M164 to set and ""commit"" the current mix factors.
 *   - Extends the stepping routines to move multiple steppers in proportion to the mix.
 *   - Optional support for Repetier Firmware's 'M164 S<index>' supporting virtual tools.
 *   - This implementation supports up to two mixing extruders.
 *   - Enable DIRECT_MIXING_IN_G1 for M165 and mixing in G1 (from Pia Taubert's reference implementation).
 */
//#define MIXING_EXTRUDER
#if ENABLED(MIXING_EXTRUDER)
  #define MIXING_STEPPERS 2        // Number of steppers in your mixing extruder
  #define MIXING_VIRTUAL_TOOLS 16  // Use the Virtual Tool method with M163 and M164
  //#define DIRECT_MIXING_IN_G1    // Allow ABCDHI mix factors in G1 movement commands
  //#define GRADIENT_MIX           // Support for gradient mixing with M166 and LCD
  //#define MIXING_PRESETS         // Assign 8 default V-tool presets for 2 or 3 MIXING_STEPPERS
  #if ENABLED(GRADIENT_MIX)
    //#define GRADIENT_VTOOL       // Add M166 T to use a V-tool index as a Gradient alias
  #endif
#endif

// Offset of the extruders (uncomment if using more than one and relying on firmware to position when changing).
// The offset has to be X=0, Y=0 for the extruder 0 hotend (default extruder).
// For the other hotends it is their distance from the extruder 0 hotend.
//#define HOTEND_OFFSET_X { 0.0, 20.00 } // (mm) relative X-offset for each nozzle
//#define HOTEND_OFFSET_Y { 0.0, 5.00 }  // (mm) relative Y-offset for each nozzle
//#define HOTEND_OFFSET_Z { 0.0, 0.00 }  // (mm) relative Z-offset for each nozzle

// @section multi-material

/**
 * Multi-Material Unit
 * Set to one of these predefined models:
 *
 *   PRUSA_MMU1           : Pr≈Ø≈°a MMU1 (The ""multiplexer"" version)
 *   PRUSA_MMU2           : Pr≈Ø≈°a MMU2
 *   PRUSA_MMU2S          : Pr≈Ø≈°a MMU2S (Requires MK3S extruder with motion sensor, EXTRUDERS = 5)
 *   EXTENDABLE_EMU_MMU2  : MMU with configurable number of filaments (ERCF, SMuFF or similar with Pr≈Ø≈°a MMU2 compatible firmware)
 *   EXTENDABLE_EMU_MMU2S : MMUS with configurable number of filaments (ERCF, SMuFF or similar with Pr≈Ø≈°a MMU2 compatible firmware)
 *
 * Requires NOZZLE_PARK_FEATURE to park print head in case MMU unit fails.
 * See additional options in Configuration_adv.h.
 * :[""PRUSA_MMU1"", ""PRUSA_MMU2"", ""PRUSA_MMU2S"", ""EXTENDABLE_EMU_MMU2"", ""EXTENDABLE_EMU_MMU2S""]
 */
//#define MMU_MODEL PRUSA_MMU2

// @section psu control

/**
 * Power Supply Control
 *
 * Enable and connect the power supply to the PS_ON_PIN.
 * Specify whether the power supply is active HIGH or active LOW.
 */
//#define PSU_CONTROL
//#define PSU_NAME ""Power Supply""

#if ENABLED(PSU_CONTROL)
  //#define MKS_PWC                 // Using the MKS PWC add-on
  //#define PS_OFF_CONFIRM          // Confirm dialog when power off
  //#define PS_OFF_SOUND            // Beep 1s when power off
  #define PSU_ACTIVE_STATE LOW      // Set 'LOW' for ATX, 'HIGH' for X-Box

  //#define PSU_DEFAULT_OFF               // Keep power off until enabled directly with M80
  //#define PSU_POWERUP_DELAY      250    // (ms) Delay for the PSU to warm up to full power
  //#define LED_POWEROFF_TIMEOUT 10000    // (ms) Turn off LEDs after power-off, with this amount of delay

  //#define POWER_OFF_TIMER               // Enable M81 D<seconds> to power off after a delay
  //#define POWER_OFF_WAIT_FOR_COOLDOWN   // Enable M81 S to power off only after cooldown

  //#define PSU_POWERUP_GCODE  ""M355 S1""  // G-code to run after power-on (e.g., case light on)
  //#define PSU_POWEROFF_GCODE ""M355 S0""  // G-code to run before power-off (e.g., case light off)

  //#define AUTO_POWER_CONTROL      // Enable automatic control of the PS_ON pin
  #if ENABLED(AUTO_POWER_CONTROL)
    #define AUTO_POWER_FANS           // Turn on PSU for fans
    #define AUTO_POWER_E_FANS         // Turn on PSU for E Fans
    #define AUTO_POWER_CONTROLLERFAN  // Turn on PSU for Controller Fan
    #define AUTO_POWER_CHAMBER_FAN    // Turn on PSU for Chamber Fan
    #define AUTO_POWER_COOLER_FAN     // Turn on PSU for Cooler Fan
    #define AUTO_POWER_SPINDLE_LASER  // Turn on PSU for Spindle/Laser
    #define POWER_TIMEOUT              30 // (s) Turn off power if the machine is idle for this duration
    //#define POWER_OFF_DELAY          60 // (s) Delay of poweroff after M81 command. Useful to let fans run for extra time.
  #endif
  #if ANY(AUTO_POWER_CONTROL, POWER_OFF_WAIT_FOR_COOLDOWN)
    //#define AUTO_POWER_E_TEMP        50 // (¬∞C) PSU on if any extruder is over this temperature
    //#define AUTO_POWER_CHAMBER_TEMP  30 // (¬∞C) PSU on if the chamber is over this temperature
    //#define AUTO_POWER_COOLER_TEMP   26 // (¬∞C) PSU on if the cooler is over this temperature
  #endif
#endif

//===========================================================================
//============================= Thermal Settings ============================
//===========================================================================
// @section temperature

/**
 * Temperature Sensors:
 *
 * NORMAL IS 4.7kŒ© PULLUP! Hotend sensors can use 1kŒ© pullup with correct resistor and table.
 *
 * ================================================================
 *  Analog Thermistors - 4.7kŒ© pullup - Normal
 * ================================================================
 *     1 : 100kŒ© EPCOS - Best choice for EPCOS thermistors
 *   331 : 100kŒ© Same as #1, but 3.3V scaled for MEGA
 *   332 : 100kŒ© Same as #1, but 3.3V scaled for DUE
 *     2 : 200kŒ© ATC Semitec 204GT-2
 *   202 : 200kŒ© Copymaster 3D
 *     3 : ???Œ©  Mendel-parts thermistor
 *     4 : 10kŒ©  Generic Thermistor !! DO NOT use for a hotend - it gives bad resolution at high temp. !!
 *     5 : 100kŒ© ATC Semitec 104GT-2/104NT-4-R025H42G - Used in ParCan, J-Head, and E3D, SliceEngineering 300¬∞C
 *   501 : 100kŒ© Zonestar - Tronxy X3A
 *   502 : 100kŒ© Zonestar - used by hot bed in Zonestar Pr≈Ø≈°a P802M
 *   503 : 100kŒ© Zonestar (Z8XM2) Heated Bed thermistor
 *   504 : 100kŒ© Zonestar P802QR2 (Part# QWG-104F-B3950) Hotend Thermistor
 *   505 : 100kŒ© Zonestar P802QR2 (Part# QWG-104F-3950) Bed Thermistor
 *   512 : 100kŒ© RPW-Ultra hotend
 *     6 : 100kŒ© EPCOS - Not as accurate as table #1 (created using a fluke thermocouple)
 *     7 : 100kŒ© Honeywell 135-104LAG-J01
 *    71 : 100kŒ© Honeywell 135-104LAF-J01
 *     8 : 100kŒ© Vishay 0603 SMD NTCS0603E3104FXT
 *     9 : 100kŒ© GE Sensing AL03006-58.2K-97-G1
 *    10 : 100kŒ© RS PRO 198-961
 *    11 : 100kŒ© Keenovo AC silicone mats, most Wanhao i3 machines - beta 3950, 1%
 *    12 : 100kŒ© Vishay 0603 SMD NTCS0603E3104FXT (#8) - calibrated for Makibox hot bed
 *    13 : 100kŒ© Hisens up to 300¬∞C - for ""Simple ONE"" & ""All In ONE"" hotend - beta 3950, 1%
 *    14 : 100kŒ©  (R25), 4092K (beta25), 4.7kŒ© pull-up, bed thermistor as used in Ender-5 S1
 *    15 : 100kŒ© Calibrated for JGAurora A5 hotend
 *    17 : 100kŒ© Dagoma NTC white thermistor
 *    18 : 200kŒ© ATC Semitec 204GT-2 Dagoma.Fr - MKS_Base_DKU001327
 *    22 : 100kŒ© GTM32 Pro vB - hotend - 4.7kŒ© pullup to 3.3V and 220Œ© to analog input
 *    23 : 100kŒ© GTM32 Pro vB - bed - 4.7kŒ© pullup to 3.3v and 220Œ© to analog input
 *    30 : 100kŒ© Kis3d Silicone heating mat 200W/300W with 6mm precision cast plate (EN AW 5083) NTC100K - beta 3950
 *    60 : 100kŒ© Maker's Tool Works Kapton Bed Thermistor - beta 3950
 *    61 : 100kŒ© Formbot/Vivedino 350¬∞C Thermistor - beta 3950
 *    66 : 4.7MŒ© Dyze Design / Trianglelab T-D500 500¬∞C High Temperature Thermistor
 *    67 : 500kŒ© SliceEngineering 450¬∞C Thermistor
 *    68 : PT100 Smplifier board from Dyze Design
 *    70 : 100kŒ© bq Hephestos 2
 *    75 : 100kŒ© Generic Silicon Heat Pad with NTC100K MGB18-104F39050L32
 *   666 : 200kŒ© Einstart S custom thermistor with 10k pullup.
 *  2000 : 100kŒ© Ultimachine Rambo TDK NTCG104LH104KT1 NTC100K motherboard Thermistor
 *
 * ================================================================
 *  Analog Thermistors - 1kŒ© pullup
 *   Atypical, and requires changing out the 4.7kŒ© pullup for 1kŒ©.
 *   (but gives greater accuracy and more stable PID)
 * ================================================================
 *    51 : 100kŒ© EPCOS (1kŒ© pullup)
 *    52 : 200kŒ© ATC Semitec 204GT-2 (1kŒ© pullup)
 *    55 : 100kŒ© ATC Semitec 104GT-2 - Used in ParCan & J-Head (1kŒ© pullup)
 *
 * ================================================================
 *  Analog Thermistors - 10kŒ© pullup - Atypical
 * ================================================================
 *    99 : 100kŒ© Found on some Wanhao i3 machines with a 10kŒ© pull-up resistor
 *
 * ================================================================
 *  Analog RTDs (Pt100/Pt1000)
 * ================================================================
 *   110 : Pt100  with 1kŒ© pullup (atypical)
 *   147 : Pt100  with 4.7kŒ© pullup
 *  1010 : Pt1000 with 1kŒ© pullup (atypical)
 *  1022 : Pt1000 with 2.2kŒ© pullup
 *  1047 : Pt1000 with 4.7kŒ© pullup (E3D)
 *    20 : Pt100  with circuit in the Ultimainboard V2.x with mainboard ADC reference voltage = INA826 amplifier-board supply voltage.
 *                NOTE: (1) Must use an ADC input with no pullup. (2) Some INA826 amplifiers are unreliable at 3.3V so consider using sensor 147, 110, or 21.
 *    21 : Pt100  with circuit in the Ultimainboard V2.x with 3.3v ADC reference voltage (STM32, LPC176x....) and 5V INA826 amplifier board supply.
 *                NOTE: ADC pins are not 5V tolerant. Not recommended because it's possible to damage the CPU by going over 500¬∞C.
 *   201 : Pt100  with circuit in Overlord, similar to Ultimainboard V2.x
 *
 * ================================================================
 *  SPI RTD/Thermocouple Boards
 * ================================================================
 *    -5 : MAX31865 with Pt100/Pt1000, 2, 3, or 4-wire  (only for sensors 0-2 and bed)
 *                  NOTE: You must uncomment/set the MAX31865_*_OHMS_n defines below.
 *    -3 : MAX31855 with Thermocouple, -200¬∞C to +700¬∞C (only for sensors 0-2 and bed)
 *    -2 : MAX6675  with Thermocouple, 0¬∞C to +700¬∞C    (only for sensors 0-2 and bed)
 *
 *  NOTE: Ensure TEMP_n_CS_PIN is set in your pins file for each TEMP_SENSOR_n using an SPI Thermocouple. By default,
 *        Hardware SPI on the default serial bus is used. If you have also set TEMP_n_SCK_PIN and TEMP_n_MISO_PIN,
 *        Software SPI will be used on those ports instead. You can force Hardware SPI on the default bus in the
 *        Configuration_adv.h file. At this time, separate Hardware SPI buses for sensors are not supported.
 *
 * ================================================================
 *  Analog Thermocouple Boards
 * ================================================================
 *    -4 : AD8495 with Thermocouple
 *    -1 : AD595  with Thermocouple
 *
 * ================================================================
 *  SoC internal sensor
 * ================================================================
 *   100 : SoC internal sensor
 *
 * ================================================================
 *  Custom/Dummy/Other Thermal Sensors
 * ================================================================
 *     0 : not used
 *  1000 : Custom - Specify parameters in Configuration_adv.h
 *
 *   !!! Use these for Testing or Development purposes. NEVER for production machine. !!!
 *   998 : Dummy Table that ALWAYS reads 25¬∞C or the temperature defined below.
 *   999 : Dummy Table that ALWAYS reads 100¬∞C or the temperature defined below.
 */
#define TEMP_SENSOR_0 1
#define TEMP_SENSOR_1 0
#define TEMP_SENSOR_2 0
#define TEMP_SENSOR_3 0
#define TEMP_SENSOR_4 0
#define TEMP_SENSOR_5 0
#define TEMP_SENSOR_6 0
#define TEMP_SENSOR_7 0
#define TEMP_SENSOR_BED 1
#define TEMP_SENSOR_PROBE 0
#define TEMP_SENSOR_CHAMBER 0
#define TEMP_SENSOR_COOLER 0
#define TEMP_SENSOR_BOARD 0
#define TEMP_SENSOR_SOC 0
#define TEMP_SENSOR_REDUNDANT 0

// Dummy thermistor constant temperature readings, for use with 998 and 999
#define DUMMY_THERMISTOR_998_VALUE  25
#define DUMMY_THERMISTOR_999_VALUE 100

// Resistor values when using MAX31865 sensors (-5) on TEMP_SENSOR_0 / 1
#if TEMP_SENSOR_IS_MAX_TC(0)
  #define MAX31865_SENSOR_OHMS_0      100 // (Œ©) Typically 100 or 1000 (PT100 or PT1000)
  #define MAX31865_CALIBRATION_OHMS_0 430 // (Œ©) Typically 430 for Adafruit PT100; 4300 for Adafruit PT1000
#endif
#if TEMP_SENSOR_IS_MAX_TC(1)
  #define MAX31865_SENSOR_OHMS_1      100
  #define MAX31865_CALIBRATION_OHMS_1 430
#endif
#if TEMP_SENSOR_IS_MAX_TC(2)
  #define MAX31865_SENSOR_OHMS_2      100
  #define MAX31865_CALIBRATION_OHMS_2 430
#endif

#if HAS_E_TEMP_SENSOR
  #define TEMP_RESIDENCY_TIME         10  // (seconds) Time to wait for hotend to ""settle"" in M109
  #define TEMP_WINDOW                  1  // (¬∞C) Temperature proximity for the ""temperature reached"" timer
  #define TEMP_HYSTERESIS              3  // (¬∞C) Temperature proximity considered ""close enough"" to the target
#endif

#if TEMP_SENSOR_BED
  #define TEMP_BED_RESIDENCY_TIME     10  // (seconds) Time to wait for bed to ""settle"" in M190
  #define TEMP_BED_WINDOW              1  // (¬∞C) Temperature proximity for the ""temperature reached"" timer
  #define TEMP_BED_HYSTERESIS          3  // (¬∞C) Temperature proximity considered ""close enough"" to the target
#endif

#if TEMP_SENSOR_CHAMBER
  #define TEMP_CHAMBER_RESIDENCY_TIME 10  // (seconds) Time to wait for chamber to ""settle"" in M191
  #define TEMP_CHAMBER_WINDOW          1  // (¬∞C) Temperature proximity for the ""temperature reached"" timer
  #define TEMP_CHAMBER_HYSTERESIS      3  // (¬∞C) Temperature proximity considered ""close enough"" to the target
#endif

/**
 * Redundant Temperature Sensor (TEMP_SENSOR_REDUNDANT)
 *
 * Use a temp sensor as a redundant sensor for another reading. Select an unused temperature sensor, and another
 * sensor you'd like it to be redundant for. If the two thermistors differ by TEMP_SENSOR_REDUNDANT_MAX_DIFF (¬∞C),
 * the print will be aborted. Whichever sensor is selected will have its normal functions disabled; i.e. selecting
 * the Bed sensor (-1) will disable bed heating/monitoring.
 *
 * For selecting source/target use: COOLER, PROBE, BOARD, CHAMBER, BED, E0, E1, E2, E3, E4, E5, E6, E7
 */
#if TEMP_SENSOR_REDUNDANT
  #define TEMP_SENSOR_REDUNDANT_SOURCE    E1  // The sensor that will provide the redundant reading.
  #define TEMP_SENSOR_REDUNDANT_TARGET    E0  // The sensor that we are providing a redundant reading for.
  #define TEMP_SENSOR_REDUNDANT_MAX_DIFF  10  // (¬∞C) Temperature difference that will trigger a print abort.
#endif

// Below this temperature the heater will be switched off
// because it probably indicates a broken thermistor wire.
#define HEATER_0_MINTEMP   5
#define HEATER_1_MINTEMP   5
#define HEATER_2_MINTEMP   5
#define HEATER_3_MINTEMP   5
#define HEATER_4_MINTEMP   5
#define HEATER_5_MINTEMP   5
#define HEATER_6_MINTEMP   5
#define HEATER_7_MINTEMP   5
#define BED_MINTEMP        5
#define CHAMBER_MINTEMP    5

// Above this temperature the heater will be switched off.
// This can protect components from overheating, but NOT from shorts and failures.
// (Use MINTEMP for thermistor short/failure protection.)
#define HEATER_0_MAXTEMP 275
#define HEATER_1_MAXTEMP 275
#define HEATER_2_MAXTEMP 275
#define HEATER_3_MAXTEMP 275
#define HEATER_4_MAXTEMP 275
#define HEATER_5_MAXTEMP 275
#define HEATER_6_MAXTEMP 275
#define HEATER_7_MAXTEMP 275
#define BED_MAXTEMP      150
#define CHAMBER_MAXTEMP  60

/**
 * Thermal Overshoot
 * During heatup (and printing) the temperature can often ""overshoot"" the target by many degrees
 * (especially before PID tuning). Setting the target temperature too close to MAXTEMP guarantees
 * a MAXTEMP shutdown! Use these values to forbid temperatures being set too close to MAXTEMP.
 */
#define HOTEND_OVERSHOOT 15   // (¬∞C) Forbid temperatures over MAXTEMP - OVERSHOOT
#define BED_OVERSHOOT    10   // (¬∞C) Forbid temperatures over MAXTEMP - OVERSHOOT
#define COOLER_OVERSHOOT  2   // (¬∞C) Forbid temperatures closer than OVERSHOOT

//===========================================================================
//============================= PID Settings ================================
//===========================================================================

// @section hotend temp

/**
 * Temperature Control
 *
 *  (NONE) : Bang-bang heating
 * PIDTEMP : PID temperature control (~4.1K)
 * MPCTEMP : Predictive Model temperature control. (~1.8K without auto-tune)
 */
//#define PIDTEMP           // See the PID Tuning Guide at https://reprap.org/wiki/PID_Tuning
#define MPCTEMP         // ** EXPERIMENTAL ** See https://marlinfw.org/docs/features/model_predictive_control.html

#define PID_MAX  255      // Limit hotend current while PID is active (see PID_FUNCTIONAL_RANGE below); 255=full current
#define PID_K1     0.95   // Smoothing factor within any PID loop

#if ENABLED(PIDTEMP)
  //#define PID_DEBUG             // Print PID debug data to the serial port. Use 'M303 D' to toggle activation.
  //#define PID_PARAMS_PER_HOTEND // Use separate PID parameters for each extruder (useful for mismatched extruders)
                                  // Set/get with G-code: M301 E[extruder number, 0-2]

  #if ENABLED(PID_PARAMS_PER_HOTEND)
    // Specify up to one value per hotend here, according to your setup.
    // If there are fewer values, the last one applies to the remaining hotends.
    #define DEFAULT_Kp_LIST {  22.20,  22.20 }
    #define DEFAULT_Ki_LIST {   1.08,   1.08 }
    #define DEFAULT_Kd_LIST { 114.00, 114.00 }
  #else
    #define DEFAULT_Kp  22.20
    #define DEFAULT_Ki   1.08
    #define DEFAULT_Kd 114.00
  #endif
#else
  #define BANG_MAX 255    // Limit hotend current while in bang-bang mode; 255=full current
#endif

/**
 * Model Predictive Control for hotend
 *
 * Use a physical model of the hotend to control temperature. When configured correctly this gives
 * better responsiveness and stability than PID and removes the need for PID_EXTRUSION_SCALING
 * and PID_FAN_SCALING. Enable MPC_AUTOTUNE and use M306 T to autotune the model.
 * @section mpctemp
 */
#if ENABLED(MPCTEMP)
  #define MPC_AUTOTUNE                                // Include a method to do MPC auto-tuning (~6.3K bytes of flash)
  #define MPC_EDIT_MENU                             // Add MPC editing to the ""Advanced Settings"" menu. (~1.3K bytes of flash)
  #define MPC_AUTOTUNE_MENU                         // Add MPC auto-tuning to the ""Advanced Settings"" menu. (~350 bytes of flash)

  #define MPC_MAX 255                                 // (0..255) Current to nozzle while MPC is active.
  #define MPC_HEATER_POWER { 40.0f }                  // (W) Heat cartridge powers.

  #define MPC_INCLUDE_FAN                             // Model the fan speed?

  // Measured physical constants from M306
  #define MPC_BLOCK_HEAT_CAPACITY { 16.7f }           // (J/K) Heat block heat capacities.
  #define MPC_SENSOR_RESPONSIVENESS { 0.22f }         // (K/s per ‚àÜK) Rate of change of sensor temperature from heat block.
  #define MPC_AMBIENT_XFER_COEFF { 0.068f }           // (W/K) Heat transfer coefficients from heat block to room air with fan off.
  #if ENABLED(MPC_INCLUDE_FAN)
    #define MPC_AMBIENT_XFER_COEFF_FAN255 { 0.097f }  // (W/K) Heat transfer coefficients from heat block to room air with fan on full.
  #endif

  // For one fan and multiple hotends MPC needs to know how to apply the fan cooling effect.
  #if ENABLED(MPC_INCLUDE_FAN)
    //#define MPC_FAN_0_ALL_HOTENDS
    //#define MPC_FAN_0_ACTIVE_HOTEND
  #endif

  // Filament Heat Capacity (joules/kelvin/mm)
  // Set at runtime with M306 H<value>
  #define FILAMENT_HEAT_CAPACITY_PERMM { 5.6e-3f }    // 0.0056 J/K/mm for 1.75mm PLA (0.0149 J/K/mm for 2.85mm PLA).
                                                      // 0.0036 J/K/mm for 1.75mm PETG (0.0094 J/K/mm for 2.85mm PETG).
                                                      // 0.00515 J/K/mm for 1.75mm ABS (0.0137 J/K/mm for 2.85mm ABS).
                                                      // 0.00522 J/K/mm for 1.75mm Nylon (0.0138 J/K/mm for 2.85mm Nylon).

  // Advanced options
  #define MPC_SMOOTHING_FACTOR 0.5f                   // (0.0...1.0) Noisy temperature sensors may need a lower value for stabilization.
  #define MPC_MIN_AMBIENT_CHANGE 1.0f                 // (K/s) Modeled ambient temperature rate of change, when correcting model inaccuracies.
  #define MPC_STEADYSTATE 0.5f                        // (K/s) Temperature change rate for steady state logic to be enforced.

  #define MPC_TUNING_POS { X_CENTER, Y_CENTER, 1.0f } // (mm) M306 Autotuning position, ideally bed center at first layer height.
  #define MPC_TUNING_END_Z 10.0f                      // (mm) M306 Autotuning final Z position.
#endif

//===========================================================================
//====================== PID > Bed Temperature Control ======================
//===========================================================================

// @section bed temp

/**
 * Max Bed Power
 * Applies to all forms of bed control (PID, bang-bang, and bang-bang with hysteresis).
 * When set to any value below 255, enables a form of PWM to the bed that acts like a divider
 * so don't use it unless you are OK with PWM on your bed. (See the comment on enabling PIDTEMPBED)
 */
#define MAX_BED_POWER 255 // limits duty cycle to bed; 255=full current

/**
 * PID Bed Heating
 *
 * The PID frequency will be the same as the extruder PWM.
 * If PID_dT is the default, and correct for the hardware/configuration, that means 7.689Hz,
 * which is fine for driving a square wave into a resistive load and does not significantly
 * impact FET heating. This also works fine on a Fotek SSR-10DA Solid State Relay into a 250W
 * heater. If your configuration is significantly different than this and you don't understand
 * the issues involved, don't use bed PID until someone else verifies that your hardware works.
 *
 * With this option disabled, bang-bang will be used. BED_LIMIT_SWITCHING enables hysteresis.
 */
//#define PIDTEMPBED

#if ENABLED(PIDTEMPBED)
  //#define MIN_BED_POWER 0
  //#define PID_BED_DEBUG // Print Bed PID debug data to the serial port.

  // 120V 250W silicone heater into 4mm borosilicate (MendelMax 1.5+)
  // from FOPDT model - kp=.39 Tp=405 Tdead=66, Tc set to 79.2, aggressive factor of .15 (vs .1, 1, 10)
  #define DEFAULT_bedKp 10.00
  #define DEFAULT_bedKi .023
  #define DEFAULT_bedKd 305.4

  // FIND YOUR OWN: ""M303 E-1 C8 S90"" to run autotune on the bed at 90 degreesC for 8 cycles.
#else
  //#define BED_LIMIT_SWITCHING   // Keep the bed temperature within BED_HYSTERESIS of the target
#endif

// Add 'M190 R T' for more gradual M190 R bed cooling.
//#define BED_ANNEALING_GCODE

//===========================================================================
//==================== PID > Chamber Temperature Control ====================
//===========================================================================

/**
 * PID Chamber Heating
 *
 * If this option is enabled set PID constants below.
 * If this option is disabled, bang-bang will be used and CHAMBER_LIMIT_SWITCHING will enable
 * hysteresis.
 *
 * The PID frequency will be the same as the extruder PWM.
 * If PID_dT is the default, and correct for the hardware/configuration, that means 7.689Hz,
 * which is fine for driving a square wave into a resistive load and does not significantly
 * impact FET heating. This also works fine on a Fotek SSR-10DA Solid State Relay into a 200W
 * heater. If your configuration is significantly different than this and you don't understand
 * the issues involved, don't use chamber PID until someone else verifies that your hardware works.
 * @section chamber temp
 */
//#define PIDTEMPCHAMBER
//#define CHAMBER_LIMIT_SWITCHING

/**
 * Max Chamber Power
 * Applies to all forms of chamber control (PID, bang-bang, and bang-bang with hysteresis).
 * When set to any value below 255, enables a form of PWM to the chamber heater that acts like a divider
 * so don't use it unless you are OK with PWM on your heater. (See the comment on enabling PIDTEMPCHAMBER)
 */
#define MAX_CHAMBER_POWER 255 // limits duty cycle to chamber heater; 255=full current

#if ENABLED(PIDTEMPCHAMBER)
  #define MIN_CHAMBER_POWER 0
  //#define PID_CHAMBER_DEBUG // Print Chamber PID debug data to the serial port.

  // Lasko ""MyHeat Personal Heater"" (200w) modified with a Fotek SSR-10DA to control only the heating element
  // and placed inside the small Creality printer enclosure tent.
  //
  #define DEFAULT_chamberKp 37.04
  #define DEFAULT_chamberKi 1.40
  #define DEFAULT_chamberKd 655.17
  // M309 P37.04 I1.04 D655.17

  // FIND YOUR OWN: ""M303 E-2 C8 S50"" to run autotune on the chamber at 50 degreesC for 8 cycles.
#endif // PIDTEMPCHAMBER

#if ANY(PIDTEMP, PIDTEMPBED, PIDTEMPCHAMBER)
  //#define PID_OPENLOOP          // Puts PID in open loop. M104/M140 sets the output power from 0 to PID_MAX
  //#define SLOW_PWM_HEATERS      // PWM with very low frequency (roughly 0.125Hz=8s) and minimum state time of approximately 1s useful for heaters driven by a relay
  #define PID_FUNCTIONAL_RANGE 10 // If the temperature difference between the target temperature and the actual temperature
                                  // is more than PID_FUNCTIONAL_RANGE then the PID will be shut off and the heater will be set to min/max.

  //#define PID_EDIT_MENU         // Add PID editing to the ""Advanced Settings"" menu. (~700 bytes of flash)
  //#define PID_AUTOTUNE_MENU     // Add PID auto-tuning to the ""Advanced Settings"" menu. (~250 bytes of flash)
#endif

// @section safety

/**
 * Prevent extrusion if the temperature is below EXTRUDE_MINTEMP.
 * Add M302 to set the minimum extrusion temperature and/or turn
 * cold extrusion prevention on and off.
 *
 * *** IT IS HIGHLY RECOMMENDED TO LEAVE THIS OPTION ENABLED! ***
 */
#define PREVENT_COLD_EXTRUSION
#define EXTRUDE_MINTEMP 170

/**
 * Prevent a single extrusion longer than EXTRUDE_MAXLENGTH.
 * Note: For Bowden Extruders make this large enough to allow load/unload.
 */
#define PREVENT_LENGTHY_EXTRUDE
#define EXTRUDE_MAXLENGTH 600

//===========================================================================
//======================== Thermal Runaway Protection =======================
//===========================================================================

/**
 * Thermal Protection provides additional protection to your printer from damage
 * and fire. Marlin always includes safe min and max temperature ranges which
 * protect against a broken or disconnected thermistor wire.
 *
 * The issue: If a thermistor falls out, it will report the much lower
 * temperature of the air in the room, and the the firmware will keep
 * the heater on.
 *
 * If you get ""Thermal Runaway"" or ""Heating failed"" errors the
 * details can be tuned in Configuration_adv.h
 */

#define THERMAL_PROTECTION_HOTENDS // Enable thermal protection for all extruders
#define THERMAL_PROTECTION_BED     // Enable thermal protection for the heated bed
#define THERMAL_PROTECTION_CHAMBER // Enable thermal protection for the heated chamber
#define THERMAL_PROTECTION_COOLER  // Enable thermal protection for the laser cooling

//===========================================================================
//============================= Mechanical Settings =========================
//===========================================================================

// @section machine

// Enable one of the options below for CoreXY, CoreXZ, or CoreYZ kinematics,
// either in the usual order or reversed
//#define COREXY
//#define COREXZ
//#define COREYZ
//#define COREYX
//#define COREZX
//#define COREZY

//
// MarkForged Kinematics
// See https://reprap.org/forum/read.php?152,504042
//
//#define MARKFORGED_XY
//#define MARKFORGED_YX
#if ANY(MARKFORGED_XY, MARKFORGED_YX)
  //#define MARKFORGED_INVERSE  // Enable for an inverted Markforged kinematics belt path
#endif

// Enable for a belt style printer with endless ""Z"" motion
//#define BELTPRINTER

// Enable for Polargraph Kinematics
//#define POLARGRAPH
#if ENABLED(POLARGRAPH)
  #define POLARGRAPH_MAX_BELT_LEN  1035.0 // (mm) Belt length at full extension. Override with M665 H.
  #define DEFAULT_SEGMENTS_PER_SECOND 5   // Move segmentation based on duration
  #define PEN_UP_DOWN_MENU                // Add ""Pen Up"" and ""Pen Down"" to the MarlinUI menu
#endif

// @section delta

// Enable for DELTA kinematics and configure below
//#define DELTA
#if ENABLED(DELTA)

  // Make delta curves from many straight lines (linear interpolation).
  // This is a trade-off between visible corners (not enough segments)
  // and processor overload (too many expensive sqrt calls).
  #define DEFAULT_SEGMENTS_PER_SECOND 200

  // After homing move down to a height where XY movement is unconstrained
  //#define DELTA_HOME_TO_SAFE_ZONE

  // Delta calibration menu
  // Add three-point calibration to the MarlinUI menu.
  // See http://minow.blogspot.com/index.html#4918805519571907051
  //#define DELTA_CALIBRATION_MENU

  // G33 Delta Auto-Calibration. Enable EEPROM_SETTINGS to store results.
  //#define DELTA_AUTO_CALIBRATION

  #if ENABLED(DELTA_AUTO_CALIBRATION)
    // Default number of probe points : n*n (1 -> 7)
    #define DELTA_CALIBRATION_DEFAULT_POINTS 4
  #endif

  #if ANY(DELTA_AUTO_CALIBRATION, DELTA_CALIBRATION_MENU)
    // Step size for paper-test probing
    #define PROBE_MANUALLY_STEP 0.05      // (mm)
  #endif

  // Print surface diameter/2 minus unreachable space (avoid collisions with vertical towers).
  #define PRINTABLE_RADIUS       140.0    // (mm)

  // Maximum reachable area
  #define DELTA_MAX_RADIUS       140.0    // (mm)

  // Center-to-center distance of the holes in the diagonal push rods.
  #define DELTA_DIAGONAL_ROD 250.0        // (mm)

  // Distance between bed and nozzle Z home position
  #define DELTA_HEIGHT 250.00             // (mm) Get this value from G33 auto calibrate

  #define DELTA_ENDSTOP_ADJ { 0.0, 0.0, 0.0 } // (mm) Get these values from G33 auto calibrate

  // Horizontal distance bridged by diagonal push rods when effector is centered.
  #define DELTA_RADIUS 124.0              // (mm) Get this value from G33 auto calibrate

  // Trim adjustments for individual towers
  // tower angle corrections for X and Y tower / rotate XYZ so Z tower angle = 0
  // measured in degrees anticlockwise looking from above the printer
  #define DELTA_TOWER_ANGLE_TRIM { 0.0, 0.0, 0.0 } // (mm) Get these values from G33 auto calibrate

  // Delta radius and diagonal rod adjustments
  //#define DELTA_RADIUS_TRIM_TOWER       { 0.0, 0.0, 0.0 } // (mm)
  //#define DELTA_DIAGONAL_ROD_TRIM_TOWER { 0.0, 0.0, 0.0 } // (mm)
#endif

// @section scara

/**
 * MORGAN_SCARA was developed by QHARLEY in South Africa in 2012-2013.
 * Implemented and slightly reworked by JCERNY in June, 2014.
 *
 * Mostly Printed SCARA is an open source design by Tyler Williams. See:
 *   https://www.thingiverse.com/thing:2487048
 *   https://www.thingiverse.com/thing:1241491
 */
//#define MORGAN_SCARA
//#define MP_SCARA
#if ANY(MORGAN_SCARA, MP_SCARA)
  // If movement is choppy try lowering this value
  #define DEFAULT_SEGMENTS_PER_SECOND 200

  // Length of inner and outer support arms. Measure arm lengths precisely.
  #define SCARA_LINKAGE_1 150       // (mm)
  #define SCARA_LINKAGE_2 150       // (mm)

  // SCARA tower offset (position of Tower relative to bed zero position)
  // This needs to be reasonably accurate as it defines the printbed position in the SCARA space.
  #define SCARA_OFFSET_X  100       // (mm)
  #define SCARA_OFFSET_Y  -56       // (mm)

  #if ENABLED(MORGAN_SCARA)

    //#define DEBUG_SCARA_KINEMATICS
    #define FEEDRATE_SCALING        // Convert XY feedrate from mm/s to degrees/s on the fly

    // Radius around the center where the arm cannot reach
    #define MIDDLE_DEAD_ZONE_R   0  // (mm)

    #define THETA_HOMING_OFFSET  0  // Calculated from Calibration Guide and M360 / M114. See https://www.morgan3dp.com/morgan-calibration-guide/
    #define PSI_HOMING_OFFSET    0  // Calculated from Calibration Guide and M364 / M114. See https://www.morgan3dp.com/morgan-calibration-guide/

  #elif ENABLED(MP_SCARA)

    #define SCARA_OFFSET_THETA1  12 // degrees
    #define SCARA_OFFSET_THETA2 131 // degrees

  #endif

#endif

// @section tpara

// Enable for TPARA kinematics and configure below
//#define AXEL_TPARA
#if ENABLED(AXEL_TPARA)
  #define DEBUG_TPARA_KINEMATICS
  #define DEFAULT_SEGMENTS_PER_SECOND 200

  // Length of inner and outer support arms. Measure arm lengths precisely.
  #define TPARA_LINKAGE_1 120       // (mm)
  #define TPARA_LINKAGE_2 120       // (mm)

  // SCARA tower offset (position of Tower relative to bed zero position)
  // This needs to be reasonably accurate as it defines the printbed position in the SCARA space.
  #define TPARA_OFFSET_X    0       // (mm)
  #define TPARA_OFFSET_Y    0       // (mm)
  #define TPARA_OFFSET_Z    0       // (mm)

  #define FEEDRATE_SCALING        // Convert XY feedrate from mm/s to degrees/s on the fly

  // Radius around the center where the arm cannot reach
  #define MIDDLE_DEAD_ZONE_R   0  // (mm)

  // Calculated from Calibration Guide and M360 / M114. See https://www.morgan3dp.com/morgan-calibration-guide/
  #define THETA_HOMING_OFFSET  0
  #define PSI_HOMING_OFFSET    0
#endif

// @section polar

/**
 * POLAR Kinematics
 *  developed by Kadir ilkimen for PolarBear CNC and babyBear
 *  https://github.com/kadirilkimen/Polar-Bear-Cnc-Machine
 *  https://github.com/kadirilkimen/babyBear-3D-printer
 *
 * A polar machine can have different configurations.
 * This kinematics is only compatible with the following configuration:
 *        X : Independent linear
 *   Y or B : Polar
 *        Z : Independent linear
 *
 * For example, PolarBear has CoreXZ plus Polar Y or B.
 *
 * Motion problem for Polar axis near center / origin:
 *
 * 3D printing:
 * Movements very close to the center of the polar axis take more time than others.
 * This brief delay results in more material deposition due to the pressure in the nozzle.
 *
 * Current Kinematics and feedrate scaling deals with this by making the movement as fast
 * as possible. It works for slow movements but doesn't work well with fast ones. A more
 * complicated extrusion compensation must be implemented.
 *
 * Ideally, it should estimate that a long rotation near the center is ahead and will cause
 * unwanted deposition. Therefore it can compensate the extrusion beforehand.
 *
 * Laser cutting:
 * Same thing would be a problem for laser engraving too. As it spends time rotating at the
 * center point, more likely it will burn more material than it should. Therefore similar
 * compensation would be implemented for laser-cutting operations.
 *
 * Milling:
 * This shouldn't be a problem for cutting/milling operations.
 */
//#define POLAR
#if ENABLED(POLAR)
  #define DEFAULT_SEGMENTS_PER_SECOND 180   // If movement is choppy try lowering this value
  #define PRINTABLE_RADIUS 82.0f            // (mm) Maximum travel of X axis

  // Movements fall inside POLAR_FAST_RADIUS are assigned the highest possible feedrate
  // to compensate unwanted deposition related to the near-origin motion problem.
  #define POLAR_FAST_RADIUS 3.0f            // (mm)

  // Radius which is unreachable by the tool.
  // Needed if the tool is not perfectly aligned to the center of the polar axis.
  #define POLAR_CENTER_OFFSET 0.0f          // (mm)

  #define FEEDRATE_SCALING                  // Convert XY feedrate from mm/s to degrees/s on the fly
#endif

// @section machine

// Articulated robot (arm). Joints are directly mapped to axes with no kinematics.
//#define ARTICULATED_ROBOT_ARM

// For a hot wire cutter with parallel horizontal axes (X, I) where the heights of the two wire
// ends are controlled by parallel axes (Y, J). Joints are directly mapped to axes (no kinematics).
//#define FOAMCUTTER_XYUV

//===========================================================================
//============================== Endstop Settings ===========================
//===========================================================================

// @section endstops

// Enable pullup for all endstops to prevent a floating state
#define ENDSTOPPULLUPS
#if DISABLED(ENDSTOPPULLUPS)
  // Disable ENDSTOPPULLUPS to set pullups individually
  //#define ENDSTOPPULLUP_XMIN
  //#define ENDSTOPPULLUP_YMIN
  //#define ENDSTOPPULLUP_ZMIN
  //#define ENDSTOPPULLUP_IMIN
  //#define ENDSTOPPULLUP_JMIN
  //#define ENDSTOPPULLUP_KMIN
  //#define ENDSTOPPULLUP_UMIN
  //#define ENDSTOPPULLUP_VMIN
  //#define ENDSTOPPULLUP_WMIN
  //#define ENDSTOPPULLUP_XMAX
  //#define ENDSTOPPULLUP_YMAX
  //#define ENDSTOPPULLUP_ZMAX
  //#define ENDSTOPPULLUP_IMAX
  //#define ENDSTOPPULLUP_JMAX
  //#define ENDSTOPPULLUP_KMAX
  //#define ENDSTOPPULLUP_UMAX
  //#define ENDSTOPPULLUP_VMAX
  //#define ENDSTOPPULLUP_WMAX
  //#define ENDSTOPPULLUP_ZMIN_PROBE
#endif

// Enable pulldown for all endstops to prevent a floating state
//#define ENDSTOPPULLDOWNS
#if DISABLED(ENDSTOPPULLDOWNS)
  // Disable ENDSTOPPULLDOWNS to set pulldowns individually
  //#define ENDSTOPPULLDOWN_XMIN
  //#define ENDSTOPPULLDOWN_YMIN
  //#define ENDSTOPPULLDOWN_ZMIN
  //#define ENDSTOPPULLDOWN_IMIN
  //#define ENDSTOPPULLDOWN_JMIN
  //#define ENDSTOPPULLDOWN_KMIN
  //#define ENDSTOPPULLDOWN_UMIN
  //#define ENDSTOPPULLDOWN_VMIN
  //#define ENDSTOPPULLDOWN_WMIN
  //#define ENDSTOPPULLDOWN_XMAX
  //#define ENDSTOPPULLDOWN_YMAX
  //#define ENDSTOPPULLDOWN_ZMAX
  //#define ENDSTOPPULLDOWN_IMAX
  //#define ENDSTOPPULLDOWN_JMAX
  //#define ENDSTOPPULLDOWN_KMAX
  //#define ENDSTOPPULLDOWN_UMAX
  //#define ENDSTOPPULLDOWN_VMAX
  //#define ENDSTOPPULLDOWN_WMAX
  //#define ENDSTOPPULLDOWN_ZMIN_PROBE
#endif

/**
 * Endstop ""Hit"" State
 * Set to the state (HIGH or LOW) that applies to each endstop.
 */
#define X_MIN_ENDSTOP_HIT_STATE HIGH
#define X_MAX_ENDSTOP_HIT_STATE HIGH
#define Y_MIN_ENDSTOP_HIT_STATE HIGH
#define Y_MAX_ENDSTOP_HIT_STATE HIGH
#define Z_MIN_ENDSTOP_HIT_STATE HIGH
#define Z_MAX_ENDSTOP_HIT_STATE HIGH
#define I_MIN_ENDSTOP_HIT_STATE HIGH
#define I_MAX_ENDSTOP_HIT_STATE HIGH
#define J_MIN_ENDSTOP_HIT_STATE HIGH
#define J_MAX_ENDSTOP_HIT_STATE HIGH
#define K_MIN_ENDSTOP_HIT_STATE HIGH
#define K_MAX_ENDSTOP_HIT_STATE HIGH
#define U_MIN_ENDSTOP_HIT_STATE HIGH
#define U_MAX_ENDSTOP_HIT_STATE HIGH
#define V_MIN_ENDSTOP_HIT_STATE HIGH
#define V_MAX_ENDSTOP_HIT_STATE HIGH
#define W_MIN_ENDSTOP_HIT_STATE HIGH
#define W_MAX_ENDSTOP_HIT_STATE HIGH
#define Z_MIN_PROBE_ENDSTOP_HIT_STATE HIGH

// Enable this feature if all enabled endstop pins are interrupt-capable.
// This will remove the need to poll the interrupt pins, saving many CPU cycles.
#define ENDSTOP_INTERRUPTS_FEATURE

/**
 * Endstop Noise Threshold
 *
 * Enable if your probe or endstops falsely trigger due to noise.
 *
 * - Higher values may affect repeatability or accuracy of some bed probes.
 * - To fix noise install a 100nF ceramic capacitor in parallel with the switch.
 * - This feature is not required for common micro-switches mounted on PCBs
 *   based on the Makerbot design, which already have the 100nF capacitor.
 *
 * :[2,3,4,5,6,7]
 */
#define ENDSTOP_NOISE_THRESHOLD 2

// Check for stuck or disconnected endstops during homing moves.
//#define DETECT_BROKEN_ENDSTOP

//=============================================================================
//============================== Movement Settings ============================
//=============================================================================
// @section motion

/**
 * Default Settings
 *
 * These settings can be reset by M502
 *
 * Note that if EEPROM is enabled, saved values will override these.
 */

/**
 * With this option each E stepper can have its own factors for the
 * following movement settings. If fewer factors are given than the
 * total number of extruders, the last value applies to the rest.
 */
//#define DISTINCT_E_FACTORS

/**
 * Default Axis Steps Per Unit (linear=steps/mm, rotational=steps/¬∞)
 * Override with M92
 *                                      X, Y, Z [, I [, J [, K...]]], E0 [, E1[, E2...]]
 */
#define DEFAULT_AXIS_STEPS_PER_UNIT   { 80, 80, 800, 97.40 }

/**
 * Default Max Feed Rate (linear=mm/s, rotational=¬∞/s)
 * Override with M203
 *                                      X, Y, Z [, I [, J [, K...]]], E0 [, E1[, E2...]]
 */
#define DEFAULT_MAX_FEEDRATE          { 2000, 2000, 20, 500 }

//#define LIMITED_MAX_FR_EDITING        // Limit edit via M203 or LCD to DEFAULT_MAX_FEEDRATE * 2
#if ENABLED(LIMITED_MAX_FR_EDITING)
  #define MAX_FEEDRATE_EDIT_VALUES    { 600, 600, 10, 50 } // ...or, set your own edit limits
#endif

/**
 * Default Max Acceleration (speed change with time) (linear=mm/(s^2), rotational=¬∞/(s^2))
 * (Maximum start speed for accelerated moves)
 * Override with M201
 *                                      X, Y, Z [, I [, J [, K...]]], E0 [, E1[, E2...]]
 */
#define DEFAULT_MAX_ACCELERATION      { 3000, 3000, 100, 10000 }

//#define LIMITED_MAX_ACCEL_EDITING     // Limit edit via M201 or LCD to DEFAULT_MAX_ACCELERATION * 2
#if ENABLED(LIMITED_MAX_ACCEL_EDITING)
  #define MAX_ACCEL_EDIT_VALUES       { 6000, 6000, 200, 20000 } // ...or, set your own edit limits
#endif

/**
 * Default Acceleration (speed change with time) (linear=mm/(s^2), rotational=¬∞/(s^2))
 * Override with M204
 *
 *   M204 P    Acceleration
 *   M204 R    Retract Acceleration
 *   M204 T    Travel Acceleration
 */
#define DEFAULT_ACCELERATION          3000    // X, Y, Z and E acceleration for printing moves
#define DEFAULT_RETRACT_ACCELERATION  3000    // E acceleration for retracts
#define DEFAULT_TRAVEL_ACCELERATION   3000    // X, Y, Z acceleration for travel (non printing) moves

/**
 * Default Jerk limits (mm/s)
 * Override with M205 X Y Z . . . E
 *
 * ""Jerk"" specifies the minimum speed change that requires acceleration.
 * When changing speed and direction, if the difference is less than the
 * value set here, it may happen instantaneously.
 */
#define CLASSIC_JERK
#if ENABLED(CLASSIC_JERK)
  #define DEFAULT_XJERK 10.0
  #define DEFAULT_YJERK 10.0
  #define DEFAULT_ZJERK  0.3
  //#define DEFAULT_IJERK  0.3
  //#define DEFAULT_JJERK  0.3
  //#define DEFAULT_KJERK  0.3
  //#define DEFAULT_UJERK  0.3
  //#define DEFAULT_VJERK  0.3
  //#define DEFAULT_WJERK  0.3

  //#define TRAVEL_EXTRA_XYJERK 0.0     // Additional jerk allowance for all travel moves

  //#define LIMITED_JERK_EDITING        // Limit edit via M205 or LCD to DEFAULT_aJERK * 2
  #if ENABLED(LIMITED_JERK_EDITING)
    #define MAX_JERK_EDIT_VALUES { 20, 20, 0.6, 10 } // ...or, set your own edit limits
  #endif
#endif

#define DEFAULT_EJERK    5.0  // May be used by Linear Advance

/**
 * Junction Deviation Factor
 *
 * See:
 *   https://reprap.org/forum/read.php?1,739819
 *   https://blog.kyneticcnc.com/2018/10/computing-junction-deviation-for-marlin.html
 */
#if DISABLED(CLASSIC_JERK)
  #define JUNCTION_DEVIATION_MM 0.013 // (mm) Distance from real junction edge
  #define JD_HANDLE_SMALL_SEGMENTS    // Use curvature estimation instead of just the junction angle
                                      // for small segments (< 1mm) with large junction angles (> 135¬∞).
#endif

/**
 * S-Curve Acceleration
 *
 * This option eliminates vibration during printing by fitting a B√©zier
 * curve to move acceleration, producing much smoother direction changes.
 *
 * See https://github.com/synthetos/TinyG/wiki/Jerk-Controlled-Motion-Explained
 */
#define S_CURVE_ACCELERATION

//===========================================================================
//============================= Z Probe Options =============================
//===========================================================================
// @section probes

//
// See https://marlinfw.org/docs/configuration/probes.html
//

/**
 * Enable this option for a probe connected to the Z-MIN pin.
 * The probe replaces the Z-MIN endstop and is used for Z homing.
 * (Automatically enables USE_PROBE_FOR_Z_HOMING.)
 */
//#define Z_MIN_PROBE_USES_Z_MIN_ENDSTOP_PIN

// Force the use of the probe for Z-axis homing
#define USE_PROBE_FOR_Z_HOMING

/**
 * Z_MIN_PROBE_PIN
 *
 * Override this pin only if the probe cannot be connected to
 * the default Z_MIN_PROBE_PIN for the selected MOTHERBOARD.
 *
 *  - The simplest option is to use a free endstop connector.
 *  - Use 5V for powered (usually inductive) sensors.
 *
 *  - For simple switches...
 *    - Normally-closed (NC) also connect to GND.
 *    - Normally-open (NO) also connect to 5V.
 */
#define Z_MIN_PROBE_PIN PC14 // Pin 32 is the RAMPS default

/**
 * Probe Type
 *
 * Allen Key Probes, Servo Probes, Z-Sled Probes, FIX_MOUNTED_PROBE, etc.
 * Activate one of these to use Auto Bed Leveling below.
 */

/**
 * The ""Manual Probe"" provides a means to do ""Auto"" Bed Leveling without a probe.
 * Use G29 repeatedly, adjusting the Z height at each point with movement commands
 * or (with LCD_BED_LEVELING) the LCD controller.
 */
//#define PROBE_MANUALLY

/**
 * A Fix-Mounted Probe either doesn't deploy or needs manual deployment.
 *   (e.g., an inductive probe or a nozzle-based probe-switch.)
 */
//#define FIX_MOUNTED_PROBE

/**
 * Use the nozzle as the probe, as with a conductive
 * nozzle system or a piezo-electric smart effector.
 */
//#define NOZZLE_AS_PROBE

/**
 * Z Servo Probe, such as an endstop switch on a rotating arm.
 */
//#define Z_PROBE_SERVO_NR 0
#ifdef Z_PROBE_SERVO_NR
  //#define Z_SERVO_ANGLES { 70, 0 }      // Z Servo Deploy and Stow angles
  //#define Z_SERVO_MEASURE_ANGLE 45      // Use if the servo must move to a ""free"" position for measuring after deploy
  //#define Z_SERVO_INTERMEDIATE_STOW     // Stow the probe between points
  //#define Z_SERVO_DEACTIVATE_AFTER_STOW // Deactivate the servo when probe is stowed
#endif

/**
 * The BLTouch probe uses a Hall effect sensor and emulates a servo.
 */
#define BLTOUCH

/**
 * MagLev V4 probe by MDD
 *
 * This probe is deployed and activated by powering a built-in electromagnet.
 */
//#define MAGLEV4
#if ENABLED(MAGLEV4)
  //#define MAGLEV_TRIGGER_PIN 11     // Set to the connected digital output
  #define MAGLEV_TRIGGER_DELAY 15     // Changing this risks overheating the coil
#endif

/**
 * Touch-MI Probe by hotends.fr
 *
 * This probe is deployed and activated by moving the X-axis to a magnet at the edge of the bed.
 * By default, the magnet is assumed to be on the left and activated by a home. If the magnet is
 * on the right, enable and set TOUCH_MI_DEPLOY_XPOS to the deploy position.
 *
 * Also requires: BABYSTEPPING, BABYSTEP_ZPROBE_OFFSET, Z_SAFE_HOMING,
 *                and a minimum Z_CLEARANCE_FOR_HOMING of 10.
 */
//#define TOUCH_MI_PROBE
#if ENABLED(TOUCH_MI_PROBE)
  #define TOUCH_MI_RETRACT_Z 0.5                  // Height at which the probe retracts
  //#define TOUCH_MI_DEPLOY_XPOS (X_MAX_BED + 2)  // For a magnet on the right side of the bed
  //#define TOUCH_MI_MANUAL_DEPLOY                // For manual deploy (LCD menu)
#endif

/**
 * Bed Distance Sensor
 *
 * Measures the distance from bed to nozzle with accuracy of 0.01mm.
 * For information about this sensor https://github.com/markniu/Bed_Distance_sensor
 * Uses I2C port, so it requires I2C library markyue/Panda_SoftMasterI2C.
 */
//#define BD_SENSOR
#if ENABLED(BD_SENSOR)
  //#define BD_SENSOR_PROBE_NO_STOP // Probe bed without stopping at each probe point
#endif

// A probe that is deployed and stowed with a solenoid pin (SOL1_PIN)
//#define SOLENOID_PROBE

// A sled-mounted probe like those designed by Charles Bell.
//#define Z_PROBE_SLED
//#define SLED_DOCKING_OFFSET 5  // The extra distance the X axis must travel to pickup the sled. 0 should be fine but you can push it further if you'd like.

// A probe deployed by moving the x-axis, such as the Wilson II's rack-and-pinion probe designed by Marty Rice.
//#define RACK_AND_PINION_PROBE
#if ENABLED(RACK_AND_PINION_PROBE)
  #define Z_PROBE_DEPLOY_X  X_MIN_POS
  #define Z_PROBE_RETRACT_X X_MAX_POS
#endif

/**
 * Magnetically Mounted Probe
 * For probes such as Euclid, Klicky, Klackender, etc.
 */
//#define MAG_MOUNTED_PROBE
#if ENABLED(MAG_MOUNTED_PROBE)
  #define PROBE_DEPLOY_FEEDRATE (133*60)  // (mm/min) Probe deploy speed
  #define PROBE_STOW_FEEDRATE   (133*60)  // (mm/min) Probe stow speed

  #define MAG_MOUNTED_DEPLOY_1 { PROBE_DEPLOY_FEEDRATE, { 245, 114, 30 } }  // Move to side Dock & Attach probe
  #define MAG_MOUNTED_DEPLOY_2 { PROBE_DEPLOY_FEEDRATE, { 210, 114, 30 } }  // Move probe off dock
  #define MAG_MOUNTED_DEPLOY_3 { PROBE_DEPLOY_FEEDRATE, {   0,   0,  0 } }  // Extra move if needed
  #define MAG_MOUNTED_DEPLOY_4 { PROBE_DEPLOY_FEEDRATE, {   0,   0,  0 } }  // Extra move if needed
  #define MAG_MOUNTED_DEPLOY_5 { PROBE_DEPLOY_FEEDRATE, {   0,   0,  0 } }  // Extra move if needed
  #define MAG_MOUNTED_STOW_1   { PROBE_STOW_FEEDRATE,   { 245, 114, 20 } }  // Move to dock
  #define MAG_MOUNTED_STOW_2   { PROBE_STOW_FEEDRATE,   { 245, 114,  0 } }  // Place probe beside remover
  #define MAG_MOUNTED_STOW_3   { PROBE_STOW_FEEDRATE,   { 230, 114,  0 } }  // Side move to remove probe
  #define MAG_MOUNTED_STOW_4   { PROBE_STOW_FEEDRATE,   { 210, 114, 20 } }  // Side move to remove probe
  #define MAG_MOUNTED_STOW_5   { PROBE_STOW_FEEDRATE,   {   0,   0,  0 } }  // Extra move if needed
#endif

// Duet Smart Effector (for delta printers) - https://docs.duet3d.com/en/Duet3D_hardware/Accessories/Smart_Effector
// When the pin is defined you can use M672 to set/reset the probe sensitivity.
//#define DUET_SMART_EFFECTOR
#if ENABLED(DUET_SMART_EFFECTOR)
  #define SMART_EFFECTOR_MOD_PIN  -1  // Connect a GPIO pin to the Smart Effector MOD pin
#endif

/**
 * Use StallGuard2 to probe the bed with the nozzle.
 * Requires stallGuard-capable Trinamic stepper drivers.
 * CAUTION: This can damage machines with Z lead screws.
 *          Take extreme care when setting up this feature.
 */
//#define SENSORLESS_PROBING

/**
 * Allen key retractable z-probe as seen on many Kossel delta printers - https://reprap.org/wiki/Kossel#Autolevel_probe
 * Deploys by touching z-axis belt. Retracts by pushing the probe down.
 */
//#define Z_PROBE_ALLEN_KEY
#if ENABLED(Z_PROBE_ALLEN_KEY)
  // 2 or 3 sets of coordinates for deploying and retracting the spring loaded touch probe on G29,
  // if servo actuated touch probe is not defined. Uncomment as appropriate for your printer/probe.

  #define Z_PROBE_ALLEN_KEY_DEPLOY_1 { 30.0, PRINTABLE_RADIUS, 100.0 }
  #define Z_PROBE_ALLEN_KEY_DEPLOY_1_FEEDRATE XY_PROBE_FEEDRATE

  #define Z_PROBE_ALLEN_KEY_DEPLOY_2 { 0.0, PRINTABLE_RADIUS, 100.0 }
  #define Z_PROBE_ALLEN_KEY_DEPLOY_2_FEEDRATE (XY_PROBE_FEEDRATE)/10

  #define Z_PROBE_ALLEN_KEY_DEPLOY_3 { 0.0, (PRINTABLE_RADIUS) * 0.75, 100.0 }
  #define Z_PROBE_ALLEN_KEY_DEPLOY_3_FEEDRATE XY_PROBE_FEEDRATE

  #define Z_PROBE_ALLEN_KEY_STOW_1 { -64.0, 56.0, 23.0 } // Move the probe into position
  #define Z_PROBE_ALLEN_KEY_STOW_1_FEEDRATE XY_PROBE_FEEDRATE

  #define Z_PROBE_ALLEN_KEY_STOW_2 { -64.0, 56.0, 3.0 } // Push it down
  #define Z_PROBE_ALLEN_KEY_STOW_2_FEEDRATE (XY_PROBE_FEEDRATE)/10

  #define Z_PROBE_ALLEN_KEY_STOW_3 { -64.0, 56.0, 50.0 } // Move it up to clear
  #define Z_PROBE_ALLEN_KEY_STOW_3_FEEDRATE XY_PROBE_FEEDRATE

  #define Z_PROBE_ALLEN_KEY_STOW_4 { 0.0, 0.0, 50.0 }
  #define Z_PROBE_ALLEN_KEY_STOW_4_FEEDRATE XY_PROBE_FEEDRATE

#endif // Z_PROBE_ALLEN_KEY

/**
 * Nozzle-to-Probe offsets { X, Y, Z }
 *
 * X and Y offset
 *   Use a caliper or ruler to measure the distance from the tip of
 *   the Nozzle to the center-point of the Probe in the X and Y axes.
 *
 * Z offset
 * - For the Z offset use your best known value and adjust at runtime.
 * - Common probes trigger below the nozzle and have negative values for Z offset.
 * - Probes triggering above the nozzle height are uncommon but do exist. When using
 *   probes such as this, carefully set Z_CLEARANCE_DEPLOY_PROBE and Z_CLEARANCE_BETWEEN_PROBES
 *   to avoid collisions during probing.
 *
 * Tune and Adjust
 * -  Probe Offsets can be tuned at runtime with 'M851', LCD menus, babystepping, etc.
 * -  PROBE_OFFSET_WIZARD (Configuration_adv.h) can be used for setting the Z offset.
 *
 * Assuming the typical work area orientation:
 *  - Probe to RIGHT of the Nozzle has a Positive X offset
 *  - Probe to LEFT  of the Nozzle has a Negative X offset
 *  - Probe in BACK  of the Nozzle has a Positive Y offset
 *  - Probe in FRONT of the Nozzle has a Negative Y offset
 *
 * Some examples:
 *   #define NOZZLE_TO_PROBE_OFFSET { 10, 10, -1 }   // Example ""1""
 *   #define NOZZLE_TO_PROBE_OFFSET {-10,  5, -1 }   // Example ""2""
 *   #define NOZZLE_TO_PROBE_OFFSET {  5, -5, -1 }   // Example ""3""
 *   #define NOZZLE_TO_PROBE_OFFSET {-15,-10, -1 }   // Example ""4""
 *
 *     +-- BACK ---+
 *     |    [+]    |
 *   L |        1  | R <-- Example ""1"" (right+,  back+)
 *   E |  2        | I <-- Example ""2"" ( left-,  back+)
 *   F |[-]  N  [+]| G <-- Nozzle
 *   T |       3   | H <-- Example ""3"" (right+, front-)
 *     | 4         | T <-- Example ""4"" ( left-, front-)
 *     |    [-]    |
 *     O-- FRONT --+
 */
#define NOZZLE_TO_PROBE_OFFSET { -45, -7, -2.680 }

// Enable and set to use a specific tool for probing. Disable to allow any tool.
#define PROBING_TOOL 0
#ifdef PROBING_TOOL
  //#define PROBE_TOOLCHANGE_NO_MOVE  // Suppress motion on probe tool-change
#endif

// Most probes should stay away from the edges of the bed, but
// with NOZZLE_AS_PROBE this can be negative for a wider probing area.
#define PROBING_MARGIN 50

// X and Y axis travel speed (mm/min) between probes
#define XY_PROBE_FEEDRATE (150*60)

// Feedrate (mm/min) for the first approach when double-probing (MULTIPLE_PROBING == 2)
#define Z_PROBE_FEEDRATE_FAST (15*60)

// Feedrate (mm/min) for the ""accurate"" probe of each point
#define Z_PROBE_FEEDRATE_SLOW (Z_PROBE_FEEDRATE_FAST / 4)

/**
 * Probe Activation Switch
 * A switch indicating proper deployment, or an optical
 * switch triggered when the carriage is near the bed.
 */
//#define PROBE_ACTIVATION_SWITCH
#if ENABLED(PROBE_ACTIVATION_SWITCH)
  #define PROBE_ACTIVATION_SWITCH_STATE LOW // State indicating probe is active
  //#define PROBE_ACTIVATION_SWITCH_PIN PC6 // Override default pin
#endif

/**
 * Tare Probe (determine zero-point) prior to each probe.
 * Useful for a strain gauge or piezo sensor that needs to factor out
 * elements such as cables pulling on the carriage.
 */
//#define PROBE_TARE
#if ENABLED(PROBE_TARE)
  #define PROBE_TARE_TIME  200    // (ms) Time to hold tare pin
  #define PROBE_TARE_DELAY 200    // (ms) Delay after tare before
  #define PROBE_TARE_STATE HIGH   // State to write pin for tare
  //#define PROBE_TARE_PIN PA5    // Override default pin
  #if ENABLED(PROBE_ACTIVATION_SWITCH)
    //#define PROBE_TARE_ONLY_WHILE_INACTIVE  // Fail to tare/probe if PROBE_ACTIVATION_SWITCH is active
  #endif
#endif

/**
 * Probe Enable / Disable
 * The probe only provides a triggered signal when enabled.
 */
//#define PROBE_ENABLE_DISABLE
#if ENABLED(PROBE_ENABLE_DISABLE)
  //#define PROBE_ENABLE_PIN -1   // Override the default pin here
#endif

/**
 * Multiple Probing
 *
 * You may get improved results by probing 2 or more times.
 * With EXTRA_PROBING the more atypical reading(s) will be disregarded.
 *
 * A total of 2 does fast/slow probes with a weighted average.
 * A total of 3 or more adds more slow probes, taking the average.
 */
#define MULTIPLE_PROBING 3
#define EXTRA_PROBING    2

/**
 * Z probes require clearance when deploying, stowing, and moving between
 * probe points to avoid hitting the bed and other hardware.
 * Servo-mounted probes require extra space for the arm to rotate.
 * Inductive probes need space to keep from triggering early.
 *
 * Use these settings to specify the distance (mm) to raise the probe (or
 * lower the bed). The values set here apply over and above any (negative)
 * probe Z Offset set with NOZZLE_TO_PROBE_OFFSET, M851, or the LCD.
 * Only integer values >= 1 are valid here.
 *
 * Example: `M851 Z-5` with a CLEARANCE of 4  =>  9mm from bed to nozzle.
 *     But: `M851 Z+1` with a CLEARANCE of 2  =>  2mm from bed to nozzle.
 */
#define Z_CLEARANCE_DEPLOY_PROBE   5 // (mm) Z Clearance for Deploy/Stow
#define Z_CLEARANCE_BETWEEN_PROBES  3 // (mm) Z Clearance between probe points
#define Z_CLEARANCE_MULTI_PROBE     3 // (mm) Z Clearance between multiple probes
#define Z_PROBE_ERROR_TOLERANCE     3 // (mm) Tolerance for early trigger (<= -probe.offset.z + ZPET)
//#define Z_AFTER_PROBING           5 // (mm) Z position after probing is done

#define Z_PROBE_LOW_POINT          -3 // (mm) Farthest distance below the trigger-point to go before stopping

// For M851 provide ranges for adjusting the X, Y, and Z probe offsets
//#define PROBE_OFFSET_XMIN -50   // (mm)
//#define PROBE_OFFSET_XMAX  50   // (mm)
//#define PROBE_OFFSET_YMIN -50   // (mm)
//#define PROBE_OFFSET_YMAX  50   // (mm)
//#define PROBE_OFFSET_ZMIN -10   // (mm)
//#define PROBE_OFFSET_ZMAX  10   // (mm)

// Enable the M48 repeatability test to test probe accuracy
#define Z_MIN_PROBE_REPEATABILITY_TEST

// Before deploy/stow pause for user confirmation
//#define PAUSE_BEFORE_DEPLOY_STOW
#if ENABLED(PAUSE_BEFORE_DEPLOY_STOW)
  //#define PAUSE_PROBE_DEPLOY_WHEN_TRIGGERED // For Manual Deploy Allenkey Probe
#endif

/**
 * Enable one or more of the following if probing seems unreliable.
 * Heaters and/or fans can be disabled during probing to minimize electrical
 * noise. A delay can also be added to allow noise and vibration to settle.
 * These options are most useful for the BLTouch probe, but may also improve
 * readings with inductive probes and piezo sensors.
 */
#define PROBING_HEATERS_OFF       // Turn heaters off when probing
#if ENABLED(PROBING_HEATERS_OFF)
  //#define WAIT_FOR_BED_HEATER     // Wait for bed to heat back up between probes (to improve accuracy)
  //#define WAIT_FOR_HOTEND         // Wait for hotend to heat back up between probes (to improve accuracy & prevent cold extrude)
#endif
#define PROBING_FANS_OFF          // Turn fans off when probing
#define PROBING_ESTEPPERS_OFF     // Turn all extruder steppers off when probing
//#define PROBING_STEPPERS_OFF      // Turn all steppers off (unless needed to hold position) when probing (including extruders)
#define DELAY_BEFORE_PROBING 200  // (ms) To prevent vibrations from triggering piezo sensors

// Require minimum nozzle and/or bed temperature for probing
//#define PREHEAT_BEFORE_PROBING
#if ENABLED(PREHEAT_BEFORE_PROBING)
  #define PROBING_NOZZLE_TEMP 120   // (¬∞C) Only applies to E0 at this time
  #define PROBING_BED_TEMP     50
#endif

// For Inverting Stepper Enable Pins (Active Low) use 0, Non Inverting (Active High) use 1
// :{ 0:'Low', 1:'High' }
#define X_ENABLE_ON 0
#define Y_ENABLE_ON 0
#define Z_ENABLE_ON 0
#define E_ENABLE_ON 0 // For all extruders
//#define I_ENABLE_ON 0
//#define J_ENABLE_ON 0
//#define K_ENABLE_ON 0
//#define U_ENABLE_ON 0
//#define V_ENABLE_ON 0
//#define W_ENABLE_ON 0

// Disable axis steppers immediately when they're not being stepped.
// WARNING: When motors turn off there is a chance of losing position accuracy!
//#define DISABLE_X
//#define DISABLE_Y
//#define DISABLE_Z
//#define DISABLE_I
//#define DISABLE_J
//#define DISABLE_K
//#define DISABLE_U
//#define DISABLE_V
//#define DISABLE_W

// Turn off the display blinking that warns about possible accuracy reduction
//#define DISABLE_REDUCED_ACCURACY_WARNING

// @section extruder

//#define DISABLE_E               // Disable the extruder when not stepping
#define DISABLE_OTHER_EXTRUDERS   // Keep only the active extruder enabled

// @section motion

// Invert the stepper direction. Change (or reverse the motor connector) if an axis goes the wrong way.
#define INVERT_X_DIR true
#define INVERT_Y_DIR true
#define INVERT_Z_DIR true
//#define INVERT_I_DIR false
//#define INVERT_J_DIR false
//#define INVERT_K_DIR false
//#define INVERT_U_DIR false
//#define INVERT_V_DIR false
//#define INVERT_W_DIR false

// @section extruder

// For direct drive extruder v9 set to true, for geared extruder set to false.
#define INVERT_E0_DIR false
#define INVERT_E1_DIR false
#define INVERT_E2_DIR false
#define INVERT_E3_DIR false
#define INVERT_E4_DIR false
#define INVERT_E5_DIR false
#define INVERT_E6_DIR false
#define INVERT_E7_DIR false

// @section homing

//#define NO_MOTION_BEFORE_HOMING // Inhibit movement until all axes have been homed. Also enable HOME_AFTER_DEACTIVATE for extra safety.
//#define HOME_AFTER_DEACTIVATE   // Require rehoming after steppers are deactivated. Also enable NO_MOTION_BEFORE_HOMING for extra safety.

/**
 * Set Z_IDLE_HEIGHT if the Z-Axis moves on its own when steppers are disabled.
 *  - Use a low value (i.e., Z_MIN_POS) if the nozzle falls down to the bed.
 *  - Use a large value (i.e., Z_MAX_POS) if the bed falls down, away from the nozzle.
 */
//#define Z_IDLE_HEIGHT Z_HOME_POS

//#define Z_CLEARANCE_FOR_HOMING  4   // (mm) Minimal Z height before homing (G28) for Z clearance above the bed, clamps, ...
                                      // You'll need this much clearance above Z_MAX_POS to avoid grinding.

//#define Z_AFTER_HOMING         10   // (mm) Height to move to after homing (if Z was homed)
//#define XY_AFTER_HOMING { 10, 10 }  // (mm) Move to an XY position after homing (and raising Z)

//#define EVENT_GCODE_AFTER_HOMING ""M300 P440 S200""  // Commands to run after G28 (and move to XY_AFTER_HOMING)

// Direction of endstops when homing; 1=MAX, -1=MIN
// :[-1,1]
#define X_HOME_DIR 1
#define Y_HOME_DIR 1
#define Z_HOME_DIR -1
//#define I_HOME_DIR -1
//#define J_HOME_DIR -1
//#define K_HOME_DIR -1
//#define U_HOME_DIR -1
//#define V_HOME_DIR -1
//#define W_HOME_DIR -1

/**
 * Safety Stops
 * If an axis has endstops on both ends the one specified above is used for
 * homing, while the other can be used for things like SD_ABORT_ON_ENDSTOP_HIT.
 */
//#define X_SAFETY_STOP
//#define Y_SAFETY_STOP
//#define Z_SAFETY_STOP
//#define I_SAFETY_STOP
//#define J_SAFETY_STOP
//#define K_SAFETY_STOP
//#define U_SAFETY_STOP
//#define V_SAFETY_STOP
//#define W_SAFETY_STOP

// @section geometry

// The size of the printable area
#define X_BED_SIZE 360
#define Y_BED_SIZE 360

// Travel limits (linear=mm, rotational=¬∞) after homing, corresponding to endstop positions.
#define X_MIN_POS 0
#define Y_MIN_POS 0
#define Z_MIN_POS 0
#define X_MAX_POS X_BED_SIZE
#define Y_MAX_POS Y_BED_SIZE
#define Z_MAX_POS 410
//#define I_MIN_POS 0
//#define I_MAX_POS 50
//#define J_MIN_POS 0
//#define J_MAX_POS 50
//#define K_MIN_POS 0
//#define K_MAX_POS 50
//#define U_MIN_POS 0
//#define U_MAX_POS 50
//#define V_MIN_POS 0
//#define V_MAX_POS 50
//#define W_MIN_POS 0
//#define W_MAX_POS 50

/**
 * Software Endstops
 *
 * - Prevent moves outside the set machine bounds.
 * - Individual axes can be disabled, if desired.
 * - X and Y only apply to Cartesian robots.
 * - Use 'M211' to set software endstops on/off or report current state
 */

// Min software endstops constrain movement within minimum coordinate bounds
#define MIN_SOFTWARE_ENDSTOPS
#if ENABLED(MIN_SOFTWARE_ENDSTOPS)
  #define MIN_SOFTWARE_ENDSTOP_X
  #define MIN_SOFTWARE_ENDSTOP_Y
  #define MIN_SOFTWARE_ENDSTOP_Z
  #define MIN_SOFTWARE_ENDSTOP_I
  #define MIN_SOFTWARE_ENDSTOP_J
  #define MIN_SOFTWARE_ENDSTOP_K
  #define MIN_SOFTWARE_ENDSTOP_U
  #define MIN_SOFTWARE_ENDSTOP_V
  #define MIN_SOFTWARE_ENDSTOP_W
#endif

// Max software endstops constrain movement within maximum coordinate bounds
#define MAX_SOFTWARE_ENDSTOPS
#if ENABLED(MAX_SOFTWARE_ENDSTOPS)
  #define MAX_SOFTWARE_ENDSTOP_X
  #define MAX_SOFTWARE_ENDSTOP_Y
  #define MAX_SOFTWARE_ENDSTOP_Z
  #define MAX_SOFTWARE_ENDSTOP_I
  #define MAX_SOFTWARE_ENDSTOP_J
  #define MAX_SOFTWARE_ENDSTOP_K
  #define MAX_SOFTWARE_ENDSTOP_U
  #define MAX_SOFTWARE_ENDSTOP_V
  #define MAX_SOFTWARE_ENDSTOP_W
#endif

#if ANY(MIN_SOFTWARE_ENDSTOPS, MAX_SOFTWARE_ENDSTOPS)
  #define SOFT_ENDSTOPS_MENU_ITEM  // Enable/Disable software endstops from the LCD
#endif

/**
 * Filament Runout Sensors
 * Mechanical or opto endstops are used to check for the presence of filament.
 *
 * IMPORTANT: Runout will only trigger if Marlin is aware that a print job is running.
 * Marlin knows a print job is running when:
 *  1. Running a print job from media started with M24.
 *  2. The Print Job Timer has been started with M75.
 *  3. The heaters were turned on and PRINTJOB_TIMER_AUTOSTART is enabled.
 *
 * RAMPS-based boards use SERVO3_PIN for the first runout sensor.
 * For other boards you may need to define FIL_RUNOUT_PIN, FIL_RUNOUT2_PIN, etc.
 */
#define FILAMENT_RUNOUT_SENSOR
#if ENABLED(FILAMENT_RUNOUT_SENSOR)
  #define FIL_RUNOUT_ENABLED_DEFAULT true // Enable the sensor on startup. Override with M412 followed by M500.
  #define NUM_RUNOUT_SENSORS   1          // Number of sensors, up to one per extruder. Define a FIL_RUNOUT#_PIN for each.

  #define FIL_RUNOUT_STATE     LOW        // Pin state indicating that filament is NOT present.
  #define FIL_RUNOUT_PULLUP               // Use internal pullup for filament runout pins.
  //#define FIL_RUNOUT_PULLDOWN           // Use internal pulldown for filament runout pins.
  //#define WATCH_ALL_RUNOUT_SENSORS      // Execute runout script on any triggering sensor, not only for the active extruder.
                                          // This is automatically enabled for MIXING_EXTRUDERs.

  // Override individually if the runout sensors vary
  //#define FIL_RUNOUT1_STATE LOW
  //#define FIL_RUNOUT1_PULLUP
  //#define FIL_RUNOUT1_PULLDOWN

  //#define FIL_RUNOUT2_STATE LOW
  //#define FIL_RUNOUT2_PULLUP
  //#define FIL_RUNOUT2_PULLDOWN

  //#define FIL_RUNOUT3_STATE LOW
  //#define FIL_RUNOUT3_PULLUP
  //#define FIL_RUNOUT3_PULLDOWN

  //#define FIL_RUNOUT4_STATE LOW
  //#define FIL_RUNOUT4_PULLUP
  //#define FIL_RUNOUT4_PULLDOWN

  //#define FIL_RUNOUT5_STATE LOW
  //#define FIL_RUNOUT5_PULLUP
  //#define FIL_RUNOUT5_PULLDOWN

  //#define FIL_RUNOUT6_STATE LOW
  //#define FIL_RUNOUT6_PULLUP
  //#define FIL_RUNOUT6_PULLDOWN

  //#define FIL_RUNOUT7_STATE LOW
  //#define FIL_RUNOUT7_PULLUP
  //#define FIL_RUNOUT7_PULLDOWN

  //#define FIL_RUNOUT8_STATE LOW
  //#define FIL_RUNOUT8_PULLUP
  //#define FIL_RUNOUT8_PULLDOWN

  // Commands to execute on filament runout.
  // With multiple runout sensors use the %c placeholder for the current tool in commands (e.g., ""M600 T%c"")
  // NOTE: After 'M412 H1' the host handles filament runout and this script does not apply.
  #define FILAMENT_RUNOUT_SCRIPT ""M600""

  // After a runout is detected, continue printing this length of filament
  // before executing the runout script. Useful for a sensor at the end of
  // a feed tube. Requires 4 bytes SRAM per sensor, plus 4 bytes overhead.
  //#define FILAMENT_RUNOUT_DISTANCE_MM 25

  #ifdef FILAMENT_RUNOUT_DISTANCE_MM
    // Enable this option to use an encoder disc that toggles the runout pin
    // as the filament moves. (Be sure to set FILAMENT_RUNOUT_DISTANCE_MM
    // large enough to avoid false positives.)
    //#define FILAMENT_MOTION_SENSOR

    #if ENABLED(FILAMENT_MOTION_SENSOR)
      //#define FILAMENT_SWITCH_AND_MOTION
      #if ENABLED(FILAMENT_SWITCH_AND_MOTION)
        #define NUM_MOTION_SENSORS   1          // Number of sensors, up to one per extruder. Define a FIL_MOTION#_PIN for each.
        //#define FIL_MOTION1_PIN    -1

        // Override individually if the motion sensors vary
        //#define FIL_MOTION1_STATE LOW
        //#define FIL_MOTION1_PULLUP
        //#define FIL_MOTION1_PULLDOWN

        //#define FIL_MOTION2_STATE LOW
        //#define FIL_MOTION2_PULLUP
        //#define FIL_MOTION2_PULLDOWN

        //#define FIL_MOTION3_STATE LOW
        //#define FIL_MOTION3_PULLUP
        //#define FIL_MOTION3_PULLDOWN

        //#define FIL_MOTION4_STATE LOW
        //#define FIL_MOTION4_PULLUP
        //#define FIL_MOTION4_PULLDOWN

        //#define FIL_MOTION5_STATE LOW
        //#define FIL_MOTION5_PULLUP
        //#define FIL_MOTION5_PULLDOWN

        //#define FIL_MOTION6_STATE LOW
        //#define FIL_MOTION6_PULLUP
        //#define FIL_MOTION6_PULLDOWN

        //#define FIL_MOTION7_STATE LOW
        //#define FIL_MOTION7_PULLUP
        //#define FIL_MOTION7_PULLDOWN

        //#define FIL_MOTION8_STATE LOW
        //#define FIL_MOTION8_PULLUP
        //#define FIL_MOTION8_PULLDOWN
      #endif
    #endif
  #endif
#endif

//===========================================================================
//=============================== Bed Leveling ==============================
//===========================================================================
// @section calibrate

/**
 * Choose one of the options below to enable G29 Bed Leveling. The parameters
 * and behavior of G29 will change depending on your selection.
 *
 *  If using a Probe for Z Homing, enable Z_SAFE_HOMING also!
 *
 * - AUTO_BED_LEVELING_3POINT
 *   Probe 3 arbitrary points on the bed (that aren't collinear)
 *   You specify the XY coordinates of all 3 points.
 *   The result is a single tilted plane. Best for a flat bed.
 *
 * - AUTO_BED_LEVELING_LINEAR
 *   Probe several points in a grid.
 *   You specify the rectangle and the density of sample points.
 *   The result is a single tilted plane. Best for a flat bed.
 *
 * - AUTO_BED_LEVELING_BILINEAR
 *   Probe several points in a grid.
 *   You specify the rectangle and the density of sample points.
 *   The result is a mesh, best for large or uneven beds.
 *
 * - AUTO_BED_LEVELING_UBL (Unified Bed Leveling)
 *   A comprehensive bed leveling system combining the features and benefits
 *   of other systems. UBL also includes integrated Mesh Generation, Mesh
 *   Validation and Mesh Editing systems.
 *
 * - MESH_BED_LEVELING
 *   Probe a grid manually
 *   The result is a mesh, suitable for large or uneven beds. (See BILINEAR.)
 *   For machines without a probe, Mesh Bed Leveling provides a method to perform
 *   leveling in steps so you can manually adjust the Z height at each grid-point.
 *   With an LCD controller the process is guided step-by-step.
 */
//#define AUTO_BED_LEVELING_3POINT
//#define AUTO_BED_LEVELING_LINEAR
#define AUTO_BED_LEVELING_BILINEAR
//#define AUTO_BED_LEVELING_UBL
//#define MESH_BED_LEVELING

/**
 * Commands to execute at the end of G29 probing.
 * Useful to retract or move the Z probe out of the way.
 */
//#define Z_PROBE_END_SCRIPT ""G1 Z10 F12000\nG1 X15 Y330\nG1 Z0.5\nG1 Z10""

/**
 * Normally G28 leaves leveling disabled on completion. Enable one of
 * these options to restore the prior leveling state or to always enable
 * leveling immediately after G28.
 */
#define RESTORE_LEVELING_AFTER_G28
//#define ENABLE_LEVELING_AFTER_G28

/**
 * Auto-leveling needs preheating
 */
//#define PREHEAT_BEFORE_LEVELING
#if ENABLED(PREHEAT_BEFORE_LEVELING)
  #define LEVELING_NOZZLE_TEMP 120   // (¬∞C) Only applies to E0 at this time
  #define LEVELING_BED_TEMP     50
#endif

/**
 * Enable detailed logging of G28, G29, M48, etc.
 * Turn on with the command 'M111 S32'.
 * NOTE: Requires a lot of PROGMEM!
 */
//#define DEBUG_LEVELING_FEATURE

#if ANY(MESH_BED_LEVELING, AUTO_BED_LEVELING_UBL, PROBE_MANUALLY)
  // Set a height for the start of manual adjustment
  #define MANUAL_PROBE_START_Z 0.2  // (mm) Comment out to use the last-measured height
#endif

#if ANY(MESH_BED_LEVELING, AUTO_BED_LEVELING_BILINEAR, AUTO_BED_LEVELING_UBL)
  /**
   * Gradually reduce leveling correction until a set height is reached,
   * at which point movement will be level to the machine's XY plane.
   * The height can be set with M420 Z<height>
   */
  #define ENABLE_LEVELING_FADE_HEIGHT
  #if ENABLED(ENABLE_LEVELING_FADE_HEIGHT)
    #define DEFAULT_LEVELING_FADE_HEIGHT 2.0 // (mm) Default fade height.
  #endif

  /**
   * For Cartesian machines, instead of dividing moves on mesh boundaries,
   * split up moves into short segments like a Delta. This follows the
   * contours of the bed more closely than edge-to-edge straight moves.
   */
  #define SEGMENT_LEVELED_MOVES
  #define LEVELED_SEGMENT_LENGTH 5.0 // (mm) Length of all segments (except the last one)

  /**
   * Enable the G26 Mesh Validation Pattern tool.
   */
  #define G26_MESH_VALIDATION
  #if ENABLED(G26_MESH_VALIDATION)
    #define MESH_TEST_NOZZLE_SIZE    0.4  // (mm) Diameter of primary nozzle.
    #define MESH_TEST_LAYER_HEIGHT   0.2  // (mm) Default layer height for G26.
    #define MESH_TEST_HOTEND_TEMP  210    // (¬∞C) Default nozzle temperature for G26.
    #define MESH_TEST_BED_TEMP      60    // (¬∞C) Default bed temperature for G26.
    #define G26_XY_FEEDRATE         20    // (mm/s) Feedrate for G26 XY moves.
    #define G26_XY_FEEDRATE_TRAVEL 100    // (mm/s) Feedrate for G26 XY travel moves.
    #define G26_RETRACT_MULTIPLIER   1.0  // G26 Q (retraction) used by default between mesh test elements.
  #endif

#endif

#if ANY(AUTO_BED_LEVELING_LINEAR, AUTO_BED_LEVELING_BILINEAR)

  // Set the number of grid points per dimension.
  #define GRID_MAX_POINTS_X 7
  #define GRID_MAX_POINTS_Y GRID_MAX_POINTS_X

  // Probe along the Y axis, advancing X after each column
  //#define PROBE_Y_FIRST

  #if ENABLED(AUTO_BED_LEVELING_BILINEAR)

    // Beyond the probed grid, continue the implied tilt?
    // Default is to maintain the height of the nearest edge.
    #define EXTRAPOLATE_BEYOND_GRID

    //
    // Subdivision of the grid by Catmull-Rom method.
    // Synthesizes intermediate points to produce a more detailed mesh.
    //
    //#define ABL_BILINEAR_SUBDIVISION
    #if ENABLED(ABL_BILINEAR_SUBDIVISION)
      // Number of subdivisions between probe points
      #define BILINEAR_SUBDIVISIONS 3
    #endif

  #endif

#elif ENABLED(AUTO_BED_LEVELING_UBL)

  //===========================================================================
  //========================= Unified Bed Leveling ============================
  //===========================================================================

  //#define MESH_EDIT_GFX_OVERLAY   // Display a graphics overlay while editing the mesh

  #define MESH_INSET 1              // Set Mesh bounds as an inset region of the bed
  #define GRID_MAX_POINTS_X 10      // Don't use more than 15 points per axis, implementation limited.
  #define GRID_MAX_POINTS_Y GRID_MAX_POINTS_X

  //#define UBL_HILBERT_CURVE       // Use Hilbert distribution for less travel when probing multiple points

  //#define UBL_TILT_ON_MESH_POINTS         // Use nearest mesh points with G29 J for better Z reference
  //#define UBL_TILT_ON_MESH_POINTS_3POINT  // Use nearest mesh points with G29 J0 (3-point)

  #define UBL_MESH_EDIT_MOVES_Z     // Sophisticated users prefer no movement of nozzle
  #define UBL_SAVE_ACTIVE_ON_M500   // Save the currently active mesh in the current slot on M500

  //#define UBL_Z_RAISE_WHEN_OFF_MESH 2.5 // When the nozzle is off the mesh, this value is used
                                          // as the Z-Height correction value.

  //#define UBL_MESH_WIZARD         // Run several commands in a row to get a complete mesh

  /**
   * Probing not allowed within the position of an obstacle.
   */
  //#define AVOID_OBSTACLES
  #if ENABLED(AVOID_OBSTACLES)
    #define CLIP_W  23  // Bed clip width, should be padded a few mm over its physical size
    #define CLIP_H  14  // Bed clip height, should be padded a few mm over its physical size

    // Obstacle Rectangles defined as { X1, Y1, X2, Y2 }
    #define OBSTACLE1 { (X_BED_SIZE) / 4     - (CLIP_W) / 2,                       0, (X_BED_SIZE) / 4     + (CLIP_W) / 2, CLIP_H }
    #define OBSTACLE2 { (X_BED_SIZE) * 3 / 4 - (CLIP_W) / 2,                       0, (X_BED_SIZE) * 3 / 4 + (CLIP_W) / 2, CLIP_H }
    #define OBSTACLE3 { (X_BED_SIZE) / 4     - (CLIP_W) / 2, (Y_BED_SIZE) - (CLIP_H), (X_BED_SIZE) / 4     + (CLIP_W) / 2, Y_BED_SIZE }
    #define OBSTACLE4 { (X_BED_SIZE) * 3 / 4 - (CLIP_W) / 2, (Y_BED_SIZE) - (CLIP_H), (X_BED_SIZE) * 3 / 4 + (CLIP_W) / 2, Y_BED_SIZE }

    // The probed grid must be inset for G29 J. This is okay, since it is
    // only used to compute a linear transformation for the mesh itself.
    #define G29J_MESH_TILT_MARGIN ((CLIP_H) + 1)
  #endif

#elif ENABLED(MESH_BED_LEVELING)

  //===========================================================================
  //=================================== Mesh ==================================
  //===========================================================================

  #define MESH_INSET 10          // Set Mesh bounds as an inset region of the bed
  #define GRID_MAX_POINTS_X 3    // Don't use more than 7 points per axis, implementation limited.
  #define GRID_MAX_POINTS_Y GRID_MAX_POINTS_X

  //#define MESH_G28_REST_ORIGIN // After homing all axes ('G28' or 'G28 XYZ') rest Z at Z_MIN_POS

#endif // BED_LEVELING

/**
 * Add a bed leveling sub-menu for ABL or MBL.
 * Include a guided procedure if manual probing is enabled.
 */
#define LCD_BED_LEVELING

#if ENABLED(LCD_BED_LEVELING)
  #define MESH_EDIT_Z_STEP  0.025 // (mm) Step size while manually probing Z axis.
  #define LCD_PROBE_Z_RANGE 4     // (mm) Z Range centered on Z_MIN_POS for LCD Z adjustment
  #define MESH_EDIT_MENU        // Add a menu to edit mesh points
#endif

// Add a menu item to move between bed corners for manual bed adjustment
#define LCD_BED_TRAMMING

#if ENABLED(LCD_BED_TRAMMING)
  #define BED_TRAMMING_INSET_LFRB { 30, 30, 30, 30 } // (mm) Left, Front, Right, Back insets
  #define BED_TRAMMING_HEIGHT      0.0        // (mm) Z height of nozzle at tramming points
  #define BED_TRAMMING_Z_HOP       4.0        // (mm) Z height of nozzle between tramming points
  //#define BED_TRAMMING_INCLUDE_CENTER       // Move to the center after the last corner
  //#define BED_TRAMMING_USE_PROBE
  #if ENABLED(BED_TRAMMING_USE_PROBE)
    #define BED_TRAMMING_PROBE_TOLERANCE 0.1  // (mm)
    #define BED_TRAMMING_VERIFY_RAISED        // After adjustment triggers the probe, re-probe to verify
    //#define BED_TRAMMING_AUDIO_FEEDBACK
  #endif

  /**
   * Corner Leveling Order
   *
   * Set 2 or 4 points. When 2 points are given, the 3rd is the center of the opposite edge.
   *
   *  LF  Left-Front    RF  Right-Front
   *  LB  Left-Back     RB  Right-Back
   *
   * Examples:
   *
   *      Default        {LF,RB,LB,RF}         {LF,RF}           {LB,LF}
   *  LB --------- RB   LB --------- RB    LB --------- RB   LB --------- RB
   *  |  4       3  |   | 3         2 |    |     <3>     |   | 1           |
   *  |             |   |             |    |             |   |          <3>|
   *  |  1       2  |   | 1         4 |    | 1         2 |   | 2           |
   *  LF --------- RF   LF --------- RF    LF --------- RF   LF --------- RF
   */
  #define BED_TRAMMING_LEVELING_ORDER { LF, RF, RB, LB }
#endif

// @section homing

// The center of the bed is at (X=0, Y=0)
//#define BED_CENTER_AT_0_0

// Manually set the home position. Leave these undefined for automatic settings.
// For DELTA this is the top-center of the Cartesian print volume.
//#define MANUAL_X_HOME_POS 0
//#define MANUAL_Y_HOME_POS 0
//#define MANUAL_Z_HOME_POS 0
//#define MANUAL_I_HOME_POS 0
//#define MANUAL_J_HOME_POS 0
//#define MANUAL_K_HOME_POS 0
//#define MANUAL_U_HOME_POS 0
//#define MANUAL_V_HOME_POS 0
//#define MANUAL_W_HOME_POS 0

/**
 * Use ""Z Safe Homing"" to avoid homing with a Z probe outside the bed area.
 *
 * - Moves the Z probe (or nozzle) to a defined XY point before Z homing.
 * - Allows Z homing only when XY positions are known and trusted.
 * - If stepper drivers sleep, XY homing may be required again before Z homing.
 */
#define Z_SAFE_HOMING

#if ENABLED(Z_SAFE_HOMING)
  #define Z_SAFE_HOMING_X_POINT X_CENTER  // (mm) X point for Z homing
  #define Z_SAFE_HOMING_Y_POINT Y_CENTER  // (mm) Y point for Z homing
  //#define Z_SAFE_HOMING_POINT_ABSOLUTE  // Ignore home offsets (M206) for Z homing position
#endif

// Homing speeds (linear=mm/min, rotational=¬∞/min)
#define HOMING_FEEDRATE_MM_M { (80*60), (80*60), (4*60) }

// Validate that endstops are triggered on homing moves
#define VALIDATE_HOMING_ENDSTOPS

// @section calibrate

/**
 * Bed Skew Compensation
 *
 * This feature corrects for misalignment in the XYZ axes.
 *
 * Take the following steps to get the bed skew in the XY plane:
 *  1. Print a test square (e.g., https://www.thingiverse.com/thing:2563185)
 *  2. For XY_DIAG_AC measure the diagonal A to C
 *  3. For XY_DIAG_BD measure the diagonal B to D
 *  4. For XY_SIDE_AD measure the edge A to D
 *
 * Marlin automatically computes skew factors from these measurements.
 * Skew factors may also be computed and set manually:
 *
 *  - Compute AB     : SQRT(2*AC*AC+2*BD*BD-4*AD*AD)/2
 *  - XY_SKEW_FACTOR : TAN(PI/2-ACOS((AC*AC-AB*AB-AD*AD)/(2*AB*AD)))
 *
 * If desired, follow the same procedure for XZ and YZ.
 * Use these diagrams for reference:
 *
 *    Y                     Z                     Z
 *    ^     B-------C       ^     B-------C       ^     B-------C
 *    |    /       /        |    /       /        |    /       /
 *    |   /       /         |   /       /         |   /       /
 *    |  A-------D          |  A-------D          |  A-------D
 *    +-------------->X     +-------------->X     +-------------->Y
 *     XY_SKEW_FACTOR        XZ_SKEW_FACTOR        YZ_SKEW_FACTOR
 */
//#define SKEW_CORRECTION

#if ENABLED(SKEW_CORRECTION)
  // Input all length measurements here:
  #define XY_DIAG_AC 282.8427124746
  #define XY_DIAG_BD 282.8427124746
  #define XY_SIDE_AD 200

  // Or, set the XY skew factor directly:
  #define XY_SKEW_FACTOR 0.0

  //#define SKEW_CORRECTION_FOR_Z
  #if ENABLED(SKEW_CORRECTION_FOR_Z)
    #define XZ_DIAG_AC 282.8427124746
    #define XZ_DIAG_BD 282.8427124746
    #define YZ_DIAG_AC 282.8427124746
    #define YZ_DIAG_BD 282.8427124746
    #define YZ_SIDE_AD 200

    // Or, set the Z skew factors directly:
    #define XZ_SKEW_FACTOR 0.0
    #define YZ_SKEW_FACTOR 0.0
  #endif

  // Enable this option for M852 to set skew at runtime
  //#define SKEW_CORRECTION_GCODE
#endif

//=============================================================================
//============================= Additional Features ===========================
//=============================================================================

// @section eeprom

/**
 * EEPROM
 *
 * Persistent storage to preserve configurable settings across reboots.
 *
 *   M500 - Store settings to EEPROM.
 *   M501 - Read settings from EEPROM. (i.e., Throw away unsaved changes)
 *   M502 - Revert settings to ""factory"" defaults. (Follow with M500 to init the EEPROM.)
 */
#define EEPROM_SETTINGS     // Persistent storage with M500 and M501
//#define DISABLE_M503        // Saves ~2700 bytes of flash. Disable for release!
#define EEPROM_CHITCHAT       // Give feedback on EEPROM commands. Disable to save PROGMEM.
#define EEPROM_BOOT_SILENT    // Keep M503 quiet and only give errors during first load
#if ENABLED(EEPROM_SETTINGS)
  //#define EEPROM_AUTO_INIT  // Init EEPROM automatically on any errors.
  //#define EEPROM_INIT_NOW   // Init EEPROM on first boot after a new build.
#endif

// @section host

//
// Host Keepalive
//
// When enabled Marlin will send a busy status message to the host
// every couple of seconds when it can't accept commands.
//
#define HOST_KEEPALIVE_FEATURE        // Disable this if your host doesn't like keepalive messages
#define DEFAULT_KEEPALIVE_INTERVAL 2  // Number of seconds between ""busy"" messages. Set with M113.
#define BUSY_WHILE_HEATING            // Some hosts require ""busy"" messages even during heating

// @section units

//
// G20/G21 Inch mode support
//
//#define INCH_MODE_SUPPORT

//
// M149 Set temperature units support
//
//#define TEMPERATURE_UNITS_SUPPORT

// @section temperature

//
// Preheat Constants - Up to 10 are supported without changes
//
#define PREHEAT_1_LABEL       ""PLA""
#define PREHEAT_1_TEMP_HOTEND 210
#define PREHEAT_1_TEMP_BED     60
//#define PREHEAT_1_TEMP_CHAMBER 35
#define PREHEAT_1_FAN_SPEED     0 // Value from 0 to 255

#define PREHEAT_2_LABEL       ""PETG""
#define PREHEAT_2_TEMP_HOTEND 250
#define PREHEAT_2_TEMP_BED     75
//#define PREHEAT_2_TEMP_CHAMBER 35
#define PREHEAT_2_FAN_SPEED    0 // Value from 0 to 255

// @section motion

/**
 * Nozzle Park
 *
 * Park the nozzle at the given XYZ position on idle or G27.
 *
 * The ""P"" parameter controls the action applied to the Z axis:
 *
 *    P0  (Default) If Z is below park Z raise the nozzle.
 *    P1  Raise the nozzle always to Z-park height.
 *    P2  Raise the nozzle by Z-park amount, limited to Z_MAX_POS.
 */
#define NOZZLE_PARK_FEATURE

#if ENABLED(NOZZLE_PARK_FEATURE)
  // Specify a park position as { X, Y, Z_raise }
  #define NOZZLE_PARK_POINT { (X_MIN_POS + 10), (Y_MAX_POS - 10), 20 }
  #define NOZZLE_PARK_MOVE          0   // Park motion: 0 = XY Move, 1 = X Only, 2 = Y Only, 3 = X before Y, 4 = Y before X
  #define NOZZLE_PARK_Z_RAISE_MIN   2   // (mm) Always raise Z by at least this distance
  #define NOZZLE_PARK_XY_FEEDRATE 100   // (mm/s) X and Y axes feedrate (also used for delta Z axis)
  #define NOZZLE_PARK_Z_FEEDRATE    5   // (mm/s) Z axis feedrate (not used for delta printers)
#endif

/**
 * Clean Nozzle Feature
 *
 * Adds the G12 command to perform a nozzle cleaning process.
 *
 * Parameters:
 *   P  Pattern
 *   S  Strokes / Repetitions
 *   T  Triangles (P1 only)
 *
 * Patterns:
 *   P0  Straight line (default). This process requires a sponge type material
 *       at a fixed bed location. ""S"" specifies strokes (i.e. back-forth motions)
 *       between the start / end points.
 *
 *   P1  Zig-zag pattern between (X0, Y0) and (X1, Y1), ""T"" specifies the
 *       number of zig-zag triangles to do. ""S"" defines the number of strokes.
 *       Zig-zags are done in whichever is the narrower dimension.
 *       For example, ""G12 P1 S1 T3"" will execute:
 *
 *          --
 *         |  (X0, Y1) |     /\        /\        /\     | (X1, Y1)
 *         |           |    /  \      /  \      /  \    |
 *       A |           |   /    \    /    \    /    \   |
 *         |           |  /      \  /      \  /      \  |
 *         |  (X0, Y0) | /        \/        \/        \ | (X1, Y0)
 *          --         +--------------------------------+
 *                       |________|_________|_________|
 *                           T1        T2        T3
 *
 *   P2  Circular pattern with middle at NOZZLE_CLEAN_CIRCLE_MIDDLE.
 *       ""R"" specifies the radius. ""S"" specifies the stroke count.
 *       Before starting, the nozzle moves to NOZZLE_CLEAN_START_POINT.
 *
 *   Caveats: The ending Z should be the same as starting Z.
 */
//#define NOZZLE_CLEAN_FEATURE

#if ENABLED(NOZZLE_CLEAN_FEATURE)
  #define NOZZLE_CLEAN_PATTERN_LINE     // Provide 'G12 P0' - a simple linear cleaning pattern
  #define NOZZLE_CLEAN_PATTERN_ZIGZAG   // Provide 'G12 P1' - a zigzag cleaning pattern
  #define NOZZLE_CLEAN_PATTERN_CIRCLE   // Provide 'G12 P2' - a circular cleaning pattern

  // Default pattern to use when 'P' is not provided to G12. One of the enabled options above.
  #define NOZZLE_CLEAN_DEFAULT_PATTERN 0

  #define NOZZLE_CLEAN_STROKES     12   // Default number of pattern repetitions

  #if ENABLED(NOZZLE_CLEAN_PATTERN_ZIGZAG)
    #define NOZZLE_CLEAN_TRIANGLES  3   // Default number of triangles
  #endif

  // Specify positions for each tool as { { X, Y, Z }, { X, Y, Z } }
  // Dual hotend system may use { {  -20, (Y_BED_SIZE / 2), (Z_MIN_POS + 1) },  {  420, (Y_BED_SIZE / 2), (Z_MIN_POS + 1) }}
  #define NOZZLE_CLEAN_START_POINT { {  30, 30, (Z_MIN_POS + 1) } }
  #define NOZZLE_CLEAN_END_POINT   { { 100, 60, (Z_MIN_POS + 1) } }

  #if ENABLED(NOZZLE_CLEAN_PATTERN_CIRCLE)
    #define NOZZLE_CLEAN_CIRCLE_RADIUS 6.5                      // (mm) Circular pattern radius
    #define NOZZLE_CLEAN_CIRCLE_FN 10                           // Circular pattern circle number of segments
    #define NOZZLE_CLEAN_CIRCLE_MIDDLE NOZZLE_CLEAN_START_POINT // Middle point of circle
  #endif

  // Move the nozzle to the initial position after cleaning
  #define NOZZLE_CLEAN_GOBACK

  // For a purge/clean station that's always at the gantry height (thus no Z move)
  //#define NOZZLE_CLEAN_NO_Z

  // For a purge/clean station mounted on the X axis
  //#define NOZZLE_CLEAN_NO_Y

  // Require a minimum hotend temperature for cleaning
  #define NOZZLE_CLEAN_MIN_TEMP 170
  //#define NOZZLE_CLEAN_HEATUP       // Heat up the nozzle instead of skipping wipe

  // Explicit wipe G-code script applies to a G12 with no arguments.
  //#define WIPE_SEQUENCE_COMMANDS ""G1 X-17 Y25 Z10 F4000\nG1 Z1\nM114\nG1 X-17 Y25\nG1 X-17 Y95\nG1 X-17 Y25\nG1 X-17 Y95\nG1 X-17 Y25\nG1 X-17 Y95\nG1 X-17 Y25\nG1 X-17 Y95\nG1 X-17 Y25\nG1 X-17 Y95\nG1 X-17 Y25\nG1 X-17 Y95\nG1 Z15\nM400\nG0 X-10.0 Y-9.0""

#endif

// @section host

/**
 * Print Job Timer
 *
 * Automatically start and stop the print job timer on M104/M109/M140/M190/M141/M191.
 * The print job timer will only be stopped if the bed/chamber target temp is
 * below BED_MINTEMP/CHAMBER_MINTEMP.
 *
 *   M104 (hotend, no wait)  - high temp = none,        low temp = stop timer
 *   M109 (hotend, wait)     - high temp = start timer, low temp = stop timer
 *   M140 (bed, no wait)     - high temp = none,        low temp = stop timer
 *   M190 (bed, wait)        - high temp = start timer, low temp = none
 *   M141 (chamber, no wait) - high temp = none,        low temp = stop timer
 *   M191 (chamber, wait)    - high temp = start timer, low temp = none
 *
 * For M104/M109, high temp is anything over EXTRUDE_MINTEMP / 2.
 * For M140/M190, high temp is anything over BED_MINTEMP.
 * For M141/M191, high temp is anything over CHAMBER_MINTEMP.
 *
 * The timer can also be controlled with the following commands:
 *
 *   M75 - Start the print job timer
 *   M76 - Pause the print job timer
 *   M77 - Stop the print job timer
 */
#define PRINTJOB_TIMER_AUTOSTART

// @section stats

/**
 * Print Counter
 *
 * Track statistical data such as:
 *
 *  - Total print jobs
 *  - Total successful print jobs
 *  - Total failed print jobs
 *  - Total time printing
 *
 * View the current statistics with M78.
 */
#define PRINTCOUNTER
#if ENABLED(PRINTCOUNTER)
  #define PRINTCOUNTER_SAVE_INTERVAL 60 // (minutes) EEPROM save interval during print. A value of 0 will save stats at end of print.
#endif

// @section security

/**
 * Password
 *
 * Set a numerical password for the printer which can be requested:
 *
 *  - When the printer boots up
 *  - Upon opening the 'Print from Media' Menu
 *  - When SD printing is completed or aborted
 *
 * The following G-codes can be used:
 *
 *  M510 - Lock Printer. Blocks all commands except M511.
 *  M511 - Unlock Printer.
 *  M512 - Set, Change and Remove Password.
 *
 * If you forget the password and get locked out you'll need to re-flash
 * the firmware with the feature disabled, reset EEPROM, and (optionally)
 * re-flash the firmware again with this feature enabled.
 */
//#define PASSWORD_FEATURE
#if ENABLED(PASSWORD_FEATURE)
  #define PASSWORD_LENGTH 4                 // (#) Number of digits (1-9). 3 or 4 is recommended
  #define PASSWORD_ON_STARTUP
  #define PASSWORD_UNLOCK_GCODE             // Unlock with the M511 P<password> command. Disable to prevent brute-force attack.
  #define PASSWORD_CHANGE_GCODE             // Change the password with M512 P<old> S<new>.
  //#define PASSWORD_ON_SD_PRINT_MENU       // This does not prevent G-codes from running
  //#define PASSWORD_AFTER_SD_PRINT_END
  //#define PASSWORD_AFTER_SD_PRINT_ABORT
  //#include ""Configuration_Secure.h""       // External file with PASSWORD_DEFAULT_VALUE
#endif

//=============================================================================
//============================= LCD and SD support ============================
//=============================================================================

// @section interface

/**
 * LCD LANGUAGE
 *
 * Select the language to display on the LCD. These languages are available:
 *
 *   en, an, bg, ca, cz, da, de, el, el_CY, es, eu, fi, fr, gl, hr, hu, it,
 *   jp_kana, ko_KR, nl, pl, pt, pt_br, ro, ru, sk, sv, tr, uk, vi, zh_CN, zh_TW
 *
 * :{ 'en':'English', 'an':'Aragonese', 'bg':'Bulgarian', 'ca':'Catalan', 'cz':'Czech', 'da':'Danish', 'de':'German', 'el':'Greek (Greece)', 'el_CY':'Greek (Cyprus)', 'es':'Spanish', 'eu':'Basque-Euskera', 'fi':'Finnish', 'fr':'French', 'gl':'Galician', 'hr':'Croatian', 'hu':'Hungarian', 'it':'Italian', 'jp_kana':'Japanese', 'ko_KR':'Korean (South Korea)', 'nl':'Dutch', 'pl':'Polish', 'pt':'Portuguese', 'pt_br':'Portuguese (Brazilian)', 'ro':'Romanian', 'ru':'Russian', 'sk':'Slovak', 'sv':'Swedish', 'tr':'Turkish', 'uk':'Ukrainian', 'vi':'Vietnamese', 'zh_CN':'Chinese (Simplified)', 'zh_TW':'Chinese (Traditional)' }
 */
#define LCD_LANGUAGE en

/**
 * LCD Character Set
 *
 * Note: This option is NOT applicable to Graphical Displays.
 *
 * All character-based LCDs provide ASCII plus one of these
 * language extensions:
 *
 *  - JAPANESE ... the most common
 *  - WESTERN  ... with more accented characters
 *  - CYRILLIC ... for the Russian language
 *
 * To determine the language extension installed on your controller:
 *
 *  - Compile and upload with LCD_LANGUAGE set to 'test'
 *  - Click the controller to view the LCD menu
 *  - The LCD will display Japanese, Western, or Cyrillic text
 *
 * See https://marlinfw.org/docs/development/lcd_language.html
 *
 * :['JAPANESE', 'WESTERN', 'CYRILLIC']
 */
#define DISPLAY_CHARSET_HD44780 WESTERN

/**
 * Info Screen Style (0:Classic, 1:Pr≈Ø≈°a)
 *
 * :[0:'Classic', 1:'Pr≈Ø≈°a']
 */
#define LCD_INFO_SCREEN_STYLE 0

/**
 * SD CARD
 *
 * SD Card support is disabled by default. If your controller has an SD slot,
 * you must uncomment the following option or it won't work.
 */
#define SDSUPPORT

/**
 * SD CARD: ENABLE CRC
 *
 * Use CRC checks and retries on the SD communication.
 */
#define SD_CHECK_AND_RETRY

/**
 * LCD Menu Items
 *
 * Disable all menus and only display the Status Screen, or
 * just remove some extraneous menu items to recover space.
 */
//#define NO_LCD_MENUS
//#define SLIM_LCD_MENUS

//
// ENCODER SETTINGS
//
// This option overrides the default number of encoder pulses needed to
// produce one step. Should be increased for high-resolution encoders.
//
//#define ENCODER_PULSES_PER_STEP 4

//
// Use this option to override the number of step signals required to
// move between next/prev menu items.
//
//#define ENCODER_STEPS_PER_MENU_ITEM 1

/**
 * Encoder Direction Options
 *
 * Test your encoder's behavior first with both options disabled.
 *
 *  Reversed Value Edit and Menu Nav? Enable REVERSE_ENCODER_DIRECTION.
 *  Reversed Menu Navigation only?    Enable REVERSE_MENU_DIRECTION.
 *  Reversed Value Editing only?      Enable BOTH options.
 */

//
// This option reverses the encoder direction everywhere.
//
//  Set this option if CLOCKWISE causes values to DECREASE
//
//#define REVERSE_ENCODER_DIRECTION

//
// This option reverses the encoder direction for navigating LCD menus.
//
//  If CLOCKWISE normally moves DOWN this makes it go UP.
//  If CLOCKWISE normally moves UP this makes it go DOWN.
//
//#define REVERSE_MENU_DIRECTION

//
// This option reverses the encoder direction for Select Screen.
//
//  If CLOCKWISE normally moves LEFT this makes it go RIGHT.
//  If CLOCKWISE normally moves RIGHT this makes it go LEFT.
//
//#define REVERSE_SELECT_DIRECTION

//
// Encoder EMI Noise Filter
//
// This option increases encoder samples to filter out phantom encoder clicks caused by EMI noise.
//
//#define ENCODER_NOISE_FILTER
#if ENABLED(ENCODER_NOISE_FILTER)
  #define ENCODER_SAMPLES 10
#endif

//
// Individual Axis Homing
//
// Add individual axis homing items (Home X, Home Y, and Home Z) to the LCD menu.
//
#define INDIVIDUAL_AXIS_HOMING_MENU
//#define INDIVIDUAL_AXIS_HOMING_SUBMENU

//
// SPEAKER/BUZZER
//
// If you have a speaker that can produce tones, enable it here.
// By default Marlin assumes you have a buzzer with a fixed frequency.
//
#define SPEAKER

//
// The duration and frequency for the UI feedback sound.
// Set these to 0 to disable audio feedback in the LCD menus.
//
// Note: Test audio output with the G-Code:
//  M300 S<frequency Hz> P<duration ms>
//
//#define LCD_FEEDBACK_FREQUENCY_DURATION_MS 2
//#define LCD_FEEDBACK_FREQUENCY_HZ 5000

//
// Tone queue size, used to keep beeps from blocking execution.
// Default is 4, or override here. Costs 4 bytes of SRAM per entry.
//
//#define TONE_QUEUE_LENGTH 4

//
// A sequence of tones to play at startup, in pairs of tone (Hz), duration (ms).
// Silence in-between tones.
//
//#define STARTUP_TUNE { 698, 300, 0, 50, 523, 50, 0, 25, 494, 50, 0, 25, 523, 100, 0, 50, 554, 300, 0, 100, 523, 300 }

//=============================================================================
//======================== LCD / Controller Selection =========================
//========================   (Character-based LCDs)   =========================
//=============================================================================
// @section lcd

//
// RepRapDiscount Smart Controller.
// https://reprap.org/wiki/RepRapDiscount_Smart_Controller
//
// Note: Usually sold with a white PCB.
//
//#define REPRAP_DISCOUNT_SMART_CONTROLLER

//
// GT2560 (YHCB2004) LCD Display
//
// Requires Testato, Koepel softwarewire library and
// Andriy Golovnya's LiquidCrystal_AIP31068 library.
//
//#define YHCB2004

//
// Original RADDS LCD Display+Encoder+SDCardReader
// https://web.archive.org/web/20200719145306/http://doku.radds.org/dokumentation/lcd-display/
//
//#define RADDS_DISPLAY

//
// ULTIMAKER Controller.
//
//#define ULTIMAKERCONTROLLER

//
// ULTIPANEL as seen on Thingiverse.
//
//#define ULTIPANEL

//
// PanelOne from T3P3 (via RAMPS 1.4 AUX2/AUX3)
// https://reprap.org/wiki/PanelOne
//
//#define PANEL_ONE

//
// GADGETS3D G3D LCD/SD Controller
// https://reprap.org/wiki/RAMPS_1.3/1.4_GADGETS3D_Shield_with_Panel
//
// Note: Usually sold with a blue PCB.
//
//#define G3D_PANEL

//
// RigidBot Panel V1.0
//
//#define RIGIDBOT_PANEL

//
// Makeboard 3D Printer Parts 3D Printer Mini Display 1602 Mini Controller
// https://www.aliexpress.com/item/32765887917.html
//
//#define MAKEBOARD_MINI_2_LINE_DISPLAY_1602

//
// ANET and Tronxy 20x4 Controller
//
//#define ZONESTAR_LCD            // Requires ADC_KEYPAD_PIN to be assigned to an analog pin.
                                  // This LCD is known to be susceptible to electrical interference
                                  // which scrambles the display.  Pressing any button clears it up.
                                  // This is a LCD2004 display with 5 analog buttons.

//
// Generic 16x2, 16x4, 20x2, or 20x4 character-based LCD.
//
//#define ULTRA_LCD

//=============================================================================
//======================== LCD / Controller Selection =========================
//=====================   (I2C and Shift-Register LCDs)   =====================
//=============================================================================

//
// CONTROLLER TYPE: I2C
//
// Note: These controllers require the installation of Arduino's LiquidCrystal_I2C
// library. For more info: https://github.com/kiyoshigawa/LiquidCrystal_I2C
//

//
// Elefu RA Board Control Panel
// https://web.archive.org/web/20140823033947/http://www.elefu.com/index.php?route=product/product&product_id=53
//
//#define RA_CONTROL_PANEL

//
// Sainsmart (YwRobot) LCD Displays
//
// These require LiquidCrystal_I2C library:
//   https://github.com/MarlinFirmware/New-LiquidCrystal
//   https://github.com/fmalpartida/New-LiquidCrystal/wiki
//
//#define LCD_SAINSMART_I2C_1602
//#define LCD_SAINSMART_I2C_2004

//
// Generic LCM1602 LCD adapter
//
//#define LCM1602

//
// PANELOLU2 LCD with status LEDs,
// separate encoder and click inputs.
//
// Note: This controller requires Arduino's LiquidTWI2 library v1.2.3 or later.
// For more info: https://github.com/lincomatic/LiquidTWI2
//
// Note: The PANELOLU2 encoder click input can either be directly connected to
// a pin (if BTN_ENC defined to != -1) or read through I2C (when BTN_ENC == -1).
//
//#define LCD_I2C_PANELOLU2

//
// Panucatt VIKI LCD with status LEDs,
// integrated click & L/R/U/D buttons, separate encoder inputs.
//
//#define LCD_I2C_VIKI

//
// CONTROLLER TYPE: Shift register panels
//

//
// 2-wire Non-latching LCD SR from https://github.com/fmalpartida/New-LiquidCrystal/wiki/schematics#user-content-ShiftRegister_connection
// LCD configuration: https://reprap.org/wiki/SAV_3D_LCD
//
//#define SAV_3DLCD

//
// 3-wire SR LCD with strobe using 74HC4094
// https://github.com/mikeshub/SailfishLCD
// Uses the code directly from Sailfish
//
//#define FF_INTERFACEBOARD

//
// TFT GLCD Panel with Marlin UI
// Panel connected to main board by SPI or I2C interface.
// See https://github.com/Serhiy-K/TFTGLCDAdapter
//
//#define TFTGLCD_PANEL_SPI
//#define TFTGLCD_PANEL_I2C

//=============================================================================
//=======================   LCD / Controller Selection  =======================
//=========================      (Graphical LCDs)      ========================
//=============================================================================

//
// CONTROLLER TYPE: Graphical 128x64 (DOGM)
//
// IMPORTANT: The U8glib library is required for Graphical Display!
//            https://github.com/olikraus/U8glib_Arduino
//
// NOTE: If the LCD is unresponsive you may need to reverse the plugs.
//

//
// RepRapDiscount FULL GRAPHIC Smart Controller
// https://reprap.org/wiki/RepRapDiscount_Full_Graphic_Smart_Controller
//
//#define REPRAP_DISCOUNT_FULL_GRAPHIC_SMART_CONTROLLER

//
// K.3D Full Graphic Smart Controller
//
//#define K3D_FULL_GRAPHIC_SMART_CONTROLLER

//
// ReprapWorld Graphical LCD
// https://reprapworld.com/electronics/3d-printer-modules/autonomous-printing/graphical-lcd-screen-v1-0/
//
//#define REPRAPWORLD_GRAPHICAL_LCD

//
// Activate one of these if you have a Panucatt Devices
// Viki 2.0 or mini Viki with Graphic LCD
// https://www.panucatt.com
//
//#define VIKI2
//#define miniVIKI

//
// Alfawise Ex8 printer LCD marked as WYH L12864 COG
//
//#define WYH_L12864

//
// MakerLab Mini Panel with graphic
// controller and SD support - https://reprap.org/wiki/Mini_panel
//
//#define MINIPANEL

//
// MaKr3d Makr-Panel with graphic controller and SD support.
// https://reprap.org/wiki/MaKrPanel
//
//#define MAKRPANEL

//
// Adafruit ST7565 Full Graphic Controller.
// https://github.com/eboston/Adafruit-ST7565-Full-Graphic-Controller/
//
//#define ELB_FULL_GRAPHIC_CONTROLLER

//
// BQ LCD Smart Controller shipped by
// default with the BQ Hephestos 2 and Witbox 2.
//
//#define BQ_LCD_SMART_CONTROLLER

//
// Cartesio UI
// https://web.archive.org/web/20180605050442/http://mauk.cc/webshop/cartesio-shop/electronics/user-interface
//
//#define CARTESIO_UI

//
// LCD for Melzi Card with Graphical LCD
//
//#define LCD_FOR_MELZI

//
// Original Ulticontroller from Ultimaker 2 printer with SSD1309 I2C display and encoder
// https://github.com/Ultimaker/Ultimaker2/tree/master/1249_Ulticontroller_Board_(x1)
//
//#define ULTI_CONTROLLER

//
// MKS MINI12864 with graphic controller and SD support
// https://reprap.org/wiki/MKS_MINI_12864
//
//#define MKS_MINI_12864

//
// MKS MINI12864 V3 is an alias for FYSETC_MINI_12864_2_1. Type A/B. NeoPixel RGB Backlight.
//
//#define MKS_MINI_12864_V3

//
// MKS LCD12864A/B with graphic controller and SD support. Follows MKS_MINI_12864 pinout.
// https://www.aliexpress.com/item/33018110072.html
//
//#define MKS_LCD12864A
//#define MKS_LCD12864B

//
// FYSETC variant of the MINI12864 graphic controller with SD support
// https://wiki.fysetc.com/Mini12864_Panel/
//
//#define FYSETC_MINI_12864_X_X    // Type C/D/E/F. No tunable RGB Backlight by default
//#define FYSETC_MINI_12864_1_2    // Type C/D/E/F. Simple RGB Backlight (always on)
//#define FYSETC_MINI_12864_2_0    // Type A/B. Discreet RGB Backlight
//#define FYSETC_MINI_12864_2_1    // Type A/B. NeoPixel RGB Backlight
//#define FYSETC_GENERIC_12864_1_1 // Larger display with basic ON/OFF backlight.

//
// BigTreeTech Mini 12864 V1.0 / V2.0 is an alias for FYSETC_MINI_12864_2_1. Type A/B. NeoPixel RGB Backlight.
// https://github.com/bigtreetech/MINI-12864
//
//#define BTT_MINI_12864

//
// Factory display for Creality CR-10 / CR-7 / Ender-3
// https://www.aliexpress.com/item/32833148327.html
//
// Connect to EXP1 on RAMPS and compatible boards.
//
#define CR10_STOCKDISPLAY

//
// Ender-2 OEM display, a variant of the MKS_MINI_12864
//
//#define ENDER2_STOCKDISPLAY

//
// ANET and Tronxy Graphical Controller
//
// Anet 128x64 full graphics lcd with rotary encoder as used on Anet A6
// A clone of the RepRapDiscount full graphics display but with
// different pins/wiring (see pins_ANET_10.h). Enable one of these.
//
//#define ANET_FULL_GRAPHICS_LCD
//#define ANET_FULL_GRAPHICS_LCD_ALT_WIRING

//
// AZSMZ 12864 LCD with SD
// https://www.aliexpress.com/item/32837222770.html
//
//#define AZSMZ_12864

//
// Silvergate GLCD controller
// https://github.com/android444/Silvergate
//
//#define SILVER_GATE_GLCD_CONTROLLER

//
// eMotion Tech LCD with SD
// https://www.reprap-france.com/produit/1234568748-ecran-graphique-128-x-64-points-2-1
//
//#define EMOTION_TECH_LCD

//=============================================================================
//==============================  OLED Displays  ==============================
//=============================================================================

//
// SSD1306 OLED full graphics generic display
//
//#define U8GLIB_SSD1306

//
// SAV OLEd LCD module support using either SSD1306 or SH1106 based LCD modules
//
//#define SAV_3DGLCD
#if ENABLED(SAV_3DGLCD)
  #define U8GLIB_SSD1306
  //#define U8GLIB_SH1106
#endif

//
// TinyBoy2 128x64 OLED / Encoder Panel
//
//#define OLED_PANEL_TINYBOY2

//
// MKS OLED 1.3"" 128√ó64 Full Graphics Controller
// https://reprap.org/wiki/MKS_12864OLED
//
// Tiny, but very sharp OLED display
//
//#define MKS_12864OLED          // Uses the SH1106 controller (default)
//#define MKS_12864OLED_SSD1306  // Uses the SSD1306 controller

//
// Zonestar OLED 128√ó64 Full Graphics Controller
//
//#define ZONESTAR_12864LCD           // Graphical (DOGM) with ST7920 controller
//#define ZONESTAR_12864OLED          // 1.3"" OLED with SH1106 controller (default)
//#define ZONESTAR_12864OLED_SSD1306  // 0.96"" OLED with SSD1306 controller

//
// Einstart S OLED SSD1306
//
//#define U8GLIB_SH1106_EINSTART

//
// Overlord OLED display/controller with i2c buzzer and LEDs
//
//#define OVERLORD_OLED

//
// FYSETC OLED 2.42"" 128√ó64 Full Graphics Controller with WS2812 RGB
// Where to find : https://www.aliexpress.com/item/4000345255731.html
//#define FYSETC_242_OLED_12864   // Uses the SSD1309 controller

//
// K.3D SSD1309 OLED 2.42"" 128√ó64 Full Graphics Controller
//
//#define K3D_242_OLED_CONTROLLER   // Software SPI

//=============================================================================
//========================== Extensible UI Displays ===========================
//=============================================================================

/**
 * DGUS Touch Display with DWIN OS. (Choose one.)
 *
 * ORIGIN (Marlin DWIN_SET)
 *  - Download https://github.com/coldtobi/Marlin_DGUS_Resources
 *  - Copy the downloaded DWIN_SET folder to the SD card.
 *  - Product: https://www.aliexpress.com/item/32993409517.html
 *
 * FYSETC (Supplier default)
 *  - Download https://github.com/FYSETC/FYSTLCD-2.0
 *  - Copy the downloaded SCREEN folder to the SD card.
 *  - Product: https://www.aliexpress.com/item/32961471929.html
 *
 * HIPRECY (Supplier default)
 *  - Download https://github.com/HiPrecy/Touch-Lcd-LEO
 *  - Copy the downloaded DWIN_SET folder to the SD card.
 *
 * MKS (MKS-H43) (Supplier default)
 *  - Download https://github.com/makerbase-mks/MKS-H43
 *  - Copy the downloaded DWIN_SET folder to the SD card.
 *  - Product: https://www.aliexpress.com/item/1005002008179262.html
 *
 * RELOADED (T5UID1)
 *  - Download https://github.com/Neo2003/DGUS-reloaded/releases
 *  - Copy the downloaded DWIN_SET folder to the SD card.
 *
 * IA_CREALITY (T5UID1)
 *  - Download https://github.com/InsanityAutomation/Marlin/raw/CrealityDwin_2.0/TM3D_Combined480272_Landscape_V7.7z
 *  - Copy the downloaded DWIN_SET folder to the SD card.
 *
 * E3S1PRO (T5L)
 *  - Download https://github.com/CrealityOfficial/Ender-3S1/archive/3S1_Plus_Screen.zip
 *  - Copy the downloaded DWIN_SET folder to the SD card.
 *
 * Flash display with DGUS Displays for Marlin:
 *  - Format the SD card to FAT32 with an allocation size of 4kb.
 *  - Download files as specified for your type of display.
 *  - Plug the microSD card into the back of the display.
 *  - Boot the display and wait for the update to complete.
 *
 * :[ 'ORIGIN', 'FYSETC', 'HYPRECY', 'MKS', 'RELOADED', 'IA_CREALITY', 'E3S1PRO' ]
 */
//#define DGUS_LCD_UI ORIGIN
#if DGUS_UI_IS(MKS)
  #define USE_MKS_GREEN_UI
#elif DGUS_UI_IS(IA_CREALITY)
  //#define LCD_SCREEN_ROTATE 90          // Portrait Mode or 800x480 displays
  //#define IA_CREALITY_BOOT_DELAY 1500   // (ms)
#endif

//
// Touch-screen LCD for Malyan M200/M300 printers
//
//#define MALYAN_LCD

//
// Touch UI for FTDI EVE (FT800/FT810) displays
// See Configuration_adv.h for all configuration options.
//
//#define TOUCH_UI_FTDI_EVE

//
// Touch-screen LCD for Anycubic Chiron
//
//#define ANYCUBIC_LCD_CHIRON

//
// Touch-screen LCD for Anycubic i3 Mega
//
//#define ANYCUBIC_LCD_I3MEGA
#if ENABLED(ANYCUBIC_LCD_I3MEGA)
  //#define ANYCUBIC_LCD_GCODE_EXT  // Add "".gcode"" to menu entries for DGUS clone compatibility
#endif

//
// Touch-screen LCD for Anycubic Vyper
//
//#define ANYCUBIC_LCD_VYPER

//
// 320x240 Nextion 2.8"" serial TFT Resistive Touch Screen NX3224T028
//
//#define NEXTION_TFT

//
// Third-party or vendor-customized controller interfaces.
// Sources should be installed in 'src/lcd/extui'.
//
//#define EXTENSIBLE_UI

#if ENABLED(EXTENSIBLE_UI)
  //#define EXTUI_LOCAL_BEEPER // Enables use of local Beeper pin with external display
#endif

//=============================================================================
//=============================== Graphical TFTs ==============================
//=============================================================================

/**
 * Specific TFT Model Presets. Enable one of the following options
 * or enable TFT_GENERIC and set sub-options.
 */

//
// 480x320, 3.5"", SPI Display with Rotary Encoder from MKS
// Usually paired with MKS Robin Nano V2 & V3
// https://github.com/makerbase-mks/MKS-TFT-Hardware/tree/master/MKS%20TS35
//
//#define MKS_TS35_V2_0

//
// 320x240, 2.4"", FSMC Display From MKS
// Usually paired with MKS Robin Nano V1.2
//
//#define MKS_ROBIN_TFT24

//
// 320x240, 2.8"", FSMC Display From MKS
// Usually paired with MKS Robin Nano V1.2
//
//#define MKS_ROBIN_TFT28

//
// 320x240, 3.2"", FSMC Display From MKS
// Usually paired with MKS Robin Nano V1.2
//
//#define MKS_ROBIN_TFT32

//
// 480x320, 3.5"", FSMC Display From MKS
// Usually paired with MKS Robin Nano V1.2
//
//#define MKS_ROBIN_TFT35

//
// 480x272, 4.3"", FSMC Display From MKS
//
//#define MKS_ROBIN_TFT43

//
// 320x240, 3.2"", FSMC Display From MKS
// Usually paired with MKS Robin
//
//#define MKS_ROBIN_TFT_V1_1R

//
// 480x320, 3.5"", FSMC Stock Display from Tronxy
//
//#define TFT_TRONXY_X5SA

//
// 480x320, 3.5"", FSMC Stock Display from AnyCubic
//
//#define ANYCUBIC_TFT35

//
// 320x240, 2.8"", FSMC Stock Display from Longer/Alfawise
//
//#define LONGER_LK_TFT28

//
// 320x240, 2.8"", FSMC Stock Display from ET4
//
//#define ANET_ET4_TFT28

//
// 480x320, 3.5"", FSMC Stock Display from ET5
//
//#define ANET_ET5_TFT35

//
// 1024x600, 7"", RGB Stock Display with Rotary Encoder from BIQU BX
// https://github.com/bigtreetech/BIQU-BX/tree/master/Hardware
//
//#define BIQU_BX_TFT70

//
// 480x320, 3.5"", SPI Stock Display with Rotary Encoder from BIQU B1 SE Series
// https://github.com/bigtreetech/TFT35-SPI/tree/master/v1
//
//#define BTT_TFT35_SPI_V1_0

//
// Generic TFT with detailed options
//
//#define TFT_GENERIC
#if ENABLED(TFT_GENERIC)
  // :[ 'AUTO', 'ST7735', 'ST7789', 'ST7796', 'R61505', 'ILI9328', 'ILI9341', 'ILI9488' ]
  #define TFT_DRIVER AUTO

  // Interface. Enable one of the following options:
  //#define TFT_INTERFACE_FSMC
  //#define TFT_INTERFACE_SPI

  // TFT Resolution. Enable one of the following options:
  //#define TFT_RES_320x240
  //#define TFT_RES_480x272
  //#define TFT_RES_480x320
  //#define TFT_RES_1024x600
#endif

/**
 * TFT UI - User Interface Selection. Enable one of the following options:
 *
 *   TFT_CLASSIC_UI - Emulated DOGM - 128x64 Upscaled
 *   TFT_COLOR_UI   - Marlin Default Menus, Touch Friendly, using full TFT capabilities
 *   TFT_LVGL_UI    - A Modern UI using LVGL
 *
 *   For LVGL_UI also copy the 'assets' folder from the build directory to the
 *   root of your SD card, together with the compiled firmware.
 */
//#define TFT_CLASSIC_UI
//#define TFT_COLOR_UI
//#define TFT_LVGL_UI

#if ENABLED(TFT_COLOR_UI)
  /**
   * TFT Font for Color_UI. Choose one of the following:
   *
   * NOTOSANS  - Default font with anti-aliasing. Supports Latin Extended and non-Latin characters.
   * UNIFONT   - Lightweight font, no anti-aliasing. Supports Latin Extended and non-Latin characters.
   * HELVETICA - Lightweight font, no anti-aliasing. Supports Basic Latin (0x0020-0x007F) and Latin-1 Supplement (0x0080-0x00FF) characters only.
   */
  #define TFT_FONT  NOTOSANS

  /**
   * TFT Theme for Color_UI. Choose one of the following or add a new one to 'Marlin/src/lcd/tft/themes' directory
   *
   * BLUE_MARLIN  - Default theme with 'midnight blue' background
   * BLACK_MARLIN - Theme with 'black' background
   * ANET_BLACK   - Theme used for Anet ET4/5
   */
  #define TFT_THEME BLACK_MARLIN

  //#define TFT_SHARED_IO   // I/O is shared between TFT display and other devices. Disable async data transfer.

  #define COMPACT_MARLIN_BOOT_LOGO  // Use compressed data to save Flash space
#endif

#if ENABLED(TFT_LVGL_UI)
  //#define MKS_WIFI_MODULE // MKS WiFi module
#endif

/**
 * TFT Rotation. Set to one of the following values:
 *
 *   TFT_ROTATE_90,  TFT_ROTATE_90_MIRROR_X,  TFT_ROTATE_90_MIRROR_Y,
 *   TFT_ROTATE_180, TFT_ROTATE_180_MIRROR_X, TFT_ROTATE_180_MIRROR_Y,
 *   TFT_ROTATE_270, TFT_ROTATE_270_MIRROR_X, TFT_ROTATE_270_MIRROR_Y,
 *   TFT_MIRROR_X, TFT_MIRROR_Y, TFT_NO_ROTATION
 */
//#define TFT_ROTATION TFT_NO_ROTATION

//=============================================================================
//============================  Other Controllers  ============================
//=============================================================================

//
// Ender-3 v2 OEM display. A DWIN display with Rotary Encoder.
//
//#define DWIN_CREALITY_LCD           // Creality UI
//#define DWIN_LCD_PROUI              // Pro UI by MRiscoC
//#define DWIN_CREALITY_LCD_JYERSUI   // Jyers UI by Jacob Myers
//#define DWIN_MARLINUI_PORTRAIT      // MarlinUI (portrait orientation)
//#define DWIN_MARLINUI_LANDSCAPE     // MarlinUI (landscape orientation)

//
// Touch Screen Settings
//
//#define TOUCH_SCREEN
#if ENABLED(TOUCH_SCREEN)
  #define BUTTON_DELAY_EDIT      50 // (ms) Button repeat delay for edit screens
  #define BUTTON_DELAY_MENU     250 // (ms) Button repeat delay for menus

  //#define DISABLE_ENCODER         // Disable the click encoder, if any
  //#define TOUCH_IDLE_SLEEP_MINS 5 // (minutes) Display Sleep after a period of inactivity. Set with M255 S.

  #define TOUCH_SCREEN_CALIBRATION

  //#define TOUCH_CALIBRATION_X 12316
  //#define TOUCH_CALIBRATION_Y -8981
  //#define TOUCH_OFFSET_X        -43
  //#define TOUCH_OFFSET_Y        257
  //#define TOUCH_ORIENTATION TOUCH_LANDSCAPE

  #if ALL(TOUCH_SCREEN_CALIBRATION, EEPROM_SETTINGS)
    #define TOUCH_CALIBRATION_AUTO_SAVE // Auto save successful calibration values to EEPROM
  #endif

  #if ENABLED(TFT_COLOR_UI)
    //#define SINGLE_TOUCH_NAVIGATION
  #endif
#endif

//
// RepRapWorld REPRAPWORLD_KEYPAD v1.1
// https://reprapworld.com/products/electronics/ramps/keypad_v1_0_fully_assembled/
//
//#define REPRAPWORLD_KEYPAD
//#define REPRAPWORLD_KEYPAD_MOVE_STEP 10.0 // (mm) Distance to move per key-press

//
// EasyThreeD ET-4000+ with button input and status LED
//
//#define EASYTHREED_UI

//=============================================================================
//=============================== Extra Features ==============================
//=============================================================================

// @section fans

// Set number of user-controlled fans. Disable to use all board-defined fans.
// :[1,2,3,4,5,6,7,8]
//#define NUM_M106_FANS 1

// Use software PWM to drive the fan, as for the heaters. This uses a very low frequency
// which is not as annoying as with the hardware PWM. On the other hand, if this frequency
// is too low, you should also increment SOFT_PWM_SCALE.
#define FAN_SOFT_PWM

// Incrementing this by 1 will double the software PWM frequency,
// affecting heaters, and the fan if FAN_SOFT_PWM is enabled.
// However, control resolution will be halved for each increment;
// at zero value, there are 128 effective control positions.
// :[0,1,2,3,4,5,6,7]
#define SOFT_PWM_SCALE 0

// If SOFT_PWM_SCALE is set to a value higher than 0, dithering can
// be used to mitigate the associated resolution loss. If enabled,
// some of the PWM cycles are stretched so on average the desired
// duty cycle is attained.
//#define SOFT_PWM_DITHER

// @section extras

// Support for the BariCUDA Paste Extruder
//#define BARICUDA

// @section lights

// Temperature status LEDs that display the hotend and bed temperature.
// If all hotends, bed temperature, and target temperature are under 54C
// then the BLUE led is on. Otherwise the RED led is on. (1C hysteresis)
//#define TEMP_STAT_LEDS

// Support for BlinkM/CyzRgb
//#define BLINKM

// Support for PCA9632 PWM LED driver
//#define PCA9632

// Support for PCA9533 PWM LED driver
//#define PCA9533

/**
 * RGB LED / LED Strip Control
 *
 * Enable support for an RGB LED connected to 5V digital pins, or
 * an RGB Strip connected to MOSFETs controlled by digital pins.
 *
 * Adds the M150 command to set the LED (or LED strip) color.
 * If pins are PWM capable (e.g., 4, 5, 6, 11) then a range of
 * luminance values can be set from 0 to 255.
 * For NeoPixel LED an overall brightness parameter is also available.
 *
 *  === CAUTION ===
 *  LED Strips require a MOSFET Chip between PWM lines and LEDs,
 *  as the Arduino cannot handle the current the LEDs will require.
 *  Failure to follow this precaution can destroy your Arduino!
 *
 *  NOTE: A separate 5V power supply is required! The NeoPixel LED needs
 *  more current than the Arduino 5V linear regulator can produce.
 *
 *  Requires PWM frequency between 50 <> 100Hz (Check HAL or variant)
 *  Use FAST_PWM_FAN, if possible, to reduce fan noise.
 */

// LED Type. Enable only one of the following two options:
//#define RGB_LED
//#define RGBW_LED

#if ANY(RGB_LED, RGBW_LED)
  //#define RGB_LED_R_PIN 34
  //#define RGB_LED_G_PIN 43
  //#define RGB_LED_B_PIN 35
  //#define RGB_LED_W_PIN -1
#endif

#if ANY(RGB_LED, RGBW_LED, PCA9632)
  //#define RGB_STARTUP_TEST              // For PWM pins, fade between all colors
  #if ENABLED(RGB_STARTUP_TEST)
    #define RGB_STARTUP_TEST_INNER_MS 10  // (ms) Reduce or increase fading speed
  #endif
#endif

// Support for Adafruit NeoPixel LED driver
//#define NEOPIXEL_LED
#if ENABLED(NEOPIXEL_LED)
  #define NEOPIXEL_TYPE          NEO_GRBW // NEO_GRBW, NEO_RGBW, NEO_GRB, NEO_RBG, etc.
                                          // See https://github.com/adafruit/Adafruit_NeoPixel/blob/master/Adafruit_NeoPixel.h
  //#define NEOPIXEL_PIN                4 // LED driving pin
  //#define NEOPIXEL2_TYPE  NEOPIXEL_TYPE
  //#define NEOPIXEL2_PIN               5
  #define NEOPIXEL_PIXELS              30 // Number of LEDs in the strip. (Longest strip when NEOPIXEL2_SEPARATE is disabled.)
  #define NEOPIXEL_IS_SEQUENTIAL          // Sequential display for temperature change - LED by LED. Disable to change all LEDs at once.
  #define NEOPIXEL_BRIGHTNESS         127 // Initial brightness (0-255)
  //#define NEOPIXEL_STARTUP_TEST         // Cycle through colors at startup

  // Support for second Adafruit NeoPixel LED driver controlled with M150 S1 ...
  //#define NEOPIXEL2_SEPARATE
  #if ENABLED(NEOPIXEL2_SEPARATE)
    #define NEOPIXEL2_PIXELS           15 // Number of LEDs in the second strip
    #define NEOPIXEL2_BRIGHTNESS      127 // Initial brightness (0-255)
    #define NEOPIXEL2_STARTUP_TEST        // Cycle through colors at startup
    #define NEOPIXEL_M150_DEFAULT      -1 // Default strip for M150 without 'S'. Use -1 to set all by default.
  #else
    //#define NEOPIXEL2_INSERIES          // Default behavior is NeoPixel 2 in parallel
  #endif

  // Use some of the NeoPixel LEDs for static (background) lighting
  //#define NEOPIXEL_BKGD_INDEX_FIRST   0 // Index of the first background LED
  //#define NEOPIXEL_BKGD_INDEX_LAST    5 // Index of the last background LED
  //#define NEOPIXEL_BKGD_COLOR         { 255, 255, 255, 0 }  // R, G, B, W
  //#define NEOPIXEL_BKGD_TIMEOUT_COLOR {  25,  25,  25, 0 }  // R, G, B, W
  //#define NEOPIXEL_BKGD_ALWAYS_ON       // Keep the backlight on when other NeoPixels are off
#endif

/**
 * Printer Event LEDs
 *
 * During printing, the LEDs will reflect the printer status:
 *
 *  - Gradually change from blue to violet as the heated bed gets to target temp
 *  - Gradually change from violet to red as the hotend gets to temperature
 *  - Change to white to illuminate work surface
 *  - Change to green once print has finished
 *  - Turn off after the print has finished and the user has pushed a button
 */
#if ANY(BLINKM, RGB_LED, RGBW_LED, PCA9632, PCA9533, NEOPIXEL_LED)
  #define PRINTER_EVENT_LEDS
#endif

// @section servos

/**
 * Number of servos
 *
 * For some servo-related options NUM_SERVOS will be set automatically.
 * Set this manually if there are extra servos needing manual control.
 * Set to 0 to turn off servo support.
 */
//#define NUM_SERVOS 3 // Note: Servo index starts with 0 for M280-M282 commands

// (ms) Delay before the next move will start, to give the servo time to reach its target angle.
// 300ms is a good value but you can try less delay.
// If the servo can't reach the requested position, increase it.
#define SERVO_DELAY { 300 }

// Only power servos during movement, otherwise leave off to prevent jitter
//#define DEACTIVATE_SERVOS_AFTER_MOVE

// Edit servo angles with M281 and save to EEPROM with M500
//#define EDITABLE_SERVO_ANGLES

// Disable servo with M282 to reduce power consumption, noise, and heat when not in use
//#define SERVO_DETACH_GCODE
"
TZDukAz5,Untitled,eliax1996,Python,Thursday 14th of December 2023 07:04:21 AM CDT,"text = """"""
O....#....
O.OO#....#
.....##...
OO.#O....O
.O.....O#.
O.#..O.#.#
..O..#O..O
.......O..
#....###..
#OO..#....
""""""

game = tuple(tuple(line) for line in text.strip().split(""\n""))


def display(board):
    for i in range(0, len(board)):
        for j in range(0, len(board[i])):
            print(board[i][j], end="""")
        print()

    print(""\n\n"")


@cache
def rotate_north(game_board):
    board = [list(line) for line in game_board]

    print(""computing new board"")

    for i in range(0, len(board)):
        for j in range(0, len(board[0])):
            if board[i][j] != ""O"":
                continue

            destination = i - 1
            while destination > -1 and board[destination][j] == ""."":
                destination -= 1

            board[i][j], board[destination + 1][j] = board[destination + 1][j], board[i][j]

    return tuple(tuple(line) for line in board)


@cache
def rotate_south(game_board):
    board = [list(line) for line in game_board]

    print(""computing new board"")

    for i in range(len(board) - 1, -1, -1):
        for j in range(0, len(board[0])):
            if board[i][j] != ""O"":
                continue

            destination = i + 1
            while destination < len(board) and board[destination][j] == ""."":
                destination += 1

            board[i][j], board[destination - 1][j] = board[destination - 1][j], board[i][j]

    return tuple(tuple(line) for line in board)


@cache
def rotate_east(game_board):
    board = [list(line) for line in game_board]

    print(""computing new board"")

    for i in range(0, len(board)):
        for j in range(len(board[0]) - 1, -1, -1):
            if board[i][j] != ""O"":
                continue

            destination = j + 1
            while destination < len(board) and board[i][destination] == ""."":
                destination += 1

            board[i][j], board[i][destination - 1] = board[i][destination - 1], board[i][j]

    return tuple(tuple(line) for line in board)


@cache
def rotate_west(game_board):
    board = [list(line) for line in game_board]

    print(""computing new board"")

    for i in range(0, len(board)):
        for j in range(0, len(board[i])):
            if board[i][j] != ""O"":
                continue

            destination = j - 1
            while destination > -1 and board[i][destination] == ""."":
                destination -= 1

            board[i][j], board[i][destination + 1] = board[i][destination + 1], board[i][j]

    return tuple(tuple(line) for line in board)


@cache
def cycle(board):
    new_game = rotate_north(board)
    new_game = rotate_west(new_game)
    new_game = rotate_south(new_game)
    new_game = rotate_east(new_game)
    return new_game


@cache
def points(board):
    tot = 0
    points = len(board)
    for i in range(len(board) - 1, -1, -1):
        for j in range(0, len(board[i])):
            if board[i][j] == ""O"":
                tot += points - i
    return tot


combinations_and_transformed = {}
first_in_repetition = None

cycle_start = None
cycle_width = None

for i in range(0, 1000000000):
    new_game = cycle(game)
    if game in combinations_and_transformed and combinations_and_transformed[game][1] == new_game:
        cycle_start = combinations_and_transformed[game][0]
        cycle_width = i - 1 - combinations_and_transformed[game][0]
        break
    else:
        combinations_and_transformed[game] = (i - 1, new_game)  # we are storing the index of the previous result
    game = new_game

print(f""cycle starts at {cycle_start}"")
print(f""cycle width {cycle_width}"")
print(f""missing {(1000000000 - cycle_start) % cycle_width}"")

for i in range(0, (1000000000 - (cycle_start + cycle_width)) % cycle_width + cycle_width - 1):
    print(points(game))
    game = cycle(game)

print(f""points of the final position: {points(game)}"")"
g9xgsNub,dbtest.cs,DrAungWinHtut,C#,Thursday 14th of December 2023 06:55:08 AM CDT,"using System;
using System.Windows.Forms;
using MySql.Data.MySqlClient;

namespace CRUDWindowsFormsApp
{
    public partial class MainForm : Form
    {
        private string connectionString = ""Server=myServerAddress;Database=myDatabase;User Id=myUsername;Password=myPassword;"";

        public MainForm()
        {
            InitializeComponent();
        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            LoadData();
        }

        private void LoadData()
        {
            using (MySqlConnection connection = new MySqlConnection(connectionString))
            {
                connection.Open();

                string selectQuery = ""SELECT * FROM TableName"";
                using (MySqlCommand cmd = new MySqlCommand(selectQuery, connection))
                {
                    using (MySqlDataReader reader = cmd.ExecuteReader())
                    {
                        dataGridView.DataSource = null;
                        dataGridView.Rows.Clear();

                        while (reader.Read())
                        {
                            dataGridView.Rows.Add(reader[""ID""], reader[""Name""], reader[""Age""]);
                        }
                    }
                }
            }
        }

        private void btnCreate_Click(object sender, EventArgs e)
        {
            string name = txtName.Text;
            int age;

            if (int.TryParse(txtAge.Text, out age))
            {
                using (MySqlConnection connection = new MySqlConnection(connectionString))
                {
                    connection.Open();

                    string insertQuery = ""INSERT INTO TableName (Name, Age) VALUES (@Name, @Age)"";
                    using (MySqlCommand cmd = new MySqlCommand(insertQuery, connection))
                    {
                        cmd.Parameters.AddWithValue(""@Name"", name);
                        cmd.Parameters.AddWithValue(""@Age"", age);
                        cmd.ExecuteNonQuery();

                        MessageBox.Show(""Record created successfully!"");
                        LoadData();
                    }
                }
            }
            else
            {
                MessageBox.Show(""Please enter a valid age."");
            }
        }

        private void btnUpdate_Click(object sender, EventArgs e)
        {
            int id;
            if (int.TryParse(txtID.Text, out id))
            {
                string name = txtName.Text;
                int age;

                if (int.TryParse(txtAge.Text, out age))
                {
                    using (MySqlConnection connection = new MySqlConnection(connectionString))
                    {
                        connection.Open();

                        string updateQuery = ""UPDATE TableName SET Name = @Name, Age = @Age WHERE ID = @ID"";
                        using (MySqlCommand cmd = new MySqlCommand(updateQuery, connection))
                        {
                            cmd.Parameters.AddWithValue(""@Name"", name);
                            cmd.Parameters.AddWithValue(""@Age"", age);
                            cmd.Parameters.AddWithValue(""@ID"", id);
                            cmd.ExecuteNonQuery();

                            MessageBox.Show(""Record updated successfully!"");
                            LoadData();
                        }
                    }
                }
                else
                {
                    MessageBox.Show(""Please enter a valid age."");
                }
            }
            else
            {
                MessageBox.Show(""Please enter a valid ID."");
            }
        }

        private void btnDelete_Click(object sender, EventArgs e)
        {
            int id;
            if (int.TryParse(txtID.Text, out id))
            {
                using (MySqlConnection connection = new MySqlConnection(connectionString))
                {
                    connection.Open();

                    string deleteQuery = ""DELETE FROM TableName WHERE ID = @ID"";
                    using (MySqlCommand cmd = new MySqlCommand(deleteQuery, connection))
                    {
                        cmd.Parameters.AddWithValue(""@ID"", id);
                        cmd.ExecuteNonQuery();

                        MessageBox.Show(""Record deleted successfully!"");
                        LoadData();
                    }
                }
            }
            else
            {
                MessageBox.Show(""Please enter a valid ID."");
            }
        }
    }
}
"
Ui3ZGWkc,Untitled,eliax1996,Python,Thursday 14th of December 2023 06:08:13 AM CDT,"from functools import cache

text = """"""
O#...OO.#.#..##.#..#O.OO...O##OO.......#......O.O...O..........O..#O..O.#.#.O.....##O.#O.##.........
.OOO..OOO.O.#.....#.....#.#.....O..#..OO..#.....O#O##..##O#.OO....O##.OOO..O...#....O....#O..#...O..
OOO#...O#...##.OOOO##.O..#.....O...#.O..#...#.O..OO..##.#....O#O..#O#..##...O.OO..#.#........#O....O
O..#..#...#.O##.......OO#.#....O.##.O..O.O#.O..O#.....#...O..OO.O.#......O.###.........#.......##...
..O.O.O..#O..OOOO..#..#..O..O#O...O....#.O#........OOO#.O...O..O#.#.O........#......#O.O...OO.#.O..O
#..O.#..##....#...O..........#..O.#..##.O.....O.O.O..O..O.O.#.OO#.#..##.........#OO.O....##...#..##.
OO.O#.#.O...O..#..#OO..O.............O.........O.#.......#OO#.O.#OOO.##OOO..OO#.....O#.O.#O.O##OO...
.##...##O.....O..OO..O#.O.O.#....OOO.O.O#..#O#..#.O.OO...####O#......#.#O..O.O....#..O....#.#.#.O#.#
.....#O..O.O.#......#..........#.OO...O.#O.O.....O.#OO.#.#.O#......OO..O.O.....#...O.O..OO...#O.O#..
.O..#....#....OOO.O.#....O#O###....O.O#OO.............#...OOO.....#....O..O.......###............O..
..#O.#....###..O...#.....OO#O.....#....###..O#.......#OO....O.O...#....#.O.O.#..O.##O...O..O#...##..
O...O.#O.#O#....O.O#.......#............OO.....O.#O..O#O....O##O.OO..#..O..#O..O#O...##O.O.O.O#..O.#
O#.O......#.......O....#...O.....#O#.#..O...O.###O.OO#.........O.....O..O...#.#O.....OO#..O.#...#...
.#...O.......O.#.....O.......O.O..#....#..O#O.#..O.#..##.......##....O.#.....O........OO.O...O.....O
..O..#.#O.O#...#.......#O#OO.#O....O...#O..O.O.#O.OO#......OO#....#...O.#...#O.#...O.#.OO#..O.#OO.O#
.O.......O...#.......#....O..O......O.O.O#O.#O...O.#.....O..O...#OOO#..O...O##..OOO#....#..........O
OO#..##O.O.O.O.#....O#.O#O.##..O......#.#.O.O..O.O...OO#.......#..O.#O.O#.OO....#O#O.O.O.#.O#O#.....
#O#.O.......##OOO..OO...O#..#..O.O.##.O#....#OO....#...OO.#..#..O.......O#O.......#.O.O............O
..O.OO.O#..OOO....OO.O...#.#.......#.O.......O..OOO.##.##.#...#.O.....O..O.......O.O.#..............
OO#.....O.O.#.#...#.#.....O....#.#O..O......#..#..O...#.#....O#..OO....O.#.....O...O.#.O..#.........
....O.#.O...O#....#.O.#.......O#.#.O##......#...O.#..O#..#.#O.O...#.....O......#O#.#.#O....O..O.O#.#
.....###.O.O.O#.O.......O..OO#...#.#...#..O......#O....O...OOOO..O...#.#.#.#.O#..O.......OO.....#.#.
...O.O...#O..O..#..O#.O....#O..#..O...#.O.O.OO....#O#O#.OOO##..#O..OOO#.O.O..O....#...O#..O...#O....
.##.O...O..O.#.#OOO..O..O...O........#O.OO#..#OO......O....O.##...#..O#..O#...#..O.....O...##...O...
.O.#.O#OO.#...O....#.O.O..OO.O#O...O#..##...O.O...#...O#OOO.....O.........O......#.O.#...........OO.
O....O#O...#.OO#...#.........####..........O.#...#...O.O.O#.O..............##....O..O..O..#.#...##.#
..O.OO.#.OO#..O.#O....O......O.............#...##...#.O..#..O###.#......O..##.O.........O.#........O
O...#....#.......OO...O#O.......#.....#....OOO.#...OO.#O..O.#......#.##O....OO....O#.#.O..O...O..O..
...#...#....O.#..OOOO#..O#..#.##O.#.#.O..#.O....OOO....#..#..#....OOO...#.O.O...#.#.#O.O..O.#..O....
...O#.#...O.#.##O..O#..O.....OO#O...#.OO#..OO#O..OOO.O...#...O.#.O....O#...OOO..O...O....O....#.#..O
#........#..O.###.#...O#.O#O.........##..O.O.#O.O.###O....##.#.#.#..O.#O....#OO#O.....O.........O.##
O.O....#O.....O#...O#.....O##.OOO.#O.O..O....O..O...O....#...O.........O.#.O..#.#.O.O#O...#.#...O..O
.O..O##.O........O.OOO#O...#....O.OOOO#O..O..............O..O.O.O...#..........#......O..O.O.#......
.O....#OO#OO...#...O.##O.....#O.#.O.O...O.....OO#.O.......O#...#O..O#OOO.........##.....##...#...##O
.O#..OO....OOO..#.......OOO...##....OO..O.O..........##...#.#...#....O..#....O..........#.#.#O#.#.O.
##.......#O...O#.OO.#..O.O.O....#........#.O..........O.O.O..O.....#.OO#...#O#.O.OO..OO.O#..##....O.
....#..#..#O.##O.#....#.#.OO.......##..O#.#.##......O.O.OO..##...O.#....#..O.#....#.O....#...#O..O..
..O....#...OOO.#O..#..#...O..OOO..O#..#O......#..O...#.O..O.....#O...O#......#.......#O.O.........O#
#.OO....O....###....#OOO..O.#..#........#OO.....#O..........#O...#..O.OO..#......##O..O##.........#.
....#..O..........O.#.#..O.O.#....O..O....O..OO#....O.......OOO.....O.O.O..#....#.....O.O#.O#.##..O.
#.O...OO..#....O.O..O...#O..O#.#O.#...O.....##..O...O##...O........#O..#O..O#.O.#.......O#.#...#.OO#
.#.OOO#....#..O........OO....O#..###.O....O...O...O#.#O..#.OO........##..#..#...O..#.......OO...O#..
.....OOO.#.O....O....#....O..O.O.O.O....O...#OO....#.OO#OO...O.OOOO.O...O.O....#OO...#O.#O..O....#..
.#.#..........#O..OOO...#..O...#.............OO....#O...O#..O...#........O..#O#....OO.....OO##.O...#
..OOO.OOO##.##O#...O.O..O......O#O..O##...##....O.#........O....##...O#O..O#.O...O.O...O....O.......
..###.OO#..#.O.#....#..O..OO..O.###....O....#..O.O#.#......OO.....O#....O.OO....OO.O.O.O#........O..
#O###.#......O......O......#...O#.O.O...O#OO.O#....O..#..O#.OO...O..O..#..#.#...#..##OO...OO....O..O
..O...#..#O##O...#..#.#OO........O.#....O....................#...........#.....O..#...O#.#.O.O..#.#.
O...#.O...#O..#..O.O.#.....O.#....O.O...##......#..#..OO...#..O..OOOOO..O..O...#..O.OO...O.O#O.#....
........#...O.#.....O.O..O....#....#O......#..#........#O#.....#O##..OO.O...#......#OO.O#.O........O
.O..##..O#....#....OO.#O.#O#OO#O.#..OOO#.......OO....O.#.....O....#..#..##...#O.....#....O..O....O..
...##O..O.#.O..#.O.....#..O#.##OO#O#...O.##..#..#......O.##O.OO...O.#..#.O....#..O....O.O.........#.
...O..O.#..O.#O#......O.#OO.O.##.##..O###.#.O........O..O..O#...#.O...O.....##....O.OO..#..O..#..O#.
O....O......#..#O#.O....O...O.....#.O##O.O...#O.#O...O...#O...O.O#O...#O.#.#....#.#.#O....O.....OO..
.O.##..###....OO................OOO.....#.#.OO.O...O#.OO.#..O........#...O.O#.O..O.O..O.O...O....O..
...OOOO..O.#..O.#...O.##.O.O##.#..O.##..#.....##....O.O....O.O.##O.OO.#O.........#.##.O#...O.O..O...
...O.O..#O.#..OO.#.#O#OO..#OO.O......O.O.OO....#..OO.......#O..O.##....O.O..##O#.#....OO.....#.O...#
OO.....O....#O...O#.#..O...O#.#.O..#OO....O..#..OOO...O.........O....#.###O.OO....O....O............
..O..O.....#O.#O#OO..##.O.........#..##.##.O..O#O#..O.O..O..O...###.....OO.......#.##..#O##..O#O..O.
#O.#O...OOOO.O.###....#O..#O#O#.OO.....#O..#..#...O.#O.....#O....###.O....#..O...O..O....#......#...
O##...#.....#..O.#.O.#.......#..O#.....#.O.O.#...O..O....OO.....#.O###.#.....OO....#OO..OOO..#......
..O......#...#O..OO#O#OO....O.O.OOO.#O.OO.O......#....O##..O#.OO.##.#...O.##.....#...####.......##..
.......OO#.O.O.#.O.......#O#........#O..##OO#.#O..##..OO.##OO....#..O......#..#.O..#...#.O.....OO...
###.OO.O.O#..O.......#OO#.....#..O.O..O.O.......#..#O.##..#O..#..#...#O#......OO##O#OOO#...O#....O.#
#O#.O.........#..O.#..#..#..............O..O..#..O##....O.##..O..O#..O.....#OO..O.#.......O....OO...
#O#O....O#.#.O..O..#...#..#.#...#O.....O..##..#....O#.#.O.O.O...O.#...#.O....O#....#.....#.#..#...#O
O...O........O.#..OOOO..#...O#O....##.O..#.......#..O..#..#O.#...OO..#.O..##..#...O#O.##.....#..#.O.
O..#.##.......O..O......#..#.#.O...O#.O.......O#.O.O#O..#.O#.OOOOO.#OO.#.OO#....O....#...O####OO...#
#O..O....O..#O..O.OO.#.O.##...#O#.....O...#.....#......##......O#O#.........#..#.O...O.O..........#.
OOO.#.O.....O..OO.O#.#..#.#..#.............O#.......OOO#OO.O.#.#O...O.#..#...#..O...#.O#....O..O..##
OO#........#.O.O....O#O...#O.#..#.#...#......##.......#..#..#.#.#.......O...##...O#...O..O.......O..
O..#O......O....#O.O#..O........#......##..#...#O...OO....#.#...O........O.#O.......O.....O...#..O..
..#O#.......O..O..O..........#...OO.#..OOO....O....#OOO#..O.....#.O#....O...#O.......#..#.O...#..##.
...#O...O.OOO...O#.....#..#....##..#....#OO..O.OO#O.O#..#.O#O#O.....#OO#O...#.#O......O.....OO.....O
..#...O.O.....O...O##O..O.....O..O..#O.O..O....O.#O....#O....O..O.O......O.....#..#....O......#.....
O.#...O..#O.#...O.O.O..#..##...O.O..O#..O...O#....O........O#O.#O.#.O.......#.O.O..O.......OO.#.....
O#...O.O#..#O#...............OO##.#..#...#O....O....#O.OO.O..O#.O.....#O.....O..O...#..#..#...#..O.O
....OO.O#.#.......O..O.O.#..#.O#.O.....#............#....O..O..O..O.O..#..#..O.....#O.#O.#.O...O..#O
.....#...OOO...#.O....O#...#.....O..OO....##O.OOO..#.O...#...O.##.O#O...O.....#.#...O...O.##.#.....O
....##...O#O..O...##O.OOOO...#.#.....OOO..........O.O....O.#O.#..O#..O###...O....#.O#O......OOO..O.O
#..#...OO##OOO.O#....#O#.O.....O#.#...##.#O..OO.#.#.O.O..OO.O#.........##.....O..O#..O......O.....##
..O..OO.##O.##OO...O#.....#O.O..........#.#.......#..#..O....O...#......#..O.#.#...#.....#OO........
O.......#O.....O....OO#.#..O.....OO..#..OOO.O....O##O#O.O....OO#......#.#.O......#.OO.O.#OO....#....
....O...#.O....##.OO.....#O#.O...O....O#.O##.....O.#.O#........OO##...O..#.....O...O.....O...#..O#O.
#.OO.#.O##....#..O....O..#...OO...#....#.##...OO....#O.........O..#......O.OO..#..#..##......#O...#.
O...#.O.##..#.#OO#.O#.O###.O.#...O#..O###.......#....O.#.........O..O..#O#..O.O.O..OO..#.#...O#..O..
......#..##..#..##...O#......#..#.#O#.....#.#.O...#.#O..#O..O.O.#..O.O.O....O....#....OO.#O......#.O
..OO.##.#....O.O...O.#.....##O..#....#..OO#.#...##......#...OO...#.....#...#O..#O...#O......O#...O#.
OOO.O##O...O..O.O#.##O#..OO.#.O..O...O.#O..O..#.#...O.O.......#O##.#..#.#.O.......O..OOO#.O....O#..O
...O...OO.O...OO...O.....O#.#.#O.O.O.O..O..O...OO....O..###...##....#O....O...#.#.##....O....#O.O..#
......#OO.........##.O...#..#.O.#..OO....O..O..O.#OO......OO.O#.......O...#..O.O#..OO.##.##.OOOOO...
........O.....##..O.OO..O#.....O................O........OO#...##.....O#....#...#O.O..O...#.##..#O.O
#OO.O.O.O.O#.OOO....#O#.#....#...#O#O.#.....OOO.....#.O..##.O##..O...........#......#...O.#.#.O.....
.#O.........#.O.##O..#..O.O...OO..#..O.O#OO#..#O.O.O....#......O.....OO#..OO#.O.O..#.#.#OO.#..O.....
...OO.O#O.O#.O.......O#..#OO.O.OO..O#.O.OO.O........O.OO..#..O...#.#.#....#.#.....OO.#.O..OO.....#..
###.....O..#...OO.#OO........O....#O#OO...#.O...#.....#O...#.##..O..#O#..O##.O#.O.....#.O....#O...#.
#O#.##......O....#.O##..#.......#.#..O......O.OOO.#....O##.#.O..OO...O..#...#.###......OO....O#.#.O#
#OOOO#.#...OO..O..O..#..O..O...#OO.O.O.O#.#.##..#....####..O#....#O.OOO..O#O.#...O....#.O......O....
.##OO....#......O..OOO......#..O.....#..O...O..#.#.........OO.O..##.......#.#O#.OO......O#O..O......
........OOO.....OO........O.O.O.#O...#...O...O...O..O..#.....#O..#.#..OO....O...#..##..#O......O.#O#
""""""

# text = """"""
# O....#....
# O.OO#....#
# .....##...
# OO.#O....O
# .O.....O#.
# O.#..O.#.#
# ..O..#O..O
# .......O..
##....###..
##OO..#....
# """"""

game = tuple(tuple(line) for line in text.strip().split(""\n""))


def display(board):
    for i in range(0, len(board)):
        for j in range(0, len(board[i])):
            print(board[i][j], end="""")
        print()

    print(""\n\n"")


@cache
def rotate_north(game_board):
    board = [list(line) for line in game_board]

    print(""computing new board"")

    for i in range(0, len(board)):
        for j in range(0, len(board[0])):
            if board[i][j] != ""O"":
                continue

            destination = i - 1
            while destination > -1 and board[destination][j] == ""."":
                destination -= 1

            board[i][j], board[destination + 1][j] = board[destination + 1][j], board[i][j]

    return tuple(tuple(line) for line in board)


@cache
def rotate_south(game_board):
    board = [list(line) for line in game_board]

    print(""computing new board"")

    for i in range(len(board) - 1, -1, -1):
        for j in range(0, len(board[0])):
            if board[i][j] != ""O"":
                continue

            destination = i + 1
            while destination < len(board) and board[destination][j] == ""."":
                destination += 1

            board[i][j], board[destination - 1][j] = board[destination - 1][j], board[i][j]

    return tuple(tuple(line) for line in board)


@cache
def rotate_east(game_board):
    board = [list(line) for line in game_board]

    print(""computing new board"")

    for i in range(0, len(board)):
        for j in range(len(board[0]) - 1, -1, -1):
            if board[i][j] != ""O"":
                continue

            destination = j + 1
            while destination < len(board) and board[i][destination] == ""."":
                destination += 1

            board[i][j], board[i][destination - 1] = board[i][destination - 1], board[i][j]

    return tuple(tuple(line) for line in board)


@cache
def rotate_west(game_board):
    board = [list(line) for line in game_board]

    print(""computing new board"")

    for i in range(0, len(board)):
        for j in range(0, len(board[i])):
            if board[i][j] != ""O"":
                continue

            destination = j - 1
            while destination > -1 and board[i][destination] == ""."":
                destination -= 1

            board[i][j], board[i][destination + 1] = board[i][destination + 1], board[i][j]

    return tuple(tuple(line) for line in board)


@cache
def cycle(board):
    new_game = rotate_north(board)
    new_game = rotate_west(new_game)
    new_game = rotate_south(new_game)
    new_game = rotate_east(new_game)
    return new_game


@cache
def points(board):
    tot = 0
    points = len(board)
    for i in range(len(board) - 1, -1, -1):
        for j in range(0, len(board[i])):
            if board[i][j] == ""O"":
                tot += points - i
    return tot


combinations = set()
first_in_repetition = None

for i in range(0, 1000000000):
    game = cycle(game)
    if i % 200000 == 0:
        print(f""Percentage: {100*(float(i)/1000000000)}"")

print(f""points of the final position: {points(game)}"")"
JYRHhjUK,data782,TestGuy1,JSON,Thursday 14th of December 2023 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '5de68ae5795e9903d3f488271f828aa5e85856795011b43c5f0a677cce3aaf510a28b4c543b88de6414302f4be72c9fe027ea10a22849e7bebb8ba83d24637a4111ea71a82c221e3e438a2a0afb8f6c27cbf485d79a6d6ebd6431e2180af2307d02a910995b36b22cea8efb90aba6360730de0efa5ffc06562f473974cea0bbb',
  otherdata: [
    '91754c6ac3e5ab6d51f3052b7b9fd82b',
    '355f15c102d2cb42efe9ba7f9d373136',
    '4a048458002c558c9554e2e89b53e39d',
    '9328bee7c6b3844fefa1e2b562252872',
    '6ffd3cbd43db1c64feacae4beab68eca',
    'c42447bf1d1f734fa3b074f809f3e74a',
    'e14be00e80474aa72ffcfa1ed09004b5',
    'ee95c451032dbc7b70bbd349ad5842e5'
  ]
}"
J2Q8x6sy,Record a new blog comment as an activity in BuddyPress,vapvarun,PHP,Thursday 14th of December 2023 05:38:24 AM CDT,"/**
 * Record a new blog comment as an activity in BuddyPress.
 *
 * @param int $comment_ID The comment ID.
 * @param int $comment_approved 1 if the comment is approved, 0 if not.
 */
function wbcom_record_blog_comment_as_activity( $comment_ID, $comment_approved ) {
    if ( 1 !== $comment_approved ) {
        return;
    }

    $comment = get_comment( $comment_ID );
    $user_id = $comment->user_id;
    $user_info = get_userdata($user_id);
    $username = $user_info->user_nicename;
    $post_id = $comment->comment_post_ID;
    $post_title = get_the_title( $post_id );
    $comment_link = get_comment_link( $comment_ID );
    $content = sprintf( 'Commented on the post, <a href=""%s"">%s</a>: ""%s""', $comment_link, $post_title, $comment->comment_content );

    bp_activity_add( array(
        'user_id'   => $user_id,
        'action'    => sprintf( '%s posted a new comment on the post, <a href=""%s"">%s</a>', $username, get_permalink($post_id), $post_title ),
        'content'   => $content,
        'component' => 'activity',
        'type'      => 'new_blog_comment',
    ) );
}
add_action( 'comment_post', 'wbcom_record_blog_comment_as_activity', 10, 2 );
"
L54NjXFN,Untitled,35657,C++,Thursday 14th of December 2023 05:24:42 AM CDT,"#include<stdlib.h> // –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è rand –∏ srand
#include<time.h> // –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è time

#include <iostream>

using namespace std;

template <typename T>
void ShowArray(T arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i] << "" "";
    }
    cout << endl;
}

void InitArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        arr[i] = rand() % 100;
    }
}

template <typename T>
void SelectSort(T arr[], int size) {
    for (int i = 0; i < size; i++) {
        T x = arr[i];
        int k = i;
        for (int j = i + 1; j < size; j++) {
            if (arr[j] < x) {
                x = arr[j];
                k = j;
            }
        }
        if (k != i) {
            arr[k] = arr[i];
            arr[i] = x;
        }
    }
}

int main() {

    srand(time(NULL));

    setlocale(LC_ALL, ""ru"");

    const int size = 10;
    int arr[size];

    InitArray(arr, size);
    ShowArray(arr, size);

    SelectSort(arr, size);
    ShowArray(arr, size);

    double arr2[size]{ 3.5, 4.2, 1.1, 6.7, 8.3, 5.4, 4.4, 6.7, 8.3, 2.1 };
    ShowArray(arr2, size);
    SelectSort(arr2, size);
    ShowArray(arr2, size);
}"
iSAd6Bxv,MyInt,jasio77,C++,Thursday 14th of December 2023 05:05:53 AM CDT,"MyInt.h:

#ifndef MYINT_H
#define MYINT_H

class MyInt {
 private:
  int _count;  // to moze byc liczba elementow
  int* _data;  // to moze byc tablica (no albo wsk na 1 inta)

 public:
  MyInt(int count = 0);
  ~MyInt();                   // rule of three, jak juz wiemy, ze mamy destruktor, to lecimy z reszta
  MyInt(const MyInt& other);  // kopiujacy (rvalue tez moze sie zbindowac technicznie do tego, ale wygra przeladowanie &&)
  MyInt(MyInt&& other);       // przenoszacy

  MyInt& operator=(const MyInt& other);  // operator= kopiujacy
  MyInt& operator=(MyInt&& other);       // operator= przenoszacy
};

#endif /* MYINT_H */

MyInt.cpp:

#include ""MyInt.h""
#include <cstring>
#include <utility>  // std::move & std::exchange

MyInt::MyInt(int count)
    : _count{count}, _data{new int[_count]} {}

MyInt::~MyInt() {
  delete[] _data;
}

MyInt::MyInt(const MyInt& other)
    : _count{other._count}, _data{new int[other._count]} {
  std::memcpy(_data, other._data, sizeof(int) * _count);
}

MyInt::MyInt(MyInt&& other)
    : _count{std::exchange(other._count, 0)}, _data{std::exchange(other._data, nullptr)} {}

MyInt& MyInt::operator=(const MyInt& other) {
  if (this != &other) {
    // check for resource reuse availability
    if (_count != other._count) {
      // the arrays are NOT the same size
      delete[] _data;
      _count = other._count;
      _data = new int[_count];  // now we can use just _i
    }

    // if the arrays were the same size, just copy over
    std::memcpy(_data, other._data, sizeof(int) * _count);
  }

  return *this;
}

MyInt& MyInt::operator=(MyInt&& other) {
  if (this != &other) {
    _count = std::exchange(other._count, 0);
    _data = std::exchange(other._data, nullptr);
  }

  return *this;
}
"
g4FRv60H,Untitled,35657,C++,Thursday 14th of December 2023 04:39:41 AM CDT,"#include <iostream>

using namespace std;

template <typename T>
void sort(T array[], int size) {
    for (int k = 0; k < size; k++) {
        for (int j = 0; j < size - k - 1; j++) {
            if (array[j] > array[j + 1]) {
                T temp = array[j];
                array[j] = array[j + 1];
                array[j + 1] = temp;
            }
        }
    }
}

template <typename T>
void display(T array[], int size) {
    for (int i = 0; i < size; i++) {
        cout << array[i] << "" "";
    }
    cout << endl;
}

void display(char array[], int size) {
    for (int i = 0; i < size; i++) {
        cout << array[i];
    }
    cout << endl;
}

int main() {
    setlocale(LC_ALL, ""ru"");

    int array[]{ 1, 3, 7, -4, -2, 4 };
    int size = 6;
    cout << ""Original int Array : "";
    display(array, size);
    sort(array, size);
    cout << ""Sorted   int Array : "";
    display(array, size);


    double doublearray[]{ 3.5, 2.5, 3.7, 1.0, 3.3 };
    size = 5;
    cout << ""Original double Array : "";
    display(doublearray, size);
    sort(doublearray, size);
    cout << ""Sorted double Array : "";
    display(doublearray, size);

    char arr[]{ ""–ü—Ä–∏–≤–µ—Ç"" };
    display(arr, 6);
}
"
zP8AZZ6G,Untitled,35657,C++,Thursday 14th of December 2023 04:39:09 AM CDT,"#include <iostream>

using namespace std;

template <typename T>
void sort(T array[], int size) {
    for (int k = 0; k < size; k++) {
        for (int j = 0; j < size - k - 1; j++) {
            if (array[j] > array[j + 1]) {
                T temp = array[j];
                array[j] = array[j + 1];
                array[j + 1] = temp;
            }
        }
    }
}

template <typename T>
void display(T array[], int size) {
    for (int i = 0; i < size; i++) {
        cout << array[i] << "" "";
    }
    cout << endl;
}


int main() {
    setlocale(LC_ALL, ""ru"");

    int array[]{ 1, 3, 7, -4, -2, 4 };
    int size = 6;
    cout << ""Original int Array : "";
    display(array, size);
    sort(array, size);
    cout << ""Sorted   int Array : "";
    display(array, size);


    double doublearray[]{ 3.5, 2.5, 3.7, 1.0, 3.3 };
    size = 5;
    cout << ""Original double Array : "";
    display(doublearray, size);
    sort(doublearray, size);
    cout << ""Sorted double Array : "";
    display(doublearray, size);

    char arr[]{ ""–ü—Ä–∏–≤–µ—Ç"" };
    display(arr, 6);
}
"
vV5E6YQn,Untitled,35657,C++,Thursday 14th of December 2023 04:36:43 AM CDT,"#include <iostream>

using namespace std;


void sort(int array[], int size) {
    for (int k = 0; k < size; k++) {
        for (int j = 0; j < size - k - 1; j++) {
            if (array[j] > array[j + 1]) {
                int temp = array[j];
                array[j] = array[j + 1];
                array[j + 1] = temp;
            }
        }
    }
}



void display(int array[], int size) {
    for (int i = 0; i < size; i++) {
        cout << array[i] << "" "";
    }
    cout << endl;
}


int main() {
    int array[]{ 1, 3, 7, -4, -2, 4 };
    int size = 6;
    cout << ""Original int Array : "";
    display(array, size);
    sort(array, size);
    cout << ""Sorted   int Array : "";
    display(array, size);


	// –±—É–¥–µ—Ç –ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Å double?
    // double doubleArray[]{ 3.5, 2.5, 3.7, 1.0, 3.3 };
    // size = 5;
    // cout << ""Original double Array : "";
    // display(doubleArray, size);
    // sort(doubleArray, size);
    // cout << ""Sorted double Array : "";
    // display(doubleArray, size);
}
"
1uP1N6eQ,enqueue,dimkiriaoks,PHP,Thursday 14th of December 2023 04:32:35 AM CDT,"// ŒîŒÆŒªœâœÉŒ∑

    wp_enqueue_style(
        'style',
        get_stylesheet_directory_uri() . '/assets/css/style.css',
        ['bootstrap'],
        DRK_LISTINGS_DEBUG ? time() : wp_get_theme()->Version,
        'all'
    );


// ŒëœÄŒøœÑŒ≠ŒªŒµœÉŒºŒ±
<link rel='stylesheet' id='style-css' href='https://kosdirectory.local/wp-content/themes/drk-listings/assets/css/style.css?ver=1702549887' type='text/css' media='all' />
"
XKTM6634,esp_dac_dds_ino,Arnemi,Arduino,Thursday 14th of December 2023 04:31:41 AM CDT,"/*
 * INFO:
 * This code demonstrates how to use the ESP32 DAC in an interrupt based configuration.
 * The sampling frequency and resolution of the samples and the DAC can be adjusted and experimented with
 *
 * Note: the ESP32 DAC has a fixed resolution of 8 bits, so the possibility for varying
 * DAC resolution is simulated by representing the desired resolution within an 8 bit range.
 */

/*
 * Global constants for the array of samples to be written to the DAC.
 * Default is a sine wave of 16 values between 0 and 255.
 */
const int sampleArrayLen = 16;
const int sampleArray[sampleArrayLen] = {
  0x80,
  0xb0,
  0xda,
  0xf5,
  0xff,
  0xf5,
  0xda,
  0xb0,
  0x80,
  0x4f,
  0x25,
  0xa,
  0x0,
  0xa,
  0x25,
  0x4f,
};

//Change these parameters in order to change the sampling properties of the system
#define SAMPLING_PERIOD 100  //In microseconds, should be at least 50.
#define DAC_RESOLUTION 8     //Resolution of the DAC. Must be between 1 and 8 bits.

//Hardware configuration
#define DAC_PIN 26

// Variable for storing the timer properties. Leave this alone.
hw_timer_t *timer = NULL;

// Constant with a mask for setting the correct DAC resolution. Leave this alone.
const int resolution_mask = ~((1 << (8 - DAC_RESOLUTION)) - 1);

/* 
 * Interrupt service routine that runs every with a period SAMPLING_PERIOD. 
 * Used for sampling, signal processing and digital to analog conversion.
 */
void ARDUINO_ISR_ATTR onTimer() {
  //Variable for storing the actual value to be written to the DAC.
  static int sampleDAC;

  //Current index of the sampleArray. Defined as static as its only used in this function.
  static int i = 0;

  //Using the DAC to convert and write the sampleDAC variable on DAC_PIN with the given resolution for the DAC.
  dacWrite(DAC_PIN, (sampleArray[i] & resolution_mask));

  if (i >= sampleArrayLen - 1) {
    //Reached end of sampleArray. Resetting i.
    i = 0;
  } else {
    //Incrementing i.
    i++;
  }
}

//--------The code below this point can be left alone--------

void setup() {
  //Initializing timer with 1Mhz frequency. This means one tick every microsecond.
  timer = timerBegin(1000000);
  timerAttachInterrupt(timer, &onTimer);

  //Call the onTimer function with the given period (in microseconds), repeating te timer and with unlimited count.
  timerAlarm(timer, SAMPLING_PERIOD, true, 0);
}

void loop() {
  //empty loop
}
"
qepML2cC,esp_adc_dac_isr_ino,Arnemi,Arduino,Thursday 14th of December 2023 04:27:02 AM CDT,"/*
 * INFO:
 * This code demonstrates how to use the ESP32 DAC and ADC in an interrupt based configuration.
 * The code samples a signal with the ADC and converts the signal back to analog values with the DAC, 
 * allowing it to be processed digitally. 
 * 
 * The sampling frequency and resolution of the ADC and the DAC can be adjusted and experimented with
 *
 * Note: the ESP32 DAC has a fixed resolution of 8 bits, so the possibility for varying
 * DAC resolution is simulated by representing the desired resolution within an 8 bit range.
 */

// Variable for storing the timer properties. Leave it be.
hw_timer_t *timer = NULL;

//Change these parameters in order to change the sampling properties of the system
#define SAMPLING_PERIOD 50  //In microseconds, should be at least 50.
#define ADC_RESOLUTION 12   //Resolution of the ADC. Must be between 9 and 12 bits.
#define DAC_RESOLUTION 8    //Resolution of the DAC. Must be between 1 and 8 bits.

//Hardware configuration
#define ADC_PIN 27
#define DAC_PIN 26

/* 
 * Interrupt service routine that runs every with a period SAMPLING_PERIOD. 
 * Used for sampling, signal processing and digital to analog conversion.
 */
void ARDUINO_ISR_ATTR onTimer() {
  /*
   * Variables for storing the samples from the ADC and the sample to be written to the DAC.
   * Defined as
   */
  static int sampleADC;
  static int sampleDAC;

  //Sampling with the ADC from the ADC_PIN
  sampleADC = analogRead(ADC_PIN);

  //Changing the resolution of the ADC sample to the resolution of the DAC.
  sampleDAC = sampleADC >> ADC_RESOLUTION - DAC_RESOLUTION;

  //Your signal processing code here
  sampleDAC *= 1.2;

  //Using the DAC to convert and write the sampleDAC variable on DAC_PIN, while making sure the sample is 8 bits.
  dacWrite(DAC_PIN, (sampleDAC << 8 - DAC_RESOLUTION));
}

//--------The code below this point can be left alone--------

void setup() {
  // put your setup code here, to run once:

  analogReadResolution(ADC_RESOLUTION);

  //Initializing timer with 1Mhz frequency
  timer = timerBegin(1000000);
  timerAttachInterrupt(timer, &onTimer);

  //Call the onTimer function with the given period (in microseconds), repeating te timer and with unlimited count.
  timerAlarm(timer, SAMPLING_PERIOD, true, 0);
}

void loop() {
  //empty loop
}
"
aAaQd0Xb,dasdas,selebry,Kotlin,Thursday 14th of December 2023 04:17:24 AM CDT,"package murad

data class Book(val title: String, val author: String)
val library = sequenceOf(
    Book(""The Great Gatsby"", ""F. Scott Fitzgerald""),
    Book(""To Kill a Mockingbird"", ""Harper Lee""),
    Book(""1984"", ""George Orwell""),
    Book(""The Catcher in the Rye"", ""J.D. Salinger""),
    Book(""The Lord of the Rings"", ""J.R.R. Tolkien""),
    Book(""The Hobbit"", ""J.R.R. Tolkien""),
    Book(""The Da Vinci Code"", ""Dan Brown""),
    Book(""The Girl with the Dragon Tattoo"", ""Stieg Larsson""),
    Book(""The Hunger Games"", ""Suzanne Collins""),
    Book(""The Fault in Our Stars"", ""John Green"")
)


fun main() {
    val uniqueAuthors = library.map { it.author }.toSet()
    println(""–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã:"")
    uniqueAuthors.forEach{author -> println(author)}

    val author = ""J.R.R. Tolkien""
    val booksByAuthor = library.filter { it.author == author }.toList()
    println(""–ö–Ω–∏–≥–∏ –æ—Ç $author"")
    booksByAuthor.forEach{book -> println(book)}

}



package murad
data class Country(val name: String, val continent: String, val population: Long, val area: Double) {
    override fun toString(): String {
        return ""–ù–∞–∑–≤–∞–Ω–∏–µ: $name, –ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç: $continent, –ù–∞—Å–µ–ª–µ–Ω–∏–µ: $population, –ü–ª–æ—â–∞–¥—å: $area –∫–º^2""
    }
}

val countries = sequenceOf(
    Country(""United States"", ""North America"", 331002651, 9525067.0),
    Country(""Canada"", ""North America"", 37742154, 9984670.0),
    Country(""China"", ""Asia"", 1444216107, 9596961.0),
    Country(""India"", ""Asia"", 1380004385, 3287263.0),
    Country(""Australia"", ""Australia/Oceania"", 25696886, 7692024.0),
    Country(""Brazil"", ""South America"", 212559417, 8515767.0),
    Country(""Russia"", ""Europe"", 145934462, 17098242.0),
    Country(""Germany"", ""Europe"", 83783942, 357022.0),
    Country(""Japan"", ""Asia"", 126476461, 377973.0),
    Country(""United Kingdom"", ""Europe"", 67886011, 242495.0)
)

fun main() {
        val europeanCountries = countries.filter { it.continent == ""Europe"" }
        println(""–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Å—Ç—Ä–∞–Ω—ã:"")
        europeanCountries.forEach { country -> println(country.toString()) }

        println(""\n\n–ï—Å—Ç—å –ª–∏ –≤ –µ–≤—Ä–æ–ø–µ —Å—Ç—Ä–∞–Ω—ã —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ, –±–æ–ª–µ–µ 50–º —á–µ–ª–æ–≤–µ–∫: ${if (europeanCountries.any { it.population > 50000000 }) ""–î–∞"" else ""–ù–µ—Ç""}"")

        val largeCountries = countries.filter { it.area > 500000.0 }
        println(""\n\n–°—Ç—Ä–∞–Ω—ã —Å –ø–ª–æ—â–∞–¥—å—é –±–æ–ª–µ–µ 500 —Ç—ã—Å –∫–º^2:"")
        largeCountries.forEach { country -> println(country.toString()) }

        println(""\n\n–í—Å–µ –ª–∏ –ë–æ–ª—å—à–∏–µ —Å—Ç—Ä–∞–Ω—ã —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º –º–µ–Ω—å—à–µ 100 –º–ª–Ω: ${if (largeCountries.all { it.population < 100000000 }) ""–î–∞"" else ""–ù–µ—Ç""}"")
}

package murad

data class SportsActivity(val participantName: String, val sportType: String, val duration: Int)

val activities = sequenceOf(
    SportsActivity(""Alice"", ""Running"", 30),
    SportsActivity(""Pavel"", ""Running"", 40),
    SportsActivity(""Bob"", ""Cycling"", 45),
    SportsActivity(""Charlie"", ""Swimming"", 60),
    SportsActivity(""Dave"", ""Gym"", 75),
    SportsActivity(""Eve"", ""Yoga"", 45),
    SportsActivity(""Frank"", ""Soccer"", 90),
    SportsActivity(""Grace"", ""Tennis"", 60),
    SportsActivity(""Hannah"", ""Basketball"", 90),
    SportsActivity(""Ivan"", ""Hiking"", 120),
    SportsActivity(""Jane"", ""Golf"", 90)
)

fun main() {
    val activitiesString = activities.map { ""–£—á–∞—Å—Ç–Ω–∏–∫: ${it.participantName}, –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: ${it.sportType}, –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${it.duration} –º–∏–Ω."" }
    println(""–ò—Å—Ö–æ–¥–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:"")
    activitiesString.forEach { activity -> println(activity) }

    val activitiesBySportType = activities.groupBy { it.sportType }
    println(""\n–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞:"")
    activitiesBySportType.forEach { (sportType, activities) ->
        println(""$sportType: ${activities.map { ""–£—á–∞—Å—Ç–Ω–∏–∫: ${it.participantName}, –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: ${it.sportType}, –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${it.duration} –º–∏–Ω."" }.joinToString("", "")}"")
    }

    val averageDurationBySportType = activitiesBySportType.map { (sportType, activities) ->
        val averageDuration = activities.map { it.duration }.average().toInt()
        ""–í–∏–¥ —Å–ø–æ—Ä—Ç–∞: $sportType, –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: $averageDuration –º–∏–Ω.""
    }.asSequence()
    println(""\n–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞:"")
    averageDurationBySportType.forEach { println(it) }
}


package murad

data class Student(val name: String, val age: Int, val averageGrade: Double, val missedClasses: Int)
val students = sequenceOf(
    Student(""–ê–ª–µ–∫—Å–µ–π"", 20, 85.0, 2),
    Student(""–ë–æ—Ä–∏—Å"", 21, 88.0, 0),
    Student(""–í–∞—Å–∏–ª–∏–π"", 19, 90.0, 3),
    Student(""–ì—Ä–∏–≥–æ—Ä–∏–π"", 22, 87.0, 1),
    Student(""–î–º–∏—Ç—Ä–∏–π"", 20, 89.0, 0),
    Student(""–ï–≤–≥–µ–Ω–∏–π"", 21, 91.0, 2),
    Student(""–§–µ–¥–æ—Ä"", 19, 92.0, 1),
    Student(""–ì–µ–æ—Ä–≥–∏–π"", 22, 88.0, 3),
    Student(""–ò–≤–∞–Ω"", 20, 90.0, 0),
    Student(""–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω"", 21, 89.0, 2)
)
fun main() {


    val sortedStudents = students.sortedByDescending { it.averageGrade }
    println(""–°—Ç—É–¥–µ–Ω—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –±–∞–ª–ª—É –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è:"")
    sortedStudents.forEach { println(""${it.name}: ${it.averageGrade}"") }

    val averageAge = sortedStudents.map { it.age }.average()
    println(""–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: $averageAge"")

    val studentsOver20 = sortedStudents.takeWhile { it.age > 20 }
    println(""–°—Ç—É–¥–µ–Ω—Ç—ã —Å—Ç–∞—Ä—à–µ 20 –ª–µ—Ç:"")
    studentsOver20.forEach { println(""${it.name}: ${it.age}"") }

    val bestStudent = sortedStudents.find { it.averageGrade == sortedStudents.maxOf { student -> student.averageGrade } }
    println(""–°—Ç—É–¥–µ–Ω—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å—Ä–µ–¥–Ω–∏–º –±–∞–ª–ª–æ–º: ${bestStudent?.name} —Å —Å—Ä–µ–¥–Ω–∏–º –±–∞–ª–ª–æ–º ${bestStudent?.averageGrade}"")
}"
pTnkXw4i,stairminer,aregrubb,Lua,Thursday 14th of December 2023 03:58:34 AM CDT,"print(""How deep?"")
steps = tonumber(read())

function gravelorsand()
        local success, ifgravel = turtle.inspect()
        while success do
                local success, ifgravel = turtle.inspect()
                if ifgravel.name == ""minecraft:gravel"" then
                        turtle.dig()
                elseif ifgravel.name == ""minecraft:sand"" then
                        turtle.dig()
                else
                        break
                end
        end
end
 
function gravelorsandUp()
        local success, ifgravel = turtle.inspectUp()
        while success do
                local success, ifgravel = turtle.inspectUp()
                if ifgravel.name == ""minecraft:gravel"" then
                        turtle.digUp()
                elseif ifgravel.name == ""minecraft:sand"" then
                        turtle.digUp()
                else
                        break
                end
        end
end

for a = 1,steps,1 do
    turtle.digDown()
    turtle.down()
    turtle.dig()
	gravelorsand()
    turtle.forward()
    turtle.digUp()
	gravelorsandUp()
    turtle.up()
    turtle.digUp()
	gravelorsandUp()
    turtle.down()
end
"
1mGDWfNG,Voucher Sample For ERP With Attachment List 2,Krypton_25,JSON,Thursday 14th of December 2023 03:58:30 AM CDT,"[
   {
      ""app_organization_branch_id"":2,
      ""created_on"":""05-10-2023 08:39:30.346"",
      ""date"":""2023-10-03 00:00:00.0"",
      ""description"":""Paid to  Healthcare Information System Ltd agst. VP00009068 through bank A/C no. 2009019110043 with BRAC Bank Limited dated 03/10/2023"",
      ""domain_name"":""VendorTransactionMaster"",
      ""is_posted"":true,
      ""is_reconciliated"":""TRANSFERRED"",
      ""journal_no"":""PJV10020459/23"",
      ""payment_type"":""BANK"",
      ""posting_date"":""2023-10-04 00:00:00.0"",
      ""voucher_no"":""JV10020389/23"",
      ""voucher_type"":""Journal Voucher"",
      ""transfer_type"":null,
      ""old_id"":80543,
      ""is_backdated"":true,
      ""created_by_id"":16390,
      ""details"":[
         {
            ""chart_of_accounts_id"":1021,
            ""credit"":0,
            ""debit"":1068860,
            ""is_independent"":false,
            ""project_id"":120,
            ""remarks"":""Advance Adjust: Paid to  Healthcare Information System Ltd agst. VP00009068 through bank A/C no. 2009019110043 with BRAC Bank Limited dated 03/10/2023"",
            ""subsidiary_ledger_id"":null,
            ""to_project_id"":null,
            ""old_id"":684766,
            ""app_organization_branch_id"":2,
            ""control_branch_id"":null,
            ""recon_code_id"":null,
            ""sl"":1,
            ""area_code"":null,
            ""reconciliation_type"":""TRANSFERRED"",
            ""department_code"":""000"",
            ""is_ho_reconciled"":0
         },
         {
            ""chart_of_accounts_id"":18,
            ""credit"":1068860,
            ""debit"":0,
            ""is_independent"":false,
            ""project_id"":120,
            ""remarks"":""Advance Adjust: Paid to  Healthcare Information System Ltd agst. VP00009068 through bank A/C no. 2009019110043 with BRAC Bank Limited dated 03/10/2023"",
            ""subsidiary_ledger_id"":null,
            ""to_project_id"":171798691960,
            ""old_id"":684767,
            ""app_organization_branch_id"":2,
            ""control_branch_id"":null,
            ""recon_code_id"":null,
            ""sl"":2,
            ""area_code"":null,
            ""reconciliation_type"":""TRANSFERRED"",
            ""department_code"":""000"",
            ""is_ho_reconciled"":0
         },
         {
            ""chart_of_accounts_id"":18,
            ""credit"":0,
            ""debit"":1068860,
            ""is_independent"":false,
            ""project_id"":171798691960,
            ""remarks"":""Advance Adjust: Paid to  Healthcare Information System Ltd agst. VP00009068 through bank A/C no. 2009019110043 with BRAC Bank Limited dated 03/10/2023"",
            ""subsidiary_ledger_id"":null,
            ""to_project_id"":120,
            ""old_id"":684768,
            ""app_organization_branch_id"":2,
            ""control_branch_id"":null,
            ""recon_code_id"":null,
            ""sl"":3,
            ""area_code"":null,
            ""reconciliation_type"":""TRANSFERRED"",
            ""department_code"":null,
            ""is_ho_reconciled"":0
         },
         {
            ""chart_of_accounts_id"":68,
            ""credit"":1068860,
            ""debit"":0,
            ""is_independent"":false,
            ""project_id"":171798691960,
            ""remarks"":""Advance Adjust: Paid to  Healthcare Information System Ltd agst. VP00009068 through bank A/C no. 2009019110043 with BRAC Bank Limited dated 03/10/2023"",
            ""subsidiary_ledger_id"":null,
            ""to_project_id"":null,
            ""old_id"":684769,
            ""app_organization_branch_id"":2,
            ""control_branch_id"":null,
            ""recon_code_id"":null,
            ""sl"":4,
            ""area_code"":null,
            ""reconciliation_type"":""TRANSFERRED"",
            ""department_code"":null,
            ""is_ho_reconciled"":0
         },
         {
            ""chart_of_accounts_id"":18,
            ""credit"":0,
            ""debit"":1140,
            ""is_independent"":false,
            ""project_id"":171798691960,
            ""remarks"":""Advance Adjust: Paid to  Healthcare Information System Ltd agst. VP00009068 through bank A/C no. 2009019110043 with BRAC Bank Limited dated 03/10/2023"",
            ""subsidiary_ledger_id"":null,
            ""to_project_id"":441,
            ""old_id"":684770,
            ""app_organization_branch_id"":2,
            ""control_branch_id"":null,
            ""recon_code_id"":null,
            ""sl"":5,
            ""area_code"":null,
            ""reconciliation_type"":""TRANSFERRED"",
            ""department_code"":null,
            ""is_ho_reconciled"":0
         },
         {
            ""chart_of_accounts_id"":68,
            ""credit"":1140,
            ""debit"":0,
            ""is_independent"":false,
            ""project_id"":171798691960,
            ""remarks"":""Advance Adjust: Paid to  Healthcare Information System Ltd agst. VP00009068 through bank A/C no. 2009019110043 with BRAC Bank Limited dated 03/10/2023"",
            ""subsidiary_ledger_id"":null,
            ""to_project_id"":null,
            ""old_id"":684771,
            ""app_organization_branch_id"":2,
            ""control_branch_id"":null,
            ""recon_code_id"":null,
            ""sl"":6,
            ""area_code"":null,
            ""reconciliation_type"":""TRANSFERRED"",
            ""department_code"":null,
            ""is_ho_reconciled"":0
         },
         {
            ""chart_of_accounts_id"":1022,
            ""credit"":0,
            ""debit"":108780,
            ""is_independent"":false,
            ""project_id"":171798691960,
            ""remarks"":""Advance Adjust: Paid to  Healthcare Information System Ltd agst. VP00009068 through bank A/C no. 2009019110043 with BRAC Bank Limited dated 03/10/2023"",
            ""subsidiary_ledger_id"":null,
            ""to_project_id"":null,
            ""old_id"":684772,
            ""app_organization_branch_id"":2,
            ""control_branch_id"":null,
            ""recon_code_id"":null,
            ""sl"":7,
            ""area_code"":null,
            ""reconciliation_type"":""TRANSFERRED"",
            ""department_code"":null,
            ""is_ho_reconciled"":0
         },
         {
            ""chart_of_accounts_id"":68,
            ""credit"":108780,
            ""debit"":0,
            ""is_independent"":false,
            ""project_id"":171798691960,
            ""remarks"":""Advance Adjust: Paid to  Healthcare Information System Ltd agst. VP00009068 through bank A/C no. 2009019110043 with BRAC Bank Limited dated 03/10/2023"",
            ""subsidiary_ledger_id"":null,
            ""to_project_id"":null,
            ""old_id"":684775,
            ""app_organization_branch_id"":2,
            ""control_branch_id"":null,
            ""recon_code_id"":null,
            ""sl"":10,
            ""area_code"":null,
            ""reconciliation_type"":""TRANSFERRED"",
            ""department_code"":null,
            ""is_ho_reconciled"":0
         },
         {
            ""chart_of_accounts_id"":18,
            ""credit"":0,
            ""debit"":7740,
            ""is_independent"":false,
            ""project_id"":171798691960,
            ""remarks"":""Advance Adjust: Paid to  Healthcare Information System Ltd agst. VP00009068 through bank A/C no. 2009019110043 with BRAC Bank Limited dated 03/10/2023"",
            ""subsidiary_ledger_id"":null,
            ""to_project_id"":171798695925,
            ""old_id"":684776,
            ""app_organization_branch_id"":2,
            ""control_branch_id"":null,
            ""recon_code_id"":null,
            ""sl"":11,
            ""area_code"":null,
            ""reconciliation_type"":""TRANSFERRED"",
            ""department_code"":null,
            ""is_ho_reconciled"":0
         },
         {
            ""chart_of_accounts_id"":68,
            ""credit"":7740,
            ""debit"":0,
            ""is_independent"":false,
            ""project_id"":171798691960,
            ""remarks"":""Advance Adjust: Paid to  Healthcare Information System Ltd agst. VP00009068 through bank A/C no. 2009019110043 with BRAC Bank Limited dated 03/10/2023"",
            ""subsidiary_ledger_id"":null,
            ""to_project_id"":null,
            ""old_id"":684777,
            ""app_organization_branch_id"":2,
            ""control_branch_id"":null,
            ""recon_code_id"":null,
            ""sl"":12,
            ""area_code"":null,
            ""reconciliation_type"":""TRANSFERRED"",
            ""department_code"":null,
            ""is_ho_reconciled"":0
         },
         {
            ""chart_of_accounts_id"":18,
            ""credit"":0,
            ""debit"":4180,
            ""is_independent"":false,
            ""project_id"":171798691960,
            ""remarks"":""Advance Adjust: Paid to  Healthcare Information System Ltd agst. VP00009068 through bank A/C no. 2009019110043 with BRAC Bank Limited dated 03/10/2023"",
            ""subsidiary_ledger_id"":null,
            ""to_project_id"":171798702875,
            ""old_id"":684778,
            ""app_organization_branch_id"":2,
            ""control_branch_id"":null,
            ""recon_code_id"":null,
            ""sl"":13,
            ""area_code"":null,
            ""reconciliation_type"":""TRANSFERRED"",
            ""department_code"":null,
            ""is_ho_reconciled"":0
         },
         {
            ""chart_of_accounts_id"":68,
            ""credit"":4180,
            ""debit"":0,
            ""is_independent"":false,
            ""project_id"":171798691960,
            ""remarks"":""Advance Adjust: Paid to  Healthcare Information System Ltd agst. VP00009068 through bank A/C no. 2009019110043 with BRAC Bank Limited dated 03/10/2023"",
            ""subsidiary_ledger_id"":null,
            ""to_project_id"":null,
            ""old_id"":684779,
            ""app_organization_branch_id"":2,
            ""control_branch_id"":null,
            ""recon_code_id"":null,
            ""sl"":14,
            ""area_code"":null,
            ""reconciliation_type"":""TRANSFERRED"",
            ""department_code"":null,
            ""is_ho_reconciled"":0
         },
         {
            ""chart_of_accounts_id"":1021,
            ""credit"":0,
            ""debit"":1140,
            ""is_independent"":false,
            ""project_id"":441,
            ""remarks"":""Advance Adjust: Paid to  Healthcare Information System Ltd agst. VP00009068 through bank A/C no. 2009019110043 with BRAC Bank Limited dated 03/10/2023"",
            ""subsidiary_ledger_id"":null,
            ""to_project_id"":null,
            ""old_id"":684780,
            ""app_organization_branch_id"":2,
            ""control_branch_id"":null,
            ""recon_code_id"":null,
            ""sl"":15,
            ""area_code"":null,
            ""reconciliation_type"":""TRANSFERRED"",
            ""department_code"":null,
            ""is_ho_reconciled"":0
         },
         {
            ""chart_of_accounts_id"":18,
            ""credit"":1140,
            ""debit"":0,
            ""is_independent"":false,
            ""project_id"":441,
            ""remarks"":""Advance Adjust: Paid to  Healthcare Information System Ltd agst. VP00009068 through bank A/C no. 2009019110043 with BRAC Bank Limited dated 03/10/2023"",
            ""subsidiary_ledger_id"":null,
            ""to_project_id"":171798691960,
            ""old_id"":684781,
            ""app_organization_branch_id"":2,
            ""control_branch_id"":null,
            ""recon_code_id"":null,
            ""sl"":16,
            ""area_code"":null,
            ""reconciliation_type"":""TRANSFERRED"",
            ""department_code"":null,
            ""is_ho_reconciled"":0
         },
         {
            ""chart_of_accounts_id"":1021,
            ""credit"":0,
            ""debit"":7740,
            ""is_independent"":false,
            ""project_id"":171798695925,
            ""remarks"":""Advance Adjust: Paid to  Healthcare Information System Ltd agst. VP00009068 through bank A/C no. 2009019110043 with BRAC Bank Limited dated 03/10/2023"",
            ""subsidiary_ledger_id"":null,
            ""to_project_id"":null,
            ""old_id"":684782,
            ""app_organization_branch_id"":2,
            ""control_branch_id"":null,
            ""recon_code_id"":null,
            ""sl"":17,
            ""area_code"":null,
            ""reconciliation_type"":""TRANSFERRED"",
            ""department_code"":null,
            ""is_ho_reconciled"":0
         },
         {
            ""chart_of_accounts_id"":18,
            ""credit"":7740,
            ""debit"":0,
            ""is_independent"":false,
            ""project_id"":171798695925,
            ""remarks"":""Advance Adjust: Paid to  Healthcare Information System Ltd agst. VP00009068 through bank A/C no. 2009019110043 with BRAC Bank Limited dated 03/10/2023"",
            ""subsidiary_ledger_id"":null,
            ""to_project_id"":171798691960,
            ""old_id"":684783,
            ""app_organization_branch_id"":2,
            ""control_branch_id"":null,
            ""recon_code_id"":null,
            ""sl"":18,
            ""area_code"":null,
            ""reconciliation_type"":""TRANSFERRED"",
            ""department_code"":null,
            ""is_ho_reconciled"":0
         },
         {
            ""chart_of_accounts_id"":1021,
            ""credit"":0,
            ""debit"":4180,
            ""is_independent"":false,
            ""project_id"":171798702875,
            ""remarks"":""Advance Adjust: Paid to  Healthcare Information System Ltd agst. VP00009068 through bank A/C no. 2009019110043 with BRAC Bank Limited dated 03/10/2023"",
            ""subsidiary_ledger_id"":null,
            ""to_project_id"":null,
            ""old_id"":684784,
            ""app_organization_branch_id"":2,
            ""control_branch_id"":null,
            ""recon_code_id"":null,
            ""sl"":19,
            ""area_code"":null,
            ""reconciliation_type"":""TRANSFERRED"",
            ""department_code"":null,
            ""is_ho_reconciled"":0
         },
         {
            ""chart_of_accounts_id"":18,
            ""credit"":4180,
            ""debit"":0,
            ""is_independent"":false,
            ""project_id"":171798702875,
            ""remarks"":""Advance Adjust: Paid to  Healthcare Information System Ltd agst. VP00009068 through bank A/C no. 2009019110043 with BRAC Bank Limited dated 03/10/2023"",
            ""subsidiary_ledger_id"":null,
            ""to_project_id"":171798691960,
            ""old_id"":684785,
            ""app_organization_branch_id"":2,
            ""control_branch_id"":null,
            ""recon_code_id"":null,
            ""sl"":20,
            ""area_code"":null,
            ""reconciliation_type"":""TRANSFERRED"",
            ""department_code"":null,
            ""is_ho_reconciled"":0
         }
      ],
      ""attachments"":[
         {
            ""hoid"":17926,
            ""transactionNo"":""TRNB-27074"",
            ""typename"":""comparativeStatement"",
            ""attachmentname"":""TRNB-27074_comparativeStatement"",
            ""journalmasterid"":null,
            ""attachmentfilepath"":""https://tender.brac.net/myDashboard.newTab#restTender/procComState?tenderRefId=206158435757""
         }
      ]
   }
]"
