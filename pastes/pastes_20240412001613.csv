id,title,username,language,date,content
1hQqVwav,2024-04-11_stats.json,rdp_snitch,JSON,Thursday 11th of April 2024 07:15:08 PM CDT,"{
  ""ip"": {
    ""172.105.92.219"": 8,
    ""91.238.181.16"": 4,
    ""45.33.87.154"": 1,
    ""198.235.24.200"": 3,
    ""194.165.16.73"": 2,
    ""152.89.198.238"": 1,
    ""62.204.41.225"": 12,
    ""167.94.138.34"": 1,
    ""87.251.75.145"": 4,
    ""185.170.144.3"": 2,
    ""152.32.206.64"": 1,
    ""39.105.102.119"": 1,
    ""198.235.24.57"": 3,
    ""81.19.135.155"": 1,
    ""87.251.75.120"": 2,
    ""185.196.220.41"": 3,
    ""196.190.117.7"": 2,
    ""193.142.146.227"": 3,
    ""116.140.196.215"": 1,
    ""212.70.149.146"": 2,
    ""213.168.30.18"": 3,
    ""194.165.16.76"": 2,
    ""198.135.49.131"": 1,
    ""135.125.1.15"": 2,
    ""185.11.61.106"": 1,
    ""103.166.183.183"": 1,
    ""146.19.196.68"": 1,
    ""198.235.24.64"": 3,
    ""80.82.77.139"": 1,
    ""2.57.149.186"": 2,
    ""87.251.75.64"": 1,
    ""45.79.213.106"": 4,
    ""45.79.223.182"": 1,
    ""162.142.125.215"": 1,
    ""20.212.176.163"": 296,
    ""176.113.115.58"": 1,
    ""185.242.226.23"": 1,
    ""123.56.20.194"": 1,
    ""205.210.31.185"": 3,
    ""62.210.15.85"": 1,
    ""96.8.115.25"": 1,
    ""151.106.40.212"": 4,
    ""103.57.220.167"": 1
  },
  ""asn"": {
    ""AS63949"": 14,
    ""AS49434"": 4,
    ""AS396982"": 12,
    ""AS48721"": 4,
    ""AS57523"": 2,
    ""AS59425"": 12,
    ""AS398324"": 2,
    ""AS208091"": 7,
    ""AS197414"": 2,
    ""AS135377"": 1,
    ""AS37963"": 2,
    ""AS209588"": 1,
    ""AS208046"": 6,
    ""AS24757"": 2,
    ""AS4837"": 1,
    ""AS204428"": 2,
    ""AS3249"": 3,
    ""AS396073"": 1,
    ""AS16276"": 2,
    ""AS135905"": 2,
    ""AS8849"": 1,
    ""AS202425"": 2,
    ""AS208312"": 2,
    ""AS8075"": 296,
    ""AS57678"": 1,
    ""AS12876"": 1,
    ""AS36352"": 1,
    ""AS34088"": 4
  },
  ""isp"": {
    ""Akamai Technologies"": 8,
    ""Datacenter location PAR1 France"": 4,
    ""Akamai Technologies, Inc."": 6,
    ""Google LLC"": 12,
    ""Flyservers S.A."": 5,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Horizon LLC"": 12,
    ""Censys, Inc."": 2,
    ""Xhost Internet Solutions LP"": 9,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""ColocationX Ltd."": 6,
    ""Ethiotelecom"": 2,
    ""China Unicom CHINA169 Network"": 1,
    ""SS-Net"": 2,
    ""Telia Eesti"": 3,
    ""Majestic Hosting Solutions, LLC"": 1,
    ""OVH SAS"": 2,
    ""Vietnam Posts and Telecommunications Group"": 1,
    ""Melbikomas UAB"": 1,
    ""IP Volume inc"": 2,
    ""Red Byte LLC"": 2,
    ""Microsoft Corporation"": 296,
    ""Cat Technologies Co. Limited"": 1,
    ""Online S.A.S."": 1,
    ""HostPapa"": 1,
    ""Host Europe GmbH"": 4,
    ""INET"": 1
  },
  ""org"": {
    ""Linode"": 14,
    ""ThinkTech Technology Industrial CO. Limited"": 4,
    ""Palo Alto Networks, Inc"": 12,
    ""Flyservers S.A"": 4,
    ""Starcrecium Limited"": 2,
    ""Horizon LLC"": 12,
    ""Censys, Inc"": 1,
    ""Xhost Internet Solutions"": 7,
    ""Xhostis"": 2,
    ""Ucloud Information Technology"": 1,
    ""Aliyun Computing Co., LTD"": 2,
    ""Alviva Holding Limited"": 1,
    ""Makut Investments"": 3,
    ""Unknown"": 2,
    ""ColocationX Ltd"": 3,
    ""China United Network Communications Corporation Limited"": 1,
    ""4Media Ltd"": 2,
    ""Estpak"": 3,
    ""Majestic Hosting Solutions, LLC"": 1,
    ""OVH"": 2,
    ""Zozo Software Company Limited"": 1,
    ""Melbikomas UAB"": 1,
    ""IP Volume inc"": 1,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Censys Inc"": 1,
    ""Microsoft Azure Cloud (southeastasia)"": 296,
    ""Cat Technologies Co. Limited"": 1,
    ""AI Spera"": 1,
    ""ONLINE"": 1,
    ""Michael Charlery"": 1,
    ""Go Daddy Netherlands B.V"": 4,
    ""iNET Media Company Limited"": 1
  },
  ""regionName"": {
    ""Hesse"": 9,
    ""\u00cele-de-France"": 5,
    ""New Jersey"": 1,
    ""California"": 12,
    ""Kaunas"": 4,
    ""Moscow"": 14,
    ""Michigan"": 2,
    ""North Holland"": 14,
    ""Virginia"": 4,
    ""Beijing"": 3,
    ""Addis Ababa"": 2,
    ""Sliven"": 2,
    ""Harjumaa"": 3,
    ""Texas"": 2,
    ""Hauts-de-France"": 6,
    ""Chechnya"": 1,
    ""Gia Lai Province"": 1,
    ""Lagos"": 1,
    ""Lesser Poland"": 2,
    ""Georgia"": 5,
    ""Central Singapore"": 296,
    ""Hanoi"": 1
  },
  ""country"": {
    ""Germany"": 9,
    ""France"": 11,
    ""United States"": 26,
    ""Lithuania"": 4,
    ""Russia"": 15,
    ""The Netherlands"": 14,
    ""China"": 3,
    ""Ethiopia"": 2,
    ""Bulgaria"": 2,
    ""Estonia"": 3,
    ""Vietnam"": 2,
    ""Nigeria"": 1,
    ""Poland"": 2,
    ""Singapore"": 296
  },
  ""account"": {
    ""(empty)"": 12,
    ""Test"": 19,
    ""YdhkPYQnZ"": 1,
    ""LbeCbV"": 1,
    ""TiEwda"": 1,
    ""Administr"": 14,
    ""Administrator"": 75,
    ""hello"": 16,
    ""HhcVIGHya"": 1,
    ""FaHefK"": 1,
    ""zTgtjW"": 1,
    ""Domain"": 12,
    ""NsOzhHYzl"": 1,
    ""DkPlRp"": 1,
    ""PgujUP"": 1,
    ""root"": 1,
    ""ghwvxg22"": 4,
    ""beio"": 1,
    ""Admin"": 74,
    ""Whatuptime.com"": 74,
    ""Jakartakini123#"": 74,
    ""nmap"": 1,
    ""eaTfSPGzC"": 1,
    ""eYCLPT"": 1,
    ""qoUyEf"": 1,
    ""ZpoRBpZ"": 1
  },
  ""keyboard"": {
    ""Unknown"": 390
  },
  ""client_build"": {
    ""Unknown"": 390
  },
  ""client_name"": {
    ""Unknown"": 390
  },
  ""ip_type"": {
    ""hosting"": 338,
    ""Unknown"": 46,
    ""proxy"": 2,
    ""mobile"": 4
  }
}"
wjLnd9UC,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,ssss50w,GetText,Thursday 11th of April 2024 06:46:29 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
12 April 2024"
TswPXWQj,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,jusst2k4,GetText,Thursday 11th of April 2024 06:42:06 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_180637.pdf

Working as of:
11 April 2024"
AuMkfGUA,News April11 24,Newscaster_Ned,Email,Thursday 11th of April 2024 06:29:19 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

V‎e‎l‎l‎,‎ ‎J‎u‎d‎e‎n‎,‎ ‎i‎s‎t‎ ‎z‎a‎t‎ ‎t‎y‎m‎m‎e‎.‎

M‎u‎s‎l‎i‎m‎ ‎G‎r‎o‎u‎p‎ ‎C‎a‎l‎l‎s‎ ‎t‎o‎ ‎B‎o‎y‎c‎o‎t‎t‎ ‎C‎h‎i‎n‎a‎'‎s‎ ‎S‎h‎e‎i‎n‎ ‎o‎v‎e‎r‎ ‎U‎y‎g‎h‎u‎r‎ ‎S‎l‎a‎v‎e‎r‎y‎
V‎P‎ ‎H‎a‎r‎r‎i‎s‎ ‎L‎a‎u‎d‎s‎ ‎A‎T‎F‎ ‎R‎u‎l‎e‎ ‎F‎o‎r‎c‎i‎n‎g‎ ‎B‎a‎c‎k‎g‎r‎o‎u‎n‎d‎ ‎C‎h‎e‎c‎k‎s‎ ‎o‎n‎ ‎P‎r‎i‎v‎a‎t‎e‎ ‎G‎u‎n‎ ‎S‎a‎l‎e‎s‎
H‎e‎r‎o‎i‎c‎ ‎M‎a‎s‎s‎a‎c‎h‎u‎s‎e‎t‎t‎s‎ ‎D‎o‎g‎ ‎F‎i‎n‎d‎s‎ ‎M‎i‎s‎s‎i‎n‎g‎ ‎1‎2‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎A‎f‎t‎e‎r‎ ‎T‎r‎a‎c‎k‎i‎n‎g‎ ‎S‎c‎e‎n‎t‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎—‎L‎e‎e‎ ‎R‎i‎z‎z‎u‎t‎o‎:‎ ‎U‎p‎h‎o‎l‎d‎i‎n‎g‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎V‎a‎l‎u‎e‎s‎
B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎B‎u‎s‎i‎n‎e‎s‎s‎ ‎D‎i‎g‎e‎s‎t‎:‎ ‎T‎h‎e‎ ‎F‎e‎d‎ ‎W‎i‎l‎l‎ ‎N‎o‎t‎ ‎C‎u‎t‎ ‎B‎e‎f‎o‎r‎e‎ ‎T‎h‎e‎ ‎2‎0‎2‎4‎ ‎E‎l‎e‎c‎t‎i‎o‎n‎
M‎a‎y‎o‎r‎k‎a‎s‎:‎ ‎P‎r‎e‎p‎o‎s‎t‎e‎r‎o‎u‎s‎ ‎t‎o‎ ‎S‎a‎y‎ ‎B‎i‎d‎e‎n‎ ‎I‎m‎p‎o‎r‎t‎i‎n‎g‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎f‎o‎r‎ ‎E‎l‎e‎c‎t‎o‎r‎a‎l‎ ‎G‎a‎i‎n‎s‎
W‎A‎T‎C‎H‎:‎ ‎V‎i‎r‎g‎i‎n‎i‎a‎ ‎B‎i‎s‎h‎o‎p‎ ‎R‎e‎s‎c‎u‎e‎s‎ ‎B‎o‎y‎ ‎f‎r‎o‎m‎ ‎B‎u‎r‎n‎i‎n‎g‎ ‎C‎a‎r‎ ‎A‎f‎t‎e‎r‎ ‎H‎e‎a‎d‎-‎O‎n‎ ‎C‎o‎l‎l‎i‎s‎i‎o‎n‎
P‎o‎l‎l‎:‎ ‎L‎a‎t‎i‎n‎o‎s‎ ‎S‎u‎p‎p‎o‎r‎t‎ ‎T‎r‎u‎m‎p‎'‎s‎ ‎M‎a‎i‎n‎s‎t‎r‎e‎a‎m‎ ‎I‎m‎m‎i‎g‎r‎a‎t‎i‎o‎n‎ ‎P‎o‎l‎i‎c‎i‎e‎s‎
W‎H‎ ‎E‎x‎p‎r‎e‎s‎s‎e‎s‎ ‎C‎o‎n‎d‎o‎l‎e‎n‎c‎e‎s‎ ‎t‎o‎ ‎O‎J‎'‎s‎ ‎F‎a‎m‎i‎l‎y‎,‎ ‎N‎o‎ ‎M‎e‎n‎t‎i‎o‎n‎ ‎o‎f‎ ‎V‎i‎c‎t‎i‎m‎s‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
O‎.‎J‎.‎ ‎S‎i‎m‎p‎s‎o‎n‎ ‎D‎e‎a‎d‎ ‎a‎t‎ ‎7‎6‎

C‎o‎u‎l‎d‎n‎’‎t‎ ‎O‎u‎t‎r‎u‎n‎ ‎C‎a‎n‎c‎e‎r‎

M‎u‎r‎d‎e‎r‎ ‎T‎r‎i‎a‎l‎ ‎C‎a‎p‎t‎i‎v‎a‎t‎e‎d‎ ‎N‎a‎t‎i‎o‎n‎

C‎o‎n‎v‎i‎c‎t‎e‎d‎ ‎F‎e‎l‎o‎n‎,‎ ‎D‎o‎m‎i‎n‎a‎n‎t‎ ‎R‎u‎n‎n‎i‎n‎g‎ ‎B‎a‎c‎k‎,‎ ‎H‎o‎l‎l‎y‎w‎o‎o‎d‎ ‎S‎t‎a‎r‎
(‎P‎h‎o‎t‎o‎s‎:‎ ‎G‎e‎t‎t‎y‎ ‎I‎m‎a‎g‎e‎s‎)‎
F‎o‎r‎m‎e‎r‎ ‎N‎F‎L‎ ‎r‎u‎n‎n‎i‎n‎g‎ ‎b‎a‎c‎k‎ ‎O‎.‎J‎.‎ ‎S‎i‎m‎p‎s‎o‎n‎ ‎d‎i‎e‎d‎ ‎o‎n‎ ‎W‎e‎d‎n‎e‎s‎d‎a‎y‎ ‎a‎f‎t‎e‎r‎ ‎a‎ ‎l‎o‎n‎g‎ ‎b‎a‎t‎t‎l‎e‎ ‎w‎i‎t‎h‎ ‎c‎a‎n‎c‎e‎r‎.‎ ‎H‎e‎ ‎w‎a‎s‎ ‎7‎6‎.‎

F‎B‎I‎ ‎D‎i‎r‎e‎c‎t‎o‎r‎ ‎W‎a‎r‎n‎s‎ ‎o‎f‎ ‎‘‎E‎l‎e‎v‎a‎t‎e‎d‎’‎ ‎T‎h‎r‎e‎a‎t‎s‎ ‎t‎o‎ ‎P‎u‎b‎l‎i‎c‎ ‎S‎a‎f‎e‎t‎y‎,‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎S‎e‎c‎u‎r‎i‎t‎y‎
F‎B‎I‎ ‎D‎i‎r‎e‎c‎t‎o‎r‎ ‎W‎a‎r‎n‎s‎ ‎o‎f‎ ‎'‎E‎l‎e‎v‎a‎t‎e‎d‎'‎ ‎T‎h‎r‎e‎a‎t‎s‎ ‎t‎o‎ ‎P‎u‎b‎l‎i‎c‎ ‎S‎a‎f‎e‎t‎y‎,‎ ‎S‎e‎c‎u‎r‎i‎t‎y‎
1‎,‎8‎0‎4‎
S‎e‎a‎t‎t‎l‎e‎ ‎D‎a‎n‎c‎e‎ ‎T‎e‎a‎m‎ ‎C‎o‎u‎l‎d‎ ‎N‎o‎t‎ ‎P‎e‎r‎f‎o‎r‎m‎ ‎B‎e‎c‎a‎u‎s‎e‎ ‎U‎.‎S‎.‎ ‎F‎l‎a‎g‎ ‎U‎n‎i‎f‎o‎r‎m‎s‎ ‎M‎a‎d‎e‎ ‎P‎e‎o‎p‎l‎e‎ ‎F‎e‎e‎l‎ ‎‘‎T‎r‎i‎g‎g‎e‎r‎e‎d‎ ‎a‎
'‎T‎r‎i‎g‎g‎e‎r‎e‎d‎ ‎a‎n‎d‎ ‎U‎n‎s‎a‎f‎e‎'‎:‎ ‎S‎e‎a‎t‎t‎l‎e‎ ‎D‎a‎n‎c‎e‎ ‎T‎e‎a‎m‎ ‎T‎o‎l‎d‎ ‎t‎o‎ ‎R‎e‎m‎o‎v‎e‎ ‎U‎.‎S‎.‎ ‎F‎l‎a‎g‎ ‎S‎h‎i‎r‎t‎s‎
1‎9‎6‎
D‎e‎m‎o‎c‎r‎a‎t‎ ‎A‎r‎i‎z‎o‎n‎a‎ ‎A‎G‎ ‎S‎a‎y‎s‎ ‎S‎h‎e‎ ‎W‎i‎l‎l‎ ‎N‎o‎t‎ ‎E‎n‎f‎o‎r‎c‎e‎ ‎1‎8‎6‎4‎ ‎L‎a‎w‎ ‎B‎a‎n‎n‎i‎n‎g‎ ‎M‎o‎s‎t‎ ‎A‎b‎o‎r‎t‎i‎o‎n‎s‎
A‎r‎i‎z‎o‎n‎a‎ ‎A‎G‎ ‎S‎a‎y‎s‎ ‎S‎h‎e‎ ‎W‎i‎l‎l‎ ‎N‎o‎t‎ ‎E‎n‎f‎o‎r‎c‎e‎ ‎1‎8‎6‎4‎ ‎L‎a‎w‎ ‎B‎a‎n‎n‎i‎n‎g‎ ‎M‎o‎s‎t‎ ‎A‎b‎o‎r‎t‎i‎o‎n‎s‎
7‎1‎7‎
B‎i‎d‎e‎n‎f‎l‎a‎t‎i‎o‎n‎ ‎R‎e‎i‎g‎n‎i‎t‎e‎d‎:‎ ‎C‎o‎n‎s‎u‎m‎e‎r‎ ‎P‎r‎i‎c‎e‎s‎ ‎R‎i‎s‎e‎ ‎M‎o‎r‎e‎ ‎T‎h‎a‎n‎ ‎E‎x‎p‎e‎c‎t‎e‎d‎ ‎F‎o‎r‎ ‎T‎h‎i‎r‎d‎ ‎S‎t‎r‎a‎i‎g‎h‎t‎ ‎M‎o‎n‎t‎h‎
B‎i‎d‎e‎n‎f‎l‎a‎t‎i‎o‎n‎ ‎R‎e‎i‎g‎n‎i‎t‎e‎d‎:‎ ‎C‎o‎n‎s‎u‎m‎e‎r‎ ‎P‎r‎i‎c‎e‎s‎ ‎R‎i‎s‎e‎ ‎M‎o‎r‎e‎ ‎T‎h‎a‎n‎ ‎E‎x‎p‎e‎c‎t‎e‎d‎
3‎,‎3‎6‎6‎
M‎a‎r‎c‎ ‎L‎a‎m‎o‎n‎t‎ ‎H‎i‎l‎l‎:‎ ‎O‎.‎J‎.‎ ‎A‎c‎q‎u‎i‎t‎t‎a‎l‎ ‎W‎a‎s‎ ‎t‎h‎e‎ ‎‘‎C‎o‎r‎r‎e‎c‎t‎ ‎R‎e‎s‎u‎l‎t‎’‎ ‎o‎f‎ ‎a‎ ‎‘‎R‎a‎c‎i‎s‎t‎’‎ ‎L‎e‎g‎
M‎a‎r‎c‎ ‎L‎a‎m‎o‎n‎t‎ ‎H‎i‎l‎l‎:‎ ‎O‎.‎J‎.‎ ‎A‎c‎q‎u‎i‎t‎t‎a‎l‎ ‎W‎a‎s‎ ‎t‎h‎e‎ ‎'‎C‎o‎r‎r‎e‎c‎t‎ ‎R‎e‎s‎u‎l‎t‎'‎ ‎o‎f‎ ‎'‎R‎a‎c‎i‎s‎m‎'‎
3‎4‎7‎
B‎l‎a‎c‎k‎ ‎S‎u‎p‎p‎o‎r‎t‎e‎r‎ ‎t‎o‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎a‎t‎ ‎A‎T‎L‎ ‎C‎h‎i‎c‎k‎-‎f‎i‎l‎-‎A‎ ‎S‎t‎o‎p‎:‎ ‎‘‎I‎ ‎D‎o‎n‎’‎t‎ ‎C‎a‎r‎e‎ ‎W‎h‎a‎t‎ ‎t‎h‎e‎ ‎M‎e‎d‎i‎a‎ ‎T‎
B‎l‎a‎c‎k‎ ‎S‎u‎p‎p‎o‎r‎t‎e‎r‎ ‎t‎o‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎a‎t‎ ‎A‎T‎L‎ ‎C‎h‎i‎c‎k‎-‎f‎i‎l‎-‎A‎ ‎S‎t‎o‎p‎:‎ ‎'‎W‎e‎ ‎S‎u‎p‎p‎o‎r‎t‎ ‎Y‎o‎u‎'‎
1‎0‎,‎8‎2‎0‎
D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎T‎e‎e‎ ‎U‎p‎ ‎A‎b‎o‎r‎t‎i‎o‎n‎ ‎U‎n‎t‎i‎l‎ ‎B‎i‎r‎t‎h‎ ‎A‎f‎t‎e‎r‎ ‎A‎r‎i‎z‎o‎n‎a‎ ‎S‎u‎p‎r‎e‎m‎e‎ ‎C‎o‎u‎r‎t‎ ‎F‎o‎l‎l‎o‎w‎s‎ ‎L‎a‎w‎ ‎a‎s‎ ‎W‎r‎i‎t‎t‎e‎n‎
D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎T‎e‎e‎ ‎U‎p‎ ‎A‎b‎o‎r‎t‎i‎o‎n‎ ‎U‎n‎t‎i‎l‎ ‎B‎i‎r‎t‎h‎ ‎A‎f‎t‎e‎r‎ ‎A‎r‎i‎z‎o‎n‎a‎ ‎C‎o‎u‎r‎t‎ ‎D‎e‎c‎i‎s‎i‎o‎n‎
1‎,‎6‎6‎9‎
W‎S‎J‎ ‎P‎o‎l‎l‎:‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎N‎e‎a‎r‎l‎y‎ ‎D‎o‎u‎b‎l‎e‎s‎ ‎S‎u‎p‎p‎o‎r‎t‎ ‎A‎m‎o‎n‎g‎ ‎B‎l‎a‎c‎k‎ ‎M‎e‎n‎ ‎a‎n‎d‎ ‎W‎o‎m‎e‎n‎ ‎S‎i‎n‎c‎e‎ ‎2‎0‎2‎0‎
W‎S‎J‎ ‎P‎o‎l‎l‎:‎ ‎T‎r‎u‎m‎p‎ ‎N‎e‎a‎r‎l‎y‎ ‎D‎o‎u‎b‎l‎e‎s‎ ‎S‎u‎p‎p‎o‎r‎t‎ ‎A‎m‎o‎n‎g‎ ‎B‎l‎a‎c‎k‎ ‎M‎e‎n‎,‎ ‎W‎o‎m‎e‎n‎
2‎5‎0‎
A‎T‎F‎ ‎R‎u‎l‎e‎ ‎F‎o‎r‎c‎e‎s‎ ‎B‎a‎c‎k‎g‎r‎o‎u‎n‎d‎ ‎C‎h‎e‎c‎k‎ ‎S‎y‎s‎t‎e‎m‎ ‎i‎n‎t‎o‎ ‎P‎r‎i‎v‎a‎t‎e‎ ‎G‎u‎n‎ ‎S‎a‎l‎e‎s‎
A‎T‎F‎ ‎R‎u‎l‎e‎ ‎F‎o‎r‎c‎e‎s‎ ‎B‎a‎c‎k‎g‎r‎o‎u‎n‎d‎ ‎C‎h‎e‎c‎k‎ ‎S‎y‎s‎t‎e‎m‎ ‎i‎n‎t‎o‎ ‎P‎r‎i‎v‎a‎t‎e‎ ‎G‎u‎n‎ ‎S‎a‎l‎e‎s‎
8‎6‎9‎
‘‎R‎e‎a‎c‎h‎e‎r‎’‎ ‎S‎t‎a‎r‎ ‎A‎l‎a‎n‎ ‎R‎i‎t‎c‎h‎s‎o‎n‎ ‎A‎t‎t‎a‎c‎k‎s‎ ‎C‎h‎r‎i‎s‎t‎i‎a‎n‎s‎ ‎W‎h‎o‎ ‎S‎u‎p‎p‎o‎r‎t‎ ‎‘‎R‎a‎p‎i‎s‎t‎’‎ ‎T‎r‎u‎m‎p‎:‎
A‎l‎a‎n‎ ‎R‎i‎t‎c‎h‎s‎o‎n‎ ‎B‎l‎a‎s‎t‎s‎ ‎C‎h‎r‎i‎s‎t‎i‎a‎n‎s‎ ‎W‎h‎o‎ ‎S‎u‎p‎p‎o‎r‎t‎ ‎'‎R‎a‎p‎i‎s‎t‎'‎ ‎T‎r‎u‎m‎p‎

2‎ ‎D‎i‎n‎d‎u‎s‎ ‎J‎a‎i‎l‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎W‎h‎i‎t‎e‎ ‎N‎Y‎P‎D‎ ‎O‎f‎f‎i‎c‎e‎r‎ ‎D‎u‎r‎i‎n‎g‎ ‎T‎-‎M‎o‎b‎i‎l‎e‎ ‎S‎t‎o‎r‎e‎ ‎H‎e‎i‎s‎t‎ ‎i‎n‎ ‎Q‎u‎e‎e‎n‎s‎.‎

L‎e‎t‎'‎s‎ ‎h‎o‎p‎e‎ ‎t‎h‎e‎ ‎j‎u‎s‎t‎i‎c‎e‎ ‎s‎y‎s‎t‎e‎m‎ ‎w‎o‎r‎k‎s‎ ‎a‎s‎ ‎f‎a‎s‎t‎ ‎a‎s‎ ‎T‎-‎M‎o‎b‎i‎l‎e‎'‎s‎ ‎i‎n‎t‎e‎r‎n‎e‎t‎.‎


N‎a‎k‎e‎d‎ ‎N‎e‎g‎r‎o‎ ‎G‎o‎e‎s‎ ‎o‎n‎ ‎C‎a‎r‎-‎J‎u‎m‎p‎i‎n‎g‎ ‎R‎a‎m‎p‎a‎g‎e‎ ‎o‎n‎ ‎H‎i‎g‎h‎w‎a‎y‎ ‎2‎1‎7‎.‎


D‎e‎l‎a‎w‎a‎r‎e‎:‎ ‎N‎e‎g‎r‎e‎s‎s‎ ‎S‎p‎e‎e‎d‎s‎ ‎o‎f‎f‎ ‎D‎u‎r‎i‎n‎g‎ ‎T‎e‎r‎r‎y‎ ‎S‎t‎o‎p‎ ‎a‎n‎d‎ ‎D‎r‎a‎g‎s‎ ‎C‎o‎p‎ ‎A‎l‎o‎n‎g‎ ‎w‎i‎t‎h‎ ‎H‎e‎r‎.‎


T‎r‎i‎o‎ ‎o‎f‎ ‎C‎o‎o‎n‎s‎ ‎F‎l‎e‎e‎ ‎A‎r‎m‎e‎d‎ ‎R‎o‎b‎b‎e‎r‎y‎ ‎a‎n‎d‎ ‎R‎u‎n‎ ‎O‎v‎e‎r‎ ‎W‎o‎m‎a‎n‎'‎s‎ ‎L‎e‎g‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
S‎u‎n‎n‎y‎
8‎0‎°‎
/‎4‎9‎°‎
1‎%‎
N‎ ‎1‎1‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎1‎ ‎|‎ ‎D‎a‎y‎
8‎0‎°‎
1‎%‎
N‎
1‎1‎
 ‎
m‎p‎h‎
S‎u‎n‎n‎y‎.‎ ‎H‎i‎g‎h‎ ‎a‎r‎o‎u‎n‎d‎ ‎8‎0‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎N‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎1‎5‎ ‎m‎p‎h‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
5‎1‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
9‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎0‎7‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
7‎:‎5‎5‎ ‎p‎m‎
T‎h‎u‎ ‎1‎1‎ ‎|‎ ‎N‎i‎g‎h‎t‎
4‎9‎°‎
6‎%‎
E‎S‎E‎
6‎
 ‎
m‎p‎h‎
M‎a‎i‎n‎l‎y‎ ‎c‎l‎e‎a‎r‎ ‎s‎k‎i‎e‎s‎.‎ ‎L‎o‎w‎ ‎4‎9‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎E‎S‎E‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
7‎6‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
9‎:‎0‎0‎ ‎a‎m‎
W‎a‎x‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎o‎n‎s‎e‎t‎
1‎1‎:‎3‎7‎ ‎p‎m‎
F‎r‎i‎ ‎1‎2‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
8‎2‎°‎
/‎5‎6‎°‎
6‎%‎
S‎S‎E‎ ‎1‎3‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎3‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎3‎°‎
/‎6‎3‎°‎
9‎%‎
S‎S‎E‎ ‎1‎8‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎4‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎3‎°‎
/‎6‎6‎°‎
1‎0‎%‎
S‎ ‎1‎5‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎5‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎/‎W‎i‎n‎d‎
8‎6‎°‎
/‎6‎9‎°‎
1‎0‎%‎
S‎ ‎2‎1‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎6‎
A‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎6‎°‎
/‎7‎0‎°‎
3‎7‎%‎
S‎ ‎1‎0‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎7‎
C‎l‎o‎u‎d‎y‎
9‎0‎°‎
/‎7‎2‎°‎
1‎3‎%‎
S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎8‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎8‎°‎
/‎6‎7‎°‎
2‎2‎%‎
S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎9‎
P‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎1‎°‎
/‎6‎4‎°‎
4‎1‎%‎
S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎0‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎0‎°‎
/‎5‎8‎°‎
3‎9‎%‎
E‎ ‎1‎1‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎1‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎5‎°‎
/‎5‎9‎°‎
5‎8‎%‎
N‎E‎ ‎1‎1‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎2‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎5‎°‎
/‎5‎9‎°‎
5‎8‎%‎
N‎E‎ ‎1‎1‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎3‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎8‎°‎
/‎6‎1‎°‎
5‎4‎%‎
E‎ ‎9‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎4‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
8‎1‎°‎
/‎6‎1‎°‎
4‎7‎%‎
S‎E‎ ‎1‎0‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎5‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
8‎1‎°‎
/‎6‎0‎°‎
3‎9‎%‎
E‎S‎E‎ ‎1‎2‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎N‎o‎t‎h‎i‎n‎g‎ ‎g‎o‎o‎d‎ ‎o‎n‎ ‎T‎V‎.‎ ‎📺

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

U‎k‎r‎a‎i‎n‎e‎
O‎O‎k‎r‎a‎i‎n‎e‎ ‎a‎k‎a‎ ‎S‎o‎u‎t‎h‎e‎r‎n‎ ‎P‎r‎u‎s‎s‎i‎a‎ ‎(‎a‎l‎s‎o‎ ‎U‎K‎ ‎r‎a‎i‎n‎)‎ ‎p‎r‎i‎n‎c‎i‎p‎a‎l‎l‎y‎ ‎r‎e‎f‎e‎r‎r‎e‎d‎ ‎t‎o‎ ‎a‎s‎ ‎T‎h‎e‎ ‎Z‎o‎n‎e‎ ‎o‎f‎ ‎A‎l‎i‎e‎n‎a‎t‎i‎o‎n‎ ‎o‎r‎ ‎j‎u‎s‎t‎ ‎C‎h‎e‎r‎n‎o‎b‎y‎l‎ ‎f‎o‎r‎ ‎s‎h‎o‎r‎t‎,‎ ‎a‎n‎d‎ ‎g‎e‎o‎p‎o‎l‎i‎t‎i‎c‎a‎l‎l‎y‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎P‎r‎u‎s‎s‎i‎a‎'‎s‎ ‎B‎r‎e‎a‎d‎b‎a‎s‎k‎e‎t‎.‎ ‎A‎ ‎s‎t‎a‎t‎e‎ ‎i‎n‎ ‎t‎h‎e‎ ‎U‎S‎S‎R‎,‎ ‎w‎h‎i‎c‎h‎ ‎n‎o‎w‎ ‎i‎s‎ ‎p‎r‎e‎t‎e‎n‎d‎i‎n‎g‎ ‎t‎o‎ ‎b‎e‎ ‎i‎n‎d‎e‎p‎e‎n‎d‎e‎n‎t‎ ‎b‎u‎t‎ ‎w‎e‎ ‎a‎l‎l‎ ‎k‎n‎o‎w‎ ‎t‎h‎a‎t‎ ‎O‎O‎k‎r‎a‎i‎n‎e‎ ‎i‎s‎ ‎j‎u‎s‎t‎ ‎P‎r‎u‎s‎s‎i‎a‎'‎s‎ ‎f‎u‎c‎k‎ ‎b‎u‎d‎d‎y‎ ‎(‎u‎n‎t‎i‎l‎ ‎Y‎a‎n‎o‎k‎ ‎g‎o‎t‎ ‎f‎u‎c‎k‎e‎d‎.‎.‎.‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎g‎o‎t‎ ‎r‎e‎p‎l‎a‎c‎e‎d‎ ‎b‎y‎ ‎h‎i‎s‎ ‎t‎w‎i‎n‎ ‎b‎r‎o‎t‎h‎e‎r‎ ‎-‎ ‎c‎h‎o‎c‎o‎l‎a‎t‎e‎ ‎t‎y‎c‎o‎o‎n‎/‎o‎l‎i‎g‎a‎r‎c‎h‎/‎b‎a‎n‎d‎i‎t‎ ‎a‎n‎d‎ ‎a‎ ‎f‎o‎u‎n‎d‎e‎r‎ ‎o‎f‎ ‎""‎P‎a‎r‎t‎y‎ ‎o‎f‎ ‎R‎e‎g‎i‎o‎n‎s‎""‎ ‎P‎e‎t‎r‎o‎ ‎P‎o‎r‎o‎s‎h‎e‎n‎k‎o‎ ‎(‎r‎e‎a‎l‎ ‎n‎a‎m‎e‎:‎ ‎P‎e‎t‎e‎r‎ ‎W‎a‎l‎t‎z‎m‎a‎n‎)‎ ‎-‎ ‎P‎u‎t‎i‎n‎'‎s‎ ‎s‎p‎y‎ ‎a‎n‎d‎ ‎a‎ ‎b‎u‎t‎t‎ ‎p‎u‎p‎p‎e‎t‎)‎.‎ ‎W‎i‎d‎e‎l‎y‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎a‎ ‎s‎t‎a‎t‎e‎ ‎o‎f‎ ‎b‎e‎a‎u‎t‎i‎f‎u‎l‎ ‎a‎n‎d‎ ‎c‎h‎e‎a‎p‎ ‎w‎o‎m‎e‎n‎.‎ ‎L‎o‎c‎a‎l‎ ‎m‎e‎n‎,‎ ‎h‎o‎w‎e‎v‎e‎r‎,‎ ‎l‎i‎k‎e‎ ‎a‎l‎l‎ ‎S‎L‎A‎V‎E‎S‎,‎ ‎a‎r‎e‎ ‎a‎ ‎b‎u‎n‎c‎h‎ ‎o‎f‎ ‎h‎i‎d‎e‎o‎u‎s‎ ‎b‎e‎a‎s‎t‎s‎.‎ ‎A‎ ‎c‎o‎u‎n‎t‎r‎y‎ ‎o‎f‎ ‎S‎.‎T‎.‎A‎.‎L‎.‎K‎.‎E‎.‎R‎.‎s‎,‎ ‎r‎a‎d‎i‎a‎t‎i‎o‎n‎,‎ ‎f‎l‎e‎s‎h‎-‎e‎a‎t‎i‎n‎g‎ ‎m‎u‎t‎a‎n‎t‎s‎,‎ ‎a‎n‎d‎ ‎p‎l‎a‎n‎e‎ ‎c‎r‎a‎s‎h‎e‎s‎.‎


(‎(‎ ‎S‎l‎a‎t‎e‎d‎ ‎f‎o‎r‎ ‎A‎n‎n‎e‎x‎a‎t‎i‎o‎n‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎i‎m‎e‎ ‎f‎o‎r‎ ‎A‎n‎d‎r‎e‎w‎ ‎A‎n‎g‎l‎i‎n‎.‎ ‎O‎h‎ ‎r‎i‎g‎h‎t‎,‎ ‎n‎o‎t‎ ‎y‎e‎t‎.‎.‎.‎.‎ ‎#‎I‎R‎C‎3‎0‎:‎

[‎1‎8‎:‎0‎7‎]‎ ‎<‎+‎l‎u‎l‎d‎a‎n‎g‎s‎>‎ ‎I‎n‎ ‎a‎ ‎y‎e‎a‎r‎,‎ ‎y‎o‎u‎ ‎w‎i‎l‎l‎ ‎b‎e‎ ‎p‎o‎r‎k‎i‎n‎g‎ ‎a‎ ‎b‎a‎l‎l‎e‎r‎i‎n‎a‎ ‎f‎o‎r‎ ‎c‎h‎e‎a‎p‎ ‎l‎i‎q‎u‎o‎r‎ ‎i‎n‎ ‎a‎ ‎d‎e‎r‎e‎l‎i‎c‎t‎ ‎b‎u‎s‎ ‎s‎t‎o‎p‎,‎ ‎y‎o‎u‎ ‎t‎a‎r‎d‎.‎
[‎1‎8‎:‎0‎8‎]‎ ‎<‎+‎p‎b‎>‎ ‎c‎u‎t‎e‎
‎0‎3‎[‎1‎8‎:‎0‎8‎]‎ ‎*‎ ‎h‎a‎s‎h‎_‎ ‎(‎~‎h‎a‎s‎h‎@‎c‎h‎a‎n‎f‎i‎x‎.‎e‎f‎n‎e‎t‎.‎t‎e‎c‎h‎)‎ ‎h‎a‎s‎ ‎j‎o‎i‎n‎e‎d‎ ‎#‎I‎R‎C‎3‎0‎
[‎1‎8‎:‎0‎8‎]‎ ‎<‎+‎p‎b‎>‎ ‎b‎a‎n‎g‎ ‎y‎o‎u‎r‎ ‎c‎o‎c‎k‎ ‎o‎n‎ ‎a‎ ‎h‎a‎m‎m‎e‎r‎
[‎1‎8‎:‎0‎8‎]‎ ‎<‎+‎p‎b‎>‎ ‎h‎a‎m‎m‎e‎r‎ ‎c‎o‎c‎k‎
[‎1‎8‎:‎0‎8‎]‎ ‎<‎+‎p‎b‎>‎ ‎y‎o‎u‎r‎ ‎n‎e‎w‎ ‎n‎a‎v‎y‎ ‎n‎i‎c‎k‎n‎a‎m‎e‎
[‎1‎8‎:‎0‎8‎]‎ ‎<‎+‎p‎b‎>‎ ‎a‎y‎e‎ ‎H‎a‎m‎m‎e‎r‎ ‎C‎A‎W‎K‎!‎ ‎g‎o‎ ‎s‎w‎a‎b‎ ‎t‎h‎e‎ ‎d‎e‎c‎k‎s‎
[‎1‎8‎:‎0‎8‎]‎ ‎<‎+‎p‎b‎>‎ ‎y‎o‎u‎ ‎f‎u‎c‎k‎i‎n‎g‎ ‎c‎a‎a‎a‎w‎k‎
‎0‎3‎[‎1‎8‎:‎0‎8‎]‎ ‎*‎ ‎v‎o‎i‎c‎e‎4‎u‎ ‎s‎e‎t‎s‎ ‎m‎o‎d‎e‎:‎ ‎+‎v‎ ‎h‎a‎s‎h‎_‎
‎0‎6‎[‎1‎8‎:‎0‎8‎]‎ ‎*‎ ‎+‎p‎b‎ ‎a‎d‎a‎m‎ ‎s‎a‎n‎d‎l‎e‎r‎ ‎v‎o‎i‎c‎e‎ ‎o‎f‎ ‎c‎o‎u‎r‎s‎e‎.‎.‎.‎ ‎
[‎1‎8‎:‎0‎9‎]‎ ‎<‎@‎A‎u‎d‎a‎s‎i‎t‎y‎>‎ ‎l‎o‎l‎
[‎1‎8‎:‎0‎9‎]‎ ‎<‎+‎p‎b‎>‎ ‎A‎u‎d‎a‎s‎i‎t‎y‎,‎ ‎I‎ ‎p‎u‎t‎ ‎2‎ ‎b‎i‎g‎ ‎o‎l‎e‎ ‎d‎r‎o‎p‎s‎ ‎o‎f‎ ‎s‎o‎m‎e‎ ‎t‎i‎n‎t‎u‎r‎e‎
[‎1‎8‎:‎0‎9‎]‎ ‎<‎+‎p‎b‎>‎ ‎i‎n‎ ‎m‎y‎ ‎e‎v‎e‎n‎i‎n‎g‎ ‎t‎e‎a‎
[‎1‎8‎:‎0‎9‎]‎ ‎<‎+‎p‎b‎>‎ ‎I‎ ‎m‎a‎y‎ ‎t‎a‎l‎k‎ ‎t‎o‎ ‎a‎l‎i‎e‎n‎s‎ ‎t‎o‎n‎i‎g‎h‎t‎
[‎1‎8‎:‎0‎9‎]‎ ‎<‎@‎A‎u‎d‎a‎s‎i‎t‎y‎>‎ ‎l‎o‎l‎
[‎1‎8‎:‎0‎9‎]‎ ‎<‎+‎p‎b‎>‎ ‎s‎o‎ ‎w‎e‎ ‎g‎o‎t‎ ‎a‎ ‎l‎o‎n‎g‎ ‎j‎o‎u‎r‎n‎e‎y‎!‎
[‎1‎8‎:‎0‎9‎]‎ ‎<‎@‎A‎u‎d‎a‎s‎i‎t‎y‎>‎ ‎o‎k‎!‎
[‎1‎8‎:‎1‎0‎]‎ ‎<‎@‎A‎u‎d‎a‎s‎i‎t‎y‎>‎ ‎:‎D‎
[‎1‎8‎:‎1‎0‎]‎ ‎<‎+‎p‎b‎>‎ ‎t‎h‎e‎y‎ ‎m‎a‎d‎e‎ ‎a‎ ‎s‎o‎u‎n‎d‎ ‎
[‎1‎8‎:‎1‎0‎]‎ ‎<‎+‎p‎b‎>‎ ‎h‎a‎h‎a‎
[‎1‎8‎:‎1‎0‎]‎ ‎<‎@‎A‎u‎d‎a‎s‎i‎t‎y‎>‎ ‎y‎o‎u‎l‎l‎ ‎s‎l‎e‎e‎p‎ ‎g‎o‎o‎d‎ ‎t‎o‎n‎i‎g‎h‎t‎
[‎1‎8‎:‎1‎0‎]‎ ‎<‎+‎D‎a‎r‎n‎>‎ ‎P‎b‎ ‎a‎s‎l‎?‎
[‎1‎8‎:‎1‎0‎]‎ ‎<‎+‎p‎b‎>‎ ‎t‎h‎e‎ ‎t‎e‎a‎ ‎w‎e‎n‎t‎ ‎b‎l‎o‎o‎p‎ ‎g‎o‎o‎p‎
[‎1‎8‎:‎1‎0‎]‎ ‎<‎+‎p‎b‎>‎ ‎D‎a‎r‎n‎,‎ ‎y‎o‎u‎ ‎w‎a‎n‎n‎a‎ ‎j‎o‎i‎n‎ ‎#‎t‎e‎x‎a‎s‎4‎
[‎1‎8‎:‎1‎0‎]‎ ‎<‎+‎p‎b‎>‎ ‎1‎s‎t‎ ‎a‎n‎d‎ ‎w‎e‎ ‎e‎x‎h‎a‎n‎g‎e‎
[‎1‎8‎:‎1‎0‎]‎ ‎<‎+‎D‎a‎r‎n‎>‎ ‎H‎a‎h‎a‎
[‎1‎8‎:‎1‎0‎]‎ ‎<‎+‎p‎b‎>‎ ‎h‎a‎h‎a‎ ‎y‎o‎u‎ ‎f‎u‎c‎k‎i‎n‎g‎ ‎t‎w‎i‎t‎s‎i‎c‎l‎e‎
[‎1‎8‎:‎1‎0‎]‎ ‎<‎+‎D‎a‎r‎n‎>‎ ‎P‎i‎c‎4‎p‎i‎c‎?‎
[‎1‎8‎:‎1‎0‎]‎ ‎<‎+‎p‎b‎>‎ ‎d‎o‎n‎'‎t‎ ‎e‎v‎e‎r‎ ‎A‎S‎L‎ ‎m‎e‎ ‎a‎g‎a‎i‎n‎ ‎u‎n‎l‎e‎s‎s‎ ‎i‎t‎'‎s‎ ‎n‎u‎d‎e‎s‎
[‎1‎8‎:‎1‎0‎]‎ ‎<‎+‎w‎o‎r‎t‎h‎l‎e‎s‎s‎>‎ ‎P‎b‎:‎ ‎1‎6‎/‎f‎e‎m‎a‎l‎e‎/‎t‎o‎r‎o‎n‎t‎o‎.‎
[‎1‎8‎:‎1‎0‎]‎ ‎<‎@‎A‎u‎d‎a‎s‎i‎t‎y‎>‎ ‎l‎o‎l‎
[‎1‎8‎:‎1‎0‎]‎ ‎<‎+‎p‎b‎>‎ ‎o‎r‎ ‎I‎'‎l‎ ‎l‎o‎a‎d‎ ‎m‎y‎ ‎A‎O‎L‎H‎E‎L‎L‎ ‎u‎p‎
[‎1‎8‎:‎1‎0‎]‎ ‎<‎+‎p‎b‎>‎ ‎h‎a‎h‎a‎
[‎1‎8‎:‎1‎1‎]‎ ‎<‎@‎A‎u‎d‎a‎s‎i‎t‎y‎>‎ ‎o‎k‎ ‎d‎i‎n‎n‎e‎r‎,‎ ‎b‎b‎l‎
‎0‎6‎[‎1‎8‎:‎1‎1‎]‎ ‎*‎ ‎+‎p‎b‎ ‎d‎o‎o‎r‎ ‎c‎r‎a‎c‎k‎ ‎n‎o‎i‎s‎e‎s‎ ‎a‎l‎l‎ ‎n‎i‎g‎h‎t‎ ‎b‎a‎b‎y‎
[‎1‎8‎:‎1‎1‎]‎ ‎<‎+‎p‎b‎>‎ ‎m‎a‎k‎e‎ ‎y‎o‎u‎r‎ ‎c‎d‎ ‎r‎o‎m‎ ‎e‎j‎e‎c‎t‎
[‎1‎8‎:‎1‎1‎]‎ ‎<‎+‎D‎a‎r‎n‎>‎ ‎I‎ ‎h‎a‎v‎e‎ ‎z‎o‎n‎e‎ ‎a‎l‎a‎r‎m‎
[‎1‎8‎:‎1‎1‎]‎ ‎<‎+‎p‎b‎>‎ ‎l‎a‎t‎e‎r‎ ‎s‎k‎a‎t‎e‎r‎
[‎1‎8‎:‎1‎1‎]‎ ‎<‎@‎A‎u‎d‎a‎s‎i‎t‎y‎>‎ ‎J‎I‎M‎M‎Y‎ ‎C‎R‎A‎C‎K‎ ‎C‎O‎R‎N‎ ‎A‎N‎D‎ ‎I‎ ‎D‎O‎N‎T‎ ‎C‎A‎R‎E‎
[‎1‎8‎:‎1‎1‎]‎ ‎<‎+‎p‎b‎>‎ ‎z‎o‎n‎e‎ ‎a‎l‎a‎r‎m‎!‎ ‎h‎a‎h‎a‎
[‎1‎8‎:‎1‎1‎]‎ ‎<‎@‎A‎u‎d‎a‎s‎i‎t‎y‎>‎ ‎i‎ ‎u‎s‎e‎d‎ ‎t‎o‎ ‎h‎a‎v‎e‎ ‎z‎o‎n‎e‎ ‎a‎l‎a‎r‎m‎
[‎1‎8‎:‎1‎1‎]‎ ‎<‎@‎A‎u‎d‎a‎s‎i‎t‎y‎>‎ ‎b‎a‎c‎k‎ ‎i‎n‎ ‎t‎h‎e‎ ‎d‎a‎y‎,‎ ‎i‎t‎ ‎w‎o‎r‎k‎e‎d‎ ‎r‎e‎a‎l‎l‎y‎ ‎w‎e‎l‎l‎
[‎1‎8‎:‎1‎1‎]‎ ‎<‎+‎p‎b‎>‎ ‎I‎'‎l‎l‎ ‎h‎a‎c‎k‎ ‎t‎h‎r‎u‎ ‎t‎h‎e‎ ‎c‎o‎m‎p‎u‎s‎e‎r‎v‎ ‎c‎o‎m‎p‎a‎q‎ ‎p‎r‎e‎s‎a‎r‎i‎o‎ ‎y‎o‎u‎ ‎b‎o‎u‎t‎ ‎a‎t‎ ‎b‎e‎s‎t‎b‎u‎y‎ ‎i‎n‎ ‎1‎9‎9‎2‎
[‎1‎8‎:‎1‎1‎]‎ ‎<‎+‎p‎b‎>‎ ‎:‎P‎
[‎1‎8‎:‎1‎1‎]‎ ‎<‎+‎D‎a‎r‎n‎>‎ ‎U‎
[‎1‎8‎:‎1‎1‎]‎ ‎<‎+‎p‎b‎>‎ ‎m‎a‎y‎b‎e‎ ‎9‎8‎-‎ ‎s‎o‎u‎n‎d‎s‎ ‎m‎o‎r‎e‎ ‎a‎c‎c‎u‎r‎a‎t‎e‎ ‎o‎r‎ ‎t‎h‎e‎ ‎y‎2‎k‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎M‎a‎i‎s‎o‎n‎ ‎c‎a‎r‎r‎é‎e‎ ‎(‎F‎r‎e‎n‎c‎h‎ ‎f‎o‎r‎ ‎'‎s‎q‎u‎a‎r‎e‎ ‎h‎o‎u‎s‎e‎'‎)‎ ‎i‎s‎ ‎a‎n‎ ‎a‎n‎c‎i‎e‎n‎t‎ ‎R‎o‎m‎a‎n‎ ‎t‎e‎m‎p‎l‎e‎ ‎i‎n‎ ‎N‎î‎m‎e‎s‎,‎ ‎s‎o‎u‎t‎h‎e‎r‎n‎ ‎F‎r‎a‎n‎c‎e‎.‎ ‎I‎t‎ ‎i‎s‎ ‎a‎ ‎m‎i‎d‎-‎s‎i‎z‎e‎d‎ ‎A‎u‎g‎u‎s‎t‎a‎n‎ ‎p‎r‎o‎v‎i‎n‎c‎i‎a‎l‎ ‎t‎e‎m‎p‎l‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎i‎m‎p‎e‎r‎i‎a‎l‎ ‎c‎u‎l‎t‎,‎ ‎a‎n‎d‎ ‎o‎n‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎b‎e‎s‎t‎-‎p‎r‎e‎s‎e‎r‎v‎e‎d‎ ‎R‎o‎m‎a‎n‎ ‎t‎e‎m‎p‎l‎e‎s‎ ‎t‎o‎ ‎s‎u‎r‎v‎i‎v‎e‎ ‎i‎n‎ ‎t‎h‎e‎ ‎t‎e‎r‎r‎i‎t‎o‎r‎y‎ ‎o‎f‎ ‎t‎h‎e‎ ‎f‎o‎r‎m‎e‎r‎ ‎R‎o‎m‎a‎n‎ ‎E‎m‎p‎i‎r‎e‎.‎ ‎B‎u‎i‎l‎t‎ ‎i‎n‎ ‎t‎h‎e‎ ‎e‎a‎r‎l‎y‎ ‎1‎s‎t‎ ‎c‎e‎n‎t‎u‎r‎y‎ ‎A‎D‎,‎ ‎i‎t‎ ‎w‎a‎s‎ ‎d‎e‎d‎i‎c‎a‎t‎e‎d‎ ‎o‎r‎ ‎r‎e‎d‎e‎d‎i‎c‎a‎t‎e‎d‎ ‎t‎o‎ ‎G‎a‎i‎u‎s‎ ‎a‎n‎d‎ ‎L‎u‎c‎i‎u‎s‎ ‎C‎a‎e‎s‎a‎r‎,‎ ‎g‎r‎a‎n‎d‎s‎o‎n‎s‎ ‎a‎n‎d‎ ‎a‎d‎o‎p‎t‎e‎d‎ ‎h‎e‎i‎r‎s‎ ‎o‎f‎ ‎A‎u‎g‎u‎s‎t‎u‎s‎,‎ ‎w‎h‎o‎ ‎b‎o‎t‎h‎ ‎d‎i‎e‎d‎ ‎y‎o‎u‎n‎g‎.‎ ‎T‎h‎e‎ ‎M‎a‎i‎s‎o‎n‎ ‎c‎a‎r‎r‎é‎e‎ ‎i‎s‎ ‎s‎i‎m‎i‎l‎a‎r‎ ‎t‎o‎ ‎a‎ ‎T‎u‎s‎c‎a‎n‎-‎s‎t‎y‎l‎e‎ ‎R‎o‎m‎a‎n‎ ‎t‎e‎m‎p‎l‎e‎ ‎a‎s‎ ‎d‎e‎s‎c‎r‎i‎b‎e‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎w‎r‎i‎t‎i‎n‎g‎s‎ ‎o‎f‎ ‎V‎i‎t‎r‎u‎v‎i‎u‎s‎,‎ ‎a‎ ‎c‎o‎n‎t‎e‎m‎p‎o‎r‎a‎r‎y‎ ‎R‎o‎m‎a‎n‎ ‎w‎r‎i‎t‎e‎r‎ ‎o‎n‎ ‎a‎r‎c‎h‎i‎t‎e‎c‎t‎u‎r‎e‎.‎ ‎I‎t‎ ‎h‎a‎s‎ ‎u‎n‎d‎e‎r‎g‎o‎n‎e‎ ‎s‎e‎v‎e‎r‎a‎l‎ ‎r‎e‎s‎t‎o‎r‎a‎t‎i‎o‎n‎s‎ ‎o‎v‎e‎r‎ ‎t‎h‎e‎ ‎c‎e‎n‎t‎u‎r‎i‎e‎s‎ ‎a‎n‎d‎ ‎w‎a‎s‎ ‎i‎n‎s‎c‎r‎i‎b‎e‎d‎ ‎o‎n‎ ‎t‎h‎e‎ ‎U‎N‎E‎S‎C‎O‎ ‎l‎i‎s‎t‎ ‎o‎f‎ ‎W‎o‎r‎l‎d‎ ‎H‎e‎r‎i‎t‎a‎g‎e‎ ‎S‎i‎t‎e‎s‎ ‎i‎n‎ ‎2‎0‎2‎3‎.‎ ‎T‎h‎i‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎o‎f‎ ‎t‎h‎e‎ ‎M‎a‎i‎s‎o‎n‎ ‎c‎a‎r‎r‎é‎e‎ ‎a‎t‎ ‎e‎v‎e‎n‎i‎n‎g‎ ‎w‎a‎s‎ ‎t‎a‎k‎e‎n‎ ‎i‎n‎ ‎2‎0‎1‎9‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎K‎r‎z‎y‎s‎z‎t‎o‎f‎ ‎G‎o‎l‎i‎k‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎

B‎y‎e‎,‎ ‎g‎d‎u‎a‎i‎s‎u‎f‎d‎h‎d‎s‎f‎h‎s‎k‎a‎d‎j‎f‎h‎k‎j‎d‎s‎h‎f‎k‎j‎h‎k‎j‎d‎f‎s‎h‎k‎j‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎p‎u‎n‎c‎h‎ ‎a‎ ‎n‎i‎g‎g‎e‎r‎ ‎t‎o‎ ‎d‎e‎a‎d‎ ‎b‎y‎ ‎b‎o‎u‎n‎c‎i‎n‎g‎ ‎m‎y‎ ‎p‎o‎g‎o‎ ‎s‎t‎i‎c‎k‎ ‎o‎n‎ ‎h‎i‎s‎ ‎t‎i‎n‎y‎ ‎c‎r‎a‎n‎i‎u‎m‎.‎"
nStimm9J,NELL_01,lovejoy777,ZXBasic,Thursday 11th of April 2024 06:20:35 PM CDT,"     10 MODE7:FOR I%=0 TO 1:PRINTTAB(10,3+I%)CHR$141""NELLAN IS THIRSTY"":NEXT:PRINT''TAB(5)CHR$134""Written by Dr Furman H Smith""'TAB(2)CHR$134""Published in Recreational Computing""'TAB(11)CHR$134""magazine in 1980""
    20 PRINT''TAB(7)""""""ported shortly thereafter""'"" to the Commodore 64"""" by Steven Darnold""'''CHR$134"" Ported to BBC BASIC for the BBC Micro""'TAB(10)CHR$134""by lurkio in 2020""
    30 PRINT''TAB(7)""Ported to the Agon Light""'TAB(6)CHR$134""by Steve Lovejoy in 2024"" TAB(39,22);:PROCd(30)
   100 L%=39:a$=STRING$(30,"" ""):DIM S% 255
   105 GOSUB705:GOSUB1010:GOSUB745
   110 INPUT""Are you the only person playing? ""a$
   115 p=1:a$=LEFT$(a$,1):IFa$=""Y""THENp9=1:GOTO140
   120 IFa$<>""N""THENPRINT""Please type YES or NO"":GOTO110
   130 INPUT""How many of you will be playing? ""a$:p9=VAL(a$)
   135 IFp9<1THENPRINT""Oh, come on."":GOTO130
   140 IFp9>5THENPRINT""Sorry, that is too many."":GOTO130
   145 DIM p$(p9):i=1:INPUTLINE""What is your name? ""p$(p):p$(p)=FNt(p$(p)):GOTO150
   150 IFi=p9 THEN165 ELSE i=i+1
   155 PROCp(""Please give me the name of the next player."")
   160 INPUTp$(i):GOTO150
   165 IFp9=1 THENt2=t9 ELSE t2=4
   205 PROCrc(r):PRINT
   210 w4(r)=1:i=1+INT((r-1)/r8):j=r-r8*(i-1)
   215 ONi GOSUB220,225,230:GOTO235
   220 ONj GOTO2010,2020,2030
   225 ONj GOTO2040,2050,2060
   230 ONj GOTO2070,2080,2090
   235 FORm=1TOm9
   240 IFl(m)=r THENGOSUB265
   245 NEXTm
   250 IFRND(1)>t*(2-w4(1)-w4(3))/(7*t9)THEN260
   256 PROCb:PROCp(""A voice says, <<Type HELP if you need help.>>"")
   260 GOTO305
   265 i=1+INT((m-1)/8):j=m-8*(i-1):PROCb
   270 ONi GOTO275,280,285,290
   275 ONj GOTO2410,2420,2430,2440,2450,2460,2470,2480
   280 ONj GOTO2490,2500,2510,2520,2530,2540,2550,2560
   285 ONj GOTO2570,2580,2590,2600,2610,2620,2630,2640
   290 ONj GOTO2650
   305 PROCb:PRINT""* "";:q$=q$(1+q9*RND(1))
   310 IFRND(1)>.5THENq$=q$+"", ""+p$(p)
   315 q$=q$+""?"":PROCp(q$):VDU23,1,1;0;0;0;:INPUT""* ""a$:VDU23,1,0;0;0;0;:a$=FNt(a$):i9=LEN(a$):PRINT
   320 IF i9=0 THEN305
   325 FORi=1TOi9:IFMID$(a$,i,1)<>"" ""THENNEXT
   330 v$=LEFT$(a$,i-1):IFi=i9+1THENn$=v$:GOTO345 ELSEix=i:i=i9:NEXT:i=ix
   335 FOR j=i9 TO i STEP-1:IFMID$(a$,j,1)<>"" ""THENNEXT
   340 n$=RIGHT$(a$,i9-j):jx=j:j=i:NEXT:j=jx
   345 v=0:n=0
   350 FORi=1TOv9:IFv$(i)=v$THENv=i:i=v9:NEXT ELSENEXT
   355 FORi=1TOn9:IFn$(i)=n$THENn=i:i=n9:NEXT:i=n ELSENEXT
   357 IF 0<n AND n<9 THEN405
   360 IFv*n>0OR(v+n>0ANDv$=n$)THEN380 ELSE3505
   365 PROCp(""I don't understand ""+a$+""."")
   370 PRINT""Type LIST WORDS to see a list of""
   375 PRINT""some of the words that I understand."":GOTO 305
   380 IFn<29THEN405 ELSEIFn=29THENn=11 ELSEn=n-7
   405 IFn>4ANDn<9THENn=n-4
   410 IF n>4 OR n=0 THEN435 ELSE ON n GOTO412,416,420,424
   412 w1(r)=ABS(w1(r)):IFw1(r)=1THEN430
   414 IFw1(r)=2THENr=r-r8:GOTO605ELSE505
   416 w1(r+r8)=ABS(w1(r+r8)):IFw1(r+r8)=1THEN430
   418 IFw1(r+r8)=2THENr=r+r8:GOTO605 ELSE505
   420 w2(r+1)=ABS(w2(r+1)):IFw2(r+1)=1THEN430
   422 IFw2(r+1)=2THENr=r+1:GOTO605 ELSE505
   424 w2(r)=ABS(w2(r)):IFw2(r)=1THEN430
   426 IFw2(r)=2THENr=r-1:GOTO605 ELSE505
   430 PRINT""You can't walk through walls."":GOTO305
   435 IFn<>12ANDn<>22THENGOSUB4015ELSEGOSUB4030
   440 IF(v<=4ORv=13)ANDn=22THEN5410
   442 IFn=28ANDv<9 GOTO480
   445 IFm<>0ORv=0ORv>8THEN455
   450 PROCp(""That's not possible now, ""+p$(p)+"".""):GOTO305
   455 IFm=0ORv=15ORn=9THEN505
   460 IF 4<v AND v<9 THEN475
   465 IFl(m)>-1ANDl(m)<>r THEN470 ELSE475
   470 PROCp(""It seems that the ""+n$+"" isn't here.""):GOTO305
   475 IFv>8THEN505 ELSEIFv<5THENv=1 ELSEv=5
   480 IFn=28THENPRINT""The WATCH stays on your wrist."":GOTO305
   485 IFn=10ORn=23ORn=24THEN5980
   490 ON(v+3)/4GOSUB4045,4100
   495 GOTO235
   505 IFn<=8ANDn>0THEN5015
   510 IFn=26ORn=27THENON(n-25)GOSUB5105,5155:GOTO305
   512 IFv=0THEN365
   515 IFv<=14THENj=v-8:GOTO520 ELSEj=v-14:GOTO525
   520 ONj GOTO5205,5255,5355,5355,5405,5605
   525 ONj GOTO5705,5755,5780,5805,5980,210
   605 t=t+1:t1=t1+1
   610 IF t>t9 THEN GOSUB5155 ELSE625
   615 PROCb:PROCp(""Time is up _ the ""+STR$t9+"" scoots have passed.""):VDU7
   620 PROCb:PRINT""If you want to play again, push RETURN."":PROCd(0):RUN
   625 IFw1(r)=-1THENw1(r)=1
   630 IFw1(r+r8)=-1THENw1(r+r8)=1
   635 IFw2(r)=-1THENw2(r)=1
   640 IFw2(r+1)=-1THENw2(r+1)=1
   645 IF t1<=t2 THEN205 ELSE t1=0:IF p<p9 THEN p=p+1 ELSE p=1
   650 PROCp("" # It's ""+p$(p)+""'s turn now.""):PROCb:GOTO210
   705 PROCrc(2):PRINT
   710 PROCp(""Let's pretend that you are in an enchanted house. You should use one or two words to tell me what you want to do. I'll suggest messages at first. If you have a question while you're inside the house, type HELP."")
   735 RETURN
   745 PROCb:PROCp(""When you have read all this, please push the button that says RETURN (or ENTER)."")
   755 PROCb:PROCd(30):RETURN
  1010 :
  1015 r6=1:r7=3:r8=3:r9=r6*r7*r8:r0=r9-r8+1:r=r0
  1020 v9=20:n9=31:m9=25
  1025 DIMv$(v9),n$(n9),l(m9),n1(m9),w(m9),w4(r9),w4$(r9)
  1030 DIMw1((r6*r7+1)*r8),w2(r9+1),w1$(3),w2$(3),w3$(9)
  1035 t=0:t1=0:t9=72:c=0:c9=4
  1040 i=RND(-TIME)
  1045 q9=4:b9=4:DIMq$(q9),b$(b9)
  1110 FORi=1TOv9:READv$(i):NEXT
  1115 DATA TAKE,GET,GRAB,PICK,DROP,GIVE,OFFER,DEPOSIT,KICK,CONSULT,OPEN,UNLOCK
  1125 DATA FILL,LIST,WORTH,SIT,DRINK,HELP,GO,RELOOK
  1210 FORi=1TOn9:READn$(i):NEXT
  1215 DATA N,S,E,W,NORTH,SOUTH,EAST,WEST,DOOR,CHAIR,RABBIT,BOWL,COUPON,WRAPPER,MAP
  1225 DATA KEY,EGG,COIN,JEWEL,CATALOG,VASE,MILK,BANKER,CAT,WORDS
  1230 DATA INVENTORY,SCORE,WATCH,CHULA,KLINKOYN,NELLAN
  1320 FORj=1TO9:w3$(j)=STRING$(3,CHR$255):NEXT
  1420 FORi=0TO3:READw1$(i),w2$(i):NEXT:PROCw
  1430 DATA""##($($##"","", ,""
  1440 DATA""########"",""###""
  1450 DATA""##    ##"","" ` ""
  1460 DATA""##-*%.##"",""%,h""
  1510 FORi=0TO9:READw4$(i):w4(i)=0:NEXT
  1515 DATA""  ??  ""
  1520 DATA""Office"","" Milk "","" Store""
  1525 DATA""White "","" Gold "",""  Hot ""
  1530 DATA"" Bank "","" Green"",""  Cat ""
  1610 FORi=1TO(r6*r7+1)*r8:READw1(i):NEXT
  1615 DATA1,1,1
  1620 DATA-2.5,-2,-1
  1625 DATA-2,-1,-2
  1630 DATA1,1,1
  1710 FORi=1TOr9+1:READw2(i):NEXT
  1715 DATA1,-1,-2.5
  1720 DATA1,-2,-2
  1725 DATA1,1,-2,1
  1810 FORm=1TOm9:READl(m),n1(m):w(m)=0:NEXT
  1815 DATA1,20,6,13,0,12,0,12,0,12,2,9,3,0,0,0,7,23
  1820 DATA1,16,9,24,0,24,0,24,0,24,0,11,0,11,0,11,4,11
  1825 DATA7,15,2,14,1,0,8,18,0,17,3,19,0,21
  1830 FORi=22TO25:w(i)=25:NEXT
  1910 FORi=1TOq9:READq$(i):NEXT
  1915 DATA""What are you going to do now"",""What now""
  1920 DATA""What do you choose to do"",""What is your decision""
  1925 FORi=1TOb9:READb$(i):NEXT
  1930 DATAhappy,""glad to see you"",busy,sleepy
  1995 RETURN
  2010 PROCp(""Well, ""+p$(p)+"", you are in the Office."")
  2011 PROCp("" You are standing next to a CHAIR which is next to a desk in a room with yellow walls and brown carpet."")
  2015 PROCp("" There is a door in the south wall.""):RETURN
  2020 PROCp(""This is the Milk Room. If you have a BOWL, you can say FILL BOWL or GET MILK and have your BOWL filled with nice cold MILK. There are doorways to the south and east."")
  2024 IFl(15)=-1ANDl(6)=2 THENl(18)=0:l(17)=2
  2025 RETURN
  2030 PRINT""You are in the Store."":RETURN
  2040 PROCp(""Now you are in the White Room _ the walls are white. There is a wall to the west. You know that the Bank is through the south doorway. There's a door to the north and a doorway to the east."")
  2044 RETURN
  2050 PROCp(""All the walls in this room are painted gold. There are exits to the north, east, and west."")
  2053 IFl(15)=-1ANDl(23)=0THEN2054 ELSE RETURN
  2054 l(15)=0:l(16)=5:l(23)=5:RETURN
  2060 PROCp(""Oh, it's hot in here! You are in the Hot Room and if cold MILK were in this room, it would be warmed."")
  2062 PRINT"" The MAP shows the doorways.""
  2063 IFl(4)=-1THENl(4)=0:l(5)=-1:RETURN ELSE RETURN
  2070 PRINT""You are in a room called the Bank.""'
  2071 PROCp(""A giant carpet on the floor says, <<Welcome ""+p$(p)+"">>.""):PROCb
  2073 PROCp(""A screen says that your visit will last for ""+STR$t9+"" scoots. ""+STR$t+"" scoots have passed.""):PROCb
  2075 PRINT""To leave this room, type GO NORTH."":RETURN
  2080 PROCp(""You are standing in a room with green walls. A green CHAIR is in the corner."")
  2083 IFw1(4)<0THENRETURN ELSE PROCb:PRINT""A sign here says:""'
  2084 PRINTTAB(2)STRING$(25,CHR$95)
  2085 PRINTTAB(2)""|""TAB(9)""Magic works""TAB(26)""|""
  2086 PRINTTAB(2)""|""TAB(11)""in the""TAB(26)""|""
  2087 PRINTTAB(2)""|""TAB(7)""Enchanted House""TAB(26)""|""
  2088 PRINTTAB(2)STRING$(25,CHR$95)':RETURN
  2090 PROCp(""You are in the room where ""+n$(31)+"" lives; this room is called the Cat Room."")
  2091 RETURN
  2410 PROCp(""There is a college CATALOG from the University of Houston Victoria Campus here."")
  2411 RETURN
  2420 PROCp(""On the floor is a COUPON. According to what is written on the COUPON, if it is DROPped in the Store while the machine is working, you will receive one blue BOWL."")
  2423 RETURN
  2430 PRINT""There is a clean empty blue BOWL here."":RETURN
  2440 PRINT""The BOWL of cold MILK is here."":RETURN
  2450 PRINT""There is a blue BOWL with warm MILK."":RETURN
  2460 RETURN
  2470 PROCp(""In a corner of the room is a machine which announces that if you DEPOSIT (or DROP) a COUPON and the machine is working, you will receive whatever the coupon is good for.""):PROCj
  2473 PROCp("" If the machine doesn't work, you are invited to call the repairperson."")
  2476 RETURN
  2480 PRINT""The machine in the corner has a""
  2481 PRINT""flashing display announcing:""
  2482 PRINT""<<out of BOWLs>>."":RETURN
  2490 PROCp(""The BANKER, Mr.""+n$(30)+"", looks ""+b$(1+b9*RND(1))+""."")
  2492 IFl(23)=r0 THENPRINT""Type SCORE to check your score.""
  2494 RETURN
  2500 PRINT""There is an old brass KEY here."":RETURN
  2510 PROCp(n$(31)+"" the CAT is here. She pretty much fills up the room; she's as large as an elephant _ no kidding.""):PROCp("" In a soft polite voice she says,""):PROCj
  2512 PROCp("" <<I'd love to have some nice cold MILK. Many of my friends have tried to deliver cold MILK here and many have failed. Perhaps you, ""+p$(p)+"", would be kind enough to try. I must warn you: It will not be easy.>>"")
  2517 RETURN
  2520 PROCp(n$(31)+"" purrs and says, <<Thank you, ""+p$(p)+"", for OFFERing me this good MILK.>>"")
  2523 PROCp("" She doesn't mention that it was warm."")
  2525 l(5)=0:l(3)=9:l(12)=0:l(11)=9:RETURN
  2530 PROCp(""Wow! ""+n$(31)+"" can sure be loud when she purrs."")
  2531 PROCp("" She looks at you and says, <<""+p$(p)+"", you've made me so happy. I know that it wasn't easy to get this BOWL of cold MILK to me. You did it!"")
  2534 l(4)=0:l(3)=9:l(13)=0:l(14)=9:IFl(25)<>0THEN2537
  2535 PROCj:PROCp("" Please accept this small present.>> She offers you a small ""+n$(21)+""."")
  2536 l(25)=9
  2537 RETURN
  2540 PROCp(n$(31)+"" is napping. She's quite happy.""):RETURN
  2550 PROCp(n$(29)+"" the white RABBIT is here and she says, <<Well, my friend ""+p$(p)+"", I hope that you are enjoying your adventure.>>"")
  2552 RETURN
  2560 PROCp(n$(29)+"" hops out of your arms and scurries off. She returns and says, <<Please TAKE this golden EGG that I hid here in the Gold Room.>>"")
  2563 l(23)=5:l(15)=5:l(16)=0:c=c-1:RETURN
  2570 PROCb:PROCp(n$(29)+"" hops down and gobbles a growth of carrots that was blocking the east doorway. She smiles and says, <<Thanks, friend ""+p$(p)+"".>>"")
  2574 l(17)=0:l(15)=2:l(6)=0:c=c-1:RETURN
  2580 PROCp(""A white RABBIT is here. She hops to you and says, <<I am ""+n$(29)+"". Welcome to the Enchanted House, my friend, ""+p$(p)+"".>>"")
  2583 PROCp("" She hugs you and says, <<I have a present saved for you in the room to the east of here. If you say TAKE RABBIT (or TAKE ""+n$(29)+"") and next say GO EAST (or E or EAST), you can carry me to the Gold Room.>>"")
  2587 l(18)=0:l(15)=4:RETURN
  2590 PROCp(""There is a magic MAP here. If you GET the MAP, you may CONSULT the MAP."")
  2591 RETURN
  2600 PRINT""An old gum wrapper is on the floor."":RETURN
  2610 PROCp(""A voice says, <<Furman Smith's July 1980 Recreational Computing article helps programmers remodel this Enchanted House.>>"")
  2612 RETURN
  2620 PRINT""A heavy COIN is here."":RETURN
  2630 PRINT""A golden EGG is on the floor."":RETURN
  2640 PRINT""On the floor is a JEWEL."":RETURN
  2650 PRINT""A magnificent VASE is here."":RETURN
  3505 IFa$=""extend time""THENt9=t9+24:n=28:GOTO5315
  3995 GOTO365
  4015 IFv=0ORn=0THENm=0:RETURN
  4020 IFn<>24 ELSE IFl(11)=9 THENm=11:RETURN ELSEm=14:RETURN
  4025 FORi=1TOm9:IFn1(i)=n THENm=i:i=m9:NEXT:i=m:RETURN ELSE NEXT
  4030 m=0:IFn<>22ANDn<>12THENRETURN
  4035 FORj=3TO5:IFl(j)<>0THENm=j:NEXT ELSE NEXT
  4040 RETURN
  4045 IFl(m)=r ANDc<c9 THEN4075 ELSE IFc>=c9 THEN4055
  4050 PROCp(""You've still got the ""+n$+"".""):GOTO4140
  4055 PROCp(""You can only carry ""+STR$c9+"" objects (not counting the WATCH) and you are already carrying that much. If you really want to GET something else, then you will have to DROP something first."")
  4071 GOTO4140
  4075 IFw(m)=0THEN4090 ELSE PROCp(""Congratulations, ""+p$(p)+""!"")
  4080 PROCp(""You'll earn points when the ""+n$+"" is DEPOSITed (or DROPped) in the Bank."")
  4085 c=c+1:l(m)=-1:RETURN
  4090 PROCp(""OK, you are carrying the ""+n$+""."")
  4095 l(m)=-1:c=c+1:RETURN
  4100 IFl(m)=-1THEN PRINT""OK."":l(m)=r:c=c-1 ELSE 4135
  4105 IFr=r0 THEN GOSUB5175
  4110 IFr<>3ANDr<>9THEN RETURN
  4115 IFl(2)=3THENl(2)=0:l(3)=3:l(7)=0:l(8)=3
  4120 IFl(4)=9THENl(4)=0:l(3)=9:l(11)=0:l(13)=9
  4125 IFl(5)=9THENl(5)=0:l(3)=9:l(11)=0:l(12)=9
  4130 RETURN
  4135 PROCp(""You don't have the ""+n$+""."")
  4140 PROCp(""To see an inventory of what you're carrying, type INVENTORY.""):PROCb
  4145 RETURN
  4505 PRINT""You are in the ""FNt(w4$(r))"" Room now."";
  4510 REPEAT VDU9:UNTILPOS=36:VDU11,135:PRINT""N"";:VDU10,8,8,8,135:PRINT""W+E"";:VDU10,8,8,8,135:PRINT""S""
  4515 wc%=145+6
  4520 i2=r7*r8:FORi1=1TOr6
  4525 IF(i1-1)*i2<r AND r<=i1*i2 THEN4530 ELSE NEXT
  4530 k0=(i1-1)*i2:k9=i1*i2:k=k0:j=1
  4535 IFj=1VDUwc%
  4536 IFk=k0 ANDj=1THENPRINTw3$(7);
  4540 IFk=k0 ANDj>1ANDj<r8+1THENPRINTw3$(8);
  4545 IFk=k0 ANDj=r8+1THENPRINTw3$(9)
  4550 IFk>k0 ANDk<k9 ANDj=1THENPRINTw3$(4);
  4555 IFk>k0 ANDk<k9 ANDj>1ANDj<r8+1THENPRINTw3$(5);
  4560 IFk>k0 ANDk<k9 ANDj=r8+1THENPRINTw3$(6)
  4565 IFk=k9 ANDj=1THENPRINTw3$(1);
  4570 IFk=k9 ANDj>1ANDj<r8+1THENPRINTw3$(2);
  4575 IFk=k9 ANDj=r8+1THENPRINTw3$(3)
  4580 IFj>r8 THEN4595
  4585 IFw1(k+j)>0THENPRINTw1$(w1(k+j)); ELSE PRINTw1$(0);
  4590 j=j+1:GOTO4535
  4595 IFk=k9 THEN:GOTO305 ELSE j=1:VDUwc% : REM IFk=k9 THEN:RETURN ELSE j=1:VDUwc%
  4600 IFw2(k+j)>0THENPRINTw2$(w2(k+j)); ELSE PRINTw2$(0);
  4605 IFj>r8 THENPRINT:GOTO4620
  4610 IFw4(k+j)>0THENPRINTCHR$(129+FNrc(k+j))w4$(k+j)CHR$(145+6); ELSE PRINTCHR$(129+5)w4$(0)CHR$(145+6);
  4615 j=j+1:GOTO4600
  4620 k=k+r8:j=1:GOTO4535
  5015 IFr<>1THEN5040
  5016 IFl(10)=-1THEN5030
  5020 PROCp(""The door is locked and you're not carrying the key."")
  5025 w1(4)=3.5:GOTO305
  5030 w1(4)=2.5:r=4:GOTO605
  5040 IFr<>2THEN5070
  5041 IFl(6)<>2THEN5060
  5045 PROCp(""You cannot enter _ the doorway is blocked by a thick growth of carrots."")
  5055 w2(3)=3.5:GOTO305
  5060 r=3:w2(3)=2.5:GOTO605
  5070 IFr=4ANDl(10)<>-1THEN5020
  5071 IFr=4THEN5080
  5073 IFr>4THEN365
  5075 r=2:GOTO605
  5080 w1(4)=2.5:r=1:GOTO605
  5105 PROCp(""Your WATCH stays on your wrist for the whole visit."")
  5106 IFc=0THENPROCp("" You aren't carrying anything else.""):RETURN
  5115 PROCp("" Here is an inventory of what you're carrying:"")
  5120 FORj=1TOm9
  5125 IFl(j)=-1THENPRINTTAB(2)n$(n1(j)):NEXT ELSE NEXT
  5130 RETURN
  5155 GOSUB5175:PRINT""You have "";i;"" points out of 100.""
  5160 PROCp(""You earn points by DEPOSITing valuable things in the Bank."")
  5165 RETURN
  5175 i=0:FORj=1TOm9:IFl(j)=r0 THENi=i+w(j)
  5180 IFp9>1THENa$=""all "" ELSE a$=""""
  5185 NEXTj:IFi<100THENRETURN
  5190 PROCb:PROCp(""Mr ""+n$(30)+"" shouts, <<You ""+a$+""won!>>""):VDU7:GOTO620
  5205 PROCp(""Kicking ""+n$+"" will not help anything.""):GOTO305
  5255 IFNOT(n=11ORn=23ORn=24)THEN5305
  5260 IFl(6)=0THEN5275
  5265 PROCp(""The ""+n$(n1(m))+"" laughs and says, <<Well, I know that you know a carrot-liking RABBIT.>>"")
  5270 GOTO305
  5275 ON 2-w4(1) GOTO5280,5290
  5280 PROCp(""The ""+n$(n1(m))+"" says, <<""+p$(p)+"", I think that you're doing great.>>""):GOTO305
  5290 PROCp(""The ""+n$(n1(m))+"" smiles mysteriously and says, <<I recommend that you SIT in the CHAIR.>>"")
  5300 GOTO305
  5305 IFn=15THENGOSUB4505:GOTO305
  5310 IFn=20THENPRINT""It doesn't help here."":GOTO305
  5315 IFn=28THENPRINT;t;"" scoots have passed"":PROCj
  5320 IFn=28THENPROCp("" and ""+STR$(t9-t)+"" scoots remain.""):GOTO305
  5325 GOTO5980
  5355 IFn=9 THEN5015 ELSE5980
  5405 IFn<>12ANDn<>24THEN5980
  5406 IFn=24THENv=5:n=12:GOTO435
  5410 IFr<>2ORl(3)<>-1THEN5425
  5411 l(3)=0:l(4)=-1
  5415 PROCp(""Glurg; glurg; plink. Your BOWL has cold MILK now."")
  5420 GOTO305
  5425 IFn=22ANDm=3THENPRINT""The BOWL is empty."":n$=""BOWL""
  5430 IFv<>13ANDl(m)=r THENGOSUB4045:GOTO305
  5435 IFm=4ORm=5THENPRINT""The BOWL is still full of MILK.""
  5440 IFr<>2THENPRINT""The Milk Room has lots of MILK.""
  5445 IFl(m)>-1ORm<3ORm>5THENPRINT""You need a BOWL.""
  5450 GOTO305
  5605 IFn<>25THEN5980 ELSE PRINT""I know these verbs: "";
  5610 FORi=1TOv9:a$=v$(i):GOSUB5655:NEXT
  5615 PROCb:PRINT""I know these nouns: "";
  5620 FORi=1TOn9:a$=n$(i):GOSUB5655:NEXT
  5625 PROCb:PROCp(""I know some one-word messages (for example HELP) and I know some two-word messages (for examples FILL BOWL, OFFER MILK).""):PROCj
  5630 PROCp("" Whatever you say, I'll look at the first and last words; you could say SIT IN THE CHAIR or CONSULT THE SLEEPY MR ""+n$(30)+""."")
  5650 GOTO 305
  5655 IFPOS=1VDU8
  5656 IFL%-POS<LENa$+1PRINT
  5660 PRINTa$;:IFa$=v$(v9)ORa$=n$(n9)THENPRINT"".""ELSE PRINT"", "";
  5666 RETURN
  5705 IFm=0THEN5980
  5706 PROCp(""The ""+n$+"" is worth ""+STR$w(m)+"" points.""):IFw(m)<>0THEN305
  5710 PROCp(""The ""+n$+"" might be useful as a tool."")
  5720 IFn=11ORn=23ORn=24THENPRINT""Friends are valuable.""
  5725 IFn=20THENPROCp(""A college education is a worthwhile and stimulating experience."")
  5735 GOTO305
  5755 IFn<>10THEN5980
  5756 IFr=1ORr=8THENr=9-r:GOTO605
  5760 PRINT""There's no CHAIR in here."":GOTO305
  5780 IFn<>22THEN5980
  5781 IFl(4)=-1ORl(5)=-1THEN5790
  5785 PRINT""You're not carrying any MILK."":GOTO305
  5790 PRINT""Glug; glug."":l(4)=0:l(5)=0:l(3)=-1:GOTO305
  5805 PRINT""Lost? ""STRING$(11,"". "")""CONSULT MAP""
  5810 PRINT""Not sure what you're carrying? ""STRING$(19,"". "")""INVENTORY""
  5815 PRINT""How many scoots are left? CONSULT WATCH""
  5820 PRINT""Want room redescribed? ""STRING$(5,"". "")""RELOOK""
  5825 PRINT""What's a certain thing worth? ""STRING$(16,"". "")""WORTH that thing"";
  5830 PRINT""Examples: WORTH COIN,""'TAB(10)""WORTH CATALOG, WORTH CAT""'
  5835 PRINT""Want a hint? ""STRING$(6,"". "")""CONSULT friend"";
  5840 PRINT""Examples: CONSULT BANKER, CONSULT ""n$(29)
  5845 PRINT""Not sure how to say something?  ""STRING$(18,"". "")""LIST WORDS""
  5850 PRINT""Not sure what the clues mean --- "";
  5855 PRINT""think""'""and experiment."":GOTO 305
  5980 IFn$=v$THENPRINT""You'll need to use two words."":GOTO305
  5982 PROCp(""The ""+n$+"" is hard to ""+v$+"".""):GOTO305
  6000 DEFPROCrc(r):C%=129+FNrc(r):VDU26,12,C%:FORY%=1TO24:VDU10,8,C%:NEXT:VDU28,40-L%,24,39,0,30:ENDPROC
  6020 DEFFNrc(r):=VAL(MID$(""264620515"",r,1))
  7000 DEFPROCp($S%):LOCALA%,Z%,M%,C%,N%,T%:M%=L%:N%=LEN$S%:A%=0:Z%=M%+1-POS:REPEATIFZ%>N%Z%=N%ELSEREPEATZ%=Z%-1:C%=S%?Z%:UNTILC%=32:IFZ%<A%Z%=A%+M%
  7010 T%=S%?Z%:S%?Z%=13:PRINT$(S%+A%);:S%?Z%=T%:VDU32,-8*(POS=1):IFZ%-A%<=M%ANDPOS PRINTELSEIFC%=32A%=A%+1ELSEZ%=Z%-1
  7020 A%=Z%+1:Z%=A%+M%+1:UNTILA%>=N%:IFPOS PRINT:ENDPROC ELSEENDPROC
  8000 DEFFNb:VDU11,8:A%=&87:B%=TRUE:FORI%=1TOL%:VDU9:C%=(USR(&FFF4)AND&FF00)DIV256:IFC%=32NEXT ELSEB%=FALSE:I%=L%:NEXT
  8010 VDU10,13:=B%
  8050 DEFPROCb:IFNOT(FNb)PRINT:ENDPROC ELSEENDPROC
  9000 DEFPROCj:A%=&87:REPEATVDU8:C%=(USR(&FFF4)AND&FF00)DIV256:UNTILC%<>32:VDU9:ENDPROC
  9100 DEFFNt(s$):IFLEFT$(s$,1)="" ""REPEATs$=RIGHT$(s$,LENs$-1):UNTILLEFT$(s$,1)<>"" ""
  9110 IFRIGHT$(s$,1)="" ""REPEATs$=LEFT$(s$,LENs$-1):UNTILRIGHT$(s$,1)<>"" ""
  9120 =s$
  9200 DEFPROCd(s%):VDU 23, 0, &A0, 0; 2 : REM Clear out buffer 0. : REM *FX21,0
  9210 IF s%=0 THEN IF GET: ENDPROC ELSE TIME=0:REPEATUNTILTIME>100*s%ORINKEY(0)<>-1:ENDPROC
  9300 DEFPROCw:FORI%=0TO3:a$="""":FORJ%=1TOLENw1$(I%):C%=ASC(MID$(w1$(I%),J%,1)):IFC%=35a$=a$+CHR$255:NEXTELSEa$=a$+CHR$C%:NEXT
  9310 w1$(I%)=a$:a$="""":FORJ%=1TOLENw2$(I%):C%=ASC(MID$(w2$(I%),J%,1)):IFC%=35a$=a$+CHR$255:NEXTELSEa$=a$+CHR$C%:NEXT
  9320 w2$(I%)=a$:NEXT:ENDPROC

"
F1mcF8fx,Custom wordpress htaccess for maintenance mode,nicolaslagios,Apache Log,Thursday 11th of April 2024 05:57:31 PM CDT,"# The following htaccess code has been built on behalf of Rocket Path P.C. by Nicolas Lagios
# With this modified wordpress htaccess code, you can give full access only to one ip, while every other ip will see the comingsoon.html custom page for any request.
# As you understand, you will need to have a comingsoon.html custom page in the root. Feel free to build it as you wish.
# After that, you can visit whatismyipaddress.com, find your ip and replace !^89\.210\.33\.252$ with your own ip (numbers only)

<IfModule mod_rewrite.c>
    RewriteEngine On

    # Your custom rules
    RewriteCond %{REQUEST_URI} !^/comingsoon\.html$ [NC]
    RewriteCond %{REMOTE_ADDR} !^89\.210\.33\.355$
    RewriteRule ^(.*)$ /comingsoon.html [L,R=302]

    # WordPress default rules (if you have them)
    RewriteBase /
    RewriteRule ^index\.php$ - [L]
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule . /index.php [L]
</IfModule>

<Files ""comingsoon.html"">
    Require all granted
</Files>
"
N7eKiyDV,Генерация списка ссылок на таблицы с помощью регулярок.,gg-master,PHP,Thursday 11th of April 2024 04:57:51 PM CDT,"function generateTableIndex(&$html)
{
    /*
    Автоматически сформировать “Указатель таблиц”. Работает как оглавление, но 
    ссылки делаются на таблицы в документе. Текст ссылки такой: 
    Таблица <номер> “содержимое первой ячейки из таблицы”
    */

    // Находим все таблицы в HTML
    preg_match_all('/<(table\b[^>]*)>/sui', $html, $tables);

    $indexList = '<ul>';
    
    foreach ($tables[1] as $index => $tableHead) {
        $tableId = 'table_' . ($index + 1);

        $pattern = '/<' . preg_quote($tableHead, '/') . '>(.*?)<\/?table.*>/s';
        
        preg_match($pattern, $html, $matches);
        $table_content = $matches[0]; // извлечение найденного содержимого таблицы

        // Находим содержимое первой ячейки таблицы
        preg_match('/<t[drh][^>]*>(.*?)<\/t[drh]>/is', $table_content, $firstCell);
        $firstCellContent = trim(strip_tags($firstCell[1])); // Получаем текст из ячейки без HTML-тегов
        // print_r($firstCellContent);

        // Добавляем ссылку на таблицу в индекс
        $indexList .= '<li><a href=""#' . $tableId . '"">Таблица ' . ($index + 1) . ' ""' . $firstCellContent . '""</a></li>';

        $rep_smpl = '/<' . preg_quote($tableHead, '/') . '>/';
        $rep_on = '<' . $tableHead . ' id=""' . $tableId . '"">';
        // Добавляем идентификатор таблицы для якоря
        $new_table_content = preg_replace($rep_smpl, $rep_on, $table_content, 1);

        $html = str_replace($table_content, $new_table_content, $html);
    }

    $indexList .= '</ul>';

    return $indexList;
}"
TSD2rzwr,Untitled,dereksir,Python,Thursday 11th of April 2024 04:05:32 PM CDT,"# pip install requests
import requests

url = 'https://httpbin.io/anythinghttps://www.amazon.com/Lumineux-Teeth-Whitening-Strips-Treatments-Enamel-Safe/dp/B082TPDTM2/?th=1'
apikey = '<YOUR_ZENROWS_API_KEY>'
params = {
    'url': url,
    'apikey': apikey,
	'js_render': 'true',
	'premium_proxy': 'true',
}
response = requests.get('https://api.zenrows.com/v1/', params=params)
print(response.text)"
7QdAd1Bq,Untitled,dereksir,Python,Thursday 11th of April 2024 03:41:14 PM CDT,"# import the necessary libraries
import httpx
import random

# define your proxy list
proxy_urls = [
    ""http://20.210.113.32:8123"",
    ""http://47.56.110.204:8989"",
    ""http://50.174.214.216:80"",
    # add more proxy URLs as needed
]

# select a random proxy URL
random_proxy = random.choice(proxy_urls)

# make a request using the selected proxy
with httpx.Client(proxy=random_proxy) as client:
    r = client.get(""https://www.amazon.com/Lumineux-Teeth-Whitening-Strips-Treatments-Enamel-Safe/dp/B082TPDTM2/?th=1"")
    print(r.text)"
PtBGAPPi,Untitled,dereksir,Bash,Thursday 11th of April 2024 03:14:28 PM CDT,"{
  ""origin"": ""20.210.113.32:8888""
}

{
  ""origin"": ""47.56.110.204:3128""
}"
2gJEzy5H,Untitled,dereksir,Python,Thursday 11th of April 2024 03:09:52 PM CDT,"# import the necessary libraries
import httpx
import random

# define your proxy list
proxy_urls = [
    ""http://20.210.113.32:8123"",
    ""http://47.56.110.204:8989"",
    ""http://50.174.214.216:80"",
    # add more proxy URLs as needed
]

# select a random proxy URL
random_proxy = random.choice(proxy_urls)

# make a request using the selected proxy
with httpx.Client(proxy=random_proxy) as client:
    r = client.get(""https://httpbin.io/ip"")
    print(r.text)"
HgPQRubm,Untitled,dereksir,Python,Thursday 11th of April 2024 03:04:17 PM CDT,"# select a random proxy URL
random_proxy = random.choice(proxy_urls)

# make a request using the selected proxy
with httpx.Client(proxy=random_proxy) as client:
    r = client.get(""https://httpbin.io/ip"")
    print(r.text)"
KP56qAPY,Untitled,pascallius,Python,Thursday 11th of April 2024 02:25:48 PM CDT,"import streamlit as st
import requests
import matplotlib.pyplot as plt


# Edamam API credentials
EDAMAM_APP_ID = 'b43bfd1e'
EDAMAM_APP_KEY = '52c88b2f791a5ddecbecf76a970d8a13'


def get_recipes(food, calories_max, include_ingredient=None, exclude_ingredient=None, num_recipes=1):

    # The url with the inserted API credentials
    url = f""https://api.edamam.com/search?q={food}&app_id={EDAMAM_APP_ID}&app_key={EDAMAM_APP_KEY}""

    # get the response back and save the outputed information in a list data
    response = requests.get(url)
    data = response.json()

    # If nothing was found return none
    if 'hits' not in data or not data['hits']:
        return None

    # Filter recipes based on criteria given by user
    recipes = data['hits']
    filtered_recipes = []


    # go over all recipes which match criteria
    for hit in recipes:
        recipe = hit['recipe']
        ingredients = recipe['ingredientLines']
        calories = recipe['calories']

        # Exclude recipes with calories greater than max_calories
        if calories > calories_max:
            continue

        # search if any words mentioned in include/exclude are part of the ingredients (even subwords or lower/uppercase)
        if include_ingredient and not any(
                include_ingredient.lower() in ingredient.lower() for ingredient in ingredients):
            # if not, we go into the next for loop iteration
            continue

        if exclude_ingredient and any(exclude_ingredient.lower() in ingredient.lower() for ingredient in ingredients):
            continue

        # append them to the list of recipes we want
        filtered_recipes.append(recipe)

    # if the list is empty, we return none
    if not filtered_recipes:
        return None

    return filtered_recipes[:num_recipes]


def plot_nutrition(recipe):
    # define the advised daily amount of each ingredient
    daily_sugar = 25  # Example daily sugar amount in grams
    daily_salt = 6  # Example daily salt amount in grams
    daily_energy = 2000  # Example daily calorie amount in kcal

    # define a standard font size for better design
    fontsize = 16
    nutrients = recipe['totalNutrients']

    # Get sugar, salt, and calorie data
    sugar = nutrients.get('SUGAR', {'label': 'Sugar', 'quantity': 0})
    salt = nutrients.get('SUGAR', {'label': 'Salt', 'quantity': 0})
    energy = nutrients.get('ENERC_KCAL', {'label': 'Energy', 'quantity': 0})

    # Calculate percentage of suggested daily amounts

    sugar_percent = (sugar['quantity'] / daily_sugar) * 100
    salt_percent = (salt['quantity'] / daily_salt) * 100
    energy_percent = (energy['quantity'] / daily_energy) * 100

    banner_color = '#FF6347'  # Red color of the banner

    fig, axes = plt.subplots(1, 3, figsize=(20, 6))
    plt.style.use('ggplot')
    # The max is needed such that the counterpart is not negative if the amount is bigger than the suggested daily amount.
    # Sugar Pie Chart
    axes[0].pie([sugar_percent, max(100 - sugar_percent, 0)], labels=['', 'Remaining'], colors=[banner_color, '#20B2AA'],
                autopct='%1.1f%%',
                shadow=True, startangle=90, textprops={'fontsize': fontsize}, wedgeprops={'edgecolor': 'black'})
    axes[0].axis('equal')
    axes[0].set_title('Sugar (' + str(round(sugar['quantity'])) + ""g/"" + str(round(sugar_percent)) + ""%)"",
                     fontweight='bold', fontsize=fontsize, color='black')

    # Salt Pie Chart
    axes[1].pie([salt_percent, max(0, 100 - salt_percent)], labels=['', 'Remaining'],
                colors=[banner_color, '#20B2AA'], autopct='%1.1f%%',
                shadow=True, startangle=90, textprops={'fontsize': fontsize}, wedgeprops={'edgecolor': 'black'})
    axes[1].axis('equal')
    axes[1].set_title('Salt (' + str(round(salt['quantity'])) + ""g/"" + str(round(salt_percent)) + ""%)"",
                     fontweight='bold', fontsize=fontsize, color='black')

    # Calorie Pie Chart
    axes[2].pie([energy_percent, max(0, 100 - energy_percent)], labels=['', 'Remaining'],
                colors=[banner_color, '#20B2AA'], autopct='%1.1f%%',
                shadow=True, startangle=90, textprops={'fontsize': fontsize}, wedgeprops={'edgecolor': 'black'})
    axes[2].axis('equal')
    axes[2].set_title('Calories (' + str(round(energy['quantity'])) + ""/"" + str(round(energy_percent)) + ""%)"",
                     fontweight='bold', fontsize=fontsize, color='black')
    # Plot the graphs
    st.pyplot(fig)


# Streamlit main function
def main():
    # Streamlit page title and styling
    st.title(""Welcome to DailyCalories!"")
    # define different markdown classes for a better more standardized design
    st.markdown(
        """"""
        <style>
            body {
                background-color: #f0f0f0;
                color: #333333;
                font-family: Arial, sans-serif;
                line-height: 1.6;
            }
            .container {
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
            }
            .header {
                background-color: #007bff;
                color: white;
                padding: 20px;
                border-radius: 5px;
            }
            .subheader {
                font-size: 20px;
                font-weight: bold;
                margin-bottom: 20px;
            }
            .input {
                margin-bottom: 20px;
            }
            .button {
                background-color: #FF6347;  /* Changed button color to red */
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                cursor: pointer;
                font-size: 16px;
            }
            .button:hover {
                background-color: #D32F2F;  /* Darker red on hover */
            }
            .image {
                max-width: 100%;
                margin-bottom: 20px;
                border-radius: 5px;
            }
            .share-banner {
                background-color: #FF6347;  /* Red color for the share banner */
                color: white;
                padding: 10px;
                text-align: center;
                margin-top: 20px;
                border-radius: 5px;
            }
            .share-banner a {
                color: white;
                margin: 0 10px;
                font-size: 20px;
            }
        </style>
        """""",
        # somehow otherwise we get bugs
        unsafe_allow_html=True
    )

    # Streamlit input fields for user input
    st.write(""""""Find the best recipes tailored to your liking"""""")
    food_type = st.text_input(""Enter a Food Type:"", ""Pasta"")
    max_calories = st.number_input(""Enter Maximum Calories:"", min_value=0, step=100, value=1500)
    include_ingredient = st.text_input(""Include Ingredient (optional):"")
    exclude_ingredient = st.text_input(""Exclude Ingredient (optional):"")
    num_recipes = st.number_input(""Number of Recipes to Show:"", min_value=1, step=1, value=5)

    # Button to trigger recipe search
    if st.button(""Find Recipes"", key='find_recipes_button'):
        # Call the get_recipes function to fetch recipes
        recipes = get_recipes(food_type, max_calories, include_ingredient, exclude_ingredient, num_recipes)
        # Only do it if recipes is not none, if it were, it means that we found no recipes
        if recipes:
            # Loop over all recipes and put them into an expander
            for recipe in recipes:
                with st.expander(label=recipe['label']):
                    # Display the recipe image
                    st.markdown(f'<p style=""text-align: center"">><img src=""{recipe[""image""]}"" class=""image"">', unsafe_allow_html=True)
                    # Display the list of ingredients
                    st.subheader(""Ingredients:"")
                    for ingredient in recipe['ingredientLines']:
                        st.write(""-"" + ingredient) #put a ""-"" infront for a better design

                    # Display nutrition information and plot
                    st.subheader(""In comparison to the suggested daily intake:"")
                    plot_nutrition(recipe)

                    # Display a link to the full recipe
                    st.markdown(""Find this recipe ""+f'[here]({recipe[""url""]})')

                    # Create share message for each recipe
                    share_message = f""Check out this recipe: {recipe['label']}! It's so delicious! What an amazing site!""

                    # Social media sharing links, LinkedIn does not work anymore
                    st.markdown(f""""""<div class=""share-banner"">
                                        Share this recipe:
                                        <a href=""https://www.facebook.com/sharer/sharer.php?u=http%3A%2F%2Fdailycalories.com&quote={share_message}"" target=""_blank"">Facebook</a>
                                        <a href=""https://twitter.com/intent/tweet?text={share_message}&url=http%3A%2F%2Fdailycalories.com"" target=""_blank"">Twitter</a>
                                        <a href=""https://www.linkedin.com/sharing/share-offsite/?url=http%3A%2F%2Fdailycalories.com&summary={share_message}"" target=""_blank"">LinkedIn</a>
                                    </div>"""""", unsafe_allow_html=True)
        else:
            # Error message if no recipes found
            st.error(""No recipes found. Please try different criteria."")


# Run the Streamlit app
if __name__ == '__main__':
    main()
"
d51AMgYy,Cafeteria,Silviya7,JavaScript,Thursday 11th of April 2024 02:02:52 PM CDT,"function solve(input){

    ArrBaristas={};
    const countBarista=input.shift();

    for (let i = 0; i < countBarista; i++) {
        const [name, shift,coffees]=input[i].split(' ');
        ArrBaristas[name]={shift, allcofees:coffees.split(',')}
    }

    let k=0;
    while(k<countBarista){
          input.shift();
          k++;
    }
    let Commandline= input.shift();  
   while(Commandline !='Closed'){

    const[command,name,firsta,secondA]= Commandline.split(' / ');
     const barista=ArrBaristas[name];

     let shift, coffeType;
  switch(command){

    case 'Prepare':
        shift=firsta.trim();
        coffeType= secondA.trim();
       if(barista.shift == shift && barista.allcofees.includes(coffeType)){

        console.log(`${name.trim()} has prepared a ${coffeType.trim()} for you!`);
       }
       else{
        console.log(`${name} is not available to prepare a ${coffeType}.`);
       }
       break;

       case 'Change Shift':
        shift=firsta;          
        console.log(`${name.trim()} has updated his shift to: ${shift.trim()}`);
        barista.shift=shift;
        break;

        case 'Learn':      
        coffeType=firsta;   
        if(barista.allcofees.includes(coffeType)){    
        console.log(`${name.trim()} knows how to make ${coffeType.trim()}.`);
        }
        else{
          barista.allcofees.push(coffeType);
          console.log(`${name} has learned a new coffee type: ${coffeType}.`)
        }
        break;     
      
    }
    
    Commandline=input.shift(); 

}

for (const key in ArrBaristas) { 
      
       console.log(`Barista: ${key}, Shift: ${ArrBaristas[key].shift}, Drinks: ${ArrBaristas[key].allcofees.join(', ')}`);
    
}

}"
iBucQCvG,Stack of number,rado_dimitrov66,C++,Thursday 11th of April 2024 01:58:06 PM CDT,"#include <iostream>
using namespace std;

struct Sstack
{
	int key;
	Sstack* next;
}*start = NULL;

struct Pstack
{
	int key;
	Pstack* next;
}*start2 = NULL;

void addElement(unsigned int& countOfNumber)
{
	Sstack* s;
	s = start;
	int Snum;
	do
	{
		cout << ""Enter Positive Number: "";
		cin >> Snum;

	} while (Snum < 0);


	start = new Sstack;

	start->key = Snum;
	start->next = s;

	countOfNumber++;


	cout << ""Element added"" << endl;

	cout << endl;
}

void removeElement(bool isP)
{

	if (isP) {


		while (start2)
		{

			Pstack* s = start2;

			bool isLast = false;

			do
			{
				if (!s->next) {

					isLast = true;
					break;

				}

				if (s->next != start2) {
					s = s->next;
				}

			} while (s->next != start2);

			if (isLast)
			{
				start2 = NULL;

				delete s;

			}
			else {
				start2 = s;

				delete s;
			}
		}


	}
	else {


		while (start)
		{

			Sstack* s = start;

			bool isLast = false;

			do
			{
				if (!s->next) {

					isLast = true;
					break;

				}

				if (s->next != start) {
					s = s->next;
				}

			} while (s->next != start);


			if (isLast)
			{
				start = NULL;

				delete s;

			}
			else {
				start = s;

				delete s;


				start->next = NULL;
			}

		}


		cout << ""Element/s removed\n"";

	}

}

void printElements()
{
	Sstack* s = start;

	while (s)
	{
		cout << s->key << "" "";

		s = s->next;
	}

	cout << endl;
}

void sortElementInPStack(unsigned int countOfNumber)
{

	int* numberInStack = new int(countOfNumber);

	Sstack* s = start;

	unsigned int current;

	int count = -1;

	/*for (int i = 1; i < countOfNumber; i++)
	{

		unsigned int step = 0;

		for (int j = 0; j < i; j++) {

			if (numberInStack[j] < s->key)
			{
				step++;

			}
			else {
				break;	
			}
			
		}

		if (step > 0) {

			if (step == i - 1) {

				numberInStack[i] = s->key;
			}
			else {

				for (int j = i; j > step; j--) {

					numberInStack[j] = numberInStack[j - 1];

				}

				numberInStack[step] = s->key;
			}

		}
		else {

			for (int j = 1; j <= i; j++) {

				numberInStack[j] = numberInStack[j - 1];

				cout << numberInStack[j] << "" "";

			}

			numberInStack[0] = s->key;


		}

		s = s->next;
	}*/


	for (int i = 0; i < countOfNumber; i++)
	{
		numberInStack[i] = s->key;

		s = s->next;
	}

	for (int i = 0; i < countOfNumber; i++)
	{

		for (int j = 0; j < countOfNumber; j++)
		{
			if (j > i && i != 0 || i != j && i == 0)
			{


				if (numberInStack[i] > numberInStack[j])
				{
					count = j;
				}

				
			}
		}

		if (count > -1) {

			current = numberInStack[count];

			numberInStack[count] = numberInStack[i];

			numberInStack[i] = current;

			count = -1;

			i--;
		}
	}



	removeElement(true);

	Pstack* p = start2;

	for (int i = 0; i < countOfNumber; i++)
	{

		start2 = new Pstack;

		start2->key = numberInStack[i];

		start2->next = p;

		p = start2;


	}



	while (p)
	{
		cout << p->key << "" "";

		p = p->next;
	}



	numberInStack = NULL;

	delete[] numberInStack;

	cout << endl;
}

int main()
{
	short choice;

	unsigned int countOfNumber = 0;

	do
	{
		cout << ""[1] Add element\n[2] Remove element \n[3] Print elements\n[4] Sort by descending order\n[0] Exit\n"";
		cin >> choice;

		switch (choice)
		{
		case 1:
			system(""cls"");

			addElement(countOfNumber);

			choice = -1;

			break;
		case 2:

			system(""cls"");

			if (!start) {
				cout << ""No elements to remove\n"";
			}
			else {
				removeElement(false);
			}


			choice = -1;

			break;

		case 3:

			system(""cls"");

			if (!start) {
				cout << ""No elements to print\n"";
			}
			else {
				printElements();
			}

			choice = -1;

			break;

		case 4:

			system(""cls"");


			if (!start) {
				cout << ""No elements to sort\n"";
			}
			else {

				if (countOfNumber > 1) {
					sortElementInPStack(countOfNumber);

				}
				else {
					cout << ""Only one element\n"";
				}

			}

			choice = -1;

			break;
		default:
			break;
		}

	} while (choice < 0 || choice > 4);


}"
W3ULMEe3,Push to repo stage,PandaAcademy,Groovy,Thursday 11th of April 2024 01:45:58 PM CDT," stage ('Push to Repo') {
            steps {
                dir('ArgoCD') {
                    withCredentials([gitUsernamePassword(credentialsId: 'git', gitToolName: 'Default')]) {
                        git branch: 'main', url: 'https://github.com/Panda-Academy-Core-2-0/ArgoCD.git'
                        sh """""" cd frontend
                        sed -i ""s#$imageName.*#$imageName:$dockerTag#g"" deployment.yaml
                        git commit -am ""Set new $dockerTag tag.""
                        git push origin main
                        """"""
                    }
                }
            }
        }
    }"
58NqJPVu,Sort numbers,SaNik74,C#,Thursday 11th of April 2024 01:38:03 PM CDT,"internal class Program
{
    static void Main(string[] args)
    {
        Random random = new Random();
        int minValueRandom = 1;
        int maxValueRandom = 10;
        int minValueSizeArray = 0;
        int sizeNumberArray;
        bool isConditionMet = false;
        int[] numberArray = new int[minValueSizeArray];

        while (isConditionMet == false)
        {
            Console.Write($""Введите размер массива. Он должен быть больше 10: "");
            sizeNumberArray = Convert.ToInt32(Console.ReadLine());

            if (sizeNumberArray >= minValueSizeArray)
            {
                numberArray = new int[sizeNumberArray];
                isConditionMet = true;
            }
            else
            {
                sizeNumberArray = 0;
                Console.WriteLine(""Вы ввели значение меньше 10. Попробуйте еще раз."");
            }

            Console.Clear();
        }

        Console.WriteLine(""Вывод массива:"");

        for (int i = 0; i < numberArray.Length; i++)
        {
            numberArray[i] = random.Next(minValueRandom, maxValueRandom);
            Console.Write(numberArray[i] + "" "");
        }

        Console.WriteLine();

        for (int i = 0; i < numberArray.Length; i++)
        {
            for (int j = 0; j < numberArray.Length; j++)
            {
                int tempNumber;

                if (numberArray[i] < numberArray[j])
                {
                    tempNumber = numberArray[i];
                    numberArray[i] = numberArray[j];
                    numberArray[j] = tempNumber;
                }
            }
        }

        Console.WriteLine();
        Console.WriteLine(""Вывод отсортированного массива:"");

        for (int i = 0; i < numberArray.Length; i++)
        {
            Console.Write(numberArray[i] + "" "");
        }

        Console.ReadKey();
    }
}"
EB8wuRdg,Untitled,bakhridinova,Java,Thursday 11th of April 2024 01:35:51 PM CDT,"package com.epam.uni.utils;

import lombok.experimental.UtilityClass;

@UtilityClass
public class Constants {
    // formats
    public String DATE_FORMAT = ""yyyy-MM-dd"";
    public String DATE_TIME_FORMAT = ""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"";

    // columns
    public String LONGITUDE_COLUMN = ""lng"";
    public String LATITUDE_COLUMN = ""lat"";
    public String COUNTRY_COLUMN = ""country"";
    public String CITY_COLUMN = ""city"";
    public String DATE_COLUMN = ""date"";
    public String DATE_TIME_COLUMN = ""date_time"";
    public String WEATHER_DATE_COLUMN = ""wthr_date"";

    // other
    public String PATH_TO_OUTPUT_DIRECTORY = ""src/main/resources/result"";
    public String PATH_TO_RECEIPT_RESTAURANTS_DATASET_DIRECTORY = ""src/main/resources/receipt_restaurants"";
    public String PATH_TO_WEATHER_DATASET_DIRECTORY = ""src/main/resources/weather"";
}

package com.epam.uni;

import org.apache.spark.sql.*;
import org.apache.spark.sql.streaming.StreamingQuery;
import org.apache.spark.sql.types.StructType;

import static com.epam.uni.utils.Constants.*;
import static org.apache.spark.sql.functions.*;

public class StreamingApplication {
    public static void main(String[] args) throws Exception {
        SparkSession spark = SparkSession.builder()
            .appName(""spark practice"")
            .master(""local[*]"")
            .getOrCreate();

        Dataset<Row> staticReceipts = readReceiptsData(spark);
        Dataset<Row> staticWeather = readWeatherData(spark);
        Dataset<Row> enrichedReceipts = enrichAndFilterData(staticReceipts, staticWeather);

        Dataset<Row> calculatedReceipts = calculateFields(enrichedReceipts);
        calculatedReceipts.write().csv(PATH_TO_OUTPUT_DIRECTORY);

        Dataset<Row> streamingData = readStream(spark, calculatedReceipts.schema());
        Dataset<Row> processedData = applyAdditionalLogic(streamingData);
        writeStream(processedData);
    }

    private static Dataset<Row> readReceiptsData(SparkSession spark) {
        return spark.read().format(""csv"")
            .option(""header"", ""true"")
            .load(PATH_TO_RECEIPT_RESTAURANTS_DATASET_DIRECTORY)
            .withColumn(DATE_COLUMN, to_date(to_timestamp(col(DATE_TIME_COLUMN), DATE_TIME_FORMAT), DATE_FORMAT))
            .withColumn(LATITUDE_COLUMN, round(col(LATITUDE_COLUMN), 2))
            .withColumn(LONGITUDE_COLUMN, round(col(LONGITUDE_COLUMN), 2));
    }

    private static Dataset<Row> readWeatherData(SparkSession spark) {
        return spark.read().format(""csv"")
            .option(""header"", ""true"")
            .load(PATH_TO_WEATHER_DATASET_DIRECTORY)
            .withColumn(DATE_COLUMN, to_date(to_timestamp(col(WEATHER_DATE_COLUMN), DATE_TIME_FORMAT), DATE_FORMAT))
            .withColumn(LATITUDE_COLUMN, round(col(LATITUDE_COLUMN), 2))
            .withColumn(LONGITUDE_COLUMN, round(col(LONGITUDE_COLUMN), 2));
    }
    private static Dataset<Row> enrichAndFilterData(Dataset<Row> receipts, Dataset<Row> weather) {
        Dataset<Row> enrichedReceipts = receipts.join(weather,
            receipts.col(DATE_COLUMN).equalTo(weather.col(DATE_COLUMN))
                .and(receipts.col(LATITUDE_COLUMN).equalTo(weather.col(LATITUDE_COLUMN)))
                .and(receipts.col(LONGITUDE_COLUMN).equalTo(weather.col(LONGITUDE_COLUMN)))
        );

        enrichedReceipts = enrichedReceipts.drop(
            DATE_COLUMN,
            CITY_COLUMN, COUNTRY_COLUMN,
            LATITUDE_COLUMN, LONGITUDE_COLUMN
        );

        return enrichedReceipts.filter(col(""avg_tmpr_c"").gt(0));
    }

    private static Dataset<Row> calculateFields(Dataset<Row> data) {
        return data.withColumn(""real_total_cost"",
            col(""total_cost"")
                .minus(col(""total_cost"")
                    .multiply(col(""discount"")))
        );
    }

    private static Dataset<Row> readStream(SparkSession spark, StructType schema) {
        return spark.readStream().format(""csv"")
            .option(""header"", ""true"")
            .schema(schema)
            .load(PATH_TO_RECEIPT_RESTAURANTS_DATASET_DIRECTORY);
    }

    private static Dataset<Row> applyAdditionalLogic(Dataset<Row> data) {
        return data.withColumn(""promo_cold_drinks"",
            col(""avg_tmpr_c"").gt(25));
    }

    private static void writeStream(Dataset<Row> data) throws Exception {
        StreamingQuery query = data.writeStream()
            .outputMode(""append"")
            .format(""csv"")
            .option(""path"", PATH_TO_OUTPUT_DIRECTORY)
            .option(""checkpointLocation"", ""/path/to/checkpoint"")
            .start();

        query.awaitTermination();
    }
}
"
dEgA3jNX,gen,Mirioshoku,JSON,Thursday 11th of April 2024 01:22:05 PM CDT,"{""type"":""web""}"
brDJtjmn,The Thing - BIO 2024 Round 2,erek1e,C++,Thursday 11th of April 2024 01:12:56 PM CDT,"/**
 * @file thing.cpp
 * @version 1.0
 * @date 2024-03-30
 * 
 * usage:
 *      Read from / write to default input.txt and output.txt
 *          thing.exe
 *      Read from / write to custom files:
 *          thing.exe in.txt out.txt
 */
#include <iostream>
#include <vector>
#include <algorithm>
#include <bitset>
#include <set>
#include <cassert>

using namespace std;

void fileIO(int argc, char *argv[]);

const int n = 1024; // n*n grid; solution assumes n is not very small (e.g. n > 10)

bitset<n+1> grid[n+1]; // adding ones to allow overflows without errors
int countParity[2];
set<pair<int, int>> sorted[2];
set<pair<int, int>> movedAway;

inline void add(int x, int y) {
    grid[x][y] = true;
    sorted[(x+y)&1].emplace(x, y);
    ++countParity[(x+y)&1];
}
inline void remove(int x, int y) {
    grid[x][y] = false;
    sorted[(x+y)&1].erase({x, y});
    --countParity[(x+y)&1];
    if (movedAway.count({x, y})) movedAway.erase({x, y});
}
inline void annihilate(int x, int y, bool inX) {
    assert(grid[x][y]);
    remove(x, y);
    if (inX) {
        assert(grid[x+1][y]);
        remove(x+1, y);
        cout << ""H "" << x << ' ' << y << '\n';
    } else {
        assert(grid[x][y+1]);
        remove(x, y+1);
        cout << ""V "" << x << ' ' << y+1 << '\n';
    }
}
inline void annihilate(int x1, int y1, int x2, int y2) {
    assert(abs(x1-x2) + abs(y1-y2) == 1);
    annihilate(min(x1, x2), min(y1, y2), x1!=x2);
}
inline void clean() {
    // remove any adjacent pairs
    for (int x = 0; x < n; ++x) {
        for (int y = 0; y < n; ++y) {
            if (grid[x][y]) {
                if (grid[x][y+1]) annihilate(x, y, false);
                else if (grid[x+1][y]) annihilate(x, y, true);
            }
        }
    }
}
inline void expand(int x, int y) {
    assert(0 < x && x+1 < n && 0 < y && y+1 < n && grid[x][y]);
    assert(!grid[x][y-1] && !grid[x-1][y] && !grid[x+1][y] && !grid[x][y+1]);
    remove(x, y);
    add(x-1, y), add(x, y-1), add(x+1, y), add(x, y+1);
    cout << ""E "" << x << ' ' << y << '\n';
}
inline bool canMoveTwo(int x, int y, int dx, int dy) {
    if (!grid[x][y] || grid[x+1][y] || grid[x][y+1] || grid[x][y-1] || grid[x-1][y]) return false;
    int x0 = x, y0 = y, x1 = x, y1 = y;
    if (dx) x0 += dx, x1 += dx, y0 -= 1, y1 += 1;
    else x0 -= 1, x1 += 1, y0 += dy, y1 += dy;
    if (grid[x0][y0] || grid[x1][y1] || grid[x+dx+dx][y+dy+dy]) return false;
    return true;
}
inline void moveTwo(int x, int y, int dx, int dy) {
    assert(canMoveTwo(x, y, dx, dy));
    expand(x, y);
    expand(x+dx, y+dy);
    annihilate(x, y, x-dx, y-dy);
    if (dx) {
        annihilate(x, y+1, x+dx, y+1);
        annihilate(x, y-1, x+dx, y-1);
    } else {
        annihilate(x+1, y, x+1, y+dy);
        annihilate(x-1, y, x-1, y+dy);
    }
}
inline bool comfortablyIn(int x, int y) {
    return x-2 >= 0 && y-2 >= 0 && x+2 < n && y+2 < n;
}
inline pair<int, int> occupiedSurrounding(int x, int y) {
    int x2 = x, y2 = y;
    if (grid[x-1][y]) x2-=1;
    else if (grid[x+1][y]) x2+=1;
    else if (grid[x][y-1]) y2-=1;
    else if (grid[x][y+1]) y2+=1;
    else x2 = -1, y2 = -1;
    return {x2, y2};
}
void cancelPair() {
    auto [xa, ya] = *prev(sorted[0].end());
    auto [xb, yb] = *prev(sorted[1].end());
    int a = 0, b = 1;
    if (make_pair(xa, ya) > make_pair(xb, yb)) {
        swap(a, b);
        swap(xa, xb);
        swap(ya, yb);
    }

    if (!movedAway.count({xb, yb})) {
        moveTwo(xb, yb, +1, 0); // separate (xb, yb) from the rest
        xb += 2;
        movedAway.emplace(xb, yb);
    }
    
    // move (xa, ya) towards (xb, yb)
    while (abs(xa-xb) + abs(ya-yb) > 1) {
        // move vertically first
        int dx = +1, dy = 0;
        if (xa >= xb-1) {
            dx = 0;
            dy = yb > ya ? +1 : -1;
        }
        if (canMoveTwo(xa, ya, dx, dy)) {
            moveTwo(xa, ya, dx, dy);
            xa += 2*dx, ya += 2*dy;
        } else {
            // none of the same colour should be in the way since we move vertically first
            // so there is a cell of opposite colour
            auto [xb2, yb2] = occupiedSurrounding(xa, ya);
            assert(xb2 != -1);
            // annihilate with that instead
            annihilate(xa, ya, xb2, yb2);
            break;
        }
    }
    if (grid[xa][ya]) annihilate(xa, ya, xb, yb);
}

int main(int argc, char *argv[]) {
    fileIO(argc, argv); // remove for standard input/output
    
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

    int c; cin >> c;
    for (int i = 0; i < c; ++i) {
        int x, y; cin >> x >> y;
        add(x, y);
    }
    int option = abs(countParity[0]-countParity[1]) % 5;
    cout << min(option, 5-option) << endl;
    clean();
    
    if ((!countParity[0] || !countParity[1]) && countParity[0] + countParity[1] <= 2) return 0;

    // move everything up once if they are not too close to the boundary
    set<pair<int, int>>::iterator it[2]{sorted[0].begin(), sorted[1].begin()};
    while (it[0] != sorted[0].end() || it[1] != sorted[1].end()) {
        int par = 1;
        if (it[1] == sorted[1].end() || (it[0] != sorted[0].end() && *it[0] < *it[1])) {
            par = 0;
        }
        auto [x, y] = *it[par];
        ++it[par];
        if (comfortablyIn(x-2, y) && canMoveTwo(x, y, -1, 0)) {
            moveTwo(x, y, -1, 0);
        }
    }

    // now the last four rows should be empty
    if (countParity[0]) assert(prev(sorted[0].end())->first < n-4);
    if (countParity[1]) assert(prev(sorted[1].end())->first < n-4);

    while ((countParity[0] && countParity[1]) || countParity[0] + countParity[1] > 2) {
        if (countParity[0] && countParity[1]) cancelPair();
        else {
            int a = sorted[0].empty() ? 1 : 0;
            auto [x, y] = *prev(sorted[a].end());
            expand(x, y);
        }
    }
    return 0;
}

void fileIO(int argc, char *argv[]) {
    const char * in = ""input.txt"", * out = ""output.txt"";
    if (argc > 1) in = argv[1];
    if (argc > 2) out = argv[2];
    freopen(in, ""r"", stdin);
	freopen(out, ""w"", stdout);
}
"
ikPxgiP4,Interference - BIO 2024 Round 2,erek1e,C++,Thursday 11th of April 2024 01:10:44 PM CDT,"/**
 * @file interference.cpp
 * @version 4.0 (of problem statement)
 * @date 2024-04-01
 * 
 * usage:
 *      Read from / write to default input.txt and output.txt
 *          interference.exe
 *      Read from / write to custom files:
 *          interference.exe in.txt out.txt
 */
#include <iostream>
#include <vector>
#include <functional>
#include <cassert>

using namespace std;

void fileIO(int argc, char *argv[]);

int main(int argc, char *argv[]) {
    fileIO(argc, argv); // remove for standard input/output
    
    int s, d; cin >> s >> d;
    vector<int> f(1+s);
    // set f to 3 for all nodes in disrepair
    for (int i = 0; i < d; ++i) {
        int disrepair; cin >> disrepair;
        f[disrepair] = 3;
    }

    vector<vector<pair<int, bool>>> g(1+s);
    for (int u, v, w; cin >> u >> v >> w && u != -1; ) {
        g[u].emplace_back(v, w);
        g[v].emplace_back(u, w);
    }

    function<void(int, int)> dfsSetup = [&](int node, int parent = 0) {
        f[node] = 1;
        for (auto [child, far] : g[node]) {
            if (child != parent) {
                if (f[child]) {
                    assert(f[child] == 3);
                    if (!far) f[node] = 2;
                } else {
                    dfsSetup(child, node);
                    assert(f[child] < 3); // roots are always assigned values < 3, we will flip the subtrees later if we want this to be a far edge
                }
            }
        }
    };
    function<void(int, int, bool)> dfsCorrect = [&](int node, int parent = 0, bool flipSubtree = false) {
        for (auto [child, far] : g[node]) {
            if (child != parent) {
                assert(f[child]);
                if (f[child] != 3) dfsCorrect(child, node, flipSubtree ^ far);
            }
        }
        if (flipSubtree) f[node] = 6 - f[node];
    };

    for (int i = 1; i <= s; ++i) {
        if (!f[i]) {
            dfsSetup(i, 0);
            dfsCorrect(i, 0, false);
        }
        cout << f[i] << '\n';
    }
    return 0;
}

void fileIO(int argc, char *argv[]) {
    const char * in = ""input.txt"", * out = ""output.txt"";
    if (argc > 1) in = argv[1];
    if (argc > 2) out = argv[2];
    freopen(in, ""r"", stdin);
	freopen(out, ""w"", stdout);
}
"
SPDpTaiU,Untitled,Josif_tepe,C++,Thursday 11th of April 2024 12:52:47 PM CDT,"#include <iostream>
#include <vector>
#include <queue>
using namespace std;
typedef long long ll;
typedef vector<vector<int>> matrix;
const int maxn = 1e5 + 10;
const int INF = 2e9;

matrix multiply_by_k(matrix A, int k) {
    matrix res = A;
    int n = (int) A.size(), m = (int) A[0].size();
    
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            res[i][j] *= k;
        }
    }
    return res;
}
matrix add_two_matrices(matrix A, matrix B) {
    int n_a = (int) A.size(), m_a = (int) A[0].size();
    int n_b = (int) B.size(), m_b = (int) B[0].size();
    
    if(n_a == n_b and m_a == m_b) {
        matrix res = A;
        for(int i = 0; i < n_a; i++) {
            for(int j = 0; j < m_a; j++) {
                res[i][j] = A[i][j] + B[i][j];
            }
        }
        return res;
    }
    cout << ""Dimenziite na matricite treba da se isti za da mozhe da gi sobereme istite"" << endl;
    return {{0}};
}
matrix subtract_two_matrices(matrix A, matrix B) {
    int n_a = (int) A.size(), m_a = (int) A[0].size();
    int n_b = (int) B.size(), m_b = (int) B[0].size();
    
    if(n_a != n_b or m_a != m_b) {
        cout << ""Dimenziite na matricite treba da se isti za da mozhe da gi sobereme istite"" << endl;
        return {{0}};
    }
    matrix res = A;
    for(int i = 0; i < n_a; i++) {
        for(int j = 0; j < m_a; j++) {
            res[i][j] = A[i][j] - B[i][j];
        }
    }
    return res;
}
matrix multiply_two_matrices(matrix A, matrix B) {
    int n_a = (int) A.size(), m_a = (int) A[0].size();
    int n_b = (int) B.size(), m_b = (int) B[0].size();
    
    if(m_a != n_b) {
        cout << ""Matricite ne mozhat da se mnozhat"" << endl;
        return {{0}};
    }
    matrix res(n_a, vector<int>(m_b, 0));
    for(int i = 0; i < n_a; i++) {
        for(int j = 0; j < m_b; j++) {
            int c = 0;
            for(int k = 0; k < n_a; k++) {
                c += A[i][k] * B[k][j];
            }
            res[i][j] = c;
        }
    }
    
    return res;
}
int determinant_of_matrix(matrix A) {
    int sz = (int) A.size();
    if(sz == 2) {
        return (A[0][0] * A[1][1]) - (A[0][1] * A[1][0]);
    }
    int determinant = 0;
    int sign = 1;
    for(int i = 0; i < sz; i++) {
        int n = 0, m = 0;
        
        matrix tmp(sz - 1, vector<int>(sz - 1, 0));
        for(int j = 0; j < sz; j++) {
            for(int k = 0; k < sz; k++) {
                if(j != 0 and k != i) {
                    tmp[n][m] = A[j][k];
                    if(m < sz - 2) {
                        m++;
                    }
                    else {
                        m = 0;
                        n++;
                    }
                }
            }
            
        }
        determinant = determinant + sign*(A[0][i]) * determinant_of_matrix(tmp);
        sign *= -1;
    }
    return determinant;
}
void print(matrix A) {
    int n = (int) A.size(), m = (int) A[0].size();
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cout << A[i][j] << "" "";
        }
        cout << endl;
    }
    cout << endl;
}
int main() {
    matrix A = {
        {1, 3, 5, 9},
        {1, 3, 1, 7},
        {4, 3, 9, 7},
        {5, 2, 0, 9}
        
    };
    matrix B = {
        {1, 2, 3},
        {4, 5, 6},
        
    };
    
    cout << determinant_of_matrix(A) << endl;
    return 0;
}
"
4CctiWLt,Untitled,Josif_tepe,C++,Thursday 11th of April 2024 12:03:53 PM CDT,"#include <iostream>
#include <vector>
#include <queue>
using namespace std;
typedef long long ll;
typedef vector<vector<int>> matrix;
const int maxn = 1e5 + 10;
const int INF = 2e9;

matrix multiply_by_k(matrix A, int k) {
    matrix res = A;
    int n = (int) A.size(), m = (int) A[0].size();
    
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            res[i][j] *= k;
        }
    }
    return res;
}
matrix add_two_matrices(matrix A, matrix B) {
    int n_a = (int) A.size(), m_a = (int) A[0].size();
    int n_b = (int) B.size(), m_b = (int) B[0].size();
    
    if(n_a == n_b and m_a == m_b) {
        matrix res = A;
        for(int i = 0; i < n_a; i++) {
            for(int j = 0; j < m_a; j++) {
                res[i][j] = A[i][j] + B[i][j];
            }
        }
        return res;
    }
    cout << ""Dimenziite na matricite treba da se isti za da mozhe da gi sobereme istite"" << endl;
    return {{0}};
}
matrix subtract_two_matrices(matrix A, matrix B) {
    int n_a = (int) A.size(), m_a = (int) A[0].size();
    int n_b = (int) B.size(), m_b = (int) B[0].size();
    
    if(n_a != n_b or m_a != m_b) {
        cout << ""Dimenziite na matricite treba da se isti za da mozhe da gi sobereme istite"" << endl;
        return {{0}};
    }
    matrix res = A;
    for(int i = 0; i < n_a; i++) {
        for(int j = 0; j < m_a; j++) {
            res[i][j] = A[i][j] - B[i][j];
        }
    }
    return res;
}
matrix multiply_two_matrices(matrix A, matrix B) {
    int n_a = (int) A.size(), m_a = (int) A[0].size();
    int n_b = (int) B.size(), m_b = (int) B[0].size();
    
    if(m_a != n_b) {
        cout << ""Matricite ne mozhat da se mnozhat"" << endl;
        return {{0}};
    }
    matrix res(n_a, vector<int>(m_b, 0));
    for(int i = 0; i < n_a; i++) {
        for(int j = 0; j < m_b; j++) {
            int c = 0;
            for(int k = 0; k < n_a; k++) {
                c += A[i][k] * B[k][j];
            }
            res[i][j] = c;
        }
    }
    
    return res;
}
void print(matrix A) {
    int n = (int) A.size(), m = (int) A[0].size();
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cout << A[i][j] << "" "";
        }
        cout << endl;
    }
    cout << endl;
}
int main() {
    matrix A = {
        {1, 2},
        {3, 4}
        
    };
    matrix B = {
        {1, 2, 3},
        {4, 5, 6},
        
    };
    
    matrix multiplied_by_k = multiply_by_k(A, 2);
    print(multiplied_by_k);
    
    matrix add_two_matrix = add_two_matrices(A, B);
    print(add_two_matrix);
    
    
    matrix subtrac_two_matrix = subtract_two_matrices(A, B);
    print(subtrac_two_matrix);
    
    matrix multiplication_two_matrices = multiply_two_matrices(A, B);
    print(multiplication_two_matrices);
    return 0;
}
"
ZvzaQpSp,Untitled,ABCD12399,C++,Thursday 11th of April 2024 11:57:04 AM CDT,"class Solution {
public:
 bool check(vector<vector<char>> &board, int no, int r, int c){
    // row
    for(int i = 0 ; i < 9 ; i++ ){
        if(board[i][c]==no)return false;
    }
    // column
    for(int j = 0 ; j < 9 ; j++ ){
        if(board[r][j]==no)return false;
    }
    // box
    int a = r%3;
    int b = c%3;
    int topLeftr = r-a;
    int topLeftc = c-b;
    for(int i = topLeftr ; i< topLeftr + 3 ; i ++){
        for(int j = topLeftc ; j < topLeftc + 3 ; j++){
            if(board[i][j]==no)return false;
        }
    }
    return true;
}
 bool findEmpty(vector<vector<char>> &board, int &r, int &c){
    for(int i = 0;i<9;i++){
        for(int j = 0 ;j<9;j++){
            if(board[i][j]=='.'){ 
                r = i;
                c = j;
                return true;
            }
            c++;
        }
        r++;
    }
    return false;
}

 bool solve(vector<vector<char>> &board){
    int r,c;
    if(!findEmpty(board, r, c)){
        return true;
    }
    for(char i = '1'; i<='9' ; i++){
        if(check(board, i, r, c)){
            board[r][c]=i;
        }
        bool flag = solve(board);
        if(flag){
            return true;
        }
        board[r][c]='.';
    }
    return false;
}
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
};"
U6trLTCs,Untitled,Josif_tepe,C++,Thursday 11th of April 2024 11:35:39 AM CDT,"#include <iostream>
#include <vector>
#include <queue>
using namespace std;
typedef long long ll;
typedef vector<vector<int>> matrix;
const int maxn = 1e5 + 10;
const int INF = 2e9;

matrix multiply_by_k(matrix A, int k) {
    matrix res = A;
    int n = (int) A.size(), m = (int) A[0].size();
    
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            res[i][j] *= k;
        }
    }
    return res;
}
matrix add_two_matrices(matrix A, matrix B) {
    int n_a = (int) A.size(), m_a = (int) A[0].size();
    int n_b = (int) B.size(), m_b = (int) B[0].size();
    
    if(n_a == n_b and m_a == m_b) {
        matrix res = A;
        for(int i = 0; i < n_a; i++) {
            for(int j = 0; j < m_a; j++) {
                res[i][j] = A[i][j] + B[i][j];
            }
        }
        return res;
    }
    cout << ""Dimenziite na matricite treba da se isti za da mozhe da gi sobereme istite"" << endl;
    return {{0}};
}
matrix subtract_two_matrices(matrix A, matrix B) {
    int n_a = (int) A.size(), m_a = (int) A[0].size();
    int n_b = (int) B.size(), m_b = (int) B[0].size();
    
    if(n_a != n_b or m_a != m_b) {
        cout << ""Dimenziite na matricite treba da se isti za da mozhe da gi sobereme istite"" << endl;
        return {{0}};
    }
    matrix res = A;
    for(int i = 0; i < n_a; i++) {
        for(int j = 0; j < m_a; j++) {
            res[i][j] = A[i][j] - B[i][j];
        }
    }
    return res;
}
void print(matrix A) {
    int n = (int) A.size(), m = (int) A[0].size();
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cout << A[i][j] << "" "";
        }
        cout << endl;
    }
    cout << endl;
}
int main() {
    matrix A = {
        {3, 2, 0},
        {1, 1, 2},
        {4, 5, 9}
    };
    matrix B = {
        {1, 1, 1},
        {1, 1, 1},
        {1, 1, 1}
    };
    
    matrix multiplied_by_k = multiply_by_k(A, 2);
    print(multiplied_by_k);
    
    matrix add_two_matrix = add_two_matrices(A, B);
    print(add_two_matrix);
    
    
    matrix subtrac_two_matrix = subtract_two_matrices(A, B);
    print(subtrac_two_matrix);
    return 0;
}
"
YFEf8QTc,Set Icon Theme for Thunar/Linux Desktop,metalx1000,Bash,Thursday 11th of April 2024 11:17:40 AM CDT,"#install a theme
sudo apt install papirus-icon-theme

#list themes
ls -I ""*.*"" /usr/share/icons

# set theme
vim ~/.config/gtk-3.0/settings.ini

#in that file set theme
gtk-icon-theme-name=Papirus

# If working with thunar, be sure to kill and restart thunar"
87TFw1g5,vector 1,LEGEND2004,C++,Thursday 11th of April 2024 11:16:02 AM CDT,"#pragma GCC optimize(""O3"")
#include <bits/stdc++.h>
using namespace std;

#define int long long
#define double long double
#define _FastIO ios_base::sync_with_stdio(0); cin.tie(0)

signed main()
{
    _FastIO;

    int n;
    cin >> n;

    // static array
    //int a[n];
    
    // dynamic array

    vector<int> a(n); // size = n ,
    /*for(int i = 0; i < n; i++){
        cin >> a[i];
    }*/

    a.push_back(5);
    cout << a.size() << '\n';
    for(int i = 0; i < a.size(); i++){
        cout << a[i] << "" "";
    }
    cout << '\n';
    cout << a.back();

    /*
    string s;
    cin >> s; // Aa0bcBC123
    sort(s.begin() , s.end());
    cout << s; // 0123ABCabc
    */
    // 0 0 0 5


}
"
npyy8qDY,Untitled,dereksir,Python,Thursday 11th of April 2024 10:49:14 AM CDT,"# import the necessary libraries
import httpx
import random

# define your proxy list
proxy_urls = [
    ""http://20.210.113.32:8123"",
    ""http://47.56.110.204:8989"",
    ""http://50.174.214.216:80"",
    # add more proxy URLs as needed
]"
fuX051WR,Untitled,dereksir,Python,Thursday 11th of April 2024 10:11:57 AM CDT,"import httpx

# define your proxy settings
proxy_url = ""http://username:password@216.137.184.253:80""

# create a client with the specified proxy and credentials
with httpx.Client(proxy=proxy_url) as client:
    # make requests using the client
    r = client.get(""https://httpbin.io/ip"")

print(r.text)"
suUpVVVx,sql_trains,SillyWolfy,Python,Thursday 11th of April 2024 10:02:16 AM CDT,"import psycopg2
def get_conn():
    return psycopg2.connect(dbname='postgres', user='postgres', password='1234', host='localhost')


def create_table_if_not_exist():
    # Подключаемся к базе данных
    conn = get_conn()
    c = conn.cursor()
    # Создание таблицы, если она не существует
    c.execute('''CREATE TABLE IF NOT EXISTS trains (TEAM bigint, ROUND integer, TRY integer, OR_NUM integer, CUR_NUM integer, SCORE integer)''')
    conn.commit()  # Фиксация изменений

    conn.close()


def check_user_exists(user_id):
    try:
        conn = get_conn()
        with conn.cursor() as cur:
            # Проверяем существование пользователя с заданным user_id
            cur.execute(""SELECT COUNT(*) FROM trains WHERE TEAM = %s"", (user_id,))
            count = cur.fetchone()[0]  # Получаем количество записей с user_id
            if count > 0:
                return 1  # Пользователь существует
            else:
                return 0  # Пользователь не существует
    finally:
        conn.close()

def update_round(user_id, new_original_place):
    try:
        conn = get_conn()
        with conn.cursor() as cur:
            cur.execute(""UPDATE trains SET ROUND=ROUND+1, TRY=6, OR_NUM=%s, CUR_NUM=%s WHERE TEAM=%s"",
              (new_original_place, new_original_place, user_id))

            conn.commit()  # Фиксация изменений

    finally:
        conn.close()

def minus_try(user_id):
    try:
        conn = get_conn()  # Предполагается, что эта функция возвращает соединение с базой данных
        with conn.cursor() as cur:
            # Обратите внимание, что аргументы после SQL запроса передаются в виде кортежа (user_id,)
            cur.execute(""UPDATE trains SET TRY=TRY-1 WHERE TEAM=%s"", (user_id,))

        conn.commit()  # Фиксация изменений
    finally:
        if conn:
            conn.close()
def add_score(user_id):
    try:
        conn = get_conn()
        with conn.cursor() as cur:
            cur.execute(""UPDATE trains SET SCORE=SCORE+1 WHERE TEAM=%s"", (user_id,))

        conn.commit()  # Фиксация изменений

    finally:
        conn.close()

def update_cur_num(updated_current_place, user_id):
    try:
        conn = get_conn()
        with conn.cursor() as cur:
            cur.execute(""UPDATE trains SET CUR_NUM=%s WHERE TEAM=%s"", (updated_current_place, user_id,))

        conn.commit()  # Фиксация изменений

    finally:
        conn.close()
def get_user_data(user_id):
    try:
        conn = get_conn()
        with conn.cursor() as cur:
            cur.execute(""SELECT * FROM trains WHERE TEAM = %s"", (user_id,))
            user_data = cur.fetchone()  # Получаем первую строку результата
            return user_data  # Возвращаем значения каждой колонки по user_id
    finally:
        conn.close()

def add_player(user_id):
    try:
        conn = get_conn()
        with conn.cursor() as c:
            c.execute(""INSERT INTO trains (TEAM, ROUND, TRY, OR_NUM, CUR_NUM, SCORE) VALUES (%s, 1, 6, 0, 0, 0)"",
            (user_id,))
        conn.commit()  # Фиксация изменений

    finally:
        conn.close()
def update_orig_num(user_id, new_orig_num):
    try:
        conn = get_conn()
        with conn.cursor() as cur:
            cur.execute(""UPDATE trains SET OR_NUM=%s WHERE TEAM=%s"", (new_orig_num, user_id,))

        conn.commit()  # Фиксация изменений

    finally:
        conn.close()"
wqM5ihLE,Untitled,dereksir,Python,Thursday 11th of April 2024 09:50:02 AM CDT,"import httpx

# create a client with the specified proxy
with httpx.Client(proxy=""http://216.137.184.253:80"") as client:
    # make requests using the client
    r = client.get(""https://httpbin.io/ip"")

print(r.text)"
gHRVnWvZ,список_компов_в_домене,Wintersham,Python,Thursday 11th of April 2024 09:43:17 AM CDT,"import ms_active_directory , re , os
from ping3 import ping, verbose_ping
kompy_domena = []
n = 0
j = -1
os.path.join('c','Users','BuharskyAA','Documents','ad_pcs.csv')
data = open('c:\\Users\\BuharskyAA\\Documents\\ad_pcs.csv','r')
for line in data:
   kompy_domena.append(line.split())
#    n += 1
#    kompy_domena.append(n)
pc_online = []
for i in range (len(kompy_domena)):
   print(str(kompy_domena[i][n]))
   verbose_ping(str(kompy_domena[i][n]))
   pinganem = ping(kompy_domena[i][n])
   if type (pinganem) == float:
        pinganem=int(pinganem)
        print(type(pinganem))
        print(pinganem)
        pc_online.append(kompy_domena[i][n])
        print(pc_online)

#    pinganem.round()
#          print(((pinganem)))
#          break
#    if result_of_ping[0] == 0:
#       pc_online.append(kompy_domena[i][n])
#       del result_of_ping[0]
#       print(pc_online)
#       break
#    else:
#       continue
# print(pc_online)
# print((str(kompy_domena[3])))
# print(len(kompy_domena))
# # imena_kompov = re.findall(r'[A-Z0-9]',str(kompy_domena))
# # print(imena_kompov)
# ping(str(kompy_domena[3]))
# param = '-n' if os.sys.platform().lower()=='win32' else '-c'
# hostname = kompy_domena[3] #example
# response = os.system(f""ping {param} 1 {hostname}"")
# #and then check the response...
# if response == 0:
#   print(f""{hostname} is up!"")
# else:
#   print(f""{hostname} is down!"")"
d9DWMpgt,Untitled,MR_OBRIEN,HTML,Thursday 11th of April 2024 09:37:38 AM CDT,"School Websites for Bookmark Bar

<a href=“https://teams.microsoft.com/v2/”>Microsoft Teams</a>
<a href=“https://www.microsoft365.com/launch/word?auth=2”>Microsoft Word</a>
<a href=“https://dcdsb.edsby.com/”>Durham Catholic District School Board (DCDSB)</a>
<a href=“https://durhamrc.elearningontario.ca/d2l/home”>Durham Region College (DRC) eLearning Portal</a>
<a href=“https://www.microsoft365.com/launch/onenote?auth=2”>Microsoft OneNote</a>
<a href=“https://www.microsoft365.com/launch/powerpoint?auth=2”>Microsoft PowerPoint</a>
<a href=“https://www.canva.com/”>Canva</a>"
17BhEMHS,邀您一起看：全部规则,xiaomianao666,JavaScript,Thursday 11th of April 2024 09:33:43 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥全部规则@@
B6bgNWXM,Untitled,MR_OBRIEN,HTML,Thursday 11th of April 2024 09:32:27 AM CDT,"<!-- Made by Distance // Chris // HTMLCoding(Pastebin) -->
<!DOCTYPE html>
<html>
  <head>
    <title>School Websites for Bookmark Bar</title>
  </head>
<!-- How to HyperLink: Use a and href then put the link in commas then use > and then put the name you want and end it with </a> -->
<!-- Example -->
<a href=""https://teams.microsoft.com/v2/"">Teams</a>
<a href=""https://www.microsoft365.com/launch/word?auth=2"">Microsoft Word</a>
<a href=""https://dcdsb.edsby.com/"">EDSBY</a>
<a href=""https://durhamrc.elearningontario.ca/d2l/home"">D2L</a>
<a href=""https://www.microsoft365.com/launch/onenote?auth=2”"">OneNote</a>
<a href=""https://www.microsoft365.com/launch/powerpoint?auth=2”"">Microsoft PowerPoint</a>
<a href=""https://www.canva.com/”"">Canva</a>
</html>"
V8V5wNit,Untitled,dereksir,Bash,Thursday 11th of April 2024 09:30:06 AM CDT,"{
  ""origin"": ""216.137.184.253:40335""
}"
tb0HJuht,Lesson27,smatskevich,C++,Thursday 11th of April 2024 09:05:59 AM CDT,"#include <iostream>
#include <queue>
#include <vector>

#define all(x) x.begin(), x.end()
using namespace std;

void BFS(int s, vector<vector<int>>& g, vector<int>& r, vector<int>& pi) {
  int n = r.size();
  queue<int> q;
  q.push(s);
  r[s] = 0;
  while (!q.empty()) {
    int u = q.front(); q.pop();
    for (int v : g[u]) {
      if (r[v] == INT_MAX) {
        r[v] = r[u] + 1;
        pi[v] = u;
        q.push(v);
      }
    }
  }
}

int main() {
  int n, m; cin >> n >> m;
  vector<vector<int>> g(n);
//  for (int i = 0; i < m; ++i)
  while (m--) {
    int u, v; cin >> u >> v;  --u; --v;
    g[u].push_back(v);
    g[v].push_back(u);
  }
  int s; cin >> s; --s;
  vector<int> r(n, INT_MAX), pi(n, -1);
  BFS(s, g, r, pi);

  for (int u = 0; u < n; ++u) {
    cout << ""Vertex "" << u + 1 << "": dist = "" << r[u] << "", path = ["";
    vector<int> path;
    for (int v = u; v != -1; v = pi[v]) path.push_back(v);
    reverse(all(path));
    for (int v : path) cout << v + 1 << (v == u ? ""]\n"" : "", "");
  }
  return 0;
}
"
aWwU6XLU,Untitled,dereksir,Python,Thursday 11th of April 2024 09:02:49 AM CDT,"import httpx

# define your proxy settings
proxies = {
    ""http://"": ""http://216.137.184.253:80"",
    ""https://"": ""http://216.137.184.253:80""
}

# make a request with the specified proxy
r = httpx.get(""https://httpbin.io/ip"", proxies=proxies)

print(r.text)"
pHZryJA7,Longest Palindromic Substring,bobbye,Python,Thursday 11th of April 2024 09:02:03 AM CDT,"class Solution:
    def longestPalindrome(self, s: str) -> str:
        if not s:
            return """"

        def expand_around_center(s: str, left: int, right: int):
            while left >= 0 and right < len(s) and s[left] == s[right]:
                left -= 1
                right += 1
            return right - left - 1


        start = 0
        end = 0

        for i in range(len(s)):
            odd = expand_around_center(s, i, i)
            even = expand_around_center(s, i, i + 1)
            max_len = max(odd, even)
            
            if max_len > end - start:
                start = i - (max_len - 1) // 2
                end = i + max_len // 2
        
        return s[start:end+1]"
CbRVieQf,Untitled,dereksir,Python,Thursday 11th of April 2024 08:50:16 AM CDT,"import httpx

# define your proxy settings
proxies = {
    ""http://"": ""http://216.137.184.253:80"",
    ""https://"": ""http://216.137.184.253:80""
}"
qyepa5xi,Untitled,dereksir,Python,Thursday 11th of April 2024 08:40:45 AM CDT,"import httpx

r = httpx.get(""https://httpbin.io/ip"")
print(r.text)"
eRFhavm7,DOMPDF,pishpeter,PHP,Thursday 11th of April 2024 08:28:35 AM CDT,"<html>
<head>
    <style>
        @page { margin: 0px; }
        body { margin: 0px; }

        /* Style for header */
        .header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: 150px; /* Adjust height as needed */
            background-color: #f0f0f0;
            text-align: center;
            line-height: 100px;
            overflow: hidden;
        }
        
        /* Style for footer */
        .footer {
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%; /* Set width to 100% */
            height: 200px; /* Adjust height as needed */
            background-color: #f0f0f0;
            text-align: center;
            line-height: 100px;
            overflow: hidden;
        }
        
        /* Style for images */
        .header img,
        .footer img {
            width: 100%;
            height: 100%;
            display: block;
            margin: auto;
        }

        /* Style for heading */
        .heading {
            text-align: center;
            margin-top: 200px; /* Adjust margin as needed */
        }
    </style>
</head>
<body>
    <div class=""header""><img src=""https://bidding.kaihoeastafrica.co.ke/assets/img/pdf/header.png"" alt=""Header Image""></div>
    <div class=""footer""><img src=""https://bidding.kaihoeastafrica.co.ke/assets/img/pdf/footer.png"" alt=""Footer Image""></div>
    <div class=""heading"">
        <h1>PDF Heading</h1>
    </div>
    <div class=""content"">
        <h2>Main Content</h2>
        <!-- Your content goes here -->
    </div>
</body>
</html>
"
sV8frWaf,Bruxelles,Netsemfim,Bash,Thursday 11th of April 2024 08:28:25 AM CDT,"client
dev tun
proto udp
remote bru-c16.vpn.wlvpn.com 1194
remote bru-c17.vpn.wlvpn.com 1194
remote bru-c18.vpn.wlvpn.com 1194
remote bru-c19.vpn.wlvpn.com 1194
remote bru-c20.vpn.wlvpn.com 1194
remote bru-c21.vpn.wlvpn.com 1194
remote bru-c22.vpn.wlvpn.com 1194
remote bru-c23.vpn.wlvpn.com 1194
remote bru-c24.vpn.wlvpn.com 1194
remote bru-c25.vpn.wlvpn.com 1194
remote bru-c26.vpn.wlvpn.com 1194
remote bru-c27.vpn.wlvpn.com 1194
remote bru-c13.vpn.wlvpn.com 1194
remote bru-c14.vpn.wlvpn.com 1194
remote bru-c15.vpn.wlvpn.com 1194
remote bru-c28.vpn.wlvpn.com 1194
remote bru-c29.vpn.wlvpn.com 1194
remote bru-c30.vpn.wlvpn.com 1194
remote bru-c31.vpn.wlvpn.com 1194
remote bru-c32.vpn.wlvpn.com 1194
remote-random
resolv-retry infinite
nobind
persist-key
persist-tun
persist-remote-ip
<ca>
-----BEGIN CERTIFICATE-----
MIIESjCCAzKgAwIBAgIJAKSqvk2CSdJGMA0GCSqGSIb3DQEBDQUAMHUxCzAJBgNV
BAYTAlVTMQwwCgYDVQQIEwNWUE4xDDAKBgNVBAcTA1ZQTjEMMAoGA1UEChMDVlBO
MQwwCgYDVQQLEwNWUE4xDDAKBgNVBAMTA1ZQTjEMMAoGA1UEKRMDVlBOMRIwEAYJ
KoZIhvcNAQkBFgNWUE4wIBcNMjIwNTA5MjA0NTA2WhgPMjA4MjA0MjQyMDQ1MDZa
MHUxCzAJBgNVBAYTAlVTMQwwCgYDVQQIEwNWUE4xDDAKBgNVBAcTA1ZQTjEMMAoG
A1UEChMDVlBOMQwwCgYDVQQLEwNWUE4xDDAKBgNVBAMTA1ZQTjEMMAoGA1UEKRMD
VlBOMRIwEAYJKoZIhvcNAQkBFgNWUE4wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
ggEKAoIBAQDJSvYEDPaAcZpeuLqtYykqpy9VNfcg5IsR8FZ/V9vbMLDHT4YUwbbn
xiQ4KJCGj9g5fnxsmmywYjjY7NmK1KKxNWlc0gF6XMZQ90qDHSpREaANb7t47JIl
gKfURSdwSUkIe3WyjRJt91CnEDzxVkwf18U4q0tjmoceLR2teb/BnL7NbtN9Xktx
7Tjq+/Yz0jn8qjjNnlWHqNOjZWsJBHDyChcHk0B1TkPvqVWFYrhnO3jCgjydFbkS
/cBYTDmhfzmPkHRNj2cSLmPS81gG4zF/8aIs7wzwsIc9fQdgGIsONl6wkK+4be9/
CcBjkIlCo2O5+macXeK+xoXR0Z6jniRZAgMBAAGjgdowgdcwDAYDVR0TBAUwAwEB
/zAdBgNVHQ4EFgQUF58B5L6R0n/5TGnCqCrIQHBjNqkwgacGA1UdIwSBnzCBnIAU
F58B5L6R0n/5TGnCqCrIQHBjNqmheaR3MHUxCzAJBgNVBAYTAlVTMQwwCgYDVQQI
EwNWUE4xDDAKBgNVBAcTA1ZQTjEMMAoGA1UEChMDVlBOMQwwCgYDVQQLEwNWUE4x
DDAKBgNVBAMTA1ZQTjEMMAoGA1UEKRMDVlBOMRIwEAYJKoZIhvcNAQkBFgNWUE6C
CQCkqr5NgknSRjANBgkqhkiG9w0BAQ0FAAOCAQEAMjkx4HQoLkLVMix6j6HVf8Lr
lKnbDlMx3gYfkD8J5LhTrf8JezB07rSialwiF7lvs3+urvQQdUs5tZCARRDpQANR
b8XzxbDu3oO4eOOxiDPnHutZv04/rN3Y/s3kSrJEwXxnWDLSzn9IsJtFtV+oHwan
ijRI4jaTBAzaqpFzq1Ffm1O1PrFfhwjb4aEyahMXCU8xRavBGKu7EeXZ78lXJVqg
0q3hbTISxRXSa63JgwxZnXcHIyeO4V/bZIcJvIei17xlc7dLDHPdnyQtrD07+AEH
qioNZsFRPJqf8KwmVCEIJq38cM7nSRXrrZ36w9P4sMBRHABQBre2DIqdo9hoeA==
-----END CERTIFICATE-----
</ca>
tls-client
remote-cert-tls server
auth-user-pass
compress lzo
verb 3
auth SHA256
cipher AES-256-CBC
"
TLYY8JGX,frankfurt,Netsemfim,Bash,Thursday 11th of April 2024 08:26:39 AM CDT,"client
dev tun
proto udp
remote fra-a01.vpn.wlvpn.com 1194
remote fra-a03.vpn.wlvpn.com 1194
remote fra-a06.vpn.wlvpn.com 1194
remote fra-a13.vpn.wlvpn.com 1194
remote fra-a14.vpn.wlvpn.com 1194
remote fra-a15.vpn.wlvpn.com 1194
remote fra-a05.vpn.wlvpn.com 1194
remote fra-a07.vpn.wlvpn.com 1194
remote fra-a02.vpn.wlvpn.com 1194
remote fra-a09.vpn.wlvpn.com 1194
remote fra-a08.vpn.wlvpn.com 1194
remote fra-a10.vpn.wlvpn.com 1194
remote fra-a11.vpn.wlvpn.com 1194
remote fra-a16.vpn.wlvpn.com 1194
remote fra-a17.vpn.wlvpn.com 1194
remote fra-a18.vpn.wlvpn.com 1194
remote fra-a19.vpn.wlvpn.com 1194
remote fra-a20.vpn.wlvpn.com 1194
remote fra-a21.vpn.wlvpn.com 1194
remote fra-a22.vpn.wlvpn.com 1194
remote fra-a23.vpn.wlvpn.com 1194
remote fra-a12.vpn.wlvpn.com 1194
remote fra-a24.vpn.wlvpn.com 1194
remote fra-a25.vpn.wlvpn.com 1194
remote fra-a26.vpn.wlvpn.com 1194
remote fra-a27.vpn.wlvpn.com 1194
remote fra-a28.vpn.wlvpn.com 1194
remote fra-a29.vpn.wlvpn.com 1194
remote fra-a30.vpn.wlvpn.com 1194
remote fra-a31.vpn.wlvpn.com 1194
remote fra-a32.vpn.wlvpn.com 1194
remote fra-a33.vpn.wlvpn.com 1194
remote fra-a34.vpn.wlvpn.com 1194
remote fra-a35.vpn.wlvpn.com 1194
remote fra-a36.vpn.wlvpn.com 1194
remote fra-a37.vpn.wlvpn.com 1194
remote fra-a38.vpn.wlvpn.com 1194
remote fra-a39.vpn.wlvpn.com 1194
remote fra-a40.vpn.wlvpn.com 1194
remote fra-a41.vpn.wlvpn.com 1194
remote fra-c09.vpn.wlvpn.com 1194
remote fra-c10.vpn.wlvpn.com 1194
remote fra-c11.vpn.wlvpn.com 1194
remote fra-c12.vpn.wlvpn.com 1194
remote fra-c13.vpn.wlvpn.com 1194
remote fra-c14.vpn.wlvpn.com 1194
remote fra-c15.vpn.wlvpn.com 1194
remote fra-c01.vpn.wlvpn.com 1194
remote fra-c02.vpn.wlvpn.com 1194
remote fra-c03.vpn.wlvpn.com 1194
remote fra-c04.vpn.wlvpn.com 1194
remote fra-c07.vpn.wlvpn.com 1194
remote fra-c08.vpn.wlvpn.com 1194
remote fra-c05.vpn.wlvpn.com 1194
remote fra-a04.vpn.wlvpn.com 1194
remote fra-c06.vpn.wlvpn.com 1194
remote fra-c16.vpn.wlvpn.com 1194
remote-random
resolv-retry infinite
nobind
persist-key
persist-tun
persist-remote-ip
<ca>
-----BEGIN CERTIFICATE-----
MIIESjCCAzKgAwIBAgIJAKSqvk2CSdJGMA0GCSqGSIb3DQEBDQUAMHUxCzAJBgNV
BAYTAlVTMQwwCgYDVQQIEwNWUE4xDDAKBgNVBAcTA1ZQTjEMMAoGA1UEChMDVlBO
MQwwCgYDVQQLEwNWUE4xDDAKBgNVBAMTA1ZQTjEMMAoGA1UEKRMDVlBOMRIwEAYJ
KoZIhvcNAQkBFgNWUE4wIBcNMjIwNTA5MjA0NTA2WhgPMjA4MjA0MjQyMDQ1MDZa
MHUxCzAJBgNVBAYTAlVTMQwwCgYDVQQIEwNWUE4xDDAKBgNVBAcTA1ZQTjEMMAoG
A1UEChMDVlBOMQwwCgYDVQQLEwNWUE4xDDAKBgNVBAMTA1ZQTjEMMAoGA1UEKRMD
VlBOMRIwEAYJKoZIhvcNAQkBFgNWUE4wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
ggEKAoIBAQDJSvYEDPaAcZpeuLqtYykqpy9VNfcg5IsR8FZ/V9vbMLDHT4YUwbbn
xiQ4KJCGj9g5fnxsmmywYjjY7NmK1KKxNWlc0gF6XMZQ90qDHSpREaANb7t47JIl
gKfURSdwSUkIe3WyjRJt91CnEDzxVkwf18U4q0tjmoceLR2teb/BnL7NbtN9Xktx
7Tjq+/Yz0jn8qjjNnlWHqNOjZWsJBHDyChcHk0B1TkPvqVWFYrhnO3jCgjydFbkS
/cBYTDmhfzmPkHRNj2cSLmPS81gG4zF/8aIs7wzwsIc9fQdgGIsONl6wkK+4be9/
CcBjkIlCo2O5+macXeK+xoXR0Z6jniRZAgMBAAGjgdowgdcwDAYDVR0TBAUwAwEB
/zAdBgNVHQ4EFgQUF58B5L6R0n/5TGnCqCrIQHBjNqkwgacGA1UdIwSBnzCBnIAU
F58B5L6R0n/5TGnCqCrIQHBjNqmheaR3MHUxCzAJBgNVBAYTAlVTMQwwCgYDVQQI
EwNWUE4xDDAKBgNVBAcTA1ZQTjEMMAoGA1UEChMDVlBOMQwwCgYDVQQLEwNWUE4x
DDAKBgNVBAMTA1ZQTjEMMAoGA1UEKRMDVlBOMRIwEAYJKoZIhvcNAQkBFgNWUE6C
CQCkqr5NgknSRjANBgkqhkiG9w0BAQ0FAAOCAQEAMjkx4HQoLkLVMix6j6HVf8Lr
lKnbDlMx3gYfkD8J5LhTrf8JezB07rSialwiF7lvs3+urvQQdUs5tZCARRDpQANR
b8XzxbDu3oO4eOOxiDPnHutZv04/rN3Y/s3kSrJEwXxnWDLSzn9IsJtFtV+oHwan
ijRI4jaTBAzaqpFzq1Ffm1O1PrFfhwjb4aEyahMXCU8xRavBGKu7EeXZ78lXJVqg
0q3hbTISxRXSa63JgwxZnXcHIyeO4V/bZIcJvIei17xlc7dLDHPdnyQtrD07+AEH
qioNZsFRPJqf8KwmVCEIJq38cM7nSRXrrZ36w9P4sMBRHABQBre2DIqdo9hoeA==
-----END CERTIFICATE-----
</ca>
tls-client
remote-cert-tls server
auth-user-pass
compress lzo
verb 3
auth SHA256
cipher AES-256-CBC
"
Ctapq1t4,邀您一起看：完美世界,xiaomianao666,JavaScript,Thursday 11th of April 2024 08:25:01 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥完美世界@@
3zqejTXW,LISBOA,Netsemfim,Bash,Thursday 11th of April 2024 08:24:03 AM CDT,"client
dev tun
proto udp
remote lis-c10.vpn.wlvpn.com 1194
remote lis-c13.vpn.wlvpn.com 1194
remote lis-c14.vpn.wlvpn.com 1194
remote lis-c11.vpn.wlvpn.com 1194
remote lis-c12.vpn.wlvpn.com 1194
remote lis-c01.vpn.wlvpn.com 1194
remote lis-c02.vpn.wlvpn.com 1194
remote lis-c03.vpn.wlvpn.com 1194
remote lis-c04.vpn.wlvpn.com 1194
remote lis-c05.vpn.wlvpn.com 1194
remote-random
resolv-retry infinite
nobind
persist-key
persist-tun
persist-remote-ip
<ca>
-----BEGIN CERTIFICATE-----
MIIESjCCAzKgAwIBAgIJAKSqvk2CSdJGMA0GCSqGSIb3DQEBDQUAMHUxCzAJBgNV
BAYTAlVTMQwwCgYDVQQIEwNWUE4xDDAKBgNVBAcTA1ZQTjEMMAoGA1UEChMDVlBO
MQwwCgYDVQQLEwNWUE4xDDAKBgNVBAMTA1ZQTjEMMAoGA1UEKRMDVlBOMRIwEAYJ
KoZIhvcNAQkBFgNWUE4wIBcNMjIwNTA5MjA0NTA2WhgPMjA4MjA0MjQyMDQ1MDZa
MHUxCzAJBgNVBAYTAlVTMQwwCgYDVQQIEwNWUE4xDDAKBgNVBAcTA1ZQTjEMMAoG
A1UEChMDVlBOMQwwCgYDVQQLEwNWUE4xDDAKBgNVBAMTA1ZQTjEMMAoGA1UEKRMD
VlBOMRIwEAYJKoZIhvcNAQkBFgNWUE4wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
ggEKAoIBAQDJSvYEDPaAcZpeuLqtYykqpy9VNfcg5IsR8FZ/V9vbMLDHT4YUwbbn
xiQ4KJCGj9g5fnxsmmywYjjY7NmK1KKxNWlc0gF6XMZQ90qDHSpREaANb7t47JIl
gKfURSdwSUkIe3WyjRJt91CnEDzxVkwf18U4q0tjmoceLR2teb/BnL7NbtN9Xktx
7Tjq+/Yz0jn8qjjNnlWHqNOjZWsJBHDyChcHk0B1TkPvqVWFYrhnO3jCgjydFbkS
/cBYTDmhfzmPkHRNj2cSLmPS81gG4zF/8aIs7wzwsIc9fQdgGIsONl6wkK+4be9/
CcBjkIlCo2O5+macXeK+xoXR0Z6jniRZAgMBAAGjgdowgdcwDAYDVR0TBAUwAwEB
/zAdBgNVHQ4EFgQUF58B5L6R0n/5TGnCqCrIQHBjNqkwgacGA1UdIwSBnzCBnIAU
F58B5L6R0n/5TGnCqCrIQHBjNqmheaR3MHUxCzAJBgNVBAYTAlVTMQwwCgYDVQQI
EwNWUE4xDDAKBgNVBAcTA1ZQTjEMMAoGA1UEChMDVlBOMQwwCgYDVQQLEwNWUE4x
DDAKBgNVBAMTA1ZQTjEMMAoGA1UEKRMDVlBOMRIwEAYJKoZIhvcNAQkBFgNWUE6C
CQCkqr5NgknSRjANBgkqhkiG9w0BAQ0FAAOCAQEAMjkx4HQoLkLVMix6j6HVf8Lr
lKnbDlMx3gYfkD8J5LhTrf8JezB07rSialwiF7lvs3+urvQQdUs5tZCARRDpQANR
b8XzxbDu3oO4eOOxiDPnHutZv04/rN3Y/s3kSrJEwXxnWDLSzn9IsJtFtV+oHwan
ijRI4jaTBAzaqpFzq1Ffm1O1PrFfhwjb4aEyahMXCU8xRavBGKu7EeXZ78lXJVqg
0q3hbTISxRXSa63JgwxZnXcHIyeO4V/bZIcJvIei17xlc7dLDHPdnyQtrD07+AEH
qioNZsFRPJqf8KwmVCEIJq38cM7nSRXrrZ36w9P4sMBRHABQBre2DIqdo9hoeA==
-----END CERTIFICATE-----
</ca>
tls-client
remote-cert-tls server
auth-user-pass
compress lzo
verb 3
auth SHA256
cipher AES-256-CBC
"
4FNJsNFM,Italia,Netsemfim,Bash,Thursday 11th of April 2024 08:22:48 AM CDT,"client
dev tun
proto udp
remote lin-a13.vpn.wlvpn.com 1194
remote lin-a14.vpn.wlvpn.com 1194
remote lin-a16.vpn.wlvpn.com 1194
remote lin-a17.vpn.wlvpn.com 1194
remote lin-a18.vpn.wlvpn.com 1194
remote lin-a19.vpn.wlvpn.com 1194
remote lin-a15.vpn.wlvpn.com 1194
remote lin-a20.vpn.wlvpn.com 1194
remote lin-a21.vpn.wlvpn.com 1194
remote lin-a22.vpn.wlvpn.com 1194
remote lin-a26.vpn.wlvpn.com 1194
remote lin-a27.vpn.wlvpn.com 1194
remote lin-a28.vpn.wlvpn.com 1194
remote lin-a29.vpn.wlvpn.com 1194
remote lin-a30.vpn.wlvpn.com 1194
remote lin-a31.vpn.wlvpn.com 1194
remote lin-a32.vpn.wlvpn.com 1194
remote lin-a34.vpn.wlvpn.com 1194
remote lin-a35.vpn.wlvpn.com 1194
remote lin-a36.vpn.wlvpn.com 1194
remote lin-a37.vpn.wlvpn.com 1194
remote lin-a38.vpn.wlvpn.com 1194
remote lin-a25.vpn.wlvpn.com 1194
remote lin-a24.vpn.wlvpn.com 1194
remote lin-a23.vpn.wlvpn.com 1194
remote-random
resolv-retry infinite
nobind
persist-key
persist-tun
persist-remote-ip
<ca>
-----BEGIN CERTIFICATE-----
MIIESjCCAzKgAwIBAgIJAKSqvk2CSdJGMA0GCSqGSIb3DQEBDQUAMHUxCzAJBgNV
BAYTAlVTMQwwCgYDVQQIEwNWUE4xDDAKBgNVBAcTA1ZQTjEMMAoGA1UEChMDVlBO
MQwwCgYDVQQLEwNWUE4xDDAKBgNVBAMTA1ZQTjEMMAoGA1UEKRMDVlBOMRIwEAYJ
KoZIhvcNAQkBFgNWUE4wIBcNMjIwNTA5MjA0NTA2WhgPMjA4MjA0MjQyMDQ1MDZa
MHUxCzAJBgNVBAYTAlVTMQwwCgYDVQQIEwNWUE4xDDAKBgNVBAcTA1ZQTjEMMAoG
A1UEChMDVlBOMQwwCgYDVQQLEwNWUE4xDDAKBgNVBAMTA1ZQTjEMMAoGA1UEKRMD
VlBOMRIwEAYJKoZIhvcNAQkBFgNWUE4wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
ggEKAoIBAQDJSvYEDPaAcZpeuLqtYykqpy9VNfcg5IsR8FZ/V9vbMLDHT4YUwbbn
xiQ4KJCGj9g5fnxsmmywYjjY7NmK1KKxNWlc0gF6XMZQ90qDHSpREaANb7t47JIl
gKfURSdwSUkIe3WyjRJt91CnEDzxVkwf18U4q0tjmoceLR2teb/BnL7NbtN9Xktx
7Tjq+/Yz0jn8qjjNnlWHqNOjZWsJBHDyChcHk0B1TkPvqVWFYrhnO3jCgjydFbkS
/cBYTDmhfzmPkHRNj2cSLmPS81gG4zF/8aIs7wzwsIc9fQdgGIsONl6wkK+4be9/
CcBjkIlCo2O5+macXeK+xoXR0Z6jniRZAgMBAAGjgdowgdcwDAYDVR0TBAUwAwEB
/zAdBgNVHQ4EFgQUF58B5L6R0n/5TGnCqCrIQHBjNqkwgacGA1UdIwSBnzCBnIAU
F58B5L6R0n/5TGnCqCrIQHBjNqmheaR3MHUxCzAJBgNVBAYTAlVTMQwwCgYDVQQI
EwNWUE4xDDAKBgNVBAcTA1ZQTjEMMAoGA1UEChMDVlBOMQwwCgYDVQQLEwNWUE4x
DDAKBgNVBAMTA1ZQTjEMMAoGA1UEKRMDVlBOMRIwEAYJKoZIhvcNAQkBFgNWUE6C
CQCkqr5NgknSRjANBgkqhkiG9w0BAQ0FAAOCAQEAMjkx4HQoLkLVMix6j6HVf8Lr
lKnbDlMx3gYfkD8J5LhTrf8JezB07rSialwiF7lvs3+urvQQdUs5tZCARRDpQANR
b8XzxbDu3oO4eOOxiDPnHutZv04/rN3Y/s3kSrJEwXxnWDLSzn9IsJtFtV+oHwan
ijRI4jaTBAzaqpFzq1Ffm1O1PrFfhwjb4aEyahMXCU8xRavBGKu7EeXZ78lXJVqg
0q3hbTISxRXSa63JgwxZnXcHIyeO4V/bZIcJvIei17xlc7dLDHPdnyQtrD07+AEH
qioNZsFRPJqf8KwmVCEIJq38cM7nSRXrrZ36w9P4sMBRHABQBre2DIqdo9hoeA==
-----END CERTIFICATE-----
</ca>
tls-client
remote-cert-tls server
auth-user-pass
compress lzo
verb 3
auth SHA256
cipher AES-256-CBC
"
YgNvSZNu,Paris,Netsemfim,Bash,Thursday 11th of April 2024 08:21:27 AM CDT,"client
dev tun
proto udp
remote par-a15.vpn.wlvpn.com 1194
remote par-a16.vpn.wlvpn.com 1194
remote par-a17.vpn.wlvpn.com 1194
remote par-a18.vpn.wlvpn.com 1194
remote par-a19.vpn.wlvpn.com 1194
remote par-a20.vpn.wlvpn.com 1194
remote par-a21.vpn.wlvpn.com 1194
remote par-a22.vpn.wlvpn.com 1194
remote par-a23.vpn.wlvpn.com 1194
remote par-a24.vpn.wlvpn.com 1194
remote par-a26.vpn.wlvpn.com 1194
remote par-a25.vpn.wlvpn.com 1194
remote par-a13.vpn.wlvpn.com 1194
remote par-a14.vpn.wlvpn.com 1194
remote par-a02.vpn.wlvpn.com 1194
remote par-a01.vpn.wlvpn.com 1194
remote par-a03.vpn.wlvpn.com 1194
remote par-a05.vpn.wlvpn.com 1194
remote par-a04.vpn.wlvpn.com 1194
remote par-a09.vpn.wlvpn.com 1194
remote par-a11.vpn.wlvpn.com 1194
remote par-a06.vpn.wlvpn.com 1194
remote par-a08.vpn.wlvpn.com 1194
remote par-a12.vpn.wlvpn.com 1194
remote par-a27.vpn.wlvpn.com 1194
remote par-a28.vpn.wlvpn.com 1194
remote par-a29.vpn.wlvpn.com 1194
remote par-a30.vpn.wlvpn.com 1194
remote par-a31.vpn.wlvpn.com 1194
remote par-a32.vpn.wlvpn.com 1194
remote par-a34.vpn.wlvpn.com 1194
remote par-a35.vpn.wlvpn.com 1194
remote par-a36.vpn.wlvpn.com 1194
remote par-a37.vpn.wlvpn.com 1194
remote par-a38.vpn.wlvpn.com 1194
remote par-a33.vpn.wlvpn.com 1194
remote par-a07.vpn.wlvpn.com 1194
remote par-a10.vpn.wlvpn.com 1194
remote-random
resolv-retry infinite
nobind
persist-key
persist-tun
persist-remote-ip
<ca>
-----BEGIN CERTIFICATE-----
MIIESjCCAzKgAwIBAgIJAKSqvk2CSdJGMA0GCSqGSIb3DQEBDQUAMHUxCzAJBgNV
BAYTAlVTMQwwCgYDVQQIEwNWUE4xDDAKBgNVBAcTA1ZQTjEMMAoGA1UEChMDVlBO
MQwwCgYDVQQLEwNWUE4xDDAKBgNVBAMTA1ZQTjEMMAoGA1UEKRMDVlBOMRIwEAYJ
KoZIhvcNAQkBFgNWUE4wIBcNMjIwNTA5MjA0NTA2WhgPMjA4MjA0MjQyMDQ1MDZa
MHUxCzAJBgNVBAYTAlVTMQwwCgYDVQQIEwNWUE4xDDAKBgNVBAcTA1ZQTjEMMAoG
A1UEChMDVlBOMQwwCgYDVQQLEwNWUE4xDDAKBgNVBAMTA1ZQTjEMMAoGA1UEKRMD
VlBOMRIwEAYJKoZIhvcNAQkBFgNWUE4wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
ggEKAoIBAQDJSvYEDPaAcZpeuLqtYykqpy9VNfcg5IsR8FZ/V9vbMLDHT4YUwbbn
xiQ4KJCGj9g5fnxsmmywYjjY7NmK1KKxNWlc0gF6XMZQ90qDHSpREaANb7t47JIl
gKfURSdwSUkIe3WyjRJt91CnEDzxVkwf18U4q0tjmoceLR2teb/BnL7NbtN9Xktx
7Tjq+/Yz0jn8qjjNnlWHqNOjZWsJBHDyChcHk0B1TkPvqVWFYrhnO3jCgjydFbkS
/cBYTDmhfzmPkHRNj2cSLmPS81gG4zF/8aIs7wzwsIc9fQdgGIsONl6wkK+4be9/
CcBjkIlCo2O5+macXeK+xoXR0Z6jniRZAgMBAAGjgdowgdcwDAYDVR0TBAUwAwEB
/zAdBgNVHQ4EFgQUF58B5L6R0n/5TGnCqCrIQHBjNqkwgacGA1UdIwSBnzCBnIAU
F58B5L6R0n/5TGnCqCrIQHBjNqmheaR3MHUxCzAJBgNVBAYTAlVTMQwwCgYDVQQI
EwNWUE4xDDAKBgNVBAcTA1ZQTjEMMAoGA1UEChMDVlBOMQwwCgYDVQQLEwNWUE4x
DDAKBgNVBAMTA1ZQTjEMMAoGA1UEKRMDVlBOMRIwEAYJKoZIhvcNAQkBFgNWUE6C
CQCkqr5NgknSRjANBgkqhkiG9w0BAQ0FAAOCAQEAMjkx4HQoLkLVMix6j6HVf8Lr
lKnbDlMx3gYfkD8J5LhTrf8JezB07rSialwiF7lvs3+urvQQdUs5tZCARRDpQANR
b8XzxbDu3oO4eOOxiDPnHutZv04/rN3Y/s3kSrJEwXxnWDLSzn9IsJtFtV+oHwan
ijRI4jaTBAzaqpFzq1Ffm1O1PrFfhwjb4aEyahMXCU8xRavBGKu7EeXZ78lXJVqg
0q3hbTISxRXSa63JgwxZnXcHIyeO4V/bZIcJvIei17xlc7dLDHPdnyQtrD07+AEH
qioNZsFRPJqf8KwmVCEIJq38cM7nSRXrrZ36w9P4sMBRHABQBre2DIqdo9hoeA==
-----END CERTIFICATE-----
</ca>
tls-client
remote-cert-tls server
auth-user-pass
compress lzo
verb 3
auth SHA256
cipher AES-256-CBC
"
vCj4hfTv,Untitled,Netsemfim,Bash,Thursday 11th of April 2024 08:17:28 AM CDT,"client
dev tun
proto udp
remote bod-c01.vpn.wlvpn.com 1194
remote bod-c02.vpn.wlvpn.com 1194
remote bod-c03.vpn.wlvpn.com 1194
remote bod-c04.vpn.wlvpn.com 1194
remote bod-c05.vpn.wlvpn.com 1194
remote bod-c06.vpn.wlvpn.com 1194
remote bod-c07.vpn.wlvpn.com 1194
remote bod-c08.vpn.wlvpn.com 1194
remote bod-c09.vpn.wlvpn.com 1194
remote-random
resolv-retry infinite
nobind
persist-key
persist-tun
persist-remote-ip
<ca>
-----BEGIN CERTIFICATE-----
MIIESjCCAzKgAwIBAgIJAKSqvk2CSdJGMA0GCSqGSIb3DQEBDQUAMHUxCzAJBgNV
BAYTAlVTMQwwCgYDVQQIEwNWUE4xDDAKBgNVBAcTA1ZQTjEMMAoGA1UEChMDVlBO
MQwwCgYDVQQLEwNWUE4xDDAKBgNVBAMTA1ZQTjEMMAoGA1UEKRMDVlBOMRIwEAYJ
KoZIhvcNAQkBFgNWUE4wIBcNMjIwNTA5MjA0NTA2WhgPMjA4MjA0MjQyMDQ1MDZa
MHUxCzAJBgNVBAYTAlVTMQwwCgYDVQQIEwNWUE4xDDAKBgNVBAcTA1ZQTjEMMAoG
A1UEChMDVlBOMQwwCgYDVQQLEwNWUE4xDDAKBgNVBAMTA1ZQTjEMMAoGA1UEKRMD
VlBOMRIwEAYJKoZIhvcNAQkBFgNWUE4wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAw
ggEKAoIBAQDJSvYEDPaAcZpeuLqtYykqpy9VNfcg5IsR8FZ/V9vbMLDHT4YUwbbn
xiQ4KJCGj9g5fnxsmmywYjjY7NmK1KKxNWlc0gF6XMZQ90qDHSpREaANb7t47JIl
gKfURSdwSUkIe3WyjRJt91CnEDzxVkwf18U4q0tjmoceLR2teb/BnL7NbtN9Xktx
7Tjq+/Yz0jn8qjjNnlWHqNOjZWsJBHDyChcHk0B1TkPvqVWFYrhnO3jCgjydFbkS
/cBYTDmhfzmPkHRNj2cSLmPS81gG4zF/8aIs7wzwsIc9fQdgGIsONl6wkK+4be9/
CcBjkIlCo2O5+macXeK+xoXR0Z6jniRZAgMBAAGjgdowgdcwDAYDVR0TBAUwAwEB
/zAdBgNVHQ4EFgQUF58B5L6R0n/5TGnCqCrIQHBjNqkwgacGA1UdIwSBnzCBnIAU
F58B5L6R0n/5TGnCqCrIQHBjNqmheaR3MHUxCzAJBgNVBAYTAlVTMQwwCgYDVQQI
EwNWUE4xDDAKBgNVBAcTA1ZQTjEMMAoGA1UEChMDVlBOMQwwCgYDVQQLEwNWUE4x
DDAKBgNVBAMTA1ZQTjEMMAoGA1UEKRMDVlBOMRIwEAYJKoZIhvcNAQkBFgNWUE6C
CQCkqr5NgknSRjANBgkqhkiG9w0BAQ0FAAOCAQEAMjkx4HQoLkLVMix6j6HVf8Lr
lKnbDlMx3gYfkD8J5LhTrf8JezB07rSialwiF7lvs3+urvQQdUs5tZCARRDpQANR
b8XzxbDu3oO4eOOxiDPnHutZv04/rN3Y/s3kSrJEwXxnWDLSzn9IsJtFtV+oHwan
ijRI4jaTBAzaqpFzq1Ffm1O1PrFfhwjb4aEyahMXCU8xRavBGKu7EeXZ78lXJVqg
0q3hbTISxRXSa63JgwxZnXcHIyeO4V/bZIcJvIei17xlc7dLDHPdnyQtrD07+AEH
qioNZsFRPJqf8KwmVCEIJq38cM7nSRXrrZ36w9P4sMBRHABQBre2DIqdo9hoeA==
-----END CERTIFICATE-----
</ca>
tls-client
remote-cert-tls server
auth-user-pass
compress lzo
verb 3
auth SHA256
cipher AES-256-CBC
"
Bp04wAwi,Поезда Py v2,SillyWolfy,Python,Thursday 11th of April 2024 08:15:51 AM CDT,"# Обновленная версия функции output с интеграцией в команду /start_game
from telebot import TeleBot, types
import sql_trains
import sqlite3
import random

def games_handler(id_game, messgae, team_id, user_id , mode):
    match(id_game):# Какая игра такое и действие
        case(1):
            if mode == ""final"":
                # Генерация нового загаданного числа для каждого раунда
                new_original_place = random.randint(1, 54)
                sql_trains.create_table_if_not_exist()
                if not sql_trains.check_user_exists(user_id):
                    sql_trains.add_player(user_id)
                    sql_trains.update_orig_num(user_id,new_original_place)
                    return (""Вы зарегистрированы в игре 'Поезда' 😃\n""
                            ""Это режим песочницы\n""
                            ""Здесь вы сразу проигрываете раунд, если текущее место выходит за пределы вагона или если вы неправильно угадали число\n""
                            ""Игра загадывает вам место в вагоне поезда и даёт 6 попыток, в каждую из который вы можете:\n""
                            ""1) Угадать загаданное место (можно сделать только 1 раз за игру) \n""
                            ""2) Ввести число, которое будет складываться с текущим местом.\n""
                            ""Если вы не выйдете за пределы вагона, то вам выдадут подсказку от том, где сейчас находится текущее место\n""
                            ""При этом текущее место изменяется на сумму предыдущего места и вашего числа\n""
                            ""Ваша задача в как можно в большем колличестве раундов угадать загаданное число\n""
                            ""Давайте скажем вам формат сообщений, который поддерживает игра:\n""
                            ""/ask (number)\n""
                            ""/answer (number)\n""
                            ""Командой ask вы подаёте число игре, на которое она вам возвращает подсказку""
                            ""Командой answer вы пытаетесь угадать загаданное число\n""
                            ""Ну чтож, давайте попробуем! 🎲\n"")

                user_data = sql_trains.get_user_data(user_id)
                id, round_, try_, original_place, current_place, score = user_data
                input_command = messgae.split()
                if ((input_command[0] != '/ask' and input_command[0] != ""/answer"") or len(input_command) != 2 or
                                                                                                        not str(input_command[1].isnumeric())):
                    return (f""Некоректный ввод\n"")

                user_command = input_command[0]
                number = int(input_command[1])



                if round_ >= 5:
                    return (f""Игра окончена. Было сыграно 5 раундов\n""
                            f""Вы набрали: {score} очков"")                           



                # Проверка на 100% выход за пределы вагона
                if number < -54 or number > 54 or try_ <= 0:
                    sql_trains.update_round(user_id, new_original_place)
                    return (f""WA. Число всегда за пределами вагона\n"")

                # Отнимаем одну попытку в бд
                sql_trains.minus_try(user_id)

                # Если команда /answer
                if user_command == '/asnwer':
                    if number == original_place:
                        sql_trains.update_round(user_id, new_original_place)
                        sql_trains.add_score(user_id)
                        return ""OK""
                    else:
                        sql_trains.update_round(user_id, new_original_place)
                        return (f""WA. Вы предположили загаданное место неправильно\n"")

                # Если команда /ask
                elif user_command == '/ask':
                    updated_current_place = current_place + number
                    if 1 <= updated_current_place <= 54:
                        char_string = ""low"" if updated_current_place % 2 != 0 else ""high""
                        char_string += "" side"" if updated_current_place >= 37 else "" main""
                        sql_trains.update_cur_num(updated_current_place, user_id)
                        sql_trains.minus_try(user_id)
                        return (
                            f""Ваше текущее место принадлежит секции: {char_string}\n"")
                    else:
                        sql_trains.update_round(user_id, new_original_place)
                        return (f""WA. Текущее место вышло за пределы вагона\n"")
                else:
                    return ""Неверная команда.""
            else:
                # Генерация нового загаданного числа для каждого раунда
                new_original_place = random.randint(1, 54)
                sql_trains.create_table_if_not_exist()
                if not sql_trains.check_user_exists(user_id):
                    sql_trains.add_player(user_id)
                    sql_trains.update_orig_num(user_id,new_original_place)
                    return (""Вы зарегистрированы в игре 'Поезда' 😃\n""
                            ""Это режим песочницы\n""
                            ""Здесь вы сразу проигрываете раунд, если текущее место выходит за пределы вагона или если вы неправильно угадали число\n""
                            ""Но здесь вам будет показываться ваше текущее место и загаданное место\n""
                            ""Игра загадывает вам место в вагоне поезда и даёт 6 попыток, в каждую из который вы можете:\n""
                            ""1) Угадать загаданное место (можно сделать только 1 раз за игру) \n""
                            ""2) Ввести число, которое будет складываться с текущим местом.\n""
                            ""Если вы не выйдете за пределы вагона, то вам выдадут подсказку от том, где сейчас находится текущее место\n""
                            ""При этом текущее место изменяется на сумму предыдущего места и вашего числа\n""
                            ""Ваша задача в как можно в большем кол-ве раундов угадать загаданное число\n""
                            ""Давайте скажем вам формат сообщений, который поддерживает игра:\n""
                            ""/ask (number)\n""
                            ""/answer (number)\n""
                            ""Командой ask вы подаёте число игре, на которое она вам возвращает подсказку""
                            ""Командой answer вы пытаетесь угадать загаданное число\n""
                            ""Ну что ж, давайте попробуем! 🎲\n"")

                user_data = sql_trains.get_user_data(user_id)
                id, round_, try_, original_place, current_place, score = user_data
                input_command = messgae.split()
                if ((input_command[0] != '/ask' and input_command[0] != ""/answer"") or len(input_command) != 2 or
                                                                                                        not str(input_command[1].isnumeric())):
                    return (f""Некоректный ввод\n""
                            f""Вы играете раунд№{round_}\n""
                            f""У вас осталось {try_} попыток\n"")

                user_command = input_command[0]
                number = int(input_command[1])



                if round_ >= 5:
                    return (f""Игра окончена. Было сыграно 5 раундов\n""
                            f""Вы набрали: {score} очков"")                           



                # Проверка на 100% выход за пределы вагона
                if number < -54 or number > 54 or try_ <= 0:
                    sql_trains.update_round(user_id, new_original_place)
                    return (f""WA. Число всегда за пределами вагона\n""
                            f""Загаданное место: {original_place}\n""
                            f""Текущее место: {current_place}\n""
                            )

                # Отнимаем одну попытку в бд
                sql_trains.minus_try(user_id)

                # Если команда /answer
                if user_command == '/asnwer':
                    if number == original_place:
                        sql_trains.update_round(user_id, new_original_place)
                        sql_trains.add_score(user_id)
                        return ""OK""
                    else:
                        sql_trains.update_round(user_id, new_original_place)
                        return (f""WA. Вы предположили загаданное место неправильно\n""
                                f""Загаданное место: {original_place}\n""
                                f""Текущее место: {current_place}\n""
                                )

                # Если команда /ask
                elif user_command == '/ask':
                    updated_current_place = current_place + number
                    if 1 <= updated_current_place <= 54:
                        char_string = ""low"" if updated_current_place % 2 != 0 else ""high""
                        char_string += "" side"" if updated_current_place >= 37 else "" main""
                        sql_trains.update_cur_num(updated_current_place, user_id)
                        sql_trains.minus_try(user_id)
                        return (
                            f""Ваше текущее место принадлежит секции: {char_string}\n""
                            f""Загаданное место: {original_place}\n""
                            f""Текущее место: {updated_current_place}\n"")  # f""Подсказка: {char_string}. Текущее число: {updated_current_place}. {original_place}""
                    else:
                        sql_trains.update_round(user_id, new_original_place)
                        return (f""WA. Текущее место вышло за пределы вагона\n""
                                f""Загаданное место: {original_place}\n""
                                f""Текущее место: {updated_current_place}\n"")
                else:
                    return ""Неверная команда.""

        case(2):
            return(0)
"
