id,title,username,language,date,content
4RQb93jS,2024-02-17_stats.json,rdp_snitch,JSON,Saturday 17th of February 2024 06:16:05 PM CDT,"{
  ""ip"": {
    ""162.142.125.224"": 2,
    ""107.175.57.165"": 4,
    ""45.87.212.180"": 4,
    ""194.165.16.76"": 4,
    ""205.210.31.209"": 6,
    ""61.91.43.232"": 4,
    ""45.227.254.54"": 4,
    ""87.251.75.145"": 6,
    ""147.78.47.34"": 2,
    ""45.79.93.238"": 4,
    ""185.190.24.54"": 2,
    ""185.170.144.3"": 4,
    ""58.27.152.130"": 2,
    ""198.235.24.64"": 6,
    ""62.204.41.107"": 8,
    ""193.37.69.213"": 6,
    ""196.190.117.7"": 4,
    ""185.129.51.9"": 4,
    ""194.165.16.73"": 4,
    ""165.154.128.17"": 2,
    ""89.248.170.88"": 2,
    ""194.165.16.10"": 4,
    ""120.240.145.8"": 2,
    ""45.76.184.55"": 6,
    ""205.210.31.83"": 6,
    ""212.70.149.142"": 8,
    ""216.24.210.126"": 2,
    ""205.210.31.164"": 6,
    ""212.70.149.146"": 2
  },
  ""asn"": {
    ""AS398324"": 2,
    ""AS36352"": 4,
    ""AS9009"": 4,
    ""AS48721"": 12,
    ""AS396982"": 24,
    ""AS7470"": 4,
    ""AS267784"": 4,
    ""AS208091"": 12,
    ""AS209588"": 2,
    ""AS63949"": 4,
    ""AS211632"": 2,
    ""AS197414"": 4,
    ""AS38264"": 2,
    ""AS59425"": 8,
    ""AS24757"": 4,
    ""AS200532"": 4,
    ""AS135377"": 2,
    ""AS202425"": 2,
    ""AS56040"": 2,
    ""AS20473"": 6,
    ""AS204428"": 10,
    ""AS62240"": 2
  },
  ""isp"": {
    ""Censys, Inc."": 2,
    ""HostPapa"": 4,
    ""M247 Europe SRL"": 4,
    ""Flyservers S.A."": 18,
    ""Google LLC"": 24,
    ""True Internet Corporation CO. Ltd."": 4,
    ""Xhost Internet Solutions LP"": 10,
    ""Akamai Technologies, Inc."": 4,
    ""Internet Solutions & Innovations LTD."": 2,
    ""Wateen Telecom Limited"": 2,
    ""Horizon LLC"": 8,
    ""Xhost Internet Solutions"": 6,
    ""Ethiotelecom"": 4,
    ""LLP \""Kompaniya Hoster.KZ\"""": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""IP Volume inc"": 2,
    ""China Mobile communications corporation"": 2,
    ""The Constant Company"": 6,
    ""SS-Net"": 10,
    ""Clouvider Limited"": 2
  },
  ""org"": {
    ""Censys Inc"": 2,
    ""ColoCrossing"": 4,
    ""M247 LTD"": 4,
    ""Flyservers S.A"": 14,
    ""Palo Alto Networks, Inc"": 24,
    ""True Internet Corporation CO. LTD"": 4,
    ""UAB Host Baltic"": 4,
    ""Xhost Internet Solutions"": 6,
    ""Linode"": 4,
    ""Tribeka Web Advisors S.A"": 2,
    ""Xhostis"": 4,
    ""Wateen Telecom Limited"": 2,
    ""Horizon LLC"": 8,
    ""XHOSTIS"": 6,
    ""Unknown"": 4,
    ""Hosterkz Network"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Quasi Networks LTD."": 2,
    ""China Mobile"": 2,
    ""Vultr Holdings, LLC"": 6,
    ""4Media Ltd"": 10,
    ""IPXO"": 2
  },
  ""regionName"": {
    ""Michigan"": 2,
    ""New York"": 4,
    ""Hesse"": 4,
    ""Kaunas"": 12,
    ""California"": 30,
    ""Bangkok"": 4,
    ""Vilnius"": 4,
    ""North Holland"": 20,
    ""Mariehamns stad"": 2,
    ""Punjab"": 2,
    ""Moscow"": 8,
    ""Addis Ababa"": 4,
    ""Karaganda"": 4,
    ""England"": 2,
    ""Guangdong"": 2,
    ""Central Singapore"": 6,
    ""Plovdiv"": 10
  },
  ""country"": {
    ""United States"": 36,
    ""Germany"": 4,
    ""Lithuania"": 16,
    ""Thailand"": 4,
    ""The Netherlands"": 20,
    ""Aland Islands"": 2,
    ""Pakistan"": 2,
    ""Russia"": 8,
    ""Ethiopia"": 4,
    ""Kazakhstan"": 4,
    ""United Kingdom"": 2,
    ""China"": 2,
    ""Singapore"": 6,
    ""Bulgaria"": 10
  },
  ""account"": {
    ""(empty)"": 12,
    ""Test"": 34,
    ""GBammKcBq"": 2,
    ""SZMOHL"": 2,
    ""YGykDS"": 2,
    ""Administr"": 20,
    ""hello"": 18,
    ""vGuGYbNNT"": 2,
    ""ehAxnM"": 2,
    ""oSaknC"": 2,
    ""Domain"": 10,
    ""Administrator"": 2,
    ""eoAeYqqxH"": 2,
    ""oKlDiT"": 2,
    ""xHnVhM"": 2,
    ""JYBhgQuBl"": 2,
    ""ObaOAF"": 2,
    ""qJSdGJ"": 2
  },
  ""keyboard"": {
    ""Unknown"": 120
  },
  ""client_build"": {
    ""Unknown"": 120
  },
  ""client_name"": {
    ""Unknown"": 120
  },
  ""ip_type"": {
    ""Unknown"": 64,
    ""hosting"": 44,
    ""hosting & proxy"": 4,
    ""mobile"": 4,
    ""mobile & hosting & proxy"": 2,
    ""proxy"": 2
  }
}"
SP2VtAxH,2024-02-17_stats.json,rdp_snitch,JSON,Saturday 17th of February 2024 06:15:09 PM CDT,"{
  ""ip"": {
    ""162.142.125.224"": 1,
    ""107.175.57.165"": 2,
    ""45.87.212.180"": 2,
    ""194.165.16.76"": 2,
    ""205.210.31.209"": 3,
    ""61.91.43.232"": 2,
    ""45.227.254.54"": 2,
    ""87.251.75.145"": 3,
    ""147.78.47.34"": 1,
    ""45.79.93.238"": 2,
    ""185.190.24.54"": 1,
    ""185.170.144.3"": 2,
    ""58.27.152.130"": 1,
    ""198.235.24.64"": 3,
    ""62.204.41.107"": 4,
    ""193.37.69.213"": 3,
    ""196.190.117.7"": 2,
    ""185.129.51.9"": 2,
    ""194.165.16.73"": 2,
    ""165.154.128.17"": 1,
    ""89.248.170.88"": 1,
    ""194.165.16.10"": 2,
    ""120.240.145.8"": 1,
    ""45.76.184.55"": 3,
    ""205.210.31.83"": 3,
    ""212.70.149.142"": 4,
    ""216.24.210.126"": 1,
    ""205.210.31.164"": 3,
    ""212.70.149.146"": 1
  },
  ""asn"": {
    ""AS398324"": 1,
    ""AS36352"": 2,
    ""AS9009"": 2,
    ""AS48721"": 6,
    ""AS396982"": 12,
    ""AS7470"": 2,
    ""AS267784"": 2,
    ""AS208091"": 6,
    ""AS209588"": 1,
    ""AS63949"": 2,
    ""AS211632"": 1,
    ""AS197414"": 2,
    ""AS38264"": 1,
    ""AS59425"": 4,
    ""AS24757"": 2,
    ""AS200532"": 2,
    ""AS135377"": 1,
    ""AS202425"": 1,
    ""AS56040"": 1,
    ""AS20473"": 3,
    ""AS204428"": 5,
    ""AS62240"": 1
  },
  ""isp"": {
    ""Censys, Inc."": 1,
    ""HostPapa"": 2,
    ""M247 Europe SRL"": 2,
    ""Flyservers S.A."": 9,
    ""Google LLC"": 12,
    ""True Internet Corporation CO. Ltd."": 2,
    ""Xhost Internet Solutions LP"": 5,
    ""Akamai Technologies, Inc."": 2,
    ""Internet Solutions & Innovations LTD."": 1,
    ""Wateen Telecom Limited"": 1,
    ""Horizon LLC"": 4,
    ""Xhost Internet Solutions"": 3,
    ""Ethiotelecom"": 2,
    ""LLP \""Kompaniya Hoster.KZ\"""": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""IP Volume inc"": 1,
    ""China Mobile communications corporation"": 1,
    ""The Constant Company"": 3,
    ""SS-Net"": 5,
    ""Clouvider Limited"": 1
  },
  ""org"": {
    ""Censys Inc"": 1,
    ""ColoCrossing"": 2,
    ""M247 LTD"": 2,
    ""Flyservers S.A"": 7,
    ""Palo Alto Networks, Inc"": 12,
    ""True Internet Corporation CO. LTD"": 2,
    ""UAB Host Baltic"": 2,
    ""Xhost Internet Solutions"": 3,
    ""Linode"": 2,
    ""Tribeka Web Advisors S.A"": 1,
    ""Xhostis"": 2,
    ""Wateen Telecom Limited"": 1,
    ""Horizon LLC"": 4,
    ""XHOSTIS"": 3,
    ""Unknown"": 2,
    ""Hosterkz Network"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Quasi Networks LTD."": 1,
    ""China Mobile"": 1,
    ""Vultr Holdings, LLC"": 3,
    ""4Media Ltd"": 5,
    ""IPXO"": 1
  },
  ""regionName"": {
    ""Michigan"": 1,
    ""New York"": 2,
    ""Hesse"": 2,
    ""Kaunas"": 6,
    ""California"": 15,
    ""Bangkok"": 2,
    ""Vilnius"": 2,
    ""North Holland"": 10,
    ""Mariehamns stad"": 1,
    ""Punjab"": 1,
    ""Moscow"": 4,
    ""Addis Ababa"": 2,
    ""Karaganda"": 2,
    ""England"": 1,
    ""Guangdong"": 1,
    ""Central Singapore"": 3,
    ""Plovdiv"": 5
  },
  ""country"": {
    ""United States"": 18,
    ""Germany"": 2,
    ""Lithuania"": 8,
    ""Thailand"": 2,
    ""The Netherlands"": 10,
    ""Aland Islands"": 1,
    ""Pakistan"": 1,
    ""Russia"": 4,
    ""Ethiopia"": 2,
    ""Kazakhstan"": 2,
    ""United Kingdom"": 1,
    ""China"": 1,
    ""Singapore"": 3,
    ""Bulgaria"": 5
  },
  ""account"": {
    ""(empty)"": 6,
    ""Test"": 17,
    ""GBammKcBq"": 1,
    ""SZMOHL"": 1,
    ""YGykDS"": 1,
    ""Administr"": 10,
    ""hello"": 9,
    ""vGuGYbNNT"": 1,
    ""ehAxnM"": 1,
    ""oSaknC"": 1,
    ""Domain"": 5,
    ""Administrator"": 1,
    ""eoAeYqqxH"": 1,
    ""oKlDiT"": 1,
    ""xHnVhM"": 1,
    ""JYBhgQuBl"": 1,
    ""ObaOAF"": 1,
    ""qJSdGJ"": 1
  },
  ""keyboard"": {
    ""Unknown"": 60
  },
  ""client_build"": {
    ""Unknown"": 60
  },
  ""client_name"": {
    ""Unknown"": 60
  },
  ""ip_type"": {
    ""Unknown"": 32,
    ""hosting"": 22,
    ""hosting & proxy"": 2,
    ""mobile"": 2,
    ""mobile & hosting & proxy"": 1,
    ""proxy"": 1
  }
}"
UcNu7YgL,Mb,Gruzing,Lua,Saturday 17th of February 2024 06:13:28 PM CDT,"
local leaderName = ""Kondra""
local isLeader = (name() == leaderName)
storage.wait = 0
storage.startattack = 0
storage.friends = {}
storage.friendIndex = 1
storage.target = """"

-- set same outfit, will be used to detect friends
if isLeader then
  -- randomize outfit for leader
  local outfit = player:getOutfit()
  outfit.head = math.random(0, 255)
  outfit.body = math.random(0, 255)
  changeOutfit(outfit)
else
  macro(1000, function()
    local leader = getPlayerByName(leaderName)
    if leader then
      local outfit = player:getOutfit()
      local leaderOutfit = leader:getOutfit()     
      if leaderOutfit.head ~= outfit.head or leaderOutfit.body ~= outfit.body then
        outfit.head = leaderOutfit.head
        outfit.body = leaderOutfit.body
        changeOutfit(outfit)
      end
    end
  end)
end

-- update friends, based on same outfit colors
macro(1000, function()
  storage.friends = {}
  local outfit = player:getOutfit()
  for i, spec in ipairs(getSpectators()) do
    if spec:isPlayer() then
      local specOutfit = spec:getOutfit()
      if specOutfit.head == outfit.head and specOutfit.body == outfit.body then
        table.insert(storage.friends, spec:getName())
      end
    end
  end
  table.sort(storage.friends)
  for i, friend in ipairs(storage.friends) do
    if friend == name() then
      storage.friendIndex = i
      break
    end
  end
end)


function magicWallAttack(target)
  local tpos = target:getPosition()
  local offsets = {{-1,0},{0,-1},{0,1},{1,0},{-1,1},{-1,-1},{1,-1},{1,1}}   
  for i=1,10 do
    local offset = offsets[math.random(1,#offsets)]
    if i == 1 then
      offset = offsets[storage.friendIndex]
    end
    local pos = {x=tpos.x - offset[1], y=tpos.y - offset[2], z=tpos.z}
    local tile = g_map.getTile(pos)   
    if tile and tile:isWalkable(false) then -- if can throw magic wall
      info(storage.friendIndex .. "" "" .. pos.x .. "" "" .. pos.y)
      usewith(3156, tile:getGround()) -- use wild growth, magic wall is 3180
      return true
    end
  end 
  info(""no tiles"")
  return false
end

listen(leaderName, function(text)
  local data = decode(text)
  if data and data.say then
    say(data.say)
  end
  if data and data.t ~= nil then   
    storage.target = data.t
    -- attack with paralyze first, ever character every 1s
    info(""wait "" .. storage.target)
    storage.wait = now + 100
    storage.startattack = now + 4000   
    --schedule(1 + (storage.friendIndex - 1) * 1000, function()
    --  local target = getPlayerByName(storage.target)
    --  if not target then
    --    return
    --  end
    --  usewith(3165, target) -- paralyze
    --end)
  end
end)

if isLeader then
    storage.attacking = """"
    macro(25, function()
        local target = g_game.getAttackingCreature()
        if not target then
          if #storage.attacking > 0 then
            say(encode({t=""""}))
          end
          storage.attacking = """"
          return
        end
        if target:getName() ~= storage.attacking  then
          storage.attacking = target:getName()
          say(encode({t=target:getName(), info=""I'm testing otclientv8 bot - https://otland.net/threads/otclientv8-bot.266958 - i will post there my current script, in 1-2h""}))
          storage.wait = now + 500
        end
    end)
end

macro(25, function()
  local target = getPlayerByName(storage.target)
  if not target then
    return
  end
  if storage.wait > now then
    return
  end
  if now > storage.startattack then
    usewith(3155, target) -- sd
    delay(1000)
    return
  end   
  if magicWallAttack(target) then
    delay(250)
    return
  end 
end)

if not isLeader then
  macro(300, ""go to leader/target"", function()
   local target = getPlayerByName(storage.target)
   local leader = getPlayerByName(leaderName)
   if not leader then
    storage.target = """"
   end
   if target then
     autoWalk(target:getPosition())
     return
   end
   if leader then
    autoWalk(leader:getPosition())
   end
  end) 
end
"
2zzk3emV,G2A.com Free Gift Card Guide Feb 2024,ounnuo,GetText,Saturday 17th of February 2024 05:40:32 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_532471.pdf
 
Working as of
17 February 2024"
H3CdQbi6,webinar-exam-review-2024-02-17,jspill,Python,Saturday 17th of February 2024 05:19:41 PM CDT,"# Exam Review 2024 Feb 17

# Do those LABS
# Ch 2-14... all Labs!
# Ch 21-32 just ADDITIONAL LABS, but important practice!
# get to know the Prac Tests, Ch 33 and 34... more than the Pre

# Use Submit Mode and get them to 100%!!!
# PAY ATTENTION to the unit tests!
# ... then UNIT TEST more! Unit test, unit test, unit test!

# Comp 1: Basic syntax and knowledge: operators, data types, etc
# Comp 2: Control Flow
# Comp 3: Modules and Files

# Comp 1: Basic syntax and knowledge: operators, data types, etc

# Operators
# = # assignment
# == # asking a question
# +
# -
# *
# /
# % # modulo... whole number remainder... ""how many whole things didn't fit since the last even division""
# // # floor division... last even division
# <
# >
# <=
# >=
# += # x += 1 --> x = x+1
# -=
# ** # pow(), math.pow()
# !=
# # keywords
# in # membership check... if x in myList:
# not # if not x in myList:
# and
# or # any one True would cause the combo is True... limit OR to 2-3 conditions

# Data Types/Classes
# int
# float
# bool
# str # """"
# list # [ ]
# dict # {key:value}, review Ch 4.5
# tuple # ( ) immutable, Python sees a,b,c as (a,b,c) --> return x,y --> return (x,y)
# set # no duplicates, no order --> no indices, can't slice it, can't sort it, can't reverse
# range # range()... container of consecutive numbers
# file # open()... f.read(), f.readlines(), f.write()

# Comp 2
# Control Flow! The how and when of our programs
# IF statements...  if, if/else, if/elif, if/elif/else
# LOOPS
# WHILE - a general purpose loop, an IF that repeats
# FOR - repeating actions a known number of times -> once for everything in a container
# FOR - repeating action once for everything in a container
# # Check out my For Loops webinar in The Gotchas
# for ___ in _someContainer_:
# for item in myList:
# for char in myStr:
# for key in myDict: # value for that key in myDict[key]
# for n in range():
# for i in range(0, len(myList)): # for i in range(0, len(myList), 2)
# for i, item in enumerate(myList):

# FUNCTIONS
# defining/writing a function vs calling
# modular... a function has ONE job
# print/output or return (or maybe something else)
# parameters are special variables for holding stuff coming into the function
# parameters vs arguments
#
# def someFunction(x, y):
#     return x - y
#
# if __name__ == ""__main__"": # is this script the one that's running now
#     # inside this block we're answering this specific question
#     input1 = int(input())
#     input2 = int(input())
#     myNum = someFunction(input1, input2)
#     print(myNum)

# CodingBat also has good function-based Python questions:
# https://codingbat.com/python
# See ""tasks"" in the last section of Ch 10, 11, 13, 14 for function writing practice

# BUILT-IN FUNCTIONS
# input()
# print()
# len()
# range()
# int()
# float()
# list()
# tuple()
# dict()
# str()
# sum()
# min()
# max()
# enumerate()
# round() # cousins math.ceil() and math.floor()
# pow() # cousin math.pow() and **
# abs() # cousin math.fabs()
# type() # print(type(x).__name__)
# open() # for file object
# help()
# dir()
# help(str) # help(str.isspace)
# print(dir(str))

# STRINGS
# be able to refer to indices, and slice
# myStr = ""abcd""
# # mySlice[start:stop:step]
# revStr = myStr[::-1]
# print(revStr)

# KNOW YOUR WHITESPACE
"" "" # space from spacebar
# a lot of Unicode spaces
""\n"" # new line return
""\r"" # carriage return
""\t"" # tab

# unless otherwise stated... printed output should end a new line return... 99% of the time it does anyway
print(""hey"") # --> print(""hey"", end=""\n"")
# we only need to change that when...
#1 ... this specific says to do something else
#2 ... you yourself overrode the end parameter of print() as the last thing you did... just call print() again

# STRING METHODS
# myStr.format() # ""Stuff I want put this {} and {} together in one string"".format(var1, var2)
# myStr.strip() # input().strip()
# myStr.split() # returns a list of smaller strings
# "","".join(listOfStrings)
# myStr.replace(subStr, newStr) # ""remove"" myStr = myStr.replace(subStr, """")
# myStr.index(subStr), myStr.find(subStr) # returns index where first found
# myStr.count(subStr) # return # of times its there
# case: .lower(), .upper(), .title(), .capitalize()
# is/Boolean: .islower(), .isupper(), .isspace(), .isalpha(), .isnumeric(), .isdigit(), .isalnum()
# myStr.startswith(subStr), myStr.endswith(subStr)

# LISTS
# be able to refer by index and to slice
# LIST METHODS
# +
# myList.append(item)
# myList.insert(i, item)
# myList.extend(anotherList)
# # -
# myList.pop(i) # last one or by index
# myList.remove(item) # pop() by index, remove() by value
# myList.clear()
# # other
# myList.sort()
# myList.reverse()
# myList.count(item) # returns # times its there
# myList.copy()
# myList.index(item)

# DICT
# use the key like an index []... then you don't really need DICT methods
# myDict[key] # get the value for that key
# myDict[key] = value # assigns new value to key

# DICT METHODS
# myDict.keys() # all dict keys in a set-like object
# myDict.values() # all dict values in a set-like object

# # check if key in dict
# if ___ in myDict: # checking keys
# # check if value in dict
# if ___ in myDict.values() # check values... but I don't know what key :(
# # check if value and get key
# # ... you'd have to for loop and check one by one

# MODULES
# math and csv

# MATH MODULE
# import math # FULL IMPORT
# math.factorial(x)
# math.ceil(x)
# math.floor(x)
# math.sqrt(x)
# math.pow(x, y) # do not confuse with math.exp()
# math.fabs(x)
# math.pi
# math.e
#
# # PARTIAL IMPORT
# from math import sqrt # --> sqrt()
# from math import ceil, floor # --> ceil(), floor()
# from math import * # floor(), sqrt()
#
# # ALIAS IMPORT
# import math as m
# # m.floor(), m.ceil()
#

# FILES
# modes: r, w, a

# READ MODE
# myInput = input() # filename from input
# with open(myInput, ""r"") as f:
# with open(""test.txt"", ""r"") as f:
#     # f.read()  # returns whole file as one big string
#     # f.readlines() # returns a list of strings, line by line
#     # f.write() # take one str arg and write into file (can't do here bc I'm in read mode)
#     contents = f.readlines()
# print(contents)
# for line in contents:
#     line = line.strip()
#     print(line)

# CSV module
import csv # csv.reader()
with open(""mock_data.csv"", ""r"") as f1: # mockaroo.com
    contents = list(csv.reader(f1)) # csv.reader(f1, delimiter=""\t"")
# print(contents)
# for row in contents[0:25]:
#     print(row)

# WRITE MODE
# with open(""output_data34.csv"", ""w"") as f2:
#     # write out a file with each row where last name is Hicklingbottom
#     for row in contents:
#         # last name is row[2]
#         if row[2] == ""Hicklingbottom"":
#             f2.write("","".join(row) + ""\n"")

# APPEND MODE
# with open(""append_to_this.txt"", ""r"") as f3:
#     print(f3.readlines())
with open(""append_to_this.txt"", ""a"") as f3:
    f3.write(""\nPippin"")






























"
YpfQCypJ,Untitled,Crovea,C++,Saturday 17th of February 2024 05:17:47 PM CDT,"#pragma once
#include ""Actors/AWorldItem.h""
#include ""Management/RancInventoryData.h""
#include ""RancItemContainerComponent.generated.h""

UCLASS(Blueprintable, ClassGroup = (Custom), Category = ""Ranc Inventory | Classes"", EditInlineNew, meta = (BlueprintSpawnableComponent))
class URancItemContainerComponent : public UActorComponent
{
    GENERATED_BODY()
public:
    
    explicit URancItemContainerComponent(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get());

    virtual void InitializeComponent() override;
    
	UFUNCTION(BlueprintPure, Category=""Ranc Inventory"")
    float GetCurrentWeight() const;

    UFUNCTION(BlueprintPure, Category=""Ranc Inventory"")
    float GetMaxWeight() const;

    UFUNCTION(BlueprintPure, Category=""Ranc Inventory"")
    int32 GetCurrentItemCount() const;

    UFUNCTION(BlueprintPure, Category=""Ranc Inventory"")
    const FRancItemInstance& FindItemById(const FGameplayTag& ItemId) const;

    /* Add items to the inventory
     * Should only be called on server as we can't trust client to provide trustworthy ItemInstance
     * Instead have the client send an input like CraftItem or PickupItem to the server which results in server call to AddItem  */
    UFUNCTION(BlueprintCallable, Category=""Ranc Inventory"")
    void AddItems_IfServer(const FRancItemInstance& ItemInstance);

    /* For most games we could probably trust the client to specify ItemInstance but for e.g. a hot potato we can't
     * Instead have the client send an input like UseItem or DropItem  */
    UFUNCTION(BlueprintCallable, Category=""Ranc Inventory"")
    bool RemoveItems_IfServer(const FRancItemInstance& ItemInstance);

    /* Attempts to drop the item from the inventory, attempting to spawn an Item object in the world
     * Specify DropItemClass and DropDistance properties to customize the drop
     * Called on client it will request the drop on the server
     * Returns the quantity actually dropped, on client this is only a ""guess"" */
    UFUNCTION(BlueprintCallable, Category=""Ranc Inventory"")
    int32 DropItems(const FRancItemInstance& ItemInstance, float DropAngle = 0);

    UFUNCTION(Server, Reliable)
    int32 DropItems_Server(const FRancItemInstance& ItemInstance, float DropAngle = 0);

    /* Useful for e.g. Death, drops items evenly spaced in a circle with radius DropDistance */
    UFUNCTION(BlueprintCallable, Category=""Ranc Inventory"")
    int32 DropAllItems_IfServer();

    UFUNCTION(BlueprintCallable, Category=""Ranc Inventory"")
    bool CanReceiveItem(const FRancItemInstance& ItemInstance) const;
    
    UFUNCTION(BlueprintPure, Category=""Ranc Inventory"")
    bool ContainsItem(const FGameplayTag& ItemId, int32 Quantity = 1) const;

    UFUNCTION(BlueprintPure, Category=""Ranc Inventory"")
    TArray<FRancItemInstance> GetAllItems() const;
    
    UFUNCTION(BlueprintPure, Category=""Ranc Inventory"")
    bool IsEmpty() const;
    
    DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnInventoryItemAdded, const FRancItemInstance&, ItemInstance);
    UPROPERTY(BlueprintAssignable, Category=""Ranc Inventory"")
    FOnInventoryItemAdded OnItemAdded;
    
    DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnInventoryItemRemoved, const FRancItemInstance&, ItemInstance);
    UPROPERTY(BlueprintAssignable, Category=""Ranc Inventory"")
    FOnInventoryItemRemoved OnItemRemoved;
    
    /* Distance away from the owning actor to drop items. Only used on server */ 
    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    float DropDistance = 100;

    /* Class to spawn when dropping items. Only used on server */
    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    TSubclassOf<AWorldItem> DropItemClass = AWorldItem::StaticClass();

    /* Max weight allowed for this inventory */
    UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = ""Ranc Inventory"", meta = (AllowPrivateAccess = ""true"", ClampMin = ""0"", UIMin = ""0""))
    float MaxWeight;

    /* Max num of items allowed for this inventory */
    UPROPERTY(EditDefaultsOnly, BlueprintReadWrite, Category = ""Ranc Inventory"", meta = (AllowPrivateAccess = ""true"", ClampMin = ""1"", UIMin = ""1""))
    int32 MaxNumItems;

protected:

    UPROPERTY(EditAnywhere, Category=""Ranc Inventory"")
    TArray<FRancInitialItem> InitialItems;
    
    UPROPERTY(ReplicatedUsing=OnRep_Items, BlueprintReadOnly, Category=""Ranc Inventory"")
    TArray<FRancItemInstance> Items;

    // The cache is a copy of Items that is not replicated, used to detect changes after replication, only used on client
    TMap<FGameplayTag, int32> ItemsCache; // Id to quantity;

    AWorldItem* SpawnDroppedItem_IfServer(const FRancItemInstance& ItemInstance, float DropAngle = 0) const;
    
    virtual void GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const override;
protected:
    
    virtual void UpdateWeight();

    void CopyItemsToCache();
    void DetectAndPublishChanges();
    
private:
    float CurrentWeight;

    TArray<FGameplayTag> _KeysToRemove; // Could be a local value but just slight optimization to avoid creating a new array every time.

    UFUNCTION()
    void OnRep_Items();
    
};

CPP:

#include ""Components/RancItemContainerComponent.h""

#include ""Management/RancInventoryFunctions.h""
#include ""Net/UnrealNetwork.h""
#include ""Net/Core/PushModel/PushModel.h""

URancItemContainerComponent::URancItemContainerComponent(const FObjectInitializer& ObjectInitializer) : Super(ObjectInitializer), MaxWeight(0.f), MaxNumItems(0), CurrentWeight(0.f)
{
    PrimaryComponentTick.bCanEverTick = false;
    PrimaryComponentTick.bStartWithTickEnabled = false;
    bWantsInitializeComponent = true;
    SetIsReplicatedByDefault(true);
}

void URancItemContainerComponent::InitializeComponent()
{
    Super::InitializeComponent();

    // add all initial items to items
    if (GetOwnerRole() == ROLE_Authority && GetOwnerRole() != ROLE_None)
    {
        for (const FRancInitialItem& InitialItem : InitialItems)
        {
            const URancItemData* Data = URancInventoryFunctions::GetSingleItemDataById(InitialItem.ItemId, {}, false);
            
            if (Data && Data->ItemId.IsValid())
                Items.Add(FRancItemInstance(Data->ItemId, InitialItem.Quantity));
        }
    }
    CopyItemsToCache();
    
    if (DropItemClass == nullptr)
    {
        DropItemClass = AWorldItem::StaticClass();
    }
}


void URancItemContainerComponent::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const
{
    Super::GetLifetimeReplicatedProps(OutLifetimeProps);

    FDoRepLifetimeParams SharedParams;
    SharedParams.bIsPushBased = true;

    DOREPLIFETIME_WITH_PARAMS_FAST(URancItemContainerComponent, Items, SharedParams);
}


void URancItemContainerComponent::OnRep_Items()
{
    // Recalculate the total weight of the inventory after replication.
    UpdateWeight();

    DetectAndPublishChanges();
}

void URancItemContainerComponent::AddItems_IfServer(const FRancItemInstance& ItemInstance)
{
    if (GetOwnerRole() != ROLE_Authority && GetOwnerRole() != ROLE_None) // none needed for tests
    {
        UE_LOG(LogTemp, Warning, TEXT(""AddItems called on non-authority!""));
        return;
    }

    // Check if the inventory can receive the item
    if (!CanReceiveItem(ItemInstance))
    {
        UE_LOG(LogTemp, Warning, TEXT(""Cannot receive item: %s""), *ItemInstance.ItemId.ToString());
        return;
    }

    bool bItemAdded = false;
    for (auto& ExistingItem : Items)
    {
        // If item exists and is stackable, increase the quantity
        if (ExistingItem.ItemId == ItemInstance.ItemId)
        {
            ExistingItem.Quantity += ItemInstance.Quantity;
            bItemAdded = true;
            break;
        }
    }

    // If item does not exist in the inventory, add it
    if (!bItemAdded)
    {
        Items.Add(ItemInstance);
    }

    // Update the current weight of the inventory
    UpdateWeight();

    OnItemAdded.Broadcast(ItemInstance);

    // Mark the Items array as dirty to ensure replication
    MARK_PROPERTY_DIRTY_FROM_NAME(URancItemContainerComponent, Items, this);
}

bool URancItemContainerComponent::RemoveItems_IfServer(const FRancItemInstance& ItemInstance)
{
    if (GetOwnerRole() != ROLE_Authority && GetOwnerRole() != ROLE_None)
    {
        UE_LOG(LogTemp, Warning, TEXT(""RemoveItems called on non-authority!""));
        return false;
    }

    // Check if the inventory can give the item
    if (!ContainsItem(ItemInstance.ItemId, ItemInstance.Quantity))
    {
        UE_LOG(LogTemp, Warning, TEXT(""Cannot remove item: %s""), *ItemInstance.ItemId.ToString());
        return false;
    }

    for (int i = Items.Num() - 1; i >= 0; --i)
    {
        auto& ExistingItem = Items[i];
        if (ExistingItem.ItemId == ItemInstance.ItemId)
        {
            ExistingItem.Quantity -= ItemInstance.Quantity;

            // If the quantity drops to zero or below, remove the item from the inventory
            if (ExistingItem.Quantity <= 0)
            {
                Items.RemoveAt(i);
                break; // Assuming ItemId is unique and only one instance exists in the inventory
            }
        }
    }
    
    // Update the current weight of the inventory
    UpdateWeight();

    OnItemRemoved.Broadcast(ItemInstance);
    
    // Mark the Items array as dirty to ensure replication
    MARK_PROPERTY_DIRTY_FROM_NAME(URancItemContainerComponent, Items, this);

    return true;
}

AWorldItem* URancItemContainerComponent::SpawnDroppedItem_IfServer(const FRancItemInstance& ItemInstance, float DropAngle) const
{
    if (UWorld* World = GetWorld())
    {
        FActorSpawnParameters SpawnParams;
        const FVector DropSpot = DropAngle == 0 ? GetOwner()->GetActorLocation() + GetOwner()->GetActorForwardVector() * DropDistance : GetOwner()->GetActorLocation() + GetOwner()->GetActorForwardVector().RotateAngleAxis(DropAngle, FVector::UpVector) * DropDistance;
        AWorldItem* WorldItem = World->SpawnActorDeferred<AWorldItem>(DropItemClass, FTransform(DropSpot));
        if (WorldItem)
        {
            WorldItem->SetItem(ItemInstance);
            WorldItem->FinishSpawning(FTransform(DropSpot));
        }
        return WorldItem;
    }
    return nullptr;
}

int32 URancItemContainerComponent::DropItems(const FRancItemInstance& ItemInstance, float DropAngle)
{
    int32 QuantityToDrop = DropItems_Server(ItemInstance, DropAngle);
    
    if (GetOwnerRole() != ROLE_Authority) // if client
    {
        // On client the below is just a guess
        const auto ContainedItemInstance = FindItemById(ItemInstance.ItemId);
        QuantityToDrop = FMath::Min(ItemInstance.Quantity, ContainedItemInstance.Quantity);
    }
    
    return QuantityToDrop;
}

int32 URancItemContainerComponent::DropItems_Server_Implementation(const FRancItemInstance& ItemInstance, float DropAngle)
{
    auto ContainedItemInstance = FindItemById(ItemInstance.ItemId);
    const int32 QuantityToDrop = FMath::Min(ItemInstance.Quantity, ContainedItemInstance.Quantity);

    if (QuantityToDrop <= 0 || !ContainedItemInstance.ItemId.IsValid())
    {
        return 0;
    }

    AWorldItem* DroppedItem = SpawnDroppedItem_IfServer(FRancItemInstance(ItemInstance.ItemId, QuantityToDrop), DropAngle);

    if (DroppedItem)
    {
        ContainedItemInstance.Quantity -= QuantityToDrop;
        if (ContainedItemInstance.Quantity <= 0)
        {
            Items.Remove(ContainedItemInstance);
        }
        OnItemRemoved.Broadcast(ItemInstance);
        UpdateWeight();
        return QuantityToDrop;
    }
    return 0;
}

int32 URancItemContainerComponent::DropAllItems_IfServer()
{
    if (GetOwnerRole() != ROLE_Authority && GetOwnerRole() != ROLE_None)
    {
        UE_LOG(LogTemp, Warning, TEXT(""RemoveItems called on non-authority!""));
        return 0;
    }
    
    // drop with incrementing angle
    int32 DroppedCount = 0;
    float AngleStep = 360.f / Items.Num();

    for (int i = Items.Num() - 1; i >= 0; --i)
    {
        DropItems(Items[i], AngleStep * DroppedCount);
        DroppedCount++;
    }
    
    UpdateWeight();
    
    return DroppedCount;
}

float URancItemContainerComponent::GetCurrentWeight() const
{
    return CurrentWeight;
}

float URancItemContainerComponent::GetMaxWeight() const
{
    return MaxWeight <= 0.f ? MAX_flt : MaxWeight;
}

const FRancItemInstance& URancItemContainerComponent::FindItemById(const FGameplayTag& ItemId) const
{
    for (const auto& Item : Items)
    {
        if (Item.ItemId == ItemId)
        {
            return Item;
        }
    }

    // If the item is not found, throw an error or return a reference to a static empty item info
    UE_LOG(LogTemp, Warning, TEXT(""Item with ID %s not found.""), *ItemId.ToString());
    return FRancItemInstance::EmptyItemInstance;
}

bool URancItemContainerComponent::CanReceiveItem(const FRancItemInstance& ItemInstance) const
{
    // Check if adding this item would exceed the max number of unique items
    if (!ContainsItem(ItemInstance.ItemId) && Items.Num() >= MaxNumItems)
    {
        UE_LOG(LogTemp, Warning, TEXT(""Cannot receive item: Inventory is full.""));
        return false;
    }

    // Calculate the additional weight this item would add
    if (const URancItemData* const ItemData = URancInventoryFunctions::GetItemDataById(ItemInstance.ItemId))
    {
        float AdditionalWeight = ItemData->ItemWeight * ItemInstance.Quantity;
        if (CurrentWeight + AdditionalWeight > MaxWeight)
        {
            UE_LOG(LogTemp, Warning, TEXT(""Cannot receive item: Exceeds max weight.""));
            return false;
        }
    }
    else
    {
        UE_LOG(LogTemp, Warning, TEXT(""Could not find item data for item: %s""), *ItemInstance.ItemId.ToString());
        return false;
    }

    return true;
}

bool URancItemContainerComponent::ContainsItem(const FGameplayTag& ItemId, int32 Quantity) const
{
    int32 TotalQuantity = 0;
    for (const auto& Item : Items)
    {
        if (Item.ItemId == ItemId)
        {
            TotalQuantity += Item.Quantity;
            if (TotalQuantity >= Quantity)
            {
                return true;
            }
        }
    }
    return false;
}

int32 URancItemContainerComponent::GetCurrentItemCount() const
{
    int32 Count = 0;
    for (const auto& Item : Items)
    {
        Count += Item.Quantity;
    }
    return Count;
}

TArray<FRancItemInstance> URancItemContainerComponent::GetAllItems() const
{
    return Items;
}

bool URancItemContainerComponent::IsEmpty() const
{
    return Items.Num() == 0;
}

void URancItemContainerComponent::UpdateWeight()
{
    CurrentWeight = 0.0f; // Reset weight
    for (const auto& ItemInstance : Items)
    {
        if (const URancItemData* const ItemData = URancInventoryFunctions::GetItemDataById(ItemInstance.ItemId))
        {
            CurrentWeight += ItemData->ItemWeight * ItemInstance.Quantity;
        }
    }

    // This example does not handle the case where item data is not found, which might be important for ensuring accuracy.
}

void URancItemContainerComponent::CopyItemsToCache()
{
    ItemsCache.Reset();
    ItemsCache.Reserve(Items.Num());
    for (int i = 0; i < Items.Num(); ++i)
    {
        ItemsCache[Items[i].ItemId] = Items[i].Quantity;
    }
}

void URancItemContainerComponent::DetectAndPublishChanges()
{
    // First pass: Update existing items or add new ones, mark them by setting quantity to negative.
    for (FRancItemInstance& NewItem : Items)
    {
        int32* OldQuantity = ItemsCache.Find(NewItem.ItemId);
        if (OldQuantity)
        {
            // Item exists, check for quantity change
            if (*OldQuantity != NewItem.Quantity)
            {
                if (*OldQuantity < NewItem.Quantity)
                {
                    OnItemAdded.Broadcast(FRancItemInstance(NewItem.ItemId, NewItem.Quantity - *OldQuantity));
                }
                else if (*OldQuantity > NewItem.Quantity)
                {
                    OnItemRemoved.Broadcast(FRancItemInstance(NewItem.ItemId, *OldQuantity - NewItem.Quantity));
                }
            }
            // Mark this item as processed by temporarily setting its value to its own negative (or another marker strategy)
            *OldQuantity = -abs(NewItem.Quantity);
        }
        else
        {
            // New item
            OnItemAdded.Broadcast(NewItem);
            ItemsCache.Add(NewItem.ItemId, -abs(NewItem.Quantity)); // Mark as processed
        }
    }

    // Second pass: Remove unmarked items (those not set to negative) and revert marks for processed items
    _KeysToRemove.Reset(ItemsCache.Num());
    for (auto& Pair : ItemsCache)
    {
        if (Pair.Value >= 0)
        {
            // Item was not processed (not found in Items), so it has been removed
            OnItemRemoved.Broadcast(FRancItemInstance(Pair.Key, Pair.Value));
            _KeysToRemove.Add(Pair.Key);
        }
        else
        {
            // Revert the mark to reflect the actual quantity
            Pair.Value = -Pair.Value;
        }
    }

    // Remove items that were not found in the current Items array
    for (const FGameplayTag& Key : _KeysToRemove)
    {
        ItemsCache.Remove(Key);
    }
}"
VVPS9k8s,Untitled,smj007,Python,Saturday 17th of February 2024 04:50:24 PM CDT,"class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        
        max_prod_prev = 1
        min_prod_prev = 1 
        max_so_far = -math.inf

        for n in nums:

            max_prod_ending_here = max(n, max_prod_prev*n, min_prod_prev*n)
            min_prod_ending_here = min(n, min_prod_prev*n, max_prod_prev*n)
            max_prod_prev, min_prod_prev = max_prod_ending_here, min_prod_ending_here
            max_so_far = max(max_so_far, max_prod_ending_here)

        return max_so_far"
dBHmy0vb,News Feb17 24,Newscaster_Ned,Email,Saturday 17th of February 2024 04:34:18 PM CDT,".‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎T‎‎‎e‎‎‎s‎‎‎t‎‎‎ ‎‎‎1‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎
.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎T‎‎‎e‎‎‎s‎‎‎t‎‎‎ ‎‎‎2‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎
.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎T‎‎‎e‎‎‎s‎‎‎t‎‎‎ ‎‎‎3‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎
.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎.‎‎‎ ‎‎‎T‎‎‎e‎‎‎s‎‎‎t‎‎‎ ‎‎‎c‎‎‎o‎‎‎m‎‎‎p‎‎‎l‎‎‎e‎‎‎t‎‎‎e‎‎‎.‎‎‎

G‎o‎d‎d‎a‎m‎n‎,‎ ‎k‎i‎k‎e‎y‎ ‎w‎i‎k‎e‎y‎s‎.‎ ‎S‎i‎l‎l‎y‎ ‎J‎u‎d‎e‎n‎.‎ ‎A‎n‎y‎w‎a‎y‎,‎ ‎h‎e‎r‎e‎'‎s‎ ‎a‎ ‎n‎o‎n‎-‎s‎k‎e‎w‎e‎d‎ ‎v‎i‎e‎w‎ ‎o‎f‎ ‎t‎h‎e‎ ‎w‎o‎r‎l‎d‎.‎

P‎o‎l‎i‎c‎e‎:‎ ‎P‎e‎n‎n‎s‎y‎l‎v‎a‎n‎i‎a‎ ‎J‎u‎d‎g‎e‎ ‎S‎h‎o‎t‎ ‎E‎x‎-‎B‎o‎y‎f‎r‎i‎e‎n‎d‎ ‎i‎n‎ ‎H‎e‎a‎d‎ ‎W‎h‎i‎l‎e‎ ‎H‎e‎ ‎S‎l‎e‎p‎t‎
E‎a‎s‎t‎ ‎T‎e‎x‎a‎s‎ ‎M‎a‎n‎ ‎N‎a‎m‎e‎d‎ ‎'‎P‎e‎r‎s‎o‎n‎ ‎o‎f‎ ‎I‎n‎t‎e‎r‎e‎s‎t‎'‎ ‎i‎n‎ ‎G‎i‎r‎l‎'‎s‎ ‎D‎i‎s‎a‎p‎p‎e‎a‎r‎a‎n‎c‎e‎
J‎o‎h‎n‎ ‎M‎e‎l‎l‎e‎n‎c‎a‎m‎p‎:‎ ‎P‎a‎s‎s‎ ‎M‎o‎r‎e‎ ‎G‎u‎n‎ ‎L‎a‎w‎s‎,‎ ‎S‎h‎o‎w‎ ‎P‎h‎o‎t‎o‎s‎ ‎o‎f‎ ‎S‎l‎a‎i‎n‎ ‎K‎i‎d‎s‎
W‎a‎t‎c‎h‎ ‎L‎i‎v‎e‎:‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎S‎p‎e‎a‎k‎s‎ ‎i‎n‎ ‎P‎h‎i‎l‎a‎d‎e‎l‎p‎h‎i‎a‎,‎ ‎P‎e‎n‎n‎s‎y‎l‎v‎a‎n‎i‎a‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
W‎h‎o‎ ‎O‎w‎n‎s‎ ‎t‎h‎e‎ ‎O‎p‎e‎n‎ ‎B‎o‎r‎d‎e‎r‎?‎

C‎o‎u‎l‎t‎e‎r‎ ‎T‎h‎r‎o‎w‎s‎ ‎D‎o‎w‎n‎,‎ ‎D‎e‎b‎u‎n‎k‎s‎ ‎D‎e‎m‎ ‎T‎a‎l‎k‎i‎n‎g‎ ‎P‎o‎i‎n‎t‎s‎ ‎B‎l‎a‎m‎i‎n‎g‎ ‎G‎O‎P‎

M‎a‎h‎e‎r‎,‎ ‎V‎a‎n‎ ‎J‎o‎n‎e‎s‎ ‎F‎o‎r‎c‎e‎d‎ ‎t‎o‎ ‎A‎d‎m‎i‎t‎ ‎S‎a‎n‎c‎t‎u‎a‎r‎y‎ ‎C‎i‎t‎i‎e‎s‎ ‎A‎r‎e‎ ‎a‎ ‎M‎e‎s‎s‎
B‎o‎r‎d‎e‎r‎
O‎n‎ ‎F‎r‎i‎d‎a‎y‎’‎s‎ ‎b‎r‎o‎a‎d‎c‎a‎s‎t‎ ‎o‎f‎ ‎H‎B‎O‎’‎s‎ ‎“‎R‎e‎a‎l‎ ‎T‎i‎m‎e‎,‎”‎ ‎C‎N‎N‎ ‎S‎e‎n‎i‎o‎r‎ ‎P‎o‎l‎i‎t‎i‎c‎a‎l‎ ‎C‎o‎m‎m‎e‎n‎t‎a‎t‎o‎r‎ ‎a‎n‎d‎ ‎f‎o‎r‎m‎e‎r‎ ‎O‎b‎a‎m‎a‎ ‎A‎d‎v‎i‎s‎e‎r‎ ‎V‎a‎n‎ ‎J‎o‎n‎e‎s‎ ‎a‎n‎d‎ ‎c‎o‎l‎u‎m‎n‎i‎s‎t‎ ‎a‎n‎d‎ ‎a‎u‎t‎h‎o‎r‎ ‎A‎n‎n‎ ‎C‎o‎u‎l‎t‎e‎r‎ ‎s‎p‎a‎r‎r‎e‎d‎ ‎o‎v‎e‎r‎ ‎t‎h‎e‎ ‎f‎a‎i‎l‎e‎d‎ ‎S‎e‎n‎a‎t‎e‎ ‎b‎o‎r‎d‎e‎r‎ ‎b‎i‎l‎l‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎U‎.‎S‎.‎ ‎i‎m‎m‎i‎g‎r‎a‎t‎i‎o‎n‎ ‎s‎y‎s‎t‎e‎m‎.‎ ‎A‎f‎t‎e‎r‎ ‎h‎o‎s‎t‎ ‎B‎i‎l‎l‎ ‎M‎a‎h‎e‎r‎ ‎a‎r‎g‎u‎e‎d‎

A‎s‎ ‎E‎a‎s‎t‎e‎r‎ ‎N‎e‎a‎r‎s‎,‎ ‎S‎o‎m‎e‎ ‎A‎t‎h‎e‎i‎s‎t‎s‎ ‎I‎n‎s‎i‎s‎t‎ ‎‘‎T‎h‎e‎r‎e‎ ‎W‎a‎s‎ ‎N‎o‎ ‎J‎e‎s‎u‎s‎’‎
A‎s‎ ‎E‎a‎s‎t‎e‎r‎ ‎N‎e‎a‎r‎s‎,‎ ‎S‎o‎m‎e‎ ‎A‎t‎h‎e‎i‎s‎t‎s‎ ‎I‎n‎s‎i‎s‎t‎ ‎‘‎T‎h‎e‎r‎e‎ ‎W‎a‎s‎ ‎N‎o‎ ‎J‎e‎s‎u‎s‎’‎
1‎,‎0‎0‎6‎
L‎e‎g‎a‎l‎ ‎A‎n‎a‎l‎y‎s‎t‎ ‎P‎o‎l‎i‎s‎:‎ ‎I‎t‎’‎s‎ ‎‘‎G‎a‎m‎e‎ ‎O‎v‎e‎r‎’‎ ‎i‎f‎ ‎F‎a‎n‎i‎ ‎W‎i‎l‎l‎i‎s‎ ‎L‎i‎e‎d‎ ‎—‎ ‎‘‎S‎h‎e‎ ‎W‎i‎l‎l‎
L‎e‎g‎a‎l‎ ‎A‎n‎a‎l‎y‎s‎t‎ ‎P‎o‎l‎i‎s‎:‎ ‎G‎a‎m‎e‎ ‎O‎v‎e‎r‎ ‎i‎f‎ ‎F‎a‎n‎i‎ ‎W‎i‎l‎l‎i‎s‎ ‎L‎i‎e‎d‎ ‎-‎-‎ ‎I‎t‎'‎s‎ ‎D‎i‎s‎q‎u‎a‎l‎i‎f‎y‎i‎n‎g‎
2‎,‎9‎2‎2‎
Z‎e‎l‎e‎n‎s‎k‎y‎ ‎D‎e‎m‎a‎n‎d‎s‎ ‎M‎o‎r‎e‎ ‎W‎e‎a‎p‎o‎n‎s‎ ‎F‎r‎o‎m‎ ‎W‎e‎s‎t‎,‎ ‎I‎n‎v‎i‎t‎e‎s‎ ‎T‎r‎u‎m‎p‎ ‎t‎o‎ ‎V‎i‎s‎i‎t‎ ‎‘‎F‎r‎o‎n‎t‎ ‎L‎i‎n‎e‎’‎
Z‎e‎l‎e‎n‎s‎k‎y‎ ‎D‎e‎m‎a‎n‎d‎s‎ ‎M‎o‎r‎e‎ ‎W‎e‎a‎p‎o‎n‎s‎,‎ ‎I‎n‎v‎i‎t‎e‎s‎ ‎T‎r‎u‎m‎p‎ ‎t‎o‎ ‎'‎F‎r‎o‎n‎t‎ ‎L‎i‎n‎e‎'‎
5‎,‎3‎8‎3‎
P‎a‎d‎i‎l‎l‎a‎:‎ ‎G‎O‎P‎ ‎O‎p‎p‎o‎s‎e‎s‎ ‎A‎i‎d‎ ‎T‎h‎a‎t‎ ‎I‎ ‎V‎o‎t‎e‎d‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎B‎e‎c‎a‎u‎s‎e‎ ‎I‎t‎ ‎D‎i‎d‎n‎’‎t‎ ‎H‎a‎v‎e‎ ‎A‎m‎n‎e‎s‎t‎y‎ ‎B‎e‎c‎a‎u‎s‎e‎ ‎P‎u‎t‎i‎n‎ ‎H‎a‎
P‎a‎d‎i‎l‎l‎a‎:‎ ‎G‎O‎P‎ ‎H‎a‎s‎ ‎P‎o‎s‎i‎t‎i‎o‎n‎ ‎o‎n‎ ‎A‎i‎d‎ ‎I‎ ‎D‎i‎d‎ ‎B‎e‎c‎a‎u‎s‎e‎ ‎P‎u‎t‎i‎n‎ ‎H‎a‎s‎ ‎S‎o‎m‎e‎t‎h‎i‎n‎g‎ ‎o‎n‎ ‎T‎r‎u‎m‎p‎
2‎8‎6‎
‘‎S‎u‎s‎p‎i‎c‎i‎o‎u‎s‎ ‎R‎e‎v‎e‎r‎s‎a‎l‎:‎’‎ ‎D‎O‎J‎ ‎B‎a‎c‎k‎s‎ ‎D‎o‎w‎n‎ ‎f‎r‎o‎m‎ ‎M‎a‎s‎s‎i‎v‎e‎ ‎F‎r‎a‎u‎d‎ ‎C‎a‎s‎e‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎D‎e‎m‎ ‎M‎e‎g‎a‎d‎o‎n‎o‎r‎ ‎D‎i‎s‎
D‎O‎J‎ ‎B‎a‎c‎k‎s‎ ‎D‎o‎w‎n‎ ‎f‎r‎o‎m‎ ‎M‎a‎s‎s‎i‎v‎e‎ ‎F‎r‎a‎u‎d‎ ‎C‎a‎s‎e‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎D‎i‎s‎h‎ ‎N‎e‎t‎w‎o‎r‎k‎ ‎C‎E‎O‎,‎ ‎B‎l‎a‎c‎k‎r‎o‎c‎k‎
1‎,‎6‎5‎9‎
Z‎e‎l‎e‎n‎s‎k‎y‎ ‎S‎u‎g‎g‎e‎s‎t‎s‎ ‎R‎e‎g‎i‎m‎e‎ ‎C‎h‎a‎n‎g‎e‎ ‎i‎n‎ ‎R‎u‎s‎s‎i‎a‎ ‎a‎n‎d‎ ‎A‎s‎s‎a‎s‎s‎i‎n‎a‎t‎i‎o‎n‎ ‎A‎w‎a‎i‎t‎s‎ ‎P‎u‎t‎i‎n‎
Z‎e‎l‎e‎n‎s‎k‎y‎ ‎S‎u‎g‎g‎e‎s‎t‎s‎ ‎A‎s‎s‎a‎s‎s‎i‎n‎a‎t‎i‎o‎n‎ ‎A‎w‎a‎i‎t‎s‎ ‎P‎u‎t‎i‎n‎
4‎8‎4‎
A‎l‎e‎x‎e‎i‎ ‎N‎a‎v‎a‎l‎n‎y‎’‎s‎ ‎D‎e‎a‎t‎h‎ ‎B‎e‎c‎o‎m‎e‎s‎ ‎R‎a‎l‎l‎y‎i‎n‎g‎ ‎C‎r‎y‎ ‎f‎o‎r‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎A‎i‎d‎ ‎t‎o‎ ‎F‎u‎r‎t‎h‎e‎r‎ ‎E‎n‎d‎l‎e‎s‎s‎ ‎R‎u‎s‎s‎i‎a‎n‎ ‎P‎r‎o‎x‎y‎ ‎
A‎l‎e‎x‎e‎i‎ ‎N‎a‎v‎a‎l‎n‎y‎'‎s‎ ‎D‎e‎a‎t‎h‎ ‎B‎e‎c‎o‎m‎e‎s‎ ‎R‎a‎l‎l‎y‎i‎n‎g‎ ‎C‎r‎y‎ ‎f‎o‎r‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎A‎i‎d‎
2‎7‎0‎
W‎a‎t‎c‎h‎ ‎L‎i‎v‎e‎:‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎S‎p‎e‎a‎k‎s‎ ‎i‎n‎ ‎P‎h‎i‎l‎a‎d‎e‎l‎p‎h‎i‎a‎,‎ ‎P‎e‎n‎n‎s‎y‎l‎v‎a‎n‎i‎a‎
W‎a‎t‎c‎h‎ ‎L‎i‎v‎e‎:‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎S‎p‎e‎a‎k‎s‎ ‎i‎n‎ ‎P‎h‎i‎l‎a‎d‎e‎l‎p‎h‎i‎a‎,‎ ‎P‎e‎n‎n‎s‎y‎l‎v‎a‎n‎i‎a‎
2‎1‎1‎
P‎u‎t‎i‎n‎ ‎C‎r‎i‎t‎i‎c‎,‎ ‎R‎u‎s‎s‎i‎a‎n‎ ‎O‎p‎p‎o‎s‎i‎t‎i‎o‎n‎ ‎L‎e‎a‎d‎e‎r‎ ‎A‎l‎e‎x‎i‎ ‎N‎a‎v‎a‎l‎n‎y‎ ‎D‎i‎e‎s‎ ‎i‎n‎ ‎P‎r‎i‎s‎o‎n‎
P‎u‎t‎i‎n‎ ‎C‎r‎i‎t‎i‎c‎ ‎A‎l‎e‎x‎i‎ ‎N‎a‎v‎a‎l‎n‎y‎ ‎D‎i‎e‎s‎ ‎i‎n‎ ‎P‎r‎i‎s‎o‎n‎
3‎,‎2‎3‎6‎
R‎e‎p‎o‎r‎t‎:‎ ‎B‎i‎d‎e‎n‎ ‎A‎t‎t‎o‎r‎n‎e‎y‎s‎ ‎P‎u‎s‎h‎e‎d‎ ‎D‎O‎J‎ ‎t‎o‎ ‎O‎m‎i‎t‎ ‎L‎a‎n‎g‎u‎a‎g‎e‎ ‎C‎r‎i‎t‎i‎c‎a‎l‎ ‎o‎f‎ ‎H‎i‎s‎ ‎A‎g‎e‎
R‎e‎p‎o‎r‎t‎:‎ ‎B‎i‎d‎e‎n‎ ‎A‎t‎t‎o‎r‎n‎e‎y‎s‎ ‎P‎u‎s‎h‎e‎d‎ ‎D‎O‎J‎ ‎t‎o‎ ‎O‎m‎i‎t‎ ‎C‎r‎i‎t‎i‎q‎u‎e‎ ‎o‎f‎ ‎A‎g‎e‎,‎ ‎M‎e‎m‎o‎r‎y‎

N‎e‎g‎r‎o‎ ‎B‎o‎y‎f‎r‎i‎e‎n‎d‎ ‎o‎f‎ ‎D‎e‎a‎d‎ ‎M‎u‎d‎s‎h‎a‎r‎k‎ ‎A‎l‎a‎b‎a‎m‎a‎ ‎C‎o‎u‎n‎c‎i‎l‎w‎o‎m‎a‎n‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎H‎e‎r‎ ‎B‎o‎d‎y‎ ‎W‎a‎s‎ ‎F‎o‎u‎n‎d‎ ‎U‎n‎d‎e‎r‎ ‎B‎r‎i‎d‎g‎e‎.‎

H‎e‎ ‎w‎a‎n‎t‎e‎d‎ ‎t‎o‎ ‎b‎u‎r‎n‎ ‎t‎h‎a‎t‎ ‎b‎r‎i‎d‎g‎e‎.‎


N‎e‎w‎ ‎C‎a‎s‎t‎l‎e‎ ‎C‎o‎u‎n‎t‎y‎ ‎C‎o‎o‎n‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎2‎0‎1‎7‎ ‎R‎a‎p‎e‎s‎.‎


S‎i‎l‎v‎e‎r‎b‎a‎c‎k‎ ‎M‎M‎A‎ ‎F‎i‎g‎h‎t‎e‎r‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎D‎r‎i‎v‎i‎n‎g‎ ‎2‎ ‎D‎r‎u‎n‎k‎ ‎W‎o‎m‎e‎n‎ ‎H‎o‎m‎e‎ ‎a‎n‎d‎ ‎R‎a‎p‎i‎n‎g‎ ‎T‎h‎e‎m‎.‎


M‎o‎n‎k‎e‎y‎ ‎J‎e‎r‎k‎s‎ ‎o‎f‎f‎ ‎i‎n‎ ‎f‎r‎o‎n‎t‎ ‎o‎f‎ ‎F‎a‎m‎i‎l‎y‎ ‎a‎n‎d‎ ‎C‎h‎a‎s‎e‎s‎ ‎T‎h‎e‎m‎ ‎a‎t‎ ‎S‎p‎r‎o‎u‎t‎s‎ ‎G‎r‎o‎c‎e‎r‎y‎ ‎S‎t‎o‎r‎e‎.‎


A‎t‎l‎a‎n‎t‎a‎ ‎P‎o‎p‎o‎ ‎S‎e‎a‎r‎c‎h‎i‎n‎g‎ ‎f‎o‎r‎ ‎M‎o‎n‎k‎ ‎W‎h‎o‎ ‎S‎h‎o‎t‎ ‎P‎u‎p‎p‎y‎ ‎t‎o‎ ‎D‎e‎a‎f‎.‎


(‎S‎h‎e‎b‎o‎o‎n‎)‎ ‎B‎u‎r‎k‎e‎ ‎H‎i‎g‎h‎ ‎T‎e‎a‎c‎h‎e‎r‎ ‎G‎i‎v‎e‎s‎ ‎S‎t‎u‎d‎e‎n‎t‎ ‎H‎i‎g‎h‎ ‎G‎r‎a‎d‎e‎s‎ ‎S‎o‎ ‎S‎h‎e‎ ‎C‎a‎n‎ ‎F‎u‎c‎k‎ ‎H‎i‎m‎.‎


B‎o‎n‎d‎ ‎D‎e‎n‎i‎e‎d‎ ‎f‎o‎r‎ ‎2‎ ‎E‎v‎o‎l‎v‎e‎d‎ ‎M‎o‎n‎k‎e‎y‎s‎ ‎W‎h‎o‎ ‎S‎h‎o‎t‎ ‎B‎o‎s‎t‎o‎n‎ ‎P‎o‎l‎i‎c‎e‎ ‎O‎f‎f‎i‎c‎e‎r‎.‎


S‎p‎a‎d‎e‎ ‎T‎h‎r‎o‎w‎s‎ ‎D‎a‎y‎t‎o‎n‎a‎ ‎B‎e‎a‎c‎h‎ ‎M‎a‎n‎ ‎o‎f‎f‎ ‎B‎r‎i‎d‎g‎e‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

S‎a‎t‎ ‎1‎7‎ ‎|‎ ‎D‎a‎y‎
5‎0‎°‎
1‎%‎
N‎
2‎2‎
m‎p‎h‎
W‎i‎n‎d‎y‎.‎ ‎C‎l‎o‎u‎d‎y‎ ‎s‎k‎i‎e‎s‎ ‎w‎i‎l‎l‎ ‎b‎e‎c‎o‎m‎e‎ ‎p‎a‎r‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎t‎h‎i‎s‎ ‎a‎f‎t‎e‎r‎n‎o‎o‎n‎.‎ ‎H‎i‎g‎h‎ ‎n‎e‎a‎r‎ ‎5‎0‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎N‎ ‎a‎t‎ ‎2‎0‎ ‎t‎o‎ ‎3‎0‎ ‎m‎p‎h‎.‎ ‎H‎i‎g‎h‎e‎r‎ ‎w‎i‎n‎d‎ ‎g‎u‎s‎t‎s‎ ‎p‎o‎s‎s‎i‎b‎l‎e‎.‎
H‎u‎m‎i‎d‎i‎t‎y‎
5‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
4‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎0‎8‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
6‎:‎1‎9‎ ‎p‎m‎
S‎a‎t‎ ‎1‎7‎ ‎|‎ ‎N‎i‎g‎h‎t‎
3‎2‎°‎
1‎%‎
N‎
1‎1‎
m‎p‎h‎
P‎a‎r‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎s‎k‎i‎e‎s‎.‎ ‎L‎o‎w‎ ‎3‎2‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎N‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎1‎5‎ ‎m‎p‎h‎.‎
H‎u‎m‎i‎d‎i‎t‎y‎
6‎1‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
1‎2‎:‎1‎6‎ ‎p‎m‎
W‎a‎x‎i‎n‎g‎ ‎G‎i‎b‎b‎o‎u‎s‎
M‎o‎o‎n‎s‎e‎t‎
2‎:‎0‎2‎ ‎a‎m‎
S‎u‎n‎ ‎1‎8‎
S‎u‎n‎n‎y‎
5‎7‎°‎
/‎3‎6‎°‎
1‎%‎
N‎ ‎7‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎9‎
S‎u‎n‎n‎y‎
7‎0‎°‎
/‎4‎7‎°‎
4‎%‎
S‎S‎W‎ ‎1‎2‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎0‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎7‎°‎
/‎5‎7‎°‎
9‎%‎
S‎S‎W‎ ‎1‎2‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎1‎°‎
/‎6‎0‎°‎
9‎%‎
S‎S‎W‎ ‎1‎2‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎2‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎2‎°‎
/‎5‎5‎°‎
8‎%‎
W‎S‎W‎ ‎1‎2‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎3‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎1‎°‎
/‎4‎7‎°‎
1‎%‎
N‎ ‎1‎4‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎4‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎3‎°‎
/‎5‎0‎°‎
3‎%‎
S‎E‎ ‎8‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎5‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎5‎°‎
/‎5‎9‎°‎
1‎2‎%‎
S‎ ‎1‎3‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎6‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎0‎°‎
/‎6‎0‎°‎
7‎%‎
S‎S‎W‎ ‎1‎4‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎7‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎0‎°‎
/‎5‎8‎°‎
1‎2‎%‎
S‎S‎W‎ ‎1‎2‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎8‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎8‎°‎
/‎5‎8‎°‎
2‎0‎%‎
S‎S‎W‎ ‎1‎1‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎9‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
7‎6‎°‎
/‎5‎5‎°‎
3‎8‎%‎
S‎W‎ ‎1‎1‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎1‎
I‎s‎o‎l‎a‎t‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎5‎°‎
/‎5‎5‎°‎
3‎1‎%‎
S‎W‎ ‎1‎1‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎2‎
I‎s‎o‎l‎a‎t‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎5‎°‎
/‎5‎4‎°‎
3‎5‎%‎
S‎ ‎1‎0‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎T‎h‎e‎ ‎s‎u‎s‎p‎i‎c‎i‎o‎u‎s‎.‎ ‎🥸

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎o‎n‎s‎p‎i‎r‎a‎c‎y‎ ‎T‎h‎e‎o‎r‎y‎
T‎h‎e‎r‎e‎ ‎i‎s‎ ‎a‎ ‎s‎e‎c‎r‎e‎t‎ ‎c‎a‎b‎a‎l‎ ‎w‎h‎o‎s‎e‎ ‎o‎n‎l‎y‎ ‎d‎e‎s‎i‎g‎n‎ ‎i‎s‎ ‎t‎o‎ ‎k‎e‎e‎p‎ ‎y‎o‎u‎ ‎f‎r‎o‎m‎ ‎g‎e‎t‎t‎i‎n‎g‎ ‎l‎a‎i‎d‎.‎ ‎T‎h‎e‎r‎e‎ ‎a‎r‎e‎ ‎f‎o‎r‎c‎e‎s‎ ‎a‎l‎i‎g‎n‎i‎n‎g‎ ‎a‎g‎a‎i‎n‎s‎t‎ ‎y‎o‎u‎r‎ ‎a‎t‎t‎e‎m‎p‎t‎s‎ ‎t‎o‎ ‎m‎a‎k‎e‎ ‎m‎o‎n‎e‎y‎.‎ ‎S‎e‎c‎r‎e‎t‎ ‎s‎o‎c‎i‎e‎t‎i‎e‎s‎ ‎a‎r‎e‎ ‎l‎i‎n‎i‎n‎g‎ ‎u‎p‎ ‎a‎n‎d‎ ‎s‎c‎h‎e‎m‎i‎n‎g‎ ‎j‎u‎s‎t‎ ‎s‎o‎ ‎t‎h‎a‎t‎ ‎y‎o‎u‎ ‎w‎i‎l‎l‎ ‎n‎e‎v‎e‎r‎ ‎b‎e‎ ‎s‎u‎c‎c‎e‎s‎s‎f‎u‎l‎.‎ ‎M‎y‎s‎t‎e‎r‎i‎o‎u‎s‎ ‎f‎a‎c‎t‎i‎o‎n‎s‎ ‎g‎a‎t‎h‎e‎r‎ ‎u‎n‎d‎e‎r‎ ‎t‎h‎e‎ ‎f‎u‎l‎l‎ ‎m‎o‎o‎n‎,‎ ‎a‎t‎t‎e‎m‎p‎t‎i‎n‎g‎ ‎t‎o‎ ‎b‎r‎i‎n‎g‎ ‎t‎h‎e‎ ‎d‎o‎w‎n‎f‎a‎l‎l‎ ‎o‎f‎ ‎t‎h‎e‎ ‎w‎o‎r‎l‎d‎,‎ ‎j‎u‎s‎t‎ ‎s‎o‎ ‎t‎h‎a‎t‎ ‎y‎o‎u‎ ‎w‎i‎l‎l‎ ‎n‎e‎v‎e‎r‎ ‎l‎o‎s‎e‎ ‎w‎e‎i‎g‎h‎t‎,‎ ‎b‎e‎ ‎a‎t‎t‎r‎a‎c‎t‎i‎v‎e‎,‎ ‎o‎r‎ ‎s‎t‎o‎p‎ ‎s‎m‎e‎l‎l‎i‎n‎g‎ ‎l‎i‎k‎e‎ ‎c‎h‎e‎e‎s‎e‎.‎ ‎A‎l‎l‎ ‎o‎f‎ ‎t‎h‎e‎s‎e‎ ‎t‎h‎i‎n‎g‎s‎,‎ ‎t‎h‎e‎s‎e‎ ‎C‎o‎n‎s‎p‎i‎r‎a‎c‎y‎ ‎T‎h‎e‎o‎r‎i‎e‎s‎,‎ ‎a‎r‎e‎ ‎t‎h‎e‎ ‎a‎v‎e‎r‎a‎g‎e‎ ‎i‎n‎t‎e‎r‎n‎e‎t‎ ‎s‎l‎o‎b‎’‎s‎ ‎e‎x‎c‎u‎s‎e‎ ‎a‎s‎ ‎t‎o‎ ‎w‎h‎y‎ ‎h‎e‎ ‎o‎r‎ ‎s‎h‎e‎ ‎h‎a‎s‎ ‎b‎e‎c‎o‎m‎e‎ ‎a‎n‎d‎ ‎r‎e‎m‎a‎i‎n‎s‎ ‎s‎u‎c‎h‎ ‎a‎ ‎g‎o‎d‎d‎a‎m‎n‎e‎d‎ ‎l‎o‎s‎e‎r‎.‎ ‎A‎l‎l‎ ‎c‎o‎n‎s‎p‎i‎r‎a‎c‎y‎ ‎t‎h‎e‎o‎r‎i‎e‎s‎ ‎r‎e‎v‎o‎l‎v‎e‎ ‎a‎r‎o‎u‎n‎d‎ ‎t‎w‎o‎ ‎t‎h‎i‎n‎g‎s‎,‎ ‎f‎a‎i‎l‎ ‎a‎n‎d‎ ‎m‎o‎n‎e‎y‎.‎ ‎I‎f‎ ‎y‎o‎u‎ ‎c‎a‎n‎ ‎f‎i‎n‎d‎ ‎a‎n‎y‎ ‎s‎u‎b‎j‎e‎c‎t‎ ‎w‎h‎i‎c‎h‎ ‎i‎n‎v‎o‎l‎v‎e‎s‎ ‎s‎o‎m‎e‎ ‎t‎y‎p‎e‎ ‎o‎f‎ ‎f‎a‎i‎l‎ ‎i‎n‎ ‎w‎h‎i‎c‎h‎ ‎s‎o‎m‎e‎o‎n‎e‎ ‎m‎a‎d‎e‎ ‎m‎o‎n‎e‎y‎ ‎t‎h‎e‎r‎e‎ ‎i‎s‎ ‎a‎ ‎c‎o‎n‎s‎p‎i‎r‎a‎c‎y‎.‎

Y‎o‎u‎r‎ ‎t‎y‎p‎i‎c‎a‎l‎ ‎c‎o‎n‎s‎p‎i‎r‎a‎c‎y‎ ‎t‎h‎e‎o‎r‎i‎s‎t‎s‎ ‎a‎r‎e‎ ‎b‎a‎s‎e‎m‎e‎n‎t‎ ‎d‎w‎e‎l‎l‎e‎r‎s‎ ‎w‎h‎o‎ ‎s‎p‎e‎n‎d‎ ‎t‎o‎o‎ ‎m‎u‎c‎h‎ ‎t‎i‎m‎e‎ ‎o‎n‎ ‎t‎h‎e‎ ‎i‎n‎t‎e‎r‎n‎e‎t‎ ‎w‎a‎t‎c‎h‎i‎n‎g‎ ‎c‎o‎n‎s‎p‎i‎r‎a‎c‎y‎ ‎v‎i‎d‎e‎o‎s‎ ‎o‎n‎ ‎Y‎o‎u‎t‎u‎b‎e‎,‎ ‎r‎e‎a‎d‎i‎n‎g‎ ‎W‎i‎k‎i‎l‎i‎n‎k‎s‎,‎ ‎T‎r‎u‎t‎h‎i‎s‎m‎.‎c‎o‎m‎,‎ ‎I‎n‎f‎o‎w‎a‎r‎s‎,‎ ‎m‎a‎s‎t‎u‎r‎b‎a‎t‎i‎n‎g‎ ‎f‎u‎r‎i‎o‎u‎s‎l‎y‎ ‎t‎o‎ ‎r‎e‎c‎o‎r‎d‎i‎n‎g‎s‎ ‎o‎f‎ ‎A‎l‎e‎x‎ ‎J‎o‎n‎e‎s‎,‎ ‎a‎n‎d‎ ‎u‎s‎u‎a‎l‎l‎y‎ ‎r‎e‎f‎e‎r‎ ‎t‎o‎ ‎t‎h‎e‎m‎s‎e‎l‎v‎e‎s‎ ‎a‎s‎ ‎b‎e‎i‎n‎g‎ ‎i‎n‎ ‎A‎n‎o‎n‎y‎m‎o‎u‎s‎.‎ ‎T‎h‎e‎o‎r‎i‎s‎t‎s‎ ‎t‎h‎i‎n‎k‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎ ‎f‎a‎r‎ ‎m‎o‎r‎e‎ ‎i‎n‎t‎e‎l‎l‎i‎g‎e‎n‎t‎ ‎t‎h‎a‎n‎ ‎t‎h‎e‎ ‎n‎o‎r‎m‎a‎l‎ ‎h‎u‎m‎a‎n‎ ‎b‎e‎i‎n‎g‎.‎ ‎T‎h‎e‎y‎ ‎l‎i‎k‎e‎ ‎t‎o‎ ‎t‎e‎l‎l‎ ‎p‎e‎o‎p‎l‎e‎ ‎t‎o‎ ‎W‎A‎K‎E‎ ‎U‎P‎!‎,‎ ‎w‎h‎i‎c‎h‎ ‎t‎h‎e‎y‎ ‎t‎h‎i‎n‎k‎ ‎i‎s‎ ‎c‎l‎e‎v‎e‎r‎,‎ ‎b‎u‎t‎ ‎i‎s‎ ‎a‎c‎t‎u‎a‎l‎l‎y‎ ‎q‎u‎i‎t‎e‎ ‎a‎n‎n‎o‎y‎i‎n‎g‎,‎ ‎a‎n‎d‎ ‎o‎f‎t‎e‎n‎ ‎c‎a‎l‎l‎ ‎a‎n‎y‎o‎n‎e‎ ‎w‎h‎o‎ ‎d‎o‎e‎s‎n‎'‎t‎ ‎b‎e‎l‎i‎e‎v‎e‎ ‎i‎n‎ ‎c‎o‎n‎s‎p‎i‎r‎a‎c‎y‎ ‎t‎h‎e‎o‎r‎i‎e‎s‎ ‎a‎s‎ ‎""‎s‎h‎e‎e‎p‎""‎.‎ ‎T‎h‎i‎s‎ ‎i‎s‎ ‎p‎a‎r‎t‎i‎c‎u‎l‎a‎r‎l‎y‎ ‎i‎r‎o‎n‎i‎c‎ ‎c‎o‎n‎s‎i‎d‎e‎r‎i‎n‎g‎ ‎m‎o‎s‎t‎ ‎c‎o‎n‎s‎p‎i‎r‎a‎c‎y‎ ‎t‎h‎e‎o‎r‎i‎s‎t‎s‎ ‎a‎r‎e‎ ‎o‎n‎l‎y‎ ‎g‎o‎i‎n‎g‎ ‎o‎n‎ ‎w‎h‎a‎t‎ ‎o‎t‎h‎e‎r‎ ‎c‎o‎n‎s‎p‎i‎r‎a‎c‎y‎ ‎t‎h‎e‎o‎r‎i‎s‎t‎s‎ ‎t‎e‎l‎l‎ ‎t‎h‎e‎m‎ ‎i‎s‎ ‎t‎r‎u‎e‎.‎ ‎T‎h‎e‎ ‎t‎r‎u‎t‎h‎ ‎i‎s‎,‎ ‎i‎n‎f‎a‎c‎t‎,‎ ‎m‎o‎s‎t‎ ‎t‎h‎e‎o‎r‎i‎s‎t‎s‎ ‎a‎r‎e‎ ‎m‎e‎n‎t‎a‎l‎l‎y‎ ‎d‎i‎s‎t‎u‎r‎b‎e‎d‎ ‎p‎s‎y‎c‎h‎o‎p‎a‎t‎h‎s‎ ‎a‎n‎d‎ ‎A‎s‎p‎i‎e‎s‎ ‎w‎i‎t‎h‎ ‎v‎e‎r‎y‎ ‎l‎i‎t‎t‎l‎e‎ ‎s‎e‎n‎s‎e‎ ‎o‎f‎ ‎r‎e‎a‎l‎i‎t‎y‎.‎

(‎(‎ ‎D‎I‎D‎ ‎Y‎O‎U‎ ‎K‎N‎O‎W‎ ‎T‎H‎E‎ ‎J‎E‎W‎S‎ ‎A‎R‎E‎ ‎B‎E‎H‎I‎N‎D‎ ‎F‎U‎C‎K‎I‎N‎G‎ ‎E‎V‎E‎R‎Y‎T‎H‎I‎N‎G‎?‎!‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

T‎h‎e‎ ‎R‎o‎m‎a‎n‎ ‎F‎o‎r‎u‎m‎ ‎i‎s‎ ‎a‎ ‎r‎e‎c‎t‎a‎n‎g‎u‎l‎a‎r‎ ‎f‎o‎r‎u‎m‎ ‎(‎p‎l‎a‎z‎a‎)‎ ‎s‎u‎r‎r‎o‎u‎n‎d‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎r‎u‎i‎n‎s‎ ‎o‎f‎ ‎s‎e‎v‎e‎r‎a‎l‎ ‎i‎m‎p‎o‎r‎t‎a‎n‎t‎ ‎a‎n‎c‎i‎e‎n‎t‎ ‎g‎o‎v‎e‎r‎n‎m‎e‎n‎t‎ ‎b‎u‎i‎l‎d‎i‎n‎g‎s‎ ‎i‎n‎ ‎t‎h‎e‎ ‎c‎e‎n‎t‎r‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎c‎i‎t‎y‎ ‎o‎f‎ ‎R‎o‎m‎e‎.‎ ‎C‎i‎t‎i‎z‎e‎n‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎a‎n‎c‎i‎e‎n‎t‎ ‎c‎i‎t‎y‎ ‎r‎e‎f‎e‎r‎r‎e‎d‎ ‎t‎o‎ ‎t‎h‎i‎s‎ ‎s‎p‎a‎c‎e‎,‎ ‎o‎r‎i‎g‎i‎n‎a‎l‎l‎y‎ ‎a‎ ‎m‎a‎r‎k‎e‎t‎p‎l‎a‎c‎e‎,‎ ‎a‎s‎ ‎t‎h‎e‎ ‎F‎o‎r‎u‎m‎ ‎M‎a‎g‎n‎u‎m‎,‎ ‎o‎r‎ ‎s‎i‎m‎p‎l‎y‎ ‎t‎h‎e‎ ‎F‎o‎r‎u‎m‎.‎ ‎I‎t‎ ‎i‎s‎ ‎l‎o‎c‎a‎t‎e‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎s‎m‎a‎l‎l‎ ‎v‎a‎l‎l‎e‎y‎ ‎b‎e‎t‎w‎e‎e‎n‎ ‎t‎h‎e‎ ‎P‎a‎l‎a‎t‎i‎n‎e‎ ‎a‎n‎d‎ ‎C‎a‎p‎i‎t‎o‎l‎i‎n‎e‎ ‎H‎i‎l‎l‎s‎.‎ ‎A‎r‎c‎h‎a‎e‎o‎l‎o‎g‎i‎c‎a‎l‎ ‎e‎v‎i‎d‎e‎n‎c‎e‎ ‎s‎h‎o‎w‎s‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎s‎i‎t‎e‎ ‎w‎a‎s‎ ‎o‎r‎i‎g‎i‎n‎a‎l‎l‎y‎ ‎a‎ ‎g‎r‎a‎s‎s‎y‎ ‎w‎e‎t‎l‎a‎n‎d‎,‎ ‎w‎h‎i‎c‎h‎ ‎w‎a‎s‎ ‎d‎r‎a‎i‎n‎e‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎7‎t‎h‎ ‎c‎e‎n‎t‎u‎r‎y‎ ‎B‎C‎ ‎w‎i‎t‎h‎ ‎t‎h‎e‎ ‎b‎u‎i‎l‎d‎i‎n‎g‎ ‎o‎f‎ ‎t‎h‎e‎ ‎f‎i‎r‎s‎t‎ ‎s‎t‎r‎u‎c‎t‎u‎r‎e‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎C‎l‎o‎a‎c‎a‎ ‎M‎a‎x‎i‎m‎a‎ ‎s‎e‎w‎e‎r‎ ‎s‎y‎s‎t‎e‎m‎.‎ ‎T‎h‎e‎ ‎e‎a‎r‎l‎i‎e‎s‎t‎ ‎s‎t‎r‎u‎c‎t‎u‎r‎e‎s‎ ‎i‎n‎ ‎t‎h‎e‎ ‎F‎o‎r‎u‎m‎ ‎w‎e‎r‎e‎ ‎d‎i‎s‎c‎o‎v‎e‎r‎e‎d‎ ‎i‎n‎ ‎t‎w‎o‎ ‎s‎e‎p‎a‎r‎a‎t‎e‎ ‎l‎o‎c‎a‎t‎i‎o‎n‎s‎:‎ ‎t‎h‎e‎ ‎s‎i‎t‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎C‎o‎m‎i‎t‎i‎u‎m‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎g‎r‎o‎u‎p‎ ‎o‎f‎ ‎s‎a‎n‎c‎t‎u‎a‎r‎i‎e‎s‎ ‎o‎f‎ ‎R‎e‎g‎i‎a‎,‎ ‎H‎o‎u‎s‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎V‎e‎s‎t‎a‎l‎s‎ ‎a‎n‎d‎ ‎D‎o‎m‎u‎s‎ ‎P‎u‎b‎l‎i‎c‎a‎.‎ ‎F‎u‎r‎t‎h‎e‎r‎ ‎s‎t‎r‎u‎c‎t‎u‎r‎e‎s‎ ‎w‎e‎r‎e‎ ‎a‎d‎d‎e‎d‎ ‎o‎v‎e‎r‎ ‎t‎h‎e‎ ‎c‎e‎n‎t‎u‎r‎i‎e‎s‎ ‎i‎n‎c‎l‎u‎d‎i‎n‎g‎ ‎t‎h‎e‎ ‎T‎e‎m‎p‎l‎e‎ ‎o‎f‎ ‎S‎a‎t‎u‎r‎n‎ ‎(‎4‎9‎7‎ ‎B‎C‎)‎,‎ ‎t‎h‎e‎ ‎T‎e‎m‎p‎l‎e‎ ‎o‎f‎ ‎C‎a‎s‎t‎o‎r‎ ‎a‎n‎d‎ ‎P‎o‎l‎l‎u‎x‎ ‎(‎4‎8‎4‎ ‎B‎C‎)‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎B‎a‎s‎i‎l‎i‎c‎a‎ ‎F‎u‎l‎v‎i‎a‎ ‎(‎1‎7‎9‎ ‎B‎C‎)‎,‎ ‎f‎o‎l‎l‎o‎w‎e‎d‎ ‎b‎y‎ ‎m‎a‎j‎o‎r‎ ‎w‎o‎r‎k‎ ‎i‎n‎ ‎t‎h‎e‎ ‎8‎0‎s‎ ‎B‎C‎,‎ ‎i‎n‎ ‎w‎h‎i‎c‎h‎ ‎t‎h‎e‎ ‎p‎l‎a‎z‎a‎ ‎w‎a‎s‎ ‎r‎a‎i‎s‎e‎d‎ ‎a‎n‎d‎ ‎p‎e‎r‎m‎a‎n‎e‎n‎t‎ ‎m‎a‎r‎b‎l‎e‎ ‎p‎a‎v‎i‎n‎g‎ ‎s‎t‎o‎n‎e‎s‎ ‎l‎a‎i‎d‎.‎ ‎F‎u‎r‎t‎h‎e‎r‎ ‎s‎i‎g‎n‎i‎f‎i‎c‎a‎n‎t‎ ‎w‎o‎r‎k‎ ‎w‎a‎s‎ ‎u‎n‎d‎e‎r‎t‎a‎k‎e‎n‎ ‎b‎y‎ ‎J‎u‎l‎i‎u‎s‎ ‎C‎a‎e‎s‎a‎r‎ ‎a‎n‎d‎ ‎A‎u‎g‎u‎s‎t‎u‎s‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎r‎e‎i‎g‎n‎ ‎o‎f‎ ‎C‎o‎n‎s‎t‎a‎n‎t‎i‎n‎e‎ ‎t‎h‎e‎ ‎G‎r‎e‎a‎t‎ ‎s‎a‎w‎ ‎t‎h‎e‎ ‎c‎o‎m‎p‎l‎e‎t‎i‎o‎n‎ ‎o‎f‎ ‎t‎h‎e‎ ‎c‎o‎n‎s‎t‎r‎u‎c‎t‎i‎o‎n‎ ‎o‎f‎ ‎t‎h‎e‎ ‎B‎a‎s‎i‎l‎i‎c‎a‎ ‎o‎f‎ ‎M‎a‎x‎e‎n‎t‎i‎u‎s‎ ‎(‎A‎D‎ ‎3‎1‎2‎)‎,‎ ‎t‎h‎e‎ ‎l‎a‎s‎t‎ ‎s‎i‎g‎n‎i‎f‎i‎c‎a‎n‎t‎ ‎e‎x‎p‎a‎n‎s‎i‎o‎n‎ ‎o‎f‎ ‎t‎h‎e‎ ‎c‎o‎m‎p‎l‎e‎x‎.‎ ‎T‎h‎e‎ ‎F‎o‎r‎u‎m‎ ‎t‎o‎d‎a‎y‎ ‎i‎s‎ ‎a‎ ‎s‎p‎r‎a‎w‎l‎i‎n‎g‎ ‎r‎u‎i‎n‎ ‎o‎f‎ ‎a‎r‎c‎h‎i‎t‎e‎c‎t‎u‎r‎a‎l‎ ‎f‎r‎a‎g‎m‎e‎n‎t‎s‎ ‎a‎n‎d‎ ‎i‎n‎t‎e‎r‎m‎i‎t‎t‎e‎n‎t‎ ‎a‎r‎c‎h‎a‎e‎o‎l‎o‎g‎i‎c‎a‎l‎ ‎e‎x‎c‎a‎v‎a‎t‎i‎o‎n‎s‎ ‎a‎t‎t‎r‎a‎c‎t‎i‎n‎g‎ ‎4‎.‎5‎ ‎m‎i‎l‎l‎i‎o‎n‎ ‎o‎r‎ ‎m‎o‎r‎e‎ ‎s‎i‎g‎h‎t‎s‎e‎e‎r‎s‎ ‎y‎e‎a‎r‎l‎y‎.‎ ‎T‎h‎i‎s‎ ‎p‎a‎n‎o‎r‎a‎m‎i‎c‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎,‎ ‎t‎a‎k‎e‎n‎ ‎i‎n‎ ‎2‎0‎1‎8‎ ‎f‎r‎o‎m‎ ‎t‎h‎e‎ ‎C‎a‎p‎i‎t‎o‎l‎i‎n‎e‎ ‎M‎u‎s‎e‎u‎m‎s‎,‎ ‎s‎h‎o‎w‎s‎ ‎s‎o‎m‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎s‎u‎r‎v‎i‎v‎i‎n‎g‎ ‎s‎t‎r‎u‎c‎t‎u‎r‎e‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎R‎o‎m‎a‎n‎ ‎F‎o‎r‎u‎m‎,‎ ‎i‎n‎c‎l‎u‎d‎i‎n‎g‎ ‎t‎h‎e‎ ‎T‎a‎b‎u‎l‎a‎r‎i‎u‎m‎,‎ ‎t‎h‎e‎ ‎G‎e‎m‎o‎n‎i‎a‎n‎ ‎s‎t‎a‎i‎r‎s‎,‎ ‎t‎h‎e‎ ‎T‎a‎r‎p‎e‎i‎a‎n‎ ‎R‎o‎c‎k‎,‎ ‎a‎n‎d‎ ‎s‎e‎v‎e‎r‎a‎l‎ ‎t‎e‎m‎p‎l‎e‎s‎ ‎a‎n‎d‎ ‎b‎a‎s‎i‎l‎i‎c‎a‎s‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎W‎o‎l‎f‎g‎a‎n‎g‎ ‎M‎o‎r‎o‎d‎e‎r‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

B‎y‎e‎,‎ ‎g‎u‎y‎s‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎f‎u‎c‎k‎ ‎a‎ ‎b‎a‎b‎y‎ ‎i‎n‎ ‎t‎h‎e‎ ‎m‎i‎d‎d‎l‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎s‎t‎r‎e‎e‎t‎ ‎a‎n‎d‎ ‎f‎l‎i‎p‎ ‎p‎e‎o‎p‎l‎e‎ ‎o‎f‎f‎ ‎a‎s‎ ‎t‎h‎e‎y‎ ‎g‎o‎ ‎b‎y‎.‎"
n4X0msTP,prime roll no,aquiem,C++,Saturday 17th of February 2024 04:26:45 PM CDT,"#include <algorithm>
#include <iostream>
#include <vector>
 
using namespace std;
 
typedef long long ll;
 
const ll MAX_VALUE = 1LL * 1000 * 1000 * 1000 * 1000 * 1000 * 1000;
 
void precalc(const vector<ll> &in, vector<ll> &out,
    ll cur = 1, int k = 0, ll bound = MAX_VALUE)
{
    if (k >= in.size()) {
        out.push_back(cur);
        return;
    }
    while (bound > 0) {
        precalc(in, out, cur, k + 1, bound);
        cur *= in[k];
        bound /= in[k];
    }
}
 
vector<ll> xs, ys;
 
ll count_le(ll t)
{
    ll res = 0;
    int yidx = 0;
    for (ll x : xs) {
        while (yidx < ys.size() && ys[yidx] <= t / x) {
            yidx++;
        }
        res += yidx;
    }
    return res;
}
 
int main()
{
    ll n;
    cin >> n;
 
    vector<ll> a[2];
    for (int i = 0; i < n; i++) {
        int x;
        cin >> x;
        a[i % 2].push_back(x);
    }
 
    ll k;
    cin >> k;
 
    precalc(a[0], xs);
    precalc(a[1], ys);
    sort(xs.rbegin(), xs.rend());
    sort(ys.begin(), ys.end());
 
    ll l = 0, r = MAX_VALUE + 1;
    while (l != r) {
        ll m = (l + r) / 2;
        if (count_le(m) < k) {
            l = m + 1;
        }
        else {
            r = m;
        }
    }
 
    if (l != MAX_VALUE + 1) {
        cout << l << endl;
    }
    else {
        cout << -1 << endl;
    }
 
    return 0;
}"
3EvZzMb7,insertionSort.js (imposter syndrome simulator),c-mcbride,JavaScript,Saturday 17th of February 2024 04:24:37 PM CDT,"function insertionSort(arr){
    let n = arr.length;

    //Elements to the right of i are sorted
    for(let i = 1; i < arr.length; i++){
        let temp = arr[i]; //Temp holds the current variable we are tying to place within the array
        let j = i - 1; //Since we know that all elements to left of i are sorted, we start at the front of the sorted list and work backwards

        //If j is larger than the current element we are trying to place, we crawl backwards
        while(j >= 0 && arr[j] > temp){
            arr[j + 1] = arr[j]; //Move j one to the right
            j--; //Decrement, when the algorithm exits, j will be one smaller than where we need to put the element
        }

        arr[j + 1] = temp //Place the element where it belongs
    }

    return arr;
}

console.log(insertionSort([1,4,2,12,10]))"
fbGmZs8s,PSIO - exam solutions,B3ar6,C++,Saturday 17th of February 2024 04:21:57 PM CDT,"#include <iostream>
#include <vector>
#include <algorithm>
#include <math.h>

int bar(const int &z){
    std::cout << z;
    if(!z)
        return 1;
    
    return bar(z-2);
}

struct Point{
    float x;
    float y;
}

void outside_radius_15(const std::vector<Point> &vectorOfPoints, const std::vector<Point> &vecOfOuterPoints){
    std::copy_if(vectorOfPoints.begin(), vectorOfPoints.end(), std::emplace_back(vecOfOuterPoints), [](Point &pointToCheck){abs(frac(pow(pointToCheck.x, 2)+pow((pointToCheck.y-0), 2) >= 1.5});
}

int main()
{
    //bar(6);
    
    // std::vector<int> array = {-4, -1, 2, 11, -6, 2};
    // int th = 2;
    // std::cout << count_if(array.begin(), array.end(), [th](int arg){return abs(arg) >= th;});
    std::vector<Point> pointsToCheck;                                       //vector punktów do sprawdzenia
    std::vector<Point> outerPoints;                                         //vector punktów poza okręgiem
    
    outside_radius_15(pointsToCheck, outerPoints);                          //kopiowanie punktów
    
    for(int i=0; i<outerPoints.size(); i++)                                 //wyświetlanie danych
    {
        std::cout << outerPoints[i].x << "", "" << outerPoints[i].y << endl;
    }
    
    // ++i -> zwiększ przed operacją | zaczynamy od 0 -> zwiększamy o jeden -> zaczynamy pętle | 1, 2, 3, .... , n
    // i++ -> zwiększa po operacji | zaczynamy od 0 -> wykonujemy pętle -> inkrementujemy o 1 | 0, 1, 2, 3, ... , n
    
    return 0;
}

// bar(6) = 4 * bar(4)
//       = 4 * (4 * bar(2))
//       = 4 * (4 * (4 * bar(0)))
//       = 4 * (4 * (4 * 1))
//       = 4 * (4 * 4)
//       = 4 * 16
//       = 64

"
t9NFfzs1,Untitled,smj007,Python,Saturday 17th of February 2024 04:14:22 PM CDT,"class Solution:
    def numDecodings(self, s: str) -> int:

        n = len(s)
        dp = [0]*(n+1)
        dp[0] = 1

        for i in range(1, n+1):
            for j in range(1, 27):
                c = str(j)
                if i-len(c)>=0 and c == s[i-len(c):i]:
                    dp[i] += dp[i-len(c)]

        return dp[-1]
        "
yKg7eX2x,Docker search and pull auto..,Rnery,Bash,Saturday 17th of February 2024 04:09:52 PM CDT,"#!/usr/bin/env bash
#####################################
# Docker search and pull auto. 		#
#									#
# Depois eu melhoro esse código.	#
#####################################

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

function verificar_container_name() {
  local container_name=""$1""

  if [[ ! ""$container_name"" =~ ^[[:alpha:]][[:alnum:]_]*$ ]]; then
    echo -e ""\n${RED}Erro: O nome do contêiner deve começar com letras e números.${NC}""
    return 1
  fi

  if ! docker search ""$container_name"" > /dev/null; then
    echo -e ""\n${RED}Erro: O contêiner '$container_name' não foi encontrado.${NC}""
    return 1
  fi

  return 0
}

function pull_container() {
  local container_name=""$1""

  if ! docker pull ""$container_name"" 2>&1 | grep -q ""Image is up to date""; then
    echo ""Erro ao fazer o pull do $container_name:""
    echo -e ""$1""
    exit 1
  fi

  echo -e ""\n${GREEN}Pull realizado com sucesso!${NC}""
}

function verificar_resposta() {
  local resposta

  while true; do
    echo -e ""\n""
    read -rp ""Deseja fazer pull? [Ss/Nn]: "" resposta

    case ""$resposta"" in
      [Ss])
        return 0
        ;;
      [Nn])
        echo -e ""\n${YELLOW}Pull cancelado.${NC}""
        exit 0
        ;;
      *)
        echo -e ""\n${RED}Resposta inválida. Digite 'S' para sim ou 'N' para não.${NC}""
        ;;
    esac
  done
}

function main() {
  local container_name

  while true; do
    read -rp ""Digite o nome do contêiner: "" container_name

    if verificar_container_name ""$container_name""; then
      clear
      echo -e ""\n""
      docker search ""$container_name""
      break
    fi

    echo -e ""\n${YELLOW}Nome de contêiner inválido. Tente novamente.${NC}""
  done

  if verificar_resposta; then
    while true; do
      read -rp ""Digite novamente o nome do contêiner para pull e aguarde instantes: "" novo_container_name

      if [[ -n ""$novo_container_name"" ]]; then
        pull_container ""$novo_container_name""
        break
      fi

      echo -e ""\n${YELLOW}Nome de contêiner não pode estar vazio. Tente novamente.${NC}""
    done
  fi
}

main
"
hQVi9ryE,Untitled,Mysoft,FreeBasic,Saturday 17th of February 2024 04:09:37 PM CDT,"#include ""fbgfx.bi""
#include ""windows.bi""
#include ""crt.bi""

'289 = Paint function , 290 = Thread function
extern GfxWin32(290) alias ""fb_win32"" as any ptr

screencontrol(fb.SET_DRIVER_NAME,""GDI"")
screenres 640,480
screensync

function AutoPatch( pSource as any ptr , pBase as any ptr , pTarget as any ptr ) as any ptr    
  dim as any ptr ptr pFound = pBase
  var pSource2 = *cptr(any ptr ptr,pSource+2)  
  if pTarget then 'do the hook
    var uBase = cuint(pBase) : pFound=0
    for uOff as uinteger = uBase to uBase+165535
      if *cptr(any ptr ptr ptr,uOff) = pSource2 then
        pFound = cptr(any ptr ptr,uOff) : exit for    
      end if
    next uOff
  else 'undo the hook
    pTarget = pSource
  end if
  if pFound = 0 then return 0
  dim as DWORD OldProt = any
  VirtualProtect( pFound , 4 , PAGE_EXECUTE_READWRITE , @OldProt )
  *pFound = pTarget
  VirtualProtect( pFound , 4 , OldProt , @OldProt )
  FlushInstructionCache( GetCurrentProcess() , pFound , 4 )
  return pFound
end function  

function SetDIBitsToDevice_Detour( hdc as HDC , xDest as long , yDest as long , dwWidth as DWORD , dwHeight as DWORD , XSrc as long , YSrc as long , uStartScan as ulong , cScanLines as ulong , lpvBits as any ptr , lpBmi as BITMAPINFO ptr , fuColorUse as ulong ) as long
  printf(!""update: h=%p xx=%i yy=%i w=%i h=%i x=%i y=%i t=%i n=%i\n"",hdc,xDest,yDest,dwWidth,dwHeight,XSrc,YSrc,uStartScan,cScanlines)
  return SetDIBitsToDevice( hdc , xDest , yDest , dwWidth , dwHeight , XSrc , YSrc , uStartScan , cScanLines , lpvBits , lpBmi , fuColorUse )  
end function
static shared as any ptr pSetDIBitsToDevice_Detour = @SetDIBitsToDevice_Detour

var pBase1 = AutoPatch( @SetDIBitsToDevice , GfxWin32(289) , @pSetDIBitsToDevice_Detour )
var pBase2 = AutoPatch( @SetDIBitsToDevice , GfxWin32(289) , @pSetDIBitsToDevice_Detour )

SetForegroundWindow(GetConsoleWindow())

screenlock

dim as ubyte ptr pScr = screenptr

'changing screen but it wont update since it's locked
for N as long = 0 to 640*480-1
  pScr[N] = 10 'make whole screen green
next N
puts(!""screen is locked, it will show it in 2 seconds.\n"")
sleep 2000,1

'however calling the internal paint function it will update even locked
dim fnPaint as sub cdecl() = GfxWin32(289)
fnPaint()
puts(!""\nthis called the internal paint function so it forced update"")

'so now changing again but again wont update till the screenunlock is called
for N as long = 0 to 640*480-1
  pScr[N] = 12 'make whole screen red
next N
puts(!""now i painted red you will only see after pressing enter which leaves the lock"")
getchar()

screenunlock

sleep 100,1
screensync

for N as long = 0 to 640*480-1
  pScr[N] = 14 'make whole screen yellow
next N
puts(!""\nand now after enter you will see only a partial update"")
getchar()

line(0,0)-(0,239),0,,0

'and since it got unlocked it then updated as red
getchar()


"
e9BqEizB,independence,aquiem,C++,Saturday 17th of February 2024 03:54:00 PM CDT,"#include <bits/stdc++.h>
 
#define INTMAX 2147483647
#define LONGMAX 9223372036854775807
#define int long long
#define rep(i, start, end) for (i = start; i < end; i++)
#define rep_rev(i, start, end) for (i = start; i >= end; i--)
#define P pair<long long, long long>
#define Q 1000000007
#define F first
#define S second
#define append push_back
 
using namespace std;
 
const int N = 3000;
char a[N][N];
int down[N][N];
int ryt[N][N];
int n, m;
string s;
 
int t[N][4 * N];
 
void read()
{
    int i, j, k;
    cin >> n >> m;
    rep(i, 1, n + 1)
            rep(j, 1, m + 1)
                cin >>
        a[i][j];
}
 
void build_tree(int col, int v, int tl, int tr)
{
    int tm = (tl + tr) / 2;
    if (tl == tr)
    {
        t[col][v] = ryt[tm][col];
    }
    else
    {
        build_tree(col, v * 2, tl, tm);
        build_tree(col, v * 2 + 1, tm + 1, tr);
        t[col][v] = min(t[col][v * 2], t[col][v * 2 + 1]);
    }
}
 
int min_query(int col, int v, int tl, int tr, int l, int r)
{
    if (tr < l or tl > r)
        return INTMAX;
    if (l <= tl && tr <= r)
    {
        return t[col][v];
    }
    int tm = (tl + tr) / 2;
    return min(min_query(col, v * 2, tl, tm, l, r), min_query(col, v * 2 + 1, tm + 1, tr, l, r));
}
 
void solve()
{
    int i, j, k;
    rep(j, 1, m + 1)
        down[n][j] = 1;
    rep_rev(i, n - 1, 1)
        rep(j, 1, m + 1) if (a[i][j] == a[i + 1][j])
            down[i][j] = down[i + 1][j] + 1;
    else down[i][j] = 1;
    rep(i, 1, n + 1)
        ryt[i][m] = 1;
    rep_rev(j, m - 1, 1)
        rep(i, 1, n + 1) if (a[i][j] == a[i][j + 1])
            ryt[i][j] = ryt[i][j + 1] + 1;
    else ryt[i][j] = 1;
 
    rep(j, 1, m + 1)
        build_tree(j, 1, 1, n);
 
    int ans = 0;
    rep(i, 1, n + 1)
        rep(j, 1, m + 1)
    {
        int row_1 = i;
        int row_2 = row_1 + down[row_1][j];
        int row_3 = row_2 + down[row_2][j];
        int col = 0;
        if (down[row_1][j] == down[row_2][j] and down[row_2][j] <= down[row_3][j])
            col = min_query(j, 1, 1, n, row_1, row_1 + 3 * down[row_1][j] - 1);
        ans += col;
    }
    cout << ans;
}
 
int32_t main()
{
    int T = 1;
    // cin >> T;
    while (T--)
    {
        read();
        solve();
    }
}"
11kvCZKv,no sad students,aquiem,C++,Saturday 17th of February 2024 03:53:16 PM CDT,"#include <bits/stdc++.h>
using namespace std;
using ll = long long;
 
ll mod = 1e9 + 7;
 
int main()
{
    ll t;
    cin >> t;
    while (t--)
    {
        ll n, k;
        cin >> n >> k;
        string givenStr;
        cin >> givenStr;
        vector<char> count(n / k, '.');
        bool good = true;
        for (int i = 0; i < n; i++)
        {
            if (count[i % k] == '.')
            {
                count[i % k] = givenStr[i];
                continue;
            }
            if (givenStr[i] == '.')
            {
                continue;
            }
            if (count[i % k] != givenStr[i])
            {
                good = false;
            }
        }
 
        if (good)
        {
            cout << ""YES\n"";
            continue;
        }
        cout << ""NO\n"";
    }
    return 0;
}"
nY8rBrfa,safe GT,aquiem,C++,Saturday 17th of February 2024 03:52:26 PM CDT,"#include <bits/stdc++.h>
using namespace std;
using ll = long long;

ll mod = 1e9 + 7;

int main()
{
    ll t;
    cin >> t;
    while (t--)
    {
        ll n;
        cin >> n;
        vector<ll> givenNums;
        for (int i = 0; i < n; i++)
        {
            ll temp;
            cin >> temp;
            givenNums.push_back(temp);
        }

        sort(givenNums.begin(), givenNums.end());
        vector<ll> ans;
        ans.push_back(givenNums[0]);
        for (int i = 1; i < n; i++)
        {
            if (givenNums[i] - 1 == givenNums[i - 1])
            {
                givenNums[i] = -1;
                continue;
            }
            ans.push_back(givenNums[i]);
        }

        cout << ans.size() << ""\n"";
        for (auto i : ans)
        {
            cout << i << "" "";
        }
        cout << ""\n"";
    }
    return 0;
}"
iwVQrLhn,scheming students,aquiem,C++,Saturday 17th of February 2024 03:50:56 PM CDT,"#include <bits/stdc++.h>
using namespace std;
using ll = long long;
 
ll mod = 1e9 + 7;
 
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    ll t;
    cin >> t;
    while (t--)
    {
        ll n, m;
        cin >> n >> m;
        vector<ll> givenNums;
        for (int i = 0; i < n; i++)
        {
            ll temp;
            cin >> temp;
            givenNums.push_back(temp);
        }
 
        vector<ll> xorPrefix;
        xorPrefix.push_back(0);
        for (int i = 0; i < n; i++)
        {
            xorPrefix.push_back(givenNums[i] ^ xorPrefix[xorPrefix.size() - 1]);
        }
 
        while (m--)
        {
            ll l, r;
            cin >> l >> r;
            cout << (xorPrefix[l - 1] ^ xorPrefix[r]) << ""\n"";
        }
        cout << ""\n"";
    }
    return 0;
}"
HV9bGQQw,Untitled,toorr2p,PHP,Saturday 17th of February 2024 03:50:51 PM CDT,"<?php
require_once 'cached.php';
include_once('../../pdo/CDatabase.php');
include_once('../../pdo/CQuery.php');

class StaticPage extends Cached
{
    // Конструктор класса
    public function __construct(protected ?int $id)
    {

        // Есть, инициализируем объект содержимым кэша
        parent::__construct($this->title(), $this->content());

        // Проверяем, нет ли такой страницы в кэше
        if ($this->isCached($this->id($id))) {
            // Есть, инициализируем объект содержимым кэша
            //parent::__construct($this->title(), $this->content());
        } else {
            // Данные пока не кэшированы, извлекаем
            // содержимое из базы данных

            /*
            CREATE TABLE `static_pages` (`ID` int NOT NULL AUTO_INCREMENT,
            `TITLE` varchar(255) NOT NULL,
            `CONTENT` TEXT NULL,
            `DATE_INSERT` TIMESTAMP NOT NULL,
             PRIMARY KEY (`ID`)
            );

            INSERT INTO `static_pages` (`TITLE`, `CONTENT`) VALUES ('Главная страница', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.');
            */

            $dbh = new CDatabase('php8db', 'php8u', 'qwerty');
            $query = new CQuery(
                'SELECT * FROM `static_pages` WHERE id = :id LIMIT 1', 
                [$id],
                $dbh
            );

            if ($page = $query->fetch()) {
                var_dump($page);
                echo '\n';

                parent::__construct($page['TITLE'], $page['CONTENT']);

                // Устанавливаем признак кэша страницы
                $this->set($this->id($id), 1);
                parent::__construct(
                    $page['TITLE'],
                    $page['CONTENT']
                );
            }

        }
    }

    // Уникальный ключ для кэша
    public function id(mixed $name) : string
    {
      return ""static_page_{$name}"";
    }
}"
eJswak7c,Heart Delivery,Osiris1002,Python,Saturday 17th of February 2024 03:42:45 PM CDT,"neighborhood = list(map(int, input().split('@')))
current_index = 0
 
while True:
    command = input()
 
    if command == 'Love!':
        break
 
    command_split = command.split()
    step = int(command_split[1])
 
    if current_index + step <= len(neighborhood) - 1:
        current_index += step
        if neighborhood[current_index] == 0:
            print(f""Place {current_index} already had Valentine's day."")
        else:
            neighborhood[current_index] -= 2
            if neighborhood[current_index] == 0:
                print(f""Place {current_index} has Valentine's day."")
 
    else:
        current_index = 0
        if neighborhood[current_index] == 0:
            print(f""Place {current_index} already had Valentine's day."")
        else:
            neighborhood[current_index] -= 2
            if neighborhood[current_index] == 0:
                print(f""Place {current_index} has Valentine's day."")
 
 
print(f""Cupid's last position was {current_index}."")
 
if sum(neighborhood) == 0:
    print(""Mission was successful."")
else:
    failed_houses = [house for house in neighborhood if house != 0]
    print(f""Cupid has failed {len(failed_houses)} places."")"
v6nELzJF,Crossword Game,TurtyWurty,Java,Saturday 17th of February 2024 03:42:07 PM CDT,"@Getter
    public static class Game {
        private static final Random RANDOM = new Random();
        private final List<String> words;
        private final Map<String, List<Pair<Integer, Integer>>> wordLocations = new HashMap<>();
        private final int wordCount;
        private final long guildId, userId, channelId;
        private char[][] board;
        @Setter
        private long threadId;

        public Game(int wordCount, long guildId, long userId, long channelId) throws IllegalStateException {
            if (wordCount < 1)
                throw new IllegalStateException(""Word count must be greater than 0!"");

            this.wordCount = wordCount;

            this.words = getWords(wordCount);
            if (this.words.isEmpty())
                throw new IllegalStateException(""Failed to get words for crossword!"");

            this.guildId = guildId;
            this.userId = userId;
            this.channelId = channelId;

            this.board = new char[10][10];
            fillBoard();
        }

        private static List<String> getWords(int wordCount) {
            Either<List<String>, HttpStatus> response = ApiHandler.getWords(new RandomWordRequestData.Builder()
                    .length(3, 10)
                    .amount(wordCount)
                    .build());
            if (response.isLeft())
                return List.copyOf(response.getLeft());
            else
                Constants.LOGGER.error(""Failed to get words for crossword! Status: "" + response.getRight());

            return List.of();
        }

        private boolean hasCharacter(int row, int column, char character) {
            return this.board[row][column] == character;
        }

        private boolean isEmpty(int row, int column) {
            return hasCharacter(row, column, '\u0000');
        }

        public boolean isOutsideBounds(int x, int y) {
            return y < 0 || y >= this.board.length || x < 0 || x >= this.board[y].length;
        }

        private void fillBoard() {
            List<String> sorted = this.words.stream().sorted(Comparator.comparingInt(String::length).reversed()).toList();
            String first = sorted.getFirst();
            while (first.length() >= this.board.length)
                expandBoard();

            int x = RANDOM.nextInt(this.board.length - first.length());
            int y = RANDOM.nextInt(this.board.length - first.length());
            boolean horizontal = RANDOM.nextBoolean();
            forcePlaceWord(first, x, y, horizontal);

            List<String> failed = new CopyOnWriteArrayList<>();
            for (int i = 1; i < sorted.size(); i++) {
                String word = sorted.get(i);
                Pair<Integer, Integer> location = findValidLocation(word);
                if (location == null) {
                    failed.add(word);
                    continue;
                }

                forcePlaceWord(word, location.getLeft(), location.getRight(), RANDOM.nextBoolean());
            }

            while (!failed.isEmpty()) {
                for (String word : failed) {
                    Pair<Integer, Integer> location = findValidLocation(word);
                    if (location == null) {
                        continue;
                    }

                    failed.remove(word);
                    forcePlaceWord(word, location.getLeft(), location.getRight(), RANDOM.nextBoolean());
                }
            }
        }

        private Pair<Integer, Integer> findValidLocation(String word) {
            for (Map.Entry<String, List<Pair<Integer, Integer>>> entry : wordLocations.entrySet()) {
                
            }

            return null;  // No valid intersection found
        }

        private void forcePlaceWord(String word, int x, int y, boolean horizontal) {
            List<Pair<Integer, Integer>> locations = new ArrayList<>();
            if (horizontal) {
                for (int i = 0; i < word.length(); i++) {
                    if (isOutsideBounds(x + i, y)) {
                        expandBoard();
                    }
                }

                for (int i = 0; i < word.length(); i++) {
                    board[x + i][y] = word.charAt(i);
                    locations.add(Pair.of(x + i, y));
                }
            } else {
                for (int i = 0; i < word.length(); i++) {
                    if (isOutsideBounds(x, y + i)) {
                        expandBoard();
                    }
                }

                for (int i = 0; i < word.length(); i++) {
                    board[x][y + i] = word.charAt(i);
                    locations.add(Pair.of(x, y + i));
                }
            }

            this.wordLocations.put(word, locations);
        }

        private boolean isValidIntersection(String word, int x, int y, boolean horizontal) {
            /
        }

        private void expandBoard() {
            char[][] oldBoard = this.board;
            this.board = new char[this.board.length + 1][this.board[0].length + 1];
            for (int j = 0; j < oldBoard.length; j++) {
                System.arraycopy(oldBoard[j], 0, this.board[j], 0, oldBoard[j].length);
            }
        }

        private void expandBoardNegatively() {
            char[][] oldBoard = this.board;
            this.board = new char[this.board.length + 1][this.board[0].length + 1];
            for (int j = 0; j < oldBoard.length; j++) {
                System.arraycopy(oldBoard[j], 0, this.board[j + 1], 0, oldBoard[j].length);
            }
        }

        public char get(int x, int y) {
            return this.board[x][y];
        }
    }"
iGzAZG6R,mriv3_7feb,VladNitu,C++,Saturday 17th of February 2024 03:23:02 PM CDT,"#include <cstdio>
#include <vector>
#include <string>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <cstring>

using namespace std;

constexpr int inf = 1e9;
constexpr int maxv = 100;

const vector<vector<int>> dx({{2, 2, 1, 1, -1, -1, -2, -2}, {-1, -1, 1, 1}, {1, -1, 0, 0}, {-1, -1, 1, 1, 1, -1, 0, 0}, {-1, -1, -1, 0, 1, 1, 1, 0}});
const vector<vector<int>> dy({{1, -1, 2, -2, 2, -2, 1, -1}, {-1, 1, -1, 1}, {0, 0, 1, -1}, {-1, 1, -1, 1, 0, 0, 1, -1}, {-1, 0, 1, 1, 1, 0, -1, -1}});
const vector<int> steps({1, 7, 7, 7, 1});

struct Cell {
    int x, y;

    Cell() {
        x = y = -1;
    }

    Cell(int _x, int _y) {
        x = _x;
        y = _y;
    }

    inline Cell operator+ (const Cell& other) const {
        return {x + other.x, y + other.y};
    }

    inline constexpr bool operator ==(const Cell& other) const {
        return x == other.x && y == other.y;
    }

    [[nodiscard]] inline constexpr bool inRange() const {
        if (1 <= x && x <= 8
            && 1 <= y && y <= 8)
            return true;
        return false;
    }
};

struct Piece {
    enum PieceType {
        Pawn = -1,
        Knight = 0,
        Bishop = 1,
        Rook = 2,
        Queen = 3,
        King = 4
    };

    PieceType type;
    Cell cell;
    char color;

    inline Piece () = default;

    Piece(PieceType _type, Cell _cell, char _color) {
        type = _type;
        cell = _cell;
        color = _color;
    }

    Piece(char c, int x, int y) {
        if (isupper(c)) {
            color = 'w';
            c = tolower(c);
        } else {
            color = 'b';
        }

        if (c == 'p')
            type = Pawn;
        else if (c == 'n')
            type = Knight;
        else if (c == 'b')
            type = Bishop;
        else if (c == 'r')
            type = Rook;
        else if (c == 'q')
            type = Queen;
        else if (c == 'k')
            type = King;

        cell = Cell(x, y);
    }

};

struct BoardState;
string generateFEN(BoardState board, bool includeMoves);

struct BoardState {
    vector<Piece> pieces;
    char activeColor;
    char whiteCastling;
    char blackCastling;
    Cell enPassant;
    int halfMoves;
    int fullMoves;

    [[nodiscard]] inline bool isInCheck(char color) const {
        Cell kingPosition;
        for (const Piece& piece : pieces) {
            if (piece.color == color && piece.type == Piece::King) {
                kingPosition = piece.cell;
                break;
            }
        }
        vector<vector<bool> > attacked = attackedCells(color ^ 'w' ^ 'b');
        return attacked[kingPosition.x][kingPosition.y];
    }

    [[nodiscard]] inline bool isDraw() const {
        if (halfMoves >= 50 || pieces.size() == 2)
            return true;
        vector<BoardState> boardStates = generateAllMoves();
        if (boardStates.empty() && !isInCheck(activeColor))
            return true;
        return false;
    }


    [[nodiscard]] inline bool isCheckMate() const {
        if (!isInCheck(activeColor))
            return false;
        vector<BoardState> boardStates = generateAllMoves();
        return boardStates.empty();
    }

    [[nodiscard]] inline vector<vector<bool> > attackedCells(char color) const {
        char b[10][10];
        memset(b, 0, sizeof(b));
        for (const Piece& piece : pieces) {
            b[piece.cell.x][piece.cell.y] = (piece.color == 'w' ? 1 : -1);
        }
        vector<vector<bool> > isAttacked(9, vector<bool>(9, false));
        for (const Piece& piece : pieces) {
            if (piece.color != color)
                continue;
            if (piece.type != Piece::Pawn) {
                for (int dir = 0; dir < dx[piece.type].size(); ++dir) {
                    Cell cell = piece.cell;
                    Cell dirCell = Cell(dx[piece.type][dir], dy[piece.type][dir]);
                    for (int step = 1; step <= steps[piece.type]; ++step) {
                        cell = cell + dirCell;
                        if (!cell.inRange())
                            break;
                        if (b[cell.x][cell.y] != 0) {
                            if (b[cell.x][cell.y] == 1 && color == 'b')
                                isAttacked[cell.x][cell.y] = true;
                            else if (b[cell.x][cell.y] == -1 && color == 'w')
                                isAttacked[cell.x][cell.y] = true;
                            break;
                        }
                        isAttacked[cell.x][cell.y] = true;
                    }
                }
            } else {
                if (piece.color == 'w') {
                    Cell newCell = piece.cell + Cell(1, -1);
                    if (newCell.inRange() && b[newCell.x][newCell.y] != 1)
                        isAttacked[newCell.x][newCell.y] = true;
                    newCell = piece.cell + Cell(1, 1);
                    if (newCell.inRange() && b[newCell.x][newCell.y] != 1)
                        isAttacked[newCell.x][newCell.y] = true;
                } else if (piece.color == 'b') {
                    Cell newCell = piece.cell + Cell(-1, -1);
                    if (newCell.inRange() && b[newCell.x][newCell.y] != -1)
                        isAttacked[newCell.x][newCell.y] = true;
                    newCell = piece.cell + Cell(-1, 1);
                    if (newCell.inRange() && b[newCell.x][newCell.y] != -1)
                        isAttacked[newCell.x][newCell.y] = true;
                }
            }
        }
        return isAttacked;
    }

    [[nodiscard]] inline vector<BoardState> generateAllMoves() const {
        vector<BoardState> newBoards;

        char newColor = activeColor ^ 'w' ^ 'b';

        char b[10][10];
        memset(b, 0, sizeof(b));
        for (const Piece& piece : pieces) {
            char p;
            if (piece.type == Piece::Pawn) {
                p = 'p';
            } else if (piece.type == Piece::Knight) {
                p = 'n';
            } else if (piece.type == Piece::Bishop) {
                p = 'b';
            } else if (piece.type == Piece::Rook) {
                p = 'r';
            } else if (piece.type == Piece::Queen) {
                p = 'q';
            } else if (piece.type == Piece::King) {
                p = 'k';
            }
            if (piece.color == 'w')
                p = toupper(p);
            b[piece.cell.x][piece.cell.y] = p;
        }

        for (int pieceIdx = 0; pieceIdx < pieces.size(); ++pieceIdx) {
            Piece piece = pieces[pieceIdx];
            if (piece.color != activeColor)
                continue;

            vector<Cell> endPositions;
            if (piece.type == Piece::Pawn) {
                if (piece.color == 'w') {
                    Cell newCell = piece.cell + Cell(1, -1);
                    if (newCell.inRange() && b[newCell.x][newCell.y] != 0 && islower(b[newCell.x][newCell.y]) && b[newCell.x][newCell.y] != 'k')
                        endPositions.push_back(newCell);
                    newCell = piece.cell + Cell(1, 1);
                    if (newCell.inRange() && b[newCell.x][newCell.y] != 0 && islower(b[newCell.x][newCell.y]) && b[newCell.x][newCell.y] != 'k')
                        endPositions.push_back(newCell);
                    newCell = piece.cell + Cell(1, 0);
                    if (newCell.inRange() && b[newCell.x][newCell.y] == 0) {
                        endPositions.push_back(newCell);
                        if (piece.cell.x == 2) {
                            newCell = newCell + Cell(1, 0);
                            if (b[newCell.x][newCell.y] == 0)
                                endPositions.push_back(newCell);
                        }
                    }
                } else if (piece.color == 'b') {
                    Cell newCell = piece.cell + Cell(-1, -1);
                    if (newCell.inRange() && b[newCell.x][newCell.y] != 0 && isupper(b[newCell.x][newCell.y]) && b[newCell.x][newCell.y] != 'K')
                        endPositions.push_back(newCell);
                    newCell = piece.cell + Cell(-1, 1);
                    if (newCell.inRange() && b[newCell.x][newCell.y] != 0 && isupper(b[newCell.x][newCell.y]) && b[newCell.x][newCell.y] != 'K')
                        endPositions.push_back(newCell);
                    newCell = piece.cell + Cell(-1, 0);
                    if (newCell.inRange() && b[newCell.x][newCell.y] == 0) {
                        endPositions.push_back(newCell);
                        if (piece.cell.x == 7) {
                            newCell = newCell + Cell(-1, 0);
                            if (b[newCell.x][newCell.y] == 0)
                                endPositions.push_back(newCell);
                        }
                    }
                }
            } else {
                for (int dir = 0; dir < dx[piece.type].size(); ++dir) {
                    Cell cell = piece.cell;
                    Cell dirCell = Cell(dx[piece.type][dir], dy[piece.type][dir]);
                    for (int step = 1; step <= steps[piece.type]; ++step) {
                        cell = cell + dirCell;
                        if (!cell.inRange())
                            break;
                        if (b[cell.x][cell.y] != 0) {
                            if (isupper(b[cell.x][cell.y]) && activeColor == 'b' && b[cell.x][cell.y] != 'K')
                                endPositions.push_back(cell);
                            else if (islower(b[cell.x][cell.y]) && activeColor == 'w' && b[cell.x][cell.y] != 'k')
                                endPositions.push_back(cell);
                            break;
                        } else {
                            endPositions.push_back(cell);
                        }
                    }
                }
            }
            for (Cell endPosition : endPositions) {
                BoardState newBoard;
                char oldPiece = b[endPosition.x][endPosition.y];
                b[endPosition.x][endPosition.y] = 0;
                newBoard.pieces = pieces;
                newBoard.activeColor = newColor;
                newBoard.fullMoves = fullMoves + 1;
                // compute newBoard.enPassant
                if (piece.type == Piece::Pawn && abs(endPosition.x - piece.cell.x) == 2) {
                    newBoard.enPassant = piece.cell + Cell((endPosition.x - piece.cell.x) / 2, 0);
                } else {
                    newBoard.enPassant = Cell(-1, -1);
                }
                // compute newBoard.castling
                newBoard.whiteCastling = newBoard.blackCastling = 0;
                if (whiteCastling & 1) {
                    // K
                    if (b[1][5] == 'K' && b[1][8] == 'R')
                        newBoard.whiteCastling += 1;
                }
                if (whiteCastling & 2) {
                    // Q
                    if (b[1][5] == 'K' && b[1][1] == 'R')
                        newBoard.whiteCastling += 2;
                }
                if (blackCastling & 1) {
                    // k
                    if (b[8][5] == 'k' && b[8][8] == 'r')
                        newBoard.blackCastling += 1;
                }
                if (blackCastling & 2) {
                    // q
                    if (b[8][5] == 'k' && b[8][1] == 'r')
                        newBoard.blackCastling += 2;
                }
                b[endPosition.x][endPosition.y] = oldPiece;
                if (piece.type == Piece::Pawn || b[endPosition.x][endPosition.y] != 0)
                    newBoard.halfMoves = 0;
                else
                    newBoard.halfMoves = halfMoves + 1;
                newBoard.pieces[pieceIdx].cell = endPosition;
                if (b[endPosition.x][endPosition.y] != 0) {
                    for (int removeIdx = 0; removeIdx < newBoard.pieces.size(); ++removeIdx) {
                        if (newBoard.pieces[removeIdx].cell == endPosition && newBoard.pieces[removeIdx].color != activeColor) {
                            swap(newBoard.pieces[removeIdx], newBoard.pieces.back());
                            newBoard.pieces.pop_back();
                            break;
                        }
                    }
                }
                if (piece.type == Piece::Pawn && (endPosition.x == 1 || endPosition.x == 8)) {
                    for (auto newPieceType : {Piece::Queen, Piece::Knight, Piece::Bishop, Piece::Rook}) {
                        newBoard.pieces[pieceIdx].type = newPieceType;
                        if (!newBoard.isInCheck(activeColor)) {
                            newBoards.push_back(newBoard);
                        }
                    }
                } else if (!newBoard.isInCheck(activeColor)) {
                    newBoards.push_back(newBoard);
                }
            }
        }

        // implement en passant
        if (enPassant.x != -1) {
            int upDir = (activeColor == 'w' ? 1 : -1);
            for (int dir : {-1, 1}) {
                Cell capturePawn = enPassant + Cell(-upDir, dir);
                Cell toCapturePawn = enPassant + Cell(-upDir, 0);
                if (capturePawn.inRange() &&
                    ((activeColor == 'w' && b[capturePawn.x][capturePawn.y] == 'P') ||
                     (activeColor == 'b' && b[capturePawn.x][capturePawn.y] == 'p'))) {
                    BoardState newBoard;
                    newBoard.pieces = pieces;
                    newBoard.activeColor = newColor;
                    newBoard.whiteCastling = whiteCastling;
                    newBoard.blackCastling = blackCastling;
                    newBoard.fullMoves = fullMoves + 1;
                    newBoard.halfMoves = 0;
                    newBoard.enPassant = Cell(-1, -1);
                    for (auto & piece : newBoard.pieces) {
                        if (piece.cell == capturePawn) {
                            piece.cell = enPassant;
                            break;
                        }
                    }
                    for (int pieceIdx = 0; pieceIdx < newBoard.pieces.size(); ++pieceIdx) {
                        if (newBoard.pieces[pieceIdx].cell == toCapturePawn) {
                            swap(newBoard.pieces[pieceIdx], newBoard.pieces.back());
                            newBoard.pieces.pop_back();
                            break;
                        }
                    }
                    if (!isInCheck(activeColor)) {
                        newBoards.push_back(newBoard);
                    }
                }
            }
        }
        // implement castling
        if (activeColor == 'w') {
            vector<vector<bool>> attacked = attackedCells(newColor);
            if (whiteCastling & 1) {
                bool invalid = false;
                for (int col = 6; col <= 7; ++col) {
                    if (b[1][col] != 0) {
                        invalid = true;
                        break;
                    }
                }
                for (int col = 5; col <= 6; ++col) {
                    if (attacked[1][col]) {
                        invalid = true;
                        break;
                    }
                }
                if (!invalid) {
                    BoardState newBoard;
                    newBoard.pieces = pieces;
                    newBoard.activeColor = newColor;
                    newBoard.whiteCastling = 0;
                    newBoard.blackCastling = blackCastling;
                    newBoard.fullMoves = fullMoves + 1;
                    newBoard.halfMoves = halfMoves + 1;
                    newBoard.enPassant = Cell(-1, -1);
                    for (auto & piece : newBoard.pieces) {
                        if (piece.cell == Cell(1, 5)) {
                            piece.cell = Cell(1, 7);
                            break;
                        }
                    }
                    for (auto & piece : newBoard.pieces) {
                        if (piece.cell == Cell(1, 8)) {
                            piece.cell = Cell(1, 6);
                            break;
                        }
                    }
                    if (!isInCheck(activeColor)) {
                        newBoards.push_back(newBoard);
                    }
                }
            }
            if (whiteCastling & 2) {
                bool invalid = false;
                for (int col = 2; col <= 4; ++col) {
                    if (b[1][col] != 0) {
                        invalid = true;
                        break;
                    }
                }
                for (int col = 3; col <= 5; ++col) {
                    if (attacked[1][col]) {
                        invalid = true;
                        break;
                    }
                }
                if (!invalid) {
                    BoardState newBoard;
                    newBoard.pieces = pieces;
                    newBoard.activeColor = newColor;
                    newBoard.whiteCastling = 0;
                    newBoard.blackCastling = blackCastling;
                    newBoard.fullMoves = fullMoves + 1;
                    newBoard.halfMoves = halfMoves + 1;
                    newBoard.enPassant = Cell(-1, -1);
                    for (auto & piece : newBoard.pieces) {
                        if (piece.cell == Cell(1, 5)) {
                            piece.cell = Cell(1, 3);
                            break;
                        }
                    }
                    for (auto & piece : newBoard.pieces) {
                        if (piece.cell == Cell(1, 1)) {
                            piece.cell = Cell(1, 4);
                            break;
                        }
                    }
                    if (!isInCheck(activeColor)) {
                        newBoards.push_back(newBoard);
                    }
                }
            }
        } else {
            vector<vector<bool>> attacked = attackedCells(newColor);
            if (blackCastling & 1) {
                bool invalid = false;
                for (int col = 6; col <= 7; ++col) {
                    if (b[8][col] != 0) {
                        invalid = true;
                        break;
                    }
                }
                for (int col = 5; col <= 6; ++col) {
                    if (attacked[8][col]) {
                        invalid = true;
                        break;
                    }
                }
                if (!invalid) {
                    BoardState newBoard;
                    newBoard.pieces = pieces;
                    newBoard.activeColor = newColor;
                    newBoard.whiteCastling = 0;
                    newBoard.blackCastling = blackCastling;
                    newBoard.fullMoves = fullMoves + 1;
                    newBoard.halfMoves = halfMoves + 1;
                    newBoard.enPassant = Cell(-1, -1);
                    for (auto & piece : newBoard.pieces) {
                        if (piece.cell == Cell(8, 5)) {
                            piece.cell = Cell(8, 7);
                            break;
                        }
                    }
                    for (auto & piece : newBoard.pieces) {
                        if (piece.cell == Cell(8, 8)) {
                            piece.cell = Cell(8, 6);
                            break;
                        }
                    }
                    if (!isInCheck(activeColor)) {
                        newBoards.push_back(newBoard);
                    }
                }
            }
            if (blackCastling & 2) {
                bool invalid = false;
                for (int col = 2; col <= 4; ++col) {
                    if (b[8][col] != 0) {
                        invalid = true;
                        break;
                    }
                }
                for (int col = 3; col <= 5; ++col) {
                    if (attacked[8][col]) {
                        invalid = true;
                        break;
                    }
                }
                if (!invalid) {
                    BoardState newBoard;
                    newBoard.pieces = pieces;
                    newBoard.activeColor = newColor;
                    newBoard.whiteCastling = 0;
                    newBoard.blackCastling = blackCastling;
                    newBoard.fullMoves = fullMoves + 1;
                    newBoard.halfMoves = halfMoves + 1;
                    newBoard.enPassant = Cell(-1, -1);
                    for (auto & piece : newBoard.pieces) {
                        if (piece.cell == Cell(8, 5)) {
                            piece.cell = Cell(8, 3);
                            break;
                        }
                    }
                    for (auto & piece : newBoard.pieces) {
                        if (piece.cell == Cell(8, 1)) {
                            piece.cell = Cell(8, 4);
                            break;
                        }
                    }
                    if (!isInCheck(activeColor)) {
                        newBoards.push_back(newBoard);
                    }
                }
            }
        }
        return newBoards;
    }
};

inline BoardState parseFEN(string fen) {
    int currIndex = 0;
    BoardState board;
    for (int i = 8; i >= 1; --i) {
        int pos = 0;
        while (pos < 8) {
            if (isdigit(fen[currIndex])) {
                pos += fen[currIndex] - '0';
            } else {
                pos++;
                Piece piece = Piece(fen[currIndex], i, pos);
                board.pieces.push_back(piece);
            }
            currIndex++;
        }
        currIndex++;
    }

    board.activeColor = fen[currIndex];
    currIndex += 2;

    board.whiteCastling = board.blackCastling = 0;
    while (fen[currIndex] != ' ') {
        if (fen[currIndex] == 'K')
            board.whiteCastling += 1;
        else if (fen[currIndex] == 'Q')
            board.whiteCastling += 2;
        else if (fen[currIndex] == 'k')
            board.blackCastling += 1;
        else if (fen[currIndex] == 'q')
            board.blackCastling += 2;
        currIndex++;
    }

    currIndex++;
    if (fen[currIndex] == '-') {
        board.enPassant = Cell(-1, -1);
        currIndex += 2;
    } else {
        board.enPassant = Cell(fen[currIndex + 1] - '0', fen[currIndex] - 'a' + 1);
        currIndex += 3;
    }

    board.halfMoves = 0;
    while (fen[currIndex] != ' ') {
        board.halfMoves = board.halfMoves * 10 + fen[currIndex] - '0';
        currIndex++;
    }
    currIndex++;

    board.fullMoves = 0;
    while (currIndex < fen.size()) {
        board.fullMoves = board.fullMoves * 10 + fen[currIndex] - '0';
        currIndex++;
    }

    return board;
}

//string generateFEN(BoardState board, bool includeMoves) {
//    string fen = """";
//    char b[10][10];
//    memset(b, 0, sizeof(b));
//    for (const Piece& piece : board.pieces) {
//        char p;
//        if (piece.type == Piece::Pawn) {
//            p = 'p';
//        } else if (piece.type == Piece::Knight) {
//            p = 'n';
//        } else if (piece.type == Piece::Bishop) {
//            p = 'b';
//        } else if (piece.type == Piece::Rook) {
//            p = 'r';
//        } else if (piece.type == Piece::Queen) {
//            p = 'q';
//        } else if (piece.type == Piece::King) {
//            p = 'k';
//        }
//        if (piece.color == 'w')
//            p = toupper(p);
//        b[piece.cell.x][piece.cell.y] = p;
//    }
//
//    for (int i = 8; i >= 1; --i) {
//        int pos = 0;
//        for (int j = 1; j <= 8; ++j) {
//            if (b[i][j] == 0) {
//                pos++;
//            } else {
//                if (pos > 0) {
//                    fen += to_string(pos);
//                    pos = 0;
//                }
//                fen += b[i][j];
//            }
//        }
//        if (pos != 0)
//            fen += to_string(pos);
//        if (i == 1) {
//            fen += "" "";
//        } else {
//            fen += ""/"";
//        }
//    }
//
//    fen += board.activeColor;
//    fen += "" "";
//
//    if (board.whiteCastling == 0 && board.blackCastling == 0)
//        fen += ""-"";
//    else {
//        if (board.whiteCastling & 1) {
//            fen += ""K"";
//        }
//        if (board.whiteCastling & 2) {
//            fen += ""Q"";
//        }
//        if (board.blackCastling & 1) {
//            fen += ""k"";
//        }
//        if (board.blackCastling & 2) {
//            fen += ""q"";
//        }
//    }
//    fen += "" "";
//
//    if (board.enPassant.x == -1) {
//        fen += ""-"";
//    } else {
//        fen += ('a' + board.enPassant.y - 1);
//        fen += ('0' + board.enPassant.x);
//    }
//
//    if (includeMoves) {
//        fen += "" "";
//        fen += to_string(board.halfMoves);
//        fen += "" "";
//        fen += to_string(board.fullMoves);
//    }
//
//    return fen;
//}

struct SortedBoards {
    BoardState board;
    int value;
};

inline int computeBoardScore(const BoardState& board) {
    int score = 0;
    for (const Piece& piece : board.pieces) {
        int value = 0;
        if (piece.type == Piece::Pawn) {
            value = 1;
        } else if (piece.type == Piece::Bishop) {
            value = 3;
        } else if (piece.type == Piece::Knight) {
            value = 3;
        } else if (piece.type == Piece::Rook) {
            value = 5;
        } else if (piece.type == Piece::Queen) {
            value = 9;
        }
        if (piece.color == 'w')
            score += value;
        else
            score -= value;
    }
    return score;
}

inline constexpr bool cmp1(const SortedBoards& b1, const SortedBoards& b2) {
    return b1.value > b2.value;
}

inline constexpr bool cmp2(const SortedBoards& b1, const SortedBoards& b2) {
    return b1.value < b2.value;
}

inline int alphaBetaMiniMax(BoardState& board, int depth, int alpha, int beta) {
    if (depth >= 7)
        return 0;
    if (board.isDraw())
        return 0;
    if (board.isCheckMate()) {
        if (board.activeColor == 'w') {
            return -maxv + depth;
        } else {
            return maxv - depth;
        }
    }
    vector<BoardState> generatedBoards = board.generateAllMoves();
    vector<SortedBoards> sortedBoards(generatedBoards.size());
    for (int i = 0; i < generatedBoards.size(); ++i) {
        swap(sortedBoards[i].board, generatedBoards[i]);
        sortedBoards[i].value = computeBoardScore(sortedBoards[i].board);
    }
    if (board.activeColor == 'w') {
        int maxEval = -inf;
        sort(sortedBoards.begin(), sortedBoards.end(), cmp1);
        for (auto newBoard : sortedBoards) {
            int eval = alphaBetaMiniMax(newBoard.board, depth + 1, alpha, beta);
            maxEval = max(maxEval, eval);
            alpha = max(alpha, eval);
            if (beta <= alpha)
                break;
        }
        return maxEval;
    } else {
        int minEval = inf;
        sort(sortedBoards.begin(), sortedBoards.end(), cmp2);
        for (auto newBoard : sortedBoards) {
            int eval = alphaBetaMiniMax(newBoard.board, depth + 1, alpha, beta);
            minEval = min(minEval, eval);
            beta = min(beta, eval);
            if (beta <= alpha)
                break;
        }
        return minEval;
    }
}

int main() {
    freopen(""instances/easy/2.in"", ""r"", stdin);

    string fen;
    getline(cin, fen);
    BoardState board = parseFEN(fen);

    int answer = alphaBetaMiniMax(board, 0, -inf, inf);
    if (answer == 0) {
        cout << ""Draw"" << endl;
    } else if (answer > 0) {
        cout << ""W M"" << (-answer + maxv + 1) / 2 << endl;
    } else {
        cout << ""B M"" << (answer + maxv + 1) / 2 << endl;
    }

    return 0;
}
"
RdMZm4eQ,DegreeOfTwo,UrayFenn,C#,Saturday 17th of February 2024 03:18:58 PM CDT,"namespace DegreeOfTwo
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int number = 2;
            int minNumber = 1;
            int maxNumber = 100;
            int degree = 0;
            int lastNumber = 1;
            Random random = new Random();
            int randomNumber = random.Next(minNumber, maxNumber);

            while (randomNumber >= lastNumber)
            {
                degree++;
                lastNumber *= number;
            }

            Console.WriteLine($""Число - {randomNumber}\nСтепень - {degree}\n{number} в степени {degree} - {lastNumber}"");
        }
    }
}"
Pk2eDPWY,Multiples,UrayFenn,C#,Saturday 17th of February 2024 03:14:31 PM CDT,"namespace Multiples
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int maxNumber = 25;
            int minNumber = 10;
            int minRange = 50;
            int maxRange = 150;
            int counter = 0;
            Random random = new Random();
            int number = random.Next(minNumber, maxNumber + 1);
            Console.WriteLine($""Число N - {number}"");

            for (int i = 0; i < maxRange; i += number)
            {
                if (i >= minRange)
                {
                    counter++;
                }
            }

            Console.WriteLine($""Количество трехзначных натуральных чисел - {counter}"");
        }
    }
}"
n4KJm9v8,more-youtube-hotkeys.user.js,jcunews,JavaScript,Saturday 17th of February 2024 02:57:25 PM CDT,"// ==UserScript==
// @name         More YouTube Hotkeys
// @namespace    https://greasyfork.org/en/users/85671-jcunews
// @version      1.2.51.1
// @license      AGPLv3
// @author       jcunews
// @description  Adds more keyboard shortcuts for YouTube. The list of all new shortcuts is added into new ""More Shortcuts"" section on YouTube's ""Keyboard shortcuts"" popup which can be accessed via ""?"" or SHIFT+/ key (on U.S. keyboards).
// @match        *://www.youtube.com/*
// @grant        none
// @run-at       document-start
// ==/UserScript==

(ch => {

  //=== CONFIGURATION BEGIN
  /*
  `key` is the key name. If it's a letter, it must be in uppercase.
  `mods` is a zero or up to 3 modifier key characters (in any order): `A`=Alt, `C`=Control, `S`=Shift. Character case is ignored.
    e.g. """" (no modifier key), ""s"" (Shift), ""Cs"" (Control+Shift), ""aSc"" (Control+Shift+Alt).
  `desc` is the hotkey description which will be added onto YouTube's Hotkey List Popup (accessible via `?` or `SHIFT+/` key).
    If this property is empty or doesn't exist, the hotkey won't be included in YouTube's Hotkey List Popup.
  `keys` is an optional custom text representation for the keyboard keys which is useful to represent multiple hotkeys.
  `func` is the JavaScript function to execute with the activated hotkey object as the first argument.
  */

  var hotkeys = [
    {key: ""`"", mods: """", desc: ""Toggle guide / sidebar"", func: a => eleClick('#guide-button')},
    {key: "";"", mods: """", desc: ""Focus channel search box"", func: a => eleClick('#tabs-container :is(ytd-expandable-tab-renderer,.ytd-expandable-tab-renderer):has(form[action*=""/search""]) button.yt-icon-button')},
    {key: "")"", mods: ""S"", desc: ""Seek to specific point in the video (SHIFT+7 advances to 75% of duration)"", keys: ""SHIFT+0..SHIFT+9"", func: a => videoSeekTo(0.05)},
    {key: ""!"", mods: ""S"", func: a => videoSeekTo(0.15)},
    {key: ""@"", mods: ""S"", func: a => videoSeekTo(0.25)},
    {key: ""#"", mods: ""S"", func: a => videoSeekTo(0.35)},
    {key: ""$"", mods: ""S"", func: a => videoSeekTo(0.45)},
    {key: ""%"", mods: ""S"", func: a => videoSeekTo(0.55)},
    {key: ""^"", mods: ""S"", func: a => videoSeekTo(0.65)},
    {key: ""&"", mods: ""S"", func: a => videoSeekTo(0.75)},
    {key: ""*"", mods: ""S"", func: a => videoSeekTo(0.85)},
    {key: ""("", mods: ""S"", func: a => videoSeekTo(0.95)},
    {key: ""J"", mods: ""A"", func: a => videoSeekChapter(-1), desc: ""Seek to previous chapter""},
    {key: ""L"", mods: ""A"", func: a => videoSeekChapter(1), desc: ""Seek to next chapter""},
    {key: ""C"", mods: ""S"", desc: ""Select preferred subtitle language"", func: selectCaption},
    {key: ""J"", mods: ""S"", desc: ""Rewind video by 30 seconds"", func: a => videoSeekBy(-30)},
    {key: ""L"", mods: ""S"", desc: ""Fast forward video by 30 seconds"", func: a => videoSeekBy(30)},
    {key: ""G"", mods: ""A"", desc: ""Decrease video quality"", func: selectQuality},
    {key: ""H"", mods: ""A"", desc: ""Increase video quality"", func: selectQuality},
    {key: ""Y"", mods: ""A"", desc: ""Set video quality to auto"", func: selectQuality},
    {key: ""-"", mods: """", desc: ""Decrease video playback speed by 0.25"", func: a => adjustSpeed(-1)},
    {key: ""="", mods: """", desc: ""Increase video playback speed by 0.25"", func: a => adjustSpeed(1)},
    {key: ""E"", mods: """", desc: ""Toggle like video"", func: a => eleClick(['#segmented-like-button button', ':is(#info, #description-and-actions, #actions) #menu ytd-toggle-button-renderer:nth-of-type(1) button#button', '#info #menu #top-level-buttons-computed ytd-toggle-button-renderer:nth-of-type(1) button#button', 'like-button-view-model button'])},
    {key: ""E"", mods: ""S"", desc: ""Toggle dislike video"", func: a => eleClick(['#segmented-dislike-button button', ':is(#info, #description-and-actions, #actions) #menu ytd-toggle-button-renderer:nth-of-type(2) button#button', '#info #menu #top-level-buttons-computed ytd-toggle-button-renderer:nth-of-type(2) button#button', 'dislike-button-view-model button'])},
    {key: ""H"", mods: """", desc: ""Share video"", func: a => eleClick([':is(#info, #description-and-actions) #menu ytd-button-renderer:nth-of-type(1) button#button,ytd-watch-metadata #menu ytd-button-renderer button:has(div[style*=""share""])', 'ytd-watch-metadata #menu ytd-button-renderer button[aria-label=""Share""]'])},
    {key: ""N"", mods: """", desc: ""Download video"", func: a => eleClick(['ytd-watch-metadata #menu ytd-button-renderer button:has(div[style*=""download""])', '.ytd-download-button-renderer button'])},
    {key: ""Q"", mods: ""S"", desc: ""Toggle YouTube video controls"", func: toggleYtVideoControls},
    {key: ""V"", mods: """", desc: ""Save video into playlist"", func: a => eleClick(':is(#info, #description-and-actions) #menu ytd-button-renderer:last-of-type button#button,#actions button:has(div[style*=""list_add""])')},
    {key: ""U"", mods: """", desc: ""Toggle subscription"", func: a => eleClick('#meta ytd-subscribe-button-renderer>.ytd-subscribe-button-renderer:not(div),paper-button.ytd-subscribe-button-renderer,tp-yt-paper-button.ytd-subscribe-button-renderer,ytd-subscribe-button-renderer.ytd-watch-metadata button', true)},
    {key: ""Y"", mods: """", desc: ""Toggle subscription notification"", func: a => eleClick(['ytd-watch-flexy #meta  .ytd-subscription-notification-toggle-button-renderer>button#button', 'ytd-watch-flexy #notification-preference-toggle-button > .ytd-subscribe-button-renderer'])},
    {key: ""R"", mods: """", desc: ""Toggle replay chat or chapter list"", func: toggleChatChap},
    {key: ""R"", mods: ""S"", desc: ""Toggle sponsored video list"", func: a => eleClick('ytd-engagement-panel-section-list-renderer[target-id=""ytbc-related-shelf""] #visibility-button .yt-icon-button')},
    {key: ""X"", mods: """", desc: ""Toggle autoplay of next non-playlist video"", func: a => eleClick(['paper-toggle-button.ytd-compact-autoplay-renderer', 'button[data-tooltip-target-id=""ytp-autonav-toggle-button""]'])},
    {key: ""V"", mods: ""S"", desc: ""Go to user/channel video page"", func: a => navUser(""Videos"", ""videos"")},
    {key: ""Y"", mods: ""S"", desc: ""Go to user/channel playlists page"", func: a => navUser(""Playlists"", ""playlists"")},
    {key: ""`"", mods: ""C"", desc: ""Go to YouTube home page"", func: a => eleClick('a#logo')},
    {key: ""S"", mods: ""S"", desc: 'Go to Subscriptions page', func: a => eleClick('a[href=""/feed/subscriptions""]') || (location.href = ""/feed/subscriptions"")},
    {key: ""F"", mods: ""S"", desc: 'Go to Feeds (""You"") page', func: a => eleClick('a[href=""/feed/you""]') || (location.href = ""/feed/you"")},
    {key: ""I"", mods: ""S"", desc: ""Go to History page"", func: a => eleClick('a[href=""/feed/history""]') || (location.href = ""/feed/history"")},
    {key: ""W"", mods: ""S"", desc: ""Go to Watch Later page"", func: a => eleClick('a[href=""/playlist?list=WL""]') || (location.href = ""/playlist?list=WL"")},
    {key: ""K"", mods: ""S"", desc: ""Go to Liked Videos page"", func: a => eleClick('a[href=""/playlist?list=LL""]') || (location.href = ""/playlist?list=LL"")},
    {key: ""T"", mods: ""S"", desc: ""Go to Account page"", func: a => eleClick('a[href=""/account""]') || (location.href = ""/account"")}
  ];
  var subtitleLanguageCode = ""en""; //2-letters language code for select preferred subtitle language hotkey

  //=== CONFIGURATION END

  var baseKeys = {};
  (""~`!1@2#3$4%5^6&7*8(9)0_-+={[}]:;\""'|\\<,>.?/"").split("""").forEach((c, i, a) => {
    if ((i & 1) === 0) baseKeys[c] = a[i + 1];
  });

  function isHidden(e) {
    while (e && e.style) {
      if (getComputedStyle(e).display === ""none"") {
        return true;
      }
      e = e.parentNode
    }
    return false
  }

  function eleClick(s, l, e) {
    if (s.some) {
      s.some(a => {
        if (e = document.querySelector(a)) {
          if (e.disabled || isHidden(e)) e = null
        }
        if (e) return true
      });
    } else if (l) {
      e = Array.from(document.querySelectorAll(s)).find(f => !f.disabled && !isHidden(f))
    } else if (e = document.querySelector(s)) {
      if (e.disabled || isHidden(e)) e = null
    }
    if (e) {
      e.click();
      return true
    }
  }

  function videoSeekBy(t, v) {
    (v = document.querySelector('.html5-video-player')) && v.seekBy(t);
  }

  function videoSeekTo(p, v) {
    (v = document.querySelector('.html5-video-player')) && v.seekTo(v.getDuration() * p);
  }

  function videoSeekChapter(d, v, s, t) {
    if (
      (v = document.querySelector('.html5-video-player')) && (s = v.getPlayerResponse().videoDetails) &&
      (s = s.shortDescription)
    ) {
      t = v.getCurrentTime();
      if (s = s.match(/^(?:\s*\d+\.)?\s*(\d{1,2}:)?\d{1,2}:\d{1,2}\s+\S+.*/gm)) {
        s = s.map(s => {
          s = s.match(/^(?:\s*\d+\.)?\s*(\d{1,2}:)?(\d{1,2}):(\d{1,2})/);
          s[1] = s[1] ? parseInt(s[1]) : 0;
          s[2] = s[2] ? parseInt(s[2]) : 0;
          s[3] = s[3] ? parseInt(s[3]) : 0;
          return (s[1] * 3600) + (s[2] * 60) + s[3]
        })
      }
    }
    if (
      (!s || !s.some || !s.length) && (s = window[""page-manager""]) && (s = s.getCurrentData()) && (s = s.response) && (s = s.playerOverlays) &&
      (s = s.playerOverlayRenderer) && (s = s.decoratedPlayerBarRenderer) && (s = s.decoratedPlayerBarRenderer) && (s = s.playerBar) &&
      (s = s.multiMarkersPlayerBarRenderer) && (s = s.markersMap)
    ) {
      s.some(m => {
        if (m.key === ""AUTO_CHAPTERS"") {
          if ((m = m.value) && (m = m.chapters) && m.length && m[0] && m[0].chapterRenderer && m[0].chapterRenderer) {
            s = m.map(a => Math.floor(a.chapterRenderer.timeRangeStartMillis / 1000))
          }
          return true
        }
      })
    }
    if (s && s.some) {
      if (s.length && (s[0] > 1)) s.unshift(0);
      s.some((c, i) => {
        if ((d < 0) && (c <= t) && (!s[i + 1] || (s[i + 1] > t))) {
          if ((c + 1) >= t) {
            v.seekTo(s[i - 1]);
          } else v.seekTo(c);
          return true
        } else if ((d > 0) && (c > t) && i) {
          v.seekTo(c);
          return true
        }
      })
    }
  }

  function selectQuality(i, v, e, c) {
    if ((v = document.querySelector('.html5-video-player')) && (v.getAvailableQualityLabels().length > 1)) {
      if (i.key === ""Y"") {
        v.setPlaybackQualityRange(""auto"", ""auto"");
      } else {
        (e = v.getAvailableQualityLevels()).pop();
        c = e.indexOf(v.getPlaybackQuality());
        i = i.key === ""G"" ? 1 : -1;
        if (e = e[c + i]) v.setPlaybackQualityRange(e, e);
      }
    }
  }

  function adjustSpeed(d, s) {
    if (s = Math.floor((movie_player.getPlaybackRate() * 4) + d) / 4) movie_player.setPlaybackRate(s)
  }

  function selectCaption(v, o, c, a) {
    if (
      (v = document.querySelector('.html5-video-player')) && (o = v.getPlayerResponse().captions) &&
      (o = o.playerCaptionsTracklistRenderer) && (o = o.captionTracks)
    ) {
      if ((c = v.getOption(""captions"", ""track"")) && c.vss_id) {
        if (c.vss_id === (""."" + subtitleLanguageCode)) {
          a = o.find(ct => ct.vssId === (""a."" + subtitleLanguageCode));
          if (!a) a = o.find(ct => ct.isTranslatable && (ct.vssId[0] === ""."") && (ct.vssId.substr(1) !== subtitleLanguageCode));
          if (!a) a = o.find(ct => ct.isTranslatable && (ct.vssId[1] === ""."") && (ct.vssId.substr(2) !== subtitleLanguageCode));
        }
        if (!a && (c.vss_id === (""a."" + subtitleLanguageCode))) {
          a = o.find(ct => ct.isTranslatable && (ct.vssId[0] === ""."") && (ct.vssId.substr(1) !== subtitleLanguageCode));
          if (!a) a = o.find(ct => ct.isTranslatable && (ct.vssId[1] === ""."") && (ct.vssId.substr(2) !== subtitleLanguageCode));
        }
        if (!a && c.is_translateable && (c.vss_id[0] === ""."") && (c.vss_id.substr(1) !== subtitleLanguageCode)) {
          a = o.find(ct => ct.isTranslatable && (ct.vssId[1] === ""."") && (ct.vssId.substr(2) !== subtitleLanguageCode));
        }
      }
      if (!a) {
        a = o.find(ct => ct.vssId === (""."" + subtitleLanguageCode));
        if (!a) a = o.find(ct => ct.vssId === (""a."" + subtitleLanguageCode));
        if (!a) a = o.find(ct => ct.isTranslatable && (ct.vssId[0] === ""."") && (ct.vssId.substr(1) !== subtitleLanguageCode));
        if (!a) a = o.find(ct => ct.isTranslatable && (ct.vssId[1] === ""."") && (ct.vssId.substr(2) !== subtitleLanguageCode));
        if (!a) {
          a = o.find(ct => ct.isTranslatable && (
            ((ct.vssId[0] === ""."") && (ct.vssId.substr(1) !== subtitleLanguageCode)) ||
            ((ct.vssId[1] === ""."") && (ct.vssId.substr(2) !== subtitleLanguageCode))
          ));
        }
        if (!a) return;
      }
      a = {languageCode: a.languageCode, vss_id: a.vssId};
      if (a.languageCode !== subtitleLanguageCode) {
        v.getPlayerResponse().captions.playerCaptionsTracklistRenderer.translationLanguages.some(l => {
          if (l.languageCode === subtitleLanguageCode) {
            a.translationLanguage = {languageCode: subtitleLanguageCode};
            a.translationLanguage.languageName = l.languageName.simpleText;
            return true;
          }
        });
      }
      if (!c.languageCode) v.toggleSubtitles();
      v.setOption(""captions"", ""track"", a);
    }
  }

  function toggleChatChap(a) {
    if (!eleClick([
      '#chat-messages #close-button button',
      '#show-hide-button.ytd-live-chat-frame button',
      '#show-hide-button.ytd-live-chat-frame > ytd-toggle-button-renderer.ytd-live-chat-frame',
      'ytd-engagement-panel-section-list-renderer[target-id=""engagement-panel-macro-markers-description-chapters""][visibility=""ENGAGEMENT_PANEL_VISIBILITY_EXPANDED""] #visibility-button button',
      '.ytp-chapter-title'
    ]) && (a = document.querySelector('ytd-live-chat-frame:not([collapsed]) #chatframe'))) a.contentWindow.postMessage(""myhujs_toggleChatChap"")
  }

  function toggleYtVideoControls(v) {
    if (v = document.querySelector('.html5-video-player')) {
      if (v.classList.contains(""ytp-autohide-active"")) {
        v.classList.remove(""ytp-autohide-active"")
      } else if (v.classList.contains(""ytp-autohide"")) {
        v.classList.remove(""ytp-autohide"")
      } else v.classList.add(""ytp-autohide"")
    }
  }

  function navUser(tn, tp, a, b, d) {
    if ((new RegExp(`^/(channel|user)/[^/]+/${tp}$`)).test(location.pathname)) {
      Array.from(document.querySelectorAll('.paper-tab')).some(e => {
        if (e.textContent.trim() === tn) {
          e.parentNode.click();
          return true;
        }
      });
    } else if (
      (a = document.querySelector(':is(.ytd-video-secondary-info-renderer,ytd-watch-metadata) yt-formatted-string.ytd-channel-name')) &&
      (d = a.__data) && (d = d.text) && (d = d.runs) && (d = d[0]) && (d = d.navigationEndpoint)
    ) {
      if (b = document.querySelector("".yt-page-navigation-progress"")) {
        b.style.transform = ""scaleX(.5)"";
        b.parentNode.hidden = false
      }
      fetch(d.commandMetadata.webCommandMetadata.url, {credentials: ""omit""}).then(r => r.text().then((h, x, ep, e, t, m) => {
        if ((h = h.match(/var ytInitialData = (\{.*?\});/)) && (h = JSON.parse(h[1]).contents.twoColumnBrowseResultsRenderer.tabs)) {
          x = new RegExp(`^\\/[^\\/]+(?:\\/[^\\/]+)?\\/${tp}$`);
          if (h.some((v, i, b) => {
            if ((b = v.tabRenderer) && !b.content && x.test((b = b.endpoint).commandMetadata.webCommandMetadata.url)) {
              e = (ep = d).browseEndpoint;
              t = d.clickTrackingParams;
              m = d.commandMetadata;
              d.browseEndpoint = b.browseEndpoint;
              d.clickTrackingParams = b.clickTrackingParams;
              d.commandMetadata = b.commandMetadata;
              return true
            }
          })) {
            a.firstElementChild.click();
            setTimeout(() => {
              ep.browseEndpoint = e;
              ep.clickTrackingParams = t;
              ep.commandMetadata = m;
            }, 20)
          }
        }
      }))
    }
  }

  function checkHotkeyPopup(a, b, c, d, e) {
    if ((a = document.querySelector(""#sections.ytd-hotkey-dialog-content"")) && !a.querySelector("".more-hotkeys"")) {
      a.__shady_native_appendChild(b = (d = a.firstElementChild).__shady_native_cloneNode(false)).classList.add(""more-hotkeys"");
      a.__shady_native_appendChild(d.__shady_native_cloneNode(false));
      b.__shady_native_appendChild(d.__shady_native_firstElementChild.__shady_native_cloneNode(false)).textContent = ""More Hotkeys"";
      c = b.__shady_native_appendChild(d.__shady_native_lastElementChild.__shady_native_cloneNode(false));
      d = d.__shady_native_lastElementChild.firstElementChild;
      hotkeys.forEach((h, e, f) => {
        if (h.desc) {
          e = c.__shady_native_appendChild(d.__shady_native_cloneNode(true));
          e.__shady_native_firstElementChild.textContent = h.desc;
          if (!(f = h.keys)) {
            if (h.ctrl || h.alt) {
              f = (h.ctrl ? ""CTRL+"" : """") + (h.shift ? ""SHIFT+"" : """") + (h.alt ? ""ALT+"" : """") + h.key;
            } else if (h.shift) {
              f = h.key + "" ("" + (h.shift ? ""SHIFT+"" : """") + (h.shift ? baseKeys[h.key] || h.key.toLowerCase() : h.key) + "")"";
            } else f = h.key.toLowerCase();
          }
          e.__shady_native_lastElementChild.textContent = f;
        }
      });
    } else if (--ch) setTimeout(checkHotkeyPopup, 100);
  }

  function editable(e) {
    var r = false;
    while (e) {
      if (e.contentEditable === ""true"") return true;
      e = e.parentNode;
    }
    return r;
  }

  if (top !== self) {
    addEventListener(""message"", ev => (ev.data === ""myhujs_toggleChatChap"") && toggleChatChap())
  }

  hotkeys.forEach(h => {
    var a = h.mods.toUpperCase().split("""");
    h.shift = a.includes(""S"");
    h.ctrl = a.includes(""C"");
    h.alt = a.includes(""A"");
  });
  addEventListener(""keydown"", (ev, a) => {
    if ((a = document.activeElement) && (editable(a) || (a.tagName === ""INPUT"") || (a.tagName === ""TEXTAREA""))) return;
    if ((ev.key === ""?"") && ev.shiftKey && !ev.ctrlKey && !ev.altKey) {
      ch = 10;
      setTimeout(checkHotkeyPopup, 100);
    }
    hotkeys.forEach(h => {
      if ((ev.key.toUpperCase() === h.key) && (ev.shiftKey === h.shift) && (ev.ctrlKey === h.ctrl) && (ev.altKey === h.alt)) {
        ev.preventDefault();
        (""function"" === typeof h.func) && h.func(h);
      }
    });
  }, true);

})();
"
Edj9MHvG,wd,Samuel123123,Lua,Saturday 17th of February 2024 02:56:37 PM CDT,"local wr = game.Workspace.worldResources
local HL = Instance.new(""Highlight"")
HL.Name = ""Ok""
for i, ore in pairs(wr:GetDescendant()) do
    if ore:IsA(""MeshPart"") then
        local cloneHL = HL:Clone()
        local Part = Instance.new(""Part"")
        Part.Parent = ore
        Part.Position = ore.Position
        Part.Size = ore.Size
        cloneHL.Adornee = Part
        cloneHL.Parent = Part
    end
end"
q7n59jKe,create_random_datafile.py,bob_f,Python,Saturday 17th of February 2024 02:49:12 PM CDT,"
import os
import secrets 
import string

def get_temp_file_name(a_file_name_length: int) -> str:
    return ''.join(secrets.choice(string.ascii_lowercase + string.digits) for _ in range(a_file_name_length))

def generate_temp_file(a_file_name: str, a_length: int):
    with open(a_file_name, 'wb') as OUTFILE:
        OUTFILE.write(os.urandom(a_length))

generate_temp_file(get_temp_file_name(8), pow(1024, 1))"
VBjGEp2E,mri,VladNitu,C++,Saturday 17th of February 2024 02:45:00 PM CDT,"#include <bits/stdc++.h>

using namespace std;

const int inf = 1e9;
const int maxv = 100;

struct Cell {
    int x, y;

    Cell() {
        x = y = -1;
    }

    Cell(int _x, int _y) {
        x = _x;
        y = _y;
    }

    Cell operator+ (const Cell& other) const {
        return {x + other.x, y + other.y};
    }

    bool operator ==(const Cell& other) const {
        return x == other.x && y == other.y;
    }

    [[nodiscard]] bool inRange() const {
        if (1 <= x && x <= 8
            && 1 <= y && y <= 8)
            return true;
        return false;
    }
};

struct Piece {
    enum PieceType {
        Pawn,
        Knight,
        Bishop,
        Rook,
        Queen,
        King
    };

    PieceType type;
    Cell cell;
    char color;

    Piece () = default;

    Piece(PieceType _type, Cell _cell, char _color) {
        type = _type;
        cell = _cell;
        color = _color;
    }

    Piece(char c, int x, int y) {
        if (isupper(c)) {
            color = 'w';
            c = tolower(c);
        } else {
            color = 'b';
        }

        if (c == 'p')
            type = Pawn;
        else if (c == 'n')
            type = Knight;
        else if (c == 'b')
            type = Bishop;
        else if (c == 'r')
            type = Rook;
        else if (c == 'q')
            type = Queen;
        else if (c == 'k')
            type = King;

        cell = Cell(x, y);
    }

    struct Directions {
        vector<int> dx;
        vector<int> dy;
        int steps;
    };

    [[nodiscard]] static Directions generateDirections(PieceType pieceType) {
        if (pieceType == Knight) {
            return {vector<int>({2, 2, 1, 1, -1, -1, -2, -2}),
                    vector<int>({1, -1, 2, -2, 2, -2, 1, -1}),
                    1};
        } else if (pieceType == Bishop) {
            return {vector<int>({-1, -1, 1, 1}),
                    vector<int>({-1, 1, -1, 1}),
                    7
            };
        } else if (pieceType == Rook) {
            return {vector<int>({1, -1, 0, 0}),
                    vector<int>({0, 0, 1, -1}),
                    7
            };

        } else if (pieceType == Queen) {
            return {vector<int>({-1, -1, 1, 1, 1, -1, 0, 0}),
                    vector<int>({-1, 1, -1, 1, 0, 0, 1, -1}),
                    7
            };
        } else if (pieceType == King) {
            return {vector<int>({-1, -1, -1, 0, 1, 1, 1, 0}),
                    vector<int>({-1, 0, 1, 1, 1, 0, -1, -1}),
                    1
            };
        }
    }

    [[nodiscard]] vector<vector<Cell> > generateMoves() const {
        vector<vector<Cell> > allMoves;
        if (type == Pawn) {
            for (int step = 1; step <= 2; ++step) {
                int sgn = (color == 'w' ? 1 : -1);
                if (step == 2 &&
                    ((color == 'w' && cell.x != 2) || (color == 'b' && cell.x != 7)))
                    continue;
                vector<Cell> currMove;
                bool illegal = false;
                for (int currStep = 1; currStep <= step; ++currStep) {
                    Cell newCell = cell + Cell(currStep * sgn, 0);
                    if (!newCell.inRange()) {
                        illegal = true;
                        break;
                    }
                    currMove.push_back(newCell);
                }
                if (!illegal) {
                    allMoves.push_back(currMove);
                }
            }
        } else {
            Directions directions = generateDirections(type);
            for (int dir = 0; dir < directions.dx.size(); ++dir) {
                int dirX = directions.dx[dir];
                int dirY = directions.dy[dir];
                for (int step = 1; step <= directions.steps; ++step) {
                    vector<Cell> currMove;
                    bool illegal = false;
                    for (int currStep = 1; currStep <= step; ++currStep) {
                        Cell newCell = cell + Cell(currStep * dirX, currStep * dirY);
                        if (!newCell.inRange()) {
                            illegal = true;
                            break;
                        }
                        currMove.push_back(newCell);
                    }
                    if (!illegal) {
                        allMoves.push_back(currMove);
                    }
                }
            }
        }
        return allMoves;
    }
};

struct BoardState;
string generateFEN(BoardState board, bool includeMoves);

struct BoardState {
    vector<Piece> pieces;
    char activeColor;
    char whiteCastling;
    char blackCastling;
    Cell enPassant;
    int halfMoves;
    int fullMoves;

    [[nodiscard]] bool isInCheck(char color) const {
        Cell kingPosition;
        for (const Piece& piece : pieces) {
            if (piece.color == color && piece.type == Piece::King) {
                kingPosition = piece.cell;
                break;
            }
        }
        vector<vector<bool> > attacked = attackedCells(color ^ 'w' ^ 'b');
        return attacked[kingPosition.x][kingPosition.y];
    }

   [[nodiscard]] bool isDraw() const {
        if (halfMoves >= 50 || pieces.size() == 2)
            return true;
        vector<BoardState> boardStates = generateAllMoves();
        if (boardStates.empty() && !isInCheck(activeColor))
            return true;
        return false;
    }


    [[nodiscard]] bool isCheckMate() const {
        if (!isInCheck(activeColor))
            return false;
        vector<BoardState> boardStates = generateAllMoves();
        return boardStates.empty();
    }

    [[nodiscard]] vector<vector<bool> > attackedCells(char color) const {
        char b[10][10];
        memset(b, 0, sizeof(b));
        for (const Piece& piece : pieces) {
            b[piece.cell.x][piece.cell.y] = (piece.color == 'w' ? 1 : -1);
        }
        vector<vector<bool> > isAttacked(9, vector<bool>(9, false));
        for (const Piece& piece : pieces) {
            if (piece.color != color)
                continue;
            if (piece.type != Piece::Pawn) {
                vector<vector<Cell>> movesPiece = piece.generateMoves();
                for (vector<Cell> movesList : movesPiece) {
                    bool invalid = false;
                    for (int i = 0; i < movesList.size(); ++i) {
                        Cell cell = movesList[i];
                        if (b[cell.x][cell.y] != 0) {
                            if (i != movesList.size() - 1) {
                                invalid = true;
                                break;
                            } else {
                                if ((color == 'w' && b[cell.x][cell.y] == 1)
                                    || (color == 'b' && b[cell.x][cell.y] == -1)) {
                                    invalid = true;
                                    break;
                                }
                            }
                        }
                    }
                    if (invalid)
                        continue;
                    Cell endPosition = movesList.back();
                    isAttacked[endPosition.x][endPosition.y] = true;
                }
            } else {
                if (piece.color == 'w') {
                    Cell newCell = piece.cell + Cell(1, -1);
                    if (newCell.inRange() && b[newCell.x][newCell.y] != 1)
                        isAttacked[newCell.x][newCell.y] = true;
                    newCell = piece.cell + Cell(1, 1);
                    if (newCell.inRange() && b[newCell.x][newCell.y] != 1)
                        isAttacked[newCell.x][newCell.y] = true;
                } else if (piece.color == 'b') {
                    Cell newCell = piece.cell + Cell(-1, -1);
                    if (newCell.inRange() && b[newCell.x][newCell.y] != -1)
                        isAttacked[newCell.x][newCell.y] = true;
                    newCell = piece.cell + Cell(-1, 1);
                    if (newCell.inRange() && b[newCell.x][newCell.y] != -1)
                        isAttacked[newCell.x][newCell.y] = true;
                }
            }
        }
        return isAttacked;
    }

    [[nodiscard]] vector<BoardState> generateAllMoves() const {
        vector<BoardState> newBoards;

        char newColor = activeColor ^ 'w' ^ 'b';

        char b[10][10];
        memset(b, 0, sizeof(b));
        for (const Piece& piece : pieces) {
            char p;
            if (piece.type == Piece::Pawn) {
                p = 'p';
            } else if (piece.type == Piece::Knight) {
                p = 'n';
            } else if (piece.type == Piece::Bishop) {
                p = 'b';
            } else if (piece.type == Piece::Rook) {
                p = 'r';
            } else if (piece.type == Piece::Queen) {
                p = 'q';
            } else if (piece.type == Piece::King) {
                p = 'k';
            }
            if (piece.color == 'w')
                p = toupper(p);
            b[piece.cell.x][piece.cell.y] = p;
        }

        for (int pieceIdx = 0; pieceIdx < pieces.size(); ++pieceIdx) {
            Piece piece = pieces[pieceIdx];
            if (piece.color != activeColor)
                continue;

            vector<vector<Cell>> movesPiece = piece.generateMoves();
            if (piece.type == Piece::Pawn) {
                if (piece.color == 'w') {
                    Cell newCell = piece.cell + Cell(1, -1);
                    if (newCell.inRange() && b[newCell.x][newCell.y] != 0 && islower(b[newCell.x][newCell.y]) && b[newCell.x][newCell.y] != 'k')
                        movesPiece.push_back(vector<Cell>({newCell}));
                    newCell = piece.cell + Cell(1, 1);
                    if (newCell.inRange() && b[newCell.x][newCell.y] != 0 && islower(b[newCell.x][newCell.y]) && b[newCell.x][newCell.y] != 'k')
                        movesPiece.push_back(vector<Cell>({newCell}));
                } else if (piece.color == 'b') {
                    Cell newCell = piece.cell + Cell(-1, -1);
                    if (newCell.inRange() && b[newCell.x][newCell.y] != 0 && isupper(b[newCell.x][newCell.y]) && b[newCell.x][newCell.y] != 'K')
                        movesPiece.push_back(vector<Cell>({newCell}));
                    newCell = piece.cell + Cell(-1, 1);
                    if (newCell.inRange() && b[newCell.x][newCell.y] != 0 && isupper(b[newCell.x][newCell.y]) && b[newCell.x][newCell.y] != 'K')
                        movesPiece.push_back(vector<Cell>({newCell}));
                }
            }
            for (vector<Cell> movesList : movesPiece) {
                BoardState newBoard;
                bool invalid = false;
                for (int i = 0; i < movesList.size(); ++i) {
                    Cell cell = movesList[i];
                    if (b[cell.x][cell.y] != 0) {
                        if (i != movesList.size() - 1) {
                            invalid = true;
                            break;
                        } else {
                            if ((islower(b[cell.x][cell.y]) && activeColor == 'b')
                                || (isupper(b[cell.x][cell.y]) && activeColor == 'w') || tolower(b[cell.x][cell.y]) == 'k') {
                                invalid = true;
                                break;
                            }
                            if (piece.type == Piece::Pawn && cell.y == piece.cell.y) {
                                invalid = true;
                                break;
                            }
                        }
                    }
                }
                if (invalid)
                    continue;
                Cell endPosition = movesList.back();
                char oldPiece = b[endPosition.x][endPosition.y];
                b[endPosition.x][endPosition.y] = 0;
                newBoard.pieces = pieces;
                newBoard.activeColor = newColor;
                newBoard.fullMoves = fullMoves + 1;
                // compute newBoard.enPassant
                if (piece.type == Piece::Pawn && abs(endPosition.x - piece.cell.x) == 2) {
                    newBoard.enPassant = piece.cell + Cell((endPosition.x - piece.cell.x) / 2, 0);
                } else {
                    newBoard.enPassant = Cell(-1, -1);
                }
                // compute newBoard.castling
                newBoard.whiteCastling = newBoard.blackCastling = 0;
                if (whiteCastling & 1) {
                    // K
                    if (b[1][5] == 'K' && b[1][8] == 'R')
                        newBoard.whiteCastling += 1;
                }
                if (whiteCastling & 2) {
                    // Q
                    if (b[1][5] == 'K' && b[1][1] == 'R')
                        newBoard.whiteCastling += 2;
                }
                if (blackCastling & 1) {
                    // k
                    if (b[8][5] == 'k' && b[8][8] == 'r')
                        newBoard.blackCastling += 1;
                }
                if (blackCastling & 2) {
                    // q
                    if (b[8][5] == 'k' && b[8][1] == 'r')
                        newBoard.blackCastling += 2;
                }
                b[endPosition.x][endPosition.y] = oldPiece;
                if (piece.type == Piece::Pawn || b[endPosition.x][endPosition.y] != 0)
                    newBoard.halfMoves = 0;
                else
                    newBoard.halfMoves = halfMoves + 1;
                newBoard.pieces[pieceIdx].cell = endPosition;
                if (b[endPosition.x][endPosition.y] != 0) {
                    for (int removeIdx = 0; removeIdx < newBoard.pieces.size(); ++removeIdx) {
                        if (newBoard.pieces[removeIdx].cell == endPosition && newBoard.pieces[removeIdx].color != activeColor) {
                            std::swap(newBoard.pieces[removeIdx], newBoard.pieces.back());
                            newBoard.pieces.pop_back();
                            break;
                        }
                    }
                }
                if (piece.type == Piece::Pawn && (endPosition.x == 1 || endPosition.x == 8)) {
                    for (auto newPieceType : {Piece::Queen, Piece::Knight, Piece::Bishop, Piece::Rook}) {
                        newBoard.pieces[pieceIdx].type = newPieceType;
                        if (!newBoard.isInCheck(activeColor)) {
                            newBoards.push_back(newBoard);
                        }
                    }
                } else if (!newBoard.isInCheck(activeColor)) {
                    newBoards.push_back(newBoard);
                }
            }
        }

        // implement en passant
        if (enPassant.x != -1) {
            int upDir = (activeColor == 'w' ? 1 : -1);
            for (int dir : {-1, 1}) {
                Cell capturePawn = enPassant + Cell(-upDir, dir);
                Cell toCapturePawn = enPassant + Cell(-upDir, 0);
                if (capturePawn.inRange() &&
                    ((activeColor == 'w' && b[capturePawn.x][capturePawn.y] == 'P') ||
                     (activeColor == 'b' && b[capturePawn.x][capturePawn.y] == 'p'))) {
                    BoardState newBoard;
                    newBoard.pieces = pieces;
                    newBoard.activeColor = newColor;
                    newBoard.whiteCastling = whiteCastling;
                    newBoard.blackCastling = blackCastling;
                    newBoard.fullMoves = fullMoves + 1;
                    newBoard.halfMoves = 0;
                    newBoard.enPassant = Cell(-1, -1);
                    for (int pieceIdx = 0; pieceIdx < newBoard.pieces.size(); ++pieceIdx) {
                        if (newBoard.pieces[pieceIdx].cell == capturePawn) {
                            newBoard.pieces[pieceIdx].cell = enPassant;
                            break;
                        }
                    }
                    for (int pieceIdx = 0; pieceIdx < newBoard.pieces.size(); ++pieceIdx) {
                        if (newBoard.pieces[pieceIdx].cell == toCapturePawn) {
                            std::swap(newBoard.pieces[pieceIdx], newBoard.pieces.back());
                            newBoard.pieces.pop_back();
                            break;
                        }
                    }
                    if (!isInCheck(activeColor)) {
                        newBoards.push_back(newBoard);
                    }
                }
            }
        }
        // implement castling
        if (activeColor == 'w') {
            vector<vector<bool>> attacked = attackedCells(newColor);
            if (whiteCastling & 1) {
                bool invalid = false;
                for (int col = 6; col <= 7; ++col) {
                    if (b[1][col] != 0) {
                        invalid = true;
                        break;
                    }
                }
                for (int col = 5; col <= 6; ++col) {
                    if (attacked[1][col]) {
                        invalid = true;
                        break;
                    }
                }
                if (!invalid) {
                    BoardState newBoard;
                    newBoard.pieces = pieces;
                    newBoard.activeColor = newColor;
                    newBoard.whiteCastling = 0;
                    newBoard.blackCastling = blackCastling;
                    newBoard.fullMoves = fullMoves + 1;
                    newBoard.halfMoves = halfMoves + 1;
                    newBoard.enPassant = Cell(-1, -1);
                    for (int pieceIdx = 0; pieceIdx < newBoard.pieces.size(); ++pieceIdx) {
                        if (newBoard.pieces[pieceIdx].cell == Cell(1, 5)) {
                            newBoard.pieces[pieceIdx].cell = Cell(1, 7);
                            break;
                        }
                    }
                    for (int pieceIdx = 0; pieceIdx < newBoard.pieces.size(); ++pieceIdx) {
                        if (newBoard.pieces[pieceIdx].cell == Cell(1, 8)) {
                            newBoard.pieces[pieceIdx].cell = Cell(1, 6);
                            break;
                        }
                    }
                    if (!isInCheck(activeColor)) {
                        newBoards.push_back(newBoard);
                    }
                }
            }
            if (whiteCastling & 2) {
                bool invalid = false;
                for (int col = 2; col <= 4; ++col) {
                    if (b[1][col] != 0) {
                        invalid = true;
                        break;
                    }
                }
                for (int col = 3; col <= 5; ++col) {
                    if (attacked[1][col]) {
                        invalid = true;
                        break;
                    }
                }
                if (!invalid) {
                    BoardState newBoard;
                    newBoard.pieces = pieces;
                    newBoard.activeColor = newColor;
                    newBoard.whiteCastling = 0;
                    newBoard.blackCastling = blackCastling;
                    newBoard.fullMoves = fullMoves + 1;
                    newBoard.halfMoves = halfMoves + 1;
                    newBoard.enPassant = Cell(-1, -1);
                    for (int pieceIdx = 0; pieceIdx < newBoard.pieces.size(); ++pieceIdx) {
                        if (newBoard.pieces[pieceIdx].cell == Cell(1, 5)) {
                            newBoard.pieces[pieceIdx].cell = Cell(1, 3);
                            break;
                        }
                    }
                    for (int pieceIdx = 0; pieceIdx < newBoard.pieces.size(); ++pieceIdx) {
                        if (newBoard.pieces[pieceIdx].cell == Cell(1, 1)) {
                            newBoard.pieces[pieceIdx].cell = Cell(1, 4);
                            break;
                        }
                    }
                    if (!isInCheck(activeColor)) {
                        newBoards.push_back(newBoard);
                    }
                }
            }
        } else {
            vector<vector<bool>> attacked = attackedCells(newColor);
            if (blackCastling & 1) {
                bool invalid = false;
                for (int col = 6; col <= 7; ++col) {
                    if (b[8][col] != 0) {
                        invalid = true;
                        break;
                    }
                }
                for (int col = 5; col <= 6; ++col) {
                    if (attacked[8][col]) {
                        invalid = true;
                        break;
                    }
                }
                if (!invalid) {
                    BoardState newBoard;
                    newBoard.pieces = pieces;
                    newBoard.activeColor = newColor;
                    newBoard.whiteCastling = 0;
                    newBoard.blackCastling = blackCastling;
                    newBoard.fullMoves = fullMoves + 1;
                    newBoard.halfMoves = halfMoves + 1;
                    newBoard.enPassant = Cell(-1, -1);
                    for (int pieceIdx = 0; pieceIdx < newBoard.pieces.size(); ++pieceIdx) {
                        if (newBoard.pieces[pieceIdx].cell == Cell(8, 5)) {
                            newBoard.pieces[pieceIdx].cell = Cell(8, 7);
                            break;
                        }
                    }
                    for (int pieceIdx = 0; pieceIdx < newBoard.pieces.size(); ++pieceIdx) {
                        if (newBoard.pieces[pieceIdx].cell == Cell(8, 8)) {
                            newBoard.pieces[pieceIdx].cell = Cell(8, 6);
                            break;
                        }
                    }
                    if (!isInCheck(activeColor)) {
                        newBoards.push_back(newBoard);
                    }
                }
            }
            if (blackCastling & 2) {
                bool invalid = false;
                for (int col = 2; col <= 4; ++col) {
                    if (b[8][col] != 0) {
                        invalid = true;
                        break;
                    }
                }
                for (int col = 3; col <= 5; ++col) {
                    if (attacked[8][col]) {
                        invalid = true;
                        break;
                    }
                }
                if (!invalid) {
                    BoardState newBoard;
                    newBoard.pieces = pieces;
                    newBoard.activeColor = newColor;
                    newBoard.whiteCastling = 0;
                    newBoard.blackCastling = blackCastling;
                    newBoard.fullMoves = fullMoves + 1;
                    newBoard.halfMoves = halfMoves + 1;
                    newBoard.enPassant = Cell(-1, -1);
                    for (int pieceIdx = 0; pieceIdx < newBoard.pieces.size(); ++pieceIdx) {
                        if (newBoard.pieces[pieceIdx].cell == Cell(8, 5)) {
                            newBoard.pieces[pieceIdx].cell = Cell(8, 3);
                            break;
                        }
                    }
                    for (int pieceIdx = 0; pieceIdx < newBoard.pieces.size(); ++pieceIdx) {
                        if (newBoard.pieces[pieceIdx].cell == Cell(8, 1)) {
                            newBoard.pieces[pieceIdx].cell = Cell(8, 4);
                            break;
                        }
                    }
                    if (!isInCheck(activeColor)) {
                        newBoards.push_back(newBoard);
                    }
                }
            }
        }
        return newBoards;
    }
};

BoardState parseFEN(string fen) {
    int currIndex = 0;
    BoardState board;
    for (int i = 8; i >= 1; --i) {
        int pos = 0;
        while (pos < 8) {
            if (isdigit(fen[currIndex])) {
                pos += fen[currIndex] - '0';
            } else {
                pos++;
                board.pieces.emplace_back(fen[currIndex], i, pos);
            }
            currIndex++;
        }
        currIndex++;
    }

    board.activeColor = fen[currIndex];
    currIndex += 2;

    board.whiteCastling = board.blackCastling = 0;
    while (fen[currIndex] != ' ') {
        if (fen[currIndex] == 'K')
            board.whiteCastling += 1;
        else if (fen[currIndex] == 'Q')
            board.whiteCastling += 2;
        else if (fen[currIndex] == 'k')
            board.blackCastling += 1;
        else if (fen[currIndex] == 'q')
            board.blackCastling += 2;
        currIndex++;
    }

    currIndex++;
    if (fen[currIndex] == '-') {
        board.enPassant = Cell(-1, -1);
        currIndex += 2;
    } else {
        board.enPassant = Cell(fen[currIndex + 1] - '0', fen[currIndex] - 'a' + 1);
        currIndex += 3;
    }

    board.halfMoves = 0;
    while (fen[currIndex] != ' ') {
        board.halfMoves = board.halfMoves * 10 + fen[currIndex] - '0';
        currIndex++;
    }
    currIndex++;

    board.fullMoves = 0;
    while (currIndex < fen.size()) {
        board.fullMoves = board.fullMoves * 10 + fen[currIndex] - '0';
        currIndex++;
    }

    return board;
}

//string generateFEN(const BoardState& board, bool includeMoves) {
//    string fen = """";
//    char b[10][10];
//    memset(b, 0, sizeof(b));
//    for (const Piece& piece : board.pieces) {
//        char p;
//        if (piece.type == Piece::Pawn) {
//            p = 'p';
//        } else if (piece.type == Piece::Knight) {
//            p = 'n';
//        } else if (piece.type == Piece::Bishop) {
//            p = 'b';
//        } else if (piece.type == Piece::Rook) {
//            p = 'r';
//        } else if (piece.type == Piece::Queen) {
//            p = 'q';
//        } else if (piece.type == Piece::King) {
//            p = 'k';
//        }
//        if (piece.color == 'w')
//            p = toupper(p);
//        b[piece.cell.x][piece.cell.y] = p;
//    }
//
//    for (int i = 8; i >= 1; --i) {
//        int pos = 0;
//        for (int j = 1; j <= 8; ++j) {
//            if (b[i][j] == 0) {
//                pos++;
//            } else {
//                if (pos > 0) {
//                    fen += to_string(pos);
//                    pos = 0;
//                }
//                fen += b[i][j];
//            }
//        }
//        if (pos != 0)
//            fen += to_string(pos);
//        if (i == 1) {
//            fen += "" "";
//        } else {
//            fen += ""/"";
//        }
//    }
//
//    fen += board.activeColor;
//    fen += "" "";
//
//    if (board.whiteCastling == 0 && board.blackCastling == 0)
//        fen += ""-"";
//    else {
//        if (board.whiteCastling & 1) {
//            fen += ""K"";
//        }
//        if (board.whiteCastling & 2) {
//            fen += ""Q"";
//        }
//        if (board.blackCastling & 1) {
//            fen += ""k"";
//        }
//        if (board.blackCastling & 2) {
//            fen += ""q"";
//        }
//    }
//    fen += "" "";
//
//    if (board.enPassant.x == -1) {
//        fen += ""-"";
//    } else {
//        fen += ('a' + board.enPassant.y - 1);
//        fen += ('0' + board.enPassant.x);
//    }
//
//    if (includeMoves) {
//        fen += "" "";
//        fen += to_string(board.halfMoves);
//        fen += "" "";
//        fen += to_string(board.fullMoves);
//    }
//
//    return fen;
//}

struct SortedBoards {
    BoardState board;
    int value;
};

int computeBoardScore(const BoardState& board) {
    int score = 0;
    for (const Piece& piece : board.pieces) {
        int value = 0;
        if (piece.type == Piece::Pawn) {
            value = 1;
        } else if (piece.type == Piece::Bishop) {
            value = 3;
        } else if (piece.type == Piece::Knight) {
            value = 3;
        } else if (piece.type == Piece::Rook) {
            value = 5;
        } else if (piece.type == Piece::Queen) {
            value = 9;
        }
        if (piece.color == 'w')
            score += value;
        else
            score -= value;
    }
    return score;
}

int alphaBetaMiniMax(const BoardState& board, int depth, int alpha, int beta) {
    if (depth >= 4)
        return 0;
    if (board.isDraw())
        return 0;
    if (board.isCheckMate()) {
        if (board.activeColor == 'w') {
            return -maxv + depth;
        } else {
            return maxv - depth;
        }
    }
    vector<BoardState> generatedBoards = board.generateAllMoves();
    vector<SortedBoards> sortedBoards(generatedBoards.size());
    for (int i = 0; i < generatedBoards.size(); ++i) {
        swap(sortedBoards[i].board, generatedBoards[i]);
        sortedBoards[i].value = computeBoardScore(sortedBoards[i].board);
    }
    if (board.activeColor == 'w') {
        int maxEval = -inf;
        sort(sortedBoards.begin(), sortedBoards.end(), [](const auto& b1, const auto& b2) {return b1.value > b2.value; });
        for (const auto& newBoard : sortedBoards) {
            int eval = alphaBetaMiniMax(newBoard.board, depth + 1, alpha, beta);
            maxEval = max(maxEval, eval);
            alpha = max(alpha, eval);
            if (beta <= alpha)
                break;
        }
        return maxEval;
    } else {
        int minEval = inf;
        sort(sortedBoards.begin(), sortedBoards.end(), [](const auto& b1, const auto& b2) {return b1.value < b2.value; });
        for (const auto& newBoard : sortedBoards) {
            int eval = alphaBetaMiniMax(newBoard.board, depth + 1, alpha, beta);
            minEval = min(minEval, eval);
            beta = min(beta, eval);
            if (beta <= alpha)
                break;
        }
        return minEval;
    }
}

int main() {
    freopen(""instances/easy/3.in"", ""r"", stdin);

    string fen;
    getline(cin, fen);
    BoardState board = parseFEN(fen);

    int answer = alphaBetaMiniMax(board, 0, -inf, inf);
    if (answer == 0) {
        cout << ""Draw"" << endl;
    } else if (answer > 0) {
        cout << ""W M"" << (-answer + maxv + 1) / 2 << endl;
    } else {
        cout << ""B M"" << (answer + maxv + 1) / 2 << endl;
    }

    return 0;
}
"
h6A8SF1A,Basic Drone,Mackery,JSON,Saturday 17th of February 2024 02:42:34 PM CDT,"{""pneumaticcraft:progWidgets"":{""type"":9,""value"":[{""name"":{""type"":8,""value"":""start""},""x"":{""type"":3,""value"":30.0},""y"":{""type"":3,""value"":17.0}},{""name"":{""type"":8,""value"":""jump_sub""},""x"":{""type"":3,""value"":30.0},""y"":{""type"":3,""value"":61.0}},{""name"":{""type"":8,""value"":""label""},""x"":{""type"":3,""value"":87.0},""y"":{""type"":3,""value"":6.0}},{""name"":{""type"":8,""value"":""inventory_import""},""x"":{""type"":3,""value"":163.0},""count"":{""type"":3,""value"":1.0},""y"":{""type"":3,""value"":-11.0},""UP"":{""type"":1,""value"":1.0}},{""name"":{""type"":8,""value"":""area""},""x"":{""type"":3,""value"":-17.0},""y"":{""type"":3,""value"":-11.0},""pos1"":{""type"":10,""value"":{""X"":{""type"":3,""value"":-16.0},""Y"":{""type"":3,""value"":87.0},""Z"":{""type"":3,""value"":65.0}}},""pos2"":{""type"":10,""value"":{""X"":{""type"":3,""value"":-16.0},""Y"":{""type"":3,""value"":87.0},""Z"":{""type"":3,""value"":65.0}}},""boxType"":{""type"":1,""value"":0.0},""type"":{""type"":8,""value"":""box""}},{""name"":{""type"":8,""value"":""item_filter""},""x"":{""type"":3,""value"":-17.0},""y"":{""type"":3,""value"":0.0},""id"":{""type"":8,""value"":""minecraft:coal""},""Count"":{""type"":1,""value"":1.0}},{""name"":{""type"":8,""value"":""item_filter""},""x"":{""type"":3,""value"":-2.0},""y"":{""type"":3,""value"":0.0},""id"":{""type"":8,""value"":""minecraft:charcoal""},""Count"":{""type"":1,""value"":1.0}},{""name"":{""type"":8,""value"":""inventory_export""},""x"":{""type"":3,""value"":87.0},""count"":{""type"":3,""value"":1.0},""y"":{""type"":3,""value"":17.0},""UP"":{""type"":1,""value"":1.0}},{""name"":{""type"":8,""value"":""area""},""x"":{""type"":3,""value"":102.0},""y"":{""type"":3,""value"":17.0},""pos1"":{""type"":10,""value"":{""X"":{""type"":3,""value"":-27.0},""Y"":{""type"":3,""value"":85.0},""Z"":{""type"":3,""value"":47.0}}},""pos2"":{""type"":10,""value"":{""X"":{""type"":3,""value"":-23.0},""Y"":{""type"":3,""value"":86.0},""Z"":{""type"":3,""value"":45.0}}},""boxType"":{""type"":1,""value"":0.0},""type"":{""type"":8,""value"":""box""}},{""name"":{""type"":8,""value"":""area""},""x"":{""type"":3,""value"":117.0},""y"":{""type"":3,""value"":17.0},""pos1"":{""type"":10,""value"":{""X"":{""type"":3,""value"":-20.0},""Y"":{""type"":3,""value"":91.0},""Z"":{""type"":3,""value"":51.0}}},""pos2"":{""type"":10,""value"":{""X"":{""type"":3,""value"":-20.0},""Y"":{""type"":3,""value"":91.0},""Z"":{""type"":3,""value"":53.0}}},""boxType"":{""type"":1,""value"":0.0},""type"":{""type"":8,""value"":""box""}},{""name"":{""type"":8,""value"":""item_filter""},""x"":{""type"":3,""value"":102.0},""y"":{""type"":3,""value"":28.0},""id"":{""type"":8,""value"":""minecraft:charcoal""},""Count"":{""type"":1,""value"":1.0}},{""name"":{""type"":8,""value"":""item_filter""},""x"":{""type"":3,""value"":117.0},""y"":{""type"":3,""value"":28.0},""id"":{""type"":8,""value"":""minecraft:coal""},""Count"":{""type"":1,""value"":1.0}},{""string"":{""type"":8,""value"":""Power Compressors""},""name"":{""type"":8,""value"":""text""},""x"":{""type"":3,""value"":102.0},""y"":{""type"":3,""value"":6.0}},{""string"":{""type"":8,""value"":""Power Compressors""},""name"":{""type"":8,""value"":""text""},""x"":{""type"":3,""value"":45.0},""y"":{""type"":3,""value"":61.0}},{""name"":{""type"":8,""value"":""jump_sub""},""x"":{""type"":3,""value"":30.0},""y"":{""type"":3,""value"":28.0}},{""string"":{""type"":8,""value"":""Deliver Items""},""name"":{""type"":8,""value"":""text""},""x"":{""type"":3,""value"":45.0},""y"":{""type"":3,""value"":28.0}},{""name"":{""type"":8,""value"":""label""},""x"":{""type"":3,""value"":48.0},""y"":{""type"":3,""value"":102.0}},{""string"":{""type"":8,""value"":""Deliver Items""},""name"":{""type"":8,""value"":""text""},""x"":{""type"":3,""value"":63.0},""y"":{""type"":3,""value"":102.0}},{""name"":{""type"":8,""value"":""inventory_import""},""x"":{""type"":3,""value"":48.0},""count"":{""type"":3,""value"":1.0},""y"":{""type"":3,""value"":113.0},""UP"":{""type"":1,""value"":1.0}},{""name"":{""type"":8,""value"":""area""},""x"":{""type"":3,""value"":63.0},""y"":{""type"":3,""value"":113.0},""pos1"":{""type"":10,""value"":{""X"":{""type"":3,""value"":-34.0},""Y"":{""type"":3,""value"":83.0},""Z"":{""type"":3,""value"":38.0}}},""pos2"":{""type"":10,""value"":{""X"":{""type"":3,""value"":-34.0},""Y"":{""type"":3,""value"":83.0},""Z"":{""type"":3,""value"":38.0}}},""boxType"":{""type"":1,""value"":0.0},""type"":{""type"":8,""value"":""box""}},{""name"":{""type"":8,""value"":""area""},""x"":{""type"":3,""value"":78.0},""y"":{""type"":3,""value"":113.0},""pos1"":{""type"":10,""value"":{""X"":{""type"":3,""value"":12.0},""Y"":{""type"":3,""value"":89.0},""Z"":{""type"":3,""value"":33.0}}},""pos2"":{""type"":10,""value"":{""X"":{""type"":3,""value"":12.0},""Y"":{""type"":3,""value"":89.0},""Z"":{""type"":3,""value"":33.0}}},""boxType"":{""type"":1,""value"":0.0},""type"":{""type"":8,""value"":""box""}},{""name"":{""type"":8,""value"":""inventory_export""},""x"":{""type"":3,""value"":48.0},""count"":{""type"":3,""value"":1.0},""y"":{""type"":3,""value"":135.0},""UP"":{""type"":1,""value"":1.0}},{""name"":{""type"":8,""value"":""area""},""x"":{""type"":3,""value"":63.0},""y"":{""type"":3,""value"":135.0},""pos1"":{""type"":10,""value"":{""X"":{""type"":3,""value"":-16.0},""Y"":{""type"":3,""value"":87.0},""Z"":{""type"":3,""value"":65.0}}},""pos2"":{""type"":10,""value"":{""X"":{""type"":3,""value"":-16.0},""Y"":{""type"":3,""value"":87.0},""Z"":{""type"":3,""value"":65.0}}},""boxType"":{""type"":1,""value"":0.0},""type"":{""type"":8,""value"":""box""}},{""name"":{""type"":8,""value"":""label""},""x"":{""type"":3,""value"":-37.0},""y"":{""type"":3,""value"":70.0}},{""string"":{""type"":8,""value"":""Pick Up Items""},""name"":{""type"":8,""value"":""text""},""x"":{""type"":3,""value"":-22.0},""y"":{""type"":3,""value"":70.0}},{""name"":{""type"":8,""value"":""pickup_item""},""x"":{""type"":3,""value"":-37.0},""y"":{""type"":3,""value"":81.0}},{""name"":{""type"":8,""value"":""area""},""x"":{""type"":3,""value"":-22.0},""y"":{""type"":3,""value"":81.0},""pos1"":{""type"":10,""value"":{""X"":{""type"":3,""value"":-39.0},""Y"":{""type"":3,""value"":98.0},""Z"":{""type"":3,""value"":66.0}}},""pos2"":{""type"":10,""value"":{""X"":{""type"":3,""value"":40.0},""Y"":{""type"":3,""value"":74.0},""Z"":{""type"":3,""value"":17.0}}},""boxType"":{""type"":1,""value"":0.0},""type"":{""type"":8,""value"":""box""}},{""name"":{""type"":8,""value"":""inventory_export""},""x"":{""type"":3,""value"":-37.0},""count"":{""type"":3,""value"":1.0},""y"":{""type"":3,""value"":103.0},""UP"":{""type"":1,""value"":1.0}},{""name"":{""type"":8,""value"":""area""},""x"":{""type"":3,""value"":-22.0},""y"":{""type"":3,""value"":103.0},""pos1"":{""type"":10,""value"":{""X"":{""type"":3,""value"":-16.0},""Y"":{""type"":3,""value"":87.0},""Z"":{""type"":3,""value"":65.0}}},""pos2"":{""type"":10,""value"":{""X"":{""type"":3,""value"":-16.0},""Y"":{""type"":3,""value"":87.0},""Z"":{""type"":3,""value"":65.0}}},""boxType"":{""type"":1,""value"":0.0},""type"":{""type"":8,""value"":""box""}},{""name"":{""type"":8,""value"":""jump_sub""},""x"":{""type"":3,""value"":30.0},""y"":{""type"":3,""value"":39.0}},{""string"":{""type"":8,""value"":""Pick Up Items""},""name"":{""type"":8,""value"":""text""},""x"":{""type"":3,""value"":45.0},""y"":{""type"":3,""value"":39.0}},{""name"":{""type"":8,""value"":""standby""},""x"":{""type"":3,""value"":30.0},""y"":{""type"":3,""value"":72.0}},{""name"":{""type"":8,""value"":""condition_item_inventory""},""x"":{""type"":3,""value"":-32.0},""count"":{""type"":3,""value"":1.0},""y"":{""type"":3,""value"":-11.0},""UP"":{""type"":1,""value"":1.0},""operator"":{""type"":1,""value"":1.0}},{""name"":{""type"":8,""value"":""area""},""x"":{""type"":3,""value"":178.0},""y"":{""type"":3,""value"":-11.0},""pos1"":{""type"":10,""value"":{""X"":{""type"":3,""value"":-16.0},""Y"":{""type"":3,""value"":87.0},""Z"":{""type"":3,""value"":65.0}}},""pos2"":{""type"":10,""value"":{""X"":{""type"":3,""value"":-16.0},""Y"":{""type"":3,""value"":87.0},""Z"":{""type"":3,""value"":65.0}}},""boxType"":{""type"":1,""value"":0.0},""type"":{""type"":8,""value"":""box""}},{""string"":{""type"":8,""value"":""Get Coal""},""name"":{""type"":8,""value"":""text""},""x"":{""type"":3,""value"":-17.0},""y"":{""type"":3,""value"":11.0}},{""name"":{""type"":8,""value"":""label""},""x"":{""type"":3,""value"":163.0},""y"":{""type"":3,""value"":-22.0}},{""string"":{""type"":8,""value"":""Get Coal""},""name"":{""type"":8,""value"":""text""},""x"":{""type"":3,""value"":178.0},""y"":{""type"":3,""value"":-22.0}},{""name"":{""type"":8,""value"":""item_filter""},""x"":{""type"":3,""value"":178.0},""y"":{""type"":3,""value"":0.0},""id"":{""type"":8,""value"":""minecraft:coal""},""Count"":{""type"":1,""value"":1.0}},{""name"":{""type"":8,""value"":""item_filter""},""x"":{""type"":3,""value"":193.0},""y"":{""type"":3,""value"":0.0},""id"":{""type"":8,""value"":""minecraft:charcoal""},""Count"":{""type"":1,""value"":1.0}},{""name"":{""type"":8,""value"":""item_filter""},""x"":{""type"":3,""value"":208.0},""y"":{""type"":3,""value"":0.0},""id"":{""type"":8,""value"":""minecraft:coal_block""},""Count"":{""type"":1,""value"":1.0}},{""name"":{""type"":8,""value"":""item_filter""},""x"":{""type"":3,""value"":13.0},""y"":{""type"":3,""value"":0.0},""id"":{""type"":8,""value"":""minecraft:coal_block""},""Count"":{""type"":1,""value"":1.0}},{""name"":{""type"":8,""value"":""jump_sub""},""x"":{""type"":3,""value"":30.0},""y"":{""type"":3,""value"":50.0}},{""string"":{""type"":8,""value"":""Check Coal""},""name"":{""type"":8,""value"":""text""},""x"":{""type"":3,""value"":45.0},""y"":{""type"":3,""value"":50.0}},{""name"":{""type"":8,""value"":""label""},""x"":{""type"":3,""value"":-32.0},""y"":{""type"":3,""value"":-22.0}},{""string"":{""type"":8,""value"":""Check Coal""},""name"":{""type"":8,""value"":""text""},""x"":{""type"":3,""value"":-17.0},""y"":{""type"":3,""value"":-22.0}},{""name"":{""type"":8,""value"":""item_filter""},""x"":{""type"":3,""value"":132.0},""y"":{""type"":3,""value"":28.0},""id"":{""type"":8,""value"":""minecraft:coal_block""},""Count"":{""type"":1,""value"":1.0}}]}}"
s8RBtY9c,ProgramWithPassword,UrayFenn,C#,Saturday 17th of February 2024 02:11:35 PM CDT,"namespace ProgramWithPassword
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int countAttempt = 5;
            string password = ""мороженка"";
            string userInput;

            for(int i = 1; i <= countAttempt; i++)
            {
                Console.WriteLine(""Введите пароль:"");
                userInput = Console.ReadLine();

                if(password == userInput)
                {
                    Console.WriteLine(""Секретный секрет"");
                    break;
                }
                else
                {
                    int tryCount = countAttempt - i;

                    if(tryCount == 0)
                    {
                        Console.WriteLine(""Доступ заблокирован. превышено количество попыток!"");
                        break;
                    }

                    Console.WriteLine($""Неверный пароль, у вас осталось {tryCount} попыток"");
                }
            }

        }
    }
}"
eVmgZTE4,NameOutput,UrayFenn,C#,Saturday 17th of February 2024 02:01:22 PM CDT,"namespace NameOutput
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(""Введите имя: "");
            string name = Console.ReadLine();
            Console.WriteLine($""Имя: {name}, длина имени: {name.Length}"");
            Console.WriteLine(""Введите символ: "");
            char symbol = Convert.ToChar(Console.ReadLine());
            string characters = """";
            string nameInSymbol = symbol + name + symbol;
            Console.WriteLine($""Cимвол: {symbol}\n"");

            for (int i = 1; i <= nameInSymbol.Length; i += 1)
            {
                characters += symbol;
            }

            Console.WriteLine($""{characters}\n{nameInSymbol}\n{characters} "");
        }
    }
}"
Vnr8xB5N,CurrencyConverter,UrayFenn,C#,Saturday 17th of February 2024 01:56:19 PM CDT,"namespace CurrencyConverter
{
    internal class Program
    {
        static void Main(string[] args)
        {
            float rub = 10000;
            float usd = 5000;
            float eur = 1000;
            float rubToUsd = 54;
            float rubToEur = 62;
            float usdToRub = 17;
            float usdToEur = 4;
            float eurToRub = 13;
            float eurToUsd = 9;
            string desiredOperation;
            float currencyCount;
            bool canExchangeCurrency = true;
            Console.WriteLine(""Обменник валют."");
            Console.WriteLine($""Ваш баланс составляет {rub} Рублей, {usd} Долларов, {eur} Евро."");

            while (canExchangeCurrency)
            {
                const string CurrencyRubToUsd = ""1"";
                const string CurrencyRubToEur = ""2"";
                const string CurrencyUsdToRub = ""3"";
                const string CurrencyUsdToEur = ""4"";
                const string CurrencyEurToRub = ""5"";
                const string CurrencyEurToUsd = ""6"";
                const string CommandExit = ""7"";

                Console.WriteLine(""\nВведите номер желаемой операции:"");
                Console.WriteLine(""1 - обмен рублей на доллары."");
                Console.WriteLine(""2 - обмен рублей на евро."");
                Console.WriteLine(""3 - обмен долларов на рубли."");
                Console.WriteLine(""4 - обмен долларов на евро."");
                Console.WriteLine(""5 - обмен евро на рубли."");
                Console.WriteLine(""6 - обмен евро на доллары."");
                Console.WriteLine(""7 - Покинуть обменник валют.\n"");
                desiredOperation = Console.ReadLine();

                switch (desiredOperation)
                {
                    case CurrencyRubToUsd:
                        Console.WriteLine(""Обмен рублей на доллары.\n Сколько вы хотите обменять?"");
                        currencyCount = Convert.ToSingle(Console.ReadLine());

                        if (rub >= currencyCount)
                        {
                            rub -= currencyCount;
                            usd += currencyCount / rubToUsd;
                            Console.WriteLine($""Ваш баланс составляет {rub} Рублей, {usd} Долларов, {eur} Евро."");
                        }
                        else
                        {
                            Console.WriteLine(""Недостаточное количество рублей"");
                        }

                        break;

                    case CurrencyRubToEur:
                        Console.WriteLine(""Обмен рублей на евро.\n Сколько вы хотите обменять?"");
                        currencyCount = Convert.ToSingle(Console.ReadLine());

                        if (rub >= currencyCount)
                        {
                            rub -= currencyCount;
                            eur += currencyCount / rubToEur;
                            Console.WriteLine($""Ваш баланс составляет {rub} Рублей, {usd} Долларов, {eur} Евро."");
                        }
                        else
                        {
                            Console.WriteLine(""Недостаточное количество рублей"");
                        }

                        break;

                    case CurrencyUsdToRub:
                        Console.WriteLine(""Обмен долларов на рубли.\n Сколько вы хотите обменять?"");
                        currencyCount = Convert.ToSingle(Console.ReadLine());

                        if (usd >= currencyCount)
                        {
                            usd -= currencyCount;
                            rub += currencyCount / usdToRub;
                            Console.WriteLine($""Ваш баланс составляет {rub} Рублей, {usd} Долларов, {eur} Евро."");
                        }
                        else
                        {
                            Console.WriteLine(""Недостаточное количество долларов"");
                        }

                        break;

                    case CurrencyUsdToEur:
                        Console.WriteLine(""Обмен долларов на евро.\n Сколько вы хотите обменять?"");
                        currencyCount = Convert.ToSingle(Console.ReadLine());

                        if (usd >= currencyCount)
                        {
                            usd -= currencyCount;
                            eur += currencyCount / usdToEur;
                            Console.WriteLine($""Ваш баланс составляет {rub} Рублей, {usd} Долларов, {eur} Евро."");
                        }
                        else
                        {
                            Console.WriteLine(""Недостаточное количество долларов"");
                        }

                        break;

                    case CurrencyEurToRub:
                        Console.WriteLine(""Обмен евро на рубли.\n Сколько вы хотите обменять?"");
                        currencyCount = Convert.ToSingle(Console.ReadLine());

                        if (eur >= currencyCount)
                        {
                            eur -= currencyCount;
                            rub += currencyCount / eurToRub;
                            Console.WriteLine($""Ваш баланс составляет {rub} Рублей, {usd} Долларов, {eur} Евро."");
                        }
                        else
                        {
                            Console.WriteLine(""Недостаточное количество евро"");
                        }

                        break;

                    case CurrencyEurToUsd:
                        Console.WriteLine(""Обмен евро на доллары.\n Сколько вы хотите обменять?"");
                        currencyCount = Convert.ToSingle(Console.ReadLine());

                        if (eur >= currencyCount)
                        {
                            eur -= currencyCount;
                            usd += currencyCount / eurToUsd;
                            Console.WriteLine($""Ваш баланс составляет {rub} Рублей, {usd} Долларов, {eur} Евро."");
                        }
                        else
                        {
                            Console.WriteLine(""Недостаточное количество евро"");
                        }

                        break;

                    case CommandExit:
                        Console.WriteLine(""Нажмите любую кнопку для выхода из программы"");
                        Console.ReadKey();
                        canExchangeCurrency = false;
                        break;

                    default:
                        Console.WriteLine(""Выбрана неверная операция"");
                        break;
                }
            }
        }
    }
}"
jxsd1vSt,Algoritmi lezione 10,fcamuso,C#,Saturday 17th of February 2024 01:44:39 PM CDT,"//raccolta funzioni aggiornata (a seguire il main)
//utility.h  (include brutale)
string genera_stringa_casuale(int lunghezza) {
    static const string alfabeto =
        ""0123456789""
        ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""
        ""abcdefghijklmnopqrstuvwxyz"";

    string risultato="""";

    for (int i = 0; i < lunghezza; ++i)
        risultato += alfabeto[ rand()% alfabeto.length() ];


    return risultato;
}


void stampa_vettore_stringhe(string v[], int dimensione)
{
  for (int i=0; i<dimensione; i++)
    cout << v[i] << endl;
}

void carica_vettore_interi(unsigned long v[], long dimensione)
{
   mt19937 twister{time(0)};

  for (long i=0; i<dimensione; i++)
    v[i] = twister();

}

void mischia_vettore_interi(unsigned long v[], long dimensione)
{
  mt19937 twister{time(0)};

  for (long i=0; i<dimensione/2; i++)
   swap( v[twister()%dimensione], v[twister()%dimensione] );
}

void carica_vettore_stringhe(string v[], int dimensione, int lunghezza=100)
{
  for (int i=0; i<dimensione; i++)
    v[i] = genera_stringa_casuale(lunghezza);
}

void ordina_vettore_stringhe(string v[], int QUANTI_ELEMENTI, bool A_Z=true)
{
 //ordino dal più piccolo al più grande
  for (int i=0; i<QUANTI_ELEMENTI-1; i++)
    for (int j=i+1; j<QUANTI_ELEMENTI; j++)
      if (A_Z && v[j]<v[i])
          swap(v[i], v[j]);
      else
        if (!A_Z && v[j]>v[i])
          swap(v[i], v[j]);
}


void ordina_vettore_interi_senza_segno(unsigned long v[], int QUANTI_ELEMENTI, bool A_Z=true)
{
 //ordino dal più piccolo al più grande
  for (int i=0; i<QUANTI_ELEMENTI-1; i++)
    for (int j=i+1; j<QUANTI_ELEMENTI; j++)
      if (A_Z && v[j]<v[i])
          swap(v[i], v[j]);
      else
        if (!A_Z && v[j]>v[i])
          swap(v[i], v[j]);
}

enum Stato {START, STOP};
auto Cronometro(Stato stato = Stato::START)
{
  static std::chrono::time_point<std::chrono::system_clock> inizio;
  static std::chrono::time_point<std::chrono::system_clock> fine;

  if (stato == Stato::START)
  {
    inizio = chrono::high_resolution_clock::now();
    fine = inizio;
  }
  else
    fine = chrono::high_resolution_clock::now();


  return chrono::duration_cast<std::chrono::milliseconds>(fine - inizio).count();
}
//******************************************************************************


//MAIN VERSIONE STRINGHE (A SEGUIRE QUELLO PER GLI INTERI)
//main.cpp
//scansione lineare ma a passo due

#include <iostream>
#include <chrono>
#include <ctime>
#include <random>

using namespace std;
#include ""../utility_vettori.h""



string cerca_stringa_min_max(string v[], int dimensione)
{
  string stringa_max = v[0];
  string stringa_min = v[0];

  for (int i=1; i<dimensione; i++)
    if (v[i]>stringa_max)
      stringa_max = v[i];
    else
      if (v[i]<stringa_min)
        stringa_min = v[i];

  return stringa_min + ""/"" + stringa_max;
}


string cerca_stringa_min_max_SMART(string v[], int dimensione)
{

  string stringa_max = """";
  string stringa_min = """";
  int inizia_da = -1;

  //ipotesi semplificatica: il numero di elementi è pari
//  if (dimensione%2 ==  0)  //numero pari di elementi
//  {
//    if (v[0]<v[1])
//    {
//      stringa_min = v[0];
//      stringa_max = v[1];
//    }
//    else
//    {
//      stringa_min = v[1];
//      stringa_max = v[0];
//    }
//    inizia_da = 2;
//  }
//  else  //numero dispari di elementi
//  {
//    stringa_max = v[0];
//    stringa_min = v[0];
//
//    inizia_da = 1;
//  }

  if (v[0]<v[1])
  {
    stringa_min = v[0];
    stringa_max = v[1];
  }
  else
  {
    stringa_min = v[1];
    stringa_max = v[0];
  }
  inizia_da = 2;

  for (int i=inizia_da; i<dimensione-1; i+=2)
    if (v[i]<v[i+1])
    {
      if (v[i] < stringa_min)
        stringa_min = v[i];

      if (v[i+1] > stringa_max)
        stringa_max = v[i+1];
    }
    else
    {
      if (v[i] > stringa_max)
        stringa_max = v[i];

      if (v[i+1] < stringa_min)
        stringa_min = v[i+1];
    }


  return stringa_min + ""/"" + stringa_max;
}

const int QUANTI_ELEMENTI = 500;
const int LUNGHEZZA = 10000;
string v[QUANTI_ELEMENTI];

int main()
{

  carica_vettore_stringhe(v, QUANTI_ELEMENTI, LUNGHEZZA);

  //sbilancio in favore di questo algoritmo
  for (int i=0; i<QUANTI_ELEMENTI; i++)
    v[i].replace(0, 5000, string(5000, 'M'));
//
//  v[rand()%QUANTI_ELEMENTI].replace(LUNGHEZZA - 100, 10, string(10, '0'));
//  v[rand()%QUANTI_ELEMENTI].replace(LUNGHEZZA - 100, 10, string(10, 'z'));
  ordina_vettore_stringhe(v, QUANTI_ELEMENTI, false); //false -> in ordine decrescente

  int numero_run = 1;
  int ripetizioni_per_run = 10000;

  string s="""";
  Cronometro(Stato::START);

  for(int conta_run =0; conta_run<numero_run; conta_run++)
    for (int conta=0; conta<ripetizioni_per_run; conta++)
      s = cerca_stringa_min_max(v, QUANTI_ELEMENTI);

  cout << ""Tempo impiegato: "" << Cronometro(Stato::STOP) << endl;


  Cronometro(Stato::START);

  for(int conta_run =0; conta_run<numero_run; conta_run++)
    for (int conta=0; conta<ripetizioni_per_run; conta++)
      s = cerca_stringa_min_max_SMART(v, QUANTI_ELEMENTI);

  cout << ""Tempo impiegato (SMART): "" << Cronometro(Stato::STOP) << endl;


  return 0;
}
//*************************************************

//VERSIONE CON GLI INTERI
//main.cpp
//scansione lineare ma a passo due

#include <iostream>
#include <chrono>
#include <ctime>
#include <random>

using namespace std;
#include ""../utility_vettori.h""

string cerca_int_min_max(unsigned long v[], long dimensione)
{
  unsigned long int_max = v[0];
  unsigned long int_min = v[0];

  for (long i=1; i<dimensione; i++)
    if (v[i]>int_max)
      int_max= v[i];
    else
      if (v[i]<int_min)
        int_min = v[i];

  return to_string(int_min) + ""/"" + to_string(int_max);
}

string cerca_int_min_max_SMART(unsigned long v[], long dimensione)
{

  unsigned long int_max;
  unsigned long int_min;
  long inizia_da = -1;


//  if (dimensione%2 ==  0)  //numero pari di elementi
//  {
//    if (v[0]<v[1])
//    {
//      int_min = v[0];
//      int_max = v[1];
//    }
//    else
//    {
//      int_min = v[1];
//      int_max = v[0];
//    }
//    inizia_da = 2;
//  }
//  else  //numero dispari di elementi
//  {
//    int_max = v[0];
//    int_min = v[0];
//
//    inizia_da = 1;
//  }


  if (v[0]<v[1])
  {
    int_min = v[0];
    int_max = v[1];
  }
  else
  {
    int_min = v[1];
    int_max = v[0];
  }
  inizia_da = 2;

  for (long i=inizia_da; i<dimensione-1; i+=2)
    if (v[i]<v[i+1])
    {
      if (v[i] < int_min)
        int_min = v[i];

      if (v[i+1] > int_max)
        int_max = v[i+1];
    }
    else
    {
      if (v[i] > int_max)
        int_max = v[i];

      if (v[i+1] < int_min)
        int_min = v[i+1];
    }


  return to_string(int_min) + ""/"" + to_string(int_max);
}

const long QUANTI_ELEMENTI = 50000;
unsigned long v[QUANTI_ELEMENTI];

int main()
{
  carica_vettore_interi(v, QUANTI_ELEMENTI);
  ordina_vettore_interi_senza_segno(v, QUANTI_ELEMENTI, false);

  long numero_run = 1;
  long ripetizioni_per_run = 10000;

  string s="""";
  Cronometro(Stato::START);

  for(long conta_run =0; conta_run<numero_run; conta_run++)
    for (long conta=0; conta<ripetizioni_per_run; conta++)
      cerca_int_min_max(v, QUANTI_ELEMENTI);

  cout << ""Tempo impiegato: "" << Cronometro(Stato::STOP) << endl;
  //cout << ""MIN/MAX: "" << s << endl;


  Cronometro(Stato::START);

  for(long conta_run =0; conta_run<numero_run; conta_run++)
    for (long conta=0; conta<ripetizioni_per_run; conta++)
      cerca_int_min_max_SMART(v, QUANTI_ELEMENTI);

  cout << ""Tempo impiegato (SMART): "" << Cronometro(Stato::STOP) << endl;
  //cout << ""MIN/MAX: "" << s << endl;

  return 0;
}

"
GcvtpkYh,task3_v1,stupid_pro,Pascal,Saturday 17th of February 2024 01:22:22 PM CDT,"program t3;

type 
    function_t = function(x: double): double;

{$F+} 

{функция 1}
function func1(x: double): double;
begin
    func1 := 3 * (0.5 / (x + 1) + 1);
end;

{первая производная функции 1}
function func1prime1 (x: double): double;
begin
    func1prime1 := -6 / ((2 * x + 2) * (2 * x + 2));
end;

{вторая производная функции 1}
function func1prime2 (x: double): double;
begin
    func1prime2 := 3 * ((x + 1) * (x + 1) * (x + 1));
end;


{функция 2}
function func2 (x: double): double;
begin
    func2 := 2.5 * x - 9.5;
end;

{первая производная функции 2}
function func2prime1 (x: double): double;
begin
    func2prime1 := 2.5;
end;

{вторая производная функции 2}
function func2prime2 (x: double): double;
begin
    func2prime2 := 0;
end;


{функция 3}
function func3 (x: double): double;
begin
    func3 := 5 / x;
end;

{первая производная функции 3}
function func3prime1 (x: double): double;
begin
    func3prime1 := -5 / (x * x);
end;

{вторая производная функции 3}
function func3prime2 (x: double): double;
begin
    func3prime2 := 10 / (x * x * x);
end;

{функция, которая находит абсциссу точки пересечения функций; 
функция1, первая производная функции1, вторая производная функции1,
функция2, первая производная функции2, вторая производная функции2,
начало, конец, точность
h(x) = f(x) - g(x)}
function root(f, f1, f2: function_t; g, g1, g2: function_t; a, b: double; eps1: double): double;
var x, x0: double;
begin
    if (f(a) - g(a)) * (f2(a) - g2(a)) > 0 then 
    begin
        x0 := a;
    end
    else if (f(b) - g(b)) * (f2(b) - g2(b)) > 0 then 
    begin
        x0 := b;
    end
    else writeln('Неверный интервал');

    x := x0 - (f(x0) - g(x0)) / (f1(x0) - g1(x0));

    while abs(x - x0) >= eps1 do
    begin
        x0 := x - (f(x) - g(x)) / (f1(x) - g1(x));
        x := x0 - (f(x0) - g(x0)) / (f1(x0) - g1(x0))
    end;

    root := x;
end;


// function root(f: function_t; g: function_t; a, b: double; eps1: double): double;
// var x_prev, x, c: double;

// begin
//     x_prev := a;
//     x := b;
//     c := 0;
//     while (abs(x - x_prev) >= eps1) do 
//     begin
//         c := x;
//         x := x - ((f(x) - g(x))) * (x - x_prev) 
//         / ((f(x) - g(x)) - (f(x_prev) - g(x_prev)));
//         x_prev := c;
//     end;
//     root := x;
// end;

function integral(f: function_t; a, b: double; eps2: double): double;
{число разбиений - n}
var n: integer = 4;
    i: integer;
    h, firstIntegral, secondIntegral, s, aCopy: double;
begin

repeat
    n := n + 1;

    h := (b - a) / n;
    firstIntegral := 0;
    aCopy := a;

    for i := 1 to n do
    begin
        s := (f(aCopy) + f(aCopy + h)) / 2 * h;
        firstIntegral := firstIntegral + s;
        aCopy := aCopy + h;
    end;

    h := (b - a) / (2 * n);
    secondIntegral := 0;
    aCopy := a;

    for i := 1 to (2 * n) do
    begin
        s := (f(aCopy) + f(aCopy + h)) / 2 * h;
        secondIntegral := secondIntegral + s;
        aCopy := aCopy + h;
    end;

until (1 / 3 * abs(firstIntegral - secondIntegral) <= eps2);

    integral := secondIntegral;
end;

{СДЕЛАТЬ, ЧТОБ ЭПСИЛОНЫ ВВОДИЛИСЬ С КЛАВИАТУРЫ}
{коориднаты абсцисс точек пересечения}
var x1, x2, x3: double;
{вычисленные значения интегралов соответсвующих функций}
    i1, i2, i3, i: double;

begin
    x1 := root(@func1, @func1prime1, @func1prime2, @func3, @func3prime1, @func3prime2, 1, 2, 0.0001);
    x2 := root(@func2, @func2prime1, @func2prime2, @func3, @func3prime1, @func3prime2, 4, 5, 0.0001);
    x3 := root(@func1, @func1prime1, @func1prime2, @func2, @func2prime1, @func2prime2, 5, 5.5, 0.0001);

   write(x1, x2, x3); 

   writeln(integral(@func1, x1, x3, 0.001));
   writeln(integral(@func2, x2, x3, 0.001));
   writeln(integral(@func3, x1, x2, 0.001));
   i1 := integral(@func1, x1, x3, 0.001);
   i2 := integral(@func2, x2, x3, 0.001);
   i3 := integral(@func3, x1, x2, 0.001);
   {площадь криволинейного треугольника}
   i := i1 - i2 - i3;
end."
Z9DWpy14,ConsoleMenu,UrayFenn,C#,Saturday 17th of February 2024 01:00:37 PM CDT,"namespace ConsoleMenu
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string ComandSetName = ""1"";
            const string ComandSumNumbers = ""2"";
            const string ComandShowRandomNumbers = ""3"";
            const string ComandClearConsole = ""4"";
            const string ComandExitProgram = ""5"";

            bool isWork = true;
            string userInput;

            while (isWork)
            {
                Console.WriteLine(""Введите номер команды:"");
                Console.WriteLine($""{ComandSetName} - Ввести свое имя"");
                Console.WriteLine($""{ComandSumNumbers} - Сложение 2х чисел"");
                Console.WriteLine($""{ComandShowRandomNumbers} - Показать рандомное число"");
                Console.WriteLine($""{ComandClearConsole} - Очистить консоль"");
                Console.WriteLine($""{ComandExitProgram} - Выход из программы"");
                userInput = Console.ReadLine();

                switch (userInput)
                {
                    case ComandSetName:
                        Console.WriteLine(""Введите ваше имя:"");
                        string firstName = Console.ReadLine();
                        Console.WriteLine(""Введите вашу фамилию"");
                        string lastName = Console.ReadLine();
                        Console.WriteLine($""\nВас зовут: {firstName} {lastName}\n"");
                        break;

                    case ComandSumNumbers:
                        Console.WriteLine(""Введите первое число:"");
                        int number1 = Convert.ToInt32(Console.ReadLine());
                        Console.WriteLine(""Введите второе число:"");
                        int number2 = Convert.ToInt32(Console.ReadLine());
                        int sumNumbers = number1 + number2;
                        Console.WriteLine($""\nСумма чисел равна: {sumNumbers}\n"");
                        break;

                    case ComandShowRandomNumbers:
                        Random random = new Random();
                        Console.WriteLine(""Введите минимальное значение:"");
                        int minValue = Convert.ToInt32(Console.ReadLine());
                        Console.WriteLine(""Введите максимальное значение:"");
                        int maxValue = Convert.ToInt32(Console.ReadLine());
                        int number = random.Next(minValue, maxValue);
                        Console.WriteLine($""\nВаше случайное число: {number}\n"");
                        break;

                    case ComandClearConsole:
                        Console.Clear();
                        break;

                    case ComandExitProgram:
                        isWork = false;
                        Console.WriteLine(""Программа завершена."");
                        break;

                    default:
                        Console.WriteLine(""Такой команды нет.\n"");
                        break;
                }
            }

            Console.ReadKey();
        }
    }
}"
9v0UyeCn,Test code 2 for app,nayeem629,HTML,Saturday 17th of February 2024 12:49:33 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
  <head>
    <meta charset=""UTF-8"" />
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"" />

    <link
      href=""https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900&amp;subset=latin,latin-ext""
      rel=""stylesheet""
      type=""text/css""
    />

    <script
      src=""https://code.jquery.com/jquery-3.7.1.min.js""
      integrity=""sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=""
      crossorigin=""anonymous""
    ></script>

    <script
      src=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js""
      integrity=""sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL""
      crossorigin=""anonymous""
    ></script>

    <link
      rel=""stylesheet""
      href=""https://cdn.jsdelivr.net/npm/sweetalert2@8.2.4/dist/sweetalert2.min.css""
    />

    <script src=""https://cdn.jsdelivr.net/npm/sweetalert2@11""></script>

    <script src=""https://cdn.tailwindcss.com""></script>

    <style>
      body {
        font-family: ""Montserrat"", sans-serif;
      }

      .upload-file {
        display: block !important;
        width: 100% !important;
        font-size: 0.875rem !important; /* Adjust this value as needed */
        color: #111827 !important; /* Adjust to the desired gray shade */
        border-width: 1px !important;
        border-style: solid !important;
        border-color: #d1d5db !important; /* Adjust to the desired gray shade */
        border-radius: 0.5rem !important; /* Adjust this value as needed */
        cursor: pointer !important;
        background-color: #f9fafb !important; /* Adjust to the desired gray shade */
        outline: none !important;
        padding: 5px 10px !important;
      }

      .animate {
        opacity: 0;
        transition: opacity 0.5s ease-in-out;
      }

      .visible {
        opacity: 1;
      }
    </style>
    <title>Contact Us</title>
  </head>
  <body>
    <div class=""container contactus-div"">
      <section>
        <div class=""py-6 lg:py-16 px-4 mx-auto max-w-screen-md"">
          <p
            class=""mb-8 lg:mb-16 font-light text-center text-gray-500 sm:text-xl""
          >
            Got a technical issue? Want to send feedback about a feature? Got a
            problem or need a request? Let us know.
          </p>

          <a href=""https://hgconnect.homeschoolglobal.com/contact-us-entries/"">
            <button
              type=""button""
              class=""text-gray-900 bg-gray-100 hover:bg-gray-200 hover:text-gray-800 focus:ring-4 focus:outline-none focus:ring-gray-100 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center mr-2 mb-2 rounded-lg border border-[#9167AC]""
            >
              View Tickets
            </button>
          </a>

          <form
            id=""contactForm""
            method=""POST""
            enctype=""multipart/form-data""
            class=""space-y-8""
          >
            <input type=""hidden"" name=""categoryIds"" id=""categoryIds"" />
            <div>
              <label
                for=""name""
                class=""block mb-2 text-sm font-medium text-gray-900""
                >Your name</label
              >
              <input
                type=""name""
                id=""name""
                name=""name""
                class=""shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5""
                placeholder=""John Doe""
                autocomplete=""name""
                required
              />
            </div>

            <div>
              <label
                for=""email""
                class=""block mb-2 text-sm font-medium text-gray-900""
                >Your email</label
              >
              <input
                type=""email""
                id=""email""
                name=""email""
                class=""shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5""
                placeholder=""name@example.com""
                autocomplete=""email""
                required
              />
            </div>

            <div>
              <label
                for=""phone""
                class=""block mb-2 text-sm font-medium text-gray-900""
                >Your phone</label
              >
              <input
                type=""phone""
                id=""phone""
                name=""phone""
                class=""shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5""
                placeholder=""(+63)-9123123123""
                required
              />
            </div>

            <div>
              <label
                for=""category""
                class=""block mb-2 text-sm font-medium text-gray-900""
                >Choose Category</label
              >
              <select
                id=""category""
                name=""category""
                class=""bg-gray-50 border border-gray-300 text-gray-500 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5""
                required
              >
                <option selected=""selected"" value="""">Select an option</option>
                <option value=""36"">Academics &amp; Testing</option>
                <option value=""48"">Enrollment &amp; Payment</option>
                <option value=""39"">HGPH Other Concerns</option>
                <option value=""5"">HGPH Shine</option>
                <option value=""8"">Learning Plus</option>
                <option value=""25"">Records or Documents</option>
                <option value=""38"">Training &amp; Engagement</option>
              </select>
            </div>

            <div
              id=""loading-categories""
              class=""hidden items-center justify-start pt-2 rounded-lg""
            >
              <div
                class=""px-3 py-1 text-xs font-medium leading-none text-center text-blue-800 bg-blue-200 rounded-full animate-pulse""
              >
                Loading Categories...
              </div>
            </div>

            <div id=""additional-dropdowns""></div>

            <div>
              <label
                for=""subject""
                class=""block mb-2 text-sm font-medium text-gray-900""
                >Subject</label
              >
              <input
                type=""text""
                id=""subject""
                name=""subject""
                class=""block p-3 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 shadow-sm focus:ring-primary-500 focus:border-primary-500""
                placeholder=""Let us know how we can help you""
                required
              />
            </div>

            <div class=""sm:col-span-2"">
              <label
                for=""message""
                class=""block mb-2 text-sm font-medium text-gray-900""
                >Your message</label
              >
              <textarea
                id=""message""
                name=""message""
                rows=""6""
                class=""block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg shadow-sm border border-gray-300 focus:ring-primary-500 focus:border-primary-500""
                placeholder=""Leave a comment...""
                required
              ></textarea>
            </div>

            <div class=""d-flex"">
              <button
                type=""button""
                id=""cc-btn""
                class=""py-2.5 px-5 mr-2 mb-2 text-xs font-medium text-gray-500 hover:outline-none bg-white rounded-full border border-gray-200""
              >
                Add CC
              </button>
              <button
                type=""button""
                id=""bcc-btn""
                class=""py-2.5 px-5 mr-2 mb-2 text-xs font-medium text-gray-500 hover:outline-none bg-white rounded-full border border-gray-200""
              >
                Add BCC
              </button>
              <button
                type=""button""
                id=""files-btn""
                class=""py-2.5 px-5 mr-2 mb-2 text-xs font-medium text-gray-500 hover:outline-none bg-white rounded-full border border-gray-200""
              >
                Add File
              </button>
            </div>

            <div id=""div-cc"" class=""animate"" hidden>
              <label
                for=""cc""
                class=""block mb-2 text-sm font-medium text-gray-900""
                >CC</label
              >
              <input
                type=""text""
                id=""cc""
                class=""block p-3 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 shadow-sm focus:ring-primary-500 focus:border-primary-500""
                placeholder=""Add your CC""
              />
              <p
                id=""remove-cc""
                class=""mt-2 text-xs pl-2 text-red-600 underline cursor-pointer""
              >
                Remove CC
              </p>
            </div>

            <div id=""div-bcc"" class=""animate"" hidden>
              <label
                for=""bcc""
                class=""block mb-2 text-sm font-medium text-gray-900""
                >BCC</label
              >
              <input
                type=""text""
                id=""bcc""
                class=""block p-3 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 shadow-sm focus:ring-primary-500 focus:border-primary-500""
                placeholder=""Add your BCC""
              />
              <p
                id=""remove-bcc""
                class=""mt-2 text-xs pl-2 text-red-600 underline cursor-pointer""
              >
                Remove BCC
              </p>
            </div>

            <div id=""div-files"" class=""animate"" hidden>
              <label
                class=""block mb-2 text-sm font-medium text-gray-900""
                for=""multiple_files""
                >Upload multiple files</label
              >
              <input
                class=""upload-file""
                id=""attachments[]""
                name=""attachments[]""
                type=""file""
                multiple
              />
              <p
                id=""remove-files""
                class=""mt-2 text-xs pl-2 text-red-600 underline cursor-pointer""
              >
                Remove Files
              </p>
            </div>

            <div class=""flex items-center mb-4"">
              <input
                id=""default-checkbox""
                type=""checkbox""
                value=""""
                class=""w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-violet-500""
                required
              />
              <label
                for=""default-checkbox""
                class=""ml-2 text-sm font-medium text-gray-600""
                >I consent to collecting my personal information for your
                support team to communicate.</label
              >
            </div>

            <button
              type=""submit""
              id=""submitForm""
              class=""py-3 px-5 text-sm font-medium text-center text-[#9167AC] rounded-lg border border-[#9167AC] bg-primary-700 w-full hover:bg-primary-800 focus:ring-4 focus:outline-none focus:ring-primary-300""
            >
              Create Ticket
            </button>
          </form>

          <ul
            id=""submitLoading""
            class=""max-w-md space-y-2 text-gray-500 list-inside pt-4 hidden""
          >
            <li class=""flex items-center"">
              <div role=""status"">
                <svg
                  aria-hidden=""true""
                  class=""w-5 h-5 mr-2 text-gray-200 animate-spin fill-[#9167AC]""
                  viewBox=""0 0 100 101""
                  fill=""none""
                  xmlns=""http://www.w3.org/2000/svg""
                >
                  <path
                    d=""M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z""
                    fill=""currentColor""
                  />
                  <path
                    d=""M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z""
                    fill=""currentFill""
                  />
                </svg>
                <span class=""sr-only"">Loading...</span>
              </div>
              <p class=""text-sm font-medium text-gray-500"">
                Please wait while we submit your concern
              </p>
            </li>
          </ul>

          <div
            id=""showErrorNotice""
            class=""hidden p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-50""
            role=""alert""
          >
            <svg
              class=""flex-shrink-0 inline w-4 h-4 mr-3 mt-[2px]""
              aria-hidden=""true""
              xmlns=""http://www.w3.org/2000/svg""
              fill=""currentColor""
              viewBox=""0 0 20 20""
            >
              <path
                d=""M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z""
              />
            </svg>
            <span class=""sr-only"">Danger</span>
            <div>
              <span class=""font-medium""
                >Oops, an error occured while your data is being submit:</span
              >
              <ul class=""mt-1.5 ml-4 list-disc list-inside"">
                <li>
                  Kindly please
                  <a
                    href=""#""
                    class=""underline hover:underline""
                    onclick=""location.reload();""
                    >reload the page</a
                  >, and retry again.
                </li>
                <li>Ensure that all fields are filled.</li>
                <li>Make sure your network is stable.</li>
              </ul>
            </div>
          </div>
        </div>
      </section>
    </div>

    <script>
      $(document).ready(function ($) {
        $.ajax({
          url: ""https://o6u.311.myftpupload.com/wp-admin/admin-ajax.php"",
          type: ""POST"",
          data: {
            action: ""get_current_user_info"",
          },
          success: function (response) {
            const user = JSON.parse(response);
            console.log(""RESPONSE: "" + response);
            $(""#email"").val(user.email);
            $(""#name"").val(user.name);
          },
          error: function (response) {
            console.log(""ERROR: "" + JSON.stringify(response));
          }
        });

        // const url = ""http://127.0.0.1:8000""; // local
        const url = ""https://hgc-api.homeschoolglobal.com""; // live

        // Create an empty object to store the transformed data for custom field values
        var transformedData = {};

        function showSectionOnClick(btnId, divId) {
          $(btnId).on(""click"", function () {
            $(divId).prop(""hidden"", false);
            setTimeout(function () {
              $(divId).addClass(""visible"");
            }, 5);
          });
        }

        function hideOrShowLoading(id, hideBool) {
          $(""#"" + id)
            .toggleClass(""hidden"", !hideBool)
            .toggleClass(""flex"", hideBool);
        }

        function successForm() {
          Swal.fire({
            icon: ""success"",
            title: ""Your message has been successfully sent!"",
            text: ""We will message you as soon as we can, kindly wait for 24-48hrs. Thank you."",
            showConfirmButton: true,
            confirmButtonText: ""Got it"",
            confirmButtonColor: ""#7aa240"",
          });
        }

        showSectionOnClick(""#cc-btn"", ""#div-cc"");
        showSectionOnClick(""#bcc-btn"", ""#div-bcc"");
        showSectionOnClick(""#files-btn"", ""#div-files"");

        $(""#remove-cc"").on(""click"", function () {
          $(""#cc"").val("""");
          $(""#div-cc"").prop(""hidden"", true);
        });

        $(""#remove-bcc"").on(""click"", function () {
          $(""#bcc"").val("""");
          $(""#div-bcc"").prop(""hidden"", true);
        });

        $(""#remove-files"").on(""click"", function () {
          $(""#attachments"").val("""");
          $(""#div-files"").prop(""hidden"", true);
        });

        $(""#category"").change(function () {
          hideOrShowLoading(""loading-categories"", true);
          $(""#additional-dropdowns"").hide();

          var categoryVal = $(this).val();
          if (categoryVal != """") {
            $.ajax({
              url: url + ""/api/happyfox/categories"",
              type: ""POST"",
              data: { category: categoryVal },
              headers: {
                AuthorizationKey: ""2DsAxccsdqDSvA2DA88v902121f"",
              },
              success: function (response) {
                hideOrShowLoading(""loading-categories"", false);
                $(""#additional-dropdowns"").show();

                // const result = JSON.parse(response);
                const dropdowns = response.visible;

                var inputs = dropdowns.flatMap((element) =>
                  element.map(
                    (result) => `
                        <div class=""mt-8"">
                            <label for=""t-cf-${
                              transformedData[result.name].id
                            }"" class=""block mb-2 text-sm font-medium text-gray-900"">${
                      result.name
                    }</label>
                            ${
                              result.type === ""d""
                                ? `<select id=""t-cf-${
                                    transformedData[result.name].id
                                  }"" name=""t-cf-${
                                    transformedData[result.name].id
                                  }"" class=""t-cf bg-gray-50 border border-gray-300 text-gray-500 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"" required>
                                    <option selected=""selected"">Select an option</option>
                                    ${transformedData[result.name].choices
                                      .map(
                                        (element) =>
                                          `<option value=""${element.id}"">${element.text}</option>`
                                      )
                                      .join("""")}
                                </select>`
                                : `<input type=""text"" id=""t-cf-${
                                    transformedData[result.name].id
                                  }"" name=""t-cf-${
                                    transformedData[result.name].id
                                  }"" class=""t-cf block p-3 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 shadow-sm focus:ring-primary-500 focus:border-primary-500"" placeholder=""Input here..."" required>`
                            }
                        </div>`
                  )
                );

                $(""#additional-dropdowns"").html(inputs.join(""""));

                // example format result: t-cf-38,t-cf-14
                var category_Ids = $("".t-cf"")
                  .map(function () {
                    return this.id;
                  })
                  .get()
                  .join("","");

                // insert in hidden input
                $(""#categoryIds"").val(category_Ids);
              },
              error: function (xhr, status, error) {
                console.error(error); // log any errors
              },
            });
          } else {
            hideOrShowLoading(""loading-categories"", false);
          }
        });

        $(""#contactForm"").submit(function (event) {
          event.preventDefault(); // Prevent default form submission
          hideOrShowLoading(""submitLoading"", true);
          $(""#submitForm"").prop(""disabled"", true);

          var formData = new FormData(this); // Create FormData object

          $.ajax({
            url: url + ""/api/happyfox/create-ticket"", // Your form's action attribute
            type: ""POST"", // Your form's method attribute
            data: formData,
            processData: false,
            contentType: false,
            headers: {
              AuthorizationKey: ""2DsAxccsdqDSvA2DA88v902121f"",
            },
            success: function (response) {
              hideOrShowLoading(""submitLoading"", false);

              if (response.id) {
                successForm();

                $(""input, select, textarea"").val("""").trigger(""change"");
              } else {
                $(""#showErrorNotice"").addClass(""flex"");
                $(""#showErrorNotice"").removeClass(""hidden"");
              }
            },
            error: function (xhr, status, error) {
              // Handle error response
              hideOrShowLoading(""submitLoading"", false);
              $(""#showErrorNotice"").addClass(""flex"");
              $(""#showErrorNotice"").removeClass(""hidden"");
            },
          });
        });

        $.ajax({
          url: url + ""/api/happyfox/get-custom-fields-values"",
          type: ""POST"",
          headers: {
            AuthorizationKey: ""2DsAxccsdqDSvA2DA88v902121f"",
          },
          success: function (response) {
            const customFields = response;

            // Loop through the JSON data and use the ""name"" property as the key
            for (var i = 0; i < customFields.length; i++) {
              var item = customFields[i];
              var name = item.name;

              // Assign the item object to the transformedData using the ""name"" as the key
              transformedData[name] = item;
            }
          },
          error: function (xhr, status, error) {
            console.error(error); // log any errors
          },
        });
      });
    </script>
  </body>
</html>"
nbU3MYL6,test code 1 for app,nayeem629,HTML,Saturday 17th of February 2024 12:48:31 PM CDT,"<style>
        body{
height: 100px !important;
overflow: scroll !important;
overflow-y: scroll !important;
	margin:0;
	color:#6a6f8c;
	background:#c8c8c8;
	font:600 16px/18px 'Open Sans',sans-serif;
}
*,:after,:before{box-sizing:border-box}
.clearfix:after,.clearfix:before{content:'';display:table}
.clearfix:after{clear:both;display:block}
a{color:inherit;text-decoration:none}

.login-wrap{
	width:100%;
	margin:auto;
	max-width:525px;
	min-height:670px;
	position:relative;
	background:url(https://raw.githubusercontent.com/khadkamhn/day-01-login-form/master/img/bg.jpg) no-repeat center;
	box-shadow:0 12px 15px 0 rgba(0,0,0,.24),0 17px 50px 0 rgba(0,0,0,.19);
}
.login-html{
	width:100%;
	height:100%;
	position:absolute;
	padding:90px 70px 50px 70px;
	background:rgba(40,57,101,.9);
}
.login-html .sign-in-htm,
.login-html .sign-up-htm{
	top:0;
	left:0;
	right:0;
	bottom:0;
	position:absolute;
	transform:rotateY(180deg);
	backface-visibility:hidden;
	transition:all .4s linear;
}
.login-html .sign-in,
.login-html .sign-up,
.login-form .group .check{
	display:none;
}
.login-html .tab,
.login-form .group .label,
.login-form .group .button{
	text-transform:uppercase;
}
.login-html .tab{
	font-size:22px;
	margin-right:15px;
	padding-bottom:5px;
	margin:0 15px 10px 0;
	display:inline-block;
	border-bottom:2px solid transparent;
}
.login-html .sign-in:checked + .tab,
.login-html .sign-up:checked + .tab{
	color:#fff;
	border-color:#1161ee;
}
.login-form{
	min-height:345px;
	position:relative;
	perspective:1000px;
	transform-style:preserve-3d;
}
.login-form .group{
	margin-bottom:15px;
}
.login-form .group .label,
.login-form .group .input,
.login-form .group .button{
	width:100%;
	color:#fff;
	display:block;
}
.login-form .group .input,
.login-form .group .button{
	border:none;
	padding:15px 20px;
	border-radius:25px;
	background:rgba(255,255,255,.1);
}
.login-form .group input[data-type=""password""]{
	text-security:circle;
	-webkit-text-security:circle;
}
.login-form .group .label{
	color:#aaa;
	font-size:12px;
}
.login-form .group .button{
	background:#1161ee;
}
.login-form .group label .icon{
	width:15px;
	height:15px;
	border-radius:2px;
	position:relative;
	display:inline-block;
	background:rgba(255,255,255,.1);
}
.login-form .group label .icon:before,
.login-form .group label .icon:after{
	content:'';
	width:10px;
	height:2px;
	background:#fff;
	position:absolute;
	transition:all .2s ease-in-out 0s;
}
.login-form .group label .icon:before{
	left:3px;
	width:5px;
	bottom:6px;
	transform:scale(0) rotate(0);
}
.login-form .group label .icon:after{
	top:6px;
	right:0;
	transform:scale(0) rotate(0);
}
.login-form .group .check:checked + label{
	color:#fff;
}
.login-form .group .check:checked + label .icon{
	background:#1161ee;
}
.login-form .group .check:checked + label .icon:before{
	transform:scale(1) rotate(45deg);
}
.login-form .group .check:checked + label .icon:after{
	transform:scale(1) rotate(-45deg);
}
.login-html .sign-in:checked + .tab + .sign-up + .tab + .login-form .sign-in-htm{
	transform:rotate(0);
}
.login-html .sign-up:checked + .tab + .login-form .sign-up-htm{
	transform:rotate(0);
}

.hr{
	height:2px;
	margin:60px 0 50px 0;
	background:rgba(255,255,255,.2);
}
.foot-lnk{
	text-align:center;
}
    </style>



    <div class=""login-wrap"">
        <div class=""login-html"">
            <input id=""tab-1"" type=""radio"" name=""tab"" class=""sign-in"" checked><label for=""tab-1"" class=""tab"">Sign In</label>
            <input id=""tab-2"" type=""radio"" name=""tab"" class=""sign-up""><label for=""tab-2"" class=""tab"">Sign Up</label>
            <div class=""login-form"">
                <div class=""sign-in-htm"">
                    <div class=""group"">
                        <label for=""user"" class=""label"">Username</label>
                        <input id=""user"" type=""text"" class=""input"">
                    </div>
                    <div class=""group"">
                        <label for=""pass"" class=""label"">Password</label>
                        <input id=""pass"" type=""password"" class=""input"" data-type=""password"">
                    </div>
                    <div class=""group"">
                        <input id=""check"" type=""checkbox"" class=""check"" checked>
                        <label for=""check""><span class=""icon""></span> Keep me Signed in</label>
                    </div>
                    <div class=""group"">
                        <input type=""submit"" class=""button"" value=""Sign In"">
                    </div>
                    <div class=""hr""></div>
                    <div class=""foot-lnk"">
                        <a href=""#forgot"">Forgot Password?</a>
                    </div>
                </div>
                <div class=""sign-up-htm"">
                    <div class=""group"">
                        <label for=""user"" class=""label"">Username</label>
                        <input id=""user"" type=""text"" class=""input"">
                    </div>
                    <div class=""group"">
                        <label for=""pass"" class=""label"">Password</label>
                        <input id=""pass"" type=""password"" class=""input"" data-type=""password"">
                    </div>
                    <div class=""group"">
                        <label for=""pass"" class=""label"">Repeat Password</label>
                        <input id=""pass"" type=""password"" class=""input"" data-type=""password"">
                    </div>
                    <div class=""group"">
                        <label for=""pass"" class=""label"">Email Address</label>
                        <input id=""pass"" type=""text"" class=""input"">
                    </div>
                    <div class=""group"">
                        <input type=""submit"" class=""button"" value=""Sign Up"">
                    </div>
                    <div class=""hr""></div>
                    <div class=""foot-lnk"">
                        <label for=""tab-1"">Already Member?</a>
                    </div>
                </div>
            </div>
        </div>
    </div>"
ary8pm4r,01. Scheduling,Spocoman,JavaScript,Saturday 17th of February 2024 12:45:14 PM CDT,"function scheduling(input) {
    let jobs = input.shift().split("", "").map(Number), index = Number(input.shift());
        
    console.log(jobs.filter(x => x <= jobs[index]).reduce((a, b) => a + b, 0));
    return;
}"
QkmUc4JK,SumOfNumbers,UrayFenn,C#,Saturday 17th of February 2024 12:28:13 PM CDT,"namespace SumOfNumbers
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int minValue = 0;
            int maxValue = 100;
            Random random = new Random();
            int number = random.Next(minValue, maxValue + 1);
            int moduleMultiplicity1 = 3;
            int moduleMultiplicity2 = 5;
            int sumRandomNumber = 0;
            Console.WriteLine(number);

            for(int i = 0; i < number; i++)
            {
                if(i % moduleMultiplicity1 == 0 || i % moduleMultiplicity2 == 0)
                {
                    sumRandomNumber += i;
                    Console.Write(i + "" "");
                }
            }

            Console.WriteLine($""Сумма будет равна: {sumRandomNumber}"");
        }
    }
}"
uzQqeF4E,ItemBoat - onItemRightClick,Hacking_Lord,Java,Saturday 17th of February 2024 12:18:12 PM CDT,"    public ItemStack onItemRightClick(ItemStack itemStackIn, World worldIn, EntityPlayer playerIn) {
        float var4 = 1.0F;
        float var5 = playerIn.prevRotationPitch + (playerIn.rotationPitch - playerIn.prevRotationPitch) * var4;
        float var6 = playerIn.prevRotationYaw + (playerIn.rotationYaw - playerIn.prevRotationYaw) * var4;
        double var7 = playerIn.prevPosX + (playerIn.posX - playerIn.prevPosX) * (double)var4;
        double var9 = playerIn.prevPosY + (playerIn.posY - playerIn.prevPosY) * (double)var4 + (double)playerIn.getEyeHeight();
        double var11 = playerIn.prevPosZ + (playerIn.posZ - playerIn.prevPosZ) * (double)var4;
        Vec3 var13 = new Vec3(var7, var9, var11);
        float var14 = MathHelper.cos(-var6 * 0.017453292F - 3.1415927F);
        float var15 = MathHelper.sin(-var6 * 0.017453292F - 3.1415927F);
        float var16 = -MathHelper.cos(-var5 * 0.017453292F);
        float var17 = MathHelper.sin(-var5 * 0.017453292F);
        float var18 = var15 * var16;
        float var20 = var14 * var16;
        double var21 = 5.0D;
        Vec3 var23 = var13.addVector((double)var18 * var21, (double)var17 * var21, (double)var20 * var21);
        MovingObjectPosition var24 = worldIn.rayTraceBlocks(var13, var23, true);
        if (var24 == null) {
            return itemStackIn;
        } else {
            Vec3 var25 = playerIn.getLook(var4);
            boolean var26 = false;
            float var27 = 1.0F;
            List var28 = worldIn.getEntitiesWithinAABBExcludingEntity(playerIn, playerIn.getEntityBoundingBox().addCoord(var25.xCoord * var21, var25.yCoord * var21, var25.zCoord * var21).expand(var27, var27, var27));

            for(int var29 = 0; var29 < var28.size(); ++var29) {
                Entity var30 = (Entity)var28.get(var29);
                if (var30.canBeCollidedWith()) {
                    float var31 = var30.getCollisionBorderSize();
                    AxisAlignedBB var32 = var30.getEntityBoundingBox().expand(var31, var31, var31);
                    if (var32.isVecInside(var13)) {
                        var26 = true;
                    }
                }
            }

            if (!var26) {
                if (var24.typeOfHit == MovingObjectType.BLOCK) {
                    BlockPos var33 = var24.func_178782_a();
                    if (worldIn.getBlockState(var33).getBlock() == Blocks.snow_layer) {
                        var33 = var33.offsetDown();
                    }

                    EntityBoat var34 = new EntityBoat(worldIn, (float) var33.getX() + 0.5F, (float) var33.getY() + 1.0F, (float) var33.getZ() + 0.5F);
                    var34.rotationYaw = (float) (((MathHelper.floor_double((double) (playerIn.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3) - 1) * 90);
                    if (!worldIn.getCollidingBoundingBoxes(var34, var34.getEntityBoundingBox().expand(-0.1D, -0.1D, -0.1D)).isEmpty()) {
                        return itemStackIn;
                    }

                    if (!worldIn.isRemote) {
                        worldIn.spawnEntityInWorld(var34);
                    }

                    if (!playerIn.capabilities.isCreativeMode) {
                        --itemStackIn.stackSize;
                    }

                    playerIn.triggerAchievement(StatList.objectUseStats[Item.getIdFromItem(this)]);
                    if (BuiltIn.getInstance().onePointFifteenPlayerAnimations()) {
                        playerIn.swingItem(false);
                    }
                }

            }
            return itemStackIn;
        }
    }"
5n5FiDw0,01. Scheduling,Spocoman,Python,Saturday 17th of February 2024 12:17:18 PM CDT,"jobs = list(map(int, input().split(', ')))
index = int(input())

print(sum([i for i in jobs if i <= jobs[index]]))
"
Mzba2z66,Subsequence,UrayFenn,C#,Saturday 17th of February 2024 12:17:16 PM CDT,"namespace Subsequence
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int minValue = 5;
            int maxValue = 96;
            int cycleStep = 7;

            for(int i = minValue; i <= maxValue; i+=cycleStep)
            {
                Console.WriteLine(i); 
            }
        }
    }
}"
dNzT7JNv,OutputControl,UrayFenn,C#,Saturday 17th of February 2024 12:04:11 PM CDT,"namespace OutputControl
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string userInput = Console.ReadLine();
            string comandExit = ""exit"";

            while(userInput != comandExit)
            {
                Console.WriteLine(""Введите сообщение:"");
                userInput = Console.ReadLine();
            }
        }
    }
}"
17DQNnnM,power of number two,SaNik74,C#,Saturday 17th of February 2024 12:04:06 PM CDT,"class Program
{
    static void Main(string[] args)
    {
        Random random = new Random();
        int givenNumber = random.Next(0, 1000);
        int power = 2;
        int numberInThePower = 2;
        int numberOfPower = 1;

        while (numberInThePower < givenNumber)
        {
            numberInThePower *= power;
            numberOfPower += 1;
        }

        Console.WriteLine($""Число - {givenNumber}\n"" +
            $""Степень - {numberOfPower}\n"" +
            $""Число два в заданой степени - {numberInThePower}"");
    }
}"
3ZAMV4ii,While solutions,LEGEND2004,C++,Saturday 17th of February 2024 11:27:59 AM CDT,"#include <bits/stdc++.h>
using namespace std;

#define int long long

signed main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    // A
    /*
    int a , b;
    cin >> a >> b;
    int i = a;
    while(i <= b){
        cout << i << "" "";
        i++;
    }
    */
    // B
    /*
    int n , cnt = 0;
    cin >> n;
    if(n == 0){
        cout << 1;
        return 0;
    }
    while(n){
        cnt++;
        n /= 10;
    }
    cout << cnt;
    */
    // C
    /*
    int n , sum = 0;
    cin >> n;
    n = abs(n);
    while(n){
        sum += n % 10;
        n /= 10;
    }
    cout << sum;
    */
    // D
    /*
    long long n , odd = 0;
    cin >> n;
    while(n){
        odd += n % 2;
        n /= 10;
    }
    cout << odd;
    */
    // E
    /*
    int n , p = 1;
    cin >> n;
    while(n){
        if(n % 10)
            p *= n % 10;
        n /= 10;
    }
    cout << p;
    */
    // F
    /*
    int n , p = 1;
    cin >> n;
    n = abs(n);
    if(n == 0){
        cout << 0;
        return 0;
    }
    while(n){
        if(n % 2 == 0)
            p *= n % 10;
        n /= 10;
    }
    if(p == 1)
        cout << ""-1"";
    else
        cout << p;
    */
    // G
    /*
    int n , mx = 0;
    cin >> n;
    while(n != 0){
        mx = max(mx , n % 10);
        n /= 10;
    }
    cout << mx;
    */
    // H
    /*int n , mx = 0;
    cin >> n;
    int old = n;
    while(n != 0){
        mx = max(mx , n % 10);
        n /= 10;
    }
    n = old;
    int cnt = 0;
    while(n){
        if(n % 10 == mx)
            cnt++;
        n /= 10;
    }
    cout << cnt;
    */
    // H
    /*
    int n , mx = 0 , cnt = 0;
    cin >> n;
    while(n){
        int d = n % 10;
        if(mx < d){
            mx = d;
            cnt = 0;
        }
        if(mx == d)
            cnt++;
        n /= 10;
    }
    cout << cnt;
    */
}

"
zUnB45Sk,Untitled,D3ENNY,HTML,Saturday 17th of February 2024 11:27:51 AM CDT,"<div id=""default-carousel"" class=""relative w-full carousel border border-blue-700"" data-carousel=""slide"">
    <!-- Carousel wrapper -->
    <div class=""relative overflow-hidden h-full"">
         <!-- Item 1 -->
        <div class=""duration-700 ease-in-out"" data-carousel-item>
            <img src=""../../../assets/img/uliveto.png"" class=""absolute block w-full -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2"" alt=""..."">
        </div>
        <!-- Item 2 -->
        <div class=""duration-700 ease-in-out"" data-carousel-item>
            <img src=""../../../assets/img/uliveto.png"" class=""absolute block w-full -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2"" alt=""..."">
        </div>
        <!-- Item 3 -->
        <div class=""duration-700 ease-in-out"" data-carousel-item>
            <img src=""../../../assets/img/uliveto2.jpeg"" class=""absolute block w-full -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2"" alt=""..."">
        </div>
        <!-- Item 4 -->
        <div class=""duration-700 ease-in-out"" data-carousel-item>
            <img src=""../../../assets/img/uliveto2.jpeg"" class=""absolute block w-full -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2"" alt=""..."">
        </div>
        <!-- Item 5 -->
        <div class=""duration-700 ease-in-out"" data-carousel-item>
            <img src=""../../../assets/img/uliveto.png"" class=""absolute block w-full -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2"" alt=""..."">
        </div>

        <div class=""flex justify-center items-center text-slate-900 border border-red-600"">
            test div
        </div>

    </div>
    <!-- Slider controls -->
    <button type=""button"" class=""absolute top-0 start-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"" data-carousel-prev>
        <span class=""inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none"">
            <svg class=""w-4 h-4 text-white dark:text-gray-800 rtl:rotate-180"" aria-hidden=""true"" xmlns=""http://www.w3.org/2000/svg"" fill=""none"" viewBox=""0 0 6 10"">
                <path stroke=""currentColor"" stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2"" d=""M5 1 1 5l4 4""/>
            </svg>
            <span class=""sr-only"">Previous</span>
        </span>
    </button>

    <button type=""button"" class=""absolute top-0 end-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none"" data-carousel-next>
        <span class=""inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none"">
            <svg class=""w-4 h-4 text-white dark:text-gray-800 rtl:rotate-180"" aria-hidden=""true"" xmlns=""http://www.w3.org/2000/svg"" fill=""none"" viewBox=""0 0 6 10"">
                <path stroke=""currentColor"" stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2"" d=""m1 9 4-4-4-4""/>
            </svg>
            <span class=""sr-only"">Next</span>
        </span>
    </button>
</div>
"
MxbfxNbT,Symmetric Reverse Pyramid,treasure363,Python,Saturday 17th of February 2024 11:19:00 AM CDT,"''' Print the following pattern
1*2*3*4*17*18*19*20
  5*6*7*14*15*16
    8*9*12*13
      10*11
'''
n = 8
arr = [[0]*n for i in range(n//2)] # 4x8 matrix
ct = 1

for i in range(n//2):
    for j in range(n//2):
        if j >= i:
            arr[i][j] = ct
            ct += 1

for i in range(n//2-1, -1, -1):
    for j in range(n//2, n, 1):
        if i+j <= 7:
            arr[i-4][j] = ct
            ct += 1

for i in range(n//2):
    s = """"
    for j in arr[i]:
        s += (str(j)+""*"" if j else '  ')
    print(s.rstrip(""* ""))
"
i8GFD1F6,1Month ไอ้ต้าว อ้วน,jamezaa1188,AutoIt,Saturday 17th of February 2024 11:15:52 AM CDT,639DB027-481D-1B2D-3A92-E9E05BBF8CC4
KjMfCp4y,Untitled,Agent74,Python,Saturday 17th of February 2024 11:03:14 AM CDT,"from flask import Flask

app = Flask(__name__)

@app.route(""/"")
def hello_world():
    return ""<p>Hello, World!</p>""
"
F0WYPzXt,Jet's R3D Apple Resigner Source Code,xzlui,Batch,Saturday 17th of February 2024 10:31:14 AM CDT,"REM This tool was created by Jet for the purpose of decompiling/recompiling EBOOT.BIN/.ELF files for PlayStation 3 games. 
REM I am releasing this code with full authorization for the purpose of education.

@shift /0
@shift
@echo off
call data\config
setlocal enabledelayedexpansion
::pushd %temp%
color 0c
set mode=%fw%
title R3D Apple Resigner 2.1.1 [%mode% Mode]
goto globals

:globals
cls
set sid=%random%
set user=%usr%
set curdir=%cd%
set selfctrlflags=4000000000000000000000000000000000000000000000000000000000000002
set selfcapflags=00000000000000000000000000000000000000000000003B0000000100040000
set output=4xxstd
set outputmsg=[4.XX STD]
set elfsdk=41
set keyrev=1C
set fwver=0004002000000000
set ctrlflagswitch=FALSE
set capflagswitch=FALSE
set compress=TRUE
set compressmsg=[ON]
goto init

:init
cls
set selfctrlflags=4000000000000000000000000000000000000000000000000000000000000002
set selfcapflags=00000000000000000000000000000000000000000000003B0000000100040000
set output=4xxstd
set outputmsg=[4.XX STD]
set elfsdk=41
set keyrev=1C
set fwver=0004002000000000
set ctrlflagswitch=FALSE
set capflagswitch=FALSE
set compress=TRUE
set compressmsg=[ON]
goto default_mode

:default_mode
cls
if %mode%==DEX goto dex_menu
if %mode%==CEX goto cex_menu

:dex_menu
if %mode%==CEX goto cex_menu
set mode=DEX
title R3D Apple Resigner 2.1.1 [%mode% Mode]
set opt=NULL
cls
echo WARNING: Be sure that your BIN/ELF is in %cd%
echo.
echo Mode: %mode% // Output: %outputmsg%
echo Type ""/cex"" to change to CEX mode.
echo.
echo ^+================================^+
::echo ^|    R3D Apple Resigner 2.1.1    ^|
echo ^|                 .:'            ^|
echo ^|             __ :'__            ^|
echo ^|          .'^`__^`-'__^`^`.         ^|
echo ^|         ^:____R3D___.-'         ^|
echo ^|         ^:__Apple__:            ^|
echo ^|          ^:__2.1.1__`-;         ^|
echo ^|           ^`.__.-.__.'          ^|
echo ^+================================^+
echo ^|    [1] - Decrypt BIN to ELF    ^|
echo ^|    [2] - Resign NON-DRM        ^|
echo ^|    [3] - Output Option         ^|
echo ^|    [4] - Credits               ^|
echo ^|    [5] - About R3D Apple       ^|
echo ^|    [6] - Exit R3D Apple        ^|
echo ^+================================^+
echo.
set /p opt= %user%@%sid%: 
if %opt%==1 (goto d_dex)
if %opt%==2 (goto disc_dex)
if %opt%==3 (goto outputoption)
if %opt%==4 (goto credits)
if %opt%==5 (goto about)
if %opt%==6 exit
if %opt%==/dex goto error
if %opt%==/DEX goto error
if %opt%==/cex goto change_mode
if %opt%==/CEX goto change_mode
if not %opt%==1 goto error
if not %opt%==2 goto error
if not %opt%==3 goto error
if not %opt%==4 goto error
if not %opt%==5 goto error
if not %opt%==6 goto error
if not %opt%==/cex goto error
if not %opt%==/CEX goto error

:cex_menu
if %mode%==DEX goto dex_menu
set mode=CEX
title R3D Apple Resigner 2.1.1 [%mode% Mode]
set opt=NULL
cls
echo WARNING: Be sure that your BIN/ELF is in %cd%
echo.
echo Mode: %mode% // Output: %outputmsg%
echo Type ""/dex"" to change to DEX mode.
echo.
echo ^+================================^+
::echo ^|    R3D Apple Resigner 2.1.1    ^|
echo ^|                 .:'            ^|
echo ^|             __ :'__            ^|
echo ^|          .'^`__^`-'__^`^`.         ^|
echo ^|         ^:____R3D___.-'         ^|
echo ^|         ^:__Apple__:            ^|
echo ^|          ^:__2.1.1__`-;         ^|
echo ^|           ^`.__.-.__.'          ^|
echo ^+================================^+
echo ^|    [1] - Decrypt BIN to ELF    ^|
echo ^|    [2] - Resign NON-DRM        ^|
echo ^|    [3] - Output Option         ^|
echo ^|    [4] - Credits               ^|
echo ^|    [5] - About R3D Apple       ^|
echo ^|    [6] - Exit R3D Apple        ^|
echo ^+================================^+
echo.
set /p opt= %user%@%sid%: 
if %opt%==1 (goto d_cex)
if %opt%==2 (goto disc_cex)
if %opt%==3 (goto outputoption)
if %opt%==4 (goto credits)
if %opt%==5 (goto about)
if %opt%==6 exit
if %opt%==/cex goto error
if %opt%==/CEX goto error
if %opt%==/dex goto change_mode
if %opt%==/DEX goto change_mode
if not %opt%==1 goto error
if not %opt%==2 goto error
if not %opt%==3 goto error
if not %opt%==4 goto error
if not %opt%==5 goto error
if not %opt%==6 goto error
if not %opt%==/dex goto error
if not %opt%==/DEX goto error
if %opt%==NULL (goto cex_menu)

:d_cex
data\sfk.exe list . .bin>data\list.txt
cls
set /a count=0
for /f %%f in (data\list.txt) do (
set /a count+=1
set a!count!=%%f
if count NEQ 0 (echo  [!count!] %%f )
)
) else (echo Could not find .BINs to list.)
set filesel=NONE
echo.
echo Type ""/q"" to quit decryption.
echo.
set /p filesel=[^^!] Enter # to File: 
echo.
if %filesel%==/q (goto cex_menu)
if %filesel%==/Q (goto cex_menu)
if %filesel% GTR !count! (
echo [^^!] Invalid Input.
ping localhost -n 3 >nul
goto d_cex
)
if %filesel% LSS 1 (
echo [^^!] Invalid Input.
ping localhost -n 3 >nul
goto d_cex
)
set filename=!a%filesel%!
set file=%filename:~0,-4%

if exist %file%.ELF (del %file%.ELF)
echo [*] Decrypting %file%.BIN...
data\scetool.exe --decrypt ""%curdir%\%file%.BIN"" ""%curdir%\%file%.ELF"">nul
if exist %file%.ELF (
echo [*] Decrypted to %file%.ELF
) else (
echo [^^!] Decryption failed.
)
if exist data\list.txt (del data\list.txt)
ping localhost -n 3 >nul
goto cex_menu


:disc_cex
data\sfk.exe list -file .elf>data\list.txt
cls
set /a count=0
for /f %%f in (data\list.txt) do (
set /a count+=1
set a!count!=%%f
if count NEQ 0 (echo  [!count!] %%f )
)
) else (echo Could not find .ELFs to list.)
set filesel=NONE
echo.
echo Type ""/q"" to quit encryption.
echo.
set /p filesel=[^^!] Enter # to File: 
echo.
if %filesel%==/Q (goto cex_menu)
if %filesel%==/q (goto cex_menu)
if %filesel% GTR !count! (
echo [^^!] Invalid Input.
ping localhost -n 3 >nul
goto disc_cex
)
if %filesel% LSS 1 (
echo [^^!] Invalid Input.
ping localhost -n 3 >nul
goto disc_cex
)
set filename=!a%filesel%!
set file=%filename:~0,-4%

set CID=
FOR /F ""tokens=1,2 delims= "" %%A IN ('data\scetool.exe -i ""%curdir%\%file%.BIN""') DO (
if [%%A]==[ContentID] set CID=%%B
)
data\FixELF.exe %file%.ELF %elfsdk%
if [%CID%]==[] (
data\scetool.exe -v --sce-type=SELF --compress-data=FALSE --skip-sections=TRUE --key-revision=%keyrev% --self-auth-id=1010000001000003 --self-vendor-id=01000002 --self-type=APP --self-app-version=0001000000000000 --self-fw-version=%fwver% --encrypt ""%curdir%\%file%.ELF"" ""%curdir%\%file%.BIN"" >nul
echo [*] Encrypted to %file%.BIN. ) ELSE (
echo ContentID = %CID%
data\scetool.exe -v --sce-type=SELF --compress-data=FALSE --skip-sections=TRUE --key-revision=%keyrev% --self-auth-id=1010000001000003 --self-add-shdrs=TRUE --self-vendor-id=01000002 --self-type=NPDRM --self-app-version=0001000000000000 --self-fw-version=%fwver% --np-license-type=FREE --np-content-id=%CID% --np-app-type=EXEC --np-real-file=%file%.BIN --encrypt ""%curdir%\%file%.ELF"" ""%curdir%\%file%.BIN"" >nul
echo [*] Encrypted to %file%.BIN. )
::del ""%curdir%\%file%.BIN.BAK"">nul
ping localhost -n 3 >nul
goto cex_menu

:d_dex
data\sfk.exe list -file .bin>data\list.txt
cls
set /a count=0
for /f %%f in (data\list.txt) do (
set /a count+=1
set a!count!=%%f
if count NEQ 0 (echo  [!count!] %%f )
)
) else (echo Could not find .ELFs to list.)
set filesel=NONE
echo.
echo Type ""/q"" to quit decryption.
echo.
set /p filesel=[^^!] Enter # to File: 
echo.
if %filesel%==/Q (goto dex_menu)
if %filesel%==/q (goto dex_menu)
if %filesel% GTR !count! (
echo [^^!] Invalid Input.
ping localhost -n 3 >nul
goto disc_cex
)
if %filesel% LSS 1 (
echo [^^!] Invalid Input.
ping localhost -n 3 >nul
goto disc_cex
)
set filename=!a%filesel%!
set file=%filename:~0,-4%

if not exist %file%.BIN (
echo [^^!] %file%.BIN can't be found.
ping localhost -n 3 >nul
goto dex_menu
)
if exist %file%.ELF (del %file%.ELF)
echo [*] Decrypting %file%.BIN...
data\unfself ""%curdir%\%file%.BIN"" ""%curdir%\%file%.ELF"">nul
if exist %file%.ELF (
echo [*] Decrypted to %file%.ELF
) else (
echo [^^!] Decryption failed.
)
ping localhost -n 3 >nul
goto dex_menu

:disc_dex
data\sfk.exe list -file .elf>data\list.txt
cls
set /a count=0
for /f %%f in (data\list.txt) do (
set /a count+=1
set a!count!=%%f
if count NEQ 0 (echo  [!count!] %%f )
)
) else (echo Could not find .ELFs to list.)
set filesel=NONE
echo.
echo Type ""/q"" to quit encryption.
echo.
set /p filesel=[^^!] Enter # to File: 
echo.
if %filesel%==/Q (goto dex_menu)
if %filesel%==/q (goto dex_menu)
if %filesel% GTR !count! (
echo [^^!] Invalid Input.
ping localhost -n 3 >nul
goto disc_cex
)
if %filesel% LSS 1 (
echo [^^!] Invalid Input.
ping localhost -n 3 >nul
goto disc_cex
)
set filename=!a%filesel%!
set file=%filename:~0,-4%

set autoresign=FALSE
if not exist %file%.BIN (
if not exist %file%.ELF (
echo [^^!] %file%.BIN/ELF can't be found.
ping localhost -n 3 >nul
goto dex_menu
)
)
if not exist %file%.ELF (
echo [*] Decrypting %file%.BIN...
data\scetool.exe --decrypt ""%curdir%\%file%.BIN"" ""%curdir%\%file%.ELF"">nul
set autoresign=TRUE
)
if not exist %file%.ELF (
echo [^^!] Decryption failed.
ping localhost -n 3 >nul
goto dex_menu
)
if exist %file%.BIN (
if exist %file%.BIN.BAK (del %file%.BIN.BAK)
ren %file%.BIN %file%.BIN.BAK
)
echo [*] Patching %file%.ELF...
data\FixELF ""%curdir%\%file%.ELF""
echo [*] Encrypting %file%.ELF...
data\make_fself ""%curdir%\%file%.ELF"" ""%curdir%\%file%.BIN"">nul
if %autoresign%==TRUE (del %file%.ELF)
echo [*] Encrypted to %file%.BIN
del %file%.BIN.BAK>nul
ping localhost -n 3 >nul
goto dex_menu

:outputoption
if %output%==4xxstd (
set output=4xxalt
set outputmsg=[4.XX ALT]
set elfsdk=41
set keyrev=1C
set fwver=0004002000000000
set ctrlflagswitch=TRUE
set capflagswitch=FALSE
echo.
echo [*] Output set to 4.XX ALT.
ping localhost -n 2 >nul
goto default_mode
)
if %output%==4xxalt (
set output=4xxode
set outputmsg=[4.XX ODE]
set elfsdk=33
set keyrev=0A
set fwver=0003005500000000
set ctrlflagswitch=FALSE
set capflagswitch=TRUE
echo.
echo [*] Output set to 4.XX ODE.
ping localhost -n 2 >nul
goto default_mode
)
if %output%==4xxode (
set output=3xxstd
set outputmsg=[3.XX STD]
set elfsdk=33
set keyrev=04
set fwver=0003004000000000
set ctrlflagswitch=FALSE
set capflagswitch=FALSE
echo.
echo [*] Output set to 3.XX STD.
ping localhost -n 2 >nul
goto default_mode
)
if %output%==3xxstd (
set output=3xxalt
set outputmsg=[3.XX ALT]
set elfsdk=33
set keyrev=04
set fwver=0003004000000000
set ctrlflagswitch=TRUE
set capflagswitch=FALSE
echo [*] Output set to 3.XX ALT.
echo.
ping localhost -n 2 >nul
goto default_mode
)
if %output%==3xxalt (
set output=4xxstd
set outputmsg=[4.XX STD]
set elfsdk=41
set keyrev=1C
set fwver=0004002000000000
set ctrlflagswitch=FALSE
set capflagswitch=FALSE
echo.
echo [*] Output set to 4.XX STD.
ping localhost -n 2 >nul
goto default_mode
)

:change_mode
if %opt%==/cex goto set_cex
if %opt%==/CEX goto set_cex
if %opt%==/dex goto set_dex
if %opt%==/DEX goto set_dex
:set_cex
set mode=CEX
echo.
echo CEX mode enabled.
ping localhost -n 2 >nul
goto cex_menu
:set_dex
set mode=DEX
echo.
echo DEX mode enabled.
ping localhost -n 2 >nul
goto dex_menu

:error
echo.
if %opt%==/cex goto fw_error
if %opt%==/CEX goto fw_error
if %opt%==/dex goto fw_error
if %opt%==/DEX echo fw_error
if %mode%==CEX echo [^^!] ""%opt%"" is not a valid option.
if %mode%==DEX echo [^^!] ""%opt%"" is not a valid option.
ping localhost -n 3 >nul
goto default_mode
:fw_error
if %opt%==/cex echo [^^!] CEX mode is already enabled.
if %opt%==/CEX echo [^^!] CEX mode is already enabled.
if %opt%==/dex echo [^^!] DEX mode is already enabled.
if %opt%==/DEX echo [^^!] DEX mode is already enabled.
ping localhost -n 3 >nul
goto default_mode

:about
echo.
echo R3D Apple is a resigning tool developed to quickly and simply encrypt/decrypt EBOOTs.
echo.
echo Waiting on %user%...
pause >nul
goto default_mode

:credits
cls
echo R3D Apple Resigner developed by Jet
echo Released Sept. 22, 2016
echo NGU: TrippinOnACID
echo RG: Jet
echo.
echo Shout out to Trojan and Krank
echo.
echo Waiting on %user%...
pause >nul
goto default_mode
"
