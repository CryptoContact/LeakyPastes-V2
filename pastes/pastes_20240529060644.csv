id,title,username,language,date,content
tUJJsRQT,💰G2A.com Free Gift Card Guide 2024 May🚀,Garoam,Python,Wednesday 29th of May 2024 01:04:06 AM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_2515578.pdf

Working as of:

29 May 2024"
tmFuSn2r,GladiatorsFight,AlexKayn,C#,Wednesday 29th of May 2024 01:00:33 AM CDT,"using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace ConsoleApp2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Arena arena = new Arena();

            arena.Work();
        }
    }

    class Arena
    {
        private List<Warrior> _warriors = new List<Warrior>();

        public Arena() 
        {
            _warriors.Add(new Stronger());
            _warriors.Add(new Slyone());
            _warriors.Add(new Barbarian());
            _warriors.Add(new Magician());
            _warriors.Add(new Dodger());
        }

        public void Work()
        {
            Warrior firstWarrior = null;
            Warrior secondWarrior = null;

            Console.WriteLine(""ДОБРО ПОЖАЛОВАТЬ В КОЛИЗЕЙ, ДА ПУСТЬ ПРОЛЬЮТСЯ РЕКИ КРОВИ, ХЛЕБА И ЗРЕЛИЩ!!!"");

            ShowAllWarriors();

            Console.WriteLine(""\nЧтобы начать бой, нужно выбрать двух бойцов\n"");

            ChooseWarriors(ref firstWarrior, ref secondWarrior);

            Console.WriteLine(""\nГЛАДИАТОРЫ ВЫБРАНЫ ДА НАЧНЕТСЯ БИТВА\n"");

            Console.WriteLine(""\nДля начала боя нажмите любую клавишу..."");
            Console.ReadKey();
            Console.Clear();

            Fight(firstWarrior, secondWarrior);

            CountingResults(firstWarrior, secondWarrior);

            Console.ReadKey();
        }

        private void ChooseWarriors(ref Warrior firstWarrior, ref Warrior secondWarrior)
        {
            Console.Write(""\n Для выбора первого бойца введите его ID >  "");
            ChooseWarrior(out firstWarrior);
            firstWarrior.ShowStats();
            _warriors.Remove(firstWarrior);

            Console.Write(""\n Для выбора второго бойца введите его ID >  "");
            ChooseWarrior(out secondWarrior);
            secondWarrior.ShowStats();
            _warriors.Remove(secondWarrior);
        }

        private void ChooseWarrior(out Warrior warrior)
        {
            warrior = null;

            while (warrior == null)
            {
                int warriorId = ReadNumber();

                if (TryGetWarrior(out warrior, warriorId))
                {
                    Console.WriteLine($""Боец выбран и это - {warrior.Name}\n"");
                }
                else
                {
                    Console.WriteLine(""Бойца с таким ID не найдено"");
                }
            }
        }

        private void Fight(Warrior firstWarrior, Warrior secondWarrior)
        {
            while (firstWarrior.Health > 0 && secondWarrior.Health > 0)
            {
                Attack(firstWarrior, secondWarrior);
                Attack(secondWarrior, firstWarrior);

                Console.WriteLine();

                firstWarrior.ShowCurrentHealth();
                secondWarrior.ShowCurrentHealth();

                Console.WriteLine();
                Console.ReadKey();
            }
        }

        private void CountingResults(Warrior firstWarrior, Warrior secondWarrior)
        {
            if (firstWarrior.Health <= 0 && secondWarrior.Health <= 0)
            {
                Console.WriteLine(""НИЧЬЯ!!!!!!!!!!!!!!!"");
            }
            else if (firstWarrior.Health <= 0)
            {
                Console.WriteLine($""{secondWarrior.Name} ПОБЕДИЛ"");
            }
            else if (secondWarrior.Health <= 0)
            {
                Console.WriteLine($""{firstWarrior.Name} ПОБЕДИЛ"");
            }
        }

        private void Attack(Warrior firstWarrior, Warrior secondWarrior)
        {
            if (firstWarrior.TryUseAbility())
            {
                secondWarrior.TakeDamage(firstWarrior.Damage);
            }
            else
            {
                secondWarrior.TakeDamage(firstWarrior.Damage);

                Console.WriteLine($""{firstWarrior.Name} бьет оппонента и наносит ему {firstWarrior.Damage} урона"");
            }
        }

        private bool TryGetWarrior(out Warrior warrior, int id)
        {
            for (int i = 0; i <  _warriors.Count; i++)
            {
                if (_warriors[i].ID == id)
                {
                    warrior = _warriors[i];

                    return true;
                }
            }

            warrior = null;
            return false;
        }

        private void ShowAllWarriors()
        {
            Console.WriteLine(""Все бойцы гладиаторы:"");

            for (int i = 0; i <  _warriors.Count; i++)
            {
                int index = i + 1;

                Console.Write($""\n{index}.  "");
                _warriors[i].ShowStats();
            }
        }

        private int ReadNumber()
        {
            int number;

            while (int.TryParse(Console.ReadLine(), out number) == false)
            {
                Console.WriteLine(""Ошибка: введено не число. Попробуй еще раз"");
            }

            return number;
        }
    }

    class Warrior
    {
        public Warrior(string name, int health, int damage, int armor, string description, int id)
        {
            Name = name;
            Health = health;
            Damage = damage;
            Armor = armor;
            Description = description;
            ID = id;
        }

        public int Health { get; protected set; }
        public int Damage { get; protected set; }
        public int Armor { get; protected set; }
        public int ID { get; protected set; }
        public string Name { get; protected set; }
        public string Description { get; protected set; }


        public void ShowStats()
        {
            Console.Write($""Боец - {Name}, ХР - {Health}, урон - {Damage}, Броня: {Armor}, Особое умение: {Description}"");
        }

        public virtual bool TryUseAbility()
        {
            return false; 
        }

        public void ShowCurrentHealth()
        {
            Console.WriteLine($""{Name} - здоровье {Health}"") ;
        }

        public void Attack(Warrior opponent)
        {
            opponent.TakeDamage(Damage);
        }

        public void TakeDamage(int damage)
        {
            Health -= damage - Armor;

            if (Health < 0)
            {
                Health = 0;
            }
        }
    }

    class Stronger : Warrior
    {
        public Stronger() : base(""Силач"", 100, 35, 50, ""В любой момент может очень сильно вдарить"", 1) { }

        Random random = new Random();
        int minValue = 0;
        int maxValue = 3;
        int multiplier = 2;

        public override bool TryUseAbility()
        {
            int chanceDoubleDamage = random.Next(minValue, maxValue);

            if (chanceDoubleDamage == 0)
            {
                int doubleDamage = Damage * multiplier;

                Damage = doubleDamage;

                Console.WriteLine($""{Name} применяет свою способность и наносит двойной урон {doubleDamage}"") ;

                return true;
            }

            return false;
        }
    }
     
    class Slyone : Warrior
    {
        public Slyone() : base(""Ловкач"", 100, 20, 40, ""Может наносить в моменте два удара сразу"", 2) {}

        public override bool TryUseAbility()
        {
            int takeDamageCounter = 0;
            int numberActivationAbitity = 3;
            int multipier = 2;

            takeDamageCounter++;

            if (takeDamageCounter == numberActivationAbitity)
            {
                Damage = Damage * multipier;

                Console.WriteLine($""{Name} применяет свою способность и дважды наносит урон по оппоненту!!!"");

                return true;
            }
            
            return false;
        }
    }

    class Barbarian : Warrior
    {
        public Barbarian(int rage = 0) : base(""Варвар"", 100, 50, 10, ""Копит ярость, когда накоплена - раны заживают"", 3)
        {
            Rage = rage;
        }

        public int Rage { get; private set; }

        Random random = new Random();
        int minValue = 30;
        int maxValue = 100;
        int maxRage = 7;

        public override bool TryUseAbility()
        {
            Rage++;

            int valueHeal = random.Next(minValue, maxValue);

            if (Rage == maxRage)
            {
                Health += valueHeal;

                Console.WriteLine($""{Name} применил свою способность, "" +
                    $""здоровья восстановлено {valueHeal},"" +
                    $""текущее здоровье {Health}"");

                return true;
            }

            return false;
        }
    }

    class Magician : Warrior
    {
        public Magician(int magic = 100) : base(""Маг"", 100, 20, 5, ""Атакует огненным заклинанием, если есть мана"", 4)
        {
            Magic = magic;
        }

        public int Magic { get; protected set; }

        public override bool TryUseAbility()
        {
            int averageValue = 25;
            int damageBurn = 45;
            int currentMana = Magic;

            if (currentMana >= Magic)
            {
                currentMana -= averageValue;
                Damage = damageBurn;

                Console.WriteLine($""{Name} применил свою способность, "" +
                    $""и нанес удар огненным шаром, нанося {Damage},"" +
                    $""текущее здоровье {Health}"");

                return true;
            }

            return false;
        }
    }

    class Dodger : Warrior
    {
        public Dodger(int сhanceDodge = 3) : base(""Соловей"", 100, 25, 25, ""Может с легкостью уклониться от атаки"", 5)
        {
            ChanceDodge = сhanceDodge;
        }

        public int ChanceDodge {  get; protected set; }

        public new void TakeDamage(int damage)
        {
            if (TryUseAbility())
            {
                Console.WriteLine($""{Name} мастерски уклонился от атаки и не получил урона"") ;
            }
            else
            {
                Health -= damage;
            }
        }

        public override bool TryUseAbility()
        {
            Random random = new Random();
            int minValue = 0;

            int chance = random.Next(minValue, ChanceDodge);

            if (chance == ChanceDodge)
            {
                return true;
            }

            return false;
        }
    }
}
"
2QPJMbhj,💰G2A.com Free Gift Card Guide 2024 May🔥,atakan1983,Python,Wednesday 29th of May 2024 12:57:19 AM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_2515578.pdf

Working as of:

29 May 2024"
rudvzt8Z,Untitled,pierrejean,Lua,Wednesday 29th of May 2024 12:49:23 AM CDT,"-- Récupérez l'écran
local monitor = peripheral.wrap(""top"") -- Remplacez ""top"" par le côté où se trouve votre écran

-- Réglez la taille du texte
monitor.setTextScale(0.5) -- Ajustez l'échelle du texte à votre convenance

-- Effacez l'écran
monitor.clear()

-- Écrivez du texte sur l'écran
monitor.setCursorPos(1, 1) -- Déplacez le curseur en haut à gauche
monitor.write(""Bonjour le monde!"")
"
8i05fxW6,🤑G2A.com Free Gift Card Guide 2024 May🔥,pestinha,Python,Wednesday 29th of May 2024 12:43:48 AM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_2515578.pdf

Working as of:

29 May 2024"
yJ7t17XL,Alicom (Form3),vicheauuu,C#,Wednesday 29th of May 2024 12:40:01 AM CDT,"using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Drawing.Printing;
using System.IO;
using System.Linq;
using System.Reflection.Emit;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;


namespace Practica_3
{
    public partial class Form3 : Form
    {
        public static Form3 instance;
        public Form3()
        {
            InitializeComponent();
            instance = this;
        }


        SqlConnection con = new SqlConnection(@""Data Source=VICHEAUUU\SQLEXPRESS;Initial Catalog=Alicom;Integrated Security=True"");

        private void Form3_Load(object sender, EventArgs e)
        {


            string nume = """", prenume = """", blocname = """", idnp;
            idnp = Form1.instance2.idnp.Text;

            string query = @""SELECT Nume,Prenume,Bloc FROM Locatari where IDNP = '"" + idnp + ""' "";
            using (SqlCommand command = new SqlCommand(query, con))
            {
                con.Open();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        nume = reader[""Nume""].ToString().Trim();
                        prenume = reader[""Prenume""].ToString().Trim();
                        blocname = reader[""Bloc""].ToString().Trim();
                    }
                }
                con.Close();
            }

            label1.Text = ""Bine ați venit, "" + nume + "" "" + prenume + ""! "";

            SqlCommand cmd = new SqlCommand(""SELECT DISTINCT Luna FROM Chitante ORDER BY Luna "", con);
            SqlCommand cmd2 = new SqlCommand(""SELECT DISTINCT Anul FROM Chitante ORDER BY Anul "", con);

            try
            {
                con.Open();
                SqlDataReader reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    kryptonComboBox1.Items.Add(reader[""Luna""].ToString());
                }
                reader.Close();

                SqlDataReader reader2 = cmd2.ExecuteReader();

                while (reader2.Read())
                {
                    kryptonComboBox2.Items.Add(reader2[""Anul""].ToString());
                }

                reader2.Close();

            }

            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            finally
            {
                con.Close();
            }


        }
        private void materialSwitch1_CheckStateChanged(object sender, EventArgs e)
        {
            if (materialSwitch1.CheckState == CheckState.Checked)
            {
                this.BackColor = Color.FromArgb(34, 36, 49);
                Logo.ForeColor = Color.White;
                label8.ForeColor = Color.White;
                label7.ForeColor = Color.White;
                label6.ForeColor = Color.White;
                label5.ForeColor = Color.White;
                label4.ForeColor = Color.White;
                label3.ForeColor = Color.White;
                label2.ForeColor = Color.White;
                label1.ForeColor = Color.White;
                materialSwitch1.ForeColor = Color.White;
            }
            else if (materialSwitch1.CheckState == CheckState.Unchecked)
            {
                this.BackColor = Color.White;
                Logo.ForeColor = Color.Black;
                label8.ForeColor = Color.Black;
                label7.ForeColor = Color.Black;
                label6.ForeColor = Color.Black;
                label5.ForeColor = Color.Black;
                label4.ForeColor = Color.Black;
                label3.ForeColor = Color.Black;
                label2.ForeColor = Color.Black;
                label1.ForeColor = Color.Black;
                materialSwitch1.ForeColor = Color.Black;
            }
            verify_dark_mode();
        }
        private void verify_dark_mode()
        {
            string blocname = """";
            string idnp = Form1.instance2.idnp.Text;


            string query = @""SELECT Nume,Prenume,Bloc FROM Locatari where IDNP = '"" + idnp + ""' "";
            using (SqlCommand command = new SqlCommand(query, con))
            {
                con.Open();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        blocname = reader[""Bloc""].ToString().Trim();
                    }
                }
                con.Close();
            }
            string imagepath = """";
            if (blocname == ""1"" || blocname == ""2"")
            {
                if (materialSwitch1.CheckState == CheckState.Checked)
                {
                    imagepath = ""pussinessdark.png"";
                }
                else imagepath = ""business.png"";
                pictureBox1.Image = System.Drawing.Image.FromFile(imagepath);
            }
            else
            {
                if (materialSwitch1.CheckState == CheckState.Checked)
                {
                    imagepath = ""pussiness2dark.png"";
                }
                else imagepath = ""business2.png"";
                pictureBox1.Image = System.Drawing.Image.FromFile(imagepath);
            }
        }

        public void kryptonButton1_Click(object sender, EventArgs e)
        {
            if (kryptonComboBox1.SelectedItem != null && kryptonComboBox2.SelectedItem != null)
            {
                string lumina = """";
                string paznic = """";
                string parcare = """";
                string altele = """";

                string luna = kryptonComboBox1.SelectedItem.ToString().Trim();
                string anul = kryptonComboBox2.SelectedItem.ToString().Trim();
                string nume = """", prenume = """", blocname = """", idnp;
                idnp = Form1.instance2.idnp.Text;


                string query = @""SELECT Nume,Prenume,Bloc FROM Locatari where IDNP = '"" + idnp + ""' "";
                using (SqlCommand command = new SqlCommand(query, con))
                {
                    con.Open();
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            nume = reader[""Nume""].ToString().Trim();
                            prenume = reader[""Prenume""].ToString().Trim();
                            blocname = reader[""Bloc""].ToString().Trim();
                        }
                    }
                    con.Close();
                }
                label1.Text = ""Bine ați venit, "" + nume + "" "" + prenume + ""! "";
                panel2.Hide();
                panel1.Show();

                string query2 = @""SELECT Lumina, Paznic, Parcare, Altele from Chitante where idnp = '"" + idnp + ""' and Luna = '"" + luna + ""' and Anul = '"" + anul + ""'"";
                using (SqlCommand command = new SqlCommand(query2, con))
                {
                    con.Open();
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            lumina = reader[""Lumina""].ToString().Trim();
                            paznic = reader[""Paznic""].ToString().Trim();
                            parcare = reader[""Parcare""].ToString().Trim();
                            altele = reader[""Altele""].ToString().Trim();
                        }
                    }
                    con.Close();
                }



                double suma = Convert.ToDouble(lumina) + Convert.ToDouble(paznic) + Convert.ToDouble(parcare) + Convert.ToDouble(altele);

                label2.Text = ""Suma totală pe luna "" + luna + "" "" + anul + "": "" + suma + "" lei"";
                label3.Text = ""Lumină: "" + lumina + "" lei"";
                label4.Text = ""Paznic: "" + paznic + "" lei"";
                label5.Text = ""Parcare: "" + parcare + "" lei"";
                label6.Text = ""Altele: "" + altele + "" lei"";

                label10.Text = DateTime.Now.ToString();
                pret_lumina.Text = lumina;
                pret_paznic.Text = paznic;
                pret_parcare.Text = parcare;
                label13.Text = altele;
                total.Text = suma.ToString();
            }
            else MessageBox.Show(""Alegeti va rog campurile de mai sus!"", ""Eroare"", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }



        private void kryptonButton4_Click(object sender, EventArgs e)
        {
            this.Size = new System.Drawing.Size(500, 750);
            //panel3.Location = new Point(12, 5);


            //salvarea in png, jpg fisierul de check
            using (Bitmap bmp = new Bitmap(panel3.Width, panel3.Height))
            {
                panel3.DrawToBitmap(bmp, new Rectangle(0, 0, bmp.Width, bmp.Height));
                using (SaveFileDialog saveFileDialog = new SaveFileDialog())
                {
                    saveFileDialog.Title = ""Salvarea chitanței"";
                    saveFileDialog.Filter = ""PNG Image|*.png|JPG Image|*.jpg"";
                    saveFileDialog.FileName = ""Chitanta"";
                    if (saveFileDialog.ShowDialog() == DialogResult.OK)
                    {
                        bmp.Save(saveFileDialog.FileName);

                    }
                }
            }
        }
    }
}
"
NEaM9qje,Alicom (Form2),vicheauuu,C#,Wednesday 29th of May 2024 12:39:34 AM CDT,"using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Practica_3
{
    public partial class Form2 : Form
    {
        public Form2()
        {
            InitializeComponent();
        }
        SqlConnection con = new SqlConnection(@""Data Source=VICHEAUUU\SQLEXPRESS;Initial Catalog=Alicom;Integrated Security=True"");
        public int bloc_ales;
        private void pictureBox4_MouseEnter(object sender, EventArgs e)
        {
            pictureBox4.SizeMode = PictureBoxSizeMode.StretchImage;
            pictureBox4.Cursor = Cursors.Hand;
            pictureBox4.Size = new System.Drawing.Size(285, 319);
        }

        void check_darkmode()
        {
            string imagepath = """";
            string imagepath2 = """";

            if (materialSwitch1.CheckState == CheckState.Checked)
            {
                //background
                this.BackColor = Color.FromArgb(34, 36, 49);
                Logo.ForeColor = Color.White;
                //blocurile
                imagepath = ""pussinessdark.png"";
                imagepath2 = ""pussiness2dark.png"";

                pictureBox1.Image = Image.FromFile(imagepath);
                pictureBox2.Image = Image.FromFile(imagepath);
                pictureBox3.Image = Image.FromFile(imagepath2);
                pictureBox4.Image = Image.FromFile(imagepath2);

                //labeluri locatar
                label6.ForeColor = Color.White;
                label7.ForeColor = Color.White;
                label8.ForeColor = Color.White;
                label9.ForeColor = Color.White;
                label10.ForeColor = Color.White;

                //labeluri chitante
                label1.ForeColor = Color.White;
                label2.ForeColor = Color.White;
                label3.ForeColor = Color.White;
                label4.ForeColor = Color.White;
                label5.ForeColor = Color.White;

                label14.ForeColor = Color.White;

                //labeluri delete locatari
                label15.ForeColor = Color.White;
                label16.ForeColor = Color.White;
                label12.ForeColor = Color.White;
                label11.ForeColor = Color.White;
                label13.ForeColor = Color.White;

            }
            else if (materialSwitch1.CheckState != CheckState.Checked)
            {
                //background
                this.BackColor = Color.White;
                Logo.ForeColor = Color.Black;

                //blocurile
                imagepath = ""business.png"";
                imagepath2 = ""business2.png"";
                pictureBox1.Image = Image.FromFile(imagepath);
                pictureBox2.Image = Image.FromFile(imagepath);
                pictureBox3.Image = Image.FromFile(imagepath2);
                pictureBox4.Image = Image.FromFile(imagepath2);

                //labeluri locatar
                label6.ForeColor = Color.Black;
                label7.ForeColor = Color.Black;
                label8.ForeColor = Color.Black;
                label9.ForeColor = Color.Black;
                label10.ForeColor = Color.Black;

                //labeluri chitante 
                label1.ForeColor = Color.Black;
                label2.ForeColor = Color.Black;
                label3.ForeColor = Color.Black;
                label4.ForeColor = Color.Black;
                label5.ForeColor = Color.Black;

                label14.ForeColor = Color.Black;

                //labeluri delete locatari
                label15.ForeColor = Color.Black;
                label16.ForeColor = Color.Black;
                label12.ForeColor = Color.Black;
                label11.ForeColor = Color.Black;
                label13.ForeColor = Color.Black;

            }

            //blocurile


        }

        private void pictureBox4_MouseLeave(object sender, EventArgs e)
        {
            pictureBox4.SizeMode = PictureBoxSizeMode.StretchImage;
            pictureBox4.Cursor = Cursors.Default;
            pictureBox4.Size = new System.Drawing.Size(247, 266);
        }

        private void pictureBox3_MouseEnter(object sender, EventArgs e)
        {
            pictureBox3.SizeMode = PictureBoxSizeMode.StretchImage;
            pictureBox3.Cursor = Cursors.Hand;
            pictureBox3.Size = new System.Drawing.Size(285, 319);
        }

        private void pictureBox3_MouseLeave(object sender, EventArgs e)
        {
            pictureBox3.SizeMode = PictureBoxSizeMode.StretchImage;
            pictureBox3.Cursor = Cursors.Default;
            pictureBox3.Size = new System.Drawing.Size(247, 266);
        }

        private void pictureBox2_MouseEnter(object sender, EventArgs e)
        {
            pictureBox2.SizeMode = PictureBoxSizeMode.StretchImage;
            pictureBox2.Cursor = Cursors.Hand;
            pictureBox2.Size = new System.Drawing.Size(285, 319);
        }

        private void pictureBox2_MouseLeave(object sender, EventArgs e)
        {
            pictureBox2.SizeMode = PictureBoxSizeMode.StretchImage;
            pictureBox2.Cursor = Cursors.Default;
            pictureBox2.Size = new System.Drawing.Size(247, 266);
        }

        private void pictureBox1_MouseEnter(object sender, EventArgs e)
        {
            pictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
            pictureBox1.Cursor = Cursors.Hand;
            pictureBox1.Size = new System.Drawing.Size(285, 319);
        }

        private void pictureBox1_MouseLeave(object sender, EventArgs e)
        {
            pictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
            pictureBox1.Cursor = Cursors.Default;
            pictureBox1.Size = new System.Drawing.Size(247, 266);
        }

        private void pictureBox4_Click(object sender, EventArgs e)
        {
            //intri blocul 4
            pictureBox4.Visible = false;
            pictureBox3.Visible = false;
            pictureBox2.Visible = false;
            pictureBox1.Visible = false;

            //pictureBox6.Visible = true;
            //pictureBox6.Location = new System.Drawing.Point(-39, 298);
            panel3.Visible = true;
            bloc_ales = 4;
        }

        private void kryptonButton1_Click(object sender, EventArgs e)
        {

            String lumina = kryptonTextBox2.Text;
            String paznic = kryptonTextBox1.Text;
            String parcare = kryptonTextBox3.Text;
            String altele = kryptonTextBox4.Text;

            String new_query = ""DECLARE @LunaCurenta NVARCHAR(20) = FORMAT(GETDATE(), 'MMMM', 'ro-RO');"" +
                "" SET @LunaCurenta = UPPER(LEFT(@LunaCurenta, 1)) + SUBSTRING(@LunaCurenta, 2, LEN(@LunaCurenta) - 1);"" +
                "" DECLARE @AnulCurent NVARCHAR(4) = FORMAT(GETDATE(), 'yyyy');"" +
                "" DECLARE @i INT = 1;"" +
                "" WHILE (@i <= (SELECT COUNT(*) FROM locatari))"" +
                "" BEGIN"" +
                "" DECLARE @IDNP BIGINT = (SELECT idnp FROM locatari WHERE nr = @i AND bloc = '"" + bloc_ales + ""');"" +
                "" DECLARE @Masina INT = (SELECT masina FROM locatari WHERE nr = @i AND bloc = '"" + bloc_ales + ""');"" +
                "" DECLARE @Pret INT = CASE WHEN @Masina = 1 THEN CONVERT(INT, ""+parcare+"") ELSE 0 END;"" +
                "" IF @IDNP IS NOT NULL"" +
                "" BEGIN"" +
                "" INSERT INTO chitante"" +
                "" VALUES (@IDNP, @LunaCurenta ,@AnulCurent,"" + lumina + "", "" + paznic + "", @Pret, "" + altele + "");"" +
                "" END"" +
                "" SET @i = @i + 1;"" +
                "" END;"";
                con.Open();

            using (SqlCommand cmd = new SqlCommand(new_query, con))
            {

                int rowsAffected = cmd.ExecuteNonQuery();
                if (rowsAffected == 0)
                {
                    MessageBox.Show(""Eroare la adăugare în BD"", ""Eroare!"", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                else
                {
                    MessageBox.Show(""Chitanțele s-au adăugat cu succes"", ""Succes!"", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                con.Close();
            }
        }

        private void pictureBox3_Click(object sender, EventArgs e)
        {
            //intri blocul 3
            pictureBox4.Visible = false;
            pictureBox3.Visible = false;
            pictureBox2.Visible = false;
            pictureBox1.Visible = false;

            panel3.Visible = true;
            bloc_ales = 3;
        }

        private void pictureBox2_Click(object sender, EventArgs e)
        {
            //intri blocul 2
            pictureBox4.Visible = false;
            pictureBox3.Visible = false;
            pictureBox2.Visible = false;
            pictureBox1.Visible = false;

            panel3.Visible = true;
            bloc_ales = 2;
        }

        private void pictureBox1_Click(object sender, EventArgs e)
        {
            //intri in blocul1
            pictureBox4.Visible = false;
            pictureBox3.Visible = false;
            pictureBox2.Visible = false;
            pictureBox1.Visible = false;

            panel3.Visible = true;
            bloc_ales = 1;
        }

        private void kryptonButton2_Click(object sender, EventArgs e)
        {
            panel3.Visible = true;
            panel1.Visible = false;
        }

        private void kryptonButton6_Click(object sender, EventArgs e)
        {
            panel3.Visible = false;
            panel2.Visible = true;
        }

        private void kryptonButton3_Click(object sender, EventArgs e)
        {
            panel3.Visible = true;
            panel2.Visible = false;
        }

        private void kryptonButton5_Click(object sender, EventArgs e)
        {
            panel1.Visible = true;
            panel3.Visible = false;
        }

        private void kryptonButton7_Click(object sender, EventArgs e)
        {
            panel3.Visible = false;
            pictureBox4.Visible = true;
            pictureBox3.Visible = true;
            pictureBox2.Visible = true;
            pictureBox1.Visible = true;
        }



        private void kryptonButton4_Click(object sender, EventArgs e)
        {
            //enter la locatari noi

            

            String nume = kryptonTextBox7.Text;
            String prenume = kryptonTextBox8.Text;
            String idnp = kryptonTextBox6.Text;
            String masina = ""0"";

            if (materialRadioButton1.Checked)
            {
                masina = ""1"";
            }
            else if (materialRadioButton2.Checked)
            {
                masina = ""0"";
            }

            String query =
                "" declare @i INT = 0; "" +
                "" set @i = (select count(*) from locatari); "" +
                "" dbcc checkident('locatari',reseed,@i)"" +
                "" INSERT INTO locatari (IDNP, Nume, Prenume, Bloc,Masina) VALUES (@idnp, @nume, @prenume, @bloc_ales,'""+masina+""') "";
            

                con.Open();
                using (SqlCommand cmd = new SqlCommand(query, con))
                {
                    cmd.Parameters.AddWithValue(""@idnp"", idnp);
                    cmd.Parameters.AddWithValue(""@nume"", nume);
                    cmd.Parameters.AddWithValue(""@prenume"", prenume);
                    cmd.Parameters.AddWithValue(""@bloc_ales"", bloc_ales);


                    int rowsAffected = cmd.ExecuteNonQuery();
                    if (rowsAffected == 0)
                    {
                        MessageBox.Show(""Eroare la adăugarea în BD"");
                    }
                    else
                    {
                        MessageBox.Show(""Datele s-au adăugat cu succes"");
                    }
                }
                con.Close();
        }

        private void kryptonButton10_Click(object sender, EventArgs e)
        {
            panel4.Visible = true;
            panel3.Visible = false;
        }

        private void kryptonButton8_Click(object sender, EventArgs e)
        {
            panel3.Visible = true;
            panel4.Visible = false;
        }

        private void kryptonButton9_Click(object sender, EventArgs e)
        {
            String nume = kryptonTextBox11.Text;
            String prenume = kryptonTextBox12.Text;
            String idnp = kryptonTextBox10.Text;
            String bloc = kryptonTextBox9.Text;


            String query_delete = ""delete from locatari where idnp = '""+idnp+""' and nume = '""+nume+""' and prenume = '""+prenume+""' and bloc = '""+bloc+""' ""
                + "" declare @i INT = 0;"" +
                "" set @i = (select count(*) from locatari) - 1;"" +
                "" dbcc checkident('locatari',reseed,@i)"";

            con.Open();
            using (SqlCommand cmd = new SqlCommand(query_delete, con))
            {
                cmd.Parameters.AddWithValue(""@idnp"", idnp);
                cmd.Parameters.AddWithValue(""@nume"", nume);
                cmd.Parameters.AddWithValue(""@prenume"", prenume);
                cmd.Parameters.AddWithValue(""@bloc"", bloc);

                int rowsAffected = cmd.ExecuteNonQuery();
                if (rowsAffected == 0)
                {
                    MessageBox.Show(""Eroare la stergere din BD"");
                }
                else
                {
                    MessageBox.Show(""Datele s-au șters cu succes"");
                    panel4.Visible = false;
                    panel3.Visible = false;
                }
            }
            con.Close();
      
        }

        private void materialSwitch1_CheckedChanged(object sender, EventArgs e)
        {
            check_darkmode();
        }
    }
}
"
5dKrCW4W,Hide the Storyline Player Lightbox Close Button,nrzmalik,JavaScript,Wednesday 29th of May 2024 12:37:22 AM CDT,"function addCssToHead(cssRules) {
    var styleElement = document.createElement('style');
    styleElement.textContent = cssRules;
    document.head.appendChild(styleElement);
}
var css = `#light-box-close { display: none !important;} `;
addCssToHead(css);"
QyRpqctp,💰G2A.com Free Gift Card Guide 2024 May💰,Alfonso1119,Python,Wednesday 29th of May 2024 12:14:48 AM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_4306588.pdf

Working as of:

29 May 2024"
8ZmSyfXe,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Wednesday 29th of May 2024 12:04:26 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_534411.pdf

Working as of:
29 May 2024"
xAbmAyLR,💸G2A.com Free Gift Card Guide 2024 May💰,lookos13,Python,Tuesday 28th of May 2024 11:54:33 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Apple gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_4306588.pdf

Working as of:

29 May 2024"
P9MasqQ1,💸G2A.com Free Gift Card Guide 2024 May🚀,pestinha,Python,Tuesday 28th of May 2024 11:47:46 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Steam gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_4306588.pdf

Working as of:

29 May 2024"
d2sE356N,Programs in 6502 assembly,UnuLaTrei,6502 ACME Cross Assembler,Tuesday 28th of May 2024 11:35:27 PM CDT,"	LDX #0
loop:
	LDA message, X
	BEQ exit
	STA $8000, X
	INX
	JMP loop
exit:
	BRK

	.data
message:
	.db ""Hello, world!"", 0
	"
3VWxNzkz,Roe2js :: Refresh GUI,jargon,JavaScript,Tuesday 28th of May 2024 11:20:29 PM CDT,"	function refreshGui(){
		
		let id = 'viewframe';
		
		createViewFramePositions(`${id}`);
		
		var elements = document.querySelectorAll(`.${id}`);
		elements.forEach(function(element) {
			
			if(element){
				
				let id = element.id.split('_')[0];
				
				let x = parseInt(element.id.split('_')[1],10);
				let y = parseInt(element.id.split('_')[2],10);
				
				let z = parseInt(element.id.split('_')[3],10);
								
				switch (true){
				case (x <= viewConstraints.viewMinX):
				case (x >= viewConstraints.viewMaxX):
				case (y <= viewConstraints.viewMinY):
				case (y >= viewConstraints.viewMaxY):
					switch(z){
					case gui:
						element.style.backgroundImage = `url(http://${host}/GFX/${outOfBoundsCell}.png)`;
						break;
					case shader:
						element.style.backgroundColor = `rgba(255, 0, 0, 0.3)`;
						break;
					}
					break;
				default:
					switch(z){
					case gui:
					case shader:
						element.style.backgroundImage = `url(http://${host}/GFX/${emptyCell}.png)`;
						element.style.backgroundColor = `rgba(0, 0, 0, 0.0)`;
						break;
					}				
					break;
				}
			}
		}
	}

	critterAnimateTimer = setInterval(takeTurns, 1500);
	guiAnimateTimer = setInterval(refreshGui, 50);
	
	// setTimeout(requestAnimationFrame(clock), 1500);
"
gymkXsZM,stargate control,pierrejean,Lua,Tuesday 28th of May 2024 11:06:13 PM CDT,"-- Effacer l'écran
term.clear()
term.setCursorPos(1, 1)

-- Demandez à l'utilisateur de saisir l'adresse de la Stargate
print(""Veuillez entrer l'adresse de la Stargate :"")
local address = read()

-- Vérifiez si la Stargate est présente
if peripheral.isPresent(address) then
    local sg = peripheral.wrap(address)
    
    -- Vérifiez si la Stargate a les méthodes nécessaires
    if peripheral.hasMethod(address, ""engageSymbol"") and peripheral.hasMethod(address, ""openIris"") and peripheral.hasMethod(address, ""isStargateConnected"") then
        -- Faites tourner les chevrons
        for i = 1, #address do
            sg.engageSymbol(address:sub(i, i))
            os.sleep(1) -- Pause de 1 seconde entre chaque chevron
        end

        -- Ouvrez la Stargate
        sg.openIris()
        print(""La Stargate à l'adresse "" .. address .. "" a été ouverte."")
        
        -- Vérifiez si la Stargate est connectée
        if sg.isStargateConnected() then
            print(""La Stargate est connectée."")
        else
            print(""Erreur : La Stargate n'est pas connectée."")
            os.reboot() -- Relance le programme
        end
    else
        print(""La Stargate à l'adresse "" .. address .. "" n'a pas les méthodes nécessaires."")
    end
else
    print(""Aucune Stargate trouvée à l'adresse "" .. address)
end
"
TFUBWTxS,Block G2A spam from public pastes with ublock,kisazeky,Bash,Tuesday 28th of May 2024 10:55:16 PM CDT,"! add to filter
pastebin.com##li:has-text(G2A.com)"
mpmYv98p,index.js - stream (29/05),james-codes,JavaScript,Tuesday 28th of May 2024 10:55:00 PM CDT,"document.addEventListener('DOMContentLoaded', () => {
    sortSideMenu();
    let summary = {};
    let currentVideo = { id: '', season: '', episode: '' };
    const autoPlayToggle = document.getElementById('autoPlayToggle');

    // Fetch the JSON file
    fetch('/assets/database/movies.json')
        .then(response => response.json())
        .then(data => {
            // Map the titles to their corresponding descriptions
            data.movies.forEach(movie => {
                summary[movie.title] = movie.description;
            });

            // Define the changeVideo function after loading the JSON
            window.changeVideo = function (source, title, descriptionKey, hasCustomSubtitles = false, subFile = '', subLabel = '') {
                let video = document.getElementById('videoPlayer');
                const shows = ['tv'];
                let url = '';

                // Extract season and episode if available
                let [id, season, episode] = source.split('/').slice(1);
                currentVideo = { id, season, episode };

                // Check if the source is a TV show or a movie and construct the base URL
                if (!shows.some(show => source.includes(show))) {
                    url = `https://vidsrc.to/embed/movie/${source}`;
                } else {
                    url = `https://vidsrc.to/embed/${source}`;
                }

                // If the video has custom subtitles, append the subtitle parameters to the URL
                if (hasCustomSubtitles) {
                    url += `&sub=${subFile}&label=${subLabel}`;
                }

                // Update the iframe URL
                video.src = url;

                // Update the video title and description
                document.querySelector('.video-title').innerText = title;
                document.querySelector('.video-description').innerText = summary[descriptionKey] || 'No description available.';
            }
        })
        .catch(error => console.error('Error loading JSON file:', error));

    const sideMenu = document.getElementById('sideMenu');
    const burgerButton = document.querySelector('.burger-button');
    const darkModeToggle = document.getElementById('darkModeToggle');

    burgerButton.addEventListener('click', () => {
        sideMenu.classList.toggle('open');
    });

    // Close the side menu when a menu item is clicked
    document.querySelectorAll('.side-menu ul li').forEach(item => {
        item.addEventListener('click', () => {
            sideMenu.classList.remove('open');
        });
    });

    darkModeToggle.addEventListener('change', () => {
        document.body.classList.toggle('dark-mode', darkModeToggle.checked);
    });

    const videoPlayer = document.getElementById('videoPlayer');
    videoPlayer.addEventListener('load', () => {
        const iframeDoc = videoPlayer.contentDocument || videoPlayer.contentWindow.document;
        if (iframeDoc) {
            const script = iframeDoc.createElement('script');
            script.type = 'text/javascript';
            script.text = `
                document.addEventListener('click', (e) => {
                    e.preventDefault();
                    const target = e.target.closest('a');
                    if (target && target.href) {
                        e.stopPropagation();
                        e.preventDefault();
                    }
                }, true);
            `;
            iframeDoc.head.appendChild(script);
        }
    });

    videoPlayer.addEventListener('ended', () => {
        if (autoPlayToggle.checked) {
            playNextEpisode();
        }
    });

    function playNextEpisode() {
        let nextEpisode = parseInt(currentVideo.episode) + 1;
        let nextSource = `tv/${currentVideo.id}/${currentVideo.season}/${nextEpisode}`;
        changeVideo(nextSource, document.querySelector('.video-title').innerText, document.querySelector('.video-title').innerText);
    }
});

function toggleMenu() {
    document.getElementById('sideMenu').classList.toggle('open');
}

function changePoster(posterSrc) {
    const poster = document.createElement('img');
    poster.src = posterSrc;
    poster.classList.add('poster');
    document.querySelector('.content').appendChild(poster);
}

function hidePoster() {
    const poster = document.querySelector('.content .poster');
    if (poster) {
        poster.remove();
    }
}

function toggleFullScreen() {
    var elem = document.getElementById(""videoPlayer"");
    if (!document.fullscreenElement) {
        if (elem.requestFullscreen) {
            elem.requestFullscreen();
            adjustVideoContainerPadding();
        }
    } else {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        }
        resetVideoContainerPadding();
    }
}

function adjustVideoContainerPadding() {
    var videoContainer = document.querySelector("".video-container"");
    var aspectRatio = 9 / 16;
    var screenWidth = window.innerWidth;
    var newPaddingTop = screenWidth * aspectRatio + ""px"";
    videoContainer.style.paddingTop = newPaddingTop;
}

function resetVideoContainerPadding() {
    var videoContainer = document.querySelector("".video-container"");
    videoContainer.style.paddingTop = ""56.25%""; // Reset to default value
}

function toggleDarkMode() {
    document.body.classList.toggle('dark-mode');
}

function sortSideMenu() {
    const menu = document.querySelector('.scrollable');
    Array.from(menu.getElementsByTagName('li'))
        .sort((a, b) => a.textContent.localeCompare(b.textContent))
        .forEach(li => menu.appendChild(li));
}

const burgerButton = document.querySelector('.burger-button');

burgerButton.addEventListener('click', () => {
    toggleMenu();
});"
3sBUnKu4,Untitled,LynXS_,Lua,Tuesday 28th of May 2024 10:11:46 PM CDT,"local Name = ""others""
local Targets = {
		""All""
	} -- ""All"", ""Target Name"", ""arian_was_here""
	local Players = game:GetService(""Players"")
	local Player = Players.LocalPlayer
	local AllBool = false
	local GetPlayer = function(Name)
		Name = Name:lower()
		if Name == ""all"" or Name == ""others"" then
			AllBool = true
			return
		elseif Name == ""random"" then
			local GetPlayers = Players:GetPlayers()
			if table.find(GetPlayers, Player) then
				table.remove(GetPlayers, table.find(GetPlayers, Player))
			end
			return GetPlayers[math.random(#GetPlayers)]
		elseif Name ~= ""random"" and Name ~= ""all"" and Name ~= ""others"" then
			for _, x in next, Players:GetPlayers() do
				if x ~= Player then
					if x.Name:lower():match(""^"" .. Name) then
						return x;
					elseif x.DisplayName:lower():match(""^"" .. Name) then
						return x;
					end
				end
			end
		else
			return
		end
	end
	local Message = function(_Title, _Text, Time)
		game:GetService(""StarterGui""):SetCore(""SendNotification"", {
			Title = _Title,
			Text = _Text,
			Duration = Time
		})
	end
	local SkidFling = function(TargetPlayer)
		local Character = Player.Character
		local Humanoid = Character and Character:FindFirstChildOfClass(""Humanoid"")
		local RootPart = Humanoid and Humanoid.RootPart
		local TCharacter = TargetPlayer.Character
		local THumanoid
		local TRootPart
		local THead
		local Accessory
		local Handle
		if TCharacter:FindFirstChildOfClass(""Humanoid"") then
			THumanoid = TCharacter:FindFirstChildOfClass(""Humanoid"")
		end
		if THumanoid and THumanoid.RootPart then
			TRootPart = THumanoid.RootPart
		end
		if TCharacter:FindFirstChild(""Head"") then
			THead = TCharacter.Head
		end
		if TCharacter:FindFirstChildOfClass(""Accessory"") then
			Accessory = TCharacter:FindFirstChildOfClass(""Accessory"")
		end
		if Accessoy and Accessory:FindFirstChild(""Handle"") then
			Handle = Accessory.Handle
		end
		if Character and Humanoid and RootPart then
			if RootPart.Velocity.Magnitude < 50 then
				getgenv().OldPos = RootPart.CFrame
			end
			if THumanoid and THumanoid.Sit and not AllBool then
				return Message(""Error Occurred"", ""Targeting is sitting"", 5) -- u can remove dis part if u want lol
			end
			if THead then
				game:GetService(""Workspace"").CurrentCamera.CameraSubject = THead
			elseif not THead and Handle then
				game:GetService(""Workspace"").CurrentCamera.CameraSubject = Handle
			elseif THumanoid and TRootPart then
				game:GetService(""Workspace"").CurrentCamera.CameraSubject = THumanoid
			end
			if not TCharacter:FindFirstChildWhichIsA(""BasePart"") then
				return
			end
			local FPos = function(BasePart, Pos, Ang)
				RootPart.CFrame = CFrame.new(BasePart.Position) * Pos * Ang
				Character:SetPrimaryPartCFrame(CFrame.new(BasePart.Position) * Pos * Ang)
				RootPart.Velocity = Vector3.new(9e7, 9e7 * 10, 9e7)
				RootPart.RotVelocity = Vector3.new(9e8, 9e8, 9e8)
			end
			local SFBasePart = function(BasePart)
				local TimeToWait = 2
				local Time = tick()
				local Angle = 0
				repeat
					if RootPart and THumanoid then
						if BasePart.Velocity.Magnitude < 50 then
							Angle = Angle + 100
							FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0 , 0))
							task.wait()
							FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
							task.wait()
							FPos(BasePart, CFrame.new(2.25, 1.5, -2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
							task.wait()
							FPos(BasePart, CFrame.new(-2.25, -1.5, 2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
							task.wait()
							FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection, CFrame.Angles(math.rad(Angle), 0, 0))
							task.wait()
							FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection, CFrame.Angles(math.rad(Angle), 0, 0))
							task.wait()
						else
							FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
							task.wait()
							FPos(BasePart, CFrame.new(0, -1.5, -THumanoid.WalkSpeed), CFrame.Angles(0, 0, 0))
							task.wait()
							FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
							task.wait()
							FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
							task.wait()
							FPos(BasePart, CFrame.new(0, -1.5, -TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(0, 0, 0))
							task.wait()
							FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
							task.wait()
							FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(math.rad(90), 0, 0))
							task.wait()
							FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
							task.wait()
							FPos(BasePart, CFrame.new(0, -1.5 , 0), CFrame.Angles(math.rad(-90), 0, 0))
							task.wait()
							FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
							task.wait()
						end
					else
						break
					end
				until BasePart.Velocity.Magnitude > 500 or BasePart.Parent ~= TargetPlayer.Character or TargetPlayer.Parent ~= Players or not TargetPlayer.Character == TCharacter or THumanoid.Sit or Humanoid.Health <= 0 or tick() > Time + TimeToWait
			end
			game:GetService(""Workspace"").FallenPartsDestroyHeight = 0 / 0
			local BV = Instance.new(""BodyVelocity"")
			BV.Name = ""EpixVel""
			BV.Parent = RootPart
			BV.Velocity = Vector3.new(9e8, 9e8, 9e8)
			BV.MaxForce = Vector3.new(1 / 0, 1 / 0, 1 / 0)
			Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
			if TRootPart and THead then
				if (TRootPart.CFrame.p - THead.CFrame.p).Magnitude > 5 then
					SFBasePart(THead)
				else
					SFBasePart(TRootPart)
				end
			elseif TRootPart and not THead then
				SFBasePart(TRootPart)
			elseif not TRootPart and THead then
				SFBasePart(THead)
			elseif not TRootPart and not THead and Accessory and Handle then
				SFBasePart(Handle)
			else
				return Message(""Error Occurred"", ""Target is missing everything"", 5)
			end
			BV:Destroy()
			Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
			game:GetService(""Workspace"").CurrentCamera.CameraSubject = Humanoid
			repeat
				RootPart.CFrame = getgenv().OldPos * CFrame.new(0, .5, 0)
				Character:SetPrimaryPartCFrame(getgenv().OldPos * CFrame.new(0, .5, 0))
				Humanoid:ChangeState(""GettingUp"")
				table.foreach(Character:GetChildren(), function(_, x)
					if x:IsA(""BasePart"") then
						x.Velocity, x.RotVelocity = Vector3.new(), Vector3.new()
					end
				end)
				task.wait()
			until (RootPart.Position - getgenv().OldPos.p).Magnitude < 25
			game:GetService(""Workspace"").FallenPartsDestroyHeight = getgenv().FPDH
		else
			return Message(""Error Occurred"", ""Random error"", 5)
		end
	end
	if not Welcome then
		Message(""甩飞已开启成功"", ""猫脚本"", 5)
	end
	getgenv().Welcome = true
	if Targets[1] then
		for _, x in next, Targets do
			GetPlayer(x)
		end
	else
		return
	end
	if AllBool then
		for _, x in next, Players:GetPlayers() do
			SkidFling(x)
		end
	end
	for _, x in next, Targets do
		if GetPlayer(x) and GetPlayer(x) ~= Player then
			if GetPlayer(x).UserId ~= 1414978355 then
				local TPlayer = GetPlayer(x)
				if TPlayer then
					SkidFling(TPlayer)
				end
			else
				Message(""Error Occurred"", ""This user is whitelisted! (Owner)"", 5)
			end
		elseif not GetPlayer(x) and not AllBool then
			Message(""Error Occurred"", ""Username Invalid"", 5)
		end
	end"
WWL4K7sZ,💰G2A.com Free Gift Card Guide 2024 May🚀,dustinction,Python,Tuesday 28th of May 2024 09:55:26 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_1673981.pdf

Working as of:

29 May 2024"
XukFwHSF,Cool GUI I made (Source code gui cheat),WeExploitersBoys,Lua,Tuesday 28th of May 2024 09:44:39 PM CDT,"    --made by rqxR

--checking if place id is valid
if game.PlaceId == 3101667897 then
local ScreenGui = Instance.new(""ScreenGui"")
local Frame = Instance.new(""Frame"")
local TextLabel = Instance.new(""TextLabel"")
local TextButton = Instance.new(""TextButton"")
local TextButton_2 = Instance.new(""TextButton"")
local TextButton_3 = Instance.new(""TextLabel"")
local TextButton_4 = Instance.new(""TextButton"")
local TextButton_5 = Instance.new(""TextButton"")
local TextButton_6 = Instance.new(""TextButton"")
--Properties:

ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild(""PlayerGui"")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0.0233208947, 0, 0.0384615399, 0)
Frame.Size = UDim2.new(0, 197, 0, 457)

TextLabel.Parent = Frame
TextLabel.BackgroundColor3 = Color3.fromRGB(124, 124, 124)
TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.BorderSizePixel = 0
TextLabel.Size = UDim2.new(0, 197, 0, 50)
TextLabel.Font = Enum.Font.SourceSans
TextLabel.Text = ""Easye's Script Hub GNG""
TextLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.TextSize = 14.000

TextButton.Parent = Frame
TextButton.BackgroundColor3 = Color3.fromRGB(88, 141, 255)
TextButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton.BorderSizePixel = 0
TextButton.Position = UDim2.new(0, 0, 0.155361056, 0)
TextButton.Size = UDim2.new(0, 197, 0, 50)
TextButton.Font = Enum.Font.SourceSans
TextButton.Text = ""Jump Fly""
TextButton.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton.TextSize = 14.000

TextButton_2.Parent = Frame
TextButton_2.BackgroundColor3 = Color3.fromRGB(88, 141, 255)
TextButton_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_2.BorderSizePixel = 0
TextButton_2.Position = UDim2.new(0, 0, 0.306345731, 0)
TextButton_2.Size = UDim2.new(0, 197, 0, 50)
TextButton_2.Font = Enum.Font.SourceSans
TextButton_2.Text = ""High Jump""
TextButton_2.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton_2.TextSize = 14.000

TextButton_3.Parent = Frame
TextButton_3.BackgroundColor3 = Color3.fromRGB(88, 141, 255)
TextButton_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_3.BorderSizePixel = 0
TextButton_3.Position = UDim2.new(0, 0, 0.48140043, 0)
TextButton_3.Size = UDim2.new(0, 197, 0, 50)
TextButton_3.Font = Enum.Font.SourceSans
TextButton_3.Text = ""Walk speed""
TextButton_3.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton_3.TextSize = 14.000

TextButton_4.Parent = TextButton_3
TextButton_4.BackgroundColor3 = Color3.fromRGB(88, 141, 255)
TextButton_4.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_4.BorderSizePixel = 0
TextButton_4.Position = UDim2.new(0, 0, 1.24140012, 0)
TextButton_4.Size = UDim2.new(0, 70, 0, 34)
TextButton_4.Font = Enum.Font.SourceSans
TextButton_4.Text = ""400""
TextButton_4.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton_4.TextSize = 14.000

TextButton_5.Parent = TextButton_3
TextButton_5.BackgroundColor3 = Color3.fromRGB(88, 141, 255)
TextButton_5.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_5.BorderSizePixel = 0
TextButton_5.Position = UDim2.new(0.385786802, 0, 1.2814002, 0)
TextButton_5.Size = UDim2.new(0, 57, 0, 32)
TextButton_5.Font = Enum.Font.SourceSans
TextButton_5.Text = ""100""
TextButton_5.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton_5.TextSize = 14.000

TextButton_6.Parent = TextButton_3
TextButton_6.BackgroundColor3 = Color3.fromRGB(88, 141, 255)
TextButton_6.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_6.BorderSizePixel = 0
TextButton_6.Position = UDim2.new(0.700507641, 0, 1.2814002, 0)
TextButton_6.Size = UDim2.new(0, 57, 0, 32)
TextButton_6.Font = Enum.Font.SourceSans
TextButton_6.Text = ""50""
TextButton_6.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton_6.TextSize = 14.000
-- actual scripts
TextButton.MouseButton1Click:Connect(function()
local infjmp = true
game:GetService(""UserInputService"").jumpRequest:Connect(function()
    if infjmp then
        game:GetService""Players"".LocalPlayer.Character:FindFirstChildOfClass""Humanoid"":ChangeState(""Jumping"")
    end
end)
end)

TextButton_2.MouseButton1Click:Connect(function()
game.Players.LocalPlayer.Character.Humanoid.JumpPower = 150
end)

TextButton_4.MouseButton1Click:Connect(function()
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 400
end)

TextButton_5.MouseButton1Click:Connect(function()
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 100
end)

TextButton_6.MouseButton1Click:Connect(function()
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 50
end)

else
local starterGui = game:GetService(""StarterGui"")

wait(1)
starterGui:SetCore(""SendNotification"", {
    Title = ""Error"",
    Text = ""Wrong Game, This Gui Doesn't Support it!"",
    Icon = ""rbxassetid://6864978825"",
    Duration = 5
})
end"
R1bkkGpP,Untitled,AllenPlayz,Lua,Tuesday 28th of May 2024 09:36:01 PM CDT,loadstring(game:HttpGet('https://raw.githubusercontent.com/tobi437a/Scripts/main/04626217ab2ba4a904a3a281.lua'))()
9jfS9AXe,🎉G2A.com Free Gift Card Guide 2024 May💰,x3kiN,Python,Tuesday 28th of May 2024 09:35:07 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Apple gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_1673981.pdf

Working as of:

29 May 2024"
x2635Bt7,EfectoBarraLILOControlado,hidromotic,C,Tuesday 28th of May 2024 09:08:24 PM CDT,"/*
 * ITES - MICROCONTROLADORES II
 * by Alejo S. Giles
 * 
 * - BlinkAsimetrico
 * - EfectoBarraLILO (6 LEDS)
 * - Boton para incrementar (avanzar en el efecto)
 * - Boton para decrementar (retrocecder en el efecto)
 * - Antirrebote para los botones
 * - Puerto Serie
 * -- Comando para incrementar (+)
 * -- Comando para decrementar (-)
 * -- Comando para reiniciar el efecto (0)
 */

#define PIN_LED1 2
#define PIN_LED2 3
#define PIN_LED3 4
#define PIN_LED4 5
#define PIN_LED5 6
#define PIN_LED6  7
#define CANT_LEDS 6
const int PIN_LEDS[]={PIN_LED1,PIN_LED2,PIN_LED3,PIN_LED4,PIN_LED5,PIN_LED6};

#define CONFIG_SALIDA(x) pinMode(x,OUTPUT)
#define AJUSTAR_LED(x,y) digitalWrite(PIN_LEDS[x],y)

//BLINK
#define PIN_BLINK         13
#define CONFIG_BLINK      pinMode(PIN_BLINK, OUTPUT)
#define ENCENDER_BLINK    digitalWrite(PIN_BLINK, 1)
#define APAGAR_BLINK      digitalWrite(PIN_BLINK, 0)
#define AJUSTAR_BLINK(x)  digitalWrite(PIN_BLINK, x)
#define MS_BLINK_ON 50
#define MS_BLINK_OFF 2000

//BOTONES
#define MS_ANTIREBOTE             100
#define PIN_BTN_INC               8
#define CONFIG_BTN_INC            pinMode(PIN_BTN_INC, INPUT)
#define BTN_INCREMENTA_PRESIONADO digitalRead(PIN_BTN_INC)

#define PIN_BTN_DEC               9
#define CONFIG_BTN_DEC            pinMode(PIN_BTN_DEC, INPUT)
#define BTN_DECREMENTA_PRESIONADO digitalRead(PIN_BTN_DEC)

#define MS_ANTIRREBOTE 100

char accion=0;

void setup()
  {
  Serial.begin(9600);
  Serial.print(""EfectoBarraLILOControlado"");
  CONFIG_BTN_INC;
  CONFIG_BTN_DEC;
  CONFIG_BLINK;
  
  //LEDS DEL EFECTO
  for(int i=0; i<CANT_LEDS; i++)  CONFIG_SALIDA(PIN_LEDS[i]);
  }

void loop()
  {
  BlinkAsimetrico();
  CtrlBotones();
  RecepcionSerie();

  EfectoBarraLILO();  //Debe actuar de acuerdo a la variable accion
  if(accion) accion=0;
  }

void RecepcionSerie(void)
  {
  if(!Serial.available()) return;
  
  switch(Serial.read())
    {
    case '-': accion=-1;  break;
    case '+': accion=1;   break;
    }
  }

void CtrlBotones(void)  
  {
  static unsigned long millis_ini=0;
  static char btn_incrementa_presionado_ant=0;
  static char btn_decrementa_presionado_ant=0;

  if(millis_ini>0) 
      {
      if(millis() - millis_ini < MS_ANTIREBOTE) return;
      millis_ini=0;
      }
  
  if(BTN_INCREMENTA_PRESIONADO != btn_incrementa_presionado_ant)
    {
    btn_incrementa_presionado_ant=BTN_INCREMENTA_PRESIONADO;
    if(BTN_INCREMENTA_PRESIONADO) 
      {
      millis_ini= millis(); //Preparar para esperar MS_ANTIREBOTE
      accion=1;
      }
    }

  if(BTN_DECREMENTA_PRESIONADO != btn_decrementa_presionado_ant)
    {
    btn_decrementa_presionado_ant=BTN_DECREMENTA_PRESIONADO;
    if(BTN_DECREMENTA_PRESIONADO) 
      {
      millis_ini= millis(); //Preparar para esperar MS_ANTIREBOTE
      accion=-1;
      }
    }
  }

void EfectoBarraLILO(void) //1=avanzar / 0=no hacer nada / -1=retroceder
  {
  static unsigned int paso=2*CANT_LEDS-1;

  if(accion==0)  return;
 
  if(accion>0)
    {
    paso++;
    if(paso>=2*CANT_LEDS) paso=0;
    }

  if(paso<CANT_LEDS)  AJUSTAR_LED(paso, accion>0);
  else                AJUSTAR_LED(paso-CANT_LEDS, !(accion>0));

  if(accion<0)
    {
    if(paso>0) paso--;
    else paso=2*CANT_LEDS-1;
    }
  }

void BlinkAsimetrico(void)
  {
  static unsigned long millis_ant=0;
  static bool estado=0;
  static unsigned int espera=0;

  if(millis() - millis_ant < espera) return;
  millis_ant=millis();

  estado=!estado;
  AJUSTAR_BLINK(estado);

  espera= estado ? MS_BLINK_ON : MS_BLINK_OFF;  //Ajustar el tiempo de espera
  }"
e57tecUQ,UpdatedShinyUIFunction.R,RichardRogers,R,Tuesday 28th of May 2024 09:06:58 PM CDT,"ui <- fluidPage(
  
  theme = shinytheme(Config$DashboardTheme),
  
  # App title ----
  titlePanel(Config$DashboardTitle),
  
  navbarPage(
    ""Tabs:"",
    
    tabPanel(""Frequency"",
             
             sidebarLayout(
               
               # Sidebar panel for inputs ----
               sidebarPanel(
                 selectInput(
                   inputId = ""UIFreq""
                   , label = ""Frequency By""
                   , choices = Frequencies
                   , selected = Frequencies[1]
                 )
                 
                 , selectInput(
                   inputId = ""UIYear""
                   , label = ""Year""
                   , choices = RiderYears$cyclingyear
                   , selected = RiderYears$cyclingyear[1]
                 )
                 
                 , selectInput(
                   inputId = ""UIQuarter""
                   , label = ""Quarter""
                   , choices = Quarters$Quarter
                   , selected = Quarters$Quarter[1]
                 )
                 
                 , selectInput(
                   inputId = ""UIMonth""
                   , label = ""Month""
                   , choices = Months$Months
                   , selected = Months$Months[1]
                 )
               ), # sidebarPanel
               
               mainPanel(
                 # fluidRow(
                 #   # plotlyOutput(""DistPlot"")
                 # ) # fluidRow
                 
                 # textOutput(""Plot1"")
                 fluidRow(
                   plotOutput(""Plot1"")
                 )
                 
               ) # mainPanel
               
             ), # sidebarLayout
    ), # tabPanel(""Frequency"")
    
    tabPanel(""Best of"",
             sidebarLayout(
               
               # Sidebar panel for inputs ----
               sidebarPanel(
                 selectInput(
                   inputId = ""UIBestOfFreq""
                   , label = ""Best of""
                   , choices = BestOf
                   , selected = BestOf[1]
                 )
                 
                 , selectInput(
                   inputId = ""UIYear""
                   , label = ""Year""
                   , choices = RiderYears$cyclingyear
                   , selected = RiderYears$cyclingyear[1]
                 )
                 
                 , selectInput(
                   inputId = ""UIQuarter""
                   , label = ""Quarter""
                   , choices = Quarters$Quarter
                   , selected = Quarters$Quarter[1]
                 )
                 
                 , selectInput(
                   inputId = ""UIMonth""
                   , label = ""Month""
                   , choices = Months$Months
                   , selected = Months$Months[1]
                 )
               ), # sidebarPanel
               
               mainPanel(
                 fluidRow(
                   plotOutput(""Plot2"")
                 ) # fluidRow
                 
               ) # mainPanel
               
             ) # sidebarLayout
    ), # tabPanel(""Best of""))
    
    tabPanel(""Cities by Name""),
    # tabPanel(""Cities by Name"", verbatimTextOutput(""Cities by Name"")),
    tabPanel(""City Map"")
    # tabPanel(""City Map"",       verbatimTextOutput(""City Map""))
  ) # navbarPage()
  
) # fluidPage"
jWbc1r7u,OldShinyUI,RichardRogers,R,Tuesday 28th of May 2024 09:02:28 PM CDT,"ui <- fluidPage(
  
  theme = Config$DashboardTheme,
  
  # App title ----
  titlePanel(Config$DashboardTitle),
  
  tabsetPanel(type = ""tabs"",
              tabPanel(""Frequency"",      verbatimTextOutput(""Frequency"")),
              tabPanel(""Best of"",        verbatimTextOutput(""Best of"")),
              tabPanel(""Cities by Name"", verbatimTextOutput(""Cities by Name"")),
              tabPanel(""City Map"",       verbatimTextOutput(""City Map""))
  ),
  
  # Sidebar layout with input and output definitions ----
  sidebarLayout(
    
    # Sidebar panel for inputs ----
    sidebarPanel(
      selectInput(
        inputId = ""UIFreq""
        , label = ""Frequency By""
        , choices = Frequencies
        , selected = Frequencies[1]
      )
      
      , selectInput(
        inputId = ""UIYear""
        , label = ""Year""
        , choices = RiderYears$cyclingyear
        , selected = RiderYears$cyclingyear[1]
      )
      
      , selectInput(
        inputId = ""UIQuarter""
        , label = ""Quarter""
        , choices = Quarters$Quarter
        , selected = Quarters$Quarter[1]
      )
      
      , selectInput(
        inputId = ""UIMonth""
        , label = ""Month""
        , choices = Months$Months
        , selected = Months$Months[1]
      )
    ), # sidebarPanel
    
    mainPanel(
      fluidRow(
        # plotlyOutput(""DistPlot"")
        plotOutput(""Plot1"")
      ) # fluidRow
      
    ) # mainPanel
    
  ) # sidebarLayout
  
) # fluidPage"
mKccVjYy,🤑G2A.com Free Gift Card Guide 2024 May🤑,atakan1983,Python,Tuesday 28th of May 2024 08:47:34 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Steam gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_1673981.pdf

Working as of:

29 May 2024"
dbvSYcAG,🤑G2A.com Free Gift Card Guide 2024 May💰,lookos13,Python,Tuesday 28th of May 2024 08:40:50 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_1673981.pdf

Working as of:

29 May 2024"
TYK6VEzC,Hypercubic Dense Tensor,Hakai69,Lua,Tuesday 28th of May 2024 08:38:50 PM CDT,"if not table.unpack then
---@diagnostic disable-next-line: deprecated
    table.unpack = unpack
end

local my_module = {}
local my_module_mt = {}

---@class Tensor
local Tensor = {}
Tensor.__index = Tensor

---Instantiates a new object
---@param dimensions integer
---@return Tensor
function my_module.init(dimensions)
    local tensor = {dimensions=dimensions, min={}, max={}}
    setmetatable(tensor, Tensor)
    return tensor
end

function my_module_mt.__call(_, dimensions) return my_module.init(dimensions) end
setmetatable(my_module, my_module_mt)

---Finds whether the variable is a tensor
---@param x any
function my_module.istensor(x)
    return getmetatable(x) == Tensor
end


---Sets the position of the tensor to the value
---@param value any
---@param position table <integer, integer>
function Tensor:set(value, position)
    if #position ~= self.dimensions then
        error(string.format('tensor has %d dimensions, not %d', self.dimensions, #position))
    end

    local temp = self
    for i=1, #position - 1 do
        if not temp[position[i]] then
            temp[position[i]] = {}
        end
        temp = temp[position[i]]

        if not self.min[i] then
            self.min[i] = position[i]
            self.max[i] = position[i]
        elseif self.min[i] > position[i] then
            self.min[i] = position[i]
        elseif self.max[i] < position[i] then
            self.max[i] = position[i]
        end

    end
    temp[position[#position]] = value

    if not self.min[#position] then
        self.min[#position] = position[#position]
        self.max[#position] = position[#position]
    elseif self.min[#position] > position[#position] then
        self.min[#position] = position[#position]
    elseif self.max[#position] < position[#position] then
        self.max[#position] = position[#position]
    end

end

---Access a position in the tensor
---@param position table <integer, integer>
---@return any
function Tensor:get(position)
    local temp = self
    for i=1, #position do
        if not temp[position[i]] then
            return 0
        end
        temp = temp[position[i]]
    end
    return temp
end

---Iterator through any cordinates, integer to set static, nil to iterate
---@param set_positions table <integer, integer | nil>
---@return function
function Tensor:iterany(set_positions)
    local co = coroutine.create(
        function ()
            local position = {}
            for i=1, self.dimensions do
                if set_positions[i] then
                    if set_positions[i] < self.min[i] or set_positions[i] > self.max[i] then
                        return
                    end
                    position[i] = set_positions[i]
                else
                    position[i] = self.min[i]
                end
            end
            local new_position
            local i
            repeat
                coroutine.yield(position, self:get(position))
                new_position = false
                i = self.dimensions
                repeat
                    if set_positions[i] then
                        i = i - 1
                    elseif position[i] + 1 > self.max[i] then
                        position[i] = self.min[i]
                        i = i - 1
                    else
                        position[i] = position[i] + 1
                        new_position = true
                    end
                until new_position or i == 0
            until i == 0
        end
    )

    return function()
        local _, pos, value = coroutine.resume(co)
        return pos, value
    end
end

---Iterator through all cordinates
---@return function
function Tensor:iterall()
    return self:iterany({})
end


do
    return my_module
end

---Test code
local a = my_module(2)
a:set(1, {2, 1})
a:set(1, {2, 2})
a:set(1, {2,-1})
a:set(1, {1, 0})
local value = a:get{2, 1}

for index, element in a:iterall() do
    local k, v = next(index)
    io.write('{', v)
    for _, coord in next, index, k do
        io.write(', ' .. coord)
    end
    io.write('}\t')
    print(element)
end"
rCUcpusE,new_compiler,Hakai69,Lua,Tuesday 28th of May 2024 08:37:36 PM CDT,"---@module 'tensor'
local Tensor = require('tensor')

---@module 'term'
local term = term or require('term')

local schematic = Tensor(3)
local pieces = {}


---Splits a string by a separator
---@param str string
---@param sep? string
---@return table
local function split(str, sep)
    sep = sep or ""%s""

    local t = {}
    for cut in string.gmatch(str, ""([^""..sep..""]+)"") do
            table.insert(t, cut)
    end
    return t
end

---Reads file with commands to make an schematic and returns the commands in a table
---@param filename string
---@return table
local function read_schematic(filename)
    local commands = {}
    for line in io.lines(filename) do
        table.insert(commands, split(line))
    end

    return commands
end

---Takes however many parameters and turns them into numbers
---@param ... any
---@return number ...
local function numeric_inputs(...)
    local output = {}
    for _, input in ipairs(arg) do
        table.insert(output, tonumber(input))
    end
    return table.unpack(output)
end


local allign_table = {
    [""t""] = function (piece)
        return piece.y + piece.sy
    end,
    ['b'] = function (piece, new_piece_size)
        return piece.y - new_piece_size
    end,
    ['e'] = function (piece)
        return piece.x + piece.sx
    end,
    ['w'] = function (piece, new_piece_size)
        return piece.x - new_piece_size
    end,
    ['s'] = function (piece)
        return piece.z + piece.sz
    end,
    ['n'] = function (piece, new_piece_size)
        return piece.z - new_piece_size
    end,
    ['c'] = function (piece, new_piece_size, axis)
        local piece_size = piece['s' .. axis]
        local piece_position = piece[axis]
        if piece_size % 2 == new_piece_size % 2 then
            if piece_size % 2 == 1 then
                return piece_position + (piece_size + 1)/2 - (new_piece_size + 1)/2
            elseif piece_size % 2 == 0 then
                return piece_position + piece_size/2 - new_piece_size/2
            end
        else
            error('Tried to line up two pieces with different parity!')
        end
    end,
}
local alling_table_mt = {
    __index = function (t, k)
        error(k.. ' is not a valid allignment')
    end
}
setmetatable(allign_table, alling_table_mt)

---From allignment notations to coordinates
---@param parameter string Parameter to parse
---@param new_piece_size integer
---@param axis string 
---@return integer
local function allign(parameter, new_piece_size, axis)
    local allignment_type = string.sub(parameter, 1, 1)
    local piece_id = #pieces - (tonumber(string.sub(parameter,2)) or 0)

    local piece = pieces[piece_id]

    return allign_table[allignment_type](piece, new_piece_size, axis)
end

---Determines whether x, y, z need to be parsed in terms of allignment or are numbers and returns the position
---@param x string
---@param y string
---@param z string
---@param sx integer
---@param sy integer
---@param sz integer
---@return integer
---@return integer
---@return integer
local function process_position(x, y, z, sx, sy, sz)
    local processed_x = tonumber(x) or allign(x, sx, 'x')
    local processed_y = tonumber(y) or allign(y, sy, 'y')
    local processed_z = tonumber(z) or allign(z, sz, 'z')
    return processed_x, processed_y, processed_z
end


-- COMMANDS --

---Creates a cuboid at x, y, z of size sx, sy, sz of material m
---@param x_positioning string
---@param y_positioning string
---@param z_positioning string
---@param x_size string
---@param y_size string
---@param z_size string
---@param material string
local function cuboid(x_positioning, y_positioning, z_positioning, x_size, y_size, z_size, material)
    local sx, sy, sz, m = numeric_inputs(x_size, y_size, z_size, material)
    local x, y, z = process_position(x_positioning, y_positioning, z_positioning, sx, sy, sz)

    for i=x, sx + x - 1 do
        for j=y, sy + y - 1 do
            for k=z, sz + z - 1 do
                schematic:set(m, {i, j, k})
            end
        end
    end
    return {x=x, y=y, z=z, sx=sx, sy=sy, sz=sz}
end
--------------


-- REPRESENTATION --

---Converts hexadecimal notation to RGB notation
---@param h string
---@return table
local function hexToRGB(h)
    local rgb = {tonumber(string.sub(h,3,4),16), tonumber(string.sub(h,5,6),16), tonumber(string.sub(h,7,8),16)}
    return rgb
end

---Converts RGB notation to hexadecimal notation
---@param rgb table<integer>
---@return number?
local function RGBToHex(rgb)
    local red = string.format(""%x"",rgb[1])
    if string.len(red) == 1 then
        red = ""0""..red
    end

    local green = string.format(""%x"",rgb[2])
    if string.len(green) == 1 then
        green = ""0""..green
    end

    local blue = string.format(""%x"",rgb[3])
    if string.len(blue) == 1 then
        blue = ""0""..blue
    end
    return tonumber(""0x""..red..green..blue)
end

---Maps the color i as a weighted blend of rgb1 and rgb2
---@param rgb1 table
---@param rgb2 table
---@param i integer
---@return table
local function blendRGBs(rgb1, rgb2, i)
    local rgb = {math.floor(rgb1[1]*(15-i)/14 + rgb2[1]*(i-1)/14), math.floor(rgb1[2]*(15-i)/14 + rgb2[2]*(i-1)/14), math.floor(rgb1[3]*(15-i)/14 + rgb2[3]*(i-1)/14)}
    return rgb
end

---Sets the pallete of the terminal to be a gradient of two colors
---@param h1 string A hexadecimal string of the form ""0x000000""
---@param h2 string Idem
local function colorsGradient(h1,h2)
    local rgb1 = hexToRGB(h1)
    local rgb2 = hexToRGB(h2)
    for i = 1, 15 do
        term.setPaletteColour(2^(i-1),tonumber(RGBToHex(blendRGBs(rgb1,rgb2,i))))
        term.setBackgroundColor(2^(i-1))
    end
    term.setPaletteColour(2^(15),0x000000)
    term.setBackgroundColor(2^(15))
    io.write(""\n"")
end

---Maps an index i to computercraft's pallete indices
---@param min integer?
---@param max integer?
---@param i integer?
---@return integer
local function mapToColor(min,max,i)
    if i and min and max then
        return 2 ^ math.floor((i-min)/(max-min) * 14 + 0.5)
    end
    return 2^15
end

---Represents a schematic using proyection views and coloring for deepness
local function represent()
    colorsGradient(""0x00ffff"",""0x000050"")
    local X,Y,Z = 1,2,3

    for j = schematic.max[Y], schematic.min[Y], - 1 do
        for i = schematic.min[X], schematic.max[X] do
            local ebreak = false
            for k = schematic.max[Z], schematic.min[Z], -1 do
                if schematic:get{i,j,k} ~= 0 then
                    term.setBackgroundColor(mapToColor(schematic.max[Z], schematic.min[Z], k))
                    io.write(""  "")
                    ebreak = true
                    break
                end
            end
            if not ebreak then
                term.setBackgroundColor(mapToColor())
                io.write(""  "")
            end
        end
        term.setBackgroundColor(mapToColor())
        io.write(""  "")
        for k = schematic.min[Z], schematic.max[Z] do
            local ebreak = false
            for i = schematic.max[X], schematic.min[X], -1 do
                if schematic:get{i,j,k} ~= 0 then
                    term.setBackgroundColor(mapToColor(schematic.max[X], schematic.min[X], i))
                    io.write(""  "")
                    ebreak = true
                    break
                end
            end
            if not ebreak then
                term.setBackgroundColor(mapToColor())
                io.write(""  "")
            end
        end
        term.setBackgroundColor(mapToColor())
        io.write(""\n"")
    end
    io.write(""\n"")
    for k = schematic.min[Z], schematic.max[Z] do
        for i = schematic.min[X], schematic.max[X] do
            local ebreak = false
            for j = schematic.max[Y], schematic.min[Y], -1 do
                if schematic:get{i,j,k} ~= 0 then
                    term.setBackgroundColor(mapToColor(schematic.max[Y], schematic.min[Y], j))
                    io.write(""  "")
                    ebreak = true
                    break
                end
            end
            if not ebreak then
                term.setBackgroundColor(mapToColor())
                io.write(""  "")
            end
        end
        term.setBackgroundColor(mapToColor())
        io.write(""\n"")
    end
end
--------------------

local function execute_command(command)
    if command[1] == ""cuboid"" then
        local b = cuboid(command[2], command[3], command[4], command[5], command[6], command[7], command[8])
        table.insert(pieces, b)
    else
        return nil
    end
end

arg[1] = arg[1] or 'schematic.txt'
local commands = read_schematic(arg[1])

for i = 1, #commands do
    execute_command(commands[i])
end

represent()"
Tr9CtPai,Duda LookRotation,i-Xuup,C#,Tuesday 28th of May 2024 08:36:28 PM CDT,"    void OnCollisionEnter(Collision other)
    {
        if (other.gameObject.CompareTag(""Player"") || other.gameObject.CompareTag(""Guest""))
        {
            if (!isPushed)
            {
                transform.rotation = Quaternion.LookRotation(other.transform.position);
                anim.SetBool(""isPushed"", true);
                Vector3 pushDirection = (other.transform.position - transform.position).normalized;
                guestRgbd.AddForce(pushDirection * pushForce, ForceMode.Impulse);
                StartCoroutine(WaitAndBack());
            }
        }
    }

    IEnumerator WaitAndBack()
    {
        isPushed = true;
        float timeElapsed = 0f;
        yield return new WaitForSeconds(guestWaitTime);
        pushedPosition = transform.position;
        while (timeElapsed < guestWaitTime)
        {
            anim.SetBool(""isPushed"", false);
            anim.SetBool(""isReturning"", true);
            transform.position = Vector3.Lerp(pushedPosition, ownPosition, timeElapsed / guestWaitTime);
            timeElapsed += Time.deltaTime;
            yield return null;
        }
        guestRgbd.velocity = Vector3.zero;
        guestRgbd.angularVelocity = Vector3.zero;
        transform.position = ownPosition;
        transform.rotation = Quaternion.LookRotation(groupCenterPosition);
        anim.SetBool(""isReturning"", false);
        isPushed = false;
    }"
4issH55v,💸G2A.com Free Gift Card Guide 2024 May🔥,pestinha,Python,Tuesday 28th of May 2024 08:34:06 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_1673981.pdf

Working as of:

29 May 2024"
8cpuUT2a,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🎁,ssss50w,GetText,Tuesday 28th of May 2024 08:22:33 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
29 May 2024"
01YTjjpE,Backpack Tools Styled Field Trip Z (LocalScript),Sungmingamerpro13,CSS,Tuesday 28th of May 2024 08:13:53 PM CDT,"if tool.Name == ""Bat"" or tool.Name == ""WoodenSword"" or tool.Name == ""Dark Sword"" or tool.Name == ""Demon Sword"" or tool.Name == ""Rainbow Sword"" then
		toolCircle.Stacks.Text = """"
		toolCircle.TextX.Visible = false
	elseif tool.Name == ""ClassicSword"" or tool.Name == ""Crowbar"" or tool.Name == ""Metal Bat"" or tool.Name == ""DeluxeBat"" or tool.Name == ""PlusBat"" then
		toolCircle.Stacks.Text = """"
		toolCircle.TextX.Visible = false
	elseif tool.Name == ""GoldBat"" or tool.Name == ""RobuxBat"" or tool.Name == ""Spiked Club"" or tool.Name == ""Light Saber"" or tool.Name == ""Flashlight"" then
		toolCircle.Stacks.Text = """"
		toolCircle.TextX.Visible = false
	elseif tool.Name == ""Plank"" or tool.Name == ""Wrench"" or tool.Name == ""Broom"" or tool.Name == ""Box"" or tool.Name == ""Wood"" or tool.Name == ""Log"" then
		toolCircle.Stacks.Text = """"
		toolCircle.TextX.Visible = false
	elseif tool.Name == ""Ultimate Sword"" or tool.Name == ""GoldenSword"" or tool.Name == ""Mop"" or tool.Name == ""Cactus Sword"" then
		toolCircle.Stacks.Text = """"
		toolCircle.TextX.Visible = false
	elseif tool.Name == ""Pistol"" or tool.Name == ""Rifle"" or tool.Name == ""Shotgun"" or tool.Name == ""Flame Thrower"" or tool.Name == ""Throwing Stars"" then
		toolCircle.Stacks.Text = """"
		toolCircle.TextX.Visible = false
	end"
R0wbYz7N,Untitled,hidromotic,C,Tuesday 28th of May 2024 07:23:51 PM CDT,"Actua como un experto en recurso humanos. Elaborar un plan de acción con estrategias concretas para Fomentar la cultura de diversidad y equidad, en equipos de trabajo dentro de una empresa de de venta de maquinarias agrícolas. 


Para fomentar una cultura de diversidad y equidad en una empresa de venta de maquinarias agrícolas, es crucial implementar un plan de acción sólido que aborde tanto los aspectos estructurales como interpersonales del ambiente laboral. Aquí te detallo un plan estructurado en varias fases:

### Fase 1: Diagnóstico y Compromiso Organizacional

1. **Evaluación de la Cultura Actual**:
   - Realizar encuestas y grupos focales para entender las percepciones actuales sobre diversidad y equidad.
   - Analizar los datos demográficos de la empresa para identificar áreas de mejora en términos de representación.

2. **Compromiso de la Dirección**:
   - Obtener un compromiso explícito y visible del liderazgo sobre la importancia de la diversidad y equidad.
   - Formar un comité de diversidad con representación de todos los niveles, incluyendo líderes clave.

### Fase 2: Formación y Concienciación

1. **Capacitaciones sobre Diversidad**:
   - Implementar programas de formación obligatorios sobre diversidad, inclusión y sesgo inconsciente.
   - Talleres específicos para gerentes y líderes de equipo sobre cómo liderar equipos diversos y fomentar un ambiente inclusivo.

2. **Promoción de la Conciencia**:
   - Celebrar fechas que conmemoran la diversidad (e.g., Mes de la Historia Afroamericana, Día Internacional de la Mujer) para educar y sensibilizar.

### Fase 3: Políticas y Prácticas

1. **Revisión de Políticas de RRHH**:
   - Auditar y revisar las políticas de contratación, promoción y evaluación para garantizar la equidad.
   - Establecer políticas claras contra el acoso y la discriminación, incluyendo procedimientos transparentes para reportar incidentes.

2. **Mentoría y Desarrollo de Carrera**:
   - Crear programas de mentoría que apoyen el desarrollo de empleados de grupos subrepresentados.
   - Fomentar planes de carrera inclusivos que permitan a todos los empleados acceder a oportunidades de desarrollo y ascenso.

### Fase 4: Seguimiento y Evaluación

1. **Indicadores de Diversidad y Equidad**:
   - Establecer indicadores clave de rendimiento (KPIs) específicos para medir el progreso en diversidad y equidad.
   - Realizar encuestas de clima laboral regularmente para evaluar la percepción del ambiente de trabajo.

2. **Retroalimentación Continua**:
   - Fomentar un sistema de retroalimentación continua donde los empleados puedan expresar sus preocupaciones y sugerencias relacionadas con la diversidad y la equidad.
   - Evaluar y ajustar las estrategias y políticas basadas en esta retroalimentación.

### Fase 5: Integración y Sostenibilidad

1. **Integración en la Estrategia Empresarial**:
   - Asegurarse de que la diversidad y equidad sean parte de la estrategia general de la empresa y estén integradas en todas las áreas de negocio.
   - Vincular los objetivos de diversidad con los objetivos empresariales para fomentar el compromiso a todos los niveles.

2. **Comunicación y Transparencia**:
   - Comunicar regularmente los avances y desafíos en materia de diversidad y equidad a toda la empresa.
   - Promover una cultura de transparencia donde los logros y las áreas de mejora sean visibles para todos.

Implementando estas fases, la empresa no solo fomentará un ambiente más inclusivo y equitativo, sino que también podrá beneficiarse de una mayor innovación y satisfacción de los empleados, aspectos cruciales para el éxito en el sector competitivo de la venta de maquinarias agrícolas.


Profundiza con 3 ejemplos de KPIs, para la etapa de Seguimiento y Evaluación.

Para la etapa de Seguimiento y Evaluación en un programa de diversidad y equidad, es crucial medir el impacto de las iniciativas implementadas. Aquí te presento tres ejemplos de indicadores clave de rendimiento (KPIs) que podrían ser efectivos:

1. **Tasa de Diversidad en Contrataciones**:
   - **Descripción**: Este KPI mide el porcentaje de nuevos empleados pertenecientes a grupos subrepresentados en relación con el total de contrataciones en un período determinado.
   - **Objetivo**: Incrementar la proporción de contrataciones de grupos subrepresentados en un 20% anual.
   - **Método de cálculo**: (Número de empleados contratados de grupos subrepresentados / Número total de contrataciones) x 100.
   - **Utilidad**: Ayuda a evaluar la efectividad de las políticas de contratación inclusiva y la capacidad de la empresa para atraer talento diverso.

2. **Índice de Satisfacción en Diversidad**:
   - **Descripción**: Este KPI se basa en las respuestas a encuestas de clima laboral que evalúan la percepción de los empleados sobre la inclusión y equidad en el lugar de trabajo.
   - **Objetivo**: Mantener o mejorar el índice de satisfacción en diversidad en un 90% de respuestas positivas.
   - **Método de cálculo**: Porcentaje de respuestas positivas a preguntas relacionadas con la percepción de equidad y respeto por la diversidad.
   - **Utilidad**: Permite monitorear cómo se sienten los empleados respecto a la cultura de inclusión y si las políticas implementadas están teniendo un impacto positivo.

3. **Proporción de Liderazgo Diverso**:
   - **Descripción**: Este KPI evalúa el porcentaje de empleados de grupos subrepresentados en posiciones de liderazgo en comparación con el total de líderes en la organización.
   - **Objetivo**: Aumentar la representación de líderes de grupos subrepresentados en un 15% en los próximos 3 años.
   - **Método de cálculo**: (Número de líderes de grupos subrepresentados / Número total de líderes) x 100.
   - **Utilidad**: Refleja el compromiso de la empresa con la promoción y el desarrollo profesional de empleados de diversos orígenes, y es crucial para el cambio estructural a largo plazo.

Estos KPIs no solo ayudan a medir el progreso hacia una mayor diversidad y equidad, sino que también proporcionan datos concretos para ajustar y mejorar las políticas y prácticas en la empresa."
v9t6CCAb,2024-05-28_stats.json,rdp_snitch,JSON,Tuesday 28th of May 2024 07:18:07 PM CDT,"{
  ""ip"": {
    ""185.113.141.141"": 606,
    ""183.82.117.93"": 3,
    ""185.198.69.19"": 30,
    ""185.198.69.4"": 27,
    ""185.198.69.7"": 21,
    ""177.11.121.117"": 3,
    ""103.120.18.192"": 12,
    ""185.198.69.25"": 18,
    ""185.198.69.6"": 21,
    ""185.198.69.2"": 27,
    ""185.198.69.22"": 9,
    ""185.198.69.8"": 33,
    ""185.198.69.17"": 15,
    ""174.138.53.122"": 3,
    ""185.198.69.30"": 21,
    ""185.198.69.18"": 9,
    ""185.198.69.20"": 12,
    ""185.198.69.14"": 21,
    ""185.198.69.16"": 30,
    ""185.198.69.26"": 12,
    ""185.198.69.27"": 30,
    ""194.165.16.72"": 6,
    ""185.198.69.28"": 18,
    ""38.255.34.146"": 18,
    ""194.165.16.11"": 6,
    ""185.198.69.13"": 27,
    ""185.198.69.5"": 30,
    ""185.198.69.23"": 15,
    ""185.198.69.3"": 18,
    ""147.78.47.97"": 9,
    ""185.198.69.24"": 33,
    ""185.198.69.31"": 12,
    ""185.198.69.10"": 3,
    ""185.198.69.15"": 30,
    ""152.42.249.196"": 36,
    ""128.199.141.142"": 48,
    ""45.227.254.54"": 12,
    ""205.210.31.164"": 9,
    ""185.198.69.29"": 21,
    ""185.198.69.9"": 15,
    ""87.251.75.64"": 3,
    ""212.70.149.142"": 12,
    ""45.87.212.182"": 6,
    ""185.198.69.21"": 15,
    ""185.198.69.11"": 18,
    ""147.182.129.72"": 3,
    ""199.45.154.66"": 3,
    ""185.170.144.3"": 6,
    ""116.140.196.215"": 3,
    ""62.202.2.57"": 3,
    ""80.66.76.121"": 3,
    ""213.109.202.237"": 18,
    ""198.235.24.178"": 9,
    ""47.100.73.108"": 6,
    ""222.219.134.171"": 6,
    ""180.136.3.186"": 12,
    ""81.246.124.198"": 6,
    ""134.119.207.154"": 15,
    ""114.112.14.39"": 3,
    ""113.31.112.144"": 3,
    ""14.29.142.134"": 21,
    ""81.19.135.47"": 9,
    ""13.70.153.24"": 6,
    ""219.146.94.100"": 3,
    ""106.58.212.195"": 3,
    ""152.32.206.49"": 3,
    ""203.57.39.224"": 6,
    ""150.223.35.239"": 6,
    ""106.225.199.92"": 6,
    ""222.93.104.67"": 3,
    ""14.29.228.234"": 9,
    ""45.227.254.55"": 6,
    ""124.67.254.109"": 6,
    ""111.47.53.153"": 3,
    ""203.33.207.66"": 6,
    ""45.227.254.26"": 6,
    ""124.225.69.183"": 3,
    ""49.84.226.2"": 9,
    ""117.41.184.60"": 3,
    ""143.64.232.76"": 3,
    ""158.51.14.114"": 6,
    ""117.16.46.253"": 3,
    ""117.50.120.247"": 3,
    ""202.69.38.200"": 3,
    ""36.91.222.100"": 3,
    ""205.210.31.37"": 9,
    ""106.75.47.172"": 3,
    ""13.92.59.40"": 3,
    ""150.223.32.106"": 3,
    ""45.79.114.233"": 3,
    ""112.116.111.230"": 6,
    ""51.89.9.215"": 3,
    ""119.167.77.62"": 12,
    ""167.248.133.116"": 3,
    ""47.100.38.137"": 3,
    ""167.94.146.50"": 3,
    ""159.223.100.69"": 12,
    ""43.133.3.182"": 6,
    ""114.217.18.245"": 6,
    ""106.58.215.193"": 3,
    ""105.114.3.98"": 9,
    ""218.65.17.106"": 3,
    ""222.219.129.74"": 3,
    ""140.246.175.203"": 3,
    ""97.91.36.242"": 3,
    ""203.56.4.242"": 6,
    ""45.79.219.201"": 12,
    ""118.122.196.39"": 3,
    ""211.91.60.69"": 6,
    ""150.223.46.21"": 3,
    ""34.72.251.13"": 3,
    ""45.156.128.12"": 3,
    ""106.58.217.149"": 3,
    ""185.71.15.186"": 3,
    ""111.10.209.99"": 3,
    ""183.6.165.166"": 3,
    ""121.224.73.44"": 3,
    ""106.58.166.180"": 3,
    ""205.210.31.87"": 9,
    ""14.18.41.26"": 3,
    ""106.58.164.84"": 3,
    ""110.166.228.174"": 3,
    ""154.221.24.152"": 3
  },
  ""asn"": {
    ""AS204094"": 606,
    ""AS18209"": 3,
    ""AS57523"": 591,
    ""AS262296"": 3,
    ""AS131939"": 12,
    ""AS14061"": 102,
    ""AS48721"": 12,
    ""AS213122"": 18,
    ""AS209588"": 18,
    ""AS267784"": 24,
    ""AS396982"": 39,
    ""AS208091"": 6,
    ""AS204428"": 12,
    ""AS9009"": 6,
    ""AS398722"": 3,
    ""AS197414"": 6,
    ""AS4837"": 27,
    ""AS3303"": 3,
    ""AS208312"": 18,
    ""AS37963"": 9,
    ""AS4134"": 105,
    ""AS5432"": 6,
    ""AS29066"": 15,
    ""AS134700"": 3,
    ""AS17621"": 3,
    ""AS8075"": 9,
    ""AS58541"": 3,
    ""AS135377"": 3,
    ""AS58519"": 33,
    ""AS134238"": 9,
    ""AS9808"": 6,
    ""AS58593"": 3,
    ""AS398465"": 6,
    ""AS18031"": 3,
    ""AS23724"": 6,
    ""AS23750"": 3,
    ""AS7713"": 3,
    ""AS63949"": 15,
    ""AS16276"": 3,
    ""AS398324"": 3,
    ""AS398705"": 3,
    ""AS132203"": 6,
    ""AS36873"": 9,
    ""AS20115"": 3,
    ""AS211680"": 3,
    ""AS15623"": 3,
    ""AS58466"": 3,
    ""AS140061"": 3,
    ""AS142403"": 3
  },
  ""isp"": {
    ""I4W - Web Solutions"": 606,
    ""Beam Telecom Pvt Ltd"": 3,
    ""Chang Way Technologies Co. Limited"": 591,
    ""Windx Telecomunica\u00e7\u00f5es"": 3,
    ""IPS INC"": 12,
    ""DigitalOcean, LLC"": 102,
    ""Flyservers S.A."": 54,
    ""Hyonix LLC"": 18,
    ""Google LLC"": 39,
    ""Xhost Internet Solutions LP"": 12,
    ""SS-Net"": 12,
    ""M247 Europe SRL"": 6,
    ""Censys, Inc."": 9,
    ""China Unicom CHINA169 Network"": 3,
    ""Swisscom (Schweiz) AG - Bluewin"": 3,
    ""Red Byte LLC"": 18,
    ""Addresses CNNIC"": 9,
    ""Chinanet"": 102,
    ""Proximus"": 6,
    ""velia.net Internetdienste GmbH"": 15,
    ""Sinoycloud Limited"": 3,
    ""UCLOUD"": 9,
    ""Microsoft Corporation"": 9,
    ""Qingdao, "": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Cloud Computing Corporation"": 33,
    ""CHINANET Jiangx province IDC network"": 9,
    ""CNC Group CHINA169 Neimeng Province Network"": 6,
    ""China Mobile communications corporation"": 6,
    ""Hainan Network of ChinaTelecom"": 3,
    ""Shanghai Blue Cloud Technology Co., Ltd"": 3,
    ""Rackdog, LLC"": 6,
    ""Sangmyung University"": 3,
    ""Advertiese Flag"": 3,
    ""PT Telekomunikasi Indonesia"": 3,
    ""Akamai Technologies, Inc."": 15,
    ""OVH SAS"": 3,
    ""CNC Group CHINA169 Shandong Province Network"": 12,
    ""Shenzhen Tencent Computer Systems Company Limited"": 6,
    ""Airtel Networks Limited"": 9,
    ""Charter Communications"": 3,
    ""CHINA UNICOM China169 Backbone"": 6,
    ""NSEC - Sistemas Informaticos, S.A."": 3,
    ""Telco Pack SARL"": 3,
    ""China Telecom"": 6,
    ""Guangzhou Yisu Cloud Limited"": 3
  },
  ""org"": {
    ""I4W - Web Solutions, Lda"": 606,
    ""Beam Telecom Pvt Ltd"": 3,
    ""Chang Way Technologies Co. Limited"": 609,
    ""Windx Telecomunica\u00e7\u00f5es"": 3,
    ""IPS Inc"": 12,
    ""Digital Ocean"": 3,
    ""Flyservers S.A"": 21,
    ""Hyonix LLC"": 18,
    ""DigitalOcean, LLC"": 99,
    ""UAB Host Baltic"": 24,
    ""Palo Alto Networks, Inc"": 36,
    ""Xhost Internet Solutions"": 6,
    ""4Media Ltd"": 12,
    ""M247 LTD"": 6,
    ""Censys, Inc."": 9,
    ""Xhostis"": 6,
    ""China United Network Communications Corporation Limited"": 3,
    ""Swisscom (Schweiz) AG"": 3,
    ""Aliyun Computing Co., LTD"": 9,
    ""Chinanet YN"": 30,
    ""Chinanet GX"": 12,
    ""Quantum ICT"": 6,
    ""Eijaj Hussain Shaikhnag"": 15,
    ""CNISP-Union Technology (Beijing) Co., Ltd"": 3,
    ""Shanghai UCloud Information Technology Company Limited"": 9,
    ""Chinanet GD"": 36,
    ""Alviva Holding Limited"": 9,
    ""Microsoft Azure Cloud (australiasoutheast)"": 6,
    ""Chinanet SD"": 18,
    ""Ucloud Information Technology"": 3,
    ""Chinanet FJ"": 18,
    ""Chinanet JX"": 12,
    ""Chinanet JS"": 21,
    ""Unknown"": 21,
    ""China Mobile"": 6,
    ""Microsoft Azure Cloud (chinanorth3)"": 3,
    ""AB E-Commerce, LLC"": 6,
    ""Korean Education Network"": 3,
    ""Gerrys Information Technology (PVT) Ltd"": 3,
    ""Telekomunikasi Indonesia"": 3,
    ""Microsoft Azure Cloud (eastus)"": 3,
    ""Linode"": 15,
    ""OVH GmbH"": 3,
    ""Tencent Cloud Computing"": 6,
    ""Airtel Networks Limited"": 9,
    ""Spectrum"": 3,
    ""Chinanet SC"": 3,
    ""Unicom"": 6,
    ""Google Cloud (us-central1)"": 3,
    ""Inap AMS"": 3,
    ""Telco Pack SA"": 3,
    ""Chinanet QH"": 3,
    ""Ancent Group Limited"": 3
  },
  ""regionName"": {
    ""Lisbon"": 606,
    ""Telangana"": 3,
    ""Moscow"": 609,
    ""Esp\u00edrito Santo"": 3,
    ""Tokyo"": 18,
    ""New Jersey"": 18,
    ""Kaunas"": 12,
    ""California"": 57,
    ""North Holland"": 24,
    ""South West"": 84,
    ""Vilnius"": 24,
    ""Plovdiv"": 12,
    ""Hesse"": 18,
    ""New York"": 3,
    ""Beijing"": 18,
    ""Zurich"": 3,
    ""Shanghai"": 15,
    ""Yunnan"": 30,
    ""Guangxi"": 12,
    ""Brussels Capital"": 6,
    ""Grand Est"": 15,
    ""Guangdong"": 45,
    ""Victoria"": 6,
    ""Shandong"": 30,
    ""Virginia"": 6,
    ""Fujian"": 18,
    ""Jiangxi"": 12,
    ""Inner Mongolia"": 6,
    ""Hubei"": 3,
    ""Hainan"": 3,
    ""Jiangsu"": 12,
    ""Hebei"": 3,
    ""Illinois"": 6,
    ""Seoul"": 3,
    ""Punjab"": 3,
    ""Jakarta"": 3,
    ""England"": 3,
    ""Michigan"": 6,
    ""Lagos"": 9,
    ""Georgia"": 12,
    ""Sichuan"": 3,
    ""Iowa"": 3,
    ""Geneva"": 3,
    ""Qinghai"": 3,
    ""Eastern"": 3
  },
  ""country"": {
    ""Portugal"": 606,
    ""India"": 3,
    ""Russia"": 609,
    ""Brazil"": 3,
    ""Japan"": 18,
    ""United States"": 111,
    ""Lithuania"": 36,
    ""The Netherlands"": 24,
    ""Singapore"": 84,
    ""Bulgaria"": 12,
    ""Germany"": 18,
    ""China"": 213,
    ""Switzerland"": 6,
    ""Belgium"": 6,
    ""France"": 15,
    ""Australia"": 6,
    ""South Korea"": 3,
    ""Pakistan"": 3,
    ""Indonesia"": 3,
    ""United Kingdom"": 3,
    ""Nigeria"": 9,
    ""Hong Kong"": 3
  },
  ""account"": {
    ""hello"": 738,
    ""(empty)"": 21,
    ""Administr"": 615,
    ""Test"": 60,
    ""Domain"": 30,
    ""RFovDMivQ"": 3,
    ""yvOgpT"": 3,
    ""bAsWEv"": 3,
    ""beio"": 6,
    ""HVdWMdada"": 3,
    ""twHaMC"": 3,
    ""apdrfn"": 3,
    ""142.93.8.59"": 258,
    ""Administrator"": 3,
    ""frIABrKyZ"": 3,
    ""XTaZKq"": 3,
    ""teLEDU"": 3,
    ""u7d4zn5r"": 12,
    ""x4il11ds"": 12,
    ""mra3t4hb"": 3,
    ""lnfwzlTOg"": 3,
    ""gyiGEU"": 3,
    ""zoRcrt"": 3
  },
  ""keyboard"": {
    ""Unknown"": 1794
  },
  ""client_build"": {
    ""Unknown"": 1794
  },
  ""client_name"": {
    ""Unknown"": 1794
  },
  ""ip_type"": {
    ""Unknown"": 912,
    ""proxy"": 627,
    ""hosting"": 231,
    ""hosting & proxy"": 18,
    ""mobile"": 6
  }
}"
j9iAT7k2,2024-05-28_stats.json,rdp_snitch,JSON,Tuesday 28th of May 2024 07:16:06 PM CDT,"{
  ""ip"": {
    ""185.113.141.141"": 404,
    ""183.82.117.93"": 2,
    ""185.198.69.19"": 20,
    ""185.198.69.4"": 18,
    ""185.198.69.7"": 14,
    ""177.11.121.117"": 2,
    ""103.120.18.192"": 8,
    ""185.198.69.25"": 12,
    ""185.198.69.6"": 14,
    ""185.198.69.2"": 18,
    ""185.198.69.22"": 6,
    ""185.198.69.8"": 22,
    ""185.198.69.17"": 10,
    ""174.138.53.122"": 2,
    ""185.198.69.30"": 14,
    ""185.198.69.18"": 6,
    ""185.198.69.20"": 8,
    ""185.198.69.14"": 14,
    ""185.198.69.16"": 20,
    ""185.198.69.26"": 8,
    ""185.198.69.27"": 20,
    ""194.165.16.72"": 4,
    ""185.198.69.28"": 12,
    ""38.255.34.146"": 12,
    ""194.165.16.11"": 4,
    ""185.198.69.13"": 18,
    ""185.198.69.5"": 20,
    ""185.198.69.23"": 10,
    ""185.198.69.3"": 12,
    ""147.78.47.97"": 6,
    ""185.198.69.24"": 22,
    ""185.198.69.31"": 8,
    ""185.198.69.10"": 2,
    ""185.198.69.15"": 20,
    ""152.42.249.196"": 24,
    ""128.199.141.142"": 32,
    ""45.227.254.54"": 8,
    ""205.210.31.164"": 6,
    ""185.198.69.29"": 14,
    ""185.198.69.9"": 10,
    ""87.251.75.64"": 2,
    ""212.70.149.142"": 8,
    ""45.87.212.182"": 4,
    ""185.198.69.21"": 10,
    ""185.198.69.11"": 12,
    ""147.182.129.72"": 2,
    ""199.45.154.66"": 2,
    ""185.170.144.3"": 4,
    ""116.140.196.215"": 2,
    ""62.202.2.57"": 2,
    ""80.66.76.121"": 2,
    ""213.109.202.237"": 12,
    ""198.235.24.178"": 6,
    ""47.100.73.108"": 4,
    ""222.219.134.171"": 4,
    ""180.136.3.186"": 8,
    ""81.246.124.198"": 4,
    ""134.119.207.154"": 10,
    ""114.112.14.39"": 2,
    ""113.31.112.144"": 2,
    ""14.29.142.134"": 14,
    ""81.19.135.47"": 6,
    ""13.70.153.24"": 4,
    ""219.146.94.100"": 2,
    ""106.58.212.195"": 2,
    ""152.32.206.49"": 2,
    ""203.57.39.224"": 4,
    ""150.223.35.239"": 4,
    ""106.225.199.92"": 4,
    ""222.93.104.67"": 2,
    ""14.29.228.234"": 6,
    ""45.227.254.55"": 4,
    ""124.67.254.109"": 4,
    ""111.47.53.153"": 2,
    ""203.33.207.66"": 4,
    ""45.227.254.26"": 4,
    ""124.225.69.183"": 2,
    ""49.84.226.2"": 6,
    ""117.41.184.60"": 2,
    ""143.64.232.76"": 2,
    ""158.51.14.114"": 4,
    ""117.16.46.253"": 2,
    ""117.50.120.247"": 2,
    ""202.69.38.200"": 2,
    ""36.91.222.100"": 2,
    ""205.210.31.37"": 6,
    ""106.75.47.172"": 2,
    ""13.92.59.40"": 2,
    ""150.223.32.106"": 2,
    ""45.79.114.233"": 2,
    ""112.116.111.230"": 4,
    ""51.89.9.215"": 2,
    ""119.167.77.62"": 8,
    ""167.248.133.116"": 2,
    ""47.100.38.137"": 2,
    ""167.94.146.50"": 2,
    ""159.223.100.69"": 8,
    ""43.133.3.182"": 4,
    ""114.217.18.245"": 4,
    ""106.58.215.193"": 2,
    ""105.114.3.98"": 6,
    ""218.65.17.106"": 2,
    ""222.219.129.74"": 2,
    ""140.246.175.203"": 2,
    ""97.91.36.242"": 2,
    ""203.56.4.242"": 4,
    ""45.79.219.201"": 8,
    ""118.122.196.39"": 2,
    ""211.91.60.69"": 4,
    ""150.223.46.21"": 2,
    ""34.72.251.13"": 2,
    ""45.156.128.12"": 2,
    ""106.58.217.149"": 2,
    ""185.71.15.186"": 2,
    ""111.10.209.99"": 2,
    ""183.6.165.166"": 2,
    ""121.224.73.44"": 2,
    ""106.58.166.180"": 2,
    ""205.210.31.87"": 6,
    ""14.18.41.26"": 2,
    ""106.58.164.84"": 2,
    ""110.166.228.174"": 2,
    ""154.221.24.152"": 2
  },
  ""asn"": {
    ""AS204094"": 404,
    ""AS18209"": 2,
    ""AS57523"": 394,
    ""AS262296"": 2,
    ""AS131939"": 8,
    ""AS14061"": 68,
    ""AS48721"": 8,
    ""AS213122"": 12,
    ""AS209588"": 12,
    ""AS267784"": 16,
    ""AS396982"": 26,
    ""AS208091"": 4,
    ""AS204428"": 8,
    ""AS9009"": 4,
    ""AS398722"": 2,
    ""AS197414"": 4,
    ""AS4837"": 18,
    ""AS3303"": 2,
    ""AS208312"": 12,
    ""AS37963"": 6,
    ""AS4134"": 70,
    ""AS5432"": 4,
    ""AS29066"": 10,
    ""AS134700"": 2,
    ""AS17621"": 2,
    ""AS8075"": 6,
    ""AS58541"": 2,
    ""AS135377"": 2,
    ""AS58519"": 22,
    ""AS134238"": 6,
    ""AS9808"": 4,
    ""AS58593"": 2,
    ""AS398465"": 4,
    ""AS18031"": 2,
    ""AS23724"": 4,
    ""AS23750"": 2,
    ""AS7713"": 2,
    ""AS63949"": 10,
    ""AS16276"": 2,
    ""AS398324"": 2,
    ""AS398705"": 2,
    ""AS132203"": 4,
    ""AS36873"": 6,
    ""AS20115"": 2,
    ""AS211680"": 2,
    ""AS15623"": 2,
    ""AS58466"": 2,
    ""AS140061"": 2,
    ""AS142403"": 2
  },
  ""isp"": {
    ""I4W - Web Solutions"": 404,
    ""Beam Telecom Pvt Ltd"": 2,
    ""Chang Way Technologies Co. Limited"": 394,
    ""Windx Telecomunica\u00e7\u00f5es"": 2,
    ""IPS INC"": 8,
    ""DigitalOcean, LLC"": 68,
    ""Flyservers S.A."": 36,
    ""Hyonix LLC"": 12,
    ""Google LLC"": 26,
    ""Xhost Internet Solutions LP"": 8,
    ""SS-Net"": 8,
    ""M247 Europe SRL"": 4,
    ""Censys, Inc."": 6,
    ""China Unicom CHINA169 Network"": 2,
    ""Swisscom (Schweiz) AG - Bluewin"": 2,
    ""Red Byte LLC"": 12,
    ""Addresses CNNIC"": 6,
    ""Chinanet"": 68,
    ""Proximus"": 4,
    ""velia.net Internetdienste GmbH"": 10,
    ""Sinoycloud Limited"": 2,
    ""UCLOUD"": 6,
    ""Microsoft Corporation"": 6,
    ""Qingdao, "": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Cloud Computing Corporation"": 22,
    ""CHINANET Jiangx province IDC network"": 6,
    ""CNC Group CHINA169 Neimeng Province Network"": 4,
    ""China Mobile communications corporation"": 4,
    ""Hainan Network of ChinaTelecom"": 2,
    ""Shanghai Blue Cloud Technology Co., Ltd"": 2,
    ""Rackdog, LLC"": 4,
    ""Sangmyung University"": 2,
    ""Advertiese Flag"": 2,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Akamai Technologies, Inc."": 10,
    ""OVH SAS"": 2,
    ""CNC Group CHINA169 Shandong Province Network"": 8,
    ""Shenzhen Tencent Computer Systems Company Limited"": 4,
    ""Airtel Networks Limited"": 6,
    ""Charter Communications"": 2,
    ""CHINA UNICOM China169 Backbone"": 4,
    ""NSEC - Sistemas Informaticos, S.A."": 2,
    ""Telco Pack SARL"": 2,
    ""China Telecom"": 4,
    ""Guangzhou Yisu Cloud Limited"": 2
  },
  ""org"": {
    ""I4W - Web Solutions, Lda"": 404,
    ""Beam Telecom Pvt Ltd"": 2,
    ""Chang Way Technologies Co. Limited"": 406,
    ""Windx Telecomunica\u00e7\u00f5es"": 2,
    ""IPS Inc"": 8,
    ""Digital Ocean"": 2,
    ""Flyservers S.A"": 14,
    ""Hyonix LLC"": 12,
    ""DigitalOcean, LLC"": 66,
    ""UAB Host Baltic"": 16,
    ""Palo Alto Networks, Inc"": 24,
    ""Xhost Internet Solutions"": 4,
    ""4Media Ltd"": 8,
    ""M247 LTD"": 4,
    ""Censys, Inc."": 6,
    ""Xhostis"": 4,
    ""China United Network Communications Corporation Limited"": 2,
    ""Swisscom (Schweiz) AG"": 2,
    ""Aliyun Computing Co., LTD"": 6,
    ""Chinanet YN"": 20,
    ""Chinanet GX"": 8,
    ""Quantum ICT"": 4,
    ""Eijaj Hussain Shaikhnag"": 10,
    ""CNISP-Union Technology (Beijing) Co., Ltd"": 2,
    ""Shanghai UCloud Information Technology Company Limited"": 6,
    ""Chinanet GD"": 24,
    ""Alviva Holding Limited"": 6,
    ""Microsoft Azure Cloud (australiasoutheast)"": 4,
    ""Chinanet SD"": 12,
    ""Ucloud Information Technology"": 2,
    ""Chinanet FJ"": 12,
    ""Chinanet JX"": 8,
    ""Chinanet JS"": 14,
    ""Unknown"": 14,
    ""China Mobile"": 4,
    ""Microsoft Azure Cloud (chinanorth3)"": 2,
    ""AB E-Commerce, LLC"": 4,
    ""Korean Education Network"": 2,
    ""Gerrys Information Technology (PVT) Ltd"": 2,
    ""Telekomunikasi Indonesia"": 2,
    ""Microsoft Azure Cloud (eastus)"": 2,
    ""Linode"": 10,
    ""OVH GmbH"": 2,
    ""Tencent Cloud Computing"": 4,
    ""Airtel Networks Limited"": 6,
    ""Spectrum"": 2,
    ""Chinanet SC"": 2,
    ""Unicom"": 4,
    ""Google Cloud (us-central1)"": 2,
    ""Inap AMS"": 2,
    ""Telco Pack SA"": 2,
    ""Chinanet QH"": 2,
    ""Ancent Group Limited"": 2
  },
  ""regionName"": {
    ""Lisbon"": 404,
    ""Telangana"": 2,
    ""Moscow"": 406,
    ""Esp\u00edrito Santo"": 2,
    ""Tokyo"": 12,
    ""New Jersey"": 12,
    ""Kaunas"": 8,
    ""California"": 38,
    ""North Holland"": 16,
    ""South West"": 56,
    ""Vilnius"": 16,
    ""Plovdiv"": 8,
    ""Hesse"": 12,
    ""New York"": 2,
    ""Beijing"": 12,
    ""Zurich"": 2,
    ""Shanghai"": 10,
    ""Yunnan"": 20,
    ""Guangxi"": 8,
    ""Brussels Capital"": 4,
    ""Grand Est"": 10,
    ""Guangdong"": 30,
    ""Victoria"": 4,
    ""Shandong"": 20,
    ""Virginia"": 4,
    ""Fujian"": 12,
    ""Jiangxi"": 8,
    ""Inner Mongolia"": 4,
    ""Hubei"": 2,
    ""Hainan"": 2,
    ""Jiangsu"": 8,
    ""Hebei"": 2,
    ""Illinois"": 4,
    ""Seoul"": 2,
    ""Punjab"": 2,
    ""Jakarta"": 2,
    ""England"": 2,
    ""Michigan"": 4,
    ""Lagos"": 6,
    ""Georgia"": 8,
    ""Sichuan"": 2,
    ""Iowa"": 2,
    ""Geneva"": 2,
    ""Qinghai"": 2,
    ""Eastern"": 2
  },
  ""country"": {
    ""Portugal"": 404,
    ""India"": 2,
    ""Russia"": 406,
    ""Brazil"": 2,
    ""Japan"": 12,
    ""United States"": 74,
    ""Lithuania"": 24,
    ""The Netherlands"": 16,
    ""Singapore"": 56,
    ""Bulgaria"": 8,
    ""Germany"": 12,
    ""China"": 142,
    ""Switzerland"": 4,
    ""Belgium"": 4,
    ""France"": 10,
    ""Australia"": 4,
    ""South Korea"": 2,
    ""Pakistan"": 2,
    ""Indonesia"": 2,
    ""United Kingdom"": 2,
    ""Nigeria"": 6,
    ""Hong Kong"": 2
  },
  ""account"": {
    ""hello"": 492,
    ""(empty)"": 14,
    ""Administr"": 410,
    ""Test"": 40,
    ""Domain"": 20,
    ""RFovDMivQ"": 2,
    ""yvOgpT"": 2,
    ""bAsWEv"": 2,
    ""beio"": 4,
    ""HVdWMdada"": 2,
    ""twHaMC"": 2,
    ""apdrfn"": 2,
    ""142.93.8.59"": 172,
    ""Administrator"": 2,
    ""frIABrKyZ"": 2,
    ""XTaZKq"": 2,
    ""teLEDU"": 2,
    ""u7d4zn5r"": 8,
    ""x4il11ds"": 8,
    ""mra3t4hb"": 2,
    ""lnfwzlTOg"": 2,
    ""gyiGEU"": 2,
    ""zoRcrt"": 2
  },
  ""keyboard"": {
    ""Unknown"": 1196
  },
  ""client_build"": {
    ""Unknown"": 1196
  },
  ""client_name"": {
    ""Unknown"": 1196
  },
  ""ip_type"": {
    ""Unknown"": 608,
    ""proxy"": 418,
    ""hosting"": 154,
    ""hosting & proxy"": 12,
    ""mobile"": 4
  }
}"
8T0bZhzK,2024-05-28_stats.json,rdp_snitch,JSON,Tuesday 28th of May 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""185.113.141.141"": 202,
    ""183.82.117.93"": 1,
    ""185.198.69.19"": 10,
    ""185.198.69.4"": 9,
    ""185.198.69.7"": 7,
    ""177.11.121.117"": 1,
    ""103.120.18.192"": 4,
    ""185.198.69.25"": 6,
    ""185.198.69.6"": 7,
    ""185.198.69.2"": 9,
    ""185.198.69.22"": 3,
    ""185.198.69.8"": 11,
    ""185.198.69.17"": 5,
    ""174.138.53.122"": 1,
    ""185.198.69.30"": 7,
    ""185.198.69.18"": 3,
    ""185.198.69.20"": 4,
    ""185.198.69.14"": 7,
    ""185.198.69.16"": 10,
    ""185.198.69.26"": 4,
    ""185.198.69.27"": 10,
    ""194.165.16.72"": 2,
    ""185.198.69.28"": 6,
    ""38.255.34.146"": 6,
    ""194.165.16.11"": 2,
    ""185.198.69.13"": 9,
    ""185.198.69.5"": 10,
    ""185.198.69.23"": 5,
    ""185.198.69.3"": 6,
    ""147.78.47.97"": 3,
    ""185.198.69.24"": 11,
    ""185.198.69.31"": 4,
    ""185.198.69.10"": 1,
    ""185.198.69.15"": 10,
    ""152.42.249.196"": 12,
    ""128.199.141.142"": 16,
    ""45.227.254.54"": 4,
    ""205.210.31.164"": 3,
    ""185.198.69.29"": 7,
    ""185.198.69.9"": 5,
    ""87.251.75.64"": 1,
    ""212.70.149.142"": 4,
    ""45.87.212.182"": 2,
    ""185.198.69.21"": 5,
    ""185.198.69.11"": 6,
    ""147.182.129.72"": 1,
    ""199.45.154.66"": 1,
    ""185.170.144.3"": 2,
    ""116.140.196.215"": 1,
    ""62.202.2.57"": 1,
    ""80.66.76.121"": 1,
    ""213.109.202.237"": 6,
    ""198.235.24.178"": 3,
    ""47.100.73.108"": 2,
    ""222.219.134.171"": 2,
    ""180.136.3.186"": 4,
    ""81.246.124.198"": 2,
    ""134.119.207.154"": 5,
    ""114.112.14.39"": 1,
    ""113.31.112.144"": 1,
    ""14.29.142.134"": 7,
    ""81.19.135.47"": 3,
    ""13.70.153.24"": 2,
    ""219.146.94.100"": 1,
    ""106.58.212.195"": 1,
    ""152.32.206.49"": 1,
    ""203.57.39.224"": 2,
    ""150.223.35.239"": 2,
    ""106.225.199.92"": 2,
    ""222.93.104.67"": 1,
    ""14.29.228.234"": 3,
    ""45.227.254.55"": 2,
    ""124.67.254.109"": 2,
    ""111.47.53.153"": 1,
    ""203.33.207.66"": 2,
    ""45.227.254.26"": 2,
    ""124.225.69.183"": 1,
    ""49.84.226.2"": 3,
    ""117.41.184.60"": 1,
    ""143.64.232.76"": 1,
    ""158.51.14.114"": 2,
    ""117.16.46.253"": 1,
    ""117.50.120.247"": 1,
    ""202.69.38.200"": 1,
    ""36.91.222.100"": 1,
    ""205.210.31.37"": 3,
    ""106.75.47.172"": 1,
    ""13.92.59.40"": 1,
    ""150.223.32.106"": 1,
    ""45.79.114.233"": 1,
    ""112.116.111.230"": 2,
    ""51.89.9.215"": 1,
    ""119.167.77.62"": 4,
    ""167.248.133.116"": 1,
    ""47.100.38.137"": 1,
    ""167.94.146.50"": 1,
    ""159.223.100.69"": 4,
    ""43.133.3.182"": 2,
    ""114.217.18.245"": 2,
    ""106.58.215.193"": 1,
    ""105.114.3.98"": 3,
    ""218.65.17.106"": 1,
    ""222.219.129.74"": 1,
    ""140.246.175.203"": 1,
    ""97.91.36.242"": 1,
    ""203.56.4.242"": 2,
    ""45.79.219.201"": 4,
    ""118.122.196.39"": 1,
    ""211.91.60.69"": 2,
    ""150.223.46.21"": 1,
    ""34.72.251.13"": 1,
    ""45.156.128.12"": 1,
    ""106.58.217.149"": 1,
    ""185.71.15.186"": 1,
    ""111.10.209.99"": 1,
    ""183.6.165.166"": 1,
    ""121.224.73.44"": 1,
    ""106.58.166.180"": 1,
    ""205.210.31.87"": 3,
    ""14.18.41.26"": 1,
    ""106.58.164.84"": 1,
    ""110.166.228.174"": 1,
    ""154.221.24.152"": 1
  },
  ""asn"": {
    ""AS204094"": 202,
    ""AS18209"": 1,
    ""AS57523"": 197,
    ""AS262296"": 1,
    ""AS131939"": 4,
    ""AS14061"": 34,
    ""AS48721"": 4,
    ""AS213122"": 6,
    ""AS209588"": 6,
    ""AS267784"": 8,
    ""AS396982"": 13,
    ""AS208091"": 2,
    ""AS204428"": 4,
    ""AS9009"": 2,
    ""AS398722"": 1,
    ""AS197414"": 2,
    ""AS4837"": 9,
    ""AS3303"": 1,
    ""AS208312"": 6,
    ""AS37963"": 3,
    ""AS4134"": 35,
    ""AS5432"": 2,
    ""AS29066"": 5,
    ""AS134700"": 1,
    ""AS17621"": 1,
    ""AS8075"": 3,
    ""AS58541"": 1,
    ""AS135377"": 1,
    ""AS58519"": 11,
    ""AS134238"": 3,
    ""AS9808"": 2,
    ""AS58593"": 1,
    ""AS398465"": 2,
    ""AS18031"": 1,
    ""AS23724"": 2,
    ""AS23750"": 1,
    ""AS7713"": 1,
    ""AS63949"": 5,
    ""AS16276"": 1,
    ""AS398324"": 1,
    ""AS398705"": 1,
    ""AS132203"": 2,
    ""AS36873"": 3,
    ""AS20115"": 1,
    ""AS211680"": 1,
    ""AS15623"": 1,
    ""AS58466"": 1,
    ""AS140061"": 1,
    ""AS142403"": 1
  },
  ""isp"": {
    ""I4W - Web Solutions"": 202,
    ""Beam Telecom Pvt Ltd"": 1,
    ""Chang Way Technologies Co. Limited"": 197,
    ""Windx Telecomunica\u00e7\u00f5es"": 1,
    ""IPS INC"": 4,
    ""DigitalOcean, LLC"": 34,
    ""Flyservers S.A."": 18,
    ""Hyonix LLC"": 6,
    ""Google LLC"": 13,
    ""Xhost Internet Solutions LP"": 4,
    ""SS-Net"": 4,
    ""M247 Europe SRL"": 2,
    ""Censys, Inc."": 3,
    ""China Unicom CHINA169 Network"": 1,
    ""Swisscom (Schweiz) AG - Bluewin"": 1,
    ""Red Byte LLC"": 6,
    ""Addresses CNNIC"": 3,
    ""Chinanet"": 34,
    ""Proximus"": 2,
    ""velia.net Internetdienste GmbH"": 5,
    ""Sinoycloud Limited"": 1,
    ""UCLOUD"": 3,
    ""Microsoft Corporation"": 3,
    ""Qingdao, "": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Cloud Computing Corporation"": 11,
    ""CHINANET Jiangx province IDC network"": 3,
    ""CNC Group CHINA169 Neimeng Province Network"": 2,
    ""China Mobile communications corporation"": 2,
    ""Hainan Network of ChinaTelecom"": 1,
    ""Shanghai Blue Cloud Technology Co., Ltd"": 1,
    ""Rackdog, LLC"": 2,
    ""Sangmyung University"": 1,
    ""Advertiese Flag"": 1,
    ""PT Telekomunikasi Indonesia"": 1,
    ""Akamai Technologies, Inc."": 5,
    ""OVH SAS"": 1,
    ""CNC Group CHINA169 Shandong Province Network"": 4,
    ""Shenzhen Tencent Computer Systems Company Limited"": 2,
    ""Airtel Networks Limited"": 3,
    ""Charter Communications"": 1,
    ""CHINA UNICOM China169 Backbone"": 2,
    ""NSEC - Sistemas Informaticos, S.A."": 1,
    ""Telco Pack SARL"": 1,
    ""China Telecom"": 2,
    ""Guangzhou Yisu Cloud Limited"": 1
  },
  ""org"": {
    ""I4W - Web Solutions, Lda"": 202,
    ""Beam Telecom Pvt Ltd"": 1,
    ""Chang Way Technologies Co. Limited"": 203,
    ""Windx Telecomunica\u00e7\u00f5es"": 1,
    ""IPS Inc"": 4,
    ""Digital Ocean"": 1,
    ""Flyservers S.A"": 7,
    ""Hyonix LLC"": 6,
    ""DigitalOcean, LLC"": 33,
    ""UAB Host Baltic"": 8,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhost Internet Solutions"": 2,
    ""4Media Ltd"": 4,
    ""M247 LTD"": 2,
    ""Censys, Inc."": 3,
    ""Xhostis"": 2,
    ""China United Network Communications Corporation Limited"": 1,
    ""Swisscom (Schweiz) AG"": 1,
    ""Aliyun Computing Co., LTD"": 3,
    ""Chinanet YN"": 10,
    ""Chinanet GX"": 4,
    ""Quantum ICT"": 2,
    ""Eijaj Hussain Shaikhnag"": 5,
    ""CNISP-Union Technology (Beijing) Co., Ltd"": 1,
    ""Shanghai UCloud Information Technology Company Limited"": 3,
    ""Chinanet GD"": 12,
    ""Alviva Holding Limited"": 3,
    ""Microsoft Azure Cloud (australiasoutheast)"": 2,
    ""Chinanet SD"": 6,
    ""Ucloud Information Technology"": 1,
    ""Chinanet FJ"": 6,
    ""Chinanet JX"": 4,
    ""Chinanet JS"": 7,
    ""Unknown"": 7,
    ""China Mobile"": 2,
    ""Microsoft Azure Cloud (chinanorth3)"": 1,
    ""AB E-Commerce, LLC"": 2,
    ""Korean Education Network"": 1,
    ""Gerrys Information Technology (PVT) Ltd"": 1,
    ""Telekomunikasi Indonesia"": 1,
    ""Microsoft Azure Cloud (eastus)"": 1,
    ""Linode"": 5,
    ""OVH GmbH"": 1,
    ""Tencent Cloud Computing"": 2,
    ""Airtel Networks Limited"": 3,
    ""Spectrum"": 1,
    ""Chinanet SC"": 1,
    ""Unicom"": 2,
    ""Google Cloud (us-central1)"": 1,
    ""Inap AMS"": 1,
    ""Telco Pack SA"": 1,
    ""Chinanet QH"": 1,
    ""Ancent Group Limited"": 1
  },
  ""regionName"": {
    ""Lisbon"": 202,
    ""Telangana"": 1,
    ""Moscow"": 203,
    ""Esp\u00edrito Santo"": 1,
    ""Tokyo"": 6,
    ""New Jersey"": 6,
    ""Kaunas"": 4,
    ""California"": 19,
    ""North Holland"": 8,
    ""South West"": 28,
    ""Vilnius"": 8,
    ""Plovdiv"": 4,
    ""Hesse"": 6,
    ""New York"": 1,
    ""Beijing"": 6,
    ""Zurich"": 1,
    ""Shanghai"": 5,
    ""Yunnan"": 10,
    ""Guangxi"": 4,
    ""Brussels Capital"": 2,
    ""Grand Est"": 5,
    ""Guangdong"": 15,
    ""Victoria"": 2,
    ""Shandong"": 10,
    ""Virginia"": 2,
    ""Fujian"": 6,
    ""Jiangxi"": 4,
    ""Inner Mongolia"": 2,
    ""Hubei"": 1,
    ""Hainan"": 1,
    ""Jiangsu"": 4,
    ""Hebei"": 1,
    ""Illinois"": 2,
    ""Seoul"": 1,
    ""Punjab"": 1,
    ""Jakarta"": 1,
    ""England"": 1,
    ""Michigan"": 2,
    ""Lagos"": 3,
    ""Georgia"": 4,
    ""Sichuan"": 1,
    ""Iowa"": 1,
    ""Geneva"": 1,
    ""Qinghai"": 1,
    ""Eastern"": 1
  },
  ""country"": {
    ""Portugal"": 202,
    ""India"": 1,
    ""Russia"": 203,
    ""Brazil"": 1,
    ""Japan"": 6,
    ""United States"": 37,
    ""Lithuania"": 12,
    ""The Netherlands"": 8,
    ""Singapore"": 28,
    ""Bulgaria"": 4,
    ""Germany"": 6,
    ""China"": 71,
    ""Switzerland"": 2,
    ""Belgium"": 2,
    ""France"": 5,
    ""Australia"": 2,
    ""South Korea"": 1,
    ""Pakistan"": 1,
    ""Indonesia"": 1,
    ""United Kingdom"": 1,
    ""Nigeria"": 3,
    ""Hong Kong"": 1
  },
  ""account"": {
    ""hello"": 246,
    ""(empty)"": 7,
    ""Administr"": 205,
    ""Test"": 20,
    ""Domain"": 10,
    ""RFovDMivQ"": 1,
    ""yvOgpT"": 1,
    ""bAsWEv"": 1,
    ""beio"": 2,
    ""HVdWMdada"": 1,
    ""twHaMC"": 1,
    ""apdrfn"": 1,
    ""142.93.8.59"": 86,
    ""Administrator"": 1,
    ""frIABrKyZ"": 1,
    ""XTaZKq"": 1,
    ""teLEDU"": 1,
    ""u7d4zn5r"": 4,
    ""x4il11ds"": 4,
    ""mra3t4hb"": 1,
    ""lnfwzlTOg"": 1,
    ""gyiGEU"": 1,
    ""zoRcrt"": 1
  },
  ""keyboard"": {
    ""Unknown"": 598
  },
  ""client_build"": {
    ""Unknown"": 598
  },
  ""client_name"": {
    ""Unknown"": 598
  },
  ""ip_type"": {
    ""Unknown"": 304,
    ""proxy"": 209,
    ""hosting"": 77,
    ""hosting & proxy"": 6,
    ""mobile"": 2
  }
}"
NU4D4C2R,ultimatestaffing.com-extended-search-results.user.js,jcunews,JavaScript,Tuesday 28th of May 2024 07:01:50 PM CDT,"// ==UserScript==
// @name         ultimatestaffing.com extended search results
// @namespace    https://greasyfork.org/en/users/85671-jcunews
// @version      0.0.1
// @license      AGPL v3
// @author       jcunews
// @description  Context: https://www.reddit.com/r/userscripts/comments/1d29bey/job_hunting_possible_to_show_wage_info_on_search/
// @match        https://careers.ultimatestaffing.com/?*
// @grant        none
// @run-at       document-end
// ==/UserScript==

//- Included more job details in search results (all except contact info) for less clicking.
//- Added search result entry numbers for easy pinpointing/remembering the location of specific entries within a result page.
//- Added background color to every two search result entries for easy distinction between adjacent result entries.
//- Compacted search result text line spacing for less scrolling.

(async () => {
  document.body.insertAdjacentHTML(""beforeend"", `<style>
#results-panel,.job p{line-height:normal}
#results-panel{counter-reset:num}
#results-panel .job:nth-child(2n){outline:.5em solid #f5f5f5;background:#f5f5f5}
#results-panel .result-title:before{counter-increment:num;content:counter(num) "". ""}
#results-panel .job p{padding-bottom:0}
#results-panel .job p:first-of-type{padding-bottom:1em}
</style>`);
  document.querySelectorAll('#results-panel .job a.result-title').forEach(async (elink, eentry, erow, epage, efield) => {
    (eentry = elink.closest('.job')).insertAdjacentHTML(""beforeend"",
      '<p><b></b>Loading more data...<b></b> </p><p><b></b> <b></b> </p><p><b></b> <b></b> </p>');
    (epage = document.createElement(""DIV"")).innerHTML = await (await fetch(elink.href)).text();
    erow = eentry.children[3];
    if (efield = epage.querySelector('#PayRange')) {
      erow.childNodes[0].textContent = efield.childNodes[0].data;
      erow.childNodes[1].data = "" "" + efield.childNodes[1].textContent;
    }
    erow = eentry.children[4];
    if (efield = epage.querySelector('#employeeTypeListItem')) {
      erow.childNodes[0].textContent = efield.childNodes[0].data;
      erow.childNodes[1].data = "" "" + efield.childNodes[1].textContent + "" | "";
    }
    if (efield = epage.querySelector('#jobTypeListItem')) {
      erow.childNodes[2].textContent = efield.childNodes[0].data;
      erow.childNodes[3].data = "" "" + efield.childNodes[1].textContent;
    }
    erow = eentry.children[5];
    if (efield = epage.querySelector('#experienceListItem')) {
      erow.childNodes[0].textContent = efield.childNodes[0].data;
      erow.childNodes[1].data = "" "" + efield.childNodes[1].textContent + "" | "";
    }
    if (efield = epage.querySelector('#educationListItem')) {
      erow.childNodes[2].textContent = efield.childNodes[0].data;
      erow.childNodes[3].data = "" "" + efield.childNodes[1].textContent;
    }
  })
})()
"
pGW9Ub92,Modified,Error_hecker,Lua,Tuesday 28th of May 2024 06:54:03 PM CDT,"
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = ""Free admin GUI"", HidePremium = false, SaveConfig = true, ConfigFolder = ""OrionTest""})

local args = {
    [1] = {
        [1] = ""Prefix"",
        [2] = "";""
    }
}

game:GetService(""ReplicatedStorage""):WaitForChild(""HDAdminClient""):WaitForChild(""Signals""):WaitForChild(""ChangeSetting""):InvokeServer(unpack(args))

OrionLib:MakeNotification({
	Name = ""GUI"",
	Content = ""Prefix has been changed to ;"",
	Image = ""rbxassetid://4483345998"",
	Time = 5
})

local Tab = Window:MakeTab({
	Name = ""Gears"",
	Icon = ""rbxassetid://7733674079"",
	PremiumOnly = false
})

Tab:AddButton({
	Name = ""OP Hammer"",
	Callback = function()
      		game.Players:Chat("";gear me 45177979"")
  	end    
})

Tab:AddButton({
	Name = ""Table"",
	Callback = function()
      		game.Players:Chat("";gear me 243788010"")
  	end    
})

Tab:AddButton({
	Name = ""Vacuum cleaner"",
	Callback = function()
      		game.Players:Chat("";gear me 84418938"")
  	end    
})

Tab:AddButton({
	Name = ""Black hole bomb"",
	Callback = function()
      		game.Players:Chat("";gear me 28277486"")
  	end    
})

Tab:AddButton({
	Name = ""Backet(Half OP)"",
	Callback = function()
      		game.Players:Chat("";gear 25162389"")
  	end    
})

Tab:AddButton({
	Name = ""Hot potato"",
	Callback = function()
      		game.Players:Chat("";gear me 25741198"")
  	end    
})

Tab:AddButton({
 Name = ""Bazooka(OP)"",
 Callback = function()
        game.Players:Chat("";gear me 169602103"")
   end    
})

Tab:AddButton({
 Name = ""Scroll(Half OP)"",
 Callback = function()
        game.Players:Chat("";gear me 125013830"")
   end    
})

Tab:AddButton({
 Name = ""Triple laser(OP)"",
 Callback = function()
        game.Players:Chat("";gear me 115377964"")
   end    
})

Tab:AddButton({
 Name = ""Tri-Lazer 3000(OP)"",
 Callback = function()
        game.Players:Chat("";gear me 139578207"")
   end    
})

Tab:AddButton({
 Name = ""Rainbow Periastron Sword"",
 Callback = function()
        game.Players:Chat("";gear me 159229806"")
   end    
})

Tab:AddButton({
 Name = ""Bone Sword(OP)"",
 Callback = function()
        game.Players:Chat("";gear me 95951291"")
   end    
})

Tab:AddButton({
	Name = ""Black Hole Ray(Half OP)"",
	Callback = function()
      		game.Players:Chat("";gear me 78005009"")
  	end    
})

Tab:AddButton({
	Name = ""Rocket launcher(Half OP)"",
	Callback = function()
      		game.Players:Chat("";gear me 67747912"")
  	end    
})

Tab:AddButton({
	Name = ""Gravity Hummer(Half OP)"",
	Callback = function()
      		game.Players:Chat("";gear me 33866846"")
  	end    
})

Tab:AddButton({
	Name = ""Platform Producer(Half OP)"",
	Callback = function()
      		game.Players:Chat("";gear me 34898883"")
  	end    
})

Tab:AddButton({
	Name = ""Bear Gun(Half OP)"",
	Callback = function()
      		game.Players:Chat("";gear me 90718350"")
  	end    
})

Tab:AddButton({
	Name = ""Remote Bomb(OP)"",
	Callback = function()
      		game.Players:Chat("";gear me 33383241"")
  	end    
})

Tab:AddDropdown({
	Name = ""Divine horn"",
	Default = """",
	Options = {""Get Divine Horn"", ""Multi Activation"", ""Spam Activation""},
	Callback = function(Value)
		if Value == ""Get Divine Horn"" then
		game.Players:Chat("";gear me 127506257"")
		end
		if Value == ""Multi Activation"" then
		local args = {
    [1] = ""DO THE THING!!!""
}

game:GetService(""Players"").LocalPlayer.Character.KOSSGustHorn.RemoteEvent:FireServer(unpack(args))
		end
		if Value == ""Spam Activation"" then
		while game:GetService(""RunService"").RenderStepped:wait() do
		local args = {
    [1] = ""DO THE THING!!!""
}

game:GetService(""Players"").LocalPlayer.Character.KOSSGustHorn.RemoteEvent:FireServer(unpack(args))
		end
		end
	end    
})

Tab:AddButton({
	Name = ""Spray Paint(OP)"",
	Callback = function()
      		game.Players:Chat("";gear me 80576967"")
  	end    
})

Tab:AddButton({
	Name = ""Hammer Judges(Half OP)"",
	Callback = function()
      		game.Players:Chat("";gear me 1046322934"")
  	end    
})

Tab:AddButton({
	Name = ""Resize tool(OP)"",
	Callback = function()
      		game.Players:Chat("";gear me 16969792"")
  	end    
})

Tab:AddButton({
	Name = ""Staff of Fire"",
	Callback = function()
      		game.Players:Chat("";gear me 32858741"")
  	end    
})

Tab:AddButton({
	Name = ""Glove(Half OP)"",
	Callback = function()
      		game.Players:Chat("";gear me 65469882"")
  	end    
})

Tab:AddButton({
 Name = ""Thief coin(Half OP)"",
 Callback = function()
        game.Players:Chat("";gear me 117544573"")
   end    
})

Tab:AddButton({
 Name = ""Zombie staff"",
 Callback = function()
        game.Players:Chat("";gear me 26421972"")
   end    
})

Tab:AddButton({
 Name = ""Za warudo"",
 Callback = function()
         game.Players:Chat("";gear me 71037101"")
   end    
})

Tab:AddButton({
 Name = ""Taser(Half OP)"",
 Callback = function()
        game.Players:Chat("";gear me 82357123"")
   end    
})

Tab:AddDropdown({
	Name = ""Snowball"",
	Default = """",
	Options = {""Get Snowball"", ""Spam Snowballs""},
	Callback = function(Value)
		if Value == ""Get Snowball"" then
		game.Players:Chat("";gear me 19328185"")
		end
		if Value == ""Spam Snowballs"" then
		local LP = game.Players.LocalPlayer
repeat wait() until LP.Character
for i,v in pairs(LP.Backpack:GetChildren()) do
   if v.Name == ""Snowball"" then
       v.Parent = LP.Character
   end
end
while true do
   wait(0.25)
   for i,v in pairs (LP.Character:GetChildren()) do
       if v.Name == ""Snowball"" then
           v:Activate()
       end
   end
   task.wait(0.25)
end
		end
	end
})

local Tab = Window:MakeTab({
	Name = ""Silent CMD"",
	Icon = ""rbxassetid://4370318685"",
	PremiumOnly = false
})

Tab:AddTextbox({
	Name = ""CMD"",
	Default = """",
	TextDisappear = true,
	Callback = function(Value)
		game.Players:Chat("";"" .. Value .."""")
	end	  
})

local Section = Tab:AddSection({
	Name = ""For intellectually developed people""
})

Tab:AddTextbox({
	Name = ""Uncmdbar2"",
	Default = ""Username"",
	TextDisappear = true,
	Callback = function(Value)
		game.Players:Chat("";Uncmdbar2 "".. Value .."""")
	end	  
})

local Tab = Window:MakeTab({
	Name = ""GUIS"",
	Icon = ""rbxassetid://4483345998"",
	PremiumOnly = false
})

Tab:AddButton({
	Name = ""Fedoratum admin"",
	Callback = function()
      		loadstring(game:HttpGet(""https://raw.githubusercontent.com/zephyr10101/showcases/main/fedoratumadmin"",true))()
  	end    
})

Tab:AddButton({
	Name = ""Silent CMD"",
	Callback = function()
      		loadstring(game:HttpGet(""https://pastebin.com/raw/pGe3C71V""))()
  	end    
})

local Tab = Window:MakeTab({
                    Name = ""Defense"",
                    Icon = ""http://www.roblox.com/asset/?id=7734056608"",
                    PremiumOnly = false
                })

Tab:AddToggle({
	Name = ""Anti slowdown"",
	Default = false,
	Callback = function(Value)
		AntiSlowdown = Value
		while AntiSlowdown do
		if game.Players.LocalPlayer.Character.Humanoid.WalkSpeed < 9 then
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
		end
		if game.Players.LocalPlayer.Character.Humanoid.JumpPower < 25 then
		game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50
		end
		task.wait()
		end
	end    
})

Tab:AddToggle({
	Name = ""Anti mute"",
	Default = false,
	Callback = function(Value)
		AntiMute = Value
		while AntiMute do
local sgui = game:GetService(""StarterGui"")
sgui:SetCoreGuiEnabled(Enum.CoreGuiType.Chat, true)
task.wait()
end
	end    
})

Tab:AddToggle({
 Name = ""Anti kill"",
 Default = fasle,
 Callback = function(Value)
        AntiKill = Value
        while AntiKill do
        if game:GetService(""Players"").LocalPlayer.Character.Humanoid.Health == 0 then
        game.Players:Chat("";refresh"")
        end
        task.wait(0.2)
        end
   end    
})

Tab:AddToggle({
	Name = ""Anti Void"",
	Default = false,
	Callback = function(Value)
	AntiVoid = Value
		local part = Instance.new(""Part"")
part.Name = ""AntiFallPart""
part.Size = Vector3.new(50000, 5, 50000)
part.Transparency = 1
part.Anchored = AntiVoid
part.Position = Vector3.new(-1, -100, 66)
part.Parent = game.Workspace
	end 
})

Tab:AddToggle({
	Name = ""Anti freeze"",
	Default = false,
	Callback = function(Value)
	AntiFreeze = Value
	while AntiFreeze do
	      game.Players:Chat("";thaw"")
	task.wait(1.8)
	end
	end    
})

Tab:AddToggle({
	Name = ""Anti jail"",
	Default = false,
	Callback = function(Value)
	AntiJail = Value
	while AntiJail do
	      game.Players:Chat("";unjail"")
	task.wait(1.8)
	end
	end    
})

Tab:AddToggle({
	Name = ""Anti control"",
	Default = false,
	Callback = function(Value)
	AntiControl = Value
	while AntiControl do
	      game.Players:Chat("";uncontrol"")
	task.wait(1.8)
	end
	end    
})

local Tab = Window:MakeTab({
	Name = ""Extra"",
	Icon = ""rbxassetid://7733955740"",
	PremiumOnly = false
})

Tab:AddTextbox({
	Name = ""Heavenly Prison"",
	Default = ""Username"",
	TextDisappear = true,
	Callback = function(Value)
last_pick_sin_mrazy = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame 
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1e9, 1e8, 0) 
    wait(0.1) 
    game.Players:Chat("";Bring "".. Value .."""")
wait(1)
game.Players:Chat("";jail "" .. Value .."""")
wait(1)
    game. Players.LocalPlayer.Character.HumanoidRootPart.CFrame = last_pick_sin_mrazy
	end	  
})

Tab:AddTextbox({
	Name = ""Death countdown"",
	Default = ""Username"",
	TextDisappear = true,
	Callback = function(Value)
		game.Players:Chat("";countdown 10"")
		wait(10)
		game.Players:Chat("";explode "" .. Value .."""")
	end	  
})

Tab:AddTextbox({
	Name = ""Disabled person"",
	Default = ""Username"",
	TextDisappear = true,
	Callback = function(Value)
		game.Players:Chat("";Jumppower "" .. Value .."" 0"")
		game.Players:Chat("";sit "" .. Value .."""")
		game.Players:Chat("";Speed "" .. Value .."" 0"")
	end	  
})

Tab:AddTextbox({
	Name = ""Kill player"",
	Default = ""Username"",
	TextDisappear = true,
	Callback = function(Value)
	game.Workspace.Gravity = 0
		last_pick_sin_mrazy = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame 
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-354, -370, -38) 
    wait(1)
    game.Players:Chat("";unfly "" .. Value .."""")
    game.Players:Chat("";clip "" .. Value .."""")
    game.Players:Chat("";Bring "" .. Value .."""")
    wait()
    game. Players.LocalPlayer.Character.HumanoidRootPart.CFrame = last_pick_sin_mrazy 
    game.Workspace.Gravity = 200
	end	  
})

Tab:AddTextbox({
	Name = ""Singularity"",
	Default = ""Username"",
	TextDisappear = true,
	Callback = function(Value)
		game.Players:Chat("";warp "" .. Value .."""")
		wait(3.45)
		game.Players:Chat("";apparate "" .. Value .."" 10000"")
	end	  
})

Tab:AddButton({
 Name = ""Drop tools"",
 Callback = function()
        for i,v in pairs(game.Players.LocalPlayer.Backpack:GetDescendants()) do
   if v:IsA(""Tool"")  then
    game:GetService(""RunService"").RenderStepped:wait()
    v.Parent = game.Players.LocalPlayer.Character
    game:GetService(""RunService"").RenderStepped:wait()
    v.Parent = game.Workspace
end
end
   end    
})

Tab:AddButton({
 Name = ""Multi gear(press E)"",
 Callback = function()
        lp = game:GetService(""Players"").LocalPlayer

game:GetService(""UserInputService"").InputBegan:Connect(function(key)
 if key.KeyCode == Enum.KeyCode.E then
  for i,tool in pairs(lp.Backpack:GetChildren()) do
   if tool:IsA(""Tool"") then
    tool.Parent = lp.Character
    tool:Activate()
    task.wait()
    tool.Parent = lp.Backpack
   end
  end
 end
end)
   end    
})

Tab:AddButton({
 Name = ""Check item name"",
 Callback = function()
        local player = game.Players.LocalPlayer
local function getCurrentItemInHand()
    if player.Character then
        for _, item in pairs(player.Character:GetChildren()) do
            if item:IsA(""Tool"") then
                return item.Name
            end
        end
    end
    return ""No object in hand""
end

print(getCurrentItemInHand())
   end    
})

Tab:AddTextbox({
	Name = ""takeHimtoHeaven"",
	Default = ""Username"",
	TextDisappear = true,
	Callback = function(Value)
		game.Players:Chat("";Jumppower "" .. Value .."" 99999"")
		game.Players:Chat("";sit "" .. Value .."""")
		game.Players:Chat("";jump "" .. Value .."""")
	end	  
})"
2d0zjQNp,🤑G2A.com Free Gift Card Guide 2024 May🔥,Alfonso1119,Python,Tuesday 28th of May 2024 06:46:26 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_1737385.pdf

Working as of:

29 May 2024"
1XybaK2e,💰G2A.com Free Gift Card Guide 2024 May🚀,Garoam,Python,Tuesday 28th of May 2024 06:39:41 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Steam gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_1737385.pdf

Working as of:

29 May 2024"
HfJJibtq,💰G2A.com Free Gift Card Guide 2024 May🚀,atakan1983,Python,Tuesday 28th of May 2024 06:32:57 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_1737385.pdf

Working as of:

29 May 2024"
95zXMEH2,🎉G2A.com Free Gift Card Guide 2024 May🔥,pestinha,Python,Tuesday 28th of May 2024 06:19:27 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_1737385.pdf

Working as of:

29 May 2024"
x6qag8qm,quite good VK,max2201111,Python,Tuesday 28th of May 2024 05:46:12 PM CDT,"#Navod na pouziti, Mgr. Hynek Mlčoušek, v Brne 2.5.2024
#Ulozte do lokalniho souboru u sebe na PC data tohoto tvaru vzdy ukoncene 0 ci 1 (jde o uceni s ucitelem: 1 = nemocny, 0 = prezil/zdravy, ve vystupu bude zelena znacit 0, cervena 1)  a bez znaku #; pozor na "",""

# [ [23.657800719276743,18.859916797201468,0],
# [22.573729142097473,17.96922325097786,0],
# [32.55342396968757,29.463651408558803,0],
# [6.718035041529263,25.704665468161718,1],
# [14.401918566243225,16.770856492924658,0],
# [17.457907312962234,21.76521470574044,0],
# [20.02796946568093,73.45445954770891,1],
# [30.295138369778076,62.901112886193246,1],
# [15.128977804449633,32.40267702110393,0],
# [30.179457395820013,58.982492125646104,1],
# [28.01649701854089,63.92781357637711,1],
# [16.791838457871147,42.33482314089884,0],
# [10.583694293380976,19.61926728942497,0],
# [26.634447074406467,91.96624817360987,1],
# [26.217868623367643,36.400293587062976,0],
# [17.689396788624936,60.79797114006423,1],
# [33.17193822527976,66.75277364959176,1],
# [23.793952755709153,22.57501437360518,0]]

#kliknete na cerne tlacitko s trojuhelnickem vlevo nahore
#pod kodem se objevi moznost spustit dialogove okenko, kliknete na nej
#soubor, ktery mate z bodu vyse vyberte a nahrajte
#Najdete v tomto kodu retezec:
###ZDE VLOZTE DATA OD NOVYCH PACIENTU

#Vlozte do pole
# new_persons_results = []
# data o nekolika malo novych pacientech bez ukoncovaci 0 a 1, ale se stejnym poctem sloupcu jako ma soubor z Vaseho lokalniho disku, vyse by tedy toto bylo rovno 2
#kod vyhodi hned po natrenovani, (jehoz prubeh muzete sledovat na modre progres bare) pro kazdy radek z new_persons_results bilo-sedo-cerne ctverecky vznikle z normalizace poskytnutych dat a ukoncovaci ctverecek cerveny pripadne zeleny
#zaroven s tim se vypise realne cislo mezi 0 a 1 znacici jak moc je pacient zdravy (blizke 0) ci nemocny (blizke 1)
#cisla uprostred pak indikuji zadany oranzovy semafor.
#je na lekarich nastavit tresholdy (tedy pravdepodobnosti: cisla mezi 0 a 1) ktere pak daji zaver, zda je pacient cerveny, oranzovy ci zeleny

# prosim o komnetare a vysledky na realnych datech, je zadouci aby radku v matici, tedy pacientu byly stovky a sloupcu desitky
# Moznosti vyuziti: onkologicka diagnoza vs. zdrava kontorlni skupina, diabetes (pritomnost/nepritomnost), testovani noveho leku oproti placebu atd.

#kod zaroven vyhodi confusion matici, tedy mozne True Negative a False Positive plus spravne zarazene hodnoty spolu s presnosti,F1 score recall atd.
#poznamka ke kodu: jde o epxerimentalni verzi, ktera krome skutecne potrebneho kodu obsahuje ladici informace, ruzne duplicity, nadbytecne prikazy atd.
# Na uvod behu programu se pro kontorlu vypise poskytnuta matice a jeji normalizovana verze, je treba sjet jezdcem napravo nize na obrazky a dalsi vystupy

#Dekuji profesoru Petru Dostalovi za namet k teto praci a poskytnuta data, byt je potreba mit data realna

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tqdm import tqdm


from IPython.display import display
from IPython.display import Javascript
display(Javascript('IPython.OutputArea.auto_scroll_threshold = 9999;'))

label_colors = {0: [0, 128, 0], 1: [255, 0, 0]}
label_colors_testing = {0: [0, 128, 0], 1: [255, 0, 0]}


%matplotlib inline



# Function to create images based on predictions
def create_image(data, predictions):
    num_rows, num_columns = len(data), len(data[0])
    image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

    for i in range(num_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
            image[i, j] = np.array([pixel_value] * 3)

        # Create a gradient based on the normalized values
        gradient_value = int(np.interp(predictions[i], [0, 1], [0, 255]))
        image[i, -1] = np.array([gradient_value] * 3)

    return image

def create_image(data, predictions):
    num_rows, num_columns = len(data), len(data[0])
    image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

    for i in range(num_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
            image[i, j] = np.array([pixel_value] * 3)

        # Use red for class 0 and green for class 1
        if predictions[i] == 0:
            image[i, -1] = np.array([255, 0, 0])  # Red
        elif predictions[i] == 1:
            image[i, -1] = np.array([0, 128, 0])  # Green

    return image

def create_image(data, predictions, label_colors):
    num_rows, num_columns = len(data), len(data[0])
    image = np.zeros((num_rows, num_columns + 1, 3), dtype=np.uint8)

    for i in range(num_rows):
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [np.min(data), np.max(data)], [0, 255]))
            image[i, j] = np.array([pixel_value] * 3)

        # Use the specified color for the last column based on the label
        image[i, -1] = label_colors[predictions[i]]

    return image



def create_imageN(data, predictions, label_colors=None):
    num_training_rows = len(data)  # Set the number of rows based on the data
    num_columns = len(data[0])

    image_training = np.zeros((num_training_rows, num_columns + 1, 3), dtype=np.uint8)

    min_pixel_value = np.min(X_train_normalized)
    max_pixel_value = np.max(X_train_normalized)




    for i in range(num_training_rows):
        # Normalize the first columns independently
        for j in range(num_columns):
            pixel_value = int(np.interp(data[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
            image_training[i, j] = np.array([pixel_value] * 3)

        # Normalize the last column separately to achieve grayscale
        pixel_value_last = int(np.interp(data[i][-1], [min_pixel_value, max_pixel_value], [0, 255]))
        image_training[i, -1] = np.array([pixel_value_last] * 3)

        # Use the specified color for the last column based on the label
        if label_colors is not None:
            image_training[i, -1] = label_colors[predictions[i]]

    return image_training




# Load data from a file
#file_path = 'C:/Users/Hynek/Desktop/example4.txt'
from google.colab import files
uploaded = files.upload()

# Tento kód otevře dialogové okno pro výběr souboru z vašeho počítače.
import io
import pandas as pd

# Předpokládáme, že jste nahráli CSV soubor
for fn in uploaded.keys():
  print('User uploaded file ""{name}"" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))
  path = io.BytesIO(uploaded[fn])  # Pro soubory, které potřebují být čteny jako binární objekty
  df = pd.read_csv(path)
  print(df.head())  # Vypíše prvních pět řádků DataFrame


all_results = []
#with open(file_path, 'r') as file:
#    file_content = file.read()

# Execute the content as Python code
##exec(file_content)

import os
import shutil
import ast

for filename in uploaded.keys():
    original_path = f""/content/{filename}""
    destination_path = os.path.join(""/content/"", ""/content/DATA2"")
    shutil.move(original_path, destination_path)
    print(f""Soubor {filename} byl přesunut do {destination_path}"")

file_path = '/content/DATA2'  # Cesta k souboru
with open(file_path, 'r') as file:
    code = file.read()

A_list = ast.literal_eval(code)


# Převod na NumPy pole
A = np.array(A_list)

#exec(code)

# Now, all_results contains lists corresponding to each row in the CSV file
##print(all_results)

# Assign values to variables dynamically based on the rows of matrix A
for i, row in enumerate(A, start=1):
    globals()[f""person{i}_results""] = list(row)

# Print the assigned variables
for i in range(1, len(A) + 1):
  #  print(f""person{i}_results {globals()[f'person{i}_results']}"")
    all_results.append(f""person{i}_results"")
##print(all_results)



result_variables = []

# Loop through the variable names and get the corresponding variables using globals()
for var_name in all_results:
    result_variables.append(globals()[var_name])

# Now, result_variables contains the variables with names specified in variable_names
#print(result_variables)

all_results = result_variables
new_persons_results = result_variables



labels = [results[-1] for results in all_results]

# Odstranění posledního sloupce z datasetu
data = [results[:-1] for results in all_results]

# Definice počtu řádků pro trénování a testování
num_training_rows = 100
num_testing_rows = 100

# Rozdělení datasetu na trénovací a testovací sady
X_train, X_test, y_train, y_test = data[:num_training_rows], data[:num_testing_rows], labels[:num_training_rows], labels[:num_testing_rows]

# Převod na NumPy pole
X_train = np.array(X_train)
X_test = np.array(X_test)
y_train = np.array(y_train)
y_test = np.array(y_test)

# Normalizace dat (s ohledem na -1)
min_values = np.min(X_train[X_train != -1], axis=0)
max_values = np.max(X_train[X_train != -1], axis=0)
X_train_normalized = (X_train - min_values) / (max_values - min_values)



import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import seaborn as sns
from tqdm.notebook import tqdm_notebook



import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tqdm.notebook import tqdm_notebook

# Průměry (mu) a směrodatné odchylky (sigma)
mu = np.mean(X_train, axis=0)
sigma = np.std(X_train, axis=0)

# Normalizace každého sloupce zvlášť
X_train_standardized = (X_train - mu) / sigma
X_test_standardized = (X_test - mu) / sigma

# Vylepšený model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(256, activation='relu', input_shape=(len(X_train[0]),)),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Použití Adam optimizer s learning rate schedulerem
lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(
    initial_learning_rate=1e-3,
    decay_steps=10000,
    decay_rate=0.9
)
optimizer = tf.keras.optimizers.Adam(learning_rate=lr_schedule)

# Kompilace modelu
model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])

# Lists to store accuracy values
accuracy_history = []

# Create images for the training data
image_training = np.zeros((num_training_rows, len(X_train[0]) + 1, 3), dtype=np.uint8)

min_pixel_value = np.min(X_train_standardized, axis=0)
max_pixel_value = np.max(X_train_standardized, axis=0)

for i, label in enumerate(y_train):
    for j in range(len(X_train_standardized[0])):
        pixel_value = int(np.interp(X_train_standardized[i][j], [min_pixel_value[j], max_pixel_value[j]], [0, 255]))
        image_training[i, j] = np.array([pixel_value] * 3)
    image_training[i, -1] = np.array([128, 128, 128])
    if label == 0:
        image_training[i, -1] = np.array([0, 128, 0])
    elif label == 1:
        image_training[i, -1] = np.array([255, 0, 0])

# Training the model
epochs = 139
new_persons_results = [
    [23.65780072, 18.8599168],
    [22.57372914, 17.96922325],
    [32.55342397, 29.46365141],
    [ 6.71803504, 25.70466547],
    [14.40191857, 16.77085649],
    [17.45790731, 21.76521471],
    [20.02796947, 73.45445955],
    [26.2042, 10.6782],
    [35.7258, 12.8027],
    [21.2, 7.8],
    [50.1, 40.2],
    [32.739, 42.0152],
    [28.1, 10.1],
]

import sys

for epoch in tqdm_notebook(range(epochs)):
    history = model.fit(X_train_standardized, np.array(y_train), epochs=1, verbose=0, shuffle=False)
    accuracy_history.append(history.history['accuracy'][0])

    if epoch == 1:
        # Normalize the testing data
        X_test_standardized = (X_test - mu) / sigma
        y_pred_after_2nd_epoch = model.predict(X_test_standardized)
        y_pred_binary_after_2nd_epoch = [1 if pred >= 0.5 else 0 for pred in y_pred_after_2nd_epoch]
        image_testing_before_2nd_epoch = create_image(X_test_standardized, y_pred_binary_after_2nd_epoch, label_colors_testing)

    if epoch >= epochs-1:
        print(f""HERE HERE Epoch: {epoch}, Epochs: {epochs}\n"")
        sys.stdout.flush()

        # Iterate through new persons
        for idx, personNEW_results in enumerate(new_persons_results, start=0):
            # Ensure that personNEW_results has the same number of features as the model expects
            assert len(personNEW_results) == len(X_train[0]), ""Mismatch in the number of features.""

            personNEW_results_standardized = (np.array(personNEW_results) - mu) / sigma

            personNEW_prediction = model.predict(np.array([personNEW_results_standardized]))
            personNEW_label = 1 if personNEW_prediction >= 0.5 else 0
            y_pred_after_50_epochs = model.predict(X_test_standardized)
            y_pred_binary_after_50_epochs = [1 if pred >= 0.5 else 0 for pred in y_pred_after_50_epochs]
            image_testing_after_50_epochs = create_image(X_test_standardized, y_pred_binary_after_50_epochs, label_colors_testing)

            # Create an image for the new person
            image_personNEW = create_imageN([personNEW_results_standardized], [personNEW_label], label_colors)

            # Display the images
            plt.figure(figsize=(5, 5))
            plt.imshow(image_personNEW)
            plt.title(f""New Person {idx}\nLabel: {personNEW_label}, Prediction: {personNEW_prediction}, personNEW_results: {personNEW_results}"")
            plt.axis(""off"")
            plt.show()

# Display the images
plt.figure(figsize=(25, 15))
plt.subplot(2, 2, 1)
plt.imshow(image_training)
plt.title(""Training Data"")
plt.axis(""off"")

plt.subplot(2, 2, 2)
plt.imshow(image_testing_before_2nd_epoch)
plt.title(""Testing Data (2nd Epoch)"")
plt.axis(""off"")

plt.subplot(2, 2, 3)
plt.imshow(image_testing_after_50_epochs)
plt.title(f""Testing Data ({epochs} Epochs)"")
plt.axis(""off"")

plt.subplot(2, 2, 4)
plt.imshow(image_personNEW)
plt.title(f""New Person\nLabel: {personNEW_label},[{personNEW_prediction}]"")
plt.axis(""off"")

# Plot accuracy history
plt.figure(figsize=(12, 5))
plt.plot(range(1, epochs + 1), accuracy_history, marker='o')
plt.title('Accuracy Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.grid()

# Print standardized data
print(""Standardized PersonNEW Data:"")
print(personNEW_results_standardized)

plt.show()

print(""X_train before standardization:"")
print(X_train)
print(""X_test before standardization:"")
print(X_test)

import seaborn as sns

print(""KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK"")
print(X_test)
print(""HHHHHHHHHHHHHHHHHHHHHHHHHHHHHH"")
print(X_train)
print(""LLLLLLLLLLLLLLLLLLLLLLLLLLLLL"")

# y_pred_binary = [1 if pred >= 0.5 else 0 for pred in model.predict(X_test_standardized)]

# # Create confusion matrix
# conf_matrix = confusion_matrix(y_train, y_pred_binary)
# print(conf_matrix)

from sklearn.metrics import confusion_matrix
from tensorflow.keras.utils import to_categorical

np.set_printoptions(threshold=np.inf, precision=4, suppress=True)

# Assuming X_test_standardized and y_test are your test set data
y_pred_binary = [1 if pred >= 0.5 else 0 for pred in model.predict(X_test_standardized)]

# Create confusion matrix using the test set
conf_matrix = confusion_matrix(y_test, y_pred_binary)
print(conf_matrix)

plt.figure(figsize=(6, 6))
sns.heatmap(conf_matrix, annot=True, fmt=""d"", cmap=""Blues"", xticklabels=['Predicted 0', 'Predicted 1'], yticklabels=['Actual 0', 'Actual 1'])
plt.xlabel(""Predicted Label"")
plt.ylabel(""True Label"")
plt.title(""Confusion Matrix"")
plt.show()

X_train = np.array(X_train)
#y_train_one_hot = np.array(y_train_one_hot)

# Rozdělení dat na trénovací a testovací množiny
X_train, X_test, y_train, y_test = data[:num_training_rows], data[:num_testing_rows], labels[:num_training_rows], labels[:num_testing_rows]

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import tensorflow as tf
import seaborn as sns

# Assuming data splitting and model definition have been done correctly

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
print(""Training Start"")
for epoch in tqdm_notebook(range(1000), desc=""Training Progress""):
    model.fit(np.array(X_train_standardized), np.array(y_train), epochs=1, verbose=0)
print(""Training Complete"")

# Generate predictions from the model
predictions = (model.predict(X_test_standardized) > 0.5).astype(int)

# Convert y_test to a numpy array and then to binary labels
y_test_array = np.array(y_test)  # Convert y_test to a numpy array
y_test_binary = (y_test_array > 0.5).astype(int)  # Convert to binary

# Compute the confusion matrix
conf_matrix = confusion_matrix(y_test_binary, predictions)

# Evaluate the model's performance
accuracy = accuracy_score(y_test_binary, predictions)
precision = precision_score(y_test_binary, predictions)
recall = recall_score(y_test_binary, predictions)
f1 = f1_score(y_test_binary, predictions)

# Display the confusion matrix
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

print(f""Accuracy: {accuracy:.4f}"")
print(f""Precision: {precision:.4f}"")
print(f""Recall: {recall:.4f}"")
print(f""F1 Score: {f1:.4f}"")

print(f""Confusion Matrix2122:\n{conf_matrix}"")

import random

def find_best_pair(min_val, max_val, num_features, model, min_values, max_values):
    best_pair = None
    best_prediction = 1
    for _ in range(1000):  # Number of iterations to find the best pair
        new_data = np.random.uniform(min_val, max_val, num_features)
        new_data_standardized = (new_data - mu) / sigma
        
        # Suppress model output
        tf.get_logger().setLevel('ERROR')
        with tf.device('/CPU:0'):  # Ensure to run on CPU to minimize unwanted logs
            prediction = model.predict(np.array([new_data_standardized]), verbose=0)[0][0]
        tf.get_logger().setLevel('INFO')
        
        if prediction < best_prediction:
            best_prediction = prediction
            best_pair = new_data
    return best_pair, best_prediction

best_pair, best_prediction = find_best_pair(min_values, max_values, len(X_train[0]), model, min_values, max_values)

def find_worst_pair(min_val, max_val, num_features, model, min_values, max_values):
    worst_pair = None
    worst_prediction = 0
    for _ in range(1000):  # Number of iterations to find the best pair
        new_data = np.random.uniform(min_val, max_val, num_features)
        new_data_standardized = (new_data - mu) / sigma
        
        # Suppress model output
        tf.get_logger().setLevel('ERROR')
        with tf.device('/CPU:0'):  # Ensure to run on CPU to minimize unwanted logs
            prediction = model.predict(np.array([new_data_standardized]), verbose=0)[0][0]
        tf.get_logger().setLevel('INFO')
        
        if prediction > worst_prediction:
            worst_prediction = prediction
            worst_pair = new_data
    return worst_pair, worst_prediction

worst_pair, worst_prediction = find_worst_pair(min_values, max_values, len(X_train[0]), model, min_values, max_values)

print(f""Best Pair: {best_pair}, Best Prediction: {best_prediction}"")
print(f""Worst Pair: {worst_pair}, Worst Prediction: {worst_prediction}"")



import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.metrics import recall_score, confusion_matrix, accuracy_score, precision_score, f1_score
import seaborn as sns
from tqdm.notebook import tqdm_notebook
from sklearn.decomposition import PCA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA



# Rozdělení na vstupní data (X) a cílové proměnné (y)
X = A[:, :-1]
y = A[:, -1]

# Rozdělení na trénovací a testovací sadu (v tomto příkladě použijeme celou sadu jako trénovací pro jednoduchost)
X_train, y_train = X, y
X_test, y_test = X, y

# Výpočet průměru a směrodatné odchylky pro každý sloupec
mu = np.mean(X_train, axis=0)
sigma = np.std(X_train, axis=0)

# Normalizace každého sloupce zvlášť
X_train_standardized = (X_train - mu) / sigma

# Normalizace testovacích dat
X_test_standardized = (X_test - mu) / sigma

# Definice modelu
model = tf.keras.Sequential([
    tf.keras.layers.Dense(256, activation='relu', input_shape=(X_train_standardized.shape[1],)),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Použití Adam optimizer s learning rate schedulerem
lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(
    initial_learning_rate=1e-3,
    decay_steps=10000,
    decay_rate=0.9
)
optimizer = tf.keras.optimizers.Adam(learning_rate=lr_schedule)

# Kompilace modelu
model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy', tf.keras.metrics.Recall()])

# Trénování modelu
history = model.fit(X_train_standardized, y_train, epochs=50, verbose=0, shuffle=False)

# Predikce
y_pred_prob = model.predict(X_test_standardized)
y_pred = (y_pred_prob > 0.5).astype(int)

# Výpočet metrik
recall = recall_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

# Vyhodnocení výkonu modelu
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

# Výpis metrik
print(f""Recall: {recall:.4f}"")
print(f""Accuracy: {accuracy:.4f}"")
print(f""Precision: {precision:.4f}"")
print(f""F1 Score: {f1:.4f}"")
print(f""Confusion Matrix:\n{conf_matrix}"")

# Zobrazení confusion matrix
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Odstranění mezivýstupů
num_iterations = 500

best_row = None
best_prediction = None
best_diff = float('inf')

for _ in range(num_iterations):
    new_data = np.random.normal(mu, sigma)
    new_data_standardized = (new_data - mu) / sigma
    prediction_prob = model.predict(np.array([new_data_standardized]), verbose=0)[0][0]
    diff = abs(prediction_prob - 0.67)
    
    if diff < best_diff:
        best_diff = diff
        best_row = new_data
        best_prediction = prediction_prob

print(f""Nejlepší řádek: {best_row}"")
print(f""Predikovaná hodnota: {best_prediction}"")
print(f""Rozdíl: {best_diff}"")

# Vizualizace výsledků pomocí PCA
X_standardized = (X - mu) / sigma
pca = PCA(n_components=2)  # Snížení na 2 komponenty
X_pca = pca.fit_transform(X_standardized)

plt.figure()
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y)
plt.xlabel('První hlavní komponenta')
plt.ylabel('Druhá hlavní komponenta')
plt.title('PCA na vašich datech')
plt.show()

# Vizualizace výsledků pomocí LDA
lda = LDA(n_components=1)
X_lda = lda.fit_transform(X_standardized, y)

plt.figure()
plt.scatter(X_lda[:, 0], np.zeros_like(X_lda), c=y)
plt.xlabel('První diskriminační komponenta')
plt.title('LDA s učitelem')
plt.show()

# Vytvoření obrazu pro trénovací data
min_pixel_value = -3
max_pixel_value = 3

image_training = np.zeros((len(X_train_standardized), len(X_train_standardized[0]) + 1, 3), dtype=np.uint8)

for i, label in enumerate(y_train):
    for j in range(len(X_train_standardized[0])):
        pixel_value = int(np.interp(X_train_standardized[i][j], [min_pixel_value, max_pixel_value], [0, 255]))
        image_training[i, j] = np.array([pixel_value] * 3)
    image_training[i, -1] = np.array([128, 128, 128])  # Šedý sloupec pro všechny řádky
    if label == 0:
        image_training[i, -1] = np.array([0, 128, 0])  # Zelený sloupec pro label 0
    elif label == 1:
        image_training[i, -1] = np.array([255, 0, 0])  # Červený sloupec pro label 1

# Zobrazení obrazu
plt.imshow(image_training)
plt.title(""Training Data"")
plt.axis(""off"")
plt.show()"
ieCWCwur,🎉G2A.com Free Gift Card Guide 2024 May🤑,Alfonso1119,Python,Tuesday 28th of May 2024 04:41:36 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_4944119.pdf

Working as of:

29 May 2024"
DGAbZq3C,🎉G2A.com Free Gift Card Guide 2024 May🚀,Garoam,Python,Tuesday 28th of May 2024 04:34:52 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_4944119.pdf

Working as of:

29 May 2024"
wbdB9XXu,Complete Register,danielvitor23,TypeScript,Tuesday 28th of May 2024 04:31:48 PM CDT,"""use client"";
import { zodResolver } from ""@hookform/resolvers/zod"";
import { useRouter } from ""next/navigation"";
import { Controller, SubmitHandler, useForm } from ""react-hook-form"";
import { z } from ""zod"";

import { Button } from ""@/components/Button"";
import { DayOfWeekPicker } from ""@/components/DaysOfWeekPicker"";
import Input from ""@/components/Input"";
import { InputImage } from ""@/components/InputImage"";
import { LabelError } from ""@/components/LabelError"";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from ""@/components/Select/Select"";
import TimePicker from ""@/components/TimePicker"";
import { useEffect } from ""react"";

const registerSchema = z.object({
  name: z.string().min(2, { message: ""Nome deve ter ao menos 2 caracteres."" }),
  selectedRole: z.string().min(1, { message: ""Selecione uma profissão"" }),
  image: z.string().min(1, { message: ""Adicione uma imagem!"" }),
  workingDays: z.array(
    z.coerce.boolean(),
  ).refine(arg => {
    const quantity = arg.reduce((prev, curr) => prev + (curr === true ? 1 : 0), 0)
    return quantity > 0;
  }, { message: 'Deve ter no mínimo 1 dia.' }),
  workingHour: z.tuple([z.date(), z.date()]),
});

type RegisterType = z.infer<typeof registerSchema>;

export default function CompleteRegister() {
  const router = useRouter();

  const {
    control,
    handleSubmit,
    register,
    formState: { errors },
  } = useForm<RegisterType>({
    resolver: zodResolver(registerSchema),
  });

  const onSubmit: SubmitHandler<RegisterType> = async (data) => {
    try {
      console.log(data);
      router.push(""/app"");
    } catch (error) {
      console.error(error);
    }
  };

  useEffect(() => {
    console.log(errors.image);
    console.log(errors.name);
    console.log(errors.selectedRole);
    console.log(errors.workingDays);
    console.log(errors.workingHour);
  }, [errors]);

  return (
    <form
      onSubmit={handleSubmit(onSubmit)}
      className=""grid grid-rows-[30px_1fr_1fr_50px] w-full h-full gap-12 sm:gap-6 min-[200px]:max-[700px]:gap-5""
    >
      <h1 className=""text-2xl font-semibold tracking-wider text-handle-blue text-center min-[200px]:max-[700px]:-mt-4"">
        Nos conte sobre sua vida profissional :)
      </h1>
      <div className=""md:grid md:grid-cols-[1fr_2fr] sm:flex sm:flex-col sm:items-center gap-6"">
        <div className=""flex flex-col items-center"">
          <Controller
            control={control}
            name=""image""
            render={({ field }) => <InputImage {...field} />}
          />
        </div>
        <div className=""flex flex-col justify-evenly gap-[38px] w-full min-[200px]:mt-6 min-[200px]:max-[700px]:w-full items-center min-[200px]:max-[700px]:gap-3"">
          <div className=""w-full flex flex-col gap-1"">
            <Input
              {...register(""name"")}
              error={!!errors.name}
              placeholder=""Nome""
              customBgColor=""bg-handle-background""
              sz=""large""
              className=""w-full""
            />

            <LabelError errors={errors} name=""name"" />
          </div>

          <div className=""w-full flex flex-col gap-1"">
            <Controller
              control={control}
              name=""selectedRole""
              render={({ field }) => (
                <Select {...field} onValueChange={(val) => field.onChange(val)}>
                  <SelectTrigger className=""bg-transparent h-16"">
                    <SelectValue placeholder={""Selecione sua profissão""} />
                  </SelectTrigger>
                  <SelectContent>
                    {[
                      ""Desenvolvedor"",
                      ""Designer"",
                      ""Engenheiro"",
                      ""Estudante"",
                      ""Outro"",
                    ].map((item) => {
                      return (
                        <SelectItem
                          className=""bg-transparent""
                          key={item}
                          value={item}
                        >
                          {item}
                        </SelectItem>
                      );
                    })}
                  </SelectContent>
                </Select>
              )}
            />

            <LabelError errors={errors} name=""selectedRole"" />
          </div>
        </div>
      </div>
      <div className=""border-[0.098rem] border-handle-gray-700 w-full h-full rounded-sm"">
        <label className=""absolute text-sm tracking-widest -mt-[15px] bg-handle-background ml-2 p-1"">
          Meu expediente
        </label>
        <div className=""flex flex-col items-center  w-full h-full justify-center min-[200px]:py-4 min-[200px]:px-1"">
          <div>
            <label htmlFor="""" className=""self-start mb-[7px] mt-[7px]"">
              Selecione os dias que você trabalha :)
            </label>
            <Controller
              control={control}
              name=""workingDays""
              render={({ field: { ref, value, onChange } }) => (
                <DayOfWeekPicker
                  ref={ref}
                  className=""h-full gap-[21.59px] min-[200px]:max-[500px]:gap-1 mb-[25px] w-full""
                />
              )}
            />
          </div>
          <TimePicker
            {...register(""workingHour"")}
            className={""gap[95px] w-full""}
          />
        </div>
      </div>
      <div className=""flex flex-col justify-center items-center"">
        <Button
          type=""submit""
          size=""large""
          variant={""primary""}
          className=""text-lg""
        >
          Finalizar
        </Button>
      </div>
    </form>
  );
}
"
mLVvvNif,🤑G2A.com Free Gift Card Guide 2024 May💰,atakan1983,Python,Tuesday 28th of May 2024 04:28:08 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Apple gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_4944119.pdf

Working as of:

29 May 2024"
Wtfhbk7K,CDP N to description,poodad,Perl,Tuesday 28th of May 2024 04:22:02 PM CDT,"use strict;
use Net::SNMP;
use CGI qw/:standard/;
use CGI::Carp qw(fatalsToBrowser);
use Net::Telnet::Cisco;
use DBI;
use Win32::TieRegistry( Delimiter=>""/"", ""KEY_READ"" );
use Data::Dumper;

print ""Content-type: text/html\n\n"";

my $userid = remote_user();
$userid = '' unless defined $userid;
$userid =~ s/..*\\//;
$userid = lc($userid);
my $password = $ENV{AUTH_PASSWORD};

if ( param('switch') and param('text') ){
    step3();
} elsif (param('switch') ) {
	step2();
} else {
    step1();
}

exit 0;

###############################################################################
#
# Draw the initial form 
#
###############################################################################

sub step1 {


    my %netinv;
    LoadNetInventory(\%netinv);

	my @switches = grep /^[A-Z]+[1-9][A-Z]S[0-9][0-9]$/i, keys %netinv;

    print start_form;
	print ""<p>Pick the switch: \n"";

	print ""<select name=switch>\n"";
	foreach my $switch (sort @switches) {
		$switch = uc $switch;
		print ""<option value=\""$switch\"">$switch\n"";
	}
	print ""</select>\n"";
	print '<p><input type=submit value=""Next"" name=button>';
	print end_form;    
}

###############################################################################
#
#
###############################################################################

sub step2 {

    my $switch = uc param('switch');

	my $obj = new switch($switch);
	
	die ""Could not create switch object for $switch\n"" unless $obj;
	
    print ""<h3>Switch: $switch</h3><p>\n"";
    
	my @ports = $obj->LoadPorts();
	
	my %portchannel;

    my @lines;

	foreach my $ifIndex ( sort @ports ) {
		my $port = $obj->GetPort($ifIndex);
	
		next if $port->name() =~ /^vl/i;			# skip vlans
		
		my $old_desc = $port->desc();
        my $tmp = $old_desc;
		my $new_desc = $old_desc;
        
        my $jack = """";
        if ( $tmp =~ /^([1-9][A-Z][0-9][0-9])/) {                    # Core switches have jack numbers - don't lose it
            $jack = $1;
        }
        
		$new_desc = '' if $new_desc =~ /uplink.+e[0-9][0-9]/i;			# If old description looks like ""Uplink to E54SJ01"", it is no longer valid 

		my $cdpn = $port->cdpn();
		$cdpn =~ s/\..+//g;												# Get rid of domain name
		$cdpn =~ s/\(..*\)//;
        
        
		if ($cdpn) {
			$new_desc = '';
			$new_desc .= ' ' if $new_desc;
			$new_desc .= ""$jack $cdpn"";
			if ( $port->pagp() ) {
				my $name = $obj->GetPort( $port->pagp() )->name();
				$portchannel{$port->pagp()} = $new_desc if $port->pagp(); 
				$new_desc .= "" (via $name)"";
			} else {
                #$new_desc .= "" "" . $port->cdpnport();
            }
            
            $new_desc .= "" "" . $port->cdpnport() if $cdpn =~ /^vh/i;        # Add the port name if ESX server
            
		}

		$new_desc =~ s/^ //;
        
		if ($new_desc ne $old_desc) {
			push @lines, ""int "" . $port->name();
			push @lines, ""! old description: $old_desc"";
			if ($new_desc) {
				push @lines, "" description $new_desc"";
			} else {
				push @lines, "" no description"";
			}
            push @lines, ""!"";
		}
	}
	
	foreach my $ifIndex ( keys %portchannel ) {
		next unless $portchannel{$ifIndex};
		push @lines, ""interface "" . $obj->GetPort($ifIndex)->name();
		push @lines, "" description $portchannel{$ifIndex}"";
        push @lines, ""!"";
	}

    my $lc = scalar @lines;

    print start_form;

	print qq(<p><textarea autofocus=""autofocus"" name=""text"" wrap=""hard"" rows=""$lc"" cols=""80"">\n);
    print join ""\n"", @lines;
    print qq(</textarea>\n);
	print qq(<input type=hidden name=""switch"" value=""$switch"">\n);

	print '<p><input type=submit value=""Apply Changes"" name=button>';
	print end_form;

}	

    

###############################################################################
#
# Use telnet to send the IOS commands to implelemnt the desired changes
#
###############################################################################

sub step3 {

    my $switch = param('switch');
    my $text = param('text');
	my $logfile = ""c:/temp/cdpn_desc-$switch.log"";
    my $session = Net::Telnet::Cisco->new(Host => $switch, errmode => ""return"", Input_log=>$logfile);

    my $res = $session->login($userid, $password);
	if( ! $res ) {
		print ""<font size=+2 color=red>ERROR: Logon failed for switch</font>\n"";
		DumpLog($logfile);
		return;
	}
	
    $res = $session->enable(Nunya(2));
	if( ! $res ) {
		print ""<font size=+2 color=red>ERROR: enable failed for switch</font>\n"";
		$session->Close();
		DumpLog($logfile);
		return;
	}

	# send commands

    my @lines = split /[\n\r]+/, $text;

   	$session->cmd('config t');
    
    foreach my $line (@lines) {
        $line =~ s/^ +//;
        if( $line =~ /^int/ or $line =~ /^description/ or $line =~ /^no description/) {
            $session->cmd($line);
        }
    }

	$session->cmd(""exit"");		# exit ""interface ...""
	$session->cmd(""exit"");		# exit ""config t""
	
	$session->cmd(""copy run start\n"");

	# Show the user a transcript of the communication with the router.
	DumpLog($logfile);
}

###############################################################################
# Dump the log file to the user
###############################################################################

sub DumpLog {
	my $file = shift;
	
	open FILE, $file or die ""$file: $!\n"";
	
	print ""<b>Transcript of session with switch</b><p><pre>"";
	
	while(<FILE>){
		chomp;
		next if /^username/i;
		print ""$_\n"";
	}
	
	print ""</pre>\n"";
	close FILE;
}



sub LoadNetInventory {

}



################################################################################
#
# Switch object
#
################################################################################

package switch;

sub new {
	my $class = shift;
    my $name = shift;
	my $self  = {};

	bless ($self, $class);
    
    $self->{name} = $name;
    $self->{vlans} = {};            # hash of VLAN objects indexed by VLAN number                
    $self->{ports} = {};            # hash of port obects indexed by ifindex number
    $self->{arp} = {};              # arp cache

   
    # Open SNMP connection. Don't translate octet strings - Net::SNMP doesn't always get it right - we'll do it ourself

    my $community = ""public"";
    my $timeout = 60;
    
    ($self->{snmp}, my $err) = Net::SNMP->session( -hostname => $name, -version => '2c', -community => $community, -timeout  => $timeout, -port => ""161"", -translate=>[-octetstring => 0]);

    if ( !defined($self->{snmp}) ) {
        print STDERR ""$name: SNMP open error: $err\n"";
        return undef;
    }

    return $self;
}

sub LoadPorts {                     # Grab ports, create port objects, populate, and index by ifindex
    my $self = shift;

    # get the port names
 
    my $res = util::tablehash($self->{snmp}, ""1.3.6.1.2.1.31.1.1.1.1"", 1);     # ifName

    foreach my $ifindex ( keys %{$res} ) {                                     # entries will look like '234' => 'Gi6/39'
        my $ifname = $res->{$ifindex};
        $self->{ports}{$ifindex} = port->new($ifname);
    }

    # port descriptions

    $res = util::tablehash($self->{snmp}, ""1.3.6.1.2.1.31.1.1.1.18"", 1);       # ifAlias

    foreach my $ifindex ( keys %{$res} ) {                                     # entries will look like '236' => 'Uplink to E54APG06'
        my $desc = $res->{$ifindex};
        $self->{ports}->{$ifindex}->desc($desc);
    }
   
    # port mode (trunk or access)

    $res = util::tablehash($self->{snmp}, ""1.3.6.1.4.1.9.9.46.1.6.1.1.14"", 1);     # vlanTrunkPortDynamicStatus 

    foreach my $ifindex ( keys %{$res} ) {
        my $mode = $res->{$ifindex};
        $self->{ports}->{$ifindex}->mode('Access') if $mode == 2;
        $self->{ports}->{$ifindex}->mode('Trunk') if $mode == 1;
    }

	# get port status
	# ( 1=>'up', 2=>'down', 3=>'testing', 4=>'unknown', 5=>'dormant', 6=>'notPresent', 7=>'lowerLayerDown');

	
	$res = util::tablehash($self->{snmp}, ""1.3.6.1.2.1.2.2.1.8"", 1);     

    foreach my $ifindex ( keys %{$res} ) {
        my $mode = $res->{$ifindex};
        $self->{ports}->{$ifindex}->status('up') if $mode == 1;
        $self->{ports}->{$ifindex}->status('down') if $mode == 2;
		$self->{ports}->{$ifindex}->status('testing') if $mode == 3;
		$self->{ports}->{$ifindex}->status('unknown') if $mode == 4;
		$self->{ports}->{$ifindex}->status('dormant') if $mode == 5;
		$self->{ports}->{$ifindex}->status('notPresent') if $mode == 6;
		$self->{ports}->{$ifindex}->status('lowerLayerDown') if $mode == 7;
    }
	
	# CDP neighbor	
	
    $res = util::tablehash($self->{snmp}, ""1.3.6.1.4.1.9.9.23.1.2.1.1.6"", 2);
	
	foreach my $x ( keys %{$res} ) {
		my ($ifIndex, $junk) = split /\./, $x;
		$self->{ports}->{$ifIndex}->cdpn($res->{$x});
	}

	# CDP neighbor port
	
    $res = util::tablehash($self->{snmp}, ""1.3.6.1.4.1.9.9.23.1.2.1.1.7"", 2);
	
	foreach my $x ( keys %{$res} ) {
		my ($ifIndex, $junk) = split /\./, $x;
		$self->{ports}->{$ifIndex}->cdpnport($res->{$x});
	}

	# Get corresponding VLANs
	
    $res = util::tablehash($self->{snmp}, ""1.3.6.1.4.1.9.9.68.1.2.2.1.2"", 1);

    foreach my $ifindex ( keys %{$res} ) {                                     
        my $vlan = $res->{$ifindex};
        $self->{ports}->{$ifindex}->vlan($vlan);
    }

	# Get any PAGP ports that this port is a member of
	
    $res = util::tablehash($self->{snmp}, ""1.3.6.1.4.1.9.9.98.1.1.1.1.8"", 1);

    foreach my $ifindex ( keys %{$res} ) {                                     
        my $po = $res->{$ifindex};
        $self->{ports}->{$ifindex}->pagp($po) unless $po == $ifindex;		# the ifindex of the port channel this interface is a member of
    }
	

    return keys %{$self->{ports}};
}


sub LoadArpCache {
    my $self = shift;
    
    my $res = util::tablehash($self->{snmp}, ""1.3.6.1.2.1.3.1.1.2"", 4);

    foreach my $ip ( keys %{$res} ) {                                     # entries will look like '1.2.3.4' => '00112233445566'
        my $mac = $res->{$ip};
        $self->{arp}{$ip} = $mac;
    }
    
    foreach my $i (keys %{$self->{arp}}) {
        $self->{arp}->{$i} = unpack ""H*"", $self->{arp}->{$i};
    }
    
    return keys %{$self->{arp}};
}


sub ArpEntry {
    my $self = shift;
    my $ip = shift;
    
    return $self->{arp}->{$ip} if exists $self->{arp}->{$ip};
    return undef;
    
}


sub GetPort {                   # Given an ifindex value, return port object 
    my $self = shift;
    my $p = shift;
    
    if( ! $self->{ports}->{$p} ) {              # No port exists for this ifindex?
        $self->{ports}->{$p} = port->new($p);   # create one - use the ifindex as the name   
    }
    
    return $self->{ports}->{$p};
}

sub GetVlan {                   # Given a VLAN number, return VLAN object
    my $self = shift;
    my $p = shift;
    
    return $self->{vlans}->{$p};
}

sub LoadVlans {                 # Get a list of VLANs, create VLAN objects, populate, index by VLAN number
    my $self = shift;
    
    # Get a list of the VLANs present on this switch and create a VLAN object
    
    my $res = util::tablehash($self->{snmp}, ""1.3.6.1.4.1.9.9.46.1.3.1.1.2"", 1); # vtpVlanState
    foreach my $vlan ( keys %{$res} ) {
        next unless $res->{$vlan};                                            # VLAN is not operational
        $self->{vlans}->{$vlan} = vlan->new(($self->{name}, $vlan));          # Create a VLAN object
    }
      
    # get VLAN descriptions
    
    $res = util::tablehash($self->{snmp}, ""1.3.6.1.4.1.9.9.46.1.3.1.1.4.1"", 1);    # vtpVlanName
    foreach my $vlan ( keys %{$res} ) {                                            # entries will look like  '3' => '85175_wire_room_E'
        $self->{vlans}->{$vlan}->desc($res->{$vlan});
    }    
    
    return keys %{$self->{vlans}};
}

package vlan;

sub new {
	my $class = shift;
    my $switch = shift;
    my $vlan = shift;

	my $self  = {};

	bless ($self, $class);
    
    $self->{vlan} = $vlan;
    $self->{switch} = $switch;

    $self->{bpindex} = undef;        # ifindex indexed by bridge port number
    $self->{macindex} = undef;       # MAC addresses indexed by mac index
    $self->{desc} = '';              # description
    $self->{cam} = {};               # CAM table - ifIndexes indexed by MAC address
    
    # Open SNMP connection. Don't translate octet strings - Net::SNMP doesn't always get it right - we'll do it ourself
    
    my $community = ""public"";
    my $timeout = 5;
    
    ($self->{snmp}, my $err) = Net::SNMP->session( -hostname => $switch, -version => '2c', -community => $community . '@' . $vlan, -timeout  => $timeout, -port => ""161"", -translate=>[-octetstring => 0]);

    if (!defined($self->{snmp})) {
        print STDERR ""swtich $switch VLAN $vlan SNMP open error: $err\n"";
        return undef;
    }

	return $self;
}

sub LoadCam {                       # Grab the CAM table, translate bridge ports to ifindex, and translate MAC indexes to MAC addresses
    my $self = shift;

    $self->{bpindex} = util::tablehash($self->{snmp}, ""1.3.6.1.2.1.17.1.4.1.2"", 1);        # dot1dBasePortIfIndex bridgeport to ifindex xref

    $self->{macindex} = util::tablehash($self->{snmp}, ""1.3.6.1.2.1.17.4.3.1.1"", 6);       # dot1dTpFdbAddress  MAC index to MAC

    # MAC addresses in this table are in binary because we told Net::SNMP not to translate. Translate them now

    foreach my $i (keys %{$self->{macindex}}) {
        $self->{macindex}->{$i} = unpack ""H*"", $self->{macindex}->{$i};
    }

    # Grab the CAM table for this VLAN

    my $res = util::tablehash($self->{snmp}, ""1.3.6.1.2.1.17.4.3.1.2"", 6);     # dot1dTpFdbPort
    foreach my $macindex ( keys %{$res} ) {
        if( ! $self->{macindex}->{$macindex} ) {            # No entry for this MAC index 
            my @tmp = split /\./, $macindex;                # Build a MAC address
            $self->{macindex}->{$macindex} = join """", @tmp; # save it
        }

        my $mac = $self->{macindex}->{$macindex};
        my $bp = $res->{$macindex};
        
        if( ! $self->{bpindex}->{$bp} ) {                   # No ifindex exists for this bridgeport - this happens when a MAC address is learned via the ARP table, or some other way
             $self->{bpindex}->{$bp} = '(other)';           # build it
        }        
        
        my $ifindex = $self->{bpindex}->{$bp};
        $self->{cam}->{$mac} = $ifindex;
    }

    return keys %{$self->{cam}};
}

sub GetCam {                        # Given a MAC address, return the ifindex for the port it was learned on
    my $self = shift;
    my $p = shift;
    return $self->{cam}->{$p};
}

sub desc {                          # for a given VLAN number, return the description
    my $self = shift;
    my $p = shift;
    
    $self->{desc} = $p if defined $p;
    return $self->{desc};
}

package port;

sub new {
    my $class = shift;
    my $name = shift;

    my $self = {};
    
    bless ($self, $class);

    $self->{name} = $name;
    $self->{desc} = '';
    $self->{mode} = '';
	$self->{cdpn} = '';
	$self->{status} = '';
	$self->{vlan} = '';
	$self->{pagp} = '';
    
    return $self;
}

sub pagp {
    my $self = shift;
    my $p = shift;
    
    $self->{pagp} = $p if defined $p;
    return $self->{pagp};
}

sub status {
    my $self = shift;
    my $p = shift;
    
    $self->{status} = $p if defined $p;
    return $self->{status};
}


sub cdpn {
    my $self = shift;
    my $p = shift;
    
    $self->{cdpn} = $p if defined $p;
    return $self->{cdpn};
}

sub cdpnport {
    my $self = shift;
    my $p = shift;
    
    $self->{cdpnport} = $p if defined $p;
    return $self->{cdpnport};
}

sub vlan {
    my $self = shift;
    my $p = shift;
    
    $self->{vlan} = $p if defined $p;
    return $self->{vlan};
}

sub mode {
    my $self = shift;
    my $p = shift;
    
    $self->{mode} = $p if defined $p;
    return $self->{mode};
}


sub desc {
    my $self = shift;
    my $p = shift;
    
    $self->{desc} = $p if defined $p;
    return $self->{desc};
}

sub name {
    my $self = shift;
    my $p = shift;
    
    $self->{name} = $p if defined $p;
    return $self->{name};
}


package util;

################################################################################
#
# Build a hash from an SNMP table. The key is created by taking the last $n
# elements of the returned OID value.
#
################################################################################

sub tablehash {
    my $snmp = shift;
    my $oid = shift;
    my $n = shift;
    
    my $ret = ();
    
    my $res = $snmp->get_table(-baseoid => $oid, -maxrepetitions  => 30);
    
    foreach my $x ( keys %{$res} ) {
        my @tmp = split /\./, $x;
        my $key = join ""."", splice(@tmp, -1 * $n);
        $ret->{$key} = $res->{$x};
    }
    
    return $ret;
}"
UeCP8Fr2,💸G2A.com Free Gift Card Guide 2024 May🔥,lookos13,Python,Tuesday 28th of May 2024 04:21:23 PM CDT,"G2A.com free GC & Games updated guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1fu-L9saEYF3p8c22aD4kJyaloZDzbZfJ/view?usp=g2a_refund_guide_4944119.pdf

Working as of:

29 May 2024"
