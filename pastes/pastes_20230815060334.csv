id,title,username,language,date,content
KVQtDWCu,Welcome,Leviathan28ph,PHP,Tuesday 15th of August 2023 12:30:09 AM CDT,"M/3!44%)"",61&>#)6=EI54FQH16-(3FUE:G1763%G,F%I2FI2<DY666M""5%E4
M6FMB:$9M5'A),60T56Q92D)N5E-:1F-X26QC2UHQ67A""6$U6:&M1-E)&9&]T
M,E9'6D9B6&A%9'161F5W,3)655)74DY""5DU(3E995U9L5FA21TUH3FQ2=497
M64]&:E4S:%16:6Q%8U=*;%9W1FI5>7!K5FI&2&-X54930W!(5C!H,F%86FM6
M<V1&4S`Q5U8T0EAB6%)&6D8Q155X8S!5:%I65E=&1UIW13)51S5763!!2%-5
M3FI4=%8Q4F]:,5E,:#)A5&AL5'-*5E=X53%52GA'35=H6%5W659-=F@P57%X
M1U).-6M66%)'3F%T;59+4E=65&AK5E961U-W0FI655I65D\Q1V-63FQ2:UHP
M535H,DUA=&M75F1&97=T;5EH>$=35VA%87E91F525C%645)75E)X:U1S3E9E
M0UIL5#5&,6%20E9-6$Y'4C5!>E5(-6M-5VPS9'=%5UE/1FI5,VA45FEL16-7
M2FQ6=T9J57EP:U9J1DAC>%5&4T-P2%8P:#)A6%IK5G-D1E,P,5=6-$)88EA2
M1EI&,455>&,P56A:5E971D=:=T4R54<U5UEH-55-4V1(3U9*5U-W6FQ55T)8
M35-*;E-73E=C=T945DE*:V554DAA<F1L4E=X,E9)4EAB5FA(8W1D1E9K5E54
M449Z4E1&;5966E99:T)4651::V)H1FU4>$DQ9#1!:E4Q4C)-86Q(3UA*;%)O
M3FI50U)735-T:U9Y5593,6-6655*:V%34D5B259M9&%65E4P15163F1L4D5*
M1E=':&Q6,EI635ID2$UW66QB0U)&5G%:5E)4;%A.>6]6949H159+<&MA:4)L
M4E96,E-#<%A9-5964FPU1V-&2FQA<W`R549X;590;&M71D9'5T=2:U4R=T=-
M:VQK4E=61TY+-6U7-&AM8E-H;5)&6C%2;UI66C5&5E9H6E5-=$I68TM&5%9'
M:&U-5VA8549P1E9#<&U5<T)N5E=D:U9T;#%52U9654-*:V5I9%A1<4YL5$-2
M:U0U5FMB3U9J4552;&%'0D1:0W`P5E5L6%5&2FQA=U9K56%X,F%4:&Y7>&]L
M36%6:U0S1D524T)N5G=);&1S:&Q5>FMJ34YP1V1R2D9A<S575$-P15)K6E1-
M5E9&57,U;5E14C)23FQL4E52,F1N6C!6>%%'35-*1F)%6FQ1,&0Q559:55)H
M:&Y2=$Y'5T<U,E4Q<&Q6:DI63G16;5%+6C!565I%4U166$Y8-55E1FA664Y:
M54UI4FI2<E964VM:,55Z9U=63S5%9').,6-+,5=61&Q45DY:1&-&1D=E3U(Q
M5D]:15)7-6M2>%%63D=H1E994FUB4T)44T=.;&0Q8VQ4-59%5VE21&)W24=.
M1U956C1P159L5D1C1V1637AC1E916E525&1K4GE5,6120FI6-$)84E-*1F))
M,6M4-55654IP5E9:4FQ114I&5T<U,E5&6FM6;&1(359&1U9/6FQ51%HP84Y:
M16%72FQ6=T9J57EP:U9J1DAC>%5&4T-P2%8P:#)A6%IK5G-D1E,P,5=6-$)8
M8EA21EI&,455>&,P56A:5E971D=:=T4R54<U5UEH-55-4V1(3U9*5U-W6FQ5
M5T)835-*;E-73E=C=T945DE*:V554DAA<F1L4E=X,E9)4EAB5FA(8W1D1E9K
M5E54449Z4E1&;5966E99:T)4651::V)H1FU4>$DQ9#15;%E*0FY64UI&8WA)
M;&-+6C%965I&4VQD:U183E=E4E956DM:5DUI-6U2<C%%97=*5%956C%A4DIK
M5E=.;%=7<#)51WA'359::E)6;$97:S5M57=X5U9.6D5A65)M3F]"":E=Y2FMA
M6&1K4G=55E-A2E16,'A75FM""1EI)3FQA1U956DE"",U)J<#-9<D973F]T;5DQ
M:T1-:VQK5%A6,F0T8VQ5>'=M8E1*>F%Z46U3,6,Q54UP14UA<&M5>$EM8T-H
M,55.0C-2;$YJ5D96;5%'9#%53GA'5U1:2&-63D=.=W176D]:15934FI6=597
M4S!65E4P;U96:%)L5%=*,5$U55963%I535ID2$]82FQ2;TYJ53`U56)49&M3
M6%)M97)61EI+6C!64WAK5E961V5/6C%92V@S84\U:U%Q2D=7<VAL63)P;%93
M;$A.6'!&5D=2:U5A;$1-4VQK4U=.1U-A5E9667!%4FIT:U9Q5E=43TI$5GIO
M15=5<$=C24Y&4T=655I(>&U-5E)L5G)&;%%',6U965I55E=L2&162C%31V@P
M5D,U:U)4<#-C=#%K4F]&5%<S4GI66DI%87I)5F-#3E14234P5E1H2$Y(3FQA
M2W@R67-2;59.6FM6<7`Q4V%65E0Q;T5B4VQ&8GI)1E,T0E16-5)Z5F%2;%)%
M2FQ7-4%J54IP:U9J3D1B1DI764M2,%E,6D57;#5%85<Y,%-O=%=6>$5%4FIL
M:U993E9D<U965#)G,V%.0FQ6<TY69%=6;%8R6FQ64W153EA*1U9K=#)5-58Q
M34Y:16%75D=D-3!M5D=P:V%I0FQ21DXQ4D=*5%9*5GI65D944W-D;&5R<%=6
M3VAM5E)61&-6<%9.:S4R5D=X1TUK9&M75THQ4T<U,E5#4D=3571M5$A.5F4P
M0E173'!55E=H;%-Q2C)D;FAL5D]:;$U53FI365)L87=H,%53>$=33C553U9&
M5E-A5C%645)74E1.;%)95E9986166DI:55)81D1B=4YL8S1655HR4E=-5UI$
M6D9*,E9+4C!92'A'4U=H54UT6D9E;E9K531:5DUI6FQ42#%K5#555E5*<%96
M6E9Z8D9.,5574E54,THQ5FQ2:E96,5531U(P54-X5U961D=A5E975D=6;%1'
M<&MA:49N4WDP551W2FI6-&175E8U;5-S9&Q25U955$-P,59L=&M7<C5534IX
M,E4Q-55B;&A%9%9*;$Y+:#!60S5K4E1&1$Y65FQD:T945V]X,F%76FM5<THR
M4D=6;%E.-3!64GA%8U=2;%17>#)95S4P4DY:6$]65FU.=W1765%26%)43FQ6
M13$P9&]"":E=4<#!-3DIK4G%*;&%70D1::'`Q35I:;%%)2E=C2UHQ67AK5DU3
M=&M2-G!6959""1%IX03-A6$IL4D9:,6174E5:5U(R84Y.;%-S2D9.-5565C%2
M,E9L9$A/6$9634M:1E8T0E163EI%85E.1E1+5FM9,'='5U5D:U995C)3;V16
M6GIW,F%I2FM6>$EM8D]D5E0R>%=6:E)$8W(Q54U""4C%5,5)78E1.:U=Y66Q.
M1S5757@X5U)51E11159766%H5E5O:$=-6DI%87I)5F-#3E14235K355.1&-S
M1FQA3U(P651:15)L,6M3=VM&5&M""5%0T6E9-:6A&8EE*5U1A1E17,U9%35=*
M16))4FQ-1E)56C4U559K<%A1>D4R9&XU,EE16C%A5G1K5'E1;%5S5E9:=7!K
M96E::U9&5D=3>$E45TQP5E).<$=A=4YM44=.:E5'<$96:E9J4UE&;%)O0FI5
M>C0P4DYL:U56-6M.;U9L5#%C,F%I1FY164Y&4V%25E57>%=64FA&8WI);$U&
M4E54-#5K96AT:U=6-45.2WAM55I25V)61FU65DHQ9$9T;5=#:$=75%9L5G(Q
M561S0FI6,&=74E=P;5$V2D=75VA66DQ:15944DAB5E)63G=H:U5Q4D=B;&AN
M5UA.,E5X56M72T9Z5E12:E)%6C%D5U9L53!15U9I6FM2<4HQ8G,U5U9,1D1-
M:%9L4TE*1TYS3FI9;UI55FPQ:U=Y649E=D9$6DM2,DU3.6U21E9'4W=D,%DV
M3C)A:'!K5%=*;%=':%972U)(35IH6%%U1E9-2E)K541L5%9I:&Y45E975D=6
M;%9X-&M6:D9(8WA51E-#<$A6,&@R85A::U9S9$93,#%75C1""6&)84D9:1C%%
M57AC,%5H6E965T9'6G=%,E5'-5=9:#5535-D2$]62E=3=UIL55=""6$U32FY3
M5TY78W=&5%9)2FME55)(87)D;%)7>#)625)88E9H2&-T9$96:U955%%&>E)4
M1FU65EI666M""5%E46FMB:$9M5'A),60T56Q92D)N5E-:1F-X26QC2UHQ67A""
M6$U6:&M153DP4V]T5U9X8S)A4V1L5$A.1F575C%9,4%85DYP54U83FQ4<S57
M6D9:;&5:<&M2=7!&97,U,E5Q4FU23E953GE11E1+0FI71TI&8FE&1F)9;%94
M=S%M5C-D5U950FQ22$Y&5$]*5%8T2FM64E)$97)L;&-W-3)63T945EIH:U=7
M5E=31VAL5#-H,F%31FY7<U8Q4U=H5EIO4E=2:49M4U52;%%7:#%53GAM35=2
M;%=W6495:TYJ53!P1F).:&Y15U9'831T5UE82D525%9$8EEL5E-A6E9:5$)N
M4FQ61&-)4E9E:EI65#%::U9/3D9C5TI63F]H,%E$6D975#%K5C9:5E,Q,$=:
M0U(R85):1F))3E9E=U9657IG6%9.9&Q114I&3E<U5UI&4D=-6E9J4W5.;&-3
M1FI5>&A75FEP16%94D9A:U9K63`T16)I1D9B=3%55#!D55HP>%=6;&AN57-&
M;%97=%=43UI55D]:1&5R<$972WAM57I91E-75FY65U9'3C5C5E0S>%=254)(
M6GA5,5-S:#%5;UI65E=61&%W25=B1V@P54AP,59K>%5/6%)&54=*:E5V4D=B
M;&AN45=&1F0T=&U7<7!%8E-H5D]W23%1:TIJ5C5"">F%H9$AB<DY&86LQ,E5'
M0FY64VAM5G=O;%%W3FI9>$5K84XQ:U0V6C%D4G1'6GA);%95>&M46#$P9%-2
M,5E+:%A66EI535A.;%1'-3)526A(359L2$U61E9-<U9%5G=25TU66FY25S4P
M57=:;%4Q;T5B4V@S6E8Q55-/0E17,'=75E-&:E1X26UE5G175#%:;$U6:%A5
M5F1&56M6,%546E965T9'6G=%,E5'-5=9:#5535-D2$]62E=3=UIL55=""6$U3
M2FY35TY78W=&5%9)2FME55)(87)D;%)7>#)625)88E9H2&-T9$96:U955%%&
M>E)41FU65EI666M""5%E46FMB:$9M5'A),60T56Q92D)N5E-:1F-X26QC2UHQ
M67A""6$U6:&M1-E)&9&]T,E9'6D9B6&A%9'161F5W,3)655)74DY""5DU(3E99
M5U9L5FA21TUH3FQ2>EE636\U;55Q-6M25&QN5UDY:TYK0GI5<5IK85-&;E-X
M56Q25W!764QH5U96<&U1-DIM4E=655I)1GI64W!%8U9L5DUX8VQ5,$545E<U
M:U975C)D=T%$5D-H,F%3:&U41S%54FM:,5E,2E965E9J47%*5F-+1E161S5%
M4FQL54YY46U1=VAK55-X1U-.-55/5D964V%65E=52D524VAL4G5.5E)'6E9:
M,T)$3556:E-%4C%-3V155$92;5956E9.2$I'3D]&:EE26E525&1K4GE5,612
M0FI6-$)84E-*1F)),6M4-5566C5&,6%20E9-6$Y'4C5!>E5)<%5-86184G5.
M1F5S-3)5,%IL859D15I73C)34U965C%)15950FQ21DXQ4D=*5%8S1D9-5S5M
M4W-D;%)75E540U)M5E)21&-R<&QC=T)J67E16&)L;$5:6%974T=.:E9X9VUB
M4VAM5EE*;5)73E17,G=75E=6:E%54D951U8P54A::TU69%A5=UE&97=6:U53
M>$=33F1%8W161E970E143GAM8EA.:E)6;&Q3,%9&5C)O5E9H4FQ45THQ44=6
M;%9+>&U6;'1K5T925DY/1FI9=TU735-T:U183E=E;G1'6GE""2%-44DAC<TYL
M44M61EI*<%966E)L445*1E='-3)51EIK5FQD2$U6<$9E2U)K541L5%9I:&Y4
M=U%&5&MT5U9U2D56:G1K4EE6,E-X8VQ45'!&35=H2&-&2FQ5<VA55$]L5%92
M;&M75FQL8DM21E936FQA5D9M5%4Y55,Q8U54,W!%8E1X5TU6,6M2;V@Q56]:
M1DUA2D5C>DE75W-H:U9):&U-5VA857=9;%17>&U9>F@R359:;E=Y549E4E8P
M5C$X5U)43FQ613$P9#1"":E=42C!-5TIK4E5.,61J6C%5,E)M5E!T16)66FQ2
M4WAM64A:15-49&M6<5)L55="":E9X04A35$I&6D@Q:U1X53%92V@S86%&5%-S
M2FQ-,#$R56AH6%929%A7<D8R54]:;%4V;%9B5%9(6E=61V%70GI5<5I%4FI.
M:U)Q3C%2<TI$5C!X,F%I0D9:>DE65'-T5UHU<&Q-5FA8549D5DYV5C!55%I&
M4DYD2&%W;T9.2VA65T-*15)5,5=-5C%K4F%.5%=7;'I64TI%875*1F-/1E16
M1W!55E)H5TYY66Q35W@R658U:TU66FY75C5K3C1T5U=Q2FMA6%9(8DE:;%%7
M<%A7-%)J3556:E)(4D9C5U)55$M6:DU:9$A.6$IL44-P;55X<%5-5EIK5'%&
M,E,Q26I6=4)N8E-2;E=S,5592U9653!H,V%::&Q3<TI65W,U,E5&4D=-57!K
M4W=1;%%S=#)5<UIK8DY615I7,556-4EZ54-*:V%31FY3>%5L4F]:,51,:#)A
M5D94445.5U-K9#!5,5)'5VM2:E=6;&Q21UIL55EX1U=:;&M2>&ML4TMH;%18
M6FM654I45G%6,5-X53%9;TI&35I*:U5X23)25W!76DYP;$U:;%5.=&16379H
M,%534E=B5EIN4D5.;5,T5FQ965I%5E0U161T5C)2-$)$5E565&)35FI314HQ
M4355;%E/-556:U9L45E*;%)O3FI5,#558E1D:U)54D=A<W0R5D=:1F)8:$5D
M=%9&97<Q,E954E=23D)634A.5EE75FQ6:%)'36A.;%)U1E=93T9J53-H5%9I
M;$5C5TIL5G=&:E5Y<&M6:D9(8WA51E-#<$A6,&@R85A::U9S9$93,#%75C1""
M6&)84D9:1C%%57AC,%5H6E965T9'6G=%,E5'-5=9:#5535-D2$]62E=3=UIL
M55=""6$U32FY35TY78W=&5%9)2FME55)(87)D;%)7>#)625)88E9H2%I74D=.
M85965'A1,V%81D1B5EIL9%=&:E8U4FI-559J4G1.1F)'0GI5,G`Q355:;%-Z
M559.0W!M65I:14UK,55-2#4P9'9&1%IX04A34S%'8DE.1F5K:$9:,&]65EI&
M5$U82E9-3S%76DM2,E924D1:<D8R9$]P;E5Q6E96:5I%959*;%9W1FI5>7!K
M5FI&2&-X54930W!(5C!H,F%86FM6<V1&4S`Q5U8T0EAB6%)&6D8Q155K=&U9
M67A'351D:U=X:U931TYJ5C%16%)5:#-C=#%K4F%H,5E,>%=65U)L57-D5E5'
M5E9:3G!K95I25$]T2D=E=U8P575:,&%L:$AA649&9#1T;51/2D564TYJ4G5.
M5E,T0E1757!64EA6:E5X249D85HQ53%"";E9L5D9C>$EL8TM:,5EX0EA-5FAK
M43921F1O=#)61UI&8EAH161T5D9E=S$R5E525U).0D9:<DI'5W-"">E5(<%9-
M6F1(348U,&1O5D56<D945E1:;E)7-3!5=T945#%K:U95,6U25DY&4WA)5%94
M6E966#5'8U9&1E1S:#%5-4IK959H1656,6MC2U)L57EW5U9:;$5:=U%63D-H
M5E0S>%=255)(6E=.5F5/5C%5;WA74FEL;5)Q9%955VA56DA:;&%6<%5/>5%M
M5%=:1E8P0DAB;&QN55=.,F0S5FQ7,3A74E1.;%9%,3!D;T)J5U1*,$U75D1C
M1DYL37)65E1*-556;'A%8E8U159W5C%9=%I%4VPQ:U(V6E9.,6-657E""2$U3
M>&U2<59L9$-2,%DQ05A2:%IK57-*,4TU06I52&A'35I.;%)W66Q2<S5M57,U
M,%).1FU7648Q36M6;%EH2D9B:49L5DE65U-A4C%52W!%5VMP:U9X26U6:W@R
M531P1DU:=$5:<G!63DMX,E9#4EAB3E9N55@Q,%4U8VQ7<4)(35,Q;5)U5E=D
M1T)464QX1TU4:&Q51TXR4E=H551)6D965&@S6G)&;&)W=#)65U)M5FQL2&)6
M5FU.-'1M5T="";F)84FI266Q64U-D5E14;&I-5TIK47%*5F)K6E9::'`Q35I:
M1&)66FQA1U(P65I:,4U6-45B6$YM97)61E994D=75#5M4D961U-W9#!9-DXR
M86A2;%-72FQ75W`R54-22$U65D9C1V1L46MH158V0E165%I(6EE2;$YA5FQ9
M6$(S86IL;%995C)3<T9$5DEH,F%6:%A-=$I'4VMD,%4Q6E9656Q%9592;%1+
M1FI925)M5E9L2&-T;%9.1TY$6GAW,F%41GIA64I74V%H1E9O4D=-84I(859.
M5V)'<#)53'!L35=H,V)X45=-=VAK53!"",U)L:$AB>6ML93-""5%19-45B4U)$
M8G%6,E)'1FI7,&]K8E-&>F))4E9B:UI66C)P1E=5:$=:1DI'34]X,E9,4E=-
M:W1%8UE21F56=$=:45I58E1:1EI(,3!D4UI65%9&>F%A0D9D1DXQ55=2550S
M2C%6;$YL4DE6;6$P0FI5-FQK4FQL2&1W:T94:W175C1&15)5;&Q2=U564W@P
M;59+<#!-4E9J57-D,6-#4E5:-49Z5E-P15IR4E=-;C4R64-:,$U.:&Y76%97
M4TM6;%=X9VUB4W!63W=)5E-+6C%927!&35-H1F-R3FU13TI45$E*1E92>$5C
M5T9L83!6:U546D975%9(8W1L1F%W5FQ70UI58FEH;%96;&Q285)65#-614U6
M<&U454YL349P5U9'6E564EIJ5W=)1E5S=#)92'AM8DY6:U-W449D1TY455%2
M,V%3<&U21EI69'=6,5DP9UA287!M445*;%=75E972UIL5E-::E-U<&Q1>&-%
!5@``
`
"
LDwmMPtB,WebSDR User Anzeige,tuvok81,JavaScript,Tuesday 15th of August 2023 12:06:47 AM CDT,"ALTE JAVASCRIPT
-------------------------

var uu_compactview=false;
function douu()
// draw the diagram that shows the other listeners
{
   s='';
   total=0;
   for (b=0;b<nbands;b++) {
      if (!uu_compactview) {
         s+=""<p><div align='left' style='width:1024px; background-color:black;'><div class=others>"";
         for (i=0;i<uu_names.length;i++) if (uu_bands[i]==b && uu_names[i]!="""") {
            s+=""<div id='user""+i+""' align='center' style='position:relative;left:""+
                 (uu_freqs[i]*1024-250)
                // Original Zeile zum User Anzeigen
                //+""px;width:500px; color:""+others_colours[i%8]+"";'><b>""+uu_names[i]+""</b></div>"";
                // Username ausgeblendet
                 +""px;width:500px; color:""+others_colours[i%8]+"";'>"";
                s+=""<b>|</b>"";
                s+=""</div>"";
                total++;
         }
         s+=""<img src=""+bi[b].scaleimgs[0][0]+""></div></div></p>"";
      } else {
         s+=""<p><div align='left' style='width:1024px;height:15px;position:relative; background-color:black;'>"";
         for (i=0;i<uu_names.length;i++) if (uu_bands[i]==b && uu_names[i]!="""") {
            s+=""<div id='user""+i+""' style='position:absolute;top:1px;left:""+
                 (uu_freqs[i]*1024)
                 +""px;width:1px;height:13px; background-color:""+others_colours[i%8]+"";'></div>"";
            total++;
         }
         s+=""</div><div><img src=""+bi[b].scaleimgs[0][0]+""></div></p>"";
      }
   }
   usersobj.innerHTML=s;
   numusersobj.innerHTML=total;
}

NEUES JAVASCRIPT 
---------------------
var uu_compactview=false;
function douu()
{
   s='';
   total=0;
   for (b=0;b<nbands;b++) {
      if (!uu_compactview) {
         s+=""<p><div  style='width:1024px; background-color:black;border-radius: 4px;box-shadow: 4px 4px 15px 0px rgba(0,0,0);margin: 0px 5px 0px 5px;margin-left: auto;margin-right: auto;'><div class=others>"";
         for (i=0;i<uu_names.length;i++) if (uu_bands[i]==b && uu_names[i]!="""") {
            s+=""<div id='user""+i+""' align='center' style='position:relative;left:""+(uu_freqs[i]*1024-250)+""px;width:500px; color:""+others_colours[i%8]+"";'><b>""+uu_names[i]+""</b></div>"";
            total++;
         }
         s+=""<img src=""+bi[b].scaleimgs[0][0]+""></div></div></p>"";
      } else {
         s+=""<p><div style='width:1024px;height:35px;position:relative; background-color:black;border-radius: 4px;box-shadow: 4px 4px 15px 0px rgba(0,0,0);margin: 0px 5px 0px 5px;margin-left: auto;margin-right: auto;'>"";
         for (i=0;i<uu_names.length;i++) if (uu_bands[i]==b && uu_names[i]!="""") {
            s+=""<div id='user""+i+""' style='position:absolute;top:1px;left:""+
                 (uu_freqs[i]*1024)
                 +""px;width:1px;height:13px; background-color:""+others_colours[i%8]+"";'></div>"";
            total++;
         }
         s+=""<div style='position:absolute;bottom:1px'><img src=""+bi[b].scaleimgs[0][0]+""></div></div></p>"";
      }
   }

   usersobj.innerHTML=s;
   numusersobj.innerHTML=total;
}
"
FTXLKs0f,Even odd with Executor service,javatechie,Java,Monday 14th of August 2023 11:56:53 PM CDT,"import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.stream.IntStream;

public class EvenOddWithES {

    public static void main(String[] args) {
        ExecutorService executorService = Executors.newFixedThreadPool(2);

        IntStream.range(1, 10).forEach(num -> {
            CompletableFuture<Integer> thenApplyAsync = CompletableFuture.completedFuture(num).thenApplyAsync(x -> {
                if (x % 2 != 0) {
                    System.out.println(x + "" "" + Thread.currentThread().getName());
                }
                return num;
            }, executorService);
            thenApplyAsync.join();

            CompletableFuture<Integer> thenApplyAsync2 = CompletableFuture.completedFuture(num).thenApplyAsync(x -> {
                if (x % 2 == 0) {
                    System.out.println(x + "" "" + Thread.currentThread().getName());
                }
                return num;
            }, executorService);
            thenApplyAsync2.join();
        });

        executorService.shutdown();
    }
}
"
13Fwhqsr,BMPFileBinaryDecoder.ps1,Thunder-Menu,PowerShell,Monday 14th of August 2023 10:43:04 PM CDT,"# Charger les assemblies System.Windows.Forms et System.Drawing
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Définir le script en tant que chaîne
$script = @""
using System;
using System.Drawing;
using System.Windows.Forms;
using System.IO;
using System.Text;

public class BinarySquarePatternGenerator
{
    public static void Main()
    {
        Application.EnableVisualStyles();
        Application.SetCompatibleTextRenderingDefault(false);

        Form form = new Form();
        form.Text = ""Générateur et Décodeur Binaire"";
        form.Width = 800;
        form.Height = 600;
        form.StartPosition = FormStartPosition.CenterScreen;

        TextBox textBox = new TextBox();
        textBox.Multiline = true;
        textBox.ScrollBars = ScrollBars.Vertical;
        textBox.Width = form.Width - 60;
        textBox.Height = form.Height - 330;
        textBox.Location = new Point(20, 20);
        form.Controls.Add(textBox);

        PictureBox pictureBox = new PictureBox();
        pictureBox.Location = new Point(20, textBox.Bottom + 10);
        pictureBox.Width = form.Width - 60;
        pictureBox.Height = form.Height - textBox.Height - 250;
        form.Controls.Add(pictureBox);

        Button loadButton = new Button();
        loadButton.Text = ""Charger une image BMP"";
        loadButton.Location = new Point(20, pictureBox.Bottom + 10);
        form.Controls.Add(loadButton);

        Button generateButton = new Button();
        generateButton.Text = ""Générer"";
        generateButton.Location = new Point(loadButton.Right + 10, pictureBox.Bottom + 10);
        generateButton.Enabled = false;
        form.Controls.Add(generateButton);

        Button decodeButton = new Button();
        decodeButton.Text = ""Décoder binaire en hex"";
        decodeButton.Location = new Point(generateButton.Right + 10, pictureBox.Bottom + 10);
        decodeButton.Enabled = false;
        form.Controls.Add(decodeButton);

        TextBox decodedTextBox = new TextBox();
        decodedTextBox.Multiline = true;
        decodedTextBox.ScrollBars = ScrollBars.Vertical;
        decodedTextBox.Width = form.Width - 60;
        decodedTextBox.Height = form.Height - 330;
        decodedTextBox.Location = new Point(20, decodeButton.Bottom + 10);
        decodedTextBox.Visible = false;
        form.Controls.Add(decodedTextBox);

        Button saveButton = new Button();
        saveButton.Text = ""Enregistrer"";
        saveButton.Location = new Point(decodeButton.Right + 10, pictureBox.Bottom + 10);
        saveButton.Enabled = false;
        form.Controls.Add(saveButton);

        Bitmap loadedBitmap = null;

        loadButton.Click += (sender, e) =>
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = ""Images BMP|*.bmp"";
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string imagePath = openFileDialog.FileName;
                loadedBitmap = new Bitmap(imagePath);
                pictureBox.Image = loadedBitmap;
                generateButton.Enabled = true;
                decodeButton.Enabled = true;
                saveButton.Enabled = true;
            }
        };

        generateButton.Click += (sender, e) =>
        {
            if (loadedBitmap == null)
            {
                MessageBox.Show(""Veuillez charger une image d'abord."");
                return;
            }

            string binaryText = GenerateBinaryPattern(loadedBitmap);
            textBox.Text = binaryText;
        };

        decodeButton.Click += (sender, e) =>
        {
            if (string.IsNullOrWhiteSpace(textBox.Text))
            {
                MessageBox.Show(""Le contenu du TextBox est vide. Veuillez générer le motif d'abord."");
                return;
            }

            string hexText = BinaryToHex(textBox.Text);
            decodedTextBox.Text = hexText;
            decodedTextBox.Visible = true;
        };

        saveButton.Click += (sender, e) =>
        {
            if (string.IsNullOrWhiteSpace(decodedTextBox.Text))
            {
                MessageBox.Show(""Le contenu du TextBox décodé est vide. Veuillez décoder le motif binaire d'abord."");
                return;
            }

            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = ""Fichiers texte|*.txt"";
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                System.IO.File.WriteAllText(saveFileDialog.FileName, decodedTextBox.Text);
                MessageBox.Show(""Contenu enregistré dans "" + saveFileDialog.FileName);
            }
        };

        form.Controls.Add(loadButton);
        form.Controls.Add(generateButton);
        form.Controls.Add(decodeButton);
        form.Controls.Add(decodedTextBox);
        form.Controls.Add(saveButton);

        Application.Run(form);
    }

    private static string GenerateBinaryPattern(Bitmap bitmap)
    {
        string binaryText = """";

        for (int y = 0; y < bitmap.Height; y++)
        {
            for (int x = 0; x < bitmap.Width; x++)
            {
                Color color = bitmap.GetPixel(x, y);
                int grayscale = (color.R + color.G + color.B) / 3;
                int threshold = 128;

                binaryText += (grayscale < threshold) ? ""1"" : ""0"";
            }
            binaryText += Environment.NewLine;
        }

        return binaryText;
    }

    private static string BinaryToHex(string binaryText)
    {
        StringBuilder hexBuilder = new StringBuilder();

        string[] lines = binaryText.Split(new[] { Environment.NewLine }, StringSplitOptions.None);

        foreach (string line in lines)
        {
            StringBuilder lineBuilder = new StringBuilder();
            for (int i = 0; i < line.Length; i += 4)
            {
                string chunk = line.Substring(i, Math.Min(4, line.Length - i));
                int decimalValue = Convert.ToInt32(chunk, 2);
                lineBuilder.Append(decimalValue.ToString(""X""));
            }
            hexBuilder.AppendLine(lineBuilder.ToString());
        }

        return hexBuilder.ToString();
    }
}
""@

# Exécuter le script
Add-Type -TypeDefinition $script -ReferencedAssemblies System.Drawing, System.Windows.Forms

# Appeler la méthode Main pour exécuter le formulaire
[BinarySquarePatternGenerator]::Main()
"
kXMkvkSr,Time Restriction,xuuun,JSON,Monday 14th of August 2023 10:39:50 PM CDT,"{
  ""name"": ""test-daily"",
  ""permissions"": ""NONE"",
  ""permissions2"": ""NONE"",
  ""restriction"": ""1"",
  ""_id"": ""vSGYj"",
  ""actions"": [
    {
      ""measurement"": ""3"",
      ""value"": ""24"",
      ""save"": ""0"",
      ""restrict"": ""0"",
      ""iftrue"": ""2"",
      ""iftrueVal"": ""4"",
      ""iffalse"": ""0"",
      ""iffalseVal"": """",
      ""storage"": ""1"",
      ""varName"": ""varCooldown"",
      ""name"": ""Set Time Restriction""
    },
    {
      ""channel"": ""0"",
      ""varName"": """",
      ""message"": ""Test daily"",
      ""buttons"": [],
      ""selectMenus"": [],
      ""attachments"": [],
      ""embeds"": [],
      ""reply"": true,
      ""ephemeral"": false,
      ""tts"": false,
      ""overwrite"": false,
      ""dontSend"": false,
      ""editMessage"": ""0"",
      ""editMessageVarName"": """",
      ""storage"": ""0"",
      ""varName2"": """",
      ""iffalse"": ""0"",
      ""iffalseVal"": """",
      ""descriptioncolor"": ""#ffffff"",
      ""description"": """",
      ""descriptionx"": false,
      ""storagewebhook"": ""0"",
      ""varwebhook"": """",
      ""webhookname"": """",
      ""webhookavatar"": """",
      ""messageoff"": true,
      ""mentions"": false,
      ""actionsError"": [],
      ""storageError"": ""0"",
      ""varNameError"": """",
      ""errcmd"": true,
      ""editweb"": """",
      ""removeComps"": false,
      ""removeEmbeds"": false,
      ""removeAttachments"": false,
      ""removeCompsE"": false,
      ""removeEmbedsE"": false,
      ""removeAttachmentsE"": false,
      ""name"": ""Send Message""
    },
    {
      ""name"": ""End Action Sequence""
    },
    {
      ""channel"": ""0"",
      ""varName"": """",
      ""message"": ""You have an active cooldown."",
      ""buttons"": [],
      ""selectMenus"": [],
      ""attachments"": [],
      ""embeds"": [],
      ""reply"": true,
      ""ephemeral"": false,
      ""tts"": false,
      ""overwrite"": false,
      ""dontSend"": false,
      ""editMessage"": ""0"",
      ""editMessageVarName"": """",
      ""storage"": ""0"",
      ""varName2"": """",
      ""iffalse"": ""0"",
      ""iffalseVal"": """",
      ""descriptioncolor"": ""#ffffff"",
      ""description"": """",
      ""descriptionx"": false,
      ""storagewebhook"": ""0"",
      ""varwebhook"": """",
      ""webhookname"": """",
      ""webhookavatar"": """",
      ""messageoff"": true,
      ""mentions"": true,
      ""actionsError"": [],
      ""storageError"": ""0"",
      ""varNameError"": """",
      ""errcmd"": true,
      ""editweb"": """",
      ""removeComps"": false,
      ""removeEmbeds"": false,
      ""removeAttachments"": false,
      ""removeCompsE"": false,
      ""removeEmbedsE"": false,
      ""removeAttachmentsE"": false,
      ""name"": ""Send Message""
    }
  ],
  ""comType"": ""4""
}"
bt628f5x,BMPTOFILE.ps1,Thunder-Menu,PowerShell,Monday 14th of August 2023 10:03:59 PM CDT,"# Charger les assemblies System.Windows.Forms et System.Drawing
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Définir le script en tant que chaîne
$script = @""
using System;
using System.Drawing;
using System.Windows.Forms;

public class BinarySquarePatternGenerator
{
    public static void Main()
    {
        Application.EnableVisualStyles();
        Application.SetCompatibleTextRenderingDefault(false);

        Form form = new Form();
        form.Text = ""Générateur de Motif de Carrés"";
        form.Width = 800;
        form.Height = 600;
        form.StartPosition = FormStartPosition.CenterScreen;

        TextBox textBox = new TextBox();
        textBox.Multiline = true;
        textBox.ScrollBars = ScrollBars.Vertical;
        textBox.Width = form.Width - 40;
        textBox.Height = form.Height - 300;
        textBox.Location = new Point(20, 20);
        form.Controls.Add(textBox);

        PictureBox pictureBox = new PictureBox();
        pictureBox.Location = new Point(20, textBox.Bottom + 10);
        pictureBox.Width = form.Width - 40;
        pictureBox.Height = form.Height - textBox.Height - 100;
        form.Controls.Add(pictureBox);

        Button loadButton = new Button();
        loadButton.Text = ""Charger une image BMP"";
        loadButton.Location = new Point(20, pictureBox.Bottom + 10);
        form.Controls.Add(loadButton);

        Button generateButton = new Button();
        generateButton.Text = ""Générer"";
        generateButton.Location = new Point(loadButton.Right + 10, pictureBox.Bottom + 10);
        generateButton.Enabled = false;
        form.Controls.Add(generateButton);

        Button saveButton = new Button();
        saveButton.Text = ""Enregistrer"";
        saveButton.Location = new Point(generateButton.Right + 10, pictureBox.Bottom + 10);
        saveButton.Enabled = false;
        form.Controls.Add(saveButton);

        Bitmap loadedBitmap = null;

        loadButton.Click += (sender, e) =>
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = ""Images BMP|*.bmp"";
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string imagePath = openFileDialog.FileName;
                loadedBitmap = new Bitmap(imagePath);
                pictureBox.Image = loadedBitmap;
                generateButton.Enabled = true;
            }
        };

        generateButton.Click += (sender, e) =>
        {
            if (loadedBitmap == null)
            {
                MessageBox.Show(""Veuillez charger une image d'abord."");
                return;
            }

            string binaryText = GenerateBinaryPattern(loadedBitmap);
            textBox.Text = binaryText;
            saveButton.Enabled = true;
        };

        saveButton.Click += (sender, e) =>
        {
            if (string.IsNullOrWhiteSpace(textBox.Text))
            {
                MessageBox.Show(""Le contenu du TextBox est vide. Veuillez générer le motif d'abord."");
                return;
            }

            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = ""Fichiers texte|*.txt"";
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                System.IO.File.WriteAllText(saveFileDialog.FileName, textBox.Text);
                MessageBox.Show(""Contenu enregistré dans "" + saveFileDialog.FileName);
            }
        };

        form.Controls.Add(loadButton);
        form.Controls.Add(generateButton);
        form.Controls.Add(saveButton);

        Application.Run(form);
    }

    private static string GenerateBinaryPattern(Bitmap bitmap)
    {
        string binaryText = """";

        for (int y = 0; y < bitmap.Height; y++)
        {
            for (int x = 0; x < bitmap.Width; x++)
            {
                Color color = bitmap.GetPixel(x, y);
                int grayscale = (color.R + color.G + color.B) / 3;
                int threshold = 128;

                binaryText += (grayscale < threshold) ? ""1"" : ""0"";
            }
            binaryText += Environment.NewLine;
        }

        return binaryText;
    }
}
""@

# Exécuter le script
Add-Type -TypeDefinition $script -ReferencedAssemblies System.Drawing, System.Windows.Forms

# Appeler la méthode Main pour exécuter le formulaire
[BinarySquarePatternGenerator]::Main()
"
Q56cRXsn,FileToBMP.ps1,Thunder-Menu,PowerShell,Monday 14th of August 2023 10:01:52 PM CDT,"# Charger les assemblies System.Windows.Forms et System.Drawing
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Définir le script en tant que chaîne
$script = @""
using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Windows.Forms;
using System.IO.Compression;
using System.IO;

public class BinarySquarePatternGenerator
{
    public static void Main()
    {
        Application.EnableVisualStyles();
        Application.SetCompatibleTextRenderingDefault(false);

        Form form = new Form();
        form.Text = ""Générateur de Motif de Carrés"";
        form.Width = 800; // Ajuster la largeur de la fenêtre
        form.Height = 600; // Ajuster la hauteur de la fenêtre
        form.StartPosition = FormStartPosition.CenterScreen;

        TextBox textBox = new TextBox();
        textBox.Multiline = true;
        textBox.ScrollBars = ScrollBars.Vertical;
        textBox.Width = form.Width - 40;
        textBox.Height = form.Height - 300;
        textBox.Location = new Point(20, 20);
        form.Controls.Add(textBox);

        PictureBox pictureBox = new PictureBox();
        pictureBox.Location = new Point(20, textBox.Bottom + 10);
        pictureBox.Width = form.Width - 40;
        pictureBox.Height = form.Height - textBox.Height - 100;
        form.Controls.Add(pictureBox);

        Button loadButton = new Button();
        loadButton.Text = ""Charger un fichier ZIP"";
        loadButton.Location = new Point(20, pictureBox.Bottom + 10);
        form.Controls.Add(loadButton);

        Button generateButton = new Button();
        generateButton.Text = ""Générer"";
        generateButton.Location = new Point(loadButton.Right + 10, pictureBox.Bottom + 10);
        generateButton.Enabled = false;
        form.Controls.Add(generateButton);

        Button saveButton = new Button();
        saveButton.Text = ""Enregistrer"";
        saveButton.Location = new Point(generateButton.Right + 10, pictureBox.Bottom + 10);
        saveButton.Enabled = false;
        form.Controls.Add(saveButton);

        loadButton.Click += (sender, e) =>
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = ""Fichiers ZIP|*.zip"";
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string zipPath = openFileDialog.FileName;
                byte[] binaryData = File.ReadAllBytes(zipPath);
                string binaryText = """";
                foreach (byte b in binaryData)
                {
                    binaryText += Convert.ToString(b, 2).PadLeft(8, '0');
                }
                textBox.Text = binaryText;
                generateButton.Enabled = true;
            }
        };

        generateButton.Click += (sender, e) =>
        {
            string binaryText = textBox.Text;
            int imageSize = (int)Math.Ceiling(Math.Sqrt(binaryText.Length));

            Bitmap bitmap = new Bitmap(imageSize, imageSize);
            for (int i = 0; i < binaryText.Length; i++)
            {
                int x = i % imageSize;
                int y = i / imageSize;
                Color color = (binaryText[i] == '1') ? Color.Black : Color.White;
                bitmap.SetPixel(x, y, color);
            }

            pictureBox.Image = bitmap;
            saveButton.Enabled = true;
        };

        saveButton.Click += (sender, e) =>
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = ""Images BMP|*.bmp"";
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                pictureBox.Image.Save(saveFileDialog.FileName, ImageFormat.Bmp);
                MessageBox.Show(""Motif de carrés généré et enregistré sous "" + saveFileDialog.FileName);
            }
        };

        form.Controls.Add(loadButton);
        form.Controls.Add(generateButton);
        form.Controls.Add(saveButton);

        Application.Run(form);
    }
}
""@

# Exécuter le script
Add-Type -TypeDefinition $script -ReferencedAssemblies System.Drawing, System.Windows.Forms

# Appeler la méthode Main pour exécuter le formulaire
[BinarySquarePatternGenerator]::Main()
"
frpV9bMD,FileToZip.ps1,Thunder-Menu,PowerShell,Monday 14th of August 2023 10:00:24 PM CDT,"Add-Type -AssemblyName System.Windows.Forms

$fileDialog = New-Object Windows.Forms.OpenFileDialog
$fileDialog.Title = ""Sélectionnez les fichiers à compresser""
$fileDialog.Multiselect = $true
$fileDialog.ShowDialog()

if ($fileDialog.FileNames.Length -gt 0) {
    $saveFileDialog = New-Object Windows.Forms.SaveFileDialog
    $saveFileDialog.Title = ""Enregistrer le fichier compressé""
    $saveFileDialog.DefaultExt = ""zip""
    $saveFileDialog.Filter = ""Fichiers ZIP (*.zip)|*.zip""
    $saveFileDialog.ShowDialog()

    if ($saveFileDialog.FileName -ne """") {
        $outputZipPath = $saveFileDialog.FileName

        Compress-Archive -Path $fileDialog.FileNames -DestinationPath $outputZipPath -Update

        [System.Windows.Forms.MessageBox]::Show(""Fichiers compressés et enregistrés sous : $($outputZipPath)"", ""Compression terminée"", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
    }
}
"
tG9hdxUY,aluno-glaucio-francisco-suporte-primeira-classe-java,tadeuespindola,Java,Monday 14th of August 2023 09:42:17 PM CDT,"package cursojava.executavel;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.swing.JOptionPane;

import cursojava.classes.Aluno;
import cursojava.classes.Diretor;
import cursojava.classes.Disciplina;
import cursojava.classesauxiliares.FuncaoAutenticacao;
import cursojava.constantes.StatusAluno;

public class PrimeiraClasseJava {

	/* Main � um metodo auto executavel em java */
	public static void main(String[] args) {

		try {

			String login = JOptionPane.showInputDialog(""Informe o Login"");
			String senha = JOptionPane.showInputDialog(""Informe a senha"");

			if (new FuncaoAutenticacao(new Diretor(login, senha)).autenticar()) {
				/* Vou travar o contrato somente para quem tem o contrato 100% legitimo */

				List<Aluno> alunos = new ArrayList<>();
				/*
				 * E uma lista que dentro dela temos uma lista que identifica uma sequencia de
				 * valores tamb�m
				 */
				HashMap<String, List<Aluno>> maps = new HashMap<>();

				for (int qtd = 1; qtd <= 1; qtd++) {

					/* new Aluno() � uma inst�ncia ( Cria��o de objeto ) */
					/* aluno1 � uma refer�ncia para o objeto Aluno */

					String nome = JOptionPane.showInputDialog(""Qual o nome do aluno "" + qtd + "" ? "");
					String idade = JOptionPane.showInputDialog(""Qual a idade do aluno ? "");
					/*
					 * String dataNascimento = JOptionPane.showInputDialog(""Data de nascimento ? "");
					 * String rg = JOptionPane.showInputDialog(""Registro Geral ? ""); String cpf =
					 * JOptionPane.showInputDialog(""Qual o CPF ? ""); String mae =
					 * JOptionPane.showInputDialog(""Nome da Mae ? ""); String pai =
					 * JOptionPane.showInputDialog(""Nome do Pai ? ""); String matricula =
					 * JOptionPane.showInputDialog(""Data da matricula ? ""); String serie =
					 * JOptionPane.showInputDialog(""Qual a serie ? ""); String escola =
					 * JOptionPane.showInputDialog(""Nome da escola ? "");
					 */

					/*
					 * String disciplina1 = JOptionPane.showInputDialog(""Disciplina 1 ?""); String
					 * note1 = JOptionPane.showInputDialog(""Qual a nota 1 ? "");
					 * 
					 * String disciplina2 = JOptionPane.showInputDialog(""Disciplina 2 ?""); String
					 * note2 = JOptionPane.showInputDialog(""Qual a nota 2 ? "");
					 * 
					 * String disciplina3 = JOptionPane.showInputDialog(""Disciplina 3 ?""); String
					 * note3 = JOptionPane.showInputDialog(""Qual a nota 3 ? "");
					 * 
					 * String disciplina4 = JOptionPane.showInputDialog(""Disciplina 4 ?""); String
					 * note4 = JOptionPane.showInputDialog(""Qual a nota 4 ? "");
					 */

					Aluno aluno1 = new Aluno();

					aluno1.setNome(nome);
					aluno1.setIdade(Integer.valueOf(idade));
					/*
					 * aluno1.setDataNascimento(dataNascimento); aluno1.setRegistroGeral(rg);
					 * aluno1.setNumeroCpf(cpf); aluno1.setNomeMae(mae); aluno1.setNomePai(pai);
					 * aluno1.setDataMatricula(matricula); aluno1.setSerieMatriculado(serie);
					 * aluno1.setNomeEscola(escola);
					 * 
					 * System.out.println(""Nome �: "" + aluno1.getNome());
					 * System.out.println(""Idade �: "" + aluno1.getIdade());
					 * System.out.println(""Data de nascimento � "" + aluno1.getDataNascimento());
					 * System.out.println(""Rg �: "" + aluno1.getRegistroGeral());
					 * System.out.println(""CPF �: "" + aluno1.getNumeroCpf());
					 * System.out.println(""M�e �: "" + aluno1.getNomeMae());
					 * System.out.println(""Pai �: "" + aluno1.getNomePai());
					 * System.out.println(""Matricula �: "" + aluno1.getDataMatricula());
					 * System.out.println(""Serie Matriculado �: "" + aluno1.getSerieMatriculado());
					 * System.out.println(""Nome da escola �: "" + aluno1.getNomeEscola());
					 * System.out.println(""M�dia da nota �: "" + aluno1.getMediaNota());
					 * System.out.println(""Resultado = "" + (aluno1.getAlunoAprovado() ? "" Aprovado ""
					 * : "" Reprovado ""));
					 */

					for (int pos = 1; pos <= 1; pos++) {

						String nomeDisciplina = JOptionPane.showInputDialog(""Nome da disciplina "" + pos + "" ?"");
						String notaDisciplina = JOptionPane.showInputDialog(""Nota da disciplina "" + pos + "" ?"");

						Disciplina disciplina = new Disciplina();
						disciplina.setDisciplina(nomeDisciplina);
						disciplina.setNota(Double.valueOf(notaDisciplina));

						aluno1.getDisciplinas().add(disciplina);
					}

					int escolha = JOptionPane.showConfirmDialog(null, ""Deseja remover alguma disciplina? "");

					if (escolha == 0) {/* Op��o sim � Zero */

						int continuarRemover = 0;
						int posicao = 1;
						while (continuarRemover == 0) {
							String disciplinaRemover = JOptionPane.showInputDialog(""Qual a disciplina 1, 2, 3 ou 4?"");
							System.out.println(aluno1.getDisciplinas()
									.remove(Integer.valueOf(disciplinaRemover).intValue() - posicao));
							posicao++;
							continuarRemover = JOptionPane.showConfirmDialog(null, ""Continuar a remover ?"");

						}
					}

					alunos.add(aluno1);
				}

				maps.put(StatusAluno.APROVADO, new ArrayList<Aluno>());
				maps.put(StatusAluno.REPROVADO, new ArrayList<Aluno>());
				maps.put(StatusAluno.RECUPERACAO, new ArrayList<Aluno>());

				for (Aluno aluno : alunos) {/* Separei em listas */
					if (aluno.getAlunoAprovado2().equalsIgnoreCase(StatusAluno.APROVADO)) {
						maps.get(StatusAluno.APROVADO).add(aluno);
					} else if (aluno.getAlunoAprovado2().equalsIgnoreCase(StatusAluno.RECUPERACAO)) {
						maps.get(StatusAluno.RECUPERACAO).add(aluno);

					} else if (aluno.getAlunoAprovado2().equalsIgnoreCase(StatusAluno.REPROVADO)) {
						maps.get(StatusAluno.REPROVADO).add(aluno);

					}
				}

				System.out.println(""-------------------Lista dos Aprovados_____________________"");
				for (Aluno aluno : maps.get(StatusAluno.APROVADO)) {
					System.out.println(""Resultado e igual "" + aluno.getAlunoAprovado2() + "" com media de = ""
							+ aluno.getMediaNota());
				}

				System.out.println(""-------------------Lista dos Recuperacao_____________________"");
				for (Aluno aluno : maps.get(StatusAluno.RECUPERACAO)) {
					System.out.println(""Resultado e igual "" + aluno.getAlunoAprovado2() + "" com media de = ""
							+ aluno.getMediaNota());
				}

				System.out.println(""-------------------Lista dos Reprovados_____________________"");
				for (Aluno aluno : maps.get(StatusAluno.REPROVADO)) {
					System.out.println(""Resultado e igual "" + aluno.getAlunoAprovado2() + "" com media de = ""
							+ aluno.getMediaNota());
				}
			} else {
				JOptionPane.showMessageDialog(null, ""Acesso não permitido"");
			}
		} catch (NullPointerException e) {
			JOptionPane.showMessageDialog(null, ""Opa um Null Pointer exception"" + e.getClass());
		} catch (Exception e) {
			e.printStackTrace();/* Imprime erro no console */

			/* Mensagem de erro ou causa */
			System.out.println(""Mensagem "" + e.getMessage());

			e.getStackTrace();
			StringBuilder saida = new StringBuilder();
			for (int pos = 0; pos < e.getStackTrace().length; pos++) {

				saida.append(""\n Classe de erro : "" + e.getStackTrace()[pos].getClassName());
				saida.append(""\n M�todo do erro : "" + e.getStackTrace()[pos].getMethodName());
				saida.append(""\n Linha do erro : "" + e.getStackTrace()[pos].getLineNumber());
				saida.append(""\n Class : "" + (e.getClass().getName()));
			}
			JOptionPane.showMessageDialog(null, ""Erro de conversãoo de número"" + saida.toString());
		}
	}
}
"
9uMTe71T,farming,Axhar_lua3,Lua,Monday 14th of August 2023 08:38:30 PM CDT,"print(""max x : and max y : "")
local size = {x = read(), z = read()}
local compass = {""north"", ""south"", ""east"", ""west""}
local facing = nil
local posx, posy, posz = gps.locate()
local pos = {x = posx, y = posy, z = posz}

function get_pos()
    local x, y, z = gps.locate()
    return{x = x, y = y, z = z}
end


function find_facing()
    local pos = get_pos()
 
    if pos.x == nil or pos.z == nil then
        print(""Impossible d'obtenir les coordonnées."")
        return
    end
 
    local pos2 = nil
    if turtle.detect() == true then
        turtle.back()
        pos2 = get_pos()
        turtle.forward()
        if (pos.x < pos2.x) then
            facing = compass[4]
        elseif (pos.x > pos2.x) then
            facing = compass[3]
        elseif (pos.z < pos2.z) then
            facing = compass[1]
        elseif (pos.z > pos2.z) then
            facing = compass[2]
        end
    else
        turtle.forward()
        pos2 = get_pos()
        turtle.back()
        if (pos.x > pos2.x) then
            facing = compass[4]
        elseif (pos.x < pos2.x) then
            facing = compass[3]
        elseif (pos.z > pos2.z) then
            facing = compass[1]
        elseif (pos.z < pos2.z) then
            facing = compass[2]
        end
    end
    print(""Facing:"", facing)
end
-- Appel de la fonction pour trouver la direction
find_facing()"
j9PsXQwu,Untitled,smj007,Python,Monday 14th of August 2023 08:04:31 PM CDT,"""""""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
""""""

class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':

        # keep track of cloned nodes
        hashmap = {}

        def dfs(node):
            if node in hashmap:
                return hashmap[node]

            cloned_node = Node(node.val)
            hashmap[node] = cloned_node

			# creating a new list called neighbors
			# and appending to that list and later saying
			# cloned_node.neighbors = neighbours 
			# gave me a memory limit exceeded error
            for neighbour in node.neighbors:
                cloned_node.neighbors.append(
                    dfs(neighbour)
                )

            hashmap[node] = cloned_node
            
            return cloned_node

        return dfs(node) if node else None"
Xgwz9Jfv,Day 13 String 1,HarrJ,Java,Monday 14th of August 2023 07:53:55 PM CDT,"public class Day13B {
    public static void main(String[] args) {
        String txtIn = ""A Day Late and a Dollar Short"";
        char chSearch = 'l';
        int count = 0;
        
        System.out.println(""txtIn: "" + txtIn);
        System.out.println(""txtIn have "" + txtIn.length() + "" characters"");
        
        System.out.println(""\n-----(count with charAt())-----\n"");
        for (int i = 0; i < txtIn.length(); i++) {
            if (txtIn.toLowerCase().charAt(i) == chSearch) {
                count++;
                System.out.println(txtIn.charAt(i) + ""-counted"");
            }
        }
        System.out.println(chSearch + ""'s in the text: "" + count);
        
        System.out.println(""\n-----(finding chars and counting using charAt)-----\n"");
        count = 0;
        for (int i = 0; i < txtIn.length(); i++) {
            i = txtIn.toLowerCase().indexOf(chSearch,i);
            if (i == -1) {
                i = txtIn.length();
            } else {
                System.out.println(chSearch + "" is in index "" + i);
                count++;
            }
            //add an if else that if i == -1 then i == txtIn.length()
        }
        System.out.println(chSearch + ""'s in the text using indexOf: "" + count);
    }
}
//----------------------------------
class Day13C {
    public static void main(String[] args) {
        String csvText = ""\""Number\"",\""Team Name\"",\""Member\"""";
        String[] csvArray = csvText.split("","");
        for (String string : csvArray) {
            System.out.print(string + "" | "");
        }
        
        String[] csvArray2 = {""Number,Team Name,Member""
            ,""1,Team 1,PRINCESS ANN RENDON""
            ,""2,Team 1,CARL REX ESPORSADO""
            ,""3,Team 1,REZEL MAE LOPEZ""
            ,""4,Team 1,HANNAH LYNDA BUSTILLO""
            ,""5,Team 1,JOHN PETER CATINOY""
            ,""6,Team 1,RONA FE PUYONG""
            ,""7,Team 2,RAYMOND UBALDO""
            ,""8,Team 2,JANICE ALVAREZ""
            ,""9,Team 2,IRADE PIANO""
            ,""10,Team 2,RAYMART NAPOLE""
            ,""11,Team 2,IRISH FYE SAMPOLLO""
            ,""12,Team 2,ELLEN MAE CARJASAN""
            ,""13,Team 2,VANISSA PEDRO""
            ,""14,Team 3,FLORA MAY ALAGAO""
            ,""15,Team 3,EVANGELINE SULLAGA""
            ,""16,Team 3,CLOEY MARK AMEDO""
            ,""17,Team 3,NORLIN NICOLE CABIGUNDA""
            ,""18,Team 3,JAYLYN GUZAREM""
            ,""19,Team 3,CHRISTIAN ARQUERO""
            ,""20,Team 4,JOMALYN MATANDAC""
            ,""21,Team 4,JANICE BALONGA""
            ,""22,Team 4,JEAN JUSTA SALINAS""
            ,""23,Team 4,TINA JULIA CALAUOR""
            ,""24,Team 4,ROSE ANN APOSTOL""
            ,""25,Team 4,JOHN IAN SALIDO""
            };
        for (String str : csvArray2) {
            System.out.println(str);
        }

    }
}
//-----------------------------------------------

public class Day13D {
    public static void main(String[] args) {
        System.out.println(""\n-----(1)-----\n"");
        String txt1 = ""Mississippi"";
        System.out.println(txt1);
        txt1 = txt1.replace(""s"", ""p"");
        System.out.println(txt1);
        System.out.println(txt1.replace(""i"", ""p""));
        //Mpppppppppp
        
        System.out.println(""\n-----(2)-----\n"");
        boolean change = true;
        txt1 = ""A Cut Below"";
        String txtResult1 = """", txtResult2 = """";
        for (char ch: txt1.toCharArray()) {
            txtResult1 += ch + ""|"";
            if (ch != ' ') {
                if (change) {
                    txtResult2 += String.valueOf(ch).toUpperCase() + ""_"";
                    change = false;
                } else {
                    txtResult2 += String.valueOf(ch).toLowerCase()+ ""_"";
                    change = true;
                }
            } else {
                txtResult2 += ch + ""_"";
            }
        }
        System.out.println(""1: "" + txtResult1 );
        System.out.println(""2: "" + txtResult2 );
        
        System.out.println(""\n-----(3)-----\n"");
        txt1 = ""Sandwiches"";
        System.out.println(txt1);
        System.out.println(txt1.substring(4));
        System.out.println(txt1.substring(0, 4));
        
        
        System.out.println(""\n-----(4)-----\n"");
        int startNum = 0;
        int endNum = 0;
        boolean isPrevSpace = true;
        txt1 = ""  As    above     so  below"";
        System.out.println(txt1);
        System.out.println(""trimmed: "" + txt1.trim());
        for (int i = 0; i < txt1.length(); i++) {
            if (txt1.charAt(i) != ' ' && isPrevSpace) {
                startNum = i;
                isPrevSpace = false;
                System.out.println(""s:""+startNum);
            } else if (txt1.charAt(i) == ' ' && !isPrevSpace) {
                endNum = i;
                isPrevSpace = true;
                System.out.println(""e:""+endNum);
                System.out.println(""|""+txt1.substring(startNum, endNum)+""|"");
            }
        }
    }
}"
tmbzqr8u,2023-08-14_stats.json,rdp_snitch,JSON,Monday 14th of August 2023 07:18:19 PM CDT,"{
  ""ip"": {
    ""39.108.174.140"": 93,
    ""62.122.184.168"": 12,
    ""87.251.75.145"": 9,
    ""45.79.108.4"": 42,
    ""62.122.184.166"": 12,
    ""45.227.254.49"": 6,
    ""60.205.170.161"": 21,
    ""45.143.201.62"": 9,
    ""192.46.209.144"": 3,
    ""106.116.169.71"": 3,
    ""185.170.144.3"": 6,
    ""87.251.75.120"": 3,
    ""213.6.148.83"": 3,
    ""103.232.53.123"": 72,
    ""107.173.191.116"": 156,
    ""45.76.251.163"": 30,
    ""103.45.232.114"": 24,
    ""194.165.16.72"": 6,
    ""194.233.165.235"": 42,
    ""185.170.144.113"": 6,
    ""112.5.87.34"": 3,
    ""103.67.163.177"": 3,
    ""147.78.47.154"": 3,
    ""79.110.48.175"": 3,
    ""198.23.174.29"": 3,
    ""20.169.145.143"": 21,
    ""45.140.17.16"": 9,
    ""198.235.24.104"": 9,
    ""51.132.230.42"": 117,
    ""36.139.61.15"": 3,
    ""202.165.15.46"": 3,
    ""87.251.75.64"": 3,
    ""194.165.16.73"": 6,
    ""141.98.11.128"": 6,
    ""51.75.160.42"": 12,
    ""45.79.42.96"": 3,
    ""103.214.8.137"": 6,
    ""191.101.174.80"": 3,
    ""103.167.91.133"": 12,
    ""198.235.24.118"": 9,
    ""45.129.14.230"": 6,
    ""66.55.67.123"": 3
  },
  ""asn"": {
    ""AS37963"": 114,
    ""AS57523"": 24,
    ""AS208091"": 15,
    ""AS63949"": 90,
    ""AS267784"": 6,
    ""AS210950"": 9,
    ""AS4134"": 3,
    ""AS48080"": 12,
    ""AS12975"": 3,
    ""AS63737"": 84,
    ""AS36352"": 159,
    ""AS20473"": 30,
    ""AS135921"": 24,
    ""AS48721"": 12,
    ""AS9808"": 3,
    ""AS150813"": 3,
    ""AS209588"": 3,
    ""AS211252"": 3,
    ""AS8075"": 138,
    ""AS198953"": 9,
    ""AS396982"": 18,
    ""AS56041"": 3,
    ""AS18206"": 3,
    ""AS209605"": 6,
    ""AS16276"": 12,
    ""AS140810"": 6,
    ""AS32780"": 3,
    ""AS198465"": 6,
    ""Unknown"": 3
  },
  ""isp"": {
    ""Hangzhou Alibaba Advertising Co"": 114,
    ""Chang Way Technologies Co. Limited"": 24,
    ""Xhost Internet Solutions LP"": 15,
    ""Akamai Technologies, Inc."": 90,
    ""Flyservers S.A."": 21,
    ""TOV E-RISHENNYA"": 9,
    ""Chinanet"": 3,
    ""Dmitriy Panchenko"": 12,
    ""Palestine Telecommunications Company"": 3,
    ""VIETSERVER"": 72,
    ""ColoCrossing"": 159,
    ""The Constant Company"": 30,
    ""Maxserver Company Limited"": 24,
    ""China Mobile"": 3,
    ""Thoi MMO Company Limited"": 3,
    ""Ncryptd LLC"": 3,
    ""Microsoft Corporation"": 21,
    ""Proton66 OOO"": 9,
    ""Google LLC"": 18,
    ""Microsoft"": 117,
    ""China Mobile Communications Corporation"": 3,
    ""VADS Sdn Bhd"": 3,
    ""UAB Host Baltic"": 6,
    ""OVH SAS"": 12,
    ""MEGACORE"": 6,
    ""Hosting Services"": 3,
    ""Vietserver Services Technology Company Limited"": 12,
    ""BtHoster LTD"": 6,
    ""Kamatera"": 3
  },
  ""org"": {
    ""Aliyun Computing Co., LTD"": 114,
    ""Chang Way Technologies Co. Limited"": 24,
    ""Xhost Internet Solutions"": 15,
    ""Linode"": 45,
    ""UAB Host Baltic"": 6,
    ""TOV VAIZ PARTNER"": 9,
    ""Linode, LLC"": 45,
    ""Chinanet HE"": 3,
    ""Xhostis"": 12,
    ""Palestine Telecommunications Company"": 3,
    ""VietServer Services technology company limited"": 72,
    ""CENTRIOHOST-LLC"": 156,
    ""Vultr Holdings, LLC"": 30,
    ""Vietnam Internet Network Information Center"": 24,
    ""Flyservers S.A"": 15,
    ""China Mobile Communications Corporation"": 6,
    ""MINHTHOIPC"": 3,
    ""Neterra Serverion BV"": 3,
    ""RackNerd LLC"": 3,
    ""Microsoft Azure Cloud (eastus)"": 21,
    ""Proton66 LLC"": 9,
    ""Palo Alto Networks, Inc"": 18,
    ""Microsoft Azure Cloud (uksouth)"": 117,
    ""TM VADS"": 3,
    ""Unknown"": 6,
    ""OVH Ltd"": 12,
    ""Megacore Technology Company Limited"": 6,
    ""Ipxo"": 3,
    ""Vietserver Viet NAM Service Technology Company Limited"": 12,
    ""BtHosting"": 6,
    ""Cloud Web Manage"": 3
  },
  ""regionName"": {
    ""Guangdong"": 96,
    ""Moscow"": 45,
    ""England"": 144,
    ""California"": 60,
    ""Vilnius"": 6,
    ""Beijing"": 21,
    ""Kyiv City"": 9,
    ""Maharashtra"": 3,
    ""Hebei"": 3,
    ""Rafah"": 3,
    ""Hanoi"": 102,
    ""New York"": 159,
    ""Georgia"": 30,
    ""Kaunas"": 18,
    ""Hesse"": 42,
    ""Tinh Nghe An"": 3,
    ""North Holland"": 3,
    ""Virginia"": 24,
    ""Zhejiang"": 3,
    ""Kuala Lumpur"": 3,
    ""Texas"": 3,
    ""New Jersey"": 3,
    ""Tinh Hung Yen"": 12,
    ""Chi\u0219in\u0103u Municipality"": 6,
    ""Illinois"": 3
  },
  ""country"": {
    ""China"": 123,
    ""Russia"": 45,
    ""United Kingdom"": 144,
    ""United States"": 282,
    ""Lithuania"": 24,
    ""Ukraine"": 9,
    ""India"": 3,
    ""Palestine"": 3,
    ""Vietnam"": 117,
    ""Germany"": 42,
    ""Netherlands"": 3,
    ""Malaysia"": 3,
    ""Moldova"": 6
  },
  ""account"": {
    ""hello"": 618,
    ""Domain"": 45,
    ""Administr"": 39,
    ""Test"": 33,
    ""(empty)"": 51,
    ""PfaTLseAg"": 3,
    ""YSHlGC"": 3,
    ""pSABWt"": 3,
    ""DgtHIV"": 3,
    ""BJfucwOdF"": 3,
    ""AfnaqP"": 3
  },
  ""keyboard"": {
    ""Unknown"": 804
  },
  ""client_build"": {
    ""Unknown"": 804
  },
  ""client_name"": {
    ""Unknown"": 804
  },
  ""ip_type"": {
    ""hosting"": 561,
    ""Unknown"": 234,
    ""mobile"": 6,
    ""hosting & proxy"": 3
  }
}"
ZpaKZNVB,2023-08-14_stats.json,rdp_snitch,JSON,Monday 14th of August 2023 07:16:17 PM CDT,"{
  ""ip"": {
    ""39.108.174.140"": 62,
    ""62.122.184.168"": 8,
    ""87.251.75.145"": 6,
    ""45.79.108.4"": 28,
    ""62.122.184.166"": 8,
    ""45.227.254.49"": 4,
    ""60.205.170.161"": 14,
    ""45.143.201.62"": 6,
    ""192.46.209.144"": 2,
    ""106.116.169.71"": 2,
    ""185.170.144.3"": 4,
    ""87.251.75.120"": 2,
    ""213.6.148.83"": 2,
    ""103.232.53.123"": 48,
    ""107.173.191.116"": 104,
    ""45.76.251.163"": 20,
    ""103.45.232.114"": 16,
    ""194.165.16.72"": 4,
    ""194.233.165.235"": 28,
    ""185.170.144.113"": 4,
    ""112.5.87.34"": 2,
    ""103.67.163.177"": 2,
    ""147.78.47.154"": 2,
    ""79.110.48.175"": 2,
    ""198.23.174.29"": 2,
    ""20.169.145.143"": 14,
    ""45.140.17.16"": 6,
    ""198.235.24.104"": 6,
    ""51.132.230.42"": 78,
    ""36.139.61.15"": 2,
    ""202.165.15.46"": 2,
    ""87.251.75.64"": 2,
    ""194.165.16.73"": 4,
    ""141.98.11.128"": 4,
    ""51.75.160.42"": 8,
    ""45.79.42.96"": 2,
    ""103.214.8.137"": 4,
    ""191.101.174.80"": 2,
    ""103.167.91.133"": 8,
    ""198.235.24.118"": 6,
    ""45.129.14.230"": 4,
    ""66.55.67.123"": 2
  },
  ""asn"": {
    ""AS37963"": 76,
    ""AS57523"": 16,
    ""AS208091"": 10,
    ""AS63949"": 60,
    ""AS267784"": 4,
    ""AS210950"": 6,
    ""AS4134"": 2,
    ""AS48080"": 8,
    ""AS12975"": 2,
    ""AS63737"": 56,
    ""AS36352"": 106,
    ""AS20473"": 20,
    ""AS135921"": 16,
    ""AS48721"": 8,
    ""AS9808"": 2,
    ""AS150813"": 2,
    ""AS209588"": 2,
    ""AS211252"": 2,
    ""AS8075"": 92,
    ""AS198953"": 6,
    ""AS396982"": 12,
    ""AS56041"": 2,
    ""AS18206"": 2,
    ""AS209605"": 4,
    ""AS16276"": 8,
    ""AS140810"": 4,
    ""AS32780"": 2,
    ""AS198465"": 4,
    ""Unknown"": 2
  },
  ""isp"": {
    ""Hangzhou Alibaba Advertising Co"": 76,
    ""Chang Way Technologies Co. Limited"": 16,
    ""Xhost Internet Solutions LP"": 10,
    ""Akamai Technologies, Inc."": 60,
    ""Flyservers S.A."": 14,
    ""TOV E-RISHENNYA"": 6,
    ""Chinanet"": 2,
    ""Dmitriy Panchenko"": 8,
    ""Palestine Telecommunications Company"": 2,
    ""VIETSERVER"": 48,
    ""ColoCrossing"": 106,
    ""The Constant Company"": 20,
    ""Maxserver Company Limited"": 16,
    ""China Mobile"": 2,
    ""Thoi MMO Company Limited"": 2,
    ""Ncryptd LLC"": 2,
    ""Microsoft Corporation"": 14,
    ""Proton66 OOO"": 6,
    ""Google LLC"": 12,
    ""Microsoft"": 78,
    ""China Mobile Communications Corporation"": 2,
    ""VADS Sdn Bhd"": 2,
    ""UAB Host Baltic"": 4,
    ""OVH SAS"": 8,
    ""MEGACORE"": 4,
    ""Hosting Services"": 2,
    ""Vietserver Services Technology Company Limited"": 8,
    ""BtHoster LTD"": 4,
    ""Kamatera"": 2
  },
  ""org"": {
    ""Aliyun Computing Co., LTD"": 76,
    ""Chang Way Technologies Co. Limited"": 16,
    ""Xhost Internet Solutions"": 10,
    ""Linode"": 30,
    ""UAB Host Baltic"": 4,
    ""TOV VAIZ PARTNER"": 6,
    ""Linode, LLC"": 30,
    ""Chinanet HE"": 2,
    ""Xhostis"": 8,
    ""Palestine Telecommunications Company"": 2,
    ""VietServer Services technology company limited"": 48,
    ""CENTRIOHOST-LLC"": 104,
    ""Vultr Holdings, LLC"": 20,
    ""Vietnam Internet Network Information Center"": 16,
    ""Flyservers S.A"": 10,
    ""China Mobile Communications Corporation"": 4,
    ""MINHTHOIPC"": 2,
    ""Neterra Serverion BV"": 2,
    ""RackNerd LLC"": 2,
    ""Microsoft Azure Cloud (eastus)"": 14,
    ""Proton66 LLC"": 6,
    ""Palo Alto Networks, Inc"": 12,
    ""Microsoft Azure Cloud (uksouth)"": 78,
    ""TM VADS"": 2,
    ""Unknown"": 4,
    ""OVH Ltd"": 8,
    ""Megacore Technology Company Limited"": 4,
    ""Ipxo"": 2,
    ""Vietserver Viet NAM Service Technology Company Limited"": 8,
    ""BtHosting"": 4,
    ""Cloud Web Manage"": 2
  },
  ""regionName"": {
    ""Guangdong"": 64,
    ""Moscow"": 30,
    ""England"": 96,
    ""California"": 40,
    ""Vilnius"": 4,
    ""Beijing"": 14,
    ""Kyiv City"": 6,
    ""Maharashtra"": 2,
    ""Hebei"": 2,
    ""Rafah"": 2,
    ""Hanoi"": 68,
    ""New York"": 106,
    ""Georgia"": 20,
    ""Kaunas"": 12,
    ""Hesse"": 28,
    ""Tinh Nghe An"": 2,
    ""North Holland"": 2,
    ""Virginia"": 16,
    ""Zhejiang"": 2,
    ""Kuala Lumpur"": 2,
    ""Texas"": 2,
    ""New Jersey"": 2,
    ""Tinh Hung Yen"": 8,
    ""Chi\u0219in\u0103u Municipality"": 4,
    ""Illinois"": 2
  },
  ""country"": {
    ""China"": 82,
    ""Russia"": 30,
    ""United Kingdom"": 96,
    ""United States"": 188,
    ""Lithuania"": 16,
    ""Ukraine"": 6,
    ""India"": 2,
    ""Palestine"": 2,
    ""Vietnam"": 78,
    ""Germany"": 28,
    ""Netherlands"": 2,
    ""Malaysia"": 2,
    ""Moldova"": 4
  },
  ""account"": {
    ""hello"": 412,
    ""Domain"": 30,
    ""Administr"": 26,
    ""Test"": 22,
    ""(empty)"": 34,
    ""PfaTLseAg"": 2,
    ""YSHlGC"": 2,
    ""pSABWt"": 2,
    ""DgtHIV"": 2,
    ""BJfucwOdF"": 2,
    ""AfnaqP"": 2
  },
  ""keyboard"": {
    ""Unknown"": 536
  },
  ""client_build"": {
    ""Unknown"": 536
  },
  ""client_name"": {
    ""Unknown"": 536
  },
  ""ip_type"": {
    ""hosting"": 374,
    ""Unknown"": 156,
    ""mobile"": 4,
    ""hosting & proxy"": 2
  }
}"
Zcx9Kbvy,2023-08-14_stats.json,rdp_snitch,JSON,Monday 14th of August 2023 07:15:08 PM CDT,"{
  ""ip"": {
    ""39.108.174.140"": 31,
    ""62.122.184.168"": 4,
    ""87.251.75.145"": 3,
    ""45.79.108.4"": 14,
    ""62.122.184.166"": 4,
    ""45.227.254.49"": 2,
    ""60.205.170.161"": 7,
    ""45.143.201.62"": 3,
    ""192.46.209.144"": 1,
    ""106.116.169.71"": 1,
    ""185.170.144.3"": 2,
    ""87.251.75.120"": 1,
    ""213.6.148.83"": 1,
    ""103.232.53.123"": 24,
    ""107.173.191.116"": 52,
    ""45.76.251.163"": 10,
    ""103.45.232.114"": 8,
    ""194.165.16.72"": 2,
    ""194.233.165.235"": 14,
    ""185.170.144.113"": 2,
    ""112.5.87.34"": 1,
    ""103.67.163.177"": 1,
    ""147.78.47.154"": 1,
    ""79.110.48.175"": 1,
    ""198.23.174.29"": 1,
    ""20.169.145.143"": 7,
    ""45.140.17.16"": 3,
    ""198.235.24.104"": 3,
    ""51.132.230.42"": 39,
    ""36.139.61.15"": 1,
    ""202.165.15.46"": 1,
    ""87.251.75.64"": 1,
    ""194.165.16.73"": 2,
    ""141.98.11.128"": 2,
    ""51.75.160.42"": 4,
    ""45.79.42.96"": 1,
    ""103.214.8.137"": 2,
    ""191.101.174.80"": 1,
    ""103.167.91.133"": 4,
    ""198.235.24.118"": 3,
    ""45.129.14.230"": 2,
    ""66.55.67.123"": 1
  },
  ""asn"": {
    ""AS37963"": 38,
    ""AS57523"": 8,
    ""AS208091"": 5,
    ""AS63949"": 30,
    ""AS267784"": 2,
    ""AS210950"": 3,
    ""AS4134"": 1,
    ""AS48080"": 4,
    ""AS12975"": 1,
    ""AS63737"": 28,
    ""AS36352"": 53,
    ""AS20473"": 10,
    ""AS135921"": 8,
    ""AS48721"": 4,
    ""AS9808"": 1,
    ""AS150813"": 1,
    ""AS209588"": 1,
    ""AS211252"": 1,
    ""AS8075"": 46,
    ""AS198953"": 3,
    ""AS396982"": 6,
    ""AS56041"": 1,
    ""AS18206"": 1,
    ""AS209605"": 2,
    ""AS16276"": 4,
    ""AS140810"": 2,
    ""AS32780"": 1,
    ""AS198465"": 2,
    ""Unknown"": 1
  },
  ""isp"": {
    ""Hangzhou Alibaba Advertising Co"": 38,
    ""Chang Way Technologies Co. Limited"": 8,
    ""Xhost Internet Solutions LP"": 5,
    ""Akamai Technologies, Inc."": 30,
    ""Flyservers S.A."": 7,
    ""TOV E-RISHENNYA"": 3,
    ""Chinanet"": 1,
    ""Dmitriy Panchenko"": 4,
    ""Palestine Telecommunications Company"": 1,
    ""VIETSERVER"": 24,
    ""ColoCrossing"": 53,
    ""The Constant Company"": 10,
    ""Maxserver Company Limited"": 8,
    ""China Mobile"": 1,
    ""Thoi MMO Company Limited"": 1,
    ""Ncryptd LLC"": 1,
    ""Microsoft Corporation"": 7,
    ""Proton66 OOO"": 3,
    ""Google LLC"": 6,
    ""Microsoft"": 39,
    ""China Mobile Communications Corporation"": 1,
    ""VADS Sdn Bhd"": 1,
    ""UAB Host Baltic"": 2,
    ""OVH SAS"": 4,
    ""MEGACORE"": 2,
    ""Hosting Services"": 1,
    ""Vietserver Services Technology Company Limited"": 4,
    ""BtHoster LTD"": 2,
    ""Kamatera"": 1
  },
  ""org"": {
    ""Aliyun Computing Co., LTD"": 38,
    ""Chang Way Technologies Co. Limited"": 8,
    ""Xhost Internet Solutions"": 5,
    ""Linode"": 15,
    ""UAB Host Baltic"": 2,
    ""TOV VAIZ PARTNER"": 3,
    ""Linode, LLC"": 15,
    ""Chinanet HE"": 1,
    ""Xhostis"": 4,
    ""Palestine Telecommunications Company"": 1,
    ""VietServer Services technology company limited"": 24,
    ""CENTRIOHOST-LLC"": 52,
    ""Vultr Holdings, LLC"": 10,
    ""Vietnam Internet Network Information Center"": 8,
    ""Flyservers S.A"": 5,
    ""China Mobile Communications Corporation"": 2,
    ""MINHTHOIPC"": 1,
    ""Neterra Serverion BV"": 1,
    ""RackNerd LLC"": 1,
    ""Microsoft Azure Cloud (eastus)"": 7,
    ""Proton66 LLC"": 3,
    ""Palo Alto Networks, Inc"": 6,
    ""Microsoft Azure Cloud (uksouth)"": 39,
    ""TM VADS"": 1,
    ""Unknown"": 2,
    ""OVH Ltd"": 4,
    ""Megacore Technology Company Limited"": 2,
    ""Ipxo"": 1,
    ""Vietserver Viet NAM Service Technology Company Limited"": 4,
    ""BtHosting"": 2,
    ""Cloud Web Manage"": 1
  },
  ""regionName"": {
    ""Guangdong"": 32,
    ""Moscow"": 15,
    ""England"": 48,
    ""California"": 20,
    ""Vilnius"": 2,
    ""Beijing"": 7,
    ""Kyiv City"": 3,
    ""Maharashtra"": 1,
    ""Hebei"": 1,
    ""Rafah"": 1,
    ""Hanoi"": 34,
    ""New York"": 53,
    ""Georgia"": 10,
    ""Kaunas"": 6,
    ""Hesse"": 14,
    ""Tinh Nghe An"": 1,
    ""North Holland"": 1,
    ""Virginia"": 8,
    ""Zhejiang"": 1,
    ""Kuala Lumpur"": 1,
    ""Texas"": 1,
    ""New Jersey"": 1,
    ""Tinh Hung Yen"": 4,
    ""Chi\u0219in\u0103u Municipality"": 2,
    ""Illinois"": 1
  },
  ""country"": {
    ""China"": 41,
    ""Russia"": 15,
    ""United Kingdom"": 48,
    ""United States"": 94,
    ""Lithuania"": 8,
    ""Ukraine"": 3,
    ""India"": 1,
    ""Palestine"": 1,
    ""Vietnam"": 39,
    ""Germany"": 14,
    ""Netherlands"": 1,
    ""Malaysia"": 1,
    ""Moldova"": 2
  },
  ""account"": {
    ""hello"": 206,
    ""Domain"": 15,
    ""Administr"": 13,
    ""Test"": 11,
    ""(empty)"": 17,
    ""PfaTLseAg"": 1,
    ""YSHlGC"": 1,
    ""pSABWt"": 1,
    ""DgtHIV"": 1,
    ""BJfucwOdF"": 1,
    ""AfnaqP"": 1
  },
  ""keyboard"": {
    ""Unknown"": 268
  },
  ""client_build"": {
    ""Unknown"": 268
  },
  ""client_name"": {
    ""Unknown"": 268
  },
  ""ip_type"": {
    ""hosting"": 187,
    ""Unknown"": 78,
    ""mobile"": 2,
    ""hosting & proxy"": 1
  }
}"
X7yv0KX7,rules,itsjusttriz,Lua,Monday 14th of August 2023 06:27:16 PM CDT,"lines = {
	""[1] Sharing the server details with non-subscribers will result in a ban from all servers AND the stream."",
	""[2] Don't be an Asshole."",
	""[3] Anyone known to be performing / displaying / creating inappropriate structures / images / movements will be dealt with accordingly."",
	""[4] If overflow protection is provided... USE IT"",
	""[5] Make sure your automation(s) have an OFF switch"",
	""[6] Streaming from this server IS allowed... Just be respectful to others, as they should to you."",
	""[7] Chance Cubes are only supplied to SELECTED STREAMERS. If you come across one, DO NOT TOUCH IT... report it."",
	""[8] Be Prepared, Be Honorable, BE GOOD!"",
	""[9] Failure to comply with these (or any other) rules made by staff will result in your access removed from various locations."",
	""[10] These rules are subject to change at ANY time."",
	""[Note] Use '/skyblock create' to start your island & '/skyblock home' to travel to it at any time""
}

mon = peripheral.wrap(""back"") -- The direction where your monitor is connected.
mon.setTextScale(2.5)

local function writeCentre(msg)
  local sw, sh = term.getSize()
  term.setCursorPos( math.floor( (sw + #msg ) / 2 ) + (#msg % 2 == 0 and 1 or 0), sh/sh)
    print(""  --- RULES ---\n\n"")
    write(msg)
end

while true do
	for i = 1, #lines do
		writeCentre(lines[i])
		os.sleep(5)
		mon.clear()
	end
end"
iCAzfu48,Ab_CMD,johnlol,VeriLog,Monday 14th of August 2023 06:06:35 PM CDT,"-	script	ab_cmd	-1,{
OnInit:
	bindatcmd ""ab"", strnpcinfo(0)+""::OnCommand"";
	end;

OnCommand:
	.@price = 100000; // 1m per buff
	if ( getmapflag(strcharinfo(3),MF_PVP) || getmapflag(strcharinfo(3),MF_BATTLEGROUND) ||  getmapflag(strcharinfo(3),MF_GVG) ) {
		mes ""Doesnt work on PVP/BG/WOE maps"";
		close;
	}
	if ( Zeny < .@price ) {
		mes ""You need ""+F_InsertComma(.@price)+""z."";
		close;
	}
	if ( select(""Buff Me!"",""Dont buff me!"")==2 ) {
		mes ""Ok"";
		close;
	}
	Zeny -= .@price;

	// This will bestow the effect of Level 10 Blessing.
	skilleffect 331,0; sc_start SC_INCMHPRATE,10000,100;
	skilleffect 332,0; sc_start SC_INCMSPRATE,10000,100;

	mes ""done!"";
	close;
}"
WY4Y4Yv2,Job Switcher [ Require Items ],johnlol,VeriLog,Monday 14th of August 2023 06:03:57 PM CDT,"prontera,157,198,5	script	Job Switcher	642,{
if( countitem( 7227 ) < 3 || JobLevel < 70 || BaseLevel < 99 ){
mes ""You required ^0080003^000000 ^FF0000TCG Card^000000, ^00800099^000000 ^FF0000BaseLevel^000000 and ^00800070^000000 ^FF0000JobLevel^000000 to ^FF4500Switch^000000 your ^696969Job Class^000000."";
}else{
setarray .JobLists[0],4008,4009,4010,4011,4012,4013,4015,4016,4017,4018,4019,( Sex )?""4020"":""4021"";
for( set .@i,0; .@i < getarraysize( .JobLists ); set .@i,.@i + 1 ){
  set .@Menu$,.@Menu$ + (( Class != .JobLists[.@i] )?jobname( .JobLists[.@i] ):"""")+"":"";
  }
set .@i,select( .@Menu$ ) - 1;
jobchange .JobLists[.@i];
delitem 7227,3;
resetskill;
set JobLevel,70;
set SkillPoint,130;
mes ""You have changed Job into^696969 ""+jobname( Class );
}
close;
}"
WVB77vtc,Advance Punching Bag,johnlol,VeriLog,Monday 14th of August 2023 06:03:13 PM CDT,"// Advance Punching Bag with Parameter settings
// by pajodex
// Video preview : https://www.youtube.com/watch?v=RoLhYx-Iny8

prontera,224,79,0	script	Set Parameters#0	844,{
function get_size_name;
function get_race_name;
function get_ele_name;
	ignoretimeout 1;
	mes ""Current punching bag info:"";
	.@dupid = atoi(strnpcinfo(2));
	getunitdata .gid[.@dupid], .@data;
	mes ""Size : ""+ get_size_name(.@data[UMOB_SIZE]);
	mes ""Level : ""+ .@data[UMOB_LEVEL];
	mes ""Race : ""+ get_race_name(.@data[UMOB_RACE]);
	mes ""Element : ""+ get_ele_name(.@data[UMOB_ELETYPE]) +"" Lv. ""+ .@data[UMOB_ELELEVEL];
	mes ""Stats : "";
	mes ""=============================="";
	mes ""Str - ""+ .@data[UMOB_STR] +""    Agi - ""+ .@data[UMOB_AGI] +""    Vit - ""+ .@data[UMOB_VIT];
	mes ""Int - ""+ .@data[UMOB_INT] +""    Dex - ""+ .@data[UMOB_DEX] +""    Luk - ""+ .@data[UMOB_LUK];
	mes ""Def - ""+ .@data[UMOB_DEF] +""    Mdef - ""+ .@data[UMOB_MDEF];
	next;
	if ( select(""> Set parameter:Cancel"") == 2 ) {
		mes ""Bye"";
		close;
	}
	do {
		mes ""Select which parameter to change."";
		next;
		switch(select(""> Size [ ^ff0000""+(.@UMOB_SIZE ? get_size_name(.@UMOB_SIZE):get_size_name(.UMOB_SIZE))+""^000000 ]:> Level [ ^ff0000""+(.@UMOB_LEVEL ? .@UMOB_LEVEL:.UMOB_LEVEL)+""^000000 ]:> Race [ ^ff0000""+(.@UMOB_RACE ? get_race_name(.@UMOB_RACE):get_race_name(.UMOB_RACE))+""^000000 ]:> Element [ ^ff0000""+(.@UMOB_ELETYPE ? get_ele_name(.@UMOB_ELETYPE):get_ele_name(.UMOB_ELETYPE))+"" Lv ""+(.@UMOB_ELELEVEL ? .@UMOB_ELELEVEL:.UMOB_ELELEVEL)+""^000000 ]:> Stats:> Enter Mob ID:^0000ffDone^000000"")) {
		case 1:
			.@UMOB_SIZE = select(""- Small:- Medium:- Large"")-1;
			break;
		case 2:
			mes ""Input level (1-""+.maxlv+""):"";
			next;
			input .@UMOB_LEVEL, 1, .maxlv;
			break;
		case 3:
			.@UMOB_RACE = select(""- Formless:- Undead:- Brute:- Plant:- Insect:- Fish:- Demon:- Demihuman:- Angel:- Dragon:- Player"") - 1;
			break;
		case 4:
			mes ""Select Element:"";
			next;
			.@UMOB_ELETYPE = select(""- Neutral:- Water:- Earth:- Fire:- Wind:- Poison:- Holy:- Shadow:- Ghost:- Undead"") - 1;
			mes ""Select Level:"";
			next;
			.@UMOB_ELELEVEL = select(""Lv 1:Lv 2:Lv 3:Lv 4"");
			break;
		case 5:
			mes ""Select:"";
			next;
			switch(select(""> STR [ ^ff0000""+(.@UMOB_STR ? .@UMOB_STR:.UMOB_STR)+""^000000 ]:> AGI [ ^ff0000""+(.@UMOB_AGI ? .@UMOB_AGI:.UMOB_AGI)+""^000000 ]:> VIT [ ^ff0000""+(.@UMOB_VIT ? .@UMOB_VIT:.UMOB_VIT)+""^000000 ]:> INT [ ^ff0000""+(.@UMOB_INT ? .@UMOB_INT:.UMOB_INT)+""^000000 ]:> DEX [ ^ff0000""+(.@UMOB_DEX ? .@UMOB_DEX:.UMOB_DEX)+""^000000 ]:> LUK [ ^ff0000""+(.@UMOB_LUK ? .@UMOB_LUK:.UMOB_LUK)+""^000000 ]:> DEF [ ^ff0000""+(.@UMOB_DEF ? .@UMOB_DEF:.UMOB_DEF)+""^000000 ]:> MDEF [ ^ff0000""+(.@UMOB_MDEF ? .@UMOB_MDEF:.UMOB_MDEF)+""^000000 ]"")) {
				case 1: .@data$ = ""STR""; break;
				case 2: .@data$ = ""AGI""; break;
				case 3: .@data$ = ""VIT""; break;
				case 4: .@data$ = ""INT""; break;
				case 5: .@data$ = ""DEX""; break;
				case 6: .@data$ = ""LUK""; break;
				case 7: .@data$ = ""DEF""; break;
				case 8: .@data$ = ""MDEF""; break;
			}
			mes ""Value (1-""+.max_stat+"":"";
			next;
			input .@val, 1, .max_stat;
			setd "".@UMOB_""+.@data$, .@val;
			break;
		case 6:
			mes ""Enter Monster ID to simulate:"";
			next;
			input .@val;
			if ( (.@name_english$ = getmonsterinfo(.@val, MOB_NAME)) == ""null"" ) {
				mes ""Cannot find Monster ID ""+.@val+"" on the database!"";
				next;
				break;
			}
			query_sql(""SELECT `element_level` FROM `""+(checkre(0) ? ""mob_db_re"":""mob_db"")+""` WHERE `id` = '""+.@val+""'"", .@UMOB_ELELEVEL);
			.@UMOB_LEVEL = getmonsterinfo(.@val, MOB_LV);
			.@UMOB_SIZE = getmonsterinfo(.@val, MOB_SIZE);
			.@UMOB_RACE = getmonsterinfo(.@val, MOB_RACE);
			.@UMOB_ELETYPE = getmonsterinfo(.@val, MOB_ELEMENT);
			.@UMOB_DEF = getmonsterinfo(.@val, MOB_DEF);
			.@UMOB_MDEF = getmonsterinfo(.@val, MOB_MDEF);
			.@UMOB_STR = getmonsterinfo(.@val, MOB_STR);
			.@UMOB_AGI = getmonsterinfo(.@val, MOB_AGI);
			.@UMOB_VIT = getmonsterinfo(.@val, MOB_VIT);
			.@UMOB_INT = getmonsterinfo(.@val, MOB_INT);
			.@UMOB_DEX = getmonsterinfo(.@val, MOB_DEX);
			.@UMOB_LUK = getmonsterinfo(.@val, MOB_LUK);
			mes ""Fetching and applying data of monster '""+.@name_english$+""(""+.@val+"")' on punching bag..."";
			next;
			break;
	
		default: // Finalize
			.@done = true;
			break;
		}
	} while ( !.@done );
	mes ""Please review before I spawn:"";
	mes ""Size : ""+ get_size_name((.@UMOB_SIZE ? .@UMOB_SIZE:.UMOB_SIZE));
	mes ""Level : ""+ (.@UMOB_LEVEL ? .@UMOB_LEVEL:.UMOB_LEVEL);
	mes ""Race : ""+ get_race_name((.@UMOB_RACE ? .@UMOB_RACE:.UMOB_RACE));
	mes ""Element : ""+ get_ele_name((.@UMOB_ELETYPE ? .@UMOB_ELETYPE:.UMOB_ELETYPE)) +"" Lv. ""+ (.@UMOB_ELELEVEL ? .@UMOB_ELELEVEL:.UMOB_ELELEVEL);
	mes ""Stats : "";
	mes ""=============================="";
	mes ""Str - ""+ (.@UMOB_STR ? .@UMOB_STR:.UMOB_STR) +""    Agi - ""+ (.@UMOB_AGI ? .@UMOB_AGI:.UMOB_AGI) +""    Vit - ""+ (.@UMOB_VIT ? .@UMOB_VIT:.UMOB_VIT);
	mes ""Int - ""+ (.@UMOB_INT ? .@UMOB_INT:.UMOB_INT) +""    Dex - ""+ (.@UMOB_DEX ? .@UMOB_DEX:.UMOB_DEX) +""    Luk - ""+ (.@UMOB_LUK ? .@UMOB_LUK:.UMOB_LUK);
	mes ""Def - ""+ (.@UMOB_DEF ? .@UMOB_DEF:.UMOB_DEF) +""    Mdef - ""+ (.@UMOB_MDEF ? .@UMOB_MDEF:.UMOB_MDEF);
	next;
	if (select(""> Finalize!:> Cancel"")==2) close;
	mes ""Done!"";
	close2;
	.UMOB_SIZE = (.@UMOB_SIZE) ? .@UMOB_SIZE:.UMOB_SIZE;
	.UMOB_LEVEL = (.@UMOB_LEVEL) ? .@UMOB_LEVEL:.UMOB_LEVEL;
	.UMOB_RACE = (.@UMOB_RACE) ? .@UMOB_RACE:.UMOB_RACE;
	.UMOB_ELETYPE = (.@UMOB_ELETYPE) ? .@UMOB_ELETYPE:.UMOB_ELETYPE;
	.UMOB_ELELEVEL = (.@UMOB_ELELEVEL) ? .@UMOB_ELELEVEL:.UMOB_ELELEVEL;
	.UMOB_STR = (.@UMOB_STR) ? .@UMOB_STR:.UMOB_STR;
	.UMOB_AGI = (.@UMOB_AGI) ? .@UMOB_AGI:.UMOB_AGI;
	.UMOB_VIT = (.@UMOB_VIT) ? .@UMOB_VIT:.UMOB_VIT;
	.UMOB_INT = (.@UMOB_INT) ? .@UMOB_INT:.UMOB_INT;
	.UMOB_DEX = (.@UMOB_DEX) ? .@UMOB_DEX:.UMOB_DEX;
	.UMOB_LUK = (.@UMOB_LUK) ? .@UMOB_LUK:.UMOB_LUK;
	.UMOB_DEF = (.@UMOB_DEF) ? .@UMOB_DEF:.UMOB_DEF;
	.UMOB_MDEF = (.@UMOB_MDEF) ? .@UMOB_MDEF:.UMOB_MDEF;
	killmonster strnpcinfo(4),strnpcinfo(0)+""::OnMyMobDead"";
	donpcevent strnpcinfo(0)+""::OnMyMobDead"";
	end;
	
OnInit:
	// Max level players can input
	.maxlv = 99; 

	// Max stats players can input 
	.max_stat = 120;
	
	// Max hp - don't change if you dont know what you are doing
	.UMOB_MAXHP = 2000000000;

	// Default values on initial spawn
	.UMOB_SIZE = 1;
	.UMOB_LEVEL = 10;
	.UMOB_RACE = 3;
	.UMOB_ELETYPE = 1;
	.UMOB_ELELEVEL = 1;
	.UMOB_STR = 5;
	.UMOB_AGI = 5;
	.UMOB_VIT = 5;
	.UMOB_INT = 5;
	.UMOB_DEX = 5;
	.UMOB_LUK = 5;
	.UMOB_DEF = 10;
	.UMOB_MDEF = 10;

OnMyMobDead:
	getunitdata(getnpcid(0), .@d);
	monster strnpcinfo(4),.@d[UNPC_X],.@d[UNPC_Y],""Punching Bag"",(!checkre(0))?1905:2411,1,strnpcinfo(0)+""::OnMyMobDead"";
	.@dupid = atoi(strnpcinfo(2));
	.gid[.@dupid] = $@mobid[0];
	.mhp[.@dupid] = .UMOB_MAXHP;
	setunitdata .gid[.@dupid],UMOB_MODE,.@d[UMOB_MODE]|0x4000000|0x0200000; // Set MD_STATUS_IMMUNE (0x4000000) because EDP/burn/%MHP based status can skew the DPS counter so much.
	setunitdata .gid[.@dupid],UMOB_MAXHP,.UMOB_MAXHP;
	setunitdata .gid[.@dupid],UMOB_SIZE,.UMOB_SIZE;
	setunitdata .gid[.@dupid],UMOB_LEVEL,.UMOB_LEVEL;
	setunitdata .gid[.@dupid],UMOB_RACE,.UMOB_RACE;
	setunitdata .gid[.@dupid],UMOB_ELETYPE,.UMOB_ELETYPE;
	setunitdata .gid[.@dupid],UMOB_ELELEVEL,.UMOB_ELELEVEL;
	setunitdata .gid[.@dupid],UMOB_STR,.UMOB_STR;
	setunitdata .gid[.@dupid],UMOB_AGI,.UMOB_AGI;
	setunitdata .gid[.@dupid],UMOB_VIT,.UMOB_VIT;
	setunitdata .gid[.@dupid],UMOB_INT,.UMOB_INT;
	setunitdata .gid[.@dupid],UMOB_DEX,.UMOB_DEX;
	setunitdata .gid[.@dupid],UMOB_LUK,.UMOB_LUK;
	setunitdata .gid[.@dupid],UMOB_DEF,.UMOB_DEF;
	setunitdata .gid[.@dupid],UMOB_MDEF,.UMOB_MDEF;
	initnpctimer;
	end;
	
OnTimer5000:
	.@dupid = atoi(strnpcinfo(2));
	if(unitexists(.gid[.@dupid])){
		getunitdata(.gid[.@dupid],.@d);
		.@diff = (.mhp[.@dupid] - .@d[UMOB_HP]);
		if(.@diff > 0){
			npctalk ""Punching Bag : I've taken "" + F_InsertComma(.@diff/5) + "" DPS in last 5 seconds."";
			setunitdata .gid[.@dupid],UMOB_HP,.mhp[.@dupid];
			specialeffect EF_HEAL, .gid[.@dupid];
		}
	}
	initnpctimer;

	function	get_size_name	{
		switch ( getarg(0) ) {
			case 0 : .@val$ = ""Small""; break;
			case 1 : .@val$ = ""Medium""; break;
			case 2 : .@val$ = ""Large""; break;
		}
		return .@val$;
	}
	
	function	get_race_name	{
		switch ( getarg(0) ) {
			case 0: .@val$ = ""Formless""; break;
			case 1: .@val$ = ""Undead""; break;
			case 2: .@val$ = ""Brute""; break;
			case 3: .@val$ = ""Plant""; break;
			case 4: .@val$ = ""Insect""; break;
			case 5: .@val$ = ""Fish""; break;
			case 6: .@val$ = ""Demon""; break;
			case 7: .@val$ = ""Demihuman""; break;
			case 8: .@val$ = ""Angel""; break;
			case 9: .@val$ = ""Dragon""; break;
			case 10: .@val$ = ""Player""; break;
		}
		return .@val$;
	}
	
	function	get_ele_name	{
		switch ( getarg(0) ) {
			case 0: .@val$ = ""Neutral""; break;
			case 1: .@val$ = ""Water""; break;
			case 2: .@val$ = ""Earth""; break;
			case 3: .@val$ = ""Fire""; break;
			case 4: .@val$ = ""Wind""; break;
			case 5: .@val$ = ""Poison""; break;
			case 6: .@val$ = ""Holy""; break;
			case 7: .@val$ = ""Shadow""; break;
			case 8: .@val$ = ""Ghost""; break;
			case 9: .@val$ = ""Undead""; break;
		}
		return .@val$;
	}
}

prontera,216,79,0	duplicate(Set Parameters#0)	Set Parameters#1	844
prontera,224,70,0	duplicate(Set Parameters#0)	Set Parameters#2	844
prontera,216,58,0	duplicate(Set Parameters#0)	Set Parameters#3	844
prontera,224,58,0	duplicate(Set Parameters#0)	Set Parameters#4	844"
K8sqMq6D,PunchingBag,johnlol,VeriLog,Monday 14th of August 2023 06:02:35 PM CDT,"//===== rAthena Script =============================================
//= Punching Bag NPC
//===== By: ========================================================
//= Secretdataz
//===== Current Version: ===========================================
//= 0.2
//===== Changelog: =================================================
//= 0.1 Initial commit
//= 0.2 Add MD_KNOCKBACK_IMMUNE
//===== Compatible With: ===========================================
//= rAthena Project
//===== Additional Comments: =======================================
//= When duplicating this NPC. Only use NUMBER after the # [secret]
//==================================================================
//prontera,224,79,0	script	PunchingBag#0	844,{
prontera,152,232,0	script	Test Your Might#0	844,{
	end;
	
OnMyMobDead:
OnInit:
	getunitdata(getnpcid(0), .@d);
	//monster strnpcinfo(4),.@d[UNPC_X],.@d[UNPC_Y],""Punching Bag"",2411,1,strnpcinfo(0)+""::OnMyMobDead"";
	monster strnpcinfo(4),.@d[UNPC_X],.@d[UNPC_Y],""Test Your Might"",2411,1,strnpcinfo(0)+""::OnMyMobDead"";
	.@dupid = atoi(strnpcinfo(2));
	.gid[.@dupid] = $@mobid[0];
	.mhp[.@dupid] = strmobinfo(4,2411);
	setunitdata .gid[.@dupid],UMOB_MODE,.@d[UMOB_MODE]|0x4000000|0x0200000; // Set MD_STATUS_IMMUNE (0x4000000) because EDP/burn/%MHP based status can skew the DPS counter so much.
	initnpctimer;
	end;
	
OnTimer5000:
	.@dupid = atoi(strnpcinfo(2));
	if(unitexists(.gid[.@dupid])){
		getunitdata(.gid[.@dupid],.@d);
		.@diff = (.mhp[.@dupid] - .@d[UMOB_HP]);
		if(.@diff > 0){
			//npctalk ""Punching Bag : I've taken "" + F_InsertComma(.@diff/5) + "" DPS in last 5 seconds."";
			npctalk ""Your Might : I've taken "" + F_InsertComma(.@diff/5) + "" DPS in last 5 seconds."";
			//npctalk ""Punching Bag : I've taken "" + (.@diff/5) + "" DPS in last 5 seconds."";
			setunitdata .gid[.@dupid],UMOB_HP,.mhp[.@dupid];
			specialeffect EF_HEAL;
		}
	}
	initnpctimer;
}

//prontera,216,79,0	duplicate(PunchingBag#0)	PunchingBag#1	844
//prontera,224,70,0	duplicate(PunchingBag#0)	PunchingBag#2	844
//prontera,216,58,0	duplicate(PunchingBag#0)	PunchingBag#3	844
//prontera,224,58,0	duplicate(PunchingBag#0)	PunchingBag#4	844
prontera,157,228,0	duplicate(Test Your Might#0)	Test Your Might#1	844
prontera,159,232,0	duplicate(Test Your Might#0)	Test Your Might#2	844
prontera,154,228,0	duplicate(Test Your Might#0)	Test Your Might#3	844
//prontera,224,58,0	duplicate(Test Your Might#0)	Test Your Might#4	844"
ngYRUctp,SaveCMD,johnlol,VeriLog,Monday 14th of August 2023 06:01:45 PM CDT,"//===== rAthena Script =======================================
//= OnPCLogin NPC
//===== By: ==================================================
//= Akkarin
//===== Current Version: =====================================
//= 2.0
//===== Compatible With: =====================================
//= rAthena Project
//===== Description: =========================================
//= This NPC saves your settings so the next time you login, it
//= will auto perform the commands you selected. Easy to edit
//= or duplicate/modify based on cmds you want to allow.
//===== Additional Comments: =================================
//= 1.0 First Version.
//= 2.0 Complete rewrite to make use of binary values and 
//      switch(select()) instead of menu();
//============================================================
//prontera,147,175,5	script	Settings	61,{
-	script	save_cmd	-1,{
OnInit:
bindatcmd(""savecmd"",""save_cmd::OnCommand"");



OnCommand:	
UserMenu:
	set .@reset$,""^000000"";
	set .@disabled$,""^BE1C1C"";
	set .@enabled$,""^0DB40D"";
	
	mes ""[^484848Settings^000000]"";
	mes ""Note: These are all account based, not per-character."";
	mes ""Note 2: You must relog for them to take effect."";
	if (#pcloginflag&1) { set .@st_autoloot$,.@enabled$+#pcloginalp+""%""+.@reset$; } else { set .@st_autoloot$,.@disabled$+""Off""+.@reset$; }
	if (#pcloginflag&2) { set .@st_showdelay$,.@enabled$+""On""+.@reset$; } else { set .@st_showdelay$,.@disabled$+""Off""+.@reset$; }
	if (#pcloginflag&4) { set .@st_rates$,.@enabled$+""On""+.@reset$; } else { set .@st_rates$,.@disabled$+""Off""+.@reset$; }
	if (#pcloginflag&8) { set .@st_showexp$,.@enabled$+""On""+.@reset$; } else { set .@st_showexp$,.@disabled$+""Off""+.@reset$; }
	if (#pcloginflag&16) { set .@st_showzeny$,.@enabled$+""On""+.@reset$; } else { set .@st_showzeny$,.@disabled$+""Off""+.@reset$; }
	if (#pcloginflag&32) { set .@st_uptime$,.@enabled$+""On""+.@reset$; } else { set .@st_uptime$,.@disabled$+""Off""+.@reset$; }
	next;
	switch(select(""Auto Loot [""+.@st_autoloot$+""]:Show Delay [""+.@st_showdelay$+""]:Rates on login [""+.@st_rates$+""]:Show Exp [""+.@st_showexp$+""]:Show Zeny [""+.@st_showzeny$+""]:Uptime on login [""+.@st_uptime$+""]"")){
		case 1:
			mes ""[^484848Settings^000000]"";
			mes ""Auto Loot is currently ""+.@st_autoloot$;
			mes ""Desc: Auto loot adds items to your inventory automatically."";
			next;
			switch(select(""Toggle:Back"")){
				case 1:
					if (#pcloginflag&1) { set #pcloginflag, #pcloginflag &~ 1; } else {
						mes ""[^484848Settings^000000]"";
						mes ""Auto Loot is currently ""+.@st_autoloot$;
						mes ""Enter the minimum rate an item must drop at before it it looted, 100 will loot all items, 99 will only loot cards, 0 disables it."";
						next;
						input .@rate;
						if ((.@rate >= 0) && (.@rate <= 100)) set #pcloginalp,.@rate;
						set #pcloginflag, #pcloginflag | 1;
					}
					break;
				case 2: break;
			}
			break;
		case 2:
			mes ""[^484848Settings^000000]"";
			mes ""Show Delay is currently ""+.@st_showdelay$;
			mes ""Desc: When a skill fails because of delay, it will be hidden."";
			next;
			switch(select(""Toggle:Back"")){
				case 1:
					if (#pcloginflag&2) { set #pcloginflag, #pcloginflag &~ 2; } else { set #pcloginflag, #pcloginflag | 2; }
					break;
				case 2:	break;
			}
			break;
		case 3:
			mes ""[^484848Settings^000000]"";
			mes ""Rates on login is currently ""+.@st_rates$;
			mes ""Desc: Displays the current server rates on login."";
			next;
			switch(select(""Toggle:Back"")){
				case 1:
					if (#pcloginflag&4) { set #pcloginflag, #pcloginflag &~ 4; } else { set #pcloginflag, #pcloginflag | 4; }
					break;
				case 2:	break;
			}
			break;
		case 4:
			mes ""[^484848Settings^000000]"";
			mes ""Show Exp is currently ""+.@st_showexp$;
			mes ""Desc: When you gain exp, it will be displaied."";
			next;	
			switch(select(""Toggle:Back"")){
				case 1:
					if (#pcloginflag&8) { set #pcloginflag, #pcloginflag &~ 8; } else { set #pcloginflag, #pcloginflag | 8; }
					break;
				case 2:	break;
			}
			break;
		case 5:
			mes ""[^484848Settings^000000]"";
			mes ""Show Zeny is currently ""+.@st_showzeny$;
			mes ""Desc: When you gain zeny, it will be displaied."";
			next;
			switch(select(""Toggle:Back"")){
				case 1:
					if (#pcloginflag&16) { set #pcloginflag, #pcloginflag &~ 16; } else { set #pcloginflag, #pcloginflag | 16; }
					break;
				case 2:	break;
			}
			break;
		case 6:
			mes ""[^484848Settings^000000]"";
			mes ""Uptime on login is currently ""+.@st_uptime$;
			mes ""Desc: When you log in, server uptime will be displaied."";
			next;
			switch(select(""Toggle:Back"")){
				case 1:
					if (#pcloginflag&32) { set #pcloginflag, #pcloginflag &~ 32; } else { set #pcloginflag, #pcloginflag | 32; }
					break;
				case 2:	break;
			}
			break;
	}
	goto UserMenu;
	
OnPCLoginEvent:
	sleep2 1000;
	if (#pcloginflag&1)		atcommand ""@autoloot "" + #pcloginalp;
	if (#pcloginflag&2)		atcommand ""@showdelay"";
	if (#pcloginflag&4)		atcommand ""@rates"";
	if (#pcloginflag&8)		atcommand ""@showexp"";
	if (#pcloginflag&16)	atcommand ""@showzeny"";
	if (#pcloginflag&32)	atcommand ""@uptime"";
	end;
}"
LKZsKGG0,JailSystem,johnlol,VeriLog,Monday 14th of August 2023 06:00:27 PM CDT,"-	script	JailSystem#proto	FAKE_NPC,{
	OnBail:
		.@charCount = getareaunits(BL_PC, ""sec_pri"", 14, 85, 59, 65, .@charNames$);
		mes ""[Guard]"";
		if(.@charCount == 0) {
			mes ""There is no one in jail."";
			close;
		}

		mes ""Who do you want to bail out?"";
		next;
		select(implode(.@charNames$, "":""));

		mes ""[Guard]"";
		mes ""The fee is "" + callfunc(""F_InsertComma"", .bailOutPrice) + ""z. Do you want to pay that?"";
		next;
		if (select(""Yes:No"" ) == 1) {
			mes ""[Guard]"";
			if(Zeny < .bailOutPrice) {
				mes ""It seems you don't have enough money, come back when you have enough."";
				close;
			}

			Zeny -= .bailOutPrice;

			.@addressation$ = (strcharinfo(0) == .@charNames$[@menu - 1]) ? ""you"" : .@charNames$[@menu - 1];
			mes ""Alright, i'll let "" + .@addressation$ + "" go for now."";
			
			close2;
			atcommand(""@unjail "" + .@charNames$[@menu - 1]);
			end;
		}
		
		mes ""[Guard]"";
		mes ""You can come back when you change your mind."";
		close;
		end;

	OnInit:
		.bailOutPrice = 10000;
}

-	script	BAIL_ATCOMMAND	FAKE_NPC,{
	OnInit:
		bindatcmd(""bail"", ""Guard#proto::OnBail"");
}

prontera, 159, 190, 4	duplicate(JailSystem#proto)	Prison Warden#sec_pri01	4_M_YOUNGKNIGHT
sec_pri, 18, 63, 4	duplicate(JailSystem#proto)	Jail Guard#sec_pri02	4_M_EDEN_GUARDER
sec_pri, 45, 63, 4	duplicate(JailSystem#proto)	Jail Guard#sec_pri03	4_M_LGTGUARD"
1cNF0qs7,CardRemover,johnlol,VeriLog,Monday 14th of August 2023 05:59:49 PM CDT,"
prontera,155,161,5	script	Card Remover#cardremover	757,{
getinventorylist;
for( set .@i,0; .@i < @inventorylist_count; set .@i,.@i + 1 ){
	set .@card_count,0;
	for( set .@card,1; .@card <= 4; set .@card,.@card + 1 )
		if( getd( ""@inventorylist_card""+.@card+""[""+.@i+""]"" ) )
			set .@card_count,.@card_count + 1;
	// @inventorylist_card1[.@i] + @inventorylist_card2[.@i] + @inventorylist_card3[.@i] + @inventorylist_card4[.@i];
	if( .@card_count && !@inventorylist_expire[.@i] ){
		set .@equip_card_count,.@equip_card_count + 1;
		set .@menu$,.@menu$ + ( ( @inventorylist_refine[.@i] )?""+""+@inventorylist_refine[.@i]:"""" ) + "" "" + getitemname( @inventorylist_id[.@i] ) + ""[""+.@card_count+"" Cards]"" + "":"";
	}else{
		set .@menu$,.@menu$ + "":"";
	}
}
mes ""You have ""+.@equip_card_count+"" equipments that have card inside."";
if( .@equip_card_count ){
	do{
		next;
		set .@i,select( .@menu$ ) - 1;
		mes ""You hav selected ^0055FF""+( ( @inventorylist_refine[.@i] )?""+""+@inventorylist_refine[.@i]:"""" )+"" ""+getitemname( @inventorylist_id[.@i] )+""^000000"";
		set .@max_slot,getitemslots( @inventorylist_id[.@i] );
		for( set .@card,1; .@card <= .@max_slot; set .@card,.@card + 1 )
			mes ""^777777Card ""+( .@card )+"" : ""+getitemname( getd( ""@inventorylist_card""+.@card+""[""+.@i+""]"" ) )+""^000000"";
	}while( select( ""Remove Card"",""Select Another"" ) == 2 );
	delitem2 @inventorylist_id[.@i],1,1,@inventorylist_refine[.@i],@inventorylist_attribute[.@i],@inventorylist_card1[.@i],@inventorylist_card2[.@i],@inventorylist_card3[.@i],@inventorylist_card4[.@i];
	getitem2 @inventorylist_id[.@i],1,1,@inventorylist_refine[.@i],0,0,0,0,0;
	for( set .@card,1; .@card <= .@max_slot; set .@card,.@card + 1 )
		getitem getd( ""@inventorylist_card""+.@card+""[""+.@i+""]"" ),1;
	mes ""Done..."";
}
close;
}"
FLp8e6hX,KilltoBuffed,johnlol,VeriLog,Monday 14th of August 2023 05:58:23 PM CDT,"/*
AdobeRO
________________     ______            ________       
___    |_____  /________  /______      ___  __ \_____ 
__  /| |  __  /_  __ \_  __ \  _ \     __  /_/ /  __ \
_  ___ / /_/ / / /_/ /  /_/ /  __/     _  _, _// /_/ /
/_/  |_\__,_/  \____//_.___/\___/      /_/ |_| \____/ 
By: Orce (rAthena)
Vesão: 1.3
*/

-	script	KillToBuff	-1,{
 
OnPCKillEvent:
	if(strcharinfo(3) == ""guild_vs1"" || strcharinfo(3) == ""guild_vs3"" || strcharinfo(3) == ""guild_vs4"")
	{
		//percentheal 100,100;
		//dispbottom ""HP/SP totalmente restaurado."";
		percentheal 10,10;
		dispbottom ""Foi restaurado 10% HP/SP"";

		switch(rand(1,11))
		{
		  case 1:
			 skilleffect 383,0; sc_start SC_WINDWALK,370000,5;
			 dispbottom ""Você ganhou buff: Wind Walk"";
			 break;
		  case 2:
			 skilleffect 33,0; sc_start SC_ANGELUS,300000,10;
			 dispbottom ""Você ganhou buff: Angelus"";
			 break;
		  case 3:
			 skilleffect 74,0; sc_start SC_MAGNIFICAT,90000,5;
			 dispbottom ""Você ganhou buff: Magnificat"";
			 break;
		  case 4:
			 skilleffect 75,0; sc_start SC_GLORIA,30000,5;
			 dispbottom ""Você ganhou buff: Gloria"";
			 break;
		  case 5:
			 skilleffect 66,0; sc_start SC_IMPOSITIO,60000,5;
			 dispbottom ""Você ganhou buff: Impositio Manus"";
			 break;
		  case 6:
			 skilleffect 34,0; sc_start SC_BLESSING,240000,10;
			 dispbottom ""Você ganhou buff: Blessing"";
			 break;
		  case 7:
			 skilleffect 29,0; sc_start SC_INCREASEAGI,240000,10;
			 dispbottom ""Você ganhou buff: Increase Agility"";
			 break;
		  case 8:
			 skilleffect 67,0; sc_start SC_SUFFRAGIUM,10000,3;
			 dispbottom ""Você ganhou buff: Suffragium"";
			 break;
		  case 9:
			 skilleffect 361,0; sc_start SC_ASSUMPTIO,100000,5;
			 dispbottom ""Você ganhou buff: Assumptio"";
			 break;
		  case 10:
			 skilleffect 73,0; sc_start SC_KYRIE,120000,10;
			 dispbottom ""Você ganhou buff: Kyrie Eleison"";
			 break;
		  case 11:
	      switch ( BaseJob ) {
        case Job_Alchemist:    set .@spirit, 445; break;
        case Job_Monk:     set .@spirit, 447; break;
        case Job_Star_Gladiator:  set .@spirit, 448; break;
        case Job_Sage:     set .@spirit, 449; break;
        case Job_Crusader:    set .@spirit, 450; break;
        case Job_SuperNovice:   set .@spirit, 451; break;
        case Job_Knight:    set .@spirit, 452; break;
        case Job_Wizard:    set .@spirit, 453; break;
        case Job_Priest:    set .@spirit, 454; break;
        case Job_Bard: case Job_Dancer: set .@spirit, 455; break;
        case Job_Rogue:     set .@spirit, 456; break;
        case Job_Assassin:    set .@spirit, 457; break;
        case Job_Blacksmith:   set .@spirit, 458; break;
        case Job_Hunter:    set .@spirit, 460; break;
        case Job_Soul_Linker:   set .@spirit, 461; break;
        default:
            if ( Upper == 1 && BaseLevel < 70 )
                set .@spirit, 494;
    }
    if ( .@spirit ) {
        sc_start4 sc_spirit, 360000, 5, .@spirit,0,0;
        skilleffect .@spirit, 5;
    }
		dispbottom ""Você ganhou buff: Soul Linked"";
			 break;
		}
	}
	end;
}"
nVcHA0vs,Bardola,johnlol,VeriLog,Monday 14th of August 2023 05:57:22 PM CDT,"/*
prontera,156,182,4	script	Bardola	647,3,3,{
	
	OnInit:
		//setunitdata getnpcid(0),UNPC_INT,170;	// set NPC INT 170
		//setunitdata getnpcid(0),UNPC_DEX,170;	// set NPC DEX 170
		//setunitdata getnpcid(0),UNPC_AGI,170;	// set NPC AGI 170
		setunitdata(getnpcid(0),UNPC_PLUSALLSTAT,150);
		end;

	OnTouch:
		if( .sbragi < gettimetick(2) ){			// triggered within area 7x7, start bragi if not on delay
			unitskilluse getnpcid(0), 313,5, 321,10, 320,10, 322,10, 319,10;	// Launch all skills simultaneously
			set .sbragi,gettimetick(2) + 0;	// delay 3 minutes (180,000 ms) for NPC to cast songs again
		}
		end;
}
*/
/*
prontera,156,182,4	script	Bardola	647,3,3,{

	OnInit:
		setunitdata getnpcid(0),UNPC_INT,170;	// set NPC INT 170
		setunitdata getnpcid(0),UNPC_DEX,170;	// set NPC DEX 170
		setunitdata getnpcid(0),UNPC_AGI,170;	// set NPC AGI 170
		end;

	OnTouch:
		if( .sbragi < gettimetick(2) ){	// triggered within area 7x7, start bragi if not on delay
			unitskilluse getnpcid(0), 313,5, getnpcid(0), 321,10, getnpcid(0), 320,10, getnpcid(0), 322,10, getnpcid(0), 319,10;	// Launch all skills simultaneously
			set .sbragi, gettimetick(2) + 180;	// delay 3 minutes (180,000 ms) for NPC to cast songs again
		}
		end;
}
*/
prontera,156,182,4	script	Bardola	647,3,3,{

	OnInit:
		setunitdata getnpcid(0),UNPC_INT,170;	// set NPC INT 170
		setunitdata getnpcid(0),UNPC_DEX,170;	// set NPC DEX 170
		setunitdata getnpcid(0),UNPC_AGI,170;	// set NPC AGI 170
		end;

	OnTouch:
		if( .sbragi < gettimetick(2) ){	// triggered within area 7x7, start bragi if not on delay
			unitskilluseid getnpcid(0), 313,5;
			unitskilluseid getnpcid(0), 321,10;
			unitskilluseid getnpcid(0), 320,10;
			unitskilluseid getnpcid(0), 322,10;
			unitskilluseid getnpcid(0), 319,10;
			set .sbragi, gettimetick(2) + 180;	// delay 3 minutes (180,000 ms) for NPC to cast songs again
		}
		end;
}

"
7vKZ3ABf,Gospel,johnlol,VeriLog,Monday 14th of August 2023 05:56:45 PM CDT,"prontera,156,182,4	script	Gospel	2221,3,3,{
//-	script	Gospel	-1,{
	end;
	
OnTouch:
	if( .sbragi < gettimetick(2) ){			// triggered within area 7x7, start bragi if not on delay
		unitskilluseid getnpcid(0),369,10;	// Gospel ID#369 level 10
		set .sbragi,gettimetick(2) + 0;	// delay 3 minute for npc to cast song
	}
	end;
	
OnInit:
	//setunitdata getnpcid(0),UNPC_INT,170;	// set NPC INT 150
	//setunitdata getnpcid(0),UNPC_DEX,170;	// set NPC DEX 150
	//setunitdata getnpcid(0),UNPC_AGI,170;	// set NPC AGI 150
	setunitdata(getnpcid(0),UNPC_PLUSALLSTAT,150);
	end;
}

//guild_vs3,50,81,3	duplicate(Gospel)	Gospel#guildvs3	647,3,3
//guild_vs1,50,91,3	duplicate(Gospel)	Gospel#guildvs1	647,3,3
//guild_vs4,50,91,3	duplicate(Gospel)	Gospel#guildvs4	647,3,3"
NG10hM62,Invulnerable Siegfried,johnlol,VeriLog,Monday 14th of August 2023 05:56:16 PM CDT,"prontera,156,182,4	script	Invulnerable Siegfried	647,3,3,{
//-	script	Invulnerable Siegfried	-1,{
	end;
	
OnTouch:
	if( .sbragi < gettimetick(2) ){			// triggered within area 7x7, start bragi if not on delay
		unitskilluseid getnpcid(0),313,5;	// Invulnerable Siegfried ID#321 level 5 / Elemental 80%, Ailments 50%
		//unitskilluseid getnpcid(0),321,10;	// A Poem of Bragi ID#321 level 10
		//unitskilluseid getnpcid(0),320,10;	// Assassin Cross of Sunset ID#320 level 10
		//unitskilluseid getnpcid(0),322,10;	// The Apple of Idun ID#322 level 10
		//unitskilluseid getnpcid(0),319,10;	// A Whistle ID#319 level 10
		set .sbragi,gettimetick(2) + 0;	// delay 3 minute for npc to cast song
	}
	end;
	
OnInit:
	//setunitdata getnpcid(0),UNPC_INT,170;	// set NPC INT 150
	//setunitdata getnpcid(0),UNPC_DEX,170;	// set NPC DEX 150
	//setunitdata getnpcid(0),UNPC_AGI,170;	// set NPC AGI 150
	setunitdata(getnpcid(0),UNPC_PLUSALLSTAT,150);
	end;
}

//guild_vs3,50,81,3	duplicate(Invulnerable Siegfried)	Invulnerable Siegfried#guildvs3	647,3,3
//guild_vs1,50,91,3	duplicate(Invulnerable Siegfried)	Invulnerable Siegfried#guildvs1	647,3,3
//guild_vs4,50,91,3	duplicate(Invulnerable Siegfried)	Invulnerable Siegfried#guildvs4	647,3,3"
NCGF18xX,PVP_Warper_Ver1.0,johnlol,VeriLog,Monday 14th of August 2023 05:55:41 PM CDT,"//===== rAthena Script =======================================
//= PVP Warper
//===== By: ==================================================
//= HaARiZz
//===== Current Version: =====================================
//= 1.0
//===== Compatible With: =====================================
//= rAthena Project
//===== Description: =========================================
//= Basic PVP Warper script.
//= Free for ALL
//= PVP for 2nd Job
//= Guild Arena
//===== Additional Comments: =================================
//= 1.0 Initial script.
//============================================================

prontera,139,173,5	script	PVP	801,{
//Locked PVP During Woe
if ( agitcheck() || agitcheck2() ) {
mes ""Sorry, ^800000PVP^000000 Rooms are ^FF0000Locked^000000 During WOE."";
emotion e_no;
close;
}

	emotion e_com;
	mes ""[ ^FF0000"" + strnpcinfo(0) + ""^000000 ]"";
	mes ""What would you like me to do?"";
	switch( select(""^006400Free^000000 ^008000for^000000 ^228B22ALL^000000 [ ""+getmapusers(""guild_vs3"")+"" Users ]"",""^FF4500Trans^000000. ^FF8C002nd^000000 ^FFA500Job^000000 [ ""+getmapusers(""guild_vs1"")+"" Users ]"",""^0000FFGuild^000000 ^4169E1Arena^000000 [ ""+getmapusers(""guild_vs4"")+"" Users ]"") ) {

		case 1:
			warp ""guild_vs3"",0,0;
			announce """"+strcharinfo(0)+"" Has Enter PVP! Free for All"",bc,0xBAB9B9;
			end;
			
		case 2:
			if ( Class == .thirdJob[1] ){
				mes ""You are not ^FF4500Trans^000000. ^FF8C002nd^000000 ^FFA500Job^000000, so you cant enter."";
			}else{
				warp ""guild_vs1"",0,0;
				announce """"+strcharinfo(0)+"" Has Enter PVP for Trans. 2nd Job"",bc,0xBAB9B9;

			}
			end;

		case 3:
		if( !getcharid(2) ){
			mes ""You dont have a ^0000FFGuild^000000""; close;
			}else{
			warp ""guild_vs4"",0,0;
			announce """"+strcharinfo(0)+"" Has Enter PVP! Guild Arena"",bc,0xBAB9B9;

			}
			end;
	}
//Hide NPC On Woe
/*
OnAgitEnd:
OnAgitEnd2:
	hideoffnpc strnpcinfo(0);
	end;

OnAgitStart:
OnAgitStart2:
	hideonnpc strnpcinfo(0);
	end;
*/
OnInit:
	setarray	.thirdJob[1],0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,4001,4002,4003,4004,4005,4006,4007,4054,4055,4056,4057,4058,4059,4060,4061,4062,4063,4064,4065,4066,4067,4068,4069,4070,4071,4072,4073,4074,4075,4076,4077,4078,4079,4190,4191,4096,4097,4098,4099,4100,4101,4102,4103,4104,4105,4106,4107,4108,4223,4224,4229,4239,4240,4241,4242;
	setmapflag	""guild_vs3"",mf_nosave;
	setmapflag	""guild_vs3"",mf_nowarp;
	setmapflag	""guild_vs3"",mf_nowarpto;
	setmapflag	""guild_vs3"",mf_noteleport;
	setmapflag	""guild_vs3"",mf_noreturn;
	setmapflag	""guild_vs3"",mf_pvp;
	
	setmapflag	""guild_vs1"",mf_nosave;
	setmapflag	""guild_vs1"",mf_nowarp;
	setmapflag	""guild_vs1"",mf_nowarpto;
	setmapflag	""guild_vs1"",mf_noteleport;
	setmapflag	""guild_vs1"",mf_noreturn;
	setmapflag	""guild_vs1"",mf_pvp;

	setmapflag	""guild_vs4"",mf_nosave;
	setmapflag	""guild_vs4"",mf_nowarp;
	setmapflag	""guild_vs4"",mf_nowarpto;
	setmapflag	""guild_vs4"",mf_noteleport;
	setmapflag	""guild_vs4"",mf_noreturn;
	setmapflag	""guild_vs4"",mf_gvg;
	setmapflag	""guild_vs4"",mf_pvp;


	//waitingroom ""PvP Warper "",0;
	//end;

}"
ct5uJunh,Turti Std turtle adapter,melzneni,Lua,Monday 14th of August 2023 04:51:53 PM CDT,"turtleAdapter = {
    forward = function()
        while not turtle.forward() do
            if not turtle.dig() then
                turtle.attack()
            end
        end

        if test then
            if storageData.direction == 0 then
                storageData.pos[1] = storageData.pos[1] + 1
            elseif storageData.direction == 1 then
                storageData.pos[3] = storageData.pos[3] + 1
            elseif storageData.direction == 2 then
                storageData.pos[1] = storageData.pos[1] - 1
            elseif storageData.direction == 3 then
                storageData.pos[3] = storageData.pos[3] - 1
            end
            state = true
        end
        return true
    end,
    up = function()
        while not turtle.up() do
            if not turtle.digUp() then
                turtle.attackUp()
            end
        end
        if test then
            storageData.pos[2] = storageData.pos[2] + 1
        end
        return true
    end,
    down = function()
        while not turtle.down() do
            if not turtle.digDown() then
                turtle.attackDown()
            end
        end
        if test then
            storageData.pos[2] = storageData.pos[2] - 1
        end
        return true
    end,
    turnLeft = function()
        local state = turtle.turnLeft()
        storageData.direction = storageData.direction - 1
        if storageData.direction < 0 then
            storageData.direction = storageData.direction + 4
        end
        return state
    end,
    turnRight = function()
        local state = turtle.turnRight()
        storageData.direction = storageData.direction + 1
        if storageData.direction > 3 then
            storageData.direction = storageData.direction - 4
        end
        return state
    end,
    detect = function()
        return turtle.detect()
    end,
    detectUp = function()
        return turtle.detectUp()
    end,
    detectDown = function()
        return turtle.detectDown()
    end,
    select = function(id)
        return turtle.select(id)
    end,
    place = function()
        local state = turtle.place()
        if state then
            sleep(0.1)
        end
        return state
    end,
    placeUp = function()
        local state = turtle.placeUp()
        if state then
            sleep(0.1)
        end
        return state
    end,
    placeDown = function()
        local state = turtle.placeDown()
        if state then
            sleep(0.1)
        end
        return state
    end,
    dig = function()
        local digged = false;
        while (turtle.detect()) do
            if not turtle.dig() then
                break ;
            end
            digged = true;
        end
        return digged
    end,
    digUp = function()
        local digged = false;
        while (turtle.detectUp()) do
            if not turtle.digUp() then
                break ;
            end
            digged = true;
        end
        return digged
    end,
    digDown = function()
        local digged = false;
        while (turtle.detectDown()) do
            if not turtle.digDown() then
                break ;
            end
            digged = true;
        end
        return digged
    end,
    attack = function()
        return turtle.attack()
    end,
    attackUp = function()
        return turtle.attackUp()
    end,
    attackDown = function()
        return turtle.attackDown()
    end,
    getItemName = function(id)
        local name = turtle.getItemDetail(id)
        if name == nil then
            return nil
        end
        return name.name
    end,
    getItemCount = function(id)
        if id == nil then
            return turtle.getItemCount()
        end
        return turtle.getItemCount(id)
    end,
    drop = function(cnt)
        return turtle.drop(cnt)
    end,
    dropUp = function(cnt)
        return turtle.dropUp(cnt)
    end,
    dropDown = function(cnt)
        return turtle.dropDown(cnt)
    end,
    suck = function(cnt)
        return turtle.suck(cnt)
    end,
    suckUp = function(cnt)
        return turtle.suckUp(cnt)
    end,
    suckDown = function(cnt)
        return turtle.suckDown(cnt)
    end,
    refuel = function()
        return turtle.refuel()
    end,
    getFuelLevel = function()
        return turtle.getFuelLevel()
    end
}

function setStorageData(sD)
    storageData = sD
end

return {
    turtleAdapter = turtleAdapter, setStorageData = setStorageData,
    setTest = function(t)
        test = t
    end
}"
8r0j3vmc,lol4,zero96x,Lua,Monday 14th of August 2023 04:46:59 PM CDT,"--------- Connect all Components ---------
--motor FrontLeft
motorFrontLeft = peripheral.wrap(""electric_motor_12"")
--motor FrontRight
motorFrontRight = peripheral.wrap(""electric_motor_19"")
--motor BackLeft
motorBackLeft = peripheral.wrap(""electric_motor_13"")
--motor BackRight
motorBackRight = peripheral.wrap(""electric_motor_14"")
--reader
sR = peripheral.wrap(""top"")
 
 
---------- Initialize Variables ----------
altitude = {p = 0, i = 0, d = 0, itime = 0, lError = 0, integral = 0}
roll = {p, i, d, itime = 0, lError = 0, integral = 0}
pitch = {p, i, d, itime = 0, lError = 0, integral = 0}
 
degProportionalConst = 90
rawRotData = {}
corrRotData = {[""pitch""] = 0, [""roll""] = 0, [""yaw""] = 0}
altData = 0
nError = 0
time = 0
 
 
 
 
--motor speeds
frontLeftRpm = 0
frontRightRpm = 0
backLeftRpm = 0
backRightRpm = 0
baseSpeed = 162
 
 
 
 
--------------- PID Settings ---------------
altitude.p = .5
altitude.i = 0
altitude.itime = 60
altitude.d = .295
roll.p = .0006
roll.i = 0
roll.itime = 60
roll.d = .295
pitch.p = .0006
pitch.i = 0
pitch.itime = 60
pitch.d = .295
 
 
desiredYaw = 0
desiredPitch = 0
desiredRoll = 0
desiredAltitude = -20
 
 
 
---------------------- Functions ----------------------
--Get Errors
function getYawError()
    return desiredYaw - corrRotData.yaw
end
 
function getRollError()
    return desiredRoll - corrRotData.roll
end
 
function getPitchError()
    return desiredPitch - corrRotData.pitch
end
 
function getAltitudeError()
    return desiredAltitude - altData
end
 
 
-------- read and transform data --------
function readData() 
    rawData = sR.getRotation()
    corrRotData = getCorrRotData()
    altData = sR.getWorldspacePosition().y
end
 
function getCorrRotData()
    return {
        [""pitch""] = rawData.yaw * degProportionalConst,
        [""roll""] = rawData.pitch * degProportionalConst,
        [""yaw""] = rawData.roll * degProportionalConst
    }
end
 
--PID Function--
function pid(x, err)
    lastErr = x.lError
    x.lError = err
 
    --Proportional--
    correction = x.lError * x.p
 
    --Intergral
    --x.integral = (x.integral * (x.itime - 1) * x.lError)/x.itime 
	   --x.integral = (x.integral + err)
    --res = x.integral * x.i
    res = 0
    if res > 3 then
        res = 3
    elseif res < -3 then
        res = -3
    else 
        res = res
    end
    correction = correction + res
    x.integral = res
 
    --Derivative--
    return correction + (x.lError - lastErr) * x.d 
 
end
 
function printRelevantInfo()
    term.setCursorPos(13,2)
    print(desiredAltitude)
    term.setCursorPos(13,3)
    print(desiredPitch)
    term.setCursorPos(13,4)
    print(desiredRoll)
    term.setCursorPos(13,5)
    print(desiredYaw)
    term.setCursorPos(13,6)
    print(getAltitudeError())
    term.setCursorPos(13,7)
    print(getPitchError())
    term.setCursorPos(13,8)
    print(getRollError())
    term.setCursorPos(13,9)
    print(frontLeftRpm)
    term.setCursorPos(13,10)
    print(frontRightRpm)
    term.setCursorPos(13,11)
    print(backLeftRpm)
    term.setCursorPos(13,12)
    print(backRightRpm)
    term.setCursorPos(13,13)
    print(corrRotData.pitch)
    term.setCursorPos(13,14)
    print(pitch.integral)
end
 

function printBase()
    term.clear()
    term.setCursorPos(1,1)
    print(""Drone 1.0"")
    print(""Desired Altitude: "")
    print(""Desired Pitch: "")
    print(""Desired Roll: "")
    print(""Desired Yaw: "")
    print(""Altitude Error: "")
    print(""Pitch Error: "")
    print(""RollError: "")
    print(""frontLeftRpm: "")
    print(""frontRightRpm: "")
    print(""backLeftRpm: "")
    print(""backRightRpm: "")
    print(""currentPitch: "")
end

--worker function
function work1()
    motorFrontLeft.setSpeed(frontLeftRpm)
end

function work2()
    motorBackLeft.setSpeed(backLeftRpm)
end

function work3()
    motorBackRight.setSpeed(backRightRpm)
end

function work4()
    motorFrontRight.setSpeed(frontRightRpm)
end

function calcSpeeds()
    pError = getPitchError()
    frontLeftRpm = baseSpeed + pid(altitude,getAltitudeError()) - pid(pitch,pError) + pid(roll,getRollError()) 
    frontRightRpm = baseSpeed + pid(altitude,getAltitudeError()) - pid(pitch,pError) + pid(roll,getRollError()) 
    backLeftRpm = baseSpeed + pid(altitude,getAltitudeError()) + pid(pitch,pError) - pid(roll,getRollError())    
    backRightRpm = baseSpeed + pid(altitude,getAltitudeError()) + pid(pitch,pError) - pid(roll,getRollError()) 
end
 
--Init
function init()
    desiredAltitude = sR.getWorldspacePosition().y
    altData = desiredAltitude
end
 
--Controls
function keyListen()
    local event, key = os.pullEvent()
    if key == 87 then --W
        print(""UP"")
        desiredAltitude = desiredAltitude + 5
    elseif key == 83 then --S
        print(""DOWN"")
        desiredAltitude = desiredAltitude - 5
    end
end
 
 
--Fucntion for motors to get actuated at 3Hz
function wait()
    if time == 0 then
        time = os.clock()
    else
        print(os.clock() - time)
        if os.clock() - time > .34 then
            time = 0
            parallel.waitForAny(work1, work2, work3, work4)
        end
    end
end
 
function wrap()
    readData()
    calcSpeeds()
    printRelevantInfo()
    wait()
end
 
 


--PROGRAM LOOP
printBase()
init()
while true do
    parallel.waitForAny(wrap,keyListen)
    sleep(.05)
end"
tCa45HeQ,rayenghanmi starship config,diagnostics0,YAML,Monday 14th of August 2023 04:45:56 PM CDT,"format = """"""
[░▒▓█](#2e3440)\
$os\
$username\
[](bg:#3b4252 fg:#2e3440)\
$directory\
[](fg:#3b4252 bg:#434c5e)\
$git_branch\
$git_status\
[](fg:#434c5e bg:#4c566a)\
$c\
$python\
$elixir\
$elm\
$golang\
$haskell\
$java\
$julia\
$nodejs\
$nim\
$rust\
$scala\
[](fg:#4c566a bg:#5e81ac)\
$docker_context\
[](fg:#5e81ac bg:#6272a4)\
$time\
[ ](fg:#6272a4)\
\n
$cmd_duration\
$character\
""""""
#add_newline = false

[line_break]
disabled = false

[username]
show_always = true
style_user = ""bg:#2e3440""
style_root = ""bg:#9A348E""
format = '[ $user ]($style)'
disabled = false

[os]
style = ""bg:#9A348E""
disabled = true # Disabled by default

[directory]
style = ""bg:#3b4252""
format = ""[ $path ]($style)""
truncation_length = 3
truncation_symbol = ""…/""

[directory.substitutions]
""Documents"" = ""󰧮 ""
""Downloads"" = "" ""
""Music"" = ""󰝚 ""
""Pictures"" = "" ""
""~"" = "" ""

[c]
symbol = "" ""
style = ""bg:#4c566a""
format = '[ $symbol ($version) ]($style)'

[python]
symbol = "" ""
style = ""bg:#4c566a""
format = '[ $symbol ($version) ]($style)'

[docker_context]
symbol = "" ""
style = ""bg:#5e81ac""
format = '[ $symbol $context ]($style) $path'

[elixir]
symbol = "" ""
style = ""bg:#434c5e""
format = '[ $symbol ($version) ]($style)'

[elm]
symbol = "" ""
style = ""bg:#434c5e""
format = '[ $symbol ($version) ]($style)'

[git_branch]
symbol = """"
style = ""bg:#434c5e""
format = '[ $symbol $branch ]($style)'

[git_status]
style = ""bg:#434c5e""
format = '[$all_status$ahead_behind ]($style)'

[golang]
symbol = "" ""
style = ""bg:#434c5e""
format = '[ $symbol ($version) ]($style)'

[haskell]
symbol = "" ""
style = ""bg:#434c5e""
format = '[ $symbol ($version) ]($style)'

[java]
symbol = "" ""
style = ""bg:#434c5e""
format = '[ $symbol ($version) ]($style)'

[julia]
symbol = "" ""
style = ""bg:#434c5e""
format = '[ $symbol ($version) ]($style)'

[nodejs]
symbol = """"
style = ""bg:#434c5e""
format = '[ $symbol ($version) ]($style)'

[nim]
symbol = "" ""
style = ""bg:##434c5e""
format = '[ $symbol ($version) ]($style)'

[rust]
symbol = """"
style = ""bg:#434c5e""
format = '[ $symbol ($version) ]($style)'

[scala]
symbol = "" ""
style = ""bg:#434c5e""
format = '[ $symbol ($version) ]($style)'

[time]
disabled = false
time_format = ""%R"" # Hour:Minute Format
style = ""bg:#6272a4""
format = '[ 󱑂 $time ]($style)'
	
[character]
success_symbol = '[ ➜](#6272a4)'
error_symbol = '[ ➜](bold red)'
#style = ""bg:#6272a4""

[cmd_duration]
min_time = 500
format = ' [$duration](#6272a4)'"
Ats0P4r7,Untitled,smj007,Python,Monday 14th of August 2023 04:31:29 PM CDT,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:

        from collections import deque

        def bfs(r, c):

            q = deque()
            visited.add((r, c))
            q.append((r, c))

            while q:
                row, col = q.popleft()
                directions = [[1, 0], [-1, 0], [0, 1], [0, -1]]

                for dr, dc in directions:
                    r, c = row + dr, col + dc
                    # error was here : r, c = row + dr, row + dc
                    if (r) in range(rows) and (c) in range(cols) and grid[r][c] == '1' and (r ,c) not in visited:
                        q.append((r , c ))
                        visited.add((r, c ))
                
        count = 0
        visited = set()
        rows = len(grid)
        cols = len(grid[0])

        for r in range(len(grid)):
            for c in range(len(grid[0])):
                if grid[r][c] == ""1"" and (r,c) not in visited:
                    bfs(r, c)
                    count = count + 1

        return count"
QPD5HN9U,Sequential File Allocation,Sreekar_0125,C,Monday 14th of August 2023 04:18:05 PM CDT,"#include <conio.h>
#include <stdio.h>
#include <stdlib.h>


void recursion(int file[])
{
    int free = 0, block, length, j, k, ch, i;
    
    printf(""Enter the starting block and the length: "");
    scanf(""%d%d"", &block, &length);
    for (i = block; i < block + length; i++)
    {
        if (file[i] == 0)
        {
            free++;
        }
            
    }
    if (length == free)
    {
        for (i = block; i < block + length; i++)
        {
            if (file[i] == 0)
            {
                file[i] = 1;
                printf(""%d\t%d\n"", i, file[i]);
            }
        }
        if (i != (block + length - 1))
        {
            printf(""The file is allocated to the disk\n"");
        }       
    }
    else
    {
        printf(""Another File Exists in the Required Block \n"");
    }
        
    printf(""Do you want to enter files\n"");
    printf(""Press 1 for YES, 0 for NO: "");

    scanf(""%d"", &ch);
    if (ch == 1)
        recursion(file);
    else
        exit(0);
    return;
}
int main()
{
    int file[30], i;

    for (i = 0; i < 30; i++)
    {
        file[i] = 0;
    }
        
    printf(""Files allocated are\n"");
    recursion(file);
    getch();
    return 0;
}"
FauBfvYe,Turti simple installer,melzneni,Lua,Monday 14th of August 2023 04:11:11 PM CDT,"local args = { ... }

if #args < 1 then
    error(""Please provide a turti-program pastebin id"")
end

local librariesFiles = """"
local librariesArg = """"
if #args > 1 then
    librariesArg = "",'libraries=[""
    for i = 2, #args do
        librariesFiles = librariesFiles .. "","" .. ""lib"" .. (i - 1) .. ""=<pb:"" .. args[i] .. "">""
        if i > 2 then
            librariesArg = librariesArg .. "",""
        end
        librariesArg = librariesArg .. ""'lib"" .. (i - 1) .. ""'""
    end
    librariesArg = librariesArg .. ""]'""
end

local cmd = ""startup={files="" ..
        ""{core=<pb:XR1thET5>,std=<pb:QRVgewvP>,DFE=<pb:ct5uJunh>"" .. librariesFiles .. "",program.turti=<pb:"" .. args[1] .. "">},"" ..
        ""delay=2,"" ..
        ""cmds={{'core','program.turti'"" .. librariesArg .. "",$arg1$,$arg2$}}} reboot=true""

shell.run(""pastebin"", ""run"", ""ptz9M5PM"", cmd)"
CxL6qNuT,LRU 2,Sreekar_0125,C,Monday 14th of August 2023 04:00:02 PM CDT,"// Least Recently Used (LRU) Page Replacement Algorithm
#include <stdio.h>
#include <stdbool.h>

// Function which runs the algorithm and in the end, returns no. of page faults

int LRU_algorithm(int totalPages, int pages[], int totalFrames, int frames[])
{
    int i, j;
    int pageFaults = 0;

    for (i = 0; i < totalPages; i++)
    {
        int currentPage = pages[i];

        // Check if Page Already Exists
        bool found = false;
        int k;
        for (k = 0; k < totalFrames; k++)
        {
            if (frames[k] == currentPage)
            {
                found = true;
                break;
            }
        }
        // If Page Already Exists, Page Hit
        if (found == true)
        {
            int temp = frames[k];
            for(; k < totalFrames - 1; k++) // (This has to do something with current page, dk what's happening)
            {
                frames[k] = frames[k + 1];
            }
            frames[totalFrames - 1] = temp;
            for (j = 0; j < totalFrames; j++)
            {
                printf(""%d \t"", frames[j]);
            }
            printf(""Page Hit !\n"");
        }
        // If Not
        else
        {
            if(i < totalFrames)
            {
                frames[i] = currentPage;
            }
            else 
            {
                for(k = 0; k < totalFrames - 1; k++)
                {
                    frames[k] = frames[k + 1];
                }
                frames[totalFrames - 1] = currentPage;       
            }
            // Increment Page Faults
            pageFaults++;
            for (j = 0; j < totalFrames; j++)
            {
                printf(""%d \t"", frames[j]);
            }
            printf(""Page Fault !\n"");
        }
    }
    return pageFaults;
}

int main()
{
    int totalPages = 13;
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2};

    int totalFrames = 4;
    int frames[totalFrames];

    int i;
    for (i = 0; i < totalFrames; i++)
    {
        frames[i] = -1;
    }

    printf(""Total Number of Page Faults = %d\n"", LRU_algorithm(totalPages, pages, totalFrames, frames));
}"
XR1thET5,Turti Core,melzneni,Lua,Monday 14th of August 2023 03:52:50 PM CDT,"local RAW_ARGS = { ... }

local TYPE_FUNCTION = 1
local TYPE_VALUE = 2
local TYPE_VAR = 3
local TYPE_USER_FUNCTION = 4
local TYPE_DEFAULT_FUNCTION = 5
local TYPE_ARR = 6
local TYPE_ADD = 7
local TYPE_SUB = 8
local TYPE_CONSTANT = 9
local TYPE_DECLARATION = 10
local TYPE_CMP = 11
local TYPE_CONTROL_FLOW = 12
local TYPE_OR = 13
local TYPE_COMP = 14
local TYPE_AND = 15

local TYPE_COMP_EQUAL = 1

local TYPE_CF_WHILE = 1
local TYPE_CF_IF = 2
local TYPE_CF_FOR = 3

local storage

local defaultFunctions
local fctsSetStorageData
local initToContinue
local test

function readAll(file)
    local f = assert(io.open(file, ""rb""))
    local content = f:read(""*all"")
    f:close()
    return content
end

function splitText(source, letters)
    local parts = {}
    local akt = """";
    local qM1 = 0;
    local qM2 = 0;
    local b1 = 0;
    local b2 = 0;
    local b3 = 0;
    for i = 1, #source do
        local z = string.sub(source, i, i)
        if z == ""'"" and qM2 == 0 then
            qM1 = 1 - qM1;
        elseif z == ""\"""" and qM1 == 0 then
            qM2 = 1 - qM2;
        elseif qM1 == 0 and qM2 == 0 then
            if z == ""("" then
                b1 = b1 + 1
            elseif z == "")"" then
                b1 = b1 - 1
            elseif z == ""["" then
                b2 = b2 + 1
            elseif z == ""]"" then
                b2 = b2 - 1
            elseif z == ""{"" then
                b3 = b3 + 1
            elseif z == ""}"" then
                b3 = b3 - 1
            end
        end
        local split = false
        if b1 == 0 and b2 == 0 and b3 == 0 and qM1 == 0 and qM2 == 0 then
            for j = 1, #letters do
                if z == string.sub(letters, j, j) then
                    split = true
                    break
                end
            end
        end
        if split then
            if akt ~= """" then
                table.insert(parts, akt)
                akt = """"
            end
        else
            akt = akt .. z
        end
    end
    if akt ~= """" then
        table.insert(parts, akt)
    end
    return parts
end

function splitTextPattern(source, letters)
    local parts = {}
    local akt = """";
    local qM1 = 0;
    local qM2 = 0;
    local b1 = 0;
    local b2 = 0;
    local b3 = 0;
    local i = 1
    while (i <= #source) do
        local z = string.sub(source, i, i)
        if z == ""'"" and qM2 == 0 then
            qM1 = 1 - qM1;
        elseif z == ""\"""" and qM1 == 0 then
            qM2 = 1 - qM2;
        elseif qM1 == 0 and qM2 == 0 then
            if z == ""("" then
                b1 = b1 + 1
            elseif z == "")"" then
                b1 = b1 - 1
            elseif z == ""["" then
                b2 = b2 + 1
            elseif z == ""]"" then
                b2 = b2 - 1
            elseif z == ""{"" then
                b3 = b3 + 1
            elseif z == ""}"" then
                b3 = b3 - 1
            end
        end
        local split = false
        if b1 == 0 and b2 == 0 and b3 == 0 and qM1 == 0 and qM2 == 0 then
            split = true
            for j = 1, #letters do
                if string.sub(source, i + j - 1, i + j - 1) ~= string.sub(letters, j, j) then
                    split = false
                    break
                end
            end
        end
        if split then
            if akt ~= """" then
                table.insert(parts, akt)
                akt = """"
                i = i + #letters - 1
            end
        else
            akt = akt .. z
        end
        i = i + 1
    end
    if akt ~= """" then
        table.insert(parts, akt)
    end
    return parts
end

function removeLetters(source, letters)
    local target = """"
    for i = 1, #source do
        local valid = true
        for j = 1, #letters do
            if string.sub(source, i, i) == string.sub(letters, j, j) then
                valid = false
            end
        end
        if valid then
            target = target .. string.sub(source, i, i)
        end
    end
    return target
end

function readFileText(file)
    if test then
        return readAll(file)
    else
        local f = fs.open(file, ""r"")
        local text = f.readAll()
        f.close()
        return text
    end
end

function analyseCommands(source)
    local cmdsSource = splitText(source, "";"")
    local cmds = {}
    for i, v in ipairs(cmdsSource) do
        if v ~= """" then
            if string.sub(v, 1, 2) ~= ""//"" then
                table.insert(cmds, loadCommand(v))
            end
        end
    end
    return cmds
end

function nextCloseIndex(source, chOpen, chClose)
    local a = 0;
    local qM1 = 0;
    local qM2 = 0
    for i = 1, #source do
        local z = string.sub(source, i, i)
        if z == ""\"""" and qM2 == 0 then
            qM1 = 1 - qM1
        elseif z == ""'"" and qM1 == 0 then
            qM2 = 1 - qM2
        elseif z == chOpen and qM1 == 0 and qM2 == 0 then
            a = a + 1
        elseif z == chClose and qM1 == 0 and qM2 == 0 then
            a = a - 1
            if a == 0 then
                return i
            end
        end
    end
    return -1
end

function loadCommand(source)
    if string.find(source, ""%("") ~= nil and string.find(source, ""){"") ~= nil then
        local ind = string.find(source, ""%("")
        local name = string.sub(source, 1, ind - 1)
        if name == ""while"" then
            local ind1 = string.find(source, ""){"")
            local body = analyseCommands(string.sub(source, ind1 + 2, #source - 1))
            local cmdCondition = loadCommand(string.sub(source, ind + 1, ind1 - 1))
            return { type = TYPE_CONTROL_FLOW, cond = cmdCondition, body = body, id = newCFId(), typeCF = TYPE_CF_WHILE }
        elseif name == ""for"" then
            local ind1 = string.find(source, ""){"")
            local body = analyseCommands(string.sub(source, ind1 + 2, #source - 1))
            local headPts = splitText(string.sub(source, ind + 1, ind1 - 1), "";"")
            if #headPts ~= 3 then
                error(""invalid for-head: "" .. string.sub(source, ind + 1, ind1 - 1))
            end
            local firstCommand = loadCommand(headPts[1])
            local secondCondition = loadCommand(headPts[2])
            local thirdCommand = loadCommand(headPts[3])
            return { type = TYPE_CONTROL_FLOW, first = firstCommand, second = secondCondition, third = thirdCommand, body = body, id = newCFId(), typeCF = TYPE_CF_FOR }
        elseif name == ""if"" then
            local pts = splitText(source, ""else"")
            local data = { type = TYPE_CONTROL_FLOW, typeCF = TYPE_CF_IF, id = newCFId(), ifCmdBlocks = {} }

            for i = 1, #pts do
                local pt = pts[i]
                local ind = string.find(pt, ""%("")
                local ind1 = string.find(pt, ""{"")
                local body = analyseCommands(string.sub(pt, ind1 + 1, #pt - 1))
                if ind1 == 1 then
                    if i ~= #pts then
                        error(""'else' statement needs to be at end of 'if'-block (source: "" .. source .. "")"")
                    end
                    table.insert(data.ifCmdBlocks, { body = body })
                else
                    local name = string.sub(pt, 1, ind - 1)
                    if name ~= ""if"" then
                        error(""invalid keyword: [else]"" .. name)
                    end
                    local cond = loadCommand(string.sub(pt, ind + 1, ind1 - 2))
                    table.insert(data.ifCmdBlocks, { body = body, cond = cond })
                end
            end
            return data
        else
            error(""unknown keyword '"" .. name .. ""'"")
        end
    end

    local ptsSources = splitTextPattern(source, ""&&"")
    if #ptsSources > 1 then
        local values = {};
        for i = 1, #ptsSources do
            values[i] = loadCommand(ptsSources[i])
        end
        return { type = TYPE_AND, values = values }
    end

    local ptsSources = splitTextPattern(source, ""||"")
    if #ptsSources > 1 then
        local values = {};
        for i = 1, #ptsSources do
            values[i] = loadCommand(ptsSources[i])
        end
        return { type = TYPE_OR, values = values }
    end
    for i, ch in ipairs({ "">="", ""<="", ""<"", "">"", ""=="", ""!="" }) do
        local ptsSources = splitTextPattern(source, ch)
        if #ptsSources > 1 then
            if #ptsSources > 2 then
                error(""only 2 arguments allowed for '"" .. ch .. ""'"")
            end
            local pts = {}
            for i, v in ipairs(ptsSources) do
                table.insert(pts, loadCommand(v))
            end
            return { type = TYPE_CMP, ch = ch, pts = pts }
        end
    end

    local ptsSources = splitText(source, ""="")
    if #ptsSources > 1 then
        local name = ptsSources[1]
        if #ptsSources > 2 then
            error(""there is only one '=' allowed in a declaration"")
        end
        if string.match(name, ""%$[A-Za-z_][A-Za-z0-9_]*%$"") == name or
                string.match(name, ""[A-Za-z_][A-Za-z0-9_]*"") == name then
            return { type = TYPE_DECLARATION, name = name, value = loadCommand(ptsSources[2]) }
        else
            error(""invalid declaration variable: "" .. name)
        end
    end

    local ptsSources = splitText(source, ""+"")
    if #ptsSources > 1 then
        local pts = {}
        for i, v in ipairs(ptsSources) do
            table.insert(pts, loadCommand(v))
        end
        return { type = TYPE_ADD, pts = pts }
    end
    local ptsSources = splitText(source, ""-"")
    if #ptsSources > 1 then
        local pts = {}
        for i, v in ipairs(ptsSources) do
            table.insert(pts, loadCommand(v))
        end
        return { type = TYPE_SUB, pts = pts }
    end

    local i = string.find(source, ""%("")
    if i ~= nil and nextCloseIndex(source, ""("", "")"") == #source then
        local funcName = string.sub(source, 1, i - 1)
        if string.match(funcName, ""[a-zA-Z_][a-zA-Z_0-9]*"") ~= funcName then
            error(""invalid funcName: "" .. funcName)
        end
        local pars = {}
        local parSources = splitText(string.sub(source, i + 1, -2), "","")
        for i, par in ipairs(parSources) do
            table.insert(pars, loadCommand(par))
        end
        return { type = TYPE_FUNCTION, name = funcName, pars = pars }
    else
        if tonumber(source) ~= nil then
            return { type = TYPE_VALUE, value = tonumber(source) }
        elseif string.match(source, ""%$[A-Za-z_][A-Za-z0-9_]*%$"") == source then
            local key = string.sub(source, 2, #source - 1)
            return { type = TYPE_CONSTANT, key = key }
        elseif source == ""true"" or source == ""false"" then
            return { type = TYPE_VALUE, value = source == ""true"" }
        elseif string.match(source, ""[A-Za-z_][A-Za-z0-9_]*"") == source then
            return { type = TYPE_VAR, name = source }
        elseif string.sub(source, 1, 1) == ""["" and string.sub(source, #source) == ""]"" then
            local parts = splitText(string.sub(source, 2, #source - 1), "","")
            local vars = {}
            for i, v in ipairs(parts) do
                table.insert(vars, loadCommand(v))
            end
            return { type = TYPE_ARR, vars = vars }
        elseif string.sub(source, 1, 1) == ""\"""" and string.sub(source, #source) == ""\"""" then
            return { type = TYPE_VALUE, value = string.sub(source, 2, #source - 1) }
        elseif string.sub(source, 1, 1) == ""'"" and string.sub(source, #source) == ""'"" then
            return { type = TYPE_VALUE, value = string.sub(source, 2, #source - 1) }
        else
            error(""unknown value: "" .. source)
        end
    end
    return nil
end

function loadValue(source)
    return loadValueFromCommand(loadCommand(source))
end

function loadValueFromCommand(command)
    if command.type == TYPE_ARR then
        local result = {}
        for _, v in pairs(command.vars) do
            table.insert(result, loadValueFromCommand(v))
        end
        return result
    elseif command.type == TYPE_VALUE then
        return command.value
    else
        printTable(command)
        error(""unknown command type: "" .. command.type)
    end
end

local currentCFId = 0
function newCFId()
    local id = currentCFId
    currentCFId = currentCFId + 1
    return id
end

function analyseStack(source)
    local values = {}
    for i, v in ipairs(splitText(source, "","")) do
        if v ~= """" then
            table.insert(values, tonumber(v))
        end
    end
    return values
end

function combineArr(table1, table2)
    local table = {}
    for i = 1, #table1 do
        table[i] = table1[i]
    end
    for i = 1, #table2 do
        table[i + #table1] = table2[i]
    end
    return table
end

function getTableFromSaveText(source)
    local tableSources = splitText(source, "";"")
    local tables = {}
    for i = 1, #tableSources do
        table.insert(tables, {})
    end
    for i, v in ipairs(tableSources) do
        local tbl = tables[i]
        getTableFromSaveTextInd(tbl, v, tables)
    end

    return tables[1]
end

function getTableFromSaveTextInd(tbl, tblSource, tables)
    if string.sub(tblSource, 1, 1) ~= ""{"" or string.sub(tblSource, #tblSource) ~= ""}"" then
        error(""invalid source (braces arround table): "" .. tblSource)
    end
    local pts = splitText(string.sub(tblSource, 2, #tblSource - 1), "","")
    for i, pt in ipairs(pts) do
        local i = string.find(pt, ""="")
        local vKey = getValueFromSaveText(string.sub(pt, 1, i - 1), tables)
        local vValue = getValueFromSaveText(string.sub(pt, i + 1), tables)
        tbl[vKey] = vValue
    end
end

function getValueFromSaveText(source, tables)
    if string.sub(source, 1, 1) == ""\"""" and string.sub(source, #source) == ""\"""" then
        return string.sub(source, 2, #source - 1)
    elseif tonumber(source) ~= nil then
        return tonumber(source)
    elseif string.sub(source, 1, 4) == ""tbl:"" then
        return tables[tonumber(string.sub(source, 5))]
    elseif source == ""false"" then
        return false
    elseif source == ""true"" then
        return true
    else
        error(""invalid source (getValueAnalysis): "" .. source)
    end
end

function getTableSaveText(sourceTable)
    local alreadyUsed = {}
    local sources = {}
    getTableSaveTextInd(sourceTable, alreadyUsed, sources)
    local txt = """"
    for i, v in pairs(sources) do
        txt = txt .. v .. "";""
    end
    return txt
end

function getTableSaveTextInd(sourceTable, alreadyUsed, sources)
    local index
    for i, v in ipairs(alreadyUsed) do
        if v == sourceTable then
            index = i
            break
        end
    end

    if index ~= nil then
        return ""tbl:"" .. index
    else
        table.insert(alreadyUsed, sourceTable)
        local sourceString = """"
        local ind = #alreadyUsed
        for k, v in pairs(sourceTable) do
            sourceString = sourceString .. getSaveValueString(k, alreadyUsed, sources) .. ""="" .. getSaveValueString(v, alreadyUsed, sources) .. "",""
        end
        sources[ind] = ""{"" .. sourceString .. ""}""
        return ""tbl:"" .. ind
    end
end

function getSaveValueString(obj, alreadyUsed, sources)
    local t = type(obj)
    if t == ""string"" then
        return ""\"""" .. obj .. ""\""""
    elseif t == ""number"" then
        return obj
    elseif t == ""table"" then
        return getTableSaveTextInd(obj, alreadyUsed, sources)
    elseif t == ""boolean"" then
        if obj then
            return ""true""
        else
            return ""false""
        end
    else
        error(""unknown type: "" .. t)
    end
end

function finished()
    deleteFile(storage.stackFileName)
    deleteFile(storage.dataFileName)
end

function deleteFile(fileName)
    if test then
        os.remove(fileName)
    else
        shell.run(""delete"", fileName)
    end
end

function save()
    if storage.dfData.save then
        local txt = getTableSaveText(storage)
        writeToFile(storage.stackFileName .. ""1"", txt)
        writeToFile(storage.stackFileName, txt)
    end
end

function writeToFile(fileName, data)
    if test then
        local f = io.open(fileName, ""w"")
        local oldOut = io.output()
        io.output(f)
        io.write(data)
        io.close(f)
        io.output(oldOut)
    else
        local f = fs.open(fileName, ""w"")
        f.write(data)
        f.close()
    end
end

function fileExists(fileName)
    if test then
        local f = io.open(fileName)
        if f ~= nil then
            io.close(f)
            return true
        end
        return false
    else
        return fs.exists(fileName)
    end
end

function tryLoadStorage(fileName, stackFileName, dataFileName, currentFileData)
    print(stackFileName)
    if fileExists(stackFileName) then
        if isSameFileData(currentFileData, readFileText(dataFileName)) then
            print(""loading storage"")
            local data
            local state, msg = pcall(function()
                data = getTableFromSaveText(readFileText(stackFileName))
            end)
            if state then
                return true, data
            else
                return true, getTableFromSaveText(readFileText(stackFileName .. ""1""))
            end
        else
            print(""source file has changed, restarting program"")
            deleteFile(stackFileName)
            deleteFile(dataFileName)
        end
    end

    return false, {
        stack = nil,
        fileName = fileName,
        stackFileName = stackFileName,
        dataFileName = dataFileName,
        dfData = { save = true },
        diedLast = 0,
        constants = {}
    }
end

function isSameFileData(data1, data2)

    local pts1 = getLengthFormatedParts(data1)
    local pts2 = getLengthFormatedParts(data2)

    while #pts1 > 0 do
        local data = pts1[1]
        local success = false
        for j, data2 in ipairs(pts2) do
            if data2 == data then
                table.remove(pts1, 1)
                table.remove(pts2, j)
                success = true
                break
            end
        end
        if not success then
            return false
        end
    end
    return #pts2 == 0
end

function getLengthFormatedParts(data)
    local pts = {}
    while #data > 0 do
        local i = string.find(data, ""|"")
        local len = tonumber(string.sub(data, 1, i - 1))
        data = string.sub(data, i + 1)
        table.insert(pts, string.sub(data, 1, len))
        data = string.sub(data, len + 1)
    end
    return pts
end

function loadProgram(file, stackFile, dataFile, cFCount)

    local source = readFileText(file)
    source = string.gsub(source, ""/%*[^%*]*%*/"", """")
    source = string.gsub(source, ""//[^\n]*"", """")

    source = removeLetters(source, ""\n\r\t "")
    local methods = {}
    for i, v in ipairs(splitText(source, "";"")) do
        local m = string.find(v, "":{"")
        local name = string.sub(v, 1, m - 1)
        local fct = {}
        fct.pars = {}
        if string.find(name, ""%("") ~= nil and string.sub(name, #name, #name) == "")"" then
            local i = string.find(name, ""%("")
            local parSource = string.sub(name, i + 1, -2)
            name = string.sub(name, 1, i - 1)
            local parNames = splitText(parSource, "","")
            for i, n in ipairs(parNames) do
                if string.match(n, ""[A-Za-z_][A-Za-z0-9_]*"") ~= n then
                    error(""invalid parameter-name: "" .. n)
                end
                table.insert(fct.pars, n)
            end
        end
        if string.match(name, ""[A-Za-z_][A-Za-z0-9_]*"") ~= name then
            error(""invalid function-name: "" .. name)
        end
        local srcCommands = string.sub(v, m + 2, -2)
        fct.cmds = analyseCommands(srcCommands)
        methods[name] = fct
    end

    local validMethods = {}
    for name, fct in pairs(methods) do
        validMethods[name] = { type = TYPE_USER_FUNCTION, pars = { #fct.pars }, name = name, fct = fct, cmds = fct.cmds }
    end
    local allMethods = {}
    merge(validMethods, allMethods)
    merge(defaultFunctions, allMethods)
    checkMethodValidity(allMethods)

    if methods[""main""] == nil then
        error(""function 'main' needs to be defined in commands-source"")
    end
    if #methods[""main""][""pars""] ~= 0 then
        error(""function 'main' doesn't take any arguments ("" .. #methods[""main""][""pars""] .. "" given)"")
    end

    local currentFileData = getFileData(methods)

    local success
    success, storage = tryLoadStorage(file, stackFile, dataFile, currentFileData)
    storage.dfData.save = true

    for key, fct in pairs(fctsSetStorageData) do
        if not storage.dfData[key] then
            storage.dfData[key] = {}
        end
        fct(storage.dfData[key], save)
    end
    if success then
        initToContinue()
    end

    writeToFile(dataFile, currentFileData)

    if storage.stack == nil then
        local stack = {}
        table.insert(stack, { name = ""main"", offset = 1, executed = false, localVars = { {} }, cFStack = {} })
        if methods[""init""] ~= nil then
            if #methods[""init""][""pars""] ~= 0 then
                error(""function 'init' doesn't take any arguments ("" .. #methods[""init""][""pars""] .. "" given)"")
            end
            table.insert(stack, { name = ""init"", offset = 1, executed = false, localVars = { {} }, cFStack = {} })
        end
        storage.stack = stack
    else
        if methods[""onRestart""] ~= nil then
            if #methods[""onRestart""][""pars""] ~= 0 then
                error(""function 'onRestart' doesn't take any arguments ("" .. #methods[""onRestart""][""pars""] .. "" given)"")
            end
            table.insert(storage.stack, { name = ""onRestart"", offset = 1, executed = false, localVars = { {} }, cFStack = {} })
        end
    end

    save()

    execute(methods, true, cFCount)

    finished()
end

function getFileData(methods)
    local data = """"
    for methodName, v in pairs(methods) do
        if countKeys(v) > 2 then
            error(""fail"")
        end
        local pars = v.pars
        local cmds = v.cmds
        local methodString = methodName .. ""(""
        for i, par in ipairs(pars) do
            if i ~= 1 then
                methodString = methodString .. "",""
            end
            methodString = methodString .. par
        end
        methodString = methodString .. "")|"" .. getFileDataCmds(cmds)
        data = data .. #methodString .. ""|"" .. methodString
    end
    return data
end

function getFileDataCmds(cmds)
    local txt = """"
    for i, cmd in ipairs(cmds) do
        if i ~= 1 then
            txt = txt .. "";""
        end
        txt = txt .. getFileDataCmd(cmd)
    end
    return txt
end

function getFileDataCmd(cmd)
    if cmd.type == TYPE_VALUE then
        if cmd.value == ""nil"" then
            return ""nil""
        elseif type(cmd.value) == ""string"" then
            return ""\"""" .. cmd.value .. ""\""""
        elseif type(cmd.value) == ""boolean"" then
            return ""\"""" .. ((cmd.value and ""true"") or ""false"") .. ""\""""
        else
            return """" .. cmd.value
        end
        --elseif cmd.type == TYPE_DECLARATION then

    elseif cmd.type == TYPE_FUNCTION then
        local txtPars = """"
        for i, par in ipairs(cmd.pars) do
            if i ~= 1 then
                txtPars = txtPars .. "",""
            end
            txtPars = txtPars .. getFileDataCmd(par)
        end
        return cmd.name .. ""("" .. txtPars .. "")""
    elseif cmd.type == TYPE_CONSTANT then
        return ""$"" .. cmd.key .. ""$""
    elseif cmd.type == TYPE_ARR then
        local txt = """"
        for i, v in ipairs(cmd.vars) do
            if i ~= 1 then
                txt = txt .. "",""
            end
            txt = txt .. getFileDataCmd(v)
        end
        return ""["" .. txt .. ""]""
    elseif cmd.type == TYPE_VAR then
        return cmd.name
    elseif cmd.type == TYPE_ADD then
        local txt = """"
        for i, v in ipairs(cmd.pts) do
            if i ~= 1 then
                txt = txt .. ""+""
            end
            txt = txt .. getFileDataCmd(v)
        end
        return txt
    elseif cmd.type == TYPE_SUB then
        local txt = """"
        for i, v in ipairs(cmd.pts) do
            if i ~= 1 then
                txt = txt .. ""-""
            end
            if v.type == TYPE_ADD then
                txt = txt .. ""("" .. getFileDataCmd(v) .. "")""
            else
                txt = txt .. getFileDataCmd(v)
            end
        end
        return txt
    elseif cmd.type == TYPE_DECLARATION then
        return cmd.name .. ""="" .. getFileDataCmd(cmd.value)
    elseif cmd.type == TYPE_CONTROL_FLOW then
        if cmd.typeCF == TYPE_CF_WHILE then
            return ""while("" .. getFileDataCmd(cmd.cond) .. ""){"" .. getFileDataCmds(cmd.body) .. ""}""
        elseif cmd.typeCF == TYPE_CF_FOR then
            return ""for("" .. getFileDataCmd(cmd.first) .. "";"" .. getFileDataCmd(cmd.second) .. "";"" .. getFileDataCmd(cmd.third) .. ""){"" .. getFileDataCmds(cmd.body) .. ""}""
        elseif cmd.typeCF == TYPE_CF_IF then
            local txt = """";
            for i, block in pairs(cmd.ifCmdBlocks) do
                if i ~= 1 then
                    txt = txt .. ""else""
                end
                if block.cond ~= nil then
                    txt = txt .. ""if("" .. getFileDataCmd(block.cond) .. "")""
                end
                txt = txt .. ""{"" .. getFileDataCmds(block.body) .. ""}""
            end
            return txt
        else
            error(""fail: "" .. cmd.typeCF)
        end
    elseif cmd.type == TYPE_CMP then
        return getFileDataCmd(cmd.pts[1]) .. cmd.ch .. getFileDataCmd(cmd.pts[2])
    elseif cmd.type == TYPE_OR then
        local txt = """"
        for i = 1, #cmd.values do
            if txt ~= """" then
                txt = txt .. ""||""
            end
            txt = txt .. getFileDataCmd(cmd.values[i])
        end
        return txt
    elseif cmd.type == TYPE_AND then
        local txt = """"
        for i = 1, #cmd.values do
            if txt ~= """" then
                txt = txt .. ""&&""
            end
            txt = txt .. getFileDataCmd(cmd.values[i])
        end
        return txt
    else
        printKeys(cmd)
        error(""unknown type: "" .. cmd.type)
    end
end

function printKeys(t)
    local keys = """"
    local c = 0
    for i, v in pairs(t) do
        keys = keys .. ((c ~= 0 and "","") or """") .. i
        c = 1
    end
    print(keys)
end

function countKeys(t)
    local c = 0
    for i, v in pairs(t) do
        c = c + 1
    end
    return c
end

function execute(methods, isStartThread, cFCount)
    local methodName = storage.stack[#storage.stack].name
    local methodOffset = storage.stack[#storage.stack].offset
    local methodExecuted = storage.stack[#storage.stack].executed --TODO check pos or anything else when executed=false
    local currentMethod = methods[methodName]
    local cmds = currentMethod.cmds
    local localVars = storage.stack[#storage.stack].localVars

    if methodExecuted then
        storage.stack[#storage.stack].offset = storage.stack[#storage.stack].offset + 1
    end
    executeCommands(storage.stack[#storage.stack], cmds, methods, localVars, cFCount)

    if isStartThread and #storage.stack > 1 then
        table.remove(storage.stack)
        save()
        execute(methods, true, cFCount)
    end
end

function executeCommand(cmd, methods, localVars, cFCount)
    if cmd.type == TYPE_FUNCTION then
        local pars = {}
        for i, p in pairs(cmd.pars) do
            table.insert(pars, executeGetValue(p, localVars, methods, cFCount))
        end
        --default function
        if defaultFunctions[cmd.name] then
            return defaultFunctions[cmd.name].fct(table.unpack(pars))
        end

        --user function
        local method = methods[cmd.name]
        local newLocalVars = { {} }
        for i, p in pairs(pars) do
            newLocalVars[1][method.pars[i]] = p
        end
        table.insert(storage.stack, { name = cmd.name, offset = 1, executed = false, localVars = newLocalVars, cFStack = {} })
        save()
        execute(methods, false, cFCount)
        table.remove(storage.stack)
        save()
    elseif cmd.type == TYPE_DECLARATION then
        local name = cmd.name
        if string.sub(name, 1, 1) == ""$"" then
            local v = executeGetValue(cmd.value, localVars, methods, cFCount)
            name = string.sub(name, 2, #name - 1)
            if storage.constants[name] ~= nil then
                error(""constant '"" + name + ""' is already defined"")
            end
            storage.constants[name] = v
        else
            local v = executeGetValue(cmd.value, localVars, methods, cFCount)

            for i = 1, cFCount do
                for n, v1 in pairs(localVars[i]) do
                    if n == name then
                        localVars[i][name] = v
                        return
                    end
                end
            end
            if not localVars[cFCount + 1] then
                localVars[cFCount + 1] = {}
            end
            localVars[cFCount + 1][name] = v
        end
    elseif cmd.type == TYPE_CONTROL_FLOW then
        if cmd.typeCF == TYPE_CF_IF then
            local id = cmd.id
            local data
            if #storage.stack[#storage.stack].cFStack <= cFCount then
                data = { cmd = cmd, condExecuted = false, offset = 1, ifOffset = 1, executed = false, condResult = false }
                table.insert(localVars, {})
                table.insert(storage.stack[#storage.stack].cFStack, data)
                save()
            else
                data = storage.stack[#storage.stack].cFStack[cFCount + 1]
                if data.cmd.id ~= cmd.id then
                    print(""fail"")
                end
            end
            --print(cFCount, #storage.stack[#storage.stack].cFStack)
            for i = data.ifOffset, #cmd.ifCmdBlocks do
                local cond = cmd.ifCmdBlocks[i].cond
                local body = cmd.ifCmdBlocks[i].body

                if not data.condExecuted then
                    local v
                    if cond ~= nil then
                        v = executeGetValue(cond, localVars, methods, cFCount)
                        if v == nil or type(v) ~= ""boolean"" then
                            error(""type of condition needs to be 'boolean' (type '"" .. type(v) .. ""' given)"")
                        end
                    else
                        v = true
                    end
                    data.condExecuted = true
                    data.condResult = v
                    save()
                end

                if data.condResult then
                    if data.executed then
                        data.offset = data.offset + 1
                    end
                    save()
                    executeCommands(data, body, methods, localVars, cFCount + 1)
                end

                data.ifOffset = i + 1
                data.condExecuted = false
                data.executed = false
                data.offset = 1
                save()

                if data.condResult then
                    break
                end
            end

            table.remove(storage.stack[#storage.stack].cFStack)
            table.remove(localVars)
        elseif cmd.typeCF == TYPE_CF_FOR then
            local id = cmd.id
            local data
            if #storage.stack[#storage.stack].cFStack <= cFCount then
                data = { cmd = cmd, firstExecuted = false, offset = 1, condExecuted = false, lastExecuted = false, condResult = false }
                table.insert(localVars, {})
                table.insert(storage.stack[#storage.stack].cFStack, data)
                save()
            else
                data = storage.stack[#storage.stack].cFStack[cFCount + 1]
                if data.cmd.id ~= cmd.id then
                    print(""fail"")
                end
            end
            if not data.firstExecuted then
                executeCommand(data.cmd.first, methods, localVars, cFCount - 1)
                data.firstExecuted = true
                save()
            end
            while true do
                if not data.condExecuted then
                    local v = executeGetValue(data.cmd.second, localVars, methods, cFCount)
                    if v == nil or type(v) ~= ""boolean"" then
                        error(""type of condition needs to be 'boolean' (type '"" .. type(v) .. ""' given)"")
                    end
                    data.condExecuted = true
                    data.condResult = v
                    save()
                    if not v then
                        break
                    end
                end
                if data.executed then
                    data.offset = data.offset + 1
                    save()
                end

                executeCommands(data, data.cmd.body, methods, localVars, cFCount + 1)

                if not data.lastExecuted then
                    executeCommand(data.cmd.third, methods, localVars, cFCount)
                    data.lastExecuted = true
                    save()
                end

                data.lastExecuted = false
                data.condExecuted = false
                data.executed = false
                data.offset = 1
                save()
            end
            table.remove(storage.stack[#storage.stack].cFStack)
            table.remove(localVars)
        elseif cmd.typeCF == TYPE_CF_WHILE then
            local id = cmd.id
            local data
            if #storage.stack[#storage.stack].cFStack <= cFCount then
                data = { cmd = cmd, condExecuted = false, offset = 1, executed = false, condResult = false }
                table.insert(localVars, {})
                table.insert(storage.stack[#storage.stack].cFStack, data)
                save()
            else
                data = storage.stack[#storage.stack].cFStack[cFCount + 1]
                if data.cmd.id ~= cmd.id then
                    print(""fail"")
                end
            end

            while true do
                if not data.condExecuted then
                    local v = executeGetValue(data.cmd.cond, localVars, methods, cFCount)
                    if v == nil or type(v) ~= ""boolean"" then
                        error(""type of condition needs to be 'boolean' (type '"" .. type(v) .. ""' given)"")
                    end
                    data.condExecuted = true
                    data.condResult = v
                    save()
                    if not v then
                        break
                    end
                end
                if data.executed then
                    data.offset = data.offset + 1
                end
                save()
                executeCommands(data, data.cmd.body, methods, localVars, cFCount + 1)

                data.condExecuted = false
                data.executed = false
                data.offset = 1
                save()
            end

            table.remove(storage.stack[#storage.stack].cFStack)
            table.remove(localVars)
        else
            error(""unknown typeCF: "" .. cmd.typeCF .. """")
        end
    else
        error(""unknown type: "" .. cmd.type)
    end
end

function executeCommands(data, cmds, methods, localVars, cFCount)
    for i = data.offset, #cmds do
        local cmd = cmds[i]
        data.offset = i
        data.executed = false
        if cmd.type == TYPE_FUNCTION then
            local isDefault = false
            for i, f in pairs(defaultFunctions) do
                if f.name == cmd.name then
                    isDefault = true
                end
            end
            data.executed = not isDefault
        end

        --data.executed = cmd.type == TYPE_FUNCTION
        save()
        executeCommand(cmd, methods, localVars, cFCount)
        data.executed = true
        save()
    end
end

function executeGetValue(value, localVars, methods, cFCount)
    if value.type == TYPE_VALUE then
        return value.value
    elseif value.type == TYPE_ARR then
        local vars = {}
        for i = 1, #value.vars do
            vars[i] = executeGetValue(value.vars[i], localVars, methods, cFCount);
        end
        return vars
    elseif value.type == TYPE_VAR then
        for i = 1, #localVars do
            for n, v in pairs(localVars[#localVars - i + 1]) do
                if value.name == n then
                    return v
                end
            end
        end
        error(""var '"" .. value.name .. ""' isn't defined yet"")
    elseif value.type == TYPE_FUNCTION then
        return executeCommand(value, methods, localVars, cFCount)
    elseif value.type == TYPE_ADD then
        local v = executeGetValue(value.pts[1], localVars, methods, cFCount)
        for i = 2, #value.pts do
            local v1 = executeGetValue(value.pts[i], localVars, methods, cFCount)
            if type(v) == ""string"" or type(v1) == ""string"" then
                v = v .. v1
            else
                v = v + v1
            end
        end
        return v
    elseif value.type == TYPE_SUB then
        local v = executeGetValue(value.pts[1], localVars, methods, cFCount)
        for i = 2, #value.pts do
            v = v - executeGetValue(value.pts[i], localVars, methods, cFCount)
        end
        return v
    elseif value.type == TYPE_CONSTANT then
        for k, val in pairs(storage.constants) do
            if (k == value.key) then
                return val
            end
        end
        error(""constant '"" .. value.key .. ""' isn't defined yet"")
    elseif value.type == TYPE_CMP then
        local v = executeGetValue(value.pts[1], localVars, methods, cFCount)
        local v1 = executeGetValue(value.pts[2], localVars, methods, cFCount)

        if value.ch == "">"" then
            return v > v1
        elseif value.ch == ""<"" then
            return v < v1
        elseif value.ch == "">="" then
            return v >= v1
        elseif value.ch == ""<="" then
            return v <= v1
        elseif value.ch == ""=="" then
            return v == v1
        elseif value.ch == ""!="" then
            return v ~= v1
        else
            error(""unknown char: '"" .. value.ch .. ""'"")
        end
    elseif value.type == TYPE_OR then
        for i = 1, #value.values do
            if executeGetValue(value.values[i], localVars, methods, cFCount) then
                return true
            end
        end
        return false
    elseif value.type == TYPE_AND then
        for i = 1, #value.values do
            if not executeGetValue(value.values[i], localVars, methods, cFCount) then
                return false
            end
        end
        return true
    elseif value.type == TYPE_COMP then
        if value.mode == TYPE_COMP_EQUAL then
            --printTable(value.values[1])
            return executeGetValue(value.values[1], localVars, methods, cFCount) == executeGetValue(value.values[2], localVars, methods, cFCount)
        else
            error(""unsupported mode: "" .. value.mode)
        end
    else
        error(""unknown type: "" .. value.type)
    end
end

function checkMethodValidity(methods)
    local definedNames = {}
    for name, v in pairs(methods) do
        definedNames[name] = v.pars
    end
    for i, v in pairs(methods) do
        if v.type == TYPE_USER_FUNCTION then
            checkCmdsValidity(v.cmds, definedNames)
        end
    end
end

function checkCmdsValidity(cmds, definedNames)
    for i, cmd in pairs(cmds) do
        if cmd.type == TYPE_FUNCTION then
            if definedNames[cmd.name] == nil then
                error(""function '"" .. cmd.name .. ""' isn't defined"")
            end
            local args = definedNames[cmd.name]
            local cStart = args[1]
            local cEnd = cStart
            if #args > 1 then
                cEnd = args[2]
            end
            local count = #cmd.pars
            if count < cStart or count > cEnd then
                error(""function '"" .. cmd.name .. ""' takes between "" .. cStart .. "" and "" .. cEnd .. "" argument(s) ("" .. count .. "" given)"")
            end
            checkCmdsValidity(cmd.pars, definedNames)
        elseif cmd.type == TYPE_CONTROL_FLOW then
            if cmd.typeCF == TYPE_CF_WHILE then
                checkCmdsValidity(cmd.body, definedNames)
            elseif cmd.typeCF == TYPE_CF_FOR then
                checkCmdsValidity({ cmd.first, cmd.second, cmd.third }, definedNames)
                checkCmdsValidity(cmd.body, definedNames)
            elseif cmd.typeCF == TYPE_CF_IF then
                for i, block in ipairs(cmd.ifCmdBlocks) do
                    if cmd.cond ~= nil then
                        checkCmdsValidity({ block.cond }, definedNames)
                    end
                    checkCmdsValidity(block.body, definedNames)
                end
            else
                error(""unknown typeCF: "" .. cmd.typeCF)
            end
        elseif cmd.type == TYPE_ARR then
            checkCmdsValidity(cmd.vars, definedNames)
        elseif cmd.type == TYPE_ADD or cmd.type == TYPE_SUB then
            checkCmdsValidity(cmd.pts, definedNames)
        elseif cmd.type == TYPE_DECLARATION then
            checkCmdsValidity({ cmd.value }, definedNames)
        elseif cmd.type ~= TYPE_CONSTANT and cmd.type ~= TYPE_VAR and cmd.type ~= TYPE_VALUE and cmd.type ~= TYPE_CMP then
            printKeys(cmd)
            error(""unknown type: "" .. cmd.type)
        end
    end
end

function printTable(tbl)
    if tbl == nil then
        print(""nil"")
        return
    end
    io.write(""["")
    printTableIndex(tbl, """", {})
    print(""]"")
end

function printTableIndex(tbl, before, alreadyUsed)
    local first = true
    for i, v in pairs(tbl) do
        if first then
            first = false
        else
            io.write("", "")
        end

        if type(v) == ""table"" then
            if tableContainsValue(alreadyUsed, v) then
                io.write(before .. i .. "": "");
                io.write(""already used"")
            else
                io.write(before .. i .. "": ["");
                table.insert(alreadyUsed, v)
                printTableIndex(v, before, alreadyUsed)
                io.write(before .. ""]"")
            end
        else
            io.write(before .. i .. "": "", tostring(v));
        end
    end
end

function tableContainsValue(table, value)
    for i, v in pairs(table) do
        if v == value then
            return true
        end
    end
    return false
end

function loadLibrary(name)
    local data = require(name)
    if data.name then
        print(""importing library '"" .. data.name .. ""'"")
    else
        print(""importing unnamed library"")
    end
    if not data.api then
        error(""library '"" .. name .. ""' doesn't define field 'api'"")
    end
    local api = data.api
    local libraryDefinition = {}
    for fName, definition in pairs(api) do
        if type(definition) == ""function"" then
            libraryDefinition[fName] = {
                type = TYPE_DEFAULT_FUNCTION,
                pars = { debug.getinfo(definition).nparams },
                fct = definition
            }
        else
            if not definition.fct then
                error(""field 'fct' isn't defined in api>"" .. fName .. "" of library '"" .. name .. ""'"")
            end
            libraryDefinition[fName] = {
                type = TYPE_DEFAULT_FUNCTION,
                pars = definition.pars or { debug.getinfo(definition.fct).nparams },
                fct = definition.fct
            }
        end
    end

    if data.onInitStorage then
        fctsSetStorageData['lib_' .. name] = data.onInitStorage
    end

    return libraryDefinition
end

function merge(source, target)
    for k, v in pairs(source) do
        target[k] = v
    end
end

local args = {}
local kwargs = {}

for i, v in ipairs(RAW_ARGS) do
    local pts = splitText(v, ""="")
    if #pts == 1 then
        table.insert(args, pts[1])
    else
        kwargs[pts[1]] = pts[2]
    end
end

test = false
if kwargs[""test""] == ""true"" then
    test = true
end

if test then
    local data = require(""std"")
    data[1](true, {})
    fctsSetStorageData = { df = data[2] }
    defaultFunctions = data[3]
    initToContinue = data[4]
else
    os.loadAPI(""std"")
    std.setTest(false, { shell = shell, turtle = turtle })
    defaultFunctions = std.getDefaultFunctions()
    fctsSetStorageData = { df = std.setStorageData }
    initToContinue = std.initToContinue
end

if kwargs[""libraries""] ~= nil then
    for _, libraryName in ipairs(loadValue(kwargs[""libraries""])) do
        merge(loadLibrary(libraryName), defaultFunctions)
    end
end

local fileName = args[1]
local stackFileName = fileName .. "".stack""
local dataFileName = fileName .. "".id""
if args[3] ~= nil then
    if args[3] == ""restart"" then
        print(""restart"")
        if test then
            os.remove(stackFileName)
        else
            fs.delete(stackFileName)
        end
    else
        error(""unknown second argument: '"" .. args[3] .. ""'"")
    end
end

while true do
    local status, err = xpcall(loadProgram, debug.traceback, fileName, stackFileName, dataFileName, 0)
    if not status then
        if storage ~= nil then
            print(storage.diedLast, os.clock())
            print(""err: "", err)
            if err ~= ""Terminated"" and (storage.diedLast == nil or os.clock() > 300) then
                storage.diedLast = 0
                save()
                os.reboot()
                return
            end
        else
            print(""err: "", err)
        end
        return
    else
        return
    end
end



"
kr6nTBXR,LRU Page Replacement Algorithm,Sreekar_0125,C,Monday 14th of August 2023 03:38:05 PM CDT,"// Least Recently Used (LRU) Page Replacement Algorithm
#include <stdio.h>
#include <stdbool.h>

// Function which runs the algorithm and in the end, returns no. of page faults

int LRU_algorithm(int totalPages, int pages[], int totalFrames, int frames[])
{
    int i, j, k;
    int pageFaults = 0;

    for (i = 0; i < totalPages; i++)
    {
        int currentPage = pages[i];

        // Check if Page Already Exists
        bool found = false;
        for (j = 0; j < totalFrames; j++)
        {
            if (frames[j] == currentPage)
            {
                found = true;
                break;
            }
        }
        // If Page Already Exists, Page Hit
        if (found == true)
        {
            for (j = 0; j < totalFrames; j++)
            {
                printf(""%d \t"", frames[j]);
            }
            printf(""Page Hit !\n"");
        }
        // If Not, Already Frame lo unnavati lo max distance to the left of current page em ochindo adhi replace aitadi
        else
        {
            int maxDistance = -1;
            int indexToBeReplaced;
            
            // calculate that distance for every frame 
            for(j = 0; j < totalFrames; j++)
            {
                int distance = 0;
                for(k = i - 1; k >= 0; k--)
                {
                    if(frames[j] != pages[k])
                    {
                        distance++;
                    }
                    else 
                    {
                        break;
                    }
                }
                if(distance > maxDistance) 
                {
                    maxDistance = distance;
                    indexToBeReplaced = j;
                }
            }

            frames[indexToBeReplaced] = pages[i];

            // Increment Page Faults
            pageFaults++;
            for (j = 0; j < totalFrames; j++)
            {
                printf(""%d \t"", frames[j]);
            }
            printf(""Page Fault !\n"");
        }
    }
    return pageFaults;
}

int main()
{
    int totalPages = 19;
    int pages[] = {3, 2, 1, 3, 4, 1, 6, 2, 4, 3, 4, 2, 1, 4, 5, 2, 1, 3, 4};

    int totalFrames = 3;
    int frames[totalFrames];

    int i;
    for (i = 0; i < totalFrames; i++)
    {
        frames[i] = -1;
    }

    printf(""Total Number of Page Faults = %d\n"", LRU_algorithm(totalPages, pages, totalFrames, frames));
}"
RLFd3R8b,FIFO Page Replacement Algorithm,Sreekar_0125,C,Monday 14th of August 2023 03:35:46 PM CDT,"	// Fifo Page Replacement Algorithm 
#include <stdio.h>
#include <stdbool.h>


// Function which runs the algorithm and in the end, returns no. of page faults

int FIFO_algorithm(int totalPages, int pages[], int totalFrames, int frames[])
{
    int i, j, currentFrame = 0;
    int pageFaults = 0;

    for(i = 0; i < totalPages; i++)
    {
        int currentPage = pages[i];

        // Check if Page Already Exists
        bool found = false;
        for(j = 0; j < totalFrames; j++)
        {
            if(frames[j] == currentPage)
            {
                found = true;
                break;
            }
        }
        // If Page Already Exists, Page Hit
        if(found == true)
        {
            for(j = 0; j < totalFrames; j++)
            {
                printf(""%d \t"", frames[j]);
            }
            printf(""Page Hit !\n"");
        }
        // If not, put currentPage in currentFrame and Increment Current Pointer
        else 
        {
            frames[currentFrame] = currentPage;
            // If currentFrame is greater than totalFrames, make it 0 again
            currentFrame = (currentFrame + 1) % totalFrames;


            // Increment Page Faults
            pageFaults++;
            for (j = 0; j < totalFrames; j++)
            {
                printf(""%d \t"", frames[j]);
            }
            printf(""Page Fault !\n"");
        }
    }
    return pageFaults;
}

int main ()
{
    int totalPages = 13;
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2};

    int totalFrames = 4;
    int frames[totalFrames];

    int i;
    for(i = 0; i < totalFrames; i++)
    {
        frames[i] = -1;
    }


    printf(""Total Number of Page Faults = %d\n"", FIFO_algorithm(totalPages, pages, totalFrames, frames));
}"
ptz9M5PM,Turti installer,melzneni,Lua,Monday 14th of August 2023 03:34:33 PM CDT,"local argsSource = { ... }

function splitText(source, letters)
    local parts = {}
    local akt = """";
    local qM1 = 0; local qM2 = 0; local b1 = 0; local b2 = 0; local b3 = 0;
    for i = 1, #source do
        local z = string.sub(source, i, i)
        if z == ""'"" and qM2 == 0 then qM1 = 1 - qM1;
        elseif z == ""\"""" and qM1 == 0 then qM2 = 1 - qM2;
        elseif qM1 == 0 and qM2 == 0 then
            if z == ""("" then b1 = b1 + 1
            elseif z == "")"" then b1 = b1 - 1
            elseif z == ""["" then b2 = b2 + 1
            elseif z == ""]"" then b2 = b2 - 1
            elseif z == ""{"" then b3 = b3 + 1
            elseif z == ""}"" then b3 = b3 - 1
            end
        end
        local split = false
        if b1 == 0 and b2 == 0 and b3 == 0 and qM1 == 0 and qM2 == 0 then
            for j = 1, #letters do
                if z == string.sub(letters, j, j) then
                    split = true
                    break
                end
            end
        end
        if split then
            if akt ~= """" then
                table.insert(parts, akt)
                akt = """"
            end
        else akt = akt .. z
        end
    end
    if akt ~= """" then table.insert(parts, akt) end
    return parts
end

local args = {}

local TYPE_DECLARATION = 0
local TYPE_TABLE = 1
local TYPE_TABLE_MAP = 1
local TYPE_TABLE_ARR = 2
local TYPE_VALUE = 2
local TYPE_CONSTANT = 3
local TYPE_PASTEBIN = 4

if peripheral == nil then
    _G.os.reboot = function() print(""fct: os.reboot()"") end
    _G.os.setComputerLabel = function(label) print(""fct: os.setComputerLabel(\""""..label..""\"")"") end
end

function getTypeName(t)
    if t == TYPE_DECLARATION then return ""declaration""
    elseif t == TYPE_TABLE then return ""table""
    elseif t == TYPE_VALUE then return ""value""
    elseif t == TYPE_CONSTANT then return ""constant""
    elseif t == TYPE_PASTEBIN then return ""pastebin""
    else error(""unknown type: "" .. t)
    end
end

function loadArgData(arg)
    local v = loadVar(arg)
    if v.type ~= TYPE_DECLARATION then
        error(""every argument of this program needs to be of type 'declaration'"")
    end
    return v
end

function readFileText(file)
    local f = fs.open(file, ""r"")
    local text = f.readAll()
    f.close()
    return text
end

function tryMatches(var, format, name)
    if not string.match(var, format) == var then error(""invalid "" .. name .. "": '"" .. var .. ""'"") end
end

function loadVar(source)

    local pts = splitText(source, ""="")
    if #pts > 1 then
        if #pts > 2 then error(""only one '=' in declaration"") end
        tryMatches(pts[1], ""[A-Za-z_][A-Za-z0-9_]*"", ""dec-name"")
        return { type = TYPE_DECLARATION, name = pts[1], value = loadVar(pts[2]) }
    end

    if string.sub(source, 1, 1) == ""{"" and string.sub(source, #source) == ""}"" then
        local pts = splitText(string.sub(source, 2, #source - 1), "","")
        local values = {}
        for i, pt in pairs(pts) do
            local v = loadVar(pt)
            if v.type == TYPE_DECLARATION then
                values[v.name] = v.value
            else table.insert(values, v)
            end
        end
        return { type = TYPE_TABLE, values = values }
    elseif string.sub(source, 1, 1) == ""<"" and string.sub(source, #source) == "">"" then
        source = string.sub(source, 2, #source - 1)
        local ind = string.find(source, "":"")
        local action = string.sub(source, 1, ind - 1)
        tryMatches(action, ""[A-Za-z_][A-Za-z0-9_]*"", ""action-name"")
        if action == ""pb"" then
            local id = string.sub(source, ind + 1)
            tryMatches(id, ""[A-Za-z_][A-Za-z0-9_]*"", ""pastebinId-name"")
            return { type = TYPE_PASTEBIN, id = id }
        elseif action == ""input"" then
            local v = loadVar(string.sub(source, ind + 1))
            if v.type ~= TYPE_VALUE or type(v.value) ~= ""string"" then error(""string value expected for function <input:''>"") end
            io.write(""input<"" .. v.value .. "">: "")
            local data = io.read()
            return { type = TYPE_VALUE, value = data }
        elseif action == ""inputNum"" then
            local v = loadVar(string.sub(source, ind + 1))
            if v.type ~= TYPE_VALUE or type(v.value) ~= ""string"" then error(""string value expected for function <input:''>"") end
            io.write(""inputNum<"" .. v.value .. "">: "")
            local data = tonumber(io.read())
            return { type = TYPE_VALUE, value = data }
        else error(""unknown action: '"" .. action .. ""'"")
        end
    elseif string.sub(source, 1, 1) == ""'"" and string.sub(source, #source) == ""'"" then
        return { type = TYPE_VALUE, value = string.sub(source, 2, #source - 1) }
    elseif string.sub(source, 1, 1) == ""$"" and string.sub(source, #source) == ""$"" then
        local name = string.sub(source, 2, #source - 1)
        return { type = TYPE_CONSTANT, name = name }
    elseif source == ""true"" or source == ""false"" then
        return { type = TYPE_VALUE, value = source == ""true"" }
    elseif tonumber(source) ~= nil then
        return { type = TYPE_VALUE, value = tonumber(source) }
    else error(""invalid source: '"" .. source .. ""'"")
    end
end

function checkType(name, value, t, t2)
    if value.type ~= t then
        error(""value '"" .. name .. ""' needs to be of type '"" .. getTypeName(t) .. ""' (type '"" .. getTypeName(value.type) .. ""' given)"")
    end
    if t2 ~= nil then
        if value.type == TYPE_TABLE then
            if t2 == TYPE_TABLE_MAP then
                for i, _ in pairs(value.values) do
                    if type(i) == ""number"" then
                        error(""table '"" .. name .. ""' needs to be a map"")
                    end
                end
            elseif t2 == TYPE_TABLE_ARR then
                for i, _ in pairs(value.values) do
                    if type(i) == ""string"" then
                        error(""table '"" .. name .. ""' needs to be an array"")
                    end
                end
            else error(""unknown type2: '"" .. t2 .. ""'"")
            end
        elseif value.type == TYPE_VALUE then
            if type(value.value) ~= t2 then error(""value '"" .. name .. ""' needs to be of type '"" .. t2 .. ""' (type '"" .. type(value.value .. ""' given)"")) end
        end
    end
end

function writeToFile(fileName, data)
    local f = fs.open(fileName, ""w"")
    f.write(data)
    f.close()
end

local startupBuildData = {
    files = {},
    cmds = {}
}

local reboot = false

local functions = {
    startup = {
        delay = function(data)
            checkType(""startup>delay"", data, TYPE_VALUE, ""number"")
            startupBuildData.delay = data.value
        end,
        files = function(data)
            checkType(""startup>files"", data, TYPE_TABLE, TYPE_TABLE_MAP)
            for fileName, v in pairs(data.values) do
                checkType(""startup>files>value"", v, TYPE_PASTEBIN)
                table.insert(startupBuildData.files, { name = fileName, id = v.id })
            end
        end,
        cmds = function(data)
            checkType(""startup>cmds"", data, TYPE_TABLE, TYPE_TABLE_ARR)
            for i, cmd in pairs(data.values) do
                checkType(""startup>cmds>cmd"", cmd, TYPE_TABLE, TYPE_TABLE_ARR)
                table.insert(startupBuildData.cmds, cmd.values)
            end
        end
    },
    reboot = function(data)
        checkType(""reboot"", data, TYPE_VALUE, ""boolean"")
        reboot = data.value
    end,
    label = function(data)
        checkType(""label"", data, TYPE_VALUE, ""string"")
        os.setComputerLabel(data.value)
    end
}

for i, v in pairs(argsSource) do
    table.insert(args, loadArgData(v))
end

function printTable(tbl)
    printTableIndex(tbl, """", {})
end

function printTableIndex(tbl, before, alreadyUsed)
    for i, v in pairs(tbl) do
        if type(v) == ""table"" then
            if tableContainsValue(alreadyUsed, v) then
                print(before .. i .. "":"", ""alreadyUsed"");
            else
                print(before .. i .. "": ["");
                table.insert(alreadyUsed, v)
                printTableIndex(v, before .. ""\t"", alreadyUsed)
                print(before .. ""]"")
            end
        else
            print(before .. i .. "":"", v);
        end
    end
end

function tableContainsValue(table, value)
    for i, v in pairs(table) do
        if v == value then return true end
    end
    return false
end

function executeFunction(tName, name, data, functions)
    for n, fct in pairs(functions) do
        if name == n then
            if type(fct) == ""table"" then
                tName = tName .. ""["" .. name .. ""]""
                checkType(tName .. "".value"", data, TYPE_TABLE, TYPE_TABLE_MAP)
                for n1, v in pairs(data.values) do
                    executeFunction(tName, n1, v, fct)
                end
            else
                fct(data)
            end
            return
        end
    end
    error(""function-name '"" .. name .. ""' isn't allowed for '"" .. tName .. ""'"")
end

function writeToFile(fileName, data)
    if fs == nil then
        local f = io.open(fileName, ""w"")
        io.output(f)
        io.write(data)
        io.close(f)
    else
        local f = fs.open(fileName, ""w"")
        f.write(data)
        f.close()
    end
end

for i, v in pairs(args) do
    local tName = ""level0-argument""
    executeFunction(tName, v.name, v.value, functions)
    --[[local fct = functions
    while type(fct) == ""table"" do
        for i,v1 in pairs(v.values) do
            checkType(tName, v, TYPE_DECLARATION)

            local name = v.name
            local value = v.value
            local fct = functions[v.name]
            if fct == nil then error(tName .. "" '"" .. v.name .. ""' isn't defined"") end
        end
    end]]
end

function replaceConstants(v, constants)
    if v.type == TYPE_CONSTANT then
        if constants[v.name] ~= nil then
            return { type = TYPE_VALUE, value = constants[v.name] }
        end
    elseif v.type == TYPE_TABLE then
        for i, v1 in pairs(v.values) do
            v.values[i] = replaceConstants(v1, constants)
        end
    elseif v.type ~= TYPE_VALUE then
        error(""unsupported type: '"" .. getTypeName(v.type) .. ""'"")
    end
    return v
end

local txt = ""local args={...}\n""

if startupBuildData.delay ~= nil then
    txt = txt .. ""sleep("" .. startupBuildData.delay .. "")\n""
end

for i, f in pairs(startupBuildData.files) do
    txt = txt .. ""if fs.exists(\""""..f.name..""\"") then shell.run(\""delete\"",\"""" .. f.name .. ""\"") end\n""
    txt = txt .. ""shell.run(\""pastebin\"",\""get\"",\"""" .. f.id .. ""\"",\"""" .. f.name .. ""\"")\n""
end

for i, cmd in pairs(startupBuildData.cmds) do
    cmd = replaceConstants({ type = TYPE_TABLE, values = cmd }, { arg1 = ""raw:args[1]"", arg2 = ""raw:args[2]"" }).values
    for i, v in pairs(cmd) do
        checkType(""cmds>cmd"", v, TYPE_VALUE, ""string"")
    end
    txt = txt .. ""shell.run(""
    for i, v in pairs(cmd) do
        if i ~= 1 then txt = txt .. "","" end
        if string.sub(v.value, 1, 4) == ""raw:"" then
            txt = txt .. string.sub(v.value, 5)
        else txt = txt .. ""\"""" .. v.value .. ""\""""
        end
    end
    txt = txt .. "")\n""
end


writeToFile(""startup"", txt)

if reboot then
    os.reboot()
end




"
LdECsH7n,FIFO Page Replacement Algorithm,Sreekar_0125,C,Monday 14th of August 2023 03:21:05 PM CDT,"// Fifo Page Replacement Algorithm 
#include <stdio.h>
#include <stdbool.h>


// Function which runs the algorithm and in the end, returns no. of page faults

int FIFO_algorithm(int totalPages, int pages[], int totalFrames, int frames[])
{
    int i, j, currentFrame = 0;
    int pageFaults = 0;

    for(i = 0; i < totalPages; i++)
    {
        int currentPage = pages[i];

        // Check if Page Already Exists
        bool found = false;
        for(j = 0; j < totalFrames; j++)
        {
            if(frames[j] == currentPage)
            {
                found = true;
                break;
            }
        }
        // If Page Already Exists, Page Hit
        if(found == true)
        {
            for(j = 0; j < totalFrames; j++)
            {
                printf(""%d \t"", frames[j]);
            }
            printf(""Page Hit !\n"");
        }
        // If not, put currentPage in currentFrame and Increment Current Pointer
        else 
        {
            frames[currentFrame] = currentPage;
            // If currentFrame is greater than totalFrames, make it 0 again
            currentFrame = (currentFrame + 1) % totalFrames;


            // Increment Page Faults
            pageFaults++;
            for (j = 0; j < totalFrames; j++)
            {
                printf(""%d \t"", frames[j]);
            }
            printf(""Page Fault !\n"");
        }
    }
    return pageFaults;
}

int main ()
{
    int totalPages = 13;
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2};

    int totalFrames = 4;
    int frames[totalFrames];

    int i;
    for(i = 0; i < totalFrames; i++)
    {
        frames[i] = -1;
    }


    printf(""Total Number of Page Faults = %d\n"", algorithm(totalPages, pages, totalFrames, frames));
}"
KRhtkUbR,SASL,Tiago_f,mIRC,Monday 14th of August 2023 03:17:01 PM CDT,"raw *:*:{
  var %raw = $right(00 $+ $numeric,3), %query = $iif($query($2),$2,-s)
  if (%raw == 1) && ($wd($readini($_sdir(identify.ini), $network, $me),1,44) == 1) { xidentify }
}
alias xidentify {
  if ($readini($_sdir(identify.ini), $network, $me)) {
    var %password = $wd($readini($_sdir(identify.ini), $network, $me),2,44)
    if ($wd($readini($_sdir(identify.ini), $network, $me),1,44) == 1) { id.sasl $me %password }
  }
}
alias id.sasl {
  bset -tc &auth 1 $1 $+ $lf $+ $1 $+ $lf $+ $decode($2,m)
  breplace &auth 10 0
  noop $encode(&auth,mb)
  .raw CAP REQ :sasl
  .raw AUTHENTICATE PLAIN
  .timerconctsasl -h 1 400 .raw AUTHENTICATE $bvar(&auth,1-).text
  .raw CAP END
}
"
sSyxifeg,Untitled,smj007,Python,Monday 14th of August 2023 03:11:18 PM CDT,"class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:

        def dfs(r, c):

            if r<0 or r>=len(grid) or c<0 or c>=len(grid[0]) or grid[r][c]==""0"":
                return

            grid[r][c] = ""0""

            dfs(r+1, c)
            dfs(r-1, c)
            dfs(r, c+1)
            dfs(r, c-1)
            
            return

        count = 0
        for r in range(len(grid)):
            for c in range(len(grid[0])):
                if grid[r][c] == ""1"":
                    dfs(r, c)
                    count = count+1

        return count"
dBGFewm0,BEE 3459 - GoldMagikarp,pedrov3,C++,Monday 14th of August 2023 03:08:30 PM CDT,"#include <bits/stdc++.h>
#define all(x) x.begin(), x.end()

using namespace std;

typedef long long ll;
typedef pair<int, int> ii;
typedef tuple<int, int, int> iii;
typedef vector<int> vi;
const ll oo = 1987654321987654321;

int32_t main() {
  cin.tie(0);
  ios_base::sync_with_stdio(0);

  int t;
  cin >> t >> ws;

  auto is_num = [&](string &x) {
    bool ok = true;
    for (auto &ch : x) {
      ok &= isdigit(ch);
    }
    return ok;
  };
  vector<string> prev_numeros;
  string line;
  vector<int> ans;
  while (t--) {
    getline(cin, line);
    string str = """";
    line += "".a."";

    bool mark = false;
    for (auto &ch : line) {
      if (ch == ',' || ch == ' ' || ch == '.') {
        if (is_num(str) && !mark) {
          prev_numeros.emplace_back(str);
        } else {
          if (!prev_numeros.empty()) {
            string num = """";
            for (auto &x : prev_numeros) {
              num += x;
            }
            ans.emplace_back(atoll(num.c_str()));
            prev_numeros.clear();
          }
        }
        mark = true;
        str = """";
      } else {
        mark = false;
        str += ch;
      }
    }
  }
  multiset<int> left, right;
  for (auto &x : ans) {
    right.emplace(x);
  }
  bool ok = false;
  for (auto &x : ans) {
    right.erase(right.find(x));
    ok |=
        (left.find(x - 1) != left.end()) && (right.find(x + 1) != right.end());
    left.insert(x);
  }
  if (ok) {
    cout << ""123\n"";
  } else {
    cout << "":)\n"";
  }
}"
NduqCLWY,FIFO Page Replacement Algorithm,Sreekar_0125,C,Monday 14th of August 2023 02:57:29 PM CDT,"// Fifo Page Replacement Algorithm 
#include <stdio.h>
#include <stdbool.h>


// Function which runs the algorithm and in the end, returns no. of page faults

int algorithm(int totalPages, int pages[], int totalFrames, int frames[])
{
    int i, j, currentFrame = 0;
    int pageFaults = 0;

    for(i = 0; i < totalPages; i++)
    {
        int currentPage = pages[i];

        // Check if Page Already Exists
        bool found = false;
        for(j = 0; j < totalFrames; j++)
        {
            if(frames[j] == currentPage)
            {
                found = true;
                break;
            }
        }
        // If Page Already Exists, Page Hit
        if(found == true)
        {
            for(j = 0; j < totalFrames; j++)
            {
                printf(""%d \t"", frames[j]);
            }
            printf(""Page Hit !\n"");
        }
        // If not, put currentPage in currentFrame and Increment currentFrame
        else 
        {
            frames[currentFrame] = currentPage;
            // If currentFrame is greater than totalFrames, make it 0 again
            currentFrame = (currentFrame + 1) % totalFrames;


            // Increment Page Faults
            pageFaults++;
            for (j = 0; j < totalFrames; j++)
            {
                printf(""%d \t"", frames[j]);
            }
            printf(""Page Fault !\n"");
        }
    }
    return pageFaults;
}

int main ()
{
    int totalPages = 13;
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2};

    int totalFrames = 4;
    int frames[totalFrames];

    int i;
    for(i = 0; i < totalFrames; i++)
    {
        frames[i] = -1;
    }


    printf(""Total Number of Page Faults = %d\n"", algorithm(totalPages, pages, totalFrames, frames));
}"
6sXJw3bd,Anime Premium,TheZhocky,C++,Monday 14th of August 2023 02:53:12 PM CDT,"CUENTA Crunchyroll para ver el mejor anime: subida el 14 de Agosto 2023

correo: soelod1@misstol.com

contraseña: PasswordStrong#

si quieresuna de 12 Meses,escribeme en Telegram: https://t.me/VIP_Agent_bot?start=m_hCUxrGn"
9vif9iuY,Bugs,Shiko5303,Lua,Monday 14th of August 2023 02:30:49 PM CDT,"gg.setVisible(false)
gg.setRanges(gg.REGION_CODE_APP)
      gg.searchNumber('h 69 01 00 B4 0B 59 40 F9 EA 03 1F AA 6B 21 00 91 6C 81 5F F8 9F 01 01 EB 20 01 00 54 4A 05 00 91 5F 01 09 EB 6B 41 00 91 43 FF FF 54 E0 03 13 AA E2 03 1F 2A 12 54 C0 97 04 00 00 14 69 01 40 B9 08 11 09 8B 00 C1 04 91 08 04 40 A9 E0 03 13 AA 00 01 3F D6 D4 00 00 B5 FD 7B 43 A9 F4 4F 42 A9 F6 57 41 A9 F7 07 44 F8 C0 03 5F D6 E0 03 14 AA E1 03 1F AA 81 E0 C1 97 8D E0 C1 97 05 00 00 14 04 00 00 14 03 00 00 14 02 00 00 14 01 00 00 14 3F 04 00 71 C1 00 00 54 DE 45 BF 97 14 00 40 F9 18 43 BF 97 53 FA FF B5 EB FF FF 17 BD 42 BF 97 FF 43 02 D1 E8 1B 00 FD FA 67 04 A9 F8 5F 05 A9 F6 57 06 A9 F4 4F 07 A9 FD 7B 08 A9 FD 03 02 91 76 8D 00 D0 C8 D2 75 39 F4 03 02 2A F5 03 01 AA F3 03 00 AA E8 00 00 37 68 7E 00 90 08 81 42 F9 00 01 40 B9 3A E0 C1 97 E8 03 00 32 C8 D2 35 39 77 81 00 90 F7 FE 45 F9 E0 02 40 F9 08 BC 44 39 88 00 08 36 08 E0 40 B9 48 00 00 35 5B E0 C1 97 08 82 00 D0 08 89 43 F9 E1 03 1F AA 00 01 40 F9 79 40 F3 97 C8 80 00 B0 08 11 47 F9 F6 03 00 AA 08 01 40 F9 09 BD 44 39 A9 00 08 36 09 E1 40 B9 69 00 00 35', gg.TYPE_BYTE)   
      gg.getResults(340)      
      gg.editAll('h 69 01 00 B4 C0 03 5F D6 EA 03 1F AA 6B 21 00 91 6C 81 5F F8 9F 01 01 EB 20 01 00 54 4A 05 00 91 5F 01 09 EB 6B 41 00 91 43 FF FF 54 E0 03 13 AA E2 03 1F 2A 12 54 C0 97 04 00 00 14 69 01 40 B9 08 11 09 8B 00 C1 04 91 08 04 40 A9 E0 03 13 AA 00 01 3F D6 D4 00 00 B5 FD 7B 43 A9 F4 4F 42 A9 F6 57 41 A9 F7 07 44 F8 C0 03 5F D6 E0 03 14 AA E1 03 1F AA 81 E0 C1 97 8D E0 C1 97 05 00 00 14 04 00 00 14 C0 03 5F D6 02 00 00 14 01 00 00 14 3F 04 00 71 C1 00 00 54 DE 45 BF 97 14 00 40 F9 18 43 BF 97 53 FA FF B5 EB FF FF 17 BD 42 BF 97 C0 03 5F D6 C0 03 5F D6 C0 03 5F D6 C0 03 5F D6 C0 03 5F D6 F4 4F 07 A9 FD 7B 08 A9 FD 03 02 91 76 8D 00 D0 C8 D2 75 39 F4 03 02 2A C0 03 5F D6 F3 03 00 AA E8 00 00 37 68 7E 00 90 08 81 42 F9 00 01 40 B9 3A E0 C1 97 E8 03 00 32 C8 D2 35 39 C0 03 5F D6 F7 FE 45 F9 E0 02 40 F9 08 BC 44 39 88 00 08 36 08 E0 40 B9 48 00 00 35 C0 03 5F D6 08 82 00 D0 08 89 43 F9 E1 03 1F AA 00 01 40 F9 79 40 F3 97 C8 80 00 B0 08 11 47 F9 F6 03 00 AA 08 01 40 F9 09 BD 44 39 A9 00 08 36 09 E1 40 B9 C0 03 5F D6', gg.TYPE_BYTE)
      gg.clearResults(true) 
      
gg.setVisible(false)
gg.clearResults(true)
gg.setRanges(gg.REGION_ANONYMOUS) 
gg.searchNumber(""286;346::40"", gg.TYPE_DWORD)
gg.refineNumber(""286"", gg.TYPE_DWORD)
gg.setVisible(false)
n = gg.getResults(10)
for i, v in ipairs(n) do
n = v.address
end
t = {}

t[2] = {} 
if not gg.getTargetInfo().x64 then
t[2].address = n - 6 else
t[2].address = n - 0x18 end
t[2].flags = gg.TYPE_DWORD
t[2].value = ""99999X4""
gg.setValues(t)
gg.setVisible(false)
gg.clearResults(true)
gg.toast(""Bugs complete , check results"")
gg.setVisible(false)
if gg.toast(""Bugs complete , check results"") then os.exit(true) end"
cZGxFvU5,Card EasyHAN,MiAutomations,YAML,Monday 14th of August 2023 02:22:21 PM CDT,"type: entities
entities:
  - entity: sensor.eb1_esp_uptime
    secondary_info: last-updated
  - entity: sensor.eb1_esp_free_heap
    secondary_info: last-updated
  - entity: sensor.eb1_esp_signal
    secondary_info: last-updated
  - entity: button.eb1_esp_restart
    secondary_info: last-updated
  - entity: sensor.eb1_esp_vcc
    secondary_info: last-updated
  - entity: sensor.eb1_esp_clock
    secondary_info: last-updated
  - entity: sensor.eb1_clock
    secondary_info: last-updated
  - entity: sensor.eb1_voltage_l1
    secondary_info: last-updated
  - entity: sensor.eb1_current_l1
    secondary_info: last-updated
  - entity: sensor.eb1_active_power_import
    secondary_info: last-updated
  - entity: sensor.eb1_active_power_export
    secondary_info: last-updated
  - entity: sensor.eb1_power_factor
    secondary_info: last-updated
  - entity: sensor.eb1_frequency
    secondary_info: last-updated
  - entity: sensor.eb1_t1_vazio
    secondary_info: last-updated
  - entity: sensor.eb1_t2_ponta
    secondary_info: last-updated
  - entity: sensor.eb1_t3_cheias
    secondary_info: last-updated
  - entity: sensor.eb1_import
    secondary_info: last-updated
  - entity: sensor.eb1_export
    secondary_info: last-updated
  - entity: sensor.eb1_tariff
    secondary_info: last-updated"
rFS02Rv5,sdrtbrdy,gadungw71,PHP,Monday 14th of August 2023 02:15:41 PM CDT,"https://m.facebook.com/media/set/?set=a.277829234878085
https://m.facebook.com/media/set/?set=a.277831314877877
https://m.facebook.com/media/set/?set=a.253982484242801
https://m.facebook.com/media/set/?set=a.136974789458475
https://m.facebook.com/media/set/?set=a.136976022791685
https://app.eventsframe.com/app/event/4758136838684672/
https://app.eventsframe.com/app/event/6225236195278848/
https://colab.research.google.com/drive/…mbZDZvpk7EODaUB
https://groups.google.com/g/creation-of-…-/c/cYvQ2aVEXz0
https://app.eventsframe.com/app/event/4835683946463232/
https://m.facebook.com/media/set/?set=a.176015532166264
https://m.facebook.com/media/set/?set=a.176017782166039
https://m.facebook.com/media/set/?set=a.300136376005131
https://m.facebook.com/media/set/?set=a.620297366914379
https://app.eventsframe.com/app/event/5887124961230848/
https://eventsframe.com/e/r7DdGumqc/2-meg-2-the-trench-hd/
https://m.facebook.com/media/set/?set=a.137502129405741
https://m.facebook.com/media/set/?set=a.134962449663028"
4WMMwpAT,Untitled,s-sols,CSS,Monday 14th of August 2023 01:44:25 PM CDT,".single-product .product-image-slider.owl-carousel > .img-thumbnail:not(:first-child) {
	display: none !important;
}

.single-product .product-thumbs-slider.owl-carousel > .img-thumbnail {
	display: inline-block !important;
	width: calc((100% - 3*8px)/4) !important;
}

.single-product .product-thumbs-slider.owl-carousel > .img-thumbnail:nth-child(n+2) {
	margin-left: 8px;
}

.single-product .product-thumbs-slider.owl-carousel > .img-thumbnail:nth-child(n+5) {
	display: none !important;
}
"
xq9NSRNT,it2c.py,Kitomas,Python,Monday 14th of August 2023 01:38:45 PM CDT,"#(this was last edited 2021-6-28, so this is not up to my standards today)
dohardargs=True
#order goes: file,dither?,width,height
hardargs=[0,'asdf.jpg',1,500,500] #none,file,dither,width,height
''' following text yoinked from colorama's page:
ESC [ 0 m       # reset all (colors and brightness)
ESC [ 1 m       # bright
ESC [ 2 m       # dim (looks same as normal brightness)
ESC [ 22 m      # normal brightness

# FOREGROUND:
ESC [ 30 m      # black
ESC [ 31 m      # red
ESC [ 32 m      # green
ESC [ 33 m      # yellow
ESC [ 34 m      # blue
ESC [ 35 m      # magenta
ESC [ 36 m      # cyan
ESC [ 37 m      # white
ESC [ 39 m      # reset

# BACKGROUND
ESC [ 40 m      # black
ESC [ 41 m      # red
ESC [ 42 m      # green
ESC [ 43 m      # yellow
ESC [ 44 m      # blue
ESC [ 45 m      # magenta
ESC [ 46 m      # cyan
ESC [ 47 m      # white
ESC [ 49 m      # reset

# cursor positioning
ESC [ y;x H     # position cursor at x across, y down
ESC [ y;x f     # position cursor at x across, y down
ESC [ n A       # move cursor n lines up
ESC [ n B       # move cursor n lines down
ESC [ n C       # move cursor n characters forward
ESC [ n D       # move cursor n characters backward

# clear the screen
ESC [ mode J    # clear the screen

# clear the line
ESC [ mode K    # clear the line

\x1b[6;30;42m
\x1b[0m
'''
from sys import argv as args
from os import system as cmd, getcwd as cwd
from os.path import exists
from colorama import init as colorama_init
from time import time
from math import floor, sqrt
from PIL import Image
colorama_init()
rpalette={
'051051051':'\x1b[1;30;40m',
'094034039':'\x1b[1;31;40m',
'015081012':'\x1b[1;32;40m',
'100097069':'\x1b[1;33;40m',
'029052103':'\x1b[1;34;40m',
'075007066':'\x1b[1;35;40m',
'043087087':'\x1b[1;36;40m',
'098098098':'\x1b[1;37;40m',
'012012012':'\x1b[2;30;40m',
'081013019':'\x1b[2;31;40m',
'014067012':'\x1b[2;32;40m',
'079066007':'\x1b[2;33;40m',
'007028089':'\x1b[2;34;40m',
'058016064':'\x1b[2;35;40m',
'029063090':'\x1b[2;36;40m',
'084084084':'\x1b[2;37;40m',
'167053063':'\x1b[1;30;41m',
'209036051':'\x1b[1;31;41m',
'131083023':'\x1b[1;32;41m',
'216099081':'\x1b[1;33;41m',
'145054115':'\x1b[1;34;41m',
'190009078':'\x1b[1;35;41m',
'159089099':'\x1b[1;36;41m',
'213100110':'\x1b[1;37;41m',
'127013023':'\x1b[2;30;41m',
'197015031':'\x1b[2;31;41m',
'130069024':'\x1b[2;32;41m',
'195067019':'\x1b[2;33;41m',
'123030101':'\x1b[2;34;41m',
'174018076':'\x1b[2;35;41m',
'144065102':'\x1b[2;36;41m',
'199085095':'\x1b[2;37;41m',
'056144053':'\x1b[1;30;42m',
'098127041':'\x1b[1;31;42m',
'020174013':'\x1b[1;32;42m',
'105191070':'\x1b[1;33;42m',
'034145104':'\x1b[1;34;42m',
'079100068':'\x1b[1;35;42m',
'048180089':'\x1b[1;36;42m',
'102191099':'\x1b[1;37;42m',
'016105013':'\x1b[2;30;42m',
'085106020':'\x1b[2;31;42m',
'019161014':'\x1b[2;32;42m',
'084159008':'\x1b[2;33;42m',
'011121090':'\x1b[2;34;42m',
'062109065':'\x1b[2;35;42m',
'033156091':'\x1b[2;36;42m',
'088177085':'\x1b[2;37;42m',
'164141044':'\x1b[1;30;43m',
'207124032':'\x1b[1;31;43m',
'128171004':'\x1b[1;32;43m',
'214187061':'\x1b[1;33;43m',
'142142095':'\x1b[1;34;43m',
'188097059':'\x1b[1;35;43m',
'157177080':'\x1b[1;36;43m',
'211188090':'\x1b[1;37;43m',
'125102004':'\x1b[2;30;43m',
'194103011':'\x1b[2;31;43m',
'127157005':'\x1b[2;32;43m',
'193156000':'\x1b[2;33;43m',
'120118081':'\x1b[2;34;43m',
'171106057':'\x1b[2;35;43m',
'142153082':'\x1b[2;36;43m',
'197174076':'\x1b[2;37;43m',
'044078180':'\x1b[1;30;44m',
'086061168':'\x1b[1;31;44m',
'008108140':'\x1b[1;32;44m',
'093124198':'\x1b[1;33;44m',
'022079231':'\x1b[1;34;44m',
'067034195':'\x1b[1;35;44m',
'036114216':'\x1b[1;36;44m',
'090125227':'\x1b[1;37;44m',
'004038140':'\x1b[2;30;44m',
'073040147':'\x1b[2;31;44m',
'007094141':'\x1b[2;32;44m',
'072092136':'\x1b[2;33;44m',
'000055218':'\x1b[2;34;44m',
'051043193':'\x1b[2;35;44m',
'021090219':'\x1b[2;36;44m',
'076110212':'\x1b[2;37;44m',
'129058139':'\x1b[1;30;45m',
'171041127':'\x1b[1;31;45m',
'093088099':'\x1b[1;32;45m',
'178104156':'\x1b[1;33;45m',
'107059190':'\x1b[1;34;45m',
'152014154':'\x1b[1;35;45m',
'121094175':'\x1b[1;36;45m',
'175105185':'\x1b[1;37;45m',
'089018099':'\x1b[2;30;45m',
'158020106':'\x1b[2;31;45m',
'092074100':'\x1b[2;32;45m',
'157072095':'\x1b[2;33;45m',
'085035176':'\x1b[2;34;45m',
'136023152':'\x1b[2;35;45m',
'106070177':'\x1b[2;36;45m',
'161090171':'\x1b[2;37;45m',
'080138182':'\x1b[1;30;46m',
'122120170':'\x1b[1;31;46m',
'044168142':'\x1b[1;32;46m',
'129184200':'\x1b[1;33;46m',
'058138233':'\x1b[1;34;46m',
'103093197':'\x1b[1;35;46m',
'072174218':'\x1b[1;36;46m',
'127184228':'\x1b[1;37;46m',
'040098142':'\x1b[2;30;46m',
'110099149':'\x1b[2;31;46m',
'043154143':'\x1b[2;32;46m',
'108152138':'\x1b[2;33;46m',
'036114219':'\x1b[2;34;46m',
'087102195':'\x1b[2;35;46m',
'058150221':'\x1b[2;36;46m',
'112170214':'\x1b[2;37;46m',
'171171171':'\x1b[1;30;47m',
'214154159':'\x1b[1;31;47m',
'135201132':'\x1b[1;32;47m',
'220217189':'\x1b[1;33;47m',
'149172223':'\x1b[1;34;47m',
'195127186':'\x1b[1;35;47m',
'163207207':'\x1b[1;36;47m',
'218218218':'\x1b[1;37;47m',
'132132132':'\x1b[2;30;47m',
'201133139':'\x1b[2;31;47m',
'134187132':'\x1b[2;32;47m',
'199186127':'\x1b[2;33;47m',
'127148209':'\x1b[2;34;47m',
'178136184':'\x1b[2;35;47m',
'149183210':'\x1b[2;36;47m',
'204204204':'\x1b[2;37;47m',}
wpalette=[ #this list is for the image library
51, 51, 51,
94, 34, 39,
15, 81, 12,
100, 97, 69,
29, 52, 103,
75, 7, 66,
43, 87, 87,
98, 98, 98,
12, 12, 12,
81, 13, 19,
14, 67, 12,
79, 66, 7,
7, 28, 89,
58, 16, 64,
29, 63, 90,
84, 84, 84,
167, 53, 63,
209, 36, 51,
131, 83, 23,
216, 99, 81,
145, 54, 115,
190, 9, 78,
159, 89, 99,
213, 100, 110,
127, 13, 23,
197, 15, 31,
130, 69, 24,
195, 67, 19,
123, 30, 101,
174, 18, 76,
144, 65, 102,
199, 85, 95,
56, 144, 53,
98, 127, 41,
20, 174, 13,
105, 191, 70,
34, 145, 104,
79, 100, 68,
48, 180, 89,
102, 191, 99,
16, 105, 13,
85, 106, 20,
19, 161, 14,
84, 159, 8,
11, 121, 90,
62, 109, 65,
33, 156, 91,
88, 177, 85,
164, 141, 44,
207, 124, 32,
128, 171, 4,
214, 187, 61,
142, 142, 95,
188, 97, 59,
157, 177, 80,
211, 188, 90,
125, 102, 4,
194, 103, 11,
127, 157, 5,
193, 156, 0,
120, 118, 81,
171, 106, 57,
142, 153, 82,
197, 174, 76,
44, 78, 180,
86, 61, 168,
8, 108, 140,
93, 124, 198,
22, 79, 231,
67, 34, 195,
36, 114, 216,
90, 125, 227,
4, 38, 140,
73, 40, 147,
7, 94, 141,
72, 92, 136,
0, 55, 218,
51, 43, 193,
21, 90, 219,
76, 110, 212,
129, 58, 139,
171, 41, 127,
93, 88, 99,
178, 104, 156,
107, 59, 190,
152, 14, 154,
121, 94, 175,
175, 105, 185,
89, 18, 99,
158, 20, 106,
92, 74, 100,
157, 72, 95,
85, 35, 176,
136, 23, 152,
106, 70, 177,
161, 90, 171,
80, 138, 182,
122, 120, 170,
44, 168, 142,
129, 184, 200,
58, 138, 233,
103, 93, 197,
72, 174, 218,
127, 184, 228,
40, 98, 142,
110, 99, 149,
43, 154, 143,
108, 152, 138,
36, 114, 219,
87, 102, 195,
58, 150, 221,
112, 170, 214,
171, 171, 171,
214, 154, 159,
135, 201, 132,
220, 217, 189,
149, 172, 223,
195, 127, 186,
163, 207, 207,
218, 218, 218,
132, 132, 132,
201, 133, 139, ###
134, 187, 132,
199, 186, 127,
127, 148, 209,
178, 136, 184,
149, 183, 210,
204, 204, 204,
] + [204,] *384 #(256-128)*3=384
#lol look at all of dat data ^^
#args=[0,'lenna.png',1,256,256] #none,file,dither,width,height
#args[2]=int(args[2])
if dohardargs:
    args=hardargs
else:
    args[2]=int(args[2])
if len(args) < 2:
    print(""Please give me one file path argument"")
    cmd('pause')
    exit()
if args[1][1]!=':':
    args[1]=cwd()+'\\'+args[1]
if not exists(args[1]):
    print('""'+args[1]+'""'+"" doesn't exist!"")
if len(args) < 3:
    args.append(1)

def rnd(num):
    #i heard that python's round() is weird so i made my own just in case
    return floor(num+.5)
def cut(num):
    return floor(num*1000)/1000

def fpd(pixel): #fulfill pixel digits
    string=''
    for i in range(0,3):
        sbuffer=str(pixel[i])
        while len(sbuffer) < 3:
            sbuffer='0'+sbuffer
        string=string+sbuffer
    return string
def loadimg(lpath):
    img=Image.open(lpath)
    return img.convert('RGB')
def resize(imgobj,size):
    return imgobj.resize(size,1) #Image.LANCZOS=1
def quant(img,dodither):
    global wpalette

    img.load()
    width,height=img.size

    pimage = Image.new(""P"", (1, 1), 0)
    pimage.putpalette(wpalette)
    pimage.load()

    qimage=img._new(img.im.convert(""P"", dodither, pimage.im))
    img.close()
    pimage.close()

    return qimage

def convert_quant(imgobj):
    global wpalette
    img=imgobj.getdata()
    converted=[]
    b=0
    for i in range(0,len(img)):
        b=img[i]*3
        converted.append((wpalette[b],wpalette[b+1],wpalette[b+2]))
    return converted

def assembleline(img,width,offset=0):
    global rpalette
    string=''
    buffera=''
    bufferb=''
    offset
    for ix in range(0,width):
        buffera=fpd(img[offset+ix])
        bufferb=rpalette[buffera]
        string=string+bufferb+'@'
    return string+'\x1b[0m'

start=time()

qimg=loadimg(args[1])
isize=qimg.size
if len(args) >= 5:
    isize=(int(args[3]),int(args[4]))
    qimg=resize(qimg,isize)
qimg=quant(qimg,args[2])
qimg.convert('RGB')
finalout=args[1][0:len(args[1])-4]+'OUT.png'
qimg.save(finalout)
qimg=convert_quant(qimg)
cmd('cls')
for iy in range(0,isize[1]):
    print(assembleline(qimg,isize[0],iy*isize[0]))
#print('Saved to file: ""'+finalout+'""')
print(""Processed in: "" + str(cut(time()-start)) + "" seconds"")
cmd('pause')
"
