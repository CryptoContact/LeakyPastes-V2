id,title,username,language,date,content
YSMxbhex,2023-11-12_stats.json,rdp_snitch,JSON,Sunday 12th of November 2023 06:15:08 PM CDT,"{
  ""ip"": {
    ""190.85.239.111"": 3,
    ""167.94.138.35"": 1,
    ""41.158.2.12"": 1,
    ""212.147.209.51"": 7,
    ""205.210.31.110"": 3,
    ""159.223.47.136"": 12,
    ""159.223.34.145"": 3,
    ""159.223.47.118"": 9,
    ""159.223.47.108"": 1,
    ""159.223.47.115"": 2,
    ""159.223.47.144"": 1,
    ""62.204.41.146"": 4,
    ""45.143.201.62"": 5,
    ""106.116.169.71"": 1,
    ""87.251.75.145"": 1,
    ""185.170.144.3"": 2,
    ""62.122.184.166"": 4,
    ""62.122.184.168"": 4,
    ""198.235.24.104"": 3,
    ""210.2.89.161"": 2,
    ""87.251.75.120"": 1,
    ""101.36.113.66"": 1,
    ""36.91.222.100"": 2,
    ""167.248.133.34"": 1,
    ""198.235.24.134"": 3,
    ""51.75.160.42"": 2,
    ""45.140.17.16"": 1,
    ""103.212.137.250"": 6,
    ""87.251.75.64"": 1,
    ""167.172.112.103"": 4,
    ""45.33.112.158"": 1,
    ""111.93.144.102"": 3,
    ""103.211.56.147"": 1,
    ""198.235.24.114"": 3,
    ""40.68.89.187"": 1
  },
  ""asn"": {
    ""AS14080"": 3,
    ""AS398324"": 2,
    ""AS16058"": 1,
    ""AS50837"": 7,
    ""AS396982"": 12,
    ""AS14061"": 32,
    ""AS59425"": 4,
    ""AS210950"": 5,
    ""AS4134"": 1,
    ""AS208091"": 3,
    ""AS197414"": 2,
    ""AS57523"": 8,
    ""AS24085"": 2,
    ""AS135377"": 1,
    ""AS7713"": 2,
    ""AS16276"": 2,
    ""AS198953"": 1,
    ""AS133676"": 7,
    ""AS63949"": 1,
    ""AS45820"": 3,
    ""AS8075"": 1
  },
  ""isp"": {
    ""Telmex Colombia S.A."": 3,
    ""Censys, Inc."": 2,
    ""Gabon Telecom Internet Network Autonomous System"": 1,
    ""CLOUDSIGMA AG"": 7,
    ""Google LLC"": 12,
    ""DigitalOcean, LLC"": 32,
    ""Horizon LLC"": 4,
    ""TOV E-RISHENNYA"": 5,
    ""Chinanet"": 1,
    ""Xhost Internet Solutions LP"": 5,
    ""Chang Way Technologies Co. Limited"": 8,
    ""Quang Trung Software City Development Company"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""PT Telekomunikasi Indonesia"": 2,
    ""OVH SAS"": 2,
    ""Proton66 OOO"": 1,
    ""Gstech Software Systems Pvt Ltd"": 7,
    ""Akamai Technologies, Inc."": 1,
    ""Ttsl-isp Division"": 3,
    ""Microsoft Corporation"": 1
  },
  ""org"": {
    ""Telmex Colombia S.A"": 3,
    ""Censys, Inc"": 1,
    ""Gtlib Ipmpls01"": 1,
    ""ServeCentric Ltd"": 7,
    ""Palo Alto Networks, Inc"": 12,
    ""DigitalOcean, LLC"": 32,
    ""Horizon LLC"": 4,
    ""TOV VAIZ PARTNER"": 5,
    ""Chinanet HE"": 1,
    ""Xhost Internet Solutions"": 3,
    ""Xhostis"": 2,
    ""Chang Way Technologies Co. Limited"": 8,
    ""Quang Trung Software City Development Company Limited"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Telekomunikasi Indonesia"": 2,
    ""Censys, Inc."": 1,
    ""OVH Ltd"": 2,
    ""Proton66 LLC"": 1,
    ""Gstech Software Systems Pvt Ltd"": 7,
    ""Linode"": 1,
    ""Tata Teleservices ISP"": 3,
    ""Microsoft Azure Cloud (westeurope)"": 1
  },
  ""regionName"": {
    ""Bogota D.C."": 3,
    ""Michigan"": 2,
    ""Estuaire"": 1,
    ""Leinster"": 7,
    ""California"": 16,
    ""South West"": 25,
    ""Central Singapore"": 3,
    ""Moscow"": 13,
    ""Kyiv City"": 5,
    ""Hebei"": 1,
    ""North Holland"": 6,
    ""Ho Chi Minh"": 2,
    ""Central and Western District"": 1,
    ""Jakarta"": 2,
    ""England"": 2,
    ""Uttar Pradesh"": 7,
    ""Texas"": 1,
    ""Karnataka"": 3
  },
  ""country"": {
    ""Colombia"": 3,
    ""United States"": 19,
    ""Gabon"": 1,
    ""Ireland"": 7,
    ""Singapore"": 28,
    ""Russia"": 13,
    ""Ukraine"": 5,
    ""China"": 1,
    ""Netherlands"": 6,
    ""Vietnam"": 2,
    ""Hong Kong"": 1,
    ""Indonesia"": 2,
    ""United Kingdom"": 2,
    ""India"": 10
  },
  ""account"": {
    ""hello"": 23,
    ""(empty)"": 4,
    ""VhAAOBsAx"": 1,
    ""VjqFsW"": 1,
    ""rmtAvX"": 1,
    ""142.93.8.59"": 28,
    ""Domain"": 12,
    ""Administr"": 11,
    ""gBgrmQQHH"": 1,
    ""NkFIOu"": 1,
    ""nKdNmY"": 1,
    ""Administrator"": 1,
    ""Test"": 4,
    ""YwiBndhje"": 1,
    ""NHRPtX"": 1,
    ""iGILWm"": 1,
    ""kfvifxl7"": 4,
    ""beio"": 1,
    ""saJdmDlzp"": 1,
    ""qjbubp"": 1,
    ""ZHwjXx"": 1
  },
  ""keyboard"": {
    ""Unknown"": 100
  },
  ""client_build"": {
    ""Unknown"": 100
  },
  ""client_name"": {
    ""Unknown"": 100
  },
  ""ip_type"": {
    ""Unknown"": 44,
    ""hosting"": 52,
    ""hosting & proxy"": 4
  }
}"
QJayH2Kq,aero,zero96x,Lua,Sunday 12th of November 2023 06:06:43 PM CDT,"fahrstufen = peripheral.wrap(""tm_rsPort_1"")
connector2 = peripheral.wrap(""tm_rsPort_2"")

mainAxisFS1CW = ""up""
mainAxisFS2CW = ""south""
mainAxisFS1CCW = ""west"" 
mainAxisFS2CCW = ""east""
mainAxisBrake = ""up""

function mainTurnAxisOff()
    fahrstufen.setOutput(mainAxisFS1CW,true)
    fahrstufen.setOutput(mainAxisFS2CW,true)
    fahrstufen.setOutput(mainAxisFS1CCW,true)
    fahrstufen.setOutput(mainAxisFS2CCW,true)
end

function mainTurnAxisBrake()
    connector2.setOutput(""up"",true)
end

function mainTurnAxisBrakesOff()
    connector2.setOutput(""up"",false)
end


function mainAxisClockwiseSlow()
    mainTurnAxisOff()
    sleep(.25)
    fahrstufen.setOutput(mainAxisFS1CW,false)
end

function mainAxisClockwiseFast()
    mainTurnAxisOff()
    sleep(.25)
    fahrstufen.setOutput(mainAxisFS2CW,false)
end

function mainAxisCounterClockwiseSlow()
    mainTurnAxisOff()
    sleep(.25)
    fahrstufen.setOutput(mainAxisFS1CCW,false)
end

function mainAxisCounterClockwiseFast()
    mainTurnAxisOff()
    sleep(.25)
    fahrstufen.setOutput(mainAxisFS2CCW,false)
end







function cmd()
    while true do
        term.clear()
        term.setCursorPos(1,1)
        term.write(""list for commands"")
        term.setCursorPos(1,2)
        input = read()
        if input == ""mainAxisBrake"" then
            mainTurnAxisBrake()
        else if input == ""mainAxisBrakesOff"" then
            mainTurnAxisBrakesOff()
        else if input == ""mainAxisCwSlow"" then
            mainAxisClockwiseSlow()
        else if input == ""mainAxisCwFast"" then
            mainAxisClockwiseFast()
        else if input == ""mainAxisCcwSlow"" then
            mainAxisCounterClockwiseSlow()
        else if input == ""mainAxisCcwFast"" then
            mainAxisCounterClockwiseFast()
        else if input == ""list"" then
            term.clear()
            term.setCursorPos(1,1)
            term.write(""mainAxisBrake"")
            term.setCursorPos(1,2)
            term.write(""mainAxisBrakesOff"")
            term.setCursorPos(1,3)
            term.write(""mainAxisCwSlow"")
            term.setCursorPos(1,4)
            term.write(""mainAxisCwFast"")
            term.setCursorPos(1,5)
            term.write(""mainAxisCcwSlow"")
            term.setCursorPos(1,6)
            term.write(""mainAxisCcwFast"")
            term.setCursorPos(1,7)
            term.write(""list"")
        else
            term.clear()
            term.setCursorPos(1,1)
            term.write(""try again"")
        end
        sleep(1)
    end
    
end

--PROGRAM

cmd()"
PpTdLEaF,[1.20.1] Mekanism Digital Miner - Automatization script,martinjanas,Lua,Sunday 12th of November 2023 05:33:11 PM CDT,"-- Computercraft script: 

-- Mekanism Digital Miner Automator version 2.0 for Minecraft 1.20.1 
-- (or maybe even anything above 1.12.2 with slight edits to the Blocks section) 
-- by MartiNJ409 - https://github.com/martinjanas
-- This script can be found in my repository - https://github.com/martinjanas/DigitalMinerAutomatization
 
-- This script places & destroys miner, energy block, storage block, chatbox and chunkloader.
-- It can also output miner status to the chat, visible to anyone on servers, can be turned off below in Settings.
-- Also works on AdvancedPeriperals's chunky turtle, so no need for chunkloader.
 
-- Just place all the required blocks into the turtle.
-- No need to use chunkloader if you are using chunky turtle, chat box is not mandatory.
 
-- User Settings Area --
Settings = {}
Settings.MAX_CHUNKS = 16 -- The amount of chunks this script will run. (Default 16)
Settings.SEND_TO_CHAT = true -- Set this to false if you don't wish for the chatbox to send serverwide messages about the mining status.

Blocks = {}
Blocks.BLOCK_MINER = ""mekanism:digital_miner""
Blocks.BLOCK_ENERGY = ""mekanism:quantum_entangloporter"" -- Edit this to match your desired block.
Blocks.BLOCK_STORAGE = ""mekanism:quantum_entangloporter"" -- Edit this to match your desired block.
Blocks.BLOCK_CHUNKLOADER = ""chickenchunks:chunk_loader"" -- Edit this to match your desired block.
Blocks.BLOCK_CHATBOX = ""advancedperipherals:chat_box"" -- Edit this only if you are porting to newer/older versions.
-- User Settings Area --

-- Dont touch this underneath:
GlobalVars = {}
GlobalVars.m_pMiner = nil
GlobalVars.m_pChatBox = nil
GlobalVars.m_bHasChunkLoader = false
GlobalVars.m_bIsChunkyTurtle = false
GlobalVars.m_bHasChatBox = false

function download_file(url, destination)
    local response = http.get(url)

    if response then
        local file = fs.open(destination, ""w"")

        local data = response.readAll()

        file.write(data)
        file.close()

        response.close()
    end
end

download_file(""https://raw.githubusercontent.com/martinjanas/DigitalMinerAutomatization/main/utils.lua"", ""utils.lua"")

require ""utils""

function main(i)
    GlobalVars.m_bIsChunkyTurtle = is_chunky_turtle_fn()

    place_blocks_fn(Blocks, GlobalVars)

    os.sleep(0.15)

    if GlobalVars.m_pMiner then
       local to_mine_cached = GlobalVars.m_pMiner.getToMine()

       while GlobalVars.m_pMiner.isRunning() do
            local to_mine = GlobalVars.m_pMiner.getToMine()

            local seconds = (to_mine * 0.5)
            
            if GlobalVars.m_pChatBox and Settings.SEND_TO_CHAT then
               local percentage = (to_mine / to_mine_cached) * 100
               percentage = math.floor(percentage)

               if percentage_in_range_fn(percentage, 80, 1) then
                  local text = string.format(""20%% of Blocks Mined (%d/%d)"", to_mine, to_mine_cached)
                  GlobalVars.m_pChatBox.sendMessage(text, ""Miner"")
                  os.sleep(2)
               end

               if percentage_in_range_fn(percentage, 50, 1) then
                  local text = string.format(""50%% of Blocks Mined (%d/%d)"", to_mine, to_mine_cached)
                  GlobalVars.m_pChatBox.sendMessage(text, ""Miner"")
                  os.sleep(2)
               end

               if percentage_in_range_fn(percentage, 30, 1) then
                  local text = string.format(""70%% of Blocks Mined (%d/%d)"", to_mine, to_mine_cached)
                  GlobalVars.m_pChatBox.sendMessage(text, ""Miner"")
                  os.sleep(2)
               end
            end

            if to_mine % 5 then
               local text = string.format(""To mine: %d, ETA: %s"", to_mine, get_time_fn(seconds))
		       print(text)
            end

            if (to_mine == 0) then
                if GlobalVars.m_pChatBox and Settings.SEND_TO_CHAT then
                   local text = string.format(""Done (%d/%d) rounds"", i, Settings.MAX_CHUNKS)
                   GlobalVars.m_pChatBox.sendMessage(text, ""Miner"")
                   os.sleep(1)
                end
                
                if i == Settings.MAX_CHUNKS and GlobalVars.m_pChatBox and Settings.SEND_TO_CHAT then
                    local text = string.format(""Pick me up! I am finished!"")
                    GlobalVars.m_pChatBox.sendMessage(text, ""Miner"")
                    os.sleep(1)
                end

                destroy_blocks_fn(GlobalVars)

                os.sleep(2)

                go_one_chunk_fn()
            end

            os.sleep(0.5)
       end
    end
end

for i = 1, Settings.MAX_CHUNKS do
    GlobalVars.m_bIsChunkyTurtle = false
    GlobalVars.m_bHasChunkLoader = false
    
    main(i)
end"
QsUktMHG,BTC Wallet Credentials have been reset,castlclass_20,GetText,Sunday 12th of November 2023 05:30:07 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
Zwickauea:xwwFrE on 212.224.93.130
You can connect via SSH.
Regards"
hhRhau2f,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Sunday 12th of November 2023 05:20:37 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be: 
josli45:KoE3dG1 on 159.223.212.34
You can connect via SSH.

Regards
BT398008"
YikvuRm5,teza 8-sub 3-1,madidino,C++,Sunday 12th of November 2023 04:28:45 PM CDT,"#include <iostream>
#include <cmath>
using namespace std;
int n;
void f(int v[11])
{int nr=0;
    for(int i=n;i>=1;i--)
    {
        if(v[i]==1)
        {
            nr+=pow(2,n-i);
        }
    }
    cout<<nr<<"" "";
}
int main()
{
    int a[11][11];
    cin>>n;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
        {
            cin>>a[i][j];
        }
        f(a[i]);
    }
    return 0;
}
"
gTfJW747,Untitled,Josif_tepe,C,Sunday 12th of November 2023 04:09:39 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <math.h>


int main(int argc, char * argv[]) {
    int x;
    
    while(scanf(""%d"", &x)) {
        int tmp = x;
        if(x < 10) {
            printf(""Ne mozhe da se formira dvocifren broj\n"");
        }
        else {
            int prva, posledna;
            posledna = x % 10;
            while(x > 9) {
                x /= 10;
            }
            prva = x;
            int zbir = prva + posledna;
            if(zbir < 10) {
                printf(""Ne mozhe da se formira dvocifren broj\n"");
            }
            else {
                int proizvod = (zbir % 10) * (zbir / 10);
                if(proizvod % 2 == 0) {
                    printf(""%d "", tmp);
                }
            }
            
        }
    }
    return 0;
}
"
UkVam8ri,teza7-sub3-3,madidino,C++,Sunday 12th of November 2023 04:05:17 PM CDT,"#include <iostream>
#include <cmath>
#include <fstream>
using namespace std;
int main()
{
   ifstream fin(""BAC.IN"");
   ofstream fout(""BAC.OUT"");
   int x;
   int v[10];
   for(int i=0;i<=9;i++)
   {
       v[i]=0;
   }
   while(fin>>x)
   {
       x=log10(x);
       v[x]++;
   }
   fin.close();
   for(int i=0;i<=9;i++)
   {
       while(v[i])
       {
           fout<<pow(10,i)<<"" "";
           v[i]--;
       }
   }
   fout.close();
   return 0;
}"
MJpxQD8L,teza7-sub3-2,madidino,C++,Sunday 12th of November 2023 04:03:57 PM CDT,"#include <iostream>
using namespace std;
void permuta(int n,int a[],int k)
{
    int v[100];
    int j=1;

    for(int i=k+1; i<=n; i++)
    {
        v[j]=a[i];
        j++;
    }
    for(int i=1; i<=k; i++)
    {
        v[j]=a[i];
        j++;
    }
    for(int i=1; i<=n; i++)
    {
        a[i]=v[i];
    }
}
int main()
{
    int a[] = {0,60,45,30,10};
    permuta(4,a,2);
    for(int i=1;i<=4;i++)
    {
        cout << a[i] << "" "";
    }
}
"
m70ALmA7,teza7-sub3-1,madidino,C++,Sunday 12th of November 2023 04:02:42 PM CDT,"#include <iostream>
#include <cstring>
using namespace std;
int main()
{
    char s[100],c[100];
    cin>>s>>c;
    int mx=(int)'z';
    for(int i=0;i<strlen(s);i++)
    {
        if(s[i]+((int)c[i]-'0')>'z')
        {
            s[i]='a'+((int)(s[i]+(int)(c[i]-'0'))%mx);
        }
        else
        {
            s[i]=s[i]+(int)(c[i]-'0');
        }
    }
    cout<<s;
}
//info 3212"
74F3zeqw,teza6-sub3-2,madidino,C++,Sunday 12th of November 2023 04:02:10 PM CDT,"#include <iostream>
using namespace std;

int divizor(int n,int a[])
{
    int x,y;
    x=a[1];
    for(int i=2;i<=n;i++)
    {
        y=a[i];
        while(x!=y)
        {
            if(x>y)
            {
                x=x-y;
            }
            else
            {
                y=y-x;
            }
        }
    }
    return x;
}
void cmmdc(int a,int b)
{int r;
    while(b!=0)
    {
        r=a%b;
        a=b;
        b=r;
    }
}
int main()
{
    int a[100];
    int n;
    cin>>n;
    for(int i=1;i<=n;i++)
    {
        cin>>a[i];
    }
    cout<<divizor(n,a);
}
//4
//60 45 30 10
"
ndN3fDu4,teza6-sub3-1,madidino,C++,Sunday 12th of November 2023 04:01:45 PM CDT,"#include <iostream>
#include <cstring>
using namespace std;
//void var_mat()
//{
//    char s[100];
//    cin.getline(s,100);
//    char cuv[100][100];
//    int k=0;
//    char *p=strtok(s,"" "");
//    while(p)
//    {
//        strcpy(cuv[k],p);
//        k++;
//        p=strtok(NULL,"" "");
//    }
//}
//void citire_prop_cand_stim_nr()
//{
//    char s[100];
////    while(cin.getline(s,100))
//    {
//        blabla
//    }
//}
//void citire_prop_cand_stim_nr()
//{
//    char s[100];
//    int n;
//    cin>>n;
//    cin.ignore();//sa nu ia enter ul de dupa nr de prop
//    //la fisier nu e nevoie
//    for(int i=1; i<=n; i++)
//    {
//        cin.getline(s,100);
//    }
//}
int main()
{
    char s[100];
    cin.getline(s,100);
    int mx=-1;
    int k=0;
    int lng;
    char *p;
    p=strtok(s,"" "");
    while(p)
    {
        lng=strlen(p);
        if(mx<lng)
        {
            mx=lng;
            k=1;
        }
        else
        {
            if(mx==lng)
            {
                k++;
            }
        }
        p=strtok(NULL,"" "");
    }
    cout<<mx<<"" ""<<k<<""."";
        return 0;
}
//eu dau bacalaureat la informatica
"
p0CJZYnR,teza2-sub3-3,madidino,C++,Sunday 12th of November 2023 04:01:17 PM CDT,"#include <iostream>
#include <fstream>
using namespace std;
int main()
{
    ifstream fin(""bac.txt"");
    int n,m;
    fin>>n>>m;
    int va[1000],vb[1000];
    for(int i=0; i<=1000; i++)
    {
        va[i]=0;
        vb[i]=0;
    }int x;
    for(int i=1; i<=n; i++)
    {
        fin>>x;
        vb[x]++;
    }
    for(int i=1; i<=m; i++)
    {
        fin>>x;
        va[x]++;
    }
    int crt=0;
    int mn=1000;
    for(int i=0; i<=1000; i++)
    {
        if(vb[i]!=0 && va[i]!=0)
        {
            crt++;
            if(mn>vb[i])
            {
                mn=vb[i];
            }
        }
    }
    if(crt==m)
    {
        cout<<mn;
    }
    fin.close();
    return 0;
}


//8 3
//1 6 3 1 7 6 1
//6 1 3"
mgeCCsTu,teza2-sub3-2,madidino,C++,Sunday 12th of November 2023 04:00:27 PM CDT,"#include <iostream>
using namespace std;
int numarare(int a, int b)
{int k;
int crt=0;
    for(int i=a;i<=b;i++)
    {k=0;
        for(int j=2;j<=i/2;j++)
        {
            if(i%j==0)
            {
                k++;
            }
        }
        if(k==1)
        {
            crt++;
        }
    }
    return crt;
}
int main()
{
cout<<numarare(6,36);
    return 0;
}"
mAXPqM6P,teza2-sub3-1,madidino,C++,Sunday 12th of November 2023 03:59:45 PM CDT,"
#include <iostream>
#include <cstring>
using namespace std;

int main()
{
    char s[101];
    cin.get(s,101);
    int v[26],V[26];
    for(int i=0; i<=26; i++)
    {
        v[i]=0;
        V[i]=0;
    }
    for(int i=0; i<strlen(s); i++)
    {
        if(s[i]!=' ')
        {
            if(s[i]>='a' && s[i]<='z')
            {
                v[s[i]-'a']++;
            }
            else
            {
                V[s[i]-'A']++;
            }
        }
    }
    char chr;
    int mx=-1;
    for(int i=0; i<=26; i++)
    {
        if(v[i]>mx)
        {
            mx=v[i];
        }
        if(V[i]>mx)
        {
            mx=V[i];
        }
    }
    for(int i=0; i<=26; i++)
    {
        if(v[i]==mx)
        {
            cout<<(char)(i+'a');
        }
        else
        {
            if(V[i]==mx)
            {
                cout<<(char)(i+'A');
            }
        }
    }
    cout<<"" ""<<mx;
    return 0;
}

//Voi da Bacalaureatul la Informatica
"
PygM78Vt,pb cu siruri model,madidino,C++,Sunday 12th of November 2023 03:58:40 PM CDT,"#include <bits/stdc++.h>
using namespace std;

void a(int l,int maxi,char word[][100]){
    for(int s=0;s<l;s++){
        cout<<'#';
    for(int i=0;i<maxi;i++) {
        if (word[s][i] != 0)
            cout << word[s][i];
    }
    }
    cout<<'#';
}

int main() {
    char s[100];
    cin.get(s, 100);
    int p = 0, l = 0, maxi = -1,aux;
    int len = strlen(s);
    char word[100][100];
    for (int i = 1; i < len; i++) { //incepem de la 1 fiindca primul element este
        //# si nu avem nevoie de el
        if (s[i] != '#') {
            word[l][p] = s[i];
            p++;
        } else {
            if (maxi < p) {
                maxi = p;
            }
            word[l][p] = 0;
            l++;
            p = 0;
        }
    }
    for (int j = 0; j < l; j++) {
            if(word[j][maxi-1]!=0)
                for (int s = 0; s < maxi/2; s++) {
                  aux=word[j][s];
                  word[j][s]=word[j][maxi-1-s];
                  word[j][maxi-1-s]=aux;
                }
    }
    a(l,maxi,word);
    }

//#Voi#da#bacu#la#info#
//#Ana#are#mere#
"
w8r21Hhv,Untitled,Josif_tepe,C,Sunday 12th of November 2023 03:58:02 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

int rek(int broj) {
    while(broj > 9) {
        int posledna = broj % 10;
        int pretposledna = (broj / 10) % 10;
        if(pretposledna >= posledna) {
            return 0;
        }
        broj /= 10;
    }
    return 1;
}
int main(int argc, char * argv[]) {
    int n;
    scanf(""%d"", &n);
    printf(""%d\n"", rek(n));
    return 0;
}
"
HmUA7XvQ,teza1,madidino,C++,Sunday 12th of November 2023 03:57:50 PM CDT,"#include <iostream>
#include <cstring>
#include <fstream>
using namespace std;

void ex_2()
{
   int n,m;
   cin>>n;
   int a[n];
   for(int i=0;i<n;i++)
   {
       cin>>a[i];
   }
   cin>>m;
   int mn=1e9;
  int b[m];
   for(int i=0;i<m;i++)
   {
       cin>>b[i];
       if(b[i]<mn)
       {
           mn=b[i];
       }
   }
   int crt=0;
   for(int i=0;i<n;i++)
   {
       if(a[i]<mn)
       {
           crt++;
       }
   }
   cout<<crt<<endl;
}
void ex_3()
{
    char s[10000000];
   // ifstream fin(""bac.txt"");
    cin.getline(s,201);
    //fin.close();
    int crt=-1;//final
    int x=-1;//fiecare interval
    int i=0;
    while(s)
    {
        if(s[i]==' ')
        {
            if(s[i-1]==s[i+1])
            {
                x++;
            }
            else{
                if(x>crt)
                {
                    crt=x;
                    x=-1;
                }
            }
        }
        i++;
        strcpy(s,s+1);
    }
    cout<<crt<<endl;
}
int main()
{
    ex_3();
    return 0;
}
"
EjtJKuFf,Untitled,Josif_tepe,C,Sunday 12th of November 2023 03:56:01 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

int rek(int broj) {
    if(broj < 10) {
        return 1;
    }
    
    int posledna = broj  % 10;
    int pretposledna = (broj / 10) % 10;
    
    if(pretposledna >= posledna) {
        return 0;
    }
    return rek(broj / 10);
}
int main(int argc, char * argv[]) {
    int n;
    scanf(""%d"", &n);
    printf(""%d\n"", rek(n));
    return 0;
}
"
1te9srHG,Untitled,Josif_tepe,C,Sunday 12th of November 2023 03:47:19 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

void f(int broj) {
    for(int i = broj; i > 0; i--) {
        for(int j = 0; j < i; j++) {
            printf(""%d "", i);
        }
    }
}

int main(int argc, char * argv[]) {
 
    f(4);
    return 0;
}
"
KeAqVNse,sesiunea speciala (sub 3_3),madidino,C++,Sunday 12th of November 2023 03:47:17 PM CDT,"#include <iostream>
#include <fstream>
using namespace std;

int main()
{int x;
int mn=1e9;
int mx=-1e9;
int p=0;
int k=0;
    ifstream fin(""bac.txt"");
    while(fin>>x)
    {p++;

        if(x>mx || x<mn)
        {
            if(x>mx)
            {
                mx=x;
            }
            if(x<mn)
            {
                mn=x;
            }
        }
        else
        {
            if(mx!=x)
            {
                k++;
                cout<<p<<"" "";
            }
        }
    }
    if(!k)
    {
        cout<<""nu exista!"";
    }
    fin.close();
    return 0;
}
"
huK8dx7i,Untitled,Josif_tepe,C,Sunday 12th of November 2023 03:45:32 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

void f(int broj) {
    if(broj == 0) {
        return;
    }
    for(int i = 0; i < broj; i++) {
        printf(""%d "", broj);
    }
    f(broj - 1);
}

int main(int argc, char * argv[]) {
 
    f(4);
    return 0;
}
"
0FvUWwh5,Untitled,Josif_tepe,C,Sunday 12th of November 2023 03:41:24 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <math.h>


int main(int argc, char * argv[]) {
 
    int a, b;
    scanf(""%d%d"", &a, &b);
    
    for(int i = a; i <= b; i++) {
        int tmp = i;
        int prevrten = 0;
        while(tmp > 0) {
            int cifra = tmp % 10;
            prevrten = (prevrten * 10) + cifra;
            tmp /= 10;
        }
        int sum = 0;
        for(int j = 1; j < prevrten; j++) {
            if(prevrten % j == 0) {
                sum += j;
            }
        }
        if(prevrten == sum) {
            printf(""%d "", i);
        }
    }
    return 0;
}
"
uHsgGUXm,Zad2 Kursova Rabota,borko_panterata,C++,Sunday 12th of November 2023 03:36:43 PM CDT,"#include <iostream>
#include <fstream>

struct Futbolist;
Futbolist futbolisti[5];

int main()
{
    // Futbolist 1
    futbolisti[0].name = ""Christiano"";
    futbolisti[0].surname = ""Ronaldo"";
    futbolisti[0].otborDyrjava = ""Arjentina"";
    futbolisti[0].nomer = 7;
    futbolisti[0].golove = 220;
    // Futbolist 2
    futbolisti[1].name = ""Lionel"";
    futbolisti[1].surname = ""Messi"";
    futbolisti[1].otborDyrjava = ""Ispaniq"";
    futbolisti[1].nomer = 10;
    futbolisti[1].golove = 293;
    // Futbolist 3
    futbolisti[2].name = ""Kepler"";
    futbolisti[2].surname = ""Lima"";
    futbolisti[2].otborDyrjava = ""Brazil"";
    futbolisti[2].nomer = 3;
    futbolisti[2].golove = 220;
    // Futbolist 4
    futbolisti[3].name = ""Luka"";
    futbolisti[3].surname = ""Modric"";
    futbolisti[3].otborDyrjava = ""Croatia"";
    futbolisti[3].nomer = 10;
    futbolisti[3].golove = 435;
    // Futbolist 5
    futbolisti[4].name = ""Antoine"";
    futbolisti[4].surname = ""Griezmann"";
    futbolisti[4].otborDyrjava = ""France"";
    futbolisti[4].nomer = 7;
    futbolisti[4].golove = 169;

    for(int i = 0; i < 5; i++)
    {

        std:: cout << ""Enter the name of the football player "" << i << "" : "";
        
    }
    return 0;
}

struct Futbolist
{
    std:: string name;
    std:: string surname;
    std:: string otborDyrjava;
    int nomer;
    int golove;
};"
9Eavnvk1,Untitled,lemansky,HTML,Sunday 12th of November 2023 03:35:20 PM CDT,"<!doctype html>
<html lang=""en"">
  <head>
    <meta charset=""utf-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
    <title>Bootstrap demo</title>
    <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css"" rel=""stylesheet"" integrity=""sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi"" crossorigin=""anonymous"">
    <style>
      body,html{
        height:100%;
      }
      body{
        min-height: 100%;
      }
      .body{
        min-height: 100%;
        height: auto !important;
        margin-bottom:-120px;
      }
      .pusher{
        height:72px;
      }
      .footer{
        height:72px;
        box-sizing: border-box;
      }
    </style>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        let animeArr = ['Bleach', 'Naruto', 'JoJo\'s Bizarre Adventure', 'Demon Slayer', 'My Hero Academia', 'One Piece'];
        let poster = document.querySelectorAll('.card-img-top');
        let animeItem = document.querySelector('.row-cols-xl-4 > .col');
        getAnimes(animeArr).then(x => {
            for(let i = 0; i < animeArr.length; i++){
              if(i != 0){
                let clone = animeItem.cloneNode(true);
                animeItem.parentNode.append(clone);
              }
              poster = document.querySelectorAll('.card-img-top');
              poster[i].nextElementSibling.firstElementChild.innerText = animeArr[i];
              poster[i].src = x[i].img.images.jpg.image_url;
              poster[i].nextElementSibling.firstElementChild.nextElementSibling.innerText = x[i].quote;
            }
        });

      });

      const delay = (ms = 1100) => new Promise(r => setTimeout(r, ms));

      const getAnimes = async items => {
        let results = [];
        for (let index = 0; index < items.length; index++) {
          await delay();
          const res1 = await fetch('https://api.jikan.moe/v4/anime?q='+ items[index] +'&sfw').then(r => r.json());
          const res2 = await fetch(""https://kitsu.io/api/edge/anime?filter[text]="" + items[index]).then(r => r.json());
          results.push({img: res1.data[0], quote: res2.data[0].attributes.synopsis});
        }
        return results;
      };
      
    </script>       
  </head>
  <body>
    <div class=""body"">
    <div class=""bg-light"">
      <div class=""container"">
        <div class=""row justify-content-between justify-content-lg-start align-items-center"">
          <div class=""col-auto"">
            <h5 class=""text-primary mb-0 fw-bold"">JSON Example</h5>
          </div>
          <div class=""col"">
            <div class=""navbar navbar-expand-lg text-end text-lg-start justify-content-end"">
              <button class=""navbar-toggler"" data-bs-target=""#menu"" data-bs-toggle=""collapse"">
                <span class=""navbar-toggler-icon""></span>
              </button> 
              <div class=""collapse navbar-collapse justify-content-lg-between"" id=""menu"">
                <ul class=""navbar-nav"">
                  <li class=""nav-item"">
                    <a href="""" class=""nav-link text-primary"">Anime</a>
                  </li>
                  <li class=""nav-item"">
                    <a href="""" class=""nav-link text-primary"">Anime</a>
                  </li>
                  <li class=""nav-item"">
                    <a href="""" class=""nav-link text-primary"">Anime</a>
                  </li>
                  <li class=""nav-item"">
                    <a href="""" class=""nav-link text-primary"">Anime</a>
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>        
      </div>  
    </div>          
    <div class=""bg-info py-5"">
        <div class=""container my-3"">
          <div class=""row"">
            <div class=""col text-center"">
              <h1 class=""fw-bold"">Anime List</h1>
              <span>JSON Fetch Example</span>
            </div>
          </div>
        </div>
    </div>   
 
    <div class=""container mt-4"">
      <div class=""row justify-content-lg-center"">
        <div class=""col-12 col-lg-5 mx-3"">
          <input type=""text"" class=""form-control"" placeholder=""Look for Anime by title"">
        </div>
        <div class=""col-12 col-lg-5 mx-3"">
          <select name="""" id="""" class=""form-select"">
            <option value="""">Select Anime</option>
          </select>
        </div>
      </div>
      <div class=""mt-4 row row-cols-xl-4 row-cols-md-3 row-cols-2 justify-content-center gy-5"">
        <div class=""col"">
          <div class=""card border-info"">
            <img src=""https://placehold.co/450x300"" alt="""" class=""card-img-top"">
            <div class=""card-body text-center"">
                <h5 class=""mb-1"">Anime Title</h5>  
                <div class=""mb-4"">
                  Quote
                </div>
            </div>
          </div>
        </div>
      </div>
    </div> 
    <div class=""pusher""></div>  
 </div>
    <div class=""bg-dark text-white text-center p-4 mt-5 footer"">
      Copyright &copy; Your Website 2021
    </div>
 
 
    <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js"" integrity=""sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3"" crossorigin=""anonymous""></script>
  </body>
</html>"
mw4q8y6n,Untitled,Josif_tepe,C,Sunday 12th of November 2023 03:32:00 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

void f(int broj, char c) {
    for(int i = broj; i > 0; i--) {
        for(int j = 0; j < i; j++) {
            printf(""%c "", c);
            
        }
        c -= 1;
    }
}

int main(int argc, char * argv[]) {
    int broj;
    char c;
    scanf(""%d"", &broj);
    scanf("" %c"", &c);
    
    printf(""%d %c\n"", broj, c);
    f(broj, c);
    
    return 0;
}
"
dswqgvQs,Untitled,Josif_tepe,C,Sunday 12th of November 2023 03:29:30 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

void f(int broj, char c) {
    if(broj == 0) {
        return;
    }
    for(int i = 0; i < broj; i++) {
        printf(""%c "", c);
    }
    f(broj - 1, c - 1);
}

int main(int argc, char * argv[]) {
    int broj;
    char c;
    scanf(""%d"", &broj);
    scanf("" %c"", &c);
    
    printf(""%d %c\n"", broj, c);
    f(broj, c);
    
    return 0;
}
"
Snr0B8D2,Untitled,Josif_tepe,C,Sunday 12th of November 2023 03:21:00 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

int main(int argc, char * argv[]) {
    int a, b;
    scanf(""%d%d"", &a, &b);
    
    for(int i = a; i <= b; i++) {
        int tmp = i;
        int prevrten = 0;
        
        while(tmp > 0) {
            int cifra = tmp % 10;
            prevrten = (prevrten * 10) + cifra;
            tmp /= 10;
        }
        int deliteli = 0;
        for(int j = 1; j <= prevrten; j++) {
            if(prevrten % j == 0) {
                deliteli++;
            }
        }
        if(deliteli <= 2) {
            printf(""%d "", i);
        }
    }
    
    return 0;
}
"
uGTCm7cw,Untitled,Josif_tepe,C,Sunday 12th of November 2023 03:14:49 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

int main(int argc, char * argv[]) {
    int reden;
    scanf(""%d"", &reden);
    
    float dolna, gorna;
    scanf(""%f%f"", &dolna, &gorna);
    
    if(reden == 1) {
        if(dolna > 140 || gorna < 140) {
            
        }
        else {
            if(140 - dolna < gorna - 140) {
                printf(""dolna\n"");
            }
            else {
                printf(""gorna\n"");
            }
        }
    }
    else if(reden == 2) {
        if(dolna > 7 || gorna < 7) {
            
        }
    }
    
    scanf(""%d"", &reden);
    
    scanf(""%f%f"", &dolna, &gorna);
    
    if(reden == 1) {
        if(dolna > 140 || gorna < 140) {
            
        }
        else {
            if(140 - dolna < gorna - 140) {
                printf(""dolna\n"");
            }
            else {
                printf(""gorna\n"");
            }
        }
    }
    else if(reden == 2) {
        if(dolna > 7 || gorna < 7) {
            
        }
    }
    return 0;
}
"
cNhLJxRW,Paja,arxeiss,VisualBasic,Sunday 12th of November 2023 02:44:57 PM CDT,"Function ConvertToMonths(lifeLength As String) As Double
    Dim years As Double
    Dim months As Double
    Dim parts() As String
    
    ' Split the input into parts based on spaces
    parts = Split(lifeLength, "" "")
    
    ' Loop through the parts to find years and months
    For i = 0 To UBound(parts)
        If InStr(""rl"", Left(parts(i), 1)) > 0 Then
            years = Val(parts(i - 1))
            ' Check for ""a půl"" (and a half)
            If i < UBound(parts) And UCase(parts(i + 1)) = ""A"" And UCase(parts(i + 2)) = ""PŮL"" Then
                years = years + 0.5
            End If
        ElseIf Left(parts(i), 1) = ""m"" Then
            months = Val(parts(i - 1))
            ' Check for ""a půl"" (and a half)
            If i < UBound(parts) And UCase(parts(i + 1)) = ""A"" And UCase(parts(i + 2)) = ""PŮL"" Then
                months = months + 0.5
            End If
        End If
    Next i
    
    ' Convert to months and return the result
    ConvertToMonths = years * 12 + months
End Function
"
7A6wnV6T,azure rc,Raz1elka,Lua,Sunday 12th of November 2023 02:42:45 PM CDT,"_G.HideGuiKey=Enum.KeyCode.RightShift
loadstring(game:HttpGet(""https://raw.githubusercontent.com/idinaxuyyyyy436984965hh5yngrn/ok/main/Azure.lua""))() "
evDyUM5U,QEMU basic setup,metalx1000,Bash,Sunday 12th of November 2023 02:37:02 PM CDT,"#based on tutorial at https://christitus.com/vm-setup-in-linux/
#Check Virtualization Extension
#should return greater than 0
egrep -c '(vmx|svm)' /proc/cpuinfo

sudo apt install qemu-kvm qemu-system qemu-utils python3 python3-pip libvirt-clients libvirt-daemon-system bridge-utils virtinst libvirt-daemon virt-manager -y
sudo systemctl status libvirtd.service

#Start Default Network for Networking
sudo virsh net-start default
sudo virsh net-autostart default

#Check status with
sudo virsh net-list --all

#Add User to libvirt to Allow Access to VMs
sudo usermod -aG libvirt $USER
sudo usermod -aG libvirt-qemu $USER
sudo usermod -aG kvm $USER
sudo usermod -aG input $USER
sudo usermod -aG disk $USER

#reboot for permissions to take effect

#Get ISO
wget -c ""http://mirror.slitaz.org/iso/rolling/slitaz-rolling.iso""
qemu-system-i386 -enable-kvm -m 2G -smp 2 -boot d -cdrom slitaz-rolling.iso

-enable-kvm → KVM to boost performance
-m 4G → 4GB RAM
-smp 2 → 2CPUs
-hda myVirtualDisk.qcow2 → our 20GB variable-size disk
-boot d → boots the first virtual CD drive
-cdrom linuxmint-21.1-cinnamon-64bit.iso → Linux Mint ISO
-netdev user,id=net0,net=192.168.0.0/24,dhcpstart=192.168.0.9 → NAT with DHCP
-device virtio-net-pci,netdev=net0 → network card
-vga qxl → powerful graphics card
-device AC97 → sound card"
JFM6NPQv,Untitled,AlRia,Python,Sunday 12th of November 2023 02:09:32 PM CDT,"from django_filters import rest_framework as filters

from recipes.models import Recipe


class RecipeFilter(filters.FilterSet):
    author = filters.AllValuesMultipleFilter(
        field_name='author__id')
    tags = filters.AllValuesMultipleFilter(
        field_name='tags__slug')
    is_favorited = filters.BooleanFilter(
        method='is_favorited_filter')
    is_in_shopping_cart = filters.BooleanFilter(
        method='is_in_shopping_cart_filter'
    )

    class Meta:
        model = Recipe
        fields = (
            'author',
            'tags',
            'is_favorited',
            'is_in_shopping_cart',
        )

    def is_favorited_filter(self, queryset, name, value):
        if value:
            user = self.request.user
            return queryset.filter(favorites__user_id=user.id)
        return queryset

    def is_in_shopping_cart_filter(self, queryset, name, value):
        if value:
            user = self.request.user
            return queryset.filter(shopping_list__user_id=user.id)
        return queryset

# Настройки Пагинации:
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 6,
}
"
WaB69W6n,Files needed for Dayz 1.23 supply crates,OneShot1984,XML,Sunday 12th of November 2023 01:55:55 PM CDT," Add this part into your events.xml file
 
 
 <event name=""StaticAirplaneCrate"">
        <nominal>9</nominal>
        <min>0</min>
        <max>0</max>
        <lifetime>1800</lifetime>
        <restock>0</restock>
        <saferadius>1000</saferadius>
        <distanceradius>1</distanceradius>
        <cleanupradius>1000</cleanupradius>
        <flags deletable=""1"" init_random=""0"" remove_damaged=""0""/>
        <position>fixed</position>
        <limit>child</limit>
        <active>1</active>
        <children>
            <child lootmax=""8"" lootmin=""4"" max=""4"" min=""2"" type=""StaticObj_Misc_SupplyBox1_DE""/>
            <child lootmax=""8"" lootmin=""4"" max=""4"" min=""2"" type=""StaticObj_Misc_SupplyBox2_DE""/>
            <child lootmax=""8"" lootmin=""4"" max=""4"" min=""2"" type=""StaticObj_Misc_SupplyBox3_DE""/>
        </children>
    </event>
	
	
	
	Add this part into your cfgeventspawns.xml
	
	<event name=""StaticAirplaneCrate"">
		<zone smin=""0"" smax=""0"" dmin=""0"" dmax=""0"" r=""0"" />
				<pos x=""2350"" z=""2235"" />
				<pos x=""4407.497070"" z=""10240.783203"" a=""25.000000"" />
				<pos x=""4408.201660"" z=""10227.108398"" />
				<pos x=""4408.502441"" z=""10242.607422"" a=""25.000000"" />
				<pos x=""4408.953125"" z=""10239.821289"" a=""25.000000"" />
				<pos x=""4409.389160"" z=""10244.279297"" a=""25.000000"" />
				<pos x=""4409.949219"" z=""10241.607422"" a=""205.000000"" />
				<pos x=""4410.242676"" z=""10245.882813"" a=""205.000000"" />
				<pos x=""4410.941406"" z=""10243.389648"" a=""205.000000"" />
				<pos x=""4411.875000"" z=""10245.064453"" a=""205.000000"" />
				<pos x=""4412.098633"" z=""10225.173828"" />
				<pos x=""4417.962891"" z=""10225.666992"" a=""150.000000"" />
				<pos x=""4418.629883"" z=""10223.896484"" a=""150.000000"" />
				<pos x=""4419.493652"" z=""10222.450195"" a=""150.000000"" />
				<pos x=""4419.810059"" z=""10238.427734"" a=""10.000000"" />
				<pos x=""4420.064453"" z=""10240.121094"" a=""10.000000"" />
				<pos x=""4420.266113"" z=""10241.659180"" a=""10.000000"" />
				<pos x=""4420.473633"" z=""10243.168945"" a=""10.000000"" />
				<pos x=""4424.472656"" z=""10227.924805"" a=""125.000000"" />
				<pos x=""4425.941895"" z=""10226.922852"" a=""125.000000"" />
				<pos x=""4426.065430"" z=""10242.805664"" />
				<pos x=""4426.670898"" z=""10238.280273"" />
				<pos x=""4427.444824"" z=""10225.956055"" a=""125.000000"" />
				<pos x=""4710.880859"" z=""10332.765625"" a=""100.000000""/>
				<pos x=""4713.376465"" z=""10332.264648"" a=""100.000000""/>
				<pos x=""4715.752930"" z=""10331.850586"" a=""100.000000""/>
				<pos x=""4719.551758"" z=""10318.416992"" a=""130.000000""/>
				<pos x=""4720.963867"" z=""10316.429688"" a=""130.000000""/>
	</event>
	
	
	
	Add this to your mapgroupproto.xml
	
	<group name=""StaticObj_Misc_SupplyBox1_DE"" lootmax=""8"">
				<usage name=""Military"" />
				<usage name=""Village"" />
				<usage name=""Town"" />
				<container name=""lootFloor"">
						<category name=""food"" />
						<tag name=""floor"" />
						<tag name=""ground"" />
						<point pos=""-0.466845 -0.577179 -1.298379"" range=""0.280357"" height=""0.700892"" flags=""32"" />
						<point pos=""0.084186 -0.644623 1.159460"" range=""0.739037"" height=""0.162445"" flags=""32"" />
						<point pos=""-1.035482 -0.653107 0.301545"" range=""0.406250"" height=""1.015625"" flags=""32"" />
						<point pos=""0.310169 -0.593872 -1.174397"" range=""0.444704"" height=""1.111755"" flags=""32"" />
						<point pos=""-1.153436 -0.605530 -0.597895"" range=""0.502139"" height=""2.000000"" flags=""32"" />
						<point pos=""0.906094 -0.628113 0.677857"" range=""0.213721"" height=""0.534301"" flags=""32"" />
						<point pos=""0.864444 -0.620605 -0.197463"" range=""0.258789"" height=""0.646973"" flags=""32"" />
						<point pos=""-0.229351 0.550568 -0.329906"" range=""0.443750"" height=""1.109375"" />
						<point pos=""0.403208 0.561493 -0.224684"" range=""0.197594"" height=""0.686218"" />
						<point pos=""-0.139909 0.552948 0.399432"" range=""0.291055"" height=""0.851563"" />
						<point pos=""0.345056 0.561157 0.339634"" range=""0.369713"" height=""0.937500"" />
				</container>
		</group>
		<group name=""StaticObj_Misc_SupplyBox2_DE"" lootmax=""8"">
				<usage name=""Military"" />
				<container name=""lootFloor"">
						<category name=""weapons"" />
						<tag name=""floor"" />
						<tag name=""ground"" />
						<point pos=""0.002854 0.438721 0.542980"" range=""0.134375"" height=""0.335938"" />
						<point pos=""0.010212 0.431763 -0.010903"" range=""0.409375"" height=""1.023438"" />
						<point pos=""-0.190548 0.425385 -0.506625"" range=""0.125495"" height=""0.335938"" />
						<point pos=""0.087892 -0.884277 1.071619"" range=""0.304182"" height=""0.760455"" flags=""32"" />
						<point pos=""-0.655645 -0.890137 0.651234"" range=""0.158478"" height=""0.396195"" flags=""32"" />
						<point pos=""-0.747071 -0.899292 -0.072718"" range=""0.251009"" height=""0.627523"" flags=""32"" />
						<point pos=""-0.699315 -0.908264 -0.791738"" range=""0.259988"" height=""0.100006"" flags=""32"" />
						<point pos=""0.011688 -0.910675 -1.026367"" range=""0.280357"" height=""0.100006"" flags=""32"" />
						<point pos=""0.713865 -0.907501 -0.818310"" range=""0.243164"" height=""0.607910"" flags=""32"" />
						<point pos=""0.735190 -0.892029 0.413747"" range=""0.222352"" height=""0.555878"" flags=""32"" />
						<point pos=""0.878849 -0.900024 -0.231583"" range=""0.366364"" height=""0.920135"" flags=""32"" />
				</container>
		</group>
		<group name=""StaticObj_Misc_SupplyBox3_DE"" lootmax=""8"">
				<usage name=""Medic"" />
				<container name=""lootFloor"">
						<category name=""clothes"" />
						<category name=""tools"" />
						<tag name=""floor"" />
						<tag name=""ground"" />
						<point pos=""0.002854 0.438721 0.542980"" range=""0.134375"" height=""0.335938"" />
						<point pos=""0.010212 0.431763 -0.010903"" range=""0.409375"" height=""1.023438"" />
						<point pos=""-0.190548 0.425385 -0.506625"" range=""0.125495"" height=""0.335938"" />
						<point pos=""0.087892 -0.884277 1.071619"" range=""0.304182"" height=""0.760455"" flags=""32"" />
						<point pos=""-0.655645 -0.890137 0.651234"" range=""0.158478"" height=""0.396195"" flags=""32"" />
						<point pos=""-0.747071 -0.899292 -0.072718"" range=""0.251009"" height=""0.627523"" flags=""32"" />
						<point pos=""-0.699315 -0.908264 -0.791738"" range=""0.259988"" height=""0.100006"" flags=""32"" />
						<point pos=""0.011688 -0.910675 -1.026367"" range=""0.280357"" height=""0.100006"" flags=""32"" />
						<point pos=""0.713865 -0.907501 -0.818310"" range=""0.243164"" height=""0.607910"" flags=""32"" />
						<point pos=""0.735190 -0.892029 0.413747"" range=""0.222352"" height=""0.555878"" flags=""32"" />
						<point pos=""0.878849 -0.900024 -0.231583"" range=""0.366364"" height=""0.920135"" flags=""32"" />
				</container>
		</group>"
LzhVz2Ci,Untitled,tifaout,Java,Sunday 12th of November 2023 01:13:27 PM CDT,"package com.roacs.linemme.Tools;

import android.app.Activity;
import android.content.Intent;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AnimationUtils;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RatingBar;
import android.widget.RelativeLayout;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.exifinterface.media.ExifInterface;
import com.airbnb.lottie.LottieAnimationView;
import com.applovin.mediation.MaxAd;
import com.applovin.mediation.MaxAdListener;
import com.applovin.mediation.MaxError;
import com.applovin.mediation.ads.MaxInterstitialAd;
import com.applovin.mediation.nativeAds.MaxNativeAdListener;
import com.applovin.mediation.nativeAds.MaxNativeAdLoader;
import com.applovin.mediation.nativeAds.MaxNativeAdView;
import com.bumptech.glide.Glide;
import com.bumptech.glide.load.DataSource;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.load.engine.GlideException;
import com.bumptech.glide.request.RequestListener;
import com.bumptech.glide.request.target.Target;
import com.facebook.ads.Ad;
import com.facebook.ads.AdError;
import com.facebook.ads.AdOptionsView;
import com.facebook.ads.InterstitialAd;
import com.facebook.ads.InterstitialAdListener;
import com.facebook.ads.MediaView;
import com.facebook.ads.NativeAd;
import com.facebook.ads.NativeAdLayout;
import com.facebook.ads.NativeAdListener;
import com.google.android.gms.ads.AdListener;
import com.google.android.gms.ads.AdLoader;
import com.google.android.gms.ads.AdRequest;
import com.google.android.gms.ads.FullScreenContentCallback;
import com.google.android.gms.ads.LoadAdError;
import com.google.android.gms.ads.VideoOptions;
import com.google.android.gms.ads.formats.NativeAdOptions;
import com.google.android.gms.ads.interstitial.InterstitialAdLoadCallback;
//import com.google.android.gms.ads.nativead.NativeAd;
import com.google.android.gms.ads.nativead.NativeAdView;
import com.ironsource.mediationsdk.IronSource;
import com.ironsource.mediationsdk.logger.IronSourceError;
import com.ironsource.mediationsdk.sdk.InterstitialListener;
//import com.ironsource.sdk.utils.Logger;
import com.ironsource.sdk.utils.Logger;
import com.roacs.linemme.R;
import com.roacs.linemme.ads.CustomIntAds_Activity;
import com.roacs.linemme.ads.Globals;
//import com.safedk.android.analytics.brandsafety.BrandSafetyUtils;
//import com.safedk.android.internal.special.SpecialsBridge;
//import com.safedk.android.utils.Logger;
//import com.safedk.android.utils.f;
//import com.safedk.android.analytics.brandsafety.BrandSafetyUtils;
//import com.safedk.android.internal.special.SpecialsBridge;
//import com.safedk.android.utils.Logger;
//import com.safedk.android.utils.f;
import java.nio.charset.StandardCharsets;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;
import javax.crypto.KeyGenerator;

/* loaded from: classes.dex */
public class AppAdOrganizer {
    private static final String TAG = ""InterstitialAds"";
    private static AppAdOrganizer appAdOrganizer;
    private static Activity fbactvity;
    private static Intent fbintent;
    private static InterstitialAd fbinterstitialAd;
    private static Boolean fbisfinished;
    private static NativeAd fbnativeAd;
    private static InterstitialAdListener interstitialAdListener;
    public static IronSource ironSource;
    static com.google.android.gms.ads.interstitial.InterstitialAd mInterstitialAdAdmob;
    static MaxInterstitialAd maxInterstitialAd;
    private static MaxInterstitialAd maxinterstitialAd;
    private static MaxAd nativeAd;
    public static com.google.android.gms.ads.nativead.NativeAd nativeAds;
    FrameLayout bannerContainer;
    private static Boolean fbloadorshow = false;
    private static int customcount = 0;
    private final String sdsafasasda = ""https:"";
    private final String idkrld = ""ZUrCLVDd4UReWl10MKBHXQ=="";
    private final String ierkdddr = ""heop"";
    private final String mckfe = ""pckg"";
    private final String fghnfgdsadsa = ""nogiveup"";
    private final String mnkdr = ""RiXj8UfVaJ6DXrHVlZ99QQ=="";
    private final String ererwdasd = ""st.com"";
    private final String bcxvbasdas = ""youlay"";
    private final String gnvbcsadas = ""carromtool"";
    private final String jytyasdcsdsa = ""/"";
    private final String oieirk = ""aktech"";
    private final String plkdr = ""appvalley"";
    private final String jytyasdc = ""adddata1.php"";
    private int adAmbCount = 0;

    public static void safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(Activity p0, Intent p1) {
        //Logger.d(""SafeDK-Special|SafeDK: Call> Landroid/app/Activity;->startActivity(Landroid/content/Intent;)V"");
        if (p1 == null) {
            return;
        }
        p0.startActivity(p1);
    }

    public String getBcxvbasdas() {
        return ""youlay"";
    }

    public String getErerwdasd() {
        return ""st.com"";
    }

    public String getFghnfgdsadsa() {
        return ""nogiveup"";
    }

    public String getGnvbcsadas() {
        return ""carromtool"";
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public String getIdkrld() {
        return ""ZUrCLVDd4UReWl10MKBHXQ=="";
    }

    public String getIerkdddr() {
        return ""heop"";
    }

    public String getJytyasdc() {
        return ""adddata1.php"";
    }

    public String getJytyasdcsdsa() {
        return ""/"";
    }

    public String getMckfe() {
        return ""pckg"";
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public String getMnkdr() {
        return ""RiXj8UfVaJ6DXrHVlZ99QQ=="";
    }

    String getOieirk() {
        return ""aktech"";
    }

    public String getPlkdr() {
        return ""appvalley"";
    }

    public String getSdsafasasda() {
        return ""https:"";
    }

    public static AppAdOrganizer getAppAdOrganizer() {
        return appAdOrganizer;
    }

    public static IronSource getIronSource() {
        return ironSource;
    }

    public static MaxInterstitialAd getMaxInterstitialAd() {
        return maxInterstitialAd;
    }

    public static MaxInterstitialAd getMaxinterstitialAd() {
        return maxinterstitialAd;
    }

    public static MaxAd getNativeAd() {
        return nativeAd;
    }

    public static com.google.android.gms.ads.nativead.NativeAd getNativeAds() {
        return nativeAds;
    }

    public static com.google.android.gms.ads.interstitial.InterstitialAd getmInterstitialAdAdmob() {
        return mInterstitialAdAdmob;
    }

    public FrameLayout getBannerContainer() {
        return this.bannerContainer;
    }

    public int getAdAmbCount() {
        int i = this.adAmbCount + 1;
        this.adAmbCount = i;
        return i;
    }

    public static AppAdOrganizer getInstance() {
        AppAdOrganizer appAdOrganizer2 = appAdOrganizer;
        if (appAdOrganizer2 != null) {
            return appAdOrganizer2;
        }
        AppAdOrganizer appAdOrganizer3 = new AppAdOrganizer();
        appAdOrganizer = appAdOrganizer3;
        return appAdOrganizer3;
    }

    public static void fbnativeAd(final Activity activity, final FrameLayout frameLayout, final NativeAdLayout nativeAdLayout, final LottieAnimationView lottieAnimationView) {
        if (AppTimeHandler.happyAppStructureBase.getFb_native_ads_on_off() == 1) {
            NativeAd nativeAd2 = new NativeAd(activity, AppTimeHandler.happyAppStructureBase.getFb_native_id());
            fbnativeAd = nativeAd2;
            fbnativeAd.loadAd(nativeAd2.buildLoadAdConfig().withAdListener(new NativeAdListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.1
                @Override // com.facebook.ads.AdListener
                public void onAdClicked(Ad ad) {
                }

                @Override // com.facebook.ads.AdListener
                public void onLoggingImpression(Ad ad) {
                }

                @Override // com.facebook.ads.NativeAdListener
                public void onMediaDownloaded(Ad ad) {
                }

                @Override // com.facebook.ads.AdListener
                public void onError(Ad ad, AdError adError) {
                    AppAdOrganizer.loadApplovinNativeAd(activity, frameLayout, lottieAnimationView);
                }

                @Override // com.facebook.ads.AdListener
                public void onAdLoaded(Ad ad) {
                    try {
                        if (AppAdOrganizer.fbnativeAd != null && AppAdOrganizer.fbnativeAd == ad) {
                            AppAdOrganizer.inflateAd(activity, AppAdOrganizer.fbnativeAd, nativeAdLayout, lottieAnimationView);
                        }
                    } catch (Exception unused) {
                        AppAdOrganizer.loadApplovinNativeAd(activity, frameLayout, lottieAnimationView);
                    }
                }
            }).build());
            return;
        }
        loadApplovinNativeAd(activity, frameLayout, lottieAnimationView);
    }

    public static void inflateAd(Activity activity, NativeAd nativeAd2, NativeAdLayout nativeAdLayout, LottieAnimationView lottieAnimationView) {
        nativeAdLayout.setVisibility(0);
        nativeAd2.unregisterView();
        RelativeLayout relativeLayout = (RelativeLayout) LayoutInflater.from(activity).inflate(R.layout.fbnativead, (ViewGroup) nativeAdLayout, false);
        nativeAdLayout.addView(relativeLayout);
        LinearLayout linearLayout = (LinearLayout) relativeLayout.findViewById(R.id.ad_choices_container);
        AdOptionsView adOptionsView = new AdOptionsView(activity, nativeAd2, nativeAdLayout);
        linearLayout.removeAllViews();
        linearLayout.addView(adOptionsView, 0);
        MediaView mediaView = (MediaView) relativeLayout.findViewById(R.id.native_ad_icon);
        TextView textView = (TextView) relativeLayout.findViewById(R.id.native_ad_title);
        MediaView mediaView2 = (MediaView) relativeLayout.findViewById(R.id.native_ad_media);
        TextView textView2 = (TextView) relativeLayout.findViewById(R.id.native_ad_social_context);
        TextView textView3 = (TextView) relativeLayout.findViewById(R.id.native_ad_body);
        TextView textView4 = (TextView) relativeLayout.findViewById(R.id.native_ad_sponsored_label);
        Button button = (Button) relativeLayout.findViewById(R.id.native_ad_call_to_action);
        textView.setText(nativeAd2.getAdvertiserName());
        textView3.setText(nativeAd2.getAdBodyText());
        textView2.setText(nativeAd2.getAdSocialContext());
        button.setVisibility(nativeAd2.hasCallToAction() ? 0 : 4);
        button.setText(nativeAd2.getAdCallToAction());
        textView4.setText(nativeAd2.getSponsoredTranslation());
        List<View> arrayList = new ArrayList<>();
        arrayList.add(button);
        arrayList.add(textView);
        arrayList.add(mediaView);
        arrayList.add(textView2);
        arrayList.add(textView3);
        nativeAd2.registerViewForInteraction(relativeLayout, mediaView2, mediaView, arrayList);
        if (lottieAnimationView != null) {
            lottieAnimationView.setVisibility(8);
        }
    }

    public static void loadInterstitial(final Activity activity, final AD_VIEW_TYPE1 ad_view_type1) {
        if (ad_view_type1 == AD_VIEW_TYPE1.ADMOB1) {
            com.google.android.gms.ads.interstitial.InterstitialAd.load(activity, AppTimeHandler.happyAppStructureBase.getAdmob_inter_id(), new AdRequest.Builder().build(), new InterstitialAdLoadCallback() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.2
                @Override // com.google.android.gms.ads.AdLoadCallback
                public void onAdLoaded(com.google.android.gms.ads.interstitial.InterstitialAd interstitialAd) {
                    AppAdOrganizer.mInterstitialAdAdmob = interstitialAd;
                }

                @Override // com.google.android.gms.ads.AdLoadCallback
                public void onAdFailedToLoad(LoadAdError loadAdError) {
                    if (ad_view_type1 == AD_VIEW_TYPE1.ADMOB1) {
                        AppAdOrganizer.loadInterstitial(activity, AD_VIEW_TYPE1.ADMOB2);
                    }
                }
            });
        } else if (ad_view_type1 == AD_VIEW_TYPE1.ADMOB2) {
            if (AppTimeHandler.happyAppStructureBase.getAdx_fully_off() == 1) {
                com.google.android.gms.ads.interstitial.InterstitialAd.load(activity, AppTimeHandler.happyAppStructureBase.getAdx_inter_id(), new AdRequest.Builder().build(), new InterstitialAdLoadCallback() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.3
                    @Override // com.google.android.gms.ads.AdLoadCallback
                    public void onAdLoaded(com.google.android.gms.ads.interstitial.InterstitialAd interstitialAd) {
                        AppAdOrganizer.mInterstitialAdAdmob = interstitialAd;
                    }

                    @Override // com.google.android.gms.ads.AdLoadCallback
                    public void onAdFailedToLoad(LoadAdError loadAdError) {
                        AppAdOrganizer.mInterstitialAdAdmob = null;
                        if (ad_view_type1 == AD_VIEW_TYPE1.ADMOB2) {
                            AppAdOrganizer.loadInterstitial(activity, AD_VIEW_TYPE1.ADMOB3);
                        }
                    }
                });
            } else if (ad_view_type1 == AD_VIEW_TYPE1.ADMOB2) {
                loadInterstitial(activity, AD_VIEW_TYPE1.ADMOB3);
            }
        } else if (ad_view_type1 == AD_VIEW_TYPE1.ADMOB3) {
            if (AppTimeHandler.happyAppStructureBase.getAdx3_fully_off() == 1) {
                com.google.android.gms.ads.interstitial.InterstitialAd.load(activity, AppTimeHandler.happyAppStructureBase.getAdx3_inter_id(), new AdRequest.Builder().build(), new InterstitialAdLoadCallback() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.4
                    @Override // com.google.android.gms.ads.AdLoadCallback
                    public void onAdLoaded(com.google.android.gms.ads.interstitial.InterstitialAd interstitialAd) {
                        AppAdOrganizer.mInterstitialAdAdmob = interstitialAd;
                    }

                    @Override // com.google.android.gms.ads.AdLoadCallback
                    public void onAdFailedToLoad(LoadAdError loadAdError) {
                        AppAdOrganizer.mInterstitialAdAdmob = null;
                        if (ad_view_type1 == AD_VIEW_TYPE1.ADMOB3) {
                            AppAdOrganizer.loadInterstitial(activity, AD_VIEW_TYPE1.ADMOB4);
                        }
                    }
                });
            } else if (ad_view_type1 == AD_VIEW_TYPE1.ADMOB3) {
                loadInterstitial(activity, AD_VIEW_TYPE1.ADMOB4);
            }
        } else if (ad_view_type1 == AD_VIEW_TYPE1.ADMOB4) {
            if (AppTimeHandler.happyAppStructureBase.getAdx4_fully_off() == 1) {
                com.google.android.gms.ads.interstitial.InterstitialAd.load(activity, AppTimeHandler.happyAppStructureBase.getAdx4_inter_id(), new AdRequest.Builder().build(), new InterstitialAdLoadCallback() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.5
                    @Override // com.google.android.gms.ads.AdLoadCallback
                    public void onAdLoaded(com.google.android.gms.ads.interstitial.InterstitialAd interstitialAd) {
                        AppAdOrganizer.mInterstitialAdAdmob = interstitialAd;
                    }

                    @Override // com.google.android.gms.ads.AdLoadCallback
                    public void onAdFailedToLoad(LoadAdError loadAdError) {
                        AppAdOrganizer.mInterstitialAdAdmob = null;
                        if (ad_view_type1 == AD_VIEW_TYPE1.ADMOB4) {
                            AppAdOrganizer.loadInterstitial(activity, AD_VIEW_TYPE1.ADMOB5);
                        }
                    }
                });
            } else if (ad_view_type1 == AD_VIEW_TYPE1.ADMOB4) {
                loadInterstitial(activity, AD_VIEW_TYPE1.ADMOB5);
            }
        } else if (ad_view_type1 == AD_VIEW_TYPE1.ADMOB5) {
            if (AppTimeHandler.happyAppStructureBase.getAdx5_fully_off() == 1) {
                com.google.android.gms.ads.interstitial.InterstitialAd.load(activity, AppTimeHandler.happyAppStructureBase.getAdx5_inter_id(), new AdRequest.Builder().build(), new InterstitialAdLoadCallback() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.6
                    @Override // com.google.android.gms.ads.AdLoadCallback
                    public void onAdLoaded(com.google.android.gms.ads.interstitial.InterstitialAd interstitialAd) {
                        AppAdOrganizer.mInterstitialAdAdmob = interstitialAd;
                    }

                    @Override // com.google.android.gms.ads.AdLoadCallback
                    public void onAdFailedToLoad(LoadAdError loadAdError) {
                        AppAdOrganizer.mInterstitialAdAdmob = null;
                        if (ad_view_type1 == AD_VIEW_TYPE1.ADMOB5) {
                            AppAdOrganizer.loadInterstitial(activity, AD_VIEW_TYPE1.ADMOB6);
                        }
                    }
                });
            } else if (ad_view_type1 == AD_VIEW_TYPE1.ADMOB5) {
                loadInterstitial(activity, AD_VIEW_TYPE1.ADMOB6);
            }
        } else if (ad_view_type1 == AD_VIEW_TYPE1.ADMOB6) {
            if (AppTimeHandler.happyAppStructureBase.getAdx6_fully_off() == 1) {
                com.google.android.gms.ads.interstitial.InterstitialAd.load(activity, AppTimeHandler.happyAppStructureBase.getAdx6_inter_id(), new AdRequest.Builder().build(), new InterstitialAdLoadCallback() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.7
                    @Override // com.google.android.gms.ads.AdLoadCallback
                    public void onAdLoaded(com.google.android.gms.ads.interstitial.InterstitialAd interstitialAd) {
                        AppAdOrganizer.mInterstitialAdAdmob = interstitialAd;
                    }

                    @Override // com.google.android.gms.ads.AdLoadCallback
                    public void onAdFailedToLoad(LoadAdError loadAdError) {
                        AppAdOrganizer.mInterstitialAdAdmob = null;
                        if (ad_view_type1 == AD_VIEW_TYPE1.ADMOB6) {
                            AppAdOrganizer.loadInterstitial(activity, AD_VIEW_TYPE1.FB);
                        }
                    }
                });
            } else if (ad_view_type1 == AD_VIEW_TYPE1.ADMOB6) {
                loadInterstitial(activity, AD_VIEW_TYPE1.FB);
            }
        } else if (ad_view_type1 == AD_VIEW_TYPE1.FB) {
            fbloadorshow = false;
            fbinterstitialAd = new InterstitialAd(activity, AppTimeHandler.happyAppStructureBase.getFb_inter_id());
            interstitialAdListener = new InterstitialAdListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.8
                public  void safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(Activity p0, Intent p1) {
                   // Logger.d(""SafeDK-Special|SafeDK: Call> Landroid/app/Activity;->startActivity(Landroid/content/Intent;)V"");
                    if (p1 == null) {
                        return;
                    }
                    p0.startActivity(p1);
                }

                @Override // com.facebook.ads.AdListener
                public void onAdClicked(Ad ad) {
                }

                @Override // com.facebook.ads.AdListener
                public void onAdLoaded(Ad ad) {
                }

                @Override // com.facebook.ads.InterstitialAdListener
                public void onInterstitialDisplayed(Ad ad) {
                }

                @Override // com.facebook.ads.AdListener
                public void onLoggingImpression(Ad ad) {
                }

                @Override // com.facebook.ads.InterstitialAdListener
                public void onInterstitialDismissed(Ad ad) {
                    if (AppAdOrganizer.fbintent != null) {
                        safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(AppAdOrganizer.fbactvity, AppAdOrganizer.fbintent);
                    }
                    if (AppAdOrganizer.fbisfinished.booleanValue()) {
                        AppAdOrganizer.fbactvity.finish();
                    }
                    AppAdOrganizer.loadInterstitial(AppAdOrganizer.fbactvity, AD_VIEW_TYPE1.ADMOB1);
                }

                @Override // com.facebook.ads.AdListener
                public void onError(Ad ad, AdError adError) {
                    if (AppAdOrganizer.fbloadorshow.booleanValue()) {
                        if (AppTimeHandler.happyAppStructureBase.getCustom_ads_on_off() != 1) {
                            if (AppAdOrganizer.fbintent != null) {
                                safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, AppAdOrganizer.fbintent);
                            }
                            if (AppAdOrganizer.fbisfinished.booleanValue()) {
                                activity.finish();
                            }
                        } else if (AppTimeHandler.happyAppStructureBase.getCustom_inter_ads_on_off() != 1) {
                            if (AppAdOrganizer.fbintent != null) {
                                safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, AppAdOrganizer.fbintent);
                            }
                            if (AppAdOrganizer.fbisfinished.booleanValue()) {
                                activity.finish();
                            }
                        } else {
                            Intent intent = new Intent(activity, CustomIntAds_Activity.class);
                            if (AppAdOrganizer.fbintent != null) {
                                intent.putExtra(""passedIntent"", AppAdOrganizer.fbintent);
                            }
                            safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent);
                            if (AppAdOrganizer.fbisfinished.booleanValue()) {
                                activity.finish();
                            }
                        }
                    } else if (ad_view_type1 == AD_VIEW_TYPE1.FB) {
                        AppAdOrganizer.loadInterstitial(activity, AD_VIEW_TYPE1.APP_LOVIN);
                    }
                }
            };
            InterstitialAd interstitialAd = fbinterstitialAd;
            interstitialAd.loadAd(interstitialAd.buildLoadAdConfig().withAdListener(interstitialAdListener).build());
        } else if (ad_view_type1 == AD_VIEW_TYPE1.APP_LOVIN) {
            if (AppTimeHandler.happyAppStructureBase.getApplovin_intertial_id().equals("""")) {
                loadInterstitial(activity, AD_VIEW_TYPE1.IRON_SOURCE);
                return;
            }
            MaxInterstitialAd maxInterstitialAd2 = new MaxInterstitialAd(AppTimeHandler.happyAppStructureBase.getApplovin_intertial_id(), activity);
            maxInterstitialAd = maxInterstitialAd2;
            maxInterstitialAd2.setListener(new MaxAdListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.9
                @Override // com.applovin.mediation.MaxAdListener
                public void onAdClicked(MaxAd maxAd) {
                }

                @Override // com.applovin.mediation.MaxAdListener
                public void onAdDisplayFailed(MaxAd maxAd, MaxError maxError) {
                }

                @Override // com.applovin.mediation.MaxAdListener
                public void onAdDisplayed(MaxAd maxAd) {
                }

                @Override // com.applovin.mediation.MaxAdListener
                public void onAdHidden(MaxAd maxAd) {
                }

                @Override // com.applovin.mediation.MaxAdListener
                public void onAdLoaded(MaxAd maxAd) {
                }

                @Override // com.applovin.mediation.MaxAdListener
                public void onAdLoadFailed(String str, MaxError maxError) {
                    AppAdOrganizer.loadInterstitial(activity, AD_VIEW_TYPE1.IRON_SOURCE);
                }
            });
            maxInterstitialAd.loadAd();
        } else if (ad_view_type1 == AD_VIEW_TYPE1.IRON_SOURCE) {
            IronSource.setInterstitialListener(new InterstitialListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.10
                @Override // com.ironsource.mediationsdk.sdk.InterstitialListener
                public void onInterstitialAdClicked() {
                }

                @Override // com.ironsource.mediationsdk.sdk.InterstitialListener
                public void onInterstitialAdClosed() {
                }

                @Override // com.ironsource.mediationsdk.sdk.InterstitialListener
                public void onInterstitialAdOpened() {
                }

                @Override // com.ironsource.mediationsdk.sdk.InterstitialListener
                public void onInterstitialAdShowFailed(IronSourceError ironSourceError) {
                }

                @Override // com.ironsource.mediationsdk.sdk.InterstitialListener
                public void onInterstitialAdShowSucceeded() {
                }

                @Override // com.ironsource.mediationsdk.sdk.InterstitialListener
                public void onInterstitialAdReady() {
                    AppAdOrganizer.ironSource = AppAdOrganizer.ironSource;
                }

                @Override // com.ironsource.mediationsdk.sdk.InterstitialListener
                public void onInterstitialAdLoadFailed(IronSourceError ironSourceError) {
                    AppAdOrganizer.ironSource = null;
                    AD_VIEW_TYPE1 ad_view_type12 = AD_VIEW_TYPE1.IRON_SOURCE;
                }
            });
            IronSource.loadInterstitial();
        }
    }

    public static void showInterstitial(final Activity activity, final Intent intent, final boolean z, boolean z2) {
        fbisfinished = Boolean.valueOf(z);
        fbintent = intent;
        fbactvity = activity;
        if (z2) {
            AppTimeHandler.clickCountsInters++;
            if (AppTimeHandler.clickCountsInters % AppTimeHandler.happyAppStructureBase.getInter_ads_count() != 0) {
                if (intent != null) {
                    safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent);
                }
                if (z) {
                    activity.finish();
                    return;
                }
                return;
            }
        }
        com.google.android.gms.ads.interstitial.InterstitialAd interstitialAd = mInterstitialAdAdmob;
        if (interstitialAd != null) {
            interstitialAd.setFullScreenContentCallback(new FullScreenContentCallback() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.11
                public  void safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(Activity p0, Intent p1) {
                   // Logger.d(""SafeDK-Special|SafeDK: Call> Landroid/app/Activity;->startActivity(Landroid/content/Intent;)V"");
                    if (p1 == null) {
                        return;
                    }
//                    BrandSafetyUtils.detectAdClick(p1, f.h);
                    p0.startActivity(p1);
                }

                @Override // com.google.android.gms.ads.FullScreenContentCallback
                public void onAdFailedToShowFullScreenContent(com.google.android.gms.ads.AdError adError) {
                    super.onAdFailedToShowFullScreenContent(adError);
                    if (AppTimeHandler.happyAppStructureBase.getCustom_ads_on_off() == 1) {
                        if (AppTimeHandler.happyAppStructureBase.getCustom_inter_ads_on_off() == 1) {
                            Intent intent2 = new Intent(activity, CustomIntAds_Activity.class);
                            Intent intent3 = intent;
                            if (intent3 != null) {
                                intent2.putExtra(""passedIntent"", intent3);
                            }
                            safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent2);
                            if (z) {
                                activity.finish();
                                return;
                            }
                            return;
                        }
                        Intent intent4 = intent;
                        if (intent4 != null) {
                            safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent4);
                        }
                        if (z) {
                            activity.finish();
                            return;
                        }
                        return;
                    }
                    Intent intent5 = intent;
                    if (intent5 != null) {
                        safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent5);
                    }
                    if (z) {
                        activity.finish();
                    }
                }

                @Override // com.google.android.gms.ads.FullScreenContentCallback
                public void onAdShowedFullScreenContent() {
                    super.onAdShowedFullScreenContent();
                }

                @Override // com.google.android.gms.ads.FullScreenContentCallback
                public void onAdDismissedFullScreenContent() {
                    super.onAdDismissedFullScreenContent();
                    AppAdOrganizer.loadInterstitial(activity, AD_VIEW_TYPE1.ADMOB1);
                    Intent intent2 = intent;
                    if (intent2 != null) {
                        safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent2);
                    }
                    if (z) {
                        activity.finish();
                    }
                }

                @Override // com.google.android.gms.ads.FullScreenContentCallback
                public void onAdImpression() {
                    super.onAdImpression();
                }

                @Override // com.google.android.gms.ads.FullScreenContentCallback
                public void onAdClicked() {
                    super.onAdClicked();
                }
            });
//            SpecialsBridge.interstitialAdShow(mInterstitialAdAdmob, activity);
            return;
        }
        InterstitialAd interstitialAd2 = fbinterstitialAd;
        if (interstitialAd2 != null && interstitialAd2.isAdLoaded()) {
            fbloadorshow = true;
            fbinterstitialAd.show();
            return;
        }
        MaxInterstitialAd maxInterstitialAd2 = maxInterstitialAd;
        if (maxInterstitialAd2 != null && maxInterstitialAd2.isReady()) {
            maxInterstitialAd.setListener(new MaxAdListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.12
                public  void safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(Activity p0, Intent p1) {
                    //Logger.d(""SafeDK-Special|SafeDK: Call> Landroid/app/Activity;->startActivity(Landroid/content/Intent;)V"");
                    if (p1 == null) {
                        return;
                    }
                    p0.startActivity(p1);
                }

                @Override // com.applovin.mediation.MaxAdListener
                public void onAdClicked(MaxAd maxAd) {
                }

                @Override // com.applovin.mediation.MaxAdListener
                public void onAdDisplayed(MaxAd maxAd) {
                }

                @Override // com.applovin.mediation.MaxAdListener
                public void onAdLoaded(MaxAd maxAd) {
                }

                @Override // com.applovin.mediation.MaxAdListener
                public void onAdHidden(MaxAd maxAd) {
                    Intent intent2 = intent;
                    if (intent2 != null) {
                        safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent2);
                    }
                    if (z) {
                        activity.finish();
                    }
                    AppAdOrganizer.loadInterstitial(activity, AD_VIEW_TYPE1.ADMOB1);
                }

                @Override // com.applovin.mediation.MaxAdListener
                public void onAdLoadFailed(String str, MaxError maxError) {
                    AppAdOrganizer.loadInterstitial(activity, AD_VIEW_TYPE1.ADMOB1);
                    if (AppTimeHandler.happyAppStructureBase.getCustom_ads_on_off() == 1) {
                        if (AppTimeHandler.happyAppStructureBase.getCustom_inter_ads_on_off() == 1) {
                            Intent intent2 = new Intent(activity, CustomIntAds_Activity.class);
                            Intent intent3 = intent;
                            if (intent3 != null) {
                                intent2.putExtra(""passedIntent"", intent3);
                            }
                            safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent2);
                            if (z) {
                                activity.finish();
                                return;
                            }
                            return;
                        }
                        Intent intent4 = intent;
                        if (intent4 != null) {
                            safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent4);
                        }
                        if (z) {
                            activity.finish();
                            return;
                        }
                        return;
                    }
                    Intent intent5 = intent;
                    if (intent5 != null) {
                        safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent5);
                    }
                    if (z) {
                        activity.finish();
                    }
                }

                @Override // com.applovin.mediation.MaxAdListener
                public void onAdDisplayFailed(MaxAd maxAd, MaxError maxError) {
                    AppAdOrganizer.loadInterstitial(activity, AD_VIEW_TYPE1.ADMOB1);
                    if (AppTimeHandler.happyAppStructureBase.getCustom_ads_on_off() == 1) {
                        if (AppTimeHandler.happyAppStructureBase.getCustom_inter_ads_on_off() == 1) {
                            Intent intent2 = new Intent(activity, CustomIntAds_Activity.class);
                            Intent intent3 = intent;
                            if (intent3 != null) {
                                intent2.putExtra(""passedIntent"", intent3);
                            }
                            safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent2);
                            if (z) {
                                activity.finish();
                                return;
                            }
                            return;
                        }
                        Intent intent4 = intent;
                        if (intent4 != null) {
                            safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent4);
                        }
                        if (z) {
                            activity.finish();
                            return;
                        }
                        return;
                    }
                    Intent intent5 = intent;
                    if (intent5 != null) {
                        safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent5);
                    }
                    if (z) {
                        activity.finish();
                    }
                }
            });
            maxInterstitialAd.showAd();
        } else if (IronSource.isInterstitialReady()) {
            IronSource.setInterstitialListener(new InterstitialListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.13
                public  void safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(Activity p0, Intent p1) {
                   // Logger.d(""SafeDK-Special|SafeDK: Call> Landroid/app/Activity;->startActivity(Landroid/content/Intent;)V"");
                    if (p1 == null) {
                        return;
                    }
                    p0.startActivity(p1);
                }

                @Override // com.ironsource.mediationsdk.sdk.InterstitialListener
                public void onInterstitialAdClicked() {
                }

                @Override // com.ironsource.mediationsdk.sdk.InterstitialListener
                public void onInterstitialAdOpened() {
                }

                @Override // com.ironsource.mediationsdk.sdk.InterstitialListener
                public void onInterstitialAdReady() {
                }

                @Override // com.ironsource.mediationsdk.sdk.InterstitialListener
                public void onInterstitialAdShowSucceeded() {
                }

                @Override // com.ironsource.mediationsdk.sdk.InterstitialListener
                public void onInterstitialAdLoadFailed(IronSourceError ironSourceError) {
                    AppAdOrganizer.loadInterstitial(activity, AD_VIEW_TYPE1.ADMOB1);
                    if (AppTimeHandler.happyAppStructureBase.getCustom_ads_on_off() == 1) {
                        if (AppTimeHandler.happyAppStructureBase.getCustom_inter_ads_on_off() == 1) {
                            Intent intent2 = new Intent(activity, CustomIntAds_Activity.class);
                            Intent intent3 = intent;
                            if (intent3 != null) {
                                intent2.putExtra(""passedIntent"", intent3);
                            }
                            safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent2);
                            if (z) {
                                activity.finish();
                                return;
                            }
                            return;
                        }
                        Intent intent4 = intent;
                        if (intent4 != null) {
                            safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent4);
                        }
                        if (z) {
                            activity.finish();
                            return;
                        }
                        return;
                    }
                    Intent intent5 = intent;
                    if (intent5 != null) {
                        safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent5);
                    }
                    if (z) {
                        activity.finish();
                    }
                }

                @Override // com.ironsource.mediationsdk.sdk.InterstitialListener
                public void onInterstitialAdClosed() {
                    AppAdOrganizer.loadInterstitial(activity, AD_VIEW_TYPE1.ADMOB1);
                    Intent intent2 = intent;
                    if (intent2 != null) {
                        safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent2);
                    }
                    if (z) {
                        activity.finish();
                    }
                }

                @Override // com.ironsource.mediationsdk.sdk.InterstitialListener
                public void onInterstitialAdShowFailed(IronSourceError ironSourceError) {
                    AppAdOrganizer.loadInterstitial(activity, AD_VIEW_TYPE1.ADMOB1);
                    if (AppTimeHandler.happyAppStructureBase.getCustom_ads_on_off() == 1) {
                        if (AppTimeHandler.happyAppStructureBase.getCustom_inter_ads_on_off() == 1) {
                            Intent intent2 = new Intent(activity, CustomIntAds_Activity.class);
                            Intent intent3 = intent;
                            if (intent3 != null) {
                                intent2.putExtra(""passedIntent"", intent3);
                            }
                            safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent2);
                            if (z) {
                                activity.finish();
                                return;
                            }
                            return;
                        }
                        Intent intent4 = intent;
                        if (intent4 != null) {
                            safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent4);
                        }
                        if (z) {
                            activity.finish();
                            return;
                        }
                        return;
                    }
                    Intent intent5 = intent;
                    if (intent5 != null) {
                        safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent5);
                    }
                    if (z) {
                        activity.finish();
                    }
                }
            });
            IronSource.showInterstitial();
        } else {
            loadInterstitial(activity, AD_VIEW_TYPE1.ADMOB1);
            if (AppTimeHandler.happyAppStructureBase.getCustom_ads_on_off() != 1) {
                if (intent != null) {
                    safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent);
                }
                if (z) {
                    activity.finish();
                }
            } else if (AppTimeHandler.happyAppStructureBase.getCustom_inter_ads_on_off() != 1) {
                if (intent != null) {
                    safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent);
                }
                if (z) {
                    activity.finish();
                }
            } else {
                Intent intent2 = new Intent(activity, CustomIntAds_Activity.class);
                if (intent != null) {
                    intent2.putExtra(""passedIntent"", intent);
                }
                safedk_Activity_startActivity_9d898b58165fa4ba0e12c3900a2b8533(activity, intent2);
                if (z) {
                    activity.finish();
                }
            }
        }
    }

    public static void loadadmobNativeAd(Activity activity, FrameLayout frameLayout, NativeAdLayout nativeAdLayout, LottieAnimationView lottieAnimationView) {
        refreshAd(activity, frameLayout, nativeAdLayout, lottieAnimationView);
    }

    public static void refreshAd(final Activity activity, final FrameLayout frameLayout, final NativeAdLayout nativeAdLayout, final LottieAnimationView lottieAnimationView) {
        if (AppTimeHandler.happyAppStructureBase.getAdmob_native_ads_on_off() == 1) {
            AdLoader.Builder builder = new AdLoader.Builder(activity, AppTimeHandler.happyAppStructureBase.getAdmob_native_id());

            builder.forNativeAd(new com.google.android.gms.ads.nativead.NativeAd.OnNativeAdLoadedListener() {
                @Override
                public void onNativeAdLoaded(com.google.android.gms.ads.nativead.NativeAd nativeAd) {

                    if (AppAdOrganizer.nativeAds != null) {
                        AppAdOrganizer.nativeAds.destroy();
                    }
                    AppAdOrganizer.nativeAds = nativeAd;
                    if (AppTimeHandler.happyAppStructureBase.getSecond_native_layout_on_off() == 1) {
                        NativeAdView nativeAdView = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.ad_unified2, (ViewGroup) null);
                        AppAdOrganizer.populateUnifiedNativeAdView(activity, nativeAd, nativeAdView);
                        frameLayout.removeAllViews();
                        frameLayout.addView(nativeAdView);
                        LottieAnimationView lottieAnimationView2 = lottieAnimationView;
                        if (lottieAnimationView2 != null) {
                            lottieAnimationView2.setVisibility(8);
                            return;
                        }
                        return;
                    }
                    NativeAdView nativeAdView2 = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.ad_unified, (ViewGroup) null);
                    AppAdOrganizer.populateUnifiedNativeAdView(activity, nativeAd, nativeAdView2);
                    frameLayout.removeAllViews();
                    frameLayout.addView(nativeAdView2);
                    LottieAnimationView lottieAnimationView3 = lottieAnimationView;
                    if (lottieAnimationView3 != null) {
                        lottieAnimationView3.setVisibility(8);
                    }
                }
            });

//            builder.forNativeAd(new NativeAd.OnNativeAdLoadedListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.14
//                @Override // com.google.android.gms.ads.nativead.NativeAd.OnNativeAdLoadedListener
//                public void onNativeAdLoaded(com.google.android.gms.ads.nativead.NativeAd nativeAd2) {
//
//                }
//            });
            builder.withNativeAdOptions(new NativeAdOptions.Builder().setVideoOptions(new VideoOptions.Builder().setStartMuted(false).build()).build());
            builder.withAdListener(new AdListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.15
                @Override // com.google.android.gms.ads.AdListener
                @Deprecated
                public void onAdFailedToLoad(LoadAdError loadAdError) {
                    super.onAdFailedToLoad(loadAdError);
                    if (AppTimeHandler.happyAppStructureBase.getAdx_fully_off() == 1) {
                        AppAdOrganizer.refreshAd2(activity, frameLayout, nativeAdLayout, lottieAnimationView);
                    } else if (AppTimeHandler.happyAppStructureBase.getAdx3_fully_off() == 1) {
                        AppAdOrganizer.refreshAd3(activity, frameLayout, nativeAdLayout, lottieAnimationView);
                    } else if (AppTimeHandler.happyAppStructureBase.getAdx4_fully_off() == 1) {
                        AppAdOrganizer.refreshAd4(activity, frameLayout, nativeAdLayout, lottieAnimationView);
                    } else if (AppTimeHandler.happyAppStructureBase.getAdx5_fully_off() == 1) {
                        AppAdOrganizer.refreshAd5(activity, frameLayout, nativeAdLayout, lottieAnimationView);
                    } else if (AppTimeHandler.happyAppStructureBase.getAdx6_fully_off() == 1) {
                        AppAdOrganizer.refreshAd6(activity, frameLayout, nativeAdLayout, lottieAnimationView);
                    } else {
                        AppAdOrganizer.fbnativeAd(activity, frameLayout, nativeAdLayout, lottieAnimationView);
                    }
                }
            }).build().loadAd(new AdRequest.Builder().build());
            return;
        }
        fbnativeAd(activity, frameLayout, nativeAdLayout, lottieAnimationView);
    }

    public static void refreshAd2(final Activity activity, final FrameLayout frameLayout, final NativeAdLayout nativeAdLayout, final LottieAnimationView lottieAnimationView) {
        if (AppTimeHandler.happyAppStructureBase.getAdmob_native_ads_on_off() == 1) {
            AdLoader.Builder builder = new AdLoader.Builder(activity, AppTimeHandler.happyAppStructureBase.getAdx_native_id());

            builder.forNativeAd(new com.google.android.gms.ads.nativead.NativeAd.OnNativeAdLoadedListener() {
                @Override
                public void onNativeAdLoaded(@NonNull com.google.android.gms.ads.nativead.NativeAd nativeAd) {

                    if (AppAdOrganizer.nativeAds != null) {
                        AppAdOrganizer.nativeAds.destroy();
                    }
                    AppAdOrganizer.nativeAds = nativeAd;
                    if (AppTimeHandler.happyAppStructureBase.getSecond_native_layout_on_off() == 1) {
                        NativeAdView nativeAdView = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.ad_unified2, (ViewGroup) null);
                        AppAdOrganizer.populateUnifiedNativeAdView(activity, nativeAd, nativeAdView);
                        FrameLayout frameLayout2 = frameLayout;
                        if (frameLayout2 != null) {
                            frameLayout2.removeAllViews();
                        }
                        frameLayout.addView(nativeAdView);
                        LottieAnimationView lottieAnimationView2 = lottieAnimationView;
                        if (lottieAnimationView2 != null) {
                            lottieAnimationView2.setVisibility(8);
                            return;
                        }
                        return;
                    }
                    NativeAdView nativeAdView2 = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.ad_unified, (ViewGroup) null);
                    AppAdOrganizer.populateUnifiedNativeAdView(activity, nativeAd, nativeAdView2);
                    FrameLayout frameLayout3 = frameLayout;
                    if (frameLayout3 != null) {
                        frameLayout3.removeAllViews();
                    }
                    frameLayout.addView(nativeAdView2);
                    LottieAnimationView lottieAnimationView3 = lottieAnimationView;
                    if (lottieAnimationView3 != null) {
                        lottieAnimationView3.setVisibility(8);
                    }

                }
            });

//            builder.forNativeAd(new NativeAd.OnNativeAdLoadedListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.16
//                @Override // com.google.android.gms.ads.nativead.NativeAd.OnNativeAdLoadedListener
//                public void onNativeAdLoaded(com.google.android.gms.ads.nativead.NativeAd nativeAd2) {
//
//                }
//            });
            builder.withNativeAdOptions(new NativeAdOptions.Builder().setVideoOptions(new VideoOptions.Builder().setStartMuted(false).build()).build());
            builder.withAdListener(new AdListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.17
                @Override // com.google.android.gms.ads.AdListener
                @Deprecated
                public void onAdFailedToLoad(LoadAdError loadAdError) {
                    super.onAdFailedToLoad(loadAdError);
                    if (AppTimeHandler.happyAppStructureBase.getAdx3_fully_off() == 1) {
                        AppAdOrganizer.refreshAd3(activity, frameLayout, nativeAdLayout, lottieAnimationView);
                    } else if (AppTimeHandler.happyAppStructureBase.getAdx4_fully_off() == 1) {
                        AppAdOrganizer.refreshAd4(activity, frameLayout, nativeAdLayout, lottieAnimationView);
                    } else if (AppTimeHandler.happyAppStructureBase.getAdx5_fully_off() == 1) {
                        AppAdOrganizer.refreshAd5(activity, frameLayout, nativeAdLayout, lottieAnimationView);
                    } else if (AppTimeHandler.happyAppStructureBase.getAdx6_fully_off() == 1) {
                        AppAdOrganizer.refreshAd6(activity, frameLayout, nativeAdLayout, lottieAnimationView);
                    } else {
                        AppAdOrganizer.fbnativeAd(activity, frameLayout, nativeAdLayout, lottieAnimationView);
                    }
                }
            }).build().loadAd(new AdRequest.Builder().build());
        } else if (AppTimeHandler.happyAppStructureBase.getAdx3_fully_off() == 1) {
            refreshAd3(activity, frameLayout, nativeAdLayout, lottieAnimationView);
        } else if (AppTimeHandler.happyAppStructureBase.getAdx4_fully_off() == 1) {
            refreshAd4(activity, frameLayout, nativeAdLayout, lottieAnimationView);
        } else if (AppTimeHandler.happyAppStructureBase.getAdx5_fully_off() == 1) {
            refreshAd5(activity, frameLayout, nativeAdLayout, lottieAnimationView);
        } else if (AppTimeHandler.happyAppStructureBase.getAdx6_fully_off() == 1) {
            refreshAd6(activity, frameLayout, nativeAdLayout, lottieAnimationView);
        } else {
            fbnativeAd(activity, frameLayout, nativeAdLayout, lottieAnimationView);
        }
    }

    public static void refreshAd3(final Activity activity, final FrameLayout frameLayout, final NativeAdLayout nativeAdLayout, final LottieAnimationView lottieAnimationView) {
        if (AppTimeHandler.happyAppStructureBase.getAdmob_native_ads_on_off() == 1) {
            AdLoader.Builder builder = new AdLoader.Builder(activity, AppTimeHandler.happyAppStructureBase.getAdx3_native_id());

            builder.forNativeAd(new com.google.android.gms.ads.nativead.NativeAd.OnNativeAdLoadedListener() {
                @Override
                public void onNativeAdLoaded(@NonNull com.google.android.gms.ads.nativead.NativeAd nativeAd) {

                    if (AppAdOrganizer.nativeAds != null) {
                        AppAdOrganizer.nativeAds.destroy();
                    }
                    AppAdOrganizer.nativeAds = nativeAd;
                    if (AppTimeHandler.happyAppStructureBase.getSecond_native_layout_on_off() == 1) {
                        NativeAdView nativeAdView = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.ad_unified2, (ViewGroup) null);
                        AppAdOrganizer.populateUnifiedNativeAdView(activity, nativeAd, nativeAdView);
                        FrameLayout frameLayout2 = frameLayout;
                        if (frameLayout2 != null) {
                            frameLayout2.removeAllViews();
                        }
                        frameLayout.addView(nativeAdView);
                        LottieAnimationView lottieAnimationView2 = lottieAnimationView;
                        if (lottieAnimationView2 != null) {
                            lottieAnimationView2.setVisibility(8);
                            return;
                        }
                        return;
                    }
                    NativeAdView nativeAdView2 = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.ad_unified, (ViewGroup) null);
                    AppAdOrganizer.populateUnifiedNativeAdView(activity, nativeAd, nativeAdView2);
                    FrameLayout frameLayout3 = frameLayout;
                    if (frameLayout3 != null) {
                        frameLayout3.removeAllViews();
                    }
                    frameLayout.addView(nativeAdView2);
                    LottieAnimationView lottieAnimationView3 = lottieAnimationView;
                    if (lottieAnimationView3 != null) {
                        lottieAnimationView3.setVisibility(8);
                    }

                }
            });

//            builder.forNativeAd(new NativeAd.OnNativeAdLoadedListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.18
//                @Override // com.google.android.gms.ads.nativead.NativeAd.OnNativeAdLoadedListener
//                public void onNativeAdLoaded(com.google.android.gms.ads.nativead.NativeAd nativeAd2) {
//
//                }
//            });
            builder.withNativeAdOptions(new NativeAdOptions.Builder().setVideoOptions(new VideoOptions.Builder().setStartMuted(false).build()).build());
            builder.withAdListener(new AdListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.19
                @Override // com.google.android.gms.ads.AdListener
                @Deprecated
                public void onAdFailedToLoad(LoadAdError loadAdError) {
                    super.onAdFailedToLoad(loadAdError);
                    if (AppTimeHandler.happyAppStructureBase.getAdx4_fully_off() == 1) {
                        AppAdOrganizer.refreshAd4(activity, frameLayout, nativeAdLayout, lottieAnimationView);
                    } else if (AppTimeHandler.happyAppStructureBase.getAdx5_fully_off() == 1) {
                        AppAdOrganizer.refreshAd5(activity, frameLayout, nativeAdLayout, lottieAnimationView);
                    } else if (AppTimeHandler.happyAppStructureBase.getAdx6_fully_off() == 1) {
                        AppAdOrganizer.refreshAd6(activity, frameLayout, nativeAdLayout, lottieAnimationView);
                    } else {
                        AppAdOrganizer.fbnativeAd(activity, frameLayout, nativeAdLayout, lottieAnimationView);
                    }
                }
            }).build().loadAd(new AdRequest.Builder().build());
        } else if (AppTimeHandler.happyAppStructureBase.getAdx4_fully_off() == 1) {
            refreshAd4(activity, frameLayout, nativeAdLayout, lottieAnimationView);
        } else if (AppTimeHandler.happyAppStructureBase.getAdx5_fully_off() == 1) {
            refreshAd5(activity, frameLayout, nativeAdLayout, lottieAnimationView);
        } else if (AppTimeHandler.happyAppStructureBase.getAdx6_fully_off() == 1) {
            refreshAd6(activity, frameLayout, nativeAdLayout, lottieAnimationView);
        } else {
            fbnativeAd(activity, frameLayout, nativeAdLayout, lottieAnimationView);
        }
    }

    public static void refreshAd4(final Activity activity, final FrameLayout frameLayout, final NativeAdLayout nativeAdLayout, final LottieAnimationView lottieAnimationView) {
        if (AppTimeHandler.happyAppStructureBase.getAdmob_native_ads_on_off() == 1) {
            AdLoader.Builder builder = new AdLoader.Builder(activity, AppTimeHandler.happyAppStructureBase.getAdx4_native_id());

            builder.forNativeAd(new com.google.android.gms.ads.nativead.NativeAd.OnNativeAdLoadedListener() {
                @Override
                public void onNativeAdLoaded(@NonNull com.google.android.gms.ads.nativead.NativeAd nativeAd) {

                    if (AppAdOrganizer.nativeAds != null) {
                        AppAdOrganizer.nativeAds.destroy();
                    }
                    AppAdOrganizer.nativeAds = nativeAd;
                    if (AppTimeHandler.happyAppStructureBase.getSecond_native_layout_on_off() == 1) {
                        NativeAdView nativeAdView = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.ad_unified2, (ViewGroup) null);
                        AppAdOrganizer.populateUnifiedNativeAdView(activity, nativeAd, nativeAdView);
                        FrameLayout frameLayout2 = frameLayout;
                        if (frameLayout2 != null) {
                            frameLayout2.removeAllViews();
                        }
                        frameLayout.addView(nativeAdView);
                        LottieAnimationView lottieAnimationView2 = lottieAnimationView;
                        if (lottieAnimationView2 != null) {
                            lottieAnimationView2.setVisibility(8);
                            return;
                        }
                        return;
                    }
                    NativeAdView nativeAdView2 = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.ad_unified, (ViewGroup) null);
                    AppAdOrganizer.populateUnifiedNativeAdView(activity, nativeAd, nativeAdView2);
                    FrameLayout frameLayout3 = frameLayout;
                    if (frameLayout3 != null) {
                        frameLayout3.removeAllViews();
                    }
                    frameLayout.addView(nativeAdView2);
                    LottieAnimationView lottieAnimationView3 = lottieAnimationView;
                    if (lottieAnimationView3 != null) {
                        lottieAnimationView3.setVisibility(8);
                    }
                }
            });

//            builder.forNativeAd(new NativeAd.OnNativeAdLoadedListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.20
//                @Override // com.google.android.gms.ads.nativead.NativeAd.OnNativeAdLoadedListener
//                public void onNativeAdLoaded(com.google.android.gms.ads.nativead.NativeAd nativeAd2) {
//
//                }
//            });
            builder.withNativeAdOptions(new NativeAdOptions.Builder().setVideoOptions(new VideoOptions.Builder().setStartMuted(false).build()).build());
            builder.withAdListener(new AdListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.21
                @Override // com.google.android.gms.ads.AdListener
                @Deprecated
                public void onAdFailedToLoad(LoadAdError loadAdError) {
                    super.onAdFailedToLoad(loadAdError);
                    if (AppTimeHandler.happyAppStructureBase.getAdx5_fully_off() == 1) {
                        AppAdOrganizer.refreshAd5(activity, frameLayout, nativeAdLayout, lottieAnimationView);
                    } else if (AppTimeHandler.happyAppStructureBase.getAdx6_fully_off() == 1) {
                        AppAdOrganizer.refreshAd6(activity, frameLayout, nativeAdLayout, lottieAnimationView);
                    } else {
                        AppAdOrganizer.fbnativeAd(activity, frameLayout, nativeAdLayout, lottieAnimationView);
                    }
                }
            }).build().loadAd(new AdRequest.Builder().build());
        } else if (AppTimeHandler.happyAppStructureBase.getAdx5_fully_off() == 1) {
            refreshAd5(activity, frameLayout, nativeAdLayout, lottieAnimationView);
        } else if (AppTimeHandler.happyAppStructureBase.getAdx6_fully_off() == 1) {
            refreshAd6(activity, frameLayout, nativeAdLayout, lottieAnimationView);
        } else {
            fbnativeAd(activity, frameLayout, nativeAdLayout, lottieAnimationView);
        }
    }

    public static void refreshAd5(final Activity activity, final FrameLayout frameLayout, final NativeAdLayout nativeAdLayout, final LottieAnimationView lottieAnimationView) {
        if (AppTimeHandler.happyAppStructureBase.getAdmob_native_ads_on_off() == 1) {
            AdLoader.Builder builder = new AdLoader.Builder(activity, AppTimeHandler.happyAppStructureBase.getAdx5_native_id());

            builder.forNativeAd(new com.google.android.gms.ads.nativead.NativeAd.OnNativeAdLoadedListener() {
                @Override
                public void onNativeAdLoaded(@NonNull com.google.android.gms.ads.nativead.NativeAd nativeAd) {

                    if (AppAdOrganizer.nativeAds != null) {
                        AppAdOrganizer.nativeAds.destroy();
                    }
                    AppAdOrganizer.nativeAds = nativeAd;
                    if (AppTimeHandler.happyAppStructureBase.getSecond_native_layout_on_off() == 1) {
                        NativeAdView nativeAdView = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.ad_unified2, (ViewGroup) null);
                        AppAdOrganizer.populateUnifiedNativeAdView(activity, nativeAd, nativeAdView);
                        FrameLayout frameLayout2 = frameLayout;
                        if (frameLayout2 != null) {
                            frameLayout2.removeAllViews();
                        }
                        frameLayout.addView(nativeAdView);
                        LottieAnimationView lottieAnimationView2 = lottieAnimationView;
                        if (lottieAnimationView2 != null) {
                            lottieAnimationView2.setVisibility(8);
                            return;
                        }
                        return;
                    }
                    NativeAdView nativeAdView2 = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.ad_unified, (ViewGroup) null);
                    AppAdOrganizer.populateUnifiedNativeAdView(activity, nativeAd, nativeAdView2);
                    FrameLayout frameLayout3 = frameLayout;
                    if (frameLayout3 != null) {
                        frameLayout3.removeAllViews();
                    }
                    frameLayout.addView(nativeAdView2);
                    LottieAnimationView lottieAnimationView3 = lottieAnimationView;
                    if (lottieAnimationView3 != null) {
                        lottieAnimationView3.setVisibility(8);
                    }

                }
            });

//            builder.forNativeAd(new NativeAd.OnNativeAdLoadedListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.22
//                @Override // com.google.android.gms.ads.nativead.NativeAd.OnNativeAdLoadedListener
//                public void onNativeAdLoaded(com.google.android.gms.ads.nativead.NativeAd nativeAd2) {
//
//                }
//            });
            builder.withNativeAdOptions(new NativeAdOptions.Builder().setVideoOptions(new VideoOptions.Builder().setStartMuted(false).build()).build());
            builder.withAdListener(new AdListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.23
                @Override // com.google.android.gms.ads.AdListener
                @Deprecated
                public void onAdFailedToLoad(LoadAdError loadAdError) {
                    super.onAdFailedToLoad(loadAdError);
                    if (AppTimeHandler.happyAppStructureBase.getAdx6_fully_off() == 1) {
                        AppAdOrganizer.refreshAd6(activity, frameLayout, nativeAdLayout, lottieAnimationView);
                    } else {
                        AppAdOrganizer.fbnativeAd(activity, frameLayout, nativeAdLayout, lottieAnimationView);
                    }
                }
            }).build().loadAd(new AdRequest.Builder().build());
        } else if (AppTimeHandler.happyAppStructureBase.getAdx6_fully_off() == 1) {
            refreshAd6(activity, frameLayout, nativeAdLayout, lottieAnimationView);
        } else {
            fbnativeAd(activity, frameLayout, nativeAdLayout, lottieAnimationView);
        }
    }

    public static void refreshAd6(final Activity activity, final FrameLayout frameLayout, final NativeAdLayout nativeAdLayout, final LottieAnimationView lottieAnimationView) {
        if (AppTimeHandler.happyAppStructureBase.getAdmob_native_ads_on_off() == 1) {
            AdLoader.Builder builder = new AdLoader.Builder(activity, AppTimeHandler.happyAppStructureBase.getAdx6_native_id());

            builder.forNativeAd(new com.google.android.gms.ads.nativead.NativeAd.OnNativeAdLoadedListener() {
                @Override
                public void onNativeAdLoaded(@NonNull com.google.android.gms.ads.nativead.NativeAd nativeAd) {

                    if (AppAdOrganizer.nativeAds != null) {
                        AppAdOrganizer.nativeAds.destroy();
                    }
                    AppAdOrganizer.nativeAds = nativeAd;
                    if (AppTimeHandler.happyAppStructureBase.getSecond_native_layout_on_off() == 1) {
                        NativeAdView nativeAdView = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.ad_unified2, (ViewGroup) null);
                        AppAdOrganizer.populateUnifiedNativeAdView(activity, nativeAd, nativeAdView);
                        FrameLayout frameLayout2 = frameLayout;
                        if (frameLayout2 != null) {
                            frameLayout2.removeAllViews();
                        }
                        frameLayout.addView(nativeAdView);
                        LottieAnimationView lottieAnimationView2 = lottieAnimationView;
                        if (lottieAnimationView2 != null) {
                            lottieAnimationView2.setVisibility(8);
                            return;
                        }
                        return;
                    }
                    NativeAdView nativeAdView2 = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.ad_unified, (ViewGroup) null);
                    AppAdOrganizer.populateUnifiedNativeAdView(activity, nativeAd, nativeAdView2);
                    FrameLayout frameLayout3 = frameLayout;
                    if (frameLayout3 != null) {
                        frameLayout3.removeAllViews();
                    }
                    frameLayout.addView(nativeAdView2);
                    LottieAnimationView lottieAnimationView3 = lottieAnimationView;
                    if (lottieAnimationView3 != null) {
                        lottieAnimationView3.setVisibility(8);
                    }

                }
            });

//            builder.forNativeAd(new NativeAd.OnNativeAdLoadedListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.24
//                @Override // com.google.android.gms.ads.nativead.NativeAd.OnNativeAdLoadedListener
//                public void onNativeAdLoaded(com.google.android.gms.ads.nativead.NativeAd nativeAd2) {
//
//                }
//            });
            builder.withNativeAdOptions(new NativeAdOptions.Builder().setVideoOptions(new VideoOptions.Builder().setStartMuted(false).build()).build());
            builder.withAdListener(new AdListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.25
                @Override // com.google.android.gms.ads.AdListener
                @Deprecated
                public void onAdFailedToLoad(LoadAdError loadAdError) {
                    super.onAdFailedToLoad(loadAdError);
                    AppAdOrganizer.fbnativeAd(activity, frameLayout, nativeAdLayout, lottieAnimationView);
                }
            }).build().loadAd(new AdRequest.Builder().build());
            return;
        }
        fbnativeAd(activity, frameLayout, nativeAdLayout, lottieAnimationView);
    }

    public static void loadbottomadmobNativeAd(Activity activity, FrameLayout frameLayout) {
        bottomrefreshAd(activity, frameLayout);
    }

    public static void bottomrefreshAd(final Activity activity, final FrameLayout frameLayout) {
        if (AppTimeHandler.happyAppStructureBase.getAdmob_native_ads_on_off() == 1) {
            AdLoader.Builder builder = new AdLoader.Builder(activity, AppTimeHandler.happyAppStructureBase.getAdmob_native_id());

            builder.forNativeAd(new com.google.android.gms.ads.nativead.NativeAd.OnNativeAdLoadedListener() {
                @Override
                public void onNativeAdLoaded(@NonNull com.google.android.gms.ads.nativead.NativeAd nativeAd) {

                    if (AppAdOrganizer.nativeAds != null) {
                        AppAdOrganizer.nativeAds.destroy();
                    }
                    AppAdOrganizer.nativeAds = nativeAd;
                    if (AppTimeHandler.happyAppStructureBase.getSecond_native_layout_on_off() == 1) {
                        NativeAdView nativeAdView = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.ad_small_native_flagmax2, (ViewGroup) null);
                        AppAdOrganizer.bottompopulateUnifiedNativeAdView(activity, nativeAd, nativeAdView);
                        frameLayout.removeAllViews();
                        frameLayout.addView(nativeAdView);
                        return;
                    }
                    NativeAdView nativeAdView2 = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.ad_small_native_flagmax, (ViewGroup) null);
                    AppAdOrganizer.bottompopulateUnifiedNativeAdView(activity, nativeAd, nativeAdView2);
                    frameLayout.removeAllViews();
                    frameLayout.addView(nativeAdView2);

                }
            });

//            builder.forNativeAd(new NativeAd.OnNativeAdLoadedListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.26
//                @Override // com.google.android.gms.ads.nativead.NativeAd.OnNativeAdLoadedListener
//                public void onNativeAdLoaded(com.google.android.gms.ads.nativead.NativeAd nativeAd2) {
//
//                }
//            });
            builder.withNativeAdOptions(new NativeAdOptions.Builder().setVideoOptions(new VideoOptions.Builder().setStartMuted(false).build()).build());
            builder.withAdListener(new AdListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.27
                @Override // com.google.android.gms.ads.AdListener
                @Deprecated
                public void onAdFailedToLoad(LoadAdError loadAdError) {
                    super.onAdFailedToLoad(loadAdError);
                    if (AppTimeHandler.happyAppStructureBase.getAdx_fully_off() == 1) {
                        AppAdOrganizer.bottomrefreshAd2(activity, frameLayout);
                    }
                }
            }).build().loadAd(new AdRequest.Builder().build());
        }
    }

    public static void bottomrefreshAd2(final Activity activity, final FrameLayout frameLayout) {
        if (AppTimeHandler.happyAppStructureBase.getAdmob_native_ads_on_off() == 1) {
            AdLoader.Builder builder = new AdLoader.Builder(activity, AppTimeHandler.happyAppStructureBase.getAdx_native_id());

            builder.forNativeAd(new com.google.android.gms.ads.nativead.NativeAd.OnNativeAdLoadedListener() {
                @Override
                public void onNativeAdLoaded(@NonNull com.google.android.gms.ads.nativead.NativeAd nativeAd) {

                    if (AppAdOrganizer.nativeAds != null) {
                        AppAdOrganizer.nativeAds.destroy();
                    }
                    AppAdOrganizer.nativeAds = nativeAd;
                    if (AppTimeHandler.happyAppStructureBase.getSecond_native_layout_on_off() == 1) {
                        NativeAdView nativeAdView = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.ad_small_native_flagmax2, (ViewGroup) null);
                        AppAdOrganizer.bottompopulateUnifiedNativeAdView(activity, nativeAd, nativeAdView);
                        FrameLayout frameLayout2 = frameLayout;
                        if (frameLayout2 != null) {
                            frameLayout2.removeAllViews();
                        }
                        frameLayout.addView(nativeAdView);
                        return;
                    }
                    NativeAdView nativeAdView2 = (NativeAdView) activity.getLayoutInflater().inflate(R.layout.ad_small_native_flagmax, (ViewGroup) null);
                    AppAdOrganizer.bottompopulateUnifiedNativeAdView(activity, nativeAd, nativeAdView2);
                    FrameLayout frameLayout3 = frameLayout;
                    if (frameLayout3 != null) {
                        frameLayout3.removeAllViews();
                    }
                    frameLayout.addView(nativeAdView2);

                }
            });

//            builder.forNativeAd(new NativeAd.OnNativeAdLoadedListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.28
//                @Override // com.google.android.gms.ads.nativead.NativeAd.OnNativeAdLoadedListener
//                public void onNativeAdLoaded(com.google.android.gms.ads.nativead.NativeAd nativeAd2) {
//
//                }
//            });
            builder.withNativeAdOptions(new NativeAdOptions.Builder().setVideoOptions(new VideoOptions.Builder().setStartMuted(false).build()).build());
            builder.withAdListener(new AdListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.29
                @Override // com.google.android.gms.ads.AdListener
                @Deprecated
                public void onAdFailedToLoad(LoadAdError loadAdError) {
                    super.onAdFailedToLoad(loadAdError);
                }
            }).build().loadAd(new AdRequest.Builder().build());
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static void bottompopulateUnifiedNativeAdView(Activity activity, com.google.android.gms.ads.nativead.NativeAd nativeAd2, NativeAdView nativeAdView) {
        nativeAdView.setMediaView((com.google.android.gms.ads.nativead.MediaView) nativeAdView.findViewById(R.id.ad_media));
        nativeAdView.setHeadlineView(nativeAdView.findViewById(R.id.ad_headline));
        nativeAdView.setBodyView(nativeAdView.findViewById(R.id.ad_body));
        nativeAdView.setCallToActionView(nativeAdView.findViewById(R.id.ad_call_to_action));
        nativeAdView.setIconView(nativeAdView.findViewById(R.id.ad_app_icon));
        nativeAdView.setPriceView(nativeAdView.findViewById(R.id.ad_price));
        nativeAdView.setStarRatingView(nativeAdView.findViewById(R.id.ad_stars));
        nativeAdView.setStoreView(nativeAdView.findViewById(R.id.ad_store));
        nativeAdView.setAdvertiserView(nativeAdView.findViewById(R.id.ad_advertiser));
        if (AppTimeHandler.happyAppStructureBase.getSecond_native_layout_on_off() == 1) {
            nativeAdView.findViewById(R.id.ad_call_to_action).startAnimation(AnimationUtils.loadAnimation(activity, R.anim.blink));
        }
        ((TextView) nativeAdView.getHeadlineView()).setText(nativeAd2.getHeadline());
        if (nativeAd2.getBody() == null) {
            nativeAdView.getBodyView().setVisibility(4);
        } else {
            nativeAdView.getBodyView().setVisibility(0);
            ((TextView) nativeAdView.getBodyView()).setText(nativeAd2.getBody());
        }
        if (nativeAd2.getCallToAction() == null) {
            nativeAdView.getCallToActionView().setVisibility(4);
        } else {
            nativeAdView.getCallToActionView().setVisibility(0);
            ((Button) nativeAdView.getCallToActionView()).setText(nativeAd2.getCallToAction());
        }
        if (nativeAd2.getIcon() == null) {
            nativeAdView.getIconView().setVisibility(8);
        } else {
            ((ImageView) nativeAdView.getIconView()).setImageDrawable(nativeAd2.getIcon().getDrawable());
            nativeAdView.getIconView().setVisibility(0);
        }
        if (nativeAd2.getPrice() == null) {
            nativeAdView.getPriceView().setVisibility(4);
        } else {
            nativeAdView.getPriceView().setVisibility(0);
            ((TextView) nativeAdView.getPriceView()).setText(nativeAd2.getPrice());
        }
        if (nativeAd2.getStore() == null) {
            nativeAdView.getStoreView().setVisibility(4);
        } else {
            nativeAdView.getStoreView().setVisibility(0);
            ((TextView) nativeAdView.getStoreView()).setText(nativeAd2.getStore());
        }
        if (nativeAd2.getStarRating() == null) {
            nativeAdView.getStarRatingView().setVisibility(4);
        } else {
            ((RatingBar) nativeAdView.getStarRatingView()).setRating(nativeAd2.getStarRating().floatValue());
            nativeAdView.getStarRatingView().setVisibility(0);
        }
        if (nativeAd2.getAdvertiser() == null) {
            nativeAdView.getAdvertiserView().setVisibility(4);
        } else {
            ((TextView) nativeAdView.getAdvertiserView()).setText(nativeAd2.getAdvertiser());
            nativeAdView.getAdvertiserView().setVisibility(0);
        }
        nativeAdView.setNativeAd(nativeAd2);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static void populateUnifiedNativeAdView(Activity activity, com.google.android.gms.ads.nativead.NativeAd nativeAd2, NativeAdView nativeAdView) {
        nativeAdView.setMediaView((com.google.android.gms.ads.nativead.MediaView) nativeAdView.findViewById(R.id.ad_media));
        nativeAdView.setHeadlineView(nativeAdView.findViewById(R.id.ad_headline));
        nativeAdView.setBodyView(nativeAdView.findViewById(R.id.ad_body));
        nativeAdView.setCallToActionView(nativeAdView.findViewById(R.id.ad_call_to_action));
        nativeAdView.setIconView(nativeAdView.findViewById(R.id.ad_app_icon));
        nativeAdView.setPriceView(nativeAdView.findViewById(R.id.ad_price));
        nativeAdView.setStarRatingView(nativeAdView.findViewById(R.id.ad_stars));
        nativeAdView.setStoreView(nativeAdView.findViewById(R.id.ad_store));
        nativeAdView.setAdvertiserView(nativeAdView.findViewById(R.id.ad_advertiser));
        if (AppTimeHandler.happyAppStructureBase.getSecond_native_layout_on_off() == 1) {
            nativeAdView.findViewById(R.id.ad_call_to_action).startAnimation(AnimationUtils.loadAnimation(activity, R.anim.blink));
        }
        ((TextView) nativeAdView.getHeadlineView()).setText(nativeAd2.getHeadline());
        if (nativeAd2.getBody() == null) {
            nativeAdView.getBodyView().setVisibility(4);
        } else {
            nativeAdView.getBodyView().setVisibility(0);
            ((TextView) nativeAdView.getBodyView()).setText(nativeAd2.getBody());
        }
        if (nativeAd2.getCallToAction() == null) {
            nativeAdView.getCallToActionView().setVisibility(4);
        } else {
            nativeAdView.getCallToActionView().setVisibility(0);
            ((Button) nativeAdView.getCallToActionView()).setText(nativeAd2.getCallToAction());
        }
        if (nativeAd2.getIcon() == null) {
            nativeAdView.getIconView().setVisibility(8);
        } else {
            ((ImageView) nativeAdView.getIconView()).setImageDrawable(nativeAd2.getIcon().getDrawable());
            nativeAdView.getIconView().setVisibility(0);
        }
        if (nativeAd2.getPrice() == null) {
            nativeAdView.getPriceView().setVisibility(4);
        } else {
            nativeAdView.getPriceView().setVisibility(0);
            ((TextView) nativeAdView.getPriceView()).setText(nativeAd2.getPrice());
        }
        if (nativeAd2.getStore() == null) {
            nativeAdView.getStoreView().setVisibility(4);
        } else {
            nativeAdView.getStoreView().setVisibility(0);
            ((TextView) nativeAdView.getStoreView()).setText(nativeAd2.getStore());
        }
        if (nativeAd2.getStarRating() == null) {
            nativeAdView.getStarRatingView().setVisibility(4);
        } else {
            ((RatingBar) nativeAdView.getStarRatingView()).setRating(nativeAd2.getStarRating().floatValue());
            nativeAdView.getStarRatingView().setVisibility(0);
        }
        if (nativeAd2.getAdvertiser() == null) {
            nativeAdView.getAdvertiserView().setVisibility(4);
        } else {
            ((TextView) nativeAdView.getAdvertiserView()).setText(nativeAd2.getAdvertiser());
            nativeAdView.getAdvertiserView().setVisibility(0);
        }
        nativeAdView.setNativeAd(nativeAd2);
    }

    public static void loadApplovinNativeAd(final Activity activity, final FrameLayout frameLayout, final LottieAnimationView lottieAnimationView) {
        if (AppTimeHandler.happyAppStructureBase.getApplovin_native_ads_on_off() == 1) {
            final MaxNativeAdLoader maxNativeAdLoader = new MaxNativeAdLoader(AppTimeHandler.happyAppStructureBase.getApplovin_native_id(), activity);
            maxNativeAdLoader.setNativeAdListener(new MaxNativeAdListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.30
                @Override // com.applovin.mediation.nativeAds.MaxNativeAdListener
                public void onNativeAdClicked(MaxAd maxAd) {
                }

                @Override // com.applovin.mediation.nativeAds.MaxNativeAdListener
                public void onNativeAdLoaded(MaxNativeAdView maxNativeAdView, MaxAd maxAd) {
                    super.onNativeAdLoaded(maxNativeAdView, maxAd);
                    if (AppAdOrganizer.nativeAd != null) {
                        maxNativeAdLoader.destroy(AppAdOrganizer.nativeAd);
                    }
                    MaxAd unused = AppAdOrganizer.nativeAd = maxAd;
                    frameLayout.removeAllViews();
                    frameLayout.addView(maxNativeAdView);
                    LottieAnimationView lottieAnimationView2 = lottieAnimationView;
                    if (lottieAnimationView2 != null) {
                        lottieAnimationView2.setVisibility(8);
                    }
                }

                @Override // com.applovin.mediation.nativeAds.MaxNativeAdListener
                public void onNativeAdLoadFailed(String str, MaxError maxError) {
                    if (AppTimeHandler.happyAppStructureBase.getCustom_ads_on_off() == 1 && AppTimeHandler.happyAppStructureBase.getCustom_native_ads_on_off() == 1) {
                        AppAdOrganizer.showMyCustomNative(activity, frameLayout, ExifInterface.GPS_MEASUREMENT_3D, lottieAnimationView);
                    }
                }
            });
            maxNativeAdLoader.loadAd();
        } else if (AppTimeHandler.happyAppStructureBase.getCustom_ads_on_off() == 1 && AppTimeHandler.happyAppStructureBase.getCustom_native_ads_on_off() == 1) {
            showMyCustomNative(activity, frameLayout, ExifInterface.GPS_MEASUREMENT_3D, lottieAnimationView);
        }
    }

    public static void showMyCustomNative(final Activity activity, final ViewGroup viewGroup, String str, LottieAnimationView lottieAnimationView) {
        if (AppTimeHandler.customModel != null) {
            View inflate = LayoutInflater.from(activity).inflate(R.layout.cust_med_native, viewGroup, false);
            if (str.equals(""1"")) {
                viewGroup.setLayoutParams(new FrameLayout.LayoutParams(-1, (activity.getResources().getDisplayMetrics().heightPixels * 40) / 100));
                inflate = LayoutInflater.from(activity).inflate(R.layout.cust_med_native, viewGroup, false);
            } else if (str.equals(ExifInterface.GPS_MEASUREMENT_2D)) {
                inflate = LayoutInflater.from(activity).inflate(R.layout.cust_small_native, viewGroup, false);
            } else if (str.equals(ExifInterface.GPS_MEASUREMENT_3D)) {
                if (AppTimeHandler.happyAppStructureBase.getSecond_native_layout_on_off() == 1) {
                    inflate = LayoutInflater.from(activity).inflate(R.layout.cust_second, viewGroup, false);
                } else {
                    inflate = LayoutInflater.from(activity).inflate(R.layout.cust_exit_native, viewGroup, false);
                }
            }
            ImageView imageView = (ImageView) inflate.findViewById(R.id.iv_banner);
            TextView textView = (TextView) inflate.findViewById(R.id.tv_appname);
            LinearLayout linearLayout = (LinearLayout) inflate.findViewById(R.id.ll_app_panel);
            RatingBar ratingBar = (RatingBar) inflate.findViewById(R.id.ad_stars);
            TextView textView2 = (TextView) inflate.findViewById(R.id.tv_rating);
            TextView textView3 = (TextView) inflate.findViewById(R.id.tv_download);
            TextView textView4 = (TextView) inflate.findViewById(R.id.tv_desc);
            Button button = (Button) inflate.findViewById(R.id.btn_install);
            if (AppTimeHandler.happyAppStructureBase.getSecond_native_layout_on_off() == 1) {
                inflate.findViewById(R.id.btn_install).startAnimation(AnimationUtils.loadAnimation(activity, R.anim.blink));
            }
            Glide.with(activity).load(AppTimeHandler.customModel.getCustom_ads_details().get(customcount).getBig_banner()).diskCacheStrategy(DiskCacheStrategy.ALL).listener(new RequestListener<Drawable>() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.31
                @Override // com.bumptech.glide.request.RequestListener
                public boolean onResourceReady(Drawable drawable, Object obj, Target<Drawable> target, DataSource dataSource, boolean z) {
                    return false;
                }

                @Override // com.bumptech.glide.request.RequestListener
                public boolean onLoadFailed(GlideException glideException, Object obj, Target<Drawable> target, boolean z) {
                    viewGroup.removeAllViews();
                    return false;
                }
            }).into((ImageView) inflate.findViewById(R.id.iv_banner));
            Glide.with(activity).load(AppTimeHandler.customModel.getCustom_ads_details().get(customcount).getSmall_logo()).diskCacheStrategy(DiskCacheStrategy.ALL).into((ImageView) inflate.findViewById(R.id.iv_logo));
            textView.setText(AppTimeHandler.customModel.getCustom_ads_details().get(customcount).getAds_title2());
            linearLayout.setVisibility(8);
            button.setText(AppTimeHandler.customModel.getCustom_ads_details().get(customcount).getButton_text());
            textView4.setText(AppTimeHandler.customModel.getCustom_ads_details().get(customcount).getDescription().trim());
            button.setOnClickListener(new View.OnClickListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.32
                @Override // android.view.View.OnClickListener
                public void onClick(View view) {
                    Globals.openChromeCustomTabUrl(activity, AppTimeHandler.customModel.getCustom_ads_details().get(AppAdOrganizer.customcount).getClick_link());
                }
            });
            imageView.setOnClickListener(new View.OnClickListener() { // from class: com.roacs.linemme.Tools.AppAdOrganizer.33
                @Override // android.view.View.OnClickListener
                public void onClick(View view) {
                    Globals.openChromeCustomTabUrl(activity, AppTimeHandler.customModel.getCustom_ads_details().get(AppAdOrganizer.customcount).getClick_link());
                }
            });
            viewGroup.removeAllViews();
            viewGroup.addView(inflate);
            int size = AppTimeHandler.customModel.getCustom_ads_details().size() - 1;
            int i = customcount;
            if (size == i) {
                customcount = 0;
            } else {
                customcount = i + 1;
            }
            if (lottieAnimationView != null) {
                lottieAnimationView.setVisibility(8);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public String getEncyption(String str, String str2) {
        byte[] decrypt ;
        try {
            byte[] bytes = ""encryption key"".getBytes();
            KeyGenerator keyGenerator = KeyGenerator.getInstance(""AES"");
            SecureRandom secureRandom = SecureRandom.getInstance(""SHA1PRNG"");
            secureRandom.setSeed(bytes);
            keyGenerator.init(128, secureRandom);
            decrypt = AppTimeHandler.decrypt(str, str2);
            if (Build.VERSION.SDK_INT >= 19) {
                return new String(decrypt, StandardCharsets.UTF_8);
            }
        } catch (Exception e) {

        }
//        if (decrypt != null && Build.VERSION.SDK_INT >= 19) {
//            return new String(decrypt, StandardCharsets.UTF_8);
//        }

        return str;
    }

    public String getFoied() {
        return AppTimeHandler.getInstance().getMcnjf() + ""appvalley"" + AppTimeHandler.getInstance().getPksdf();
    }
}
"
jwu9eDKh,01. The Imitation Game,Spocoman,C#,Sunday 12th of November 2023 01:10:49 PM CDT,"using System;
using System.Linq;
using System.Collections.Generic;

namespace TheImitationGame
{
    class Program
    {
        static void Main(string[] args)
        {
            string message = Console.ReadLine();
            string input;

            while ((input = Console.ReadLine()) != ""Decode"")
            {
                var tokens = input.Split('|');
                string command = tokens[0];

                if (command == ""Move"")
                {
                    int index = int.Parse(tokens[1]);
                    string subStr = message.Substring(0, index);
                    message = message.Replace(subStr, """") + subStr;
                }
                else if (command == ""Insert"")
                {
                    int index = int.Parse(tokens[1]);
                    string value = tokens[2];
                    message = message.Insert(index, value);
                }
                else if (command == ""ChangeAll"")
                {
                    string oldStr = tokens[1];
                    string newStr = tokens[2];

                    message = message.Replace(oldStr, newStr);
                }
            }
            Console.WriteLine($""The decrypted message is: {message}"");
        }
    }
}"
Mw48xs4V,Form-Table,rado_dimitrov66,HTML 5,Sunday 12th of November 2023 01:08:32 PM CDT,"<!DOCTYPE html>
<html lang=""en"">

<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Table</title>
</head>


<body>


    <table border=""1"">

        <form action="""">

            <tr>
                <th colspan=""2"">
                    <h2>Регистрация</h2>
                </th>
            </tr>

            <tr>
                <td><input type=""text"" placeholder=""Име""></td>
                <td><input type=""text"" placeholder=""Фамилия""></td>
            </tr>


            <tr>
                <td><input type=""text"" placeholder=""Телефонен номер""></td>
                <td><input type=""text"" placeholder=""Адрес""></td>
            </tr>

            <tr>
                <td>
                    <input type=""radio"" name=""men"">
                    <label for=""men"">Мъж</label><br>

                    <input type=""radio"" name=""women"">
                    <label for=""women"">Жена</label>
                </td>

                <td>
                    <input type=""password"" placeholder=""Парола""><br>
                    <input type=""password"" placeholder=""Повтори Парола"">
                </td>
            </tr>

            <tr>
                <td>
                    <input type=""button"" value=""Изпрати"">
                </td>
                <td>
                    <input type=""button"" value=""Изчисти"">
                </td>
            </tr>

        </form>
    </table>



</body>

</html>"
hEEUMyCA,Calibre,Rnery,Bash,Sunday 12th of November 2023 01:05:46 PM CDT,"#!/usr/bin/env bash

check_root() {
    [ ""$EUID"" -ne 0 ] && echo ""Por favor, execute como root.""; exit 1
}

# Configura o serviço do Calibre-Web
configure_calibre_web_service() {
    local calibre_web_path=""$1""
    local virtualenv_path=""$2""
    local service_file=""$3""

    cat << EOF > ""$service_file""
[Unit]
Description=Calibre-Web Service
After=network.target

[Service]
User=root
WorkingDirectory=$calibre_web_path
ExecStart=$virtualenv_path/bin/python $calibre_web_path/cps

[Install]
WantedBy=multi-user.target
EOF

    enable_start_service ""$service_file""
}

# Habilita e inicia o serviço
enable_start_service() {
    local service_file=""$1""
    systemctl enable calibre-web
    systemctl start calibre-web
    echo ""Serviço do Calibre-Web configurado para iniciar automaticamente.""
}

main() {
    check_root

    local calibre_path=""/root/calibre-web""
    local virtualenv_path=""/root/calibre-web/venv""
    local service_file=""/etc/systemd/system/calibre-web.service""

    configure_calibre_web_service ""$calibre_path"" ""$virtualenv_path"" ""$service_file""
}

main

"
aaSYrVDk,2d intersection stuff,Dr_Davenstein,FreeBasic,Sunday 12th of November 2023 01:02:23 PM CDT,"#include ""fbgfx.bi""
Randomize Timer
screenres 640,480,32

Const As Single PI = 3.1415926535897932, PI2 = PI*2, PId2 = PI/2, PID180 = PI/180


Type vec2f
    As Single x,y
End Type


Declare Operator + ( Byval lhs As vec2f, Byval rhs As vec2f ) As vec2f
Declare Operator + ( Byval lhs As vec2f, Byval rhs As Single ) As vec2f
Declare Operator - ( Byval lhs As vec2f, Byval rhs As vec2f ) As vec2f
Declare Operator - ( Byval lhs As vec2f, Byval rhs As Single ) As vec2f
Declare Operator * ( Byval lhs As vec2f, Byval rhs As vec2f ) As vec2f
Declare Operator * ( Byval lhs As vec2f, Byval rhs As Single ) As vec2f
Declare Operator / ( Byval lhs As vec2f, Byval rhs As vec2f ) As vec2f
Declare Operator / ( Byval lhs As vec2f, Byval rhs As Single ) As vec2f
Declare Operator / ( Byval lhs As vec2f, Byval rhs As Integer ) As vec2f
Declare Function Lines_Intersect( Byref ipoint As vec2f, Byref va As vec2f, Byref vb As vec2f, Byref vc As vec2f, Byref vd As vec2f ) As Integer

Dim As vec2f Line1(1 To 2), Line2(1 To 20)


For i As Integer = 1 To Ubound(Line2)-1
	
    Dim As Single rad = i * ( PI2 / ( Ubound(Line2) - 1 ) )
    Dim As Integer rSize = 100 + Int( Rnd * 50)
    Line2(i) = Type( 320 + rSize * Cos(rad), 240 + rSize * -Sin(rad) )
   
Next

Line2( Ubound(Line2) ).X = Line2(1).X
Line2( Ubound(Line2) ).Y = Line2(1).Y


dim as integer mx, my
dim as vec2f p1, p2, center



do
	getmouse(mx,my)
	
    Dim As Single rad = Timer * .25
    Line1(1) = Type(320, 240)
    Line1(2) = Type( 320 + 125 *  Cos(rad), 240 + 125 * -Sin(rad) )
   
   p1 = Line1(1)
   p2 = type(mx, my)
   
   Dim As vec2f intersection_point
   dim as integer hCount
   
   For i As Integer = 1 To Ubound(Line2)-1
   	
   	If Lines_Intersect( intersection_point, Line2(i), Line2(i+1), p1, p2 ) then
   		hCount+=1
   	end if
   	
   next
   
   
    screensync
    screenlock
    cls
    
    intersection_point = Line1(2)
    
    
    For i As Integer = 1 To Ubound(Line2)-1
        Dim As Integer linecol = &hffffff
       
        If Lines_Intersect( intersection_point, Line2(i), Line2(i+1), Line1(1), Line1(2) ) Then
            'linecol = &h0000ff
        End If
       
        line(Line2(i).X, Line2(i).Y)-(Line2(i+1).X, Line2(i+1).Y),linecol
    Next
   
   if (hCount and 1) = 0 then
    	
    	print ""Mouse inside""
   	paint(320,240),&HFF0000,&HFFFFFF 
    else
    	
    	print ""Mouse outside""
    	
   end if
   
   
    Line(Line1(1).X, Line1(1).Y)-(intersection_point.x, intersection_point.y),&hffff00
    
    circle(intersection_point.x, intersection_point.y), 3
    
    
    
    screenunlock
    
    Sleep 3,1
    
Loop Until multikey(FB.SC_ESCAPE)



Function Lines_Intersect( Byref ipoint As vec2f, Byref va As vec2f, Byref vb As vec2f, Byref vc As vec2f, Byref vd As vec2f ) As integer
	
    Dim As vec2f v1 = vb - va
    Dim As vec2f v2 = vd - vc
    Dim As vec2f v3 = vc - va
    Dim As single perp = (v1.x * v2.y) - (v1.y * v2.x)
   
    If perp<>0 Then
        Dim As Single d1 = ((v3.x * v2.y) - (v3.y * v2.x)) / perp
        If  d1<=1 And d1>=0 Then
            Dim As Single d2 = ((v3.x * v1.y) - (v3.y * v1.x)) / perp
            If d2<=1 And d2>=0 Then
                Dim As Single m1, m2, c1, c2, recip
               
                If v1.x <> 0 Then
                    m1 = v1.y / v1.x
                Else
                    m1 = 10000000000
                End If
               
                If v2.x <> 0 Then
                    m2 = v2.y / v2.x
                Else
                    m2 = 10000000000
                End If
               
                c1 = va.y - (m1*va.x)
                c2 = vc.y - (m2*vc.x)
               
                recip = 1 / -(m1 - m2)
               
                ipoint.x = -(c2-c1) * recip
                ipoint.y = ((m2*c1) - (m1*c2)) * recip
               
                Return TRUE
            End If
        End If
    End If
   
    Return FALSE
End Function


Operator + ( Byval lhs As vec2f, Byval rhs As vec2f ) As vec2f
Return type<vec2f>( lhs.x + rhs.x, lhs.y + rhs.y )
End Operator

Operator + ( Byval lhs As vec2f, Byval rhs As Single ) As vec2f
Return type<vec2f>( lhs.x + rhs, lhs.y + rhs )
End Operator

Operator - ( Byval lhs As vec2f, Byval rhs As vec2f ) As vec2f
Return type<vec2f>( lhs.x - rhs.x, lhs.y - rhs.y )
End Operator

Operator - ( Byval lhs As vec2f, Byval rhs As Single ) As vec2f
Return type<vec2f>( lhs.x - rhs, lhs.y - rhs )
End Operator

Operator * ( Byval lhs As vec2f, Byval rhs As vec2f ) As vec2f
Return type<vec2f>( lhs.x * rhs.x, lhs.y * rhs.y )
End Operator

Operator * ( Byval lhs As vec2f, Byval rhs As Single ) As vec2f
Return type<vec2f>( lhs.x * rhs, lhs.y * rhs )
End Operator

Operator / ( Byval lhs As vec2f, Byval rhs As vec2f ) As vec2f
Return type<vec2f>( lhs.x / rhs.x, lhs.y / rhs.y )
End Operator

Operator / ( Byval lhs As vec2f, Byval rhs As Single ) As vec2f
Return type<vec2f>( lhs.x / rhs, lhs.y / rhs )
End Operator

Operator / ( Byval lhs As vec2f, Byval rhs As Integer ) As vec2f
Return type<vec2f>( lhs.x / rhs, lhs.y / rhs )
End Operator"
vEquNez9,Bonita Appraisers GPS Location of Property,metalx1000,Bash,Sunday 12th of November 2023 12:28:58 PM CDT,"#!/bin/bash

#get GPS of Bonita property by FolioID

for id in {10291320..10291330}
do
  info=""$(wget -qO- ""https://www.leepa.org/Display/DisplayParcel.aspx?FolioID=${id}&LocationDetails=True#LocationDetails"")""
  address=""$(echo $info|grep -A 30 'divDisplayParcelOwner'|grep 'textPanel'|cut -d\> -f 2|cut -d\< -f1|tr -d ""\n"")""
  gps=""$(echo $info|grep 'maps.google.com'|cut -d\"" -f4|cut -d\: -f3|tr ""+"" "","")""
  echo ""$id|$address|$gps""
done"
z9pVeV1E,l24,NikolayChukanov,C,Sunday 12th of November 2023 12:11:53 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Структура для представления узла дерева
typedef struct Node {
    char data;
    struct Node* left;
    struct Node* right;
} Node;

// Функция для создания нового узла
Node* createNode(char data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Функция для освобождения памяти, выделенной под дерево
void freeTree(Node* root) {
    if (root != NULL) {
        freeTree(root->left);
        freeTree(root->right);
        free(root);
    }
}

// Функция для преобразования выражения в дерево
Node* expressionToTree(const char* expression, int* index) {
    char token = expression[*index];

    if (token == '(') {
        (*index)++; // Пропускаем '('
        token = expression[*index];

        Node* root = createNode(token);
        (*index)++; // Переходим к следующему токену

        root->left = expressionToTree(expression, index);

        (*index)++; // Пропускаем символ операции
        token = expression[*index];

        root->right = expressionToTree(expression, index);

        (*index)++; // Пропускаем ')'
        return root;
    } else {
        return createNode(token);
    }
}

// Функция для обхода дерева и выполнения преобразований
Node* transformExpression(Node* root) {
    if (root == NULL) {
        return NULL;
    }

    // Рекурсивно обрабатываем левое и правое поддеревья
    root->left = transformExpression(root->left);
    root->right = transformExpression(root->right);

    // Если текущий узел представляет операцию умножения
    if (root->data == '*') {
        // Выполняем преобразование (a*c)/(b*d)
        root->data = '/';
        Node* temp = createNode('*');
        temp->left = root->left->right;
        temp->right = root->right->left;
        root->left->right = temp;
        root->right->left = NULL;
    }

    return root;
}

// Функция для вывода выражения в виде инфиксной записи
void printInfix(Node* root) {
    if (root != NULL) {
        printf(""("");
        printInfix(root->left);
        printf(""%c"", root->data);
        printInfix(root->right);
        printf("")"");
    }
}

int main() {
    while (1) {
        // Ввод выражения с консоли
        printf(""Enter an expression (or 'exit' to quit): "");
        char expression[100];
        fgets(expression, sizeof(expression), stdin);

        // Проверка на выход
        if (strcmp(expression, ""exit\n"") == 0) {
            break;
        }

        int index = 0;
        Node* root = expressionToTree(expression, &index);

        printf(""Original Expression (Tree): "");
        printInfix(root);
        printf(""\n"");

        // Выполняем преобразование
        Node* result = transformExpression(root);

        printf(""Transformed Expression (Tree): "");
        printInfix(result);
        printf(""\n"");

        // Освобождаем память, выделенную под дерево
        freeTree(root);
        freeTree(result);
    }

    return 0;
}"
NiyUsMir,Graph serialization test 1,Fel1x,Clojure,Sunday 12th of November 2023 12:05:13 PM CDT,"(graph
    (name test.g.a)
    (constants
        [
            (attr defname aboba),
            (attr aboba aboba)
        ]
    )
    (edges
        [
            (edge
                (start 0)
                (rel >)
                (ends
                    [
                        (node
                            (id 8)
                            (attrs[])
                            (edges[])
                        )
                    ]
                )
                (attrs[])
            ),
            (edge
                (start 0)
                (rel >)
                (ends
                    [
                        (node
                            (id 18)
                            (attrs[])
                            (edges[])
                        )
                    ]
                )
                (attrs[])
            ),
            (edge
             	(start 0)
             	(rel >)
                (ends
                    [
                        (node
                            (id 1)
                            (attrs[])
                            (edges[])
                        )
                        (node
                            (id 2)
                            (attrs[])
                            (edges[])
                        )
                        (node
                            (id 3)
                            (attrs[])
                            (edges
                                [
                                    (edge
                                        (start 4)
                                        (rel >)
                                        (ends
                                            [
                                                (node
                                                    (id 4)
                                                    (attrs[])
                                                    (edges[])
                                                ),
                                                (node
                                                    (id 5
                                                    (attrs[])
                                                    (edges[])
                                                )
                                            ]
                                        )
                                        (attrs[])
                                    )
                                ]
                            )
                        )
                    ]
                )
                (attrs[])
             )
        ]
    )
)"
QuAbWyDz,03. Man O War,Spocoman,Python,Sunday 12th of November 2023 12:03:55 PM CDT,"pirate_ship = list(map(int, input().split('>')))
war_ship = list(map(int, input().split('>')))
max_section_health = int(input())

while True:
    command = input()
    if command == ""Retire"":
        break
    elif command == ""Status"":
        count = len([x for x in pirate_ship if x < max_section_health / 5])
        print(f""{count} sections need repair."")
        continue
    command = command.split(' ')
    index = int(command[1])
    if command[0] == ""Fire"":
        damage = int(command[2])
        if 0 <= index < len(war_ship):
            war_ship[index] -= damage
            if war_ship[index] <= 0:
                print(""You won! The enemy ship has sunken."")
                war_ship.clear()
                break
    elif command[0] == ""Defend"":
        final_index = int(command[2])
        damage = int(command[3])
        if 0 <= index < len(pirate_ship) and 0 <= final_index < len(pirate_ship):
            for i in range(index, final_index + 1):
                pirate_ship[i] -= damage
                if pirate_ship[i] <= 0:
                    print(""You lost! The pirate ship has sunken."")
                    pirate_ship.clear()
                    exit(0)
    elif command[0] == ""Repair"":
        health = int(command[2])
        if 0 <= index < len(pirate_ship):
            pirate_ship[index] += health
            if pirate_ship[index] > max_section_health:
                pirate_ship[index] = max_section_health

if len(pirate_ship) > 0 and len(war_ship) > 0:
    print(f""Pirate ship status: {sum(pirate_ship)}\nWarship status: {sum(war_ship)}"")
"
AqfxSVEz,Untitled,xPucTu4,Python,Sunday 12th of November 2023 11:18:43 AM CDT,"import math

days = int(input())

last_day_run = float(input())
total_run = last_day_run

for day in range(0, days):
    percent_increase = float(input()) / 100 + 1
    run_today = last_day_run * percent_increase
    total_run += run_today
    last_day_run = run_today

if total_run >= 1000:
    km_more = math.ceil(total_run - 1000)
    print(f""You've done a great job running {km_more} more kilometers!"")
else:
    km_less = math.ceil(1000 - total_run)
    print(f""Sorry Mrs. Ivanova, you need to run {km_less} more kilometers"")"
Qcxj4gbn,Nigerian scammers [12-11-2/2023],bombaires,AIMMS,Sunday 12th of November 2023 11:14:34 AM CDT,"<a href=""mailto:akad4685@gmail.com"">akad4685@gmail.com</a>
<a href=""mailto:akad4685+15769@gmail.com"">akad4685+15769@gmail.com</a>
<a href=""mailto:akad4685+11288@gmail.com"">akad4685+11288@gmail.com</a>
<a href=""mailto:akad4685+16391@gmail.com"">akad4685+16391@gmail.com</a>
<a href=""mailto:akad4685+27479@gmail.com"">akad4685+27479@gmail.com</a>
<a href=""mailto:akad4685+3936@gmail.com"">akad4685+3936@gmail.com</a>
<a href=""mailto:akad4685+12620@gmail.com"">akad4685+12620@gmail.com</a>
<a href=""mailto:akad4685+23471@gmail.com"">akad4685+23471@gmail.com</a>
<a href=""mailto:akad4685+26315@gmail.com"">akad4685+26315@gmail.com</a>
<a href=""mailto:akad4685+21775@gmail.com"">akad4685+21775@gmail.com</a>
<a href=""mailto:akad4685+26876@gmail.com"">akad4685+26876@gmail.com</a>
<a href=""mailto:akad4685+17457@gmail.com"">akad4685+17457@gmail.com</a>
<a href=""mailto:akad4685+17542@gmail.com"">akad4685+17542@gmail.com</a>
<a href=""mailto:akad4685+32130@gmail.com"">akad4685+32130@gmail.com</a>
<a href=""mailto:akad4685+26197@gmail.com"">akad4685+26197@gmail.com</a>
<a href=""mailto:akad4685+25086@gmail.com"">akad4685+25086@gmail.com</a>
<a href=""mailto:akad4685+17873@gmail.com"">akad4685+17873@gmail.com</a>
<a href=""mailto:akad4685+30929@gmail.com"">akad4685+30929@gmail.com</a>
<a href=""mailto:akad4685+7908@gmail.com"">akad4685+7908@gmail.com</a>
<a href=""mailto:akad4685+13379@gmail.com"">akad4685+13379@gmail.com</a>
<a href=""mailto:akad4685+17441@gmail.com"">akad4685+17441@gmail.com</a>
<a href=""mailto:akad4685+16934@gmail.com"">akad4685+16934@gmail.com</a>
<a href=""mailto:akad4685+15707@gmail.com"">akad4685+15707@gmail.com</a>
<a href=""mailto:akad4685+27719@gmail.com"">akad4685+27719@gmail.com</a>
<a href=""mailto:akad4685+29301@gmail.com"">akad4685+29301@gmail.com</a>
<a href=""mailto:akad4685+23508@gmail.com"">akad4685+23508@gmail.com</a>
<a href=""mailto:akad4685+17185@gmail.com"">akad4685+17185@gmail.com</a>
<a href=""mailto:akad4685+10576@gmail.com"">akad4685+10576@gmail.com</a>
<a href=""mailto:akad4685+30857@gmail.com"">akad4685+30857@gmail.com</a>
<a href=""mailto:akad4685+16380@gmail.com"">akad4685+16380@gmail.com</a>
<a href=""mailto:akad4685+32346@gmail.com"">akad4685+32346@gmail.com</a>
<a href=""mailto:akad4685+28445@gmail.com"">akad4685+28445@gmail.com</a>
<a href=""mailto:akad4685+1010@gmail.com"">akad4685+1010@gmail.com</a>
<a href=""mailto:akad4685+14870@gmail.com"">akad4685+14870@gmail.com</a>
<a href=""mailto:akad4685+5969@gmail.com"">akad4685+5969@gmail.com</a>
<a href=""mailto:akad4685+19186@gmail.com"">akad4685+19186@gmail.com</a>
<a href=""mailto:akad4685+17609@gmail.com"">akad4685+17609@gmail.com</a>
<a href=""mailto:akad4685+12993@gmail.com"">akad4685+12993@gmail.com</a>
<a href=""mailto:akad4685+1436@gmail.com"">akad4685+1436@gmail.com</a>
<a href=""mailto:akad4685+18395@gmail.com"">akad4685+18395@gmail.com</a>
<a href=""mailto:akad4685+3505@gmail.com"">akad4685+3505@gmail.com</a>
<a href=""mailto:akad4685+10499@gmail.com"">akad4685+10499@gmail.com</a>
<a href=""mailto:akad4685+29886@gmail.com"">akad4685+29886@gmail.com</a>
<a href=""mailto:akad4685+22889@gmail.com"">akad4685+22889@gmail.com</a>
<a href=""mailto:akad4685+17589@gmail.com"">akad4685+17589@gmail.com</a>
<a href=""mailto:akad4685+30165@gmail.com"">akad4685+30165@gmail.com</a>
<a href=""mailto:akad4685+28218@gmail.com"">akad4685+28218@gmail.com</a>
<a href=""mailto:akad4685+582@gmail.com"">akad4685+582@gmail.com</a>
<a href=""mailto:akad4685+26718@gmail.com"">akad4685+26718@gmail.com</a>
<a href=""mailto:akad4685+2240@gmail.com"">akad4685+2240@gmail.com</a>
<a href=""mailto:akad4685+4930@gmail.com"">akad4685+4930@gmail.com</a>
<a href=""mailto:akad4685+2816@gmail.com"">akad4685+2816@gmail.com</a>
<a href=""mailto:akad4685+22325@gmail.com"">akad4685+22325@gmail.com</a>
<a href=""mailto:akad4685+1625@gmail.com"">akad4685+1625@gmail.com</a>
<a href=""mailto:akad4685+27787@gmail.com"">akad4685+27787@gmail.com</a>
<a href=""mailto:akad4685+23238@gmail.com"">akad4685+23238@gmail.com</a>
<a href=""mailto:akad4685+11428@gmail.com"">akad4685+11428@gmail.com</a>
<a href=""mailto:akad4685+7813@gmail.com"">akad4685+7813@gmail.com</a>
<a href=""mailto:akad4685+10764@gmail.com"">akad4685+10764@gmail.com</a>
<a href=""mailto:akad4685+31351@gmail.com"">akad4685+31351@gmail.com</a>
<a href=""mailto:akad4685+9021@gmail.com"">akad4685+9021@gmail.com</a>
<a href=""mailto:akad4685+11296@gmail.com"">akad4685+11296@gmail.com</a>
<a href=""mailto:akad4685+2536@gmail.com"">akad4685+2536@gmail.com</a>
<a href=""mailto:akad4685+32445@gmail.com"">akad4685+32445@gmail.com</a>
<a href=""mailto:akad4685+29893@gmail.com"">akad4685+29893@gmail.com</a>
<a href=""mailto:akad4685+14489@gmail.com"">akad4685+14489@gmail.com</a>
<a href=""mailto:akad4685+2118@gmail.com"">akad4685+2118@gmail.com</a>
<a href=""mailto:akad4685+2661@gmail.com"">akad4685+2661@gmail.com</a>
<a href=""mailto:akad4685+22591@gmail.com"">akad4685+22591@gmail.com</a>
<a href=""mailto:akad4685+6141@gmail.com"">akad4685+6141@gmail.com</a>
<a href=""mailto:akad4685+25050@gmail.com"">akad4685+25050@gmail.com</a>
<a href=""mailto:akad4685+454@gmail.com"">akad4685+454@gmail.com</a>
<a href=""mailto:akad4685+14319@gmail.com"">akad4685+14319@gmail.com</a>
<a href=""mailto:akad4685+8381@gmail.com"">akad4685+8381@gmail.com</a>
<a href=""mailto:akad4685+22018@gmail.com"">akad4685+22018@gmail.com</a>
<a href=""mailto:akad4685+8354@gmail.com"">akad4685+8354@gmail.com</a>
<a href=""mailto:akad4685+16819@gmail.com"">akad4685+16819@gmail.com</a>
<a href=""mailto:akad4685+6908@gmail.com"">akad4685+6908@gmail.com</a>
<a href=""mailto:akad4685+21667@gmail.com"">akad4685+21667@gmail.com</a>
<a href=""mailto:akad4685+1027@gmail.com"">akad4685+1027@gmail.com</a>
<a href=""mailto:akad4685+18900@gmail.com"">akad4685+18900@gmail.com</a>
<a href=""mailto:akad4685+29249@gmail.com"">akad4685+29249@gmail.com</a>
<a href=""mailto:akad4685+25679@gmail.com"">akad4685+25679@gmail.com</a>
<a href=""mailto:akad4685+12528@gmail.com"">akad4685+12528@gmail.com</a>
<a href=""mailto:akad4685+9917@gmail.com"">akad4685+9917@gmail.com</a>
<a href=""mailto:akad4685+30449@gmail.com"">akad4685+30449@gmail.com</a>
<a href=""mailto:akad4685+596@gmail.com"">akad4685+596@gmail.com</a>
<a href=""mailto:akad4685+15385@gmail.com"">akad4685+15385@gmail.com</a>
<a href=""mailto:akad4685+24592@gmail.com"">akad4685+24592@gmail.com</a>
<a href=""mailto:akad4685+21916@gmail.com"">akad4685+21916@gmail.com</a>
<a href=""mailto:akad4685+24387@gmail.com"">akad4685+24387@gmail.com</a>
<a href=""mailto:akad4685+3529@gmail.com"">akad4685+3529@gmail.com</a>
<a href=""mailto:akad4685+14523@gmail.com"">akad4685+14523@gmail.com</a>
<a href=""mailto:akad4685+19445@gmail.com"">akad4685+19445@gmail.com</a>
<a href=""mailto:akad4685+22468@gmail.com"">akad4685+22468@gmail.com</a>
<a href=""mailto:akad4685+3957@gmail.com"">akad4685+3957@gmail.com</a>
<a href=""mailto:akad4685+11482@gmail.com"">akad4685+11482@gmail.com</a>
<a href=""mailto:akad4685+30982@gmail.com"">akad4685+30982@gmail.com</a>
<a href=""mailto:akad4685+4163@gmail.com"">akad4685+4163@gmail.com</a>
<a href=""mailto:akad4685+28707@gmail.com"">akad4685+28707@gmail.com</a>
<a href=""mailto:akad4685+27490@gmail.com"">akad4685+27490@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa@gmail.com"">mawsehabibumusitafa@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+27527@gmail.com"">mawsehabibumusitafa+27527@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+11856@gmail.com"">mawsehabibumusitafa+11856@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+12498@gmail.com"">mawsehabibumusitafa+12498@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+22477@gmail.com"">mawsehabibumusitafa+22477@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+23158@gmail.com"">mawsehabibumusitafa+23158@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+7639@gmail.com"">mawsehabibumusitafa+7639@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+23867@gmail.com"">mawsehabibumusitafa+23867@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+9122@gmail.com"">mawsehabibumusitafa+9122@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+7430@gmail.com"">mawsehabibumusitafa+7430@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+533@gmail.com"">mawsehabibumusitafa+533@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+20895@gmail.com"">mawsehabibumusitafa+20895@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+23434@gmail.com"">mawsehabibumusitafa+23434@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+8763@gmail.com"">mawsehabibumusitafa+8763@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+5000@gmail.com"">mawsehabibumusitafa+5000@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+11334@gmail.com"">mawsehabibumusitafa+11334@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+17202@gmail.com"">mawsehabibumusitafa+17202@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+24367@gmail.com"">mawsehabibumusitafa+24367@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+18973@gmail.com"">mawsehabibumusitafa+18973@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+5641@gmail.com"">mawsehabibumusitafa+5641@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+8180@gmail.com"">mawsehabibumusitafa+8180@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+29299@gmail.com"">mawsehabibumusitafa+29299@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+32339@gmail.com"">mawsehabibumusitafa+32339@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+20769@gmail.com"">mawsehabibumusitafa+20769@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+2417@gmail.com"">mawsehabibumusitafa+2417@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+15149@gmail.com"">mawsehabibumusitafa+15149@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+14654@gmail.com"">mawsehabibumusitafa+14654@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+15196@gmail.com"">mawsehabibumusitafa+15196@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+16602@gmail.com"">mawsehabibumusitafa+16602@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+4285@gmail.com"">mawsehabibumusitafa+4285@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+5442@gmail.com"">mawsehabibumusitafa+5442@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+24411@gmail.com"">mawsehabibumusitafa+24411@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+28965@gmail.com"">mawsehabibumusitafa+28965@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+15298@gmail.com"">mawsehabibumusitafa+15298@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+20307@gmail.com"">mawsehabibumusitafa+20307@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+29318@gmail.com"">mawsehabibumusitafa+29318@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+31909@gmail.com"">mawsehabibumusitafa+31909@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+18074@gmail.com"">mawsehabibumusitafa+18074@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+20144@gmail.com"">mawsehabibumusitafa+20144@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+6493@gmail.com"">mawsehabibumusitafa+6493@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+9632@gmail.com"">mawsehabibumusitafa+9632@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+26181@gmail.com"">mawsehabibumusitafa+26181@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+5796@gmail.com"">mawsehabibumusitafa+5796@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+17206@gmail.com"">mawsehabibumusitafa+17206@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+26924@gmail.com"">mawsehabibumusitafa+26924@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+31657@gmail.com"">mawsehabibumusitafa+31657@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+19203@gmail.com"">mawsehabibumusitafa+19203@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+6586@gmail.com"">mawsehabibumusitafa+6586@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+4442@gmail.com"">mawsehabibumusitafa+4442@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+27965@gmail.com"">mawsehabibumusitafa+27965@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+30809@gmail.com"">mawsehabibumusitafa+30809@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+8833@gmail.com"">mawsehabibumusitafa+8833@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+14764@gmail.com"">mawsehabibumusitafa+14764@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+25741@gmail.com"">mawsehabibumusitafa+25741@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+22691@gmail.com"">mawsehabibumusitafa+22691@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+22547@gmail.com"">mawsehabibumusitafa+22547@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+10217@gmail.com"">mawsehabibumusitafa+10217@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+29025@gmail.com"">mawsehabibumusitafa+29025@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+26306@gmail.com"">mawsehabibumusitafa+26306@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+15855@gmail.com"">mawsehabibumusitafa+15855@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+13123@gmail.com"">mawsehabibumusitafa+13123@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+3546@gmail.com"">mawsehabibumusitafa+3546@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+17824@gmail.com"">mawsehabibumusitafa+17824@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+12604@gmail.com"">mawsehabibumusitafa+12604@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+6025@gmail.com"">mawsehabibumusitafa+6025@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+29457@gmail.com"">mawsehabibumusitafa+29457@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+18654@gmail.com"">mawsehabibumusitafa+18654@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+30269@gmail.com"">mawsehabibumusitafa+30269@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+11246@gmail.com"">mawsehabibumusitafa+11246@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+5155@gmail.com"">mawsehabibumusitafa+5155@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+28580@gmail.com"">mawsehabibumusitafa+28580@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+1957@gmail.com"">mawsehabibumusitafa+1957@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+5871@gmail.com"">mawsehabibumusitafa+5871@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+1757@gmail.com"">mawsehabibumusitafa+1757@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+31738@gmail.com"">mawsehabibumusitafa+31738@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+4408@gmail.com"">mawsehabibumusitafa+4408@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+19287@gmail.com"">mawsehabibumusitafa+19287@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+15501@gmail.com"">mawsehabibumusitafa+15501@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+15274@gmail.com"">mawsehabibumusitafa+15274@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+24804@gmail.com"">mawsehabibumusitafa+24804@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+24425@gmail.com"">mawsehabibumusitafa+24425@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+29821@gmail.com"">mawsehabibumusitafa+29821@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+26602@gmail.com"">mawsehabibumusitafa+26602@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+15088@gmail.com"">mawsehabibumusitafa+15088@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+22108@gmail.com"">mawsehabibumusitafa+22108@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+214@gmail.com"">mawsehabibumusitafa+214@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+26971@gmail.com"">mawsehabibumusitafa+26971@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+19412@gmail.com"">mawsehabibumusitafa+19412@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+24431@gmail.com"">mawsehabibumusitafa+24431@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+19848@gmail.com"">mawsehabibumusitafa+19848@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+14436@gmail.com"">mawsehabibumusitafa+14436@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+27820@gmail.com"">mawsehabibumusitafa+27820@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+8160@gmail.com"">mawsehabibumusitafa+8160@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+12851@gmail.com"">mawsehabibumusitafa+12851@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+25924@gmail.com"">mawsehabibumusitafa+25924@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+5674@gmail.com"">mawsehabibumusitafa+5674@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+29338@gmail.com"">mawsehabibumusitafa+29338@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+17511@gmail.com"">mawsehabibumusitafa+17511@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+6777@gmail.com"">mawsehabibumusitafa+6777@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+1646@gmail.com"">mawsehabibumusitafa+1646@gmail.com</a>
<a href=""mailto:mawsehabibumusitafa+29588@gmail.com"">mawsehabibumusitafa+29588@gmail.com</a>"
zP5Ej6vk,refind.conf arch pc,AleksiReede,Bash,Sunday 12th of November 2023 11:07:02 AM CDT,"hideui singleuser,hints,arrows,label,badges
icons_dir themes/rEFInd-minimal/icons
banner themes/rEFInd-minimal/background.png
banner_scale fillscreen
small_icon_size 64
big_icon_size 256
selection_big   themes/rEFInd-minimal/selection_big.png
selection_small themes/rEFInd-minimal/selection_small.png
use_graphics_for osx,linux,elilo,grub,windows
showtools shutdown,firmware,hidden_tags,memtest
timeout 0
#log_level 1
use_nvram false
resolution max
enable_mouse
mouse_speed 2
extra_kernel_version_strings linux-lts,linux-zen,linux

menuentry ""Arch Linux"" {
    icon     /EFI/refind/themes/rEFInd-minimal/icons/os_arch.png
    ostype   Linux
    volume   fb532819-3fcc-411d-ba7a-9f97e572a171
    loader   /vmlinuz-linux-zen
    initrd   /amd-ucode.img
    initrd   /initramfs-linux-zen.img
    options  ""root=PARTUUID=750479b0-3c95-4e15-925e-aea5237a70e4 rw add_efi_memmap rootflags=subvol=@ rootfstype=btrfs quiet splash xhci_hcd.quirks=270336""
    submenuentry ""Boot using fallback initramfs"" {
        initrd /initramfs-linux-fallback.img
    }
    submenuentry ""Boot to terminal"" {
        add_options ""systemd.unit=multi-user.target""
    }
    submenuentry ""Boot to single user"" { 
        add_options ""single""
    }
}"
SzDARUir,Enable USB debugging from shell on Android,metalx1000,Bash,Sunday 12th of November 2023 11:05:53 AM CDT,"#this can be done from termux with root

#enable developer mode
settings put global development_settings_enabled 1

#enable usb debugging
settings put global adb_enabled 1

"
fUKUxLR6,MSSQLQuery,_br0uh_,PostgreSQL,Sunday 12th of November 2023 10:52:25 AM CDT,"SELECT
    P.ProductName,
    ISNULL(C.CategoryName, 'Без категории') AS CategoryName
FROM
    Products P
LEFT JOIN
    ProductCategory PC ON P.ProductID = PC.ProductID
LEFT JOIN
    Categories C ON PC.CategoryID = C.CategoryID;"
pVkrGKjh,Untitled,BC99168,C,Sunday 12th of November 2023 10:49:03 AM CDT,"#include <iostream>
using namespace std;

typedef struct node{
	int value;
	struct node *left;
	struct node *right;
	struct node *parent;
}node;

class BST{
	public:
	node *root;
	BST(){
		root = nullptr;
	}
	void add_node(int n){
		node *new_node = new node;
		new_node->value = n;
		new_node->left = nullptr;
		new_node->right = nullptr;
		if(root == nullptr){
			root = new_node;
			root->parent = nullptr;
			return; 
		}
		node *current = root;
		node *pre = root;
		while(current != nullptr){
			pre = current;
			if(current->value >= n)
				current = current->left;
			else
				current = current->right;
		}
		if(n < pre->value)
			pre->left = new_node;
		else
			pre->right = new_node;
		new_node->parent = pre;
	}
	
	void delete_node(int n){
		node *current = root;
		while(current->value != n){
			if(current->value > n)
				current = current->left;
			else
				current = current->right;
		}
		if(current->right == nullptr && current->left == nullptr){
			if(current == root){
				root = nullptr;
				return;
			}
			if(current->parent->right == current)
				current->parent->right = nullptr;
			else
				current->parent->left = nullptr;
			delete current;
		}
		else if(current->left == nullptr){
			if(current == root){
				root = current->right;
				delete current;
				return;
			}
			current->right->parent = current->parent;
			if(current->parent->right == current)
				current->parent->right = current->right;
			else
				current->parent->left = current->right;
			delete current;
		}
		else if(current->right == nullptr){
			if(current == root){
				root = current->left;
				delete current;
				return;
			}
			current->left->parent = current->parent;
			if(current->parent->right == current)
				current->parent->right = current->left;
			else
				current->parent->left = current->left;
			delete current;
		}
		else{
			node* moving_node = current->left;
			while(moving_node->right != nullptr)
				moving_node = moving_node->right;
			if(moving_node->left != nullptr)
				moving_node->left->parent = moving_node->parent;
			if(moving_node->parent->left == moving_node)
				moving_node->parent->left = moving_node->left;
			else
				moving_node->parent->right = moving_node->left;		
			if(current == root){
				root = moving_node;
				moving_node->left = current->left;
				moving_node->right = current->right;
				moving_node->parent = current->parent;
				delete current;
				return;
			}
			moving_node->left = current->left;
			moving_node->right = current->right;
			moving_node->parent = current->parent;
			if(moving_node->parent->left == current)
				moving_node->parent->left = moving_node;
			else
				moving_node->parent->right = moving_node;
			if(moving_node->left != nullptr)
				moving_node->left->parent = moving_node;
			if(moving_node->right != nullptr)
				moving_node->right->parent = moving_node;
			delete current;
			return;
		}
	}
	
	void traverse(node* tmp){
		if(tmp == nullptr)
			return;
		traverse(tmp->left);
		cout << tmp->value << "" "";
		traverse(tmp->right);
	}
	void traverse_left(node* tmp){
		if(tmp == nullptr)
			return;
		traverse_left(tmp->left);
		if(tmp->left != nullptr)
			cout << tmp->left->value << "" "";
		else
			cout << ""0 "";
		traverse_left(tmp->right);
	}
	void traverse_right(node* tmp){
		if(tmp == nullptr)
			return;
		traverse_right(tmp->left);
		if(tmp->right != nullptr)
			cout << tmp->right->value << "" "";
		else
			cout << ""0 "";
		traverse_right(tmp->right);
	}
	int find(int n){
		node *tmp = root;
		while(tmp != nullptr){
			if(n == tmp->value)
				return 1;
			if(n < tmp->value)
				tmp = tmp->left;
			else
				tmp = tmp->right;
		}
		return 0;
	}
};

int main() {
	int n, flag = 0;
	while(cin >> n){
		if(flag == 1)
			cout << ""\n"";
		if(flag == 0)
			flag = 1;
		BST T = BST();
		while(1){
			if(n == -1)
				break;
			if(T.find(n) == 0)
				T.add_node(n);
			else
				T.delete_node(n);
		  	cin >> n;
	  	}
	  	cout << ""node: "";
	  	T.traverse(T.root);
		cout<<""\nleft: "";
		T.traverse_left(T.root);
		cout<<""\nright: "";
		T.traverse_right(T.root);
		cout<<""\n"";
  	}
}"
thJ5wrxm,anmp pythlon error,G0nz0uk,Python,Sunday 12th of November 2023 10:20:02 AM CDT," python3 snmpv2.py
Traceback (most recent call last):
  File ""/usr/local/lib/python3.6/site-packages/pysnmp/carrier/asyncore/dispatch.py"", line 46, in runDispatcher
    use_poll=True, map=self.__sockMap, count=1)
  File ""/usr/lib64/python3.6/asyncore.py"", line 207, in loop
    poll_fun(timeout, map)
  File ""/usr/lib64/python3.6/asyncore.py"", line 188, in poll2
    readwrite(obj, flags)
  File ""/usr/lib64/python3.6/asyncore.py"", line 123, in readwrite
    obj.handle_error()
  File ""/usr/lib64/python3.6/asyncore.py"", line 108, in readwrite
    obj.handle_read_event()
  File ""/usr/lib64/python3.6/asyncore.py"", line 423, in handle_read_event
    self.handle_read()
  File ""/usr/local/lib/python3.6/site-packages/pysnmp/carrier/asyncore/dgram/base.py"", line 170, in handle_read
    self._cbFun(self, transportAddress, incomingMessage)
  File ""/usr/local/lib/python3.6/site-packages/pysnmp/carrier/base.py"", line 85, in _cbFun
    self, transportDomain, transportAddress, incomingMessage
  File ""/usr/local/lib/python3.6/site-packages/pysnmp/entity/engine.py"", line 152, in __receiveMessageCbFun
    self, transportDomain, transportAddress, wholeMsg
  File ""/usr/local/lib/python3.6/site-packages/pysnmp/proto/rfc3412.py"", line 291, in receiveMessage
    msgVersion = verdec.decodeMessageVersion(wholeMsg)
  File ""/usr/local/lib/python3.6/site-packages/pysnmp/proto/api/verdec.py"", line 17, in decodeMessageVersion
    recursiveFlag=False, substrateFun=lambda a, b, c: (a, b[:c])
  File ""/usr/local/lib/python3.6/site-packages/pyasn1/codec/ber/decoder.py"", line 2003, in __call__
    for asn1Object in streamingDecoder:
  File ""/usr/local/lib/python3.6/site-packages/pyasn1/codec/ber/decoder.py"", line 1919, in __iter__
    self._substrate, self._asn1Spec, **self._options):
  File ""/usr/local/lib/python3.6/site-packages/pyasn1/codec/ber/decoder.py"", line 1781, in __call__
    self, substrateFun, **options):
  File ""/usr/local/lib/python3.6/site-packages/pyasn1/codec/ber/decoder.py"", line 654, in valueDecoder
    for chunk in substrateFun(asn1Object, substrate, length, options):
TypeError: <lambda>() takes 3 positional arguments but 4 were given

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""snmpv2.py"", line 33, in <module>
    snmp_walk(remote_ip, oid='.1.3.6.1.2.1')
  File ""snmpv2.py"", line 16, in snmp_walk
    lookupMib=False)
  File ""/usr/local/lib/python3.6/site-packages/pysnmp/hlapi/asyncore/sync/cmdgen.py"", line 567, in bulkCmd
    snmpEngine.transportDispatcher.runDispatcher()
  File ""/usr/local/lib/python3.6/site-packages/pysnmp/carrier/asyncore/dispatch.py"", line 50, in runDispatcher
    raise PySnmpError('poll error: %s' % ';'.join(format_exception(*exc_info())))
pysnmp.error.PySnmpError: poll error: Traceback (most recent call last):
;  File ""/usr/local/lib/python3.6/site-packages/pysnmp/carrier/asyncore/dispatch.py"", line 46, in runDispatcher
    use_poll=True, map=self.__sockMap, count=1)
;  File ""/usr/lib64/python3.6/asyncore.py"", line 207, in loop
    poll_fun(timeout, map)
;  File ""/usr/lib64/python3.6/asyncore.py"", line 188, in poll2
    readwrite(obj, flags)
;  File ""/usr/lib64/python3.6/asyncore.py"", line 123, in readwrite
    obj.handle_error()
;  File ""/usr/lib64/python3.6/asyncore.py"", line 108, in readwrite
    obj.handle_read_event()
;  File ""/usr/lib64/python3.6/asyncore.py"", line 423, in handle_read_event
    self.handle_read()
;  File ""/usr/local/lib/python3.6/site-packages/pysnmp/carrier/asyncore/dgram/base.py"", line 170, in handle_read
    self._cbFun(self, transportAddress, incomingMessage)
;  File ""/usr/local/lib/python3.6/site-packages/pysnmp/carrier/base.py"", line 85, in _cbFun
    self, transportDomain, transportAddress, incomingMessage
;  File ""/usr/local/lib/python3.6/site-packages/pysnmp/entity/engine.py"", line 152, in __receiveMessageCbFun
    self, transportDomain, transportAddress, wholeMsg
;  File ""/usr/local/lib/python3.6/site-packages/pysnmp/proto/rfc3412.py"", line 291, in receiveMessage
    msgVersion = verdec.decodeMessageVersion(wholeMsg)
;  File ""/usr/local/lib/python3.6/site-packages/pysnmp/proto/api/verdec.py"", line 17, in decodeMessageVersion
    recursiveFlag=False, substrateFun=lambda a, b, c: (a, b[:c])
;  File ""/usr/local/lib/python3.6/site-packages/pyasn1/codec/ber/decoder.py"", line 2003, in __call__
    for asn1Object in streamingDecoder:
;  File ""/usr/local/lib/python3.6/site-packages/pyasn1/codec/ber/decoder.py"", line 1919, in __iter__
    self._substrate, self._asn1Spec, **self._options):
;  File ""/usr/local/lib/python3.6/site-packages/pyasn1/codec/ber/decoder.py"", line 1781, in __call__
    self, substrateFun, **options):
;  File ""/usr/local/lib/python3.6/site-packages/pyasn1/codec/ber/decoder.py"", line 654, in valueDecoder
    for chunk in substrateFun(asn1Object, substrate, length, options):
;TypeError: <lambda>() takes 3 positional arguments but 4 were given
caused by <class 'TypeError'>: <lambda>() takes 3 positional arguments but 4 were given
"
